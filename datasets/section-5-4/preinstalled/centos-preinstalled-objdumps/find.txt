
centos-preinstalled/find:     file format elf32-littlearm


Disassembly of section .init:

00011fdc <_init@@Base>:
   11fdc:	push	{r3, lr}
   11fe0:	bl	1292c <__assert_fail@plt+0x258>
   11fe4:	pop	{r3, pc}

Disassembly of section .plt:

00011fe8 <fdopen@plt-0x14>:
   11fe8:	push	{lr}		; (str lr, [sp, #-4]!)
   11fec:	ldr	lr, [pc, #4]	; 11ff8 <_init@@Base+0x1c>
   11ff0:	add	lr, pc, lr
   11ff4:	ldr	pc, [lr, #8]!
   11ff8:	andeq	r4, r3, r8

00011ffc <fdopen@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #52, 20	; 0x34000
   12004:	ldr	pc, [ip, #8]!

00012008 <fstatfs64@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #52, 20	; 0x34000
   12010:	ldr	pc, [ip, #0]!

00012014 <calloc@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #208896	; 0x33000
   1201c:	ldr	pc, [ip, #4088]!	; 0xff8

00012020 <endgrent@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #208896	; 0x33000
   12028:	ldr	pc, [ip, #4080]!	; 0xff0

0001202c <raise@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #208896	; 0x33000
   12034:	ldr	pc, [ip, #4072]!	; 0xfe8

00012038 <__getdelim@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #208896	; 0x33000
   12040:	ldr	pc, [ip, #4064]!	; 0xfe0

00012044 <getpwnam@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #208896	; 0x33000
   1204c:	ldr	pc, [ip, #4056]!	; 0xfd8

00012050 <is_selinux_enabled@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #208896	; 0x33000
   12058:	ldr	pc, [ip, #4048]!	; 0xfd0

0001205c <strcmp@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #208896	; 0x33000
   12064:	ldr	pc, [ip, #4040]!	; 0xfc8

00012068 <strtol@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #208896	; 0x33000
   12070:	ldr	pc, [ip, #4032]!	; 0xfc0

00012074 <getpwuid@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #208896	; 0x33000
   1207c:	ldr	pc, [ip, #4024]!	; 0xfb8

00012080 <mktime@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #208896	; 0x33000
   12088:	ldr	pc, [ip, #4016]!	; 0xfb0

0001208c <fflush@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #208896	; 0x33000
   12094:	ldr	pc, [ip, #4008]!	; 0xfa8

00012098 <unlinkat@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #208896	; 0x33000
   120a0:	ldr	pc, [ip, #4000]!	; 0xfa0

000120a4 <wcwidth@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #208896	; 0x33000
   120ac:	ldr	pc, [ip, #3992]!	; 0xf98

000120b0 <lsetfilecon@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #208896	; 0x33000
   120b8:	ldr	pc, [ip, #3984]!	; 0xf90

000120bc <memmove@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #208896	; 0x33000
   120c4:	ldr	pc, [ip, #3976]!	; 0xf88

000120c8 <free@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #208896	; 0x33000
   120d0:	ldr	pc, [ip, #3968]!	; 0xf80

000120d4 <faccessat@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #208896	; 0x33000
   120dc:	ldr	pc, [ip, #3960]!	; 0xf78

000120e0 <ferror@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #208896	; 0x33000
   120e8:	ldr	pc, [ip, #3952]!	; 0xf70

000120ec <clock_gettime@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #208896	; 0x33000
   120f4:	ldr	pc, [ip, #3944]!	; 0xf68

000120f8 <_exit@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #208896	; 0x33000
   12100:	ldr	pc, [ip, #3936]!	; 0xf60

00012104 <memcpy@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #208896	; 0x33000
   1210c:	ldr	pc, [ip, #3928]!	; 0xf58

00012110 <execvp@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #208896	; 0x33000
   12118:	ldr	pc, [ip, #3920]!	; 0xf50

0001211c <__strtoull_internal@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #208896	; 0x33000
   12124:	ldr	pc, [ip, #3912]!	; 0xf48

00012128 <mbsinit@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #208896	; 0x33000
   12130:	ldr	pc, [ip, #3904]!	; 0xf40

00012134 <signal@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #208896	; 0x33000
   1213c:	ldr	pc, [ip, #3896]!	; 0xf38

00012140 <time@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #208896	; 0x33000
   12148:	ldr	pc, [ip, #3888]!	; 0xf30

0001214c <__strtok_r@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #208896	; 0x33000
   12154:	ldr	pc, [ip, #3880]!	; 0xf28

00012158 <memcmp@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #208896	; 0x33000
   12160:	ldr	pc, [ip, #3872]!	; 0xf20

00012164 <uname@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #208896	; 0x33000
   1216c:	ldr	pc, [ip, #3864]!	; 0xf18

00012170 <ctime@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #208896	; 0x33000
   12178:	ldr	pc, [ip, #3856]!	; 0xf10

0001217c <dcgettext@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #208896	; 0x33000
   12184:	ldr	pc, [ip, #3848]!	; 0xf08

00012188 <__stack_chk_fail@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #208896	; 0x33000
   12190:	ldr	pc, [ip, #3840]!	; 0xf00

00012194 <sysconf@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #208896	; 0x33000
   1219c:	ldr	pc, [ip, #3832]!	; 0xef8

000121a0 <getrlimit64@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #208896	; 0x33000
   121a8:	ldr	pc, [ip, #3824]!	; 0xef0

000121ac <realloc@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #208896	; 0x33000
   121b4:	ldr	pc, [ip, #3816]!	; 0xee8

000121b8 <fgetfilecon@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #208896	; 0x33000
   121c0:	ldr	pc, [ip, #3808]!	; 0xee0

000121c4 <textdomain@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #208896	; 0x33000
   121cc:	ldr	pc, [ip, #3800]!	; 0xed8

000121d0 <iswcntrl@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #208896	; 0x33000
   121d8:	ldr	pc, [ip, #3792]!	; 0xed0

000121dc <chdir@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #208896	; 0x33000
   121e4:	ldr	pc, [ip, #3784]!	; 0xec8

000121e8 <__strndup@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #208896	; 0x33000
   121f0:	ldr	pc, [ip, #3776]!	; 0xec0

000121f4 <__fxstatat64@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #208896	; 0x33000
   121fc:	ldr	pc, [ip, #3768]!	; 0xeb8

00012200 <iswprint@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #208896	; 0x33000
   12208:	ldr	pc, [ip, #3760]!	; 0xeb0

0001220c <__fxstat64@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #208896	; 0x33000
   12214:	ldr	pc, [ip, #3752]!	; 0xea8

00012218 <__poll_chk@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #208896	; 0x33000
   12220:	ldr	pc, [ip, #3744]!	; 0xea0

00012224 <readlink@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #208896	; 0x33000
   1222c:	ldr	pc, [ip, #3736]!	; 0xe98

00012230 <__memcpy_chk@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #208896	; 0x33000
   12238:	ldr	pc, [ip, #3728]!	; 0xe90

0001223c <_IO_putc@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #208896	; 0x33000
   12244:	ldr	pc, [ip, #3720]!	; 0xe88

00012248 <fwrite@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #208896	; 0x33000
   12250:	ldr	pc, [ip, #3712]!	; 0xe80

00012254 <strcat@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #208896	; 0x33000
   1225c:	ldr	pc, [ip, #3704]!	; 0xe78

00012260 <lseek64@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #208896	; 0x33000
   12268:	ldr	pc, [ip, #3696]!	; 0xe70

0001226c <__stpcpy_chk@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #208896	; 0x33000
   12274:	ldr	pc, [ip, #3688]!	; 0xe68

00012278 <waitpid@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #208896	; 0x33000
   12280:	ldr	pc, [ip, #3680]!	; 0xe60

00012284 <__ctype_get_mb_cur_max@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #208896	; 0x33000
   1228c:	ldr	pc, [ip, #3672]!	; 0xe58

00012290 <hasmntopt@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #208896	; 0x33000
   12298:	ldr	pc, [ip, #3664]!	; 0xe50

0001229c <strcpy@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #208896	; 0x33000
   122a4:	ldr	pc, [ip, #3656]!	; 0xe48

000122a8 <gettimeofday@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #208896	; 0x33000
   122b0:	ldr	pc, [ip, #3648]!	; 0xe40

000122b4 <__fpending@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #208896	; 0x33000
   122bc:	ldr	pc, [ip, #3640]!	; 0xe38

000122c0 <mbrtowc@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #208896	; 0x33000
   122c8:	ldr	pc, [ip, #3632]!	; 0xe30

000122cc <error@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #208896	; 0x33000
   122d4:	ldr	pc, [ip, #3624]!	; 0xe28

000122d8 <getmntent@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #208896	; 0x33000
   122e0:	ldr	pc, [ip, #3616]!	; 0xe20

000122e4 <opendir@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #208896	; 0x33000
   122ec:	ldr	pc, [ip, #3608]!	; 0xe18

000122f0 <fnmatch@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #208896	; 0x33000
   122f8:	ldr	pc, [ip, #3600]!	; 0xe10

000122fc <open64@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #208896	; 0x33000
   12304:	ldr	pc, [ip, #3592]!	; 0xe08

00012308 <getenv@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #208896	; 0x33000
   12310:	ldr	pc, [ip, #3584]!	; 0xe00

00012314 <lgetfilecon@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #208896	; 0x33000
   1231c:	ldr	pc, [ip, #3576]!	; 0xdf8

00012320 <puts@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #208896	; 0x33000
   12328:	ldr	pc, [ip, #3568]!	; 0xdf0

0001232c <malloc@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #208896	; 0x33000
   12334:	ldr	pc, [ip, #3560]!	; 0xde8

00012338 <__libc_start_main@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #208896	; 0x33000
   12340:	ldr	pc, [ip, #3552]!	; 0xde0

00012344 <readlinkat@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #208896	; 0x33000
   1234c:	ldr	pc, [ip, #3544]!	; 0xdd8

00012350 <strftime@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #208896	; 0x33000
   12358:	ldr	pc, [ip, #3536]!	; 0xdd0

0001235c <__vfprintf_chk@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #208896	; 0x33000
   12364:	ldr	pc, [ip, #3528]!	; 0xdc8

00012368 <__freading@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #208896	; 0x33000
   12370:	ldr	pc, [ip, #3520]!	; 0xdc0

00012374 <localtime@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #208896	; 0x33000
   1237c:	ldr	pc, [ip, #3512]!	; 0xdb8

00012380 <modf@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #208896	; 0x33000
   12388:	ldr	pc, [ip, #3504]!	; 0xdb0

0001238c <__gmon_start__@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #208896	; 0x33000
   12394:	ldr	pc, [ip, #3496]!	; 0xda8

00012398 <__ctype_b_loc@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #208896	; 0x33000
   123a0:	ldr	pc, [ip, #3488]!	; 0xda0

000123a4 <getcwd@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #208896	; 0x33000
   123ac:	ldr	pc, [ip, #3480]!	; 0xd98

000123b0 <exit@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #208896	; 0x33000
   123b8:	ldr	pc, [ip, #3472]!	; 0xd90

000123bc <getfilecon@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #208896	; 0x33000
   123c4:	ldr	pc, [ip, #3464]!	; 0xd88

000123c8 <strtoul@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #208896	; 0x33000
   123d0:	ldr	pc, [ip, #3456]!	; 0xd80

000123d4 <strlen@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #208896	; 0x33000
   123dc:	ldr	pc, [ip, #3448]!	; 0xd78

000123e0 <strchr@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #208896	; 0x33000
   123e8:	ldr	pc, [ip, #3440]!	; 0xd70

000123ec <setenv@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #208896	; 0x33000
   123f4:	ldr	pc, [ip, #3432]!	; 0xd68

000123f8 <openat64@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #208896	; 0x33000
   12400:	ldr	pc, [ip, #3424]!	; 0xd60

00012404 <memrchr@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #208896	; 0x33000
   1240c:	ldr	pc, [ip, #3416]!	; 0xd58

00012410 <re_match@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #208896	; 0x33000
   12418:	ldr	pc, [ip, #3408]!	; 0xd50

0001241c <ungetc@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #208896	; 0x33000
   12424:	ldr	pc, [ip, #3400]!	; 0xd48

00012428 <fcntl@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #208896	; 0x33000
   12430:	ldr	pc, [ip, #3392]!	; 0xd40

00012434 <__errno_location@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #208896	; 0x33000
   1243c:	ldr	pc, [ip, #3384]!	; 0xd38

00012440 <__sprintf_chk@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #208896	; 0x33000
   12448:	ldr	pc, [ip, #3376]!	; 0xd30

0001244c <__cxa_atexit@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #208896	; 0x33000
   12454:	ldr	pc, [ip, #3368]!	; 0xd28

00012458 <__strdup@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #208896	; 0x33000
   12460:	ldr	pc, [ip, #3360]!	; 0xd20

00012464 <memset@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #208896	; 0x33000
   1246c:	ldr	pc, [ip, #3352]!	; 0xd18

00012470 <bsearch@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #208896	; 0x33000
   12478:	ldr	pc, [ip, #3344]!	; 0xd10

0001247c <putchar@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #208896	; 0x33000
   12484:	ldr	pc, [ip, #3336]!	; 0xd08

00012488 <strncpy@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #208896	; 0x33000
   12490:	ldr	pc, [ip, #3328]!	; 0xd00

00012494 <fscanf@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #208896	; 0x33000
   1249c:	ldr	pc, [ip, #3320]!	; 0xcf8

000124a0 <__printf_chk@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #208896	; 0x33000
   124a8:	ldr	pc, [ip, #3312]!	; 0xcf0

000124ac <strtod@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #208896	; 0x33000
   124b4:	ldr	pc, [ip, #3304]!	; 0xce8

000124b8 <fileno@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #208896	; 0x33000
   124c0:	ldr	pc, [ip, #3296]!	; 0xce0

000124c4 <difftime@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #208896	; 0x33000
   124cc:	ldr	pc, [ip, #3288]!	; 0xcd8

000124d0 <__fprintf_chk@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #208896	; 0x33000
   124d8:	ldr	pc, [ip, #3280]!	; 0xcd0

000124dc <memchr@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #208896	; 0x33000
   124e4:	ldr	pc, [ip, #3272]!	; 0xcc8

000124e8 <setfilecon@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #208896	; 0x33000
   124f0:	ldr	pc, [ip, #3264]!	; 0xcc0

000124f4 <access@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #208896	; 0x33000
   124fc:	ldr	pc, [ip, #3256]!	; 0xcb8

00012500 <fclose@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #208896	; 0x33000
   12508:	ldr	pc, [ip, #3248]!	; 0xcb0

0001250c <strnlen@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #208896	; 0x33000
   12514:	ldr	pc, [ip, #3240]!	; 0xca8

00012518 <fseeko64@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #208896	; 0x33000
   12520:	ldr	pc, [ip, #3232]!	; 0xca0

00012524 <endmntent@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #208896	; 0x33000
   1252c:	ldr	pc, [ip, #3224]!	; 0xc98

00012530 <rpmatch@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #208896	; 0x33000
   12538:	ldr	pc, [ip, #3216]!	; 0xc90

0001253c <__uflow@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #208896	; 0x33000
   12544:	ldr	pc, [ip, #3208]!	; 0xc88

00012548 <setlocale@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #208896	; 0x33000
   12550:	ldr	pc, [ip, #3200]!	; 0xc80

00012554 <fork@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #208896	; 0x33000
   1255c:	ldr	pc, [ip, #3192]!	; 0xc78

00012560 <endpwent@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #208896	; 0x33000
   12568:	ldr	pc, [ip, #3184]!	; 0xc70

0001256c <strrchr@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #208896	; 0x33000
   12574:	ldr	pc, [ip, #3176]!	; 0xc68

00012578 <nl_langinfo@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #208896	; 0x33000
   12580:	ldr	pc, [ip, #3168]!	; 0xc60

00012584 <fputc@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #208896	; 0x33000
   1258c:	ldr	pc, [ip, #3160]!	; 0xc58

00012590 <localeconv@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #208896	; 0x33000
   12598:	ldr	pc, [ip, #3152]!	; 0xc50

0001259c <sprintf@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #208896	; 0x33000
   125a4:	ldr	pc, [ip, #3144]!	; 0xc48

000125a8 <readdir64@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #208896	; 0x33000
   125b0:	ldr	pc, [ip, #3136]!	; 0xc40

000125b4 <fdopendir@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #208896	; 0x33000
   125bc:	ldr	pc, [ip, #3128]!	; 0xc38

000125c0 <dirfd@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #208896	; 0x33000
   125c8:	ldr	pc, [ip, #3120]!	; 0xc30

000125cc <fchdir@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #208896	; 0x33000
   125d4:	ldr	pc, [ip, #3112]!	; 0xc28

000125d8 <fopen64@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #208896	; 0x33000
   125e0:	ldr	pc, [ip, #3104]!	; 0xc20

000125e4 <qsort@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #208896	; 0x33000
   125ec:	ldr	pc, [ip, #3096]!	; 0xc18

000125f0 <freecon@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #208896	; 0x33000
   125f8:	ldr	pc, [ip, #3088]!	; 0xc10

000125fc <strpbrk@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #208896	; 0x33000
   12604:	ldr	pc, [ip, #3080]!	; 0xc08

00012608 <setmntent@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #208896	; 0x33000
   12610:	ldr	pc, [ip, #3072]!	; 0xc00

00012614 <bindtextdomain@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #208896	; 0x33000
   1261c:	ldr	pc, [ip, #3064]!	; 0xbf8

00012620 <__xstat64@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #208896	; 0x33000
   12628:	ldr	pc, [ip, #3056]!	; 0xbf0

0001262c <isatty@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #208896	; 0x33000
   12634:	ldr	pc, [ip, #3048]!	; 0xbe8

00012638 <re_compile_pattern@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #208896	; 0x33000
   12640:	ldr	pc, [ip, #3040]!	; 0xbe0

00012644 <unsetenv@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #208896	; 0x33000
   1264c:	ldr	pc, [ip, #3032]!	; 0xbd8

00012650 <fputs@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #208896	; 0x33000
   12658:	ldr	pc, [ip, #3024]!	; 0xbd0

0001265c <strncmp@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #208896	; 0x33000
   12664:	ldr	pc, [ip, #3016]!	; 0xbc8

00012668 <re_set_syntax@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #208896	; 0x33000
   12670:	ldr	pc, [ip, #3008]!	; 0xbc0

00012674 <abort@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #208896	; 0x33000
   1267c:	ldr	pc, [ip, #3000]!	; 0xbb8

00012680 <close@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #208896	; 0x33000
   12688:	ldr	pc, [ip, #2992]!	; 0xbb0

0001268c <__lxstat64@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #208896	; 0x33000
   12694:	ldr	pc, [ip, #2984]!	; 0xba8

00012698 <closedir@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #208896	; 0x33000
   126a0:	ldr	pc, [ip, #2976]!	; 0xba0

000126a4 <getgrgid@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #208896	; 0x33000
   126ac:	ldr	pc, [ip, #2968]!	; 0xb98

000126b0 <getgrnam@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #208896	; 0x33000
   126b8:	ldr	pc, [ip, #2960]!	; 0xb90

000126bc <__snprintf_chk@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #208896	; 0x33000
   126c4:	ldr	pc, [ip, #2952]!	; 0xb88

000126c8 <strspn@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #208896	; 0x33000
   126d0:	ldr	pc, [ip, #2944]!	; 0xb80

000126d4 <__assert_fail@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #208896	; 0x33000
   126dc:	ldr	pc, [ip, #2936]!	; 0xb78

Disassembly of section .text:

000126e0 <fts_open@@Base-0x18e8c>:
   126e0:	push	{r3, lr}
   126e4:	movw	r0, #20156	; 0x4ebc
   126e8:	movw	r1, #20172	; 0x4ecc
   126ec:	movw	r3, #20132	; 0x4ea4
   126f0:	movt	r0, #3
   126f4:	movt	r1, #3
   126f8:	mov	r2, #63	; 0x3f
   126fc:	movt	r3, #3
   12700:	bl	126d4 <__assert_fail@plt>
   12704:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12708:	movw	r9, #26008	; 0x6598
   1270c:	ldr	r3, [r1]
   12710:	movt	r9, #4
   12714:	sub	sp, sp, #8
   12718:	movw	r7, #29328	; 0x7290
   1271c:	cmp	r3, #0
   12720:	ldr	r2, [r9]
   12724:	movt	r7, #4
   12728:	mov	r8, r0
   1272c:	movne	r0, r3
   12730:	movweq	r0, #62280	; 0xf348
   12734:	movteq	r0, #2
   12738:	mov	r4, r1
   1273c:	str	r2, [sp, #4]
   12740:	bl	27124 <__assert_fail@plt+0x14a50>
   12744:	bl	18454 <__assert_fail@plt+0x5d80>
   12748:	mov	r3, #0
   1274c:	mvn	r2, #99	; 0x63
   12750:	strb	r3, [r7, #40]	; 0x28
   12754:	str	r2, [r7, #16]
   12758:	str	r3, [r7, #28]
   1275c:	strb	r3, [r7, #32]
   12760:	bl	184a8 <__assert_fail@plt+0x5dd4>
   12764:	cmp	r0, #0
   12768:	bne	128b4 <__assert_fail@plt+0x1e0>
   1276c:	movw	r0, #62288	; 0xf350
   12770:	movt	r0, #2
   12774:	bl	19210 <__assert_fail@plt+0x6b3c>
   12778:	cmp	r0, #0
   1277c:	mov	r5, r0
   12780:	str	r0, [r7, #36]	; 0x24
   12784:	beq	128bc <__assert_fail@plt+0x1e8>
   12788:	movw	r5, #29372	; 0x72bc
   1278c:	movt	r5, #4
   12790:	mov	r0, r5
   12794:	bl	18e58 <__assert_fail@plt+0x6784>
   12798:	movw	r1, #15168	; 0x3b40
   1279c:	mov	r0, #6
   127a0:	movt	r1, #3
   127a4:	bl	12548 <setlocale@plt>
   127a8:	movw	r0, #13772	; 0x35cc
   127ac:	movw	r1, #62336	; 0xf380
   127b0:	movt	r0, #3
   127b4:	movt	r1, #2
   127b8:	bl	12614 <bindtextdomain@plt>
   127bc:	movw	r0, #13772	; 0x35cc
   127c0:	movt	r0, #3
   127c4:	bl	121c4 <textdomain@plt>
   127c8:	movw	r0, #4336	; 0x10f0
   127cc:	movt	r0, #2
   127d0:	bl	2ef84 <fts_children@@Base+0x2bb8>
   127d4:	mov	r1, r4
   127d8:	mov	r0, r8
   127dc:	bl	18a6c <__assert_fail@plt+0x6398>
   127e0:	ldr	r3, [r5, #44]	; 0x2c
   127e4:	mov	r1, r4
   127e8:	tst	r3, #2
   127ec:	movwne	r3, #34716	; 0x879c
   127f0:	movtne	r3, #1
   127f4:	strne	r3, [r5, #52]	; 0x34
   127f8:	mov	r6, r0
   127fc:	mov	r0, r8
   12800:	mov	r2, r6
   12804:	rsb	r8, r6, r8
   12808:	bl	17598 <__assert_fail@plt+0x4ec4>
   1280c:	cmp	r8, #0
   12810:	add	r4, r4, r6, lsl #2
   12814:	movgt	r5, #0
   12818:	mov	sl, r0
   1281c:	bgt	12850 <__assert_fail@plt+0x17c>
   12820:	b	1286c <__assert_fail@plt+0x198>
   12824:	ldr	r6, [r4, #-4]
   12828:	mov	r0, r6
   1282c:	bl	123d4 <strlen@plt>
   12830:	str	r0, [r7, #20]
   12834:	mov	r0, r6
   12838:	bl	12c78 <__assert_fail@plt+0x5a4>
   1283c:	cmp	r0, #0
   12840:	beq	12888 <__assert_fail@plt+0x1b4>
   12844:	add	r5, r5, #1
   12848:	cmp	r5, r8
   1284c:	beq	128a4 <__assert_fail@plt+0x1d0>
   12850:	ldr	r0, [r4], #4
   12854:	mov	r1, #1
   12858:	bl	189e8 <__assert_fail@plt+0x6314>
   1285c:	cmp	r0, #0
   12860:	beq	12824 <__assert_fail@plt+0x150>
   12864:	cmp	r5, #0
   12868:	bne	128a4 <__assert_fail@plt+0x1d0>
   1286c:	add	r0, sp, #8
   12870:	mov	r3, #46	; 0x2e
   12874:	strh	r3, [r0, #-8]!
   12878:	mov	r0, sp
   1287c:	bl	12c78 <__assert_fail@plt+0x5a4>
   12880:	cmp	r0, #0
   12884:	bne	128a4 <__assert_fail@plt+0x1d0>
   12888:	ldr	r2, [sp, #4]
   1288c:	ldr	r3, [r9]
   12890:	ldr	r0, [r7, #28]
   12894:	cmp	r2, r3
   12898:	bne	128ec <__assert_fail@plt+0x218>
   1289c:	add	sp, sp, #8
   128a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128a4:	mov	r0, sl
   128a8:	bl	15190 <__assert_fail@plt+0x2abc>
   128ac:	bl	184c4 <__assert_fail@plt+0x5df0>
   128b0:	b	12888 <__assert_fail@plt+0x1b4>
   128b4:	bl	20858 <__assert_fail@plt+0xe184>
   128b8:	b	1276c <__assert_fail@plt+0x98>
   128bc:	bl	12434 <__errno_location@plt>
   128c0:	mov	r2, #5
   128c4:	movw	r1, #62292	; 0xf354
   128c8:	movt	r1, #2
   128cc:	ldr	r6, [r0]
   128d0:	mov	r0, r5
   128d4:	bl	1217c <dcgettext@plt>
   128d8:	mov	r1, r6
   128dc:	mov	r2, r0
   128e0:	mov	r0, #1
   128e4:	bl	122cc <error@plt>
   128e8:	b	12788 <__assert_fail@plt+0xb4>
   128ec:	bl	12188 <__stack_chk_fail@plt>
   128f0:	mov	fp, #0
   128f4:	mov	lr, #0
   128f8:	pop	{r1}		; (ldr r1, [sp], #4)
   128fc:	mov	r2, sp
   12900:	push	{r2}		; (str r2, [sp, #-4]!)
   12904:	push	{r0}		; (str r0, [sp, #-4]!)
   12908:	ldr	ip, [pc, #16]	; 12920 <__assert_fail@plt+0x24c>
   1290c:	push	{ip}		; (str ip, [sp, #-4]!)
   12910:	ldr	r0, [pc, #12]	; 12924 <__assert_fail@plt+0x250>
   12914:	ldr	r3, [pc, #12]	; 12928 <__assert_fail@plt+0x254>
   12918:	bl	12338 <__libc_start_main@plt>
   1291c:	bl	12674 <abort@plt>
   12920:	andeq	lr, r2, r0, lsl #31
   12924:	andeq	r2, r1, r4, lsl #14
   12928:	andeq	lr, r2, ip, lsl pc
   1292c:	ldr	r3, [pc, #20]	; 12948 <__assert_fail@plt+0x274>
   12930:	ldr	r2, [pc, #20]	; 1294c <__assert_fail@plt+0x278>
   12934:	add	r3, pc, r3
   12938:	ldr	r2, [r3, r2]
   1293c:	cmp	r2, #0
   12940:	bxeq	lr
   12944:	b	1238c <__gmon_start__@plt>
   12948:	andeq	r3, r3, r4, asr #13
   1294c:	andeq	r0, r0, r8, asr r2
   12950:	push	{r3, lr}
   12954:	movw	r0, #25996	; 0x658c
   12958:	ldr	r3, [pc, #36]	; 12984 <__assert_fail@plt+0x2b0>
   1295c:	movt	r0, #4
   12960:	rsb	r3, r0, r3
   12964:	cmp	r3, #6
   12968:	popls	{r3, pc}
   1296c:	movw	r3, #0
   12970:	movt	r3, #0
   12974:	cmp	r3, #0
   12978:	popeq	{r3, pc}
   1297c:	blx	r3
   12980:	pop	{r3, pc}
   12984:	andeq	r6, r4, pc, lsl #11
   12988:	push	{r3, lr}
   1298c:	movw	r0, #25996	; 0x658c
   12990:	movw	r3, #25996	; 0x658c
   12994:	movt	r0, #4
   12998:	movt	r3, #4
   1299c:	rsb	r3, r0, r3
   129a0:	asr	r3, r3, #2
   129a4:	add	r3, r3, r3, lsr #31
   129a8:	asrs	r1, r3, #1
   129ac:	popeq	{r3, pc}
   129b0:	movw	r2, #0
   129b4:	movt	r2, #0
   129b8:	cmp	r2, #0
   129bc:	popeq	{r3, pc}
   129c0:	blx	r2
   129c4:	pop	{r3, pc}
   129c8:	push	{r4, lr}
   129cc:	movw	r4, #26028	; 0x65ac
   129d0:	movt	r4, #4
   129d4:	ldrb	r3, [r4]
   129d8:	cmp	r3, #0
   129dc:	popne	{r4, pc}
   129e0:	bl	12950 <__assert_fail@plt+0x27c>
   129e4:	mov	r3, #1
   129e8:	strb	r3, [r4]
   129ec:	pop	{r4, pc}
   129f0:	movw	r0, #24308	; 0x5ef4
   129f4:	movt	r0, #4
   129f8:	push	{r3, lr}
   129fc:	ldr	r3, [r0]
   12a00:	cmp	r3, #0
   12a04:	beq	12a1c <__assert_fail@plt+0x348>
   12a08:	movw	r3, #0
   12a0c:	movt	r3, #0
   12a10:	cmp	r3, #0
   12a14:	beq	12a1c <__assert_fail@plt+0x348>
   12a18:	blx	r3
   12a1c:	pop	{r3, lr}
   12a20:	b	12988 <__assert_fail@plt+0x2b4>
   12a24:	push	{r4, lr}
   12a28:	movw	r4, #26008	; 0x6598
   12a2c:	movt	r4, #4
   12a30:	sub	sp, sp, #112	; 0x70
   12a34:	movw	r3, #29372	; 0x72bc
   12a38:	movt	r3, #4
   12a3c:	ldr	r2, [r4]
   12a40:	mov	r1, sp
   12a44:	ldr	r3, [r3, #52]	; 0x34
   12a48:	str	r2, [sp, #108]	; 0x6c
   12a4c:	blx	r3
   12a50:	cmp	r0, #0
   12a54:	beq	12a6c <__assert_fail@plt+0x398>
   12a58:	bl	12434 <__errno_location@plt>
   12a5c:	ldr	r0, [r0]
   12a60:	subs	r3, r0, #40	; 0x28
   12a64:	rsbs	r0, r3, #0
   12a68:	adcs	r0, r0, r3
   12a6c:	ldr	r2, [sp, #108]	; 0x6c
   12a70:	ldr	r3, [r4]
   12a74:	cmp	r2, r3
   12a78:	bne	12a84 <__assert_fail@plt+0x3b0>
   12a7c:	add	sp, sp, #112	; 0x70
   12a80:	pop	{r4, pc}
   12a84:	bl	12188 <__stack_chk_fail@plt>
   12a88:	sub	r3, r0, #1
   12a8c:	push	{lr}		; (str lr, [sp, #-4]!)
   12a90:	sub	sp, sp, #12
   12a94:	cmp	r3, #13
   12a98:	ldrls	pc, [pc, r3, lsl #2]
   12a9c:	b	12b84 <__assert_fail@plt+0x4b0>
   12aa0:	andeq	r2, r1, r8, ror fp
   12aa4:	ldrdeq	r2, [r1], -r8
   12aa8:	andeq	r2, r1, r8, ror #21
   12aac:	strdeq	r2, [r1], -r4
   12ab0:	andeq	r2, r1, r0, lsl #22
   12ab4:	andeq	r2, r1, ip, lsl #22
   12ab8:	andeq	r2, r1, r8, lsl fp
   12abc:	andeq	r2, r1, r4, lsr #22
   12ac0:	andeq	r2, r1, r0, lsr fp
   12ac4:	andeq	r2, r1, ip, lsr fp
   12ac8:	andeq	r2, r1, r8, asr #22
   12acc:	andeq	r2, r1, r4, asr fp
   12ad0:	andeq	r2, r1, r0, ror #22
   12ad4:	andeq	r2, r1, ip, ror #22
   12ad8:	movw	r0, #61416	; 0xefe8
   12adc:	movt	r0, #2
   12ae0:	add	sp, sp, #12
   12ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ae8:	movw	r0, #61424	; 0xeff0
   12aec:	movt	r0, #2
   12af0:	b	12ae0 <__assert_fail@plt+0x40c>
   12af4:	movw	r0, #61436	; 0xeffc
   12af8:	movt	r0, #2
   12afc:	b	12ae0 <__assert_fail@plt+0x40c>
   12b00:	movw	r0, #61444	; 0xf004
   12b04:	movt	r0, #2
   12b08:	b	12ae0 <__assert_fail@plt+0x40c>
   12b0c:	movw	r0, #61452	; 0xf00c
   12b10:	movt	r0, #2
   12b14:	b	12ae0 <__assert_fail@plt+0x40c>
   12b18:	movw	r0, #61460	; 0xf014
   12b1c:	movt	r0, #2
   12b20:	b	12ae0 <__assert_fail@plt+0x40c>
   12b24:	movw	r0, #61468	; 0xf01c
   12b28:	movt	r0, #2
   12b2c:	b	12ae0 <__assert_fail@plt+0x40c>
   12b30:	movw	r0, #61476	; 0xf024
   12b34:	movt	r0, #2
   12b38:	b	12ae0 <__assert_fail@plt+0x40c>
   12b3c:	movw	r0, #61488	; 0xf030
   12b40:	movt	r0, #2
   12b44:	b	12ae0 <__assert_fail@plt+0x40c>
   12b48:	movw	r0, #61496	; 0xf038
   12b4c:	movt	r0, #2
   12b50:	b	12ae0 <__assert_fail@plt+0x40c>
   12b54:	movw	r0, #61508	; 0xf044
   12b58:	movt	r0, #2
   12b5c:	b	12ae0 <__assert_fail@plt+0x40c>
   12b60:	movw	r0, #61516	; 0xf04c
   12b64:	movt	r0, #2
   12b68:	b	12ae0 <__assert_fail@plt+0x40c>
   12b6c:	movw	r0, #61528	; 0xf058
   12b70:	movt	r0, #2
   12b74:	b	12ae0 <__assert_fail@plt+0x40c>
   12b78:	movw	r0, #61408	; 0xefe0
   12b7c:	movt	r0, #2
   12b80:	b	12ae0 <__assert_fail@plt+0x40c>
   12b84:	str	r0, [sp]
   12b88:	movw	r3, #61536	; 0xf060
   12b8c:	movw	r0, #26032	; 0x65b0
   12b90:	movt	r3, #2
   12b94:	movt	r0, #4
   12b98:	mov	r1, #1
   12b9c:	mov	r2, #10
   12ba0:	bl	12440 <__sprintf_chk@plt>
   12ba4:	movw	r0, #26032	; 0x65b0
   12ba8:	movt	r0, #4
   12bac:	b	12ae0 <__assert_fail@plt+0x40c>
   12bb0:	push	{r4, lr}
   12bb4:	movw	r4, #25188	; 0x6264
   12bb8:	movt	r4, #4
   12bbc:	ldr	r2, [r4]
   12bc0:	tst	r2, #512	; 0x200
   12bc4:	popeq	{r4, pc}
   12bc8:	adds	r2, r0, #100	; 0x64
   12bcc:	movne	r2, #1
   12bd0:	ands	r2, r2, r0, lsr #31
   12bd4:	bne	12c30 <__assert_fail@plt+0x55c>
   12bd8:	ldr	r1, [r4, #4]
   12bdc:	movw	r2, #29328	; 0x7290
   12be0:	movt	r2, #4
   12be4:	cmp	r1, #0
   12be8:	str	r0, [r2, #16]
   12bec:	popge	{r4, pc}
   12bf0:	cmn	r0, #100	; 0x64
   12bf4:	streq	r0, [r4, #4]
   12bf8:	popeq	{r4, pc}
   12bfc:	cmp	r0, #0
   12c00:	bge	12c24 <__assert_fail@plt+0x550>
   12c04:	movw	r0, #61588	; 0xf094
   12c08:	movw	r1, #61576	; 0xf088
   12c0c:	movw	r3, #61376	; 0xefc0
   12c10:	movt	r0, #2
   12c14:	movt	r1, #2
   12c18:	mov	r2, #138	; 0x8a
   12c1c:	movt	r3, #2
   12c20:	bl	126d4 <__assert_fail@plt>
   12c24:	bl	210c4 <__assert_fail@plt+0xe9f0>
   12c28:	str	r0, [r4, #4]
   12c2c:	pop	{r4, pc}
   12c30:	movw	r0, #61544	; 0xf068
   12c34:	movw	r1, #61576	; 0xf088
   12c38:	movw	r3, #61376	; 0xefc0
   12c3c:	movt	r0, #2
   12c40:	movt	r1, #2
   12c44:	mov	r2, #120	; 0x78
   12c48:	movt	r3, #2
   12c4c:	bl	126d4 <__assert_fail@plt>
   12c50:	push	{r4, lr}
   12c54:	movw	r4, #25188	; 0x6264
   12c58:	movt	r4, #4
   12c5c:	ldr	r0, [r4, #4]
   12c60:	cmp	r0, #0
   12c64:	poplt	{r4, pc}
   12c68:	bl	12680 <close@plt>
   12c6c:	mvn	r3, #0
   12c70:	str	r3, [r4, #4]
   12c74:	pop	{r4, pc}
   12c78:	movw	r1, #26008	; 0x6598
   12c7c:	movt	r1, #4
   12c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c84:	sub	sp, sp, #196	; 0xc4
   12c88:	ldr	r3, [r1]
   12c8c:	movw	r5, #29328	; 0x7290
   12c90:	str	r1, [sp, #52]	; 0x34
   12c94:	movt	r5, #4
   12c98:	str	r0, [sp, #60]	; 0x3c
   12c9c:	movw	r7, #29372	; 0x72bc
   12ca0:	str	r3, [sp, #188]	; 0xbc
   12ca4:	bl	123d4 <strlen@plt>
   12ca8:	movt	r7, #4
   12cac:	movw	r9, #25188	; 0x6264
   12cb0:	movt	r9, #4
   12cb4:	str	r0, [r5, #20]
   12cb8:	mvn	r0, #99	; 0x63
   12cbc:	bl	12bb0 <__assert_fail@plt+0x4dc>
   12cc0:	ldr	r3, [r7, #48]	; 0x30
   12cc4:	ldr	r2, [sp, #60]	; 0x3c
   12cc8:	cmp	r3, #1
   12ccc:	ldr	r1, [r9]
   12cd0:	str	r2, [sp, #72]	; 0x48
   12cd4:	mov	r2, #0
   12cd8:	str	r2, [sp, #76]	; 0x4c
   12cdc:	beq	13514 <__assert_fail@plt+0xe40>
   12ce0:	bcc	13508 <__assert_fail@plt+0xe34>
   12ce4:	cmp	r3, #2
   12ce8:	orreq	r1, r1, #17
   12cec:	streq	r1, [r9]
   12cf0:	ldrb	r3, [r7, #13]
   12cf4:	add	r0, sp, #72	; 0x48
   12cf8:	mov	r2, #0
   12cfc:	cmp	r3, #0
   12d00:	orrne	r1, r1, #64	; 0x40
   12d04:	strne	r1, [r9]
   12d08:	bl	2b56c <fts_open@@Base>
   12d0c:	subs	sl, r0, #0
   12d10:	beq	1355c <__assert_fail@plt+0xe88>
   12d14:	mov	fp, #-2147483648	; 0x80000000
   12d18:	movw	r3, #26016	; 0x65a0
   12d1c:	movw	lr, #16948	; 0x4234
   12d20:	movt	r3, #4
   12d24:	movt	lr, #1
   12d28:	str	r3, [sp, #40]	; 0x28
   12d2c:	str	lr, [sp, #56]	; 0x38
   12d30:	mov	r0, sl
   12d34:	bl	2babc <fts_read@@Base>
   12d38:	subs	r4, r0, #0
   12d3c:	beq	12f48 <__assert_fail@plt+0x874>
   12d40:	ldrb	r3, [r5, #32]
   12d44:	cmp	r3, #0
   12d48:	beq	12d70 <__assert_fail@plt+0x69c>
   12d4c:	ldr	r3, [r4, #48]	; 0x30
   12d50:	cmp	r3, fp
   12d54:	beq	12d74 <__assert_fail@plt+0x6a0>
   12d58:	ldr	r3, [r7, #44]	; 0x2c
   12d5c:	ldr	r1, [sp, #40]	; 0x28
   12d60:	tst	r3, #32
   12d64:	ldr	r8, [r1]
   12d68:	bne	13254 <__assert_fail@plt+0xb80>
   12d6c:	bl	18428 <__assert_fail@plt+0x5d54>
   12d70:	ldr	fp, [r4, #48]	; 0x30
   12d74:	ldr	r2, [r4, #88]	; 0x58
   12d78:	mov	r0, #0
   12d7c:	ldr	r1, [r7, #44]	; 0x2c
   12d80:	movw	r6, #29372	; 0x72bc
   12d84:	subs	r3, r2, r0
   12d88:	strb	r0, [r5, #40]	; 0x28
   12d8c:	movt	r6, #4
   12d90:	strb	r0, [r5, #4]
   12d94:	movne	r3, #1
   12d98:	cmp	r3, r0
   12d9c:	strb	r3, [r5, #5]
   12da0:	moveq	r2, r0
   12da4:	tst	r1, #4
   12da8:	str	r2, [r5, #8]
   12dac:	bne	13024 <__assert_fail@plt+0x950>
   12db0:	ldrh	r3, [r4, #60]	; 0x3c
   12db4:	cmp	r3, #6
   12db8:	beq	12dd4 <__assert_fail@plt+0x700>
   12dbc:	ldr	r3, [r4, #48]	; 0x30
   12dc0:	ldr	r2, [r9, #8]
   12dc4:	cmp	r3, r2
   12dc8:	bgt	12dd4 <__assert_fail@plt+0x700>
   12dcc:	cmp	r3, #0
   12dd0:	bne	12de0 <__assert_fail@plt+0x70c>
   12dd4:	ldr	r3, [r9]
   12dd8:	tst	r3, #512	; 0x200
   12ddc:	bne	130c4 <__assert_fail@plt+0x9f0>
   12de0:	ldr	r0, [sl, #32]
   12de4:	bl	12bb0 <__assert_fail@plt+0x4dc>
   12de8:	ldrh	r1, [r4, #60]	; 0x3c
   12dec:	ldr	r0, [r4, #48]	; 0x30
   12df0:	ldrd	r2, [r4, #168]	; 0xa8
   12df4:	cmp	r1, #7
   12df8:	cmpne	r1, #4
   12dfc:	str	r0, [r9, #8]
   12e00:	movne	r6, #0
   12e04:	moveq	r6, #1
   12e08:	strd	r2, [sp, #176]	; 0xb0
   12e0c:	beq	12fb4 <__assert_fail@plt+0x8e0>
   12e10:	cmp	r1, #2
   12e14:	beq	133c8 <__assert_fail@plt+0xcf4>
   12e18:	cmp	r1, #13
   12e1c:	beq	13484 <__assert_fail@plt+0xdb0>
   12e20:	cmp	r1, #10
   12e24:	beq	130cc <__assert_fail@plt+0x9f8>
   12e28:	sub	r3, r1, #10
   12e2c:	cmp	r3, #1
   12e30:	bls	12fc4 <__assert_fail@plt+0x8f0>
   12e34:	add	r3, sp, #80	; 0x50
   12e38:	mov	r2, #104	; 0x68
   12e3c:	add	r1, r4, #72	; 0x48
   12e40:	mov	ip, #1
   12e44:	mov	r0, r3
   12e48:	strb	ip, [r5, #4]
   12e4c:	strb	ip, [r5, #5]
   12e50:	bl	12104 <memcpy@plt>
   12e54:	ldr	r6, [sp, #96]	; 0x60
   12e58:	movw	r2, #29328	; 0x7290
   12e5c:	movt	r2, #4
   12e60:	cmp	r6, #0
   12e64:	str	r6, [sp, #68]	; 0x44
   12e68:	str	r6, [r5, #8]
   12e6c:	mov	r3, r0
   12e70:	beq	13210 <__assert_fail@plt+0xb3c>
   12e74:	ldr	r1, [r4, #48]	; 0x30
   12e78:	str	r1, [r2]
   12e7c:	ldr	r1, [r4, #28]
   12e80:	mov	r2, #0
   12e84:	add	r0, sp, #68	; 0x44
   12e88:	str	r2, [sp]
   12e8c:	add	r2, r4, #176	; 0xb0
   12e90:	bl	1888c <__assert_fail@plt+0x61b8>
   12e94:	cmp	r0, #0
   12e98:	beq	12d30 <__assert_fail@plt+0x65c>
   12e9c:	ldr	r3, [sp, #68]	; 0x44
   12ea0:	and	r3, r3, #61440	; 0xf000
   12ea4:	cmp	r3, #16384	; 0x4000
   12ea8:	bne	13004 <__assert_fail@plt+0x930>
   12eac:	ldrh	r3, [r4, #60]	; 0x3c
   12eb0:	cmp	r3, #11
   12eb4:	beq	134f4 <__assert_fail@plt+0xe20>
   12eb8:	mov	r6, #1
   12ebc:	ldr	r3, [r7, #4]
   12ec0:	movw	r8, #29372	; 0x72bc
   12ec4:	movt	r8, #4
   12ec8:	cmp	r3, #0
   12ecc:	blt	12edc <__assert_fail@plt+0x808>
   12ed0:	ldr	r2, [r4, #48]	; 0x30
   12ed4:	cmp	r3, r2
   12ed8:	ble	1349c <__assert_fail@plt+0xdc8>
   12edc:	mov	r8, #0
   12ee0:	ldrb	r3, [r7, #14]
   12ee4:	cmp	r3, #0
   12ee8:	bne	131bc <__assert_fail@plt+0xae8>
   12eec:	ldrh	r3, [r4, #60]	; 0x3c
   12ef0:	cmp	r3, #1
   12ef4:	beq	131fc <__assert_fail@plt+0xb28>
   12ef8:	cmp	r3, #6
   12efc:	beq	13470 <__assert_fail@plt+0xd9c>
   12f00:	ldr	r1, [r4, #48]	; 0x30
   12f04:	ldr	r2, [r7, #8]
   12f08:	cmp	r1, r2
   12f0c:	movlt	r8, #1
   12f10:	ldr	r1, [r7, #44]	; 0x2c
   12f14:	movw	r2, #29372	; 0x72bc
   12f18:	movt	r2, #4
   12f1c:	tst	r1, #4
   12f20:	bne	130f4 <__assert_fail@plt+0xa20>
   12f24:	cmp	r8, #0
   12f28:	beq	13160 <__assert_fail@plt+0xa8c>
   12f2c:	cmp	r3, #6
   12f30:	mov	r0, sl
   12f34:	moveq	r3, #0
   12f38:	strbeq	r3, [r5, #24]
   12f3c:	bl	2babc <fts_read@@Base>
   12f40:	subs	r4, r0, #0
   12f44:	bne	12d40 <__assert_fail@plt+0x66c>
   12f48:	mov	r0, sl
   12f4c:	bl	2b944 <fts_close@@Base>
   12f50:	cmp	r0, #0
   12f54:	moveq	r0, #1
   12f58:	beq	12f98 <__assert_fail@plt+0x8c4>
   12f5c:	bl	12434 <__errno_location@plt>
   12f60:	mov	r2, #5
   12f64:	movw	r1, #62224	; 0xf310
   12f68:	movt	r1, #2
   12f6c:	ldr	r5, [r0]
   12f70:	mov	r0, r4
   12f74:	bl	1217c <dcgettext@plt>
   12f78:	ldr	r3, [sp, #60]	; 0x3c
   12f7c:	mov	r1, r5
   12f80:	mov	r2, r0
   12f84:	mov	r0, r4
   12f88:	bl	122cc <error@plt>
   12f8c:	mov	r0, #1
   12f90:	bl	190cc <__assert_fail@plt+0x69f8>
   12f94:	mov	r0, r4
   12f98:	ldr	r1, [sp, #52]	; 0x34
   12f9c:	ldr	r2, [sp, #188]	; 0xbc
   12fa0:	ldr	r3, [r1]
   12fa4:	cmp	r2, r3
   12fa8:	bne	135ac <__assert_fail@plt+0xed8>
   12fac:	add	sp, sp, #196	; 0xc4
   12fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb4:	ldr	r0, [r4, #32]
   12fb8:	ldr	r1, [r4, #28]
   12fbc:	bl	190e4 <__assert_fail@plt+0x6a10>
   12fc0:	b	12d30 <__assert_fail@plt+0x65c>
   12fc4:	ldrb	r2, [r5, #4]
   12fc8:	movw	r3, #29328	; 0x7290
   12fcc:	movt	r3, #4
   12fd0:	cmp	r2, #0
   12fd4:	bne	135cc <__assert_fail@plt+0xef8>
   12fd8:	cmp	r1, #11
   12fdc:	ldr	r3, [r3, #8]
   12fe0:	beq	12fec <__assert_fail@plt+0x918>
   12fe4:	cmp	r3, #0
   12fe8:	bne	135b0 <__assert_fail@plt+0xedc>
   12fec:	str	r3, [sp, #68]	; 0x44
   12ff0:	ldr	r2, [r4, #48]	; 0x30
   12ff4:	cmp	r3, #0
   12ff8:	addne	r3, sp, #80	; 0x50
   12ffc:	str	r2, [r5]
   13000:	bne	12e7c <__assert_fail@plt+0x7a8>
   13004:	ldrh	r6, [r4, #60]	; 0x3c
   13008:	sub	r3, r6, #1
   1300c:	cmp	r3, #1
   13010:	bls	12eb8 <__assert_fail@plt+0x7e4>
   13014:	subs	r3, r6, #6
   13018:	rsbs	r6, r3, #0
   1301c:	adcs	r6, r6, r3
   13020:	b	12ebc <__assert_fail@plt+0x7e8>
   13024:	ldr	r3, [sp, #40]	; 0x28
   13028:	ldr	r1, [r6, #72]	; 0x48
   1302c:	ldr	r2, [r4, #28]
   13030:	ldr	r3, [r3]
   13034:	str	r3, [sp, #36]	; 0x24
   13038:	bl	284fc <__assert_fail@plt+0x15e28>
   1303c:	mov	r3, r0
   13040:	ldrh	r0, [r4, #60]	; 0x3c
   13044:	str	r3, [sp, #28]
   13048:	bl	12a88 <__assert_fail@plt+0x3b4>
   1304c:	ldr	lr, [r4, #48]	; 0x30
   13050:	ldr	r1, [r6, #72]	; 0x48
   13054:	ldr	r2, [r4, #28]
   13058:	str	lr, [sp, #44]	; 0x2c
   1305c:	ldr	lr, [r9, #8]
   13060:	str	lr, [sp, #48]	; 0x30
   13064:	mov	ip, r0
   13068:	mov	r0, #1
   1306c:	str	ip, [sp, #32]
   13070:	bl	284fc <__assert_fail@plt+0x15e28>
   13074:	ldr	r1, [r6, #72]	; 0x48
   13078:	ldr	r2, [r4, #24]
   1307c:	mov	r8, r0
   13080:	mov	r0, #2
   13084:	bl	284fc <__assert_fail@plt+0x15e28>
   13088:	ldr	r1, [sp, #44]	; 0x2c
   1308c:	ldr	r2, [sp, #48]	; 0x30
   13090:	ldr	ip, [sp, #32]
   13094:	str	r1, [sp, #4]
   13098:	mov	r1, #1
   1309c:	str	r2, [sp, #8]
   130a0:	movw	r2, #61716	; 0xf114
   130a4:	str	ip, [sp]
   130a8:	movt	r2, #2
   130ac:	ldr	r3, [sp, #28]
   130b0:	str	r8, [sp, #12]
   130b4:	str	r0, [sp, #16]
   130b8:	ldr	r0, [sp, #36]	; 0x24
   130bc:	bl	124d0 <__fprintf_chk@plt>
   130c0:	b	12db0 <__assert_fail@plt+0x6dc>
   130c4:	bl	12c50 <__assert_fail@plt+0x57c>
   130c8:	b	12de0 <__assert_fail@plt+0x70c>
   130cc:	cmp	r0, #0
   130d0:	beq	12fb4 <__assert_fail@plt+0x8e0>
   130d4:	ldr	r0, [r4, #24]
   130d8:	bl	12a24 <__assert_fail@plt+0x350>
   130dc:	cmp	r0, #0
   130e0:	beq	134c4 <__assert_fail@plt+0xdf0>
   130e4:	ldr	r1, [r4, #28]
   130e8:	mov	r0, #40	; 0x28
   130ec:	bl	190e4 <__assert_fail@plt+0x6a10>
   130f0:	b	12d30 <__assert_fail@plt+0x65c>
   130f4:	ldr	r3, [sp, #40]	; 0x28
   130f8:	mov	r0, #0
   130fc:	ldr	r1, [r2, #72]	; 0x48
   13100:	ldr	r2, [r4, #28]
   13104:	ldr	r3, [r3]
   13108:	str	r3, [sp, #36]	; 0x24
   1310c:	bl	284fc <__assert_fail@plt+0x15e28>
   13110:	mov	r3, r0
   13114:	ldrh	r0, [r4, #60]	; 0x3c
   13118:	str	r3, [sp, #28]
   1311c:	bl	12a88 <__assert_fail@plt+0x3b4>
   13120:	ldrb	r1, [r5, #4]
   13124:	movw	r2, #62132	; 0xf2b4
   13128:	ldrb	ip, [r5, #5]
   1312c:	movt	r2, #2
   13130:	ldr	r3, [sp, #28]
   13134:	str	r1, [sp, #12]
   13138:	mov	r1, #1
   1313c:	str	r6, [sp, #4]
   13140:	str	r8, [sp, #8]
   13144:	str	ip, [sp, #16]
   13148:	str	r0, [sp]
   1314c:	ldr	r0, [sp, #36]	; 0x24
   13150:	bl	124d0 <__fprintf_chk@plt>
   13154:	cmp	r8, #0
   13158:	ldrh	r3, [r4, #60]	; 0x3c
   1315c:	bne	12f2c <__assert_fail@plt+0x858>
   13160:	sub	r3, r3, #10
   13164:	ldr	r1, [r4, #24]
   13168:	ldr	r2, [sl, #32]
   1316c:	cmp	r3, #1
   13170:	str	r1, [r5, #12]
   13174:	movls	r3, #0
   13178:	movhi	r3, #1
   1317c:	str	r2, [r5, #16]
   13180:	strb	r3, [r5, #4]
   13184:	bl	163c8 <__assert_fail@plt+0x3cf4>
   13188:	add	r1, sp, #80	; 0x50
   1318c:	mov	r2, r0
   13190:	ldr	r0, [r4, #28]
   13194:	bl	18ff8 <__assert_fail@plt+0x6924>
   13198:	ldrb	r3, [r5, #24]
   1319c:	cmp	r3, #0
   131a0:	beq	131b4 <__assert_fail@plt+0xae0>
   131a4:	mov	r0, sl
   131a8:	mov	r1, r4
   131ac:	mov	r2, #4
   131b0:	bl	2c3a0 <fts_set@@Base>
   131b4:	ldrh	r3, [r4, #60]	; 0x3c
   131b8:	b	12f2c <__assert_fail@plt+0x858>
   131bc:	add	r1, r4, #176	; 0xb0
   131c0:	add	r0, sp, #80	; 0x50
   131c4:	bl	136f8 <__assert_fail@plt+0x1024>
   131c8:	mov	r1, r0
   131cc:	movw	r0, #62124	; 0xf2ac
   131d0:	movt	r0, #2
   131d4:	bl	1205c <strcmp@plt>
   131d8:	cmp	r0, #0
   131dc:	bne	12eec <__assert_fail@plt+0x818>
   131e0:	mov	r0, sl
   131e4:	mov	r1, r4
   131e8:	mov	r2, #4
   131ec:	bl	2c3a0 <fts_set@@Base>
   131f0:	ldrh	r3, [r4, #60]	; 0x3c
   131f4:	cmp	r3, #1
   131f8:	bne	12ef8 <__assert_fail@plt+0x824>
   131fc:	ldrb	r2, [r7]
   13200:	cmp	r2, #0
   13204:	moveq	r8, r3
   13208:	beq	12f10 <__assert_fail@plt+0x83c>
   1320c:	b	12f00 <__assert_fail@plt+0x82c>
   13210:	mov	r2, #5
   13214:	movw	r1, #62080	; 0xf280
   13218:	mov	r0, r6
   1321c:	movt	r1, #2
   13220:	bl	1217c <dcgettext@plt>
   13224:	ldr	r1, [r7, #72]	; 0x48
   13228:	ldr	r2, [r4, #28]
   1322c:	mov	r8, r0
   13230:	mov	r0, r6
   13234:	bl	284fc <__assert_fail@plt+0x15e28>
   13238:	mov	r1, r6
   1323c:	mov	r2, r8
   13240:	mov	r3, r0
   13244:	mov	r0, r6
   13248:	bl	122cc <error@plt>
   1324c:	ldr	r3, [sp, #68]	; 0x44
   13250:	b	12ff0 <__assert_fail@plt+0x91c>
   13254:	bl	163c8 <__assert_fail@plt+0x3cf4>
   13258:	mov	r1, #1
   1325c:	mov	r2, #21
   13260:	mov	r3, r8
   13264:	mov	fp, r0
   13268:	movw	r0, #61656	; 0xf0d8
   1326c:	movt	r0, #2
   13270:	bl	12248 <fwrite@plt>
   13274:	cmp	fp, #0
   13278:	beq	133a0 <__assert_fail@plt+0xccc>
   1327c:	movw	r6, #18468	; 0x4824
   13280:	movt	r6, #1
   13284:	mov	ip, #0
   13288:	str	sl, [sp, #36]	; 0x24
   1328c:	str	r4, [sp, #44]	; 0x2c
   13290:	mov	r4, fp
   13294:	str	r5, [sp, #48]	; 0x30
   13298:	mov	fp, r6
   1329c:	mov	r5, ip
   132a0:	ldr	sl, [sp, #56]	; 0x38
   132a4:	b	132bc <__assert_fail@plt+0xbe8>
   132a8:	cmp	r3, fp
   132ac:	beq	133bc <__assert_fail@plt+0xce8>
   132b0:	ldr	r4, [r4, #152]	; 0x98
   132b4:	cmp	r4, #0
   132b8:	beq	13388 <__assert_fail@plt+0xcb4>
   132bc:	ldr	r3, [r4]
   132c0:	cmp	r3, sl
   132c4:	bne	132a8 <__assert_fail@plt+0xbd4>
   132c8:	movw	r3, #61624	; 0xf0b8
   132cc:	movt	r3, #2
   132d0:	mov	r1, #1
   132d4:	movw	r2, #61712	; 0xf110
   132d8:	mov	r0, r8
   132dc:	movt	r2, #2
   132e0:	add	r5, r5, r1
   132e4:	bl	124d0 <__fprintf_chk@plt>
   132e8:	ldrb	r3, [r4, #40]	; 0x28
   132ec:	cmp	r3, #0
   132f0:	beq	1330c <__assert_fail@plt+0xc38>
   132f4:	movw	r0, #61688	; 0xf0f8
   132f8:	mov	r1, #1
   132fc:	movt	r0, #2
   13300:	mov	r2, #9
   13304:	mov	r3, r8
   13308:	bl	12248 <fwrite@plt>
   1330c:	ldr	r3, [r4, #88]	; 0x58
   13310:	mov	r6, #0
   13314:	movw	r2, #61700	; 0xf104
   13318:	str	r6, [sp, #4]
   1331c:	movt	r2, #2
   13320:	mov	r0, r8
   13324:	str	r3, [sp]
   13328:	mov	r1, #1
   1332c:	bl	124d0 <__fprintf_chk@plt>
   13330:	ldr	r3, [r4, #88]	; 0x58
   13334:	cmp	r3, r6
   13338:	movne	r3, r6
   1333c:	beq	13370 <__assert_fail@plt+0xc9c>
   13340:	ldr	ip, [r4, #92]	; 0x5c
   13344:	mov	r1, #1
   13348:	movw	r2, #61712	; 0xf110
   1334c:	mov	r0, r8
   13350:	movt	r2, #2
   13354:	add	r6, r6, r1
   13358:	ldr	r3, [ip, r3, lsl #2]
   1335c:	bl	124d0 <__fprintf_chk@plt>
   13360:	ldr	r2, [r4, #88]	; 0x58
   13364:	mov	r3, r6
   13368:	cmp	r6, r2
   1336c:	bcc	13340 <__assert_fail@plt+0xc6c>
   13370:	mov	r0, #10
   13374:	mov	r1, r8
   13378:	bl	12584 <fputc@plt>
   1337c:	ldr	r4, [r4, #152]	; 0x98
   13380:	cmp	r4, #0
   13384:	bne	132bc <__assert_fail@plt+0xbe8>
   13388:	mov	ip, r5
   1338c:	cmp	ip, #0
   13390:	ldr	sl, [sp, #36]	; 0x24
   13394:	ldr	r4, [sp, #44]	; 0x2c
   13398:	ldr	r5, [sp, #48]	; 0x30
   1339c:	bne	12d6c <__assert_fail@plt+0x698>
   133a0:	mov	r3, r8
   133a4:	movw	r0, #61680	; 0xf0f0
   133a8:	mov	r1, #1
   133ac:	mov	r2, #6
   133b0:	movt	r0, #2
   133b4:	bl	12248 <fwrite@plt>
   133b8:	b	12d6c <__assert_fail@plt+0x698>
   133bc:	movw	r3, #61616	; 0xf0b0
   133c0:	movt	r3, #2
   133c4:	b	132d0 <__assert_fail@plt+0xbfc>
   133c8:	ldr	r3, [r4, #88]	; 0x58
   133cc:	and	r3, r3, #61440	; 0xf000
   133d0:	cmp	r3, #40960	; 0xa000
   133d4:	beq	13520 <__assert_fail@plt+0xe4c>
   133d8:	mov	r2, #5
   133dc:	movw	r1, #61944	; 0xf1f8
   133e0:	mov	r0, r6
   133e4:	movt	r1, #2
   133e8:	bl	1217c <dcgettext@plt>
   133ec:	ldr	r1, [r4, #28]
   133f0:	mov	r8, r0
   133f4:	mov	r0, r6
   133f8:	bl	190b8 <__assert_fail@plt+0x69e4>
   133fc:	ldr	r3, [r4]
   13400:	ldr	r1, [r7, #72]	; 0x48
   13404:	ldr	r4, [r3, #40]	; 0x28
   13408:	ldr	r3, [r3, #28]
   1340c:	cmp	r4, #0
   13410:	mov	ip, r0
   13414:	beq	134d4 <__assert_fail@plt+0xe00>
   13418:	ldrb	lr, [r3, r4]
   1341c:	mov	r2, r3
   13420:	strb	r6, [r3, r4]
   13424:	mov	r0, #1
   13428:	str	r3, [sp, #28]
   1342c:	str	ip, [sp, #32]
   13430:	str	lr, [sp, #36]	; 0x24
   13434:	bl	284fc <__assert_fail@plt+0x15e28>
   13438:	ldr	r3, [sp, #28]
   1343c:	ldr	r1, [sp, #36]	; 0x24
   13440:	strb	r1, [r3, r4]
   13444:	ldr	ip, [sp, #32]
   13448:	mov	r3, r0
   1344c:	mov	r0, #0
   13450:	str	r3, [sp]
   13454:	mov	r2, r8
   13458:	mov	r3, ip
   1345c:	mov	r1, r0
   13460:	bl	122cc <error@plt>
   13464:	mov	r0, #1
   13468:	bl	190cc <__assert_fail@plt+0x69f8>
   1346c:	b	12d30 <__assert_fail@plt+0x65c>
   13470:	ldrb	r2, [r7]
   13474:	cmp	r2, #0
   13478:	movne	r8, #1
   1347c:	bne	12f10 <__assert_fail@plt+0x83c>
   13480:	b	12f00 <__assert_fail@plt+0x82c>
   13484:	ldr	r0, [r4, #24]
   13488:	bl	12a24 <__assert_fail@plt+0x350>
   1348c:	cmp	r0, #0
   13490:	bne	130e4 <__assert_fail@plt+0xa10>
   13494:	ldrh	r1, [r4, #60]	; 0x3c
   13498:	b	12e28 <__assert_fail@plt+0x754>
   1349c:	mov	r0, sl
   134a0:	mov	r1, r4
   134a4:	mov	r2, #4
   134a8:	bl	2c3a0 <fts_set@@Base>
   134ac:	ldr	r3, [r8, #4]
   134b0:	ldr	r8, [r4, #48]	; 0x30
   134b4:	cmp	r8, r3
   134b8:	movle	r8, #0
   134bc:	movgt	r8, #1
   134c0:	b	12ee0 <__assert_fail@plt+0x80c>
   134c4:	ldr	r0, [r4, #32]
   134c8:	ldr	r1, [r4, #28]
   134cc:	bl	190e4 <__assert_fail@plt+0x6a10>
   134d0:	b	13494 <__assert_fail@plt+0xdc0>
   134d4:	movw	r2, #15168	; 0x3b40
   134d8:	mov	r0, #1
   134dc:	movt	r2, #3
   134e0:	str	ip, [sp, #32]
   134e4:	bl	284fc <__assert_fail@plt+0x15e28>
   134e8:	ldr	ip, [sp, #32]
   134ec:	mov	r3, r0
   134f0:	b	1344c <__assert_fail@plt+0xd78>
   134f4:	mov	r1, r4
   134f8:	mov	r0, sl
   134fc:	mov	r2, #1
   13500:	bl	2c3a0 <fts_set@@Base>
   13504:	b	12d30 <__assert_fail@plt+0x65c>
   13508:	orr	r1, r1, #16
   1350c:	str	r1, [r9]
   13510:	b	12cf0 <__assert_fail@plt+0x61c>
   13514:	orr	r1, r1, #3
   13518:	str	r1, [r9]
   1351c:	b	12cf0 <__assert_fail@plt+0x61c>
   13520:	mov	r2, #5
   13524:	mov	r0, r6
   13528:	movw	r1, #61820	; 0xf17c
   1352c:	movt	r1, #2
   13530:	bl	1217c <dcgettext@plt>
   13534:	ldr	r1, [r4, #28]
   13538:	mov	r8, r0
   1353c:	mov	r0, r6
   13540:	bl	190b8 <__assert_fail@plt+0x69e4>
   13544:	mov	r1, r6
   13548:	mov	r2, r8
   1354c:	mov	r3, r0
   13550:	mov	r0, r6
   13554:	bl	122cc <error@plt>
   13558:	b	13464 <__assert_fail@plt+0xd90>
   1355c:	bl	12434 <__errno_location@plt>
   13560:	mov	r2, #5
   13564:	movw	r1, #61636	; 0xf0c4
   13568:	movt	r1, #2
   1356c:	ldr	r4, [r0]
   13570:	mov	r0, sl
   13574:	bl	1217c <dcgettext@plt>
   13578:	ldr	r1, [sp, #60]	; 0x3c
   1357c:	mov	r5, r0
   13580:	mov	r0, sl
   13584:	bl	190b8 <__assert_fail@plt+0x69e4>
   13588:	mov	r1, r4
   1358c:	mov	r2, r5
   13590:	mov	r3, r0
   13594:	mov	r0, sl
   13598:	bl	122cc <error@plt>
   1359c:	mov	r0, #1
   135a0:	bl	190cc <__assert_fail@plt+0x69f8>
   135a4:	mov	r0, #1
   135a8:	b	12f98 <__assert_fail@plt+0x8c4>
   135ac:	bl	12188 <__stack_chk_fail@plt>
   135b0:	movw	r0, #62040	; 0xf258
   135b4:	movw	r1, #61576	; 0xf088
   135b8:	movt	r0, #2
   135bc:	movt	r1, #2
   135c0:	movw	r2, #431	; 0x1af
   135c4:	ldr	r3, [pc, #28]	; 135e8 <__assert_fail@plt+0xf14>
   135c8:	bl	126d4 <__assert_fail@plt>
   135cc:	movw	r0, #62020	; 0xf244
   135d0:	movw	r1, #61576	; 0xf088
   135d4:	movt	r0, #2
   135d8:	movt	r1, #2
   135dc:	movw	r2, #430	; 0x1ae
   135e0:	ldr	r3, [pc]	; 135e8 <__assert_fail@plt+0xf14>
   135e4:	bl	126d4 <__assert_fail@plt>
   135e8:	andeq	lr, r2, ip, asr #31
   135ec:	movw	r3, #25188	; 0x6264
   135f0:	movt	r3, #4
   135f4:	ldr	r3, [r3]
   135f8:	str	r3, [r0]
   135fc:	mov	r0, #1
   13600:	bx	lr
   13604:	push	{r4, r5, r6, lr}
   13608:	subs	r4, r0, #0
   1360c:	popeq	{r4, r5, r6, pc}
   13610:	mov	r6, #0
   13614:	b	13630 <__assert_fail@plt+0xf5c>
   13618:	str	r6, [r4, #28]
   1361c:	mov	r0, r4
   13620:	bl	120c8 <free@plt>
   13624:	cmp	r5, #0
   13628:	mov	r4, r5
   1362c:	beq	1365c <__assert_fail@plt+0xf88>
   13630:	ldr	r0, [r4]
   13634:	ldr	r5, [r4, #28]
   13638:	bl	120c8 <free@plt>
   1363c:	ldr	r0, [r4, #4]
   13640:	bl	120c8 <free@plt>
   13644:	ldrb	r3, [r4, #24]
   13648:	tst	r3, #4
   1364c:	beq	13618 <__assert_fail@plt+0xf44>
   13650:	ldr	r0, [r4, #8]
   13654:	bl	120c8 <free@plt>
   13658:	b	13618 <__assert_fail@plt+0xf44>
   1365c:	pop	{r4, r5, r6, pc}
   13660:	push	{r3, lr}
   13664:	mov	r2, #5
   13668:	movw	r1, #62356	; 0xf394
   1366c:	mov	r0, #0
   13670:	movt	r1, #2
   13674:	bl	1217c <dcgettext@plt>
   13678:	mov	r1, #0
   1367c:	mov	r2, r0
   13680:	mov	r0, #1
   13684:	bl	122cc <error@plt>
   13688:	pop	{r3, pc}
   1368c:	push	{r4, r5, r6, lr}
   13690:	movw	r4, #26008	; 0x6598
   13694:	movt	r4, #4
   13698:	sub	sp, sp, #112	; 0x70
   1369c:	mov	r5, r0
   136a0:	mov	r6, r1
   136a4:	ldr	r3, [r4]
   136a8:	mov	r0, sp
   136ac:	str	r3, [sp, #108]	; 0x6c
   136b0:	bl	1812c <__assert_fail@plt+0x5a58>
   136b4:	movw	r3, #29372	; 0x72bc
   136b8:	movt	r3, #4
   136bc:	ldr	r0, [r5]
   136c0:	mov	r1, sp
   136c4:	ldr	r3, [r3, #52]	; 0x34
   136c8:	blx	r3
   136cc:	cmp	r0, #0
   136d0:	ldrdeq	r2, [sp]
   136d4:	mvnne	r0, #0
   136d8:	strdeq	r2, [r6]
   136dc:	ldr	r2, [sp, #108]	; 0x6c
   136e0:	ldr	r3, [r4]
   136e4:	cmp	r2, r3
   136e8:	bne	136f4 <__assert_fail@plt+0x1020>
   136ec:	add	sp, sp, #112	; 0x70
   136f0:	pop	{r4, r5, r6, pc}
   136f4:	bl	12188 <__stack_chk_fail@plt>
   136f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136fc:	movw	r6, #26048	; 0x65c0
   13700:	movt	r6, #4
   13704:	movw	r9, #26008	; 0x6598
   13708:	movt	r9, #4
   1370c:	sub	sp, sp, #44	; 0x2c
   13710:	ldr	r1, [r6]
   13714:	mov	r7, r0
   13718:	ldr	r3, [r9]
   1371c:	cmp	r1, #0
   13720:	str	r3, [sp, #36]	; 0x24
   13724:	beq	13750 <__assert_fail@plt+0x107c>
   13728:	ldr	r3, [r6, #4]
   1372c:	mov	r0, r1
   13730:	cmp	r3, #0
   13734:	beq	1374c <__assert_fail@plt+0x1078>
   13738:	ldrd	r4, [r7]
   1373c:	ldrd	r2, [r6, #8]
   13740:	cmp	r5, r3
   13744:	cmpeq	r4, r2
   13748:	beq	137f0 <__assert_fail@plt+0x111c>
   1374c:	bl	120c8 <free@plt>
   13750:	ldrd	r2, [r7]
   13754:	mov	r0, #1
   13758:	strd	r2, [r6, #8]
   1375c:	bl	2c57c <fts_children@@Base+0x1b0>
   13760:	subs	fp, r0, #0
   13764:	mvnne	r4, #0
   13768:	mvnne	r5, #0
   1376c:	movne	sl, fp
   13770:	movne	r8, #0
   13774:	beq	13824 <__assert_fail@plt+0x1150>
   13778:	movw	r1, #62396	; 0xf3bc
   1377c:	ldr	r0, [sl, #8]
   13780:	movt	r1, #2
   13784:	bl	1205c <strcmp@plt>
   13788:	cmp	r0, #0
   1378c:	beq	137b0 <__assert_fail@plt+0x10dc>
   13790:	ldrd	r0, [sl, #16]
   13794:	cmp	r1, r5
   13798:	cmpeq	r0, r4
   1379c:	beq	13808 <__assert_fail@plt+0x1134>
   137a0:	ldrd	r2, [r7]
   137a4:	cmp	r3, r1
   137a8:	cmpeq	r2, r0
   137ac:	moveq	r8, sl
   137b0:	ldr	sl, [sl, #28]
   137b4:	cmp	sl, #0
   137b8:	bne	13778 <__assert_fail@plt+0x10a4>
   137bc:	cmp	r8, #0
   137c0:	beq	13828 <__assert_fail@plt+0x1154>
   137c4:	ldr	r0, [r8, #8]
   137c8:	bl	28f30 <__assert_fail@plt+0x1685c>
   137cc:	mov	r4, r0
   137d0:	mov	r0, fp
   137d4:	bl	13604 <__assert_fail@plt+0xf30>
   137d8:	cmp	r4, #0
   137dc:	movne	r3, #1
   137e0:	movne	r0, r4
   137e4:	strne	r3, [r6, #4]
   137e8:	beq	13830 <__assert_fail@plt+0x115c>
   137ec:	str	r0, [r6]
   137f0:	ldr	r2, [sp, #36]	; 0x24
   137f4:	ldr	r3, [r9]
   137f8:	cmp	r2, r3
   137fc:	bne	13900 <__assert_fail@plt+0x122c>
   13800:	add	sp, sp, #44	; 0x2c
   13804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13808:	add	r0, sl, #4
   1380c:	add	r1, sl, #16
   13810:	bl	1368c <__assert_fail@plt+0xfb8>
   13814:	cmp	r0, #0
   13818:	bne	137b0 <__assert_fail@plt+0x10dc>
   1381c:	ldrd	r0, [sl, #16]
   13820:	b	137a0 <__assert_fail@plt+0x10cc>
   13824:	bl	13660 <__assert_fail@plt+0xf8c>
   13828:	mov	r0, fp
   1382c:	bl	13604 <__assert_fail@plt+0xf30>
   13830:	movw	r0, #62404	; 0xf3c4
   13834:	movw	r1, #6772	; 0x1a74
   13838:	movt	r0, #2
   1383c:	movt	r1, #3
   13840:	bl	12608 <setmntent@plt>
   13844:	subs	r8, r0, #0
   13848:	beq	138f4 <__assert_fail@plt+0x1220>
   1384c:	mvn	sl, #0
   13850:	mvn	fp, #0
   13854:	mov	r0, r8
   13858:	bl	122d8 <getmntent@plt>
   1385c:	subs	r4, r0, #0
   13860:	beq	138ec <__assert_fail@plt+0x1218>
   13864:	movw	r0, #62124	; 0xf2ac
   13868:	ldr	r1, [r4, #8]
   1386c:	movt	r0, #2
   13870:	bl	1205c <strcmp@plt>
   13874:	cmp	r0, #0
   13878:	bne	13854 <__assert_fail@plt+0x1180>
   1387c:	ldr	r3, [r4, #4]
   13880:	add	r0, sp, #4
   13884:	add	r1, sp, #16
   13888:	strd	sl, [sp, #16]
   1388c:	str	r3, [sp, #4]
   13890:	bl	1368c <__assert_fail@plt+0xfb8>
   13894:	ldrd	r4, [sp, #16]
   13898:	ldrd	r2, [r7]
   1389c:	cmp	r5, r3
   138a0:	cmpeq	r4, r2
   138a4:	bne	13854 <__assert_fail@plt+0x1180>
   138a8:	mov	r0, r8
   138ac:	bl	12524 <endmntent@plt>
   138b0:	movw	r0, #62124	; 0xf2ac
   138b4:	movt	r0, #2
   138b8:	bl	28f30 <__assert_fail@plt+0x1685c>
   138bc:	cmp	r0, #0
   138c0:	moveq	r3, #0
   138c4:	movne	r3, #1
   138c8:	str	r3, [r6, #4]
   138cc:	bne	137ec <__assert_fail@plt+0x1118>
   138d0:	mov	r2, #5
   138d4:	movw	r1, #62420	; 0xf3d4
   138d8:	mov	r0, #0
   138dc:	movt	r1, #2
   138e0:	bl	1217c <dcgettext@plt>
   138e4:	bl	28f30 <__assert_fail@plt+0x1685c>
   138e8:	b	137ec <__assert_fail@plt+0x1118>
   138ec:	mov	r0, r8
   138f0:	bl	12524 <endmntent@plt>
   138f4:	mov	r3, #0
   138f8:	str	r3, [r6, #4]
   138fc:	b	138d0 <__assert_fail@plt+0x11fc>
   13900:	bl	12188 <__stack_chk_fail@plt>
   13904:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13908:	movw	r9, #26008	; 0x6598
   1390c:	movt	r9, #4
   13910:	sub	sp, sp, #8
   13914:	mov	r5, #0
   13918:	ldr	r3, [r9]
   1391c:	mov	r0, r5
   13920:	str	r5, [sp]
   13924:	str	r3, [sp, #4]
   13928:	bl	2c57c <fts_children@@Base+0x1b0>
   1392c:	subs	sl, r0, #0
   13930:	movne	r8, r5
   13934:	movne	r4, sl
   13938:	bne	1394c <__assert_fail@plt+0x1278>
   1393c:	b	139d0 <__assert_fail@plt+0x12fc>
   13940:	ldr	r4, [r4, #28]
   13944:	cmp	r4, #0
   13948:	beq	139ac <__assert_fail@plt+0x12d8>
   1394c:	movw	r1, #62396	; 0xf3bc
   13950:	ldr	r0, [r4, #8]
   13954:	movt	r1, #2
   13958:	bl	1205c <strcmp@plt>
   1395c:	cmp	r0, #0
   13960:	beq	13940 <__assert_fail@plt+0x126c>
   13964:	ldr	r0, [r4, #4]
   13968:	add	r6, r5, #1
   1396c:	bl	123d4 <strlen@plt>
   13970:	mov	r2, sp
   13974:	add	r6, r6, r0
   13978:	mov	r0, r8
   1397c:	mov	r1, r6
   13980:	bl	1f4dc <__assert_fail@plt+0xce08>
   13984:	subs	r7, r0, #0
   13988:	beq	139ac <__assert_fail@plt+0x12d8>
   1398c:	add	r0, r7, r5
   13990:	ldr	r1, [r4, #4]
   13994:	bl	1229c <strcpy@plt>
   13998:	ldr	r4, [r4, #28]
   1399c:	mov	r5, r6
   139a0:	mov	r8, r7
   139a4:	cmp	r4, #0
   139a8:	bne	1394c <__assert_fail@plt+0x1278>
   139ac:	mov	r0, sl
   139b0:	bl	13604 <__assert_fail@plt+0xf30>
   139b4:	ldr	r2, [sp, #4]
   139b8:	ldr	r3, [r9]
   139bc:	mov	r0, r8
   139c0:	cmp	r2, r3
   139c4:	bne	139dc <__assert_fail@plt+0x1308>
   139c8:	add	sp, sp, #8
   139cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139d0:	bl	13660 <__assert_fail@plt+0xf8c>
   139d4:	mov	r8, sl
   139d8:	b	139ac <__assert_fail@plt+0x12d8>
   139dc:	bl	12188 <__stack_chk_fail@plt>
   139e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139e4:	movw	r3, #26008	; 0x6598
   139e8:	sub	sp, sp, #28
   139ec:	movt	r3, #4
   139f0:	mov	r7, #0
   139f4:	str	r3, [sp, #4]
   139f8:	ldr	r3, [r3]
   139fc:	str	r0, [sp, #12]
   13a00:	mov	r0, r7
   13a04:	str	r7, [sp, #16]
   13a08:	str	r3, [sp, #20]
   13a0c:	bl	2c57c <fts_children@@Base+0x1b0>
   13a10:	subs	r3, r0, #0
   13a14:	str	r3, [sp, #8]
   13a18:	beq	13ae4 <__assert_fail@plt+0x1410>
   13a1c:	mvn	r4, #0
   13a20:	mvn	r5, #0
   13a24:	mov	r8, r7
   13a28:	mov	r6, r3
   13a2c:	b	13a4c <__assert_fail@plt+0x1378>
   13a30:	add	ip, fp, r9
   13a34:	mov	r8, sl
   13a38:	mov	r7, fp
   13a3c:	stmdb	ip, {r0, r1}
   13a40:	ldr	r6, [r6, #28]
   13a44:	cmp	r6, #0
   13a48:	beq	13aa0 <__assert_fail@plt+0x13cc>
   13a4c:	add	sl, r8, #1
   13a50:	mov	r0, r7
   13a54:	add	r2, sp, #16
   13a58:	lsl	r9, sl, #3
   13a5c:	mov	r1, r9
   13a60:	bl	1f4dc <__assert_fail@plt+0xce08>
   13a64:	subs	fp, r0, #0
   13a68:	beq	13ad4 <__assert_fail@plt+0x1400>
   13a6c:	ldrd	r0, [r6, #16]
   13a70:	cmp	r1, r5
   13a74:	cmpeq	r0, r4
   13a78:	bne	13a30 <__assert_fail@plt+0x135c>
   13a7c:	add	r0, r6, #4
   13a80:	add	r1, r6, #16
   13a84:	bl	1368c <__assert_fail@plt+0xfb8>
   13a88:	cmp	r0, #0
   13a8c:	movne	r7, fp
   13a90:	bne	13a40 <__assert_fail@plt+0x136c>
   13a94:	ldr	r0, [r6, #16]
   13a98:	ldr	r1, [r6, #20]
   13a9c:	b	13a30 <__assert_fail@plt+0x135c>
   13aa0:	ldr	r0, [sp, #8]
   13aa4:	bl	13604 <__assert_fail@plt+0xf30>
   13aa8:	cmp	fp, #0
   13aac:	ldrne	r3, [sp, #12]
   13ab0:	strne	r8, [r3]
   13ab4:	ldr	r1, [sp, #4]
   13ab8:	mov	r0, r7
   13abc:	ldr	r2, [sp, #20]
   13ac0:	ldr	r3, [r1]
   13ac4:	cmp	r2, r3
   13ac8:	bne	13af0 <__assert_fail@plt+0x141c>
   13acc:	add	sp, sp, #28
   13ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad4:	mov	r0, r7
   13ad8:	mov	r7, fp
   13adc:	bl	120c8 <free@plt>
   13ae0:	b	13a40 <__assert_fail@plt+0x136c>
   13ae4:	bl	13604 <__assert_fail@plt+0xf30>
   13ae8:	ldr	r7, [sp, #8]
   13aec:	b	13ab4 <__assert_fail@plt+0x13e0>
   13af0:	bl	12188 <__stack_chk_fail@plt>
   13af4:	andeq	r0, r0, r0
   13af8:	push	{r4, r5, lr}
   13afc:	sub	sp, sp, #20
   13b00:	add	r4, sp, #16
   13b04:	stm	sp, {r2, r3}
   13b08:	stmdb	r4, {r0, r1}
   13b0c:	mov	r1, r2
   13b10:	ldr	r0, [sp, #8]
   13b14:	mov	r4, r3
   13b18:	ldr	r5, [sp, #12]
   13b1c:	cmp	r0, r2
   13b20:	beq	13b54 <__assert_fail@plt+0x1480>
   13b24:	bl	124c4 <difftime@plt>
   13b28:	rsb	r4, r4, r5
   13b2c:	vldr	d7, [pc, #52]	; 13b68 <__assert_fail@plt+0x1494>
   13b30:	vmov	s11, r4
   13b34:	vcvt.f64.s32	d6, s11
   13b38:	vmla.f64	d0, d6, d7
   13b3c:	vcmpe.f64	d0, #0.0
   13b40:	vmrs	APSR_nzcv, fpscr
   13b44:	mvnmi	r0, #0
   13b48:	movpl	r0, #1
   13b4c:	add	sp, sp, #20
   13b50:	pop	{r4, r5, pc}
   13b54:	cmp	r5, r3
   13b58:	moveq	r0, #0
   13b5c:	bne	13b24 <__assert_fail@plt+0x1450>
   13b60:	b	13b4c <__assert_fail@plt+0x1478>
   13b64:	nop	{0}
   13b68:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13b6c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13b70:	push	{r4, r5, lr}
   13b74:	mov	r4, r2
   13b78:	ldr	r2, [r2, #44]	; 0x2c
   13b7c:	sub	sp, sp, #12
   13b80:	mov	r5, r3
   13b84:	cmp	r2, #1
   13b88:	stm	sp, {r0, r1}
   13b8c:	beq	13c38 <__assert_fail@plt+0x1564>
   13b90:	bcc	13c14 <__assert_fail@plt+0x1540>
   13b94:	cmp	r2, #2
   13b98:	bne	13bf4 <__assert_fail@plt+0x1520>
   13b9c:	ldr	r0, [sp]
   13ba0:	ldr	r1, [r4, #48]	; 0x30
   13ba4:	bl	124c4 <difftime@plt>
   13ba8:	ldr	r2, [sp, #4]
   13bac:	ldr	r3, [r4, #52]	; 0x34
   13bb0:	vldr	d7, [pc, #160]	; 13c58 <__assert_fail@plt+0x1584>
   13bb4:	rsb	r3, r3, r2
   13bb8:	vmov	s11, r3
   13bbc:	vcvt.f64.s32	d6, s11
   13bc0:	vmla.f64	d0, d6, d7
   13bc4:	vcmpe.f64	d0, #0.0
   13bc8:	vmrs	APSR_nzcv, fpscr
   13bcc:	movle	r0, #0
   13bd0:	ble	13bec <__assert_fail@plt+0x1518>
   13bd4:	vmov	s13, r5
   13bd8:	vcvt.f64.s32	d7, s13
   13bdc:	vcmpe.f64	d7, d0
   13be0:	vmrs	APSR_nzcv, fpscr
   13be4:	movlt	r0, #0
   13be8:	movge	r0, #1
   13bec:	add	sp, sp, #12
   13bf0:	pop	{r4, r5, pc}
   13bf4:	movw	r0, #62676	; 0xf4d4
   13bf8:	movw	r1, #62552	; 0xf458
   13bfc:	movw	r3, #62428	; 0xf3dc
   13c00:	movt	r0, #2
   13c04:	movt	r1, #2
   13c08:	mov	r2, #222	; 0xde
   13c0c:	movt	r3, #2
   13c10:	bl	126d4 <__assert_fail@plt>
   13c14:	add	r4, r4, #48	; 0x30
   13c18:	ldm	sp, {r0, r1}
   13c1c:	ldm	r4, {r2, r3}
   13c20:	bl	13af8 <__assert_fail@plt+0x1424>
   13c24:	cmp	r0, #0
   13c28:	movle	r0, #0
   13c2c:	movgt	r0, #1
   13c30:	add	sp, sp, #12
   13c34:	pop	{r4, r5, pc}
   13c38:	add	r4, r4, #48	; 0x30
   13c3c:	ldm	sp, {r0, r1}
   13c40:	ldm	r4, {r2, r3}
   13c44:	bl	13af8 <__assert_fail@plt+0x1424>
   13c48:	lsr	r0, r0, #31
   13c4c:	add	sp, sp, #12
   13c50:	pop	{r4, r5, pc}
   13c54:	nop	{0}
   13c58:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13c5c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13c60:	movw	r2, #26024	; 0x65a8
   13c64:	movt	r2, #4
   13c68:	push	{r4, r5, r6, r7, lr}
   13c6c:	mov	r6, r0
   13c70:	sub	sp, sp, #12
   13c74:	ldr	r0, [r2]
   13c78:	movw	r4, #26016	; 0x65a0
   13c7c:	movt	r4, #4
   13c80:	mov	r7, r1
   13c84:	bl	2a1c0 <__assert_fail@plt+0x17aec>
   13c88:	mov	r2, #5
   13c8c:	movw	r1, #62560	; 0xf460
   13c90:	mov	r0, #0
   13c94:	movt	r1, #2
   13c98:	ldr	r5, [r4]
   13c9c:	bl	1217c <dcgettext@plt>
   13ca0:	mov	r3, r6
   13ca4:	mov	r1, #1
   13ca8:	str	r7, [sp]
   13cac:	mov	r2, r0
   13cb0:	mov	r0, r5
   13cb4:	bl	124d0 <__fprintf_chk@plt>
   13cb8:	ldr	r0, [r4]
   13cbc:	bl	2a1c0 <__assert_fail@plt+0x17aec>
   13cc0:	add	sp, sp, #12
   13cc4:	pop	{r4, r5, r6, r7, lr}
   13cc8:	b	29cc0 <__assert_fail@plt+0x175ec>
   13ccc:	push	{r3, lr}
   13cd0:	bl	184c4 <__assert_fail@plt+0x5df0>
   13cd4:	movw	r3, #29328	; 0x7290
   13cd8:	movt	r3, #4
   13cdc:	ldr	r0, [r3, #28]
   13ce0:	bl	123b0 <exit@plt>
   13ce4:	push	{r3, lr}
   13ce8:	movw	r3, #29372	; 0x72bc
   13cec:	movt	r3, #4
   13cf0:	ldrb	r3, [r3]
   13cf4:	cmp	r3, #0
   13cf8:	beq	13d2c <__assert_fail@plt+0x1658>
   13cfc:	movw	r3, #29328	; 0x7290
   13d00:	movt	r3, #4
   13d04:	ldrb	r2, [r3, #4]
   13d08:	cmp	r2, #0
   13d0c:	beq	13d34 <__assert_fail@plt+0x1660>
   13d10:	cmp	r1, #0
   13d14:	beq	13d2c <__assert_fail@plt+0x1658>
   13d18:	ldr	r2, [r1, #16]
   13d1c:	and	r2, r2, #61440	; 0xf000
   13d20:	cmp	r2, #16384	; 0x4000
   13d24:	moveq	r2, #1
   13d28:	strbeq	r2, [r3, #24]
   13d2c:	mov	r0, #1
   13d30:	pop	{r3, pc}
   13d34:	movw	r0, #62580	; 0xf474
   13d38:	movw	r1, #62552	; 0xf458
   13d3c:	movt	r0, #2
   13d40:	movt	r1, #2
   13d44:	movw	r2, #934	; 0x3a6
   13d48:	ldr	r3, [pc]	; 13d50 <__assert_fail@plt+0x167c>
   13d4c:	bl	126d4 <__assert_fail@plt>
   13d50:	andeq	pc, r2, ip, ror #7
   13d54:	push	{r4, r5, r6, lr}
   13d58:	mov	r4, r2
   13d5c:	ldr	r2, [r2, #156]	; 0x9c
   13d60:	mov	r5, r0
   13d64:	mov	r6, r1
   13d68:	cmp	r2, #0
   13d6c:	beq	13d7c <__assert_fail@plt+0x16a8>
   13d70:	bl	18ff8 <__assert_fail@plt+0x6924>
   13d74:	cmp	r0, #0
   13d78:	beq	13d90 <__assert_fail@plt+0x16bc>
   13d7c:	mov	r0, r5
   13d80:	mov	r1, r6
   13d84:	ldr	r2, [r4, #160]	; 0xa0
   13d88:	pop	{r4, r5, r6, lr}
   13d8c:	b	18ff8 <__assert_fail@plt+0x6924>
   13d90:	pop	{r4, r5, r6, pc}
   13d94:	push	{r4, r5, r6, lr}
   13d98:	mov	r4, r2
   13d9c:	ldr	r2, [r2, #156]	; 0x9c
   13da0:	mov	r5, r0
   13da4:	mov	r6, r1
   13da8:	cmp	r2, #0
   13dac:	beq	13dbc <__assert_fail@plt+0x16e8>
   13db0:	bl	18ff8 <__assert_fail@plt+0x6924>
   13db4:	cmp	r0, #0
   13db8:	bne	13dd0 <__assert_fail@plt+0x16fc>
   13dbc:	mov	r0, r5
   13dc0:	mov	r1, r6
   13dc4:	ldr	r2, [r4, #160]	; 0xa0
   13dc8:	pop	{r4, r5, r6, lr}
   13dcc:	b	18ff8 <__assert_fail@plt+0x6924>
   13dd0:	pop	{r4, r5, r6, pc}
   13dd4:	push	{r4, r5, r6, r7, r8, lr}
   13dd8:	movw	r4, #29328	; 0x7290
   13ddc:	movt	r4, #4
   13de0:	mov	r8, r0
   13de4:	mov	r6, r1
   13de8:	mov	r7, r2
   13dec:	ldr	r0, [r4, #16]
   13df0:	ldr	r1, [r4, #12]
   13df4:	bl	20e38 <__assert_fail@plt+0xe764>
   13df8:	subs	r5, r0, #0
   13dfc:	beq	13e30 <__assert_fail@plt+0x175c>
   13e00:	cmp	r7, #0
   13e04:	ldr	r0, [r6]
   13e08:	mov	r1, r5
   13e0c:	movne	r2, #16
   13e10:	moveq	r2, #0
   13e14:	bl	122f0 <fnmatch@plt>
   13e18:	rsbs	r6, r0, #1
   13e1c:	movcc	r6, #0
   13e20:	mov	r0, r5
   13e24:	bl	120c8 <free@plt>
   13e28:	mov	r0, r6
   13e2c:	pop	{r4, r5, r6, r7, r8, pc}
   13e30:	bl	12434 <__errno_location@plt>
   13e34:	mov	r1, r8
   13e38:	mov	r6, r5
   13e3c:	ldr	r0, [r0]
   13e40:	bl	190e4 <__assert_fail@plt+0x6a10>
   13e44:	mov	r3, #1
   13e48:	str	r3, [r4, #28]
   13e4c:	b	13e20 <__assert_fail@plt+0x174c>
   13e50:	add	r1, r1, #72	; 0x48
   13e54:	mov	r3, #60	; 0x3c
   13e58:	push	{lr}		; (str lr, [sp, #-4]!)
   13e5c:	sub	sp, sp, #12
   13e60:	ldm	r1, {r0, r1}
   13e64:	stm	sp, {r0, r1}
   13e68:	bl	13b70 <__assert_fail@plt+0x149c>
   13e6c:	add	sp, sp, #12
   13e70:	pop	{pc}		; (ldr pc, [sp], #4)
   13e74:	push	{lr}		; (str lr, [sp, #-4]!)
   13e78:	sub	sp, sp, #12
   13e7c:	ldr	r3, [r2, #44]	; 0x2c
   13e80:	cmp	r3, #0
   13e84:	bne	13eb4 <__assert_fail@plt+0x17e0>
   13e88:	add	r1, r1, #72	; 0x48
   13e8c:	add	r2, r2, #48	; 0x30
   13e90:	ldm	r1, {r0, r1}
   13e94:	ldm	r2, {r2, r3}
   13e98:	stm	sp, {r0, r1}
   13e9c:	bl	13af8 <__assert_fail@plt+0x1424>
   13ea0:	cmp	r0, #0
   13ea4:	movle	r0, #0
   13ea8:	movgt	r0, #1
   13eac:	add	sp, sp, #12
   13eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb4:	movw	r0, #62596	; 0xf484
   13eb8:	movw	r1, #62552	; 0xf458
   13ebc:	movt	r0, #2
   13ec0:	movt	r1, #2
   13ec4:	mov	r2, #250	; 0xfa
   13ec8:	ldr	r3, [pc]	; 13ed0 <__assert_fail@plt+0x17fc>
   13ecc:	bl	126d4 <__assert_fail@plt>
   13ed0:	strdeq	pc, [r2], -r8
   13ed4:	add	r1, r1, #72	; 0x48
   13ed8:	movw	r3, #20864	; 0x5180
   13edc:	push	{lr}		; (str lr, [sp, #-4]!)
   13ee0:	sub	sp, sp, #12
   13ee4:	ldm	r1, {r0, r1}
   13ee8:	movt	r3, #1
   13eec:	stm	sp, {r0, r1}
   13ef0:	bl	13b70 <__assert_fail@plt+0x149c>
   13ef4:	add	sp, sp, #12
   13ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   13efc:	mov	r0, #1
   13f00:	bx	lr
   13f04:	add	r1, r1, #88	; 0x58
   13f08:	mov	r3, #60	; 0x3c
   13f0c:	push	{lr}		; (str lr, [sp, #-4]!)
   13f10:	sub	sp, sp, #12
   13f14:	ldm	r1, {r0, r1}
   13f18:	stm	sp, {r0, r1}
   13f1c:	bl	13b70 <__assert_fail@plt+0x149c>
   13f20:	add	sp, sp, #12
   13f24:	pop	{pc}		; (ldr pc, [sp], #4)
   13f28:	push	{lr}		; (str lr, [sp, #-4]!)
   13f2c:	sub	sp, sp, #12
   13f30:	ldr	r3, [r2, #44]	; 0x2c
   13f34:	cmp	r3, #0
   13f38:	bne	13f68 <__assert_fail@plt+0x1894>
   13f3c:	add	r1, r1, #88	; 0x58
   13f40:	add	r2, r2, #48	; 0x30
   13f44:	ldm	r1, {r0, r1}
   13f48:	ldm	r2, {r2, r3}
   13f4c:	stm	sp, {r0, r1}
   13f50:	bl	13af8 <__assert_fail@plt+0x1424>
   13f54:	cmp	r0, #0
   13f58:	movle	r0, #0
   13f5c:	movgt	r0, #1
   13f60:	add	sp, sp, #12
   13f64:	pop	{pc}		; (ldr pc, [sp], #4)
   13f68:	movw	r0, #62596	; 0xf484
   13f6c:	movw	r1, #62552	; 0xf458
   13f70:	movt	r0, #2
   13f74:	movt	r1, #2
   13f78:	movw	r2, #283	; 0x11b
   13f7c:	ldr	r3, [pc]	; 13f84 <__assert_fail@plt+0x18b0>
   13f80:	bl	126d4 <__assert_fail@plt>
   13f84:	andeq	pc, r2, r4, lsl #8
   13f88:	push	{r4, r5, r6, lr}
   13f8c:	mov	r4, r2
   13f90:	ldr	r2, [r2, #156]	; 0x9c
   13f94:	mov	r6, r0
   13f98:	mov	r5, r1
   13f9c:	cmp	r2, #0
   13fa0:	beq	13fa8 <__assert_fail@plt+0x18d4>
   13fa4:	bl	18ff8 <__assert_fail@plt+0x6924>
   13fa8:	mov	r0, r6
   13fac:	mov	r1, r5
   13fb0:	ldr	r2, [r4, #160]	; 0xa0
   13fb4:	pop	{r4, r5, r6, lr}
   13fb8:	b	18ff8 <__assert_fail@plt+0x6924>
   13fbc:	add	r1, r1, #88	; 0x58
   13fc0:	movw	r3, #20864	; 0x5180
   13fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   13fc8:	sub	sp, sp, #12
   13fcc:	ldm	r1, {r0, r1}
   13fd0:	movt	r3, #1
   13fd4:	stm	sp, {r0, r1}
   13fd8:	bl	13b70 <__assert_fail@plt+0x149c>
   13fdc:	add	sp, sp, #12
   13fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13fe8:	movw	r4, #29328	; 0x7290
   13fec:	movt	r4, #4
   13ff0:	mov	r7, r0
   13ff4:	ldr	r3, [r4, #12]
   13ff8:	ldrb	r2, [r3]
   13ffc:	cmp	r2, #46	; 0x2e
   14000:	bne	14018 <__assert_fail@plt+0x1944>
   14004:	ldrb	r2, [r3, #1]
   14008:	cmp	r2, #0
   1400c:	bne	14018 <__assert_fail@plt+0x1944>
   14010:	mov	r0, #1
   14014:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14018:	ldrb	r2, [r4, #4]
   1401c:	cmp	r2, #0
   14020:	moveq	r6, r2
   14024:	beq	1403c <__assert_fail@plt+0x1968>
   14028:	ldr	r6, [r1, #16]
   1402c:	and	r6, r6, #61440	; 0xf000
   14030:	cmp	r6, #16384	; 0x4000
   14034:	moveq	r6, #512	; 0x200
   14038:	movne	r6, #0
   1403c:	mov	r1, r3
   14040:	ldr	r0, [r4, #16]
   14044:	mov	r2, r6
   14048:	movw	r5, #29328	; 0x7290
   1404c:	bl	12098 <unlinkat@plt>
   14050:	movt	r5, #4
   14054:	cmp	r0, #0
   14058:	beq	14010 <__assert_fail@plt+0x193c>
   1405c:	bl	12434 <__errno_location@plt>
   14060:	ldr	r8, [r0]
   14064:	mov	r9, r0
   14068:	cmp	r8, #21
   1406c:	beq	140b8 <__assert_fail@plt+0x19e4>
   14070:	mov	r2, #5
   14074:	movw	r1, #62636	; 0xf4ac
   14078:	mov	r0, #0
   1407c:	movt	r1, #2
   14080:	bl	1217c <dcgettext@plt>
   14084:	mov	r1, r7
   14088:	mov	r5, r0
   1408c:	mov	r0, #0
   14090:	bl	190b8 <__assert_fail@plt+0x69e4>
   14094:	mov	r2, r5
   14098:	mov	r1, r8
   1409c:	mov	r3, r0
   140a0:	mov	r0, #0
   140a4:	bl	122cc <error@plt>
   140a8:	mov	r3, #1
   140ac:	mov	r0, #0
   140b0:	str	r3, [r4, #28]
   140b4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   140b8:	tst	r6, #512	; 0x200
   140bc:	bne	14070 <__assert_fail@plt+0x199c>
   140c0:	ldr	r0, [r5, #16]
   140c4:	mov	r2, #512	; 0x200
   140c8:	ldr	r1, [r5, #12]
   140cc:	bl	12098 <unlinkat@plt>
   140d0:	cmp	r0, #0
   140d4:	beq	14010 <__assert_fail@plt+0x193c>
   140d8:	ldr	r8, [r9]
   140dc:	b	14070 <__assert_fail@plt+0x199c>
   140e0:	ldr	r3, [r1, #16]
   140e4:	push	{r4, r5, r6, r7, r8, lr}
   140e8:	and	r3, r3, #61440	; 0xf000
   140ec:	cmp	r3, #16384	; 0x4000
   140f0:	mov	r4, r0
   140f4:	beq	14120 <__assert_fail@plt+0x1a4c>
   140f8:	cmp	r3, #32768	; 0x8000
   140fc:	beq	14108 <__assert_fail@plt+0x1a34>
   14100:	mov	r0, #0
   14104:	pop	{r4, r5, r6, r7, r8, pc}
   14108:	ldr	r2, [r1, #48]	; 0x30
   1410c:	ldr	r3, [r1, #52]	; 0x34
   14110:	orrs	r3, r2, r3
   14114:	movne	r0, #0
   14118:	moveq	r0, #1
   1411c:	pop	{r4, r5, r6, r7, r8, pc}
   14120:	bl	12434 <__errno_location@plt>
   14124:	movw	r6, #29328	; 0x7290
   14128:	movt	r6, #4
   1412c:	mov	r5, #0
   14130:	mov	r2, #131072	; 0x20000
   14134:	ldr	r1, [r6, #12]
   14138:	mov	r7, r0
   1413c:	str	r5, [r0]
   14140:	ldr	r0, [r6, #16]
   14144:	bl	123f8 <openat64@plt>
   14148:	cmp	r0, r5
   1414c:	blt	141ec <__assert_fail@plt+0x1b18>
   14150:	bl	125b4 <fdopendir@plt>
   14154:	subs	r5, r0, #0
   14158:	beq	14224 <__assert_fail@plt+0x1b50>
   1415c:	bl	125a8 <readdir64@plt>
   14160:	subs	r3, r0, #0
   14164:	beq	141ac <__assert_fail@plt+0x1ad8>
   14168:	ldrb	r2, [r3, #19]
   1416c:	cmp	r2, #46	; 0x2e
   14170:	bne	14190 <__assert_fail@plt+0x1abc>
   14174:	ldrb	r2, [r3, #20]
   14178:	mov	r0, r5
   1417c:	cmp	r2, #0
   14180:	beq	1415c <__assert_fail@plt+0x1a88>
   14184:	ldrh	r3, [r3, #20]
   14188:	cmp	r3, #46	; 0x2e
   1418c:	beq	1415c <__assert_fail@plt+0x1a88>
   14190:	mov	r8, #0
   14194:	mov	r0, r5
   14198:	bl	12698 <closedir@plt>
   1419c:	cmp	r0, #0
   141a0:	bne	141b4 <__assert_fail@plt+0x1ae0>
   141a4:	mov	r0, r8
   141a8:	pop	{r4, r5, r6, r7, r8, pc}
   141ac:	mov	r8, #1
   141b0:	b	14194 <__assert_fail@plt+0x1ac0>
   141b4:	mov	r1, r4
   141b8:	mov	r0, #0
   141bc:	ldr	r5, [r7]
   141c0:	bl	190b8 <__assert_fail@plt+0x69e4>
   141c4:	movw	r2, #15064	; 0x3ad8
   141c8:	movt	r2, #3
   141cc:	mov	r1, r5
   141d0:	mov	r3, r0
   141d4:	mov	r0, #0
   141d8:	bl	122cc <error@plt>
   141dc:	mov	r3, #1
   141e0:	mov	r0, #0
   141e4:	str	r3, [r6, #28]
   141e8:	pop	{r4, r5, r6, r7, r8, pc}
   141ec:	ldr	r7, [r7]
   141f0:	mov	r1, r4
   141f4:	mov	r0, r5
   141f8:	bl	190b8 <__assert_fail@plt+0x69e4>
   141fc:	mov	r1, r7
   14200:	movw	r2, #15064	; 0x3ad8
   14204:	movt	r2, #3
   14208:	mov	r3, r0
   1420c:	mov	r0, r5
   14210:	bl	122cc <error@plt>
   14214:	mov	r3, #1
   14218:	mov	r0, r5
   1421c:	str	r3, [r6, #28]
   14220:	pop	{r4, r5, r6, r7, r8, pc}
   14224:	ldr	r7, [r7]
   14228:	mov	r1, r4
   1422c:	b	141f8 <__assert_fail@plt+0x1b24>
   14230:	b	1543c <__assert_fail@plt+0x2d68>
   14234:	movw	r3, #29328	; 0x7290
   14238:	movt	r3, #4
   1423c:	ldr	r0, [r3, #12]
   14240:	b	1543c <__assert_fail@plt+0x2d68>
   14244:	mov	r0, #0
   14248:	bx	lr
   1424c:	movw	r3, #29372	; 0x72bc
   14250:	movt	r3, #4
   14254:	push	{r4, lr}
   14258:	movw	ip, #29328	; 0x7290
   1425c:	ldr	r4, [r3, #20]
   14260:	sub	sp, sp, #16
   14264:	ldr	lr, [r3, #40]	; 0x28
   14268:	movt	ip, #4
   1426c:	mov	r3, r1
   14270:	ldr	r1, [ip, #16]
   14274:	stm	sp, {r4, lr}
   14278:	ldrb	r4, [r2, #32]
   1427c:	ldr	lr, [ip, #12]
   14280:	str	r4, [sp, #8]
   14284:	ldr	ip, [r2, #44]	; 0x2c
   14288:	mov	r2, lr
   1428c:	str	ip, [sp, #12]
   14290:	bl	1f0b4 <__assert_fail@plt+0xc9e0>
   14294:	mov	r0, #1
   14298:	add	sp, sp, #16
   1429c:	pop	{r4, pc}
   142a0:	push	{lr}		; (str lr, [sp, #-4]!)
   142a4:	sub	sp, sp, #12
   142a8:	ldr	ip, [r2, #44]	; 0x2c
   142ac:	movw	r3, #19216	; 0x4b10
   142b0:	ldr	r1, [r2, #56]	; 0x38
   142b4:	movt	r3, #3
   142b8:	ldrb	r2, [r2, #52]	; 0x34
   142bc:	str	r0, [sp]
   142c0:	mov	r0, ip
   142c4:	bl	20034 <__assert_fail@plt+0xd960>
   142c8:	mov	r0, #1
   142cc:	add	sp, sp, #12
   142d0:	pop	{pc}		; (ldr pc, [sp], #4)
   142d4:	push	{r4, lr}
   142d8:	ldr	r4, [r2, #44]	; 0x2c
   142dc:	mov	r1, r4
   142e0:	bl	12650 <fputs@plt>
   142e4:	mov	r1, r4
   142e8:	mov	r0, #0
   142ec:	bl	1223c <_IO_putc@plt>
   142f0:	mov	r0, #1
   142f4:	pop	{r4, pc}
   142f8:	mov	r3, r0
   142fc:	mov	r0, r1
   14300:	push	{r4, lr}
   14304:	mov	r1, r3
   14308:	mov	r4, r2
   1430c:	bl	136f8 <__assert_fail@plt+0x1024>
   14310:	ldr	r1, [r4, #40]	; 0x28
   14314:	bl	1205c <strcmp@plt>
   14318:	rsbs	r0, r0, #1
   1431c:	movcc	r0, #0
   14320:	pop	{r4, pc}
   14324:	ldr	r3, [r2, #40]	; 0x28
   14328:	cmp	r3, #1
   1432c:	beq	14384 <__assert_fail@plt+0x1cb0>
   14330:	bcc	14364 <__assert_fail@plt+0x1c90>
   14334:	cmp	r3, #2
   14338:	bne	1435c <__assert_fail@plt+0x1c88>
   1433c:	ldr	r0, [r1, #28]
   14340:	mov	r1, #0
   14344:	ldrd	r2, [r2, #48]	; 0x30
   14348:	cmp	r1, r3
   1434c:	cmpeq	r0, r2
   14350:	movne	r0, #0
   14354:	moveq	r0, #1
   14358:	bx	lr
   1435c:	mov	r0, #0
   14360:	bx	lr
   14364:	ldr	r0, [r1, #28]
   14368:	mov	r1, #0
   1436c:	ldrd	r2, [r2, #48]	; 0x30
   14370:	cmp	r1, r3
   14374:	cmpeq	r0, r2
   14378:	movls	r0, #0
   1437c:	movhi	r0, #1
   14380:	bx	lr
   14384:	ldr	r0, [r1, #28]
   14388:	mov	r1, #0
   1438c:	ldrd	r2, [r2, #48]	; 0x30
   14390:	cmp	r1, r3
   14394:	cmpeq	r0, r2
   14398:	movcs	r0, #0
   1439c:	movcc	r0, #1
   143a0:	bx	lr
   143a4:	ldr	r0, [r1, #28]
   143a8:	ldr	r3, [r2, #40]	; 0x28
   143ac:	subs	r3, r3, r0
   143b0:	rsbs	r0, r3, #0
   143b4:	adcs	r0, r0, r3
   143b8:	bx	lr
   143bc:	ldr	r3, [r1, #16]
   143c0:	and	r3, r3, #61440	; 0xf000
   143c4:	cmp	r3, #40960	; 0xa000
   143c8:	beq	143d4 <__assert_fail@plt+0x1d00>
   143cc:	mov	r0, #0
   143d0:	bx	lr
   143d4:	add	r1, r2, #40	; 0x28
   143d8:	mov	r2, #1
   143dc:	b	13dd4 <__assert_fail@plt+0x1700>
   143e0:	push	{r3, r4, r5, lr}
   143e4:	ldr	r5, [r2, #40]	; 0x28
   143e8:	bl	2125c <__assert_fail@plt+0xeb88>
   143ec:	mov	r4, r0
   143f0:	bl	21410 <__assert_fail@plt+0xed3c>
   143f4:	mov	r1, r4
   143f8:	mov	r2, #16
   143fc:	mov	r0, r5
   14400:	bl	122f0 <fnmatch@plt>
   14404:	mov	r5, r0
   14408:	mov	r0, r4
   1440c:	bl	120c8 <free@plt>
   14410:	rsbs	r0, r5, #1
   14414:	movcc	r0, #0
   14418:	pop	{r3, r4, r5, pc}
   1441c:	ldrd	r0, [r1, #96]	; 0x60
   14420:	push	{r3, lr}
   14424:	orrs	r3, r0, r1
   14428:	beq	14494 <__assert_fail@plt+0x1dc0>
   1442c:	ldr	r3, [r2, #40]	; 0x28
   14430:	cmp	r3, #1
   14434:	beq	1447c <__assert_fail@plt+0x1da8>
   14438:	bcc	1445c <__assert_fail@plt+0x1d88>
   1443c:	cmp	r3, #2
   14440:	bne	14474 <__assert_fail@plt+0x1da0>
   14444:	ldrd	r2, [r2, #48]	; 0x30
   14448:	cmp	r1, r3
   1444c:	cmpeq	r0, r2
   14450:	movne	r0, #0
   14454:	moveq	r0, #1
   14458:	pop	{r3, pc}
   1445c:	ldrd	r2, [r2, #48]	; 0x30
   14460:	cmp	r1, r3
   14464:	cmpeq	r0, r2
   14468:	movls	r0, #0
   1446c:	movhi	r0, #1
   14470:	pop	{r3, pc}
   14474:	mov	r0, #0
   14478:	pop	{r3, pc}
   1447c:	ldrd	r2, [r2, #48]	; 0x30
   14480:	cmp	r1, r3
   14484:	cmpeq	r0, r2
   14488:	movcs	r0, #0
   1448c:	movcc	r0, #1
   14490:	pop	{r3, pc}
   14494:	movw	r0, #62656	; 0xf4c0
   14498:	movw	r1, #62552	; 0xf458
   1449c:	movt	r0, #2
   144a0:	movt	r1, #2
   144a4:	movw	r2, #567	; 0x237
   144a8:	ldr	r3, [pc]	; 144b0 <__assert_fail@plt+0x1ddc>
   144ac:	bl	126d4 <__assert_fail@plt>
   144b0:	andeq	pc, r2, r0, lsl r4	; <UNPREDICTABLE>
   144b4:	push	{r3, lr}
   144b8:	mov	r1, r0
   144bc:	ldr	r0, [r2, #40]	; 0x28
   144c0:	mov	r2, #16
   144c4:	bl	122f0 <fnmatch@plt>
   144c8:	rsbs	r0, r0, #1
   144cc:	movcc	r0, #0
   144d0:	pop	{r3, pc}
   144d4:	ldr	r3, [r2, #40]	; 0x28
   144d8:	cmp	r3, #1
   144dc:	beq	14534 <__assert_fail@plt+0x1e60>
   144e0:	bcc	14514 <__assert_fail@plt+0x1e40>
   144e4:	cmp	r3, #2
   144e8:	bne	1450c <__assert_fail@plt+0x1e38>
   144ec:	ldr	r0, [r1, #20]
   144f0:	mov	r1, #0
   144f4:	ldrd	r2, [r2, #48]	; 0x30
   144f8:	cmp	r1, r3
   144fc:	cmpeq	r0, r2
   14500:	movne	r0, #0
   14504:	moveq	r0, #1
   14508:	bx	lr
   1450c:	mov	r0, #0
   14510:	bx	lr
   14514:	ldr	r0, [r1, #20]
   14518:	mov	r1, #0
   1451c:	ldrd	r2, [r2, #48]	; 0x30
   14520:	cmp	r1, r3
   14524:	cmpeq	r0, r2
   14528:	movls	r0, #0
   1452c:	movhi	r0, #1
   14530:	bx	lr
   14534:	ldr	r0, [r1, #20]
   14538:	mov	r1, #0
   1453c:	ldrd	r2, [r2, #48]	; 0x30
   14540:	cmp	r1, r3
   14544:	cmpeq	r0, r2
   14548:	movcs	r0, #0
   1454c:	movcc	r0, #1
   14550:	bx	lr
   14554:	ldr	r3, [r1, #16]
   14558:	and	r3, r3, #61440	; 0xf000
   1455c:	cmp	r3, #40960	; 0xa000
   14560:	beq	1456c <__assert_fail@plt+0x1e98>
   14564:	mov	r0, #0
   14568:	bx	lr
   1456c:	add	r1, r2, #40	; 0x28
   14570:	mov	r2, #0
   14574:	b	13dd4 <__assert_fail@plt+0x1700>
   14578:	b	1424c <__assert_fail@plt+0x1b78>
   1457c:	add	r1, r1, #80	; 0x50
   14580:	mov	r3, #60	; 0x3c
   14584:	push	{lr}		; (str lr, [sp, #-4]!)
   14588:	sub	sp, sp, #12
   1458c:	ldm	r1, {r0, r1}
   14590:	stm	sp, {r0, r1}
   14594:	bl	13b70 <__assert_fail@plt+0x149c>
   14598:	add	sp, sp, #12
   1459c:	pop	{pc}		; (ldr pc, [sp], #4)
   145a0:	add	r1, r1, #80	; 0x50
   145a4:	movw	r3, #20864	; 0x5180
   145a8:	push	{lr}		; (str lr, [sp, #-4]!)
   145ac:	sub	sp, sp, #12
   145b0:	ldm	r1, {r0, r1}
   145b4:	movt	r3, #1
   145b8:	stm	sp, {r0, r1}
   145bc:	bl	13b70 <__assert_fail@plt+0x149c>
   145c0:	add	sp, sp, #12
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	push	{r3, r4, r5, lr}
   145cc:	ldr	r5, [r2, #40]	; 0x28
   145d0:	bl	2125c <__assert_fail@plt+0xeb88>
   145d4:	mov	r4, r0
   145d8:	bl	21410 <__assert_fail@plt+0xed3c>
   145dc:	mov	r1, r4
   145e0:	mov	r2, #0
   145e4:	mov	r0, r5
   145e8:	bl	122f0 <fnmatch@plt>
   145ec:	mov	r5, r0
   145f0:	mov	r0, r4
   145f4:	bl	120c8 <free@plt>
   145f8:	rsbs	r0, r5, #1
   145fc:	movcc	r0, #0
   14600:	pop	{r3, r4, r5, pc}
   14604:	push	{r3, lr}
   14608:	ldr	r2, [r2, #160]	; 0xa0
   1460c:	bl	18ff8 <__assert_fail@plt+0x6924>
   14610:	eor	r0, r0, #1
   14614:	uxtb	r0, r0
   14618:	pop	{r3, pc}
   1461c:	push	{lr}		; (str lr, [sp, #-4]!)
   14620:	sub	sp, sp, #12
   14624:	ldr	r3, [r2, #44]	; 0x2c
   14628:	cmp	r3, #0
   1462c:	bne	1465c <__assert_fail@plt+0x1f88>
   14630:	add	r1, r1, #80	; 0x50
   14634:	add	r2, r2, #48	; 0x30
   14638:	ldm	r1, {r0, r1}
   1463c:	ldm	r2, {r2, r3}
   14640:	stm	sp, {r0, r1}
   14644:	bl	13af8 <__assert_fail@plt+0x1424>
   14648:	cmp	r0, #0
   1464c:	movle	r0, #0
   14650:	movgt	r0, #1
   14654:	add	sp, sp, #12
   14658:	pop	{pc}		; (ldr pc, [sp], #4)
   1465c:	movw	r0, #62596	; 0xf484
   14660:	movw	r1, #62552	; 0xf458
   14664:	movt	r0, #2
   14668:	movt	r1, #2
   1466c:	movw	r2, #689	; 0x2b1
   14670:	ldr	r3, [pc]	; 14678 <__assert_fail@plt+0x1fa4>
   14674:	bl	126d4 <__assert_fail@plt>
   14678:	andeq	pc, r2, ip, lsl r4	; <UNPREDICTABLE>
   1467c:	push	{r4, r5, lr}
   14680:	mov	r4, r0
   14684:	ldr	r3, [r2, #44]	; 0x2c
   14688:	sub	sp, sp, #12
   1468c:	cmp	r3, #0
   14690:	bne	14798 <__assert_fail@plt+0x20c4>
   14694:	ldr	r3, [r2, #40]	; 0x28
   14698:	cmp	r3, #4
   1469c:	ldrls	pc, [pc, r3, lsl #2]
   146a0:	b	14760 <__assert_fail@plt+0x208c>
   146a4:	strdeq	r4, [r1], -r0
   146a8:	andeq	r4, r1, r8, lsl #14
   146ac:	andeq	r4, r1, ip, asr #14
   146b0:			; <UNDEFINED> instruction: 0x000146b8
   146b4:	andeq	r4, r1, ip, ror r7
   146b8:	ldr	r0, [r1, #80]	; 0x50
   146bc:	add	r3, sp, #8
   146c0:	ldr	ip, [r1, #84]	; 0x54
   146c4:	str	r0, [r3, #-8]!
   146c8:	add	r2, r2, #48	; 0x30
   146cc:	str	ip, [sp, #4]
   146d0:	ldm	r3, {r0, r1}
   146d4:	ldm	r2, {r2, r3}
   146d8:	bl	13af8 <__assert_fail@plt+0x1424>
   146dc:	cmp	r0, #0
   146e0:	movle	r0, #0
   146e4:	movgt	r0, #1
   146e8:	add	sp, sp, #12
   146ec:	pop	{r4, r5, pc}
   146f0:	add	r0, r1, #72	; 0x48
   146f4:	ldr	ip, [r1, #76]	; 0x4c
   146f8:	mov	r3, sp
   146fc:	ldm	r0, {r0, r1}
   14700:	stm	sp, {r0, r1}
   14704:	b	146c8 <__assert_fail@plt+0x1ff4>
   14708:	mov	r2, #5
   1470c:	movw	r1, #62724	; 0xf504
   14710:	mov	r0, #0
   14714:	movt	r1, #2
   14718:	bl	1217c <dcgettext@plt>
   1471c:	mov	r1, r4
   14720:	mov	r5, r0
   14724:	mov	r0, #0
   14728:	bl	190b8 <__assert_fail@plt+0x69e4>
   1472c:	mov	r2, r5
   14730:	mov	r3, r0
   14734:	mov	r0, #0
   14738:	mov	r1, r0
   1473c:	bl	122cc <error@plt>
   14740:	mov	r0, #0
   14744:	add	sp, sp, #12
   14748:	pop	{r4, r5, pc}
   1474c:	ldr	r0, [r1, #88]	; 0x58
   14750:	add	r3, sp, #8
   14754:	ldr	ip, [r1, #92]	; 0x5c
   14758:	str	r0, [r3, #-8]!
   1475c:	b	146c8 <__assert_fail@plt+0x1ff4>
   14760:	movw	r0, #62772	; 0xf534
   14764:	movw	r1, #62552	; 0xf458
   14768:	movt	r0, #2
   1476c:	movt	r1, #2
   14770:	movw	r2, #735	; 0x2df
   14774:	ldr	r3, [pc, #56]	; 147b4 <__assert_fail@plt+0x20e0>
   14778:	bl	126d4 <__assert_fail@plt>
   1477c:	movw	r0, #62680	; 0xf4d8
   14780:	movw	r1, #62552	; 0xf458
   14784:	movt	r0, #2
   14788:	movt	r1, #2
   1478c:	mov	r2, #704	; 0x2c0
   14790:	ldr	r3, [pc, #28]	; 147b4 <__assert_fail@plt+0x20e0>
   14794:	bl	126d4 <__assert_fail@plt>
   14798:	movw	r0, #62596	; 0xf484
   1479c:	movw	r1, #62552	; 0xf458
   147a0:	movt	r0, #2
   147a4:	movt	r1, #2
   147a8:	movw	r2, #699	; 0x2bb
   147ac:	ldr	r3, [pc]	; 147b4 <__assert_fail@plt+0x20e0>
   147b0:	bl	126d4 <__assert_fail@plt>
   147b4:	andeq	pc, r2, r8, lsr #8
   147b8:	push	{r3, lr}
   147bc:	ldr	r0, [r1, #28]
   147c0:	bl	126a4 <getgrgid@plt>
   147c4:	rsbs	r0, r0, #1
   147c8:	movcc	r0, #0
   147cc:	pop	{r3, pc}
   147d0:	push	{r3, lr}
   147d4:	ldr	r0, [r1, #24]
   147d8:	bl	12074 <getpwuid@plt>
   147dc:	rsbs	r0, r0, #1
   147e0:	movcc	r0, #0
   147e4:	pop	{r3, pc}
   147e8:	push	{r4, r5, r6, lr}
   147ec:	mov	r5, r0
   147f0:	ldr	r3, [r2, #132]	; 0x84
   147f4:	mov	r6, r1
   147f8:	mov	r1, r0
   147fc:	mov	r4, r2
   14800:	ldr	r0, [r3]
   14804:	bl	13c60 <__assert_fail@plt+0x158c>
   14808:	cmp	r0, #0
   1480c:	popeq	{r4, r5, r6, pc}
   14810:	mov	r0, r5
   14814:	mov	r1, r6
   14818:	mov	r2, r4
   1481c:	pop	{r4, r5, r6, lr}
   14820:	b	1543c <__assert_fail@plt+0x2d68>
   14824:	push	{r3, r4, r5, lr}
   14828:	mov	r5, r1
   1482c:	ldr	r3, [r2, #132]	; 0x84
   14830:	mov	r1, r0
   14834:	mov	r4, r2
   14838:	ldr	r0, [r3]
   1483c:	bl	13c60 <__assert_fail@plt+0x158c>
   14840:	cmp	r0, #0
   14844:	popeq	{r3, r4, r5, pc}
   14848:	movw	r3, #29328	; 0x7290
   1484c:	movt	r3, #4
   14850:	mov	r1, r5
   14854:	mov	r2, r4
   14858:	ldr	r0, [r3, #12]
   1485c:	pop	{r3, r4, r5, lr}
   14860:	b	1543c <__assert_fail@plt+0x2d68>
   14864:	mov	r0, #1
   14868:	bx	lr
   1486c:	push	{r3, lr}
   14870:	mov	r1, r0
   14874:	ldr	r0, [r2, #40]	; 0x28
   14878:	mov	r2, #0
   1487c:	bl	122f0 <fnmatch@plt>
   14880:	rsbs	r0, r0, #1
   14884:	movcc	r0, #0
   14888:	pop	{r3, pc}
   1488c:	push	{r3, lr}
   14890:	ldr	r3, [r1, #16]
   14894:	ldr	r0, [r2, #40]	; 0x28
   14898:	and	r1, r3, #61440	; 0xf000
   1489c:	cmp	r1, #16384	; 0x4000
   148a0:	moveq	r1, #44	; 0x2c
   148a4:	movne	r1, #40	; 0x28
   148a8:	cmp	r0, #1
   148ac:	add	r2, r2, r1
   148b0:	ldr	r2, [r2, #4]
   148b4:	beq	148f0 <__assert_fail@plt+0x221c>
   148b8:	bcc	148dc <__assert_fail@plt+0x2208>
   148bc:	cmp	r0, #2
   148c0:	bne	148d8 <__assert_fail@plt+0x2204>
   148c4:	ubfx	r0, r3, #0, #12
   148c8:	subs	r3, r0, r2
   148cc:	rsbs	r0, r3, #0
   148d0:	adcs	r0, r0, r3
   148d4:	pop	{r3, pc}
   148d8:	bl	12674 <abort@plt>
   148dc:	and	r0, r2, r3
   148e0:	subs	r2, r0, r2
   148e4:	rsbs	r0, r2, #0
   148e8:	adcs	r0, r0, r2
   148ec:	pop	{r3, pc}
   148f0:	cmp	r2, #0
   148f4:	popeq	{r3, pc}
   148f8:	tst	r2, r3
   148fc:	moveq	r0, #0
   14900:	movne	r0, #1
   14904:	pop	{r3, pc}
   14908:	movw	r1, #29328	; 0x7290
   1490c:	movt	r1, #4
   14910:	push	{r3, lr}
   14914:	mov	r2, #1
   14918:	mov	r3, #0
   1491c:	ldr	r0, [r1, #16]
   14920:	ldr	r1, [r1, #12]
   14924:	bl	120d4 <faccessat@plt>
   14928:	rsbs	r0, r0, #1
   1492c:	movcc	r0, #0
   14930:	pop	{r3, pc}
   14934:	movw	r1, #29328	; 0x7290
   14938:	movt	r1, #4
   1493c:	push	{r3, lr}
   14940:	mov	r2, #4
   14944:	mov	r3, #0
   14948:	ldr	r0, [r1, #16]
   1494c:	ldr	r1, [r1, #12]
   14950:	bl	120d4 <faccessat@plt>
   14954:	rsbs	r0, r0, #1
   14958:	movcc	r0, #0
   1495c:	pop	{r3, pc}
   14960:	movw	r1, #29328	; 0x7290
   14964:	movt	r1, #4
   14968:	push	{r3, lr}
   1496c:	mov	r2, #2
   14970:	mov	r3, #0
   14974:	ldr	r0, [r1, #16]
   14978:	ldr	r1, [r1, #12]
   1497c:	bl	120d4 <faccessat@plt>
   14980:	rsbs	r0, r0, #1
   14984:	movcc	r0, #0
   14988:	pop	{r3, pc}
   1498c:	push	{lr}		; (str lr, [sp, #-4]!)
   14990:	sub	sp, sp, #12
   14994:	ldr	ip, [r2, #44]	; 0x2c
   14998:	movw	r3, #19216	; 0x4b10
   1499c:	ldr	r1, [r2, #56]	; 0x38
   149a0:	movt	r3, #3
   149a4:	ldrb	r2, [r2, #52]	; 0x34
   149a8:	str	r0, [sp]
   149ac:	mov	r0, ip
   149b0:	bl	20034 <__assert_fail@plt+0xd960>
   149b4:	mov	r0, #1
   149b8:	add	sp, sp, #12
   149bc:	pop	{pc}		; (ldr pc, [sp], #4)
   149c0:	push	{r4, lr}
   149c4:	ldr	r4, [r2, #44]	; 0x2c
   149c8:	mov	r1, r4
   149cc:	bl	12650 <fputs@plt>
   149d0:	mov	r1, r4
   149d4:	mov	r0, #0
   149d8:	bl	1223c <_IO_putc@plt>
   149dc:	mov	r0, #1
   149e0:	pop	{r4, pc}
   149e4:	push	{r4, r5, r6, lr}
   149e8:	sub	sp, sp, #8
   149ec:	mov	r6, r2
   149f0:	mov	r5, r0
   149f4:	bl	123d4 <strlen@plt>
   149f8:	mov	r3, #0
   149fc:	mov	r1, r5
   14a00:	mov	r4, r0
   14a04:	ldr	r0, [r6, #40]	; 0x28
   14a08:	mov	r2, r4
   14a0c:	str	r3, [sp]
   14a10:	bl	12410 <re_match@plt>
   14a14:	subs	r3, r4, r0
   14a18:	rsbs	r0, r3, #0
   14a1c:	adcs	r0, r0, r3
   14a20:	add	sp, sp, #8
   14a24:	pop	{r4, r5, r6, pc}
   14a28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a2c:	mov	sl, r2
   14a30:	ldr	r4, [r2, #44]	; 0x2c
   14a34:	ldrd	r6, [r1, #48]	; 0x30
   14a38:	asr	r5, r4, #31
   14a3c:	mov	r2, r4
   14a40:	mov	r0, r6
   14a44:	mov	r1, r7
   14a48:	mov	r3, r5
   14a4c:	bl	2e508 <fts_children@@Base+0x213c>
   14a50:	mov	r2, r4
   14a54:	mov	r3, r5
   14a58:	mov	r8, r0
   14a5c:	mov	r9, r1
   14a60:	mov	r0, r6
   14a64:	mov	r1, r7
   14a68:	bl	2e508 <fts_children@@Base+0x213c>
   14a6c:	ldr	r1, [sl, #40]	; 0x28
   14a70:	orrs	r3, r2, r3
   14a74:	moveq	r3, #0
   14a78:	movne	r3, #1
   14a7c:	adds	r8, r8, r3
   14a80:	adc	r9, r9, #0
   14a84:	cmp	r1, #1
   14a88:	beq	14ad0 <__assert_fail@plt+0x23fc>
   14a8c:	bcc	14ab8 <__assert_fail@plt+0x23e4>
   14a90:	cmp	r1, #2
   14a94:	bne	14ab0 <__assert_fail@plt+0x23dc>
   14a98:	ldrd	r2, [sl, #48]	; 0x30
   14a9c:	cmp	r9, r3
   14aa0:	cmpeq	r8, r2
   14aa4:	movne	r0, #0
   14aa8:	moveq	r0, #1
   14aac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ab0:	mov	r0, #0
   14ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ab8:	ldrd	r2, [sl, #48]	; 0x30
   14abc:	cmp	r9, r3
   14ac0:	cmpeq	r8, r2
   14ac4:	movls	r0, #0
   14ac8:	movhi	r0, #1
   14acc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ad0:	ldrd	r2, [sl, #48]	; 0x30
   14ad4:	cmp	r9, r3
   14ad8:	cmpeq	r8, r2
   14adc:	movcs	r0, #0
   14ae0:	movcc	r0, #1
   14ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ae8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14aec:	mov	r9, r1
   14af0:	ldrd	r4, [r1, #96]	; 0x60
   14af4:	mov	r8, r2
   14af8:	orrs	r3, r4, r5
   14afc:	beq	14b18 <__assert_fail@plt+0x2444>
   14b00:	ldrd	r6, [r2, #40]	; 0x28
   14b04:	cmp	r5, r7
   14b08:	cmpeq	r4, r6
   14b0c:	beq	14b18 <__assert_fail@plt+0x2444>
   14b10:	mov	r0, #0
   14b14:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14b18:	movw	r3, #29328	; 0x7290
   14b1c:	movt	r3, #4
   14b20:	mov	r2, r9
   14b24:	ldr	r1, [r3, #12]
   14b28:	bl	18130 <__assert_fail@plt+0x5a5c>
   14b2c:	cmp	r0, #0
   14b30:	bne	14b10 <__assert_fail@plt+0x243c>
   14b34:	ldrd	r6, [r9, #96]	; 0x60
   14b38:	ldrd	r4, [r8, #40]	; 0x28
   14b3c:	cmp	r7, r5
   14b40:	cmpeq	r6, r4
   14b44:	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   14b48:	ldrd	r0, [r9]
   14b4c:	ldrd	r2, [r8, #48]	; 0x30
   14b50:	cmp	r1, r3
   14b54:	cmpeq	r0, r2
   14b58:	movne	r0, #0
   14b5c:	moveq	r0, #1
   14b60:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14b64:	mov	r0, #1
   14b68:	bx	lr
   14b6c:	push	{r3, lr}
   14b70:	movw	r3, #29328	; 0x7290
   14b74:	movt	r3, #4
   14b78:	ldr	ip, [r2, #40]	; 0x28
   14b7c:	ldrb	r2, [r3, #5]
   14b80:	cmp	r2, #0
   14b84:	beq	14bb4 <__assert_fail@plt+0x24e0>
   14b88:	ldr	r0, [r3, #8]
   14b8c:	cmp	r0, #0
   14b90:	popeq	{r3, pc}
   14b94:	ldrb	r3, [r3, #4]
   14b98:	cmp	r3, #0
   14b9c:	ldrne	r0, [r1, #16]
   14ba0:	and	r0, r0, #61440	; 0xf000
   14ba4:	subs	r3, ip, r0
   14ba8:	rsbs	r0, r3, #0
   14bac:	adcs	r0, r0, r3
   14bb0:	pop	{r3, pc}
   14bb4:	movw	r0, #62784	; 0xf540
   14bb8:	movw	r1, #62552	; 0xf458
   14bbc:	movt	r0, #2
   14bc0:	movt	r1, #2
   14bc4:	movw	r2, #1058	; 0x422
   14bc8:	ldr	r3, [pc]	; 14bd0 <__assert_fail@plt+0x24fc>
   14bcc:	bl	126d4 <__assert_fail@plt>
   14bd0:	andeq	pc, r2, r8, lsr r4	; <UNPREDICTABLE>
   14bd4:	ldr	r3, [r2, #40]	; 0x28
   14bd8:	cmp	r3, #1
   14bdc:	beq	14c34 <__assert_fail@plt+0x2560>
   14be0:	bcc	14c14 <__assert_fail@plt+0x2540>
   14be4:	cmp	r3, #2
   14be8:	bne	14c0c <__assert_fail@plt+0x2538>
   14bec:	ldr	r0, [r1, #24]
   14bf0:	mov	r1, #0
   14bf4:	ldrd	r2, [r2, #48]	; 0x30
   14bf8:	cmp	r1, r3
   14bfc:	cmpeq	r0, r2
   14c00:	movne	r0, #0
   14c04:	moveq	r0, #1
   14c08:	bx	lr
   14c0c:	mov	r0, #0
   14c10:	bx	lr
   14c14:	ldr	r0, [r1, #24]
   14c18:	mov	r1, #0
   14c1c:	ldrd	r2, [r2, #48]	; 0x30
   14c20:	cmp	r1, r3
   14c24:	cmpeq	r0, r2
   14c28:	movls	r0, #0
   14c2c:	movhi	r0, #1
   14c30:	bx	lr
   14c34:	ldr	r0, [r1, #24]
   14c38:	mov	r1, #0
   14c3c:	ldrd	r2, [r2, #48]	; 0x30
   14c40:	cmp	r1, r3
   14c44:	cmpeq	r0, r2
   14c48:	movcs	r0, #0
   14c4c:	movcc	r0, #1
   14c50:	bx	lr
   14c54:	ldr	r0, [r1, #76]	; 0x4c
   14c58:	ldr	r3, [r1, #92]	; 0x5c
   14c5c:	ldr	ip, [r1, #72]	; 0x48
   14c60:	ldr	r1, [r1, #88]	; 0x58
   14c64:	subs	r3, r0, r3
   14c68:	push	{lr}		; (str lr, [sp, #-4]!)
   14c6c:	sub	sp, sp, #12
   14c70:	addmi	r3, r3, #998244352	; 0x3b800000
   14c74:	rsb	r1, r1, ip
   14c78:	add	ip, sp, #8
   14c7c:	addmi	r3, r3, #1753088	; 0x1ac000
   14c80:	submi	r1, r1, #1
   14c84:	addmi	r3, r3, #2560	; 0xa00
   14c88:	stm	sp, {r1, r3}
   14c8c:	movw	r3, #20864	; 0x5180
   14c90:	ldmdb	ip, {r0, r1}
   14c94:	movt	r3, #1
   14c98:	bl	13b70 <__assert_fail@plt+0x149c>
   14c9c:	add	sp, sp, #12
   14ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ca4:	ldr	r0, [r1, #24]
   14ca8:	ldr	r3, [r2, #40]	; 0x28
   14cac:	subs	r3, r3, r0
   14cb0:	rsbs	r0, r3, #0
   14cb4:	adcs	r0, r0, r3
   14cb8:	bx	lr
   14cbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   14cc0:	movw	r4, #26008	; 0x6598
   14cc4:	movt	r4, #4
   14cc8:	sub	sp, sp, #116	; 0x74
   14ccc:	mov	r9, r1
   14cd0:	mov	r8, r2
   14cd4:	ldr	r3, [r4]
   14cd8:	mov	r7, r0
   14cdc:	movw	r5, #29328	; 0x7290
   14ce0:	movt	r5, #4
   14ce4:	str	r3, [sp, #108]	; 0x6c
   14ce8:	bl	18850 <__assert_fail@plt+0x617c>
   14cec:	movw	ip, #34452	; 0x8694
   14cf0:	movw	r3, #34616	; 0x8738
   14cf4:	movt	ip, #1
   14cf8:	movt	r3, #1
   14cfc:	cmp	r0, #0
   14d00:	mov	r0, sp
   14d04:	moveq	r6, ip
   14d08:	movne	r6, r3
   14d0c:	bl	1812c <__assert_fail@plt+0x5a58>
   14d10:	ldr	r0, [r5, #12]
   14d14:	mov	r1, sp
   14d18:	blx	r6
   14d1c:	cmp	r0, #0
   14d20:	beq	14d74 <__assert_fail@plt+0x26a0>
   14d24:	bl	18850 <__assert_fail@plt+0x617c>
   14d28:	cmp	r0, #0
   14d2c:	beq	14d9c <__assert_fail@plt+0x26c8>
   14d30:	bl	12434 <__errno_location@plt>
   14d34:	ldr	r6, [r0]
   14d38:	cmp	r6, #2
   14d3c:	beq	14da8 <__assert_fail@plt+0x26d4>
   14d40:	mov	r1, r7
   14d44:	mov	r0, #0
   14d48:	bl	190b8 <__assert_fail@plt+0x69e4>
   14d4c:	mov	r1, r6
   14d50:	movw	r2, #15064	; 0x3ad8
   14d54:	movt	r2, #3
   14d58:	mov	r3, r0
   14d5c:	mov	r0, #0
   14d60:	bl	122cc <error@plt>
   14d64:	mov	r3, #1
   14d68:	mov	r0, #0
   14d6c:	str	r3, [r5, #28]
   14d70:	b	14d84 <__assert_fail@plt+0x26b0>
   14d74:	mov	r0, r7
   14d78:	mov	r1, sp
   14d7c:	mov	r2, r8
   14d80:	bl	14b6c <__assert_fail@plt+0x2498>
   14d84:	ldr	r2, [sp, #108]	; 0x6c
   14d88:	ldr	r3, [r4]
   14d8c:	cmp	r2, r3
   14d90:	bne	14dbc <__assert_fail@plt+0x26e8>
   14d94:	add	sp, sp, #116	; 0x74
   14d98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d9c:	bl	12434 <__errno_location@plt>
   14da0:	ldr	r6, [r0]
   14da4:	b	14d40 <__assert_fail@plt+0x266c>
   14da8:	mov	r0, r7
   14dac:	mov	r1, r9
   14db0:	mov	r2, r8
   14db4:	bl	14b6c <__assert_fail@plt+0x2498>
   14db8:	b	14d84 <__assert_fail@plt+0x26b0>
   14dbc:	bl	12188 <__stack_chk_fail@plt>
   14dc0:	push	{r4, r5, r6, r7, r8, lr}
   14dc4:	movw	r4, #26008	; 0x6598
   14dc8:	movt	r4, #4
   14dcc:	sub	sp, sp, #8
   14dd0:	movw	ip, #29372	; 0x72bc
   14dd4:	movw	r3, #29328	; 0x7290
   14dd8:	ldr	lr, [r4]
   14ddc:	movt	r3, #4
   14de0:	movt	ip, #4
   14de4:	mov	r6, r0
   14de8:	mov	r5, r2
   14dec:	ldr	r0, [r3, #16]
   14df0:	ldr	ip, [ip, #64]	; 0x40
   14df4:	mov	r2, sp
   14df8:	ldr	r1, [r3, #12]
   14dfc:	str	lr, [sp, #4]
   14e00:	blx	ip
   14e04:	cmp	r0, #0
   14e08:	blt	14e48 <__assert_fail@plt+0x2774>
   14e0c:	ldr	r0, [r5, #40]	; 0x28
   14e10:	mov	r2, #0
   14e14:	ldr	r1, [sp]
   14e18:	bl	122f0 <fnmatch@plt>
   14e1c:	rsbs	r5, r0, #1
   14e20:	ldr	r0, [sp]
   14e24:	movcc	r5, #0
   14e28:	bl	125f0 <freecon@plt>
   14e2c:	ldr	r2, [sp, #4]
   14e30:	mov	r0, r5
   14e34:	ldr	r3, [r4]
   14e38:	cmp	r2, r3
   14e3c:	bne	14e90 <__assert_fail@plt+0x27bc>
   14e40:	add	sp, sp, #8
   14e44:	pop	{r4, r5, r6, r7, r8, pc}
   14e48:	bl	12434 <__errno_location@plt>
   14e4c:	mov	r5, #0
   14e50:	mov	r2, #5
   14e54:	movw	r1, #62800	; 0xf550
   14e58:	movt	r1, #2
   14e5c:	ldr	r7, [r0]
   14e60:	mov	r0, r5
   14e64:	bl	1217c <dcgettext@plt>
   14e68:	mov	r1, r6
   14e6c:	mov	r8, r0
   14e70:	mov	r0, r5
   14e74:	bl	190b8 <__assert_fail@plt+0x69e4>
   14e78:	mov	r1, r7
   14e7c:	mov	r2, r8
   14e80:	mov	r3, r0
   14e84:	mov	r0, r5
   14e88:	bl	122cc <error@plt>
   14e8c:	b	14e2c <__assert_fail@plt+0x2758>
   14e90:	bl	12188 <__stack_chk_fail@plt>
   14e94:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e98:	movw	r9, #26008	; 0x6598
   14e9c:	movt	r9, #4
   14ea0:	subs	r5, r1, #0
   14ea4:	sub	sp, sp, #268	; 0x10c
   14ea8:	mov	r7, r0
   14eac:	ldr	r3, [r9]
   14eb0:	addne	r4, sp, #4
   14eb4:	movne	r8, #0
   14eb8:	mvnne	r6, r4
   14ebc:	str	r3, [sp, #260]	; 0x104
   14ec0:	beq	14f48 <__assert_fail@plt+0x2874>
   14ec4:	ldr	r1, [r5, #4]
   14ec8:	cmp	r1, #0
   14ecc:	beq	14f78 <__assert_fail@plt+0x28a4>
   14ed0:	mov	r2, #256	; 0x100
   14ed4:	mov	r0, r4
   14ed8:	bl	1226c <__stpcpy_chk@plt>
   14edc:	add	r3, sp, #264	; 0x108
   14ee0:	adds	r0, r0, r6
   14ee4:	add	r2, r3, r0
   14ee8:	bmi	14f20 <__assert_fail@plt+0x284c>
   14eec:	ldrb	r1, [r2, #-260]	; 0xfffffefc
   14ef0:	cmp	r1, #32
   14ef4:	cmpne	r1, #9
   14ef8:	beq	14f10 <__assert_fail@plt+0x283c>
   14efc:	b	14f20 <__assert_fail@plt+0x284c>
   14f00:	ldrb	r2, [r4, r0]
   14f04:	cmp	r2, #32
   14f08:	cmpne	r2, #9
   14f0c:	bne	14f6c <__assert_fail@plt+0x2898>
   14f10:	subs	r0, r0, #1
   14f14:	bcs	14f00 <__assert_fail@plt+0x282c>
   14f18:	add	r2, sp, #260	; 0x104
   14f1c:	add	r2, r2, #3
   14f20:	mov	r3, r4
   14f24:	strb	r8, [r2, #-259]	; 0xfffffefd
   14f28:	movw	r2, #62824	; 0xf568
   14f2c:	mov	r0, r7
   14f30:	movt	r2, #2
   14f34:	mov	r1, #1
   14f38:	bl	124d0 <__fprintf_chk@plt>
   14f3c:	ldr	r5, [r5, #152]	; 0x98
   14f40:	cmp	r5, #0
   14f44:	bne	14ec4 <__assert_fail@plt+0x27f0>
   14f48:	mov	r1, r7
   14f4c:	mov	r0, #10
   14f50:	bl	12584 <fputc@plt>
   14f54:	ldr	r2, [sp, #260]	; 0x104
   14f58:	ldr	r3, [r9]
   14f5c:	cmp	r2, r3
   14f60:	bne	14f80 <__assert_fail@plt+0x28ac>
   14f64:	add	sp, sp, #268	; 0x10c
   14f68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f6c:	add	r3, sp, #264	; 0x108
   14f70:	add	r2, r3, r0
   14f74:	b	14f20 <__assert_fail@plt+0x284c>
   14f78:	mov	r3, r1
   14f7c:	b	14f28 <__assert_fail@plt+0x2854>
   14f80:	bl	12188 <__stack_chk_fail@plt>
   14f84:	push	{r4, r5, r6, lr}
   14f88:	subs	r4, r1, #0
   14f8c:	sub	sp, sp, #8
   14f90:	mov	r5, r0
   14f94:	beq	150b0 <__assert_fail@plt+0x29dc>
   14f98:	ldr	r1, [r4, #156]	; 0x9c
   14f9c:	bl	150d4 <__assert_fail@plt+0x2a00>
   14fa0:	ldrb	r6, [r4, #19]
   14fa4:	ldrb	lr, [r4, #20]
   14fa8:	movw	r2, #15168	; 0x3b40
   14fac:	cmp	r6, #0
   14fb0:	movt	r2, #3
   14fb4:	ldrb	ip, [r4, #18]
   14fb8:	movw	r0, #62848	; 0xf580
   14fbc:	movt	r0, #2
   14fc0:	moveq	r0, r2
   14fc4:	cmp	lr, #0
   14fc8:	movw	r1, #62864	; 0xf590
   14fcc:	movt	r1, #2
   14fd0:	str	r0, [sp]
   14fd4:	moveq	r1, r2
   14fd8:	cmp	ip, #0
   14fdc:	str	r1, [sp, #4]
   14fe0:	movw	r3, #62832	; 0xf570
   14fe4:	mov	r1, #1
   14fe8:	movt	r3, #2
   14fec:	mov	r0, r5
   14ff0:	moveq	r3, r2
   14ff4:	movw	r2, #62880	; 0xf5a0
   14ff8:	movt	r2, #2
   14ffc:	bl	124d0 <__fprintf_chk@plt>
   15000:	mov	r0, r5
   15004:	mov	r1, r4
   15008:	bl	1637c <__assert_fail@plt+0x3ca8>
   1500c:	vldr	s14, [r4, #28]
   15010:	vcvt.f64.f32	d7, s14
   15014:	movw	r2, #62888	; 0xf5a8
   15018:	mov	r0, r5
   1501c:	movt	r2, #2
   15020:	mov	r1, #1
   15024:	vstr	d7, [sp]
   15028:	bl	124d0 <__fprintf_chk@plt>
   1502c:	movw	r3, #29372	; 0x72bc
   15030:	movt	r3, #4
   15034:	ldr	r3, [r3, #44]	; 0x2c
   15038:	tst	r3, #64	; 0x40
   1503c:	bne	15054 <__assert_fail@plt+0x2980>
   15040:	mov	r0, r5
   15044:	ldr	r1, [r4, #160]	; 0xa0
   15048:	add	sp, sp, #8
   1504c:	pop	{r4, r5, r6, lr}
   15050:	b	150d4 <__assert_fail@plt+0x2a00>
   15054:	ldr	ip, [r4, #164]	; 0xa4
   15058:	movw	r2, #62896	; 0xf5b0
   1505c:	ldr	r3, [r4, #168]	; 0xa8
   15060:	movt	r2, #2
   15064:	mov	r0, r5
   15068:	mov	r1, #1
   1506c:	str	ip, [sp]
   15070:	bl	124d0 <__fprintf_chk@plt>
   15074:	ldr	r3, [r4, #164]	; 0xa4
   15078:	cmp	r3, #0
   1507c:	beq	150b8 <__assert_fail@plt+0x29e4>
   15080:	vmov	s11, r3
   15084:	movw	r2, #62908	; 0xf5bc
   15088:	mov	r0, r5
   1508c:	movt	r2, #2
   15090:	vcvt.f64.u32	d7, s11
   15094:	vldr	s11, [r4, #168]	; 0xa8
   15098:	mov	r1, #1
   1509c:	vcvt.f64.u32	d6, s11
   150a0:	vdiv.f64	d7, d6, d7
   150a4:	vstr	d7, [sp]
   150a8:	bl	124d0 <__fprintf_chk@plt>
   150ac:	b	15040 <__assert_fail@plt+0x296c>
   150b0:	add	sp, sp, #8
   150b4:	pop	{r4, r5, r6, pc}
   150b8:	movw	r0, #62916	; 0xf5c4
   150bc:	mov	r1, #1
   150c0:	mov	r2, #4
   150c4:	mov	r3, r5
   150c8:	movt	r0, #2
   150cc:	bl	12248 <fwrite@plt>
   150d0:	b	15040 <__assert_fail@plt+0x296c>
   150d4:	push	{r4, r5, r6, lr}
   150d8:	subs	r4, r1, #0
   150dc:	mov	r5, r0
   150e0:	popeq	{r4, r5, r6, pc}
   150e4:	movw	r1, #15764	; 0x3d94
   150e8:	movw	ip, #15700	; 0x3d54
   150ec:	movt	r1, #1
   150f0:	movt	ip, #1
   150f4:	b	15104 <__assert_fail@plt+0x2a30>
   150f8:	ldr	r4, [r4, #160]	; 0xa0
   150fc:	cmp	r4, #0
   15100:	beq	15164 <__assert_fail@plt+0x2a90>
   15104:	ldr	r2, [r4]
   15108:	cmp	r2, r1
   1510c:	beq	15118 <__assert_fail@plt+0x2a44>
   15110:	cmp	r2, ip
   15114:	bne	15168 <__assert_fail@plt+0x2a94>
   15118:	ldr	r2, [r4, #156]	; 0x9c
   1511c:	cmp	r2, #0
   15120:	beq	150f8 <__assert_fail@plt+0x2a24>
   15124:	mov	r3, r5
   15128:	mov	r2, #3
   1512c:	mov	r1, #1
   15130:	movw	r0, #62924	; 0xf5cc
   15134:	movt	r0, #2
   15138:	bl	12248 <fwrite@plt>
   1513c:	mov	r0, r5
   15140:	mov	r1, r4
   15144:	bl	14f84 <__assert_fail@plt+0x28b0>
   15148:	mov	r3, r5
   1514c:	movw	r0, #62928	; 0xf5d0
   15150:	mov	r1, #1
   15154:	movt	r0, #2
   15158:	mov	r2, #3
   1515c:	pop	{r4, r5, r6, lr}
   15160:	b	12248 <fwrite@plt>
   15164:	pop	{r4, r5, r6, pc}
   15168:	ldr	r3, [r4, #156]	; 0x9c
   1516c:	cmp	r3, #0
   15170:	bne	15124 <__assert_fail@plt+0x2a50>
   15174:	ldr	r3, [r4, #160]	; 0xa0
   15178:	cmp	r3, #0
   1517c:	bne	15124 <__assert_fail@plt+0x2a50>
   15180:	mov	r0, r5
   15184:	mov	r1, r4
   15188:	pop	{r4, r5, r6, lr}
   1518c:	b	14f84 <__assert_fail@plt+0x28b0>
   15190:	push	{r3, r4, r5, lr}
   15194:	movw	r3, #29372	; 0x72bc
   15198:	movt	r3, #4
   1519c:	mov	r5, r0
   151a0:	ldr	r3, [r3, #44]	; 0x2c
   151a4:	tst	r3, #64	; 0x40
   151a8:	popeq	{r3, r4, r5, pc}
   151ac:	movw	r4, #26016	; 0x65a0
   151b0:	movt	r4, #4
   151b4:	mov	r1, #1
   151b8:	mov	r2, #42	; 0x2a
   151bc:	ldr	r3, [r4]
   151c0:	movw	r0, #62932	; 0xf5d4
   151c4:	movt	r0, #2
   151c8:	bl	12248 <fwrite@plt>
   151cc:	mov	r1, r5
   151d0:	ldr	r0, [r4]
   151d4:	bl	14f84 <__assert_fail@plt+0x28b0>
   151d8:	ldr	r1, [r4]
   151dc:	mov	r0, #10
   151e0:	pop	{r3, r4, r5, lr}
   151e4:	b	12584 <fputc@plt>
   151e8:	cmp	r0, #0
   151ec:	push	{r3, r4, r5, lr}
   151f0:	popeq	{r3, r4, r5, pc}
   151f4:	ldr	r2, [r0]
   151f8:	cmp	r2, #0
   151fc:	beq	1532c <__assert_fail@plt+0x2c58>
   15200:	ldr	r3, [r0, #172]	; 0xac
   15204:	cmp	r3, #0
   15208:	beq	15310 <__assert_fail@plt+0x2c3c>
   1520c:	movw	r4, #15588	; 0x3ce4
   15210:	movw	r5, #15564	; 0x3ccc
   15214:	movt	r4, #1
   15218:	movt	r5, #1
   1521c:	mov	ip, #1
   15220:	b	15280 <__assert_fail@plt+0x2bac>
   15224:	tst	r1, #5
   15228:	bne	152e0 <__assert_fail@plt+0x2c0c>
   1522c:	tst	r1, #64	; 0x40
   15230:	beq	1525c <__assert_fail@plt+0x2b88>
   15234:	ldrb	r3, [r0, #16]
   15238:	cmp	r3, #0
   1523c:	beq	15380 <__assert_fail@plt+0x2cac>
   15240:	cmp	r2, r4
   15244:	beq	1525c <__assert_fail@plt+0x2b88>
   15248:	cmp	r2, r5
   1524c:	beq	1525c <__assert_fail@plt+0x2b88>
   15250:	ldrb	r3, [r0, #17]
   15254:	cmp	r3, #0
   15258:	beq	1539c <__assert_fail@plt+0x2cc8>
   1525c:	ldr	r0, [r0, #152]	; 0x98
   15260:	cmp	r0, #0
   15264:	beq	1530c <__assert_fail@plt+0x2c38>
   15268:	ldr	r2, [r0]
   1526c:	cmp	r2, #0
   15270:	beq	1532c <__assert_fail@plt+0x2c58>
   15274:	ldr	r3, [r0, #172]	; 0xac
   15278:	cmp	r3, #0
   1527c:	beq	15310 <__assert_fail@plt+0x2c3c>
   15280:	ldr	r1, [r3, #12]
   15284:	cmp	r1, #0
   15288:	beq	15294 <__assert_fail@plt+0x2bc0>
   1528c:	cmp	r2, r1
   15290:	bne	15348 <__assert_fail@plt+0x2c74>
   15294:	ldr	r3, [r3]
   15298:	cmp	r3, #6
   1529c:	bhi	1525c <__assert_fail@plt+0x2b88>
   152a0:	lsl	r1, ip, r3
   152a4:	tst	r1, #58	; 0x3a
   152a8:	beq	15224 <__assert_fail@plt+0x2b50>
   152ac:	ldrb	r3, [r0, #17]
   152b0:	cmp	r3, #0
   152b4:	bne	15364 <__assert_fail@plt+0x2c90>
   152b8:	ldrb	r3, [r0, #16]
   152bc:	cmp	r3, #0
   152c0:	beq	1525c <__assert_fail@plt+0x2b88>
   152c4:	movw	r0, #63224	; 0xf6f8
   152c8:	movw	r1, #62552	; 0xf458
   152cc:	movt	r0, #2
   152d0:	movt	r1, #2
   152d4:	movw	r2, #1396	; 0x574
   152d8:	ldr	r3, [pc, #244]	; 153d4 <__assert_fail@plt+0x2d00>
   152dc:	bl	126d4 <__assert_fail@plt>
   152e0:	cmp	r3, #0
   152e4:	beq	153b8 <__assert_fail@plt+0x2ce4>
   152e8:	cmp	r3, #2
   152ec:	bne	1525c <__assert_fail@plt+0x2b88>
   152f0:	movw	r0, #63116	; 0xf68c
   152f4:	movw	r1, #62552	; 0xf458
   152f8:	movt	r0, #2
   152fc:	movt	r1, #2
   15300:	movw	r2, #1371	; 0x55b
   15304:	ldr	r3, [pc, #200]	; 153d4 <__assert_fail@plt+0x2d00>
   15308:	bl	126d4 <__assert_fail@plt>
   1530c:	pop	{r3, r4, r5, pc}
   15310:	movw	r0, #63004	; 0xf61c
   15314:	movw	r1, #62552	; 0xf458
   15318:	movt	r0, #2
   1531c:	movt	r1, #2
   15320:	movw	r2, #1345	; 0x541
   15324:	ldr	r3, [pc, #168]	; 153d4 <__assert_fail@plt+0x2d00>
   15328:	bl	126d4 <__assert_fail@plt>
   1532c:	movw	r0, #62976	; 0xf600
   15330:	movw	r1, #62552	; 0xf458
   15334:	movt	r0, #2
   15338:	movt	r1, #2
   1533c:	movw	r2, #1342	; 0x53e
   15340:	ldr	r3, [pc, #140]	; 153d4 <__assert_fail@plt+0x2d00>
   15344:	bl	126d4 <__assert_fail@plt>
   15348:	movw	r0, #63036	; 0xf63c
   1534c:	movw	r1, #62552	; 0xf458
   15350:	movt	r0, #2
   15354:	movt	r1, #2
   15358:	movw	r2, #1354	; 0x54a
   1535c:	ldr	r3, [pc, #112]	; 153d4 <__assert_fail@plt+0x2d00>
   15360:	bl	126d4 <__assert_fail@plt>
   15364:	movw	r0, #63200	; 0xf6e0
   15368:	movw	r1, #62552	; 0xf458
   1536c:	movt	r0, #2
   15370:	movt	r1, #2
   15374:	movw	r2, #1395	; 0x573
   15378:	ldr	r3, [pc, #84]	; 153d4 <__assert_fail@plt+0x2d00>
   1537c:	bl	126d4 <__assert_fail@plt>
   15380:	movw	r0, #63164	; 0xf6bc
   15384:	movw	r1, #62552	; 0xf458
   15388:	movt	r0, #2
   1538c:	movt	r1, #2
   15390:	movw	r2, #1375	; 0x55f
   15394:	ldr	r3, [pc, #56]	; 153d4 <__assert_fail@plt+0x2d00>
   15398:	bl	126d4 <__assert_fail@plt>
   1539c:	movw	r0, #63180	; 0xf6cc
   153a0:	movw	r1, #62552	; 0xf458
   153a4:	movt	r0, #2
   153a8:	movt	r1, #2
   153ac:	movw	r2, #1381	; 0x565
   153b0:	ldr	r3, [pc, #28]	; 153d4 <__assert_fail@plt+0x2d00>
   153b4:	bl	126d4 <__assert_fail@plt>
   153b8:	movw	r0, #63080	; 0xf668
   153bc:	movw	r1, #62552	; 0xf458
   153c0:	movt	r0, #2
   153c4:	movt	r1, #2
   153c8:	movw	r2, #1370	; 0x55a
   153cc:	ldr	r3, [pc]	; 153d4 <__assert_fail@plt+0x2d00>
   153d0:	bl	126d4 <__assert_fail@plt>
   153d4:	andeq	pc, r2, r4, asr #8
   153d8:	push	{r4, r5, r6, r7, r8, lr}
   153dc:	mov	r6, r0
   153e0:	mov	r0, #8
   153e4:	mov	r7, r1
   153e8:	mov	r8, r2
   153ec:	bl	28e14 <__assert_fail@plt+0x16740>
   153f0:	mov	r5, #0
   153f4:	mov	r1, r8
   153f8:	mov	r2, r5
   153fc:	mov	r4, r0
   15400:	mov	r0, r7
   15404:	str	r4, [r6]
   15408:	str	r5, [r4, #4]
   1540c:	bl	123f8 <openat64@plt>
   15410:	ldr	r3, [r6]
   15414:	str	r0, [r4]
   15418:	ldr	r0, [r3]
   1541c:	cmp	r0, r5
   15420:	blt	15434 <__assert_fail@plt+0x2d60>
   15424:	mov	r1, #1
   15428:	bl	21060 <__assert_fail@plt+0xe98c>
   1542c:	mov	r0, #1
   15430:	pop	{r4, r5, r6, r7, r8, pc}
   15434:	mov	r0, r5
   15438:	pop	{r4, r5, r6, r7, r8, pc}
   1543c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15440:	mov	r5, r0
   15444:	sub	sp, sp, #44	; 0x2c
   15448:	ldr	r0, [r2]
   1544c:	mov	fp, r2
   15450:	bl	19088 <__assert_fail@plt+0x69b4>
   15454:	cmp	r0, #0
   15458:	str	r0, [sp, #32]
   1545c:	bne	15600 <__assert_fail@plt+0x2f2c>
   15460:	movw	r3, #26044	; 0x65bc
   15464:	movt	r3, #4
   15468:	ldr	r2, [fp, #144]	; 0x90
   1546c:	ldr	r3, [r3]
   15470:	cmp	r2, r3
   15474:	bne	1570c <__assert_fail@plt+0x3038>
   15478:	ldr	ip, [sp, #32]
   1547c:	mov	r6, ip
   15480:	str	ip, [sp, #28]
   15484:	str	ip, [sp, #36]	; 0x24
   15488:	ldrb	r4, [fp, #40]	; 0x28
   1548c:	cmp	r4, #0
   15490:	bne	15558 <__assert_fail@plt+0x2e84>
   15494:	ldr	r3, [fp, #136]	; 0x88
   15498:	add	r8, fp, #44	; 0x2c
   1549c:	add	r7, fp, #88	; 0x58
   154a0:	cmp	r3, #0
   154a4:	ble	15504 <__assert_fail@plt+0x2e30>
   154a8:	ldr	r3, [fp, #132]	; 0x84
   154ac:	ldr	r9, [r3, r4, lsl #2]
   154b0:	add	r4, r4, #1
   154b4:	mov	r0, r9
   154b8:	bl	123d4 <strlen@plt>
   154bc:	mov	sl, r0
   154c0:	mov	r0, r5
   154c4:	bl	123d4 <strlen@plt>
   154c8:	ldr	ip, [sp, #28]
   154cc:	mov	r3, sl
   154d0:	mov	r2, r9
   154d4:	str	r6, [sp]
   154d8:	mov	r1, r7
   154dc:	str	ip, [sp, #4]
   154e0:	mov	ip, #0
   154e4:	str	r5, [sp, #8]
   154e8:	str	ip, [sp, #16]
   154ec:	str	r0, [sp, #12]
   154f0:	mov	r0, r8
   154f4:	bl	1f94c <__assert_fail@plt+0xd278>
   154f8:	ldr	r3, [fp, #136]	; 0x88
   154fc:	cmp	r3, r4
   15500:	bgt	154a8 <__assert_fail@plt+0x2dd4>
   15504:	mov	r0, r8
   15508:	mov	r1, r7
   1550c:	bl	1faf0 <__assert_fail@plt+0xd41c>
   15510:	ldr	r4, [fp, #148]	; 0x94
   15514:	tst	r4, #127	; 0x7f
   15518:	movne	r4, #0
   1551c:	beq	155d0 <__assert_fail@plt+0x2efc>
   15520:	ldr	ip, [sp, #32]
   15524:	cmp	ip, #0
   15528:	bne	155e8 <__assert_fail@plt+0x2f14>
   1552c:	ldr	ip, [sp, #36]	; 0x24
   15530:	cmp	ip, #0
   15534:	beq	155c4 <__assert_fail@plt+0x2ef0>
   15538:	movw	r0, #63384	; 0xf798
   1553c:	movw	r1, #63376	; 0xf790
   15540:	movw	r3, #63244	; 0xf70c
   15544:	movt	r0, #2
   15548:	movt	r1, #2
   1554c:	mov	r2, #221	; 0xdd
   15550:	movt	r3, #2
   15554:	bl	126d4 <__assert_fail@plt>
   15558:	mov	r0, r5
   1555c:	bl	123d4 <strlen@plt>
   15560:	ldr	ip, [sp, #28]
   15564:	mov	r3, #0
   15568:	str	r6, [sp]
   1556c:	str	r3, [sp, #8]
   15570:	mov	r2, r5
   15574:	str	ip, [sp, #4]
   15578:	add	r1, fp, #88	; 0x58
   1557c:	add	r3, r0, #1
   15580:	add	r0, fp, #44	; 0x2c
   15584:	bl	1f6bc <__assert_fail@plt+0xcfe8>
   15588:	ldr	r3, [fp, #116]	; 0x74
   1558c:	cmp	r3, #0
   15590:	movwne	r3, #29328	; 0x7290
   15594:	movtne	r3, #4
   15598:	movne	r2, #1
   1559c:	strbne	r2, [r3, #32]
   155a0:	ldr	ip, [sp, #36]	; 0x24
   155a4:	cmp	ip, #0
   155a8:	beq	156cc <__assert_fail@plt+0x2ff8>
   155ac:	ldr	ip, [sp, #32]
   155b0:	cmp	ip, #0
   155b4:	movne	r4, #1
   155b8:	beq	15538 <__assert_fail@plt+0x2e64>
   155bc:	ldr	r0, [sp, #36]	; 0x24
   155c0:	bl	120c8 <free@plt>
   155c4:	mov	r0, r4
   155c8:	add	sp, sp, #44	; 0x2c
   155cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155d0:	ubfx	r4, r4, #8, #8
   155d4:	ldr	ip, [sp, #32]
   155d8:	rsbs	r4, r4, #1
   155dc:	movcc	r4, #0
   155e0:	cmp	ip, #0
   155e4:	beq	1552c <__assert_fail@plt+0x2e58>
   155e8:	ldr	r0, [fp, #144]	; 0x90
   155ec:	bl	2886c <__assert_fail@plt+0x16198>
   155f0:	ldr	ip, [sp, #36]	; 0x24
   155f4:	cmp	ip, #0
   155f8:	bne	155bc <__assert_fail@plt+0x2ee8>
   155fc:	b	155c4 <__assert_fail@plt+0x2ef0>
   15600:	ldr	r3, [fp, #116]	; 0x74
   15604:	movw	r4, #29328	; 0x7290
   15608:	movt	r4, #4
   1560c:	cmp	r3, #0
   15610:	bne	1569c <__assert_fail@plt+0x2fc8>
   15614:	ldr	r6, [r4, #12]
   15618:	mov	r1, #47	; 0x2f
   1561c:	mov	r0, r6
   15620:	bl	123e0 <strchr@plt>
   15624:	cmp	r0, #0
   15628:	beq	156f0 <__assert_fail@plt+0x301c>
   1562c:	mov	r0, r6
   15630:	bl	21314 <__assert_fail@plt+0xec40>
   15634:	ldr	r1, [r4, #16]
   15638:	mov	r7, r0
   1563c:	mov	r2, r0
   15640:	add	r0, fp, #144	; 0x90
   15644:	bl	153d8 <__assert_fail@plt+0x2d04>
   15648:	mov	r6, r0
   1564c:	mov	r0, r7
   15650:	bl	120c8 <free@plt>
   15654:	cmp	r6, #0
   15658:	bne	1569c <__assert_fail@plt+0x2fc8>
   1565c:	bl	12434 <__errno_location@plt>
   15660:	mov	r2, #5
   15664:	movw	r1, #63272	; 0xf728
   15668:	movt	r1, #2
   1566c:	ldr	r7, [r0]
   15670:	mov	r0, r6
   15674:	bl	1217c <dcgettext@plt>
   15678:	mov	r1, r5
   1567c:	mov	r8, r0
   15680:	mov	r0, r6
   15684:	bl	190b8 <__assert_fail@plt+0x69e4>
   15688:	mov	r1, r7
   1568c:	mov	r2, r8
   15690:	mov	r3, r0
   15694:	mov	r0, #1
   15698:	bl	122cc <error@plt>
   1569c:	ldr	r0, [r4, #12]
   156a0:	bl	2125c <__assert_fail@plt+0xeb88>
   156a4:	ldrb	r3, [r0]
   156a8:	str	r0, [sp, #36]	; 0x24
   156ac:	cmp	r3, #47	; 0x2f
   156b0:	beq	156dc <__assert_fail@plt+0x3008>
   156b4:	movw	r6, #63268	; 0xf724
   156b8:	mov	ip, #2
   156bc:	mov	r5, r0
   156c0:	movt	r6, #2
   156c4:	str	ip, [sp, #28]
   156c8:	b	15488 <__assert_fail@plt+0x2db4>
   156cc:	mov	r4, #1
   156d0:	mov	r0, r4
   156d4:	add	sp, sp, #44	; 0x2c
   156d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156dc:	mov	ip, #0
   156e0:	ldr	r5, [sp, #36]	; 0x24
   156e4:	str	ip, [sp, #28]
   156e8:	mov	r6, ip
   156ec:	b	15488 <__assert_fail@plt+0x2db4>
   156f0:	movw	r2, #7340	; 0x1cac
   156f4:	add	r0, fp, #144	; 0x90
   156f8:	movt	r2, #3
   156fc:	ldr	r1, [r4, #16]
   15700:	bl	153d8 <__assert_fail@plt+0x2d04>
   15704:	mov	r6, r0
   15708:	b	15654 <__assert_fail@plt+0x2f80>
   1570c:	movw	r0, #63340	; 0xf76c
   15710:	movw	r1, #63376	; 0xf790
   15714:	movw	r3, #63244	; 0xf70c
   15718:	movt	r0, #2
   1571c:	movt	r1, #2
   15720:	mov	r2, #161	; 0xa1
   15724:	movt	r3, #2
   15728:	bl	126d4 <__assert_fail@plt>
   1572c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15730:	movw	r7, #26008	; 0x6598
   15734:	movt	r7, #4
   15738:	movw	r2, #26024	; 0x65a8
   1573c:	movt	r2, #4
   15740:	sub	sp, sp, #28
   15744:	ldr	ip, [r7]
   15748:	mov	r9, r3
   1574c:	ldr	r0, [r2]
   15750:	mov	r8, r1
   15754:	str	ip, [sp, #20]
   15758:	bl	2a1c0 <__assert_fail@plt+0x17aec>
   1575c:	movw	r2, #26016	; 0x65a0
   15760:	movt	r2, #4
   15764:	ldr	r0, [r2]
   15768:	bl	2a1c0 <__assert_fail@plt+0x17aec>
   1576c:	movw	r2, #25200	; 0x6270
   15770:	movt	r2, #4
   15774:	ldr	r3, [r2]
   15778:	cmp	r3, #0
   1577c:	bne	158d8 <__assert_fail@plt+0x3204>
   15780:	bl	12554 <fork@plt>
   15784:	cmn	r0, #1
   15788:	mov	r5, r0
   1578c:	beq	157f0 <__assert_fail@plt+0x311c>
   15790:	cmp	r0, #0
   15794:	bne	1581c <__assert_fail@plt+0x3148>
   15798:	ldr	r4, [r8, #104]	; 0x68
   1579c:	cmp	r4, #0
   157a0:	beq	15aa4 <__assert_fail@plt+0x33d0>
   157a4:	ldrb	r3, [r8, #100]	; 0x64
   157a8:	cmp	r3, #0
   157ac:	bne	15954 <__assert_fail@plt+0x3280>
   157b0:	mov	r0, r4
   157b4:	bl	28850 <__assert_fail@plt+0x1617c>
   157b8:	cmp	r0, #0
   157bc:	beq	159ac <__assert_fail@plt+0x32d8>
   157c0:	bl	12434 <__errno_location@plt>
   157c4:	mov	r2, #5
   157c8:	movw	r1, #63468	; 0xf7ec
   157cc:	movt	r1, #2
   157d0:	ldr	r4, [r0]
   157d4:	mov	r0, #0
   157d8:	bl	1217c <dcgettext@plt>
   157dc:	mov	r1, r4
   157e0:	mov	r2, r0
   157e4:	mov	r0, #0
   157e8:	bl	122cc <error@plt>
   157ec:	b	159fc <__assert_fail@plt+0x3328>
   157f0:	bl	12434 <__errno_location@plt>
   157f4:	mov	r2, #5
   157f8:	movw	r1, #63392	; 0xf7a0
   157fc:	movt	r1, #2
   15800:	ldr	r4, [r0]
   15804:	mov	r0, #0
   15808:	bl	1217c <dcgettext@plt>
   1580c:	mov	r1, r4
   15810:	mov	r2, r0
   15814:	mov	r0, #1
   15818:	bl	122cc <error@plt>
   1581c:	add	r6, r8, #108	; 0x6c
   15820:	b	15834 <__assert_fail@plt+0x3160>
   15824:	bl	12434 <__errno_location@plt>
   15828:	ldr	r4, [r0]
   1582c:	cmp	r4, #4
   15830:	bne	158f0 <__assert_fail@plt+0x321c>
   15834:	mov	r0, r5
   15838:	mov	r1, r6
   1583c:	mov	r2, #0
   15840:	bl	12278 <waitpid@plt>
   15844:	cmn	r0, #1
   15848:	beq	15824 <__assert_fail@plt+0x3150>
   1584c:	ldr	r3, [r8, #108]	; 0x6c
   15850:	and	r2, r3, #127	; 0x7f
   15854:	add	r2, r2, #1
   15858:	sbfx	r2, r2, #1, #7
   1585c:	cmp	r2, #0
   15860:	ble	15a04 <__assert_fail@plt+0x3330>
   15864:	mov	r2, #5
   15868:	movw	r1, #63520	; 0xf820
   1586c:	mov	r0, #0
   15870:	movt	r1, #2
   15874:	bl	1217c <dcgettext@plt>
   15878:	movw	r3, #29372	; 0x72bc
   1587c:	movt	r3, #4
   15880:	ldr	r2, [r9]
   15884:	ldr	r1, [r3, #72]	; 0x48
   15888:	mov	r4, r0
   1588c:	mov	r0, #0
   15890:	bl	284fc <__assert_fail@plt+0x15e28>
   15894:	ldr	ip, [r8, #108]	; 0x6c
   15898:	mov	r2, r4
   1589c:	and	ip, ip, #127	; 0x7f
   158a0:	str	ip, [sp]
   158a4:	mov	r3, r0
   158a8:	mov	r0, #0
   158ac:	mov	r1, r0
   158b0:	bl	122cc <error@plt>
   158b4:	ldrb	r3, [r8]
   158b8:	cmp	r3, #0
   158bc:	beq	15a10 <__assert_fail@plt+0x333c>
   158c0:	movw	r3, #29328	; 0x7290
   158c4:	movt	r3, #4
   158c8:	mov	r2, #1
   158cc:	mov	r0, r2
   158d0:	str	r2, [r3, #28]
   158d4:	b	1593c <__assert_fail@plt+0x3268>
   158d8:	mov	r3, #0
   158dc:	mov	r0, #17
   158e0:	mov	r1, r3
   158e4:	str	r3, [r2]
   158e8:	bl	12134 <signal@plt>
   158ec:	b	15780 <__assert_fail@plt+0x30ac>
   158f0:	mov	r2, #5
   158f4:	movw	r1, #63496	; 0xf808
   158f8:	mov	r0, #0
   158fc:	movt	r1, #2
   15900:	bl	1217c <dcgettext@plt>
   15904:	ldr	r1, [r9]
   15908:	mov	r5, r0
   1590c:	mov	r0, #0
   15910:	bl	190b8 <__assert_fail@plt+0x69e4>
   15914:	mov	r2, r5
   15918:	mov	r1, r4
   1591c:	mov	r3, r0
   15920:	mov	r0, #0
   15924:	bl	122cc <error@plt>
   15928:	movw	r3, #29328	; 0x7290
   1592c:	movt	r3, #4
   15930:	mov	r0, #0
   15934:	mov	r2, #1
   15938:	str	r2, [r3, #28]
   1593c:	ldr	r2, [sp, #20]
   15940:	ldr	r3, [r7]
   15944:	cmp	r2, r3
   15948:	bne	15aa0 <__assert_fail@plt+0x33cc>
   1594c:	add	sp, sp, #28
   15950:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15954:	movw	r3, #63548	; 0xf83c
   15958:	movt	r3, #2
   1595c:	ldm	r3, {r0, r1, r2}
   15960:	add	r3, sp, #8
   15964:	stmia	r3!, {r0, r1}
   15968:	mov	r0, r5
   1596c:	strh	r2, [r3]
   15970:	bl	12680 <close@plt>
   15974:	cmp	r0, #0
   15978:	blt	15a38 <__assert_fail@plt+0x3364>
   1597c:	add	r0, sp, #8
   15980:	mov	r1, #131072	; 0x20000
   15984:	bl	122fc <open64@plt>
   15988:	cmp	r0, #0
   1598c:	movge	r6, #1
   15990:	blt	15a6c <__assert_fail@plt+0x3398>
   15994:	mov	r0, r4
   15998:	bl	28850 <__assert_fail@plt+0x1617c>
   1599c:	cmp	r0, #0
   159a0:	bne	157c0 <__assert_fail@plt+0x30ec>
   159a4:	cmp	r6, #0
   159a8:	beq	159fc <__assert_fail@plt+0x3328>
   159ac:	bl	184a8 <__assert_fail@plt+0x5dd4>
   159b0:	cmp	r0, #0
   159b4:	bne	15a30 <__assert_fail@plt+0x335c>
   159b8:	mov	r0, r9
   159bc:	bl	1ffb4 <__assert_fail@plt+0xd8e0>
   159c0:	cmp	r0, #0
   159c4:	beq	15a18 <__assert_fail@plt+0x3344>
   159c8:	bl	12434 <__errno_location@plt>
   159cc:	mov	r3, #7
   159d0:	mov	r4, r3
   159d4:	str	r3, [r0]
   159d8:	ldr	r1, [r9]
   159dc:	mov	r0, #0
   159e0:	bl	190b8 <__assert_fail@plt+0x69e4>
   159e4:	movw	r2, #15064	; 0x3ad8
   159e8:	mov	r1, r4
   159ec:	movt	r2, #3
   159f0:	mov	r3, r0
   159f4:	mov	r0, #0
   159f8:	bl	122cc <error@plt>
   159fc:	mov	r0, #1
   15a00:	bl	120f8 <_exit@plt>
   15a04:	ubfx	r3, r3, #8, #8
   15a08:	cmp	r3, #0
   15a0c:	bne	158b4 <__assert_fail@plt+0x31e0>
   15a10:	mov	r0, #1
   15a14:	b	1593c <__assert_fail@plt+0x3268>
   15a18:	mov	r1, r9
   15a1c:	ldr	r0, [r9]
   15a20:	bl	12110 <execvp@plt>
   15a24:	bl	12434 <__errno_location@plt>
   15a28:	ldr	r4, [r0]
   15a2c:	b	159d8 <__assert_fail@plt+0x3304>
   15a30:	bl	209dc <__assert_fail@plt+0xe308>
   15a34:	b	159b8 <__assert_fail@plt+0x32e4>
   15a38:	bl	12434 <__errno_location@plt>
   15a3c:	mov	r2, #5
   15a40:	movw	r1, #63440	; 0xf7d0
   15a44:	movt	r1, #2
   15a48:	mov	r6, r5
   15a4c:	ldr	r7, [r0]
   15a50:	mov	r0, r5
   15a54:	bl	1217c <dcgettext@plt>
   15a58:	mov	r1, r7
   15a5c:	mov	r2, r0
   15a60:	mov	r0, r5
   15a64:	bl	122cc <error@plt>
   15a68:	b	15994 <__assert_fail@plt+0x32c0>
   15a6c:	bl	12434 <__errno_location@plt>
   15a70:	add	r1, sp, #8
   15a74:	mov	r6, #1
   15a78:	ldr	r7, [r0]
   15a7c:	mov	r0, r5
   15a80:	bl	190b8 <__assert_fail@plt+0x69e4>
   15a84:	movw	r2, #15064	; 0x3ad8
   15a88:	movt	r2, #3
   15a8c:	mov	r1, r7
   15a90:	mov	r3, r0
   15a94:	mov	r0, r5
   15a98:	bl	122cc <error@plt>
   15a9c:	b	15994 <__assert_fail@plt+0x32c0>
   15aa0:	bl	12188 <__stack_chk_fail@plt>
   15aa4:	movw	r0, #63404	; 0xf7ac
   15aa8:	movw	r1, #63376	; 0xf790
   15aac:	movt	r0, #2
   15ab0:	movt	r1, #2
   15ab4:	mov	r2, #316	; 0x13c
   15ab8:	ldr	r3, [pc]	; 15ac0 <__assert_fail@plt+0x33ec>
   15abc:	bl	126d4 <__assert_fail@plt>
   15ac0:	andeq	pc, r2, ip, lsl r7	; <UNPREDICTABLE>
   15ac4:	push	{r4, lr}
   15ac8:	mov	r4, r0
   15acc:	cmp	r4, #0
   15ad0:	beq	15af8 <__assert_fail@plt+0x3424>
   15ad4:	ldrb	r0, [r4, #16]
   15ad8:	cmp	r0, #0
   15adc:	popne	{r4, pc}
   15ae0:	ldr	r0, [r4, #156]	; 0x9c
   15ae4:	bl	15ac4 <__assert_fail@plt+0x33f0>
   15ae8:	cmp	r0, #0
   15aec:	popne	{r4, pc}
   15af0:	ldr	r4, [r4, #160]	; 0xa0
   15af4:	b	15acc <__assert_fail@plt+0x33f8>
   15af8:	mov	r0, r4
   15afc:	pop	{r4, pc}
   15b00:	push	{r3, r4, r5, lr}
   15b04:	subs	r4, r0, #0
   15b08:	beq	15b38 <__assert_fail@plt+0x3464>
   15b0c:	ldr	r0, [r4, #156]	; 0x9c
   15b10:	bl	15b00 <__assert_fail@plt+0x342c>
   15b14:	mov	r5, r0
   15b18:	ldr	r0, [r4, #160]	; 0xa0
   15b1c:	bl	15b00 <__assert_fail@plt+0x342c>
   15b20:	ldr	r3, [r4, #24]
   15b24:	cmp	r5, r0
   15b28:	movcs	r0, r5
   15b2c:	cmp	r0, r3
   15b30:	movcc	r0, r3
   15b34:	pop	{r3, r4, r5, pc}
   15b38:	mov	r0, r4
   15b3c:	pop	{r3, r4, r5, pc}
   15b40:	push	{r4, lr}
   15b44:	movw	r4, #26008	; 0x6598
   15b48:	movt	r4, #4
   15b4c:	ldr	lr, [r0]
   15b50:	ldr	ip, [r1]
   15b54:	sub	sp, sp, #16
   15b58:	ldr	r3, [r4]
   15b5c:	mov	r2, #4
   15b60:	add	r1, sp, #8
   15b64:	add	r0, sp, r2
   15b68:	str	lr, [sp, #4]
   15b6c:	str	r3, [sp, #12]
   15b70:	str	ip, [sp, #8]
   15b74:	bl	12158 <memcmp@plt>
   15b78:	ldr	r2, [sp, #12]
   15b7c:	ldr	r3, [r4]
   15b80:	cmp	r2, r3
   15b84:	bne	15b90 <__assert_fail@plt+0x34bc>
   15b88:	add	sp, sp, #16
   15b8c:	pop	{r4, pc}
   15b90:	bl	12188 <__stack_chk_fail@plt>
   15b94:	push	{r4, r5, r6, lr}
   15b98:	mov	r5, r0
   15b9c:	mov	r0, #176	; 0xb0
   15ba0:	mov	r4, r1
   15ba4:	mov	r6, r2
   15ba8:	bl	28e14 <__assert_fail@plt+0x16740>
   15bac:	cmp	r4, #2
   15bb0:	mov	ip, #0
   15bb4:	mov	r2, #3
   15bb8:	mov	r3, r0
   15bbc:	str	r4, [r0, #12]
   15bc0:	str	r2, [r0, #8]
   15bc4:	strb	ip, [r0, #18]
   15bc8:	strb	ip, [r0, #19]
   15bcc:	strb	ip, [r0, #20]
   15bd0:	str	ip, [r0, #24]
   15bd4:	str	ip, [r0, #36]	; 0x24
   15bd8:	beq	15c68 <__assert_fail@plt+0x3594>
   15bdc:	cmp	r4, r2
   15be0:	beq	15c34 <__assert_fail@plt+0x3560>
   15be4:	cmp	r4, #1
   15be8:	beq	15c14 <__assert_fail@plt+0x3540>
   15bec:	mov	r1, #0
   15bf0:	str	r5, [r3, #160]	; 0xa0
   15bf4:	mov	r0, r3
   15bf8:	str	r3, [r6]
   15bfc:	strb	r1, [r3, #16]
   15c00:	strb	r1, [r3, #17]
   15c04:	str	r1, [r3, #40]	; 0x28
   15c08:	str	r1, [r3, #152]	; 0x98
   15c0c:	str	r1, [r3, #156]	; 0x9c
   15c10:	pop	{r4, r5, r6, pc}
   15c14:	mov	r0, #1065353216	; 0x3f800000
   15c18:	movw	r1, #16264	; 0x3f88
   15c1c:	movw	r2, #63792	; 0xf930
   15c20:	movt	r1, #1
   15c24:	movt	r2, #2
   15c28:	str	r0, [r3, #28]
   15c2c:	stm	r3, {r1, r2}
   15c30:	b	15bec <__assert_fail@plt+0x3518>
   15c34:	vmov.f32	s14, #112	; 0x3f800000  1.0
   15c38:	movw	r1, #15700	; 0x3d54
   15c3c:	movw	r2, #63800	; 0xf938
   15c40:	movt	r1, #1
   15c44:	movt	r2, #2
   15c48:	vldr	s15, [r5, #28]
   15c4c:	stm	r3, {r1, r2}
   15c50:	vcmpe.f32	s15, s14
   15c54:	vmrs	APSR_nzcv, fpscr
   15c58:	vmovgt.f32	s15, s14
   15c5c:	ble	15c84 <__assert_fail@plt+0x35b0>
   15c60:	vstr	s15, [r3, #28]
   15c64:	b	15bec <__assert_fail@plt+0x3518>
   15c68:	movw	r1, #15764	; 0x3d94
   15c6c:	movw	r2, #63796	; 0xf934
   15c70:	vmov.f32	s14, #112	; 0x3f800000  1.0
   15c74:	vldr	s15, [r5, #28]
   15c78:	movt	r1, #1
   15c7c:	movt	r2, #2
   15c80:	b	15c4c <__assert_fail@plt+0x3578>
   15c84:	vcmp.f32	s15, #0.0
   15c88:	vldr	s14, [pc, #8]	; 15c98 <__assert_fail@plt+0x35c4>
   15c8c:	vmrs	APSR_nzcv, fpscr
   15c90:	vmovmi.f32	s15, s14
   15c94:	b	15c60 <__assert_fail@plt+0x358c>
   15c98:	andeq	r0, r0, r0
   15c9c:	cmp	r1, #0
   15ca0:	push	{r4, lr}
   15ca4:	mov	r4, r0
   15ca8:	beq	15cb8 <__assert_fail@plt+0x35e4>
   15cac:	ldr	r3, [r0, #8]
   15cb0:	cmp	r3, #3
   15cb4:	bne	15d08 <__assert_fail@plt+0x3634>
   15cb8:	ldr	r0, [r4, #156]	; 0x9c
   15cbc:	cmp	r0, #0
   15cc0:	beq	15cd8 <__assert_fail@plt+0x3604>
   15cc4:	ldr	r3, [r0, #8]
   15cc8:	cmp	r3, #3
   15ccc:	bne	15ce8 <__assert_fail@plt+0x3614>
   15cd0:	mov	r1, #0
   15cd4:	bl	15c9c <__assert_fail@plt+0x35c8>
   15cd8:	ldr	r4, [r4, #160]	; 0xa0
   15cdc:	cmp	r4, #0
   15ce0:	bne	15cb8 <__assert_fail@plt+0x35e4>
   15ce4:	pop	{r4, pc}
   15ce8:	movw	r0, #63832	; 0xf958
   15cec:	movw	r1, #63824	; 0xf950
   15cf0:	movw	r3, #63560	; 0xf848
   15cf4:	movt	r0, #2
   15cf8:	movt	r1, #2
   15cfc:	movw	r2, #1243	; 0x4db
   15d00:	movt	r3, #2
   15d04:	bl	126d4 <__assert_fail@plt>
   15d08:	movw	r0, #63804	; 0xf93c
   15d0c:	movw	r1, #63824	; 0xf950
   15d10:	movw	r3, #63560	; 0xf848
   15d14:	movt	r0, #2
   15d18:	movt	r1, #2
   15d1c:	movw	r2, #1238	; 0x4d6
   15d20:	movt	r3, #2
   15d24:	bl	126d4 <__assert_fail@plt>
   15d28:	push	{r4, r5, r6, r7, r8, lr}
   15d2c:	mov	r5, r0
   15d30:	ldr	r6, [r0]
   15d34:	sub	sp, sp, #8
   15d38:	mov	r7, r1
   15d3c:	mov	r8, r2
   15d40:	cmp	r6, #0
   15d44:	movne	r4, r6
   15d48:	beq	16034 <__assert_fail@plt+0x3960>
   15d4c:	ldr	r0, [r4, #8]
   15d50:	cmp	r0, #5
   15d54:	ldrls	pc, [pc, r0, lsl #2]
   15d58:	b	16024 <__assert_fail@plt+0x3950>
   15d5c:	strdeq	r5, [r1], -r0
   15d60:	andeq	r5, r1, r0, ror #27
   15d64:	andeq	r5, r1, ip, ror #27
   15d68:	andeq	r5, r1, r4, lsl lr
   15d6c:	andeq	r5, r1, r4, lsr lr
   15d70:	andeq	r5, r1, r4, ror sp
   15d74:	ldr	r3, [r3]
   15d78:	sub	r3, r3, #2
   15d7c:	cmp	r3, #1
   15d80:	bls	16094 <__assert_fail@plt+0x39c0>
   15d84:	ldrb	r4, [r4, #33]	; 0x21
   15d88:	cmp	r4, #0
   15d8c:	beq	16068 <__assert_fail@plt+0x3994>
   15d90:	mov	r2, #5
   15d94:	movw	r1, #64012	; 0xfa0c
   15d98:	mov	r0, #0
   15d9c:	movt	r1, #2
   15da0:	bl	1217c <dcgettext@plt>
   15da4:	ldr	r3, [r8]
   15da8:	mov	r2, r0
   15dac:	mov	r0, #1
   15db0:	mov	r1, #0
   15db4:	bl	122cc <error@plt>
   15db8:	ldr	r3, [r5]
   15dbc:	mov	r4, #0
   15dc0:	cmp	r3, #0
   15dc4:	beq	15dd4 <__assert_fail@plt+0x3700>
   15dc8:	ldr	r2, [r3, #12]
   15dcc:	cmp	r2, r7
   15dd0:	bgt	15f20 <__assert_fail@plt+0x384c>
   15dd4:	mov	r0, r4
   15dd8:	add	sp, sp, #8
   15ddc:	pop	{r4, r5, r6, r7, r8, pc}
   15de0:	ldr	r3, [r4, #152]	; 0x98
   15de4:	str	r3, [r5]
   15de8:	b	15dc0 <__assert_fail@plt+0x36ec>
   15dec:	ldr	ip, [r4, #152]	; 0x98
   15df0:	mov	r1, #4
   15df4:	add	r3, r4, #8
   15df8:	mov	r0, r5
   15dfc:	add	r2, r4, r1
   15e00:	str	ip, [r5]
   15e04:	bl	15d28 <__assert_fail@plt+0x3654>
   15e08:	str	r0, [r4, #160]	; 0xa0
   15e0c:	ldr	r3, [r5]
   15e10:	b	15dc0 <__assert_fail@plt+0x36ec>
   15e14:	mov	r2, #5
   15e18:	movw	r1, #63884	; 0xf98c
   15e1c:	mov	r0, #0
   15e20:	movt	r1, #2
   15e24:	bl	1217c <dcgettext@plt>
   15e28:	ldr	r3, [r6, #4]
   15e2c:	mov	r2, r0
   15e30:	b	15dac <__assert_fail@plt+0x36d8>
   15e34:	ldr	r1, [r4, #152]	; 0x98
   15e38:	cmp	r1, #0
   15e3c:	beq	15e4c <__assert_fail@plt+0x3778>
   15e40:	ldrb	r3, [r1, #33]	; 0x21
   15e44:	cmp	r3, #0
   15e48:	beq	15e7c <__assert_fail@plt+0x37a8>
   15e4c:	mov	r2, #5
   15e50:	movw	r1, #64092	; 0xfa5c
   15e54:	mov	r0, #0
   15e58:	movt	r1, #2
   15e5c:	bl	1217c <dcgettext@plt>
   15e60:	mov	r1, #0
   15e64:	ldr	r3, [r6, #4]
   15e68:	mov	r2, r0
   15e6c:	mov	r0, #1
   15e70:	bl	122cc <error@plt>
   15e74:	ldr	r4, [r5]
   15e78:	ldr	r1, [r4, #152]	; 0x98
   15e7c:	ldr	r2, [r1, #8]
   15e80:	str	r1, [r5]
   15e84:	cmp	r2, #5
   15e88:	beq	160d4 <__assert_fail@plt+0x3a00>
   15e8c:	add	r3, r4, #8
   15e90:	add	r2, r4, #4
   15e94:	mov	r0, r5
   15e98:	mov	r1, #0
   15e9c:	bl	15d28 <__assert_fail@plt+0x3654>
   15ea0:	ldr	r3, [r5]
   15ea4:	cmp	r3, #0
   15ea8:	mov	r4, r0
   15eac:	beq	15ebc <__assert_fail@plt+0x37e8>
   15eb0:	ldr	r2, [r3, #8]
   15eb4:	cmp	r2, #5
   15eb8:	beq	15ee4 <__assert_fail@plt+0x3810>
   15ebc:	mov	r2, #5
   15ec0:	movw	r1, #64260	; 0xfb04
   15ec4:	mov	r0, #0
   15ec8:	movt	r1, #2
   15ecc:	bl	1217c <dcgettext@plt>
   15ed0:	mov	r1, #0
   15ed4:	mov	r2, r0
   15ed8:	mov	r0, #1
   15edc:	bl	122cc <error@plt>
   15ee0:	ldr	r3, [r5]
   15ee4:	ldr	r3, [r3, #152]	; 0x98
   15ee8:	str	r3, [r5]
   15eec:	b	15dc0 <__assert_fail@plt+0x36ec>
   15ef0:	movw	r1, #63864	; 0xf978
   15ef4:	movt	r1, #2
   15ef8:	mov	r0, #0
   15efc:	mov	r2, #5
   15f00:	bl	1217c <dcgettext@plt>
   15f04:	mov	r1, #0
   15f08:	mov	r4, r1
   15f0c:	mov	r2, r0
   15f10:	mov	r0, #1
   15f14:	bl	122cc <error@plt>
   15f18:	ldr	r3, [r5]
   15f1c:	b	15dc0 <__assert_fail@plt+0x36ec>
   15f20:	ldr	r1, [r3, #8]
   15f24:	cmp	r1, #5
   15f28:	beq	15f64 <__assert_fail@plt+0x3890>
   15f2c:	cmp	r7, r2
   15f30:	bge	15f5c <__assert_fail@plt+0x3888>
   15f34:	ldr	r2, [r3, #8]
   15f38:	cmp	r2, #5
   15f3c:	ldrls	pc, [pc, r2, lsl #2]
   15f40:	b	15ff4 <__assert_fail@plt+0x3920>
   15f44:	andeq	r5, r1, ip, asr #31
   15f48:	andeq	r5, r1, ip, asr #31
   15f4c:	andeq	r5, r1, ip, asr #31
   15f50:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15f54:	andeq	r5, r1, ip, asr #31
   15f58:	andeq	r5, r1, ip, asr pc
   15f5c:	cmp	r4, #0
   15f60:	bne	15dd4 <__assert_fail@plt+0x3700>
   15f64:	mov	r2, #5
   15f68:	movw	r1, #63864	; 0xf978
   15f6c:	mov	r0, #0
   15f70:	movt	r1, #2
   15f74:	bl	1217c <dcgettext@plt>
   15f78:	mov	r1, #0
   15f7c:	mov	r4, r1
   15f80:	mov	r2, r0
   15f84:	mov	r0, #1
   15f88:	bl	122cc <error@plt>
   15f8c:	b	15dd4 <__assert_fail@plt+0x3700>
   15f90:	str	r4, [r3, #156]	; 0x9c
   15f94:	add	r2, r3, #4
   15f98:	ldr	r4, [r5]
   15f9c:	mov	r0, r5
   15fa0:	add	r3, r3, #8
   15fa4:	ldr	ip, [r4, #152]	; 0x98
   15fa8:	ldrsh	r1, [r4, #12]
   15fac:	str	ip, [r5]
   15fb0:	bl	15d28 <__assert_fail@plt+0x3654>
   15fb4:	str	r0, [r4, #160]	; 0xa0
   15fb8:	ldr	r3, [r5]
   15fbc:	cmp	r3, #0
   15fc0:	beq	15f5c <__assert_fail@plt+0x3888>
   15fc4:	ldr	r2, [r3, #12]
   15fc8:	b	15f2c <__assert_fail@plt+0x3858>
   15fcc:	mov	r2, #5
   15fd0:	movw	r1, #63864	; 0xf978
   15fd4:	mov	r0, #0
   15fd8:	movt	r1, #2
   15fdc:	bl	1217c <dcgettext@plt>
   15fe0:	mov	r1, #0
   15fe4:	mov	r2, r0
   15fe8:	mov	r0, #1
   15fec:	bl	122cc <error@plt>
   15ff0:	b	15fb8 <__assert_fail@plt+0x38e4>
   15ff4:	mov	r2, #5
   15ff8:	movw	r1, #64380	; 0xfb7c
   15ffc:	mov	r0, #0
   16000:	movt	r1, #2
   16004:	bl	1217c <dcgettext@plt>
   16008:	ldr	r3, [r5]
   1600c:	mov	r1, #0
   16010:	ldr	r3, [r3, #8]
   16014:	mov	r2, r0
   16018:	mov	r0, #1
   1601c:	bl	122cc <error@plt>
   16020:	b	15fb8 <__assert_fail@plt+0x38e4>
   16024:	movw	r1, #64344	; 0xfb58
   16028:	mov	r0, #0
   1602c:	movt	r1, #2
   16030:	b	15efc <__assert_fail@plt+0x3828>
   16034:	mov	r2, #5
   16038:	movw	r1, #63864	; 0xf978
   1603c:	mov	r0, r6
   16040:	movt	r1, #2
   16044:	str	r3, [sp, #4]
   16048:	bl	1217c <dcgettext@plt>
   1604c:	mov	r1, r6
   16050:	mov	r2, r0
   16054:	mov	r0, #1
   16058:	bl	122cc <error@plt>
   1605c:	ldr	r4, [r5]
   16060:	ldr	r3, [sp, #4]
   16064:	b	15d4c <__assert_fail@plt+0x3678>
   16068:	mov	r2, #5
   1606c:	movw	r1, #64048	; 0xfa30
   16070:	mov	r0, r4
   16074:	movt	r1, #2
   16078:	bl	1217c <dcgettext@plt>
   1607c:	mov	r1, r4
   16080:	mov	r2, r0
   16084:	mov	r0, #1
   16088:	bl	122cc <error@plt>
   1608c:	ldr	r3, [r5]
   16090:	b	15dc0 <__assert_fail@plt+0x36ec>
   16094:	ldrb	r6, [r6, #33]	; 0x21
   16098:	cmp	r6, #0
   1609c:	bne	15d84 <__assert_fail@plt+0x36b0>
   160a0:	mov	r2, #5
   160a4:	movw	r1, #63968	; 0xf9e0
   160a8:	mov	r0, r6
   160ac:	movt	r1, #2
   160b0:	bl	1217c <dcgettext@plt>
   160b4:	ldr	r3, [r8]
   160b8:	mov	r1, r6
   160bc:	mov	r4, r6
   160c0:	mov	r2, r0
   160c4:	mov	r0, #1
   160c8:	bl	122cc <error@plt>
   160cc:	ldr	r3, [r5]
   160d0:	b	15dc0 <__assert_fail@plt+0x36ec>
   160d4:	movw	r1, #64204	; 0xfacc
   160d8:	mov	r0, #0
   160dc:	movt	r1, #2
   160e0:	bl	1217c <dcgettext@plt>
   160e4:	mov	r1, #0
   160e8:	mov	r2, r0
   160ec:	mov	r0, #1
   160f0:	bl	122cc <error@plt>
   160f4:	b	15e8c <__assert_fail@plt+0x37b8>
   160f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160fc:	movw	r7, #26008	; 0x6598
   16100:	movt	r7, #4
   16104:	sub	sp, sp, #24
   16108:	subs	r6, r0, #0
   1610c:	ldr	r3, [r7]
   16110:	str	r3, [sp, #20]
   16114:	beq	161c4 <__assert_fail@plt+0x3af0>
   16118:	ldr	r0, [r6, #160]	; 0xa0
   1611c:	bl	160f8 <__assert_fail@plt+0x3a24>
   16120:	ldr	r0, [r6, #156]	; 0x9c
   16124:	bl	160f8 <__assert_fail@plt+0x3a24>
   16128:	ldrb	r3, [r6, #18]
   1612c:	cmp	r3, #0
   16130:	movne	r8, #3
   16134:	beq	161dc <__assert_fail@plt+0x3b08>
   16138:	ldr	r3, [r6]
   1613c:	movw	r2, #16944	; 0x4230
   16140:	movt	r2, #1
   16144:	cmp	r3, r2
   16148:	beq	16200 <__assert_fail@plt+0x3b2c>
   1614c:	movw	r2, #16948	; 0x4234
   16150:	movt	r2, #1
   16154:	cmp	r3, r2
   16158:	beq	16200 <__assert_fail@plt+0x3b2c>
   1615c:	movw	r2, #42392	; 0xa598
   16160:	movt	r2, #1
   16164:	cmp	r3, r2
   16168:	ldreq	r3, [r6, #24]
   1616c:	beq	161b8 <__assert_fail@plt+0x3ae4>
   16170:	movw	sl, #26064	; 0x65d0
   16174:	movt	sl, #4
   16178:	ldr	r2, [sl]
   1617c:	cmp	r2, #0
   16180:	beq	16218 <__assert_fail@plt+0x3b44>
   16184:	add	r0, sp, #24
   16188:	movw	r2, #23360	; 0x5b40
   1618c:	movw	r1, #25204	; 0x6274
   16190:	movt	r2, #1
   16194:	str	r3, [r0, #-12]!
   16198:	movt	r1, #4
   1619c:	str	r2, [sp]
   161a0:	mov	r3, #8
   161a4:	mov	r2, #59	; 0x3b
   161a8:	bl	12470 <bsearch@plt>
   161ac:	subs	r4, r0, #0
   161b0:	beq	1629c <__assert_fail@plt+0x3bc8>
   161b4:	ldr	r3, [r4, #4]
   161b8:	cmp	r3, r8
   161bc:	bhi	16210 <__assert_fail@plt+0x3b3c>
   161c0:	str	r8, [r6, #24]
   161c4:	ldr	r2, [sp, #20]
   161c8:	ldr	r3, [r7]
   161cc:	cmp	r2, r3
   161d0:	bne	162e4 <__assert_fail@plt+0x3c10>
   161d4:	add	sp, sp, #24
   161d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161dc:	ldrb	r3, [r6, #20]
   161e0:	cmp	r3, #0
   161e4:	movne	r8, #1
   161e8:	bne	16138 <__assert_fail@plt+0x3a64>
   161ec:	ldrb	r8, [r6, #19]
   161f0:	cmp	r8, #0
   161f4:	movne	r8, #2
   161f8:	moveq	r8, #0
   161fc:	b	16138 <__assert_fail@plt+0x3a64>
   16200:	ldrb	r3, [r6, #40]	; 0x28
   16204:	cmp	r3, #0
   16208:	movne	r3, #7
   1620c:	moveq	r3, #8
   16210:	mov	r8, r3
   16214:	b	161c0 <__assert_fail@plt+0x3aec>
   16218:	movw	r0, #25204	; 0x6274
   1621c:	movw	r3, #23360	; 0x5b40
   16220:	movt	r0, #4
   16224:	movt	r3, #1
   16228:	mov	r1, #59	; 0x3b
   1622c:	mov	r2, #8
   16230:	bl	125e4 <qsort@plt>
   16234:	ldr	r4, [pc, #172]	; 162e8 <__assert_fail@plt+0x3c14>
   16238:	add	r9, r4, #464	; 0x1d0
   1623c:	sub	r5, r4, #8
   16240:	mov	r0, r4
   16244:	mov	r1, r5
   16248:	bl	15b40 <__assert_fail@plt+0x346c>
   1624c:	cmp	r0, #0
   16250:	blt	16284 <__assert_fail@plt+0x3bb0>
   16254:	mov	r0, r5
   16258:	mov	r1, r4
   1625c:	bl	15b40 <__assert_fail@plt+0x346c>
   16260:	cmp	r0, #0
   16264:	bgt	162c8 <__assert_fail@plt+0x3bf4>
   16268:	add	r4, r4, #8
   1626c:	cmp	r4, r9
   16270:	bne	1623c <__assert_fail@plt+0x3b68>
   16274:	mov	r2, #1
   16278:	ldr	r3, [r6]
   1627c:	str	r2, [sl]
   16280:	b	16184 <__assert_fail@plt+0x3ab0>
   16284:	movw	r2, #64544	; 0xfc20
   16288:	mov	r0, #1
   1628c:	movt	r2, #2
   16290:	mov	r1, #0
   16294:	bl	122cc <error@plt>
   16298:	b	16274 <__assert_fail@plt+0x3ba0>
   1629c:	mov	r2, #5
   162a0:	movw	r1, #64432	; 0xfbb0
   162a4:	movt	r1, #2
   162a8:	bl	1217c <dcgettext@plt>
   162ac:	ldr	r3, [r6, #4]
   162b0:	mov	r1, r4
   162b4:	mov	r2, r0
   162b8:	mov	r0, r4
   162bc:	bl	122cc <error@plt>
   162c0:	mov	r3, #10
   162c4:	b	161b8 <__assert_fail@plt+0x3ae4>
   162c8:	movw	r0, #64420	; 0xfba4
   162cc:	movw	r1, #63824	; 0xf950
   162d0:	movt	r0, #2
   162d4:	movt	r1, #2
   162d8:	mov	r2, #1020	; 0x3fc
   162dc:	ldr	r3, [pc, #8]	; 162ec <__assert_fail@plt+0x3c18>
   162e0:	bl	126d4 <__assert_fail@plt>
   162e4:	bl	12188 <__stack_chk_fail@plt>
   162e8:	andeq	r6, r4, ip, ror r2
   162ec:	andeq	pc, r2, ip, asr r8	; <UNPREDICTABLE>
   162f0:	push	{r4, r5, r6, r7, r8, lr}
   162f4:	movw	r5, #26064	; 0x65d0
   162f8:	movt	r5, #4
   162fc:	cmp	r1, #0
   16300:	mov	r7, r0
   16304:	ldr	r3, [r5, #4]
   16308:	movne	r6, #16
   1630c:	moveq	r6, #0
   16310:	cmp	r3, #0
   16314:	beq	16360 <__assert_fail@plt+0x3c8c>
   16318:	mov	r4, #0
   1631c:	mov	r8, r5
   16320:	b	16330 <__assert_fail@plt+0x3c5c>
   16324:	ldr	r3, [r8, #4]
   16328:	cmp	r3, r4
   1632c:	bls	16358 <__assert_fail@plt+0x3c84>
   16330:	ldr	r3, [r5, #8]
   16334:	mov	r0, r7
   16338:	mov	r2, r6
   1633c:	ldr	r1, [r3, r4, lsl #2]
   16340:	add	r4, r4, #1
   16344:	bl	122f0 <fnmatch@plt>
   16348:	cmp	r0, #0
   1634c:	bne	16324 <__assert_fail@plt+0x3c50>
   16350:	mov	r0, #1
   16354:	pop	{r4, r5, r6, r7, r8, pc}
   16358:	mov	r0, #0
   1635c:	pop	{r4, r5, r6, r7, r8, pc}
   16360:	mov	r2, r6
   16364:	movw	r1, #7340	; 0x1cac
   16368:	movt	r1, #3
   1636c:	bl	122f0 <fnmatch@plt>
   16370:	rsbs	r0, r0, #1
   16374:	movcc	r0, #0
   16378:	pop	{r4, r5, r6, r7, r8, pc}
   1637c:	ldr	ip, [r1, #36]	; 0x24
   16380:	mov	r3, r0
   16384:	push	{lr}		; (str lr, [sp, #-4]!)
   16388:	cmp	ip, #0
   1638c:	sub	sp, sp, #12
   16390:	beq	163b4 <__assert_fail@plt+0x3ce0>
   16394:	ldr	r3, [r1, #4]
   16398:	movw	r2, #64580	; 0xfc44
   1639c:	str	ip, [sp]
   163a0:	movt	r2, #2
   163a4:	mov	r1, #1
   163a8:	bl	124d0 <__fprintf_chk@plt>
   163ac:	add	sp, sp, #12
   163b0:	pop	{pc}		; (ldr pc, [sp], #4)
   163b4:	ldr	r0, [r1, #4]
   163b8:	mov	r1, r3
   163bc:	add	sp, sp, #12
   163c0:	pop	{lr}		; (ldr lr, [sp], #4)
   163c4:	b	12650 <fputs@plt>
   163c8:	movw	r3, #26064	; 0x65d0
   163cc:	movt	r3, #4
   163d0:	ldr	r0, [r3, #12]
   163d4:	bx	lr
   163d8:	push	{r4, lr}
   163dc:	subs	r4, r0, #0
   163e0:	beq	165d0 <__assert_fail@plt+0x3efc>
   163e4:	ldr	r0, [r4, #160]	; 0xa0
   163e8:	cmp	r0, #0
   163ec:	beq	163f4 <__assert_fail@plt+0x3d20>
   163f0:	bl	163d8 <__assert_fail@plt+0x3d04>
   163f4:	ldr	r0, [r4, #156]	; 0x9c
   163f8:	cmp	r0, #0
   163fc:	beq	16404 <__assert_fail@plt+0x3d30>
   16400:	bl	163d8 <__assert_fail@plt+0x3d04>
   16404:	ldr	r3, [r4, #8]
   16408:	cmp	r3, #5
   1640c:	beq	165b4 <__assert_fail@plt+0x3ee0>
   16410:	cmp	r3, #4
   16414:	beq	16598 <__assert_fail@plt+0x3ec4>
   16418:	cmp	r3, #3
   1641c:	ldrls	pc, [pc, r3, lsl #2]
   16420:	b	16530 <__assert_fail@plt+0x3e5c>
   16424:	andeq	r6, r1, r4, lsr #9
   16428:	andeq	r6, r1, r4, asr #9
   1642c:	strdeq	r6, [r1], -r8
   16430:	andeq	r6, r1, r4, lsr r4
   16434:	ldr	r2, [r4]
   16438:	movw	r3, #15700	; 0x3d54
   1643c:	movt	r3, #1
   16440:	cmp	r2, r3
   16444:	beq	16568 <__assert_fail@plt+0x3e94>
   16448:	movw	r3, #16264	; 0x3f88
   1644c:	movt	r3, #1
   16450:	cmp	r2, r3
   16454:	beq	16590 <__assert_fail@plt+0x3ebc>
   16458:	movw	r3, #15764	; 0x3d94
   1645c:	movt	r3, #1
   16460:	cmp	r2, r3
   16464:	bne	16678 <__assert_fail@plt+0x3fa4>
   16468:	ldr	r3, [r4, #160]	; 0xa0
   1646c:	cmp	r3, #0
   16470:	vldrne	s0, [r3, #28]
   16474:	ldr	r3, [r4, #156]	; 0x9c
   16478:	vmoveq.f32	s0, #112	; 0x3f800000  1.0
   1647c:	cmp	r3, #0
   16480:	vldrne	s15, [r3, #28]
   16484:	vmoveq.f32	s15, #112	; 0x3f800000  1.0
   16488:	vadd.f32	s15, s0, s15
   1648c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16490:	vcmpe.f32	s15, s0
   16494:	vmrs	APSR_nzcv, fpscr
   16498:	ble	1654c <__assert_fail@plt+0x3e78>
   1649c:	vstr	s0, [r4, #28]
   164a0:	pop	{r4, pc}
   164a4:	ldr	r3, [r4, #160]	; 0xa0
   164a8:	cmp	r3, #0
   164ac:	bne	1665c <__assert_fail@plt+0x3f88>
   164b0:	ldr	r3, [r4, #156]	; 0x9c
   164b4:	cmp	r3, #0
   164b8:	bne	16640 <__assert_fail@plt+0x3f6c>
   164bc:	vldr	s0, [r4, #28]
   164c0:	pop	{r4, pc}
   164c4:	ldr	r3, [r4, #160]	; 0xa0
   164c8:	cmp	r3, #0
   164cc:	bne	165ec <__assert_fail@plt+0x3f18>
   164d0:	ldr	r3, [r4, #156]	; 0x9c
   164d4:	cmp	r3, #0
   164d8:	beq	164bc <__assert_fail@plt+0x3de8>
   164dc:	movw	r0, #64692	; 0xfcb4
   164e0:	movw	r1, #63824	; 0xf950
   164e4:	movt	r0, #2
   164e8:	movt	r1, #2
   164ec:	movw	r2, #1183	; 0x49f
   164f0:	ldr	r3, [pc, #416]	; 16698 <__assert_fail@plt+0x3fc4>
   164f4:	bl	126d4 <__assert_fail@plt>
   164f8:	ldr	r2, [r4]
   164fc:	movw	r3, #17924	; 0x4604
   16500:	movt	r3, #1
   16504:	cmp	r2, r3
   16508:	bne	16624 <__assert_fail@plt+0x3f50>
   1650c:	ldr	r3, [r4, #156]	; 0x9c
   16510:	cmp	r3, #0
   16514:	bne	16608 <__assert_fail@plt+0x3f34>
   16518:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1651c:	ldr	r3, [r4, #160]	; 0xa0
   16520:	vldr	s15, [r3, #28]
   16524:	vsub.f32	s0, s0, s15
   16528:	vstr	s0, [r4, #28]
   1652c:	pop	{r4, pc}
   16530:	movw	r0, #62676	; 0xf4d4
   16534:	movw	r1, #63824	; 0xf950
   16538:	movt	r0, #2
   1653c:	movt	r1, #2
   16540:	movw	r2, #1224	; 0x4c8
   16544:	ldr	r3, [pc, #332]	; 16698 <__assert_fail@plt+0x3fc4>
   16548:	bl	126d4 <__assert_fail@plt>
   1654c:	vcmpe.f32	s15, #0.0
   16550:	vmrs	APSR_nzcv, fpscr
   16554:	bmi	16560 <__assert_fail@plt+0x3e8c>
   16558:	vmov.f32	s0, s15
   1655c:	b	1649c <__assert_fail@plt+0x3dc8>
   16560:	vldr	s0, [pc, #300]	; 16694 <__assert_fail@plt+0x3fc0>
   16564:	b	1649c <__assert_fail@plt+0x3dc8>
   16568:	ldr	r3, [r4, #160]	; 0xa0
   1656c:	cmp	r3, #0
   16570:	vldrne	s0, [r3, #28]
   16574:	ldr	r3, [r4, #156]	; 0x9c
   16578:	vmoveq.f32	s0, #112	; 0x3f800000  1.0
   1657c:	cmp	r3, #0
   16580:	vldrne	s15, [r3, #28]
   16584:	vmoveq.f32	s15, #112	; 0x3f800000  1.0
   16588:	vmul.f32	s15, s0, s15
   1658c:	b	1648c <__assert_fail@plt+0x3db8>
   16590:	vmov.f32	s15, #112	; 0x3f800000  1.0
   16594:	b	16558 <__assert_fail@plt+0x3e84>
   16598:	movw	r0, #64636	; 0xfc7c
   1659c:	movw	r1, #63824	; 0xf950
   165a0:	movt	r0, #2
   165a4:	movt	r1, #2
   165a8:	movw	r2, #1172	; 0x494
   165ac:	ldr	r3, [pc, #228]	; 16698 <__assert_fail@plt+0x3fc4>
   165b0:	bl	126d4 <__assert_fail@plt>
   165b4:	movw	r0, #64608	; 0xfc60
   165b8:	movw	r1, #63824	; 0xf950
   165bc:	movt	r0, #2
   165c0:	movt	r1, #2
   165c4:	movw	r2, #1171	; 0x493
   165c8:	ldr	r3, [pc, #200]	; 16698 <__assert_fail@plt+0x3fc4>
   165cc:	bl	126d4 <__assert_fail@plt>
   165d0:	movw	r0, #64588	; 0xfc4c
   165d4:	movw	r1, #63824	; 0xf950
   165d8:	movt	r0, #2
   165dc:	movt	r1, #2
   165e0:	movw	r2, #1164	; 0x48c
   165e4:	ldr	r3, [pc, #172]	; 16698 <__assert_fail@plt+0x3fc4>
   165e8:	bl	126d4 <__assert_fail@plt>
   165ec:	movw	r0, #64660	; 0xfc94
   165f0:	movw	r1, #63824	; 0xf950
   165f4:	movt	r0, #2
   165f8:	movt	r1, #2
   165fc:	movw	r2, #1182	; 0x49e
   16600:	ldr	r3, [pc, #144]	; 16698 <__assert_fail@plt+0x3fc4>
   16604:	bl	126d4 <__assert_fail@plt>
   16608:	movw	r0, #64692	; 0xfcb4
   1660c:	movw	r1, #63824	; 0xf950
   16610:	movt	r0, #2
   16614:	movt	r1, #2
   16618:	movw	r2, #1189	; 0x4a5
   1661c:	ldr	r3, [pc, #116]	; 16698 <__assert_fail@plt+0x3fc4>
   16620:	bl	126d4 <__assert_fail@plt>
   16624:	movw	r0, #64720	; 0xfcd0
   16628:	movw	r1, #63824	; 0xf950
   1662c:	movt	r0, #2
   16630:	movt	r1, #2
   16634:	movw	r2, #1188	; 0x4a4
   16638:	ldr	r3, [pc, #88]	; 16698 <__assert_fail@plt+0x3fc4>
   1663c:	bl	126d4 <__assert_fail@plt>
   16640:	movw	r0, #64692	; 0xfcb4
   16644:	movw	r1, #63824	; 0xf950
   16648:	movt	r0, #2
   1664c:	movt	r1, #2
   16650:	movw	r2, #1178	; 0x49a
   16654:	ldr	r3, [pc, #60]	; 16698 <__assert_fail@plt+0x3fc4>
   16658:	bl	126d4 <__assert_fail@plt>
   1665c:	movw	r0, #64660	; 0xfc94
   16660:	movw	r1, #63824	; 0xf950
   16664:	movt	r0, #2
   16668:	movt	r1, #2
   1666c:	movw	r2, #1177	; 0x499
   16670:	ldr	r3, [pc, #32]	; 16698 <__assert_fail@plt+0x3fc4>
   16674:	bl	126d4 <__assert_fail@plt>
   16678:	movw	r0, #62676	; 0xf4d4
   1667c:	movw	r1, #63824	; 0xf950
   16680:	movt	r0, #2
   16684:	movt	r1, #2
   16688:	movw	r2, #1212	; 0x4bc
   1668c:	ldr	r3, [pc, #4]	; 16698 <__assert_fail@plt+0x3fc4>
   16690:	bl	126d4 <__assert_fail@plt>
   16694:	andeq	r0, r0, r0
   16698:	andeq	pc, r2, ip, ror #16
   1669c:	push	{r3, r4, r5, lr}
   166a0:	mov	r5, r0
   166a4:	ldr	r3, [r0]
   166a8:	cmp	r3, #0
   166ac:	beq	16778 <__assert_fail@plt+0x40a4>
   166b0:	cmp	r3, #2
   166b4:	beq	16794 <__assert_fail@plt+0x40c0>
   166b8:	movw	r4, #26064	; 0x65d0
   166bc:	movt	r4, #4
   166c0:	mov	r0, #176	; 0xb0
   166c4:	ldr	r3, [r4, #16]
   166c8:	cmp	r3, #0
   166cc:	beq	16764 <__assert_fail@plt+0x4090>
   166d0:	bl	28e14 <__assert_fail@plt+0x16740>
   166d4:	ldr	r1, [r4, #20]
   166d8:	mov	r3, r0
   166dc:	str	r0, [r4, #20]
   166e0:	str	r0, [r1, #152]	; 0x98
   166e4:	movw	ip, #29372	; 0x72bc
   166e8:	movt	ip, #4
   166ec:	mov	r2, #0
   166f0:	mov	r4, #1065353216	; 0x3f800000
   166f4:	ldrb	r0, [ip, #16]
   166f8:	movw	r1, #64828	; 0xfd3c
   166fc:	mov	ip, #1
   16700:	movt	r1, #2
   16704:	str	r5, [r3, #172]	; 0xac
   16708:	str	r1, [r3, #36]	; 0x24
   1670c:	mov	r1, #10
   16710:	strb	r0, [r3, #32]
   16714:	mov	r0, r3
   16718:	str	r2, [r3]
   1671c:	str	r2, [r3, #4]
   16720:	str	r2, [r3, #8]
   16724:	str	r2, [r3, #12]
   16728:	str	r4, [r3, #28]
   1672c:	strb	r2, [r3, #16]
   16730:	strb	r2, [r3, #17]
   16734:	strb	r2, [r3, #20]
   16738:	str	r2, [r3, #40]	; 0x28
   1673c:	str	r2, [r3, #152]	; 0x98
   16740:	str	r2, [r3, #156]	; 0x9c
   16744:	str	r2, [r3, #160]	; 0xa0
   16748:	strb	r2, [r3, #33]	; 0x21
   1674c:	str	r2, [r3, #168]	; 0xa8
   16750:	str	r2, [r3, #164]	; 0xa4
   16754:	strb	ip, [r3, #18]
   16758:	strb	ip, [r3, #19]
   1675c:	str	r1, [r3, #24]
   16760:	pop	{r3, r4, r5, pc}
   16764:	bl	28e14 <__assert_fail@plt+0x16740>
   16768:	mov	r3, r0
   1676c:	str	r0, [r4, #16]
   16770:	str	r0, [r4, #20]
   16774:	b	166e4 <__assert_fail@plt+0x4010>
   16778:	movw	r0, #64760	; 0xfcf8
   1677c:	movw	r1, #63824	; 0xf950
   16780:	movt	r0, #2
   16784:	movt	r1, #2
   16788:	movw	r2, #1492	; 0x5d4
   1678c:	ldr	r3, [pc, #28]	; 167b0 <__assert_fail@plt+0x40dc>
   16790:	bl	126d4 <__assert_fail@plt>
   16794:	movw	r0, #64788	; 0xfd14
   16798:	movw	r1, #63824	; 0xf950
   1679c:	movt	r0, #2
   167a0:	movt	r1, #2
   167a4:	movw	r2, #1493	; 0x5d5
   167a8:	ldr	r3, [pc]	; 167b0 <__assert_fail@plt+0x40dc>
   167ac:	bl	126d4 <__assert_fail@plt>
   167b0:	andeq	pc, r2, r4, lsl #17
   167b4:	push	{r3, lr}
   167b8:	bl	1669c <__assert_fail@plt+0x3fc8>
   167bc:	cmp	r0, #0
   167c0:	movne	r3, #0
   167c4:	strne	r3, [r0, #36]	; 0x24
   167c8:	pop	{r3, pc}
   167cc:	push	{r4, r5, r6, lr}
   167d0:	movw	r4, #26064	; 0x65d0
   167d4:	movt	r4, #4
   167d8:	mov	r5, r0
   167dc:	mov	r6, r1
   167e0:	ldr	r0, [r4, #24]
   167e4:	cmp	r0, #0
   167e8:	beq	16898 <__assert_fail@plt+0x41c4>
   167ec:	ldr	r3, [r4, #20]
   167f0:	cmp	r3, #0
   167f4:	beq	16810 <__assert_fail@plt+0x413c>
   167f8:	ldr	r3, [r3, #8]
   167fc:	cmp	r3, #1
   16800:	beq	1684c <__assert_fail@plt+0x4178>
   16804:	bcc	16824 <__assert_fail@plt+0x4150>
   16808:	cmp	r3, #5
   1680c:	beq	1684c <__assert_fail@plt+0x4178>
   16810:	mov	r0, r5
   16814:	bl	1669c <__assert_fail@plt+0x3fc8>
   16818:	str	r6, [r0, #36]	; 0x24
   1681c:	str	r5, [r0, #172]	; 0xac
   16820:	pop	{r4, r5, r6, pc}
   16824:	mov	r2, #5
   16828:	movw	r1, #64892	; 0xfd7c
   1682c:	mov	r0, #0
   16830:	movt	r1, #2
   16834:	bl	1217c <dcgettext@plt>
   16838:	mov	r1, #0
   1683c:	mov	r2, r0
   16840:	mov	r0, #1
   16844:	bl	122cc <error@plt>
   16848:	b	16810 <__assert_fail@plt+0x413c>
   1684c:	bl	1669c <__assert_fail@plt+0x3fc8>
   16850:	movw	r1, #15700	; 0x3d54
   16854:	movw	r2, #63800	; 0xf938
   16858:	movt	r1, #1
   1685c:	movt	r2, #2
   16860:	str	r1, [r0]
   16864:	mov	r1, #3
   16868:	str	r2, [r0, #4]
   1686c:	mov	r2, #0
   16870:	str	r1, [r0, #8]
   16874:	str	r1, [r0, #12]
   16878:	strb	r2, [r0, #18]
   1687c:	strb	r2, [r0, #19]
   16880:	strb	r2, [r0, #20]
   16884:	str	r2, [r0, #36]	; 0x24
   16888:	str	r2, [r0, #40]	; 0x28
   1688c:	strb	r2, [r0, #16]
   16890:	strb	r2, [r0, #17]
   16894:	b	16810 <__assert_fail@plt+0x413c>
   16898:	movw	r0, #64860	; 0xfd5c
   1689c:	movt	r0, #2
   168a0:	bl	1ec1c <__assert_fail@plt+0xc548>
   168a4:	cmp	r0, #0
   168a8:	str	r0, [r4, #24]
   168ac:	bne	167ec <__assert_fail@plt+0x4118>
   168b0:	movw	r0, #64864	; 0xfd60
   168b4:	movw	r1, #63824	; 0xf950
   168b8:	movt	r0, #2
   168bc:	movt	r1, #2
   168c0:	movw	r2, #1547	; 0x60b
   168c4:	ldr	r3, [pc]	; 168cc <__assert_fail@plt+0x41f8>
   168c8:	bl	126d4 <__assert_fail@plt>
   168cc:	muleq	r2, r4, r8
   168d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168d4:	subs	r6, r1, #0
   168d8:	sub	sp, sp, #20
   168dc:	mov	r4, r0
   168e0:	mov	r5, r2
   168e4:	beq	16be8 <__assert_fail@plt+0x4514>
   168e8:	movw	sl, #63560	; 0xf848
   168ec:	ldr	r9, [pc, #920]	; 16c8c <__assert_fail@plt+0x45b8>
   168f0:	movt	sl, #2
   168f4:	add	r8, sl, #96	; 0x60
   168f8:	add	r7, sl, #152	; 0x98
   168fc:	cmp	r5, #0
   16900:	ble	1692c <__assert_fail@plt+0x4258>
   16904:	mov	fp, #0
   16908:	add	fp, fp, #1
   1690c:	movw	r0, #64940	; 0xfdac
   16910:	mov	r1, #1
   16914:	movt	r0, #2
   16918:	mov	r2, #4
   1691c:	mov	r3, r4
   16920:	bl	12248 <fwrite@plt>
   16924:	cmp	fp, r5
   16928:	bne	16908 <__assert_fail@plt+0x4234>
   1692c:	mov	r1, #1
   16930:	mov	r2, #6
   16934:	mov	r3, r4
   16938:	movw	r0, #65088	; 0xfe40
   1693c:	movt	r0, #2
   16940:	bl	12248 <fwrite@plt>
   16944:	mov	r0, r4
   16948:	mov	r1, r6
   1694c:	bl	1637c <__assert_fail@plt+0x3ca8>
   16950:	ldrh	r0, [r6, #8]
   16954:	cmp	r0, #0
   16958:	beq	16c44 <__assert_fail@plt+0x4570>
   1695c:	sxth	r0, r0
   16960:	mov	r3, #0
   16964:	b	16970 <__assert_fail@plt+0x429c>
   16968:	cmp	r0, r2
   1696c:	beq	16984 <__assert_fail@plt+0x42b0>
   16970:	add	r3, r3, #1
   16974:	lsl	r1, r3, #3
   16978:	ldrsh	r2, [r8, r1]
   1697c:	cmn	r2, #1
   16980:	bne	16968 <__assert_fail@plt+0x4294>
   16984:	ldrh	ip, [r6, #12]
   16988:	add	r1, sl, r1
   1698c:	cmp	ip, #0
   16990:	ldr	r3, [r1, #100]	; 0x64
   16994:	beq	16c4c <__assert_fail@plt+0x4578>
   16998:	sxth	ip, ip
   1699c:	mov	r2, #0
   169a0:	b	169ac <__assert_fail@plt+0x42d8>
   169a4:	cmp	ip, r1
   169a8:	beq	169c0 <__assert_fail@plt+0x42ec>
   169ac:	add	r2, r2, #1
   169b0:	lsl	r0, r2, #3
   169b4:	ldrsh	r1, [r7, r0]
   169b8:	cmn	r1, #1
   169bc:	bne	169a4 <__assert_fail@plt+0x42d0>
   169c0:	add	r1, sl, r0
   169c4:	movw	r2, #64948	; 0xfdb4
   169c8:	mov	r0, r4
   169cc:	movt	r2, #2
   169d0:	ldr	ip, [r1, #156]	; 0x9c
   169d4:	mov	r1, #1
   169d8:	str	ip, [sp]
   169dc:	bl	124d0 <__fprintf_chk@plt>
   169e0:	ldr	r0, [r6, #24]
   169e4:	mov	r3, #0
   169e8:	ldr	r1, [r9, r3, lsl #3]
   169ec:	movw	r2, #25204	; 0x6274
   169f0:	lsl	ip, r3, #3
   169f4:	movt	r2, #4
   169f8:	cmp	r0, r1
   169fc:	add	r3, r3, #1
   16a00:	beq	16bf0 <__assert_fail@plt+0x451c>
   16a04:	cmp	r3, #11
   16a08:	bne	169e8 <__assert_fail@plt+0x4314>
   16a0c:	movw	r3, #62420	; 0xf3d4
   16a10:	movt	r3, #2
   16a14:	vldr	s14, [r6, #28]
   16a18:	vcvt.f64.f32	d7, s14
   16a1c:	ldrb	r0, [r6, #16]
   16a20:	movw	r2, #15168	; 0x3b40
   16a24:	movt	r2, #3
   16a28:	movw	r1, #64936	; 0xfda8
   16a2c:	cmp	r0, #0
   16a30:	movt	r1, #2
   16a34:	mov	r0, r4
   16a38:	movne	r1, r2
   16a3c:	movw	r2, #64968	; 0xfdc8
   16a40:	str	r1, [sp, #8]
   16a44:	movt	r2, #2
   16a48:	mov	r1, #1
   16a4c:	vstr	d7, [sp]
   16a50:	bl	124d0 <__fprintf_chk@plt>
   16a54:	ldrb	r3, [r6, #18]
   16a58:	cmp	r3, #0
   16a5c:	bne	16a78 <__assert_fail@plt+0x43a4>
   16a60:	ldrb	r3, [r6, #19]
   16a64:	cmp	r3, #0
   16a68:	bne	16a78 <__assert_fail@plt+0x43a4>
   16a6c:	ldrb	r3, [r6, #20]
   16a70:	cmp	r3, #0
   16a74:	beq	16b14 <__assert_fail@plt+0x4440>
   16a78:	mov	r3, r4
   16a7c:	movw	r0, #65008	; 0xfdf0
   16a80:	mov	r1, #1
   16a84:	movt	r0, #2
   16a88:	mov	r2, #6
   16a8c:	bl	12248 <fwrite@plt>
   16a90:	ldrb	r3, [r6, #18]
   16a94:	cmp	r3, #0
   16a98:	bne	16ac0 <__assert_fail@plt+0x43ec>
   16a9c:	ldrb	r3, [r6, #20]
   16aa0:	cmp	r3, #0
   16aa4:	bne	16bfc <__assert_fail@plt+0x4528>
   16aa8:	ldrb	r3, [r6, #19]
   16aac:	cmp	r3, #0
   16ab0:	beq	16b14 <__assert_fail@plt+0x4440>
   16ab4:	movw	r3, #15168	; 0x3b40
   16ab8:	movt	r3, #3
   16abc:	b	16b00 <__assert_fail@plt+0x442c>
   16ac0:	mov	r3, r4
   16ac4:	movw	r0, #62032	; 0xf250
   16ac8:	mov	r1, #1
   16acc:	movt	r0, #2
   16ad0:	mov	r2, #4
   16ad4:	bl	12248 <fwrite@plt>
   16ad8:	ldrb	r3, [r6, #20]
   16adc:	cmp	r3, #0
   16ae0:	movwne	r3, #63792	; 0xf930
   16ae4:	movtne	r3, #2
   16ae8:	bne	16c04 <__assert_fail@plt+0x4530>
   16aec:	ldrb	r3, [r6, #19]
   16af0:	cmp	r3, #0
   16af4:	movwne	r3, #63792	; 0xf930
   16af8:	movtne	r3, #2
   16afc:	beq	16b14 <__assert_fail@plt+0x4440>
   16b00:	movw	r2, #65024	; 0xfe00
   16b04:	mov	r0, r4
   16b08:	movt	r2, #2
   16b0c:	mov	r1, #1
   16b10:	bl	124d0 <__fprintf_chk@plt>
   16b14:	mov	r0, #10
   16b18:	mov	r1, r4
   16b1c:	bl	12584 <fputc@plt>
   16b20:	cmp	r5, #0
   16b24:	movgt	fp, #0
   16b28:	ble	16b50 <__assert_fail@plt+0x447c>
   16b2c:	add	fp, fp, #1
   16b30:	movw	r0, #64940	; 0xfdac
   16b34:	mov	r1, #1
   16b38:	movt	r0, #2
   16b3c:	mov	r2, #4
   16b40:	mov	r3, r4
   16b44:	bl	12248 <fwrite@plt>
   16b48:	cmp	fp, r5
   16b4c:	bne	16b2c <__assert_fail@plt+0x4458>
   16b50:	ldr	r3, [r6, #156]	; 0x9c
   16b54:	cmp	r3, #0
   16b58:	beq	16c1c <__assert_fail@plt+0x4548>
   16b5c:	mov	r1, #1
   16b60:	mov	r2, #6
   16b64:	movw	r0, #65048	; 0xfe18
   16b68:	mov	r3, r4
   16b6c:	movt	r0, #2
   16b70:	bl	12248 <fwrite@plt>
   16b74:	mov	r0, r4
   16b78:	ldr	r1, [r6, #156]	; 0x9c
   16b7c:	add	r2, r5, #1
   16b80:	bl	168d0 <__assert_fail@plt+0x41fc>
   16b84:	cmp	r5, #0
   16b88:	movgt	fp, #0
   16b8c:	ble	16bb4 <__assert_fail@plt+0x44e0>
   16b90:	add	fp, fp, #1
   16b94:	movw	r0, #64940	; 0xfdac
   16b98:	mov	r1, #1
   16b9c:	movt	r0, #2
   16ba0:	mov	r2, #4
   16ba4:	mov	r3, r4
   16ba8:	bl	12248 <fwrite@plt>
   16bac:	cmp	fp, r5
   16bb0:	bne	16b90 <__assert_fail@plt+0x44bc>
   16bb4:	ldr	r3, [r6, #160]	; 0xa0
   16bb8:	cmp	r3, #0
   16bbc:	beq	16c54 <__assert_fail@plt+0x4580>
   16bc0:	mov	r1, #1
   16bc4:	movw	r0, #65068	; 0xfe2c
   16bc8:	mov	r2, #7
   16bcc:	movt	r0, #2
   16bd0:	mov	r3, r4
   16bd4:	add	r5, r5, r1
   16bd8:	bl	12248 <fwrite@plt>
   16bdc:	ldr	r6, [r6, #160]	; 0xa0
   16be0:	cmp	r6, #0
   16be4:	bne	168fc <__assert_fail@plt+0x4228>
   16be8:	add	sp, sp, #20
   16bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf0:	add	r2, r2, ip
   16bf4:	ldr	r3, [r2, #476]	; 0x1dc
   16bf8:	b	16a14 <__assert_fail@plt+0x4340>
   16bfc:	movw	r3, #15168	; 0x3b40
   16c00:	movt	r3, #3
   16c04:	movw	r2, #65016	; 0xfdf8
   16c08:	mov	r0, r4
   16c0c:	movt	r2, #2
   16c10:	mov	r1, #1
   16c14:	bl	124d0 <__fprintf_chk@plt>
   16c18:	b	16aec <__assert_fail@plt+0x4418>
   16c1c:	ldr	r3, [r6, #160]	; 0xa0
   16c20:	cmp	r3, #0
   16c24:	beq	16c74 <__assert_fail@plt+0x45a0>
   16c28:	movw	r0, #65056	; 0xfe20
   16c2c:	mov	r1, #1
   16c30:	mov	r2, #9
   16c34:	mov	r3, r4
   16c38:	movt	r0, #2
   16c3c:	bl	12248 <fwrite@plt>
   16c40:	b	16b84 <__assert_fail@plt+0x44b0>
   16c44:	mov	r1, r0
   16c48:	b	16984 <__assert_fail@plt+0x42b0>
   16c4c:	mov	r0, ip
   16c50:	b	169c0 <__assert_fail@plt+0x42ec>
   16c54:	movw	r0, #65076	; 0xfe34
   16c58:	movt	r0, #2
   16c5c:	mov	r3, r4
   16c60:	mov	r1, #1
   16c64:	mov	r2, #10
   16c68:	add	sp, sp, #20
   16c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c70:	b	12248 <fwrite@plt>
   16c74:	movw	r0, #65032	; 0xfe08
   16c78:	mov	r3, r4
   16c7c:	mov	r1, #1
   16c80:	movt	r0, #2
   16c84:	mov	r2, #13
   16c88:	b	16c68 <__assert_fail@plt+0x4594>
   16c8c:	andeq	r6, r4, ip, asr #8
   16c90:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c94:	mov	r6, r0
   16c98:	ldr	r0, [r0]
   16c9c:	mov	r7, r1
   16ca0:	cmp	r0, #0
   16ca4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ca8:	movw	r8, #29372	; 0x72bc
   16cac:	movt	r8, #4
   16cb0:	ldr	r3, [r8, #44]	; 0x2c
   16cb4:	tst	r3, #8
   16cb8:	bne	16df4 <__assert_fail@plt+0x4720>
   16cbc:	bl	163d8 <__assert_fail@plt+0x3d04>
   16cc0:	ldr	ip, [r6]
   16cc4:	mov	r4, #0
   16cc8:	cmp	ip, #0
   16ccc:	mov	r5, r4
   16cd0:	mov	sl, r4
   16cd4:	beq	16d5c <__assert_fail@plt+0x4688>
   16cd8:	ldr	r9, [ip, #156]	; 0x9c
   16cdc:	cmp	r5, #0
   16ce0:	str	r9, [r6]
   16ce4:	str	sl, [ip, #156]	; 0x9c
   16ce8:	beq	16d40 <__assert_fail@plt+0x466c>
   16cec:	ldr	fp, [ip, #160]	; 0xa0
   16cf0:	mov	r3, r5
   16cf4:	ldr	r0, [fp, #24]
   16cf8:	ldr	r2, [r3, #160]	; 0xa0
   16cfc:	ldr	r1, [r3, #12]
   16d00:	ldr	lr, [r2, #24]
   16d04:	cmp	lr, r0
   16d08:	bne	16de0 <__assert_fail@plt+0x470c>
   16d0c:	vldr	s14, [r2, #28]
   16d10:	vldr	s15, [fp, #28]
   16d14:	vcmp.f32	s14, s15
   16d18:	vmrs	APSR_nzcv, fpscr
   16d1c:	beq	16dc8 <__assert_fail@plt+0x46f4>
   16d20:	cmp	r1, #2
   16d24:	vcmpe.f32	s14, s15
   16d28:	bne	16dc0 <__assert_fail@plt+0x46ec>
   16d2c:	vmrs	APSR_nzcv, fpscr
   16d30:	bmi	16dc8 <__assert_fail@plt+0x46f4>
   16d34:	ldr	r3, [r3, #156]	; 0x9c
   16d38:	cmp	r3, #0
   16d3c:	bne	16cf8 <__assert_fail@plt+0x4624>
   16d40:	cmp	r4, #0
   16d44:	str	r5, [ip, #156]	; 0x9c
   16d48:	movne	r5, ip
   16d4c:	beq	16de8 <__assert_fail@plt+0x4714>
   16d50:	mov	ip, r9
   16d54:	cmp	ip, #0
   16d58:	bne	16cd8 <__assert_fail@plt+0x4604>
   16d5c:	ldr	r3, [r8, #44]	; 0x2c
   16d60:	tst	r3, #8
   16d64:	beq	16d9c <__assert_fail@plt+0x46c8>
   16d68:	movw	r8, #26016	; 0x65a0
   16d6c:	movt	r8, #4
   16d70:	mov	r1, #1
   16d74:	movw	r2, #65096	; 0xfe48
   16d78:	movw	r3, #65132	; 0xfe6c
   16d7c:	movt	r2, #2
   16d80:	ldr	r0, [r8]
   16d84:	movt	r3, #2
   16d88:	bl	124d0 <__fprintf_chk@plt>
   16d8c:	ldr	r0, [r8]
   16d90:	mov	r1, r5
   16d94:	mov	r2, #2
   16d98:	bl	168d0 <__assert_fail@plt+0x41fc>
   16d9c:	mov	r0, r5
   16da0:	bl	163d8 <__assert_fail@plt+0x3d04>
   16da4:	ldr	r2, [r7]
   16da8:	mov	r3, #0
   16dac:	str	r2, [r4, #156]	; 0x9c
   16db0:	str	r5, [r7]
   16db4:	str	r3, [r6, #4]
   16db8:	str	r3, [r6]
   16dbc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc0:	vmrs	APSR_nzcv, fpscr
   16dc4:	bmi	16d34 <__assert_fail@plt+0x4660>
   16dc8:	ldr	r2, [r3, #156]	; 0x9c
   16dcc:	cmp	r2, #0
   16dd0:	str	r2, [ip, #156]	; 0x9c
   16dd4:	moveq	r4, ip
   16dd8:	str	ip, [r3, #156]	; 0x9c
   16ddc:	b	16d50 <__assert_fail@plt+0x467c>
   16de0:	bcc	16d34 <__assert_fail@plt+0x4660>
   16de4:	b	16dc8 <__assert_fail@plt+0x46f4>
   16de8:	mov	r4, ip
   16dec:	mov	r5, ip
   16df0:	b	16d50 <__assert_fail@plt+0x467c>
   16df4:	movw	r4, #26016	; 0x65a0
   16df8:	movt	r4, #4
   16dfc:	mov	r1, #1
   16e00:	movw	r2, #65096	; 0xfe48
   16e04:	movw	r3, #65104	; 0xfe50
   16e08:	movt	r2, #2
   16e0c:	movt	r3, #2
   16e10:	ldr	r0, [r4]
   16e14:	bl	124d0 <__fprintf_chk@plt>
   16e18:	ldr	r0, [r4]
   16e1c:	ldr	r1, [r6]
   16e20:	mov	r2, #2
   16e24:	bl	168d0 <__assert_fail@plt+0x41fc>
   16e28:	ldr	r0, [r6]
   16e2c:	b	16cbc <__assert_fail@plt+0x45e8>
   16e30:	push	{r3, r4, r5, r6, r7, lr}
   16e34:	movw	r5, #26064	; 0x65d0
   16e38:	movt	r5, #4
   16e3c:	mov	r4, r2
   16e40:	mov	r6, r3
   16e44:	mov	r7, r0
   16e48:	mov	r0, r1
   16e4c:	mov	r1, r3
   16e50:	movw	r3, #27792	; 0x6c90
   16e54:	movt	r3, #1
   16e58:	str	r3, [r5, #28]
   16e5c:	bl	16c90 <__assert_fail@plt+0x45bc>
   16e60:	mov	r0, r4
   16e64:	ldr	r3, [r5, #28]
   16e68:	mov	r1, r6
   16e6c:	mov	r4, #0
   16e70:	blx	r3
   16e74:	add	r0, r7, r4
   16e78:	ldr	r2, [r5, #28]
   16e7c:	mov	r1, r6
   16e80:	add	r4, r4, #8
   16e84:	blx	r2
   16e88:	cmp	r4, #88	; 0x58
   16e8c:	bne	16e74 <__assert_fail@plt+0x47a0>
   16e90:	pop	{r3, r4, r5, r6, r7, pc}
   16e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e98:	movw	r8, #26008	; 0x6598
   16e9c:	movt	r8, #4
   16ea0:	sub	sp, sp, #132	; 0x84
   16ea4:	subs	r5, r0, #0
   16ea8:	mov	r3, #0
   16eac:	ldr	r2, [r8]
   16eb0:	str	r3, [sp, #20]
   16eb4:	str	r3, [sp, #24]
   16eb8:	str	r2, [sp, #124]	; 0x7c
   16ebc:	str	r3, [sp, #28]
   16ec0:	str	r3, [sp, #32]
   16ec4:	beq	1727c <__assert_fail@plt+0x4ba8>
   16ec8:	ldr	sl, [r5]
   16ecc:	cmp	sl, r3
   16ed0:	beq	17284 <__assert_fail@plt+0x4bb0>
   16ed4:	add	r6, sp, #36	; 0x24
   16ed8:	mov	r2, r3
   16edc:	add	r1, r6, r3
   16ee0:	str	r2, [r1, #4]
   16ee4:	str	r2, [r6, r3]
   16ee8:	add	r3, r3, #8
   16eec:	cmp	r3, #88	; 0x58
   16ef0:	bne	16edc <__assert_fail@plt+0x4808>
   16ef4:	ldr	r0, [sl, #156]	; 0x9c
   16ef8:	cmp	r0, #0
   16efc:	bne	16f0c <__assert_fail@plt+0x4838>
   16f00:	b	1728c <__assert_fail@plt+0x4bb8>
   16f04:	mov	sl, r0
   16f08:	mov	r0, r3
   16f0c:	ldr	r3, [r0, #156]	; 0x9c
   16f10:	ldr	r1, [sl, #12]
   16f14:	cmp	r3, #0
   16f18:	bne	16f04 <__assert_fail@plt+0x4830>
   16f1c:	add	r2, sl, #156	; 0x9c
   16f20:	ldr	r3, [r0, #8]
   16f24:	cmp	r3, #3
   16f28:	beq	16f30 <__assert_fail@plt+0x485c>
   16f2c:	bl	15b94 <__assert_fail@plt+0x34c0>
   16f30:	movw	r9, #29372	; 0x72bc
   16f34:	movt	r9, #4
   16f38:	ldr	r3, [r9, #44]	; 0x2c
   16f3c:	tst	r3, #9
   16f40:	bne	171e8 <__assert_fail@plt+0x4b14>
   16f44:	ldr	r4, [r5]
   16f48:	cmp	r4, #0
   16f4c:	moveq	r7, r4
   16f50:	beq	16f64 <__assert_fail@plt+0x4890>
   16f54:	ldr	r3, [r4, #8]
   16f58:	cmp	r3, #3
   16f5c:	ldreq	r7, [r4, #12]
   16f60:	movne	r7, #0
   16f64:	cmp	r4, #0
   16f68:	movw	ip, #17864	; 0x45c8
   16f6c:	mov	sl, #0
   16f70:	movt	ip, #1
   16f74:	str	ip, [sp, #4]
   16f78:	movw	ip, #29372	; 0x72bc
   16f7c:	movt	ip, #4
   16f80:	str	ip, [sp, #12]
   16f84:	movw	ip, #26016	; 0x65a0
   16f88:	movt	ip, #4
   16f8c:	str	ip, [sp, #8]
   16f90:	beq	16ff4 <__assert_fail@plt+0x4920>
   16f94:	ldr	r3, [r4, #8]
   16f98:	cmp	r3, #3
   16f9c:	beq	17134 <__assert_fail@plt+0x4a60>
   16fa0:	ldr	fp, [r4, #160]	; 0xa0
   16fa4:	ldr	r0, [fp, #8]
   16fa8:	ldr	r2, [fp]
   16fac:	cmp	r0, #3
   16fb0:	ldrls	pc, [pc, r0, lsl #2]
   16fb4:	b	17158 <__assert_fail@plt+0x4a84>
   16fb8:	andeq	r7, r1, ip, asr r0
   16fbc:	andeq	r7, r1, ip, asr r0
   16fc0:	andeq	r7, r1, r4, lsr #32
   16fc4:	andeq	r6, r1, r8, asr #31
   16fc8:	add	r0, r4, #160	; 0xa0
   16fcc:	bl	16e94 <__assert_fail@plt+0x47c0>
   16fd0:	strb	r0, [fp, #16]
   16fd4:	ldr	fp, [r4, #160]	; 0xa0
   16fd8:	ldrb	r3, [fp, #16]
   16fdc:	cmp	r3, #0
   16fe0:	bne	17040 <__assert_fail@plt+0x496c>
   16fe4:	add	r5, r4, #156	; 0x9c
   16fe8:	ldr	r4, [r5]
   16fec:	cmp	r4, #0
   16ff0:	bne	16f94 <__assert_fail@plt+0x48c0>
   16ff4:	mov	r0, r6
   16ff8:	add	r1, sp, #28
   16ffc:	add	r2, sp, #20
   17000:	mov	r3, r5
   17004:	bl	16e30 <__assert_fail@plt+0x475c>
   17008:	mov	r0, sl
   1700c:	ldr	r2, [sp, #124]	; 0x7c
   17010:	ldr	r3, [r8]
   17014:	cmp	r2, r3
   17018:	bne	17364 <__assert_fail@plt+0x4c90>
   1701c:	add	sp, sp, #132	; 0x84
   17020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17024:	add	r0, fp, #160	; 0xa0
   17028:	bl	16e94 <__assert_fail@plt+0x47c0>
   1702c:	strb	r0, [fp, #16]
   17030:	ldr	fp, [r4, #160]	; 0xa0
   17034:	ldrb	r3, [fp, #16]
   17038:	cmp	r3, #0
   1703c:	beq	16fe4 <__assert_fail@plt+0x4910>
   17040:	mov	r3, r5
   17044:	mov	r0, r6
   17048:	add	r1, sp, #28
   1704c:	add	r2, sp, #20
   17050:	bl	16e30 <__assert_fail@plt+0x475c>
   17054:	mov	sl, #1
   17058:	b	16fe4 <__assert_fail@plt+0x4910>
   1705c:	cmp	r7, #1
   17060:	beq	16fd8 <__assert_fail@plt+0x4904>
   17064:	ldrb	r3, [fp, #16]
   17068:	cmp	r3, #0
   1706c:	bne	17040 <__assert_fail@plt+0x496c>
   17070:	ldr	ip, [sp, #4]
   17074:	cmp	r2, ip
   17078:	beq	17104 <__assert_fail@plt+0x4a30>
   1707c:	movw	r3, #18540	; 0x486c
   17080:	movt	r3, #1
   17084:	cmp	r2, r3
   17088:	beq	17104 <__assert_fail@plt+0x4a30>
   1708c:	movw	r3, #17376	; 0x43e0
   17090:	movt	r3, #1
   17094:	cmp	r2, r3
   17098:	beq	17104 <__assert_fail@plt+0x4a30>
   1709c:	movw	r3, #17588	; 0x44b4
   170a0:	movt	r3, #1
   170a4:	cmp	r2, r3
   170a8:	beq	17104 <__assert_fail@plt+0x4a30>
   170ac:	ldrh	r3, [r9, #68]	; 0x44
   170b0:	cmp	r3, #0
   170b4:	beq	1729c <__assert_fail@plt+0x4bc8>
   170b8:	movw	r1, #15700	; 0x3d54
   170bc:	movt	r1, #1
   170c0:	cmp	r2, r1
   170c4:	beq	17184 <__assert_fail@plt+0x4ab0>
   170c8:	movw	r1, #17924	; 0x4604
   170cc:	movt	r1, #1
   170d0:	cmp	r2, r1
   170d4:	beq	17184 <__assert_fail@plt+0x4ab0>
   170d8:	movw	r1, #16264	; 0x3f88
   170dc:	movt	r1, #1
   170e0:	cmp	r2, r1
   170e4:	beq	17184 <__assert_fail@plt+0x4ab0>
   170e8:	movw	r1, #15764	; 0x3d94
   170ec:	movt	r1, #1
   170f0:	cmp	r2, r1
   170f4:	beq	17184 <__assert_fail@plt+0x4ab0>
   170f8:	ldr	r1, [fp, #24]
   170fc:	cmp	r1, #0
   17100:	bne	17184 <__assert_fail@plt+0x4ab0>
   17104:	ldr	r3, [r9, #44]	; 0x2c
   17108:	tst	r3, #8
   1710c:	bne	1722c <__assert_fail@plt+0x4b58>
   17110:	ldr	r3, [r4, #156]	; 0x9c
   17114:	str	r3, [r5]
   17118:	ldr	r3, [sp, #28]
   1711c:	ldr	r2, [sp, #32]
   17120:	str	r4, [sp, #28]
   17124:	cmp	r2, #0
   17128:	str	r3, [r4, #156]	; 0x9c
   1712c:	streq	r4, [sp, #32]
   17130:	b	16fe8 <__assert_fail@plt+0x4914>
   17134:	ldr	r3, [r4, #12]
   17138:	cmp	r3, r7
   1713c:	beq	16fa0 <__assert_fail@plt+0x48cc>
   17140:	mov	r0, r4
   17144:	mov	r1, r7
   17148:	mov	r2, r5
   1714c:	bl	15b94 <__assert_fail@plt+0x34c0>
   17150:	mov	r4, r0
   17154:	b	16fa0 <__assert_fail@plt+0x48cc>
   17158:	mov	r2, #5
   1715c:	movw	r1, #64344	; 0xfb58
   17160:	mov	r0, #0
   17164:	movt	r1, #2
   17168:	bl	1217c <dcgettext@plt>
   1716c:	mov	r1, #0
   17170:	mov	r2, r0
   17174:	mov	r0, #1
   17178:	bl	122cc <error@plt>
   1717c:	ldr	fp, [r4, #160]	; 0xa0
   17180:	b	16fd8 <__assert_fail@plt+0x4904>
   17184:	movw	r1, #18916	; 0x49e4
   17188:	movt	r1, #1
   1718c:	cmp	r2, r1
   17190:	beq	172ac <__assert_fail@plt+0x4bd8>
   17194:	cmp	r3, #1
   17198:	bls	16fe4 <__assert_fail@plt+0x4910>
   1719c:	ldr	r2, [fp, #24]
   171a0:	sub	r1, r2, #1
   171a4:	cmp	r1, #1
   171a8:	bls	1721c <__assert_fail@plt+0x4b48>
   171ac:	cmp	r3, #2
   171b0:	beq	16fe4 <__assert_fail@plt+0x4910>
   171b4:	ldr	r1, [r9, #44]	; 0x2c
   171b8:	tst	r1, #8
   171bc:	bne	172d0 <__assert_fail@plt+0x4bfc>
   171c0:	ldr	r1, [r4, #156]	; 0x9c
   171c4:	add	r3, r6, r2, lsl #3
   171c8:	str	r1, [r5]
   171cc:	ldr	r1, [r6, r2, lsl #3]
   171d0:	str	r1, [r4, #156]	; 0x9c
   171d4:	str	r4, [r6, r2, lsl #3]
   171d8:	ldr	r2, [r3, #4]
   171dc:	cmp	r2, #0
   171e0:	streq	r4, [r3, #4]
   171e4:	b	16fe8 <__assert_fail@plt+0x4914>
   171e8:	movw	r4, #26016	; 0x65a0
   171ec:	movt	r4, #4
   171f0:	mov	r1, #1
   171f4:	mov	r2, #22
   171f8:	ldr	r3, [r4]
   171fc:	movw	r0, #65160	; 0xfe88
   17200:	movt	r0, #2
   17204:	bl	12248 <fwrite@plt>
   17208:	ldr	r0, [r4]
   1720c:	ldr	r1, [r5]
   17210:	mov	r2, #0
   17214:	bl	168d0 <__assert_fail@plt+0x41fc>
   17218:	b	16f44 <__assert_fail@plt+0x4870>
   1721c:	ldrb	r1, [fp, #18]
   17220:	cmp	r1, #0
   17224:	beq	171b4 <__assert_fail@plt+0x4ae0>
   17228:	b	171ac <__assert_fail@plt+0x4ad8>
   1722c:	ldr	ip, [sp, #8]
   17230:	mov	r1, #1
   17234:	movw	r2, #65184	; 0xfea0
   17238:	movt	r2, #2
   1723c:	ldr	r0, [ip]
   17240:	ldr	ip, [sp, #12]
   17244:	ldrh	r3, [ip, #68]	; 0x44
   17248:	bl	124d0 <__fprintf_chk@plt>
   1724c:	ldr	ip, [sp, #8]
   17250:	ldr	r1, [r4, #160]	; 0xa0
   17254:	ldr	r0, [ip]
   17258:	bl	1637c <__assert_fail@plt+0x3ca8>
   1725c:	ldr	ip, [sp, #8]
   17260:	movw	r0, #65220	; 0xfec4
   17264:	mov	r1, #1
   17268:	mov	r2, #16
   1726c:	movt	r0, #2
   17270:	ldr	r3, [ip]
   17274:	bl	12248 <fwrite@plt>
   17278:	b	17110 <__assert_fail@plt+0x4a3c>
   1727c:	mov	r0, r5
   17280:	b	1700c <__assert_fail@plt+0x4938>
   17284:	mov	r0, sl
   17288:	b	1700c <__assert_fail@plt+0x4938>
   1728c:	mov	r0, sl
   17290:	mov	r2, r5
   17294:	mov	r1, #3
   17298:	b	16f20 <__assert_fail@plt+0x484c>
   1729c:	movw	r3, #18916	; 0x49e4
   172a0:	movt	r3, #1
   172a4:	cmp	r2, r3
   172a8:	bne	16fe4 <__assert_fail@plt+0x4910>
   172ac:	ldr	r3, [r4, #156]	; 0x9c
   172b0:	str	r3, [r5]
   172b4:	ldr	r3, [sp, #20]
   172b8:	ldr	r2, [sp, #24]
   172bc:	str	r4, [sp, #20]
   172c0:	cmp	r2, #0
   172c4:	str	r3, [r4, #156]	; 0x9c
   172c8:	streq	r4, [sp, #24]
   172cc:	b	16fe8 <__assert_fail@plt+0x4914>
   172d0:	ldr	ip, [sp, #8]
   172d4:	mov	r1, #1
   172d8:	movw	r2, #65240	; 0xfed8
   172dc:	movt	r2, #2
   172e0:	ldr	r0, [ip]
   172e4:	bl	124d0 <__fprintf_chk@plt>
   172e8:	ldr	ip, [sp, #8]
   172ec:	ldr	r1, [r4, #160]	; 0xa0
   172f0:	ldr	r0, [ip]
   172f4:	bl	1637c <__assert_fail@plt+0x3ca8>
   172f8:	ldr	ip, [sp, #8]
   172fc:	ldr	r2, [r4, #160]	; 0xa0
   17300:	mov	r3, #0
   17304:	ldr	lr, [pc, #92]	; 17368 <__assert_fail@plt+0x4c94>
   17308:	ldr	r0, [ip]
   1730c:	ldr	ip, [r2, #24]
   17310:	ldr	r1, [lr, r3, lsl #3]
   17314:	movw	r2, #25204	; 0x6274
   17318:	lsl	fp, r3, #3
   1731c:	movt	r2, #4
   17320:	cmp	ip, r1
   17324:	beq	17358 <__assert_fail@plt+0x4c84>
   17328:	add	r3, r3, #1
   1732c:	cmp	r3, #11
   17330:	bne	17310 <__assert_fail@plt+0x4c3c>
   17334:	movw	r3, #62420	; 0xf3d4
   17338:	movt	r3, #2
   1733c:	movw	r2, #65272	; 0xfef8
   17340:	mov	r1, #1
   17344:	movt	r2, #2
   17348:	bl	124d0 <__fprintf_chk@plt>
   1734c:	ldr	r3, [r4, #160]	; 0xa0
   17350:	ldr	r2, [r3, #24]
   17354:	b	171c0 <__assert_fail@plt+0x4aec>
   17358:	add	r2, r2, fp
   1735c:	ldr	r3, [r2, #476]	; 0x1dc
   17360:	b	1733c <__assert_fail@plt+0x4c68>
   17364:	bl	12188 <__stack_chk_fail@plt>
   17368:	andeq	r6, r4, ip, asr #8
   1736c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17370:	vpush	{d8}
   17374:	subs	r4, r0, #0
   17378:	sub	sp, sp, #20
   1737c:	beq	174a8 <__assert_fail@plt+0x4dd4>
   17380:	movw	r6, #29372	; 0x72bc
   17384:	movt	r6, #4
   17388:	movw	r7, #26016	; 0x65a0
   1738c:	movw	r8, #15764	; 0x3d94
   17390:	ldr	r5, [r6, #44]	; 0x2c
   17394:	movt	r7, #4
   17398:	movt	r8, #1
   1739c:	and	r5, r5, #8
   173a0:	ldr	r3, [r4, #8]
   173a4:	cmp	r3, #3
   173a8:	movwne	r3, #65312	; 0xff20
   173ac:	movtne	r3, #2
   173b0:	beq	173fc <__assert_fail@plt+0x4d28>
   173b4:	cmp	r5, #0
   173b8:	beq	173e0 <__assert_fail@plt+0x4d0c>
   173bc:	mov	r1, #1
   173c0:	movw	r2, #80	; 0x50
   173c4:	ldr	r0, [r7]
   173c8:	movt	r2, #3
   173cc:	bl	124d0 <__fprintf_chk@plt>
   173d0:	ldr	r0, [r7]
   173d4:	mov	r1, r4
   173d8:	mov	r2, #0
   173dc:	bl	168d0 <__assert_fail@plt+0x41fc>
   173e0:	ldr	r0, [r4, #156]	; 0x9c
   173e4:	bl	1736c <__assert_fail@plt+0x4c98>
   173e8:	cmp	r0, #0
   173ec:	beq	17498 <__assert_fail@plt+0x4dc4>
   173f0:	ldr	r5, [r6, #44]	; 0x2c
   173f4:	and	r5, r5, #8
   173f8:	b	173a0 <__assert_fail@plt+0x4ccc>
   173fc:	ldr	r3, [r4, #156]	; 0x9c
   17400:	cmp	r3, #0
   17404:	beq	174b8 <__assert_fail@plt+0x4de4>
   17408:	ldr	sl, [r4, #160]	; 0xa0
   1740c:	cmp	sl, #0
   17410:	beq	174b8 <__assert_fail@plt+0x4de4>
   17414:	ldr	r9, [r3, #160]	; 0xa0
   17418:	cmp	r9, #0
   1741c:	beq	17544 <__assert_fail@plt+0x4e70>
   17420:	mov	r0, r9
   17424:	bl	15ac4 <__assert_fail@plt+0x33f0>
   17428:	cmp	r0, #0
   1742c:	movwne	r3, #65368	; 0xff58
   17430:	movtne	r3, #2
   17434:	bne	173b4 <__assert_fail@plt+0x4ce0>
   17438:	mov	r0, sl
   1743c:	bl	15ac4 <__assert_fail@plt+0x33f0>
   17440:	cmp	r0, #0
   17444:	movwne	r3, #65400	; 0xff78
   17448:	movtne	r3, #2
   1744c:	bne	173b4 <__assert_fail@plt+0x4ce0>
   17450:	mov	r0, r9
   17454:	bl	15b00 <__assert_fail@plt+0x342c>
   17458:	mov	fp, r0
   1745c:	mov	r0, sl
   17460:	bl	15b00 <__assert_fail@plt+0x342c>
   17464:	cmp	fp, r0
   17468:	movwlt	r3, #65432	; 0xff98
   1746c:	movtlt	r3, #2
   17470:	blt	173b4 <__assert_fail@plt+0x4ce0>
   17474:	beq	174c4 <__assert_fail@plt+0x4df0>
   17478:	cmp	r5, #0
   1747c:	bne	17510 <__assert_fail@plt+0x4e3c>
   17480:	ldr	r3, [r4, #156]	; 0x9c
   17484:	ldr	r1, [r4, #160]	; 0xa0
   17488:	ldr	r2, [r3, #160]	; 0xa0
   1748c:	str	r1, [r3, #160]	; 0xa0
   17490:	str	r2, [r4, #160]	; 0xa0
   17494:	b	173a0 <__assert_fail@plt+0x4ccc>
   17498:	ldr	r0, [r4, #160]	; 0xa0
   1749c:	bl	1736c <__assert_fail@plt+0x4c98>
   174a0:	cmp	r0, #0
   174a4:	bne	173f0 <__assert_fail@plt+0x4d1c>
   174a8:	mov	r0, #0
   174ac:	add	sp, sp, #20
   174b0:	vpop	{d8}
   174b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174b8:	movw	r3, #65288	; 0xff08
   174bc:	movt	r3, #2
   174c0:	b	173b4 <__assert_fail@plt+0x4ce0>
   174c4:	cmp	r5, #0
   174c8:	vldr	s17, [r9, #28]
   174cc:	vldr	s16, [sl, #28]
   174d0:	bne	17550 <__assert_fail@plt+0x4e7c>
   174d4:	ldr	r2, [r4]
   174d8:	cmp	r2, r8
   174dc:	beq	17580 <__assert_fail@plt+0x4eac>
   174e0:	movw	r3, #15700	; 0x3d54
   174e4:	movt	r3, #1
   174e8:	cmp	r2, r3
   174ec:	movwne	r3, #65496	; 0xffd8
   174f0:	movtne	r3, #2
   174f4:	bne	173b4 <__assert_fail@plt+0x4ce0>
   174f8:	vcmpe.f32	s17, s16
   174fc:	vmrs	APSR_nzcv, fpscr
   17500:	movwpl	r3, #65448	; 0xffa8
   17504:	movtpl	r3, #2
   17508:	bpl	173b4 <__assert_fail@plt+0x4ce0>
   1750c:	b	17478 <__assert_fail@plt+0x4da4>
   17510:	mov	r1, #1
   17514:	mov	r2, #24
   17518:	ldr	r3, [r7]
   1751c:	movw	r0, #52	; 0x34
   17520:	movt	r0, #3
   17524:	bl	12248 <fwrite@plt>
   17528:	ldr	r0, [r7]
   1752c:	mov	r1, r4
   17530:	mov	r2, #0
   17534:	bl	168d0 <__assert_fail@plt+0x41fc>
   17538:	ldr	r5, [r6, #44]	; 0x2c
   1753c:	and	r5, r5, #8
   17540:	b	17480 <__assert_fail@plt+0x4dac>
   17544:	movw	r3, #65336	; 0xff38
   17548:	movt	r3, #2
   1754c:	b	173b4 <__assert_fail@plt+0x4ce0>
   17550:	vcvt.f64.f32	d6, s17
   17554:	ldr	r0, [r7]
   17558:	movw	r2, #24
   1755c:	mov	r1, #1
   17560:	movt	r2, #3
   17564:	vcvt.f64.f32	d7, s16
   17568:	vstr	d6, [sp]
   1756c:	vstr	d7, [sp, #8]
   17570:	bl	124d0 <__fprintf_chk@plt>
   17574:	ldr	r5, [r6, #44]	; 0x2c
   17578:	and	r5, r5, #8
   1757c:	b	174d4 <__assert_fail@plt+0x4e00>
   17580:	vcmpe.f32	s17, s16
   17584:	vmrs	APSR_nzcv, fpscr
   17588:	movwle	r3, #65516	; 0xffec
   1758c:	movtle	r3, #2
   17590:	ble	173b4 <__assert_fail@plt+0x4ce0>
   17594:	b	17478 <__assert_fail@plt+0x4da4>
   17598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1759c:	movw	fp, #26008	; 0x6598
   175a0:	movt	fp, #4
   175a4:	sub	sp, sp, #44	; 0x2c
   175a8:	movw	r5, #26064	; 0x65d0
   175ac:	cmp	r2, r0
   175b0:	ldr	r3, [fp]
   175b4:	movt	r5, #4
   175b8:	mov	r4, r1
   175bc:	str	r0, [sp, #20]
   175c0:	add	r1, r1, r2, lsl #2
   175c4:	mov	r0, #0
   175c8:	str	r2, [sp, #32]
   175cc:	str	r3, [sp, #36]	; 0x24
   175d0:	str	r1, [r5, #8]
   175d4:	str	r0, [r5, #16]
   175d8:	blt	17604 <__assert_fail@plt+0x4f30>
   175dc:	b	17618 <__assert_fail@plt+0x4f44>
   175e0:	ldr	r2, [sp, #32]
   175e4:	ldr	r1, [sp, #20]
   175e8:	add	r2, r2, #1
   175ec:	ldr	r3, [r5, #4]
   175f0:	cmp	r1, r2
   175f4:	str	r2, [sp, #32]
   175f8:	add	r3, r3, #1
   175fc:	str	r3, [r5, #4]
   17600:	ble	17618 <__assert_fail@plt+0x4f44>
   17604:	ldr	r0, [r4, r2, lsl #2]
   17608:	mov	r1, #1
   1760c:	bl	189e8 <__assert_fail@plt+0x6314>
   17610:	cmp	r0, #0
   17614:	beq	175e0 <__assert_fail@plt+0x4f0c>
   17618:	movw	r6, #116	; 0x74
   1761c:	movt	r6, #3
   17620:	mov	r0, r6
   17624:	bl	1ec1c <__assert_fail@plt+0xc548>
   17628:	mov	r7, r0
   1762c:	movw	r0, #64756	; 0xfcf4
   17630:	movt	r0, #2
   17634:	bl	1ec1c <__assert_fail@plt+0xc548>
   17638:	str	r0, [sp, #16]
   1763c:	movw	r0, #120	; 0x78
   17640:	movt	r0, #3
   17644:	bl	1ec1c <__assert_fail@plt+0xc548>
   17648:	cmp	r7, #0
   1764c:	str	r0, [sp, #12]
   17650:	beq	17c08 <__assert_fail@plt+0x5534>
   17654:	ldr	r3, [sp, #16]
   17658:	cmp	r3, #0
   1765c:	beq	17bec <__assert_fail@plt+0x5518>
   17660:	ldr	r3, [sp, #12]
   17664:	cmp	r3, #0
   17668:	beq	17bd0 <__assert_fail@plt+0x54fc>
   1766c:	mov	r1, r4
   17670:	add	r2, sp, #20
   17674:	mov	r0, r7
   17678:	bl	1d234 <__assert_fail@plt+0xab60>
   1767c:	ldr	r3, [r5, #16]
   17680:	ldr	r2, [r5, #20]
   17684:	mov	ip, #1
   17688:	ldr	r1, [sp, #20]
   1768c:	mov	r0, r4
   17690:	str	r6, [r2, #4]
   17694:	strb	ip, [r3, #33]	; 0x21
   17698:	bl	1ec04 <__assert_fail@plt+0xc530>
   1769c:	ldr	r0, [r5, #20]
   176a0:	bl	151e8 <__assert_fail@plt+0x2b14>
   176a4:	ldr	r3, [sp, #32]
   176a8:	ldr	r1, [sp, #20]
   176ac:	cmp	r1, r3
   176b0:	ble	17808 <__assert_fail@plt+0x5134>
   176b4:	movw	r9, #29328	; 0x7290
   176b8:	movw	sl, #26016	; 0x65a0
   176bc:	movt	r9, #4
   176c0:	movt	sl, #4
   176c4:	b	17738 <__assert_fail@plt+0x5064>
   176c8:	ldr	r3, [r4, r2, lsl #2]
   176cc:	cmp	r3, #0
   176d0:	beq	17a68 <__assert_fail@plt+0x5394>
   176d4:	ldr	r3, [r6]
   176d8:	cmp	r3, #4
   176dc:	bne	176e8 <__assert_fail@plt+0x5014>
   176e0:	cmp	r2, r8
   176e4:	beq	17a9c <__assert_fail@plt+0x53c8>
   176e8:	mov	r2, #5
   176ec:	movw	r1, #296	; 0x128
   176f0:	mov	r0, #0
   176f4:	movt	r1, #3
   176f8:	bl	1217c <dcgettext@plt>
   176fc:	ldr	r3, [sp, #32]
   17700:	mov	r1, #0
   17704:	ldr	r3, [r4, r3, lsl #2]
   17708:	str	r7, [sp]
   1770c:	mov	r2, r0
   17710:	mov	r0, #1
   17714:	bl	122cc <error@plt>
   17718:	ldr	r0, [r5, #20]
   1771c:	bl	151e8 <__assert_fail@plt+0x2b14>
   17720:	ldr	r0, [r5, #16]
   17724:	bl	151e8 <__assert_fail@plt+0x2b14>
   17728:	ldr	r3, [sp, #32]
   1772c:	ldr	r1, [sp, #20]
   17730:	cmp	r3, r1
   17734:	bge	17808 <__assert_fail@plt+0x5134>
   17738:	mov	r2, #0
   1773c:	ldr	r0, [r4, r3, lsl #2]
   17740:	mov	r1, r2
   17744:	strb	r2, [r9, #40]	; 0x28
   17748:	bl	189e8 <__assert_fail@plt+0x6314>
   1774c:	subs	r6, r0, #0
   17750:	beq	177cc <__assert_fail@plt+0x50f8>
   17754:	ldr	r3, [sp, #32]
   17758:	ldr	r7, [r4, r3, lsl #2]
   1775c:	mov	r0, r7
   17760:	bl	1ec1c <__assert_fail@plt+0xc548>
   17764:	subs	r6, r0, #0
   17768:	beq	17a1c <__assert_fail@plt+0x5348>
   1776c:	ldr	r3, [r6]
   17770:	add	r2, sp, #32
   17774:	mov	r0, r6
   17778:	mov	r1, r4
   1777c:	cmp	r3, #4
   17780:	ldrne	r3, [sp, #32]
   17784:	ldreq	r8, [sp, #32]
   17788:	addne	r3, r3, #1
   1778c:	strne	r3, [sp, #32]
   17790:	movne	r8, r3
   17794:	ldr	r3, [r6, #8]
   17798:	blx	r3
   1779c:	ldr	r2, [sp, #32]
   177a0:	subs	ip, r0, #0
   177a4:	beq	176c8 <__assert_fail@plt+0x4ff4>
   177a8:	ldr	r3, [r5, #20]
   177ac:	cmp	r2, r8
   177b0:	moveq	r2, #0
   177b4:	str	r7, [r3, #4]
   177b8:	movne	r0, r3
   177bc:	ldrne	r2, [r4, r8, lsl #2]
   177c0:	moveq	r0, r3
   177c4:	str	r2, [r3, #36]	; 0x24
   177c8:	b	1771c <__assert_fail@plt+0x5048>
   177cc:	mov	r2, #5
   177d0:	movw	r1, #212	; 0xd4
   177d4:	movt	r1, #3
   177d8:	bl	1217c <dcgettext@plt>
   177dc:	ldr	r3, [sp, #32]
   177e0:	mov	r1, r6
   177e4:	ldr	r3, [r4, r3, lsl #2]
   177e8:	mov	r2, r0
   177ec:	mov	r0, r6
   177f0:	bl	122cc <error@plt>
   177f4:	mov	r2, r6
   177f8:	ldr	r0, [sl]
   177fc:	mov	r1, #1
   17800:	bl	18018 <__assert_fail@plt+0x5944>
   17804:	b	17754 <__assert_fail@plt+0x5080>
   17808:	ldr	r2, [r5, #20]
   1780c:	mov	r0, r4
   17810:	ldr	r3, [r5, #16]
   17814:	movw	r6, #26064	; 0x65d0
   17818:	bl	1ec18 <__assert_fail@plt+0xc544>
   1781c:	ldr	r2, [r5, #16]
   17820:	movt	r6, #4
   17824:	ldr	r3, [r2, #152]	; 0x98
   17828:	cmp	r3, #0
   1782c:	beq	17b34 <__assert_fail@plt+0x5460>
   17830:	mov	r0, r3
   17834:	bl	189a8 <__assert_fail@plt+0x62d4>
   17838:	cmp	r0, #0
   1783c:	beq	17a44 <__assert_fail@plt+0x5370>
   17840:	mov	r1, r4
   17844:	add	r2, sp, #20
   17848:	ldr	r0, [sp, #16]
   1784c:	mov	r7, #1
   17850:	bl	1cffc <__assert_fail@plt+0xa928>
   17854:	ldr	r3, [r6, #20]
   17858:	movw	r2, #64756	; 0xfcf4
   1785c:	movt	r2, #2
   17860:	mov	r0, r3
   17864:	str	r2, [r3, #4]
   17868:	strb	r7, [r3, #33]	; 0x21
   1786c:	bl	151e8 <__assert_fail@plt+0x2b14>
   17870:	mov	r1, r4
   17874:	add	r2, sp, #20
   17878:	ldr	r0, [sp, #12]
   1787c:	bl	1c2d8 <__assert_fail@plt+0x9c04>
   17880:	ldr	r3, [r6, #20]
   17884:	movw	r2, #356	; 0x164
   17888:	movt	r2, #3
   1788c:	mov	r0, r3
   17890:	strb	r7, [r3, #33]	; 0x21
   17894:	str	r2, [r3, #4]
   17898:	bl	151e8 <__assert_fail@plt+0x2b14>
   1789c:	ldr	r0, [r6, #16]
   178a0:	bl	151e8 <__assert_fail@plt+0x2b14>
   178a4:	movw	r4, #29372	; 0x72bc
   178a8:	movt	r4, #4
   178ac:	ldr	r3, [r4, #44]	; 0x2c
   178b0:	tst	r3, #9
   178b4:	bne	17b04 <__assert_fail@plt+0x5430>
   178b8:	ldr	r0, [r5, #16]
   178bc:	bl	1eabc <__assert_fail@plt+0xc3e8>
   178c0:	ldr	r0, [r5, #16]
   178c4:	bl	151e8 <__assert_fail@plt+0x2b14>
   178c8:	ldr	ip, [r5, #16]
   178cc:	add	r0, sp, #40	; 0x28
   178d0:	mov	r3, #8
   178d4:	mov	r1, #0
   178d8:	mov	r2, #4
   178dc:	str	ip, [r0, #-12]!
   178e0:	bl	15d28 <__assert_fail@plt+0x3654>
   178e4:	str	r0, [r5, #12]
   178e8:	bl	163d8 <__assert_fail@plt+0x3d04>
   178ec:	ldr	r3, [sp, #28]
   178f0:	cmp	r3, #0
   178f4:	beq	17944 <__assert_fail@plt+0x5270>
   178f8:	ldr	r1, [r3]
   178fc:	movw	r2, #16124	; 0x3efc
   17900:	movt	r2, #1
   17904:	cmp	r1, r2
   17908:	beq	17ba4 <__assert_fail@plt+0x54d0>
   1790c:	ldr	r6, [r3, #4]
   17910:	cmp	r6, #0
   17914:	beq	17b7c <__assert_fail@plt+0x54a8>
   17918:	mov	r2, #5
   1791c:	movw	r1, #384	; 0x180
   17920:	mov	r0, #0
   17924:	movt	r1, #3
   17928:	bl	1217c <dcgettext@plt>
   1792c:	ldr	r3, [sp, #28]
   17930:	mov	r1, #0
   17934:	ldr	r3, [r3, #4]
   17938:	mov	r2, r0
   1793c:	mov	r0, #1
   17940:	bl	122cc <error@plt>
   17944:	ldr	r3, [r4, #44]	; 0x2c
   17948:	tst	r3, #9
   1794c:	bne	17ad0 <__assert_fail@plt+0x53fc>
   17950:	ldr	r0, [r5, #12]
   17954:	movw	r6, #26064	; 0x65d0
   17958:	movt	r6, #4
   1795c:	bl	160f8 <__assert_fail@plt+0x3a24>
   17960:	add	r0, r6, #12
   17964:	bl	16e94 <__assert_fail@plt+0x47c0>
   17968:	ldr	r7, [r5, #12]
   1796c:	mov	r1, #1
   17970:	mov	r0, r7
   17974:	bl	15c9c <__assert_fail@plt+0x35c8>
   17978:	mov	r0, r7
   1797c:	bl	1736c <__assert_fail@plt+0x4c98>
   17980:	ldr	r5, [r5, #12]
   17984:	mov	r1, #1
   17988:	mov	r0, r5
   1798c:	bl	15c9c <__assert_fail@plt+0x35c8>
   17990:	ldr	r3, [r4, #44]	; 0x2c
   17994:	tst	r3, #9
   17998:	moveq	r0, r5
   1799c:	beq	17a04 <__assert_fail@plt+0x5330>
   179a0:	movw	r4, #26016	; 0x65a0
   179a4:	movt	r4, #4
   179a8:	mov	r1, #1
   179ac:	mov	r2, #21
   179b0:	ldr	r3, [r4]
   179b4:	movw	r0, #456	; 0x1c8
   179b8:	movt	r0, #3
   179bc:	bl	12248 <fwrite@plt>
   179c0:	ldr	r0, [r4]
   179c4:	ldr	r1, [r6, #12]
   179c8:	mov	r2, #0
   179cc:	bl	168d0 <__assert_fail@plt+0x41fc>
   179d0:	ldr	r3, [r4]
   179d4:	mov	r2, #24
   179d8:	mov	r1, #1
   179dc:	movw	r0, #480	; 0x1e0
   179e0:	movt	r0, #3
   179e4:	bl	12248 <fwrite@plt>
   179e8:	ldr	r0, [r4]
   179ec:	ldr	r1, [r6, #12]
   179f0:	bl	14f84 <__assert_fail@plt+0x28b0>
   179f4:	ldr	r1, [r4]
   179f8:	mov	r0, #10
   179fc:	bl	12584 <fputc@plt>
   17a00:	ldr	r0, [r6, #12]
   17a04:	ldr	r2, [sp, #36]	; 0x24
   17a08:	ldr	r3, [fp]
   17a0c:	cmp	r2, r3
   17a10:	bne	17bcc <__assert_fail@plt+0x54f8>
   17a14:	add	sp, sp, #44	; 0x2c
   17a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a1c:	mov	r2, #5
   17a20:	movw	r1, #248	; 0xf8
   17a24:	movt	r1, #3
   17a28:	bl	1217c <dcgettext@plt>
   17a2c:	mov	r1, r6
   17a30:	mov	r3, r7
   17a34:	mov	r2, r0
   17a38:	mov	r0, #1
   17a3c:	bl	122cc <error@plt>
   17a40:	b	1776c <__assert_fail@plt+0x5098>
   17a44:	ldr	r2, [r6, #16]
   17a48:	ldr	r3, [r2, #152]	; 0x98
   17a4c:	str	r2, [sp, #28]
   17a50:	mov	r0, r3
   17a54:	str	r3, [r6, #16]
   17a58:	bl	151e8 <__assert_fail@plt+0x2b14>
   17a5c:	ldr	r0, [sp, #28]
   17a60:	bl	120c8 <free@plt>
   17a64:	b	178a4 <__assert_fail@plt+0x51d0>
   17a68:	mov	r2, #5
   17a6c:	movw	r1, #328	; 0x148
   17a70:	movt	r1, #3
   17a74:	str	r3, [sp, #8]
   17a78:	bl	1217c <dcgettext@plt>
   17a7c:	ldr	r3, [sp, #8]
   17a80:	mov	r1, r3
   17a84:	mov	r3, r7
   17a88:	mov	r2, r0
   17a8c:	mov	r0, #1
   17a90:	bl	122cc <error@plt>
   17a94:	ldr	r0, [r5, #20]
   17a98:	b	1771c <__assert_fail@plt+0x5048>
   17a9c:	mov	r2, #5
   17aa0:	movw	r1, #272	; 0x110
   17aa4:	movt	r1, #3
   17aa8:	str	ip, [sp, #8]
   17aac:	bl	1217c <dcgettext@plt>
   17ab0:	ldr	ip, [sp, #8]
   17ab4:	mov	r3, r7
   17ab8:	mov	r1, ip
   17abc:	mov	r2, r0
   17ac0:	mov	r0, #1
   17ac4:	bl	122cc <error@plt>
   17ac8:	ldr	r0, [r5, #20]
   17acc:	b	1771c <__assert_fail@plt+0x5048>
   17ad0:	movw	r6, #26016	; 0x65a0
   17ad4:	movt	r6, #4
   17ad8:	mov	r1, #1
   17adc:	mov	r2, #11
   17ae0:	ldr	r3, [r6]
   17ae4:	movw	r0, #444	; 0x1bc
   17ae8:	movt	r0, #3
   17aec:	bl	12248 <fwrite@plt>
   17af0:	ldr	r0, [r6]
   17af4:	ldr	r1, [r5, #12]
   17af8:	mov	r2, #0
   17afc:	bl	168d0 <__assert_fail@plt+0x41fc>
   17b00:	b	17950 <__assert_fail@plt+0x527c>
   17b04:	movw	r6, #26016	; 0x65a0
   17b08:	movt	r6, #4
   17b0c:	mov	r1, #1
   17b10:	mov	r2, #16
   17b14:	ldr	r3, [r6]
   17b18:	movw	r0, #364	; 0x16c
   17b1c:	movt	r0, #3
   17b20:	bl	12248 <fwrite@plt>
   17b24:	ldr	r0, [r6]
   17b28:	ldr	r1, [r5, #16]
   17b2c:	bl	14e94 <__assert_fail@plt+0x27c0>
   17b30:	b	178b8 <__assert_fail@plt+0x51e4>
   17b34:	mov	r0, r2
   17b38:	str	r3, [r6, #20]
   17b3c:	str	r3, [r6, #16]
   17b40:	str	r2, [sp, #28]
   17b44:	bl	120c8 <free@plt>
   17b48:	mov	r1, r4
   17b4c:	add	r2, sp, #20
   17b50:	ldr	r0, [sp, #12]
   17b54:	bl	1c2d8 <__assert_fail@plt+0x9c04>
   17b58:	ldr	r2, [r6, #20]
   17b5c:	movw	r3, #356	; 0x164
   17b60:	movt	r3, #3
   17b64:	mov	r0, r2
   17b68:	str	r3, [r2, #4]
   17b6c:	bl	151e8 <__assert_fail@plt+0x2b14>
   17b70:	ldr	r0, [r6, #16]
   17b74:	bl	151e8 <__assert_fail@plt+0x2b14>
   17b78:	b	178a4 <__assert_fail@plt+0x51d0>
   17b7c:	mov	r0, r6
   17b80:	mov	r2, #5
   17b84:	movw	r1, #416	; 0x1a0
   17b88:	movt	r1, #3
   17b8c:	bl	1217c <dcgettext@plt>
   17b90:	mov	r1, r6
   17b94:	mov	r2, r0
   17b98:	mov	r0, #1
   17b9c:	bl	122cc <error@plt>
   17ba0:	b	17944 <__assert_fail@plt+0x5270>
   17ba4:	mov	r2, #5
   17ba8:	movw	r1, #64068	; 0xfa44
   17bac:	mov	r0, #0
   17bb0:	movt	r1, #2
   17bb4:	bl	1217c <dcgettext@plt>
   17bb8:	mov	r1, #0
   17bbc:	mov	r2, r0
   17bc0:	mov	r0, #1
   17bc4:	bl	122cc <error@plt>
   17bc8:	b	17944 <__assert_fail@plt+0x5270>
   17bcc:	bl	12188 <__stack_chk_fail@plt>
   17bd0:	movw	r0, #184	; 0xb8
   17bd4:	movw	r1, #63824	; 0xf950
   17bd8:	movt	r0, #3
   17bdc:	movt	r1, #2
   17be0:	mov	r2, #1280	; 0x500
   17be4:	ldr	r3, [pc, #56]	; 17c24 <__assert_fail@plt+0x5550>
   17be8:	bl	126d4 <__assert_fail@plt>
   17bec:	movw	r0, #156	; 0x9c
   17bf0:	movw	r1, #63824	; 0xf950
   17bf4:	movt	r0, #3
   17bf8:	movt	r1, #2
   17bfc:	movw	r2, #1279	; 0x4ff
   17c00:	ldr	r3, [pc, #28]	; 17c24 <__assert_fail@plt+0x5550>
   17c04:	bl	126d4 <__assert_fail@plt>
   17c08:	movw	r0, #128	; 0x80
   17c0c:	movw	r1, #63824	; 0xf950
   17c10:	movt	r0, #3
   17c14:	movt	r1, #2
   17c18:	movw	r2, #1278	; 0x4fe
   17c1c:	ldr	r3, [pc]	; 17c24 <__assert_fail@plt+0x5550>
   17c20:	bl	126d4 <__assert_fail@plt>
   17c24:	andeq	pc, r2, r8, lsl r9	; <UNPREDICTABLE>
   17c28:	push	{r3, r4, r5, lr}
   17c2c:	mov	r4, r0
   17c30:	mov	r5, r1
   17c34:	ldr	r0, [r4, #156]	; 0x9c
   17c38:	mov	r1, r5
   17c3c:	cmp	r0, #0
   17c40:	beq	17c48 <__assert_fail@plt+0x5574>
   17c44:	bl	17c28 <__assert_fail@plt+0x5554>
   17c48:	mov	r0, r4
   17c4c:	blx	r5
   17c50:	ldr	r4, [r4, #160]	; 0xa0
   17c54:	cmp	r4, #0
   17c58:	bne	17c34 <__assert_fail@plt+0x5560>
   17c5c:	pop	{r3, r4, r5, pc}
   17c60:	ldr	r3, [r0]
   17c64:	movw	r2, #17056	; 0x42a0
   17c68:	movt	r2, #1
   17c6c:	cmp	r3, r2
   17c70:	beq	17ca4 <__assert_fail@plt+0x55d0>
   17c74:	movw	r2, #42392	; 0xa598
   17c78:	movt	r2, #1
   17c7c:	cmp	r3, r2
   17c80:	beq	17ca4 <__assert_fail@plt+0x55d0>
   17c84:	movw	r2, #16972	; 0x424c
   17c88:	movt	r2, #1
   17c8c:	cmp	r3, r2
   17c90:	beq	17ca4 <__assert_fail@plt+0x55d0>
   17c94:	movw	r2, #17108	; 0x42d4
   17c98:	movt	r2, #1
   17c9c:	cmp	r3, r2
   17ca0:	bxne	lr
   17ca4:	mov	r3, #0
   17ca8:	str	r3, [r0, #44]	; 0x2c
   17cac:	bx	lr
   17cb0:	push	{r3, r4, r5, r6, r7, lr}
   17cb4:	subs	r5, r2, #0
   17cb8:	movw	r4, #29328	; 0x7290
   17cbc:	mov	r7, r0
   17cc0:	movt	r4, #4
   17cc4:	mov	r6, r1
   17cc8:	beq	17cd8 <__assert_fail@plt+0x5604>
   17ccc:	ldrb	r2, [r4, #40]	; 0x28
   17cd0:	cmp	r2, #0
   17cd4:	bne	17d28 <__assert_fail@plt+0x5654>
   17cd8:	movw	ip, #29372	; 0x72bc
   17cdc:	movt	ip, #4
   17ce0:	mov	r2, r3
   17ce4:	mov	r0, #0
   17ce8:	ldr	r1, [ip, #72]	; 0x48
   17cec:	bl	284fc <__assert_fail@plt+0x15e28>
   17cf0:	mov	r1, r6
   17cf4:	movw	r2, #15064	; 0x3ad8
   17cf8:	movt	r2, #3
   17cfc:	mov	r3, r0
   17d00:	mov	r0, r7
   17d04:	bl	122cc <error@plt>
   17d08:	ldr	r2, [r4, #28]
   17d0c:	movw	r3, #29328	; 0x7290
   17d10:	movt	r3, #4
   17d14:	cmp	r2, #0
   17d18:	movle	r2, #1
   17d1c:	strle	r2, [r3, #28]
   17d20:	cmp	r5, #0
   17d24:	popeq	{r3, r4, r5, r6, r7, pc}
   17d28:	mov	r3, #1
   17d2c:	strb	r3, [r4, #40]	; 0x28
   17d30:	pop	{r3, r4, r5, r6, r7, pc}
   17d34:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17d38:	subs	r4, r0, #0
   17d3c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   17d40:	movw	r5, #29328	; 0x7290
   17d44:	movt	r5, #4
   17d48:	ldrb	r3, [r5, #32]
   17d4c:	cmp	r3, #0
   17d50:	beq	17e04 <__assert_fail@plt+0x5730>
   17d54:	movw	r6, #16948	; 0x4234
   17d58:	movw	r8, #26044	; 0x65bc
   17d5c:	movw	r7, #18468	; 0x4824
   17d60:	movt	r6, #1
   17d64:	movt	r8, #4
   17d68:	movt	r7, #1
   17d6c:	mov	r9, #0
   17d70:	b	17d94 <__assert_fail@plt+0x56c0>
   17d74:	cmp	r3, r7
   17d78:	beq	17da8 <__assert_fail@plt+0x56d4>
   17d7c:	ldr	r4, [r4, #160]	; 0xa0
   17d80:	cmp	r4, #0
   17d84:	beq	17e00 <__assert_fail@plt+0x572c>
   17d88:	ldrb	r3, [r5, #32]
   17d8c:	cmp	r3, #0
   17d90:	beq	17e04 <__assert_fail@plt+0x5730>
   17d94:	ldr	r0, [r4, #156]	; 0x9c
   17d98:	bl	17d34 <__assert_fail@plt+0x5660>
   17d9c:	ldr	r3, [r4]
   17da0:	cmp	r3, r6
   17da4:	bne	17d74 <__assert_fail@plt+0x56a0>
   17da8:	ldrb	r3, [r4, #40]	; 0x28
   17dac:	cmp	r3, #0
   17db0:	beq	17d7c <__assert_fail@plt+0x56a8>
   17db4:	ldr	r3, [r4, #116]	; 0x74
   17db8:	cmp	r3, #0
   17dbc:	beq	17d7c <__assert_fail@plt+0x56a8>
   17dc0:	movw	r1, #32292	; 0x7e24
   17dc4:	ldr	r0, [r4, #144]	; 0x90
   17dc8:	movt	r1, #1
   17dcc:	add	r2, r4, #40	; 0x28
   17dd0:	bl	20370 <__assert_fail@plt+0xdc9c>
   17dd4:	ldr	r0, [r4, #144]	; 0x90
   17dd8:	ldr	r3, [r8]
   17ddc:	cmp	r0, r3
   17de0:	beq	17d7c <__assert_fail@plt+0x56a8>
   17de4:	bl	2886c <__assert_fail@plt+0x16198>
   17de8:	ldr	r0, [r4, #144]	; 0x90
   17dec:	bl	120c8 <free@plt>
   17df0:	str	r9, [r4, #144]	; 0x90
   17df4:	ldr	r4, [r4, #160]	; 0xa0
   17df8:	cmp	r4, #0
   17dfc:	bne	17d88 <__assert_fail@plt+0x56b4>
   17e00:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17e04:	movw	r0, #940	; 0x3ac
   17e08:	movw	r1, #968	; 0x3c8
   17e0c:	movw	r3, #732	; 0x2dc
   17e10:	movt	r0, #3
   17e14:	movt	r1, #3
   17e18:	mov	r2, #376	; 0x178
   17e1c:	movt	r3, #3
   17e20:	bl	126d4 <__assert_fail@plt>
   17e24:	push	{r3, lr}
   17e28:	mov	r1, r0
   17e2c:	add	r0, r0, #4
   17e30:	add	r1, r1, #48	; 0x30
   17e34:	bl	1faf0 <__assert_fail@plt+0xd41c>
   17e38:	mov	r0, #0
   17e3c:	pop	{r3, pc}
   17e40:	push	{r3, r4, r5, lr}
   17e44:	subs	r4, r0, #0
   17e48:	popeq	{r3, r4, r5, pc}
   17e4c:	movw	r5, #16944	; 0x4230
   17e50:	movt	r5, #1
   17e54:	b	17e64 <__assert_fail@plt+0x5790>
   17e58:	ldr	r4, [r4, #160]	; 0xa0
   17e5c:	cmp	r4, #0
   17e60:	beq	17ea8 <__assert_fail@plt+0x57d4>
   17e64:	ldr	r0, [r4, #156]	; 0x9c
   17e68:	bl	17e40 <__assert_fail@plt+0x576c>
   17e6c:	ldr	r3, [r4]
   17e70:	cmp	r3, r5
   17e74:	bne	17e58 <__assert_fail@plt+0x5784>
   17e78:	ldrb	r3, [r4, #40]	; 0x28
   17e7c:	cmp	r3, #0
   17e80:	beq	17e58 <__assert_fail@plt+0x5784>
   17e84:	ldr	r3, [r4, #116]	; 0x74
   17e88:	cmp	r3, #0
   17e8c:	beq	17e58 <__assert_fail@plt+0x5784>
   17e90:	add	r0, r4, #44	; 0x2c
   17e94:	add	r1, r4, #88	; 0x58
   17e98:	bl	1faf0 <__assert_fail@plt+0xd41c>
   17e9c:	ldr	r4, [r4, #160]	; 0xa0
   17ea0:	cmp	r4, #0
   17ea4:	bne	17e64 <__assert_fail@plt+0x5790>
   17ea8:	pop	{r3, r4, r5, pc}
   17eac:	push	{r4, r5, r6, lr}
   17eb0:	mov	r3, r0
   17eb4:	sub	sp, sp, #8
   17eb8:	mov	r5, r0
   17ebc:	mov	r1, #1
   17ec0:	movw	r0, #976	; 0x3d0
   17ec4:	mov	r2, #24
   17ec8:	movt	r0, #3
   17ecc:	bl	12248 <fwrite@plt>
   17ed0:	ldr	r4, [pc, #52]	; 17f0c <__assert_fail@plt+0x5838>
   17ed4:	add	r6, r4, #84	; 0x54
   17ed8:	ldr	ip, [r4, #8]
   17edc:	movw	r2, #1004	; 0x3ec
   17ee0:	ldr	r3, [r4]
   17ee4:	movt	r2, #3
   17ee8:	add	r4, r4, #12
   17eec:	mov	r0, r5
   17ef0:	mov	r1, #1
   17ef4:	str	ip, [sp]
   17ef8:	bl	124d0 <__fprintf_chk@plt>
   17efc:	cmp	r4, r6
   17f00:	bne	17ed8 <__assert_fail@plt+0x5804>
   17f04:	add	sp, sp, #8
   17f08:	pop	{r4, r5, r6, pc}
   17f0c:	strdeq	r0, [r3], -ip
   17f10:	movw	ip, #29372	; 0x72bc
   17f14:	movt	ip, #4
   17f18:	push	{r4, r5, lr}
   17f1c:	mov	r4, r0
   17f20:	ldr	r3, [ip, #44]	; 0x2c
   17f24:	sub	sp, sp, #12
   17f28:	mov	r5, r1
   17f2c:	tst	r3, #2
   17f30:	bne	17f60 <__assert_fail@plt+0x588c>
   17f34:	movw	ip, #29328	; 0x7290
   17f38:	movt	ip, #4
   17f3c:	mov	r2, r4
   17f40:	mov	r3, r5
   17f44:	ldr	r1, [ip, #16]
   17f48:	mov	r0, #3
   17f4c:	mov	ip, #256	; 0x100
   17f50:	str	ip, [sp]
   17f54:	bl	121f4 <__fxstatat64@plt>
   17f58:	add	sp, sp, #12
   17f5c:	pop	{r4, r5, pc}
   17f60:	movw	r3, #26016	; 0x65a0
   17f64:	movt	r3, #4
   17f68:	movw	r2, #1016	; 0x3f8
   17f6c:	mov	r1, #1
   17f70:	ldr	r0, [r3]
   17f74:	movt	r2, #3
   17f78:	mov	r3, r4
   17f7c:	bl	124d0 <__fprintf_chk@plt>
   17f80:	b	17f34 <__assert_fail@plt+0x5860>
   17f84:	push	{r3, r4, r5, lr}
   17f88:	mov	r4, r1
   17f8c:	mov	r1, r2
   17f90:	mov	r5, r0
   17f94:	bl	167cc <__assert_fail@plt+0x40f8>
   17f98:	ldr	r1, [r5, #4]
   17f9c:	mov	r2, #0
   17fa0:	mov	ip, #1
   17fa4:	str	r4, [r0]
   17fa8:	stmib	r0, {r1, ip}
   17fac:	str	r2, [r0, #40]	; 0x28
   17fb0:	str	r2, [r0, #12]
   17fb4:	pop	{r3, r4, r5, pc}
   17fb8:	push	{r3, r4, r5, lr}
   17fbc:	mov	r5, r0
   17fc0:	ldr	r4, [r0, #12]
   17fc4:	cmp	r4, #0
   17fc8:	beq	17ff0 <__assert_fail@plt+0x591c>
   17fcc:	bl	167cc <__assert_fail@plt+0x40f8>
   17fd0:	ldr	r1, [r5, #4]
   17fd4:	mov	r2, #0
   17fd8:	mov	ip, #1
   17fdc:	str	r4, [r0]
   17fe0:	stmib	r0, {r1, ip}
   17fe4:	str	r2, [r0, #40]	; 0x28
   17fe8:	str	r2, [r0, #12]
   17fec:	pop	{r3, r4, r5, pc}
   17ff0:	movw	r0, #1076	; 0x434
   17ff4:	movw	r1, #968	; 0x3c8
   17ff8:	movt	r0, #3
   17ffc:	movt	r1, #3
   18000:	mov	r2, #134	; 0x86
   18004:	ldr	r3, [pc]	; 1800c <__assert_fail@plt+0x5938>
   18008:	bl	126d4 <__assert_fail@plt>
   1800c:	andeq	r0, r3, r0, asr r3
   18010:	mov	r1, #0
   18014:	b	17fb8 <__assert_fail@plt+0x58e4>
   18018:	cmp	r2, #0
   1801c:	push	{r4, r5, r6, r7, r8, lr}
   18020:	movw	r4, #27980	; 0x6d4c
   18024:	sub	sp, sp, #8
   18028:	movt	r4, #4
   1802c:	mov	r8, r1
   18030:	mov	r6, r0
   18034:	beq	18050 <__assert_fail@plt+0x597c>
   18038:	str	r2, [sp]
   1803c:	mov	r1, #1
   18040:	movw	r2, #1108	; 0x454
   18044:	ldr	r3, [r4]
   18048:	movt	r2, #3
   1804c:	bl	124d0 <__fprintf_chk@plt>
   18050:	mov	r2, #5
   18054:	movw	r1, #1156	; 0x484
   18058:	mov	r0, #0
   1805c:	movt	r1, #3
   18060:	bl	1217c <dcgettext@plt>
   18064:	ldr	r3, [r4]
   18068:	mov	r1, #1
   1806c:	mov	r5, #0
   18070:	mov	r4, #1
   18074:	ldr	r7, [pc, #172]	; 18128 <__assert_fail@plt+0x5a54>
   18078:	mov	r2, r0
   1807c:	mov	r0, r6
   18080:	bl	124d0 <__fprintf_chk@plt>
   18084:	b	18090 <__assert_fail@plt+0x59bc>
   18088:	add	r4, r4, #1
   1808c:	add	r5, r5, #12
   18090:	cmp	r4, #1
   18094:	beq	180f8 <__assert_fail@plt+0x5a24>
   18098:	ldr	ip, [r7, r5]
   1809c:	movw	r2, #1116	; 0x45c
   180a0:	movw	r3, #1124	; 0x464
   180a4:	movt	r2, #3
   180a8:	movt	r3, #3
   180ac:	mov	r0, r6
   180b0:	str	ip, [sp]
   180b4:	mov	r1, #1
   180b8:	bl	124d0 <__fprintf_chk@plt>
   180bc:	cmp	r4, #7
   180c0:	bne	18088 <__assert_fail@plt+0x59b4>
   180c4:	mov	r2, #5
   180c8:	movw	r1, #1128	; 0x468
   180cc:	mov	r0, #0
   180d0:	movt	r1, #3
   180d4:	bl	1217c <dcgettext@plt>
   180d8:	mov	r1, #1
   180dc:	mov	r2, r0
   180e0:	mov	r0, r6
   180e4:	bl	124d0 <__fprintf_chk@plt>
   180e8:	cmp	r8, #0
   180ec:	bne	18120 <__assert_fail@plt+0x5a4c>
   180f0:	add	sp, sp, #8
   180f4:	pop	{r4, r5, r6, r7, r8, pc}
   180f8:	ldr	r1, [r7, r5]
   180fc:	movw	r2, #1116	; 0x45c
   18100:	movw	r3, #15168	; 0x3b40
   18104:	movt	r2, #3
   18108:	movt	r3, #3
   1810c:	mov	r0, r6
   18110:	str	r1, [sp]
   18114:	mov	r1, r4
   18118:	bl	124d0 <__fprintf_chk@plt>
   1811c:	b	18088 <__assert_fail@plt+0x59b4>
   18120:	mov	r0, r8
   18124:	bl	123b0 <exit@plt>
   18128:	strdeq	r0, [r3], -ip
   1812c:	bx	lr
   18130:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   18134:	movw	r4, #29328	; 0x7290
   18138:	movt	r4, #4
   1813c:	mov	r8, r0
   18140:	mov	r7, r1
   18144:	mov	r5, r2
   18148:	ldrb	ip, [r4, #4]
   1814c:	cmp	ip, #0
   18150:	ldrne	r0, [r2, #16]
   18154:	beq	18170 <__assert_fail@plt+0x5a9c>
   18158:	mov	r3, #1
   1815c:	str	r0, [r4, #8]
   18160:	strb	r3, [r4, #4]
   18164:	mov	r0, #0
   18168:	strb	r3, [r4, #5]
   1816c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18170:	movw	r6, #29372	; 0x72bc
   18174:	movt	r6, #4
   18178:	mov	r0, r1
   1817c:	mov	r1, r2
   18180:	ldr	r3, [r6, #52]	; 0x34
   18184:	blx	r3
   18188:	cmp	r0, #0
   1818c:	beq	181c4 <__assert_fail@plt+0x5af0>
   18190:	ldrb	r3, [r6, #15]
   18194:	cmp	r3, #0
   18198:	beq	1822c <__assert_fail@plt+0x5b58>
   1819c:	bl	12434 <__errno_location@plt>
   181a0:	ldr	r1, [r0]
   181a4:	cmp	r1, #2
   181a8:	beq	18224 <__assert_fail@plt+0x5b50>
   181ac:	mov	r3, r8
   181b0:	mov	r0, #0
   181b4:	mov	r2, #1
   181b8:	bl	17cb0 <__assert_fail@plt+0x55dc>
   181bc:	mvn	r0, #0
   181c0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   181c4:	ldr	r8, [r5, #16]
   181c8:	cmp	r8, #0
   181cc:	movne	r0, r8
   181d0:	bne	18158 <__assert_fail@plt+0x5a84>
   181d4:	mov	r2, #5
   181d8:	movw	r1, #62080	; 0xf280
   181dc:	movt	r1, #2
   181e0:	bl	1217c <dcgettext@plt>
   181e4:	ldr	r1, [r6, #72]	; 0x48
   181e8:	mov	r2, r7
   181ec:	mov	r9, r0
   181f0:	mov	r0, r8
   181f4:	bl	284fc <__assert_fail@plt+0x15e28>
   181f8:	mov	r1, r8
   181fc:	mov	r2, r9
   18200:	mov	r3, r0
   18204:	mov	r0, r8
   18208:	bl	122cc <error@plt>
   1820c:	ldr	r3, [r4, #28]
   18210:	ldr	r0, [r5, #16]
   18214:	cmp	r3, #0
   18218:	movle	r3, #1
   1821c:	strle	r3, [r4, #28]
   18220:	b	18158 <__assert_fail@plt+0x5a84>
   18224:	mvn	r0, #0
   18228:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1822c:	bl	12434 <__errno_location@plt>
   18230:	ldr	r1, [r0]
   18234:	b	181ac <__assert_fail@plt+0x5ad8>
   18238:	push	{r3, r4, r5, r6, r7, lr}
   1823c:	mov	r6, r2
   18240:	ldrb	r3, [r2, #18]
   18244:	mov	r7, r1
   18248:	cmp	r3, #0
   1824c:	movwne	r3, #29328	; 0x7290
   18250:	movtne	r3, #4
   18254:	bne	18278 <__assert_fail@plt+0x5ba4>
   18258:	ldrb	r3, [r2, #19]
   1825c:	cmp	r3, #0
   18260:	beq	182c0 <__assert_fail@plt+0x5bec>
   18264:	movw	r3, #29328	; 0x7290
   18268:	movt	r3, #4
   1826c:	ldrb	r2, [r3, #5]
   18270:	cmp	r2, #0
   18274:	bne	182c0 <__assert_fail@plt+0x5bec>
   18278:	ldr	r1, [r3, #12]
   1827c:	mov	r2, r7
   18280:	bl	18130 <__assert_fail@plt+0x5a5c>
   18284:	movw	r4, #29328	; 0x7290
   18288:	movt	r4, #4
   1828c:	cmp	r0, #0
   18290:	bne	18344 <__assert_fail@plt+0x5c70>
   18294:	ldrb	r3, [r6, #19]
   18298:	cmp	r3, #0
   1829c:	bne	18300 <__assert_fail@plt+0x5c2c>
   182a0:	ldrb	r3, [r6, #20]
   182a4:	cmp	r3, #0
   182a8:	beq	182b8 <__assert_fail@plt+0x5be4>
   182ac:	ldrd	r2, [r7, #96]	; 0x60
   182b0:	orrs	r1, r2, r3
   182b4:	beq	18328 <__assert_fail@plt+0x5c54>
   182b8:	mov	r0, #0
   182bc:	pop	{r3, r4, r5, r6, r7, pc}
   182c0:	ldrb	r3, [r6, #20]
   182c4:	cmp	r3, #0
   182c8:	beq	182b8 <__assert_fail@plt+0x5be4>
   182cc:	ldrd	r4, [r7, #96]	; 0x60
   182d0:	movw	r3, #29328	; 0x7290
   182d4:	movt	r3, #4
   182d8:	orrs	r1, r4, r5
   182dc:	beq	18278 <__assert_fail@plt+0x5ba4>
   182e0:	ldrb	r2, [r3, #5]
   182e4:	cmp	r2, #0
   182e8:	beq	18278 <__assert_fail@plt+0x5ba4>
   182ec:	ldr	r2, [r7, #16]
   182f0:	and	r2, r2, #61440	; 0xf000
   182f4:	cmp	r2, #16384	; 0x4000
   182f8:	bne	182b8 <__assert_fail@plt+0x5be4>
   182fc:	b	18278 <__assert_fail@plt+0x5ba4>
   18300:	ldrb	r3, [r4, #5]
   18304:	cmp	r3, #0
   18308:	bne	182a0 <__assert_fail@plt+0x5bcc>
   1830c:	movw	r0, #62784	; 0xf540
   18310:	movw	r1, #968	; 0x3c8
   18314:	movt	r0, #2
   18318:	movt	r1, #3
   1831c:	movw	r2, #290	; 0x122
   18320:	ldr	r3, [pc, #36]	; 1834c <__assert_fail@plt+0x5c78>
   18324:	bl	126d4 <__assert_fail@plt>
   18328:	movw	r0, #1196	; 0x4ac
   1832c:	movw	r1, #968	; 0x3c8
   18330:	movt	r0, #3
   18334:	movt	r1, #3
   18338:	movw	r2, #294	; 0x126
   1833c:	ldr	r3, [pc, #8]	; 1834c <__assert_fail@plt+0x5c78>
   18340:	bl	126d4 <__assert_fail@plt>
   18344:	mvn	r0, #0
   18348:	pop	{r3, r4, r5, r6, r7, pc}
   1834c:	andeq	r0, r3, r0, ror #6
   18350:	push	{r4, lr}
   18354:	vpush	{d8}
   18358:	movw	r4, #26008	; 0x6598
   1835c:	movt	r4, #4
   18360:	sub	sp, sp, #400	; 0x190
   18364:	add	r0, sp, #4
   18368:	ldr	r3, [r4]
   1836c:	str	r3, [sp, #396]	; 0x18c
   18370:	bl	12164 <uname@plt>
   18374:	subs	r1, r0, #0
   18378:	bne	183d4 <__assert_fail@plt+0x5d00>
   1837c:	add	r0, sp, #134	; 0x86
   18380:	bl	124ac <strtod@plt>
   18384:	movw	r0, #1208	; 0x4b8
   18388:	add	r1, sp, #4
   1838c:	movt	r0, #3
   18390:	vcvt.f32.f64	s16, d0
   18394:	bl	1205c <strcmp@plt>
   18398:	cmp	r0, #0
   1839c:	beq	183f4 <__assert_fail@plt+0x5d20>
   183a0:	add	r1, sp, #4
   183a4:	movw	r0, #1216	; 0x4c0
   183a8:	movt	r0, #3
   183ac:	bl	1205c <strcmp@plt>
   183b0:	cmp	r0, #0
   183b4:	bne	183d4 <__assert_fail@plt+0x5d00>
   183b8:	vcvt.f64.f32	d0, s16
   183bc:	vldr	d7, [pc, #84]	; 18418 <__assert_fail@plt+0x5d44>
   183c0:	vcmpe.f64	d0, d7
   183c4:	vmrs	APSR_nzcv, fpscr
   183c8:	movlt	r0, #0
   183cc:	movge	r0, #1
   183d0:	b	183d8 <__assert_fail@plt+0x5d04>
   183d4:	mov	r0, #1
   183d8:	ldr	r2, [sp, #396]	; 0x18c
   183dc:	ldr	r3, [r4]
   183e0:	cmp	r2, r3
   183e4:	bne	18410 <__assert_fail@plt+0x5d3c>
   183e8:	add	sp, sp, #400	; 0x190
   183ec:	vpop	{d8}
   183f0:	pop	{r4, pc}
   183f4:	vcvt.f64.f32	d0, s16
   183f8:	vldr	d7, [pc, #32]	; 18420 <__assert_fail@plt+0x5d4c>
   183fc:	vcmpe.f64	d0, d7
   18400:	vmrs	APSR_nzcv, fpscr
   18404:	movlt	r0, #0
   18408:	movge	r0, #1
   1840c:	b	183d8 <__assert_fail@plt+0x5d04>
   18410:	bl	12188 <__stack_chk_fail@plt>
   18414:	nop	{0}
   18418:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1841c:	andmi	ip, r8, ip, asr #25
   18420:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   18424:	mulmi	r1, r9, r9
   18428:	push	{r4, lr}
   1842c:	movw	r4, #29328	; 0x7290
   18430:	movt	r4, #4
   18434:	ldrb	r3, [r4, #32]
   18438:	cmp	r3, #0
   1843c:	popeq	{r4, pc}
   18440:	bl	163c8 <__assert_fail@plt+0x3cf4>
   18444:	bl	17d34 <__assert_fail@plt+0x5660>
   18448:	mov	r3, #0
   1844c:	strb	r3, [r4, #32]
   18450:	pop	{r4, pc}
   18454:	push	{r4, lr}
   18458:	mov	r0, #8
   1845c:	bl	28e14 <__assert_fail@plt+0x16740>
   18460:	movw	r3, #26044	; 0x65bc
   18464:	movt	r3, #4
   18468:	str	r0, [r3]
   1846c:	bl	287f4 <__assert_fail@plt+0x16120>
   18470:	cmp	r0, #0
   18474:	popeq	{r4, pc}
   18478:	bl	12434 <__errno_location@plt>
   1847c:	mov	r2, #5
   18480:	movw	r1, #1224	; 0x4c8
   18484:	movt	r1, #3
   18488:	ldr	r4, [r0]
   1848c:	mov	r0, #0
   18490:	bl	1217c <dcgettext@plt>
   18494:	mov	r1, r4
   18498:	pop	{r4, lr}
   1849c:	mov	r2, r0
   184a0:	mov	r0, #1
   184a4:	b	122cc <error@plt>
   184a8:	push	{r3, lr}
   184ac:	movw	r0, #1268	; 0x4f4
   184b0:	movt	r0, #3
   184b4:	bl	12308 <getenv@plt>
   184b8:	adds	r0, r0, #0
   184bc:	movne	r0, #1
   184c0:	pop	{r3, pc}
   184c4:	push	{r4, r5, r6, lr}
   184c8:	bl	163c8 <__assert_fail@plt+0x3cf4>
   184cc:	subs	r4, r0, #0
   184d0:	beq	18584 <__assert_fail@plt+0x5eb0>
   184d4:	movw	r1, #32320	; 0x7e40
   184d8:	movt	r1, #1
   184dc:	bl	17c28 <__assert_fail@plt+0x5554>
   184e0:	bl	18428 <__assert_fail@plt+0x5d54>
   184e4:	movw	r3, #29328	; 0x7290
   184e8:	movt	r3, #4
   184ec:	ldr	r0, [r3, #36]	; 0x24
   184f0:	bl	192b0 <__assert_fail@plt+0x6bdc>
   184f4:	movw	r1, #31840	; 0x7c60
   184f8:	mov	r0, r4
   184fc:	movt	r1, #1
   18500:	bl	17c28 <__assert_fail@plt+0x5554>
   18504:	movw	r4, #26044	; 0x65bc
   18508:	movt	r4, #4
   1850c:	ldr	r0, [r4]
   18510:	bl	28850 <__assert_fail@plt+0x1617c>
   18514:	subs	r5, r0, #0
   18518:	bne	18598 <__assert_fail@plt+0x5ec4>
   1851c:	ldr	r0, [r4]
   18520:	bl	2886c <__assert_fail@plt+0x16198>
   18524:	ldr	r0, [r4]
   18528:	bl	120c8 <free@plt>
   1852c:	movw	r0, #1268	; 0x4f4
   18530:	movt	r0, #3
   18534:	str	r5, [r4]
   18538:	bl	12308 <getenv@plt>
   1853c:	cmp	r0, #0
   18540:	beq	1854c <__assert_fail@plt+0x5e78>
   18544:	bl	209dc <__assert_fail@plt+0xe308>
   18548:	bl	209b8 <__assert_fail@plt+0xe2e4>
   1854c:	movw	r3, #26024	; 0x65a8
   18550:	movt	r3, #4
   18554:	ldr	r0, [r3]
   18558:	bl	2a1c0 <__assert_fail@plt+0x17aec>
   1855c:	cmn	r0, #1
   18560:	popne	{r4, r5, r6, pc}
   18564:	bl	12434 <__errno_location@plt>
   18568:	movw	r3, #1340	; 0x53c
   1856c:	pop	{r4, r5, r6, lr}
   18570:	movt	r3, #3
   18574:	ldr	r1, [r0]
   18578:	mov	r0, #0
   1857c:	mov	r2, r0
   18580:	b	17cb0 <__assert_fail@plt+0x55dc>
   18584:	movw	r3, #29328	; 0x7290
   18588:	movt	r3, #4
   1858c:	ldr	r0, [r3, #36]	; 0x24
   18590:	bl	192b0 <__assert_fail@plt+0x6bdc>
   18594:	b	18504 <__assert_fail@plt+0x5e30>
   18598:	bl	12434 <__errno_location@plt>
   1859c:	mov	r2, #5
   185a0:	movw	r1, #1296	; 0x510
   185a4:	movt	r1, #3
   185a8:	ldr	r4, [r0]
   185ac:	mov	r0, #0
   185b0:	bl	1217c <dcgettext@plt>
   185b4:	mov	r1, r4
   185b8:	mov	r2, r0
   185bc:	mov	r0, #0
   185c0:	bl	122cc <error@plt>
   185c4:	mov	r0, #1
   185c8:	bl	120f8 <_exit@plt>
   185cc:	movw	ip, #29328	; 0x7290
   185d0:	movt	ip, #4
   185d4:	push	{r4, r5, r6, lr}
   185d8:	mov	r4, r1
   185dc:	ldr	r1, [ip, #16]
   185e0:	sub	sp, sp, #8
   185e4:	mov	r5, r0
   185e8:	cmn	r1, #100	; 0x64
   185ec:	beq	185f8 <__assert_fail@plt+0x5f24>
   185f0:	cmp	r1, #0
   185f4:	blt	18674 <__assert_fail@plt+0x5fa0>
   185f8:	ldr	ip, [ip]
   185fc:	cmp	ip, #0
   18600:	beq	1862c <__assert_fail@plt+0x5f58>
   18604:	mov	ip, #256	; 0x100
   18608:	mov	r2, r5
   1860c:	mov	r3, r4
   18610:	mov	r0, #3
   18614:	str	ip, [sp]
   18618:	bl	121f4 <__fxstatat64@plt>
   1861c:	mov	r6, r0
   18620:	mov	r0, r6
   18624:	add	sp, sp, #8
   18628:	pop	{r4, r5, r6, pc}
   1862c:	str	ip, [sp]
   18630:	mov	r0, #3
   18634:	mov	r2, r5
   18638:	mov	r3, r4
   1863c:	bl	121f4 <__fxstatat64@plt>
   18640:	subs	r6, r0, #0
   18644:	beq	18620 <__assert_fail@plt+0x5f4c>
   18648:	bl	12434 <__errno_location@plt>
   1864c:	ldr	r3, [r0]
   18650:	cmp	r3, #2
   18654:	beq	18660 <__assert_fail@plt+0x5f8c>
   18658:	cmp	r3, #20
   1865c:	bne	18620 <__assert_fail@plt+0x5f4c>
   18660:	mov	r0, r5
   18664:	mov	r1, r4
   18668:	add	sp, sp, #8
   1866c:	pop	{r4, r5, r6, lr}
   18670:	b	17f10 <__assert_fail@plt+0x583c>
   18674:	movw	r0, #1356	; 0x54c
   18678:	movw	r1, #968	; 0x3c8
   1867c:	movt	r0, #3
   18680:	movt	r1, #3
   18684:	movw	r2, #593	; 0x251
   18688:	ldr	r3, [pc]	; 18690 <__assert_fail@plt+0x5fbc>
   1868c:	bl	126d4 <__assert_fail@plt>
   18690:	andeq	r0, r3, ip, ror #6
   18694:	movw	ip, #29328	; 0x7290
   18698:	movt	ip, #4
   1869c:	push	{r4, r5, r6, lr}
   186a0:	mov	r4, r1
   186a4:	ldr	r1, [ip, #16]
   186a8:	sub	sp, sp, #8
   186ac:	mov	r5, r0
   186b0:	cmn	r1, #100	; 0x64
   186b4:	beq	186c0 <__assert_fail@plt+0x5fec>
   186b8:	cmp	r1, #0
   186bc:	blt	18718 <__assert_fail@plt+0x6044>
   186c0:	mov	r3, #0
   186c4:	mov	r0, #3
   186c8:	str	r3, [sp]
   186cc:	mov	r2, r5
   186d0:	mov	r3, r4
   186d4:	bl	121f4 <__fxstatat64@plt>
   186d8:	subs	r6, r0, #0
   186dc:	bne	186ec <__assert_fail@plt+0x6018>
   186e0:	mov	r0, r6
   186e4:	add	sp, sp, #8
   186e8:	pop	{r4, r5, r6, pc}
   186ec:	bl	12434 <__errno_location@plt>
   186f0:	ldr	r3, [r0]
   186f4:	cmp	r3, #2
   186f8:	beq	18704 <__assert_fail@plt+0x6030>
   186fc:	cmp	r3, #20
   18700:	bne	186e0 <__assert_fail@plt+0x600c>
   18704:	mov	r0, r5
   18708:	mov	r1, r4
   1870c:	add	sp, sp, #8
   18710:	pop	{r4, r5, r6, lr}
   18714:	b	17f10 <__assert_fail@plt+0x583c>
   18718:	movw	r0, #1356	; 0x54c
   1871c:	movw	r1, #968	; 0x3c8
   18720:	movt	r0, #3
   18724:	movt	r1, #3
   18728:	mov	r2, #624	; 0x270
   1872c:	ldr	r3, [pc]	; 18734 <__assert_fail@plt+0x6060>
   18730:	bl	126d4 <__assert_fail@plt>
   18734:	andeq	r0, r3, ip, ror r3
   18738:	movw	ip, #29328	; 0x7290
   1873c:	movt	ip, #4
   18740:	mov	r3, r1
   18744:	ldr	r1, [ip, #16]
   18748:	push	{lr}		; (str lr, [sp, #-4]!)
   1874c:	adds	lr, r1, #100	; 0x64
   18750:	sub	sp, sp, #12
   18754:	movne	lr, #1
   18758:	ands	lr, lr, r1, lsr #31
   1875c:	bne	1877c <__assert_fail@plt+0x60a8>
   18760:	mov	r2, r0
   18764:	mov	ip, #256	; 0x100
   18768:	mov	r0, #3
   1876c:	str	ip, [sp]
   18770:	bl	121f4 <__fxstatat64@plt>
   18774:	add	sp, sp, #12
   18778:	pop	{pc}		; (ldr pc, [sp], #4)
   1877c:	movw	r0, #1380	; 0x564
   18780:	movw	r1, #968	; 0x3c8
   18784:	movt	r0, #3
   18788:	movt	r1, #3
   1878c:	movw	r2, #641	; 0x281
   18790:	ldr	r3, [pc]	; 18798 <__assert_fail@plt+0x60c4>
   18794:	bl	126d4 <__assert_fail@plt>
   18798:	andeq	r0, r3, ip, lsl #7
   1879c:	movw	ip, #26096	; 0x65f0
   187a0:	movt	ip, #4
   187a4:	push	{r3, r4, r5, r6, r7, lr}
   187a8:	movw	r2, #26016	; 0x65a0
   187ac:	ldrd	r4, [ip]
   187b0:	movt	r2, #4
   187b4:	mov	r7, r0
   187b8:	mov	r6, r1
   187bc:	adds	r4, r4, #1
   187c0:	ldr	r0, [r2]
   187c4:	mov	r3, r7
   187c8:	movw	r2, #1432	; 0x598
   187cc:	mov	r1, #1
   187d0:	movt	r2, #3
   187d4:	adc	r5, r5, #0
   187d8:	strd	r4, [ip]
   187dc:	bl	124d0 <__fprintf_chk@plt>
   187e0:	movw	r2, #29372	; 0x72bc
   187e4:	movt	r2, #4
   187e8:	ldr	r3, [r2, #48]	; 0x30
   187ec:	cmp	r3, #1
   187f0:	beq	1883c <__assert_fail@plt+0x6168>
   187f4:	bcc	1882c <__assert_fail@plt+0x6158>
   187f8:	cmp	r3, #2
   187fc:	bne	18810 <__assert_fail@plt+0x613c>
   18800:	mov	r0, r7
   18804:	mov	r1, r6
   18808:	pop	{r3, r4, r5, r6, r7, lr}
   1880c:	b	185cc <__assert_fail@plt+0x5ef8>
   18810:	movw	r0, #62676	; 0xf4d4
   18814:	movw	r1, #968	; 0x3c8
   18818:	movt	r0, #2
   1881c:	movt	r1, #3
   18820:	movw	r2, #665	; 0x299
   18824:	ldr	r3, [pc, #32]	; 1884c <__assert_fail@plt+0x6178>
   18828:	bl	126d4 <__assert_fail@plt>
   1882c:	mov	r0, r7
   18830:	mov	r1, r6
   18834:	pop	{r3, r4, r5, r6, r7, lr}
   18838:	b	18738 <__assert_fail@plt+0x6064>
   1883c:	mov	r0, r7
   18840:	mov	r1, r6
   18844:	pop	{r3, r4, r5, r6, r7, lr}
   18848:	b	18694 <__assert_fail@plt+0x5fc0>
   1884c:	muleq	r3, ip, r3
   18850:	movw	r3, #29372	; 0x72bc
   18854:	movt	r3, #4
   18858:	ldr	r0, [r3, #48]	; 0x30
   1885c:	cmp	r0, #1
   18860:	bxeq	lr
   18864:	cmp	r0, #2
   18868:	bne	18884 <__assert_fail@plt+0x61b0>
   1886c:	movw	r3, #29328	; 0x7290
   18870:	movt	r3, #4
   18874:	ldr	r0, [r3]
   18878:	rsbs	r0, r0, #1
   1887c:	movcc	r0, #0
   18880:	bx	lr
   18884:	mov	r0, #0
   18888:	bx	lr
   1888c:	ldr	ip, [r0]
   18890:	push	{r4, r5, r6, lr}
   18894:	cmp	ip, #0
   18898:	mov	r6, r3
   1889c:	mov	r5, r0
   188a0:	ldrb	r3, [sp, #16]
   188a4:	beq	188d4 <__assert_fail@plt+0x6200>
   188a8:	and	r3, ip, #61440	; 0xf000
   188ac:	cmp	r3, #40960	; 0xa000
   188b0:	movwne	r4, #29328	; 0x7290
   188b4:	movtne	r4, #4
   188b8:	beq	18934 <__assert_fail@plt+0x6260>
   188bc:	mov	r3, #1
   188c0:	str	ip, [r4, #8]
   188c4:	str	ip, [r6, #16]
   188c8:	mov	r0, r3
   188cc:	strb	r3, [r4, #5]
   188d0:	pop	{r4, r5, r6, pc}
   188d4:	cmp	r3, #0
   188d8:	beq	188f8 <__assert_fail@plt+0x6224>
   188dc:	movw	r3, #29328	; 0x7290
   188e0:	movt	r3, #4
   188e4:	mov	r0, #1
   188e8:	strb	ip, [r3, #4]
   188ec:	strb	ip, [r3, #5]
   188f0:	str	ip, [r3, #8]
   188f4:	pop	{r4, r5, r6, pc}
   188f8:	mov	r0, r1
   188fc:	mov	r1, r2
   18900:	mov	r2, r6
   18904:	bl	18130 <__assert_fail@plt+0x5a5c>
   18908:	cmp	r0, #0
   1890c:	bne	1897c <__assert_fail@plt+0x62a8>
   18910:	ldr	r1, [r6, #16]
   18914:	movw	r3, #29328	; 0x7290
   18918:	movt	r3, #4
   1891c:	mov	r2, #1
   18920:	mov	r0, r2
   18924:	str	r1, [r5]
   18928:	str	r1, [r3, #8]
   1892c:	strb	r2, [r3, #5]
   18930:	pop	{r4, r5, r6, pc}
   18934:	movw	r3, #29372	; 0x72bc
   18938:	movt	r3, #4
   1893c:	ldr	r3, [r3, #48]	; 0x30
   18940:	cmp	r3, #1
   18944:	beq	18964 <__assert_fail@plt+0x6290>
   18948:	cmp	r3, #2
   1894c:	movw	r4, #29328	; 0x7290
   18950:	movt	r4, #4
   18954:	bne	188bc <__assert_fail@plt+0x61e8>
   18958:	ldr	r3, [r4]
   1895c:	cmp	r3, #0
   18960:	bne	188bc <__assert_fail@plt+0x61e8>
   18964:	mov	r0, r1
   18968:	mov	r1, r2
   1896c:	mov	r2, r6
   18970:	bl	18130 <__assert_fail@plt+0x5a5c>
   18974:	cmp	r0, #0
   18978:	beq	18984 <__assert_fail@plt+0x62b0>
   1897c:	mov	r0, #0
   18980:	pop	{r4, r5, r6, pc}
   18984:	ldr	r1, [r6, #16]
   18988:	movw	r3, #29328	; 0x7290
   1898c:	movt	r3, #4
   18990:	mov	r2, #1
   18994:	mov	r0, r2
   18998:	str	r1, [r3, #8]
   1899c:	str	r1, [r5]
   189a0:	strb	r2, [r3, #5]
   189a4:	pop	{r4, r5, r6, pc}
   189a8:	subs	r3, r0, #0
   189ac:	beq	189d8 <__assert_fail@plt+0x6304>
   189b0:	ldrb	r0, [r3, #17]
   189b4:	cmp	r0, #0
   189b8:	beq	189cc <__assert_fail@plt+0x62f8>
   189bc:	b	189e0 <__assert_fail@plt+0x630c>
   189c0:	ldrb	r2, [r3, #17]
   189c4:	cmp	r2, #0
   189c8:	bxne	lr
   189cc:	ldr	r3, [r3, #152]	; 0x98
   189d0:	cmp	r3, #0
   189d4:	bne	189c0 <__assert_fail@plt+0x62ec>
   189d8:	mov	r0, #1
   189dc:	bx	lr
   189e0:	mov	r0, #0
   189e4:	bx	lr
   189e8:	ldrb	r3, [r0]
   189ec:	sub	r3, r3, #33	; 0x21
   189f0:	cmp	r3, #12
   189f4:	ldrls	pc, [pc, r3, lsl #2]
   189f8:	b	18a4c <__assert_fail@plt+0x6378>
   189fc:	andeq	r8, r1, r4, asr sl
   18a00:	andeq	r8, r1, ip, asr #20
   18a04:	andeq	r8, r1, ip, asr #20
   18a08:	andeq	r8, r1, ip, asr #20
   18a0c:	andeq	r8, r1, ip, asr #20
   18a10:	andeq	r8, r1, ip, asr #20
   18a14:	andeq	r8, r1, ip, asr #20
   18a18:	andeq	r8, r1, r4, asr sl
   18a1c:	andeq	r8, r1, r0, asr #20
   18a20:	andeq	r8, r1, ip, asr #20
   18a24:	andeq	r8, r1, ip, asr #20
   18a28:	andeq	r8, r1, r0, asr #20
   18a2c:	andeq	r8, r1, r0, lsr sl
   18a30:	ldrb	r0, [r0, #1]
   18a34:	adds	r0, r0, #0
   18a38:	movne	r0, #1
   18a3c:	bx	lr
   18a40:	ldrb	r3, [r0, #1]
   18a44:	cmp	r3, #0
   18a48:	beq	18a64 <__assert_fail@plt+0x6390>
   18a4c:	mov	r0, #0
   18a50:	bx	lr
   18a54:	ldrb	r0, [r0, #1]
   18a58:	rsbs	r0, r0, #1
   18a5c:	movcc	r0, #0
   18a60:	bx	lr
   18a64:	eor	r0, r1, #1
   18a68:	bx	lr
   18a6c:	movw	r2, #26008	; 0x6598
   18a70:	movt	r2, #4
   18a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a78:	cmp	r0, #1
   18a7c:	ldr	r3, [r2]
   18a80:	sub	sp, sp, #36	; 0x24
   18a84:	mov	r9, r1
   18a88:	str	r2, [sp, #12]
   18a8c:	str	r0, [sp, #4]
   18a90:	str	r3, [sp, #28]
   18a94:	ble	18cd0 <__assert_fail@plt+0x65fc>
   18a98:	movw	r7, #29372	; 0x72bc
   18a9c:	mov	r6, #1
   18aa0:	movt	r7, #4
   18aa4:	b	18b30 <__assert_fail@plt+0x645c>
   18aa8:	movw	r0, #1452	; 0x5ac
   18aac:	mov	r1, r4
   18ab0:	movt	r0, #3
   18ab4:	mov	r2, #2
   18ab8:	bl	1265c <strncmp@plt>
   18abc:	subs	r8, r0, #0
   18ac0:	bne	18b7c <__assert_fail@plt+0x64a8>
   18ac4:	ldrb	r5, [r4, #2]
   18ac8:	cmp	r5, #0
   18acc:	movweq	r1, #1456	; 0x5b0
   18ad0:	moveq	r2, #5
   18ad4:	movteq	r1, #3
   18ad8:	beq	18b0c <__assert_fail@plt+0x6438>
   18adc:	bl	12398 <__ctype_b_loc@plt>
   18ae0:	lsl	r5, r5, #1
   18ae4:	ldr	r3, [r0]
   18ae8:	ldrh	r5, [r3, r5]
   18aec:	and	r5, r5, #2048	; 0x800
   18af0:	uxth	r5, r5
   18af4:	cmp	r5, #0
   18af8:	bne	18bb4 <__assert_fail@plt+0x64e0>
   18afc:	movw	r1, #1520	; 0x5f0
   18b00:	movt	r1, #3
   18b04:	mov	r0, r5
   18b08:	mov	r2, #5
   18b0c:	bl	1217c <dcgettext@plt>
   18b10:	mov	r1, r5
   18b14:	mov	r2, r0
   18b18:	mov	r0, #1
   18b1c:	bl	122cc <error@plt>
   18b20:	ldr	r3, [sp, #4]
   18b24:	add	r6, r6, #1
   18b28:	cmp	r3, r6
   18b2c:	ble	18b7c <__assert_fail@plt+0x64a8>
   18b30:	ldr	r4, [r9, r6, lsl #2]
   18b34:	lsl	r2, r6, #2
   18b38:	ldrb	r3, [r4]
   18b3c:	cmp	r3, #45	; 0x2d
   18b40:	bne	18aa8 <__assert_fail@plt+0x63d4>
   18b44:	ldrb	r3, [r4, #1]
   18b48:	cmp	r3, #72	; 0x48
   18b4c:	beq	18b9c <__assert_fail@plt+0x64c8>
   18b50:	cmp	r3, #76	; 0x4c
   18b54:	bne	18cdc <__assert_fail@plt+0x6608>
   18b58:	ldrb	r3, [r4, #2]
   18b5c:	cmp	r3, #0
   18b60:	bne	18aa8 <__assert_fail@plt+0x63d4>
   18b64:	mov	r0, #1
   18b68:	add	r6, r6, #1
   18b6c:	bl	1eb48 <__assert_fail@plt+0xc474>
   18b70:	ldr	r3, [sp, #4]
   18b74:	cmp	r3, r6
   18b78:	bgt	18b30 <__assert_fail@plt+0x645c>
   18b7c:	ldr	r1, [sp, #12]
   18b80:	mov	r0, r6
   18b84:	ldr	r2, [sp, #28]
   18b88:	ldr	r3, [r1]
   18b8c:	cmp	r2, r3
   18b90:	bne	18cd8 <__assert_fail@plt+0x6604>
   18b94:	add	sp, sp, #36	; 0x24
   18b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b9c:	ldrb	r3, [r4, #2]
   18ba0:	cmp	r3, #0
   18ba4:	bne	18aa8 <__assert_fail@plt+0x63d4>
   18ba8:	mov	r0, #2
   18bac:	bl	1eb48 <__assert_fail@plt+0xc474>
   18bb0:	b	18b20 <__assert_fail@plt+0x644c>
   18bb4:	bl	12434 <__errno_location@plt>
   18bb8:	add	r4, r4, #2
   18bbc:	add	r1, sp, #20
   18bc0:	mov	r2, #10
   18bc4:	mov	fp, r0
   18bc8:	ldr	r5, [r0]
   18bcc:	str	r8, [fp]
   18bd0:	mov	r0, r4
   18bd4:	bl	123c8 <strtoul@plt>
   18bd8:	ldr	r3, [sp, #20]
   18bdc:	subs	r8, r0, #0
   18be0:	bne	18c24 <__assert_fail@plt+0x6550>
   18be4:	cmp	r4, r3
   18be8:	beq	18cac <__assert_fail@plt+0x65d8>
   18bec:	ldrb	r3, [r3]
   18bf0:	cmp	r3, #0
   18bf4:	beq	18c40 <__assert_fail@plt+0x656c>
   18bf8:	mov	r2, #5
   18bfc:	movw	r1, #1576	; 0x628
   18c00:	mov	r0, #0
   18c04:	movt	r1, #3
   18c08:	bl	1217c <dcgettext@plt>
   18c0c:	mov	r3, r4
   18c10:	mov	r1, #0
   18c14:	mov	r2, r0
   18c18:	mov	r0, #1
   18c1c:	bl	122cc <error@plt>
   18c20:	b	18b20 <__assert_fail@plt+0x644c>
   18c24:	ldrb	r0, [r3]
   18c28:	cmp	r0, #0
   18c2c:	bne	18bf8 <__assert_fail@plt+0x6524>
   18c30:	cmn	r8, #1
   18c34:	beq	18c4c <__assert_fail@plt+0x6578>
   18c38:	cmp	r8, #65536	; 0x10000
   18c3c:	bcs	18c58 <__assert_fail@plt+0x6584>
   18c40:	strh	r8, [r7, #68]	; 0x44
   18c44:	str	r5, [fp]
   18c48:	b	18b20 <__assert_fail@plt+0x644c>
   18c4c:	ldr	r5, [fp]
   18c50:	cmp	r5, #0
   18c54:	bne	18c84 <__assert_fail@plt+0x65b0>
   18c58:	mov	r2, #5
   18c5c:	movw	r1, #1608	; 0x648
   18c60:	mov	r0, #0
   18c64:	movt	r1, #3
   18c68:	bl	1217c <dcgettext@plt>
   18c6c:	mov	r3, r8
   18c70:	mov	r1, #0
   18c74:	mov	r2, r0
   18c78:	mov	r0, #1
   18c7c:	bl	122cc <error@plt>
   18c80:	b	18b20 <__assert_fail@plt+0x644c>
   18c84:	mov	r2, #5
   18c88:	movw	r1, #1576	; 0x628
   18c8c:	movt	r1, #3
   18c90:	bl	1217c <dcgettext@plt>
   18c94:	mov	r1, r5
   18c98:	mov	r3, r4
   18c9c:	mov	r2, r0
   18ca0:	mov	r0, #1
   18ca4:	bl	122cc <error@plt>
   18ca8:	b	18b20 <__assert_fail@plt+0x644c>
   18cac:	mov	r2, #5
   18cb0:	movw	r1, #1520	; 0x5f0
   18cb4:	movt	r1, #3
   18cb8:	bl	1217c <dcgettext@plt>
   18cbc:	mov	r1, r8
   18cc0:	mov	r2, r0
   18cc4:	mov	r0, #1
   18cc8:	bl	122cc <error@plt>
   18ccc:	b	18b20 <__assert_fail@plt+0x644c>
   18cd0:	mov	r6, #1
   18cd4:	b	18b7c <__assert_fail@plt+0x64a8>
   18cd8:	bl	12188 <__stack_chk_fail@plt>
   18cdc:	cmp	r3, #80	; 0x50
   18ce0:	bne	18cf8 <__assert_fail@plt+0x6624>
   18ce4:	ldrb	r0, [r4, #2]
   18ce8:	cmp	r0, #0
   18cec:	bne	18aa8 <__assert_fail@plt+0x63d4>
   18cf0:	bl	1eb48 <__assert_fail@plt+0xc474>
   18cf4:	b	18b20 <__assert_fail@plt+0x644c>
   18cf8:	cmp	r3, #45	; 0x2d
   18cfc:	bne	18d14 <__assert_fail@plt+0x6640>
   18d00:	ldrb	r3, [r4, #2]
   18d04:	cmp	r3, #0
   18d08:	bne	18aa8 <__assert_fail@plt+0x63d4>
   18d0c:	add	r6, r6, #1
   18d10:	b	18b7c <__assert_fail@plt+0x64a8>
   18d14:	cmp	r3, #68	; 0x44
   18d18:	bne	18aa8 <__assert_fail@plt+0x63d4>
   18d1c:	ldrb	r3, [r4, #2]
   18d20:	cmp	r3, #0
   18d24:	bne	18aa8 <__assert_fail@plt+0x63d4>
   18d28:	add	r2, r9, r2
   18d2c:	add	r8, sp, #32
   18d30:	mov	r1, #44	; 0x2c
   18d34:	str	r3, [sp, #20]
   18d38:	ldr	r2, [r2, #4]
   18d3c:	strh	r1, [r8, #-8]!
   18d40:	mov	r1, r8
   18d44:	str	r2, [sp, #8]
   18d48:	add	r2, sp, #20
   18d4c:	ldr	r0, [sp, #8]
   18d50:	bl	1214c <__strtok_r@plt>
   18d54:	subs	r4, r0, #0
   18d58:	ldrne	r5, [pc, #244]	; 18e54 <__assert_fail@plt+0x6780>
   18d5c:	beq	18e18 <__assert_fail@plt+0x6744>
   18d60:	mov	sl, #0
   18d64:	mov	fp, sl
   18d68:	mov	r1, r4
   18d6c:	ldr	r0, [r5, sl]
   18d70:	bl	1205c <strcmp@plt>
   18d74:	movw	r1, #732	; 0x2dc
   18d78:	movt	r1, #3
   18d7c:	cmp	r0, #0
   18d80:	beq	18dfc <__assert_fail@plt+0x6728>
   18d84:	add	fp, fp, #1
   18d88:	add	sl, sl, #12
   18d8c:	cmp	fp, #7
   18d90:	bne	18d68 <__assert_fail@plt+0x6694>
   18d94:	mov	r2, #5
   18d98:	movw	r1, #1712	; 0x6b0
   18d9c:	mov	r0, #0
   18da0:	movt	r1, #3
   18da4:	bl	1217c <dcgettext@plt>
   18da8:	ldr	r1, [r7, #72]	; 0x48
   18dac:	ldr	r2, [sp, #8]
   18db0:	mov	r4, r0
   18db4:	mov	r0, #0
   18db8:	bl	284fc <__assert_fail@plt+0x15e28>
   18dbc:	mov	r2, r4
   18dc0:	mov	r3, r0
   18dc4:	mov	r0, #0
   18dc8:	mov	r1, r0
   18dcc:	bl	122cc <error@plt>
   18dd0:	mov	r0, #0
   18dd4:	mov	r1, r8
   18dd8:	add	r2, sp, #20
   18ddc:	bl	1214c <__strtok_r@plt>
   18de0:	subs	r4, r0, #0
   18de4:	bne	18d60 <__assert_fail@plt+0x668c>
   18de8:	ldr	r3, [r7, #44]	; 0x2c
   18dec:	tst	r3, #16
   18df0:	bne	18e3c <__assert_fail@plt+0x6768>
   18df4:	add	r6, r6, #1
   18df8:	b	18b20 <__assert_fail@plt+0x644c>
   18dfc:	add	r2, fp, fp, lsl #1
   18e00:	ldr	r3, [r7, #44]	; 0x2c
   18e04:	add	r1, r1, r2, lsl #2
   18e08:	ldr	r2, [r1, #36]	; 0x24
   18e0c:	orr	r3, r2, r3
   18e10:	str	r3, [r7, #44]	; 0x2c
   18e14:	b	18dd0 <__assert_fail@plt+0x66fc>
   18e18:	mov	r2, #5
   18e1c:	movw	r1, #1748	; 0x6d4
   18e20:	movt	r1, #3
   18e24:	bl	1217c <dcgettext@plt>
   18e28:	mov	r1, r4
   18e2c:	mov	r2, r0
   18e30:	mov	r0, #1
   18e34:	bl	122cc <error@plt>
   18e38:	b	18df4 <__assert_fail@plt+0x6720>
   18e3c:	movw	r3, #26024	; 0x65a8
   18e40:	movt	r3, #4
   18e44:	ldr	r0, [r3]
   18e48:	bl	17eac <__assert_fail@plt+0x57d8>
   18e4c:	mov	r0, r4
   18e50:	bl	123b0 <exit@plt>
   18e54:	strdeq	r0, [r3], -ip
   18e58:	push	{r4, r5, r6, lr}
   18e5c:	movw	r5, #26008	; 0x6598
   18e60:	movt	r5, #4
   18e64:	sub	sp, sp, #16
   18e68:	mov	r4, r0
   18e6c:	movw	r0, #1784	; 0x6f8
   18e70:	ldr	r3, [r5]
   18e74:	movt	r0, #3
   18e78:	mov	r6, #0
   18e7c:	str	r3, [sp, #12]
   18e80:	bl	12308 <getenv@plt>
   18e84:	cmp	r0, #0
   18e88:	strbeq	r0, [r4, #18]
   18e8c:	movne	r3, #1
   18e90:	strbne	r3, [r4, #18]
   18e94:	bl	18350 <__assert_fail@plt+0x5c7c>
   18e98:	str	r6, [r4, #60]	; 0x3c
   18e9c:	strb	r0, [r4, #56]	; 0x38
   18ea0:	mov	r0, r6
   18ea4:	bl	1262c <isatty@plt>
   18ea8:	cmp	r0, #0
   18eac:	strbne	r6, [r4, #16]
   18eb0:	strbeq	r0, [r4, #17]
   18eb4:	mov	r6, #0
   18eb8:	movne	r3, #1
   18ebc:	strbne	r3, [r4, #17]
   18ec0:	ldrb	r3, [r4, #18]
   18ec4:	mov	r1, r6
   18ec8:	strbeq	r0, [r4, #16]
   18ecc:	add	r0, sp, #4
   18ed0:	cmp	r3, #0
   18ed4:	strb	r6, [r4, #1]
   18ed8:	movne	r3, #0
   18edc:	strbne	r3, [r4, #17]
   18ee0:	mov	r3, #1
   18ee4:	strb	r3, [r4]
   18ee8:	mvn	r3, #0
   18eec:	str	r3, [r4, #8]
   18ef0:	str	r3, [r4, #4]
   18ef4:	bl	122a8 <gettimeofday@plt>
   18ef8:	cmp	r0, r6
   18efc:	bne	18fc4 <__assert_fail@plt+0x68f0>
   18f00:	ldr	r3, [sp, #8]
   18f04:	mov	r6, #1000	; 0x3e8
   18f08:	ldr	r0, [sp, #4]
   18f0c:	mul	r6, r6, r3
   18f10:	ldrb	r2, [r4, #18]
   18f14:	sub	r3, r0, #86016	; 0x15000
   18f18:	str	r0, [r4, #20]
   18f1c:	cmp	r2, #0
   18f20:	sub	r3, r3, #384	; 0x180
   18f24:	str	r6, [r4, #24]
   18f28:	movw	r0, #1816	; 0x718
   18f2c:	str	r3, [r4, #28]
   18f30:	movt	r0, #3
   18f34:	mov	r3, #0
   18f38:	str	r6, [r4, #32]
   18f3c:	strb	r3, [r4, #36]	; 0x24
   18f40:	mov	r6, #0
   18f44:	strb	r3, [r4, #13]
   18f48:	strb	r3, [r4, #14]
   18f4c:	strb	r3, [r4, #15]
   18f50:	movne	r3, #512	; 0x200
   18f54:	moveq	r3, #1024	; 0x400
   18f58:	str	r6, [r4, #44]	; 0x2c
   18f5c:	str	r3, [r4, #40]	; 0x28
   18f60:	mov	r3, #2
   18f64:	strh	r3, [r4, #68]	; 0x44
   18f68:	bl	12308 <getenv@plt>
   18f6c:	cmp	r0, r6
   18f70:	beq	18f98 <__assert_fail@plt+0x68c4>
   18f74:	mov	r2, #5
   18f78:	movw	r1, #1832	; 0x728
   18f7c:	mov	r0, r6
   18f80:	movt	r1, #3
   18f84:	bl	1217c <dcgettext@plt>
   18f88:	mov	r1, r6
   18f8c:	mov	r2, r0
   18f90:	mov	r0, #1
   18f94:	bl	122cc <error@plt>
   18f98:	mov	r0, #0
   18f9c:	strb	r0, [r4, #12]
   18fa0:	bl	1eb48 <__assert_fail@plt+0xc474>
   18fa4:	ldr	r2, [sp, #12]
   18fa8:	ldr	r3, [r5]
   18fac:	mov	r1, #6
   18fb0:	str	r1, [r4, #72]	; 0x48
   18fb4:	cmp	r2, r3
   18fb8:	bne	18ff0 <__assert_fail@plt+0x691c>
   18fbc:	add	sp, sp, #16
   18fc0:	pop	{r4, r5, r6, pc}
   18fc4:	mov	r0, r6
   18fc8:	bl	12140 <time@plt>
   18fcc:	cmn	r0, #1
   18fd0:	bne	18f10 <__assert_fail@plt+0x683c>
   18fd4:	movw	r0, #1800	; 0x708
   18fd8:	movw	r1, #968	; 0x3c8
   18fdc:	movt	r0, #3
   18fe0:	movt	r1, #3
   18fe4:	mov	r2, #960	; 0x3c0
   18fe8:	ldr	r3, [pc, #4]	; 18ff4 <__assert_fail@plt+0x6920>
   18fec:	bl	126d4 <__assert_fail@plt>
   18ff0:	bl	12188 <__stack_chk_fail@plt>
   18ff4:	andeq	r0, r3, r8, lsr #7
   18ff8:	ldrb	r3, [r2, #18]
   18ffc:	push	{r4, r5, r6, lr}
   19000:	cmp	r3, #0
   19004:	mov	r4, r2
   19008:	ldr	r2, [r2, #164]	; 0xa4
   1900c:	mov	r6, r0
   19010:	mov	r5, r1
   19014:	add	r3, r2, #1
   19018:	str	r3, [r4, #164]	; 0xa4
   1901c:	bne	1902c <__assert_fail@plt+0x6958>
   19020:	ldrb	r3, [r4, #19]
   19024:	cmp	r3, #0
   19028:	beq	19078 <__assert_fail@plt+0x69a4>
   1902c:	mov	r0, r6
   19030:	mov	r1, r5
   19034:	mov	r2, r4
   19038:	bl	18238 <__assert_fail@plt+0x5b64>
   1903c:	cmp	r0, #0
   19040:	bne	19070 <__assert_fail@plt+0x699c>
   19044:	mov	r0, r6
   19048:	mov	r1, r5
   1904c:	ldr	r3, [r4]
   19050:	mov	r2, r4
   19054:	blx	r3
   19058:	cmp	r0, #0
   1905c:	beq	19070 <__assert_fail@plt+0x699c>
   19060:	ldr	r3, [r4, #168]	; 0xa8
   19064:	add	r3, r3, #1
   19068:	str	r3, [r4, #168]	; 0xa8
   1906c:	pop	{r4, r5, r6, pc}
   19070:	mov	r0, #0
   19074:	pop	{r4, r5, r6, pc}
   19078:	ldrb	r3, [r4, #20]
   1907c:	cmp	r3, #0
   19080:	bne	1902c <__assert_fail@plt+0x6958>
   19084:	b	19044 <__assert_fail@plt+0x6970>
   19088:	movw	r3, #16948	; 0x4234
   1908c:	movt	r3, #1
   19090:	cmp	r0, r3
   19094:	beq	190b0 <__assert_fail@plt+0x69dc>
   19098:	movw	r3, #18468	; 0x4824
   1909c:	movt	r3, #1
   190a0:	subs	r3, r0, r3
   190a4:	rsbs	r0, r3, #0
   190a8:	adcs	r0, r0, r3
   190ac:	bx	lr
   190b0:	mov	r0, #1
   190b4:	bx	lr
   190b8:	movw	r3, #29372	; 0x72bc
   190bc:	movt	r3, #4
   190c0:	mov	r2, r1
   190c4:	ldr	r1, [r3, #72]	; 0x48
   190c8:	b	284fc <__assert_fail@plt+0x15e28>
   190cc:	movw	r3, #29328	; 0x7290
   190d0:	movt	r3, #4
   190d4:	ldr	r2, [r3, #28]
   190d8:	cmp	r2, r0
   190dc:	strlt	r0, [r3, #28]
   190e0:	bx	lr
   190e4:	mov	r3, r1
   190e8:	mov	r2, #1
   190ec:	mov	r1, r0
   190f0:	mov	r0, #0
   190f4:	b	17cb0 <__assert_fail@plt+0x55dc>
   190f8:	mov	r2, r0
   190fc:	mov	r0, #1
   19100:	push	{r3, lr}
   19104:	mov	r3, r1
   19108:	mov	r1, r2
   1910c:	mov	r2, r0
   19110:	bl	17cb0 <__assert_fail@plt+0x55dc>
   19114:	bl	12674 <abort@plt>
   19118:	mov	r2, r0
   1911c:	mov	r0, #0
   19120:	mov	r3, r1
   19124:	mov	r1, r2
   19128:	mov	r2, r0
   1912c:	b	17cb0 <__assert_fail@plt+0x55dc>
   19130:	push	{r3, lr}
   19134:	movw	ip, #29328	; 0x7290
   19138:	mov	lr, #0
   1913c:	movt	ip, #4
   19140:	mov	r3, r1
   19144:	mov	r2, lr
   19148:	mov	r1, r0
   1914c:	mov	r0, #1
   19150:	strb	lr, [ip, #40]	; 0x28
   19154:	bl	17cb0 <__assert_fail@plt+0x55dc>
   19158:	bl	12674 <abort@plt>
   1915c:	push	{r4, r5}
   19160:	mov	ip, r1
   19164:	ldrd	r4, [r0, #8]
   19168:	ldrd	r2, [r1, #8]
   1916c:	cmp	r5, r3
   19170:	cmpeq	r4, r2
   19174:	movne	r0, #0
   19178:	beq	19184 <__assert_fail@plt+0x6ab0>
   1917c:	pop	{r4, r5}
   19180:	bx	lr
   19184:	ldrd	r0, [r0]
   19188:	ldrd	r2, [ip]
   1918c:	pop	{r4, r5}
   19190:	cmp	r1, r3
   19194:	cmpeq	r0, r2
   19198:	movne	r0, #0
   1919c:	moveq	r0, #1
   191a0:	bx	lr
   191a4:	push	{r3, r4, r5, lr}
   191a8:	mov	r2, r1
   191ac:	ldrd	r4, [r0, #8]
   191b0:	mov	r3, #0
   191b4:	ldrd	r0, [r0]
   191b8:	eor	r0, r0, r4
   191bc:	eor	r1, r1, r5
   191c0:	bl	2e550 <fts_children@@Base+0x2184>
   191c4:	mov	r0, r2
   191c8:	pop	{r3, r4, r5, pc}
   191cc:	push	{r4, lr}
   191d0:	mov	r4, r0
   191d4:	ldr	r0, [r0, #20]
   191d8:	cmp	r0, #0
   191dc:	beq	191ec <__assert_fail@plt+0x6b18>
   191e0:	bl	12500 <fclose@plt>
   191e4:	cmp	r0, #0
   191e8:	bne	19200 <__assert_fail@plt+0x6b2c>
   191ec:	ldr	r0, [r4, #16]
   191f0:	bl	120c8 <free@plt>
   191f4:	mov	r0, r4
   191f8:	pop	{r4, lr}
   191fc:	b	120c8 <free@plt>
   19200:	bl	12434 <__errno_location@plt>
   19204:	ldr	r1, [r4, #16]
   19208:	ldr	r0, [r0]
   1920c:	bl	19130 <__assert_fail@plt+0x6a5c>
   19210:	push	{r4, r5, lr}
   19214:	mov	r5, r0
   19218:	sub	sp, sp, #12
   1921c:	mov	r0, #8
   19220:	bl	1232c <malloc@plt>
   19224:	subs	r4, r0, #0
   19228:	beq	1927c <__assert_fail@plt+0x6ba8>
   1922c:	mov	r0, r5
   19230:	bl	12458 <__strdup@plt>
   19234:	cmp	r0, #0
   19238:	mov	r5, r0
   1923c:	str	r0, [r4]
   19240:	beq	19288 <__assert_fail@plt+0x6bb4>
   19244:	movw	r3, #37324	; 0x91cc
   19248:	movw	r2, #37284	; 0x91a4
   1924c:	movt	r3, #1
   19250:	movt	r2, #1
   19254:	str	r3, [sp]
   19258:	mov	r0, #11
   1925c:	movw	r3, #37212	; 0x915c
   19260:	mov	r1, #0
   19264:	movt	r3, #1
   19268:	bl	21fa8 <__assert_fail@plt+0xf8d4>
   1926c:	cmp	r0, #0
   19270:	mov	r5, r0
   19274:	str	r0, [r4, #4]
   19278:	beq	19298 <__assert_fail@plt+0x6bc4>
   1927c:	mov	r0, r4
   19280:	add	sp, sp, #12
   19284:	pop	{r4, r5, pc}
   19288:	mov	r0, r4
   1928c:	bl	120c8 <free@plt>
   19290:	mov	r0, r5
   19294:	b	19280 <__assert_fail@plt+0x6bac>
   19298:	ldr	r0, [r4]
   1929c:	bl	120c8 <free@plt>
   192a0:	mov	r0, r4
   192a4:	bl	120c8 <free@plt>
   192a8:	mov	r0, r5
   192ac:	b	19280 <__assert_fail@plt+0x6bac>
   192b0:	push	{r4, lr}
   192b4:	mov	r4, r0
   192b8:	ldr	r0, [r0]
   192bc:	bl	120c8 <free@plt>
   192c0:	ldr	r0, [r4, #4]
   192c4:	pop	{r4, lr}
   192c8:	b	22178 <__assert_fail@plt+0xfaa4>
   192cc:	push	{r4, r5, r6, r7, r8, lr}
   192d0:	movw	r7, #26008	; 0x6598
   192d4:	movt	r7, #4
   192d8:	sub	sp, sp, #112	; 0x70
   192dc:	mov	r8, r0
   192e0:	mov	r0, #24
   192e4:	ldr	r3, [r7]
   192e8:	mov	r5, r1
   192ec:	str	r3, [sp, #108]	; 0x6c
   192f0:	bl	1232c <malloc@plt>
   192f4:	subs	r6, r0, #0
   192f8:	beq	193d4 <__assert_fail@plt+0x6d00>
   192fc:	mov	r0, r5
   19300:	bl	12458 <__strdup@plt>
   19304:	cmp	r0, #0
   19308:	mov	r4, r0
   1930c:	str	r0, [r6, #16]
   19310:	beq	193dc <__assert_fail@plt+0x6d08>
   19314:	mov	r0, r5
   19318:	ldr	r1, [r8]
   1931c:	bl	215f4 <__assert_fail@plt+0xef20>
   19320:	cmp	r0, #0
   19324:	mov	r4, r0
   19328:	str	r0, [r6, #20]
   1932c:	beq	193dc <__assert_fail@plt+0x6d08>
   19330:	bl	124b8 <fileno@plt>
   19334:	subs	r4, r0, #0
   19338:	blt	19408 <__assert_fail@plt+0x6d34>
   1933c:	mov	r1, #1
   19340:	bl	21060 <__assert_fail@plt+0xe98c>
   19344:	mov	r1, r4
   19348:	mov	r0, #3
   1934c:	mov	r2, sp
   19350:	bl	1220c <__fxstat64@plt>
   19354:	cmp	r0, #0
   19358:	blt	193a8 <__assert_fail@plt+0x6cd4>
   1935c:	ldrd	r4, [sp]
   19360:	mov	r1, r6
   19364:	ldrd	r2, [sp, #96]	; 0x60
   19368:	ldr	r0, [r8, #4]
   1936c:	strd	r4, [r6]
   19370:	strd	r2, [r6, #8]
   19374:	bl	21cf8 <__assert_fail@plt+0xf624>
   19378:	subs	r4, r0, #0
   1937c:	beq	193b8 <__assert_fail@plt+0x6ce4>
   19380:	mov	r0, r6
   19384:	bl	191cc <__assert_fail@plt+0x6af8>
   19388:	ldr	r4, [r4, #20]
   1938c:	ldr	r2, [sp, #108]	; 0x6c
   19390:	mov	r0, r4
   19394:	ldr	r3, [r7]
   19398:	cmp	r2, r3
   1939c:	bne	19404 <__assert_fail@plt+0x6d30>
   193a0:	add	sp, sp, #112	; 0x70
   193a4:	pop	{r4, r5, r6, r7, r8, pc}
   193a8:	mov	r0, r6
   193ac:	mov	r4, #0
   193b0:	bl	191cc <__assert_fail@plt+0x6af8>
   193b4:	b	1938c <__assert_fail@plt+0x6cb8>
   193b8:	ldr	r0, [r8, #4]
   193bc:	mov	r1, r6
   193c0:	bl	22594 <__assert_fail@plt+0xfec0>
   193c4:	subs	r4, r0, #0
   193c8:	beq	193e8 <__assert_fail@plt+0x6d14>
   193cc:	ldr	r4, [r6, #20]
   193d0:	b	1938c <__assert_fail@plt+0x6cb8>
   193d4:	mov	r4, r6
   193d8:	b	1938c <__assert_fail@plt+0x6cb8>
   193dc:	mov	r0, r6
   193e0:	bl	120c8 <free@plt>
   193e4:	b	1938c <__assert_fail@plt+0x6cb8>
   193e8:	bl	12434 <__errno_location@plt>
   193ec:	ldr	r8, [r0]
   193f0:	mov	r5, r0
   193f4:	mov	r0, r6
   193f8:	bl	191cc <__assert_fail@plt+0x6af8>
   193fc:	str	r8, [r5]
   19400:	b	1938c <__assert_fail@plt+0x6cb8>
   19404:	bl	12188 <__stack_chk_fail@plt>
   19408:	movw	r0, #61608	; 0xf0a8
   1940c:	movw	r1, #2348	; 0x92c
   19410:	movw	r3, #2332	; 0x91c
   19414:	movt	r0, #2
   19418:	movt	r1, #3
   1941c:	mov	r2, #166	; 0xa6
   19420:	movt	r3, #3
   19424:	bl	126d4 <__assert_fail@plt>
   19428:	push	{r1, r2, r3}
   1942c:	mov	r1, #1
   19430:	push	{r4, r5, lr}
   19434:	movw	r4, #26008	; 0x6598
   19438:	movt	r4, #4
   1943c:	sub	sp, sp, #8
   19440:	add	ip, sp, #24
   19444:	mov	r5, r0
   19448:	ldr	lr, [r4]
   1944c:	ldr	r2, [sp, #20]
   19450:	mov	r3, ip
   19454:	ldr	r0, [r0, #4]
   19458:	str	lr, [sp, #4]
   1945c:	str	ip, [sp]
   19460:	bl	1235c <__vfprintf_chk@plt>
   19464:	cmp	r0, #0
   19468:	blt	1948c <__assert_fail@plt+0x6db8>
   1946c:	ldr	r2, [sp, #4]
   19470:	ldr	r3, [r4]
   19474:	cmp	r2, r3
   19478:	bne	194a0 <__assert_fail@plt+0x6dcc>
   1947c:	add	sp, sp, #8
   19480:	pop	{r4, r5, lr}
   19484:	add	sp, sp, #12
   19488:	bx	lr
   1948c:	bl	12434 <__errno_location@plt>
   19490:	ldr	r1, [r5, #8]
   19494:	ldr	r0, [r0]
   19498:	bl	19118 <__assert_fail@plt+0x6a44>
   1949c:	b	1946c <__assert_fail@plt+0x6d98>
   194a0:	bl	12188 <__stack_chk_fail@plt>
   194a4:	cmp	r0, #32768	; 0x8000
   194a8:	beq	19500 <__assert_fail@plt+0x6e2c>
   194ac:	cmp	r0, #16384	; 0x4000
   194b0:	beq	1950c <__assert_fail@plt+0x6e38>
   194b4:	cmp	r0, #40960	; 0xa000
   194b8:	beq	19518 <__assert_fail@plt+0x6e44>
   194bc:	cmp	r0, #49152	; 0xc000
   194c0:	beq	194f4 <__assert_fail@plt+0x6e20>
   194c4:	cmp	r0, #24576	; 0x6000
   194c8:	beq	19524 <__assert_fail@plt+0x6e50>
   194cc:	cmp	r0, #8192	; 0x2000
   194d0:	beq	19530 <__assert_fail@plt+0x6e5c>
   194d4:	cmp	r0, #4096	; 0x1000
   194d8:	movw	r2, #2540	; 0x9ec
   194dc:	movw	r3, #14672	; 0x3950
   194e0:	movt	r2, #3
   194e4:	movt	r3, #3
   194e8:	movne	r0, r2
   194ec:	moveq	r0, r3
   194f0:	bx	lr
   194f4:	movw	r0, #62820	; 0xf564
   194f8:	movt	r0, #2
   194fc:	bx	lr
   19500:	movw	r0, #15232	; 0x3b80
   19504:	movt	r0, #3
   19508:	bx	lr
   1950c:	movw	r0, #18244	; 0x4744
   19510:	movt	r0, #3
   19514:	bx	lr
   19518:	movw	r0, #63388	; 0xf79c
   1951c:	movt	r0, #2
   19520:	bx	lr
   19524:	movw	r0, #20316	; 0x4f5c
   19528:	movt	r0, #3
   1952c:	bx	lr
   19530:	movw	r0, #6804	; 0x1a94
   19534:	movt	r0, #3
   19538:	bx	lr
   1953c:	push	{r4, lr}
   19540:	mov	r4, r0
   19544:	ldrb	ip, [r4, #12]
   19548:	sub	sp, sp, #8
   1954c:	mov	r3, r1
   19550:	ldr	r0, [r0, #4]
   19554:	ldr	r1, [r4, #16]
   19558:	str	r2, [sp]
   1955c:	mov	r2, ip
   19560:	bl	20034 <__assert_fail@plt+0xd960>
   19564:	cmp	r0, #0
   19568:	blt	19574 <__assert_fail@plt+0x6ea0>
   1956c:	add	sp, sp, #8
   19570:	pop	{r4, pc}
   19574:	bl	12434 <__errno_location@plt>
   19578:	ldr	r1, [r4, #8]
   1957c:	ldr	r0, [r0]
   19580:	add	sp, sp, #8
   19584:	pop	{r4, lr}
   19588:	b	19118 <__assert_fail@plt+0x6a44>
   1958c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19590:	movw	r3, #26008	; 0x6598
   19594:	sub	sp, sp, #148	; 0x94
   19598:	movt	r3, #4
   1959c:	add	r5, sp, #48	; 0x30
   195a0:	cmp	r2, #43	; 0x2b
   195a4:	str	r3, [sp, #24]
   195a8:	mov	r4, r2
   195ac:	ldr	r3, [r3]
   195b0:	stm	r5, {r0, r1}
   195b4:	str	r3, [sp, #140]	; 0x8c
   195b8:	beq	1995c <__assert_fail@plt+0x7288>
   195bc:	sub	r3, r2, #64	; 0x40
   195c0:	strb	r2, [sp, #101]	; 0x65
   195c4:	cmp	r3, #24
   195c8:	mov	r1, #37	; 0x25
   195cc:	mov	r2, #0
   195d0:	strb	r1, [sp, #100]	; 0x64
   195d4:	strb	r2, [sp, #102]	; 0x66
   195d8:	bls	197c8 <__assert_fail@plt+0x70f4>
   195dc:	mov	r6, #0
   195e0:	strb	r6, [sp, #108]	; 0x6c
   195e4:	str	r6, [sp, #28]
   195e8:	cmp	r4, #64	; 0x40
   195ec:	beq	19700 <__assert_fail@plt+0x702c>
   195f0:	mov	r0, r5
   195f4:	bl	12374 <localtime@plt>
   195f8:	subs	r9, r0, #0
   195fc:	beq	19700 <__assert_fail@plt+0x702c>
   19600:	add	r0, sp, #100	; 0x64
   19604:	movw	r6, #26104	; 0x65f8
   19608:	bl	123d4 <strlen@plt>
   1960c:	movt	r6, #4
   19610:	add	r0, r0, #2
   19614:	bl	28e14 <__assert_fail@plt+0x16740>
   19618:	mov	r3, #95	; 0x5f
   1961c:	mov	r4, r0
   19620:	mov	r7, r0
   19624:	strb	r3, [r4], #1
   19628:	add	r0, sp, #100	; 0x64
   1962c:	bl	123d4 <strlen@plt>
   19630:	add	r1, sp, #100	; 0x64
   19634:	add	r2, r0, #1
   19638:	mov	r0, r4
   1963c:	bl	12104 <memcpy@plt>
   19640:	mov	lr, r9
   19644:	ldm	lr!, {r0, r1, r2, r3}
   19648:	add	ip, sp, #56	; 0x38
   1964c:	stmia	ip!, {r0, r1, r2, r3}
   19650:	ldm	lr!, {r0, r1, r2, r3}
   19654:	ldr	r4, [sp, #56]	; 0x38
   19658:	cmp	r4, #10
   1965c:	stmia	ip!, {r0, r1, r2, r3}
   19660:	subgt	r4, r4, #11
   19664:	ldm	lr, {r0, r1, r2}
   19668:	addle	r4, r4, #11
   1966c:	str	r4, [sp, #56]	; 0x38
   19670:	ldr	r4, [r6]
   19674:	cmp	r4, #0
   19678:	stm	ip, {r0, r1, r2}
   1967c:	beq	19a48 <__assert_fail@plt+0x7374>
   19680:	movw	r8, #26104	; 0x65f8
   19684:	movw	sl, #43689	; 0xaaa9
   19688:	movt	r8, #4
   1968c:	movt	sl, #43690	; 0xaaaa
   19690:	b	196bc <__assert_fail@plt+0x6fe8>
   19694:	cmp	ip, sl
   19698:	bhi	19a60 <__assert_fail@plt+0x738c>
   1969c:	add	r3, ip, #1
   196a0:	add	ip, ip, r3, lsr #1
   196a4:	mov	r0, r4
   196a8:	mov	r1, ip
   196ac:	str	ip, [r6, #4]
   196b0:	bl	28e3c <__assert_fail@plt+0x16768>
   196b4:	mov	r4, r0
   196b8:	str	r0, [r6]
   196bc:	mov	r0, r4
   196c0:	ldr	r1, [r6, #4]
   196c4:	mov	r2, r7
   196c8:	mov	r3, r9
   196cc:	bl	12350 <strftime@plt>
   196d0:	movw	r5, #26104	; 0x65f8
   196d4:	ldr	ip, [r8, #4]
   196d8:	movt	r5, #4
   196dc:	cmp	r0, #0
   196e0:	beq	196ec <__assert_fail@plt+0x7018>
   196e4:	cmp	r0, ip
   196e8:	bcc	19820 <__assert_fail@plt+0x714c>
   196ec:	cmp	r4, #0
   196f0:	bne	19694 <__assert_fail@plt+0x6fc0>
   196f4:	cmp	ip, #0
   196f8:	moveq	ip, #64	; 0x40
   196fc:	b	196a4 <__assert_fail@plt+0x6fd0>
   19700:	ldr	r0, [sp, #48]	; 0x30
   19704:	cmp	r0, #0
   19708:	asr	r1, r0, #31
   1970c:	blt	19974 <__assert_fail@plt+0x72a0>
   19710:	ldr	r7, [pc, #1004]	; 19b04 <__assert_fail@plt+0x7430>
   19714:	mov	r4, #1
   19718:	mov	r5, #0
   1971c:	mov	r3, #0
   19720:	strd	r4, [sp]
   19724:	add	r2, r7, #1
   19728:	strd	r4, [sp, #8]
   1972c:	bl	22728 <__assert_fail@plt+0x10054>
   19730:	cmp	r0, r7
   19734:	mov	r4, r0
   19738:	bls	19a64 <__assert_fail@plt+0x7390>
   1973c:	add	r3, r7, #788	; 0x314
   19740:	add	r3, r3, #3
   19744:	cmp	r0, r3
   19748:	bcs	19a88 <__assert_fail@plt+0x73b4>
   1974c:	ldr	r3, [sp, #48]	; 0x30
   19750:	cmp	r3, #0
   19754:	sublt	r4, r0, #1
   19758:	movlt	r3, #45	; 0x2d
   1975c:	strblt	r3, [r0, #-1]
   19760:	cmp	r6, #0
   19764:	mov	r0, r4
   19768:	beq	197ac <__assert_fail@plt+0x70d8>
   1976c:	bl	123d4 <strlen@plt>
   19770:	rsb	r7, r7, r4
   19774:	movw	r3, #790	; 0x316
   19778:	add	r0, r7, r0
   1977c:	cmp	r0, r3
   19780:	bhi	19ac4 <__assert_fail@plt+0x73f0>
   19784:	rsb	r0, r0, #788	; 0x314
   19788:	add	r5, r0, #2
   1978c:	add	r0, sp, #108	; 0x6c
   19790:	bl	123d4 <strlen@plt>
   19794:	cmp	r5, r0
   19798:	bls	199f4 <__assert_fail@plt+0x7320>
   1979c:	add	r1, sp, #108	; 0x6c
   197a0:	mov	r0, r4
   197a4:	bl	12254 <strcat@plt>
   197a8:	mov	r0, r4
   197ac:	ldr	r1, [sp, #24]
   197b0:	ldr	r2, [sp, #140]	; 0x8c
   197b4:	ldr	r3, [r1]
   197b8:	cmp	r2, r3
   197bc:	bne	19a84 <__assert_fail@plt+0x73b0>
   197c0:	add	sp, sp, #148	; 0x94
   197c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c8:	mov	r1, #1
   197cc:	mov	r2, r1
   197d0:	lsl	r3, r1, r3
   197d4:	movt	r2, #280	; 0x118
   197d8:	and	r2, r3, r2
   197dc:	cmp	r2, #0
   197e0:	beq	195dc <__assert_fail@plt+0x6f08>
   197e4:	ldr	ip, [sp, #52]	; 0x34
   197e8:	mov	r1, #32
   197ec:	movw	r2, #2764	; 0xacc
   197f0:	mov	r3, r1
   197f4:	movt	r2, #3
   197f8:	add	r0, sp, #108	; 0x6c
   197fc:	str	r2, [sp]
   19800:	mov	r2, #1
   19804:	str	ip, [sp, #4]
   19808:	bl	126bc <__snprintf_chk@plt>
   1980c:	cmp	r0, #31
   19810:	str	r0, [sp, #28]
   19814:	bgt	19ae4 <__assert_fail@plt+0x7410>
   19818:	mov	r6, #1
   1981c:	b	195e8 <__assert_fail@plt+0x6f14>
   19820:	ldr	r1, [sp, #28]
   19824:	mov	fp, r0
   19828:	mov	r0, r4
   1982c:	add	r3, r1, #1
   19830:	add	r3, r3, fp
   19834:	str	r3, [sp, #40]	; 0x28
   19838:	mov	r1, r3
   1983c:	bl	28e3c <__assert_fail@plt+0x16768>
   19840:	ldr	r2, [sp, #40]	; 0x28
   19844:	stm	r5, {r0, r2}
   19848:	mov	r0, r2
   1984c:	bl	28e14 <__assert_fail@plt+0x16740>
   19850:	ldr	r1, [r5, #4]
   19854:	add	r3, sp, #56	; 0x38
   19858:	mov	r2, r7
   1985c:	str	r0, [sp, #36]	; 0x24
   19860:	bl	12350 <strftime@plt>
   19864:	ldr	r5, [r5]
   19868:	ldrb	r1, [r5]
   1986c:	str	r5, [sp, #32]
   19870:	cmp	r1, #0
   19874:	beq	19940 <__assert_fail@plt+0x726c>
   19878:	ldr	r3, [sp, #36]	; 0x24
   1987c:	ldrb	r4, [r3]
   19880:	cmp	r4, #0
   19884:	beq	19940 <__assert_fail@plt+0x726c>
   19888:	mov	r2, #0
   1988c:	str	fp, [sp, #44]	; 0x2c
   19890:	mov	r9, r2
   19894:	mov	r5, r2
   19898:	ldr	sl, [sp, #32]
   1989c:	mov	fp, r2
   198a0:	mov	r6, r3
   198a4:	mov	r8, r2
   198a8:	b	198d8 <__assert_fail@plt+0x7204>
   198ac:	rsb	r2, r8, r9
   198b0:	cmp	r2, fp
   198b4:	bne	19940 <__assert_fail@plt+0x726c>
   198b8:	add	fp, fp, #1
   198bc:	ldrb	r1, [sl, #1]!
   198c0:	add	r9, r9, #1
   198c4:	cmp	r1, #0
   198c8:	beq	1991c <__assert_fail@plt+0x7248>
   198cc:	ldrb	r4, [r6, #1]!
   198d0:	cmp	r4, #0
   198d4:	beq	19940 <__assert_fail@plt+0x726c>
   198d8:	cmp	r1, r4
   198dc:	beq	198bc <__assert_fail@plt+0x71e8>
   198e0:	bl	12398 <__ctype_b_loc@plt>
   198e4:	lsl	r4, r4, #1
   198e8:	ldr	r2, [r0]
   198ec:	ldrh	r2, [r2, r4]
   198f0:	tst	r2, #2048	; 0x800
   198f4:	beq	19940 <__assert_fail@plt+0x726c>
   198f8:	cmp	r5, #0
   198fc:	bne	198ac <__assert_fail@plt+0x71d8>
   19900:	ldrb	r1, [sl, #1]!
   19904:	mov	fp, #1
   19908:	mov	r8, r9
   1990c:	mov	r5, fp
   19910:	cmp	r1, #0
   19914:	add	r9, r9, #1
   19918:	bne	198cc <__assert_fail@plt+0x71f8>
   1991c:	ldr	r1, [sp, #36]	; 0x24
   19920:	mov	r6, fp
   19924:	mov	r2, r8
   19928:	ldr	fp, [sp, #44]	; 0x2c
   1992c:	ldrb	r3, [r1, r9]
   19930:	cmp	r3, #0
   19934:	bne	19940 <__assert_fail@plt+0x726c>
   19938:	cmp	r6, #2
   1993c:	beq	19980 <__assert_fail@plt+0x72ac>
   19940:	mov	r0, r7
   19944:	bl	120c8 <free@plt>
   19948:	ldr	r0, [sp, #36]	; 0x24
   1994c:	bl	120c8 <free@plt>
   19950:	ldr	r3, [sp, #32]
   19954:	add	r0, r3, #1
   19958:	b	197ac <__assert_fail@plt+0x70d8>
   1995c:	movw	r3, #2772	; 0xad4
   19960:	movt	r3, #3
   19964:	ldm	r3, {r0, r1}
   19968:	str	r0, [sp, #100]	; 0x64
   1996c:	strh	r1, [sp, #104]	; 0x68
   19970:	b	197e4 <__assert_fail@plt+0x7110>
   19974:	rsbs	r0, r0, #0
   19978:	rsc	r1, r1, #0
   1997c:	b	19710 <__assert_fail@plt+0x703c>
   19980:	str	r2, [sp, #20]
   19984:	bl	12398 <__ctype_b_loc@plt>
   19988:	ldr	r2, [sp, #20]
   1998c:	ldr	r3, [sp, #32]
   19990:	add	r8, r2, #2
   19994:	add	r4, r3, r8
   19998:	ldrb	r3, [r3, r8]
   1999c:	lsl	r3, r3, #1
   199a0:	ldr	r2, [r0]
   199a4:	ldrh	r3, [r2, r3]
   199a8:	tst	r3, #2048	; 0x800
   199ac:	bne	19940 <__assert_fail@plt+0x726c>
   199b0:	ldr	r1, [sp, #28]
   199b4:	add	r2, fp, #1
   199b8:	rsb	r2, r8, r2
   199bc:	add	r0, r8, r1
   199c0:	ldr	r1, [sp, #40]	; 0x28
   199c4:	add	r3, r2, r0
   199c8:	cmp	r1, r3
   199cc:	bne	19aa8 <__assert_fail@plt+0x73d4>
   199d0:	ldr	r3, [sp, #32]
   199d4:	mov	r1, r4
   199d8:	add	r0, r3, r0
   199dc:	bl	120bc <memmove@plt>
   199e0:	mov	r0, r4
   199e4:	ldr	r2, [sp, #28]
   199e8:	add	r1, sp, #108	; 0x6c
   199ec:	bl	12104 <memcpy@plt>
   199f0:	b	19940 <__assert_fail@plt+0x726c>
   199f4:	mov	r0, #0
   199f8:	add	r1, sp, #108	; 0x6c
   199fc:	ldr	r3, [sp, #28]
   19a00:	movw	r2, #2688	; 0xa80
   19a04:	str	r1, [sp, #4]
   19a08:	movt	r2, #3
   19a0c:	mov	r1, r0
   19a10:	str	r5, [sp]
   19a14:	bl	122cc <error@plt>
   19a18:	add	r0, sp, #108	; 0x6c
   19a1c:	bl	123d4 <strlen@plt>
   19a20:	cmp	r5, r0
   19a24:	bhi	1979c <__assert_fail@plt+0x70c8>
   19a28:	movw	r0, #2736	; 0xab0
   19a2c:	movw	r1, #2572	; 0xa0c
   19a30:	movw	r3, #2360	; 0x938
   19a34:	movt	r0, #3
   19a38:	movt	r1, #3
   19a3c:	movw	r2, #721	; 0x2d1
   19a40:	movt	r3, #3
   19a44:	bl	126d4 <__assert_fail@plt>
   19a48:	mov	r0, #1
   19a4c:	str	r0, [r6, #4]
   19a50:	bl	28e14 <__assert_fail@plt+0x16740>
   19a54:	mov	r4, r0
   19a58:	str	r0, [r6]
   19a5c:	b	19680 <__assert_fail@plt+0x6fac>
   19a60:	bl	28f4c <__assert_fail@plt+0x16878>
   19a64:	movw	r0, #2632	; 0xa48
   19a68:	movw	r1, #2572	; 0xa0c
   19a6c:	movw	r3, #2360	; 0x938
   19a70:	movt	r0, #3
   19a74:	movt	r1, #3
   19a78:	movw	r2, #698	; 0x2ba
   19a7c:	movt	r3, #3
   19a80:	bl	126d4 <__assert_fail@plt>
   19a84:	bl	12188 <__stack_chk_fail@plt>
   19a88:	movw	r0, #2640	; 0xa50
   19a8c:	movw	r1, #2572	; 0xa0c
   19a90:	movw	r3, #2360	; 0x938
   19a94:	movt	r0, #3
   19a98:	movt	r1, #3
   19a9c:	movw	r2, #699	; 0x2bb
   19aa0:	movt	r3, #3
   19aa4:	bl	126d4 <__assert_fail@plt>
   19aa8:	movw	r0, #2580	; 0xa14
   19aac:	movw	r1, #2572	; 0xa0c
   19ab0:	movt	r0, #3
   19ab4:	movt	r1, #3
   19ab8:	movw	r2, #554	; 0x22a
   19abc:	ldr	r3, [pc, #68]	; 19b08 <__assert_fail@plt+0x7434>
   19ac0:	bl	126d4 <__assert_fail@plt>
   19ac4:	movw	r0, #2668	; 0xa6c
   19ac8:	movw	r1, #2572	; 0xa0c
   19acc:	movw	r3, #2360	; 0x938
   19ad0:	movt	r0, #3
   19ad4:	movt	r1, #3
   19ad8:	mov	r2, #712	; 0x2c8
   19adc:	movt	r3, #3
   19ae0:	bl	126d4 <__assert_fail@plt>
   19ae4:	movw	r0, #2544	; 0x9f0
   19ae8:	movw	r1, #2572	; 0xa0c
   19aec:	movw	r3, #2360	; 0x938
   19af0:	movt	r0, #3
   19af4:	movt	r1, #3
   19af8:	movw	r2, #666	; 0x29a
   19afc:	movt	r3, #3
   19b00:	bl	126d4 <__assert_fail@plt>
   19b04:	andeq	r6, r4, r0, lsl #12
   19b08:	andeq	r0, r3, r4, asr #18
   19b0c:	push	{r4, r5, r6, r7, lr}
   19b10:	sub	sp, sp, #52	; 0x34
   19b14:	add	r4, sp, #40	; 0x28
   19b18:	stm	r4, {r0, r1}
   19b1c:	mov	r0, r4
   19b20:	bl	12374 <localtime@plt>
   19b24:	subs	ip, r0, #0
   19b28:	beq	19c00 <__assert_fail@plt+0x752c>
   19b2c:	ldr	r2, [ip, #24]
   19b30:	cmp	r2, #0
   19b34:	blt	19c10 <__assert_fail@plt+0x753c>
   19b38:	cmp	r2, #6
   19b3c:	bgt	19cf0 <__assert_fail@plt+0x761c>
   19b40:	ldr	r1, [ip, #16]
   19b44:	cmp	r1, #0
   19b48:	blt	19cd4 <__assert_fail@plt+0x7600>
   19b4c:	cmp	r1, #11
   19b50:	bgt	19cb8 <__assert_fail@plt+0x75e4>
   19b54:	ldr	r0, [ip, #8]
   19b58:	cmp	r0, #0
   19b5c:	blt	19c9c <__assert_fail@plt+0x75c8>
   19b60:	cmp	r0, #23
   19b64:	bgt	19c80 <__assert_fail@plt+0x75ac>
   19b68:	ldr	r5, [ip, #4]
   19b6c:	cmp	r5, #59	; 0x3b
   19b70:	bgt	19c64 <__assert_fail@plt+0x7590>
   19b74:	ldr	r4, [ip]
   19b78:	cmp	r4, #61	; 0x3d
   19b7c:	bgt	19c48 <__assert_fail@plt+0x7574>
   19b80:	movw	r3, #2360	; 0x938
   19b84:	movt	r3, #3
   19b88:	add	r2, r3, r2, lsl #2
   19b8c:	add	r3, r3, r1, lsl #2
   19b90:	ldr	r6, [sp, #44]	; 0x2c
   19b94:	movw	lr, #2940	; 0xb7c
   19b98:	ldr	r2, [r2, #44]	; 0x2c
   19b9c:	movt	lr, #3
   19ba0:	ldr	r7, [r3, #72]	; 0x48
   19ba4:	mov	r1, #1024	; 0x400
   19ba8:	str	lr, [sp]
   19bac:	mov	r3, r1
   19bb0:	str	r2, [sp, #4]
   19bb4:	mov	r2, #1
   19bb8:	str	r7, [sp, #8]
   19bbc:	ldr	lr, [ip, #12]
   19bc0:	str	r0, [sp, #16]
   19bc4:	str	r5, [sp, #20]
   19bc8:	str	lr, [sp, #12]
   19bcc:	str	r4, [sp, #24]
   19bd0:	str	r6, [sp, #28]
   19bd4:	ldr	ip, [ip, #20]
   19bd8:	ldr	r0, [pc, #300]	; 19d0c <__assert_fail@plt+0x7638>
   19bdc:	add	ip, ip, #1888	; 0x760
   19be0:	add	ip, ip, #12
   19be4:	str	ip, [sp, #32]
   19be8:	bl	126bc <__snprintf_chk@plt>
   19bec:	cmp	r0, #1024	; 0x400
   19bf0:	ldrlt	r0, [pc, #276]	; 19d0c <__assert_fail@plt+0x7638>
   19bf4:	bge	19c2c <__assert_fail@plt+0x7558>
   19bf8:	add	sp, sp, #52	; 0x34
   19bfc:	pop	{r4, r5, r6, r7, pc}
   19c00:	ldm	r4, {r0, r1}
   19c04:	mov	r2, #64	; 0x40
   19c08:	bl	1958c <__assert_fail@plt+0x6eb8>
   19c0c:	b	19bf8 <__assert_fail@plt+0x7524>
   19c10:	movw	r0, #2780	; 0xadc
   19c14:	movw	r1, #2572	; 0xa0c
   19c18:	movt	r0, #3
   19c1c:	movt	r1, #3
   19c20:	movw	r2, #750	; 0x2ee
   19c24:	ldr	r3, [pc, #228]	; 19d10 <__assert_fail@plt+0x763c>
   19c28:	bl	126d4 <__assert_fail@plt>
   19c2c:	movw	r0, #2980	; 0xba4
   19c30:	movw	r1, #2572	; 0xa0c
   19c34:	movt	r0, #3
   19c38:	movt	r1, #3
   19c3c:	movw	r2, #771	; 0x303
   19c40:	ldr	r3, [pc, #200]	; 19d10 <__assert_fail@plt+0x763c>
   19c44:	bl	126d4 <__assert_fail@plt>
   19c48:	movw	r0, #2920	; 0xb68
   19c4c:	movw	r1, #2572	; 0xa0c
   19c50:	movt	r0, #3
   19c54:	movt	r1, #3
   19c58:	movw	r2, #757	; 0x2f5
   19c5c:	ldr	r3, [pc, #172]	; 19d10 <__assert_fail@plt+0x763c>
   19c60:	bl	126d4 <__assert_fail@plt>
   19c64:	movw	r0, #2900	; 0xb54
   19c68:	movw	r1, #2572	; 0xa0c
   19c6c:	movt	r0, #3
   19c70:	movt	r1, #3
   19c74:	mov	r2, #756	; 0x2f4
   19c78:	ldr	r3, [pc, #144]	; 19d10 <__assert_fail@plt+0x763c>
   19c7c:	bl	126d4 <__assert_fail@plt>
   19c80:	movw	r0, #2880	; 0xb40
   19c84:	movw	r1, #2572	; 0xa0c
   19c88:	movt	r0, #3
   19c8c:	movt	r1, #3
   19c90:	movw	r2, #755	; 0x2f3
   19c94:	ldr	r3, [pc, #116]	; 19d10 <__assert_fail@plt+0x763c>
   19c98:	bl	126d4 <__assert_fail@plt>
   19c9c:	movw	r0, #2860	; 0xb2c
   19ca0:	movw	r1, #2572	; 0xa0c
   19ca4:	movt	r0, #3
   19ca8:	movt	r1, #3
   19cac:	movw	r2, #754	; 0x2f2
   19cb0:	ldr	r3, [pc, #88]	; 19d10 <__assert_fail@plt+0x763c>
   19cb4:	bl	126d4 <__assert_fail@plt>
   19cb8:	movw	r0, #2840	; 0xb18
   19cbc:	movw	r1, #2572	; 0xa0c
   19cc0:	movt	r0, #3
   19cc4:	movt	r1, #3
   19cc8:	movw	r2, #753	; 0x2f1
   19ccc:	ldr	r3, [pc, #60]	; 19d10 <__assert_fail@plt+0x763c>
   19cd0:	bl	126d4 <__assert_fail@plt>
   19cd4:	movw	r0, #2820	; 0xb04
   19cd8:	movw	r1, #2572	; 0xa0c
   19cdc:	movt	r0, #3
   19ce0:	movt	r1, #3
   19ce4:	mov	r2, #752	; 0x2f0
   19ce8:	ldr	r3, [pc, #32]	; 19d10 <__assert_fail@plt+0x763c>
   19cec:	bl	126d4 <__assert_fail@plt>
   19cf0:	movw	r0, #2800	; 0xaf0
   19cf4:	movw	r1, #2572	; 0xa0c
   19cf8:	movt	r0, #3
   19cfc:	movt	r1, #3
   19d00:	movw	r2, #751	; 0x2ef
   19d04:	ldr	r3, [pc, #4]	; 19d10 <__assert_fail@plt+0x763c>
   19d08:	bl	126d4 <__assert_fail@plt>
   19d0c:	andeq	r6, r4, r8, lsl r9
   19d10:	andeq	r0, r3, r4, asr r9
   19d14:	push	{r4, r5, r6, r7, r8, r9, lr}
   19d18:	vpush	{d8}
   19d1c:	movw	r6, #26008	; 0x6598
   19d20:	movt	r6, #4
   19d24:	mov	r8, r1
   19d28:	ldr	r1, [r1]
   19d2c:	sub	sp, sp, #804	; 0x324
   19d30:	ldr	ip, [r6]
   19d34:	mov	r7, r0
   19d38:	cmp	r1, #1
   19d3c:	mov	r4, r2
   19d40:	str	ip, [sp, #796]	; 0x31c
   19d44:	beq	19f9c <__assert_fail@plt+0x78c8>
   19d48:	bcc	19f68 <__assert_fail@plt+0x7894>
   19d4c:	cmp	r1, #2
   19d50:	beq	19d70 <__assert_fail@plt+0x769c>
   19d54:	ldr	r2, [sp, #796]	; 0x31c
   19d58:	ldr	r3, [r6]
   19d5c:	cmp	r2, r3
   19d60:	bne	1a3cc <__assert_fail@plt+0x7cf8>
   19d64:	add	sp, sp, #804	; 0x324
   19d68:	vpop	{d8}
   19d6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19d70:	ldrb	r2, [r8, #4]
   19d74:	cmp	r2, #121	; 0x79
   19d78:	ldrls	pc, [pc, r2, lsl #2]
   19d7c:	b	19d54 <__assert_fail@plt+0x7680>
   19d80:	andeq	sl, r1, r4, asr #4
   19d84:	andeq	r9, r1, r4, asr sp
   19d88:	andeq	r9, r1, r4, asr sp
   19d8c:	andeq	r9, r1, r4, asr sp
   19d90:	andeq	r9, r1, r4, asr sp
   19d94:	andeq	r9, r1, r4, asr sp
   19d98:	andeq	r9, r1, r4, asr sp
   19d9c:	andeq	r9, r1, r4, asr sp
   19da0:	andeq	r9, r1, r4, asr sp
   19da4:	andeq	r9, r1, r4, asr sp
   19da8:	andeq	r9, r1, r4, asr sp
   19dac:	andeq	r9, r1, r4, asr sp
   19db0:	andeq	r9, r1, r4, asr sp
   19db4:	andeq	r9, r1, r4, asr sp
   19db8:	andeq	r9, r1, r4, asr sp
   19dbc:	andeq	r9, r1, r4, asr sp
   19dc0:	andeq	r9, r1, r4, asr sp
   19dc4:	andeq	r9, r1, r4, asr sp
   19dc8:	andeq	r9, r1, r4, asr sp
   19dcc:	andeq	r9, r1, r4, asr sp
   19dd0:	andeq	r9, r1, r4, asr sp
   19dd4:	andeq	r9, r1, r4, asr sp
   19dd8:	andeq	r9, r1, r4, asr sp
   19ddc:	andeq	r9, r1, r4, asr sp
   19de0:	andeq	r9, r1, r4, asr sp
   19de4:	andeq	r9, r1, r4, asr sp
   19de8:	andeq	r9, r1, r4, asr sp
   19dec:	andeq	r9, r1, r4, asr sp
   19df0:	andeq	r9, r1, r4, asr sp
   19df4:	andeq	r9, r1, r4, asr sp
   19df8:	andeq	r9, r1, r4, asr sp
   19dfc:	andeq	r9, r1, r4, asr sp
   19e00:	andeq	r9, r1, r4, asr sp
   19e04:	andeq	r9, r1, r4, asr sp
   19e08:	andeq	r9, r1, r4, asr sp
   19e0c:	andeq	r9, r1, r4, asr sp
   19e10:	andeq	r9, r1, r4, asr sp
   19e14:	andeq	sl, r1, r4, asr #4
   19e18:	andeq	r9, r1, r4, asr sp
   19e1c:	andeq	r9, r1, r4, asr sp
   19e20:	andeq	r9, r1, r4, asr sp
   19e24:	andeq	r9, r1, r4, asr sp
   19e28:	andeq	r9, r1, r4, asr sp
   19e2c:	andeq	r9, r1, r4, asr sp
   19e30:	andeq	r9, r1, r4, asr sp
   19e34:	andeq	r9, r1, r4, asr sp
   19e38:	andeq	r9, r1, r4, asr sp
   19e3c:	andeq	r9, r1, r4, asr sp
   19e40:	andeq	r9, r1, r4, asr sp
   19e44:	andeq	r9, r1, r4, asr sp
   19e48:	andeq	r9, r1, r4, asr sp
   19e4c:	andeq	r9, r1, r4, asr sp
   19e50:	andeq	r9, r1, r4, asr sp
   19e54:	andeq	r9, r1, r4, asr sp
   19e58:	andeq	r9, r1, r4, asr sp
   19e5c:	andeq	r9, r1, r4, asr sp
   19e60:	andeq	r9, r1, r4, asr sp
   19e64:	andeq	r9, r1, r4, asr sp
   19e68:	andeq	r9, r1, r4, asr sp
   19e6c:	andeq	r9, r1, r4, asr sp
   19e70:	andeq	r9, r1, r4, asr sp
   19e74:	andeq	r9, r1, r4, asr sp
   19e78:	andeq	r9, r1, r4, asr sp
   19e7c:	andeq	r9, r1, r4, asr sp
   19e80:	andeq	r9, r1, r4, asr sp
   19e84:	andeq	r9, r1, r4, asr sp
   19e88:	andeq	r9, r1, r4, asr sp
   19e8c:	andeq	r9, r1, r4, asr sp
   19e90:	andeq	sl, r1, r0, asr r2
   19e94:	andeq	r9, r1, r4, asr sp
   19e98:	andeq	sl, r1, ip, ror r1
   19e9c:	strdeq	r9, [r1], -r8
   19ea0:	strdeq	sl, [r1], -r0
   19ea4:	andeq	r9, r1, r4, asr sp
   19ea8:	andeq	r9, r1, r4, asr sp
   19eac:	andeq	r9, r1, r4, asr sp
   19eb0:	andeq	r9, r1, r4, asr sp
   19eb4:	andeq	sl, r1, r4, asr r1
   19eb8:	andeq	r9, r1, r4, asr sp
   19ebc:	andeq	r9, r1, r4, asr sp
   19ec0:	andeq	sl, r1, r4, rrx
   19ec4:	andeq	r9, r1, r4, asr sp
   19ec8:	andeq	r9, r1, r4, asr sp
   19ecc:	muleq	r1, ip, r0
   19ed0:	andeq	r9, r1, r4, asr sp
   19ed4:	andeq	sl, r1, r4, lsr r0
   19ed8:	andeq	r9, r1, r4, asr sp
   19edc:	andeq	r9, r1, r4, asr sp
   19ee0:	andeq	r9, r1, r4, asr sp
   19ee4:	andeq	sl, r1, ip, lsr r0
   19ee8:	andeq	sl, r1, r0, lsr #3
   19eec:	andeq	r9, r1, r4, asr sp
   19ef0:	andeq	r9, r1, r4, asr sp
   19ef4:	andeq	r9, r1, r4, asr sp
   19ef8:	andeq	r9, r1, r4, asr sp
   19efc:	andeq	r9, r1, r4, asr sp
   19f00:	andeq	r9, r1, r4, asr sp
   19f04:	andeq	sl, r1, r8, ror #3
   19f08:	andeq	sl, r1, r4, lsl r2
   19f0c:	andeq	sl, r1, r8, lsr r2
   19f10:	andeq	sl, r1, ip, lsr r3
   19f14:	andeq	r9, r1, r4, asr sp
   19f18:	andeq	sl, r1, r4, asr r3
   19f1c:	andeq	r9, r1, r0, ror #31
   19f20:	andeq	sl, r1, ip, ror r3
   19f24:	muleq	r1, r8, r2
   19f28:	andeq	r9, r1, r4, asr sp
   19f2c:	andeq	sl, r1, r0, lsr #5
   19f30:	andeq	sl, r1, r8, asr #5
   19f34:	strdeq	sl, [r1], -ip
   19f38:	andeq	sl, r1, r0, lsl r3
   19f3c:	andeq	r9, r1, r4, asr sp
   19f40:	andeq	sl, r1, r8, lsl r3
   19f44:	andeq	r9, r1, r4, asr sp
   19f48:	andeq	r9, r1, r4, asr sp
   19f4c:	andeq	sl, r1, r8, lsr #6
   19f50:	andeq	sl, r1, r0, lsr r3
   19f54:	andeq	sl, r1, ip, asr r2
   19f58:	andeq	r9, r1, r4, asr sp
   19f5c:	andeq	r9, r1, r4, asr sp
   19f60:	andeq	r9, r1, r4, asr sp
   19f64:	andeq	sl, r1, r4, ror #1
   19f68:	ldr	r4, [r8, #12]
   19f6c:	mov	r1, #1
   19f70:	ldr	r0, [r8, #8]
   19f74:	ldr	r3, [r7, #4]
   19f78:	mov	r2, r4
   19f7c:	bl	12248 <fwrite@plt>
   19f80:	cmp	r4, r0
   19f84:	bls	19d54 <__assert_fail@plt+0x7680>
   19f88:	bl	12434 <__errno_location@plt>
   19f8c:	ldr	r1, [r7, #8]
   19f90:	ldr	r0, [r0]
   19f94:	bl	19118 <__assert_fail@plt+0x6a44>
   19f98:	b	19d54 <__assert_fail@plt+0x7680>
   19f9c:	ldr	r4, [r8, #12]
   19fa0:	ldr	r0, [r8, #8]
   19fa4:	ldr	r3, [r7, #4]
   19fa8:	mov	r2, r4
   19fac:	bl	12248 <fwrite@plt>
   19fb0:	cmp	r4, r0
   19fb4:	bhi	19fcc <__assert_fail@plt+0x78f8>
   19fb8:	ldr	r0, [r7, #4]
   19fbc:	bl	2a1c0 <__assert_fail@plt+0x17aec>
   19fc0:	cmp	r0, #0
   19fc4:	beq	19d54 <__assert_fail@plt+0x7680>
   19fc8:	b	19f88 <__assert_fail@plt+0x78b4>
   19fcc:	bl	12434 <__errno_location@plt>
   19fd0:	ldr	r1, [r7, #8]
   19fd4:	ldr	r0, [r0]
   19fd8:	bl	19118 <__assert_fail@plt+0x6a44>
   19fdc:	b	19fb8 <__assert_fail@plt+0x78e4>
   19fe0:	ldr	r0, [r3, #28]
   19fe4:	str	r3, [sp, #20]
   19fe8:	bl	126a4 <getgrgid@plt>
   19fec:	ldr	r3, [sp, #20]
   19ff0:	subs	r2, r0, #0
   19ff4:	bne	1a274 <__assert_fail@plt+0x7ba0>
   19ff8:	ldr	r0, [r3, #28]
   19ffc:	mov	r1, #0
   1a000:	add	r2, sp, #144	; 0x90
   1a004:	mov	r3, r1
   1a008:	ldr	r8, [r8, #8]
   1a00c:	mov	r4, #1
   1a010:	mov	r5, #0
   1a014:	strd	r4, [sp]
   1a018:	strd	r4, [sp, #8]
   1a01c:	bl	22728 <__assert_fail@plt+0x10054>
   1a020:	mov	r1, r8
   1a024:	mov	r2, r0
   1a028:	mov	r0, r7
   1a02c:	bl	19428 <__assert_fail@plt+0x6d54>
   1a030:	b	19d54 <__assert_fail@plt+0x7680>
   1a034:	ldr	r0, [r3, #24]
   1a038:	b	19ffc <__assert_fail@plt+0x7928>
   1a03c:	ldr	r0, [r3, #16]
   1a040:	and	r0, r0, #61440	; 0xf000
   1a044:	cmp	r0, #40960	; 0xa000
   1a048:	beq	1a3fc <__assert_fail@plt+0x7d28>
   1a04c:	bl	194a4 <__assert_fail@plt+0x6dd0>
   1a050:	ldr	r1, [r8, #8]
   1a054:	mov	r2, r0
   1a058:	mov	r0, r7
   1a05c:	bl	19428 <__assert_fail@plt+0x6d54>
   1a060:	b	19d54 <__assert_fail@plt+0x7680>
   1a064:	movw	r3, #29328	; 0x7290
   1a068:	movt	r3, #4
   1a06c:	ldr	r2, [r3]
   1a070:	cmp	r2, #0
   1a074:	ble	1a500 <__assert_fail@plt+0x7e2c>
   1a078:	ldr	r3, [r3, #20]
   1a07c:	add	r2, r4, r3
   1a080:	ldrb	r3, [r4, r3]
   1a084:	cmp	r3, #47	; 0x2f
   1a088:	addeq	r2, r2, #1
   1a08c:	mov	r0, r7
   1a090:	ldr	r1, [r8, #8]
   1a094:	bl	1953c <__assert_fail@plt+0x6e68>
   1a098:	b	19d54 <__assert_fail@plt+0x7680>
   1a09c:	ldrd	r4, [r3, #48]	; 0x30
   1a0a0:	ldr	r8, [r8, #8]
   1a0a4:	orrs	r1, r4, r5
   1a0a8:	bne	1a3d0 <__assert_fail@plt+0x7cfc>
   1a0ac:	ldrd	r2, [r3, #64]	; 0x40
   1a0b0:	orrs	r1, r2, r3
   1a0b4:	vmoveq.f64	d7, #112	; 0x3f800000  1.0
   1a0b8:	beq	1a0d0 <__assert_fail@plt+0x79fc>
   1a0bc:	cmp	r2, #0
   1a0c0:	sbcs	r1, r3, #0
   1a0c4:	vldr	d6, [pc, #964]	; 1a490 <__assert_fail@plt+0x7dbc>
   1a0c8:	vldr	d7, [pc, #968]	; 1a498 <__assert_fail@plt+0x7dc4>
   1a0cc:	vmovge.f64	d7, d6
   1a0d0:	mov	r0, r7
   1a0d4:	mov	r1, r8
   1a0d8:	vmov	r2, r3, d7
   1a0dc:	bl	19428 <__assert_fail@plt+0x6d54>
   1a0e0:	b	19d54 <__assert_fail@plt+0x7680>
   1a0e4:	ldr	r0, [r3, #16]
   1a0e8:	and	r0, r0, #61440	; 0xf000
   1a0ec:	b	1a04c <__assert_fail@plt+0x7978>
   1a0f0:	movw	r5, #29328	; 0x7290
   1a0f4:	movt	r5, #4
   1a0f8:	ldr	r0, [r5, #20]
   1a0fc:	add	r0, r0, #1
   1a100:	bl	28e14 <__assert_fail@plt+0x16740>
   1a104:	ldr	r5, [r5, #20]
   1a108:	mov	r1, r4
   1a10c:	mov	r2, r5
   1a110:	mov	r9, r0
   1a114:	bl	12104 <memcpy@plt>
   1a118:	mov	r3, #0
   1a11c:	mov	r0, r7
   1a120:	strb	r3, [r9, r5]
   1a124:	mov	r2, r9
   1a128:	ldr	r1, [r8, #8]
   1a12c:	bl	19428 <__assert_fail@plt+0x6d54>
   1a130:	ldr	r2, [sp, #796]	; 0x31c
   1a134:	ldr	r3, [r6]
   1a138:	cmp	r2, r3
   1a13c:	moveq	r0, r9
   1a140:	bne	1a3cc <__assert_fail@plt+0x7cf8>
   1a144:	add	sp, sp, #804	; 0x324
   1a148:	vpop	{d8}
   1a14c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1a150:	b	120c8 <free@plt>
   1a154:	mov	r0, r3
   1a158:	add	r1, sp, #144	; 0x90
   1a15c:	bl	215ec <__assert_fail@plt+0xef18>
   1a160:	add	r2, sp, #144	; 0x90
   1a164:	mov	r0, r7
   1a168:	ldr	r1, [r8, #8]
   1a16c:	mov	r3, #0
   1a170:	strb	r3, [sp, #154]	; 0x9a
   1a174:	bl	19428 <__assert_fail@plt+0x6d54>
   1a178:	b	19d54 <__assert_fail@plt+0x7680>
   1a17c:	mov	r1, r4
   1a180:	mov	r0, r3
   1a184:	ldr	r5, [r8, #8]
   1a188:	bl	136f8 <__assert_fail@plt+0x1024>
   1a18c:	mov	r1, r5
   1a190:	mov	r2, r0
   1a194:	mov	r0, r7
   1a198:	bl	1953c <__assert_fail@plt+0x6e68>
   1a19c:	b	19d54 <__assert_fail@plt+0x7680>
   1a1a0:	movw	r3, #29372	; 0x72bc
   1a1a4:	movw	r5, #29328	; 0x7290
   1a1a8:	movt	r3, #4
   1a1ac:	movt	r5, #4
   1a1b0:	add	r2, sp, #40	; 0x28
   1a1b4:	ldr	r1, [r5, #12]
   1a1b8:	ldr	r3, [r3, #64]	; 0x40
   1a1bc:	ldr	r0, [r5, #16]
   1a1c0:	blx	r3
   1a1c4:	ldr	r1, [r8, #8]
   1a1c8:	cmp	r0, #0
   1a1cc:	mov	r0, r7
   1a1d0:	blt	1a4a8 <__assert_fail@plt+0x7dd4>
   1a1d4:	ldr	r2, [sp, #40]	; 0x28
   1a1d8:	bl	19428 <__assert_fail@plt+0x6d54>
   1a1dc:	ldr	r0, [sp, #40]	; 0x28
   1a1e0:	bl	125f0 <freecon@plt>
   1a1e4:	b	19d54 <__assert_fail@plt+0x7680>
   1a1e8:	add	r3, r3, #72	; 0x48
   1a1ec:	add	r2, sp, #24
   1a1f0:	ldm	r3, {r0, r1}
   1a1f4:	ldr	r4, [r8, #8]
   1a1f8:	stm	r2, {r0, r1}
   1a1fc:	bl	19b0c <__assert_fail@plt+0x7438>
   1a200:	mov	r1, r4
   1a204:	mov	r2, r0
   1a208:	mov	r0, r7
   1a20c:	bl	19428 <__assert_fail@plt+0x6d54>
   1a210:	b	19d54 <__assert_fail@plt+0x7680>
   1a214:	ldrd	r0, [r3, #64]	; 0x40
   1a218:	mov	r4, #512	; 0x200
   1a21c:	add	r2, sp, #144	; 0x90
   1a220:	mov	r5, #0
   1a224:	ldr	r8, [r8, #8]
   1a228:	strd	r4, [sp]
   1a22c:	strd	r4, [sp, #8]
   1a230:	mov	r3, #0
   1a234:	b	1a01c <__assert_fail@plt+0x7948>
   1a238:	add	r3, r3, #88	; 0x58
   1a23c:	add	r2, sp, #32
   1a240:	b	1a1f0 <__assert_fail@plt+0x7b1c>
   1a244:	ldr	r1, [r8, #8]
   1a248:	bl	19428 <__assert_fail@plt+0x6d54>
   1a24c:	b	19d54 <__assert_fail@plt+0x7680>
   1a250:	ldrd	r0, [r3]
   1a254:	mov	r4, #1
   1a258:	b	1a21c <__assert_fail@plt+0x7b48>
   1a25c:	ldr	r0, [r3, #24]
   1a260:	str	r3, [sp, #20]
   1a264:	bl	12074 <getpwuid@plt>
   1a268:	ldr	r3, [sp, #20]
   1a26c:	subs	r2, r0, #0
   1a270:	beq	1a034 <__assert_fail@plt+0x7960>
   1a274:	ldr	r1, [r8, #8]
   1a278:	mov	ip, #115	; 0x73
   1a27c:	ldr	r3, [r8, #12]
   1a280:	mov	r0, r7
   1a284:	strb	ip, [r1, r3]
   1a288:	ldr	r1, [r8, #8]
   1a28c:	ldr	r2, [r2]
   1a290:	bl	19428 <__assert_fail@plt+0x6d54>
   1a294:	b	19d54 <__assert_fail@plt+0x7680>
   1a298:	ldrd	r0, [r3, #96]	; 0x60
   1a29c:	b	1a254 <__assert_fail@plt+0x7b80>
   1a2a0:	ldrd	r0, [r3, #64]	; 0x40
   1a2a4:	mov	r2, #1024	; 0x400
   1a2a8:	ldr	r8, [r8, #8]
   1a2ac:	mov	r4, #512	; 0x200
   1a2b0:	mov	r5, #0
   1a2b4:	mov	r3, #0
   1a2b8:	strd	r4, [sp]
   1a2bc:	strd	r2, [sp, #8]
   1a2c0:	add	r2, sp, #144	; 0x90
   1a2c4:	b	1a230 <__assert_fail@plt+0x7b5c>
   1a2c8:	ldr	r3, [r3, #16]
   1a2cc:	and	r3, r3, #61440	; 0xf000
   1a2d0:	cmp	r3, #40960	; 0xa000
   1a2d4:	beq	1a524 <__assert_fail@plt+0x7e50>
   1a2d8:	mov	r0, r7
   1a2dc:	ldr	r1, [r8, #8]
   1a2e0:	movw	r2, #15168	; 0x3b40
   1a2e4:	movt	r2, #3
   1a2e8:	bl	1953c <__assert_fail@plt+0x6e68>
   1a2ec:	mov	r5, #0
   1a2f0:	mov	r0, r5
   1a2f4:	bl	120c8 <free@plt>
   1a2f8:	b	19d54 <__assert_fail@plt+0x7680>
   1a2fc:	ldr	r2, [r3, #16]
   1a300:	ldr	r1, [r8, #8]
   1a304:	ubfx	r2, r2, #0, #12
   1a308:	bl	19428 <__assert_fail@plt+0x6d54>
   1a30c:	b	19d54 <__assert_fail@plt+0x7680>
   1a310:	ldr	r0, [r3, #20]
   1a314:	b	19ffc <__assert_fail@plt+0x7928>
   1a318:	ldr	r1, [r8, #8]
   1a31c:	mov	r2, r4
   1a320:	bl	1953c <__assert_fail@plt+0x6e68>
   1a324:	b	19d54 <__assert_fail@plt+0x7680>
   1a328:	ldrd	r0, [r3, #48]	; 0x30
   1a32c:	b	1a254 <__assert_fail@plt+0x7b80>
   1a330:	add	r3, r3, #80	; 0x50
   1a334:	add	r2, sp, #40	; 0x28
   1a338:	b	1a1f0 <__assert_fail@plt+0x7b1c>
   1a33c:	movw	r3, #29328	; 0x7290
   1a340:	movt	r3, #4
   1a344:	ldr	r1, [r8, #8]
   1a348:	ldr	r2, [r3]
   1a34c:	bl	19428 <__assert_fail@plt+0x6d54>
   1a350:	b	19d54 <__assert_fail@plt+0x7680>
   1a354:	mov	r0, r4
   1a358:	bl	2125c <__assert_fail@plt+0xeb88>
   1a35c:	ldr	r1, [r8, #8]
   1a360:	mov	r4, r0
   1a364:	mov	r0, r7
   1a368:	mov	r2, r4
   1a36c:	bl	1953c <__assert_fail@plt+0x6e68>
   1a370:	mov	r0, r4
   1a374:	bl	120c8 <free@plt>
   1a378:	b	19d54 <__assert_fail@plt+0x7680>
   1a37c:	mov	r0, r4
   1a380:	mov	r1, #47	; 0x2f
   1a384:	bl	1256c <strrchr@plt>
   1a388:	subs	r9, r0, #0
   1a38c:	beq	1a50c <__assert_fail@plt+0x7e38>
   1a390:	mov	r0, r4
   1a394:	rsb	r4, r4, r9
   1a398:	bl	12458 <__strdup@plt>
   1a39c:	mov	r3, #0
   1a3a0:	mov	r5, r0
   1a3a4:	mov	r0, r7
   1a3a8:	strb	r3, [r5, r4]
   1a3ac:	mov	r2, r5
   1a3b0:	ldr	r1, [r8, #8]
   1a3b4:	bl	1953c <__assert_fail@plt+0x6e68>
   1a3b8:	ldr	r2, [sp, #796]	; 0x31c
   1a3bc:	ldr	r3, [r6]
   1a3c0:	cmp	r2, r3
   1a3c4:	moveq	r0, r5
   1a3c8:	beq	1a144 <__assert_fail@plt+0x7a70>
   1a3cc:	bl	12188 <__stack_chk_fail@plt>
   1a3d0:	ldrd	r0, [r3, #64]	; 0x40
   1a3d4:	vldr	d8, [pc, #196]	; 1a4a0 <__assert_fail@plt+0x7dcc>
   1a3d8:	bl	2e4a8 <fts_children@@Base+0x20dc>
   1a3dc:	vmov	d6, r0, r1
   1a3e0:	mov	r0, r4
   1a3e4:	mov	r1, r5
   1a3e8:	vmul.f64	d8, d6, d8
   1a3ec:	bl	2e4a8 <fts_children@@Base+0x20dc>
   1a3f0:	vmov	d6, r0, r1
   1a3f4:	vdiv.f64	d7, d8, d6
   1a3f8:	b	1a0d0 <__assert_fail@plt+0x79fc>
   1a3fc:	bl	18850 <__assert_fail@plt+0x617c>
   1a400:	movw	r3, #29328	; 0x7290
   1a404:	movw	ip, #34452	; 0x8694
   1a408:	movt	r3, #4
   1a40c:	movt	ip, #1
   1a410:	movw	r2, #34616	; 0x8738
   1a414:	add	r1, sp, #40	; 0x28
   1a418:	movt	r2, #1
   1a41c:	cmp	r0, #0
   1a420:	ldr	r0, [r3, #12]
   1a424:	moveq	r2, ip
   1a428:	blx	r2
   1a42c:	cmp	r0, #0
   1a430:	beq	1a554 <__assert_fail@plt+0x7e80>
   1a434:	bl	12434 <__errno_location@plt>
   1a438:	ldr	r1, [r8, #8]
   1a43c:	ldr	r3, [r0]
   1a440:	mov	r5, r0
   1a444:	mov	r0, r7
   1a448:	cmp	r3, #2
   1a44c:	beq	1a56c <__assert_fail@plt+0x7e98>
   1a450:	cmp	r3, #40	; 0x28
   1a454:	beq	1a55c <__assert_fail@plt+0x7e88>
   1a458:	movw	r2, #2992	; 0xbb0
   1a45c:	movt	r2, #3
   1a460:	bl	19428 <__assert_fail@plt+0x6d54>
   1a464:	mov	r1, r4
   1a468:	mov	r0, #0
   1a46c:	ldr	r5, [r5]
   1a470:	bl	190b8 <__assert_fail@plt+0x69e4>
   1a474:	movw	r2, #15064	; 0x3ad8
   1a478:	movt	r2, #3
   1a47c:	mov	r1, r5
   1a480:	mov	r3, r0
   1a484:	mov	r0, #0
   1a488:	bl	122cc <error@plt>
   1a48c:	b	19d54 <__assert_fail@plt+0x7680>
   1a490:	andeq	r0, r0, r0
   1a494:	svcvc	0x00f00000	; IMB
   1a498:	andeq	r0, r0, r0
   1a49c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a4a0:	andeq	r0, r0, r0
   1a4a4:	addmi	r0, r0, r0
   1a4a8:	movw	r2, #15168	; 0x3b40
   1a4ac:	movt	r2, #3
   1a4b0:	bl	19428 <__assert_fail@plt+0x6d54>
   1a4b4:	bl	12434 <__errno_location@plt>
   1a4b8:	mov	r2, #5
   1a4bc:	movw	r1, #62800	; 0xf550
   1a4c0:	movt	r1, #2
   1a4c4:	ldr	r7, [r0]
   1a4c8:	mov	r0, #0
   1a4cc:	bl	1217c <dcgettext@plt>
   1a4d0:	mov	r1, r4
   1a4d4:	mov	r8, r0
   1a4d8:	mov	r0, #0
   1a4dc:	bl	190b8 <__assert_fail@plt+0x69e4>
   1a4e0:	mov	r1, r7
   1a4e4:	mov	r2, r8
   1a4e8:	mov	r3, r0
   1a4ec:	mov	r0, #0
   1a4f0:	bl	122cc <error@plt>
   1a4f4:	mov	r3, #1
   1a4f8:	str	r3, [r5, #28]
   1a4fc:	b	19d54 <__assert_fail@plt+0x7680>
   1a500:	movw	r2, #15168	; 0x3b40
   1a504:	movt	r2, #3
   1a508:	b	1a08c <__assert_fail@plt+0x79b8>
   1a50c:	mov	r0, r7
   1a510:	ldr	r1, [r8, #8]
   1a514:	movw	r2, #7340	; 0x1cac
   1a518:	movt	r2, #3
   1a51c:	bl	1953c <__assert_fail@plt+0x6e68>
   1a520:	b	19d54 <__assert_fail@plt+0x7680>
   1a524:	movw	r9, #29328	; 0x7290
   1a528:	movt	r9, #4
   1a52c:	ldr	r0, [r9, #16]
   1a530:	ldr	r1, [r9, #12]
   1a534:	bl	20e38 <__assert_fail@plt+0xe764>
   1a538:	subs	r5, r0, #0
   1a53c:	beq	1a57c <__assert_fail@plt+0x7ea8>
   1a540:	mov	r0, r7
   1a544:	ldr	r1, [r8, #8]
   1a548:	mov	r2, r5
   1a54c:	bl	1953c <__assert_fail@plt+0x6e68>
   1a550:	b	1a2f0 <__assert_fail@plt+0x7c1c>
   1a554:	ldr	r0, [sp, #56]	; 0x38
   1a558:	b	1a0e8 <__assert_fail@plt+0x7a14>
   1a55c:	movw	r2, #18780	; 0x495c
   1a560:	movt	r2, #3
   1a564:	bl	19428 <__assert_fail@plt+0x6d54>
   1a568:	b	19d54 <__assert_fail@plt+0x7680>
   1a56c:	movw	r2, #2568	; 0xa08
   1a570:	movt	r2, #3
   1a574:	bl	19428 <__assert_fail@plt+0x6d54>
   1a578:	b	19d54 <__assert_fail@plt+0x7680>
   1a57c:	bl	12434 <__errno_location@plt>
   1a580:	mov	r1, r4
   1a584:	ldr	r0, [r0]
   1a588:	bl	190e4 <__assert_fail@plt+0x6a10>
   1a58c:	mov	r3, #1
   1a590:	str	r3, [r9, #28]
   1a594:	b	1a2d8 <__assert_fail@plt+0x7c04>
   1a598:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a59c:	mov	r7, r0
   1a5a0:	ldr	r4, [r2, #40]	; 0x28
   1a5a4:	sub	sp, sp, #12
   1a5a8:	mov	r5, r1
   1a5ac:	add	r6, r2, #40	; 0x28
   1a5b0:	cmp	r4, #0
   1a5b4:	beq	1a678 <__assert_fail@plt+0x7fa4>
   1a5b8:	mvn	r8, #0
   1a5bc:	ldr	ip, [r4]
   1a5c0:	cmp	ip, #2
   1a5c4:	bne	1a6f4 <__assert_fail@plt+0x8020>
   1a5c8:	ldrb	ip, [r4, #5]
   1a5cc:	cmp	ip, #0
   1a5d0:	beq	1a6f4 <__assert_fail@plt+0x8020>
   1a5d4:	ldrb	r3, [r4, #4]
   1a5d8:	sub	r3, r3, #65	; 0x41
   1a5dc:	cmp	r3, #19
   1a5e0:	ldrls	pc, [pc, r3, lsl #2]
   1a5e4:	b	1a6d8 <__assert_fail@plt+0x8004>
   1a5e8:	andeq	sl, r1, r0, asr #13
   1a5ec:	muleq	r1, r8, r6
   1a5f0:	andeq	sl, r1, r4, lsl #13
   1a5f4:	ldrdeq	sl, [r1], -r8
   1a5f8:	ldrdeq	sl, [r1], -r8
   1a5fc:	ldrdeq	sl, [r1], -r8
   1a600:	ldrdeq	sl, [r1], -r8
   1a604:	ldrdeq	sl, [r1], -r8
   1a608:	ldrdeq	sl, [r1], -r8
   1a60c:	ldrdeq	sl, [r1], -r8
   1a610:	ldrdeq	sl, [r1], -r8
   1a614:	ldrdeq	sl, [r1], -r8
   1a618:	ldrdeq	sl, [r1], -r8
   1a61c:	ldrdeq	sl, [r1], -r8
   1a620:	ldrdeq	sl, [r1], -r8
   1a624:	ldrdeq	sl, [r1], -r8
   1a628:	ldrdeq	sl, [r1], -r8
   1a62c:	ldrdeq	sl, [r1], -r8
   1a630:	ldrdeq	sl, [r1], -r8
   1a634:	andeq	sl, r1, r8, lsr r6
   1a638:	ldr	r1, [r5, #80]	; 0x50
   1a63c:	add	r3, sp, #8
   1a640:	ldr	r2, [r5, #84]	; 0x54
   1a644:	str	r1, [r3, #-8]!
   1a648:	str	r2, [sp, #4]
   1a64c:	mov	r2, ip
   1a650:	ldm	r3, {r0, r1}
   1a654:	ldr	r9, [r4, #8]
   1a658:	bl	1958c <__assert_fail@plt+0x6eb8>
   1a65c:	mov	r1, r9
   1a660:	mov	r2, r0
   1a664:	mov	r0, r6
   1a668:	bl	19428 <__assert_fail@plt+0x6d54>
   1a66c:	ldr	r4, [r4, #16]
   1a670:	cmp	r4, #0
   1a674:	bne	1a5bc <__assert_fail@plt+0x7ee8>
   1a678:	mov	r0, #1
   1a67c:	add	sp, sp, #12
   1a680:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a684:	ldr	r1, [r5, #88]	; 0x58
   1a688:	add	r3, sp, #8
   1a68c:	ldr	r2, [r5, #92]	; 0x5c
   1a690:	str	r1, [r3, #-8]!
   1a694:	b	1a648 <__assert_fail@plt+0x7f74>
   1a698:	cmp	ip, #64	; 0x40
   1a69c:	str	r8, [sp]
   1a6a0:	str	r8, [sp, #4]
   1a6a4:	beq	1a70c <__assert_fail@plt+0x8038>
   1a6a8:	movw	r2, #15168	; 0x3b40
   1a6ac:	mov	r0, r6
   1a6b0:	movt	r2, #3
   1a6b4:	ldr	r1, [r4, #8]
   1a6b8:	bl	19428 <__assert_fail@plt+0x6d54>
   1a6bc:	b	1a66c <__assert_fail@plt+0x7f98>
   1a6c0:	add	r1, r5, #72	; 0x48
   1a6c4:	mov	r3, sp
   1a6c8:	ldr	r2, [r5, #76]	; 0x4c
   1a6cc:	ldm	r1, {r0, r1}
   1a6d0:	stm	sp, {r0, r1}
   1a6d4:	b	1a648 <__assert_fail@plt+0x7f74>
   1a6d8:	movw	r0, #62676	; 0xf4d4
   1a6dc:	movw	r1, #2572	; 0xa0c
   1a6e0:	movt	r0, #2
   1a6e4:	movt	r1, #3
   1a6e8:	movw	r2, #1285	; 0x505
   1a6ec:	ldr	r3, [pc, #36]	; 1a718 <__assert_fail@plt+0x8044>
   1a6f0:	bl	126d4 <__assert_fail@plt>
   1a6f4:	mov	r0, r6
   1a6f8:	mov	r1, r4
   1a6fc:	mov	r2, r7
   1a700:	mov	r3, r5
   1a704:	bl	19d14 <__assert_fail@plt+0x7640>
   1a708:	b	1a66c <__assert_fail@plt+0x7f98>
   1a70c:	mov	r3, sp
   1a710:	mvn	r2, #0
   1a714:	b	1a648 <__assert_fail@plt+0x7f74>
   1a718:			; <UNDEFINED> instruction: 0x000309b0
   1a71c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a720:	mov	r9, r0
   1a724:	ldrb	r5, [sp, #40]	; 0x28
   1a728:	mov	fp, r1
   1a72c:	mov	r6, r2
   1a730:	mov	r8, r3
   1a734:	cmp	r5, #123	; 0x7b
   1a738:	ldrb	sl, [sp, #44]	; 0x2c
   1a73c:	beq	1aa90 <__assert_fail@plt+0x83bc>
   1a740:	cmp	r5, #91	; 0x5b
   1a744:	beq	1aa74 <__assert_fail@plt+0x83a0>
   1a748:	cmp	r5, #40	; 0x28
   1a74c:	beq	1aaac <__assert_fail@plt+0x83d8>
   1a750:	mov	r0, #20
   1a754:	bl	28e14 <__assert_fail@plt+0x16740>
   1a758:	mov	r3, #0
   1a75c:	mov	r4, r0
   1a760:	add	r0, r6, #2
   1a764:	str	r4, [r9]
   1a768:	str	r3, [r4, #16]
   1a76c:	str	r8, [r4]
   1a770:	strb	r5, [r4, #4]
   1a774:	strb	sl, [r4, #5]
   1a778:	str	r6, [r4, #12]
   1a77c:	bl	28e14 <__assert_fail@plt+0x16740>
   1a780:	mov	r1, fp
   1a784:	mov	r2, r6
   1a788:	mov	r7, r0
   1a78c:	str	r0, [r4, #8]
   1a790:	bl	12488 <strncpy@plt>
   1a794:	cmp	r8, #1
   1a798:	add	r3, r7, r6
   1a79c:	bls	1a92c <__assert_fail@plt+0x8258>
   1a7a0:	cmp	r8, #2
   1a7a4:	bne	1aac8 <__assert_fail@plt+0x83f4>
   1a7a8:	sub	r5, r5, #37	; 0x25
   1a7ac:	cmp	r5, #84	; 0x54
   1a7b0:	ldrls	pc, [pc, r5, lsl #2]
   1a7b4:	b	1a918 <__assert_fail@plt+0x8244>
   1a7b8:	andeq	sl, r1, r4, asr #19
   1a7bc:	andeq	sl, r1, r8, lsl r9
   1a7c0:	andeq	sl, r1, r8, lsl r9
   1a7c4:	andeq	sl, r1, r8, lsl r9
   1a7c8:	andeq	sl, r1, r8, lsl r9
   1a7cc:	andeq	sl, r1, r8, lsl r9
   1a7d0:	andeq	sl, r1, r8, lsl r9
   1a7d4:	andeq	sl, r1, r8, lsl r9
   1a7d8:	andeq	sl, r1, r8, lsl r9
   1a7dc:	andeq	sl, r1, r8, lsl r9
   1a7e0:	andeq	sl, r1, r8, lsl r9
   1a7e4:	andeq	sl, r1, r8, lsl r9
   1a7e8:	andeq	sl, r1, r8, lsl r9
   1a7ec:	andeq	sl, r1, r8, lsl r9
   1a7f0:	andeq	sl, r1, r8, lsl r9
   1a7f4:	andeq	sl, r1, r8, lsl r9
   1a7f8:	andeq	sl, r1, r8, lsl r9
   1a7fc:	andeq	sl, r1, r8, lsl r9
   1a800:	andeq	sl, r1, r8, lsl r9
   1a804:	andeq	sl, r1, r8, lsl r9
   1a808:	andeq	sl, r1, r8, lsl r9
   1a80c:	andeq	sl, r1, r8, lsl r9
   1a810:	andeq	sl, r1, r8, lsl r9
   1a814:	andeq	sl, r1, r8, lsl r9
   1a818:	andeq	sl, r1, r8, lsl r9
   1a81c:	andeq	sl, r1, r8, lsl r9
   1a820:	andeq	sl, r1, r8, lsl r9
   1a824:	andeq	sl, r1, r8, lsl r9
   1a828:	andeq	sl, r1, ip, asr #18
   1a82c:	andeq	sl, r1, ip, asr #18
   1a830:	andeq	sl, r1, ip, asr #18
   1a834:	andeq	sl, r1, ip, asr #18
   1a838:	andeq	sl, r1, r8, lsl r9
   1a83c:	andeq	sl, r1, ip, asr #18
   1a840:	andeq	sl, r1, ip, asr #18
   1a844:	andeq	sl, r1, ip, lsl #18
   1a848:	andeq	sl, r1, r8, lsl r9
   1a84c:	andeq	sl, r1, r8, lsl r9
   1a850:	andeq	sl, r1, r8, lsl r9
   1a854:	andeq	sl, r1, r8, lsl r9
   1a858:	andeq	sl, r1, ip, asr #18
   1a85c:	andeq	sl, r1, r8, lsl r9
   1a860:	andeq	sl, r1, r8, lsl r9
   1a864:	andeq	sl, r1, ip, lsl #18
   1a868:	andeq	sl, r1, r8, lsl r9
   1a86c:	andeq	sl, r1, r8, lsl r9
   1a870:	andeq	sl, r1, r4, asr sl
   1a874:	andeq	sl, r1, ip, asr #18
   1a878:	andeq	sl, r1, ip, asr #18
   1a87c:	andeq	sl, r1, r8, lsl r9
   1a880:	andeq	sl, r1, r8, lsl r9
   1a884:	andeq	sl, r1, r8, lsl r9
   1a888:	ldrdeq	sl, [r1], -r4
   1a88c:	strdeq	sl, [r1], -r4
   1a890:	andeq	sl, r1, r8, lsl r9
   1a894:	andeq	sl, r1, r8, lsl r9
   1a898:	andeq	sl, r1, r8, lsl r9
   1a89c:	andeq	sl, r1, r8, lsl r9
   1a8a0:	andeq	sl, r1, r8, lsl r9
   1a8a4:	andeq	sl, r1, r8, lsl r9
   1a8a8:	andeq	sl, r1, ip, asr #18
   1a8ac:	andeq	sl, r1, ip, asr #18
   1a8b0:	andeq	sl, r1, ip, asr #18
   1a8b4:	andeq	sl, r1, r8, lsl #20
   1a8b8:	andeq	sl, r1, r8, lsl r9
   1a8bc:	andeq	sl, r1, ip, lsl #18
   1a8c0:	andeq	sl, r1, ip, asr #18
   1a8c4:	andeq	sl, r1, ip, lsl #18
   1a8c8:	andeq	sl, r1, r8, lsl sl
   1a8cc:	andeq	sl, r1, r8, lsl r9
   1a8d0:	andeq	sl, r1, ip, asr #18
   1a8d4:	andeq	sl, r1, r4, lsr #19
   1a8d8:	andeq	sl, r1, r4, lsr sl
   1a8dc:	andeq	sl, r1, ip, asr #18
   1a8e0:	andeq	sl, r1, r8, lsl r9
   1a8e4:	andeq	sl, r1, ip, lsl #18
   1a8e8:	andeq	sl, r1, r8, lsl r9
   1a8ec:	andeq	sl, r1, r8, lsl r9
   1a8f0:	andeq	sl, r1, ip, asr #18
   1a8f4:	andeq	sl, r1, ip, asr #18
   1a8f8:	andeq	sl, r1, ip, asr #18
   1a8fc:	andeq	sl, r1, r8, lsl r9
   1a900:	andeq	sl, r1, r8, lsl r9
   1a904:	andeq	sl, r1, r8, lsl r9
   1a908:	andeq	sl, r1, r4, lsl #19
   1a90c:	add	r3, r3, #1
   1a910:	mov	r2, #115	; 0x73
   1a914:	strb	r2, [r7, r6]
   1a918:	mov	r2, #0
   1a91c:	strb	r2, [r3]
   1a920:	ldr	r0, [r9]
   1a924:	add	r0, r0, #16
   1a928:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a92c:	cmp	r5, #0
   1a930:	bne	1aae4 <__assert_fail@plt+0x8410>
   1a934:	cmp	sl, #0
   1a938:	bne	1ab00 <__assert_fail@plt+0x842c>
   1a93c:	ldr	r0, [r9]
   1a940:	strb	sl, [r7, r6]
   1a944:	add	r0, r0, #16
   1a948:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a94c:	ldr	r0, [sp, #48]	; 0x30
   1a950:	add	r3, r3, #1
   1a954:	mov	r2, #1
   1a958:	mov	r1, #115	; 0x73
   1a95c:	strb	r2, [r0, #18]
   1a960:	mov	r2, #3
   1a964:	strb	r1, [r7, r6]
   1a968:	mov	r1, #0
   1a96c:	strb	r1, [r3]
   1a970:	ldr	r1, [sp, #48]	; 0x30
   1a974:	ldr	r3, [r1, #24]
   1a978:	cmp	r2, r3
   1a97c:	strhi	r2, [r1, #24]
   1a980:	b	1a920 <__assert_fail@plt+0x824c>
   1a984:	ldr	r0, [sp, #48]	; 0x30
   1a988:	mov	r2, #1
   1a98c:	mov	r1, #115	; 0x73
   1a990:	add	r3, r3, #1
   1a994:	strb	r2, [r0, #19]
   1a998:	mov	r2, #2
   1a99c:	strb	r1, [r7, r6]
   1a9a0:	b	1a968 <__assert_fail@plt+0x8294>
   1a9a4:	ldr	r0, [sp, #48]	; 0x30
   1a9a8:	mov	r2, #1
   1a9ac:	mov	r1, #115	; 0x73
   1a9b0:	add	r3, r3, #1
   1a9b4:	strb	r2, [r0, #18]
   1a9b8:	mov	r2, #4
   1a9bc:	strb	r1, [r7, r6]
   1a9c0:	b	1a968 <__assert_fail@plt+0x8294>
   1a9c4:	mov	r2, #37	; 0x25
   1a9c8:	add	r3, r3, #1
   1a9cc:	strb	r2, [r7, r6]
   1a9d0:	b	1a918 <__assert_fail@plt+0x8244>
   1a9d4:	ldr	r0, [sp, #48]	; 0x30
   1a9d8:	mov	r2, #1
   1a9dc:	mov	r1, #115	; 0x73
   1a9e0:	add	r3, r3, #1
   1a9e4:	strb	r2, [r0, #18]
   1a9e8:	mov	r2, #2
   1a9ec:	strb	r1, [r7, r6]
   1a9f0:	b	1a968 <__assert_fail@plt+0x8294>
   1a9f4:	mov	r1, #115	; 0x73
   1a9f8:	add	r3, r3, #1
   1a9fc:	mov	r2, #5
   1aa00:	strb	r1, [r7, r6]
   1aa04:	b	1a968 <__assert_fail@plt+0x8294>
   1aa08:	mov	r2, #100	; 0x64
   1aa0c:	add	r3, r3, #1
   1aa10:	strb	r2, [r7, r6]
   1aa14:	b	1a918 <__assert_fail@plt+0x8244>
   1aa18:	ldr	r1, [sp, #48]	; 0x30
   1aa1c:	mov	r2, #1
   1aa20:	add	r3, r3, r2
   1aa24:	strb	r2, [r1, #20]
   1aa28:	mov	r1, #115	; 0x73
   1aa2c:	strb	r1, [r7, r6]
   1aa30:	b	1a968 <__assert_fail@plt+0x8294>
   1aa34:	mov	r0, #111	; 0x6f
   1aa38:	strb	r0, [r7, r6]
   1aa3c:	ldr	r0, [sp, #48]	; 0x30
   1aa40:	mov	r1, #1
   1aa44:	add	r3, r3, #1
   1aa48:	mov	r2, #3
   1aa4c:	strb	r1, [r0, #18]
   1aa50:	b	1a968 <__assert_fail@plt+0x8294>
   1aa54:	ldr	r0, [sp, #48]	; 0x30
   1aa58:	mov	r2, #1
   1aa5c:	mov	r1, #103	; 0x67
   1aa60:	add	r3, r3, #1
   1aa64:	strb	r2, [r0, #18]
   1aa68:	mov	r2, #3
   1aa6c:	strb	r1, [r7, r6]
   1aa70:	b	1a968 <__assert_fail@plt+0x8294>
   1aa74:	movw	r0, #3016	; 0xbc8
   1aa78:	movw	r1, #2572	; 0xa0c
   1aa7c:	movt	r0, #3
   1aa80:	movt	r1, #3
   1aa84:	mov	r2, #90	; 0x5a
   1aa88:	ldr	r3, [pc, #140]	; 1ab1c <__assert_fail@plt+0x8448>
   1aa8c:	bl	126d4 <__assert_fail@plt>
   1aa90:	movw	r0, #2996	; 0xbb4
   1aa94:	movw	r1, #2572	; 0xa0c
   1aa98:	movt	r0, #3
   1aa9c:	movt	r1, #3
   1aaa0:	mov	r2, #89	; 0x59
   1aaa4:	ldr	r3, [pc, #112]	; 1ab1c <__assert_fail@plt+0x8448>
   1aaa8:	bl	126d4 <__assert_fail@plt>
   1aaac:	movw	r0, #3036	; 0xbdc
   1aab0:	movw	r1, #2572	; 0xa0c
   1aab4:	movt	r0, #3
   1aab8:	movt	r1, #3
   1aabc:	mov	r2, #91	; 0x5b
   1aac0:	ldr	r3, [pc, #84]	; 1ab1c <__assert_fail@plt+0x8448>
   1aac4:	bl	126d4 <__assert_fail@plt>
   1aac8:	movw	r0, #3100	; 0xc1c
   1aacc:	movw	r1, #2572	; 0xa0c
   1aad0:	movt	r0, #3
   1aad4:	movt	r1, #3
   1aad8:	mov	r2, #116	; 0x74
   1aadc:	ldr	r3, [pc, #56]	; 1ab1c <__assert_fail@plt+0x8448>
   1aae0:	bl	126d4 <__assert_fail@plt>
   1aae4:	movw	r0, #3056	; 0xbf0
   1aae8:	movw	r1, #2572	; 0xa0c
   1aaec:	movt	r0, #3
   1aaf0:	movt	r1, #3
   1aaf4:	mov	r2, #108	; 0x6c
   1aaf8:	ldr	r3, [pc, #28]	; 1ab1c <__assert_fail@plt+0x8448>
   1aafc:	bl	126d4 <__assert_fail@plt>
   1ab00:	movw	r0, #3076	; 0xc04
   1ab04:	movw	r1, #2572	; 0xa0c
   1ab08:	movt	r0, #3
   1ab0c:	movt	r1, #3
   1ab10:	mov	r2, #109	; 0x6d
   1ab14:	ldr	r3, [pc]	; 1ab1c <__assert_fail@plt+0x8448>
   1ab18:	bl	126d4 <__assert_fail@plt>
   1ab1c:	andeq	r0, r3, r0, asr #19
   1ab20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab24:	mov	r4, r0
   1ab28:	sub	sp, sp, #16
   1ab2c:	mov	r0, r1
   1ab30:	movw	r1, #42392	; 0xa598
   1ab34:	movt	r1, #1
   1ab38:	mov	r6, r2
   1ab3c:	bl	17f84 <__assert_fail@plt+0x58b0>
   1ab40:	mov	r7, #1
   1ab44:	mov	r5, #0
   1ab48:	mov	r8, r0
   1ab4c:	add	ip, r0, #40	; 0x28
   1ab50:	ldm	r4!, {r0, r1, r2, r3}
   1ab54:	mov	r9, ip
   1ab58:	strb	r7, [r8, #17]
   1ab5c:	strb	r7, [r8, #16]
   1ab60:	stmia	ip!, {r0, r1, r2, r3}
   1ab64:	ldr	r3, [r4]
   1ab68:	str	r3, [ip]
   1ab6c:	strb	r5, [r8, #19]
   1ab70:	strb	r5, [r8, #18]
   1ab74:	str	r5, [r8, #24]
   1ab78:	str	r5, [r8, #40]	; 0x28
   1ab7c:	ldrb	r3, [r6]
   1ab80:	cmp	r3, r5
   1ab84:	beq	1ac54 <__assert_fail@plt+0x8580>
   1ab88:	mov	r7, r6
   1ab8c:	b	1abac <__assert_fail@plt+0x84d8>
   1ab90:	cmp	r3, #37	; 0x25
   1ab94:	beq	1ac60 <__assert_fail@plt+0x858c>
   1ab98:	mov	r5, r6
   1ab9c:	add	r6, r6, #1
   1aba0:	ldrb	r3, [r5, #1]
   1aba4:	cmp	r3, #0
   1aba8:	beq	1ac4c <__assert_fail@plt+0x8578>
   1abac:	cmp	r3, #92	; 0x5c
   1abb0:	bne	1ab90 <__assert_fail@plt+0x84bc>
   1abb4:	ldrb	r3, [r6, #1]
   1abb8:	cmp	r3, #99	; 0x63
   1abbc:	beq	1af54 <__assert_fail@plt+0x8880>
   1abc0:	sub	r2, r3, #48	; 0x30
   1abc4:	cmp	r2, #7
   1abc8:	bhi	1adc0 <__assert_fail@plt+0x86ec>
   1abcc:	mov	r3, #0
   1abd0:	mov	r0, r6
   1abd4:	mov	r1, r3
   1abd8:	ldrb	r2, [r0, #1]!
   1abdc:	mov	r5, r3
   1abe0:	sub	ip, r2, #48	; 0x30
   1abe4:	add	r2, r2, r1, lsl #3
   1abe8:	cmp	ip, #7
   1abec:	bhi	1ac04 <__assert_fail@plt+0x8530>
   1abf0:	add	r3, r3, #1
   1abf4:	sub	r1, r2, #48	; 0x30
   1abf8:	cmp	r3, #3
   1abfc:	mov	r5, r3
   1ac00:	bne	1abd8 <__assert_fail@plt+0x8504>
   1ac04:	add	ip, r3, #1
   1ac08:	strb	r1, [r6]
   1ac0c:	rsb	r2, r7, r6
   1ac10:	mov	r3, #0
   1ac14:	mov	r0, r9
   1ac18:	mov	r1, r7
   1ac1c:	str	r3, [sp]
   1ac20:	add	r2, r2, #1
   1ac24:	str	r3, [sp, #4]
   1ac28:	add	r7, r6, ip
   1ac2c:	str	r8, [sp, #8]
   1ac30:	add	r5, r6, r5
   1ac34:	bl	1a71c <__assert_fail@plt+0x8048>
   1ac38:	add	r6, r5, #1
   1ac3c:	ldrb	r3, [r5, #1]
   1ac40:	cmp	r3, #0
   1ac44:	mov	r9, r0
   1ac48:	bne	1abac <__assert_fail@plt+0x84d8>
   1ac4c:	cmp	r6, r7
   1ac50:	bhi	1af04 <__assert_fail@plt+0x8830>
   1ac54:	mov	r0, #1
   1ac58:	add	sp, sp, #16
   1ac5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac60:	ldrb	r4, [r6, #1]
   1ac64:	cmp	r4, #0
   1ac68:	beq	1ae2c <__assert_fail@plt+0x8758>
   1ac6c:	cmp	r4, #37	; 0x25
   1ac70:	addeq	r2, r6, #1
   1ac74:	moveq	r3, #0
   1ac78:	moveq	r5, r2
   1ac7c:	beq	1aea4 <__assert_fail@plt+0x87d0>
   1ac80:	mov	r5, #1
   1ac84:	b	1aca0 <__assert_fail@plt+0x85cc>
   1ac88:	bl	123e0 <strchr@plt>
   1ac8c:	add	r3, r5, #1
   1ac90:	cmp	r0, #0
   1ac94:	beq	1acb4 <__assert_fail@plt+0x85e0>
   1ac98:	ldrb	r4, [r6, r3]
   1ac9c:	mov	r5, r3
   1aca0:	cmp	r4, #0
   1aca4:	movw	r0, #3192	; 0xc78
   1aca8:	mov	r1, r4
   1acac:	movt	r0, #3
   1acb0:	bne	1ac88 <__assert_fail@plt+0x85b4>
   1acb4:	bl	12398 <__ctype_b_loc@plt>
   1acb8:	add	r2, r6, r5
   1acbc:	ldr	r1, [r0]
   1acc0:	b	1accc <__assert_fail@plt+0x85f8>
   1acc4:	ldrb	r4, [r2, #1]!
   1acc8:	add	r5, r5, #1
   1accc:	sxth	r3, r4
   1acd0:	lsl	r3, r3, #1
   1acd4:	ldrh	r3, [r1, r3]
   1acd8:	tst	r3, #2048	; 0x800
   1acdc:	bne	1acc4 <__assert_fail@plt+0x85f0>
   1ace0:	cmp	r4, #46	; 0x2e
   1ace4:	addne	r5, r6, r5
   1ace8:	beq	1ae5c <__assert_fail@plt+0x8788>
   1acec:	movw	r0, #3200	; 0xc80
   1acf0:	mov	r1, r4
   1acf4:	movt	r0, #3
   1acf8:	bl	123e0 <strchr@plt>
   1acfc:	cmp	r0, #0
   1ad00:	beq	1aecc <__assert_fail@plt+0x87f8>
   1ad04:	cmp	r4, #0
   1ad08:	addeq	r6, r5, #1
   1ad0c:	moveq	sl, #1
   1ad10:	bne	1ae9c <__assert_fail@plt+0x87c8>
   1ad14:	mov	r1, r4
   1ad18:	movw	r0, #3240	; 0xca8
   1ad1c:	movt	r0, #3
   1ad20:	bl	123e0 <strchr@plt>
   1ad24:	cmp	r0, #0
   1ad28:	beq	1ad54 <__assert_fail@plt+0x8680>
   1ad2c:	mov	r2, #5
   1ad30:	movw	r1, #3244	; 0xcac
   1ad34:	mov	r0, #0
   1ad38:	movt	r1, #3
   1ad3c:	bl	1217c <dcgettext@plt>
   1ad40:	mov	r1, #0
   1ad44:	ldrb	r3, [r5]
   1ad48:	mov	r2, r0
   1ad4c:	mov	r0, #1
   1ad50:	bl	122cc <error@plt>
   1ad54:	cmp	sl, #2
   1ad58:	bne	1ad68 <__assert_fail@plt+0x8694>
   1ad5c:	ldrb	r4, [r5, #1]
   1ad60:	cmp	r4, #0
   1ad64:	beq	1af28 <__assert_fail@plt+0x8854>
   1ad68:	mov	r2, #5
   1ad6c:	movw	r1, #3384	; 0xd38
   1ad70:	mov	r0, #0
   1ad74:	movt	r1, #3
   1ad78:	bl	1217c <dcgettext@plt>
   1ad7c:	ldrb	r3, [r5]
   1ad80:	mov	r2, r0
   1ad84:	mov	r0, #0
   1ad88:	mov	r1, r0
   1ad8c:	bl	122cc <error@plt>
   1ad90:	mov	r3, #0
   1ad94:	mov	r1, r7
   1ad98:	mov	r0, r9
   1ad9c:	rsb	r2, r7, r6
   1ada0:	str	r8, [sp, #8]
   1ada4:	mov	r7, r6
   1ada8:	str	r3, [sp]
   1adac:	str	r3, [sp, #4]
   1adb0:	bl	1a71c <__assert_fail@plt+0x8048>
   1adb4:	mov	r9, r0
   1adb8:	mov	r6, r7
   1adbc:	b	1aba0 <__assert_fail@plt+0x84cc>
   1adc0:	sub	r3, r3, #92	; 0x5c
   1adc4:	uxtb	r3, r3
   1adc8:	cmp	r3, #26
   1adcc:	bls	1ae04 <__assert_fail@plt+0x8730>
   1add0:	mov	r2, #5
   1add4:	movw	r1, #3120	; 0xc30
   1add8:	mov	r0, #0
   1addc:	movt	r1, #3
   1ade0:	bl	1217c <dcgettext@plt>
   1ade4:	mov	r5, r6
   1ade8:	ldrb	r3, [r5, #1]!
   1adec:	add	r6, r6, #2
   1adf0:	mov	r2, r0
   1adf4:	mov	r0, #0
   1adf8:	mov	r1, r0
   1adfc:	bl	122cc <error@plt>
   1ae00:	b	1aba0 <__assert_fail@plt+0x84cc>
   1ae04:	movw	r2, #2360	; 0x938
   1ae08:	movt	r2, #3
   1ae0c:	add	r3, r2, r3
   1ae10:	ldrb	r3, [r3, #152]	; 0x98
   1ae14:	cmp	r3, #0
   1ae18:	beq	1add0 <__assert_fail@plt+0x86fc>
   1ae1c:	strb	r3, [r6]
   1ae20:	mov	ip, #2
   1ae24:	mov	r5, #1
   1ae28:	b	1ac0c <__assert_fail@plt+0x8538>
   1ae2c:	mov	r0, r4
   1ae30:	mov	r2, #5
   1ae34:	movw	r1, #3156	; 0xc54
   1ae38:	movt	r1, #3
   1ae3c:	bl	1217c <dcgettext@plt>
   1ae40:	mov	r1, r4
   1ae44:	mov	r3, r6
   1ae48:	mov	r2, r0
   1ae4c:	mov	r0, #1
   1ae50:	bl	122cc <error@plt>
   1ae54:	ldrb	r4, [r6, #1]
   1ae58:	b	1ac6c <__assert_fail@plt+0x8598>
   1ae5c:	add	r3, r5, #1
   1ae60:	add	r2, r6, r3
   1ae64:	ldrb	r4, [r6, r3]
   1ae68:	lsl	r3, r4, #1
   1ae6c:	ldrh	r3, [r1, r3]
   1ae70:	tst	r3, #2048	; 0x800
   1ae74:	beq	1afa0 <__assert_fail@plt+0x88cc>
   1ae78:	add	r5, r5, #2
   1ae7c:	add	r6, r6, r5
   1ae80:	mov	r5, r6
   1ae84:	ldrb	r4, [r6], #1
   1ae88:	lsl	r3, r4, #1
   1ae8c:	ldrh	r3, [r1, r3]
   1ae90:	tst	r3, #2048	; 0x800
   1ae94:	bne	1ae80 <__assert_fail@plt+0x87ac>
   1ae98:	b	1acec <__assert_fail@plt+0x8618>
   1ae9c:	mov	r2, r5
   1aea0:	mov	r3, #0
   1aea4:	mov	r1, r7
   1aea8:	rsb	r2, r7, r2
   1aeac:	stmib	sp, {r3, r8}
   1aeb0:	mov	r0, r9
   1aeb4:	str	r4, [sp]
   1aeb8:	mov	r3, #2
   1aebc:	bl	1a71c <__assert_fail@plt+0x8048>
   1aec0:	add	r7, r5, #1
   1aec4:	mov	r9, r0
   1aec8:	b	1adb8 <__assert_fail@plt+0x86e4>
   1aecc:	movw	r0, #3232	; 0xca0
   1aed0:	mov	r1, r4
   1aed4:	movt	r0, #3
   1aed8:	bl	123e0 <strchr@plt>
   1aedc:	cmp	r0, #0
   1aee0:	beq	1afa8 <__assert_fail@plt+0x88d4>
   1aee4:	ldrb	r3, [r5, #1]
   1aee8:	add	r6, r5, #1
   1aeec:	cmp	r3, #0
   1aef0:	moveq	sl, #2
   1aef4:	beq	1ad14 <__assert_fail@plt+0x8640>
   1aef8:	mov	r2, r5
   1aefc:	mov	r5, r6
   1af00:	b	1aea4 <__assert_fail@plt+0x87d0>
   1af04:	mov	r1, r7
   1af08:	str	r3, [sp]
   1af0c:	rsb	r2, r7, r6
   1af10:	stmib	sp, {r3, r8}
   1af14:	mov	r0, r9
   1af18:	bl	1a71c <__assert_fail@plt+0x8048>
   1af1c:	mov	r0, #1
   1af20:	add	sp, sp, #16
   1af24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af28:	mov	r0, r4
   1af2c:	mov	r2, #5
   1af30:	movw	r1, #3308	; 0xcec
   1af34:	movt	r1, #3
   1af38:	bl	1217c <dcgettext@plt>
   1af3c:	mov	r1, r4
   1af40:	ldrb	r3, [r5]
   1af44:	mov	r2, r0
   1af48:	mov	r0, r4
   1af4c:	bl	122cc <error@plt>
   1af50:	b	1ad90 <__assert_fail@plt+0x86bc>
   1af54:	mov	ip, #0
   1af58:	mov	r3, #1
   1af5c:	mov	r1, r7
   1af60:	str	r8, [sp, #8]
   1af64:	rsb	r2, r7, r6
   1af68:	mov	r0, r9
   1af6c:	str	ip, [sp]
   1af70:	str	ip, [sp, #4]
   1af74:	bl	1a71c <__assert_fail@plt+0x8048>
   1af78:	ldrb	r3, [r8, #18]
   1af7c:	cmp	r3, #0
   1af80:	beq	1ac54 <__assert_fail@plt+0x8580>
   1af84:	ldr	r3, [r8, #24]
   1af88:	mov	r0, #1
   1af8c:	cmp	r3, #2
   1af90:	movls	r3, #3
   1af94:	strls	r3, [r8, #24]
   1af98:	add	sp, sp, #16
   1af9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1afa0:	mov	r5, r2
   1afa4:	b	1acec <__assert_fail@plt+0x8618>
   1afa8:	add	r6, r5, #1
   1afac:	mov	sl, r0
   1afb0:	b	1ad14 <__assert_fail@plt+0x8640>
   1afb4:	andeq	r0, r0, r0
   1afb8:	b	2c9d8 <fts_children@@Base+0x60c>
   1afbc:	movw	r3, #26008	; 0x6598
   1afc0:	movt	r3, #4
   1afc4:	push	{r4, lr}
   1afc8:	sub	sp, sp, #8
   1afcc:	ldr	r3, [r3]
   1afd0:	movw	r0, #62280	; 0xf348
   1afd4:	movt	r0, #2
   1afd8:	movw	r4, #29372	; 0x72bc
   1afdc:	movt	r4, #4
   1afe0:	str	r3, [sp, #4]
   1afe4:	bl	1ee88 <__assert_fail@plt+0xc7b4>
   1afe8:	mov	r2, #5
   1afec:	movw	r1, #5008	; 0x1390
   1aff0:	mov	r0, #0
   1aff4:	movt	r1, #3
   1aff8:	bl	1217c <dcgettext@plt>
   1affc:	mov	r1, r0
   1b000:	mov	r0, #1
   1b004:	bl	124a0 <__printf_chk@plt>
   1b008:	movw	r1, #5028	; 0x13a4
   1b00c:	mov	r0, #1
   1b010:	movt	r1, #3
   1b014:	bl	124a0 <__printf_chk@plt>
   1b018:	ldrb	r1, [r4, #56]	; 0x38
   1b01c:	movw	r3, #4988	; 0x137c
   1b020:	movt	r3, #3
   1b024:	cmp	r1, #0
   1b028:	movw	r2, #4996	; 0x1384
   1b02c:	movw	r1, #5036	; 0x13ac
   1b030:	movt	r2, #3
   1b034:	movt	r1, #3
   1b038:	movne	r2, r3
   1b03c:	mov	r0, #1
   1b040:	bl	124a0 <__printf_chk@plt>
   1b044:	movw	r1, #5052	; 0x13bc
   1b048:	mov	r0, #1
   1b04c:	movt	r1, #3
   1b050:	bl	124a0 <__printf_chk@plt>
   1b054:	bl	12050 <is_selinux_enabled@plt>
   1b058:	cmp	r0, #0
   1b05c:	ble	1b070 <__assert_fail@plt+0x899c>
   1b060:	movw	r1, #5072	; 0x13d0
   1b064:	mov	r0, #1
   1b068:	movt	r1, #3
   1b06c:	bl	124a0 <__printf_chk@plt>
   1b070:	add	r0, sp, #8
   1b074:	mov	r3, #0
   1b078:	str	r3, [r0, #-8]!
   1b07c:	mov	r0, sp
   1b080:	bl	135ec <__assert_fail@plt+0xf18>
   1b084:	cmp	r0, #0
   1b088:	bne	1b0b0 <__assert_fail@plt+0x89dc>
   1b08c:	ldrh	r2, [r4, #68]	; 0x44
   1b090:	movw	r1, #5104	; 0x13f0
   1b094:	mov	r0, #1
   1b098:	movt	r1, #3
   1b09c:	bl	124a0 <__printf_chk@plt>
   1b0a0:	mov	r0, #10
   1b0a4:	bl	1247c <putchar@plt>
   1b0a8:	mov	r0, #0
   1b0ac:	bl	123b0 <exit@plt>
   1b0b0:	movw	r1, #5084	; 0x13dc
   1b0b4:	mov	r0, #1
   1b0b8:	movt	r1, #3
   1b0bc:	bl	124a0 <__printf_chk@plt>
   1b0c0:	ldr	r3, [sp]
   1b0c4:	tst	r3, #512	; 0x200
   1b0c8:	bne	1b0e0 <__assert_fail@plt+0x8a0c>
   1b0cc:	movw	r1, #5116	; 0x13fc
   1b0d0:	mov	r0, #1
   1b0d4:	movt	r1, #3
   1b0d8:	bl	124a0 <__printf_chk@plt>
   1b0dc:	b	1b08c <__assert_fail@plt+0x89b8>
   1b0e0:	movw	r1, #5092	; 0x13e4
   1b0e4:	mov	r0, #1
   1b0e8:	movt	r1, #3
   1b0ec:	bl	124a0 <__printf_chk@plt>
   1b0f0:	b	1b0cc <__assert_fail@plt+0x89f8>
   1b0f4:	push	{r3, lr}
   1b0f8:	movw	r3, #26024	; 0x65a8
   1b0fc:	movt	r3, #4
   1b100:	mov	r1, #0
   1b104:	mov	r2, r1
   1b108:	ldr	r0, [r3]
   1b10c:	bl	18018 <__assert_fail@plt+0x5944>
   1b110:	mov	r2, #5
   1b114:	movw	r1, #5120	; 0x1400
   1b118:	mov	r0, #0
   1b11c:	movt	r1, #3
   1b120:	bl	1217c <dcgettext@plt>
   1b124:	bl	12320 <puts@plt>
   1b128:	mov	r2, #5
   1b12c:	movw	r1, #5260	; 0x148c
   1b130:	mov	r0, #0
   1b134:	movt	r1, #3
   1b138:	bl	1217c <dcgettext@plt>
   1b13c:	bl	12320 <puts@plt>
   1b140:	mov	r2, #5
   1b144:	movw	r1, #5468	; 0x155c
   1b148:	mov	r0, #0
   1b14c:	movt	r1, #3
   1b150:	bl	1217c <dcgettext@plt>
   1b154:	bl	12320 <puts@plt>
   1b158:	mov	r2, #5
   1b15c:	movw	r1, #5744	; 0x1670
   1b160:	mov	r0, #0
   1b164:	movt	r1, #3
   1b168:	bl	1217c <dcgettext@plt>
   1b16c:	bl	12320 <puts@plt>
   1b170:	mov	r2, #5
   1b174:	movw	r1, #6044	; 0x179c
   1b178:	mov	r0, #0
   1b17c:	movt	r1, #3
   1b180:	bl	1217c <dcgettext@plt>
   1b184:	bl	12320 <puts@plt>
   1b188:	mov	r2, #5
   1b18c:	movw	r1, #6264	; 0x1878
   1b190:	mov	r0, #0
   1b194:	movt	r1, #3
   1b198:	bl	1217c <dcgettext@plt>
   1b19c:	bl	12320 <puts@plt>
   1b1a0:	mov	r2, #5
   1b1a4:	movw	r1, #6288	; 0x1890
   1b1a8:	mov	r0, #0
   1b1ac:	movt	r1, #3
   1b1b0:	bl	1217c <dcgettext@plt>
   1b1b4:	bl	12320 <puts@plt>
   1b1b8:	mov	r2, #5
   1b1bc:	movw	r1, #6540	; 0x198c
   1b1c0:	mov	r0, #0
   1b1c4:	movt	r1, #3
   1b1c8:	bl	1217c <dcgettext@plt>
   1b1cc:	bl	12320 <puts@plt>
   1b1d0:	mov	r0, #0
   1b1d4:	bl	123b0 <exit@plt>
   1b1d8:	push	{r3, lr}
   1b1dc:	bl	18010 <__assert_fail@plt+0x593c>
   1b1e0:	mov	r2, #0
   1b1e4:	mov	r1, #1065353216	; 0x3f800000
   1b1e8:	mov	r3, r0
   1b1ec:	mov	r0, #1
   1b1f0:	strb	r2, [r3, #19]
   1b1f4:	strb	r2, [r3, #18]
   1b1f8:	str	r1, [r3, #28]
   1b1fc:	pop	{r3, pc}
   1b200:	push	{r3, lr}
   1b204:	bl	18010 <__assert_fail@plt+0x593c>
   1b208:	mov	r2, #0
   1b20c:	mov	r1, #1065353216	; 0x3f800000
   1b210:	mov	r3, r0
   1b214:	mov	r0, #1
   1b218:	strb	r2, [r3, #19]
   1b21c:	strb	r0, [r3, #16]
   1b220:	strb	r2, [r3, #18]
   1b224:	strb	r2, [r3, #17]
   1b228:	str	r1, [r3, #28]
   1b22c:	pop	{r3, pc}
   1b230:	push	{r3, lr}
   1b234:	bl	18010 <__assert_fail@plt+0x593c>
   1b238:	movw	r2, #29372	; 0x72bc
   1b23c:	movt	r2, #4
   1b240:	ldrb	r2, [r2]
   1b244:	cmp	r2, #0
   1b248:	mov	r3, r0
   1b24c:	strbeq	r2, [r0, #19]
   1b250:	strbeq	r2, [r0, #18]
   1b254:	mov	r0, #1
   1b258:	mov	r2, #0
   1b25c:	strb	r0, [r3, #16]
   1b260:	strb	r2, [r3, #17]
   1b264:	pop	{r3, pc}
   1b268:	push	{r3, lr}
   1b26c:	bl	18010 <__assert_fail@plt+0x593c>
   1b270:	movw	r3, #4719	; 0x126f
   1b274:	movt	r3, #14979	; 0x3a83
   1b278:	str	r3, [r0, #28]
   1b27c:	mov	r0, #1
   1b280:	pop	{r3, pc}
   1b284:	push	{r3, lr}
   1b288:	bl	18010 <__assert_fail@plt+0x593c>
   1b28c:	movw	r2, #18696	; 0x4908
   1b290:	movt	r2, #1
   1b294:	mov	r3, #0
   1b298:	ldr	r1, [r0]
   1b29c:	strb	r3, [r0, #19]
   1b2a0:	cmp	r1, r2
   1b2a4:	strb	r3, [r0, #18]
   1b2a8:	strb	r3, [r0, #17]
   1b2ac:	strb	r3, [r0, #16]
   1b2b0:	movweq	r3, #52429	; 0xcccd
   1b2b4:	movwne	r3, #26214	; 0x6666
   1b2b8:	movteq	r3, #15948	; 0x3e4c
   1b2bc:	movtne	r3, #16230	; 0x3f66
   1b2c0:	str	r3, [r0, #28]
   1b2c4:	mov	r0, #1
   1b2c8:	pop	{r3, pc}
   1b2cc:	push	{r3, lr}
   1b2d0:	bl	18010 <__assert_fail@plt+0x593c>
   1b2d4:	movw	r3, #55050	; 0xd70a
   1b2d8:	movt	r3, #15395	; 0x3c23
   1b2dc:	str	r3, [r0, #28]
   1b2e0:	mov	r0, #1
   1b2e4:	pop	{r3, pc}
   1b2e8:	push	{r3, lr}
   1b2ec:	bl	18010 <__assert_fail@plt+0x593c>
   1b2f0:	mov	r2, #1
   1b2f4:	mov	r1, #0
   1b2f8:	mov	ip, #1065353216	; 0x3f800000
   1b2fc:	mov	r3, r0
   1b300:	movw	r0, #29372	; 0x72bc
   1b304:	movt	r0, #4
   1b308:	strb	r2, [r3, #17]
   1b30c:	strb	r1, [r3, #19]
   1b310:	strb	r1, [r0]
   1b314:	mov	r0, r2
   1b318:	strb	r1, [r3, #18]
   1b31c:	strb	r2, [r3, #16]
   1b320:	str	ip, [r3, #28]
   1b324:	pop	{r3, pc}
   1b328:	cmp	r0, #0
   1b32c:	push	{r4, r5, r6, r7, r8, lr}
   1b330:	mov	r6, r2
   1b334:	mov	r5, r3
   1b338:	popeq	{r4, r5, r6, r7, r8, pc}
   1b33c:	ldr	ip, [r1]
   1b340:	ldr	r4, [r0, ip, lsl #2]
   1b344:	cmp	r4, #0
   1b348:	beq	1b3e4 <__assert_fail@plt+0x8d10>
   1b34c:	add	ip, ip, #1
   1b350:	mov	r0, r4
   1b354:	str	ip, [r1]
   1b358:	bl	123d4 <strlen@plt>
   1b35c:	cmp	r0, #1
   1b360:	bne	1b3c0 <__assert_fail@plt+0x8cec>
   1b364:	ldrb	r3, [r4]
   1b368:	sub	r3, r3, #98	; 0x62
   1b36c:	cmp	r3, #17
   1b370:	ldrls	pc, [pc, r3, lsl #2]
   1b374:	b	1b49c <__assert_fail@plt+0x8dc8>
   1b378:	andeq	fp, r1, ip, lsl #9
   1b37c:	andeq	fp, r1, ip, ror #7
   1b380:	andeq	fp, r1, ip, lsr r4
   1b384:	muleq	r1, ip, r4
   1b388:	andeq	fp, r1, ip, asr #8
   1b38c:	muleq	r1, ip, r4
   1b390:	muleq	r1, ip, r4
   1b394:	muleq	r1, ip, r4
   1b398:	muleq	r1, ip, r4
   1b39c:	muleq	r1, ip, r4
   1b3a0:	andeq	fp, r1, ip, asr r4
   1b3a4:	muleq	r1, ip, r4
   1b3a8:	muleq	r1, ip, r4
   1b3ac:	muleq	r1, ip, r4
   1b3b0:	andeq	fp, r1, ip, ror #8
   1b3b4:	muleq	r1, ip, r4
   1b3b8:	muleq	r1, ip, r4
   1b3bc:	andeq	fp, r1, ip, ror r4
   1b3c0:	mov	r2, #5
   1b3c4:	movw	r1, #6724	; 0x1a44
   1b3c8:	mov	r0, #0
   1b3cc:	movt	r1, #3
   1b3d0:	bl	1217c <dcgettext@plt>
   1b3d4:	mov	r1, #0
   1b3d8:	mov	r2, r0
   1b3dc:	mov	r0, #1
   1b3e0:	bl	122cc <error@plt>
   1b3e4:	mov	r0, #0
   1b3e8:	pop	{r4, r5, r6, r7, r8, pc}
   1b3ec:	movw	r8, #55050	; 0xd70a
   1b3f0:	movt	r8, #15395	; 0x3c23
   1b3f4:	mov	r7, #8192	; 0x2000
   1b3f8:	mov	r2, r4
   1b3fc:	mov	r0, r6
   1b400:	mov	r1, r5
   1b404:	bl	17f84 <__assert_fail@plt+0x58b0>
   1b408:	movw	r3, #19644	; 0x4cbc
   1b40c:	movt	r3, #1
   1b410:	cmp	r5, r3
   1b414:	moveq	r2, #1
   1b418:	moveq	r3, #0
   1b41c:	movne	r2, #0
   1b420:	movne	r3, #1
   1b424:	str	r8, [r0, #28]
   1b428:	strb	r2, [r0, #18]
   1b42c:	strb	r3, [r0, #19]
   1b430:	str	r7, [r0, #40]	; 0x28
   1b434:	mov	r0, #1
   1b438:	pop	{r4, r5, r6, r7, r8, pc}
   1b43c:	movw	r8, #52429	; 0xcccd
   1b440:	mov	r7, #16384	; 0x4000
   1b444:	movt	r8, #16076	; 0x3ecc
   1b448:	b	1b3f8 <__assert_fail@plt+0x8d24>
   1b44c:	movw	r8, #13107	; 0x3333
   1b450:	mov	r7, #32768	; 0x8000
   1b454:	movt	r8, #16243	; 0x3f73
   1b458:	b	1b3f8 <__assert_fail@plt+0x8d24>
   1b45c:	movw	r8, #52429	; 0xcccd
   1b460:	mov	r7, #40960	; 0xa000
   1b464:	movt	r8, #15820	; 0x3dcc
   1b468:	b	1b3f8 <__assert_fail@plt+0x8d24>
   1b46c:	movw	r8, #55050	; 0xd70a
   1b470:	mov	r7, #4096	; 0x1000
   1b474:	movt	r8, #15395	; 0x3c23
   1b478:	b	1b3f8 <__assert_fail@plt+0x8d24>
   1b47c:	movw	r8, #55050	; 0xd70a
   1b480:	mov	r7, #49152	; 0xc000
   1b484:	movt	r8, #15395	; 0x3c23
   1b488:	b	1b3f8 <__assert_fail@plt+0x8d24>
   1b48c:	movw	r8, #55050	; 0xd70a
   1b490:	mov	r7, #24576	; 0x6000
   1b494:	movt	r8, #15395	; 0x3c23
   1b498:	b	1b3f8 <__assert_fail@plt+0x8d24>
   1b49c:	mov	r2, #5
   1b4a0:	movw	r1, #6776	; 0x1a78
   1b4a4:	mov	r0, #0
   1b4a8:	movt	r1, #3
   1b4ac:	bl	1217c <dcgettext@plt>
   1b4b0:	ldrb	r3, [r4]
   1b4b4:	mov	r1, #0
   1b4b8:	mov	r2, r0
   1b4bc:	mov	r0, #1
   1b4c0:	bl	122cc <error@plt>
   1b4c4:	mov	r0, #0
   1b4c8:	pop	{r4, r5, r6, r7, r8, pc}
   1b4cc:	mov	ip, r0
   1b4d0:	movw	r3, #19644	; 0x4cbc
   1b4d4:	mov	r0, r1
   1b4d8:	movt	r3, #1
   1b4dc:	mov	r1, r2
   1b4e0:	mov	r2, ip
   1b4e4:	b	1b328 <__assert_fail@plt+0x8c54>
   1b4e8:	mov	ip, r0
   1b4ec:	movw	r3, #19308	; 0x4b6c
   1b4f0:	mov	r0, r1
   1b4f4:	movt	r3, #1
   1b4f8:	mov	r1, r2
   1b4fc:	mov	r2, ip
   1b500:	b	1b328 <__assert_fail@plt+0x8c54>
   1b504:	cmp	r1, #0
   1b508:	push	{r4, r5, r6, lr}
   1b50c:	mov	r6, r0
   1b510:	beq	1b5e0 <__assert_fail@plt+0x8f0c>
   1b514:	ldr	r3, [r2]
   1b518:	ldr	r4, [r1, r3, lsl #2]
   1b51c:	cmp	r4, #0
   1b520:	beq	1b5e0 <__assert_fail@plt+0x8f0c>
   1b524:	add	r3, r3, #1
   1b528:	mov	r0, r4
   1b52c:	str	r3, [r2]
   1b530:	bl	12044 <getpwnam@plt>
   1b534:	mov	r5, r0
   1b538:	bl	12560 <endpwent@plt>
   1b53c:	cmp	r5, #0
   1b540:	beq	1b578 <__assert_fail@plt+0x8ea4>
   1b544:	ldr	r5, [r5, #8]
   1b548:	mov	r0, r6
   1b54c:	mov	r1, r4
   1b550:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1b554:	cmp	r5, #99	; 0x63
   1b558:	vldr	s14, [pc, #220]	; 1b63c <__assert_fail@plt+0x8f68>
   1b55c:	vldr	s15, [pc, #220]	; 1b640 <__assert_fail@plt+0x8f6c>
   1b560:	vmovhi.f32	s15, s14
   1b564:	mov	r3, r0
   1b568:	str	r5, [r0, #40]	; 0x28
   1b56c:	mov	r0, #1
   1b570:	vstr	s15, [r3, #28]
   1b574:	pop	{r4, r5, r6, pc}
   1b578:	movw	r1, #6808	; 0x1a98
   1b57c:	mov	r0, r4
   1b580:	movt	r1, #3
   1b584:	bl	126c8 <strspn@plt>
   1b588:	cmp	r0, #0
   1b58c:	bne	1b5e8 <__assert_fail@plt+0x8f14>
   1b590:	ldrb	r5, [r4]
   1b594:	cmp	r5, #0
   1b598:	beq	1b610 <__assert_fail@plt+0x8f3c>
   1b59c:	mov	r2, #5
   1b5a0:	movw	r1, #6820	; 0x1aa4
   1b5a4:	mov	r0, #0
   1b5a8:	movt	r1, #3
   1b5ac:	bl	1217c <dcgettext@plt>
   1b5b0:	movw	r3, #29372	; 0x72bc
   1b5b4:	movt	r3, #4
   1b5b8:	mov	r2, r4
   1b5bc:	ldr	r1, [r3, #72]	; 0x48
   1b5c0:	mov	r5, r0
   1b5c4:	mov	r0, #0
   1b5c8:	bl	284fc <__assert_fail@plt+0x15e28>
   1b5cc:	mov	r2, r5
   1b5d0:	mov	r1, #0
   1b5d4:	mov	r3, r0
   1b5d8:	mov	r0, #1
   1b5dc:	bl	122cc <error@plt>
   1b5e0:	mov	r0, #0
   1b5e4:	pop	{r4, r5, r6, pc}
   1b5e8:	ldrb	r3, [r4, r0]
   1b5ec:	cmp	r3, #0
   1b5f0:	bne	1b590 <__assert_fail@plt+0x8ebc>
   1b5f4:	movw	r3, #29372	; 0x72bc
   1b5f8:	movt	r3, #4
   1b5fc:	mov	r0, r4
   1b600:	ldr	r1, [r3, #72]	; 0x48
   1b604:	bl	20ab4 <__assert_fail@plt+0xe3e0>
   1b608:	mov	r5, r0
   1b60c:	b	1b548 <__assert_fail@plt+0x8e74>
   1b610:	mov	r0, r5
   1b614:	mov	r2, #5
   1b618:	movw	r1, #6856	; 0x1ac8
   1b61c:	movt	r1, #3
   1b620:	bl	1217c <dcgettext@plt>
   1b624:	mov	r1, r5
   1b628:	mov	r2, r0
   1b62c:	mov	r0, #1
   1b630:	bl	122cc <error@plt>
   1b634:	mov	r0, r5
   1b638:	pop	{r4, r5, r6, pc}
   1b63c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1b640:	svccc	0x007d70a4
   1b644:	push	{r3, lr}
   1b648:	mov	r1, #0
   1b64c:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1b650:	movw	r3, #46871	; 0xb717
   1b654:	movt	r3, #14545	; 0x38d1
   1b658:	str	r3, [r0, #28]
   1b65c:	mov	r0, #1
   1b660:	pop	{r3, pc}
   1b664:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b668:	vpush	{d8}
   1b66c:	movw	r4, #26008	; 0x6598
   1b670:	movt	r4, #4
   1b674:	ldrb	ip, [r0]
   1b678:	mov	r6, r1
   1b67c:	sub	sp, sp, #32
   1b680:	ldr	r1, [r4]
   1b684:	cmp	ip, #43	; 0x2b
   1b688:	mov	r5, r0
   1b68c:	vmov.f64	d8, d0
   1b690:	stm	sp, {r2, r3}
   1b694:	mov	r8, r2
   1b698:	str	r1, [sp, #28]
   1b69c:	mov	r9, r3
   1b6a0:	ldr	sl, [sp, #72]	; 0x48
   1b6a4:	beq	1b7ac <__assert_fail@plt+0x90d8>
   1b6a8:	cmp	ip, #45	; 0x2d
   1b6ac:	beq	1b6f8 <__assert_fail@plt+0x9024>
   1b6b0:	mov	r3, #2
   1b6b4:	str	r3, [r6, #4]
   1b6b8:	movw	r3, #9388	; 0x24ac
   1b6bc:	mov	r0, r5
   1b6c0:	movt	r3, #1
   1b6c4:	mov	r1, #0
   1b6c8:	add	r2, sp, #8
   1b6cc:	bl	28fa0 <__assert_fail@plt+0x168cc>
   1b6d0:	subs	r7, r0, #0
   1b6d4:	bne	1b708 <__assert_fail@plt+0x9034>
   1b6d8:	ldr	r2, [sp, #28]
   1b6dc:	mov	r0, r7
   1b6e0:	ldr	r3, [r4]
   1b6e4:	cmp	r2, r3
   1b6e8:	bne	1b7d4 <__assert_fail@plt+0x9100>
   1b6ec:	add	sp, sp, #32
   1b6f0:	vpop	{d8}
   1b6f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b6f8:	mov	r3, #0
   1b6fc:	add	r5, r5, #1
   1b700:	str	r3, [r6, #4]
   1b704:	b	1b6b8 <__assert_fail@plt+0x8fe4>
   1b708:	vldr	d0, [sp, #8]
   1b70c:	add	r0, sp, #16
   1b710:	vmul.f64	d0, d8, d0
   1b714:	bl	12380 <modf@plt>
   1b718:	vldr	d7, [pc, #216]	; 1b7f8 <__assert_fail@plt+0x9124>
   1b71c:	vmul.f64	d8, d0, d7
   1b720:	vcmpe.f64	d8, d7
   1b724:	vmrs	APSR_nzcv, fpscr
   1b728:	bpl	1b7d8 <__assert_fail@plt+0x9104>
   1b72c:	vmov	s11, r8
   1b730:	vldr	d7, [sp, #16]
   1b734:	vcmpe.f64	d7, #0.0
   1b738:	vcvt.f64.s32	d6, s11
   1b73c:	vmrs	APSR_nzcv, fpscr
   1b740:	movpl	r2, #0
   1b744:	movmi	r2, #1
   1b748:	vsub.f64	d6, d6, d7
   1b74c:	vcvt.s32.f64	s11, d6
   1b750:	vmov	r3, s11
   1b754:	vstr	s11, [r6, #8]
   1b758:	cmp	r3, r8
   1b75c:	movle	r8, r2
   1b760:	eorgt	r8, r2, #1
   1b764:	cmp	r8, #0
   1b768:	bne	1b7bc <__assert_fail@plt+0x90e8>
   1b76c:	vmov	s13, r9
   1b770:	vcvt.f64.s32	d7, s13
   1b774:	vsub.f64	d6, d7, d8
   1b778:	vcvt.s32.f64	s12, d6
   1b77c:	vcmpe.f64	d8, d7
   1b780:	vmrs	APSR_nzcv, fpscr
   1b784:	vmovgt	r1, s12
   1b788:	ldrgt	r2, [r6, #8]
   1b78c:	movgt	r3, #51712	; 0xca00
   1b790:	movtgt	r3, #15258	; 0x3b9a
   1b794:	vstrle	s12, [r6, #12]
   1b798:	subgt	r2, r2, #1
   1b79c:	strgt	r2, [r6, #8]
   1b7a0:	addgt	r3, r1, r3
   1b7a4:	strgt	r3, [r6, #12]
   1b7a8:	b	1b6d8 <__assert_fail@plt+0x9004>
   1b7ac:	mov	r3, #1
   1b7b0:	add	r5, r5, #1
   1b7b4:	str	r3, [r6, #4]
   1b7b8:	b	1b6b8 <__assert_fail@plt+0x8fe4>
   1b7bc:	mov	r2, sl
   1b7c0:	mov	r3, r5
   1b7c4:	mov	r0, #1
   1b7c8:	mov	r1, #0
   1b7cc:	bl	122cc <error@plt>
   1b7d0:	b	1b76c <__assert_fail@plt+0x9098>
   1b7d4:	bl	12188 <__stack_chk_fail@plt>
   1b7d8:	movw	r0, #6900	; 0x1af4
   1b7dc:	movw	r1, #6928	; 0x1b10
   1b7e0:	movw	r3, #3508	; 0xdb4
   1b7e4:	movt	r0, #3
   1b7e8:	movt	r1, #3
   1b7ec:	movw	r2, #3272	; 0xcc8
   1b7f0:	movt	r3, #3
   1b7f4:	bl	126d4 <__assert_fail@plt>
   1b7f8:	andeq	r0, r0, r0
   1b7fc:	bicmi	ip, sp, r5, ror #26
   1b800:	push	{r4, lr}
   1b804:	movw	r4, #26008	; 0x6598
   1b808:	movt	r4, #4
   1b80c:	sub	sp, sp, #16
   1b810:	cmp	r0, #0
   1b814:	ldr	ip, [r4]
   1b818:	str	ip, [sp, #12]
   1b81c:	beq	1b86c <__assert_fail@plt+0x9198>
   1b820:	cmp	r2, #0
   1b824:	beq	1b848 <__assert_fail@plt+0x9174>
   1b828:	ldrb	ip, [r0]
   1b82c:	cmp	ip, #43	; 0x2b
   1b830:	beq	1b890 <__assert_fail@plt+0x91bc>
   1b834:	cmp	ip, #45	; 0x2d
   1b838:	bne	1b884 <__assert_fail@plt+0x91b0>
   1b83c:	add	r0, r0, #1
   1b840:	mov	r3, #1
   1b844:	str	r3, [r2]
   1b848:	mov	r3, r1
   1b84c:	movw	ip, #15168	; 0x3b40
   1b850:	add	r1, sp, #8
   1b854:	movt	ip, #3
   1b858:	mov	r2, #10
   1b85c:	str	ip, [sp]
   1b860:	bl	29574 <__assert_fail@plt+0x16ea0>
   1b864:	rsbs	r0, r0, #1
   1b868:	movcc	r0, #0
   1b86c:	ldr	r2, [sp, #12]
   1b870:	ldr	r3, [r4]
   1b874:	cmp	r2, r3
   1b878:	bne	1b8a0 <__assert_fail@plt+0x91cc>
   1b87c:	add	sp, sp, #16
   1b880:	pop	{r4, pc}
   1b884:	mov	r3, #2
   1b888:	str	r3, [r2]
   1b88c:	b	1b848 <__assert_fail@plt+0x9174>
   1b890:	mov	r3, #0
   1b894:	add	r0, r0, #1
   1b898:	str	r3, [r2]
   1b89c:	b	1b848 <__assert_fail@plt+0x9174>
   1b8a0:	bl	12188 <__stack_chk_fail@plt>
   1b8a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8a8:	movw	r8, #26008	; 0x6598
   1b8ac:	movt	r8, #4
   1b8b0:	sub	sp, sp, #36	; 0x24
   1b8b4:	subs	sl, r1, #0
   1b8b8:	mov	r6, r0
   1b8bc:	ldr	r3, [r8]
   1b8c0:	mov	r9, r2
   1b8c4:	str	r3, [sp, #28]
   1b8c8:	beq	1babc <__assert_fail@plt+0x93e8>
   1b8cc:	ldr	r3, [r2]
   1b8d0:	ldr	r5, [sl, r3, lsl #2]
   1b8d4:	cmp	r5, #0
   1b8d8:	beq	1bbf8 <__assert_fail@plt+0x9524>
   1b8dc:	mov	r0, r5
   1b8e0:	bl	123d4 <strlen@plt>
   1b8e4:	subs	fp, r0, #0
   1b8e8:	beq	1bad8 <__assert_fail@plt+0x9404>
   1b8ec:	sub	fp, fp, #1
   1b8f0:	ldrb	r7, [r5, fp]
   1b8f4:	sub	r3, r7, #48	; 0x30
   1b8f8:	cmp	r3, #71	; 0x47
   1b8fc:	ldrls	pc, [pc, r3, lsl #2]
   1b900:	b	1bb5c <__assert_fail@plt+0x9488>
   1b904:	andeq	fp, r1, r4, lsr #20
   1b908:	andeq	fp, r1, r4, lsr #20
   1b90c:	andeq	fp, r1, r4, lsr #20
   1b910:	andeq	fp, r1, r4, lsr #20
   1b914:	andeq	fp, r1, r4, lsr #20
   1b918:	andeq	fp, r1, r4, lsr #20
   1b91c:	andeq	fp, r1, r4, lsr #20
   1b920:	andeq	fp, r1, r4, lsr #20
   1b924:	andeq	fp, r1, r4, lsr #20
   1b928:	andeq	fp, r1, r4, lsr #20
   1b92c:	andeq	fp, r1, ip, asr fp
   1b930:	andeq	fp, r1, ip, asr fp
   1b934:	andeq	fp, r1, ip, asr fp
   1b938:	andeq	fp, r1, ip, asr fp
   1b93c:	andeq	fp, r1, ip, asr fp
   1b940:	andeq	fp, r1, ip, asr fp
   1b944:	andeq	fp, r1, ip, asr fp
   1b948:	andeq	fp, r1, ip, asr fp
   1b94c:	andeq	fp, r1, ip, asr fp
   1b950:	andeq	fp, r1, ip, asr fp
   1b954:	andeq	fp, r1, ip, asr fp
   1b958:	andeq	fp, r1, ip, asr fp
   1b95c:	andeq	fp, r1, ip, asr fp
   1b960:	strdeq	fp, [r1], -ip
   1b964:	andeq	fp, r1, ip, asr fp
   1b968:	andeq	fp, r1, ip, asr fp
   1b96c:	andeq	fp, r1, ip, asr fp
   1b970:	andeq	fp, r1, ip, asr fp
   1b974:	andeq	fp, r1, ip, asr fp
   1b978:	andeq	fp, r1, ip, lsl #22
   1b97c:	andeq	fp, r1, ip, asr fp
   1b980:	andeq	fp, r1, ip, asr fp
   1b984:	andeq	fp, r1, ip, asr fp
   1b988:	andeq	fp, r1, ip, asr fp
   1b98c:	andeq	fp, r1, ip, asr fp
   1b990:	andeq	fp, r1, ip, asr fp
   1b994:	andeq	fp, r1, ip, asr fp
   1b998:	andeq	fp, r1, ip, asr fp
   1b99c:	andeq	fp, r1, ip, asr fp
   1b9a0:	andeq	fp, r1, ip, asr fp
   1b9a4:	andeq	fp, r1, ip, asr fp
   1b9a8:	andeq	fp, r1, ip, asr fp
   1b9ac:	andeq	fp, r1, ip, asr fp
   1b9b0:	andeq	fp, r1, ip, asr fp
   1b9b4:	andeq	fp, r1, ip, asr fp
   1b9b8:	andeq	fp, r1, ip, asr fp
   1b9bc:	andeq	fp, r1, ip, asr fp
   1b9c0:	andeq	fp, r1, ip, asr fp
   1b9c4:	andeq	fp, r1, ip, asr fp
   1b9c8:	andeq	fp, r1, ip, asr fp
   1b9cc:	andeq	fp, r1, ip, lsl fp
   1b9d0:	andeq	fp, r1, ip, lsr #22
   1b9d4:	andeq	fp, r1, ip, asr fp
   1b9d8:	andeq	fp, r1, ip, asr fp
   1b9dc:	andeq	fp, r1, ip, asr fp
   1b9e0:	andeq	fp, r1, ip, asr fp
   1b9e4:	andeq	fp, r1, ip, asr fp
   1b9e8:	andeq	fp, r1, ip, asr fp
   1b9ec:	andeq	fp, r1, ip, asr fp
   1b9f0:	andeq	fp, r1, ip, lsr fp
   1b9f4:	andeq	fp, r1, ip, asr fp
   1b9f8:	andeq	fp, r1, ip, asr fp
   1b9fc:	andeq	fp, r1, ip, asr fp
   1ba00:	andeq	fp, r1, ip, asr fp
   1ba04:	andeq	fp, r1, ip, asr fp
   1ba08:	andeq	fp, r1, ip, asr fp
   1ba0c:	andeq	fp, r1, ip, asr fp
   1ba10:	andeq	fp, r1, ip, asr fp
   1ba14:	andeq	fp, r1, ip, asr fp
   1ba18:	andeq	fp, r1, ip, asr fp
   1ba1c:	andeq	fp, r1, ip, asr fp
   1ba20:	andeq	fp, r1, ip, asr #22
   1ba24:	mov	r4, #512	; 0x200
   1ba28:	mov	r7, #0
   1ba2c:	mov	r0, r5
   1ba30:	add	r1, sp, #16
   1ba34:	add	r2, sp, #12
   1ba38:	bl	1b800 <__assert_fail@plt+0x912c>
   1ba3c:	subs	sl, r0, #0
   1ba40:	beq	1bb94 <__assert_fail@plt+0x94c0>
   1ba44:	mov	r1, r5
   1ba48:	mov	r0, r6
   1ba4c:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1ba50:	ldr	r3, [sp, #12]
   1ba54:	ldr	r1, [sp, #16]
   1ba58:	mov	r2, #0
   1ba5c:	ldr	ip, [sp, #20]
   1ba60:	cmp	r3, r2
   1ba64:	mov	r5, #1
   1ba68:	str	r4, [r0, #44]	; 0x2c
   1ba6c:	strb	r5, [r0, #18]
   1ba70:	strb	r2, [r0, #19]
   1ba74:	str	r3, [r0, #40]	; 0x28
   1ba78:	str	r1, [r0, #48]	; 0x30
   1ba7c:	str	ip, [r0, #52]	; 0x34
   1ba80:	bne	1bbcc <__assert_fail@plt+0x94f8>
   1ba84:	asr	r7, r4, #31
   1ba88:	vldr	s14, [pc, #372]	; 1bc04 <__assert_fail@plt+0x9530>
   1ba8c:	mul	ip, r4, ip
   1ba90:	vldr	s15, [pc, #368]	; 1bc08 <__assert_fail@plt+0x9534>
   1ba94:	mla	ip, r1, r7, ip
   1ba98:	umull	r4, r5, r4, r1
   1ba9c:	add	r5, ip, r5
   1baa0:	cmp	r5, #0
   1baa4:	cmpeq	r4, #20480	; 0x5000
   1baa8:	vmovls.f32	s15, s14
   1baac:	vstr	s15, [r0, #28]
   1bab0:	ldr	r3, [r9]
   1bab4:	add	r3, r3, #1
   1bab8:	str	r3, [r9]
   1babc:	ldr	r2, [sp, #28]
   1bac0:	mov	r0, sl
   1bac4:	ldr	r3, [r8]
   1bac8:	cmp	r2, r3
   1bacc:	bne	1bc00 <__assert_fail@plt+0x952c>
   1bad0:	add	sp, sp, #36	; 0x24
   1bad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bad8:	mov	r2, #5
   1badc:	movw	r1, #6940	; 0x1b1c
   1bae0:	movt	r1, #3
   1bae4:	bl	1217c <dcgettext@plt>
   1bae8:	mov	r1, fp
   1baec:	mov	r2, r0
   1baf0:	mov	r0, #1
   1baf4:	bl	122cc <error@plt>
   1baf8:	b	1b8ec <__assert_fail@plt+0x9218>
   1bafc:	mov	r3, #0
   1bb00:	mov	r4, #1073741824	; 0x40000000
   1bb04:	strb	r3, [r5, fp]
   1bb08:	b	1ba2c <__assert_fail@plt+0x9358>
   1bb0c:	mov	r3, #0
   1bb10:	mov	r4, #1048576	; 0x100000
   1bb14:	strb	r3, [r5, fp]
   1bb18:	b	1ba2c <__assert_fail@plt+0x9358>
   1bb1c:	mov	r3, #0
   1bb20:	mov	r4, #512	; 0x200
   1bb24:	strb	r3, [r5, fp]
   1bb28:	b	1ba2c <__assert_fail@plt+0x9358>
   1bb2c:	mov	r3, #0
   1bb30:	mov	r4, #1
   1bb34:	strb	r3, [r5, fp]
   1bb38:	b	1ba2c <__assert_fail@plt+0x9358>
   1bb3c:	mov	r3, #0
   1bb40:	mov	r4, #1024	; 0x400
   1bb44:	strb	r3, [r5, fp]
   1bb48:	b	1ba2c <__assert_fail@plt+0x9358>
   1bb4c:	mov	r3, #0
   1bb50:	mov	r4, #2
   1bb54:	strb	r3, [r5, fp]
   1bb58:	b	1ba2c <__assert_fail@plt+0x9358>
   1bb5c:	mov	r2, #5
   1bb60:	movw	r1, #6972	; 0x1b3c
   1bb64:	mov	r0, #0
   1bb68:	movt	r1, #3
   1bb6c:	bl	1217c <dcgettext@plt>
   1bb70:	ldr	r3, [r9]
   1bb74:	mov	r1, #0
   1bb78:	mov	r4, #512	; 0x200
   1bb7c:	ldr	r3, [sl, r3, lsl #2]
   1bb80:	ldrb	r3, [r3, fp]
   1bb84:	mov	r2, r0
   1bb88:	mov	r0, #1
   1bb8c:	bl	122cc <error@plt>
   1bb90:	b	1ba2c <__assert_fail@plt+0x9358>
   1bb94:	mov	r2, #5
   1bb98:	movw	r1, #6996	; 0x1b54
   1bb9c:	movt	r1, #3
   1bba0:	strb	r7, [sp, #24]
   1bba4:	strb	sl, [sp, #25]
   1bba8:	bl	1217c <dcgettext@plt>
   1bbac:	add	ip, sp, #24
   1bbb0:	mov	r3, r5
   1bbb4:	mov	r1, sl
   1bbb8:	str	ip, [sp]
   1bbbc:	mov	r2, r0
   1bbc0:	mov	r0, #1
   1bbc4:	bl	122cc <error@plt>
   1bbc8:	b	1babc <__assert_fail@plt+0x93e8>
   1bbcc:	cmp	r3, #1
   1bbd0:	movwne	r3, #55050	; 0xd70a
   1bbd4:	movtne	r3, #15395	; 0x3c23
   1bbd8:	strne	r3, [r0, #28]
   1bbdc:	bne	1bab0 <__assert_fail@plt+0x93dc>
   1bbe0:	asr	r3, r4, #31
   1bbe4:	vldr	s14, [pc, #28]	; 1bc08 <__assert_fail@plt+0x9534>
   1bbe8:	mul	ip, r4, ip
   1bbec:	vldr	s15, [pc, #16]	; 1bc04 <__assert_fail@plt+0x9530>
   1bbf0:	mla	ip, r1, r3, ip
   1bbf4:	b	1ba98 <__assert_fail@plt+0x93c4>
   1bbf8:	mov	sl, r5
   1bbfc:	b	1babc <__assert_fail@plt+0x93e8>
   1bc00:	bl	12188 <__stack_chk_fail@plt>
   1bc04:	svccc	0x00666666
   1bc08:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bc0c:	push	{r4, r5, r6, r7, lr}
   1bc10:	movw	r6, #26008	; 0x6598
   1bc14:	movt	r6, #4
   1bc18:	sub	sp, sp, #36	; 0x24
   1bc1c:	cmp	r0, #0
   1bc20:	mov	r5, r2
   1bc24:	ldr	r3, [r6]
   1bc28:	str	r3, [sp, #28]
   1bc2c:	beq	1bc9c <__assert_fail@plt+0x95c8>
   1bc30:	ldr	r3, [r1]
   1bc34:	ldr	r4, [r0, r3, lsl #2]
   1bc38:	cmp	r4, #0
   1bc3c:	moveq	r0, r4
   1bc40:	beq	1bc9c <__assert_fail@plt+0x95c8>
   1bc44:	add	r3, r3, #1
   1bc48:	mov	r0, r4
   1bc4c:	str	r3, [r1]
   1bc50:	add	r2, sp, #12
   1bc54:	add	r1, sp, #16
   1bc58:	bl	1b800 <__assert_fail@plt+0x912c>
   1bc5c:	cmp	r0, #0
   1bc60:	beq	1bc9c <__assert_fail@plt+0x95c8>
   1bc64:	mov	r1, r4
   1bc68:	mov	r0, r5
   1bc6c:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1bc70:	movw	r1, #29372	; 0x72bc
   1bc74:	movt	r1, #4
   1bc78:	ldrd	r2, [sp, #16]
   1bc7c:	mov	r7, r0
   1bc80:	ldr	r0, [sp, #12]
   1bc84:	strd	r2, [r7, #48]	; 0x30
   1bc88:	str	r0, [r7, #40]	; 0x28
   1bc8c:	ldr	r1, [r1, #44]	; 0x2c
   1bc90:	tst	r1, #1
   1bc94:	bne	1bcb4 <__assert_fail@plt+0x95e0>
   1bc98:	mov	r0, r7
   1bc9c:	ldr	r2, [sp, #28]
   1bca0:	ldr	r3, [r6]
   1bca4:	cmp	r2, r3
   1bca8:	bne	1bd74 <__assert_fail@plt+0x96a0>
   1bcac:	add	sp, sp, #36	; 0x24
   1bcb0:	pop	{r4, r5, r6, r7, pc}
   1bcb4:	movw	r4, #26016	; 0x65a0
   1bcb8:	movt	r4, #4
   1bcbc:	ldr	r3, [r7, #4]
   1bcc0:	movw	r2, #7060	; 0x1b94
   1bcc4:	mov	r1, #1
   1bcc8:	ldr	r0, [r4]
   1bccc:	movt	r2, #3
   1bcd0:	bl	124d0 <__fprintf_chk@plt>
   1bcd4:	ldr	r3, [sp, #12]
   1bcd8:	ldr	r0, [r4]
   1bcdc:	cmp	r3, #0
   1bce0:	beq	1bd1c <__assert_fail@plt+0x9648>
   1bce4:	cmp	r3, #1
   1bce8:	beq	1bd60 <__assert_fail@plt+0x968c>
   1bcec:	cmp	r3, #2
   1bcf0:	movw	ip, #7052	; 0x1b8c
   1bcf4:	movw	r3, #2992	; 0xbb0
   1bcf8:	movt	ip, #3
   1bcfc:	movt	r3, #3
   1bd00:	movw	r1, #7056	; 0x1b90
   1bd04:	movw	r2, #7048	; 0x1b88
   1bd08:	movt	r1, #3
   1bd0c:	movt	r2, #3
   1bd10:	moveq	r3, ip
   1bd14:	moveq	r2, r1
   1bd18:	b	1bd2c <__assert_fail@plt+0x9658>
   1bd1c:	movw	r3, #7040	; 0x1b80
   1bd20:	movw	r2, #7044	; 0x1b84
   1bd24:	movt	r3, #3
   1bd28:	movt	r2, #3
   1bd2c:	str	r2, [sp]
   1bd30:	mov	r1, #1
   1bd34:	movw	r2, #7076	; 0x1ba4
   1bd38:	movt	r2, #3
   1bd3c:	bl	124d0 <__fprintf_chk@plt>
   1bd40:	ldr	r0, [r4]
   1bd44:	ldrd	r4, [r7, #48]	; 0x30
   1bd48:	movw	r2, #7100	; 0x1bbc
   1bd4c:	mov	r1, #1
   1bd50:	movt	r2, #3
   1bd54:	strd	r4, [sp]
   1bd58:	bl	124d0 <__fprintf_chk@plt>
   1bd5c:	b	1bc98 <__assert_fail@plt+0x95c4>
   1bd60:	movw	r3, #7032	; 0x1b78
   1bd64:	movw	r2, #7036	; 0x1b7c
   1bd68:	movt	r3, #3
   1bd6c:	movt	r2, #3
   1bd70:	b	1bd2c <__assert_fail@plt+0x9658>
   1bd74:	bl	12188 <__stack_chk_fail@plt>
   1bd78:	mov	r3, r0
   1bd7c:	mov	r0, r1
   1bd80:	push	{r4, lr}
   1bd84:	mov	r4, r2
   1bd88:	mov	r1, r4
   1bd8c:	mov	r2, r3
   1bd90:	bl	1bc0c <__assert_fail@plt+0x9538>
   1bd94:	subs	ip, r0, #0
   1bd98:	beq	1bdc0 <__assert_fail@plt+0x96ec>
   1bd9c:	ldrd	r2, [ip, #48]	; 0x30
   1bda0:	vldr	s14, [pc, #44]	; 1bdd4 <__assert_fail@plt+0x9700>
   1bda4:	vldr	s15, [pc, #44]	; 1bdd8 <__assert_fail@plt+0x9704>
   1bda8:	mov	r0, #1
   1bdac:	cmp	r3, #0
   1bdb0:	cmpeq	r2, #99	; 0x63
   1bdb4:	vmovhi.f32	s15, s14
   1bdb8:	vstr	s15, [ip, #28]
   1bdbc:	pop	{r4, pc}
   1bdc0:	ldr	r3, [r4]
   1bdc4:	mov	r0, ip
   1bdc8:	sub	r3, r3, #1
   1bdcc:	str	r3, [r4]
   1bdd0:	pop	{r4, pc}
   1bdd4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1bdd8:	svccc	0x007d70a4
   1bddc:	mov	r3, r0
   1bde0:	mov	r0, r1
   1bde4:	push	{r4, lr}
   1bde8:	mov	r4, r2
   1bdec:	mov	r1, r4
   1bdf0:	mov	r2, r3
   1bdf4:	bl	1bc0c <__assert_fail@plt+0x9538>
   1bdf8:	subs	ip, r0, #0
   1bdfc:	beq	1be48 <__assert_fail@plt+0x9774>
   1be00:	ldrd	r2, [ip, #48]	; 0x30
   1be04:	cmp	r3, #0
   1be08:	cmpeq	r2, #1
   1be0c:	beq	1be34 <__assert_fail@plt+0x9760>
   1be10:	cmp	r3, #0
   1be14:	cmpeq	r2, #2
   1be18:	mov	r0, #1
   1be1c:	movweq	r3, #55050	; 0xd70a
   1be20:	movwne	r3, #4719	; 0x126f
   1be24:	movteq	r3, #15395	; 0x3c23
   1be28:	movtne	r3, #14979	; 0x3a83
   1be2c:	str	r3, [ip, #28]
   1be30:	pop	{r4, pc}
   1be34:	movw	r3, #28836	; 0x70a4
   1be38:	mov	r0, #1
   1be3c:	movt	r3, #16253	; 0x3f7d
   1be40:	str	r3, [ip, #28]
   1be44:	pop	{r4, pc}
   1be48:	ldr	r3, [r4]
   1be4c:	mov	r0, ip
   1be50:	sub	r3, r3, #1
   1be54:	str	r3, [r4]
   1be58:	pop	{r4, pc}
   1be5c:	mov	r3, r0
   1be60:	mov	r0, r1
   1be64:	push	{r4, lr}
   1be68:	mov	r4, r2
   1be6c:	mov	r1, r4
   1be70:	mov	r2, r3
   1be74:	bl	1bc0c <__assert_fail@plt+0x9538>
   1be78:	subs	r3, r0, #0
   1be7c:	beq	1bea4 <__assert_fail@plt+0x97d0>
   1be80:	mov	r0, #1
   1be84:	movw	r2, #14269	; 0x37bd
   1be88:	strb	r0, [r3, #20]
   1be8c:	movt	r2, #13702	; 0x3586
   1be90:	str	r2, [r3, #28]
   1be94:	mov	r2, #0
   1be98:	strb	r2, [r3, #18]
   1be9c:	strb	r2, [r3, #19]
   1bea0:	pop	{r4, pc}
   1bea4:	ldr	r2, [r4]
   1bea8:	mov	r0, r3
   1beac:	sub	r3, r2, #1
   1beb0:	str	r3, [r4]
   1beb4:	pop	{r4, pc}
   1beb8:	mov	r3, r0
   1bebc:	mov	r0, r1
   1bec0:	push	{r4, lr}
   1bec4:	mov	r4, r2
   1bec8:	mov	r1, r4
   1becc:	mov	r2, r3
   1bed0:	bl	1bc0c <__assert_fail@plt+0x9538>
   1bed4:	subs	ip, r0, #0
   1bed8:	beq	1bf00 <__assert_fail@plt+0x982c>
   1bedc:	ldrd	r2, [ip, #48]	; 0x30
   1bee0:	vldr	s14, [pc, #44]	; 1bf14 <__assert_fail@plt+0x9840>
   1bee4:	vldr	s15, [pc, #44]	; 1bf18 <__assert_fail@plt+0x9844>
   1bee8:	mov	r0, #1
   1beec:	cmp	r3, #0
   1bef0:	cmpeq	r2, #99	; 0x63
   1bef4:	vmovhi.f32	s15, s14
   1bef8:	vstr	s15, [ip, #28]
   1befc:	pop	{r4, pc}
   1bf00:	ldr	r3, [r4]
   1bf04:	mov	r0, ip
   1bf08:	sub	r3, r3, #1
   1bf0c:	str	r3, [r4]
   1bf10:	pop	{r4, pc}
   1bf14:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1bf18:	svccc	0x007d70a4
   1bf1c:	cmp	r0, #0
   1bf20:	push	{r4, r5, r6, lr}
   1bf24:	mov	r5, r1
   1bf28:	beq	1bf70 <__assert_fail@plt+0x989c>
   1bf2c:	ldr	r6, [r1]
   1bf30:	ldr	r4, [r0, r6, lsl #2]
   1bf34:	cmp	r4, #0
   1bf38:	beq	1bf70 <__assert_fail@plt+0x989c>
   1bf3c:	movw	ip, #29372	; 0x72bc
   1bf40:	movt	ip, #4
   1bf44:	add	r6, r6, #1
   1bf48:	mov	r1, r2
   1bf4c:	str	r6, [r5]
   1bf50:	mov	r0, r4
   1bf54:	str	r4, [r3]
   1bf58:	ldr	r3, [ip, #52]	; 0x34
   1bf5c:	blx	r3
   1bf60:	cmp	r0, #0
   1bf64:	bne	1bf7c <__assert_fail@plt+0x98a8>
   1bf68:	mov	r0, #1
   1bf6c:	pop	{r4, r5, r6, pc}
   1bf70:	mov	r0, #0
   1bf74:	str	r0, [r3]
   1bf78:	pop	{r4, r5, r6, pc}
   1bf7c:	bl	12434 <__errno_location@plt>
   1bf80:	mov	r1, r4
   1bf84:	ldr	r0, [r0]
   1bf88:	bl	190f8 <__assert_fail@plt+0x6a24>
   1bf8c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bf90:	movw	r4, #26008	; 0x6598
   1bf94:	movt	r4, #4
   1bf98:	sub	sp, sp, #228	; 0xe4
   1bf9c:	mov	r5, r1
   1bfa0:	mov	r7, r2
   1bfa4:	ldr	r3, [r4]
   1bfa8:	mov	r6, r0
   1bfac:	add	r0, sp, #8
   1bfb0:	str	r3, [sp, #220]	; 0xdc
   1bfb4:	bl	1812c <__assert_fail@plt+0x5a58>
   1bfb8:	mov	r0, r5
   1bfbc:	mov	r1, r7
   1bfc0:	add	r2, sp, #8
   1bfc4:	add	r3, sp, #4
   1bfc8:	bl	1bf1c <__assert_fail@plt+0x9848>
   1bfcc:	subs	r5, r0, #0
   1bfd0:	bne	1bff0 <__assert_fail@plt+0x991c>
   1bfd4:	ldr	r2, [sp, #220]	; 0xdc
   1bfd8:	mov	r0, r5
   1bfdc:	ldr	r3, [r4]
   1bfe0:	cmp	r2, r3
   1bfe4:	bne	1c134 <__assert_fail@plt+0x9a60>
   1bfe8:	add	sp, sp, #228	; 0xe4
   1bfec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bff0:	movw	r8, #29372	; 0x72bc
   1bff4:	movt	r8, #4
   1bff8:	add	r0, sp, #112	; 0x70
   1bffc:	bl	1812c <__assert_fail@plt+0x5a58>
   1c000:	ldr	r3, [r8, #48]	; 0x30
   1c004:	cmp	r3, #0
   1c008:	beq	1c0f4 <__assert_fail@plt+0x9a20>
   1c00c:	mov	r1, #0
   1c010:	ldr	r0, [sp, #4]
   1c014:	bl	208dc <__assert_fail@plt+0xe208>
   1c018:	subs	r7, r0, #0
   1c01c:	blt	1c0b4 <__assert_fail@plt+0x99e0>
   1c020:	mov	r0, #3
   1c024:	mov	r1, r7
   1c028:	add	r2, sp, #112	; 0x70
   1c02c:	bl	1220c <__fxstat64@plt>
   1c030:	cmp	r0, #0
   1c034:	bne	1c138 <__assert_fail@plt+0x9a64>
   1c038:	ldr	r3, [r8, #52]	; 0x34
   1c03c:	add	r1, sp, #8
   1c040:	ldr	r0, [sp, #4]
   1c044:	movw	r8, #29372	; 0x72bc
   1c048:	blx	r3
   1c04c:	movt	r8, #4
   1c050:	cmp	r0, #0
   1c054:	bne	1c138 <__assert_fail@plt+0x9a64>
   1c058:	ldr	r3, [r8, #48]	; 0x30
   1c05c:	cmp	r3, #0
   1c060:	bne	1c120 <__assert_fail@plt+0x9a4c>
   1c064:	ldrb	r3, [r8, #56]	; 0x38
   1c068:	cmp	r3, #0
   1c06c:	bne	1c120 <__assert_fail@plt+0x9a4c>
   1c070:	ldr	r3, [sp, #24]
   1c074:	and	r3, r3, #61440	; 0xf000
   1c078:	cmp	r3, #40960	; 0xa000
   1c07c:	beq	1c0a8 <__assert_fail@plt+0x99d4>
   1c080:	ldrd	r0, [sp, #8]
   1c084:	ldrd	r2, [sp, #112]	; 0x70
   1c088:	cmp	r1, r3
   1c08c:	cmpeq	r0, r2
   1c090:	bne	1c0a8 <__assert_fail@plt+0x99d4>
   1c094:	ldrd	r0, [sp, #104]	; 0x68
   1c098:	ldrd	r2, [sp, #208]	; 0xd0
   1c09c:	cmp	r1, r3
   1c0a0:	cmpeq	r0, r2
   1c0a4:	beq	1c0b4 <__assert_fail@plt+0x99e0>
   1c0a8:	mov	r0, r7
   1c0ac:	mvn	r7, #0
   1c0b0:	bl	12680 <close@plt>
   1c0b4:	mov	r0, r6
   1c0b8:	ldr	r1, [sp, #4]
   1c0bc:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1c0c0:	ldrd	r2, [sp, #104]	; 0x68
   1c0c4:	ldrd	r8, [sp, #8]
   1c0c8:	mov	ip, #0
   1c0cc:	mov	r1, #1
   1c0d0:	movw	r6, #55050	; 0xd70a
   1c0d4:	movt	r6, #15395	; 0x3c23
   1c0d8:	str	r7, [r0, #56]	; 0x38
   1c0dc:	strd	r2, [r0, #40]	; 0x28
   1c0e0:	str	r6, [r0, #28]
   1c0e4:	strd	r8, [r0, #48]	; 0x30
   1c0e8:	strb	ip, [r0, #19]
   1c0ec:	strb	r1, [r0, #18]
   1c0f0:	b	1bfd4 <__assert_fail@plt+0x9900>
   1c0f4:	ldrb	r1, [r8, #56]	; 0x38
   1c0f8:	cmp	r1, #0
   1c0fc:	bne	1c118 <__assert_fail@plt+0x9a44>
   1c100:	ldr	r3, [sp, #24]
   1c104:	and	r3, r3, #61440	; 0xf000
   1c108:	cmp	r3, #40960	; 0xa000
   1c10c:	bne	1c010 <__assert_fail@plt+0x993c>
   1c110:	mvn	r7, #1
   1c114:	b	1c0b4 <__assert_fail@plt+0x99e0>
   1c118:	mov	r1, #32768	; 0x8000
   1c11c:	b	1c010 <__assert_fail@plt+0x993c>
   1c120:	add	r0, sp, #8
   1c124:	add	r1, sp, #112	; 0x70
   1c128:	mov	r2, #104	; 0x68
   1c12c:	bl	12104 <memcpy@plt>
   1c130:	b	1c0b4 <__assert_fail@plt+0x99e0>
   1c134:	bl	12188 <__stack_chk_fail@plt>
   1c138:	bl	12434 <__errno_location@plt>
   1c13c:	ldr	r1, [sp, #4]
   1c140:	ldr	r0, [r0]
   1c144:	bl	190f8 <__assert_fail@plt+0x6a24>
   1c148:	push	{r3, r4, r5, lr}
   1c14c:	mov	r3, #0
   1c150:	mov	r5, r0
   1c154:	str	r3, [r1]
   1c158:	mov	r0, r3
   1c15c:	mov	r4, r1
   1c160:	bl	281d0 <__assert_fail@plt+0x15afc>
   1c164:	movw	r1, #7108	; 0x1bc4
   1c168:	movt	r1, #3
   1c16c:	str	r0, [r4, #16]
   1c170:	mov	r0, r5
   1c174:	bl	1205c <strcmp@plt>
   1c178:	cmp	r0, #0
   1c17c:	beq	1c210 <__assert_fail@plt+0x9b3c>
   1c180:	movw	r1, #7136	; 0x1be0
   1c184:	mov	r0, r5
   1c188:	movt	r1, #3
   1c18c:	bl	1205c <strcmp@plt>
   1c190:	cmp	r0, #0
   1c194:	beq	1c1e4 <__assert_fail@plt+0x9b10>
   1c198:	movw	r3, #29328	; 0x7290
   1c19c:	movt	r3, #4
   1c1a0:	mov	r1, r5
   1c1a4:	ldr	r0, [r3, #36]	; 0x24
   1c1a8:	bl	192cc <__assert_fail@plt+0x6bf8>
   1c1ac:	cmp	r0, #0
   1c1b0:	mov	r3, r0
   1c1b4:	stmib	r4, {r3, r5}
   1c1b8:	beq	1c23c <__assert_fail@plt+0x9b68>
   1c1bc:	mov	r0, r3
   1c1c0:	bl	124b8 <fileno@plt>
   1c1c4:	cmn	r0, #1
   1c1c8:	moveq	r0, #0
   1c1cc:	beq	1c1dc <__assert_fail@plt+0x9b08>
   1c1d0:	bl	1262c <isatty@plt>
   1c1d4:	adds	r0, r0, #0
   1c1d8:	movne	r0, #1
   1c1dc:	strb	r0, [r4, #12]
   1c1e0:	pop	{r3, r4, r5, pc}
   1c1e4:	movw	r3, #26024	; 0x65a8
   1c1e8:	movt	r3, #4
   1c1ec:	movw	r1, #1340	; 0x53c
   1c1f0:	mov	r2, #5
   1c1f4:	ldr	r3, [r3]
   1c1f8:	movt	r1, #3
   1c1fc:	str	r3, [r4, #4]
   1c200:	bl	1217c <dcgettext@plt>
   1c204:	ldr	r3, [r4, #4]
   1c208:	str	r0, [r4, #8]
   1c20c:	b	1c1bc <__assert_fail@plt+0x9ae8>
   1c210:	movw	r3, #26016	; 0x65a0
   1c214:	movt	r3, #4
   1c218:	movw	r1, #7120	; 0x1bd0
   1c21c:	mov	r2, #5
   1c220:	ldr	r3, [r3]
   1c224:	movt	r1, #3
   1c228:	str	r3, [r4, #4]
   1c22c:	bl	1217c <dcgettext@plt>
   1c230:	ldr	r3, [r4, #4]
   1c234:	str	r0, [r4, #8]
   1c238:	b	1c1bc <__assert_fail@plt+0x9ae8>
   1c23c:	bl	12434 <__errno_location@plt>
   1c240:	mov	r1, r5
   1c244:	ldr	r0, [r0]
   1c248:	bl	19130 <__assert_fail@plt+0x6a5c>
   1c24c:	push	{r4, r5, r6, r7, r8, lr}
   1c250:	movw	r4, #26008	; 0x6598
   1c254:	movt	r4, #4
   1c258:	sub	sp, sp, #24
   1c25c:	cmp	r1, #0
   1c260:	mov	r8, r0
   1c264:	ldr	r3, [r4]
   1c268:	mov	r5, r2
   1c26c:	ldr	r6, [r2]
   1c270:	moveq	r0, r1
   1c274:	str	r3, [sp, #20]
   1c278:	beq	1c2bc <__assert_fail@plt+0x9be8>
   1c27c:	ldr	r7, [r1, r6, lsl #2]
   1c280:	cmp	r7, #0
   1c284:	moveq	r0, r7
   1c288:	beq	1c2bc <__assert_fail@plt+0x9be8>
   1c28c:	add	r3, r6, #1
   1c290:	mov	r1, sp
   1c294:	str	r3, [r2]
   1c298:	movw	r0, #7136	; 0x1be0
   1c29c:	movt	r0, #3
   1c2a0:	bl	1c148 <__assert_fail@plt+0x9a74>
   1c2a4:	mov	r0, sp
   1c2a8:	mov	r1, r8
   1c2ac:	mov	r2, r7
   1c2b0:	bl	1ab20 <__assert_fail@plt+0x844c>
   1c2b4:	cmp	r0, #0
   1c2b8:	streq	r6, [r5]
   1c2bc:	ldr	r2, [sp, #20]
   1c2c0:	ldr	r3, [r4]
   1c2c4:	cmp	r2, r3
   1c2c8:	bne	1c2d4 <__assert_fail@plt+0x9c00>
   1c2cc:	add	sp, sp, #24
   1c2d0:	pop	{r4, r5, r6, r7, r8, pc}
   1c2d4:	bl	12188 <__stack_chk_fail@plt>
   1c2d8:	push	{r4, lr}
   1c2dc:	bl	18010 <__assert_fail@plt+0x593c>
   1c2e0:	mov	r4, #1
   1c2e4:	mov	r2, #0
   1c2e8:	mov	r3, r0
   1c2ec:	strb	r4, [r0, #17]
   1c2f0:	strb	r4, [r0, #16]
   1c2f4:	add	r1, r0, #40	; 0x28
   1c2f8:	strb	r2, [r3, #19]
   1c2fc:	movw	r0, #7136	; 0x1be0
   1c300:	strb	r2, [r3, #18]
   1c304:	movt	r0, #3
   1c308:	bl	1c148 <__assert_fail@plt+0x9a74>
   1c30c:	mov	r0, r4
   1c310:	pop	{r4, pc}
   1c314:	push	{r3, r4, r5, lr}
   1c318:	mov	r5, r1
   1c31c:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1c320:	cmp	r5, #0
   1c324:	mov	r4, r0
   1c328:	movweq	r0, #7136	; 0x1be0
   1c32c:	movne	r0, r5
   1c330:	movteq	r0, #3
   1c334:	addne	r1, r4, #40	; 0x28
   1c338:	addeq	r1, r4, #40	; 0x28
   1c33c:	bl	1c148 <__assert_fail@plt+0x9a74>
   1c340:	mov	r3, #1
   1c344:	mov	r2, #1065353216	; 0x3f800000
   1c348:	mov	r0, r3
   1c34c:	strb	r3, [r4, #17]
   1c350:	strb	r3, [r4, #16]
   1c354:	mov	r3, #0
   1c358:	str	r2, [r4, #28]
   1c35c:	strb	r3, [r4, #19]
   1c360:	strb	r3, [r4, #18]
   1c364:	pop	{r3, r4, r5, pc}
   1c368:	mov	r1, #0
   1c36c:	b	1c314 <__assert_fail@plt+0x9c40>
   1c370:	cmp	r1, #0
   1c374:	push	{r4, lr}
   1c378:	mov	r4, r2
   1c37c:	beq	1c3b0 <__assert_fail@plt+0x9cdc>
   1c380:	ldr	r3, [r2]
   1c384:	ldr	r1, [r1, r3, lsl #2]
   1c388:	cmp	r1, #0
   1c38c:	beq	1c3b0 <__assert_fail@plt+0x9cdc>
   1c390:	add	r3, r3, #1
   1c394:	str	r3, [r2]
   1c398:	bl	1c314 <__assert_fail@plt+0x9c40>
   1c39c:	cmp	r0, #0
   1c3a0:	ldreq	r3, [r4]
   1c3a4:	subeq	r3, r3, #1
   1c3a8:	streq	r3, [r4]
   1c3ac:	pop	{r4, pc}
   1c3b0:	mov	r0, r1
   1c3b4:	pop	{r4, pc}
   1c3b8:	cmp	r1, #0
   1c3bc:	push	{r3, r4, r5, lr}
   1c3c0:	beq	1c408 <__assert_fail@plt+0x9d34>
   1c3c4:	ldr	r3, [r2]
   1c3c8:	ldr	r5, [r1, r3, lsl #2]
   1c3cc:	cmp	r5, #0
   1c3d0:	beq	1c410 <__assert_fail@plt+0x9d3c>
   1c3d4:	add	r3, r3, #1
   1c3d8:	str	r3, [r2]
   1c3dc:	bl	18010 <__assert_fail@plt+0x593c>
   1c3e0:	mov	r4, r0
   1c3e4:	mov	r0, r5
   1c3e8:	add	r1, r4, #40	; 0x28
   1c3ec:	bl	1c148 <__assert_fail@plt+0x9a74>
   1c3f0:	mov	r0, #1
   1c3f4:	mov	r3, #1065353216	; 0x3f800000
   1c3f8:	strb	r0, [r4, #17]
   1c3fc:	strb	r0, [r4, #16]
   1c400:	str	r3, [r4, #28]
   1c404:	pop	{r3, r4, r5, pc}
   1c408:	mov	r0, r1
   1c40c:	pop	{r3, r4, r5, pc}
   1c410:	mov	r0, r5
   1c414:	pop	{r3, r4, r5, pc}
   1c418:	push	{r4, r5, r6, r7, r8, lr}
   1c41c:	movw	r5, #26008	; 0x6598
   1c420:	movt	r5, #4
   1c424:	mov	r6, r2
   1c428:	sub	sp, sp, #24
   1c42c:	cmp	r1, #0
   1c430:	ldr	r2, [r5]
   1c434:	mov	r8, r0
   1c438:	ldr	r4, [r6]
   1c43c:	str	r2, [sp, #20]
   1c440:	beq	1c498 <__assert_fail@plt+0x9dc4>
   1c444:	ldr	r0, [r1, r4, lsl #2]
   1c448:	lsl	r2, r4, #2
   1c44c:	cmp	r0, #0
   1c450:	beq	1c498 <__assert_fail@plt+0x9dc4>
   1c454:	add	r3, r1, r2
   1c458:	add	r2, r4, #1
   1c45c:	str	r2, [r6]
   1c460:	ldr	r7, [r3, #4]
   1c464:	cmp	r7, #0
   1c468:	beq	1c498 <__assert_fail@plt+0x9dc4>
   1c46c:	add	r4, r4, #2
   1c470:	mov	r1, sp
   1c474:	str	r4, [r6]
   1c478:	bl	1c148 <__assert_fail@plt+0x9a74>
   1c47c:	mov	r0, sp
   1c480:	mov	r1, r8
   1c484:	mov	r2, r7
   1c488:	ldr	r4, [r6]
   1c48c:	bl	1ab20 <__assert_fail@plt+0x844c>
   1c490:	cmp	r0, #0
   1c494:	bne	1c4a0 <__assert_fail@plt+0x9dcc>
   1c498:	mov	r0, #0
   1c49c:	str	r4, [r6]
   1c4a0:	ldr	r2, [sp, #20]
   1c4a4:	ldr	r3, [r5]
   1c4a8:	cmp	r2, r3
   1c4ac:	bne	1c4b8 <__assert_fail@plt+0x9de4>
   1c4b0:	add	sp, sp, #24
   1c4b4:	pop	{r4, r5, r6, r7, r8, pc}
   1c4b8:	bl	12188 <__stack_chk_fail@plt>
   1c4bc:	cmp	r1, #0
   1c4c0:	push	{r3, r4, r5, lr}
   1c4c4:	beq	1c520 <__assert_fail@plt+0x9e4c>
   1c4c8:	ldr	r3, [r2]
   1c4cc:	ldr	r5, [r1, r3, lsl #2]
   1c4d0:	cmp	r5, #0
   1c4d4:	beq	1c528 <__assert_fail@plt+0x9e54>
   1c4d8:	add	r3, r3, #1
   1c4dc:	mov	r1, r5
   1c4e0:	str	r3, [r2]
   1c4e4:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1c4e8:	mov	r4, r0
   1c4ec:	mov	r0, r5
   1c4f0:	add	r1, r4, #40	; 0x28
   1c4f4:	bl	1c148 <__assert_fail@plt+0x9a74>
   1c4f8:	mov	r3, #1
   1c4fc:	mov	r2, #0
   1c500:	mov	r1, #1065353216	; 0x3f800000
   1c504:	strb	r3, [r4, #17]
   1c508:	mov	r0, r3
   1c50c:	strb	r3, [r4, #16]
   1c510:	strb	r2, [r4, #19]
   1c514:	strb	r2, [r4, #18]
   1c518:	str	r1, [r4, #28]
   1c51c:	pop	{r3, r4, r5, pc}
   1c520:	mov	r0, r1
   1c524:	pop	{r3, r4, r5, pc}
   1c528:	mov	r0, r5
   1c52c:	pop	{r3, r4, r5, pc}
   1c530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c534:	movw	r4, #26008	; 0x6598
   1c538:	movt	r4, #4
   1c53c:	sub	sp, sp, #28
   1c540:	cmp	r1, #0
   1c544:	mov	r8, r0
   1c548:	ldr	r3, [r4]
   1c54c:	moveq	r5, r1
   1c550:	str	r3, [sp, #20]
   1c554:	beq	1c630 <__assert_fail@plt+0x9f5c>
   1c558:	ldr	r3, [r2]
   1c55c:	ldr	r5, [r1, r3, lsl #2]
   1c560:	cmp	r5, #0
   1c564:	beq	1c630 <__assert_fail@plt+0x9f5c>
   1c568:	add	r3, r3, #1
   1c56c:	str	r3, [r2]
   1c570:	ldrb	r3, [r5]
   1c574:	cmp	r3, #45	; 0x2d
   1c578:	beq	1c660 <__assert_fail@plt+0x9f8c>
   1c57c:	cmp	r3, #47	; 0x2f
   1c580:	beq	1c64c <__assert_fail@plt+0x9f78>
   1c584:	cmp	r3, #43	; 0x2b
   1c588:	beq	1c6bc <__assert_fail@plt+0x9fe8>
   1c58c:	movw	fp, #55050	; 0xd70a
   1c590:	movt	fp, #15395	; 0x3c23
   1c594:	mov	r0, #0
   1c598:	mov	r9, #2
   1c59c:	add	r0, r5, r0
   1c5a0:	bl	24bf8 <__assert_fail@plt+0x12524>
   1c5a4:	subs	r7, r0, #0
   1c5a8:	beq	1c760 <__assert_fail@plt+0xa08c>
   1c5ac:	mov	r6, #0
   1c5b0:	mov	r3, r7
   1c5b4:	mov	r1, r6
   1c5b8:	mov	r2, r6
   1c5bc:	str	r6, [sp]
   1c5c0:	mov	r0, r6
   1c5c4:	bl	25008 <__assert_fail@plt+0x12934>
   1c5c8:	mov	r2, r6
   1c5cc:	mov	r3, r7
   1c5d0:	str	r6, [sp]
   1c5d4:	mov	r1, #1
   1c5d8:	mov	sl, r0
   1c5dc:	mov	r0, r6
   1c5e0:	str	sl, [sp, #12]
   1c5e4:	bl	25008 <__assert_fail@plt+0x12934>
   1c5e8:	mov	r6, r0
   1c5ec:	mov	r0, r7
   1c5f0:	str	r6, [sp, #16]
   1c5f4:	bl	120c8 <free@plt>
   1c5f8:	ldrb	r3, [r5]
   1c5fc:	cmp	r3, #47	; 0x2f
   1c600:	beq	1c674 <__assert_fail@plt+0x9fa0>
   1c604:	mov	r1, r5
   1c608:	mov	r0, r8
   1c60c:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1c610:	add	r2, sp, #12
   1c614:	mov	r5, #1
   1c618:	mov	r3, r0
   1c61c:	str	fp, [r0, #28]
   1c620:	str	r9, [r0, #40]	; 0x28
   1c624:	ldm	r2!, {r0, r1}
   1c628:	str	r0, [r3, #44]	; 0x2c
   1c62c:	str	r1, [r3, #48]	; 0x30
   1c630:	ldr	r2, [sp, #20]
   1c634:	mov	r0, r5
   1c638:	ldr	r3, [r4]
   1c63c:	cmp	r2, r3
   1c640:	bne	1c7a4 <__assert_fail@plt+0xa0d0>
   1c644:	add	sp, sp, #28
   1c648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c64c:	mov	r0, #1
   1c650:	movw	fp, #39322	; 0x999a
   1c654:	mov	r9, r0
   1c658:	movt	fp, #16025	; 0x3e99
   1c65c:	b	1c59c <__assert_fail@plt+0x9ec8>
   1c660:	movw	fp, #52429	; 0xcccd
   1c664:	mov	r0, #1
   1c668:	mov	r9, #0
   1c66c:	movt	fp, #15948	; 0x3e4c
   1c670:	b	1c59c <__assert_fail@plt+0x9ec8>
   1c674:	cmp	sl, #0
   1c678:	bne	1c604 <__assert_fail@plt+0x9f30>
   1c67c:	cmp	r6, #0
   1c680:	bne	1c604 <__assert_fail@plt+0x9f30>
   1c684:	mov	r2, #5
   1c688:	movw	r1, #7412	; 0x1cf4
   1c68c:	mov	r0, r6
   1c690:	movt	r1, #3
   1c694:	bl	1217c <dcgettext@plt>
   1c698:	mov	r1, r6
   1c69c:	mov	r3, r5
   1c6a0:	movw	fp, #42048	; 0xa440
   1c6a4:	mov	r9, r6
   1c6a8:	movt	fp, #16255	; 0x3f7f
   1c6ac:	mov	r2, r0
   1c6b0:	mov	r0, r6
   1c6b4:	bl	122cc <error@plt>
   1c6b8:	b	1c604 <__assert_fail@plt+0x9f30>
   1c6bc:	ldrb	r3, [r5, #1]
   1c6c0:	sub	r3, r3, #48	; 0x30
   1c6c4:	cmp	r3, #7
   1c6c8:	bls	1c748 <__assert_fail@plt+0xa074>
   1c6cc:	mov	r0, r5
   1c6d0:	bl	24bf8 <__assert_fail@plt+0x12524>
   1c6d4:	subs	r7, r0, #0
   1c6d8:	movwne	fp, #52429	; 0xcccd
   1c6dc:	movne	r9, #2
   1c6e0:	movtne	fp, #15820	; 0x3dcc
   1c6e4:	bne	1c5ac <__assert_fail@plt+0x9ed8>
   1c6e8:	movw	r6, #29372	; 0x72bc
   1c6ec:	movt	r6, #4
   1c6f0:	ldrb	r3, [r6, #18]
   1c6f4:	cmp	r3, #0
   1c6f8:	beq	1c64c <__assert_fail@plt+0x9f78>
   1c6fc:	mov	r2, #5
   1c700:	movw	r1, #7344	; 0x1cb0
   1c704:	movt	r1, #3
   1c708:	movw	fp, #39322	; 0x999a
   1c70c:	bl	1217c <dcgettext@plt>
   1c710:	ldr	r1, [r6, #72]	; 0x48
   1c714:	mov	r2, r5
   1c718:	movt	fp, #16025	; 0x3e99
   1c71c:	mov	r9, r0
   1c720:	mov	r0, r7
   1c724:	bl	284fc <__assert_fail@plt+0x15e28>
   1c728:	mov	r2, r9
   1c72c:	mov	r1, r7
   1c730:	mov	r3, r0
   1c734:	mov	r0, #1
   1c738:	bl	122cc <error@plt>
   1c73c:	mov	r0, #1
   1c740:	mov	r9, r0
   1c744:	b	1c59c <__assert_fail@plt+0x9ec8>
   1c748:	mov	r0, #0
   1c74c:	movw	r2, #7148	; 0x1bec
   1c750:	mov	r1, r0
   1c754:	movt	r2, #3
   1c758:	bl	122cc <error@plt>
   1c75c:	b	1c6cc <__assert_fail@plt+0x9ff8>
   1c760:	mov	r2, #5
   1c764:	movw	r1, #7396	; 0x1ce4
   1c768:	movt	r1, #3
   1c76c:	bl	1217c <dcgettext@plt>
   1c770:	movw	r3, #29372	; 0x72bc
   1c774:	movt	r3, #4
   1c778:	mov	r2, r5
   1c77c:	ldr	r1, [r3, #72]	; 0x48
   1c780:	mov	r6, r0
   1c784:	mov	r0, r7
   1c788:	bl	284fc <__assert_fail@plt+0x15e28>
   1c78c:	mov	r2, r6
   1c790:	mov	r1, r7
   1c794:	mov	r3, r0
   1c798:	mov	r0, #1
   1c79c:	bl	122cc <error@plt>
   1c7a0:	b	1c5ac <__assert_fail@plt+0x9ed8>
   1c7a4:	bl	12188 <__stack_chk_fail@plt>
   1c7a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7ac:	movw	ip, #26008	; 0x6598
   1c7b0:	sub	sp, sp, #92	; 0x5c
   1c7b4:	movt	ip, #4
   1c7b8:	cmp	r2, #0
   1c7bc:	mov	r5, r0
   1c7c0:	str	r2, [sp, #32]
   1c7c4:	ldr	r2, [ip]
   1c7c8:	str	ip, [sp, #28]
   1c7cc:	str	r3, [sp, #36]	; 0x24
   1c7d0:	ldr	r8, [r1, #12]
   1c7d4:	str	r2, [sp, #84]	; 0x54
   1c7d8:	beq	1ce7c <__assert_fail@plt+0xa7a8>
   1c7dc:	ldr	r3, [r3]
   1c7e0:	ldr	ip, [sp, #32]
   1c7e4:	ldr	r0, [ip, r3, lsl #2]
   1c7e8:	cmp	r0, #0
   1c7ec:	beq	1cbe8 <__assert_fail@plt+0xa514>
   1c7f0:	mov	r0, r1
   1c7f4:	movw	r2, #7640	; 0x1dd8
   1c7f8:	mov	r1, r8
   1c7fc:	movt	r2, #3
   1c800:	movw	ip, #18468	; 0x4824
   1c804:	movt	ip, #1
   1c808:	str	ip, [sp, #20]
   1c80c:	bl	17f84 <__assert_fail@plt+0x58b0>
   1c810:	ldr	ip, [sp, #20]
   1c814:	mov	r9, #0
   1c818:	mov	r3, #1
   1c81c:	cmp	r8, ip
   1c820:	mov	sl, r0
   1c824:	add	ip, r0, #40	; 0x28
   1c828:	strb	r3, [r0, #17]
   1c82c:	strb	r3, [r0, #16]
   1c830:	str	ip, [sp, #52]	; 0x34
   1c834:	strb	r9, [r0, #18]
   1c838:	strb	r9, [r0, #19]
   1c83c:	str	r9, [r0, #144]	; 0x90
   1c840:	beq	1cd14 <__assert_fail@plt+0xa640>
   1c844:	movw	r2, #18408	; 0x47e8
   1c848:	movt	r2, #1
   1c84c:	cmp	r8, r2
   1c850:	movw	r2, #16948	; 0x4234
   1c854:	movt	r2, #1
   1c858:	beq	1ce44 <__assert_fail@plt+0xa770>
   1c85c:	cmp	r8, r2
   1c860:	strb	r9, [r0, #140]	; 0x8c
   1c864:	mov	r9, r3
   1c868:	beq	1cd18 <__assert_fail@plt+0xa644>
   1c86c:	movw	r3, #26044	; 0x65bc
   1c870:	movt	r3, #4
   1c874:	ldr	r3, [r3]
   1c878:	cmp	r3, #0
   1c87c:	strne	r3, [sl, #144]	; 0x90
   1c880:	beq	1ce94 <__assert_fail@plt+0xa7c0>
   1c884:	ldr	ip, [sp, #36]	; 0x24
   1c888:	mov	r7, #0
   1c88c:	ldr	r1, [sp, #32]
   1c890:	strb	r7, [sl, #40]	; 0x28
   1c894:	ldr	ip, [ip]
   1c898:	ldr	r4, [r1, ip, lsl #2]
   1c89c:	str	ip, [sp, #24]
   1c8a0:	lsl	ip, ip, #2
   1c8a4:	cmp	r4, r7
   1c8a8:	str	ip, [sp, #44]	; 0x2c
   1c8ac:	add	ip, r1, ip
   1c8b0:	str	ip, [sp, #40]	; 0x28
   1c8b4:	beq	1ce60 <__assert_fail@plt+0xa78c>
   1c8b8:	ldr	r5, [sp, #24]
   1c8bc:	movw	r3, #16948	; 0x4234
   1c8c0:	movt	r3, #1
   1c8c4:	str	sl, [sp, #48]	; 0x30
   1c8c8:	mov	r6, r7
   1c8cc:	mov	r0, r7
   1c8d0:	mov	sl, r5
   1c8d4:	mov	r1, ip
   1c8d8:	mov	r5, ip
   1c8dc:	mov	fp, r3
   1c8e0:	b	1c954 <__assert_fail@plt+0xa280>
   1c8e4:	cmp	r9, #0
   1c8e8:	beq	1c8f4 <__assert_fail@plt+0xa220>
   1c8ec:	cmp	r2, #43	; 0x2b
   1c8f0:	beq	1c980 <__assert_fail@plt+0xa2ac>
   1c8f4:	mov	r0, r4
   1c8f8:	movw	r1, #8112	; 0x1fb0
   1c8fc:	movt	r1, #3
   1c900:	bl	23fe0 <__assert_fail@plt+0x1190c>
   1c904:	cmp	r0, #0
   1c908:	moveq	r4, r7
   1c90c:	beq	1c934 <__assert_fail@plt+0xa260>
   1c910:	cmp	sl, #0
   1c914:	add	r6, r6, #1
   1c918:	bne	1c930 <__assert_fail@plt+0xa25c>
   1c91c:	cmp	r8, fp
   1c920:	beq	1c9b0 <__assert_fail@plt+0xa2dc>
   1c924:	ldr	ip, [sp, #20]
   1c928:	cmp	r8, ip
   1c92c:	beq	1c9b0 <__assert_fail@plt+0xa2dc>
   1c930:	mov	r0, #1
   1c934:	ldr	r2, [r5, #4]
   1c938:	add	sl, sl, #1
   1c93c:	add	r1, r5, #4
   1c940:	cmp	r2, #0
   1c944:	beq	1cc04 <__assert_fail@plt+0xa530>
   1c948:	mov	r7, r4
   1c94c:	mov	r5, r1
   1c950:	mov	r4, r2
   1c954:	ldrb	r2, [r4]
   1c958:	cmp	r2, #59	; 0x3b
   1c95c:	bne	1c8e4 <__assert_fail@plt+0xa210>
   1c960:	ldrb	r2, [r4, #1]
   1c964:	cmp	r2, #0
   1c968:	bne	1c8f4 <__assert_fail@plt+0xa220>
   1c96c:	mov	r5, sl
   1c970:	mov	ip, r1
   1c974:	ldr	sl, [sp, #48]	; 0x30
   1c978:	mov	r4, r7
   1c97c:	b	1cc10 <__assert_fail@plt+0xa53c>
   1c980:	ldrb	r2, [r4, #1]
   1c984:	cmp	r2, #0
   1c988:	bne	1c8f4 <__assert_fail@plt+0xa220>
   1c98c:	cmp	r0, #0
   1c990:	beq	1c8f4 <__assert_fail@plt+0xa220>
   1c994:	mov	r5, sl
   1c998:	ldr	sl, [sp, #48]	; 0x30
   1c99c:	mov	r3, #1
   1c9a0:	mov	ip, r1
   1c9a4:	mov	r4, r7
   1c9a8:	strb	r3, [sl, #40]	; 0x28
   1c9ac:	b	1cc10 <__assert_fail@plt+0xa53c>
   1c9b0:	mov	r2, #5
   1c9b4:	movw	r1, #8116	; 0x1fb4
   1c9b8:	mov	r0, #0
   1c9bc:	movt	r1, #3
   1c9c0:	bl	1217c <dcgettext@plt>
   1c9c4:	mov	r1, #0
   1c9c8:	mov	r2, r0
   1c9cc:	mov	r0, #1
   1c9d0:	bl	122cc <error@plt>
   1c9d4:	mov	r0, #1
   1c9d8:	b	1c934 <__assert_fail@plt+0xa260>
   1c9dc:	mov	r0, r4
   1c9e0:	str	ip, [sp, #16]
   1c9e4:	bl	123d4 <strlen@plt>
   1c9e8:	ldr	ip, [sp, #16]
   1c9ec:	cmp	r0, #2
   1c9f0:	beq	1caa4 <__assert_fail@plt+0xa3d0>
   1c9f4:	mov	r1, #19
   1c9f8:	str	r8, [sp, #4]
   1c9fc:	movw	r2, #8288	; 0x2060
   1ca00:	add	r0, sp, #64	; 0x40
   1ca04:	movt	r2, #3
   1ca08:	mov	r3, r1
   1ca0c:	str	r2, [sp]
   1ca10:	mov	r2, #1
   1ca14:	bl	126bc <__snprintf_chk@plt>
   1ca18:	ldr	ip, [sp, #16]
   1ca1c:	cmp	r0, #19
   1ca20:	bhi	1ceb0 <__assert_fail@plt+0xa7dc>
   1ca24:	mov	r2, #5
   1ca28:	movw	r1, #8332	; 0x208c
   1ca2c:	mov	r0, #0
   1ca30:	movt	r1, #3
   1ca34:	str	ip, [sp, #16]
   1ca38:	bl	1217c <dcgettext@plt>
   1ca3c:	movw	r6, #29372	; 0x72bc
   1ca40:	movt	r6, #4
   1ca44:	add	r2, sp, #64	; 0x40
   1ca48:	ldr	r1, [r6, #72]	; 0x48
   1ca4c:	mov	r9, r0
   1ca50:	mov	r0, #0
   1ca54:	bl	284fc <__assert_fail@plt+0x15e28>
   1ca58:	ldr	r1, [r6, #72]	; 0x48
   1ca5c:	movw	r2, #8112	; 0x1fb0
   1ca60:	movt	r2, #3
   1ca64:	mov	r8, r0
   1ca68:	mov	r0, #1
   1ca6c:	bl	284fc <__assert_fail@plt+0x15e28>
   1ca70:	ldr	r1, [r6, #72]	; 0x48
   1ca74:	mov	r2, r4
   1ca78:	mov	r7, r0
   1ca7c:	mov	r0, #2
   1ca80:	bl	284fc <__assert_fail@plt+0x15e28>
   1ca84:	str	r7, [sp]
   1ca88:	mov	r2, r9
   1ca8c:	mov	r3, r8
   1ca90:	mov	r1, #0
   1ca94:	str	r0, [sp, #4]
   1ca98:	mov	r0, #1
   1ca9c:	bl	122cc <error@plt>
   1caa0:	ldr	ip, [sp, #16]
   1caa4:	add	r6, sl, #44	; 0x2c
   1caa8:	mov	r1, #2048	; 0x800
   1caac:	str	ip, [sp, #16]
   1cab0:	mov	r0, r6
   1cab4:	bl	1fe20 <__assert_fail@plt+0xd74c>
   1cab8:	ldr	ip, [sp, #16]
   1cabc:	sub	r0, r0, #1
   1cac0:	cmp	r0, #1
   1cac4:	bhi	1caf0 <__assert_fail@plt+0xa41c>
   1cac8:	mov	r2, #5
   1cacc:	movw	r1, #8392	; 0x20c8
   1cad0:	mov	r0, #0
   1cad4:	movt	r1, #3
   1cad8:	bl	1217c <dcgettext@plt>
   1cadc:	mov	r1, #0
   1cae0:	mov	r2, r0
   1cae4:	mov	r0, #1
   1cae8:	bl	122cc <error@plt>
   1caec:	ldr	ip, [sp, #16]
   1caf0:	mov	r0, r6
   1caf4:	str	ip, [sp, #16]
   1caf8:	bl	1feec <__assert_fail@plt+0xd818>
   1cafc:	ldrb	r4, [sl, #40]	; 0x28
   1cb00:	movw	r3, #22316	; 0x572c
   1cb04:	ldr	ip, [sp, #16]
   1cb08:	cmp	r4, #0
   1cb0c:	movt	r3, #1
   1cb10:	str	r3, [sl, #76]	; 0x4c
   1cb14:	beq	1cc94 <__assert_fail@plt+0xa5c0>
   1cb18:	ldr	r1, [sp, #24]
   1cb1c:	add	r7, sl, #88	; 0x58
   1cb20:	mov	r4, #0
   1cb24:	ldr	r2, [sp, #52]	; 0x34
   1cb28:	rsb	r3, r1, r5
   1cb2c:	str	r4, [sl, #132]	; 0x84
   1cb30:	sub	r3, r3, #1
   1cb34:	str	r4, [sl, #68]	; 0x44
   1cb38:	str	r3, [sl, #72]	; 0x48
   1cb3c:	mov	r1, r7
   1cb40:	str	r4, [sl, #64]	; 0x40
   1cb44:	mov	r0, r6
   1cb48:	str	r4, [sl, #80]	; 0x50
   1cb4c:	sub	r8, r5, #1
   1cb50:	str	r4, [sl, #84]	; 0x54
   1cb54:	str	ip, [sp, #16]
   1cb58:	bl	1ff0c <__assert_fail@plt+0xd838>
   1cb5c:	ldr	r2, [sp, #24]
   1cb60:	ldr	ip, [sp, #16]
   1cb64:	cmp	r2, r8
   1cb68:	bge	1cbcc <__assert_fail@plt+0xa4f8>
   1cb6c:	ldr	r3, [sp, #44]	; 0x2c
   1cb70:	mov	r9, #1
   1cb74:	ldr	r1, [sp, #32]
   1cb78:	sub	sl, r3, #4
   1cb7c:	str	r5, [sp, #20]
   1cb80:	add	sl, r1, sl
   1cb84:	ldr	fp, [sp, #24]
   1cb88:	str	ip, [sp, #24]
   1cb8c:	mov	r5, sl
   1cb90:	ldr	sl, [r5, #4]!
   1cb94:	add	fp, fp, #1
   1cb98:	mov	r0, sl
   1cb9c:	bl	123d4 <strlen@plt>
   1cba0:	mov	r2, sl
   1cba4:	str	r4, [sp]
   1cba8:	mov	r1, r7
   1cbac:	stmib	sp, {r4, r9}
   1cbb0:	add	r3, r0, #1
   1cbb4:	mov	r0, r6
   1cbb8:	bl	1f6bc <__assert_fail@plt+0xcfe8>
   1cbbc:	cmp	fp, r8
   1cbc0:	bne	1cb90 <__assert_fail@plt+0xa4bc>
   1cbc4:	ldr	r5, [sp, #20]
   1cbc8:	ldr	ip, [sp, #24]
   1cbcc:	ldr	r3, [ip]
   1cbd0:	cmp	r3, #0
   1cbd4:	beq	1ce84 <__assert_fail@plt+0xa7b0>
   1cbd8:	ldr	ip, [sp, #36]	; 0x24
   1cbdc:	mov	r0, #1
   1cbe0:	add	r5, r5, #1
   1cbe4:	str	r5, [ip]
   1cbe8:	ldr	ip, [sp, #28]
   1cbec:	ldr	r2, [sp, #84]	; 0x54
   1cbf0:	ldr	r3, [ip]
   1cbf4:	cmp	r2, r3
   1cbf8:	bne	1cecc <__assert_fail@plt+0xa7f8>
   1cbfc:	add	sp, sp, #92	; 0x5c
   1cc00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc04:	mov	r5, sl
   1cc08:	ldr	sl, [sp, #48]	; 0x30
   1cc0c:	mov	ip, r1
   1cc10:	ldr	r1, [sp, #24]
   1cc14:	cmp	r5, r1
   1cc18:	beq	1ce64 <__assert_fail@plt+0xa790>
   1cc1c:	ldr	r3, [ip]
   1cc20:	cmp	r3, #0
   1cc24:	beq	1ce64 <__assert_fail@plt+0xa790>
   1cc28:	ldrb	r3, [sl, #40]	; 0x28
   1cc2c:	cmp	r3, #0
   1cc30:	beq	1caa4 <__assert_fail@plt+0xa3d0>
   1cc34:	movw	r1, #16948	; 0x4234
   1cc38:	movt	r1, #1
   1cc3c:	cmp	r8, r1
   1cc40:	movw	r2, #15168	; 0x3b40
   1cc44:	movw	r3, #13272	; 0x33d8
   1cc48:	movt	r2, #3
   1cc4c:	movt	r3, #3
   1cc50:	movne	r8, r2
   1cc54:	moveq	r8, r3
   1cc58:	cmp	r6, #1
   1cc5c:	ble	1c9dc <__assert_fail@plt+0xa308>
   1cc60:	mov	r2, #5
   1cc64:	movw	r1, #8232	; 0x2028
   1cc68:	mov	r0, #0
   1cc6c:	movt	r1, #3
   1cc70:	str	ip, [sp, #16]
   1cc74:	bl	1217c <dcgettext@plt>
   1cc78:	mov	r3, r8
   1cc7c:	mov	r1, #0
   1cc80:	mov	r2, r0
   1cc84:	mov	r0, #1
   1cc88:	bl	122cc <error@plt>
   1cc8c:	ldr	ip, [sp, #16]
   1cc90:	b	1caa4 <__assert_fail@plt+0xa3d0>
   1cc94:	ldr	r2, [sp, #24]
   1cc98:	movw	r3, #8112	; 0x1fb0
   1cc9c:	str	r4, [sl, #80]	; 0x50
   1cca0:	movt	r3, #3
   1cca4:	rsb	r0, r2, r5
   1cca8:	str	r3, [sl, #68]	; 0x44
   1ccac:	str	r0, [sl, #136]	; 0x88
   1ccb0:	mov	r2, #2
   1ccb4:	str	r4, [sl, #84]	; 0x54
   1ccb8:	lsl	r0, r0, #2
   1ccbc:	str	r2, [sl, #64]	; 0x40
   1ccc0:	str	ip, [sp, #16]
   1ccc4:	bl	28e14 <__assert_fail@plt+0x16740>
   1ccc8:	ldr	r2, [sp, #52]	; 0x34
   1cccc:	add	r1, sl, #88	; 0x58
   1ccd0:	str	r0, [sl, #132]	; 0x84
   1ccd4:	mov	r0, r6
   1ccd8:	bl	1ff0c <__assert_fail@plt+0xd838>
   1ccdc:	ldr	r0, [sl, #136]	; 0x88
   1cce0:	ldr	ip, [sp, #16]
   1cce4:	cmp	r0, #0
   1cce8:	ble	1cbcc <__assert_fail@plt+0xa4f8>
   1ccec:	mov	r3, r4
   1ccf0:	ldr	r4, [sp, #40]	; 0x28
   1ccf4:	lsl	r0, r0, #2
   1ccf8:	ldr	r1, [r4, r3]
   1ccfc:	ldr	r2, [sl, #132]	; 0x84
   1cd00:	str	r1, [r2, r3]
   1cd04:	add	r3, r3, #4
   1cd08:	cmp	r3, r0
   1cd0c:	bne	1ccf8 <__assert_fail@plt+0xa624>
   1cd10:	b	1cbcc <__assert_fail@plt+0xa4f8>
   1cd14:	strb	r3, [r0, #140]	; 0x8c
   1cd18:	movw	r3, #29372	; 0x72bc
   1cd1c:	movt	r3, #4
   1cd20:	movw	r0, #8076	; 0x1f8c
   1cd24:	movt	r0, #3
   1cd28:	mov	r2, #0
   1cd2c:	strb	r2, [r3, #15]
   1cd30:	bl	12308 <getenv@plt>
   1cd34:	subs	r4, r0, #0
   1cd38:	beq	1c884 <__assert_fail@plt+0xa1b0>
   1cd3c:	add	r7, sp, #60	; 0x3c
   1cd40:	movw	r1, #61676	; 0xf0ec
   1cd44:	str	r7, [sp]
   1cd48:	add	r3, sp, #56	; 0x38
   1cd4c:	movt	r1, #2
   1cd50:	mov	r2, #1
   1cd54:	bl	20bf4 <__assert_fail@plt+0xe520>
   1cd58:	b	1cdf4 <__assert_fail@plt+0xa720>
   1cd5c:	cmp	r1, #1
   1cd60:	beq	1ce2c <__assert_fail@plt+0xa758>
   1cd64:	ldr	r2, [sp, #56]	; 0x38
   1cd68:	add	r0, r4, r2
   1cd6c:	ldrb	r3, [r4, r2]
   1cd70:	cmp	r3, #47	; 0x2f
   1cd74:	beq	1cdd0 <__assert_fail@plt+0xa6fc>
   1cd78:	bl	121e8 <__strndup@plt>
   1cd7c:	mov	r2, #5
   1cd80:	movw	r1, #7916	; 0x1eec
   1cd84:	movt	r1, #3
   1cd88:	mov	r6, r0
   1cd8c:	mov	r0, #0
   1cd90:	bl	1217c <dcgettext@plt>
   1cd94:	cmp	r6, #0
   1cd98:	ldreq	r1, [sp, #56]	; 0x38
   1cd9c:	movne	r1, r6
   1cda0:	addeq	r1, r4, r1
   1cda4:	mov	fp, r0
   1cda8:	mov	r0, #0
   1cdac:	bl	190b8 <__assert_fail@plt+0x69e4>
   1cdb0:	str	r5, [sp]
   1cdb4:	mov	r2, fp
   1cdb8:	mov	r1, #0
   1cdbc:	mov	r3, r0
   1cdc0:	mov	r0, #1
   1cdc4:	bl	122cc <error@plt>
   1cdc8:	mov	r0, r6
   1cdcc:	bl	120c8 <free@plt>
   1cdd0:	str	r7, [sp]
   1cdd4:	movw	r1, #61676	; 0xf0ec
   1cdd8:	mov	r0, r4
   1cddc:	movt	r1, #2
   1cde0:	mov	r2, #0
   1cde4:	add	r3, sp, #56	; 0x38
   1cde8:	bl	20bf4 <__assert_fail@plt+0xe520>
   1cdec:	cmp	r0, #0
   1cdf0:	beq	1c884 <__assert_fail@plt+0xa1b0>
   1cdf4:	ldr	r1, [sp, #60]	; 0x3c
   1cdf8:	cmp	r1, #0
   1cdfc:	bne	1cd5c <__assert_fail@plt+0xa688>
   1ce00:	mov	r2, #5
   1ce04:	movw	r1, #7664	; 0x1df0
   1ce08:	mov	r0, #0
   1ce0c:	movt	r1, #3
   1ce10:	bl	1217c <dcgettext@plt>
   1ce14:	mov	r1, #0
   1ce18:	mov	r3, r5
   1ce1c:	mov	r2, r0
   1ce20:	mov	r0, #1
   1ce24:	bl	122cc <error@plt>
   1ce28:	b	1cdd0 <__assert_fail@plt+0xa6fc>
   1ce2c:	ldr	r3, [sp, #56]	; 0x38
   1ce30:	add	r0, r4, r3
   1ce34:	ldrb	r3, [r4, r3]
   1ce38:	cmp	r3, #46	; 0x2e
   1ce3c:	bne	1cd70 <__assert_fail@plt+0xa69c>
   1ce40:	b	1ce00 <__assert_fail@plt+0xa72c>
   1ce44:	cmp	r8, r2
   1ce48:	strb	r3, [r0, #140]	; 0x8c
   1ce4c:	beq	1cd18 <__assert_fail@plt+0xa644>
   1ce50:	ldr	ip, [sp, #20]
   1ce54:	cmp	r8, ip
   1ce58:	bne	1c86c <__assert_fail@plt+0xa198>
   1ce5c:	b	1cd18 <__assert_fail@plt+0xa644>
   1ce60:	ldr	r5, [sp, #24]
   1ce64:	ldr	ip, [sp, #36]	; 0x24
   1ce68:	mov	r0, sl
   1ce6c:	str	r5, [ip]
   1ce70:	bl	120c8 <free@plt>
   1ce74:	mov	r0, #0
   1ce78:	b	1cbe8 <__assert_fail@plt+0xa514>
   1ce7c:	ldr	r0, [sp, #32]
   1ce80:	b	1cbe8 <__assert_fail@plt+0xa514>
   1ce84:	ldr	ip, [sp, #36]	; 0x24
   1ce88:	mov	r0, #1
   1ce8c:	str	r5, [ip]
   1ce90:	b	1cbe8 <__assert_fail@plt+0xa514>
   1ce94:	movw	r0, #8084	; 0x1f94
   1ce98:	movw	r1, #6928	; 0x1b10
   1ce9c:	movt	r0, #3
   1cea0:	movt	r1, #3
   1cea4:	movw	r2, #3059	; 0xbf3
   1cea8:	ldr	r3, [pc, #32]	; 1ced0 <__assert_fail@plt+0xa7fc>
   1ceac:	bl	126d4 <__assert_fail@plt>
   1ceb0:	movw	r0, #8308	; 0x2074
   1ceb4:	movw	r1, #6928	; 0x1b10
   1ceb8:	movt	r0, #3
   1cebc:	movt	r1, #3
   1cec0:	mov	r2, #3136	; 0xc40
   1cec4:	ldr	r3, [pc, #4]	; 1ced0 <__assert_fail@plt+0xa7fc>
   1cec8:	bl	126d4 <__assert_fail@plt>
   1cecc:	bl	12188 <__stack_chk_fail@plt>
   1ced0:	andeq	r0, r3, ip, asr #27
   1ced4:	mov	ip, r1
   1ced8:	mov	r3, r2
   1cedc:	mov	r1, r0
   1cee0:	mov	r2, ip
   1cee4:	movw	r0, #61616	; 0xf0b0
   1cee8:	movt	r0, #2
   1ceec:	b	1c7a8 <__assert_fail@plt+0xa0d4>
   1cef0:	mov	ip, r1
   1cef4:	mov	r3, r2
   1cef8:	mov	r1, r0
   1cefc:	mov	r2, ip
   1cf00:	movw	r0, #8436	; 0x20f4
   1cf04:	movt	r0, #3
   1cf08:	b	1c7a8 <__assert_fail@plt+0xa0d4>
   1cf0c:	mov	ip, r1
   1cf10:	mov	r3, r2
   1cf14:	mov	r1, r0
   1cf18:	mov	r2, ip
   1cf1c:	movw	r0, #61624	; 0xf0b8
   1cf20:	movt	r0, #2
   1cf24:	b	1c7a8 <__assert_fail@plt+0xa0d4>
   1cf28:	mov	ip, r1
   1cf2c:	mov	r3, r2
   1cf30:	mov	r1, r0
   1cf34:	mov	r2, ip
   1cf38:	movw	r0, #8440	; 0x20f8
   1cf3c:	movt	r0, #3
   1cf40:	b	1c7a8 <__assert_fail@plt+0xa0d4>
   1cf44:	push	{r3, lr}
   1cf48:	bl	167b4 <__assert_fail@plt+0x40e0>
   1cf4c:	mov	r1, #3
   1cf50:	movw	r2, #15764	; 0x3d94
   1cf54:	movt	r2, #1
   1cf58:	mov	r3, r0
   1cf5c:	str	r1, [r0, #8]
   1cf60:	str	r2, [r0]
   1cf64:	mov	r1, #2
   1cf68:	mov	r2, #0
   1cf6c:	str	r1, [r0, #12]
   1cf70:	strb	r2, [r0, #19]
   1cf74:	mov	r0, #1
   1cf78:	strb	r2, [r3, #18]
   1cf7c:	pop	{r3, pc}
   1cf80:	push	{r3, lr}
   1cf84:	bl	167b4 <__assert_fail@plt+0x40e0>
   1cf88:	mov	r1, #3
   1cf8c:	movw	r2, #15700	; 0x3d54
   1cf90:	movt	r2, #1
   1cf94:	mov	r3, r0
   1cf98:	str	r2, [r0]
   1cf9c:	str	r1, [r0, #8]
   1cfa0:	mov	r2, #0
   1cfa4:	str	r1, [r0, #12]
   1cfa8:	mov	r0, #1
   1cfac:	strb	r2, [r3, #19]
   1cfb0:	strb	r2, [r3, #18]
   1cfb4:	pop	{r3, pc}
   1cfb8:	push	{r3, lr}
   1cfbc:	bl	167b4 <__assert_fail@plt+0x40e0>
   1cfc0:	mov	r1, #1
   1cfc4:	mov	ip, #1065353216	; 0x3f800000
   1cfc8:	movw	r2, #16264	; 0x3f88
   1cfcc:	movt	r2, #1
   1cfd0:	mov	r3, r0
   1cfd4:	mov	r0, #3
   1cfd8:	str	r2, [r3]
   1cfdc:	mov	r2, #0
   1cfe0:	str	r0, [r3, #8]
   1cfe4:	mov	r0, r1
   1cfe8:	str	r1, [r3, #12]
   1cfec:	strb	r2, [r3, #19]
   1cff0:	strb	r2, [r3, #18]
   1cff4:	str	ip, [r3, #28]
   1cff8:	pop	{r3, pc}
   1cffc:	push	{r3, lr}
   1d000:	bl	167b4 <__assert_fail@plt+0x40e0>
   1d004:	mov	r1, #5
   1d008:	movw	r2, #16124	; 0x3efc
   1d00c:	movt	r2, #1
   1d010:	mov	r3, r0
   1d014:	str	r2, [r0]
   1d018:	str	r1, [r0, #8]
   1d01c:	mov	r2, #0
   1d020:	mov	r0, #1
   1d024:	str	r2, [r3, #12]
   1d028:	strb	r2, [r3, #19]
   1d02c:	strb	r2, [r3, #18]
   1d030:	pop	{r3, pc}
   1d034:	cmp	r1, #0
   1d038:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d03c:	mov	r5, r2
   1d040:	sub	sp, sp, #8
   1d044:	mov	r8, r0
   1d048:	ldr	r6, [r2]
   1d04c:	beq	1d128 <__assert_fail@plt+0xaa54>
   1d050:	ldr	r4, [r1, r6, lsl #2]
   1d054:	cmp	r4, #0
   1d058:	moveq	r0, r4
   1d05c:	beq	1d0b8 <__assert_fail@plt+0xa9e4>
   1d060:	add	r3, r6, #1
   1d064:	mov	r0, r4
   1d068:	str	r3, [r2]
   1d06c:	bl	126b0 <getgrnam@plt>
   1d070:	mov	r7, r0
   1d074:	bl	12020 <endgrent@plt>
   1d078:	cmp	r7, #0
   1d07c:	beq	1d0c0 <__assert_fail@plt+0xa9ec>
   1d080:	ldr	r5, [r7, #8]
   1d084:	mov	r1, r4
   1d088:	mov	r0, r8
   1d08c:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1d090:	vldr	s14, [pc, #340]	; 1d1ec <__assert_fail@plt+0xab18>
   1d094:	vldr	s15, [pc, #340]	; 1d1f0 <__assert_fail@plt+0xab1c>
   1d098:	ldrd	r2, [r0, #48]	; 0x30
   1d09c:	mov	r1, r0
   1d0a0:	str	r5, [r0, #40]	; 0x28
   1d0a4:	mov	r0, #1
   1d0a8:	cmp	r3, #0
   1d0ac:	cmpeq	r2, #99	; 0x63
   1d0b0:	vmovhi.f32	s15, s14
   1d0b4:	vstr	s15, [r1, #28]
   1d0b8:	add	sp, sp, #8
   1d0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d0c0:	movw	r1, #6808	; 0x1a98
   1d0c4:	mov	r0, r4
   1d0c8:	movt	r1, #3
   1d0cc:	bl	126c8 <strspn@plt>
   1d0d0:	subs	r9, r0, #0
   1d0d4:	bne	1d134 <__assert_fail@plt+0xaa60>
   1d0d8:	ldrb	r7, [r4]
   1d0dc:	cmp	r7, #0
   1d0e0:	beq	1d160 <__assert_fail@plt+0xaa8c>
   1d0e4:	mov	r2, #5
   1d0e8:	movw	r1, #8576	; 0x2180
   1d0ec:	movt	r1, #3
   1d0f0:	bl	1217c <dcgettext@plt>
   1d0f4:	movw	r3, #29372	; 0x72bc
   1d0f8:	movt	r3, #4
   1d0fc:	mov	r2, r4
   1d100:	ldr	r1, [r3, #72]	; 0x48
   1d104:	mov	r7, r0
   1d108:	mov	r0, r9
   1d10c:	bl	284fc <__assert_fail@plt+0x15e28>
   1d110:	mov	r2, r7
   1d114:	mov	r1, r9
   1d118:	mov	r3, r0
   1d11c:	mov	r0, #1
   1d120:	bl	122cc <error@plt>
   1d124:	str	r6, [r5]
   1d128:	mov	r0, #0
   1d12c:	add	sp, sp, #8
   1d130:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d134:	ldrb	r3, [r4, r9]
   1d138:	add	r9, r4, r9
   1d13c:	cmp	r3, #0
   1d140:	bne	1d184 <__assert_fail@plt+0xaab0>
   1d144:	movw	r3, #29372	; 0x72bc
   1d148:	movt	r3, #4
   1d14c:	mov	r0, r4
   1d150:	ldr	r1, [r3, #72]	; 0x48
   1d154:	bl	20ab4 <__assert_fail@plt+0xe3e0>
   1d158:	mov	r5, r0
   1d15c:	b	1d084 <__assert_fail@plt+0xa9b0>
   1d160:	mov	r2, #5
   1d164:	movw	r1, #8616	; 0x21a8
   1d168:	movt	r1, #3
   1d16c:	bl	1217c <dcgettext@plt>
   1d170:	mov	r1, r7
   1d174:	mov	r2, r0
   1d178:	mov	r0, #1
   1d17c:	bl	122cc <error@plt>
   1d180:	b	1d124 <__assert_fail@plt+0xaa50>
   1d184:	mov	r2, #5
   1d188:	movw	r1, #8448	; 0x2100
   1d18c:	mov	r0, r7
   1d190:	movt	r1, #3
   1d194:	bl	1217c <dcgettext@plt>
   1d198:	movw	r8, #29372	; 0x72bc
   1d19c:	movt	r8, #4
   1d1a0:	mov	r2, r4
   1d1a4:	ldr	r1, [r8, #72]	; 0x48
   1d1a8:	mov	sl, r0
   1d1ac:	mov	r0, r7
   1d1b0:	bl	284fc <__assert_fail@plt+0x15e28>
   1d1b4:	ldr	r1, [r8, #72]	; 0x48
   1d1b8:	mov	r2, r9
   1d1bc:	mov	r4, r0
   1d1c0:	mov	r0, #1
   1d1c4:	bl	284fc <__assert_fail@plt+0x15e28>
   1d1c8:	mov	r2, sl
   1d1cc:	mov	r3, r4
   1d1d0:	mov	r1, r7
   1d1d4:	str	r0, [sp]
   1d1d8:	mov	r0, #1
   1d1dc:	bl	122cc <error@plt>
   1d1e0:	str	r6, [r5]
   1d1e4:	mov	r0, r7
   1d1e8:	b	1d0b8 <__assert_fail@plt+0xa9e4>
   1d1ec:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d1f0:	svccc	0x007d70a4
   1d1f4:	push	{r3, lr}
   1d1f8:	mov	r1, #0
   1d1fc:	bl	167cc <__assert_fail@plt+0x40f8>
   1d200:	mov	r1, #2
   1d204:	movw	r2, #17924	; 0x4604
   1d208:	movt	r2, #1
   1d20c:	mov	r3, r0
   1d210:	str	r1, [r0, #8]
   1d214:	str	r2, [r0]
   1d218:	mov	r1, #4
   1d21c:	mov	r2, #0
   1d220:	str	r1, [r0, #12]
   1d224:	strb	r2, [r0, #19]
   1d228:	mov	r0, #1
   1d22c:	strb	r2, [r3, #18]
   1d230:	pop	{r3, pc}
   1d234:	push	{r3, lr}
   1d238:	mov	r1, #0
   1d23c:	bl	167cc <__assert_fail@plt+0x40f8>
   1d240:	mov	r1, #4
   1d244:	movw	r2, #18532	; 0x4864
   1d248:	movt	r2, #1
   1d24c:	mov	r3, r0
   1d250:	str	r2, [r0]
   1d254:	str	r1, [r0, #8]
   1d258:	mov	r2, #0
   1d25c:	mov	r0, #1
   1d260:	str	r2, [r3, #12]
   1d264:	strb	r2, [r3, #19]
   1d268:	strb	r2, [r3, #18]
   1d26c:	pop	{r3, pc}
   1d270:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d274:	movw	r4, #26008	; 0x6598
   1d278:	movt	r4, #4
   1d27c:	sub	sp, sp, #40	; 0x28
   1d280:	cmp	r1, #0
   1d284:	mov	r8, r0
   1d288:	ldr	r3, [r4]
   1d28c:	moveq	r7, r1
   1d290:	str	r3, [sp, #36]	; 0x24
   1d294:	beq	1d370 <__assert_fail@plt+0xac9c>
   1d298:	ldr	r3, [r2]
   1d29c:	ldr	r5, [r1, r3, lsl #2]
   1d2a0:	cmp	r5, #0
   1d2a4:	moveq	r7, r5
   1d2a8:	beq	1d370 <__assert_fail@plt+0xac9c>
   1d2ac:	add	r0, sp, #12
   1d2b0:	add	r6, sp, #20
   1d2b4:	mov	r1, #0
   1d2b8:	add	r3, r3, #1
   1d2bc:	str	r1, [sp, #12]
   1d2c0:	movw	ip, #8672	; 0x21e0
   1d2c4:	str	r3, [r2]
   1d2c8:	movt	ip, #3
   1d2cc:	str	r1, [sp, #16]
   1d2d0:	vldr	d0, [pc, #240]	; 1d3c8 <__assert_fail@plt+0xacf4>
   1d2d4:	ldm	r0, {r2, r3}
   1d2d8:	mov	r1, r6
   1d2dc:	mov	r0, r5
   1d2e0:	str	ip, [sp]
   1d2e4:	bl	1b664 <__assert_fail@plt+0x8f90>
   1d2e8:	subs	r7, r0, #0
   1d2ec:	beq	1d38c <__assert_fail@plt+0xacb8>
   1d2f0:	mov	r1, r5
   1d2f4:	mov	r0, r8
   1d2f8:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1d2fc:	ldr	r5, [sp, #28]
   1d300:	movw	ip, #17671	; 0x4507
   1d304:	movt	ip, #49710	; 0xc22e
   1d308:	vldr	d7, [pc, #192]	; 1d3d0 <__assert_fail@plt+0xacfc>
   1d30c:	smull	sl, r9, ip, r5
   1d310:	mov	r8, r0
   1d314:	add	ip, r8, #40	; 0x28
   1d318:	ldm	r6, {r0, r1, r2, r3}
   1d31c:	asr	r6, r5, #31
   1d320:	add	r5, r9, r5
   1d324:	rsb	r5, r6, r5, asr #16
   1d328:	stm	ip, {r0, r1, r2, r3}
   1d32c:	vmov	s13, r5
   1d330:	vcvt.f32.s32	s11, s13
   1d334:	vcvt.f64.f32	d6, s11
   1d338:	vcmpe.f64	d6, d7
   1d33c:	vmrs	APSR_nzcv, fpscr
   1d340:	bmi	1d3b4 <__assert_fail@plt+0xace0>
   1d344:	vmov.f32	s15, #112	; 0x3f800000  1.0
   1d348:	vcmpe.f32	s11, s15
   1d34c:	vmrs	APSR_nzcv, fpscr
   1d350:	bmi	1d3bc <__assert_fail@plt+0xace8>
   1d354:	vldr	s15, [pc, #124]	; 1d3d8 <__assert_fail@plt+0xad04>
   1d358:	vcmpe.f32	s11, s15
   1d35c:	vldr	s14, [pc, #120]	; 1d3dc <__assert_fail@plt+0xad08>
   1d360:	vldr	s15, [pc, #120]	; 1d3e0 <__assert_fail@plt+0xad0c>
   1d364:	vmrs	APSR_nzcv, fpscr
   1d368:	vmovgt.f32	s15, s14
   1d36c:	vstr	s15, [r8, #28]
   1d370:	ldr	r2, [sp, #36]	; 0x24
   1d374:	mov	r0, r7
   1d378:	ldr	r3, [r4]
   1d37c:	cmp	r2, r3
   1d380:	bne	1d3c4 <__assert_fail@plt+0xacf0>
   1d384:	add	sp, sp, #40	; 0x28
   1d388:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d38c:	mov	r2, #5
   1d390:	movw	r1, #8740	; 0x2224
   1d394:	movt	r1, #3
   1d398:	bl	1217c <dcgettext@plt>
   1d39c:	mov	r3, r5
   1d3a0:	mov	r1, r7
   1d3a4:	mov	r2, r0
   1d3a8:	mov	r0, #1
   1d3ac:	bl	122cc <error@plt>
   1d3b0:	b	1d370 <__assert_fail@plt+0xac9c>
   1d3b4:	vldr	s15, [pc, #40]	; 1d3e4 <__assert_fail@plt+0xad10>
   1d3b8:	b	1d36c <__assert_fail@plt+0xac98>
   1d3bc:	vldr	s15, [pc, #24]	; 1d3dc <__assert_fail@plt+0xad08>
   1d3c0:	b	1d36c <__assert_fail@plt+0xac98>
   1d3c4:	bl	12188 <__stack_chk_fail@plt>
   1d3c8:	andeq	r0, r0, r0
   1d3cc:	rscsmi	r1, r5, r0, lsl #16
   1d3d0:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1d3d4:	svccc	0x00b99999
   1d3d8:	sbcmi	r0, r8, #0
   1d3dc:			; <UNDEFINED> instruction: 0x3e99999a
   1d3e0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d3e4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d3e8:	push	{r4, r5, r6, r7, lr}
   1d3ec:	mov	r5, r1
   1d3f0:	ldr	r4, [r1]
   1d3f4:	sub	sp, sp, #12
   1d3f8:	mov	r7, r0
   1d3fc:	cmp	r4, #2
   1d400:	beq	1d434 <__assert_fail@plt+0xad60>
   1d404:	cmp	r4, #0
   1d408:	bne	1d440 <__assert_fail@plt+0xad6c>
   1d40c:	movw	r6, #27928	; 0x6d18
   1d410:	movt	r6, #4
   1d414:	ldr	r3, [r6]
   1d418:	cmp	r3, #0
   1d41c:	beq	1d434 <__assert_fail@plt+0xad60>
   1d420:	movw	r2, #29372	; 0x72bc
   1d424:	movt	r2, #4
   1d428:	ldrb	r3, [r2, #17]
   1d42c:	cmp	r3, #0
   1d430:	bne	1d460 <__assert_fail@plt+0xad8c>
   1d434:	mov	r0, r5
   1d438:	add	sp, sp, #12
   1d43c:	pop	{r4, r5, r6, r7, pc}
   1d440:	movw	r2, #27928	; 0x6d18
   1d444:	movt	r2, #4
   1d448:	ldr	r3, [r2]
   1d44c:	cmp	r3, #0
   1d450:	streq	r0, [r2]
   1d454:	mov	r0, r5
   1d458:	add	sp, sp, #12
   1d45c:	pop	{r4, r5, r6, r7, pc}
   1d460:	mov	r0, r4
   1d464:	mov	r2, #5
   1d468:	movw	r1, #8772	; 0x2244
   1d46c:	movt	r1, #3
   1d470:	bl	1217c <dcgettext@plt>
   1d474:	ldr	ip, [r6]
   1d478:	str	r7, [sp, #4]
   1d47c:	mov	r3, r7
   1d480:	mov	r1, r4
   1d484:	str	ip, [sp]
   1d488:	mov	r2, r0
   1d48c:	mov	r0, r4
   1d490:	bl	122cc <error@plt>
   1d494:	mov	r0, r5
   1d498:	add	sp, sp, #12
   1d49c:	pop	{r4, r5, r6, r7, pc}
   1d4a0:	movw	r3, #29328	; 0x7290
   1d4a4:	movt	r3, #4
   1d4a8:	push	{r4, r5, r6, r7, r8, lr}
   1d4ac:	mov	r7, r0
   1d4b0:	ldr	r4, [r3]
   1d4b4:	mov	r6, r1
   1d4b8:	mov	r5, r2
   1d4bc:	cmp	r4, #0
   1d4c0:	bne	1d4d8 <__assert_fail@plt+0xae04>
   1d4c4:	bl	2c808 <fts_children@@Base+0x43c>
   1d4c8:	subs	r8, r0, #0
   1d4cc:	bne	1d4e0 <__assert_fail@plt+0xae0c>
   1d4d0:	mov	r0, r4
   1d4d4:	pop	{r4, r5, r6, r7, r8, pc}
   1d4d8:	pop	{r4, r5, r6, r7, r8, lr}
   1d4dc:	b	2c9d8 <fts_children@@Base+0x60c>
   1d4e0:	bl	12434 <__errno_location@plt>
   1d4e4:	ldr	r3, [r0]
   1d4e8:	cmp	r3, #2
   1d4ec:	beq	1d4fc <__assert_fail@plt+0xae28>
   1d4f0:	cmp	r3, #20
   1d4f4:	movne	r4, r8
   1d4f8:	bne	1d4d0 <__assert_fail@plt+0xadfc>
   1d4fc:	mov	r0, r7
   1d500:	mov	r1, r6
   1d504:	mov	r2, r5
   1d508:	pop	{r4, r5, r6, r7, r8, lr}
   1d50c:	b	2c9d8 <fts_children@@Base+0x60c>
   1d510:	movw	r1, #27928	; 0x6d18
   1d514:	movt	r1, #4
   1d518:	push	{r3, lr}
   1d51c:	ldr	r0, [r1, #4]
   1d520:	cmp	r0, #0
   1d524:	beq	1d54c <__assert_fail@plt+0xae78>
   1d528:	bl	18010 <__assert_fail@plt+0x593c>
   1d52c:	mov	r2, #0
   1d530:	mov	r1, #1065353216	; 0x3f800000
   1d534:	mov	r3, r0
   1d538:	mov	r0, #1
   1d53c:	strb	r2, [r3, #19]
   1d540:	strb	r2, [r3, #18]
   1d544:	str	r1, [r3, #28]
   1d548:	pop	{r3, pc}
   1d54c:	ldr	ip, [pc, #52]	; 1d588 <__assert_fail@plt+0xaeb4>
   1d550:	mov	r3, ip
   1d554:	b	1d564 <__assert_fail@plt+0xae90>
   1d558:	ldr	r2, [r3, #16]!
   1d55c:	cmp	r2, #1
   1d560:	beq	1d57c <__assert_fail@plt+0xaea8>
   1d564:	ldr	r2, [r3, #20]
   1d568:	add	r0, r0, #1
   1d56c:	cmp	r2, #0
   1d570:	bne	1d558 <__assert_fail@plt+0xae84>
   1d574:	mov	r0, r2
   1d578:	b	1d528 <__assert_fail@plt+0xae54>
   1d57c:	add	r0, ip, r0, lsl #4
   1d580:	str	r0, [r1, #4]
   1d584:	b	1d528 <__assert_fail@plt+0xae54>
   1d588:	ldrdeq	r0, [r3], -ip
   1d58c:	movw	r3, #29372	; 0x72bc
   1d590:	movt	r3, #4
   1d594:	mov	r2, #1
   1d598:	strb	r2, [r3, #14]
   1d59c:	b	1d510 <__assert_fail@plt+0xae3c>
   1d5a0:	movw	r3, #29372	; 0x72bc
   1d5a4:	movt	r3, #4
   1d5a8:	mov	r2, #1
   1d5ac:	strb	r2, [r3, #17]
   1d5b0:	b	1d510 <__assert_fail@plt+0xae3c>
   1d5b4:	movw	r3, #29372	; 0x72bc
   1d5b8:	movt	r3, #4
   1d5bc:	mov	r2, #0
   1d5c0:	strb	r2, [r3, #17]
   1d5c4:	b	1d510 <__assert_fail@plt+0xae3c>
   1d5c8:	movw	r3, #29372	; 0x72bc
   1d5cc:	movt	r3, #4
   1d5d0:	mov	r2, #0
   1d5d4:	strb	r2, [r3, #15]
   1d5d8:	b	1d510 <__assert_fail@plt+0xae3c>
   1d5dc:	movw	r3, #29372	; 0x72bc
   1d5e0:	movt	r3, #4
   1d5e4:	mov	r2, #1
   1d5e8:	strb	r2, [r3, #12]
   1d5ec:	b	1d510 <__assert_fail@plt+0xae3c>
   1d5f0:	movw	r3, #29372	; 0x72bc
   1d5f4:	movt	r3, #4
   1d5f8:	mov	r2, #1
   1d5fc:	strb	r2, [r3, #13]
   1d600:	b	1d510 <__assert_fail@plt+0xae3c>
   1d604:	movw	r3, #29372	; 0x72bc
   1d608:	movt	r3, #4
   1d60c:	mov	r2, #1
   1d610:	strb	r2, [r3, #15]
   1d614:	b	1d510 <__assert_fail@plt+0xae3c>
   1d618:	movw	r3, #29372	; 0x72bc
   1d61c:	movt	r3, #4
   1d620:	mov	r1, #0
   1d624:	mov	r2, #1
   1d628:	strb	r1, [r3]
   1d62c:	strb	r2, [r3, #1]
   1d630:	b	1d510 <__assert_fail@plt+0xae3c>
   1d634:	push	{r4, lr}
   1d638:	movw	r4, #29372	; 0x72bc
   1d63c:	movt	r4, #4
   1d640:	ldrb	r3, [r4, #17]
   1d644:	cmp	r3, #0
   1d648:	beq	1d670 <__assert_fail@plt+0xaf9c>
   1d64c:	mov	r2, #5
   1d650:	movw	r1, #9004	; 0x232c
   1d654:	mov	r0, #0
   1d658:	movt	r1, #3
   1d65c:	bl	1217c <dcgettext@plt>
   1d660:	mov	r2, r0
   1d664:	mov	r0, #0
   1d668:	mov	r1, r0
   1d66c:	bl	122cc <error@plt>
   1d670:	mov	r2, #0
   1d674:	mov	r3, #1
   1d678:	strb	r2, [r4]
   1d67c:	strb	r3, [r4, #1]
   1d680:	pop	{r4, lr}
   1d684:	b	1d510 <__assert_fail@plt+0xae3c>
   1d688:	cmp	r1, #0
   1d68c:	push	{r3, lr}
   1d690:	beq	1d6c4 <__assert_fail@plt+0xaff0>
   1d694:	ldr	r3, [r2]
   1d698:	ldr	r0, [r1, r3, lsl #2]
   1d69c:	cmp	r0, #0
   1d6a0:	beq	1d6c4 <__assert_fail@plt+0xaff0>
   1d6a4:	add	r3, r3, #1
   1d6a8:	str	r3, [r2]
   1d6ac:	bl	20158 <__assert_fail@plt+0xda84>
   1d6b0:	movw	r3, #29372	; 0x72bc
   1d6b4:	movt	r3, #4
   1d6b8:	str	r0, [r3, #60]	; 0x3c
   1d6bc:	pop	{r3, lr}
   1d6c0:	b	1d510 <__assert_fail@plt+0xae3c>
   1d6c4:	mov	r0, #0
   1d6c8:	pop	{r3, pc}
   1d6cc:	push	{r4, lr}
   1d6d0:	movw	r4, #27928	; 0x6d18
   1d6d4:	movt	r4, #4
   1d6d8:	ldrb	r2, [r4, #8]
   1d6dc:	cmp	r2, #0
   1d6e0:	beq	1d6ec <__assert_fail@plt+0xb018>
   1d6e4:	mov	r0, #1
   1d6e8:	pop	{r4, pc}
   1d6ec:	movw	r0, #9120	; 0x23a0
   1d6f0:	movt	r0, #3
   1d6f4:	mov	r1, r0
   1d6f8:	bl	122f0 <fnmatch@plt>
   1d6fc:	subs	r2, r0, #0
   1d700:	bne	1d748 <__assert_fail@plt+0xb074>
   1d704:	movw	r0, #9180	; 0x23dc
   1d708:	movw	r1, #9120	; 0x23a0
   1d70c:	movt	r0, #3
   1d710:	movt	r1, #3
   1d714:	bl	122f0 <fnmatch@plt>
   1d718:	cmp	r0, #0
   1d71c:	beq	1d748 <__assert_fail@plt+0xb074>
   1d720:	movw	r0, #9180	; 0x23dc
   1d724:	movw	r1, #9120	; 0x23a0
   1d728:	movt	r0, #3
   1d72c:	movt	r1, #3
   1d730:	mov	r2, #16
   1d734:	bl	122f0 <fnmatch@plt>
   1d738:	cmp	r0, #0
   1d73c:	moveq	r3, #1
   1d740:	strbeq	r3, [r4, #8]
   1d744:	beq	1d6e4 <__assert_fail@plt+0xb010>
   1d748:	mov	r2, #5
   1d74c:	movw	r1, #9124	; 0x23a4
   1d750:	mov	r0, #0
   1d754:	movt	r1, #3
   1d758:	bl	1217c <dcgettext@plt>
   1d75c:	mov	r1, #0
   1d760:	mov	r2, r0
   1d764:	mov	r0, #1
   1d768:	bl	122cc <error@plt>
   1d76c:	mov	r0, #0
   1d770:	pop	{r4, pc}
   1d774:	push	{r3, lr}
   1d778:	ldrb	r3, [r0]
   1d77c:	cmp	r3, #0
   1d780:	beq	1d7c8 <__assert_fail@plt+0xb0f4>
   1d784:	cmp	r3, #42	; 0x2a
   1d788:	beq	1d7ec <__assert_fail@plt+0xb118>
   1d78c:	cmp	r3, #63	; 0x3f
   1d790:	beq	1d7ec <__assert_fail@plt+0xb118>
   1d794:	cmp	r3, #91	; 0x5b
   1d798:	beq	1d7ec <__assert_fail@plt+0xb118>
   1d79c:	mov	r2, r0
   1d7a0:	b	1d7bc <__assert_fail@plt+0xb0e8>
   1d7a4:	cmp	r3, #42	; 0x2a
   1d7a8:	beq	1d7ec <__assert_fail@plt+0xb118>
   1d7ac:	cmp	r3, #63	; 0x3f
   1d7b0:	beq	1d7ec <__assert_fail@plt+0xb118>
   1d7b4:	cmp	r3, #91	; 0x5b
   1d7b8:	beq	1d7ec <__assert_fail@plt+0xb118>
   1d7bc:	ldrb	r3, [r2, #1]!
   1d7c0:	cmp	r3, #0
   1d7c4:	bne	1d7a4 <__assert_fail@plt+0xb0d0>
   1d7c8:	cmp	r1, #0
   1d7cc:	beq	1d7f4 <__assert_fail@plt+0xb120>
   1d7d0:	mov	r1, #46	; 0x2e
   1d7d4:	bl	123e0 <strchr@plt>
   1d7d8:	vldr	s15, [pc, #28]	; 1d7fc <__assert_fail@plt+0xb128>
   1d7dc:	vldr	s0, [pc, #28]	; 1d800 <__assert_fail@plt+0xb12c>
   1d7e0:	cmp	r0, #0
   1d7e4:	vmoveq.f32	s0, s15
   1d7e8:	pop	{r3, pc}
   1d7ec:	vldr	s0, [pc, #12]	; 1d800 <__assert_fail@plt+0xb12c>
   1d7f0:	pop	{r3, pc}
   1d7f4:	vldr	s0, [pc]	; 1d7fc <__assert_fail@plt+0xb128>
   1d7f8:	pop	{r3, pc}
   1d7fc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d800:	svccc	0x004ccccd
   1d804:	push	{r4, r5, r6, r7, r8, lr}
   1d808:	sub	sp, sp, #8
   1d80c:	mov	r5, r1
   1d810:	mov	r8, r0
   1d814:	mov	r6, r2
   1d818:	mov	r7, r3
   1d81c:	bl	1d6cc <__assert_fail@plt+0xaff8>
   1d820:	cmp	r5, #0
   1d824:	beq	1d88c <__assert_fail@plt+0xb1b8>
   1d828:	ldr	r3, [r6]
   1d82c:	ldr	r4, [r5, r3, lsl #2]
   1d830:	cmp	r4, #0
   1d834:	moveq	r5, r4
   1d838:	beq	1d88c <__assert_fail@plt+0xb1b8>
   1d83c:	add	r3, r3, #1
   1d840:	ldr	r1, [sp, #32]
   1d844:	str	r3, [r6]
   1d848:	mov	r2, r4
   1d84c:	mov	r0, r8
   1d850:	bl	17f84 <__assert_fail@plt+0x58b0>
   1d854:	mov	r2, #0
   1d858:	mov	r1, r2
   1d85c:	strb	r2, [r0, #19]
   1d860:	mov	r6, r0
   1d864:	strb	r2, [r0, #18]
   1d868:	str	r4, [r0, #40]	; 0x28
   1d86c:	mov	r0, r4
   1d870:	bl	1d774 <__assert_fail@plt+0xb0a0>
   1d874:	movw	r2, #29372	; 0x72bc
   1d878:	movt	r2, #4
   1d87c:	ldrb	r5, [r2, #18]
   1d880:	cmp	r5, #0
   1d884:	vstr	s0, [r6, #28]
   1d888:	beq	1d898 <__assert_fail@plt+0xb1c4>
   1d88c:	mov	r0, r5
   1d890:	add	sp, sp, #8
   1d894:	pop	{r4, r5, r6, r7, r8, pc}
   1d898:	mov	r0, r4
   1d89c:	mov	r1, #47	; 0x2f
   1d8a0:	bl	1256c <strrchr@plt>
   1d8a4:	cmp	r0, #0
   1d8a8:	beq	1d8b8 <__assert_fail@plt+0xb1e4>
   1d8ac:	ldrb	r3, [r0, #1]
   1d8b0:	cmp	r3, #0
   1d8b4:	beq	1d8c8 <__assert_fail@plt+0xb1f4>
   1d8b8:	mov	r5, #1
   1d8bc:	mov	r0, r5
   1d8c0:	add	sp, sp, #8
   1d8c4:	pop	{r4, r5, r6, r7, r8, pc}
   1d8c8:	ldr	r3, [sp, #32]
   1d8cc:	movw	r1, #17588	; 0x44b4
   1d8d0:	movt	r1, #1
   1d8d4:	mov	r0, r4
   1d8d8:	subs	r3, r3, r1
   1d8dc:	rsbs	r1, r3, #0
   1d8e0:	adcs	r1, r1, r3
   1d8e4:	bl	162f0 <__assert_fail@plt+0x3c1c>
   1d8e8:	cmp	r0, #0
   1d8ec:	bne	1d8b8 <__assert_fail@plt+0xb1e4>
   1d8f0:	mov	r2, #5
   1d8f4:	movw	r1, #9184	; 0x23e0
   1d8f8:	movt	r1, #3
   1d8fc:	bl	1217c <dcgettext@plt>
   1d900:	mov	r3, r7
   1d904:	mov	r1, r5
   1d908:	str	r4, [sp]
   1d90c:	mov	r2, r0
   1d910:	mov	r0, r5
   1d914:	bl	122cc <error@plt>
   1d918:	mov	r5, #1
   1d91c:	movw	r3, #52343	; 0xcc77
   1d920:	movt	r3, #12843	; 0x322b
   1d924:	str	r3, [r6, #28]
   1d928:	b	1d88c <__assert_fail@plt+0xb1b8>
   1d92c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d930:	sub	sp, sp, #12
   1d934:	movw	ip, #18540	; 0x486c
   1d938:	movw	r3, #9248	; 0x2420
   1d93c:	movt	ip, #1
   1d940:	movt	r3, #3
   1d944:	str	ip, [sp]
   1d948:	bl	1d804 <__assert_fail@plt+0xb130>
   1d94c:	add	sp, sp, #12
   1d950:	pop	{pc}		; (ldr pc, [sp], #4)
   1d954:	push	{lr}		; (str lr, [sp, #-4]!)
   1d958:	sub	sp, sp, #12
   1d95c:	movw	ip, #18540	; 0x486c
   1d960:	movw	r3, #9260	; 0x242c
   1d964:	movt	ip, #1
   1d968:	movt	r3, #3
   1d96c:	str	ip, [sp]
   1d970:	bl	1d804 <__assert_fail@plt+0xb130>
   1d974:	add	sp, sp, #12
   1d978:	pop	{pc}		; (ldr pc, [sp], #4)
   1d97c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d980:	sub	sp, sp, #12
   1d984:	movw	ip, #17588	; 0x44b4
   1d988:	movw	r3, #9268	; 0x2434
   1d98c:	movt	ip, #1
   1d990:	movt	r3, #3
   1d994:	str	ip, [sp]
   1d998:	bl	1d804 <__assert_fail@plt+0xb130>
   1d99c:	add	sp, sp, #12
   1d9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1d9a8:	sub	sp, sp, #12
   1d9ac:	movw	ip, #17588	; 0x44b4
   1d9b0:	movw	r3, #9280	; 0x2440
   1d9b4:	movt	ip, #1
   1d9b8:	movt	r3, #3
   1d9bc:	str	ip, [sp]
   1d9c0:	bl	1d804 <__assert_fail@plt+0xb130>
   1d9c4:	add	sp, sp, #12
   1d9c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9cc:	push	{r4, r5, r6, lr}
   1d9d0:	mov	r4, r1
   1d9d4:	mov	r6, r0
   1d9d8:	mov	r5, r2
   1d9dc:	bl	1d6cc <__assert_fail@plt+0xaff8>
   1d9e0:	cmp	r4, #0
   1d9e4:	beq	1da3c <__assert_fail@plt+0xb368>
   1d9e8:	ldr	r3, [r5]
   1d9ec:	ldr	r4, [r4, r3, lsl #2]
   1d9f0:	cmp	r4, #0
   1d9f4:	beq	1da3c <__assert_fail@plt+0xb368>
   1d9f8:	add	r3, r3, #1
   1d9fc:	mov	r1, r4
   1da00:	str	r3, [r5]
   1da04:	mov	r0, r6
   1da08:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1da0c:	mov	r1, #0
   1da10:	mov	r5, r0
   1da14:	str	r4, [r0, #40]	; 0x28
   1da18:	mov	r0, r4
   1da1c:	bl	1d774 <__assert_fail@plt+0xb0a0>
   1da20:	vldr	d7, [pc, #32]	; 1da48 <__assert_fail@plt+0xb374>
   1da24:	mov	r0, #1
   1da28:	vcvt.f64.f32	d0, s0
   1da2c:	vmul.f64	d7, d0, d7
   1da30:	vcvt.f32.f64	s14, d7
   1da34:	vstr	s14, [r5, #28]
   1da38:	pop	{r4, r5, r6, pc}
   1da3c:	mov	r0, r4
   1da40:	pop	{r4, r5, r6, pc}
   1da44:	nop	{0}
   1da48:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1da4c:	svccc	0x00b99999
   1da50:	cmp	r1, #0
   1da54:	push	{r3, r4, r5, lr}
   1da58:	beq	1daac <__assert_fail@plt+0xb3d8>
   1da5c:	ldr	r3, [r2]
   1da60:	ldr	r4, [r1, r3, lsl #2]
   1da64:	cmp	r4, #0
   1da68:	beq	1dab4 <__assert_fail@plt+0xb3e0>
   1da6c:	add	r3, r3, #1
   1da70:	mov	r1, r4
   1da74:	str	r3, [r2]
   1da78:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1da7c:	mov	r1, #0
   1da80:	mov	r5, r0
   1da84:	str	r4, [r0, #40]	; 0x28
   1da88:	mov	r0, r4
   1da8c:	bl	1d774 <__assert_fail@plt+0xb0a0>
   1da90:	vldr	d7, [pc, #40]	; 1dac0 <__assert_fail@plt+0xb3ec>
   1da94:	mov	r0, #1
   1da98:	vcvt.f64.f32	d0, s0
   1da9c:	vmul.f64	d7, d0, d7
   1daa0:	vcvt.f32.f64	s14, d7
   1daa4:	vstr	s14, [r5, #28]
   1daa8:	pop	{r3, r4, r5, pc}
   1daac:	mov	r0, r1
   1dab0:	pop	{r3, r4, r5, pc}
   1dab4:	mov	r0, r4
   1dab8:	pop	{r3, r4, r5, pc}
   1dabc:	nop	{0}
   1dac0:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1dac4:	svccc	0x00b99999
   1dac8:	cmp	r0, #0
   1dacc:	push	{r4, r5, r6, r7, r8, lr}
   1dad0:	mov	r8, r3
   1dad4:	popeq	{r4, r5, r6, r7, r8, pc}
   1dad8:	ldr	r3, [r1]
   1dadc:	ldr	r5, [r0, r3, lsl #2]
   1dae0:	cmp	r5, #0
   1dae4:	beq	1db98 <__assert_fail@plt+0xb4c4>
   1dae8:	add	r3, r3, #1
   1daec:	mov	r0, r2
   1daf0:	str	r3, [r1]
   1daf4:	mov	r2, r5
   1daf8:	movw	r1, #18916	; 0x49e4
   1dafc:	movt	r1, #1
   1db00:	bl	17f84 <__assert_fail@plt+0x58b0>
   1db04:	mov	r6, #0
   1db08:	mov	r7, r0
   1db0c:	mov	r0, #32
   1db10:	strb	r6, [r7, #19]
   1db14:	strb	r6, [r7, #18]
   1db18:	bl	28e14 <__assert_fail@plt+0x16740>
   1db1c:	mov	r3, #100	; 0x64
   1db20:	mov	r4, r0
   1db24:	str	r0, [r7, #40]	; 0x28
   1db28:	mov	r0, r3
   1db2c:	str	r3, [r4, #4]
   1db30:	bl	28e14 <__assert_fail@plt+0x16740>
   1db34:	str	r6, [r4, #16]
   1db38:	str	r0, [r4]
   1db3c:	mov	r0, r8
   1db40:	bl	12668 <re_set_syntax@plt>
   1db44:	mov	r0, r5
   1db48:	str	r8, [r4, #12]
   1db4c:	str	r6, [r4, #20]
   1db50:	bl	123d4 <strlen@plt>
   1db54:	mov	r2, r4
   1db58:	mov	r1, r0
   1db5c:	mov	r0, r5
   1db60:	bl	12638 <re_compile_pattern@plt>
   1db64:	subs	r3, r0, #0
   1db68:	beq	1db80 <__assert_fail@plt+0xb4ac>
   1db6c:	movw	r2, #15064	; 0x3ad8
   1db70:	mov	r1, r6
   1db74:	mov	r0, #1
   1db78:	movt	r2, #3
   1db7c:	bl	122cc <error@plt>
   1db80:	mov	r0, r5
   1db84:	mov	r1, #1
   1db88:	bl	1d774 <__assert_fail@plt+0xb0a0>
   1db8c:	mov	r0, #1
   1db90:	vstr	s0, [r7, #28]
   1db94:	pop	{r4, r5, r6, r7, r8, pc}
   1db98:	mov	r0, r5
   1db9c:	pop	{r4, r5, r6, r7, r8, pc}
   1dba0:	movw	r3, #29372	; 0x72bc
   1dba4:	movt	r3, #4
   1dba8:	mov	ip, r0
   1dbac:	mov	r0, r1
   1dbb0:	ldr	r3, [r3, #60]	; 0x3c
   1dbb4:	mov	r1, r2
   1dbb8:	mov	r2, ip
   1dbbc:	b	1dac8 <__assert_fail@plt+0xb3f4>
   1dbc0:	movw	r3, #29372	; 0x72bc
   1dbc4:	movt	r3, #4
   1dbc8:	mov	ip, r0
   1dbcc:	mov	r0, r1
   1dbd0:	ldr	r3, [r3, #60]	; 0x3c
   1dbd4:	mov	r1, r2
   1dbd8:	mov	r2, ip
   1dbdc:	orr	r3, r3, #4194304	; 0x400000
   1dbe0:	b	1dac8 <__assert_fail@plt+0xb3f4>
   1dbe4:	mov	ip, r1
   1dbe8:	ldr	r1, [r1]
   1dbec:	cmp	r0, #0
   1dbf0:	sub	r3, r1, #-1073741823	; 0xc0000001
   1dbf4:	push	{r4, r5, r6, r7, lr}
   1dbf8:	mov	r6, r2
   1dbfc:	sub	sp, sp, #12
   1dc00:	lsl	r4, r3, #2
   1dc04:	ldr	r7, [r0, r3, lsl #2]
   1dc08:	beq	1dc98 <__assert_fail@plt+0xb5c4>
   1dc0c:	add	r0, r0, r4
   1dc10:	ldr	r4, [r0, #4]
   1dc14:	cmp	r4, #0
   1dc18:	beq	1dc98 <__assert_fail@plt+0xb5c4>
   1dc1c:	add	r3, r1, #1
   1dc20:	mov	r0, r4
   1dc24:	movw	r1, #6808	; 0x1a98
   1dc28:	str	r3, [ip]
   1dc2c:	movt	r1, #3
   1dc30:	bl	126c8 <strspn@plt>
   1dc34:	cmp	r0, #0
   1dc38:	movwle	r5, #29372	; 0x72bc
   1dc3c:	movtle	r5, #4
   1dc40:	ble	1dc58 <__assert_fail@plt+0xb584>
   1dc44:	ldrb	r3, [r4, r0]
   1dc48:	movw	r5, #29372	; 0x72bc
   1dc4c:	movt	r5, #4
   1dc50:	cmp	r3, #0
   1dc54:	beq	1dca4 <__assert_fail@plt+0xb5d0>
   1dc58:	mov	r2, #5
   1dc5c:	movw	r1, #9288	; 0x2448
   1dc60:	mov	r0, #0
   1dc64:	movt	r1, #3
   1dc68:	bl	1217c <dcgettext@plt>
   1dc6c:	ldr	r1, [r5, #72]	; 0x48
   1dc70:	mov	r2, r4
   1dc74:	mov	r6, r0
   1dc78:	mov	r0, #0
   1dc7c:	bl	284fc <__assert_fail@plt+0x15e28>
   1dc80:	mov	r2, r6
   1dc84:	mov	r3, r7
   1dc88:	mov	r1, #0
   1dc8c:	str	r0, [sp]
   1dc90:	mov	r0, #1
   1dc94:	bl	122cc <error@plt>
   1dc98:	mov	r0, #0
   1dc9c:	add	sp, sp, #12
   1dca0:	pop	{r4, r5, r6, r7, pc}
   1dca4:	mov	r0, r4
   1dca8:	ldr	r1, [r5, #72]	; 0x48
   1dcac:	bl	20ab4 <__assert_fail@plt+0xe3e0>
   1dcb0:	cmp	r0, #0
   1dcb4:	str	r0, [r6]
   1dcb8:	blt	1dc58 <__assert_fail@plt+0xb584>
   1dcbc:	add	sp, sp, #12
   1dcc0:	pop	{r4, r5, r6, r7, lr}
   1dcc4:	b	1d510 <__assert_fail@plt+0xae3c>
   1dcc8:	mov	r0, r1
   1dccc:	mov	r1, r2
   1dcd0:	ldr	r2, [pc]	; 1dcd8 <__assert_fail@plt+0xb604>
   1dcd4:	b	1dbe4 <__assert_fail@plt+0xb510>
   1dcd8:	andeq	r7, r4, r4, asr #5
   1dcdc:	mov	r0, r1
   1dce0:	mov	r1, r2
   1dce4:	ldr	r2, [pc]	; 1dcec <__assert_fail@plt+0xb618>
   1dce8:	b	1dbe4 <__assert_fail@plt+0xb510>
   1dcec:	andeq	r7, r4, r0, asr #5
   1dcf0:	push	{r4, r5, r6, lr}
   1dcf4:	subs	r5, r1, #0
   1dcf8:	mov	r6, r0
   1dcfc:	mov	r4, r2
   1dd00:	beq	1dd88 <__assert_fail@plt+0xb6b4>
   1dd04:	ldr	r3, [r2]
   1dd08:	ldr	r3, [r5, r3, lsl #2]
   1dd0c:	cmp	r3, #0
   1dd10:	beq	1dd88 <__assert_fail@plt+0xb6b4>
   1dd14:	bl	12050 <is_selinux_enabled@plt>
   1dd18:	cmp	r0, #0
   1dd1c:	ble	1dd64 <__assert_fail@plt+0xb690>
   1dd20:	mov	r0, r6
   1dd24:	mov	r1, #0
   1dd28:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1dd2c:	ldr	r2, [r4]
   1dd30:	mov	r1, #0
   1dd34:	ldr	r2, [r5, r2, lsl #2]
   1dd38:	mov	r3, r0
   1dd3c:	movw	r0, #55050	; 0xd70a
   1dd40:	strb	r1, [r3, #18]
   1dd44:	movt	r0, #15395	; 0x3c23
   1dd48:	str	r2, [r3, #40]	; 0x28
   1dd4c:	str	r0, [r3, #28]
   1dd50:	mov	r0, #1
   1dd54:	ldr	r3, [r4]
   1dd58:	add	r3, r3, r0
   1dd5c:	str	r3, [r4]
   1dd60:	pop	{r4, r5, r6, pc}
   1dd64:	mov	r2, #5
   1dd68:	movw	r1, #9352	; 0x2488
   1dd6c:	mov	r0, #0
   1dd70:	movt	r1, #3
   1dd74:	bl	1217c <dcgettext@plt>
   1dd78:	mov	r1, #0
   1dd7c:	mov	r2, r0
   1dd80:	mov	r0, #1
   1dd84:	bl	122cc <error@plt>
   1dd88:	mov	r0, #0
   1dd8c:	pop	{r4, r5, r6, pc}
   1dd90:	movw	r2, #29372	; 0x72bc
   1dd94:	movt	r2, #4
   1dd98:	push	{r4, r5, r6, r7, lr}
   1dd9c:	mov	r5, r0
   1dda0:	ldrb	r2, [r2, #17]
   1dda4:	sub	sp, sp, #12
   1dda8:	mov	r4, r1
   1ddac:	cmp	r2, #0
   1ddb0:	beq	1de18 <__assert_fail@plt+0xb744>
   1ddb4:	mov	r0, r1
   1ddb8:	mov	r1, #47	; 0x2f
   1ddbc:	bl	123e0 <strchr@plt>
   1ddc0:	cmp	r0, #0
   1ddc4:	beq	1de18 <__assert_fail@plt+0xb744>
   1ddc8:	mov	r2, #5
   1ddcc:	movw	r1, #9404	; 0x24bc
   1ddd0:	mov	r0, #0
   1ddd4:	movt	r1, #3
   1ddd8:	bl	1217c <dcgettext@plt>
   1dddc:	mov	r1, r4
   1dde0:	mov	r6, r0
   1dde4:	mov	r0, #0
   1dde8:	bl	190b8 <__assert_fail@plt+0x69e4>
   1ddec:	mov	r1, r4
   1ddf0:	mov	r7, r0
   1ddf4:	mov	r0, #1
   1ddf8:	bl	190b8 <__assert_fail@plt+0x69e4>
   1ddfc:	str	r7, [sp]
   1de00:	mov	r2, r6
   1de04:	mov	r3, r5
   1de08:	str	r0, [sp, #4]
   1de0c:	mov	r0, #0
   1de10:	mov	r1, r0
   1de14:	bl	122cc <error@plt>
   1de18:	mov	r0, #1
   1de1c:	add	sp, sp, #12
   1de20:	pop	{r4, r5, r6, r7, pc}
   1de24:	cmp	r1, #0
   1de28:	push	{r4, r5, r6, r7, r8, lr}
   1de2c:	mov	r4, r2
   1de30:	mov	r8, r0
   1de34:	ldr	r5, [r2]
   1de38:	moveq	r7, r1
   1de3c:	beq	1de78 <__assert_fail@plt+0xb7a4>
   1de40:	ldr	r6, [r1, r5, lsl #2]
   1de44:	cmp	r6, #0
   1de48:	moveq	r7, r6
   1de4c:	beq	1de78 <__assert_fail@plt+0xb7a4>
   1de50:	add	r3, r5, #1
   1de54:	str	r3, [r2]
   1de58:	bl	1d6cc <__assert_fail@plt+0xaff8>
   1de5c:	movw	r0, #9736	; 0x2608
   1de60:	mov	r1, r6
   1de64:	movt	r0, #3
   1de68:	bl	1dd90 <__assert_fail@plt+0xb6bc>
   1de6c:	subs	r7, r0, #0
   1de70:	streq	r5, [r4]
   1de74:	bne	1de80 <__assert_fail@plt+0xb7ac>
   1de78:	mov	r0, r7
   1de7c:	pop	{r4, r5, r6, r7, r8, pc}
   1de80:	mov	r1, r6
   1de84:	mov	r0, r8
   1de88:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1de8c:	mov	r1, #0
   1de90:	mov	r4, r0
   1de94:	str	r6, [r0, #40]	; 0x28
   1de98:	mov	r0, r6
   1de9c:	strb	r1, [r4, #19]
   1dea0:	strb	r1, [r4, #18]
   1dea4:	bl	1d774 <__assert_fail@plt+0xb0a0>
   1dea8:	vstr	s0, [r4, #28]
   1deac:	b	1de78 <__assert_fail@plt+0xb7a4>
   1deb0:	push	{r4, r5, r6, lr}
   1deb4:	mov	r4, r1
   1deb8:	mov	r6, r0
   1debc:	mov	r5, r2
   1dec0:	bl	1d6cc <__assert_fail@plt+0xaff8>
   1dec4:	cmp	r4, #0
   1dec8:	beq	1defc <__assert_fail@plt+0xb828>
   1decc:	ldr	r3, [r5]
   1ded0:	ldr	r4, [r4, r3, lsl #2]
   1ded4:	cmp	r4, #0
   1ded8:	beq	1defc <__assert_fail@plt+0xb828>
   1dedc:	add	r3, r3, #1
   1dee0:	movw	r0, #9744	; 0x2610
   1dee4:	str	r3, [r5]
   1dee8:	movt	r0, #3
   1deec:	mov	r1, r4
   1def0:	bl	1dd90 <__assert_fail@plt+0xb6bc>
   1def4:	subs	r5, r0, #0
   1def8:	bne	1df08 <__assert_fail@plt+0xb834>
   1defc:	mov	r5, #0
   1df00:	mov	r0, r5
   1df04:	pop	{r4, r5, r6, pc}
   1df08:	mov	r1, r4
   1df0c:	mov	r0, r6
   1df10:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1df14:	mov	r1, #0
   1df18:	mov	r6, r0
   1df1c:	str	r4, [r0, #40]	; 0x28
   1df20:	mov	r0, r4
   1df24:	strb	r1, [r6, #19]
   1df28:	strb	r1, [r6, #18]
   1df2c:	bl	1d774 <__assert_fail@plt+0xb0a0>
   1df30:	mov	r0, r5
   1df34:	vstr	s0, [r6, #28]
   1df38:	pop	{r4, r5, r6, pc}
   1df3c:	push	{r4, lr}
   1df40:	movw	r4, #29372	; 0x72bc
   1df44:	movt	r4, #4
   1df48:	ldrb	r3, [r4, #36]	; 0x24
   1df4c:	cmp	r3, #0
   1df50:	beq	1df5c <__assert_fail@plt+0xb888>
   1df54:	mov	r0, #1
   1df58:	pop	{r4, pc}
   1df5c:	ldr	r2, [r4, #28]
   1df60:	add	r0, r4, #28
   1df64:	str	r3, [r4, #32]
   1df68:	add	r3, r2, #86016	; 0x15000
   1df6c:	add	r3, r3, #384	; 0x180
   1df70:	str	r3, [r4, #28]
   1df74:	bl	12374 <localtime@plt>
   1df78:	ldr	r3, [r4, #28]
   1df7c:	cmp	r0, #0
   1df80:	beq	1dfb8 <__assert_fail@plt+0xb8e4>
   1df84:	ldr	r2, [r0, #4]
   1df88:	mov	ip, #3600	; 0xe10
   1df8c:	ldr	r1, [r0]
   1df90:	ldr	r0, [r0, #8]
   1df94:	rsb	r2, r2, r2, lsl #4
   1df98:	add	r1, r1, r2, lsl #2
   1df9c:	mla	r2, ip, r0, r1
   1dfa0:	rsb	r3, r2, r3
   1dfa4:	mov	r1, #1
   1dfa8:	str	r3, [r4, #28]
   1dfac:	strb	r1, [r4, #36]	; 0x24
   1dfb0:	mov	r0, #1
   1dfb4:	pop	{r4, pc}
   1dfb8:	movw	r0, #17671	; 0x4507
   1dfbc:	movt	r0, #49710	; 0xc22e
   1dfc0:	asr	r2, r3, #31
   1dfc4:	movw	r1, #20864	; 0x5180
   1dfc8:	smull	ip, r0, r0, r3
   1dfcc:	movt	r1, #1
   1dfd0:	add	r0, r0, r3
   1dfd4:	rsb	r2, r2, r0, asr #16
   1dfd8:	mls	r2, r1, r2, r3
   1dfdc:	b	1dfa0 <__assert_fail@plt+0xb8cc>
   1dfe0:	movw	r3, #29372	; 0x72bc
   1dfe4:	movt	r3, #4
   1dfe8:	movw	r2, #17671	; 0x4507
   1dfec:	movt	r2, #49710	; 0xc22e
   1dff0:	ldr	r3, [r3, #28]
   1dff4:	vldr	d7, [pc, #100]	; 1e060 <__assert_fail@plt+0xb98c>
   1dff8:	rsb	r0, r0, r3
   1dffc:	smull	r3, r2, r2, r0
   1e000:	asr	r3, r0, #31
   1e004:	add	r0, r2, r0
   1e008:	rsb	r0, r3, r0, asr #16
   1e00c:	vmov	s13, r0
   1e010:	vcvt.f32.s32	s11, s13
   1e014:	vcvt.f64.f32	d6, s11
   1e018:	vcmpe.f64	d6, d7
   1e01c:	vmrs	APSR_nzcv, fpscr
   1e020:	bmi	1e050 <__assert_fail@plt+0xb97c>
   1e024:	vmov.f32	s15, #112	; 0x3f800000  1.0
   1e028:	vcmpe.f32	s11, s15
   1e02c:	vmrs	APSR_nzcv, fpscr
   1e030:	bmi	1e058 <__assert_fail@plt+0xb984>
   1e034:	vldr	s15, [pc, #44]	; 1e068 <__assert_fail@plt+0xb994>
   1e038:	vcmpe.f32	s11, s15
   1e03c:	vldr	s0, [pc, #40]	; 1e06c <__assert_fail@plt+0xb998>
   1e040:	vldr	s15, [pc, #40]	; 1e070 <__assert_fail@plt+0xb99c>
   1e044:	vmrs	APSR_nzcv, fpscr
   1e048:	vmovle.f32	s0, s15
   1e04c:	bx	lr
   1e050:	vldr	s0, [pc, #28]	; 1e074 <__assert_fail@plt+0xb9a0>
   1e054:	bx	lr
   1e058:	vldr	s0, [pc, #12]	; 1e06c <__assert_fail@plt+0xb998>
   1e05c:	bx	lr
   1e060:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1e064:	svccc	0x00b99999
   1e068:	sbcmi	r0, r8, #0
   1e06c:			; <UNDEFINED> instruction: 0x3e99999a
   1e070:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e074:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e078:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e07c:	movw	r4, #26008	; 0x6598
   1e080:	movt	r4, #4
   1e084:	mov	r5, r2
   1e088:	sub	sp, sp, #40	; 0x28
   1e08c:	cmp	r1, #0
   1e090:	ldr	r2, [r4]
   1e094:	mov	sl, r3
   1e098:	mov	r9, r0
   1e09c:	ldr	r6, [r5]
   1e0a0:	moveq	sl, r1
   1e0a4:	str	r2, [sp, #36]	; 0x24
   1e0a8:	beq	1e11c <__assert_fail@plt+0xba48>
   1e0ac:	ldr	r7, [r1, r6, lsl #2]
   1e0b0:	cmp	r7, #0
   1e0b4:	moveq	sl, r7
   1e0b8:	beq	1e11c <__assert_fail@plt+0xba48>
   1e0bc:	movw	lr, #29372	; 0x72bc
   1e0c0:	movt	lr, #4
   1e0c4:	add	r3, lr, #28
   1e0c8:	add	ip, sp, #12
   1e0cc:	add	r8, sp, #20
   1e0d0:	add	r2, r6, #1
   1e0d4:	ldm	r3, {r0, r1}
   1e0d8:	vldr	d0, [pc, #136]	; 1e168 <__assert_fail@plt+0xba94>
   1e0dc:	str	r2, [r5]
   1e0e0:	movw	r3, #9752	; 0x2618
   1e0e4:	add	r2, r0, #86016	; 0x15000
   1e0e8:	movt	r3, #3
   1e0ec:	stm	ip, {r0, r1}
   1e0f0:	add	r2, r2, #384	; 0x180
   1e0f4:	str	r3, [sp]
   1e0f8:	mov	r1, r8
   1e0fc:	str	r2, [sp, #12]
   1e100:	mov	r0, r7
   1e104:	ldm	ip, {r2, r3}
   1e108:	str	sl, [sp, #20]
   1e10c:	bl	1b664 <__assert_fail@plt+0x8f90>
   1e110:	subs	sl, r0, #0
   1e114:	streq	r6, [r5]
   1e118:	bne	1e138 <__assert_fail@plt+0xba64>
   1e11c:	ldr	r2, [sp, #36]	; 0x24
   1e120:	mov	r0, sl
   1e124:	ldr	r3, [r4]
   1e128:	cmp	r2, r3
   1e12c:	bne	1e164 <__assert_fail@plt+0xba90>
   1e130:	add	sp, sp, #40	; 0x28
   1e134:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e138:	mov	r1, r7
   1e13c:	mov	r0, r9
   1e140:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1e144:	mov	r5, r0
   1e148:	add	ip, r5, #40	; 0x28
   1e14c:	ldm	r8, {r0, r1, r2, r3}
   1e150:	stm	ip, {r0, r1, r2, r3}
   1e154:	ldr	r0, [sp, #28]
   1e158:	bl	1dfe0 <__assert_fail@plt+0xb90c>
   1e15c:	vstr	s0, [r5, #28]
   1e160:	b	1e11c <__assert_fail@plt+0xba48>
   1e164:	bl	12188 <__stack_chk_fail@plt>
   1e168:	andeq	r0, r0, r0
   1e16c:	submi	r0, lr, r0
   1e170:	mov	r3, #3
   1e174:	b	1e078 <__assert_fail@plt+0xb9a4>
   1e178:	mov	r3, #2
   1e17c:	b	1e078 <__assert_fail@plt+0xb9a4>
   1e180:	mov	r3, #0
   1e184:	b	1e078 <__assert_fail@plt+0xb9a4>
   1e188:	push	{r4, r5, r6, r7, lr}
   1e18c:	movw	r4, #26008	; 0x6598
   1e190:	movt	r4, #4
   1e194:	sub	sp, sp, #124	; 0x7c
   1e198:	mov	r6, r2
   1e19c:	mov	r5, r1
   1e1a0:	ldr	r3, [r4]
   1e1a4:	mov	r7, r0
   1e1a8:	add	r0, sp, #8
   1e1ac:	str	r3, [sp, #116]	; 0x74
   1e1b0:	bl	1812c <__assert_fail@plt+0x5a58>
   1e1b4:	mov	r1, r6
   1e1b8:	mov	r0, r5
   1e1bc:	add	r2, sp, #8
   1e1c0:	add	r3, sp, #4
   1e1c4:	bl	1bf1c <__assert_fail@plt+0x9848>
   1e1c8:	subs	r6, r0, #0
   1e1cc:	beq	1e208 <__assert_fail@plt+0xbb34>
   1e1d0:	ldr	r1, [sp, #4]
   1e1d4:	mov	r0, r7
   1e1d8:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1e1dc:	ldr	r2, [sp, #92]	; 0x5c
   1e1e0:	mov	r1, #3
   1e1e4:	mov	r3, #0
   1e1e8:	mov	r5, r0
   1e1ec:	ldr	r0, [sp, #88]	; 0x58
   1e1f0:	str	r1, [r5, #40]	; 0x28
   1e1f4:	str	r2, [r5, #52]	; 0x34
   1e1f8:	str	r0, [r5, #48]	; 0x30
   1e1fc:	str	r3, [r5, #44]	; 0x2c
   1e200:	bl	1dfe0 <__assert_fail@plt+0xb90c>
   1e204:	vstr	s0, [r5, #28]
   1e208:	ldr	r2, [sp, #116]	; 0x74
   1e20c:	mov	r0, r6
   1e210:	ldr	r3, [r4]
   1e214:	cmp	r2, r3
   1e218:	bne	1e224 <__assert_fail@plt+0xbb50>
   1e21c:	add	sp, sp, #124	; 0x7c
   1e220:	pop	{r4, r5, r6, r7, pc}
   1e224:	bl	12188 <__stack_chk_fail@plt>
   1e228:	push	{r4, r5, r6, r7, lr}
   1e22c:	movw	r4, #26008	; 0x6598
   1e230:	movt	r4, #4
   1e234:	sub	sp, sp, #124	; 0x7c
   1e238:	mov	r6, r2
   1e23c:	mov	r5, r1
   1e240:	ldr	r3, [r4]
   1e244:	mov	r7, r0
   1e248:	add	r0, sp, #8
   1e24c:	str	r3, [sp, #116]	; 0x74
   1e250:	bl	1812c <__assert_fail@plt+0x5a58>
   1e254:	mov	r1, r6
   1e258:	mov	r0, r5
   1e25c:	add	r2, sp, #8
   1e260:	add	r3, sp, #4
   1e264:	bl	1bf1c <__assert_fail@plt+0x9848>
   1e268:	subs	r6, r0, #0
   1e26c:	beq	1e2a8 <__assert_fail@plt+0xbbd4>
   1e270:	ldr	r1, [sp, #4]
   1e274:	mov	r0, r7
   1e278:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1e27c:	mov	r3, #2
   1e280:	mov	r2, #0
   1e284:	str	r3, [r0, #40]	; 0x28
   1e288:	mov	r5, r0
   1e28c:	ldr	r3, [sp, #92]	; 0x5c
   1e290:	ldr	r0, [sp, #88]	; 0x58
   1e294:	str	r2, [r5, #44]	; 0x2c
   1e298:	str	r3, [r5, #52]	; 0x34
   1e29c:	str	r0, [r5, #48]	; 0x30
   1e2a0:	bl	1dfe0 <__assert_fail@plt+0xb90c>
   1e2a4:	vstr	s0, [r5, #28]
   1e2a8:	ldr	r2, [sp, #116]	; 0x74
   1e2ac:	mov	r0, r6
   1e2b0:	ldr	r3, [r4]
   1e2b4:	cmp	r2, r3
   1e2b8:	bne	1e2c4 <__assert_fail@plt+0xbbf0>
   1e2bc:	add	sp, sp, #124	; 0x7c
   1e2c0:	pop	{r4, r5, r6, r7, pc}
   1e2c4:	bl	12188 <__stack_chk_fail@plt>
   1e2c8:	push	{r4, r5, r6, r7, lr}
   1e2cc:	movw	r4, #26008	; 0x6598
   1e2d0:	movt	r4, #4
   1e2d4:	sub	sp, sp, #124	; 0x7c
   1e2d8:	mov	r6, r2
   1e2dc:	mov	r5, r1
   1e2e0:	ldr	r3, [r4]
   1e2e4:	mov	r7, r0
   1e2e8:	add	r0, sp, #8
   1e2ec:	str	r3, [sp, #116]	; 0x74
   1e2f0:	bl	1812c <__assert_fail@plt+0x5a58>
   1e2f4:	mov	r1, r6
   1e2f8:	mov	r0, r5
   1e2fc:	add	r2, sp, #8
   1e300:	add	r3, sp, #4
   1e304:	bl	1bf1c <__assert_fail@plt+0x9848>
   1e308:	subs	r6, r0, #0
   1e30c:	beq	1e344 <__assert_fail@plt+0xbc70>
   1e310:	ldr	r1, [sp, #4]
   1e314:	mov	r0, r7
   1e318:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1e31c:	mov	r3, #0
   1e320:	str	r3, [r0, #40]	; 0x28
   1e324:	mov	r5, r0
   1e328:	ldr	r2, [sp, #92]	; 0x5c
   1e32c:	ldr	r0, [sp, #88]	; 0x58
   1e330:	str	r3, [r5, #44]	; 0x2c
   1e334:	str	r2, [r5, #52]	; 0x34
   1e338:	str	r0, [r5, #48]	; 0x30
   1e33c:	bl	1dfe0 <__assert_fail@plt+0xb90c>
   1e340:	vstr	s0, [r5, #28]
   1e344:	ldr	r2, [sp, #116]	; 0x74
   1e348:	mov	r0, r6
   1e34c:	ldr	r3, [r4]
   1e350:	cmp	r2, r3
   1e354:	bne	1e360 <__assert_fail@plt+0xbc8c>
   1e358:	add	sp, sp, #124	; 0x7c
   1e35c:	pop	{r4, r5, r6, r7, pc}
   1e360:	bl	12188 <__stack_chk_fail@plt>
   1e364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e368:	movw	r6, #26008	; 0x6598
   1e36c:	movt	r6, #4
   1e370:	sub	sp, sp, #52	; 0x34
   1e374:	mov	r8, r1
   1e378:	mov	r7, r2
   1e37c:	ldr	r3, [r6]
   1e380:	mov	sl, r0
   1e384:	movw	r1, #8672	; 0x21e0
   1e388:	mov	r0, #0
   1e38c:	movt	r1, #3
   1e390:	mov	r2, #5
   1e394:	str	r3, [sp, #44]	; 0x2c
   1e398:	bl	1217c <dcgettext@plt>
   1e39c:	cmp	r8, #0
   1e3a0:	ldr	fp, [r7]
   1e3a4:	mov	ip, r0
   1e3a8:	beq	1e420 <__assert_fail@plt+0xbd4c>
   1e3ac:	ldr	r5, [r8, fp, lsl #2]
   1e3b0:	cmp	r5, #0
   1e3b4:	moveq	r8, r5
   1e3b8:	beq	1e420 <__assert_fail@plt+0xbd4c>
   1e3bc:	movw	r4, #29372	; 0x72bc
   1e3c0:	movt	r4, #4
   1e3c4:	add	r2, r4, #28
   1e3c8:	add	r3, fp, #1
   1e3cc:	str	r3, [r7]
   1e3d0:	add	r3, sp, #20
   1e3d4:	ldrb	lr, [r5]
   1e3d8:	ldm	r2, {r0, r1}
   1e3dc:	cmp	lr, #45	; 0x2d
   1e3e0:	mov	r2, r0
   1e3e4:	stm	r3, {r0, r1}
   1e3e8:	addeq	r2, r0, #86016	; 0x15000
   1e3ec:	addeq	r2, r2, #380	; 0x17c
   1e3f0:	addeq	r2, r2, #3
   1e3f4:	add	r9, sp, #28
   1e3f8:	str	r2, [sp, #20]
   1e3fc:	str	ip, [sp]
   1e400:	mov	r0, r5
   1e404:	ldm	r3, {r2, r3}
   1e408:	mov	r1, r9
   1e40c:	vldr	d0, [pc, #396]	; 1e5a0 <__assert_fail@plt+0xbecc>
   1e410:	bl	1b664 <__assert_fail@plt+0x8f90>
   1e414:	subs	r8, r0, #0
   1e418:	streq	fp, [r7]
   1e41c:	bne	1e43c <__assert_fail@plt+0xbd68>
   1e420:	ldr	r2, [sp, #44]	; 0x2c
   1e424:	mov	r0, r8
   1e428:	ldr	r3, [r6]
   1e42c:	cmp	r2, r3
   1e430:	bne	1e59c <__assert_fail@plt+0xbec8>
   1e434:	add	sp, sp, #52	; 0x34
   1e438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e43c:	mov	r1, r5
   1e440:	mov	r0, sl
   1e444:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1e448:	mov	r7, r0
   1e44c:	add	ip, r7, #40	; 0x28
   1e450:	ldm	r9, {r0, r1, r2, r3}
   1e454:	stm	ip, {r0, r1, r2, r3}
   1e458:	ldr	r0, [sp, #36]	; 0x24
   1e45c:	bl	1dfe0 <__assert_fail@plt+0xb90c>
   1e460:	ldr	r3, [r4, #44]	; 0x2c
   1e464:	tst	r3, #1
   1e468:	vstr	s0, [r7, #28]
   1e46c:	beq	1e420 <__assert_fail@plt+0xbd4c>
   1e470:	movw	r5, #26016	; 0x65a0
   1e474:	movt	r5, #4
   1e478:	ldr	r3, [r7, #4]
   1e47c:	movw	r2, #7060	; 0x1b94
   1e480:	mov	r1, #1
   1e484:	ldr	r0, [r5]
   1e488:	movt	r2, #3
   1e48c:	bl	124d0 <__fprintf_chk@plt>
   1e490:	ldr	r3, [sp, #32]
   1e494:	ldr	r0, [r5]
   1e498:	cmp	r3, #0
   1e49c:	bne	1e550 <__assert_fail@plt+0xbe7c>
   1e4a0:	movw	r3, #7040	; 0x1b80
   1e4a4:	movw	r2, #7044	; 0x1b84
   1e4a8:	movt	r3, #3
   1e4ac:	movt	r2, #3
   1e4b0:	mov	r1, #1
   1e4b4:	str	r2, [sp]
   1e4b8:	movw	r2, #7076	; 0x1ba4
   1e4bc:	movt	r2, #3
   1e4c0:	bl	124d0 <__fprintf_chk@plt>
   1e4c4:	ldr	r4, [r7, #48]	; 0x30
   1e4c8:	add	r9, sp, #48	; 0x30
   1e4cc:	ldr	fp, [r5]
   1e4d0:	movw	sl, #26016	; 0x65a0
   1e4d4:	movt	sl, #4
   1e4d8:	str	r4, [r9, #-32]!	; 0xffffffe0
   1e4dc:	mov	r0, r9
   1e4e0:	bl	12170 <ctime@plt>
   1e4e4:	asr	r5, r4, #31
   1e4e8:	movw	r2, #9848	; 0x2678
   1e4ec:	strd	r4, [sp]
   1e4f0:	movt	r2, #3
   1e4f4:	mov	r1, #1
   1e4f8:	str	r0, [sp, #8]
   1e4fc:	mov	r0, fp
   1e500:	bl	124d0 <__fprintf_chk@plt>
   1e504:	ldr	r3, [sp, #32]
   1e508:	cmp	r3, #2
   1e50c:	bne	1e420 <__assert_fail@plt+0xbd4c>
   1e510:	ldr	r4, [r7, #48]	; 0x30
   1e514:	mov	r0, r9
   1e518:	ldr	r7, [sl]
   1e51c:	add	r4, r4, #86016	; 0x15000
   1e520:	add	r4, r4, #384	; 0x180
   1e524:	str	r4, [sp, #16]
   1e528:	bl	12170 <ctime@plt>
   1e52c:	movw	r2, #9828	; 0x2664
   1e530:	asr	r5, r4, #31
   1e534:	movt	r2, #3
   1e538:	strd	r4, [sp]
   1e53c:	mov	r1, #1
   1e540:	str	r0, [sp, #8]
   1e544:	mov	r0, r7
   1e548:	bl	124d0 <__fprintf_chk@plt>
   1e54c:	b	1e420 <__assert_fail@plt+0xbd4c>
   1e550:	cmp	r3, #1
   1e554:	beq	1e588 <__assert_fail@plt+0xbeb4>
   1e558:	cmp	r3, #2
   1e55c:	movw	ip, #2992	; 0xbb0
   1e560:	movw	r3, #7052	; 0x1b8c
   1e564:	movt	ip, #3
   1e568:	movt	r3, #3
   1e56c:	movw	r1, #7048	; 0x1b88
   1e570:	movw	r2, #9824	; 0x2660
   1e574:	movt	r1, #3
   1e578:	movt	r2, #3
   1e57c:	movne	r3, ip
   1e580:	movne	r2, r1
   1e584:	b	1e4b0 <__assert_fail@plt+0xbddc>
   1e588:	movw	r3, #7032	; 0x1b78
   1e58c:	movw	r2, #7036	; 0x1b7c
   1e590:	movt	r3, #3
   1e594:	movt	r2, #3
   1e598:	b	1e4b0 <__assert_fail@plt+0xbddc>
   1e59c:	bl	12188 <__stack_chk_fail@plt>
   1e5a0:	andeq	r0, r0, r0
   1e5a4:	rscsmi	r1, r5, r0, lsl #16
   1e5a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5ac:	movw	r4, #26008	; 0x6598
   1e5b0:	movt	r4, #4
   1e5b4:	sub	sp, sp, #132	; 0x84
   1e5b8:	subs	r6, r1, #0
   1e5bc:	mov	sl, r0
   1e5c0:	ldr	r3, [r4]
   1e5c4:	mov	r8, r2
   1e5c8:	str	r3, [sp, #124]	; 0x7c
   1e5cc:	beq	1e7a8 <__assert_fail@plt+0xc0d4>
   1e5d0:	ldr	r7, [r2]
   1e5d4:	ldr	r5, [r6, r7, lsl #2]
   1e5d8:	add	fp, r6, r7, lsl #2
   1e5dc:	cmp	r5, #0
   1e5e0:	beq	1e7b0 <__assert_fail@plt+0xc0dc>
   1e5e4:	mov	r0, r5
   1e5e8:	bl	123d4 <strlen@plt>
   1e5ec:	cmp	r0, #8
   1e5f0:	movne	ip, #0
   1e5f4:	beq	1e614 <__assert_fail@plt+0xbf40>
   1e5f8:	ldr	r2, [sp, #124]	; 0x7c
   1e5fc:	mov	r0, ip
   1e600:	ldr	r3, [r4]
   1e604:	cmp	r2, r3
   1e608:	bne	1e9bc <__assert_fail@plt+0xc2e8>
   1e60c:	add	sp, sp, #132	; 0x84
   1e610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e614:	movw	r3, #12924	; 0x327c
   1e618:	movt	r3, #3
   1e61c:	mov	r2, #6
   1e620:	ldm	r3, {r0, r1}
   1e624:	str	r0, [sp, #116]	; 0x74
   1e628:	movw	r0, #9856	; 0x2680
   1e62c:	strh	r1, [sp, #120]	; 0x78
   1e630:	movt	r0, #3
   1e634:	mov	r1, r5
   1e638:	bl	1265c <strncmp@plt>
   1e63c:	subs	r3, r0, #0
   1e640:	bne	1e9c0 <__assert_fail@plt+0xc2ec>
   1e644:	ldrb	r9, [r5, #6]
   1e648:	ldrb	r5, [r5, #7]
   1e64c:	cmp	r9, #66	; 0x42
   1e650:	cmpne	r5, #66	; 0x42
   1e654:	movne	ip, #0
   1e658:	moveq	ip, #1
   1e65c:	beq	1e7b8 <__assert_fail@plt+0xc0e4>
   1e660:	cmp	r9, #116	; 0x74
   1e664:	beq	1e5f8 <__assert_fail@plt+0xbf24>
   1e668:	mov	r1, r9
   1e66c:	add	r0, sp, #116	; 0x74
   1e670:	str	ip, [sp]
   1e674:	bl	123e0 <strchr@plt>
   1e678:	ldr	ip, [sp]
   1e67c:	cmp	r0, #0
   1e680:	beq	1e5f8 <__assert_fail@plt+0xbf24>
   1e684:	add	r0, sp, #116	; 0x74
   1e688:	mov	r1, r5
   1e68c:	bl	123e0 <strchr@plt>
   1e690:	ldr	ip, [sp]
   1e694:	cmp	r0, #0
   1e698:	beq	1e5f8 <__assert_fail@plt+0xbf24>
   1e69c:	ldr	fp, [fp, #4]
   1e6a0:	add	r7, r7, #1
   1e6a4:	cmp	fp, #0
   1e6a8:	strne	r7, [r8]
   1e6ac:	beq	1e920 <__assert_fail@plt+0xc24c>
   1e6b0:	mov	r0, sl
   1e6b4:	mov	r1, fp
   1e6b8:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1e6bc:	cmp	r9, #97	; 0x61
   1e6c0:	mov	r7, r0
   1e6c4:	beq	1e85c <__assert_fail@plt+0xc188>
   1e6c8:	bls	1e7f8 <__assert_fail@plt+0xc124>
   1e6cc:	cmp	r9, #99	; 0x63
   1e6d0:	beq	1e7ec <__assert_fail@plt+0xc118>
   1e6d4:	cmp	r9, #109	; 0x6d
   1e6d8:	moveq	r3, #3
   1e6dc:	streq	r3, [r0, #40]	; 0x28
   1e6e0:	bne	1e808 <__assert_fail@plt+0xc134>
   1e6e4:	cmp	r5, #116	; 0x74
   1e6e8:	beq	1e838 <__assert_fail@plt+0xc164>
   1e6ec:	add	r0, sp, #8
   1e6f0:	bl	1812c <__assert_fail@plt+0x5a58>
   1e6f4:	ldr	r2, [r8]
   1e6f8:	movw	r3, #29372	; 0x72bc
   1e6fc:	movt	r3, #4
   1e700:	add	r1, sp, #8
   1e704:	ldr	r3, [r3, #52]	; 0x34
   1e708:	ldr	r0, [r6, r2, lsl #2]
   1e70c:	blx	r3
   1e710:	subs	r9, r0, #0
   1e714:	bne	1ea14 <__assert_fail@plt+0xc340>
   1e718:	cmp	r5, #97	; 0x61
   1e71c:	beq	1e8ec <__assert_fail@plt+0xc218>
   1e720:	bls	1e868 <__assert_fail@plt+0xc194>
   1e724:	cmp	r5, #99	; 0x63
   1e728:	beq	1e8b8 <__assert_fail@plt+0xc1e4>
   1e72c:	cmp	r5, #109	; 0x6d
   1e730:	bne	1e8d0 <__assert_fail@plt+0xc1fc>
   1e734:	ldr	r3, [sp, #88]	; 0x58
   1e738:	ldr	r2, [sp, #92]	; 0x5c
   1e73c:	mov	r0, r3
   1e740:	str	r3, [r7, #48]	; 0x30
   1e744:	str	r2, [r7, #52]	; 0x34
   1e748:	mov	r3, #0
   1e74c:	str	r3, [r7, #44]	; 0x2c
   1e750:	bl	1dfe0 <__assert_fail@plt+0xb90c>
   1e754:	ldr	r2, [r7]
   1e758:	ldr	r3, [r8]
   1e75c:	cmp	r2, #0
   1e760:	add	r3, r3, #1
   1e764:	vstr	s0, [r7, #28]
   1e768:	str	r3, [r8]
   1e76c:	beq	1e9f8 <__assert_fail@plt+0xc324>
   1e770:	movw	r3, #18044	; 0x467c
   1e774:	movt	r3, #1
   1e778:	cmp	r2, r3
   1e77c:	bne	1e9dc <__assert_fail@plt+0xc308>
   1e780:	ldrb	ip, [r7, #18]
   1e784:	cmp	ip, #0
   1e788:	bne	1e5f8 <__assert_fail@plt+0xbf24>
   1e78c:	movw	r0, #12904	; 0x3268
   1e790:	movw	r1, #6928	; 0x1b10
   1e794:	movt	r0, #3
   1e798:	movt	r1, #3
   1e79c:	movw	r2, #1699	; 0x6a3
   1e7a0:	ldr	r3, [pc, #640]	; 1ea28 <__assert_fail@plt+0xc354>
   1e7a4:	bl	126d4 <__assert_fail@plt>
   1e7a8:	mov	ip, r6
   1e7ac:	b	1e5f8 <__assert_fail@plt+0xbf24>
   1e7b0:	mov	ip, r5
   1e7b4:	b	1e5f8 <__assert_fail@plt+0xbf24>
   1e7b8:	mov	r2, #5
   1e7bc:	movw	r1, #12460	; 0x30ac
   1e7c0:	movt	r1, #3
   1e7c4:	str	r3, [sp, #4]
   1e7c8:	str	r3, [sp]
   1e7cc:	bl	1217c <dcgettext@plt>
   1e7d0:	ldr	r3, [sp, #4]
   1e7d4:	mov	r1, r3
   1e7d8:	mov	r2, r0
   1e7dc:	mov	r0, r3
   1e7e0:	bl	122cc <error@plt>
   1e7e4:	ldr	ip, [sp]
   1e7e8:	b	1e5f8 <__assert_fail@plt+0xbf24>
   1e7ec:	mov	r3, #2
   1e7f0:	str	r3, [r0, #40]	; 0x28
   1e7f4:	b	1e6e4 <__assert_fail@plt+0xc010>
   1e7f8:	cmp	r9, #66	; 0x42
   1e7fc:	moveq	r3, #1
   1e800:	streq	r3, [r0, #40]	; 0x28
   1e804:	beq	1e6e4 <__assert_fail@plt+0xc010>
   1e808:	add	r0, sp, #116	; 0x74
   1e80c:	mov	r1, r9
   1e810:	bl	123e0 <strchr@plt>
   1e814:	cmp	r0, #0
   1e818:	bne	1e904 <__assert_fail@plt+0xc230>
   1e81c:	movw	r0, #12564	; 0x3114
   1e820:	movw	r1, #6928	; 0x1b10
   1e824:	movt	r0, #3
   1e828:	movt	r1, #3
   1e82c:	movw	r2, #1661	; 0x67d
   1e830:	ldr	r3, [pc, #496]	; 1ea28 <__assert_fail@plt+0xc354>
   1e834:	bl	126d4 <__assert_fail@plt>
   1e838:	ldr	r3, [r8]
   1e83c:	add	r0, r7, #48	; 0x30
   1e840:	ldr	r2, [pc, #484]	; 1ea2c <__assert_fail@plt+0xc358>
   1e844:	ldr	r1, [r6, r3, lsl #2]
   1e848:	bl	267e4 <__assert_fail@plt+0x14110>
   1e84c:	subs	r5, r0, #0
   1e850:	beq	1e974 <__assert_fail@plt+0xc2a0>
   1e854:	ldr	r0, [r7, #48]	; 0x30
   1e858:	b	1e748 <__assert_fail@plt+0xc074>
   1e85c:	mov	r3, #0
   1e860:	str	r3, [r0, #40]	; 0x28
   1e864:	b	1e6e4 <__assert_fail@plt+0xc010>
   1e868:	cmp	r5, #66	; 0x42
   1e86c:	bne	1e8d0 <__assert_fail@plt+0xc1fc>
   1e870:	mvn	r3, #0
   1e874:	mov	r2, #5
   1e878:	str	r3, [r7, #48]	; 0x30
   1e87c:	movw	r1, #12796	; 0x31fc
   1e880:	str	r3, [r7, #52]	; 0x34
   1e884:	movt	r1, #3
   1e888:	bl	1217c <dcgettext@plt>
   1e88c:	ldr	r3, [r8]
   1e890:	ldr	r1, [r6, r3, lsl #2]
   1e894:	mov	r5, r0
   1e898:	mov	r0, r9
   1e89c:	bl	190b8 <__assert_fail@plt+0x69e4>
   1e8a0:	mov	r2, r5
   1e8a4:	mov	r1, r9
   1e8a8:	mov	r3, r0
   1e8ac:	mov	r0, #1
   1e8b0:	bl	122cc <error@plt>
   1e8b4:	b	1e854 <__assert_fail@plt+0xc180>
   1e8b8:	ldr	r3, [sp, #96]	; 0x60
   1e8bc:	ldr	r2, [sp, #100]	; 0x64
   1e8c0:	mov	r0, r3
   1e8c4:	str	r3, [r7, #48]	; 0x30
   1e8c8:	str	r2, [r7, #52]	; 0x34
   1e8cc:	b	1e748 <__assert_fail@plt+0xc074>
   1e8d0:	movw	r0, #62676	; 0xf4d4
   1e8d4:	movw	r1, #6928	; 0x1b10
   1e8d8:	movt	r0, #2
   1e8dc:	movt	r1, #3
   1e8e0:	movw	r2, #501	; 0x1f5
   1e8e4:	ldr	r3, [pc, #324]	; 1ea30 <__assert_fail@plt+0xc35c>
   1e8e8:	bl	126d4 <__assert_fail@plt>
   1e8ec:	ldr	r3, [sp, #80]	; 0x50
   1e8f0:	ldr	r2, [sp, #84]	; 0x54
   1e8f4:	mov	r0, r3
   1e8f8:	str	r3, [r7, #48]	; 0x30
   1e8fc:	str	r2, [r7, #52]	; 0x34
   1e900:	b	1e748 <__assert_fail@plt+0xc074>
   1e904:	movw	r0, #62676	; 0xf4d4
   1e908:	movw	r1, #6928	; 0x1b10
   1e90c:	movt	r0, #2
   1e910:	movt	r1, #3
   1e914:	movw	r2, #1662	; 0x67e
   1e918:	ldr	r3, [pc, #264]	; 1ea28 <__assert_fail@plt+0xc354>
   1e91c:	bl	126d4 <__assert_fail@plt>
   1e920:	mov	r0, fp
   1e924:	mov	r2, #5
   1e928:	movw	r1, #12532	; 0x30f4
   1e92c:	movt	r1, #3
   1e930:	bl	1217c <dcgettext@plt>
   1e934:	ldr	r2, [r8]
   1e938:	movw	r3, #29372	; 0x72bc
   1e93c:	movt	r3, #4
   1e940:	ldr	r2, [r6, r2, lsl #2]
   1e944:	ldr	r1, [r3, #72]	; 0x48
   1e948:	mov	r7, r0
   1e94c:	mov	r0, fp
   1e950:	bl	284fc <__assert_fail@plt+0x15e28>
   1e954:	mov	r1, fp
   1e958:	mov	r2, r7
   1e95c:	mov	r3, r0
   1e960:	mov	r0, #1
   1e964:	bl	122cc <error@plt>
   1e968:	ldr	r3, [r8]
   1e96c:	ldr	fp, [r6, r3, lsl #2]
   1e970:	b	1e6b0 <__assert_fail@plt+0xbfdc>
   1e974:	mov	r2, #5
   1e978:	movw	r1, #12736	; 0x31c0
   1e97c:	movt	r1, #3
   1e980:	bl	1217c <dcgettext@plt>
   1e984:	ldr	r3, [r8]
   1e988:	ldr	r2, [pc, #164]	; 1ea34 <__assert_fail@plt+0xc360>
   1e98c:	ldr	r1, [r2, #72]	; 0x48
   1e990:	ldr	r2, [r6, r3, lsl #2]
   1e994:	mov	r9, r0
   1e998:	mov	r0, r5
   1e99c:	bl	284fc <__assert_fail@plt+0x15e28>
   1e9a0:	mov	r2, r9
   1e9a4:	mov	r1, r5
   1e9a8:	mov	r3, r0
   1e9ac:	mov	r0, #1
   1e9b0:	bl	122cc <error@plt>
   1e9b4:	ldr	r0, [r7, #48]	; 0x30
   1e9b8:	b	1e748 <__assert_fail@plt+0xc074>
   1e9bc:	bl	12188 <__stack_chk_fail@plt>
   1e9c0:	movw	r0, #9864	; 0x2688
   1e9c4:	movw	r1, #6928	; 0x1b10
   1e9c8:	movt	r0, #3
   1e9cc:	movt	r1, #3
   1e9d0:	movw	r2, #1605	; 0x645
   1e9d4:	ldr	r3, [pc, #76]	; 1ea28 <__assert_fail@plt+0xc354>
   1e9d8:	bl	126d4 <__assert_fail@plt>
   1e9dc:	movw	r0, #12868	; 0x3244
   1e9e0:	movw	r1, #6928	; 0x1b10
   1e9e4:	movt	r0, #3
   1e9e8:	movt	r1, #3
   1e9ec:	movw	r2, #1698	; 0x6a2
   1e9f0:	ldr	r3, [pc, #48]	; 1ea28 <__assert_fail@plt+0xc354>
   1e9f4:	bl	126d4 <__assert_fail@plt>
   1e9f8:	movw	r0, #12832	; 0x3220
   1e9fc:	movw	r1, #6928	; 0x1b10
   1ea00:	movt	r0, #3
   1ea04:	movt	r1, #3
   1ea08:	movw	r2, #1697	; 0x6a1
   1ea0c:	ldr	r3, [pc, #20]	; 1ea28 <__assert_fail@plt+0xc354>
   1ea10:	bl	126d4 <__assert_fail@plt>
   1ea14:	bl	12434 <__errno_location@plt>
   1ea18:	ldr	r3, [r8]
   1ea1c:	ldr	r1, [r6, r3, lsl #2]
   1ea20:	ldr	r0, [r0]
   1ea24:	bl	190f8 <__assert_fail@plt+0x6a24>
   1ea28:	andeq	r1, r3, ip, asr #6
   1ea2c:	ldrdeq	r7, [r4], -r0
   1ea30:	andeq	r1, r3, ip, asr r3
   1ea34:			; <UNDEFINED> instruction: 0x000472bc
   1ea38:	push	{r4, lr}
   1ea3c:	bl	18010 <__assert_fail@plt+0x593c>
   1ea40:	mov	r4, r0
   1ea44:	movw	r0, #7136	; 0x1be0
   1ea48:	add	r1, r4, #40	; 0x28
   1ea4c:	movt	r0, #3
   1ea50:	bl	1c148 <__assert_fail@plt+0x9a74>
   1ea54:	mov	r0, #1
   1ea58:	mov	r3, #1065353216	; 0x3f800000
   1ea5c:	strb	r0, [r4, #17]
   1ea60:	strb	r0, [r4, #16]
   1ea64:	str	r3, [r4, #28]
   1ea68:	pop	{r4, pc}
   1ea6c:	push	{r3, r4, r5, r6, r7, lr}
   1ea70:	mov	r7, r0
   1ea74:	mov	r6, r1
   1ea78:	mov	r5, r2
   1ea7c:	bl	2c808 <fts_children@@Base+0x43c>
   1ea80:	subs	r4, r0, #0
   1ea84:	bne	1ea90 <__assert_fail@plt+0xc3bc>
   1ea88:	mov	r0, r4
   1ea8c:	pop	{r3, r4, r5, r6, r7, pc}
   1ea90:	bl	12434 <__errno_location@plt>
   1ea94:	ldr	r3, [r0]
   1ea98:	cmp	r3, #2
   1ea9c:	beq	1eaa8 <__assert_fail@plt+0xc3d4>
   1eaa0:	cmp	r3, #20
   1eaa4:	bne	1ea88 <__assert_fail@plt+0xc3b4>
   1eaa8:	mov	r0, r7
   1eaac:	mov	r1, r6
   1eab0:	mov	r2, r5
   1eab4:	pop	{r3, r4, r5, r6, r7, lr}
   1eab8:	b	2c9d8 <fts_children@@Base+0x60c>
   1eabc:	push	{r4, lr}
   1eac0:	subs	r4, r0, #0
   1eac4:	popeq	{r4, pc}
   1eac8:	movw	r2, #16356	; 0x3fe4
   1eacc:	movw	r1, #15588	; 0x3ce4
   1ead0:	movt	r2, #1
   1ead4:	movt	r1, #1
   1ead8:	mov	r0, #0
   1eadc:	ldr	r3, [r4]
   1eae0:	cmp	r3, r2
   1eae4:	orreq	r0, r0, #1
   1eae8:	beq	1eaf4 <__assert_fail@plt+0xc420>
   1eaec:	cmp	r3, r1
   1eaf0:	orreq	r0, r0, #2
   1eaf4:	ldr	r4, [r4, #152]	; 0x98
   1eaf8:	cmp	r4, #0
   1eafc:	bne	1eadc <__assert_fail@plt+0xc408>
   1eb00:	and	r0, r0, #3
   1eb04:	cmp	r0, #3
   1eb08:	popne	{r4, pc}
   1eb0c:	movw	r3, #29372	; 0x72bc
   1eb10:	movt	r3, #4
   1eb14:	ldrb	r3, [r3, #1]
   1eb18:	cmp	r3, #0
   1eb1c:	popne	{r4, pc}
   1eb20:	mov	r0, r4
   1eb24:	mov	r2, #5
   1eb28:	movw	r1, #12932	; 0x3284
   1eb2c:	movt	r1, #3
   1eb30:	bl	1217c <dcgettext@plt>
   1eb34:	mov	r1, r4
   1eb38:	pop	{r4, lr}
   1eb3c:	mov	r2, r0
   1eb40:	mov	r0, #1
   1eb44:	b	122cc <error@plt>
   1eb48:	movw	r3, #29372	; 0x72bc
   1eb4c:	movt	r3, #4
   1eb50:	ldr	r2, [r3, #44]	; 0x2c
   1eb54:	tst	r2, #2
   1eb58:	bne	1eb98 <__assert_fail@plt+0xc4c4>
   1eb5c:	cmp	r0, #1
   1eb60:	beq	1ebac <__assert_fail@plt+0xc4d8>
   1eb64:	bcc	1ebd0 <__assert_fail@plt+0xc4fc>
   1eb68:	cmp	r0, #2
   1eb6c:	bne	1eb90 <__assert_fail@plt+0xc4bc>
   1eb70:	movw	r1, #34252	; 0x85cc
   1eb74:	movw	r2, #54432	; 0xd4a0
   1eb78:	movt	r1, #1
   1eb7c:	movt	r2, #1
   1eb80:	str	r1, [r3, #52]	; 0x34
   1eb84:	mov	r1, #1
   1eb88:	str	r2, [r3, #64]	; 0x40
   1eb8c:	strb	r1, [r3, #12]
   1eb90:	str	r0, [r3, #48]	; 0x30
   1eb94:	bx	lr
   1eb98:	movw	r2, #34716	; 0x879c
   1eb9c:	str	r0, [r3, #48]	; 0x30
   1eba0:	movt	r2, #1
   1eba4:	str	r2, [r3, #52]	; 0x34
   1eba8:	bx	lr
   1ebac:	movw	r1, #34452	; 0x8694
   1ebb0:	movw	r2, #60012	; 0xea6c
   1ebb4:	movt	r1, #1
   1ebb8:	movt	r2, #1
   1ebbc:	strb	r0, [r3, #12]
   1ebc0:	str	r1, [r3, #52]	; 0x34
   1ebc4:	str	r2, [r3, #64]	; 0x40
   1ebc8:	str	r0, [r3, #48]	; 0x30
   1ebcc:	bx	lr
   1ebd0:	movw	r1, #34616	; 0x8738
   1ebd4:	movw	r2, #44984	; 0xafb8
   1ebd8:	movt	r1, #1
   1ebdc:	movt	r2, #1
   1ebe0:	str	r1, [r3, #52]	; 0x34
   1ebe4:	str	r2, [r3, #64]	; 0x40
   1ebe8:	str	r0, [r3, #48]	; 0x30
   1ebec:	bx	lr
   1ebf0:	push	{r3, lr}
   1ebf4:	mov	r0, #1
   1ebf8:	bl	1eb48 <__assert_fail@plt+0xc474>
   1ebfc:	pop	{r3, lr}
   1ec00:	b	1d510 <__assert_fail@plt+0xae3c>
   1ec04:	movw	r3, #27928	; 0x6d18
   1ec08:	movt	r3, #4
   1ec0c:	mov	r2, #0
   1ec10:	str	r2, [r3]
   1ec14:	bx	lr
   1ec18:	bx	lr
   1ec1c:	push	{r4, r5, r6, r7, r8, lr}
   1ec20:	mov	r1, r0
   1ec24:	mov	r7, r0
   1ec28:	mov	r2, #6
   1ec2c:	movw	r0, #9856	; 0x2680
   1ec30:	movt	r0, #3
   1ec34:	bl	1265c <strncmp@plt>
   1ec38:	cmp	r0, #0
   1ec3c:	bne	1ec50 <__assert_fail@plt+0xc57c>
   1ec40:	mov	r0, r7
   1ec44:	bl	123d4 <strlen@plt>
   1ec48:	cmp	r0, #8
   1ec4c:	beq	1ecb0 <__assert_fail@plt+0xc5dc>
   1ec50:	ldrb	r3, [r7]
   1ec54:	cmp	r3, #45	; 0x2d
   1ec58:	addeq	r6, r7, #1
   1ec5c:	movne	r6, r7
   1ec60:	ldr	r8, [pc, #88]	; 1ecc0 <__assert_fail@plt+0xc5ec>
   1ec64:	movw	r0, #64416	; 0xfba0
   1ec68:	mov	r5, #0
   1ec6c:	movt	r0, #2
   1ec70:	mov	r4, r8
   1ec74:	b	1ec88 <__assert_fail@plt+0xc5b4>
   1ec78:	ldr	r0, [r4, #4]
   1ec7c:	add	r5, r5, #1
   1ec80:	cmp	r0, #0
   1ec84:	beq	1ecac <__assert_fail@plt+0xc5d8>
   1ec88:	mov	r1, r6
   1ec8c:	add	r4, r4, #16
   1ec90:	bl	1205c <strcmp@plt>
   1ec94:	cmp	r0, #0
   1ec98:	bne	1ec78 <__assert_fail@plt+0xc5a4>
   1ec9c:	mov	r0, r7
   1eca0:	add	r1, r8, r5, lsl #4
   1eca4:	pop	{r4, r5, r6, r7, r8, lr}
   1eca8:	b	1d3e8 <__assert_fail@plt+0xad14>
   1ecac:	pop	{r4, r5, r6, r7, r8, pc}
   1ecb0:	mov	r0, r7
   1ecb4:	ldr	r1, [pc, #8]	; 1ecc4 <__assert_fail@plt+0xc5f0>
   1ecb8:	pop	{r4, r5, r6, r7, r8, lr}
   1ecbc:	b	1d3e8 <__assert_fail@plt+0xad14>
   1ecc0:	ldrdeq	r0, [r3], -ip
   1ecc4:	andeq	r1, r3, ip, ror #6
   1ecc8:	push	{r3, lr}
   1eccc:	movw	r0, #13104	; 0x3330
   1ecd0:	movt	r0, #3
   1ecd4:	bl	1ec1c <__assert_fail@plt+0xc548>
   1ecd8:	bl	18010 <__assert_fail@plt+0x593c>
   1ecdc:	mov	r2, #0
   1ece0:	mov	r1, #0
   1ece4:	mov	r3, r0
   1ece8:	str	r1, [r0, #28]
   1ecec:	strb	r2, [r0, #19]
   1ecf0:	strb	r2, [r0, #18]
   1ecf4:	mov	r0, #1
   1ecf8:	strb	r2, [r3, #17]
   1ecfc:	strb	r2, [r3, #16]
   1ed00:	pop	{r3, pc}
   1ed04:	b	1ecc8 <__assert_fail@plt+0xc5f4>
   1ed08:	push	{r4, r5, r6, r7, r8, lr}
   1ed0c:	movw	r6, #26008	; 0x6598
   1ed10:	movt	r6, #4
   1ed14:	sub	sp, sp, #112	; 0x70
   1ed18:	cmp	r1, #0
   1ed1c:	mov	r8, r0
   1ed20:	ldr	r3, [r6]
   1ed24:	moveq	r0, r1
   1ed28:	str	r3, [sp, #108]	; 0x6c
   1ed2c:	beq	1edcc <__assert_fail@plt+0xc6f8>
   1ed30:	ldr	r3, [r2]
   1ed34:	ldr	r5, [r1, r3, lsl #2]
   1ed38:	cmp	r5, #0
   1ed3c:	moveq	r0, r5
   1ed40:	beq	1edcc <__assert_fail@plt+0xc6f8>
   1ed44:	movw	r7, #29372	; 0x72bc
   1ed48:	movt	r7, #4
   1ed4c:	add	r3, r3, #1
   1ed50:	str	r3, [r2]
   1ed54:	ldrh	r3, [r7, #68]	; 0x44
   1ed58:	cmp	r3, #1
   1ed5c:	bls	1ee08 <__assert_fail@plt+0xc734>
   1ed60:	ldrb	r3, [r5]
   1ed64:	cmp	r3, #97	; 0x61
   1ed68:	beq	1ede4 <__assert_fail@plt+0xc710>
   1ed6c:	mov	r0, #0
   1ed70:	bl	2c57c <fts_children@@Base+0x1b0>
   1ed74:	subs	r4, r0, #0
   1ed78:	beq	1ee08 <__assert_fail@plt+0xc734>
   1ed7c:	mov	r0, r5
   1ed80:	ldr	r1, [r4, #8]
   1ed84:	bl	1205c <strcmp@plt>
   1ed88:	cmp	r0, #0
   1ed8c:	beq	1ee08 <__assert_fail@plt+0xc734>
   1ed90:	ldr	r4, [r4, #28]
   1ed94:	cmp	r4, #0
   1ed98:	bne	1ed7c <__assert_fail@plt+0xc6a8>
   1ed9c:	ldr	r3, [r7, #44]	; 0x2c
   1eda0:	tst	r3, #8
   1eda4:	beq	1edc8 <__assert_fail@plt+0xc6f4>
   1eda8:	movw	r1, #26016	; 0x65a0
   1edac:	movt	r1, #4
   1edb0:	movw	r2, #13116	; 0x333c
   1edb4:	mov	r3, r5
   1edb8:	ldr	r0, [r1]
   1edbc:	movt	r2, #3
   1edc0:	mov	r1, #1
   1edc4:	bl	124d0 <__fprintf_chk@plt>
   1edc8:	bl	1ecc8 <__assert_fail@plt+0xc5f4>
   1edcc:	ldr	r2, [sp, #108]	; 0x6c
   1edd0:	ldr	r3, [r6]
   1edd4:	cmp	r2, r3
   1edd8:	bne	1ee7c <__assert_fail@plt+0xc7a8>
   1eddc:	add	sp, sp, #112	; 0x70
   1ede0:	pop	{r4, r5, r6, r7, r8, pc}
   1ede4:	ldrb	r3, [r5, #1]
   1ede8:	cmp	r3, #102	; 0x66
   1edec:	bne	1ed6c <__assert_fail@plt+0xc698>
   1edf0:	ldrb	r3, [r5, #2]
   1edf4:	cmp	r3, #115	; 0x73
   1edf8:	bne	1ed6c <__assert_fail@plt+0xc698>
   1edfc:	ldrb	r3, [r5, #3]
   1ee00:	cmp	r3, #0
   1ee04:	bne	1ed6c <__assert_fail@plt+0xc698>
   1ee08:	mov	r1, r5
   1ee0c:	mov	r0, r8
   1ee10:	bl	17fb8 <__assert_fail@plt+0x58e4>
   1ee14:	mov	r2, sp
   1ee18:	movw	r1, #13112	; 0x3338
   1ee1c:	movt	r1, #3
   1ee20:	mov	r4, r0
   1ee24:	mov	r0, #3
   1ee28:	str	r5, [r4, #40]	; 0x28
   1ee2c:	bl	12620 <__xstat64@plt>
   1ee30:	cmp	r0, #0
   1ee34:	vmovne.f32	s15, #112	; 0x3f800000  1.0
   1ee38:	vstrne	s15, [r4, #28]
   1ee3c:	movne	r0, #1
   1ee40:	bne	1edcc <__assert_fail@plt+0xc6f8>
   1ee44:	mov	r0, sp
   1ee48:	movw	r1, #13112	; 0x3338
   1ee4c:	movt	r1, #3
   1ee50:	bl	136f8 <__assert_fail@plt+0x1024>
   1ee54:	mov	r1, r0
   1ee58:	mov	r0, r5
   1ee5c:	bl	1205c <strcmp@plt>
   1ee60:	vldr	s14, [pc, #24]	; 1ee80 <__assert_fail@plt+0xc7ac>
   1ee64:	vldr	s15, [pc, #24]	; 1ee84 <__assert_fail@plt+0xc7b0>
   1ee68:	cmp	r0, #0
   1ee6c:	mov	r0, #1
   1ee70:	vmovne.f32	s15, s14
   1ee74:	vstr	s15, [r4, #28]
   1ee78:	b	1edcc <__assert_fail@plt+0xc6f8>
   1ee7c:	bl	12188 <__stack_chk_fail@plt>
   1ee80:			; <UNDEFINED> instruction: 0x3e99999a
   1ee84:	svccc	0x00333333
   1ee88:	movw	r3, #26016	; 0x65a0
   1ee8c:	movt	r3, #4
   1ee90:	push	{r4, r5, r6, r7, r8, lr}
   1ee94:	mov	r5, r0
   1ee98:	sub	sp, sp, #16
   1ee9c:	ldr	r0, [r3]
   1eea0:	bl	2a1c0 <__assert_fail@plt+0x17aec>
   1eea4:	movw	ip, #26024	; 0x65a8
   1eea8:	movw	r3, #25764	; 0x64a4
   1eeac:	movt	ip, #4
   1eeb0:	movt	r3, #4
   1eeb4:	mov	r2, #5
   1eeb8:	movw	r1, #13720	; 0x3598
   1eebc:	mov	r0, #0
   1eec0:	movt	r1, #3
   1eec4:	ldr	r4, [ip]
   1eec8:	ldr	r7, [r3]
   1eecc:	bl	1217c <dcgettext@plt>
   1eed0:	mov	r2, #5
   1eed4:	movw	r1, #13736	; 0x35a8
   1eed8:	movt	r1, #3
   1eedc:	mov	r8, r0
   1eee0:	mov	r0, #0
   1eee4:	bl	1217c <dcgettext@plt>
   1eee8:	mov	r2, #5
   1eeec:	movw	r1, #13752	; 0x35b8
   1eef0:	movt	r1, #3
   1eef4:	mov	r6, r0
   1eef8:	mov	r0, #0
   1eefc:	bl	1217c <dcgettext@plt>
   1ef00:	mov	ip, #0
   1ef04:	str	r8, [sp]
   1ef08:	mov	r3, r7
   1ef0c:	str	r6, [sp, #4]
   1ef10:	mov	r1, r5
   1ef14:	str	ip, [sp, #12]
   1ef18:	movw	r2, #13768	; 0x35c8
   1ef1c:	movt	r2, #3
   1ef20:	str	r0, [sp, #8]
   1ef24:	mov	r0, r4
   1ef28:	bl	28d3c <__assert_fail@plt+0x16668>
   1ef2c:	add	sp, sp, #16
   1ef30:	pop	{r4, r5, r6, r7, r8, pc}
   1ef34:	push	{r3, r4, r5, lr}
   1ef38:	mov	r4, r0
   1ef3c:	mov	r5, r1
   1ef40:	ldrb	r0, [r4], #1
   1ef44:	cmp	r0, #0
   1ef48:	beq	1ef98 <__assert_fail@plt+0xc8c4>
   1ef4c:	cmp	r0, #12
   1ef50:	beq	1f044 <__assert_fail@plt+0xc970>
   1ef54:	bls	1ef9c <__assert_fail@plt+0xc8c8>
   1ef58:	cmp	r0, #32
   1ef5c:	beq	1f07c <__assert_fail@plt+0xc9a8>
   1ef60:	bls	1efcc <__assert_fail@plt+0xc8f8>
   1ef64:	cmp	r0, #34	; 0x22
   1ef68:	beq	1f060 <__assert_fail@plt+0xc98c>
   1ef6c:	cmp	r0, #92	; 0x5c
   1ef70:	bne	1efb4 <__assert_fail@plt+0xc8e0>
   1ef74:	movw	r0, #13792	; 0x35e0
   1ef78:	mov	r1, #1
   1ef7c:	movt	r0, #3
   1ef80:	mov	r2, #2
   1ef84:	mov	r3, r5
   1ef88:	bl	12248 <fwrite@plt>
   1ef8c:	ldrb	r0, [r4], #1
   1ef90:	cmp	r0, #0
   1ef94:	bne	1ef4c <__assert_fail@plt+0xc878>
   1ef98:	pop	{r3, r4, r5, pc}
   1ef9c:	cmp	r0, #9
   1efa0:	beq	1f028 <__assert_fail@plt+0xc954>
   1efa4:	cmp	r0, #10
   1efa8:	beq	1f00c <__assert_fail@plt+0xc938>
   1efac:	cmp	r0, #8
   1efb0:	beq	1eff0 <__assert_fail@plt+0xc91c>
   1efb4:	sub	r3, r0, #33	; 0x21
   1efb8:	cmp	r3, #93	; 0x5d
   1efbc:	bhi	1f098 <__assert_fail@plt+0xc9c4>
   1efc0:	mov	r1, r5
   1efc4:	bl	1223c <_IO_putc@plt>
   1efc8:	b	1ef40 <__assert_fail@plt+0xc86c>
   1efcc:	cmp	r0, #13
   1efd0:	bne	1efb4 <__assert_fail@plt+0xc8e0>
   1efd4:	movw	r0, #13804	; 0x35ec
   1efd8:	mov	r1, #1
   1efdc:	mov	r2, #2
   1efe0:	mov	r3, r5
   1efe4:	movt	r0, #3
   1efe8:	bl	12248 <fwrite@plt>
   1efec:	b	1ef40 <__assert_fail@plt+0xc86c>
   1eff0:	movw	r0, #13800	; 0x35e8
   1eff4:	mov	r1, #1
   1eff8:	mov	r2, #2
   1effc:	mov	r3, r5
   1f000:	movt	r0, #3
   1f004:	bl	12248 <fwrite@plt>
   1f008:	b	1ef40 <__assert_fail@plt+0xc86c>
   1f00c:	movw	r0, #13796	; 0x35e4
   1f010:	mov	r1, #1
   1f014:	mov	r2, #2
   1f018:	mov	r3, r5
   1f01c:	movt	r0, #3
   1f020:	bl	12248 <fwrite@plt>
   1f024:	b	1ef40 <__assert_fail@plt+0xc86c>
   1f028:	movw	r0, #13808	; 0x35f0
   1f02c:	mov	r1, #1
   1f030:	mov	r2, #2
   1f034:	mov	r3, r5
   1f038:	movt	r0, #3
   1f03c:	bl	12248 <fwrite@plt>
   1f040:	b	1ef40 <__assert_fail@plt+0xc86c>
   1f044:	movw	r0, #13812	; 0x35f4
   1f048:	mov	r1, #1
   1f04c:	mov	r2, #2
   1f050:	mov	r3, r5
   1f054:	movt	r0, #3
   1f058:	bl	12248 <fwrite@plt>
   1f05c:	b	1ef40 <__assert_fail@plt+0xc86c>
   1f060:	movw	r0, #13820	; 0x35fc
   1f064:	mov	r1, #1
   1f068:	mov	r2, #2
   1f06c:	mov	r3, r5
   1f070:	movt	r0, #3
   1f074:	bl	12248 <fwrite@plt>
   1f078:	b	1ef40 <__assert_fail@plt+0xc86c>
   1f07c:	movw	r0, #13816	; 0x35f8
   1f080:	mov	r1, #1
   1f084:	mov	r2, #2
   1f088:	mov	r3, r5
   1f08c:	movt	r0, #3
   1f090:	bl	12248 <fwrite@plt>
   1f094:	b	1ef40 <__assert_fail@plt+0xc86c>
   1f098:	mov	r3, r0
   1f09c:	movw	r2, #13824	; 0x3600
   1f0a0:	mov	r0, r5
   1f0a4:	movt	r2, #3
   1f0a8:	mov	r1, #1
   1f0ac:	bl	124d0 <__fprintf_chk@plt>
   1f0b0:	b	1ef40 <__assert_fail@plt+0xc86c>
   1f0b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0b8:	add	fp, sp, #32
   1f0bc:	sub	sp, sp, #972	; 0x3cc
   1f0c0:	movw	r8, #26008	; 0x6598
   1f0c4:	movt	r8, #4
   1f0c8:	mov	r6, r3
   1f0cc:	str	r0, [fp, #-968]	; 0xfffffc38
   1f0d0:	ldr	r3, [r8]
   1f0d4:	mov	r4, #1
   1f0d8:	ldmib	fp, {r9, sl}
   1f0dc:	mov	r5, #0
   1f0e0:	str	r1, [fp, #-972]	; 0xfffffc34
   1f0e4:	sub	r1, fp, #960	; 0x3c0
   1f0e8:	ldr	r0, [r6, #16]
   1f0ec:	ldr	r7, [fp, #16]
   1f0f0:	str	r2, [fp, #-976]	; 0xfffffc30
   1f0f4:	str	r3, [fp, #-40]	; 0xffffffd8
   1f0f8:	bl	214a4 <__assert_fail@plt+0xedd0>
   1f0fc:	sub	ip, fp, #1024	; 0x400
   1f100:	ldrd	r0, [r6, #96]	; 0x60
   1f104:	sub	r2, fp, #692	; 0x2b4
   1f108:	strd	r4, [sp]
   1f10c:	strd	r4, [sp, #8]
   1f110:	mov	r3, #0
   1f114:	mov	r4, sl
   1f118:	asr	r5, sl, #31
   1f11c:	strd	r4, [ip, #36]	; 0x24
   1f120:	bl	22728 <__assert_fail@plt+0x10054>
   1f124:	mov	r1, #1
   1f128:	movw	r2, #13856	; 0x3620
   1f12c:	movt	r2, #3
   1f130:	mov	r3, r0
   1f134:	mov	r0, r7
   1f138:	bl	124d0 <__fprintf_chk@plt>
   1f13c:	ldrd	r0, [r6, #64]	; 0x40
   1f140:	sub	r2, fp, #692	; 0x2b4
   1f144:	strd	r4, [sp, #8]
   1f148:	mov	r3, #0
   1f14c:	mov	r4, #512	; 0x200
   1f150:	mov	r5, #0
   1f154:	strd	r4, [sp]
   1f158:	bl	22728 <__assert_fail@plt+0x10054>
   1f15c:	mov	r1, #1
   1f160:	movw	r2, #13864	; 0x3628
   1f164:	movt	r2, #3
   1f168:	mov	r3, r0
   1f16c:	mov	r0, r7
   1f170:	bl	124d0 <__fprintf_chk@plt>
   1f174:	ldr	ip, [r6, #20]
   1f178:	mov	r1, #1
   1f17c:	sub	r3, fp, #960	; 0x3c0
   1f180:	mov	r0, r7
   1f184:	movw	r2, #13872	; 0x3630
   1f188:	str	ip, [sp]
   1f18c:	movt	r2, #3
   1f190:	bl	124d0 <__fprintf_chk@plt>
   1f194:	ldr	r0, [r6, #24]
   1f198:	bl	232dc <__assert_fail@plt+0x10c08>
   1f19c:	subs	r3, r0, #0
   1f1a0:	movwne	r2, #13880	; 0x3638
   1f1a4:	movweq	r2, #13888	; 0x3640
   1f1a8:	movtne	r2, #3
   1f1ac:	movteq	r2, #3
   1f1b0:	movne	r1, #1
   1f1b4:	moveq	r1, #1
   1f1b8:	movne	r0, r7
   1f1bc:	moveq	r0, r7
   1f1c0:	ldreq	r3, [r6, #24]
   1f1c4:	bl	124d0 <__fprintf_chk@plt>
   1f1c8:	ldr	r0, [r6, #28]
   1f1cc:	bl	23470 <__assert_fail@plt+0x10d9c>
   1f1d0:	subs	r3, r0, #0
   1f1d4:	movwne	r2, #13880	; 0x3638
   1f1d8:	movweq	r2, #13888	; 0x3640
   1f1dc:	ldreq	r3, [r6, #28]
   1f1e0:	movne	r0, r7
   1f1e4:	movtne	r2, #3
   1f1e8:	movne	r1, #1
   1f1ec:	moveq	r0, r7
   1f1f0:	movteq	r2, #3
   1f1f4:	moveq	r1, #1
   1f1f8:	bl	124d0 <__fprintf_chk@plt>
   1f1fc:	ldr	r3, [r6, #16]
   1f200:	and	r3, r3, #45056	; 0xb000
   1f204:	cmp	r3, #8192	; 0x2000
   1f208:	beq	1f3b0 <__assert_fail@plt+0xccdc>
   1f20c:	cmp	sl, #0
   1f210:	ldrd	r0, [r6, #48]	; 0x30
   1f214:	mov	r4, #1
   1f218:	mov	r5, #0
   1f21c:	ldrlt	r2, [fp, #-988]	; 0xfffffc24
   1f220:	movge	r2, #1
   1f224:	ldrlt	r3, [fp, #-984]	; 0xfffffc28
   1f228:	movge	r3, #0
   1f22c:	strd	r4, [sp]
   1f230:	str	r2, [sp, #8]
   1f234:	sub	r2, fp, #692	; 0x2b4
   1f238:	str	r3, [sp, #12]
   1f23c:	mov	r3, #0
   1f240:	bl	22728 <__assert_fail@plt+0x10054>
   1f244:	mov	r1, #1
   1f248:	movw	r2, #13908	; 0x3654
   1f24c:	movt	r2, #3
   1f250:	mov	r3, r0
   1f254:	mov	r0, r7
   1f258:	bl	124d0 <__fprintf_chk@plt>
   1f25c:	add	r0, r6, #80	; 0x50
   1f260:	bl	12374 <localtime@plt>
   1f264:	subs	sl, r0, #0
   1f268:	beq	1f404 <__assert_fail@plt+0xcd30>
   1f26c:	sub	r2, r9, #15532032	; 0xed0000
   1f270:	ldr	r3, [r6, #80]	; 0x50
   1f274:	sub	r2, r2, #19968	; 0x4e00
   1f278:	cmp	r2, r3
   1f27c:	movwgt	r5, #13844	; 0x3614
   1f280:	movtgt	r5, #3
   1f284:	ble	1f328 <__assert_fail@plt+0xcc54>
   1f288:	mov	r4, #256	; 0x100
   1f28c:	sub	r9, fp, #948	; 0x3b4
   1f290:	b	1f2a8 <__assert_fail@plt+0xcbd4>
   1f294:	lsl	r4, r4, #1
   1f298:	add	r3, r4, #14
   1f29c:	bic	r3, r3, #7
   1f2a0:	sub	sp, sp, r3
   1f2a4:	add	r9, sp, #16
   1f2a8:	mov	r0, r9
   1f2ac:	mov	r1, r4
   1f2b0:	mov	r2, r5
   1f2b4:	mov	r3, sl
   1f2b8:	bl	12350 <strftime@plt>
   1f2bc:	cmp	r0, #0
   1f2c0:	beq	1f294 <__assert_fail@plt+0xcbc0>
   1f2c4:	movw	r2, #61712	; 0xf110
   1f2c8:	mov	r3, r9
   1f2cc:	mov	r0, r7
   1f2d0:	movt	r2, #2
   1f2d4:	mov	r1, #1
   1f2d8:	bl	124d0 <__fprintf_chk@plt>
   1f2dc:	ldr	r5, [fp, #12]
   1f2e0:	mov	r1, r7
   1f2e4:	ldr	r0, [fp, #-968]	; 0xfffffc38
   1f2e8:	cmp	r5, #0
   1f2ec:	bne	1f34c <__assert_fail@plt+0xcc78>
   1f2f0:	bl	1ef34 <__assert_fail@plt+0xc860>
   1f2f4:	ldr	r3, [r6, #16]
   1f2f8:	and	r3, r3, #61440	; 0xf000
   1f2fc:	cmp	r3, #40960	; 0xa000
   1f300:	beq	1f360 <__assert_fail@plt+0xcc8c>
   1f304:	mov	r1, r7
   1f308:	mov	r0, #10
   1f30c:	bl	1223c <_IO_putc@plt>
   1f310:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1f314:	ldr	r3, [r8]
   1f318:	cmp	r2, r3
   1f31c:	bne	1f4d8 <__assert_fail@plt+0xce04>
   1f320:	sub	sp, fp, #32
   1f324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f328:	add	r5, r9, #3600	; 0xe10
   1f32c:	movw	r1, #13832	; 0x3608
   1f330:	cmp	r3, r5
   1f334:	movw	r2, #13844	; 0x3614
   1f338:	movt	r1, #3
   1f33c:	movt	r2, #3
   1f340:	movle	r5, r1
   1f344:	movgt	r5, r2
   1f348:	b	1f288 <__assert_fail@plt+0xcbb4>
   1f34c:	bl	12650 <fputs@plt>
   1f350:	ldr	r3, [r6, #16]
   1f354:	and	r3, r3, #61440	; 0xf000
   1f358:	cmp	r3, #40960	; 0xa000
   1f35c:	bne	1f304 <__assert_fail@plt+0xcc30>
   1f360:	ldr	r0, [fp, #-972]	; 0xfffffc34
   1f364:	ldr	r1, [fp, #-976]	; 0xfffffc30
   1f368:	bl	20e38 <__assert_fail@plt+0xe764>
   1f36c:	subs	r4, r0, #0
   1f370:	beq	1f458 <__assert_fail@plt+0xcd84>
   1f374:	mov	r1, #1
   1f378:	movw	r0, #13936	; 0x3670
   1f37c:	mov	r2, #4
   1f380:	movt	r0, #3
   1f384:	mov	r3, r7
   1f388:	bl	12248 <fwrite@plt>
   1f38c:	ldr	ip, [fp, #12]
   1f390:	mov	r0, r4
   1f394:	mov	r1, r7
   1f398:	cmp	ip, #0
   1f39c:	bne	1f450 <__assert_fail@plt+0xcd7c>
   1f3a0:	bl	1ef34 <__assert_fail@plt+0xc860>
   1f3a4:	mov	r0, r4
   1f3a8:	bl	120c8 <free@plt>
   1f3ac:	b	1f304 <__assert_fail@plt+0xcc30>
   1f3b0:	ldr	ip, [r6, #32]
   1f3b4:	movw	r2, #13896	; 0x3648
   1f3b8:	ldr	lr, [r6, #36]	; 0x24
   1f3bc:	movt	r2, #3
   1f3c0:	ubfx	r3, ip, #8, #12
   1f3c4:	mov	r0, r7
   1f3c8:	lsr	r1, ip, #12
   1f3cc:	uxtb	ip, ip
   1f3d0:	orr	r1, r1, lr, lsl #20
   1f3d4:	bic	lr, lr, #4080	; 0xff0
   1f3d8:	bic	lr, lr, #15
   1f3dc:	bic	r1, r1, #255	; 0xff
   1f3e0:	orr	r1, r1, ip
   1f3e4:	orr	r3, lr, r3
   1f3e8:	str	r1, [sp]
   1f3ec:	mov	r1, #1
   1f3f0:	bl	124d0 <__fprintf_chk@plt>
   1f3f4:	add	r0, r6, #80	; 0x50
   1f3f8:	bl	12374 <localtime@plt>
   1f3fc:	subs	sl, r0, #0
   1f400:	bne	1f26c <__assert_fail@plt+0xcb98>
   1f404:	ldr	r0, [r6, #80]	; 0x50
   1f408:	cmp	r0, #0
   1f40c:	blt	1f478 <__assert_fail@plt+0xcda4>
   1f410:	sub	r2, fp, #692	; 0x2b4
   1f414:	mov	r3, sl
   1f418:	mov	r4, #1
   1f41c:	mov	r5, #0
   1f420:	asr	r1, r0, #31
   1f424:	strd	r4, [sp]
   1f428:	strd	r4, [sp, #8]
   1f42c:	bl	22728 <__assert_fail@plt+0x10054>
   1f430:	movw	r2, #13928	; 0x3668
   1f434:	mov	r1, #1
   1f438:	movt	r2, #3
   1f43c:	mov	r3, #12
   1f440:	str	r0, [sp]
   1f444:	mov	r0, r7
   1f448:	bl	124d0 <__fprintf_chk@plt>
   1f44c:	b	1f2dc <__assert_fail@plt+0xcc08>
   1f450:	bl	12650 <fputs@plt>
   1f454:	b	1f3a4 <__assert_fail@plt+0xccd0>
   1f458:	bl	12434 <__errno_location@plt>
   1f45c:	ldr	r3, [fp, #-968]	; 0xfffffc38
   1f460:	movw	r2, #15064	; 0x3ad8
   1f464:	movt	r2, #3
   1f468:	ldr	r1, [r0]
   1f46c:	mov	r0, r4
   1f470:	bl	122cc <error@plt>
   1f474:	b	1f3a4 <__assert_fail@plt+0xccd0>
   1f478:	asr	r1, r0, #31
   1f47c:	sub	r2, fp, #692	; 0x2b4
   1f480:	mov	r3, sl
   1f484:	rsbs	r0, r0, #0
   1f488:	rsc	r1, r1, #0
   1f48c:	mov	r4, #1
   1f490:	mov	r5, #0
   1f494:	strd	r4, [sp]
   1f498:	strd	r4, [sp, #8]
   1f49c:	bl	22728 <__assert_fail@plt+0x10054>
   1f4a0:	mov	r4, r0
   1f4a4:	bl	123d4 <strlen@plt>
   1f4a8:	movw	r3, #13924	; 0x3664
   1f4ac:	movt	r3, #3
   1f4b0:	str	r3, [sp]
   1f4b4:	movw	r2, #13916	; 0x365c
   1f4b8:	str	r4, [sp, #4]
   1f4bc:	movt	r2, #3
   1f4c0:	mov	r1, #1
   1f4c4:	rsb	r3, r0, #12
   1f4c8:	mov	r0, r7
   1f4cc:	bic	r3, r3, r3, asr #31
   1f4d0:	bl	124d0 <__fprintf_chk@plt>
   1f4d4:	b	1f2dc <__assert_fail@plt+0xcc08>
   1f4d8:	bl	12188 <__stack_chk_fail@plt>
   1f4dc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1f4e0:	mov	r4, r1
   1f4e4:	mov	r6, r0
   1f4e8:	mov	r8, r2
   1f4ec:	bl	12434 <__errno_location@plt>
   1f4f0:	cmp	r4, #0
   1f4f4:	mov	r7, r0
   1f4f8:	ldr	r9, [r0]
   1f4fc:	beq	1f5c0 <__assert_fail@plt+0xceec>
   1f500:	ldr	r5, [r8]
   1f504:	cmp	r5, #0
   1f508:	movne	r1, r5
   1f50c:	moveq	r1, #16
   1f510:	cmp	r4, r1
   1f514:	bls	1f544 <__assert_fail@plt+0xce70>
   1f518:	lsl	r3, r1, #1
   1f51c:	cmp	r1, r3
   1f520:	bls	1f538 <__assert_fail@plt+0xce64>
   1f524:	b	1f598 <__assert_fail@plt+0xcec4>
   1f528:	lsl	ip, r3, #1
   1f52c:	cmp	ip, r3
   1f530:	bcc	1f598 <__assert_fail@plt+0xcec4>
   1f534:	mov	r3, ip
   1f538:	cmp	r4, r3
   1f53c:	bhi	1f528 <__assert_fail@plt+0xce54>
   1f540:	mov	r1, r3
   1f544:	cmp	r5, #0
   1f548:	bne	1f578 <__assert_fail@plt+0xcea4>
   1f54c:	cmp	r6, #0
   1f550:	bne	1f5a0 <__assert_fail@plt+0xcecc>
   1f554:	str	r1, [r8]
   1f558:	mov	r0, r1
   1f55c:	bl	1232c <malloc@plt>
   1f560:	mov	r6, r0
   1f564:	cmp	r6, #0
   1f568:	beq	1f570 <__assert_fail@plt+0xce9c>
   1f56c:	str	r9, [r7]
   1f570:	mov	r0, r6
   1f574:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1f578:	cmp	r5, r1
   1f57c:	beq	1f564 <__assert_fail@plt+0xce90>
   1f580:	mov	r0, r6
   1f584:	str	r1, [r8]
   1f588:	bl	121ac <realloc@plt>
   1f58c:	subs	r6, r0, #0
   1f590:	bne	1f56c <__assert_fail@plt+0xce98>
   1f594:	b	1f570 <__assert_fail@plt+0xce9c>
   1f598:	mov	r1, r4
   1f59c:	b	1f544 <__assert_fail@plt+0xce70>
   1f5a0:	movw	r0, #13980	; 0x369c
   1f5a4:	movw	r1, #13968	; 0x3690
   1f5a8:	movw	r3, #13944	; 0x3678
   1f5ac:	movt	r0, #3
   1f5b0:	movt	r1, #3
   1f5b4:	mov	r2, #79	; 0x4f
   1f5b8:	movt	r3, #3
   1f5bc:	bl	126d4 <__assert_fail@plt>
   1f5c0:	movw	r0, #13956	; 0x3684
   1f5c4:	movw	r1, #13968	; 0x3690
   1f5c8:	movw	r3, #13944	; 0x3678
   1f5cc:	movt	r0, #3
   1f5d0:	movt	r1, #3
   1f5d4:	mov	r2, #71	; 0x47
   1f5d8:	movt	r3, #3
   1f5dc:	bl	126d4 <__assert_fail@plt>
   1f5e0:	push	{r4, lr}
   1f5e4:	mov	r4, r0
   1f5e8:	bl	1f4dc <__assert_fail@plt+0xce08>
   1f5ec:	cmp	r0, #0
   1f5f0:	popne	{r4, pc}
   1f5f4:	mov	r0, r4
   1f5f8:	bl	120c8 <free@plt>
   1f5fc:	bl	28f4c <__assert_fail@plt+0x16878>
   1f600:	mov	r0, #0
   1f604:	bx	lr
   1f608:	push	{r4, r5, r6, r7, lr}
   1f60c:	movw	r4, #26008	; 0x6598
   1f610:	movt	r4, #4
   1f614:	sub	sp, sp, #28
   1f618:	mov	r6, r1
   1f61c:	mov	r7, r0
   1f620:	ldr	r2, [r4]
   1f624:	str	r2, [sp, #20]
   1f628:	bl	12308 <getenv@plt>
   1f62c:	subs	r5, r0, #0
   1f630:	moveq	r0, r5
   1f634:	beq	1f668 <__assert_fail@plt+0xcf94>
   1f638:	mov	r5, #0
   1f63c:	add	r1, sp, #12
   1f640:	str	r5, [sp]
   1f644:	mov	r2, #10
   1f648:	add	r3, sp, #16
   1f64c:	bl	2905c <__assert_fail@plt+0x16988>
   1f650:	cmp	r0, r5
   1f654:	bne	1f680 <__assert_fail@plt+0xcfac>
   1f658:	ldr	r0, [sp, #16]
   1f65c:	cmp	r0, r6
   1f660:	movcs	r0, #0
   1f664:	movcc	r0, #1
   1f668:	ldr	r2, [sp, #20]
   1f66c:	ldr	r3, [r4]
   1f670:	cmp	r2, r3
   1f674:	bne	1f6b8 <__assert_fail@plt+0xcfe4>
   1f678:	add	sp, sp, #28
   1f67c:	pop	{r4, r5, r6, r7, pc}
   1f680:	bl	12434 <__errno_location@plt>
   1f684:	mov	r2, #5
   1f688:	movw	r1, #14076	; 0x36fc
   1f68c:	movt	r1, #3
   1f690:	ldr	r6, [r0]
   1f694:	mov	r0, r5
   1f698:	bl	1217c <dcgettext@plt>
   1f69c:	mov	r3, r7
   1f6a0:	mov	r1, r6
   1f6a4:	mov	r2, r0
   1f6a8:	mov	r0, #1
   1f6ac:	bl	122cc <error@plt>
   1f6b0:	mov	r0, r5
   1f6b4:	b	1f668 <__assert_fail@plt+0xcf94>
   1f6b8:	bl	12188 <__stack_chk_fail@plt>
   1f6bc:	movw	ip, #14140	; 0x373c
   1f6c0:	movt	ip, #3
   1f6c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1f6c8:	mov	r7, r2
   1f6cc:	subs	r2, r2, ip
   1f6d0:	mov	r5, r0
   1f6d4:	rsbs	r8, r2, #0
   1f6d8:	mov	r4, r1
   1f6dc:	adcs	r8, r8, r2
   1f6e0:	cmp	r7, #0
   1f6e4:	mov	r9, r3
   1f6e8:	ldr	r6, [sp, #40]	; 0x28
   1f6ec:	beq	1f92c <__assert_fail@plt+0xd258>
   1f6f0:	cmp	r6, #0
   1f6f4:	moveq	r3, #1
   1f6f8:	streq	r3, [r1, #28]
   1f6fc:	cmp	r8, #0
   1f700:	bne	1f7ac <__assert_fail@plt+0xd0d8>
   1f704:	ldr	r2, [r1, #16]
   1f708:	ldr	r3, [r0, #12]
   1f70c:	add	r2, r9, r2
   1f710:	cmp	r2, r3
   1f714:	bls	1f76c <__assert_fail@plt+0xd098>
   1f718:	cmp	r6, #0
   1f71c:	bne	1f8bc <__assert_fail@plt+0xd1e8>
   1f720:	ldr	r2, [r1]
   1f724:	ldr	r3, [r0, #28]
   1f728:	cmp	r2, r3
   1f72c:	beq	1f8bc <__assert_fail@plt+0xd1e8>
   1f730:	ldr	r3, [r5, #24]
   1f734:	cmp	r3, #0
   1f738:	beq	1f8e4 <__assert_fail@plt+0xd210>
   1f73c:	mov	r2, #5
   1f740:	movw	r1, #14244	; 0x37a4
   1f744:	mov	r0, #0
   1f748:	movt	r1, #3
   1f74c:	bl	1217c <dcgettext@plt>
   1f750:	mov	r1, #0
   1f754:	mov	r2, r0
   1f758:	mov	r0, #1
   1f75c:	bl	122cc <error@plt>
   1f760:	mov	r0, r5
   1f764:	mov	r1, r4
   1f768:	bl	1faf0 <__assert_fail@plt+0xd41c>
   1f76c:	cmp	r6, #0
   1f770:	ldr	ip, [r4]
   1f774:	bne	1f794 <__assert_fail@plt+0xd0c0>
   1f778:	ldr	r3, [r5, #40]	; 0x28
   1f77c:	cmp	r3, #0
   1f780:	beq	1f794 <__assert_fail@plt+0xd0c0>
   1f784:	ldr	r2, [r5, #28]
   1f788:	rsb	r2, r2, ip
   1f78c:	cmp	r3, r2
   1f790:	beq	1f7a0 <__assert_fail@plt+0xd0cc>
   1f794:	ldr	r3, [r5, #16]
   1f798:	cmp	ip, r3
   1f79c:	bne	1f7b0 <__assert_fail@plt+0xd0dc>
   1f7a0:	mov	r0, r5
   1f7a4:	mov	r1, r4
   1f7a8:	bl	1faf0 <__assert_fail@plt+0xd41c>
   1f7ac:	ldr	ip, [r4]
   1f7b0:	ldr	r1, [r4, #8]
   1f7b4:	cmp	r1, ip
   1f7b8:	bls	1f7e8 <__assert_fail@plt+0xd114>
   1f7bc:	ldr	r3, [r4, #4]
   1f7c0:	cmp	r8, #0
   1f7c4:	beq	1f818 <__assert_fail@plt+0xd144>
   1f7c8:	add	r1, ip, #1
   1f7cc:	mov	r2, #0
   1f7d0:	str	r1, [r4]
   1f7d4:	str	r2, [r3, ip, lsl #2]
   1f7d8:	cmp	r6, #0
   1f7dc:	ldrne	r3, [r4, #16]
   1f7e0:	strne	r3, [r4, #20]
   1f7e4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1f7e8:	ldr	r0, [r4, #4]
   1f7ec:	cmp	r0, #0
   1f7f0:	beq	1f90c <__assert_fail@plt+0xd238>
   1f7f4:	lsl	r3, r1, #1
   1f7f8:	lsl	r1, r1, #3
   1f7fc:	str	r3, [r4, #8]
   1f800:	bl	28e3c <__assert_fail@plt+0x16768>
   1f804:	cmp	r8, #0
   1f808:	ldr	ip, [r4]
   1f80c:	mov	r3, r0
   1f810:	str	r0, [r4, #4]
   1f814:	bne	1f7c8 <__assert_fail@plt+0xd0f4>
   1f818:	ldr	r2, [sp, #32]
   1f81c:	add	r1, ip, #1
   1f820:	ldr	r0, [r4, #16]
   1f824:	cmp	r2, #0
   1f828:	ldr	r2, [r4, #12]
   1f82c:	str	r1, [r4]
   1f830:	add	r2, r2, r0
   1f834:	str	r2, [r3, ip, lsl #2]
   1f838:	beq	1f85c <__assert_fail@plt+0xd188>
   1f83c:	ldr	r3, [r4, #12]
   1f840:	ldr	r1, [sp, #32]
   1f844:	add	r0, r3, r0
   1f848:	bl	1229c <strcpy@plt>
   1f84c:	ldr	r0, [r4, #16]
   1f850:	ldr	r3, [sp, #36]	; 0x24
   1f854:	add	r0, r3, r0
   1f858:	str	r0, [r4, #16]
   1f85c:	ldr	r3, [r4, #12]
   1f860:	mov	r1, r7
   1f864:	add	r0, r3, r0
   1f868:	bl	1229c <strcpy@plt>
   1f86c:	ldr	r2, [r4, #16]
   1f870:	cmp	r6, #0
   1f874:	ldr	r3, [r4]
   1f878:	add	r9, r2, r9
   1f87c:	str	r9, [r4, #16]
   1f880:	bne	1f8a0 <__assert_fail@plt+0xd1cc>
   1f884:	ldr	r2, [r5, #40]	; 0x28
   1f888:	cmp	r2, #0
   1f88c:	beq	1f8a0 <__assert_fail@plt+0xd1cc>
   1f890:	ldr	r1, [r5, #28]
   1f894:	rsb	r1, r1, r3
   1f898:	cmp	r2, r1
   1f89c:	beq	1f8ac <__assert_fail@plt+0xd1d8>
   1f8a0:	ldr	r2, [r5, #16]
   1f8a4:	cmp	r3, r2
   1f8a8:	bne	1f7d8 <__assert_fail@plt+0xd104>
   1f8ac:	mov	r0, r5
   1f8b0:	mov	r1, r4
   1f8b4:	bl	1faf0 <__assert_fail@plt+0xd41c>
   1f8b8:	b	1f7d8 <__assert_fail@plt+0xd104>
   1f8bc:	mov	r2, #5
   1f8c0:	movw	r1, #14184	; 0x3768
   1f8c4:	mov	r0, #0
   1f8c8:	movt	r1, #3
   1f8cc:	bl	1217c <dcgettext@plt>
   1f8d0:	mov	r1, #0
   1f8d4:	mov	r2, r0
   1f8d8:	mov	r0, #1
   1f8dc:	bl	122cc <error@plt>
   1f8e0:	b	1f730 <__assert_fail@plt+0xd05c>
   1f8e4:	ldr	r3, [r5]
   1f8e8:	cmp	r3, #0
   1f8ec:	beq	1f760 <__assert_fail@plt+0xd08c>
   1f8f0:	ldr	r3, [r5, #36]	; 0x24
   1f8f4:	cmp	r3, #0
   1f8f8:	bne	1f73c <__assert_fail@plt+0xd068>
   1f8fc:	ldr	r3, [r5, #40]	; 0x28
   1f900:	cmp	r3, #0
   1f904:	beq	1f760 <__assert_fail@plt+0xd08c>
   1f908:	b	1f73c <__assert_fail@plt+0xd068>
   1f90c:	mov	r3, #64	; 0x40
   1f910:	mov	r0, #256	; 0x100
   1f914:	str	r3, [r4, #8]
   1f918:	bl	28e14 <__assert_fail@plt+0x16740>
   1f91c:	ldr	ip, [r4]
   1f920:	mov	r3, r0
   1f924:	str	r0, [r4, #4]
   1f928:	b	1f7c0 <__assert_fail@plt+0xd0ec>
   1f92c:	movw	r0, #14152	; 0x3748
   1f930:	movw	r1, #14172	; 0x375c
   1f934:	movw	r3, #14004	; 0x36b4
   1f938:	movt	r0, #3
   1f93c:	movt	r1, #3
   1f940:	movw	r2, #358	; 0x166
   1f944:	movt	r3, #3
   1f948:	bl	126d4 <__assert_fail@plt>
   1f94c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f950:	movw	ip, #27940	; 0x6d24
   1f954:	sub	sp, sp, #36	; 0x24
   1f958:	movt	ip, #4
   1f95c:	mov	r7, r3
   1f960:	mov	r8, r0
   1f964:	ldr	r3, [sp, #76]	; 0x4c
   1f968:	mov	r4, r2
   1f96c:	str	ip, [sp, #16]
   1f970:	str	r1, [sp, #24]
   1f974:	ldr	r1, [ip]
   1f978:	ldr	ip, [sp, #80]	; 0x50
   1f97c:	str	r3, [sp, #12]
   1f980:	cmp	r1, #0
   1f984:	ldr	r3, [sp, #84]	; 0x54
   1f988:	str	ip, [sp, #8]
   1f98c:	ldr	ip, [sp, #88]	; 0x58
   1f990:	ldr	r0, [r0, #12]
   1f994:	ldr	r9, [sp, #72]	; 0x48
   1f998:	sub	r6, r0, #1
   1f99c:	str	r3, [sp, #4]
   1f9a0:	str	ip, [sp, #28]
   1f9a4:	strne	r1, [sp, #20]
   1f9a8:	beq	1fad8 <__assert_fail@plt+0xd404>
   1f9ac:	ldr	r3, [sp, #4]
   1f9b0:	ldr	ip, [sp, #12]
   1f9b4:	ldr	r5, [sp, #20]
   1f9b8:	add	r3, r3, ip
   1f9bc:	str	r3, [sp]
   1f9c0:	b	1fa34 <__assert_fail@plt+0xd360>
   1f9c4:	bl	12488 <strncpy@plt>
   1f9c8:	cmp	sl, #0
   1f9cc:	mov	r1, r9
   1f9d0:	rsb	r6, fp, r6
   1f9d4:	add	r5, r5, fp
   1f9d8:	add	r4, r4, fp
   1f9dc:	beq	1fa28 <__assert_fail@plt+0xd354>
   1f9e0:	ldr	r3, [sp]
   1f9e4:	mov	r0, r5
   1f9e8:	cmp	r6, r3
   1f9ec:	rsb	r6, r3, r6
   1f9f0:	bls	1fa64 <__assert_fail@plt+0xd390>
   1f9f4:	cmp	r9, #0
   1f9f8:	beq	1fa08 <__assert_fail@plt+0xd334>
   1f9fc:	bl	1229c <strcpy@plt>
   1fa00:	ldr	ip, [sp, #12]
   1fa04:	add	r5, r5, ip
   1fa08:	mov	r0, r5
   1fa0c:	ldr	r1, [sp, #8]
   1fa10:	bl	1229c <strcpy@plt>
   1fa14:	ldr	r3, [r8, #20]
   1fa18:	ldr	ip, [sp, #4]
   1fa1c:	add	r4, r4, r3
   1fa20:	rsb	r7, r3, r7
   1fa24:	add	r5, r5, ip
   1fa28:	ldrb	r3, [r4]
   1fa2c:	cmp	r3, #0
   1fa30:	beq	1faa0 <__assert_fail@plt+0xd3cc>
   1fa34:	ldr	r1, [r8, #24]
   1fa38:	mov	r0, r4
   1fa3c:	bl	23fe0 <__assert_fail@plt+0x1190c>
   1fa40:	mov	r1, r4
   1fa44:	subs	sl, r0, #0
   1fa48:	mov	r0, r5
   1fa4c:	rsb	fp, r4, sl
   1fa50:	moveq	fp, r7
   1fa54:	cmp	r6, fp
   1fa58:	rsb	r7, fp, r7
   1fa5c:	mov	r2, fp
   1fa60:	bhi	1f9c4 <__assert_fail@plt+0xd2f0>
   1fa64:	ldrb	r3, [r4]
   1fa68:	cmp	r3, #0
   1fa6c:	beq	1faa0 <__assert_fail@plt+0xd3cc>
   1fa70:	mov	r2, #5
   1fa74:	movw	r1, #14268	; 0x37bc
   1fa78:	mov	r0, #0
   1fa7c:	movt	r1, #3
   1fa80:	bl	1217c <dcgettext@plt>
   1fa84:	mov	r1, #0
   1fa88:	mov	r2, r0
   1fa8c:	mov	r0, #1
   1fa90:	bl	122cc <error@plt>
   1fa94:	ldr	ip, [sp, #16]
   1fa98:	ldr	r2, [ip]
   1fa9c:	b	1faa4 <__assert_fail@plt+0xd3d0>
   1faa0:	ldr	r2, [sp, #20]
   1faa4:	mov	r3, r5
   1faa8:	mov	ip, #0
   1faac:	strb	ip, [r3], #1
   1fab0:	mov	r0, r8
   1fab4:	str	ip, [sp, #72]	; 0x48
   1fab8:	rsb	r3, r2, r3
   1fabc:	str	ip, [sp, #76]	; 0x4c
   1fac0:	ldr	ip, [sp, #28]
   1fac4:	ldr	r1, [sp, #24]
   1fac8:	str	ip, [sp, #80]	; 0x50
   1facc:	add	sp, sp, #36	; 0x24
   1fad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fad4:	b	1f6bc <__assert_fail@plt+0xcfe8>
   1fad8:	add	r0, r0, #1
   1fadc:	bl	28e14 <__assert_fail@plt+0x16740>
   1fae0:	ldr	ip, [sp, #16]
   1fae4:	str	r0, [sp, #20]
   1fae8:	str	r0, [ip]
   1faec:	b	1f9ac <__assert_fail@plt+0xd2d8>
   1faf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1faf4:	sub	sp, sp, #20
   1faf8:	mov	ip, #0
   1fafc:	mov	r5, r1
   1fb00:	mov	r3, ip
   1fb04:	movw	r2, #14140	; 0x373c
   1fb08:	str	ip, [sp]
   1fb0c:	movt	r2, #3
   1fb10:	str	ip, [sp, #4]
   1fb14:	mov	sl, r0
   1fb18:	str	ip, [sp, #8]
   1fb1c:	bl	1f6bc <__assert_fail@plt+0xcfe8>
   1fb20:	ldr	r3, [r5]
   1fb24:	cmp	r3, #0
   1fb28:	beq	1fd60 <__assert_fail@plt+0xd68c>
   1fb2c:	ldr	r2, [r5, #4]
   1fb30:	sub	r3, r3, #-1073741823	; 0xc0000001
   1fb34:	lsl	r0, r3, #2
   1fb38:	ldr	r8, [r2, r3, lsl #2]
   1fb3c:	cmp	r8, #0
   1fb40:	bne	1fd98 <__assert_fail@plt+0xd6c4>
   1fb44:	add	r0, r0, #8
   1fb48:	mov	r9, r8
   1fb4c:	bl	28e14 <__assert_fail@plt+0x16740>
   1fb50:	ldr	r6, [r5]
   1fb54:	ldr	ip, [sl, #28]
   1fb58:	mov	r7, r0
   1fb5c:	mov	r0, r6
   1fb60:	cmp	ip, #0
   1fb64:	beq	1fb88 <__assert_fail@plt+0xd4b4>
   1fb68:	lsl	r1, ip, #2
   1fb6c:	mov	r2, #0
   1fb70:	ldr	r3, [r5, #4]
   1fb74:	ldr	r3, [r3, r2]
   1fb78:	str	r3, [r7, r2]
   1fb7c:	add	r2, r2, #4
   1fb80:	cmp	r2, r1
   1fb84:	bne	1fb70 <__assert_fail@plt+0xd49c>
   1fb88:	add	r2, r8, ip
   1fb8c:	mov	r4, ip
   1fb90:	cmp	r2, r0
   1fb94:	bcs	1fbd8 <__assert_fail@plt+0xd504>
   1fb98:	cmp	r6, ip
   1fb9c:	bls	1fbd8 <__assert_fail@plt+0xd504>
   1fba0:	rsb	lr, r2, ip
   1fba4:	lsl	r2, r2, #2
   1fba8:	add	lr, r7, lr, lsl #2
   1fbac:	b	1fbbc <__assert_fail@plt+0xd4e8>
   1fbb0:	cmp	r6, r4
   1fbb4:	add	r2, r2, #4
   1fbb8:	bls	1fbd8 <__assert_fail@plt+0xd504>
   1fbbc:	ldr	r3, [r5, #4]
   1fbc0:	add	r4, r4, #1
   1fbc4:	add	r1, r8, r4
   1fbc8:	cmp	r0, r1
   1fbcc:	ldr	r3, [r3, r2]
   1fbd0:	str	r3, [lr, r2]
   1fbd4:	bhi	1fbb0 <__assert_fail@plt+0xd4dc>
   1fbd8:	cmp	r4, ip
   1fbdc:	bcc	1fd7c <__assert_fail@plt+0xd6a8>
   1fbe0:	str	r9, [r7, r4, lsl #2]
   1fbe4:	mov	r0, sl
   1fbe8:	ldr	ip, [sl, #32]
   1fbec:	mov	r2, r4
   1fbf0:	ldr	r1, [r5, #24]
   1fbf4:	mov	r3, r7
   1fbf8:	blx	ip
   1fbfc:	subs	fp, r0, #0
   1fc00:	bne	1fce0 <__assert_fail@plt+0xd60c>
   1fc04:	ldr	r3, [sl, #28]
   1fc08:	add	r2, r3, #1
   1fc0c:	cmp	r6, r2
   1fc10:	bhi	1fc7c <__assert_fail@plt+0xd5a8>
   1fc14:	mov	r2, #5
   1fc18:	movw	r1, #14392	; 0x3838
   1fc1c:	movt	r1, #3
   1fc20:	bl	1217c <dcgettext@plt>
   1fc24:	mov	r1, fp
   1fc28:	mov	r2, r0
   1fc2c:	mov	r0, #1
   1fc30:	bl	122cc <error@plt>
   1fc34:	ldr	ip, [sl, #28]
   1fc38:	ldr	r0, [r5]
   1fc3c:	add	r2, r8, #1
   1fc40:	rsb	r3, ip, r0
   1fc44:	cmp	r2, r3
   1fc48:	bcc	1fb60 <__assert_fail@plt+0xd48c>
   1fc4c:	mov	r0, r7
   1fc50:	bl	120c8 <free@plt>
   1fc54:	ldr	r1, [sl, #28]
   1fc58:	ldr	r2, [r5, #20]
   1fc5c:	mov	r0, #0
   1fc60:	mvn	r3, #0
   1fc64:	str	r0, [r5, #28]
   1fc68:	str	r1, [r5]
   1fc6c:	str	r2, [r5, #16]
   1fc70:	str	r3, [r5, #32]
   1fc74:	add	sp, sp, #20
   1fc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc7c:	ldr	r1, [r5, #40]	; 0x28
   1fc80:	cmp	r6, r1
   1fc84:	bcc	1fc94 <__assert_fail@plt+0xd5c0>
   1fc88:	cmp	r1, #0
   1fc8c:	movne	ip, r3
   1fc90:	bne	1fc9c <__assert_fail@plt+0xd5c8>
   1fc94:	str	r6, [r5, #40]	; 0x28
   1fc98:	ldr	ip, [sl, #28]
   1fc9c:	ldr	r1, [r5, #36]	; 0x24
   1fca0:	cmp	r1, #0
   1fca4:	beq	1fd58 <__assert_fail@plt+0xd684>
   1fca8:	ldr	r0, [r5, #40]	; 0x28
   1fcac:	cmp	r1, r0
   1fcb0:	bcs	1fd58 <__assert_fail@plt+0xd684>
   1fcb4:	rsb	r1, r1, r0
   1fcb8:	lsrs	r1, r1, #1
   1fcbc:	rsbne	r6, r1, r6
   1fcc0:	subeq	r6, r6, #1
   1fcc4:	cmp	r3, #0
   1fcc8:	beq	1fcd4 <__assert_fail@plt+0xd600>
   1fccc:	cmp	r6, r2
   1fcd0:	movcc	r6, r2
   1fcd4:	cmp	r6, #0
   1fcd8:	moveq	r6, #1
   1fcdc:	b	1fc38 <__assert_fail@plt+0xd564>
   1fce0:	ldr	r2, [r5, #36]	; 0x24
   1fce4:	ldr	r3, [sl, #28]
   1fce8:	cmp	r6, r2
   1fcec:	strhi	r6, [r5, #36]	; 0x24
   1fcf0:	movhi	r2, r6
   1fcf4:	ldrhi	ip, [sl, #28]
   1fcf8:	movls	ip, r3
   1fcfc:	cmp	r2, #0
   1fd00:	beq	1fd48 <__assert_fail@plt+0xd674>
   1fd04:	ldr	r1, [r5, #40]	; 0x28
   1fd08:	cmp	r1, r2
   1fd0c:	bls	1fd48 <__assert_fail@plt+0xd674>
   1fd10:	rsb	r2, r2, r1
   1fd14:	lsrs	r2, r2, #1
   1fd18:	addne	r6, r6, r2
   1fd1c:	beq	1fd50 <__assert_fail@plt+0xd67c>
   1fd20:	cmp	r3, #0
   1fd24:	beq	1fd34 <__assert_fail@plt+0xd660>
   1fd28:	add	r3, r3, #1
   1fd2c:	cmp	r6, r3
   1fd30:	movcc	r6, r3
   1fd34:	cmp	r6, #0
   1fd38:	add	r8, r4, r8
   1fd3c:	rsb	r8, ip, r8
   1fd40:	moveq	r6, #1
   1fd44:	b	1fc38 <__assert_fail@plt+0xd564>
   1fd48:	cmn	r6, #1
   1fd4c:	beq	1fd20 <__assert_fail@plt+0xd64c>
   1fd50:	add	r6, r6, #1
   1fd54:	b	1fd20 <__assert_fail@plt+0xd64c>
   1fd58:	lsr	r6, r6, #1
   1fd5c:	b	1fcc4 <__assert_fail@plt+0xd5f0>
   1fd60:	movw	r0, #14288	; 0x37d0
   1fd64:	movw	r1, #14172	; 0x375c
   1fd68:	movt	r0, #3
   1fd6c:	movt	r1, #3
   1fd70:	movw	r2, #278	; 0x116
   1fd74:	ldr	r3, [pc, #56]	; 1fdb4 <__assert_fail@plt+0xd6e0>
   1fd78:	bl	126d4 <__assert_fail@plt>
   1fd7c:	movw	r0, #14360	; 0x3818
   1fd80:	movw	r1, #14172	; 0x375c
   1fd84:	movt	r0, #3
   1fd88:	movt	r1, #3
   1fd8c:	movw	r2, #259	; 0x103
   1fd90:	ldr	r3, [pc, #32]	; 1fdb8 <__assert_fail@plt+0xd6e4>
   1fd94:	bl	126d4 <__assert_fail@plt>
   1fd98:	movw	r0, #14308	; 0x37e4
   1fd9c:	movw	r1, #14172	; 0x375c
   1fda0:	movt	r0, #3
   1fda4:	movt	r1, #3
   1fda8:	movw	r2, #279	; 0x117
   1fdac:	ldr	r3, [pc]	; 1fdb4 <__assert_fail@plt+0xd6e0>
   1fdb0:	bl	126d4 <__assert_fail@plt>
   1fdb4:	andeq	r3, r3, r0, asr #13
   1fdb8:	andeq	r3, r3, ip, asr #13
   1fdbc:	push	{r3, lr}
   1fdc0:	mov	r0, #0
   1fdc4:	bl	12194 <sysconf@plt>
   1fdc8:	cmp	r0, #0
   1fdcc:	mvnle	r0, #-2147483648	; 0x80000000
   1fdd0:	pop	{r3, pc}
   1fdd4:	push	{r3, r4, r5, lr}
   1fdd8:	movw	r3, #26004	; 0x6594
   1fddc:	movt	r3, #4
   1fde0:	ldr	r5, [r3]
   1fde4:	ldr	r3, [r5]
   1fde8:	cmp	r3, #0
   1fdec:	beq	1fe18 <__assert_fail@plt+0xd744>
   1fdf0:	mov	r4, #0
   1fdf4:	mov	r0, r3
   1fdf8:	bl	123d4 <strlen@plt>
   1fdfc:	ldr	r3, [r5, #4]!
   1fe00:	cmp	r3, #0
   1fe04:	add	r0, r0, #1
   1fe08:	add	r4, r4, r0
   1fe0c:	bne	1fdf4 <__assert_fail@plt+0xd720>
   1fe10:	mov	r0, r4
   1fe14:	pop	{r3, r4, r5, pc}
   1fe18:	mov	r4, r3
   1fe1c:	b	1fe10 <__assert_fail@plt+0xd73c>
   1fe20:	push	{r4, r5, r6, lr}
   1fe24:	mov	r4, r0
   1fe28:	mov	r6, r1
   1fe2c:	bl	1fdd4 <__assert_fail@plt+0xd700>
   1fe30:	mov	r2, #4096	; 0x1000
   1fe34:	str	r2, [r4, #8]
   1fe38:	mov	r5, r0
   1fe3c:	mov	r0, #0
   1fe40:	bl	12194 <sysconf@plt>
   1fe44:	mov	r2, #0
   1fe48:	str	r2, [r4]
   1fe4c:	cmp	r0, #0
   1fe50:	movgt	r3, r0
   1fe54:	mvnle	r3, #-2147483648	; 0x80000000
   1fe58:	cmp	r5, r3
   1fe5c:	str	r3, [r4, #4]
   1fe60:	bhi	1fec4 <__assert_fail@plt+0xd7f0>
   1fe64:	add	r1, r5, r6
   1fe68:	cmp	r1, r3
   1fe6c:	bcc	1fe78 <__assert_fail@plt+0xd7a4>
   1fe70:	mov	r0, #2
   1fe74:	pop	{r4, r5, r6, pc}
   1fe78:	rsb	r3, r5, r3
   1fe7c:	rsb	r6, r6, r3
   1fe80:	str	r6, [r4, #4]
   1fe84:	lsr	r3, r6, #2
   1fe88:	sub	r3, r3, #2
   1fe8c:	str	r3, [r4, #16]
   1fe90:	cmp	r3, r2
   1fe94:	beq	1fecc <__assert_fail@plt+0xd7f8>
   1fe98:	str	r2, [r4, #20]
   1fe9c:	mov	r0, r2
   1fea0:	str	r2, [r4, #24]
   1fea4:	movw	r1, #62976	; 0xf600
   1fea8:	str	r2, [r4, #28]
   1feac:	movt	r1, #1
   1feb0:	str	r2, [r4, #36]	; 0x24
   1feb4:	str	r2, [r4, #40]	; 0x28
   1feb8:	str	r6, [r4, #12]
   1febc:	str	r1, [r4, #32]
   1fec0:	pop	{r4, r5, r6, pc}
   1fec4:	mov	r0, #1
   1fec8:	pop	{r4, r5, r6, pc}
   1fecc:	movw	r0, #14444	; 0x386c
   1fed0:	movw	r1, #14172	; 0x375c
   1fed4:	movt	r0, #3
   1fed8:	movt	r1, #3
   1fedc:	movw	r2, #535	; 0x217
   1fee0:	ldr	r3, [pc]	; 1fee8 <__assert_fail@plt+0xd814>
   1fee4:	bl	126d4 <__assert_fail@plt>
   1fee8:	ldrdeq	r3, [r3], -r8
   1feec:	ldr	r3, [r0, #4]
   1fef0:	cmp	r3, #131072	; 0x20000
   1fef4:	bcc	1ff04 <__assert_fail@plt+0xd830>
   1fef8:	ldr	r3, [r0, #8]
   1fefc:	cmp	r3, #131072	; 0x20000
   1ff00:	movls	r3, #131072	; 0x20000
   1ff04:	str	r3, [r0, #12]
   1ff08:	bx	lr
   1ff0c:	ldr	r0, [r0, #12]
   1ff10:	movw	r3, #63487	; 0xf7ff
   1ff14:	movt	r3, #32767	; 0x7fff
   1ff18:	cmp	r0, r3
   1ff1c:	push	{r4, r5, r6, lr}
   1ff20:	mov	r5, #0
   1ff24:	mov	r4, r1
   1ff28:	mov	r6, r2
   1ff2c:	str	r5, [r1]
   1ff30:	str	r5, [r1, #16]
   1ff34:	str	r5, [r1, #4]
   1ff38:	str	r5, [r1, #8]
   1ff3c:	str	r5, [r1, #36]	; 0x24
   1ff40:	str	r5, [r1, #40]	; 0x28
   1ff44:	bhi	1ff70 <__assert_fail@plt+0xd89c>
   1ff48:	add	r0, r0, #1
   1ff4c:	bl	28e14 <__assert_fail@plt+0x16740>
   1ff50:	mvn	r3, #0
   1ff54:	str	r5, [r4, #20]
   1ff58:	str	r5, [r4, #16]
   1ff5c:	str	r5, [r4, #28]
   1ff60:	str	r6, [r4, #24]
   1ff64:	str	r3, [r4, #32]
   1ff68:	str	r0, [r4, #12]
   1ff6c:	pop	{r4, r5, r6, pc}
   1ff70:	movw	r0, #14468	; 0x3884
   1ff74:	movw	r1, #14172	; 0x375c
   1ff78:	movt	r0, #3
   1ff7c:	movt	r1, #3
   1ff80:	movw	r2, #589	; 0x24d
   1ff84:	ldr	r3, [pc]	; 1ff8c <__assert_fail@plt+0xd8b8>
   1ff88:	bl	126d4 <__assert_fail@plt>
   1ff8c:	andeq	r3, r3, ip, ror #13
   1ff90:	ldr	r0, [r0, #28]
   1ff94:	mov	ip, #0
   1ff98:	ldr	r2, [r1, #20]
   1ff9c:	mvn	r3, #0
   1ffa0:	str	ip, [r1, #28]
   1ffa4:	str	r0, [r1]
   1ffa8:	str	r2, [r1, #16]
   1ffac:	str	r3, [r1, #32]
   1ffb0:	bx	lr
   1ffb4:	ldr	r3, [r0]
   1ffb8:	push	{r4, r5, r6, lr}
   1ffbc:	cmp	r3, #0
   1ffc0:	beq	20028 <__assert_fail@plt+0xd954>
   1ffc4:	mov	r4, #0
   1ffc8:	mov	r6, r0
   1ffcc:	mov	r5, r4
   1ffd0:	mov	r0, r3
   1ffd4:	add	r4, r4, #1
   1ffd8:	bl	123d4 <strlen@plt>
   1ffdc:	ldr	r3, [r6, #4]!
   1ffe0:	cmp	r3, #0
   1ffe4:	add	r5, r5, r0
   1ffe8:	bne	1ffd0 <__assert_fail@plt+0xd8fc>
   1ffec:	mov	r1, r4
   1fff0:	movw	r0, #14508	; 0x38ac
   1fff4:	movt	r0, #3
   1fff8:	bl	1f608 <__assert_fail@plt+0xcf34>
   1fffc:	cmp	r0, #0
   20000:	beq	2000c <__assert_fail@plt+0xd938>
   20004:	mov	r0, #1
   20008:	pop	{r4, r5, r6, pc}
   2000c:	mov	r1, r5
   20010:	movw	r0, #14548	; 0x38d4
   20014:	movt	r0, #3
   20018:	bl	1f608 <__assert_fail@plt+0xcf34>
   2001c:	adds	r0, r0, #0
   20020:	movne	r0, #1
   20024:	pop	{r4, r5, r6, pc}
   20028:	mov	r4, r3
   2002c:	mov	r5, r3
   20030:	b	1ffec <__assert_fail@plt+0xd918>
   20034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20038:	movw	r4, #26008	; 0x6598
   2003c:	movt	r4, #4
   20040:	sub	sp, sp, #8192	; 0x2000
   20044:	sub	sp, sp, #28
   20048:	cmp	r2, #0
   2004c:	ldr	r2, [r4]
   20050:	mov	r6, r3
   20054:	add	r3, sp, #8192	; 0x2000
   20058:	mov	r9, r1
   2005c:	mov	sl, r0
   20060:	ldr	r5, [r3, #64]	; 0x40
   20064:	str	r2, [r3, #20]
   20068:	beq	200bc <__assert_fail@plt+0xd9e8>
   2006c:	add	r7, sp, #20
   20070:	str	r1, [sp]
   20074:	mov	r2, r5
   20078:	mov	r1, #8192	; 0x2000
   2007c:	mvn	r3, #0
   20080:	mov	r0, r7
   20084:	bl	282c0 <__assert_fail@plt+0x15bec>
   20088:	cmp	r0, #8192	; 0x2000
   2008c:	mov	r8, r0
   20090:	bcs	200f4 <__assert_fail@plt+0xda20>
   20094:	mov	r1, r0
   20098:	mov	r0, r7
   2009c:	bl	20c8c <__assert_fail@plt+0xe5b8>
   200a0:	mov	r0, sl
   200a4:	mov	r2, r6
   200a8:	mov	r3, r7
   200ac:	mov	r1, #1
   200b0:	bl	124d0 <__fprintf_chk@plt>
   200b4:	mov	r5, r0
   200b8:	b	200d0 <__assert_fail@plt+0xd9fc>
   200bc:	mov	r3, r5
   200c0:	mov	r2, r6
   200c4:	mov	r1, #1
   200c8:	bl	124d0 <__fprintf_chk@plt>
   200cc:	mov	r5, r0
   200d0:	add	r3, sp, #8192	; 0x2000
   200d4:	mov	r0, r5
   200d8:	ldr	r2, [r3, #20]
   200dc:	ldr	r3, [r4]
   200e0:	cmp	r2, r3
   200e4:	bne	20154 <__assert_fail@plt+0xda80>
   200e8:	add	sp, sp, #8192	; 0x2000
   200ec:	add	sp, sp, #28
   200f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200f4:	add	r1, r0, #1
   200f8:	str	r1, [sp, #12]
   200fc:	mov	r0, r1
   20100:	bl	28e14 <__assert_fail@plt+0x16740>
   20104:	mov	r2, r5
   20108:	mvn	r3, #0
   2010c:	ldr	r1, [sp, #12]
   20110:	str	r9, [sp]
   20114:	mov	fp, r0
   20118:	bl	282c0 <__assert_fail@plt+0x15bec>
   2011c:	mov	r1, r8
   20120:	mov	r0, fp
   20124:	bl	20c8c <__assert_fail@plt+0xe5b8>
   20128:	mov	r0, sl
   2012c:	mov	r2, r6
   20130:	mov	r3, fp
   20134:	mov	r1, #1
   20138:	bl	124d0 <__fprintf_chk@plt>
   2013c:	cmp	fp, r7
   20140:	mov	r5, r0
   20144:	beq	200d0 <__assert_fail@plt+0xd9fc>
   20148:	mov	r0, fp
   2014c:	bl	120c8 <free@plt>
   20150:	b	200d0 <__assert_fail@plt+0xd9fc>
   20154:	bl	12188 <__stack_chk_fail@plt>
   20158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2015c:	mov	r4, #0
   20160:	movw	r7, #25768	; 0x64a8
   20164:	sub	sp, sp, #12
   20168:	movt	r7, #4
   2016c:	mov	r8, r0
   20170:	mov	sl, r4
   20174:	mov	r5, r4
   20178:	ldr	r9, [r7, r4]
   2017c:	mov	r1, r8
   20180:	movw	r6, #25768	; 0x64a8
   20184:	add	r4, r4, #12
   20188:	movt	r6, #4
   2018c:	mov	r0, r9
   20190:	bl	1205c <strcmp@plt>
   20194:	cmp	r0, #0
   20198:	mov	r0, r9
   2019c:	beq	20270 <__assert_fail@plt+0xdb9c>
   201a0:	bl	287dc <__assert_fail@plt+0x16108>
   201a4:	add	r5, r5, #1
   201a8:	bl	123d4 <strlen@plt>
   201ac:	cmp	r5, #13
   201b0:	add	r0, r0, #2
   201b4:	add	sl, sl, r0
   201b8:	bne	20178 <__assert_fail@plt+0xdaa4>
   201bc:	add	r0, sl, #1
   201c0:	mov	r9, #0
   201c4:	bl	28e14 <__assert_fail@plt+0x16740>
   201c8:	movw	sl, #14588	; 0x38fc
   201cc:	mov	r5, #1
   201d0:	movt	sl, #3
   201d4:	mov	fp, r0
   201d8:	mov	r6, r0
   201dc:	b	201e8 <__assert_fail@plt+0xdb14>
   201e0:	add	r5, r5, #1
   201e4:	add	r9, r9, #12
   201e8:	cmp	r5, #1
   201ec:	mov	r4, r6
   201f0:	beq	20284 <__assert_fail@plt+0xdbb0>
   201f4:	ldrh	r2, [sl]
   201f8:	ldrb	r3, [sl, #2]
   201fc:	ldr	r0, [r7, r9]
   20200:	strh	r2, [r6]
   20204:	strb	r3, [r4, #2]!
   20208:	bl	287dc <__assert_fail@plt+0x16108>
   2020c:	movw	r1, #15064	; 0x3ad8
   20210:	movt	r1, #3
   20214:	mov	r2, r0
   20218:	mov	r0, r4
   2021c:	bl	1259c <sprintf@plt>
   20220:	cmp	r5, #13
   20224:	add	r6, r4, r0
   20228:	bne	201e0 <__assert_fail@plt+0xdb0c>
   2022c:	mov	r2, #5
   20230:	movw	r1, #14592	; 0x3900
   20234:	mov	r0, #0
   20238:	movt	r1, #3
   2023c:	bl	1217c <dcgettext@plt>
   20240:	mov	r4, r0
   20244:	mov	r0, r8
   20248:	bl	287dc <__assert_fail@plt+0x16108>
   2024c:	mov	r2, r4
   20250:	str	fp, [sp]
   20254:	mov	r1, #0
   20258:	mov	r3, r0
   2025c:	mov	r0, #1
   20260:	bl	122cc <error@plt>
   20264:	mvn	r0, #0
   20268:	add	sp, sp, #12
   2026c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20270:	add	r5, r5, r5, lsl #1
   20274:	add	r6, r6, r5, lsl #2
   20278:	ldr	r0, [r6, #8]
   2027c:	add	sp, sp, #12
   20280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20284:	ldr	r0, [r7, r9]
   20288:	bl	287dc <__assert_fail@plt+0x16108>
   2028c:	movw	r1, #15064	; 0x3ad8
   20290:	movt	r1, #3
   20294:	mov	r2, r0
   20298:	mov	r0, r6
   2029c:	bl	1259c <sprintf@plt>
   202a0:	add	r6, r6, r0
   202a4:	b	201e0 <__assert_fail@plt+0xdb0c>
   202a8:	cmp	r0, #12
   202ac:	addls	r0, r0, r0, lsl #1
   202b0:	movwls	r3, #25768	; 0x64a8
   202b4:	movtls	r3, #4
   202b8:	ldrls	r0, [r3, r0, lsl #2]
   202bc:	movhi	r0, #0
   202c0:	bx	lr
   202c4:	cmp	r0, #12
   202c8:	addls	r0, r0, r0, lsl #1
   202cc:	movwls	r3, #25768	; 0x64a8
   202d0:	movtls	r3, #4
   202d4:	addls	r3, r3, r0, lsl #2
   202d8:	ldrls	r0, [r3, #8]
   202dc:	mvnhi	r0, #0
   202e0:	bx	lr
   202e4:	cmp	r0, #12
   202e8:	addls	r0, r0, r0, lsl #1
   202ec:	movwls	r3, #25768	; 0x64a8
   202f0:	movtls	r3, #4
   202f4:	addls	r3, r3, r0, lsl #2
   202f8:	ldrls	r0, [r3, #4]
   202fc:	movhi	r0, #0
   20300:	bx	lr
   20304:	cmp	r0, #12
   20308:	bhi	20358 <__assert_fail@plt+0xdc84>
   2030c:	add	r3, r0, r0, lsl #1
   20310:	movw	r2, #25768	; 0x64a8
   20314:	movt	r2, #4
   20318:	cmp	r0, #0
   2031c:	add	r3, r2, r3, lsl #2
   20320:	ldr	ip, [r3, #8]
   20324:	beq	20358 <__assert_fail@plt+0xdc84>
   20328:	ldr	r3, [r2, #8]
   2032c:	cmp	r3, ip
   20330:	movne	r3, #0
   20334:	bne	20348 <__assert_fail@plt+0xdc74>
   20338:	b	20368 <__assert_fail@plt+0xdc94>
   2033c:	ldr	r1, [r2, #8]
   20340:	cmp	r1, ip
   20344:	beq	20360 <__assert_fail@plt+0xdc8c>
   20348:	add	r3, r3, #1
   2034c:	add	r2, r2, #12
   20350:	cmp	r3, r0
   20354:	bne	2033c <__assert_fail@plt+0xdc68>
   20358:	mvn	r0, #0
   2035c:	bx	lr
   20360:	mov	r0, r3
   20364:	bx	lr
   20368:	mov	r0, #0
   2036c:	bx	lr
   20370:	push	{r4, r5, r6, r7, lr}
   20374:	movw	r4, #26008	; 0x6598
   20378:	movt	r4, #4
   2037c:	sub	sp, sp, #20
   20380:	mov	r5, r0
   20384:	add	r0, sp, #4
   20388:	ldr	r3, [r4]
   2038c:	mov	r6, r1
   20390:	mov	r7, r2
   20394:	str	r3, [sp, #12]
   20398:	bl	287f4 <__assert_fail@plt+0x16120>
   2039c:	cmp	r0, #0
   203a0:	bne	20424 <__assert_fail@plt+0xdd50>
   203a4:	mov	r0, r5
   203a8:	bl	28850 <__assert_fail@plt+0x1617c>
   203ac:	subs	r5, r0, #0
   203b0:	bne	20414 <__assert_fail@plt+0xdd40>
   203b4:	mov	r0, r7
   203b8:	blx	r6
   203bc:	subs	r6, r0, #0
   203c0:	blt	20408 <__assert_fail@plt+0xdd34>
   203c4:	add	r0, sp, #4
   203c8:	bl	28850 <__assert_fail@plt+0x1617c>
   203cc:	cmp	r0, #0
   203d0:	bne	20414 <__assert_fail@plt+0xdd40>
   203d4:	add	r0, sp, #4
   203d8:	bl	2886c <__assert_fail@plt+0x16198>
   203dc:	cmp	r5, #0
   203e0:	beq	203ec <__assert_fail@plt+0xdd18>
   203e4:	bl	12434 <__errno_location@plt>
   203e8:	str	r5, [r0]
   203ec:	ldr	r2, [sp, #12]
   203f0:	mov	r0, r6
   203f4:	ldr	r3, [r4]
   203f8:	cmp	r2, r3
   203fc:	bne	20420 <__assert_fail@plt+0xdd4c>
   20400:	add	sp, sp, #20
   20404:	pop	{r4, r5, r6, r7, pc}
   20408:	bl	12434 <__errno_location@plt>
   2040c:	ldr	r5, [r0]
   20410:	b	203c4 <__assert_fail@plt+0xdcf0>
   20414:	bl	12434 <__errno_location@plt>
   20418:	ldr	r0, [r0]
   2041c:	bl	25174 <__assert_fail@plt+0x12aa0>
   20420:	bl	12188 <__stack_chk_fail@plt>
   20424:	bl	12434 <__errno_location@plt>
   20428:	ldr	r0, [r0]
   2042c:	bl	25138 <__assert_fail@plt+0x12a64>
   20430:	push	{r4, r5, r6, r7, lr}
   20434:	movw	r4, #26008	; 0x6598
   20438:	movt	r4, #4
   2043c:	sub	sp, sp, #20
   20440:	cmn	r0, #100	; 0x64
   20444:	mov	r5, r0
   20448:	ldr	r3, [r4]
   2044c:	mov	r6, r1
   20450:	mov	r7, r2
   20454:	str	r3, [sp, #12]
   20458:	beq	204f8 <__assert_fail@plt+0xde24>
   2045c:	add	r0, sp, #4
   20460:	bl	287f4 <__assert_fail@plt+0x16120>
   20464:	cmp	r0, #0
   20468:	bne	20518 <__assert_fail@plt+0xde44>
   2046c:	mov	r0, r5
   20470:	bl	125cc <fchdir@plt>
   20474:	subs	r5, r0, #0
   20478:	bne	204d8 <__assert_fail@plt+0xde04>
   2047c:	mov	r0, r7
   20480:	blx	r6
   20484:	subs	r6, r0, #0
   20488:	blt	20508 <__assert_fail@plt+0xde34>
   2048c:	add	r0, sp, #4
   20490:	bl	28850 <__assert_fail@plt+0x1617c>
   20494:	cmp	r0, #0
   20498:	bne	20524 <__assert_fail@plt+0xde50>
   2049c:	add	r0, sp, #4
   204a0:	bl	2886c <__assert_fail@plt+0x16198>
   204a4:	cmp	r5, #0
   204a8:	moveq	r3, r6
   204ac:	beq	204bc <__assert_fail@plt+0xdde8>
   204b0:	bl	12434 <__errno_location@plt>
   204b4:	mov	r3, r6
   204b8:	str	r5, [r0]
   204bc:	ldr	r2, [sp, #12]
   204c0:	mov	r0, r3
   204c4:	ldr	r3, [r4]
   204c8:	cmp	r2, r3
   204cc:	bne	20514 <__assert_fail@plt+0xde40>
   204d0:	add	sp, sp, #20
   204d4:	pop	{r4, r5, r6, r7, pc}
   204d8:	bl	12434 <__errno_location@plt>
   204dc:	ldr	r6, [r0]
   204e0:	mov	r5, r0
   204e4:	add	r0, sp, #4
   204e8:	bl	2886c <__assert_fail@plt+0x16198>
   204ec:	mvn	r3, #0
   204f0:	str	r6, [r5]
   204f4:	b	204bc <__assert_fail@plt+0xdde8>
   204f8:	mov	r0, r2
   204fc:	blx	r1
   20500:	mov	r3, r0
   20504:	b	204bc <__assert_fail@plt+0xdde8>
   20508:	bl	12434 <__errno_location@plt>
   2050c:	ldr	r5, [r0]
   20510:	b	2048c <__assert_fail@plt+0xddb8>
   20514:	bl	12188 <__stack_chk_fail@plt>
   20518:	bl	12434 <__errno_location@plt>
   2051c:	ldr	r0, [r0]
   20520:	bl	25138 <__assert_fail@plt+0x12a64>
   20524:	bl	12434 <__errno_location@plt>
   20528:	ldr	r0, [r0]
   2052c:	bl	25174 <__assert_fail@plt+0x12aa0>
   20530:	push	{r4, r5, r6, lr}
   20534:	movw	r0, #14804	; 0x39d4
   20538:	movt	r0, #3
   2053c:	bl	211d8 <__assert_fail@plt+0xeb04>
   20540:	subs	r5, r0, #0
   20544:	movne	r6, #0
   20548:	mvnne	r4, #0
   2054c:	beq	205b4 <__assert_fail@plt+0xdee0>
   20550:	mov	r0, r5
   20554:	bl	125a8 <readdir64@plt>
   20558:	mov	r1, #0
   2055c:	subs	r3, r0, #0
   20560:	add	r0, r3, #19
   20564:	beq	2059c <__assert_fail@plt+0xdec8>
   20568:	ldrb	r2, [r3, #19]
   2056c:	cmp	r2, #46	; 0x2e
   20570:	bne	20588 <__assert_fail@plt+0xdeb4>
   20574:	ldrb	r3, [r3, #20]
   20578:	cmp	r3, #0
   2057c:	beq	20550 <__assert_fail@plt+0xde7c>
   20580:	cmp	r3, #46	; 0x2e
   20584:	beq	20550 <__assert_fail@plt+0xde7c>
   20588:	bl	20ab4 <__assert_fail@plt+0xe3e0>
   2058c:	mov	r6, #1
   20590:	cmp	r4, r0
   20594:	movlt	r4, r0
   20598:	b	20550 <__assert_fail@plt+0xde7c>
   2059c:	mov	r0, r5
   205a0:	bl	12698 <closedir@plt>
   205a4:	cmp	r6, #0
   205a8:	beq	205b4 <__assert_fail@plt+0xdee0>
   205ac:	mov	r0, r4
   205b0:	pop	{r4, r5, r6, pc}
   205b4:	mvn	r0, #0
   205b8:	pop	{r4, r5, r6, pc}
   205bc:	push	{r4, r5, r6, lr}
   205c0:	mov	r4, r1
   205c4:	mov	r1, #1
   205c8:	mov	r6, r0
   205cc:	bl	2a078 <__assert_fail@plt+0x179a4>
   205d0:	ands	r5, r0, #1
   205d4:	movne	r5, #0
   205d8:	bne	20614 <__assert_fail@plt+0xdf40>
   205dc:	ldr	r1, [r4, #4]
   205e0:	add	r2, r4, #8
   205e4:	ldr	r0, [r4]
   205e8:	add	r1, r1, #1
   205ec:	lsl	r1, r1, #2
   205f0:	bl	1f4dc <__assert_fail@plt+0xce08>
   205f4:	cmp	r0, #0
   205f8:	strne	r0, [r4]
   205fc:	ldrne	r3, [r4, #4]
   20600:	mvneq	r5, #0
   20604:	strne	r6, [r0, r3, lsl #2]
   20608:	ldrne	r3, [r4, #4]
   2060c:	addne	r3, r3, #1
   20610:	strne	r3, [r4, #4]
   20614:	mov	r0, r5
   20618:	pop	{r4, r5, r6, pc}
   2061c:	push	{r3, r4, r5, lr}
   20620:	mov	r4, r1
   20624:	mov	r1, #1
   20628:	mov	r5, r0
   2062c:	bl	2a078 <__assert_fail@plt+0x179a4>
   20630:	ands	r0, r0, #1
   20634:	bne	20684 <__assert_fail@plt+0xdfb0>
   20638:	ldmib	r4, {r1, r3}
   2063c:	cmp	r1, r3
   20640:	bls	20678 <__assert_fail@plt+0xdfa4>
   20644:	ldr	r2, [r4]
   20648:	add	ip, r2, r3, lsl #2
   2064c:	ldr	r2, [r2, r3, lsl #2]
   20650:	cmp	r5, r2
   20654:	bgt	20668 <__assert_fail@plt+0xdf94>
   20658:	b	2068c <__assert_fail@plt+0xdfb8>
   2065c:	ldr	r2, [ip, #4]!
   20660:	cmp	r5, r2
   20664:	ble	2068c <__assert_fail@plt+0xdfb8>
   20668:	add	r3, r3, #1
   2066c:	str	r3, [r4, #8]
   20670:	cmp	r3, r1
   20674:	bcc	2065c <__assert_fail@plt+0xdf88>
   20678:	str	r5, [r4, #12]
   2067c:	mvn	r0, #0
   20680:	pop	{r3, r4, r5, pc}
   20684:	mov	r0, #0
   20688:	pop	{r3, r4, r5, pc}
   2068c:	cmp	r5, r2
   20690:	popeq	{r3, r4, r5, pc}
   20694:	b	20678 <__assert_fail@plt+0xdfa4>
   20698:	push	{r4, r5, r6, r7, lr}
   2069c:	movw	r6, #26008	; 0x6598
   206a0:	movt	r6, #4
   206a4:	sub	sp, sp, #28
   206a8:	mov	r0, #4
   206ac:	ldr	r3, [r6]
   206b0:	str	r3, [sp, #20]
   206b4:	bl	12194 <sysconf@plt>
   206b8:	mov	r1, sp
   206bc:	cmn	r0, #1
   206c0:	movne	r7, r0
   206c4:	mov	r0, #7
   206c8:	moveq	r7, #20
   206cc:	bl	121a0 <getrlimit64@plt>
   206d0:	cmp	r0, #0
   206d4:	movne	r0, r7
   206d8:	bne	206f8 <__assert_fail@plt+0xe024>
   206dc:	ldrd	r2, [sp]
   206e0:	mvn	r4, #0
   206e4:	mvn	r5, #0
   206e8:	cmp	r3, r5
   206ec:	cmpeq	r2, r4
   206f0:	moveq	r0, r7
   206f4:	movne	r0, r2
   206f8:	ldr	r1, [sp, #20]
   206fc:	ldr	r3, [r6]
   20700:	cmp	r1, r3
   20704:	bne	20710 <__assert_fail@plt+0xe03c>
   20708:	add	sp, sp, #28
   2070c:	pop	{r4, r5, r6, r7, pc}
   20710:	bl	12188 <__stack_chk_fail@plt>
   20714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20718:	movw	r3, #26008	; 0x6598
   2071c:	sub	sp, sp, #540	; 0x21c
   20720:	movt	r3, #4
   20724:	cmp	r0, #0
   20728:	mov	r7, r1
   2072c:	str	r3, [sp, #12]
   20730:	mov	r8, r2
   20734:	ldr	r3, [r3]
   20738:	str	r0, [sp, #8]
   2073c:	str	r3, [sp, #532]	; 0x214
   20740:	ble	20814 <__assert_fail@plt+0xe140>
   20744:	mov	r1, #0
   20748:	add	r4, sp, #20
   2074c:	mov	r6, r1
   20750:	mov	r5, #5
   20754:	str	r1, [sp, #4]
   20758:	ldr	r2, [sp, #8]
   2075c:	ldr	r3, [sp, #4]
   20760:	rsb	ip, r3, r2
   20764:	cmp	ip, #64	; 0x40
   20768:	movlt	fp, ip
   2076c:	movge	fp, #64	; 0x40
   20770:	cmp	fp, #0
   20774:	ble	20834 <__assert_fail@plt+0xe160>
   20778:	lsl	r0, fp, #3
   2077c:	mov	r2, r3
   20780:	mov	r3, #0
   20784:	add	r1, r4, r3
   20788:	strh	r5, [r1, #4]
   2078c:	strh	r6, [r1, #6]
   20790:	str	r2, [r4, r3]
   20794:	add	r3, r3, #8
   20798:	cmp	r3, r0
   2079c:	add	r2, r2, #1
   207a0:	bne	20784 <__assert_fail@plt+0xe0b0>
   207a4:	mov	r0, r4
   207a8:	mov	r1, fp
   207ac:	mov	r2, #0
   207b0:	mov	r3, #512	; 0x200
   207b4:	bl	12218 <__poll_chk@plt>
   207b8:	cmn	r0, #1
   207bc:	beq	20818 <__assert_fail@plt+0xe144>
   207c0:	mov	r9, #0
   207c4:	mov	sl, r9
   207c8:	add	r1, r4, r9
   207cc:	ldrsh	r1, [r1, #6]
   207d0:	cmp	r1, #32
   207d4:	beq	207ec <__assert_fail@plt+0xe118>
   207d8:	ldr	r0, [r4, r9]
   207dc:	mov	r1, r8
   207e0:	blx	r7
   207e4:	cmp	r0, #0
   207e8:	bne	20818 <__assert_fail@plt+0xe144>
   207ec:	add	sl, sl, #1
   207f0:	add	r9, r9, #8
   207f4:	cmp	sl, fp
   207f8:	bne	207c8 <__assert_fail@plt+0xe0f4>
   207fc:	ldr	r1, [sp, #4]
   20800:	ldr	r2, [sp, #8]
   20804:	add	r1, r1, fp
   20808:	str	r1, [sp, #4]
   2080c:	cmp	r2, r1
   20810:	bgt	20758 <__assert_fail@plt+0xe084>
   20814:	mov	r0, #0
   20818:	ldr	r1, [sp, #12]
   2081c:	ldr	r2, [sp, #532]	; 0x214
   20820:	ldr	r3, [r1]
   20824:	cmp	r2, r3
   20828:	bne	20854 <__assert_fail@plt+0xe180>
   2082c:	add	sp, sp, #540	; 0x21c
   20830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20834:	mov	r0, r4
   20838:	mov	r1, fp
   2083c:	mov	r2, #0
   20840:	mov	r3, #512	; 0x200
   20844:	bl	12218 <__poll_chk@plt>
   20848:	cmn	r0, #1
   2084c:	bne	207fc <__assert_fail@plt+0xe128>
   20850:	b	20818 <__assert_fail@plt+0xe144>
   20854:	bl	12188 <__stack_chk_fail@plt>
   20858:	push	{r4, lr}
   2085c:	movw	r4, #26008	; 0x6598
   20860:	movt	r4, #4
   20864:	sub	sp, sp, #16
   20868:	ldr	r3, [r4]
   2086c:	str	r3, [sp, #12]
   20870:	bl	20530 <__assert_fail@plt+0xde5c>
   20874:	cmp	r0, #0
   20878:	blt	208d0 <__assert_fail@plt+0xe1fc>
   2087c:	cmn	r0, #-2147483647	; 0x80000001
   20880:	mov	r2, sp
   20884:	addne	r0, r0, #1
   20888:	movw	r1, #1468	; 0x5bc
   2088c:	movt	r1, #2
   20890:	mov	r3, #0
   20894:	str	r3, [sp]
   20898:	str	r3, [sp, #8]
   2089c:	str	r3, [sp, #4]
   208a0:	bl	20714 <__assert_fail@plt+0xe040>
   208a4:	ldr	ip, [sp, #12]
   208a8:	movw	r3, #27944	; 0x6d28
   208ac:	ldr	r0, [r4]
   208b0:	movt	r3, #4
   208b4:	ldr	r1, [sp]
   208b8:	ldr	r2, [sp, #4]
   208bc:	cmp	ip, r0
   208c0:	stm	r3, {r1, r2}
   208c4:	bne	208d8 <__assert_fail@plt+0xe204>
   208c8:	add	sp, sp, #16
   208cc:	pop	{r4, pc}
   208d0:	bl	20698 <__assert_fail@plt+0xdfc4>
   208d4:	b	2087c <__assert_fail@plt+0xe1a8>
   208d8:	bl	12188 <__stack_chk_fail@plt>
   208dc:	push	{r1, r2, r3}
   208e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   208e4:	sub	sp, sp, #12
   208e8:	movw	r5, #26008	; 0x6598
   208ec:	movt	r5, #4
   208f0:	ldr	r6, [sp, #44]	; 0x2c
   208f4:	movw	r4, #27944	; 0x6d28
   208f8:	movt	r4, #4
   208fc:	ldr	r3, [r5]
   20900:	ands	r8, r6, #64	; 0x40
   20904:	mov	r9, r0
   20908:	ldrb	r7, [r4, #8]
   2090c:	str	r3, [sp, #4]
   20910:	addne	r3, sp, #48	; 0x30
   20914:	ldrne	r8, [sp, #48]	; 0x30
   20918:	strne	r3, [sp]
   2091c:	cmp	r7, #0
   20920:	beq	20978 <__assert_fail@plt+0xe2a4>
   20924:	orr	r1, r6, #524288	; 0x80000
   20928:	mov	r0, r9
   2092c:	mov	r2, r8
   20930:	bl	21448 <__assert_fail@plt+0xed74>
   20934:	subs	r6, r0, #0
   20938:	blt	20948 <__assert_fail@plt+0xe274>
   2093c:	ldrb	r3, [r4, #9]
   20940:	cmp	r3, #0
   20944:	beq	2096c <__assert_fail@plt+0xe298>
   20948:	ldr	r2, [sp, #4]
   2094c:	mov	r0, r6
   20950:	ldr	r3, [r5]
   20954:	cmp	r2, r3
   20958:	bne	209b4 <__assert_fail@plt+0xe2e0>
   2095c:	add	sp, sp, #12
   20960:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   20964:	add	sp, sp, #12
   20968:	bx	lr
   2096c:	mov	r1, #1
   20970:	bl	21060 <__assert_fail@plt+0xe98c>
   20974:	b	20948 <__assert_fail@plt+0xe274>
   20978:	movw	r0, #13112	; 0x3338
   2097c:	mov	r1, #524288	; 0x80000
   20980:	movt	r0, #3
   20984:	bl	21448 <__assert_fail@plt+0xed74>
   20988:	subs	sl, r0, #0
   2098c:	blt	209a4 <__assert_fail@plt+0xe2d0>
   20990:	mov	r1, #1
   20994:	bl	2a078 <__assert_fail@plt+0x179a4>
   20998:	and	r7, r0, #1
   2099c:	mov	r0, sl
   209a0:	bl	12680 <close@plt>
   209a4:	mov	r3, #1
   209a8:	strb	r7, [r4, #9]
   209ac:	strb	r3, [r4, #8]
   209b0:	b	20924 <__assert_fail@plt+0xe250>
   209b4:	bl	12188 <__stack_chk_fail@plt>
   209b8:	push	{r4, lr}
   209bc:	movw	r4, #27944	; 0x6d28
   209c0:	movt	r4, #4
   209c4:	ldr	r0, [r4]
   209c8:	bl	120c8 <free@plt>
   209cc:	mov	r3, #0
   209d0:	str	r3, [r4]
   209d4:	str	r3, [r4, #4]
   209d8:	pop	{r4, pc}
   209dc:	push	{r4, r5, r6, lr}
   209e0:	movw	r4, #26008	; 0x6598
   209e4:	movt	r4, #4
   209e8:	sub	sp, sp, #24
   209ec:	movw	r3, #27944	; 0x6d28
   209f0:	movt	r3, #4
   209f4:	ldr	r2, [r4]
   209f8:	ldm	r3, {r5, r6}
   209fc:	str	r2, [sp, #20]
   20a00:	bl	20530 <__assert_fail@plt+0xde5c>
   20a04:	cmp	r0, #0
   20a08:	blt	20aa8 <__assert_fail@plt+0xe3d4>
   20a0c:	cmn	r0, #-2147483647	; 0x80000001
   20a10:	movw	r1, #1564	; 0x61c
   20a14:	addne	r0, r0, #1
   20a18:	add	r2, sp, #4
   20a1c:	movt	r1, #2
   20a20:	str	r5, [sp, #4]
   20a24:	str	r6, [sp, #8]
   20a28:	mov	r5, #0
   20a2c:	mvn	r3, #0
   20a30:	str	r5, [sp, #12]
   20a34:	str	r3, [sp, #16]
   20a38:	bl	20714 <__assert_fail@plt+0xe040>
   20a3c:	ldr	r6, [sp, #16]
   20a40:	cmp	r6, r5
   20a44:	blt	20a90 <__assert_fail@plt+0xe3bc>
   20a48:	mov	r2, #5
   20a4c:	movw	r1, #14820	; 0x39e4
   20a50:	mov	r0, r5
   20a54:	movt	r1, #3
   20a58:	bl	1217c <dcgettext@plt>
   20a5c:	mov	r1, r5
   20a60:	mov	r3, r6
   20a64:	mov	r2, r0
   20a68:	mov	r0, r5
   20a6c:	bl	122cc <error@plt>
   20a70:	movw	r0, #14972	; 0x3a7c
   20a74:	movw	r1, #14984	; 0x3a88
   20a78:	movw	r3, #14776	; 0x39b8
   20a7c:	movt	r0, #3
   20a80:	movt	r1, #3
   20a84:	movw	r2, #382	; 0x17e
   20a88:	movt	r3, #3
   20a8c:	bl	126d4 <__assert_fail@plt>
   20a90:	ldr	r2, [sp, #20]
   20a94:	ldr	r3, [r4]
   20a98:	cmp	r2, r3
   20a9c:	bne	20ab0 <__assert_fail@plt+0xe3dc>
   20aa0:	add	sp, sp, #24
   20aa4:	pop	{r4, r5, r6, pc}
   20aa8:	bl	20698 <__assert_fail@plt+0xdfc4>
   20aac:	b	20a0c <__assert_fail@plt+0xe338>
   20ab0:	bl	12188 <__stack_chk_fail@plt>
   20ab4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20ab8:	movw	r4, #26008	; 0x6598
   20abc:	movt	r4, #4
   20ac0:	sub	sp, sp, #16
   20ac4:	mov	r5, r0
   20ac8:	mov	r9, r1
   20acc:	ldr	r3, [r4]
   20ad0:	str	r3, [sp, #12]
   20ad4:	bl	12434 <__errno_location@plt>
   20ad8:	mov	r3, #0
   20adc:	add	r1, sp, #8
   20ae0:	mov	r2, #10
   20ae4:	mov	r7, r0
   20ae8:	mov	r0, r5
   20aec:	str	r3, [r7]
   20af0:	bl	12068 <strtol@plt>
   20af4:	sub	r3, r0, #-2147483647	; 0x80000001
   20af8:	mov	r6, r0
   20afc:	cmn	r3, #3
   20b00:	bls	20b1c <__assert_fail@plt+0xe448>
   20b04:	movw	r2, #15064	; 0x3ad8
   20b08:	ldr	r1, [r7]
   20b0c:	mov	r0, #1
   20b10:	movt	r2, #3
   20b14:	mov	r3, r5
   20b18:	bl	122cc <error@plt>
   20b1c:	ldr	r3, [sp, #8]
   20b20:	ldrb	r8, [r3]
   20b24:	cmp	r8, #0
   20b28:	bne	20b50 <__assert_fail@plt+0xe47c>
   20b2c:	cmp	r5, r3
   20b30:	beq	20bac <__assert_fail@plt+0xe4d8>
   20b34:	ldr	r2, [sp, #12]
   20b38:	mov	r0, r6
   20b3c:	ldr	r3, [r4]
   20b40:	cmp	r2, r3
   20b44:	bne	20bf0 <__assert_fail@plt+0xe51c>
   20b48:	add	sp, sp, #16
   20b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b50:	mov	r2, #5
   20b54:	movw	r1, #14996	; 0x3a94
   20b58:	mov	r0, #0
   20b5c:	movt	r1, #3
   20b60:	ldr	sl, [r7]
   20b64:	bl	1217c <dcgettext@plt>
   20b68:	mov	r1, r9
   20b6c:	ldr	r2, [sp, #8]
   20b70:	mov	r8, r0
   20b74:	mov	r0, #0
   20b78:	bl	284fc <__assert_fail@plt+0x15e28>
   20b7c:	mov	r1, r9
   20b80:	mov	r2, r5
   20b84:	mov	r7, r0
   20b88:	mov	r0, #1
   20b8c:	bl	284fc <__assert_fail@plt+0x15e28>
   20b90:	mov	r1, sl
   20b94:	mov	r2, r8
   20b98:	mov	r3, r7
   20b9c:	str	r0, [sp]
   20ba0:	mov	r0, #1
   20ba4:	bl	122cc <error@plt>
   20ba8:	b	20b34 <__assert_fail@plt+0xe460>
   20bac:	mov	r0, r8
   20bb0:	mov	r2, #5
   20bb4:	movw	r1, #15024	; 0x3ab0
   20bb8:	movt	r1, #3
   20bbc:	ldr	sl, [r7]
   20bc0:	bl	1217c <dcgettext@plt>
   20bc4:	mov	r1, r9
   20bc8:	mov	r2, r5
   20bcc:	mov	r7, r0
   20bd0:	mov	r0, r8
   20bd4:	bl	284fc <__assert_fail@plt+0x15e28>
   20bd8:	mov	r1, sl
   20bdc:	mov	r2, r7
   20be0:	mov	r3, r0
   20be4:	mov	r0, #1
   20be8:	bl	122cc <error@plt>
   20bec:	b	20b34 <__assert_fail@plt+0xe460>
   20bf0:	bl	12188 <__stack_chk_fail@plt>
   20bf4:	cmp	r2, #0
   20bf8:	push	{r3, r4, r5, lr}
   20bfc:	ldr	r4, [sp, #16]
   20c00:	beq	20c3c <__assert_fail@plt+0xe568>
   20c04:	mov	r2, #0
   20c08:	str	r2, [r3]
   20c0c:	str	r2, [r4]
   20c10:	ldr	r5, [r3]
   20c14:	ldrb	r3, [r1]
   20c18:	add	r5, r0, r5
   20c1c:	cmp	r3, #0
   20c20:	beq	20c70 <__assert_fail@plt+0xe59c>
   20c24:	mov	r0, r5
   20c28:	bl	125fc <strpbrk@plt>
   20c2c:	cmp	r0, #0
   20c30:	beq	20c70 <__assert_fail@plt+0xe59c>
   20c34:	rsb	r0, r5, r0
   20c38:	b	20c78 <__assert_fail@plt+0xe5a4>
   20c3c:	ldr	r2, [r4]
   20c40:	ldr	r5, [r3]
   20c44:	add	r5, r5, r2
   20c48:	str	r5, [r3]
   20c4c:	ldrb	r2, [r0, r5]
   20c50:	cmp	r2, #0
   20c54:	beq	20c84 <__assert_fail@plt+0xe5b0>
   20c58:	add	r5, r5, #1
   20c5c:	str	r5, [r3]
   20c60:	ldrb	r3, [r1]
   20c64:	add	r5, r0, r5
   20c68:	cmp	r3, #0
   20c6c:	bne	20c24 <__assert_fail@plt+0xe550>
   20c70:	mov	r0, r5
   20c74:	bl	123d4 <strlen@plt>
   20c78:	str	r0, [r4]
   20c7c:	mov	r0, #1
   20c80:	pop	{r3, r4, r5, pc}
   20c84:	mov	r0, r2
   20c88:	pop	{r3, r4, r5, pc}
   20c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c90:	movw	sl, #26008	; 0x6598
   20c94:	movt	sl, #4
   20c98:	sub	sp, sp, #20
   20c9c:	mov	r9, r0
   20ca0:	mov	r6, r1
   20ca4:	ldr	r3, [sl]
   20ca8:	str	r3, [sp, #12]
   20cac:	bl	12284 <__ctype_get_mb_cur_max@plt>
   20cb0:	cmp	r0, #1
   20cb4:	bls	20df0 <__assert_fail@plt+0xe71c>
   20cb8:	add	r6, r9, r6
   20cbc:	cmp	r9, r6
   20cc0:	bcs	20e2c <__assert_fail@plt+0xe758>
   20cc4:	mov	r4, r9
   20cc8:	mov	r5, r9
   20ccc:	mov	r8, #0
   20cd0:	mov	r7, #63	; 0x3f
   20cd4:	b	20d00 <__assert_fail@plt+0xe62c>
   20cd8:	cmp	r3, #37	; 0x25
   20cdc:	bcs	20cec <__assert_fail@plt+0xe618>
   20ce0:	sub	r2, r3, #32
   20ce4:	cmp	r2, #3
   20ce8:	bhi	20d28 <__assert_fail@plt+0xe654>
   20cec:	strb	r3, [r4]
   20cf0:	add	r5, r5, #1
   20cf4:	add	r4, r4, #1
   20cf8:	cmp	r6, r5
   20cfc:	bls	20dc4 <__assert_fail@plt+0xe6f0>
   20d00:	ldrb	r3, [r5]
   20d04:	cmp	r3, #63	; 0x3f
   20d08:	bls	20cd8 <__assert_fail@plt+0xe604>
   20d0c:	cmp	r3, #65	; 0x41
   20d10:	bcc	20d28 <__assert_fail@plt+0xe654>
   20d14:	cmp	r3, #95	; 0x5f
   20d18:	bls	20cec <__assert_fail@plt+0xe618>
   20d1c:	sub	r2, r3, #97	; 0x61
   20d20:	cmp	r2, #29
   20d24:	bls	20cec <__assert_fail@plt+0xe618>
   20d28:	str	r8, [sp, #4]
   20d2c:	str	r8, [sp, #8]
   20d30:	mov	r0, sp
   20d34:	mov	r1, r5
   20d38:	rsb	r2, r5, r6
   20d3c:	add	r3, sp, #4
   20d40:	bl	122c0 <mbrtowc@plt>
   20d44:	cmn	r0, #1
   20d48:	mov	fp, r0
   20d4c:	beq	20db0 <__assert_fail@plt+0xe6dc>
   20d50:	cmn	r0, #2
   20d54:	beq	20de0 <__assert_fail@plt+0xe70c>
   20d58:	cmp	fp, #0
   20d5c:	ldr	r0, [sp]
   20d60:	moveq	fp, #1
   20d64:	bl	120a4 <wcwidth@plt>
   20d68:	cmp	r0, #0
   20d6c:	blt	20da0 <__assert_fail@plt+0xe6cc>
   20d70:	add	r1, r4, fp
   20d74:	mov	r3, r5
   20d78:	ldrb	r2, [r3], #1
   20d7c:	strb	r2, [r4], #1
   20d80:	cmp	r4, r1
   20d84:	bne	20d78 <__assert_fail@plt+0xe6a4>
   20d88:	add	r5, r5, fp
   20d8c:	add	r0, sp, #4
   20d90:	bl	12128 <mbsinit@plt>
   20d94:	cmp	r0, #0
   20d98:	beq	20d30 <__assert_fail@plt+0xe65c>
   20d9c:	b	20cf8 <__assert_fail@plt+0xe624>
   20da0:	strb	r7, [r4]
   20da4:	add	r5, r5, fp
   20da8:	add	r4, r4, #1
   20dac:	b	20d8c <__assert_fail@plt+0xe6b8>
   20db0:	add	r5, r5, #1
   20db4:	strb	r7, [r4]
   20db8:	cmp	r6, r5
   20dbc:	add	r4, r4, #1
   20dc0:	bhi	20d00 <__assert_fail@plt+0xe62c>
   20dc4:	rsb	r0, r9, r4
   20dc8:	ldr	r2, [sp, #12]
   20dcc:	ldr	r3, [sl]
   20dd0:	cmp	r2, r3
   20dd4:	bne	20e34 <__assert_fail@plt+0xe760>
   20dd8:	add	sp, sp, #20
   20ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20de0:	strb	r7, [r4]
   20de4:	mov	r5, r6
   20de8:	add	r4, r4, #1
   20dec:	b	20cf8 <__assert_fail@plt+0xe624>
   20df0:	add	r4, r9, r6
   20df4:	cmp	r9, r4
   20df8:	bcs	20e24 <__assert_fail@plt+0xe750>
   20dfc:	bl	12398 <__ctype_b_loc@plt>
   20e00:	mov	r1, #63	; 0x3f
   20e04:	ldrb	r3, [r9], #1
   20e08:	ldr	r2, [r0]
   20e0c:	lsl	r3, r3, #1
   20e10:	ldrh	r3, [r2, r3]
   20e14:	tst	r3, #16384	; 0x4000
   20e18:	strbeq	r1, [r9, #-1]
   20e1c:	cmp	r9, r4
   20e20:	bne	20e04 <__assert_fail@plt+0xe730>
   20e24:	mov	r0, r6
   20e28:	b	20dc8 <__assert_fail@plt+0xe6f4>
   20e2c:	mov	r0, #0
   20e30:	b	20dc8 <__assert_fail@plt+0xe6f4>
   20e34:	bl	12188 <__stack_chk_fail@plt>
   20e38:	push	{lr}		; (str lr, [sp, #-4]!)
   20e3c:	sub	sp, sp, #12
   20e40:	mov	r3, #0
   20e44:	movw	ip, #9028	; 0x2344
   20e48:	mov	r2, r3
   20e4c:	movt	ip, #1
   20e50:	str	r3, [sp]
   20e54:	str	ip, [sp, #4]
   20e58:	bl	20e88 <__assert_fail@plt+0xe7b4>
   20e5c:	add	sp, sp, #12
   20e60:	pop	{pc}		; (ldr pc, [sp], #4)
   20e64:	cmn	r0, #100	; 0x64
   20e68:	push	{r3, lr}
   20e6c:	bne	20e84 <__assert_fail@plt+0xe7b0>
   20e70:	mov	r0, r1
   20e74:	mov	r1, r2
   20e78:	mov	r2, r3
   20e7c:	pop	{r3, lr}
   20e80:	b	12224 <readlink@plt>
   20e84:	bl	12674 <abort@plt>
   20e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e8c:	sub	sp, sp, #1040	; 0x410
   20e90:	sub	sp, sp, #12
   20e94:	movw	r4, #26008	; 0x6598
   20e98:	movw	ip, #20376	; 0x4f98
   20e9c:	movt	r4, #4
   20ea0:	ldr	r6, [sp, #1088]	; 0x440
   20ea4:	movt	ip, #3
   20ea8:	ldr	lr, [r4]
   20eac:	mov	r7, r2
   20eb0:	cmp	r6, #0
   20eb4:	str	r4, [sp, #12]
   20eb8:	mov	r8, r0
   20ebc:	mov	r9, r1
   20ec0:	moveq	r6, ip
   20ec4:	subs	r4, r3, #0
   20ec8:	addeq	r7, sp, #20
   20ecc:	str	lr, [sp, #1044]	; 0x414
   20ed0:	ldr	sl, [sp, #1092]	; 0x444
   20ed4:	moveq	r4, #1024	; 0x400
   20ed8:	mov	r5, r7
   20edc:	b	20f28 <__assert_fail@plt+0xe854>
   20ee0:	cmp	r4, fp
   20ee4:	bhi	20fac <__assert_fail@plt+0xe8d8>
   20ee8:	cmp	r5, r7
   20eec:	beq	20efc <__assert_fail@plt+0xe828>
   20ef0:	mov	r0, r5
   20ef4:	ldr	r3, [r6, #8]
   20ef8:	blx	r3
   20efc:	cmp	r4, #1073741824	; 0x40000000
   20f00:	lslls	r4, r4, #1
   20f04:	bls	20f14 <__assert_fail@plt+0xe840>
   20f08:	cmp	r4, #-2147483648	; 0x80000000
   20f0c:	bcs	21020 <__assert_fail@plt+0xe94c>
   20f10:	mov	r4, #-2147483648	; 0x80000000
   20f14:	ldr	r3, [r6]
   20f18:	mov	r0, r4
   20f1c:	blx	r3
   20f20:	subs	r5, r0, #0
   20f24:	beq	20ff8 <__assert_fail@plt+0xe924>
   20f28:	mov	r0, r8
   20f2c:	mov	r1, r9
   20f30:	mov	r2, r5
   20f34:	mov	r3, r4
   20f38:	blx	sl
   20f3c:	subs	fp, r0, #0
   20f40:	bge	20ee0 <__assert_fail@plt+0xe80c>
   20f44:	bl	12434 <__errno_location@plt>
   20f48:	ldr	r1, [r0]
   20f4c:	mov	r2, r0
   20f50:	cmp	r1, #34	; 0x22
   20f54:	beq	20ee0 <__assert_fail@plt+0xe80c>
   20f58:	cmp	r7, r5
   20f5c:	moveq	r5, #0
   20f60:	beq	20f88 <__assert_fail@plt+0xe8b4>
   20f64:	ldr	r3, [r6, #8]
   20f68:	mov	r0, r5
   20f6c:	str	r1, [sp, #8]
   20f70:	mov	r5, #0
   20f74:	str	r2, [sp, #4]
   20f78:	blx	r3
   20f7c:	ldr	r1, [sp, #8]
   20f80:	ldr	r2, [sp, #4]
   20f84:	str	r1, [r2]
   20f88:	ldr	r4, [sp, #12]
   20f8c:	mov	r0, r5
   20f90:	ldr	r2, [sp, #1044]	; 0x414
   20f94:	ldr	r3, [r4]
   20f98:	cmp	r2, r3
   20f9c:	bne	2105c <__assert_fail@plt+0xe988>
   20fa0:	add	sp, sp, #1040	; 0x410
   20fa4:	add	sp, sp, #12
   20fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fac:	add	r2, sp, #20
   20fb0:	mov	r1, #0
   20fb4:	cmp	r5, r2
   20fb8:	strb	r1, [r5, fp]
   20fbc:	add	r8, fp, #1
   20fc0:	beq	21034 <__assert_fail@plt+0xe960>
   20fc4:	cmp	r7, r5
   20fc8:	cmpne	r4, r8
   20fcc:	bls	20f88 <__assert_fail@plt+0xe8b4>
   20fd0:	ldr	r3, [r6, #4]
   20fd4:	cmp	r3, #0
   20fd8:	beq	20f88 <__assert_fail@plt+0xe8b4>
   20fdc:	mov	r0, r5
   20fe0:	mov	r1, r8
   20fe4:	blx	r3
   20fe8:	cmp	r0, #0
   20fec:	movne	r5, r0
   20ff0:	b	20f88 <__assert_fail@plt+0xe8b4>
   20ff4:	mov	r4, r8
   20ff8:	ldr	r3, [r6, #12]
   20ffc:	cmp	r3, #0
   21000:	beq	2100c <__assert_fail@plt+0xe938>
   21004:	mov	r0, r4
   21008:	blx	r3
   2100c:	bl	12434 <__errno_location@plt>
   21010:	mov	r5, #0
   21014:	mov	r3, #12
   21018:	str	r3, [r0]
   2101c:	b	20f88 <__assert_fail@plt+0xe8b4>
   21020:	bl	12434 <__errno_location@plt>
   21024:	mov	r5, #0
   21028:	mov	r3, #36	; 0x24
   2102c:	str	r3, [r0]
   21030:	b	20f88 <__assert_fail@plt+0xe8b4>
   21034:	ldr	r3, [r6]
   21038:	mov	r0, r8
   2103c:	blx	r3
   21040:	subs	r4, r0, #0
   21044:	beq	20ff4 <__assert_fail@plt+0xe920>
   21048:	mov	r1, r5
   2104c:	mov	r2, r8
   21050:	bl	12104 <memcpy@plt>
   21054:	mov	r5, r4
   21058:	b	20f88 <__assert_fail@plt+0xe8b4>
   2105c:	bl	12188 <__stack_chk_fail@plt>
   21060:	push	{r3, r4, r5, lr}
   21064:	mov	r2, #0
   21068:	mov	r4, r1
   2106c:	mov	r1, #1
   21070:	mov	r5, r0
   21074:	bl	2a078 <__assert_fail@plt+0x179a4>
   21078:	cmp	r0, #0
   2107c:	blt	210bc <__assert_fail@plt+0xe9e8>
   21080:	cmp	r4, #0
   21084:	orrne	r2, r0, #1
   21088:	biceq	r2, r0, #1
   2108c:	cmp	r2, r0
   21090:	beq	210b4 <__assert_fail@plt+0xe9e0>
   21094:	mov	r0, r5
   21098:	mov	r1, #2
   2109c:	bl	2a078 <__assert_fail@plt+0x179a4>
   210a0:	cmn	r0, #1
   210a4:	movne	r0, #0
   210a8:	moveq	r0, #1
   210ac:	rsb	r0, r0, #0
   210b0:	pop	{r3, r4, r5, pc}
   210b4:	mov	r0, #0
   210b8:	pop	{r3, r4, r5, pc}
   210bc:	mvn	r0, #0
   210c0:	pop	{r3, r4, r5, pc}
   210c4:	movw	r1, #1030	; 0x406
   210c8:	mov	r2, #0
   210cc:	b	2a078 <__assert_fail@plt+0x179a4>
   210d0:	movw	r3, #27956	; 0x6d34
   210d4:	movt	r3, #4
   210d8:	str	r0, [r3]
   210dc:	bx	lr
   210e0:	movw	r3, #27956	; 0x6d34
   210e4:	movt	r3, #4
   210e8:	strb	r0, [r3, #4]
   210ec:	bx	lr
   210f0:	movw	r3, #26024	; 0x65a8
   210f4:	movt	r3, #4
   210f8:	push	{r4, r5, r6, lr}
   210fc:	sub	sp, sp, #8
   21100:	ldr	r0, [r3]
   21104:	bl	2d26c <fts_children@@Base+0xea0>
   21108:	cmp	r0, #0
   2110c:	beq	21134 <__assert_fail@plt+0xea60>
   21110:	movw	r4, #27956	; 0x6d34
   21114:	movt	r4, #4
   21118:	ldrb	r3, [r4, #4]
   2111c:	cmp	r3, #0
   21120:	beq	21154 <__assert_fail@plt+0xea80>
   21124:	bl	12434 <__errno_location@plt>
   21128:	ldr	r3, [r0]
   2112c:	cmp	r3, #32
   21130:	bne	21154 <__assert_fail@plt+0xea80>
   21134:	movw	r3, #26016	; 0x65a0
   21138:	movt	r3, #4
   2113c:	ldr	r0, [r3]
   21140:	bl	2d26c <fts_children@@Base+0xea0>
   21144:	cmp	r0, #0
   21148:	bne	211a4 <__assert_fail@plt+0xead0>
   2114c:	add	sp, sp, #8
   21150:	pop	{r4, r5, r6, pc}
   21154:	movw	r1, #15048	; 0x3ac8
   21158:	mov	r0, #0
   2115c:	movt	r1, #3
   21160:	mov	r2, #5
   21164:	bl	1217c <dcgettext@plt>
   21168:	ldr	r4, [r4]
   2116c:	cmp	r4, #0
   21170:	mov	r5, r0
   21174:	beq	211b4 <__assert_fail@plt+0xeae0>
   21178:	bl	12434 <__errno_location@plt>
   2117c:	ldr	r6, [r0]
   21180:	mov	r0, r4
   21184:	bl	28688 <__assert_fail@plt+0x15fb4>
   21188:	movw	r2, #15060	; 0x3ad4
   2118c:	str	r5, [sp]
   21190:	movt	r2, #3
   21194:	mov	r1, r6
   21198:	mov	r3, r0
   2119c:	mov	r0, #0
   211a0:	bl	122cc <error@plt>
   211a4:	movw	r3, #25924	; 0x6544
   211a8:	movt	r3, #4
   211ac:	ldr	r0, [r3]
   211b0:	bl	120f8 <_exit@plt>
   211b4:	bl	12434 <__errno_location@plt>
   211b8:	movw	r2, #15064	; 0x3ad8
   211bc:	movt	r2, #3
   211c0:	mov	r3, r0
   211c4:	mov	r0, r4
   211c8:	ldr	r1, [r3]
   211cc:	mov	r3, r5
   211d0:	bl	122cc <error@plt>
   211d4:	b	211a4 <__assert_fail@plt+0xead0>
   211d8:	push	{r4, r5, r6, r7, r8, lr}
   211dc:	bl	122e4 <opendir@plt>
   211e0:	subs	r4, r0, #0
   211e4:	beq	211f4 <__assert_fail@plt+0xeb20>
   211e8:	bl	125c0 <dirfd@plt>
   211ec:	cmp	r0, #2
   211f0:	bls	211fc <__assert_fail@plt+0xeb28>
   211f4:	mov	r0, r4
   211f8:	pop	{r4, r5, r6, r7, r8, pc}
   211fc:	bl	288bc <__assert_fail@plt+0x161e8>
   21200:	subs	r8, r0, #0
   21204:	blt	2123c <__assert_fail@plt+0xeb68>
   21208:	bl	125b4 <fdopendir@plt>
   2120c:	mov	r6, r0
   21210:	bl	12434 <__errno_location@plt>
   21214:	cmp	r6, #0
   21218:	mov	r5, r0
   2121c:	ldr	r7, [r0]
   21220:	beq	21250 <__assert_fail@plt+0xeb7c>
   21224:	mov	r0, r4
   21228:	mov	r4, r6
   2122c:	bl	12698 <closedir@plt>
   21230:	str	r7, [r5]
   21234:	mov	r0, r4
   21238:	pop	{r4, r5, r6, r7, r8, pc}
   2123c:	bl	12434 <__errno_location@plt>
   21240:	mov	r6, #0
   21244:	mov	r5, r0
   21248:	ldr	r7, [r0]
   2124c:	b	21224 <__assert_fail@plt+0xeb50>
   21250:	mov	r0, r8
   21254:	bl	12680 <close@plt>
   21258:	b	21224 <__assert_fail@plt+0xeb50>
   2125c:	push	{r3, r4, r5, lr}
   21260:	mov	r5, r0
   21264:	bl	2136c <__assert_fail@plt+0xec98>
   21268:	ldrb	r3, [r0]
   2126c:	mov	r4, r0
   21270:	cmp	r3, #0
   21274:	beq	21298 <__assert_fail@plt+0xebc4>
   21278:	bl	213c8 <__assert_fail@plt+0xecf4>
   2127c:	ldrb	r3, [r4, r0]
   21280:	mov	r1, r0
   21284:	cmp	r3, #47	; 0x2f
   21288:	addeq	r1, r0, #1
   2128c:	mov	r0, r4
   21290:	pop	{r3, r4, r5, lr}
   21294:	b	28f8c <__assert_fail@plt+0x168b8>
   21298:	mov	r0, r5
   2129c:	bl	213c8 <__assert_fail@plt+0xecf4>
   212a0:	mov	r1, r0
   212a4:	mov	r0, r5
   212a8:	pop	{r3, r4, r5, lr}
   212ac:	b	28f8c <__assert_fail@plt+0x168b8>
   212b0:	push	{r3, r4, r5, lr}
   212b4:	mov	r4, r0
   212b8:	ldrb	r5, [r0]
   212bc:	subs	r3, r5, #47	; 0x2f
   212c0:	rsbs	r5, r3, #0
   212c4:	adcs	r5, r5, r3
   212c8:	bl	2136c <__assert_fail@plt+0xec98>
   212cc:	rsb	r3, r4, r0
   212d0:	cmp	r3, r5
   212d4:	bls	2130c <__assert_fail@plt+0xec38>
   212d8:	sub	r0, r3, #1
   212dc:	ldrb	r2, [r4, r0]
   212e0:	cmp	r2, #47	; 0x2f
   212e4:	beq	212fc <__assert_fail@plt+0xec28>
   212e8:	b	2130c <__assert_fail@plt+0xec38>
   212ec:	ldrb	r2, [r4, r3]
   212f0:	cmp	r2, #47	; 0x2f
   212f4:	popne	{r3, r4, r5, pc}
   212f8:	mov	r0, r3
   212fc:	cmp	r5, r0
   21300:	sub	r3, r0, #1
   21304:	bcc	212ec <__assert_fail@plt+0xec18>
   21308:	pop	{r3, r4, r5, pc}
   2130c:	mov	r0, r3
   21310:	pop	{r3, r4, r5, pc}
   21314:	push	{r4, r5, r6, r7, r8, lr}
   21318:	mov	r8, r0
   2131c:	bl	212b0 <__assert_fail@plt+0xebdc>
   21320:	rsbs	r6, r0, #1
   21324:	add	r7, r0, #1
   21328:	mov	r4, r0
   2132c:	movcc	r6, #0
   21330:	add	r0, r6, r7
   21334:	bl	1232c <malloc@plt>
   21338:	subs	r5, r0, #0
   2133c:	beq	21364 <__assert_fail@plt+0xec90>
   21340:	mov	r2, r4
   21344:	mov	r1, r8
   21348:	bl	12104 <memcpy@plt>
   2134c:	cmp	r6, #0
   21350:	movne	r3, #46	; 0x2e
   21354:	strbne	r3, [r5, r4]
   21358:	movne	r4, r7
   2135c:	mov	r3, #0
   21360:	strb	r3, [r5, r4]
   21364:	mov	r0, r5
   21368:	pop	{r4, r5, r6, r7, r8, pc}
   2136c:	ldrb	r3, [r0]
   21370:	cmp	r3, #47	; 0x2f
   21374:	bne	21390 <__assert_fail@plt+0xecbc>
   21378:	add	r2, r0, #1
   2137c:	mov	r0, r2
   21380:	add	r2, r2, #1
   21384:	ldrb	r3, [r0]
   21388:	cmp	r3, #47	; 0x2f
   2138c:	beq	2137c <__assert_fail@plt+0xeca8>
   21390:	cmp	r3, #0
   21394:	bxeq	lr
   21398:	mov	r2, r0
   2139c:	mov	r1, #0
   213a0:	cmp	r3, #47	; 0x2f
   213a4:	moveq	r1, #1
   213a8:	beq	213b8 <__assert_fail@plt+0xece4>
   213ac:	cmp	r1, #0
   213b0:	movne	r0, r2
   213b4:	movne	r1, #0
   213b8:	ldrb	r3, [r2, #1]!
   213bc:	cmp	r3, #0
   213c0:	bne	213a0 <__assert_fail@plt+0xeccc>
   213c4:	bx	lr
   213c8:	push	{r4, lr}
   213cc:	mov	r4, r0
   213d0:	bl	123d4 <strlen@plt>
   213d4:	cmp	r0, #1
   213d8:	popls	{r4, pc}
   213dc:	sub	r3, r0, #1
   213e0:	ldrb	r2, [r4, r3]
   213e4:	cmp	r2, #47	; 0x2f
   213e8:	popne	{r4, pc}
   213ec:	mov	r0, r3
   213f0:	cmp	r0, #1
   213f4:	sub	r3, r3, #1
   213f8:	beq	2140c <__assert_fail@plt+0xed38>
   213fc:	ldrb	r2, [r4, r3]
   21400:	cmp	r2, #47	; 0x2f
   21404:	popne	{r4, pc}
   21408:	b	213ec <__assert_fail@plt+0xed18>
   2140c:	pop	{r4, pc}
   21410:	push	{r4, lr}
   21414:	mov	r4, r0
   21418:	bl	2136c <__assert_fail@plt+0xec98>
   2141c:	ldrb	r3, [r0]
   21420:	cmp	r3, #0
   21424:	movne	r4, r0
   21428:	mov	r0, r4
   2142c:	bl	213c8 <__assert_fail@plt+0xecf4>
   21430:	mov	r2, #0
   21434:	ldrb	r3, [r4, r0]
   21438:	strb	r2, [r4, r0]
   2143c:	subs	r0, r3, r2
   21440:	movne	r0, #1
   21444:	pop	{r4, pc}
   21448:	push	{r1, r2, r3}
   2144c:	push	{r4, lr}
   21450:	sub	sp, sp, #12
   21454:	movw	r4, #26008	; 0x6598
   21458:	movt	r4, #4
   2145c:	ldr	r1, [sp, #20]
   21460:	ldr	r3, [r4]
   21464:	ands	r2, r1, #64	; 0x40
   21468:	ldrne	r2, [sp, #24]
   2146c:	str	r3, [sp, #4]
   21470:	addne	r3, sp, #24
   21474:	strne	r3, [sp]
   21478:	bl	122fc <open64@plt>
   2147c:	bl	288c8 <__assert_fail@plt+0x161f4>
   21480:	ldr	r2, [sp, #4]
   21484:	ldr	r3, [r4]
   21488:	cmp	r2, r3
   2148c:	bne	214a0 <__assert_fail@plt+0xedcc>
   21490:	add	sp, sp, #12
   21494:	pop	{r4, lr}
   21498:	add	sp, sp, #12
   2149c:	bx	lr
   214a0:	bl	12188 <__stack_chk_fail@plt>
   214a4:	and	r3, r0, #61440	; 0xf000
   214a8:	cmp	r3, #32768	; 0x8000
   214ac:	moveq	r3, #45	; 0x2d
   214b0:	beq	214fc <__assert_fail@plt+0xee28>
   214b4:	cmp	r3, #16384	; 0x4000
   214b8:	moveq	r3, #100	; 0x64
   214bc:	beq	214fc <__assert_fail@plt+0xee28>
   214c0:	cmp	r3, #24576	; 0x6000
   214c4:	moveq	r3, #98	; 0x62
   214c8:	beq	214fc <__assert_fail@plt+0xee28>
   214cc:	cmp	r3, #8192	; 0x2000
   214d0:	moveq	r3, #99	; 0x63
   214d4:	beq	214fc <__assert_fail@plt+0xee28>
   214d8:	cmp	r3, #40960	; 0xa000
   214dc:	moveq	r3, #108	; 0x6c
   214e0:	beq	214fc <__assert_fail@plt+0xee28>
   214e4:	cmp	r3, #4096	; 0x1000
   214e8:	moveq	r3, #112	; 0x70
   214ec:	beq	214fc <__assert_fail@plt+0xee28>
   214f0:	cmp	r3, #49152	; 0xc000
   214f4:	movne	r3, #63	; 0x3f
   214f8:	moveq	r3, #115	; 0x73
   214fc:	tst	r0, #256	; 0x100
   21500:	strb	r3, [r1]
   21504:	moveq	r3, #45	; 0x2d
   21508:	movne	r3, #114	; 0x72
   2150c:	tst	r0, #128	; 0x80
   21510:	strb	r3, [r1, #1]
   21514:	moveq	r3, #45	; 0x2d
   21518:	movne	r3, #119	; 0x77
   2151c:	tst	r0, #2048	; 0x800
   21520:	strb	r3, [r1, #2]
   21524:	beq	215bc <__assert_fail@plt+0xeee8>
   21528:	tst	r0, #64	; 0x40
   2152c:	moveq	r3, #83	; 0x53
   21530:	movne	r3, #115	; 0x73
   21534:	tst	r0, #32
   21538:	strb	r3, [r1, #3]
   2153c:	moveq	r3, #45	; 0x2d
   21540:	movne	r3, #114	; 0x72
   21544:	tst	r0, #16
   21548:	strb	r3, [r1, #4]
   2154c:	moveq	r3, #45	; 0x2d
   21550:	movne	r3, #119	; 0x77
   21554:	tst	r0, #1024	; 0x400
   21558:	strb	r3, [r1, #5]
   2155c:	beq	215dc <__assert_fail@plt+0xef08>
   21560:	tst	r0, #8
   21564:	moveq	r3, #83	; 0x53
   21568:	movne	r3, #115	; 0x73
   2156c:	tst	r0, #4
   21570:	strb	r3, [r1, #6]
   21574:	moveq	r3, #45	; 0x2d
   21578:	movne	r3, #114	; 0x72
   2157c:	tst	r0, #2
   21580:	strb	r3, [r1, #7]
   21584:	moveq	r3, #45	; 0x2d
   21588:	movne	r3, #119	; 0x77
   2158c:	tst	r0, #512	; 0x200
   21590:	strb	r3, [r1, #8]
   21594:	beq	215cc <__assert_fail@plt+0xeef8>
   21598:	tst	r0, #1
   2159c:	moveq	r3, #84	; 0x54
   215a0:	movne	r3, #116	; 0x74
   215a4:	strb	r3, [r1, #9]
   215a8:	mov	r2, #32
   215ac:	mov	r3, #0
   215b0:	strb	r2, [r1, #10]
   215b4:	strb	r3, [r1, #11]
   215b8:	bx	lr
   215bc:	tst	r0, #64	; 0x40
   215c0:	moveq	r3, #45	; 0x2d
   215c4:	movne	r3, #120	; 0x78
   215c8:	b	21534 <__assert_fail@plt+0xee60>
   215cc:	tst	r0, #1
   215d0:	moveq	r3, #45	; 0x2d
   215d4:	movne	r3, #120	; 0x78
   215d8:	b	215a4 <__assert_fail@plt+0xeed0>
   215dc:	tst	r0, #8
   215e0:	moveq	r3, #45	; 0x2d
   215e4:	movne	r3, #120	; 0x78
   215e8:	b	2156c <__assert_fail@plt+0xee98>
   215ec:	ldr	r0, [r0, #16]
   215f0:	b	214a4 <__assert_fail@plt+0xedd0>
   215f4:	push	{r4, r5, r6, lr}
   215f8:	mov	r5, r1
   215fc:	bl	125d8 <fopen64@plt>
   21600:	subs	r4, r0, #0
   21604:	beq	21614 <__assert_fail@plt+0xef40>
   21608:	bl	124b8 <fileno@plt>
   2160c:	cmp	r0, #2
   21610:	bls	2161c <__assert_fail@plt+0xef48>
   21614:	mov	r0, r4
   21618:	pop	{r4, r5, r6, pc}
   2161c:	bl	288bc <__assert_fail@plt+0x161e8>
   21620:	subs	r6, r0, #0
   21624:	blt	21650 <__assert_fail@plt+0xef7c>
   21628:	mov	r0, r4
   2162c:	bl	12500 <fclose@plt>
   21630:	cmp	r0, #0
   21634:	bne	21670 <__assert_fail@plt+0xef9c>
   21638:	mov	r1, r5
   2163c:	mov	r0, r6
   21640:	bl	11ffc <fdopen@plt>
   21644:	cmp	r0, #0
   21648:	beq	21670 <__assert_fail@plt+0xef9c>
   2164c:	pop	{r4, r5, r6, pc}
   21650:	bl	12434 <__errno_location@plt>
   21654:	ldr	r6, [r0]
   21658:	mov	r5, r0
   2165c:	mov	r0, r4
   21660:	bl	12500 <fclose@plt>
   21664:	mov	r0, #0
   21668:	str	r6, [r5]
   2166c:	pop	{r4, r5, r6, pc}
   21670:	bl	12434 <__errno_location@plt>
   21674:	ldr	r5, [r0]
   21678:	mov	r4, r0
   2167c:	mov	r0, r6
   21680:	bl	12680 <close@plt>
   21684:	mov	r0, #0
   21688:	str	r5, [r4]
   2168c:	pop	{r4, r5, r6, pc}
   21690:	cmp	r0, #9
   21694:	push	{r4, r5, r6, r7, r8, lr}
   21698:	bhi	2172c <__assert_fail@plt+0xf058>
   2169c:	mov	r7, #11
   216a0:	movw	r8, #43691	; 0xaaab
   216a4:	movt	r8, #43690	; 0xaaaa
   216a8:	cmp	r7, #9
   216ac:	bls	21724 <__assert_fail@plt+0xf050>
   216b0:	umull	r2, r3, r8, r7
   216b4:	lsr	r3, r3, #1
   216b8:	add	r3, r3, r3, lsl #1
   216bc:	cmp	r7, r3
   216c0:	beq	21710 <__assert_fail@plt+0xf03c>
   216c4:	mov	r6, #16
   216c8:	mov	r5, #9
   216cc:	mov	r4, #3
   216d0:	b	216e0 <__assert_fail@plt+0xf00c>
   216d4:	bl	2e130 <fts_children@@Base+0x1d64>
   216d8:	cmp	r1, #0
   216dc:	beq	21710 <__assert_fail@plt+0xf03c>
   216e0:	add	r5, r5, r6
   216e4:	add	r4, r4, #2
   216e8:	cmp	r5, r7
   216ec:	mov	r0, r7
   216f0:	add	r6, r6, #8
   216f4:	mov	r1, r4
   216f8:	bcc	216d4 <__assert_fail@plt+0xf000>
   216fc:	mov	r1, r4
   21700:	mov	r0, r7
   21704:	bl	2e130 <fts_children@@Base+0x1d64>
   21708:	cmp	r1, #0
   2170c:	bne	2171c <__assert_fail@plt+0xf048>
   21710:	add	r7, r7, #2
   21714:	cmn	r7, #1
   21718:	bne	216a8 <__assert_fail@plt+0xefd4>
   2171c:	mov	r0, r7
   21720:	pop	{r4, r5, r6, r7, r8, pc}
   21724:	mov	r4, #3
   21728:	b	216fc <__assert_fail@plt+0xf028>
   2172c:	orr	r7, r0, #1
   21730:	cmn	r7, #1
   21734:	bne	216a0 <__assert_fail@plt+0xefcc>
   21738:	b	2171c <__assert_fail@plt+0xf048>
   2173c:	push	{r3, lr}
   21740:	ror	r0, r0, #3
   21744:	bl	2e130 <fts_children@@Base+0x1d64>
   21748:	mov	r0, r1
   2174c:	pop	{r3, pc}
   21750:	subs	r3, r1, r0
   21754:	rsbs	r0, r3, #0
   21758:	adcs	r0, r0, r3
   2175c:	bx	lr
   21760:	push	{r4, lr}
   21764:	mov	r4, r0
   21768:	ldr	r3, [r4, #24]
   2176c:	mov	r0, r1
   21770:	ldr	r1, [r4, #8]
   21774:	blx	r3
   21778:	ldr	r3, [r4, #8]
   2177c:	cmp	r0, r3
   21780:	bcs	21790 <__assert_fail@plt+0xf0bc>
   21784:	ldr	r3, [r4]
   21788:	add	r0, r3, r0, lsl #3
   2178c:	pop	{r4, pc}
   21790:	bl	12674 <abort@plt>
   21794:	push	{r4, r5, r6, r7, r8, lr}
   21798:	mov	r7, r2
   2179c:	mov	r8, r3
   217a0:	mov	r6, r0
   217a4:	mov	r5, r1
   217a8:	bl	21760 <__assert_fail@plt+0xf08c>
   217ac:	str	r0, [r7]
   217b0:	mov	r4, r0
   217b4:	ldr	r2, [r0]
   217b8:	cmp	r2, #0
   217bc:	beq	21850 <__assert_fail@plt+0xf17c>
   217c0:	cmp	r5, r2
   217c4:	beq	217e4 <__assert_fail@plt+0xf110>
   217c8:	mov	r1, r2
   217cc:	ldr	r3, [r6, #28]
   217d0:	mov	r0, r5
   217d4:	blx	r3
   217d8:	cmp	r0, #0
   217dc:	beq	21844 <__assert_fail@plt+0xf170>
   217e0:	ldr	r2, [r4]
   217e4:	cmp	r8, #0
   217e8:	beq	21814 <__assert_fail@plt+0xf140>
   217ec:	ldr	r3, [r4, #4]
   217f0:	cmp	r3, #0
   217f4:	streq	r3, [r4]
   217f8:	ldmne	r3, {r0, r1}
   217fc:	movne	ip, #0
   21800:	stmne	r4, {r0, r1}
   21804:	strne	ip, [r3]
   21808:	ldrne	r1, [r6, #36]	; 0x24
   2180c:	strne	r1, [r3, #4]
   21810:	strne	r3, [r6, #36]	; 0x24
   21814:	mov	r0, r2
   21818:	pop	{r4, r5, r6, r7, r8, pc}
   2181c:	ldr	r2, [ip]
   21820:	cmp	r2, r5
   21824:	beq	21864 <__assert_fail@plt+0xf190>
   21828:	mov	r1, r2
   2182c:	mov	r0, r5
   21830:	ldr	r2, [r6, #28]
   21834:	blx	r2
   21838:	cmp	r0, #0
   2183c:	bne	2185c <__assert_fail@plt+0xf188>
   21840:	ldr	r4, [r4, #4]
   21844:	ldr	ip, [r4, #4]
   21848:	cmp	ip, #0
   2184c:	bne	2181c <__assert_fail@plt+0xf148>
   21850:	mov	r2, #0
   21854:	mov	r0, r2
   21858:	pop	{r4, r5, r6, r7, r8, pc}
   2185c:	ldr	ip, [r4, #4]
   21860:	ldr	r2, [ip]
   21864:	cmp	r8, #0
   21868:	beq	21814 <__assert_fail@plt+0xf140>
   2186c:	ldr	r1, [ip, #4]
   21870:	mov	r3, #0
   21874:	mov	r0, r2
   21878:	str	r1, [r4, #4]
   2187c:	str	r3, [ip]
   21880:	ldr	r3, [r6, #36]	; 0x24
   21884:	str	r3, [ip, #4]
   21888:	str	ip, [r6, #36]	; 0x24
   2188c:	pop	{r4, r5, r6, r7, r8, pc}
   21890:	ldr	r2, [r0]
   21894:	movw	r3, #15068	; 0x3adc
   21898:	movt	r3, #3
   2189c:	cmp	r2, r3
   218a0:	beq	21928 <__assert_fail@plt+0xf254>
   218a4:	vldr	s15, [r2, #8]
   218a8:	vldr	s14, [pc, #128]	; 21930 <__assert_fail@plt+0xf25c>
   218ac:	vcmpe.f32	s15, s14
   218b0:	vmrs	APSR_nzcv, fpscr
   218b4:	ble	2191c <__assert_fail@plt+0xf248>
   218b8:	vldr	s13, [pc, #116]	; 21934 <__assert_fail@plt+0xf260>
   218bc:	vcmpe.f32	s15, s13
   218c0:	vmrs	APSR_nzcv, fpscr
   218c4:	bpl	2191c <__assert_fail@plt+0xf248>
   218c8:	vldr	s13, [pc, #104]	; 21938 <__assert_fail@plt+0xf264>
   218cc:	vldr	s12, [r2, #12]
   218d0:	vcmpe.f32	s12, s13
   218d4:	vmrs	APSR_nzcv, fpscr
   218d8:	ble	2191c <__assert_fail@plt+0xf248>
   218dc:	vldr	s13, [r2]
   218e0:	vcmpe.f32	s13, #0.0
   218e4:	vmrs	APSR_nzcv, fpscr
   218e8:	blt	2191c <__assert_fail@plt+0xf248>
   218ec:	vadd.f32	s14, s13, s14
   218f0:	vldr	s12, [r2, #4]
   218f4:	vcmpe.f32	s14, s12
   218f8:	vmrs	APSR_nzcv, fpscr
   218fc:	bpl	2191c <__assert_fail@plt+0xf248>
   21900:	vmov.f32	s13, #112	; 0x3f800000  1.0
   21904:	vcmpe.f32	s12, s13
   21908:	vmrs	APSR_nzcv, fpscr
   2190c:	bhi	2191c <__assert_fail@plt+0xf248>
   21910:	vcmpe.f32	s15, s14
   21914:	vmrs	APSR_nzcv, fpscr
   21918:	bgt	21928 <__assert_fail@plt+0xf254>
   2191c:	str	r3, [r0]
   21920:	mov	r0, #0
   21924:	bx	lr
   21928:	mov	r0, #1
   2192c:	bx	lr
   21930:	stclcc	12, cr12, [ip, #820]	; 0x334
   21934:	svccc	0x00666666
   21938:	svccc	0x008ccccd
   2193c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21940:	mov	r8, r1
   21944:	ldr	r6, [r1]
   21948:	mov	r5, r0
   2194c:	ldr	r3, [r1, #4]
   21950:	mov	sl, r2
   21954:	cmp	r6, r3
   21958:	addcc	r6, r6, #8
   2195c:	movcc	r9, #0
   21960:	bcs	21a08 <__assert_fail@plt+0xf334>
   21964:	ldr	fp, [r6, #-8]
   21968:	mov	r7, r6
   2196c:	cmp	fp, #0
   21970:	beq	219fc <__assert_fail@plt+0xf328>
   21974:	ldr	r4, [r6, #-4]
   21978:	cmp	r4, #0
   2197c:	bne	2199c <__assert_fail@plt+0xf2c8>
   21980:	b	219ec <__assert_fail@plt+0xf318>
   21984:	ldr	r2, [r0, #4]
   21988:	cmp	r3, #0
   2198c:	str	r2, [r4, #4]
   21990:	str	r4, [r0, #4]
   21994:	mov	r4, r3
   21998:	beq	219e8 <__assert_fail@plt+0xf314>
   2199c:	ldr	fp, [r4]
   219a0:	mov	r0, r5
   219a4:	mov	r1, fp
   219a8:	bl	21760 <__assert_fail@plt+0xf08c>
   219ac:	ldr	r3, [r4, #4]
   219b0:	ldr	r2, [r0]
   219b4:	cmp	r2, #0
   219b8:	bne	21984 <__assert_fail@plt+0xf2b0>
   219bc:	ldr	r1, [r5, #12]
   219c0:	cmp	r3, #0
   219c4:	str	fp, [r0]
   219c8:	add	r1, r1, #1
   219cc:	str	r1, [r5, #12]
   219d0:	str	r2, [r4]
   219d4:	ldr	r2, [r5, #36]	; 0x24
   219d8:	str	r2, [r4, #4]
   219dc:	str	r4, [r5, #36]	; 0x24
   219e0:	mov	r4, r3
   219e4:	bne	2199c <__assert_fail@plt+0xf2c8>
   219e8:	ldr	fp, [r6, #-8]
   219ec:	cmp	sl, #0
   219f0:	str	r9, [r6, #-4]
   219f4:	beq	21a10 <__assert_fail@plt+0xf33c>
   219f8:	ldr	r3, [r8, #4]
   219fc:	cmp	r3, r7
   21a00:	add	r6, r6, #8
   21a04:	bhi	21964 <__assert_fail@plt+0xf290>
   21a08:	mov	r0, #1
   21a0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a10:	mov	r0, r5
   21a14:	mov	r1, fp
   21a18:	bl	21760 <__assert_fail@plt+0xf08c>
   21a1c:	ldr	r3, [r0]
   21a20:	mov	r4, r0
   21a24:	cmp	r3, #0
   21a28:	beq	21a74 <__assert_fail@plt+0xf3a0>
   21a2c:	ldr	r0, [r5, #36]	; 0x24
   21a30:	cmp	r0, #0
   21a34:	beq	21a88 <__assert_fail@plt+0xf3b4>
   21a38:	ldr	r2, [r0, #4]
   21a3c:	str	r2, [r5, #36]	; 0x24
   21a40:	ldr	r2, [r4, #4]
   21a44:	str	fp, [r0]
   21a48:	str	r2, [r0, #4]
   21a4c:	str	r0, [r4, #4]
   21a50:	ldr	r3, [r8, #4]
   21a54:	add	r6, r6, #8
   21a58:	ldr	r2, [r8, #12]
   21a5c:	cmp	r3, r7
   21a60:	str	r9, [r6, #-16]
   21a64:	sub	r2, r2, #1
   21a68:	str	r2, [r8, #12]
   21a6c:	bhi	21964 <__assert_fail@plt+0xf290>
   21a70:	b	21a08 <__assert_fail@plt+0xf334>
   21a74:	ldr	r3, [r5, #12]
   21a78:	str	fp, [r0]
   21a7c:	add	r3, r3, #1
   21a80:	str	r3, [r5, #12]
   21a84:	b	21a50 <__assert_fail@plt+0xf37c>
   21a88:	mov	r0, #8
   21a8c:	bl	1232c <malloc@plt>
   21a90:	cmp	r0, #0
   21a94:	bne	21a40 <__assert_fail@plt+0xf36c>
   21a98:	mov	r0, sl
   21a9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21aa0:	ldr	r0, [r0, #8]
   21aa4:	bx	lr
   21aa8:	ldr	r0, [r0, #12]
   21aac:	bx	lr
   21ab0:	ldr	r0, [r0, #16]
   21ab4:	bx	lr
   21ab8:	ldr	r3, [r0]
   21abc:	ldr	r2, [r0, #4]
   21ac0:	cmp	r3, r2
   21ac4:	bcs	21b28 <__assert_fail@plt+0xf454>
   21ac8:	add	r1, r3, #8
   21acc:	add	r2, r2, #7
   21ad0:	rsb	r2, r1, r2
   21ad4:	add	r3, r3, #16
   21ad8:	bic	r2, r2, #7
   21adc:	mov	r0, #0
   21ae0:	add	ip, r3, r2
   21ae4:	ldr	r3, [r1, #-8]
   21ae8:	cmp	r3, #0
   21aec:	beq	21b18 <__assert_fail@plt+0xf444>
   21af0:	ldr	r3, [r1, #-4]
   21af4:	mov	r2, #1
   21af8:	cmp	r3, #0
   21afc:	beq	21b10 <__assert_fail@plt+0xf43c>
   21b00:	ldr	r3, [r3, #4]
   21b04:	add	r2, r2, #1
   21b08:	cmp	r3, #0
   21b0c:	bne	21b00 <__assert_fail@plt+0xf42c>
   21b10:	cmp	r0, r2
   21b14:	movcc	r0, r2
   21b18:	add	r1, r1, #8
   21b1c:	cmp	r1, ip
   21b20:	bne	21ae4 <__assert_fail@plt+0xf410>
   21b24:	bx	lr
   21b28:	mov	r0, #0
   21b2c:	bx	lr
   21b30:	ldr	r3, [r0]
   21b34:	ldr	r2, [r0, #4]
   21b38:	push	{r4}		; (str r4, [sp, #-4]!)
   21b3c:	cmp	r3, r2
   21b40:	bcs	21bd0 <__assert_fail@plt+0xf4fc>
   21b44:	add	r2, r2, #7
   21b48:	add	r1, r3, #8
   21b4c:	rsb	ip, r1, r2
   21b50:	add	r3, r3, #16
   21b54:	bic	ip, ip, #7
   21b58:	mov	r2, #0
   21b5c:	add	r4, r3, ip
   21b60:	mov	ip, r2
   21b64:	ldr	r3, [r1, #-8]
   21b68:	cmp	r3, #0
   21b6c:	beq	21b94 <__assert_fail@plt+0xf4c0>
   21b70:	ldr	r3, [r1, #-4]
   21b74:	add	ip, ip, #1
   21b78:	add	r2, r2, #1
   21b7c:	cmp	r3, #0
   21b80:	beq	21b94 <__assert_fail@plt+0xf4c0>
   21b84:	ldr	r3, [r3, #4]
   21b88:	add	r2, r2, #1
   21b8c:	cmp	r3, #0
   21b90:	bne	21b84 <__assert_fail@plt+0xf4b0>
   21b94:	add	r1, r1, #8
   21b98:	cmp	r1, r4
   21b9c:	bne	21b64 <__assert_fail@plt+0xf490>
   21ba0:	ldr	r3, [r0, #12]
   21ba4:	cmp	r3, ip
   21ba8:	movne	r0, #0
   21bac:	beq	21bb8 <__assert_fail@plt+0xf4e4>
   21bb0:	pop	{r4}		; (ldr r4, [sp], #4)
   21bb4:	bx	lr
   21bb8:	ldr	r0, [r0, #16]
   21bbc:	pop	{r4}		; (ldr r4, [sp], #4)
   21bc0:	subs	r3, r0, r2
   21bc4:	rsbs	r0, r3, #0
   21bc8:	adcs	r0, r0, r3
   21bcc:	bx	lr
   21bd0:	mov	r2, #0
   21bd4:	mov	ip, r2
   21bd8:	b	21ba0 <__assert_fail@plt+0xf4cc>
   21bdc:	push	{r4, r5, r6, r7, r8, lr}
   21be0:	mov	r2, r0
   21be4:	mov	r6, r1
   21be8:	ldr	r1, [r0]
   21bec:	ldr	r0, [r0, #4]
   21bf0:	sub	sp, sp, #8
   21bf4:	ldr	r3, [r2, #16]
   21bf8:	cmp	r1, r0
   21bfc:	ldr	r7, [r2, #8]
   21c00:	ldr	r8, [r2, #12]
   21c04:	bcs	21ce8 <__assert_fail@plt+0xf614>
   21c08:	add	lr, r1, #8
   21c0c:	add	r2, r0, #7
   21c10:	rsb	r2, lr, r2
   21c14:	add	r1, r1, #16
   21c18:	bic	r2, r2, #7
   21c1c:	mov	r4, #0
   21c20:	add	r5, r1, r2
   21c24:	ldr	r2, [lr, #-8]
   21c28:	cmp	r2, #0
   21c2c:	beq	21c58 <__assert_fail@plt+0xf584>
   21c30:	ldr	r2, [lr, #-4]
   21c34:	mov	ip, #1
   21c38:	cmp	r2, #0
   21c3c:	beq	21c50 <__assert_fail@plt+0xf57c>
   21c40:	ldr	r2, [r2, #4]
   21c44:	add	ip, ip, #1
   21c48:	cmp	r2, #0
   21c4c:	bne	21c40 <__assert_fail@plt+0xf56c>
   21c50:	cmp	r4, ip
   21c54:	movcc	r4, ip
   21c58:	add	lr, lr, #8
   21c5c:	cmp	lr, r5
   21c60:	bne	21c24 <__assert_fail@plt+0xf550>
   21c64:	mov	r0, r6
   21c68:	mov	r1, #1
   21c6c:	movw	r2, #15088	; 0x3af0
   21c70:	movt	r2, #3
   21c74:	bl	124d0 <__fprintf_chk@plt>
   21c78:	mov	r3, r7
   21c7c:	mov	r0, r6
   21c80:	mov	r1, #1
   21c84:	movw	r2, #15112	; 0x3b08
   21c88:	movt	r2, #3
   21c8c:	bl	124d0 <__fprintf_chk@plt>
   21c90:	vmov	s15, r8
   21c94:	vldr	d6, [pc, #84]	; 21cf0 <__assert_fail@plt+0xf61c>
   21c98:	mov	r3, r8
   21c9c:	vcvt.f64.u32	d5, s15
   21ca0:	mov	r0, r6
   21ca4:	mov	r1, #1
   21ca8:	movw	r2, #15136	; 0x3b20
   21cac:	movt	r2, #3
   21cb0:	vmul.f64	d6, d5, d6
   21cb4:	vmov	s11, r7
   21cb8:	vcvt.f64.u32	d7, s11
   21cbc:	vdiv.f64	d7, d6, d7
   21cc0:	vstr	d7, [sp]
   21cc4:	bl	124d0 <__fprintf_chk@plt>
   21cc8:	mov	r0, r6
   21ccc:	mov	r3, r4
   21cd0:	movw	r2, #15172	; 0x3b44
   21cd4:	mov	r1, #1
   21cd8:	movt	r2, #3
   21cdc:	add	sp, sp, #8
   21ce0:	pop	{r4, r5, r6, r7, r8, lr}
   21ce4:	b	124d0 <__fprintf_chk@plt>
   21ce8:	mov	r4, #0
   21cec:	b	21c64 <__assert_fail@plt+0xf590>
   21cf0:	andeq	r0, r0, r0
   21cf4:	subsmi	r0, r9, r0
   21cf8:	push	{r4, r5, r6, lr}
   21cfc:	mov	r6, r0
   21d00:	mov	r5, r1
   21d04:	bl	21760 <__assert_fail@plt+0xf08c>
   21d08:	ldr	r3, [r0]
   21d0c:	mov	r4, r0
   21d10:	cmp	r3, #0
   21d14:	bne	21d20 <__assert_fail@plt+0xf64c>
   21d18:	b	21d4c <__assert_fail@plt+0xf678>
   21d1c:	ldr	r3, [r4]
   21d20:	cmp	r5, r3
   21d24:	mov	r1, r3
   21d28:	mov	r0, r5
   21d2c:	beq	21d58 <__assert_fail@plt+0xf684>
   21d30:	ldr	r3, [r6, #28]
   21d34:	blx	r3
   21d38:	cmp	r0, #0
   21d3c:	bne	21d54 <__assert_fail@plt+0xf680>
   21d40:	ldr	r4, [r4, #4]
   21d44:	cmp	r4, #0
   21d48:	bne	21d1c <__assert_fail@plt+0xf648>
   21d4c:	mov	r0, #0
   21d50:	pop	{r4, r5, r6, pc}
   21d54:	ldr	r3, [r4]
   21d58:	mov	r0, r3
   21d5c:	pop	{r4, r5, r6, pc}
   21d60:	push	{r3, lr}
   21d64:	ldr	r3, [r0, #16]
   21d68:	cmp	r3, #0
   21d6c:	beq	21dac <__assert_fail@plt+0xf6d8>
   21d70:	ldr	r3, [r0]
   21d74:	ldr	r2, [r0, #4]
   21d78:	cmp	r3, r2
   21d7c:	bcs	21da8 <__assert_fail@plt+0xf6d4>
   21d80:	ldr	r0, [r3]
   21d84:	cmp	r0, #0
   21d88:	beq	21d9c <__assert_fail@plt+0xf6c8>
   21d8c:	b	21db4 <__assert_fail@plt+0xf6e0>
   21d90:	ldr	r0, [r3]
   21d94:	cmp	r0, #0
   21d98:	popne	{r3, pc}
   21d9c:	add	r3, r3, #8
   21da0:	cmp	r3, r2
   21da4:	bcc	21d90 <__assert_fail@plt+0xf6bc>
   21da8:	bl	12674 <abort@plt>
   21dac:	mov	r0, r3
   21db0:	pop	{r3, pc}
   21db4:	pop	{r3, pc}
   21db8:	push	{r3, r4, r5, lr}
   21dbc:	mov	r5, r0
   21dc0:	mov	r4, r1
   21dc4:	bl	21760 <__assert_fail@plt+0xf08c>
   21dc8:	mov	r2, r0
   21dcc:	mov	r3, r0
   21dd0:	b	21ddc <__assert_fail@plt+0xf708>
   21dd4:	cmp	r3, #0
   21dd8:	beq	21df4 <__assert_fail@plt+0xf720>
   21ddc:	ldr	ip, [r3]
   21de0:	ldr	r3, [r3, #4]
   21de4:	cmp	ip, r4
   21de8:	bne	21dd4 <__assert_fail@plt+0xf700>
   21dec:	cmp	r3, #0
   21df0:	bne	21e1c <__assert_fail@plt+0xf748>
   21df4:	ldr	r3, [r5, #4]
   21df8:	b	21e08 <__assert_fail@plt+0xf734>
   21dfc:	ldr	r0, [r2]
   21e00:	cmp	r0, #0
   21e04:	popne	{r3, r4, r5, pc}
   21e08:	add	r2, r2, #8
   21e0c:	cmp	r2, r3
   21e10:	bcc	21dfc <__assert_fail@plt+0xf728>
   21e14:	mov	r0, #0
   21e18:	pop	{r3, r4, r5, pc}
   21e1c:	ldr	r0, [r3]
   21e20:	pop	{r3, r4, r5, pc}
   21e24:	push	{r4, r5, r6, r7}
   21e28:	mov	r6, r0
   21e2c:	ldm	r0, {r5, ip}
   21e30:	cmp	ip, r5
   21e34:	bls	21eb8 <__assert_fail@plt+0xf7e4>
   21e38:	add	r5, r5, #8
   21e3c:	mov	r0, #0
   21e40:	ldr	r3, [r5, #-8]
   21e44:	mov	r7, r5
   21e48:	cmp	r3, #0
   21e4c:	beq	21e98 <__assert_fail@plt+0xf7c4>
   21e50:	cmp	r2, r0
   21e54:	bls	21ea4 <__assert_fail@plt+0xf7d0>
   21e58:	str	r3, [r1, r0, lsl #2]
   21e5c:	add	r4, r0, #1
   21e60:	ldr	r3, [r5, #-4]
   21e64:	add	ip, r1, r0, lsl #2
   21e68:	cmp	r3, #0
   21e6c:	beq	21eac <__assert_fail@plt+0xf7d8>
   21e70:	mov	r0, r4
   21e74:	cmp	r0, r2
   21e78:	beq	21ea4 <__assert_fail@plt+0xf7d0>
   21e7c:	ldr	r4, [r3]
   21e80:	add	r0, r0, #1
   21e84:	str	r4, [ip, #4]!
   21e88:	ldr	r3, [r3, #4]
   21e8c:	cmp	r3, #0
   21e90:	bne	21e74 <__assert_fail@plt+0xf7a0>
   21e94:	ldr	ip, [r6, #4]
   21e98:	cmp	ip, r7
   21e9c:	add	r5, r5, #8
   21ea0:	bhi	21e40 <__assert_fail@plt+0xf76c>
   21ea4:	pop	{r4, r5, r6, r7}
   21ea8:	bx	lr
   21eac:	ldr	ip, [r6, #4]
   21eb0:	mov	r0, r4
   21eb4:	b	21e98 <__assert_fail@plt+0xf7c4>
   21eb8:	mov	r0, #0
   21ebc:	b	21ea4 <__assert_fail@plt+0xf7d0>
   21ec0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   21ec4:	mov	r7, r2
   21ec8:	ldr	r8, [r0]
   21ecc:	mov	r9, r0
   21ed0:	ldr	r2, [r0, #4]
   21ed4:	mov	r6, r1
   21ed8:	mov	r5, #0
   21edc:	cmp	r2, r8
   21ee0:	bls	21f30 <__assert_fail@plt+0xf85c>
   21ee4:	ldr	r3, [r8]
   21ee8:	cmp	r3, #0
   21eec:	beq	21f24 <__assert_fail@plt+0xf850>
   21ef0:	mov	r0, r3
   21ef4:	mov	r4, r8
   21ef8:	b	21f00 <__assert_fail@plt+0xf82c>
   21efc:	ldr	r0, [r4]
   21f00:	mov	r1, r7
   21f04:	blx	r6
   21f08:	cmp	r0, #0
   21f0c:	beq	21f30 <__assert_fail@plt+0xf85c>
   21f10:	ldr	r4, [r4, #4]
   21f14:	add	r5, r5, #1
   21f18:	cmp	r4, #0
   21f1c:	bne	21efc <__assert_fail@plt+0xf828>
   21f20:	ldr	r2, [r9, #4]
   21f24:	add	r8, r8, #8
   21f28:	cmp	r2, r8
   21f2c:	bhi	21ee4 <__assert_fail@plt+0xf810>
   21f30:	mov	r0, r5
   21f34:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   21f38:	push	{r3, r4, r5, lr}
   21f3c:	mov	r5, r1
   21f40:	ldrb	r3, [r0]
   21f44:	cmp	r3, #0
   21f48:	beq	21f78 <__assert_fail@plt+0xf8a4>
   21f4c:	mov	r4, r0
   21f50:	mov	r1, #0
   21f54:	rsb	r0, r1, r1, lsl #5
   21f58:	mov	r1, r5
   21f5c:	add	r0, r3, r0
   21f60:	bl	2e130 <fts_children@@Base+0x1d64>
   21f64:	ldrb	r3, [r4, #1]!
   21f68:	cmp	r3, #0
   21f6c:	bne	21f54 <__assert_fail@plt+0xf880>
   21f70:	mov	r0, r1
   21f74:	pop	{r3, r4, r5, pc}
   21f78:	mov	r1, r3
   21f7c:	b	21f70 <__assert_fail@plt+0xf89c>
   21f80:	movw	ip, #15068	; 0x3adc
   21f84:	movt	ip, #3
   21f88:	push	{r4}		; (str r4, [sp, #-4]!)
   21f8c:	mov	r4, r0
   21f90:	ldm	ip!, {r0, r1, r2, r3}
   21f94:	ldr	ip, [ip]
   21f98:	stmia	r4!, {r0, r1, r2, r3}
   21f9c:	str	ip, [r4]
   21fa0:	pop	{r4}		; (ldr r4, [sp], #4)
   21fa4:	bx	lr
   21fa8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   21fac:	cmp	r2, #0
   21fb0:	movw	lr, #5948	; 0x173c
   21fb4:	movt	lr, #2
   21fb8:	movne	r8, r2
   21fbc:	movw	ip, #5968	; 0x1750
   21fc0:	moveq	r8, lr
   21fc4:	movt	ip, #2
   21fc8:	cmp	r3, #0
   21fcc:	mov	r7, r0
   21fd0:	mov	r0, #40	; 0x28
   21fd4:	mov	r5, r1
   21fd8:	movne	r9, r3
   21fdc:	moveq	r9, ip
   21fe0:	bl	1232c <malloc@plt>
   21fe4:	subs	r4, r0, #0
   21fe8:	beq	220c0 <__assert_fail@plt+0xf9ec>
   21fec:	cmp	r5, #0
   21ff0:	movw	r6, #15068	; 0x3adc
   21ff4:	movt	r6, #3
   21ff8:	mov	r0, r4
   21ffc:	moveq	r5, r6
   22000:	str	r5, [r0, #20]!
   22004:	bl	21890 <__assert_fail@plt+0xf1bc>
   22008:	cmp	r0, #0
   2200c:	beq	220b0 <__assert_fail@plt+0xf9dc>
   22010:	ldrb	r3, [r5, #16]
   22014:	vldr	s15, [r5, #8]
   22018:	cmp	r3, #0
   2201c:	bne	22044 <__assert_fail@plt+0xf970>
   22020:	vmov	s14, r7
   22024:	vcvt.f32.u32	s13, s14
   22028:	vldr	s14, [pc, #152]	; 220c8 <__assert_fail@plt+0xf9f4>
   2202c:	vdiv.f32	s15, s13, s15
   22030:	vcmpe.f32	s15, s14
   22034:	vmrs	APSR_nzcv, fpscr
   22038:	bge	220a8 <__assert_fail@plt+0xf9d4>
   2203c:	vcvt.u32.f32	s15, s15
   22040:	vmov	r7, s15
   22044:	mov	r0, r7
   22048:	bl	21690 <__assert_fail@plt+0xefbc>
   2204c:	cmn	r0, #-1073741823	; 0xc0000001
   22050:	mov	r5, r0
   22054:	bhi	220a8 <__assert_fail@plt+0xf9d4>
   22058:	cmp	r0, #0
   2205c:	str	r0, [r4, #8]
   22060:	beq	220b0 <__assert_fail@plt+0xf9dc>
   22064:	mov	r1, #8
   22068:	bl	12014 <calloc@plt>
   2206c:	cmp	r0, #0
   22070:	str	r0, [r4]
   22074:	beq	220b0 <__assert_fail@plt+0xf9dc>
   22078:	ldr	r1, [sp, #32]
   2207c:	mov	r3, #0
   22080:	add	r5, r0, r5, lsl #3
   22084:	str	r8, [r4, #24]
   22088:	str	r5, [r4, #4]
   2208c:	mov	r0, r4
   22090:	str	r9, [r4, #28]
   22094:	str	r1, [r4, #32]
   22098:	str	r3, [r4, #12]
   2209c:	str	r3, [r4, #16]
   220a0:	str	r3, [r4, #36]	; 0x24
   220a4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   220a8:	mov	r3, #0
   220ac:	str	r3, [r4, #8]
   220b0:	mov	r0, r4
   220b4:	bl	120c8 <free@plt>
   220b8:	mov	r0, #0
   220bc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   220c0:	mov	r0, r4
   220c4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   220c8:	svcmi	0x00800000
   220cc:	push	{r4, r5, r6, r7, r8, lr}
   220d0:	mov	r5, r0
   220d4:	ldr	r7, [r0]
   220d8:	ldr	r3, [r0, #4]
   220dc:	cmp	r7, r3
   220e0:	addcc	r7, r7, #8
   220e4:	movcc	r6, #0
   220e8:	bcs	22168 <__assert_fail@plt+0xfa94>
   220ec:	ldr	r2, [r7, #-8]
   220f0:	mov	r8, r7
   220f4:	cmp	r2, #0
   220f8:	beq	2215c <__assert_fail@plt+0xfa88>
   220fc:	ldr	r4, [r7, #-4]
   22100:	ldr	r2, [r5, #32]
   22104:	cmp	r4, #0
   22108:	beq	22140 <__assert_fail@plt+0xfa6c>
   2210c:	cmp	r2, #0
   22110:	beq	22120 <__assert_fail@plt+0xfa4c>
   22114:	ldr	r0, [r4]
   22118:	blx	r2
   2211c:	ldr	r2, [r5, #32]
   22120:	ldr	r3, [r4, #4]
   22124:	ldr	r1, [r5, #36]	; 0x24
   22128:	cmp	r3, #0
   2212c:	str	r6, [r4]
   22130:	str	r1, [r4, #4]
   22134:	str	r4, [r5, #36]	; 0x24
   22138:	mov	r4, r3
   2213c:	bne	2210c <__assert_fail@plt+0xfa38>
   22140:	cmp	r2, #0
   22144:	beq	22150 <__assert_fail@plt+0xfa7c>
   22148:	ldr	r0, [r7, #-8]
   2214c:	blx	r2
   22150:	ldr	r3, [r5, #4]
   22154:	str	r6, [r7, #-8]
   22158:	str	r6, [r7, #-4]
   2215c:	cmp	r3, r8
   22160:	add	r7, r7, #8
   22164:	bhi	220ec <__assert_fail@plt+0xfa18>
   22168:	mov	r3, #0
   2216c:	str	r3, [r5, #12]
   22170:	str	r3, [r5, #16]
   22174:	pop	{r4, r5, r6, r7, r8, pc}
   22178:	push	{r3, r4, r5, r6, r7, lr}
   2217c:	mov	r5, r0
   22180:	ldr	r3, [r0, #32]
   22184:	cmp	r3, #0
   22188:	beq	22198 <__assert_fail@plt+0xfac4>
   2218c:	ldr	r3, [r0, #16]
   22190:	cmp	r3, #0
   22194:	bne	22214 <__assert_fail@plt+0xfb40>
   22198:	ldr	r3, [r5, #4]
   2219c:	ldr	r6, [r5]
   221a0:	cmp	r6, r3
   221a4:	bcs	221e0 <__assert_fail@plt+0xfb0c>
   221a8:	add	r6, r6, #8
   221ac:	ldr	r0, [r6, #-4]
   221b0:	mov	r7, r6
   221b4:	cmp	r0, #0
   221b8:	beq	221d4 <__assert_fail@plt+0xfb00>
   221bc:	ldr	r4, [r0, #4]
   221c0:	bl	120c8 <free@plt>
   221c4:	cmp	r4, #0
   221c8:	mov	r0, r4
   221cc:	bne	221bc <__assert_fail@plt+0xfae8>
   221d0:	ldr	r3, [r5, #4]
   221d4:	cmp	r7, r3
   221d8:	add	r6, r6, #8
   221dc:	bcc	221ac <__assert_fail@plt+0xfad8>
   221e0:	ldr	r0, [r5, #36]	; 0x24
   221e4:	cmp	r0, #0
   221e8:	beq	22200 <__assert_fail@plt+0xfb2c>
   221ec:	ldr	r4, [r0, #4]
   221f0:	bl	120c8 <free@plt>
   221f4:	cmp	r4, #0
   221f8:	mov	r0, r4
   221fc:	bne	221ec <__assert_fail@plt+0xfb18>
   22200:	ldr	r0, [r5]
   22204:	bl	120c8 <free@plt>
   22208:	mov	r0, r5
   2220c:	pop	{r3, r4, r5, r6, r7, lr}
   22210:	b	120c8 <free@plt>
   22214:	ldr	r6, [r0]
   22218:	ldr	r3, [r0, #4]
   2221c:	cmp	r6, r3
   22220:	bcs	221e0 <__assert_fail@plt+0xfb0c>
   22224:	ldr	r0, [r6]
   22228:	cmp	r0, #0
   2222c:	movne	r4, r6
   22230:	bne	2223c <__assert_fail@plt+0xfb68>
   22234:	b	22254 <__assert_fail@plt+0xfb80>
   22238:	ldr	r0, [r4]
   2223c:	ldr	r3, [r5, #32]
   22240:	blx	r3
   22244:	ldr	r4, [r4, #4]
   22248:	cmp	r4, #0
   2224c:	bne	22238 <__assert_fail@plt+0xfb64>
   22250:	ldr	r3, [r5, #4]
   22254:	add	r6, r6, #8
   22258:	cmp	r3, r6
   2225c:	bhi	22224 <__assert_fail@plt+0xfb50>
   22260:	b	2219c <__assert_fail@plt+0xfac8>
   22264:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22268:	movw	r5, #26008	; 0x6598
   2226c:	ldr	r6, [r0, #20]
   22270:	movt	r5, #4
   22274:	sub	sp, sp, #48	; 0x30
   22278:	mov	r4, r0
   2227c:	ldr	r3, [r5]
   22280:	vldr	s15, [r6, #8]
   22284:	ldrb	r2, [r6, #16]
   22288:	cmp	r2, #0
   2228c:	str	r3, [sp, #44]	; 0x2c
   22290:	bne	222b8 <__assert_fail@plt+0xfbe4>
   22294:	vmov	s14, r1
   22298:	vcvt.f32.u32	s13, s14
   2229c:	vldr	s14, [pc, #320]	; 223e4 <__assert_fail@plt+0xfd10>
   222a0:	vdiv.f32	s15, s13, s15
   222a4:	vcmpe.f32	s15, s14
   222a8:	vmrs	APSR_nzcv, fpscr
   222ac:	bge	223ac <__assert_fail@plt+0xfcd8>
   222b0:	vcvt.u32.f32	s15, s15
   222b4:	vmov	r1, s15
   222b8:	mov	r0, r1
   222bc:	bl	21690 <__assert_fail@plt+0xefbc>
   222c0:	sub	r3, r0, #1
   222c4:	mov	r7, r0
   222c8:	cmn	r3, #-1073741822	; 0xc0000002
   222cc:	bhi	223ac <__assert_fail@plt+0xfcd8>
   222d0:	ldr	r3, [r4, #8]
   222d4:	cmp	r3, r0
   222d8:	beq	2238c <__assert_fail@plt+0xfcb8>
   222dc:	mov	r1, #8
   222e0:	bl	12014 <calloc@plt>
   222e4:	cmp	r0, #0
   222e8:	mov	r3, r0
   222ec:	str	r0, [sp, #4]
   222f0:	beq	223ac <__assert_fail@plt+0xfcd8>
   222f4:	ldr	sl, [r4, #24]
   222f8:	mov	ip, #0
   222fc:	ldr	r9, [r4, #28]
   22300:	add	r0, sp, #4
   22304:	ldr	r8, [r4, #32]
   22308:	mov	r2, ip
   2230c:	ldr	lr, [r4, #36]	; 0x24
   22310:	mov	r1, r4
   22314:	add	r3, r3, r7, lsl #3
   22318:	str	r6, [sp, #24]
   2231c:	str	r7, [sp, #12]
   22320:	str	r3, [sp, #8]
   22324:	str	sl, [sp, #28]
   22328:	str	r9, [sp, #32]
   2232c:	str	r8, [sp, #36]	; 0x24
   22330:	str	lr, [sp, #40]	; 0x28
   22334:	str	ip, [sp, #16]
   22338:	str	ip, [sp, #20]
   2233c:	bl	2193c <__assert_fail@plt+0xf268>
   22340:	subs	r6, r0, #0
   22344:	bne	223b4 <__assert_fail@plt+0xfce0>
   22348:	ldr	r3, [sp, #40]	; 0x28
   2234c:	mov	r0, r4
   22350:	add	r1, sp, #4
   22354:	mov	r2, #1
   22358:	str	r3, [r4, #36]	; 0x24
   2235c:	bl	2193c <__assert_fail@plt+0xf268>
   22360:	cmp	r0, #0
   22364:	beq	223e0 <__assert_fail@plt+0xfd0c>
   22368:	mov	r0, r4
   2236c:	add	r1, sp, #4
   22370:	mov	r2, r6
   22374:	bl	2193c <__assert_fail@plt+0xf268>
   22378:	cmp	r0, #0
   2237c:	beq	223e0 <__assert_fail@plt+0xfd0c>
   22380:	ldr	r0, [sp, #4]
   22384:	bl	120c8 <free@plt>
   22388:	b	22390 <__assert_fail@plt+0xfcbc>
   2238c:	mov	r6, #1
   22390:	ldr	r1, [sp, #44]	; 0x2c
   22394:	mov	r0, r6
   22398:	ldr	r3, [r5]
   2239c:	cmp	r1, r3
   223a0:	bne	223dc <__assert_fail@plt+0xfd08>
   223a4:	add	sp, sp, #48	; 0x30
   223a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   223ac:	mov	r6, #0
   223b0:	b	22390 <__assert_fail@plt+0xfcbc>
   223b4:	ldr	r0, [r4]
   223b8:	bl	120c8 <free@plt>
   223bc:	add	r0, sp, #8
   223c0:	ldr	ip, [sp, #4]
   223c4:	ldm	r0, {r0, r1, r2}
   223c8:	ldr	r3, [sp, #40]	; 0x28
   223cc:	str	ip, [r4]
   223d0:	stmib	r4, {r0, r1, r2}
   223d4:	str	r3, [r4, #36]	; 0x24
   223d8:	b	22390 <__assert_fail@plt+0xfcbc>
   223dc:	bl	12188 <__stack_chk_fail@plt>
   223e0:	bl	12674 <abort@plt>
   223e4:	svcmi	0x00800000
   223e8:	push	{r4, r5, r6, r7, lr}
   223ec:	movw	r4, #26008	; 0x6598
   223f0:	movt	r4, #4
   223f4:	sub	sp, sp, #12
   223f8:	subs	r7, r1, #0
   223fc:	mov	r5, r2
   22400:	ldr	r3, [r4]
   22404:	mov	r6, r0
   22408:	str	r3, [sp, #4]
   2240c:	beq	22548 <__assert_fail@plt+0xfe74>
   22410:	mov	r3, #0
   22414:	mov	r2, sp
   22418:	bl	21794 <__assert_fail@plt+0xf0c0>
   2241c:	cmp	r0, #0
   22420:	beq	2244c <__assert_fail@plt+0xfd78>
   22424:	cmp	r5, #0
   22428:	moveq	r0, r5
   2242c:	strne	r0, [r5]
   22430:	movne	r0, #0
   22434:	ldr	r2, [sp, #4]
   22438:	ldr	r3, [r4]
   2243c:	cmp	r2, r3
   22440:	bne	22588 <__assert_fail@plt+0xfeb4>
   22444:	add	sp, sp, #12
   22448:	pop	{r4, r5, r6, r7, pc}
   2244c:	vldr	s11, [r6, #8]
   22450:	vcvt.f32.u32	s14, s11
   22454:	ldr	r3, [r6, #20]
   22458:	vldr	s15, [r3, #8]
   2245c:	vldr	s13, [r6, #12]
   22460:	vmul.f32	s15, s14, s15
   22464:	vcvt.f32.u32	s14, s13
   22468:	vcmpe.f32	s14, s15
   2246c:	vmrs	APSR_nzcv, fpscr
   22470:	bgt	224bc <__assert_fail@plt+0xfde8>
   22474:	ldr	r5, [sp]
   22478:	ldr	r3, [r5]
   2247c:	cmp	r3, #0
   22480:	beq	2254c <__assert_fail@plt+0xfe78>
   22484:	ldr	r3, [r6, #36]	; 0x24
   22488:	cmp	r3, #0
   2248c:	beq	22570 <__assert_fail@plt+0xfe9c>
   22490:	ldr	r2, [r3, #4]
   22494:	str	r2, [r6, #36]	; 0x24
   22498:	ldr	r1, [r5, #4]
   2249c:	mov	r0, #1
   224a0:	ldr	r2, [r6, #16]
   224a4:	str	r7, [r3]
   224a8:	str	r1, [r3, #4]
   224ac:	add	r2, r2, r0
   224b0:	str	r3, [r5, #4]
   224b4:	str	r2, [r6, #16]
   224b8:	b	22434 <__assert_fail@plt+0xfd60>
   224bc:	add	r0, r6, #20
   224c0:	bl	21890 <__assert_fail@plt+0xf1bc>
   224c4:	vldr	s11, [r6, #8]
   224c8:	vcvt.f32.u32	s15, s11
   224cc:	ldr	r3, [r6, #20]
   224d0:	vldr	s14, [r3, #8]
   224d4:	vldr	s11, [r6, #12]
   224d8:	vmul.f32	s13, s14, s15
   224dc:	vcvt.f32.u32	s12, s11
   224e0:	vcmpe.f32	s12, s13
   224e4:	vmrs	APSR_nzcv, fpscr
   224e8:	ble	22474 <__assert_fail@plt+0xfda0>
   224ec:	ldrb	r2, [r3, #16]
   224f0:	cmp	r2, #0
   224f4:	vldreq	s13, [r3, #12]
   224f8:	vldrne	s14, [r3, #12]
   224fc:	vmuleq.f32	s15, s15, s13
   22500:	vmul.f32	s15, s14, s15
   22504:	vldr	s14, [pc, #128]	; 2258c <__assert_fail@plt+0xfeb8>
   22508:	vcmpe.f32	s15, s14
   2250c:	vmrs	APSR_nzcv, fpscr
   22510:	bge	22580 <__assert_fail@plt+0xfeac>
   22514:	vcvt.u32.f32	s15, s15
   22518:	mov	r0, r6
   2251c:	vmov	r1, s15
   22520:	bl	22264 <__assert_fail@plt+0xfb90>
   22524:	cmp	r0, #0
   22528:	beq	22580 <__assert_fail@plt+0xfeac>
   2252c:	mov	r2, sp
   22530:	mov	r0, r6
   22534:	mov	r1, r7
   22538:	mov	r3, #0
   2253c:	bl	21794 <__assert_fail@plt+0xf0c0>
   22540:	cmp	r0, #0
   22544:	beq	22474 <__assert_fail@plt+0xfda0>
   22548:	bl	12674 <abort@plt>
   2254c:	ldr	r2, [r6, #16]
   22550:	mov	r0, #1
   22554:	ldr	r3, [r6, #12]
   22558:	add	r2, r2, r0
   2255c:	str	r7, [r5]
   22560:	add	r3, r3, r0
   22564:	str	r2, [r6, #16]
   22568:	str	r3, [r6, #12]
   2256c:	b	22434 <__assert_fail@plt+0xfd60>
   22570:	mov	r0, #8
   22574:	bl	1232c <malloc@plt>
   22578:	subs	r3, r0, #0
   2257c:	bne	22498 <__assert_fail@plt+0xfdc4>
   22580:	mvn	r0, #0
   22584:	b	22434 <__assert_fail@plt+0xfd60>
   22588:	bl	12188 <__stack_chk_fail@plt>
   2258c:	svcmi	0x00800000
   22590:	b	223e8 <__assert_fail@plt+0xfd14>
   22594:	push	{r4, r5, lr}
   22598:	movw	r4, #26008	; 0x6598
   2259c:	movt	r4, #4
   225a0:	sub	sp, sp, #12
   225a4:	mov	r5, r1
   225a8:	ldr	r3, [r4]
   225ac:	mov	r2, sp
   225b0:	str	r3, [sp, #4]
   225b4:	bl	223e8 <__assert_fail@plt+0xfd14>
   225b8:	cmn	r0, #1
   225bc:	beq	225ec <__assert_fail@plt+0xff18>
   225c0:	cmp	r0, #0
   225c4:	movne	r0, r5
   225c8:	beq	225e4 <__assert_fail@plt+0xff10>
   225cc:	ldr	r2, [sp, #4]
   225d0:	ldr	r3, [r4]
   225d4:	cmp	r2, r3
   225d8:	bne	225f4 <__assert_fail@plt+0xff20>
   225dc:	add	sp, sp, #12
   225e0:	pop	{r4, r5, pc}
   225e4:	ldr	r0, [sp]
   225e8:	b	225cc <__assert_fail@plt+0xfef8>
   225ec:	mov	r0, #0
   225f0:	b	225cc <__assert_fail@plt+0xfef8>
   225f4:	bl	12188 <__stack_chk_fail@plt>
   225f8:	push	{r4, r5, r6, r7, lr}
   225fc:	movw	r4, #26008	; 0x6598
   22600:	movt	r4, #4
   22604:	sub	sp, sp, #12
   22608:	mov	r3, #1
   2260c:	mov	r5, r0
   22610:	ldr	ip, [r4]
   22614:	mov	r2, sp
   22618:	str	ip, [sp, #4]
   2261c:	bl	21794 <__assert_fail@plt+0xf0c0>
   22620:	subs	r6, r0, #0
   22624:	beq	22644 <__assert_fail@plt+0xff70>
   22628:	ldr	r3, [sp]
   2262c:	ldr	r2, [r5, #16]
   22630:	ldr	r3, [r3]
   22634:	sub	r2, r2, #1
   22638:	str	r2, [r5, #16]
   2263c:	cmp	r3, #0
   22640:	beq	22660 <__assert_fail@plt+0xff8c>
   22644:	ldr	r2, [sp, #4]
   22648:	mov	r0, r6
   2264c:	ldr	r3, [r4]
   22650:	cmp	r2, r3
   22654:	bne	22724 <__assert_fail@plt+0x10050>
   22658:	add	sp, sp, #12
   2265c:	pop	{r4, r5, r6, r7, pc}
   22660:	vldr	s12, [r5, #8]
   22664:	vcvt.f32.u32	s14, s12
   22668:	ldr	r3, [r5, #20]
   2266c:	vldr	s15, [r3]
   22670:	ldr	r3, [r5, #12]
   22674:	sub	r3, r3, #1
   22678:	str	r3, [r5, #12]
   2267c:	vmov	s13, r3
   22680:	vmul.f32	s15, s14, s15
   22684:	vcvt.f32.u32	s14, s13
   22688:	vcmpe.f32	s14, s15
   2268c:	vmrs	APSR_nzcv, fpscr
   22690:	bpl	22644 <__assert_fail@plt+0xff70>
   22694:	add	r0, r5, #20
   22698:	bl	21890 <__assert_fail@plt+0xf1bc>
   2269c:	vldr	s12, [r5, #8]
   226a0:	vcvt.f32.u32	s15, s12
   226a4:	ldr	r3, [r5, #20]
   226a8:	vldr	s14, [r3]
   226ac:	vldr	s12, [r5, #12]
   226b0:	vmul.f32	s14, s15, s14
   226b4:	vcvt.f32.u32	s13, s12
   226b8:	vcmpe.f32	s13, s14
   226bc:	vmrs	APSR_nzcv, fpscr
   226c0:	bpl	22644 <__assert_fail@plt+0xff70>
   226c4:	vldr	s14, [r3, #4]
   226c8:	vmul.f32	s15, s15, s14
   226cc:	ldrb	r2, [r3, #16]
   226d0:	mov	r0, r5
   226d4:	cmp	r2, #0
   226d8:	vldreq	s14, [r3, #8]
   226dc:	vmuleq.f32	s15, s15, s14
   226e0:	vcvt.u32.f32	s15, s15
   226e4:	vmov	r1, s15
   226e8:	bl	22264 <__assert_fail@plt+0xfb90>
   226ec:	cmp	r0, #0
   226f0:	bne	22644 <__assert_fail@plt+0xff70>
   226f4:	ldr	r0, [r5, #36]	; 0x24
   226f8:	cmp	r0, #0
   226fc:	bne	22708 <__assert_fail@plt+0x10034>
   22700:	b	22718 <__assert_fail@plt+0x10044>
   22704:	mov	r0, r7
   22708:	ldr	r7, [r0, #4]
   2270c:	bl	120c8 <free@plt>
   22710:	cmp	r7, #0
   22714:	bne	22704 <__assert_fail@plt+0x10030>
   22718:	mov	r3, #0
   2271c:	str	r3, [r5, #36]	; 0x24
   22720:	b	22644 <__assert_fail@plt+0xff70>
   22724:	bl	12188 <__stack_chk_fail@plt>
   22728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2272c:	vpush	{d8-d9}
   22730:	movw	r4, #26008	; 0x6598
   22734:	sub	sp, sp, #132	; 0x84
   22738:	movt	r4, #4
   2273c:	ands	r5, r3, #32
   22740:	mov	r7, r1
   22744:	str	r3, [sp, #24]
   22748:	mov	r6, r0
   2274c:	ldr	r3, [r4]
   22750:	moveq	ip, #1000	; 0x3e8
   22754:	movne	ip, #1024	; 0x400
   22758:	str	r5, [sp, #52]	; 0x34
   2275c:	ldr	r5, [sp, #24]
   22760:	str	r2, [sp, #28]
   22764:	str	r3, [sp, #124]	; 0x7c
   22768:	and	r5, r5, #3
   2276c:	str	r4, [sp, #32]
   22770:	add	r4, r2, #648	; 0x288
   22774:	str	ip, [sp, #64]	; 0x40
   22778:	str	r4, [sp, #40]	; 0x28
   2277c:	str	r5, [sp, #48]	; 0x30
   22780:	bl	12590 <localeconv@plt>
   22784:	ldr	r5, [sp, #40]	; 0x28
   22788:	str	r5, [sp, #44]	; 0x2c
   2278c:	ldr	ip, [r0]
   22790:	mov	r4, r0
   22794:	mov	r0, ip
   22798:	str	ip, [sp, #36]	; 0x24
   2279c:	bl	123d4 <strlen@plt>
   227a0:	ldr	r9, [r4, #4]
   227a4:	ldr	ip, [sp, #36]	; 0x24
   227a8:	ldr	r8, [r4, #8]
   227ac:	sub	r3, r0, #1
   227b0:	mov	sl, r0
   227b4:	cmp	r3, #16
   227b8:	movw	r3, #7340	; 0x1cac
   227bc:	movt	r3, #3
   227c0:	mov	r0, r9
   227c4:	movcs	sl, #1
   227c8:	movcs	ip, r3
   227cc:	str	ip, [sp, #36]	; 0x24
   227d0:	bl	123d4 <strlen@plt>
   227d4:	movw	r3, #15168	; 0x3b40
   227d8:	ldrd	r4, [sp, #192]	; 0xc0
   227dc:	movt	r3, #3
   227e0:	cmp	r0, #16
   227e4:	ldrd	r0, [sp, #184]	; 0xb8
   227e8:	movhi	r9, r3
   227ec:	cmp	r5, r1
   227f0:	cmpeq	r4, r0
   227f4:	bhi	22a38 <__assert_fail@plt+0x10364>
   227f8:	mov	r2, r4
   227fc:	mov	r3, r5
   22800:	bl	2e550 <fts_children@@Base+0x2184>
   22804:	orrs	r1, r2, r3
   22808:	bne	22848 <__assert_fail@plt+0x10174>
   2280c:	ldrd	r2, [sp, #192]	; 0xc0
   22810:	ldrd	r0, [sp, #184]	; 0xb8
   22814:	bl	2e550 <fts_children@@Base+0x2184>
   22818:	mul	r2, r0, r7
   2281c:	mov	r3, r1
   22820:	umull	r4, r5, r0, r6
   22824:	mla	r1, r6, r1, r2
   22828:	mov	r2, r0
   2282c:	add	r5, r1, r5
   22830:	mov	r0, r4
   22834:	mov	r1, r5
   22838:	bl	2e550 <fts_children@@Base+0x2184>
   2283c:	cmp	r1, r7
   22840:	cmpeq	r0, r6
   22844:	beq	22e38 <__assert_fail@plt+0x10764>
   22848:	mov	r0, r6
   2284c:	mov	r1, r7
   22850:	bl	2e494 <fts_children@@Base+0x20c8>
   22854:	vmov	d9, r0, r1
   22858:	ldrd	r0, [sp, #184]	; 0xb8
   2285c:	bl	2e494 <fts_children@@Base+0x20c8>
   22860:	vmov	d8, r0, r1
   22864:	ldrd	r0, [sp, #192]	; 0xc0
   22868:	bl	2e494 <fts_children@@Base+0x20c8>
   2286c:	ldr	r4, [sp, #24]
   22870:	tst	r4, #16
   22874:	vmov	d7, r0, r1
   22878:	vdiv.f64	d8, d8, d7
   2287c:	vmul.f64	d8, d9, d8
   22880:	beq	22be0 <__assert_fail@plt+0x1050c>
   22884:	vldr	s15, [sp, #64]	; 0x40
   22888:	mov	r6, #0
   2288c:	vcvt.f64.s32	d6, s15
   22890:	vmov.f64	d7, d6
   22894:	add	r6, r6, #1
   22898:	vmov.f64	d5, d7
   2289c:	vmul.f64	d7, d7, d6
   228a0:	vcmpe.f64	d8, d7
   228a4:	vmrs	APSR_nzcv, fpscr
   228a8:	blt	228b4 <__assert_fail@plt+0x101e0>
   228ac:	cmp	r6, #8
   228b0:	bne	22894 <__assert_fail@plt+0x101c0>
   228b4:	vdiv.f64	d8, d8, d5
   228b8:	ldr	r4, [sp, #48]	; 0x30
   228bc:	cmp	r4, #1
   228c0:	vmoveq	r0, r1, d8
   228c4:	beq	22924 <__assert_fail@plt+0x10250>
   228c8:	vldr	d7, [pc, #776]	; 22bd8 <__assert_fail@plt+0x10504>
   228cc:	vcmpe.f64	d8, d7
   228d0:	vmov	r0, r1, d8
   228d4:	vmrs	APSR_nzcv, fpscr
   228d8:	bpl	22924 <__assert_fail@plt+0x10250>
   228dc:	bl	2e5a0 <fts_children@@Base+0x21d4>
   228e0:	ldr	ip, [sp, #48]	; 0x30
   228e4:	cmp	ip, #0
   228e8:	mov	r4, r0
   228ec:	mov	r5, r1
   228f0:	movne	r0, #0
   228f4:	movne	r1, #0
   228f8:	bne	22918 <__assert_fail@plt+0x10244>
   228fc:	bl	2e494 <fts_children@@Base+0x20c8>
   22900:	vmov	d7, r0, r1
   22904:	ldr	r1, [sp, #48]	; 0x30
   22908:	vcmp.f64	d8, d7
   2290c:	vmrs	APSR_nzcv, fpscr
   22910:	moveq	r0, #0
   22914:	movne	r0, #1
   22918:	adds	r0, r0, r4
   2291c:	adc	r1, r1, r5
   22920:	bl	2e494 <fts_children@@Base+0x20c8>
   22924:	strd	r0, [sp]
   22928:	mvn	r2, #0
   2292c:	mov	r1, #1
   22930:	movw	r3, #15236	; 0x3b84
   22934:	ldr	r0, [sp, #28]
   22938:	movt	r3, #3
   2293c:	bl	12440 <__sprintf_chk@plt>
   22940:	ldr	r0, [sp, #28]
   22944:	bl	123d4 <strlen@plt>
   22948:	ldr	r4, [sp, #52]	; 0x34
   2294c:	add	sl, sl, #1
   22950:	cmp	r4, #0
   22954:	movne	r3, #1
   22958:	moveq	r3, #2
   2295c:	add	r3, r3, sl
   22960:	mov	fp, r0
   22964:	cmp	r0, r3
   22968:	bhi	2298c <__assert_fail@plt+0x102b8>
   2296c:	ldr	r5, [sp, #24]
   22970:	tst	r5, #8
   22974:	beq	22c2c <__assert_fail@plt+0x10558>
   22978:	ldr	ip, [sp, #28]
   2297c:	add	r3, ip, r0
   22980:	ldrb	r3, [r3, #-1]
   22984:	cmp	r3, #48	; 0x30
   22988:	bne	22c2c <__assert_fail@plt+0x10558>
   2298c:	vmov.f64	d5, #36	; 0x41200000  10.0
   22990:	ldr	r4, [sp, #48]	; 0x30
   22994:	cmp	r4, #1
   22998:	vmul.f64	d8, d8, d5
   2299c:	beq	22a00 <__assert_fail@plt+0x1032c>
   229a0:	vldr	d7, [pc, #560]	; 22bd8 <__assert_fail@plt+0x10504>
   229a4:	vcmpe.f64	d8, d7
   229a8:	vmrs	APSR_nzcv, fpscr
   229ac:	bpl	22a00 <__assert_fail@plt+0x1032c>
   229b0:	vmov	r0, r1, d8
   229b4:	bl	2e5a0 <fts_children@@Base+0x21d4>
   229b8:	ldr	ip, [sp, #48]	; 0x30
   229bc:	cmp	ip, #0
   229c0:	mov	r4, r0
   229c4:	mov	r5, r1
   229c8:	movne	r0, #0
   229cc:	movne	r1, #0
   229d0:	bne	229f0 <__assert_fail@plt+0x1031c>
   229d4:	bl	2e494 <fts_children@@Base+0x20c8>
   229d8:	vmov	d7, r0, r1
   229dc:	ldr	r1, [sp, #48]	; 0x30
   229e0:	vcmp.f64	d8, d7
   229e4:	vmrs	APSR_nzcv, fpscr
   229e8:	moveq	r0, #0
   229ec:	movne	r0, #1
   229f0:	adds	r0, r0, r4
   229f4:	adc	r1, r1, r5
   229f8:	bl	2e494 <fts_children@@Base+0x20c8>
   229fc:	vmov	d8, r0, r1
   22a00:	mov	r1, #1
   22a04:	mvn	r2, #0
   22a08:	vmov.f64	d7, #36	; 0x41200000  10.0
   22a0c:	movw	r3, #15228	; 0x3b7c
   22a10:	ldr	r0, [sp, #28]
   22a14:	movt	r3, #3
   22a18:	mov	sl, #0
   22a1c:	vdiv.f64	d8, d8, d7
   22a20:	vstr	d8, [sp]
   22a24:	bl	12440 <__sprintf_chk@plt>
   22a28:	ldr	r0, [sp, #28]
   22a2c:	bl	123d4 <strlen@plt>
   22a30:	mov	fp, r0
   22a34:	b	22c2c <__assert_fail@plt+0x10558>
   22a38:	ldrd	r4, [sp, #184]	; 0xb8
   22a3c:	orrs	r5, r4, r5
   22a40:	beq	22848 <__assert_fail@plt+0x10174>
   22a44:	ldrd	r0, [sp, #192]	; 0xc0
   22a48:	ldrd	r2, [sp, #184]	; 0xb8
   22a4c:	bl	2e550 <fts_children@@Base+0x2184>
   22a50:	orrs	ip, r2, r3
   22a54:	bne	22848 <__assert_fail@plt+0x10174>
   22a58:	ldrd	r2, [sp, #184]	; 0xb8
   22a5c:	ldrd	r0, [sp, #192]	; 0xc0
   22a60:	bl	2e550 <fts_children@@Base+0x2184>
   22a64:	strd	r0, [sp, #16]
   22a68:	mov	r0, r6
   22a6c:	mov	r1, r7
   22a70:	ldrd	r2, [sp, #16]
   22a74:	bl	2e550 <fts_children@@Base+0x2184>
   22a78:	mov	r1, #10
   22a7c:	umull	r4, r5, r2, r1
   22a80:	mla	r1, r1, r3, r5
   22a84:	strd	r4, [sp, #56]	; 0x38
   22a88:	ldrd	r2, [sp, #16]
   22a8c:	str	r1, [sp, #60]	; 0x3c
   22a90:	ldrd	r0, [sp, #56]	; 0x38
   22a94:	bl	2e550 <fts_children@@Base+0x2184>
   22a98:	mov	r0, r6
   22a9c:	mov	r1, r7
   22aa0:	adds	r6, r2, r2
   22aa4:	adc	r7, r3, r3
   22aa8:	ldrd	r2, [sp, #16]
   22aac:	bl	2e550 <fts_children@@Base+0x2184>
   22ab0:	ldrd	r2, [sp, #16]
   22ab4:	mov	r4, r0
   22ab8:	mov	r5, r1
   22abc:	ldrd	r0, [sp, #56]	; 0x38
   22ac0:	bl	2e550 <fts_children@@Base+0x2184>
   22ac4:	mov	ip, r0
   22ac8:	ldrd	r0, [sp, #16]
   22acc:	cmp	r1, r7
   22ad0:	cmpeq	r0, r6
   22ad4:	bls	22f94 <__assert_fail@plt+0x108c0>
   22ad8:	orrs	r1, r6, r7
   22adc:	moveq	r7, #0
   22ae0:	movne	r7, #1
   22ae4:	ldr	r0, [sp, #24]
   22ae8:	ands	r0, r0, #16
   22aec:	str	r0, [sp, #16]
   22af0:	beq	22e94 <__assert_fail@plt+0x107c0>
   22af4:	ldr	r2, [sp, #64]	; 0x40
   22af8:	mov	r3, #0
   22afc:	cmp	r5, r3
   22b00:	cmpeq	r4, r2
   22b04:	strd	r2, [sp, #56]	; 0x38
   22b08:	bcc	22fd4 <__assert_fail@plt+0x10900>
   22b0c:	mov	r6, #0
   22b10:	str	sl, [sp, #68]	; 0x44
   22b14:	mov	r3, r6
   22b18:	mov	sl, r7
   22b1c:	mov	r6, ip
   22b20:	str	r9, [sp, #72]	; 0x48
   22b24:	str	r8, [sp, #76]	; 0x4c
   22b28:	mov	ip, r3
   22b2c:	ldr	r7, [sp, #64]	; 0x40
   22b30:	ldrd	r8, [sp, #56]	; 0x38
   22b34:	b	22b58 <__assert_fail@plt+0x10484>
   22b38:	adds	sl, sl, #0
   22b3c:	movne	sl, #1
   22b40:	cmp	r9, r5
   22b44:	cmpeq	r8, r4
   22b48:	add	ip, ip, #1
   22b4c:	bhi	23004 <__assert_fail@plt+0x10930>
   22b50:	cmp	ip, #8
   22b54:	beq	22fe0 <__assert_fail@plt+0x1090c>
   22b58:	mov	r0, r4
   22b5c:	mov	r1, r5
   22b60:	mov	r2, r8
   22b64:	mov	r3, r9
   22b68:	str	ip, [sp, #12]
   22b6c:	bl	2e550 <fts_children@@Base+0x2184>
   22b70:	mov	r1, r7
   22b74:	asr	fp, sl, #1
   22b78:	add	r2, r2, r2, lsl #2
   22b7c:	add	r6, r6, r2, lsl #1
   22b80:	mov	r0, r6
   22b84:	bl	2e130 <fts_children@@Base+0x1d64>
   22b88:	mov	r2, r8
   22b8c:	mov	r3, r9
   22b90:	mov	r0, r4
   22b94:	add	fp, fp, r1, lsl #1
   22b98:	mov	r1, r5
   22b9c:	bl	2e550 <fts_children@@Base+0x2184>
   22ba0:	add	sl, fp, sl
   22ba4:	mov	r4, r0
   22ba8:	mov	r5, r1
   22bac:	mov	r0, r6
   22bb0:	mov	r1, r7
   22bb4:	bl	2df44 <fts_children@@Base+0x1b78>
   22bb8:	cmp	r7, fp
   22bbc:	ldr	ip, [sp, #12]
   22bc0:	mov	r6, r0
   22bc4:	bhi	22b38 <__assert_fail@plt+0x10464>
   22bc8:	cmp	r7, sl
   22bcc:	movcs	sl, #2
   22bd0:	movcc	sl, #3
   22bd4:	b	22b40 <__assert_fail@plt+0x1046c>
   22bd8:	andeq	r0, r0, r0
   22bdc:	mvnsmi	r0, #0
   22be0:	ldr	r4, [sp, #48]	; 0x30
   22be4:	cmp	r4, #1
   22be8:	beq	22bfc <__assert_fail@plt+0x10528>
   22bec:	vldr	d7, [pc, #-28]	; 22bd8 <__assert_fail@plt+0x10504>
   22bf0:	vcmpe.f64	d8, d7
   22bf4:	vmrs	APSR_nzcv, fpscr
   22bf8:	bmi	22de4 <__assert_fail@plt+0x10710>
   22bfc:	mov	r1, #1
   22c00:	mvn	r2, #0
   22c04:	vstr	d8, [sp]
   22c08:	movw	r3, #15228	; 0x3b7c
   22c0c:	ldr	r0, [sp, #28]
   22c10:	movt	r3, #3
   22c14:	bl	12440 <__sprintf_chk@plt>
   22c18:	ldr	r0, [sp, #28]
   22c1c:	bl	123d4 <strlen@plt>
   22c20:	mov	sl, #0
   22c24:	mvn	r6, #0
   22c28:	mov	fp, r0
   22c2c:	ldr	r4, [sp, #40]	; 0x28
   22c30:	mov	r2, fp
   22c34:	ldr	r1, [sp, #28]
   22c38:	rsb	r7, fp, r4
   22c3c:	rsb	fp, sl, fp
   22c40:	add	fp, r7, fp
   22c44:	mov	r0, r7
   22c48:	bl	120bc <memmove@plt>
   22c4c:	ldr	r4, [sp, #24]
   22c50:	tst	r4, #4
   22c54:	bne	22d10 <__assert_fail@plt+0x1063c>
   22c58:	ldr	ip, [sp, #24]
   22c5c:	tst	ip, #128	; 0x80
   22c60:	beq	22ce0 <__assert_fail@plt+0x1060c>
   22c64:	cmn	r6, #1
   22c68:	beq	22e44 <__assert_fail@plt+0x10770>
   22c6c:	ldr	r5, [sp, #24]
   22c70:	and	r3, r5, #256	; 0x100
   22c74:	orrs	ip, r6, r3
   22c78:	beq	22ce0 <__assert_fail@plt+0x1060c>
   22c7c:	tst	r5, #64	; 0x40
   22c80:	bne	22dc8 <__assert_fail@plt+0x106f4>
   22c84:	cmp	r6, #0
   22c88:	ldreq	r2, [sp, #44]	; 0x2c
   22c8c:	beq	22cb8 <__assert_fail@plt+0x105e4>
   22c90:	ldr	ip, [sp, #52]	; 0x34
   22c94:	ldr	r4, [sp, #44]	; 0x2c
   22c98:	cmp	ip, #0
   22c9c:	add	r2, r4, #1
   22ca0:	beq	22db8 <__assert_fail@plt+0x106e4>
   22ca4:	movw	r1, #15196	; 0x3b5c
   22ca8:	movt	r1, #3
   22cac:	ldrb	r1, [r1, r6]
   22cb0:	ldr	r5, [sp, #44]	; 0x2c
   22cb4:	strb	r1, [r5]
   22cb8:	cmp	r3, #0
   22cbc:	streq	r2, [sp, #44]	; 0x2c
   22cc0:	beq	22ce0 <__assert_fail@plt+0x1060c>
   22cc4:	ldr	ip, [sp, #52]	; 0x34
   22cc8:	cmp	ip, #0
   22ccc:	bne	22da4 <__assert_fail@plt+0x106d0>
   22cd0:	mov	r3, #66	; 0x42
   22cd4:	add	r4, r2, #1
   22cd8:	strb	r3, [r2]
   22cdc:	str	r4, [sp, #44]	; 0x2c
   22ce0:	ldr	r5, [sp, #44]	; 0x2c
   22ce4:	mov	r3, #0
   22ce8:	ldr	ip, [sp, #32]
   22cec:	mov	r0, r7
   22cf0:	ldr	r2, [sp, #124]	; 0x7c
   22cf4:	strb	r3, [r5]
   22cf8:	ldr	r3, [ip]
   22cfc:	cmp	r2, r3
   22d00:	bne	23104 <__assert_fail@plt+0x10a30>
   22d04:	add	sp, sp, #132	; 0x84
   22d08:	vpop	{d8-d9}
   22d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d10:	mov	r0, r9
   22d14:	rsb	fp, r7, fp
   22d18:	bl	123d4 <strlen@plt>
   22d1c:	add	r5, r7, fp
   22d20:	mov	r1, r7
   22d24:	mov	r2, fp
   22d28:	mov	r3, #41	; 0x29
   22d2c:	mvn	sl, #0
   22d30:	mov	r7, r5
   22d34:	mov	r4, r0
   22d38:	add	r0, sp, #80	; 0x50
   22d3c:	bl	12230 <__memcpy_chk@plt>
   22d40:	b	22d58 <__assert_fail@plt+0x10684>
   22d44:	rsb	r7, r4, r7
   22d48:	mov	r1, r9
   22d4c:	mov	r2, r4
   22d50:	mov	r0, r7
   22d54:	bl	12104 <memcpy@plt>
   22d58:	ldrb	r3, [r8]
   22d5c:	cmp	r3, #0
   22d60:	beq	22d74 <__assert_fail@plt+0x106a0>
   22d64:	cmp	r3, #255	; 0xff
   22d68:	add	r8, r8, #1
   22d6c:	movne	sl, r3
   22d70:	moveq	sl, fp
   22d74:	cmp	sl, fp
   22d78:	movcs	sl, fp
   22d7c:	add	r5, sp, #80	; 0x50
   22d80:	rsb	r7, sl, r7
   22d84:	rsb	fp, sl, fp
   22d88:	add	r1, r5, fp
   22d8c:	mov	r2, sl
   22d90:	mov	r0, r7
   22d94:	bl	12104 <memcpy@plt>
   22d98:	cmp	fp, #0
   22d9c:	bne	22d44 <__assert_fail@plt+0x10670>
   22da0:	b	22c58 <__assert_fail@plt+0x10584>
   22da4:	cmp	r6, #0
   22da8:	movne	r3, #105	; 0x69
   22dac:	strbne	r3, [r2]
   22db0:	addne	r2, r2, #1
   22db4:	b	22cd0 <__assert_fail@plt+0x105fc>
   22db8:	cmp	r6, #1
   22dbc:	moveq	r1, #107	; 0x6b
   22dc0:	bne	22ca4 <__assert_fail@plt+0x105d0>
   22dc4:	b	22cb0 <__assert_fail@plt+0x105dc>
   22dc8:	ldr	r5, [sp, #28]
   22dcc:	mov	r2, #32
   22dd0:	ldr	r4, [sp, #40]	; 0x28
   22dd4:	strb	r2, [r5, #648]	; 0x288
   22dd8:	add	r4, r4, #1
   22ddc:	str	r4, [sp, #44]	; 0x2c
   22de0:	b	22c84 <__assert_fail@plt+0x105b0>
   22de4:	vmov	r0, r1, d8
   22de8:	bl	2e5a0 <fts_children@@Base+0x21d4>
   22dec:	ldr	ip, [sp, #48]	; 0x30
   22df0:	cmp	ip, #0
   22df4:	mov	r4, r0
   22df8:	mov	r5, r1
   22dfc:	movne	r0, #0
   22e00:	movne	r1, #0
   22e04:	bne	22e24 <__assert_fail@plt+0x10750>
   22e08:	bl	2e494 <fts_children@@Base+0x20c8>
   22e0c:	vmov	d7, r0, r1
   22e10:	ldr	r1, [sp, #48]	; 0x30
   22e14:	vcmp.f64	d8, d7
   22e18:	vmrs	APSR_nzcv, fpscr
   22e1c:	moveq	r0, #0
   22e20:	movne	r0, #1
   22e24:	adds	r0, r0, r4
   22e28:	adc	r1, r1, r5
   22e2c:	bl	2e494 <fts_children@@Base+0x20c8>
   22e30:	vmov	d8, r0, r1
   22e34:	b	22bfc <__assert_fail@plt+0x10528>
   22e38:	mov	r7, #0
   22e3c:	mov	ip, r7
   22e40:	b	22ae4 <__assert_fail@plt+0x10410>
   22e44:	ldrd	r4, [sp, #192]	; 0xc0
   22e48:	cmp	r5, #0
   22e4c:	cmpeq	r4, #1
   22e50:	bls	230c0 <__assert_fail@plt+0x109ec>
   22e54:	ldr	ip, [sp, #64]	; 0x40
   22e58:	mov	r6, #1
   22e5c:	mov	r2, #1
   22e60:	mov	r3, #0
   22e64:	mov	r0, r4
   22e68:	mov	r1, r5
   22e6c:	mul	r4, ip, r3
   22e70:	umull	r2, r3, r2, ip
   22e74:	add	r3, r4, r3
   22e78:	cmp	r1, r3
   22e7c:	cmpeq	r0, r2
   22e80:	bls	22c6c <__assert_fail@plt+0x10598>
   22e84:	add	r6, r6, #1
   22e88:	cmp	r6, #8
   22e8c:	bne	22e6c <__assert_fail@plt+0x10798>
   22e90:	b	22c6c <__assert_fail@plt+0x10598>
   22e94:	ldr	fp, [sp, #40]	; 0x28
   22e98:	mvn	r6, #0
   22e9c:	ldr	r3, [sp, #48]	; 0x30
   22ea0:	cmp	r3, #1
   22ea4:	beq	22fa0 <__assert_fail@plt+0x108cc>
   22ea8:	ldr	r0, [sp, #48]	; 0x30
   22eac:	cmp	r0, #0
   22eb0:	movne	ip, #0
   22eb4:	bne	22ec8 <__assert_fail@plt+0x107f4>
   22eb8:	add	ip, ip, r7
   22ebc:	cmp	ip, #0
   22ec0:	movle	ip, #0
   22ec4:	movgt	ip, #1
   22ec8:	cmp	ip, #0
   22ecc:	beq	22f48 <__assert_fail@plt+0x10874>
   22ed0:	ldr	ip, [sp, #16]
   22ed4:	adds	r4, r4, #1
   22ed8:	adc	r5, r5, #0
   22edc:	cmp	ip, #0
   22ee0:	beq	22f48 <__assert_fail@plt+0x10874>
   22ee4:	ldr	r0, [sp, #64]	; 0x40
   22ee8:	mov	r1, #0
   22eec:	mov	r3, r1
   22ef0:	mov	r2, r0
   22ef4:	cmp	r3, r5
   22ef8:	cmpeq	r2, r4
   22efc:	bne	22f48 <__assert_fail@plt+0x10874>
   22f00:	cmp	r6, #8
   22f04:	beq	22f48 <__assert_fail@plt+0x10874>
   22f08:	ldr	r4, [sp, #24]
   22f0c:	add	r6, r6, #1
   22f10:	tst	r4, #8
   22f14:	movne	r4, #1
   22f18:	movne	r5, #0
   22f1c:	bne	22f48 <__assert_fail@plt+0x10874>
   22f20:	sub	r3, fp, #1
   22f24:	mov	r2, #48	; 0x30
   22f28:	strb	r2, [fp, #-1]
   22f2c:	rsb	fp, sl, r3
   22f30:	ldr	r1, [sp, #36]	; 0x24
   22f34:	mov	r2, sl
   22f38:	mov	r0, fp
   22f3c:	mov	r4, #1
   22f40:	mov	r5, #0
   22f44:	bl	12104 <memcpy@plt>
   22f48:	sub	sl, fp, #1
   22f4c:	mov	r0, r4
   22f50:	mov	r1, r5
   22f54:	mov	r2, #10
   22f58:	mov	r3, #0
   22f5c:	bl	2e550 <fts_children@@Base+0x2184>
   22f60:	mov	r7, sl
   22f64:	mov	r0, r4
   22f68:	mov	r1, r5
   22f6c:	mov	r3, #0
   22f70:	add	r2, r2, #48	; 0x30
   22f74:	strb	r2, [sl], #-1
   22f78:	mov	r2, #10
   22f7c:	bl	2e550 <fts_children@@Base+0x2184>
   22f80:	mov	r4, r0
   22f84:	mov	r5, r1
   22f88:	orrs	ip, r4, r5
   22f8c:	bne	22f4c <__assert_fail@plt+0x10878>
   22f90:	b	22c4c <__assert_fail@plt+0x10578>
   22f94:	movcc	r7, #3
   22f98:	movcs	r7, #2
   22f9c:	b	22ae4 <__assert_fail@plt+0x10410>
   22fa0:	mov	r2, #1
   22fa4:	mov	r3, #0
   22fa8:	and	r2, r2, r4
   22fac:	and	r3, r3, r5
   22fb0:	adds	r2, r2, r7
   22fb4:	adc	r3, r3, r7, asr #31
   22fb8:	orr	r2, r2, r3
   22fbc:	cmp	r2, #0
   22fc0:	addne	ip, ip, #1
   22fc4:	cmp	ip, #5
   22fc8:	movle	ip, #0
   22fcc:	movgt	ip, #1
   22fd0:	b	22ec8 <__assert_fail@plt+0x107f4>
   22fd4:	ldr	fp, [sp, #40]	; 0x28
   22fd8:	mov	r6, #0
   22fdc:	b	22e9c <__assert_fail@plt+0x107c8>
   22fe0:	mov	r3, ip
   22fe4:	mov	r7, sl
   22fe8:	mov	ip, r6
   22fec:	ldr	sl, [sp, #68]	; 0x44
   22ff0:	ldr	r9, [sp, #72]	; 0x48
   22ff4:	mov	r6, r3
   22ff8:	ldr	r8, [sp, #76]	; 0x4c
   22ffc:	ldr	fp, [sp, #40]	; 0x28
   23000:	b	22e9c <__assert_fail@plt+0x107c8>
   23004:	cmp	r5, #0
   23008:	cmpeq	r4, #9
   2300c:	mov	r3, ip
   23010:	mov	r7, sl
   23014:	mov	ip, r6
   23018:	ldr	sl, [sp, #68]	; 0x44
   2301c:	mov	r6, r3
   23020:	ldr	r9, [sp, #72]	; 0x48
   23024:	ldr	r8, [sp, #76]	; 0x4c
   23028:	ldrhi	fp, [sp, #40]	; 0x28
   2302c:	bhi	22e9c <__assert_fail@plt+0x107c8>
   23030:	ldr	r3, [sp, #48]	; 0x30
   23034:	cmp	r3, #1
   23038:	beq	230c8 <__assert_fail@plt+0x109f4>
   2303c:	adds	r3, r7, #0
   23040:	ldr	r0, [sp, #48]	; 0x30
   23044:	movne	r3, #1
   23048:	cmp	r0, #0
   2304c:	movne	r3, #0
   23050:	cmp	r3, #0
   23054:	beq	230a0 <__assert_fail@plt+0x109cc>
   23058:	add	ip, ip, #1
   2305c:	cmp	ip, #10
   23060:	beq	230e0 <__assert_fail@plt+0x10a0c>
   23064:	ldr	r2, [sp, #28]
   23068:	add	ip, ip, #48	; 0x30
   2306c:	ldr	r1, [sp, #36]	; 0x24
   23070:	add	fp, r2, #644	; 0x284
   23074:	add	fp, fp, #3
   23078:	strb	ip, [r2, #647]	; 0x287
   2307c:	rsb	fp, sl, fp
   23080:	mov	r2, sl
   23084:	mov	ip, #0
   23088:	str	ip, [sp, #12]
   2308c:	mov	r0, fp
   23090:	bl	12104 <memcpy@plt>
   23094:	ldr	ip, [sp, #12]
   23098:	mov	r7, ip
   2309c:	b	22e9c <__assert_fail@plt+0x107c8>
   230a0:	cmp	ip, #0
   230a4:	bne	23064 <__assert_fail@plt+0x10990>
   230a8:	ldr	r1, [sp, #24]
   230ac:	ands	ip, r1, #8
   230b0:	beq	23064 <__assert_fail@plt+0x10990>
   230b4:	ldr	fp, [sp, #40]	; 0x28
   230b8:	mov	ip, #0
   230bc:	b	22e9c <__assert_fail@plt+0x107c8>
   230c0:	mov	r6, #0
   230c4:	b	22c6c <__assert_fail@plt+0x10598>
   230c8:	and	r3, ip, #1
   230cc:	add	r3, r7, r3
   230d0:	cmp	r3, #2
   230d4:	movle	r3, #0
   230d8:	movgt	r3, #1
   230dc:	b	23050 <__assert_fail@plt+0x1097c>
   230e0:	adds	r4, r4, #1
   230e4:	mov	r7, #0
   230e8:	adc	r5, r5, #0
   230ec:	cmp	r5, #0
   230f0:	cmpeq	r4, #10
   230f4:	ldreq	fp, [sp, #40]	; 0x28
   230f8:	moveq	ip, r7
   230fc:	beq	22e9c <__assert_fail@plt+0x107c8>
   23100:	b	230a8 <__assert_fail@plt+0x109d4>
   23104:	bl	12188 <__stack_chk_fail@plt>
   23108:	push	{r4, r5, r6, r7, r8, r9, lr}
   2310c:	movw	r6, #26008	; 0x6598
   23110:	movt	r6, #4
   23114:	sub	sp, sp, #20
   23118:	subs	r5, r0, #0
   2311c:	mov	r9, r1
   23120:	ldr	r3, [r6]
   23124:	mov	r8, r2
   23128:	str	r3, [sp, #12]
   2312c:	beq	23240 <__assert_fail@plt+0x10b6c>
   23130:	ldrb	r3, [r5]
   23134:	movw	r4, #15196	; 0x3b5c
   23138:	movt	r4, #3
   2313c:	cmp	r3, #39	; 0x27
   23140:	add	r1, r4, #12
   23144:	addeq	r5, r5, #1
   23148:	add	r2, r4, #24
   2314c:	mov	r3, #4
   23150:	moveq	r7, #4
   23154:	mov	r0, r5
   23158:	movne	r7, #0
   2315c:	bl	2cf5c <fts_children@@Base+0xb90>
   23160:	cmp	r0, #0
   23164:	blt	231d8 <__assert_fail@plt+0x10b04>
   23168:	add	r0, r4, r0, lsl #2
   2316c:	mov	r2, #1
   23170:	mov	r3, #0
   23174:	mov	r4, r2
   23178:	ldr	r1, [r0, #24]
   2317c:	mov	r5, r3
   23180:	str	r2, [r8]
   23184:	orr	r7, r7, r1
   23188:	str	r3, [r8, #4]
   2318c:	mov	r0, #0
   23190:	str	r7, [r9]
   23194:	orrs	r3, r4, r5
   23198:	bne	231c0 <__assert_fail@plt+0x10aec>
   2319c:	movw	r0, #1784	; 0x6f8
   231a0:	movt	r0, #3
   231a4:	bl	12308 <getenv@plt>
   231a8:	mov	r5, #0
   231ac:	cmp	r0, #0
   231b0:	mov	r0, #4
   231b4:	movne	r4, #512	; 0x200
   231b8:	moveq	r4, #1024	; 0x400
   231bc:	strd	r4, [r8]
   231c0:	ldr	r2, [sp, #12]
   231c4:	ldr	r3, [r6]
   231c8:	cmp	r2, r3
   231cc:	bne	232d8 <__assert_fail@plt+0x10c04>
   231d0:	add	sp, sp, #20
   231d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   231d8:	movw	r3, #15268	; 0x3ba4
   231dc:	mov	r0, r5
   231e0:	movt	r3, #3
   231e4:	add	r1, sp, #8
   231e8:	str	r3, [sp]
   231ec:	mov	r2, #0
   231f0:	mov	r3, r8
   231f4:	bl	29574 <__assert_fail@plt+0x16ea0>
   231f8:	cmp	r0, #0
   231fc:	bne	2329c <__assert_fail@plt+0x10bc8>
   23200:	ldrb	r3, [r5]
   23204:	sub	r3, r3, #48	; 0x30
   23208:	cmp	r3, #9
   2320c:	bls	23238 <__assert_fail@plt+0x10b64>
   23210:	ldr	r2, [sp, #8]
   23214:	cmp	r5, r2
   23218:	bne	23228 <__assert_fail@plt+0x10b54>
   2321c:	b	232ac <__assert_fail@plt+0x10bd8>
   23220:	cmp	r2, r5
   23224:	beq	232ac <__assert_fail@plt+0x10bd8>
   23228:	ldrb	r3, [r5, #1]!
   2322c:	sub	r3, r3, #48	; 0x30
   23230:	cmp	r3, #9
   23234:	bhi	23220 <__assert_fail@plt+0x10b4c>
   23238:	ldrd	r4, [r8]
   2323c:	b	2318c <__assert_fail@plt+0x10ab8>
   23240:	movw	r0, #15244	; 0x3b8c
   23244:	movt	r0, #3
   23248:	bl	12308 <getenv@plt>
   2324c:	subs	r5, r0, #0
   23250:	bne	23130 <__assert_fail@plt+0x10a5c>
   23254:	movw	r0, #15256	; 0x3b98
   23258:	movt	r0, #3
   2325c:	bl	12308 <getenv@plt>
   23260:	subs	r5, r0, #0
   23264:	bne	23130 <__assert_fail@plt+0x10a5c>
   23268:	movw	r0, #1784	; 0x6f8
   2326c:	movt	r0, #3
   23270:	bl	12308 <getenv@plt>
   23274:	mov	r3, #0
   23278:	mov	r5, r3
   2327c:	str	r3, [r8, #4]
   23280:	mov	r7, #0
   23284:	cmp	r0, #0
   23288:	movne	r2, #512	; 0x200
   2328c:	moveq	r2, #1024	; 0x400
   23290:	mov	r4, r2
   23294:	str	r2, [r8]
   23298:	b	2318c <__assert_fail@plt+0x10ab8>
   2329c:	mov	r3, #0
   232a0:	ldrd	r4, [r8]
   232a4:	str	r3, [r9]
   232a8:	b	23194 <__assert_fail@plt+0x10ac0>
   232ac:	ldrb	r3, [r2, #-1]
   232b0:	cmp	r3, #66	; 0x42
   232b4:	orrne	r7, r7, #128	; 0x80
   232b8:	beq	232c4 <__assert_fail@plt+0x10bf0>
   232bc:	orr	r7, r7, #32
   232c0:	b	23238 <__assert_fail@plt+0x10b64>
   232c4:	ldrb	r3, [r2, #-2]
   232c8:	orr	r7, r7, #384	; 0x180
   232cc:	cmp	r3, #105	; 0x69
   232d0:	bne	23238 <__assert_fail@plt+0x10b64>
   232d4:	b	232bc <__assert_fail@plt+0x10be8>
   232d8:	bl	12188 <__stack_chk_fail@plt>
   232dc:	push	{r3, r4, r5, r6, r7, lr}
   232e0:	movw	r6, #27964	; 0x6d3c
   232e4:	movt	r6, #4
   232e8:	mov	r5, r0
   232ec:	ldr	r4, [r6]
   232f0:	cmp	r4, #0
   232f4:	bne	23308 <__assert_fail@plt+0x10c34>
   232f8:	b	23324 <__assert_fail@plt+0x10c50>
   232fc:	ldr	r4, [r4, #4]
   23300:	cmp	r4, #0
   23304:	beq	23324 <__assert_fail@plt+0x10c50>
   23308:	ldr	r3, [r4]
   2330c:	cmp	r3, r5
   23310:	bne	232fc <__assert_fail@plt+0x10c28>
   23314:	ldrb	r0, [r4, #8]
   23318:	cmp	r0, #0
   2331c:	addne	r0, r4, #8
   23320:	pop	{r3, r4, r5, r6, r7, pc}
   23324:	mov	r0, r5
   23328:	bl	12074 <getpwuid@plt>
   2332c:	cmp	r0, #0
   23330:	movweq	r7, #15168	; 0x3b40
   23334:	moveq	r0, #9
   23338:	movteq	r7, #3
   2333c:	beq	23350 <__assert_fail@plt+0x10c7c>
   23340:	ldr	r7, [r0]
   23344:	mov	r0, r7
   23348:	bl	123d4 <strlen@plt>
   2334c:	add	r0, r0, #9
   23350:	bl	28e14 <__assert_fail@plt+0x16740>
   23354:	mov	r1, r7
   23358:	mov	r4, r0
   2335c:	str	r5, [r0], #8
   23360:	bl	1229c <strcpy@plt>
   23364:	ldr	r3, [r6]
   23368:	str	r4, [r6]
   2336c:	str	r3, [r4, #4]
   23370:	b	23314 <__assert_fail@plt+0x10c40>
   23374:	push	{r4, r5, r6, r7, r8, lr}
   23378:	movw	r8, #27964	; 0x6d3c
   2337c:	movt	r8, #4
   23380:	mov	r7, r0
   23384:	ldr	r4, [r8]
   23388:	cmp	r4, #0
   2338c:	beq	233cc <__assert_fail@plt+0x10cf8>
   23390:	ldrb	r5, [r0]
   23394:	b	233a4 <__assert_fail@plt+0x10cd0>
   23398:	ldr	r4, [r4, #4]
   2339c:	cmp	r4, #0
   233a0:	beq	233cc <__assert_fail@plt+0x10cf8>
   233a4:	ldrb	r3, [r4, #8]
   233a8:	cmp	r3, r5
   233ac:	bne	23398 <__assert_fail@plt+0x10cc4>
   233b0:	add	r0, r4, #8
   233b4:	mov	r1, r7
   233b8:	bl	1205c <strcmp@plt>
   233bc:	cmp	r0, #0
   233c0:	bne	23398 <__assert_fail@plt+0x10cc4>
   233c4:	mov	r0, r4
   233c8:	pop	{r4, r5, r6, r7, r8, pc}
   233cc:	ldr	r5, [r8, #4]
   233d0:	cmp	r5, #0
   233d4:	beq	23418 <__assert_fail@plt+0x10d44>
   233d8:	ldrb	r6, [r7]
   233dc:	b	233ec <__assert_fail@plt+0x10d18>
   233e0:	ldr	r5, [r5, #4]
   233e4:	cmp	r5, #0
   233e8:	beq	23418 <__assert_fail@plt+0x10d44>
   233ec:	ldrb	r3, [r5, #8]
   233f0:	cmp	r3, r6
   233f4:	bne	233e0 <__assert_fail@plt+0x10d0c>
   233f8:	add	r0, r5, #8
   233fc:	mov	r1, r7
   23400:	bl	1205c <strcmp@plt>
   23404:	cmp	r0, #0
   23408:	popeq	{r4, r5, r6, r7, r8, pc}
   2340c:	ldr	r5, [r5, #4]
   23410:	cmp	r5, #0
   23414:	bne	233ec <__assert_fail@plt+0x10d18>
   23418:	mov	r0, r7
   2341c:	bl	12044 <getpwnam@plt>
   23420:	mov	r4, r0
   23424:	mov	r0, r7
   23428:	bl	123d4 <strlen@plt>
   2342c:	add	r0, r0, #9
   23430:	bl	28e14 <__assert_fail@plt+0x16740>
   23434:	mov	r1, r7
   23438:	mov	r5, r0
   2343c:	add	r0, r0, #8
   23440:	bl	1229c <strcpy@plt>
   23444:	cmp	r4, #0
   23448:	ldrne	r3, [r8]
   2344c:	movne	r0, r5
   23450:	ldreq	r3, [r8, #4]
   23454:	moveq	r0, r4
   23458:	ldrne	r2, [r4, #8]
   2345c:	strne	r5, [r8]
   23460:	streq	r5, [r8, #4]
   23464:	stmne	r5, {r2, r3}
   23468:	streq	r3, [r5, #4]
   2346c:	pop	{r4, r5, r6, r7, r8, pc}
   23470:	push	{r3, r4, r5, r6, r7, lr}
   23474:	movw	r6, #27964	; 0x6d3c
   23478:	movt	r6, #4
   2347c:	mov	r5, r0
   23480:	ldr	r4, [r6, #8]
   23484:	cmp	r4, #0
   23488:	bne	2349c <__assert_fail@plt+0x10dc8>
   2348c:	b	234b8 <__assert_fail@plt+0x10de4>
   23490:	ldr	r4, [r4, #4]
   23494:	cmp	r4, #0
   23498:	beq	234b8 <__assert_fail@plt+0x10de4>
   2349c:	ldr	r3, [r4]
   234a0:	cmp	r3, r5
   234a4:	bne	23490 <__assert_fail@plt+0x10dbc>
   234a8:	ldrb	r0, [r4, #8]
   234ac:	cmp	r0, #0
   234b0:	addne	r0, r4, #8
   234b4:	pop	{r3, r4, r5, r6, r7, pc}
   234b8:	mov	r0, r5
   234bc:	bl	126a4 <getgrgid@plt>
   234c0:	cmp	r0, #0
   234c4:	movweq	r7, #15168	; 0x3b40
   234c8:	moveq	r0, #9
   234cc:	movteq	r7, #3
   234d0:	beq	234e4 <__assert_fail@plt+0x10e10>
   234d4:	ldr	r7, [r0]
   234d8:	mov	r0, r7
   234dc:	bl	123d4 <strlen@plt>
   234e0:	add	r0, r0, #9
   234e4:	bl	28e14 <__assert_fail@plt+0x16740>
   234e8:	mov	r1, r7
   234ec:	mov	r4, r0
   234f0:	str	r5, [r0], #8
   234f4:	bl	1229c <strcpy@plt>
   234f8:	ldr	r3, [r6, #8]
   234fc:	str	r4, [r6, #8]
   23500:	str	r3, [r4, #4]
   23504:	b	234a8 <__assert_fail@plt+0x10dd4>
   23508:	push	{r4, r5, r6, r7, r8, lr}
   2350c:	movw	r8, #27964	; 0x6d3c
   23510:	movt	r8, #4
   23514:	mov	r7, r0
   23518:	ldr	r4, [r8, #8]
   2351c:	cmp	r4, #0
   23520:	beq	23560 <__assert_fail@plt+0x10e8c>
   23524:	ldrb	r5, [r0]
   23528:	b	23538 <__assert_fail@plt+0x10e64>
   2352c:	ldr	r4, [r4, #4]
   23530:	cmp	r4, #0
   23534:	beq	23560 <__assert_fail@plt+0x10e8c>
   23538:	ldrb	r3, [r4, #8]
   2353c:	cmp	r3, r5
   23540:	bne	2352c <__assert_fail@plt+0x10e58>
   23544:	add	r0, r4, #8
   23548:	mov	r1, r7
   2354c:	bl	1205c <strcmp@plt>
   23550:	cmp	r0, #0
   23554:	bne	2352c <__assert_fail@plt+0x10e58>
   23558:	mov	r0, r4
   2355c:	pop	{r4, r5, r6, r7, r8, pc}
   23560:	ldr	r5, [r8, #12]
   23564:	cmp	r5, #0
   23568:	beq	235ac <__assert_fail@plt+0x10ed8>
   2356c:	ldrb	r6, [r7]
   23570:	b	23580 <__assert_fail@plt+0x10eac>
   23574:	ldr	r5, [r5, #4]
   23578:	cmp	r5, #0
   2357c:	beq	235ac <__assert_fail@plt+0x10ed8>
   23580:	ldrb	r3, [r5, #8]
   23584:	cmp	r3, r6
   23588:	bne	23574 <__assert_fail@plt+0x10ea0>
   2358c:	add	r0, r5, #8
   23590:	mov	r1, r7
   23594:	bl	1205c <strcmp@plt>
   23598:	cmp	r0, #0
   2359c:	popeq	{r4, r5, r6, r7, r8, pc}
   235a0:	ldr	r5, [r5, #4]
   235a4:	cmp	r5, #0
   235a8:	bne	23580 <__assert_fail@plt+0x10eac>
   235ac:	mov	r0, r7
   235b0:	bl	126b0 <getgrnam@plt>
   235b4:	mov	r4, r0
   235b8:	mov	r0, r7
   235bc:	bl	123d4 <strlen@plt>
   235c0:	add	r0, r0, #9
   235c4:	bl	28e14 <__assert_fail@plt+0x16740>
   235c8:	mov	r1, r7
   235cc:	mov	r5, r0
   235d0:	add	r0, r0, #8
   235d4:	bl	1229c <strcpy@plt>
   235d8:	cmp	r4, #0
   235dc:	ldrne	r3, [r8, #8]
   235e0:	movne	r0, r5
   235e4:	ldreq	r3, [r8, #12]
   235e8:	moveq	r0, r4
   235ec:	ldrne	r2, [r4, #8]
   235f0:	strne	r5, [r8, #8]
   235f4:	streq	r5, [r8, #12]
   235f8:	stmne	r5, {r2, r3}
   235fc:	streq	r3, [r5, #4]
   23600:	pop	{r4, r5, r6, r7, r8, pc}
   23604:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23608:	add	fp, sp, #28
   2360c:	sub	sp, sp, #8
   23610:	movw	r6, #26008	; 0x6598
   23614:	movt	r6, #4
   23618:	mov	r7, r2
   2361c:	cmn	r2, #-1073741823	; 0xc0000001
   23620:	ldr	r2, [r6]
   23624:	mov	r5, r0
   23628:	mov	r4, r1
   2362c:	mov	r8, r3
   23630:	str	r2, [fp, #-32]	; 0xffffffe0
   23634:	bls	23654 <__assert_fail@plt+0x10f80>
   23638:	mov	r0, #0
   2363c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23640:	ldr	r3, [r6]
   23644:	cmp	r2, r3
   23648:	bne	23778 <__assert_fail@plt+0x110a4>
   2364c:	sub	sp, fp, #28
   23650:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23654:	lsl	r0, r7, #2
   23658:	movw	r3, #4023	; 0xfb7
   2365c:	cmp	r0, r3
   23660:	bls	2372c <__assert_fail@plt+0x11058>
   23664:	bl	2d8d4 <fts_children@@Base+0x1508>
   23668:	cmp	r0, #0
   2366c:	beq	23638 <__assert_fail@plt+0x10f64>
   23670:	cmp	r7, #2
   23674:	mov	r3, #1
   23678:	str	r3, [r0, #4]
   2367c:	movhi	r9, r4
   23680:	movhi	r2, r0
   23684:	movhi	ip, #0
   23688:	movhi	r3, #2
   2368c:	bls	236d8 <__assert_fail@plt+0x11004>
   23690:	ldrb	r1, [r9, #1]!
   23694:	ldrb	lr, [r4, ip]
   23698:	cmp	lr, r1
   2369c:	bne	236b8 <__assert_fail@plt+0x10fe4>
   236a0:	b	23740 <__assert_fail@plt+0x1106c>
   236a4:	ldr	lr, [r0, ip, lsl #2]
   236a8:	rsb	ip, lr, ip
   236ac:	ldrb	lr, [r4, ip]
   236b0:	cmp	lr, r1
   236b4:	beq	23740 <__assert_fail@plt+0x1106c>
   236b8:	cmp	ip, #0
   236bc:	bne	236a4 <__assert_fail@plt+0x10fd0>
   236c0:	mov	ip, #0
   236c4:	str	r3, [r2, #8]
   236c8:	add	r3, r3, #1
   236cc:	add	r2, r2, #4
   236d0:	cmp	r3, r7
   236d4:	bne	23690 <__assert_fail@plt+0x10fbc>
   236d8:	mov	r2, #0
   236dc:	str	r2, [r8]
   236e0:	ldrb	r3, [r5]
   236e4:	mov	ip, r5
   236e8:	cmp	r3, #0
   236ec:	beq	23720 <__assert_fail@plt+0x1104c>
   236f0:	ldrb	r1, [r4, r2]
   236f4:	cmp	r1, r3
   236f8:	beq	23750 <__assert_fail@plt+0x1107c>
   236fc:	cmp	r2, #0
   23700:	addeq	r5, r5, #1
   23704:	ldrne	r1, [r0, r2, lsl #2]
   23708:	ldrbeq	r3, [ip, #1]
   2370c:	addeq	ip, ip, #1
   23710:	addne	r5, r5, r1
   23714:	rsbne	r2, r1, r2
   23718:	cmp	r3, #0
   2371c:	bne	236f0 <__assert_fail@plt+0x1101c>
   23720:	bl	2d938 <fts_children@@Base+0x156c>
   23724:	mov	r0, #1
   23728:	b	2363c <__assert_fail@plt+0x10f68>
   2372c:	add	r3, r0, #22
   23730:	bic	r3, r3, #7
   23734:	sub	sp, sp, r3
   23738:	add	r0, sp, #8
   2373c:	b	23668 <__assert_fail@plt+0x10f94>
   23740:	add	ip, ip, #1
   23744:	rsb	r1, ip, r3
   23748:	str	r1, [r2, #8]
   2374c:	b	236c8 <__assert_fail@plt+0x10ff4>
   23750:	add	r2, r2, #1
   23754:	add	r1, ip, #1
   23758:	cmp	r7, r2
   2375c:	ldrbne	r3, [ip, #1]
   23760:	movne	ip, r1
   23764:	bne	236e8 <__assert_fail@plt+0x11014>
   23768:	str	r5, [r8]
   2376c:	bl	2d938 <fts_children@@Base+0x156c>
   23770:	mov	r0, #1
   23774:	b	2363c <__assert_fail@plt+0x10f68>
   23778:	bl	12188 <__stack_chk_fail@plt>
   2377c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23780:	add	fp, sp, #32
   23784:	sub	sp, sp, #204	; 0xcc
   23788:	movw	r3, #26008	; 0x6598
   2378c:	movt	r3, #4
   23790:	str	r3, [fp, #-228]	; 0xffffff1c
   23794:	mov	r4, r1
   23798:	ldr	r3, [r3]
   2379c:	str	r0, [fp, #-220]	; 0xffffff24
   237a0:	mov	r0, r1
   237a4:	str	r2, [fp, #-232]	; 0xffffff18
   237a8:	str	r3, [fp, #-40]	; 0xffffffd8
   237ac:	bl	2da5c <fts_children@@Base+0x1690>
   237b0:	movw	r3, #29789	; 0x745d
   237b4:	movt	r3, #1489	; 0x5d1
   237b8:	cmp	r0, r3
   237bc:	str	r0, [fp, #-216]	; 0xffffff28
   237c0:	bls	237e4 <__assert_fail@plt+0x11110>
   237c4:	mov	r0, #0
   237c8:	ldr	r1, [fp, #-228]	; 0xffffff1c
   237cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   237d0:	ldr	r3, [r1]
   237d4:	cmp	r2, r3
   237d8:	bne	23fbc <__assert_fail@plt+0x118e8>
   237dc:	sub	sp, fp, #32
   237e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237e4:	ldr	r1, [fp, #-216]	; 0xffffff28
   237e8:	mov	r0, #44	; 0x2c
   237ec:	movw	r3, #4023	; 0xfb7
   237f0:	mul	r0, r0, r1
   237f4:	cmp	r0, r3
   237f8:	bls	23b5c <__assert_fail@plt+0x11488>
   237fc:	bl	2d8d4 <fts_children@@Base+0x1508>
   23800:	str	r0, [fp, #-224]	; 0xffffff20
   23804:	ldr	r3, [fp, #-224]	; 0xffffff20
   23808:	cmp	r3, #0
   2380c:	beq	237c4 <__assert_fail@plt+0x110f0>
   23810:	ldr	r1, [fp, #-216]	; 0xffffff28
   23814:	mov	r2, #0
   23818:	add	sl, r3, #16
   2381c:	strb	r2, [fp, #-208]	; 0xffffff30
   23820:	str	r4, [fp, #-192]	; 0xffffff40
   23824:	mov	r7, r4
   23828:	add	r9, r1, r1, lsl #2
   2382c:	movw	r8, #20608	; 0x5080
   23830:	str	r2, [fp, #-200]	; 0xffffff38
   23834:	mov	r5, r2
   23838:	add	r9, r3, r9, lsl #3
   2383c:	ldrb	r3, [fp, #-208]	; 0xffffff30
   23840:	str	r2, [fp, #-204]	; 0xffffff34
   23844:	movt	r8, #3
   23848:	cmp	r3, #0
   2384c:	strb	r2, [fp, #-196]	; 0xffffff3c
   23850:	mov	r4, #1
   23854:	sub	r6, fp, #176	; 0xb0
   23858:	bne	23bd8 <__assert_fail@plt+0x11504>
   2385c:	ldrb	r3, [r7]
   23860:	and	r2, r3, #31
   23864:	lsr	r3, r3, #5
   23868:	ldr	r3, [r8, r3, lsl #2]
   2386c:	lsr	r3, r3, r2
   23870:	tst	r3, #1
   23874:	beq	23c3c <__assert_fail@plt+0x11568>
   23878:	str	r4, [fp, #-188]	; 0xffffff44
   2387c:	ldrb	r7, [r7]
   23880:	strb	r4, [fp, #-184]	; 0xffffff48
   23884:	str	r7, [fp, #-180]	; 0xffffff4c
   23888:	cmp	r7, #0
   2388c:	strb	r4, [fp, #-196]	; 0xffffff3c
   23890:	mov	r3, #1
   23894:	bne	23b8c <__assert_fail@plt+0x114b8>
   23898:	ldr	r1, [fp, #-216]	; 0xffffff28
   2389c:	str	r3, [r9, #4]
   238a0:	cmp	r1, #2
   238a4:	bls	23968 <__assert_fail@plt+0x11294>
   238a8:	mov	r4, r7
   238ac:	ldr	r7, [fp, #-224]	; 0xffffff20
   238b0:	mov	r6, r9
   238b4:	mov	sl, r9
   238b8:	mov	r5, #2
   238bc:	mov	r9, r7
   238c0:	ldrb	r8, [r7, #48]	; 0x30
   238c4:	b	23900 <__assert_fail@plt+0x1122c>
   238c8:	ldrb	r2, [r3, #8]
   238cc:	cmp	r2, #0
   238d0:	beq	23910 <__assert_fail@plt+0x1123c>
   238d4:	ldr	r0, [r7, #52]	; 0x34
   238d8:	ldr	r3, [r3, #12]
   238dc:	subs	r1, r0, r3
   238e0:	rsbs	r0, r1, #0
   238e4:	adcs	r0, r0, r1
   238e8:	cmp	r0, #0
   238ec:	bne	23940 <__assert_fail@plt+0x1126c>
   238f0:	cmp	r4, #0
   238f4:	beq	23e00 <__assert_fail@plt+0x1172c>
   238f8:	ldr	r3, [sl, r4, lsl #2]
   238fc:	rsb	r4, r3, r4
   23900:	add	r3, r4, r4, lsl #2
   23904:	cmp	r8, #0
   23908:	add	r3, r9, r3, lsl #3
   2390c:	bne	238c8 <__assert_fail@plt+0x111f4>
   23910:	ldr	r2, [r7, #44]	; 0x2c
   23914:	ldr	r1, [r3, #4]
   23918:	cmp	r2, r1
   2391c:	movne	r0, #0
   23920:	bne	238e8 <__assert_fail@plt+0x11214>
   23924:	ldr	r1, [r3]
   23928:	ldr	r0, [r7, #40]	; 0x28
   2392c:	bl	12158 <memcmp@plt>
   23930:	rsbs	r0, r0, #1
   23934:	movcc	r0, #0
   23938:	cmp	r0, #0
   2393c:	beq	238f0 <__assert_fail@plt+0x1121c>
   23940:	add	r4, r4, #1
   23944:	rsb	r3, r4, r5
   23948:	str	r3, [r6, #8]
   2394c:	ldr	r2, [fp, #-216]	; 0xffffff28
   23950:	add	r5, r5, #1
   23954:	add	r7, r7, #40	; 0x28
   23958:	add	r6, r6, #4
   2395c:	cmp	r5, r2
   23960:	bne	238c0 <__assert_fail@plt+0x111ec>
   23964:	mov	r9, sl
   23968:	ldr	r1, [fp, #-220]	; 0xffffff24
   2396c:	mov	r3, #0
   23970:	ldr	r2, [fp, #-232]	; 0xffffff18
   23974:	movw	r7, #20608	; 0x5080
   23978:	movt	r7, #3
   2397c:	mov	r4, r3
   23980:	mov	r8, r3
   23984:	mov	r6, r3
   23988:	mov	r5, #1
   2398c:	str	r1, [fp, #-136]	; 0xffffff78
   23990:	str	r1, [fp, #-80]	; 0xffffffb0
   23994:	str	r3, [r2]
   23998:	strb	r3, [fp, #-152]	; 0xffffff68
   2399c:	str	r3, [fp, #-148]	; 0xffffff6c
   239a0:	strb	r3, [fp, #-140]	; 0xffffff74
   239a4:	strb	r3, [fp, #-96]	; 0xffffffa0
   239a8:	str	r3, [fp, #-92]	; 0xffffffa4
   239ac:	strb	r3, [fp, #-84]	; 0xffffffac
   239b0:	str	r3, [fp, #-144]	; 0xffffff70
   239b4:	str	r3, [fp, #-88]	; 0xffffffa8
   239b8:	str	r9, [fp, #-220]	; 0xffffff24
   239bc:	cmp	r4, #0
   239c0:	beq	23a24 <__assert_fail@plt+0x11350>
   239c4:	ldrb	r4, [fp, #-72]	; 0xffffffb8
   239c8:	cmp	r4, #0
   239cc:	bne	23a70 <__assert_fail@plt+0x1139c>
   239d0:	add	r1, r8, r8, lsl #2
   239d4:	ldr	r2, [fp, #-224]	; 0xffffff20
   239d8:	add	r1, r2, r1, lsl #3
   239dc:	ldr	r2, [r1, #4]
   239e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   239e4:	cmp	r2, r3
   239e8:	movne	r0, #0
   239ec:	beq	23de8 <__assert_fail@plt+0x11714>
   239f0:	mov	r3, r0
   239f4:	cmp	r3, #0
   239f8:	beq	23aac <__assert_fail@plt+0x113d8>
   239fc:	ldr	r3, [fp, #-216]	; 0xffffff28
   23a00:	add	r8, r8, #1
   23a04:	ldr	sl, [fp, #-80]	; 0xffffffb0
   23a08:	cmp	r3, r8
   23a0c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   23a10:	strb	r6, [fp, #-84]	; 0xffffffac
   23a14:	add	r3, sl, r2
   23a18:	str	r3, [fp, #-80]	; 0xffffffb0
   23a1c:	beq	23f6c <__assert_fail@plt+0x11898>
   23a20:	mov	r4, #0
   23a24:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   23a28:	ldr	sl, [fp, #-80]	; 0xffffffb0
   23a2c:	cmp	r3, #0
   23a30:	bne	23d14 <__assert_fail@plt+0x11640>
   23a34:	ldrb	r2, [sl]
   23a38:	and	r1, r2, #31
   23a3c:	lsr	r2, r2, #5
   23a40:	ldr	r2, [r7, r2, lsl #2]
   23a44:	lsr	r2, r2, r1
   23a48:	tst	r2, #1
   23a4c:	beq	23d00 <__assert_fail@plt+0x1162c>
   23a50:	str	r5, [fp, #-76]	; 0xffffffb4
   23a54:	mov	r4, #1
   23a58:	ldrb	r3, [sl]
   23a5c:	strb	r5, [fp, #-72]	; 0xffffffb8
   23a60:	str	r3, [fp, #-68]	; 0xffffffbc
   23a64:	cmp	r4, #0
   23a68:	strb	r5, [fp, #-84]	; 0xffffffac
   23a6c:	beq	239d0 <__assert_fail@plt+0x112fc>
   23a70:	ldr	r2, [fp, #-68]	; 0xffffffbc
   23a74:	cmp	r2, #0
   23a78:	beq	23f78 <__assert_fail@plt+0x118a4>
   23a7c:	ldr	r3, [fp, #-224]	; 0xffffff20
   23a80:	add	r1, r8, r8, lsl #2
   23a84:	add	r1, r3, r1, lsl #3
   23a88:	ldrb	r3, [r1, #8]
   23a8c:	cmp	r3, #0
   23a90:	beq	239dc <__assert_fail@plt+0x11308>
   23a94:	ldr	r3, [r1, #12]
   23a98:	subs	r2, r2, r3
   23a9c:	rsbs	r3, r2, #0
   23aa0:	adcs	r3, r3, r2
   23aa4:	cmp	r3, #0
   23aa8:	bne	239fc <__assert_fail@plt+0x11328>
   23aac:	cmp	r8, #0
   23ab0:	beq	23d98 <__assert_fail@plt+0x116c4>
   23ab4:	ldr	r2, [fp, #-220]	; 0xffffff24
   23ab8:	ldr	r4, [r2, r8, lsl #2]
   23abc:	cmp	r4, #0
   23ac0:	rsb	r8, r4, r8
   23ac4:	beq	23de0 <__assert_fail@plt+0x1170c>
   23ac8:	ldrb	sl, [fp, #-140]	; 0xffffff74
   23acc:	cmp	sl, #0
   23ad0:	beq	23b00 <__assert_fail@plt+0x1142c>
   23ad4:	ldrb	sl, [fp, #-128]	; 0xffffff80
   23ad8:	cmp	sl, #0
   23adc:	bne	23b4c <__assert_fail@plt+0x11478>
   23ae0:	ldr	r2, [fp, #-136]	; 0xffffff78
   23ae4:	subs	r4, r4, #1
   23ae8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   23aec:	strb	r6, [fp, #-140]	; 0xffffff74
   23af0:	movne	sl, #0
   23af4:	add	r3, r2, r3
   23af8:	str	r3, [fp, #-136]	; 0xffffff78
   23afc:	beq	23de0 <__assert_fail@plt+0x1170c>
   23b00:	ldrb	r3, [fp, #-152]	; 0xffffff68
   23b04:	ldr	r9, [fp, #-136]	; 0xffffff78
   23b08:	cmp	r3, #0
   23b0c:	bne	23c68 <__assert_fail@plt+0x11594>
   23b10:	ldrb	r2, [r9]
   23b14:	and	r1, r2, #31
   23b18:	lsr	r2, r2, #5
   23b1c:	ldr	r2, [r7, r2, lsl #2]
   23b20:	lsr	r2, r2, r1
   23b24:	tst	r2, #1
   23b28:	beq	23c54 <__assert_fail@plt+0x11580>
   23b2c:	str	r5, [fp, #-132]	; 0xffffff7c
   23b30:	mov	sl, #1
   23b34:	ldrb	r3, [r9]
   23b38:	strb	r5, [fp, #-128]	; 0xffffff80
   23b3c:	str	r3, [fp, #-124]	; 0xffffff84
   23b40:	cmp	sl, #0
   23b44:	strb	r5, [fp, #-140]	; 0xffffff74
   23b48:	beq	23ae0 <__assert_fail@plt+0x1140c>
   23b4c:	ldr	r3, [fp, #-124]	; 0xffffff84
   23b50:	cmp	r3, #0
   23b54:	bne	23ae0 <__assert_fail@plt+0x1140c>
   23b58:	bl	12674 <abort@plt>
   23b5c:	add	r3, r0, #22
   23b60:	bic	r3, r3, #7
   23b64:	sub	sp, sp, r3
   23b68:	add	r2, sp, #8
   23b6c:	str	r2, [fp, #-224]	; 0xffffff20
   23b70:	b	23804 <__assert_fail@plt+0x11130>
   23b74:	ldr	r0, [fp, #-192]	; 0xffffff40
   23b78:	bl	123d4 <strlen@plt>
   23b7c:	strb	r5, [fp, #-184]	; 0xffffff48
   23b80:	str	r0, [fp, #-188]	; 0xffffff44
   23b84:	mov	r3, #0
   23b88:	strb	r4, [fp, #-196]	; 0xffffff3c
   23b8c:	ldr	r2, [fp, #-192]	; 0xffffff40
   23b90:	cmp	r2, r6
   23b94:	strne	r2, [sl, #-16]
   23b98:	beq	23ea4 <__assert_fail@plt+0x117d0>
   23b9c:	ldr	r2, [fp, #-188]	; 0xffffff44
   23ba0:	cmp	r3, #0
   23ba4:	strb	r3, [sl, #-8]
   23ba8:	add	sl, sl, #40	; 0x28
   23bac:	str	r2, [sl, #-52]	; 0xffffffcc
   23bb0:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   23bb4:	strne	r3, [sl, #-44]	; 0xffffffd4
   23bb8:	ldr	r7, [fp, #-192]	; 0xffffff40
   23bbc:	ldr	r3, [fp, #-188]	; 0xffffff44
   23bc0:	strb	r5, [fp, #-196]	; 0xffffff3c
   23bc4:	add	r7, r7, r3
   23bc8:	ldrb	r3, [fp, #-208]	; 0xffffff30
   23bcc:	str	r7, [fp, #-192]	; 0xffffff40
   23bd0:	cmp	r3, #0
   23bd4:	beq	2385c <__assert_fail@plt+0x11188>
   23bd8:	bl	12284 <__ctype_get_mb_cur_max@plt>
   23bdc:	mov	r1, r0
   23be0:	mov	r0, r7
   23be4:	bl	28890 <__assert_fail@plt+0x161bc>
   23be8:	mov	r1, r7
   23bec:	sub	r3, fp, #204	; 0xcc
   23bf0:	mov	r2, r0
   23bf4:	sub	r0, fp, #180	; 0xb4
   23bf8:	bl	122c0 <mbrtowc@plt>
   23bfc:	cmn	r0, #1
   23c00:	str	r0, [fp, #-188]	; 0xffffff44
   23c04:	strbeq	r5, [fp, #-184]	; 0xffffff48
   23c08:	streq	r4, [fp, #-188]	; 0xffffff44
   23c0c:	beq	23b84 <__assert_fail@plt+0x114b0>
   23c10:	cmn	r0, #2
   23c14:	beq	23b74 <__assert_fail@plt+0x114a0>
   23c18:	cmp	r0, #0
   23c1c:	beq	23e08 <__assert_fail@plt+0x11734>
   23c20:	ldr	r7, [fp, #-180]	; 0xffffff4c
   23c24:	sub	r0, fp, #204	; 0xcc
   23c28:	strb	r4, [fp, #-184]	; 0xffffff48
   23c2c:	bl	12128 <mbsinit@plt>
   23c30:	cmp	r0, #0
   23c34:	strbne	r5, [fp, #-208]	; 0xffffff30
   23c38:	b	23888 <__assert_fail@plt+0x111b4>
   23c3c:	sub	r0, fp, #204	; 0xcc
   23c40:	bl	12128 <mbsinit@plt>
   23c44:	cmp	r0, #0
   23c48:	beq	23f9c <__assert_fail@plt+0x118c8>
   23c4c:	strb	r4, [fp, #-208]	; 0xffffff30
   23c50:	b	23bd8 <__assert_fail@plt+0x11504>
   23c54:	sub	r0, fp, #148	; 0x94
   23c58:	bl	12128 <mbsinit@plt>
   23c5c:	cmp	r0, #0
   23c60:	beq	23f9c <__assert_fail@plt+0x118c8>
   23c64:	strb	r5, [fp, #-152]	; 0xffffff68
   23c68:	bl	12284 <__ctype_get_mb_cur_max@plt>
   23c6c:	mov	r1, r0
   23c70:	mov	r0, r9
   23c74:	bl	28890 <__assert_fail@plt+0x161bc>
   23c78:	mov	r1, r9
   23c7c:	sub	r3, fp, #148	; 0x94
   23c80:	mov	r2, r0
   23c84:	sub	r0, fp, #124	; 0x7c
   23c88:	bl	122c0 <mbrtowc@plt>
   23c8c:	cmn	r0, #1
   23c90:	str	r0, [fp, #-132]	; 0xffffff7c
   23c94:	strbeq	r6, [fp, #-128]	; 0xffffff80
   23c98:	streq	r5, [fp, #-132]	; 0xffffff7c
   23c9c:	beq	23b40 <__assert_fail@plt+0x1146c>
   23ca0:	cmn	r0, #2
   23ca4:	beq	23cec <__assert_fail@plt+0x11618>
   23ca8:	cmp	r0, #0
   23cac:	bne	23cd0 <__assert_fail@plt+0x115fc>
   23cb0:	ldr	r3, [fp, #-136]	; 0xffffff78
   23cb4:	str	r5, [fp, #-132]	; 0xffffff7c
   23cb8:	ldrb	r3, [r3]
   23cbc:	cmp	r3, #0
   23cc0:	bne	23fc0 <__assert_fail@plt+0x118ec>
   23cc4:	ldr	r3, [fp, #-124]	; 0xffffff84
   23cc8:	cmp	r3, #0
   23ccc:	bne	23e28 <__assert_fail@plt+0x11754>
   23cd0:	sub	r0, fp, #148	; 0x94
   23cd4:	strb	r5, [fp, #-128]	; 0xffffff80
   23cd8:	bl	12128 <mbsinit@plt>
   23cdc:	mov	sl, #1
   23ce0:	cmp	r0, #0
   23ce4:	strbne	r6, [fp, #-152]	; 0xffffff68
   23ce8:	b	23b40 <__assert_fail@plt+0x1146c>
   23cec:	ldr	r0, [fp, #-136]	; 0xffffff78
   23cf0:	bl	123d4 <strlen@plt>
   23cf4:	strb	r6, [fp, #-128]	; 0xffffff80
   23cf8:	str	r0, [fp, #-132]	; 0xffffff7c
   23cfc:	b	23b40 <__assert_fail@plt+0x1146c>
   23d00:	sub	r0, fp, #92	; 0x5c
   23d04:	bl	12128 <mbsinit@plt>
   23d08:	cmp	r0, #0
   23d0c:	beq	23f9c <__assert_fail@plt+0x118c8>
   23d10:	strb	r5, [fp, #-96]	; 0xffffffa0
   23d14:	bl	12284 <__ctype_get_mb_cur_max@plt>
   23d18:	mov	r1, r0
   23d1c:	mov	r0, sl
   23d20:	bl	28890 <__assert_fail@plt+0x161bc>
   23d24:	mov	r1, sl
   23d28:	sub	r3, fp, #92	; 0x5c
   23d2c:	mov	r2, r0
   23d30:	sub	r0, fp, #68	; 0x44
   23d34:	bl	122c0 <mbrtowc@plt>
   23d38:	cmn	r0, #1
   23d3c:	str	r0, [fp, #-76]	; 0xffffffb4
   23d40:	strbeq	r6, [fp, #-72]	; 0xffffffb8
   23d44:	streq	r5, [fp, #-76]	; 0xffffffb4
   23d48:	beq	23a64 <__assert_fail@plt+0x11390>
   23d4c:	cmn	r0, #2
   23d50:	beq	23f58 <__assert_fail@plt+0x11884>
   23d54:	cmp	r0, #0
   23d58:	bne	23d7c <__assert_fail@plt+0x116a8>
   23d5c:	ldr	sl, [fp, #-80]	; 0xffffffb0
   23d60:	str	r5, [fp, #-76]	; 0xffffffb4
   23d64:	ldrb	r3, [sl]
   23d68:	cmp	r3, #0
   23d6c:	bne	23fc0 <__assert_fail@plt+0x118ec>
   23d70:	ldr	r3, [fp, #-68]	; 0xffffffbc
   23d74:	cmp	r3, #0
   23d78:	bne	23e28 <__assert_fail@plt+0x11754>
   23d7c:	sub	r0, fp, #92	; 0x5c
   23d80:	strb	r5, [fp, #-72]	; 0xffffffb8
   23d84:	bl	12128 <mbsinit@plt>
   23d88:	mov	r4, #1
   23d8c:	cmp	r0, #0
   23d90:	strbne	r6, [fp, #-96]	; 0xffffffa0
   23d94:	b	23a64 <__assert_fail@plt+0x11390>
   23d98:	ldrb	r4, [fp, #-140]	; 0xffffff74
   23d9c:	cmp	r4, #0
   23da0:	beq	23e48 <__assert_fail@plt+0x11774>
   23da4:	ldrb	r4, [fp, #-128]	; 0xffffff80
   23da8:	cmp	r4, #0
   23dac:	bne	23e94 <__assert_fail@plt+0x117c0>
   23db0:	ldr	r1, [fp, #-136]	; 0xffffff78
   23db4:	mov	r4, #0
   23db8:	ldr	r2, [fp, #-132]	; 0xffffff7c
   23dbc:	ldr	sl, [fp, #-80]	; 0xffffffb0
   23dc0:	add	r2, r1, r2
   23dc4:	str	r2, [fp, #-136]	; 0xffffff78
   23dc8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   23dcc:	strb	r6, [fp, #-140]	; 0xffffff74
   23dd0:	add	r3, sl, r2
   23dd4:	strb	r6, [fp, #-84]	; 0xffffffac
   23dd8:	str	r3, [fp, #-80]	; 0xffffffb0
   23ddc:	b	23a24 <__assert_fail@plt+0x11350>
   23de0:	ldrb	r4, [fp, #-84]	; 0xffffffac
   23de4:	b	239bc <__assert_fail@plt+0x112e8>
   23de8:	ldr	r0, [r1]
   23dec:	ldr	r1, [fp, #-80]	; 0xffffffb0
   23df0:	bl	12158 <memcmp@plt>
   23df4:	rsbs	r0, r0, #1
   23df8:	movcc	r0, #0
   23dfc:	b	239f0 <__assert_fail@plt+0x1131c>
   23e00:	str	r5, [r6, #8]
   23e04:	b	2394c <__assert_fail@plt+0x11278>
   23e08:	ldr	r3, [fp, #-192]	; 0xffffff40
   23e0c:	str	r4, [fp, #-188]	; 0xffffff44
   23e10:	ldrb	r3, [r3]
   23e14:	cmp	r3, #0
   23e18:	bne	23fc0 <__assert_fail@plt+0x118ec>
   23e1c:	ldr	r7, [fp, #-180]	; 0xffffff4c
   23e20:	cmp	r7, #0
   23e24:	beq	23c24 <__assert_fail@plt+0x11550>
   23e28:	movw	r0, #15388	; 0x3c1c
   23e2c:	movw	r1, #15352	; 0x3bf8
   23e30:	movw	r3, #15308	; 0x3bcc
   23e34:	movt	r0, #3
   23e38:	movt	r1, #3
   23e3c:	mov	r2, #176	; 0xb0
   23e40:	movt	r3, #3
   23e44:	bl	126d4 <__assert_fail@plt>
   23e48:	ldrb	r3, [fp, #-152]	; 0xffffff68
   23e4c:	ldr	sl, [fp, #-136]	; 0xffffff78
   23e50:	cmp	r3, #0
   23e54:	bne	23ed4 <__assert_fail@plt+0x11800>
   23e58:	ldrb	r2, [sl]
   23e5c:	and	r1, r2, #31
   23e60:	lsr	r2, r2, #5
   23e64:	ldr	r2, [r7, r2, lsl #2]
   23e68:	lsr	r2, r2, r1
   23e6c:	tst	r2, #1
   23e70:	beq	23ec0 <__assert_fail@plt+0x117ec>
   23e74:	str	r5, [fp, #-132]	; 0xffffff7c
   23e78:	mov	r4, #1
   23e7c:	ldrb	r3, [sl]
   23e80:	strb	r5, [fp, #-128]	; 0xffffff80
   23e84:	str	r3, [fp, #-124]	; 0xffffff84
   23e88:	cmp	r4, #0
   23e8c:	strb	r5, [fp, #-140]	; 0xffffff74
   23e90:	beq	23db0 <__assert_fail@plt+0x116dc>
   23e94:	ldr	r3, [fp, #-124]	; 0xffffff84
   23e98:	cmp	r3, #0
   23e9c:	bne	23db0 <__assert_fail@plt+0x116dc>
   23ea0:	b	23b58 <__assert_fail@plt+0x11484>
   23ea4:	mov	r0, sl
   23ea8:	mov	r1, r6
   23eac:	ldr	r2, [fp, #-188]	; 0xffffff44
   23eb0:	bl	12104 <memcpy@plt>
   23eb4:	str	sl, [sl, #-16]
   23eb8:	ldrb	r3, [fp, #-184]	; 0xffffff48
   23ebc:	b	23b9c <__assert_fail@plt+0x114c8>
   23ec0:	sub	r0, fp, #148	; 0x94
   23ec4:	bl	12128 <mbsinit@plt>
   23ec8:	cmp	r0, #0
   23ecc:	beq	23f9c <__assert_fail@plt+0x118c8>
   23ed0:	strb	r5, [fp, #-152]	; 0xffffff68
   23ed4:	bl	12284 <__ctype_get_mb_cur_max@plt>
   23ed8:	mov	r1, r0
   23edc:	mov	r0, sl
   23ee0:	bl	28890 <__assert_fail@plt+0x161bc>
   23ee4:	mov	r1, sl
   23ee8:	sub	r3, fp, #148	; 0x94
   23eec:	mov	r2, r0
   23ef0:	sub	r0, fp, #124	; 0x7c
   23ef4:	bl	122c0 <mbrtowc@plt>
   23ef8:	cmn	r0, #1
   23efc:	str	r0, [fp, #-132]	; 0xffffff7c
   23f00:	strbeq	r6, [fp, #-128]	; 0xffffff80
   23f04:	streq	r5, [fp, #-132]	; 0xffffff7c
   23f08:	beq	23e88 <__assert_fail@plt+0x117b4>
   23f0c:	cmn	r0, #2
   23f10:	beq	23f88 <__assert_fail@plt+0x118b4>
   23f14:	cmp	r0, #0
   23f18:	bne	23f3c <__assert_fail@plt+0x11868>
   23f1c:	ldr	r3, [fp, #-136]	; 0xffffff78
   23f20:	str	r5, [fp, #-132]	; 0xffffff7c
   23f24:	ldrb	r3, [r3]
   23f28:	cmp	r3, #0
   23f2c:	bne	23fc0 <__assert_fail@plt+0x118ec>
   23f30:	ldr	r3, [fp, #-124]	; 0xffffff84
   23f34:	cmp	r3, #0
   23f38:	bne	23e28 <__assert_fail@plt+0x11754>
   23f3c:	sub	r0, fp, #148	; 0x94
   23f40:	strb	r5, [fp, #-128]	; 0xffffff80
   23f44:	bl	12128 <mbsinit@plt>
   23f48:	mov	r4, #1
   23f4c:	cmp	r0, #0
   23f50:	strbne	r6, [fp, #-152]	; 0xffffff68
   23f54:	b	23e88 <__assert_fail@plt+0x117b4>
   23f58:	ldr	r0, [fp, #-80]	; 0xffffffb0
   23f5c:	bl	123d4 <strlen@plt>
   23f60:	strb	r6, [fp, #-72]	; 0xffffffb8
   23f64:	str	r0, [fp, #-76]	; 0xffffffb4
   23f68:	b	23a64 <__assert_fail@plt+0x11390>
   23f6c:	ldr	r3, [fp, #-136]	; 0xffffff78
   23f70:	ldr	r1, [fp, #-232]	; 0xffffff18
   23f74:	str	r3, [r1]
   23f78:	ldr	r0, [fp, #-224]	; 0xffffff20
   23f7c:	bl	2d938 <fts_children@@Base+0x156c>
   23f80:	mov	r0, #1
   23f84:	b	237c8 <__assert_fail@plt+0x110f4>
   23f88:	ldr	r0, [fp, #-136]	; 0xffffff78
   23f8c:	bl	123d4 <strlen@plt>
   23f90:	strb	r6, [fp, #-128]	; 0xffffff80
   23f94:	str	r0, [fp, #-132]	; 0xffffff7c
   23f98:	b	23e88 <__assert_fail@plt+0x117b4>
   23f9c:	movw	r0, #15328	; 0x3be0
   23fa0:	movw	r1, #15352	; 0x3bf8
   23fa4:	movw	r3, #15308	; 0x3bcc
   23fa8:	movt	r0, #3
   23fac:	movt	r1, #3
   23fb0:	mov	r2, #147	; 0x93
   23fb4:	movt	r3, #3
   23fb8:	bl	126d4 <__assert_fail@plt>
   23fbc:	bl	12188 <__stack_chk_fail@plt>
   23fc0:	movw	r0, #15364	; 0x3c04
   23fc4:	movw	r1, #15352	; 0x3bf8
   23fc8:	movw	r3, #15308	; 0x3bcc
   23fcc:	movt	r0, #3
   23fd0:	movt	r1, #3
   23fd4:	mov	r2, #175	; 0xaf
   23fd8:	movt	r3, #3
   23fdc:	bl	126d4 <__assert_fail@plt>
   23fe0:	movw	r2, #26008	; 0x6598
   23fe4:	movt	r2, #4
   23fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fec:	sub	sp, sp, #316	; 0x13c
   23ff0:	ldr	r3, [r2]
   23ff4:	mov	r8, r1
   23ff8:	str	r2, [sp]
   23ffc:	str	r0, [sp, #8]
   24000:	str	r3, [sp, #308]	; 0x134
   24004:	bl	12284 <__ctype_get_mb_cur_max@plt>
   24008:	cmp	r0, #1
   2400c:	bls	243a0 <__assert_fail@plt+0x11ccc>
   24010:	ldrb	r2, [r8]
   24014:	movw	r7, #20608	; 0x5080
   24018:	movt	r7, #3
   2401c:	mov	r3, #0
   24020:	and	r1, r2, #31
   24024:	str	r8, [sp, #44]	; 0x2c
   24028:	lsr	r0, r2, #5
   2402c:	str	r3, [sp, #36]	; 0x24
   24030:	strb	r3, [sp, #28]
   24034:	ldr	r0, [r7, r0, lsl #2]
   24038:	str	r3, [sp, #32]
   2403c:	strb	r3, [sp, #40]	; 0x28
   24040:	lsr	r1, r0, r1
   24044:	ands	r5, r1, #1
   24048:	beq	242f0 <__assert_fail@plt+0x11c1c>
   2404c:	mov	r4, r2
   24050:	cmp	r4, #0
   24054:	mov	r3, #1
   24058:	str	r2, [sp, #56]	; 0x38
   2405c:	str	r3, [sp, #48]	; 0x30
   24060:	strb	r3, [sp, #52]	; 0x34
   24064:	mov	r3, #1
   24068:	strb	r3, [sp, #40]	; 0x28
   2406c:	beq	24380 <__assert_fail@plt+0x11cac>
   24070:	mov	r3, #0
   24074:	mov	r2, #1
   24078:	strb	r3, [sp, #140]	; 0x8c
   2407c:	mov	r9, r3
   24080:	str	r2, [sp, #16]
   24084:	mov	r6, r3
   24088:	ldrb	r2, [sp, #140]	; 0x8c
   2408c:	mov	r4, #1
   24090:	ldr	r1, [sp, #8]
   24094:	cmp	r2, #0
   24098:	str	r3, [sp, #12]
   2409c:	str	r8, [sp, #100]	; 0x64
   240a0:	str	r1, [sp, #156]	; 0x9c
   240a4:	mov	fp, r1
   240a8:	str	r3, [sp, #4]
   240ac:	strb	r3, [sp, #84]	; 0x54
   240b0:	str	r3, [sp, #88]	; 0x58
   240b4:	strb	r3, [sp, #96]	; 0x60
   240b8:	str	r3, [sp, #144]	; 0x90
   240bc:	strb	r3, [sp, #152]	; 0x98
   240c0:	str	r3, [sp, #92]	; 0x5c
   240c4:	str	r3, [sp, #148]	; 0x94
   240c8:	str	r8, [sp, #20]
   240cc:	bne	2427c <__assert_fail@plt+0x11ba8>
   240d0:	ldrb	r2, [fp]
   240d4:	and	r1, r2, #31
   240d8:	lsr	r2, r2, #5
   240dc:	ldr	r2, [r7, r2, lsl #2]
   240e0:	lsr	r2, r2, r1
   240e4:	tst	r2, #1
   240e8:	beq	244e0 <__assert_fail@plt+0x11e0c>
   240ec:	str	r4, [sp, #160]	; 0xa0
   240f0:	ldrb	r5, [fp]
   240f4:	strb	r4, [sp, #164]	; 0xa4
   240f8:	cmp	r5, #0
   240fc:	strb	r4, [sp, #152]	; 0x98
   24100:	str	r5, [sp, #168]	; 0xa8
   24104:	beq	242e8 <__assert_fail@plt+0x11c14>
   24108:	mov	r3, #1
   2410c:	ldr	r5, [sp, #16]
   24110:	cmp	r9, #9
   24114:	movls	r5, #0
   24118:	andhi	r5, r5, #1
   2411c:	cmp	r5, #0
   24120:	beq	2421c <__assert_fail@plt+0x11b48>
   24124:	ldr	r1, [sp, #4]
   24128:	add	r2, r9, r9, lsl #2
   2412c:	cmp	r1, r2
   24130:	bcc	246a0 <__assert_fail@plt+0x11fcc>
   24134:	ldr	r2, [sp, #12]
   24138:	subs	fp, r1, r2
   2413c:	beq	241d0 <__assert_fail@plt+0x11afc>
   24140:	ldrb	r8, [sp, #96]	; 0x60
   24144:	cmp	r8, #0
   24148:	beq	24178 <__assert_fail@plt+0x11aa4>
   2414c:	ldrb	r8, [sp, #108]	; 0x6c
   24150:	cmp	r8, #0
   24154:	bne	241c4 <__assert_fail@plt+0x11af0>
   24158:	ldr	r2, [sp, #100]	; 0x64
   2415c:	subs	fp, fp, #1
   24160:	ldr	r3, [sp, #104]	; 0x68
   24164:	strb	r6, [sp, #96]	; 0x60
   24168:	add	r8, r2, r3
   2416c:	str	r8, [sp, #100]	; 0x64
   24170:	beq	2476c <__assert_fail@plt+0x12098>
   24174:	mov	r8, #0
   24178:	ldrb	r3, [sp, #84]	; 0x54
   2417c:	ldr	sl, [sp, #100]	; 0x64
   24180:	cmp	r3, #0
   24184:	bne	24544 <__assert_fail@plt+0x11e70>
   24188:	ldrb	r2, [sl]
   2418c:	and	r1, r2, #31
   24190:	lsr	r2, r2, #5
   24194:	ldr	r2, [r7, r2, lsl #2]
   24198:	lsr	r2, r2, r1
   2419c:	tst	r2, #1
   241a0:	beq	24530 <__assert_fail@plt+0x11e5c>
   241a4:	str	r4, [sp, #104]	; 0x68
   241a8:	mov	r8, r5
   241ac:	ldrb	r3, [sl]
   241b0:	strb	r4, [sp, #108]	; 0x6c
   241b4:	str	r3, [sp, #112]	; 0x70
   241b8:	cmp	r8, #0
   241bc:	strb	r4, [sp, #96]	; 0x60
   241c0:	beq	24158 <__assert_fail@plt+0x11a84>
   241c4:	ldr	r3, [sp, #112]	; 0x70
   241c8:	cmp	r3, #0
   241cc:	bne	24158 <__assert_fail@plt+0x11a84>
   241d0:	ldrb	r3, [sp, #96]	; 0x60
   241d4:	cmp	r3, #0
   241d8:	ldrbne	r5, [sp, #108]	; 0x6c
   241dc:	beq	24768 <__assert_fail@plt+0x12094>
   241e0:	cmp	r5, #0
   241e4:	beq	246ac <__assert_fail@plt+0x11fd8>
   241e8:	ldr	r3, [sp, #112]	; 0x70
   241ec:	cmp	r3, #0
   241f0:	bne	246ac <__assert_fail@plt+0x11fd8>
   241f4:	ldr	r0, [sp, #8]
   241f8:	add	r2, sp, #24
   241fc:	ldr	r1, [sp, #20]
   24200:	bl	2377c <__assert_fail@plt+0x110a8>
   24204:	cmp	r0, #0
   24208:	bne	24bac <__assert_fail@plt+0x124d8>
   2420c:	ldr	r1, [sp, #4]
   24210:	ldrb	r3, [sp, #164]	; 0xa4
   24214:	str	r0, [sp, #16]
   24218:	str	r1, [sp, #12]
   2421c:	cmp	r3, #0
   24220:	ldr	r3, [sp, #4]
   24224:	add	r9, r9, #1
   24228:	add	r5, r3, #1
   2422c:	beq	245c8 <__assert_fail@plt+0x11ef4>
   24230:	ldrb	r3, [sp, #52]	; 0x34
   24234:	cmp	r3, #0
   24238:	beq	245c8 <__assert_fail@plt+0x11ef4>
   2423c:	ldr	r0, [sp, #168]	; 0xa8
   24240:	ldr	r3, [sp, #56]	; 0x38
   24244:	subs	r3, r0, r3
   24248:	rsbs	r0, r3, #0
   2424c:	adcs	r0, r0, r3
   24250:	cmp	r0, #0
   24254:	bne	245f8 <__assert_fail@plt+0x11f24>
   24258:	ldr	fp, [sp, #156]	; 0x9c
   2425c:	ldr	r2, [sp, #160]	; 0xa0
   24260:	str	r5, [sp, #4]
   24264:	add	fp, fp, r2
   24268:	ldrb	r2, [sp, #140]	; 0x8c
   2426c:	strb	r6, [sp, #152]	; 0x98
   24270:	cmp	r2, #0
   24274:	str	fp, [sp, #156]	; 0x9c
   24278:	beq	240d0 <__assert_fail@plt+0x119fc>
   2427c:	bl	12284 <__ctype_get_mb_cur_max@plt>
   24280:	mov	r1, r0
   24284:	mov	r0, fp
   24288:	bl	28890 <__assert_fail@plt+0x161bc>
   2428c:	mov	r1, fp
   24290:	add	r3, sp, #144	; 0x90
   24294:	mov	r2, r0
   24298:	add	r0, sp, #168	; 0xa8
   2429c:	bl	122c0 <mbrtowc@plt>
   242a0:	cmn	r0, #1
   242a4:	str	r0, [sp, #160]	; 0xa0
   242a8:	strbeq	r6, [sp, #164]	; 0xa4
   242ac:	streq	r4, [sp, #160]	; 0xa0
   242b0:	beq	24524 <__assert_fail@plt+0x11e50>
   242b4:	cmn	r0, #2
   242b8:	beq	24514 <__assert_fail@plt+0x11e40>
   242bc:	cmp	r0, #0
   242c0:	beq	24af4 <__assert_fail@plt+0x12420>
   242c4:	ldr	r5, [sp, #168]	; 0xa8
   242c8:	add	r0, sp, #144	; 0x90
   242cc:	strb	r4, [sp, #164]	; 0xa4
   242d0:	bl	12128 <mbsinit@plt>
   242d4:	strb	r4, [sp, #152]	; 0x98
   242d8:	cmp	r0, #0
   242dc:	strbne	r6, [sp, #140]	; 0x8c
   242e0:	cmp	r5, #0
   242e4:	bne	24108 <__assert_fail@plt+0x11a34>
   242e8:	mov	r0, r5
   242ec:	b	24384 <__assert_fail@plt+0x11cb0>
   242f0:	add	r0, sp, #32
   242f4:	bl	12128 <mbsinit@plt>
   242f8:	cmp	r0, #0
   242fc:	beq	24bb4 <__assert_fail@plt+0x124e0>
   24300:	mov	r4, #1
   24304:	strb	r4, [sp, #28]
   24308:	bl	12284 <__ctype_get_mb_cur_max@plt>
   2430c:	mov	r1, r0
   24310:	mov	r0, r8
   24314:	bl	28890 <__assert_fail@plt+0x161bc>
   24318:	mov	r1, r8
   2431c:	add	r3, sp, #32
   24320:	mov	r2, r0
   24324:	add	r0, sp, #56	; 0x38
   24328:	bl	122c0 <mbrtowc@plt>
   2432c:	cmn	r0, #1
   24330:	str	r0, [sp, #48]	; 0x30
   24334:	strbeq	r5, [sp, #52]	; 0x34
   24338:	streq	r4, [sp, #48]	; 0x30
   2433c:	beq	24508 <__assert_fail@plt+0x11e34>
   24340:	cmn	r0, #2
   24344:	beq	244f8 <__assert_fail@plt+0x11e24>
   24348:	cmp	r0, #0
   2434c:	beq	24b18 <__assert_fail@plt+0x12444>
   24350:	ldr	r4, [sp, #56]	; 0x38
   24354:	add	r0, sp, #32
   24358:	mov	r3, #1
   2435c:	strb	r3, [sp, #52]	; 0x34
   24360:	bl	12128 <mbsinit@plt>
   24364:	cmp	r0, #0
   24368:	movne	r3, #0
   2436c:	strbne	r3, [sp, #28]
   24370:	cmp	r4, #0
   24374:	mov	r3, #1
   24378:	strb	r3, [sp, #40]	; 0x28
   2437c:	bne	24070 <__assert_fail@plt+0x1199c>
   24380:	ldr	r0, [sp, #8]
   24384:	ldr	r1, [sp]
   24388:	ldr	r2, [sp, #308]	; 0x134
   2438c:	ldr	r3, [r1]
   24390:	cmp	r2, r3
   24394:	bne	24bd4 <__assert_fail@plt+0x12500>
   24398:	add	sp, sp, #316	; 0x13c
   2439c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243a0:	ldrb	r7, [r8]
   243a4:	cmp	r7, #0
   243a8:	beq	24380 <__assert_fail@plt+0x11cac>
   243ac:	ldr	r3, [sp, #8]
   243b0:	ldrb	r9, [r3]
   243b4:	cmp	r9, #0
   243b8:	beq	246c4 <__assert_fail@plt+0x11ff0>
   243bc:	cmp	r9, r7
   243c0:	mov	r4, #0
   243c4:	mov	fp, r4
   243c8:	str	r4, [sp, #4]
   243cc:	add	r6, r3, #1
   243d0:	mov	r5, r3
   243d4:	mov	sl, r8
   243d8:	mov	r0, #1
   243dc:	add	r4, r4, #1
   243e0:	beq	24484 <__assert_fail@plt+0x11db0>
   243e4:	ldrb	r9, [r5, #1]
   243e8:	cmp	r9, #0
   243ec:	beq	246c4 <__assert_fail@plt+0x11ff0>
   243f0:	add	fp, fp, #1
   243f4:	cmp	r4, #9
   243f8:	movls	r3, #0
   243fc:	andhi	r3, r0, #1
   24400:	cmp	r3, #0
   24404:	beq	24470 <__assert_fail@plt+0x11d9c>
   24408:	add	r3, r4, r4, lsl #2
   2440c:	cmp	fp, r3
   24410:	bcc	2446c <__assert_fail@plt+0x11d98>
   24414:	cmp	sl, #0
   24418:	beq	2443c <__assert_fail@plt+0x11d68>
   2441c:	ldr	r2, [sp, #4]
   24420:	mov	r0, sl
   24424:	rsb	r1, r2, fp
   24428:	bl	1250c <strnlen@plt>
   2442c:	str	fp, [sp, #4]
   24430:	ldrb	r3, [sl, r0]!
   24434:	cmp	r3, #0
   24438:	bne	2446c <__assert_fail@plt+0x11d98>
   2443c:	mov	r0, r8
   24440:	bl	123d4 <strlen@plt>
   24444:	mov	r1, r8
   24448:	add	r3, sp, #24
   2444c:	mov	r2, r0
   24450:	mov	r0, r6
   24454:	bl	23604 <__assert_fail@plt+0x10f30>
   24458:	cmp	r0, #0
   2445c:	bne	24bac <__assert_fail@plt+0x124d8>
   24460:	mov	sl, r0
   24464:	ldrb	r9, [r5, #1]
   24468:	b	24470 <__assert_fail@plt+0x11d9c>
   2446c:	mov	r0, #1
   24470:	cmp	r9, r7
   24474:	add	r6, r6, #1
   24478:	add	r5, r5, #1
   2447c:	add	r4, r4, #1
   24480:	bne	243e4 <__assert_fail@plt+0x11d10>
   24484:	ldrb	r3, [r8, #1]
   24488:	cmp	r3, #0
   2448c:	beq	242e8 <__assert_fail@plt+0x11c14>
   24490:	ldrb	r9, [r5, #1]
   24494:	cmp	r9, #0
   24498:	beq	246c4 <__assert_fail@plt+0x11ff0>
   2449c:	cmp	r3, r9
   244a0:	add	r3, fp, #2
   244a4:	bne	24760 <__assert_fail@plt+0x1208c>
   244a8:	rsb	r1, fp, #0
   244ac:	add	fp, r8, r1
   244b0:	add	r1, r5, r1
   244b4:	b	244d0 <__assert_fail@plt+0x11dfc>
   244b8:	ldrb	ip, [r1, r3]
   244bc:	cmp	ip, #0
   244c0:	beq	246c4 <__assert_fail@plt+0x11ff0>
   244c4:	cmp	r2, ip
   244c8:	add	r3, r3, #1
   244cc:	bne	24760 <__assert_fail@plt+0x1208c>
   244d0:	ldrb	r2, [fp, r3]
   244d4:	cmp	r2, #0
   244d8:	bne	244b8 <__assert_fail@plt+0x11de4>
   244dc:	b	242e8 <__assert_fail@plt+0x11c14>
   244e0:	add	r0, sp, #144	; 0x90
   244e4:	bl	12128 <mbsinit@plt>
   244e8:	cmp	r0, #0
   244ec:	beq	24bb4 <__assert_fail@plt+0x124e0>
   244f0:	strb	r4, [sp, #140]	; 0x8c
   244f4:	b	2427c <__assert_fail@plt+0x11ba8>
   244f8:	ldr	r0, [sp, #44]	; 0x2c
   244fc:	bl	123d4 <strlen@plt>
   24500:	strb	r5, [sp, #52]	; 0x34
   24504:	str	r0, [sp, #48]	; 0x30
   24508:	mov	r3, #1
   2450c:	strb	r3, [sp, #40]	; 0x28
   24510:	b	24070 <__assert_fail@plt+0x1199c>
   24514:	ldr	r0, [sp, #156]	; 0x9c
   24518:	bl	123d4 <strlen@plt>
   2451c:	strb	r6, [sp, #164]	; 0xa4
   24520:	str	r0, [sp, #160]	; 0xa0
   24524:	strb	r4, [sp, #152]	; 0x98
   24528:	mov	r3, #0
   2452c:	b	2410c <__assert_fail@plt+0x11a38>
   24530:	add	r0, sp, #88	; 0x58
   24534:	bl	12128 <mbsinit@plt>
   24538:	cmp	r0, #0
   2453c:	beq	24bb4 <__assert_fail@plt+0x124e0>
   24540:	strb	r4, [sp, #84]	; 0x54
   24544:	bl	12284 <__ctype_get_mb_cur_max@plt>
   24548:	mov	r1, r0
   2454c:	mov	r0, sl
   24550:	bl	28890 <__assert_fail@plt+0x161bc>
   24554:	mov	r1, sl
   24558:	add	r3, sp, #88	; 0x58
   2455c:	mov	r2, r0
   24560:	add	r0, sp, #112	; 0x70
   24564:	bl	122c0 <mbrtowc@plt>
   24568:	cmn	r0, #1
   2456c:	str	r0, [sp, #104]	; 0x68
   24570:	strbeq	r6, [sp, #108]	; 0x6c
   24574:	streq	r4, [sp, #104]	; 0x68
   24578:	beq	241b8 <__assert_fail@plt+0x11ae4>
   2457c:	cmn	r0, #2
   24580:	beq	2468c <__assert_fail@plt+0x11fb8>
   24584:	cmp	r0, #0
   24588:	bne	245ac <__assert_fail@plt+0x11ed8>
   2458c:	ldr	r3, [sp, #100]	; 0x64
   24590:	str	r4, [sp, #104]	; 0x68
   24594:	ldrb	r3, [r3]
   24598:	cmp	r3, #0
   2459c:	bne	24bd8 <__assert_fail@plt+0x12504>
   245a0:	ldr	r3, [sp, #112]	; 0x70
   245a4:	cmp	r3, #0
   245a8:	bne	24740 <__assert_fail@plt+0x1206c>
   245ac:	add	r0, sp, #88	; 0x58
   245b0:	strb	r4, [sp, #108]	; 0x6c
   245b4:	bl	12128 <mbsinit@plt>
   245b8:	mov	r8, r5
   245bc:	cmp	r0, #0
   245c0:	strbne	r6, [sp, #84]	; 0x54
   245c4:	b	241b8 <__assert_fail@plt+0x11ae4>
   245c8:	ldr	r2, [sp, #160]	; 0xa0
   245cc:	ldr	r3, [sp, #48]	; 0x30
   245d0:	cmp	r2, r3
   245d4:	movne	r0, #0
   245d8:	bne	24250 <__assert_fail@plt+0x11b7c>
   245dc:	ldr	r0, [sp, #156]	; 0x9c
   245e0:	ldr	r1, [sp, #44]	; 0x2c
   245e4:	bl	12158 <memcmp@plt>
   245e8:	rsbs	r0, r0, #1
   245ec:	movcc	r0, #0
   245f0:	cmp	r0, #0
   245f4:	beq	24258 <__assert_fail@plt+0x11b84>
   245f8:	ldr	r1, [sp, #20]
   245fc:	add	r5, sp, #140	; 0x8c
   24600:	add	ip, sp, #196	; 0xc4
   24604:	str	r1, [sp, #268]	; 0x10c
   24608:	ldm	r5!, {r0, r1, r2, r3}
   2460c:	stmia	ip!, {r0, r1, r2, r3}
   24610:	ldm	r5!, {r0, r1, r2, r3}
   24614:	strb	r6, [sp, #208]	; 0xd0
   24618:	stmia	ip!, {r0, r1, r2, r3}
   2461c:	ldm	r5!, {r0, r1, r2, r3}
   24620:	ldr	r8, [sp, #212]	; 0xd4
   24624:	stmia	ip!, {r0, r1, r2, r3}
   24628:	ldm	r5, {r0, r1}
   2462c:	ldr	r3, [sp, #216]	; 0xd8
   24630:	stm	ip, {r0, r1}
   24634:	add	r3, r8, r3
   24638:	str	r3, [sp, #212]	; 0xd4
   2463c:	ldr	r2, [sp, #20]
   24640:	strb	r6, [sp, #252]	; 0xfc
   24644:	str	r6, [sp, #256]	; 0x100
   24648:	ldrb	r3, [r2]
   2464c:	strb	r6, [sp, #264]	; 0x108
   24650:	and	r2, r3, #31
   24654:	str	r6, [sp, #260]	; 0x104
   24658:	lsr	r1, r3, #5
   2465c:	ldr	r5, [r7, r1, lsl #2]
   24660:	lsr	r5, r5, r2
   24664:	ands	r5, r5, #1
   24668:	beq	246cc <__assert_fail@plt+0x11ff8>
   2466c:	mov	r5, r3
   24670:	str	r4, [sp, #272]	; 0x110
   24674:	str	r3, [sp, #280]	; 0x118
   24678:	strb	r4, [sp, #276]	; 0x114
   2467c:	cmp	r5, #0
   24680:	strb	r4, [sp, #264]	; 0x108
   24684:	bne	24830 <__assert_fail@plt+0x1215c>
   24688:	bl	12674 <abort@plt>
   2468c:	ldr	r0, [sp, #100]	; 0x64
   24690:	bl	123d4 <strlen@plt>
   24694:	strb	r6, [sp, #108]	; 0x6c
   24698:	str	r0, [sp, #104]	; 0x68
   2469c:	b	241b8 <__assert_fail@plt+0x11ae4>
   246a0:	mov	r2, #1
   246a4:	str	r2, [sp, #16]
   246a8:	b	2421c <__assert_fail@plt+0x11b48>
   246ac:	ldr	r1, [sp, #4]
   246b0:	mov	r2, #1
   246b4:	ldrb	r3, [sp, #164]	; 0xa4
   246b8:	str	r2, [sp, #16]
   246bc:	str	r1, [sp, #12]
   246c0:	b	2421c <__assert_fail@plt+0x11b48>
   246c4:	mov	r0, #0
   246c8:	b	24384 <__assert_fail@plt+0x11cb0>
   246cc:	add	r0, sp, #256	; 0x100
   246d0:	bl	12128 <mbsinit@plt>
   246d4:	cmp	r0, #0
   246d8:	beq	24bb4 <__assert_fail@plt+0x124e0>
   246dc:	strb	r4, [sp, #252]	; 0xfc
   246e0:	bl	12284 <__ctype_get_mb_cur_max@plt>
   246e4:	mov	r1, r0
   246e8:	ldr	r0, [sp, #20]
   246ec:	bl	28890 <__assert_fail@plt+0x161bc>
   246f0:	ldr	r1, [sp, #20]
   246f4:	add	r3, sp, #256	; 0x100
   246f8:	mov	r2, r0
   246fc:	add	r0, sp, #280	; 0x118
   24700:	bl	122c0 <mbrtowc@plt>
   24704:	cmn	r0, #1
   24708:	str	r0, [sp, #272]	; 0x110
   2470c:	beq	24b84 <__assert_fail@plt+0x124b0>
   24710:	cmn	r0, #2
   24714:	beq	24b94 <__assert_fail@plt+0x124c0>
   24718:	cmp	r0, #0
   2471c:	bne	24b50 <__assert_fail@plt+0x1247c>
   24720:	ldr	fp, [sp, #268]	; 0x10c
   24724:	str	r4, [sp, #272]	; 0x110
   24728:	ldrb	r3, [fp]
   2472c:	cmp	r3, #0
   24730:	bne	24bd8 <__assert_fail@plt+0x12504>
   24734:	ldr	r5, [sp, #280]	; 0x118
   24738:	cmp	r5, #0
   2473c:	beq	24b54 <__assert_fail@plt+0x12480>
   24740:	movw	r0, #15388	; 0x3c1c
   24744:	movw	r1, #15352	; 0x3bf8
   24748:	movw	r3, #15308	; 0x3bcc
   2474c:	movt	r0, #3
   24750:	movt	r1, #3
   24754:	mov	r2, #176	; 0xb0
   24758:	movt	r3, #3
   2475c:	bl	126d4 <__assert_fail@plt>
   24760:	mov	fp, r3
   24764:	b	243f4 <__assert_fail@plt+0x11d20>
   24768:	ldr	r8, [sp, #100]	; 0x64
   2476c:	ldrb	r2, [sp, #84]	; 0x54
   24770:	cmp	r2, #0
   24774:	bne	247a8 <__assert_fail@plt+0x120d4>
   24778:	ldrb	r2, [r8]
   2477c:	and	r1, r2, #31
   24780:	lsr	r2, r2, #5
   24784:	ldr	r2, [r7, r2, lsl #2]
   24788:	lsr	r2, r2, r1
   2478c:	tst	r2, #1
   24790:	bne	24b3c <__assert_fail@plt+0x12468>
   24794:	add	r0, sp, #88	; 0x58
   24798:	bl	12128 <mbsinit@plt>
   2479c:	cmp	r0, #0
   247a0:	beq	24bb4 <__assert_fail@plt+0x124e0>
   247a4:	strb	r4, [sp, #84]	; 0x54
   247a8:	bl	12284 <__ctype_get_mb_cur_max@plt>
   247ac:	mov	r1, r0
   247b0:	mov	r0, r8
   247b4:	bl	28890 <__assert_fail@plt+0x161bc>
   247b8:	mov	r1, r8
   247bc:	add	r3, sp, #88	; 0x58
   247c0:	mov	r2, r0
   247c4:	add	r0, sp, #112	; 0x70
   247c8:	bl	122c0 <mbrtowc@plt>
   247cc:	cmn	r0, #1
   247d0:	str	r0, [sp, #104]	; 0x68
   247d4:	strbeq	r6, [sp, #108]	; 0x6c
   247d8:	streq	r4, [sp, #104]	; 0x68
   247dc:	moveq	r5, #0
   247e0:	beq	24828 <__assert_fail@plt+0x12154>
   247e4:	cmn	r0, #2
   247e8:	beq	24b6c <__assert_fail@plt+0x12498>
   247ec:	cmp	r0, #0
   247f0:	bne	24814 <__assert_fail@plt+0x12140>
   247f4:	ldr	r3, [sp, #100]	; 0x64
   247f8:	str	r4, [sp, #104]	; 0x68
   247fc:	ldrb	r3, [r3]
   24800:	cmp	r3, #0
   24804:	bne	24bd8 <__assert_fail@plt+0x12504>
   24808:	ldr	r3, [sp, #112]	; 0x70
   2480c:	cmp	r3, #0
   24810:	bne	24740 <__assert_fail@plt+0x1206c>
   24814:	add	r0, sp, #88	; 0x58
   24818:	strb	r4, [sp, #108]	; 0x6c
   2481c:	bl	12128 <mbsinit@plt>
   24820:	cmp	r0, #0
   24824:	strbne	r6, [sp, #84]	; 0x54
   24828:	strb	r4, [sp, #96]	; 0x60
   2482c:	b	241e0 <__assert_fail@plt+0x11b0c>
   24830:	ldr	fp, [sp, #268]	; 0x10c
   24834:	ldr	r3, [sp, #4]
   24838:	ldr	r2, [sp, #272]	; 0x110
   2483c:	add	r5, r3, #2
   24840:	ldrb	r3, [sp, #252]	; 0xfc
   24844:	add	fp, fp, r2
   24848:	strb	r6, [sp, #264]	; 0x108
   2484c:	cmp	r3, #0
   24850:	str	fp, [sp, #268]	; 0x10c
   24854:	bne	2491c <__assert_fail@plt+0x12248>
   24858:	ldrb	r3, [fp]
   2485c:	and	r2, r3, #31
   24860:	lsr	r3, r3, #5
   24864:	ldr	r3, [r7, r3, lsl #2]
   24868:	lsr	r3, r3, r2
   2486c:	tst	r3, #1
   24870:	beq	24aa4 <__assert_fail@plt+0x123d0>
   24874:	str	r4, [sp, #272]	; 0x110
   24878:	ldrb	r8, [fp]
   2487c:	strb	r4, [sp, #276]	; 0x114
   24880:	str	r8, [sp, #280]	; 0x118
   24884:	cmp	r8, #0
   24888:	strb	r4, [sp, #264]	; 0x108
   2488c:	bne	248ac <__assert_fail@plt+0x121d8>
   24890:	ldr	r0, [sp, #156]	; 0x9c
   24894:	b	24384 <__assert_fail@plt+0x11cb0>
   24898:	ldr	r0, [sp, #268]	; 0x10c
   2489c:	bl	123d4 <strlen@plt>
   248a0:	strb	r6, [sp, #276]	; 0x114
   248a4:	str	r0, [sp, #272]	; 0x110
   248a8:	strb	r4, [sp, #264]	; 0x108
   248ac:	ldrb	r8, [sp, #208]	; 0xd0
   248b0:	cmp	r8, #0
   248b4:	beq	24980 <__assert_fail@plt+0x122ac>
   248b8:	ldrb	r8, [sp, #220]	; 0xdc
   248bc:	cmp	r8, #0
   248c0:	bne	249cc <__assert_fail@plt+0x122f8>
   248c4:	ldr	r2, [sp, #216]	; 0xd8
   248c8:	ldr	r3, [sp, #272]	; 0x110
   248cc:	cmp	r2, r3
   248d0:	movne	r0, #1
   248d4:	beq	24a8c <__assert_fail@plt+0x123b8>
   248d8:	cmp	r0, #0
   248dc:	add	r3, r5, #1
   248e0:	bne	24258 <__assert_fail@plt+0x11b84>
   248e4:	ldr	r2, [sp, #212]	; 0xd4
   248e8:	mov	r5, r3
   248ec:	ldr	r3, [sp, #216]	; 0xd8
   248f0:	ldr	fp, [sp, #268]	; 0x10c
   248f4:	add	r2, r2, r3
   248f8:	ldr	r3, [sp, #272]	; 0x110
   248fc:	strb	r0, [sp, #208]	; 0xd0
   24900:	add	fp, fp, r3
   24904:	ldrb	r3, [sp, #252]	; 0xfc
   24908:	strb	r0, [sp, #264]	; 0x108
   2490c:	cmp	r3, #0
   24910:	str	r2, [sp, #212]	; 0xd4
   24914:	str	fp, [sp, #268]	; 0x10c
   24918:	beq	24858 <__assert_fail@plt+0x12184>
   2491c:	bl	12284 <__ctype_get_mb_cur_max@plt>
   24920:	mov	r1, r0
   24924:	mov	r0, fp
   24928:	bl	28890 <__assert_fail@plt+0x161bc>
   2492c:	mov	r1, fp
   24930:	add	r3, sp, #256	; 0x100
   24934:	mov	r2, r0
   24938:	add	r0, sp, #280	; 0x118
   2493c:	bl	122c0 <mbrtowc@plt>
   24940:	cmn	r0, #1
   24944:	str	r0, [sp, #272]	; 0x110
   24948:	strbeq	r6, [sp, #276]	; 0x114
   2494c:	streq	r4, [sp, #272]	; 0x110
   24950:	beq	248a8 <__assert_fail@plt+0x121d4>
   24954:	cmn	r0, #2
   24958:	beq	24898 <__assert_fail@plt+0x121c4>
   2495c:	cmp	r0, #0
   24960:	beq	24abc <__assert_fail@plt+0x123e8>
   24964:	ldr	r8, [sp, #280]	; 0x118
   24968:	add	r0, sp, #256	; 0x100
   2496c:	strb	r4, [sp, #276]	; 0x114
   24970:	bl	12128 <mbsinit@plt>
   24974:	cmp	r0, #0
   24978:	strbne	r6, [sp, #252]	; 0xfc
   2497c:	b	24884 <__assert_fail@plt+0x121b0>
   24980:	ldrb	r3, [sp, #196]	; 0xc4
   24984:	ldr	sl, [sp, #212]	; 0xd4
   24988:	cmp	r3, #0
   2498c:	bne	24a08 <__assert_fail@plt+0x12334>
   24990:	ldrb	r3, [sl]
   24994:	and	r2, r3, #31
   24998:	lsr	r3, r3, #5
   2499c:	ldr	r3, [r7, r3, lsl #2]
   249a0:	lsr	r3, r3, r2
   249a4:	tst	r3, #1
   249a8:	beq	249f4 <__assert_fail@plt+0x12320>
   249ac:	str	r4, [sp, #216]	; 0xd8
   249b0:	mov	r8, #1
   249b4:	ldrb	r3, [sl]
   249b8:	strb	r4, [sp, #220]	; 0xdc
   249bc:	str	r3, [sp, #224]	; 0xe0
   249c0:	cmp	r8, #0
   249c4:	strb	r4, [sp, #208]	; 0xd0
   249c8:	beq	248c4 <__assert_fail@plt+0x121f0>
   249cc:	ldr	r0, [sp, #224]	; 0xe0
   249d0:	cmp	r0, #0
   249d4:	beq	24384 <__assert_fail@plt+0x11cb0>
   249d8:	ldrb	r3, [sp, #276]	; 0x114
   249dc:	cmp	r3, #0
   249e0:	beq	248c4 <__assert_fail@plt+0x121f0>
   249e4:	ldr	r3, [sp, #280]	; 0x118
   249e8:	subs	r0, r0, r3
   249ec:	movne	r0, #1
   249f0:	b	248d8 <__assert_fail@plt+0x12204>
   249f4:	add	r0, sp, #200	; 0xc8
   249f8:	bl	12128 <mbsinit@plt>
   249fc:	cmp	r0, #0
   24a00:	beq	24bb4 <__assert_fail@plt+0x124e0>
   24a04:	strb	r4, [sp, #196]	; 0xc4
   24a08:	bl	12284 <__ctype_get_mb_cur_max@plt>
   24a0c:	mov	r1, r0
   24a10:	mov	r0, sl
   24a14:	bl	28890 <__assert_fail@plt+0x161bc>
   24a18:	mov	r1, sl
   24a1c:	add	r3, sp, #200	; 0xc8
   24a20:	mov	r2, r0
   24a24:	add	r0, sp, #224	; 0xe0
   24a28:	bl	122c0 <mbrtowc@plt>
   24a2c:	cmn	r0, #1
   24a30:	str	r0, [sp, #216]	; 0xd8
   24a34:	strbeq	r6, [sp, #220]	; 0xdc
   24a38:	streq	r4, [sp, #216]	; 0xd8
   24a3c:	beq	249c0 <__assert_fail@plt+0x122ec>
   24a40:	cmn	r0, #2
   24a44:	beq	24ae0 <__assert_fail@plt+0x1240c>
   24a48:	cmp	r0, #0
   24a4c:	bne	24a70 <__assert_fail@plt+0x1239c>
   24a50:	ldr	r3, [sp, #212]	; 0xd4
   24a54:	str	r4, [sp, #216]	; 0xd8
   24a58:	ldrb	r3, [r3]
   24a5c:	cmp	r3, #0
   24a60:	bne	24bd8 <__assert_fail@plt+0x12504>
   24a64:	ldr	r3, [sp, #224]	; 0xe0
   24a68:	cmp	r3, #0
   24a6c:	bne	24740 <__assert_fail@plt+0x1206c>
   24a70:	add	r0, sp, #200	; 0xc8
   24a74:	strb	r4, [sp, #220]	; 0xdc
   24a78:	bl	12128 <mbsinit@plt>
   24a7c:	mov	r8, #1
   24a80:	cmp	r0, #0
   24a84:	strbne	r6, [sp, #196]	; 0xc4
   24a88:	b	249c0 <__assert_fail@plt+0x122ec>
   24a8c:	ldr	r0, [sp, #212]	; 0xd4
   24a90:	ldr	r1, [sp, #268]	; 0x10c
   24a94:	bl	12158 <memcmp@plt>
   24a98:	adds	r0, r0, #0
   24a9c:	movne	r0, #1
   24aa0:	b	248d8 <__assert_fail@plt+0x12204>
   24aa4:	add	r0, sp, #256	; 0x100
   24aa8:	bl	12128 <mbsinit@plt>
   24aac:	cmp	r0, #0
   24ab0:	beq	24bb4 <__assert_fail@plt+0x124e0>
   24ab4:	strb	r4, [sp, #252]	; 0xfc
   24ab8:	b	2491c <__assert_fail@plt+0x12248>
   24abc:	ldr	r3, [sp, #268]	; 0x10c
   24ac0:	str	r4, [sp, #272]	; 0x110
   24ac4:	ldrb	r3, [r3]
   24ac8:	cmp	r3, #0
   24acc:	bne	24bd8 <__assert_fail@plt+0x12504>
   24ad0:	ldr	r8, [sp, #280]	; 0x118
   24ad4:	cmp	r8, #0
   24ad8:	beq	24968 <__assert_fail@plt+0x12294>
   24adc:	b	24740 <__assert_fail@plt+0x1206c>
   24ae0:	ldr	r0, [sp, #212]	; 0xd4
   24ae4:	bl	123d4 <strlen@plt>
   24ae8:	strb	r6, [sp, #220]	; 0xdc
   24aec:	str	r0, [sp, #216]	; 0xd8
   24af0:	b	249c0 <__assert_fail@plt+0x122ec>
   24af4:	ldr	r3, [sp, #156]	; 0x9c
   24af8:	str	r4, [sp, #160]	; 0xa0
   24afc:	ldrb	r3, [r3]
   24b00:	cmp	r3, #0
   24b04:	bne	24bd8 <__assert_fail@plt+0x12504>
   24b08:	ldr	r5, [sp, #168]	; 0xa8
   24b0c:	cmp	r5, #0
   24b10:	beq	242c8 <__assert_fail@plt+0x11bf4>
   24b14:	b	24740 <__assert_fail@plt+0x1206c>
   24b18:	ldr	r3, [sp, #44]	; 0x2c
   24b1c:	str	r4, [sp, #48]	; 0x30
   24b20:	ldrb	r3, [r3]
   24b24:	cmp	r3, #0
   24b28:	bne	24bd8 <__assert_fail@plt+0x12504>
   24b2c:	ldr	r4, [sp, #56]	; 0x38
   24b30:	cmp	r4, #0
   24b34:	beq	24354 <__assert_fail@plt+0x11c80>
   24b38:	b	24740 <__assert_fail@plt+0x1206c>
   24b3c:	str	r4, [sp, #104]	; 0x68
   24b40:	ldrb	r3, [r8]
   24b44:	strb	r4, [sp, #108]	; 0x6c
   24b48:	str	r3, [sp, #112]	; 0x70
   24b4c:	b	24828 <__assert_fail@plt+0x12154>
   24b50:	ldr	r5, [sp, #280]	; 0x118
   24b54:	add	r0, sp, #256	; 0x100
   24b58:	strb	r4, [sp, #276]	; 0x114
   24b5c:	bl	12128 <mbsinit@plt>
   24b60:	cmp	r0, #0
   24b64:	strbne	r6, [sp, #252]	; 0xfc
   24b68:	b	2467c <__assert_fail@plt+0x11fa8>
   24b6c:	ldr	r0, [sp, #100]	; 0x64
   24b70:	mov	r5, #0
   24b74:	bl	123d4 <strlen@plt>
   24b78:	strb	r6, [sp, #108]	; 0x6c
   24b7c:	str	r0, [sp, #104]	; 0x68
   24b80:	b	24828 <__assert_fail@plt+0x12154>
   24b84:	str	r4, [sp, #272]	; 0x110
   24b88:	strb	r5, [sp, #276]	; 0x114
   24b8c:	ldr	fp, [sp, #268]	; 0x10c
   24b90:	b	24834 <__assert_fail@plt+0x12160>
   24b94:	ldr	fp, [sp, #268]	; 0x10c
   24b98:	mov	r0, fp
   24b9c:	bl	123d4 <strlen@plt>
   24ba0:	strb	r5, [sp, #276]	; 0x114
   24ba4:	str	r0, [sp, #272]	; 0x110
   24ba8:	b	24834 <__assert_fail@plt+0x12160>
   24bac:	ldr	r0, [sp, #24]
   24bb0:	b	24384 <__assert_fail@plt+0x11cb0>
   24bb4:	movw	r0, #15328	; 0x3be0
   24bb8:	movw	r1, #15352	; 0x3bf8
   24bbc:	movw	r3, #15308	; 0x3bcc
   24bc0:	movt	r0, #3
   24bc4:	movt	r1, #3
   24bc8:	mov	r2, #147	; 0x93
   24bcc:	movt	r3, #3
   24bd0:	bl	126d4 <__assert_fail@plt>
   24bd4:	bl	12188 <__stack_chk_fail@plt>
   24bd8:	movw	r0, #15364	; 0x3c04
   24bdc:	movw	r1, #15352	; 0x3bf8
   24be0:	movw	r3, #15308	; 0x3bcc
   24be4:	movt	r0, #3
   24be8:	movt	r1, #3
   24bec:	mov	r2, #175	; 0xaf
   24bf0:	movt	r3, #3
   24bf4:	bl	126d4 <__assert_fail@plt>
   24bf8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bfc:	mov	r5, r0
   24c00:	ldrb	r2, [r0]
   24c04:	sub	r3, r2, #48	; 0x30
   24c08:	cmp	r3, #7
   24c0c:	bls	24cac <__assert_fail@plt+0x125d8>
   24c10:	cmp	r2, #0
   24c14:	moveq	r0, #16
   24c18:	beq	24c5c <__assert_fail@plt+0x12588>
   24c1c:	mov	lr, r5
   24c20:	mov	r1, #1
   24c24:	cmp	r2, #43	; 0x2b
   24c28:	moveq	r3, #1
   24c2c:	beq	24c40 <__assert_fail@plt+0x1256c>
   24c30:	and	r2, r2, #239	; 0xef
   24c34:	subs	r2, r2, #45	; 0x2d
   24c38:	rsbs	r3, r2, #0
   24c3c:	adcs	r3, r3, r2
   24c40:	ldrb	r2, [lr, #1]!
   24c44:	add	r1, r1, r3
   24c48:	cmp	r2, #0
   24c4c:	bne	24c24 <__assert_fail@plt+0x12550>
   24c50:	cmn	r1, #-268435455	; 0xf0000001
   24c54:	bhi	24f80 <__assert_fail@plt+0x128ac>
   24c58:	lsl	r0, r1, #4
   24c5c:	bl	28e14 <__assert_fail@plt+0x16740>
   24c60:	mov	r7, #0
   24c64:	movw	r9, #4095	; 0xfff
   24c68:	mov	r8, #1
   24c6c:	mov	r6, #0
   24c70:	mov	r3, r5
   24c74:	add	r5, r5, #1
   24c78:	ldrb	sl, [r3]
   24c7c:	cmp	sl, #97	; 0x61
   24c80:	beq	24eb0 <__assert_fail@plt+0x127dc>
   24c84:	bls	24ce4 <__assert_fail@plt+0x12610>
   24c88:	cmp	sl, #111	; 0x6f
   24c8c:	beq	24ecc <__assert_fail@plt+0x127f8>
   24c90:	cmp	sl, #117	; 0x75
   24c94:	beq	24ec4 <__assert_fail@plt+0x127f0>
   24c98:	cmp	sl, #103	; 0x67
   24c9c:	beq	24eb8 <__assert_fail@plt+0x127e4>
   24ca0:	bl	120c8 <free@plt>
   24ca4:	mov	r0, #0
   24ca8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24cac:	mov	r1, r0
   24cb0:	mov	r4, #0
   24cb4:	b	24ccc <__assert_fail@plt+0x125f8>
   24cb8:	ldrb	r2, [r1, #1]
   24cbc:	sub	r1, r2, #48	; 0x30
   24cc0:	cmp	r1, #7
   24cc4:	bhi	24ed8 <__assert_fail@plt+0x12804>
   24cc8:	mov	r1, ip
   24ccc:	add	r4, r2, r4, lsl #3
   24cd0:	add	ip, r1, #1
   24cd4:	sub	r4, r4, #48	; 0x30
   24cd8:	cmp	r4, #4096	; 0x1000
   24cdc:	bcc	24cb8 <__assert_fail@plt+0x125e4>
   24ce0:	b	24ca4 <__assert_fail@plt+0x125d0>
   24ce4:	cmp	sl, #45	; 0x2d
   24ce8:	beq	24cfc <__assert_fail@plt+0x12628>
   24cec:	cmp	sl, #61	; 0x3d
   24cf0:	beq	24cfc <__assert_fail@plt+0x12628>
   24cf4:	cmp	sl, #43	; 0x2b
   24cf8:	bne	24ca0 <__assert_fail@plt+0x125cc>
   24cfc:	add	r5, r0, r7, lsl #4
   24d00:	add	r7, r7, #1
   24d04:	add	r4, r5, #8
   24d08:	b	24d68 <__assert_fail@plt+0x12694>
   24d0c:	cmp	ip, #111	; 0x6f
   24d10:	beq	24ea0 <__assert_fail@plt+0x127cc>
   24d14:	cmp	ip, #117	; 0x75
   24d18:	addeq	r3, r3, #2
   24d1c:	moveq	r2, #3
   24d20:	moveq	fp, #448	; 0x1c0
   24d24:	bne	24dbc <__assert_fail@plt+0x126e8>
   24d28:	cmp	r6, #0
   24d2c:	strb	sl, [r4, #-8]
   24d30:	strb	r2, [r4, #-7]
   24d34:	str	r6, [r4, #-4]
   24d38:	str	fp, [r5, #8]
   24d3c:	andne	fp, fp, r6
   24d40:	str	fp, [r5, #12]
   24d44:	ldrb	sl, [r3]
   24d48:	cmp	sl, #43	; 0x2b
   24d4c:	beq	24d5c <__assert_fail@plt+0x12688>
   24d50:	and	r2, sl, #239	; 0xef
   24d54:	cmp	r2, #45	; 0x2d
   24d58:	bne	24f60 <__assert_fail@plt+0x1288c>
   24d5c:	add	r5, r5, #16
   24d60:	add	r4, r4, #16
   24d64:	add	r7, r7, #1
   24d68:	ldrb	ip, [r3, #1]
   24d6c:	add	r1, r3, #1
   24d70:	cmp	ip, #103	; 0x67
   24d74:	beq	24e90 <__assert_fail@plt+0x127bc>
   24d78:	bhi	24d0c <__assert_fail@plt+0x12638>
   24d7c:	sub	r3, ip, #48	; 0x30
   24d80:	cmp	r3, #7
   24d84:	movls	r2, #0
   24d88:	bls	24da4 <__assert_fail@plt+0x126d0>
   24d8c:	b	24dbc <__assert_fail@plt+0x126e8>
   24d90:	ldrb	ip, [r1, #1]
   24d94:	sub	r1, ip, #48	; 0x30
   24d98:	cmp	r1, #7
   24d9c:	bhi	24f30 <__assert_fail@plt+0x1285c>
   24da0:	mov	r1, r3
   24da4:	add	r2, ip, r2, lsl #3
   24da8:	add	r3, r1, #1
   24dac:	sub	r2, r2, #48	; 0x30
   24db0:	cmp	r2, #4096	; 0x1000
   24db4:	bcc	24d90 <__assert_fail@plt+0x126bc>
   24db8:	b	24ca4 <__assert_fail@plt+0x125d0>
   24dbc:	mov	r2, #1
   24dc0:	mov	fp, #0
   24dc4:	sub	ip, ip, #88	; 0x58
   24dc8:	mov	r3, r1
   24dcc:	cmp	ip, #32
   24dd0:	ldrls	pc, [pc, ip, lsl #2]
   24dd4:	b	24d28 <__assert_fail@plt+0x12654>
   24dd8:	andeq	r4, r2, ip, asr lr
   24ddc:	andeq	r4, r2, r8, lsr #26
   24de0:	andeq	r4, r2, r8, lsr #26
   24de4:	andeq	r4, r2, r8, lsr #26
   24de8:	andeq	r4, r2, r8, lsr #26
   24dec:	andeq	r4, r2, r8, lsr #26
   24df0:	andeq	r4, r2, r8, lsr #26
   24df4:	andeq	r4, r2, r8, lsr #26
   24df8:	andeq	r4, r2, r8, lsr #26
   24dfc:	andeq	r4, r2, r8, lsr #26
   24e00:	andeq	r4, r2, r8, lsr #26
   24e04:	andeq	r4, r2, r8, lsr #26
   24e08:	andeq	r4, r2, r8, lsr #26
   24e0c:	andeq	r4, r2, r8, lsr #26
   24e10:	andeq	r4, r2, r8, lsr #26
   24e14:	andeq	r4, r2, r8, lsr #26
   24e18:	andeq	r4, r2, r8, lsr #26
   24e1c:	andeq	r4, r2, r8, lsr #26
   24e20:	andeq	r4, r2, r8, lsr #26
   24e24:	andeq	r4, r2, r8, lsr #26
   24e28:	andeq	r4, r2, r8, lsr #26
   24e2c:	andeq	r4, r2, r8, lsr #26
   24e30:	andeq	r4, r2, r8, lsr #26
   24e34:	andeq	r4, r2, r8, lsr #26
   24e38:	andeq	r4, r2, r8, lsr #26
   24e3c:	andeq	r4, r2, r8, lsr #26
   24e40:	andeq	r4, r2, r8, lsl #29
   24e44:	andeq	r4, r2, r0, lsl #29
   24e48:	andeq	r4, r2, r8, ror lr
   24e4c:	andeq	r4, r2, r8, lsr #26
   24e50:	andeq	r4, r2, r8, lsr #26
   24e54:	andeq	r4, r2, r0, ror lr
   24e58:	andeq	r4, r2, r8, ror #28
   24e5c:	mov	r2, #2
   24e60:	ldrb	ip, [r1, #1]!
   24e64:	b	24dc4 <__assert_fail@plt+0x126f0>
   24e68:	orr	fp, fp, #73	; 0x49
   24e6c:	b	24e60 <__assert_fail@plt+0x1278c>
   24e70:	orr	fp, fp, #146	; 0x92
   24e74:	b	24e60 <__assert_fail@plt+0x1278c>
   24e78:	orr	fp, fp, #512	; 0x200
   24e7c:	b	24e60 <__assert_fail@plt+0x1278c>
   24e80:	orr	fp, fp, #3072	; 0xc00
   24e84:	b	24e60 <__assert_fail@plt+0x1278c>
   24e88:	orr	fp, fp, #292	; 0x124
   24e8c:	b	24e60 <__assert_fail@plt+0x1278c>
   24e90:	add	r3, r3, #2
   24e94:	mov	r2, #3
   24e98:	mov	fp, #56	; 0x38
   24e9c:	b	24d28 <__assert_fail@plt+0x12654>
   24ea0:	add	r3, r3, #2
   24ea4:	mov	r2, #3
   24ea8:	mov	fp, #7
   24eac:	b	24d28 <__assert_fail@plt+0x12654>
   24eb0:	movw	r6, #4095	; 0xfff
   24eb4:	b	24c70 <__assert_fail@plt+0x1259c>
   24eb8:	orr	r6, r6, #1072	; 0x430
   24ebc:	orr	r6, r6, #8
   24ec0:	b	24c70 <__assert_fail@plt+0x1259c>
   24ec4:	orr	r6, r6, #2496	; 0x9c0
   24ec8:	b	24c70 <__assert_fail@plt+0x1259c>
   24ecc:	orr	r6, r6, #516	; 0x204
   24ed0:	orr	r6, r6, #3
   24ed4:	b	24c70 <__assert_fail@plt+0x1259c>
   24ed8:	cmp	r2, #0
   24edc:	bne	24ca4 <__assert_fail@plt+0x125d0>
   24ee0:	rsb	ip, r5, ip
   24ee4:	mov	r0, #32
   24ee8:	cmp	ip, #4
   24eec:	andle	r5, r4, #3072	; 0xc00
   24ef0:	movwgt	r5, #4095	; 0xfff
   24ef4:	mvnle	r5, r5, lsr #10
   24ef8:	mvnle	r5, r5, lsl #10
   24efc:	bl	28e14 <__assert_fail@plt+0x16740>
   24f00:	mov	r1, #61	; 0x3d
   24f04:	mov	r2, #1
   24f08:	mov	r3, r0
   24f0c:	strb	r1, [r0]
   24f10:	strb	r2, [r0, #1]
   24f14:	movw	r1, #4095	; 0xfff
   24f18:	str	r4, [r0, #8]
   24f1c:	mov	r2, #0
   24f20:	str	r5, [r0, #12]
   24f24:	str	r1, [r0, #4]
   24f28:	strb	r2, [r3, #17]
   24f2c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f30:	cmp	r6, #0
   24f34:	bne	24ca4 <__assert_fail@plt+0x125d0>
   24f38:	cmp	ip, #44	; 0x2c
   24f3c:	cmpne	ip, #0
   24f40:	bne	24ca4 <__assert_fail@plt+0x125d0>
   24f44:	movw	r6, #4095	; 0xfff
   24f48:	strb	sl, [r4, #-8]
   24f4c:	strb	r8, [r4, #-7]
   24f50:	mov	fp, r6
   24f54:	str	r9, [r4, #-4]
   24f58:	str	r2, [r5, #8]
   24f5c:	b	24d40 <__assert_fail@plt+0x1266c>
   24f60:	cmp	sl, #44	; 0x2c
   24f64:	addeq	r5, r3, #1
   24f68:	beq	24c6c <__assert_fail@plt+0x12598>
   24f6c:	cmp	sl, #0
   24f70:	bne	24ca0 <__assert_fail@plt+0x125cc>
   24f74:	add	r7, r0, r7, lsl #4
   24f78:	strb	sl, [r7, #1]
   24f7c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f80:	bl	28f4c <__assert_fail@plt+0x16878>
   24f84:	push	{r4, r5, r6, lr}
   24f88:	movw	r4, #26008	; 0x6598
   24f8c:	movt	r4, #4
   24f90:	sub	sp, sp, #112	; 0x70
   24f94:	mov	r1, r0
   24f98:	mov	r0, #3
   24f9c:	ldr	r3, [r4]
   24fa0:	mov	r2, sp
   24fa4:	str	r3, [sp, #108]	; 0x6c
   24fa8:	bl	12620 <__xstat64@plt>
   24fac:	subs	r5, r0, #0
   24fb0:	movne	r0, #0
   24fb4:	bne	24fec <__assert_fail@plt+0x12918>
   24fb8:	mov	r0, #32
   24fbc:	ldr	r6, [sp, #16]
   24fc0:	bl	28e14 <__assert_fail@plt+0x16740>
   24fc4:	mov	r2, #61	; 0x3d
   24fc8:	mov	r1, #1
   24fcc:	mov	r3, r0
   24fd0:	strb	r2, [r0]
   24fd4:	strb	r5, [r0, #17]
   24fd8:	movw	r2, #4095	; 0xfff
   24fdc:	str	r6, [r0, #8]
   24fe0:	strb	r1, [r0, #1]
   24fe4:	str	r2, [r3, #4]
   24fe8:	str	r2, [r3, #12]
   24fec:	ldr	r2, [sp, #108]	; 0x6c
   24ff0:	ldr	r3, [r4]
   24ff4:	cmp	r2, r3
   24ff8:	bne	25004 <__assert_fail@plt+0x12930>
   24ffc:	add	sp, sp, #112	; 0x70
   25000:	pop	{r4, r5, r6, pc}
   25004:	bl	12188 <__stack_chk_fail@plt>
   25008:	push	{r4, r5, r6, r7, r8, r9}
   2500c:	ubfx	r0, r0, #0, #12
   25010:	ldrb	ip, [r3, #1]
   25014:	ldr	r8, [sp, #24]
   25018:	cmp	ip, #0
   2501c:	beq	25130 <__assert_fail@plt+0x12a5c>
   25020:	add	r3, r3, #16
   25024:	mvn	r2, r2
   25028:	mov	r7, #0
   2502c:	b	250b0 <__assert_fail@plt+0x129dc>
   25030:	cmp	ip, #3
   25034:	bne	2506c <__assert_fail@plt+0x12998>
   25038:	and	r5, r5, r0
   2503c:	tst	r5, #292	; 0x124
   25040:	moveq	ip, #0
   25044:	movne	ip, #292	; 0x124
   25048:	tst	r5, #146	; 0x92
   2504c:	moveq	r9, #0
   25050:	movne	r9, #146	; 0x92
   25054:	tst	r5, #73	; 0x49
   25058:	orr	ip, r9, ip
   2505c:	moveq	r9, #0
   25060:	movne	r9, #73	; 0x49
   25064:	orr	ip, ip, r9
   25068:	orr	r5, ip, r5
   2506c:	cmp	r4, #0
   25070:	ldrb	ip, [r3, #-16]
   25074:	bic	r5, r5, r6
   25078:	movne	r9, r4
   2507c:	moveq	r9, r2
   25080:	cmp	ip, #45	; 0x2d
   25084:	and	r5, r5, r9
   25088:	beq	25124 <__assert_fail@plt+0x12a50>
   2508c:	cmp	ip, #61	; 0x3d
   25090:	beq	250e4 <__assert_fail@plt+0x12a10>
   25094:	cmp	ip, #43	; 0x2b
   25098:	orreq	r7, r7, r5
   2509c:	orreq	r0, r0, r5
   250a0:	add	r3, r3, #16
   250a4:	ldrb	ip, [r3, #-15]
   250a8:	cmp	ip, #0
   250ac:	beq	25114 <__assert_fail@plt+0x12a40>
   250b0:	cmp	r1, #0
   250b4:	ldr	r6, [r3, #-4]
   250b8:	ldr	r4, [r3, #-12]
   250bc:	movne	r5, #3072	; 0xc00
   250c0:	moveq	r5, #0
   250c4:	cmp	ip, #2
   250c8:	bic	r6, r5, r6
   250cc:	ldr	r5, [r3, #-8]
   250d0:	bne	25030 <__assert_fail@plt+0x1295c>
   250d4:	and	ip, r0, #73	; 0x49
   250d8:	orrs	ip, ip, r1
   250dc:	orrne	r5, r5, #73	; 0x49
   250e0:	b	2506c <__assert_fail@plt+0x12998>
   250e4:	add	r3, r3, #16
   250e8:	cmp	r4, #0
   250ec:	ldrb	ip, [r3, #-15]
   250f0:	mvnne	r4, r4
   250f4:	orr	r6, r4, r6
   250f8:	cmp	ip, #0
   250fc:	and	r0, r6, r0
   25100:	mvn	r6, r6
   25104:	ubfx	r6, r6, #0, #12
   25108:	orr	r7, r7, r6
   2510c:	orr	r0, r0, r5
   25110:	bne	250b0 <__assert_fail@plt+0x129dc>
   25114:	cmp	r8, #0
   25118:	strne	r7, [r8]
   2511c:	pop	{r4, r5, r6, r7, r8, r9}
   25120:	bx	lr
   25124:	orr	r7, r7, r5
   25128:	bic	r0, r0, r5
   2512c:	b	250a0 <__assert_fail@plt+0x129cc>
   25130:	mov	r7, ip
   25134:	b	25114 <__assert_fail@plt+0x12a40>
   25138:	push	{r3, r4, r5, lr}
   2513c:	movw	r3, #25924	; 0x6544
   25140:	movt	r3, #4
   25144:	mov	r4, r0
   25148:	mov	r2, #5
   2514c:	movw	r1, #15408	; 0x3c30
   25150:	mov	r0, #0
   25154:	movt	r1, #3
   25158:	ldr	r5, [r3]
   2515c:	bl	1217c <dcgettext@plt>
   25160:	mov	r1, r4
   25164:	mov	r2, r0
   25168:	mov	r0, r5
   2516c:	bl	122cc <error@plt>
   25170:	bl	12674 <abort@plt>
   25174:	push	{r3, r4, r5, lr}
   25178:	movw	r3, #25924	; 0x6544
   2517c:	movt	r3, #4
   25180:	mov	r4, r0
   25184:	mov	r2, #5
   25188:	movw	r1, #15452	; 0x3c5c
   2518c:	mov	r0, #0
   25190:	movt	r1, #3
   25194:	ldr	r5, [r3]
   25198:	bl	1217c <dcgettext@plt>
   2519c:	mov	r1, r4
   251a0:	mov	r2, r0
   251a4:	mov	r0, r5
   251a8:	bl	122cc <error@plt>
   251ac:	bl	12674 <abort@plt>
   251b0:	mov	ip, r0
   251b4:	push	{r4, r5, r6, r7, r8}
   251b8:	sub	sp, sp, #20
   251bc:	ldr	r4, [ip, #92]	; 0x5c
   251c0:	add	r0, sp, #4
   251c4:	cmp	r4, #0
   251c8:	stm	r0, {r1, r2, r3}
   251cc:	ldr	r3, [sp, #8]
   251d0:	ldr	r2, [sp, #12]
   251d4:	beq	251e4 <__assert_fail@plt+0x12b10>
   251d8:	ldr	r1, [ip, #32]
   251dc:	cmp	r1, #0
   251e0:	beq	25244 <__assert_fail@plt+0x12b70>
   251e4:	cmp	r2, #4
   251e8:	bhi	2527c <__assert_fail@plt+0x12ba8>
   251ec:	cmp	r2, #2
   251f0:	ldr	r2, [ip, #108]	; 0x6c
   251f4:	add	r2, r2, #1
   251f8:	str	r2, [ip, #108]	; 0x6c
   251fc:	bls	2526c <__assert_fail@plt+0x12b98>
   25200:	movw	r1, #34079	; 0x851f
   25204:	movt	r1, #20971	; 0x51eb
   25208:	asr	r4, r3, #31
   2520c:	mov	r0, #100	; 0x64
   25210:	smull	r5, r2, r1, r3
   25214:	rsb	r2, r4, r2, asr #5
   25218:	str	r2, [ip, #44]	; 0x2c
   2521c:	mls	r3, r0, r2, r3
   25220:	str	r3, [ip, #48]	; 0x30
   25224:	mov	r3, #0
   25228:	mov	r2, #2
   2522c:	str	r3, [ip, #52]	; 0x34
   25230:	str	r3, [ip, #56]	; 0x38
   25234:	str	r2, [ip, #20]
   25238:	add	sp, sp, #20
   2523c:	pop	{r4, r5, r6, r7, r8}
   25240:	bx	lr
   25244:	ldrb	r1, [ip, #89]	; 0x59
   25248:	cmp	r1, #0
   2524c:	bne	251e4 <__assert_fail@plt+0x12b10>
   25250:	ldr	r1, [ip, #108]	; 0x6c
   25254:	cmp	r1, #0
   25258:	bne	252e0 <__assert_fail@plt+0x12c0c>
   2525c:	cmp	r2, #2
   25260:	movls	r2, #1
   25264:	strls	r2, [ip, #108]	; 0x6c
   25268:	bhi	252e0 <__assert_fail@plt+0x12c0c>
   2526c:	str	r3, [ip, #44]	; 0x2c
   25270:	mov	r3, #0
   25274:	str	r3, [ip, #48]	; 0x30
   25278:	b	25224 <__assert_fail@plt+0x12b50>
   2527c:	movw	r0, #34079	; 0x851f
   25280:	movt	r0, #20971	; 0x51eb
   25284:	asr	r6, r3, #31
   25288:	sub	r2, r2, #4
   2528c:	smull	r5, r1, r0, r3
   25290:	str	r2, [ip, #32]
   25294:	movw	r7, #35757	; 0x8bad
   25298:	movt	r7, #26843	; 0x68db
   2529c:	mov	r5, #100	; 0x64
   252a0:	add	r4, r4, #1
   252a4:	smull	r8, r7, r7, r3
   252a8:	rsb	r1, r6, r1, asr #5
   252ac:	str	r4, [ip, #92]	; 0x5c
   252b0:	smull	r2, r0, r0, r1
   252b4:	asr	r2, r1, #31
   252b8:	mls	r3, r5, r1, r3
   252bc:	rsb	r6, r6, r7, asr #12
   252c0:	str	r6, [ip, #28]
   252c4:	rsb	r0, r2, r0, asr #5
   252c8:	mls	r1, r5, r0, r1
   252cc:	str	r3, [ip, #40]	; 0x28
   252d0:	str	r1, [ip, #36]	; 0x24
   252d4:	add	sp, sp, #20
   252d8:	pop	{r4, r5, r6, r7, r8}
   252dc:	bx	lr
   252e0:	ldm	r0, {r0, r1, r2}
   252e4:	add	ip, ip, #24
   252e8:	stm	ip, {r0, r1, r2}
   252ec:	b	25238 <__assert_fail@plt+0x12b64>
   252f0:	sub	sp, sp, #16
   252f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   252f8:	add	sl, sp, #36	; 0x24
   252fc:	ldr	ip, [sp, #64]	; 0x40
   25300:	mov	r4, #1
   25304:	ldr	r9, [sp, #60]	; 0x3c
   25308:	ldr	r8, [r0, #84]	; 0x54
   2530c:	stm	sl, {r1, r2, r3}
   25310:	mla	r8, r9, ip, r8
   25314:	ldr	r2, [sp, #44]	; 0x2c
   25318:	ldr	r7, [sp, #56]	; 0x38
   2531c:	ldr	fp, [sp, #52]	; 0x34
   25320:	ldr	r6, [r0, #80]	; 0x50
   25324:	ldr	r5, [r0, #76]	; 0x4c
   25328:	str	r8, [r0, #84]	; 0x54
   2532c:	ldr	r8, [r0, #68]	; 0x44
   25330:	ldr	r9, [r0, #64]	; 0x40
   25334:	mla	r6, r7, ip, r6
   25338:	ldr	r1, [r0, #72]	; 0x48
   2533c:	mla	r3, r2, ip, r8
   25340:	ldr	r2, [sp, #40]	; 0x28
   25344:	mla	r5, fp, ip, r5
   25348:	ldr	sl, [sp, #48]	; 0x30
   2534c:	mla	r9, r2, ip, r9
   25350:	ldr	fp, [r0, #60]	; 0x3c
   25354:	ldr	r7, [sp, #36]	; 0x24
   25358:	mla	r1, sl, ip, r1
   2535c:	str	r6, [r0, #80]	; 0x50
   25360:	mla	ip, r7, ip, fp
   25364:	str	r5, [r0, #76]	; 0x4c
   25368:	strb	r4, [r0, #89]	; 0x59
   2536c:	str	r9, [r0, #64]	; 0x40
   25370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   25374:	str	r1, [r0, #72]	; 0x48
   25378:	str	r3, [r0, #68]	; 0x44
   2537c:	str	ip, [r0, #60]	; 0x3c
   25380:	add	sp, sp, #16
   25384:	bx	lr
   25388:	push	{r4, r5, lr}
   2538c:	cmn	r2, #1
   25390:	sub	sp, sp, #12
   25394:	mov	r4, r0
   25398:	str	r2, [sp, #4]
   2539c:	beq	2540c <__assert_fail@plt+0x12d38>
   253a0:	ldr	r5, [r1]
   253a4:	ldr	r0, [r1, #4]
   253a8:	ldr	r2, [r4, #4]
   253ac:	ldr	r3, [r4]
   253b0:	eor	r0, r0, r2
   253b4:	ldr	ip, [r4, #8]
   253b8:	eor	r3, r5, r3
   253bc:	ldr	r2, [r1, #8]
   253c0:	orr	r0, r0, r3
   253c4:	ldr	r5, [r1, #12]
   253c8:	ldr	r3, [r4, #12]
   253cc:	eor	r2, r2, ip
   253d0:	orr	r2, r0, r2
   253d4:	ldr	ip, [r1, #16]
   253d8:	eor	r3, r5, r3
   253dc:	ldr	r0, [r4, #16]
   253e0:	orr	r2, r2, r3
   253e4:	ldr	r1, [r1, #20]
   253e8:	ldr	r3, [r4, #20]
   253ec:	eor	r0, ip, r0
   253f0:	orr	r2, r2, r0
   253f4:	eor	r3, r1, r3
   253f8:	orrs	r3, r2, r3
   253fc:	movne	r0, #0
   25400:	moveq	r0, #1
   25404:	add	sp, sp, #12
   25408:	pop	{r4, r5, pc}
   2540c:	add	r0, sp, #4
   25410:	bl	12374 <localtime@plt>
   25414:	subs	r1, r0, #0
   25418:	bne	253a0 <__assert_fail@plt+0x12ccc>
   2541c:	mov	r0, r1
   25420:	b	25404 <__assert_fail@plt+0x12d30>
   25424:	push	{r3, r4, r5, lr}
   25428:	mov	r5, r0
   2542c:	movw	r0, #18176	; 0x4700
   25430:	movt	r0, #3
   25434:	bl	12308 <getenv@plt>
   25438:	subs	r4, r0, #0
   2543c:	popeq	{r3, r4, r5, pc}
   25440:	bl	123d4 <strlen@plt>
   25444:	add	r2, r0, #1
   25448:	cmp	r2, #100	; 0x64
   2544c:	bhi	25460 <__assert_fail@plt+0x12d8c>
   25450:	mov	r0, r5
   25454:	mov	r1, r4
   25458:	pop	{r3, r4, r5, lr}
   2545c:	b	12104 <memcpy@plt>
   25460:	mov	r0, r4
   25464:	mov	r1, r2
   25468:	pop	{r3, r4, r5, lr}
   2546c:	b	28f0c <__assert_fail@plt+0x16838>
   25470:	cmp	r3, #2
   25474:	push	{r4, r5}
   25478:	ldr	r3, [sp, #8]
   2547c:	bhi	254c8 <__assert_fail@plt+0x12df4>
   25480:	cmp	r3, #0
   25484:	movlt	r3, #100	; 0x64
   25488:	mullt	r2, r3, r2
   2548c:	blt	254d0 <__assert_fail@plt+0x12dfc>
   25490:	rsb	r2, r2, r2, lsl #4
   25494:	cmp	r1, #0
   25498:	rsbne	r3, r3, #0
   2549c:	lsl	r2, r2, #2
   254a0:	add	r2, r2, r3
   254a4:	eor	r3, r2, r2, asr #31
   254a8:	sub	r3, r3, r2, asr #31
   254ac:	cmp	r3, #1440	; 0x5a0
   254b0:	pop	{r4, r5}
   254b4:	ldrgt	r3, [r0]
   254b8:	addgt	r3, r3, #1
   254bc:	strgt	r3, [r0]
   254c0:	mov	r0, r2
   254c4:	bx	lr
   254c8:	cmp	r3, #0
   254cc:	bge	25490 <__assert_fail@plt+0x12dbc>
   254d0:	movw	r1, #34079	; 0x851f
   254d4:	movt	r1, #20971	; 0x51eb
   254d8:	asr	r4, r2, #31
   254dc:	mov	ip, #100	; 0x64
   254e0:	smull	r5, r3, r1, r2
   254e4:	rsb	r3, r4, r3, asr #5
   254e8:	mls	r2, ip, r3, r2
   254ec:	rsb	r3, r3, r3, lsl #4
   254f0:	add	r2, r2, r3, lsl #2
   254f4:	b	254a4 <__assert_fail@plt+0x12dd0>
   254f8:	push	{r4, r5, r6, lr}
   254fc:	movw	r3, #18180	; 0x4704
   25500:	movw	r4, #15500	; 0x3c8c
   25504:	movt	r3, #3
   25508:	movt	r4, #3
   2550c:	mov	r6, r0
   25510:	mov	r5, r1
   25514:	b	25524 <__assert_fail@plt+0x12e50>
   25518:	ldr	r3, [r4, #12]!
   2551c:	cmp	r3, #0
   25520:	beq	25540 <__assert_fail@plt+0x12e6c>
   25524:	mov	r1, r3
   25528:	mov	r0, r5
   2552c:	bl	1205c <strcmp@plt>
   25530:	cmp	r0, #0
   25534:	bne	25518 <__assert_fail@plt+0x12e44>
   25538:	mov	r0, r4
   2553c:	pop	{r4, r5, r6, pc}
   25540:	ldr	r1, [r6, #116]	; 0x74
   25544:	add	r4, r6, #116	; 0x74
   25548:	cmp	r1, #0
   2554c:	bne	2558c <__assert_fail@plt+0x12eb8>
   25550:	movw	r1, #18184	; 0x4708
   25554:	ldr	r4, [pc, #80]	; 255ac <__assert_fail@plt+0x12ed8>
   25558:	movt	r1, #3
   2555c:	b	2556c <__assert_fail@plt+0x12e98>
   25560:	ldr	r1, [r4, #12]!
   25564:	cmp	r1, #0
   25568:	beq	255a4 <__assert_fail@plt+0x12ed0>
   2556c:	mov	r0, r5
   25570:	bl	1205c <strcmp@plt>
   25574:	cmp	r0, #0
   25578:	bne	25560 <__assert_fail@plt+0x12e8c>
   2557c:	b	25538 <__assert_fail@plt+0x12e64>
   25580:	ldr	r1, [r4, #12]!
   25584:	cmp	r1, #0
   25588:	beq	25550 <__assert_fail@plt+0x12e7c>
   2558c:	mov	r0, r5
   25590:	bl	1205c <strcmp@plt>
   25594:	cmp	r0, #0
   25598:	bne	25580 <__assert_fail@plt+0x12eac>
   2559c:	mov	r0, r4
   255a0:	pop	{r4, r5, r6, pc}
   255a4:	mov	r0, r1
   255a8:	pop	{r4, r5, r6, pc}
   255ac:			; <UNDEFINED> instruction: 0x00033cbc
   255b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255b4:	movw	r4, #26008	; 0x6598
   255b8:	movt	r4, #4
   255bc:	sub	sp, sp, #748	; 0x2ec
   255c0:	movw	r9, #15500	; 0x3c8c
   255c4:	movt	r9, #3
   255c8:	ldr	r1, [r4]
   255cc:	mov	r2, #0
   255d0:	movw	r3, #64912	; 0xfd90
   255d4:	add	ip, sp, #744	; 0x2e8
   255d8:	movt	r3, #65535	; 0xffff
   255dc:	add	r8, sp, #160	; 0xa0
   255e0:	mov	r5, r2
   255e4:	mov	r7, r9
   255e8:	mvn	r6, #1
   255ec:	str	r4, [sp, #36]	; 0x24
   255f0:	add	sl, sp, #120	; 0x78
   255f4:	movw	r4, #39321	; 0x9999
   255f8:	str	r2, [sp, #48]	; 0x30
   255fc:	movt	r4, #6553	; 0x1999
   25600:	str	r1, [sp, #740]	; 0x2e4
   25604:	strh	r2, [ip, r3]
   25608:	str	sl, [sp, #32]
   2560c:	str	r4, [sp, #72]	; 0x48
   25610:	str	r0, [sp, #40]	; 0x28
   25614:	add	r3, r9, r5
   25618:	add	r3, r3, #948	; 0x3b4
   2561c:	ldrsb	r4, [r3]
   25620:	cmn	r4, #93	; 0x5d
   25624:	beq	2566c <__assert_fail@plt+0x12f98>
   25628:	cmn	r6, #2
   2562c:	beq	25a0c <__assert_fail@plt+0x13338>
   25630:	cmp	r6, #0
   25634:	ble	25aa8 <__assert_fail@plt+0x133d4>
   25638:	movw	r3, #277	; 0x115
   2563c:	cmp	r6, r3
   25640:	movhi	r3, #2
   25644:	addls	r3, r9, r6
   25648:	ldrbls	r3, [r3, #1256]	; 0x4e8
   2564c:	add	r4, r4, r3
   25650:	cmp	r4, #112	; 0x70
   25654:	bhi	2566c <__assert_fail@plt+0x12f98>
   25658:	add	r4, r9, r4
   2565c:	add	r2, r4, #1536	; 0x600
   25660:	ldrsb	r2, [r2]
   25664:	cmp	r2, r3
   25668:	beq	25924 <__assert_fail@plt+0x13250>
   2566c:	add	r3, r9, r5
   25670:	ldrb	r4, [r3, #1768]	; 0x6e8
   25674:	cmp	r4, #0
   25678:	beq	25934 <__assert_fail@plt+0x13260>
   2567c:	add	r3, r7, r4
   25680:	sub	r1, r4, #4
   25684:	ldrb	fp, [r3, #1884]	; 0x75c
   25688:	rsb	r2, fp, #1
   2568c:	rsb	r2, r2, r2, lsl #3
   25690:	add	r3, r8, r2, lsl #2
   25694:	ldr	r2, [r8, r2, lsl #2]
   25698:	ldr	ip, [r3, #4]
   2569c:	str	r2, [sp, #52]	; 0x34
   256a0:	ldr	r5, [r3, #24]
   256a4:	str	ip, [sp, #56]	; 0x38
   256a8:	ldr	ip, [r3, #8]
   256ac:	str	ip, [sp, #68]	; 0x44
   256b0:	ldr	ip, [r3, #12]
   256b4:	str	ip, [sp, #64]	; 0x40
   256b8:	ldr	ip, [r3, #16]
   256bc:	str	ip, [sp, #44]	; 0x2c
   256c0:	ldr	ip, [r3, #20]
   256c4:	str	ip, [sp, #60]	; 0x3c
   256c8:	cmp	r1, #87	; 0x57
   256cc:	ldrls	pc, [pc, r1, lsl #2]
   256d0:	b	25860 <__assert_fail@plt+0x1318c>
   256d4:	andeq	r5, r2, r4, ror #26
   256d8:	andeq	r5, r2, r0, ror #16
   256dc:	andeq	r5, r2, r0, ror #16
   256e0:	andeq	r5, r2, ip, lsr pc
   256e4:	andeq	r5, r2, r0, asr sp
   256e8:	andeq	r5, r2, r8, lsr #27
   256ec:	muleq	r2, r4, sp
   256f0:	andeq	r5, r2, r0, lsl #27
   256f4:			; <UNDEFINED> instruction: 0x00025dbc
   256f8:	andeq	r5, r2, r0, ror #16
   256fc:	andeq	r5, r2, r0, ror #16
   25700:	andeq	r5, r2, r0, ror #16
   25704:	andeq	r5, r2, r0, ror #16
   25708:	andeq	r5, r2, r0, ror #16
   2570c:	andeq	r6, r2, r4, asr r2
   25710:	andeq	r6, r2, r8, lsr #4
   25714:	strdeq	r6, [r2], -r8
   25718:	andeq	r5, r2, r0, ror #16
   2571c:	ldrdeq	r6, [r2], -r0
   25720:	andeq	r6, r2, r4, lsr #3
   25724:	andeq	r6, r2, r4, ror r1
   25728:	andeq	r5, r2, r0, ror #16
   2572c:	andeq	r5, r2, r0, ror #16
   25730:	andeq	r6, r2, ip, lsr r1
   25734:	andeq	r6, r2, r8, lsl r1
   25738:	andeq	r6, r2, ip, ror #1
   2573c:	ldrdeq	r6, [r2], -ip
   25740:	andeq	r6, r2, ip, asr #1
   25744:	andeq	r6, r2, r0, asr #1
   25748:	andeq	r5, r2, r4, lsr r8
   2574c:	andeq	r6, r2, r4, lsl #1
   25750:	andeq	r6, r2, r0, ror r0
   25754:	andeq	r6, r2, ip, asr r0
   25758:	andeq	r6, r2, r4, asr #32
   2575c:	andeq	r6, r2, ip, lsr #32
   25760:	andeq	r6, r2, r4, lsl r0
   25764:	strdeq	r5, [r2], -ip
   25768:	andeq	r5, r2, r4, ror #31
   2576c:	andeq	r5, r2, r0, lsr lr
   25770:	andeq	r5, r2, r8, lsl lr
   25774:	andeq	r5, r2, r8, ror #27
   25778:	ldrdeq	r5, [r2], -r0
   2577c:	strdeq	r5, [r2], -ip
   25780:	andeq	r5, r2, r4, ror #29
   25784:	andeq	r5, r2, r0, asr #29
   25788:	andeq	r5, r2, r0, ror #16
   2578c:	muleq	r2, r0, lr
   25790:	andeq	r5, r2, r0, lsl #31
   25794:	andeq	r5, r2, r8, ror #23
   25798:	andeq	r5, r2, r8, ror #23
   2579c:	andeq	r5, r2, r8, lsr #31
   257a0:	andeq	r5, r2, r0, lsr ip
   257a4:	andeq	r5, r2, ip, asr #31
   257a8:	andeq	r5, r2, r0, asr #31
   257ac:	andeq	r5, r2, r8, asr #25
   257b0:	andeq	r5, r2, r4, lsl #29
   257b4:	andeq	r5, r2, ip, ror lr
   257b8:	andeq	r5, r2, r4, lsr #26
   257bc:	andeq	r5, r2, ip, lsl #24
   257c0:	andeq	r5, r2, r4, ror pc
   257c4:	andeq	r5, r2, ip, ror #25
   257c8:	andeq	r5, r2, r8, ror #30
   257cc:	andeq	r5, r2, ip, asr pc
   257d0:	andeq	r5, r2, r0, lsl #25
   257d4:	andeq	r5, r2, r0, lsr #30
   257d8:	andeq	r5, r2, r4, ror #28
   257dc:	andeq	r5, r2, r4, lsr #25
   257e0:	andeq	r5, r2, r4, asr ip
   257e4:	andeq	r5, r2, r4, asr ip
   257e8:	ldrdeq	r5, [r2], -r8
   257ec:	andeq	r5, r2, r0, ror #16
   257f0:	andeq	r5, r2, r0, lsr ip
   257f4:	andeq	r5, r2, r8, asr #25
   257f8:	andeq	r5, r2, r4, lsr #26
   257fc:	andeq	r5, r2, ip, ror #25
   25800:	andeq	r5, r2, r0, lsl #25
   25804:	andeq	r5, r2, r4, lsr #25
   25808:	andeq	r5, r2, ip, lsl #24
   2580c:	andeq	r5, r2, r0, ror #16
   25810:	andeq	r5, r2, r0, ror #16
   25814:	andeq	r5, r2, r0, ror #16
   25818:	andeq	r5, r2, r0, lsl sp
   2581c:	andeq	r5, r2, r0, ror #16
   25820:	andeq	r5, r2, r0, lsl sp
   25824:	andeq	r5, r2, ip, lsr #30
   25828:	ldrdeq	r5, [r2], -r8
   2582c:	andeq	r5, r2, r0, ror lr
   25830:			; <UNDEFINED> instruction: 0x00025fb4
   25834:	add	r3, r8, #12
   25838:	mov	r1, #420	; 0x1a4
   2583c:	ldr	ip, [sp, #40]	; 0x28
   25840:	mov	r2, #1
   25844:	str	r1, [ip, #16]
   25848:	str	r2, [sp, #16]
   2584c:	ldm	r3, {r0, r1, r2, r3}
   25850:	stm	sp, {r0, r1, r2, r3}
   25854:	mov	r0, ip
   25858:	ldm	r8, {r1, r2, r3}
   2585c:	bl	252f0 <__assert_fail@plt+0x12c1c>
   25860:	add	r4, r9, r4
   25864:	sxth	fp, fp
   25868:	ldrb	r1, [r4, #1976]	; 0x7b8
   2586c:	ldr	r4, [sp, #32]
   25870:	sub	r1, r1, #28
   25874:	add	r2, r9, r1
   25878:	sub	ip, r4, fp, lsl #1
   2587c:	rsb	fp, fp, fp, lsl #3
   25880:	ldr	r4, [sp, #52]	; 0x34
   25884:	add	r2, r2, #2064	; 0x810
   25888:	sub	r3, r8, fp, lsl #2
   2588c:	ldrsh	r0, [ip]
   25890:	add	r2, r2, #4
   25894:	add	r8, r3, #28
   25898:	str	r4, [r3, #28]
   2589c:	ldr	r4, [sp, #56]	; 0x38
   258a0:	ldrsb	r2, [r2]
   258a4:	str	r5, [r3, #52]	; 0x34
   258a8:	str	r4, [r3, #32]
   258ac:	add	r2, r2, r0
   258b0:	ldr	r4, [sp, #68]	; 0x44
   258b4:	cmp	r2, #112	; 0x70
   258b8:	str	r4, [r3, #36]	; 0x24
   258bc:	ldr	r4, [sp, #64]	; 0x40
   258c0:	str	r4, [r3, #40]	; 0x28
   258c4:	ldr	r4, [sp, #44]	; 0x2c
   258c8:	str	r4, [r3, #44]	; 0x2c
   258cc:	ldr	r4, [sp, #60]	; 0x3c
   258d0:	str	r4, [r3, #48]	; 0x30
   258d4:	bhi	258f0 <__assert_fail@plt+0x1321c>
   258d8:	add	r2, r7, r2
   258dc:	add	r3, r2, #1536	; 0x600
   258e0:	ldrsb	r3, [r3]
   258e4:	cmp	r3, r0
   258e8:	ldrbeq	r5, [r2, #1652]	; 0x674
   258ec:	beq	258fc <__assert_fail@plt+0x13228>
   258f0:	add	r1, r9, r1
   258f4:	add	r1, r1, #2096	; 0x830
   258f8:	ldrsb	r5, [r1]
   258fc:	add	r4, ip, #2
   25900:	add	r3, sl, #38	; 0x26
   25904:	cmp	r4, r3
   25908:	str	r4, [sp, #32]
   2590c:	strh	r5, [ip, #2]
   25910:	bcs	26398 <__assert_fail@plt+0x13cc4>
   25914:	cmp	r5, #12
   25918:	bne	25614 <__assert_fail@plt+0x12f40>
   2591c:	mov	r0, #0
   25920:	b	259f0 <__assert_fail@plt+0x1331c>
   25924:	ldrb	r4, [r4, #1652]	; 0x674
   25928:	cmp	r4, #0
   2592c:	str	r4, [sp, #44]	; 0x2c
   25930:	bne	25b7c <__assert_fail@plt+0x134a8>
   25934:	ldr	ip, [sp, #48]	; 0x30
   25938:	cmp	ip, #3
   2593c:	beq	259dc <__assert_fail@plt+0x13308>
   25940:	ldr	r3, [sp, #32]
   25944:	b	2595c <__assert_fail@plt+0x13288>
   25948:	cmp	r3, sl
   2594c:	beq	259ec <__assert_fail@plt+0x13318>
   25950:	ldrsh	r5, [ip, #-2]
   25954:	sub	r8, r8, #28
   25958:	sub	r3, r3, #2
   2595c:	add	r5, r9, r5
   25960:	mov	ip, r3
   25964:	add	r5, r5, #948	; 0x3b4
   25968:	ldrsb	r2, [r5]
   2596c:	cmn	r2, #93	; 0x5d
   25970:	beq	25948 <__assert_fail@plt+0x13274>
   25974:	add	r2, r2, #1
   25978:	cmp	r2, #112	; 0x70
   2597c:	bhi	25948 <__assert_fail@plt+0x13274>
   25980:	add	r2, r7, r2
   25984:	ldrb	r1, [r2, #1536]	; 0x600
   25988:	cmp	r1, #1
   2598c:	bne	25948 <__assert_fail@plt+0x13274>
   25990:	ldrb	r5, [r2, #1652]	; 0x674
   25994:	cmp	r5, #0
   25998:	beq	25948 <__assert_fail@plt+0x13274>
   2599c:	ldr	r4, [sp, #76]	; 0x4c
   259a0:	add	fp, sp, #92	; 0x5c
   259a4:	str	r4, [sp, #96]	; 0x60
   259a8:	ldr	r4, [sp, #80]	; 0x50
   259ac:	str	r4, [sp, #100]	; 0x64
   259b0:	add	r4, r8, #28
   259b4:	ldm	fp!, {r0, r1, r2, r3}
   259b8:	mov	r8, r4
   259bc:	mov	r4, #3
   259c0:	str	r4, [sp, #48]	; 0x30
   259c4:	mov	r4, r8
   259c8:	stmia	r4!, {r0, r1, r2, r3}
   259cc:	ldm	fp, {r0, r1, r2}
   259d0:	str	r4, [sp, #32]
   259d4:	stm	r4, {r0, r1, r2}
   259d8:	b	258fc <__assert_fail@plt+0x13228>
   259dc:	cmp	r6, #0
   259e0:	mvngt	r6, #1
   259e4:	bgt	25940 <__assert_fail@plt+0x1326c>
   259e8:	bne	25940 <__assert_fail@plt+0x1326c>
   259ec:	mov	r0, #1
   259f0:	ldr	ip, [sp, #36]	; 0x24
   259f4:	ldr	r2, [sp, #740]	; 0x2e4
   259f8:	ldr	r3, [ip]
   259fc:	cmp	r2, r3
   25a00:	bne	26600 <__assert_fail@plt+0x13f2c>
   25a04:	add	sp, sp, #748	; 0x2ec
   25a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a0c:	ldr	ip, [sp, #40]	; 0x28
   25a10:	ldr	r1, [ip]
   25a14:	ldrb	r2, [r1]
   25a18:	sub	r3, r2, #9
   25a1c:	uxtb	r3, r3
   25a20:	cmp	r2, #32
   25a24:	cmpne	r3, #4
   25a28:	bls	25ab4 <__assert_fail@plt+0x133e0>
   25a2c:	subs	r6, r2, #45	; 0x2d
   25a30:	sub	r0, r2, #48	; 0x30
   25a34:	rsbs	r3, r6, #0
   25a38:	adcs	r3, r3, r6
   25a3c:	cmp	r0, #9
   25a40:	movhi	r6, r3
   25a44:	orrls	r6, r3, #1
   25a48:	cmp	r6, #0
   25a4c:	bne	25ac8 <__assert_fail@plt+0x133f4>
   25a50:	cmp	r2, #43	; 0x2b
   25a54:	beq	25bc8 <__assert_fail@plt+0x134f4>
   25a58:	bic	r3, r2, #32
   25a5c:	sub	r3, r3, #65	; 0x41
   25a60:	cmp	r3, #25
   25a64:	bls	26424 <__assert_fail@plt+0x13d50>
   25a68:	cmp	r2, #40	; 0x28
   25a6c:	beq	25a94 <__assert_fail@plt+0x133c0>
   25a70:	b	26410 <__assert_fail@plt+0x13d3c>
   25a74:	cmp	r2, #40	; 0x28
   25a78:	addeq	r6, r6, #1
   25a7c:	beq	25a88 <__assert_fail@plt+0x133b4>
   25a80:	cmp	r2, #41	; 0x29
   25a84:	subeq	r6, r6, #1
   25a88:	cmp	r6, #0
   25a8c:	beq	25bd0 <__assert_fail@plt+0x134fc>
   25a90:	mov	r1, r3
   25a94:	add	r3, r1, #1
   25a98:	str	r3, [ip]
   25a9c:	ldrb	r2, [r3, #-1]
   25aa0:	cmp	r2, #0
   25aa4:	bne	25a74 <__assert_fail@plt+0x133a0>
   25aa8:	mov	r6, #0
   25aac:	mov	r3, r6
   25ab0:	b	2564c <__assert_fail@plt+0x12f78>
   25ab4:	add	r3, r1, #1
   25ab8:	str	r3, [ip]
   25abc:	ldrb	r2, [r1, #1]
   25ac0:	mov	r1, r3
   25ac4:	b	25a18 <__assert_fail@plt+0x13344>
   25ac8:	cmp	r2, #43	; 0x2b
   25acc:	movne	r2, r3
   25ad0:	orreq	r2, r3, #1
   25ad4:	cmp	r2, #0
   25ad8:	beq	263d0 <__assert_fail@plt+0x13cfc>
   25adc:	cmp	r3, #0
   25ae0:	mvnne	fp, #0
   25ae4:	moveq	fp, #1
   25ae8:	add	r3, r1, #1
   25aec:	str	r3, [ip]
   25af0:	ldrb	r2, [r1, #1]
   25af4:	sub	r1, r2, #9
   25af8:	cmp	r2, #32
   25afc:	cmpne	r1, #4
   25b00:	bls	25b74 <__assert_fail@plt+0x134a0>
   25b04:	sub	r0, r2, #48	; 0x30
   25b08:	cmp	r0, #9
   25b0c:	bhi	25ac0 <__assert_fail@plt+0x133ec>
   25b10:	ldrb	ip, [r3, #1]
   25b14:	add	r6, r3, #1
   25b18:	mov	r1, r3
   25b1c:	sub	r2, ip, #48	; 0x30
   25b20:	cmp	r2, #9
   25b24:	bhi	26280 <__assert_fail@plt+0x13bac>
   25b28:	add	r3, r1, #2
   25b2c:	str	r1, [sp, #44]	; 0x2c
   25b30:	ldr	r1, [sp, #72]	; 0x48
   25b34:	b	25b54 <__assert_fail@plt+0x13480>
   25b38:	mov	r6, r3
   25b3c:	ldrb	ip, [r3], #1
   25b40:	sub	r2, ip, #48	; 0x30
   25b44:	cmp	r2, #9
   25b48:	bhi	2627c <__assert_fail@plt+0x13ba8>
   25b4c:	cmp	r0, r1
   25b50:	bhi	25b6c <__assert_fail@plt+0x13498>
   25b54:	add	r0, r0, r0, lsl #2
   25b58:	lsl	r2, r0, #1
   25b5c:	add	r0, ip, r2
   25b60:	sub	r0, r0, #48	; 0x30
   25b64:	cmp	r0, r2
   25b68:	bcs	25b38 <__assert_fail@plt+0x13464>
   25b6c:	mov	r6, #63	; 0x3f
   25b70:	b	25638 <__assert_fail@plt+0x12f64>
   25b74:	mov	r1, r3
   25b78:	b	25ae8 <__assert_fail@plt+0x13414>
   25b7c:	ldr	r4, [sp, #48]	; 0x30
   25b80:	add	fp, sp, #92	; 0x5c
   25b84:	ldr	ip, [sp, #76]	; 0x4c
   25b88:	add	r8, r8, #28
   25b8c:	cmp	r4, #0
   25b90:	ldr	r5, [sp, #44]	; 0x2c
   25b94:	subne	r4, r4, #1
   25b98:	strne	r4, [sp, #48]	; 0x30
   25b9c:	ldr	r4, [sp, #80]	; 0x50
   25ba0:	mvn	r6, #1
   25ba4:	str	ip, [sp, #96]	; 0x60
   25ba8:	ldr	ip, [sp, #32]
   25bac:	str	r4, [sp, #100]	; 0x64
   25bb0:	mov	r4, r8
   25bb4:	ldm	fp!, {r0, r1, r2, r3}
   25bb8:	stmia	r4!, {r0, r1, r2, r3}
   25bbc:	ldm	fp, {r0, r1, r2}
   25bc0:	stm	r4, {r0, r1, r2}
   25bc4:	b	258fc <__assert_fail@plt+0x13228>
   25bc8:	mov	fp, #1
   25bcc:	b	25ae8 <__assert_fail@plt+0x13414>
   25bd0:	ldrb	r2, [r1, #1]
   25bd4:	b	25ac0 <__assert_fail@plt+0x133ec>
   25bd8:	sub	r3, r8, #28
   25bdc:	ldr	r0, [sp, #40]	; 0x28
   25be0:	ldm	r3, {r1, r2, r3}
   25be4:	bl	251b0 <__assert_fail@plt+0x12adc>
   25be8:	add	r3, r8, #12
   25bec:	mov	r2, #1
   25bf0:	str	r2, [sp, #16]
   25bf4:	ldm	r3, {r0, r1, r2, r3}
   25bf8:	stm	sp, {r0, r1, r2, r3}
   25bfc:	ldr	r0, [sp, #40]	; 0x28
   25c00:	ldm	r8, {r1, r2, r3}
   25c04:	bl	252f0 <__assert_fail@plt+0x12c1c>
   25c08:	b	25860 <__assert_fail@plt+0x1318c>
   25c0c:	ldr	ip, [r8]
   25c10:	mov	r5, #0
   25c14:	str	r5, [sp, #60]	; 0x3c
   25c18:	str	r5, [sp, #44]	; 0x2c
   25c1c:	str	ip, [sp, #68]	; 0x44
   25c20:	str	r5, [sp, #64]	; 0x40
   25c24:	str	r5, [sp, #56]	; 0x38
   25c28:	str	r5, [sp, #52]	; 0x34
   25c2c:	b	25860 <__assert_fail@plt+0x1318c>
   25c30:	ldr	ip, [r8, #-24]	; 0xffffffe8
   25c34:	mov	r5, #0
   25c38:	str	ip, [sp, #52]	; 0x34
   25c3c:	str	r5, [sp, #60]	; 0x3c
   25c40:	str	r5, [sp, #44]	; 0x2c
   25c44:	str	r5, [sp, #64]	; 0x40
   25c48:	str	r5, [sp, #68]	; 0x44
   25c4c:	str	r5, [sp, #56]	; 0x38
   25c50:	b	25860 <__assert_fail@plt+0x1318c>
   25c54:	mov	ip, #0
   25c58:	str	ip, [sp, #44]	; 0x2c
   25c5c:	ldr	ip, [r8, #-28]	; 0xffffffe4
   25c60:	ldr	r5, [r8, #-24]	; 0xffffffe8
   25c64:	str	ip, [sp, #60]	; 0x3c
   25c68:	mov	ip, #0
   25c6c:	str	ip, [sp, #64]	; 0x40
   25c70:	str	ip, [sp, #68]	; 0x44
   25c74:	str	ip, [sp, #56]	; 0x38
   25c78:	str	ip, [sp, #52]	; 0x34
   25c7c:	b	25860 <__assert_fail@plt+0x1318c>
   25c80:	ldr	ip, [r8, #-24]	; 0xffffffe8
   25c84:	mov	r5, #0
   25c88:	str	ip, [sp, #44]	; 0x2c
   25c8c:	str	r5, [sp, #60]	; 0x3c
   25c90:	str	r5, [sp, #64]	; 0x40
   25c94:	str	r5, [sp, #68]	; 0x44
   25c98:	str	r5, [sp, #56]	; 0x38
   25c9c:	str	r5, [sp, #52]	; 0x34
   25ca0:	b	25860 <__assert_fail@plt+0x1318c>
   25ca4:	ldr	ip, [r8, #-24]	; 0xffffffe8
   25ca8:	mov	r5, #0
   25cac:	str	ip, [sp, #60]	; 0x3c
   25cb0:	str	r5, [sp, #44]	; 0x2c
   25cb4:	str	r5, [sp, #64]	; 0x40
   25cb8:	str	r5, [sp, #68]	; 0x44
   25cbc:	str	r5, [sp, #56]	; 0x38
   25cc0:	str	r5, [sp, #52]	; 0x34
   25cc4:	b	25860 <__assert_fail@plt+0x1318c>
   25cc8:	ldr	ip, [r8, #-24]	; 0xffffffe8
   25ccc:	mov	r5, #0
   25cd0:	str	ip, [sp, #56]	; 0x38
   25cd4:	str	r5, [sp, #60]	; 0x3c
   25cd8:	str	r5, [sp, #44]	; 0x2c
   25cdc:	str	r5, [sp, #64]	; 0x40
   25ce0:	str	r5, [sp, #68]	; 0x44
   25ce4:	str	r5, [sp, #52]	; 0x34
   25ce8:	b	25860 <__assert_fail@plt+0x1318c>
   25cec:	ldr	ip, [r8, #-24]	; 0xffffffe8
   25cf0:	mov	r5, #0
   25cf4:	str	ip, [sp, #64]	; 0x40
   25cf8:	str	r5, [sp, #60]	; 0x3c
   25cfc:	str	r5, [sp, #44]	; 0x2c
   25d00:	str	r5, [sp, #68]	; 0x44
   25d04:	str	r5, [sp, #56]	; 0x38
   25d08:	str	r5, [sp, #52]	; 0x34
   25d0c:	b	25860 <__assert_fail@plt+0x1318c>
   25d10:	ldr	ip, [r8, #4]
   25d14:	str	ip, [sp, #52]	; 0x34
   25d18:	mov	ip, #0
   25d1c:	str	ip, [sp, #56]	; 0x38
   25d20:	b	25860 <__assert_fail@plt+0x1318c>
   25d24:	ldr	r3, [r8, #-24]	; 0xffffffe8
   25d28:	ldr	r2, [r8]
   25d2c:	mov	r5, #0
   25d30:	str	r5, [sp, #60]	; 0x3c
   25d34:	str	r5, [sp, #44]	; 0x2c
   25d38:	mul	r2, r2, r3
   25d3c:	str	r5, [sp, #64]	; 0x40
   25d40:	str	r5, [sp, #56]	; 0x38
   25d44:	str	r5, [sp, #52]	; 0x34
   25d48:	str	r2, [sp, #68]	; 0x44
   25d4c:	b	25860 <__assert_fail@plt+0x1318c>
   25d50:	ldr	ip, [sp, #40]	; 0x28
   25d54:	ldr	r3, [ip, #108]	; 0x6c
   25d58:	add	r3, r3, #1
   25d5c:	str	r3, [ip, #108]	; 0x6c
   25d60:	b	25860 <__assert_fail@plt+0x1318c>
   25d64:	ldr	ip, [sp, #40]	; 0x28
   25d68:	mov	r2, #1
   25d6c:	ldm	r8, {r0, r1}
   25d70:	add	r3, ip, #52	; 0x34
   25d74:	stm	r3, {r0, r1}
   25d78:	strb	r2, [ip, #88]	; 0x58
   25d7c:	b	25860 <__assert_fail@plt+0x1318c>
   25d80:	ldr	ip, [sp, #40]	; 0x28
   25d84:	ldr	r3, [ip, #92]	; 0x5c
   25d88:	add	r3, r3, #1
   25d8c:	str	r3, [ip, #92]	; 0x5c
   25d90:	b	25860 <__assert_fail@plt+0x1318c>
   25d94:	ldr	ip, [sp, #40]	; 0x28
   25d98:	ldr	r3, [ip, #112]	; 0x70
   25d9c:	add	r3, r3, #1
   25da0:	str	r3, [ip, #112]	; 0x70
   25da4:	b	25860 <__assert_fail@plt+0x1318c>
   25da8:	ldr	ip, [sp, #40]	; 0x28
   25dac:	ldr	r3, [ip, #100]	; 0x64
   25db0:	add	r3, r3, #1
   25db4:	str	r3, [ip, #100]	; 0x64
   25db8:	b	25860 <__assert_fail@plt+0x1318c>
   25dbc:	ldr	ip, [sp, #40]	; 0x28
   25dc0:	ldr	r3, [ip, #96]	; 0x60
   25dc4:	add	r3, r3, #1
   25dc8:	str	r3, [ip, #96]	; 0x60
   25dcc:	b	25860 <__assert_fail@plt+0x1318c>
   25dd0:	ldr	r3, [r8, #-28]	; 0xffffffe4
   25dd4:	ldr	ip, [sp, #40]	; 0x28
   25dd8:	str	r3, [ip, #36]	; 0x24
   25ddc:	ldr	r3, [r8, #4]
   25de0:	str	r3, [ip, #40]	; 0x28
   25de4:	b	25860 <__assert_fail@plt+0x1318c>
   25de8:	ldr	r3, [r8, #-56]	; 0xffffffc8
   25dec:	ldr	ip, [sp, #40]	; 0x28
   25df0:	str	r3, [ip, #36]	; 0x24
   25df4:	ldr	r3, [r8, #-24]	; 0xffffffe8
   25df8:	rsb	r3, r3, #0
   25dfc:	str	r3, [ip, #40]	; 0x28
   25e00:	ldr	r2, [r8, #8]
   25e04:	ldr	r3, [r8, #4]
   25e08:	str	r2, [ip, #32]
   25e0c:	rsb	r3, r3, #0
   25e10:	str	r3, [ip, #28]
   25e14:	b	25860 <__assert_fail@plt+0x1318c>
   25e18:	ldr	r3, [r8, #-52]	; 0xffffffcc
   25e1c:	ldr	ip, [sp, #40]	; 0x28
   25e20:	str	r3, [ip, #40]	; 0x28
   25e24:	ldr	r3, [r8, #-28]	; 0xffffffe4
   25e28:	str	r3, [ip, #36]	; 0x24
   25e2c:	b	25e00 <__assert_fail@plt+0x1372c>
   25e30:	ldr	r3, [r8, #-104]	; 0xffffff98
   25e34:	cmp	r3, #3
   25e38:	bls	263c8 <__assert_fail@plt+0x13cf4>
   25e3c:	sub	r2, r8, #112	; 0x70
   25e40:	ldr	ip, [sp, #40]	; 0x28
   25e44:	ldm	r2, {r0, r1, r2}
   25e48:	add	r3, ip, #24
   25e4c:	stm	r3, {r0, r1, r2}
   25e50:	ldr	r3, [r8, #-52]	; 0xffffffcc
   25e54:	str	r3, [ip, #36]	; 0x24
   25e58:	ldr	r3, [r8, #4]
   25e5c:	str	r3, [ip, #40]	; 0x28
   25e60:	b	25860 <__assert_fail@plt+0x1318c>
   25e64:	mov	r5, #0
   25e68:	ldr	ip, [r8, #-28]	; 0xffffffe4
   25e6c:	b	25cac <__assert_fail@plt+0x135d8>
   25e70:	mvn	ip, #0
   25e74:	str	ip, [sp, #52]	; 0x34
   25e78:	b	25860 <__assert_fail@plt+0x1318c>
   25e7c:	ldr	r3, [r8, #-28]	; 0xffffffe4
   25e80:	b	25d28 <__assert_fail@plt+0x13654>
   25e84:	mov	r5, #0
   25e88:	mov	ip, #1
   25e8c:	b	25cd0 <__assert_fail@plt+0x135fc>
   25e90:	sub	r2, r8, #56	; 0x38
   25e94:	ldr	ip, [sp, #40]	; 0x28
   25e98:	ldm	r2, {r0, r1, r2}
   25e9c:	add	r3, ip, #24
   25ea0:	stm	r3, {r0, r1, r2}
   25ea4:	ldr	r3, [r8, #-24]	; 0xffffffe8
   25ea8:	rsb	r3, r3, #0
   25eac:	str	r3, [ip, #36]	; 0x24
   25eb0:	ldr	r3, [r8, #4]
   25eb4:	rsb	r3, r3, #0
   25eb8:	str	r3, [ip, #40]	; 0x28
   25ebc:	b	25860 <__assert_fail@plt+0x1318c>
   25ec0:	ldr	r2, [r8, #-52]	; 0xffffffcc
   25ec4:	ldr	ip, [sp, #40]	; 0x28
   25ec8:	add	r3, ip, #24
   25ecc:	str	r2, [ip, #40]	; 0x28
   25ed0:	ldr	r2, [r8, #-28]	; 0xffffffe4
   25ed4:	str	r2, [ip, #36]	; 0x24
   25ed8:	ldm	r8, {r0, r1, r2}
   25edc:	stm	r3, {r0, r1, r2}
   25ee0:	b	25860 <__assert_fail@plt+0x1318c>
   25ee4:	ldr	r3, [r8, #-24]	; 0xffffffe8
   25ee8:	ldr	ip, [sp, #40]	; 0x28
   25eec:	str	r3, [ip, #40]	; 0x28
   25ef0:	ldr	r3, [r8]
   25ef4:	str	r3, [ip, #36]	; 0x24
   25ef8:	b	25860 <__assert_fail@plt+0x1318c>
   25efc:	ldr	r2, [r8, #-84]	; 0xffffffac
   25f00:	ldr	ip, [sp, #40]	; 0x28
   25f04:	add	r3, ip, #24
   25f08:	str	r2, [ip, #36]	; 0x24
   25f0c:	ldr	r2, [r8, #-52]	; 0xffffffcc
   25f10:	str	r2, [ip, #40]	; 0x28
   25f14:	ldm	r8, {r0, r1, r2}
   25f18:	stm	r3, {r0, r1, r2}
   25f1c:	b	25860 <__assert_fail@plt+0x1318c>
   25f20:	mov	r5, #0
   25f24:	mov	ip, #1
   25f28:	b	25c88 <__assert_fail@plt+0x135b4>
   25f2c:	ldr	r0, [sp, #40]	; 0x28
   25f30:	ldm	r8, {r1, r2, r3}
   25f34:	bl	251b0 <__assert_fail@plt+0x12adc>
   25f38:	b	25860 <__assert_fail@plt+0x1318c>
   25f3c:	ldr	ip, [sp, #40]	; 0x28
   25f40:	ldr	r2, [ip, #108]	; 0x6c
   25f44:	ldr	r3, [ip, #92]	; 0x5c
   25f48:	add	r2, r2, #1
   25f4c:	str	r2, [ip, #108]	; 0x6c
   25f50:	add	r3, r3, #1
   25f54:	str	r3, [ip, #92]	; 0x5c
   25f58:	b	25860 <__assert_fail@plt+0x1318c>
   25f5c:	mov	r5, #0
   25f60:	ldr	ip, [r8, #-28]	; 0xffffffe4
   25f64:	b	25c88 <__assert_fail@plt+0x135b4>
   25f68:	mov	r5, #0
   25f6c:	mov	ip, #1
   25f70:	b	25cf4 <__assert_fail@plt+0x13620>
   25f74:	mov	r5, #0
   25f78:	ldr	ip, [r8, #-28]	; 0xffffffe4
   25f7c:	b	25cf4 <__assert_fail@plt+0x13620>
   25f80:	mov	r3, r8
   25f84:	sub	ip, r8, #28
   25f88:	ldr	r2, [r3], #-16
   25f8c:	str	r2, [sp, #16]
   25f90:	ldm	r3, {r0, r1, r2, r3}
   25f94:	stm	sp, {r0, r1, r2, r3}
   25f98:	ldr	r0, [sp, #40]	; 0x28
   25f9c:	ldm	ip, {r1, r2, r3}
   25fa0:	bl	252f0 <__assert_fail@plt+0x12c1c>
   25fa4:	b	25860 <__assert_fail@plt+0x1318c>
   25fa8:	mov	r5, #0
   25fac:	ldr	ip, [r8, #-28]	; 0xffffffe4
   25fb0:	b	25c38 <__assert_fail@plt+0x13564>
   25fb4:	ldr	ip, [r8, #4]
   25fb8:	str	ip, [sp, #52]	; 0x34
   25fbc:	b	25860 <__assert_fail@plt+0x1318c>
   25fc0:	mov	r5, #0
   25fc4:	ldr	ip, [r8, #-28]	; 0xffffffe4
   25fc8:	b	25cd0 <__assert_fail@plt+0x135fc>
   25fcc:	mov	r5, #0
   25fd0:	mov	ip, #1
   25fd4:	b	25c38 <__assert_fail@plt+0x13564>
   25fd8:	mov	r5, #0
   25fdc:	mov	ip, #1
   25fe0:	b	25cac <__assert_fail@plt+0x135d8>
   25fe4:	ldr	r3, [r8, #-52]	; 0xffffffcc
   25fe8:	ldr	ip, [sp, #40]	; 0x28
   25fec:	str	r3, [ip, #36]	; 0x24
   25ff0:	ldr	r3, [r8, #4]
   25ff4:	str	r3, [ip, #40]	; 0x28
   25ff8:	b	25860 <__assert_fail@plt+0x1318c>
   25ffc:	ldr	r3, [r8, #-24]	; 0xffffffe8
   26000:	ldr	ip, [sp, #40]	; 0x28
   26004:	str	r3, [ip, #4]
   26008:	ldr	r3, [r8]
   2600c:	str	r3, [ip, #8]
   26010:	b	25860 <__assert_fail@plt+0x1318c>
   26014:	ldr	r3, [r8, #-28]	; 0xffffffe4
   26018:	ldr	ip, [sp, #40]	; 0x28
   2601c:	str	r3, [ip, #4]
   26020:	ldr	r3, [r8]
   26024:	str	r3, [ip, #8]
   26028:	b	25860 <__assert_fail@plt+0x1318c>
   2602c:	ldr	ip, [sp, #40]	; 0x28
   26030:	mov	r3, #0
   26034:	str	r3, [ip, #4]
   26038:	ldr	r3, [r8, #-28]	; 0xffffffe4
   2603c:	str	r3, [ip, #8]
   26040:	b	25860 <__assert_fail@plt+0x1318c>
   26044:	ldr	ip, [sp, #40]	; 0x28
   26048:	mov	r3, #0
   2604c:	str	r3, [ip, #4]
   26050:	ldr	r3, [r8]
   26054:	str	r3, [ip, #8]
   26058:	b	25860 <__assert_fail@plt+0x1318c>
   2605c:	ldr	ip, [sp, #40]	; 0x28
   26060:	ldr	r3, [r8, #-28]	; 0xffffffe4
   26064:	add	r3, r3, #60	; 0x3c
   26068:	str	r3, [ip, #16]
   2606c:	b	25860 <__assert_fail@plt+0x1318c>
   26070:	ldr	ip, [sp, #40]	; 0x28
   26074:	ldr	r3, [r8]
   26078:	add	r3, r3, #60	; 0x3c
   2607c:	str	r3, [ip, #16]
   26080:	b	25860 <__assert_fail@plt+0x1318c>
   26084:	ldr	ip, [sp, #40]	; 0x28
   26088:	ldr	lr, [r8, #-56]	; 0xffffffc8
   2608c:	add	r0, ip, #112	; 0x70
   26090:	ldr	ip, [r8]
   26094:	ldrb	r1, [r8, #-28]	; 0xffffffe4
   26098:	ldr	r2, [r8, #-24]	; 0xffffffe8
   2609c:	ldr	r3, [r8, #-20]	; 0xffffffec
   260a0:	str	ip, [sp]
   260a4:	str	lr, [sp, #84]	; 0x54
   260a8:	bl	25470 <__assert_fail@plt+0x12d9c>
   260ac:	ldr	ip, [sp, #84]	; 0x54
   260b0:	add	r0, ip, r0
   260b4:	ldr	ip, [sp, #40]	; 0x28
   260b8:	str	r0, [ip, #16]
   260bc:	b	25860 <__assert_fail@plt+0x1318c>
   260c0:	ldr	r1, [r8, #-28]	; 0xffffffe4
   260c4:	add	r3, r8, #12
   260c8:	b	2583c <__assert_fail@plt+0x13168>
   260cc:	ldr	ip, [sp, #40]	; 0x28
   260d0:	mov	r3, #420	; 0x1a4
   260d4:	str	r3, [ip, #16]
   260d8:	b	25860 <__assert_fail@plt+0x1318c>
   260dc:	ldr	r3, [r8]
   260e0:	ldr	ip, [sp, #40]	; 0x28
   260e4:	str	r3, [ip, #16]
   260e8:	b	25860 <__assert_fail@plt+0x1318c>
   260ec:	ldr	ip, [sp, #40]	; 0x28
   260f0:	mov	r3, #1
   260f4:	str	r3, [ip, #12]
   260f8:	ldr	r2, [r8, #-28]	; 0xffffffe4
   260fc:	ldr	r3, [ip, #104]	; 0x68
   26100:	cmp	r2, #0
   26104:	movle	r2, #1
   26108:	movgt	r2, #2
   2610c:	add	r3, r2, r3
   26110:	str	r3, [ip, #104]	; 0x68
   26114:	b	25860 <__assert_fail@plt+0x1318c>
   26118:	ldr	ip, [sp, #40]	; 0x28
   2611c:	ldr	r3, [r8]
   26120:	ldr	r2, [ip, #104]	; 0x68
   26124:	str	r3, [ip, #12]
   26128:	cmp	r3, #0
   2612c:	movle	r3, r2
   26130:	addgt	r3, r2, #1
   26134:	str	r3, [ip, #104]	; 0x68
   26138:	b	25860 <__assert_fail@plt+0x1318c>
   2613c:	ldr	ip, [sp, #40]	; 0x28
   26140:	ldrb	r1, [r8, #-28]	; 0xffffffe4
   26144:	ldr	r2, [r8, #-24]	; 0xffffffe8
   26148:	ldr	r3, [ip, #112]	; 0x70
   2614c:	mov	r0, ip
   26150:	add	r3, r3, #1
   26154:	str	r3, [r0, #112]!	; 0x70
   26158:	ldr	ip, [r8]
   2615c:	ldr	r3, [r8, #-20]	; 0xffffffec
   26160:	str	ip, [sp]
   26164:	bl	25470 <__assert_fail@plt+0x12d9c>
   26168:	ldr	ip, [sp, #40]	; 0x28
   2616c:	str	r0, [ip, #16]
   26170:	b	25860 <__assert_fail@plt+0x1318c>
   26174:	ldr	r0, [r8, #-28]	; 0xffffffe4
   26178:	ldr	r2, [r8, #-24]	; 0xffffffe8
   2617c:	ldr	r1, [r8, #-136]	; 0xffffff78
   26180:	ldr	r3, [r8, #-80]	; 0xffffffb0
   26184:	ldr	ip, [sp, #40]	; 0x28
   26188:	str	r0, [ip, #52]	; 0x34
   2618c:	mov	r0, #2
   26190:	str	r3, [ip, #48]	; 0x30
   26194:	str	r1, [ip, #44]	; 0x2c
   26198:	str	r2, [ip, #56]	; 0x38
   2619c:	str	r0, [ip, #20]
   261a0:	b	25860 <__assert_fail@plt+0x1318c>
   261a4:	ldr	r0, [r8, #-24]	; 0xffffffe8
   261a8:	mov	r3, #0
   261ac:	ldr	r1, [r8, #-80]	; 0xffffffb0
   261b0:	mov	r2, #2
   261b4:	ldr	ip, [sp, #40]	; 0x28
   261b8:	str	r3, [ip, #52]	; 0x34
   261bc:	str	r0, [ip, #48]	; 0x30
   261c0:	str	r1, [ip, #44]	; 0x2c
   261c4:	str	r3, [ip, #56]	; 0x38
   261c8:	str	r2, [ip, #20]
   261cc:	b	25860 <__assert_fail@plt+0x1318c>
   261d0:	ldr	r1, [r8, #-24]	; 0xffffffe8
   261d4:	mov	r3, #0
   261d8:	ldr	ip, [sp, #40]	; 0x28
   261dc:	mov	r2, #2
   261e0:	str	r3, [ip, #48]	; 0x30
   261e4:	str	r3, [ip, #52]	; 0x34
   261e8:	str	r1, [ip, #44]	; 0x2c
   261ec:	str	r3, [ip, #56]	; 0x38
   261f0:	str	r2, [ip, #20]
   261f4:	b	25860 <__assert_fail@plt+0x1318c>
   261f8:	ldr	r3, [r8, #-24]	; 0xffffffe8
   261fc:	ldr	r0, [r8, #-80]	; 0xffffffb0
   26200:	ldr	r1, [r8, #-28]	; 0xffffffe4
   26204:	ldr	r2, [r8, #-136]	; 0xffffff78
   26208:	ldr	ip, [sp, #40]	; 0x28
   2620c:	str	r0, [ip, #48]	; 0x30
   26210:	str	r1, [ip, #52]	; 0x34
   26214:	str	r2, [ip, #44]	; 0x2c
   26218:	str	r3, [ip, #56]	; 0x38
   2621c:	ldr	r3, [r8]
   26220:	str	r3, [ip, #20]
   26224:	b	25860 <__assert_fail@plt+0x1318c>
   26228:	ldr	r1, [r8, #-24]	; 0xffffffe8
   2622c:	mov	r3, #0
   26230:	ldr	r2, [r8, #-80]	; 0xffffffb0
   26234:	ldr	ip, [sp, #40]	; 0x28
   26238:	str	r3, [ip, #52]	; 0x34
   2623c:	str	r1, [ip, #48]	; 0x30
   26240:	str	r2, [ip, #44]	; 0x2c
   26244:	str	r3, [ip, #56]	; 0x38
   26248:	ldr	r3, [r8]
   2624c:	str	r3, [ip, #20]
   26250:	b	25860 <__assert_fail@plt+0x1318c>
   26254:	ldr	r2, [r8, #-24]	; 0xffffffe8
   26258:	mov	r3, #0
   2625c:	ldr	ip, [sp, #40]	; 0x28
   26260:	str	r3, [ip, #48]	; 0x30
   26264:	str	r3, [ip, #52]	; 0x34
   26268:	str	r2, [ip, #44]	; 0x2c
   2626c:	str	r3, [ip, #56]	; 0x38
   26270:	ldr	r3, [r8]
   26274:	str	r3, [ip, #20]
   26278:	b	25860 <__assert_fail@plt+0x1318c>
   2627c:	ldr	r1, [sp, #44]	; 0x2c
   26280:	and	ip, ip, #253	; 0xfd
   26284:	cmp	ip, #44	; 0x2c
   26288:	bne	26354 <__assert_fail@plt+0x13c80>
   2628c:	ldrb	r3, [r6, #1]
   26290:	sub	r3, r3, #48	; 0x30
   26294:	cmp	r3, #9
   26298:	bhi	26354 <__assert_fail@plt+0x13c80>
   2629c:	cmn	fp, #1
   262a0:	beq	263f8 <__assert_fail@plt+0x13d24>
   262a4:	cmp	r0, #0
   262a8:	mov	ip, r0
   262ac:	blt	25b6c <__assert_fail@plt+0x13498>
   262b0:	ldrb	r1, [r6, #2]
   262b4:	add	r6, r6, #2
   262b8:	mov	r0, #8
   262bc:	sub	r2, r1, #48	; 0x30
   262c0:	cmp	r2, #9
   262c4:	add	r3, r3, r3, lsl #2
   262c8:	ldrbls	r1, [r6, #1]
   262cc:	lsl	r3, r3, #1
   262d0:	addls	r3, r3, r2
   262d4:	addls	r6, r6, #1
   262d8:	subls	r2, r1, #48	; 0x30
   262dc:	subs	r0, r0, #1
   262e0:	bne	262c0 <__assert_fail@plt+0x13bec>
   262e4:	cmn	fp, #1
   262e8:	beq	26618 <__assert_fail@plt+0x13f44>
   262ec:	cmp	r2, #9
   262f0:	bhi	26310 <__assert_fail@plt+0x13c3c>
   262f4:	add	r2, r6, #1
   262f8:	mov	r6, r2
   262fc:	add	r2, r2, #1
   26300:	ldrb	r1, [r6]
   26304:	sub	r1, r1, #48	; 0x30
   26308:	cmp	r1, #9
   2630c:	bls	262f8 <__assert_fail@plt+0x13c24>
   26310:	lsr	r2, fp, #31
   26314:	cmp	r3, #0
   26318:	moveq	r2, #0
   2631c:	andne	r2, r2, #1
   26320:	cmp	r2, #0
   26324:	beq	26650 <__assert_fail@plt+0x13f7c>
   26328:	subs	ip, ip, #1
   2632c:	bpl	25b6c <__assert_fail@plt+0x13498>
   26330:	str	ip, [sp, #92]	; 0x5c
   26334:	mov	r0, #51712	; 0xca00
   26338:	ldr	ip, [sp, #40]	; 0x28
   2633c:	movt	r0, #15258	; 0x3b9a
   26340:	rsb	r0, r3, r0
   26344:	str	r0, [sp, #76]	; 0x4c
   26348:	str	r6, [ip]
   2634c:	mov	r6, #276	; 0x114
   26350:	b	25638 <__assert_fail@plt+0x12f64>
   26354:	cmn	fp, #1
   26358:	lsr	r3, fp, #31
   2635c:	strb	r3, [sp, #92]	; 0x5c
   26360:	beq	263a0 <__assert_fail@plt+0x13ccc>
   26364:	cmp	r0, #0
   26368:	str	r0, [sp, #76]	; 0x4c
   2636c:	blt	25b6c <__assert_fail@plt+0x13498>
   26370:	ldr	ip, [sp, #40]	; 0x28
   26374:	cmp	fp, #0
   26378:	movw	r2, #275	; 0x113
   2637c:	movw	r3, #274	; 0x112
   26380:	rsb	r1, r1, r6
   26384:	str	r1, [sp, #80]	; 0x50
   26388:	str	r6, [ip]
   2638c:	moveq	r6, r2
   26390:	movne	r6, r3
   26394:	b	25638 <__assert_fail@plt+0x12f64>
   26398:	mov	r0, #2
   2639c:	b	259f0 <__assert_fail@plt+0x1331c>
   263a0:	rsb	r0, r0, #0
   263a4:	str	r0, [sp, #76]	; 0x4c
   263a8:	cmp	r0, #0
   263ac:	bgt	25b6c <__assert_fail@plt+0x13498>
   263b0:	ldr	ip, [sp, #40]	; 0x28
   263b4:	rsb	r1, r1, r6
   263b8:	str	r1, [sp, #80]	; 0x50
   263bc:	str	r6, [ip]
   263c0:	movw	r6, #274	; 0x112
   263c4:	b	25638 <__assert_fail@plt+0x12f64>
   263c8:	ldr	r2, [r8, #-108]	; 0xffffff94
   263cc:	b	25f00 <__assert_fail@plt+0x1382c>
   263d0:	ldrb	ip, [r1, #1]
   263d4:	add	r6, r1, #1
   263d8:	sub	r3, ip, #48	; 0x30
   263dc:	cmp	r3, #9
   263e0:	bhi	2667c <__assert_fail@plt+0x13fa8>
   263e4:	ldr	r3, [sp, #72]	; 0x48
   263e8:	cmp	r0, r3
   263ec:	bhi	25b6c <__assert_fail@plt+0x13498>
   263f0:	mov	fp, r2
   263f4:	b	25b28 <__assert_fail@plt+0x13454>
   263f8:	rsb	ip, r0, #0
   263fc:	cmp	ip, #0
   26400:	bgt	25b6c <__assert_fail@plt+0x13498>
   26404:	cmn	r0, ip
   26408:	bne	25b6c <__assert_fail@plt+0x13498>
   2640c:	b	262b0 <__assert_fail@plt+0x13bdc>
   26410:	ldr	ip, [sp, #40]	; 0x28
   26414:	add	r3, r1, #1
   26418:	str	r3, [ip]
   2641c:	ldrb	r6, [r1]
   26420:	b	25630 <__assert_fail@plt+0x12f5c>
   26424:	add	fp, sp, #720	; 0x2d0
   26428:	ldr	r0, [sp, #40]	; 0x28
   2642c:	mov	r1, fp
   26430:	rsb	r3, fp, r1
   26434:	cmp	r3, #18
   26438:	strbls	r2, [r1]
   2643c:	ldr	r3, [r0]
   26440:	addls	r1, r1, #1
   26444:	add	r2, r3, #1
   26448:	str	r2, [r0]
   2644c:	ldrb	r2, [r3, #1]
   26450:	bic	r3, r2, #32
   26454:	sub	r3, r3, #65	; 0x41
   26458:	cmp	r3, #25
   2645c:	bls	26430 <__assert_fail@plt+0x13d5c>
   26460:	cmp	r2, #46	; 0x2e
   26464:	beq	26430 <__assert_fail@plt+0x13d5c>
   26468:	mov	r3, #0
   2646c:	strb	r3, [r1]
   26470:	ldrb	r3, [sp, #720]	; 0x2d0
   26474:	cmp	r3, #0
   26478:	addne	r2, sp, #716	; 0x2cc
   2647c:	addne	r2, r2, #3
   26480:	beq	264a0 <__assert_fail@plt+0x13dcc>
   26484:	sub	r1, r3, #97	; 0x61
   26488:	cmp	r1, #25
   2648c:	subls	r3, r3, #32
   26490:	strb	r3, [r2, #1]!
   26494:	ldrb	r3, [r2, #1]
   26498:	cmp	r3, #0
   2649c:	bne	26484 <__assert_fail@plt+0x13db0>
   264a0:	ldr	r3, [pc, #800]	; 267c8 <__assert_fail@plt+0x140f4>
   264a4:	movw	r1, #18188	; 0x470c
   264a8:	mov	r2, r9
   264ac:	movt	r1, #3
   264b0:	mov	r9, r6
   264b4:	mov	r6, r4
   264b8:	mov	r4, r3
   264bc:	b	264cc <__assert_fail@plt+0x13df8>
   264c0:	ldr	r1, [r4, #12]!
   264c4:	cmp	r1, #0
   264c8:	beq	26500 <__assert_fail@plt+0x13e2c>
   264cc:	mov	r0, fp
   264d0:	str	r2, [sp, #28]
   264d4:	bl	1205c <strcmp@plt>
   264d8:	ldr	r2, [sp, #28]
   264dc:	cmp	r0, #0
   264e0:	bne	264c0 <__assert_fail@plt+0x13dec>
   264e4:	mov	r3, r4
   264e8:	mov	r9, r2
   264ec:	mov	r4, r6
   264f0:	ldr	r2, [r3, #8]
   264f4:	ldr	r6, [r3, #4]
   264f8:	str	r2, [sp, #92]	; 0x5c
   264fc:	b	25630 <__assert_fail@plt+0x12f5c>
   26500:	mov	r0, fp
   26504:	mov	r4, r6
   26508:	mov	r6, r9
   2650c:	mov	r9, r2
   26510:	bl	123d4 <strlen@plt>
   26514:	cmp	r0, #3
   26518:	str	r0, [sp, #44]	; 0x2c
   2651c:	moveq	r6, #1
   26520:	beq	2652c <__assert_fail@plt+0x13e58>
   26524:	cmp	r0, #4
   26528:	beq	26604 <__assert_fail@plt+0x13f30>
   2652c:	ldr	r3, [pc, #664]	; 267cc <__assert_fail@plt+0x140f8>
   26530:	movw	r1, #18192	; 0x4710
   26534:	str	r4, [sp, #52]	; 0x34
   26538:	movt	r1, #3
   2653c:	mov	r4, r3
   26540:	b	26568 <__assert_fail@plt+0x13e94>
   26544:	mov	r2, #3
   26548:	bl	1265c <strncmp@plt>
   2654c:	rsbs	r0, r0, #1
   26550:	movcc	r0, #0
   26554:	cmp	r0, #0
   26558:	bne	265a4 <__assert_fail@plt+0x13ed0>
   2655c:	ldr	r1, [r4, #12]!
   26560:	cmp	r1, #0
   26564:	beq	26584 <__assert_fail@plt+0x13eb0>
   26568:	cmp	r6, #0
   2656c:	mov	r0, fp
   26570:	bne	26544 <__assert_fail@plt+0x13e70>
   26574:	bl	1205c <strcmp@plt>
   26578:	rsbs	r0, r0, #1
   2657c:	movcc	r0, #0
   26580:	b	26554 <__assert_fail@plt+0x13e80>
   26584:	ldr	r0, [sp, #40]	; 0x28
   26588:	mov	r1, fp
   2658c:	bl	254f8 <__assert_fail@plt+0x12e24>
   26590:	ldr	r4, [sp, #52]	; 0x34
   26594:	cmp	r0, #0
   26598:	beq	265b0 <__assert_fail@plt+0x13edc>
   2659c:	mov	r3, r0
   265a0:	b	264f0 <__assert_fail@plt+0x13e1c>
   265a4:	mov	r3, r4
   265a8:	ldr	r4, [sp, #52]	; 0x34
   265ac:	b	264f0 <__assert_fail@plt+0x13e1c>
   265b0:	movw	r1, #18220	; 0x472c
   265b4:	mov	r0, fp
   265b8:	movt	r1, #3
   265bc:	bl	1205c <strcmp@plt>
   265c0:	cmp	r0, #0
   265c4:	beq	2670c <__assert_fail@plt+0x14038>
   265c8:	movw	r2, #18200	; 0x4718
   265cc:	movt	r2, #3
   265d0:	ldr	r6, [pc, #504]	; 267d0 <__assert_fail@plt+0x140fc>
   265d4:	mov	r1, r2
   265d8:	b	265e8 <__assert_fail@plt+0x13f14>
   265dc:	ldr	r1, [r6, #12]!
   265e0:	cmp	r1, #0
   265e4:	beq	26684 <__assert_fail@plt+0x13fb0>
   265e8:	mov	r0, fp
   265ec:	bl	1205c <strcmp@plt>
   265f0:	cmp	r0, #0
   265f4:	bne	265dc <__assert_fail@plt+0x13f08>
   265f8:	mov	r3, r6
   265fc:	b	264f0 <__assert_fail@plt+0x13e1c>
   26600:	bl	12188 <__stack_chk_fail@plt>
   26604:	ldrb	r6, [sp, #723]	; 0x2d3
   26608:	subs	r3, r6, #46	; 0x2e
   2660c:	rsbs	r6, r3, #0
   26610:	adcs	r6, r6, r3
   26614:	b	2652c <__assert_fail@plt+0x13e58>
   26618:	cmp	r2, #9
   2661c:	bhi	26310 <__assert_fail@plt+0x13c3c>
   26620:	cmp	r1, #48	; 0x30
   26624:	addeq	r2, r6, #1
   26628:	beq	26638 <__assert_fail@plt+0x13f64>
   2662c:	b	26674 <__assert_fail@plt+0x13fa0>
   26630:	cmp	r1, #48	; 0x30
   26634:	bne	26674 <__assert_fail@plt+0x13fa0>
   26638:	mov	r6, r2
   2663c:	ldrb	r1, [r2], #1
   26640:	sub	r0, r1, #48	; 0x30
   26644:	cmp	r0, #9
   26648:	bls	26630 <__assert_fail@plt+0x13f5c>
   2664c:	b	26310 <__assert_fail@plt+0x13c3c>
   26650:	str	ip, [sp, #92]	; 0x5c
   26654:	cmp	fp, #0
   26658:	ldr	ip, [sp, #40]	; 0x28
   2665c:	str	r3, [sp, #76]	; 0x4c
   26660:	movw	r3, #277	; 0x115
   26664:	str	r6, [ip]
   26668:	moveq	r6, r3
   2666c:	movne	r6, #276	; 0x114
   26670:	b	25638 <__assert_fail@plt+0x12f64>
   26674:	add	r3, r3, #1
   26678:	b	262f4 <__assert_fail@plt+0x13c20>
   2667c:	mov	fp, r2
   26680:	b	26280 <__assert_fail@plt+0x13bac>
   26684:	ldr	ip, [sp, #44]	; 0x2c
   26688:	mov	r2, r1
   2668c:	sub	r3, ip, #1
   26690:	ldrb	r1, [fp, r3]
   26694:	cmp	r1, #83	; 0x53
   26698:	beq	26714 <__assert_fail@plt+0x14040>
   2669c:	ldr	r6, [pc, #304]	; 267d4 <__assert_fail@plt+0x14100>
   266a0:	movw	r1, #18208	; 0x4720
   266a4:	movt	r1, #3
   266a8:	mov	r0, fp
   266ac:	bl	1205c <strcmp@plt>
   266b0:	cmp	r0, #0
   266b4:	beq	265f8 <__assert_fail@plt+0x13f24>
   266b8:	ldr	r1, [r6, #12]!
   266bc:	cmp	r1, #0
   266c0:	bne	266a8 <__assert_fail@plt+0x13fd4>
   266c4:	ldr	r3, [sp, #44]	; 0x2c
   266c8:	cmp	r3, #1
   266cc:	ldrb	r3, [sp, #720]	; 0x2d0
   266d0:	beq	26784 <__assert_fail@plt+0x140b0>
   266d4:	cmp	r3, #0
   266d8:	movne	r1, fp
   266dc:	movne	r0, #0
   266e0:	movne	r2, fp
   266e4:	beq	25b6c <__assert_fail@plt+0x13498>
   266e8:	cmp	r3, #46	; 0x2e
   266ec:	ldrb	r3, [r1, #1]
   266f0:	addne	r2, r2, #1
   266f4:	moveq	r0, #1
   266f8:	cmp	r3, #0
   266fc:	strb	r3, [r2]
   26700:	beq	26764 <__assert_fail@plt+0x14090>
   26704:	ldrb	r3, [r1, #1]!
   26708:	b	266e8 <__assert_fail@plt+0x14014>
   2670c:	ldr	r3, [pc, #196]	; 267d8 <__assert_fail@plt+0x14104>
   26710:	b	264f0 <__assert_fail@plt+0x13e1c>
   26714:	ldr	r6, [pc, #180]	; 267d0 <__assert_fail@plt+0x140fc>
   26718:	movw	r1, #18200	; 0x4718
   2671c:	movt	r1, #3
   26720:	strb	r2, [fp, r3]
   26724:	mov	r2, r9
   26728:	mov	r9, r3
   2672c:	mov	r0, fp
   26730:	str	r2, [sp, #28]
   26734:	bl	1205c <strcmp@plt>
   26738:	ldr	r2, [sp, #28]
   2673c:	cmp	r0, #0
   26740:	beq	267b4 <__assert_fail@plt+0x140e0>
   26744:	ldr	r1, [r6, #12]!
   26748:	cmp	r1, #0
   2674c:	bne	2672c <__assert_fail@plt+0x14058>
   26750:	mov	r3, r9
   26754:	mov	r9, r2
   26758:	mov	r2, #83	; 0x53
   2675c:	strb	r2, [fp, r3]
   26760:	b	2669c <__assert_fail@plt+0x13fc8>
   26764:	cmp	r0, #0
   26768:	beq	25b6c <__assert_fail@plt+0x13498>
   2676c:	mov	r1, fp
   26770:	ldr	r0, [sp, #40]	; 0x28
   26774:	bl	254f8 <__assert_fail@plt+0x12e24>
   26778:	cmp	r0, #0
   2677c:	bne	2659c <__assert_fail@plt+0x13ec8>
   26780:	b	25b6c <__assert_fail@plt+0x13498>
   26784:	cmp	r3, #65	; 0x41
   26788:	beq	267c0 <__assert_fail@plt+0x140ec>
   2678c:	ldr	r2, [pc, #72]	; 267dc <__assert_fail@plt+0x14108>
   26790:	ldr	r1, [r2]
   26794:	mov	r0, r2
   26798:	cmp	r1, #0
   2679c:	beq	266d4 <__assert_fail@plt+0x14000>
   267a0:	ldrb	r1, [r1]
   267a4:	add	r2, r2, #12
   267a8:	cmp	r1, r3
   267ac:	bne	26790 <__assert_fail@plt+0x140bc>
   267b0:	b	2659c <__assert_fail@plt+0x13ec8>
   267b4:	mov	r9, r2
   267b8:	mov	r3, r6
   267bc:	b	264f0 <__assert_fail@plt+0x13e1c>
   267c0:	ldr	r3, [pc, #24]	; 267e0 <__assert_fail@plt+0x1410c>
   267c4:	b	264f0 <__assert_fail@plt+0x13e1c>
   267c8:	strheq	r4, [r3], -r4	; <UNPREDICTABLE>
   267cc:	ldrdeq	r4, [r3], -r8
   267d0:	strdeq	r4, [r3], -r0
   267d4:	andeq	r4, r3, r4, lsl #12
   267d8:	strdeq	r3, [r3], -ip
   267dc:	andeq	r3, r3, r4, lsl pc
   267e0:	andeq	r3, r3, r8, lsl #30
   267e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267e8:	movw	r8, #26008	; 0x6598
   267ec:	movt	r8, #4
   267f0:	sub	sp, sp, #508	; 0x1fc
   267f4:	cmp	r2, #0
   267f8:	mov	r4, r1
   267fc:	ldr	r3, [r8]
   26800:	str	r0, [sp, #36]	; 0x24
   26804:	str	r3, [sp, #500]	; 0x1f4
   26808:	beq	27068 <__assert_fail@plt+0x14994>
   2680c:	ldr	r3, [r2]
   26810:	mov	r0, r2
   26814:	ldr	r2, [r2, #4]
   26818:	str	r3, [sp, #28]
   2681c:	str	r2, [sp, #32]
   26820:	bl	12374 <localtime@plt>
   26824:	subs	fp, r0, #0
   26828:	beq	27030 <__assert_fail@plt+0x1495c>
   2682c:	mov	r1, r4
   26830:	mov	r5, r1
   26834:	add	r1, r1, #1
   26838:	ldrb	r4, [r5]
   2683c:	sub	r7, r4, #9
   26840:	cmp	r4, #32
   26844:	cmpne	r7, #4
   26848:	movhi	r7, #0
   2684c:	movls	r7, #1
   26850:	bls	26830 <__assert_fail@plt+0x1415c>
   26854:	movw	r1, #18224	; 0x4730
   26858:	mov	r0, r5
   2685c:	movt	r1, #3
   26860:	mov	r2, #4
   26864:	bl	1265c <strncmp@plt>
   26868:	cmp	r0, #0
   2686c:	bne	26914 <__assert_fail@plt+0x14240>
   26870:	ldrb	r2, [r5, #4]
   26874:	add	r6, r5, #4
   26878:	str	r6, [sp, #24]
   2687c:	cmp	r2, #0
   26880:	beq	270b8 <__assert_fail@plt+0x149e4>
   26884:	mov	r1, r6
   26888:	mov	r6, #1
   2688c:	mov	r7, r0
   26890:	mov	sl, r0
   26894:	str	fp, [sp, #44]	; 0x2c
   26898:	add	r9, sp, #300	; 0x12c
   2689c:	mov	fp, r6
   268a0:	mov	r0, r5
   268a4:	mov	r6, r5
   268a8:	str	r8, [sp, #40]	; 0x28
   268ac:	b	268d0 <__assert_fail@plt+0x141fc>
   268b0:	cmp	r2, #34	; 0x22
   268b4:	beq	26b08 <__assert_fail@plt+0x14434>
   268b8:	mov	r4, r1
   268bc:	add	r1, r1, #1
   268c0:	ldrb	r2, [r4, #1]
   268c4:	add	fp, fp, #1
   268c8:	cmp	r2, #0
   268cc:	beq	26900 <__assert_fail@plt+0x1422c>
   268d0:	cmp	r2, #92	; 0x5c
   268d4:	bne	268b0 <__assert_fail@plt+0x141dc>
   268d8:	ldrb	r2, [r1, #1]
   268dc:	add	r4, r1, #1
   268e0:	cmp	r2, #34	; 0x22
   268e4:	cmpne	r2, #92	; 0x5c
   268e8:	bne	26900 <__assert_fail@plt+0x1422c>
   268ec:	ldrb	r2, [r4, #1]
   268f0:	add	r1, r1, #2
   268f4:	add	fp, fp, #1
   268f8:	cmp	r2, #0
   268fc:	bne	268d0 <__assert_fail@plt+0x141fc>
   26900:	ldr	fp, [sp, #44]	; 0x2c
   26904:	mov	r5, r0
   26908:	ldr	r8, [sp, #40]	; 0x28
   2690c:	ldrb	r2, [r0]
   26910:	b	26920 <__assert_fail@plt+0x1424c>
   26914:	add	r9, sp, #300	; 0x12c
   26918:	mov	r2, r4
   2691c:	mov	sl, r7
   26920:	ldr	r1, [fp, #20]
   26924:	cmp	r2, #0
   26928:	ldr	r6, [fp, #4]
   2692c:	movw	r0, #62676	; 0xf4d4
   26930:	ldr	r3, [sp, #28]
   26934:	movt	r0, #2
   26938:	add	r1, r1, #1888	; 0x760
   2693c:	ldr	r2, [fp]
   26940:	ldr	ip, [fp, #12]
   26944:	moveq	r5, r0
   26948:	ldr	lr, [fp, #8]
   2694c:	add	r4, r3, #7733248	; 0x760000
   26950:	ldr	r0, [fp, #32]
   26954:	add	r1, r1, #12
   26958:	ldr	r3, [fp, #40]	; 0x28
   2695c:	add	r4, r4, #42752	; 0xa700
   26960:	str	r1, [sp, #176]	; 0xb0
   26964:	ldr	r1, [fp, #16]
   26968:	str	r6, [sp, #196]	; 0xc4
   2696c:	ldr	r6, [sp, #32]
   26970:	add	r1, r1, #1
   26974:	str	r5, [sp, #148]	; 0x94
   26978:	mov	r5, #62720	; 0xf500
   2697c:	str	ip, [sp, #188]	; 0xbc
   26980:	movt	r5, #355	; 0x163
   26984:	str	r1, [sp, #184]	; 0xb8
   26988:	mov	r1, #0
   2698c:	str	r2, [sp, #200]	; 0xc8
   26990:	mov	ip, #2
   26994:	str	r6, [sp, #204]	; 0xcc
   26998:	mov	r6, r1
   2699c:	str	lr, [sp, #192]	; 0xc0
   269a0:	movw	r2, #269	; 0x10d
   269a4:	str	r0, [sp, #92]	; 0x5c
   269a8:	str	r1, [sp, #180]	; 0xb4
   269ac:	str	r1, [sp, #208]	; 0xd0
   269b0:	str	r1, [sp, #212]	; 0xd4
   269b4:	str	r1, [sp, #216]	; 0xd8
   269b8:	str	r1, [sp, #220]	; 0xdc
   269bc:	str	r1, [sp, #224]	; 0xe0
   269c0:	str	r1, [sp, #228]	; 0xe4
   269c4:	str	r1, [sp, #232]	; 0xe8
   269c8:	strb	r1, [sp, #236]	; 0xec
   269cc:	strb	r1, [sp, #237]	; 0xed
   269d0:	str	r1, [sp, #240]	; 0xf0
   269d4:	str	r1, [sp, #244]	; 0xf4
   269d8:	str	r1, [sp, #256]	; 0x100
   269dc:	str	r1, [sp, #248]	; 0xf8
   269e0:	str	r1, [sp, #252]	; 0xfc
   269e4:	str	r3, [sp, #264]	; 0x108
   269e8:	ldr	r3, [fp, #32]
   269ec:	str	r1, [sp, #260]	; 0x104
   269f0:	str	ip, [sp, #168]	; 0xa8
   269f4:	str	r2, [sp, #268]	; 0x10c
   269f8:	str	r1, [sp, #276]	; 0x114
   269fc:	str	r3, [sp, #272]	; 0x110
   26a00:	add	r0, sp, #104	; 0x68
   26a04:	add	r3, r4, r6
   26a08:	str	r3, [sp, #104]	; 0x68
   26a0c:	bl	12374 <localtime@plt>
   26a10:	cmp	r0, #0
   26a14:	beq	26a34 <__assert_fail@plt+0x14360>
   26a18:	ldr	r3, [r0, #40]	; 0x28
   26a1c:	cmp	r3, #0
   26a20:	beq	26a34 <__assert_fail@plt+0x14360>
   26a24:	ldr	r2, [r0, #32]
   26a28:	ldr	r1, [sp, #272]	; 0x110
   26a2c:	cmp	r2, r1
   26a30:	bne	27038 <__assert_fail@plt+0x14964>
   26a34:	add	r6, r6, #7733248	; 0x760000
   26a38:	add	r6, r6, #42752	; 0xa700
   26a3c:	cmp	r6, r5
   26a40:	bne	26a00 <__assert_fail@plt+0x1432c>
   26a44:	ldr	r0, [sp, #264]	; 0x108
   26a48:	cmp	r0, #0
   26a4c:	beq	26a70 <__assert_fail@plt+0x1439c>
   26a50:	ldr	r1, [sp, #276]	; 0x114
   26a54:	cmp	r1, #0
   26a58:	beq	26a70 <__assert_fail@plt+0x1439c>
   26a5c:	bl	1205c <strcmp@plt>
   26a60:	cmp	r0, #0
   26a64:	streq	r0, [sp, #276]	; 0x114
   26a68:	mvneq	r3, #0
   26a6c:	streq	r3, [sp, #272]	; 0x110
   26a70:	add	r0, sp, #148	; 0x94
   26a74:	bl	255b0 <__assert_fail@plt+0x12edc>
   26a78:	cmp	r0, #0
   26a7c:	beq	26ae4 <__assert_fail@plt+0x14410>
   26a80:	mov	r4, #0
   26a84:	cmp	sl, #0
   26a88:	beq	26ab4 <__assert_fail@plt+0x143e0>
   26a8c:	cmp	r7, #0
   26a90:	movw	r0, #18176	; 0x4700
   26a94:	beq	27054 <__assert_fail@plt+0x14980>
   26a98:	mov	r1, r7
   26a9c:	movt	r0, #3
   26aa0:	mov	r2, #1
   26aa4:	bl	123ec <setenv@plt>
   26aa8:	rsbs	r0, r0, #1
   26aac:	movcc	r0, #0
   26ab0:	and	r4, r0, r4
   26ab4:	cmp	r7, r9
   26ab8:	moveq	r0, r4
   26abc:	beq	26acc <__assert_fail@plt+0x143f8>
   26ac0:	mov	r0, r7
   26ac4:	bl	120c8 <free@plt>
   26ac8:	mov	r0, r4
   26acc:	ldr	r2, [sp, #500]	; 0x1f4
   26ad0:	ldr	r3, [r8]
   26ad4:	cmp	r2, r3
   26ad8:	bne	27120 <__assert_fail@plt+0x14a4c>
   26adc:	add	sp, sp, #508	; 0x1fc
   26ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ae4:	ldrb	r4, [sp, #236]	; 0xec
   26ae8:	cmp	r4, #0
   26aec:	beq	26bd4 <__assert_fail@plt+0x14500>
   26af0:	add	r3, sp, #200	; 0xc8
   26af4:	ldr	r5, [sp, #36]	; 0x24
   26af8:	mov	r4, #1
   26afc:	ldm	r3, {r0, r1}
   26b00:	stm	r5, {r0, r1}
   26b04:	b	26a84 <__assert_fail@plt+0x143b0>
   26b08:	cmp	fp, #100	; 0x64
   26b0c:	mov	r0, r7
   26b10:	movls	r5, #0
   26b14:	movhi	r5, #1
   26b18:	bl	120c8 <free@plt>
   26b1c:	mov	r0, r9
   26b20:	bl	25424 <__assert_fail@plt+0x12d50>
   26b24:	cmp	r5, #0
   26b28:	addeq	r8, sp, #400	; 0x190
   26b2c:	mov	r7, r0
   26b30:	bne	26bb0 <__assert_fail@plt+0x144dc>
   26b34:	ldrb	r2, [r6, #4]
   26b38:	mov	r0, r8
   26b3c:	ldr	r4, [sp, #24]
   26b40:	cmp	r2, #34	; 0x22
   26b44:	beq	26b70 <__assert_fail@plt+0x1449c>
   26b48:	subs	r3, r2, #92	; 0x5c
   26b4c:	rsbs	r2, r3, #0
   26b50:	adcs	r2, r2, r3
   26b54:	add	r3, r4, r2
   26b58:	ldrb	r2, [r4, r2]
   26b5c:	add	r4, r3, #1
   26b60:	strb	r2, [r0], #1
   26b64:	ldrb	r2, [r3, #1]
   26b68:	cmp	r2, #34	; 0x22
   26b6c:	bne	26b48 <__assert_fail@plt+0x14474>
   26b70:	mov	r1, #0
   26b74:	mov	r2, #1
   26b78:	strb	r1, [r0]
   26b7c:	movw	r0, #18176	; 0x4700
   26b80:	mov	r1, r8
   26b84:	movt	r0, #3
   26b88:	bl	123ec <setenv@plt>
   26b8c:	cmp	r5, #0
   26b90:	mov	r2, r0
   26b94:	bne	26bc0 <__assert_fail@plt+0x144ec>
   26b98:	cmp	r2, #0
   26b9c:	bne	270cc <__assert_fail@plt+0x149f8>
   26ba0:	add	r0, r4, #1
   26ba4:	mov	sl, #1
   26ba8:	mov	r1, r0
   26bac:	b	268c0 <__assert_fail@plt+0x141ec>
   26bb0:	mov	r0, fp
   26bb4:	bl	28e14 <__assert_fail@plt+0x16740>
   26bb8:	mov	r8, r0
   26bbc:	b	26b34 <__assert_fail@plt+0x14460>
   26bc0:	mov	r0, r8
   26bc4:	str	r2, [sp, #20]
   26bc8:	bl	120c8 <free@plt>
   26bcc:	ldr	r2, [sp, #20]
   26bd0:	b	26b98 <__assert_fail@plt+0x144c4>
   26bd4:	ldr	r3, [sp, #256]	; 0x100
   26bd8:	ldr	ip, [sp, #240]	; 0xf0
   26bdc:	ldr	r0, [sp, #244]	; 0xf4
   26be0:	orr	r2, ip, r3
   26be4:	ldr	r6, [sp, #252]	; 0xfc
   26be8:	ldr	r1, [sp, #248]	; 0xf8
   26bec:	orr	r2, r2, r0
   26bf0:	ldr	r5, [sp, #260]	; 0x104
   26bf4:	orr	r6, r2, r6
   26bf8:	add	r5, r1, r5
   26bfc:	orr	r5, r6, r5
   26c00:	cmp	r5, #1
   26c04:	bhi	26a84 <__assert_fail@plt+0x143b0>
   26c08:	ldr	r4, [sp, #176]	; 0xb0
   26c0c:	ldr	r5, [sp, #180]	; 0xb4
   26c10:	cmp	r4, #0
   26c14:	rsblt	r4, r4, #0
   26c18:	blt	26c34 <__assert_fail@plt+0x14560>
   26c1c:	cmp	r5, #2
   26c20:	bne	26c34 <__assert_fail@plt+0x14560>
   26c24:	cmp	r4, #68	; 0x44
   26c28:	movw	r5, #1900	; 0x76c
   26c2c:	movle	r5, #2000	; 0x7d0
   26c30:	add	r4, r4, r5
   26c34:	ldr	r5, [sp, #188]	; 0xbc
   26c38:	cmp	r3, #0
   26c3c:	ldr	r3, [sp, #184]	; 0xb8
   26c40:	sub	r4, r4, #1888	; 0x760
   26c44:	sub	r4, r4, #12
   26c48:	str	r4, [sp, #80]	; 0x50
   26c4c:	sub	r3, r3, #1
   26c50:	str	r5, [sp, #72]	; 0x48
   26c54:	str	r3, [sp, #76]	; 0x4c
   26c58:	bne	27078 <__assert_fail@plt+0x149a4>
   26c5c:	ldrb	r3, [sp, #237]	; 0xed
   26c60:	cmp	r3, #0
   26c64:	beq	26c78 <__assert_fail@plt+0x145a4>
   26c68:	cmp	ip, #0
   26c6c:	bne	26c78 <__assert_fail@plt+0x145a4>
   26c70:	cmp	r0, #0
   26c74:	beq	27078 <__assert_fail@plt+0x149a4>
   26c78:	mov	r3, #0
   26c7c:	str	r3, [sp, #60]	; 0x3c
   26c80:	str	r3, [sp, #64]	; 0x40
   26c84:	str	r3, [sp, #68]	; 0x44
   26c88:	str	r3, [sp, #204]	; 0xcc
   26c8c:	cmp	r2, #0
   26c90:	add	lr, sp, #60	; 0x3c
   26c94:	add	ip, sp, #104	; 0x68
   26c98:	mvnne	r3, #0
   26c9c:	strne	r3, [sp, #92]	; 0x5c
   26ca0:	cmp	r1, #0
   26ca4:	ldrne	r3, [sp, #160]	; 0xa0
   26ca8:	strne	r3, [sp, #92]	; 0x5c
   26cac:	ldm	lr!, {r0, r1, r2, r3}
   26cb0:	stmia	ip!, {r0, r1, r2, r3}
   26cb4:	ldm	lr!, {r0, r1, r2, r3}
   26cb8:	stmia	ip!, {r0, r1, r2, r3}
   26cbc:	ldm	lr, {r0, r1, r2}
   26cc0:	stm	ip, {r0, r1, r2}
   26cc4:	add	r0, sp, #60	; 0x3c
   26cc8:	bl	12080 <mktime@plt>
   26ccc:	add	r1, sp, #60	; 0x3c
   26cd0:	mov	r4, r0
   26cd4:	add	r0, sp, #104	; 0x68
   26cd8:	mov	r2, r4
   26cdc:	bl	25388 <__assert_fail@plt+0x12cb4>
   26ce0:	cmp	r0, #0
   26ce4:	bne	26db8 <__assert_fail@plt+0x146e4>
   26ce8:	ldr	r4, [sp, #260]	; 0x104
   26cec:	cmp	r4, #0
   26cf0:	beq	26a84 <__assert_fail@plt+0x143b0>
   26cf4:	ldr	r5, [sp, #164]	; 0xa4
   26cf8:	movw	r2, #34953	; 0x8889
   26cfc:	movt	r2, #34952	; 0x8888
   26d00:	eor	r3, r5, r5, asr #31
   26d04:	sub	r3, r3, r5, asr #31
   26d08:	cmp	sl, #0
   26d0c:	smull	r6, r2, r2, r3
   26d10:	asr	r1, r3, #31
   26d14:	add	r4, r2, r3
   26d18:	rsb	r4, r1, r4, asr #5
   26d1c:	rsb	r6, r4, r4, lsl #4
   26d20:	sub	r6, r3, r6, lsl #2
   26d24:	beq	27110 <__assert_fail@plt+0x14a3c>
   26d28:	movw	r2, #13924	; 0x3664
   26d2c:	movt	r2, #3
   26d30:	add	r2, r2, r5, lsr #31
   26d34:	mov	r1, #1
   26d38:	str	r2, [sp]
   26d3c:	add	r0, sp, #400	; 0x190
   26d40:	mov	r2, #19
   26d44:	stmib	sp, {r4, r6}
   26d48:	movw	r3, #18232	; 0x4738
   26d4c:	movt	r3, #3
   26d50:	bl	12440 <__sprintf_chk@plt>
   26d54:	add	r1, sp, #400	; 0x190
   26d58:	movw	r0, #18176	; 0x4700
   26d5c:	mov	r2, #1
   26d60:	movt	r0, #3
   26d64:	bl	123ec <setenv@plt>
   26d68:	cmp	r0, #0
   26d6c:	bne	26a80 <__assert_fail@plt+0x143ac>
   26d70:	add	lr, sp, #104	; 0x68
   26d74:	add	ip, sp, #60	; 0x3c
   26d78:	mov	sl, #1
   26d7c:	ldm	lr!, {r0, r1, r2, r3}
   26d80:	stmia	ip!, {r0, r1, r2, r3}
   26d84:	ldm	lr!, {r0, r1, r2, r3}
   26d88:	stmia	ip!, {r0, r1, r2, r3}
   26d8c:	ldm	lr, {r0, r1, r2}
   26d90:	stm	ip, {r0, r1, r2}
   26d94:	add	r0, sp, #60	; 0x3c
   26d98:	bl	12080 <mktime@plt>
   26d9c:	add	r1, sp, #60	; 0x3c
   26da0:	mov	r4, r0
   26da4:	add	r0, sp, #104	; 0x68
   26da8:	mov	r2, r4
   26dac:	bl	25388 <__assert_fail@plt+0x12cb4>
   26db0:	cmp	r0, #0
   26db4:	beq	26a80 <__assert_fail@plt+0x143ac>
   26db8:	ldr	r3, [sp, #244]	; 0xf4
   26dbc:	cmp	r3, #0
   26dc0:	beq	26e48 <__assert_fail@plt+0x14774>
   26dc4:	ldr	r1, [sp, #240]	; 0xf0
   26dc8:	cmp	r1, #0
   26dcc:	bne	26e48 <__assert_fail@plt+0x14774>
   26dd0:	ldr	r4, [sp, #156]	; 0x9c
   26dd4:	movw	r3, #9363	; 0x2493
   26dd8:	ldr	ip, [sp, #84]	; 0x54
   26ddc:	movt	r3, #37449	; 0x9249
   26de0:	ldr	r0, [sp, #152]	; 0x98
   26de4:	rsb	r2, ip, r4
   26de8:	ldr	lr, [sp, #72]	; 0x48
   26dec:	add	r2, r2, #7
   26df0:	cmp	r0, #0
   26df4:	smull	r5, r3, r3, r2
   26df8:	asr	r5, r2, #31
   26dfc:	add	r3, r3, r2
   26e00:	rsb	r3, r5, r3, asr #2
   26e04:	rsb	r3, r3, r3, lsl #3
   26e08:	rsb	r3, r3, r2
   26e0c:	ble	26e18 <__assert_fail@plt+0x14744>
   26e10:	subs	r1, r4, ip
   26e14:	movne	r1, #1
   26e18:	rsb	r2, r1, r0
   26e1c:	add	r0, sp, #60	; 0x3c
   26e20:	mvn	r1, #0
   26e24:	str	r1, [sp, #92]	; 0x5c
   26e28:	rsb	r2, r2, r2, lsl #3
   26e2c:	add	r3, r3, r2
   26e30:	add	lr, lr, r3
   26e34:	str	lr, [sp, #72]	; 0x48
   26e38:	bl	12080 <mktime@plt>
   26e3c:	cmn	r0, #1
   26e40:	mov	r4, r0
   26e44:	beq	26a80 <__assert_fail@plt+0x143ac>
   26e48:	ldr	r3, [sp, #208]	; 0xd0
   26e4c:	ldr	r1, [sp, #212]	; 0xd4
   26e50:	ldr	fp, [sp, #216]	; 0xd8
   26e54:	orr	r2, r1, r3
   26e58:	orrs	r2, r2, fp
   26e5c:	beq	26ef4 <__assert_fail@plt+0x14820>
   26e60:	ldr	r4, [sp, #76]	; 0x4c
   26e64:	lsr	r5, fp, #31
   26e68:	ldr	ip, [sp, #72]	; 0x48
   26e6c:	lsr	r6, r1, #31
   26e70:	ldr	r0, [sp, #80]	; 0x50
   26e74:	add	r1, r1, r4
   26e78:	add	r2, fp, ip
   26e7c:	cmp	r4, r1
   26e80:	movle	r4, r6
   26e84:	eorgt	r4, r6, #1
   26e88:	cmp	ip, r2
   26e8c:	movle	ip, r5
   26e90:	eorgt	ip, r5, #1
   26e94:	add	fp, r3, r0
   26e98:	lsr	r3, r3, #31
   26e9c:	orr	ip, r4, ip
   26ea0:	cmp	r0, fp
   26ea4:	movle	r0, r3
   26ea8:	eorgt	r0, r3, #1
   26eac:	orrs	r5, ip, r0
   26eb0:	bne	26a80 <__assert_fail@plt+0x143ac>
   26eb4:	ldr	r4, [sp, #112]	; 0x70
   26eb8:	add	r0, sp, #60	; 0x3c
   26ebc:	ldr	lr, [sp, #108]	; 0x6c
   26ec0:	ldr	ip, [sp, #104]	; 0x68
   26ec4:	ldr	r3, [sp, #136]	; 0x88
   26ec8:	str	r4, [sp, #68]	; 0x44
   26ecc:	str	fp, [sp, #80]	; 0x50
   26ed0:	str	r1, [sp, #76]	; 0x4c
   26ed4:	str	r2, [sp, #72]	; 0x48
   26ed8:	str	lr, [sp, #64]	; 0x40
   26edc:	str	ip, [sp, #60]	; 0x3c
   26ee0:	str	r3, [sp, #92]	; 0x5c
   26ee4:	bl	12080 <mktime@plt>
   26ee8:	cmn	r0, #1
   26eec:	mov	r4, r0
   26ef0:	beq	26a80 <__assert_fail@plt+0x143ac>
   26ef4:	ldr	r3, [sp, #260]	; 0x104
   26ef8:	cmp	r3, #0
   26efc:	beq	26f30 <__assert_fail@plt+0x1485c>
   26f00:	ldr	r3, [sp, #164]	; 0xa4
   26f04:	ldr	r2, [sp, #96]	; 0x60
   26f08:	rsb	r3, r3, r3, lsl #4
   26f0c:	rsb	r2, r2, r3, lsl #2
   26f10:	rsb	r3, r2, r4
   26f14:	lsr	r2, r2, #31
   26f18:	cmp	r4, r3
   26f1c:	movge	r4, r2
   26f20:	eorlt	r4, r2, #1
   26f24:	cmp	r4, #0
   26f28:	bne	26a80 <__assert_fail@plt+0x143ac>
   26f2c:	mov	r4, r3
   26f30:	ldr	r3, [sp, #232]	; 0xe8
   26f34:	movw	r1, #12193	; 0x2fa1
   26f38:	ldr	fp, [sp, #204]	; 0xcc
   26f3c:	movt	r1, #17592	; 0x44b8
   26f40:	mov	r5, #51712	; 0xca00
   26f44:	movt	r5, #15258	; 0x3b9a
   26f48:	add	fp, fp, r3
   26f4c:	ldr	r0, [sp, #220]	; 0xdc
   26f50:	mov	ip, #3600	; 0xe10
   26f54:	mov	r3, #51712	; 0xca00
   26f58:	smull	r2, r6, r1, fp
   26f5c:	asr	r2, fp, #31
   26f60:	mul	ip, ip, r0
   26f64:	movt	r3, #15258	; 0x3b9a
   26f68:	ldr	r0, [sp, #224]	; 0xe0
   26f6c:	rsb	r2, r2, r6, asr #28
   26f70:	rsb	r0, r0, r0, lsl #4
   26f74:	mls	r2, r5, r2, fp
   26f78:	lsl	r0, r0, #2
   26f7c:	add	r3, r2, r3
   26f80:	smull	r2, r6, r1, r3
   26f84:	asr	r2, r3, #31
   26f88:	str	r2, [sp, #28]
   26f8c:	add	r2, r4, ip
   26f90:	lsr	ip, ip, #31
   26f94:	cmp	r4, r2
   26f98:	eorgt	ip, ip, #1
   26f9c:	str	ip, [sp, #32]
   26fa0:	add	ip, r2, r0
   26fa4:	lsr	r0, r0, #31
   26fa8:	cmp	ip, r2
   26fac:	movge	r4, r0
   26fb0:	eorlt	r4, r0, #1
   26fb4:	ldr	r0, [sp, #28]
   26fb8:	rsb	r2, r0, r6, asr #28
   26fbc:	ldr	r6, [sp, #32]
   26fc0:	mls	r2, r5, r2, r3
   26fc4:	orr	r4, r4, r6
   26fc8:	str	r4, [sp, #24]
   26fcc:	ldr	r4, [sp, #228]	; 0xe4
   26fd0:	rsb	fp, r2, fp
   26fd4:	ldr	r5, [sp, #24]
   26fd8:	add	r0, ip, r4
   26fdc:	lsr	r6, r4, #31
   26fe0:	cmp	r0, ip
   26fe4:	movge	ip, r6
   26fe8:	eorlt	ip, r6, #1
   26fec:	smull	r6, r1, r1, fp
   26ff0:	asr	fp, fp, #31
   26ff4:	orr	r4, r5, ip
   26ff8:	rsb	r1, fp, r1, asr #28
   26ffc:	add	r3, r0, r1
   27000:	lsr	r1, r1, #31
   27004:	cmp	r3, r0
   27008:	movge	r0, r1
   2700c:	eorlt	r0, r1, #1
   27010:	orrs	r0, r4, r0
   27014:	bne	26a80 <__assert_fail@plt+0x143ac>
   27018:	ldr	r4, [sp, #36]	; 0x24
   2701c:	ldr	r5, [sp, #36]	; 0x24
   27020:	str	r3, [r4]
   27024:	mov	r4, #1
   27028:	str	r2, [r5, #4]
   2702c:	b	26a84 <__assert_fail@plt+0x143b0>
   27030:	mov	r0, fp
   27034:	b	26acc <__assert_fail@plt+0x143f8>
   27038:	str	r3, [sp, #276]	; 0x114
   2703c:	movw	r1, #269	; 0x10d
   27040:	mov	r3, #0
   27044:	str	r2, [sp, #284]	; 0x11c
   27048:	str	r1, [sp, #280]	; 0x118
   2704c:	str	r3, [sp, #288]	; 0x120
   27050:	b	26a44 <__assert_fail@plt+0x14370>
   27054:	movt	r0, #3
   27058:	bl	12644 <unsetenv@plt>
   2705c:	rsbs	r0, r0, #1
   27060:	movcc	r0, #0
   27064:	b	26ab0 <__assert_fail@plt+0x143dc>
   27068:	add	r0, sp, #52	; 0x34
   2706c:	bl	2d3e8 <fts_children@@Base+0x101c>
   27070:	add	r2, sp, #52	; 0x34
   27074:	b	2680c <__assert_fail@plt+0x14138>
   27078:	ldr	r0, [sp, #168]	; 0xa8
   2707c:	ldr	r3, [sp, #192]	; 0xc0
   27080:	cmp	r0, #0
   27084:	beq	270f8 <__assert_fail@plt+0x14a24>
   27088:	cmp	r0, #1
   2708c:	bne	270d4 <__assert_fail@plt+0x14a00>
   27090:	sub	r0, r3, #1
   27094:	cmp	r0, #10
   27098:	addls	r0, r3, #12
   2709c:	bls	270e0 <__assert_fail@plt+0x14a0c>
   270a0:	cmp	r3, #12
   270a4:	beq	270dc <__assert_fail@plt+0x14a08>
   270a8:	mvn	r3, #0
   270ac:	mov	r4, #0
   270b0:	str	r3, [sp, #68]	; 0x44
   270b4:	b	26a84 <__assert_fail@plt+0x143b0>
   270b8:	mov	r7, r2
   270bc:	add	r9, sp, #300	; 0x12c
   270c0:	mov	r2, r4
   270c4:	mov	sl, r7
   270c8:	b	26920 <__assert_fail@plt+0x1424c>
   270cc:	ldr	r8, [sp, #40]	; 0x28
   270d0:	b	26a80 <__assert_fail@plt+0x143ac>
   270d4:	cmp	r3, #23
   270d8:	bhi	270a8 <__assert_fail@plt+0x149d4>
   270dc:	mov	r0, r3
   270e0:	ldr	ip, [sp, #196]	; 0xc4
   270e4:	ldr	r3, [sp, #200]	; 0xc8
   270e8:	str	r0, [sp, #68]	; 0x44
   270ec:	str	ip, [sp, #64]	; 0x40
   270f0:	str	r3, [sp, #60]	; 0x3c
   270f4:	b	26c8c <__assert_fail@plt+0x145b8>
   270f8:	sub	ip, r3, #1
   270fc:	cmp	ip, #10
   27100:	bls	270dc <__assert_fail@plt+0x14a08>
   27104:	cmp	r3, #12
   27108:	bne	270a8 <__assert_fail@plt+0x149d4>
   2710c:	b	270e0 <__assert_fail@plt+0x14a0c>
   27110:	mov	r0, r9
   27114:	bl	25424 <__assert_fail@plt+0x12d50>
   27118:	mov	r7, r0
   2711c:	b	26d28 <__assert_fail@plt+0x14654>
   27120:	bl	12188 <__stack_chk_fail@plt>
   27124:	push	{r4, r5, r6, lr}
   27128:	subs	r4, r0, #0
   2712c:	beq	271b4 <__assert_fail@plt+0x14ae0>
   27130:	mov	r1, #47	; 0x2f
   27134:	bl	1256c <strrchr@plt>
   27138:	subs	r5, r0, #0
   2713c:	beq	27198 <__assert_fail@plt+0x14ac4>
   27140:	add	r6, r5, #1
   27144:	rsb	r3, r4, r6
   27148:	cmp	r3, #6
   2714c:	ble	27198 <__assert_fail@plt+0x14ac4>
   27150:	movw	r1, #19040	; 0x4a60
   27154:	sub	r0, r5, #6
   27158:	movt	r1, #3
   2715c:	mov	r2, #7
   27160:	bl	1265c <strncmp@plt>
   27164:	cmp	r0, #0
   27168:	bne	27198 <__assert_fail@plt+0x14ac4>
   2716c:	movw	r1, #19048	; 0x4a68
   27170:	mov	r0, r6
   27174:	movt	r1, #3
   27178:	mov	r2, #3
   2717c:	bl	1265c <strncmp@plt>
   27180:	cmp	r0, #0
   27184:	addeq	r4, r5, #4
   27188:	movweq	r3, #26000	; 0x6590
   2718c:	movteq	r3, #4
   27190:	movne	r4, r6
   27194:	streq	r4, [r3]
   27198:	movw	r2, #27980	; 0x6d4c
   2719c:	movw	r3, #26012	; 0x659c
   271a0:	movt	r2, #4
   271a4:	movt	r3, #4
   271a8:	str	r4, [r2]
   271ac:	str	r4, [r3]
   271b0:	pop	{r4, r5, r6, pc}
   271b4:	movw	r3, #26016	; 0x65a0
   271b8:	movt	r3, #4
   271bc:	movw	r0, #18984	; 0x4a28
   271c0:	mov	r1, #1
   271c4:	ldr	r3, [r3]
   271c8:	mov	r2, #55	; 0x37
   271cc:	movt	r0, #3
   271d0:	bl	12248 <fwrite@plt>
   271d4:	bl	12674 <abort@plt>
   271d8:	push	{r3, lr}
   271dc:	mov	r3, r0
   271e0:	mov	r2, #0
   271e4:	cmp	r1, #8
   271e8:	str	r2, [r3], #4
   271ec:	add	r3, r3, #4
   271f0:	str	r2, [r0, #4]
   271f4:	str	r2, [r3], #4
   271f8:	str	r2, [r3], #4
   271fc:	str	r2, [r3], #4
   27200:	str	r2, [r3], #4
   27204:	str	r2, [r3], #4
   27208:	str	r2, [r3], #4
   2720c:	str	r2, [r3], #4
   27210:	str	r2, [r3], #4
   27214:	str	r2, [r3], #4
   27218:	str	r2, [r3]
   2721c:	beq	27228 <__assert_fail@plt+0x14b54>
   27220:	str	r1, [r0]
   27224:	pop	{r3, pc}
   27228:	bl	12674 <abort@plt>
   2722c:	push	{r4, r5, r6, lr}
   27230:	mov	r4, r0
   27234:	mov	r6, r1
   27238:	mov	r0, #0
   2723c:	mov	r1, r4
   27240:	mov	r2, #5
   27244:	bl	1217c <dcgettext@plt>
   27248:	cmp	r0, r4
   2724c:	mov	r5, r0
   27250:	beq	27258 <__assert_fail@plt+0x14b84>
   27254:	pop	{r4, r5, r6, pc}
   27258:	bl	2d514 <fts_children@@Base+0x1148>
   2725c:	ldrb	r3, [r0]
   27260:	bic	r3, r3, #32
   27264:	cmp	r3, #85	; 0x55
   27268:	bne	272f0 <__assert_fail@plt+0x14c1c>
   2726c:	ldrb	r3, [r0, #1]
   27270:	bic	r3, r3, #32
   27274:	cmp	r3, #84	; 0x54
   27278:	bne	272d4 <__assert_fail@plt+0x14c00>
   2727c:	ldrb	r3, [r0, #2]
   27280:	bic	r3, r3, #32
   27284:	cmp	r3, #70	; 0x46
   27288:	bne	272d4 <__assert_fail@plt+0x14c00>
   2728c:	ldrb	r3, [r0, #3]
   27290:	cmp	r3, #45	; 0x2d
   27294:	bne	272d4 <__assert_fail@plt+0x14c00>
   27298:	ldrb	r3, [r0, #4]
   2729c:	cmp	r3, #56	; 0x38
   272a0:	bne	272d4 <__assert_fail@plt+0x14c00>
   272a4:	ldrb	r3, [r0, #5]
   272a8:	cmp	r3, #0
   272ac:	bne	272d4 <__assert_fail@plt+0x14c00>
   272b0:	ldrb	r0, [r5]
   272b4:	movw	r2, #19120	; 0x4ab0
   272b8:	movw	r3, #19136	; 0x4ac0
   272bc:	movt	r2, #3
   272c0:	cmp	r0, #96	; 0x60
   272c4:	movt	r3, #3
   272c8:	movne	r0, r2
   272cc:	moveq	r0, r3
   272d0:	pop	{r4, r5, r6, pc}
   272d4:	cmp	r6, #7
   272d8:	movw	r3, #19128	; 0x4ab8
   272dc:	movt	r3, #3
   272e0:	movw	r0, #64088	; 0xfa58
   272e4:	movt	r0, #2
   272e8:	moveq	r0, r3
   272ec:	pop	{r4, r5, r6, pc}
   272f0:	cmp	r3, #71	; 0x47
   272f4:	bne	272d4 <__assert_fail@plt+0x14c00>
   272f8:	ldrb	r3, [r0, #1]
   272fc:	bic	r3, r3, #32
   27300:	cmp	r3, #66	; 0x42
   27304:	bne	272d4 <__assert_fail@plt+0x14c00>
   27308:	ldrb	r3, [r0, #2]
   2730c:	cmp	r3, #49	; 0x31
   27310:	bne	272d4 <__assert_fail@plt+0x14c00>
   27314:	ldrb	r3, [r0, #3]
   27318:	cmp	r3, #56	; 0x38
   2731c:	bne	272d4 <__assert_fail@plt+0x14c00>
   27320:	ldrb	r3, [r0, #4]
   27324:	cmp	r3, #48	; 0x30
   27328:	bne	272d4 <__assert_fail@plt+0x14c00>
   2732c:	ldrb	r3, [r0, #5]
   27330:	cmp	r3, #51	; 0x33
   27334:	bne	272d4 <__assert_fail@plt+0x14c00>
   27338:	ldrb	r3, [r0, #6]
   2733c:	cmp	r3, #48	; 0x30
   27340:	bne	272d4 <__assert_fail@plt+0x14c00>
   27344:	ldrb	r3, [r0, #7]
   27348:	cmp	r3, #0
   2734c:	bne	272d4 <__assert_fail@plt+0x14c00>
   27350:	ldrb	r0, [r5]
   27354:	movw	r2, #19124	; 0x4ab4
   27358:	movw	r3, #19132	; 0x4abc
   2735c:	movt	r2, #3
   27360:	cmp	r0, #96	; 0x60
   27364:	movt	r3, #3
   27368:	movne	r0, r2
   2736c:	moveq	r0, r3
   27370:	pop	{r4, r5, r6, pc}
   27374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27378:	movw	ip, #26008	; 0x6598
   2737c:	sub	sp, sp, #124	; 0x7c
   27380:	movt	ip, #4
   27384:	mov	fp, r1
   27388:	mov	sl, r3
   2738c:	str	ip, [sp, #60]	; 0x3c
   27390:	str	r0, [sp, #44]	; 0x2c
   27394:	ldr	r0, [ip]
   27398:	ldr	ip, [sp, #168]	; 0xa8
   2739c:	str	r2, [sp, #40]	; 0x28
   273a0:	str	r0, [sp, #116]	; 0x74
   273a4:	str	ip, [sp, #52]	; 0x34
   273a8:	ldr	ip, [sp, #164]	; 0xa4
   273ac:	ubfx	ip, ip, #1, #1
   273b0:	str	ip, [sp, #36]	; 0x24
   273b4:	ldr	ip, [sp, #172]	; 0xac
   273b8:	str	ip, [sp, #76]	; 0x4c
   273bc:	ldr	ip, [sp, #176]	; 0xb0
   273c0:	str	ip, [sp, #72]	; 0x48
   273c4:	bl	12284 <__ctype_get_mb_cur_max@plt>
   273c8:	ldr	ip, [sp, #160]	; 0xa0
   273cc:	str	r0, [sp, #68]	; 0x44
   273d0:	cmp	ip, #8
   273d4:	ldrls	pc, [pc, ip, lsl #2]
   273d8:	b	27f0c <__assert_fail@plt+0x15838>
   273dc:	andeq	r7, r2, r0, lsl #8
   273e0:	andeq	r7, r2, r4, ror #24
   273e4:	muleq	r2, r8, ip
   273e8:	andeq	r7, r2, ip, lsr fp
   273ec:	andeq	r7, r2, ip, ror fp
   273f0:	andeq	r7, r2, ip, lsr #23
   273f4:	ldrdeq	r7, [r2], -r0
   273f8:	ldrdeq	r7, [r2], -r0
   273fc:	ldrdeq	r7, [r2], -r0
   27400:	mov	ip, #0
   27404:	str	ip, [sp, #36]	; 0x24
   27408:	mov	r4, ip
   2740c:	str	ip, [sp, #28]
   27410:	str	ip, [sp, #32]
   27414:	str	ip, [sp, #56]	; 0x38
   27418:	ldr	ip, [sp, #36]	; 0x24
   2741c:	mov	r9, #0
   27420:	ldr	r0, [sp, #36]	; 0x24
   27424:	eor	r2, ip, #1
   27428:	ldr	ip, [sp, #28]
   2742c:	eor	r3, ip, #1
   27430:	and	ip, ip, r0
   27434:	and	r3, r2, r3
   27438:	str	ip, [sp, #80]	; 0x50
   2743c:	str	r3, [sp, #48]	; 0x30
   27440:	cmn	sl, #1
   27444:	beq	277c4 <__assert_fail@plt+0x150f0>
   27448:	subs	r3, r9, sl
   2744c:	movne	r3, #1
   27450:	cmp	r3, #0
   27454:	beq	277dc <__assert_fail@plt+0x15108>
   27458:	ldr	ip, [sp, #32]
   2745c:	adds	r8, ip, #0
   27460:	ldr	ip, [sp, #28]
   27464:	movne	r8, #1
   27468:	ands	r7, r8, ip
   2746c:	bne	27cdc <__assert_fail@plt+0x15608>
   27470:	ldr	ip, [sp, #40]	; 0x28
   27474:	add	r6, ip, r9
   27478:	ldrb	r5, [r6]
   2747c:	cmp	r5, #126	; 0x7e
   27480:	ldrls	pc, [pc, r5, lsl #2]
   27484:	b	27a50 <__assert_fail@plt+0x1537c>
   27488:	andeq	r7, r2, ip, asr r9
   2748c:	andeq	r7, r2, r0, asr sl
   27490:	andeq	r7, r2, r0, asr sl
   27494:	andeq	r7, r2, r0, asr sl
   27498:	andeq	r7, r2, r0, asr sl
   2749c:	andeq	r7, r2, r0, asr sl
   274a0:	andeq	r7, r2, r0, asr sl
   274a4:	andeq	r7, r2, r4, asr #18
   274a8:	andeq	r7, r2, ip, lsr #18
   274ac:	andeq	r7, r2, r4, asr r9
   274b0:	andeq	r7, r2, ip, asr #18
   274b4:	andeq	r7, r2, ip, lsr r9
   274b8:	andeq	r7, r2, r4, lsr r9
   274bc:	strdeq	r7, [r2], -r8
   274c0:	andeq	r7, r2, r0, asr sl
   274c4:	andeq	r7, r2, r0, asr sl
   274c8:	andeq	r7, r2, r0, asr sl
   274cc:	andeq	r7, r2, r0, asr sl
   274d0:	andeq	r7, r2, r0, asr sl
   274d4:	andeq	r7, r2, r0, asr sl
   274d8:	andeq	r7, r2, r0, asr sl
   274dc:	andeq	r7, r2, r0, asr sl
   274e0:	andeq	r7, r2, r0, asr sl
   274e4:	andeq	r7, r2, r0, asr sl
   274e8:	andeq	r7, r2, r0, asr sl
   274ec:	andeq	r7, r2, r0, asr sl
   274f0:	andeq	r7, r2, r0, asr sl
   274f4:	andeq	r7, r2, r0, asr sl
   274f8:	andeq	r7, r2, r0, asr sl
   274fc:	andeq	r7, r2, r0, asr sl
   27500:	andeq	r7, r2, r0, asr sl
   27504:	andeq	r7, r2, r0, asr sl
   27508:	andeq	r7, r2, r0, lsl #17
   2750c:	andeq	r7, r2, r0, lsl #17
   27510:	andeq	r7, r2, r0, lsl #17
   27514:	andeq	r7, r2, r8, ror r8
   27518:	andeq	r7, r2, r0, lsl #17
   2751c:	andeq	r7, r2, r0, asr r7
   27520:	andeq	r7, r2, r0, lsl #17
   27524:	strdeq	r7, [r2], -r8
   27528:	andeq	r7, r2, r0, lsl #17
   2752c:	andeq	r7, r2, r0, lsl #17
   27530:	andeq	r7, r2, r0, lsl #17
   27534:	andeq	r7, r2, r0, asr r7
   27538:	andeq	r7, r2, r0, asr r7
   2753c:	andeq	r7, r2, r0, asr r7
   27540:	andeq	r7, r2, r0, asr r7
   27544:	andeq	r7, r2, r0, asr r7
   27548:	andeq	r7, r2, r0, asr r7
   2754c:	andeq	r7, r2, r0, asr r7
   27550:	andeq	r7, r2, r0, asr r7
   27554:	andeq	r7, r2, r0, asr r7
   27558:	andeq	r7, r2, r0, asr r7
   2755c:	andeq	r7, r2, r0, asr r7
   27560:	andeq	r7, r2, r0, asr r7
   27564:	andeq	r7, r2, r0, asr r7
   27568:	andeq	r7, r2, r0, asr r7
   2756c:	andeq	r7, r2, r0, asr r7
   27570:	andeq	r7, r2, r0, asr r7
   27574:	andeq	r7, r2, r0, lsl #17
   27578:	andeq	r7, r2, r0, lsl #17
   2757c:	andeq	r7, r2, r0, lsl #17
   27580:	andeq	r7, r2, r0, lsl #17
   27584:	andeq	r7, r2, r4, lsl #13
   27588:	andeq	r7, r2, r0, asr sl
   2758c:	andeq	r7, r2, r0, asr r7
   27590:	andeq	r7, r2, r0, asr r7
   27594:	andeq	r7, r2, r0, asr r7
   27598:	andeq	r7, r2, r0, asr r7
   2759c:	andeq	r7, r2, r0, asr r7
   275a0:	andeq	r7, r2, r0, asr r7
   275a4:	andeq	r7, r2, r0, asr r7
   275a8:	andeq	r7, r2, r0, asr r7
   275ac:	andeq	r7, r2, r0, asr r7
   275b0:	andeq	r7, r2, r0, asr r7
   275b4:	andeq	r7, r2, r0, asr r7
   275b8:	andeq	r7, r2, r0, asr r7
   275bc:	andeq	r7, r2, r0, asr r7
   275c0:	andeq	r7, r2, r0, asr r7
   275c4:	andeq	r7, r2, r0, asr r7
   275c8:	andeq	r7, r2, r0, asr r7
   275cc:	andeq	r7, r2, r0, asr r7
   275d0:	andeq	r7, r2, r0, asr r7
   275d4:	andeq	r7, r2, r0, asr r7
   275d8:	andeq	r7, r2, r0, asr r7
   275dc:	andeq	r7, r2, r0, asr r7
   275e0:	andeq	r7, r2, r0, asr r7
   275e4:	andeq	r7, r2, r0, asr r7
   275e8:	andeq	r7, r2, r0, asr r7
   275ec:	andeq	r7, r2, r0, asr r7
   275f0:	andeq	r7, r2, r0, asr r7
   275f4:	andeq	r7, r2, r0, lsl #17
   275f8:	ldrdeq	r7, [r2], -ip
   275fc:	andeq	r7, r2, r0, asr r7
   27600:	andeq	r7, r2, r0, lsl #17
   27604:	andeq	r7, r2, r0, asr r7
   27608:	andeq	r7, r2, r0, lsl #17
   2760c:	andeq	r7, r2, r0, asr r7
   27610:	andeq	r7, r2, r0, asr r7
   27614:	andeq	r7, r2, r0, asr r7
   27618:	andeq	r7, r2, r0, asr r7
   2761c:	andeq	r7, r2, r0, asr r7
   27620:	andeq	r7, r2, r0, asr r7
   27624:	andeq	r7, r2, r0, asr r7
   27628:	andeq	r7, r2, r0, asr r7
   2762c:	andeq	r7, r2, r0, asr r7
   27630:	andeq	r7, r2, r0, asr r7
   27634:	andeq	r7, r2, r0, asr r7
   27638:	andeq	r7, r2, r0, asr r7
   2763c:	andeq	r7, r2, r0, asr r7
   27640:	andeq	r7, r2, r0, asr r7
   27644:	andeq	r7, r2, r0, asr r7
   27648:	andeq	r7, r2, r0, asr r7
   2764c:	andeq	r7, r2, r0, asr r7
   27650:	andeq	r7, r2, r0, asr r7
   27654:	andeq	r7, r2, r0, asr r7
   27658:	andeq	r7, r2, r0, asr r7
   2765c:	andeq	r7, r2, r0, asr r7
   27660:	andeq	r7, r2, r0, asr r7
   27664:	andeq	r7, r2, r0, asr r7
   27668:	andeq	r7, r2, r0, asr r7
   2766c:	andeq	r7, r2, r0, asr r7
   27670:	andeq	r7, r2, r0, asr r7
   27674:	andeq	r7, r2, r0, ror #16
   27678:	andeq	r7, r2, r0, lsl #17
   2767c:	andeq	r7, r2, r0, ror #16
   27680:	andeq	r7, r2, r8, ror r8
   27684:	ldr	ip, [sp, #160]	; 0xa0
   27688:	cmp	ip, #2
   2768c:	beq	27ee8 <__assert_fail@plt+0x15814>
   27690:	cmp	ip, #3
   27694:	bne	27750 <__assert_fail@plt+0x1507c>
   27698:	ldr	ip, [sp, #164]	; 0xa4
   2769c:	tst	ip, #4
   276a0:	beq	27750 <__assert_fail@plt+0x1507c>
   276a4:	add	r3, r9, #2
   276a8:	cmp	sl, r3
   276ac:	bls	27750 <__assert_fail@plt+0x1507c>
   276b0:	ldrb	r2, [r6, #1]
   276b4:	mov	r1, #1
   276b8:	cmp	r2, #63	; 0x3f
   276bc:	bne	27750 <__assert_fail@plt+0x1507c>
   276c0:	ldr	r0, [sp, #40]	; 0x28
   276c4:	ldrb	ip, [r0, r3]
   276c8:	sub	r0, ip, #33	; 0x21
   276cc:	uxtb	r0, r0
   276d0:	cmp	r0, #29
   276d4:	bhi	27750 <__assert_fail@plt+0x1507c>
   276d8:	lsl	r1, r1, r0
   276dc:	movw	r0, #20929	; 0x51c1
   276e0:	movt	r0, #14336	; 0x3800
   276e4:	and	r0, r1, r0
   276e8:	cmp	r0, #0
   276ec:	beq	27750 <__assert_fail@plt+0x1507c>
   276f0:	ldr	r1, [sp, #36]	; 0x24
   276f4:	cmp	r1, #0
   276f8:	bne	2789c <__assert_fail@plt+0x151c8>
   276fc:	cmp	r4, fp
   27700:	mov	r5, ip
   27704:	mov	r9, r3
   27708:	ldrcc	r0, [sp, #44]	; 0x2c
   2770c:	strbcc	r2, [r0, r4]
   27710:	add	r2, r4, #1
   27714:	cmp	fp, r2
   27718:	ldrhi	r0, [sp, #44]	; 0x2c
   2771c:	movhi	r1, #34	; 0x22
   27720:	strbhi	r1, [r0, r2]
   27724:	add	r2, r4, #2
   27728:	cmp	fp, r2
   2772c:	ldrhi	r0, [sp, #44]	; 0x2c
   27730:	movhi	r1, #34	; 0x22
   27734:	strbhi	r1, [r0, r2]
   27738:	add	r2, r4, #3
   2773c:	cmp	fp, r2
   27740:	add	r4, r4, #4
   27744:	ldrhi	r0, [sp, #44]	; 0x2c
   27748:	movhi	r1, #63	; 0x3f
   2774c:	strbhi	r1, [r0, r2]
   27750:	ldr	ip, [sp, #48]	; 0x30
   27754:	cmp	ip, #0
   27758:	bne	27780 <__assert_fail@plt+0x150ac>
   2775c:	ldr	ip, [sp, #52]	; 0x34
   27760:	cmp	ip, #0
   27764:	beq	27780 <__assert_fail@plt+0x150ac>
   27768:	ubfx	r3, r5, #5, #8
   2776c:	and	r2, r5, #31
   27770:	mov	r1, #1
   27774:	ldr	r3, [ip, r3, lsl #2]
   27778:	ands	r3, r3, r1, lsl r2
   2777c:	bne	27788 <__assert_fail@plt+0x150b4>
   27780:	cmp	r7, #0
   27784:	beq	277a8 <__assert_fail@plt+0x150d4>
   27788:	ldr	ip, [sp, #36]	; 0x24
   2778c:	cmp	ip, #0
   27790:	bne	2789c <__assert_fail@plt+0x151c8>
   27794:	cmp	r4, fp
   27798:	ldrcc	ip, [sp, #44]	; 0x2c
   2779c:	movcc	r3, #92	; 0x5c
   277a0:	strbcc	r3, [ip, r4]
   277a4:	add	r4, r4, #1
   277a8:	add	r9, r9, #1
   277ac:	cmp	r4, fp
   277b0:	ldrcc	ip, [sp, #44]	; 0x2c
   277b4:	strbcc	r5, [ip, r4]
   277b8:	cmn	sl, #1
   277bc:	add	r4, r4, #1
   277c0:	bne	27448 <__assert_fail@plt+0x14d74>
   277c4:	ldr	ip, [sp, #40]	; 0x28
   277c8:	ldrb	r3, [ip, r9]
   277cc:	adds	r3, r3, #0
   277d0:	movne	r3, #1
   277d4:	cmp	r3, #0
   277d8:	bne	27458 <__assert_fail@plt+0x14d84>
   277dc:	ldr	ip, [sp, #160]	; 0xa0
   277e0:	cmp	r4, #0
   277e4:	cmpeq	ip, #2
   277e8:	bne	277f8 <__assert_fail@plt+0x15124>
   277ec:	ldr	ip, [sp, #36]	; 0x24
   277f0:	cmp	ip, #0
   277f4:	bne	2789c <__assert_fail@plt+0x151c8>
   277f8:	ldr	ip, [sp, #36]	; 0x24
   277fc:	eor	r3, ip, #1
   27800:	ldr	ip, [sp, #56]	; 0x38
   27804:	cmp	ip, #0
   27808:	moveq	r3, #0
   2780c:	andne	r3, r3, #1
   27810:	cmp	r3, #0
   27814:	beq	27844 <__assert_fail@plt+0x15170>
   27818:	ldrb	r3, [ip]
   2781c:	cmp	r3, #0
   27820:	beq	27844 <__assert_fail@plt+0x15170>
   27824:	ldr	r1, [sp, #44]	; 0x2c
   27828:	mov	r2, ip
   2782c:	cmp	fp, r4
   27830:	strbhi	r3, [r1, r4]
   27834:	ldrb	r3, [r2, #1]!
   27838:	add	r4, r4, #1
   2783c:	cmp	r3, #0
   27840:	bne	2782c <__assert_fail@plt+0x15158>
   27844:	cmp	r4, fp
   27848:	movcs	r0, r4
   2784c:	ldrcc	ip, [sp, #44]	; 0x2c
   27850:	movcc	r3, #0
   27854:	movcc	r0, r4
   27858:	strbcc	r3, [ip, r4]
   2785c:	b	278dc <__assert_fail@plt+0x15208>
   27860:	cmn	sl, #1
   27864:	beq	27ef8 <__assert_fail@plt+0x15824>
   27868:	subs	r3, sl, #1
   2786c:	movne	r3, #1
   27870:	cmp	r3, #0
   27874:	bne	27750 <__assert_fail@plt+0x1507c>
   27878:	cmp	r9, #0
   2787c:	bne	27750 <__assert_fail@plt+0x1507c>
   27880:	ldr	r3, [sp, #36]	; 0x24
   27884:	ldr	ip, [sp, #160]	; 0xa0
   27888:	cmp	ip, #2
   2788c:	movne	r3, #0
   27890:	andeq	r3, r3, #1
   27894:	cmp	r3, #0
   27898:	beq	27750 <__assert_fail@plt+0x1507c>
   2789c:	ldr	ip, [sp, #164]	; 0xa4
   278a0:	mov	r1, fp
   278a4:	ldr	r0, [sp, #44]	; 0x2c
   278a8:	bic	r3, ip, #2
   278ac:	ldr	ip, [sp, #160]	; 0xa0
   278b0:	str	r3, [sp, #4]
   278b4:	mov	r3, sl
   278b8:	ldr	r2, [sp, #40]	; 0x28
   278bc:	str	ip, [sp]
   278c0:	ldr	ip, [sp, #76]	; 0x4c
   278c4:	str	ip, [sp, #12]
   278c8:	ldr	ip, [sp, #72]	; 0x48
   278cc:	str	ip, [sp, #16]
   278d0:	mov	ip, #0
   278d4:	str	ip, [sp, #8]
   278d8:	bl	27374 <__assert_fail@plt+0x14ca0>
   278dc:	ldr	ip, [sp, #60]	; 0x3c
   278e0:	ldr	r2, [sp, #116]	; 0x74
   278e4:	ldr	r3, [ip]
   278e8:	cmp	r2, r3
   278ec:	bne	27fdc <__assert_fail@plt+0x15908>
   278f0:	add	sp, sp, #124	; 0x7c
   278f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   278f8:	mov	r3, #114	; 0x72
   278fc:	ldr	r2, [sp, #36]	; 0x24
   27900:	ldr	ip, [sp, #160]	; 0xa0
   27904:	cmp	ip, #2
   27908:	movne	r2, #0
   2790c:	andeq	r2, r2, #1
   27910:	cmp	r2, #0
   27914:	bne	2789c <__assert_fail@plt+0x151c8>
   27918:	ldr	ip, [sp, #28]
   2791c:	cmp	ip, #0
   27920:	beq	27750 <__assert_fail@plt+0x1507c>
   27924:	mov	r5, r3
   27928:	b	27788 <__assert_fail@plt+0x150b4>
   2792c:	mov	r3, #98	; 0x62
   27930:	b	27918 <__assert_fail@plt+0x15244>
   27934:	mov	r3, #102	; 0x66
   27938:	b	27918 <__assert_fail@plt+0x15244>
   2793c:	mov	r3, #118	; 0x76
   27940:	b	27918 <__assert_fail@plt+0x15244>
   27944:	mov	r3, #97	; 0x61
   27948:	b	27918 <__assert_fail@plt+0x15244>
   2794c:	mov	r3, #110	; 0x6e
   27950:	b	278fc <__assert_fail@plt+0x15228>
   27954:	mov	r3, #116	; 0x74
   27958:	b	278fc <__assert_fail@plt+0x15228>
   2795c:	ldr	ip, [sp, #28]
   27960:	cmp	ip, #0
   27964:	beq	27ed4 <__assert_fail@plt+0x15800>
   27968:	ldr	ip, [sp, #36]	; 0x24
   2796c:	cmp	ip, #0
   27970:	bne	2789c <__assert_fail@plt+0x151c8>
   27974:	cmp	r4, fp
   27978:	add	r2, r4, #1
   2797c:	ldrcc	ip, [sp, #44]	; 0x2c
   27980:	movcc	r3, #92	; 0x5c
   27984:	strbcc	r3, [ip, r4]
   27988:	add	r3, r9, #1
   2798c:	cmp	sl, r3
   27990:	bls	279d0 <__assert_fail@plt+0x152fc>
   27994:	ldr	ip, [sp, #40]	; 0x28
   27998:	ldrb	r3, [ip, r3]
   2799c:	sub	r3, r3, #48	; 0x30
   279a0:	cmp	r3, #9
   279a4:	bhi	279d0 <__assert_fail@plt+0x152fc>
   279a8:	cmp	fp, r2
   279ac:	ldrhi	ip, [sp, #44]	; 0x2c
   279b0:	movhi	r3, #48	; 0x30
   279b4:	strbhi	r3, [ip, r2]
   279b8:	add	r3, r4, #2
   279bc:	cmp	fp, r3
   279c0:	ldrhi	ip, [sp, #44]	; 0x2c
   279c4:	movhi	r2, #48	; 0x30
   279c8:	strbhi	r2, [ip, r3]
   279cc:	add	r2, r4, #3
   279d0:	mov	r4, r2
   279d4:	mov	r5, #48	; 0x30
   279d8:	b	2775c <__assert_fail@plt+0x15088>
   279dc:	ldr	ip, [sp, #80]	; 0x50
   279e0:	cmp	ip, #0
   279e4:	beq	279f0 <__assert_fail@plt+0x1531c>
   279e8:	cmp	r8, #0
   279ec:	bne	277a8 <__assert_fail@plt+0x150d4>
   279f0:	mov	r3, r5
   279f4:	b	278fc <__assert_fail@plt+0x15228>
   279f8:	ldr	ip, [sp, #160]	; 0xa0
   279fc:	cmp	ip, #2
   27a00:	bne	27750 <__assert_fail@plt+0x1507c>
   27a04:	ldr	ip, [sp, #36]	; 0x24
   27a08:	cmp	ip, #0
   27a0c:	bne	2789c <__assert_fail@plt+0x151c8>
   27a10:	cmp	r4, fp
   27a14:	ldrcc	ip, [sp, #44]	; 0x2c
   27a18:	movcc	r3, #39	; 0x27
   27a1c:	strbcc	r3, [ip, r4]
   27a20:	add	r3, r4, #1
   27a24:	cmp	fp, r3
   27a28:	ldrhi	ip, [sp, #44]	; 0x2c
   27a2c:	movhi	r2, #92	; 0x5c
   27a30:	strbhi	r2, [ip, r3]
   27a34:	add	r3, r4, #2
   27a38:	cmp	fp, r3
   27a3c:	add	r4, r4, #3
   27a40:	ldrhi	ip, [sp, #44]	; 0x2c
   27a44:	movhi	r2, #39	; 0x27
   27a48:	strbhi	r2, [ip, r3]
   27a4c:	b	27750 <__assert_fail@plt+0x1507c>
   27a50:	ldr	ip, [sp, #68]	; 0x44
   27a54:	cmp	ip, #1
   27a58:	bne	27d28 <__assert_fail@plt+0x15654>
   27a5c:	bl	12398 <__ctype_b_loc@plt>
   27a60:	sxth	r3, r5
   27a64:	ldr	ip, [sp, #68]	; 0x44
   27a68:	lsl	r3, r3, #1
   27a6c:	str	ip, [sp, #64]	; 0x40
   27a70:	ldr	r2, [r0]
   27a74:	ldrh	r2, [r2, r3]
   27a78:	eor	r2, r2, #16384	; 0x4000
   27a7c:	ubfx	r2, r2, #14, #1
   27a80:	ldr	ip, [sp, #28]
   27a84:	ands	r2, r2, ip
   27a88:	beq	27750 <__assert_fail@plt+0x1507c>
   27a8c:	ldr	r3, [sp, #64]	; 0x40
   27a90:	mov	r0, #92	; 0x5c
   27a94:	ldr	r8, [sp, #36]	; 0x24
   27a98:	add	r1, r3, r9
   27a9c:	str	sl, [sp, #64]	; 0x40
   27aa0:	ldr	r3, [sp, #44]	; 0x2c
   27aa4:	b	27b08 <__assert_fail@plt+0x15434>
   27aa8:	cmp	r8, #0
   27aac:	bne	27f10 <__assert_fail@plt+0x1583c>
   27ab0:	add	ip, r4, #1
   27ab4:	cmp	r4, fp
   27ab8:	strbcc	r0, [r3, r4]
   27abc:	cmp	fp, ip
   27ac0:	lsrhi	sl, r5, #6
   27ac4:	addhi	sl, sl, #48	; 0x30
   27ac8:	strbhi	sl, [r3, ip]
   27acc:	add	ip, r4, #2
   27ad0:	add	r4, r4, #3
   27ad4:	cmp	fp, ip
   27ad8:	ubfxhi	sl, r5, #3, #3
   27adc:	and	r5, r5, #7
   27ae0:	add	r5, r5, #48	; 0x30
   27ae4:	addhi	sl, sl, #48	; 0x30
   27ae8:	strbhi	sl, [r3, ip]
   27aec:	add	r9, r9, #1
   27af0:	cmp	r1, r9
   27af4:	bls	27b34 <__assert_fail@plt+0x15460>
   27af8:	cmp	r4, fp
   27afc:	strbcc	r5, [r3, r4]
   27b00:	ldrb	r5, [r6, #1]!
   27b04:	add	r4, r4, #1
   27b08:	cmp	r2, #0
   27b0c:	bne	27aa8 <__assert_fail@plt+0x153d4>
   27b10:	cmp	r7, #0
   27b14:	beq	27aec <__assert_fail@plt+0x15418>
   27b18:	add	r9, r9, #1
   27b1c:	cmp	r4, fp
   27b20:	strbcc	r0, [r3, r4]
   27b24:	cmp	r1, r9
   27b28:	add	r4, r4, #1
   27b2c:	mov	r7, #0
   27b30:	bhi	27af8 <__assert_fail@plt+0x15424>
   27b34:	ldr	sl, [sp, #64]	; 0x40
   27b38:	b	277ac <__assert_fail@plt+0x150d8>
   27b3c:	ldr	ip, [sp, #36]	; 0x24
   27b40:	cmp	ip, #0
   27b44:	mov	ip, #1
   27b48:	str	ip, [sp, #28]
   27b4c:	bne	28004 <__assert_fail@plt+0x15930>
   27b50:	cmp	fp, #0
   27b54:	beq	27f28 <__assert_fail@plt+0x15854>
   27b58:	str	ip, [sp, #32]
   27b5c:	mov	r4, ip
   27b60:	ldr	ip, [sp, #44]	; 0x2c
   27b64:	mov	r3, #34	; 0x22
   27b68:	strb	r3, [ip]
   27b6c:	movw	ip, #19128	; 0x4ab8
   27b70:	movt	ip, #3
   27b74:	str	ip, [sp, #56]	; 0x38
   27b78:	b	27418 <__assert_fail@plt+0x14d44>
   27b7c:	mov	ip, #1
   27b80:	mov	r4, #0
   27b84:	str	ip, [sp, #36]	; 0x24
   27b88:	mov	ip, #1
   27b8c:	str	ip, [sp, #28]
   27b90:	str	ip, [sp, #32]
   27b94:	movw	ip, #19128	; 0x4ab8
   27b98:	movt	ip, #3
   27b9c:	str	ip, [sp, #56]	; 0x38
   27ba0:	mov	ip, #3
   27ba4:	str	ip, [sp, #160]	; 0xa0
   27ba8:	b	27418 <__assert_fail@plt+0x14d44>
   27bac:	mov	ip, #0
   27bb0:	str	ip, [sp, #36]	; 0x24
   27bb4:	mov	ip, #1
   27bb8:	str	ip, [sp, #28]
   27bbc:	mov	ip, #0
   27bc0:	str	ip, [sp, #32]
   27bc4:	str	ip, [sp, #56]	; 0x38
   27bc8:	mov	r4, ip
   27bcc:	b	27418 <__assert_fail@plt+0x14d44>
   27bd0:	ldr	ip, [sp, #160]	; 0xa0
   27bd4:	cmp	ip, #8
   27bd8:	beq	27c04 <__assert_fail@plt+0x15530>
   27bdc:	mov	r1, ip
   27be0:	movw	r0, #19140	; 0x4ac4
   27be4:	movt	r0, #3
   27be8:	bl	2722c <__assert_fail@plt+0x14b58>
   27bec:	ldr	r1, [sp, #160]	; 0xa0
   27bf0:	str	r0, [sp, #76]	; 0x4c
   27bf4:	movw	r0, #64088	; 0xfa58
   27bf8:	movt	r0, #2
   27bfc:	bl	2722c <__assert_fail@plt+0x14b58>
   27c00:	str	r0, [sp, #72]	; 0x48
   27c04:	ldr	ip, [sp, #36]	; 0x24
   27c08:	cmp	ip, #0
   27c0c:	movne	r4, #0
   27c10:	bne	27c48 <__assert_fail@plt+0x15574>
   27c14:	ldr	ip, [sp, #76]	; 0x4c
   27c18:	ldrb	r3, [ip]
   27c1c:	cmp	r3, #0
   27c20:	beq	27fd4 <__assert_fail@plt+0x15900>
   27c24:	ldr	r4, [sp, #36]	; 0x24
   27c28:	mov	r2, ip
   27c2c:	ldr	r1, [sp, #44]	; 0x2c
   27c30:	cmp	r4, fp
   27c34:	strbcc	r3, [r1, r4]
   27c38:	ldrb	r3, [r2, #1]!
   27c3c:	add	r4, r4, #1
   27c40:	cmp	r3, #0
   27c44:	bne	27c30 <__assert_fail@plt+0x1555c>
   27c48:	ldr	r0, [sp, #72]	; 0x48
   27c4c:	str	r0, [sp, #56]	; 0x38
   27c50:	bl	123d4 <strlen@plt>
   27c54:	mov	ip, #1
   27c58:	str	ip, [sp, #28]
   27c5c:	str	r0, [sp, #32]
   27c60:	b	27418 <__assert_fail@plt+0x14d44>
   27c64:	mov	ip, #1
   27c68:	mov	r4, #0
   27c6c:	str	ip, [sp, #36]	; 0x24
   27c70:	mov	ip, #0
   27c74:	str	ip, [sp, #28]
   27c78:	mov	ip, #1
   27c7c:	str	ip, [sp, #32]
   27c80:	mov	ip, #2
   27c84:	str	ip, [sp, #160]	; 0xa0
   27c88:	movw	ip, #64088	; 0xfa58
   27c8c:	movt	ip, #2
   27c90:	str	ip, [sp, #56]	; 0x38
   27c94:	b	27418 <__assert_fail@plt+0x14d44>
   27c98:	ldr	ip, [sp, #36]	; 0x24
   27c9c:	cmp	ip, #0
   27ca0:	bne	27fe0 <__assert_fail@plt+0x1590c>
   27ca4:	cmp	fp, #0
   27ca8:	mov	ip, #1
   27cac:	str	ip, [sp, #32]
   27cb0:	beq	27f44 <__assert_fail@plt+0x15870>
   27cb4:	mov	r4, ip
   27cb8:	ldr	ip, [sp, #44]	; 0x2c
   27cbc:	mov	r3, #39	; 0x27
   27cc0:	strb	r3, [ip]
   27cc4:	ldr	ip, [sp, #36]	; 0x24
   27cc8:	str	ip, [sp, #28]
   27ccc:	movw	ip, #64088	; 0xfa58
   27cd0:	movt	ip, #2
   27cd4:	str	ip, [sp, #56]	; 0x38
   27cd8:	b	27418 <__assert_fail@plt+0x14d44>
   27cdc:	ldr	ip, [sp, #32]
   27ce0:	add	r3, r9, ip
   27ce4:	ldr	ip, [sp, #40]	; 0x28
   27ce8:	cmp	sl, r3
   27cec:	add	r6, ip, r9
   27cf0:	bcc	27d20 <__assert_fail@plt+0x1564c>
   27cf4:	ldr	r1, [sp, #56]	; 0x38
   27cf8:	mov	r0, r6
   27cfc:	ldr	r2, [sp, #32]
   27d00:	bl	12158 <memcmp@plt>
   27d04:	cmp	r0, #0
   27d08:	bne	27d20 <__assert_fail@plt+0x1564c>
   27d0c:	ldr	ip, [sp, #36]	; 0x24
   27d10:	cmp	ip, #0
   27d14:	bne	2789c <__assert_fail@plt+0x151c8>
   27d18:	mov	r7, #1
   27d1c:	b	27478 <__assert_fail@plt+0x14da4>
   27d20:	mov	r7, #0
   27d24:	b	27478 <__assert_fail@plt+0x14da4>
   27d28:	cmn	sl, #1
   27d2c:	mov	r3, #0
   27d30:	str	r3, [sp, #108]	; 0x6c
   27d34:	str	r3, [sp, #112]	; 0x70
   27d38:	beq	27f18 <__assert_fail@plt+0x15844>
   27d3c:	ldr	ip, [sp, #40]	; 0x28
   27d40:	mov	r1, #0
   27d44:	str	r6, [sp, #100]	; 0x64
   27d48:	ldr	r6, [sp, #36]	; 0x24
   27d4c:	sub	ip, ip, #1
   27d50:	str	ip, [sp, #84]	; 0x54
   27d54:	mov	ip, #1
   27d58:	str	r5, [sp, #92]	; 0x5c
   27d5c:	mov	r5, r1
   27d60:	str	r7, [sp, #96]	; 0x60
   27d64:	mov	r7, ip
   27d68:	str	r1, [sp, #64]	; 0x40
   27d6c:	str	r4, [sp, #88]	; 0x58
   27d70:	ldr	ip, [sp, #40]	; 0x28
   27d74:	add	r8, r5, r9
   27d78:	rsb	r2, r8, sl
   27d7c:	add	r0, sp, #104	; 0x68
   27d80:	add	r4, ip, r8
   27d84:	add	r3, sp, #108	; 0x6c
   27d88:	mov	r1, r4
   27d8c:	bl	122c0 <mbrtowc@plt>
   27d90:	subs	r2, r0, #0
   27d94:	beq	27e9c <__assert_fail@plt+0x157c8>
   27d98:	cmn	r2, #1
   27d9c:	beq	27fb8 <__assert_fail@plt+0x158e4>
   27da0:	cmn	r2, #2
   27da4:	beq	27f5c <__assert_fail@plt+0x15888>
   27da8:	ldr	ip, [sp, #160]	; 0xa0
   27dac:	cmp	ip, #2
   27db0:	movne	r3, #0
   27db4:	andeq	r3, r6, #1
   27db8:	cmp	r3, #0
   27dbc:	beq	27e78 <__assert_fail@plt+0x157a4>
   27dc0:	cmp	r2, #1
   27dc4:	beq	27e78 <__assert_fail@plt+0x157a4>
   27dc8:	ldr	ip, [sp, #84]	; 0x54
   27dcc:	add	r3, ip, r2
   27dd0:	add	r8, r3, r8
   27dd4:	ldrb	r3, [r4, #1]!
   27dd8:	sub	r3, r3, #91	; 0x5b
   27ddc:	cmp	r3, #33	; 0x21
   27de0:	ldrls	pc, [pc, r3, lsl #2]
   27de4:	b	27e70 <__assert_fail@plt+0x1579c>
   27de8:	muleq	r2, ip, r8
   27dec:	muleq	r2, ip, r8
   27df0:	andeq	r7, r2, r0, ror lr
   27df4:	muleq	r2, ip, r8
   27df8:	andeq	r7, r2, r0, ror lr
   27dfc:	muleq	r2, ip, r8
   27e00:	andeq	r7, r2, r0, ror lr
   27e04:	andeq	r7, r2, r0, ror lr
   27e08:	andeq	r7, r2, r0, ror lr
   27e0c:	andeq	r7, r2, r0, ror lr
   27e10:	andeq	r7, r2, r0, ror lr
   27e14:	andeq	r7, r2, r0, ror lr
   27e18:	andeq	r7, r2, r0, ror lr
   27e1c:	andeq	r7, r2, r0, ror lr
   27e20:	andeq	r7, r2, r0, ror lr
   27e24:	andeq	r7, r2, r0, ror lr
   27e28:	andeq	r7, r2, r0, ror lr
   27e2c:	andeq	r7, r2, r0, ror lr
   27e30:	andeq	r7, r2, r0, ror lr
   27e34:	andeq	r7, r2, r0, ror lr
   27e38:	andeq	r7, r2, r0, ror lr
   27e3c:	andeq	r7, r2, r0, ror lr
   27e40:	andeq	r7, r2, r0, ror lr
   27e44:	andeq	r7, r2, r0, ror lr
   27e48:	andeq	r7, r2, r0, ror lr
   27e4c:	andeq	r7, r2, r0, ror lr
   27e50:	andeq	r7, r2, r0, ror lr
   27e54:	andeq	r7, r2, r0, ror lr
   27e58:	andeq	r7, r2, r0, ror lr
   27e5c:	andeq	r7, r2, r0, ror lr
   27e60:	andeq	r7, r2, r0, ror lr
   27e64:	andeq	r7, r2, r0, ror lr
   27e68:	andeq	r7, r2, r0, ror lr
   27e6c:	muleq	r2, ip, r8
   27e70:	cmp	r4, r8
   27e74:	bne	27dd4 <__assert_fail@plt+0x15700>
   27e78:	ldr	r0, [sp, #104]	; 0x68
   27e7c:	add	r5, r5, r2
   27e80:	bl	12200 <iswprint@plt>
   27e84:	cmp	r0, #0
   27e88:	add	r0, sp, #108	; 0x6c
   27e8c:	moveq	r7, #0
   27e90:	bl	12128 <mbsinit@plt>
   27e94:	cmp	r0, #0
   27e98:	beq	27d70 <__assert_fail@plt+0x1569c>
   27e9c:	mov	ip, r7
   27ea0:	eor	r2, ip, #1
   27ea4:	str	r5, [sp, #64]	; 0x40
   27ea8:	ldr	r4, [sp, #88]	; 0x58
   27eac:	uxtb	r2, r2
   27eb0:	ldr	r5, [sp, #92]	; 0x5c
   27eb4:	ldr	r7, [sp, #96]	; 0x60
   27eb8:	ldr	r6, [sp, #100]	; 0x64
   27ebc:	ldr	r1, [sp, #64]	; 0x40
   27ec0:	cmp	r1, #1
   27ec4:	bls	27a80 <__assert_fail@plt+0x153ac>
   27ec8:	ldr	ip, [sp, #28]
   27ecc:	and	r2, r2, ip
   27ed0:	b	27a8c <__assert_fail@plt+0x153b8>
   27ed4:	ldr	ip, [sp, #164]	; 0xa4
   27ed8:	tst	ip, #1
   27edc:	addne	r9, r9, #1
   27ee0:	bne	27440 <__assert_fail@plt+0x14d6c>
   27ee4:	b	27750 <__assert_fail@plt+0x1507c>
   27ee8:	ldr	ip, [sp, #36]	; 0x24
   27eec:	cmp	ip, #0
   27ef0:	beq	27750 <__assert_fail@plt+0x1507c>
   27ef4:	b	2789c <__assert_fail@plt+0x151c8>
   27ef8:	ldr	ip, [sp, #40]	; 0x28
   27efc:	ldrb	r3, [ip, #1]
   27f00:	adds	r3, r3, #0
   27f04:	movne	r3, #1
   27f08:	b	27870 <__assert_fail@plt+0x1519c>
   27f0c:	bl	12674 <abort@plt>
   27f10:	ldr	sl, [sp, #64]	; 0x40
   27f14:	b	2789c <__assert_fail@plt+0x151c8>
   27f18:	ldr	r0, [sp, #40]	; 0x28
   27f1c:	bl	123d4 <strlen@plt>
   27f20:	mov	sl, r0
   27f24:	b	27d3c <__assert_fail@plt+0x15668>
   27f28:	mov	ip, #1
   27f2c:	str	ip, [sp, #32]
   27f30:	mov	r4, ip
   27f34:	movw	ip, #19128	; 0x4ab8
   27f38:	movt	ip, #3
   27f3c:	str	ip, [sp, #56]	; 0x38
   27f40:	b	27418 <__assert_fail@plt+0x14d44>
   27f44:	movw	ip, #64088	; 0xfa58
   27f48:	mov	r4, #1
   27f4c:	movt	ip, #2
   27f50:	str	fp, [sp, #28]
   27f54:	str	ip, [sp, #56]	; 0x38
   27f58:	b	27418 <__assert_fail@plt+0x14d44>
   27f5c:	cmp	sl, r8
   27f60:	str	r5, [sp, #64]	; 0x40
   27f64:	mov	ip, r4
   27f68:	ldr	r7, [sp, #96]	; 0x60
   27f6c:	ldr	r5, [sp, #92]	; 0x5c
   27f70:	ldr	r4, [sp, #88]	; 0x58
   27f74:	ldr	r6, [sp, #100]	; 0x64
   27f78:	bls	27fb0 <__assert_fail@plt+0x158dc>
   27f7c:	ldrb	r3, [ip]
   27f80:	cmp	r3, #0
   27f84:	beq	27fb0 <__assert_fail@plt+0x158dc>
   27f88:	ldr	r3, [sp, #64]	; 0x40
   27f8c:	b	27f9c <__assert_fail@plt+0x158c8>
   27f90:	ldrb	r2, [r6, r3]
   27f94:	cmp	r2, #0
   27f98:	beq	27fac <__assert_fail@plt+0x158d8>
   27f9c:	add	r3, r3, #1
   27fa0:	add	r2, r9, r3
   27fa4:	cmp	sl, r2
   27fa8:	bhi	27f90 <__assert_fail@plt+0x158bc>
   27fac:	str	r3, [sp, #64]	; 0x40
   27fb0:	mov	r2, #1
   27fb4:	b	27ebc <__assert_fail@plt+0x157e8>
   27fb8:	str	r5, [sp, #64]	; 0x40
   27fbc:	mov	r2, #1
   27fc0:	ldr	r4, [sp, #88]	; 0x58
   27fc4:	ldr	r7, [sp, #96]	; 0x60
   27fc8:	ldr	r5, [sp, #92]	; 0x5c
   27fcc:	ldr	r6, [sp, #100]	; 0x64
   27fd0:	b	27ebc <__assert_fail@plt+0x157e8>
   27fd4:	ldr	r4, [sp, #36]	; 0x24
   27fd8:	b	27c48 <__assert_fail@plt+0x15574>
   27fdc:	bl	12188 <__stack_chk_fail@plt>
   27fe0:	mov	ip, #0
   27fe4:	mov	r4, #0
   27fe8:	str	ip, [sp, #28]
   27fec:	movw	ip, #64088	; 0xfa58
   27ff0:	movt	ip, #2
   27ff4:	str	ip, [sp, #56]	; 0x38
   27ff8:	mov	ip, #1
   27ffc:	str	ip, [sp, #32]
   28000:	b	27418 <__assert_fail@plt+0x14d44>
   28004:	mov	ip, #1
   28008:	mov	r4, #0
   2800c:	str	ip, [sp, #32]
   28010:	movw	ip, #19128	; 0x4ab8
   28014:	movt	ip, #3
   28018:	str	ip, [sp, #56]	; 0x38
   2801c:	b	27418 <__assert_fail@plt+0x14d44>
   28020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28024:	sub	sp, sp, #44	; 0x2c
   28028:	mov	r6, r0
   2802c:	mov	r9, r1
   28030:	mov	sl, r2
   28034:	mov	r4, r3
   28038:	bl	12434 <__errno_location@plt>
   2803c:	movw	r7, #25928	; 0x6548
   28040:	cmp	r6, #0
   28044:	movt	r7, #4
   28048:	ldr	r5, [r7]
   2804c:	ldr	r1, [r0]
   28050:	mov	r8, r0
   28054:	str	r1, [sp, #36]	; 0x24
   28058:	blt	281c8 <__assert_fail@plt+0x15af4>
   2805c:	ldr	r3, [r7, #4]
   28060:	cmp	r6, r3
   28064:	bcc	280b0 <__assert_fail@plt+0x159dc>
   28068:	add	fp, r6, #1
   2806c:	cmn	fp, #-536870911	; 0xe0000001
   28070:	bhi	281cc <__assert_fail@plt+0x15af8>
   28074:	add	r3, r7, #8
   28078:	cmp	r5, r3
   2807c:	beq	281a0 <__assert_fail@plt+0x15acc>
   28080:	mov	r0, r5
   28084:	lsl	r1, fp, #3
   28088:	bl	28e3c <__assert_fail@plt+0x16768>
   2808c:	mov	r5, r0
   28090:	str	r0, [r7]
   28094:	ldr	r0, [r7, #4]
   28098:	mov	r1, #0
   2809c:	rsb	r2, r0, fp
   280a0:	add	r0, r5, r0, lsl #3
   280a4:	lsl	r2, r2, #3
   280a8:	bl	12464 <memset@plt>
   280ac:	str	fp, [r7, #4]
   280b0:	add	r2, r4, #8
   280b4:	str	r2, [sp, #32]
   280b8:	ldr	r1, [r4]
   280bc:	add	fp, r5, r6, lsl #3
   280c0:	ldr	lr, [sp, #32]
   280c4:	mov	r2, r9
   280c8:	ldr	r3, [r4, #4]
   280cc:	ldr	ip, [r5, r6, lsl #3]
   280d0:	ldr	r7, [fp, #4]
   280d4:	orr	r3, r3, #1
   280d8:	str	r1, [sp]
   280dc:	str	r3, [sp, #4]
   280e0:	mov	r1, ip
   280e4:	str	lr, [sp, #8]
   280e8:	mov	r0, r7
   280ec:	ldr	lr, [r4, #40]	; 0x28
   280f0:	str	r3, [sp, #28]
   280f4:	mov	r3, sl
   280f8:	str	lr, [sp, #12]
   280fc:	ldr	lr, [r4, #44]	; 0x2c
   28100:	str	ip, [sp, #24]
   28104:	str	lr, [sp, #16]
   28108:	bl	27374 <__assert_fail@plt+0x14ca0>
   2810c:	ldr	ip, [sp, #24]
   28110:	cmp	ip, r0
   28114:	bhi	2818c <__assert_fail@plt+0x15ab8>
   28118:	movw	r3, #27984	; 0x6d50
   2811c:	movt	r3, #4
   28120:	cmp	r7, r3
   28124:	add	r1, r0, #1
   28128:	str	r1, [r5, r6, lsl #3]
   2812c:	beq	28140 <__assert_fail@plt+0x15a6c>
   28130:	mov	r0, r7
   28134:	str	r1, [sp, #24]
   28138:	bl	120c8 <free@plt>
   2813c:	ldr	r1, [sp, #24]
   28140:	mov	r0, r1
   28144:	str	r1, [sp, #24]
   28148:	bl	28e14 <__assert_fail@plt+0x16740>
   2814c:	ldr	ip, [r4]
   28150:	ldr	r3, [sp, #28]
   28154:	mov	r2, r9
   28158:	ldr	lr, [sp, #32]
   2815c:	ldr	r1, [sp, #24]
   28160:	str	r0, [fp, #4]
   28164:	mov	r7, r0
   28168:	str	r3, [sp, #4]
   2816c:	mov	r3, sl
   28170:	str	lr, [sp, #8]
   28174:	str	ip, [sp]
   28178:	ldr	ip, [r4, #40]	; 0x28
   2817c:	str	ip, [sp, #12]
   28180:	ldr	ip, [r4, #44]	; 0x2c
   28184:	str	ip, [sp, #16]
   28188:	bl	27374 <__assert_fail@plt+0x14ca0>
   2818c:	ldr	r1, [sp, #36]	; 0x24
   28190:	mov	r0, r7
   28194:	str	r1, [r8]
   28198:	add	sp, sp, #44	; 0x2c
   2819c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281a0:	lsl	r1, fp, #3
   281a4:	mov	r0, #0
   281a8:	str	r3, [sp, #24]
   281ac:	bl	28e3c <__assert_fail@plt+0x16768>
   281b0:	ldr	r3, [sp, #24]
   281b4:	mov	r5, r0
   281b8:	ldm	r3, {r0, r1}
   281bc:	str	r5, [r7]
   281c0:	stm	r5, {r0, r1}
   281c4:	b	28094 <__assert_fail@plt+0x159c0>
   281c8:	bl	12674 <abort@plt>
   281cc:	bl	28f4c <__assert_fail@plt+0x16878>
   281d0:	push	{r4, r5, r6, lr}
   281d4:	mov	r5, r0
   281d8:	bl	12434 <__errno_location@plt>
   281dc:	cmp	r5, #0
   281e0:	mov	r1, #48	; 0x30
   281e4:	mov	r4, r0
   281e8:	ldr	r0, [pc, #16]	; 28200 <__assert_fail@plt+0x15b2c>
   281ec:	ldr	r6, [r4]
   281f0:	movne	r0, r5
   281f4:	bl	28f0c <__assert_fail@plt+0x16838>
   281f8:	str	r6, [r4]
   281fc:	pop	{r4, r5, r6, pc}
   28200:	andeq	r6, r4, r0, asr lr
   28204:	ldr	r3, [pc, #12]	; 28218 <__assert_fail@plt+0x15b44>
   28208:	cmp	r0, #0
   2820c:	moveq	r0, r3
   28210:	ldr	r0, [r0]
   28214:	bx	lr
   28218:	andeq	r6, r4, r0, asr lr
   2821c:	ldr	r3, [pc, #12]	; 28230 <__assert_fail@plt+0x15b5c>
   28220:	cmp	r0, #0
   28224:	moveq	r0, r3
   28228:	str	r1, [r0]
   2822c:	bx	lr
   28230:	andeq	r6, r4, r0, asr lr
   28234:	ldr	r3, [pc, #48]	; 2826c <__assert_fail@plt+0x15b98>
   28238:	lsr	ip, r1, #5
   2823c:	cmp	r0, #0
   28240:	and	r1, r1, #31
   28244:	moveq	r0, r3
   28248:	add	r3, r0, ip, lsl #2
   2824c:	ldr	ip, [r3, #8]
   28250:	lsr	r0, ip, r1
   28254:	eor	r2, r0, r2
   28258:	and	r0, r0, #1
   2825c:	and	r2, r2, #1
   28260:	eor	ip, ip, r2, lsl r1
   28264:	str	ip, [r3, #8]
   28268:	bx	lr
   2826c:	andeq	r6, r4, r0, asr lr
   28270:	ldr	r3, [pc, #16]	; 28288 <__assert_fail@plt+0x15bb4>
   28274:	cmp	r0, #0
   28278:	movne	r3, r0
   2827c:	ldr	r0, [r3, #4]
   28280:	str	r1, [r3, #4]
   28284:	bx	lr
   28288:	andeq	r6, r4, r0, asr lr
   2828c:	push	{r3, lr}
   28290:	cmp	r0, #0
   28294:	ldr	r3, [pc, #32]	; 282bc <__assert_fail@plt+0x15be8>
   28298:	mov	ip, #8
   2829c:	moveq	r0, r3
   282a0:	cmp	r2, #0
   282a4:	cmpne	r1, #0
   282a8:	str	ip, [r0]
   282ac:	strne	r1, [r0, #40]	; 0x28
   282b0:	strne	r2, [r0, #44]	; 0x2c
   282b4:	popne	{r3, pc}
   282b8:	bl	12674 <abort@plt>
   282bc:	andeq	r6, r4, r0, asr lr
   282c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   282c4:	sub	sp, sp, #28
   282c8:	mov	r6, r0
   282cc:	ldr	r0, [pc, #100]	; 28338 <__assert_fail@plt+0x15c64>
   282d0:	ldr	r4, [sp, #56]	; 0x38
   282d4:	mov	r9, r1
   282d8:	mov	r8, r2
   282dc:	mov	r7, r3
   282e0:	cmp	r4, #0
   282e4:	moveq	r4, r0
   282e8:	bl	12434 <__errno_location@plt>
   282ec:	ldr	ip, [r4]
   282f0:	add	lr, r4, #8
   282f4:	mov	r1, r9
   282f8:	mov	r2, r8
   282fc:	mov	r3, r7
   28300:	mov	r5, r0
   28304:	mov	r0, r6
   28308:	ldr	r6, [r5]
   2830c:	str	ip, [sp]
   28310:	ldr	ip, [r4, #4]
   28314:	stmib	sp, {ip, lr}
   28318:	ldr	ip, [r4, #40]	; 0x28
   2831c:	str	ip, [sp, #12]
   28320:	ldr	ip, [r4, #44]	; 0x2c
   28324:	str	ip, [sp, #16]
   28328:	bl	27374 <__assert_fail@plt+0x14ca0>
   2832c:	str	r6, [r5]
   28330:	add	sp, sp, #28
   28334:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28338:	andeq	r6, r4, r0, asr lr
   2833c:	cmp	r3, #0
   28340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28344:	sub	sp, sp, #36	; 0x24
   28348:	ldr	r4, [pc, #196]	; 28414 <__assert_fail@plt+0x15d40>
   2834c:	mov	r5, r2
   28350:	movne	r4, r3
   28354:	mov	r6, r1
   28358:	mov	r7, r0
   2835c:	bl	12434 <__errno_location@plt>
   28360:	ldr	r1, [r4]
   28364:	add	r9, r4, #8
   28368:	ldr	sl, [r4, #4]
   2836c:	mov	r2, r7
   28370:	mov	r8, r0
   28374:	mov	r0, #0
   28378:	ldr	r3, [r8]
   2837c:	cmp	r5, r0
   28380:	orreq	sl, sl, #1
   28384:	str	r9, [sp, #8]
   28388:	stm	sp, {r1, sl}
   2838c:	mov	r1, r0
   28390:	ldr	ip, [r4, #40]	; 0x28
   28394:	str	r3, [sp, #28]
   28398:	mov	r3, r6
   2839c:	str	ip, [sp, #12]
   283a0:	ldr	ip, [r4, #44]	; 0x2c
   283a4:	str	ip, [sp, #16]
   283a8:	bl	27374 <__assert_fail@plt+0x14ca0>
   283ac:	add	r1, r0, #1
   283b0:	mov	fp, r0
   283b4:	str	r1, [sp, #24]
   283b8:	mov	r0, r1
   283bc:	bl	28e14 <__assert_fail@plt+0x16740>
   283c0:	ldr	lr, [r4]
   283c4:	str	sl, [sp, #4]
   283c8:	mov	r3, r6
   283cc:	str	r9, [sp, #8]
   283d0:	mov	r2, r7
   283d4:	str	lr, [sp]
   283d8:	ldr	lr, [r4, #40]	; 0x28
   283dc:	ldr	r1, [sp, #24]
   283e0:	str	lr, [sp, #12]
   283e4:	ldr	lr, [r4, #44]	; 0x2c
   283e8:	str	lr, [sp, #16]
   283ec:	str	r0, [sp, #24]
   283f0:	bl	27374 <__assert_fail@plt+0x14ca0>
   283f4:	ldr	ip, [sp, #24]
   283f8:	cmp	r5, #0
   283fc:	ldr	r3, [sp, #28]
   28400:	mov	r0, ip
   28404:	str	r3, [r8]
   28408:	strne	fp, [r5]
   2840c:	add	sp, sp, #36	; 0x24
   28410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28414:	andeq	r6, r4, r0, asr lr
   28418:	mov	r3, r2
   2841c:	mov	r2, #0
   28420:	b	2833c <__assert_fail@plt+0x15c68>
   28424:	push	{r4, r5, r6, r7, r8, lr}
   28428:	movw	r7, #25928	; 0x6548
   2842c:	movt	r7, #4
   28430:	ldr	r6, [r7, #4]
   28434:	ldr	r8, [r7]
   28438:	cmp	r6, #1
   2843c:	movhi	r5, r8
   28440:	movhi	r4, #1
   28444:	bls	28460 <__assert_fail@plt+0x15d8c>
   28448:	ldr	r0, [r5, #12]
   2844c:	add	r4, r4, #1
   28450:	bl	120c8 <free@plt>
   28454:	cmp	r4, r6
   28458:	add	r5, r5, #8
   2845c:	bne	28448 <__assert_fail@plt+0x15d74>
   28460:	ldr	r0, [r8, #4]
   28464:	movw	r4, #27984	; 0x6d50
   28468:	movt	r4, #4
   2846c:	cmp	r0, r4
   28470:	beq	28484 <__assert_fail@plt+0x15db0>
   28474:	bl	120c8 <free@plt>
   28478:	mov	r3, #256	; 0x100
   2847c:	str	r4, [r7, #12]
   28480:	str	r3, [r7, #8]
   28484:	movw	r4, #25928	; 0x6548
   28488:	movt	r4, #4
   2848c:	add	r5, r4, #8
   28490:	cmp	r8, r5
   28494:	beq	284a4 <__assert_fail@plt+0x15dd0>
   28498:	mov	r0, r8
   2849c:	bl	120c8 <free@plt>
   284a0:	str	r5, [r4]
   284a4:	mov	r3, #1
   284a8:	str	r3, [r7, #4]
   284ac:	pop	{r4, r5, r6, r7, r8, pc}
   284b0:	mvn	r2, #0
   284b4:	ldr	r3, [pc]	; 284bc <__assert_fail@plt+0x15de8>
   284b8:	b	28020 <__assert_fail@plt+0x1594c>
   284bc:	andeq	r6, r4, r0, asr lr
   284c0:	ldr	r3, [pc]	; 284c8 <__assert_fail@plt+0x15df4>
   284c4:	b	28020 <__assert_fail@plt+0x1594c>
   284c8:	andeq	r6, r4, r0, asr lr
   284cc:	mov	r1, r0
   284d0:	mvn	r2, #0
   284d4:	mov	r0, #0
   284d8:	ldr	r3, [pc]	; 284e0 <__assert_fail@plt+0x15e0c>
   284dc:	b	28020 <__assert_fail@plt+0x1594c>
   284e0:	andeq	r6, r4, r0, asr lr
   284e4:	mov	r2, r1
   284e8:	ldr	r3, [pc, #8]	; 284f8 <__assert_fail@plt+0x15e24>
   284ec:	mov	r1, r0
   284f0:	mov	r0, #0
   284f4:	b	28020 <__assert_fail@plt+0x1594c>
   284f8:	andeq	r6, r4, r0, asr lr
   284fc:	push	{r4, r5, r6, lr}
   28500:	movw	r4, #26008	; 0x6598
   28504:	movt	r4, #4
   28508:	sub	sp, sp, #56	; 0x38
   2850c:	mov	r6, r2
   28510:	mov	r5, r0
   28514:	ldr	r3, [r4]
   28518:	add	r0, sp, #4
   2851c:	str	r3, [sp, #52]	; 0x34
   28520:	bl	271d8 <__assert_fail@plt+0x14b04>
   28524:	add	r3, sp, #4
   28528:	mvn	r2, #0
   2852c:	mov	r0, r5
   28530:	mov	r1, r6
   28534:	bl	28020 <__assert_fail@plt+0x1594c>
   28538:	ldr	r2, [sp, #52]	; 0x34
   2853c:	ldr	r3, [r4]
   28540:	cmp	r2, r3
   28544:	bne	28550 <__assert_fail@plt+0x15e7c>
   28548:	add	sp, sp, #56	; 0x38
   2854c:	pop	{r4, r5, r6, pc}
   28550:	bl	12188 <__stack_chk_fail@plt>
   28554:	push	{r4, r5, r6, r7, lr}
   28558:	movw	r4, #26008	; 0x6598
   2855c:	movt	r4, #4
   28560:	sub	sp, sp, #60	; 0x3c
   28564:	mov	r6, r2
   28568:	mov	r7, r3
   2856c:	ldr	ip, [r4]
   28570:	mov	r5, r0
   28574:	add	r0, sp, #4
   28578:	str	ip, [sp, #52]	; 0x34
   2857c:	bl	271d8 <__assert_fail@plt+0x14b04>
   28580:	mov	r2, r7
   28584:	add	r3, sp, #4
   28588:	mov	r0, r5
   2858c:	mov	r1, r6
   28590:	bl	28020 <__assert_fail@plt+0x1594c>
   28594:	ldr	r2, [sp, #52]	; 0x34
   28598:	ldr	r3, [r4]
   2859c:	cmp	r2, r3
   285a0:	bne	285ac <__assert_fail@plt+0x15ed8>
   285a4:	add	sp, sp, #60	; 0x3c
   285a8:	pop	{r4, r5, r6, r7, pc}
   285ac:	bl	12188 <__stack_chk_fail@plt>
   285b0:	mov	r2, r1
   285b4:	mov	r1, r0
   285b8:	mov	r0, #0
   285bc:	b	284fc <__assert_fail@plt+0x15e28>
   285c0:	mov	ip, r1
   285c4:	mov	r3, r2
   285c8:	mov	r1, r0
   285cc:	mov	r2, ip
   285d0:	mov	r0, #0
   285d4:	b	28554 <__assert_fail@plt+0x15e80>
   285d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   285dc:	mov	r8, r0
   285e0:	ldr	lr, [pc, #144]	; 28678 <__assert_fail@plt+0x15fa4>
   285e4:	mov	r7, r1
   285e8:	mov	r6, r2
   285ec:	lsr	r5, r2, #5
   285f0:	sub	sp, sp, #60	; 0x3c
   285f4:	add	r5, r5, #2
   285f8:	ldm	lr!, {r0, r1, r2, r3}
   285fc:	add	ip, sp, #4
   28600:	add	r9, sp, #56	; 0x38
   28604:	and	r6, r6, #31
   28608:	add	r5, r9, r5, lsl #2
   2860c:	movw	r4, #26008	; 0x6598
   28610:	movt	r4, #4
   28614:	stmia	ip!, {r0, r1, r2, r3}
   28618:	ldm	lr!, {r0, r1, r2, r3}
   2861c:	ldr	r9, [r4]
   28620:	stmia	ip!, {r0, r1, r2, r3}
   28624:	ldm	lr, {r0, r1, r2, r3}
   28628:	str	r9, [sp, #52]	; 0x34
   2862c:	stm	ip, {r0, r1, r2, r3}
   28630:	mov	r2, r7
   28634:	ldr	ip, [r5, #-52]	; 0xffffffcc
   28638:	add	r3, sp, #4
   2863c:	mov	r1, r8
   28640:	mov	r0, #0
   28644:	lsr	lr, ip, r6
   28648:	eor	lr, lr, #1
   2864c:	and	lr, lr, #1
   28650:	eor	ip, ip, lr, lsl r6
   28654:	str	ip, [r5, #-52]	; 0xffffffcc
   28658:	bl	28020 <__assert_fail@plt+0x1594c>
   2865c:	ldr	r2, [sp, #52]	; 0x34
   28660:	ldr	r3, [r4]
   28664:	cmp	r2, r3
   28668:	bne	28674 <__assert_fail@plt+0x15fa0>
   2866c:	add	sp, sp, #60	; 0x3c
   28670:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28674:	bl	12188 <__stack_chk_fail@plt>
   28678:	andeq	r6, r4, r0, asr lr
   2867c:	mov	r2, r1
   28680:	mvn	r1, #0
   28684:	b	285d8 <__assert_fail@plt+0x15f04>
   28688:	mvn	r1, #0
   2868c:	mov	r2, #58	; 0x3a
   28690:	b	285d8 <__assert_fail@plt+0x15f04>
   28694:	mov	r2, #58	; 0x3a
   28698:	b	285d8 <__assert_fail@plt+0x15f04>
   2869c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   286a0:	mov	r7, r0
   286a4:	ldr	lr, [pc, #124]	; 28728 <__assert_fail@plt+0x16054>
   286a8:	mov	r9, r1
   286ac:	mov	r8, r2
   286b0:	mov	r6, r3
   286b4:	sub	sp, sp, #56	; 0x38
   286b8:	movw	r4, #26008	; 0x6598
   286bc:	ldm	lr!, {r0, r1, r2, r3}
   286c0:	add	ip, sp, #4
   286c4:	movt	r4, #4
   286c8:	ldr	r5, [sp, #88]	; 0x58
   286cc:	ldr	sl, [r4]
   286d0:	stmia	ip!, {r0, r1, r2, r3}
   286d4:	ldm	lr!, {r0, r1, r2, r3}
   286d8:	str	sl, [sp, #52]	; 0x34
   286dc:	stmia	ip!, {r0, r1, r2, r3}
   286e0:	ldm	lr, {r0, r1, r2, r3}
   286e4:	stm	ip, {r0, r1, r2, r3}
   286e8:	mov	r1, r9
   286ec:	mov	r2, r8
   286f0:	add	r0, sp, #4
   286f4:	bl	2828c <__assert_fail@plt+0x15bb8>
   286f8:	mov	r2, r5
   286fc:	add	r3, sp, #4
   28700:	mov	r0, r7
   28704:	mov	r1, r6
   28708:	bl	28020 <__assert_fail@plt+0x1594c>
   2870c:	ldr	r2, [sp, #52]	; 0x34
   28710:	ldr	r3, [r4]
   28714:	cmp	r2, r3
   28718:	bne	28724 <__assert_fail@plt+0x16050>
   2871c:	add	sp, sp, #56	; 0x38
   28720:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28724:	bl	12188 <__stack_chk_fail@plt>
   28728:	andeq	r6, r4, r0, asr lr
   2872c:	push	{lr}		; (str lr, [sp, #-4]!)
   28730:	sub	sp, sp, #12
   28734:	mvn	ip, #0
   28738:	str	ip, [sp]
   2873c:	bl	2869c <__assert_fail@plt+0x15fc8>
   28740:	add	sp, sp, #12
   28744:	pop	{pc}		; (ldr pc, [sp], #4)
   28748:	push	{lr}		; (str lr, [sp, #-4]!)
   2874c:	sub	sp, sp, #12
   28750:	mov	ip, r1
   28754:	mov	r3, r2
   28758:	mov	r1, r0
   2875c:	mov	r2, ip
   28760:	mov	r0, #0
   28764:	mvn	ip, #0
   28768:	str	ip, [sp]
   2876c:	bl	2869c <__assert_fail@plt+0x15fc8>
   28770:	add	sp, sp, #12
   28774:	pop	{pc}		; (ldr pc, [sp], #4)
   28778:	push	{lr}		; (str lr, [sp, #-4]!)
   2877c:	sub	sp, sp, #12
   28780:	mov	lr, r1
   28784:	mov	ip, r2
   28788:	mov	r1, r0
   2878c:	str	r3, [sp]
   28790:	mov	r2, lr
   28794:	mov	r3, ip
   28798:	mov	r0, #0
   2879c:	bl	2869c <__assert_fail@plt+0x15fc8>
   287a0:	add	sp, sp, #12
   287a4:	pop	{pc}		; (ldr pc, [sp], #4)
   287a8:	ldr	r3, [pc]	; 287b0 <__assert_fail@plt+0x160dc>
   287ac:	b	28020 <__assert_fail@plt+0x1594c>
   287b0:	andeq	r6, r4, r8, asr r5
   287b4:	mov	r2, r1
   287b8:	ldr	r3, [pc, #8]	; 287c8 <__assert_fail@plt+0x160f4>
   287bc:	mov	r1, r0
   287c0:	mov	r0, #0
   287c4:	b	28020 <__assert_fail@plt+0x1594c>
   287c8:	andeq	r6, r4, r8, asr r5
   287cc:	mvn	r2, #0
   287d0:	ldr	r3, [pc]	; 287d8 <__assert_fail@plt+0x16104>
   287d4:	b	28020 <__assert_fail@plt+0x1594c>
   287d8:	andeq	r6, r4, r8, asr r5
   287dc:	mov	r1, r0
   287e0:	mvn	r2, #0
   287e4:	mov	r0, #0
   287e8:	ldr	r3, [pc]	; 287f0 <__assert_fail@plt+0x1611c>
   287ec:	b	28020 <__assert_fail@plt+0x1594c>
   287f0:	andeq	r6, r4, r8, asr r5
   287f4:	push	{r3, r4, r5, lr}
   287f8:	mov	r4, #0
   287fc:	mov	r5, r0
   28800:	str	r4, [r0, #4]
   28804:	mov	r1, r4
   28808:	movw	r0, #7340	; 0x1cac
   2880c:	movt	r0, #3
   28810:	bl	21448 <__assert_fail@plt+0xed74>
   28814:	cmp	r0, r4
   28818:	str	r0, [r5]
   2881c:	blt	28830 <__assert_fail@plt+0x1615c>
   28820:	mov	r1, #1
   28824:	bl	21060 <__assert_fail@plt+0xe98c>
   28828:	mov	r0, r4
   2882c:	pop	{r3, r4, r5, pc}
   28830:	mov	r0, r4
   28834:	mov	r1, r4
   28838:	bl	123a4 <getcwd@plt>
   2883c:	str	r0, [r5, #4]
   28840:	cmp	r0, r4
   28844:	movne	r0, #0
   28848:	mvneq	r0, #0
   2884c:	pop	{r3, r4, r5, pc}
   28850:	ldr	r3, [r0]
   28854:	cmp	r3, #0
   28858:	blt	28864 <__assert_fail@plt+0x16190>
   2885c:	mov	r0, r3
   28860:	b	125cc <fchdir@plt>
   28864:	ldr	r0, [r0, #4]
   28868:	b	29d9c <__assert_fail@plt+0x176c8>
   2886c:	push	{r4, lr}
   28870:	mov	r4, r0
   28874:	ldr	r0, [r0]
   28878:	cmp	r0, #0
   2887c:	blt	28884 <__assert_fail@plt+0x161b0>
   28880:	bl	12680 <close@plt>
   28884:	ldr	r0, [r4, #4]
   28888:	pop	{r4, lr}
   2888c:	b	120c8 <free@plt>
   28890:	push	{r3, r4, r5, lr}
   28894:	mov	r4, r1
   28898:	mov	r2, r4
   2889c:	mov	r1, #0
   288a0:	mov	r5, r0
   288a4:	bl	124dc <memchr@plt>
   288a8:	cmp	r0, #0
   288ac:	rsbne	r0, r5, r0
   288b0:	addne	r0, r0, #1
   288b4:	moveq	r0, r4
   288b8:	pop	{r3, r4, r5, pc}
   288bc:	mov	r1, #0
   288c0:	mov	r2, #3
   288c4:	b	2a078 <__assert_fail@plt+0x179a4>
   288c8:	cmp	r0, #2
   288cc:	push	{r3, r4, r5, r6, r7, lr}
   288d0:	mov	r4, r0
   288d4:	bhi	288fc <__assert_fail@plt+0x16228>
   288d8:	bl	288bc <__assert_fail@plt+0x161e8>
   288dc:	mov	r7, r0
   288e0:	bl	12434 <__errno_location@plt>
   288e4:	ldr	r6, [r0]
   288e8:	mov	r5, r0
   288ec:	mov	r0, r4
   288f0:	mov	r4, r7
   288f4:	bl	12680 <close@plt>
   288f8:	str	r6, [r5]
   288fc:	mov	r0, r4
   28900:	pop	{r3, r4, r5, r6, r7, pc}
   28904:	push	{r4, r5, r6, lr}
   28908:	cmp	r1, #0
   2890c:	sub	sp, sp, #32
   28910:	mov	ip, r3
   28914:	mov	r5, r0
   28918:	ldr	r4, [sp, #48]	; 0x30
   2891c:	ldr	r6, [sp, #52]	; 0x34
   28920:	beq	28c64 <__assert_fail@plt+0x16590>
   28924:	str	r2, [sp]
   28928:	mov	r3, r1
   2892c:	movw	r2, #19208	; 0x4b08
   28930:	str	ip, [sp, #4]
   28934:	mov	r1, #1
   28938:	movt	r2, #3
   2893c:	bl	124d0 <__fprintf_chk@plt>
   28940:	mov	r2, #5
   28944:	movw	r1, #19228	; 0x4b1c
   28948:	mov	r0, #0
   2894c:	movt	r1, #3
   28950:	bl	1217c <dcgettext@plt>
   28954:	movw	r1, #2012	; 0x7dc
   28958:	movw	r2, #19988	; 0x4e14
   2895c:	str	r1, [sp]
   28960:	movt	r2, #3
   28964:	mov	r1, #1
   28968:	mov	r3, r0
   2896c:	mov	r0, r5
   28970:	bl	124d0 <__fprintf_chk@plt>
   28974:	movw	r1, #19232	; 0x4b20
   28978:	mov	r0, #0
   2897c:	movt	r1, #3
   28980:	mov	r2, #5
   28984:	bl	1217c <dcgettext@plt>
   28988:	mov	r1, r5
   2898c:	bl	12650 <fputs@plt>
   28990:	cmp	r6, #9
   28994:	ldrls	pc, [pc, r6, lsl #2]
   28998:	b	28c80 <__assert_fail@plt+0x165ac>
   2899c:	andeq	r8, r2, r0, lsr sl
   289a0:	andeq	r8, r2, r4, lsr sl
   289a4:	andeq	r8, r2, r4, ror #20
   289a8:	muleq	r2, r8, sl
   289ac:	ldrdeq	r8, [r2], -r4
   289b0:	andeq	r8, r2, r4, lsl fp
   289b4:	andeq	r8, r2, ip, asr fp
   289b8:	andeq	r8, r2, ip, lsr #23
   289bc:	andeq	r8, r2, r4, lsl #24
   289c0:	andeq	r8, r2, r4, asr #19
   289c4:	movw	r1, #19704	; 0x4cf8
   289c8:	movt	r1, #3
   289cc:	mov	r0, #0
   289d0:	mov	r2, #5
   289d4:	bl	1217c <dcgettext@plt>
   289d8:	ldm	r4, {r3, ip}
   289dc:	mov	r1, #1
   289e0:	str	ip, [sp]
   289e4:	ldr	ip, [r4, #8]
   289e8:	str	ip, [sp, #4]
   289ec:	ldr	ip, [r4, #12]
   289f0:	str	ip, [sp, #8]
   289f4:	ldr	ip, [r4, #16]
   289f8:	str	ip, [sp, #12]
   289fc:	ldr	ip, [r4, #20]
   28a00:	str	ip, [sp, #16]
   28a04:	ldr	ip, [r4, #24]
   28a08:	str	ip, [sp, #20]
   28a0c:	ldr	ip, [r4, #28]
   28a10:	str	ip, [sp, #24]
   28a14:	ldr	ip, [r4, #32]
   28a18:	str	ip, [sp, #28]
   28a1c:	mov	r2, r0
   28a20:	mov	r0, r5
   28a24:	bl	124d0 <__fprintf_chk@plt>
   28a28:	add	sp, sp, #32
   28a2c:	pop	{r4, r5, r6, pc}
   28a30:	bl	12674 <abort@plt>
   28a34:	mov	r2, #5
   28a38:	movw	r1, #19436	; 0x4bec
   28a3c:	mov	r0, #0
   28a40:	movt	r1, #3
   28a44:	bl	1217c <dcgettext@plt>
   28a48:	ldr	r3, [r4]
   28a4c:	mov	r1, #1
   28a50:	mov	r2, r0
   28a54:	mov	r0, r5
   28a58:	add	sp, sp, #32
   28a5c:	pop	{r4, r5, r6, lr}
   28a60:	b	124d0 <__fprintf_chk@plt>
   28a64:	mov	r2, #5
   28a68:	movw	r1, #19452	; 0x4bfc
   28a6c:	mov	r0, #0
   28a70:	movt	r1, #3
   28a74:	bl	1217c <dcgettext@plt>
   28a78:	ldm	r4, {r3, ip}
   28a7c:	mov	r1, #1
   28a80:	str	ip, [sp, #48]	; 0x30
   28a84:	mov	r2, r0
   28a88:	mov	r0, r5
   28a8c:	add	sp, sp, #32
   28a90:	pop	{r4, r5, r6, lr}
   28a94:	b	124d0 <__fprintf_chk@plt>
   28a98:	mov	r2, #5
   28a9c:	movw	r1, #19476	; 0x4c14
   28aa0:	mov	r0, #0
   28aa4:	movt	r1, #3
   28aa8:	bl	1217c <dcgettext@plt>
   28aac:	ldm	r4, {r3, ip}
   28ab0:	mov	r1, #1
   28ab4:	str	ip, [sp, #48]	; 0x30
   28ab8:	ldr	ip, [r4, #8]
   28abc:	str	ip, [sp, #52]	; 0x34
   28ac0:	mov	r2, r0
   28ac4:	mov	r0, r5
   28ac8:	add	sp, sp, #32
   28acc:	pop	{r4, r5, r6, lr}
   28ad0:	b	124d0 <__fprintf_chk@plt>
   28ad4:	mov	r2, #5
   28ad8:	movw	r1, #19504	; 0x4c30
   28adc:	mov	r0, #0
   28ae0:	movt	r1, #3
   28ae4:	bl	1217c <dcgettext@plt>
   28ae8:	ldm	r4, {r3, ip}
   28aec:	mov	r1, #1
   28af0:	str	ip, [sp]
   28af4:	ldr	ip, [r4, #8]
   28af8:	str	ip, [sp, #4]
   28afc:	ldr	ip, [r4, #12]
   28b00:	str	ip, [sp, #8]
   28b04:	mov	r2, r0
   28b08:	mov	r0, r5
   28b0c:	bl	124d0 <__fprintf_chk@plt>
   28b10:	b	28a28 <__assert_fail@plt+0x16354>
   28b14:	mov	r2, #5
   28b18:	movw	r1, #19536	; 0x4c50
   28b1c:	mov	r0, #0
   28b20:	movt	r1, #3
   28b24:	bl	1217c <dcgettext@plt>
   28b28:	ldm	r4, {r3, ip}
   28b2c:	mov	r1, #1
   28b30:	str	ip, [sp]
   28b34:	ldr	ip, [r4, #8]
   28b38:	str	ip, [sp, #4]
   28b3c:	ldr	ip, [r4, #12]
   28b40:	str	ip, [sp, #8]
   28b44:	ldr	ip, [r4, #16]
   28b48:	str	ip, [sp, #12]
   28b4c:	mov	r2, r0
   28b50:	mov	r0, r5
   28b54:	bl	124d0 <__fprintf_chk@plt>
   28b58:	b	28a28 <__assert_fail@plt+0x16354>
   28b5c:	mov	r2, #5
   28b60:	movw	r1, #19572	; 0x4c74
   28b64:	mov	r0, #0
   28b68:	movt	r1, #3
   28b6c:	bl	1217c <dcgettext@plt>
   28b70:	ldm	r4, {r3, ip}
   28b74:	mov	r1, #1
   28b78:	str	ip, [sp]
   28b7c:	ldr	ip, [r4, #8]
   28b80:	str	ip, [sp, #4]
   28b84:	ldr	ip, [r4, #12]
   28b88:	str	ip, [sp, #8]
   28b8c:	ldr	ip, [r4, #16]
   28b90:	str	ip, [sp, #12]
   28b94:	ldr	ip, [r4, #20]
   28b98:	str	ip, [sp, #16]
   28b9c:	mov	r2, r0
   28ba0:	mov	r0, r5
   28ba4:	bl	124d0 <__fprintf_chk@plt>
   28ba8:	b	28a28 <__assert_fail@plt+0x16354>
   28bac:	mov	r2, #5
   28bb0:	movw	r1, #19612	; 0x4c9c
   28bb4:	mov	r0, #0
   28bb8:	movt	r1, #3
   28bbc:	bl	1217c <dcgettext@plt>
   28bc0:	ldm	r4, {r3, ip}
   28bc4:	mov	r1, #1
   28bc8:	str	ip, [sp]
   28bcc:	ldr	ip, [r4, #8]
   28bd0:	str	ip, [sp, #4]
   28bd4:	ldr	ip, [r4, #12]
   28bd8:	str	ip, [sp, #8]
   28bdc:	ldr	ip, [r4, #16]
   28be0:	str	ip, [sp, #12]
   28be4:	ldr	ip, [r4, #20]
   28be8:	str	ip, [sp, #16]
   28bec:	ldr	ip, [r4, #24]
   28bf0:	str	ip, [sp, #20]
   28bf4:	mov	r2, r0
   28bf8:	mov	r0, r5
   28bfc:	bl	124d0 <__fprintf_chk@plt>
   28c00:	b	28a28 <__assert_fail@plt+0x16354>
   28c04:	mov	r2, #5
   28c08:	movw	r1, #19656	; 0x4cc8
   28c0c:	mov	r0, #0
   28c10:	movt	r1, #3
   28c14:	bl	1217c <dcgettext@plt>
   28c18:	ldm	r4, {r3, ip}
   28c1c:	mov	r1, #1
   28c20:	str	ip, [sp]
   28c24:	ldr	ip, [r4, #8]
   28c28:	str	ip, [sp, #4]
   28c2c:	ldr	ip, [r4, #12]
   28c30:	str	ip, [sp, #8]
   28c34:	ldr	ip, [r4, #16]
   28c38:	str	ip, [sp, #12]
   28c3c:	ldr	ip, [r4, #20]
   28c40:	str	ip, [sp, #16]
   28c44:	ldr	ip, [r4, #24]
   28c48:	str	ip, [sp, #20]
   28c4c:	ldr	ip, [r4, #28]
   28c50:	str	ip, [sp, #24]
   28c54:	mov	r2, r0
   28c58:	mov	r0, r5
   28c5c:	bl	124d0 <__fprintf_chk@plt>
   28c60:	b	28a28 <__assert_fail@plt+0x16354>
   28c64:	str	r3, [sp]
   28c68:	mov	r1, #1
   28c6c:	mov	r3, r2
   28c70:	movw	r2, #19220	; 0x4b14
   28c74:	movt	r2, #3
   28c78:	bl	124d0 <__fprintf_chk@plt>
   28c7c:	b	28940 <__assert_fail@plt+0x1626c>
   28c80:	movw	r1, #19756	; 0x4d2c
   28c84:	mov	r0, #0
   28c88:	movt	r1, #3
   28c8c:	b	289d0 <__assert_fail@plt+0x162fc>
   28c90:	push	{r4, r5, lr}
   28c94:	sub	sp, sp, #12
   28c98:	ldr	r5, [sp, #24]
   28c9c:	ldr	ip, [r5]
   28ca0:	cmp	ip, #0
   28ca4:	beq	28cc0 <__assert_fail@plt+0x165ec>
   28ca8:	mov	lr, r5
   28cac:	mov	ip, #0
   28cb0:	ldr	r4, [lr, #4]!
   28cb4:	add	ip, ip, #1
   28cb8:	cmp	r4, #0
   28cbc:	bne	28cb0 <__assert_fail@plt+0x165dc>
   28cc0:	stm	sp, {r5, ip}
   28cc4:	bl	28904 <__assert_fail@plt+0x16230>
   28cc8:	add	sp, sp, #12
   28ccc:	pop	{r4, r5, pc}
   28cd0:	push	{r4, r5, r6, r7, lr}
   28cd4:	movw	r7, #26008	; 0x6598
   28cd8:	sub	sp, sp, #60	; 0x3c
   28cdc:	movt	r7, #4
   28ce0:	mov	ip, #0
   28ce4:	add	r5, sp, #12
   28ce8:	ldr	r4, [r7]
   28cec:	mov	lr, ip
   28cf0:	ldr	r6, [sp, #80]	; 0x50
   28cf4:	str	r4, [sp, #52]	; 0x34
   28cf8:	ldr	r4, [r6, ip]
   28cfc:	cmp	r4, #0
   28d00:	str	r4, [r5, ip]
   28d04:	beq	28d18 <__assert_fail@plt+0x16644>
   28d08:	add	lr, lr, #1
   28d0c:	add	ip, ip, #4
   28d10:	cmp	lr, #10
   28d14:	bne	28cf8 <__assert_fail@plt+0x16624>
   28d18:	stm	sp, {r5, lr}
   28d1c:	bl	28904 <__assert_fail@plt+0x16230>
   28d20:	ldr	r2, [sp, #52]	; 0x34
   28d24:	ldr	r3, [r7]
   28d28:	cmp	r2, r3
   28d2c:	bne	28d38 <__assert_fail@plt+0x16664>
   28d30:	add	sp, sp, #60	; 0x3c
   28d34:	pop	{r4, r5, r6, r7, pc}
   28d38:	bl	12188 <__stack_chk_fail@plt>
   28d3c:	push	{r3}		; (str r3, [sp, #-4]!)
   28d40:	push	{r4, lr}
   28d44:	movw	r4, #26008	; 0x6598
   28d48:	movt	r4, #4
   28d4c:	sub	sp, sp, #20
   28d50:	add	ip, sp, #32
   28d54:	ldr	lr, [r4]
   28d58:	ldr	r3, [sp, #28]
   28d5c:	str	ip, [sp]
   28d60:	str	ip, [sp, #8]
   28d64:	str	lr, [sp, #12]
   28d68:	bl	28cd0 <__assert_fail@plt+0x165fc>
   28d6c:	ldr	r2, [sp, #12]
   28d70:	ldr	r3, [r4]
   28d74:	cmp	r2, r3
   28d78:	bne	28d8c <__assert_fail@plt+0x166b8>
   28d7c:	add	sp, sp, #20
   28d80:	pop	{r4, lr}
   28d84:	add	sp, sp, #4
   28d88:	bx	lr
   28d8c:	bl	12188 <__stack_chk_fail@plt>
   28d90:	push	{r3, lr}
   28d94:	mov	r2, #5
   28d98:	movw	r1, #19816	; 0x4d68
   28d9c:	mov	r0, #0
   28da0:	movt	r1, #3
   28da4:	bl	1217c <dcgettext@plt>
   28da8:	movw	r2, #19840	; 0x4d80
   28dac:	movt	r2, #3
   28db0:	mov	r1, r0
   28db4:	mov	r0, #1
   28db8:	bl	124a0 <__printf_chk@plt>
   28dbc:	mov	r2, #5
   28dc0:	movw	r1, #19864	; 0x4d98
   28dc4:	mov	r0, #0
   28dc8:	movt	r1, #3
   28dcc:	bl	1217c <dcgettext@plt>
   28dd0:	movw	r2, #13768	; 0x35c8
   28dd4:	movw	r3, #19884	; 0x4dac
   28dd8:	movt	r2, #3
   28ddc:	movt	r3, #3
   28de0:	mov	r1, r0
   28de4:	mov	r0, #1
   28de8:	bl	124a0 <__printf_chk@plt>
   28dec:	movw	r1, #19924	; 0x4dd4
   28df0:	mov	r0, #0
   28df4:	movt	r1, #3
   28df8:	mov	r2, #5
   28dfc:	bl	1217c <dcgettext@plt>
   28e00:	movw	r3, #26024	; 0x65a8
   28e04:	movt	r3, #4
   28e08:	ldr	r1, [r3]
   28e0c:	pop	{r3, lr}
   28e10:	b	12650 <fputs@plt>
   28e14:	push	{r4, lr}
   28e18:	mov	r4, r0
   28e1c:	bl	1232c <malloc@plt>
   28e20:	rsbs	r3, r0, #1
   28e24:	movcc	r3, #0
   28e28:	cmp	r4, #0
   28e2c:	moveq	r3, #0
   28e30:	cmp	r3, #0
   28e34:	popeq	{r4, pc}
   28e38:	bl	28f4c <__assert_fail@plt+0x16878>
   28e3c:	rsbs	r3, r1, #1
   28e40:	push	{r4, lr}
   28e44:	movcc	r3, #0
   28e48:	cmp	r0, #0
   28e4c:	mov	r4, r1
   28e50:	moveq	r3, #0
   28e54:	cmp	r3, #0
   28e58:	bne	28e7c <__assert_fail@plt+0x167a8>
   28e5c:	bl	121ac <realloc@plt>
   28e60:	rsbs	r3, r0, #1
   28e64:	movcc	r3, #0
   28e68:	cmp	r4, #0
   28e6c:	moveq	r3, #0
   28e70:	cmp	r3, #0
   28e74:	popeq	{r4, pc}
   28e78:	bl	28f4c <__assert_fail@plt+0x16878>
   28e7c:	bl	120c8 <free@plt>
   28e80:	mov	r0, #0
   28e84:	pop	{r4, pc}
   28e88:	cmp	r0, #0
   28e8c:	push	{r3, lr}
   28e90:	ldr	r3, [r1]
   28e94:	beq	28ec0 <__assert_fail@plt+0x167ec>
   28e98:	movw	r2, #43689	; 0xaaa9
   28e9c:	movt	r2, #43690	; 0xaaaa
   28ea0:	cmp	r3, r2
   28ea4:	addls	r2, r3, #1
   28ea8:	addls	r3, r3, r2, lsr #1
   28eac:	bhi	28ed8 <__assert_fail@plt+0x16804>
   28eb0:	str	r3, [r1]
   28eb4:	mov	r1, r3
   28eb8:	pop	{r3, lr}
   28ebc:	b	28e3c <__assert_fail@plt+0x16768>
   28ec0:	cmp	r3, #0
   28ec4:	moveq	r3, #64	; 0x40
   28ec8:	str	r3, [r1]
   28ecc:	mov	r1, r3
   28ed0:	pop	{r3, lr}
   28ed4:	b	28e3c <__assert_fail@plt+0x16768>
   28ed8:	bl	28f4c <__assert_fail@plt+0x16878>
   28edc:	push	{r4, lr}
   28ee0:	mov	r4, r0
   28ee4:	bl	28e14 <__assert_fail@plt+0x16740>
   28ee8:	mov	r2, r4
   28eec:	mov	r1, #0
   28ef0:	pop	{r4, lr}
   28ef4:	b	12464 <memset@plt>
   28ef8:	push	{r3, lr}
   28efc:	bl	12014 <calloc@plt>
   28f00:	cmp	r0, #0
   28f04:	popne	{r3, pc}
   28f08:	bl	28f4c <__assert_fail@plt+0x16878>
   28f0c:	push	{r3, r4, r5, lr}
   28f10:	mov	r4, r1
   28f14:	mov	r5, r0
   28f18:	mov	r0, r1
   28f1c:	bl	28e14 <__assert_fail@plt+0x16740>
   28f20:	mov	r1, r5
   28f24:	mov	r2, r4
   28f28:	pop	{r3, r4, r5, lr}
   28f2c:	b	12104 <memcpy@plt>
   28f30:	push	{r4, lr}
   28f34:	mov	r4, r0
   28f38:	bl	123d4 <strlen@plt>
   28f3c:	add	r1, r0, #1
   28f40:	mov	r0, r4
   28f44:	pop	{r4, lr}
   28f48:	b	28f0c <__assert_fail@plt+0x16838>
   28f4c:	movw	r3, #25924	; 0x6544
   28f50:	movt	r3, #4
   28f54:	push	{r4, lr}
   28f58:	mov	r2, #5
   28f5c:	movw	r1, #20036	; 0x4e44
   28f60:	mov	r0, #0
   28f64:	movt	r1, #3
   28f68:	ldr	r4, [r3]
   28f6c:	bl	1217c <dcgettext@plt>
   28f70:	movw	r2, #15064	; 0x3ad8
   28f74:	mov	r1, #0
   28f78:	movt	r2, #3
   28f7c:	mov	r3, r0
   28f80:	mov	r0, r4
   28f84:	bl	122cc <error@plt>
   28f88:	bl	12674 <abort@plt>
   28f8c:	push	{r3, lr}
   28f90:	bl	121e8 <__strndup@plt>
   28f94:	cmp	r0, #0
   28f98:	popne	{r3, pc}
   28f9c:	bl	28f4c <__assert_fail@plt+0x16878>
   28fa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28fa4:	movw	r4, #26008	; 0x6598
   28fa8:	movt	r4, #4
   28fac:	mov	r5, r1
   28fb0:	sub	sp, sp, #8
   28fb4:	mov	r6, r0
   28fb8:	ldr	r1, [r4]
   28fbc:	mov	sl, r3
   28fc0:	mov	r9, r2
   28fc4:	mov	r8, #0
   28fc8:	str	r1, [sp, #4]
   28fcc:	bl	12434 <__errno_location@plt>
   28fd0:	mov	r1, sp
   28fd4:	mov	r7, r0
   28fd8:	mov	r0, r6
   28fdc:	str	r8, [r7]
   28fe0:	blx	sl
   28fe4:	ldr	r3, [sp]
   28fe8:	cmp	r3, r6
   28fec:	beq	2903c <__assert_fail@plt+0x16968>
   28ff0:	cmp	r5, r8
   28ff4:	beq	29044 <__assert_fail@plt+0x16970>
   28ff8:	vcmp.f64	d0, #0.0
   28ffc:	vmrs	APSR_nzcv, fpscr
   29000:	moveq	r0, #1
   29004:	bne	2902c <__assert_fail@plt+0x16958>
   29008:	cmp	r5, #0
   2900c:	strne	r3, [r5]
   29010:	ldr	r2, [sp, #4]
   29014:	vstr	d0, [r9]
   29018:	ldr	r3, [r4]
   2901c:	cmp	r2, r3
   29020:	bne	29058 <__assert_fail@plt+0x16984>
   29024:	add	sp, sp, #8
   29028:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2902c:	ldr	r0, [r7]
   29030:	subs	r0, r0, #34	; 0x22
   29034:	movne	r0, #1
   29038:	b	29008 <__assert_fail@plt+0x16934>
   2903c:	mov	r0, r8
   29040:	b	29008 <__assert_fail@plt+0x16934>
   29044:	ldrb	r2, [r3]
   29048:	cmp	r2, r8
   2904c:	movne	r0, r5
   29050:	bne	29010 <__assert_fail@plt+0x1693c>
   29054:	b	28ff8 <__assert_fail@plt+0x16924>
   29058:	bl	12188 <__stack_chk_fail@plt>
   2905c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29060:	movw	r5, #26008	; 0x6598
   29064:	movt	r5, #4
   29068:	mov	sl, r2
   2906c:	cmp	r2, #36	; 0x24
   29070:	sub	sp, sp, #20
   29074:	ldr	r2, [r5]
   29078:	mov	r6, r0
   2907c:	mov	r7, r1
   29080:	mov	r9, r3
   29084:	ldr	r8, [sp, #56]	; 0x38
   29088:	str	r2, [sp, #12]
   2908c:	bhi	29554 <__assert_fail@plt+0x16e80>
   29090:	cmp	r1, #0
   29094:	addeq	r7, sp, #8
   29098:	bl	12398 <__ctype_b_loc@plt>
   2909c:	ldrb	ip, [r6]
   290a0:	mov	r2, r6
   290a4:	ldr	r1, [r0]
   290a8:	b	290b0 <__assert_fail@plt+0x169dc>
   290ac:	ldrb	ip, [r2, #1]!
   290b0:	lsl	r3, ip, #1
   290b4:	ldrh	r4, [r1, r3]
   290b8:	and	r4, r4, #8192	; 0x2000
   290bc:	uxth	r4, r4
   290c0:	cmp	r4, #0
   290c4:	bne	290ac <__assert_fail@plt+0x169d8>
   290c8:	cmp	ip, #45	; 0x2d
   290cc:	bne	290ec <__assert_fail@plt+0x16a18>
   290d0:	mov	r0, #4
   290d4:	ldr	r2, [sp, #12]
   290d8:	ldr	r3, [r5]
   290dc:	cmp	r2, r3
   290e0:	bne	29550 <__assert_fail@plt+0x16e7c>
   290e4:	add	sp, sp, #20
   290e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   290ec:	bl	12434 <__errno_location@plt>
   290f0:	mov	r2, sl
   290f4:	mov	r1, r7
   290f8:	str	r4, [r0]
   290fc:	mov	fp, r0
   29100:	mov	r0, r6
   29104:	bl	123c8 <strtoul@plt>
   29108:	ldr	r3, [r7]
   2910c:	cmp	r3, r6
   29110:	mov	sl, r0
   29114:	beq	292a4 <__assert_fail@plt+0x16bd0>
   29118:	ldr	r0, [fp]
   2911c:	cmp	r0, #0
   29120:	bne	29150 <__assert_fail@plt+0x16a7c>
   29124:	mov	r4, r0
   29128:	cmp	r8, #0
   2912c:	streq	sl, [r9]
   29130:	moveq	r0, r4
   29134:	beq	290d4 <__assert_fail@plt+0x16a00>
   29138:	ldrb	r6, [r3]
   2913c:	cmp	r6, #0
   29140:	bne	29160 <__assert_fail@plt+0x16a8c>
   29144:	mov	r0, r4
   29148:	str	sl, [r9]
   2914c:	b	290d4 <__assert_fail@plt+0x16a00>
   29150:	cmp	r0, #34	; 0x22
   29154:	moveq	r4, #1
   29158:	bne	290d0 <__assert_fail@plt+0x169fc>
   2915c:	b	29128 <__assert_fail@plt+0x16a54>
   29160:	mov	r0, r8
   29164:	mov	r1, r6
   29168:	str	r3, [sp, #4]
   2916c:	bl	123e0 <strchr@plt>
   29170:	ldr	r3, [sp, #4]
   29174:	cmp	r0, #0
   29178:	beq	292dc <__assert_fail@plt+0x16c08>
   2917c:	mov	r0, r8
   29180:	mov	r1, #48	; 0x30
   29184:	str	r3, [sp, #4]
   29188:	bl	123e0 <strchr@plt>
   2918c:	ldr	r3, [sp, #4]
   29190:	cmp	r0, #0
   29194:	beq	291b4 <__assert_fail@plt+0x16ae0>
   29198:	ldrb	r2, [r3, #1]
   2919c:	cmp	r2, #68	; 0x44
   291a0:	beq	29538 <__assert_fail@plt+0x16e64>
   291a4:	cmp	r2, #105	; 0x69
   291a8:	beq	29520 <__assert_fail@plt+0x16e4c>
   291ac:	cmp	r2, #66	; 0x42
   291b0:	beq	29538 <__assert_fail@plt+0x16e64>
   291b4:	mov	r8, #1
   291b8:	mov	fp, #1024	; 0x400
   291bc:	sub	r6, r6, #66	; 0x42
   291c0:	cmp	r6, #53	; 0x35
   291c4:	ldrls	pc, [pc, r6, lsl #2]
   291c8:	b	292dc <__assert_fail@plt+0x16c08>
   291cc:	andeq	r9, r2, ip, asr #9
   291d0:	ldrdeq	r9, [r2], -ip
   291d4:	ldrdeq	r9, [r2], -ip
   291d8:	andeq	r9, r2, ip, lsl #9
   291dc:	ldrdeq	r9, [r2], -ip
   291e0:	andeq	r9, r2, r0, ror #9
   291e4:	ldrdeq	r9, [r2], -ip
   291e8:	ldrdeq	r9, [r2], -ip
   291ec:	ldrdeq	r9, [r2], -ip
   291f0:	andeq	r9, r2, ip, ror #8
   291f4:	ldrdeq	r9, [r2], -ip
   291f8:	andeq	r9, r2, r8, lsr r4
   291fc:	ldrdeq	r9, [r2], -ip
   29200:	ldrdeq	r9, [r2], -ip
   29204:	strdeq	r9, [r2], -r8
   29208:	ldrdeq	r9, [r2], -ip
   2920c:	ldrdeq	r9, [r2], -ip
   29210:	ldrdeq	r9, [r2], -ip
   29214:			; <UNDEFINED> instruction: 0x000293b8
   29218:	ldrdeq	r9, [r2], -ip
   2921c:	ldrdeq	r9, [r2], -ip
   29220:	ldrdeq	r9, [r2], -ip
   29224:	ldrdeq	r9, [r2], -ip
   29228:	andeq	r9, r2, r8, ror r3
   2922c:	andeq	r9, r2, r8, lsr r3
   29230:	ldrdeq	r9, [r2], -ip
   29234:	ldrdeq	r9, [r2], -ip
   29238:	ldrdeq	r9, [r2], -ip
   2923c:	ldrdeq	r9, [r2], -ip
   29240:	ldrdeq	r9, [r2], -ip
   29244:	ldrdeq	r9, [r2], -ip
   29248:	ldrdeq	r9, [r2], -ip
   2924c:	andeq	r9, r2, r4, lsr #6
   29250:	andeq	r9, r2, r8, ror #5
   29254:	ldrdeq	r9, [r2], -ip
   29258:	ldrdeq	r9, [r2], -ip
   2925c:	ldrdeq	r9, [r2], -ip
   29260:	andeq	r9, r2, r0, ror #9
   29264:	ldrdeq	r9, [r2], -ip
   29268:	ldrdeq	r9, [r2], -ip
   2926c:	ldrdeq	r9, [r2], -ip
   29270:	andeq	r9, r2, ip, ror #8
   29274:	ldrdeq	r9, [r2], -ip
   29278:	andeq	r9, r2, r8, lsr r4
   2927c:	ldrdeq	r9, [r2], -ip
   29280:	ldrdeq	r9, [r2], -ip
   29284:	ldrdeq	r9, [r2], -ip
   29288:	ldrdeq	r9, [r2], -ip
   2928c:	ldrdeq	r9, [r2], -ip
   29290:	ldrdeq	r9, [r2], -ip
   29294:			; <UNDEFINED> instruction: 0x000293b8
   29298:	ldrdeq	r9, [r2], -ip
   2929c:	ldrdeq	r9, [r2], -ip
   292a0:	andeq	r9, r2, r8, lsl #6
   292a4:	cmp	r8, #0
   292a8:	beq	290d0 <__assert_fail@plt+0x169fc>
   292ac:	ldrb	r6, [r6]
   292b0:	cmp	r6, #0
   292b4:	beq	290d0 <__assert_fail@plt+0x169fc>
   292b8:	mov	r0, r8
   292bc:	mov	r1, r6
   292c0:	str	r3, [sp, #4]
   292c4:	bl	123e0 <strchr@plt>
   292c8:	ldr	r3, [sp, #4]
   292cc:	cmp	r0, #0
   292d0:	movne	sl, #1
   292d4:	bne	2917c <__assert_fail@plt+0x16aa8>
   292d8:	b	290d0 <__assert_fail@plt+0x169fc>
   292dc:	str	sl, [r9]
   292e0:	orr	r0, r4, #2
   292e4:	b	290d4 <__assert_fail@plt+0x16a00>
   292e8:	mov	r2, #0
   292ec:	add	r1, r3, r8
   292f0:	str	r1, [r7]
   292f4:	ldrb	r3, [r3, r8]
   292f8:	orr	r4, r4, r2
   292fc:	cmp	r3, #0
   29300:	orrne	r4, r4, #2
   29304:	b	29144 <__assert_fail@plt+0x16a70>
   29308:	cmn	sl, #-2147483647	; 0x80000001
   2930c:	lslls	sl, sl, #1
   29310:	movls	r2, #0
   29314:	bls	292ec <__assert_fail@plt+0x16c18>
   29318:	mvn	sl, #0
   2931c:	mov	r2, #1
   29320:	b	292ec <__assert_fail@plt+0x16c18>
   29324:	cmp	sl, #8388608	; 0x800000
   29328:	lslcc	sl, sl, #9
   2932c:	movcc	r2, #0
   29330:	bcc	292ec <__assert_fail@plt+0x16c18>
   29334:	b	29318 <__assert_fail@plt+0x16c44>
   29338:	mov	r1, fp
   2933c:	mvn	r0, #0
   29340:	str	r3, [sp, #4]
   29344:	bl	2df44 <fts_children@@Base+0x1b78>
   29348:	ldr	r3, [sp, #4]
   2934c:	mov	r1, #7
   29350:	mov	r2, #0
   29354:	cmp	r0, sl
   29358:	movcs	ip, #0
   2935c:	movcc	ip, #1
   29360:	mulcs	sl, fp, sl
   29364:	mvncc	sl, #0
   29368:	subs	r1, r1, #1
   2936c:	orr	r2, r2, ip
   29370:	bne	29354 <__assert_fail@plt+0x16c80>
   29374:	b	292ec <__assert_fail@plt+0x16c18>
   29378:	mov	r1, fp
   2937c:	mvn	r0, #0
   29380:	str	r3, [sp, #4]
   29384:	bl	2df44 <fts_children@@Base+0x1b78>
   29388:	ldr	r3, [sp, #4]
   2938c:	mov	r1, #8
   29390:	mov	r2, #0
   29394:	cmp	r0, sl
   29398:	movcs	ip, #0
   2939c:	movcc	ip, #1
   293a0:	mulcs	sl, fp, sl
   293a4:	mvncc	sl, #0
   293a8:	subs	r1, r1, #1
   293ac:	orr	r2, r2, ip
   293b0:	bne	29394 <__assert_fail@plt+0x16cc0>
   293b4:	b	292ec <__assert_fail@plt+0x16c18>
   293b8:	mov	r1, fp
   293bc:	mvn	r0, #0
   293c0:	str	r3, [sp, #4]
   293c4:	bl	2df44 <fts_children@@Base+0x1b78>
   293c8:	ldr	r3, [sp, #4]
   293cc:	mov	r1, #4
   293d0:	mov	r2, #0
   293d4:	cmp	r0, sl
   293d8:	movcs	ip, #0
   293dc:	movcc	ip, #1
   293e0:	mulcs	sl, fp, sl
   293e4:	mvncc	sl, #0
   293e8:	subs	r1, r1, #1
   293ec:	orr	r2, r2, ip
   293f0:	bne	293d4 <__assert_fail@plt+0x16d00>
   293f4:	b	292ec <__assert_fail@plt+0x16c18>
   293f8:	mov	r1, fp
   293fc:	mvn	r0, #0
   29400:	str	r3, [sp, #4]
   29404:	bl	2df44 <fts_children@@Base+0x1b78>
   29408:	ldr	r3, [sp, #4]
   2940c:	mov	r1, #5
   29410:	mov	r2, #0
   29414:	cmp	r0, sl
   29418:	movcs	ip, #0
   2941c:	movcc	ip, #1
   29420:	mulcs	sl, fp, sl
   29424:	mvncc	sl, #0
   29428:	subs	r1, r1, #1
   2942c:	orr	r2, r2, ip
   29430:	bne	29414 <__assert_fail@plt+0x16d40>
   29434:	b	292ec <__assert_fail@plt+0x16c18>
   29438:	mvn	r0, #0
   2943c:	mov	r1, fp
   29440:	str	r3, [sp, #4]
   29444:	bl	2df44 <fts_children@@Base+0x1b78>
   29448:	ldr	r3, [sp, #4]
   2944c:	cmp	sl, r0
   29450:	bhi	29544 <__assert_fail@plt+0x16e70>
   29454:	mul	sl, sl, fp
   29458:	cmp	r0, sl
   2945c:	bcc	29544 <__assert_fail@plt+0x16e70>
   29460:	mul	sl, fp, sl
   29464:	mov	r2, #0
   29468:	b	292ec <__assert_fail@plt+0x16c18>
   2946c:	mvn	r0, #0
   29470:	mov	r1, fp
   29474:	str	r3, [sp, #4]
   29478:	bl	2df44 <fts_children@@Base+0x1b78>
   2947c:	ldr	r3, [sp, #4]
   29480:	cmp	sl, r0
   29484:	bhi	29318 <__assert_fail@plt+0x16c44>
   29488:	b	29460 <__assert_fail@plt+0x16d8c>
   2948c:	mov	r1, fp
   29490:	mvn	r0, #0
   29494:	str	r3, [sp, #4]
   29498:	bl	2df44 <fts_children@@Base+0x1b78>
   2949c:	ldr	r3, [sp, #4]
   294a0:	mov	r1, #6
   294a4:	mov	r2, #0
   294a8:	cmp	r0, sl
   294ac:	movcs	ip, #0
   294b0:	movcc	ip, #1
   294b4:	mulcs	sl, fp, sl
   294b8:	mvncc	sl, #0
   294bc:	subs	r1, r1, #1
   294c0:	orr	r2, r2, ip
   294c4:	bne	294a8 <__assert_fail@plt+0x16dd4>
   294c8:	b	292ec <__assert_fail@plt+0x16c18>
   294cc:	cmp	sl, #4194304	; 0x400000
   294d0:	lslcc	sl, sl, #10
   294d4:	movcc	r2, #0
   294d8:	bcc	292ec <__assert_fail@plt+0x16c18>
   294dc:	b	29318 <__assert_fail@plt+0x16c44>
   294e0:	mov	r1, fp
   294e4:	mvn	r0, #0
   294e8:	str	r3, [sp, #4]
   294ec:	bl	2df44 <fts_children@@Base+0x1b78>
   294f0:	ldr	r3, [sp, #4]
   294f4:	mov	r1, #3
   294f8:	mov	r2, #0
   294fc:	cmp	r0, sl
   29500:	movcs	ip, #0
   29504:	movcc	ip, #1
   29508:	mulcs	sl, fp, sl
   2950c:	mvncc	sl, #0
   29510:	subs	r1, r1, #1
   29514:	orr	r2, r2, ip
   29518:	bne	294fc <__assert_fail@plt+0x16e28>
   2951c:	b	292ec <__assert_fail@plt+0x16c18>
   29520:	ldrb	r8, [r3, #2]
   29524:	mov	fp, #1024	; 0x400
   29528:	cmp	r8, #66	; 0x42
   2952c:	moveq	r8, #3
   29530:	movne	r8, #1
   29534:	b	291bc <__assert_fail@plt+0x16ae8>
   29538:	mov	r8, #2
   2953c:	mov	fp, #1000	; 0x3e8
   29540:	b	291bc <__assert_fail@plt+0x16ae8>
   29544:	mov	r2, #1
   29548:	mvn	sl, #0
   2954c:	b	292ec <__assert_fail@plt+0x16c18>
   29550:	bl	12188 <__stack_chk_fail@plt>
   29554:	movw	r0, #20068	; 0x4e64
   29558:	movw	r1, #20108	; 0x4e8c
   2955c:	movw	r3, #20056	; 0x4e58
   29560:	movt	r0, #3
   29564:	movt	r1, #3
   29568:	mov	r2, #96	; 0x60
   2956c:	movt	r3, #3
   29570:	bl	126d4 <__assert_fail@plt>
   29574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29578:	movw	r8, #26008	; 0x6598
   2957c:	movt	r8, #4
   29580:	mov	sl, r2
   29584:	cmp	r2, #36	; 0x24
   29588:	sub	sp, sp, #36	; 0x24
   2958c:	ldr	r2, [r8]
   29590:	mov	r4, r0
   29594:	mov	r6, r1
   29598:	mov	r7, r3
   2959c:	ldr	r5, [sp, #72]	; 0x48
   295a0:	str	r2, [sp, #28]
   295a4:	bhi	29ca0 <__assert_fail@plt+0x175cc>
   295a8:	cmp	r1, #0
   295ac:	addeq	r6, sp, #24
   295b0:	bl	12398 <__ctype_b_loc@plt>
   295b4:	ldrb	r3, [r4]
   295b8:	mov	r1, r4
   295bc:	ldr	r0, [r0]
   295c0:	b	295c8 <__assert_fail@plt+0x16ef4>
   295c4:	ldrb	r3, [r1, #1]!
   295c8:	lsl	r2, r3, #1
   295cc:	ldrh	fp, [r0, r2]
   295d0:	and	fp, fp, #8192	; 0x2000
   295d4:	uxth	fp, fp
   295d8:	cmp	fp, #0
   295dc:	bne	295c4 <__assert_fail@plt+0x16ef0>
   295e0:	cmp	r3, #45	; 0x2d
   295e4:	bne	29604 <__assert_fail@plt+0x16f30>
   295e8:	mov	r0, #4
   295ec:	ldr	r2, [sp, #28]
   295f0:	ldr	r3, [r8]
   295f4:	cmp	r2, r3
   295f8:	bne	29c9c <__assert_fail@plt+0x175c8>
   295fc:	add	sp, sp, #36	; 0x24
   29600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29604:	bl	12434 <__errno_location@plt>
   29608:	mov	r2, sl
   2960c:	mov	r1, r6
   29610:	mov	r3, fp
   29614:	str	fp, [r0]
   29618:	mov	r9, r0
   2961c:	mov	r0, r4
   29620:	bl	1211c <__strtoull_internal@plt>
   29624:	ldr	sl, [r6]
   29628:	cmp	sl, r4
   2962c:	strd	r0, [sp]
   29630:	beq	297ac <__assert_fail@plt+0x170d8>
   29634:	ldr	fp, [r9]
   29638:	cmp	fp, #0
   2963c:	bne	29664 <__assert_fail@plt+0x16f90>
   29640:	cmp	r5, #0
   29644:	beq	29c28 <__assert_fail@plt+0x17554>
   29648:	ldrb	r4, [sl]
   2964c:	cmp	r4, #0
   29650:	bne	29674 <__assert_fail@plt+0x16fa0>
   29654:	ldrd	r4, [sp]
   29658:	mov	r0, fp
   2965c:	strd	r4, [r7]
   29660:	b	295ec <__assert_fail@plt+0x16f18>
   29664:	cmp	fp, #34	; 0x22
   29668:	bne	295e8 <__assert_fail@plt+0x16f14>
   2966c:	mov	fp, #1
   29670:	b	29640 <__assert_fail@plt+0x16f6c>
   29674:	mov	r0, r5
   29678:	mov	r1, r4
   2967c:	bl	123e0 <strchr@plt>
   29680:	cmp	r0, #0
   29684:	beq	297e4 <__assert_fail@plt+0x17110>
   29688:	mov	r0, r5
   2968c:	mov	r1, #48	; 0x30
   29690:	bl	123e0 <strchr@plt>
   29694:	cmp	r0, #0
   29698:	beq	29c78 <__assert_fail@plt+0x175a4>
   2969c:	ldrb	r3, [sl, #1]
   296a0:	cmp	r3, #68	; 0x44
   296a4:	beq	29c54 <__assert_fail@plt+0x17580>
   296a8:	cmp	r3, #105	; 0x69
   296ac:	beq	29c38 <__assert_fail@plt+0x17564>
   296b0:	cmp	r3, #66	; 0x42
   296b4:	beq	29c54 <__assert_fail@plt+0x17580>
   296b8:	mov	r9, #1024	; 0x400
   296bc:	mov	r5, #1
   296c0:	str	r5, [sp, #20]
   296c4:	sub	r4, r4, #66	; 0x42
   296c8:	cmp	r4, #53	; 0x35
   296cc:	ldrls	pc, [pc, r4, lsl #2]
   296d0:	b	297e4 <__assert_fail@plt+0x17110>
   296d4:	andeq	r9, r2, ip, lsr #20
   296d8:	andeq	r9, r2, r4, ror #15
   296dc:	andeq	r9, r2, r4, ror #15
   296e0:			; <UNDEFINED> instruction: 0x000299bc
   296e4:	andeq	r9, r2, r4, ror #15
   296e8:	andeq	r9, r2, r4, asr #18
   296ec:	andeq	r9, r2, r4, ror #15
   296f0:	andeq	r9, r2, r4, ror #15
   296f4:	andeq	r9, r2, r4, ror #15
   296f8:	strdeq	r9, [r2], -r4
   296fc:	andeq	r9, r2, r4, ror #15
   29700:	andeq	r9, r2, ip, ror r8
   29704:	andeq	r9, r2, r4, ror #15
   29708:	andeq	r9, r2, r4, ror #15
   2970c:			; <UNDEFINED> instruction: 0x00029bb8
   29710:	andeq	r9, r2, r4, ror #15
   29714:	andeq	r9, r2, r4, ror #15
   29718:	andeq	r9, r2, r4, ror #15
   2971c:	andeq	r9, r2, r8, asr #22
   29720:	andeq	r9, r2, r4, ror #15
   29724:	andeq	r9, r2, r4, ror #15
   29728:	andeq	r9, r2, r4, ror #15
   2972c:	andeq	r9, r2, r4, ror #15
   29730:	ldrdeq	r9, [r2], -r8
   29734:	andeq	r9, r2, r8, ror #20
   29738:	andeq	r9, r2, r4, ror #15
   2973c:	andeq	r9, r2, r4, ror #15
   29740:	andeq	r9, r2, r4, ror #15
   29744:	andeq	r9, r2, r4, ror #15
   29748:	andeq	r9, r2, r4, ror #15
   2974c:	andeq	r9, r2, r4, ror #15
   29750:	andeq	r9, r2, r4, ror #15
   29754:	andeq	r9, r2, r8, lsl r8
   29758:	strdeq	r9, [r2], -r4
   2975c:	andeq	r9, r2, r4, ror #15
   29760:	andeq	r9, r2, r4, ror #15
   29764:	andeq	r9, r2, r4, ror #15
   29768:	andeq	r9, r2, r4, asr #18
   2976c:	andeq	r9, r2, r4, ror #15
   29770:	andeq	r9, r2, r4, ror #15
   29774:	andeq	r9, r2, r4, ror #15
   29778:	strdeq	r9, [r2], -r4
   2977c:	andeq	r9, r2, r4, ror #15
   29780:	andeq	r9, r2, ip, ror r8
   29784:	andeq	r9, r2, r4, ror #15
   29788:	andeq	r9, r2, r4, ror #15
   2978c:	andeq	r9, r2, r4, ror #15
   29790:	andeq	r9, r2, r4, ror #15
   29794:	andeq	r9, r2, r4, ror #15
   29798:	andeq	r9, r2, r4, ror #15
   2979c:	andeq	r9, r2, r8, asr #22
   297a0:	andeq	r9, r2, r4, ror #15
   297a4:	andeq	r9, r2, r4, ror #15
   297a8:	andeq	r9, r2, r4, asr r8
   297ac:	cmp	r5, #0
   297b0:	beq	295e8 <__assert_fail@plt+0x16f14>
   297b4:	ldrb	r4, [r4]
   297b8:	cmp	r4, #0
   297bc:	beq	295e8 <__assert_fail@plt+0x16f14>
   297c0:	mov	r1, r4
   297c4:	mov	r0, r5
   297c8:	bl	123e0 <strchr@plt>
   297cc:	cmp	r0, #0
   297d0:	movne	r0, #1
   297d4:	movne	r1, #0
   297d8:	strdne	r0, [sp]
   297dc:	bne	29688 <__assert_fail@plt+0x16fb4>
   297e0:	b	295e8 <__assert_fail@plt+0x16f14>
   297e4:	ldrd	r4, [sp]
   297e8:	orr	r0, fp, #2
   297ec:	strd	r4, [r7]
   297f0:	b	295ec <__assert_fail@plt+0x16f18>
   297f4:	mov	r1, #0
   297f8:	ldr	r5, [sp, #20]
   297fc:	orr	fp, fp, r1
   29800:	add	r3, sl, r5
   29804:	str	r3, [r6]
   29808:	ldrb	r3, [sl, r5]
   2980c:	cmp	r3, #0
   29810:	orrne	fp, fp, #2
   29814:	b	29654 <__assert_fail@plt+0x16f80>
   29818:	ldrd	r4, [sp]
   2981c:	movw	r3, #65535	; 0xffff
   29820:	movt	r3, #127	; 0x7f
   29824:	mvn	r2, #0
   29828:	cmp	r5, r3
   2982c:	cmpeq	r4, r2
   29830:	bhi	29c64 <__assert_fail@plt+0x17590>
   29834:	lsl	r3, r5, #9
   29838:	ldr	r5, [sp]
   2983c:	lsl	r2, r4, #9
   29840:	mov	r1, #0
   29844:	str	r2, [sp]
   29848:	orr	r3, r3, r5, lsr #23
   2984c:	str	r3, [sp, #4]
   29850:	b	297f8 <__assert_fail@plt+0x17124>
   29854:	ldrd	r4, [sp]
   29858:	cmp	r4, #0
   2985c:	sbcs	r5, r5, #0
   29860:	blt	29c64 <__assert_fail@plt+0x17590>
   29864:	ldrd	r4, [sp]
   29868:	mov	r1, #0
   2986c:	adds	r4, r4, r4
   29870:	adc	r5, r5, r5
   29874:	strd	r4, [sp]
   29878:	b	297f8 <__assert_fail@plt+0x17124>
   2987c:	asr	r5, r9, #31
   29880:	mvn	r0, #0
   29884:	mvn	r1, #0
   29888:	mov	r2, r9
   2988c:	mov	r3, r5
   29890:	mov	r4, r9
   29894:	strd	r4, [sp, #8]
   29898:	bl	2e550 <fts_children@@Base+0x2184>
   2989c:	ldrd	r4, [sp]
   298a0:	cmp	r5, r1
   298a4:	cmpeq	r4, r0
   298a8:	bhi	29c88 <__assert_fail@plt+0x175b4>
   298ac:	mul	ip, r9, r5
   298b0:	ldr	r2, [sp]
   298b4:	ldr	r5, [sp, #12]
   298b8:	mla	r4, r2, r5, ip
   298bc:	umull	r2, r3, r9, r2
   298c0:	add	r3, r4, r3
   298c4:	cmp	r1, r3
   298c8:	cmpeq	r0, r2
   298cc:	bcc	29c88 <__assert_fail@plt+0x175b4>
   298d0:	ldr	r4, [sp, #8]
   298d4:	mov	r1, #0
   298d8:	mul	r0, r2, r5
   298dc:	mla	r3, r4, r3, r0
   298e0:	umull	r4, r5, r2, r4
   298e4:	add	r3, r3, r5
   298e8:	strd	r4, [sp]
   298ec:	str	r3, [sp, #4]
   298f0:	b	297f8 <__assert_fail@plt+0x17124>
   298f4:	asr	r5, r9, #31
   298f8:	mov	r2, r9
   298fc:	mvn	r0, #0
   29900:	mvn	r1, #0
   29904:	mov	r3, r5
   29908:	bl	2e550 <fts_children@@Base+0x2184>
   2990c:	ldrd	r2, [sp]
   29910:	cmp	r3, r1
   29914:	cmpeq	r2, r0
   29918:	bhi	29c64 <__assert_fail@plt+0x17590>
   2991c:	ldr	r4, [sp, #4]
   29920:	mov	r1, #0
   29924:	mul	r3, r2, r5
   29928:	ldr	r5, [sp]
   2992c:	mla	r3, r9, r4, r3
   29930:	umull	r4, r5, r5, r9
   29934:	add	r3, r3, r5
   29938:	strd	r4, [sp]
   2993c:	str	r3, [sp, #4]
   29940:	b	297f8 <__assert_fail@plt+0x17124>
   29944:	asr	r5, r9, #31
   29948:	mov	r2, r9
   2994c:	mvn	r0, #0
   29950:	mvn	r1, #0
   29954:	mov	r3, r5
   29958:	mov	r4, r9
   2995c:	bl	2e550 <fts_children@@Base+0x2184>
   29960:	mov	r3, #3
   29964:	str	r8, [sp, #16]
   29968:	strd	r0, [sp, #8]
   2996c:	mov	r0, r3
   29970:	ldrd	r2, [sp]
   29974:	mov	r1, #0
   29978:	ldrd	r8, [sp, #8]
   2997c:	cmp	r9, r3
   29980:	cmpeq	r8, r2
   29984:	mulcs	r9, r2, r5
   29988:	movcs	ip, #0
   2998c:	mlacs	r9, r4, r3, r9
   29990:	movcc	ip, #1
   29994:	umullcs	r2, r3, r2, r4
   29998:	mvncc	r2, #0
   2999c:	mvncc	r3, #0
   299a0:	orr	r1, r1, ip
   299a4:	addcs	r3, r9, r3
   299a8:	subs	r0, r0, #1
   299ac:	bne	29978 <__assert_fail@plt+0x172a4>
   299b0:	strd	r2, [sp]
   299b4:	ldr	r8, [sp, #16]
   299b8:	b	297f8 <__assert_fail@plt+0x17124>
   299bc:	asr	r5, r9, #31
   299c0:	mov	r2, r9
   299c4:	mvn	r0, #0
   299c8:	mvn	r1, #0
   299cc:	mov	r3, r5
   299d0:	mov	r4, r9
   299d4:	bl	2e550 <fts_children@@Base+0x2184>
   299d8:	mov	r3, #6
   299dc:	str	r8, [sp, #16]
   299e0:	strd	r0, [sp, #8]
   299e4:	mov	r0, r3
   299e8:	ldrd	r2, [sp]
   299ec:	mov	r1, #0
   299f0:	ldrd	r8, [sp, #8]
   299f4:	cmp	r9, r3
   299f8:	cmpeq	r8, r2
   299fc:	mulcs	r9, r2, r5
   29a00:	movcs	ip, #0
   29a04:	mlacs	r9, r4, r3, r9
   29a08:	movcc	ip, #1
   29a0c:	umullcs	r2, r3, r2, r4
   29a10:	mvncc	r2, #0
   29a14:	mvncc	r3, #0
   29a18:	orr	r1, r1, ip
   29a1c:	addcs	r3, r9, r3
   29a20:	subs	r0, r0, #1
   29a24:	bne	299f0 <__assert_fail@plt+0x1731c>
   29a28:	b	299b0 <__assert_fail@plt+0x172dc>
   29a2c:	ldrd	r4, [sp]
   29a30:	movw	r3, #65535	; 0xffff
   29a34:	movt	r3, #63	; 0x3f
   29a38:	mvn	r2, #0
   29a3c:	cmp	r5, r3
   29a40:	cmpeq	r4, r2
   29a44:	bhi	29c64 <__assert_fail@plt+0x17590>
   29a48:	lsl	r3, r5, #10
   29a4c:	ldr	r5, [sp]
   29a50:	lsl	r2, r4, #10
   29a54:	mov	r1, #0
   29a58:	str	r2, [sp]
   29a5c:	orr	r3, r3, r5, lsr #22
   29a60:	str	r3, [sp, #4]
   29a64:	b	297f8 <__assert_fail@plt+0x17124>
   29a68:	asr	r5, r9, #31
   29a6c:	mov	r2, r9
   29a70:	mvn	r0, #0
   29a74:	mvn	r1, #0
   29a78:	mov	r3, r5
   29a7c:	mov	r4, r9
   29a80:	bl	2e550 <fts_children@@Base+0x2184>
   29a84:	mov	r3, #7
   29a88:	str	r8, [sp, #16]
   29a8c:	strd	r0, [sp, #8]
   29a90:	mov	r0, r3
   29a94:	ldrd	r2, [sp]
   29a98:	mov	r1, #0
   29a9c:	ldrd	r8, [sp, #8]
   29aa0:	cmp	r9, r3
   29aa4:	cmpeq	r8, r2
   29aa8:	mulcs	r9, r2, r5
   29aac:	movcs	ip, #0
   29ab0:	mlacs	r9, r4, r3, r9
   29ab4:	movcc	ip, #1
   29ab8:	umullcs	r2, r3, r2, r4
   29abc:	mvncc	r2, #0
   29ac0:	mvncc	r3, #0
   29ac4:	orr	r1, r1, ip
   29ac8:	addcs	r3, r9, r3
   29acc:	subs	r0, r0, #1
   29ad0:	bne	29a9c <__assert_fail@plt+0x173c8>
   29ad4:	b	299b0 <__assert_fail@plt+0x172dc>
   29ad8:	asr	r5, r9, #31
   29adc:	mov	r2, r9
   29ae0:	mvn	r0, #0
   29ae4:	mvn	r1, #0
   29ae8:	mov	r3, r5
   29aec:	mov	r4, r9
   29af0:	bl	2e550 <fts_children@@Base+0x2184>
   29af4:	mov	r3, #8
   29af8:	str	r8, [sp, #16]
   29afc:	strd	r0, [sp, #8]
   29b00:	mov	r0, r3
   29b04:	ldrd	r2, [sp]
   29b08:	mov	r1, #0
   29b0c:	ldrd	r8, [sp, #8]
   29b10:	cmp	r9, r3
   29b14:	cmpeq	r8, r2
   29b18:	mulcs	r9, r2, r5
   29b1c:	movcs	ip, #0
   29b20:	mlacs	r9, r4, r3, r9
   29b24:	movcc	ip, #1
   29b28:	umullcs	r2, r3, r2, r4
   29b2c:	mvncc	r2, #0
   29b30:	mvncc	r3, #0
   29b34:	orr	r1, r1, ip
   29b38:	addcs	r3, r9, r3
   29b3c:	subs	r0, r0, #1
   29b40:	bne	29b0c <__assert_fail@plt+0x17438>
   29b44:	b	299b0 <__assert_fail@plt+0x172dc>
   29b48:	asr	r5, r9, #31
   29b4c:	mov	r2, r9
   29b50:	mvn	r0, #0
   29b54:	mvn	r1, #0
   29b58:	mov	r3, r5
   29b5c:	mov	r4, r9
   29b60:	bl	2e550 <fts_children@@Base+0x2184>
   29b64:	mov	r3, #4
   29b68:	str	r8, [sp, #16]
   29b6c:	strd	r0, [sp, #8]
   29b70:	mov	r0, r3
   29b74:	ldrd	r2, [sp]
   29b78:	mov	r1, #0
   29b7c:	ldrd	r8, [sp, #8]
   29b80:	cmp	r9, r3
   29b84:	cmpeq	r8, r2
   29b88:	mulcs	r9, r2, r5
   29b8c:	movcs	ip, #0
   29b90:	mlacs	r9, r4, r3, r9
   29b94:	movcc	ip, #1
   29b98:	umullcs	r2, r3, r2, r4
   29b9c:	mvncc	r2, #0
   29ba0:	mvncc	r3, #0
   29ba4:	orr	r1, r1, ip
   29ba8:	addcs	r3, r9, r3
   29bac:	subs	r0, r0, #1
   29bb0:	bne	29b7c <__assert_fail@plt+0x174a8>
   29bb4:	b	299b0 <__assert_fail@plt+0x172dc>
   29bb8:	asr	r5, r9, #31
   29bbc:	mov	r2, r9
   29bc0:	mvn	r0, #0
   29bc4:	mvn	r1, #0
   29bc8:	mov	r3, r5
   29bcc:	mov	r4, r9
   29bd0:	bl	2e550 <fts_children@@Base+0x2184>
   29bd4:	mov	r3, #5
   29bd8:	str	r8, [sp, #16]
   29bdc:	strd	r0, [sp, #8]
   29be0:	mov	r0, r3
   29be4:	ldrd	r2, [sp]
   29be8:	mov	r1, #0
   29bec:	ldrd	r8, [sp, #8]
   29bf0:	cmp	r9, r3
   29bf4:	cmpeq	r8, r2
   29bf8:	mulcs	r9, r2, r5
   29bfc:	movcs	ip, #0
   29c00:	mlacs	r9, r4, r3, r9
   29c04:	movcc	ip, #1
   29c08:	umullcs	r2, r3, r2, r4
   29c0c:	mvncc	r2, #0
   29c10:	mvncc	r3, #0
   29c14:	orr	r1, r1, ip
   29c18:	addcs	r3, r9, r3
   29c1c:	subs	r0, r0, #1
   29c20:	bne	29bec <__assert_fail@plt+0x17518>
   29c24:	b	299b0 <__assert_fail@plt+0x172dc>
   29c28:	ldrd	r4, [sp]
   29c2c:	mov	r0, fp
   29c30:	strd	r4, [r7]
   29c34:	b	295ec <__assert_fail@plt+0x16f18>
   29c38:	ldrb	r3, [sl, #2]
   29c3c:	mov	r9, #1024	; 0x400
   29c40:	cmp	r3, #66	; 0x42
   29c44:	moveq	r3, #3
   29c48:	movne	r3, #1
   29c4c:	str	r3, [sp, #20]
   29c50:	b	296c4 <__assert_fail@plt+0x16ff0>
   29c54:	mov	ip, #2
   29c58:	mov	r9, #1000	; 0x3e8
   29c5c:	str	ip, [sp, #20]
   29c60:	b	296c4 <__assert_fail@plt+0x16ff0>
   29c64:	mvn	r4, #0
   29c68:	mvn	r5, #0
   29c6c:	mov	r1, #1
   29c70:	strd	r4, [sp]
   29c74:	b	297f8 <__assert_fail@plt+0x17124>
   29c78:	mov	r9, #1
   29c7c:	str	r9, [sp, #20]
   29c80:	mov	r9, #1024	; 0x400
   29c84:	b	296c4 <__assert_fail@plt+0x16ff0>
   29c88:	mvn	r4, #0
   29c8c:	mvn	r5, #0
   29c90:	mov	r1, #1
   29c94:	strd	r4, [sp]
   29c98:	b	297f8 <__assert_fail@plt+0x17124>
   29c9c:	bl	12188 <__stack_chk_fail@plt>
   29ca0:	movw	r0, #20068	; 0x4e64
   29ca4:	movw	r1, #20108	; 0x4e8c
   29ca8:	movw	r3, #20120	; 0x4e98
   29cac:	movt	r0, #3
   29cb0:	movt	r1, #3
   29cb4:	mov	r2, #96	; 0x60
   29cb8:	movt	r3, #3
   29cbc:	bl	126d4 <__assert_fail@plt>
   29cc0:	push	{r4, r5, lr}
   29cc4:	movw	r4, #26008	; 0x6598
   29cc8:	movt	r4, #4
   29ccc:	movw	r3, #26020	; 0x65a4
   29cd0:	movt	r3, #4
   29cd4:	sub	sp, sp, #20
   29cd8:	ldr	ip, [r4]
   29cdc:	add	r0, sp, #4
   29ce0:	ldr	r3, [r3]
   29ce4:	add	r1, sp, #8
   29ce8:	mov	r2, #10
   29cec:	mov	r5, #0
   29cf0:	str	ip, [sp, #12]
   29cf4:	str	r5, [sp, #4]
   29cf8:	str	r5, [sp, #8]
   29cfc:	bl	12038 <__getdelim@plt>
   29d00:	cmp	r0, #0
   29d04:	ble	29d28 <__assert_fail@plt+0x17654>
   29d08:	ldr	r3, [sp, #4]
   29d0c:	add	r0, r3, r0
   29d10:	strb	r5, [r0, #-1]
   29d14:	ldr	r0, [sp, #4]
   29d18:	bl	12530 <rpmatch@plt>
   29d1c:	cmp	r0, r5
   29d20:	movle	r5, #0
   29d24:	movgt	r5, #1
   29d28:	ldr	r0, [sp, #4]
   29d2c:	bl	120c8 <free@plt>
   29d30:	ldr	r2, [sp, #12]
   29d34:	ldr	r3, [r4]
   29d38:	mov	r0, r5
   29d3c:	cmp	r2, r3
   29d40:	bne	29d4c <__assert_fail@plt+0x17678>
   29d44:	add	sp, sp, #20
   29d48:	pop	{r4, r5, pc}
   29d4c:	bl	12188 <__stack_chk_fail@plt>
   29d50:	push	{r3, r4, r5, lr}
   29d54:	mov	r2, #18688	; 0x4900
   29d58:	mov	r4, r0
   29d5c:	ldr	r0, [r0]
   29d60:	bl	123f8 <openat64@plt>
   29d64:	subs	r5, r0, #0
   29d68:	blt	29d90 <__assert_fail@plt+0x176bc>
   29d6c:	ldr	r0, [r4]
   29d70:	cmp	r0, #0
   29d74:	blt	29d84 <__assert_fail@plt+0x176b0>
   29d78:	bl	12680 <close@plt>
   29d7c:	cmp	r0, #0
   29d80:	bne	29d98 <__assert_fail@plt+0x176c4>
   29d84:	str	r5, [r4]
   29d88:	mov	r0, #0
   29d8c:	pop	{r3, r4, r5, pc}
   29d90:	mvn	r0, #0
   29d94:	pop	{r3, r4, r5, pc}
   29d98:	bl	126e0 <__assert_fail@plt+0xc>
   29d9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29da0:	movw	r5, #26008	; 0x6598
   29da4:	movt	r5, #4
   29da8:	sub	sp, sp, #8
   29dac:	mov	r7, r0
   29db0:	ldr	r3, [r5]
   29db4:	str	r3, [sp, #4]
   29db8:	bl	121dc <chdir@plt>
   29dbc:	subs	r4, r0, #0
   29dc0:	beq	29dd8 <__assert_fail@plt+0x17704>
   29dc4:	bl	12434 <__errno_location@plt>
   29dc8:	ldr	r3, [r0]
   29dcc:	mov	r9, r0
   29dd0:	cmp	r3, #36	; 0x24
   29dd4:	beq	29df4 <__assert_fail@plt+0x17720>
   29dd8:	ldr	r2, [sp, #4]
   29ddc:	mov	r0, r4
   29de0:	ldr	r3, [r5]
   29de4:	cmp	r2, r3
   29de8:	bne	2a054 <__assert_fail@plt+0x17980>
   29dec:	add	sp, sp, #8
   29df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29df4:	mov	r0, r7
   29df8:	bl	123d4 <strlen@plt>
   29dfc:	mvn	r3, #99	; 0x63
   29e00:	str	r3, [sp]
   29e04:	cmp	r0, #0
   29e08:	add	r6, r7, r0
   29e0c:	beq	2a058 <__assert_fail@plt+0x17984>
   29e10:	cmp	r0, #4096	; 0x1000
   29e14:	bcc	2a000 <__assert_fail@plt+0x1792c>
   29e18:	ldrb	r3, [r7]
   29e1c:	cmp	r3, #47	; 0x2f
   29e20:	movne	r4, r7
   29e24:	bne	29ef4 <__assert_fail@plt+0x17820>
   29e28:	add	r3, r7, #1
   29e2c:	mov	r2, #0
   29e30:	ldrb	ip, [r3]
   29e34:	mov	r4, r3
   29e38:	add	r2, r2, #1
   29e3c:	add	r3, r3, #1
   29e40:	cmp	ip, #47	; 0x2f
   29e44:	beq	29e30 <__assert_fail@plt+0x1775c>
   29e48:	cmp	r2, #2
   29e4c:	beq	29e90 <__assert_fail@plt+0x177bc>
   29e50:	movw	r1, #13112	; 0x3338
   29e54:	mov	r0, sp
   29e58:	movt	r1, #3
   29e5c:	bl	29d50 <__assert_fail@plt+0x1767c>
   29e60:	cmp	r0, #0
   29e64:	beq	29fd8 <__assert_fail@plt+0x17904>
   29e68:	ldr	r0, [sp]
   29e6c:	ldr	r4, [r9]
   29e70:	cmp	r0, #0
   29e74:	blt	29e84 <__assert_fail@plt+0x177b0>
   29e78:	bl	12680 <close@plt>
   29e7c:	cmp	r0, #0
   29e80:	bne	29fbc <__assert_fail@plt+0x178e8>
   29e84:	str	r4, [r9]
   29e88:	mvn	r4, #0
   29e8c:	b	29dd8 <__assert_fail@plt+0x17704>
   29e90:	add	r0, r7, #3
   29e94:	mov	r1, #47	; 0x2f
   29e98:	rsb	r2, r0, r6
   29e9c:	bl	124dc <memchr@plt>
   29ea0:	subs	r8, r0, #0
   29ea4:	beq	29f7c <__assert_fail@plt+0x178a8>
   29ea8:	mov	r3, #0
   29eac:	mov	r1, r7
   29eb0:	strb	r3, [r8]
   29eb4:	mov	r0, sp
   29eb8:	bl	29d50 <__assert_fail@plt+0x1767c>
   29ebc:	mov	r3, #47	; 0x2f
   29ec0:	strb	r3, [r8]
   29ec4:	cmp	r0, #0
   29ec8:	bne	29e68 <__assert_fail@plt+0x17794>
   29ecc:	ldrb	r3, [r8, #1]
   29ed0:	add	r4, r8, #1
   29ed4:	cmp	r3, #47	; 0x2f
   29ed8:	bne	29ef4 <__assert_fail@plt+0x17820>
   29edc:	add	r3, r8, #2
   29ee0:	mov	r4, r3
   29ee4:	add	r3, r3, #1
   29ee8:	ldrb	r2, [r4]
   29eec:	cmp	r2, #47	; 0x2f
   29ef0:	beq	29ee0 <__assert_fail@plt+0x1780c>
   29ef4:	cmp	r6, r4
   29ef8:	bcc	2a01c <__assert_fail@plt+0x17948>
   29efc:	mov	r8, #47	; 0x2f
   29f00:	mov	r7, #0
   29f04:	rsb	r3, r4, r6
   29f08:	cmp	r3, #4096	; 0x1000
   29f0c:	blt	29f8c <__assert_fail@plt+0x178b8>
   29f10:	mov	r0, r4
   29f14:	mov	r1, #47	; 0x2f
   29f18:	mov	r2, #4096	; 0x1000
   29f1c:	bl	12404 <memrchr@plt>
   29f20:	subs	sl, r0, #0
   29f24:	beq	29f7c <__assert_fail@plt+0x178a8>
   29f28:	rsb	r3, r4, sl
   29f2c:	strb	r7, [sl]
   29f30:	cmp	r3, #4096	; 0x1000
   29f34:	bge	2a038 <__assert_fail@plt+0x17964>
   29f38:	mov	r1, r4
   29f3c:	mov	r0, sp
   29f40:	bl	29d50 <__assert_fail@plt+0x1767c>
   29f44:	strb	r8, [sl]
   29f48:	cmp	r0, #0
   29f4c:	bne	29e68 <__assert_fail@plt+0x17794>
   29f50:	ldrb	r3, [sl, #1]
   29f54:	add	r4, sl, #1
   29f58:	cmp	r3, #47	; 0x2f
   29f5c:	bne	29f04 <__assert_fail@plt+0x17830>
   29f60:	add	r3, sl, #2
   29f64:	mov	r4, r3
   29f68:	add	r3, r3, #1
   29f6c:	ldrb	r2, [r4]
   29f70:	cmp	r2, #47	; 0x2f
   29f74:	beq	29f64 <__assert_fail@plt+0x17890>
   29f78:	b	29f04 <__assert_fail@plt+0x17830>
   29f7c:	mov	r3, #36	; 0x24
   29f80:	mvn	r4, #0
   29f84:	str	r3, [r9]
   29f88:	b	29dd8 <__assert_fail@plt+0x17704>
   29f8c:	cmp	r6, r4
   29f90:	bhi	29fc0 <__assert_fail@plt+0x178ec>
   29f94:	ldr	r0, [sp]
   29f98:	bl	125cc <fchdir@plt>
   29f9c:	subs	r4, r0, #0
   29fa0:	bne	29e68 <__assert_fail@plt+0x17794>
   29fa4:	ldr	r0, [sp]
   29fa8:	cmp	r0, #0
   29fac:	blt	29dd8 <__assert_fail@plt+0x17704>
   29fb0:	bl	12680 <close@plt>
   29fb4:	cmp	r0, #0
   29fb8:	beq	29dd8 <__assert_fail@plt+0x17704>
   29fbc:	bl	126e0 <__assert_fail@plt+0xc>
   29fc0:	mov	r1, r4
   29fc4:	mov	r0, sp
   29fc8:	bl	29d50 <__assert_fail@plt+0x1767c>
   29fcc:	cmp	r0, #0
   29fd0:	bne	29e68 <__assert_fail@plt+0x17794>
   29fd4:	b	29f94 <__assert_fail@plt+0x178c0>
   29fd8:	ldrb	r3, [r4]
   29fdc:	cmp	r3, #47	; 0x2f
   29fe0:	bne	29ef4 <__assert_fail@plt+0x17820>
   29fe4:	movw	r0, #20208	; 0x4ef0
   29fe8:	movw	r1, #20172	; 0x4ecc
   29fec:	movt	r0, #3
   29ff0:	movt	r1, #3
   29ff4:	mov	r2, #161	; 0xa1
   29ff8:	ldr	r3, [pc, #116]	; 2a074 <__assert_fail@plt+0x179a0>
   29ffc:	bl	126d4 <__assert_fail@plt>
   2a000:	movw	r0, #20196	; 0x4ee4
   2a004:	movw	r1, #20172	; 0x4ecc
   2a008:	movt	r0, #3
   2a00c:	movt	r1, #3
   2a010:	mov	r2, #126	; 0x7e
   2a014:	ldr	r3, [pc, #88]	; 2a074 <__assert_fail@plt+0x179a0>
   2a018:	bl	126d4 <__assert_fail@plt>
   2a01c:	movw	r0, #20220	; 0x4efc
   2a020:	movw	r1, #20172	; 0x4ecc
   2a024:	movt	r0, #3
   2a028:	movt	r1, #3
   2a02c:	mov	r2, #162	; 0xa2
   2a030:	ldr	r3, [pc, #60]	; 2a074 <__assert_fail@plt+0x179a0>
   2a034:	bl	126d4 <__assert_fail@plt>
   2a038:	movw	r0, #20236	; 0x4f0c
   2a03c:	movw	r1, #20172	; 0x4ecc
   2a040:	movt	r0, #3
   2a044:	movt	r1, #3
   2a048:	mov	r2, #178	; 0xb2
   2a04c:	ldr	r3, [pc, #32]	; 2a074 <__assert_fail@plt+0x179a0>
   2a050:	bl	126d4 <__assert_fail@plt>
   2a054:	bl	12188 <__stack_chk_fail@plt>
   2a058:	movw	r0, #20188	; 0x4edc
   2a05c:	movw	r1, #20172	; 0x4ecc
   2a060:	movt	r0, #3
   2a064:	movt	r1, #3
   2a068:	mov	r2, #125	; 0x7d
   2a06c:	ldr	r3, [pc]	; 2a074 <__assert_fail@plt+0x179a0>
   2a070:	bl	126d4 <__assert_fail@plt>
   2a074:			; <UNDEFINED> instruction: 0x00034eb0
   2a078:	push	{r1, r2, r3}
   2a07c:	movw	ip, #1030	; 0x406
   2a080:	push	{r4, r5, r6, r7, r8, lr}
   2a084:	sub	sp, sp, #12
   2a088:	movw	r4, #26008	; 0x6598
   2a08c:	movt	r4, #4
   2a090:	ldr	r1, [sp, #36]	; 0x24
   2a094:	add	r2, sp, #40	; 0x28
   2a098:	ldr	r3, [r4]
   2a09c:	mov	r8, r0
   2a0a0:	cmp	r1, ip
   2a0a4:	str	r2, [sp]
   2a0a8:	str	r3, [sp, #4]
   2a0ac:	bne	2a120 <__assert_fail@plt+0x17a4c>
   2a0b0:	movw	r5, #28288	; 0x6e80
   2a0b4:	movt	r5, #4
   2a0b8:	ldr	r7, [sp, #40]	; 0x28
   2a0bc:	add	r2, sp, #44	; 0x2c
   2a0c0:	ldr	r3, [r5]
   2a0c4:	str	r2, [sp]
   2a0c8:	cmp	r3, #0
   2a0cc:	mov	r2, r7
   2a0d0:	blt	2a1ac <__assert_fail@plt+0x17ad8>
   2a0d4:	bl	12428 <fcntl@plt>
   2a0d8:	subs	r6, r0, #0
   2a0dc:	blt	2a130 <__assert_fail@plt+0x17a5c>
   2a0e0:	mov	r3, #1
   2a0e4:	str	r3, [r5]
   2a0e8:	cmp	r6, #0
   2a0ec:	blt	2a0fc <__assert_fail@plt+0x17a28>
   2a0f0:	ldr	r3, [r5]
   2a0f4:	cmn	r3, #1
   2a0f8:	beq	2a160 <__assert_fail@plt+0x17a8c>
   2a0fc:	ldr	r2, [sp, #4]
   2a100:	mov	r0, r6
   2a104:	ldr	r3, [r4]
   2a108:	cmp	r2, r3
   2a10c:	bne	2a1bc <__assert_fail@plt+0x17ae8>
   2a110:	add	sp, sp, #12
   2a114:	pop	{r4, r5, r6, r7, r8, lr}
   2a118:	add	sp, sp, #12
   2a11c:	bx	lr
   2a120:	ldr	r2, [sp, #40]	; 0x28
   2a124:	bl	12428 <fcntl@plt>
   2a128:	mov	r6, r0
   2a12c:	b	2a0fc <__assert_fail@plt+0x17a28>
   2a130:	bl	12434 <__errno_location@plt>
   2a134:	ldr	r3, [r0]
   2a138:	cmp	r3, #22
   2a13c:	bne	2a0e0 <__assert_fail@plt+0x17a0c>
   2a140:	mov	r0, r8
   2a144:	mov	r2, r7
   2a148:	mov	r1, #0
   2a14c:	bl	2a078 <__assert_fail@plt+0x179a4>
   2a150:	subs	r6, r0, #0
   2a154:	blt	2a0fc <__assert_fail@plt+0x17a28>
   2a158:	mvn	r3, #0
   2a15c:	str	r3, [r5]
   2a160:	mov	r0, r6
   2a164:	mov	r1, #1
   2a168:	bl	12428 <fcntl@plt>
   2a16c:	subs	r2, r0, #0
   2a170:	blt	2a18c <__assert_fail@plt+0x17ab8>
   2a174:	orr	r2, r2, #1
   2a178:	mov	r0, r6
   2a17c:	mov	r1, #2
   2a180:	bl	12428 <fcntl@plt>
   2a184:	cmn	r0, #1
   2a188:	bne	2a0fc <__assert_fail@plt+0x17a28>
   2a18c:	bl	12434 <__errno_location@plt>
   2a190:	ldr	r7, [r0]
   2a194:	mov	r5, r0
   2a198:	mov	r0, r6
   2a19c:	mvn	r6, #0
   2a1a0:	bl	12680 <close@plt>
   2a1a4:	str	r7, [r5]
   2a1a8:	b	2a0fc <__assert_fail@plt+0x17a28>
   2a1ac:	mov	r1, #0
   2a1b0:	bl	2a078 <__assert_fail@plt+0x179a4>
   2a1b4:	mov	r6, r0
   2a1b8:	b	2a0e8 <__assert_fail@plt+0x17a14>
   2a1bc:	bl	12188 <__stack_chk_fail@plt>
   2a1c0:	push	{r4, lr}
   2a1c4:	subs	r4, r0, #0
   2a1c8:	sub	sp, sp, #8
   2a1cc:	beq	2a1dc <__assert_fail@plt+0x17b08>
   2a1d0:	bl	12368 <__freading@plt>
   2a1d4:	cmp	r0, #0
   2a1d8:	bne	2a1ec <__assert_fail@plt+0x17b18>
   2a1dc:	mov	r0, r4
   2a1e0:	add	sp, sp, #8
   2a1e4:	pop	{r4, lr}
   2a1e8:	b	1208c <fflush@plt>
   2a1ec:	ldr	r3, [r4]
   2a1f0:	tst	r3, #256	; 0x100
   2a1f4:	beq	2a1dc <__assert_fail@plt+0x17b08>
   2a1f8:	mov	r3, #1
   2a1fc:	mov	r0, r4
   2a200:	str	r3, [sp]
   2a204:	mov	r2, #0
   2a208:	mov	r3, #0
   2a20c:	bl	2a220 <__assert_fail@plt+0x17b4c>
   2a210:	mov	r0, r4
   2a214:	add	sp, sp, #8
   2a218:	pop	{r4, lr}
   2a21c:	b	1208c <fflush@plt>
   2a220:	ldmib	r0, {r1, ip}
   2a224:	push	{r4, r5, r6, r7, lr}
   2a228:	cmp	ip, r1
   2a22c:	sub	sp, sp, #20
   2a230:	mov	r6, r0
   2a234:	ldr	r4, [sp, #40]	; 0x28
   2a238:	beq	2a250 <__assert_fail@plt+0x17b7c>
   2a23c:	str	r4, [sp, #40]	; 0x28
   2a240:	mov	r0, r6
   2a244:	add	sp, sp, #20
   2a248:	pop	{r4, r5, r6, r7, lr}
   2a24c:	b	12518 <fseeko64@plt>
   2a250:	ldr	ip, [r0, #20]
   2a254:	ldr	r1, [r0, #16]
   2a258:	cmp	ip, r1
   2a25c:	bne	2a23c <__assert_fail@plt+0x17b68>
   2a260:	ldr	r7, [r0, #36]	; 0x24
   2a264:	cmp	r7, #0
   2a268:	bne	2a23c <__assert_fail@plt+0x17b68>
   2a26c:	str	r2, [sp, #12]
   2a270:	mvn	r5, #0
   2a274:	str	r3, [sp, #8]
   2a278:	bl	124b8 <fileno@plt>
   2a27c:	str	r4, [sp]
   2a280:	mvn	r4, #0
   2a284:	ldr	r2, [sp, #12]
   2a288:	ldr	r3, [sp, #8]
   2a28c:	bl	12260 <lseek64@plt>
   2a290:	mov	r2, r0
   2a294:	mov	r3, r1
   2a298:	cmp	r3, r5
   2a29c:	cmpeq	r2, r4
   2a2a0:	beq	2a2c0 <__assert_fail@plt+0x17bec>
   2a2a4:	ldr	r1, [r6]
   2a2a8:	mov	r0, r7
   2a2ac:	strd	r2, [r6, #80]	; 0x50
   2a2b0:	bic	r3, r1, #16
   2a2b4:	str	r3, [r6]
   2a2b8:	add	sp, sp, #20
   2a2bc:	pop	{r4, r5, r6, r7, pc}
   2a2c0:	mvn	r0, #0
   2a2c4:	b	2a2b8 <__assert_fail@plt+0x17be4>
   2a2c8:	push	{r4, r5}
   2a2cc:	mov	ip, r1
   2a2d0:	ldrd	r4, [r0, #8]
   2a2d4:	ldrd	r2, [r1, #8]
   2a2d8:	cmp	r5, r3
   2a2dc:	cmpeq	r4, r2
   2a2e0:	movne	r0, #0
   2a2e4:	beq	2a2f0 <__assert_fail@plt+0x17c1c>
   2a2e8:	pop	{r4, r5}
   2a2ec:	bx	lr
   2a2f0:	ldrd	r0, [r0]
   2a2f4:	ldrd	r2, [ip]
   2a2f8:	pop	{r4, r5}
   2a2fc:	cmp	r1, r3
   2a300:	cmpeq	r0, r2
   2a304:	movne	r0, #0
   2a308:	moveq	r0, #1
   2a30c:	bx	lr
   2a310:	push	{r3, lr}
   2a314:	mov	r2, r1
   2a318:	mov	r3, #0
   2a31c:	ldrd	r0, [r0, #8]
   2a320:	bl	2e550 <fts_children@@Base+0x2184>
   2a324:	mov	r0, r2
   2a328:	pop	{r3, pc}
   2a32c:	push	{r3, lr}
   2a330:	mov	r2, r1
   2a334:	mov	r3, #0
   2a338:	ldrd	r0, [r0]
   2a33c:	bl	2e550 <fts_children@@Base+0x2184>
   2a340:	mov	r0, r2
   2a344:	pop	{r3, pc}
   2a348:	ldrd	r2, [r0]
   2a34c:	ldrd	r0, [r1]
   2a350:	cmp	r3, r1
   2a354:	cmpeq	r2, r0
   2a358:	movne	r0, #0
   2a35c:	moveq	r0, #1
   2a360:	bx	lr
   2a364:	ldr	r3, [r0]
   2a368:	ldr	r2, [r1]
   2a36c:	ldrd	r0, [r3, #168]	; 0xa8
   2a370:	ldrd	r2, [r2, #168]	; 0xa8
   2a374:	cmp	r1, r3
   2a378:	cmpeq	r0, r2
   2a37c:	bcc	2a38c <__assert_fail@plt+0x17cb8>
   2a380:	movls	r0, #0
   2a384:	movhi	r0, #1
   2a388:	bx	lr
   2a38c:	mvn	r0, #0
   2a390:	bx	lr
   2a394:	push	{r3, r4, r5, r6, r7, lr}
   2a398:	mov	r7, r2
   2a39c:	ldr	r2, [r0, #40]	; 0x28
   2a3a0:	mov	r5, r0
   2a3a4:	mov	r4, r1
   2a3a8:	ldr	r6, [r0, #44]	; 0x2c
   2a3ac:	cmp	r2, r7
   2a3b0:	bcc	2a42c <__assert_fail@plt+0x17d58>
   2a3b4:	ldr	ip, [r0, #8]
   2a3b8:	cmp	r4, #0
   2a3bc:	beq	2a47c <__assert_fail@plt+0x17da8>
   2a3c0:	str	r4, [ip], #4
   2a3c4:	ldr	r4, [r4, #8]
   2a3c8:	cmp	r4, #0
   2a3cc:	bne	2a3c0 <__assert_fail@plt+0x17cec>
   2a3d0:	ldr	r0, [r5, #8]
   2a3d4:	mov	r3, r6
   2a3d8:	mov	r2, #4
   2a3dc:	mov	r1, r7
   2a3e0:	bl	125e4 <qsort@plt>
   2a3e4:	ldr	r2, [r5, #8]
   2a3e8:	subs	r3, r7, #1
   2a3ec:	ldr	r4, [r2]
   2a3f0:	beq	2a474 <__assert_fail@plt+0x17da0>
   2a3f4:	add	ip, r2, #4
   2a3f8:	mov	r6, r4
   2a3fc:	b	2a404 <__assert_fail@plt+0x17d30>
   2a400:	ldr	r6, [ip, #-4]
   2a404:	ldr	r5, [ip], #4
   2a408:	subs	r3, r3, #1
   2a40c:	str	r5, [r6, #8]
   2a410:	bne	2a400 <__assert_fail@plt+0x17d2c>
   2a414:	add	r7, r2, r7, lsl #2
   2a418:	ldr	r2, [r7, #-4]
   2a41c:	mov	r3, #0
   2a420:	mov	r0, r4
   2a424:	str	r3, [r2, #8]
   2a428:	pop	{r3, r4, r5, r6, r7, pc}
   2a42c:	add	r1, r7, #40	; 0x28
   2a430:	str	r1, [r0, #40]	; 0x28
   2a434:	cmn	r1, #-1073741823	; 0xc0000001
   2a438:	bhi	2a458 <__assert_fail@plt+0x17d84>
   2a43c:	lsl	r1, r1, #2
   2a440:	ldr	r0, [r0, #8]
   2a444:	bl	121ac <realloc@plt>
   2a448:	cmp	r0, #0
   2a44c:	movne	ip, r0
   2a450:	strne	r0, [r5, #8]
   2a454:	bne	2a3b8 <__assert_fail@plt+0x17ce4>
   2a458:	ldr	r0, [r5, #8]
   2a45c:	bl	120c8 <free@plt>
   2a460:	mov	r3, #0
   2a464:	mov	r0, r4
   2a468:	str	r3, [r5, #8]
   2a46c:	str	r3, [r5, #40]	; 0x28
   2a470:	pop	{r3, r4, r5, r6, r7, pc}
   2a474:	mov	r2, r4
   2a478:	b	2a41c <__assert_fail@plt+0x17d48>
   2a47c:	mov	r0, ip
   2a480:	b	2a3d4 <__assert_fail@plt+0x17d00>
   2a484:	push	{r3, r4, r5, r6, r7, lr}
   2a488:	mov	r6, r0
   2a48c:	add	r0, r2, #184	; 0xb8
   2a490:	mov	r5, r2
   2a494:	mov	r7, r1
   2a498:	bl	1232c <malloc@plt>
   2a49c:	subs	r4, r0, #0
   2a4a0:	beq	2a4ec <__assert_fail@plt+0x17e18>
   2a4a4:	mov	r1, r7
   2a4a8:	mov	r2, r5
   2a4ac:	add	r0, r4, #176	; 0xb0
   2a4b0:	bl	12104 <memcpy@plt>
   2a4b4:	add	r1, r4, r5
   2a4b8:	mov	r3, #0
   2a4bc:	mov	r2, #3
   2a4c0:	strb	r3, [r1, #176]	; 0xb0
   2a4c4:	ldr	r1, [r6, #24]
   2a4c8:	str	r5, [r4, #52]	; 0x34
   2a4cc:	str	r6, [r4, #44]	; 0x2c
   2a4d0:	str	r1, [r4, #28]
   2a4d4:	str	r3, [r4, #32]
   2a4d8:	str	r3, [r4, #12]
   2a4dc:	strh	r3, [r4, #62]	; 0x3e
   2a4e0:	str	r3, [r4, #16]
   2a4e4:	str	r3, [r4, #20]
   2a4e8:	strh	r2, [r4, #64]	; 0x40
   2a4ec:	mov	r0, r4
   2a4f0:	pop	{r3, r4, r5, r6, r7, pc}
   2a4f4:	push	{r3, r4, r5, lr}
   2a4f8:	subs	r4, r0, #0
   2a4fc:	popeq	{r3, r4, r5, pc}
   2a500:	ldr	r0, [r4, #12]
   2a504:	ldr	r5, [r4, #8]
   2a508:	cmp	r0, #0
   2a50c:	beq	2a514 <__assert_fail@plt+0x17e40>
   2a510:	bl	12698 <closedir@plt>
   2a514:	mov	r0, r4
   2a518:	mov	r4, r5
   2a51c:	bl	120c8 <free@plt>
   2a520:	cmp	r5, #0
   2a524:	bne	2a500 <__assert_fail@plt+0x17e2c>
   2a528:	pop	{r3, r4, r5, pc}
   2a52c:	push	{r4, lr}
   2a530:	mov	r4, r0
   2a534:	b	2a544 <__assert_fail@plt+0x17e70>
   2a538:	bl	2d4cc <fts_children@@Base+0x1100>
   2a53c:	cmp	r0, #0
   2a540:	bge	2a55c <__assert_fail@plt+0x17e88>
   2a544:	mov	r0, r4
   2a548:	bl	2d480 <fts_children@@Base+0x10b4>
   2a54c:	cmp	r0, #0
   2a550:	mov	r0, r4
   2a554:	beq	2a538 <__assert_fail@plt+0x17e64>
   2a558:	pop	{r4, pc}
   2a55c:	bl	12680 <close@plt>
   2a560:	b	2a544 <__assert_fail@plt+0x17e70>
   2a564:	push	{r3, r4, r5, lr}
   2a568:	mov	r5, r1
   2a56c:	ldr	r1, [r0, #32]
   2a570:	mov	r4, r0
   2a574:	subs	r0, r1, r5
   2a578:	rsbs	r3, r0, #0
   2a57c:	adcs	r3, r3, r0
   2a580:	cmn	r1, #100	; 0x64
   2a584:	moveq	r3, #0
   2a588:	cmp	r3, #0
   2a58c:	bne	2a5d4 <__assert_fail@plt+0x17f00>
   2a590:	cmp	r2, #0
   2a594:	bne	2a5bc <__assert_fail@plt+0x17ee8>
   2a598:	ldr	r3, [r4, #48]	; 0x30
   2a59c:	tst	r3, #4
   2a5a0:	bne	2a5b4 <__assert_fail@plt+0x17ee0>
   2a5a4:	cmp	r1, #0
   2a5a8:	blt	2a5b4 <__assert_fail@plt+0x17ee0>
   2a5ac:	mov	r0, r1
   2a5b0:	bl	12680 <close@plt>
   2a5b4:	str	r5, [r4, #32]
   2a5b8:	pop	{r3, r4, r5, pc}
   2a5bc:	add	r0, r4, #60	; 0x3c
   2a5c0:	bl	2d488 <fts_children@@Base+0x10bc>
   2a5c4:	cmp	r0, #0
   2a5c8:	bge	2a5b0 <__assert_fail@plt+0x17edc>
   2a5cc:	str	r5, [r4, #32]
   2a5d0:	pop	{r3, r4, r5, pc}
   2a5d4:	bl	12674 <abort@plt>
   2a5d8:	push	{r3, r4, r5, lr}
   2a5dc:	mov	r4, r0
   2a5e0:	ldr	r3, [r0, #48]	; 0x30
   2a5e4:	ands	r5, r3, #4
   2a5e8:	movne	r5, #0
   2a5ec:	bne	2a604 <__assert_fail@plt+0x17f30>
   2a5f0:	tst	r3, #512	; 0x200
   2a5f4:	beq	2a614 <__assert_fail@plt+0x17f40>
   2a5f8:	mvn	r1, #99	; 0x63
   2a5fc:	mov	r2, #1
   2a600:	bl	2a564 <__assert_fail@plt+0x17e90>
   2a604:	add	r0, r4, #60	; 0x3c
   2a608:	bl	2a52c <__assert_fail@plt+0x17e58>
   2a60c:	mov	r0, r5
   2a610:	pop	{r3, r4, r5, pc}
   2a614:	ldr	r0, [r0, #28]
   2a618:	bl	125cc <fchdir@plt>
   2a61c:	adds	r5, r0, #0
   2a620:	movne	r5, #1
   2a624:	b	2a604 <__assert_fail@plt+0x17f30>
   2a628:	push	{r4, r5, r6, r7, lr}
   2a62c:	mov	r4, r2
   2a630:	ldr	r2, [r2, #48]	; 0x30
   2a634:	sub	sp, sp, #12
   2a638:	mov	r6, r1
   2a63c:	add	r5, r4, #72	; 0x48
   2a640:	cmp	r2, #0
   2a644:	ldr	r2, [r1]
   2a648:	bne	2a654 <__assert_fail@plt+0x17f80>
   2a64c:	tst	r2, #1
   2a650:	bne	2a664 <__assert_fail@plt+0x17f90>
   2a654:	tst	r2, #2
   2a658:	bne	2a664 <__assert_fail@plt+0x17f90>
   2a65c:	cmp	r3, #0
   2a660:	beq	2a6b0 <__assert_fail@plt+0x17fdc>
   2a664:	mov	r0, #3
   2a668:	ldr	r1, [r4, #24]
   2a66c:	mov	r2, r5
   2a670:	bl	12620 <__xstat64@plt>
   2a674:	cmp	r0, #0
   2a678:	beq	2a6d4 <__assert_fail@plt+0x18000>
   2a67c:	bl	12434 <__errno_location@plt>
   2a680:	ldr	r6, [r0]
   2a684:	mov	r7, r0
   2a688:	cmp	r6, #2
   2a68c:	beq	2a778 <__assert_fail@plt+0x180a4>
   2a690:	str	r6, [r4, #32]
   2a694:	mov	r0, r5
   2a698:	mov	r1, #0
   2a69c:	mov	r2, #104	; 0x68
   2a6a0:	bl	12464 <memset@plt>
   2a6a4:	mov	r0, #10
   2a6a8:	add	sp, sp, #12
   2a6ac:	pop	{r4, r5, r6, r7, pc}
   2a6b0:	ldr	r2, [r4, #24]
   2a6b4:	mov	r1, r0
   2a6b8:	mov	r3, #256	; 0x100
   2a6bc:	mov	r0, #3
   2a6c0:	str	r3, [sp]
   2a6c4:	mov	r3, r5
   2a6c8:	bl	121f4 <__fxstatat64@plt>
   2a6cc:	cmp	r0, #0
   2a6d0:	bne	2a704 <__assert_fail@plt+0x18030>
   2a6d4:	ldr	r0, [r4, #88]	; 0x58
   2a6d8:	and	r0, r0, #61440	; 0xf000
   2a6dc:	cmp	r0, #16384	; 0x4000
   2a6e0:	beq	2a714 <__assert_fail@plt+0x18040>
   2a6e4:	cmp	r0, #40960	; 0xa000
   2a6e8:	moveq	r0, #12
   2a6ec:	beq	2a6a8 <__assert_fail@plt+0x17fd4>
   2a6f0:	cmp	r0, #32768	; 0x8000
   2a6f4:	movne	r0, #3
   2a6f8:	moveq	r0, #8
   2a6fc:	add	sp, sp, #12
   2a700:	pop	{r4, r5, r6, r7, pc}
   2a704:	bl	12434 <__errno_location@plt>
   2a708:	ldr	r3, [r0]
   2a70c:	str	r3, [r4, #32]
   2a710:	b	2a694 <__assert_fail@plt+0x17fc0>
   2a714:	ldr	r3, [r6]
   2a718:	ldrb	r1, [r4, #176]	; 0xb0
   2a71c:	tst	r3, #32
   2a720:	ldr	r2, [r4, #92]	; 0x5c
   2a724:	moveq	r3, #2
   2a728:	movne	r3, #0
   2a72c:	cmp	r1, #46	; 0x2e
   2a730:	rsb	r3, r3, r2
   2a734:	str	r3, [r4, #56]	; 0x38
   2a738:	beq	2a744 <__assert_fail@plt+0x18070>
   2a73c:	mov	r0, #1
   2a740:	b	2a6a8 <__assert_fail@plt+0x17fd4>
   2a744:	ldrb	r3, [r4, #177]	; 0xb1
   2a748:	cmp	r3, #0
   2a74c:	beq	2a764 <__assert_fail@plt+0x18090>
   2a750:	ldr	r3, [r4, #176]	; 0xb0
   2a754:	bic	r3, r3, #-16777216	; 0xff000000
   2a758:	bic	r3, r3, #255	; 0xff
   2a75c:	cmp	r3, #11776	; 0x2e00
   2a760:	bne	2a73c <__assert_fail@plt+0x18068>
   2a764:	ldr	r0, [r4, #48]	; 0x30
   2a768:	cmp	r0, #0
   2a76c:	movne	r0, #5
   2a770:	moveq	r0, #1
   2a774:	b	2a6a8 <__assert_fail@plt+0x17fd4>
   2a778:	mov	r0, #3
   2a77c:	ldr	r1, [r4, #24]
   2a780:	mov	r2, r5
   2a784:	bl	1268c <__lxstat64@plt>
   2a788:	cmp	r0, #0
   2a78c:	streq	r0, [r7]
   2a790:	moveq	r0, #13
   2a794:	beq	2a6a8 <__assert_fail@plt+0x17fd4>
   2a798:	b	2a690 <__assert_fail@plt+0x17fbc>
   2a79c:	push	{r3, r4, r5, lr}
   2a7a0:	mov	r4, r0
   2a7a4:	ldr	r3, [r1]
   2a7a8:	add	r0, r3, #256	; 0x100
   2a7ac:	add	r2, r0, r2
   2a7b0:	cmp	r3, r2
   2a7b4:	bhi	2a7e0 <__assert_fail@plt+0x1810c>
   2a7b8:	str	r2, [r1]
   2a7bc:	mov	r1, r2
   2a7c0:	ldr	r0, [r4]
   2a7c4:	bl	121ac <realloc@plt>
   2a7c8:	subs	r5, r0, #0
   2a7cc:	strne	r5, [r4]
   2a7d0:	movne	r3, #1
   2a7d4:	beq	2a808 <__assert_fail@plt+0x18134>
   2a7d8:	mov	r0, r3
   2a7dc:	pop	{r3, r4, r5, pc}
   2a7e0:	ldr	r0, [r4]
   2a7e4:	mov	r5, #0
   2a7e8:	bl	120c8 <free@plt>
   2a7ec:	str	r5, [r4]
   2a7f0:	bl	12434 <__errno_location@plt>
   2a7f4:	mov	r3, r5
   2a7f8:	mov	r2, #36	; 0x24
   2a7fc:	str	r2, [r0]
   2a800:	mov	r0, r3
   2a804:	pop	{r3, r4, r5, pc}
   2a808:	ldr	r0, [r4]
   2a80c:	bl	120c8 <free@plt>
   2a810:	str	r5, [r4]
   2a814:	mov	r3, r5
   2a818:	b	2a7d8 <__assert_fail@plt+0x18104>
   2a81c:	movw	r3, #258	; 0x102
   2a820:	and	r3, r0, r3
   2a824:	cmp	r3, #0
   2a828:	push	{r4, lr}
   2a82c:	mov	r4, r1
   2a830:	sub	sp, sp, #8
   2a834:	beq	2a874 <__assert_fail@plt+0x181a0>
   2a838:	movw	r3, #8392	; 0x20c8
   2a83c:	movw	r2, #41744	; 0xa310
   2a840:	movt	r3, #1
   2a844:	movt	r2, #2
   2a848:	str	r3, [sp]
   2a84c:	mov	r0, #31
   2a850:	movw	r3, #41672	; 0xa2c8
   2a854:	mov	r1, #0
   2a858:	movt	r3, #2
   2a85c:	bl	21fa8 <__assert_fail@plt+0xf8d4>
   2a860:	str	r0, [r4]
   2a864:	adds	r0, r0, #0
   2a868:	movne	r0, #1
   2a86c:	add	sp, sp, #8
   2a870:	pop	{r4, pc}
   2a874:	mov	r0, #32
   2a878:	bl	1232c <malloc@plt>
   2a87c:	cmp	r0, #0
   2a880:	str	r0, [r4]
   2a884:	moveq	r0, r0
   2a888:	beq	2a86c <__assert_fail@plt+0x18198>
   2a88c:	bl	2d2f0 <fts_children@@Base+0xf24>
   2a890:	mov	r0, #1
   2a894:	add	sp, sp, #8
   2a898:	pop	{r4, pc}
   2a89c:	movw	r3, #258	; 0x102
   2a8a0:	and	r3, r0, r3
   2a8a4:	cmp	r3, #0
   2a8a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a8ac:	mov	sl, r1
   2a8b0:	mov	r8, r2
   2a8b4:	beq	2a91c <__assert_fail@plt+0x18248>
   2a8b8:	mov	r0, #24
   2a8bc:	bl	1232c <malloc@plt>
   2a8c0:	subs	r9, r0, #0
   2a8c4:	beq	2a948 <__assert_fail@plt+0x18274>
   2a8c8:	ldrd	r4, [r8, #168]	; 0xa8
   2a8cc:	mov	r1, r9
   2a8d0:	ldrd	r6, [r8, #72]	; 0x48
   2a8d4:	str	r8, [r9, #16]
   2a8d8:	strd	r4, [r9, #8]
   2a8dc:	strd	r6, [r9]
   2a8e0:	ldr	r0, [sl]
   2a8e4:	bl	22594 <__assert_fail@plt+0xfec0>
   2a8e8:	cmp	r9, r0
   2a8ec:	mov	r4, r0
   2a8f0:	beq	2a940 <__assert_fail@plt+0x1826c>
   2a8f4:	mov	r0, r9
   2a8f8:	bl	120c8 <free@plt>
   2a8fc:	cmp	r4, #0
   2a900:	beq	2a948 <__assert_fail@plt+0x18274>
   2a904:	ldr	r3, [r4, #16]
   2a908:	mov	r2, #2
   2a90c:	mov	r0, #1
   2a910:	strh	r2, [r8, #60]	; 0x3c
   2a914:	str	r3, [r8]
   2a918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a91c:	ldr	r0, [r1]
   2a920:	add	r1, r2, #72	; 0x48
   2a924:	bl	2d30c <fts_children@@Base+0xf40>
   2a928:	cmp	r0, #0
   2a92c:	beq	2a940 <__assert_fail@plt+0x1826c>
   2a930:	mov	r3, #2
   2a934:	str	r8, [r8]
   2a938:	strh	r3, [r8, #60]	; 0x3c
   2a93c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a940:	mov	r0, #1
   2a944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a948:	mov	r0, #0
   2a94c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a950:	push	{r4, r5, r6, lr}
   2a954:	movw	r6, #26008	; 0x6598
   2a958:	movt	r6, #4
   2a95c:	movw	r3, #258	; 0x102
   2a960:	and	r3, r0, r3
   2a964:	sub	sp, sp, #32
   2a968:	ldr	r0, [r6]
   2a96c:	cmp	r3, #0
   2a970:	mov	ip, r1
   2a974:	str	r0, [sp, #28]
   2a978:	bne	2a9d0 <__assert_fail@plt+0x182fc>
   2a97c:	ldr	r3, [r2, #4]
   2a980:	cmp	r3, #0
   2a984:	beq	2a9b8 <__assert_fail@plt+0x182e4>
   2a988:	ldr	r1, [r3, #48]	; 0x30
   2a98c:	cmp	r1, #0
   2a990:	blt	2a9b8 <__assert_fail@plt+0x182e4>
   2a994:	ldr	ip, [ip]
   2a998:	ldrd	r0, [ip, #16]
   2a99c:	orrs	r4, r0, r1
   2a9a0:	beq	2aa24 <__assert_fail@plt+0x18350>
   2a9a4:	ldrd	r4, [ip]
   2a9a8:	ldrd	r0, [r2, #168]	; 0xa8
   2a9ac:	cmp	r5, r1
   2a9b0:	cmpeq	r4, r0
   2a9b4:	beq	2a9fc <__assert_fail@plt+0x18328>
   2a9b8:	ldr	r2, [sp, #28]
   2a9bc:	ldr	r3, [r6]
   2a9c0:	cmp	r2, r3
   2a9c4:	bne	2aa20 <__assert_fail@plt+0x1834c>
   2a9c8:	add	sp, sp, #32
   2a9cc:	pop	{r4, r5, r6, pc}
   2a9d0:	ldrd	r4, [r2, #72]	; 0x48
   2a9d4:	mov	r1, sp
   2a9d8:	ldrd	r2, [r2, #168]	; 0xa8
   2a9dc:	ldr	r0, [ip]
   2a9e0:	strd	r4, [sp]
   2a9e4:	strd	r2, [sp, #8]
   2a9e8:	bl	225f8 <__assert_fail@plt+0xff24>
   2a9ec:	cmp	r0, #0
   2a9f0:	beq	2aa24 <__assert_fail@plt+0x18350>
   2a9f4:	bl	120c8 <free@plt>
   2a9f8:	b	2a9b8 <__assert_fail@plt+0x182e4>
   2a9fc:	ldrd	r4, [r2, #72]	; 0x48
   2aa00:	ldrd	r0, [ip, #8]
   2aa04:	cmp	r1, r5
   2aa08:	cmpeq	r0, r4
   2aa0c:	ldrdeq	r0, [r3, #72]	; 0x48
   2aa10:	ldrdeq	r2, [r3, #168]	; 0xa8
   2aa14:	strdeq	r0, [ip, #8]
   2aa18:	strdeq	r2, [ip]
   2aa1c:	b	2a9b8 <__assert_fail@plt+0x182e4>
   2aa20:	bl	12188 <__stack_chk_fail@plt>
   2aa24:	bl	12674 <abort@plt>
   2aa28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa2c:	sub	sp, sp, #132	; 0x84
   2aa30:	movw	r6, #26008	; 0x6598
   2aa34:	movt	r6, #4
   2aa38:	ldr	r4, [sp, #168]	; 0xa8
   2aa3c:	mov	r8, r0
   2aa40:	ldr	r0, [r6]
   2aa44:	mov	r5, r1
   2aa48:	cmp	r4, #0
   2aa4c:	mov	fp, r2
   2aa50:	mov	r9, r3
   2aa54:	str	r0, [sp, #124]	; 0x7c
   2aa58:	moveq	sl, r4
   2aa5c:	beq	2aa70 <__assert_fail@plt+0x1839c>
   2aa60:	ldrb	r3, [r4]
   2aa64:	cmp	r3, #46	; 0x2e
   2aa68:	beq	2ab44 <__assert_fail@plt+0x18470>
   2aa6c:	mov	sl, #0
   2aa70:	ldr	r3, [r8, #48]	; 0x30
   2aa74:	ands	r7, r3, #4
   2aa78:	beq	2aab8 <__assert_fail@plt+0x183e4>
   2aa7c:	ands	r7, r3, #512	; 0x200
   2aa80:	beq	2aa9c <__assert_fail@plt+0x183c8>
   2aa84:	cmp	r9, #0
   2aa88:	movlt	r7, #0
   2aa8c:	blt	2aa9c <__assert_fail@plt+0x183c8>
   2aa90:	mov	r0, r9
   2aa94:	mov	r7, #0
   2aa98:	bl	12680 <close@plt>
   2aa9c:	ldr	r2, [sp, #124]	; 0x7c
   2aaa0:	mov	r0, r7
   2aaa4:	ldr	r3, [r6]
   2aaa8:	cmp	r2, r3
   2aaac:	bne	2ac98 <__assert_fail@plt+0x185c4>
   2aab0:	add	sp, sp, #132	; 0x84
   2aab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aab8:	lsr	r2, r9, #31
   2aabc:	tst	sl, r2
   2aac0:	bne	2ab60 <__assert_fail@plt+0x1848c>
   2aac4:	cmp	r2, #0
   2aac8:	streq	r9, [sp, #12]
   2aacc:	bne	2ac9c <__assert_fail@plt+0x185c8>
   2aad0:	tst	r3, #2
   2aad4:	bne	2ab04 <__assert_fail@plt+0x18430>
   2aad8:	cmp	r4, #0
   2aadc:	beq	2abdc <__assert_fail@plt+0x18508>
   2aae0:	ldrb	r2, [r4]
   2aae4:	cmp	r2, #46	; 0x2e
   2aae8:	bne	2abdc <__assert_fail@plt+0x18508>
   2aaec:	ldrb	r2, [r4, #1]
   2aaf0:	cmp	r2, #46	; 0x2e
   2aaf4:	bne	2abdc <__assert_fail@plt+0x18508>
   2aaf8:	ldrb	r2, [r4, #2]
   2aafc:	cmp	r2, #0
   2ab00:	bne	2abdc <__assert_fail@plt+0x18508>
   2ab04:	mov	r0, #3
   2ab08:	ldr	r1, [sp, #12]
   2ab0c:	add	r2, sp, #16
   2ab10:	bl	1220c <__fxstat64@plt>
   2ab14:	cmp	r0, #0
   2ab18:	beq	2abf4 <__assert_fail@plt+0x18520>
   2ab1c:	mvn	r7, #0
   2ab20:	cmp	r9, #0
   2ab24:	bge	2aa9c <__assert_fail@plt+0x183c8>
   2ab28:	bl	12434 <__errno_location@plt>
   2ab2c:	ldr	r5, [r0]
   2ab30:	mov	r4, r0
   2ab34:	ldr	r0, [sp, #12]
   2ab38:	bl	12680 <close@plt>
   2ab3c:	str	r5, [r4]
   2ab40:	b	2aa9c <__assert_fail@plt+0x183c8>
   2ab44:	ldrb	r3, [r4, #1]
   2ab48:	cmp	r3, #46	; 0x2e
   2ab4c:	bne	2aa6c <__assert_fail@plt+0x18398>
   2ab50:	ldrb	sl, [r4, #2]
   2ab54:	rsbs	sl, sl, #1
   2ab58:	movcc	sl, #0
   2ab5c:	b	2aa70 <__assert_fail@plt+0x1839c>
   2ab60:	ands	ip, r3, #512	; 0x200
   2ab64:	bne	2ac18 <__assert_fail@plt+0x18544>
   2ab68:	mov	sl, #1
   2ab6c:	tst	r3, #16
   2ab70:	ldr	r0, [r8, #32]
   2ab74:	moveq	r2, #18688	; 0x4900
   2ab78:	movne	r2, #51456	; 0xc900
   2ab7c:	tst	r3, #2048	; 0x800
   2ab80:	moveq	r1, #0
   2ab84:	movne	r1, #262144	; 0x40000
   2ab88:	cmp	ip, #0
   2ab8c:	orr	r2, r1, r2
   2ab90:	beq	2ac84 <__assert_fail@plt+0x185b0>
   2ab94:	mov	r1, r4
   2ab98:	bl	2dc60 <fts_children@@Base+0x1894>
   2ab9c:	str	r0, [sp, #12]
   2aba0:	ldr	r3, [sp, #12]
   2aba4:	cmp	r3, #0
   2aba8:	mvnlt	r7, #0
   2abac:	blt	2aa9c <__assert_fail@plt+0x183c8>
   2abb0:	mov	r0, r3
   2abb4:	mov	r1, #1
   2abb8:	bl	21060 <__assert_fail@plt+0xe98c>
   2abbc:	ldr	r3, [r8, #48]	; 0x30
   2abc0:	b	2aad0 <__assert_fail@plt+0x183fc>
   2abc4:	ldrd	r0, [fp]
   2abc8:	ldrd	r2, [sp, #112]	; 0x70
   2abcc:	cmp	r1, r3
   2abd0:	cmpeq	r0, r2
   2abd4:	bne	2ac08 <__assert_fail@plt+0x18534>
   2abd8:	ldr	r3, [r8, #48]	; 0x30
   2abdc:	tst	r3, #512	; 0x200
   2abe0:	bne	2ac6c <__assert_fail@plt+0x18598>
   2abe4:	ldr	r0, [sp, #12]
   2abe8:	bl	125cc <fchdir@plt>
   2abec:	mov	r7, r0
   2abf0:	b	2ab20 <__assert_fail@plt+0x1844c>
   2abf4:	ldrd	r4, [r5]
   2abf8:	ldrd	r2, [sp, #16]
   2abfc:	cmp	r5, r3
   2ac00:	cmpeq	r4, r2
   2ac04:	beq	2abc4 <__assert_fail@plt+0x184f0>
   2ac08:	bl	12434 <__errno_location@plt>
   2ac0c:	mov	r3, #2
   2ac10:	str	r3, [r0]
   2ac14:	b	2ab1c <__assert_fail@plt+0x18448>
   2ac18:	add	sl, r8, #60	; 0x3c
   2ac1c:	str	r3, [sp, #8]
   2ac20:	str	ip, [sp, #4]
   2ac24:	mov	r0, sl
   2ac28:	bl	2d480 <fts_children@@Base+0x10b4>
   2ac2c:	ldr	r3, [sp, #8]
   2ac30:	ldr	ip, [sp, #4]
   2ac34:	cmp	r0, #0
   2ac38:	bne	2ab68 <__assert_fail@plt+0x18494>
   2ac3c:	mov	r0, sl
   2ac40:	bl	2d4cc <fts_children@@Base+0x1100>
   2ac44:	ldr	r3, [r8, #48]	; 0x30
   2ac48:	cmp	r0, #0
   2ac4c:	str	r0, [sp, #12]
   2ac50:	andlt	ip, r3, #512	; 0x200
   2ac54:	blt	2ab68 <__assert_fail@plt+0x18494>
   2ac58:	tst	r3, #2
   2ac5c:	ldr	r9, [sp, #12]
   2ac60:	mov	sl, #1
   2ac64:	beq	2abdc <__assert_fail@plt+0x18508>
   2ac68:	b	2ab04 <__assert_fail@plt+0x18430>
   2ac6c:	eor	r2, sl, #1
   2ac70:	mov	r0, r8
   2ac74:	ldr	r1, [sp, #12]
   2ac78:	uxtb	r2, r2
   2ac7c:	bl	2a564 <__assert_fail@plt+0x17e90>
   2ac80:	b	2aa9c <__assert_fail@plt+0x183c8>
   2ac84:	mov	r1, r2
   2ac88:	mov	r0, r4
   2ac8c:	bl	21448 <__assert_fail@plt+0xed74>
   2ac90:	str	r0, [sp, #12]
   2ac94:	b	2aba0 <__assert_fail@plt+0x184cc>
   2ac98:	bl	12188 <__stack_chk_fail@plt>
   2ac9c:	and	ip, r3, #512	; 0x200
   2aca0:	b	2ab6c <__assert_fail@plt+0x18498>
   2aca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aca8:	mov	r5, r0
   2acac:	ldr	r9, [r5]
   2acb0:	sub	sp, sp, #164	; 0xa4
   2acb4:	movw	r0, #26008	; 0x6598
   2acb8:	movt	r0, #4
   2acbc:	str	r0, [sp, #40]	; 0x28
   2acc0:	ldr	r3, [r0]
   2acc4:	ldr	r0, [r9, #12]
   2acc8:	str	r1, [sp, #52]	; 0x34
   2accc:	adds	r1, r0, #0
   2acd0:	str	r3, [sp, #156]	; 0x9c
   2acd4:	movne	r1, #1
   2acd8:	cmp	r1, #0
   2acdc:	str	r1, [sp, #48]	; 0x30
   2ace0:	bne	2b208 <__assert_fail@plt+0x18b34>
   2ace4:	ldr	r3, [r5, #48]	; 0x30
   2ace8:	ldr	r1, [r9, #24]
   2acec:	and	r3, r3, #516	; 0x204
   2acf0:	cmp	r3, #512	; 0x200
   2acf4:	ldr	r3, [r5, #48]	; 0x30
   2acf8:	ldreq	r0, [r5, #32]
   2acfc:	mvnne	r0, #99	; 0x63
   2ad00:	tst	r3, #16
   2ad04:	moveq	r2, #18688	; 0x4900
   2ad08:	bne	2b194 <__assert_fail@plt+0x18ac0>
   2ad0c:	tst	r3, #2048	; 0x800
   2ad10:	moveq	r3, #0
   2ad14:	movne	r3, #262144	; 0x40000
   2ad18:	orr	r2, r3, r2
   2ad1c:	bl	2dc60 <fts_children@@Base+0x1894>
   2ad20:	subs	r4, r0, #0
   2ad24:	blt	2b438 <__assert_fail@plt+0x18d64>
   2ad28:	mov	r1, #1
   2ad2c:	bl	21060 <__assert_fail@plt+0xe98c>
   2ad30:	mov	r0, r4
   2ad34:	bl	125b4 <fdopendir@plt>
   2ad38:	cmp	r0, #0
   2ad3c:	beq	2b420 <__assert_fail@plt+0x18d4c>
   2ad40:	ldrh	r3, [r9, #60]	; 0x3c
   2ad44:	str	r0, [r9, #12]
   2ad48:	cmp	r3, #11
   2ad4c:	beq	2b454 <__assert_fail@plt+0x18d80>
   2ad50:	ldr	r3, [r5, #48]	; 0x30
   2ad54:	tst	r3, #256	; 0x100
   2ad58:	bne	2b278 <__assert_fail@plt+0x18ba4>
   2ad5c:	ldr	r1, [r5, #44]	; 0x2c
   2ad60:	movw	r2, #34464	; 0x86a0
   2ad64:	ldr	r0, [sp, #52]	; 0x34
   2ad68:	movt	r2, #1
   2ad6c:	cmp	r1, #0
   2ad70:	mvnne	r2, #0
   2ad74:	cmp	r0, #2
   2ad78:	str	r2, [sp, #20]
   2ad7c:	moveq	r6, #0
   2ad80:	beq	2ad98 <__assert_fail@plt+0x186c4>
   2ad84:	ldr	r2, [r5, #48]	; 0x30
   2ad88:	and	r2, r2, #24
   2ad8c:	cmp	r2, #24
   2ad90:	mvnne	r6, #0
   2ad94:	beq	2b260 <__assert_fail@plt+0x18b8c>
   2ad98:	ldr	r1, [sp, #48]	; 0x30
   2ad9c:	cmp	r1, #0
   2ada0:	movne	r1, #1
   2ada4:	strne	r1, [sp, #60]	; 0x3c
   2ada8:	beq	2b138 <__assert_fail@plt+0x18a64>
   2adac:	ldr	r0, [r9, #40]	; 0x28
   2adb0:	ldr	r1, [r9, #28]
   2adb4:	sub	r2, r0, #1
   2adb8:	ldrb	r1, [r1, r2]
   2adbc:	cmp	r1, #47	; 0x2f
   2adc0:	moveq	r0, r2
   2adc4:	ands	r3, r3, #4
   2adc8:	str	r0, [sp, #28]
   2adcc:	ldrne	r3, [r5, #24]
   2add0:	movne	r1, #47	; 0x2f
   2add4:	streq	r3, [sp, #44]	; 0x2c
   2add8:	addne	r2, r3, r0
   2addc:	strbne	r1, [r3, r0]
   2ade0:	addne	r2, r2, #1
   2ade4:	ldr	r1, [sp, #28]
   2ade8:	add	r0, r5, #48	; 0x30
   2adec:	ldr	fp, [r5, #36]	; 0x24
   2adf0:	ldr	r3, [r9, #48]	; 0x30
   2adf4:	add	r1, r1, #1
   2adf8:	strne	r2, [sp, #44]	; 0x2c
   2adfc:	mov	r2, #0
   2ae00:	add	r3, r3, #1
   2ae04:	str	r1, [sp, #12]
   2ae08:	str	r3, [sp, #24]
   2ae0c:	rsb	fp, r1, fp
   2ae10:	movw	r3, #20256	; 0x4f20
   2ae14:	str	r2, [sp, #32]
   2ae18:	movt	r3, #3
   2ae1c:	mov	sl, r2
   2ae20:	mov	r7, r2
   2ae24:	str	r2, [sp, #16]
   2ae28:	str	r3, [sp, #36]	; 0x24
   2ae2c:	str	r0, [sp, #56]	; 0x38
   2ae30:	b	2af00 <__assert_fail@plt+0x1882c>
   2ae34:	ldr	r2, [sp, #12]
   2ae38:	adds	r0, r0, r2
   2ae3c:	bcs	2afdc <__assert_fail@plt+0x18908>
   2ae40:	ldr	r2, [r5, #48]	; 0x30
   2ae44:	ldr	r1, [r5]
   2ae48:	tst	r2, #4
   2ae4c:	ldrd	r2, [r8]
   2ae50:	str	r0, [r4, #40]	; 0x28
   2ae54:	str	r1, [r4, #4]
   2ae58:	strd	r2, [r4, #168]	; 0xa8
   2ae5c:	ldr	r3, [sp, #24]
   2ae60:	str	r3, [r4, #48]	; 0x30
   2ae64:	addeq	r3, r4, #176	; 0xb0
   2ae68:	streq	r3, [r4, #24]
   2ae6c:	bne	2b024 <__assert_fail@plt+0x18950>
   2ae70:	ldr	r3, [r5, #44]	; 0x2c
   2ae74:	cmp	r3, #0
   2ae78:	beq	2ae88 <__assert_fail@plt+0x187b4>
   2ae7c:	ldr	r3, [r5, #48]	; 0x30
   2ae80:	ands	r3, r3, #1024	; 0x400
   2ae84:	beq	2b044 <__assert_fail@plt+0x18970>
   2ae88:	ldr	r3, [r5, #48]	; 0x30
   2ae8c:	and	r3, r3, #24
   2ae90:	cmp	r3, #24
   2ae94:	movne	r2, #0
   2ae98:	beq	2b07c <__assert_fail@plt+0x189a8>
   2ae9c:	mov	r0, #11
   2aea0:	strh	r0, [r4, #60]	; 0x3c
   2aea4:	ldrb	r3, [r8, #18]
   2aea8:	sub	r3, r3, #1
   2aeac:	cmp	r3, #11
   2aeb0:	ldrls	r1, [sp, #36]	; 0x24
   2aeb4:	movhi	r3, #0
   2aeb8:	ldrls	r3, [r1, r3, lsl #2]
   2aebc:	cmp	r2, #0
   2aec0:	moveq	r2, #2
   2aec4:	movne	r2, #1
   2aec8:	str	r3, [r4, #88]	; 0x58
   2aecc:	mov	r3, #0
   2aed0:	strd	r2, [r4, #120]	; 0x78
   2aed4:	ldr	r2, [sp, #16]
   2aed8:	add	r7, r7, #1
   2aedc:	ldr	r0, [sp, #20]
   2aee0:	mov	r3, #0
   2aee4:	cmp	r2, #0
   2aee8:	str	r3, [r4, #8]
   2aeec:	streq	r4, [sp, #16]
   2aef0:	strne	r4, [sl, #8]
   2aef4:	cmp	r0, r7
   2aef8:	bls	2b0a4 <__assert_fail@plt+0x189d0>
   2aefc:	mov	sl, r4
   2af00:	ldr	r0, [r9, #12]
   2af04:	cmp	r0, #0
   2af08:	beq	2b0a4 <__assert_fail@plt+0x189d0>
   2af0c:	bl	125a8 <readdir64@plt>
   2af10:	subs	r8, r0, #0
   2af14:	beq	2b090 <__assert_fail@plt+0x189bc>
   2af18:	ldr	r3, [r5, #48]	; 0x30
   2af1c:	tst	r3, #32
   2af20:	bne	2af30 <__assert_fail@plt+0x1885c>
   2af24:	ldrb	r3, [r8, #19]
   2af28:	cmp	r3, #46	; 0x2e
   2af2c:	beq	2b05c <__assert_fail@plt+0x18988>
   2af30:	add	r6, r8, #19
   2af34:	mov	r0, r6
   2af38:	bl	123d4 <strlen@plt>
   2af3c:	mov	r1, r6
   2af40:	mov	r2, r0
   2af44:	mov	r0, r5
   2af48:	bl	2a484 <__assert_fail@plt+0x17db0>
   2af4c:	subs	r4, r0, #0
   2af50:	beq	2b3d8 <__assert_fail@plt+0x18d04>
   2af54:	mov	r0, r6
   2af58:	bl	123d4 <strlen@plt>
   2af5c:	cmp	fp, r0
   2af60:	bhi	2ae34 <__assert_fail@plt+0x18760>
   2af64:	mov	r3, r5
   2af68:	ldr	r1, [sp, #28]
   2af6c:	ldr	fp, [r3, #24]!
   2af70:	add	r2, r1, #2
   2af74:	add	r1, r5, #36	; 0x24
   2af78:	add	r2, r2, r0
   2af7c:	mov	r0, r3
   2af80:	bl	2a79c <__assert_fail@plt+0x180c8>
   2af84:	cmp	r0, #0
   2af88:	beq	2b3d8 <__assert_fail@plt+0x18d04>
   2af8c:	ldr	r3, [r5, #24]
   2af90:	cmp	r3, fp
   2af94:	beq	2afbc <__assert_fail@plt+0x188e8>
   2af98:	ldr	r2, [r5, #48]	; 0x30
   2af9c:	tst	r2, #4
   2afa0:	ldrne	r2, [sp, #12]
   2afa4:	moveq	r0, #1
   2afa8:	streq	r0, [sp, #32]
   2afac:	addne	r3, r3, r2
   2afb0:	strne	r3, [sp, #44]	; 0x2c
   2afb4:	movne	r3, #1
   2afb8:	strne	r3, [sp, #32]
   2afbc:	ldr	r1, [sp, #12]
   2afc0:	mov	r0, r6
   2afc4:	ldr	fp, [r5, #36]	; 0x24
   2afc8:	rsb	fp, r1, fp
   2afcc:	bl	123d4 <strlen@plt>
   2afd0:	ldr	r2, [sp, #12]
   2afd4:	adds	r0, r0, r2
   2afd8:	bcc	2ae40 <__assert_fail@plt+0x1876c>
   2afdc:	mov	r0, r4
   2afe0:	mov	r4, #0
   2afe4:	bl	120c8 <free@plt>
   2afe8:	ldr	r0, [sp, #16]
   2afec:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2aff0:	ldr	r0, [r9, #12]
   2aff4:	bl	12698 <closedir@plt>
   2aff8:	ldr	r3, [r5, #48]	; 0x30
   2affc:	mov	r2, #7
   2b000:	str	r4, [r9, #12]
   2b004:	orr	r3, r3, #16384	; 0x4000
   2b008:	strh	r2, [r9, #60]	; 0x3c
   2b00c:	str	r3, [r5, #48]	; 0x30
   2b010:	bl	12434 <__errno_location@plt>
   2b014:	mov	r2, #36	; 0x24
   2b018:	mov	r3, r4
   2b01c:	str	r2, [r0]
   2b020:	b	2b234 <__assert_fail@plt+0x18b60>
   2b024:	ldr	r3, [r4, #28]
   2b028:	add	r1, r4, #176	; 0xb0
   2b02c:	ldr	r2, [r4, #52]	; 0x34
   2b030:	ldr	r0, [sp, #44]	; 0x2c
   2b034:	str	r3, [r4, #24]
   2b038:	add	r2, r2, #1
   2b03c:	bl	120bc <memmove@plt>
   2b040:	b	2ae70 <__assert_fail@plt+0x1879c>
   2b044:	ldr	r0, [r5, #32]
   2b048:	mov	r2, r4
   2b04c:	ldr	r1, [sp, #56]	; 0x38
   2b050:	bl	2a628 <__assert_fail@plt+0x17f54>
   2b054:	strh	r0, [r4, #60]	; 0x3c
   2b058:	b	2aed4 <__assert_fail@plt+0x18800>
   2b05c:	ldrb	r3, [r8, #20]
   2b060:	cmp	r3, #0
   2b064:	beq	2b074 <__assert_fail@plt+0x189a0>
   2b068:	ldrh	r3, [r8, #20]
   2b06c:	cmp	r3, #46	; 0x2e
   2b070:	bne	2af30 <__assert_fail@plt+0x1885c>
   2b074:	mov	r4, sl
   2b078:	b	2aefc <__assert_fail@plt+0x18828>
   2b07c:	ldrb	r3, [r8, #18]
   2b080:	tst	r3, #251	; 0xfb
   2b084:	moveq	r2, #0
   2b088:	movne	r2, #1
   2b08c:	b	2ae9c <__assert_fail@plt+0x187c8>
   2b090:	ldr	r0, [r9, #12]
   2b094:	cmp	r0, #0
   2b098:	beq	2b0a4 <__assert_fail@plt+0x189d0>
   2b09c:	bl	12698 <closedir@plt>
   2b0a0:	str	r8, [r9, #12]
   2b0a4:	ldr	r1, [sp, #32]
   2b0a8:	cmp	r1, #0
   2b0ac:	bne	2b2cc <__assert_fail@plt+0x18bf8>
   2b0b0:	ldr	r3, [r5, #48]	; 0x30
   2b0b4:	tst	r3, #4
   2b0b8:	beq	2b0ec <__assert_fail@plt+0x18a18>
   2b0bc:	ldr	r3, [r5, #36]	; 0x24
   2b0c0:	ldr	r2, [sp, #12]
   2b0c4:	cmp	r3, r2
   2b0c8:	beq	2b0d4 <__assert_fail@plt+0x18a00>
   2b0cc:	cmp	r7, #0
   2b0d0:	bne	2b0e0 <__assert_fail@plt+0x18a0c>
   2b0d4:	ldr	r3, [sp, #44]	; 0x2c
   2b0d8:	sub	r3, r3, #1
   2b0dc:	str	r3, [sp, #44]	; 0x2c
   2b0e0:	ldr	r0, [sp, #44]	; 0x2c
   2b0e4:	mov	r3, #0
   2b0e8:	strb	r3, [r0]
   2b0ec:	ldr	r1, [sp, #48]	; 0x30
   2b0f0:	ldr	r2, [sp, #60]	; 0x3c
   2b0f4:	eor	r3, r1, #1
   2b0f8:	tst	r2, r3
   2b0fc:	bne	2b1b4 <__assert_fail@plt+0x18ae0>
   2b100:	cmp	r7, #0
   2b104:	beq	2b4a4 <__assert_fail@plt+0x18dd0>
   2b108:	movw	r3, #10000	; 0x2710
   2b10c:	cmp	r7, r3
   2b110:	bls	2b21c <__assert_fail@plt+0x18b48>
   2b114:	ldr	r3, [r5, #44]	; 0x2c
   2b118:	cmp	r3, #0
   2b11c:	beq	2b4c4 <__assert_fail@plt+0x18df0>
   2b120:	mov	r0, r5
   2b124:	ldr	r1, [sp, #16]
   2b128:	mov	r2, r7
   2b12c:	bl	2a394 <__assert_fail@plt+0x17cc0>
   2b130:	mov	r3, r0
   2b134:	b	2b234 <__assert_fail@plt+0x18b60>
   2b138:	adds	r6, r6, #0
   2b13c:	ldr	r2, [sp, #52]	; 0x34
   2b140:	movne	r6, #1
   2b144:	subs	r2, r2, #3
   2b148:	rsbs	r7, r2, #0
   2b14c:	adcs	r7, r7, r2
   2b150:	orrs	r0, r6, r7
   2b154:	beq	2b254 <__assert_fail@plt+0x18b80>
   2b158:	tst	r3, #512	; 0x200
   2b15c:	bne	2b35c <__assert_fail@plt+0x18c88>
   2b160:	mov	r3, #0
   2b164:	mov	r0, r5
   2b168:	str	r3, [sp]
   2b16c:	add	r1, r9, #72	; 0x48
   2b170:	add	r2, r9, #168	; 0xa8
   2b174:	mov	r3, r4
   2b178:	bl	2aa28 <__assert_fail@plt+0x18354>
   2b17c:	cmp	r0, #0
   2b180:	bne	2b378 <__assert_fail@plt+0x18ca4>
   2b184:	mov	r0, #1
   2b188:	ldr	r3, [r5, #48]	; 0x30
   2b18c:	str	r0, [sp, #60]	; 0x3c
   2b190:	b	2adac <__assert_fail@plt+0x186d8>
   2b194:	tst	r3, #1
   2b198:	moveq	r2, #51456	; 0xc900
   2b19c:	beq	2ad0c <__assert_fail@plt+0x18638>
   2b1a0:	ldr	r2, [r9, #48]	; 0x30
   2b1a4:	cmp	r2, #0
   2b1a8:	movne	r2, #51456	; 0xc900
   2b1ac:	moveq	r2, #18688	; 0x4900
   2b1b0:	b	2ad0c <__assert_fail@plt+0x18638>
   2b1b4:	ldr	r3, [sp, #52]	; 0x34
   2b1b8:	cmp	r3, #1
   2b1bc:	cmpne	r7, #0
   2b1c0:	bne	2b108 <__assert_fail@plt+0x18a34>
   2b1c4:	ldr	r3, [r9, #48]	; 0x30
   2b1c8:	cmp	r3, #0
   2b1cc:	bne	2b474 <__assert_fail@plt+0x18da0>
   2b1d0:	mov	r0, r5
   2b1d4:	bl	2a5d8 <__assert_fail@plt+0x17f04>
   2b1d8:	adds	r0, r0, #0
   2b1dc:	movne	r0, #1
   2b1e0:	cmp	r0, #0
   2b1e4:	beq	2b100 <__assert_fail@plt+0x18a2c>
   2b1e8:	ldr	r3, [r5, #48]	; 0x30
   2b1ec:	mov	r2, #7
   2b1f0:	ldr	r0, [sp, #16]
   2b1f4:	strh	r2, [r9, #60]	; 0x3c
   2b1f8:	orr	r3, r3, #16384	; 0x4000
   2b1fc:	str	r3, [r5, #48]	; 0x30
   2b200:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2b204:	b	2b44c <__assert_fail@plt+0x18d78>
   2b208:	bl	125c0 <dirfd@plt>
   2b20c:	subs	r4, r0, #0
   2b210:	blt	2b530 <__assert_fail@plt+0x18e5c>
   2b214:	ldr	r3, [r5, #48]	; 0x30
   2b218:	b	2ad5c <__assert_fail@plt+0x18688>
   2b21c:	ldr	r3, [r5, #44]	; 0x2c
   2b220:	cmp	r3, #0
   2b224:	beq	2b230 <__assert_fail@plt+0x18b5c>
   2b228:	cmp	r7, #1
   2b22c:	bhi	2b120 <__assert_fail@plt+0x18a4c>
   2b230:	ldr	r3, [sp, #16]
   2b234:	ldr	r1, [sp, #40]	; 0x28
   2b238:	mov	r0, r3
   2b23c:	ldr	r2, [sp, #156]	; 0x9c
   2b240:	ldr	r3, [r1]
   2b244:	cmp	r2, r3
   2b248:	bne	2b568 <__assert_fail@plt+0x18e94>
   2b24c:	add	sp, sp, #164	; 0xa4
   2b250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b254:	ldr	r2, [sp, #48]	; 0x30
   2b258:	str	r2, [sp, #60]	; 0x3c
   2b25c:	b	2adac <__assert_fail@plt+0x186d8>
   2b260:	tst	r3, #32
   2b264:	ldr	r6, [r9, #92]	; 0x5c
   2b268:	movne	r2, #0
   2b26c:	moveq	r2, #2
   2b270:	rsb	r6, r2, r6
   2b274:	b	2ad98 <__assert_fail@plt+0x186c4>
   2b278:	add	r6, r5, #56	; 0x38
   2b27c:	mov	r0, r3
   2b280:	mov	r2, r9
   2b284:	mov	r1, r6
   2b288:	bl	2a950 <__assert_fail@plt+0x1827c>
   2b28c:	add	r1, r5, #48	; 0x30
   2b290:	mov	r2, r9
   2b294:	mov	r3, #0
   2b298:	ldr	r0, [r5, #32]
   2b29c:	bl	2a628 <__assert_fail@plt+0x17f54>
   2b2a0:	mov	r1, r6
   2b2a4:	ldr	r0, [r5, #48]	; 0x30
   2b2a8:	mov	r2, r9
   2b2ac:	bl	2a89c <__assert_fail@plt+0x181c8>
   2b2b0:	subs	r6, r0, #0
   2b2b4:	bne	2b214 <__assert_fail@plt+0x18b40>
   2b2b8:	bl	12434 <__errno_location@plt>
   2b2bc:	mov	r2, #12
   2b2c0:	mov	r3, r6
   2b2c4:	str	r2, [r0]
   2b2c8:	b	2b234 <__assert_fail@plt+0x18b60>
   2b2cc:	ldr	r3, [r5, #4]
   2b2d0:	ldr	r2, [r5, #24]
   2b2d4:	cmp	r3, #0
   2b2d8:	beq	2b308 <__assert_fail@plt+0x18c34>
   2b2dc:	ldr	r1, [r3, #24]
   2b2e0:	add	r0, r3, #176	; 0xb0
   2b2e4:	cmp	r1, r0
   2b2e8:	ldrne	r0, [r3, #28]
   2b2ec:	str	r2, [r3, #28]
   2b2f0:	rsbne	r1, r0, r1
   2b2f4:	addne	r1, r2, r1
   2b2f8:	strne	r1, [r3, #24]
   2b2fc:	ldr	r3, [r3, #8]
   2b300:	cmp	r3, #0
   2b304:	bne	2b2dc <__assert_fail@plt+0x18c08>
   2b308:	ldr	r3, [sp, #16]
   2b30c:	b	2b340 <__assert_fail@plt+0x18c6c>
   2b310:	ldr	r1, [r3, #24]
   2b314:	add	r0, r3, #176	; 0xb0
   2b318:	cmp	r1, r0
   2b31c:	ldrne	r0, [r3, #28]
   2b320:	str	r2, [r3, #28]
   2b324:	rsbne	r1, r0, r1
   2b328:	addne	r1, r2, r1
   2b32c:	strne	r1, [r3, #24]
   2b330:	ldr	r1, [r3, #8]
   2b334:	cmp	r1, #0
   2b338:	ldreq	r1, [r3, #4]
   2b33c:	mov	r3, r1
   2b340:	ldr	r1, [r3, #48]	; 0x30
   2b344:	cmp	r1, #0
   2b348:	bge	2b310 <__assert_fail@plt+0x18c3c>
   2b34c:	ldr	r3, [r5, #48]	; 0x30
   2b350:	tst	r3, #4
   2b354:	bne	2b0bc <__assert_fail@plt+0x189e8>
   2b358:	b	2b0ec <__assert_fail@plt+0x18a18>
   2b35c:	mov	r0, r4
   2b360:	bl	288bc <__assert_fail@plt+0x161e8>
   2b364:	subs	r4, r0, #0
   2b368:	blt	2b378 <__assert_fail@plt+0x18ca4>
   2b36c:	mov	r1, #1
   2b370:	bl	21060 <__assert_fail@plt+0xe98c>
   2b374:	b	2b160 <__assert_fail@plt+0x18a8c>
   2b378:	tst	r6, r7
   2b37c:	beq	2b38c <__assert_fail@plt+0x18cb8>
   2b380:	bl	12434 <__errno_location@plt>
   2b384:	ldr	r3, [r0]
   2b388:	str	r3, [r9, #32]
   2b38c:	ldrh	r3, [r9, #62]	; 0x3e
   2b390:	ldr	r0, [r9, #12]
   2b394:	orr	r3, r3, #1
   2b398:	strh	r3, [r9, #62]	; 0x3e
   2b39c:	bl	12698 <closedir@plt>
   2b3a0:	ldr	r3, [r5, #48]	; 0x30
   2b3a4:	mov	r2, #0
   2b3a8:	str	r2, [r9, #12]
   2b3ac:	tst	r3, #512	; 0x200
   2b3b0:	beq	2b3c8 <__assert_fail@plt+0x18cf4>
   2b3b4:	cmp	r4, r2
   2b3b8:	blt	2b3c8 <__assert_fail@plt+0x18cf4>
   2b3bc:	mov	r0, r4
   2b3c0:	bl	12680 <close@plt>
   2b3c4:	ldr	r3, [r5, #48]	; 0x30
   2b3c8:	mov	r2, #0
   2b3cc:	str	r2, [r9, #12]
   2b3d0:	str	r2, [sp, #60]	; 0x3c
   2b3d4:	b	2adac <__assert_fail@plt+0x186d8>
   2b3d8:	bl	12434 <__errno_location@plt>
   2b3dc:	mov	r6, r0
   2b3e0:	mov	r0, r4
   2b3e4:	ldr	r4, [r6]
   2b3e8:	bl	120c8 <free@plt>
   2b3ec:	ldr	r0, [sp, #16]
   2b3f0:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2b3f4:	ldr	r0, [r9, #12]
   2b3f8:	bl	12698 <closedir@plt>
   2b3fc:	ldr	r2, [r5, #48]	; 0x30
   2b400:	mov	r3, #0
   2b404:	mov	r1, #7
   2b408:	str	r3, [r9, #12]
   2b40c:	orr	r2, r2, #16384	; 0x4000
   2b410:	strh	r1, [r9, #60]	; 0x3c
   2b414:	str	r2, [r5, #48]	; 0x30
   2b418:	str	r4, [r6]
   2b41c:	b	2b234 <__assert_fail@plt+0x18b60>
   2b420:	bl	12434 <__errno_location@plt>
   2b424:	ldr	r6, [r0]
   2b428:	mov	r5, r0
   2b42c:	mov	r0, r4
   2b430:	bl	12680 <close@plt>
   2b434:	str	r6, [r5]
   2b438:	ldr	r2, [sp, #52]	; 0x34
   2b43c:	mov	r4, #0
   2b440:	str	r4, [r9, #12]
   2b444:	cmp	r2, #3
   2b448:	beq	2b54c <__assert_fail@plt+0x18e78>
   2b44c:	mov	r3, #0
   2b450:	b	2b234 <__assert_fail@plt+0x18b60>
   2b454:	mov	r3, #0
   2b458:	ldr	r0, [r5, #32]
   2b45c:	add	r1, r5, #48	; 0x30
   2b460:	mov	r2, r9
   2b464:	bl	2a628 <__assert_fail@plt+0x17f54>
   2b468:	ldr	r3, [r5, #48]	; 0x30
   2b46c:	strh	r0, [r9, #60]	; 0x3c
   2b470:	b	2ad5c <__assert_fail@plt+0x18688>
   2b474:	ldr	r2, [r9, #4]
   2b478:	movw	r3, #20304	; 0x4f50
   2b47c:	mov	r0, r5
   2b480:	movt	r3, #3
   2b484:	add	r1, r2, #72	; 0x48
   2b488:	str	r3, [sp]
   2b48c:	add	r2, r2, #168	; 0xa8
   2b490:	mvn	r3, #0
   2b494:	bl	2aa28 <__assert_fail@plt+0x18354>
   2b498:	adds	r0, r0, #0
   2b49c:	movne	r0, #1
   2b4a0:	b	2b1e0 <__assert_fail@plt+0x18b0c>
   2b4a4:	ldr	r0, [sp, #52]	; 0x34
   2b4a8:	cmp	r0, #3
   2b4ac:	ldr	r0, [sp, #16]
   2b4b0:	moveq	r3, #6
   2b4b4:	strheq	r3, [r9, #60]	; 0x3c
   2b4b8:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2b4bc:	mov	r3, #0
   2b4c0:	b	2b234 <__assert_fail@plt+0x18b60>
   2b4c4:	ldr	r3, [r5, #48]	; 0x30
   2b4c8:	tst	r3, #512	; 0x200
   2b4cc:	beq	2b230 <__assert_fail@plt+0x18b5c>
   2b4d0:	ldr	r0, [r5, #32]
   2b4d4:	add	r1, sp, #64	; 0x40
   2b4d8:	bl	12008 <fstatfs64@plt>
   2b4dc:	cmp	r0, #0
   2b4e0:	bne	2b504 <__assert_fail@plt+0x18e30>
   2b4e4:	ldr	r2, [sp, #64]	; 0x40
   2b4e8:	movw	r3, #26985	; 0x6969
   2b4ec:	cmp	r2, r3
   2b4f0:	beq	2b21c <__assert_fail@plt+0x18b48>
   2b4f4:	movw	r3, #6548	; 0x1994
   2b4f8:	movt	r3, #258	; 0x102
   2b4fc:	cmp	r2, r3
   2b500:	beq	2b21c <__assert_fail@plt+0x18b48>
   2b504:	ldr	r1, [sp, #16]
   2b508:	mov	r2, r7
   2b50c:	movw	r3, #41828	; 0xa364
   2b510:	mov	r0, r5
   2b514:	movt	r3, #2
   2b518:	str	r3, [r5, #44]	; 0x2c
   2b51c:	bl	2a394 <__assert_fail@plt+0x17cc0>
   2b520:	mov	r3, #0
   2b524:	str	r3, [r5, #44]	; 0x2c
   2b528:	str	r0, [sp, #16]
   2b52c:	b	2b230 <__assert_fail@plt+0x18b5c>
   2b530:	ldr	r0, [r9, #12]
   2b534:	mov	r4, #0
   2b538:	bl	12698 <closedir@plt>
   2b53c:	ldr	r2, [sp, #52]	; 0x34
   2b540:	str	r4, [r9, #12]
   2b544:	cmp	r2, #3
   2b548:	bne	2b44c <__assert_fail@plt+0x18d78>
   2b54c:	mov	r3, #4
   2b550:	strh	r3, [r9, #60]	; 0x3c
   2b554:	bl	12434 <__errno_location@plt>
   2b558:	mov	r3, r4
   2b55c:	ldr	r2, [r0]
   2b560:	str	r2, [r9, #32]
   2b564:	b	2b234 <__assert_fail@plt+0x18b60>
   2b568:	bl	12188 <__stack_chk_fail@plt>

0002b56c <fts_open@@Base>:
   2b56c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b570:	mov	fp, r1
   2b574:	bic	r1, r1, #8128	; 0x1fc0
   2b578:	sub	sp, sp, #20
   2b57c:	bics	r4, r1, #63	; 0x3f
   2b580:	mov	r7, r0
   2b584:	mov	r8, r2
   2b588:	bne	2b8d8 <fts_open@@Base+0x36c>
   2b58c:	and	r3, fp, #516	; 0x204
   2b590:	cmp	r3, #516	; 0x204
   2b594:	beq	2b928 <fts_open@@Base+0x3bc>
   2b598:	ands	r5, fp, #18
   2b59c:	beq	2b8c0 <fts_open@@Base+0x354>
   2b5a0:	mov	r0, #96	; 0x60
   2b5a4:	bl	1232c <malloc@plt>
   2b5a8:	subs	r5, r0, #0
   2b5ac:	beq	2b7f0 <fts_open@@Base+0x284>
   2b5b0:	mov	r2, #96	; 0x60
   2b5b4:	mov	r1, r4
   2b5b8:	bl	12464 <memset@plt>
   2b5bc:	tst	fp, #2
   2b5c0:	bicne	r3, fp, #512	; 0x200
   2b5c4:	str	r8, [r5, #44]	; 0x2c
   2b5c8:	streq	fp, [r5, #48]	; 0x30
   2b5cc:	mvn	r2, #99	; 0x63
   2b5d0:	orrne	r3, r3, #4
   2b5d4:	strne	r3, [r5, #48]	; 0x30
   2b5d8:	ldr	r3, [r7]
   2b5dc:	str	r2, [r5, #32]
   2b5e0:	cmp	r3, #0
   2b5e4:	beq	2b8f4 <fts_open@@Base+0x388>
   2b5e8:	mov	r6, r7
   2b5ec:	mov	r4, #0
   2b5f0:	mov	r0, r3
   2b5f4:	bl	123d4 <strlen@plt>
   2b5f8:	ldr	r3, [r6, #4]!
   2b5fc:	cmp	r4, r0
   2b600:	movcc	r4, r0
   2b604:	cmp	r3, #0
   2b608:	bne	2b5f0 <fts_open@@Base+0x84>
   2b60c:	add	r2, r4, #1
   2b610:	cmp	r2, #4096	; 0x1000
   2b614:	movcc	r2, #4096	; 0x1000
   2b618:	add	r0, r5, #24
   2b61c:	add	r1, r5, #36	; 0x24
   2b620:	bl	2a79c <__assert_fail@plt+0x180c8>
   2b624:	subs	sl, r0, #0
   2b628:	beq	2b834 <fts_open@@Base+0x2c8>
   2b62c:	ldr	r1, [r7]
   2b630:	cmp	r1, #0
   2b634:	beq	2b84c <fts_open@@Base+0x2e0>
   2b638:	movw	r1, #15168	; 0x3b40
   2b63c:	mov	r0, r5
   2b640:	movt	r1, #3
   2b644:	mov	r2, #0
   2b648:	bl	2a484 <__assert_fail@plt+0x17db0>
   2b64c:	subs	r9, r0, #0
   2b650:	beq	2b82c <fts_open@@Base+0x2c0>
   2b654:	mvn	r3, #0
   2b658:	ldr	r1, [r7]
   2b65c:	str	r3, [r9, #48]	; 0x30
   2b660:	cmp	r8, #0
   2b664:	ldrne	sl, [r5, #48]	; 0x30
   2b668:	ubfxne	sl, sl, #10, #1
   2b66c:	cmp	r1, #0
   2b670:	beq	2b93c <fts_open@@Base+0x3d0>
   2b674:	mov	r2, #0
   2b678:	and	fp, fp, #4096	; 0x1000
   2b67c:	add	r3, r5, #48	; 0x30
   2b680:	str	fp, [sp, #4]
   2b684:	str	r2, [sp, #8]
   2b688:	mov	fp, sl
   2b68c:	str	r3, [sp, #12]
   2b690:	mov	r6, r2
   2b694:	mov	r4, r2
   2b698:	mov	sl, r1
   2b69c:	b	2b6d4 <fts_open@@Base+0x168>
   2b6a0:	cmp	r8, #0
   2b6a4:	mov	r3, #11
   2b6a8:	mov	r2, #2
   2b6ac:	strh	r3, [sl, #60]	; 0x3c
   2b6b0:	mov	r3, #0
   2b6b4:	strd	r2, [sl, #120]	; 0x78
   2b6b8:	beq	2b75c <fts_open@@Base+0x1f0>
   2b6bc:	str	r4, [sl, #8]
   2b6c0:	mov	r4, sl
   2b6c4:	ldr	sl, [r7, #4]!
   2b6c8:	add	r6, r6, #1
   2b6cc:	cmp	sl, #0
   2b6d0:	beq	2b788 <fts_open@@Base+0x21c>
   2b6d4:	mov	r0, sl
   2b6d8:	bl	123d4 <strlen@plt>
   2b6dc:	ldr	r3, [sp, #4]
   2b6e0:	cmp	r3, #0
   2b6e4:	mov	r2, r0
   2b6e8:	bne	2b704 <fts_open@@Base+0x198>
   2b6ec:	cmp	r0, #2
   2b6f0:	bls	2b704 <fts_open@@Base+0x198>
   2b6f4:	add	r3, sl, r0
   2b6f8:	ldrb	r0, [r3, #-1]
   2b6fc:	cmp	r0, #47	; 0x2f
   2b700:	beq	2b7fc <fts_open@@Base+0x290>
   2b704:	mov	r1, sl
   2b708:	mov	r0, r5
   2b70c:	bl	2a484 <__assert_fail@plt+0x17db0>
   2b710:	subs	sl, r0, #0
   2b714:	beq	2b81c <fts_open@@Base+0x2b0>
   2b718:	cmp	r4, #0
   2b71c:	moveq	r3, #0
   2b720:	andne	r3, fp, #1
   2b724:	mov	r2, #0
   2b728:	cmp	r3, r2
   2b72c:	str	r2, [sl, #48]	; 0x30
   2b730:	str	r9, [sl, #4]
   2b734:	add	r2, sl, #176	; 0xb0
   2b738:	str	r2, [sl, #24]
   2b73c:	bne	2b6a0 <fts_open@@Base+0x134>
   2b740:	ldr	r0, [r5, #32]
   2b744:	mov	r2, sl
   2b748:	ldr	r1, [sp, #12]
   2b74c:	bl	2a628 <__assert_fail@plt+0x17f54>
   2b750:	cmp	r8, #0
   2b754:	strh	r0, [sl, #60]	; 0x3c
   2b758:	bne	2b6bc <fts_open@@Base+0x150>
   2b75c:	cmp	r4, #0
   2b760:	str	r8, [sl, #8]
   2b764:	streq	sl, [sp, #8]
   2b768:	add	r6, r6, #1
   2b76c:	ldrne	r3, [sp, #8]
   2b770:	moveq	r4, sl
   2b774:	strne	sl, [sp, #8]
   2b778:	strne	sl, [r3, #8]
   2b77c:	ldr	sl, [r7, #4]!
   2b780:	cmp	sl, #0
   2b784:	bne	2b6d4 <fts_open@@Base+0x168>
   2b788:	cmp	r8, #0
   2b78c:	cmpne	r6, #1
   2b790:	bhi	2b8a8 <fts_open@@Base+0x33c>
   2b794:	movw	r1, #15168	; 0x3b40
   2b798:	mov	r0, r5
   2b79c:	movt	r1, #3
   2b7a0:	mov	r2, #0
   2b7a4:	bl	2a484 <__assert_fail@plt+0x17db0>
   2b7a8:	cmp	r0, #0
   2b7ac:	mov	r3, r0
   2b7b0:	str	r0, [r5]
   2b7b4:	beq	2b81c <fts_open@@Base+0x2b0>
   2b7b8:	str	r4, [r0, #8]
   2b7bc:	mov	r2, #9
   2b7c0:	ldr	r0, [r5, #48]	; 0x30
   2b7c4:	add	r1, r5, #56	; 0x38
   2b7c8:	strh	r2, [r3, #60]	; 0x3c
   2b7cc:	bl	2a81c <__assert_fail@plt+0x18148>
   2b7d0:	cmp	r0, #0
   2b7d4:	beq	2b81c <fts_open@@Base+0x2b0>
   2b7d8:	ldr	r3, [r5, #48]	; 0x30
   2b7dc:	tst	r3, #516	; 0x204
   2b7e0:	beq	2b854 <fts_open@@Base+0x2e8>
   2b7e4:	add	r0, r5, #60	; 0x3c
   2b7e8:	mvn	r1, #0
   2b7ec:	bl	2d454 <fts_children@@Base+0x1088>
   2b7f0:	mov	r0, r5
   2b7f4:	add	sp, sp, #20
   2b7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7fc:	ldrb	r1, [r3, #-2]
   2b800:	sub	r3, r3, #1
   2b804:	cmp	r1, #47	; 0x2f
   2b808:	bne	2b704 <fts_open@@Base+0x198>
   2b80c:	sub	r2, r2, #1
   2b810:	cmp	r2, #1
   2b814:	bne	2b7fc <fts_open@@Base+0x290>
   2b818:	b	2b704 <fts_open@@Base+0x198>
   2b81c:	mov	r0, r4
   2b820:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2b824:	mov	r0, r9
   2b828:	bl	120c8 <free@plt>
   2b82c:	ldr	r0, [r5, #24]
   2b830:	bl	120c8 <free@plt>
   2b834:	mov	r0, r5
   2b838:	mov	r5, #0
   2b83c:	bl	120c8 <free@plt>
   2b840:	mov	r0, r5
   2b844:	add	sp, sp, #20
   2b848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b84c:	mov	r9, r1
   2b850:	b	2b660 <fts_open@@Base+0xf4>
   2b854:	tst	r3, #16
   2b858:	ldr	r0, [r5, #32]
   2b85c:	moveq	r2, #18688	; 0x4900
   2b860:	movne	r2, #51456	; 0xc900
   2b864:	tst	r3, #2048	; 0x800
   2b868:	moveq	r1, #0
   2b86c:	movne	r1, #262144	; 0x40000
   2b870:	tst	r3, #512	; 0x200
   2b874:	orr	r2, r1, r2
   2b878:	beq	2b8fc <fts_open@@Base+0x390>
   2b87c:	movw	r1, #7340	; 0x1cac
   2b880:	movt	r1, #3
   2b884:	bl	2dc60 <fts_children@@Base+0x1894>
   2b888:	mov	r4, r0
   2b88c:	cmp	r4, #0
   2b890:	blt	2b914 <fts_open@@Base+0x3a8>
   2b894:	mov	r0, r4
   2b898:	mov	r1, #1
   2b89c:	bl	21060 <__assert_fail@plt+0xe98c>
   2b8a0:	str	r4, [r5, #28]
   2b8a4:	b	2b7e4 <fts_open@@Base+0x278>
   2b8a8:	mov	r1, r4
   2b8ac:	mov	r2, r6
   2b8b0:	mov	r0, r5
   2b8b4:	bl	2a394 <__assert_fail@plt+0x17cc0>
   2b8b8:	mov	r4, r0
   2b8bc:	b	2b794 <fts_open@@Base+0x228>
   2b8c0:	bl	12434 <__errno_location@plt>
   2b8c4:	mov	r3, #22
   2b8c8:	str	r3, [r0]
   2b8cc:	mov	r0, r5
   2b8d0:	add	sp, sp, #20
   2b8d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8d8:	bl	12434 <__errno_location@plt>
   2b8dc:	mov	r5, #0
   2b8e0:	mov	r3, #22
   2b8e4:	str	r3, [r0]
   2b8e8:	mov	r0, r5
   2b8ec:	add	sp, sp, #20
   2b8f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8f4:	mov	r2, #4096	; 0x1000
   2b8f8:	b	2b618 <fts_open@@Base+0xac>
   2b8fc:	mov	r1, r2
   2b900:	movw	r0, #7340	; 0x1cac
   2b904:	movt	r0, #3
   2b908:	bl	21448 <__assert_fail@plt+0xed74>
   2b90c:	mov	r4, r0
   2b910:	b	2b88c <fts_open@@Base+0x320>
   2b914:	ldr	r3, [r5, #48]	; 0x30
   2b918:	str	r4, [r5, #28]
   2b91c:	orr	r3, r3, #4
   2b920:	str	r3, [r5, #48]	; 0x30
   2b924:	b	2b7e4 <fts_open@@Base+0x278>
   2b928:	bl	12434 <__errno_location@plt>
   2b92c:	mov	r5, r4
   2b930:	mov	r3, #22
   2b934:	str	r3, [r0]
   2b938:	b	2b7f0 <fts_open@@Base+0x284>
   2b93c:	mov	r4, r1
   2b940:	b	2b794 <fts_open@@Base+0x228>

0002b944 <fts_close@@Base>:
   2b944:	ldr	r3, [r0]
   2b948:	push	{r4, r5, r6, lr}
   2b94c:	cmp	r3, #0
   2b950:	mov	r5, r0
   2b954:	beq	2b990 <fts_close@@Base+0x4c>
   2b958:	ldr	r2, [r3, #48]	; 0x30
   2b95c:	cmp	r2, #0
   2b960:	blt	2ba7c <fts_close@@Base+0x138>
   2b964:	ldr	r4, [r3, #8]
   2b968:	mov	r0, r3
   2b96c:	cmp	r4, #0
   2b970:	ldreq	r4, [r3, #4]
   2b974:	bl	120c8 <free@plt>
   2b978:	ldr	r2, [r4, #48]	; 0x30
   2b97c:	mov	r3, r4
   2b980:	cmp	r2, #0
   2b984:	bge	2b964 <fts_close@@Base+0x20>
   2b988:	mov	r0, r4
   2b98c:	bl	120c8 <free@plt>
   2b990:	ldr	r0, [r5, #4]
   2b994:	cmp	r0, #0
   2b998:	beq	2b9a0 <fts_close@@Base+0x5c>
   2b99c:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2b9a0:	ldr	r0, [r5, #8]
   2b9a4:	bl	120c8 <free@plt>
   2b9a8:	ldr	r0, [r5, #24]
   2b9ac:	bl	120c8 <free@plt>
   2b9b0:	ldr	r3, [r5, #48]	; 0x30
   2b9b4:	tst	r3, #512	; 0x200
   2b9b8:	beq	2ba30 <fts_close@@Base+0xec>
   2b9bc:	ldr	r0, [r5, #32]
   2b9c0:	cmp	r0, #0
   2b9c4:	blt	2b9d4 <fts_close@@Base+0x90>
   2b9c8:	bl	12680 <close@plt>
   2b9cc:	cmp	r0, #0
   2b9d0:	bne	2ba70 <fts_close@@Base+0x12c>
   2b9d4:	mov	r4, #0
   2b9d8:	add	r0, r5, #60	; 0x3c
   2b9dc:	bl	2a52c <__assert_fail@plt+0x17e58>
   2b9e0:	ldr	r0, [r5, #52]	; 0x34
   2b9e4:	cmp	r0, #0
   2b9e8:	beq	2b9f0 <fts_close@@Base+0xac>
   2b9ec:	bl	22178 <__assert_fail@plt+0xfaa4>
   2b9f0:	ldr	r2, [r5, #48]	; 0x30
   2b9f4:	movw	r3, #258	; 0x102
   2b9f8:	ldr	r0, [r5, #56]	; 0x38
   2b9fc:	and	r3, r2, r3
   2ba00:	cmp	r3, #0
   2ba04:	beq	2ba68 <fts_close@@Base+0x124>
   2ba08:	cmp	r0, #0
   2ba0c:	beq	2ba14 <fts_close@@Base+0xd0>
   2ba10:	bl	22178 <__assert_fail@plt+0xfaa4>
   2ba14:	mov	r0, r5
   2ba18:	bl	120c8 <free@plt>
   2ba1c:	cmp	r4, #0
   2ba20:	moveq	r3, r4
   2ba24:	bne	2baac <fts_close@@Base+0x168>
   2ba28:	mov	r0, r3
   2ba2c:	pop	{r4, r5, r6, pc}
   2ba30:	tst	r3, #4
   2ba34:	bne	2b9d4 <fts_close@@Base+0x90>
   2ba38:	ldr	r0, [r5, #28]
   2ba3c:	bl	125cc <fchdir@plt>
   2ba40:	cmp	r0, #0
   2ba44:	bne	2ba84 <fts_close@@Base+0x140>
   2ba48:	ldr	r0, [r5, #28]
   2ba4c:	bl	12680 <close@plt>
   2ba50:	cmp	r0, #0
   2ba54:	beq	2b9d4 <fts_close@@Base+0x90>
   2ba58:	bl	12434 <__errno_location@plt>
   2ba5c:	mov	r6, r0
   2ba60:	ldr	r4, [r6]
   2ba64:	b	2b9d8 <fts_close@@Base+0x94>
   2ba68:	bl	120c8 <free@plt>
   2ba6c:	b	2ba14 <fts_close@@Base+0xd0>
   2ba70:	bl	12434 <__errno_location@plt>
   2ba74:	ldr	r4, [r0]
   2ba78:	b	2b9d8 <fts_close@@Base+0x94>
   2ba7c:	mov	r4, r3
   2ba80:	b	2b988 <fts_close@@Base+0x44>
   2ba84:	bl	12434 <__errno_location@plt>
   2ba88:	mov	r6, r0
   2ba8c:	ldr	r0, [r5, #28]
   2ba90:	ldr	r4, [r6]
   2ba94:	bl	12680 <close@plt>
   2ba98:	cmp	r0, #0
   2ba9c:	beq	2b9d8 <fts_close@@Base+0x94>
   2baa0:	cmp	r4, #0
   2baa4:	bne	2b9d8 <fts_close@@Base+0x94>
   2baa8:	b	2ba60 <fts_close@@Base+0x11c>
   2baac:	bl	12434 <__errno_location@plt>
   2bab0:	mvn	r3, #0
   2bab4:	str	r4, [r0]
   2bab8:	b	2ba28 <fts_close@@Base+0xe4>

0002babc <fts_read@@Base>:
   2babc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bac0:	movw	r9, #26008	; 0x6598
   2bac4:	movt	r9, #4
   2bac8:	ldr	sl, [r0]
   2bacc:	sub	sp, sp, #124	; 0x7c
   2bad0:	mov	r8, r0
   2bad4:	ldr	r3, [r9]
   2bad8:	cmp	sl, #0
   2badc:	str	r3, [sp, #116]	; 0x74
   2bae0:	beq	2bc84 <fts_read@@Base+0x1c8>
   2bae4:	ldr	r2, [r0, #48]	; 0x30
   2bae8:	ands	r3, r2, #16384	; 0x4000
   2baec:	bne	2bc84 <fts_read@@Base+0x1c8>
   2baf0:	ldrh	r1, [sl, #64]	; 0x40
   2baf4:	mov	r0, #3
   2baf8:	strh	r0, [sl, #64]	; 0x40
   2bafc:	cmp	r1, #1
   2bb00:	beq	2bea0 <fts_read@@Base+0x3e4>
   2bb04:	cmp	r1, #2
   2bb08:	ldrh	r3, [sl, #60]	; 0x3c
   2bb0c:	beq	2bc04 <fts_read@@Base+0x148>
   2bb10:	cmp	r3, #1
   2bb14:	bne	2bb44 <fts_read@@Base+0x88>
   2bb18:	b	2bc78 <fts_read@@Base+0x1bc>
   2bb1c:	str	r6, [r8]
   2bb20:	mov	r0, sl
   2bb24:	bl	120c8 <free@plt>
   2bb28:	ldr	r4, [r6, #48]	; 0x30
   2bb2c:	cmp	r4, #0
   2bb30:	beq	2bca4 <fts_read@@Base+0x1e8>
   2bb34:	ldrh	r3, [r6, #64]	; 0x40
   2bb38:	cmp	r3, #4
   2bb3c:	bne	2bda0 <fts_read@@Base+0x2e4>
   2bb40:	mov	sl, r6
   2bb44:	ldr	r6, [sl, #8]
   2bb48:	cmp	r6, #0
   2bb4c:	bne	2bb1c <fts_read@@Base+0x60>
   2bb50:	ldr	r4, [sl, #4]
   2bb54:	ldr	r3, [r4, #12]
   2bb58:	cmp	r3, #0
   2bb5c:	bne	2c0b0 <fts_read@@Base+0x5f4>
   2bb60:	str	r4, [r8]
   2bb64:	mov	r0, sl
   2bb68:	bl	120c8 <free@plt>
   2bb6c:	ldr	r3, [r4, #48]	; 0x30
   2bb70:	cmn	r3, #1
   2bb74:	beq	2bf84 <fts_read@@Base+0x4c8>
   2bb78:	ldrh	r3, [r4, #60]	; 0x3c
   2bb7c:	cmp	r3, #11
   2bb80:	beq	2be14 <fts_read@@Base+0x358>
   2bb84:	ldr	r3, [r4, #40]	; 0x28
   2bb88:	mov	r1, #0
   2bb8c:	ldr	r2, [r8, #24]
   2bb90:	strb	r1, [r2, r3]
   2bb94:	ldr	r3, [r4, #48]	; 0x30
   2bb98:	cmp	r3, r1
   2bb9c:	beq	2bf0c <fts_read@@Base+0x450>
   2bba0:	ldrh	r3, [r4, #62]	; 0x3e
   2bba4:	tst	r3, #2
   2bba8:	beq	2bebc <fts_read@@Base+0x400>
   2bbac:	ldr	r3, [r8, #48]	; 0x30
   2bbb0:	tst	r3, #4
   2bbb4:	beq	2bf20 <fts_read@@Base+0x464>
   2bbb8:	ldr	r0, [r4, #36]	; 0x24
   2bbbc:	bl	12680 <close@plt>
   2bbc0:	ldr	r3, [r8, #48]	; 0x30
   2bbc4:	ldr	r2, [r4, #32]
   2bbc8:	cmp	r2, #0
   2bbcc:	movne	r2, #7
   2bbd0:	strhne	r2, [r4, #60]	; 0x3c
   2bbd4:	bne	2bbf4 <fts_read@@Base+0x138>
   2bbd8:	mov	r0, r3
   2bbdc:	add	r1, r8, #56	; 0x38
   2bbe0:	mov	r3, #6
   2bbe4:	mov	r2, r4
   2bbe8:	strh	r3, [r4, #60]	; 0x3c
   2bbec:	bl	2a950 <__assert_fail@plt+0x1827c>
   2bbf0:	ldr	r3, [r8, #48]	; 0x30
   2bbf4:	tst	r3, #16384	; 0x4000
   2bbf8:	bne	2bc84 <fts_read@@Base+0x1c8>
   2bbfc:	mov	r6, r4
   2bc00:	b	2bc88 <fts_read@@Base+0x1cc>
   2bc04:	sub	r1, r3, #12
   2bc08:	cmp	r1, #1
   2bc0c:	bls	2bf44 <fts_read@@Base+0x488>
   2bc10:	cmp	r3, #1
   2bc14:	bne	2bb44 <fts_read@@Base+0x88>
   2bc18:	tst	r2, #64	; 0x40
   2bc1c:	beq	2be18 <fts_read@@Base+0x35c>
   2bc20:	ldrd	r6, [sl, #72]	; 0x48
   2bc24:	ldrd	r4, [r8, #16]
   2bc28:	cmp	r7, r5
   2bc2c:	cmpeq	r6, r4
   2bc30:	beq	2be18 <fts_read@@Base+0x35c>
   2bc34:	ldrh	r3, [sl, #62]	; 0x3e
   2bc38:	tst	r3, #2
   2bc3c:	bne	2c0a4 <fts_read@@Base+0x5e8>
   2bc40:	ldr	r0, [r8, #4]
   2bc44:	cmp	r0, #0
   2bc48:	beq	2bc58 <fts_read@@Base+0x19c>
   2bc4c:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2bc50:	mov	r3, #0
   2bc54:	str	r3, [r8, #4]
   2bc58:	ldr	r0, [r8, #48]	; 0x30
   2bc5c:	mov	r3, #6
   2bc60:	strh	r3, [sl, #60]	; 0x3c
   2bc64:	add	r1, r8, #56	; 0x38
   2bc68:	mov	r2, sl
   2bc6c:	bl	2a950 <__assert_fail@plt+0x1827c>
   2bc70:	mov	r6, sl
   2bc74:	b	2bc88 <fts_read@@Base+0x1cc>
   2bc78:	cmp	r1, #4
   2bc7c:	bne	2bc18 <fts_read@@Base+0x15c>
   2bc80:	b	2bc34 <fts_read@@Base+0x178>
   2bc84:	mov	r6, #0
   2bc88:	ldr	r2, [sp, #116]	; 0x74
   2bc8c:	mov	r0, r6
   2bc90:	ldr	r3, [r9]
   2bc94:	cmp	r2, r3
   2bc98:	bne	2c2b4 <fts_read@@Base+0x7f8>
   2bc9c:	add	sp, sp, #124	; 0x7c
   2bca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bca4:	mov	r0, r8
   2bca8:	bl	2a5d8 <__assert_fail@plt+0x17f04>
   2bcac:	cmp	r0, #0
   2bcb0:	bne	2c008 <fts_read@@Base+0x54c>
   2bcb4:	ldr	r2, [r8, #48]	; 0x30
   2bcb8:	movw	r3, #258	; 0x102
   2bcbc:	ldr	r0, [r8, #56]	; 0x38
   2bcc0:	and	r3, r2, r3
   2bcc4:	cmp	r3, #0
   2bcc8:	beq	2bfa4 <fts_read@@Base+0x4e8>
   2bccc:	cmp	r0, #0
   2bcd0:	beq	2bcd8 <fts_read@@Base+0x21c>
   2bcd4:	bl	22178 <__assert_fail@plt+0xfaa4>
   2bcd8:	ldr	r3, [r6, #52]	; 0x34
   2bcdc:	add	r4, r6, #176	; 0xb0
   2bce0:	ldr	r0, [r8, #24]
   2bce4:	add	r2, r3, #1
   2bce8:	mov	r1, r4
   2bcec:	str	r3, [r6, #40]	; 0x28
   2bcf0:	bl	120bc <memmove@plt>
   2bcf4:	mov	r0, r4
   2bcf8:	mov	r1, #47	; 0x2f
   2bcfc:	bl	1256c <strrchr@plt>
   2bd00:	cmp	r0, #0
   2bd04:	beq	2bd34 <fts_read@@Base+0x278>
   2bd08:	cmp	r4, r0
   2bd0c:	beq	2c01c <fts_read@@Base+0x560>
   2bd10:	add	r7, r0, #1
   2bd14:	mov	r0, r7
   2bd18:	bl	123d4 <strlen@plt>
   2bd1c:	mov	r1, r7
   2bd20:	mov	r5, r0
   2bd24:	mov	r0, r4
   2bd28:	add	r2, r5, #1
   2bd2c:	bl	120bc <memmove@plt>
   2bd30:	str	r5, [r6, #52]	; 0x34
   2bd34:	ldr	r3, [r8, #24]
   2bd38:	add	r1, r8, #56	; 0x38
   2bd3c:	str	r3, [r6, #28]
   2bd40:	str	r3, [r6, #24]
   2bd44:	ldr	r0, [r8, #48]	; 0x30
   2bd48:	bl	2a81c <__assert_fail@plt+0x18148>
   2bd4c:	ldrh	r3, [r6, #60]	; 0x3c
   2bd50:	cmp	r3, #11
   2bd54:	str	r6, [r8]
   2bd58:	beq	2bdf8 <fts_read@@Base+0x33c>
   2bd5c:	cmp	r3, #1
   2bd60:	bne	2bc88 <fts_read@@Base+0x1cc>
   2bd64:	ldr	r3, [r6, #48]	; 0x30
   2bd68:	add	r1, r8, #56	; 0x38
   2bd6c:	ldr	r0, [r8, #48]	; 0x30
   2bd70:	mov	r2, r6
   2bd74:	cmp	r3, #0
   2bd78:	ldrdeq	r4, [r6, #72]	; 0x48
   2bd7c:	strdeq	r4, [r8, #16]
   2bd80:	bl	2a89c <__assert_fail@plt+0x181c8>
   2bd84:	subs	r4, r0, #0
   2bd88:	bne	2bc88 <fts_read@@Base+0x1cc>
   2bd8c:	bl	12434 <__errno_location@plt>
   2bd90:	mov	r6, r4
   2bd94:	mov	r3, #12
   2bd98:	str	r3, [r0]
   2bd9c:	b	2bc88 <fts_read@@Base+0x1cc>
   2bda0:	cmp	r3, #2
   2bda4:	beq	2c0e0 <fts_read@@Base+0x624>
   2bda8:	ldr	r0, [r6, #4]
   2bdac:	mov	ip, #47	; 0x2f
   2bdb0:	ldr	r2, [r8, #24]
   2bdb4:	add	r1, r6, #176	; 0xb0
   2bdb8:	ldr	r3, [r0, #40]	; 0x28
   2bdbc:	ldr	lr, [r0, #28]
   2bdc0:	sub	r0, r3, #1
   2bdc4:	ldrb	lr, [lr, r0]
   2bdc8:	cmp	lr, ip
   2bdcc:	moveq	r3, r0
   2bdd0:	add	r0, r2, r3
   2bdd4:	strb	ip, [r2, r3]
   2bdd8:	add	r0, r0, #1
   2bddc:	ldr	r2, [r6, #52]	; 0x34
   2bde0:	add	r2, r2, #1
   2bde4:	bl	120bc <memmove@plt>
   2bde8:	ldrh	r3, [r6, #60]	; 0x3c
   2bdec:	str	r6, [r8]
   2bdf0:	cmp	r3, #11
   2bdf4:	bne	2bd5c <fts_read@@Base+0x2a0>
   2bdf8:	ldrd	r4, [r6, #120]	; 0x78
   2bdfc:	cmp	r5, #0
   2be00:	cmpeq	r4, #2
   2be04:	beq	2c02c <fts_read@@Base+0x570>
   2be08:	cmp	r5, #0
   2be0c:	cmpeq	r4, #1
   2be10:	beq	2bc88 <fts_read@@Base+0x1cc>
   2be14:	bl	12674 <abort@plt>
   2be18:	ldr	r0, [r8, #4]
   2be1c:	cmp	r0, #0
   2be20:	beq	2bfc0 <fts_read@@Base+0x504>
   2be24:	tst	r2, #8192	; 0x2000
   2be28:	bne	2bfac <fts_read@@Base+0x4f0>
   2be2c:	ldr	ip, [sl, #24]
   2be30:	mov	r0, r8
   2be34:	add	r1, sl, #72	; 0x48
   2be38:	add	r2, sl, #168	; 0xa8
   2be3c:	mvn	r3, #0
   2be40:	str	ip, [sp]
   2be44:	bl	2aa28 <__assert_fail@plt+0x18354>
   2be48:	cmp	r0, #0
   2be4c:	beq	2bf3c <fts_read@@Base+0x480>
   2be50:	bl	12434 <__errno_location@plt>
   2be54:	ldr	r2, [r8, #4]
   2be58:	ldrh	r3, [sl, #62]	; 0x3e
   2be5c:	cmp	r2, #0
   2be60:	orr	r3, r3, #1
   2be64:	mov	r6, r2
   2be68:	ldr	r1, [r0]
   2be6c:	strh	r3, [sl, #62]	; 0x3e
   2be70:	str	r1, [sl, #32]
   2be74:	beq	2be94 <fts_read@@Base+0x3d8>
   2be78:	ldr	r3, [r6, #4]
   2be7c:	ldr	r3, [r3, #24]
   2be80:	str	r3, [r6, #24]
   2be84:	ldr	r6, [r6, #8]
   2be88:	cmp	r6, #0
   2be8c:	bne	2be78 <fts_read@@Base+0x3bc>
   2be90:	mov	r6, r2
   2be94:	mov	r3, #0
   2be98:	str	r3, [r8, #4]
   2be9c:	b	2bda8 <fts_read@@Base+0x2ec>
   2bea0:	ldr	r0, [r8, #32]
   2bea4:	add	r1, r8, #48	; 0x30
   2bea8:	mov	r2, sl
   2beac:	mov	r6, sl
   2beb0:	bl	2a628 <__assert_fail@plt+0x17f54>
   2beb4:	strh	r0, [sl, #60]	; 0x3c
   2beb8:	b	2bc88 <fts_read@@Base+0x1cc>
   2bebc:	tst	r3, #1
   2bec0:	bne	2bbc0 <fts_read@@Base+0x104>
   2bec4:	ldr	r2, [r4, #4]
   2bec8:	movw	r3, #20304	; 0x4f50
   2becc:	mov	r0, r8
   2bed0:	movt	r3, #3
   2bed4:	add	r1, r2, #72	; 0x48
   2bed8:	str	r3, [sp]
   2bedc:	add	r2, r2, #168	; 0xa8
   2bee0:	mvn	r3, #0
   2bee4:	bl	2aa28 <__assert_fail@plt+0x18354>
   2bee8:	cmp	r0, #0
   2beec:	beq	2bbc0 <fts_read@@Base+0x104>
   2bef0:	bl	12434 <__errno_location@plt>
   2bef4:	ldr	r3, [r8, #48]	; 0x30
   2bef8:	orr	r3, r3, #16384	; 0x4000
   2befc:	ldr	r2, [r0]
   2bf00:	str	r2, [r4, #32]
   2bf04:	str	r3, [r8, #48]	; 0x30
   2bf08:	b	2bbc4 <fts_read@@Base+0x108>
   2bf0c:	mov	r0, r8
   2bf10:	bl	2a5d8 <__assert_fail@plt+0x17f04>
   2bf14:	cmp	r0, #0
   2bf18:	bne	2bef0 <fts_read@@Base+0x434>
   2bf1c:	b	2bbc0 <fts_read@@Base+0x104>
   2bf20:	tst	r3, #512	; 0x200
   2bf24:	beq	2c10c <fts_read@@Base+0x650>
   2bf28:	mov	r0, r8
   2bf2c:	ldr	r1, [r4, #36]	; 0x24
   2bf30:	mov	r2, #1
   2bf34:	bl	2a564 <__assert_fail@plt+0x17e90>
   2bf38:	b	2bbb8 <fts_read@@Base+0xfc>
   2bf3c:	ldr	r6, [r8, #4]
   2bf40:	b	2be94 <fts_read@@Base+0x3d8>
   2bf44:	mov	r3, #1
   2bf48:	ldr	r0, [r8, #32]
   2bf4c:	add	r1, r8, #48	; 0x30
   2bf50:	mov	r2, sl
   2bf54:	bl	2a628 <__assert_fail@plt+0x17f54>
   2bf58:	cmp	r0, #1
   2bf5c:	mov	r3, r0
   2bf60:	strh	r0, [sl, #60]	; 0x3c
   2bf64:	movne	r6, sl
   2bf68:	bne	2bd50 <fts_read@@Base+0x294>
   2bf6c:	ldr	r2, [r8, #48]	; 0x30
   2bf70:	tst	r2, #4
   2bf74:	beq	2c1c8 <fts_read@@Base+0x70c>
   2bf78:	str	sl, [r8]
   2bf7c:	mov	r6, sl
   2bf80:	b	2bd5c <fts_read@@Base+0x2a0>
   2bf84:	mov	r0, r4
   2bf88:	bl	120c8 <free@plt>
   2bf8c:	bl	12434 <__errno_location@plt>
   2bf90:	mov	r3, #0
   2bf94:	mov	r6, r3
   2bf98:	str	r3, [r0]
   2bf9c:	str	r3, [r8]
   2bfa0:	b	2bc88 <fts_read@@Base+0x1cc>
   2bfa4:	bl	120c8 <free@plt>
   2bfa8:	b	2bcd8 <fts_read@@Base+0x21c>
   2bfac:	bic	r2, r2, #8192	; 0x2000
   2bfb0:	str	r2, [r8, #48]	; 0x30
   2bfb4:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2bfb8:	mov	r3, #0
   2bfbc:	str	r3, [r8, #4]
   2bfc0:	mov	r0, r8
   2bfc4:	mov	r1, #3
   2bfc8:	bl	2aca4 <__assert_fail@plt+0x185d0>
   2bfcc:	cmp	r0, #0
   2bfd0:	str	r0, [r8, #4]
   2bfd4:	movne	r6, r0
   2bfd8:	bne	2be94 <fts_read@@Base+0x3d8>
   2bfdc:	ldr	r0, [r8, #48]	; 0x30
   2bfe0:	tst	r0, #16384	; 0x4000
   2bfe4:	bne	2bc84 <fts_read@@Base+0x1c8>
   2bfe8:	ldr	r3, [sl, #32]
   2bfec:	cmp	r3, #0
   2bff0:	beq	2bc64 <fts_read@@Base+0x1a8>
   2bff4:	ldrh	r3, [sl, #60]	; 0x3c
   2bff8:	cmp	r3, #4
   2bffc:	beq	2bc64 <fts_read@@Base+0x1a8>
   2c000:	mov	r3, #7
   2c004:	b	2bc60 <fts_read@@Base+0x1a4>
   2c008:	ldr	r3, [r8, #48]	; 0x30
   2c00c:	mov	r6, r4
   2c010:	orr	r3, r3, #16384	; 0x4000
   2c014:	str	r3, [r8, #48]	; 0x30
   2c018:	b	2bc88 <fts_read@@Base+0x1cc>
   2c01c:	ldrb	r3, [r6, #177]	; 0xb1
   2c020:	cmp	r3, #0
   2c024:	bne	2bd10 <fts_read@@Base+0x254>
   2c028:	b	2bd34 <fts_read@@Base+0x278>
   2c02c:	ldr	r3, [r6, #48]	; 0x30
   2c030:	ldr	r7, [r6, #4]
   2c034:	cmp	r3, #0
   2c038:	ble	2c058 <fts_read@@Base+0x59c>
   2c03c:	ldr	r3, [r7, #56]	; 0x38
   2c040:	cmp	r3, #0
   2c044:	bne	2c058 <fts_read@@Base+0x59c>
   2c048:	ldr	r3, [r8, #48]	; 0x30
   2c04c:	and	r3, r3, #24
   2c050:	cmp	r3, #24
   2c054:	beq	2c230 <fts_read@@Base+0x774>
   2c058:	mov	r2, r6
   2c05c:	mov	r3, #0
   2c060:	ldr	r0, [r8, #32]
   2c064:	add	r1, r8, #48	; 0x30
   2c068:	bl	2a628 <__assert_fail@plt+0x17f54>
   2c06c:	ldr	r2, [r6, #88]	; 0x58
   2c070:	and	r2, r2, #61440	; 0xf000
   2c074:	cmp	r2, #16384	; 0x4000
   2c078:	mov	r3, r0
   2c07c:	strh	r0, [r6, #60]	; 0x3c
   2c080:	bne	2bd5c <fts_read@@Base+0x2a0>
   2c084:	ldr	r2, [r6, #48]	; 0x30
   2c088:	cmp	r2, #0
   2c08c:	beq	2bd5c <fts_read@@Base+0x2a0>
   2c090:	ldr	r2, [r7, #56]	; 0x38
   2c094:	cmp	r2, #0
   2c098:	subne	r2, r2, #1
   2c09c:	strne	r2, [r7, #56]	; 0x38
   2c0a0:	b	2bd5c <fts_read@@Base+0x2a0>
   2c0a4:	ldr	r0, [sl, #36]	; 0x24
   2c0a8:	bl	12680 <close@plt>
   2c0ac:	b	2bc40 <fts_read@@Base+0x184>
   2c0b0:	ldr	r3, [r4, #40]	; 0x28
   2c0b4:	mov	r0, r8
   2c0b8:	ldr	r2, [r8, #24]
   2c0bc:	mov	r1, #3
   2c0c0:	str	r4, [r8]
   2c0c4:	strb	r6, [r2, r3]
   2c0c8:	bl	2aca4 <__assert_fail@plt+0x185d0>
   2c0cc:	subs	r6, r0, #0
   2c0d0:	beq	2c148 <fts_read@@Base+0x68c>
   2c0d4:	mov	r0, sl
   2c0d8:	bl	120c8 <free@plt>
   2c0dc:	b	2bda8 <fts_read@@Base+0x2ec>
   2c0e0:	ldr	r0, [r8, #32]
   2c0e4:	add	r1, r8, #48	; 0x30
   2c0e8:	mov	r2, r6
   2c0ec:	mov	r3, #1
   2c0f0:	bl	2a628 <__assert_fail@plt+0x17f54>
   2c0f4:	cmp	r0, #1
   2c0f8:	strh	r0, [r6, #60]	; 0x3c
   2c0fc:	beq	2c15c <fts_read@@Base+0x6a0>
   2c100:	mov	r3, #3
   2c104:	strh	r3, [r6, #64]	; 0x40
   2c108:	b	2bda8 <fts_read@@Base+0x2ec>
   2c10c:	ldr	r0, [r4, #36]	; 0x24
   2c110:	bl	125cc <fchdir@plt>
   2c114:	cmp	r0, #0
   2c118:	beq	2bbb8 <fts_read@@Base+0xfc>
   2c11c:	bl	12434 <__errno_location@plt>
   2c120:	ldr	r5, [r0]
   2c124:	mov	r6, r0
   2c128:	ldr	r0, [r4, #36]	; 0x24
   2c12c:	bl	12680 <close@plt>
   2c130:	str	r5, [r6]
   2c134:	ldr	r3, [r8, #48]	; 0x30
   2c138:	str	r5, [r4, #32]
   2c13c:	orr	r3, r3, #16384	; 0x4000
   2c140:	str	r3, [r8, #48]	; 0x30
   2c144:	b	2bbb8 <fts_read@@Base+0xfc>
   2c148:	ldr	r3, [r8, #48]	; 0x30
   2c14c:	tst	r3, #16384	; 0x4000
   2c150:	bne	2bc84 <fts_read@@Base+0x1c8>
   2c154:	ldr	r4, [sl, #4]
   2c158:	b	2bb60 <fts_read@@Base+0xa4>
   2c15c:	ldr	r3, [r8, #48]	; 0x30
   2c160:	tst	r3, #4
   2c164:	bne	2c100 <fts_read@@Base+0x644>
   2c168:	tst	r3, #16
   2c16c:	ldr	r0, [r8, #32]
   2c170:	moveq	r2, #18688	; 0x4900
   2c174:	movne	r2, #51456	; 0xc900
   2c178:	tst	r3, #2048	; 0x800
   2c17c:	moveq	r1, #0
   2c180:	movne	r1, #262144	; 0x40000
   2c184:	tst	r3, #512	; 0x200
   2c188:	orr	r2, r1, r2
   2c18c:	beq	2c2d4 <fts_read@@Base+0x818>
   2c190:	movw	r1, #7340	; 0x1cac
   2c194:	movt	r1, #3
   2c198:	bl	2dc60 <fts_children@@Base+0x1894>
   2c19c:	mov	r4, r0
   2c1a0:	cmp	r4, #0
   2c1a4:	blt	2c2b8 <fts_read@@Base+0x7fc>
   2c1a8:	mov	r0, r4
   2c1ac:	mov	r1, #1
   2c1b0:	bl	21060 <__assert_fail@plt+0xe98c>
   2c1b4:	ldrh	r3, [r6, #62]	; 0x3e
   2c1b8:	str	r4, [r6, #36]	; 0x24
   2c1bc:	orr	r3, r3, #2
   2c1c0:	strh	r3, [r6, #62]	; 0x3e
   2c1c4:	b	2c100 <fts_read@@Base+0x644>
   2c1c8:	tst	r2, #16
   2c1cc:	ldr	r0, [r8, #32]
   2c1d0:	moveq	r3, #18688	; 0x4900
   2c1d4:	movne	r3, #51456	; 0xc900
   2c1d8:	tst	r2, #2048	; 0x800
   2c1dc:	moveq	r1, #0
   2c1e0:	movne	r1, #262144	; 0x40000
   2c1e4:	tst	r2, #512	; 0x200
   2c1e8:	orr	r2, r1, r3
   2c1ec:	beq	2c29c <fts_read@@Base+0x7e0>
   2c1f0:	movw	r1, #7340	; 0x1cac
   2c1f4:	movt	r1, #3
   2c1f8:	bl	2dc60 <fts_children@@Base+0x1894>
   2c1fc:	mov	r4, r0
   2c200:	cmp	r4, #0
   2c204:	blt	2c27c <fts_read@@Base+0x7c0>
   2c208:	mov	r0, r4
   2c20c:	mov	r1, #1
   2c210:	bl	21060 <__assert_fail@plt+0xe98c>
   2c214:	ldrh	r2, [sl, #62]	; 0x3e
   2c218:	str	r4, [sl, #36]	; 0x24
   2c21c:	mov	r6, sl
   2c220:	orr	r2, r2, #2
   2c224:	ldrh	r3, [sl, #60]	; 0x3c
   2c228:	strh	r2, [sl, #62]	; 0x3e
   2c22c:	b	2bd50 <fts_read@@Base+0x294>
   2c230:	ldr	r4, [r7, #44]	; 0x2c
   2c234:	ldr	r3, [r4, #48]	; 0x30
   2c238:	ldr	sl, [r4, #52]	; 0x34
   2c23c:	tst	r3, #512	; 0x200
   2c240:	beq	2c058 <fts_read@@Base+0x59c>
   2c244:	cmp	sl, #0
   2c248:	beq	2c358 <fts_read@@Base+0x89c>
   2c24c:	ldrd	r2, [r7, #72]	; 0x48
   2c250:	add	r1, sp, #120	; 0x78
   2c254:	mov	r0, sl
   2c258:	strd	r2, [r1, #-112]!	; 0xffffff90
   2c25c:	bl	21cf8 <__assert_fail@plt+0xf624>
   2c260:	subs	r5, r0, #0
   2c264:	beq	2c2ec <fts_read@@Base+0x830>
   2c268:	ldrb	r4, [r5, #8]
   2c26c:	cmp	r4, #0
   2c270:	beq	2c058 <fts_read@@Base+0x59c>
   2c274:	ldrh	r3, [r6, #60]	; 0x3c
   2c278:	b	2bd5c <fts_read@@Base+0x2a0>
   2c27c:	str	r4, [sl, #36]	; 0x24
   2c280:	bl	12434 <__errno_location@plt>
   2c284:	mov	r2, #7
   2c288:	mov	r3, r2
   2c28c:	ldr	r1, [r0]
   2c290:	strh	r2, [sl, #60]	; 0x3c
   2c294:	str	r1, [sl, #32]
   2c298:	b	2bf78 <fts_read@@Base+0x4bc>
   2c29c:	mov	r1, r2
   2c2a0:	movw	r0, #7340	; 0x1cac
   2c2a4:	movt	r0, #3
   2c2a8:	bl	21448 <__assert_fail@plt+0xed74>
   2c2ac:	mov	r4, r0
   2c2b0:	b	2c200 <fts_read@@Base+0x744>
   2c2b4:	bl	12188 <__stack_chk_fail@plt>
   2c2b8:	str	r4, [r6, #36]	; 0x24
   2c2bc:	bl	12434 <__errno_location@plt>
   2c2c0:	mov	r3, #7
   2c2c4:	ldr	r2, [r0]
   2c2c8:	strh	r3, [r6, #60]	; 0x3c
   2c2cc:	str	r2, [r6, #32]
   2c2d0:	b	2c100 <fts_read@@Base+0x644>
   2c2d4:	mov	r1, r2
   2c2d8:	movw	r0, #7340	; 0x1cac
   2c2dc:	movt	r0, #3
   2c2e0:	bl	21448 <__assert_fail@plt+0xed74>
   2c2e4:	mov	r4, r0
   2c2e8:	b	2c1a0 <fts_read@@Base+0x6e4>
   2c2ec:	mov	r0, #16
   2c2f0:	bl	1232c <malloc@plt>
   2c2f4:	subs	fp, r0, #0
   2c2f8:	beq	2c058 <fts_read@@Base+0x59c>
   2c2fc:	ldr	r0, [r4, #32]
   2c300:	add	r1, sp, #24
   2c304:	bl	12008 <fstatfs64@plt>
   2c308:	cmp	r0, #0
   2c30c:	movne	r4, r5
   2c310:	bne	2c32c <fts_read@@Base+0x870>
   2c314:	ldr	r2, [sp, #24]
   2c318:	movw	r3, #18803	; 0x4973
   2c31c:	movt	r3, #21093	; 0x5265
   2c320:	subs	r3, r2, r3
   2c324:	rsbs	r4, r3, #0
   2c328:	adcs	r4, r4, r3
   2c32c:	ldrd	r2, [r7, #72]	; 0x48
   2c330:	mov	r0, sl
   2c334:	strb	r4, [fp, #8]
   2c338:	mov	r1, fp
   2c33c:	strd	r2, [fp]
   2c340:	bl	22594 <__assert_fail@plt+0xfec0>
   2c344:	cmp	r0, #0
   2c348:	beq	2c394 <fts_read@@Base+0x8d8>
   2c34c:	cmp	fp, r0
   2c350:	beq	2c26c <fts_read@@Base+0x7b0>
   2c354:	b	2be14 <fts_read@@Base+0x358>
   2c358:	mov	r1, sl
   2c35c:	movw	r3, #8392	; 0x20c8
   2c360:	movw	r2, #41772	; 0xa32c
   2c364:	movt	r3, #1
   2c368:	movt	r2, #2
   2c36c:	str	r3, [sp]
   2c370:	mov	r0, #13
   2c374:	movw	r3, #41800	; 0xa348
   2c378:	movt	r3, #2
   2c37c:	bl	21fa8 <__assert_fail@plt+0xf8d4>
   2c380:	cmp	r0, #0
   2c384:	mov	sl, r0
   2c388:	str	r0, [r4, #52]	; 0x34
   2c38c:	bne	2c24c <fts_read@@Base+0x790>
   2c390:	b	2c058 <fts_read@@Base+0x59c>
   2c394:	mov	r0, fp
   2c398:	bl	120c8 <free@plt>
   2c39c:	b	2c058 <fts_read@@Base+0x59c>

0002c3a0 <fts_set@@Base>:
   2c3a0:	cmp	r2, #4
   2c3a4:	push	{r3, lr}
   2c3a8:	movls	r3, #0
   2c3ac:	strhls	r2, [r1, #64]	; 0x40
   2c3b0:	bls	2c3c4 <fts_set@@Base+0x24>
   2c3b4:	bl	12434 <__errno_location@plt>
   2c3b8:	mov	r3, #1
   2c3bc:	mov	r2, #22
   2c3c0:	str	r2, [r0]
   2c3c4:	mov	r0, r3
   2c3c8:	pop	{r3, pc}

0002c3cc <fts_children@@Base>:
   2c3cc:	push	{r4, r5, r6, r7, r8, lr}
   2c3d0:	bics	r7, r1, #8192	; 0x2000
   2c3d4:	mov	r5, r1
   2c3d8:	mov	r4, r0
   2c3dc:	bne	2c520 <fts_children@@Base+0x154>
   2c3e0:	bl	12434 <__errno_location@plt>
   2c3e4:	ldr	r6, [r4]
   2c3e8:	str	r7, [r0]
   2c3ec:	mov	r8, r0
   2c3f0:	ldr	r2, [r4, #48]	; 0x30
   2c3f4:	ands	r3, r2, #16384	; 0x4000
   2c3f8:	bne	2c538 <fts_children@@Base+0x16c>
   2c3fc:	ldrh	r1, [r6, #60]	; 0x3c
   2c400:	cmp	r1, #9
   2c404:	ldreq	r3, [r6, #8]
   2c408:	beq	2c478 <fts_children@@Base+0xac>
   2c40c:	cmp	r1, #1
   2c410:	bne	2c478 <fts_children@@Base+0xac>
   2c414:	ldr	r0, [r4, #4]
   2c418:	cmp	r0, #0
   2c41c:	beq	2c424 <fts_children@@Base+0x58>
   2c420:	bl	2a4f4 <__assert_fail@plt+0x17e20>
   2c424:	cmp	r5, #8192	; 0x2000
   2c428:	ldreq	r3, [r4, #48]	; 0x30
   2c42c:	moveq	r5, #2
   2c430:	movne	r5, #1
   2c434:	orreq	r3, r3, #8192	; 0x2000
   2c438:	streq	r3, [r4, #48]	; 0x30
   2c43c:	ldr	r3, [r6, #48]	; 0x30
   2c440:	cmp	r3, #0
   2c444:	bne	2c464 <fts_children@@Base+0x98>
   2c448:	ldr	r3, [r6, #24]
   2c44c:	ldrb	r3, [r3]
   2c450:	cmp	r3, #47	; 0x2f
   2c454:	beq	2c464 <fts_children@@Base+0x98>
   2c458:	ldr	r3, [r4, #48]	; 0x30
   2c45c:	tst	r3, #4
   2c460:	beq	2c480 <fts_children@@Base+0xb4>
   2c464:	mov	r1, r5
   2c468:	mov	r0, r4
   2c46c:	bl	2aca4 <__assert_fail@plt+0x185d0>
   2c470:	mov	r3, r0
   2c474:	str	r0, [r4, #4]
   2c478:	mov	r0, r3
   2c47c:	pop	{r4, r5, r6, r7, r8, pc}
   2c480:	tst	r3, #16
   2c484:	ldr	r0, [r4, #32]
   2c488:	moveq	r2, #18688	; 0x4900
   2c48c:	movne	r2, #51456	; 0xc900
   2c490:	tst	r3, #2048	; 0x800
   2c494:	moveq	r1, #0
   2c498:	movne	r1, #262144	; 0x40000
   2c49c:	tst	r3, #512	; 0x200
   2c4a0:	orr	r2, r1, r2
   2c4a4:	beq	2c540 <fts_children@@Base+0x174>
   2c4a8:	movw	r1, #7340	; 0x1cac
   2c4ac:	movt	r1, #3
   2c4b0:	bl	2dc60 <fts_children@@Base+0x1894>
   2c4b4:	mov	r6, r0
   2c4b8:	cmp	r6, #0
   2c4bc:	blt	2c558 <fts_children@@Base+0x18c>
   2c4c0:	mov	r1, #1
   2c4c4:	mov	r0, r6
   2c4c8:	bl	21060 <__assert_fail@plt+0xe98c>
   2c4cc:	mov	r1, r5
   2c4d0:	mov	r0, r4
   2c4d4:	bl	2aca4 <__assert_fail@plt+0x185d0>
   2c4d8:	ldr	r3, [r4, #48]	; 0x30
   2c4dc:	ands	r5, r3, #512	; 0x200
   2c4e0:	str	r0, [r4, #4]
   2c4e4:	bne	2c50c <fts_children@@Base+0x140>
   2c4e8:	mov	r0, r6
   2c4ec:	bl	125cc <fchdir@plt>
   2c4f0:	cmp	r0, #0
   2c4f4:	bne	2c564 <fts_children@@Base+0x198>
   2c4f8:	mov	r0, r6
   2c4fc:	bl	12680 <close@plt>
   2c500:	ldr	r3, [r4, #4]
   2c504:	mov	r0, r3
   2c508:	pop	{r4, r5, r6, r7, r8, pc}
   2c50c:	mov	r1, r6
   2c510:	mov	r0, r4
   2c514:	mov	r2, #1
   2c518:	bl	2a564 <__assert_fail@plt+0x17e90>
   2c51c:	b	2c500 <fts_children@@Base+0x134>
   2c520:	bl	12434 <__errno_location@plt>
   2c524:	mov	r3, #0
   2c528:	mov	r2, #22
   2c52c:	str	r2, [r0]
   2c530:	mov	r0, r3
   2c534:	pop	{r4, r5, r6, r7, r8, pc}
   2c538:	mov	r3, r7
   2c53c:	b	2c478 <fts_children@@Base+0xac>
   2c540:	mov	r1, r2
   2c544:	movw	r0, #7340	; 0x1cac
   2c548:	movt	r0, #3
   2c54c:	bl	21448 <__assert_fail@plt+0xed74>
   2c550:	mov	r6, r0
   2c554:	b	2c4b8 <fts_children@@Base+0xec>
   2c558:	mov	r3, #0
   2c55c:	str	r3, [r4, #4]
   2c560:	b	2c478 <fts_children@@Base+0xac>
   2c564:	ldr	r4, [r8]
   2c568:	mov	r0, r6
   2c56c:	bl	12680 <close@plt>
   2c570:	mov	r3, r5
   2c574:	str	r4, [r8]
   2c578:	b	2c478 <fts_children@@Base+0xac>
   2c57c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2c580:	movw	r8, #26008	; 0x6598
   2c584:	movt	r8, #4
   2c588:	sub	sp, sp, #12
   2c58c:	movw	r0, #20308	; 0x4f54
   2c590:	movw	r1, #6772	; 0x1a74
   2c594:	ldr	r3, [r8]
   2c598:	movt	r0, #3
   2c59c:	movt	r1, #3
   2c5a0:	str	r3, [sp, #4]
   2c5a4:	bl	12608 <setmntent@plt>
   2c5a8:	subs	r7, r0, #0
   2c5ac:	beq	2c7fc <fts_children@@Base+0x430>
   2c5b0:	mov	r0, r7
   2c5b4:	mov	r6, sp
   2c5b8:	bl	122d8 <getmntent@plt>
   2c5bc:	subs	r5, r0, #0
   2c5c0:	beq	2c6d4 <fts_children@@Base+0x308>
   2c5c4:	mov	r0, #32
   2c5c8:	bl	28e14 <__assert_fail@plt+0x16740>
   2c5cc:	mov	r4, r0
   2c5d0:	ldr	r0, [r5]
   2c5d4:	bl	28f30 <__assert_fail@plt+0x1685c>
   2c5d8:	str	r0, [r4]
   2c5dc:	ldr	r0, [r5, #4]
   2c5e0:	bl	28f30 <__assert_fail@plt+0x1685c>
   2c5e4:	str	r0, [r4, #4]
   2c5e8:	ldr	r0, [r5, #8]
   2c5ec:	bl	28f30 <__assert_fail@plt+0x1685c>
   2c5f0:	ldrb	r3, [r4, #24]
   2c5f4:	movw	r1, #62124	; 0xf2ac
   2c5f8:	movt	r1, #2
   2c5fc:	orr	r3, r3, #4
   2c600:	strb	r3, [r4, #24]
   2c604:	str	r0, [r4, #8]
   2c608:	mov	r9, r0
   2c60c:	bl	1205c <strcmp@plt>
   2c610:	cmp	r0, #0
   2c614:	beq	2c678 <fts_children@@Base+0x2ac>
   2c618:	movw	r1, #20320	; 0x4f60
   2c61c:	mov	r0, r9
   2c620:	movt	r1, #3
   2c624:	bl	1205c <strcmp@plt>
   2c628:	cmp	r0, #0
   2c62c:	beq	2c678 <fts_children@@Base+0x2ac>
   2c630:	movw	r1, #20328	; 0x4f68
   2c634:	mov	r0, r9
   2c638:	movt	r1, #3
   2c63c:	bl	1205c <strcmp@plt>
   2c640:	cmp	r0, #0
   2c644:	beq	2c678 <fts_children@@Base+0x2ac>
   2c648:	movw	r1, #20336	; 0x4f70
   2c64c:	mov	r0, r9
   2c650:	movt	r1, #3
   2c654:	bl	1205c <strcmp@plt>
   2c658:	cmp	r0, #0
   2c65c:	beq	2c678 <fts_children@@Base+0x2ac>
   2c660:	movw	r1, #62396	; 0xf3bc
   2c664:	mov	r0, r9
   2c668:	movt	r1, #2
   2c66c:	bl	1205c <strcmp@plt>
   2c670:	cmp	r0, #0
   2c674:	bne	2c754 <fts_children@@Base+0x388>
   2c678:	mov	r2, #1
   2c67c:	ldr	r5, [r4]
   2c680:	mov	r1, #58	; 0x3a
   2c684:	ldrb	r3, [r4, #24]
   2c688:	mov	r0, r5
   2c68c:	bfi	r3, r2, #0, #1
   2c690:	strb	r3, [r4, #24]
   2c694:	bl	123e0 <strchr@plt>
   2c698:	cmp	r0, #0
   2c69c:	beq	2c704 <fts_children@@Base+0x338>
   2c6a0:	mov	r0, #1
   2c6a4:	ldrb	r1, [r4, #24]
   2c6a8:	mvn	r2, #0
   2c6ac:	mvn	r3, #0
   2c6b0:	strd	r2, [r4, #16]
   2c6b4:	bfi	r1, r0, #1, #1
   2c6b8:	mov	r0, r7
   2c6bc:	strb	r1, [r4, #24]
   2c6c0:	str	r4, [r6]
   2c6c4:	add	r6, r4, #28
   2c6c8:	bl	122d8 <getmntent@plt>
   2c6cc:	subs	r5, r0, #0
   2c6d0:	bne	2c5c4 <fts_children@@Base+0x1f8>
   2c6d4:	mov	r0, r7
   2c6d8:	bl	12524 <endmntent@plt>
   2c6dc:	subs	r4, r0, #0
   2c6e0:	beq	2c78c <fts_children@@Base+0x3c0>
   2c6e4:	str	r5, [r6]
   2c6e8:	ldr	r0, [sp]
   2c6ec:	ldr	r2, [sp, #4]
   2c6f0:	ldr	r3, [r8]
   2c6f4:	cmp	r2, r3
   2c6f8:	bne	2c804 <fts_children@@Base+0x438>
   2c6fc:	add	sp, sp, #12
   2c700:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c704:	ldrb	r3, [r5]
   2c708:	cmp	r3, #47	; 0x2f
   2c70c:	bne	2c6a4 <fts_children@@Base+0x2d8>
   2c710:	ldrb	r3, [r5, #1]
   2c714:	cmp	r3, #47	; 0x2f
   2c718:	bne	2c6a4 <fts_children@@Base+0x2d8>
   2c71c:	ldr	r5, [r4, #8]
   2c720:	movw	r1, #20360	; 0x4f88
   2c724:	movt	r1, #3
   2c728:	mov	r0, r5
   2c72c:	bl	1205c <strcmp@plt>
   2c730:	cmp	r0, #0
   2c734:	beq	2c6a0 <fts_children@@Base+0x2d4>
   2c738:	mov	r0, r5
   2c73c:	movw	r1, #20368	; 0x4f90
   2c740:	movt	r1, #3
   2c744:	bl	1205c <strcmp@plt>
   2c748:	rsbs	r0, r0, #1
   2c74c:	movcc	r0, #0
   2c750:	b	2c6a4 <fts_children@@Base+0x2d8>
   2c754:	mov	r0, r9
   2c758:	movw	r1, #20344	; 0x4f78
   2c75c:	movt	r1, #3
   2c760:	bl	1205c <strcmp@plt>
   2c764:	cmp	r0, #0
   2c768:	movne	r2, #0
   2c76c:	bne	2c67c <fts_children@@Base+0x2b0>
   2c770:	mov	r0, r5
   2c774:	movw	r1, #20352	; 0x4f80
   2c778:	movt	r1, #3
   2c77c:	bl	12290 <hasmntopt@plt>
   2c780:	rsbs	r2, r0, #1
   2c784:	movcc	r2, #0
   2c788:	b	2c67c <fts_children@@Base+0x2b0>
   2c78c:	bl	12434 <__errno_location@plt>
   2c790:	ldr	r9, [r0]
   2c794:	mov	r7, r0
   2c798:	str	r4, [r6]
   2c79c:	ldr	r4, [sp]
   2c7a0:	cmp	r4, #0
   2c7a4:	bne	2c7c4 <fts_children@@Base+0x3f8>
   2c7a8:	b	2c7f0 <fts_children@@Base+0x424>
   2c7ac:	mov	r0, r4
   2c7b0:	bl	120c8 <free@plt>
   2c7b4:	cmp	r5, #0
   2c7b8:	str	r5, [sp]
   2c7bc:	beq	2c7f0 <fts_children@@Base+0x424>
   2c7c0:	mov	r4, r5
   2c7c4:	ldr	r0, [r4]
   2c7c8:	ldr	r5, [r4, #28]
   2c7cc:	bl	120c8 <free@plt>
   2c7d0:	ldr	r0, [r4, #4]
   2c7d4:	bl	120c8 <free@plt>
   2c7d8:	ldrb	r3, [r4, #24]
   2c7dc:	tst	r3, #4
   2c7e0:	beq	2c7ac <fts_children@@Base+0x3e0>
   2c7e4:	ldr	r0, [r4, #8]
   2c7e8:	bl	120c8 <free@plt>
   2c7ec:	b	2c7ac <fts_children@@Base+0x3e0>
   2c7f0:	str	r9, [r7]
   2c7f4:	mov	r0, #0
   2c7f8:	b	2c6ec <fts_children@@Base+0x320>
   2c7fc:	mov	r0, r7
   2c800:	b	2c6ec <fts_children@@Base+0x320>
   2c804:	bl	12188 <__stack_chk_fail@plt>
   2c808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c80c:	movw	r4, #26008	; 0x6598
   2c810:	movt	r4, #4
   2c814:	sub	sp, sp, #4048	; 0xfd0
   2c818:	sub	sp, sp, #4
   2c81c:	cmn	r0, #100	; 0x64
   2c820:	ldr	r3, [r4]
   2c824:	mov	r5, r0
   2c828:	mov	r6, r1
   2c82c:	mov	r7, r2
   2c830:	str	r3, [sp, #4044]	; 0xfcc
   2c834:	beq	2c920 <fts_children@@Base+0x554>
   2c838:	ldrb	r3, [r1]
   2c83c:	cmp	r3, #47	; 0x2f
   2c840:	beq	2c920 <fts_children@@Base+0x554>
   2c844:	add	r8, sp, #12
   2c848:	mov	r1, r0
   2c84c:	mov	r2, r6
   2c850:	mov	r0, r8
   2c854:	bl	2de0c <fts_children@@Base+0x1a40>
   2c858:	subs	r9, r0, #0
   2c85c:	beq	2c8cc <fts_children@@Base+0x500>
   2c860:	mov	r1, r7
   2c864:	bl	2dcbc <fts_children@@Base+0x18f0>
   2c868:	mov	sl, r0
   2c86c:	bl	12434 <__errno_location@plt>
   2c870:	cmp	r9, r8
   2c874:	mov	fp, r0
   2c878:	ldr	r8, [r0]
   2c87c:	beq	2c888 <fts_children@@Base+0x4bc>
   2c880:	mov	r0, r9
   2c884:	bl	120c8 <free@plt>
   2c888:	cmn	sl, #1
   2c88c:	beq	2c8b4 <fts_children@@Base+0x4e8>
   2c890:	mov	r3, sl
   2c894:	ldr	r2, [sp, #4044]	; 0xfcc
   2c898:	mov	r0, r3
   2c89c:	ldr	r3, [r4]
   2c8a0:	cmp	r2, r3
   2c8a4:	bne	2c9bc <fts_children@@Base+0x5f0>
   2c8a8:	add	sp, sp, #4048	; 0xfd0
   2c8ac:	add	sp, sp, #4
   2c8b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c8b4:	cmp	r8, #20
   2c8b8:	beq	2c8cc <fts_children@@Base+0x500>
   2c8bc:	sub	r3, r8, #1
   2c8c0:	cmp	r8, #13
   2c8c4:	cmpne	r3, #1
   2c8c8:	bhi	2c980 <fts_children@@Base+0x5b4>
   2c8cc:	add	r0, sp, #4
   2c8d0:	bl	287f4 <__assert_fail@plt+0x16120>
   2c8d4:	cmp	r0, #0
   2c8d8:	bne	2c9c0 <fts_children@@Base+0x5f4>
   2c8dc:	cmp	r5, #0
   2c8e0:	blt	2c8f0 <fts_children@@Base+0x524>
   2c8e4:	ldr	r3, [sp, #4]
   2c8e8:	cmp	r3, r5
   2c8ec:	beq	2c9a0 <fts_children@@Base+0x5d4>
   2c8f0:	mov	r0, r5
   2c8f4:	bl	125cc <fchdir@plt>
   2c8f8:	subs	r8, r0, #0
   2c8fc:	beq	2c934 <fts_children@@Base+0x568>
   2c900:	bl	12434 <__errno_location@plt>
   2c904:	ldr	r6, [r0]
   2c908:	mov	r5, r0
   2c90c:	add	r0, sp, #4
   2c910:	bl	2886c <__assert_fail@plt+0x16198>
   2c914:	mvn	r3, #0
   2c918:	str	r6, [r5]
   2c91c:	b	2c894 <fts_children@@Base+0x4c8>
   2c920:	mov	r0, r6
   2c924:	mov	r1, r7
   2c928:	bl	2dcbc <fts_children@@Base+0x18f0>
   2c92c:	mov	r3, r0
   2c930:	b	2c894 <fts_children@@Base+0x4c8>
   2c934:	mov	r0, r6
   2c938:	mov	r1, r7
   2c93c:	bl	2dcbc <fts_children@@Base+0x18f0>
   2c940:	cmn	r0, #1
   2c944:	mov	r5, r0
   2c948:	beq	2c994 <fts_children@@Base+0x5c8>
   2c94c:	add	r0, sp, #4
   2c950:	bl	28850 <__assert_fail@plt+0x1617c>
   2c954:	cmp	r0, #0
   2c958:	bne	2c9cc <fts_children@@Base+0x600>
   2c95c:	add	r0, sp, #4
   2c960:	bl	2886c <__assert_fail@plt+0x16198>
   2c964:	cmp	r8, #0
   2c968:	moveq	r3, r5
   2c96c:	beq	2c894 <fts_children@@Base+0x4c8>
   2c970:	bl	12434 <__errno_location@plt>
   2c974:	mov	r3, r5
   2c978:	str	r8, [r0]
   2c97c:	b	2c894 <fts_children@@Base+0x4c8>
   2c980:	cmp	r8, #38	; 0x26
   2c984:	cmpne	r8, #95	; 0x5f
   2c988:	strne	r8, [fp]
   2c98c:	bne	2c890 <fts_children@@Base+0x4c4>
   2c990:	b	2c8cc <fts_children@@Base+0x500>
   2c994:	bl	12434 <__errno_location@plt>
   2c998:	ldr	r8, [r0]
   2c99c:	b	2c94c <fts_children@@Base+0x580>
   2c9a0:	add	r0, sp, #4
   2c9a4:	bl	2886c <__assert_fail@plt+0x16198>
   2c9a8:	bl	12434 <__errno_location@plt>
   2c9ac:	mov	r2, #9
   2c9b0:	mvn	r3, #0
   2c9b4:	str	r2, [r0]
   2c9b8:	b	2c894 <fts_children@@Base+0x4c8>
   2c9bc:	bl	12188 <__stack_chk_fail@plt>
   2c9c0:	bl	12434 <__errno_location@plt>
   2c9c4:	ldr	r0, [r0]
   2c9c8:	bl	25138 <__assert_fail@plt+0x12a64>
   2c9cc:	bl	12434 <__errno_location@plt>
   2c9d0:	ldr	r0, [r0]
   2c9d4:	bl	25174 <__assert_fail@plt+0x12aa0>
   2c9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c9dc:	movw	r4, #26008	; 0x6598
   2c9e0:	movt	r4, #4
   2c9e4:	sub	sp, sp, #4048	; 0xfd0
   2c9e8:	sub	sp, sp, #4
   2c9ec:	cmn	r0, #100	; 0x64
   2c9f0:	ldr	r3, [r4]
   2c9f4:	mov	r5, r0
   2c9f8:	mov	r6, r1
   2c9fc:	mov	r7, r2
   2ca00:	str	r3, [sp, #4044]	; 0xfcc
   2ca04:	beq	2caf0 <fts_children@@Base+0x724>
   2ca08:	ldrb	r3, [r1]
   2ca0c:	cmp	r3, #47	; 0x2f
   2ca10:	beq	2caf0 <fts_children@@Base+0x724>
   2ca14:	add	r8, sp, #12
   2ca18:	mov	r1, r0
   2ca1c:	mov	r2, r6
   2ca20:	mov	r0, r8
   2ca24:	bl	2de0c <fts_children@@Base+0x1a40>
   2ca28:	subs	r9, r0, #0
   2ca2c:	beq	2ca9c <fts_children@@Base+0x6d0>
   2ca30:	mov	r1, r7
   2ca34:	bl	2dd2c <fts_children@@Base+0x1960>
   2ca38:	mov	sl, r0
   2ca3c:	bl	12434 <__errno_location@plt>
   2ca40:	cmp	r9, r8
   2ca44:	mov	fp, r0
   2ca48:	ldr	r8, [r0]
   2ca4c:	beq	2ca58 <fts_children@@Base+0x68c>
   2ca50:	mov	r0, r9
   2ca54:	bl	120c8 <free@plt>
   2ca58:	cmn	sl, #1
   2ca5c:	beq	2ca84 <fts_children@@Base+0x6b8>
   2ca60:	mov	r3, sl
   2ca64:	ldr	r2, [sp, #4044]	; 0xfcc
   2ca68:	mov	r0, r3
   2ca6c:	ldr	r3, [r4]
   2ca70:	cmp	r2, r3
   2ca74:	bne	2cb8c <fts_children@@Base+0x7c0>
   2ca78:	add	sp, sp, #4048	; 0xfd0
   2ca7c:	add	sp, sp, #4
   2ca80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ca84:	cmp	r8, #20
   2ca88:	beq	2ca9c <fts_children@@Base+0x6d0>
   2ca8c:	sub	r3, r8, #1
   2ca90:	cmp	r8, #13
   2ca94:	cmpne	r3, #1
   2ca98:	bhi	2cb50 <fts_children@@Base+0x784>
   2ca9c:	add	r0, sp, #4
   2caa0:	bl	287f4 <__assert_fail@plt+0x16120>
   2caa4:	cmp	r0, #0
   2caa8:	bne	2cb90 <fts_children@@Base+0x7c4>
   2caac:	cmp	r5, #0
   2cab0:	blt	2cac0 <fts_children@@Base+0x6f4>
   2cab4:	ldr	r3, [sp, #4]
   2cab8:	cmp	r3, r5
   2cabc:	beq	2cb70 <fts_children@@Base+0x7a4>
   2cac0:	mov	r0, r5
   2cac4:	bl	125cc <fchdir@plt>
   2cac8:	subs	r8, r0, #0
   2cacc:	beq	2cb04 <fts_children@@Base+0x738>
   2cad0:	bl	12434 <__errno_location@plt>
   2cad4:	ldr	r6, [r0]
   2cad8:	mov	r5, r0
   2cadc:	add	r0, sp, #4
   2cae0:	bl	2886c <__assert_fail@plt+0x16198>
   2cae4:	mvn	r3, #0
   2cae8:	str	r6, [r5]
   2caec:	b	2ca64 <fts_children@@Base+0x698>
   2caf0:	mov	r0, r6
   2caf4:	mov	r1, r7
   2caf8:	bl	2dd2c <fts_children@@Base+0x1960>
   2cafc:	mov	r3, r0
   2cb00:	b	2ca64 <fts_children@@Base+0x698>
   2cb04:	mov	r0, r6
   2cb08:	mov	r1, r7
   2cb0c:	bl	2dd2c <fts_children@@Base+0x1960>
   2cb10:	cmn	r0, #1
   2cb14:	mov	r5, r0
   2cb18:	beq	2cb64 <fts_children@@Base+0x798>
   2cb1c:	add	r0, sp, #4
   2cb20:	bl	28850 <__assert_fail@plt+0x1617c>
   2cb24:	cmp	r0, #0
   2cb28:	bne	2cb9c <fts_children@@Base+0x7d0>
   2cb2c:	add	r0, sp, #4
   2cb30:	bl	2886c <__assert_fail@plt+0x16198>
   2cb34:	cmp	r8, #0
   2cb38:	moveq	r3, r5
   2cb3c:	beq	2ca64 <fts_children@@Base+0x698>
   2cb40:	bl	12434 <__errno_location@plt>
   2cb44:	mov	r3, r5
   2cb48:	str	r8, [r0]
   2cb4c:	b	2ca64 <fts_children@@Base+0x698>
   2cb50:	cmp	r8, #38	; 0x26
   2cb54:	cmpne	r8, #95	; 0x5f
   2cb58:	strne	r8, [fp]
   2cb5c:	bne	2ca60 <fts_children@@Base+0x694>
   2cb60:	b	2ca9c <fts_children@@Base+0x6d0>
   2cb64:	bl	12434 <__errno_location@plt>
   2cb68:	ldr	r8, [r0]
   2cb6c:	b	2cb1c <fts_children@@Base+0x750>
   2cb70:	add	r0, sp, #4
   2cb74:	bl	2886c <__assert_fail@plt+0x16198>
   2cb78:	bl	12434 <__errno_location@plt>
   2cb7c:	mov	r2, #9
   2cb80:	mvn	r3, #0
   2cb84:	str	r2, [r0]
   2cb88:	b	2ca64 <fts_children@@Base+0x698>
   2cb8c:	bl	12188 <__stack_chk_fail@plt>
   2cb90:	bl	12434 <__errno_location@plt>
   2cb94:	ldr	r0, [r0]
   2cb98:	bl	25138 <__assert_fail@plt+0x12a64>
   2cb9c:	bl	12434 <__errno_location@plt>
   2cba0:	ldr	r0, [r0]
   2cba4:	bl	25174 <__assert_fail@plt+0x12aa0>
   2cba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cbac:	movw	r4, #26008	; 0x6598
   2cbb0:	movt	r4, #4
   2cbb4:	sub	sp, sp, #4048	; 0xfd0
   2cbb8:	sub	sp, sp, #4
   2cbbc:	cmn	r0, #100	; 0x64
   2cbc0:	ldr	r3, [r4]
   2cbc4:	mov	r5, r0
   2cbc8:	mov	r6, r1
   2cbcc:	mov	r7, r2
   2cbd0:	str	r3, [sp, #4044]	; 0xfcc
   2cbd4:	beq	2ccc0 <fts_children@@Base+0x8f4>
   2cbd8:	ldrb	r3, [r1]
   2cbdc:	cmp	r3, #47	; 0x2f
   2cbe0:	beq	2ccc0 <fts_children@@Base+0x8f4>
   2cbe4:	add	r8, sp, #12
   2cbe8:	mov	r1, r0
   2cbec:	mov	r2, r6
   2cbf0:	mov	r0, r8
   2cbf4:	bl	2de0c <fts_children@@Base+0x1a40>
   2cbf8:	subs	r9, r0, #0
   2cbfc:	beq	2cc6c <fts_children@@Base+0x8a0>
   2cc00:	mov	r1, r7
   2cc04:	bl	124e8 <setfilecon@plt>
   2cc08:	mov	sl, r0
   2cc0c:	bl	12434 <__errno_location@plt>
   2cc10:	cmp	r9, r8
   2cc14:	mov	fp, r0
   2cc18:	ldr	r8, [r0]
   2cc1c:	beq	2cc28 <fts_children@@Base+0x85c>
   2cc20:	mov	r0, r9
   2cc24:	bl	120c8 <free@plt>
   2cc28:	cmn	sl, #1
   2cc2c:	beq	2cc54 <fts_children@@Base+0x888>
   2cc30:	mov	r3, sl
   2cc34:	ldr	r2, [sp, #4044]	; 0xfcc
   2cc38:	mov	r0, r3
   2cc3c:	ldr	r3, [r4]
   2cc40:	cmp	r2, r3
   2cc44:	bne	2cd5c <fts_children@@Base+0x990>
   2cc48:	add	sp, sp, #4048	; 0xfd0
   2cc4c:	add	sp, sp, #4
   2cc50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc54:	cmp	r8, #20
   2cc58:	beq	2cc6c <fts_children@@Base+0x8a0>
   2cc5c:	sub	r3, r8, #1
   2cc60:	cmp	r8, #13
   2cc64:	cmpne	r3, #1
   2cc68:	bhi	2cd20 <fts_children@@Base+0x954>
   2cc6c:	add	r0, sp, #4
   2cc70:	bl	287f4 <__assert_fail@plt+0x16120>
   2cc74:	cmp	r0, #0
   2cc78:	bne	2cd60 <fts_children@@Base+0x994>
   2cc7c:	cmp	r5, #0
   2cc80:	blt	2cc90 <fts_children@@Base+0x8c4>
   2cc84:	ldr	r3, [sp, #4]
   2cc88:	cmp	r3, r5
   2cc8c:	beq	2cd40 <fts_children@@Base+0x974>
   2cc90:	mov	r0, r5
   2cc94:	bl	125cc <fchdir@plt>
   2cc98:	subs	r8, r0, #0
   2cc9c:	beq	2ccd4 <fts_children@@Base+0x908>
   2cca0:	bl	12434 <__errno_location@plt>
   2cca4:	ldr	r6, [r0]
   2cca8:	mov	r5, r0
   2ccac:	add	r0, sp, #4
   2ccb0:	bl	2886c <__assert_fail@plt+0x16198>
   2ccb4:	mvn	r3, #0
   2ccb8:	str	r6, [r5]
   2ccbc:	b	2cc34 <fts_children@@Base+0x868>
   2ccc0:	mov	r0, r6
   2ccc4:	mov	r1, r7
   2ccc8:	bl	124e8 <setfilecon@plt>
   2cccc:	mov	r3, r0
   2ccd0:	b	2cc34 <fts_children@@Base+0x868>
   2ccd4:	mov	r0, r6
   2ccd8:	mov	r1, r7
   2ccdc:	bl	124e8 <setfilecon@plt>
   2cce0:	cmn	r0, #1
   2cce4:	mov	r5, r0
   2cce8:	beq	2cd34 <fts_children@@Base+0x968>
   2ccec:	add	r0, sp, #4
   2ccf0:	bl	28850 <__assert_fail@plt+0x1617c>
   2ccf4:	cmp	r0, #0
   2ccf8:	bne	2cd6c <fts_children@@Base+0x9a0>
   2ccfc:	add	r0, sp, #4
   2cd00:	bl	2886c <__assert_fail@plt+0x16198>
   2cd04:	cmp	r8, #0
   2cd08:	moveq	r3, r5
   2cd0c:	beq	2cc34 <fts_children@@Base+0x868>
   2cd10:	bl	12434 <__errno_location@plt>
   2cd14:	mov	r3, r5
   2cd18:	str	r8, [r0]
   2cd1c:	b	2cc34 <fts_children@@Base+0x868>
   2cd20:	cmp	r8, #38	; 0x26
   2cd24:	cmpne	r8, #95	; 0x5f
   2cd28:	strne	r8, [fp]
   2cd2c:	bne	2cc30 <fts_children@@Base+0x864>
   2cd30:	b	2cc6c <fts_children@@Base+0x8a0>
   2cd34:	bl	12434 <__errno_location@plt>
   2cd38:	ldr	r8, [r0]
   2cd3c:	b	2ccec <fts_children@@Base+0x920>
   2cd40:	add	r0, sp, #4
   2cd44:	bl	2886c <__assert_fail@plt+0x16198>
   2cd48:	bl	12434 <__errno_location@plt>
   2cd4c:	mov	r2, #9
   2cd50:	mvn	r3, #0
   2cd54:	str	r2, [r0]
   2cd58:	b	2cc34 <fts_children@@Base+0x868>
   2cd5c:	bl	12188 <__stack_chk_fail@plt>
   2cd60:	bl	12434 <__errno_location@plt>
   2cd64:	ldr	r0, [r0]
   2cd68:	bl	25138 <__assert_fail@plt+0x12a64>
   2cd6c:	bl	12434 <__errno_location@plt>
   2cd70:	ldr	r0, [r0]
   2cd74:	bl	25174 <__assert_fail@plt+0x12aa0>
   2cd78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd7c:	movw	r4, #26008	; 0x6598
   2cd80:	movt	r4, #4
   2cd84:	sub	sp, sp, #4048	; 0xfd0
   2cd88:	sub	sp, sp, #4
   2cd8c:	cmn	r0, #100	; 0x64
   2cd90:	ldr	r3, [r4]
   2cd94:	mov	r5, r0
   2cd98:	mov	r6, r1
   2cd9c:	mov	r7, r2
   2cda0:	str	r3, [sp, #4044]	; 0xfcc
   2cda4:	beq	2ce90 <fts_children@@Base+0xac4>
   2cda8:	ldrb	r3, [r1]
   2cdac:	cmp	r3, #47	; 0x2f
   2cdb0:	beq	2ce90 <fts_children@@Base+0xac4>
   2cdb4:	add	r8, sp, #12
   2cdb8:	mov	r1, r0
   2cdbc:	mov	r2, r6
   2cdc0:	mov	r0, r8
   2cdc4:	bl	2de0c <fts_children@@Base+0x1a40>
   2cdc8:	subs	r9, r0, #0
   2cdcc:	beq	2ce3c <fts_children@@Base+0xa70>
   2cdd0:	mov	r1, r7
   2cdd4:	bl	120b0 <lsetfilecon@plt>
   2cdd8:	mov	sl, r0
   2cddc:	bl	12434 <__errno_location@plt>
   2cde0:	cmp	r9, r8
   2cde4:	mov	fp, r0
   2cde8:	ldr	r8, [r0]
   2cdec:	beq	2cdf8 <fts_children@@Base+0xa2c>
   2cdf0:	mov	r0, r9
   2cdf4:	bl	120c8 <free@plt>
   2cdf8:	cmn	sl, #1
   2cdfc:	beq	2ce24 <fts_children@@Base+0xa58>
   2ce00:	mov	r3, sl
   2ce04:	ldr	r2, [sp, #4044]	; 0xfcc
   2ce08:	mov	r0, r3
   2ce0c:	ldr	r3, [r4]
   2ce10:	cmp	r2, r3
   2ce14:	bne	2cf2c <fts_children@@Base+0xb60>
   2ce18:	add	sp, sp, #4048	; 0xfd0
   2ce1c:	add	sp, sp, #4
   2ce20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce24:	cmp	r8, #20
   2ce28:	beq	2ce3c <fts_children@@Base+0xa70>
   2ce2c:	sub	r3, r8, #1
   2ce30:	cmp	r8, #13
   2ce34:	cmpne	r3, #1
   2ce38:	bhi	2cef0 <fts_children@@Base+0xb24>
   2ce3c:	add	r0, sp, #4
   2ce40:	bl	287f4 <__assert_fail@plt+0x16120>
   2ce44:	cmp	r0, #0
   2ce48:	bne	2cf30 <fts_children@@Base+0xb64>
   2ce4c:	cmp	r5, #0
   2ce50:	blt	2ce60 <fts_children@@Base+0xa94>
   2ce54:	ldr	r3, [sp, #4]
   2ce58:	cmp	r3, r5
   2ce5c:	beq	2cf10 <fts_children@@Base+0xb44>
   2ce60:	mov	r0, r5
   2ce64:	bl	125cc <fchdir@plt>
   2ce68:	subs	r8, r0, #0
   2ce6c:	beq	2cea4 <fts_children@@Base+0xad8>
   2ce70:	bl	12434 <__errno_location@plt>
   2ce74:	ldr	r6, [r0]
   2ce78:	mov	r5, r0
   2ce7c:	add	r0, sp, #4
   2ce80:	bl	2886c <__assert_fail@plt+0x16198>
   2ce84:	mvn	r3, #0
   2ce88:	str	r6, [r5]
   2ce8c:	b	2ce04 <fts_children@@Base+0xa38>
   2ce90:	mov	r0, r6
   2ce94:	mov	r1, r7
   2ce98:	bl	120b0 <lsetfilecon@plt>
   2ce9c:	mov	r3, r0
   2cea0:	b	2ce04 <fts_children@@Base+0xa38>
   2cea4:	mov	r0, r6
   2cea8:	mov	r1, r7
   2ceac:	bl	120b0 <lsetfilecon@plt>
   2ceb0:	cmn	r0, #1
   2ceb4:	mov	r5, r0
   2ceb8:	beq	2cf04 <fts_children@@Base+0xb38>
   2cebc:	add	r0, sp, #4
   2cec0:	bl	28850 <__assert_fail@plt+0x1617c>
   2cec4:	cmp	r0, #0
   2cec8:	bne	2cf3c <fts_children@@Base+0xb70>
   2cecc:	add	r0, sp, #4
   2ced0:	bl	2886c <__assert_fail@plt+0x16198>
   2ced4:	cmp	r8, #0
   2ced8:	moveq	r3, r5
   2cedc:	beq	2ce04 <fts_children@@Base+0xa38>
   2cee0:	bl	12434 <__errno_location@plt>
   2cee4:	mov	r3, r5
   2cee8:	str	r8, [r0]
   2ceec:	b	2ce04 <fts_children@@Base+0xa38>
   2cef0:	cmp	r8, #38	; 0x26
   2cef4:	cmpne	r8, #95	; 0x5f
   2cef8:	strne	r8, [fp]
   2cefc:	bne	2ce00 <fts_children@@Base+0xa34>
   2cf00:	b	2ce3c <fts_children@@Base+0xa70>
   2cf04:	bl	12434 <__errno_location@plt>
   2cf08:	ldr	r8, [r0]
   2cf0c:	b	2cebc <fts_children@@Base+0xaf0>
   2cf10:	add	r0, sp, #4
   2cf14:	bl	2886c <__assert_fail@plt+0x16198>
   2cf18:	bl	12434 <__errno_location@plt>
   2cf1c:	mov	r2, #9
   2cf20:	mvn	r3, #0
   2cf24:	str	r2, [r0]
   2cf28:	b	2ce04 <fts_children@@Base+0xa38>
   2cf2c:	bl	12188 <__stack_chk_fail@plt>
   2cf30:	bl	12434 <__errno_location@plt>
   2cf34:	ldr	r0, [r0]
   2cf38:	bl	25138 <__assert_fail@plt+0x12a64>
   2cf3c:	bl	12434 <__errno_location@plt>
   2cf40:	ldr	r0, [r0]
   2cf44:	bl	25174 <__assert_fail@plt+0x12aa0>
   2cf48:	push	{r3, lr}
   2cf4c:	movw	r3, #25924	; 0x6544
   2cf50:	movt	r3, #4
   2cf54:	ldr	r0, [r3]
   2cf58:	bl	123b0 <exit@plt>
   2cf5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf60:	sub	sp, sp, #12
   2cf64:	mov	r7, r1
   2cf68:	mov	r6, r3
   2cf6c:	str	r2, [sp]
   2cf70:	mov	sl, r0
   2cf74:	bl	123d4 <strlen@plt>
   2cf78:	ldr	fp, [r7]
   2cf7c:	cmp	fp, #0
   2cf80:	mov	r8, r0
   2cf84:	beq	2d048 <fts_children@@Base+0xc7c>
   2cf88:	mov	r3, #0
   2cf8c:	ldr	r4, [sp]
   2cf90:	str	r3, [sp, #4]
   2cf94:	mov	r5, r3
   2cf98:	mvn	r9, #0
   2cf9c:	b	2cfc8 <fts_children@@Base+0xbfc>
   2cfa0:	bl	12158 <memcmp@plt>
   2cfa4:	ldr	r3, [sp, #4]
   2cfa8:	cmp	r0, #0
   2cfac:	movne	r3, #1
   2cfb0:	str	r3, [sp, #4]
   2cfb4:	ldr	fp, [r7, #4]!
   2cfb8:	add	r5, r5, #1
   2cfbc:	add	r4, r4, r6
   2cfc0:	cmp	fp, #0
   2cfc4:	beq	2d024 <fts_children@@Base+0xc58>
   2cfc8:	mov	r0, fp
   2cfcc:	mov	r1, sl
   2cfd0:	mov	r2, r8
   2cfd4:	bl	1265c <strncmp@plt>
   2cfd8:	cmp	r0, #0
   2cfdc:	mov	r0, fp
   2cfe0:	bne	2cfb4 <fts_children@@Base+0xbe8>
   2cfe4:	bl	123d4 <strlen@plt>
   2cfe8:	ldr	r3, [sp]
   2cfec:	mov	r1, r4
   2cff0:	mov	r2, r6
   2cff4:	cmp	r0, r8
   2cff8:	mla	r0, r6, r9, r3
   2cffc:	beq	2d03c <fts_children@@Base+0xc70>
   2d000:	cmn	r9, #1
   2d004:	moveq	r9, r5
   2d008:	beq	2cfb4 <fts_children@@Base+0xbe8>
   2d00c:	ldr	r3, [sp]
   2d010:	cmp	r3, #0
   2d014:	bne	2cfa0 <fts_children@@Base+0xbd4>
   2d018:	mov	r3, #1
   2d01c:	str	r3, [sp, #4]
   2d020:	b	2cfb4 <fts_children@@Base+0xbe8>
   2d024:	ldr	r3, [sp, #4]
   2d028:	cmp	r3, #0
   2d02c:	bne	2d050 <fts_children@@Base+0xc84>
   2d030:	mov	r0, r9
   2d034:	add	sp, sp, #12
   2d038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d03c:	mov	r0, r5
   2d040:	add	sp, sp, #12
   2d044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d048:	mvn	r9, #0
   2d04c:	b	2d030 <fts_children@@Base+0xc64>
   2d050:	mvn	r0, #1
   2d054:	b	2d034 <fts_children@@Base+0xc68>
   2d058:	cmn	r2, #1
   2d05c:	mov	r2, #5
   2d060:	push	{r4, r5, r6, lr}
   2d064:	mov	r5, r1
   2d068:	sub	sp, sp, #8
   2d06c:	movweq	r1, #20392	; 0x4fa8
   2d070:	movwne	r1, #20420	; 0x4fc4
   2d074:	movteq	r1, #3
   2d078:	movtne	r1, #3
   2d07c:	mov	r4, r0
   2d080:	moveq	r0, #0
   2d084:	movne	r0, #0
   2d088:	bl	1217c <dcgettext@plt>
   2d08c:	mov	r2, r5
   2d090:	mov	r1, #6
   2d094:	mov	r6, r0
   2d098:	mov	r0, #0
   2d09c:	bl	284fc <__assert_fail@plt+0x15e28>
   2d0a0:	mov	r1, r4
   2d0a4:	mov	r5, r0
   2d0a8:	mov	r0, #1
   2d0ac:	bl	287cc <__assert_fail@plt+0x160f8>
   2d0b0:	mov	r3, r5
   2d0b4:	mov	r2, r6
   2d0b8:	str	r0, [sp]
   2d0bc:	mov	r0, #0
   2d0c0:	mov	r1, r0
   2d0c4:	bl	122cc <error@plt>
   2d0c8:	add	sp, sp, #8
   2d0cc:	pop	{r4, r5, r6, pc}
   2d0d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d0d4:	movw	sl, #26016	; 0x65a0
   2d0d8:	movt	sl, #4
   2d0dc:	mov	r8, r0
   2d0e0:	mov	r4, r1
   2d0e4:	mov	r7, r2
   2d0e8:	movw	r1, #20452	; 0x4fe4
   2d0ec:	mov	r2, #5
   2d0f0:	movt	r1, #3
   2d0f4:	mov	r0, #0
   2d0f8:	bl	1217c <dcgettext@plt>
   2d0fc:	ldr	r1, [sl]
   2d100:	bl	12650 <fputs@plt>
   2d104:	ldr	r5, [r8]
   2d108:	cmp	r5, #0
   2d10c:	movne	r9, #0
   2d110:	movne	r6, r9
   2d114:	bne	2d158 <fts_children@@Base+0xd8c>
   2d118:	b	2d1a0 <fts_children@@Base+0xdd4>
   2d11c:	mov	r0, r5
   2d120:	ldr	r5, [sl]
   2d124:	bl	287dc <__assert_fail@plt+0x16108>
   2d128:	movw	r2, #20476	; 0x4ffc
   2d12c:	mov	r1, #1
   2d130:	movt	r2, #3
   2d134:	mov	r9, r4
   2d138:	mov	r3, r0
   2d13c:	mov	r0, r5
   2d140:	bl	124d0 <__fprintf_chk@plt>
   2d144:	ldr	r5, [r8, #4]!
   2d148:	add	r6, r6, #1
   2d14c:	add	r4, r4, r7
   2d150:	cmp	r5, #0
   2d154:	beq	2d1a0 <fts_children@@Base+0xdd4>
   2d158:	cmp	r6, #0
   2d15c:	mov	r1, r4
   2d160:	mov	r2, r7
   2d164:	mov	r0, r9
   2d168:	beq	2d11c <fts_children@@Base+0xd50>
   2d16c:	bl	12158 <memcmp@plt>
   2d170:	cmp	r0, #0
   2d174:	bne	2d11c <fts_children@@Base+0xd50>
   2d178:	mov	r0, r5
   2d17c:	ldr	r5, [sl]
   2d180:	bl	287dc <__assert_fail@plt+0x16108>
   2d184:	movw	r2, #20484	; 0x5004
   2d188:	mov	r1, #1
   2d18c:	movt	r2, #3
   2d190:	mov	r3, r0
   2d194:	mov	r0, r5
   2d198:	bl	124d0 <__fprintf_chk@plt>
   2d19c:	b	2d144 <fts_children@@Base+0xd78>
   2d1a0:	ldr	r1, [sl]
   2d1a4:	mov	r0, #10
   2d1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d1ac:	b	1223c <_IO_putc@plt>
   2d1b0:	push	{r4, r5, r6, r7, r8, lr}
   2d1b4:	mov	r7, r1
   2d1b8:	ldr	r4, [sp, #24]
   2d1bc:	mov	r1, r2
   2d1c0:	mov	r6, r2
   2d1c4:	mov	r5, r3
   2d1c8:	mov	r2, r3
   2d1cc:	mov	r8, r0
   2d1d0:	mov	r3, r4
   2d1d4:	mov	r0, r7
   2d1d8:	bl	2cf5c <fts_children@@Base+0xb90>
   2d1dc:	subs	r2, r0, #0
   2d1e0:	blt	2d1ec <fts_children@@Base+0xe20>
   2d1e4:	mov	r0, r2
   2d1e8:	pop	{r4, r5, r6, r7, r8, pc}
   2d1ec:	mov	r0, r8
   2d1f0:	mov	r1, r7
   2d1f4:	bl	2d058 <fts_children@@Base+0xc8c>
   2d1f8:	mov	r0, r6
   2d1fc:	mov	r1, r5
   2d200:	mov	r2, r4
   2d204:	bl	2d0d0 <fts_children@@Base+0xd04>
   2d208:	ldr	r3, [sp, #28]
   2d20c:	blx	r3
   2d210:	mvn	r0, #0
   2d214:	pop	{r4, r5, r6, r7, r8, pc}
   2d218:	push	{r4, r5, r6, r7, r8, lr}
   2d21c:	mov	r8, r0
   2d220:	ldr	r5, [r1]
   2d224:	mov	r6, r3
   2d228:	cmp	r5, #0
   2d22c:	beq	2d264 <fts_children@@Base+0xe98>
   2d230:	mov	r4, r2
   2d234:	mov	r7, r1
   2d238:	b	2d248 <fts_children@@Base+0xe7c>
   2d23c:	ldr	r5, [r7, #4]!
   2d240:	cmp	r5, #0
   2d244:	beq	2d264 <fts_children@@Base+0xe98>
   2d248:	mov	r1, r4
   2d24c:	mov	r0, r8
   2d250:	mov	r2, r6
   2d254:	add	r4, r4, r6
   2d258:	bl	12158 <memcmp@plt>
   2d25c:	cmp	r0, #0
   2d260:	bne	2d23c <fts_children@@Base+0xe70>
   2d264:	mov	r0, r5
   2d268:	pop	{r4, r5, r6, r7, r8, pc}
   2d26c:	push	{r4, r5, r6, lr}
   2d270:	mov	r5, r0
   2d274:	bl	122b4 <__fpending@plt>
   2d278:	mov	r6, r0
   2d27c:	mov	r0, r5
   2d280:	bl	120e0 <ferror@plt>
   2d284:	mov	r4, r0
   2d288:	mov	r0, r5
   2d28c:	bl	12500 <fclose@plt>
   2d290:	adds	r5, r0, #0
   2d294:	movne	r5, #1
   2d298:	cmp	r4, #0
   2d29c:	bne	2d2bc <fts_children@@Base+0xef0>
   2d2a0:	cmp	r5, #0
   2d2a4:	beq	2d2b4 <fts_children@@Base+0xee8>
   2d2a8:	cmp	r6, #0
   2d2ac:	beq	2d2d8 <fts_children@@Base+0xf0c>
   2d2b0:	mvn	r4, #0
   2d2b4:	mov	r0, r4
   2d2b8:	pop	{r4, r5, r6, pc}
   2d2bc:	cmp	r5, #0
   2d2c0:	bne	2d2b0 <fts_children@@Base+0xee4>
   2d2c4:	bl	12434 <__errno_location@plt>
   2d2c8:	mvn	r4, #0
   2d2cc:	str	r5, [r0]
   2d2d0:	mov	r0, r4
   2d2d4:	pop	{r4, r5, r6, pc}
   2d2d8:	bl	12434 <__errno_location@plt>
   2d2dc:	ldr	r4, [r0]
   2d2e0:	subs	r4, r4, #9
   2d2e4:	mvnne	r4, #0
   2d2e8:	mov	r0, r4
   2d2ec:	pop	{r4, r5, r6, pc}
   2d2f0:	mov	r2, #0
   2d2f4:	mov	r3, #0
   2d2f8:	movw	r1, #62998	; 0xf616
   2d2fc:	strd	r2, [r0, #16]
   2d300:	movt	r1, #149	; 0x95
   2d304:	str	r1, [r0, #24]
   2d308:	bx	lr
   2d30c:	ldr	r2, [r0, #24]
   2d310:	mov	ip, r0
   2d314:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2d318:	movw	r3, #62998	; 0xf616
   2d31c:	movt	r3, #149	; 0x95
   2d320:	cmp	r2, r3
   2d324:	bne	2d3c8 <fts_children@@Base+0xffc>
   2d328:	ldrd	r6, [r0, #16]
   2d32c:	orrs	r0, r6, r7
   2d330:	beq	2d378 <fts_children@@Base+0xfac>
   2d334:	ldrd	r8, [r1, #96]	; 0x60
   2d338:	ldrd	r2, [ip]
   2d33c:	cmp	r9, r3
   2d340:	cmpeq	r8, r2
   2d344:	beq	2d3ac <fts_children@@Base+0xfe0>
   2d348:	adds	r2, r6, #1
   2d34c:	adc	r3, r7, #0
   2d350:	and	r6, r6, r2
   2d354:	and	r7, r7, r3
   2d358:	strd	r2, [ip, #16]
   2d35c:	orrs	r0, r6, r7
   2d360:	bne	2d3a4 <fts_children@@Base+0xfd8>
   2d364:	orrs	r0, r2, r3
   2d368:	beq	2d3c0 <fts_children@@Base+0xff4>
   2d36c:	mov	r5, r8
   2d370:	mov	r4, r9
   2d374:	b	2d38c <fts_children@@Base+0xfc0>
   2d378:	ldr	r4, [r1, #100]	; 0x64
   2d37c:	mov	r2, #1
   2d380:	mov	r3, #0
   2d384:	ldr	r5, [r1, #96]	; 0x60
   2d388:	strd	r2, [ip, #16]
   2d38c:	ldrd	r2, [r1]
   2d390:	mov	r0, #0
   2d394:	str	r5, [ip]
   2d398:	str	r4, [ip, #4]
   2d39c:	strd	r2, [ip, #8]
   2d3a0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d3a4:	mov	r0, #0
   2d3a8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d3ac:	ldrd	r4, [r1]
   2d3b0:	ldrd	r2, [ip, #8]
   2d3b4:	cmp	r5, r3
   2d3b8:	cmpeq	r4, r2
   2d3bc:	bne	2d348 <fts_children@@Base+0xf7c>
   2d3c0:	mov	r0, #1
   2d3c4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d3c8:	movw	r0, #20504	; 0x5018
   2d3cc:	movw	r1, #20528	; 0x5030
   2d3d0:	movw	r3, #20492	; 0x500c
   2d3d4:	movt	r0, #3
   2d3d8:	movt	r1, #3
   2d3dc:	mov	r2, #60	; 0x3c
   2d3e0:	movt	r3, #3
   2d3e4:	bl	126d4 <__assert_fail@plt>
   2d3e8:	push	{r4, r5, lr}
   2d3ec:	movw	r4, #26008	; 0x6598
   2d3f0:	movt	r4, #4
   2d3f4:	sub	sp, sp, #20
   2d3f8:	mov	r5, r0
   2d3fc:	mov	r0, #0
   2d400:	ldr	r3, [r4]
   2d404:	mov	r1, r5
   2d408:	str	r3, [sp, #12]
   2d40c:	bl	120ec <clock_gettime@plt>
   2d410:	cmp	r0, #0
   2d414:	beq	2d438 <fts_children@@Base+0x106c>
   2d418:	mov	r1, #0
   2d41c:	add	r0, sp, #4
   2d420:	bl	122a8 <gettimeofday@plt>
   2d424:	ldr	r3, [sp, #8]
   2d428:	mov	r1, #1000	; 0x3e8
   2d42c:	ldr	r2, [sp, #4]
   2d430:	mul	r3, r1, r3
   2d434:	stm	r5, {r2, r3}
   2d438:	ldr	r2, [sp, #12]
   2d43c:	ldr	r3, [r4]
   2d440:	cmp	r2, r3
   2d444:	bne	2d450 <fts_children@@Base+0x1084>
   2d448:	add	sp, sp, #20
   2d44c:	pop	{r4, r5, pc}
   2d450:	bl	12188 <__stack_chk_fail@plt>
   2d454:	mov	r3, #0
   2d458:	mov	r2, #1
   2d45c:	str	r1, [r0]
   2d460:	str	r1, [r0, #4]
   2d464:	str	r1, [r0, #8]
   2d468:	str	r1, [r0, #12]
   2d46c:	str	r1, [r0, #16]
   2d470:	strb	r2, [r0, #28]
   2d474:	str	r3, [r0, #20]
   2d478:	str	r3, [r0, #24]
   2d47c:	bx	lr
   2d480:	ldrb	r0, [r0, #28]
   2d484:	bx	lr
   2d488:	ldrb	ip, [r0, #28]
   2d48c:	mov	r3, r0
   2d490:	ldr	r2, [r0, #20]
   2d494:	eor	ip, ip, #1
   2d498:	add	r2, ip, r2
   2d49c:	and	r2, r2, #3
   2d4a0:	ldr	r0, [r0, r2, lsl #2]
   2d4a4:	str	r1, [r3, r2, lsl #2]
   2d4a8:	ldr	r1, [r3, #24]
   2d4ac:	str	r2, [r3, #20]
   2d4b0:	cmp	r1, r2
   2d4b4:	mov	r2, #0
   2d4b8:	addeq	r1, ip, r1
   2d4bc:	strb	r2, [r3, #28]
   2d4c0:	andeq	r1, r1, #3
   2d4c4:	streq	r1, [r3, #24]
   2d4c8:	bx	lr
   2d4cc:	push	{r3, lr}
   2d4d0:	ldrb	r3, [r0, #28]
   2d4d4:	cmp	r3, #0
   2d4d8:	bne	2d510 <fts_children@@Base+0x1144>
   2d4dc:	ldr	r3, [r0, #20]
   2d4e0:	ldr	r1, [r0, #16]
   2d4e4:	ldr	r2, [r0, r3, lsl #2]
   2d4e8:	str	r1, [r0, r3, lsl #2]
   2d4ec:	ldr	r1, [r0, #24]
   2d4f0:	cmp	r3, r1
   2d4f4:	addne	r3, r3, #3
   2d4f8:	moveq	r3, #1
   2d4fc:	andne	r3, r3, #3
   2d500:	strbeq	r3, [r0, #28]
   2d504:	strne	r3, [r0, #20]
   2d508:	mov	r0, r2
   2d50c:	pop	{r3, pc}
   2d510:	bl	12674 <abort@plt>
   2d514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d518:	movw	r7, #26008	; 0x6598
   2d51c:	movt	r7, #4
   2d520:	sub	sp, sp, #132	; 0x84
   2d524:	mov	r0, #14
   2d528:	movw	r5, #28292	; 0x6e84
   2d52c:	ldr	r3, [r7]
   2d530:	movt	r5, #4
   2d534:	movw	r6, #15168	; 0x3b40
   2d538:	movt	r6, #3
   2d53c:	str	r3, [sp, #124]	; 0x7c
   2d540:	bl	12578 <nl_langinfo@plt>
   2d544:	ldr	r4, [r5]
   2d548:	cmp	r0, #0
   2d54c:	movne	r6, r0
   2d550:	cmp	r4, #0
   2d554:	beq	2d5fc <fts_children@@Base+0x1230>
   2d558:	ldrb	r5, [r4]
   2d55c:	cmp	r5, #0
   2d560:	bne	2d594 <fts_children@@Base+0x11c8>
   2d564:	b	2d5cc <fts_children@@Base+0x1200>
   2d568:	mov	r0, r4
   2d56c:	bl	123d4 <strlen@plt>
   2d570:	add	r0, r0, #1
   2d574:	add	r5, r4, r0
   2d578:	mov	r0, r5
   2d57c:	bl	123d4 <strlen@plt>
   2d580:	add	r0, r0, #1
   2d584:	add	r4, r5, r0
   2d588:	ldrb	r5, [r5, r0]
   2d58c:	cmp	r5, #0
   2d590:	beq	2d5cc <fts_children@@Base+0x1200>
   2d594:	mov	r0, r6
   2d598:	mov	r1, r4
   2d59c:	bl	1205c <strcmp@plt>
   2d5a0:	cmp	r0, #0
   2d5a4:	beq	2d5bc <fts_children@@Base+0x11f0>
   2d5a8:	cmp	r5, #42	; 0x2a
   2d5ac:	bne	2d568 <fts_children@@Base+0x119c>
   2d5b0:	ldrb	r3, [r4, #1]
   2d5b4:	cmp	r3, #0
   2d5b8:	bne	2d568 <fts_children@@Base+0x119c>
   2d5bc:	mov	r0, r4
   2d5c0:	bl	123d4 <strlen@plt>
   2d5c4:	add	r0, r0, #1
   2d5c8:	add	r6, r4, r0
   2d5cc:	ldrb	r0, [r6]
   2d5d0:	movw	r3, #20556	; 0x504c
   2d5d4:	ldr	r1, [sp, #124]	; 0x7c
   2d5d8:	movt	r3, #3
   2d5dc:	cmp	r0, #0
   2d5e0:	ldr	r2, [r7]
   2d5e4:	movne	r0, r6
   2d5e8:	moveq	r0, r3
   2d5ec:	cmp	r1, r2
   2d5f0:	bne	2d8a8 <fts_children@@Base+0x14dc>
   2d5f4:	add	sp, sp, #132	; 0x84
   2d5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d5fc:	movw	r0, #20564	; 0x5054
   2d600:	movt	r0, #3
   2d604:	bl	12308 <getenv@plt>
   2d608:	subs	r8, r0, #0
   2d60c:	beq	2d880 <fts_children@@Base+0x14b4>
   2d610:	ldrb	r3, [r8]
   2d614:	cmp	r3, #0
   2d618:	beq	2d818 <fts_children@@Base+0x144c>
   2d61c:	bl	123d4 <strlen@plt>
   2d620:	subs	sl, r0, #0
   2d624:	subne	r3, sl, #1
   2d628:	bne	2d828 <fts_children@@Base+0x145c>
   2d62c:	mov	ip, #0
   2d630:	str	ip, [sp, #12]
   2d634:	add	fp, sl, ip
   2d638:	add	r0, fp, #14
   2d63c:	bl	1232c <malloc@plt>
   2d640:	subs	r9, r0, #0
   2d644:	beq	2d874 <fts_children@@Base+0x14a8>
   2d648:	mov	r2, sl
   2d64c:	mov	r1, r8
   2d650:	bl	12104 <memcpy@plt>
   2d654:	ldr	r3, [sp, #12]
   2d658:	add	lr, r9, fp
   2d65c:	cmp	r3, #0
   2d660:	movne	r3, #47	; 0x2f
   2d664:	strbne	r3, [r9, sl]
   2d668:	movw	r3, #20580	; 0x5064
   2d66c:	movt	r3, #3
   2d670:	ldm	r3!, {r0, r1, r2}
   2d674:	ldrh	r3, [r3]
   2d678:	str	r0, [r9, fp]
   2d67c:	mov	r0, r9
   2d680:	str	r1, [lr, #4]
   2d684:	mov	r1, #32768	; 0x8000
   2d688:	strh	r3, [lr, #12]
   2d68c:	str	r2, [lr, #8]
   2d690:	bl	122fc <open64@plt>
   2d694:	subs	sl, r0, #0
   2d698:	blt	2d840 <fts_children@@Base+0x1474>
   2d69c:	movw	r1, #6772	; 0x1a74
   2d6a0:	movt	r1, #3
   2d6a4:	bl	11ffc <fdopen@plt>
   2d6a8:	subs	r8, r0, #0
   2d6ac:	beq	2d894 <fts_children@@Base+0x14c8>
   2d6b0:	mov	sl, #0
   2d6b4:	ldr	r3, [r8, #4]
   2d6b8:	ldr	r2, [r8, #8]
   2d6bc:	cmp	r3, r2
   2d6c0:	bcs	2d7ac <fts_children@@Base+0x13e0>
   2d6c4:	add	r2, r3, #1
   2d6c8:	str	r2, [r8, #4]
   2d6cc:	ldrb	r0, [r3]
   2d6d0:	cmp	r0, #32
   2d6d4:	beq	2d6b4 <fts_children@@Base+0x12e8>
   2d6d8:	sub	r3, r0, #9
   2d6dc:	cmp	r3, #1
   2d6e0:	bls	2d6b4 <fts_children@@Base+0x12e8>
   2d6e4:	cmp	r0, #35	; 0x23
   2d6e8:	beq	2d7c0 <fts_children@@Base+0x13f4>
   2d6ec:	mov	r1, r8
   2d6f0:	bl	1241c <ungetc@plt>
   2d6f4:	mov	r0, r8
   2d6f8:	movw	r1, #20596	; 0x5074
   2d6fc:	add	r2, sp, #20
   2d700:	movt	r1, #3
   2d704:	add	r3, sp, #72	; 0x48
   2d708:	bl	12494 <fscanf@plt>
   2d70c:	cmp	r0, #1
   2d710:	ble	2d7f0 <fts_children@@Base+0x1424>
   2d714:	add	r0, sp, #20
   2d718:	bl	123d4 <strlen@plt>
   2d71c:	mov	fp, r0
   2d720:	add	r0, sp, #72	; 0x48
   2d724:	bl	123d4 <strlen@plt>
   2d728:	cmp	sl, #0
   2d72c:	mov	ip, r0
   2d730:	bne	2d84c <fts_children@@Base+0x1480>
   2d734:	add	sl, r0, fp
   2d738:	str	ip, [sp, #4]
   2d73c:	add	r0, sl, #3
   2d740:	add	sl, sl, #2
   2d744:	bl	1232c <malloc@plt>
   2d748:	ldr	ip, [sp, #4]
   2d74c:	mov	r2, r0
   2d750:	cmp	r2, #0
   2d754:	beq	2d8ac <fts_children@@Base+0x14e0>
   2d758:	movw	r3, #65534	; 0xfffe
   2d75c:	movt	r3, #65535	; 0xffff
   2d760:	rsb	ip, ip, sl
   2d764:	rsb	r3, fp, r3
   2d768:	add	r0, r3, ip
   2d76c:	add	r1, sp, #20
   2d770:	add	r0, r2, r0
   2d774:	mov	r4, r2
   2d778:	str	r2, [sp, #8]
   2d77c:	str	ip, [sp, #4]
   2d780:	bl	1229c <strcpy@plt>
   2d784:	ldr	ip, [sp, #4]
   2d788:	add	r1, sp, #72	; 0x48
   2d78c:	ldr	r2, [sp, #8]
   2d790:	sub	r0, ip, #1
   2d794:	add	r0, r2, r0
   2d798:	bl	1229c <strcpy@plt>
   2d79c:	ldr	r3, [r8, #4]
   2d7a0:	ldr	r2, [r8, #8]
   2d7a4:	cmp	r3, r2
   2d7a8:	bcc	2d6c4 <fts_children@@Base+0x12f8>
   2d7ac:	mov	r0, r8
   2d7b0:	bl	1253c <__uflow@plt>
   2d7b4:	cmn	r0, #1
   2d7b8:	beq	2d7f0 <fts_children@@Base+0x1424>
   2d7bc:	b	2d6d0 <fts_children@@Base+0x1304>
   2d7c0:	ldr	r3, [r8, #4]
   2d7c4:	ldr	r2, [r8, #8]
   2d7c8:	cmp	r3, r2
   2d7cc:	bcs	2d8c8 <fts_children@@Base+0x14fc>
   2d7d0:	add	r2, r3, #1
   2d7d4:	str	r2, [r8, #4]
   2d7d8:	ldrb	r0, [r3]
   2d7dc:	cmp	r0, #10
   2d7e0:	cmnne	r0, #1
   2d7e4:	bne	2d7c0 <fts_children@@Base+0x13f4>
   2d7e8:	cmn	r0, #1
   2d7ec:	bne	2d6b4 <fts_children@@Base+0x12e8>
   2d7f0:	mov	r0, r8
   2d7f4:	bl	12500 <fclose@plt>
   2d7f8:	cmp	sl, #0
   2d7fc:	beq	2d840 <fts_children@@Base+0x1474>
   2d800:	mov	r3, #0
   2d804:	strb	r3, [r4, sl]
   2d808:	mov	r0, r9
   2d80c:	bl	120c8 <free@plt>
   2d810:	str	r4, [r5]
   2d814:	b	2d558 <fts_children@@Base+0x118c>
   2d818:	movw	r8, #20544	; 0x5040
   2d81c:	movt	r8, #3
   2d820:	mov	r3, #7
   2d824:	mov	sl, #8
   2d828:	ldrb	r3, [r8, r3]
   2d82c:	cmp	r3, #47	; 0x2f
   2d830:	movne	ip, #1
   2d834:	strne	ip, [sp, #12]
   2d838:	bne	2d634 <fts_children@@Base+0x1268>
   2d83c:	b	2d62c <fts_children@@Base+0x1260>
   2d840:	movw	r4, #15168	; 0x3b40
   2d844:	movt	r4, #3
   2d848:	b	2d808 <fts_children@@Base+0x143c>
   2d84c:	add	r3, fp, r0
   2d850:	mov	r0, r4
   2d854:	add	sl, r3, sl
   2d858:	str	ip, [sp, #4]
   2d85c:	add	r1, sl, #3
   2d860:	add	sl, sl, #2
   2d864:	bl	121ac <realloc@plt>
   2d868:	ldr	ip, [sp, #4]
   2d86c:	mov	r2, r0
   2d870:	b	2d750 <fts_children@@Base+0x1384>
   2d874:	movw	r4, #15168	; 0x3b40
   2d878:	movt	r4, #3
   2d87c:	b	2d810 <fts_children@@Base+0x1444>
   2d880:	movw	r8, #20544	; 0x5040
   2d884:	mov	r3, #7
   2d888:	movt	r8, #3
   2d88c:	mov	sl, #8
   2d890:	b	2d828 <fts_children@@Base+0x145c>
   2d894:	mov	r0, sl
   2d898:	movw	r4, #15168	; 0x3b40
   2d89c:	bl	12680 <close@plt>
   2d8a0:	movt	r4, #3
   2d8a4:	b	2d808 <fts_children@@Base+0x143c>
   2d8a8:	bl	12188 <__stack_chk_fail@plt>
   2d8ac:	mov	r0, r4
   2d8b0:	movw	r4, #15168	; 0x3b40
   2d8b4:	bl	120c8 <free@plt>
   2d8b8:	mov	r0, r8
   2d8bc:	bl	12500 <fclose@plt>
   2d8c0:	movt	r4, #3
   2d8c4:	b	2d808 <fts_children@@Base+0x143c>
   2d8c8:	mov	r0, r8
   2d8cc:	bl	1253c <__uflow@plt>
   2d8d0:	b	2d7dc <fts_children@@Base+0x1410>
   2d8d4:	adds	r0, r0, #8
   2d8d8:	push	{r4, lr}
   2d8dc:	bcs	2d930 <fts_children@@Base+0x1564>
   2d8e0:	bl	1232c <malloc@plt>
   2d8e4:	subs	ip, r0, #0
   2d8e8:	beq	2d930 <fts_children@@Base+0x1564>
   2d8ec:	add	r1, ip, #8
   2d8f0:	movw	r3, #65281	; 0xff01
   2d8f4:	movt	r3, #65280	; 0xff00
   2d8f8:	movw	r2, #28296	; 0x6e88
   2d8fc:	movt	r2, #4
   2d900:	mov	r0, r1
   2d904:	umull	r4, r3, r3, r1
   2d908:	movw	r4, #64330	; 0xfb4a
   2d90c:	movt	r4, #5141	; 0x1415
   2d910:	str	r4, [ip, #4]
   2d914:	lsr	r3, r3, #8
   2d918:	add	r3, r3, r3, lsl #8
   2d91c:	rsb	r3, r3, r1
   2d920:	ldr	r4, [r2, r3, lsl #2]
   2d924:	str	r1, [r2, r3, lsl #2]
   2d928:	str	r4, [ip]
   2d92c:	pop	{r4, pc}
   2d930:	mov	r0, #0
   2d934:	pop	{r4, pc}
   2d938:	cmp	r0, #0
   2d93c:	bxeq	lr
   2d940:	ldr	r2, [r0, #-4]
   2d944:	movw	r3, #64330	; 0xfb4a
   2d948:	movt	r3, #5141	; 0x1415
   2d94c:	cmp	r2, r3
   2d950:	bxne	lr
   2d954:	movw	r3, #65281	; 0xff01
   2d958:	movt	r3, #65280	; 0xff00
   2d95c:	movw	r1, #28296	; 0x6e88
   2d960:	movt	r1, #4
   2d964:	umull	r2, r3, r3, r0
   2d968:	lsr	r3, r3, #8
   2d96c:	add	r3, r3, r3, lsl #8
   2d970:	rsb	r3, r3, r0
   2d974:	ldr	r2, [r1, r3, lsl #2]
   2d978:	cmp	r2, #0
   2d97c:	bxeq	lr
   2d980:	cmp	r0, r2
   2d984:	addeq	r2, r1, r3, lsl #2
   2d988:	bne	2d99c <fts_children@@Base+0x15d0>
   2d98c:	b	2d9b0 <fts_children@@Base+0x15e4>
   2d990:	cmp	r0, r3
   2d994:	beq	2d9ac <fts_children@@Base+0x15e0>
   2d998:	mov	r2, r3
   2d99c:	ldr	r3, [r2, #-8]
   2d9a0:	cmp	r3, #0
   2d9a4:	bne	2d990 <fts_children@@Base+0x15c4>
   2d9a8:	bx	lr
   2d9ac:	sub	r2, r2, #8
   2d9b0:	ldr	ip, [r0, #-8]!
   2d9b4:	str	ip, [r2]
   2d9b8:	b	120c8 <free@plt>
   2d9bc:	push	{r4, lr}
   2d9c0:	mov	r4, r0
   2d9c4:	bl	120a4 <wcwidth@plt>
   2d9c8:	cmp	r0, #0
   2d9cc:	popge	{r4, pc}
   2d9d0:	mov	r0, r4
   2d9d4:	bl	121d0 <iswcntrl@plt>
   2d9d8:	rsbs	r0, r0, #1
   2d9dc:	movcc	r0, #0
   2d9e0:	pop	{r4, pc}
   2d9e4:	push	{r3, r4, r5, lr}
   2d9e8:	mov	r3, r1
   2d9ec:	mov	r4, r1
   2d9f0:	ldr	r1, [r3], #16
   2d9f4:	mov	r5, r0
   2d9f8:	cmp	r1, r3
   2d9fc:	strne	r1, [r0]
   2da00:	beq	2da24 <fts_children@@Base+0x1658>
   2da04:	ldrb	r3, [r4, #8]
   2da08:	ldr	r2, [r4, #4]
   2da0c:	cmp	r3, #0
   2da10:	strb	r3, [r5, #8]
   2da14:	ldrne	r3, [r4, #12]
   2da18:	str	r2, [r5, #4]
   2da1c:	strne	r3, [r5, #12]
   2da20:	pop	{r3, r4, r5, pc}
   2da24:	add	r3, r0, #16
   2da28:	ldr	r2, [r4, #4]
   2da2c:	mov	r0, r3
   2da30:	bl	12104 <memcpy@plt>
   2da34:	str	r0, [r5]
   2da38:	b	2da04 <fts_children@@Base+0x1638>
   2da3c:	lsr	r2, r0, #5
   2da40:	movw	r3, #20608	; 0x5080
   2da44:	movt	r3, #3
   2da48:	and	r0, r0, #31
   2da4c:	ldr	r3, [r3, r2, lsl #2]
   2da50:	lsr	r0, r3, r0
   2da54:	and	r0, r0, #1
   2da58:	bx	lr
   2da5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2da60:	movw	r9, #26008	; 0x6598
   2da64:	movt	r9, #4
   2da68:	sub	sp, sp, #64	; 0x40
   2da6c:	mov	sl, r0
   2da70:	ldr	r3, [r9]
   2da74:	str	r3, [sp, #60]	; 0x3c
   2da78:	bl	12284 <__ctype_get_mb_cur_max@plt>
   2da7c:	cmp	r0, #1
   2da80:	bls	2dc10 <fts_children@@Base+0x1844>
   2da84:	mov	r3, #0
   2da88:	movw	r8, #20608	; 0x5080
   2da8c:	movt	r8, #3
   2da90:	mov	r5, r3
   2da94:	mov	r4, sl
   2da98:	mov	r7, r3
   2da9c:	mov	r6, #1
   2daa0:	str	sl, [sp, #20]
   2daa4:	strb	r3, [sp, #4]
   2daa8:	str	r3, [sp, #8]
   2daac:	strb	r3, [sp, #16]
   2dab0:	str	r3, [sp, #12]
   2dab4:	ldrb	r3, [sp, #4]
   2dab8:	cmp	r3, #0
   2dabc:	bne	2db28 <fts_children@@Base+0x175c>
   2dac0:	ldrb	r3, [r4]
   2dac4:	and	r2, r3, #31
   2dac8:	lsr	r3, r3, #5
   2dacc:	ldr	r3, [r8, r3, lsl #2]
   2dad0:	lsr	r3, r3, r2
   2dad4:	tst	r3, #1
   2dad8:	beq	2db14 <fts_children@@Base+0x1748>
   2dadc:	str	r6, [sp, #24]
   2dae0:	ldrb	r4, [r4]
   2dae4:	strb	r6, [sp, #28]
   2dae8:	cmp	r4, #0
   2daec:	strb	r6, [sp, #16]
   2daf0:	str	r4, [sp, #32]
   2daf4:	bne	2db8c <fts_children@@Base+0x17c0>
   2daf8:	mov	r0, r5
   2dafc:	ldr	r2, [sp, #60]	; 0x3c
   2db00:	ldr	r3, [r9]
   2db04:	cmp	r2, r3
   2db08:	bne	2dc3c <fts_children@@Base+0x1870>
   2db0c:	add	sp, sp, #64	; 0x40
   2db10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2db14:	add	r0, sp, #8
   2db18:	bl	12128 <mbsinit@plt>
   2db1c:	cmp	r0, #0
   2db20:	beq	2dc1c <fts_children@@Base+0x1850>
   2db24:	strb	r6, [sp, #4]
   2db28:	bl	12284 <__ctype_get_mb_cur_max@plt>
   2db2c:	mov	r1, r0
   2db30:	mov	r0, r4
   2db34:	bl	28890 <__assert_fail@plt+0x161bc>
   2db38:	mov	r1, r4
   2db3c:	add	r3, sp, #8
   2db40:	mov	r2, r0
   2db44:	add	r0, sp, #32
   2db48:	bl	122c0 <mbrtowc@plt>
   2db4c:	cmn	r0, #1
   2db50:	str	r0, [sp, #24]
   2db54:	beq	2dba8 <fts_children@@Base+0x17dc>
   2db58:	cmn	r0, #2
   2db5c:	beq	2dbf8 <fts_children@@Base+0x182c>
   2db60:	cmp	r0, #0
   2db64:	beq	2dbb8 <fts_children@@Base+0x17ec>
   2db68:	ldr	r4, [sp, #32]
   2db6c:	add	r0, sp, #8
   2db70:	strb	r6, [sp, #28]
   2db74:	bl	12128 <mbsinit@plt>
   2db78:	strb	r6, [sp, #16]
   2db7c:	cmp	r0, #0
   2db80:	strbne	r7, [sp, #4]
   2db84:	cmp	r4, #0
   2db88:	beq	2daf8 <fts_children@@Base+0x172c>
   2db8c:	ldr	r4, [sp, #20]
   2db90:	ldr	r3, [sp, #24]
   2db94:	add	r5, r5, #1
   2db98:	strb	r7, [sp, #16]
   2db9c:	add	r4, r4, r3
   2dba0:	str	r4, [sp, #20]
   2dba4:	b	2dab4 <fts_children@@Base+0x16e8>
   2dba8:	str	r6, [sp, #24]
   2dbac:	strb	r7, [sp, #28]
   2dbb0:	ldr	r4, [sp, #20]
   2dbb4:	b	2db90 <fts_children@@Base+0x17c4>
   2dbb8:	ldr	r4, [sp, #20]
   2dbbc:	str	r6, [sp, #24]
   2dbc0:	ldrb	r3, [r4]
   2dbc4:	cmp	r3, #0
   2dbc8:	bne	2dc40 <fts_children@@Base+0x1874>
   2dbcc:	ldr	r4, [sp, #32]
   2dbd0:	cmp	r4, #0
   2dbd4:	beq	2db6c <fts_children@@Base+0x17a0>
   2dbd8:	movw	r0, #15388	; 0x3c1c
   2dbdc:	movw	r1, #15352	; 0x3bf8
   2dbe0:	movw	r3, #20640	; 0x50a0
   2dbe4:	movt	r0, #3
   2dbe8:	movt	r1, #3
   2dbec:	mov	r2, #176	; 0xb0
   2dbf0:	movt	r3, #3
   2dbf4:	bl	126d4 <__assert_fail@plt>
   2dbf8:	ldr	r4, [sp, #20]
   2dbfc:	mov	r0, r4
   2dc00:	bl	123d4 <strlen@plt>
   2dc04:	strb	r7, [sp, #28]
   2dc08:	str	r0, [sp, #24]
   2dc0c:	b	2db90 <fts_children@@Base+0x17c4>
   2dc10:	mov	r0, sl
   2dc14:	bl	123d4 <strlen@plt>
   2dc18:	b	2dafc <fts_children@@Base+0x1730>
   2dc1c:	movw	r0, #15328	; 0x3be0
   2dc20:	movw	r1, #15352	; 0x3bf8
   2dc24:	movw	r3, #20640	; 0x50a0
   2dc28:	movt	r0, #3
   2dc2c:	movt	r1, #3
   2dc30:	mov	r2, #147	; 0x93
   2dc34:	movt	r3, #3
   2dc38:	bl	126d4 <__assert_fail@plt>
   2dc3c:	bl	12188 <__stack_chk_fail@plt>
   2dc40:	movw	r0, #15364	; 0x3c04
   2dc44:	movw	r1, #15352	; 0x3bf8
   2dc48:	movw	r3, #20640	; 0x50a0
   2dc4c:	movt	r0, #3
   2dc50:	movt	r1, #3
   2dc54:	mov	r2, #175	; 0xaf
   2dc58:	movt	r3, #3
   2dc5c:	bl	126d4 <__assert_fail@plt>
   2dc60:	push	{r2, r3}
   2dc64:	push	{r4, lr}
   2dc68:	sub	sp, sp, #8
   2dc6c:	movw	r4, #26008	; 0x6598
   2dc70:	movt	r4, #4
   2dc74:	ldr	r2, [sp, #16]
   2dc78:	ldr	ip, [r4]
   2dc7c:	ands	r3, r2, #64	; 0x40
   2dc80:	ldrne	r3, [sp, #20]
   2dc84:	str	ip, [sp, #4]
   2dc88:	addne	ip, sp, #20
   2dc8c:	strne	ip, [sp]
   2dc90:	bl	123f8 <openat64@plt>
   2dc94:	bl	288c8 <__assert_fail@plt+0x161f4>
   2dc98:	ldr	r2, [sp, #4]
   2dc9c:	ldr	r3, [r4]
   2dca0:	cmp	r2, r3
   2dca4:	bne	2dcb8 <fts_children@@Base+0x18ec>
   2dca8:	add	sp, sp, #8
   2dcac:	pop	{r4, lr}
   2dcb0:	add	sp, sp, #8
   2dcb4:	bx	lr
   2dcb8:	bl	12188 <__stack_chk_fail@plt>
   2dcbc:	push	{r3, r4, r5, lr}
   2dcc0:	mov	r5, r1
   2dcc4:	bl	123bc <getfilecon@plt>
   2dcc8:	subs	r4, r0, #0
   2dccc:	beq	2dd18 <fts_children@@Base+0x194c>
   2dcd0:	cmp	r4, #10
   2dcd4:	beq	2dce0 <fts_children@@Base+0x1914>
   2dcd8:	mov	r0, r4
   2dcdc:	pop	{r3, r4, r5, pc}
   2dce0:	ldr	r5, [r5]
   2dce4:	movw	r1, #20660	; 0x50b4
   2dce8:	movt	r1, #3
   2dcec:	mov	r0, r5
   2dcf0:	bl	1205c <strcmp@plt>
   2dcf4:	cmp	r0, #0
   2dcf8:	bne	2dcd8 <fts_children@@Base+0x190c>
   2dcfc:	mov	r0, r5
   2dd00:	mvn	r4, #0
   2dd04:	bl	125f0 <freecon@plt>
   2dd08:	bl	12434 <__errno_location@plt>
   2dd0c:	mov	r3, #61	; 0x3d
   2dd10:	str	r3, [r0]
   2dd14:	b	2dcd8 <fts_children@@Base+0x190c>
   2dd18:	bl	12434 <__errno_location@plt>
   2dd1c:	mvn	r4, #0
   2dd20:	mov	r3, #95	; 0x5f
   2dd24:	str	r3, [r0]
   2dd28:	b	2dcd8 <fts_children@@Base+0x190c>
   2dd2c:	push	{r3, r4, r5, lr}
   2dd30:	mov	r5, r1
   2dd34:	bl	12314 <lgetfilecon@plt>
   2dd38:	subs	r4, r0, #0
   2dd3c:	beq	2dd88 <fts_children@@Base+0x19bc>
   2dd40:	cmp	r4, #10
   2dd44:	beq	2dd50 <fts_children@@Base+0x1984>
   2dd48:	mov	r0, r4
   2dd4c:	pop	{r3, r4, r5, pc}
   2dd50:	ldr	r5, [r5]
   2dd54:	movw	r1, #20660	; 0x50b4
   2dd58:	movt	r1, #3
   2dd5c:	mov	r0, r5
   2dd60:	bl	1205c <strcmp@plt>
   2dd64:	cmp	r0, #0
   2dd68:	bne	2dd48 <fts_children@@Base+0x197c>
   2dd6c:	mov	r0, r5
   2dd70:	mvn	r4, #0
   2dd74:	bl	125f0 <freecon@plt>
   2dd78:	bl	12434 <__errno_location@plt>
   2dd7c:	mov	r3, #61	; 0x3d
   2dd80:	str	r3, [r0]
   2dd84:	b	2dd48 <fts_children@@Base+0x197c>
   2dd88:	bl	12434 <__errno_location@plt>
   2dd8c:	mvn	r4, #0
   2dd90:	mov	r3, #95	; 0x5f
   2dd94:	str	r3, [r0]
   2dd98:	b	2dd48 <fts_children@@Base+0x197c>
   2dd9c:	push	{r3, r4, r5, lr}
   2dda0:	mov	r5, r1
   2dda4:	bl	121b8 <fgetfilecon@plt>
   2dda8:	subs	r4, r0, #0
   2ddac:	beq	2ddf8 <fts_children@@Base+0x1a2c>
   2ddb0:	cmp	r4, #10
   2ddb4:	beq	2ddc0 <fts_children@@Base+0x19f4>
   2ddb8:	mov	r0, r4
   2ddbc:	pop	{r3, r4, r5, pc}
   2ddc0:	ldr	r5, [r5]
   2ddc4:	movw	r1, #20660	; 0x50b4
   2ddc8:	movt	r1, #3
   2ddcc:	mov	r0, r5
   2ddd0:	bl	1205c <strcmp@plt>
   2ddd4:	cmp	r0, #0
   2ddd8:	bne	2ddb8 <fts_children@@Base+0x19ec>
   2dddc:	mov	r0, r5
   2dde0:	mvn	r4, #0
   2dde4:	bl	125f0 <freecon@plt>
   2dde8:	bl	12434 <__errno_location@plt>
   2ddec:	mov	r3, #61	; 0x3d
   2ddf0:	str	r3, [r0]
   2ddf4:	b	2ddb8 <fts_children@@Base+0x19ec>
   2ddf8:	bl	12434 <__errno_location@plt>
   2ddfc:	mvn	r4, #0
   2de00:	mov	r3, #95	; 0x5f
   2de04:	str	r3, [r0]
   2de08:	b	2ddb8 <fts_children@@Base+0x19ec>
   2de0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2de10:	movw	r4, #26008	; 0x6598
   2de14:	movt	r4, #4
   2de18:	ldrb	r3, [r2]
   2de1c:	mov	r6, r2
   2de20:	sub	sp, sp, #48	; 0x30
   2de24:	ldr	r2, [r4]
   2de28:	cmp	r3, #0
   2de2c:	mov	r5, r0
   2de30:	strbeq	r3, [r0]
   2de34:	mov	r9, r1
   2de38:	moveq	r0, r0
   2de3c:	str	r2, [sp, #44]	; 0x2c
   2de40:	beq	2de98 <fts_children@@Base+0x1acc>
   2de44:	movw	r7, #29324	; 0x728c
   2de48:	movt	r7, #4
   2de4c:	ldr	r8, [r7]
   2de50:	cmp	r8, #0
   2de54:	beq	2dec4 <fts_children@@Base+0x1af8>
   2de58:	cmp	r8, #0
   2de5c:	blt	2debc <fts_children@@Base+0x1af0>
   2de60:	mov	r0, r6
   2de64:	bl	123d4 <strlen@plt>
   2de68:	add	r0, r0, #27
   2de6c:	cmp	r0, #4032	; 0xfc0
   2de70:	bhi	2deb0 <fts_children@@Base+0x1ae4>
   2de74:	str	r9, [sp]
   2de78:	movw	r3, #20672	; 0x50c0
   2de7c:	str	r6, [sp, #4]
   2de80:	movt	r3, #3
   2de84:	mov	r0, r5
   2de88:	mov	r1, #1
   2de8c:	mvn	r2, #0
   2de90:	bl	12440 <__sprintf_chk@plt>
   2de94:	mov	r0, r5
   2de98:	ldr	r2, [sp, #44]	; 0x2c
   2de9c:	ldr	r3, [r4]
   2dea0:	cmp	r2, r3
   2dea4:	bne	2df40 <fts_children@@Base+0x1b74>
   2dea8:	add	sp, sp, #48	; 0x30
   2deac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2deb0:	bl	1232c <malloc@plt>
   2deb4:	subs	r5, r0, #0
   2deb8:	bne	2de74 <fts_children@@Base+0x1aa8>
   2debc:	mov	r0, #0
   2dec0:	b	2de98 <fts_children@@Base+0x1acc>
   2dec4:	movw	r0, #14804	; 0x39d4
   2dec8:	mov	r1, #18688	; 0x4900
   2decc:	movt	r0, #3
   2ded0:	bl	122fc <open64@plt>
   2ded4:	subs	sl, r0, #0
   2ded8:	blt	2df30 <fts_children@@Base+0x1b64>
   2dedc:	mov	r1, #1
   2dee0:	str	sl, [sp]
   2dee4:	movw	r2, #20692	; 0x50d4
   2dee8:	movw	r3, #20672	; 0x50c0
   2deec:	movt	r2, #3
   2def0:	movt	r3, #3
   2def4:	str	r2, [sp, #4]
   2def8:	add	r0, sp, #12
   2defc:	mov	r2, #32
   2df00:	bl	12440 <__sprintf_chk@plt>
   2df04:	mov	r1, r8
   2df08:	add	r0, sp, #12
   2df0c:	bl	124f4 <access@plt>
   2df10:	cmp	r0, #0
   2df14:	mov	r0, sl
   2df18:	moveq	r3, #1
   2df1c:	mvnne	r3, #0
   2df20:	str	r3, [r7]
   2df24:	bl	12680 <close@plt>
   2df28:	ldr	r8, [r7]
   2df2c:	b	2de58 <fts_children@@Base+0x1a8c>
   2df30:	mvn	r3, #0
   2df34:	mov	r0, r8
   2df38:	str	r3, [r7]
   2df3c:	b	2de98 <fts_children@@Base+0x1acc>
   2df40:	bl	12188 <__stack_chk_fail@plt>
   2df44:	subs	r2, r1, #1
   2df48:	bxeq	lr
   2df4c:	bcc	2e124 <fts_children@@Base+0x1d58>
   2df50:	cmp	r0, r1
   2df54:	bls	2e108 <fts_children@@Base+0x1d3c>
   2df58:	tst	r1, r2
   2df5c:	beq	2e114 <fts_children@@Base+0x1d48>
   2df60:	clz	r3, r0
   2df64:	clz	r2, r1
   2df68:	sub	r3, r2, r3
   2df6c:	rsbs	r3, r3, #31
   2df70:	addne	r3, r3, r3, lsl #1
   2df74:	mov	r2, #0
   2df78:	addne	pc, pc, r3, lsl #2
   2df7c:	nop	{0}
   2df80:	cmp	r0, r1, lsl #31
   2df84:	adc	r2, r2, r2
   2df88:	subcs	r0, r0, r1, lsl #31
   2df8c:	cmp	r0, r1, lsl #30
   2df90:	adc	r2, r2, r2
   2df94:	subcs	r0, r0, r1, lsl #30
   2df98:	cmp	r0, r1, lsl #29
   2df9c:	adc	r2, r2, r2
   2dfa0:	subcs	r0, r0, r1, lsl #29
   2dfa4:	cmp	r0, r1, lsl #28
   2dfa8:	adc	r2, r2, r2
   2dfac:	subcs	r0, r0, r1, lsl #28
   2dfb0:	cmp	r0, r1, lsl #27
   2dfb4:	adc	r2, r2, r2
   2dfb8:	subcs	r0, r0, r1, lsl #27
   2dfbc:	cmp	r0, r1, lsl #26
   2dfc0:	adc	r2, r2, r2
   2dfc4:	subcs	r0, r0, r1, lsl #26
   2dfc8:	cmp	r0, r1, lsl #25
   2dfcc:	adc	r2, r2, r2
   2dfd0:	subcs	r0, r0, r1, lsl #25
   2dfd4:	cmp	r0, r1, lsl #24
   2dfd8:	adc	r2, r2, r2
   2dfdc:	subcs	r0, r0, r1, lsl #24
   2dfe0:	cmp	r0, r1, lsl #23
   2dfe4:	adc	r2, r2, r2
   2dfe8:	subcs	r0, r0, r1, lsl #23
   2dfec:	cmp	r0, r1, lsl #22
   2dff0:	adc	r2, r2, r2
   2dff4:	subcs	r0, r0, r1, lsl #22
   2dff8:	cmp	r0, r1, lsl #21
   2dffc:	adc	r2, r2, r2
   2e000:	subcs	r0, r0, r1, lsl #21
   2e004:	cmp	r0, r1, lsl #20
   2e008:	adc	r2, r2, r2
   2e00c:	subcs	r0, r0, r1, lsl #20
   2e010:	cmp	r0, r1, lsl #19
   2e014:	adc	r2, r2, r2
   2e018:	subcs	r0, r0, r1, lsl #19
   2e01c:	cmp	r0, r1, lsl #18
   2e020:	adc	r2, r2, r2
   2e024:	subcs	r0, r0, r1, lsl #18
   2e028:	cmp	r0, r1, lsl #17
   2e02c:	adc	r2, r2, r2
   2e030:	subcs	r0, r0, r1, lsl #17
   2e034:	cmp	r0, r1, lsl #16
   2e038:	adc	r2, r2, r2
   2e03c:	subcs	r0, r0, r1, lsl #16
   2e040:	cmp	r0, r1, lsl #15
   2e044:	adc	r2, r2, r2
   2e048:	subcs	r0, r0, r1, lsl #15
   2e04c:	cmp	r0, r1, lsl #14
   2e050:	adc	r2, r2, r2
   2e054:	subcs	r0, r0, r1, lsl #14
   2e058:	cmp	r0, r1, lsl #13
   2e05c:	adc	r2, r2, r2
   2e060:	subcs	r0, r0, r1, lsl #13
   2e064:	cmp	r0, r1, lsl #12
   2e068:	adc	r2, r2, r2
   2e06c:	subcs	r0, r0, r1, lsl #12
   2e070:	cmp	r0, r1, lsl #11
   2e074:	adc	r2, r2, r2
   2e078:	subcs	r0, r0, r1, lsl #11
   2e07c:	cmp	r0, r1, lsl #10
   2e080:	adc	r2, r2, r2
   2e084:	subcs	r0, r0, r1, lsl #10
   2e088:	cmp	r0, r1, lsl #9
   2e08c:	adc	r2, r2, r2
   2e090:	subcs	r0, r0, r1, lsl #9
   2e094:	cmp	r0, r1, lsl #8
   2e098:	adc	r2, r2, r2
   2e09c:	subcs	r0, r0, r1, lsl #8
   2e0a0:	cmp	r0, r1, lsl #7
   2e0a4:	adc	r2, r2, r2
   2e0a8:	subcs	r0, r0, r1, lsl #7
   2e0ac:	cmp	r0, r1, lsl #6
   2e0b0:	adc	r2, r2, r2
   2e0b4:	subcs	r0, r0, r1, lsl #6
   2e0b8:	cmp	r0, r1, lsl #5
   2e0bc:	adc	r2, r2, r2
   2e0c0:	subcs	r0, r0, r1, lsl #5
   2e0c4:	cmp	r0, r1, lsl #4
   2e0c8:	adc	r2, r2, r2
   2e0cc:	subcs	r0, r0, r1, lsl #4
   2e0d0:	cmp	r0, r1, lsl #3
   2e0d4:	adc	r2, r2, r2
   2e0d8:	subcs	r0, r0, r1, lsl #3
   2e0dc:	cmp	r0, r1, lsl #2
   2e0e0:	adc	r2, r2, r2
   2e0e4:	subcs	r0, r0, r1, lsl #2
   2e0e8:	cmp	r0, r1, lsl #1
   2e0ec:	adc	r2, r2, r2
   2e0f0:	subcs	r0, r0, r1, lsl #1
   2e0f4:	cmp	r0, r1
   2e0f8:	adc	r2, r2, r2
   2e0fc:	subcs	r0, r0, r1
   2e100:	mov	r0, r2
   2e104:	bx	lr
   2e108:	moveq	r0, #1
   2e10c:	movne	r0, #0
   2e110:	bx	lr
   2e114:	clz	r2, r1
   2e118:	rsb	r2, r2, #31
   2e11c:	lsr	r0, r0, r2
   2e120:	bx	lr
   2e124:	cmp	r0, #0
   2e128:	mvnne	r0, #0
   2e12c:	b	2e58c <fts_children@@Base+0x21c0>
   2e130:	cmp	r1, #0
   2e134:	beq	2e124 <fts_children@@Base+0x1d58>
   2e138:	push	{r0, r1, lr}
   2e13c:	bl	2df44 <fts_children@@Base+0x1b78>
   2e140:	pop	{r1, r2, lr}
   2e144:	mul	r3, r2, r0
   2e148:	sub	r1, r1, r3
   2e14c:	bx	lr
   2e150:	eor	r1, r1, #-2147483648	; 0x80000000
   2e154:	b	2e15c <fts_children@@Base+0x1d90>
   2e158:	eor	r3, r3, #-2147483648	; 0x80000000
   2e15c:	push	{r4, r5, lr}
   2e160:	lsl	r4, r1, #1
   2e164:	lsl	r5, r3, #1
   2e168:	teq	r4, r5
   2e16c:	teqeq	r0, r2
   2e170:	orrsne	ip, r4, r0
   2e174:	orrsne	ip, r5, r2
   2e178:	mvnsne	ip, r4, asr #21
   2e17c:	mvnsne	ip, r5, asr #21
   2e180:	beq	2e36c <fts_children@@Base+0x1fa0>
   2e184:	lsr	r4, r4, #21
   2e188:	rsbs	r5, r4, r5, lsr #21
   2e18c:	rsblt	r5, r5, #0
   2e190:	ble	2e1b0 <fts_children@@Base+0x1de4>
   2e194:	add	r4, r4, r5
   2e198:	eor	r2, r0, r2
   2e19c:	eor	r3, r1, r3
   2e1a0:	eor	r0, r2, r0
   2e1a4:	eor	r1, r3, r1
   2e1a8:	eor	r2, r0, r2
   2e1ac:	eor	r3, r1, r3
   2e1b0:	cmp	r5, #54	; 0x36
   2e1b4:	pophi	{r4, r5, pc}
   2e1b8:	tst	r1, #-2147483648	; 0x80000000
   2e1bc:	lsl	r1, r1, #12
   2e1c0:	mov	ip, #1048576	; 0x100000
   2e1c4:	orr	r1, ip, r1, lsr #12
   2e1c8:	beq	2e1d4 <fts_children@@Base+0x1e08>
   2e1cc:	rsbs	r0, r0, #0
   2e1d0:	rsc	r1, r1, #0
   2e1d4:	tst	r3, #-2147483648	; 0x80000000
   2e1d8:	lsl	r3, r3, #12
   2e1dc:	orr	r3, ip, r3, lsr #12
   2e1e0:	beq	2e1ec <fts_children@@Base+0x1e20>
   2e1e4:	rsbs	r2, r2, #0
   2e1e8:	rsc	r3, r3, #0
   2e1ec:	teq	r4, r5
   2e1f0:	beq	2e354 <fts_children@@Base+0x1f88>
   2e1f4:	sub	r4, r4, #1
   2e1f8:	rsbs	lr, r5, #32
   2e1fc:	blt	2e218 <fts_children@@Base+0x1e4c>
   2e200:	lsl	ip, r2, lr
   2e204:	adds	r0, r0, r2, lsr r5
   2e208:	adc	r1, r1, #0
   2e20c:	adds	r0, r0, r3, lsl lr
   2e210:	adcs	r1, r1, r3, asr r5
   2e214:	b	2e234 <fts_children@@Base+0x1e68>
   2e218:	sub	r5, r5, #32
   2e21c:	add	lr, lr, #32
   2e220:	cmp	r2, #1
   2e224:	lsl	ip, r3, lr
   2e228:	orrcs	ip, ip, #2
   2e22c:	adds	r0, r0, r3, asr r5
   2e230:	adcs	r1, r1, r3, asr #31
   2e234:	and	r5, r1, #-2147483648	; 0x80000000
   2e238:	bpl	2e248 <fts_children@@Base+0x1e7c>
   2e23c:	rsbs	ip, ip, #0
   2e240:	rscs	r0, r0, #0
   2e244:	rsc	r1, r1, #0
   2e248:	cmp	r1, #1048576	; 0x100000
   2e24c:	bcc	2e28c <fts_children@@Base+0x1ec0>
   2e250:	cmp	r1, #2097152	; 0x200000
   2e254:	bcc	2e274 <fts_children@@Base+0x1ea8>
   2e258:	lsrs	r1, r1, #1
   2e25c:	rrxs	r0, r0
   2e260:	rrx	ip, ip
   2e264:	add	r4, r4, #1
   2e268:	lsl	r2, r4, #21
   2e26c:	cmn	r2, #4194304	; 0x400000
   2e270:	bcs	2e3cc <fts_children@@Base+0x2000>
   2e274:	cmp	ip, #-2147483648	; 0x80000000
   2e278:	lsrseq	ip, r0, #1
   2e27c:	adcs	r0, r0, #0
   2e280:	adc	r1, r1, r4, lsl #20
   2e284:	orr	r1, r1, r5
   2e288:	pop	{r4, r5, pc}
   2e28c:	lsls	ip, ip, #1
   2e290:	adcs	r0, r0, r0
   2e294:	adc	r1, r1, r1
   2e298:	tst	r1, #1048576	; 0x100000
   2e29c:	sub	r4, r4, #1
   2e2a0:	bne	2e274 <fts_children@@Base+0x1ea8>
   2e2a4:	teq	r1, #0
   2e2a8:	moveq	r1, r0
   2e2ac:	moveq	r0, #0
   2e2b0:	clz	r3, r1
   2e2b4:	addeq	r3, r3, #32
   2e2b8:	sub	r3, r3, #11
   2e2bc:	subs	r2, r3, #32
   2e2c0:	bge	2e2e4 <fts_children@@Base+0x1f18>
   2e2c4:	adds	r2, r2, #12
   2e2c8:	ble	2e2e0 <fts_children@@Base+0x1f14>
   2e2cc:	add	ip, r2, #20
   2e2d0:	rsb	r2, r2, #12
   2e2d4:	lsl	r0, r1, ip
   2e2d8:	lsr	r1, r1, r2
   2e2dc:	b	2e2f4 <fts_children@@Base+0x1f28>
   2e2e0:	add	r2, r2, #20
   2e2e4:	rsble	ip, r2, #32
   2e2e8:	lsl	r1, r1, r2
   2e2ec:	orrle	r1, r1, r0, lsr ip
   2e2f0:	lslle	r0, r0, r2
   2e2f4:	subs	r4, r4, r3
   2e2f8:	addge	r1, r1, r4, lsl #20
   2e2fc:	orrge	r1, r1, r5
   2e300:	popge	{r4, r5, pc}
   2e304:	mvn	r4, r4
   2e308:	subs	r4, r4, #31
   2e30c:	bge	2e348 <fts_children@@Base+0x1f7c>
   2e310:	adds	r4, r4, #12
   2e314:	bgt	2e330 <fts_children@@Base+0x1f64>
   2e318:	add	r4, r4, #20
   2e31c:	rsb	r2, r4, #32
   2e320:	lsr	r0, r0, r4
   2e324:	orr	r0, r0, r1, lsl r2
   2e328:	orr	r1, r5, r1, lsr r4
   2e32c:	pop	{r4, r5, pc}
   2e330:	rsb	r4, r4, #12
   2e334:	rsb	r2, r4, #32
   2e338:	lsr	r0, r0, r2
   2e33c:	orr	r0, r0, r1, lsl r4
   2e340:	mov	r1, r5
   2e344:	pop	{r4, r5, pc}
   2e348:	lsr	r0, r1, r4
   2e34c:	mov	r1, r5
   2e350:	pop	{r4, r5, pc}
   2e354:	teq	r4, #0
   2e358:	eor	r3, r3, #1048576	; 0x100000
   2e35c:	eoreq	r1, r1, #1048576	; 0x100000
   2e360:	addeq	r4, r4, #1
   2e364:	subne	r5, r5, #1
   2e368:	b	2e1f4 <fts_children@@Base+0x1e28>
   2e36c:	mvns	ip, r4, asr #21
   2e370:	mvnsne	ip, r5, asr #21
   2e374:	beq	2e3dc <fts_children@@Base+0x2010>
   2e378:	teq	r4, r5
   2e37c:	teqeq	r0, r2
   2e380:	beq	2e394 <fts_children@@Base+0x1fc8>
   2e384:	orrs	ip, r4, r0
   2e388:	moveq	r1, r3
   2e38c:	moveq	r0, r2
   2e390:	pop	{r4, r5, pc}
   2e394:	teq	r1, r3
   2e398:	movne	r1, #0
   2e39c:	movne	r0, #0
   2e3a0:	popne	{r4, r5, pc}
   2e3a4:	lsrs	ip, r4, #21
   2e3a8:	bne	2e3bc <fts_children@@Base+0x1ff0>
   2e3ac:	lsls	r0, r0, #1
   2e3b0:	adcs	r1, r1, r1
   2e3b4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2e3b8:	pop	{r4, r5, pc}
   2e3bc:	adds	r4, r4, #4194304	; 0x400000
   2e3c0:	addcc	r1, r1, #1048576	; 0x100000
   2e3c4:	popcc	{r4, r5, pc}
   2e3c8:	and	r5, r1, #-2147483648	; 0x80000000
   2e3cc:	orr	r1, r5, #2130706432	; 0x7f000000
   2e3d0:	orr	r1, r1, #15728640	; 0xf00000
   2e3d4:	mov	r0, #0
   2e3d8:	pop	{r4, r5, pc}
   2e3dc:	mvns	ip, r4, asr #21
   2e3e0:	movne	r1, r3
   2e3e4:	movne	r0, r2
   2e3e8:	mvnseq	ip, r5, asr #21
   2e3ec:	movne	r3, r1
   2e3f0:	movne	r2, r0
   2e3f4:	orrs	r4, r0, r1, lsl #12
   2e3f8:	orrseq	r5, r2, r3, lsl #12
   2e3fc:	teqeq	r1, r3
   2e400:	orrne	r1, r1, #524288	; 0x80000
   2e404:	pop	{r4, r5, pc}
   2e408:	teq	r0, #0
   2e40c:	moveq	r1, #0
   2e410:	bxeq	lr
   2e414:	push	{r4, r5, lr}
   2e418:	mov	r4, #1024	; 0x400
   2e41c:	add	r4, r4, #50	; 0x32
   2e420:	mov	r5, #0
   2e424:	mov	r1, #0
   2e428:	b	2e2a4 <fts_children@@Base+0x1ed8>
   2e42c:	teq	r0, #0
   2e430:	moveq	r1, #0
   2e434:	bxeq	lr
   2e438:	push	{r4, r5, lr}
   2e43c:	mov	r4, #1024	; 0x400
   2e440:	add	r4, r4, #50	; 0x32
   2e444:	ands	r5, r0, #-2147483648	; 0x80000000
   2e448:	rsbmi	r0, r0, #0
   2e44c:	mov	r1, #0
   2e450:	b	2e2a4 <fts_children@@Base+0x1ed8>
   2e454:	lsls	r2, r0, #1
   2e458:	asr	r1, r2, #3
   2e45c:	rrx	r1, r1
   2e460:	lsl	r0, r2, #28
   2e464:	andsne	r3, r2, #-16777216	; 0xff000000
   2e468:	teqne	r3, #-16777216	; 0xff000000
   2e46c:	eorne	r1, r1, #939524096	; 0x38000000
   2e470:	bxne	lr
   2e474:	teq	r2, #0
   2e478:	teqne	r3, #-16777216	; 0xff000000
   2e47c:	bxeq	lr
   2e480:	push	{r4, r5, lr}
   2e484:	mov	r4, #896	; 0x380
   2e488:	and	r5, r1, #-2147483648	; 0x80000000
   2e48c:	bic	r1, r1, #-2147483648	; 0x80000000
   2e490:	b	2e2a4 <fts_children@@Base+0x1ed8>
   2e494:	orrs	r2, r0, r1
   2e498:	bxeq	lr
   2e49c:	push	{r4, r5, lr}
   2e4a0:	mov	r5, #0
   2e4a4:	b	2e4c4 <fts_children@@Base+0x20f8>
   2e4a8:	orrs	r2, r0, r1
   2e4ac:	bxeq	lr
   2e4b0:	push	{r4, r5, lr}
   2e4b4:	ands	r5, r1, #-2147483648	; 0x80000000
   2e4b8:	bpl	2e4c4 <fts_children@@Base+0x20f8>
   2e4bc:	rsbs	r0, r0, #0
   2e4c0:	rsc	r1, r1, #0
   2e4c4:	mov	r4, #1024	; 0x400
   2e4c8:	add	r4, r4, #50	; 0x32
   2e4cc:	lsrs	ip, r1, #22
   2e4d0:	beq	2e248 <fts_children@@Base+0x1e7c>
   2e4d4:	mov	r2, #3
   2e4d8:	lsrs	ip, ip, #3
   2e4dc:	addne	r2, r2, #3
   2e4e0:	lsrs	ip, ip, #3
   2e4e4:	addne	r2, r2, #3
   2e4e8:	add	r2, r2, ip, lsr #3
   2e4ec:	rsb	r3, r2, #32
   2e4f0:	lsl	ip, r0, r3
   2e4f4:	lsr	r0, r0, r2
   2e4f8:	orr	r0, r0, r1, lsl r3
   2e4fc:	lsr	r1, r1, r2
   2e500:	add	r4, r4, r2
   2e504:	b	2e248 <fts_children@@Base+0x1e7c>
   2e508:	cmp	r3, #0
   2e50c:	cmpeq	r2, #0
   2e510:	bne	2e534 <fts_children@@Base+0x2168>
   2e514:	cmp	r1, #0
   2e518:	movlt	r1, #-2147483648	; 0x80000000
   2e51c:	movlt	r0, #0
   2e520:	blt	2e530 <fts_children@@Base+0x2164>
   2e524:	cmpeq	r0, #0
   2e528:	mvnne	r1, #-2147483648	; 0x80000000
   2e52c:	mvnne	r0, #0
   2e530:	b	2e58c <fts_children@@Base+0x21c0>
   2e534:	sub	sp, sp, #8
   2e538:	push	{sp, lr}
   2e53c:	bl	2e5e8 <fts_children@@Base+0x221c>
   2e540:	ldr	lr, [sp, #4]
   2e544:	add	sp, sp, #8
   2e548:	pop	{r2, r3}
   2e54c:	bx	lr
   2e550:	cmp	r3, #0
   2e554:	cmpeq	r2, #0
   2e558:	bne	2e570 <fts_children@@Base+0x21a4>
   2e55c:	cmp	r1, #0
   2e560:	cmpeq	r0, #0
   2e564:	mvnne	r1, #0
   2e568:	mvnne	r0, #0
   2e56c:	b	2e58c <fts_children@@Base+0x21c0>
   2e570:	sub	sp, sp, #8
   2e574:	push	{sp, lr}
   2e578:	bl	2e624 <fts_children@@Base+0x2258>
   2e57c:	ldr	lr, [sp, #4]
   2e580:	add	sp, sp, #8
   2e584:	pop	{r2, r3}
   2e588:	bx	lr
   2e58c:	push	{r1, lr}
   2e590:	mov	r0, #8
   2e594:	bl	1202c <raise@plt>
   2e598:	pop	{r1, pc}
   2e59c:	andeq	r0, r0, r0
   2e5a0:	vmov	d7, r0, r1
   2e5a4:	vldr	d5, [pc, #44]	; 2e5d8 <fts_children@@Base+0x220c>
   2e5a8:	vldr	d6, [pc, #48]	; 2e5e0 <fts_children@@Base+0x2214>
   2e5ac:	mov	r0, #0
   2e5b0:	vmul.f64	d5, d7, d5
   2e5b4:	vcvt.u32.f64	s9, d5
   2e5b8:	vcvt.f64.u32	d5, s9
   2e5bc:	vmov	r1, s9
   2e5c0:	vmls.f64	d7, d5, d6
   2e5c4:	vcvt.u32.f64	s14, d7
   2e5c8:	vmov	r3, s14
   2e5cc:	orr	r0, r0, r3
   2e5d0:	bx	lr
   2e5d4:	nop	{0}
   2e5d8:	andeq	r0, r0, r0
   2e5dc:	ldclcc	0, cr0, [r0]
   2e5e0:	andeq	r0, r0, r0
   2e5e4:	mvnsmi	r0, r0
   2e5e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e5ec:	mov	r8, r2
   2e5f0:	mov	r6, r0
   2e5f4:	mov	r7, r1
   2e5f8:	mov	sl, r3
   2e5fc:	ldr	r9, [sp, #32]
   2e600:	bl	2e660 <fts_children@@Base+0x2294>
   2e604:	umull	r4, r5, r8, r0
   2e608:	mul	r8, r8, r1
   2e60c:	mla	r2, r0, sl, r8
   2e610:	add	r5, r2, r5
   2e614:	subs	r4, r6, r4
   2e618:	sbc	r5, r7, r5
   2e61c:	strd	r4, [r9]
   2e620:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e624:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2e628:	mov	r8, r2
   2e62c:	mov	r6, r0
   2e630:	mov	r7, r1
   2e634:	mov	r5, r3
   2e638:	ldr	r9, [sp, #32]
   2e63c:	bl	2eaec <fts_children@@Base+0x2720>
   2e640:	mul	r3, r0, r5
   2e644:	umull	r4, r5, r0, r8
   2e648:	mla	r8, r8, r1, r3
   2e64c:	add	r5, r8, r5
   2e650:	subs	r4, r6, r4
   2e654:	sbc	r5, r7, r5
   2e658:	strd	r4, [r9]
   2e65c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2e660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e664:	rsbs	r4, r0, #0
   2e668:	rsc	r5, r1, #0
   2e66c:	cmp	r1, #0
   2e670:	mvn	r6, #0
   2e674:	sub	sp, sp, #12
   2e678:	movge	r4, r0
   2e67c:	movge	r5, r1
   2e680:	movge	r6, #0
   2e684:	cmp	r3, #0
   2e688:	blt	2e8c0 <fts_children@@Base+0x24f4>
   2e68c:	cmp	r3, #0
   2e690:	mov	sl, r4
   2e694:	mov	ip, r5
   2e698:	mov	r0, r2
   2e69c:	mov	r1, r3
   2e6a0:	mov	r8, r2
   2e6a4:	mov	r7, r4
   2e6a8:	mov	r9, r5
   2e6ac:	bne	2e7a4 <fts_children@@Base+0x23d8>
   2e6b0:	cmp	r2, r5
   2e6b4:	bls	2e7e0 <fts_children@@Base+0x2414>
   2e6b8:	clz	r3, r2
   2e6bc:	cmp	r3, #0
   2e6c0:	rsbne	r2, r3, #32
   2e6c4:	lslne	r8, r0, r3
   2e6c8:	lsrne	r2, r4, r2
   2e6cc:	lslne	r7, r4, r3
   2e6d0:	orrne	r9, r2, r5, lsl r3
   2e6d4:	lsr	r4, r8, #16
   2e6d8:	uxth	sl, r8
   2e6dc:	mov	r1, r4
   2e6e0:	mov	r0, r9
   2e6e4:	bl	2df44 <fts_children@@Base+0x1b78>
   2e6e8:	mov	r1, r4
   2e6ec:	mov	fp, r0
   2e6f0:	mov	r0, r9
   2e6f4:	bl	2e130 <fts_children@@Base+0x1d64>
   2e6f8:	mul	r0, sl, fp
   2e6fc:	lsr	r2, r7, #16
   2e700:	orr	r1, r2, r1, lsl #16
   2e704:	cmp	r0, r1
   2e708:	bls	2e72c <fts_children@@Base+0x2360>
   2e70c:	adds	r1, r1, r8
   2e710:	sub	r3, fp, #1
   2e714:	bcs	2e728 <fts_children@@Base+0x235c>
   2e718:	cmp	r0, r1
   2e71c:	subhi	fp, fp, #2
   2e720:	addhi	r1, r1, r8
   2e724:	bhi	2e72c <fts_children@@Base+0x2360>
   2e728:	mov	fp, r3
   2e72c:	rsb	r9, r0, r1
   2e730:	mov	r1, r4
   2e734:	uxth	r7, r7
   2e738:	mov	r0, r9
   2e73c:	bl	2df44 <fts_children@@Base+0x1b78>
   2e740:	mov	r1, r4
   2e744:	mov	r5, r0
   2e748:	mov	r0, r9
   2e74c:	bl	2e130 <fts_children@@Base+0x1d64>
   2e750:	mul	sl, sl, r5
   2e754:	orr	r1, r7, r1, lsl #16
   2e758:	cmp	sl, r1
   2e75c:	bls	2e77c <fts_children@@Base+0x23b0>
   2e760:	adds	r8, r1, r8
   2e764:	sub	r3, r5, #1
   2e768:	bcs	2e778 <fts_children@@Base+0x23ac>
   2e76c:	cmp	sl, r8
   2e770:	subhi	r5, r5, #2
   2e774:	bhi	2e77c <fts_children@@Base+0x23b0>
   2e778:	mov	r5, r3
   2e77c:	orr	r3, r5, fp, lsl #16
   2e780:	mov	r4, #0
   2e784:	cmp	r6, #0
   2e788:	mov	r0, r3
   2e78c:	mov	r1, r4
   2e790:	beq	2e79c <fts_children@@Base+0x23d0>
   2e794:	rsbs	r0, r0, #0
   2e798:	rsc	r1, r1, #0
   2e79c:	add	sp, sp, #12
   2e7a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e7a4:	cmp	r3, r5
   2e7a8:	movhi	r4, #0
   2e7ac:	movhi	r3, r4
   2e7b0:	bhi	2e784 <fts_children@@Base+0x23b8>
   2e7b4:	clz	r5, r1
   2e7b8:	cmp	r5, #0
   2e7bc:	bne	2e9ac <fts_children@@Base+0x25e0>
   2e7c0:	cmp	r1, ip
   2e7c4:	cmpcs	r2, sl
   2e7c8:	movhi	r4, #0
   2e7cc:	movls	r4, #1
   2e7d0:	movls	r3, #1
   2e7d4:	movls	r4, r5
   2e7d8:	movhi	r3, r4
   2e7dc:	b	2e784 <fts_children@@Base+0x23b8>
   2e7e0:	cmp	r2, #0
   2e7e4:	bne	2e7f8 <fts_children@@Base+0x242c>
   2e7e8:	mov	r1, r2
   2e7ec:	mov	r0, #1
   2e7f0:	bl	2df44 <fts_children@@Base+0x1b78>
   2e7f4:	mov	r8, r0
   2e7f8:	clz	r3, r8
   2e7fc:	cmp	r3, #0
   2e800:	bne	2e8d0 <fts_children@@Base+0x2504>
   2e804:	rsb	r9, r8, r9
   2e808:	lsr	r5, r8, #16
   2e80c:	uxth	sl, r8
   2e810:	mov	r4, #1
   2e814:	mov	r1, r5
   2e818:	mov	r0, r9
   2e81c:	bl	2df44 <fts_children@@Base+0x1b78>
   2e820:	mov	r1, r5
   2e824:	mov	fp, r0
   2e828:	mov	r0, r9
   2e82c:	bl	2e130 <fts_children@@Base+0x1d64>
   2e830:	mul	r0, sl, fp
   2e834:	lsr	r2, r7, #16
   2e838:	orr	r1, r2, r1, lsl #16
   2e83c:	cmp	r0, r1
   2e840:	bls	2e860 <fts_children@@Base+0x2494>
   2e844:	adds	r1, r1, r8
   2e848:	sub	r3, fp, #1
   2e84c:	bcs	2eacc <fts_children@@Base+0x2700>
   2e850:	cmp	r0, r1
   2e854:	subhi	fp, fp, #2
   2e858:	addhi	r1, r1, r8
   2e85c:	bls	2eacc <fts_children@@Base+0x2700>
   2e860:	rsb	r2, r0, r1
   2e864:	mov	r1, r5
   2e868:	str	r2, [sp]
   2e86c:	uxth	r7, r7
   2e870:	mov	r0, r2
   2e874:	bl	2df44 <fts_children@@Base+0x1b78>
   2e878:	ldr	r2, [sp]
   2e87c:	mov	r1, r5
   2e880:	mov	r9, r0
   2e884:	mov	r0, r2
   2e888:	bl	2e130 <fts_children@@Base+0x1d64>
   2e88c:	mul	sl, sl, r9
   2e890:	orr	r1, r7, r1, lsl #16
   2e894:	cmp	sl, r1
   2e898:	bls	2e8b8 <fts_children@@Base+0x24ec>
   2e89c:	adds	r8, r1, r8
   2e8a0:	sub	r3, r9, #1
   2e8a4:	bcs	2e8b4 <fts_children@@Base+0x24e8>
   2e8a8:	cmp	sl, r8
   2e8ac:	subhi	r9, r9, #2
   2e8b0:	bhi	2e8b8 <fts_children@@Base+0x24ec>
   2e8b4:	mov	r9, r3
   2e8b8:	orr	r3, r9, fp, lsl #16
   2e8bc:	b	2e784 <fts_children@@Base+0x23b8>
   2e8c0:	mvn	r6, r6
   2e8c4:	rsbs	r2, r2, #0
   2e8c8:	rsc	r3, r3, #0
   2e8cc:	b	2e68c <fts_children@@Base+0x22c0>
   2e8d0:	lsl	r8, r8, r3
   2e8d4:	rsb	fp, r3, #32
   2e8d8:	lsr	r4, r9, fp
   2e8dc:	lsr	fp, r7, fp
   2e8e0:	lsr	r5, r8, #16
   2e8e4:	orr	fp, fp, r9, lsl r3
   2e8e8:	mov	r0, r4
   2e8ec:	lsl	r7, r7, r3
   2e8f0:	mov	r1, r5
   2e8f4:	uxth	sl, r8
   2e8f8:	bl	2df44 <fts_children@@Base+0x1b78>
   2e8fc:	mov	r1, r5
   2e900:	mov	r3, r0
   2e904:	mov	r0, r4
   2e908:	str	r3, [sp]
   2e90c:	bl	2e130 <fts_children@@Base+0x1d64>
   2e910:	ldr	r3, [sp]
   2e914:	lsr	r2, fp, #16
   2e918:	mul	r0, sl, r3
   2e91c:	orr	r1, r2, r1, lsl #16
   2e920:	cmp	r0, r1
   2e924:	bls	2e944 <fts_children@@Base+0x2578>
   2e928:	adds	r1, r1, r8
   2e92c:	sub	r2, r3, #1
   2e930:	bcs	2eae4 <fts_children@@Base+0x2718>
   2e934:	cmp	r0, r1
   2e938:	subhi	r3, r3, #2
   2e93c:	addhi	r1, r1, r8
   2e940:	bls	2eae4 <fts_children@@Base+0x2718>
   2e944:	rsb	r9, r0, r1
   2e948:	mov	r1, r5
   2e94c:	str	r3, [sp]
   2e950:	uxth	fp, fp
   2e954:	mov	r0, r9
   2e958:	bl	2df44 <fts_children@@Base+0x1b78>
   2e95c:	mov	r1, r5
   2e960:	mov	r4, r0
   2e964:	mov	r0, r9
   2e968:	bl	2e130 <fts_children@@Base+0x1d64>
   2e96c:	mul	r9, sl, r4
   2e970:	ldr	r3, [sp]
   2e974:	orr	r1, fp, r1, lsl #16
   2e978:	cmp	r9, r1
   2e97c:	bls	2e9a0 <fts_children@@Base+0x25d4>
   2e980:	adds	r1, r1, r8
   2e984:	sub	r2, r4, #1
   2e988:	bcs	2e99c <fts_children@@Base+0x25d0>
   2e98c:	cmp	r9, r1
   2e990:	subhi	r4, r4, #2
   2e994:	addhi	r1, r1, r8
   2e998:	bhi	2e9a0 <fts_children@@Base+0x25d4>
   2e99c:	mov	r4, r2
   2e9a0:	rsb	r9, r9, r1
   2e9a4:	orr	r4, r4, r3, lsl #16
   2e9a8:	b	2e814 <fts_children@@Base+0x2448>
   2e9ac:	rsb	sl, r5, #32
   2e9b0:	lsl	r3, r2, r5
   2e9b4:	lsr	r0, r2, sl
   2e9b8:	lsr	r2, ip, sl
   2e9bc:	orr	r4, r0, r1, lsl r5
   2e9c0:	lsr	sl, r7, sl
   2e9c4:	mov	r0, r2
   2e9c8:	orr	sl, sl, ip, lsl r5
   2e9cc:	lsr	r9, r4, #16
   2e9d0:	str	r3, [sp, #4]
   2e9d4:	str	r2, [sp]
   2e9d8:	uxth	fp, r4
   2e9dc:	mov	r1, r9
   2e9e0:	bl	2df44 <fts_children@@Base+0x1b78>
   2e9e4:	ldr	r2, [sp]
   2e9e8:	mov	r1, r9
   2e9ec:	mov	r8, r0
   2e9f0:	mov	r0, r2
   2e9f4:	bl	2e130 <fts_children@@Base+0x1d64>
   2e9f8:	mul	r0, fp, r8
   2e9fc:	lsr	r2, sl, #16
   2ea00:	orr	r1, r2, r1, lsl #16
   2ea04:	cmp	r0, r1
   2ea08:	bls	2ea28 <fts_children@@Base+0x265c>
   2ea0c:	adds	r1, r1, r4
   2ea10:	sub	r2, r8, #1
   2ea14:	bcs	2eadc <fts_children@@Base+0x2710>
   2ea18:	cmp	r0, r1
   2ea1c:	subhi	r8, r8, #2
   2ea20:	addhi	r1, r1, r4
   2ea24:	bls	2eadc <fts_children@@Base+0x2710>
   2ea28:	rsb	ip, r0, r1
   2ea2c:	mov	r1, r9
   2ea30:	str	ip, [sp]
   2ea34:	mov	r0, ip
   2ea38:	bl	2df44 <fts_children@@Base+0x1b78>
   2ea3c:	ldr	ip, [sp]
   2ea40:	mov	r1, r9
   2ea44:	mov	r2, r0
   2ea48:	mov	r0, ip
   2ea4c:	str	r2, [sp]
   2ea50:	bl	2e130 <fts_children@@Base+0x1d64>
   2ea54:	ldr	r2, [sp]
   2ea58:	uxth	ip, sl
   2ea5c:	mul	fp, fp, r2
   2ea60:	orr	ip, ip, r1, lsl #16
   2ea64:	cmp	fp, ip
   2ea68:	bls	2ea88 <fts_children@@Base+0x26bc>
   2ea6c:	adds	ip, ip, r4
   2ea70:	sub	r1, r2, #1
   2ea74:	bcs	2ead4 <fts_children@@Base+0x2708>
   2ea78:	cmp	fp, ip
   2ea7c:	subhi	r2, r2, #2
   2ea80:	addhi	ip, ip, r4
   2ea84:	bls	2ead4 <fts_children@@Base+0x2708>
   2ea88:	ldr	r0, [sp, #4]
   2ea8c:	orr	r1, r2, r8, lsl #16
   2ea90:	rsb	fp, fp, ip
   2ea94:	umull	r2, r3, r1, r0
   2ea98:	cmp	fp, r3
   2ea9c:	bcc	2eac0 <fts_children@@Base+0x26f4>
   2eaa0:	movne	r4, #0
   2eaa4:	moveq	r4, #1
   2eaa8:	cmp	r2, r7, lsl r5
   2eaac:	movls	r4, #0
   2eab0:	andhi	r4, r4, #1
   2eab4:	cmp	r4, #0
   2eab8:	moveq	r3, r1
   2eabc:	beq	2e784 <fts_children@@Base+0x23b8>
   2eac0:	sub	r3, r1, #1
   2eac4:	mov	r4, #0
   2eac8:	b	2e784 <fts_children@@Base+0x23b8>
   2eacc:	mov	fp, r3
   2ead0:	b	2e860 <fts_children@@Base+0x2494>
   2ead4:	mov	r2, r1
   2ead8:	b	2ea88 <fts_children@@Base+0x26bc>
   2eadc:	mov	r8, r2
   2eae0:	b	2ea28 <fts_children@@Base+0x265c>
   2eae4:	mov	r3, r2
   2eae8:	b	2e944 <fts_children@@Base+0x2578>
   2eaec:	cmp	r3, #0
   2eaf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eaf4:	mov	r6, r0
   2eaf8:	sub	sp, sp, #12
   2eafc:	mov	r5, r1
   2eb00:	mov	r7, r0
   2eb04:	mov	r4, r2
   2eb08:	mov	r8, r1
   2eb0c:	bne	2ebec <fts_children@@Base+0x2820>
   2eb10:	cmp	r2, r1
   2eb14:	bls	2ec28 <fts_children@@Base+0x285c>
   2eb18:	clz	r3, r2
   2eb1c:	cmp	r3, #0
   2eb20:	rsbne	r8, r3, #32
   2eb24:	lslne	r4, r2, r3
   2eb28:	lsrne	r8, r0, r8
   2eb2c:	lslne	r7, r0, r3
   2eb30:	orrne	r8, r8, r1, lsl r3
   2eb34:	lsr	r5, r4, #16
   2eb38:	uxth	sl, r4
   2eb3c:	mov	r1, r5
   2eb40:	mov	r0, r8
   2eb44:	bl	2df44 <fts_children@@Base+0x1b78>
   2eb48:	mov	r1, r5
   2eb4c:	mov	r9, r0
   2eb50:	mov	r0, r8
   2eb54:	bl	2e130 <fts_children@@Base+0x1d64>
   2eb58:	mul	r0, sl, r9
   2eb5c:	lsr	r3, r7, #16
   2eb60:	orr	r1, r3, r1, lsl #16
   2eb64:	cmp	r0, r1
   2eb68:	bls	2eb8c <fts_children@@Base+0x27c0>
   2eb6c:	adds	r1, r1, r4
   2eb70:	sub	r2, r9, #1
   2eb74:	bcs	2eb88 <fts_children@@Base+0x27bc>
   2eb78:	cmp	r0, r1
   2eb7c:	subhi	r9, r9, #2
   2eb80:	addhi	r1, r1, r4
   2eb84:	bhi	2eb8c <fts_children@@Base+0x27c0>
   2eb88:	mov	r9, r2
   2eb8c:	rsb	r8, r0, r1
   2eb90:	mov	r1, r5
   2eb94:	uxth	r7, r7
   2eb98:	mov	r0, r8
   2eb9c:	bl	2df44 <fts_children@@Base+0x1b78>
   2eba0:	mov	r1, r5
   2eba4:	mov	r6, r0
   2eba8:	mov	r0, r8
   2ebac:	bl	2e130 <fts_children@@Base+0x1d64>
   2ebb0:	mul	sl, sl, r6
   2ebb4:	orr	r1, r7, r1, lsl #16
   2ebb8:	cmp	sl, r1
   2ebbc:	bls	2ebd8 <fts_children@@Base+0x280c>
   2ebc0:	adds	r4, r1, r4
   2ebc4:	sub	r3, r6, #1
   2ebc8:	bcs	2eed4 <fts_children@@Base+0x2b08>
   2ebcc:	cmp	sl, r4
   2ebd0:	subhi	r6, r6, #2
   2ebd4:	bls	2eed4 <fts_children@@Base+0x2b08>
   2ebd8:	orr	r0, r6, r9, lsl #16
   2ebdc:	mov	r6, #0
   2ebe0:	mov	r1, r6
   2ebe4:	add	sp, sp, #12
   2ebe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ebec:	cmp	r3, r1
   2ebf0:	movhi	r6, #0
   2ebf4:	movhi	r0, r6
   2ebf8:	bhi	2ebe0 <fts_children@@Base+0x2814>
   2ebfc:	clz	r7, r3
   2ec00:	cmp	r7, #0
   2ec04:	bne	2ed04 <fts_children@@Base+0x2938>
   2ec08:	cmp	r3, r1
   2ec0c:	cmpcs	r2, r6
   2ec10:	movhi	r6, #0
   2ec14:	movls	r6, #1
   2ec18:	movls	r0, #1
   2ec1c:	movls	r6, r7
   2ec20:	movhi	r0, r6
   2ec24:	b	2ebe0 <fts_children@@Base+0x2814>
   2ec28:	cmp	r2, #0
   2ec2c:	bne	2ec40 <fts_children@@Base+0x2874>
   2ec30:	mov	r1, r2
   2ec34:	mov	r0, #1
   2ec38:	bl	2df44 <fts_children@@Base+0x1b78>
   2ec3c:	mov	r4, r0
   2ec40:	clz	r3, r4
   2ec44:	cmp	r3, #0
   2ec48:	bne	2ee00 <fts_children@@Base+0x2a34>
   2ec4c:	rsb	r5, r4, r5
   2ec50:	lsr	r8, r4, #16
   2ec54:	uxth	sl, r4
   2ec58:	mov	r6, #1
   2ec5c:	mov	r1, r8
   2ec60:	mov	r0, r5
   2ec64:	bl	2df44 <fts_children@@Base+0x1b78>
   2ec68:	mov	r1, r8
   2ec6c:	mov	r9, r0
   2ec70:	mov	r0, r5
   2ec74:	bl	2e130 <fts_children@@Base+0x1d64>
   2ec78:	mul	r0, sl, r9
   2ec7c:	lsr	r3, r7, #16
   2ec80:	orr	r1, r3, r1, lsl #16
   2ec84:	cmp	r0, r1
   2ec88:	bls	2eca8 <fts_children@@Base+0x28dc>
   2ec8c:	adds	r1, r1, r4
   2ec90:	sub	r2, r9, #1
   2ec94:	bcs	2eedc <fts_children@@Base+0x2b10>
   2ec98:	cmp	r0, r1
   2ec9c:	subhi	r9, r9, #2
   2eca0:	addhi	r1, r1, r4
   2eca4:	bls	2eedc <fts_children@@Base+0x2b10>
   2eca8:	rsb	fp, r0, r1
   2ecac:	mov	r1, r8
   2ecb0:	uxth	r7, r7
   2ecb4:	mov	r0, fp
   2ecb8:	bl	2df44 <fts_children@@Base+0x1b78>
   2ecbc:	mov	r1, r8
   2ecc0:	mov	r5, r0
   2ecc4:	mov	r0, fp
   2ecc8:	bl	2e130 <fts_children@@Base+0x1d64>
   2eccc:	mul	sl, sl, r5
   2ecd0:	orr	r1, r7, r1, lsl #16
   2ecd4:	cmp	sl, r1
   2ecd8:	bls	2ecf4 <fts_children@@Base+0x2928>
   2ecdc:	adds	r4, r1, r4
   2ece0:	sub	r3, r5, #1
   2ece4:	bcs	2eee4 <fts_children@@Base+0x2b18>
   2ece8:	cmp	sl, r4
   2ecec:	subhi	r5, r5, #2
   2ecf0:	bls	2eee4 <fts_children@@Base+0x2b18>
   2ecf4:	orr	r0, r5, r9, lsl #16
   2ecf8:	mov	r1, r6
   2ecfc:	add	sp, sp, #12
   2ed00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed04:	rsb	r1, r7, #32
   2ed08:	lsl	r0, r2, r7
   2ed0c:	lsr	r2, r2, r1
   2ed10:	lsr	fp, r5, r1
   2ed14:	orr	r8, r2, r3, lsl r7
   2ed18:	lsr	r1, r6, r1
   2ed1c:	str	r0, [sp, #4]
   2ed20:	orr	r5, r1, r5, lsl r7
   2ed24:	lsr	r9, r8, #16
   2ed28:	mov	r0, fp
   2ed2c:	uxth	sl, r8
   2ed30:	mov	r1, r9
   2ed34:	bl	2df44 <fts_children@@Base+0x1b78>
   2ed38:	mov	r1, r9
   2ed3c:	mov	r4, r0
   2ed40:	mov	r0, fp
   2ed44:	bl	2e130 <fts_children@@Base+0x1d64>
   2ed48:	mul	r0, sl, r4
   2ed4c:	lsr	ip, r5, #16
   2ed50:	orr	r1, ip, r1, lsl #16
   2ed54:	cmp	r0, r1
   2ed58:	bls	2ed6c <fts_children@@Base+0x29a0>
   2ed5c:	adds	r1, r1, r8
   2ed60:	sub	r2, r4, #1
   2ed64:	bcc	2ef00 <fts_children@@Base+0x2b34>
   2ed68:	mov	r4, r2
   2ed6c:	rsb	ip, r0, r1
   2ed70:	mov	r1, r9
   2ed74:	str	ip, [sp]
   2ed78:	uxth	r5, r5
   2ed7c:	mov	r0, ip
   2ed80:	bl	2df44 <fts_children@@Base+0x1b78>
   2ed84:	ldr	ip, [sp]
   2ed88:	mov	r1, r9
   2ed8c:	mov	fp, r0
   2ed90:	mov	r0, ip
   2ed94:	bl	2e130 <fts_children@@Base+0x1d64>
   2ed98:	mul	sl, sl, fp
   2ed9c:	orr	r1, r5, r1, lsl #16
   2eda0:	cmp	sl, r1
   2eda4:	bls	2edb8 <fts_children@@Base+0x29ec>
   2eda8:	adds	r1, r1, r8
   2edac:	sub	r2, fp, #1
   2edb0:	bcc	2eeec <fts_children@@Base+0x2b20>
   2edb4:	mov	fp, r2
   2edb8:	ldr	r3, [sp, #4]
   2edbc:	orr	r0, fp, r4, lsl #16
   2edc0:	rsb	sl, sl, r1
   2edc4:	umull	r4, r5, r0, r3
   2edc8:	cmp	sl, r5
   2edcc:	bcc	2edec <fts_children@@Base+0x2a20>
   2edd0:	movne	r3, #0
   2edd4:	moveq	r3, #1
   2edd8:	cmp	r4, r6, lsl r7
   2eddc:	movls	r6, #0
   2ede0:	andhi	r6, r3, #1
   2ede4:	cmp	r6, #0
   2ede8:	beq	2ebe0 <fts_children@@Base+0x2814>
   2edec:	mov	r6, #0
   2edf0:	sub	r0, r0, #1
   2edf4:	mov	r1, r6
   2edf8:	add	sp, sp, #12
   2edfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee00:	lsl	r4, r4, r3
   2ee04:	rsb	r9, r3, #32
   2ee08:	lsr	r2, r5, r9
   2ee0c:	lsr	r9, r6, r9
   2ee10:	lsr	r8, r4, #16
   2ee14:	orr	r9, r9, r5, lsl r3
   2ee18:	mov	r0, r2
   2ee1c:	lsl	r7, r6, r3
   2ee20:	mov	r1, r8
   2ee24:	str	r2, [sp]
   2ee28:	bl	2df44 <fts_children@@Base+0x1b78>
   2ee2c:	ldr	r2, [sp]
   2ee30:	mov	r1, r8
   2ee34:	uxth	sl, r4
   2ee38:	mov	fp, r0
   2ee3c:	mov	r0, r2
   2ee40:	bl	2e130 <fts_children@@Base+0x1d64>
   2ee44:	mul	r0, sl, fp
   2ee48:	lsr	r3, r9, #16
   2ee4c:	orr	r1, r3, r1, lsl #16
   2ee50:	cmp	r0, r1
   2ee54:	bls	2ee74 <fts_children@@Base+0x2aa8>
   2ee58:	adds	r1, r1, r4
   2ee5c:	sub	r3, fp, #1
   2ee60:	bcs	2ef14 <fts_children@@Base+0x2b48>
   2ee64:	cmp	r0, r1
   2ee68:	subhi	fp, fp, #2
   2ee6c:	addhi	r1, r1, r4
   2ee70:	bls	2ef14 <fts_children@@Base+0x2b48>
   2ee74:	rsb	r5, r0, r1
   2ee78:	mov	r1, r8
   2ee7c:	uxth	r9, r9
   2ee80:	mov	r0, r5
   2ee84:	bl	2df44 <fts_children@@Base+0x1b78>
   2ee88:	mov	r1, r8
   2ee8c:	mov	r6, r0
   2ee90:	mov	r0, r5
   2ee94:	bl	2e130 <fts_children@@Base+0x1d64>
   2ee98:	mul	r5, sl, r6
   2ee9c:	orr	r1, r9, r1, lsl #16
   2eea0:	cmp	r5, r1
   2eea4:	bls	2eec8 <fts_children@@Base+0x2afc>
   2eea8:	adds	r1, r1, r4
   2eeac:	sub	r3, r6, #1
   2eeb0:	bcs	2eec4 <fts_children@@Base+0x2af8>
   2eeb4:	cmp	r5, r1
   2eeb8:	subhi	r6, r6, #2
   2eebc:	addhi	r1, r1, r4
   2eec0:	bhi	2eec8 <fts_children@@Base+0x2afc>
   2eec4:	mov	r6, r3
   2eec8:	rsb	r5, r5, r1
   2eecc:	orr	r6, r6, fp, lsl #16
   2eed0:	b	2ec5c <fts_children@@Base+0x2890>
   2eed4:	mov	r6, r3
   2eed8:	b	2ebd8 <fts_children@@Base+0x280c>
   2eedc:	mov	r9, r2
   2eee0:	b	2eca8 <fts_children@@Base+0x28dc>
   2eee4:	mov	r5, r3
   2eee8:	b	2ecf4 <fts_children@@Base+0x2928>
   2eeec:	cmp	sl, r1
   2eef0:	subhi	fp, fp, #2
   2eef4:	addhi	r1, r1, r8
   2eef8:	bhi	2edb8 <fts_children@@Base+0x29ec>
   2eefc:	b	2edb4 <fts_children@@Base+0x29e8>
   2ef00:	cmp	r0, r1
   2ef04:	subhi	r4, r4, #2
   2ef08:	addhi	r1, r1, r8
   2ef0c:	bhi	2ed6c <fts_children@@Base+0x29a0>
   2ef10:	b	2ed68 <fts_children@@Base+0x299c>
   2ef14:	mov	fp, r3
   2ef18:	b	2ee74 <fts_children@@Base+0x2aa8>
   2ef1c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2ef20:	mov	r7, r0
   2ef24:	ldr	r6, [pc, #76]	; 2ef78 <fts_children@@Base+0x2bac>
   2ef28:	mov	r8, r1
   2ef2c:	ldr	r5, [pc, #72]	; 2ef7c <fts_children@@Base+0x2bb0>
   2ef30:	mov	r9, r2
   2ef34:	add	r6, pc, r6
   2ef38:	bl	11fdc <_init@@Base>
   2ef3c:	add	r5, pc, r5
   2ef40:	rsb	r6, r5, r6
   2ef44:	asrs	r6, r6, #2
   2ef48:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   2ef4c:	sub	r5, r5, #4
   2ef50:	mov	r4, #0
   2ef54:	add	r4, r4, #1
   2ef58:	ldr	r3, [r5, #4]!
   2ef5c:	mov	r0, r7
   2ef60:	mov	r1, r8
   2ef64:	mov	r2, r9
   2ef68:	blx	r3
   2ef6c:	cmp	r4, r6
   2ef70:	bne	2ef54 <fts_children@@Base+0x2b88>
   2ef74:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2ef78:			; <UNDEFINED> instruction: 0x00016fb4
   2ef7c:	andeq	r6, r1, r8, lsr #31
   2ef80:	bx	lr
   2ef84:	ldr	r3, [pc, #28]	; 2efa8 <fts_children@@Base+0x2bdc>
   2ef88:	mov	r1, #0
   2ef8c:	ldr	r2, [pc, #24]	; 2efac <fts_children@@Base+0x2be0>
   2ef90:	add	r3, pc, r3
   2ef94:	ldr	r3, [r3, r2]
   2ef98:	cmp	r3, #0
   2ef9c:	ldrne	r2, [r3]
   2efa0:	moveq	r2, r3
   2efa4:	b	1244c <__cxa_atexit@plt>
   2efa8:	andeq	r7, r1, r8, rrx
   2efac:	andeq	r0, r0, ip, asr r2

Disassembly of section .fini:

0002efb0 <_fini@@Base>:
   2efb0:	push	{r3, lr}
   2efb4:	pop	{r3, pc}
