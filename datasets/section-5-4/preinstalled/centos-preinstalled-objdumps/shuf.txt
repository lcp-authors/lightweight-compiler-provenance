
centos-preinstalled/shuf:     file format elf32-littlearm


Disassembly of section .init:

00011234 <.init>:
   11234:	push	{r3, lr}
   11238:	bl	12434 <ftello64@plt+0xe74>
   1123c:	pop	{r3, pc}

Disassembly of section .plt:

00011240 <fdopen@plt-0x14>:
   11240:	push	{lr}		; (str lr, [sp, #-4]!)
   11244:	ldr	lr, [pc, #4]	; 11250 <fdopen@plt-0x4>
   11248:	add	lr, pc, lr
   1124c:	ldr	pc, [lr, #8]!
   11250:			; <UNDEFINED> instruction: 0x00018db0

00011254 <fdopen@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #24, 20	; 0x18000
   1125c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011260 <calloc@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #24, 20	; 0x18000
   11268:	ldr	pc, [ip, #3496]!	; 0xda8

0001126c <fputs_unlocked@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #24, 20	; 0x18000
   11274:	ldr	pc, [ip, #3488]!	; 0xda0

00011278 <raise@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #24, 20	; 0x18000
   11280:	ldr	pc, [ip, #3480]!	; 0xd98

00011284 <strcmp@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #24, 20	; 0x18000
   1128c:	ldr	pc, [ip, #3472]!	; 0xd90

00011290 <posix_fadvise64@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #24, 20	; 0x18000
   11298:	ldr	pc, [ip, #3464]!	; 0xd88

0001129c <__read_chk@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #24, 20	; 0x18000
   112a4:	ldr	pc, [ip, #3456]!	; 0xd80

000112a8 <fflush@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #24, 20	; 0x18000
   112b0:	ldr	pc, [ip, #3448]!	; 0xd78

000112b4 <getuid@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #24, 20	; 0x18000
   112bc:	ldr	pc, [ip, #3440]!	; 0xd70

000112c0 <free@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #24, 20	; 0x18000
   112c8:	ldr	pc, [ip, #3432]!	; 0xd68

000112cc <ferror@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #24, 20	; 0x18000
   112d4:	ldr	pc, [ip, #3424]!	; 0xd60

000112d8 <_exit@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #24, 20	; 0x18000
   112e0:	ldr	pc, [ip, #3416]!	; 0xd58

000112e4 <memcpy@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #24, 20	; 0x18000
   112ec:	ldr	pc, [ip, #3408]!	; 0xd50

000112f0 <mbsinit@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #24, 20	; 0x18000
   112f8:	ldr	pc, [ip, #3400]!	; 0xd48

000112fc <fwrite_unlocked@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #24, 20	; 0x18000
   11304:	ldr	pc, [ip, #3392]!	; 0xd40

00011308 <memcmp@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #24, 20	; 0x18000
   11310:	ldr	pc, [ip, #3384]!	; 0xd38

00011314 <stpcpy@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #24, 20	; 0x18000
   1131c:	ldr	pc, [ip, #3376]!	; 0xd30

00011320 <dcgettext@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #24, 20	; 0x18000
   11328:	ldr	pc, [ip, #3368]!	; 0xd28

0001132c <__stack_chk_fail@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #24, 20	; 0x18000
   11334:	ldr	pc, [ip, #3360]!	; 0xd20

00011338 <dup2@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #24, 20	; 0x18000
   11340:	ldr	pc, [ip, #3352]!	; 0xd18

00011344 <realloc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #24, 20	; 0x18000
   1134c:	ldr	pc, [ip, #3344]!	; 0xd10

00011350 <textdomain@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #24, 20	; 0x18000
   11358:	ldr	pc, [ip, #3336]!	; 0xd08

0001135c <iswprint@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #24, 20	; 0x18000
   11364:	ldr	pc, [ip, #3328]!	; 0xd00

00011368 <__fxstat64@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #24, 20	; 0x18000
   11370:	ldr	pc, [ip, #3320]!	; 0xcf8

00011374 <fwrite@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #24, 20	; 0x18000
   1137c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011380 <lseek64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #24, 20	; 0x18000
   11388:	ldr	pc, [ip, #3304]!	; 0xce8

0001138c <__ctype_get_mb_cur_max@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #24, 20	; 0x18000
   11394:	ldr	pc, [ip, #3296]!	; 0xce0

00011398 <strcpy@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #24, 20	; 0x18000
   113a0:	ldr	pc, [ip, #3288]!	; 0xcd8

000113a4 <gettimeofday@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #24, 20	; 0x18000
   113ac:	ldr	pc, [ip, #3280]!	; 0xcd0

000113b0 <fread@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #24, 20	; 0x18000
   113b8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113bc <__fpending@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #24, 20	; 0x18000
   113c4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113c8 <mbrtowc@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #24, 20	; 0x18000
   113d0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113d4 <error@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #24, 20	; 0x18000
   113dc:	ldr	pc, [ip, #3248]!	; 0xcb0

000113e0 <open64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #24, 20	; 0x18000
   113e8:	ldr	pc, [ip, #3240]!	; 0xca8

000113ec <getenv@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #24, 20	; 0x18000
   113f4:	ldr	pc, [ip, #3232]!	; 0xca0

000113f8 <malloc@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #24, 20	; 0x18000
   11400:	ldr	pc, [ip, #3224]!	; 0xc98

00011404 <__libc_start_main@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #24, 20	; 0x18000
   1140c:	ldr	pc, [ip, #3216]!	; 0xc90

00011410 <__freading@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #24, 20	; 0x18000
   11418:	ldr	pc, [ip, #3208]!	; 0xc88

0001141c <__gmon_start__@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #24, 20	; 0x18000
   11424:	ldr	pc, [ip, #3200]!	; 0xc80

00011428 <freopen64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #24, 20	; 0x18000
   11430:	ldr	pc, [ip, #3192]!	; 0xc78

00011434 <getopt_long@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #24, 20	; 0x18000
   1143c:	ldr	pc, [ip, #3184]!	; 0xc70

00011440 <__ctype_b_loc@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #24, 20	; 0x18000
   11448:	ldr	pc, [ip, #3176]!	; 0xc68

0001144c <getpid@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #24, 20	; 0x18000
   11454:	ldr	pc, [ip, #3168]!	; 0xc60

00011458 <exit@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #24, 20	; 0x18000
   11460:	ldr	pc, [ip, #3160]!	; 0xc58

00011464 <strtoul@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #24, 20	; 0x18000
   1146c:	ldr	pc, [ip, #3152]!	; 0xc50

00011470 <strlen@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #24, 20	; 0x18000
   11478:	ldr	pc, [ip, #3144]!	; 0xc48

0001147c <strchr@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #24, 20	; 0x18000
   11484:	ldr	pc, [ip, #3136]!	; 0xc40

00011488 <ungetc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #24, 20	; 0x18000
   11490:	ldr	pc, [ip, #3128]!	; 0xc38

00011494 <fcntl@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #24, 20	; 0x18000
   1149c:	ldr	pc, [ip, #3120]!	; 0xc30

000114a0 <__errno_location@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #24, 20	; 0x18000
   114a8:	ldr	pc, [ip, #3112]!	; 0xc28

000114ac <__cxa_atexit@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #24, 20	; 0x18000
   114b4:	ldr	pc, [ip, #3104]!	; 0xc20

000114b8 <setvbuf@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #24, 20	; 0x18000
   114c0:	ldr	pc, [ip, #3096]!	; 0xc18

000114c4 <getgid@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #24, 20	; 0x18000
   114cc:	ldr	pc, [ip, #3088]!	; 0xc10

000114d0 <memset@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #24, 20	; 0x18000
   114d8:	ldr	pc, [ip, #3080]!	; 0xc08

000114dc <fscanf@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #24, 20	; 0x18000
   114e4:	ldr	pc, [ip, #3072]!	; 0xc00

000114e8 <__printf_chk@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #24, 20	; 0x18000
   114f0:	ldr	pc, [ip, #3064]!	; 0xbf8

000114f4 <fileno@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #24, 20	; 0x18000
   114fc:	ldr	pc, [ip, #3056]!	; 0xbf0

00011500 <__fprintf_chk@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #24, 20	; 0x18000
   11508:	ldr	pc, [ip, #3048]!	; 0xbe8

0001150c <memchr@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #24, 20	; 0x18000
   11514:	ldr	pc, [ip, #3040]!	; 0xbe0

00011518 <fclose@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #24, 20	; 0x18000
   11520:	ldr	pc, [ip, #3032]!	; 0xbd8

00011524 <fseeko64@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #24, 20	; 0x18000
   1152c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011530 <__uflow@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #24, 20	; 0x18000
   11538:	ldr	pc, [ip, #3016]!	; 0xbc8

0001153c <setlocale@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #24, 20	; 0x18000
   11544:	ldr	pc, [ip, #3008]!	; 0xbc0

00011548 <strrchr@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #24, 20	; 0x18000
   11550:	ldr	pc, [ip, #3000]!	; 0xbb8

00011554 <nl_langinfo@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #24, 20	; 0x18000
   1155c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011560 <getppid@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #24, 20	; 0x18000
   11568:	ldr	pc, [ip, #2984]!	; 0xba8

0001156c <fopen64@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #24, 20	; 0x18000
   11574:	ldr	pc, [ip, #2976]!	; 0xba0

00011578 <bindtextdomain@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #24, 20	; 0x18000
   11580:	ldr	pc, [ip, #2968]!	; 0xb98

00011584 <fread_unlocked@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #24, 20	; 0x18000
   1158c:	ldr	pc, [ip, #2960]!	; 0xb90

00011590 <strncmp@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #24, 20	; 0x18000
   11598:	ldr	pc, [ip, #2952]!	; 0xb88

0001159c <abort@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #24, 20	; 0x18000
   115a4:	ldr	pc, [ip, #2944]!	; 0xb80

000115a8 <close@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #24, 20	; 0x18000
   115b0:	ldr	pc, [ip, #2936]!	; 0xb78

000115b4 <__assert_fail@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #24, 20	; 0x18000
   115bc:	ldr	pc, [ip, #2928]!	; 0xb70

000115c0 <ftello64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #24, 20	; 0x18000
   115c8:	ldr	pc, [ip, #2920]!	; 0xb68

Disassembly of section .text:

000115d0 <close_stdout@@Base-0x11cc>:
   115d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115d4:	sub	sp, sp, #212	; 0xd4
   115d8:	ldr	r5, [pc, #3468]	; 1236c <ftello64@plt+0xdac>
   115dc:	mov	ip, #10
   115e0:	ldr	r3, [pc, #3464]	; 12370 <ftello64@plt+0xdb0>
   115e4:	mov	r7, r0
   115e8:	add	r5, pc, r5
   115ec:	ldr	r0, [r1]
   115f0:	mov	fp, #0
   115f4:	mov	r6, r1
   115f8:	ldr	r3, [r5, r3]
   115fc:	mvn	sl, #0
   11600:	str	ip, [sp, #36]	; 0x24
   11604:	ldr	ip, [pc, #3432]	; 12374 <ftello64@plt+0xdb4>
   11608:	str	r3, [sp, #28]
   1160c:	ldr	r3, [r3]
   11610:	add	ip, pc, ip
   11614:	str	fp, [sp, #16]
   11618:	str	ip, [sp, #56]	; 0x38
   1161c:	str	r3, [sp, #204]	; 0xcc
   11620:	str	fp, [sp, #32]
   11624:	str	fp, [sp, #24]
   11628:	str	fp, [sp, #12]
   1162c:	str	fp, [sp, #44]	; 0x2c
   11630:	str	sl, [sp, #40]	; 0x28
   11634:	bl	12c4c <close_stdout@@Base+0x4b0>
   11638:	ldr	r1, [pc, #3384]	; 12378 <ftello64@plt+0xdb8>
   1163c:	mov	r0, #6
   11640:	ldr	r4, [pc, #3380]	; 1237c <ftello64@plt+0xdbc>
   11644:	add	r1, pc, r1
   11648:	ldr	r8, [pc, #3376]	; 12380 <ftello64@plt+0xdc0>
   1164c:	bl	1153c <setlocale@plt>
   11650:	add	r4, pc, r4
   11654:	ldr	r1, [pc, #3368]	; 12384 <ftello64@plt+0xdc4>
   11658:	add	r8, pc, r8
   1165c:	mov	r0, r4
   11660:	add	r1, pc, r1
   11664:	bl	11578 <bindtextdomain@plt>
   11668:	mov	r0, r4
   1166c:	bl	11350 <textdomain@plt>
   11670:	ldr	ip, [pc, #3344]	; 12388 <ftello64@plt+0xdc8>
   11674:	ldr	r3, [pc, #3344]	; 1238c <ftello64@plt+0xdcc>
   11678:	add	ip, pc, ip
   1167c:	str	ip, [sp, #60]	; 0x3c
   11680:	ldr	ip, [pc, #3336]	; 12390 <ftello64@plt+0xdd0>
   11684:	add	ip, pc, ip
   11688:	str	ip, [sp, #68]	; 0x44
   1168c:	ldr	ip, [pc, #3328]	; 12394 <ftello64@plt+0xdd4>
   11690:	ldr	r0, [r5, r3]
   11694:	add	ip, pc, ip
   11698:	str	ip, [sp, #48]	; 0x30
   1169c:	ldr	ip, [pc, #3316]	; 12398 <ftello64@plt+0xdd8>
   116a0:	add	ip, pc, ip
   116a4:	str	ip, [sp, #52]	; 0x34
   116a8:	bl	1882c <close_stdout@@Base+0x6090>
   116ac:	ldr	r3, [pc, #3304]	; 1239c <ftello64@plt+0xddc>
   116b0:	mov	r4, #0
   116b4:	mov	r0, r7
   116b8:	str	r4, [sp]
   116bc:	mov	r1, r6
   116c0:	mov	r2, r8
   116c4:	add	r3, pc, r3
   116c8:	bl	11434 <getopt_long@plt>
   116cc:	cmn	r0, #1
   116d0:	beq	11a4c <ftello64@plt+0x48c>
   116d4:	cmp	r0, #110	; 0x6e
   116d8:	beq	11908 <ftello64@plt+0x348>
   116dc:	bgt	117dc <ftello64@plt+0x21c>
   116e0:	cmn	r0, #2
   116e4:	beq	118d4 <ftello64@plt+0x314>
   116e8:	ble	11884 <ftello64@plt+0x2c4>
   116ec:	cmp	r0, #101	; 0x65
   116f0:	beq	11830 <ftello64@plt+0x270>
   116f4:	cmp	r0, #105	; 0x69
   116f8:	bne	11900 <ftello64@plt+0x340>
   116fc:	ldr	r3, [pc, #3228]	; 123a0 <ftello64@plt+0xde0>
   11700:	mov	r1, #45	; 0x2d
   11704:	str	r4, [sp, #96]	; 0x60
   11708:	ldr	r9, [r5, r3]
   1170c:	ldr	r3, [r9]
   11710:	mov	r0, r3
   11714:	str	r3, [sp, #24]
   11718:	bl	1147c <strchr@plt>
   1171c:	ldr	r1, [sp, #12]
   11720:	cmp	r1, #0
   11724:	mov	ip, r0
   11728:	bne	11a20 <ftello64@plt+0x460>
   1172c:	cmp	ip, #0
   11730:	beq	119cc <ftello64@plt+0x40c>
   11734:	mov	r4, #0
   11738:	add	r1, sp, #96	; 0x60
   1173c:	str	r1, [sp, #12]
   11740:	mov	r2, #10
   11744:	strb	r4, [ip]
   11748:	mov	r1, r4
   1174c:	ldr	r3, [sp, #12]
   11750:	str	r4, [sp]
   11754:	ldr	r0, [r9]
   11758:	str	ip, [sp, #8]
   1175c:	bl	15dc8 <close_stdout@@Base+0x362c>
   11760:	ldr	ip, [sp, #8]
   11764:	mov	r2, #45	; 0x2d
   11768:	ldr	r3, [sp, #12]
   1176c:	mov	r1, r4
   11770:	str	r0, [sp, #64]	; 0x40
   11774:	mov	r0, ip
   11778:	strb	r2, [r0], #1
   1177c:	mov	r2, #10
   11780:	ldr	ip, [sp, #96]	; 0x60
   11784:	str	r4, [sp]
   11788:	str	ip, [sp, #40]	; 0x28
   1178c:	bl	15dc8 <close_stdout@@Base+0x362c>
   11790:	ldr	ip, [sp, #96]	; 0x60
   11794:	ldr	r1, [sp, #40]	; 0x28
   11798:	rsb	r3, r1, ip
   1179c:	str	ip, [sp, #24]
   117a0:	cmn	r3, #1
   117a4:	movne	r3, #0
   117a8:	moveq	r3, #1
   117ac:	cmp	r1, ip
   117b0:	eorhi	r3, r3, #1
   117b4:	ldr	ip, [sp, #64]	; 0x40
   117b8:	cmp	r0, r4
   117bc:	cmpeq	ip, r4
   117c0:	moveq	r0, #0
   117c4:	movne	r0, #1
   117c8:	orrs	r3, r0, r3
   117cc:	bne	119ec <ftello64@plt+0x42c>
   117d0:	mov	ip, #1
   117d4:	str	ip, [sp, #12]
   117d8:	b	116ac <ftello64@plt+0xec>
   117dc:	cmp	r0, #114	; 0x72
   117e0:	beq	118cc <ftello64@plt+0x30c>
   117e4:	ble	11844 <ftello64@plt+0x284>
   117e8:	cmp	r0, #122	; 0x7a
   117ec:	beq	1183c <ftello64@plt+0x27c>
   117f0:	cmp	r0, #256	; 0x100
   117f4:	bne	11900 <ftello64@plt+0x340>
   117f8:	ldr	ip, [sp, #16]
   117fc:	ldr	r3, [pc, #2972]	; 123a0 <ftello64@plt+0xde0>
   11800:	cmp	ip, #0
   11804:	ldreq	r9, [r5, r3]
   11808:	beq	11824 <ftello64@plt+0x264>
   1180c:	ldr	r9, [r5, r3]
   11810:	ldr	r0, [sp, #16]
   11814:	ldr	r1, [r9]
   11818:	bl	11284 <strcmp@plt>
   1181c:	cmp	r0, #0
   11820:	bne	119a8 <ftello64@plt+0x3e8>
   11824:	ldr	r9, [r9]
   11828:	str	r9, [sp, #16]
   1182c:	b	116ac <ftello64@plt+0xec>
   11830:	mov	ip, #1
   11834:	str	ip, [sp, #44]	; 0x2c
   11838:	b	116ac <ftello64@plt+0xec>
   1183c:	str	r4, [sp, #36]	; 0x24
   11840:	b	116ac <ftello64@plt+0xec>
   11844:	cmp	r0, #111	; 0x6f
   11848:	bne	11900 <ftello64@plt+0x340>
   1184c:	ldr	ip, [sp, #32]
   11850:	ldr	r3, [pc, #2888]	; 123a0 <ftello64@plt+0xde0>
   11854:	cmp	ip, #0
   11858:	ldreq	r9, [r5, r3]
   1185c:	beq	11878 <ftello64@plt+0x2b8>
   11860:	ldr	r9, [r5, r3]
   11864:	ldr	r0, [sp, #32]
   11868:	ldr	r1, [r9]
   1186c:	bl	11284 <strcmp@plt>
   11870:	cmp	r0, #0
   11874:	bne	11984 <ftello64@plt+0x3c4>
   11878:	ldr	r9, [r9]
   1187c:	str	r9, [sp, #32]
   11880:	b	116ac <ftello64@plt+0xec>
   11884:	cmn	r0, #3
   11888:	bne	11900 <ftello64@plt+0x340>
   1188c:	ldr	r1, [pc, #2832]	; 123a4 <ftello64@plt+0xde4>
   11890:	ldr	r3, [pc, #2832]	; 123a8 <ftello64@plt+0xde8>
   11894:	ldr	r2, [pc, #2832]	; 123ac <ftello64@plt+0xdec>
   11898:	ldr	r0, [r5, r1]
   1189c:	ldr	r3, [r5, r3]
   118a0:	add	r2, pc, r2
   118a4:	ldr	r1, [pc, #2820]	; 123b0 <ftello64@plt+0xdf0>
   118a8:	ldr	r0, [r0]
   118ac:	ldr	r3, [r3]
   118b0:	add	r1, pc, r1
   118b4:	stm	sp, {r2, r4}
   118b8:	ldr	r2, [pc, #2804]	; 123b4 <ftello64@plt+0xdf4>
   118bc:	add	r2, pc, r2
   118c0:	bl	15a4c <close_stdout@@Base+0x32b0>
   118c4:	mov	r0, r4
   118c8:	bl	11458 <exit@plt>
   118cc:	mov	fp, #1
   118d0:	b	116ac <ftello64@plt+0xec>
   118d4:	mov	r0, r4
   118d8:	bl	1252c <ftello64@plt+0xf6c>
   118dc:	ldr	r1, [pc, #2772]	; 123b8 <ftello64@plt+0xdf8>
   118e0:	mov	r2, #5
   118e4:	mov	r0, r4
   118e8:	add	r1, pc, r1
   118ec:	bl	11320 <dcgettext@plt>
   118f0:	mov	r1, r4
   118f4:	mov	r2, r0
   118f8:	mov	r0, r4
   118fc:	bl	113d4 <error@plt>
   11900:	mov	r0, #1
   11904:	bl	1252c <ftello64@plt+0xf6c>
   11908:	ldr	r0, [pc, #2704]	; 123a0 <ftello64@plt+0xde0>
   1190c:	mov	r1, r4
   11910:	mov	r2, #10
   11914:	add	r3, sp, #96	; 0x60
   11918:	ldr	r0, [r5, r0]
   1191c:	str	r4, [sp]
   11920:	str	r0, [sp, #64]	; 0x40
   11924:	ldr	r0, [r0]
   11928:	bl	15dc8 <close_stdout@@Base+0x362c>
   1192c:	cmp	r0, #0
   11930:	beq	11974 <ftello64@plt+0x3b4>
   11934:	cmp	r0, #1
   11938:	beq	116ac <ftello64@plt+0xec>
   1193c:	ldr	r1, [sp, #56]	; 0x38
   11940:	mov	r2, #5
   11944:	mov	r0, r4
   11948:	bl	11320 <dcgettext@plt>
   1194c:	ldr	ip, [sp, #64]	; 0x40
   11950:	mov	r9, r0
   11954:	ldr	r0, [ip]
   11958:	bl	1449c <close_stdout@@Base+0x1d00>
   1195c:	mov	r2, r9
   11960:	mov	r1, r4
   11964:	mov	r3, r0
   11968:	mov	r0, #1
   1196c:	bl	113d4 <error@plt>
   11970:	b	116ac <ftello64@plt+0xec>
   11974:	ldr	r3, [sp, #96]	; 0x60
   11978:	cmp	sl, r3
   1197c:	movcs	sl, r3
   11980:	b	116ac <ftello64@plt+0xec>
   11984:	ldr	r1, [sp, #68]	; 0x44
   11988:	mov	r0, r4
   1198c:	mov	r2, #5
   11990:	bl	11320 <dcgettext@plt>
   11994:	mov	r1, r4
   11998:	mov	r2, r0
   1199c:	mov	r0, #1
   119a0:	bl	113d4 <error@plt>
   119a4:	b	11878 <ftello64@plt+0x2b8>
   119a8:	ldr	r1, [sp, #60]	; 0x3c
   119ac:	mov	r0, r4
   119b0:	mov	r2, #5
   119b4:	bl	11320 <dcgettext@plt>
   119b8:	mov	r1, r4
   119bc:	mov	r2, r0
   119c0:	mov	r0, #1
   119c4:	bl	113d4 <error@plt>
   119c8:	b	11824 <ftello64@plt+0x264>
   119cc:	str	ip, [sp]
   119d0:	mov	r1, ip
   119d4:	ldr	r0, [sp, #24]
   119d8:	mov	r2, #10
   119dc:	add	r3, sp, #96	; 0x60
   119e0:	bl	15dc8 <close_stdout@@Base+0x362c>
   119e4:	ldr	ip, [sp, #96]	; 0x60
   119e8:	str	ip, [sp, #24]
   119ec:	ldr	r1, [sp, #48]	; 0x30
   119f0:	mov	r2, #5
   119f4:	mov	r0, #0
   119f8:	bl	11320 <dcgettext@plt>
   119fc:	mov	r4, r0
   11a00:	ldr	r0, [r9]
   11a04:	bl	1449c <close_stdout@@Base+0x1d00>
   11a08:	mov	r2, r4
   11a0c:	mov	r1, #0
   11a10:	mov	r3, r0
   11a14:	mov	r0, #1
   11a18:	bl	113d4 <error@plt>
   11a1c:	b	117d0 <ftello64@plt+0x210>
   11a20:	ldr	r1, [sp, #52]	; 0x34
   11a24:	mov	r2, #5
   11a28:	mov	r0, r4
   11a2c:	str	ip, [sp, #8]
   11a30:	bl	11320 <dcgettext@plt>
   11a34:	mov	r1, r4
   11a38:	mov	r2, r0
   11a3c:	mov	r0, #1
   11a40:	bl	113d4 <error@plt>
   11a44:	ldr	ip, [sp, #8]
   11a48:	b	1172c <ftello64@plt+0x16c>
   11a4c:	ldr	r3, [pc, #2408]	; 123bc <ftello64@plt+0xdfc>
   11a50:	ldr	ip, [sp, #44]	; 0x2c
   11a54:	ldr	r1, [sp, #12]
   11a58:	ldr	r3, [r5, r3]
   11a5c:	tst	ip, r1
   11a60:	ldr	r8, [r3]
   11a64:	rsb	r7, r8, r7
   11a68:	add	ip, r6, r8, lsl #2
   11a6c:	str	ip, [sp, #52]	; 0x34
   11a70:	bne	118dc <ftello64@plt+0x31c>
   11a74:	ldr	ip, [sp, #12]
   11a78:	cmp	ip, #0
   11a7c:	bne	11cb8 <ftello64@plt+0x6f8>
   11a80:	ldr	ip, [sp, #44]	; 0x2c
   11a84:	eor	r4, ip, #1
   11a88:	cmp	r7, #1
   11a8c:	movle	r4, #0
   11a90:	andgt	r4, r4, #1
   11a94:	cmp	r4, #0
   11a98:	bne	1232c <ftello64@plt+0xd6c>
   11a9c:	ldr	ip, [sp, #44]	; 0x2c
   11aa0:	cmp	ip, #0
   11aa4:	movne	r9, r7
   11aa8:	movne	r6, r7
   11aac:	ldrne	r8, [sp, #52]	; 0x34
   11ab0:	bne	11c58 <ftello64@plt+0x698>
   11ab4:	ldr	ip, [sp, #12]
   11ab8:	cmp	ip, #0
   11abc:	beq	11dc0 <ftello64@plt+0x800>
   11ac0:	ldr	ip, [sp, #24]
   11ac4:	add	r3, ip, #1
   11ac8:	ldr	ip, [sp, #44]	; 0x2c
   11acc:	str	ip, [sp, #52]	; 0x34
   11ad0:	ldr	ip, [sp, #40]	; 0x28
   11ad4:	rsb	r9, ip, r3
   11ad8:	cmp	fp, #0
   11adc:	movne	ip, #0
   11ae0:	mvnne	r1, #0
   11ae4:	strne	ip, [sp, #48]	; 0x30
   11ae8:	bne	11b08 <ftello64@plt+0x548>
   11aec:	cmp	r9, sl
   11af0:	movcc	sl, r9
   11af4:	mov	r1, r9
   11af8:	str	fp, [sp, #48]	; 0x30
   11afc:	mov	r0, sl
   11b00:	bl	14778 <close_stdout@@Base+0x1fdc>
   11b04:	mov	r1, r0
   11b08:	ldr	r0, [sp, #16]
   11b0c:	bl	144d0 <close_stdout@@Base+0x1d34>
   11b10:	cmp	r0, #0
   11b14:	str	r0, [sp, #60]	; 0x3c
   11b18:	beq	12260 <ftello64@plt+0xca0>
   11b1c:	ldr	ip, [sp, #48]	; 0x30
   11b20:	cmp	ip, #0
   11b24:	ldreq	r4, [sp, #48]	; 0x30
   11b28:	bne	11e20 <ftello64@plt+0x860>
   11b2c:	ldr	ip, [sp, #44]	; 0x2c
   11b30:	eor	r3, ip, #1
   11b34:	ldr	ip, [sp, #12]
   11b38:	eor	r2, ip, #1
   11b3c:	tst	r2, r3
   11b40:	bne	11f10 <ftello64@plt+0x950>
   11b44:	cmp	fp, #0
   11b48:	movne	r6, #0
   11b4c:	beq	11ef8 <ftello64@plt+0x938>
   11b50:	ldr	ip, [sp, #32]
   11b54:	cmp	ip, #0
   11b58:	beq	11b80 <ftello64@plt+0x5c0>
   11b5c:	ldr	r3, [pc, #2112]	; 123a4 <ftello64@plt+0xde4>
   11b60:	mov	r0, ip
   11b64:	ldr	r1, [pc, #2132]	; 123c0 <ftello64@plt+0xe00>
   11b68:	ldr	r3, [r5, r3]
   11b6c:	add	r1, pc, r1
   11b70:	ldr	r2, [r3]
   11b74:	bl	129ec <close_stdout@@Base+0x250>
   11b78:	cmp	r0, #0
   11b7c:	beq	1228c <ftello64@plt+0xccc>
   11b80:	cmp	fp, #0
   11b84:	beq	11cc8 <ftello64@plt+0x708>
   11b88:	ldr	ip, [sp, #12]
   11b8c:	cmp	ip, #0
   11b90:	bne	12060 <ftello64@plt+0xaa0>
   11b94:	subs	r6, r9, #1
   11b98:	mov	r7, #0
   11b9c:	mov	r4, ip
   11ba0:	sbc	r7, r7, #0
   11ba4:	ldr	r9, [sp, #52]	; 0x34
   11ba8:	ldr	fp, [sp, #60]	; 0x3c
   11bac:	b	11bb4 <ftello64@plt+0x5f4>
   11bb0:	add	r4, r4, #1
   11bb4:	cmp	r4, sl
   11bb8:	beq	11c28 <ftello64@plt+0x668>
   11bbc:	mov	r2, r6
   11bc0:	mov	r3, r7
   11bc4:	mov	r0, fp
   11bc8:	bl	144f0 <close_stdout@@Base+0x1d54>
   11bcc:	ldr	r3, [pc, #2000]	; 123a4 <ftello64@plt+0xde4>
   11bd0:	mov	r1, #1
   11bd4:	ldr	r3, [r5, r3]
   11bd8:	ldr	r3, [r3]
   11bdc:	add	r2, r9, r0, lsl #2
   11be0:	ldr	r0, [r9, r0, lsl #2]
   11be4:	ldr	r8, [r2, #4]
   11be8:	rsb	r8, r0, r8
   11bec:	mov	r2, r8
   11bf0:	bl	112fc <fwrite_unlocked@plt>
   11bf4:	cmp	r8, r0
   11bf8:	beq	11bb0 <ftello64@plt+0x5f0>
   11bfc:	bl	114a0 <__errno_location@plt>
   11c00:	ldr	r1, [pc, #1980]	; 123c4 <ftello64@plt+0xe04>
   11c04:	mov	r2, #5
   11c08:	add	r1, pc, r1
   11c0c:	ldr	r4, [r0]
   11c10:	mov	r0, #0
   11c14:	bl	11320 <dcgettext@plt>
   11c18:	mov	r1, r4
   11c1c:	mov	r2, r0
   11c20:	mov	r0, #1
   11c24:	bl	113d4 <error@plt>
   11c28:	ldr	ip, [sp, #28]
   11c2c:	mov	r0, #0
   11c30:	ldr	r2, [sp, #204]	; 0xcc
   11c34:	ldr	r3, [ip]
   11c38:	cmp	r2, r3
   11c3c:	bne	12324 <ftello64@plt+0xd64>
   11c40:	add	sp, sp, #212	; 0xd4
   11c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c48:	ldr	r0, [r8, r4, lsl #2]
   11c4c:	add	r4, r4, #1
   11c50:	bl	11470 <strlen@plt>
   11c54:	add	r6, r6, r0
   11c58:	cmp	r7, r4
   11c5c:	bgt	11c48 <ftello64@plt+0x688>
   11c60:	mov	r0, r6
   11c64:	ldr	r8, [sp, #52]	; 0x34
   11c68:	bl	15b5c <close_stdout@@Base+0x33c0>
   11c6c:	mov	r4, #0
   11c70:	str	r5, [sp, #48]	; 0x30
   11c74:	mov	r5, r8
   11c78:	ldr	r8, [sp, #36]	; 0x24
   11c7c:	mov	r6, r0
   11c80:	b	11ca0 <ftello64@plt+0x6e0>
   11c84:	mov	r0, r6
   11c88:	ldr	r1, [r5]
   11c8c:	bl	11314 <stpcpy@plt>
   11c90:	add	r4, r4, #1
   11c94:	str	r6, [r5], #4
   11c98:	add	r6, r0, #1
   11c9c:	strb	r8, [r0]
   11ca0:	cmp	r7, r4
   11ca4:	bgt	11c84 <ftello64@plt+0x6c4>
   11ca8:	ldr	ip, [sp, #52]	; 0x34
   11cac:	ldr	r5, [sp, #48]	; 0x30
   11cb0:	str	r6, [ip, r7, lsl #2]
   11cb4:	b	11ad8 <ftello64@plt+0x518>
   11cb8:	cmp	r7, #0
   11cbc:	movle	r4, #0
   11cc0:	movgt	r4, #1
   11cc4:	b	11a94 <ftello64@plt+0x4d4>
   11cc8:	ldr	ip, [sp, #48]	; 0x30
   11ccc:	cmp	ip, #0
   11cd0:	movne	r7, fp
   11cd4:	movne	sl, #20
   11cd8:	bne	11d84 <ftello64@plt+0x7c4>
   11cdc:	ldr	ip, [sp, #12]
   11ce0:	cmp	ip, #0
   11ce4:	moveq	r4, ip
   11ce8:	ldreq	r8, [sp, #52]	; 0x34
   11cec:	beq	11d3c <ftello64@plt+0x77c>
   11cf0:	ldr	r5, [pc, #1744]	; 123c8 <ftello64@plt+0xe08>
   11cf4:	ldr	r4, [sp, #48]	; 0x30
   11cf8:	add	r5, pc, r5
   11cfc:	ldr	r7, [sp, #40]	; 0x28
   11d00:	ldr	r8, [sp, #36]	; 0x24
   11d04:	b	11d0c <ftello64@plt+0x74c>
   11d08:	add	r4, r4, #1
   11d0c:	cmp	r4, sl
   11d10:	beq	11c28 <ftello64@plt+0x668>
   11d14:	ldr	r2, [r6, r4, lsl #2]
   11d18:	mov	r0, #1
   11d1c:	mov	r1, r5
   11d20:	mov	r3, r8
   11d24:	add	r2, r7, r2
   11d28:	bl	114e8 <__printf_chk@plt>
   11d2c:	cmp	r0, #0
   11d30:	bge	11d08 <ftello64@plt+0x748>
   11d34:	b	11bfc <ftello64@plt+0x63c>
   11d38:	add	r4, r4, #1
   11d3c:	cmp	r4, sl
   11d40:	beq	11c28 <ftello64@plt+0x668>
   11d44:	ldr	r3, [r6, r4, lsl #2]
   11d48:	mov	r1, #1
   11d4c:	ldr	r2, [pc, #1616]	; 123a4 <ftello64@plt+0xde4>
   11d50:	add	r0, r8, r3, lsl #2
   11d54:	ldr	r3, [r8, r3, lsl #2]
   11d58:	ldr	r2, [r5, r2]
   11d5c:	ldr	r7, [r0, #4]
   11d60:	mov	r0, r3
   11d64:	rsb	r7, r3, r7
   11d68:	ldr	r3, [r2]
   11d6c:	mov	r2, r7
   11d70:	bl	112fc <fwrite_unlocked@plt>
   11d74:	cmp	r7, r0
   11d78:	beq	11d38 <ftello64@plt+0x778>
   11d7c:	b	11bfc <ftello64@plt+0x63c>
   11d80:	add	r7, r7, #1
   11d84:	cmp	r7, r9
   11d88:	beq	11c28 <ftello64@plt+0x668>
   11d8c:	ldr	r8, [r6, r7, lsl #2]
   11d90:	mov	r1, #1
   11d94:	ldr	r3, [pc, #1544]	; 123a4 <ftello64@plt+0xde4>
   11d98:	mla	r8, sl, r8, r4
   11d9c:	ldr	r3, [r5, r3]
   11da0:	ldr	r3, [r3]
   11da4:	ldr	r0, [r8, #8]
   11da8:	ldr	r2, [r8, #4]
   11dac:	bl	112fc <fwrite_unlocked@plt>
   11db0:	ldr	r3, [r8, #4]
   11db4:	cmp	r0, r3
   11db8:	beq	11d80 <ftello64@plt+0x7c0>
   11dbc:	b	11bfc <ftello64@plt+0x63c>
   11dc0:	cmp	r7, #1
   11dc4:	beq	120d4 <ftello64@plt+0xb14>
   11dc8:	ldr	r3, [pc, #1532]	; 123cc <ftello64@plt+0xe0c>
   11dcc:	ldr	r4, [r5, r3]
   11dd0:	ldr	r0, [r4]
   11dd4:	mov	r1, #2
   11dd8:	bl	1295c <close_stdout@@Base+0x1c0>
   11ddc:	adds	r2, sl, #1
   11de0:	eor	r3, fp, #1
   11de4:	movne	r2, #1
   11de8:	tst	r2, r3
   11dec:	beq	12114 <ftello64@plt+0xb54>
   11df0:	cmp	sl, #0
   11df4:	bne	121f0 <ftello64@plt+0xc30>
   11df8:	mvn	r3, #0
   11dfc:	mov	ip, #0
   11e00:	mov	r9, r3
   11e04:	str	ip, [sp, #52]	; 0x34
   11e08:	cmp	sl, r3
   11e0c:	movcs	sl, r3
   11e10:	mov	ip, #1
   11e14:	mov	r1, r3
   11e18:	str	ip, [sp, #48]	; 0x30
   11e1c:	b	11b08 <ftello64@plt+0x548>
   11e20:	ldr	r3, [pc, #1444]	; 123cc <ftello64@plt+0xe0c>
   11e24:	cmp	sl, #1024	; 0x400
   11e28:	movcc	r6, sl
   11e2c:	movcs	r6, #1024	; 0x400
   11e30:	movw	ip, #52428	; 0xcccc
   11e34:	movt	ip, #3276	; 0xccc
   11e38:	str	ip, [sp, #56]	; 0x38
   11e3c:	mov	r1, #20
   11e40:	ldr	lr, [r5, r3]
   11e44:	mov	r0, r6
   11e48:	mov	ip, #0
   11e4c:	mov	r2, sl
   11e50:	mov	r3, #0
   11e54:	mov	r7, r1
   11e58:	ldr	sl, [lr]
   11e5c:	mov	r8, #0
   11e60:	str	ip, [sp, #8]
   11e64:	mov	r9, #0
   11e68:	strd	r2, [sp, #16]
   11e6c:	bl	15d1c <close_stdout@@Base+0x3580>
   11e70:	ldr	ip, [sp, #8]
   11e74:	mov	r4, r0
   11e78:	ldrd	r2, [sp, #16]
   11e7c:	cmp	r9, r3
   11e80:	cmpeq	r8, r2
   11e84:	bcs	11f58 <ftello64@plt+0x998>
   11e88:	mla	r0, r7, r8, r4
   11e8c:	mov	r1, sl
   11e90:	ldr	r2, [sp, #36]	; 0x24
   11e94:	bl	12b54 <close_stdout@@Base+0x3b8>
   11e98:	subs	ip, r0, #0
   11e9c:	beq	1200c <ftello64@plt+0xa4c>
   11ea0:	adds	r8, r8, #1
   11ea4:	mov	r2, r6
   11ea8:	adc	r9, r9, #0
   11eac:	mov	r3, #0
   11eb0:	cmp	r9, r3
   11eb4:	cmpeq	r8, r2
   11eb8:	bcc	11e78 <ftello64@plt+0x8b8>
   11ebc:	ldr	r3, [sp, #56]	; 0x38
   11ec0:	add	r6, r6, #1024	; 0x400
   11ec4:	cmp	r6, r3
   11ec8:	bhi	12328 <ftello64@plt+0xd68>
   11ecc:	mov	r0, r4
   11ed0:	str	ip, [sp, #8]
   11ed4:	mul	r1, r7, r6
   11ed8:	bl	15bb4 <close_stdout@@Base+0x3418>
   11edc:	mov	r1, #0
   11ee0:	mov	r2, #20480	; 0x5000
   11ee4:	mov	r4, r0
   11ee8:	mla	r0, r7, r8, r0
   11eec:	bl	114d0 <memset@plt>
   11ef0:	ldr	ip, [sp, #8]
   11ef4:	b	11e78 <ftello64@plt+0x8b8>
   11ef8:	ldr	r0, [sp, #60]	; 0x3c
   11efc:	mov	r1, sl
   11f00:	mov	r2, r9
   11f04:	bl	147a8 <close_stdout@@Base+0x200c>
   11f08:	mov	r6, r0
   11f0c:	b	11b50 <ftello64@plt+0x590>
   11f10:	ldr	r3, [pc, #1204]	; 123cc <ftello64@plt+0xe0c>
   11f14:	ldr	r3, [r5, r3]
   11f18:	ldr	r0, [r3]
   11f1c:	bl	16300 <close_stdout@@Base+0x3b64>
   11f20:	cmp	r0, #0
   11f24:	beq	11b44 <ftello64@plt+0x584>
   11f28:	bl	114a0 <__errno_location@plt>
   11f2c:	ldr	r1, [pc, #1180]	; 123d0 <ftello64@plt+0xe10>
   11f30:	mov	r2, #5
   11f34:	add	r1, pc, r1
   11f38:	ldr	r6, [r0]
   11f3c:	mov	r0, #0
   11f40:	bl	11320 <dcgettext@plt>
   11f44:	mov	r1, r6
   11f48:	mov	r2, r0
   11f4c:	mov	r0, #1
   11f50:	bl	113d4 <error@plt>
   11f54:	b	11b44 <ftello64@plt+0x584>
   11f58:	cmp	ip, #0
   11f5c:	beq	1200c <ftello64@plt+0xa4c>
   11f60:	add	r7, sp, #76	; 0x4c
   11f64:	mov	r6, #20
   11f68:	mov	r0, r7
   11f6c:	bl	12b48 <close_stdout@@Base+0x3ac>
   11f70:	str	fp, [sp, #56]	; 0x38
   11f74:	str	r5, [sp, #68]	; 0x44
   11f78:	ldr	fp, [sp, #36]	; 0x24
   11f7c:	ldr	r5, [sp, #60]	; 0x3c
   11f80:	b	11f9c <ftello64@plt+0x9dc>
   11f84:	adds	r2, r8, #1
   11f88:	adc	r3, r9, #0
   11f8c:	orrs	ip, r8, r9
   11f90:	beq	121dc <ftello64@plt+0xc1c>
   11f94:	mov	r8, r2
   11f98:	mov	r9, r3
   11f9c:	mov	r2, r8
   11fa0:	mov	r3, r9
   11fa4:	mov	r0, r5
   11fa8:	bl	144f0 <close_stdout@@Base+0x1d54>
   11fac:	ldrd	r2, [sp, #16]
   11fb0:	cmp	r1, r3
   11fb4:	cmpeq	r0, r2
   11fb8:	mov	r1, sl
   11fbc:	mov	r2, fp
   11fc0:	mlacc	r0, r6, r0, r4
   11fc4:	movcs	r0, r7
   11fc8:	bl	12b54 <close_stdout@@Base+0x3b8>
   11fcc:	cmp	r0, #0
   11fd0:	bne	11f84 <ftello64@plt+0x9c4>
   11fd4:	orrs	r1, r8, r9
   11fd8:	ldr	fp, [sp, #56]	; 0x38
   11fdc:	ldr	r5, [sp, #68]	; 0x44
   11fe0:	bne	12004 <ftello64@plt+0xa44>
   11fe4:	ldr	r1, [pc, #1000]	; 123d4 <ftello64@plt+0xe14>
   11fe8:	mov	r2, #5
   11fec:	add	r1, pc, r1
   11ff0:	bl	11320 <dcgettext@plt>
   11ff4:	mov	r1, #75	; 0x4b
   11ff8:	mov	r2, r0
   11ffc:	mov	r0, #1
   12000:	bl	113d4 <error@plt>
   12004:	mov	r0, r7
   12008:	bl	12c44 <close_stdout@@Base+0x4a8>
   1200c:	ldr	r3, [sl]
   12010:	tst	r3, #32
   12014:	beq	12044 <ftello64@plt+0xa84>
   12018:	bl	114a0 <__errno_location@plt>
   1201c:	ldr	r1, [pc, #948]	; 123d8 <ftello64@plt+0xe18>
   12020:	mov	r2, #5
   12024:	add	r1, pc, r1
   12028:	ldr	r6, [r0]
   1202c:	mov	r0, #0
   12030:	bl	11320 <dcgettext@plt>
   12034:	mov	r1, r6
   12038:	mov	r2, r0
   1203c:	mov	r0, #1
   12040:	bl	113d4 <error@plt>
   12044:	ldrd	r2, [sp, #16]
   12048:	cmp	r3, r9
   1204c:	cmpeq	r2, r8
   12050:	movhi	r2, r8
   12054:	mov	sl, r2
   12058:	mov	r9, r2
   1205c:	b	11b2c <ftello64@plt+0x56c>
   12060:	ldr	ip, [sp, #24]
   12064:	mov	r5, #0
   12068:	ldr	r6, [pc, #876]	; 123dc <ftello64@plt+0xe1c>
   1206c:	mov	r7, #0
   12070:	add	r4, ip, #1
   12074:	ldr	ip, [sp, #40]	; 0x28
   12078:	add	r6, pc, r6
   1207c:	ldr	r9, [sp, #36]	; 0x24
   12080:	rsb	r4, ip, r4
   12084:	ldr	fp, [sp, #60]	; 0x3c
   12088:	subs	r4, r4, #1
   1208c:	mov	r8, ip
   12090:	sbc	r5, r5, #0
   12094:	b	1209c <ftello64@plt+0xadc>
   12098:	add	r7, r7, #1
   1209c:	cmp	r7, sl
   120a0:	beq	11c28 <ftello64@plt+0x668>
   120a4:	mov	r2, r4
   120a8:	mov	r3, r5
   120ac:	mov	r0, fp
   120b0:	bl	144f0 <close_stdout@@Base+0x1d54>
   120b4:	mov	r1, r6
   120b8:	mov	r3, r9
   120bc:	add	r2, r8, r0
   120c0:	mov	r0, #1
   120c4:	bl	114e8 <__printf_chk@plt>
   120c8:	cmp	r0, #0
   120cc:	bge	12098 <ftello64@plt+0xad8>
   120d0:	b	11bfc <ftello64@plt+0x63c>
   120d4:	ldr	r0, [r6, r8, lsl #2]
   120d8:	ldrb	r3, [r0]
   120dc:	cmp	r3, #45	; 0x2d
   120e0:	bne	120f0 <ftello64@plt+0xb30>
   120e4:	ldrb	r3, [r0, #1]
   120e8:	cmp	r3, #0
   120ec:	beq	11dc8 <ftello64@plt+0x808>
   120f0:	cmp	sl, #0
   120f4:	ldr	r3, [pc, #720]	; 123cc <ftello64@plt+0xe0c>
   120f8:	bne	122b8 <ftello64@plt+0xcf8>
   120fc:	ldr	r4, [r5, r3]
   12100:	mov	r1, #2
   12104:	ldr	r0, [r4]
   12108:	bl	1295c <close_stdout@@Base+0x1c0>
   1210c:	cmp	fp, #0
   12110:	beq	11df8 <ftello64@plt+0x838>
   12114:	add	r8, sp, #96	; 0x60
   12118:	ldr	r0, [r4]
   1211c:	mov	r1, r8
   12120:	bl	1534c <close_stdout@@Base+0x2bb0>
   12124:	subs	r4, r0, #0
   12128:	beq	122f4 <ftello64@plt+0xd34>
   1212c:	ldr	r6, [sp, #96]	; 0x60
   12130:	cmp	r6, #0
   12134:	beq	12158 <ftello64@plt+0xb98>
   12138:	add	r3, r4, r6
   1213c:	ldr	ip, [sp, #36]	; 0x24
   12140:	ldrb	r3, [r3, #-1]
   12144:	cmp	r3, ip
   12148:	addne	r3, r6, #1
   1214c:	strne	r3, [sp, #96]	; 0x60
   12150:	strbne	ip, [r4, r6]
   12154:	ldrne	r6, [sp, #96]	; 0x60
   12158:	add	r6, r4, r6
   1215c:	mov	r0, r4
   12160:	mov	r9, #0
   12164:	ldr	r7, [sp, #36]	; 0x24
   12168:	b	12180 <ftello64@plt+0xbc0>
   1216c:	mov	r1, r7
   12170:	rsb	r2, r0, r6
   12174:	bl	1150c <memchr@plt>
   12178:	add	r9, r9, #1
   1217c:	add	r0, r0, #1
   12180:	cmp	r6, r0
   12184:	bhi	1216c <ftello64@plt+0xbac>
   12188:	add	r0, r9, #1
   1218c:	cmn	r0, #-1073741823	; 0xc0000001
   12190:	bhi	12328 <ftello64@plt+0xd68>
   12194:	lsl	r0, r0, #2
   12198:	mov	r7, #1
   1219c:	bl	15b5c <close_stdout@@Base+0x33c0>
   121a0:	str	r4, [r0]
   121a4:	mov	r8, r0
   121a8:	str	r0, [sp, #52]	; 0x34
   121ac:	mov	r0, r4
   121b0:	ldr	r4, [sp, #36]	; 0x24
   121b4:	b	121d0 <ftello64@plt+0xc10>
   121b8:	mov	r1, r4
   121bc:	rsb	r2, r0, r6
   121c0:	bl	1150c <memchr@plt>
   121c4:	add	r7, r7, #1
   121c8:	add	r0, r0, #1
   121cc:	str	r0, [r8, #4]!
   121d0:	cmp	r7, r9
   121d4:	bls	121b8 <ftello64@plt+0xbf8>
   121d8:	b	11ad8 <ftello64@plt+0x518>
   121dc:	ldr	fp, [sp, #56]	; 0x38
   121e0:	mov	r8, #1
   121e4:	ldr	r5, [sp, #68]	; 0x44
   121e8:	mov	r9, #0
   121ec:	b	12004 <ftello64@plt+0xa44>
   121f0:	add	r8, sp, #96	; 0x60
   121f4:	mov	r0, #3
   121f8:	mov	r1, #0
   121fc:	mov	r2, r8
   12200:	bl	11368 <__fxstat64@plt>
   12204:	cmp	r0, #0
   12208:	bne	11df8 <ftello64@plt+0x838>
   1220c:	ldr	r3, [sp, #112]	; 0x70
   12210:	and	r3, r3, #53248	; 0xd000
   12214:	cmp	r3, #32768	; 0x8000
   12218:	bne	11df8 <ftello64@plt+0x838>
   1221c:	mov	r1, #1
   12220:	mov	r2, #0
   12224:	mov	r3, #0
   12228:	str	r1, [sp]
   1222c:	ldrd	r6, [sp, #144]	; 0x90
   12230:	bl	11380 <lseek64@plt>
   12234:	cmp	r0, #0
   12238:	sbcs	r2, r1, #0
   1223c:	blt	11df8 <ftello64@plt+0x838>
   12240:	subs	r0, r6, r0
   12244:	sbc	r1, r7, r1
   12248:	mov	r2, #8388608	; 0x800000
   1224c:	mov	r3, #0
   12250:	cmp	r2, r0
   12254:	sbcs	ip, r3, r1
   12258:	bge	12118 <ftello64@plt+0xb58>
   1225c:	b	11df8 <ftello64@plt+0x838>
   12260:	bl	114a0 <__errno_location@plt>
   12264:	ldr	r4, [r0]
   12268:	ldr	r0, [sp, #16]
   1226c:	bl	14348 <close_stdout@@Base+0x1bac>
   12270:	ldr	r2, [pc, #360]	; 123e0 <ftello64@plt+0xe20>
   12274:	mov	r1, r4
   12278:	add	r2, pc, r2
   1227c:	mov	r3, r0
   12280:	mov	r0, #1
   12284:	bl	113d4 <error@plt>
   12288:	b	11b1c <ftello64@plt+0x55c>
   1228c:	bl	114a0 <__errno_location@plt>
   12290:	ldr	r7, [r0]
   12294:	ldr	r0, [sp, #32]
   12298:	bl	14348 <close_stdout@@Base+0x1bac>
   1229c:	ldr	r2, [pc, #320]	; 123e4 <ftello64@plt+0xe24>
   122a0:	mov	r1, r7
   122a4:	add	r2, pc, r2
   122a8:	mov	r3, r0
   122ac:	mov	r0, #1
   122b0:	bl	113d4 <error@plt>
   122b4:	b	11b80 <ftello64@plt+0x5c0>
   122b8:	ldr	r4, [r5, r3]
   122bc:	ldr	r1, [pc, #292]	; 123e8 <ftello64@plt+0xe28>
   122c0:	ldr	r2, [r4]
   122c4:	add	r1, pc, r1
   122c8:	bl	129ec <close_stdout@@Base+0x250>
   122cc:	cmp	r0, #0
   122d0:	bne	11dd0 <ftello64@plt+0x810>
   122d4:	bl	114a0 <__errno_location@plt>
   122d8:	ldr	r2, [pc, #268]	; 123ec <ftello64@plt+0xe2c>
   122dc:	ldr	r3, [r6, r8, lsl #2]
   122e0:	add	r2, pc, r2
   122e4:	ldr	r1, [r0]
   122e8:	mov	r0, #1
   122ec:	bl	113d4 <error@plt>
   122f0:	b	11dd0 <ftello64@plt+0x810>
   122f4:	bl	114a0 <__errno_location@plt>
   122f8:	ldr	r1, [pc, #240]	; 123f0 <ftello64@plt+0xe30>
   122fc:	mov	r2, #5
   12300:	add	r1, pc, r1
   12304:	ldr	r6, [r0]
   12308:	mov	r0, r4
   1230c:	bl	11320 <dcgettext@plt>
   12310:	mov	r1, r6
   12314:	mov	r2, r0
   12318:	mov	r0, #1
   1231c:	bl	113d4 <error@plt>
   12320:	b	1212c <ftello64@plt+0xb6c>
   12324:	bl	1132c <__stack_chk_fail@plt>
   12328:	bl	15d70 <close_stdout@@Base+0x35d4>
   1232c:	ldr	r1, [pc, #192]	; 123f4 <ftello64@plt+0xe34>
   12330:	mov	r2, #5
   12334:	mov	r0, #0
   12338:	add	r1, pc, r1
   1233c:	bl	11320 <dcgettext@plt>
   12340:	ldr	ip, [sp, #52]	; 0x34
   12344:	mov	r4, r0
   12348:	ldr	r0, [ip, #4]
   1234c:	bl	1449c <close_stdout@@Base+0x1d00>
   12350:	mov	r2, r4
   12354:	mov	r3, r0
   12358:	mov	r0, #0
   1235c:	mov	r1, r0
   12360:	bl	113d4 <error@plt>
   12364:	mov	r0, #1
   12368:	bl	1252c <ftello64@plt+0xf6c>
   1236c:	andeq	r8, r1, r0, lsl sl
   12370:	andeq	r0, r0, ip, lsr r1
   12374:	strdeq	r7, [r0], -r0
   12378:	andeq	r7, r0, ip, ror #12
   1237c:	andeq	r7, r0, r0, lsr #11
   12380:	andeq	r7, r0, r8, lsl r7
   12384:	andeq	r7, r0, r4, asr r6
   12388:	andeq	r7, r0, r0, asr #13
   1238c:	andeq	r0, r0, ip, asr #2
   12390:	muleq	r0, r4, r6
   12394:	andeq	r7, r0, r4, asr r6
   12398:	andeq	r7, r0, r8, lsr #12
   1239c:	andeq	r8, r1, r8, ror r7
   123a0:	andeq	r0, r0, r4, ror r1
   123a4:	andeq	r0, r0, ip, asr r1
   123a8:	andeq	r0, r0, r4, asr #2
   123ac:	andeq	r7, r0, r4, asr #9
   123b0:	andeq	r7, r0, ip, lsr #9
   123b4:	andeq	r7, r0, r0, lsr r3
   123b8:	muleq	r0, r4, r4
   123bc:	andeq	r0, r0, r0, asr #2
   123c0:	andeq	r7, r0, r4, ror #4
   123c4:	ldrdeq	r7, [r0], -r4
   123c8:	ldrdeq	r7, [r0], -ip
   123cc:	andeq	r0, r0, r8, asr r1
   123d0:	andeq	r7, r0, r4
   123d4:	andeq	r6, r0, ip, asr #27
   123d8:	andeq	r6, r0, r4, lsl pc
   123dc:	andeq	r6, r0, ip, asr sp
   123e0:	ldrdeq	r6, [r0], -ip
   123e4:			; <UNDEFINED> instruction: 0x00006bb0
   123e8:	strdeq	r6, [r0], -r0
   123ec:	andeq	r6, r0, r4, ror fp
   123f0:	andeq	r6, r0, r8, lsr ip
   123f4:	andeq	r6, r0, r8, ror #20
   123f8:	mov	fp, #0
   123fc:	mov	lr, #0
   12400:	pop	{r1}		; (ldr r1, [sp], #4)
   12404:	mov	r2, sp
   12408:	push	{r2}		; (str r2, [sp, #-4]!)
   1240c:	push	{r0}		; (str r0, [sp, #-4]!)
   12410:	ldr	ip, [pc, #16]	; 12428 <ftello64@plt+0xe68>
   12414:	push	{ip}		; (str ip, [sp, #-4]!)
   12418:	ldr	r0, [pc, #12]	; 1242c <ftello64@plt+0xe6c>
   1241c:	ldr	r3, [pc, #12]	; 12430 <ftello64@plt+0xe70>
   12420:	bl	11404 <__libc_start_main@plt>
   12424:	bl	1159c <abort@plt>
   12428:	andeq	r8, r1, r8, lsr #16
   1242c:	ldrdeq	r1, [r1], -r0
   12430:	andeq	r8, r1, r4, asr #15
   12434:	ldr	r3, [pc, #20]	; 12450 <ftello64@plt+0xe90>
   12438:	ldr	r2, [pc, #20]	; 12454 <ftello64@plt+0xe94>
   1243c:	add	r3, pc, r3
   12440:	ldr	r2, [r3, r2]
   12444:	cmp	r2, #0
   12448:	bxeq	lr
   1244c:	b	1141c <__gmon_start__@plt>
   12450:			; <UNDEFINED> instruction: 0x00017bbc
   12454:	andeq	r0, r0, r0, asr r1
   12458:	push	{r3, lr}
   1245c:	movw	r0, #41412	; 0xa1c4
   12460:	ldr	r3, [pc, #36]	; 1248c <ftello64@plt+0xecc>
   12464:	movt	r0, #2
   12468:	rsb	r3, r0, r3
   1246c:	cmp	r3, #6
   12470:	popls	{r3, pc}
   12474:	movw	r3, #0
   12478:	movt	r3, #0
   1247c:	cmp	r3, #0
   12480:	popeq	{r3, pc}
   12484:	blx	r3
   12488:	pop	{r3, pc}
   1248c:	andeq	sl, r2, r7, asr #3
   12490:	push	{r3, lr}
   12494:	movw	r0, #41412	; 0xa1c4
   12498:	movw	r3, #41412	; 0xa1c4
   1249c:	movt	r0, #2
   124a0:	movt	r3, #2
   124a4:	rsb	r3, r0, r3
   124a8:	asr	r3, r3, #2
   124ac:	add	r3, r3, r3, lsr #31
   124b0:	asrs	r1, r3, #1
   124b4:	popeq	{r3, pc}
   124b8:	movw	r2, #0
   124bc:	movt	r2, #0
   124c0:	cmp	r2, #0
   124c4:	popeq	{r3, pc}
   124c8:	blx	r2
   124cc:	pop	{r3, pc}
   124d0:	push	{r4, lr}
   124d4:	movw	r4, #41412	; 0xa1c4
   124d8:	movt	r4, #2
   124dc:	ldrb	r3, [r4]
   124e0:	cmp	r3, #0
   124e4:	popne	{r4, pc}
   124e8:	bl	12458 <ftello64@plt+0xe98>
   124ec:	mov	r3, #1
   124f0:	strb	r3, [r4]
   124f4:	pop	{r4, pc}
   124f8:	movw	r0, #40512	; 0x9e40
   124fc:	movt	r0, #2
   12500:	push	{r3, lr}
   12504:	ldr	r3, [r0]
   12508:	cmp	r3, #0
   1250c:	beq	12524 <ftello64@plt+0xf64>
   12510:	movw	r3, #0
   12514:	movt	r3, #0
   12518:	cmp	r3, #0
   1251c:	beq	12524 <ftello64@plt+0xf64>
   12520:	blx	r3
   12524:	pop	{r3, lr}
   12528:	b	12490 <ftello64@plt+0xed0>
   1252c:	push	{r4, r5, r6, lr}
   12530:	subs	r4, r0, #0
   12534:	ldr	r5, [pc, #496]	; 1272c <ftello64@plt+0x116c>
   12538:	sub	sp, sp, #8
   1253c:	add	r5, pc, r5
   12540:	beq	12588 <ftello64@plt+0xfc8>
   12544:	ldr	r3, [pc, #484]	; 12730 <ftello64@plt+0x1170>
   12548:	mov	r2, #5
   1254c:	ldr	r1, [pc, #480]	; 12734 <ftello64@plt+0x1174>
   12550:	mov	r0, #0
   12554:	ldr	r3, [r5, r3]
   12558:	add	r1, pc, r1
   1255c:	ldr	r6, [r3]
   12560:	bl	11320 <dcgettext@plt>
   12564:	ldr	r3, [pc, #460]	; 12738 <ftello64@plt+0x1178>
   12568:	mov	r1, #1
   1256c:	ldr	r3, [r5, r3]
   12570:	ldr	r3, [r3]
   12574:	mov	r2, r0
   12578:	mov	r0, r6
   1257c:	bl	11500 <__fprintf_chk@plt>
   12580:	mov	r0, r4
   12584:	bl	11458 <exit@plt>
   12588:	ldr	r1, [pc, #428]	; 1273c <ftello64@plt+0x117c>
   1258c:	mov	r2, #5
   12590:	add	r1, pc, r1
   12594:	bl	11320 <dcgettext@plt>
   12598:	ldr	r3, [pc, #408]	; 12738 <ftello64@plt+0x1178>
   1259c:	ldr	r6, [r5, r3]
   125a0:	ldr	r3, [r6]
   125a4:	mov	r2, r3
   125a8:	str	r3, [sp]
   125ac:	mov	r1, r0
   125b0:	mov	r0, #1
   125b4:	bl	114e8 <__printf_chk@plt>
   125b8:	ldr	r1, [pc, #384]	; 12740 <ftello64@plt+0x1180>
   125bc:	mov	r2, #5
   125c0:	mov	r0, r4
   125c4:	add	r1, pc, r1
   125c8:	bl	11320 <dcgettext@plt>
   125cc:	ldr	r3, [pc, #368]	; 12744 <ftello64@plt+0x1184>
   125d0:	ldr	r5, [r5, r3]
   125d4:	ldr	r1, [r5]
   125d8:	bl	1126c <fputs_unlocked@plt>
   125dc:	ldr	r1, [pc, #356]	; 12748 <ftello64@plt+0x1188>
   125e0:	mov	r2, #5
   125e4:	mov	r0, r4
   125e8:	add	r1, pc, r1
   125ec:	bl	11320 <dcgettext@plt>
   125f0:	ldr	r1, [r5]
   125f4:	bl	1126c <fputs_unlocked@plt>
   125f8:	ldr	r1, [pc, #332]	; 1274c <ftello64@plt+0x118c>
   125fc:	mov	r2, #5
   12600:	mov	r0, r4
   12604:	add	r1, pc, r1
   12608:	bl	11320 <dcgettext@plt>
   1260c:	ldr	r1, [r5]
   12610:	bl	1126c <fputs_unlocked@plt>
   12614:	ldr	r1, [pc, #308]	; 12750 <ftello64@plt+0x1190>
   12618:	mov	r2, #5
   1261c:	mov	r0, r4
   12620:	add	r1, pc, r1
   12624:	bl	11320 <dcgettext@plt>
   12628:	ldr	r1, [r5]
   1262c:	bl	1126c <fputs_unlocked@plt>
   12630:	ldr	r1, [pc, #284]	; 12754 <ftello64@plt+0x1194>
   12634:	mov	r2, #5
   12638:	mov	r0, r4
   1263c:	add	r1, pc, r1
   12640:	bl	11320 <dcgettext@plt>
   12644:	ldr	r1, [r5]
   12648:	bl	1126c <fputs_unlocked@plt>
   1264c:	ldr	r1, [pc, #260]	; 12758 <ftello64@plt+0x1198>
   12650:	mov	r2, #5
   12654:	mov	r0, r4
   12658:	add	r1, pc, r1
   1265c:	bl	11320 <dcgettext@plt>
   12660:	ldr	r1, [r5]
   12664:	bl	1126c <fputs_unlocked@plt>
   12668:	ldr	r1, [pc, #236]	; 1275c <ftello64@plt+0x119c>
   1266c:	mov	r2, #5
   12670:	mov	r0, r4
   12674:	add	r1, pc, r1
   12678:	bl	11320 <dcgettext@plt>
   1267c:	ldr	r2, [pc, #220]	; 12760 <ftello64@plt+0x11a0>
   12680:	ldr	r3, [pc, #220]	; 12764 <ftello64@plt+0x11a4>
   12684:	add	r2, pc, r2
   12688:	add	r3, pc, r3
   1268c:	mov	r1, r0
   12690:	mov	r0, #1
   12694:	bl	114e8 <__printf_chk@plt>
   12698:	mov	r0, #5
   1269c:	mov	r1, r4
   126a0:	bl	1153c <setlocale@plt>
   126a4:	cmp	r0, #0
   126a8:	beq	126c4 <ftello64@plt+0x1104>
   126ac:	ldr	r1, [pc, #180]	; 12768 <ftello64@plt+0x11a8>
   126b0:	mov	r2, #3
   126b4:	add	r1, pc, r1
   126b8:	bl	11590 <strncmp@plt>
   126bc:	cmp	r0, #0
   126c0:	bne	126f8 <ftello64@plt+0x1138>
   126c4:	ldr	r1, [pc, #160]	; 1276c <ftello64@plt+0x11ac>
   126c8:	mov	r2, #5
   126cc:	mov	r0, #0
   126d0:	add	r1, pc, r1
   126d4:	bl	11320 <dcgettext@plt>
   126d8:	mov	r5, r0
   126dc:	ldr	r0, [r6]
   126e0:	bl	128b4 <close_stdout@@Base+0x118>
   126e4:	mov	r1, r5
   126e8:	mov	r2, r0
   126ec:	mov	r0, #1
   126f0:	bl	114e8 <__printf_chk@plt>
   126f4:	b	12580 <ftello64@plt+0xfc0>
   126f8:	ldr	r1, [pc, #112]	; 12770 <ftello64@plt+0x11b0>
   126fc:	mov	r2, #5
   12700:	mov	r0, r4
   12704:	add	r1, pc, r1
   12708:	bl	11320 <dcgettext@plt>
   1270c:	mov	r5, r0
   12710:	ldr	r0, [r6]
   12714:	bl	128b4 <close_stdout@@Base+0x118>
   12718:	mov	r1, r5
   1271c:	mov	r2, r0
   12720:	mov	r0, #1
   12724:	bl	114e8 <__printf_chk@plt>
   12728:	b	126c4 <ftello64@plt+0x1104>
   1272c:			; <UNDEFINED> instruction: 0x00017abc
   12730:	andeq	r0, r0, r8, asr #2
   12734:	andeq	r6, r0, r8, lsl #6
   12738:	andeq	r0, r0, r8, ror #2
   1273c:	strdeq	r6, [r0], -r8
   12740:	andeq	r6, r0, r4, lsr #6
   12744:	andeq	r0, r0, ip, asr r1
   12748:	andeq	r6, r0, r4, asr #6
   1274c:	andeq	r6, r0, r4, ror r3
   12750:	andeq	r6, r0, r4, lsl r5
   12754:	andeq	r6, r0, r8, lsr #10
   12758:	andeq	r6, r0, r4, asr #10
   1275c:	andeq	r6, r0, r0, ror #10
   12760:	andeq	r6, r0, r8, ror #10
   12764:	andeq	r6, r0, r4, ror r5
   12768:	andeq	r6, r0, r0, ror r5
   1276c:	andeq	r6, r0, r0, lsr #11
   12770:	andeq	r6, r0, r4, lsr #10
   12774:	ldr	r3, [pc, #8]	; 12784 <ftello64@plt+0x11c4>
   12778:	add	r3, pc, r3
   1277c:	str	r0, [r3]
   12780:	bx	lr
   12784:	andeq	r7, r1, r8, asr #20
   12788:	ldr	r3, [pc, #8]	; 12798 <ftello64@plt+0x11d8>
   1278c:	add	r3, pc, r3
   12790:	strb	r0, [r3, #4]
   12794:	bx	lr
   12798:	andeq	r7, r1, r4, lsr sl

0001279c <close_stdout@@Base>:
   1279c:	push	{r4, r5, r6, r7, lr}
   127a0:	sub	sp, sp, #12
   127a4:	ldr	r4, [pc, #228]	; 12890 <close_stdout@@Base+0xf4>
   127a8:	ldr	r3, [pc, #228]	; 12894 <close_stdout@@Base+0xf8>
   127ac:	add	r4, pc, r4
   127b0:	ldr	r3, [r4, r3]
   127b4:	ldr	r0, [r3]
   127b8:	bl	164a8 <close_stdout@@Base+0x3d0c>
   127bc:	cmp	r0, #0
   127c0:	beq	127e8 <close_stdout@@Base+0x4c>
   127c4:	ldr	r3, [pc, #204]	; 12898 <close_stdout@@Base+0xfc>
   127c8:	add	r3, pc, r3
   127cc:	ldrb	r3, [r3, #4]
   127d0:	cmp	r3, #0
   127d4:	beq	12808 <close_stdout@@Base+0x6c>
   127d8:	bl	114a0 <__errno_location@plt>
   127dc:	ldr	r3, [r0]
   127e0:	cmp	r3, #32
   127e4:	bne	12808 <close_stdout@@Base+0x6c>
   127e8:	ldr	r3, [pc, #172]	; 1289c <close_stdout@@Base+0x100>
   127ec:	ldr	r3, [r4, r3]
   127f0:	ldr	r0, [r3]
   127f4:	bl	164a8 <close_stdout@@Base+0x3d0c>
   127f8:	cmp	r0, #0
   127fc:	bne	1285c <close_stdout@@Base+0xc0>
   12800:	add	sp, sp, #12
   12804:	pop	{r4, r5, r6, r7, pc}
   12808:	ldr	r1, [pc, #144]	; 128a0 <close_stdout@@Base+0x104>
   1280c:	mov	r0, #0
   12810:	mov	r2, #5
   12814:	add	r1, pc, r1
   12818:	bl	11320 <dcgettext@plt>
   1281c:	ldr	r3, [pc, #128]	; 128a4 <close_stdout@@Base+0x108>
   12820:	ldr	r5, [pc, r3]
   12824:	cmp	r5, #0
   12828:	mov	r6, r0
   1282c:	beq	1286c <close_stdout@@Base+0xd0>
   12830:	bl	114a0 <__errno_location@plt>
   12834:	ldr	r7, [r0]
   12838:	mov	r0, r5
   1283c:	bl	14348 <close_stdout@@Base+0x1bac>
   12840:	ldr	r2, [pc, #96]	; 128a8 <close_stdout@@Base+0x10c>
   12844:	str	r6, [sp]
   12848:	mov	r1, r7
   1284c:	add	r2, pc, r2
   12850:	mov	r3, r0
   12854:	mov	r0, #0
   12858:	bl	113d4 <error@plt>
   1285c:	ldr	r3, [pc, #72]	; 128ac <close_stdout@@Base+0x110>
   12860:	ldr	r3, [r4, r3]
   12864:	ldr	r0, [r3]
   12868:	bl	112d8 <_exit@plt>
   1286c:	bl	114a0 <__errno_location@plt>
   12870:	ldr	r2, [pc, #56]	; 128b0 <close_stdout@@Base+0x114>
   12874:	add	r2, pc, r2
   12878:	mov	r3, r0
   1287c:	mov	r0, r5
   12880:	ldr	r1, [r3]
   12884:	mov	r3, r6
   12888:	bl	113d4 <error@plt>
   1288c:	b	1285c <close_stdout@@Base+0xc0>
   12890:	andeq	r7, r1, ip, asr #16
   12894:	andeq	r0, r0, ip, asr r1
   12898:	strdeq	r7, [r1], -r8
   1289c:	andeq	r0, r0, r8, asr #2
   128a0:	andeq	r6, r0, r8, asr #11
   128a4:	andeq	r7, r1, r0, lsr #19
   128a8:	andeq	r6, r0, r4, lsl #12
   128ac:	andeq	r0, r0, r0, ror #2
   128b0:	andeq	r6, r0, r0, ror #11
   128b4:	ldrb	r3, [r0]
   128b8:	cmp	r3, #47	; 0x2f
   128bc:	bne	128d8 <close_stdout@@Base+0x13c>
   128c0:	add	r2, r0, #1
   128c4:	mov	r0, r2
   128c8:	add	r2, r2, #1
   128cc:	ldrb	r3, [r0]
   128d0:	cmp	r3, #47	; 0x2f
   128d4:	beq	128c4 <close_stdout@@Base+0x128>
   128d8:	cmp	r3, #0
   128dc:	bxeq	lr
   128e0:	mov	r2, r0
   128e4:	mov	r1, #0
   128e8:	cmp	r3, #47	; 0x2f
   128ec:	moveq	r1, #1
   128f0:	beq	12900 <close_stdout@@Base+0x164>
   128f4:	cmp	r1, #0
   128f8:	movne	r0, r2
   128fc:	movne	r1, #0
   12900:	ldrb	r3, [r2, #1]!
   12904:	cmp	r3, #0
   12908:	bne	128e8 <close_stdout@@Base+0x14c>
   1290c:	bx	lr
   12910:	push	{r4, lr}
   12914:	mov	r4, r0
   12918:	bl	11470 <strlen@plt>
   1291c:	cmp	r0, #1
   12920:	popls	{r4, pc}
   12924:	sub	r3, r0, #1
   12928:	ldrb	r2, [r4, r3]
   1292c:	cmp	r2, #47	; 0x2f
   12930:	popne	{r4, pc}
   12934:	mov	r0, r3
   12938:	cmp	r0, #1
   1293c:	sub	r3, r3, #1
   12940:	beq	12954 <close_stdout@@Base+0x1b8>
   12944:	ldrb	r2, [r4, r3]
   12948:	cmp	r2, #47	; 0x2f
   1294c:	popne	{r4, pc}
   12950:	b	12934 <close_stdout@@Base+0x198>
   12954:	pop	{r4, pc}
   12958:	b	11290 <posix_fadvise64@plt>
   1295c:	cmp	r0, #0
   12960:	push	{r4, r5, r6, lr}
   12964:	mov	r6, r1
   12968:	sub	sp, sp, #16
   1296c:	beq	12990 <close_stdout@@Base+0x1f4>
   12970:	mov	r4, #0
   12974:	mov	r5, #0
   12978:	bl	114f4 <fileno@plt>
   1297c:	str	r6, [sp, #8]
   12980:	mov	r2, r4
   12984:	mov	r3, r5
   12988:	strd	r4, [sp]
   1298c:	bl	12958 <close_stdout@@Base+0x1bc>
   12990:	add	sp, sp, #16
   12994:	pop	{r4, r5, r6, pc}
   12998:	push	{r4, lr}
   1299c:	mov	r4, r0
   129a0:	ldr	r0, [pc, #64]	; 129e8 <close_stdout@@Base+0x24c>
   129a4:	mov	r1, #0
   129a8:	add	r0, pc, r0
   129ac:	bl	113e0 <open64@plt>
   129b0:	cmp	r4, r0
   129b4:	mov	r3, r0
   129b8:	moveq	r3, #1
   129bc:	beq	129e0 <close_stdout@@Base+0x244>
   129c0:	cmp	r3, #0
   129c4:	movlt	r3, #0
   129c8:	blt	129e0 <close_stdout@@Base+0x244>
   129cc:	bl	115a8 <close@plt>
   129d0:	bl	114a0 <__errno_location@plt>
   129d4:	mov	r3, #0
   129d8:	mov	r2, #9
   129dc:	str	r2, [r0]
   129e0:	mov	r0, r3
   129e4:	pop	{r4, pc}
   129e8:			; <UNDEFINED> instruction: 0x000064b0
   129ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129f0:	mov	r9, r0
   129f4:	mov	r0, r2
   129f8:	mov	r7, r2
   129fc:	mov	sl, r1
   12a00:	bl	114f4 <fileno@plt>
   12a04:	cmp	r0, #1
   12a08:	beq	12b3c <close_stdout@@Base+0x3a0>
   12a0c:	cmp	r0, #2
   12a10:	beq	12b34 <close_stdout@@Base+0x398>
   12a14:	cmp	r0, #0
   12a18:	beq	12adc <close_stdout@@Base+0x340>
   12a1c:	mov	r0, #2
   12a20:	mov	r1, r0
   12a24:	bl	11338 <dup2@plt>
   12a28:	subs	r5, r0, #2
   12a2c:	movne	r5, #1
   12a30:	mov	r0, #1
   12a34:	mov	r1, r0
   12a38:	bl	11338 <dup2@plt>
   12a3c:	subs	r6, r0, #1
   12a40:	movne	r6, #1
   12a44:	mov	r0, #0
   12a48:	mov	r1, r0
   12a4c:	bl	11338 <dup2@plt>
   12a50:	cmp	r0, #0
   12a54:	beq	12ae4 <close_stdout@@Base+0x348>
   12a58:	mov	r0, #0
   12a5c:	bl	12998 <close_stdout@@Base+0x1fc>
   12a60:	cmp	r0, #0
   12a64:	moveq	r4, r0
   12a68:	moveq	r8, #1
   12a6c:	beq	12aa8 <close_stdout@@Base+0x30c>
   12a70:	cmp	r6, #0
   12a74:	mov	r8, #1
   12a78:	bne	12af0 <close_stdout@@Base+0x354>
   12a7c:	cmp	r5, #0
   12a80:	beq	12a94 <close_stdout@@Base+0x2f8>
   12a84:	mov	r0, #2
   12a88:	bl	12998 <close_stdout@@Base+0x1fc>
   12a8c:	subs	r4, r0, #0
   12a90:	beq	12b1c <close_stdout@@Base+0x380>
   12a94:	mov	r0, r9
   12a98:	mov	r1, sl
   12a9c:	mov	r2, r7
   12aa0:	bl	11428 <freopen64@plt>
   12aa4:	mov	r4, r0
   12aa8:	bl	114a0 <__errno_location@plt>
   12aac:	cmp	r5, #0
   12ab0:	mov	r7, r0
   12ab4:	ldr	r5, [r0]
   12ab8:	bne	12b28 <close_stdout@@Base+0x38c>
   12abc:	cmp	r6, #0
   12ac0:	bne	12b10 <close_stdout@@Base+0x374>
   12ac4:	cmp	r8, #0
   12ac8:	bne	12b04 <close_stdout@@Base+0x368>
   12acc:	cmp	r4, #0
   12ad0:	mov	r0, r4
   12ad4:	streq	r5, [r7]
   12ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12adc:	mov	r5, r0
   12ae0:	mov	r6, r0
   12ae4:	cmp	r6, #0
   12ae8:	mov	r8, #0
   12aec:	beq	12a7c <close_stdout@@Base+0x2e0>
   12af0:	mov	r0, #1
   12af4:	bl	12998 <close_stdout@@Base+0x1fc>
   12af8:	cmp	r0, #0
   12afc:	bne	12a7c <close_stdout@@Base+0x2e0>
   12b00:	b	12aa4 <close_stdout@@Base+0x308>
   12b04:	mov	r0, #0
   12b08:	bl	115a8 <close@plt>
   12b0c:	b	12acc <close_stdout@@Base+0x330>
   12b10:	mov	r0, #1
   12b14:	bl	115a8 <close@plt>
   12b18:	b	12ac4 <close_stdout@@Base+0x328>
   12b1c:	bl	114a0 <__errno_location@plt>
   12b20:	ldr	r5, [r0]
   12b24:	mov	r7, r0
   12b28:	mov	r0, #2
   12b2c:	bl	115a8 <close@plt>
   12b30:	b	12abc <close_stdout@@Base+0x320>
   12b34:	mov	r5, #0
   12b38:	b	12a30 <close_stdout@@Base+0x294>
   12b3c:	mov	r5, #0
   12b40:	mov	r6, r5
   12b44:	b	12a44 <close_stdout@@Base+0x2a8>
   12b48:	mov	r1, #0
   12b4c:	mov	r2, #20
   12b50:	b	114d0 <memset@plt>
   12b54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b58:	mov	r5, r1
   12b5c:	ldr	r3, [r1]
   12b60:	mov	r9, r0
   12b64:	ldr	sl, [r0, #8]
   12b68:	mov	r7, r2
   12b6c:	tst	r3, #16
   12b70:	ldr	r8, [r0]
   12b74:	moveq	r4, sl
   12b78:	add	r8, sl, r8
   12b7c:	beq	12b94 <close_stdout@@Base+0x3f8>
   12b80:	b	12bf8 <close_stdout@@Base+0x45c>
   12b84:	cmp	r6, r7
   12b88:	strb	r6, [r4]
   12b8c:	add	r4, r4, #1
   12b90:	beq	12be8 <close_stdout@@Base+0x44c>
   12b94:	ldmib	r5, {r3, ip}
   12b98:	cmp	r3, ip
   12b9c:	bcs	12c00 <close_stdout@@Base+0x464>
   12ba0:	add	ip, r3, #1
   12ba4:	str	ip, [r5, #4]
   12ba8:	ldrb	r6, [r3]
   12bac:	cmp	r4, r8
   12bb0:	bne	12b84 <close_stdout@@Base+0x3e8>
   12bb4:	mov	r0, sl
   12bb8:	mov	r1, r9
   12bbc:	ldr	r4, [r9]
   12bc0:	bl	15cac <close_stdout@@Base+0x3510>
   12bc4:	ldr	r8, [r9]
   12bc8:	cmp	r6, r7
   12bcc:	add	r4, r0, r4
   12bd0:	str	r0, [r9, #8]
   12bd4:	mov	sl, r0
   12bd8:	add	r8, r0, r8
   12bdc:	strb	r6, [r4]
   12be0:	add	r4, r4, #1
   12be4:	bne	12b94 <close_stdout@@Base+0x3f8>
   12be8:	rsb	r4, sl, r4
   12bec:	mov	r0, r9
   12bf0:	str	r4, [r9, #4]
   12bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12bf8:	mov	r0, #0
   12bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c00:	mov	r0, r5
   12c04:	bl	11530 <__uflow@plt>
   12c08:	cmn	r0, #1
   12c0c:	mov	r6, r0
   12c10:	bne	12bac <close_stdout@@Base+0x410>
   12c14:	cmp	r4, sl
   12c18:	beq	12bf8 <close_stdout@@Base+0x45c>
   12c1c:	ldr	r3, [r5]
   12c20:	tst	r3, #32
   12c24:	bne	12bf8 <close_stdout@@Base+0x45c>
   12c28:	ldrb	r3, [r4, #-1]
   12c2c:	cmp	r3, r7
   12c30:	beq	12be8 <close_stdout@@Base+0x44c>
   12c34:	mov	r6, r7
   12c38:	b	12bac <close_stdout@@Base+0x410>
   12c3c:	mov	r2, #10
   12c40:	b	12b54 <close_stdout@@Base+0x3b8>
   12c44:	ldr	r0, [r0, #8]
   12c48:	b	112c0 <free@plt>
   12c4c:	push	{r3, r4, r5, r6, r7, lr}
   12c50:	subs	r4, r0, #0
   12c54:	ldr	r5, [pc, #172]	; 12d08 <close_stdout@@Base+0x56c>
   12c58:	add	r5, pc, r5
   12c5c:	beq	12ce4 <close_stdout@@Base+0x548>
   12c60:	mov	r1, #47	; 0x2f
   12c64:	bl	11548 <strrchr@plt>
   12c68:	subs	r6, r0, #0
   12c6c:	beq	12cc8 <close_stdout@@Base+0x52c>
   12c70:	add	r7, r6, #1
   12c74:	rsb	r3, r4, r7
   12c78:	cmp	r3, #6
   12c7c:	ble	12cc8 <close_stdout@@Base+0x52c>
   12c80:	ldr	r1, [pc, #132]	; 12d0c <close_stdout@@Base+0x570>
   12c84:	sub	r0, r6, #6
   12c88:	mov	r2, #7
   12c8c:	add	r1, pc, r1
   12c90:	bl	11590 <strncmp@plt>
   12c94:	cmp	r0, #0
   12c98:	bne	12cc8 <close_stdout@@Base+0x52c>
   12c9c:	ldr	r1, [pc, #108]	; 12d10 <close_stdout@@Base+0x574>
   12ca0:	mov	r0, r7
   12ca4:	mov	r2, #3
   12ca8:	add	r1, pc, r1
   12cac:	bl	11590 <strncmp@plt>
   12cb0:	cmp	r0, #0
   12cb4:	movne	r4, r7
   12cb8:	ldreq	r3, [pc, #84]	; 12d14 <close_stdout@@Base+0x578>
   12cbc:	addeq	r4, r6, #4
   12cc0:	ldreq	r3, [r5, r3]
   12cc4:	streq	r4, [r3]
   12cc8:	ldr	r2, [pc, #72]	; 12d18 <close_stdout@@Base+0x57c>
   12ccc:	ldr	r3, [pc, #72]	; 12d1c <close_stdout@@Base+0x580>
   12cd0:	ldr	r2, [r5, r2]
   12cd4:	str	r4, [r2]
   12cd8:	ldr	r3, [r5, r3]
   12cdc:	str	r4, [r3]
   12ce0:	pop	{r3, r4, r5, r6, r7, pc}
   12ce4:	ldr	r3, [pc, #52]	; 12d20 <close_stdout@@Base+0x584>
   12ce8:	mov	r1, #1
   12cec:	ldr	r0, [pc, #48]	; 12d24 <close_stdout@@Base+0x588>
   12cf0:	mov	r2, #55	; 0x37
   12cf4:	ldr	r3, [r5, r3]
   12cf8:	add	r0, pc, r0
   12cfc:	ldr	r3, [r3]
   12d00:	bl	11374 <fwrite@plt>
   12d04:	bl	1159c <abort@plt>
   12d08:	andeq	r7, r1, r0, lsr #7
   12d0c:	andeq	r6, r0, r0, lsl r2
   12d10:	strdeq	r6, [r0], -ip
   12d14:	andeq	r0, r0, r0, ror r1
   12d18:	andeq	r0, r0, r8, ror #2
   12d1c:	andeq	r0, r0, r4, ror #2
   12d20:	andeq	r0, r0, r8, asr #2
   12d24:	andeq	r6, r0, ip, ror #2
   12d28:	push	{r3, lr}
   12d2c:	mov	r3, r0
   12d30:	mov	r2, #0
   12d34:	cmp	r1, #8
   12d38:	str	r2, [r3], #4
   12d3c:	add	r3, r3, #4
   12d40:	str	r2, [r0, #4]
   12d44:	str	r2, [r3], #4
   12d48:	str	r2, [r3], #4
   12d4c:	str	r2, [r3], #4
   12d50:	str	r2, [r3], #4
   12d54:	str	r2, [r3], #4
   12d58:	str	r2, [r3], #4
   12d5c:	str	r2, [r3], #4
   12d60:	str	r2, [r3], #4
   12d64:	str	r2, [r3], #4
   12d68:	str	r2, [r3]
   12d6c:	beq	12d78 <close_stdout@@Base+0x5dc>
   12d70:	str	r1, [r0]
   12d74:	pop	{r3, pc}
   12d78:	bl	1159c <abort@plt>
   12d7c:	push	{r4, r5, r6, lr}
   12d80:	mov	r4, r0
   12d84:	mov	r6, r1
   12d88:	mov	r0, #0
   12d8c:	mov	r1, r4
   12d90:	mov	r2, #5
   12d94:	bl	11320 <dcgettext@plt>
   12d98:	cmp	r0, r4
   12d9c:	mov	r5, r0
   12da0:	beq	12da8 <close_stdout@@Base+0x60c>
   12da4:	pop	{r4, r5, r6, pc}
   12da8:	bl	17698 <close_stdout@@Base+0x4efc>
   12dac:	ldrb	r3, [r0]
   12db0:	bic	r3, r3, #32
   12db4:	cmp	r3, #85	; 0x55
   12db8:	bne	12e2c <close_stdout@@Base+0x690>
   12dbc:	ldrb	r3, [r0, #1]
   12dc0:	bic	r3, r3, #32
   12dc4:	cmp	r3, #84	; 0x54
   12dc8:	bne	12e18 <close_stdout@@Base+0x67c>
   12dcc:	ldrb	r3, [r0, #2]
   12dd0:	bic	r3, r3, #32
   12dd4:	cmp	r3, #70	; 0x46
   12dd8:	bne	12e18 <close_stdout@@Base+0x67c>
   12ddc:	ldrb	r3, [r0, #3]
   12de0:	cmp	r3, #45	; 0x2d
   12de4:	bne	12e18 <close_stdout@@Base+0x67c>
   12de8:	ldrb	r3, [r0, #4]
   12dec:	cmp	r3, #56	; 0x38
   12df0:	bne	12e18 <close_stdout@@Base+0x67c>
   12df4:	ldrb	r3, [r0, #5]
   12df8:	cmp	r3, #0
   12dfc:	bne	12e18 <close_stdout@@Base+0x67c>
   12e00:	ldrb	r3, [r5]
   12e04:	cmp	r3, #96	; 0x60
   12e08:	beq	12ea4 <close_stdout@@Base+0x708>
   12e0c:	ldr	r0, [pc, #180]	; 12ec8 <close_stdout@@Base+0x72c>
   12e10:	add	r0, pc, r0
   12e14:	pop	{r4, r5, r6, pc}
   12e18:	cmp	r6, #7
   12e1c:	beq	12eb0 <close_stdout@@Base+0x714>
   12e20:	ldr	r0, [pc, #164]	; 12ecc <close_stdout@@Base+0x730>
   12e24:	add	r0, pc, r0
   12e28:	pop	{r4, r5, r6, pc}
   12e2c:	cmp	r3, #71	; 0x47
   12e30:	bne	12e18 <close_stdout@@Base+0x67c>
   12e34:	ldrb	r3, [r0, #1]
   12e38:	bic	r3, r3, #32
   12e3c:	cmp	r3, #66	; 0x42
   12e40:	bne	12e18 <close_stdout@@Base+0x67c>
   12e44:	ldrb	r3, [r0, #2]
   12e48:	cmp	r3, #49	; 0x31
   12e4c:	bne	12e18 <close_stdout@@Base+0x67c>
   12e50:	ldrb	r3, [r0, #3]
   12e54:	cmp	r3, #56	; 0x38
   12e58:	bne	12e18 <close_stdout@@Base+0x67c>
   12e5c:	ldrb	r3, [r0, #4]
   12e60:	cmp	r3, #48	; 0x30
   12e64:	bne	12e18 <close_stdout@@Base+0x67c>
   12e68:	ldrb	r3, [r0, #5]
   12e6c:	cmp	r3, #51	; 0x33
   12e70:	bne	12e18 <close_stdout@@Base+0x67c>
   12e74:	ldrb	r3, [r0, #6]
   12e78:	cmp	r3, #48	; 0x30
   12e7c:	bne	12e18 <close_stdout@@Base+0x67c>
   12e80:	ldrb	r3, [r0, #7]
   12e84:	cmp	r3, #0
   12e88:	bne	12e18 <close_stdout@@Base+0x67c>
   12e8c:	ldrb	r3, [r5]
   12e90:	cmp	r3, #96	; 0x60
   12e94:	beq	12ebc <close_stdout@@Base+0x720>
   12e98:	ldr	r0, [pc, #48]	; 12ed0 <close_stdout@@Base+0x734>
   12e9c:	add	r0, pc, r0
   12ea0:	pop	{r4, r5, r6, pc}
   12ea4:	ldr	r0, [pc, #40]	; 12ed4 <close_stdout@@Base+0x738>
   12ea8:	add	r0, pc, r0
   12eac:	pop	{r4, r5, r6, pc}
   12eb0:	ldr	r0, [pc, #32]	; 12ed8 <close_stdout@@Base+0x73c>
   12eb4:	add	r0, pc, r0
   12eb8:	pop	{r4, r5, r6, pc}
   12ebc:	ldr	r0, [pc, #24]	; 12edc <close_stdout@@Base+0x740>
   12ec0:	add	r0, pc, r0
   12ec4:	pop	{r4, r5, r6, pc}
   12ec8:	strheq	r6, [r0], -r8
   12ecc:	andeq	r6, r0, ip, lsr #1
   12ed0:	andeq	r6, r0, r0, lsr r0
   12ed4:	andeq	r6, r0, r4, lsr r0
   12ed8:	andeq	r6, r0, r0, lsr #32
   12edc:	andeq	r6, r0, r8, lsl r0
   12ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee4:	sub	sp, sp, #124	; 0x7c
   12ee8:	ldr	ip, [pc, #3304]	; 13bd8 <close_stdout@@Base+0x143c>
   12eec:	mov	sl, r1
   12ef0:	str	r0, [sp, #40]	; 0x28
   12ef4:	mov	r8, r3
   12ef8:	ldr	r0, [pc, #3292]	; 13bdc <close_stdout@@Base+0x1440>
   12efc:	add	ip, pc, ip
   12f00:	str	r2, [sp, #32]
   12f04:	ldr	r1, [sp, #164]	; 0xa4
   12f08:	mov	r3, ip
   12f0c:	ldr	r0, [ip, r0]
   12f10:	ldr	r2, [sp, #172]	; 0xac
   12f14:	ubfx	r1, r1, #1, #1
   12f18:	str	r1, [sp, #36]	; 0x24
   12f1c:	str	r0, [sp, #56]	; 0x38
   12f20:	ldr	r0, [sp, #168]	; 0xa8
   12f24:	ldr	r1, [sp, #176]	; 0xb0
   12f28:	str	r2, [sp, #72]	; 0x48
   12f2c:	str	r0, [sp, #48]	; 0x30
   12f30:	ldr	r0, [sp, #56]	; 0x38
   12f34:	str	r1, [sp, #68]	; 0x44
   12f38:	ldr	r3, [r0]
   12f3c:	str	r3, [sp, #116]	; 0x74
   12f40:	bl	1138c <__ctype_get_mb_cur_max@plt>
   12f44:	ldr	r2, [sp, #160]	; 0xa0
   12f48:	str	r0, [sp, #64]	; 0x40
   12f4c:	cmp	r2, #8
   12f50:	addls	pc, pc, r2, lsl #2
   12f54:	b	13ab4 <close_stdout@@Base+0x1318>
   12f58:	b	12f7c <close_stdout@@Base+0x7e0>
   12f5c:	b	137cc <close_stdout@@Base+0x1030>
   12f60:	b	137fc <close_stdout@@Base+0x1060>
   12f64:	b	136ac <close_stdout@@Base+0xf10>
   12f68:	b	136ec <close_stdout@@Base+0xf50>
   12f6c:	b	13718 <close_stdout@@Base+0xf7c>
   12f70:	b	13738 <close_stdout@@Base+0xf9c>
   12f74:	b	13738 <close_stdout@@Base+0xf9c>
   12f78:	b	13738 <close_stdout@@Base+0xf9c>
   12f7c:	mov	r2, #0
   12f80:	str	r2, [sp, #36]	; 0x24
   12f84:	mov	r9, r2
   12f88:	str	r2, [sp, #24]
   12f8c:	str	r2, [sp, #28]
   12f90:	str	r2, [sp, #52]	; 0x34
   12f94:	ldr	r0, [sp, #36]	; 0x24
   12f98:	mov	fp, #0
   12f9c:	ldr	r1, [sp, #24]
   12fa0:	eor	r2, r0, #1
   12fa4:	eor	r3, r1, #1
   12fa8:	and	r3, r2, r3
   12fac:	and	r2, r1, r0
   12fb0:	str	r3, [sp, #44]	; 0x2c
   12fb4:	str	r2, [sp, #76]	; 0x4c
   12fb8:	cmn	r8, #1
   12fbc:	beq	1333c <close_stdout@@Base+0xba0>
   12fc0:	subs	r3, fp, r8
   12fc4:	movne	r3, #1
   12fc8:	cmp	r3, #0
   12fcc:	beq	13354 <close_stdout@@Base+0xbb8>
   12fd0:	ldr	r3, [sp, #28]
   12fd4:	ldr	r0, [sp, #24]
   12fd8:	adds	r7, r3, #0
   12fdc:	movne	r7, #1
   12fe0:	ands	r6, r7, r0
   12fe4:	bne	13840 <close_stdout@@Base+0x10a4>
   12fe8:	ldr	r1, [sp, #32]
   12fec:	add	r5, r1, fp
   12ff0:	ldrb	r4, [r5]
   12ff4:	cmp	r4, #126	; 0x7e
   12ff8:	addls	pc, pc, r4, lsl #2
   12ffc:	b	135c0 <close_stdout@@Base+0xe24>
   13000:	b	134cc <close_stdout@@Base+0xd30>
   13004:	b	135c0 <close_stdout@@Base+0xe24>
   13008:	b	135c0 <close_stdout@@Base+0xe24>
   1300c:	b	135c0 <close_stdout@@Base+0xe24>
   13010:	b	135c0 <close_stdout@@Base+0xe24>
   13014:	b	135c0 <close_stdout@@Base+0xe24>
   13018:	b	135c0 <close_stdout@@Base+0xe24>
   1301c:	b	134b4 <close_stdout@@Base+0xd18>
   13020:	b	1349c <close_stdout@@Base+0xd00>
   13024:	b	134c4 <close_stdout@@Base+0xd28>
   13028:	b	134bc <close_stdout@@Base+0xd20>
   1302c:	b	134ac <close_stdout@@Base+0xd10>
   13030:	b	134a4 <close_stdout@@Base+0xd08>
   13034:	b	13468 <close_stdout@@Base+0xccc>
   13038:	b	135c0 <close_stdout@@Base+0xe24>
   1303c:	b	135c0 <close_stdout@@Base+0xe24>
   13040:	b	135c0 <close_stdout@@Base+0xe24>
   13044:	b	135c0 <close_stdout@@Base+0xe24>
   13048:	b	135c0 <close_stdout@@Base+0xe24>
   1304c:	b	135c0 <close_stdout@@Base+0xe24>
   13050:	b	135c0 <close_stdout@@Base+0xe24>
   13054:	b	135c0 <close_stdout@@Base+0xe24>
   13058:	b	135c0 <close_stdout@@Base+0xe24>
   1305c:	b	135c0 <close_stdout@@Base+0xe24>
   13060:	b	135c0 <close_stdout@@Base+0xe24>
   13064:	b	135c0 <close_stdout@@Base+0xe24>
   13068:	b	135c0 <close_stdout@@Base+0xe24>
   1306c:	b	135c0 <close_stdout@@Base+0xe24>
   13070:	b	135c0 <close_stdout@@Base+0xe24>
   13074:	b	135c0 <close_stdout@@Base+0xe24>
   13078:	b	135c0 <close_stdout@@Base+0xe24>
   1307c:	b	135c0 <close_stdout@@Base+0xe24>
   13080:	b	133f4 <close_stdout@@Base+0xc58>
   13084:	b	133f4 <close_stdout@@Base+0xc58>
   13088:	b	133f4 <close_stdout@@Base+0xc58>
   1308c:	b	133ec <close_stdout@@Base+0xc50>
   13090:	b	133f4 <close_stdout@@Base+0xc58>
   13094:	b	132c8 <close_stdout@@Base+0xb2c>
   13098:	b	133f4 <close_stdout@@Base+0xc58>
   1309c:	b	13568 <close_stdout@@Base+0xdcc>
   130a0:	b	133f4 <close_stdout@@Base+0xc58>
   130a4:	b	133f4 <close_stdout@@Base+0xc58>
   130a8:	b	133f4 <close_stdout@@Base+0xc58>
   130ac:	b	132c8 <close_stdout@@Base+0xb2c>
   130b0:	b	132c8 <close_stdout@@Base+0xb2c>
   130b4:	b	132c8 <close_stdout@@Base+0xb2c>
   130b8:	b	132c8 <close_stdout@@Base+0xb2c>
   130bc:	b	132c8 <close_stdout@@Base+0xb2c>
   130c0:	b	132c8 <close_stdout@@Base+0xb2c>
   130c4:	b	132c8 <close_stdout@@Base+0xb2c>
   130c8:	b	132c8 <close_stdout@@Base+0xb2c>
   130cc:	b	132c8 <close_stdout@@Base+0xb2c>
   130d0:	b	132c8 <close_stdout@@Base+0xb2c>
   130d4:	b	132c8 <close_stdout@@Base+0xb2c>
   130d8:	b	132c8 <close_stdout@@Base+0xb2c>
   130dc:	b	132c8 <close_stdout@@Base+0xb2c>
   130e0:	b	132c8 <close_stdout@@Base+0xb2c>
   130e4:	b	132c8 <close_stdout@@Base+0xb2c>
   130e8:	b	132c8 <close_stdout@@Base+0xb2c>
   130ec:	b	133f4 <close_stdout@@Base+0xc58>
   130f0:	b	133f4 <close_stdout@@Base+0xc58>
   130f4:	b	133f4 <close_stdout@@Base+0xc58>
   130f8:	b	133f4 <close_stdout@@Base+0xc58>
   130fc:	b	131fc <close_stdout@@Base+0xa60>
   13100:	b	135c0 <close_stdout@@Base+0xe24>
   13104:	b	132c8 <close_stdout@@Base+0xb2c>
   13108:	b	132c8 <close_stdout@@Base+0xb2c>
   1310c:	b	132c8 <close_stdout@@Base+0xb2c>
   13110:	b	132c8 <close_stdout@@Base+0xb2c>
   13114:	b	132c8 <close_stdout@@Base+0xb2c>
   13118:	b	132c8 <close_stdout@@Base+0xb2c>
   1311c:	b	132c8 <close_stdout@@Base+0xb2c>
   13120:	b	132c8 <close_stdout@@Base+0xb2c>
   13124:	b	132c8 <close_stdout@@Base+0xb2c>
   13128:	b	132c8 <close_stdout@@Base+0xb2c>
   1312c:	b	132c8 <close_stdout@@Base+0xb2c>
   13130:	b	132c8 <close_stdout@@Base+0xb2c>
   13134:	b	132c8 <close_stdout@@Base+0xb2c>
   13138:	b	132c8 <close_stdout@@Base+0xb2c>
   1313c:	b	132c8 <close_stdout@@Base+0xb2c>
   13140:	b	132c8 <close_stdout@@Base+0xb2c>
   13144:	b	132c8 <close_stdout@@Base+0xb2c>
   13148:	b	132c8 <close_stdout@@Base+0xb2c>
   1314c:	b	132c8 <close_stdout@@Base+0xb2c>
   13150:	b	132c8 <close_stdout@@Base+0xb2c>
   13154:	b	132c8 <close_stdout@@Base+0xb2c>
   13158:	b	132c8 <close_stdout@@Base+0xb2c>
   1315c:	b	132c8 <close_stdout@@Base+0xb2c>
   13160:	b	132c8 <close_stdout@@Base+0xb2c>
   13164:	b	132c8 <close_stdout@@Base+0xb2c>
   13168:	b	132c8 <close_stdout@@Base+0xb2c>
   1316c:	b	133f4 <close_stdout@@Base+0xc58>
   13170:	b	1354c <close_stdout@@Base+0xdb0>
   13174:	b	132c8 <close_stdout@@Base+0xb2c>
   13178:	b	133f4 <close_stdout@@Base+0xc58>
   1317c:	b	132c8 <close_stdout@@Base+0xb2c>
   13180:	b	133f4 <close_stdout@@Base+0xc58>
   13184:	b	132c8 <close_stdout@@Base+0xb2c>
   13188:	b	132c8 <close_stdout@@Base+0xb2c>
   1318c:	b	132c8 <close_stdout@@Base+0xb2c>
   13190:	b	132c8 <close_stdout@@Base+0xb2c>
   13194:	b	132c8 <close_stdout@@Base+0xb2c>
   13198:	b	132c8 <close_stdout@@Base+0xb2c>
   1319c:	b	132c8 <close_stdout@@Base+0xb2c>
   131a0:	b	132c8 <close_stdout@@Base+0xb2c>
   131a4:	b	132c8 <close_stdout@@Base+0xb2c>
   131a8:	b	132c8 <close_stdout@@Base+0xb2c>
   131ac:	b	132c8 <close_stdout@@Base+0xb2c>
   131b0:	b	132c8 <close_stdout@@Base+0xb2c>
   131b4:	b	132c8 <close_stdout@@Base+0xb2c>
   131b8:	b	132c8 <close_stdout@@Base+0xb2c>
   131bc:	b	132c8 <close_stdout@@Base+0xb2c>
   131c0:	b	132c8 <close_stdout@@Base+0xb2c>
   131c4:	b	132c8 <close_stdout@@Base+0xb2c>
   131c8:	b	132c8 <close_stdout@@Base+0xb2c>
   131cc:	b	132c8 <close_stdout@@Base+0xb2c>
   131d0:	b	132c8 <close_stdout@@Base+0xb2c>
   131d4:	b	132c8 <close_stdout@@Base+0xb2c>
   131d8:	b	132c8 <close_stdout@@Base+0xb2c>
   131dc:	b	132c8 <close_stdout@@Base+0xb2c>
   131e0:	b	132c8 <close_stdout@@Base+0xb2c>
   131e4:	b	132c8 <close_stdout@@Base+0xb2c>
   131e8:	b	132c8 <close_stdout@@Base+0xb2c>
   131ec:	b	133d4 <close_stdout@@Base+0xc38>
   131f0:	b	133f4 <close_stdout@@Base+0xc58>
   131f4:	b	133d4 <close_stdout@@Base+0xc38>
   131f8:	b	133ec <close_stdout@@Base+0xc50>
   131fc:	ldr	r3, [sp, #160]	; 0xa0
   13200:	cmp	r3, #2
   13204:	beq	13a90 <close_stdout@@Base+0x12f4>
   13208:	cmp	r3, #3
   1320c:	bne	132c8 <close_stdout@@Base+0xb2c>
   13210:	ldr	r1, [sp, #164]	; 0xa4
   13214:	tst	r1, #4
   13218:	beq	132c8 <close_stdout@@Base+0xb2c>
   1321c:	add	r3, fp, #2
   13220:	cmp	r8, r3
   13224:	bls	132c8 <close_stdout@@Base+0xb2c>
   13228:	ldrb	r2, [r5, #1]
   1322c:	mov	r1, #1
   13230:	cmp	r2, #63	; 0x3f
   13234:	bne	132c8 <close_stdout@@Base+0xb2c>
   13238:	ldr	r0, [sp, #32]
   1323c:	ldrb	ip, [r0, r3]
   13240:	sub	r0, ip, #33	; 0x21
   13244:	uxtb	r0, r0
   13248:	cmp	r0, #29
   1324c:	bhi	132c8 <close_stdout@@Base+0xb2c>
   13250:	lsl	r1, r1, r0
   13254:	movw	r0, #20929	; 0x51c1
   13258:	movt	r0, #14336	; 0x3800
   1325c:	and	r0, r1, r0
   13260:	cmp	r0, #0
   13264:	beq	132c8 <close_stdout@@Base+0xb2c>
   13268:	ldr	r1, [sp, #36]	; 0x24
   1326c:	cmp	r1, #0
   13270:	bne	13410 <close_stdout@@Base+0xc74>
   13274:	cmp	r9, sl
   13278:	mov	r4, ip
   1327c:	mov	fp, r3
   13280:	ldrcc	r0, [sp, #40]	; 0x28
   13284:	strbcc	r2, [r0, r9]
   13288:	add	r2, r9, #1
   1328c:	cmp	sl, r2
   13290:	ldrhi	r0, [sp, #40]	; 0x28
   13294:	movhi	r1, #34	; 0x22
   13298:	strbhi	r1, [r0, r2]
   1329c:	add	r2, r9, #2
   132a0:	cmp	sl, r2
   132a4:	ldrhi	r0, [sp, #40]	; 0x28
   132a8:	movhi	r1, #34	; 0x22
   132ac:	strbhi	r1, [r0, r2]
   132b0:	add	r2, r9, #3
   132b4:	cmp	sl, r2
   132b8:	add	r9, r9, #4
   132bc:	ldrhi	r0, [sp, #40]	; 0x28
   132c0:	movhi	r1, #63	; 0x3f
   132c4:	strbhi	r1, [r0, r2]
   132c8:	ldr	r0, [sp, #44]	; 0x2c
   132cc:	cmp	r0, #0
   132d0:	bne	132f8 <close_stdout@@Base+0xb5c>
   132d4:	ldr	r1, [sp, #48]	; 0x30
   132d8:	cmp	r1, #0
   132dc:	beq	132f8 <close_stdout@@Base+0xb5c>
   132e0:	ubfx	r2, r4, #5, #8
   132e4:	and	r3, r4, #31
   132e8:	ldr	r2, [r1, r2, lsl #2]
   132ec:	lsr	r3, r2, r3
   132f0:	tst	r3, #1
   132f4:	bne	13300 <close_stdout@@Base+0xb64>
   132f8:	cmp	r6, #0
   132fc:	beq	13320 <close_stdout@@Base+0xb84>
   13300:	ldr	r2, [sp, #36]	; 0x24
   13304:	cmp	r2, #0
   13308:	bne	13410 <close_stdout@@Base+0xc74>
   1330c:	cmp	r9, sl
   13310:	ldrcc	r0, [sp, #40]	; 0x28
   13314:	movcc	r3, #92	; 0x5c
   13318:	strbcc	r3, [r0, r9]
   1331c:	add	r9, r9, #1
   13320:	add	fp, fp, #1
   13324:	cmp	r9, sl
   13328:	ldrcc	r1, [sp, #40]	; 0x28
   1332c:	strbcc	r4, [r1, r9]
   13330:	cmn	r8, #1
   13334:	add	r9, r9, #1
   13338:	bne	12fc0 <close_stdout@@Base+0x824>
   1333c:	ldr	r2, [sp, #32]
   13340:	ldrb	r3, [r2, fp]
   13344:	adds	r3, r3, #0
   13348:	movne	r3, #1
   1334c:	cmp	r3, #0
   13350:	bne	12fd0 <close_stdout@@Base+0x834>
   13354:	ldr	r3, [sp, #160]	; 0xa0
   13358:	cmp	r9, #0
   1335c:	cmpeq	r3, #2
   13360:	bne	13370 <close_stdout@@Base+0xbd4>
   13364:	ldr	r0, [sp, #36]	; 0x24
   13368:	cmp	r0, #0
   1336c:	bne	13410 <close_stdout@@Base+0xc74>
   13370:	ldr	r1, [sp, #36]	; 0x24
   13374:	ldr	r2, [sp, #52]	; 0x34
   13378:	eor	r3, r1, #1
   1337c:	cmp	r2, #0
   13380:	moveq	r3, #0
   13384:	andne	r3, r3, #1
   13388:	cmp	r3, #0
   1338c:	beq	133b8 <close_stdout@@Base+0xc1c>
   13390:	ldrb	r3, [r2]
   13394:	cmp	r3, #0
   13398:	beq	133b8 <close_stdout@@Base+0xc1c>
   1339c:	ldr	r1, [sp, #40]	; 0x28
   133a0:	cmp	sl, r9
   133a4:	strbhi	r3, [r1, r9]
   133a8:	ldrb	r3, [r2, #1]!
   133ac:	add	r9, r9, #1
   133b0:	cmp	r3, #0
   133b4:	bne	133a0 <close_stdout@@Base+0xc04>
   133b8:	cmp	r9, sl
   133bc:	movcs	r0, r9
   133c0:	ldrcc	r1, [sp, #40]	; 0x28
   133c4:	movcc	r3, #0
   133c8:	movcc	r0, r9
   133cc:	strbcc	r3, [r1, r9]
   133d0:	b	1344c <close_stdout@@Base+0xcb0>
   133d4:	cmn	r8, #1
   133d8:	beq	13aa0 <close_stdout@@Base+0x1304>
   133dc:	subs	r3, r8, #1
   133e0:	movne	r3, #1
   133e4:	cmp	r3, #0
   133e8:	bne	132c8 <close_stdout@@Base+0xb2c>
   133ec:	cmp	fp, #0
   133f0:	bne	132c8 <close_stdout@@Base+0xb2c>
   133f4:	ldr	r3, [sp, #36]	; 0x24
   133f8:	ldr	r0, [sp, #160]	; 0xa0
   133fc:	cmp	r0, #2
   13400:	movne	r3, #0
   13404:	andeq	r3, r3, #1
   13408:	cmp	r3, #0
   1340c:	beq	132c8 <close_stdout@@Base+0xb2c>
   13410:	ldr	r2, [sp, #164]	; 0xa4
   13414:	mov	ip, #0
   13418:	ldr	r0, [sp, #160]	; 0xa0
   1341c:	bic	r3, r2, #2
   13420:	ldr	r1, [sp, #72]	; 0x48
   13424:	ldr	r2, [sp, #68]	; 0x44
   13428:	stm	sp, {r0, r3}
   1342c:	mov	r3, r8
   13430:	str	r1, [sp, #12]
   13434:	mov	r1, sl
   13438:	str	r2, [sp, #16]
   1343c:	ldr	r0, [sp, #40]	; 0x28
   13440:	ldr	r2, [sp, #32]
   13444:	str	ip, [sp, #8]
   13448:	bl	12ee0 <close_stdout@@Base+0x744>
   1344c:	ldr	r1, [sp, #56]	; 0x38
   13450:	ldr	r2, [sp, #116]	; 0x74
   13454:	ldr	r3, [r1]
   13458:	cmp	r2, r3
   1345c:	bne	13b90 <close_stdout@@Base+0x13f4>
   13460:	add	sp, sp, #124	; 0x7c
   13464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13468:	mov	r3, #114	; 0x72
   1346c:	ldr	r2, [sp, #36]	; 0x24
   13470:	ldr	r0, [sp, #160]	; 0xa0
   13474:	cmp	r0, #2
   13478:	movne	r2, #0
   1347c:	andeq	r2, r2, #1
   13480:	cmp	r2, #0
   13484:	bne	13410 <close_stdout@@Base+0xc74>
   13488:	ldr	r1, [sp, #24]
   1348c:	cmp	r1, #0
   13490:	beq	132c8 <close_stdout@@Base+0xb2c>
   13494:	mov	r4, r3
   13498:	b	13300 <close_stdout@@Base+0xb64>
   1349c:	mov	r3, #98	; 0x62
   134a0:	b	13488 <close_stdout@@Base+0xcec>
   134a4:	mov	r3, #102	; 0x66
   134a8:	b	13488 <close_stdout@@Base+0xcec>
   134ac:	mov	r3, #118	; 0x76
   134b0:	b	13488 <close_stdout@@Base+0xcec>
   134b4:	mov	r3, #97	; 0x61
   134b8:	b	13488 <close_stdout@@Base+0xcec>
   134bc:	mov	r3, #110	; 0x6e
   134c0:	b	1346c <close_stdout@@Base+0xcd0>
   134c4:	mov	r3, #116	; 0x74
   134c8:	b	1346c <close_stdout@@Base+0xcd0>
   134cc:	ldr	r2, [sp, #24]
   134d0:	cmp	r2, #0
   134d4:	beq	13a7c <close_stdout@@Base+0x12e0>
   134d8:	ldr	r3, [sp, #36]	; 0x24
   134dc:	cmp	r3, #0
   134e0:	bne	13410 <close_stdout@@Base+0xc74>
   134e4:	cmp	r9, sl
   134e8:	add	r2, r9, #1
   134ec:	ldrcc	r0, [sp, #40]	; 0x28
   134f0:	movcc	r3, #92	; 0x5c
   134f4:	strbcc	r3, [r0, r9]
   134f8:	add	r3, fp, #1
   134fc:	cmp	r8, r3
   13500:	bls	13540 <close_stdout@@Base+0xda4>
   13504:	ldr	r1, [sp, #32]
   13508:	ldrb	r3, [r1, r3]
   1350c:	sub	r3, r3, #48	; 0x30
   13510:	cmp	r3, #9
   13514:	bhi	13540 <close_stdout@@Base+0xda4>
   13518:	cmp	sl, r2
   1351c:	ldrhi	r0, [sp, #40]	; 0x28
   13520:	movhi	r3, #48	; 0x30
   13524:	strbhi	r3, [r0, r2]
   13528:	add	r3, r9, #2
   1352c:	cmp	sl, r3
   13530:	ldrhi	r1, [sp, #40]	; 0x28
   13534:	movhi	r2, #48	; 0x30
   13538:	strbhi	r2, [r1, r3]
   1353c:	add	r2, r9, #3
   13540:	mov	r9, r2
   13544:	mov	r4, #48	; 0x30
   13548:	b	132d4 <close_stdout@@Base+0xb38>
   1354c:	ldr	r1, [sp, #76]	; 0x4c
   13550:	cmp	r1, #0
   13554:	beq	13560 <close_stdout@@Base+0xdc4>
   13558:	cmp	r7, #0
   1355c:	bne	13320 <close_stdout@@Base+0xb84>
   13560:	mov	r3, r4
   13564:	b	1346c <close_stdout@@Base+0xcd0>
   13568:	ldr	r1, [sp, #160]	; 0xa0
   1356c:	cmp	r1, #2
   13570:	bne	132c8 <close_stdout@@Base+0xb2c>
   13574:	ldr	r2, [sp, #36]	; 0x24
   13578:	cmp	r2, #0
   1357c:	bne	13410 <close_stdout@@Base+0xc74>
   13580:	cmp	r9, sl
   13584:	ldrcc	r0, [sp, #40]	; 0x28
   13588:	movcc	r3, #39	; 0x27
   1358c:	strbcc	r3, [r0, r9]
   13590:	add	r3, r9, #1
   13594:	cmp	sl, r3
   13598:	ldrhi	r1, [sp, #40]	; 0x28
   1359c:	movhi	r2, #92	; 0x5c
   135a0:	strbhi	r2, [r1, r3]
   135a4:	add	r3, r9, #2
   135a8:	cmp	sl, r3
   135ac:	add	r9, r9, #3
   135b0:	ldrhi	r0, [sp, #40]	; 0x28
   135b4:	movhi	r2, #39	; 0x27
   135b8:	strbhi	r2, [r0, r3]
   135bc:	b	132c8 <close_stdout@@Base+0xb2c>
   135c0:	ldr	r1, [sp, #64]	; 0x40
   135c4:	cmp	r1, #1
   135c8:	bne	138c0 <close_stdout@@Base+0x1124>
   135cc:	bl	11440 <__ctype_b_loc@plt>
   135d0:	ldr	r2, [sp, #64]	; 0x40
   135d4:	sxth	r3, r4
   135d8:	str	r2, [sp, #60]	; 0x3c
   135dc:	lsl	r3, r3, #1
   135e0:	ldr	r2, [r0]
   135e4:	ldrh	r2, [r2, r3]
   135e8:	eor	r2, r2, #16384	; 0x4000
   135ec:	ubfx	r2, r2, #14, #1
   135f0:	ldr	r1, [sp, #24]
   135f4:	ands	r2, r2, r1
   135f8:	beq	132c8 <close_stdout@@Base+0xb2c>
   135fc:	ldr	r3, [sp, #60]	; 0x3c
   13600:	mov	r0, #92	; 0x5c
   13604:	ldr	r7, [sp, #36]	; 0x24
   13608:	add	r1, r3, fp
   1360c:	str	r8, [sp, #60]	; 0x3c
   13610:	ldr	r3, [sp, #40]	; 0x28
   13614:	b	13678 <close_stdout@@Base+0xedc>
   13618:	cmp	r7, #0
   1361c:	bne	13ab8 <close_stdout@@Base+0x131c>
   13620:	add	ip, r9, #1
   13624:	cmp	r9, sl
   13628:	strbcc	r0, [r3, r9]
   1362c:	cmp	sl, ip
   13630:	lsrhi	r8, r4, #6
   13634:	addhi	r8, r8, #48	; 0x30
   13638:	strbhi	r8, [r3, ip]
   1363c:	add	ip, r9, #2
   13640:	add	r9, r9, #3
   13644:	cmp	sl, ip
   13648:	ubfxhi	r8, r4, #3, #3
   1364c:	and	r4, r4, #7
   13650:	add	r4, r4, #48	; 0x30
   13654:	addhi	r8, r8, #48	; 0x30
   13658:	strbhi	r8, [r3, ip]
   1365c:	add	fp, fp, #1
   13660:	cmp	r1, fp
   13664:	bls	136a4 <close_stdout@@Base+0xf08>
   13668:	cmp	r9, sl
   1366c:	strbcc	r4, [r3, r9]
   13670:	ldrb	r4, [r5, #1]!
   13674:	add	r9, r9, #1
   13678:	cmp	r2, #0
   1367c:	bne	13618 <close_stdout@@Base+0xe7c>
   13680:	cmp	r6, #0
   13684:	beq	1365c <close_stdout@@Base+0xec0>
   13688:	add	fp, fp, #1
   1368c:	cmp	r9, sl
   13690:	strbcc	r0, [r3, r9]
   13694:	cmp	r1, fp
   13698:	add	r9, r9, #1
   1369c:	mov	r6, #0
   136a0:	bhi	13668 <close_stdout@@Base+0xecc>
   136a4:	ldr	r8, [sp, #60]	; 0x3c
   136a8:	b	13324 <close_stdout@@Base+0xb88>
   136ac:	ldr	r3, [sp, #36]	; 0x24
   136b0:	cmp	r3, #0
   136b4:	bne	13bb8 <close_stdout@@Base+0x141c>
   136b8:	cmp	sl, #0
   136bc:	beq	13ad0 <close_stdout@@Base+0x1334>
   136c0:	ldr	r1, [sp, #40]	; 0x28
   136c4:	mov	r0, #1
   136c8:	ldr	r2, [pc, #1296]	; 13be0 <close_stdout@@Base+0x1444>
   136cc:	mov	r3, #34	; 0x22
   136d0:	str	r0, [sp, #24]
   136d4:	mov	r9, r0
   136d8:	add	r2, pc, r2
   136dc:	str	r0, [sp, #28]
   136e0:	strb	r3, [r1]
   136e4:	str	r2, [sp, #52]	; 0x34
   136e8:	b	12f94 <close_stdout@@Base+0x7f8>
   136ec:	ldr	r3, [pc, #1264]	; 13be4 <close_stdout@@Base+0x1448>
   136f0:	mov	r2, #1
   136f4:	mov	r0, #3
   136f8:	str	r2, [sp, #36]	; 0x24
   136fc:	add	r3, pc, r3
   13700:	str	r2, [sp, #24]
   13704:	str	r3, [sp, #52]	; 0x34
   13708:	mov	r9, #0
   1370c:	str	r2, [sp, #28]
   13710:	str	r0, [sp, #160]	; 0xa0
   13714:	b	12f94 <close_stdout@@Base+0x7f8>
   13718:	mov	r0, #0
   1371c:	mov	r1, #1
   13720:	str	r0, [sp, #36]	; 0x24
   13724:	mov	r9, r0
   13728:	str	r1, [sp, #24]
   1372c:	str	r0, [sp, #28]
   13730:	str	r0, [sp, #52]	; 0x34
   13734:	b	12f94 <close_stdout@@Base+0x7f8>
   13738:	ldr	r3, [sp, #160]	; 0xa0
   1373c:	cmp	r3, #8
   13740:	beq	1376c <close_stdout@@Base+0xfd0>
   13744:	ldr	r0, [pc, #1180]	; 13be8 <close_stdout@@Base+0x144c>
   13748:	mov	r1, r3
   1374c:	add	r0, pc, r0
   13750:	bl	12d7c <close_stdout@@Base+0x5e0>
   13754:	ldr	r1, [sp, #160]	; 0xa0
   13758:	str	r0, [sp, #72]	; 0x48
   1375c:	ldr	r0, [pc, #1160]	; 13bec <close_stdout@@Base+0x1450>
   13760:	add	r0, pc, r0
   13764:	bl	12d7c <close_stdout@@Base+0x5e0>
   13768:	str	r0, [sp, #68]	; 0x44
   1376c:	ldr	r0, [sp, #36]	; 0x24
   13770:	cmp	r0, #0
   13774:	movne	r9, #0
   13778:	bne	137b0 <close_stdout@@Base+0x1014>
   1377c:	ldr	r1, [sp, #72]	; 0x48
   13780:	ldrb	r3, [r1]
   13784:	cmp	r3, #0
   13788:	beq	13b88 <close_stdout@@Base+0x13ec>
   1378c:	mov	r2, r1
   13790:	ldr	r1, [sp, #40]	; 0x28
   13794:	mov	r9, r0
   13798:	cmp	r9, sl
   1379c:	strbcc	r3, [r1, r9]
   137a0:	ldrb	r3, [r2, #1]!
   137a4:	add	r9, r9, #1
   137a8:	cmp	r3, #0
   137ac:	bne	13798 <close_stdout@@Base+0xffc>
   137b0:	ldr	r0, [sp, #68]	; 0x44
   137b4:	str	r0, [sp, #52]	; 0x34
   137b8:	bl	11470 <strlen@plt>
   137bc:	mov	r2, #1
   137c0:	str	r2, [sp, #24]
   137c4:	str	r0, [sp, #28]
   137c8:	b	12f94 <close_stdout@@Base+0x7f8>
   137cc:	ldr	r3, [pc, #1052]	; 13bf0 <close_stdout@@Base+0x1454>
   137d0:	mov	r2, #0
   137d4:	mov	r1, #1
   137d8:	mov	r0, #2
   137dc:	add	r3, pc, r3
   137e0:	str	r1, [sp, #36]	; 0x24
   137e4:	str	r2, [sp, #24]
   137e8:	mov	r9, r2
   137ec:	str	r1, [sp, #28]
   137f0:	str	r3, [sp, #52]	; 0x34
   137f4:	str	r0, [sp, #160]	; 0xa0
   137f8:	b	12f94 <close_stdout@@Base+0x7f8>
   137fc:	ldr	r3, [sp, #36]	; 0x24
   13800:	cmp	r3, #0
   13804:	bne	13b94 <close_stdout@@Base+0x13f8>
   13808:	cmp	sl, #0
   1380c:	beq	13af0 <close_stdout@@Base+0x1354>
   13810:	ldr	r1, [sp, #40]	; 0x28
   13814:	mov	r3, #39	; 0x27
   13818:	ldr	r2, [sp, #36]	; 0x24
   1381c:	mov	r0, #1
   13820:	mov	r9, r0
   13824:	str	r0, [sp, #28]
   13828:	strb	r3, [r1]
   1382c:	ldr	r3, [pc, #960]	; 13bf4 <close_stdout@@Base+0x1458>
   13830:	str	r2, [sp, #24]
   13834:	add	r3, pc, r3
   13838:	str	r3, [sp, #52]	; 0x34
   1383c:	b	12f94 <close_stdout@@Base+0x7f8>
   13840:	ldr	r2, [sp, #28]
   13844:	cmp	r2, #1
   13848:	add	r4, fp, r2
   1384c:	movls	r3, #0
   13850:	movhi	r3, #1
   13854:	cmn	r8, #1
   13858:	movne	r3, #0
   1385c:	cmp	r3, #0
   13860:	beq	13870 <close_stdout@@Base+0x10d4>
   13864:	ldr	r0, [sp, #32]
   13868:	bl	11470 <strlen@plt>
   1386c:	mov	r8, r0
   13870:	cmp	r8, r4
   13874:	ldrcc	r3, [sp, #32]
   13878:	movcc	r6, #0
   1387c:	addcc	r5, r3, fp
   13880:	bcc	12ff0 <close_stdout@@Base+0x854>
   13884:	ldr	r0, [sp, #32]
   13888:	ldr	r1, [sp, #52]	; 0x34
   1388c:	add	r5, r0, fp
   13890:	ldr	r2, [sp, #28]
   13894:	mov	r0, r5
   13898:	bl	11308 <memcmp@plt>
   1389c:	cmp	r0, #0
   138a0:	bne	138b8 <close_stdout@@Base+0x111c>
   138a4:	ldr	r1, [sp, #36]	; 0x24
   138a8:	cmp	r1, #0
   138ac:	bne	13410 <close_stdout@@Base+0xc74>
   138b0:	mov	r6, #1
   138b4:	b	12ff0 <close_stdout@@Base+0x854>
   138b8:	mov	r6, #0
   138bc:	b	12ff0 <close_stdout@@Base+0x854>
   138c0:	add	r7, sp, #108	; 0x6c
   138c4:	cmn	r8, #1
   138c8:	mov	r3, #0
   138cc:	str	r3, [sp, #108]	; 0x6c
   138d0:	str	r3, [r7, #4]
   138d4:	beq	13ac0 <close_stdout@@Base+0x1324>
   138d8:	mov	r1, #0
   138dc:	ldr	r0, [sp, #32]
   138e0:	mov	ip, #1
   138e4:	str	r9, [sp, #88]	; 0x58
   138e8:	str	r6, [sp, #96]	; 0x60
   138ec:	mov	r9, r1
   138f0:	str	r5, [sp, #100]	; 0x64
   138f4:	mov	r6, ip
   138f8:	mov	r5, r7
   138fc:	add	r3, sp, #104	; 0x68
   13900:	sub	r0, r0, #1
   13904:	str	r3, [sp, #80]	; 0x50
   13908:	str	r0, [sp, #84]	; 0x54
   1390c:	str	r1, [sp, #60]	; 0x3c
   13910:	str	r4, [sp, #92]	; 0x5c
   13914:	ldr	r2, [sp, #32]
   13918:	add	r7, r9, fp
   1391c:	add	r0, sp, #104	; 0x68
   13920:	mov	r3, r5
   13924:	add	r4, r2, r7
   13928:	rsb	r2, r7, r8
   1392c:	mov	r1, r4
   13930:	bl	113c8 <mbrtowc@plt>
   13934:	subs	r2, r0, #0
   13938:	beq	13a44 <close_stdout@@Base+0x12a8>
   1393c:	cmn	r2, #1
   13940:	beq	13b6c <close_stdout@@Base+0x13d0>
   13944:	cmn	r2, #2
   13948:	beq	13b10 <close_stdout@@Base+0x1374>
   1394c:	ldr	r3, [sp, #36]	; 0x24
   13950:	ldr	r0, [sp, #160]	; 0xa0
   13954:	cmp	r0, #2
   13958:	movne	r3, #0
   1395c:	andeq	r3, r3, #1
   13960:	cmp	r3, #0
   13964:	beq	13a20 <close_stdout@@Base+0x1284>
   13968:	cmp	r2, #1
   1396c:	beq	13a20 <close_stdout@@Base+0x1284>
   13970:	ldr	r1, [sp, #84]	; 0x54
   13974:	add	r3, r1, r2
   13978:	add	r7, r3, r7
   1397c:	ldrb	r3, [r4, #1]!
   13980:	sub	r3, r3, #91	; 0x5b
   13984:	cmp	r3, #33	; 0x21
   13988:	addls	pc, pc, r3, lsl #2
   1398c:	b	13a18 <close_stdout@@Base+0x127c>
   13990:	b	13410 <close_stdout@@Base+0xc74>
   13994:	b	13410 <close_stdout@@Base+0xc74>
   13998:	b	13a18 <close_stdout@@Base+0x127c>
   1399c:	b	13410 <close_stdout@@Base+0xc74>
   139a0:	b	13a18 <close_stdout@@Base+0x127c>
   139a4:	b	13410 <close_stdout@@Base+0xc74>
   139a8:	b	13a18 <close_stdout@@Base+0x127c>
   139ac:	b	13a18 <close_stdout@@Base+0x127c>
   139b0:	b	13a18 <close_stdout@@Base+0x127c>
   139b4:	b	13a18 <close_stdout@@Base+0x127c>
   139b8:	b	13a18 <close_stdout@@Base+0x127c>
   139bc:	b	13a18 <close_stdout@@Base+0x127c>
   139c0:	b	13a18 <close_stdout@@Base+0x127c>
   139c4:	b	13a18 <close_stdout@@Base+0x127c>
   139c8:	b	13a18 <close_stdout@@Base+0x127c>
   139cc:	b	13a18 <close_stdout@@Base+0x127c>
   139d0:	b	13a18 <close_stdout@@Base+0x127c>
   139d4:	b	13a18 <close_stdout@@Base+0x127c>
   139d8:	b	13a18 <close_stdout@@Base+0x127c>
   139dc:	b	13a18 <close_stdout@@Base+0x127c>
   139e0:	b	13a18 <close_stdout@@Base+0x127c>
   139e4:	b	13a18 <close_stdout@@Base+0x127c>
   139e8:	b	13a18 <close_stdout@@Base+0x127c>
   139ec:	b	13a18 <close_stdout@@Base+0x127c>
   139f0:	b	13a18 <close_stdout@@Base+0x127c>
   139f4:	b	13a18 <close_stdout@@Base+0x127c>
   139f8:	b	13a18 <close_stdout@@Base+0x127c>
   139fc:	b	13a18 <close_stdout@@Base+0x127c>
   13a00:	b	13a18 <close_stdout@@Base+0x127c>
   13a04:	b	13a18 <close_stdout@@Base+0x127c>
   13a08:	b	13a18 <close_stdout@@Base+0x127c>
   13a0c:	b	13a18 <close_stdout@@Base+0x127c>
   13a10:	b	13a18 <close_stdout@@Base+0x127c>
   13a14:	b	13410 <close_stdout@@Base+0xc74>
   13a18:	cmp	r4, r7
   13a1c:	bne	1397c <close_stdout@@Base+0x11e0>
   13a20:	ldr	r0, [sp, #104]	; 0x68
   13a24:	add	r9, r9, r2
   13a28:	bl	1135c <iswprint@plt>
   13a2c:	cmp	r0, #0
   13a30:	mov	r0, r5
   13a34:	moveq	r6, #0
   13a38:	bl	112f0 <mbsinit@plt>
   13a3c:	cmp	r0, #0
   13a40:	beq	13914 <close_stdout@@Base+0x1178>
   13a44:	mov	ip, r6
   13a48:	eor	r2, ip, #1
   13a4c:	str	r9, [sp, #60]	; 0x3c
   13a50:	ldr	r4, [sp, #92]	; 0x5c
   13a54:	uxtb	r2, r2
   13a58:	ldr	r9, [sp, #88]	; 0x58
   13a5c:	ldr	r6, [sp, #96]	; 0x60
   13a60:	ldr	r5, [sp, #100]	; 0x64
   13a64:	ldr	r3, [sp, #60]	; 0x3c
   13a68:	cmp	r3, #1
   13a6c:	bls	135f0 <close_stdout@@Base+0xe54>
   13a70:	ldr	r0, [sp, #24]
   13a74:	and	r2, r2, r0
   13a78:	b	135fc <close_stdout@@Base+0xe60>
   13a7c:	ldr	r2, [sp, #164]	; 0xa4
   13a80:	tst	r2, #1
   13a84:	addne	fp, fp, #1
   13a88:	bne	12fb8 <close_stdout@@Base+0x81c>
   13a8c:	b	132c8 <close_stdout@@Base+0xb2c>
   13a90:	ldr	r0, [sp, #36]	; 0x24
   13a94:	cmp	r0, #0
   13a98:	beq	132c8 <close_stdout@@Base+0xb2c>
   13a9c:	b	13410 <close_stdout@@Base+0xc74>
   13aa0:	ldr	r2, [sp, #32]
   13aa4:	ldrb	r3, [r2, #1]
   13aa8:	adds	r3, r3, #0
   13aac:	movne	r3, #1
   13ab0:	b	133e4 <close_stdout@@Base+0xc48>
   13ab4:	bl	1159c <abort@plt>
   13ab8:	ldr	r8, [sp, #60]	; 0x3c
   13abc:	b	13410 <close_stdout@@Base+0xc74>
   13ac0:	ldr	r0, [sp, #32]
   13ac4:	bl	11470 <strlen@plt>
   13ac8:	mov	r8, r0
   13acc:	b	138d8 <close_stdout@@Base+0x113c>
   13ad0:	ldr	r2, [pc, #288]	; 13bf8 <close_stdout@@Base+0x145c>
   13ad4:	mov	r1, #1
   13ad8:	mov	r9, r1
   13adc:	str	r1, [sp, #24]
   13ae0:	add	r2, pc, r2
   13ae4:	str	r1, [sp, #28]
   13ae8:	str	r2, [sp, #52]	; 0x34
   13aec:	b	12f94 <close_stdout@@Base+0x7f8>
   13af0:	ldr	r2, [pc, #260]	; 13bfc <close_stdout@@Base+0x1460>
   13af4:	mov	r3, #1
   13af8:	mov	r9, r3
   13afc:	str	r3, [sp, #28]
   13b00:	add	r2, pc, r2
   13b04:	str	sl, [sp, #24]
   13b08:	str	r2, [sp, #52]	; 0x34
   13b0c:	b	12f94 <close_stdout@@Base+0x7f8>
   13b10:	cmp	r8, r7
   13b14:	str	r9, [sp, #60]	; 0x3c
   13b18:	mov	ip, r4
   13b1c:	ldr	r6, [sp, #96]	; 0x60
   13b20:	ldr	r9, [sp, #88]	; 0x58
   13b24:	ldr	r4, [sp, #92]	; 0x5c
   13b28:	ldr	r5, [sp, #100]	; 0x64
   13b2c:	bls	13b64 <close_stdout@@Base+0x13c8>
   13b30:	ldrb	r3, [ip]
   13b34:	cmp	r3, #0
   13b38:	beq	13b64 <close_stdout@@Base+0x13c8>
   13b3c:	ldr	r3, [sp, #60]	; 0x3c
   13b40:	b	13b50 <close_stdout@@Base+0x13b4>
   13b44:	ldrb	r2, [r5, r3]
   13b48:	cmp	r2, #0
   13b4c:	beq	13b60 <close_stdout@@Base+0x13c4>
   13b50:	add	r3, r3, #1
   13b54:	add	r2, fp, r3
   13b58:	cmp	r8, r2
   13b5c:	bhi	13b44 <close_stdout@@Base+0x13a8>
   13b60:	str	r3, [sp, #60]	; 0x3c
   13b64:	mov	r2, #1
   13b68:	b	13a64 <close_stdout@@Base+0x12c8>
   13b6c:	str	r9, [sp, #60]	; 0x3c
   13b70:	mov	r2, #1
   13b74:	ldr	r4, [sp, #92]	; 0x5c
   13b78:	ldr	r6, [sp, #96]	; 0x60
   13b7c:	ldr	r9, [sp, #88]	; 0x58
   13b80:	ldr	r5, [sp, #100]	; 0x64
   13b84:	b	13a64 <close_stdout@@Base+0x12c8>
   13b88:	ldr	r9, [sp, #36]	; 0x24
   13b8c:	b	137b0 <close_stdout@@Base+0x1014>
   13b90:	bl	1132c <__stack_chk_fail@plt>
   13b94:	ldr	r1, [pc, #100]	; 13c00 <close_stdout@@Base+0x1464>
   13b98:	mov	r3, #0
   13b9c:	mov	r0, #1
   13ba0:	str	r3, [sp, #24]
   13ba4:	add	r1, pc, r1
   13ba8:	str	r0, [sp, #28]
   13bac:	mov	r9, r3
   13bb0:	str	r1, [sp, #52]	; 0x34
   13bb4:	b	12f94 <close_stdout@@Base+0x7f8>
   13bb8:	ldr	r0, [pc, #68]	; 13c04 <close_stdout@@Base+0x1468>
   13bbc:	mov	r3, #1
   13bc0:	mov	r9, #0
   13bc4:	str	r3, [sp, #24]
   13bc8:	add	r0, pc, r0
   13bcc:	str	r3, [sp, #28]
   13bd0:	str	r0, [sp, #52]	; 0x34
   13bd4:	b	12f94 <close_stdout@@Base+0x7f8>
   13bd8:	strdeq	r7, [r1], -ip
   13bdc:	andeq	r0, r0, ip, lsr r1
   13be0:	strdeq	r5, [r0], -ip
   13be4:	ldrdeq	r5, [r0], -r8
   13be8:	muleq	r0, r4, r7
   13bec:	andeq	r5, r0, r0, ror r7
   13bf0:	strdeq	r5, [r0], -r4
   13bf4:	muleq	r0, ip, r6
   13bf8:	strdeq	r5, [r0], -r4
   13bfc:	ldrdeq	r5, [r0], -r0
   13c00:	andeq	r5, r0, ip, lsr #6
   13c04:	andeq	r5, r0, ip, lsl #6
   13c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c0c:	sub	sp, sp, #44	; 0x2c
   13c10:	mov	r6, r0
   13c14:	mov	r9, r1
   13c18:	mov	sl, r2
   13c1c:	mov	r4, r3
   13c20:	bl	114a0 <__errno_location@plt>
   13c24:	ldr	fp, [pc, #412]	; 13dc8 <close_stdout@@Base+0x162c>
   13c28:	cmp	r6, #0
   13c2c:	add	fp, pc, fp
   13c30:	ldr	r5, [fp]
   13c34:	ldr	r1, [r0]
   13c38:	mov	r8, r0
   13c3c:	str	r1, [sp, #36]	; 0x24
   13c40:	blt	13dc0 <close_stdout@@Base+0x1624>
   13c44:	ldr	r3, [pc, #384]	; 13dcc <close_stdout@@Base+0x1630>
   13c48:	add	r3, pc, r3
   13c4c:	ldr	r3, [r3]
   13c50:	cmp	r6, r3
   13c54:	bcc	13ca8 <close_stdout@@Base+0x150c>
   13c58:	add	r7, r6, #1
   13c5c:	cmn	r7, #-536870911	; 0xe0000001
   13c60:	bhi	13dc4 <close_stdout@@Base+0x1628>
   13c64:	add	r3, fp, #4
   13c68:	cmp	r5, r3
   13c6c:	beq	13d98 <close_stdout@@Base+0x15fc>
   13c70:	mov	r0, r5
   13c74:	lsl	r1, r7, #3
   13c78:	bl	15bb4 <close_stdout@@Base+0x3418>
   13c7c:	mov	r5, r0
   13c80:	str	r0, [fp]
   13c84:	ldr	fp, [pc, #324]	; 13dd0 <close_stdout@@Base+0x1634>
   13c88:	mov	r1, #0
   13c8c:	add	fp, pc, fp
   13c90:	ldr	r0, [fp]
   13c94:	rsb	r2, r0, r7
   13c98:	add	r0, r5, r0, lsl #3
   13c9c:	lsl	r2, r2, #3
   13ca0:	bl	114d0 <memset@plt>
   13ca4:	str	r7, [fp]
   13ca8:	add	r2, r4, #8
   13cac:	str	r2, [sp, #32]
   13cb0:	ldr	r1, [r4]
   13cb4:	add	fp, r5, r6, lsl #3
   13cb8:	ldr	lr, [sp, #32]
   13cbc:	mov	r2, r9
   13cc0:	ldr	r3, [r4, #4]
   13cc4:	ldr	ip, [r5, r6, lsl #3]
   13cc8:	ldr	r7, [fp, #4]
   13ccc:	orr	r3, r3, #1
   13cd0:	str	r1, [sp]
   13cd4:	str	r3, [sp, #4]
   13cd8:	mov	r1, ip
   13cdc:	str	lr, [sp, #8]
   13ce0:	mov	r0, r7
   13ce4:	ldr	lr, [r4, #40]	; 0x28
   13ce8:	str	r3, [sp, #28]
   13cec:	mov	r3, sl
   13cf0:	str	lr, [sp, #12]
   13cf4:	ldr	lr, [r4, #44]	; 0x2c
   13cf8:	str	ip, [sp, #24]
   13cfc:	str	lr, [sp, #16]
   13d00:	bl	12ee0 <close_stdout@@Base+0x744>
   13d04:	ldr	ip, [sp, #24]
   13d08:	cmp	ip, r0
   13d0c:	bhi	13d84 <close_stdout@@Base+0x15e8>
   13d10:	ldr	r3, [pc, #188]	; 13dd4 <close_stdout@@Base+0x1638>
   13d14:	add	r1, r0, #1
   13d18:	str	r1, [r5, r6, lsl #3]
   13d1c:	add	r3, pc, r3
   13d20:	cmp	r7, r3
   13d24:	beq	13d38 <close_stdout@@Base+0x159c>
   13d28:	mov	r0, r7
   13d2c:	str	r1, [sp, #24]
   13d30:	bl	112c0 <free@plt>
   13d34:	ldr	r1, [sp, #24]
   13d38:	mov	r0, r1
   13d3c:	str	r1, [sp, #24]
   13d40:	bl	15b5c <close_stdout@@Base+0x33c0>
   13d44:	ldr	r3, [sp, #28]
   13d48:	ldr	lr, [sp, #32]
   13d4c:	mov	r2, r9
   13d50:	str	r0, [fp, #4]
   13d54:	mov	r7, r0
   13d58:	ldr	ip, [r4]
   13d5c:	str	r3, [sp, #4]
   13d60:	mov	r3, sl
   13d64:	str	lr, [sp, #8]
   13d68:	str	ip, [sp]
   13d6c:	ldr	ip, [r4, #40]	; 0x28
   13d70:	ldr	r1, [sp, #24]
   13d74:	str	ip, [sp, #12]
   13d78:	ldr	ip, [r4, #44]	; 0x2c
   13d7c:	str	ip, [sp, #16]
   13d80:	bl	12ee0 <close_stdout@@Base+0x744>
   13d84:	ldr	r1, [sp, #36]	; 0x24
   13d88:	mov	r0, r7
   13d8c:	str	r1, [r8]
   13d90:	add	sp, sp, #44	; 0x2c
   13d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d98:	lsl	r1, r7, #3
   13d9c:	mov	r0, #0
   13da0:	str	r3, [sp, #24]
   13da4:	bl	15bb4 <close_stdout@@Base+0x3418>
   13da8:	ldr	r3, [sp, #24]
   13dac:	mov	r5, r0
   13db0:	ldm	r3, {r0, r1}
   13db4:	str	r5, [fp]
   13db8:	stm	r5, {r0, r1}
   13dbc:	b	13c84 <close_stdout@@Base+0x14e8>
   13dc0:	bl	1159c <abort@plt>
   13dc4:	bl	15d70 <close_stdout@@Base+0x35d4>
   13dc8:	andeq	r6, r1, r4, lsl #11
   13dcc:	andeq	r6, r1, r4, lsr r5
   13dd0:	strdeq	r6, [r1], -r0
   13dd4:			; <UNDEFINED> instruction: 0x000164b0
   13dd8:	push	{r4, r5, r6, lr}
   13ddc:	mov	r5, r0
   13de0:	bl	114a0 <__errno_location@plt>
   13de4:	cmp	r5, #0
   13de8:	mov	r1, #48	; 0x30
   13dec:	mov	r4, r0
   13df0:	ldr	r0, [pc, #24]	; 13e10 <close_stdout@@Base+0x1674>
   13df4:	ldr	r6, [r4]
   13df8:	add	r0, pc, r0
   13dfc:	add	r0, r0, #256	; 0x100
   13e00:	movne	r0, r5
   13e04:	bl	15d30 <close_stdout@@Base+0x3594>
   13e08:	str	r6, [r4]
   13e0c:	pop	{r4, r5, r6, pc}
   13e10:	ldrdeq	r6, [r1], -r4
   13e14:	cmp	r0, #0
   13e18:	beq	13e24 <close_stdout@@Base+0x1688>
   13e1c:	ldr	r0, [r0]
   13e20:	bx	lr
   13e24:	ldr	r0, [pc, #12]	; 13e38 <close_stdout@@Base+0x169c>
   13e28:	add	r0, pc, r0
   13e2c:	add	r0, r0, #256	; 0x100
   13e30:	ldr	r0, [r0]
   13e34:	bx	lr
   13e38:	andeq	r6, r1, r4, lsr #7
   13e3c:	cmp	r0, #0
   13e40:	beq	13e4c <close_stdout@@Base+0x16b0>
   13e44:	str	r1, [r0]
   13e48:	bx	lr
   13e4c:	ldr	r0, [pc, #12]	; 13e60 <close_stdout@@Base+0x16c4>
   13e50:	add	r0, pc, r0
   13e54:	add	r0, r0, #256	; 0x100
   13e58:	str	r1, [r0]
   13e5c:	bx	lr
   13e60:	andeq	r6, r1, ip, ror r3
   13e64:	cmp	r0, #0
   13e68:	movne	r3, r0
   13e6c:	beq	13e9c <close_stdout@@Base+0x1700>
   13e70:	lsr	ip, r1, #5
   13e74:	and	r1, r1, #31
   13e78:	add	r3, r3, ip, lsl #2
   13e7c:	ldr	ip, [r3, #8]
   13e80:	lsr	r0, ip, r1
   13e84:	eor	r2, r0, r2
   13e88:	and	r0, r0, #1
   13e8c:	and	r2, r2, #1
   13e90:	eor	ip, ip, r2, lsl r1
   13e94:	str	ip, [r3, #8]
   13e98:	bx	lr
   13e9c:	ldr	r3, [pc, #8]	; 13eac <close_stdout@@Base+0x1710>
   13ea0:	add	r3, pc, r3
   13ea4:	add	r3, r3, #256	; 0x100
   13ea8:	b	13e70 <close_stdout@@Base+0x16d4>
   13eac:	andeq	r6, r1, ip, lsr #6
   13eb0:	subs	r3, r0, #0
   13eb4:	beq	13ec4 <close_stdout@@Base+0x1728>
   13eb8:	ldr	r0, [r3, #4]
   13ebc:	str	r1, [r3, #4]
   13ec0:	bx	lr
   13ec4:	ldr	r3, [pc, #8]	; 13ed4 <close_stdout@@Base+0x1738>
   13ec8:	add	r3, pc, r3
   13ecc:	add	r3, r3, #256	; 0x100
   13ed0:	b	13eb8 <close_stdout@@Base+0x171c>
   13ed4:	andeq	r6, r1, r4, lsl #6
   13ed8:	cmp	r0, #0
   13edc:	push	{r3, lr}
   13ee0:	beq	13f04 <close_stdout@@Base+0x1768>
   13ee4:	cmp	r2, #0
   13ee8:	cmpne	r1, #0
   13eec:	mov	r3, #8
   13ef0:	strne	r1, [r0, #40]	; 0x28
   13ef4:	str	r3, [r0]
   13ef8:	strne	r2, [r0, #44]	; 0x2c
   13efc:	popne	{r3, pc}
   13f00:	bl	1159c <abort@plt>
   13f04:	ldr	r0, [pc, #8]	; 13f14 <close_stdout@@Base+0x1778>
   13f08:	add	r0, pc, r0
   13f0c:	add	r0, r0, #256	; 0x100
   13f10:	b	13ee4 <close_stdout@@Base+0x1748>
   13f14:	andeq	r6, r1, r4, asr #5
   13f18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f1c:	sub	sp, sp, #24
   13f20:	mov	r7, r0
   13f24:	mov	sl, r1
   13f28:	ldr	r4, [sp, #56]	; 0x38
   13f2c:	mov	r9, r2
   13f30:	mov	r8, r3
   13f34:	cmp	r4, #0
   13f38:	beq	13f8c <close_stdout@@Base+0x17f0>
   13f3c:	bl	114a0 <__errno_location@plt>
   13f40:	ldr	r3, [r4]
   13f44:	add	lr, r4, #8
   13f48:	mov	r1, sl
   13f4c:	mov	r2, r9
   13f50:	ldr	r6, [r0]
   13f54:	mov	r5, r0
   13f58:	str	r3, [sp]
   13f5c:	mov	r0, r7
   13f60:	ldr	ip, [r4, #4]
   13f64:	mov	r3, r8
   13f68:	stmib	sp, {ip, lr}
   13f6c:	ldr	ip, [r4, #40]	; 0x28
   13f70:	str	ip, [sp, #12]
   13f74:	ldr	ip, [r4, #44]	; 0x2c
   13f78:	str	ip, [sp, #16]
   13f7c:	bl	12ee0 <close_stdout@@Base+0x744>
   13f80:	str	r6, [r5]
   13f84:	add	sp, sp, #24
   13f88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f8c:	ldr	r4, [pc, #8]	; 13f9c <close_stdout@@Base+0x1800>
   13f90:	add	r4, pc, r4
   13f94:	add	r4, r4, #256	; 0x100
   13f98:	b	13f3c <close_stdout@@Base+0x17a0>
   13f9c:	andeq	r6, r1, ip, lsr r2
   13fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa4:	subs	r4, r3, #0
   13fa8:	sub	sp, sp, #36	; 0x24
   13fac:	mov	r7, r0
   13fb0:	mov	r6, r1
   13fb4:	mov	r5, r2
   13fb8:	beq	14074 <close_stdout@@Base+0x18d8>
   13fbc:	bl	114a0 <__errno_location@plt>
   13fc0:	ldr	r3, [r4]
   13fc4:	ldr	sl, [r4, #4]
   13fc8:	add	r9, r4, #8
   13fcc:	mov	r8, r0
   13fd0:	mov	r0, #0
   13fd4:	ldr	r2, [r8]
   13fd8:	cmp	r5, r0
   13fdc:	orreq	sl, sl, #1
   13fe0:	str	r9, [sp, #8]
   13fe4:	mov	r1, r0
   13fe8:	stm	sp, {r3, sl}
   13fec:	mov	r3, r6
   13ff0:	ldr	ip, [r4, #40]	; 0x28
   13ff4:	str	r2, [sp, #28]
   13ff8:	mov	r2, r7
   13ffc:	str	ip, [sp, #12]
   14000:	ldr	ip, [r4, #44]	; 0x2c
   14004:	str	ip, [sp, #16]
   14008:	bl	12ee0 <close_stdout@@Base+0x744>
   1400c:	add	r1, r0, #1
   14010:	mov	fp, r0
   14014:	str	r1, [sp, #24]
   14018:	mov	r0, r1
   1401c:	bl	15b5c <close_stdout@@Base+0x33c0>
   14020:	ldr	lr, [r4]
   14024:	str	sl, [sp, #4]
   14028:	mov	r3, r6
   1402c:	str	r9, [sp, #8]
   14030:	mov	r2, r7
   14034:	str	lr, [sp]
   14038:	ldr	lr, [r4, #40]	; 0x28
   1403c:	ldr	r1, [sp, #24]
   14040:	str	lr, [sp, #12]
   14044:	ldr	lr, [r4, #44]	; 0x2c
   14048:	str	lr, [sp, #16]
   1404c:	str	r0, [sp, #24]
   14050:	bl	12ee0 <close_stdout@@Base+0x744>
   14054:	ldr	r3, [sp, #28]
   14058:	cmp	r5, #0
   1405c:	str	r3, [r8]
   14060:	ldr	ip, [sp, #24]
   14064:	strne	fp, [r5]
   14068:	mov	r0, ip
   1406c:	add	sp, sp, #36	; 0x24
   14070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14074:	ldr	r4, [pc, #8]	; 14084 <close_stdout@@Base+0x18e8>
   14078:	add	r4, pc, r4
   1407c:	add	r4, r4, #256	; 0x100
   14080:	b	13fbc <close_stdout@@Base+0x1820>
   14084:	andeq	r6, r1, r4, asr r1
   14088:	mov	r3, r2
   1408c:	mov	r2, #0
   14090:	b	13fa0 <close_stdout@@Base+0x1804>
   14094:	ldr	r2, [pc, #152]	; 14134 <close_stdout@@Base+0x1998>
   14098:	push	{r3, r4, r5, r6, r7, lr}
   1409c:	add	r2, pc, r2
   140a0:	ldr	r3, [pc, #144]	; 14138 <close_stdout@@Base+0x199c>
   140a4:	ldr	r6, [r2]
   140a8:	add	r3, pc, r3
   140ac:	cmp	r6, #1
   140b0:	ldr	r7, [r3]
   140b4:	movhi	r4, #1
   140b8:	movhi	r5, r7
   140bc:	bls	140d8 <close_stdout@@Base+0x193c>
   140c0:	ldr	r0, [r5, #12]
   140c4:	add	r4, r4, #1
   140c8:	bl	112c0 <free@plt>
   140cc:	cmp	r4, r6
   140d0:	add	r5, r5, #8
   140d4:	bne	140c0 <close_stdout@@Base+0x1924>
   140d8:	ldr	r4, [pc, #92]	; 1413c <close_stdout@@Base+0x19a0>
   140dc:	ldr	r0, [r7, #4]
   140e0:	add	r4, pc, r4
   140e4:	cmp	r0, r4
   140e8:	beq	14100 <close_stdout@@Base+0x1964>
   140ec:	bl	112c0 <free@plt>
   140f0:	ldr	r3, [pc, #72]	; 14140 <close_stdout@@Base+0x19a4>
   140f4:	mov	r2, #256	; 0x100
   140f8:	add	r3, pc, r3
   140fc:	stmib	r3, {r2, r4}
   14100:	ldr	r4, [pc, #60]	; 14144 <close_stdout@@Base+0x19a8>
   14104:	add	r4, pc, r4
   14108:	add	r5, r4, #4
   1410c:	cmp	r7, r5
   14110:	beq	14120 <close_stdout@@Base+0x1984>
   14114:	mov	r0, r7
   14118:	bl	112c0 <free@plt>
   1411c:	str	r5, [r4]
   14120:	ldr	r3, [pc, #32]	; 14148 <close_stdout@@Base+0x19ac>
   14124:	mov	r2, #1
   14128:	add	r3, pc, r3
   1412c:	str	r2, [r3]
   14130:	pop	{r3, r4, r5, r6, r7, pc}
   14134:	andeq	r6, r1, r0, ror #1
   14138:	andeq	r6, r1, r8, lsl #2
   1413c:	andeq	r6, r1, ip, ror #1
   14140:	strheq	r6, [r1], -r8
   14144:	andeq	r6, r1, ip, lsr #1
   14148:	andeq	r6, r1, r4, asr r0
   1414c:	ldr	r3, [pc, #12]	; 14160 <close_stdout@@Base+0x19c4>
   14150:	mvn	r2, #0
   14154:	add	r3, pc, r3
   14158:	add	r3, r3, #256	; 0x100
   1415c:	b	13c08 <close_stdout@@Base+0x146c>
   14160:	andeq	r6, r1, r8, ror r0
   14164:	ldr	r3, [pc, #8]	; 14174 <close_stdout@@Base+0x19d8>
   14168:	add	r3, pc, r3
   1416c:	add	r3, r3, #256	; 0x100
   14170:	b	13c08 <close_stdout@@Base+0x146c>
   14174:	andeq	r6, r1, r4, rrx
   14178:	mov	r1, r0
   1417c:	mov	r0, #0
   14180:	b	1414c <close_stdout@@Base+0x19b0>
   14184:	mov	r2, r1
   14188:	mov	r1, r0
   1418c:	mov	r0, #0
   14190:	b	14164 <close_stdout@@Base+0x19c8>
   14194:	ldr	r3, [pc, #92]	; 141f8 <close_stdout@@Base+0x1a5c>
   14198:	ldr	ip, [pc, #92]	; 141fc <close_stdout@@Base+0x1a60>
   1419c:	add	r3, pc, r3
   141a0:	push	{r4, r5, r6, r7, lr}
   141a4:	sub	sp, sp, #60	; 0x3c
   141a8:	ldr	r4, [r3, ip]
   141ac:	add	r5, sp, #4
   141b0:	mov	r7, r2
   141b4:	mov	r6, r0
   141b8:	mov	r0, r5
   141bc:	ldr	r3, [r4]
   141c0:	str	r3, [sp, #52]	; 0x34
   141c4:	bl	12d28 <close_stdout@@Base+0x58c>
   141c8:	mov	r3, r5
   141cc:	mvn	r2, #0
   141d0:	mov	r0, r6
   141d4:	mov	r1, r7
   141d8:	bl	13c08 <close_stdout@@Base+0x146c>
   141dc:	ldr	r2, [sp, #52]	; 0x34
   141e0:	ldr	r3, [r4]
   141e4:	cmp	r2, r3
   141e8:	bne	141f4 <close_stdout@@Base+0x1a58>
   141ec:	add	sp, sp, #60	; 0x3c
   141f0:	pop	{r4, r5, r6, r7, pc}
   141f4:	bl	1132c <__stack_chk_fail@plt>
   141f8:	andeq	r5, r1, ip, asr lr
   141fc:	andeq	r0, r0, ip, lsr r1
   14200:	ldr	ip, [pc, #96]	; 14268 <close_stdout@@Base+0x1acc>
   14204:	push	{r4, r5, r6, r7, r8, lr}
   14208:	add	ip, pc, ip
   1420c:	ldr	lr, [pc, #88]	; 1426c <close_stdout@@Base+0x1ad0>
   14210:	sub	sp, sp, #56	; 0x38
   14214:	mov	r8, r3
   14218:	add	r5, sp, #4
   1421c:	mov	r7, r2
   14220:	mov	r6, r0
   14224:	ldr	r4, [ip, lr]
   14228:	mov	r0, r5
   1422c:	ldr	r3, [r4]
   14230:	str	r3, [sp, #52]	; 0x34
   14234:	bl	12d28 <close_stdout@@Base+0x58c>
   14238:	mov	r2, r8
   1423c:	mov	r3, r5
   14240:	mov	r0, r6
   14244:	mov	r1, r7
   14248:	bl	13c08 <close_stdout@@Base+0x146c>
   1424c:	ldr	r2, [sp, #52]	; 0x34
   14250:	ldr	r3, [r4]
   14254:	cmp	r2, r3
   14258:	bne	14264 <close_stdout@@Base+0x1ac8>
   1425c:	add	sp, sp, #56	; 0x38
   14260:	pop	{r4, r5, r6, r7, r8, pc}
   14264:	bl	1132c <__stack_chk_fail@plt>
   14268:	strdeq	r5, [r1], -r0
   1426c:	andeq	r0, r0, ip, lsr r1
   14270:	mov	r2, r1
   14274:	mov	r1, r0
   14278:	mov	r0, #0
   1427c:	b	14194 <close_stdout@@Base+0x19f8>
   14280:	mov	ip, r1
   14284:	mov	r3, r2
   14288:	mov	r1, r0
   1428c:	mov	r2, ip
   14290:	mov	r0, #0
   14294:	b	14200 <close_stdout@@Base+0x1a64>
   14298:	push	{r4, r5, r6, r7, r8, lr}
   1429c:	mov	r5, r2
   142a0:	ldr	lr, [pc, #136]	; 14330 <close_stdout@@Base+0x1b94>
   142a4:	mov	r7, r0
   142a8:	mov	r6, r1
   142ac:	ldr	r4, [pc, #128]	; 14334 <close_stdout@@Base+0x1b98>
   142b0:	add	lr, pc, lr
   142b4:	sub	sp, sp, #56	; 0x38
   142b8:	add	lr, lr, #256	; 0x100
   142bc:	ldr	r8, [pc, #116]	; 14338 <close_stdout@@Base+0x1b9c>
   142c0:	add	r4, pc, r4
   142c4:	add	ip, sp, #4
   142c8:	ldm	lr!, {r0, r1, r2, r3}
   142cc:	ldr	r4, [r4, r8]
   142d0:	stmia	ip!, {r0, r1, r2, r3}
   142d4:	ldm	lr!, {r0, r1, r2, r3}
   142d8:	ldr	r8, [r4]
   142dc:	stmia	ip!, {r0, r1, r2, r3}
   142e0:	ldm	lr, {r0, r1, r2, r3}
   142e4:	str	r8, [sp, #52]	; 0x34
   142e8:	stm	ip, {r0, r1, r2, r3}
   142ec:	mov	r1, r5
   142f0:	add	r5, sp, #4
   142f4:	mov	r2, #1
   142f8:	mov	r0, r5
   142fc:	bl	13e64 <close_stdout@@Base+0x16c8>
   14300:	mov	r2, r6
   14304:	mov	r3, r5
   14308:	mov	r1, r7
   1430c:	mov	r0, #0
   14310:	bl	13c08 <close_stdout@@Base+0x146c>
   14314:	ldr	r2, [sp, #52]	; 0x34
   14318:	ldr	r3, [r4]
   1431c:	cmp	r2, r3
   14320:	bne	1432c <close_stdout@@Base+0x1b90>
   14324:	add	sp, sp, #56	; 0x38
   14328:	pop	{r4, r5, r6, r7, r8, pc}
   1432c:	bl	1132c <__stack_chk_fail@plt>
   14330:	andeq	r5, r1, ip, lsl pc
   14334:	andeq	r5, r1, r8, lsr sp
   14338:	andeq	r0, r0, ip, lsr r1
   1433c:	mov	r2, r1
   14340:	mvn	r1, #0
   14344:	b	14298 <close_stdout@@Base+0x1afc>
   14348:	mov	r1, #58	; 0x3a
   1434c:	b	1433c <close_stdout@@Base+0x1ba0>
   14350:	mov	r2, #58	; 0x3a
   14354:	b	14298 <close_stdout@@Base+0x1afc>
   14358:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1435c:	mov	r5, r2
   14360:	ldr	lr, [pc, #144]	; 143f8 <close_stdout@@Base+0x1c5c>
   14364:	mov	r8, r0
   14368:	mov	r9, r1
   1436c:	mov	r7, r3
   14370:	add	lr, pc, lr
   14374:	ldr	r4, [pc, #128]	; 143fc <close_stdout@@Base+0x1c60>
   14378:	add	lr, lr, #256	; 0x100
   1437c:	sub	sp, sp, #56	; 0x38
   14380:	ldr	sl, [pc, #120]	; 14400 <close_stdout@@Base+0x1c64>
   14384:	add	r4, pc, r4
   14388:	ldm	lr!, {r0, r1, r2, r3}
   1438c:	add	ip, sp, #4
   14390:	ldr	r4, [r4, sl]
   14394:	ldr	r6, [sp, #88]	; 0x58
   14398:	stmia	ip!, {r0, r1, r2, r3}
   1439c:	ldm	lr!, {r0, r1, r2, r3}
   143a0:	ldr	sl, [r4]
   143a4:	stmia	ip!, {r0, r1, r2, r3}
   143a8:	ldm	lr, {r0, r1, r2, r3}
   143ac:	str	sl, [sp, #52]	; 0x34
   143b0:	stm	ip, {r0, r1, r2, r3}
   143b4:	mov	r2, r5
   143b8:	add	r5, sp, #4
   143bc:	mov	r1, r9
   143c0:	mov	r0, r5
   143c4:	bl	13ed8 <close_stdout@@Base+0x173c>
   143c8:	mov	r2, r6
   143cc:	mov	r3, r5
   143d0:	mov	r0, r8
   143d4:	mov	r1, r7
   143d8:	bl	13c08 <close_stdout@@Base+0x146c>
   143dc:	ldr	r2, [sp, #52]	; 0x34
   143e0:	ldr	r3, [r4]
   143e4:	cmp	r2, r3
   143e8:	bne	143f4 <close_stdout@@Base+0x1c58>
   143ec:	add	sp, sp, #56	; 0x38
   143f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143f4:	bl	1132c <__stack_chk_fail@plt>
   143f8:	andeq	r5, r1, ip, asr lr
   143fc:	andeq	r5, r1, r4, ror ip
   14400:	andeq	r0, r0, ip, lsr r1
   14404:	push	{lr}		; (str lr, [sp, #-4]!)
   14408:	sub	sp, sp, #12
   1440c:	mvn	ip, #0
   14410:	str	ip, [sp]
   14414:	bl	14358 <close_stdout@@Base+0x1bbc>
   14418:	add	sp, sp, #12
   1441c:	pop	{pc}		; (ldr pc, [sp], #4)
   14420:	mov	ip, r1
   14424:	mov	r3, r2
   14428:	mov	r1, r0
   1442c:	mov	r2, ip
   14430:	mov	r0, #0
   14434:	b	14404 <close_stdout@@Base+0x1c68>
   14438:	push	{lr}		; (str lr, [sp, #-4]!)
   1443c:	sub	sp, sp, #12
   14440:	mov	lr, r1
   14444:	mov	ip, r2
   14448:	mov	r1, r0
   1444c:	str	r3, [sp]
   14450:	mov	r2, lr
   14454:	mov	r3, ip
   14458:	mov	r0, #0
   1445c:	bl	14358 <close_stdout@@Base+0x1bbc>
   14460:	add	sp, sp, #12
   14464:	pop	{pc}		; (ldr pc, [sp], #4)
   14468:	ldr	r3, [pc, #12]	; 1447c <close_stdout@@Base+0x1ce0>
   1446c:	ldr	ip, [pc, #12]	; 14480 <close_stdout@@Base+0x1ce4>
   14470:	add	r3, pc, r3
   14474:	ldr	r3, [r3, ip]
   14478:	b	13c08 <close_stdout@@Base+0x146c>
   1447c:	andeq	r5, r1, r8, lsl #23
   14480:	andeq	r0, r0, r4, lsr r1
   14484:	mov	r2, r1
   14488:	mov	r1, r0
   1448c:	mov	r0, #0
   14490:	b	14468 <close_stdout@@Base+0x1ccc>
   14494:	mvn	r2, #0
   14498:	b	14468 <close_stdout@@Base+0x1ccc>
   1449c:	mov	r1, r0
   144a0:	mov	r0, #0
   144a4:	b	14494 <close_stdout@@Base+0x1cf8>
   144a8:	push	{r4, lr}
   144ac:	mov	r4, r0
   144b0:	mov	r0, #24
   144b4:	bl	15b5c <close_stdout@@Base+0x33c0>
   144b8:	mov	r2, #0
   144bc:	mov	r3, #0
   144c0:	str	r4, [r0]
   144c4:	strd	r2, [r0, #16]
   144c8:	strd	r2, [r0, #8]
   144cc:	pop	{r4, pc}
   144d0:	push	{r3, lr}
   144d4:	bl	14af0 <close_stdout@@Base+0x2354>
   144d8:	cmp	r0, #0
   144dc:	popeq	{r3, pc}
   144e0:	pop	{r3, lr}
   144e4:	b	144a8 <close_stdout@@Base+0x1d0c>
   144e8:	ldr	r0, [r0]
   144ec:	bx	lr
   144f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144f4:	sub	sp, sp, #84	; 0x54
   144f8:	ldr	r1, [pc, #496]	; 146f0 <close_stdout@@Base+0x1f54>
   144fc:	str	r0, [sp, #56]	; 0x38
   14500:	ldr	ip, [sp, #56]	; 0x38
   14504:	add	r1, pc, r1
   14508:	ldr	r0, [pc, #484]	; 146f4 <close_stdout@@Base+0x1f58>
   1450c:	strd	r2, [sp, #8]
   14510:	adds	r2, r2, #1
   14514:	ldr	ip, [ip]
   14518:	adc	r3, r3, #0
   1451c:	strd	r2, [sp, #24]
   14520:	str	ip, [sp, #48]	; 0x30
   14524:	ldr	ip, [sp, #56]	; 0x38
   14528:	ldrd	r8, [ip, #8]
   1452c:	add	ip, sp, #68	; 0x44
   14530:	str	ip, [sp, #52]	; 0x34
   14534:	ldr	ip, [sp, #56]	; 0x38
   14538:	ldr	r0, [r1, r0]
   1453c:	ldrd	r6, [ip, #16]
   14540:	ldr	r3, [r0]
   14544:	str	r0, [sp, #60]	; 0x3c
   14548:	str	r3, [sp, #76]	; 0x4c
   1454c:	ldrd	r0, [sp, #8]
   14550:	cmp	r7, r1
   14554:	cmpeq	r6, r0
   14558:	bcs	14600 <close_stdout@@Base+0x1e64>
   1455c:	mov	r2, #0
   14560:	mov	r3, r9
   14564:	mov	ip, r2
   14568:	mov	r2, r8
   1456c:	ldrd	r8, [sp, #8]
   14570:	mov	r0, r6
   14574:	mov	r1, r7
   14578:	lsl	r5, r1, #8
   1457c:	lsl	r4, r0, #8
   14580:	orr	r5, r5, r0, lsr #24
   14584:	adds	r0, r4, #255	; 0xff
   14588:	adc	r1, r5, #0
   1458c:	add	ip, ip, #1
   14590:	cmp	r9, r1
   14594:	cmpeq	r8, r0
   14598:	bhi	14578 <close_stdout@@Base+0x1ddc>
   1459c:	ldr	r0, [sp, #48]	; 0x30
   145a0:	add	r1, sp, #68	; 0x44
   145a4:	mov	r8, r2
   145a8:	mov	r2, ip
   145ac:	mov	r9, r3
   145b0:	bl	14d80 <close_stdout@@Base+0x25e4>
   145b4:	add	r3, sp, #67	; 0x43
   145b8:	ldrd	r0, [sp, #8]
   145bc:	mov	ip, r3
   145c0:	lsl	fp, r9, #8
   145c4:	lsl	r3, r7, #8
   145c8:	orr	fp, fp, r8, lsr #24
   145cc:	lsl	sl, r8, #8
   145d0:	lsl	r2, r6, #8
   145d4:	ldrb	r8, [ip, #1]!
   145d8:	orr	r3, r3, r6, lsr #24
   145dc:	adds	r6, r2, #255	; 0xff
   145e0:	adc	r7, r3, #0
   145e4:	adds	r8, r8, sl
   145e8:	mov	r9, #0
   145ec:	adc	r9, r9, fp
   145f0:	cmp	r1, r7
   145f4:	cmpeq	r0, r6
   145f8:	bhi	145c0 <close_stdout@@Base+0x1e24>
   145fc:	strd	r2, [sp, #40]	; 0x28
   14600:	ldrd	r2, [sp, #8]
   14604:	cmp	r7, r3
   14608:	cmpeq	r6, r2
   1460c:	beq	1466c <close_stdout@@Base+0x1ed0>
   14610:	ldrd	r0, [sp, #8]
   14614:	ldrd	r2, [sp, #24]
   14618:	subs	r0, r6, r0
   1461c:	sbc	r1, r7, r1
   14620:	strd	r0, [sp, #32]
   14624:	bl	17e44 <close_stdout@@Base+0x56a8>
   14628:	mov	r0, r8
   1462c:	mov	r1, r9
   14630:	strd	r2, [sp, #16]
   14634:	ldrd	r2, [sp, #24]
   14638:	bl	17e44 <close_stdout@@Base+0x56a8>
   1463c:	ldrd	r0, [sp, #16]
   14640:	subs	r6, r6, r0
   14644:	sbc	r7, r7, r1
   14648:	cmp	r9, r7
   1464c:	cmpeq	r8, r6
   14650:	bls	146a4 <close_stdout@@Base+0x1f08>
   14654:	ldrd	r6, [sp, #16]
   14658:	mov	r8, r2
   1465c:	mov	r9, r3
   14660:	subs	r6, r6, #1
   14664:	sbc	r7, r7, #0
   14668:	b	1454c <close_stdout@@Base+0x1db0>
   1466c:	ldr	ip, [sp, #56]	; 0x38
   14670:	mov	r2, #0
   14674:	mov	r3, #0
   14678:	strd	r2, [ip, #16]
   1467c:	strd	r2, [ip, #8]
   14680:	ldr	ip, [sp, #60]	; 0x3c
   14684:	mov	r0, r8
   14688:	ldr	r2, [sp, #76]	; 0x4c
   1468c:	mov	r1, r9
   14690:	ldr	r3, [ip]
   14694:	cmp	r2, r3
   14698:	bne	146ec <close_stdout@@Base+0x1f50>
   1469c:	add	sp, sp, #84	; 0x54
   146a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146a4:	mov	ip, r3
   146a8:	mov	r4, r2
   146ac:	mov	r0, r8
   146b0:	mov	r1, r9
   146b4:	ldrd	r2, [sp, #24]
   146b8:	mov	r8, r4
   146bc:	str	ip, [sp, #4]
   146c0:	bl	17e44 <close_stdout@@Base+0x56a8>
   146c4:	ldr	lr, [sp, #56]	; 0x38
   146c8:	ldrd	r2, [sp, #24]
   146cc:	strd	r0, [lr, #8]
   146d0:	ldrd	r0, [sp, #32]
   146d4:	bl	17e44 <close_stdout@@Base+0x56a8>
   146d8:	ldr	ip, [sp, #4]
   146dc:	mov	r9, ip
   146e0:	ldr	ip, [sp, #56]	; 0x38
   146e4:	strd	r0, [ip, #16]
   146e8:	b	14680 <close_stdout@@Base+0x1ee4>
   146ec:	bl	1132c <__stack_chk_fail@plt>
   146f0:	strdeq	r5, [r1], -r4
   146f4:	andeq	r0, r0, ip, lsr r1
   146f8:	push	{r4, lr}
   146fc:	mov	r1, #0
   14700:	mov	r4, r0
   14704:	mov	r2, #24
   14708:	bl	114d0 <memset@plt>
   1470c:	mov	r0, r4
   14710:	pop	{r4, lr}
   14714:	b	112c0 <free@plt>
   14718:	push	{r3, r4, r5, r6, r7, lr}
   1471c:	mov	r5, r0
   14720:	ldr	r0, [r0]
   14724:	bl	14ed0 <close_stdout@@Base+0x2734>
   14728:	mov	r7, r0
   1472c:	bl	114a0 <__errno_location@plt>
   14730:	ldr	r6, [r0]
   14734:	mov	r4, r0
   14738:	mov	r0, r5
   1473c:	bl	146f8 <close_stdout@@Base+0x1f5c>
   14740:	mov	r0, r7
   14744:	str	r6, [r4]
   14748:	pop	{r3, r4, r5, r6, r7, pc}
   1474c:	push	{r3, lr}
   14750:	ldr	r0, [r0]
   14754:	bl	17e24 <close_stdout@@Base+0x5688>
   14758:	mov	r0, r1
   1475c:	pop	{r3, pc}
   14760:	ldr	r3, [r0]
   14764:	ldr	r0, [r1]
   14768:	subs	r3, r3, r0
   1476c:	rsbs	r0, r3, #0
   14770:	adcs	r0, r0, r3
   14774:	bx	lr
   14778:	subs	r1, r1, #1
   1477c:	beq	147a0 <close_stdout@@Base+0x2004>
   14780:	mov	r3, #0
   14784:	lsrs	r1, r1, #1
   14788:	add	r3, r3, #1
   1478c:	bne	14784 <close_stdout@@Base+0x1fe8>
   14790:	mul	r0, r0, r3
   14794:	add	r0, r0, #7
   14798:	lsr	r0, r0, #3
   1479c:	bx	lr
   147a0:	mov	r0, r1
   147a4:	bx	lr
   147a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ac:	sub	sp, sp, #60	; 0x3c
   147b0:	ldr	r4, [pc, #672]	; 14a58 <close_stdout@@Base+0x22bc>
   147b4:	subs	r8, r1, #0
   147b8:	ldr	r3, [pc, #668]	; 14a5c <close_stdout@@Base+0x22c0>
   147bc:	mov	r9, r0
   147c0:	add	r4, pc, r4
   147c4:	mov	r7, r2
   147c8:	ldr	r3, [r4, r3]
   147cc:	str	r3, [sp, #20]
   147d0:	ldr	r3, [r3]
   147d4:	str	r3, [sp, #52]	; 0x34
   147d8:	beq	14960 <close_stdout@@Base+0x21c4>
   147dc:	cmp	r8, #1
   147e0:	bne	14828 <close_stdout@@Base+0x208c>
   147e4:	mov	r0, #4
   147e8:	bl	15b5c <close_stdout@@Base+0x33c0>
   147ec:	subs	r2, r7, #1
   147f0:	mov	r3, #0
   147f4:	sbc	r3, r3, #0
   147f8:	mov	r5, r0
   147fc:	mov	r0, r9
   14800:	bl	144f0 <close_stdout@@Base+0x1d54>
   14804:	str	r0, [r5]
   14808:	ldr	r1, [sp, #20]
   1480c:	mov	r0, r5
   14810:	ldr	r2, [sp, #52]	; 0x34
   14814:	ldr	r3, [r1]
   14818:	cmp	r2, r3
   1481c:	bne	14a50 <close_stdout@@Base+0x22b4>
   14820:	add	sp, sp, #60	; 0x3c
   14824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14828:	cmp	r2, #131072	; 0x20000
   1482c:	bcc	1491c <close_stdout@@Base+0x2180>
   14830:	mov	r0, r2
   14834:	bl	17c38 <close_stdout@@Base+0x549c>
   14838:	cmp	r0, #31
   1483c:	bls	14914 <close_stdout@@Base+0x2178>
   14840:	ldr	ip, [pc, #536]	; 14a60 <close_stdout@@Base+0x22c4>
   14844:	lsl	r0, r8, #1
   14848:	ldr	r2, [pc, #532]	; 14a64 <close_stdout@@Base+0x22c8>
   1484c:	mov	r1, #0
   14850:	ldr	r3, [pc, #528]	; 14a68 <close_stdout@@Base+0x22cc>
   14854:	ldr	ip, [r4, ip]
   14858:	add	r2, pc, r2
   1485c:	add	r3, pc, r3
   14860:	str	ip, [sp]
   14864:	bl	16ebc <close_stdout@@Base+0x4720>
   14868:	cmp	r0, #0
   1486c:	str	r0, [sp, #12]
   14870:	beq	14a54 <close_stdout@@Base+0x22b8>
   14874:	cmn	r8, #-1073741823	; 0xc0000001
   14878:	bhi	14a54 <close_stdout@@Base+0x22b8>
   1487c:	lsl	r0, r8, #2
   14880:	bl	15b5c <close_stdout@@Base+0x33c0>
   14884:	cmp	r8, #0
   14888:	movne	r1, #1
   1488c:	mov	r5, r0
   14890:	strne	r1, [sp, #16]
   14894:	beq	14a08 <close_stdout@@Base+0x226c>
   14898:	mov	r6, #0
   1489c:	add	r3, sp, #44	; 0x2c
   148a0:	mov	r4, r6
   148a4:	add	r1, sp, #36	; 0x24
   148a8:	str	r3, [sp, #24]
   148ac:	str	r1, [sp, #28]
   148b0:	rsb	r2, r4, r7
   148b4:	mov	r0, r9
   148b8:	subs	r2, r2, #1
   148bc:	mov	r3, #0
   148c0:	sbc	r3, r3, #0
   148c4:	bl	144f0 <close_stdout@@Base+0x1d54>
   148c8:	ldr	r2, [sp, #16]
   148cc:	cmp	r2, #0
   148d0:	add	fp, r4, r0
   148d4:	bne	14968 <close_stdout@@Base+0x21cc>
   148d8:	ldr	r3, [r5, r6]
   148dc:	add	r4, r4, #1
   148e0:	ldr	r2, [r5, fp, lsl #2]
   148e4:	cmp	r4, r8
   148e8:	str	r2, [r5, r6]
   148ec:	add	r6, r6, #4
   148f0:	str	r3, [r5, fp, lsl #2]
   148f4:	bne	148b0 <close_stdout@@Base+0x2114>
   148f8:	cmn	r8, #-1073741823	; 0xc0000001
   148fc:	bhi	14a54 <close_stdout@@Base+0x22b8>
   14900:	mov	r0, r5
   14904:	lsl	r1, r8, #2
   14908:	bl	15bb4 <close_stdout@@Base+0x3418>
   1490c:	mov	r5, r0
   14910:	b	14808 <close_stdout@@Base+0x206c>
   14914:	cmn	r7, #-1073741823	; 0xc0000001
   14918:	bhi	14a54 <close_stdout@@Base+0x22b8>
   1491c:	lsl	r0, r7, #2
   14920:	bl	15b5c <close_stdout@@Base+0x33c0>
   14924:	cmp	r7, #0
   14928:	mov	r5, r0
   1492c:	beq	14948 <close_stdout@@Base+0x21ac>
   14930:	sub	r2, r0, #4
   14934:	mov	r3, #0
   14938:	str	r3, [r2, #4]!
   1493c:	add	r3, r3, #1
   14940:	cmp	r3, r7
   14944:	bne	14938 <close_stdout@@Base+0x219c>
   14948:	cmp	r8, #0
   1494c:	movne	r2, #0
   14950:	strne	r2, [sp, #16]
   14954:	strne	r2, [sp, #12]
   14958:	bne	14898 <close_stdout@@Base+0x20fc>
   1495c:	b	14900 <close_stdout@@Base+0x2164>
   14960:	mov	r5, r8
   14964:	b	14808 <close_stdout@@Base+0x206c>
   14968:	add	r1, sp, #44	; 0x2c
   1496c:	ldr	r0, [sp, #12]
   14970:	mov	r3, #0
   14974:	str	r4, [sp, #44]	; 0x2c
   14978:	str	r3, [sp, #48]	; 0x30
   1497c:	bl	17558 <close_stdout@@Base+0x4dbc>
   14980:	add	r1, sp, #36	; 0x24
   14984:	mov	r2, #0
   14988:	str	fp, [sp, #36]	; 0x24
   1498c:	str	r2, [sp, #40]	; 0x28
   14990:	mov	sl, r0
   14994:	ldr	r0, [sp, #12]
   14998:	bl	17558 <close_stdout@@Base+0x4dbc>
   1499c:	cmp	sl, #0
   149a0:	mov	r2, r0
   149a4:	beq	14a30 <close_stdout@@Base+0x2294>
   149a8:	cmp	r2, #0
   149ac:	beq	14a14 <close_stdout@@Base+0x2278>
   149b0:	ldr	r1, [r2, #4]
   149b4:	ldr	ip, [sl, #4]
   149b8:	ldr	r0, [sp, #12]
   149bc:	str	r1, [sl, #4]
   149c0:	mov	r1, sl
   149c4:	str	ip, [r2, #4]
   149c8:	str	r2, [sp, #8]
   149cc:	bl	174e4 <close_stdout@@Base+0x4d48>
   149d0:	ldr	r2, [sp, #8]
   149d4:	cmp	r0, #0
   149d8:	beq	14a54 <close_stdout@@Base+0x22b8>
   149dc:	mov	r1, r2
   149e0:	ldr	r0, [sp, #12]
   149e4:	bl	174e4 <close_stdout@@Base+0x4d48>
   149e8:	cmp	r0, #0
   149ec:	beq	14a54 <close_stdout@@Base+0x22b8>
   149f0:	ldr	r3, [sl, #4]
   149f4:	add	r4, r4, #1
   149f8:	cmp	r4, r8
   149fc:	str	r3, [r5, r6]
   14a00:	add	r6, r6, #4
   14a04:	bne	148b0 <close_stdout@@Base+0x2114>
   14a08:	ldr	r0, [sp, #12]
   14a0c:	bl	170a0 <close_stdout@@Base+0x4904>
   14a10:	b	14808 <close_stdout@@Base+0x206c>
   14a14:	mov	r0, #8
   14a18:	bl	15b5c <close_stdout@@Base+0x33c0>
   14a1c:	mov	r1, fp
   14a20:	mov	r2, r0
   14a24:	str	fp, [r0, #4]
   14a28:	str	fp, [r0]
   14a2c:	b	149b4 <close_stdout@@Base+0x2218>
   14a30:	mov	r0, #8
   14a34:	str	r2, [sp, #8]
   14a38:	bl	15b5c <close_stdout@@Base+0x33c0>
   14a3c:	str	r4, [r0, #4]
   14a40:	mov	sl, r0
   14a44:	str	r4, [r0]
   14a48:	ldr	r2, [sp, #8]
   14a4c:	b	149a8 <close_stdout@@Base+0x220c>
   14a50:	bl	1132c <__stack_chk_fail@plt>
   14a54:	bl	15d70 <close_stdout@@Base+0x35d4>
   14a58:	andeq	r5, r1, r8, lsr r8
   14a5c:	andeq	r0, r0, ip, lsr r1
   14a60:	andeq	r0, r0, r8, lsr r1
   14a64:			; <UNDEFINED> instruction: 0xfffffeec
   14a68:			; <UNDEFINED> instruction: 0xfffffefc
   14a6c:	push	{r3, r4, r5, r6, r7, lr}
   14a70:	subs	r5, r0, #0
   14a74:	ldr	r3, [pc, #100]	; 14ae0 <close_stdout@@Base+0x2344>
   14a78:	add	r3, pc, r3
   14a7c:	beq	14ad0 <close_stdout@@Base+0x2334>
   14a80:	ldr	r2, [pc, #92]	; 14ae4 <close_stdout@@Base+0x2348>
   14a84:	ldr	r3, [r3, r2]
   14a88:	ldr	r6, [r3]
   14a8c:	bl	114a0 <__errno_location@plt>
   14a90:	ldr	r4, [r0]
   14a94:	cmp	r4, #0
   14a98:	beq	14ad4 <close_stdout@@Base+0x2338>
   14a9c:	ldr	r1, [pc, #68]	; 14ae8 <close_stdout@@Base+0x234c>
   14aa0:	add	r1, pc, r1
   14aa4:	mov	r2, #5
   14aa8:	mov	r0, #0
   14aac:	bl	11320 <dcgettext@plt>
   14ab0:	mov	r7, r0
   14ab4:	mov	r0, r5
   14ab8:	bl	14348 <close_stdout@@Base+0x1bac>
   14abc:	mov	r1, r4
   14ac0:	mov	r2, r7
   14ac4:	mov	r3, r0
   14ac8:	mov	r0, r6
   14acc:	bl	113d4 <error@plt>
   14ad0:	bl	1159c <abort@plt>
   14ad4:	ldr	r1, [pc, #16]	; 14aec <close_stdout@@Base+0x2350>
   14ad8:	add	r1, pc, r1
   14adc:	b	14aa4 <close_stdout@@Base+0x2308>
   14ae0:	andeq	r5, r1, r0, lsl #11
   14ae4:	andeq	r0, r0, r0, ror #2
   14ae8:	muleq	r0, r4, r4
   14aec:	andeq	r4, r0, ip, asr #8
   14af0:	ldr	ip, [pc, #604]	; 14d54 <close_stdout@@Base+0x25b8>
   14af4:	ldr	r3, [pc, #604]	; 14d58 <close_stdout@@Base+0x25bc>
   14af8:	add	ip, pc, ip
   14afc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b00:	subs	r7, r1, #0
   14b04:	ldr	r5, [ip, r3]
   14b08:	sub	sp, sp, #16
   14b0c:	mov	r6, r0
   14b10:	ldr	r3, [r5]
   14b14:	str	r3, [sp, #12]
   14b18:	beq	14b90 <close_stdout@@Base+0x23f4>
   14b1c:	cmp	r0, #0
   14b20:	beq	14bb0 <close_stdout@@Base+0x2414>
   14b24:	ldr	r1, [pc, #560]	; 14d5c <close_stdout@@Base+0x25c0>
   14b28:	add	r1, pc, r1
   14b2c:	bl	16528 <close_stdout@@Base+0x3d8c>
   14b30:	subs	r8, r0, #0
   14b34:	beq	14ce0 <close_stdout@@Base+0x2544>
   14b38:	movw	r0, #2076	; 0x81c
   14b3c:	bl	15b5c <close_stdout@@Base+0x33c0>
   14b40:	ldr	ip, [pc, #536]	; 14d60 <close_stdout@@Base+0x25c4>
   14b44:	cmp	r7, #2048	; 0x800
   14b48:	movcc	r3, r7
   14b4c:	movcs	r3, #2048	; 0x800
   14b50:	mov	r2, #0
   14b54:	add	ip, pc, ip
   14b58:	mov	r4, r0
   14b5c:	mov	r0, r8
   14b60:	add	r1, r4, #12
   14b64:	str	r8, [r4]
   14b68:	str	r6, [r4, #8]
   14b6c:	str	ip, [r4, #4]
   14b70:	bl	114b8 <setvbuf@plt>
   14b74:	mov	r0, r4
   14b78:	ldr	r2, [sp, #12]
   14b7c:	ldr	r3, [r5]
   14b80:	cmp	r2, r3
   14b84:	bne	14d50 <close_stdout@@Base+0x25b4>
   14b88:	add	sp, sp, #16
   14b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b90:	movw	r0, #2076	; 0x81c
   14b94:	bl	15b5c <close_stdout@@Base+0x33c0>
   14b98:	ldr	r2, [pc, #452]	; 14d64 <close_stdout@@Base+0x25c8>
   14b9c:	add	r2, pc, r2
   14ba0:	mov	r3, r0
   14ba4:	str	r7, [r3]
   14ba8:	stmib	r3, {r2, r7}
   14bac:	b	14b78 <close_stdout@@Base+0x23dc>
   14bb0:	movw	r0, #2076	; 0x81c
   14bb4:	bl	15b5c <close_stdout@@Base+0x33c0>
   14bb8:	ldr	r3, [pc, #424]	; 14d68 <close_stdout@@Base+0x25cc>
   14bbc:	mov	r1, r6
   14bc0:	add	r3, pc, r3
   14bc4:	mov	r4, r0
   14bc8:	ldr	r0, [pc, #412]	; 14d6c <close_stdout@@Base+0x25d0>
   14bcc:	str	r6, [r4]
   14bd0:	add	r8, r4, #16
   14bd4:	add	r0, pc, r0
   14bd8:	str	r6, [r4, #8]
   14bdc:	str	r6, [r4, #12]
   14be0:	str	r3, [r4, #4]
   14be4:	bl	113e0 <open64@plt>
   14be8:	subs	r9, r0, #0
   14bec:	blt	14c30 <close_stdout@@Base+0x2494>
   14bf0:	cmp	r7, #1024	; 0x400
   14bf4:	movcc	r2, r7
   14bf8:	movcs	r2, #1024	; 0x400
   14bfc:	mov	r1, r8
   14c00:	movw	r3, #2060	; 0x80c
   14c04:	bl	1129c <__read_chk@plt>
   14c08:	mov	r3, r0
   14c0c:	mov	r0, r9
   14c10:	bic	r9, r3, r3, asr #31
   14c14:	bl	115a8 <close@plt>
   14c18:	cmp	r9, #1024	; 0x400
   14c1c:	bcc	14ce8 <close_stdout@@Base+0x254c>
   14c20:	mov	r0, r8
   14c24:	bl	15134 <close_stdout@@Base+0x2998>
   14c28:	mov	r0, r4
   14c2c:	b	14b78 <close_stdout@@Base+0x23dc>
   14c30:	add	r7, sp, #4
   14c34:	mov	r1, r6
   14c38:	mov	r9, #12
   14c3c:	mov	r0, r7
   14c40:	bl	113a4 <gettimeofday@plt>
   14c44:	mov	r3, r7
   14c48:	ldm	r3!, {r0, r1}
   14c4c:	str	r0, [r4, #16]
   14c50:	str	r1, [r8, #4]
   14c54:	bl	1144c <getpid@plt>
   14c58:	str	r0, [sp, #4]
   14c5c:	ldr	r0, [r7]
   14c60:	str	r0, [r4, #24]
   14c64:	bl	11560 <getppid@plt>
   14c68:	rsb	r2, r9, #1024	; 0x400
   14c6c:	cmp	r2, #4
   14c70:	movcs	r2, #4
   14c74:	mov	r1, r7
   14c78:	add	r6, r2, r9
   14c7c:	str	r0, [sp, #4]
   14c80:	add	r0, r8, r9
   14c84:	bl	112e4 <memcpy@plt>
   14c88:	cmp	r6, #1024	; 0x400
   14c8c:	bcs	14c20 <close_stdout@@Base+0x2484>
   14c90:	bl	112b4 <getuid@plt>
   14c94:	rsb	r2, r6, #1024	; 0x400
   14c98:	cmp	r2, #4
   14c9c:	movcs	r2, #4
   14ca0:	mov	r1, r7
   14ca4:	add	r9, r2, r6
   14ca8:	str	r0, [sp, #4]
   14cac:	add	r0, r8, r6
   14cb0:	bl	112e4 <memcpy@plt>
   14cb4:	cmp	r9, #1024	; 0x400
   14cb8:	bcs	14c20 <close_stdout@@Base+0x2484>
   14cbc:	bl	114c4 <getgid@plt>
   14cc0:	rsb	r2, r9, #1024	; 0x400
   14cc4:	mov	r1, r7
   14cc8:	cmp	r2, #4
   14ccc:	movcs	r2, #4
   14cd0:	str	r0, [sp, #4]
   14cd4:	add	r0, r8, r9
   14cd8:	bl	112e4 <memcpy@plt>
   14cdc:	b	14c20 <close_stdout@@Base+0x2484>
   14ce0:	mov	r0, r8
   14ce4:	b	14b78 <close_stdout@@Base+0x23dc>
   14ce8:	add	r7, sp, #4
   14cec:	rsb	sl, r9, #1024	; 0x400
   14cf0:	cmp	sl, #8
   14cf4:	movcs	sl, #8
   14cf8:	mov	r1, r6
   14cfc:	mov	r0, r7
   14d00:	add	r6, sl, r9
   14d04:	bl	113a4 <gettimeofday@plt>
   14d08:	mov	r2, sl
   14d0c:	add	r0, r8, r9
   14d10:	mov	r1, r7
   14d14:	bl	112e4 <memcpy@plt>
   14d18:	cmp	r6, #1024	; 0x400
   14d1c:	bcs	14c20 <close_stdout@@Base+0x2484>
   14d20:	bl	1144c <getpid@plt>
   14d24:	rsb	r2, r6, #1024	; 0x400
   14d28:	cmp	r2, #4
   14d2c:	movcs	r2, #4
   14d30:	mov	r1, r7
   14d34:	add	r9, r2, r6
   14d38:	str	r0, [sp, #4]
   14d3c:	add	r0, r8, r6
   14d40:	bl	112e4 <memcpy@plt>
   14d44:	cmp	r9, #1024	; 0x400
   14d48:	bcc	14c64 <close_stdout@@Base+0x24c8>
   14d4c:	b	14c20 <close_stdout@@Base+0x2484>
   14d50:	bl	1132c <__stack_chk_fail@plt>
   14d54:	andeq	r5, r1, r0, lsl #10
   14d58:	andeq	r0, r0, ip, lsr r1
   14d5c:	andeq	r4, r0, ip, lsl r4
   14d60:			; <UNDEFINED> instruction: 0xffffff10
   14d64:			; <UNDEFINED> instruction: 0xfffffec8
   14d68:			; <UNDEFINED> instruction: 0xfffffea4
   14d6c:	andeq	r4, r0, r4, ror r3
   14d70:	str	r1, [r0, #4]
   14d74:	bx	lr
   14d78:	str	r1, [r0, #8]
   14d7c:	bx	lr
   14d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d84:	mov	r6, r0
   14d88:	ldr	r3, [r0]
   14d8c:	sub	sp, sp, #12
   14d90:	mov	r5, r1
   14d94:	mov	r4, r2
   14d98:	cmp	r3, #0
   14d9c:	beq	14e00 <close_stdout@@Base+0x2664>
   14da0:	str	r3, [sp, #4]
   14da4:	bl	114a0 <__errno_location@plt>
   14da8:	ldr	r3, [sp, #4]
   14dac:	mov	r7, r0
   14db0:	b	14dd8 <close_stdout@@Base+0x263c>
   14db4:	ldr	r3, [r6]
   14db8:	ldr	r3, [r3]
   14dbc:	ands	r3, r3, #32
   14dc0:	movne	r3, r2
   14dc4:	str	r3, [r7]
   14dc8:	ldr	r3, [r6, #4]
   14dcc:	ldr	r0, [r6, #8]
   14dd0:	blx	r3
   14dd4:	ldr	r3, [r6]
   14dd8:	mov	r2, r4
   14ddc:	mov	r0, r5
   14de0:	mov	r1, #1
   14de4:	bl	11584 <fread_unlocked@plt>
   14de8:	ldr	r2, [r7]
   14dec:	subs	r4, r4, r0
   14df0:	add	r5, r5, r0
   14df4:	bne	14db4 <close_stdout@@Base+0x2618>
   14df8:	add	sp, sp, #12
   14dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e00:	ldr	r8, [r0, #12]
   14e04:	cmp	r2, r8
   14e08:	bls	14ec0 <close_stdout@@Base+0x2724>
   14e0c:	add	r9, r0, #12
   14e10:	rsb	r1, r8, #2064	; 0x810
   14e14:	add	r1, r9, r1
   14e18:	add	sl, r9, #1040	; 0x410
   14e1c:	add	r7, r0, #16
   14e20:	mov	r0, r5
   14e24:	mov	r2, r8
   14e28:	add	r5, r5, r8
   14e2c:	bl	112e4 <memcpy@plt>
   14e30:	tst	r5, #3
   14e34:	rsb	r4, r8, r4
   14e38:	beq	14e58 <close_stdout@@Base+0x26bc>
   14e3c:	b	14e9c <close_stdout@@Base+0x2700>
   14e40:	mov	r1, r5
   14e44:	mov	r0, r7
   14e48:	bl	14f04 <close_stdout@@Base+0x2768>
   14e4c:	subs	r4, r4, #1024	; 0x400
   14e50:	add	r5, r5, #1024	; 0x400
   14e54:	beq	14e90 <close_stdout@@Base+0x26f4>
   14e58:	cmp	r4, #1024	; 0x400
   14e5c:	bcs	14e40 <close_stdout@@Base+0x26a4>
   14e60:	add	fp, r9, #1040	; 0x410
   14e64:	mov	r0, r7
   14e68:	mov	r1, fp
   14e6c:	bl	14f04 <close_stdout@@Base+0x2768>
   14e70:	mov	r1, fp
   14e74:	mov	r8, #1024	; 0x400
   14e78:	mov	r2, r4
   14e7c:	mov	r0, r5
   14e80:	bl	112e4 <memcpy@plt>
   14e84:	rsb	r4, r4, r8
   14e88:	str	r4, [r6, #12]
   14e8c:	b	14df8 <close_stdout@@Base+0x265c>
   14e90:	str	r4, [r6, #12]
   14e94:	add	sp, sp, #12
   14e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e9c:	mov	r1, sl
   14ea0:	mov	r0, r7
   14ea4:	bl	14f04 <close_stdout@@Base+0x2768>
   14ea8:	mov	r8, #1024	; 0x400
   14eac:	cmp	r4, r8
   14eb0:	mov	r1, sl
   14eb4:	mov	fp, sl
   14eb8:	bhi	14e20 <close_stdout@@Base+0x2684>
   14ebc:	b	14e70 <close_stdout@@Base+0x26d4>
   14ec0:	add	r1, r0, #12
   14ec4:	rsb	r3, r8, #2064	; 0x810
   14ec8:	add	r1, r1, r3
   14ecc:	b	14e78 <close_stdout@@Base+0x26dc>
   14ed0:	push	{r3, r4, r5, lr}
   14ed4:	mov	r1, #0
   14ed8:	mov	r4, r0
   14edc:	ldr	r5, [r0]
   14ee0:	movw	r2, #2076	; 0x81c
   14ee4:	bl	114d0 <memset@plt>
   14ee8:	mov	r0, r4
   14eec:	bl	112c0 <free@plt>
   14ef0:	subs	r0, r5, #0
   14ef4:	beq	14f00 <close_stdout@@Base+0x2764>
   14ef8:	pop	{r3, r4, r5, lr}
   14efc:	b	16300 <close_stdout@@Base+0x3b64>
   14f00:	pop	{r3, r4, r5, pc}
   14f04:	push	{r4, r5, r6, r7, r8, r9}
   14f08:	add	r6, r0, #512	; 0x200
   14f0c:	ldr	r5, [r0, #1032]	; 0x408
   14f10:	add	r4, r0, #16
   14f14:	ldr	ip, [r0, #1028]	; 0x404
   14f18:	mov	r3, r0
   14f1c:	add	r5, r5, #1
   14f20:	ldr	r2, [r0, #1024]	; 0x400
   14f24:	add	ip, r5, ip
   14f28:	str	r5, [r0, #1032]	; 0x408
   14f2c:	ldr	r7, [r4, #-16]
   14f30:	eor	r2, r2, r2, lsl #13
   14f34:	ldr	r5, [r3, #512]	; 0x200
   14f38:	add	r3, r3, #16
   14f3c:	and	r8, r7, #1020	; 0x3fc
   14f40:	add	r4, r4, #16
   14f44:	add	r5, r2, r5
   14f48:	add	r1, r1, #16
   14f4c:	ldr	r2, [r0, r8]
   14f50:	eor	r8, r5, r5, lsr #6
   14f54:	add	r5, r5, r2
   14f58:	add	ip, r5, ip
   14f5c:	str	ip, [r4, #-32]	; 0xffffffe0
   14f60:	lsr	ip, ip, #8
   14f64:	and	ip, ip, #1020	; 0x3fc
   14f68:	ldr	r2, [r0, ip]
   14f6c:	add	r7, r7, r2
   14f70:	str	r7, [r1, #-16]
   14f74:	ldr	r5, [r3, #-12]
   14f78:	ldr	r2, [r3, #500]	; 0x1f4
   14f7c:	and	ip, r5, #1020	; 0x3fc
   14f80:	add	r2, r8, r2
   14f84:	ldr	ip, [r0, ip]
   14f88:	eor	r8, r2, r2, lsl #2
   14f8c:	add	r2, r2, ip
   14f90:	add	r2, r2, r7
   14f94:	str	r2, [r3, #-12]
   14f98:	lsr	r2, r2, #8
   14f9c:	and	r2, r2, #1020	; 0x3fc
   14fa0:	ldr	r7, [r0, r2]
   14fa4:	add	r7, r5, r7
   14fa8:	str	r7, [r1, #-12]
   14fac:	ldr	r5, [r3, #-8]
   14fb0:	ldr	ip, [r3, #504]	; 0x1f8
   14fb4:	and	r2, r5, #1020	; 0x3fc
   14fb8:	add	ip, r8, ip
   14fbc:	ldr	r8, [r0, r2]
   14fc0:	eor	r2, ip, ip, lsr #16
   14fc4:	add	ip, ip, r8
   14fc8:	add	ip, ip, r7
   14fcc:	str	ip, [r3, #-8]
   14fd0:	lsr	ip, ip, #8
   14fd4:	and	ip, ip, #1020	; 0x3fc
   14fd8:	ldr	r7, [r0, ip]
   14fdc:	add	r7, r5, r7
   14fe0:	str	r7, [r1, #-8]
   14fe4:	ldr	ip, [r3, #-4]
   14fe8:	ldr	r8, [r3, #508]	; 0x1fc
   14fec:	and	r5, ip, #1020	; 0x3fc
   14ff0:	add	r2, r2, r8
   14ff4:	ldr	r5, [r0, r5]
   14ff8:	add	r5, r2, r5
   14ffc:	add	r5, r5, r7
   15000:	str	r5, [r3, #-4]
   15004:	cmp	r3, r6
   15008:	lsr	r5, r5, #8
   1500c:	and	r5, r5, #1020	; 0x3fc
   15010:	ldr	r5, [r0, r5]
   15014:	add	ip, ip, r5
   15018:	str	ip, [r1, #-4]
   1501c:	bcc	14f2c <close_stdout@@Base+0x2790>
   15020:	add	r4, r3, #16
   15024:	add	r7, r0, #1024	; 0x400
   15028:	mov	r5, r4
   1502c:	ldr	r8, [r5, #-16]
   15030:	eor	r2, r2, r2, lsl #13
   15034:	ldr	r6, [r3, #-512]	; 0xfffffe00
   15038:	cmp	r4, r7
   1503c:	and	r9, r8, #1020	; 0x3fc
   15040:	add	r5, r5, #16
   15044:	add	r6, r2, r6
   15048:	add	r1, r1, #16
   1504c:	ldr	r2, [r0, r9]
   15050:	eor	r9, r6, r6, lsr #6
   15054:	add	r6, r6, r2
   15058:	add	ip, r6, ip
   1505c:	str	ip, [r5, #-32]	; 0xffffffe0
   15060:	lsr	ip, ip, #8
   15064:	and	ip, ip, #1020	; 0x3fc
   15068:	ldr	r2, [r0, ip]
   1506c:	add	r8, r8, r2
   15070:	str	r8, [r1, #-16]
   15074:	ldr	r6, [r3, #4]
   15078:	ldr	r2, [r3, #-508]	; 0xfffffe04
   1507c:	and	ip, r6, #1020	; 0x3fc
   15080:	add	r2, r9, r2
   15084:	ldr	ip, [r0, ip]
   15088:	eor	r9, r2, r2, lsl #2
   1508c:	add	r2, r2, ip
   15090:	add	r2, r2, r8
   15094:	str	r2, [r3, #4]
   15098:	lsr	r2, r2, #8
   1509c:	and	r2, r2, #1020	; 0x3fc
   150a0:	ldr	r8, [r0, r2]
   150a4:	add	r8, r6, r8
   150a8:	str	r8, [r1, #-12]
   150ac:	ldr	r6, [r3, #8]
   150b0:	ldr	ip, [r3, #-504]	; 0xfffffe08
   150b4:	and	r2, r6, #1020	; 0x3fc
   150b8:	add	ip, r9, ip
   150bc:	ldr	r9, [r0, r2]
   150c0:	eor	r2, ip, ip, lsr #16
   150c4:	add	ip, ip, r9
   150c8:	add	ip, ip, r8
   150cc:	str	ip, [r3, #8]
   150d0:	lsr	ip, ip, #8
   150d4:	and	ip, ip, #1020	; 0x3fc
   150d8:	ldr	r8, [r0, ip]
   150dc:	add	r8, r6, r8
   150e0:	str	r8, [r1, #-8]
   150e4:	ldr	ip, [r3, #12]
   150e8:	ldr	r9, [r3, #-500]	; 0xfffffe0c
   150ec:	and	r6, ip, #1020	; 0x3fc
   150f0:	add	r2, r2, r9
   150f4:	ldr	r6, [r0, r6]
   150f8:	add	r6, r2, r6
   150fc:	add	r6, r6, r8
   15100:	str	r6, [r3, #12]
   15104:	mov	r3, r4
   15108:	add	r4, r4, #16
   1510c:	lsr	r6, r6, #8
   15110:	and	r6, r6, #1020	; 0x3fc
   15114:	ldr	r6, [r0, r6]
   15118:	add	ip, ip, r6
   1511c:	str	ip, [r1, #-4]
   15120:	bcc	1502c <close_stdout@@Base+0x2890>
   15124:	str	r2, [r0, #1024]	; 0x400
   15128:	str	ip, [r0, #1028]	; 0x404
   1512c:	pop	{r4, r5, r6, r7, r8, r9}
   15130:	bx	lr
   15134:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   15138:	movw	ip, #15433	; 0x3c49
   1513c:	movw	r6, #37145	; 0x9119
   15140:	movw	r4, #59931	; 0xea1b
   15144:	movw	r1, #19064	; 0x4a78
   15148:	movw	r2, #6872	; 0x1ad8
   1514c:	movw	r7, #15947	; 0x3e4b
   15150:	mov	r5, #89	; 0x59
   15154:	movw	r8, #57178	; 0xdf5a
   15158:	sub	sp, sp, #8
   1515c:	movt	r6, #12384	; 0x3060
   15160:	movt	r4, #50415	; 0xc4ef
   15164:	movt	ip, #42266	; 0xa51a
   15168:	movt	r1, #55594	; 0xd92a
   1516c:	movt	r2, #3906	; 0xf42
   15170:	movt	r7, #49942	; 0xc316
   15174:	movt	r5, #38361	; 0x95d9
   15178:	movt	r8, #4967	; 0x1367
   1517c:	mov	r3, r0
   15180:	mov	r9, #0
   15184:	ldr	fp, [r3, #4]
   15188:	add	r3, r3, #32
   1518c:	ldr	sl, [r0, r9]
   15190:	add	r5, r5, fp
   15194:	ldr	fp, [r3, #-20]	; 0xffffffec
   15198:	add	r8, r8, sl
   1519c:	ldr	sl, [r3, #-24]	; 0xffffffe8
   151a0:	eor	r8, r8, r5, lsl #11
   151a4:	add	fp, r8, fp
   151a8:	add	r7, r7, sl
   151ac:	add	fp, fp, r2
   151b0:	add	r5, r7, r5
   151b4:	add	r2, fp, r7
   151b8:	ldr	sl, [r3, #-12]
   151bc:	eor	r5, r5, r7, lsr #2
   151c0:	eor	r7, r2, fp, lsl #8
   151c4:	ldr	r2, [r3, #-16]
   151c8:	add	sl, r7, sl
   151cc:	add	sl, sl, ip
   151d0:	ldr	ip, [r3, #-4]
   151d4:	add	r2, r5, r2
   151d8:	str	r2, [sp, #4]
   151dc:	add	r2, r2, r1
   151e0:	add	r1, sl, r2
   151e4:	add	fp, r2, fp
   151e8:	eor	r1, r1, sl, lsl #10
   151ec:	eor	r2, fp, r2, lsr #16
   151f0:	add	fp, r1, ip
   151f4:	ldr	ip, [r3, #-8]
   151f8:	add	r6, fp, r6
   151fc:	add	ip, r2, ip
   15200:	add	r4, ip, r4
   15204:	add	ip, r4, sl
   15208:	add	fp, r6, r4
   1520c:	eor	ip, ip, r4, lsr #4
   15210:	eor	r4, fp, r6, lsl #8
   15214:	add	sl, ip, r8
   15218:	add	r5, r4, r5
   1521c:	add	r8, r5, sl
   15220:	str	r8, [r0, r9]
   15224:	add	r9, r9, #32
   15228:	add	r6, r6, sl
   1522c:	cmp	r9, #1024	; 0x400
   15230:	eor	r6, r6, sl, lsr #9
   15234:	str	r5, [r3, #-28]	; 0xffffffe4
   15238:	add	r7, r6, r7
   1523c:	str	r4, [r3, #-8]
   15240:	str	r7, [r3, #-24]	; 0xffffffe8
   15244:	str	r6, [r3, #-4]
   15248:	str	ip, [r3, #-12]
   1524c:	str	r1, [r3, #-16]
   15250:	str	r2, [r3, #-20]	; 0xffffffec
   15254:	bne	15184 <close_stdout@@Base+0x29e8>
   15258:	add	r3, r0, #4
   1525c:	mov	r9, #0
   15260:	ldr	fp, [r3]
   15264:	add	r9, r9, #8
   15268:	ldr	sl, [r3, #-4]
   1526c:	cmp	r9, #256	; 0x100
   15270:	add	r5, r5, fp
   15274:	ldr	fp, [r3, #4]
   15278:	add	r8, r8, sl
   1527c:	add	r3, r3, #32
   15280:	add	r7, r7, fp
   15284:	ldr	fp, [r3, #-24]	; 0xffffffe8
   15288:	eor	r8, r8, r5, lsl #11
   1528c:	add	r5, r7, r5
   15290:	add	sl, r8, fp
   15294:	ldr	fp, [r3, #-20]	; 0xffffffec
   15298:	eor	r5, r5, r7, lsr #2
   1529c:	add	r2, sl, r2
   152a0:	add	sl, r5, fp
   152a4:	add	r7, r2, r7
   152a8:	add	r1, sl, r1
   152ac:	ldr	sl, [r3, #-16]
   152b0:	eor	r7, r7, r2, lsl #8
   152b4:	add	r2, r1, r2
   152b8:	add	fp, r7, sl
   152bc:	ldr	sl, [r3, #-12]
   152c0:	eor	r2, r2, r1, lsr #16
   152c4:	add	ip, fp, ip
   152c8:	add	fp, r2, sl
   152cc:	add	r1, ip, r1
   152d0:	add	r4, fp, r4
   152d4:	ldr	fp, [r3, #-8]
   152d8:	eor	r1, r1, ip, lsl #10
   152dc:	add	ip, r4, ip
   152e0:	add	sl, r1, fp
   152e4:	eor	ip, ip, r4, lsr #4
   152e8:	add	r6, sl, r6
   152ec:	add	r8, ip, r8
   152f0:	add	r4, r6, r4
   152f4:	str	r1, [r3, #-20]	; 0xffffffec
   152f8:	eor	r4, r4, r6, lsl #8
   152fc:	add	r6, r6, r8
   15300:	eor	r6, r6, r8, lsr #9
   15304:	add	r5, r4, r5
   15308:	add	r8, r5, r8
   1530c:	str	r2, [r3, #-24]	; 0xffffffe8
   15310:	add	r7, r6, r7
   15314:	str	r5, [r3, #-32]	; 0xffffffe0
   15318:	str	r8, [r3, #-36]	; 0xffffffdc
   1531c:	str	r7, [r3, #-28]	; 0xffffffe4
   15320:	str	r4, [r3, #-12]
   15324:	str	r6, [r3, #-8]
   15328:	str	ip, [r3, #-16]
   1532c:	bne	15260 <close_stdout@@Base+0x2ac4>
   15330:	mov	r3, #0
   15334:	str	r3, [r0, #1032]	; 0x408
   15338:	str	r3, [r0, #1028]	; 0x404
   1533c:	str	r3, [r0, #1024]	; 0x400
   15340:	add	sp, sp, #8
   15344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15348:	bx	lr
   1534c:	ldr	r3, [pc, #472]	; 1552c <close_stdout@@Base+0x2d90>
   15350:	ldr	r2, [pc, #472]	; 15530 <close_stdout@@Base+0x2d94>
   15354:	add	r3, pc, r3
   15358:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1535c:	sub	sp, sp, #112	; 0x70
   15360:	ldr	r7, [r3, r2]
   15364:	mov	r8, r1
   15368:	mov	r6, r0
   1536c:	ldr	r3, [r7]
   15370:	str	r3, [sp, #108]	; 0x6c
   15374:	bl	114f4 <fileno@plt>
   15378:	mov	r2, sp
   1537c:	mov	r1, r0
   15380:	mov	r0, #3
   15384:	bl	11368 <__fxstat64@plt>
   15388:	cmp	r0, #0
   1538c:	blt	153a0 <close_stdout@@Base+0x2c04>
   15390:	ldr	r3, [sp, #16]
   15394:	and	r3, r3, #61440	; 0xf000
   15398:	cmp	r3, #32768	; 0x8000
   1539c:	beq	154c0 <close_stdout@@Base+0x2d24>
   153a0:	mov	r4, #8192	; 0x2000
   153a4:	mov	r0, r4
   153a8:	bl	113f8 <malloc@plt>
   153ac:	subs	r9, r0, #0
   153b0:	beq	15520 <close_stdout@@Base+0x2d84>
   153b4:	mov	r5, #0
   153b8:	b	153f0 <close_stdout@@Base+0x2c54>
   153bc:	cmn	r4, #1
   153c0:	beq	15488 <close_stdout@@Base+0x2cec>
   153c4:	lsr	r3, r4, #1
   153c8:	mov	r0, r9
   153cc:	mvn	r2, r3
   153d0:	cmp	r4, r2
   153d4:	addcc	r4, r4, r3
   153d8:	mvncs	r4, #0
   153dc:	mov	r1, r4
   153e0:	bl	11344 <realloc@plt>
   153e4:	cmp	r0, #0
   153e8:	beq	15468 <close_stdout@@Base+0x2ccc>
   153ec:	mov	r9, r0
   153f0:	rsb	sl, r5, r4
   153f4:	add	r0, r9, r5
   153f8:	mov	r1, #1
   153fc:	mov	r3, r6
   15400:	mov	r2, sl
   15404:	bl	113b0 <fread@plt>
   15408:	cmp	sl, r0
   1540c:	add	r5, r5, r0
   15410:	beq	153bc <close_stdout@@Base+0x2c20>
   15414:	bl	114a0 <__errno_location@plt>
   15418:	mov	sl, r0
   1541c:	mov	r0, r6
   15420:	ldr	r6, [sl]
   15424:	bl	112cc <ferror@plt>
   15428:	cmp	r0, #0
   1542c:	bne	15474 <close_stdout@@Base+0x2cd8>
   15430:	sub	r4, r4, #1
   15434:	cmp	r4, r5
   15438:	bhi	154a8 <close_stdout@@Base+0x2d0c>
   1543c:	mov	r3, r9
   15440:	mov	r2, #0
   15444:	strb	r2, [r9, r5]
   15448:	str	r5, [r8]
   1544c:	ldr	r2, [sp, #108]	; 0x6c
   15450:	mov	r0, r3
   15454:	ldr	r3, [r7]
   15458:	cmp	r2, r3
   1545c:	bne	15528 <close_stdout@@Base+0x2d8c>
   15460:	add	sp, sp, #112	; 0x70
   15464:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15468:	bl	114a0 <__errno_location@plt>
   1546c:	ldr	r6, [r0]
   15470:	mov	sl, r0
   15474:	mov	r0, r9
   15478:	bl	112c0 <free@plt>
   1547c:	str	r6, [sl]
   15480:	mov	r3, #0
   15484:	b	1544c <close_stdout@@Base+0x2cb0>
   15488:	bl	114a0 <__errno_location@plt>
   1548c:	mov	r6, #12
   15490:	mov	sl, r0
   15494:	mov	r0, r9
   15498:	bl	112c0 <free@plt>
   1549c:	str	r6, [sl]
   154a0:	mov	r3, #0
   154a4:	b	1544c <close_stdout@@Base+0x2cb0>
   154a8:	mov	r0, r9
   154ac:	add	r1, r5, #1
   154b0:	bl	11344 <realloc@plt>
   154b4:	cmp	r0, #0
   154b8:	movne	r9, r0
   154bc:	b	1543c <close_stdout@@Base+0x2ca0>
   154c0:	mov	r0, r6
   154c4:	bl	115c0 <ftello64@plt>
   154c8:	cmp	r0, #0
   154cc:	sbcs	r3, r1, #0
   154d0:	blt	153a0 <close_stdout@@Base+0x2c04>
   154d4:	ldrd	r4, [sp, #48]	; 0x30
   154d8:	cmp	r0, r4
   154dc:	sbcs	ip, r1, r5
   154e0:	bge	153a0 <close_stdout@@Base+0x2c04>
   154e4:	mov	r2, r4
   154e8:	mov	r3, r5
   154ec:	subs	r2, r2, r0
   154f0:	sbc	r3, r3, r1
   154f4:	mvn	r0, #1
   154f8:	mov	r1, #0
   154fc:	cmp	r0, r2
   15500:	sbcs	ip, r1, r3
   15504:	addge	r4, r2, #1
   15508:	bge	153a4 <close_stdout@@Base+0x2c08>
   1550c:	bl	114a0 <__errno_location@plt>
   15510:	mov	r2, #12
   15514:	mov	r3, #0
   15518:	str	r2, [r0]
   1551c:	b	1544c <close_stdout@@Base+0x2cb0>
   15520:	mov	r3, r9
   15524:	b	1544c <close_stdout@@Base+0x2cb0>
   15528:	bl	1132c <__stack_chk_fail@plt>
   1552c:	andeq	r4, r1, r4, lsr #25
   15530:	andeq	r0, r0, ip, lsr r1
   15534:	push	{r4, r5, r6, lr}
   15538:	mov	r4, r1
   1553c:	mov	r1, r2
   15540:	bl	1156c <fopen64@plt>
   15544:	subs	r5, r0, #0
   15548:	beq	15594 <close_stdout@@Base+0x2df8>
   1554c:	mov	r1, r4
   15550:	bl	1534c <close_stdout@@Base+0x2bb0>
   15554:	mov	r6, r0
   15558:	bl	114a0 <__errno_location@plt>
   1555c:	mov	r4, r0
   15560:	mov	r0, r5
   15564:	ldr	r5, [r4]
   15568:	bl	16300 <close_stdout@@Base+0x3b64>
   1556c:	cmp	r0, #0
   15570:	bne	1557c <close_stdout@@Base+0x2de0>
   15574:	mov	r0, r6
   15578:	pop	{r4, r5, r6, pc}
   1557c:	cmp	r6, #0
   15580:	beq	15590 <close_stdout@@Base+0x2df4>
   15584:	mov	r0, r6
   15588:	ldr	r5, [r4]
   1558c:	bl	112c0 <free@plt>
   15590:	str	r5, [r4]
   15594:	mov	r0, #0
   15598:	pop	{r4, r5, r6, pc}
   1559c:	ldr	r2, [pc, #4]	; 155a8 <close_stdout@@Base+0x2e0c>
   155a0:	add	r2, pc, r2
   155a4:	b	15534 <close_stdout@@Base+0x2d98>
   155a8:	andeq	r3, r0, r4, lsl r8
   155ac:	ldr	r2, [pc, #4]	; 155b8 <close_stdout@@Base+0x2e1c>
   155b0:	add	r2, pc, r2
   155b4:	b	15534 <close_stdout@@Base+0x2d98>
   155b8:	muleq	r0, r4, r9
   155bc:	push	{r4, r5, r6, r7, lr}
   155c0:	cmp	r1, #0
   155c4:	sub	sp, sp, #36	; 0x24
   155c8:	ldr	r7, [pc, #896]	; 15950 <close_stdout@@Base+0x31b4>
   155cc:	mov	ip, r3
   155d0:	mov	r5, r0
   155d4:	add	r7, pc, r7
   155d8:	ldr	r4, [sp, #56]	; 0x38
   155dc:	ldr	r6, [sp, #60]	; 0x3c
   155e0:	beq	15924 <close_stdout@@Base+0x3188>
   155e4:	str	r2, [sp]
   155e8:	mov	r3, r1
   155ec:	ldr	r2, [pc, #864]	; 15954 <close_stdout@@Base+0x31b8>
   155f0:	mov	r1, #1
   155f4:	str	ip, [sp, #4]
   155f8:	add	r2, pc, r2
   155fc:	bl	11500 <__fprintf_chk@plt>
   15600:	ldr	r1, [pc, #848]	; 15958 <close_stdout@@Base+0x31bc>
   15604:	mov	r2, #5
   15608:	mov	r0, #0
   1560c:	add	r1, pc, r1
   15610:	bl	11320 <dcgettext@plt>
   15614:	ldr	r2, [pc, #832]	; 1595c <close_stdout@@Base+0x31c0>
   15618:	movw	ip, #2013	; 0x7dd
   1561c:	mov	r1, #1
   15620:	ldr	r2, [r7, r2]
   15624:	str	ip, [sp]
   15628:	mov	r3, r0
   1562c:	mov	r0, r5
   15630:	bl	11500 <__fprintf_chk@plt>
   15634:	ldr	r1, [pc, #804]	; 15960 <close_stdout@@Base+0x31c4>
   15638:	mov	r0, #0
   1563c:	mov	r2, #5
   15640:	add	r1, pc, r1
   15644:	bl	11320 <dcgettext@plt>
   15648:	mov	r1, r5
   1564c:	bl	1126c <fputs_unlocked@plt>
   15650:	cmp	r6, #9
   15654:	addls	pc, pc, r6, lsl #2
   15658:	b	15940 <close_stdout@@Base+0x31a4>
   1565c:	b	156f0 <close_stdout@@Base+0x2f54>
   15660:	b	156f4 <close_stdout@@Base+0x2f58>
   15664:	b	15724 <close_stdout@@Base+0x2f88>
   15668:	b	15758 <close_stdout@@Base+0x2fbc>
   1566c:	b	15794 <close_stdout@@Base+0x2ff8>
   15670:	b	157d4 <close_stdout@@Base+0x3038>
   15674:	b	1581c <close_stdout@@Base+0x3080>
   15678:	b	1586c <close_stdout@@Base+0x30d0>
   1567c:	b	158c4 <close_stdout@@Base+0x3128>
   15680:	b	15684 <close_stdout@@Base+0x2ee8>
   15684:	ldr	r1, [pc, #728]	; 15964 <close_stdout@@Base+0x31c8>
   15688:	mov	r0, #0
   1568c:	add	r1, pc, r1
   15690:	mov	r2, #5
   15694:	bl	11320 <dcgettext@plt>
   15698:	ldm	r4, {r3, ip}
   1569c:	mov	r1, #1
   156a0:	str	ip, [sp]
   156a4:	ldr	ip, [r4, #8]
   156a8:	str	ip, [sp, #4]
   156ac:	ldr	ip, [r4, #12]
   156b0:	str	ip, [sp, #8]
   156b4:	ldr	ip, [r4, #16]
   156b8:	str	ip, [sp, #12]
   156bc:	ldr	ip, [r4, #20]
   156c0:	str	ip, [sp, #16]
   156c4:	ldr	ip, [r4, #24]
   156c8:	str	ip, [sp, #20]
   156cc:	ldr	ip, [r4, #28]
   156d0:	str	ip, [sp, #24]
   156d4:	ldr	ip, [r4, #32]
   156d8:	str	ip, [sp, #28]
   156dc:	mov	r2, r0
   156e0:	mov	r0, r5
   156e4:	bl	11500 <__fprintf_chk@plt>
   156e8:	add	sp, sp, #36	; 0x24
   156ec:	pop	{r4, r5, r6, r7, pc}
   156f0:	bl	1159c <abort@plt>
   156f4:	ldr	r1, [pc, #620]	; 15968 <close_stdout@@Base+0x31cc>
   156f8:	mov	r2, #5
   156fc:	mov	r0, #0
   15700:	add	r1, pc, r1
   15704:	bl	11320 <dcgettext@plt>
   15708:	ldr	r3, [r4]
   1570c:	mov	r1, #1
   15710:	mov	r2, r0
   15714:	mov	r0, r5
   15718:	add	sp, sp, #36	; 0x24
   1571c:	pop	{r4, r5, r6, r7, lr}
   15720:	b	11500 <__fprintf_chk@plt>
   15724:	ldr	r1, [pc, #576]	; 1596c <close_stdout@@Base+0x31d0>
   15728:	mov	r2, #5
   1572c:	mov	r0, #0
   15730:	add	r1, pc, r1
   15734:	bl	11320 <dcgettext@plt>
   15738:	ldm	r4, {r3, ip}
   1573c:	mov	r1, #1
   15740:	str	ip, [sp, #56]	; 0x38
   15744:	mov	r2, r0
   15748:	mov	r0, r5
   1574c:	add	sp, sp, #36	; 0x24
   15750:	pop	{r4, r5, r6, r7, lr}
   15754:	b	11500 <__fprintf_chk@plt>
   15758:	ldr	r1, [pc, #528]	; 15970 <close_stdout@@Base+0x31d4>
   1575c:	mov	r2, #5
   15760:	mov	r0, #0
   15764:	add	r1, pc, r1
   15768:	bl	11320 <dcgettext@plt>
   1576c:	ldm	r4, {r3, ip}
   15770:	mov	r1, #1
   15774:	str	ip, [sp, #56]	; 0x38
   15778:	ldr	ip, [r4, #8]
   1577c:	str	ip, [sp, #60]	; 0x3c
   15780:	mov	r2, r0
   15784:	mov	r0, r5
   15788:	add	sp, sp, #36	; 0x24
   1578c:	pop	{r4, r5, r6, r7, lr}
   15790:	b	11500 <__fprintf_chk@plt>
   15794:	ldr	r1, [pc, #472]	; 15974 <close_stdout@@Base+0x31d8>
   15798:	mov	r2, #5
   1579c:	mov	r0, #0
   157a0:	add	r1, pc, r1
   157a4:	bl	11320 <dcgettext@plt>
   157a8:	ldm	r4, {r3, ip}
   157ac:	mov	r1, #1
   157b0:	str	ip, [sp]
   157b4:	ldr	ip, [r4, #8]
   157b8:	str	ip, [sp, #4]
   157bc:	ldr	ip, [r4, #12]
   157c0:	str	ip, [sp, #8]
   157c4:	mov	r2, r0
   157c8:	mov	r0, r5
   157cc:	bl	11500 <__fprintf_chk@plt>
   157d0:	b	156e8 <close_stdout@@Base+0x2f4c>
   157d4:	ldr	r1, [pc, #412]	; 15978 <close_stdout@@Base+0x31dc>
   157d8:	mov	r2, #5
   157dc:	mov	r0, #0
   157e0:	add	r1, pc, r1
   157e4:	bl	11320 <dcgettext@plt>
   157e8:	ldm	r4, {r3, ip}
   157ec:	mov	r1, #1
   157f0:	str	ip, [sp]
   157f4:	ldr	ip, [r4, #8]
   157f8:	str	ip, [sp, #4]
   157fc:	ldr	ip, [r4, #12]
   15800:	str	ip, [sp, #8]
   15804:	ldr	ip, [r4, #16]
   15808:	str	ip, [sp, #12]
   1580c:	mov	r2, r0
   15810:	mov	r0, r5
   15814:	bl	11500 <__fprintf_chk@plt>
   15818:	b	156e8 <close_stdout@@Base+0x2f4c>
   1581c:	ldr	r1, [pc, #344]	; 1597c <close_stdout@@Base+0x31e0>
   15820:	mov	r2, #5
   15824:	mov	r0, #0
   15828:	add	r1, pc, r1
   1582c:	bl	11320 <dcgettext@plt>
   15830:	ldm	r4, {r3, ip}
   15834:	mov	r1, #1
   15838:	str	ip, [sp]
   1583c:	ldr	ip, [r4, #8]
   15840:	str	ip, [sp, #4]
   15844:	ldr	ip, [r4, #12]
   15848:	str	ip, [sp, #8]
   1584c:	ldr	ip, [r4, #16]
   15850:	str	ip, [sp, #12]
   15854:	ldr	ip, [r4, #20]
   15858:	str	ip, [sp, #16]
   1585c:	mov	r2, r0
   15860:	mov	r0, r5
   15864:	bl	11500 <__fprintf_chk@plt>
   15868:	b	156e8 <close_stdout@@Base+0x2f4c>
   1586c:	ldr	r1, [pc, #268]	; 15980 <close_stdout@@Base+0x31e4>
   15870:	mov	r2, #5
   15874:	mov	r0, #0
   15878:	add	r1, pc, r1
   1587c:	bl	11320 <dcgettext@plt>
   15880:	ldm	r4, {r3, ip}
   15884:	mov	r1, #1
   15888:	str	ip, [sp]
   1588c:	ldr	ip, [r4, #8]
   15890:	str	ip, [sp, #4]
   15894:	ldr	ip, [r4, #12]
   15898:	str	ip, [sp, #8]
   1589c:	ldr	ip, [r4, #16]
   158a0:	str	ip, [sp, #12]
   158a4:	ldr	ip, [r4, #20]
   158a8:	str	ip, [sp, #16]
   158ac:	ldr	ip, [r4, #24]
   158b0:	str	ip, [sp, #20]
   158b4:	mov	r2, r0
   158b8:	mov	r0, r5
   158bc:	bl	11500 <__fprintf_chk@plt>
   158c0:	b	156e8 <close_stdout@@Base+0x2f4c>
   158c4:	ldr	r1, [pc, #184]	; 15984 <close_stdout@@Base+0x31e8>
   158c8:	mov	r2, #5
   158cc:	mov	r0, #0
   158d0:	add	r1, pc, r1
   158d4:	bl	11320 <dcgettext@plt>
   158d8:	ldm	r4, {r3, ip}
   158dc:	mov	r1, #1
   158e0:	str	ip, [sp]
   158e4:	ldr	ip, [r4, #8]
   158e8:	str	ip, [sp, #4]
   158ec:	ldr	ip, [r4, #12]
   158f0:	str	ip, [sp, #8]
   158f4:	ldr	ip, [r4, #16]
   158f8:	str	ip, [sp, #12]
   158fc:	ldr	ip, [r4, #20]
   15900:	str	ip, [sp, #16]
   15904:	ldr	ip, [r4, #24]
   15908:	str	ip, [sp, #20]
   1590c:	ldr	ip, [r4, #28]
   15910:	str	ip, [sp, #24]
   15914:	mov	r2, r0
   15918:	mov	r0, r5
   1591c:	bl	11500 <__fprintf_chk@plt>
   15920:	b	156e8 <close_stdout@@Base+0x2f4c>
   15924:	str	r3, [sp]
   15928:	mov	r3, r2
   1592c:	ldr	r2, [pc, #84]	; 15988 <close_stdout@@Base+0x31ec>
   15930:	mov	r1, #1
   15934:	add	r2, pc, r2
   15938:	bl	11500 <__fprintf_chk@plt>
   1593c:	b	15600 <close_stdout@@Base+0x2e64>
   15940:	ldr	r1, [pc, #68]	; 1598c <close_stdout@@Base+0x31f0>
   15944:	mov	r0, #0
   15948:	add	r1, pc, r1
   1594c:	b	15690 <close_stdout@@Base+0x2ef4>
   15950:	andeq	r4, r1, r4, lsr #20
   15954:	andeq	r3, r0, r0, ror #18
   15958:	andeq	r3, r0, r0, ror #18
   1595c:	andeq	r0, r0, ip, ror #2
   15960:	andeq	r3, r0, r0, lsr r9
   15964:			; <UNDEFINED> instruction: 0x00003abc
   15968:	andeq	r3, r0, ip, lsr r9
   1596c:	andeq	r3, r0, ip, lsl r9
   15970:	andeq	r3, r0, r0, lsl #18
   15974:	andeq	r3, r0, r0, ror #17
   15978:	andeq	r3, r0, r0, asr #17
   1597c:	muleq	r0, ip, r8
   15980:	andeq	r3, r0, r4, ror r8
   15984:	andeq	r3, r0, r8, asr #16
   15988:	andeq	r3, r0, r0, lsr r6
   1598c:	andeq	r3, r0, r4, lsr r8
   15990:	push	{r4, r5, lr}
   15994:	sub	sp, sp, #12
   15998:	ldr	r5, [sp, #24]
   1599c:	ldr	ip, [r5]
   159a0:	cmp	ip, #0
   159a4:	beq	159c0 <close_stdout@@Base+0x3224>
   159a8:	mov	lr, r5
   159ac:	mov	ip, #0
   159b0:	ldr	r4, [lr, #4]!
   159b4:	add	ip, ip, #1
   159b8:	cmp	r4, #0
   159bc:	bne	159b0 <close_stdout@@Base+0x3214>
   159c0:	stm	sp, {r5, ip}
   159c4:	bl	155bc <close_stdout@@Base+0x2e20>
   159c8:	add	sp, sp, #12
   159cc:	pop	{r4, r5, pc}
   159d0:	push	{r4, r5, r6, r7, lr}
   159d4:	sub	sp, sp, #60	; 0x3c
   159d8:	ldr	r4, [pc, #100]	; 15a44 <close_stdout@@Base+0x32a8>
   159dc:	mov	ip, #0
   159e0:	ldr	r5, [pc, #96]	; 15a48 <close_stdout@@Base+0x32ac>
   159e4:	mov	lr, ip
   159e8:	add	r4, pc, r4
   159ec:	ldr	r6, [sp, #80]	; 0x50
   159f0:	ldr	r7, [r4, r5]
   159f4:	add	r5, sp, #12
   159f8:	ldr	r4, [r7]
   159fc:	str	r4, [sp, #52]	; 0x34
   15a00:	ldr	r4, [r6, ip]
   15a04:	cmp	r4, #0
   15a08:	str	r4, [r5, ip]
   15a0c:	beq	15a20 <close_stdout@@Base+0x3284>
   15a10:	add	lr, lr, #1
   15a14:	add	ip, ip, #4
   15a18:	cmp	lr, #10
   15a1c:	bne	15a00 <close_stdout@@Base+0x3264>
   15a20:	stm	sp, {r5, lr}
   15a24:	bl	155bc <close_stdout@@Base+0x2e20>
   15a28:	ldr	r2, [sp, #52]	; 0x34
   15a2c:	ldr	r3, [r7]
   15a30:	cmp	r2, r3
   15a34:	bne	15a40 <close_stdout@@Base+0x32a4>
   15a38:	add	sp, sp, #60	; 0x3c
   15a3c:	pop	{r4, r5, r6, r7, pc}
   15a40:	bl	1132c <__stack_chk_fail@plt>
   15a44:	andeq	r4, r1, r0, lsl r6
   15a48:	andeq	r0, r0, ip, lsr r1
   15a4c:	push	{r3}		; (str r3, [sp, #-4]!)
   15a50:	push	{r4, lr}
   15a54:	sub	sp, sp, #20
   15a58:	ldr	lr, [pc, #72]	; 15aa8 <close_stdout@@Base+0x330c>
   15a5c:	add	ip, sp, #32
   15a60:	ldr	r4, [pc, #68]	; 15aac <close_stdout@@Base+0x3310>
   15a64:	add	lr, pc, lr
   15a68:	ldr	r3, [sp, #28]
   15a6c:	ldr	r4, [lr, r4]
   15a70:	str	ip, [sp]
   15a74:	str	ip, [sp, #8]
   15a78:	ldr	ip, [r4]
   15a7c:	str	ip, [sp, #12]
   15a80:	bl	159d0 <close_stdout@@Base+0x3234>
   15a84:	ldr	r2, [sp, #12]
   15a88:	ldr	r3, [r4]
   15a8c:	cmp	r2, r3
   15a90:	bne	15aa4 <close_stdout@@Base+0x3308>
   15a94:	add	sp, sp, #20
   15a98:	pop	{r4, lr}
   15a9c:	add	sp, sp, #4
   15aa0:	bx	lr
   15aa4:	bl	1132c <__stack_chk_fail@plt>
   15aa8:	muleq	r1, r4, r5
   15aac:	andeq	r0, r0, ip, lsr r1
   15ab0:	ldr	r1, [pc, #132]	; 15b3c <close_stdout@@Base+0x33a0>
   15ab4:	mov	r2, #5
   15ab8:	push	{r4, lr}
   15abc:	add	r1, pc, r1
   15ac0:	mov	r0, #0
   15ac4:	ldr	r4, [pc, #116]	; 15b40 <close_stdout@@Base+0x33a4>
   15ac8:	bl	11320 <dcgettext@plt>
   15acc:	ldr	r2, [pc, #112]	; 15b44 <close_stdout@@Base+0x33a8>
   15ad0:	add	r4, pc, r4
   15ad4:	add	r2, pc, r2
   15ad8:	mov	r1, r0
   15adc:	mov	r0, #1
   15ae0:	bl	114e8 <__printf_chk@plt>
   15ae4:	ldr	r1, [pc, #92]	; 15b48 <close_stdout@@Base+0x33ac>
   15ae8:	mov	r2, #5
   15aec:	mov	r0, #0
   15af0:	add	r1, pc, r1
   15af4:	bl	11320 <dcgettext@plt>
   15af8:	ldr	r2, [pc, #76]	; 15b4c <close_stdout@@Base+0x33b0>
   15afc:	ldr	r3, [pc, #76]	; 15b50 <close_stdout@@Base+0x33b4>
   15b00:	add	r2, pc, r2
   15b04:	add	r3, pc, r3
   15b08:	mov	r1, r0
   15b0c:	mov	r0, #1
   15b10:	bl	114e8 <__printf_chk@plt>
   15b14:	ldr	r1, [pc, #56]	; 15b54 <close_stdout@@Base+0x33b8>
   15b18:	mov	r0, #0
   15b1c:	mov	r2, #5
   15b20:	add	r1, pc, r1
   15b24:	bl	11320 <dcgettext@plt>
   15b28:	ldr	r3, [pc, #40]	; 15b58 <close_stdout@@Base+0x33bc>
   15b2c:	ldr	r3, [r4, r3]
   15b30:	pop	{r4, lr}
   15b34:	ldr	r1, [r3]
   15b38:	b	1126c <fputs_unlocked@plt>
   15b3c:	strdeq	r3, [r0], -ip
   15b40:	andeq	r4, r1, r8, lsr #10
   15b44:	strdeq	r3, [r0], -ip
   15b48:	strdeq	r3, [r0], -r8
   15b4c:	andeq	r3, r0, ip, ror #1
   15b50:	strdeq	r3, [r0], -r8
   15b54:	ldrdeq	r3, [r0], -ip
   15b58:	andeq	r0, r0, ip, asr r1
   15b5c:	push	{r4, lr}
   15b60:	mov	r4, r0
   15b64:	bl	113f8 <malloc@plt>
   15b68:	rsbs	r3, r0, #1
   15b6c:	movcc	r3, #0
   15b70:	cmp	r4, #0
   15b74:	moveq	r3, #0
   15b78:	cmp	r3, #0
   15b7c:	popeq	{r4, pc}
   15b80:	bl	15d70 <close_stdout@@Base+0x35d4>
   15b84:	push	{r3, r4, r5, lr}
   15b88:	mov	r4, r0
   15b8c:	mvn	r0, #0
   15b90:	mov	r5, r1
   15b94:	bl	17c38 <close_stdout@@Base+0x549c>
   15b98:	cmp	r0, r4
   15b9c:	bcc	15bac <close_stdout@@Base+0x3410>
   15ba0:	mul	r0, r4, r5
   15ba4:	pop	{r3, r4, r5, lr}
   15ba8:	b	15b5c <close_stdout@@Base+0x33c0>
   15bac:	bl	15d70 <close_stdout@@Base+0x35d4>
   15bb0:	b	15b5c <close_stdout@@Base+0x33c0>
   15bb4:	rsbs	r3, r1, #1
   15bb8:	push	{r4, lr}
   15bbc:	movcc	r3, #0
   15bc0:	cmp	r0, #0
   15bc4:	mov	r4, r1
   15bc8:	moveq	r3, #0
   15bcc:	cmp	r3, #0
   15bd0:	bne	15bf4 <close_stdout@@Base+0x3458>
   15bd4:	bl	11344 <realloc@plt>
   15bd8:	rsbs	r3, r0, #1
   15bdc:	movcc	r3, #0
   15be0:	cmp	r4, #0
   15be4:	moveq	r3, #0
   15be8:	cmp	r3, #0
   15bec:	popeq	{r4, pc}
   15bf0:	bl	15d70 <close_stdout@@Base+0x35d4>
   15bf4:	bl	112c0 <free@plt>
   15bf8:	mov	r0, #0
   15bfc:	pop	{r4, pc}
   15c00:	push	{r4, r5, r6, lr}
   15c04:	mov	r5, r1
   15c08:	mov	r6, r0
   15c0c:	mov	r1, r2
   15c10:	mvn	r0, #0
   15c14:	mov	r4, r2
   15c18:	bl	17c38 <close_stdout@@Base+0x549c>
   15c1c:	cmp	r0, r5
   15c20:	bcc	15c34 <close_stdout@@Base+0x3498>
   15c24:	mov	r0, r6
   15c28:	mul	r1, r5, r4
   15c2c:	pop	{r4, r5, r6, lr}
   15c30:	b	15bb4 <close_stdout@@Base+0x3418>
   15c34:	bl	15d70 <close_stdout@@Base+0x35d4>
   15c38:	push	{r3, r4, r5, r6, r7, lr}
   15c3c:	subs	r7, r0, #0
   15c40:	mov	r5, r1
   15c44:	mov	r6, r2
   15c48:	ldr	r4, [r1]
   15c4c:	beq	15c84 <close_stdout@@Base+0x34e8>
   15c50:	movw	r0, #43690	; 0xaaaa
   15c54:	mov	r1, r2
   15c58:	bfi	r0, r0, #16, #16
   15c5c:	bl	17c38 <close_stdout@@Base+0x549c>
   15c60:	cmp	r4, r0
   15c64:	addcc	r3, r4, #1
   15c68:	addcc	r4, r4, r3, lsr #1
   15c6c:	bcs	15ca8 <close_stdout@@Base+0x350c>
   15c70:	str	r4, [r5]
   15c74:	mov	r0, r7
   15c78:	mul	r1, r6, r4
   15c7c:	pop	{r3, r4, r5, r6, r7, lr}
   15c80:	b	15bb4 <close_stdout@@Base+0x3418>
   15c84:	cmp	r4, #0
   15c88:	bne	15c70 <close_stdout@@Base+0x34d4>
   15c8c:	mov	r0, #64	; 0x40
   15c90:	mov	r1, r2
   15c94:	bl	17c38 <close_stdout@@Base+0x549c>
   15c98:	cmp	r0, #0
   15c9c:	movne	r4, r0
   15ca0:	addeq	r4, r0, #1
   15ca4:	b	15c70 <close_stdout@@Base+0x34d4>
   15ca8:	bl	15d70 <close_stdout@@Base+0x35d4>
   15cac:	cmp	r0, #0
   15cb0:	push	{r3, lr}
   15cb4:	ldr	r3, [r1]
   15cb8:	beq	15ce4 <close_stdout@@Base+0x3548>
   15cbc:	movw	r2, #43689	; 0xaaa9
   15cc0:	movt	r2, #43690	; 0xaaaa
   15cc4:	cmp	r3, r2
   15cc8:	addls	r2, r3, #1
   15ccc:	addls	r3, r3, r2, lsr #1
   15cd0:	bhi	15cfc <close_stdout@@Base+0x3560>
   15cd4:	str	r3, [r1]
   15cd8:	mov	r1, r3
   15cdc:	pop	{r3, lr}
   15ce0:	b	15bb4 <close_stdout@@Base+0x3418>
   15ce4:	cmp	r3, #0
   15ce8:	moveq	r3, #64	; 0x40
   15cec:	str	r3, [r1]
   15cf0:	mov	r1, r3
   15cf4:	pop	{r3, lr}
   15cf8:	b	15bb4 <close_stdout@@Base+0x3418>
   15cfc:	bl	15d70 <close_stdout@@Base+0x35d4>
   15d00:	push	{r4, lr}
   15d04:	mov	r4, r0
   15d08:	bl	15b5c <close_stdout@@Base+0x33c0>
   15d0c:	mov	r2, r4
   15d10:	mov	r1, #0
   15d14:	pop	{r4, lr}
   15d18:	b	114d0 <memset@plt>
   15d1c:	push	{r3, lr}
   15d20:	bl	11260 <calloc@plt>
   15d24:	cmp	r0, #0
   15d28:	popne	{r3, pc}
   15d2c:	bl	15d70 <close_stdout@@Base+0x35d4>
   15d30:	push	{r3, r4, r5, lr}
   15d34:	mov	r4, r1
   15d38:	mov	r5, r0
   15d3c:	mov	r0, r1
   15d40:	bl	15b5c <close_stdout@@Base+0x33c0>
   15d44:	mov	r1, r5
   15d48:	mov	r2, r4
   15d4c:	pop	{r3, r4, r5, lr}
   15d50:	b	112e4 <memcpy@plt>
   15d54:	push	{r4, lr}
   15d58:	mov	r4, r0
   15d5c:	bl	11470 <strlen@plt>
   15d60:	add	r1, r0, #1
   15d64:	mov	r0, r4
   15d68:	pop	{r4, lr}
   15d6c:	b	15d30 <close_stdout@@Base+0x3594>
   15d70:	ldr	r3, [pc, #64]	; 15db8 <close_stdout@@Base+0x361c>
   15d74:	mov	r2, #5
   15d78:	ldr	ip, [pc, #60]	; 15dbc <close_stdout@@Base+0x3620>
   15d7c:	mov	r0, #0
   15d80:	add	r3, pc, r3
   15d84:	ldr	r1, [pc, #52]	; 15dc0 <close_stdout@@Base+0x3624>
   15d88:	push	{r4, lr}
   15d8c:	add	r1, pc, r1
   15d90:	ldr	r3, [r3, ip]
   15d94:	ldr	r4, [r3]
   15d98:	bl	11320 <dcgettext@plt>
   15d9c:	ldr	r2, [pc, #32]	; 15dc4 <close_stdout@@Base+0x3628>
   15da0:	mov	r1, #0
   15da4:	add	r2, pc, r2
   15da8:	mov	r3, r0
   15dac:	mov	r0, r4
   15db0:	bl	113d4 <error@plt>
   15db4:	bl	1159c <abort@plt>
   15db8:	andeq	r4, r1, r8, ror r2
   15dbc:	andeq	r0, r0, r0, ror #2
   15dc0:	andeq	r3, r0, r0, ror #9
   15dc4:	strheq	r3, [r0], -r0
   15dc8:	ldr	ip, [pc, #1308]	; 162ec <close_stdout@@Base+0x3b50>
   15dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dd0:	mov	sl, r2
   15dd4:	ldr	r2, [pc, #1300]	; 162f0 <close_stdout@@Base+0x3b54>
   15dd8:	add	ip, pc, ip
   15ddc:	mov	r9, r3
   15de0:	sub	sp, sp, #20
   15de4:	mov	r3, ip
   15de8:	cmp	sl, #36	; 0x24
   15dec:	ldr	r6, [ip, r2]
   15df0:	mov	r5, r0
   15df4:	mov	r7, r1
   15df8:	ldr	r8, [sp, #56]	; 0x38
   15dfc:	ldr	r3, [r6]
   15e00:	str	r3, [sp, #12]
   15e04:	bhi	162cc <close_stdout@@Base+0x3b30>
   15e08:	cmp	r1, #0
   15e0c:	addeq	r7, sp, #8
   15e10:	bl	11440 <__ctype_b_loc@plt>
   15e14:	ldrb	ip, [r5]
   15e18:	mov	r2, r5
   15e1c:	ldr	r1, [r0]
   15e20:	b	15e28 <close_stdout@@Base+0x368c>
   15e24:	ldrb	ip, [r2, #1]!
   15e28:	lsl	r3, ip, #1
   15e2c:	ldrh	r4, [r1, r3]
   15e30:	and	r4, r4, #8192	; 0x2000
   15e34:	uxth	r4, r4
   15e38:	cmp	r4, #0
   15e3c:	bne	15e24 <close_stdout@@Base+0x3688>
   15e40:	cmp	ip, #45	; 0x2d
   15e44:	bne	15e64 <close_stdout@@Base+0x36c8>
   15e48:	mov	r0, #4
   15e4c:	ldr	r2, [sp, #12]
   15e50:	ldr	r3, [r6]
   15e54:	cmp	r2, r3
   15e58:	bne	162c8 <close_stdout@@Base+0x3b2c>
   15e5c:	add	sp, sp, #20
   15e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e64:	bl	114a0 <__errno_location@plt>
   15e68:	mov	r2, sl
   15e6c:	mov	r1, r7
   15e70:	str	r4, [r0]
   15e74:	mov	fp, r0
   15e78:	mov	r0, r5
   15e7c:	bl	11464 <strtoul@plt>
   15e80:	ldr	r3, [r7]
   15e84:	cmp	r3, r5
   15e88:	mov	sl, r0
   15e8c:	beq	1601c <close_stdout@@Base+0x3880>
   15e90:	ldr	r0, [fp]
   15e94:	cmp	r0, #0
   15e98:	bne	15ec8 <close_stdout@@Base+0x372c>
   15e9c:	mov	r4, r0
   15ea0:	cmp	r8, #0
   15ea4:	streq	sl, [r9]
   15ea8:	moveq	r0, r4
   15eac:	beq	15e4c <close_stdout@@Base+0x36b0>
   15eb0:	ldrb	r5, [r3]
   15eb4:	cmp	r5, #0
   15eb8:	bne	15ed8 <close_stdout@@Base+0x373c>
   15ebc:	mov	r0, r4
   15ec0:	str	sl, [r9]
   15ec4:	b	15e4c <close_stdout@@Base+0x36b0>
   15ec8:	cmp	r0, #34	; 0x22
   15ecc:	moveq	r4, #1
   15ed0:	bne	15e48 <close_stdout@@Base+0x36ac>
   15ed4:	b	15ea0 <close_stdout@@Base+0x3704>
   15ed8:	mov	r0, r8
   15edc:	mov	r1, r5
   15ee0:	str	r3, [sp, #4]
   15ee4:	bl	1147c <strchr@plt>
   15ee8:	ldr	r3, [sp, #4]
   15eec:	cmp	r0, #0
   15ef0:	beq	16054 <close_stdout@@Base+0x38b8>
   15ef4:	mov	r0, r8
   15ef8:	mov	r1, #48	; 0x30
   15efc:	str	r3, [sp, #4]
   15f00:	bl	1147c <strchr@plt>
   15f04:	ldr	r3, [sp, #4]
   15f08:	cmp	r0, #0
   15f0c:	beq	15f2c <close_stdout@@Base+0x3790>
   15f10:	ldrb	r2, [r3, #1]
   15f14:	cmp	r2, #68	; 0x44
   15f18:	beq	162b0 <close_stdout@@Base+0x3b14>
   15f1c:	cmp	r2, #105	; 0x69
   15f20:	beq	16298 <close_stdout@@Base+0x3afc>
   15f24:	cmp	r2, #66	; 0x42
   15f28:	beq	162b0 <close_stdout@@Base+0x3b14>
   15f2c:	mov	r8, #1
   15f30:	mov	fp, #1024	; 0x400
   15f34:	sub	r5, r5, #66	; 0x42
   15f38:	cmp	r5, #53	; 0x35
   15f3c:	addls	pc, pc, r5, lsl #2
   15f40:	b	16054 <close_stdout@@Base+0x38b8>
   15f44:	b	16244 <close_stdout@@Base+0x3aa8>
   15f48:	b	16054 <close_stdout@@Base+0x38b8>
   15f4c:	b	16054 <close_stdout@@Base+0x38b8>
   15f50:	b	16204 <close_stdout@@Base+0x3a68>
   15f54:	b	16054 <close_stdout@@Base+0x38b8>
   15f58:	b	16258 <close_stdout@@Base+0x3abc>
   15f5c:	b	16054 <close_stdout@@Base+0x38b8>
   15f60:	b	16054 <close_stdout@@Base+0x38b8>
   15f64:	b	16054 <close_stdout@@Base+0x38b8>
   15f68:	b	161e4 <close_stdout@@Base+0x3a48>
   15f6c:	b	16054 <close_stdout@@Base+0x38b8>
   15f70:	b	161b0 <close_stdout@@Base+0x3a14>
   15f74:	b	16054 <close_stdout@@Base+0x38b8>
   15f78:	b	16054 <close_stdout@@Base+0x38b8>
   15f7c:	b	16170 <close_stdout@@Base+0x39d4>
   15f80:	b	16054 <close_stdout@@Base+0x38b8>
   15f84:	b	16054 <close_stdout@@Base+0x38b8>
   15f88:	b	16054 <close_stdout@@Base+0x38b8>
   15f8c:	b	16130 <close_stdout@@Base+0x3994>
   15f90:	b	16054 <close_stdout@@Base+0x38b8>
   15f94:	b	16054 <close_stdout@@Base+0x38b8>
   15f98:	b	16054 <close_stdout@@Base+0x38b8>
   15f9c:	b	16054 <close_stdout@@Base+0x38b8>
   15fa0:	b	160f0 <close_stdout@@Base+0x3954>
   15fa4:	b	160b0 <close_stdout@@Base+0x3914>
   15fa8:	b	16054 <close_stdout@@Base+0x38b8>
   15fac:	b	16054 <close_stdout@@Base+0x38b8>
   15fb0:	b	16054 <close_stdout@@Base+0x38b8>
   15fb4:	b	16054 <close_stdout@@Base+0x38b8>
   15fb8:	b	16054 <close_stdout@@Base+0x38b8>
   15fbc:	b	16054 <close_stdout@@Base+0x38b8>
   15fc0:	b	16054 <close_stdout@@Base+0x38b8>
   15fc4:	b	1609c <close_stdout@@Base+0x3900>
   15fc8:	b	16060 <close_stdout@@Base+0x38c4>
   15fcc:	b	16054 <close_stdout@@Base+0x38b8>
   15fd0:	b	16054 <close_stdout@@Base+0x38b8>
   15fd4:	b	16054 <close_stdout@@Base+0x38b8>
   15fd8:	b	16258 <close_stdout@@Base+0x3abc>
   15fdc:	b	16054 <close_stdout@@Base+0x38b8>
   15fe0:	b	16054 <close_stdout@@Base+0x38b8>
   15fe4:	b	16054 <close_stdout@@Base+0x38b8>
   15fe8:	b	161e4 <close_stdout@@Base+0x3a48>
   15fec:	b	16054 <close_stdout@@Base+0x38b8>
   15ff0:	b	161b0 <close_stdout@@Base+0x3a14>
   15ff4:	b	16054 <close_stdout@@Base+0x38b8>
   15ff8:	b	16054 <close_stdout@@Base+0x38b8>
   15ffc:	b	16054 <close_stdout@@Base+0x38b8>
   16000:	b	16054 <close_stdout@@Base+0x38b8>
   16004:	b	16054 <close_stdout@@Base+0x38b8>
   16008:	b	16054 <close_stdout@@Base+0x38b8>
   1600c:	b	16130 <close_stdout@@Base+0x3994>
   16010:	b	16054 <close_stdout@@Base+0x38b8>
   16014:	b	16054 <close_stdout@@Base+0x38b8>
   16018:	b	16080 <close_stdout@@Base+0x38e4>
   1601c:	cmp	r8, #0
   16020:	beq	15e48 <close_stdout@@Base+0x36ac>
   16024:	ldrb	r5, [r5]
   16028:	cmp	r5, #0
   1602c:	beq	15e48 <close_stdout@@Base+0x36ac>
   16030:	mov	r0, r8
   16034:	mov	r1, r5
   16038:	str	r3, [sp, #4]
   1603c:	bl	1147c <strchr@plt>
   16040:	ldr	r3, [sp, #4]
   16044:	cmp	r0, #0
   16048:	movne	sl, #1
   1604c:	bne	15ef4 <close_stdout@@Base+0x3758>
   16050:	b	15e48 <close_stdout@@Base+0x36ac>
   16054:	str	sl, [r9]
   16058:	orr	r0, r4, #2
   1605c:	b	15e4c <close_stdout@@Base+0x36b0>
   16060:	mov	r2, #0
   16064:	add	r1, r3, r8
   16068:	str	r1, [r7]
   1606c:	ldrb	r3, [r3, r8]
   16070:	orr	r4, r4, r2
   16074:	cmp	r3, #0
   16078:	orrne	r4, r4, #2
   1607c:	b	15ebc <close_stdout@@Base+0x3720>
   16080:	cmn	sl, #-2147483647	; 0x80000001
   16084:	lslls	sl, sl, #1
   16088:	movls	r2, #0
   1608c:	bls	16064 <close_stdout@@Base+0x38c8>
   16090:	mvn	sl, #0
   16094:	mov	r2, #1
   16098:	b	16064 <close_stdout@@Base+0x38c8>
   1609c:	cmp	sl, #8388608	; 0x800000
   160a0:	lslcc	sl, sl, #9
   160a4:	movcc	r2, #0
   160a8:	bcc	16064 <close_stdout@@Base+0x38c8>
   160ac:	b	16090 <close_stdout@@Base+0x38f4>
   160b0:	mov	r1, fp
   160b4:	mvn	r0, #0
   160b8:	str	r3, [sp, #4]
   160bc:	bl	17c38 <close_stdout@@Base+0x549c>
   160c0:	ldr	r3, [sp, #4]
   160c4:	mov	r1, #7
   160c8:	mov	r2, #0
   160cc:	cmp	r0, sl
   160d0:	movcs	ip, #0
   160d4:	movcc	ip, #1
   160d8:	mulcs	sl, fp, sl
   160dc:	mvncc	sl, #0
   160e0:	subs	r1, r1, #1
   160e4:	orr	r2, r2, ip
   160e8:	bne	160cc <close_stdout@@Base+0x3930>
   160ec:	b	16064 <close_stdout@@Base+0x38c8>
   160f0:	mov	r1, fp
   160f4:	mvn	r0, #0
   160f8:	str	r3, [sp, #4]
   160fc:	bl	17c38 <close_stdout@@Base+0x549c>
   16100:	ldr	r3, [sp, #4]
   16104:	mov	r1, #8
   16108:	mov	r2, #0
   1610c:	cmp	r0, sl
   16110:	movcs	ip, #0
   16114:	movcc	ip, #1
   16118:	mulcs	sl, fp, sl
   1611c:	mvncc	sl, #0
   16120:	subs	r1, r1, #1
   16124:	orr	r2, r2, ip
   16128:	bne	1610c <close_stdout@@Base+0x3970>
   1612c:	b	16064 <close_stdout@@Base+0x38c8>
   16130:	mov	r1, fp
   16134:	mvn	r0, #0
   16138:	str	r3, [sp, #4]
   1613c:	bl	17c38 <close_stdout@@Base+0x549c>
   16140:	ldr	r3, [sp, #4]
   16144:	mov	r1, #4
   16148:	mov	r2, #0
   1614c:	cmp	r0, sl
   16150:	movcs	ip, #0
   16154:	movcc	ip, #1
   16158:	mulcs	sl, fp, sl
   1615c:	mvncc	sl, #0
   16160:	subs	r1, r1, #1
   16164:	orr	r2, r2, ip
   16168:	bne	1614c <close_stdout@@Base+0x39b0>
   1616c:	b	16064 <close_stdout@@Base+0x38c8>
   16170:	mov	r1, fp
   16174:	mvn	r0, #0
   16178:	str	r3, [sp, #4]
   1617c:	bl	17c38 <close_stdout@@Base+0x549c>
   16180:	ldr	r3, [sp, #4]
   16184:	mov	r1, #5
   16188:	mov	r2, #0
   1618c:	cmp	r0, sl
   16190:	movcs	ip, #0
   16194:	movcc	ip, #1
   16198:	mulcs	sl, fp, sl
   1619c:	mvncc	sl, #0
   161a0:	subs	r1, r1, #1
   161a4:	orr	r2, r2, ip
   161a8:	bne	1618c <close_stdout@@Base+0x39f0>
   161ac:	b	16064 <close_stdout@@Base+0x38c8>
   161b0:	mvn	r0, #0
   161b4:	mov	r1, fp
   161b8:	str	r3, [sp, #4]
   161bc:	bl	17c38 <close_stdout@@Base+0x549c>
   161c0:	ldr	r3, [sp, #4]
   161c4:	cmp	sl, r0
   161c8:	bhi	162bc <close_stdout@@Base+0x3b20>
   161cc:	mul	sl, sl, fp
   161d0:	cmp	r0, sl
   161d4:	bcc	162bc <close_stdout@@Base+0x3b20>
   161d8:	mul	sl, fp, sl
   161dc:	mov	r2, #0
   161e0:	b	16064 <close_stdout@@Base+0x38c8>
   161e4:	mvn	r0, #0
   161e8:	mov	r1, fp
   161ec:	str	r3, [sp, #4]
   161f0:	bl	17c38 <close_stdout@@Base+0x549c>
   161f4:	ldr	r3, [sp, #4]
   161f8:	cmp	sl, r0
   161fc:	bhi	16090 <close_stdout@@Base+0x38f4>
   16200:	b	161d8 <close_stdout@@Base+0x3a3c>
   16204:	mov	r1, fp
   16208:	mvn	r0, #0
   1620c:	str	r3, [sp, #4]
   16210:	bl	17c38 <close_stdout@@Base+0x549c>
   16214:	ldr	r3, [sp, #4]
   16218:	mov	r1, #6
   1621c:	mov	r2, #0
   16220:	cmp	r0, sl
   16224:	movcs	ip, #0
   16228:	movcc	ip, #1
   1622c:	mulcs	sl, fp, sl
   16230:	mvncc	sl, #0
   16234:	subs	r1, r1, #1
   16238:	orr	r2, r2, ip
   1623c:	bne	16220 <close_stdout@@Base+0x3a84>
   16240:	b	16064 <close_stdout@@Base+0x38c8>
   16244:	cmp	sl, #4194304	; 0x400000
   16248:	lslcc	sl, sl, #10
   1624c:	movcc	r2, #0
   16250:	bcc	16064 <close_stdout@@Base+0x38c8>
   16254:	b	16090 <close_stdout@@Base+0x38f4>
   16258:	mov	r1, fp
   1625c:	mvn	r0, #0
   16260:	str	r3, [sp, #4]
   16264:	bl	17c38 <close_stdout@@Base+0x549c>
   16268:	ldr	r3, [sp, #4]
   1626c:	mov	r1, #3
   16270:	mov	r2, #0
   16274:	cmp	r0, sl
   16278:	movcs	ip, #0
   1627c:	movcc	ip, #1
   16280:	mulcs	sl, fp, sl
   16284:	mvncc	sl, #0
   16288:	subs	r1, r1, #1
   1628c:	orr	r2, r2, ip
   16290:	bne	16274 <close_stdout@@Base+0x3ad8>
   16294:	b	16064 <close_stdout@@Base+0x38c8>
   16298:	ldrb	r8, [r3, #2]
   1629c:	mov	fp, #1024	; 0x400
   162a0:	cmp	r8, #66	; 0x42
   162a4:	moveq	r8, #3
   162a8:	movne	r8, #1
   162ac:	b	15f34 <close_stdout@@Base+0x3798>
   162b0:	mov	r8, #2
   162b4:	mov	fp, #1000	; 0x3e8
   162b8:	b	15f34 <close_stdout@@Base+0x3798>
   162bc:	mov	r2, #1
   162c0:	mvn	sl, #0
   162c4:	b	16064 <close_stdout@@Base+0x38c8>
   162c8:	bl	1132c <__stack_chk_fail@plt>
   162cc:	ldr	r0, [pc, #32]	; 162f4 <close_stdout@@Base+0x3b58>
   162d0:	mov	r2, #96	; 0x60
   162d4:	ldr	r1, [pc, #28]	; 162f8 <close_stdout@@Base+0x3b5c>
   162d8:	ldr	r3, [pc, #28]	; 162fc <close_stdout@@Base+0x3b60>
   162dc:	add	r0, pc, r0
   162e0:	add	r1, pc, r1
   162e4:	add	r3, pc, r3
   162e8:	bl	115b4 <__assert_fail@plt>
   162ec:	andeq	r4, r1, r0, lsr #4
   162f0:	andeq	r0, r0, ip, lsr r1
   162f4:			; <UNDEFINED> instruction: 0x00002fb0
   162f8:	ldrdeq	r2, [r0], -r4
   162fc:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   16300:	push	{r4, r5, r6, lr}
   16304:	sub	sp, sp, #8
   16308:	mov	r4, r0
   1630c:	bl	114f4 <fileno@plt>
   16310:	cmp	r0, #0
   16314:	mov	r0, r4
   16318:	blt	16394 <close_stdout@@Base+0x3bf8>
   1631c:	bl	11410 <__freading@plt>
   16320:	cmp	r0, #0
   16324:	bne	16360 <close_stdout@@Base+0x3bc4>
   16328:	mov	r0, r4
   1632c:	bl	163a0 <close_stdout@@Base+0x3c04>
   16330:	cmp	r0, #0
   16334:	beq	16390 <close_stdout@@Base+0x3bf4>
   16338:	bl	114a0 <__errno_location@plt>
   1633c:	ldr	r6, [r0]
   16340:	mov	r5, r0
   16344:	mov	r0, r4
   16348:	bl	11518 <fclose@plt>
   1634c:	cmp	r6, #0
   16350:	mvnne	r0, #0
   16354:	strne	r6, [r5]
   16358:	add	sp, sp, #8
   1635c:	pop	{r4, r5, r6, pc}
   16360:	mov	r0, r4
   16364:	bl	114f4 <fileno@plt>
   16368:	mov	r1, #1
   1636c:	mov	r2, #0
   16370:	mov	r3, #0
   16374:	str	r1, [sp]
   16378:	bl	11380 <lseek64@plt>
   1637c:	mvn	r2, #0
   16380:	mvn	r3, #0
   16384:	cmp	r1, r3
   16388:	cmpeq	r0, r2
   1638c:	bne	16328 <close_stdout@@Base+0x3b8c>
   16390:	mov	r0, r4
   16394:	add	sp, sp, #8
   16398:	pop	{r4, r5, r6, lr}
   1639c:	b	11518 <fclose@plt>
   163a0:	push	{r4, lr}
   163a4:	subs	r4, r0, #0
   163a8:	sub	sp, sp, #8
   163ac:	beq	163bc <close_stdout@@Base+0x3c20>
   163b0:	bl	11410 <__freading@plt>
   163b4:	cmp	r0, #0
   163b8:	bne	163cc <close_stdout@@Base+0x3c30>
   163bc:	mov	r0, r4
   163c0:	add	sp, sp, #8
   163c4:	pop	{r4, lr}
   163c8:	b	112a8 <fflush@plt>
   163cc:	ldr	r3, [r4]
   163d0:	tst	r3, #256	; 0x100
   163d4:	beq	163bc <close_stdout@@Base+0x3c20>
   163d8:	mov	r3, #1
   163dc:	mov	r0, r4
   163e0:	str	r3, [sp]
   163e4:	mov	r2, #0
   163e8:	mov	r3, #0
   163ec:	bl	16400 <close_stdout@@Base+0x3c64>
   163f0:	mov	r0, r4
   163f4:	add	sp, sp, #8
   163f8:	pop	{r4, lr}
   163fc:	b	112a8 <fflush@plt>
   16400:	push	{r4, r5, r6, r7, lr}
   16404:	sub	sp, sp, #20
   16408:	ldmib	r0, {r1, ip}
   1640c:	mov	r6, r0
   16410:	ldr	r4, [sp, #40]	; 0x28
   16414:	cmp	ip, r1
   16418:	beq	16430 <close_stdout@@Base+0x3c94>
   1641c:	str	r4, [sp, #40]	; 0x28
   16420:	mov	r0, r6
   16424:	add	sp, sp, #20
   16428:	pop	{r4, r5, r6, r7, lr}
   1642c:	b	11524 <fseeko64@plt>
   16430:	ldr	ip, [r0, #20]
   16434:	ldr	r1, [r0, #16]
   16438:	cmp	ip, r1
   1643c:	bne	1641c <close_stdout@@Base+0x3c80>
   16440:	ldr	r7, [r0, #36]	; 0x24
   16444:	cmp	r7, #0
   16448:	bne	1641c <close_stdout@@Base+0x3c80>
   1644c:	str	r2, [sp, #12]
   16450:	mvn	r5, #0
   16454:	str	r3, [sp, #8]
   16458:	bl	114f4 <fileno@plt>
   1645c:	str	r4, [sp]
   16460:	mvn	r4, #0
   16464:	ldr	r2, [sp, #12]
   16468:	ldr	r3, [sp, #8]
   1646c:	bl	11380 <lseek64@plt>
   16470:	mov	r2, r0
   16474:	mov	r3, r1
   16478:	cmp	r3, r5
   1647c:	cmpeq	r2, r4
   16480:	beq	164a0 <close_stdout@@Base+0x3d04>
   16484:	ldr	r1, [r6]
   16488:	mov	r0, r7
   1648c:	strd	r2, [r6, #80]	; 0x50
   16490:	bic	r3, r1, #16
   16494:	str	r3, [r6]
   16498:	add	sp, sp, #20
   1649c:	pop	{r4, r5, r6, r7, pc}
   164a0:	mvn	r0, #0
   164a4:	b	16498 <close_stdout@@Base+0x3cfc>
   164a8:	push	{r4, r5, r6, lr}
   164ac:	mov	r4, r0
   164b0:	bl	113bc <__fpending@plt>
   164b4:	mov	r6, r0
   164b8:	mov	r0, r4
   164bc:	ldr	r4, [r4]
   164c0:	bl	16300 <close_stdout@@Base+0x3b64>
   164c4:	and	r4, r4, #32
   164c8:	adds	r5, r0, #0
   164cc:	movne	r5, #1
   164d0:	cmp	r4, #0
   164d4:	bne	164f4 <close_stdout@@Base+0x3d58>
   164d8:	cmp	r5, #0
   164dc:	beq	164ec <close_stdout@@Base+0x3d50>
   164e0:	cmp	r6, #0
   164e4:	beq	16510 <close_stdout@@Base+0x3d74>
   164e8:	mvn	r4, #0
   164ec:	mov	r0, r4
   164f0:	pop	{r4, r5, r6, pc}
   164f4:	cmp	r5, #0
   164f8:	bne	164e8 <close_stdout@@Base+0x3d4c>
   164fc:	bl	114a0 <__errno_location@plt>
   16500:	mvn	r4, #0
   16504:	str	r5, [r0]
   16508:	mov	r0, r4
   1650c:	pop	{r4, r5, r6, pc}
   16510:	bl	114a0 <__errno_location@plt>
   16514:	ldr	r4, [r0]
   16518:	subs	r4, r4, #9
   1651c:	mvnne	r4, #0
   16520:	mov	r0, r4
   16524:	pop	{r4, r5, r6, pc}
   16528:	push	{r4, r5, r6, lr}
   1652c:	mov	r5, r1
   16530:	bl	1156c <fopen64@plt>
   16534:	subs	r4, r0, #0
   16538:	beq	16548 <close_stdout@@Base+0x3dac>
   1653c:	bl	114f4 <fileno@plt>
   16540:	cmp	r0, #2
   16544:	bls	16550 <close_stdout@@Base+0x3db4>
   16548:	mov	r0, r4
   1654c:	pop	{r4, r5, r6, pc}
   16550:	bl	17ab8 <close_stdout@@Base+0x531c>
   16554:	subs	r6, r0, #0
   16558:	blt	16584 <close_stdout@@Base+0x3de8>
   1655c:	mov	r0, r4
   16560:	bl	16300 <close_stdout@@Base+0x3b64>
   16564:	cmp	r0, #0
   16568:	bne	165a4 <close_stdout@@Base+0x3e08>
   1656c:	mov	r1, r5
   16570:	mov	r0, r6
   16574:	bl	11254 <fdopen@plt>
   16578:	cmp	r0, #0
   1657c:	beq	165a4 <close_stdout@@Base+0x3e08>
   16580:	pop	{r4, r5, r6, pc}
   16584:	bl	114a0 <__errno_location@plt>
   16588:	ldr	r6, [r0]
   1658c:	mov	r5, r0
   16590:	mov	r0, r4
   16594:	bl	16300 <close_stdout@@Base+0x3b64>
   16598:	mov	r0, #0
   1659c:	str	r6, [r5]
   165a0:	pop	{r4, r5, r6, pc}
   165a4:	bl	114a0 <__errno_location@plt>
   165a8:	ldr	r5, [r0]
   165ac:	mov	r4, r0
   165b0:	mov	r0, r6
   165b4:	bl	115a8 <close@plt>
   165b8:	mov	r0, #0
   165bc:	str	r5, [r4]
   165c0:	pop	{r4, r5, r6, pc}
   165c4:	andeq	r0, r0, r0
   165c8:	cmp	r0, #9
   165cc:	push	{r4, r5, r6, r7, r8, lr}
   165d0:	bhi	16664 <close_stdout@@Base+0x3ec8>
   165d4:	mov	r7, #11
   165d8:	movw	r8, #43691	; 0xaaab
   165dc:	movt	r8, #43690	; 0xaaaa
   165e0:	cmp	r7, #9
   165e4:	bls	1665c <close_stdout@@Base+0x3ec0>
   165e8:	umull	r2, r3, r8, r7
   165ec:	lsr	r3, r3, #1
   165f0:	add	r3, r3, r3, lsl #1
   165f4:	cmp	r7, r3
   165f8:	beq	16648 <close_stdout@@Base+0x3eac>
   165fc:	mov	r6, #16
   16600:	mov	r5, #9
   16604:	mov	r4, #3
   16608:	b	16618 <close_stdout@@Base+0x3e7c>
   1660c:	bl	17e24 <close_stdout@@Base+0x5688>
   16610:	cmp	r1, #0
   16614:	beq	16648 <close_stdout@@Base+0x3eac>
   16618:	add	r5, r5, r6
   1661c:	add	r4, r4, #2
   16620:	cmp	r5, r7
   16624:	mov	r0, r7
   16628:	add	r6, r6, #8
   1662c:	mov	r1, r4
   16630:	bcc	1660c <close_stdout@@Base+0x3e70>
   16634:	mov	r1, r4
   16638:	mov	r0, r7
   1663c:	bl	17e24 <close_stdout@@Base+0x5688>
   16640:	cmp	r1, #0
   16644:	bne	16654 <close_stdout@@Base+0x3eb8>
   16648:	add	r7, r7, #2
   1664c:	cmn	r7, #1
   16650:	bne	165e0 <close_stdout@@Base+0x3e44>
   16654:	mov	r0, r7
   16658:	pop	{r4, r5, r6, r7, r8, pc}
   1665c:	mov	r4, #3
   16660:	b	16634 <close_stdout@@Base+0x3e98>
   16664:	orr	r7, r0, #1
   16668:	cmn	r7, #1
   1666c:	bne	165d8 <close_stdout@@Base+0x3e3c>
   16670:	b	16654 <close_stdout@@Base+0x3eb8>
   16674:	push	{r3, lr}
   16678:	ror	r0, r0, #3
   1667c:	bl	17e24 <close_stdout@@Base+0x5688>
   16680:	mov	r0, r1
   16684:	pop	{r3, pc}
   16688:	subs	r3, r1, r0
   1668c:	rsbs	r0, r3, #0
   16690:	adcs	r0, r0, r3
   16694:	bx	lr
   16698:	push	{r4, lr}
   1669c:	mov	r4, r0
   166a0:	ldr	r3, [r4, #24]
   166a4:	mov	r0, r1
   166a8:	ldr	r1, [r4, #8]
   166ac:	blx	r3
   166b0:	ldr	r3, [r4, #8]
   166b4:	cmp	r0, r3
   166b8:	bcs	166c8 <close_stdout@@Base+0x3f2c>
   166bc:	ldr	r3, [r4]
   166c0:	add	r0, r3, r0, lsl #3
   166c4:	pop	{r4, pc}
   166c8:	bl	1159c <abort@plt>
   166cc:	push	{r4, r5, r6, r7, r8, lr}
   166d0:	mov	r7, r2
   166d4:	mov	r8, r3
   166d8:	mov	r6, r0
   166dc:	mov	r5, r1
   166e0:	bl	16698 <close_stdout@@Base+0x3efc>
   166e4:	str	r0, [r7]
   166e8:	mov	r4, r0
   166ec:	ldr	r2, [r0]
   166f0:	cmp	r2, #0
   166f4:	beq	16788 <close_stdout@@Base+0x3fec>
   166f8:	cmp	r5, r2
   166fc:	beq	1671c <close_stdout@@Base+0x3f80>
   16700:	mov	r1, r2
   16704:	ldr	r3, [r6, #28]
   16708:	mov	r0, r5
   1670c:	blx	r3
   16710:	cmp	r0, #0
   16714:	beq	1677c <close_stdout@@Base+0x3fe0>
   16718:	ldr	r2, [r4]
   1671c:	cmp	r8, #0
   16720:	beq	1674c <close_stdout@@Base+0x3fb0>
   16724:	ldr	r3, [r4, #4]
   16728:	cmp	r3, #0
   1672c:	streq	r3, [r4]
   16730:	ldmne	r3, {r0, r1}
   16734:	movne	ip, #0
   16738:	stmne	r4, {r0, r1}
   1673c:	strne	ip, [r3]
   16740:	ldrne	r1, [r6, #36]	; 0x24
   16744:	strne	r1, [r3, #4]
   16748:	strne	r3, [r6, #36]	; 0x24
   1674c:	mov	r0, r2
   16750:	pop	{r4, r5, r6, r7, r8, pc}
   16754:	ldr	r2, [ip]
   16758:	cmp	r2, r5
   1675c:	beq	1679c <close_stdout@@Base+0x4000>
   16760:	mov	r1, r2
   16764:	mov	r0, r5
   16768:	ldr	r2, [r6, #28]
   1676c:	blx	r2
   16770:	cmp	r0, #0
   16774:	bne	16794 <close_stdout@@Base+0x3ff8>
   16778:	ldr	r4, [r4, #4]
   1677c:	ldr	ip, [r4, #4]
   16780:	cmp	ip, #0
   16784:	bne	16754 <close_stdout@@Base+0x3fb8>
   16788:	mov	r2, #0
   1678c:	mov	r0, r2
   16790:	pop	{r4, r5, r6, r7, r8, pc}
   16794:	ldr	ip, [r4, #4]
   16798:	ldr	r2, [ip]
   1679c:	cmp	r8, #0
   167a0:	beq	1674c <close_stdout@@Base+0x3fb0>
   167a4:	ldr	r1, [ip, #4]
   167a8:	mov	r3, #0
   167ac:	mov	r0, r2
   167b0:	str	r1, [r4, #4]
   167b4:	str	r3, [ip]
   167b8:	ldr	r3, [r6, #36]	; 0x24
   167bc:	str	r3, [ip, #4]
   167c0:	str	ip, [r6, #36]	; 0x24
   167c4:	pop	{r4, r5, r6, r7, r8, pc}
   167c8:	ldr	r1, [pc, #176]	; 16880 <close_stdout@@Base+0x40e4>
   167cc:	mov	r2, r0
   167d0:	ldr	r3, [r0]
   167d4:	add	r1, pc, r1
   167d8:	cmp	r3, r1
   167dc:	beq	1686c <close_stdout@@Base+0x40d0>
   167e0:	vldr	s15, [r3, #8]
   167e4:	vldr	s14, [pc, #136]	; 16874 <close_stdout@@Base+0x40d8>
   167e8:	vcmpe.f32	s15, s14
   167ec:	vmrs	APSR_nzcv, fpscr
   167f0:	ble	16858 <close_stdout@@Base+0x40bc>
   167f4:	vldr	s13, [pc, #124]	; 16878 <close_stdout@@Base+0x40dc>
   167f8:	vcmpe.f32	s15, s13
   167fc:	vmrs	APSR_nzcv, fpscr
   16800:	bpl	16858 <close_stdout@@Base+0x40bc>
   16804:	vldr	s13, [pc, #112]	; 1687c <close_stdout@@Base+0x40e0>
   16808:	vldr	s12, [r3, #12]
   1680c:	vcmpe.f32	s12, s13
   16810:	vmrs	APSR_nzcv, fpscr
   16814:	ble	16858 <close_stdout@@Base+0x40bc>
   16818:	vldr	s13, [r3]
   1681c:	vcmpe.f32	s13, #0.0
   16820:	vmrs	APSR_nzcv, fpscr
   16824:	blt	16858 <close_stdout@@Base+0x40bc>
   16828:	vadd.f32	s14, s13, s14
   1682c:	vldr	s12, [r3, #4]
   16830:	vcmpe.f32	s14, s12
   16834:	vmrs	APSR_nzcv, fpscr
   16838:	bpl	16858 <close_stdout@@Base+0x40bc>
   1683c:	vmov.f32	s13, #112	; 0x3f800000  1.0
   16840:	vcmpe.f32	s12, s13
   16844:	vmrs	APSR_nzcv, fpscr
   16848:	bhi	16858 <close_stdout@@Base+0x40bc>
   1684c:	vcmpe.f32	s15, s14
   16850:	vmrs	APSR_nzcv, fpscr
   16854:	bgt	1686c <close_stdout@@Base+0x40d0>
   16858:	ldr	r3, [pc, #36]	; 16884 <close_stdout@@Base+0x40e8>
   1685c:	mov	r0, #0
   16860:	add	r3, pc, r3
   16864:	str	r3, [r2]
   16868:	bx	lr
   1686c:	mov	r0, #1
   16870:	bx	lr
   16874:	stclcc	12, cr12, [ip, #820]	; 0x334
   16878:	svccc	0x00666666
   1687c:	svccc	0x008ccccd
   16880:	strdeq	r2, [r0], -r0
   16884:	andeq	r2, r0, r4, ror #20
   16888:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1688c:	mov	r8, r1
   16890:	ldr	r6, [r1]
   16894:	mov	r5, r0
   16898:	ldr	r3, [r1, #4]
   1689c:	mov	sl, r2
   168a0:	cmp	r6, r3
   168a4:	addcc	r6, r6, #8
   168a8:	movcc	r9, #0
   168ac:	bcs	16954 <close_stdout@@Base+0x41b8>
   168b0:	ldr	fp, [r6, #-8]
   168b4:	mov	r7, r6
   168b8:	cmp	fp, #0
   168bc:	beq	16948 <close_stdout@@Base+0x41ac>
   168c0:	ldr	r4, [r6, #-4]
   168c4:	cmp	r4, #0
   168c8:	bne	168e8 <close_stdout@@Base+0x414c>
   168cc:	b	16938 <close_stdout@@Base+0x419c>
   168d0:	ldr	r2, [r0, #4]
   168d4:	cmp	r3, #0
   168d8:	str	r2, [r4, #4]
   168dc:	str	r4, [r0, #4]
   168e0:	mov	r4, r3
   168e4:	beq	16934 <close_stdout@@Base+0x4198>
   168e8:	ldr	fp, [r4]
   168ec:	mov	r0, r5
   168f0:	mov	r1, fp
   168f4:	bl	16698 <close_stdout@@Base+0x3efc>
   168f8:	ldr	r3, [r4, #4]
   168fc:	ldr	r2, [r0]
   16900:	cmp	r2, #0
   16904:	bne	168d0 <close_stdout@@Base+0x4134>
   16908:	str	fp, [r0]
   1690c:	cmp	r3, #0
   16910:	ldr	r1, [r5, #12]
   16914:	add	r1, r1, #1
   16918:	str	r1, [r5, #12]
   1691c:	str	r2, [r4]
   16920:	ldr	r2, [r5, #36]	; 0x24
   16924:	str	r2, [r4, #4]
   16928:	str	r4, [r5, #36]	; 0x24
   1692c:	mov	r4, r3
   16930:	bne	168e8 <close_stdout@@Base+0x414c>
   16934:	ldr	fp, [r6, #-8]
   16938:	cmp	sl, #0
   1693c:	str	r9, [r6, #-4]
   16940:	beq	1695c <close_stdout@@Base+0x41c0>
   16944:	ldr	r3, [r8, #4]
   16948:	cmp	r3, r7
   1694c:	add	r6, r6, #8
   16950:	bhi	168b0 <close_stdout@@Base+0x4114>
   16954:	mov	r0, #1
   16958:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1695c:	mov	r0, r5
   16960:	mov	r1, fp
   16964:	bl	16698 <close_stdout@@Base+0x3efc>
   16968:	ldr	r3, [r0]
   1696c:	mov	r4, r0
   16970:	cmp	r3, #0
   16974:	beq	169c0 <close_stdout@@Base+0x4224>
   16978:	ldr	r0, [r5, #36]	; 0x24
   1697c:	cmp	r0, #0
   16980:	beq	169d4 <close_stdout@@Base+0x4238>
   16984:	ldr	r2, [r0, #4]
   16988:	str	r2, [r5, #36]	; 0x24
   1698c:	str	fp, [r0]
   16990:	ldr	r2, [r4, #4]
   16994:	str	r2, [r0, #4]
   16998:	str	r0, [r4, #4]
   1699c:	str	r9, [r6, #-8]
   169a0:	add	r6, r6, #8
   169a4:	ldr	r3, [r8, #4]
   169a8:	ldr	r2, [r8, #12]
   169ac:	cmp	r3, r7
   169b0:	sub	r2, r2, #1
   169b4:	str	r2, [r8, #12]
   169b8:	bhi	168b0 <close_stdout@@Base+0x4114>
   169bc:	b	16954 <close_stdout@@Base+0x41b8>
   169c0:	str	fp, [r0]
   169c4:	ldr	r3, [r5, #12]
   169c8:	add	r3, r3, #1
   169cc:	str	r3, [r5, #12]
   169d0:	b	1699c <close_stdout@@Base+0x4200>
   169d4:	mov	r0, #8
   169d8:	bl	113f8 <malloc@plt>
   169dc:	cmp	r0, #0
   169e0:	bne	1698c <close_stdout@@Base+0x41f0>
   169e4:	mov	r0, sl
   169e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ec:	ldr	r0, [r0, #8]
   169f0:	bx	lr
   169f4:	ldr	r0, [r0, #12]
   169f8:	bx	lr
   169fc:	ldr	r0, [r0, #16]
   16a00:	bx	lr
   16a04:	ldr	r3, [r0]
   16a08:	ldr	r2, [r0, #4]
   16a0c:	cmp	r3, r2
   16a10:	bcs	16a74 <close_stdout@@Base+0x42d8>
   16a14:	add	r1, r3, #8
   16a18:	add	r2, r2, #7
   16a1c:	rsb	r2, r1, r2
   16a20:	add	r3, r3, #16
   16a24:	bic	r2, r2, #7
   16a28:	mov	r0, #0
   16a2c:	add	ip, r3, r2
   16a30:	ldr	r3, [r1, #-8]
   16a34:	cmp	r3, #0
   16a38:	beq	16a64 <close_stdout@@Base+0x42c8>
   16a3c:	ldr	r3, [r1, #-4]
   16a40:	mov	r2, #1
   16a44:	cmp	r3, #0
   16a48:	beq	16a5c <close_stdout@@Base+0x42c0>
   16a4c:	ldr	r3, [r3, #4]
   16a50:	add	r2, r2, #1
   16a54:	cmp	r3, #0
   16a58:	bne	16a4c <close_stdout@@Base+0x42b0>
   16a5c:	cmp	r0, r2
   16a60:	movcc	r0, r2
   16a64:	add	r1, r1, #8
   16a68:	cmp	r1, ip
   16a6c:	bne	16a30 <close_stdout@@Base+0x4294>
   16a70:	bx	lr
   16a74:	mov	r0, #0
   16a78:	bx	lr
   16a7c:	push	{r4}		; (str r4, [sp, #-4]!)
   16a80:	ldr	r3, [r0]
   16a84:	ldr	r2, [r0, #4]
   16a88:	cmp	r3, r2
   16a8c:	bcs	16b1c <close_stdout@@Base+0x4380>
   16a90:	add	r2, r2, #7
   16a94:	add	r1, r3, #8
   16a98:	rsb	ip, r1, r2
   16a9c:	add	r3, r3, #16
   16aa0:	bic	ip, ip, #7
   16aa4:	mov	r2, #0
   16aa8:	add	r4, r3, ip
   16aac:	mov	ip, r2
   16ab0:	ldr	r3, [r1, #-8]
   16ab4:	cmp	r3, #0
   16ab8:	beq	16ae0 <close_stdout@@Base+0x4344>
   16abc:	ldr	r3, [r1, #-4]
   16ac0:	add	ip, ip, #1
   16ac4:	add	r2, r2, #1
   16ac8:	cmp	r3, #0
   16acc:	beq	16ae0 <close_stdout@@Base+0x4344>
   16ad0:	ldr	r3, [r3, #4]
   16ad4:	add	r2, r2, #1
   16ad8:	cmp	r3, #0
   16adc:	bne	16ad0 <close_stdout@@Base+0x4334>
   16ae0:	add	r1, r1, #8
   16ae4:	cmp	r1, r4
   16ae8:	bne	16ab0 <close_stdout@@Base+0x4314>
   16aec:	ldr	r3, [r0, #12]
   16af0:	cmp	r3, ip
   16af4:	movne	r0, #0
   16af8:	beq	16b04 <close_stdout@@Base+0x4368>
   16afc:	pop	{r4}		; (ldr r4, [sp], #4)
   16b00:	bx	lr
   16b04:	ldr	r0, [r0, #16]
   16b08:	pop	{r4}		; (ldr r4, [sp], #4)
   16b0c:	subs	r3, r0, r2
   16b10:	rsbs	r0, r3, #0
   16b14:	adcs	r0, r0, r3
   16b18:	bx	lr
   16b1c:	mov	r2, #0
   16b20:	mov	ip, r2
   16b24:	b	16aec <close_stdout@@Base+0x4350>
   16b28:	push	{r4, r5, r6, r7, r8, lr}
   16b2c:	sub	sp, sp, #8
   16b30:	mov	r4, r1
   16b34:	mov	r5, r0
   16b38:	bl	169fc <close_stdout@@Base+0x4260>
   16b3c:	mov	r8, r0
   16b40:	mov	r0, r5
   16b44:	bl	169ec <close_stdout@@Base+0x4250>
   16b48:	mov	r6, r0
   16b4c:	mov	r0, r5
   16b50:	bl	169f4 <close_stdout@@Base+0x4258>
   16b54:	mov	r7, r0
   16b58:	mov	r0, r5
   16b5c:	bl	16a04 <close_stdout@@Base+0x4268>
   16b60:	ldr	r2, [pc, #144]	; 16bf8 <close_stdout@@Base+0x445c>
   16b64:	mov	r3, r8
   16b68:	mov	r1, #1
   16b6c:	add	r2, pc, r2
   16b70:	mov	r5, r0
   16b74:	mov	r0, r4
   16b78:	bl	11500 <__fprintf_chk@plt>
   16b7c:	ldr	r2, [pc, #120]	; 16bfc <close_stdout@@Base+0x4460>
   16b80:	mov	r3, r6
   16b84:	mov	r0, r4
   16b88:	mov	r1, #1
   16b8c:	add	r2, pc, r2
   16b90:	bl	11500 <__fprintf_chk@plt>
   16b94:	vmov	s15, r7
   16b98:	vldr	d5, [pc, #80]	; 16bf0 <close_stdout@@Base+0x4454>
   16b9c:	ldr	r2, [pc, #92]	; 16c00 <close_stdout@@Base+0x4464>
   16ba0:	vcvt.f64.u32	d4, s15
   16ba4:	mov	r3, r7
   16ba8:	vmov	s15, r6
   16bac:	mov	r0, r4
   16bb0:	mov	r1, #1
   16bb4:	add	r2, pc, r2
   16bb8:	vmul.f64	d5, d4, d5
   16bbc:	vcvt.f64.u32	d6, s15
   16bc0:	vdiv.f64	d7, d5, d6
   16bc4:	vstr	d7, [sp]
   16bc8:	bl	11500 <__fprintf_chk@plt>
   16bcc:	ldr	r2, [pc, #48]	; 16c04 <close_stdout@@Base+0x4468>
   16bd0:	mov	r0, r4
   16bd4:	mov	r3, r5
   16bd8:	mov	r1, #1
   16bdc:	add	r2, pc, r2
   16be0:	add	sp, sp, #8
   16be4:	pop	{r4, r5, r6, r7, r8, lr}
   16be8:	b	11500 <__fprintf_chk@plt>
   16bec:	nop	{0}
   16bf0:	andeq	r0, r0, r0
   16bf4:	subsmi	r0, r9, r0
   16bf8:	andeq	r2, r0, ip, ror #14
   16bfc:	andeq	r2, r0, r4, ror #14
   16c00:	andeq	r2, r0, r4, asr r7
   16c04:	andeq	r2, r0, r0, asr r7
   16c08:	push	{r4, r5, r6, lr}
   16c0c:	mov	r6, r0
   16c10:	mov	r5, r1
   16c14:	bl	16698 <close_stdout@@Base+0x3efc>
   16c18:	ldr	r3, [r0]
   16c1c:	mov	r4, r0
   16c20:	cmp	r3, #0
   16c24:	bne	16c30 <close_stdout@@Base+0x4494>
   16c28:	b	16c5c <close_stdout@@Base+0x44c0>
   16c2c:	ldr	r3, [r4]
   16c30:	cmp	r5, r3
   16c34:	mov	r1, r3
   16c38:	mov	r0, r5
   16c3c:	beq	16c68 <close_stdout@@Base+0x44cc>
   16c40:	ldr	r3, [r6, #28]
   16c44:	blx	r3
   16c48:	cmp	r0, #0
   16c4c:	bne	16c64 <close_stdout@@Base+0x44c8>
   16c50:	ldr	r4, [r4, #4]
   16c54:	cmp	r4, #0
   16c58:	bne	16c2c <close_stdout@@Base+0x4490>
   16c5c:	mov	r0, #0
   16c60:	pop	{r4, r5, r6, pc}
   16c64:	ldr	r3, [r4]
   16c68:	mov	r0, r3
   16c6c:	pop	{r4, r5, r6, pc}
   16c70:	push	{r3, lr}
   16c74:	ldr	r3, [r0, #16]
   16c78:	cmp	r3, #0
   16c7c:	beq	16cbc <close_stdout@@Base+0x4520>
   16c80:	ldr	r3, [r0]
   16c84:	ldr	r2, [r0, #4]
   16c88:	cmp	r3, r2
   16c8c:	bcs	16cb8 <close_stdout@@Base+0x451c>
   16c90:	ldr	r0, [r3]
   16c94:	cmp	r0, #0
   16c98:	beq	16cac <close_stdout@@Base+0x4510>
   16c9c:	b	16cc4 <close_stdout@@Base+0x4528>
   16ca0:	ldr	r0, [r3]
   16ca4:	cmp	r0, #0
   16ca8:	popne	{r3, pc}
   16cac:	add	r3, r3, #8
   16cb0:	cmp	r3, r2
   16cb4:	bcc	16ca0 <close_stdout@@Base+0x4504>
   16cb8:	bl	1159c <abort@plt>
   16cbc:	mov	r0, r3
   16cc0:	pop	{r3, pc}
   16cc4:	pop	{r3, pc}
   16cc8:	push	{r3, r4, r5, lr}
   16ccc:	mov	r5, r0
   16cd0:	mov	r4, r1
   16cd4:	bl	16698 <close_stdout@@Base+0x3efc>
   16cd8:	mov	r2, r0
   16cdc:	mov	r3, r0
   16ce0:	b	16cec <close_stdout@@Base+0x4550>
   16ce4:	cmp	r3, #0
   16ce8:	beq	16d04 <close_stdout@@Base+0x4568>
   16cec:	ldr	ip, [r3]
   16cf0:	ldr	r3, [r3, #4]
   16cf4:	cmp	ip, r4
   16cf8:	bne	16ce4 <close_stdout@@Base+0x4548>
   16cfc:	cmp	r3, #0
   16d00:	bne	16d2c <close_stdout@@Base+0x4590>
   16d04:	ldr	r3, [r5, #4]
   16d08:	b	16d18 <close_stdout@@Base+0x457c>
   16d0c:	ldr	r0, [r2]
   16d10:	cmp	r0, #0
   16d14:	popne	{r3, r4, r5, pc}
   16d18:	add	r2, r2, #8
   16d1c:	cmp	r2, r3
   16d20:	bcc	16d0c <close_stdout@@Base+0x4570>
   16d24:	mov	r0, #0
   16d28:	pop	{r3, r4, r5, pc}
   16d2c:	ldr	r0, [r3]
   16d30:	pop	{r3, r4, r5, pc}
   16d34:	push	{r4, r5, r6, r7}
   16d38:	mov	r6, r0
   16d3c:	ldm	r0, {r5, ip}
   16d40:	cmp	ip, r5
   16d44:	bls	16dc8 <close_stdout@@Base+0x462c>
   16d48:	add	r5, r5, #8
   16d4c:	mov	r0, #0
   16d50:	ldr	r3, [r5, #-8]
   16d54:	mov	r7, r5
   16d58:	cmp	r3, #0
   16d5c:	beq	16da8 <close_stdout@@Base+0x460c>
   16d60:	cmp	r2, r0
   16d64:	bls	16db4 <close_stdout@@Base+0x4618>
   16d68:	str	r3, [r1, r0, lsl #2]
   16d6c:	add	r4, r0, #1
   16d70:	ldr	r3, [r5, #-4]
   16d74:	add	ip, r1, r0, lsl #2
   16d78:	cmp	r3, #0
   16d7c:	beq	16dbc <close_stdout@@Base+0x4620>
   16d80:	mov	r0, r4
   16d84:	cmp	r0, r2
   16d88:	beq	16db4 <close_stdout@@Base+0x4618>
   16d8c:	ldr	r4, [r3]
   16d90:	add	r0, r0, #1
   16d94:	str	r4, [ip, #4]!
   16d98:	ldr	r3, [r3, #4]
   16d9c:	cmp	r3, #0
   16da0:	bne	16d84 <close_stdout@@Base+0x45e8>
   16da4:	ldr	ip, [r6, #4]
   16da8:	cmp	ip, r7
   16dac:	add	r5, r5, #8
   16db0:	bhi	16d50 <close_stdout@@Base+0x45b4>
   16db4:	pop	{r4, r5, r6, r7}
   16db8:	bx	lr
   16dbc:	ldr	ip, [r6, #4]
   16dc0:	mov	r0, r4
   16dc4:	b	16da8 <close_stdout@@Base+0x460c>
   16dc8:	mov	r0, #0
   16dcc:	b	16db4 <close_stdout@@Base+0x4618>
   16dd0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16dd4:	mov	r7, r2
   16dd8:	ldr	r8, [r0]
   16ddc:	mov	r9, r0
   16de0:	ldr	r2, [r0, #4]
   16de4:	mov	r6, r1
   16de8:	mov	r5, #0
   16dec:	cmp	r2, r8
   16df0:	bls	16e40 <close_stdout@@Base+0x46a4>
   16df4:	ldr	r3, [r8]
   16df8:	cmp	r3, #0
   16dfc:	beq	16e34 <close_stdout@@Base+0x4698>
   16e00:	mov	r0, r3
   16e04:	mov	r4, r8
   16e08:	b	16e10 <close_stdout@@Base+0x4674>
   16e0c:	ldr	r0, [r4]
   16e10:	mov	r1, r7
   16e14:	blx	r6
   16e18:	cmp	r0, #0
   16e1c:	beq	16e40 <close_stdout@@Base+0x46a4>
   16e20:	ldr	r4, [r4, #4]
   16e24:	add	r5, r5, #1
   16e28:	cmp	r4, #0
   16e2c:	bne	16e0c <close_stdout@@Base+0x4670>
   16e30:	ldr	r2, [r9, #4]
   16e34:	add	r8, r8, #8
   16e38:	cmp	r2, r8
   16e3c:	bhi	16df4 <close_stdout@@Base+0x4658>
   16e40:	mov	r0, r5
   16e44:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16e48:	push	{r3, r4, r5, lr}
   16e4c:	mov	r5, r1
   16e50:	ldrb	r3, [r0]
   16e54:	cmp	r3, #0
   16e58:	beq	16e88 <close_stdout@@Base+0x46ec>
   16e5c:	mov	r4, r0
   16e60:	mov	r1, #0
   16e64:	rsb	r0, r1, r1, lsl #5
   16e68:	mov	r1, r5
   16e6c:	add	r0, r3, r0
   16e70:	bl	17e24 <close_stdout@@Base+0x5688>
   16e74:	ldrb	r3, [r4, #1]!
   16e78:	cmp	r3, #0
   16e7c:	bne	16e64 <close_stdout@@Base+0x46c8>
   16e80:	mov	r0, r1
   16e84:	pop	{r3, r4, r5, pc}
   16e88:	mov	r1, r3
   16e8c:	b	16e80 <close_stdout@@Base+0x46e4>
   16e90:	push	{r4}		; (str r4, [sp, #-4]!)
   16e94:	mov	ip, r0
   16e98:	ldr	r4, [pc, #24]	; 16eb8 <close_stdout@@Base+0x471c>
   16e9c:	add	r4, pc, r4
   16ea0:	ldm	r4!, {r0, r1, r2, r3}
   16ea4:	ldr	r4, [r4]
   16ea8:	stmia	ip!, {r0, r1, r2, r3}
   16eac:	str	r4, [ip]
   16eb0:	pop	{r4}		; (ldr r4, [sp], #4)
   16eb4:	bx	lr
   16eb8:	andeq	r2, r0, r8, lsr #8
   16ebc:	push	{r4, r5, r6, r7, r8, lr}
   16ec0:	subs	r8, r2, #0
   16ec4:	mov	r7, r0
   16ec8:	mov	r5, r1
   16ecc:	mov	r6, r3
   16ed0:	beq	16fc4 <close_stdout@@Base+0x4828>
   16ed4:	cmp	r6, #0
   16ed8:	beq	16fb8 <close_stdout@@Base+0x481c>
   16edc:	mov	r0, #40	; 0x28
   16ee0:	bl	113f8 <malloc@plt>
   16ee4:	subs	r4, r0, #0
   16ee8:	beq	16fdc <close_stdout@@Base+0x4840>
   16eec:	cmp	r5, #0
   16ef0:	beq	16fd0 <close_stdout@@Base+0x4834>
   16ef4:	mov	r0, r4
   16ef8:	str	r5, [r0, #20]!
   16efc:	bl	167c8 <close_stdout@@Base+0x402c>
   16f00:	cmp	r0, #0
   16f04:	beq	16fa8 <close_stdout@@Base+0x480c>
   16f08:	ldrb	r3, [r5, #16]
   16f0c:	vldr	s15, [r5, #8]
   16f10:	cmp	r3, #0
   16f14:	bne	16f3c <close_stdout@@Base+0x47a0>
   16f18:	vmov	s14, r7
   16f1c:	vcvt.f32.u32	s13, s14
   16f20:	vldr	s14, [pc, #188]	; 16fe4 <close_stdout@@Base+0x4848>
   16f24:	vdiv.f32	s15, s13, s15
   16f28:	vcmpe.f32	s15, s14
   16f2c:	vmrs	APSR_nzcv, fpscr
   16f30:	bge	16fa0 <close_stdout@@Base+0x4804>
   16f34:	vcvt.u32.f32	s15, s15
   16f38:	vmov	r7, s15
   16f3c:	mov	r0, r7
   16f40:	bl	165c8 <close_stdout@@Base+0x3e2c>
   16f44:	cmn	r0, #-1073741823	; 0xc0000001
   16f48:	mov	r5, r0
   16f4c:	bhi	16fa0 <close_stdout@@Base+0x4804>
   16f50:	cmp	r0, #0
   16f54:	str	r0, [r4, #8]
   16f58:	beq	16fa8 <close_stdout@@Base+0x480c>
   16f5c:	mov	r1, #8
   16f60:	bl	11260 <calloc@plt>
   16f64:	cmp	r0, #0
   16f68:	str	r0, [r4]
   16f6c:	beq	16fa8 <close_stdout@@Base+0x480c>
   16f70:	ldr	r3, [sp, #24]
   16f74:	mov	r2, #0
   16f78:	add	r5, r0, r5, lsl #3
   16f7c:	str	r8, [r4, #24]
   16f80:	str	r5, [r4, #4]
   16f84:	mov	r0, r4
   16f88:	str	r6, [r4, #28]
   16f8c:	str	r3, [r4, #32]
   16f90:	str	r2, [r4, #12]
   16f94:	str	r2, [r4, #16]
   16f98:	str	r2, [r4, #36]	; 0x24
   16f9c:	pop	{r4, r5, r6, r7, r8, pc}
   16fa0:	mov	r3, #0
   16fa4:	str	r3, [r4, #8]
   16fa8:	mov	r0, r4
   16fac:	bl	112c0 <free@plt>
   16fb0:	mov	r0, #0
   16fb4:	pop	{r4, r5, r6, r7, r8, pc}
   16fb8:	ldr	r6, [pc, #40]	; 16fe8 <close_stdout@@Base+0x484c>
   16fbc:	add	r6, pc, r6
   16fc0:	b	16edc <close_stdout@@Base+0x4740>
   16fc4:	ldr	r8, [pc, #32]	; 16fec <close_stdout@@Base+0x4850>
   16fc8:	add	r8, pc, r8
   16fcc:	b	16ed4 <close_stdout@@Base+0x4738>
   16fd0:	ldr	r5, [pc, #24]	; 16ff0 <close_stdout@@Base+0x4854>
   16fd4:	add	r5, pc, r5
   16fd8:	b	16ef4 <close_stdout@@Base+0x4758>
   16fdc:	mov	r0, r4
   16fe0:	pop	{r4, r5, r6, r7, r8, pc}
   16fe4:	svcmi	0x00800000
   16fe8:			; <UNDEFINED> instruction: 0xfffff6c4
   16fec:			; <UNDEFINED> instruction: 0xfffff6a4
   16ff0:	strdeq	r2, [r0], -r0
   16ff4:	push	{r4, r5, r6, r7, r8, lr}
   16ff8:	mov	r5, r0
   16ffc:	ldr	r7, [r0]
   17000:	ldr	r3, [r0, #4]
   17004:	cmp	r7, r3
   17008:	addcc	r7, r7, #8
   1700c:	movcc	r6, #0
   17010:	bcs	17090 <close_stdout@@Base+0x48f4>
   17014:	ldr	r2, [r7, #-8]
   17018:	mov	r8, r7
   1701c:	cmp	r2, #0
   17020:	beq	17084 <close_stdout@@Base+0x48e8>
   17024:	ldr	r4, [r7, #-4]
   17028:	cmp	r4, #0
   1702c:	beq	17064 <close_stdout@@Base+0x48c8>
   17030:	ldr	r3, [r5, #32]
   17034:	cmp	r3, #0
   17038:	beq	17044 <close_stdout@@Base+0x48a8>
   1703c:	ldr	r0, [r4]
   17040:	blx	r3
   17044:	ldr	r3, [r4, #4]
   17048:	str	r6, [r4]
   1704c:	ldr	r2, [r5, #36]	; 0x24
   17050:	cmp	r3, #0
   17054:	str	r2, [r4, #4]
   17058:	str	r4, [r5, #36]	; 0x24
   1705c:	mov	r4, r3
   17060:	bne	17030 <close_stdout@@Base+0x4894>
   17064:	ldr	r3, [r5, #32]
   17068:	cmp	r3, #0
   1706c:	beq	17078 <close_stdout@@Base+0x48dc>
   17070:	ldr	r0, [r7, #-8]
   17074:	blx	r3
   17078:	str	r6, [r7, #-8]
   1707c:	str	r6, [r7, #-4]
   17080:	ldr	r3, [r5, #4]
   17084:	cmp	r3, r8
   17088:	add	r7, r7, #8
   1708c:	bhi	17014 <close_stdout@@Base+0x4878>
   17090:	mov	r3, #0
   17094:	str	r3, [r5, #12]
   17098:	str	r3, [r5, #16]
   1709c:	pop	{r4, r5, r6, r7, r8, pc}
   170a0:	push	{r3, r4, r5, r6, r7, lr}
   170a4:	mov	r5, r0
   170a8:	ldr	r3, [r0, #32]
   170ac:	cmp	r3, #0
   170b0:	beq	170c0 <close_stdout@@Base+0x4924>
   170b4:	ldr	r3, [r0, #16]
   170b8:	cmp	r3, #0
   170bc:	bne	1713c <close_stdout@@Base+0x49a0>
   170c0:	ldr	r3, [r5, #4]
   170c4:	ldr	r6, [r5]
   170c8:	cmp	r6, r3
   170cc:	bcs	17108 <close_stdout@@Base+0x496c>
   170d0:	add	r6, r6, #8
   170d4:	ldr	r0, [r6, #-4]
   170d8:	mov	r7, r6
   170dc:	cmp	r0, #0
   170e0:	beq	170fc <close_stdout@@Base+0x4960>
   170e4:	ldr	r4, [r0, #4]
   170e8:	bl	112c0 <free@plt>
   170ec:	cmp	r4, #0
   170f0:	mov	r0, r4
   170f4:	bne	170e4 <close_stdout@@Base+0x4948>
   170f8:	ldr	r3, [r5, #4]
   170fc:	cmp	r7, r3
   17100:	add	r6, r6, #8
   17104:	bcc	170d4 <close_stdout@@Base+0x4938>
   17108:	ldr	r0, [r5, #36]	; 0x24
   1710c:	cmp	r0, #0
   17110:	beq	17128 <close_stdout@@Base+0x498c>
   17114:	ldr	r4, [r0, #4]
   17118:	bl	112c0 <free@plt>
   1711c:	cmp	r4, #0
   17120:	mov	r0, r4
   17124:	bne	17114 <close_stdout@@Base+0x4978>
   17128:	ldr	r0, [r5]
   1712c:	bl	112c0 <free@plt>
   17130:	mov	r0, r5
   17134:	pop	{r3, r4, r5, r6, r7, lr}
   17138:	b	112c0 <free@plt>
   1713c:	ldr	r6, [r0]
   17140:	ldr	r3, [r0, #4]
   17144:	cmp	r6, r3
   17148:	bcs	17108 <close_stdout@@Base+0x496c>
   1714c:	ldr	r0, [r6]
   17150:	cmp	r0, #0
   17154:	movne	r4, r6
   17158:	bne	17164 <close_stdout@@Base+0x49c8>
   1715c:	b	1717c <close_stdout@@Base+0x49e0>
   17160:	ldr	r0, [r4]
   17164:	ldr	r3, [r5, #32]
   17168:	blx	r3
   1716c:	ldr	r4, [r4, #4]
   17170:	cmp	r4, #0
   17174:	bne	17160 <close_stdout@@Base+0x49c4>
   17178:	ldr	r3, [r5, #4]
   1717c:	add	r6, r6, #8
   17180:	cmp	r3, r6
   17184:	bhi	1714c <close_stdout@@Base+0x49b0>
   17188:	b	170c4 <close_stdout@@Base+0x4928>
   1718c:	ldr	r3, [pc, #392]	; 1731c <close_stdout@@Base+0x4b80>
   17190:	ldr	r2, [pc, #392]	; 17320 <close_stdout@@Base+0x4b84>
   17194:	add	r3, pc, r3
   17198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1719c:	sub	sp, sp, #52	; 0x34
   171a0:	ldr	r5, [r0, #20]
   171a4:	mov	r4, r0
   171a8:	ldr	r6, [r3, r2]
   171ac:	vldr	s15, [r5, #8]
   171b0:	ldrb	r2, [r5, #16]
   171b4:	ldr	r3, [r6]
   171b8:	cmp	r2, #0
   171bc:	str	r3, [sp, #44]	; 0x2c
   171c0:	bne	171e8 <close_stdout@@Base+0x4a4c>
   171c4:	vmov	s14, r1
   171c8:	vcvt.f32.u32	s13, s14
   171cc:	vldr	s14, [pc, #324]	; 17318 <close_stdout@@Base+0x4b7c>
   171d0:	vdiv.f32	s15, s13, s15
   171d4:	vcmpe.f32	s15, s14
   171d8:	vmrs	APSR_nzcv, fpscr
   171dc:	bge	172e0 <close_stdout@@Base+0x4b44>
   171e0:	vcvt.u32.f32	s15, s15
   171e4:	vmov	r1, s15
   171e8:	mov	r0, r1
   171ec:	bl	165c8 <close_stdout@@Base+0x3e2c>
   171f0:	sub	r3, r0, #1
   171f4:	mov	r7, r0
   171f8:	cmn	r3, #-1073741822	; 0xc0000002
   171fc:	bhi	172e0 <close_stdout@@Base+0x4b44>
   17200:	ldr	r3, [r4, #8]
   17204:	cmp	r3, r0
   17208:	beq	172c0 <close_stdout@@Base+0x4b24>
   1720c:	mov	r1, #8
   17210:	bl	11260 <calloc@plt>
   17214:	cmp	r0, #0
   17218:	mov	r3, r0
   1721c:	str	r0, [sp, #4]
   17220:	beq	172e0 <close_stdout@@Base+0x4b44>
   17224:	ldr	fp, [r4, #24]
   17228:	add	r8, sp, #4
   1722c:	ldr	sl, [r4, #28]
   17230:	mov	ip, #0
   17234:	ldr	r9, [r4, #32]
   17238:	mov	r0, r8
   1723c:	ldr	lr, [r4, #36]	; 0x24
   17240:	mov	r2, ip
   17244:	mov	r1, r4
   17248:	add	r3, r3, r7, lsl #3
   1724c:	str	r5, [sp, #24]
   17250:	str	r7, [sp, #12]
   17254:	str	r3, [sp, #8]
   17258:	str	fp, [sp, #28]
   1725c:	str	sl, [sp, #32]
   17260:	str	r9, [sp, #36]	; 0x24
   17264:	str	lr, [sp, #40]	; 0x28
   17268:	str	ip, [sp, #16]
   1726c:	str	ip, [sp, #20]
   17270:	bl	16888 <close_stdout@@Base+0x40ec>
   17274:	subs	r5, r0, #0
   17278:	bne	172e8 <close_stdout@@Base+0x4b4c>
   1727c:	ldr	r3, [sp, #40]	; 0x28
   17280:	mov	r0, r4
   17284:	mov	r1, r8
   17288:	mov	r2, #1
   1728c:	str	r3, [r4, #36]	; 0x24
   17290:	bl	16888 <close_stdout@@Base+0x40ec>
   17294:	cmp	r0, #0
   17298:	beq	17314 <close_stdout@@Base+0x4b78>
   1729c:	mov	r0, r4
   172a0:	mov	r1, r8
   172a4:	mov	r2, r5
   172a8:	bl	16888 <close_stdout@@Base+0x40ec>
   172ac:	cmp	r0, #0
   172b0:	beq	17314 <close_stdout@@Base+0x4b78>
   172b4:	ldr	r0, [sp, #4]
   172b8:	bl	112c0 <free@plt>
   172bc:	b	172c4 <close_stdout@@Base+0x4b28>
   172c0:	mov	r5, #1
   172c4:	ldr	r1, [sp, #44]	; 0x2c
   172c8:	mov	r0, r5
   172cc:	ldr	r3, [r6]
   172d0:	cmp	r1, r3
   172d4:	bne	17310 <close_stdout@@Base+0x4b74>
   172d8:	add	sp, sp, #52	; 0x34
   172dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172e0:	mov	r5, #0
   172e4:	b	172c4 <close_stdout@@Base+0x4b28>
   172e8:	ldr	r0, [r4]
   172ec:	bl	112c0 <free@plt>
   172f0:	add	r0, sp, #8
   172f4:	ldr	ip, [sp, #4]
   172f8:	ldm	r0, {r0, r1, r2}
   172fc:	ldr	r3, [sp, #40]	; 0x28
   17300:	str	ip, [r4]
   17304:	stmib	r4, {r0, r1, r2}
   17308:	str	r3, [r4, #36]	; 0x24
   1730c:	b	172c4 <close_stdout@@Base+0x4b28>
   17310:	bl	1132c <__stack_chk_fail@plt>
   17314:	bl	1159c <abort@plt>
   17318:	svcmi	0x00800000
   1731c:	andeq	r2, r1, r4, ror #28
   17320:	andeq	r0, r0, ip, lsr r1
   17324:	ldr	r3, [pc, #428]	; 174d8 <close_stdout@@Base+0x4d3c>
   17328:	ldr	ip, [pc, #428]	; 174dc <close_stdout@@Base+0x4d40>
   1732c:	add	r3, pc, r3
   17330:	push	{r4, r5, r6, r7, r8, lr}
   17334:	subs	r8, r1, #0
   17338:	ldr	r4, [r3, ip]
   1733c:	sub	sp, sp, #8
   17340:	mov	r5, r2
   17344:	mov	r6, r0
   17348:	ldr	r3, [r4]
   1734c:	str	r3, [sp, #4]
   17350:	beq	17490 <close_stdout@@Base+0x4cf4>
   17354:	mov	r3, #0
   17358:	mov	r2, sp
   1735c:	bl	166cc <close_stdout@@Base+0x3f30>
   17360:	cmp	r0, #0
   17364:	beq	17390 <close_stdout@@Base+0x4bf4>
   17368:	cmp	r5, #0
   1736c:	moveq	r0, r5
   17370:	strne	r0, [r5]
   17374:	movne	r0, #0
   17378:	ldr	r2, [sp, #4]
   1737c:	ldr	r3, [r4]
   17380:	cmp	r2, r3
   17384:	bne	174d0 <close_stdout@@Base+0x4d34>
   17388:	add	sp, sp, #8
   1738c:	pop	{r4, r5, r6, r7, r8, pc}
   17390:	vldr	s11, [r6, #8]
   17394:	vcvt.f32.u32	s14, s11
   17398:	ldr	r3, [r6, #20]
   1739c:	vldr	s15, [r3, #8]
   173a0:	vldr	s13, [r6, #12]
   173a4:	vmul.f32	s15, s14, s15
   173a8:	vcvt.f32.u32	s14, s13
   173ac:	vcmpe.f32	s14, s15
   173b0:	vmrs	APSR_nzcv, fpscr
   173b4:	bgt	17404 <close_stdout@@Base+0x4c68>
   173b8:	ldr	r3, [sp]
   173bc:	ldr	r2, [r3]
   173c0:	cmp	r2, #0
   173c4:	beq	17494 <close_stdout@@Base+0x4cf8>
   173c8:	ldr	r3, [r6, #36]	; 0x24
   173cc:	cmp	r3, #0
   173d0:	beq	174b8 <close_stdout@@Base+0x4d1c>
   173d4:	ldr	r2, [r3, #4]
   173d8:	str	r2, [r6, #36]	; 0x24
   173dc:	str	r8, [r3]
   173e0:	mov	r0, #1
   173e4:	ldr	r2, [sp]
   173e8:	ldr	r1, [r2, #4]
   173ec:	str	r1, [r3, #4]
   173f0:	str	r3, [r2, #4]
   173f4:	ldr	r3, [r6, #16]
   173f8:	add	r3, r3, r0
   173fc:	str	r3, [r6, #16]
   17400:	b	17378 <close_stdout@@Base+0x4bdc>
   17404:	add	r0, r6, #20
   17408:	bl	167c8 <close_stdout@@Base+0x402c>
   1740c:	vldr	s11, [r6, #8]
   17410:	vcvt.f32.u32	s15, s11
   17414:	ldr	r3, [r6, #20]
   17418:	vldr	s14, [r3, #8]
   1741c:	vldr	s11, [r6, #12]
   17420:	vmul.f32	s13, s14, s15
   17424:	vcvt.f32.u32	s12, s11
   17428:	vcmpe.f32	s12, s13
   1742c:	vmrs	APSR_nzcv, fpscr
   17430:	ble	173b8 <close_stdout@@Base+0x4c1c>
   17434:	ldrb	r2, [r3, #16]
   17438:	cmp	r2, #0
   1743c:	vldreq	s13, [r3, #12]
   17440:	vldrne	s14, [r3, #12]
   17444:	vmuleq.f32	s15, s15, s13
   17448:	vmul.f32	s15, s14, s15
   1744c:	vldr	s14, [pc, #128]	; 174d4 <close_stdout@@Base+0x4d38>
   17450:	vcmpe.f32	s15, s14
   17454:	vmrs	APSR_nzcv, fpscr
   17458:	bge	174c8 <close_stdout@@Base+0x4d2c>
   1745c:	vcvt.u32.f32	s15, s15
   17460:	mov	r0, r6
   17464:	vmov	r1, s15
   17468:	bl	1718c <close_stdout@@Base+0x49f0>
   1746c:	cmp	r0, #0
   17470:	beq	174c8 <close_stdout@@Base+0x4d2c>
   17474:	mov	r2, sp
   17478:	mov	r0, r6
   1747c:	mov	r1, r8
   17480:	mov	r3, #0
   17484:	bl	166cc <close_stdout@@Base+0x3f30>
   17488:	cmp	r0, #0
   1748c:	beq	173b8 <close_stdout@@Base+0x4c1c>
   17490:	bl	1159c <abort@plt>
   17494:	str	r8, [r3]
   17498:	mov	r0, #1
   1749c:	ldr	r2, [r6, #16]
   174a0:	ldr	r3, [r6, #12]
   174a4:	add	r2, r2, r0
   174a8:	str	r2, [r6, #16]
   174ac:	add	r3, r3, r0
   174b0:	str	r3, [r6, #12]
   174b4:	b	17378 <close_stdout@@Base+0x4bdc>
   174b8:	mov	r0, #8
   174bc:	bl	113f8 <malloc@plt>
   174c0:	subs	r3, r0, #0
   174c4:	bne	173dc <close_stdout@@Base+0x4c40>
   174c8:	mvn	r0, #0
   174cc:	b	17378 <close_stdout@@Base+0x4bdc>
   174d0:	bl	1132c <__stack_chk_fail@plt>
   174d4:	svcmi	0x00800000
   174d8:	andeq	r2, r1, ip, asr #25
   174dc:	andeq	r0, r0, ip, lsr r1
   174e0:	b	17324 <close_stdout@@Base+0x4b88>
   174e4:	ldr	r3, [pc, #100]	; 17550 <close_stdout@@Base+0x4db4>
   174e8:	ldr	ip, [pc, #100]	; 17554 <close_stdout@@Base+0x4db8>
   174ec:	add	r3, pc, r3
   174f0:	push	{r4, r5, lr}
   174f4:	sub	sp, sp, #12
   174f8:	ldr	r4, [r3, ip]
   174fc:	mov	r5, r1
   17500:	mov	r2, sp
   17504:	ldr	r3, [r4]
   17508:	str	r3, [sp, #4]
   1750c:	bl	17324 <close_stdout@@Base+0x4b88>
   17510:	cmn	r0, #1
   17514:	beq	17544 <close_stdout@@Base+0x4da8>
   17518:	cmp	r0, #0
   1751c:	movne	r0, r5
   17520:	beq	1753c <close_stdout@@Base+0x4da0>
   17524:	ldr	r2, [sp, #4]
   17528:	ldr	r3, [r4]
   1752c:	cmp	r2, r3
   17530:	bne	1754c <close_stdout@@Base+0x4db0>
   17534:	add	sp, sp, #12
   17538:	pop	{r4, r5, pc}
   1753c:	ldr	r0, [sp]
   17540:	b	17524 <close_stdout@@Base+0x4d88>
   17544:	mov	r0, #0
   17548:	b	17524 <close_stdout@@Base+0x4d88>
   1754c:	bl	1132c <__stack_chk_fail@plt>
   17550:	andeq	r2, r1, ip, lsl #22
   17554:	andeq	r0, r0, ip, lsr r1
   17558:	ldr	ip, [pc, #304]	; 17690 <close_stdout@@Base+0x4ef4>
   1755c:	mov	r3, #1
   17560:	push	{r4, r5, r6, r7, lr}
   17564:	add	ip, pc, ip
   17568:	ldr	lr, [pc, #292]	; 17694 <close_stdout@@Base+0x4ef8>
   1756c:	sub	sp, sp, #12
   17570:	mov	r4, r0
   17574:	mov	r2, sp
   17578:	ldr	r5, [ip, lr]
   1757c:	ldr	ip, [r5]
   17580:	str	ip, [sp, #4]
   17584:	bl	166cc <close_stdout@@Base+0x3f30>
   17588:	subs	r6, r0, #0
   1758c:	beq	175ac <close_stdout@@Base+0x4e10>
   17590:	ldr	r3, [sp]
   17594:	ldr	r2, [r4, #16]
   17598:	sub	r2, r2, #1
   1759c:	str	r2, [r4, #16]
   175a0:	ldr	r3, [r3]
   175a4:	cmp	r3, #0
   175a8:	beq	175c8 <close_stdout@@Base+0x4e2c>
   175ac:	ldr	r2, [sp, #4]
   175b0:	mov	r0, r6
   175b4:	ldr	r3, [r5]
   175b8:	cmp	r2, r3
   175bc:	bne	1768c <close_stdout@@Base+0x4ef0>
   175c0:	add	sp, sp, #12
   175c4:	pop	{r4, r5, r6, r7, pc}
   175c8:	vldr	s12, [r4, #8]
   175cc:	vcvt.f32.u32	s14, s12
   175d0:	ldr	r3, [r4, #12]
   175d4:	ldr	r2, [r4, #20]
   175d8:	sub	r3, r3, #1
   175dc:	str	r3, [r4, #12]
   175e0:	vldr	s15, [r2]
   175e4:	vmov	s13, r3
   175e8:	vmul.f32	s15, s14, s15
   175ec:	vcvt.f32.u32	s14, s13
   175f0:	vcmpe.f32	s14, s15
   175f4:	vmrs	APSR_nzcv, fpscr
   175f8:	bpl	175ac <close_stdout@@Base+0x4e10>
   175fc:	add	r0, r4, #20
   17600:	bl	167c8 <close_stdout@@Base+0x402c>
   17604:	vldr	s12, [r4, #8]
   17608:	vcvt.f32.u32	s15, s12
   1760c:	ldr	r3, [r4, #20]
   17610:	vldr	s14, [r3]
   17614:	vldr	s12, [r4, #12]
   17618:	vmul.f32	s14, s15, s14
   1761c:	vcvt.f32.u32	s13, s12
   17620:	vcmpe.f32	s13, s14
   17624:	vmrs	APSR_nzcv, fpscr
   17628:	bpl	175ac <close_stdout@@Base+0x4e10>
   1762c:	vldr	s14, [r3, #4]
   17630:	vmul.f32	s15, s15, s14
   17634:	ldrb	r2, [r3, #16]
   17638:	mov	r0, r4
   1763c:	cmp	r2, #0
   17640:	vldreq	s14, [r3, #8]
   17644:	vmuleq.f32	s15, s15, s14
   17648:	vcvt.u32.f32	s15, s15
   1764c:	vmov	r1, s15
   17650:	bl	1718c <close_stdout@@Base+0x49f0>
   17654:	cmp	r0, #0
   17658:	bne	175ac <close_stdout@@Base+0x4e10>
   1765c:	ldr	r0, [r4, #36]	; 0x24
   17660:	cmp	r0, #0
   17664:	bne	17670 <close_stdout@@Base+0x4ed4>
   17668:	b	17680 <close_stdout@@Base+0x4ee4>
   1766c:	mov	r0, r7
   17670:	ldr	r7, [r0, #4]
   17674:	bl	112c0 <free@plt>
   17678:	cmp	r7, #0
   1767c:	bne	1766c <close_stdout@@Base+0x4ed0>
   17680:	mov	r3, #0
   17684:	str	r3, [r4, #36]	; 0x24
   17688:	b	175ac <close_stdout@@Base+0x4e10>
   1768c:	bl	1132c <__stack_chk_fail@plt>
   17690:	muleq	r1, r4, sl
   17694:	andeq	r0, r0, ip, lsr r1
   17698:	ldr	r3, [pc, #984]	; 17a78 <close_stdout@@Base+0x52dc>
   1769c:	mov	r0, #14
   176a0:	ldr	r2, [pc, #980]	; 17a7c <close_stdout@@Base+0x52e0>
   176a4:	add	r3, pc, r3
   176a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176ac:	sub	sp, sp, #132	; 0x84
   176b0:	ldr	r6, [r3, r2]
   176b4:	ldr	r3, [r6]
   176b8:	str	r3, [sp, #124]	; 0x7c
   176bc:	bl	11554 <nl_langinfo@plt>
   176c0:	subs	r5, r0, #0
   176c4:	beq	17778 <close_stdout@@Base+0x4fdc>
   176c8:	ldr	r3, [pc, #944]	; 17a80 <close_stdout@@Base+0x52e4>
   176cc:	ldr	r4, [pc, r3]
   176d0:	cmp	r4, #0
   176d4:	beq	17784 <close_stdout@@Base+0x4fe8>
   176d8:	ldrb	r7, [r4]
   176dc:	cmp	r7, #0
   176e0:	bne	17714 <close_stdout@@Base+0x4f78>
   176e4:	b	1774c <close_stdout@@Base+0x4fb0>
   176e8:	mov	r0, r4
   176ec:	bl	11470 <strlen@plt>
   176f0:	add	r0, r0, #1
   176f4:	add	r7, r4, r0
   176f8:	mov	r0, r7
   176fc:	bl	11470 <strlen@plt>
   17700:	add	r0, r0, #1
   17704:	add	r4, r7, r0
   17708:	ldrb	r7, [r7, r0]
   1770c:	cmp	r7, #0
   17710:	beq	1774c <close_stdout@@Base+0x4fb0>
   17714:	mov	r0, r5
   17718:	mov	r1, r4
   1771c:	bl	11284 <strcmp@plt>
   17720:	cmp	r0, #0
   17724:	beq	1773c <close_stdout@@Base+0x4fa0>
   17728:	cmp	r7, #42	; 0x2a
   1772c:	bne	176e8 <close_stdout@@Base+0x4f4c>
   17730:	ldrb	r3, [r4, #1]
   17734:	cmp	r3, #0
   17738:	bne	176e8 <close_stdout@@Base+0x4f4c>
   1773c:	mov	r0, r4
   17740:	bl	11470 <strlen@plt>
   17744:	add	r0, r0, #1
   17748:	add	r5, r4, r0
   1774c:	ldrb	r3, [r5]
   17750:	cmp	r3, #0
   17754:	ldreq	r5, [pc, #808]	; 17a84 <close_stdout@@Base+0x52e8>
   17758:	addeq	r5, pc, r5
   1775c:	ldr	r2, [sp, #124]	; 0x7c
   17760:	mov	r0, r5
   17764:	ldr	r3, [r6]
   17768:	cmp	r2, r3
   1776c:	bne	17a4c <close_stdout@@Base+0x52b0>
   17770:	add	sp, sp, #132	; 0x84
   17774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17778:	ldr	r5, [pc, #776]	; 17a88 <close_stdout@@Base+0x52ec>
   1777c:	add	r5, pc, r5
   17780:	b	176c8 <close_stdout@@Base+0x4f2c>
   17784:	ldr	r0, [pc, #768]	; 17a8c <close_stdout@@Base+0x52f0>
   17788:	add	r0, pc, r0
   1778c:	bl	113ec <getenv@plt>
   17790:	subs	r8, r0, #0
   17794:	beq	17a24 <close_stdout@@Base+0x5288>
   17798:	ldrb	r3, [r8]
   1779c:	cmp	r3, #0
   177a0:	beq	179b8 <close_stdout@@Base+0x521c>
   177a4:	bl	11470 <strlen@plt>
   177a8:	subs	sl, r0, #0
   177ac:	subne	r3, sl, #1
   177b0:	bne	179c8 <close_stdout@@Base+0x522c>
   177b4:	mov	r9, #0
   177b8:	mov	fp, r9
   177bc:	add	r9, sl, r9
   177c0:	add	r0, r9, #14
   177c4:	bl	113f8 <malloc@plt>
   177c8:	subs	r7, r0, #0
   177cc:	beq	17a18 <close_stdout@@Base+0x527c>
   177d0:	mov	r1, r8
   177d4:	mov	r2, sl
   177d8:	bl	112e4 <memcpy@plt>
   177dc:	cmp	fp, #0
   177e0:	add	ip, r7, r9
   177e4:	movne	r3, #47	; 0x2f
   177e8:	strbne	r3, [r7, sl]
   177ec:	ldr	r3, [pc, #668]	; 17a90 <close_stdout@@Base+0x52f4>
   177f0:	add	r3, pc, r3
   177f4:	ldm	r3!, {r0, r1, r2}
   177f8:	ldrh	r3, [r3]
   177fc:	str	r0, [r7, r9]
   17800:	mov	r0, r7
   17804:	str	r1, [ip, #4]
   17808:	mov	r1, #32768	; 0x8000
   1780c:	strh	r3, [ip, #12]
   17810:	str	r2, [ip, #8]
   17814:	bl	113e0 <open64@plt>
   17818:	subs	r8, r0, #0
   1781c:	blt	179e0 <close_stdout@@Base+0x5244>
   17820:	ldr	r1, [pc, #620]	; 17a94 <close_stdout@@Base+0x52f8>
   17824:	add	r1, pc, r1
   17828:	bl	11254 <fdopen@plt>
   1782c:	subs	fp, r0, #0
   17830:	beq	17a38 <close_stdout@@Base+0x529c>
   17834:	ldr	r0, [pc, #604]	; 17a98 <close_stdout@@Base+0x52fc>
   17838:	add	sl, sp, #20
   1783c:	add	r9, sp, #72	; 0x48
   17840:	mov	r8, #0
   17844:	add	r0, pc, r0
   17848:	str	r0, [sp, #12]
   1784c:	ldr	r3, [fp, #4]
   17850:	ldr	r2, [fp, #8]
   17854:	cmp	r3, r2
   17858:	bcs	17944 <close_stdout@@Base+0x51a8>
   1785c:	add	r2, r3, #1
   17860:	str	r2, [fp, #4]
   17864:	ldrb	r0, [r3]
   17868:	cmp	r0, #32
   1786c:	beq	1784c <close_stdout@@Base+0x50b0>
   17870:	sub	r3, r0, #9
   17874:	cmp	r3, #1
   17878:	bls	1784c <close_stdout@@Base+0x50b0>
   1787c:	cmp	r0, #35	; 0x23
   17880:	beq	17958 <close_stdout@@Base+0x51bc>
   17884:	mov	r1, fp
   17888:	bl	11488 <ungetc@plt>
   1788c:	mov	r0, fp
   17890:	ldr	r1, [sp, #12]
   17894:	mov	r2, sl
   17898:	mov	r3, r9
   1789c:	bl	114dc <fscanf@plt>
   178a0:	cmp	r0, #1
   178a4:	ble	17988 <close_stdout@@Base+0x51ec>
   178a8:	mov	r0, sl
   178ac:	bl	11470 <strlen@plt>
   178b0:	str	r0, [sp, #8]
   178b4:	mov	r0, r9
   178b8:	bl	11470 <strlen@plt>
   178bc:	cmp	r8, #0
   178c0:	mov	r2, r0
   178c4:	bne	179ec <close_stdout@@Base+0x5250>
   178c8:	ldr	r3, [sp, #8]
   178cc:	str	r2, [sp]
   178d0:	add	r8, r0, r3
   178d4:	add	r0, r8, #3
   178d8:	add	r8, r8, #2
   178dc:	bl	113f8 <malloc@plt>
   178e0:	ldr	r2, [sp]
   178e4:	mov	r3, r0
   178e8:	cmp	r3, #0
   178ec:	beq	17a50 <close_stdout@@Base+0x52b4>
   178f0:	ldr	r0, [sp, #8]
   178f4:	movw	r1, #65534	; 0xfffe
   178f8:	movt	r1, #65535	; 0xffff
   178fc:	rsb	r2, r2, r8
   17900:	rsb	r1, r0, r1
   17904:	stm	sp, {r2, r3}
   17908:	add	r0, r1, r2
   1790c:	mov	r1, sl
   17910:	add	r0, r3, r0
   17914:	mov	r4, r3
   17918:	bl	11398 <strcpy@plt>
   1791c:	ldr	r2, [sp]
   17920:	ldr	r3, [sp, #4]
   17924:	mov	r1, r9
   17928:	sub	r0, r2, #1
   1792c:	add	r0, r3, r0
   17930:	bl	11398 <strcpy@plt>
   17934:	ldr	r3, [fp, #4]
   17938:	ldr	r2, [fp, #8]
   1793c:	cmp	r3, r2
   17940:	bcc	1785c <close_stdout@@Base+0x50c0>
   17944:	mov	r0, fp
   17948:	bl	11530 <__uflow@plt>
   1794c:	cmn	r0, #1
   17950:	beq	17988 <close_stdout@@Base+0x51ec>
   17954:	b	17868 <close_stdout@@Base+0x50cc>
   17958:	ldr	r3, [fp, #4]
   1795c:	ldr	r2, [fp, #8]
   17960:	cmp	r3, r2
   17964:	bcs	17a6c <close_stdout@@Base+0x52d0>
   17968:	add	r2, r3, #1
   1796c:	str	r2, [fp, #4]
   17970:	ldrb	r0, [r3]
   17974:	cmp	r0, #10
   17978:	cmnne	r0, #1
   1797c:	bne	17958 <close_stdout@@Base+0x51bc>
   17980:	cmn	r0, #1
   17984:	bne	1784c <close_stdout@@Base+0x50b0>
   17988:	mov	r0, fp
   1798c:	bl	16300 <close_stdout@@Base+0x3b64>
   17990:	cmp	r8, #0
   17994:	beq	179e0 <close_stdout@@Base+0x5244>
   17998:	mov	r3, #0
   1799c:	strb	r3, [r4, r8]
   179a0:	mov	r0, r7
   179a4:	bl	112c0 <free@plt>
   179a8:	ldr	r3, [pc, #236]	; 17a9c <close_stdout@@Base+0x5300>
   179ac:	add	r3, pc, r3
   179b0:	str	r4, [r3]
   179b4:	b	176d8 <close_stdout@@Base+0x4f3c>
   179b8:	ldr	r8, [pc, #224]	; 17aa0 <close_stdout@@Base+0x5304>
   179bc:	mov	r3, #7
   179c0:	mov	sl, #8
   179c4:	add	r8, pc, r8
   179c8:	ldrb	r3, [r8, r3]
   179cc:	cmp	r3, #47	; 0x2f
   179d0:	movne	r9, #1
   179d4:	movne	fp, r9
   179d8:	bne	177bc <close_stdout@@Base+0x5020>
   179dc:	b	177b4 <close_stdout@@Base+0x5018>
   179e0:	ldr	r4, [pc, #188]	; 17aa4 <close_stdout@@Base+0x5308>
   179e4:	add	r4, pc, r4
   179e8:	b	179a0 <close_stdout@@Base+0x5204>
   179ec:	ldr	r0, [sp, #8]
   179f0:	str	r2, [sp]
   179f4:	add	r3, r0, r2
   179f8:	mov	r0, r4
   179fc:	add	r8, r3, r8
   17a00:	add	r1, r8, #3
   17a04:	add	r8, r8, #2
   17a08:	bl	11344 <realloc@plt>
   17a0c:	ldr	r2, [sp]
   17a10:	mov	r3, r0
   17a14:	b	178e8 <close_stdout@@Base+0x514c>
   17a18:	ldr	r4, [pc, #136]	; 17aa8 <close_stdout@@Base+0x530c>
   17a1c:	add	r4, pc, r4
   17a20:	b	179a8 <close_stdout@@Base+0x520c>
   17a24:	ldr	r8, [pc, #128]	; 17aac <close_stdout@@Base+0x5310>
   17a28:	mov	r3, #7
   17a2c:	mov	sl, #8
   17a30:	add	r8, pc, r8
   17a34:	b	179c8 <close_stdout@@Base+0x522c>
   17a38:	ldr	r4, [pc, #112]	; 17ab0 <close_stdout@@Base+0x5314>
   17a3c:	mov	r0, r8
   17a40:	add	r4, pc, r4
   17a44:	bl	115a8 <close@plt>
   17a48:	b	179a0 <close_stdout@@Base+0x5204>
   17a4c:	bl	1132c <__stack_chk_fail@plt>
   17a50:	mov	r0, r4
   17a54:	ldr	r4, [pc, #88]	; 17ab4 <close_stdout@@Base+0x5318>
   17a58:	bl	112c0 <free@plt>
   17a5c:	mov	r0, fp
   17a60:	add	r4, pc, r4
   17a64:	bl	16300 <close_stdout@@Base+0x3b64>
   17a68:	b	179a0 <close_stdout@@Base+0x5204>
   17a6c:	mov	r0, fp
   17a70:	bl	11530 <__uflow@plt>
   17a74:	b	17974 <close_stdout@@Base+0x51d8>
   17a78:	andeq	r2, r1, r4, asr r9
   17a7c:	andeq	r0, r0, ip, lsr r1
   17a80:	andeq	r2, r1, r0, lsr ip
   17a84:	strdeq	r1, [r0], -r8
   17a88:	andeq	r1, r0, r4, lsr r5
   17a8c:	ldrdeq	r1, [r0], -r0
   17a90:	andeq	r1, r0, r8, ror fp
   17a94:	muleq	r0, r0, r5
   17a98:	andeq	r1, r0, r4, lsr fp
   17a9c:	andeq	r2, r1, r0, asr r9
   17aa0:	andeq	r1, r0, r0, lsl #19
   17aa4:	andeq	r1, r0, ip, asr #5
   17aa8:	muleq	r0, r4, r2
   17aac:	andeq	r1, r0, r4, lsl r9
   17ab0:	andeq	r1, r0, r0, ror r2
   17ab4:	andeq	r1, r0, r0, asr r2
   17ab8:	mov	r1, #0
   17abc:	mov	r2, #3
   17ac0:	b	17ac4 <close_stdout@@Base+0x5328>
   17ac4:	push	{r1, r2, r3}
   17ac8:	movw	ip, #1030	; 0x406
   17acc:	ldr	r3, [pc, #336]	; 17c24 <close_stdout@@Base+0x5488>
   17ad0:	push	{r4, r5, r6, r7, r8, lr}
   17ad4:	add	r3, pc, r3
   17ad8:	ldr	lr, [pc, #328]	; 17c28 <close_stdout@@Base+0x548c>
   17adc:	sub	sp, sp, #12
   17ae0:	add	r2, sp, #40	; 0x28
   17ae4:	mov	r6, r0
   17ae8:	ldr	r1, [sp, #36]	; 0x24
   17aec:	ldr	r4, [r3, lr]
   17af0:	cmp	r1, ip
   17af4:	str	r2, [sp]
   17af8:	ldr	r3, [r4]
   17afc:	str	r3, [sp, #4]
   17b00:	bne	17b84 <close_stdout@@Base+0x53e8>
   17b04:	ldr	r8, [pc, #288]	; 17c2c <close_stdout@@Base+0x5490>
   17b08:	add	r3, sp, #44	; 0x2c
   17b0c:	str	r3, [sp]
   17b10:	add	r8, pc, r8
   17b14:	ldr	r7, [sp, #40]	; 0x28
   17b18:	ldr	r3, [r8]
   17b1c:	mov	r2, r7
   17b20:	cmp	r3, #0
   17b24:	blt	17c10 <close_stdout@@Base+0x5474>
   17b28:	bl	11494 <fcntl@plt>
   17b2c:	subs	r5, r0, #0
   17b30:	blt	17b94 <close_stdout@@Base+0x53f8>
   17b34:	ldr	r3, [pc, #244]	; 17c30 <close_stdout@@Base+0x5494>
   17b38:	mov	r2, #1
   17b3c:	add	r3, pc, r3
   17b40:	str	r2, [r3]
   17b44:	cmp	r5, #0
   17b48:	blt	17b60 <close_stdout@@Base+0x53c4>
   17b4c:	ldr	r3, [pc, #224]	; 17c34 <close_stdout@@Base+0x5498>
   17b50:	add	r3, pc, r3
   17b54:	ldr	r3, [r3]
   17b58:	cmn	r3, #1
   17b5c:	beq	17bc4 <close_stdout@@Base+0x5428>
   17b60:	ldr	r2, [sp, #4]
   17b64:	mov	r0, r5
   17b68:	ldr	r3, [r4]
   17b6c:	cmp	r2, r3
   17b70:	bne	17c20 <close_stdout@@Base+0x5484>
   17b74:	add	sp, sp, #12
   17b78:	pop	{r4, r5, r6, r7, r8, lr}
   17b7c:	add	sp, sp, #12
   17b80:	bx	lr
   17b84:	ldr	r2, [sp, #40]	; 0x28
   17b88:	bl	11494 <fcntl@plt>
   17b8c:	mov	r5, r0
   17b90:	b	17b60 <close_stdout@@Base+0x53c4>
   17b94:	bl	114a0 <__errno_location@plt>
   17b98:	ldr	r3, [r0]
   17b9c:	cmp	r3, #22
   17ba0:	bne	17b34 <close_stdout@@Base+0x5398>
   17ba4:	mov	r0, r6
   17ba8:	mov	r2, r7
   17bac:	mov	r1, #0
   17bb0:	bl	17ac4 <close_stdout@@Base+0x5328>
   17bb4:	subs	r5, r0, #0
   17bb8:	blt	17b60 <close_stdout@@Base+0x53c4>
   17bbc:	mvn	r3, #0
   17bc0:	str	r3, [r8]
   17bc4:	mov	r0, r5
   17bc8:	mov	r1, #1
   17bcc:	bl	11494 <fcntl@plt>
   17bd0:	subs	r2, r0, #0
   17bd4:	blt	17bf0 <close_stdout@@Base+0x5454>
   17bd8:	orr	r2, r2, #1
   17bdc:	mov	r0, r5
   17be0:	mov	r1, #2
   17be4:	bl	11494 <fcntl@plt>
   17be8:	cmn	r0, #1
   17bec:	bne	17b60 <close_stdout@@Base+0x53c4>
   17bf0:	bl	114a0 <__errno_location@plt>
   17bf4:	ldr	r7, [r0]
   17bf8:	mov	r6, r0
   17bfc:	mov	r0, r5
   17c00:	mvn	r5, #0
   17c04:	bl	115a8 <close@plt>
   17c08:	str	r7, [r6]
   17c0c:	b	17b60 <close_stdout@@Base+0x53c4>
   17c10:	mov	r1, #0
   17c14:	bl	17ac4 <close_stdout@@Base+0x5328>
   17c18:	mov	r5, r0
   17c1c:	b	17b44 <close_stdout@@Base+0x53a8>
   17c20:	bl	1132c <__stack_chk_fail@plt>
   17c24:	andeq	r2, r1, r4, lsr #10
   17c28:	andeq	r0, r0, ip, lsr r1
   17c2c:	strdeq	r2, [r1], -r0
   17c30:	andeq	r2, r1, r4, asr #15
   17c34:			; <UNDEFINED> instruction: 0x000127b0
   17c38:	subs	r2, r1, #1
   17c3c:	bxeq	lr
   17c40:	bcc	17e18 <close_stdout@@Base+0x567c>
   17c44:	cmp	r0, r1
   17c48:	bls	17dfc <close_stdout@@Base+0x5660>
   17c4c:	tst	r1, r2
   17c50:	beq	17e08 <close_stdout@@Base+0x566c>
   17c54:	clz	r3, r0
   17c58:	clz	r2, r1
   17c5c:	sub	r3, r2, r3
   17c60:	rsbs	r3, r3, #31
   17c64:	addne	r3, r3, r3, lsl #1
   17c68:	mov	r2, #0
   17c6c:	addne	pc, pc, r3, lsl #2
   17c70:	nop	{0}
   17c74:	cmp	r0, r1, lsl #31
   17c78:	adc	r2, r2, r2
   17c7c:	subcs	r0, r0, r1, lsl #31
   17c80:	cmp	r0, r1, lsl #30
   17c84:	adc	r2, r2, r2
   17c88:	subcs	r0, r0, r1, lsl #30
   17c8c:	cmp	r0, r1, lsl #29
   17c90:	adc	r2, r2, r2
   17c94:	subcs	r0, r0, r1, lsl #29
   17c98:	cmp	r0, r1, lsl #28
   17c9c:	adc	r2, r2, r2
   17ca0:	subcs	r0, r0, r1, lsl #28
   17ca4:	cmp	r0, r1, lsl #27
   17ca8:	adc	r2, r2, r2
   17cac:	subcs	r0, r0, r1, lsl #27
   17cb0:	cmp	r0, r1, lsl #26
   17cb4:	adc	r2, r2, r2
   17cb8:	subcs	r0, r0, r1, lsl #26
   17cbc:	cmp	r0, r1, lsl #25
   17cc0:	adc	r2, r2, r2
   17cc4:	subcs	r0, r0, r1, lsl #25
   17cc8:	cmp	r0, r1, lsl #24
   17ccc:	adc	r2, r2, r2
   17cd0:	subcs	r0, r0, r1, lsl #24
   17cd4:	cmp	r0, r1, lsl #23
   17cd8:	adc	r2, r2, r2
   17cdc:	subcs	r0, r0, r1, lsl #23
   17ce0:	cmp	r0, r1, lsl #22
   17ce4:	adc	r2, r2, r2
   17ce8:	subcs	r0, r0, r1, lsl #22
   17cec:	cmp	r0, r1, lsl #21
   17cf0:	adc	r2, r2, r2
   17cf4:	subcs	r0, r0, r1, lsl #21
   17cf8:	cmp	r0, r1, lsl #20
   17cfc:	adc	r2, r2, r2
   17d00:	subcs	r0, r0, r1, lsl #20
   17d04:	cmp	r0, r1, lsl #19
   17d08:	adc	r2, r2, r2
   17d0c:	subcs	r0, r0, r1, lsl #19
   17d10:	cmp	r0, r1, lsl #18
   17d14:	adc	r2, r2, r2
   17d18:	subcs	r0, r0, r1, lsl #18
   17d1c:	cmp	r0, r1, lsl #17
   17d20:	adc	r2, r2, r2
   17d24:	subcs	r0, r0, r1, lsl #17
   17d28:	cmp	r0, r1, lsl #16
   17d2c:	adc	r2, r2, r2
   17d30:	subcs	r0, r0, r1, lsl #16
   17d34:	cmp	r0, r1, lsl #15
   17d38:	adc	r2, r2, r2
   17d3c:	subcs	r0, r0, r1, lsl #15
   17d40:	cmp	r0, r1, lsl #14
   17d44:	adc	r2, r2, r2
   17d48:	subcs	r0, r0, r1, lsl #14
   17d4c:	cmp	r0, r1, lsl #13
   17d50:	adc	r2, r2, r2
   17d54:	subcs	r0, r0, r1, lsl #13
   17d58:	cmp	r0, r1, lsl #12
   17d5c:	adc	r2, r2, r2
   17d60:	subcs	r0, r0, r1, lsl #12
   17d64:	cmp	r0, r1, lsl #11
   17d68:	adc	r2, r2, r2
   17d6c:	subcs	r0, r0, r1, lsl #11
   17d70:	cmp	r0, r1, lsl #10
   17d74:	adc	r2, r2, r2
   17d78:	subcs	r0, r0, r1, lsl #10
   17d7c:	cmp	r0, r1, lsl #9
   17d80:	adc	r2, r2, r2
   17d84:	subcs	r0, r0, r1, lsl #9
   17d88:	cmp	r0, r1, lsl #8
   17d8c:	adc	r2, r2, r2
   17d90:	subcs	r0, r0, r1, lsl #8
   17d94:	cmp	r0, r1, lsl #7
   17d98:	adc	r2, r2, r2
   17d9c:	subcs	r0, r0, r1, lsl #7
   17da0:	cmp	r0, r1, lsl #6
   17da4:	adc	r2, r2, r2
   17da8:	subcs	r0, r0, r1, lsl #6
   17dac:	cmp	r0, r1, lsl #5
   17db0:	adc	r2, r2, r2
   17db4:	subcs	r0, r0, r1, lsl #5
   17db8:	cmp	r0, r1, lsl #4
   17dbc:	adc	r2, r2, r2
   17dc0:	subcs	r0, r0, r1, lsl #4
   17dc4:	cmp	r0, r1, lsl #3
   17dc8:	adc	r2, r2, r2
   17dcc:	subcs	r0, r0, r1, lsl #3
   17dd0:	cmp	r0, r1, lsl #2
   17dd4:	adc	r2, r2, r2
   17dd8:	subcs	r0, r0, r1, lsl #2
   17ddc:	cmp	r0, r1, lsl #1
   17de0:	adc	r2, r2, r2
   17de4:	subcs	r0, r0, r1, lsl #1
   17de8:	cmp	r0, r1
   17dec:	adc	r2, r2, r2
   17df0:	subcs	r0, r0, r1
   17df4:	mov	r0, r2
   17df8:	bx	lr
   17dfc:	moveq	r0, #1
   17e00:	movne	r0, #0
   17e04:	bx	lr
   17e08:	clz	r2, r1
   17e0c:	rsb	r2, r2, #31
   17e10:	lsr	r0, r0, r2
   17e14:	bx	lr
   17e18:	cmp	r0, #0
   17e1c:	mvnne	r0, #0
   17e20:	b	17e80 <close_stdout@@Base+0x56e4>
   17e24:	cmp	r1, #0
   17e28:	beq	17e18 <close_stdout@@Base+0x567c>
   17e2c:	push	{r0, r1, lr}
   17e30:	bl	17c38 <close_stdout@@Base+0x549c>
   17e34:	pop	{r1, r2, lr}
   17e38:	mul	r3, r2, r0
   17e3c:	sub	r1, r1, r3
   17e40:	bx	lr
   17e44:	cmp	r3, #0
   17e48:	cmpeq	r2, #0
   17e4c:	bne	17e64 <close_stdout@@Base+0x56c8>
   17e50:	cmp	r1, #0
   17e54:	cmpeq	r0, #0
   17e58:	mvnne	r1, #0
   17e5c:	mvnne	r0, #0
   17e60:	b	17e80 <close_stdout@@Base+0x56e4>
   17e64:	sub	sp, sp, #8
   17e68:	push	{sp, lr}
   17e6c:	bl	17ecc <close_stdout@@Base+0x5730>
   17e70:	ldr	lr, [sp, #4]
   17e74:	add	sp, sp, #8
   17e78:	pop	{r2, r3}
   17e7c:	bx	lr
   17e80:	push	{r1, lr}
   17e84:	mov	r0, #8
   17e88:	bl	11278 <raise@plt>
   17e8c:	pop	{r1, pc}
   17e90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e94:	mov	r8, r2
   17e98:	mov	r6, r0
   17e9c:	mov	r7, r1
   17ea0:	mov	sl, r3
   17ea4:	ldr	r9, [sp, #32]
   17ea8:	bl	17f08 <close_stdout@@Base+0x576c>
   17eac:	umull	r4, r5, r8, r0
   17eb0:	mul	r8, r8, r1
   17eb4:	mla	r2, r0, sl, r8
   17eb8:	add	r5, r2, r5
   17ebc:	subs	r4, r6, r4
   17ec0:	sbc	r5, r7, r5
   17ec4:	strd	r4, [r9]
   17ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ecc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17ed0:	mov	r8, r2
   17ed4:	mov	r6, r0
   17ed8:	mov	r7, r1
   17edc:	mov	r5, r3
   17ee0:	ldr	r9, [sp, #32]
   17ee4:	bl	18394 <close_stdout@@Base+0x5bf8>
   17ee8:	mul	r3, r0, r5
   17eec:	umull	r4, r5, r0, r8
   17ef0:	mla	r8, r8, r1, r3
   17ef4:	add	r5, r8, r5
   17ef8:	subs	r4, r6, r4
   17efc:	sbc	r5, r7, r5
   17f00:	strd	r4, [r9]
   17f04:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f0c:	rsbs	r4, r0, #0
   17f10:	rsc	r5, r1, #0
   17f14:	cmp	r1, #0
   17f18:	mvn	r6, #0
   17f1c:	sub	sp, sp, #12
   17f20:	movge	r4, r0
   17f24:	movge	r5, r1
   17f28:	movge	r6, #0
   17f2c:	cmp	r3, #0
   17f30:	blt	18168 <close_stdout@@Base+0x59cc>
   17f34:	cmp	r3, #0
   17f38:	mov	sl, r4
   17f3c:	mov	ip, r5
   17f40:	mov	r0, r2
   17f44:	mov	r1, r3
   17f48:	mov	r8, r2
   17f4c:	mov	r7, r4
   17f50:	mov	r9, r5
   17f54:	bne	1804c <close_stdout@@Base+0x58b0>
   17f58:	cmp	r2, r5
   17f5c:	bls	18088 <close_stdout@@Base+0x58ec>
   17f60:	clz	r3, r2
   17f64:	cmp	r3, #0
   17f68:	rsbne	r2, r3, #32
   17f6c:	lslne	r8, r0, r3
   17f70:	lsrne	r2, r4, r2
   17f74:	lslne	r7, r4, r3
   17f78:	orrne	r9, r2, r5, lsl r3
   17f7c:	lsr	r4, r8, #16
   17f80:	uxth	sl, r8
   17f84:	mov	r1, r4
   17f88:	mov	r0, r9
   17f8c:	bl	17c38 <close_stdout@@Base+0x549c>
   17f90:	mov	r1, r4
   17f94:	mov	fp, r0
   17f98:	mov	r0, r9
   17f9c:	bl	17e24 <close_stdout@@Base+0x5688>
   17fa0:	mul	r0, sl, fp
   17fa4:	lsr	r2, r7, #16
   17fa8:	orr	r1, r2, r1, lsl #16
   17fac:	cmp	r0, r1
   17fb0:	bls	17fd4 <close_stdout@@Base+0x5838>
   17fb4:	adds	r1, r1, r8
   17fb8:	sub	r3, fp, #1
   17fbc:	bcs	17fd0 <close_stdout@@Base+0x5834>
   17fc0:	cmp	r0, r1
   17fc4:	subhi	fp, fp, #2
   17fc8:	addhi	r1, r1, r8
   17fcc:	bhi	17fd4 <close_stdout@@Base+0x5838>
   17fd0:	mov	fp, r3
   17fd4:	rsb	r9, r0, r1
   17fd8:	mov	r1, r4
   17fdc:	uxth	r7, r7
   17fe0:	mov	r0, r9
   17fe4:	bl	17c38 <close_stdout@@Base+0x549c>
   17fe8:	mov	r1, r4
   17fec:	mov	r5, r0
   17ff0:	mov	r0, r9
   17ff4:	bl	17e24 <close_stdout@@Base+0x5688>
   17ff8:	mul	sl, sl, r5
   17ffc:	orr	r1, r7, r1, lsl #16
   18000:	cmp	sl, r1
   18004:	bls	18024 <close_stdout@@Base+0x5888>
   18008:	adds	r8, r1, r8
   1800c:	sub	r3, r5, #1
   18010:	bcs	18020 <close_stdout@@Base+0x5884>
   18014:	cmp	sl, r8
   18018:	subhi	r5, r5, #2
   1801c:	bhi	18024 <close_stdout@@Base+0x5888>
   18020:	mov	r5, r3
   18024:	orr	r3, r5, fp, lsl #16
   18028:	mov	r4, #0
   1802c:	cmp	r6, #0
   18030:	mov	r0, r3
   18034:	mov	r1, r4
   18038:	beq	18044 <close_stdout@@Base+0x58a8>
   1803c:	rsbs	r0, r0, #0
   18040:	rsc	r1, r1, #0
   18044:	add	sp, sp, #12
   18048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1804c:	cmp	r3, r5
   18050:	movhi	r4, #0
   18054:	movhi	r3, r4
   18058:	bhi	1802c <close_stdout@@Base+0x5890>
   1805c:	clz	r5, r1
   18060:	cmp	r5, #0
   18064:	bne	18254 <close_stdout@@Base+0x5ab8>
   18068:	cmp	r1, ip
   1806c:	cmpcs	r2, sl
   18070:	movhi	r4, #0
   18074:	movls	r4, #1
   18078:	movls	r3, #1
   1807c:	movls	r4, r5
   18080:	movhi	r3, r4
   18084:	b	1802c <close_stdout@@Base+0x5890>
   18088:	cmp	r2, #0
   1808c:	bne	180a0 <close_stdout@@Base+0x5904>
   18090:	mov	r1, r2
   18094:	mov	r0, #1
   18098:	bl	17c38 <close_stdout@@Base+0x549c>
   1809c:	mov	r8, r0
   180a0:	clz	r3, r8
   180a4:	cmp	r3, #0
   180a8:	bne	18178 <close_stdout@@Base+0x59dc>
   180ac:	rsb	r9, r8, r9
   180b0:	lsr	r5, r8, #16
   180b4:	uxth	sl, r8
   180b8:	mov	r4, #1
   180bc:	mov	r1, r5
   180c0:	mov	r0, r9
   180c4:	bl	17c38 <close_stdout@@Base+0x549c>
   180c8:	mov	r1, r5
   180cc:	mov	fp, r0
   180d0:	mov	r0, r9
   180d4:	bl	17e24 <close_stdout@@Base+0x5688>
   180d8:	mul	r0, sl, fp
   180dc:	lsr	r2, r7, #16
   180e0:	orr	r1, r2, r1, lsl #16
   180e4:	cmp	r0, r1
   180e8:	bls	18108 <close_stdout@@Base+0x596c>
   180ec:	adds	r1, r1, r8
   180f0:	sub	r3, fp, #1
   180f4:	bcs	18374 <close_stdout@@Base+0x5bd8>
   180f8:	cmp	r0, r1
   180fc:	subhi	fp, fp, #2
   18100:	addhi	r1, r1, r8
   18104:	bls	18374 <close_stdout@@Base+0x5bd8>
   18108:	rsb	r2, r0, r1
   1810c:	mov	r1, r5
   18110:	str	r2, [sp]
   18114:	uxth	r7, r7
   18118:	mov	r0, r2
   1811c:	bl	17c38 <close_stdout@@Base+0x549c>
   18120:	ldr	r2, [sp]
   18124:	mov	r1, r5
   18128:	mov	r9, r0
   1812c:	mov	r0, r2
   18130:	bl	17e24 <close_stdout@@Base+0x5688>
   18134:	mul	sl, sl, r9
   18138:	orr	r1, r7, r1, lsl #16
   1813c:	cmp	sl, r1
   18140:	bls	18160 <close_stdout@@Base+0x59c4>
   18144:	adds	r8, r1, r8
   18148:	sub	r3, r9, #1
   1814c:	bcs	1815c <close_stdout@@Base+0x59c0>
   18150:	cmp	sl, r8
   18154:	subhi	r9, r9, #2
   18158:	bhi	18160 <close_stdout@@Base+0x59c4>
   1815c:	mov	r9, r3
   18160:	orr	r3, r9, fp, lsl #16
   18164:	b	1802c <close_stdout@@Base+0x5890>
   18168:	mvn	r6, r6
   1816c:	rsbs	r2, r2, #0
   18170:	rsc	r3, r3, #0
   18174:	b	17f34 <close_stdout@@Base+0x5798>
   18178:	lsl	r8, r8, r3
   1817c:	rsb	fp, r3, #32
   18180:	lsr	r4, r9, fp
   18184:	lsr	fp, r7, fp
   18188:	lsr	r5, r8, #16
   1818c:	orr	fp, fp, r9, lsl r3
   18190:	mov	r0, r4
   18194:	lsl	r7, r7, r3
   18198:	mov	r1, r5
   1819c:	uxth	sl, r8
   181a0:	bl	17c38 <close_stdout@@Base+0x549c>
   181a4:	mov	r1, r5
   181a8:	mov	r3, r0
   181ac:	mov	r0, r4
   181b0:	str	r3, [sp]
   181b4:	bl	17e24 <close_stdout@@Base+0x5688>
   181b8:	ldr	r3, [sp]
   181bc:	lsr	r2, fp, #16
   181c0:	mul	r0, sl, r3
   181c4:	orr	r1, r2, r1, lsl #16
   181c8:	cmp	r0, r1
   181cc:	bls	181ec <close_stdout@@Base+0x5a50>
   181d0:	adds	r1, r1, r8
   181d4:	sub	r2, r3, #1
   181d8:	bcs	1838c <close_stdout@@Base+0x5bf0>
   181dc:	cmp	r0, r1
   181e0:	subhi	r3, r3, #2
   181e4:	addhi	r1, r1, r8
   181e8:	bls	1838c <close_stdout@@Base+0x5bf0>
   181ec:	rsb	r9, r0, r1
   181f0:	mov	r1, r5
   181f4:	str	r3, [sp]
   181f8:	uxth	fp, fp
   181fc:	mov	r0, r9
   18200:	bl	17c38 <close_stdout@@Base+0x549c>
   18204:	mov	r1, r5
   18208:	mov	r4, r0
   1820c:	mov	r0, r9
   18210:	bl	17e24 <close_stdout@@Base+0x5688>
   18214:	mul	r9, sl, r4
   18218:	ldr	r3, [sp]
   1821c:	orr	r1, fp, r1, lsl #16
   18220:	cmp	r9, r1
   18224:	bls	18248 <close_stdout@@Base+0x5aac>
   18228:	adds	r1, r1, r8
   1822c:	sub	r2, r4, #1
   18230:	bcs	18244 <close_stdout@@Base+0x5aa8>
   18234:	cmp	r9, r1
   18238:	subhi	r4, r4, #2
   1823c:	addhi	r1, r1, r8
   18240:	bhi	18248 <close_stdout@@Base+0x5aac>
   18244:	mov	r4, r2
   18248:	rsb	r9, r9, r1
   1824c:	orr	r4, r4, r3, lsl #16
   18250:	b	180bc <close_stdout@@Base+0x5920>
   18254:	rsb	sl, r5, #32
   18258:	lsl	r3, r2, r5
   1825c:	lsr	r0, r2, sl
   18260:	lsr	r2, ip, sl
   18264:	orr	r4, r0, r1, lsl r5
   18268:	lsr	sl, r7, sl
   1826c:	mov	r0, r2
   18270:	orr	sl, sl, ip, lsl r5
   18274:	lsr	r9, r4, #16
   18278:	str	r3, [sp, #4]
   1827c:	str	r2, [sp]
   18280:	uxth	fp, r4
   18284:	mov	r1, r9
   18288:	bl	17c38 <close_stdout@@Base+0x549c>
   1828c:	ldr	r2, [sp]
   18290:	mov	r1, r9
   18294:	mov	r8, r0
   18298:	mov	r0, r2
   1829c:	bl	17e24 <close_stdout@@Base+0x5688>
   182a0:	mul	r0, fp, r8
   182a4:	lsr	r2, sl, #16
   182a8:	orr	r1, r2, r1, lsl #16
   182ac:	cmp	r0, r1
   182b0:	bls	182d0 <close_stdout@@Base+0x5b34>
   182b4:	adds	r1, r1, r4
   182b8:	sub	r2, r8, #1
   182bc:	bcs	18384 <close_stdout@@Base+0x5be8>
   182c0:	cmp	r0, r1
   182c4:	subhi	r8, r8, #2
   182c8:	addhi	r1, r1, r4
   182cc:	bls	18384 <close_stdout@@Base+0x5be8>
   182d0:	rsb	ip, r0, r1
   182d4:	mov	r1, r9
   182d8:	str	ip, [sp]
   182dc:	mov	r0, ip
   182e0:	bl	17c38 <close_stdout@@Base+0x549c>
   182e4:	ldr	ip, [sp]
   182e8:	mov	r1, r9
   182ec:	mov	r2, r0
   182f0:	mov	r0, ip
   182f4:	str	r2, [sp]
   182f8:	bl	17e24 <close_stdout@@Base+0x5688>
   182fc:	ldr	r2, [sp]
   18300:	uxth	ip, sl
   18304:	mul	fp, fp, r2
   18308:	orr	ip, ip, r1, lsl #16
   1830c:	cmp	fp, ip
   18310:	bls	18330 <close_stdout@@Base+0x5b94>
   18314:	adds	ip, ip, r4
   18318:	sub	r1, r2, #1
   1831c:	bcs	1837c <close_stdout@@Base+0x5be0>
   18320:	cmp	fp, ip
   18324:	subhi	r2, r2, #2
   18328:	addhi	ip, ip, r4
   1832c:	bls	1837c <close_stdout@@Base+0x5be0>
   18330:	ldr	r0, [sp, #4]
   18334:	orr	r1, r2, r8, lsl #16
   18338:	rsb	fp, fp, ip
   1833c:	umull	r2, r3, r1, r0
   18340:	cmp	fp, r3
   18344:	bcc	18368 <close_stdout@@Base+0x5bcc>
   18348:	movne	r4, #0
   1834c:	moveq	r4, #1
   18350:	cmp	r2, r7, lsl r5
   18354:	movls	r4, #0
   18358:	andhi	r4, r4, #1
   1835c:	cmp	r4, #0
   18360:	moveq	r3, r1
   18364:	beq	1802c <close_stdout@@Base+0x5890>
   18368:	sub	r3, r1, #1
   1836c:	mov	r4, #0
   18370:	b	1802c <close_stdout@@Base+0x5890>
   18374:	mov	fp, r3
   18378:	b	18108 <close_stdout@@Base+0x596c>
   1837c:	mov	r2, r1
   18380:	b	18330 <close_stdout@@Base+0x5b94>
   18384:	mov	r8, r2
   18388:	b	182d0 <close_stdout@@Base+0x5b34>
   1838c:	mov	r3, r2
   18390:	b	181ec <close_stdout@@Base+0x5a50>
   18394:	cmp	r3, #0
   18398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1839c:	mov	r6, r0
   183a0:	sub	sp, sp, #12
   183a4:	mov	r5, r1
   183a8:	mov	r7, r0
   183ac:	mov	r4, r2
   183b0:	mov	r8, r1
   183b4:	bne	18494 <close_stdout@@Base+0x5cf8>
   183b8:	cmp	r2, r1
   183bc:	bls	184d0 <close_stdout@@Base+0x5d34>
   183c0:	clz	r3, r2
   183c4:	cmp	r3, #0
   183c8:	rsbne	r8, r3, #32
   183cc:	lslne	r4, r2, r3
   183d0:	lsrne	r8, r0, r8
   183d4:	lslne	r7, r0, r3
   183d8:	orrne	r8, r8, r1, lsl r3
   183dc:	lsr	r5, r4, #16
   183e0:	uxth	sl, r4
   183e4:	mov	r1, r5
   183e8:	mov	r0, r8
   183ec:	bl	17c38 <close_stdout@@Base+0x549c>
   183f0:	mov	r1, r5
   183f4:	mov	r9, r0
   183f8:	mov	r0, r8
   183fc:	bl	17e24 <close_stdout@@Base+0x5688>
   18400:	mul	r0, sl, r9
   18404:	lsr	r3, r7, #16
   18408:	orr	r1, r3, r1, lsl #16
   1840c:	cmp	r0, r1
   18410:	bls	18434 <close_stdout@@Base+0x5c98>
   18414:	adds	r1, r1, r4
   18418:	sub	r2, r9, #1
   1841c:	bcs	18430 <close_stdout@@Base+0x5c94>
   18420:	cmp	r0, r1
   18424:	subhi	r9, r9, #2
   18428:	addhi	r1, r1, r4
   1842c:	bhi	18434 <close_stdout@@Base+0x5c98>
   18430:	mov	r9, r2
   18434:	rsb	r8, r0, r1
   18438:	mov	r1, r5
   1843c:	uxth	r7, r7
   18440:	mov	r0, r8
   18444:	bl	17c38 <close_stdout@@Base+0x549c>
   18448:	mov	r1, r5
   1844c:	mov	r6, r0
   18450:	mov	r0, r8
   18454:	bl	17e24 <close_stdout@@Base+0x5688>
   18458:	mul	sl, sl, r6
   1845c:	orr	r1, r7, r1, lsl #16
   18460:	cmp	sl, r1
   18464:	bls	18480 <close_stdout@@Base+0x5ce4>
   18468:	adds	r4, r1, r4
   1846c:	sub	r3, r6, #1
   18470:	bcs	1877c <close_stdout@@Base+0x5fe0>
   18474:	cmp	sl, r4
   18478:	subhi	r6, r6, #2
   1847c:	bls	1877c <close_stdout@@Base+0x5fe0>
   18480:	orr	r0, r6, r9, lsl #16
   18484:	mov	r6, #0
   18488:	mov	r1, r6
   1848c:	add	sp, sp, #12
   18490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18494:	cmp	r3, r1
   18498:	movhi	r6, #0
   1849c:	movhi	r0, r6
   184a0:	bhi	18488 <close_stdout@@Base+0x5cec>
   184a4:	clz	r7, r3
   184a8:	cmp	r7, #0
   184ac:	bne	185ac <close_stdout@@Base+0x5e10>
   184b0:	cmp	r3, r1
   184b4:	cmpcs	r2, r6
   184b8:	movhi	r6, #0
   184bc:	movls	r6, #1
   184c0:	movls	r0, #1
   184c4:	movls	r6, r7
   184c8:	movhi	r0, r6
   184cc:	b	18488 <close_stdout@@Base+0x5cec>
   184d0:	cmp	r2, #0
   184d4:	bne	184e8 <close_stdout@@Base+0x5d4c>
   184d8:	mov	r1, r2
   184dc:	mov	r0, #1
   184e0:	bl	17c38 <close_stdout@@Base+0x549c>
   184e4:	mov	r4, r0
   184e8:	clz	r3, r4
   184ec:	cmp	r3, #0
   184f0:	bne	186a8 <close_stdout@@Base+0x5f0c>
   184f4:	rsb	r5, r4, r5
   184f8:	lsr	r8, r4, #16
   184fc:	uxth	sl, r4
   18500:	mov	r6, #1
   18504:	mov	r1, r8
   18508:	mov	r0, r5
   1850c:	bl	17c38 <close_stdout@@Base+0x549c>
   18510:	mov	r1, r8
   18514:	mov	r9, r0
   18518:	mov	r0, r5
   1851c:	bl	17e24 <close_stdout@@Base+0x5688>
   18520:	mul	r0, sl, r9
   18524:	lsr	r3, r7, #16
   18528:	orr	r1, r3, r1, lsl #16
   1852c:	cmp	r0, r1
   18530:	bls	18550 <close_stdout@@Base+0x5db4>
   18534:	adds	r1, r1, r4
   18538:	sub	r2, r9, #1
   1853c:	bcs	18784 <close_stdout@@Base+0x5fe8>
   18540:	cmp	r0, r1
   18544:	subhi	r9, r9, #2
   18548:	addhi	r1, r1, r4
   1854c:	bls	18784 <close_stdout@@Base+0x5fe8>
   18550:	rsb	fp, r0, r1
   18554:	mov	r1, r8
   18558:	uxth	r7, r7
   1855c:	mov	r0, fp
   18560:	bl	17c38 <close_stdout@@Base+0x549c>
   18564:	mov	r1, r8
   18568:	mov	r5, r0
   1856c:	mov	r0, fp
   18570:	bl	17e24 <close_stdout@@Base+0x5688>
   18574:	mul	sl, sl, r5
   18578:	orr	r1, r7, r1, lsl #16
   1857c:	cmp	sl, r1
   18580:	bls	1859c <close_stdout@@Base+0x5e00>
   18584:	adds	r4, r1, r4
   18588:	sub	r3, r5, #1
   1858c:	bcs	1878c <close_stdout@@Base+0x5ff0>
   18590:	cmp	sl, r4
   18594:	subhi	r5, r5, #2
   18598:	bls	1878c <close_stdout@@Base+0x5ff0>
   1859c:	orr	r0, r5, r9, lsl #16
   185a0:	mov	r1, r6
   185a4:	add	sp, sp, #12
   185a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ac:	rsb	r1, r7, #32
   185b0:	lsl	r0, r2, r7
   185b4:	lsr	r2, r2, r1
   185b8:	lsr	fp, r5, r1
   185bc:	orr	r8, r2, r3, lsl r7
   185c0:	lsr	r1, r6, r1
   185c4:	str	r0, [sp, #4]
   185c8:	orr	r5, r1, r5, lsl r7
   185cc:	lsr	r9, r8, #16
   185d0:	mov	r0, fp
   185d4:	uxth	sl, r8
   185d8:	mov	r1, r9
   185dc:	bl	17c38 <close_stdout@@Base+0x549c>
   185e0:	mov	r1, r9
   185e4:	mov	r4, r0
   185e8:	mov	r0, fp
   185ec:	bl	17e24 <close_stdout@@Base+0x5688>
   185f0:	mul	r0, sl, r4
   185f4:	lsr	ip, r5, #16
   185f8:	orr	r1, ip, r1, lsl #16
   185fc:	cmp	r0, r1
   18600:	bls	18614 <close_stdout@@Base+0x5e78>
   18604:	adds	r1, r1, r8
   18608:	sub	r2, r4, #1
   1860c:	bcc	187a8 <close_stdout@@Base+0x600c>
   18610:	mov	r4, r2
   18614:	rsb	ip, r0, r1
   18618:	mov	r1, r9
   1861c:	str	ip, [sp]
   18620:	uxth	r5, r5
   18624:	mov	r0, ip
   18628:	bl	17c38 <close_stdout@@Base+0x549c>
   1862c:	ldr	ip, [sp]
   18630:	mov	r1, r9
   18634:	mov	fp, r0
   18638:	mov	r0, ip
   1863c:	bl	17e24 <close_stdout@@Base+0x5688>
   18640:	mul	sl, sl, fp
   18644:	orr	r1, r5, r1, lsl #16
   18648:	cmp	sl, r1
   1864c:	bls	18660 <close_stdout@@Base+0x5ec4>
   18650:	adds	r1, r1, r8
   18654:	sub	r2, fp, #1
   18658:	bcc	18794 <close_stdout@@Base+0x5ff8>
   1865c:	mov	fp, r2
   18660:	ldr	r3, [sp, #4]
   18664:	orr	r0, fp, r4, lsl #16
   18668:	rsb	sl, sl, r1
   1866c:	umull	r4, r5, r0, r3
   18670:	cmp	sl, r5
   18674:	bcc	18694 <close_stdout@@Base+0x5ef8>
   18678:	movne	r3, #0
   1867c:	moveq	r3, #1
   18680:	cmp	r4, r6, lsl r7
   18684:	movls	r6, #0
   18688:	andhi	r6, r3, #1
   1868c:	cmp	r6, #0
   18690:	beq	18488 <close_stdout@@Base+0x5cec>
   18694:	mov	r6, #0
   18698:	sub	r0, r0, #1
   1869c:	mov	r1, r6
   186a0:	add	sp, sp, #12
   186a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a8:	lsl	r4, r4, r3
   186ac:	rsb	r9, r3, #32
   186b0:	lsr	r2, r5, r9
   186b4:	lsr	r9, r6, r9
   186b8:	lsr	r8, r4, #16
   186bc:	orr	r9, r9, r5, lsl r3
   186c0:	mov	r0, r2
   186c4:	lsl	r7, r6, r3
   186c8:	mov	r1, r8
   186cc:	str	r2, [sp]
   186d0:	bl	17c38 <close_stdout@@Base+0x549c>
   186d4:	ldr	r2, [sp]
   186d8:	mov	r1, r8
   186dc:	uxth	sl, r4
   186e0:	mov	fp, r0
   186e4:	mov	r0, r2
   186e8:	bl	17e24 <close_stdout@@Base+0x5688>
   186ec:	mul	r0, sl, fp
   186f0:	lsr	r3, r9, #16
   186f4:	orr	r1, r3, r1, lsl #16
   186f8:	cmp	r0, r1
   186fc:	bls	1871c <close_stdout@@Base+0x5f80>
   18700:	adds	r1, r1, r4
   18704:	sub	r3, fp, #1
   18708:	bcs	187bc <close_stdout@@Base+0x6020>
   1870c:	cmp	r0, r1
   18710:	subhi	fp, fp, #2
   18714:	addhi	r1, r1, r4
   18718:	bls	187bc <close_stdout@@Base+0x6020>
   1871c:	rsb	r5, r0, r1
   18720:	mov	r1, r8
   18724:	uxth	r9, r9
   18728:	mov	r0, r5
   1872c:	bl	17c38 <close_stdout@@Base+0x549c>
   18730:	mov	r1, r8
   18734:	mov	r6, r0
   18738:	mov	r0, r5
   1873c:	bl	17e24 <close_stdout@@Base+0x5688>
   18740:	mul	r5, sl, r6
   18744:	orr	r1, r9, r1, lsl #16
   18748:	cmp	r5, r1
   1874c:	bls	18770 <close_stdout@@Base+0x5fd4>
   18750:	adds	r1, r1, r4
   18754:	sub	r3, r6, #1
   18758:	bcs	1876c <close_stdout@@Base+0x5fd0>
   1875c:	cmp	r5, r1
   18760:	subhi	r6, r6, #2
   18764:	addhi	r1, r1, r4
   18768:	bhi	18770 <close_stdout@@Base+0x5fd4>
   1876c:	mov	r6, r3
   18770:	rsb	r5, r5, r1
   18774:	orr	r6, r6, fp, lsl #16
   18778:	b	18504 <close_stdout@@Base+0x5d68>
   1877c:	mov	r6, r3
   18780:	b	18480 <close_stdout@@Base+0x5ce4>
   18784:	mov	r9, r2
   18788:	b	18550 <close_stdout@@Base+0x5db4>
   1878c:	mov	r5, r3
   18790:	b	1859c <close_stdout@@Base+0x5e00>
   18794:	cmp	sl, r1
   18798:	subhi	fp, fp, #2
   1879c:	addhi	r1, r1, r8
   187a0:	bhi	18660 <close_stdout@@Base+0x5ec4>
   187a4:	b	1865c <close_stdout@@Base+0x5ec0>
   187a8:	cmp	r0, r1
   187ac:	subhi	r4, r4, #2
   187b0:	addhi	r1, r1, r8
   187b4:	bhi	18614 <close_stdout@@Base+0x5e78>
   187b8:	b	18610 <close_stdout@@Base+0x5e74>
   187bc:	mov	fp, r3
   187c0:	b	1871c <close_stdout@@Base+0x5f80>
   187c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   187c8:	mov	r7, r0
   187cc:	ldr	r6, [pc, #76]	; 18820 <close_stdout@@Base+0x6084>
   187d0:	mov	r8, r1
   187d4:	ldr	r5, [pc, #72]	; 18824 <close_stdout@@Base+0x6088>
   187d8:	mov	r9, r2
   187dc:	add	r6, pc, r6
   187e0:	bl	11234 <fdopen@plt-0x20>
   187e4:	add	r5, pc, r5
   187e8:	rsb	r6, r5, r6
   187ec:	asrs	r6, r6, #2
   187f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   187f4:	sub	r5, r5, #4
   187f8:	mov	r4, #0
   187fc:	add	r4, r4, #1
   18800:	ldr	r3, [r5, #4]!
   18804:	mov	r0, r7
   18808:	mov	r1, r8
   1880c:	mov	r2, r9
   18810:	blx	r3
   18814:	cmp	r4, r6
   18818:	bne	187fc <close_stdout@@Base+0x6060>
   1881c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18820:	andeq	r1, r1, r8, asr r6
   18824:	andeq	r1, r1, ip, asr #12
   18828:	bx	lr
   1882c:	ldr	r3, [pc, #28]	; 18850 <close_stdout@@Base+0x60b4>
   18830:	mov	r1, #0
   18834:	ldr	r2, [pc, #24]	; 18854 <close_stdout@@Base+0x60b8>
   18838:	add	r3, pc, r3
   1883c:	ldr	r3, [r3, r2]
   18840:	cmp	r3, #0
   18844:	ldrne	r2, [r3]
   18848:	moveq	r2, r3
   1884c:	b	114ac <__cxa_atexit@plt>
   18850:	andeq	r1, r1, r0, asr #15
   18854:	andeq	r0, r0, r4, asr r1

Disassembly of section .fini:

00018858 <.fini>:
   18858:	push	{r3, lr}
   1885c:	pop	{r3, pc}
