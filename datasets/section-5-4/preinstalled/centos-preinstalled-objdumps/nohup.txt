
centos-preinstalled/nohup:     file format elf32-littlearm


Disassembly of section .init:

00010f34 <.init>:
   10f34:	push	{r3, lr}
   10f38:	bl	118a4 <close@plt+0x6a4>
   10f3c:	pop	{r3, pc}

Disassembly of section .plt:

00010f40 <fdopen@plt-0x14>:
   10f40:	push	{lr}		; (str lr, [sp, #-4]!)
   10f44:	ldr	lr, [pc, #4]	; 10f50 <fdopen@plt-0x4>
   10f48:	add	lr, pc, lr
   10f4c:	ldr	pc, [lr, #8]!
   10f50:	strheq	r5, [r1], -r0

00010f54 <fdopen@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #176]!	; 0xb0

00010f60 <calloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #168]!	; 0xa8

00010f6c <fputs_unlocked@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #160]!	; 0xa0

00010f78 <raise@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #152]!	; 0x98

00010f84 <strcmp@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #144]!	; 0x90

00010f90 <fflush@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #136]!	; 0x88

00010f9c <free@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #128]!	; 0x80

00010fa8 <_exit@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #120]!	; 0x78

00010fb4 <memcpy@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #112]!	; 0x70

00010fc0 <execvp@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #104]!	; 0x68

00010fcc <mbsinit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #96]!	; 0x60

00010fd8 <signal@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #88]!	; 0x58

00010fe4 <memcmp@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #80]!	; 0x50

00010ff0 <dcgettext@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #72]!	; 0x48

00010ffc <__stack_chk_fail@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #64]!	; 0x40

00011008 <dup2@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #56]!	; 0x38

00011014 <realloc@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #48]!	; 0x30

00011020 <textdomain@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #40]!	; 0x28

0001102c <iswprint@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #86016	; 0x15000
   11034:	ldr	pc, [ip, #32]!

00011038 <fwrite@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #86016	; 0x15000
   11040:	ldr	pc, [ip, #24]!

00011044 <lseek64@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #16]!

00011050 <__ctype_get_mb_cur_max@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #8]!

0001105c <strcpy@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #86016	; 0x15000
   11064:	ldr	pc, [ip, #0]!

00011068 <__fpending@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #20, 20	; 0x14000
   11070:	ldr	pc, [ip, #4088]!	; 0xff8

00011074 <mbrtowc@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #20, 20	; 0x14000
   1107c:	ldr	pc, [ip, #4080]!	; 0xff0

00011080 <error@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #4072]!	; 0xfe8

0001108c <open64@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #4064]!	; 0xfe0

00011098 <getenv@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110a4 <malloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #4048]!	; 0xfd0

000110b0 <__libc_start_main@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110bc <__freading@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #4032]!	; 0xfc0

000110c8 <__gmon_start__@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #20, 20	; 0x14000
   110d0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110d4 <mempcpy@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #20, 20	; 0x14000
   110dc:	ldr	pc, [ip, #4016]!	; 0xfb0

000110e0 <getopt_long@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #20, 20	; 0x14000
   110e8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110ec <__ctype_b_loc@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #20, 20	; 0x14000
   110f4:	ldr	pc, [ip, #4000]!	; 0xfa0

000110f8 <exit@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #20, 20	; 0x14000
   11100:	ldr	pc, [ip, #3992]!	; 0xf98

00011104 <strlen@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #20, 20	; 0x14000
   1110c:	ldr	pc, [ip, #3984]!	; 0xf90

00011110 <ungetc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #20, 20	; 0x14000
   11118:	ldr	pc, [ip, #3976]!	; 0xf88

0001111c <fcntl@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #20, 20	; 0x14000
   11124:	ldr	pc, [ip, #3968]!	; 0xf80

00011128 <__errno_location@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #20, 20	; 0x14000
   11130:	ldr	pc, [ip, #3960]!	; 0xf78

00011134 <__cxa_atexit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #20, 20	; 0x14000
   1113c:	ldr	pc, [ip, #3952]!	; 0xf70

00011140 <memset@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #20, 20	; 0x14000
   11148:	ldr	pc, [ip, #3944]!	; 0xf68

0001114c <fscanf@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #20, 20	; 0x14000
   11154:	ldr	pc, [ip, #3936]!	; 0xf60

00011158 <__printf_chk@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #20, 20	; 0x14000
   11160:	ldr	pc, [ip, #3928]!	; 0xf58

00011164 <fileno@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #20, 20	; 0x14000
   1116c:	ldr	pc, [ip, #3920]!	; 0xf50

00011170 <__fprintf_chk@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #20, 20	; 0x14000
   11178:	ldr	pc, [ip, #3912]!	; 0xf48

0001117c <fclose@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #20, 20	; 0x14000
   11184:	ldr	pc, [ip, #3904]!	; 0xf40

00011188 <fseeko64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #20, 20	; 0x14000
   11190:	ldr	pc, [ip, #3896]!	; 0xf38

00011194 <__uflow@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #20, 20	; 0x14000
   1119c:	ldr	pc, [ip, #3888]!	; 0xf30

000111a0 <setlocale@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #20, 20	; 0x14000
   111a8:	ldr	pc, [ip, #3880]!	; 0xf28

000111ac <strrchr@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #20, 20	; 0x14000
   111b4:	ldr	pc, [ip, #3872]!	; 0xf20

000111b8 <nl_langinfo@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #20, 20	; 0x14000
   111c0:	ldr	pc, [ip, #3864]!	; 0xf18

000111c4 <bindtextdomain@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #20, 20	; 0x14000
   111cc:	ldr	pc, [ip, #3856]!	; 0xf10

000111d0 <umask@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #20, 20	; 0x14000
   111d8:	ldr	pc, [ip, #3848]!	; 0xf08

000111dc <isatty@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #20, 20	; 0x14000
   111e4:	ldr	pc, [ip, #3840]!	; 0xf00

000111e8 <strncmp@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #20, 20	; 0x14000
   111f0:	ldr	pc, [ip, #3832]!	; 0xef8

000111f4 <abort@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #20, 20	; 0x14000
   111fc:	ldr	pc, [ip, #3824]!	; 0xef0

00011200 <close@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #20, 20	; 0x14000
   11208:	ldr	pc, [ip, #3816]!	; 0xee8

Disassembly of section .text:

0001120c <usage@@Base-0x790>:
   1120c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11210:	mov	r7, r0
   11214:	sub	sp, sp, #44	; 0x2c
   11218:	ldr	r0, [r1]
   1121c:	mov	r4, r1
   11220:	bl	12084 <close_stdout@@Base+0x418>
   11224:	ldr	r1, [pc, #1456]	; 117dc <close@plt+0x5dc>
   11228:	mov	r0, #6
   1122c:	ldr	r5, [pc, #1452]	; 117e0 <close@plt+0x5e0>
   11230:	mov	r8, #0
   11234:	add	r1, pc, r1
   11238:	ldr	fp, [pc, #1444]	; 117e4 <close@plt+0x5e4>
   1123c:	bl	111a0 <setlocale@plt>
   11240:	add	r5, pc, r5
   11244:	ldr	r1, [pc, #1436]	; 117e8 <close@plt+0x5e8>
   11248:	add	fp, pc, fp
   1124c:	mov	r0, r5
   11250:	ldr	r6, [pc, #1428]	; 117ec <close@plt+0x5ec>
   11254:	add	r1, pc, r1
   11258:	bl	111c4 <bindtextdomain@plt>
   1125c:	mov	r0, r5
   11260:	bl	11020 <textdomain@plt>
   11264:	ldr	r0, [pc, #1412]	; 117f0 <close@plt+0x5f0>
   11268:	add	r6, pc, r6
   1126c:	add	r0, pc, r0
   11270:	bl	11098 <getenv@plt>
   11274:	ldr	r2, [pc, #1400]	; 117f4 <close@plt+0x5f4>
   11278:	ldr	r3, [pc, #1400]	; 117f8 <close@plt+0x5f8>
   1127c:	ldr	r2, [fp, r2]
   11280:	cmp	r0, r8
   11284:	moveq	r5, #125	; 0x7d
   11288:	movne	r5, #127	; 0x7f
   1128c:	str	r5, [r2]
   11290:	ldr	r0, [fp, r3]
   11294:	bl	14b38 <close_stdout@@Base+0x2ecc>
   11298:	ldr	r3, [pc, #1372]	; 117fc <close@plt+0x5fc>
   1129c:	ldr	lr, [pc, #1372]	; 11800 <close@plt+0x600>
   112a0:	mov	r0, r7
   112a4:	ldr	r2, [pc, #1368]	; 11804 <close@plt+0x604>
   112a8:	mov	r1, r4
   112ac:	ldr	r9, [fp, r3]
   112b0:	ldr	r3, [pc, #1360]	; 11808 <close@plt+0x608>
   112b4:	add	r2, pc, r2
   112b8:	ldr	r9, [r9]
   112bc:	add	r3, pc, r3
   112c0:	str	r9, [sp]
   112c4:	ldr	lr, [fp, lr]
   112c8:	str	r6, [sp, #8]
   112cc:	str	r8, [sp, #12]
   112d0:	str	lr, [sp, #4]
   112d4:	bl	11f78 <close_stdout@@Base+0x30c>
   112d8:	ldr	r2, [pc, #1324]	; 1180c <close@plt+0x60c>
   112dc:	str	r8, [sp]
   112e0:	mov	r0, r7
   112e4:	mov	r1, r4
   112e8:	mov	r3, r8
   112ec:	add	r2, pc, r2
   112f0:	bl	110e0 <getopt_long@plt>
   112f4:	cmn	r0, #1
   112f8:	beq	11304 <close@plt+0x104>
   112fc:	mov	r0, r5
   11300:	bl	1199c <usage@@Base>
   11304:	ldr	r3, [pc, #1284]	; 11810 <close@plt+0x610>
   11308:	mov	r0, r8
   1130c:	ldr	r6, [fp, r3]
   11310:	ldr	r3, [r6]
   11314:	cmp	r7, r3
   11318:	bgt	11340 <close@plt+0x140>
   1131c:	ldr	r1, [pc, #1264]	; 11814 <close@plt+0x614>
   11320:	mov	r2, #5
   11324:	add	r1, pc, r1
   11328:	bl	10ff0 <dcgettext@plt>
   1132c:	mov	r1, r8
   11330:	mov	r2, r0
   11334:	mov	r0, r8
   11338:	bl	11080 <error@plt>
   1133c:	b	112fc <close@plt+0xfc>
   11340:	bl	111dc <isatty@plt>
   11344:	adds	r9, r0, #0
   11348:	mov	r0, #1
   1134c:	movne	r9, #1
   11350:	bl	111dc <isatty@plt>
   11354:	adds	r7, r0, #0
   11358:	movne	r7, #1
   1135c:	cmp	r7, #0
   11360:	bne	11378 <close@plt+0x178>
   11364:	bl	11128 <__errno_location@plt>
   11368:	ldr	r8, [r0]
   1136c:	subs	r3, r8, #9
   11370:	rsbs	r8, r3, #0
   11374:	adcs	r8, r8, r3
   11378:	mov	r0, #2
   1137c:	str	r8, [sp, #20]
   11380:	bl	111dc <isatty@plt>
   11384:	adds	r8, r0, #0
   11388:	movne	r8, #1
   1138c:	cmp	r9, #0
   11390:	bne	11468 <close@plt+0x268>
   11394:	cmp	r7, #0
   11398:	bne	114c0 <close@plt+0x2c0>
   1139c:	ldr	r3, [sp, #20]
   113a0:	tst	r8, r3
   113a4:	moveq	sl, #1
   113a8:	beq	1143c <close@plt+0x23c>
   113ac:	mvn	r0, #384	; 0x180
   113b0:	bl	111d0 <umask@plt>
   113b4:	movw	r1, #1089	; 0x441
   113b8:	mov	r2, #384	; 0x180
   113bc:	str	r0, [sp, #32]
   113c0:	ldr	r0, [pc, #1104]	; 11818 <close@plt+0x618>
   113c4:	add	r0, pc, r0
   113c8:	bl	1108c <open64@plt>
   113cc:	mov	sl, r0
   113d0:	cmp	sl, #0
   113d4:	blt	115f8 <close@plt+0x3f8>
   113d8:	ldr	r3, [pc, #1084]	; 1181c <close@plt+0x61c>
   113dc:	add	r3, pc, r3
   113e0:	str	r3, [sp, #24]
   113e4:	mov	r3, #0
   113e8:	str	r3, [sp, #28]
   113ec:	ldr	r0, [sp, #32]
   113f0:	bl	111d0 <umask@plt>
   113f4:	cmp	r9, #0
   113f8:	beq	11538 <close@plt+0x338>
   113fc:	ldr	r1, [pc, #1052]	; 11820 <close@plt+0x620>
   11400:	add	r1, pc, r1
   11404:	mov	r2, #5
   11408:	mov	r0, #0
   1140c:	bl	10ff0 <dcgettext@plt>
   11410:	mov	r2, r0
   11414:	ldr	r0, [sp, #24]
   11418:	str	r2, [sp, #16]
   1141c:	bl	138d4 <close_stdout@@Base+0x1c68>
   11420:	ldr	r2, [sp, #16]
   11424:	mov	r3, r0
   11428:	mov	r0, #0
   1142c:	mov	r1, r0
   11430:	bl	11080 <error@plt>
   11434:	ldr	r0, [sp, #28]
   11438:	bl	10f9c <free@plt>
   1143c:	cmp	r8, #0
   11440:	moveq	r8, #2
   11444:	bne	11544 <close@plt+0x344>
   11448:	ldr	r3, [pc, #980]	; 11824 <close@plt+0x624>
   1144c:	ldr	r3, [fp, r3]
   11450:	ldr	r3, [r3]
   11454:	ldr	r0, [r3]
   11458:	ands	r7, r0, #32
   1145c:	beq	114ec <close@plt+0x2ec>
   11460:	mov	r0, r5
   11464:	bl	110f8 <exit@plt>
   11468:	ldr	r1, [pc, #952]	; 11828 <close@plt+0x628>
   1146c:	mov	r0, #0
   11470:	mov	r3, r0
   11474:	mov	r2, #1
   11478:	add	r1, pc, r1
   1147c:	bl	11e28 <close_stdout@@Base+0x1bc>
   11480:	cmp	r0, #0
   11484:	blt	11778 <close@plt+0x578>
   11488:	eor	r2, r8, #1
   1148c:	eor	r3, r7, #1
   11490:	tst	r2, r3
   11494:	beq	11394 <close@plt+0x194>
   11498:	ldr	r1, [pc, #908]	; 1182c <close@plt+0x62c>
   1149c:	mov	r2, #5
   114a0:	mov	r0, #0
   114a4:	add	r1, pc, r1
   114a8:	bl	10ff0 <dcgettext@plt>
   114ac:	mov	r2, r0
   114b0:	mov	r0, #0
   114b4:	mov	r1, r0
   114b8:	bl	11080 <error@plt>
   114bc:	b	1139c <close@plt+0x19c>
   114c0:	mvn	r0, #384	; 0x180
   114c4:	bl	111d0 <umask@plt>
   114c8:	ldr	r1, [pc, #864]	; 11830 <close@plt+0x630>
   114cc:	movw	r2, #1089	; 0x441
   114d0:	mov	r3, #384	; 0x180
   114d4:	add	r1, pc, r1
   114d8:	str	r0, [sp, #32]
   114dc:	mov	r0, #1
   114e0:	bl	11e28 <close_stdout@@Base+0x1bc>
   114e4:	mov	sl, r0
   114e8:	b	113d0 <close@plt+0x1d0>
   114ec:	mov	r0, #1
   114f0:	mov	r1, r0
   114f4:	bl	10fd8 <signal@plt>
   114f8:	ldr	r5, [r6]
   114fc:	add	r1, r4, r5, lsl #2
   11500:	ldr	r0, [r4, r5, lsl #2]
   11504:	bl	10fc0 <execvp@plt>
   11508:	bl	11128 <__errno_location@plt>
   1150c:	mov	r1, #2
   11510:	ldr	r6, [r0]
   11514:	mov	r0, r8
   11518:	bl	11008 <dup2@plt>
   1151c:	cmp	r6, #2
   11520:	movne	r8, #126	; 0x7e
   11524:	moveq	r8, #127	; 0x7f
   11528:	cmp	r0, #2
   1152c:	beq	116f4 <close@plt+0x4f4>
   11530:	mov	r0, r8
   11534:	bl	110f8 <exit@plt>
   11538:	ldr	r1, [pc, #756]	; 11834 <close@plt+0x634>
   1153c:	add	r1, pc, r1
   11540:	b	11404 <close@plt+0x204>
   11544:	mov	r0, #2
   11548:	bl	138e0 <close_stdout@@Base+0x1c74>
   1154c:	subs	r8, r0, #0
   11550:	blt	11598 <close@plt+0x398>
   11554:	mov	r1, #1
   11558:	bl	11bd4 <usage@@Base+0x238>
   1155c:	cmp	r0, #0
   11560:	beq	11598 <close@plt+0x398>
   11564:	bl	11128 <__errno_location@plt>
   11568:	ldr	r1, [pc, #712]	; 11838 <close@plt+0x638>
   1156c:	mov	r2, #5
   11570:	add	r1, pc, r1
   11574:	ldr	r3, [r0]
   11578:	mov	r0, #0
   1157c:	str	r3, [sp, #16]
   11580:	bl	10ff0 <dcgettext@plt>
   11584:	ldr	r3, [sp, #16]
   11588:	mov	r1, r3
   1158c:	mov	r2, r0
   11590:	mov	r0, r5
   11594:	bl	11080 <error@plt>
   11598:	cmp	r7, #0
   1159c:	bne	115cc <close@plt+0x3cc>
   115a0:	cmp	r9, #0
   115a4:	beq	116e8 <close@plt+0x4e8>
   115a8:	ldr	r1, [pc, #652]	; 1183c <close@plt+0x63c>
   115ac:	add	r1, pc, r1
   115b0:	mov	r2, #5
   115b4:	mov	r0, #0
   115b8:	bl	10ff0 <dcgettext@plt>
   115bc:	mov	r2, r0
   115c0:	mov	r0, #0
   115c4:	mov	r1, r0
   115c8:	bl	11080 <error@plt>
   115cc:	mov	r0, sl
   115d0:	mov	r1, #2
   115d4:	bl	11008 <dup2@plt>
   115d8:	cmp	r0, #0
   115dc:	blt	117ac <close@plt+0x5ac>
   115e0:	ldr	r3, [sp, #20]
   115e4:	cmp	r3, #0
   115e8:	beq	11448 <close@plt+0x248>
   115ec:	mov	r0, sl
   115f0:	bl	11200 <close@plt>
   115f4:	b	11448 <close@plt+0x248>
   115f8:	bl	11128 <__errno_location@plt>
   115fc:	str	r0, [sp, #24]
   11600:	ldr	r3, [sp, #24]
   11604:	ldr	r0, [pc, #564]	; 11840 <close@plt+0x640>
   11608:	ldr	r3, [r3]
   1160c:	add	r0, pc, r0
   11610:	str	r3, [sp, #36]	; 0x24
   11614:	bl	11098 <getenv@plt>
   11618:	subs	sl, r0, #0
   1161c:	beq	11740 <close@plt+0x540>
   11620:	ldr	r1, [pc, #540]	; 11844 <close@plt+0x644>
   11624:	mov	r2, #0
   11628:	add	r1, pc, r1
   1162c:	bl	11e88 <close_stdout@@Base+0x21c>
   11630:	cmp	r7, #0
   11634:	str	r0, [sp, #28]
   11638:	beq	1172c <close@plt+0x52c>
   1163c:	mov	r0, #1
   11640:	ldr	r1, [sp, #28]
   11644:	movw	r2, #1089	; 0x441
   11648:	mov	r3, #384	; 0x180
   1164c:	bl	11e28 <close_stdout@@Base+0x1bc>
   11650:	mov	sl, r0
   11654:	cmp	sl, #0
   11658:	ldrge	r3, [sp, #28]
   1165c:	strge	r3, [sp, #24]
   11660:	bge	113ec <close@plt+0x1ec>
   11664:	ldr	r4, [pc, #476]	; 11848 <close@plt+0x648>
   11668:	mov	r2, #5
   1166c:	ldr	r3, [sp, #24]
   11670:	mov	r0, #0
   11674:	add	r4, pc, r4
   11678:	mov	r1, r4
   1167c:	ldr	r6, [r3]
   11680:	bl	10ff0 <dcgettext@plt>
   11684:	mov	r7, r0
   11688:	ldr	r0, [pc, #444]	; 1184c <close@plt+0x64c>
   1168c:	add	r0, pc, r0
   11690:	bl	138d4 <close_stdout@@Base+0x1c68>
   11694:	mov	r2, r7
   11698:	ldr	r1, [sp, #36]	; 0x24
   1169c:	mov	r3, r0
   116a0:	mov	r0, #0
   116a4:	bl	11080 <error@plt>
   116a8:	ldr	r3, [sp, #28]
   116ac:	cmp	r3, #0
   116b0:	beq	11460 <close@plt+0x260>
   116b4:	mov	r1, r4
   116b8:	mov	r2, #5
   116bc:	mov	r0, #0
   116c0:	bl	10ff0 <dcgettext@plt>
   116c4:	mov	r4, r0
   116c8:	ldr	r0, [sp, #28]
   116cc:	bl	138d4 <close_stdout@@Base+0x1c68>
   116d0:	mov	r2, r4
   116d4:	mov	r1, r6
   116d8:	mov	r3, r0
   116dc:	mov	r0, #0
   116e0:	bl	11080 <error@plt>
   116e4:	b	11460 <close@plt+0x260>
   116e8:	ldr	r1, [pc, #352]	; 11850 <close@plt+0x650>
   116ec:	add	r1, pc, r1
   116f0:	b	115b0 <close@plt+0x3b0>
   116f4:	ldr	r1, [pc, #344]	; 11854 <close@plt+0x654>
   116f8:	mov	r2, #5
   116fc:	mov	r0, r7
   11700:	add	r1, pc, r1
   11704:	bl	10ff0 <dcgettext@plt>
   11708:	mov	r9, r0
   1170c:	ldr	r0, [r4, r5, lsl #2]
   11710:	bl	138d4 <close_stdout@@Base+0x1c68>
   11714:	mov	r1, r6
   11718:	mov	r2, r9
   1171c:	mov	r3, r0
   11720:	mov	r0, r7
   11724:	bl	11080 <error@plt>
   11728:	b	11530 <close@plt+0x330>
   1172c:	movw	r1, #1089	; 0x441
   11730:	mov	r2, #384	; 0x180
   11734:	bl	1108c <open64@plt>
   11738:	mov	sl, r0
   1173c:	b	11654 <close@plt+0x454>
   11740:	ldr	r1, [pc, #272]	; 11858 <close@plt+0x658>
   11744:	mov	r2, #5
   11748:	add	r1, pc, r1
   1174c:	bl	10ff0 <dcgettext@plt>
   11750:	mov	r4, r0
   11754:	ldr	r0, [pc, #256]	; 1185c <close@plt+0x65c>
   11758:	add	r0, pc, r0
   1175c:	bl	138d4 <close_stdout@@Base+0x1c68>
   11760:	ldr	r1, [sp, #36]	; 0x24
   11764:	mov	r2, r4
   11768:	mov	r3, r0
   1176c:	mov	r0, sl
   11770:	bl	11080 <error@plt>
   11774:	b	11460 <close@plt+0x260>
   11778:	bl	11128 <__errno_location@plt>
   1177c:	ldr	r1, [pc, #220]	; 11860 <close@plt+0x660>
   11780:	mov	r2, #5
   11784:	add	r1, pc, r1
   11788:	ldr	r4, [r0]
   1178c:	mov	r0, #0
   11790:	bl	10ff0 <dcgettext@plt>
   11794:	mov	r1, r4
   11798:	mov	r2, r0
   1179c:	mov	r0, #0
   117a0:	bl	11080 <error@plt>
   117a4:	mov	r0, r5
   117a8:	bl	110f8 <exit@plt>
   117ac:	bl	11128 <__errno_location@plt>
   117b0:	ldr	r1, [pc, #172]	; 11864 <close@plt+0x664>
   117b4:	mov	r2, #5
   117b8:	add	r1, pc, r1
   117bc:	ldr	r7, [r0]
   117c0:	mov	r0, #0
   117c4:	bl	10ff0 <dcgettext@plt>
   117c8:	mov	r1, r7
   117cc:	mov	r2, r0
   117d0:	mov	r0, r5
   117d4:	bl	11080 <error@plt>
   117d8:	b	115e0 <close@plt+0x3e0>
   117dc:	andeq	r3, r0, r0, ror #25
   117e0:	andeq	r3, r0, r4, lsl ip
   117e4:			; <UNDEFINED> instruction: 0x00014db0
   117e8:	andeq	r3, r0, r4, ror #26
   117ec:	andeq	r3, r0, r4, ror sp
   117f0:	andeq	r3, r0, r0, ror #26
   117f4:	andeq	r0, r0, ip, lsl r1
   117f8:	andeq	r0, r0, r8, lsl #2
   117fc:	andeq	r0, r0, r0, lsl #2
   11800:	andeq	r0, r0, r8, lsl r1
   11804:	andeq	r3, r0, ip, ror fp
   11808:	muleq	r0, r4, fp
   1180c:	andeq	r3, r0, r0, lsl #26
   11810:	strdeq	r0, [r0], -ip
   11814:	andeq	r3, r0, ip, asr #25
   11818:	andeq	r3, r0, r4, asr fp
   1181c:	andeq	r3, r0, ip, lsr fp
   11820:	andeq	r3, r0, r4, lsr #22
   11824:	andeq	r0, r0, r4, lsl #2
   11828:	andeq	r3, r0, r8, lsl #23
   1182c:	muleq	r0, r4, fp
   11830:	andeq	r3, r0, r4, asr #20
   11834:	andeq	r3, r0, r4, lsl sl
   11838:	strdeq	r3, [r0], -r4
   1183c:			; <UNDEFINED> instruction: 0x000039bc
   11840:	andeq	r3, r0, ip, lsr sl
   11844:	strdeq	r3, [r0], -r0
   11848:	ldrdeq	r3, [r0], -ip
   1184c:	andeq	r3, r0, ip, lsl #17
   11850:	andeq	r3, r0, ip, lsr #17
   11854:			; <UNDEFINED> instruction: 0x000039bc
   11858:	andeq	r3, r0, r8, lsl #18
   1185c:	andeq	r3, r0, r0, asr #15
   11860:	andeq	r3, r0, r8, lsl #17
   11864:	andeq	r3, r0, r0, ror #17
   11868:	mov	fp, #0
   1186c:	mov	lr, #0
   11870:	pop	{r1}		; (ldr r1, [sp], #4)
   11874:	mov	r2, sp
   11878:	push	{r2}		; (str r2, [sp, #-4]!)
   1187c:	push	{r0}		; (str r0, [sp, #-4]!)
   11880:	ldr	ip, [pc, #16]	; 11898 <close@plt+0x698>
   11884:	push	{ip}		; (str ip, [sp, #-4]!)
   11888:	ldr	r0, [pc, #12]	; 1189c <close@plt+0x69c>
   1188c:	ldr	r3, [pc, #12]	; 118a0 <close@plt+0x6a0>
   11890:	bl	110b0 <__libc_start_main@plt>
   11894:	bl	111f4 <abort@plt>
   11898:	andeq	r4, r1, r4, lsr fp
   1189c:	andeq	r1, r1, ip, lsl #4
   118a0:	ldrdeq	r4, [r1], -r0
   118a4:	ldr	r3, [pc, #20]	; 118c0 <close@plt+0x6c0>
   118a8:	ldr	r2, [pc, #20]	; 118c4 <close@plt+0x6c4>
   118ac:	add	r3, pc, r3
   118b0:	ldr	r2, [r3, r2]
   118b4:	cmp	r2, #0
   118b8:	bxeq	lr
   118bc:	b	110c8 <__gmon_start__@plt>
   118c0:	andeq	r4, r1, ip, asr #14
   118c4:	andeq	r0, r0, ip, lsl #2
   118c8:	push	{r3, lr}
   118cc:	movw	r0, #24960	; 0x6180
   118d0:	ldr	r3, [pc, #36]	; 118fc <close@plt+0x6fc>
   118d4:	movt	r0, #2
   118d8:	rsb	r3, r0, r3
   118dc:	cmp	r3, #6
   118e0:	popls	{r3, pc}
   118e4:	movw	r3, #0
   118e8:	movt	r3, #0
   118ec:	cmp	r3, #0
   118f0:	popeq	{r3, pc}
   118f4:	blx	r3
   118f8:	pop	{r3, pc}
   118fc:	andeq	r6, r2, r3, lsl #3
   11900:	push	{r3, lr}
   11904:	movw	r0, #24960	; 0x6180
   11908:	movw	r3, #24960	; 0x6180
   1190c:	movt	r0, #2
   11910:	movt	r3, #2
   11914:	rsb	r3, r0, r3
   11918:	asr	r3, r3, #2
   1191c:	add	r3, r3, r3, lsr #31
   11920:	asrs	r1, r3, #1
   11924:	popeq	{r3, pc}
   11928:	movw	r2, #0
   1192c:	movt	r2, #0
   11930:	cmp	r2, #0
   11934:	popeq	{r3, pc}
   11938:	blx	r2
   1193c:	pop	{r3, pc}
   11940:	push	{r4, lr}
   11944:	movw	r4, #24960	; 0x6180
   11948:	movt	r4, #2
   1194c:	ldrb	r3, [r4]
   11950:	cmp	r3, #0
   11954:	popne	{r4, pc}
   11958:	bl	118c8 <close@plt+0x6c8>
   1195c:	mov	r3, #1
   11960:	strb	r3, [r4]
   11964:	pop	{r4, pc}
   11968:	movw	r0, #24240	; 0x5eb0
   1196c:	movt	r0, #2
   11970:	push	{r3, lr}
   11974:	ldr	r3, [r0]
   11978:	cmp	r3, #0
   1197c:	beq	11994 <close@plt+0x794>
   11980:	movw	r3, #0
   11984:	movt	r3, #0
   11988:	cmp	r3, #0
   1198c:	beq	11994 <close@plt+0x794>
   11990:	blx	r3
   11994:	pop	{r3, lr}
   11998:	b	11900 <close@plt+0x700>

0001199c <usage@@Base>:
   1199c:	push	{r4, r5, r6, lr}
   119a0:	subs	r4, r0, #0
   119a4:	ldr	r5, [pc, #480]	; 11b8c <usage@@Base+0x1f0>
   119a8:	add	r5, pc, r5
   119ac:	beq	119f4 <usage@@Base+0x58>
   119b0:	ldr	r3, [pc, #472]	; 11b90 <usage@@Base+0x1f4>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #468]	; 11b94 <usage@@Base+0x1f8>
   119bc:	mov	r0, #0
   119c0:	ldr	r3, [r5, r3]
   119c4:	add	r1, pc, r1
   119c8:	ldr	r6, [r3]
   119cc:	bl	10ff0 <dcgettext@plt>
   119d0:	ldr	r3, [pc, #448]	; 11b98 <usage@@Base+0x1fc>
   119d4:	mov	r1, #1
   119d8:	ldr	r3, [r5, r3]
   119dc:	ldr	r3, [r3]
   119e0:	mov	r2, r0
   119e4:	mov	r0, r6
   119e8:	bl	11170 <__fprintf_chk@plt>
   119ec:	mov	r0, r4
   119f0:	bl	110f8 <exit@plt>
   119f4:	ldr	r1, [pc, #416]	; 11b9c <usage@@Base+0x200>
   119f8:	mov	r2, #5
   119fc:	add	r1, pc, r1
   11a00:	bl	10ff0 <dcgettext@plt>
   11a04:	ldr	r3, [pc, #396]	; 11b98 <usage@@Base+0x1fc>
   11a08:	ldr	r6, [r5, r3]
   11a0c:	ldr	r2, [r6]
   11a10:	mov	r3, r2
   11a14:	mov	r1, r0
   11a18:	mov	r0, #1
   11a1c:	bl	11158 <__printf_chk@plt>
   11a20:	ldr	r1, [pc, #376]	; 11ba0 <usage@@Base+0x204>
   11a24:	mov	r2, #5
   11a28:	mov	r0, r4
   11a2c:	add	r1, pc, r1
   11a30:	bl	10ff0 <dcgettext@plt>
   11a34:	ldr	r3, [pc, #360]	; 11ba4 <usage@@Base+0x208>
   11a38:	ldr	r5, [r5, r3]
   11a3c:	ldr	r1, [r5]
   11a40:	bl	10f6c <fputs_unlocked@plt>
   11a44:	ldr	r1, [pc, #348]	; 11ba8 <usage@@Base+0x20c>
   11a48:	mov	r2, #5
   11a4c:	mov	r0, r4
   11a50:	add	r1, pc, r1
   11a54:	bl	10ff0 <dcgettext@plt>
   11a58:	ldr	r1, [r5]
   11a5c:	bl	10f6c <fputs_unlocked@plt>
   11a60:	ldr	r1, [pc, #324]	; 11bac <usage@@Base+0x210>
   11a64:	mov	r2, #5
   11a68:	mov	r0, r4
   11a6c:	add	r1, pc, r1
   11a70:	bl	10ff0 <dcgettext@plt>
   11a74:	ldr	r1, [r5]
   11a78:	bl	10f6c <fputs_unlocked@plt>
   11a7c:	ldr	r1, [pc, #300]	; 11bb0 <usage@@Base+0x214>
   11a80:	mov	r2, #5
   11a84:	mov	r0, r4
   11a88:	add	r1, pc, r1
   11a8c:	bl	10ff0 <dcgettext@plt>
   11a90:	ldr	r2, [r6]
   11a94:	mov	r1, r0
   11a98:	mov	r0, #1
   11a9c:	bl	11158 <__printf_chk@plt>
   11aa0:	ldr	r1, [pc, #268]	; 11bb4 <usage@@Base+0x218>
   11aa4:	mov	r2, #5
   11aa8:	mov	r0, r4
   11aac:	add	r1, pc, r1
   11ab0:	bl	10ff0 <dcgettext@plt>
   11ab4:	ldr	r2, [pc, #252]	; 11bb8 <usage@@Base+0x21c>
   11ab8:	add	r2, pc, r2
   11abc:	mov	r1, r0
   11ac0:	mov	r0, #1
   11ac4:	bl	11158 <__printf_chk@plt>
   11ac8:	ldr	r1, [pc, #236]	; 11bbc <usage@@Base+0x220>
   11acc:	mov	r2, #5
   11ad0:	mov	r0, r4
   11ad4:	add	r1, pc, r1
   11ad8:	bl	10ff0 <dcgettext@plt>
   11adc:	ldr	r2, [pc, #220]	; 11bc0 <usage@@Base+0x224>
   11ae0:	ldr	r3, [pc, #220]	; 11bc4 <usage@@Base+0x228>
   11ae4:	add	r2, pc, r2
   11ae8:	add	r3, pc, r3
   11aec:	mov	r1, r0
   11af0:	mov	r0, #1
   11af4:	bl	11158 <__printf_chk@plt>
   11af8:	mov	r0, #5
   11afc:	mov	r1, r4
   11b00:	bl	111a0 <setlocale@plt>
   11b04:	cmp	r0, #0
   11b08:	beq	11b24 <usage@@Base+0x188>
   11b0c:	ldr	r1, [pc, #180]	; 11bc8 <usage@@Base+0x22c>
   11b10:	mov	r2, #3
   11b14:	add	r1, pc, r1
   11b18:	bl	111e8 <strncmp@plt>
   11b1c:	cmp	r0, #0
   11b20:	bne	11b58 <usage@@Base+0x1bc>
   11b24:	ldr	r1, [pc, #160]	; 11bcc <usage@@Base+0x230>
   11b28:	mov	r2, #5
   11b2c:	mov	r0, #0
   11b30:	add	r1, pc, r1
   11b34:	bl	10ff0 <dcgettext@plt>
   11b38:	mov	r5, r0
   11b3c:	ldr	r0, [r6]
   11b40:	bl	11d84 <close_stdout@@Base+0x118>
   11b44:	mov	r1, r5
   11b48:	mov	r2, r0
   11b4c:	mov	r0, #1
   11b50:	bl	11158 <__printf_chk@plt>
   11b54:	b	119ec <usage@@Base+0x50>
   11b58:	ldr	r1, [pc, #112]	; 11bd0 <usage@@Base+0x234>
   11b5c:	mov	r2, #5
   11b60:	mov	r0, r4
   11b64:	add	r1, pc, r1
   11b68:	bl	10ff0 <dcgettext@plt>
   11b6c:	mov	r5, r0
   11b70:	ldr	r0, [r6]
   11b74:	bl	11d84 <close_stdout@@Base+0x118>
   11b78:	mov	r1, r5
   11b7c:	mov	r2, r0
   11b80:	mov	r0, #1
   11b84:	bl	11158 <__printf_chk@plt>
   11b88:	b	11b24 <usage@@Base+0x188>
   11b8c:	andeq	r4, r1, r0, asr r6
   11b90:	andeq	r0, r0, r4, lsl #2
   11b94:	andeq	r3, r0, r8, lsr #3
   11b98:	andeq	r0, r0, r4, lsr #2
   11b9c:	muleq	r0, r8, r1
   11ba0:	muleq	r0, r8, r1
   11ba4:	andeq	r0, r0, r4, lsl r1
   11ba8:	muleq	r0, ip, r1
   11bac:			; <UNDEFINED> instruction: 0x000031b0
   11bb0:	andeq	r3, r0, ip, asr #3
   11bb4:	andeq	r3, r0, r4, asr #5
   11bb8:	andeq	r3, r0, r8, ror r3
   11bbc:	andeq	r3, r0, r4, ror #6
   11bc0:	andeq	r3, r0, ip, ror #6
   11bc4:	andeq	r3, r0, r8, ror r3
   11bc8:	andeq	r3, r0, r4, ror r3
   11bcc:	andeq	r3, r0, r4, lsr #7
   11bd0:	andeq	r3, r0, r8, lsr #6
   11bd4:	push	{r3, r4, r5, lr}
   11bd8:	mov	r2, #0
   11bdc:	mov	r4, r1
   11be0:	mov	r1, #1
   11be4:	mov	r5, r0
   11be8:	bl	140f8 <close_stdout@@Base+0x248c>
   11bec:	cmp	r0, #0
   11bf0:	blt	11c30 <usage@@Base+0x294>
   11bf4:	cmp	r4, #0
   11bf8:	orrne	r2, r0, #1
   11bfc:	biceq	r2, r0, #1
   11c00:	cmp	r2, r0
   11c04:	beq	11c28 <usage@@Base+0x28c>
   11c08:	mov	r0, r5
   11c0c:	mov	r1, #2
   11c10:	bl	140f8 <close_stdout@@Base+0x248c>
   11c14:	cmn	r0, #1
   11c18:	movne	r0, #0
   11c1c:	moveq	r0, #1
   11c20:	rsb	r0, r0, #0
   11c24:	pop	{r3, r4, r5, pc}
   11c28:	mov	r0, #0
   11c2c:	pop	{r3, r4, r5, pc}
   11c30:	mvn	r0, #0
   11c34:	pop	{r3, r4, r5, pc}
   11c38:	movw	r1, #1030	; 0x406
   11c3c:	mov	r2, #0
   11c40:	b	140f8 <close_stdout@@Base+0x248c>
   11c44:	ldr	r3, [pc, #8]	; 11c54 <usage@@Base+0x2b8>
   11c48:	add	r3, pc, r3
   11c4c:	str	r0, [r3]
   11c50:	bx	lr
   11c54:	andeq	r4, r1, r4, lsr r5
   11c58:	ldr	r3, [pc, #8]	; 11c68 <usage@@Base+0x2cc>
   11c5c:	add	r3, pc, r3
   11c60:	strb	r0, [r3, #4]
   11c64:	bx	lr
   11c68:	andeq	r4, r1, r0, lsr #10

00011c6c <close_stdout@@Base>:
   11c6c:	push	{r4, r5, r6, r7, lr}
   11c70:	sub	sp, sp, #12
   11c74:	ldr	r4, [pc, #228]	; 11d60 <close_stdout@@Base+0xf4>
   11c78:	ldr	r3, [pc, #228]	; 11d64 <close_stdout@@Base+0xf8>
   11c7c:	add	r4, pc, r4
   11c80:	ldr	r3, [r4, r3]
   11c84:	ldr	r0, [r3]
   11c88:	bl	1426c <close_stdout@@Base+0x2600>
   11c8c:	cmp	r0, #0
   11c90:	beq	11cb8 <close_stdout@@Base+0x4c>
   11c94:	ldr	r3, [pc, #204]	; 11d68 <close_stdout@@Base+0xfc>
   11c98:	add	r3, pc, r3
   11c9c:	ldrb	r3, [r3, #4]
   11ca0:	cmp	r3, #0
   11ca4:	beq	11cd8 <close_stdout@@Base+0x6c>
   11ca8:	bl	11128 <__errno_location@plt>
   11cac:	ldr	r3, [r0]
   11cb0:	cmp	r3, #32
   11cb4:	bne	11cd8 <close_stdout@@Base+0x6c>
   11cb8:	ldr	r3, [pc, #172]	; 11d6c <close_stdout@@Base+0x100>
   11cbc:	ldr	r3, [r4, r3]
   11cc0:	ldr	r0, [r3]
   11cc4:	bl	1426c <close_stdout@@Base+0x2600>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11d2c <close_stdout@@Base+0xc0>
   11cd0:	add	sp, sp, #12
   11cd4:	pop	{r4, r5, r6, r7, pc}
   11cd8:	ldr	r1, [pc, #144]	; 11d70 <close_stdout@@Base+0x104>
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	add	r1, pc, r1
   11ce8:	bl	10ff0 <dcgettext@plt>
   11cec:	ldr	r3, [pc, #128]	; 11d74 <close_stdout@@Base+0x108>
   11cf0:	ldr	r5, [pc, r3]
   11cf4:	cmp	r5, #0
   11cf8:	mov	r6, r0
   11cfc:	beq	11d3c <close_stdout@@Base+0xd0>
   11d00:	bl	11128 <__errno_location@plt>
   11d04:	ldr	r7, [r0]
   11d08:	mov	r0, r5
   11d0c:	bl	13780 <close_stdout@@Base+0x1b14>
   11d10:	ldr	r2, [pc, #96]	; 11d78 <close_stdout@@Base+0x10c>
   11d14:	str	r6, [sp]
   11d18:	mov	r1, r7
   11d1c:	add	r2, pc, r2
   11d20:	mov	r3, r0
   11d24:	mov	r0, #0
   11d28:	bl	11080 <error@plt>
   11d2c:	ldr	r3, [pc, #72]	; 11d7c <close_stdout@@Base+0x110>
   11d30:	ldr	r3, [r4, r3]
   11d34:	ldr	r0, [r3]
   11d38:	bl	10fa8 <_exit@plt>
   11d3c:	bl	11128 <__errno_location@plt>
   11d40:	ldr	r2, [pc, #56]	; 11d80 <close_stdout@@Base+0x114>
   11d44:	add	r2, pc, r2
   11d48:	mov	r3, r0
   11d4c:	mov	r0, r5
   11d50:	ldr	r1, [r3]
   11d54:	mov	r3, r6
   11d58:	bl	11080 <error@plt>
   11d5c:	b	11d2c <close_stdout@@Base+0xc0>
   11d60:	andeq	r4, r1, ip, ror r3
   11d64:	andeq	r0, r0, r4, lsl r1
   11d68:	andeq	r4, r1, r4, ror #9
   11d6c:	andeq	r0, r0, r4, lsl #2
   11d70:	strdeq	r3, [r0], -ip
   11d74:	andeq	r4, r1, ip, lsl #9
   11d78:	ldrdeq	r3, [r0], -r0
   11d7c:	andeq	r0, r0, ip, lsl r1
   11d80:	andeq	r3, r0, ip, lsr #7
   11d84:	ldrb	r3, [r0]
   11d88:	cmp	r3, #47	; 0x2f
   11d8c:	bne	11da8 <close_stdout@@Base+0x13c>
   11d90:	add	r2, r0, #1
   11d94:	mov	r0, r2
   11d98:	add	r2, r2, #1
   11d9c:	ldrb	r3, [r0]
   11da0:	cmp	r3, #47	; 0x2f
   11da4:	beq	11d94 <close_stdout@@Base+0x128>
   11da8:	cmp	r3, #0
   11dac:	bxeq	lr
   11db0:	mov	r2, r0
   11db4:	mov	r1, #0
   11db8:	cmp	r3, #47	; 0x2f
   11dbc:	moveq	r1, #1
   11dc0:	beq	11dd0 <close_stdout@@Base+0x164>
   11dc4:	cmp	r1, #0
   11dc8:	movne	r0, r2
   11dcc:	movne	r1, #0
   11dd0:	ldrb	r3, [r2, #1]!
   11dd4:	cmp	r3, #0
   11dd8:	bne	11db8 <close_stdout@@Base+0x14c>
   11ddc:	bx	lr
   11de0:	push	{r4, lr}
   11de4:	mov	r4, r0
   11de8:	bl	11104 <strlen@plt>
   11dec:	cmp	r0, #1
   11df0:	popls	{r4, pc}
   11df4:	sub	r3, r0, #1
   11df8:	ldrb	r2, [r4, r3]
   11dfc:	cmp	r2, #47	; 0x2f
   11e00:	popne	{r4, pc}
   11e04:	mov	r0, r3
   11e08:	cmp	r0, #1
   11e0c:	sub	r3, r3, #1
   11e10:	beq	11e24 <close_stdout@@Base+0x1b8>
   11e14:	ldrb	r2, [r4, r3]
   11e18:	cmp	r2, #47	; 0x2f
   11e1c:	popne	{r4, pc}
   11e20:	b	11e04 <close_stdout@@Base+0x198>
   11e24:	pop	{r4, pc}
   11e28:	push	{r3, r4, r5, r6, r7, lr}
   11e2c:	mov	r5, r0
   11e30:	mov	r0, r1
   11e34:	mov	r1, r2
   11e38:	mov	r2, r3
   11e3c:	bl	1108c <open64@plt>
   11e40:	subs	r2, r5, r0
   11e44:	mov	r4, r0
   11e48:	rsbs	r3, r2, #0
   11e4c:	adcs	r3, r3, r2
   11e50:	orrs	r3, r3, r0, lsr #31
   11e54:	bne	11e80 <close_stdout@@Base+0x214>
   11e58:	mov	r1, r5
   11e5c:	bl	11008 <dup2@plt>
   11e60:	mov	r7, r0
   11e64:	bl	11128 <__errno_location@plt>
   11e68:	ldr	r6, [r0]
   11e6c:	mov	r5, r0
   11e70:	mov	r0, r4
   11e74:	mov	r4, r7
   11e78:	bl	11200 <close@plt>
   11e7c:	str	r6, [r5]
   11e80:	mov	r0, r4
   11e84:	pop	{r3, r4, r5, r6, r7, pc}
   11e88:	push	{r3, lr}
   11e8c:	bl	11e9c <close_stdout@@Base+0x230>
   11e90:	cmp	r0, #0
   11e94:	popne	{r3, pc}
   11e98:	bl	140a0 <close_stdout@@Base+0x2434>
   11e9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea0:	mov	r4, r1
   11ea4:	mov	r8, r2
   11ea8:	mov	fp, r0
   11eac:	bl	11d84 <close_stdout@@Base+0x118>
   11eb0:	mov	sl, r0
   11eb4:	bl	11de0 <close_stdout@@Base+0x174>
   11eb8:	rsb	r7, fp, sl
   11ebc:	cmp	r0, #0
   11ec0:	add	r7, r7, r0
   11ec4:	moveq	sl, r0
   11ec8:	beq	11edc <close_stdout@@Base+0x270>
   11ecc:	add	sl, sl, r0
   11ed0:	ldrb	sl, [sl, #-1]
   11ed4:	subs	sl, sl, #47	; 0x2f
   11ed8:	movne	sl, #1
   11edc:	ldrb	r3, [r4]
   11ee0:	cmp	r3, #47	; 0x2f
   11ee4:	movne	r5, r4
   11ee8:	beq	11f5c <close_stdout@@Base+0x2f0>
   11eec:	mov	r0, r5
   11ef0:	bl	11104 <strlen@plt>
   11ef4:	mov	r6, r0
   11ef8:	add	r0, r7, #1
   11efc:	add	r0, r0, sl
   11f00:	add	r0, r0, r6
   11f04:	bl	110a4 <malloc@plt>
   11f08:	subs	r9, r0, #0
   11f0c:	beq	11f54 <close_stdout@@Base+0x2e8>
   11f10:	mov	r2, r7
   11f14:	mov	r1, fp
   11f18:	bl	110d4 <mempcpy@plt>
   11f1c:	cmp	r8, #0
   11f20:	mov	r2, #47	; 0x2f
   11f24:	strb	r2, [r0], sl
   11f28:	beq	11f40 <close_stdout@@Base+0x2d4>
   11f2c:	ldrb	r2, [r4]
   11f30:	cmp	r2, #47	; 0x2f
   11f34:	movne	r2, r0
   11f38:	subeq	r2, r0, #1
   11f3c:	str	r2, [r8]
   11f40:	mov	r1, r5
   11f44:	mov	r2, r6
   11f48:	bl	110d4 <mempcpy@plt>
   11f4c:	mov	r3, #0
   11f50:	strb	r3, [r0]
   11f54:	mov	r0, r9
   11f58:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f5c:	add	r3, r4, #1
   11f60:	mov	r5, r3
   11f64:	add	r3, r3, #1
   11f68:	ldrb	r2, [r5]
   11f6c:	cmp	r2, #47	; 0x2f
   11f70:	bne	11eec <close_stdout@@Base+0x280>
   11f74:	b	11f60 <close_stdout@@Base+0x2f4>
   11f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f7c:	mov	r9, r3
   11f80:	ldr	r4, [pc, #224]	; 12068 <close_stdout@@Base+0x3fc>
   11f84:	sub	sp, sp, #28
   11f88:	ldr	ip, [pc, #220]	; 1206c <close_stdout@@Base+0x400>
   11f8c:	cmp	r0, #2
   11f90:	add	r4, pc, r4
   11f94:	ldr	r5, [pc, #212]	; 12070 <close_stdout@@Base+0x404>
   11f98:	mov	r7, #0
   11f9c:	mov	sl, r2
   11fa0:	ldr	r6, [r4, ip]
   11fa4:	ldr	r8, [sp, #64]	; 0x40
   11fa8:	ldr	fp, [sp, #68]	; 0x44
   11fac:	ldr	r3, [r6]
   11fb0:	str	r3, [sp, #20]
   11fb4:	ldr	r5, [r4, r5]
   11fb8:	ldr	ip, [r5]
   11fbc:	str	r7, [r5]
   11fc0:	beq	11ff0 <close_stdout@@Base+0x384>
   11fc4:	ldr	r3, [pc, #168]	; 12074 <close_stdout@@Base+0x408>
   11fc8:	mov	r2, #0
   11fcc:	ldr	r0, [sp, #20]
   11fd0:	ldr	r1, [r6]
   11fd4:	str	ip, [r5]
   11fd8:	ldr	r3, [r4, r3]
   11fdc:	cmp	r0, r1
   11fe0:	str	r2, [r3]
   11fe4:	bne	12064 <close_stdout@@Base+0x3f8>
   11fe8:	add	sp, sp, #28
   11fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff0:	ldr	r2, [pc, #128]	; 12078 <close_stdout@@Base+0x40c>
   11ff4:	ldr	r3, [pc, #128]	; 1207c <close_stdout@@Base+0x410>
   11ff8:	str	r7, [sp]
   11ffc:	add	r2, pc, r2
   12000:	add	r3, pc, r3
   12004:	str	ip, [sp, #12]
   12008:	bl	110e0 <getopt_long@plt>
   1200c:	ldr	ip, [sp, #12]
   12010:	cmn	r0, #1
   12014:	beq	11fc4 <close_stdout@@Base+0x358>
   12018:	cmp	r0, #104	; 0x68
   1201c:	beq	12058 <close_stdout@@Base+0x3ec>
   12020:	cmp	r0, #118	; 0x76
   12024:	bne	11fc4 <close_stdout@@Base+0x358>
   12028:	ldr	ip, [pc, #80]	; 12080 <close_stdout@@Base+0x414>
   1202c:	add	r0, sp, #72	; 0x48
   12030:	str	r0, [sp, #16]
   12034:	mov	r1, sl
   12038:	mov	r2, r9
   1203c:	mov	r3, r8
   12040:	ldr	ip, [r4, ip]
   12044:	str	r0, [sp]
   12048:	ldr	r0, [ip]
   1204c:	bl	13d00 <close_stdout@@Base+0x2094>
   12050:	mov	r0, #0
   12054:	bl	110f8 <exit@plt>
   12058:	mov	r0, r7
   1205c:	blx	fp
   12060:	b	12028 <close_stdout@@Base+0x3bc>
   12064:	bl	10ffc <__stack_chk_fail@plt>
   12068:	andeq	r4, r1, r8, rrx
   1206c:	strdeq	r0, [r0], -r8
   12070:	andeq	r0, r0, ip, lsr #2
   12074:	strdeq	r0, [r0], -ip
   12078:	strdeq	r2, [r0], -r0
   1207c:	andeq	r3, r1, ip, lsr #29
   12080:	andeq	r0, r0, r4, lsl r1
   12084:	push	{r3, r4, r5, r6, r7, lr}
   12088:	subs	r4, r0, #0
   1208c:	ldr	r5, [pc, #172]	; 12140 <close_stdout@@Base+0x4d4>
   12090:	add	r5, pc, r5
   12094:	beq	1211c <close_stdout@@Base+0x4b0>
   12098:	mov	r1, #47	; 0x2f
   1209c:	bl	111ac <strrchr@plt>
   120a0:	subs	r6, r0, #0
   120a4:	beq	12100 <close_stdout@@Base+0x494>
   120a8:	add	r7, r6, #1
   120ac:	rsb	r3, r4, r7
   120b0:	cmp	r3, #6
   120b4:	ble	12100 <close_stdout@@Base+0x494>
   120b8:	ldr	r1, [pc, #132]	; 12144 <close_stdout@@Base+0x4d8>
   120bc:	sub	r0, r6, #6
   120c0:	mov	r2, #7
   120c4:	add	r1, pc, r1
   120c8:	bl	111e8 <strncmp@plt>
   120cc:	cmp	r0, #0
   120d0:	bne	12100 <close_stdout@@Base+0x494>
   120d4:	ldr	r1, [pc, #108]	; 12148 <close_stdout@@Base+0x4dc>
   120d8:	mov	r0, r7
   120dc:	mov	r2, #3
   120e0:	add	r1, pc, r1
   120e4:	bl	111e8 <strncmp@plt>
   120e8:	cmp	r0, #0
   120ec:	movne	r4, r7
   120f0:	ldreq	r3, [pc, #84]	; 1214c <close_stdout@@Base+0x4e0>
   120f4:	addeq	r4, r6, #4
   120f8:	ldreq	r3, [r5, r3]
   120fc:	streq	r4, [r3]
   12100:	ldr	r2, [pc, #72]	; 12150 <close_stdout@@Base+0x4e4>
   12104:	ldr	r3, [pc, #72]	; 12154 <close_stdout@@Base+0x4e8>
   12108:	ldr	r2, [r5, r2]
   1210c:	str	r4, [r2]
   12110:	ldr	r3, [r5, r3]
   12114:	str	r4, [r3]
   12118:	pop	{r3, r4, r5, r6, r7, pc}
   1211c:	ldr	r3, [pc, #52]	; 12158 <close_stdout@@Base+0x4ec>
   12120:	mov	r1, #1
   12124:	ldr	r0, [pc, #48]	; 1215c <close_stdout@@Base+0x4f0>
   12128:	mov	r2, #55	; 0x37
   1212c:	ldr	r3, [r5, r3]
   12130:	add	r0, pc, r0
   12134:	ldr	r3, [r3]
   12138:	bl	11038 <fwrite@plt>
   1213c:	bl	111f4 <abort@plt>
   12140:	andeq	r3, r1, r8, ror #30
   12144:	andeq	r3, r0, r8, ror r0
   12148:	andeq	r3, r0, r4, rrx
   1214c:	andeq	r0, r0, r0, lsr r1
   12150:	andeq	r0, r0, r4, lsr #2
   12154:	andeq	r0, r0, r0, lsr #2
   12158:	andeq	r0, r0, r4, lsl #2
   1215c:	ldrdeq	r2, [r0], -r4
   12160:	push	{r3, lr}
   12164:	mov	r3, r0
   12168:	mov	r2, #0
   1216c:	cmp	r1, #8
   12170:	str	r2, [r3], #4
   12174:	add	r3, r3, #4
   12178:	str	r2, [r0, #4]
   1217c:	str	r2, [r3], #4
   12180:	str	r2, [r3], #4
   12184:	str	r2, [r3], #4
   12188:	str	r2, [r3], #4
   1218c:	str	r2, [r3], #4
   12190:	str	r2, [r3], #4
   12194:	str	r2, [r3], #4
   12198:	str	r2, [r3], #4
   1219c:	str	r2, [r3], #4
   121a0:	str	r2, [r3]
   121a4:	beq	121b0 <close_stdout@@Base+0x544>
   121a8:	str	r1, [r0]
   121ac:	pop	{r3, pc}
   121b0:	bl	111f4 <abort@plt>
   121b4:	push	{r4, r5, r6, lr}
   121b8:	mov	r4, r0
   121bc:	mov	r6, r1
   121c0:	mov	r0, #0
   121c4:	mov	r1, r4
   121c8:	mov	r2, #5
   121cc:	bl	10ff0 <dcgettext@plt>
   121d0:	cmp	r0, r4
   121d4:	mov	r5, r0
   121d8:	beq	121e0 <close_stdout@@Base+0x574>
   121dc:	pop	{r4, r5, r6, pc}
   121e0:	bl	142ec <close_stdout@@Base+0x2680>
   121e4:	ldrb	r3, [r0]
   121e8:	bic	r3, r3, #32
   121ec:	cmp	r3, #85	; 0x55
   121f0:	bne	12264 <close_stdout@@Base+0x5f8>
   121f4:	ldrb	r3, [r0, #1]
   121f8:	bic	r3, r3, #32
   121fc:	cmp	r3, #84	; 0x54
   12200:	bne	12250 <close_stdout@@Base+0x5e4>
   12204:	ldrb	r3, [r0, #2]
   12208:	bic	r3, r3, #32
   1220c:	cmp	r3, #70	; 0x46
   12210:	bne	12250 <close_stdout@@Base+0x5e4>
   12214:	ldrb	r3, [r0, #3]
   12218:	cmp	r3, #45	; 0x2d
   1221c:	bne	12250 <close_stdout@@Base+0x5e4>
   12220:	ldrb	r3, [r0, #4]
   12224:	cmp	r3, #56	; 0x38
   12228:	bne	12250 <close_stdout@@Base+0x5e4>
   1222c:	ldrb	r3, [r0, #5]
   12230:	cmp	r3, #0
   12234:	bne	12250 <close_stdout@@Base+0x5e4>
   12238:	ldrb	r3, [r5]
   1223c:	cmp	r3, #96	; 0x60
   12240:	beq	122dc <close_stdout@@Base+0x670>
   12244:	ldr	r0, [pc, #180]	; 12300 <close_stdout@@Base+0x694>
   12248:	add	r0, pc, r0
   1224c:	pop	{r4, r5, r6, pc}
   12250:	cmp	r6, #7
   12254:	beq	122e8 <close_stdout@@Base+0x67c>
   12258:	ldr	r0, [pc, #164]	; 12304 <close_stdout@@Base+0x698>
   1225c:	add	r0, pc, r0
   12260:	pop	{r4, r5, r6, pc}
   12264:	cmp	r3, #71	; 0x47
   12268:	bne	12250 <close_stdout@@Base+0x5e4>
   1226c:	ldrb	r3, [r0, #1]
   12270:	bic	r3, r3, #32
   12274:	cmp	r3, #66	; 0x42
   12278:	bne	12250 <close_stdout@@Base+0x5e4>
   1227c:	ldrb	r3, [r0, #2]
   12280:	cmp	r3, #49	; 0x31
   12284:	bne	12250 <close_stdout@@Base+0x5e4>
   12288:	ldrb	r3, [r0, #3]
   1228c:	cmp	r3, #56	; 0x38
   12290:	bne	12250 <close_stdout@@Base+0x5e4>
   12294:	ldrb	r3, [r0, #4]
   12298:	cmp	r3, #48	; 0x30
   1229c:	bne	12250 <close_stdout@@Base+0x5e4>
   122a0:	ldrb	r3, [r0, #5]
   122a4:	cmp	r3, #51	; 0x33
   122a8:	bne	12250 <close_stdout@@Base+0x5e4>
   122ac:	ldrb	r3, [r0, #6]
   122b0:	cmp	r3, #48	; 0x30
   122b4:	bne	12250 <close_stdout@@Base+0x5e4>
   122b8:	ldrb	r3, [r0, #7]
   122bc:	cmp	r3, #0
   122c0:	bne	12250 <close_stdout@@Base+0x5e4>
   122c4:	ldrb	r3, [r5]
   122c8:	cmp	r3, #96	; 0x60
   122cc:	beq	122f4 <close_stdout@@Base+0x688>
   122d0:	ldr	r0, [pc, #48]	; 12308 <close_stdout@@Base+0x69c>
   122d4:	add	r0, pc, r0
   122d8:	pop	{r4, r5, r6, pc}
   122dc:	ldr	r0, [pc, #40]	; 1230c <close_stdout@@Base+0x6a0>
   122e0:	add	r0, pc, r0
   122e4:	pop	{r4, r5, r6, pc}
   122e8:	ldr	r0, [pc, #32]	; 12310 <close_stdout@@Base+0x6a4>
   122ec:	add	r0, pc, r0
   122f0:	pop	{r4, r5, r6, pc}
   122f4:	ldr	r0, [pc, #24]	; 12314 <close_stdout@@Base+0x6a8>
   122f8:	add	r0, pc, r0
   122fc:	pop	{r4, r5, r6, pc}
   12300:	andeq	r2, r0, r0, lsr #30
   12304:	andeq	r2, r0, r4, lsl pc
   12308:	muleq	r0, r8, lr
   1230c:	muleq	r0, ip, lr
   12310:	andeq	r2, r0, r8, lsl #29
   12314:	andeq	r2, r0, r0, lsl #29
   12318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1231c:	sub	sp, sp, #124	; 0x7c
   12320:	ldr	ip, [pc, #3304]	; 13010 <close_stdout@@Base+0x13a4>
   12324:	mov	sl, r1
   12328:	str	r0, [sp, #40]	; 0x28
   1232c:	mov	r8, r3
   12330:	ldr	r0, [pc, #3292]	; 13014 <close_stdout@@Base+0x13a8>
   12334:	add	ip, pc, ip
   12338:	str	r2, [sp, #32]
   1233c:	ldr	r1, [sp, #164]	; 0xa4
   12340:	mov	r3, ip
   12344:	ldr	r0, [ip, r0]
   12348:	ldr	r2, [sp, #172]	; 0xac
   1234c:	ubfx	r1, r1, #1, #1
   12350:	str	r1, [sp, #36]	; 0x24
   12354:	str	r0, [sp, #56]	; 0x38
   12358:	ldr	r0, [sp, #168]	; 0xa8
   1235c:	ldr	r1, [sp, #176]	; 0xb0
   12360:	str	r2, [sp, #72]	; 0x48
   12364:	str	r0, [sp, #48]	; 0x30
   12368:	ldr	r0, [sp, #56]	; 0x38
   1236c:	str	r1, [sp, #68]	; 0x44
   12370:	ldr	r3, [r0]
   12374:	str	r3, [sp, #116]	; 0x74
   12378:	bl	11050 <__ctype_get_mb_cur_max@plt>
   1237c:	ldr	r2, [sp, #160]	; 0xa0
   12380:	str	r0, [sp, #64]	; 0x40
   12384:	cmp	r2, #8
   12388:	addls	pc, pc, r2, lsl #2
   1238c:	b	12eec <close_stdout@@Base+0x1280>
   12390:	b	123b4 <close_stdout@@Base+0x748>
   12394:	b	12c04 <close_stdout@@Base+0xf98>
   12398:	b	12c34 <close_stdout@@Base+0xfc8>
   1239c:	b	12ae4 <close_stdout@@Base+0xe78>
   123a0:	b	12b24 <close_stdout@@Base+0xeb8>
   123a4:	b	12b50 <close_stdout@@Base+0xee4>
   123a8:	b	12b70 <close_stdout@@Base+0xf04>
   123ac:	b	12b70 <close_stdout@@Base+0xf04>
   123b0:	b	12b70 <close_stdout@@Base+0xf04>
   123b4:	mov	r2, #0
   123b8:	str	r2, [sp, #36]	; 0x24
   123bc:	mov	r9, r2
   123c0:	str	r2, [sp, #24]
   123c4:	str	r2, [sp, #28]
   123c8:	str	r2, [sp, #52]	; 0x34
   123cc:	ldr	r0, [sp, #36]	; 0x24
   123d0:	mov	fp, #0
   123d4:	ldr	r1, [sp, #24]
   123d8:	eor	r2, r0, #1
   123dc:	eor	r3, r1, #1
   123e0:	and	r3, r2, r3
   123e4:	and	r2, r1, r0
   123e8:	str	r3, [sp, #44]	; 0x2c
   123ec:	str	r2, [sp, #76]	; 0x4c
   123f0:	cmn	r8, #1
   123f4:	beq	12774 <close_stdout@@Base+0xb08>
   123f8:	subs	r3, fp, r8
   123fc:	movne	r3, #1
   12400:	cmp	r3, #0
   12404:	beq	1278c <close_stdout@@Base+0xb20>
   12408:	ldr	r3, [sp, #28]
   1240c:	ldr	r0, [sp, #24]
   12410:	adds	r7, r3, #0
   12414:	movne	r7, #1
   12418:	ands	r6, r7, r0
   1241c:	bne	12c78 <close_stdout@@Base+0x100c>
   12420:	ldr	r1, [sp, #32]
   12424:	add	r5, r1, fp
   12428:	ldrb	r4, [r5]
   1242c:	cmp	r4, #126	; 0x7e
   12430:	addls	pc, pc, r4, lsl #2
   12434:	b	129f8 <close_stdout@@Base+0xd8c>
   12438:	b	12904 <close_stdout@@Base+0xc98>
   1243c:	b	129f8 <close_stdout@@Base+0xd8c>
   12440:	b	129f8 <close_stdout@@Base+0xd8c>
   12444:	b	129f8 <close_stdout@@Base+0xd8c>
   12448:	b	129f8 <close_stdout@@Base+0xd8c>
   1244c:	b	129f8 <close_stdout@@Base+0xd8c>
   12450:	b	129f8 <close_stdout@@Base+0xd8c>
   12454:	b	128ec <close_stdout@@Base+0xc80>
   12458:	b	128d4 <close_stdout@@Base+0xc68>
   1245c:	b	128fc <close_stdout@@Base+0xc90>
   12460:	b	128f4 <close_stdout@@Base+0xc88>
   12464:	b	128e4 <close_stdout@@Base+0xc78>
   12468:	b	128dc <close_stdout@@Base+0xc70>
   1246c:	b	128a0 <close_stdout@@Base+0xc34>
   12470:	b	129f8 <close_stdout@@Base+0xd8c>
   12474:	b	129f8 <close_stdout@@Base+0xd8c>
   12478:	b	129f8 <close_stdout@@Base+0xd8c>
   1247c:	b	129f8 <close_stdout@@Base+0xd8c>
   12480:	b	129f8 <close_stdout@@Base+0xd8c>
   12484:	b	129f8 <close_stdout@@Base+0xd8c>
   12488:	b	129f8 <close_stdout@@Base+0xd8c>
   1248c:	b	129f8 <close_stdout@@Base+0xd8c>
   12490:	b	129f8 <close_stdout@@Base+0xd8c>
   12494:	b	129f8 <close_stdout@@Base+0xd8c>
   12498:	b	129f8 <close_stdout@@Base+0xd8c>
   1249c:	b	129f8 <close_stdout@@Base+0xd8c>
   124a0:	b	129f8 <close_stdout@@Base+0xd8c>
   124a4:	b	129f8 <close_stdout@@Base+0xd8c>
   124a8:	b	129f8 <close_stdout@@Base+0xd8c>
   124ac:	b	129f8 <close_stdout@@Base+0xd8c>
   124b0:	b	129f8 <close_stdout@@Base+0xd8c>
   124b4:	b	129f8 <close_stdout@@Base+0xd8c>
   124b8:	b	1282c <close_stdout@@Base+0xbc0>
   124bc:	b	1282c <close_stdout@@Base+0xbc0>
   124c0:	b	1282c <close_stdout@@Base+0xbc0>
   124c4:	b	12824 <close_stdout@@Base+0xbb8>
   124c8:	b	1282c <close_stdout@@Base+0xbc0>
   124cc:	b	12700 <close_stdout@@Base+0xa94>
   124d0:	b	1282c <close_stdout@@Base+0xbc0>
   124d4:	b	129a0 <close_stdout@@Base+0xd34>
   124d8:	b	1282c <close_stdout@@Base+0xbc0>
   124dc:	b	1282c <close_stdout@@Base+0xbc0>
   124e0:	b	1282c <close_stdout@@Base+0xbc0>
   124e4:	b	12700 <close_stdout@@Base+0xa94>
   124e8:	b	12700 <close_stdout@@Base+0xa94>
   124ec:	b	12700 <close_stdout@@Base+0xa94>
   124f0:	b	12700 <close_stdout@@Base+0xa94>
   124f4:	b	12700 <close_stdout@@Base+0xa94>
   124f8:	b	12700 <close_stdout@@Base+0xa94>
   124fc:	b	12700 <close_stdout@@Base+0xa94>
   12500:	b	12700 <close_stdout@@Base+0xa94>
   12504:	b	12700 <close_stdout@@Base+0xa94>
   12508:	b	12700 <close_stdout@@Base+0xa94>
   1250c:	b	12700 <close_stdout@@Base+0xa94>
   12510:	b	12700 <close_stdout@@Base+0xa94>
   12514:	b	12700 <close_stdout@@Base+0xa94>
   12518:	b	12700 <close_stdout@@Base+0xa94>
   1251c:	b	12700 <close_stdout@@Base+0xa94>
   12520:	b	12700 <close_stdout@@Base+0xa94>
   12524:	b	1282c <close_stdout@@Base+0xbc0>
   12528:	b	1282c <close_stdout@@Base+0xbc0>
   1252c:	b	1282c <close_stdout@@Base+0xbc0>
   12530:	b	1282c <close_stdout@@Base+0xbc0>
   12534:	b	12634 <close_stdout@@Base+0x9c8>
   12538:	b	129f8 <close_stdout@@Base+0xd8c>
   1253c:	b	12700 <close_stdout@@Base+0xa94>
   12540:	b	12700 <close_stdout@@Base+0xa94>
   12544:	b	12700 <close_stdout@@Base+0xa94>
   12548:	b	12700 <close_stdout@@Base+0xa94>
   1254c:	b	12700 <close_stdout@@Base+0xa94>
   12550:	b	12700 <close_stdout@@Base+0xa94>
   12554:	b	12700 <close_stdout@@Base+0xa94>
   12558:	b	12700 <close_stdout@@Base+0xa94>
   1255c:	b	12700 <close_stdout@@Base+0xa94>
   12560:	b	12700 <close_stdout@@Base+0xa94>
   12564:	b	12700 <close_stdout@@Base+0xa94>
   12568:	b	12700 <close_stdout@@Base+0xa94>
   1256c:	b	12700 <close_stdout@@Base+0xa94>
   12570:	b	12700 <close_stdout@@Base+0xa94>
   12574:	b	12700 <close_stdout@@Base+0xa94>
   12578:	b	12700 <close_stdout@@Base+0xa94>
   1257c:	b	12700 <close_stdout@@Base+0xa94>
   12580:	b	12700 <close_stdout@@Base+0xa94>
   12584:	b	12700 <close_stdout@@Base+0xa94>
   12588:	b	12700 <close_stdout@@Base+0xa94>
   1258c:	b	12700 <close_stdout@@Base+0xa94>
   12590:	b	12700 <close_stdout@@Base+0xa94>
   12594:	b	12700 <close_stdout@@Base+0xa94>
   12598:	b	12700 <close_stdout@@Base+0xa94>
   1259c:	b	12700 <close_stdout@@Base+0xa94>
   125a0:	b	12700 <close_stdout@@Base+0xa94>
   125a4:	b	1282c <close_stdout@@Base+0xbc0>
   125a8:	b	12984 <close_stdout@@Base+0xd18>
   125ac:	b	12700 <close_stdout@@Base+0xa94>
   125b0:	b	1282c <close_stdout@@Base+0xbc0>
   125b4:	b	12700 <close_stdout@@Base+0xa94>
   125b8:	b	1282c <close_stdout@@Base+0xbc0>
   125bc:	b	12700 <close_stdout@@Base+0xa94>
   125c0:	b	12700 <close_stdout@@Base+0xa94>
   125c4:	b	12700 <close_stdout@@Base+0xa94>
   125c8:	b	12700 <close_stdout@@Base+0xa94>
   125cc:	b	12700 <close_stdout@@Base+0xa94>
   125d0:	b	12700 <close_stdout@@Base+0xa94>
   125d4:	b	12700 <close_stdout@@Base+0xa94>
   125d8:	b	12700 <close_stdout@@Base+0xa94>
   125dc:	b	12700 <close_stdout@@Base+0xa94>
   125e0:	b	12700 <close_stdout@@Base+0xa94>
   125e4:	b	12700 <close_stdout@@Base+0xa94>
   125e8:	b	12700 <close_stdout@@Base+0xa94>
   125ec:	b	12700 <close_stdout@@Base+0xa94>
   125f0:	b	12700 <close_stdout@@Base+0xa94>
   125f4:	b	12700 <close_stdout@@Base+0xa94>
   125f8:	b	12700 <close_stdout@@Base+0xa94>
   125fc:	b	12700 <close_stdout@@Base+0xa94>
   12600:	b	12700 <close_stdout@@Base+0xa94>
   12604:	b	12700 <close_stdout@@Base+0xa94>
   12608:	b	12700 <close_stdout@@Base+0xa94>
   1260c:	b	12700 <close_stdout@@Base+0xa94>
   12610:	b	12700 <close_stdout@@Base+0xa94>
   12614:	b	12700 <close_stdout@@Base+0xa94>
   12618:	b	12700 <close_stdout@@Base+0xa94>
   1261c:	b	12700 <close_stdout@@Base+0xa94>
   12620:	b	12700 <close_stdout@@Base+0xa94>
   12624:	b	1280c <close_stdout@@Base+0xba0>
   12628:	b	1282c <close_stdout@@Base+0xbc0>
   1262c:	b	1280c <close_stdout@@Base+0xba0>
   12630:	b	12824 <close_stdout@@Base+0xbb8>
   12634:	ldr	r3, [sp, #160]	; 0xa0
   12638:	cmp	r3, #2
   1263c:	beq	12ec8 <close_stdout@@Base+0x125c>
   12640:	cmp	r3, #3
   12644:	bne	12700 <close_stdout@@Base+0xa94>
   12648:	ldr	r1, [sp, #164]	; 0xa4
   1264c:	tst	r1, #4
   12650:	beq	12700 <close_stdout@@Base+0xa94>
   12654:	add	r3, fp, #2
   12658:	cmp	r8, r3
   1265c:	bls	12700 <close_stdout@@Base+0xa94>
   12660:	ldrb	r2, [r5, #1]
   12664:	mov	r1, #1
   12668:	cmp	r2, #63	; 0x3f
   1266c:	bne	12700 <close_stdout@@Base+0xa94>
   12670:	ldr	r0, [sp, #32]
   12674:	ldrb	ip, [r0, r3]
   12678:	sub	r0, ip, #33	; 0x21
   1267c:	uxtb	r0, r0
   12680:	cmp	r0, #29
   12684:	bhi	12700 <close_stdout@@Base+0xa94>
   12688:	lsl	r1, r1, r0
   1268c:	movw	r0, #20929	; 0x51c1
   12690:	movt	r0, #14336	; 0x3800
   12694:	and	r0, r1, r0
   12698:	cmp	r0, #0
   1269c:	beq	12700 <close_stdout@@Base+0xa94>
   126a0:	ldr	r1, [sp, #36]	; 0x24
   126a4:	cmp	r1, #0
   126a8:	bne	12848 <close_stdout@@Base+0xbdc>
   126ac:	cmp	r9, sl
   126b0:	mov	r4, ip
   126b4:	mov	fp, r3
   126b8:	ldrcc	r0, [sp, #40]	; 0x28
   126bc:	strbcc	r2, [r0, r9]
   126c0:	add	r2, r9, #1
   126c4:	cmp	sl, r2
   126c8:	ldrhi	r0, [sp, #40]	; 0x28
   126cc:	movhi	r1, #34	; 0x22
   126d0:	strbhi	r1, [r0, r2]
   126d4:	add	r2, r9, #2
   126d8:	cmp	sl, r2
   126dc:	ldrhi	r0, [sp, #40]	; 0x28
   126e0:	movhi	r1, #34	; 0x22
   126e4:	strbhi	r1, [r0, r2]
   126e8:	add	r2, r9, #3
   126ec:	cmp	sl, r2
   126f0:	add	r9, r9, #4
   126f4:	ldrhi	r0, [sp, #40]	; 0x28
   126f8:	movhi	r1, #63	; 0x3f
   126fc:	strbhi	r1, [r0, r2]
   12700:	ldr	r0, [sp, #44]	; 0x2c
   12704:	cmp	r0, #0
   12708:	bne	12730 <close_stdout@@Base+0xac4>
   1270c:	ldr	r1, [sp, #48]	; 0x30
   12710:	cmp	r1, #0
   12714:	beq	12730 <close_stdout@@Base+0xac4>
   12718:	ubfx	r2, r4, #5, #8
   1271c:	and	r3, r4, #31
   12720:	ldr	r2, [r1, r2, lsl #2]
   12724:	lsr	r3, r2, r3
   12728:	tst	r3, #1
   1272c:	bne	12738 <close_stdout@@Base+0xacc>
   12730:	cmp	r6, #0
   12734:	beq	12758 <close_stdout@@Base+0xaec>
   12738:	ldr	r2, [sp, #36]	; 0x24
   1273c:	cmp	r2, #0
   12740:	bne	12848 <close_stdout@@Base+0xbdc>
   12744:	cmp	r9, sl
   12748:	ldrcc	r0, [sp, #40]	; 0x28
   1274c:	movcc	r3, #92	; 0x5c
   12750:	strbcc	r3, [r0, r9]
   12754:	add	r9, r9, #1
   12758:	add	fp, fp, #1
   1275c:	cmp	r9, sl
   12760:	ldrcc	r1, [sp, #40]	; 0x28
   12764:	strbcc	r4, [r1, r9]
   12768:	cmn	r8, #1
   1276c:	add	r9, r9, #1
   12770:	bne	123f8 <close_stdout@@Base+0x78c>
   12774:	ldr	r2, [sp, #32]
   12778:	ldrb	r3, [r2, fp]
   1277c:	adds	r3, r3, #0
   12780:	movne	r3, #1
   12784:	cmp	r3, #0
   12788:	bne	12408 <close_stdout@@Base+0x79c>
   1278c:	ldr	r3, [sp, #160]	; 0xa0
   12790:	cmp	r9, #0
   12794:	cmpeq	r3, #2
   12798:	bne	127a8 <close_stdout@@Base+0xb3c>
   1279c:	ldr	r0, [sp, #36]	; 0x24
   127a0:	cmp	r0, #0
   127a4:	bne	12848 <close_stdout@@Base+0xbdc>
   127a8:	ldr	r1, [sp, #36]	; 0x24
   127ac:	ldr	r2, [sp, #52]	; 0x34
   127b0:	eor	r3, r1, #1
   127b4:	cmp	r2, #0
   127b8:	moveq	r3, #0
   127bc:	andne	r3, r3, #1
   127c0:	cmp	r3, #0
   127c4:	beq	127f0 <close_stdout@@Base+0xb84>
   127c8:	ldrb	r3, [r2]
   127cc:	cmp	r3, #0
   127d0:	beq	127f0 <close_stdout@@Base+0xb84>
   127d4:	ldr	r1, [sp, #40]	; 0x28
   127d8:	cmp	sl, r9
   127dc:	strbhi	r3, [r1, r9]
   127e0:	ldrb	r3, [r2, #1]!
   127e4:	add	r9, r9, #1
   127e8:	cmp	r3, #0
   127ec:	bne	127d8 <close_stdout@@Base+0xb6c>
   127f0:	cmp	r9, sl
   127f4:	movcs	r0, r9
   127f8:	ldrcc	r1, [sp, #40]	; 0x28
   127fc:	movcc	r3, #0
   12800:	movcc	r0, r9
   12804:	strbcc	r3, [r1, r9]
   12808:	b	12884 <close_stdout@@Base+0xc18>
   1280c:	cmn	r8, #1
   12810:	beq	12ed8 <close_stdout@@Base+0x126c>
   12814:	subs	r3, r8, #1
   12818:	movne	r3, #1
   1281c:	cmp	r3, #0
   12820:	bne	12700 <close_stdout@@Base+0xa94>
   12824:	cmp	fp, #0
   12828:	bne	12700 <close_stdout@@Base+0xa94>
   1282c:	ldr	r3, [sp, #36]	; 0x24
   12830:	ldr	r0, [sp, #160]	; 0xa0
   12834:	cmp	r0, #2
   12838:	movne	r3, #0
   1283c:	andeq	r3, r3, #1
   12840:	cmp	r3, #0
   12844:	beq	12700 <close_stdout@@Base+0xa94>
   12848:	ldr	r2, [sp, #164]	; 0xa4
   1284c:	mov	ip, #0
   12850:	ldr	r0, [sp, #160]	; 0xa0
   12854:	bic	r3, r2, #2
   12858:	ldr	r1, [sp, #72]	; 0x48
   1285c:	ldr	r2, [sp, #68]	; 0x44
   12860:	stm	sp, {r0, r3}
   12864:	mov	r3, r8
   12868:	str	r1, [sp, #12]
   1286c:	mov	r1, sl
   12870:	str	r2, [sp, #16]
   12874:	ldr	r0, [sp, #40]	; 0x28
   12878:	ldr	r2, [sp, #32]
   1287c:	str	ip, [sp, #8]
   12880:	bl	12318 <close_stdout@@Base+0x6ac>
   12884:	ldr	r1, [sp, #56]	; 0x38
   12888:	ldr	r2, [sp, #116]	; 0x74
   1288c:	ldr	r3, [r1]
   12890:	cmp	r2, r3
   12894:	bne	12fc8 <close_stdout@@Base+0x135c>
   12898:	add	sp, sp, #124	; 0x7c
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a0:	mov	r3, #114	; 0x72
   128a4:	ldr	r2, [sp, #36]	; 0x24
   128a8:	ldr	r0, [sp, #160]	; 0xa0
   128ac:	cmp	r0, #2
   128b0:	movne	r2, #0
   128b4:	andeq	r2, r2, #1
   128b8:	cmp	r2, #0
   128bc:	bne	12848 <close_stdout@@Base+0xbdc>
   128c0:	ldr	r1, [sp, #24]
   128c4:	cmp	r1, #0
   128c8:	beq	12700 <close_stdout@@Base+0xa94>
   128cc:	mov	r4, r3
   128d0:	b	12738 <close_stdout@@Base+0xacc>
   128d4:	mov	r3, #98	; 0x62
   128d8:	b	128c0 <close_stdout@@Base+0xc54>
   128dc:	mov	r3, #102	; 0x66
   128e0:	b	128c0 <close_stdout@@Base+0xc54>
   128e4:	mov	r3, #118	; 0x76
   128e8:	b	128c0 <close_stdout@@Base+0xc54>
   128ec:	mov	r3, #97	; 0x61
   128f0:	b	128c0 <close_stdout@@Base+0xc54>
   128f4:	mov	r3, #110	; 0x6e
   128f8:	b	128a4 <close_stdout@@Base+0xc38>
   128fc:	mov	r3, #116	; 0x74
   12900:	b	128a4 <close_stdout@@Base+0xc38>
   12904:	ldr	r2, [sp, #24]
   12908:	cmp	r2, #0
   1290c:	beq	12eb4 <close_stdout@@Base+0x1248>
   12910:	ldr	r3, [sp, #36]	; 0x24
   12914:	cmp	r3, #0
   12918:	bne	12848 <close_stdout@@Base+0xbdc>
   1291c:	cmp	r9, sl
   12920:	add	r2, r9, #1
   12924:	ldrcc	r0, [sp, #40]	; 0x28
   12928:	movcc	r3, #92	; 0x5c
   1292c:	strbcc	r3, [r0, r9]
   12930:	add	r3, fp, #1
   12934:	cmp	r8, r3
   12938:	bls	12978 <close_stdout@@Base+0xd0c>
   1293c:	ldr	r1, [sp, #32]
   12940:	ldrb	r3, [r1, r3]
   12944:	sub	r3, r3, #48	; 0x30
   12948:	cmp	r3, #9
   1294c:	bhi	12978 <close_stdout@@Base+0xd0c>
   12950:	cmp	sl, r2
   12954:	ldrhi	r0, [sp, #40]	; 0x28
   12958:	movhi	r3, #48	; 0x30
   1295c:	strbhi	r3, [r0, r2]
   12960:	add	r3, r9, #2
   12964:	cmp	sl, r3
   12968:	ldrhi	r1, [sp, #40]	; 0x28
   1296c:	movhi	r2, #48	; 0x30
   12970:	strbhi	r2, [r1, r3]
   12974:	add	r2, r9, #3
   12978:	mov	r9, r2
   1297c:	mov	r4, #48	; 0x30
   12980:	b	1270c <close_stdout@@Base+0xaa0>
   12984:	ldr	r1, [sp, #76]	; 0x4c
   12988:	cmp	r1, #0
   1298c:	beq	12998 <close_stdout@@Base+0xd2c>
   12990:	cmp	r7, #0
   12994:	bne	12758 <close_stdout@@Base+0xaec>
   12998:	mov	r3, r4
   1299c:	b	128a4 <close_stdout@@Base+0xc38>
   129a0:	ldr	r1, [sp, #160]	; 0xa0
   129a4:	cmp	r1, #2
   129a8:	bne	12700 <close_stdout@@Base+0xa94>
   129ac:	ldr	r2, [sp, #36]	; 0x24
   129b0:	cmp	r2, #0
   129b4:	bne	12848 <close_stdout@@Base+0xbdc>
   129b8:	cmp	r9, sl
   129bc:	ldrcc	r0, [sp, #40]	; 0x28
   129c0:	movcc	r3, #39	; 0x27
   129c4:	strbcc	r3, [r0, r9]
   129c8:	add	r3, r9, #1
   129cc:	cmp	sl, r3
   129d0:	ldrhi	r1, [sp, #40]	; 0x28
   129d4:	movhi	r2, #92	; 0x5c
   129d8:	strbhi	r2, [r1, r3]
   129dc:	add	r3, r9, #2
   129e0:	cmp	sl, r3
   129e4:	add	r9, r9, #3
   129e8:	ldrhi	r0, [sp, #40]	; 0x28
   129ec:	movhi	r2, #39	; 0x27
   129f0:	strbhi	r2, [r0, r3]
   129f4:	b	12700 <close_stdout@@Base+0xa94>
   129f8:	ldr	r1, [sp, #64]	; 0x40
   129fc:	cmp	r1, #1
   12a00:	bne	12cf8 <close_stdout@@Base+0x108c>
   12a04:	bl	110ec <__ctype_b_loc@plt>
   12a08:	ldr	r2, [sp, #64]	; 0x40
   12a0c:	sxth	r3, r4
   12a10:	str	r2, [sp, #60]	; 0x3c
   12a14:	lsl	r3, r3, #1
   12a18:	ldr	r2, [r0]
   12a1c:	ldrh	r2, [r2, r3]
   12a20:	eor	r2, r2, #16384	; 0x4000
   12a24:	ubfx	r2, r2, #14, #1
   12a28:	ldr	r1, [sp, #24]
   12a2c:	ands	r2, r2, r1
   12a30:	beq	12700 <close_stdout@@Base+0xa94>
   12a34:	ldr	r3, [sp, #60]	; 0x3c
   12a38:	mov	r0, #92	; 0x5c
   12a3c:	ldr	r7, [sp, #36]	; 0x24
   12a40:	add	r1, r3, fp
   12a44:	str	r8, [sp, #60]	; 0x3c
   12a48:	ldr	r3, [sp, #40]	; 0x28
   12a4c:	b	12ab0 <close_stdout@@Base+0xe44>
   12a50:	cmp	r7, #0
   12a54:	bne	12ef0 <close_stdout@@Base+0x1284>
   12a58:	add	ip, r9, #1
   12a5c:	cmp	r9, sl
   12a60:	strbcc	r0, [r3, r9]
   12a64:	cmp	sl, ip
   12a68:	lsrhi	r8, r4, #6
   12a6c:	addhi	r8, r8, #48	; 0x30
   12a70:	strbhi	r8, [r3, ip]
   12a74:	add	ip, r9, #2
   12a78:	add	r9, r9, #3
   12a7c:	cmp	sl, ip
   12a80:	ubfxhi	r8, r4, #3, #3
   12a84:	and	r4, r4, #7
   12a88:	add	r4, r4, #48	; 0x30
   12a8c:	addhi	r8, r8, #48	; 0x30
   12a90:	strbhi	r8, [r3, ip]
   12a94:	add	fp, fp, #1
   12a98:	cmp	r1, fp
   12a9c:	bls	12adc <close_stdout@@Base+0xe70>
   12aa0:	cmp	r9, sl
   12aa4:	strbcc	r4, [r3, r9]
   12aa8:	ldrb	r4, [r5, #1]!
   12aac:	add	r9, r9, #1
   12ab0:	cmp	r2, #0
   12ab4:	bne	12a50 <close_stdout@@Base+0xde4>
   12ab8:	cmp	r6, #0
   12abc:	beq	12a94 <close_stdout@@Base+0xe28>
   12ac0:	add	fp, fp, #1
   12ac4:	cmp	r9, sl
   12ac8:	strbcc	r0, [r3, r9]
   12acc:	cmp	r1, fp
   12ad0:	add	r9, r9, #1
   12ad4:	mov	r6, #0
   12ad8:	bhi	12aa0 <close_stdout@@Base+0xe34>
   12adc:	ldr	r8, [sp, #60]	; 0x3c
   12ae0:	b	1275c <close_stdout@@Base+0xaf0>
   12ae4:	ldr	r3, [sp, #36]	; 0x24
   12ae8:	cmp	r3, #0
   12aec:	bne	12ff0 <close_stdout@@Base+0x1384>
   12af0:	cmp	sl, #0
   12af4:	beq	12f08 <close_stdout@@Base+0x129c>
   12af8:	ldr	r1, [sp, #40]	; 0x28
   12afc:	mov	r0, #1
   12b00:	ldr	r2, [pc, #1296]	; 13018 <close_stdout@@Base+0x13ac>
   12b04:	mov	r3, #34	; 0x22
   12b08:	str	r0, [sp, #24]
   12b0c:	mov	r9, r0
   12b10:	add	r2, pc, r2
   12b14:	str	r0, [sp, #28]
   12b18:	strb	r3, [r1]
   12b1c:	str	r2, [sp, #52]	; 0x34
   12b20:	b	123cc <close_stdout@@Base+0x760>
   12b24:	ldr	r3, [pc, #1264]	; 1301c <close_stdout@@Base+0x13b0>
   12b28:	mov	r2, #1
   12b2c:	mov	r0, #3
   12b30:	str	r2, [sp, #36]	; 0x24
   12b34:	add	r3, pc, r3
   12b38:	str	r2, [sp, #24]
   12b3c:	str	r3, [sp, #52]	; 0x34
   12b40:	mov	r9, #0
   12b44:	str	r2, [sp, #28]
   12b48:	str	r0, [sp, #160]	; 0xa0
   12b4c:	b	123cc <close_stdout@@Base+0x760>
   12b50:	mov	r0, #0
   12b54:	mov	r1, #1
   12b58:	str	r0, [sp, #36]	; 0x24
   12b5c:	mov	r9, r0
   12b60:	str	r1, [sp, #24]
   12b64:	str	r0, [sp, #28]
   12b68:	str	r0, [sp, #52]	; 0x34
   12b6c:	b	123cc <close_stdout@@Base+0x760>
   12b70:	ldr	r3, [sp, #160]	; 0xa0
   12b74:	cmp	r3, #8
   12b78:	beq	12ba4 <close_stdout@@Base+0xf38>
   12b7c:	ldr	r0, [pc, #1180]	; 13020 <close_stdout@@Base+0x13b4>
   12b80:	mov	r1, r3
   12b84:	add	r0, pc, r0
   12b88:	bl	121b4 <close_stdout@@Base+0x548>
   12b8c:	ldr	r1, [sp, #160]	; 0xa0
   12b90:	str	r0, [sp, #72]	; 0x48
   12b94:	ldr	r0, [pc, #1160]	; 13024 <close_stdout@@Base+0x13b8>
   12b98:	add	r0, pc, r0
   12b9c:	bl	121b4 <close_stdout@@Base+0x548>
   12ba0:	str	r0, [sp, #68]	; 0x44
   12ba4:	ldr	r0, [sp, #36]	; 0x24
   12ba8:	cmp	r0, #0
   12bac:	movne	r9, #0
   12bb0:	bne	12be8 <close_stdout@@Base+0xf7c>
   12bb4:	ldr	r1, [sp, #72]	; 0x48
   12bb8:	ldrb	r3, [r1]
   12bbc:	cmp	r3, #0
   12bc0:	beq	12fc0 <close_stdout@@Base+0x1354>
   12bc4:	mov	r2, r1
   12bc8:	ldr	r1, [sp, #40]	; 0x28
   12bcc:	mov	r9, r0
   12bd0:	cmp	r9, sl
   12bd4:	strbcc	r3, [r1, r9]
   12bd8:	ldrb	r3, [r2, #1]!
   12bdc:	add	r9, r9, #1
   12be0:	cmp	r3, #0
   12be4:	bne	12bd0 <close_stdout@@Base+0xf64>
   12be8:	ldr	r0, [sp, #68]	; 0x44
   12bec:	str	r0, [sp, #52]	; 0x34
   12bf0:	bl	11104 <strlen@plt>
   12bf4:	mov	r2, #1
   12bf8:	str	r2, [sp, #24]
   12bfc:	str	r0, [sp, #28]
   12c00:	b	123cc <close_stdout@@Base+0x760>
   12c04:	ldr	r3, [pc, #1052]	; 13028 <close_stdout@@Base+0x13bc>
   12c08:	mov	r2, #0
   12c0c:	mov	r1, #1
   12c10:	mov	r0, #2
   12c14:	add	r3, pc, r3
   12c18:	str	r1, [sp, #36]	; 0x24
   12c1c:	str	r2, [sp, #24]
   12c20:	mov	r9, r2
   12c24:	str	r1, [sp, #28]
   12c28:	str	r3, [sp, #52]	; 0x34
   12c2c:	str	r0, [sp, #160]	; 0xa0
   12c30:	b	123cc <close_stdout@@Base+0x760>
   12c34:	ldr	r3, [sp, #36]	; 0x24
   12c38:	cmp	r3, #0
   12c3c:	bne	12fcc <close_stdout@@Base+0x1360>
   12c40:	cmp	sl, #0
   12c44:	beq	12f28 <close_stdout@@Base+0x12bc>
   12c48:	ldr	r1, [sp, #40]	; 0x28
   12c4c:	mov	r3, #39	; 0x27
   12c50:	ldr	r2, [sp, #36]	; 0x24
   12c54:	mov	r0, #1
   12c58:	mov	r9, r0
   12c5c:	str	r0, [sp, #28]
   12c60:	strb	r3, [r1]
   12c64:	ldr	r3, [pc, #960]	; 1302c <close_stdout@@Base+0x13c0>
   12c68:	str	r2, [sp, #24]
   12c6c:	add	r3, pc, r3
   12c70:	str	r3, [sp, #52]	; 0x34
   12c74:	b	123cc <close_stdout@@Base+0x760>
   12c78:	ldr	r2, [sp, #28]
   12c7c:	cmp	r2, #1
   12c80:	add	r4, fp, r2
   12c84:	movls	r3, #0
   12c88:	movhi	r3, #1
   12c8c:	cmn	r8, #1
   12c90:	movne	r3, #0
   12c94:	cmp	r3, #0
   12c98:	beq	12ca8 <close_stdout@@Base+0x103c>
   12c9c:	ldr	r0, [sp, #32]
   12ca0:	bl	11104 <strlen@plt>
   12ca4:	mov	r8, r0
   12ca8:	cmp	r8, r4
   12cac:	ldrcc	r3, [sp, #32]
   12cb0:	movcc	r6, #0
   12cb4:	addcc	r5, r3, fp
   12cb8:	bcc	12428 <close_stdout@@Base+0x7bc>
   12cbc:	ldr	r0, [sp, #32]
   12cc0:	ldr	r1, [sp, #52]	; 0x34
   12cc4:	add	r5, r0, fp
   12cc8:	ldr	r2, [sp, #28]
   12ccc:	mov	r0, r5
   12cd0:	bl	10fe4 <memcmp@plt>
   12cd4:	cmp	r0, #0
   12cd8:	bne	12cf0 <close_stdout@@Base+0x1084>
   12cdc:	ldr	r1, [sp, #36]	; 0x24
   12ce0:	cmp	r1, #0
   12ce4:	bne	12848 <close_stdout@@Base+0xbdc>
   12ce8:	mov	r6, #1
   12cec:	b	12428 <close_stdout@@Base+0x7bc>
   12cf0:	mov	r6, #0
   12cf4:	b	12428 <close_stdout@@Base+0x7bc>
   12cf8:	add	r7, sp, #108	; 0x6c
   12cfc:	cmn	r8, #1
   12d00:	mov	r3, #0
   12d04:	str	r3, [sp, #108]	; 0x6c
   12d08:	str	r3, [r7, #4]
   12d0c:	beq	12ef8 <close_stdout@@Base+0x128c>
   12d10:	mov	r1, #0
   12d14:	ldr	r0, [sp, #32]
   12d18:	mov	ip, #1
   12d1c:	str	r9, [sp, #88]	; 0x58
   12d20:	str	r6, [sp, #96]	; 0x60
   12d24:	mov	r9, r1
   12d28:	str	r5, [sp, #100]	; 0x64
   12d2c:	mov	r6, ip
   12d30:	mov	r5, r7
   12d34:	add	r3, sp, #104	; 0x68
   12d38:	sub	r0, r0, #1
   12d3c:	str	r3, [sp, #80]	; 0x50
   12d40:	str	r0, [sp, #84]	; 0x54
   12d44:	str	r1, [sp, #60]	; 0x3c
   12d48:	str	r4, [sp, #92]	; 0x5c
   12d4c:	ldr	r2, [sp, #32]
   12d50:	add	r7, r9, fp
   12d54:	add	r0, sp, #104	; 0x68
   12d58:	mov	r3, r5
   12d5c:	add	r4, r2, r7
   12d60:	rsb	r2, r7, r8
   12d64:	mov	r1, r4
   12d68:	bl	11074 <mbrtowc@plt>
   12d6c:	subs	r2, r0, #0
   12d70:	beq	12e7c <close_stdout@@Base+0x1210>
   12d74:	cmn	r2, #1
   12d78:	beq	12fa4 <close_stdout@@Base+0x1338>
   12d7c:	cmn	r2, #2
   12d80:	beq	12f48 <close_stdout@@Base+0x12dc>
   12d84:	ldr	r3, [sp, #36]	; 0x24
   12d88:	ldr	r0, [sp, #160]	; 0xa0
   12d8c:	cmp	r0, #2
   12d90:	movne	r3, #0
   12d94:	andeq	r3, r3, #1
   12d98:	cmp	r3, #0
   12d9c:	beq	12e58 <close_stdout@@Base+0x11ec>
   12da0:	cmp	r2, #1
   12da4:	beq	12e58 <close_stdout@@Base+0x11ec>
   12da8:	ldr	r1, [sp, #84]	; 0x54
   12dac:	add	r3, r1, r2
   12db0:	add	r7, r3, r7
   12db4:	ldrb	r3, [r4, #1]!
   12db8:	sub	r3, r3, #91	; 0x5b
   12dbc:	cmp	r3, #33	; 0x21
   12dc0:	addls	pc, pc, r3, lsl #2
   12dc4:	b	12e50 <close_stdout@@Base+0x11e4>
   12dc8:	b	12848 <close_stdout@@Base+0xbdc>
   12dcc:	b	12848 <close_stdout@@Base+0xbdc>
   12dd0:	b	12e50 <close_stdout@@Base+0x11e4>
   12dd4:	b	12848 <close_stdout@@Base+0xbdc>
   12dd8:	b	12e50 <close_stdout@@Base+0x11e4>
   12ddc:	b	12848 <close_stdout@@Base+0xbdc>
   12de0:	b	12e50 <close_stdout@@Base+0x11e4>
   12de4:	b	12e50 <close_stdout@@Base+0x11e4>
   12de8:	b	12e50 <close_stdout@@Base+0x11e4>
   12dec:	b	12e50 <close_stdout@@Base+0x11e4>
   12df0:	b	12e50 <close_stdout@@Base+0x11e4>
   12df4:	b	12e50 <close_stdout@@Base+0x11e4>
   12df8:	b	12e50 <close_stdout@@Base+0x11e4>
   12dfc:	b	12e50 <close_stdout@@Base+0x11e4>
   12e00:	b	12e50 <close_stdout@@Base+0x11e4>
   12e04:	b	12e50 <close_stdout@@Base+0x11e4>
   12e08:	b	12e50 <close_stdout@@Base+0x11e4>
   12e0c:	b	12e50 <close_stdout@@Base+0x11e4>
   12e10:	b	12e50 <close_stdout@@Base+0x11e4>
   12e14:	b	12e50 <close_stdout@@Base+0x11e4>
   12e18:	b	12e50 <close_stdout@@Base+0x11e4>
   12e1c:	b	12e50 <close_stdout@@Base+0x11e4>
   12e20:	b	12e50 <close_stdout@@Base+0x11e4>
   12e24:	b	12e50 <close_stdout@@Base+0x11e4>
   12e28:	b	12e50 <close_stdout@@Base+0x11e4>
   12e2c:	b	12e50 <close_stdout@@Base+0x11e4>
   12e30:	b	12e50 <close_stdout@@Base+0x11e4>
   12e34:	b	12e50 <close_stdout@@Base+0x11e4>
   12e38:	b	12e50 <close_stdout@@Base+0x11e4>
   12e3c:	b	12e50 <close_stdout@@Base+0x11e4>
   12e40:	b	12e50 <close_stdout@@Base+0x11e4>
   12e44:	b	12e50 <close_stdout@@Base+0x11e4>
   12e48:	b	12e50 <close_stdout@@Base+0x11e4>
   12e4c:	b	12848 <close_stdout@@Base+0xbdc>
   12e50:	cmp	r4, r7
   12e54:	bne	12db4 <close_stdout@@Base+0x1148>
   12e58:	ldr	r0, [sp, #104]	; 0x68
   12e5c:	add	r9, r9, r2
   12e60:	bl	1102c <iswprint@plt>
   12e64:	cmp	r0, #0
   12e68:	mov	r0, r5
   12e6c:	moveq	r6, #0
   12e70:	bl	10fcc <mbsinit@plt>
   12e74:	cmp	r0, #0
   12e78:	beq	12d4c <close_stdout@@Base+0x10e0>
   12e7c:	mov	ip, r6
   12e80:	eor	r2, ip, #1
   12e84:	str	r9, [sp, #60]	; 0x3c
   12e88:	ldr	r4, [sp, #92]	; 0x5c
   12e8c:	uxtb	r2, r2
   12e90:	ldr	r9, [sp, #88]	; 0x58
   12e94:	ldr	r6, [sp, #96]	; 0x60
   12e98:	ldr	r5, [sp, #100]	; 0x64
   12e9c:	ldr	r3, [sp, #60]	; 0x3c
   12ea0:	cmp	r3, #1
   12ea4:	bls	12a28 <close_stdout@@Base+0xdbc>
   12ea8:	ldr	r0, [sp, #24]
   12eac:	and	r2, r2, r0
   12eb0:	b	12a34 <close_stdout@@Base+0xdc8>
   12eb4:	ldr	r2, [sp, #164]	; 0xa4
   12eb8:	tst	r2, #1
   12ebc:	addne	fp, fp, #1
   12ec0:	bne	123f0 <close_stdout@@Base+0x784>
   12ec4:	b	12700 <close_stdout@@Base+0xa94>
   12ec8:	ldr	r0, [sp, #36]	; 0x24
   12ecc:	cmp	r0, #0
   12ed0:	beq	12700 <close_stdout@@Base+0xa94>
   12ed4:	b	12848 <close_stdout@@Base+0xbdc>
   12ed8:	ldr	r2, [sp, #32]
   12edc:	ldrb	r3, [r2, #1]
   12ee0:	adds	r3, r3, #0
   12ee4:	movne	r3, #1
   12ee8:	b	1281c <close_stdout@@Base+0xbb0>
   12eec:	bl	111f4 <abort@plt>
   12ef0:	ldr	r8, [sp, #60]	; 0x3c
   12ef4:	b	12848 <close_stdout@@Base+0xbdc>
   12ef8:	ldr	r0, [sp, #32]
   12efc:	bl	11104 <strlen@plt>
   12f00:	mov	r8, r0
   12f04:	b	12d10 <close_stdout@@Base+0x10a4>
   12f08:	ldr	r2, [pc, #288]	; 13030 <close_stdout@@Base+0x13c4>
   12f0c:	mov	r1, #1
   12f10:	mov	r9, r1
   12f14:	str	r1, [sp, #24]
   12f18:	add	r2, pc, r2
   12f1c:	str	r1, [sp, #28]
   12f20:	str	r2, [sp, #52]	; 0x34
   12f24:	b	123cc <close_stdout@@Base+0x760>
   12f28:	ldr	r2, [pc, #260]	; 13034 <close_stdout@@Base+0x13c8>
   12f2c:	mov	r3, #1
   12f30:	mov	r9, r3
   12f34:	str	r3, [sp, #28]
   12f38:	add	r2, pc, r2
   12f3c:	str	sl, [sp, #24]
   12f40:	str	r2, [sp, #52]	; 0x34
   12f44:	b	123cc <close_stdout@@Base+0x760>
   12f48:	cmp	r8, r7
   12f4c:	str	r9, [sp, #60]	; 0x3c
   12f50:	mov	ip, r4
   12f54:	ldr	r6, [sp, #96]	; 0x60
   12f58:	ldr	r9, [sp, #88]	; 0x58
   12f5c:	ldr	r4, [sp, #92]	; 0x5c
   12f60:	ldr	r5, [sp, #100]	; 0x64
   12f64:	bls	12f9c <close_stdout@@Base+0x1330>
   12f68:	ldrb	r3, [ip]
   12f6c:	cmp	r3, #0
   12f70:	beq	12f9c <close_stdout@@Base+0x1330>
   12f74:	ldr	r3, [sp, #60]	; 0x3c
   12f78:	b	12f88 <close_stdout@@Base+0x131c>
   12f7c:	ldrb	r2, [r5, r3]
   12f80:	cmp	r2, #0
   12f84:	beq	12f98 <close_stdout@@Base+0x132c>
   12f88:	add	r3, r3, #1
   12f8c:	add	r2, fp, r3
   12f90:	cmp	r8, r2
   12f94:	bhi	12f7c <close_stdout@@Base+0x1310>
   12f98:	str	r3, [sp, #60]	; 0x3c
   12f9c:	mov	r2, #1
   12fa0:	b	12e9c <close_stdout@@Base+0x1230>
   12fa4:	str	r9, [sp, #60]	; 0x3c
   12fa8:	mov	r2, #1
   12fac:	ldr	r4, [sp, #92]	; 0x5c
   12fb0:	ldr	r6, [sp, #96]	; 0x60
   12fb4:	ldr	r9, [sp, #88]	; 0x58
   12fb8:	ldr	r5, [sp, #100]	; 0x64
   12fbc:	b	12e9c <close_stdout@@Base+0x1230>
   12fc0:	ldr	r9, [sp, #36]	; 0x24
   12fc4:	b	12be8 <close_stdout@@Base+0xf7c>
   12fc8:	bl	10ffc <__stack_chk_fail@plt>
   12fcc:	ldr	r1, [pc, #100]	; 13038 <close_stdout@@Base+0x13cc>
   12fd0:	mov	r3, #0
   12fd4:	mov	r0, #1
   12fd8:	str	r3, [sp, #24]
   12fdc:	add	r1, pc, r1
   12fe0:	str	r0, [sp, #28]
   12fe4:	mov	r9, r3
   12fe8:	str	r1, [sp, #52]	; 0x34
   12fec:	b	123cc <close_stdout@@Base+0x760>
   12ff0:	ldr	r0, [pc, #68]	; 1303c <close_stdout@@Base+0x13d0>
   12ff4:	mov	r3, #1
   12ff8:	mov	r9, #0
   12ffc:	str	r3, [sp, #24]
   13000:	add	r0, pc, r0
   13004:	str	r3, [sp, #28]
   13008:	str	r0, [sp, #52]	; 0x34
   1300c:	b	123cc <close_stdout@@Base+0x760>
   13010:	andeq	r3, r1, r4, asr #25
   13014:	strdeq	r0, [r0], -r8
   13018:	andeq	r2, r0, r4, ror #12
   1301c:	andeq	r2, r0, r0, asr #12
   13020:	strdeq	r2, [r0], -ip
   13024:	ldrdeq	r2, [r0], -r8
   13028:	andeq	r2, r0, ip, asr r5
   1302c:	andeq	r2, r0, r4, lsl #10
   13030:	andeq	r2, r0, ip, asr r2
   13034:	andeq	r2, r0, r8, lsr r2
   13038:	muleq	r0, r4, r1
   1303c:	andeq	r2, r0, r4, ror r1
   13040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13044:	sub	sp, sp, #44	; 0x2c
   13048:	mov	r6, r0
   1304c:	mov	r9, r1
   13050:	mov	sl, r2
   13054:	mov	r4, r3
   13058:	bl	11128 <__errno_location@plt>
   1305c:	ldr	fp, [pc, #412]	; 13200 <close_stdout@@Base+0x1594>
   13060:	cmp	r6, #0
   13064:	add	fp, pc, fp
   13068:	ldr	r5, [fp]
   1306c:	ldr	r1, [r0]
   13070:	mov	r8, r0
   13074:	str	r1, [sp, #36]	; 0x24
   13078:	blt	131f8 <close_stdout@@Base+0x158c>
   1307c:	ldr	r3, [pc, #384]	; 13204 <close_stdout@@Base+0x1598>
   13080:	add	r3, pc, r3
   13084:	ldr	r3, [r3]
   13088:	cmp	r6, r3
   1308c:	bcc	130e0 <close_stdout@@Base+0x1474>
   13090:	add	r7, r6, #1
   13094:	cmn	r7, #-536870911	; 0xe0000001
   13098:	bhi	131fc <close_stdout@@Base+0x1590>
   1309c:	add	r3, fp, #4
   130a0:	cmp	r5, r3
   130a4:	beq	131d0 <close_stdout@@Base+0x1564>
   130a8:	mov	r0, r5
   130ac:	lsl	r1, r7, #3
   130b0:	bl	13ee4 <close_stdout@@Base+0x2278>
   130b4:	mov	r5, r0
   130b8:	str	r0, [fp]
   130bc:	ldr	fp, [pc, #324]	; 13208 <close_stdout@@Base+0x159c>
   130c0:	mov	r1, #0
   130c4:	add	fp, pc, fp
   130c8:	ldr	r0, [fp]
   130cc:	rsb	r2, r0, r7
   130d0:	add	r0, r5, r0, lsl #3
   130d4:	lsl	r2, r2, #3
   130d8:	bl	11140 <memset@plt>
   130dc:	str	r7, [fp]
   130e0:	add	r2, r4, #8
   130e4:	str	r2, [sp, #32]
   130e8:	ldr	r1, [r4]
   130ec:	add	fp, r5, r6, lsl #3
   130f0:	ldr	lr, [sp, #32]
   130f4:	mov	r2, r9
   130f8:	ldr	r3, [r4, #4]
   130fc:	ldr	ip, [r5, r6, lsl #3]
   13100:	ldr	r7, [fp, #4]
   13104:	orr	r3, r3, #1
   13108:	str	r1, [sp]
   1310c:	str	r3, [sp, #4]
   13110:	mov	r1, ip
   13114:	str	lr, [sp, #8]
   13118:	mov	r0, r7
   1311c:	ldr	lr, [r4, #40]	; 0x28
   13120:	str	r3, [sp, #28]
   13124:	mov	r3, sl
   13128:	str	lr, [sp, #12]
   1312c:	ldr	lr, [r4, #44]	; 0x2c
   13130:	str	ip, [sp, #24]
   13134:	str	lr, [sp, #16]
   13138:	bl	12318 <close_stdout@@Base+0x6ac>
   1313c:	ldr	ip, [sp, #24]
   13140:	cmp	ip, r0
   13144:	bhi	131bc <close_stdout@@Base+0x1550>
   13148:	ldr	r3, [pc, #188]	; 1320c <close_stdout@@Base+0x15a0>
   1314c:	add	r1, r0, #1
   13150:	str	r1, [r5, r6, lsl #3]
   13154:	add	r3, pc, r3
   13158:	cmp	r7, r3
   1315c:	beq	13170 <close_stdout@@Base+0x1504>
   13160:	mov	r0, r7
   13164:	str	r1, [sp, #24]
   13168:	bl	10f9c <free@plt>
   1316c:	ldr	r1, [sp, #24]
   13170:	mov	r0, r1
   13174:	str	r1, [sp, #24]
   13178:	bl	13e8c <close_stdout@@Base+0x2220>
   1317c:	ldr	r3, [sp, #28]
   13180:	ldr	lr, [sp, #32]
   13184:	mov	r2, r9
   13188:	str	r0, [fp, #4]
   1318c:	mov	r7, r0
   13190:	ldr	ip, [r4]
   13194:	str	r3, [sp, #4]
   13198:	mov	r3, sl
   1319c:	str	lr, [sp, #8]
   131a0:	str	ip, [sp]
   131a4:	ldr	ip, [r4, #40]	; 0x28
   131a8:	ldr	r1, [sp, #24]
   131ac:	str	ip, [sp, #12]
   131b0:	ldr	ip, [r4, #44]	; 0x2c
   131b4:	str	ip, [sp, #16]
   131b8:	bl	12318 <close_stdout@@Base+0x6ac>
   131bc:	ldr	r1, [sp, #36]	; 0x24
   131c0:	mov	r0, r7
   131c4:	str	r1, [r8]
   131c8:	add	sp, sp, #44	; 0x2c
   131cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d0:	lsl	r1, r7, #3
   131d4:	mov	r0, #0
   131d8:	str	r3, [sp, #24]
   131dc:	bl	13ee4 <close_stdout@@Base+0x2278>
   131e0:	ldr	r3, [sp, #24]
   131e4:	mov	r5, r0
   131e8:	ldm	r3, {r0, r1}
   131ec:	str	r5, [fp]
   131f0:	stm	r5, {r0, r1}
   131f4:	b	130bc <close_stdout@@Base+0x1450>
   131f8:	bl	111f4 <abort@plt>
   131fc:	bl	140a0 <close_stdout@@Base+0x2434>
   13200:	andeq	r3, r1, r8, lsl #2
   13204:	strheq	r3, [r1], -r8
   13208:	andeq	r3, r1, r4, ror r0
   1320c:	andeq	r3, r1, r4, lsr r0
   13210:	push	{r4, r5, r6, lr}
   13214:	mov	r5, r0
   13218:	bl	11128 <__errno_location@plt>
   1321c:	cmp	r5, #0
   13220:	mov	r1, #48	; 0x30
   13224:	mov	r4, r0
   13228:	ldr	r0, [pc, #24]	; 13248 <close_stdout@@Base+0x15dc>
   1322c:	ldr	r6, [r4]
   13230:	add	r0, pc, r0
   13234:	add	r0, r0, #256	; 0x100
   13238:	movne	r0, r5
   1323c:	bl	14060 <close_stdout@@Base+0x23f4>
   13240:	str	r6, [r4]
   13244:	pop	{r4, r5, r6, pc}
   13248:	andeq	r2, r1, r8, asr pc
   1324c:	cmp	r0, #0
   13250:	beq	1325c <close_stdout@@Base+0x15f0>
   13254:	ldr	r0, [r0]
   13258:	bx	lr
   1325c:	ldr	r0, [pc, #12]	; 13270 <close_stdout@@Base+0x1604>
   13260:	add	r0, pc, r0
   13264:	add	r0, r0, #256	; 0x100
   13268:	ldr	r0, [r0]
   1326c:	bx	lr
   13270:	andeq	r2, r1, r8, lsr #30
   13274:	cmp	r0, #0
   13278:	beq	13284 <close_stdout@@Base+0x1618>
   1327c:	str	r1, [r0]
   13280:	bx	lr
   13284:	ldr	r0, [pc, #12]	; 13298 <close_stdout@@Base+0x162c>
   13288:	add	r0, pc, r0
   1328c:	add	r0, r0, #256	; 0x100
   13290:	str	r1, [r0]
   13294:	bx	lr
   13298:	andeq	r2, r1, r0, lsl #30
   1329c:	cmp	r0, #0
   132a0:	movne	r3, r0
   132a4:	beq	132d4 <close_stdout@@Base+0x1668>
   132a8:	lsr	ip, r1, #5
   132ac:	and	r1, r1, #31
   132b0:	add	r3, r3, ip, lsl #2
   132b4:	ldr	ip, [r3, #8]
   132b8:	lsr	r0, ip, r1
   132bc:	eor	r2, r0, r2
   132c0:	and	r0, r0, #1
   132c4:	and	r2, r2, #1
   132c8:	eor	ip, ip, r2, lsl r1
   132cc:	str	ip, [r3, #8]
   132d0:	bx	lr
   132d4:	ldr	r3, [pc, #8]	; 132e4 <close_stdout@@Base+0x1678>
   132d8:	add	r3, pc, r3
   132dc:	add	r3, r3, #256	; 0x100
   132e0:	b	132a8 <close_stdout@@Base+0x163c>
   132e4:			; <UNDEFINED> instruction: 0x00012eb0
   132e8:	subs	r3, r0, #0
   132ec:	beq	132fc <close_stdout@@Base+0x1690>
   132f0:	ldr	r0, [r3, #4]
   132f4:	str	r1, [r3, #4]
   132f8:	bx	lr
   132fc:	ldr	r3, [pc, #8]	; 1330c <close_stdout@@Base+0x16a0>
   13300:	add	r3, pc, r3
   13304:	add	r3, r3, #256	; 0x100
   13308:	b	132f0 <close_stdout@@Base+0x1684>
   1330c:	andeq	r2, r1, r8, lsl #29
   13310:	cmp	r0, #0
   13314:	push	{r3, lr}
   13318:	beq	1333c <close_stdout@@Base+0x16d0>
   1331c:	cmp	r2, #0
   13320:	cmpne	r1, #0
   13324:	mov	r3, #8
   13328:	strne	r1, [r0, #40]	; 0x28
   1332c:	str	r3, [r0]
   13330:	strne	r2, [r0, #44]	; 0x2c
   13334:	popne	{r3, pc}
   13338:	bl	111f4 <abort@plt>
   1333c:	ldr	r0, [pc, #8]	; 1334c <close_stdout@@Base+0x16e0>
   13340:	add	r0, pc, r0
   13344:	add	r0, r0, #256	; 0x100
   13348:	b	1331c <close_stdout@@Base+0x16b0>
   1334c:	andeq	r2, r1, r8, asr #28
   13350:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13354:	sub	sp, sp, #24
   13358:	mov	r7, r0
   1335c:	mov	sl, r1
   13360:	ldr	r4, [sp, #56]	; 0x38
   13364:	mov	r9, r2
   13368:	mov	r8, r3
   1336c:	cmp	r4, #0
   13370:	beq	133c4 <close_stdout@@Base+0x1758>
   13374:	bl	11128 <__errno_location@plt>
   13378:	ldr	r3, [r4]
   1337c:	add	lr, r4, #8
   13380:	mov	r1, sl
   13384:	mov	r2, r9
   13388:	ldr	r6, [r0]
   1338c:	mov	r5, r0
   13390:	str	r3, [sp]
   13394:	mov	r0, r7
   13398:	ldr	ip, [r4, #4]
   1339c:	mov	r3, r8
   133a0:	stmib	sp, {ip, lr}
   133a4:	ldr	ip, [r4, #40]	; 0x28
   133a8:	str	ip, [sp, #12]
   133ac:	ldr	ip, [r4, #44]	; 0x2c
   133b0:	str	ip, [sp, #16]
   133b4:	bl	12318 <close_stdout@@Base+0x6ac>
   133b8:	str	r6, [r5]
   133bc:	add	sp, sp, #24
   133c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133c4:	ldr	r4, [pc, #8]	; 133d4 <close_stdout@@Base+0x1768>
   133c8:	add	r4, pc, r4
   133cc:	add	r4, r4, #256	; 0x100
   133d0:	b	13374 <close_stdout@@Base+0x1708>
   133d4:	andeq	r2, r1, r0, asr #27
   133d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133dc:	subs	r4, r3, #0
   133e0:	sub	sp, sp, #36	; 0x24
   133e4:	mov	r7, r0
   133e8:	mov	r6, r1
   133ec:	mov	r5, r2
   133f0:	beq	134ac <close_stdout@@Base+0x1840>
   133f4:	bl	11128 <__errno_location@plt>
   133f8:	ldr	r3, [r4]
   133fc:	ldr	sl, [r4, #4]
   13400:	add	r9, r4, #8
   13404:	mov	r8, r0
   13408:	mov	r0, #0
   1340c:	ldr	r2, [r8]
   13410:	cmp	r5, r0
   13414:	orreq	sl, sl, #1
   13418:	str	r9, [sp, #8]
   1341c:	mov	r1, r0
   13420:	stm	sp, {r3, sl}
   13424:	mov	r3, r6
   13428:	ldr	ip, [r4, #40]	; 0x28
   1342c:	str	r2, [sp, #28]
   13430:	mov	r2, r7
   13434:	str	ip, [sp, #12]
   13438:	ldr	ip, [r4, #44]	; 0x2c
   1343c:	str	ip, [sp, #16]
   13440:	bl	12318 <close_stdout@@Base+0x6ac>
   13444:	add	r1, r0, #1
   13448:	mov	fp, r0
   1344c:	str	r1, [sp, #24]
   13450:	mov	r0, r1
   13454:	bl	13e8c <close_stdout@@Base+0x2220>
   13458:	ldr	lr, [r4]
   1345c:	str	sl, [sp, #4]
   13460:	mov	r3, r6
   13464:	str	r9, [sp, #8]
   13468:	mov	r2, r7
   1346c:	str	lr, [sp]
   13470:	ldr	lr, [r4, #40]	; 0x28
   13474:	ldr	r1, [sp, #24]
   13478:	str	lr, [sp, #12]
   1347c:	ldr	lr, [r4, #44]	; 0x2c
   13480:	str	lr, [sp, #16]
   13484:	str	r0, [sp, #24]
   13488:	bl	12318 <close_stdout@@Base+0x6ac>
   1348c:	ldr	r3, [sp, #28]
   13490:	cmp	r5, #0
   13494:	str	r3, [r8]
   13498:	ldr	ip, [sp, #24]
   1349c:	strne	fp, [r5]
   134a0:	mov	r0, ip
   134a4:	add	sp, sp, #36	; 0x24
   134a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134ac:	ldr	r4, [pc, #8]	; 134bc <close_stdout@@Base+0x1850>
   134b0:	add	r4, pc, r4
   134b4:	add	r4, r4, #256	; 0x100
   134b8:	b	133f4 <close_stdout@@Base+0x1788>
   134bc:	ldrdeq	r2, [r1], -r8
   134c0:	mov	r3, r2
   134c4:	mov	r2, #0
   134c8:	b	133d8 <close_stdout@@Base+0x176c>
   134cc:	ldr	r2, [pc, #152]	; 1356c <close_stdout@@Base+0x1900>
   134d0:	push	{r3, r4, r5, r6, r7, lr}
   134d4:	add	r2, pc, r2
   134d8:	ldr	r3, [pc, #144]	; 13570 <close_stdout@@Base+0x1904>
   134dc:	ldr	r6, [r2]
   134e0:	add	r3, pc, r3
   134e4:	cmp	r6, #1
   134e8:	ldr	r7, [r3]
   134ec:	movhi	r4, #1
   134f0:	movhi	r5, r7
   134f4:	bls	13510 <close_stdout@@Base+0x18a4>
   134f8:	ldr	r0, [r5, #12]
   134fc:	add	r4, r4, #1
   13500:	bl	10f9c <free@plt>
   13504:	cmp	r4, r6
   13508:	add	r5, r5, #8
   1350c:	bne	134f8 <close_stdout@@Base+0x188c>
   13510:	ldr	r4, [pc, #92]	; 13574 <close_stdout@@Base+0x1908>
   13514:	ldr	r0, [r7, #4]
   13518:	add	r4, pc, r4
   1351c:	cmp	r0, r4
   13520:	beq	13538 <close_stdout@@Base+0x18cc>
   13524:	bl	10f9c <free@plt>
   13528:	ldr	r3, [pc, #72]	; 13578 <close_stdout@@Base+0x190c>
   1352c:	mov	r2, #256	; 0x100
   13530:	add	r3, pc, r3
   13534:	stmib	r3, {r2, r4}
   13538:	ldr	r4, [pc, #60]	; 1357c <close_stdout@@Base+0x1910>
   1353c:	add	r4, pc, r4
   13540:	add	r5, r4, #4
   13544:	cmp	r7, r5
   13548:	beq	13558 <close_stdout@@Base+0x18ec>
   1354c:	mov	r0, r7
   13550:	bl	10f9c <free@plt>
   13554:	str	r5, [r4]
   13558:	ldr	r3, [pc, #32]	; 13580 <close_stdout@@Base+0x1914>
   1355c:	mov	r2, #1
   13560:	add	r3, pc, r3
   13564:	str	r2, [r3]
   13568:	pop	{r3, r4, r5, r6, r7, pc}
   1356c:	andeq	r2, r1, r4, ror #24
   13570:	andeq	r2, r1, ip, lsl #25
   13574:	andeq	r2, r1, r0, ror ip
   13578:	andeq	r2, r1, ip, lsr ip
   1357c:	andeq	r2, r1, r0, lsr ip
   13580:	ldrdeq	r2, [r1], -r8
   13584:	ldr	r3, [pc, #12]	; 13598 <close_stdout@@Base+0x192c>
   13588:	mvn	r2, #0
   1358c:	add	r3, pc, r3
   13590:	add	r3, r3, #256	; 0x100
   13594:	b	13040 <close_stdout@@Base+0x13d4>
   13598:	strdeq	r2, [r1], -ip
   1359c:	ldr	r3, [pc, #8]	; 135ac <close_stdout@@Base+0x1940>
   135a0:	add	r3, pc, r3
   135a4:	add	r3, r3, #256	; 0x100
   135a8:	b	13040 <close_stdout@@Base+0x13d4>
   135ac:	andeq	r2, r1, r8, ror #23
   135b0:	mov	r1, r0
   135b4:	mov	r0, #0
   135b8:	b	13584 <close_stdout@@Base+0x1918>
   135bc:	mov	r2, r1
   135c0:	mov	r1, r0
   135c4:	mov	r0, #0
   135c8:	b	1359c <close_stdout@@Base+0x1930>
   135cc:	ldr	r3, [pc, #92]	; 13630 <close_stdout@@Base+0x19c4>
   135d0:	ldr	ip, [pc, #92]	; 13634 <close_stdout@@Base+0x19c8>
   135d4:	add	r3, pc, r3
   135d8:	push	{r4, r5, r6, r7, lr}
   135dc:	sub	sp, sp, #60	; 0x3c
   135e0:	ldr	r4, [r3, ip]
   135e4:	add	r5, sp, #4
   135e8:	mov	r7, r2
   135ec:	mov	r6, r0
   135f0:	mov	r0, r5
   135f4:	ldr	r3, [r4]
   135f8:	str	r3, [sp, #52]	; 0x34
   135fc:	bl	12160 <close_stdout@@Base+0x4f4>
   13600:	mov	r3, r5
   13604:	mvn	r2, #0
   13608:	mov	r0, r6
   1360c:	mov	r1, r7
   13610:	bl	13040 <close_stdout@@Base+0x13d4>
   13614:	ldr	r2, [sp, #52]	; 0x34
   13618:	ldr	r3, [r4]
   1361c:	cmp	r2, r3
   13620:	bne	1362c <close_stdout@@Base+0x19c0>
   13624:	add	sp, sp, #60	; 0x3c
   13628:	pop	{r4, r5, r6, r7, pc}
   1362c:	bl	10ffc <__stack_chk_fail@plt>
   13630:	andeq	r2, r1, r4, lsr #20
   13634:	strdeq	r0, [r0], -r8
   13638:	ldr	ip, [pc, #96]	; 136a0 <close_stdout@@Base+0x1a34>
   1363c:	push	{r4, r5, r6, r7, r8, lr}
   13640:	add	ip, pc, ip
   13644:	ldr	lr, [pc, #88]	; 136a4 <close_stdout@@Base+0x1a38>
   13648:	sub	sp, sp, #56	; 0x38
   1364c:	mov	r8, r3
   13650:	add	r5, sp, #4
   13654:	mov	r7, r2
   13658:	mov	r6, r0
   1365c:	ldr	r4, [ip, lr]
   13660:	mov	r0, r5
   13664:	ldr	r3, [r4]
   13668:	str	r3, [sp, #52]	; 0x34
   1366c:	bl	12160 <close_stdout@@Base+0x4f4>
   13670:	mov	r2, r8
   13674:	mov	r3, r5
   13678:	mov	r0, r6
   1367c:	mov	r1, r7
   13680:	bl	13040 <close_stdout@@Base+0x13d4>
   13684:	ldr	r2, [sp, #52]	; 0x34
   13688:	ldr	r3, [r4]
   1368c:	cmp	r2, r3
   13690:	bne	1369c <close_stdout@@Base+0x1a30>
   13694:	add	sp, sp, #56	; 0x38
   13698:	pop	{r4, r5, r6, r7, r8, pc}
   1369c:	bl	10ffc <__stack_chk_fail@plt>
   136a0:			; <UNDEFINED> instruction: 0x000129b8
   136a4:	strdeq	r0, [r0], -r8
   136a8:	mov	r2, r1
   136ac:	mov	r1, r0
   136b0:	mov	r0, #0
   136b4:	b	135cc <close_stdout@@Base+0x1960>
   136b8:	mov	ip, r1
   136bc:	mov	r3, r2
   136c0:	mov	r1, r0
   136c4:	mov	r2, ip
   136c8:	mov	r0, #0
   136cc:	b	13638 <close_stdout@@Base+0x19cc>
   136d0:	push	{r4, r5, r6, r7, r8, lr}
   136d4:	mov	r5, r2
   136d8:	ldr	lr, [pc, #136]	; 13768 <close_stdout@@Base+0x1afc>
   136dc:	mov	r7, r0
   136e0:	mov	r6, r1
   136e4:	ldr	r4, [pc, #128]	; 1376c <close_stdout@@Base+0x1b00>
   136e8:	add	lr, pc, lr
   136ec:	sub	sp, sp, #56	; 0x38
   136f0:	add	lr, lr, #256	; 0x100
   136f4:	ldr	r8, [pc, #116]	; 13770 <close_stdout@@Base+0x1b04>
   136f8:	add	r4, pc, r4
   136fc:	add	ip, sp, #4
   13700:	ldm	lr!, {r0, r1, r2, r3}
   13704:	ldr	r4, [r4, r8]
   13708:	stmia	ip!, {r0, r1, r2, r3}
   1370c:	ldm	lr!, {r0, r1, r2, r3}
   13710:	ldr	r8, [r4]
   13714:	stmia	ip!, {r0, r1, r2, r3}
   13718:	ldm	lr, {r0, r1, r2, r3}
   1371c:	str	r8, [sp, #52]	; 0x34
   13720:	stm	ip, {r0, r1, r2, r3}
   13724:	mov	r1, r5
   13728:	add	r5, sp, #4
   1372c:	mov	r2, #1
   13730:	mov	r0, r5
   13734:	bl	1329c <close_stdout@@Base+0x1630>
   13738:	mov	r2, r6
   1373c:	mov	r3, r5
   13740:	mov	r1, r7
   13744:	mov	r0, #0
   13748:	bl	13040 <close_stdout@@Base+0x13d4>
   1374c:	ldr	r2, [sp, #52]	; 0x34
   13750:	ldr	r3, [r4]
   13754:	cmp	r2, r3
   13758:	bne	13764 <close_stdout@@Base+0x1af8>
   1375c:	add	sp, sp, #56	; 0x38
   13760:	pop	{r4, r5, r6, r7, r8, pc}
   13764:	bl	10ffc <__stack_chk_fail@plt>
   13768:	andeq	r2, r1, r0, lsr #21
   1376c:	andeq	r2, r1, r0, lsl #18
   13770:	strdeq	r0, [r0], -r8
   13774:	mov	r2, r1
   13778:	mvn	r1, #0
   1377c:	b	136d0 <close_stdout@@Base+0x1a64>
   13780:	mov	r1, #58	; 0x3a
   13784:	b	13774 <close_stdout@@Base+0x1b08>
   13788:	mov	r2, #58	; 0x3a
   1378c:	b	136d0 <close_stdout@@Base+0x1a64>
   13790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13794:	mov	r5, r2
   13798:	ldr	lr, [pc, #144]	; 13830 <close_stdout@@Base+0x1bc4>
   1379c:	mov	r8, r0
   137a0:	mov	r9, r1
   137a4:	mov	r7, r3
   137a8:	add	lr, pc, lr
   137ac:	ldr	r4, [pc, #128]	; 13834 <close_stdout@@Base+0x1bc8>
   137b0:	add	lr, lr, #256	; 0x100
   137b4:	sub	sp, sp, #56	; 0x38
   137b8:	ldr	sl, [pc, #120]	; 13838 <close_stdout@@Base+0x1bcc>
   137bc:	add	r4, pc, r4
   137c0:	ldm	lr!, {r0, r1, r2, r3}
   137c4:	add	ip, sp, #4
   137c8:	ldr	r4, [r4, sl]
   137cc:	ldr	r6, [sp, #88]	; 0x58
   137d0:	stmia	ip!, {r0, r1, r2, r3}
   137d4:	ldm	lr!, {r0, r1, r2, r3}
   137d8:	ldr	sl, [r4]
   137dc:	stmia	ip!, {r0, r1, r2, r3}
   137e0:	ldm	lr, {r0, r1, r2, r3}
   137e4:	str	sl, [sp, #52]	; 0x34
   137e8:	stm	ip, {r0, r1, r2, r3}
   137ec:	mov	r2, r5
   137f0:	add	r5, sp, #4
   137f4:	mov	r1, r9
   137f8:	mov	r0, r5
   137fc:	bl	13310 <close_stdout@@Base+0x16a4>
   13800:	mov	r2, r6
   13804:	mov	r3, r5
   13808:	mov	r0, r8
   1380c:	mov	r1, r7
   13810:	bl	13040 <close_stdout@@Base+0x13d4>
   13814:	ldr	r2, [sp, #52]	; 0x34
   13818:	ldr	r3, [r4]
   1381c:	cmp	r2, r3
   13820:	bne	1382c <close_stdout@@Base+0x1bc0>
   13824:	add	sp, sp, #56	; 0x38
   13828:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1382c:	bl	10ffc <__stack_chk_fail@plt>
   13830:	andeq	r2, r1, r0, ror #19
   13834:	andeq	r2, r1, ip, lsr r8
   13838:	strdeq	r0, [r0], -r8
   1383c:	push	{lr}		; (str lr, [sp, #-4]!)
   13840:	sub	sp, sp, #12
   13844:	mvn	ip, #0
   13848:	str	ip, [sp]
   1384c:	bl	13790 <close_stdout@@Base+0x1b24>
   13850:	add	sp, sp, #12
   13854:	pop	{pc}		; (ldr pc, [sp], #4)
   13858:	mov	ip, r1
   1385c:	mov	r3, r2
   13860:	mov	r1, r0
   13864:	mov	r2, ip
   13868:	mov	r0, #0
   1386c:	b	1383c <close_stdout@@Base+0x1bd0>
   13870:	push	{lr}		; (str lr, [sp, #-4]!)
   13874:	sub	sp, sp, #12
   13878:	mov	lr, r1
   1387c:	mov	ip, r2
   13880:	mov	r1, r0
   13884:	str	r3, [sp]
   13888:	mov	r2, lr
   1388c:	mov	r3, ip
   13890:	mov	r0, #0
   13894:	bl	13790 <close_stdout@@Base+0x1b24>
   13898:	add	sp, sp, #12
   1389c:	pop	{pc}		; (ldr pc, [sp], #4)
   138a0:	ldr	r3, [pc, #12]	; 138b4 <close_stdout@@Base+0x1c48>
   138a4:	ldr	ip, [pc, #12]	; 138b8 <close_stdout@@Base+0x1c4c>
   138a8:	add	r3, pc, r3
   138ac:	ldr	r3, [r3, ip]
   138b0:	b	13040 <close_stdout@@Base+0x13d4>
   138b4:	andeq	r2, r1, r0, asr r7
   138b8:	strdeq	r0, [r0], -r4
   138bc:	mov	r2, r1
   138c0:	mov	r1, r0
   138c4:	mov	r0, #0
   138c8:	b	138a0 <close_stdout@@Base+0x1c34>
   138cc:	mvn	r2, #0
   138d0:	b	138a0 <close_stdout@@Base+0x1c34>
   138d4:	mov	r1, r0
   138d8:	mov	r0, #0
   138dc:	b	138cc <close_stdout@@Base+0x1c60>
   138e0:	mov	r1, #0
   138e4:	mov	r2, #3
   138e8:	b	140f8 <close_stdout@@Base+0x248c>
   138ec:	push	{r4, r5, r6, r7, lr}
   138f0:	cmp	r1, #0
   138f4:	sub	sp, sp, #36	; 0x24
   138f8:	ldr	r7, [pc, #896]	; 13c80 <close_stdout@@Base+0x2014>
   138fc:	mov	ip, r3
   13900:	mov	r5, r0
   13904:	add	r7, pc, r7
   13908:	ldr	r4, [sp, #56]	; 0x38
   1390c:	ldr	r6, [sp, #60]	; 0x3c
   13910:	beq	13c54 <close_stdout@@Base+0x1fe8>
   13914:	str	r2, [sp]
   13918:	mov	r3, r1
   1391c:	ldr	r2, [pc, #864]	; 13c84 <close_stdout@@Base+0x2018>
   13920:	mov	r1, #1
   13924:	str	ip, [sp, #4]
   13928:	add	r2, pc, r2
   1392c:	bl	11170 <__fprintf_chk@plt>
   13930:	ldr	r1, [pc, #848]	; 13c88 <close_stdout@@Base+0x201c>
   13934:	mov	r2, #5
   13938:	mov	r0, #0
   1393c:	add	r1, pc, r1
   13940:	bl	10ff0 <dcgettext@plt>
   13944:	ldr	r2, [pc, #832]	; 13c8c <close_stdout@@Base+0x2020>
   13948:	movw	ip, #2013	; 0x7dd
   1394c:	mov	r1, #1
   13950:	ldr	r2, [r7, r2]
   13954:	str	ip, [sp]
   13958:	mov	r3, r0
   1395c:	mov	r0, r5
   13960:	bl	11170 <__fprintf_chk@plt>
   13964:	ldr	r1, [pc, #804]	; 13c90 <close_stdout@@Base+0x2024>
   13968:	mov	r0, #0
   1396c:	mov	r2, #5
   13970:	add	r1, pc, r1
   13974:	bl	10ff0 <dcgettext@plt>
   13978:	mov	r1, r5
   1397c:	bl	10f6c <fputs_unlocked@plt>
   13980:	cmp	r6, #9
   13984:	addls	pc, pc, r6, lsl #2
   13988:	b	13c70 <close_stdout@@Base+0x2004>
   1398c:	b	13a20 <close_stdout@@Base+0x1db4>
   13990:	b	13a24 <close_stdout@@Base+0x1db8>
   13994:	b	13a54 <close_stdout@@Base+0x1de8>
   13998:	b	13a88 <close_stdout@@Base+0x1e1c>
   1399c:	b	13ac4 <close_stdout@@Base+0x1e58>
   139a0:	b	13b04 <close_stdout@@Base+0x1e98>
   139a4:	b	13b4c <close_stdout@@Base+0x1ee0>
   139a8:	b	13b9c <close_stdout@@Base+0x1f30>
   139ac:	b	13bf4 <close_stdout@@Base+0x1f88>
   139b0:	b	139b4 <close_stdout@@Base+0x1d48>
   139b4:	ldr	r1, [pc, #728]	; 13c94 <close_stdout@@Base+0x2028>
   139b8:	mov	r0, #0
   139bc:	add	r1, pc, r1
   139c0:	mov	r2, #5
   139c4:	bl	10ff0 <dcgettext@plt>
   139c8:	ldm	r4, {r3, ip}
   139cc:	mov	r1, #1
   139d0:	str	ip, [sp]
   139d4:	ldr	ip, [r4, #8]
   139d8:	str	ip, [sp, #4]
   139dc:	ldr	ip, [r4, #12]
   139e0:	str	ip, [sp, #8]
   139e4:	ldr	ip, [r4, #16]
   139e8:	str	ip, [sp, #12]
   139ec:	ldr	ip, [r4, #20]
   139f0:	str	ip, [sp, #16]
   139f4:	ldr	ip, [r4, #24]
   139f8:	str	ip, [sp, #20]
   139fc:	ldr	ip, [r4, #28]
   13a00:	str	ip, [sp, #24]
   13a04:	ldr	ip, [r4, #32]
   13a08:	str	ip, [sp, #28]
   13a0c:	mov	r2, r0
   13a10:	mov	r0, r5
   13a14:	bl	11170 <__fprintf_chk@plt>
   13a18:	add	sp, sp, #36	; 0x24
   13a1c:	pop	{r4, r5, r6, r7, pc}
   13a20:	bl	111f4 <abort@plt>
   13a24:	ldr	r1, [pc, #620]	; 13c98 <close_stdout@@Base+0x202c>
   13a28:	mov	r2, #5
   13a2c:	mov	r0, #0
   13a30:	add	r1, pc, r1
   13a34:	bl	10ff0 <dcgettext@plt>
   13a38:	ldr	r3, [r4]
   13a3c:	mov	r1, #1
   13a40:	mov	r2, r0
   13a44:	mov	r0, r5
   13a48:	add	sp, sp, #36	; 0x24
   13a4c:	pop	{r4, r5, r6, r7, lr}
   13a50:	b	11170 <__fprintf_chk@plt>
   13a54:	ldr	r1, [pc, #576]	; 13c9c <close_stdout@@Base+0x2030>
   13a58:	mov	r2, #5
   13a5c:	mov	r0, #0
   13a60:	add	r1, pc, r1
   13a64:	bl	10ff0 <dcgettext@plt>
   13a68:	ldm	r4, {r3, ip}
   13a6c:	mov	r1, #1
   13a70:	str	ip, [sp, #56]	; 0x38
   13a74:	mov	r2, r0
   13a78:	mov	r0, r5
   13a7c:	add	sp, sp, #36	; 0x24
   13a80:	pop	{r4, r5, r6, r7, lr}
   13a84:	b	11170 <__fprintf_chk@plt>
   13a88:	ldr	r1, [pc, #528]	; 13ca0 <close_stdout@@Base+0x2034>
   13a8c:	mov	r2, #5
   13a90:	mov	r0, #0
   13a94:	add	r1, pc, r1
   13a98:	bl	10ff0 <dcgettext@plt>
   13a9c:	ldm	r4, {r3, ip}
   13aa0:	mov	r1, #1
   13aa4:	str	ip, [sp, #56]	; 0x38
   13aa8:	ldr	ip, [r4, #8]
   13aac:	str	ip, [sp, #60]	; 0x3c
   13ab0:	mov	r2, r0
   13ab4:	mov	r0, r5
   13ab8:	add	sp, sp, #36	; 0x24
   13abc:	pop	{r4, r5, r6, r7, lr}
   13ac0:	b	11170 <__fprintf_chk@plt>
   13ac4:	ldr	r1, [pc, #472]	; 13ca4 <close_stdout@@Base+0x2038>
   13ac8:	mov	r2, #5
   13acc:	mov	r0, #0
   13ad0:	add	r1, pc, r1
   13ad4:	bl	10ff0 <dcgettext@plt>
   13ad8:	ldm	r4, {r3, ip}
   13adc:	mov	r1, #1
   13ae0:	str	ip, [sp]
   13ae4:	ldr	ip, [r4, #8]
   13ae8:	str	ip, [sp, #4]
   13aec:	ldr	ip, [r4, #12]
   13af0:	str	ip, [sp, #8]
   13af4:	mov	r2, r0
   13af8:	mov	r0, r5
   13afc:	bl	11170 <__fprintf_chk@plt>
   13b00:	b	13a18 <close_stdout@@Base+0x1dac>
   13b04:	ldr	r1, [pc, #412]	; 13ca8 <close_stdout@@Base+0x203c>
   13b08:	mov	r2, #5
   13b0c:	mov	r0, #0
   13b10:	add	r1, pc, r1
   13b14:	bl	10ff0 <dcgettext@plt>
   13b18:	ldm	r4, {r3, ip}
   13b1c:	mov	r1, #1
   13b20:	str	ip, [sp]
   13b24:	ldr	ip, [r4, #8]
   13b28:	str	ip, [sp, #4]
   13b2c:	ldr	ip, [r4, #12]
   13b30:	str	ip, [sp, #8]
   13b34:	ldr	ip, [r4, #16]
   13b38:	str	ip, [sp, #12]
   13b3c:	mov	r2, r0
   13b40:	mov	r0, r5
   13b44:	bl	11170 <__fprintf_chk@plt>
   13b48:	b	13a18 <close_stdout@@Base+0x1dac>
   13b4c:	ldr	r1, [pc, #344]	; 13cac <close_stdout@@Base+0x2040>
   13b50:	mov	r2, #5
   13b54:	mov	r0, #0
   13b58:	add	r1, pc, r1
   13b5c:	bl	10ff0 <dcgettext@plt>
   13b60:	ldm	r4, {r3, ip}
   13b64:	mov	r1, #1
   13b68:	str	ip, [sp]
   13b6c:	ldr	ip, [r4, #8]
   13b70:	str	ip, [sp, #4]
   13b74:	ldr	ip, [r4, #12]
   13b78:	str	ip, [sp, #8]
   13b7c:	ldr	ip, [r4, #16]
   13b80:	str	ip, [sp, #12]
   13b84:	ldr	ip, [r4, #20]
   13b88:	str	ip, [sp, #16]
   13b8c:	mov	r2, r0
   13b90:	mov	r0, r5
   13b94:	bl	11170 <__fprintf_chk@plt>
   13b98:	b	13a18 <close_stdout@@Base+0x1dac>
   13b9c:	ldr	r1, [pc, #268]	; 13cb0 <close_stdout@@Base+0x2044>
   13ba0:	mov	r2, #5
   13ba4:	mov	r0, #0
   13ba8:	add	r1, pc, r1
   13bac:	bl	10ff0 <dcgettext@plt>
   13bb0:	ldm	r4, {r3, ip}
   13bb4:	mov	r1, #1
   13bb8:	str	ip, [sp]
   13bbc:	ldr	ip, [r4, #8]
   13bc0:	str	ip, [sp, #4]
   13bc4:	ldr	ip, [r4, #12]
   13bc8:	str	ip, [sp, #8]
   13bcc:	ldr	ip, [r4, #16]
   13bd0:	str	ip, [sp, #12]
   13bd4:	ldr	ip, [r4, #20]
   13bd8:	str	ip, [sp, #16]
   13bdc:	ldr	ip, [r4, #24]
   13be0:	str	ip, [sp, #20]
   13be4:	mov	r2, r0
   13be8:	mov	r0, r5
   13bec:	bl	11170 <__fprintf_chk@plt>
   13bf0:	b	13a18 <close_stdout@@Base+0x1dac>
   13bf4:	ldr	r1, [pc, #184]	; 13cb4 <close_stdout@@Base+0x2048>
   13bf8:	mov	r2, #5
   13bfc:	mov	r0, #0
   13c00:	add	r1, pc, r1
   13c04:	bl	10ff0 <dcgettext@plt>
   13c08:	ldm	r4, {r3, ip}
   13c0c:	mov	r1, #1
   13c10:	str	ip, [sp]
   13c14:	ldr	ip, [r4, #8]
   13c18:	str	ip, [sp, #4]
   13c1c:	ldr	ip, [r4, #12]
   13c20:	str	ip, [sp, #8]
   13c24:	ldr	ip, [r4, #16]
   13c28:	str	ip, [sp, #12]
   13c2c:	ldr	ip, [r4, #20]
   13c30:	str	ip, [sp, #16]
   13c34:	ldr	ip, [r4, #24]
   13c38:	str	ip, [sp, #20]
   13c3c:	ldr	ip, [r4, #28]
   13c40:	str	ip, [sp, #24]
   13c44:	mov	r2, r0
   13c48:	mov	r0, r5
   13c4c:	bl	11170 <__fprintf_chk@plt>
   13c50:	b	13a18 <close_stdout@@Base+0x1dac>
   13c54:	str	r3, [sp]
   13c58:	mov	r3, r2
   13c5c:	ldr	r2, [pc, #84]	; 13cb8 <close_stdout@@Base+0x204c>
   13c60:	mov	r1, #1
   13c64:	add	r2, pc, r2
   13c68:	bl	11170 <__fprintf_chk@plt>
   13c6c:	b	13930 <close_stdout@@Base+0x1cc4>
   13c70:	ldr	r1, [pc, #68]	; 13cbc <close_stdout@@Base+0x2050>
   13c74:	mov	r0, #0
   13c78:	add	r1, pc, r1
   13c7c:	b	139c0 <close_stdout@@Base+0x1d54>
   13c80:	strdeq	r2, [r1], -r4
   13c84:	muleq	r0, ip, r8
   13c88:	muleq	r0, ip, r8
   13c8c:	andeq	r0, r0, r8, lsr #2
   13c90:	andeq	r1, r0, ip, ror #16
   13c94:	strdeq	r1, [r0], -r8
   13c98:	andeq	r1, r0, r8, ror r8
   13c9c:	andeq	r1, r0, r8, asr r8
   13ca0:	andeq	r1, r0, ip, lsr r8
   13ca4:	andeq	r1, r0, ip, lsl r8
   13ca8:	strdeq	r1, [r0], -ip
   13cac:	ldrdeq	r1, [r0], -r8
   13cb0:			; <UNDEFINED> instruction: 0x000017b0
   13cb4:	andeq	r1, r0, r4, lsl #15
   13cb8:	andeq	r1, r0, ip, ror #10
   13cbc:	andeq	r1, r0, r0, ror r7
   13cc0:	push	{r4, r5, lr}
   13cc4:	sub	sp, sp, #12
   13cc8:	ldr	r5, [sp, #24]
   13ccc:	ldr	ip, [r5]
   13cd0:	cmp	ip, #0
   13cd4:	beq	13cf0 <close_stdout@@Base+0x2084>
   13cd8:	mov	lr, r5
   13cdc:	mov	ip, #0
   13ce0:	ldr	r4, [lr, #4]!
   13ce4:	add	ip, ip, #1
   13ce8:	cmp	r4, #0
   13cec:	bne	13ce0 <close_stdout@@Base+0x2074>
   13cf0:	stm	sp, {r5, ip}
   13cf4:	bl	138ec <close_stdout@@Base+0x1c80>
   13cf8:	add	sp, sp, #12
   13cfc:	pop	{r4, r5, pc}
   13d00:	push	{r4, r5, r6, r7, lr}
   13d04:	sub	sp, sp, #60	; 0x3c
   13d08:	ldr	r4, [pc, #100]	; 13d74 <close_stdout@@Base+0x2108>
   13d0c:	mov	ip, #0
   13d10:	ldr	r5, [pc, #96]	; 13d78 <close_stdout@@Base+0x210c>
   13d14:	mov	lr, ip
   13d18:	add	r4, pc, r4
   13d1c:	ldr	r6, [sp, #80]	; 0x50
   13d20:	ldr	r7, [r4, r5]
   13d24:	add	r5, sp, #12
   13d28:	ldr	r4, [r7]
   13d2c:	str	r4, [sp, #52]	; 0x34
   13d30:	ldr	r4, [r6, ip]
   13d34:	cmp	r4, #0
   13d38:	str	r4, [r5, ip]
   13d3c:	beq	13d50 <close_stdout@@Base+0x20e4>
   13d40:	add	lr, lr, #1
   13d44:	add	ip, ip, #4
   13d48:	cmp	lr, #10
   13d4c:	bne	13d30 <close_stdout@@Base+0x20c4>
   13d50:	stm	sp, {r5, lr}
   13d54:	bl	138ec <close_stdout@@Base+0x1c80>
   13d58:	ldr	r2, [sp, #52]	; 0x34
   13d5c:	ldr	r3, [r7]
   13d60:	cmp	r2, r3
   13d64:	bne	13d70 <close_stdout@@Base+0x2104>
   13d68:	add	sp, sp, #60	; 0x3c
   13d6c:	pop	{r4, r5, r6, r7, pc}
   13d70:	bl	10ffc <__stack_chk_fail@plt>
   13d74:	andeq	r2, r1, r0, ror #5
   13d78:	strdeq	r0, [r0], -r8
   13d7c:	push	{r3}		; (str r3, [sp, #-4]!)
   13d80:	push	{r4, lr}
   13d84:	sub	sp, sp, #20
   13d88:	ldr	lr, [pc, #72]	; 13dd8 <close_stdout@@Base+0x216c>
   13d8c:	add	ip, sp, #32
   13d90:	ldr	r4, [pc, #68]	; 13ddc <close_stdout@@Base+0x2170>
   13d94:	add	lr, pc, lr
   13d98:	ldr	r3, [sp, #28]
   13d9c:	ldr	r4, [lr, r4]
   13da0:	str	ip, [sp]
   13da4:	str	ip, [sp, #8]
   13da8:	ldr	ip, [r4]
   13dac:	str	ip, [sp, #12]
   13db0:	bl	13d00 <close_stdout@@Base+0x2094>
   13db4:	ldr	r2, [sp, #12]
   13db8:	ldr	r3, [r4]
   13dbc:	cmp	r2, r3
   13dc0:	bne	13dd4 <close_stdout@@Base+0x2168>
   13dc4:	add	sp, sp, #20
   13dc8:	pop	{r4, lr}
   13dcc:	add	sp, sp, #4
   13dd0:	bx	lr
   13dd4:	bl	10ffc <__stack_chk_fail@plt>
   13dd8:	andeq	r2, r1, r4, ror #4
   13ddc:	strdeq	r0, [r0], -r8
   13de0:	ldr	r1, [pc, #132]	; 13e6c <close_stdout@@Base+0x2200>
   13de4:	mov	r2, #5
   13de8:	push	{r4, lr}
   13dec:	add	r1, pc, r1
   13df0:	mov	r0, #0
   13df4:	ldr	r4, [pc, #116]	; 13e70 <close_stdout@@Base+0x2204>
   13df8:	bl	10ff0 <dcgettext@plt>
   13dfc:	ldr	r2, [pc, #112]	; 13e74 <close_stdout@@Base+0x2208>
   13e00:	add	r4, pc, r4
   13e04:	add	r2, pc, r2
   13e08:	mov	r1, r0
   13e0c:	mov	r0, #1
   13e10:	bl	11158 <__printf_chk@plt>
   13e14:	ldr	r1, [pc, #92]	; 13e78 <close_stdout@@Base+0x220c>
   13e18:	mov	r2, #5
   13e1c:	mov	r0, #0
   13e20:	add	r1, pc, r1
   13e24:	bl	10ff0 <dcgettext@plt>
   13e28:	ldr	r2, [pc, #76]	; 13e7c <close_stdout@@Base+0x2210>
   13e2c:	ldr	r3, [pc, #76]	; 13e80 <close_stdout@@Base+0x2214>
   13e30:	add	r2, pc, r2
   13e34:	add	r3, pc, r3
   13e38:	mov	r1, r0
   13e3c:	mov	r0, #1
   13e40:	bl	11158 <__printf_chk@plt>
   13e44:	ldr	r1, [pc, #56]	; 13e84 <close_stdout@@Base+0x2218>
   13e48:	mov	r0, #0
   13e4c:	mov	r2, #5
   13e50:	add	r1, pc, r1
   13e54:	bl	10ff0 <dcgettext@plt>
   13e58:	ldr	r3, [pc, #40]	; 13e88 <close_stdout@@Base+0x221c>
   13e5c:	ldr	r3, [r4, r3]
   13e60:	pop	{r4, lr}
   13e64:	ldr	r1, [r3]
   13e68:	b	10f6c <fputs_unlocked@plt>
   13e6c:	andeq	r1, r0, r8, lsr r6
   13e70:	strdeq	r2, [r1], -r8
   13e74:	andeq	r1, r0, r8, lsr r6
   13e78:	andeq	r1, r0, r4, lsr r6
   13e7c:	andeq	r1, r0, r0, lsr #32
   13e80:	andeq	r1, r0, ip, lsr #32
   13e84:	andeq	r1, r0, r8, lsl r6
   13e88:	andeq	r0, r0, r4, lsl r1
   13e8c:	push	{r4, lr}
   13e90:	mov	r4, r0
   13e94:	bl	110a4 <malloc@plt>
   13e98:	rsbs	r3, r0, #1
   13e9c:	movcc	r3, #0
   13ea0:	cmp	r4, #0
   13ea4:	moveq	r3, #0
   13ea8:	cmp	r3, #0
   13eac:	popeq	{r4, pc}
   13eb0:	bl	140a0 <close_stdout@@Base+0x2434>
   13eb4:	push	{r3, r4, r5, lr}
   13eb8:	mov	r4, r0
   13ebc:	mvn	r0, #0
   13ec0:	mov	r5, r1
   13ec4:	bl	148b4 <close_stdout@@Base+0x2c48>
   13ec8:	cmp	r0, r4
   13ecc:	bcc	13edc <close_stdout@@Base+0x2270>
   13ed0:	mul	r0, r4, r5
   13ed4:	pop	{r3, r4, r5, lr}
   13ed8:	b	13e8c <close_stdout@@Base+0x2220>
   13edc:	bl	140a0 <close_stdout@@Base+0x2434>
   13ee0:	b	13e8c <close_stdout@@Base+0x2220>
   13ee4:	rsbs	r3, r1, #1
   13ee8:	push	{r4, lr}
   13eec:	movcc	r3, #0
   13ef0:	cmp	r0, #0
   13ef4:	mov	r4, r1
   13ef8:	moveq	r3, #0
   13efc:	cmp	r3, #0
   13f00:	bne	13f24 <close_stdout@@Base+0x22b8>
   13f04:	bl	11014 <realloc@plt>
   13f08:	rsbs	r3, r0, #1
   13f0c:	movcc	r3, #0
   13f10:	cmp	r4, #0
   13f14:	moveq	r3, #0
   13f18:	cmp	r3, #0
   13f1c:	popeq	{r4, pc}
   13f20:	bl	140a0 <close_stdout@@Base+0x2434>
   13f24:	bl	10f9c <free@plt>
   13f28:	mov	r0, #0
   13f2c:	pop	{r4, pc}
   13f30:	push	{r4, r5, r6, lr}
   13f34:	mov	r5, r1
   13f38:	mov	r6, r0
   13f3c:	mov	r1, r2
   13f40:	mvn	r0, #0
   13f44:	mov	r4, r2
   13f48:	bl	148b4 <close_stdout@@Base+0x2c48>
   13f4c:	cmp	r0, r5
   13f50:	bcc	13f64 <close_stdout@@Base+0x22f8>
   13f54:	mov	r0, r6
   13f58:	mul	r1, r5, r4
   13f5c:	pop	{r4, r5, r6, lr}
   13f60:	b	13ee4 <close_stdout@@Base+0x2278>
   13f64:	bl	140a0 <close_stdout@@Base+0x2434>
   13f68:	push	{r3, r4, r5, r6, r7, lr}
   13f6c:	subs	r7, r0, #0
   13f70:	mov	r5, r1
   13f74:	mov	r6, r2
   13f78:	ldr	r4, [r1]
   13f7c:	beq	13fb4 <close_stdout@@Base+0x2348>
   13f80:	movw	r0, #43690	; 0xaaaa
   13f84:	mov	r1, r2
   13f88:	bfi	r0, r0, #16, #16
   13f8c:	bl	148b4 <close_stdout@@Base+0x2c48>
   13f90:	cmp	r4, r0
   13f94:	addcc	r3, r4, #1
   13f98:	addcc	r4, r4, r3, lsr #1
   13f9c:	bcs	13fd8 <close_stdout@@Base+0x236c>
   13fa0:	str	r4, [r5]
   13fa4:	mov	r0, r7
   13fa8:	mul	r1, r6, r4
   13fac:	pop	{r3, r4, r5, r6, r7, lr}
   13fb0:	b	13ee4 <close_stdout@@Base+0x2278>
   13fb4:	cmp	r4, #0
   13fb8:	bne	13fa0 <close_stdout@@Base+0x2334>
   13fbc:	mov	r0, #64	; 0x40
   13fc0:	mov	r1, r2
   13fc4:	bl	148b4 <close_stdout@@Base+0x2c48>
   13fc8:	cmp	r0, #0
   13fcc:	movne	r4, r0
   13fd0:	addeq	r4, r0, #1
   13fd4:	b	13fa0 <close_stdout@@Base+0x2334>
   13fd8:	bl	140a0 <close_stdout@@Base+0x2434>
   13fdc:	cmp	r0, #0
   13fe0:	push	{r3, lr}
   13fe4:	ldr	r3, [r1]
   13fe8:	beq	14014 <close_stdout@@Base+0x23a8>
   13fec:	movw	r2, #43689	; 0xaaa9
   13ff0:	movt	r2, #43690	; 0xaaaa
   13ff4:	cmp	r3, r2
   13ff8:	addls	r2, r3, #1
   13ffc:	addls	r3, r3, r2, lsr #1
   14000:	bhi	1402c <close_stdout@@Base+0x23c0>
   14004:	str	r3, [r1]
   14008:	mov	r1, r3
   1400c:	pop	{r3, lr}
   14010:	b	13ee4 <close_stdout@@Base+0x2278>
   14014:	cmp	r3, #0
   14018:	moveq	r3, #64	; 0x40
   1401c:	str	r3, [r1]
   14020:	mov	r1, r3
   14024:	pop	{r3, lr}
   14028:	b	13ee4 <close_stdout@@Base+0x2278>
   1402c:	bl	140a0 <close_stdout@@Base+0x2434>
   14030:	push	{r4, lr}
   14034:	mov	r4, r0
   14038:	bl	13e8c <close_stdout@@Base+0x2220>
   1403c:	mov	r2, r4
   14040:	mov	r1, #0
   14044:	pop	{r4, lr}
   14048:	b	11140 <memset@plt>
   1404c:	push	{r3, lr}
   14050:	bl	10f60 <calloc@plt>
   14054:	cmp	r0, #0
   14058:	popne	{r3, pc}
   1405c:	bl	140a0 <close_stdout@@Base+0x2434>
   14060:	push	{r3, r4, r5, lr}
   14064:	mov	r4, r1
   14068:	mov	r5, r0
   1406c:	mov	r0, r1
   14070:	bl	13e8c <close_stdout@@Base+0x2220>
   14074:	mov	r1, r5
   14078:	mov	r2, r4
   1407c:	pop	{r3, r4, r5, lr}
   14080:	b	10fb4 <memcpy@plt>
   14084:	push	{r4, lr}
   14088:	mov	r4, r0
   1408c:	bl	11104 <strlen@plt>
   14090:	add	r1, r0, #1
   14094:	mov	r0, r4
   14098:	pop	{r4, lr}
   1409c:	b	14060 <close_stdout@@Base+0x23f4>
   140a0:	ldr	r3, [pc, #64]	; 140e8 <close_stdout@@Base+0x247c>
   140a4:	mov	r2, #5
   140a8:	ldr	ip, [pc, #60]	; 140ec <close_stdout@@Base+0x2480>
   140ac:	mov	r0, #0
   140b0:	add	r3, pc, r3
   140b4:	ldr	r1, [pc, #52]	; 140f0 <close_stdout@@Base+0x2484>
   140b8:	push	{r4, lr}
   140bc:	add	r1, pc, r1
   140c0:	ldr	r3, [r3, ip]
   140c4:	ldr	r4, [r3]
   140c8:	bl	10ff0 <dcgettext@plt>
   140cc:	ldr	r2, [pc, #32]	; 140f4 <close_stdout@@Base+0x2488>
   140d0:	mov	r1, #0
   140d4:	add	r2, pc, r2
   140d8:	mov	r3, r0
   140dc:	mov	r0, r4
   140e0:	bl	11080 <error@plt>
   140e4:	bl	111f4 <abort@plt>
   140e8:	andeq	r1, r1, r8, asr #30
   140ec:	andeq	r0, r0, ip, lsl r1
   140f0:	andeq	r1, r0, ip, lsl r4
   140f4:	andeq	r1, r0, ip, lsl r0
   140f8:	push	{r1, r2, r3}
   140fc:	movw	ip, #1030	; 0x406
   14100:	ldr	r3, [pc, #336]	; 14258 <close_stdout@@Base+0x25ec>
   14104:	push	{r4, r5, r6, r7, r8, lr}
   14108:	add	r3, pc, r3
   1410c:	ldr	lr, [pc, #328]	; 1425c <close_stdout@@Base+0x25f0>
   14110:	sub	sp, sp, #12
   14114:	add	r2, sp, #40	; 0x28
   14118:	mov	r6, r0
   1411c:	ldr	r1, [sp, #36]	; 0x24
   14120:	ldr	r4, [r3, lr]
   14124:	cmp	r1, ip
   14128:	str	r2, [sp]
   1412c:	ldr	r3, [r4]
   14130:	str	r3, [sp, #4]
   14134:	bne	141b8 <close_stdout@@Base+0x254c>
   14138:	ldr	r8, [pc, #288]	; 14260 <close_stdout@@Base+0x25f4>
   1413c:	add	r3, sp, #44	; 0x2c
   14140:	str	r3, [sp]
   14144:	add	r8, pc, r8
   14148:	ldr	r7, [sp, #40]	; 0x28
   1414c:	ldr	r3, [r8]
   14150:	mov	r2, r7
   14154:	cmp	r3, #0
   14158:	blt	14244 <close_stdout@@Base+0x25d8>
   1415c:	bl	1111c <fcntl@plt>
   14160:	subs	r5, r0, #0
   14164:	blt	141c8 <close_stdout@@Base+0x255c>
   14168:	ldr	r3, [pc, #244]	; 14264 <close_stdout@@Base+0x25f8>
   1416c:	mov	r2, #1
   14170:	add	r3, pc, r3
   14174:	str	r2, [r3]
   14178:	cmp	r5, #0
   1417c:	blt	14194 <close_stdout@@Base+0x2528>
   14180:	ldr	r3, [pc, #224]	; 14268 <close_stdout@@Base+0x25fc>
   14184:	add	r3, pc, r3
   14188:	ldr	r3, [r3]
   1418c:	cmn	r3, #1
   14190:	beq	141f8 <close_stdout@@Base+0x258c>
   14194:	ldr	r2, [sp, #4]
   14198:	mov	r0, r5
   1419c:	ldr	r3, [r4]
   141a0:	cmp	r2, r3
   141a4:	bne	14254 <close_stdout@@Base+0x25e8>
   141a8:	add	sp, sp, #12
   141ac:	pop	{r4, r5, r6, r7, r8, lr}
   141b0:	add	sp, sp, #12
   141b4:	bx	lr
   141b8:	ldr	r2, [sp, #40]	; 0x28
   141bc:	bl	1111c <fcntl@plt>
   141c0:	mov	r5, r0
   141c4:	b	14194 <close_stdout@@Base+0x2528>
   141c8:	bl	11128 <__errno_location@plt>
   141cc:	ldr	r3, [r0]
   141d0:	cmp	r3, #22
   141d4:	bne	14168 <close_stdout@@Base+0x24fc>
   141d8:	mov	r0, r6
   141dc:	mov	r2, r7
   141e0:	mov	r1, #0
   141e4:	bl	140f8 <close_stdout@@Base+0x248c>
   141e8:	subs	r5, r0, #0
   141ec:	blt	14194 <close_stdout@@Base+0x2528>
   141f0:	mvn	r3, #0
   141f4:	str	r3, [r8]
   141f8:	mov	r0, r5
   141fc:	mov	r1, #1
   14200:	bl	1111c <fcntl@plt>
   14204:	subs	r2, r0, #0
   14208:	blt	14224 <close_stdout@@Base+0x25b8>
   1420c:	orr	r2, r2, #1
   14210:	mov	r0, r5
   14214:	mov	r1, #2
   14218:	bl	1111c <fcntl@plt>
   1421c:	cmn	r0, #1
   14220:	bne	14194 <close_stdout@@Base+0x2528>
   14224:	bl	11128 <__errno_location@plt>
   14228:	ldr	r7, [r0]
   1422c:	mov	r6, r0
   14230:	mov	r0, r5
   14234:	mvn	r5, #0
   14238:	bl	11200 <close@plt>
   1423c:	str	r7, [r6]
   14240:	b	14194 <close_stdout@@Base+0x2528>
   14244:	mov	r1, #0
   14248:	bl	140f8 <close_stdout@@Base+0x248c>
   1424c:	mov	r5, r0
   14250:	b	14178 <close_stdout@@Base+0x250c>
   14254:	bl	10ffc <__stack_chk_fail@plt>
   14258:	strdeq	r1, [r1], -r0
   1425c:	strdeq	r0, [r0], -r8
   14260:	andeq	r2, r1, r4, ror r1
   14264:	andeq	r2, r1, r8, asr #2
   14268:	andeq	r2, r1, r4, lsr r1
   1426c:	push	{r4, r5, r6, lr}
   14270:	mov	r4, r0
   14274:	bl	11068 <__fpending@plt>
   14278:	mov	r6, r0
   1427c:	mov	r0, r4
   14280:	ldr	r4, [r4]
   14284:	bl	1470c <close_stdout@@Base+0x2aa0>
   14288:	and	r4, r4, #32
   1428c:	adds	r5, r0, #0
   14290:	movne	r5, #1
   14294:	cmp	r4, #0
   14298:	bne	142b8 <close_stdout@@Base+0x264c>
   1429c:	cmp	r5, #0
   142a0:	beq	142b0 <close_stdout@@Base+0x2644>
   142a4:	cmp	r6, #0
   142a8:	beq	142d4 <close_stdout@@Base+0x2668>
   142ac:	mvn	r4, #0
   142b0:	mov	r0, r4
   142b4:	pop	{r4, r5, r6, pc}
   142b8:	cmp	r5, #0
   142bc:	bne	142ac <close_stdout@@Base+0x2640>
   142c0:	bl	11128 <__errno_location@plt>
   142c4:	mvn	r4, #0
   142c8:	str	r5, [r0]
   142cc:	mov	r0, r4
   142d0:	pop	{r4, r5, r6, pc}
   142d4:	bl	11128 <__errno_location@plt>
   142d8:	ldr	r4, [r0]
   142dc:	subs	r4, r4, #9
   142e0:	mvnne	r4, #0
   142e4:	mov	r0, r4
   142e8:	pop	{r4, r5, r6, pc}
   142ec:	ldr	r3, [pc, #984]	; 146cc <close_stdout@@Base+0x2a60>
   142f0:	mov	r0, #14
   142f4:	ldr	r2, [pc, #980]	; 146d0 <close_stdout@@Base+0x2a64>
   142f8:	add	r3, pc, r3
   142fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14300:	sub	sp, sp, #132	; 0x84
   14304:	ldr	r6, [r3, r2]
   14308:	ldr	r3, [r6]
   1430c:	str	r3, [sp, #124]	; 0x7c
   14310:	bl	111b8 <nl_langinfo@plt>
   14314:	subs	r5, r0, #0
   14318:	beq	143cc <close_stdout@@Base+0x2760>
   1431c:	ldr	r3, [pc, #944]	; 146d4 <close_stdout@@Base+0x2a68>
   14320:	ldr	r4, [pc, r3]
   14324:	cmp	r4, #0
   14328:	beq	143d8 <close_stdout@@Base+0x276c>
   1432c:	ldrb	r7, [r4]
   14330:	cmp	r7, #0
   14334:	bne	14368 <close_stdout@@Base+0x26fc>
   14338:	b	143a0 <close_stdout@@Base+0x2734>
   1433c:	mov	r0, r4
   14340:	bl	11104 <strlen@plt>
   14344:	add	r0, r0, #1
   14348:	add	r7, r4, r0
   1434c:	mov	r0, r7
   14350:	bl	11104 <strlen@plt>
   14354:	add	r0, r0, #1
   14358:	add	r4, r7, r0
   1435c:	ldrb	r7, [r7, r0]
   14360:	cmp	r7, #0
   14364:	beq	143a0 <close_stdout@@Base+0x2734>
   14368:	mov	r0, r5
   1436c:	mov	r1, r4
   14370:	bl	10f84 <strcmp@plt>
   14374:	cmp	r0, #0
   14378:	beq	14390 <close_stdout@@Base+0x2724>
   1437c:	cmp	r7, #42	; 0x2a
   14380:	bne	1433c <close_stdout@@Base+0x26d0>
   14384:	ldrb	r3, [r4, #1]
   14388:	cmp	r3, #0
   1438c:	bne	1433c <close_stdout@@Base+0x26d0>
   14390:	mov	r0, r4
   14394:	bl	11104 <strlen@plt>
   14398:	add	r0, r0, #1
   1439c:	add	r5, r4, r0
   143a0:	ldrb	r3, [r5]
   143a4:	cmp	r3, #0
   143a8:	ldreq	r5, [pc, #808]	; 146d8 <close_stdout@@Base+0x2a6c>
   143ac:	addeq	r5, pc, r5
   143b0:	ldr	r2, [sp, #124]	; 0x7c
   143b4:	mov	r0, r5
   143b8:	ldr	r3, [r6]
   143bc:	cmp	r2, r3
   143c0:	bne	146a0 <close_stdout@@Base+0x2a34>
   143c4:	add	sp, sp, #132	; 0x84
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	ldr	r5, [pc, #776]	; 146dc <close_stdout@@Base+0x2a70>
   143d0:	add	r5, pc, r5
   143d4:	b	1431c <close_stdout@@Base+0x26b0>
   143d8:	ldr	r0, [pc, #768]	; 146e0 <close_stdout@@Base+0x2a74>
   143dc:	add	r0, pc, r0
   143e0:	bl	11098 <getenv@plt>
   143e4:	subs	r8, r0, #0
   143e8:	beq	14678 <close_stdout@@Base+0x2a0c>
   143ec:	ldrb	r3, [r8]
   143f0:	cmp	r3, #0
   143f4:	beq	1460c <close_stdout@@Base+0x29a0>
   143f8:	bl	11104 <strlen@plt>
   143fc:	subs	sl, r0, #0
   14400:	subne	r3, sl, #1
   14404:	bne	1461c <close_stdout@@Base+0x29b0>
   14408:	mov	r9, #0
   1440c:	mov	fp, r9
   14410:	add	r9, sl, r9
   14414:	add	r0, r9, #14
   14418:	bl	110a4 <malloc@plt>
   1441c:	subs	r7, r0, #0
   14420:	beq	1466c <close_stdout@@Base+0x2a00>
   14424:	mov	r1, r8
   14428:	mov	r2, sl
   1442c:	bl	10fb4 <memcpy@plt>
   14430:	cmp	fp, #0
   14434:	add	ip, r7, r9
   14438:	movne	r3, #47	; 0x2f
   1443c:	strbne	r3, [r7, sl]
   14440:	ldr	r3, [pc, #668]	; 146e4 <close_stdout@@Base+0x2a78>
   14444:	add	r3, pc, r3
   14448:	ldm	r3!, {r0, r1, r2}
   1444c:	ldrh	r3, [r3]
   14450:	str	r0, [r7, r9]
   14454:	mov	r0, r7
   14458:	str	r1, [ip, #4]
   1445c:	mov	r1, #32768	; 0x8000
   14460:	strh	r3, [ip, #12]
   14464:	str	r2, [ip, #8]
   14468:	bl	1108c <open64@plt>
   1446c:	subs	r8, r0, #0
   14470:	blt	14634 <close_stdout@@Base+0x29c8>
   14474:	ldr	r1, [pc, #620]	; 146e8 <close_stdout@@Base+0x2a7c>
   14478:	add	r1, pc, r1
   1447c:	bl	10f54 <fdopen@plt>
   14480:	subs	fp, r0, #0
   14484:	beq	1468c <close_stdout@@Base+0x2a20>
   14488:	ldr	r0, [pc, #604]	; 146ec <close_stdout@@Base+0x2a80>
   1448c:	add	sl, sp, #20
   14490:	add	r9, sp, #72	; 0x48
   14494:	mov	r8, #0
   14498:	add	r0, pc, r0
   1449c:	str	r0, [sp, #12]
   144a0:	ldr	r3, [fp, #4]
   144a4:	ldr	r2, [fp, #8]
   144a8:	cmp	r3, r2
   144ac:	bcs	14598 <close_stdout@@Base+0x292c>
   144b0:	add	r2, r3, #1
   144b4:	str	r2, [fp, #4]
   144b8:	ldrb	r0, [r3]
   144bc:	cmp	r0, #32
   144c0:	beq	144a0 <close_stdout@@Base+0x2834>
   144c4:	sub	r3, r0, #9
   144c8:	cmp	r3, #1
   144cc:	bls	144a0 <close_stdout@@Base+0x2834>
   144d0:	cmp	r0, #35	; 0x23
   144d4:	beq	145ac <close_stdout@@Base+0x2940>
   144d8:	mov	r1, fp
   144dc:	bl	11110 <ungetc@plt>
   144e0:	mov	r0, fp
   144e4:	ldr	r1, [sp, #12]
   144e8:	mov	r2, sl
   144ec:	mov	r3, r9
   144f0:	bl	1114c <fscanf@plt>
   144f4:	cmp	r0, #1
   144f8:	ble	145dc <close_stdout@@Base+0x2970>
   144fc:	mov	r0, sl
   14500:	bl	11104 <strlen@plt>
   14504:	str	r0, [sp, #8]
   14508:	mov	r0, r9
   1450c:	bl	11104 <strlen@plt>
   14510:	cmp	r8, #0
   14514:	mov	r2, r0
   14518:	bne	14640 <close_stdout@@Base+0x29d4>
   1451c:	ldr	r3, [sp, #8]
   14520:	str	r2, [sp]
   14524:	add	r8, r0, r3
   14528:	add	r0, r8, #3
   1452c:	add	r8, r8, #2
   14530:	bl	110a4 <malloc@plt>
   14534:	ldr	r2, [sp]
   14538:	mov	r3, r0
   1453c:	cmp	r3, #0
   14540:	beq	146a4 <close_stdout@@Base+0x2a38>
   14544:	ldr	r0, [sp, #8]
   14548:	movw	r1, #65534	; 0xfffe
   1454c:	movt	r1, #65535	; 0xffff
   14550:	rsb	r2, r2, r8
   14554:	rsb	r1, r0, r1
   14558:	stm	sp, {r2, r3}
   1455c:	add	r0, r1, r2
   14560:	mov	r1, sl
   14564:	add	r0, r3, r0
   14568:	mov	r4, r3
   1456c:	bl	1105c <strcpy@plt>
   14570:	ldr	r2, [sp]
   14574:	ldr	r3, [sp, #4]
   14578:	mov	r1, r9
   1457c:	sub	r0, r2, #1
   14580:	add	r0, r3, r0
   14584:	bl	1105c <strcpy@plt>
   14588:	ldr	r3, [fp, #4]
   1458c:	ldr	r2, [fp, #8]
   14590:	cmp	r3, r2
   14594:	bcc	144b0 <close_stdout@@Base+0x2844>
   14598:	mov	r0, fp
   1459c:	bl	11194 <__uflow@plt>
   145a0:	cmn	r0, #1
   145a4:	beq	145dc <close_stdout@@Base+0x2970>
   145a8:	b	144bc <close_stdout@@Base+0x2850>
   145ac:	ldr	r3, [fp, #4]
   145b0:	ldr	r2, [fp, #8]
   145b4:	cmp	r3, r2
   145b8:	bcs	146c0 <close_stdout@@Base+0x2a54>
   145bc:	add	r2, r3, #1
   145c0:	str	r2, [fp, #4]
   145c4:	ldrb	r0, [r3]
   145c8:	cmp	r0, #10
   145cc:	cmnne	r0, #1
   145d0:	bne	145ac <close_stdout@@Base+0x2940>
   145d4:	cmn	r0, #1
   145d8:	bne	144a0 <close_stdout@@Base+0x2834>
   145dc:	mov	r0, fp
   145e0:	bl	1470c <close_stdout@@Base+0x2aa0>
   145e4:	cmp	r8, #0
   145e8:	beq	14634 <close_stdout@@Base+0x29c8>
   145ec:	mov	r3, #0
   145f0:	strb	r3, [r4, r8]
   145f4:	mov	r0, r7
   145f8:	bl	10f9c <free@plt>
   145fc:	ldr	r3, [pc, #236]	; 146f0 <close_stdout@@Base+0x2a84>
   14600:	add	r3, pc, r3
   14604:	str	r4, [r3]
   14608:	b	1432c <close_stdout@@Base+0x26c0>
   1460c:	ldr	r8, [pc, #224]	; 146f4 <close_stdout@@Base+0x2a88>
   14610:	mov	r3, #7
   14614:	mov	sl, #8
   14618:	add	r8, pc, r8
   1461c:	ldrb	r3, [r8, r3]
   14620:	cmp	r3, #47	; 0x2f
   14624:	movne	r9, #1
   14628:	movne	fp, r9
   1462c:	bne	14410 <close_stdout@@Base+0x27a4>
   14630:	b	14408 <close_stdout@@Base+0x279c>
   14634:	ldr	r4, [pc, #188]	; 146f8 <close_stdout@@Base+0x2a8c>
   14638:	add	r4, pc, r4
   1463c:	b	145f4 <close_stdout@@Base+0x2988>
   14640:	ldr	r0, [sp, #8]
   14644:	str	r2, [sp]
   14648:	add	r3, r0, r2
   1464c:	mov	r0, r4
   14650:	add	r8, r3, r8
   14654:	add	r1, r8, #3
   14658:	add	r8, r8, #2
   1465c:	bl	11014 <realloc@plt>
   14660:	ldr	r2, [sp]
   14664:	mov	r3, r0
   14668:	b	1453c <close_stdout@@Base+0x28d0>
   1466c:	ldr	r4, [pc, #136]	; 146fc <close_stdout@@Base+0x2a90>
   14670:	add	r4, pc, r4
   14674:	b	145fc <close_stdout@@Base+0x2990>
   14678:	ldr	r8, [pc, #128]	; 14700 <close_stdout@@Base+0x2a94>
   1467c:	mov	r3, #7
   14680:	mov	sl, #8
   14684:	add	r8, pc, r8
   14688:	b	1461c <close_stdout@@Base+0x29b0>
   1468c:	ldr	r4, [pc, #112]	; 14704 <close_stdout@@Base+0x2a98>
   14690:	mov	r0, r8
   14694:	add	r4, pc, r4
   14698:	bl	11200 <close@plt>
   1469c:	b	145f4 <close_stdout@@Base+0x2988>
   146a0:	bl	10ffc <__stack_chk_fail@plt>
   146a4:	mov	r0, r4
   146a8:	ldr	r4, [pc, #88]	; 14708 <close_stdout@@Base+0x2a9c>
   146ac:	bl	10f9c <free@plt>
   146b0:	mov	r0, fp
   146b4:	add	r4, pc, r4
   146b8:	bl	1470c <close_stdout@@Base+0x2aa0>
   146bc:	b	145f4 <close_stdout@@Base+0x2988>
   146c0:	mov	r0, fp
   146c4:	bl	11194 <__uflow@plt>
   146c8:	b	145c8 <close_stdout@@Base+0x295c>
   146cc:	andeq	r1, r1, r0, lsl #26
   146d0:	strdeq	r0, [r0], -r8
   146d4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   146d8:	andeq	r1, r0, ip, asr #2
   146dc:	andeq	r0, r0, r4, asr #22
   146e0:	andeq	r1, r0, r4, lsr #2
   146e4:	andeq	r1, r0, ip, asr #1
   146e8:	andeq	r0, r0, r0, asr #24
   146ec:	andeq	r1, r0, r8, lsl #1
   146f0:			; <UNDEFINED> instruction: 0x00011cbc
   146f4:	ldrdeq	r0, [r0], -r4
   146f8:	ldrdeq	r0, [r0], -ip
   146fc:	andeq	r0, r0, r4, lsr #17
   14700:	andeq	r0, r0, r8, ror #28
   14704:	andeq	r0, r0, r0, lsl #17
   14708:	andeq	r0, r0, r0, ror #16
   1470c:	push	{r4, r5, r6, lr}
   14710:	sub	sp, sp, #8
   14714:	mov	r4, r0
   14718:	bl	11164 <fileno@plt>
   1471c:	cmp	r0, #0
   14720:	mov	r0, r4
   14724:	blt	147a0 <close_stdout@@Base+0x2b34>
   14728:	bl	110bc <__freading@plt>
   1472c:	cmp	r0, #0
   14730:	bne	1476c <close_stdout@@Base+0x2b00>
   14734:	mov	r0, r4
   14738:	bl	147ac <close_stdout@@Base+0x2b40>
   1473c:	cmp	r0, #0
   14740:	beq	1479c <close_stdout@@Base+0x2b30>
   14744:	bl	11128 <__errno_location@plt>
   14748:	ldr	r6, [r0]
   1474c:	mov	r5, r0
   14750:	mov	r0, r4
   14754:	bl	1117c <fclose@plt>
   14758:	cmp	r6, #0
   1475c:	mvnne	r0, #0
   14760:	strne	r6, [r5]
   14764:	add	sp, sp, #8
   14768:	pop	{r4, r5, r6, pc}
   1476c:	mov	r0, r4
   14770:	bl	11164 <fileno@plt>
   14774:	mov	r1, #1
   14778:	mov	r2, #0
   1477c:	mov	r3, #0
   14780:	str	r1, [sp]
   14784:	bl	11044 <lseek64@plt>
   14788:	mvn	r2, #0
   1478c:	mvn	r3, #0
   14790:	cmp	r1, r3
   14794:	cmpeq	r0, r2
   14798:	bne	14734 <close_stdout@@Base+0x2ac8>
   1479c:	mov	r0, r4
   147a0:	add	sp, sp, #8
   147a4:	pop	{r4, r5, r6, lr}
   147a8:	b	1117c <fclose@plt>
   147ac:	push	{r4, lr}
   147b0:	subs	r4, r0, #0
   147b4:	sub	sp, sp, #8
   147b8:	beq	147c8 <close_stdout@@Base+0x2b5c>
   147bc:	bl	110bc <__freading@plt>
   147c0:	cmp	r0, #0
   147c4:	bne	147d8 <close_stdout@@Base+0x2b6c>
   147c8:	mov	r0, r4
   147cc:	add	sp, sp, #8
   147d0:	pop	{r4, lr}
   147d4:	b	10f90 <fflush@plt>
   147d8:	ldr	r3, [r4]
   147dc:	tst	r3, #256	; 0x100
   147e0:	beq	147c8 <close_stdout@@Base+0x2b5c>
   147e4:	mov	r3, #1
   147e8:	mov	r0, r4
   147ec:	str	r3, [sp]
   147f0:	mov	r2, #0
   147f4:	mov	r3, #0
   147f8:	bl	1480c <close_stdout@@Base+0x2ba0>
   147fc:	mov	r0, r4
   14800:	add	sp, sp, #8
   14804:	pop	{r4, lr}
   14808:	b	10f90 <fflush@plt>
   1480c:	push	{r4, r5, r6, r7, lr}
   14810:	sub	sp, sp, #20
   14814:	ldmib	r0, {r1, ip}
   14818:	mov	r6, r0
   1481c:	ldr	r4, [sp, #40]	; 0x28
   14820:	cmp	ip, r1
   14824:	beq	1483c <close_stdout@@Base+0x2bd0>
   14828:	str	r4, [sp, #40]	; 0x28
   1482c:	mov	r0, r6
   14830:	add	sp, sp, #20
   14834:	pop	{r4, r5, r6, r7, lr}
   14838:	b	11188 <fseeko64@plt>
   1483c:	ldr	ip, [r0, #20]
   14840:	ldr	r1, [r0, #16]
   14844:	cmp	ip, r1
   14848:	bne	14828 <close_stdout@@Base+0x2bbc>
   1484c:	ldr	r7, [r0, #36]	; 0x24
   14850:	cmp	r7, #0
   14854:	bne	14828 <close_stdout@@Base+0x2bbc>
   14858:	str	r2, [sp, #12]
   1485c:	mvn	r5, #0
   14860:	str	r3, [sp, #8]
   14864:	bl	11164 <fileno@plt>
   14868:	str	r4, [sp]
   1486c:	mvn	r4, #0
   14870:	ldr	r2, [sp, #12]
   14874:	ldr	r3, [sp, #8]
   14878:	bl	11044 <lseek64@plt>
   1487c:	mov	r2, r0
   14880:	mov	r3, r1
   14884:	cmp	r3, r5
   14888:	cmpeq	r2, r4
   1488c:	beq	148ac <close_stdout@@Base+0x2c40>
   14890:	ldr	r1, [r6]
   14894:	mov	r0, r7
   14898:	strd	r2, [r6, #80]	; 0x50
   1489c:	bic	r3, r1, #16
   148a0:	str	r3, [r6]
   148a4:	add	sp, sp, #20
   148a8:	pop	{r4, r5, r6, r7, pc}
   148ac:	mvn	r0, #0
   148b0:	b	148a4 <close_stdout@@Base+0x2c38>
   148b4:	subs	r2, r1, #1
   148b8:	bxeq	lr
   148bc:	bcc	14a94 <close_stdout@@Base+0x2e28>
   148c0:	cmp	r0, r1
   148c4:	bls	14a78 <close_stdout@@Base+0x2e0c>
   148c8:	tst	r1, r2
   148cc:	beq	14a84 <close_stdout@@Base+0x2e18>
   148d0:	clz	r3, r0
   148d4:	clz	r2, r1
   148d8:	sub	r3, r2, r3
   148dc:	rsbs	r3, r3, #31
   148e0:	addne	r3, r3, r3, lsl #1
   148e4:	mov	r2, #0
   148e8:	addne	pc, pc, r3, lsl #2
   148ec:	nop	{0}
   148f0:	cmp	r0, r1, lsl #31
   148f4:	adc	r2, r2, r2
   148f8:	subcs	r0, r0, r1, lsl #31
   148fc:	cmp	r0, r1, lsl #30
   14900:	adc	r2, r2, r2
   14904:	subcs	r0, r0, r1, lsl #30
   14908:	cmp	r0, r1, lsl #29
   1490c:	adc	r2, r2, r2
   14910:	subcs	r0, r0, r1, lsl #29
   14914:	cmp	r0, r1, lsl #28
   14918:	adc	r2, r2, r2
   1491c:	subcs	r0, r0, r1, lsl #28
   14920:	cmp	r0, r1, lsl #27
   14924:	adc	r2, r2, r2
   14928:	subcs	r0, r0, r1, lsl #27
   1492c:	cmp	r0, r1, lsl #26
   14930:	adc	r2, r2, r2
   14934:	subcs	r0, r0, r1, lsl #26
   14938:	cmp	r0, r1, lsl #25
   1493c:	adc	r2, r2, r2
   14940:	subcs	r0, r0, r1, lsl #25
   14944:	cmp	r0, r1, lsl #24
   14948:	adc	r2, r2, r2
   1494c:	subcs	r0, r0, r1, lsl #24
   14950:	cmp	r0, r1, lsl #23
   14954:	adc	r2, r2, r2
   14958:	subcs	r0, r0, r1, lsl #23
   1495c:	cmp	r0, r1, lsl #22
   14960:	adc	r2, r2, r2
   14964:	subcs	r0, r0, r1, lsl #22
   14968:	cmp	r0, r1, lsl #21
   1496c:	adc	r2, r2, r2
   14970:	subcs	r0, r0, r1, lsl #21
   14974:	cmp	r0, r1, lsl #20
   14978:	adc	r2, r2, r2
   1497c:	subcs	r0, r0, r1, lsl #20
   14980:	cmp	r0, r1, lsl #19
   14984:	adc	r2, r2, r2
   14988:	subcs	r0, r0, r1, lsl #19
   1498c:	cmp	r0, r1, lsl #18
   14990:	adc	r2, r2, r2
   14994:	subcs	r0, r0, r1, lsl #18
   14998:	cmp	r0, r1, lsl #17
   1499c:	adc	r2, r2, r2
   149a0:	subcs	r0, r0, r1, lsl #17
   149a4:	cmp	r0, r1, lsl #16
   149a8:	adc	r2, r2, r2
   149ac:	subcs	r0, r0, r1, lsl #16
   149b0:	cmp	r0, r1, lsl #15
   149b4:	adc	r2, r2, r2
   149b8:	subcs	r0, r0, r1, lsl #15
   149bc:	cmp	r0, r1, lsl #14
   149c0:	adc	r2, r2, r2
   149c4:	subcs	r0, r0, r1, lsl #14
   149c8:	cmp	r0, r1, lsl #13
   149cc:	adc	r2, r2, r2
   149d0:	subcs	r0, r0, r1, lsl #13
   149d4:	cmp	r0, r1, lsl #12
   149d8:	adc	r2, r2, r2
   149dc:	subcs	r0, r0, r1, lsl #12
   149e0:	cmp	r0, r1, lsl #11
   149e4:	adc	r2, r2, r2
   149e8:	subcs	r0, r0, r1, lsl #11
   149ec:	cmp	r0, r1, lsl #10
   149f0:	adc	r2, r2, r2
   149f4:	subcs	r0, r0, r1, lsl #10
   149f8:	cmp	r0, r1, lsl #9
   149fc:	adc	r2, r2, r2
   14a00:	subcs	r0, r0, r1, lsl #9
   14a04:	cmp	r0, r1, lsl #8
   14a08:	adc	r2, r2, r2
   14a0c:	subcs	r0, r0, r1, lsl #8
   14a10:	cmp	r0, r1, lsl #7
   14a14:	adc	r2, r2, r2
   14a18:	subcs	r0, r0, r1, lsl #7
   14a1c:	cmp	r0, r1, lsl #6
   14a20:	adc	r2, r2, r2
   14a24:	subcs	r0, r0, r1, lsl #6
   14a28:	cmp	r0, r1, lsl #5
   14a2c:	adc	r2, r2, r2
   14a30:	subcs	r0, r0, r1, lsl #5
   14a34:	cmp	r0, r1, lsl #4
   14a38:	adc	r2, r2, r2
   14a3c:	subcs	r0, r0, r1, lsl #4
   14a40:	cmp	r0, r1, lsl #3
   14a44:	adc	r2, r2, r2
   14a48:	subcs	r0, r0, r1, lsl #3
   14a4c:	cmp	r0, r1, lsl #2
   14a50:	adc	r2, r2, r2
   14a54:	subcs	r0, r0, r1, lsl #2
   14a58:	cmp	r0, r1, lsl #1
   14a5c:	adc	r2, r2, r2
   14a60:	subcs	r0, r0, r1, lsl #1
   14a64:	cmp	r0, r1
   14a68:	adc	r2, r2, r2
   14a6c:	subcs	r0, r0, r1
   14a70:	mov	r0, r2
   14a74:	bx	lr
   14a78:	moveq	r0, #1
   14a7c:	movne	r0, #0
   14a80:	bx	lr
   14a84:	clz	r2, r1
   14a88:	rsb	r2, r2, #31
   14a8c:	lsr	r0, r0, r2
   14a90:	bx	lr
   14a94:	cmp	r0, #0
   14a98:	mvnne	r0, #0
   14a9c:	b	14ac0 <close_stdout@@Base+0x2e54>
   14aa0:	cmp	r1, #0
   14aa4:	beq	14a94 <close_stdout@@Base+0x2e28>
   14aa8:	push	{r0, r1, lr}
   14aac:	bl	148b4 <close_stdout@@Base+0x2c48>
   14ab0:	pop	{r1, r2, lr}
   14ab4:	mul	r3, r2, r0
   14ab8:	sub	r1, r1, r3
   14abc:	bx	lr
   14ac0:	push	{r1, lr}
   14ac4:	mov	r0, #8
   14ac8:	bl	10f78 <raise@plt>
   14acc:	pop	{r1, pc}
   14ad0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14ad4:	mov	r7, r0
   14ad8:	ldr	r6, [pc, #76]	; 14b2c <close_stdout@@Base+0x2ec0>
   14adc:	mov	r8, r1
   14ae0:	ldr	r5, [pc, #72]	; 14b30 <close_stdout@@Base+0x2ec4>
   14ae4:	mov	r9, r2
   14ae8:	add	r6, pc, r6
   14aec:	bl	10f34 <fdopen@plt-0x20>
   14af0:	add	r5, pc, r5
   14af4:	rsb	r6, r5, r6
   14af8:	asrs	r6, r6, #2
   14afc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14b00:	sub	r5, r5, #4
   14b04:	mov	r4, #0
   14b08:	add	r4, r4, #1
   14b0c:	ldr	r3, [r5, #4]!
   14b10:	mov	r0, r7
   14b14:	mov	r1, r8
   14b18:	mov	r2, r9
   14b1c:	blx	r3
   14b20:	cmp	r4, r6
   14b24:	bne	14b08 <close_stdout@@Base+0x2e9c>
   14b28:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14b2c:			; <UNDEFINED> instruction: 0x000113bc
   14b30:			; <UNDEFINED> instruction: 0x000113b0
   14b34:	bx	lr
   14b38:	ldr	r3, [pc, #28]	; 14b5c <close_stdout@@Base+0x2ef0>
   14b3c:	mov	r1, #0
   14b40:	ldr	r2, [pc, #24]	; 14b60 <close_stdout@@Base+0x2ef4>
   14b44:	add	r3, pc, r3
   14b48:	ldr	r3, [r3, r2]
   14b4c:	cmp	r3, #0
   14b50:	ldrne	r2, [r3]
   14b54:	moveq	r2, r3
   14b58:	b	11134 <__cxa_atexit@plt>
   14b5c:			; <UNDEFINED> instruction: 0x000114b4
   14b60:	andeq	r0, r0, r0, lsl r1

Disassembly of section .fini:

00014b64 <.fini>:
   14b64:	push	{r3, lr}
   14b68:	pop	{r3, pc}
