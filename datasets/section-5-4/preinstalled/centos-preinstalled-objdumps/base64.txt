
centos-preinstalled/base64:     file format elf32-littlearm


Disassembly of section .init:

00010fd8 <.init>:
   10fd8:	push	{r3, lr}
   10fdc:	bl	116bc <__assert_fail@plt+0x3f4>
   10fe0:	pop	{r3, pc}

Disassembly of section .plt:

00010fe4 <fdopen@plt-0x14>:
   10fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fe8:	ldr	lr, [pc, #4]	; 10ff4 <fdopen@plt-0x4>
   10fec:	add	lr, pc, lr
   10ff0:	ldr	pc, [lr, #8]!
   10ff4:	andeq	r7, r1, ip

00010ff8 <fdopen@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #12]!

00011004 <calloc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #4]!

00011010 <fputs_unlocked@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #4092]!	; 0xffc

0001101c <raise@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #90112	; 0x16000
   11024:	ldr	pc, [ip, #4084]!	; 0xff4

00011028 <strcmp@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #90112	; 0x16000
   11030:	ldr	pc, [ip, #4076]!	; 0xfec

00011034 <posix_fadvise64@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #90112	; 0x16000
   1103c:	ldr	pc, [ip, #4068]!	; 0xfe4

00011040 <fflush@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #90112	; 0x16000
   11048:	ldr	pc, [ip, #4060]!	; 0xfdc

0001104c <memmove@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #90112	; 0x16000
   11054:	ldr	pc, [ip, #4052]!	; 0xfd4

00011058 <free@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #90112	; 0x16000
   11060:	ldr	pc, [ip, #4044]!	; 0xfcc

00011064 <_exit@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #90112	; 0x16000
   1106c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011070 <memcpy@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #90112	; 0x16000
   11078:	ldr	pc, [ip, #4028]!	; 0xfbc

0001107c <__strtoull_internal@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #4020]!	; 0xfb4

00011088 <mbsinit@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #4012]!	; 0xfac

00011094 <fwrite_unlocked@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a0 <memcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #3996]!	; 0xf9c

000110ac <dcgettext@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #3988]!	; 0xf94

000110b8 <__stack_chk_fail@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #3980]!	; 0xf8c

000110c4 <realloc@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #3972]!	; 0xf84

000110d0 <textdomain@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #3964]!	; 0xf7c

000110dc <iswprint@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #3956]!	; 0xf74

000110e8 <fwrite@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110f4 <lseek64@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #3940]!	; 0xf64

00011100 <__ctype_get_mb_cur_max@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #3932]!	; 0xf5c

0001110c <strcpy@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3924]!	; 0xf54

00011118 <__fpending@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3916]!	; 0xf4c

00011124 <mbrtowc@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3908]!	; 0xf44

00011130 <error@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3900]!	; 0xf3c

0001113c <open64@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3892]!	; 0xf34

00011148 <getenv@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3884]!	; 0xf2c

00011154 <malloc@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3876]!	; 0xf24

00011160 <__libc_start_main@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3868]!	; 0xf1c

0001116c <__freading@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3860]!	; 0xf14

00011178 <__gmon_start__@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3852]!	; 0xf0c

00011184 <getopt_long@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3844]!	; 0xf04

00011190 <__ctype_b_loc@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3836]!	; 0xefc

0001119c <exit@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3828]!	; 0xef4

000111a8 <strlen@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3820]!	; 0xeec

000111b4 <strchr@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3812]!	; 0xee4

000111c0 <ungetc@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3804]!	; 0xedc

000111cc <__errno_location@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3796]!	; 0xed4

000111d8 <__cxa_atexit@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3788]!	; 0xecc

000111e4 <memset@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3780]!	; 0xec4

000111f0 <fscanf@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3772]!	; 0xebc

000111fc <__printf_chk@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3764]!	; 0xeb4

00011208 <fileno@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3756]!	; 0xeac

00011214 <__fprintf_chk@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3748]!	; 0xea4

00011220 <memchr@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3740]!	; 0xe9c

0001122c <fclose@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3732]!	; 0xe94

00011238 <fseeko64@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3724]!	; 0xe8c

00011244 <__uflow@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3716]!	; 0xe84

00011250 <__overflow@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3708]!	; 0xe7c

0001125c <setlocale@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3700]!	; 0xe74

00011268 <strrchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3692]!	; 0xe6c

00011274 <nl_langinfo@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3684]!	; 0xe64

00011280 <fopen64@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3676]!	; 0xe5c

0001128c <bindtextdomain@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3668]!	; 0xe54

00011298 <fread_unlocked@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3660]!	; 0xe4c

000112a4 <strncmp@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3652]!	; 0xe44

000112b0 <abort@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3644]!	; 0xe3c

000112bc <close@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3636]!	; 0xe34

000112c8 <__assert_fail@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3628]!	; 0xe2c

Disassembly of section .text:

000112d4 <close_stdout@@Base-0x1584>:
   112d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d8:	mov	r5, r1
   112dc:	ldr	r4, [pc, #832]	; 11624 <__assert_fail@plt+0x35c>
   112e0:	sub	sp, sp, #52	; 0x34
   112e4:	ldr	r1, [pc, #828]	; 11628 <__assert_fail@plt+0x360>
   112e8:	add	r8, sp, #48	; 0x30
   112ec:	add	r4, pc, r4
   112f0:	ldr	ip, [pc, #820]	; 1162c <__assert_fail@plt+0x364>
   112f4:	mov	r2, #76	; 0x4c
   112f8:	mov	r3, #0
   112fc:	ldr	r1, [r4, r1]
   11300:	add	ip, pc, ip
   11304:	strd	r2, [r8, #-16]!
   11308:	mov	sl, r0
   1130c:	str	ip, [sp, #16]
   11310:	mov	r7, #0
   11314:	ldr	r3, [r1]
   11318:	mov	r9, r7
   1131c:	ldr	ip, [pc, #780]	; 11630 <__assert_fail@plt+0x368>
   11320:	ldr	r0, [r5]
   11324:	add	ip, pc, ip
   11328:	str	r3, [sp, #44]	; 0x2c
   1132c:	str	ip, [sp, #24]
   11330:	str	r7, [sp, #20]
   11334:	bl	12a54 <close_stdout@@Base+0x1fc>
   11338:	ldr	r1, [pc, #756]	; 11634 <__assert_fail@plt+0x36c>
   1133c:	mov	r0, #6
   11340:	ldr	r6, [pc, #752]	; 11638 <__assert_fail@plt+0x370>
   11344:	add	r1, pc, r1
   11348:	ldr	fp, [pc, #748]	; 1163c <__assert_fail@plt+0x374>
   1134c:	bl	1125c <setlocale@plt>
   11350:	add	r6, pc, r6
   11354:	ldr	r1, [pc, #740]	; 11640 <__assert_fail@plt+0x378>
   11358:	add	fp, pc, fp
   1135c:	mov	r0, r6
   11360:	add	r1, pc, r1
   11364:	bl	1128c <bindtextdomain@plt>
   11368:	mov	r0, r6
   1136c:	bl	110d0 <textdomain@plt>
   11370:	ldr	r3, [pc, #716]	; 11644 <__assert_fail@plt+0x37c>
   11374:	ldr	r0, [r4, r3]
   11378:	bl	16450 <close_stdout@@Base+0x3bf8>
   1137c:	str	r9, [sp]
   11380:	mov	r0, sl
   11384:	mov	r1, r5
   11388:	ldr	r2, [sp, #16]
   1138c:	mov	r3, fp
   11390:	mov	r6, #0
   11394:	bl	11184 <getopt_long@plt>
   11398:	cmn	r0, #1
   1139c:	beq	11484 <__assert_fail@plt+0x1bc>
   113a0:	cmp	r0, #100	; 0x64
   113a4:	beq	114dc <__assert_fail@plt+0x214>
   113a8:	bgt	113c4 <__assert_fail@plt+0xfc>
   113ac:	cmn	r0, #3
   113b0:	beq	1143c <__assert_fail@plt+0x174>
   113b4:	cmn	r0, #2
   113b8:	bne	114d4 <__assert_fail@plt+0x20c>
   113bc:	mov	r0, r6
   113c0:	bl	11e7c <__assert_fail@plt+0xbb4>
   113c4:	cmp	r0, #105	; 0x69
   113c8:	beq	1147c <__assert_fail@plt+0x1b4>
   113cc:	cmp	r0, #119	; 0x77
   113d0:	bne	114d4 <__assert_fail@plt+0x20c>
   113d4:	ldr	r0, [pc, #620]	; 11648 <__assert_fail@plt+0x380>
   113d8:	mov	r1, r6
   113dc:	mov	r2, r6
   113e0:	mov	r3, r8
   113e4:	ldr	r0, [r4, r0]
   113e8:	str	r9, [sp]
   113ec:	str	r0, [sp, #28]
   113f0:	ldr	r0, [r0]
   113f4:	bl	14abc <close_stdout@@Base+0x2264>
   113f8:	cmp	r0, #0
   113fc:	beq	1137c <__assert_fail@plt+0xb4>
   11400:	ldr	r1, [sp, #24]
   11404:	mov	r0, r6
   11408:	mov	r2, #5
   1140c:	bl	110ac <dcgettext@plt>
   11410:	ldr	ip, [sp, #28]
   11414:	mov	r2, r0
   11418:	ldr	r0, [ip]
   1141c:	str	r2, [sp, #12]
   11420:	bl	13f80 <close_stdout@@Base+0x1728>
   11424:	ldr	r2, [sp, #12]
   11428:	mov	r1, r6
   1142c:	mov	r3, r0
   11430:	mov	r0, #1
   11434:	bl	11130 <error@plt>
   11438:	b	1137c <__assert_fail@plt+0xb4>
   1143c:	ldr	r1, [pc, #520]	; 1164c <__assert_fail@plt+0x384>
   11440:	ldr	r3, [pc, #520]	; 11650 <__assert_fail@plt+0x388>
   11444:	ldr	r2, [pc, #520]	; 11654 <__assert_fail@plt+0x38c>
   11448:	ldr	r0, [r4, r1]
   1144c:	ldr	r3, [r4, r3]
   11450:	add	r2, pc, r2
   11454:	ldr	r1, [pc, #508]	; 11658 <__assert_fail@plt+0x390>
   11458:	ldr	r0, [r0]
   1145c:	ldr	r3, [r3]
   11460:	add	r1, pc, r1
   11464:	stm	sp, {r2, r6}
   11468:	ldr	r2, [pc, #492]	; 1165c <__assert_fail@plt+0x394>
   1146c:	add	r2, pc, r2
   11470:	bl	14740 <close_stdout@@Base+0x1ee8>
   11474:	mov	r0, r6
   11478:	bl	1119c <exit@plt>
   1147c:	mov	r7, #1
   11480:	b	1137c <__assert_fail@plt+0xb4>
   11484:	ldr	r3, [pc, #468]	; 11660 <__assert_fail@plt+0x398>
   11488:	ldr	r8, [r4, r3]
   1148c:	ldr	r3, [r8]
   11490:	rsb	r2, r3, sl
   11494:	cmp	r2, #1
   11498:	ble	114e8 <__assert_fail@plt+0x220>
   1149c:	ldr	r1, [pc, #448]	; 11664 <__assert_fail@plt+0x39c>
   114a0:	mov	r2, #5
   114a4:	mov	r0, r6
   114a8:	add	r1, pc, r1
   114ac:	bl	110ac <dcgettext@plt>
   114b0:	ldr	r3, [r8]
   114b4:	mov	r4, r0
   114b8:	ldr	r0, [r5, r3, lsl #2]
   114bc:	bl	142a4 <close_stdout@@Base+0x1a4c>
   114c0:	mov	r1, r6
   114c4:	mov	r2, r4
   114c8:	mov	r3, r0
   114cc:	mov	r0, r6
   114d0:	bl	11130 <error@plt>
   114d4:	mov	r0, #1
   114d8:	bl	11e7c <__assert_fail@plt+0xbb4>
   114dc:	mov	ip, #1
   114e0:	str	ip, [sp, #20]
   114e4:	b	1137c <__assert_fail@plt+0xb4>
   114e8:	cmp	sl, r3
   114ec:	ldrgt	r6, [r5, r3, lsl #2]
   114f0:	ldrle	r6, [pc, #368]	; 11668 <__assert_fail@plt+0x3a0>
   114f4:	addle	r6, pc, r6
   114f8:	ldrb	r3, [r6]
   114fc:	cmp	r3, #45	; 0x2d
   11500:	beq	11564 <__assert_fail@plt+0x29c>
   11504:	ldr	r1, [pc, #352]	; 1166c <__assert_fail@plt+0x3a4>
   11508:	mov	r0, r6
   1150c:	add	r1, pc, r1
   11510:	bl	11280 <fopen64@plt>
   11514:	subs	r5, r0, #0
   11518:	beq	11604 <__assert_fail@plt+0x33c>
   1151c:	mov	r0, r5
   11520:	mov	r1, #2
   11524:	bl	12a18 <close_stdout@@Base+0x1c0>
   11528:	ldr	ip, [sp, #20]
   1152c:	cmp	ip, #0
   11530:	beq	11580 <__assert_fail@plt+0x2b8>
   11534:	ldr	r3, [pc, #272]	; 1164c <__assert_fail@plt+0x384>
   11538:	mov	r2, r7
   1153c:	mov	r0, r5
   11540:	ldr	r3, [r4, r3]
   11544:	ldr	r1, [r3]
   11548:	bl	117b4 <__assert_fail@plt+0x4ec>
   1154c:	mov	r0, r5
   11550:	bl	15214 <close_stdout@@Base+0x29bc>
   11554:	cmn	r0, #1
   11558:	beq	1159c <__assert_fail@plt+0x2d4>
   1155c:	mov	r0, #0
   11560:	bl	1119c <exit@plt>
   11564:	ldrb	r3, [r6, #1]
   11568:	cmp	r3, #0
   1156c:	bne	11504 <__assert_fail@plt+0x23c>
   11570:	ldr	r3, [pc, #248]	; 11670 <__assert_fail@plt+0x3a8>
   11574:	ldr	r3, [r4, r3]
   11578:	ldr	r5, [r3]
   1157c:	b	1151c <__assert_fail@plt+0x254>
   11580:	ldr	r1, [pc, #196]	; 1164c <__assert_fail@plt+0x384>
   11584:	mov	r0, r5
   11588:	ldrd	r2, [sp, #32]
   1158c:	ldr	r1, [r4, r1]
   11590:	ldr	r1, [r1]
   11594:	bl	11ad4 <__assert_fail@plt+0x80c>
   11598:	b	1154c <__assert_fail@plt+0x284>
   1159c:	ldrb	r3, [r6]
   115a0:	cmp	r3, #45	; 0x2d
   115a4:	bne	115e4 <__assert_fail@plt+0x31c>
   115a8:	ldrb	r4, [r6, #1]
   115ac:	cmp	r4, #0
   115b0:	bne	115e4 <__assert_fail@plt+0x31c>
   115b4:	bl	111cc <__errno_location@plt>
   115b8:	ldr	r1, [pc, #180]	; 11674 <__assert_fail@plt+0x3ac>
   115bc:	mov	r2, #5
   115c0:	add	r1, pc, r1
   115c4:	ldr	r5, [r0]
   115c8:	mov	r0, r4
   115cc:	bl	110ac <dcgettext@plt>
   115d0:	mov	r1, r5
   115d4:	mov	r2, r0
   115d8:	mov	r0, #1
   115dc:	bl	11130 <error@plt>
   115e0:	b	1155c <__assert_fail@plt+0x294>
   115e4:	bl	111cc <__errno_location@plt>
   115e8:	ldr	r2, [pc, #136]	; 11678 <__assert_fail@plt+0x3b0>
   115ec:	mov	r3, r6
   115f0:	add	r2, pc, r2
   115f4:	ldr	r1, [r0]
   115f8:	mov	r0, #1
   115fc:	bl	11130 <error@plt>
   11600:	b	1155c <__assert_fail@plt+0x294>
   11604:	bl	111cc <__errno_location@plt>
   11608:	ldr	r2, [pc, #108]	; 1167c <__assert_fail@plt+0x3b4>
   1160c:	mov	r3, r6
   11610:	add	r2, pc, r2
   11614:	ldr	r1, [r0]
   11618:	mov	r0, #1
   1161c:	bl	11130 <error@plt>
   11620:	b	1151c <__assert_fail@plt+0x254>
   11624:	andeq	r6, r1, ip, lsl #26
   11628:	andeq	r0, r0, r4, lsl #2
   1162c:	andeq	r5, r0, r4, asr r6
   11630:	andeq	r5, r0, r0, lsl #12
   11634:	andeq	r5, r0, r4, asr #11
   11638:	strdeq	r5, [r0], -r8
   1163c:	andeq	r6, r1, r4, lsr #22
   11640:			; <UNDEFINED> instruction: 0x000055b0
   11644:	andeq	r0, r0, r4, lsl r1
   11648:	andeq	r0, r0, ip, lsr r1
   1164c:	andeq	r0, r0, r4, lsr #2
   11650:	andeq	r0, r0, ip, lsl #2
   11654:	strdeq	r5, [r0], -r4
   11658:	ldrdeq	r5, [r0], -ip
   1165c:	ldrdeq	r5, [r0], -r8
   11660:	andeq	r0, r0, r8, lsl #2
   11664:			; <UNDEFINED> instruction: 0x000054b4
   11668:	andeq	r5, r0, r8, lsl r4
   1166c:	andeq	r5, r0, r4, ror #8
   11670:	andeq	r0, r0, r0, lsr #2
   11674:			; <UNDEFINED> instruction: 0x000053b4
   11678:	andeq	r5, r0, r8, lsl r5
   1167c:	strdeq	r5, [r0], -r8
   11680:	mov	fp, #0
   11684:	mov	lr, #0
   11688:	pop	{r1}		; (ldr r1, [sp], #4)
   1168c:	mov	r2, sp
   11690:	push	{r2}		; (str r2, [sp, #-4]!)
   11694:	push	{r0}		; (str r0, [sp, #-4]!)
   11698:	ldr	ip, [pc, #16]	; 116b0 <__assert_fail@plt+0x3e8>
   1169c:	push	{ip}		; (str ip, [sp, #-4]!)
   116a0:	ldr	r0, [pc, #12]	; 116b4 <__assert_fail@plt+0x3ec>
   116a4:	ldr	r3, [pc, #12]	; 116b8 <__assert_fail@plt+0x3f0>
   116a8:	bl	11160 <__libc_start_main@plt>
   116ac:	bl	112b0 <abort@plt>
   116b0:	andeq	r6, r1, ip, asr #8
   116b4:	ldrdeq	r1, [r1], -r4
   116b8:	andeq	r6, r1, r8, ror #7
   116bc:	ldr	r3, [pc, #20]	; 116d8 <__assert_fail@plt+0x410>
   116c0:	ldr	r2, [pc, #20]	; 116dc <__assert_fail@plt+0x414>
   116c4:	add	r3, pc, r3
   116c8:	ldr	r2, [r3, r2]
   116cc:	cmp	r2, #0
   116d0:	bxeq	lr
   116d4:	b	11178 <__gmon_start__@plt>
   116d8:	andeq	r6, r1, r4, lsr r9
   116dc:	andeq	r0, r0, r8, lsl r1
   116e0:	push	{r3, lr}
   116e4:	movw	r0, #33164	; 0x818c
   116e8:	ldr	r3, [pc, #36]	; 11714 <__assert_fail@plt+0x44c>
   116ec:	movt	r0, #2
   116f0:	rsb	r3, r0, r3
   116f4:	cmp	r3, #6
   116f8:	popls	{r3, pc}
   116fc:	movw	r3, #0
   11700:	movt	r3, #0
   11704:	cmp	r3, #0
   11708:	popeq	{r3, pc}
   1170c:	blx	r3
   11710:	pop	{r3, pc}
   11714:	andeq	r8, r2, pc, lsl #3
   11718:	push	{r3, lr}
   1171c:	movw	r0, #33164	; 0x818c
   11720:	movw	r3, #33164	; 0x818c
   11724:	movt	r0, #2
   11728:	movt	r3, #2
   1172c:	rsb	r3, r0, r3
   11730:	asr	r3, r3, #2
   11734:	add	r3, r3, r3, lsr #31
   11738:	asrs	r1, r3, #1
   1173c:	popeq	{r3, pc}
   11740:	movw	r2, #0
   11744:	movt	r2, #0
   11748:	cmp	r2, #0
   1174c:	popeq	{r3, pc}
   11750:	blx	r2
   11754:	pop	{r3, pc}
   11758:	push	{r4, lr}
   1175c:	movw	r4, #33164	; 0x818c
   11760:	movt	r4, #2
   11764:	ldrb	r3, [r4]
   11768:	cmp	r3, #0
   1176c:	popne	{r4, pc}
   11770:	bl	116e0 <__assert_fail@plt+0x418>
   11774:	mov	r3, #1
   11778:	strb	r3, [r4]
   1177c:	pop	{r4, pc}
   11780:	movw	r0, #32384	; 0x7e80
   11784:	movt	r0, #2
   11788:	push	{r3, lr}
   1178c:	ldr	r3, [r0]
   11790:	cmp	r3, #0
   11794:	beq	117ac <__assert_fail@plt+0x4e4>
   11798:	movw	r3, #0
   1179c:	movt	r3, #0
   117a0:	cmp	r3, #0
   117a4:	beq	117ac <__assert_fail@plt+0x4e4>
   117a8:	blx	r3
   117ac:	pop	{r3, lr}
   117b0:	b	11718 <__assert_fail@plt+0x450>
   117b4:	ldr	r3, [pc, #772]	; 11ac0 <__assert_fail@plt+0x7f8>
   117b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117bc:	sub	sp, sp, #7232	; 0x1c40
   117c0:	ldr	ip, [pc, #764]	; 11ac4 <__assert_fail@plt+0x7fc>
   117c4:	sub	sp, sp, #12
   117c8:	add	r3, pc, r3
   117cc:	add	lr, sp, #60	; 0x3c
   117d0:	str	r1, [sp, #12]
   117d4:	mov	sl, r0
   117d8:	str	lr, [sp, #40]	; 0x28
   117dc:	mov	r0, lr
   117e0:	str	r2, [sp, #36]	; 0x24
   117e4:	movw	r1, #58356	; 0xe3f4
   117e8:	ldr	ip, [r3, ip]
   117ec:	movt	r1, #65535	; 0xffff
   117f0:	ldr	r2, [pc, #720]	; 11ac8 <__assert_fail@plt+0x800>
   117f4:	add	r8, sp, #3136	; 0xc40
   117f8:	str	r1, [sp, #28]
   117fc:	add	r1, sp, #8192	; 0x2000
   11800:	ldr	r3, [ip]
   11804:	add	r2, pc, r2
   11808:	ldr	lr, [pc, #700]	; 11acc <__assert_fail@plt+0x804>
   1180c:	movw	r5, #58352	; 0xe3f0
   11810:	str	r2, [sp, #48]	; 0x30
   11814:	movt	r5, #65535	; 0xffff
   11818:	add	lr, pc, lr
   1181c:	str	ip, [sp, #52]	; 0x34
   11820:	str	lr, [sp, #20]
   11824:	add	r8, r8, #4
   11828:	str	r3, [r1, #-956]	; 0xfffffc44
   1182c:	bl	124c4 <__assert_fail@plt+0x11fc>
   11830:	ldr	r2, [pc, #664]	; 11ad0 <__assert_fail@plt+0x808>
   11834:	mov	r9, #0
   11838:	add	r7, sp, #72	; 0x48
   1183c:	str	sl, [sp, #32]
   11840:	add	r2, pc, r2
   11844:	str	r7, [sp, #44]	; 0x2c
   11848:	str	r2, [sp, #24]
   1184c:	ldr	r3, [sp, #32]
   11850:	add	r0, r8, r9
   11854:	mov	r1, #1
   11858:	rsb	r2, r9, #4096	; 0x1000
   1185c:	bl	11298 <fread_unlocked@plt>
   11860:	ldr	r3, [sp, #36]	; 0x24
   11864:	cmp	r3, #0
   11868:	movne	r6, #0
   1186c:	movne	r7, r5
   11870:	mov	fp, r0
   11874:	add	r0, sp, #7232	; 0x1c40
   11878:	add	r0, r0, #8
   1187c:	str	fp, [r0, r5]
   11880:	bne	119bc <__assert_fail@plt+0x6f4>
   11884:	ldr	r0, [sp, #32]
   11888:	add	r9, r9, fp
   1188c:	ldr	r3, [r0]
   11890:	tst	r3, #32
   11894:	bne	11a64 <__assert_fail@plt+0x79c>
   11898:	cmp	r9, #4096	; 0x1000
   1189c:	andcs	r3, r3, #16
   118a0:	bcs	118ac <__assert_fail@plt+0x5e4>
   118a4:	ands	r3, r3, #16
   118a8:	beq	1184c <__assert_fail@plt+0x584>
   118ac:	mov	r4, #0
   118b0:	str	r9, [sp, #16]
   118b4:	ldr	sl, [sp, #32]
   118b8:	add	fp, sp, #60	; 0x3c
   118bc:	ldr	r7, [sp, #44]	; 0x2c
   118c0:	b	118d8 <__assert_fail@plt+0x610>
   118c4:	cmp	r6, #0
   118c8:	beq	11994 <__assert_fail@plt+0x6cc>
   118cc:	ldr	r3, [sl]
   118d0:	add	r4, r4, #1
   118d4:	and	r3, r3, #16
   118d8:	cmp	r3, #0
   118dc:	moveq	r2, #1
   118e0:	movne	r2, #2
   118e4:	cmp	r4, r2
   118e8:	bcs	11a54 <__assert_fail@plt+0x78c>
   118ec:	cmp	r4, #1
   118f0:	beq	11a24 <__assert_fail@plt+0x75c>
   118f4:	add	lr, sp, #7232	; 0x1c40
   118f8:	ldr	r2, [sp, #16]
   118fc:	add	lr, lr, #8
   11900:	mov	r0, #3072	; 0xc00
   11904:	str	r0, [lr, r5]
   11908:	sub	ip, r7, #4
   1190c:	sub	r1, r7, #16
   11910:	mov	r0, fp
   11914:	str	r1, [sp]
   11918:	mov	r3, ip
   1191c:	mov	r1, r8
   11920:	mov	r9, ip
   11924:	bl	124d0 <__assert_fail@plt+0x1208>
   11928:	add	r3, sp, #7232	; 0x1c40
   1192c:	mov	r1, #1
   11930:	add	r3, r3, #8
   11934:	ldr	r2, [r3, r5]
   11938:	ldr	r3, [sp, #12]
   1193c:	mov	r6, r0
   11940:	mov	r0, r9
   11944:	bl	11094 <fwrite_unlocked@plt>
   11948:	add	r1, sp, #7232	; 0x1c40
   1194c:	add	r1, r1, #8
   11950:	ldr	r3, [r1, r5]
   11954:	cmp	r0, r3
   11958:	bcs	118c4 <__assert_fail@plt+0x5fc>
   1195c:	bl	111cc <__errno_location@plt>
   11960:	ldr	r1, [sp, #20]
   11964:	mov	r2, #5
   11968:	ldr	r3, [r0]
   1196c:	mov	r0, #0
   11970:	str	r3, [sp, #8]
   11974:	bl	110ac <dcgettext@plt>
   11978:	ldr	r3, [sp, #8]
   1197c:	mov	r1, r3
   11980:	mov	r2, r0
   11984:	mov	r0, #1
   11988:	bl	11130 <error@plt>
   1198c:	cmp	r6, #0
   11990:	bne	118cc <__assert_fail@plt+0x604>
   11994:	ldr	r1, [sp, #24]
   11998:	mov	r0, r6
   1199c:	mov	r2, #5
   119a0:	bl	110ac <dcgettext@plt>
   119a4:	mov	r1, r6
   119a8:	mov	r2, r0
   119ac:	mov	r0, #1
   119b0:	bl	11130 <error@plt>
   119b4:	b	118cc <__assert_fail@plt+0x604>
   119b8:	add	r6, r6, #1
   119bc:	cmp	fp, #0
   119c0:	cmpne	r6, fp
   119c4:	bcs	11a1c <__assert_fail@plt+0x754>
   119c8:	add	r4, r6, r9
   119cc:	add	r5, r8, r4
   119d0:	ldrb	sl, [r8, r4]
   119d4:	mov	r0, sl
   119d8:	bl	122e4 <__assert_fail@plt+0x101c>
   119dc:	cmp	r0, #0
   119e0:	bne	119b8 <__assert_fail@plt+0x6f0>
   119e4:	cmp	sl, #61	; 0x3d
   119e8:	beq	119b8 <__assert_fail@plt+0x6f0>
   119ec:	add	r3, sp, #7232	; 0x1c40
   119f0:	sub	fp, fp, #1
   119f4:	add	r3, r3, #8
   119f8:	add	r1, r4, #1
   119fc:	add	r1, r8, r1
   11a00:	mov	r0, r5
   11a04:	rsb	r2, r6, fp
   11a08:	str	fp, [r3, r7]
   11a0c:	bl	1104c <memmove@plt>
   11a10:	cmp	fp, #0
   11a14:	cmpne	r6, fp
   11a18:	bcc	119c8 <__assert_fail@plt+0x700>
   11a1c:	mov	r5, r7
   11a20:	b	11884 <__assert_fail@plt+0x5bc>
   11a24:	add	r1, sp, #7232	; 0x1c40
   11a28:	ldr	r0, [sp, #28]
   11a2c:	add	r1, r1, #8
   11a30:	ldr	r2, [r1, r0]
   11a34:	cmp	r2, #0
   11a38:	beq	11a54 <__assert_fail@plt+0x78c>
   11a3c:	add	r2, sp, #7232	; 0x1c40
   11a40:	mov	r3, #3072	; 0xc00
   11a44:	add	r2, r2, #8
   11a48:	str	r3, [r2, r5]
   11a4c:	mov	r2, #0
   11a50:	b	11908 <__assert_fail@plt+0x640>
   11a54:	cmp	r3, #0
   11a58:	bne	11a98 <__assert_fail@plt+0x7d0>
   11a5c:	mov	r9, r3
   11a60:	b	1184c <__assert_fail@plt+0x584>
   11a64:	bl	111cc <__errno_location@plt>
   11a68:	ldr	r1, [sp, #48]	; 0x30
   11a6c:	mov	r2, #5
   11a70:	ldr	r4, [r0]
   11a74:	mov	r0, #0
   11a78:	bl	110ac <dcgettext@plt>
   11a7c:	mov	r1, r4
   11a80:	mov	r2, r0
   11a84:	mov	r0, #1
   11a88:	bl	11130 <error@plt>
   11a8c:	ldr	r1, [sp, #32]
   11a90:	ldr	r3, [r1]
   11a94:	b	11898 <__assert_fail@plt+0x5d0>
   11a98:	ldr	r0, [sp, #52]	; 0x34
   11a9c:	add	r1, sp, #8192	; 0x2000
   11aa0:	ldr	r2, [r1, #-956]	; 0xfffffc44
   11aa4:	ldr	r3, [r0]
   11aa8:	cmp	r2, r3
   11aac:	bne	11abc <__assert_fail@plt+0x7f4>
   11ab0:	add	sp, sp, #7232	; 0x1c40
   11ab4:	add	sp, sp, #12
   11ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11abc:	bl	110b8 <__stack_chk_fail@plt>
   11ac0:	andeq	r6, r1, r0, lsr r8
   11ac4:	andeq	r0, r0, r4, lsl #2
   11ac8:	andeq	r4, r0, r0, lsl #25
   11acc:	andeq	r4, r0, r8, ror ip
   11ad0:	andeq	r4, r0, ip, asr ip
   11ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad8:	sub	sp, sp, #71680	; 0x11800
   11adc:	sub	sp, sp, #60	; 0x3c
   11ae0:	ldr	ip, [pc, #884]	; 11e5c <__assert_fail@plt+0xb94>
   11ae4:	mov	sl, r0
   11ae8:	add	lr, sp, #30720	; 0x7800
   11aec:	add	ip, pc, ip
   11af0:	str	ip, [sp, #16]
   11af4:	ldr	r0, [sp, #16]
   11af8:	add	lr, lr, #56	; 0x38
   11afc:	ldr	ip, [pc, #860]	; 11e60 <__assert_fail@plt+0xb98>
   11b00:	mov	r9, #0
   11b04:	strd	r2, [sp]
   11b08:	sub	r5, lr, #4
   11b0c:	mov	fp, r1
   11b10:	mov	r6, r9
   11b14:	ldr	ip, [r0, ip]
   11b18:	add	r0, sp, #73728	; 0x12000
   11b1c:	str	ip, [sp, #36]	; 0x24
   11b20:	add	ip, sp, #52	; 0x34
   11b24:	str	ip, [sp, #12]
   11b28:	movw	ip, #43691	; 0xaaab
   11b2c:	movt	ip, #43690	; 0xaaaa
   11b30:	str	ip, [sp, #20]
   11b34:	ldr	ip, [pc, #808]	; 11e64 <__assert_fail@plt+0xb9c>
   11b38:	add	ip, pc, ip
   11b3c:	str	ip, [sp, #44]	; 0x2c
   11b40:	ldr	ip, [sp, #36]	; 0x24
   11b44:	ldr	r3, [ip]
   11b48:	ldr	ip, [pc, #792]	; 11e68 <__assert_fail@plt+0xba0>
   11b4c:	add	ip, pc, ip
   11b50:	str	ip, [sp, #24]
   11b54:	ldr	ip, [pc, #784]	; 11e6c <__assert_fail@plt+0xba4>
   11b58:	str	r3, [r0, #-1996]	; 0xfffff834
   11b5c:	add	ip, pc, ip
   11b60:	str	ip, [sp, #40]	; 0x28
   11b64:	add	r1, sp, #52	; 0x34
   11b68:	rsb	r2, r6, #30720	; 0x7800
   11b6c:	add	r0, r1, r6
   11b70:	mov	r3, sl
   11b74:	mov	r1, #1
   11b78:	bl	11298 <fread_unlocked@plt>
   11b7c:	ldr	r3, [sl]
   11b80:	tst	r3, #48	; 0x30
   11b84:	add	r6, r6, r0
   11b88:	bne	11cac <__assert_fail@plt+0x9e4>
   11b8c:	cmp	r6, #30720	; 0x7800
   11b90:	bcc	11b64 <__assert_fail@plt+0x89c>
   11b94:	ldr	ip, [sp, #20]
   11b98:	add	r8, r6, #2
   11b9c:	add	r0, sp, #52	; 0x34
   11ba0:	mov	r1, r6
   11ba4:	mov	r2, r5
   11ba8:	umull	ip, r8, ip, r8
   11bac:	lsr	r8, r8, #1
   11bb0:	lsl	r8, r8, #2
   11bb4:	mov	r3, r8
   11bb8:	bl	120b8 <__assert_fail@plt+0xdf0>
   11bbc:	ldrd	r0, [sp]
   11bc0:	orrs	r1, r0, r1
   11bc4:	beq	11d4c <__assert_fail@plt+0xa84>
   11bc8:	cmp	r8, #0
   11bcc:	beq	11c90 <__assert_fail@plt+0x9c8>
   11bd0:	str	r6, [sp, #28]
   11bd4:	mov	r7, #0
   11bd8:	str	sl, [sp, #32]
   11bdc:	mov	r6, r5
   11be0:	mov	sl, fp
   11be4:	ldr	r5, [sp, #16]
   11be8:	b	11c18 <__assert_fail@plt+0x950>
   11bec:	ldr	r3, [sl, #20]
   11bf0:	ldr	r2, [sl, #24]
   11bf4:	cmp	r3, r2
   11bf8:	bcs	11dc8 <__assert_fail@plt+0xb00>
   11bfc:	mov	r9, r4
   11c00:	add	r2, r3, #1
   11c04:	str	r2, [sl, #20]
   11c08:	mov	r2, #10
   11c0c:	strb	r2, [r3]
   11c10:	cmp	r8, r7
   11c14:	bls	11c80 <__assert_fail@plt+0x9b8>
   11c18:	ldrd	r2, [sp]
   11c1c:	mvn	r0, #0
   11c20:	mov	r1, #0
   11c24:	rsb	r4, r7, r8
   11c28:	subs	r2, r2, r9
   11c2c:	sbc	r3, r3, #0
   11c30:	cmp	r3, r1
   11c34:	cmpeq	r2, r0
   11c38:	movhi	r2, r0
   11c3c:	cmp	r4, r2
   11c40:	movcs	r4, r2
   11c44:	cmp	r4, #0
   11c48:	beq	11bec <__assert_fail@plt+0x924>
   11c4c:	ldr	r3, [pc, #540]	; 11e70 <__assert_fail@plt+0xba8>
   11c50:	add	r0, r6, r7
   11c54:	mov	r1, #1
   11c58:	mov	r2, r4
   11c5c:	ldr	r3, [r5, r3]
   11c60:	ldr	r3, [r3]
   11c64:	bl	11094 <fwrite_unlocked@plt>
   11c68:	cmp	r4, r0
   11c6c:	bhi	11d20 <__assert_fail@plt+0xa58>
   11c70:	add	r7, r7, r4
   11c74:	add	r9, r9, r4
   11c78:	cmp	r8, r7
   11c7c:	bhi	11c18 <__assert_fail@plt+0x950>
   11c80:	mov	fp, sl
   11c84:	mov	r5, r6
   11c88:	ldr	sl, [sp, #32]
   11c8c:	ldr	r6, [sp, #28]
   11c90:	ldr	r3, [sl]
   11c94:	ands	r2, r3, #48	; 0x30
   11c98:	bne	11cb4 <__assert_fail@plt+0x9ec>
   11c9c:	cmp	r6, #30720	; 0x7800
   11ca0:	bne	11cb4 <__assert_fail@plt+0x9ec>
   11ca4:	mov	r6, r2
   11ca8:	b	11b64 <__assert_fail@plt+0x89c>
   11cac:	cmp	r6, #0
   11cb0:	bne	11b94 <__assert_fail@plt+0x8cc>
   11cb4:	ldrd	r0, [sp]
   11cb8:	orrs	r1, r0, r1
   11cbc:	beq	11cc8 <__assert_fail@plt+0xa00>
   11cc0:	cmp	r9, #0
   11cc4:	bne	11da0 <__assert_fail@plt+0xad8>
   11cc8:	tst	r3, #32
   11ccc:	beq	11cfc <__assert_fail@plt+0xa34>
   11cd0:	bl	111cc <__errno_location@plt>
   11cd4:	ldr	r1, [pc, #408]	; 11e74 <__assert_fail@plt+0xbac>
   11cd8:	mov	r2, #5
   11cdc:	add	r1, pc, r1
   11ce0:	ldr	r4, [r0]
   11ce4:	mov	r0, #0
   11ce8:	bl	110ac <dcgettext@plt>
   11cec:	mov	r1, r4
   11cf0:	mov	r2, r0
   11cf4:	mov	r0, #1
   11cf8:	bl	11130 <error@plt>
   11cfc:	ldr	ip, [sp, #36]	; 0x24
   11d00:	add	r3, sp, #73728	; 0x12000
   11d04:	ldr	r2, [r3, #-1996]	; 0xfffff834
   11d08:	ldr	r3, [ip]
   11d0c:	cmp	r2, r3
   11d10:	bne	11e10 <__assert_fail@plt+0xb48>
   11d14:	add	sp, sp, #71680	; 0x11800
   11d18:	add	sp, sp, #60	; 0x3c
   11d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d20:	bl	111cc <__errno_location@plt>
   11d24:	ldr	r1, [sp, #24]
   11d28:	mov	r2, #5
   11d2c:	ldr	fp, [r0]
   11d30:	mov	r0, #0
   11d34:	bl	110ac <dcgettext@plt>
   11d38:	mov	r1, fp
   11d3c:	mov	r2, r0
   11d40:	mov	r0, #1
   11d44:	bl	11130 <error@plt>
   11d48:	b	11c70 <__assert_fail@plt+0x9a8>
   11d4c:	ldr	ip, [sp, #16]
   11d50:	mov	r0, r5
   11d54:	ldr	r3, [pc, #276]	; 11e70 <__assert_fail@plt+0xba8>
   11d58:	mov	r1, #1
   11d5c:	mov	r2, r8
   11d60:	ldr	r3, [ip, r3]
   11d64:	ldr	r3, [r3]
   11d68:	bl	11094 <fwrite_unlocked@plt>
   11d6c:	cmp	r8, r0
   11d70:	bls	11c90 <__assert_fail@plt+0x9c8>
   11d74:	bl	111cc <__errno_location@plt>
   11d78:	ldr	r1, [sp, #44]	; 0x2c
   11d7c:	mov	r2, #5
   11d80:	ldr	r4, [r0]
   11d84:	mov	r0, #0
   11d88:	bl	110ac <dcgettext@plt>
   11d8c:	mov	r1, r4
   11d90:	mov	r2, r0
   11d94:	mov	r0, #1
   11d98:	bl	11130 <error@plt>
   11d9c:	b	11c90 <__assert_fail@plt+0x9c8>
   11da0:	ldr	r3, [fp, #20]
   11da4:	ldr	r2, [fp, #24]
   11da8:	cmp	r3, r2
   11dac:	bcs	11e14 <__assert_fail@plt+0xb4c>
   11db0:	add	r1, r3, #1
   11db4:	mov	r2, #10
   11db8:	str	r1, [fp, #20]
   11dbc:	strb	r2, [r3]
   11dc0:	ldr	r3, [sl]
   11dc4:	b	11cc8 <__assert_fail@plt+0xa00>
   11dc8:	mov	r0, sl
   11dcc:	mov	r1, #10
   11dd0:	bl	11250 <__overflow@plt>
   11dd4:	cmn	r0, #1
   11dd8:	movne	r9, r4
   11ddc:	bne	11c10 <__assert_fail@plt+0x948>
   11de0:	bl	111cc <__errno_location@plt>
   11de4:	ldr	r1, [sp, #40]	; 0x28
   11de8:	mov	r2, #5
   11dec:	mov	r9, r4
   11df0:	ldr	fp, [r0]
   11df4:	mov	r0, r4
   11df8:	bl	110ac <dcgettext@plt>
   11dfc:	mov	r1, fp
   11e00:	mov	r2, r0
   11e04:	mov	r0, #1
   11e08:	bl	11130 <error@plt>
   11e0c:	b	11c10 <__assert_fail@plt+0x948>
   11e10:	bl	110b8 <__stack_chk_fail@plt>
   11e14:	mov	r0, fp
   11e18:	mov	r1, #10
   11e1c:	bl	11250 <__overflow@plt>
   11e20:	cmn	r0, #1
   11e24:	bne	11e54 <__assert_fail@plt+0xb8c>
   11e28:	bl	111cc <__errno_location@plt>
   11e2c:	ldr	r1, [pc, #68]	; 11e78 <__assert_fail@plt+0xbb0>
   11e30:	mov	r2, #5
   11e34:	add	r1, pc, r1
   11e38:	ldr	r4, [r0]
   11e3c:	mov	r0, #0
   11e40:	bl	110ac <dcgettext@plt>
   11e44:	mov	r1, r4
   11e48:	mov	r2, r0
   11e4c:	mov	r0, #1
   11e50:	bl	11130 <error@plt>
   11e54:	ldr	r3, [sl]
   11e58:	b	11cc8 <__assert_fail@plt+0xa00>
   11e5c:	andeq	r6, r1, ip, lsl #10
   11e60:	andeq	r0, r0, r4, lsl #2
   11e64:	andeq	r4, r0, r8, asr r9
   11e68:	andeq	r4, r0, r4, asr #18
   11e6c:	andeq	r4, r0, r4, lsr r9
   11e70:	andeq	r0, r0, r4, lsr #2
   11e74:	andeq	r4, r0, r8, lsr #15
   11e78:	andeq	r4, r0, ip, asr r6
   11e7c:	push	{r4, r5, r6, lr}
   11e80:	subs	r4, r0, #0
   11e84:	ldr	r5, [pc, #484]	; 12070 <__assert_fail@plt+0xda8>
   11e88:	add	r5, pc, r5
   11e8c:	beq	11ed4 <__assert_fail@plt+0xc0c>
   11e90:	ldr	r3, [pc, #476]	; 12074 <__assert_fail@plt+0xdac>
   11e94:	mov	r2, #5
   11e98:	ldr	r1, [pc, #472]	; 12078 <__assert_fail@plt+0xdb0>
   11e9c:	mov	r0, #0
   11ea0:	ldr	r3, [r5, r3]
   11ea4:	add	r1, pc, r1
   11ea8:	ldr	r6, [r3]
   11eac:	bl	110ac <dcgettext@plt>
   11eb0:	ldr	r3, [pc, #452]	; 1207c <__assert_fail@plt+0xdb4>
   11eb4:	mov	r1, #1
   11eb8:	ldr	r3, [r5, r3]
   11ebc:	ldr	r3, [r3]
   11ec0:	mov	r2, r0
   11ec4:	mov	r0, r6
   11ec8:	bl	11214 <__fprintf_chk@plt>
   11ecc:	mov	r0, r4
   11ed0:	bl	1119c <exit@plt>
   11ed4:	ldr	r1, [pc, #420]	; 12080 <__assert_fail@plt+0xdb8>
   11ed8:	mov	r2, #5
   11edc:	add	r1, pc, r1
   11ee0:	bl	110ac <dcgettext@plt>
   11ee4:	ldr	r3, [pc, #400]	; 1207c <__assert_fail@plt+0xdb4>
   11ee8:	ldr	r6, [r5, r3]
   11eec:	ldr	r2, [r6]
   11ef0:	mov	r1, r0
   11ef4:	mov	r0, #1
   11ef8:	bl	111fc <__printf_chk@plt>
   11efc:	ldr	r1, [pc, #384]	; 12084 <__assert_fail@plt+0xdbc>
   11f00:	mov	r2, #5
   11f04:	mov	r0, r4
   11f08:	add	r1, pc, r1
   11f0c:	bl	110ac <dcgettext@plt>
   11f10:	ldr	r3, [pc, #368]	; 12088 <__assert_fail@plt+0xdc0>
   11f14:	ldr	r5, [r5, r3]
   11f18:	ldr	r1, [r5]
   11f1c:	bl	11010 <fputs_unlocked@plt>
   11f20:	ldr	r1, [pc, #356]	; 1208c <__assert_fail@plt+0xdc4>
   11f24:	mov	r2, #5
   11f28:	mov	r0, r4
   11f2c:	add	r1, pc, r1
   11f30:	bl	110ac <dcgettext@plt>
   11f34:	ldr	r1, [r5]
   11f38:	bl	11010 <fputs_unlocked@plt>
   11f3c:	ldr	r1, [pc, #332]	; 12090 <__assert_fail@plt+0xdc8>
   11f40:	mov	r2, #5
   11f44:	mov	r0, r4
   11f48:	add	r1, pc, r1
   11f4c:	bl	110ac <dcgettext@plt>
   11f50:	ldr	r1, [r5]
   11f54:	bl	11010 <fputs_unlocked@plt>
   11f58:	ldr	r1, [pc, #308]	; 12094 <__assert_fail@plt+0xdcc>
   11f5c:	mov	r2, #5
   11f60:	mov	r0, r4
   11f64:	add	r1, pc, r1
   11f68:	bl	110ac <dcgettext@plt>
   11f6c:	ldr	r1, [r5]
   11f70:	bl	11010 <fputs_unlocked@plt>
   11f74:	ldr	r1, [pc, #284]	; 12098 <__assert_fail@plt+0xdd0>
   11f78:	mov	r2, #5
   11f7c:	mov	r0, r4
   11f80:	add	r1, pc, r1
   11f84:	bl	110ac <dcgettext@plt>
   11f88:	ldr	r1, [r5]
   11f8c:	bl	11010 <fputs_unlocked@plt>
   11f90:	ldr	r1, [pc, #260]	; 1209c <__assert_fail@plt+0xdd4>
   11f94:	mov	r2, #5
   11f98:	mov	r0, r4
   11f9c:	add	r1, pc, r1
   11fa0:	bl	110ac <dcgettext@plt>
   11fa4:	ldr	r1, [r5]
   11fa8:	bl	11010 <fputs_unlocked@plt>
   11fac:	ldr	r1, [pc, #236]	; 120a0 <__assert_fail@plt+0xdd8>
   11fb0:	mov	r2, #5
   11fb4:	mov	r0, r4
   11fb8:	add	r1, pc, r1
   11fbc:	bl	110ac <dcgettext@plt>
   11fc0:	ldr	r2, [pc, #220]	; 120a4 <__assert_fail@plt+0xddc>
   11fc4:	ldr	r3, [pc, #220]	; 120a8 <__assert_fail@plt+0xde0>
   11fc8:	add	r2, pc, r2
   11fcc:	add	r3, pc, r3
   11fd0:	mov	r1, r0
   11fd4:	mov	r0, #1
   11fd8:	bl	111fc <__printf_chk@plt>
   11fdc:	mov	r0, #5
   11fe0:	mov	r1, r4
   11fe4:	bl	1125c <setlocale@plt>
   11fe8:	cmp	r0, #0
   11fec:	beq	12008 <__assert_fail@plt+0xd40>
   11ff0:	ldr	r1, [pc, #180]	; 120ac <__assert_fail@plt+0xde4>
   11ff4:	mov	r2, #3
   11ff8:	add	r1, pc, r1
   11ffc:	bl	112a4 <strncmp@plt>
   12000:	cmp	r0, #0
   12004:	bne	1203c <__assert_fail@plt+0xd74>
   12008:	ldr	r1, [pc, #160]	; 120b0 <__assert_fail@plt+0xde8>
   1200c:	mov	r2, #5
   12010:	mov	r0, #0
   12014:	add	r1, pc, r1
   12018:	bl	110ac <dcgettext@plt>
   1201c:	mov	r5, r0
   12020:	ldr	r0, [r6]
   12024:	bl	12970 <close_stdout@@Base+0x118>
   12028:	mov	r1, r5
   1202c:	mov	r2, r0
   12030:	mov	r0, #1
   12034:	bl	111fc <__printf_chk@plt>
   12038:	b	11ecc <__assert_fail@plt+0xc04>
   1203c:	ldr	r1, [pc, #112]	; 120b4 <__assert_fail@plt+0xdec>
   12040:	mov	r2, #5
   12044:	mov	r0, r4
   12048:	add	r1, pc, r1
   1204c:	bl	110ac <dcgettext@plt>
   12050:	mov	r5, r0
   12054:	ldr	r0, [r6]
   12058:	bl	12970 <close_stdout@@Base+0x118>
   1205c:	mov	r1, r5
   12060:	mov	r2, r0
   12064:	mov	r0, #1
   12068:	bl	111fc <__printf_chk@plt>
   1206c:	b	12008 <__assert_fail@plt+0xd40>
   12070:	andeq	r6, r1, r0, ror r1
   12074:	andeq	r0, r0, r0, lsl r1
   12078:	andeq	r4, r0, r8, lsl #12
   1207c:	andeq	r0, r0, r0, lsr r1
   12080:	strdeq	r4, [r0], -r8
   12084:	andeq	r4, r0, r0, lsr r6
   12088:	andeq	r0, r0, r4, lsr #2
   1208c:	andeq	r4, r0, r8, asr r6
   12090:	andeq	r4, r0, r0, lsr r7
   12094:	andeq	r4, r0, r4, asr #14
   12098:	andeq	r4, r0, r0, ror #14
   1209c:	andeq	r4, r0, ip, ror r7
   120a0:	andeq	r4, r0, r4, ror r8
   120a4:	andeq	r4, r0, ip, ror r8
   120a8:	andeq	r4, r0, r8, lsl #17
   120ac:	andeq	r4, r0, r4, lsl #17
   120b0:			; <UNDEFINED> instruction: 0x000048b4
   120b4:	andeq	r4, r0, r8, lsr r8
   120b8:	tst	r3, #3
   120bc:	push	{r4, r5, r6, r7, r8, r9}
   120c0:	bne	120d4 <__assert_fail@plt+0xe0c>
   120c4:	lsr	ip, r3, #2
   120c8:	add	ip, ip, ip, lsl #1
   120cc:	cmp	ip, r1
   120d0:	beq	121f0 <__assert_fail@plt+0xf28>
   120d4:	ldr	r6, [pc, #388]	; 12260 <__assert_fail@plt+0xf98>
   120d8:	sub	r4, r3, #4
   120dc:	ldr	r7, [pc, #384]	; 12264 <__assert_fail@plt+0xf9c>
   120e0:	mov	r8, #61	; 0x3d
   120e4:	add	r6, pc, r6
   120e8:	add	r7, pc, r7
   120ec:	cmp	r3, #0
   120f0:	cmpne	r1, #0
   120f4:	moveq	ip, #0
   120f8:	movne	ip, #1
   120fc:	beq	121dc <__assert_fail@plt+0xf14>
   12100:	ldrb	ip, [r0]
   12104:	cmp	r3, #1
   12108:	ldrb	r5, [r6, ip, lsr #2]
   1210c:	strb	r5, [r2]
   12110:	beq	12140 <__assert_fail@plt+0xe78>
   12114:	cmp	r1, #1
   12118:	lsl	ip, ip, #4
   1211c:	bne	12148 <__assert_fail@plt+0xe80>
   12120:	and	ip, ip, #63	; 0x3f
   12124:	cmp	r3, #2
   12128:	ldrb	r1, [r6, ip]
   1212c:	strb	r1, [r2, #1]
   12130:	beq	12140 <__assert_fail@plt+0xe78>
   12134:	cmp	r3, #3
   12138:	strb	r8, [r2, #2]
   1213c:	bne	12198 <__assert_fail@plt+0xed0>
   12140:	pop	{r4, r5, r6, r7, r8, r9}
   12144:	bx	lr
   12148:	ldrb	r5, [r0, #1]
   1214c:	cmp	r3, #2
   12150:	add	ip, ip, r5, lsr #4
   12154:	and	ip, ip, #63	; 0x3f
   12158:	ldrb	ip, [r6, ip]
   1215c:	strb	ip, [r2, #1]
   12160:	beq	12140 <__assert_fail@plt+0xe78>
   12164:	subs	ip, r1, #2
   12168:	lsl	r5, r5, #2
   1216c:	ldrbne	r9, [r0, #2]
   12170:	moveq	r9, ip
   12174:	lsrne	r9, r9, #6
   12178:	cmp	r3, #3
   1217c:	add	r5, r5, r9
   12180:	and	r5, r5, #63	; 0x3f
   12184:	ldrb	r5, [r7, r5]
   12188:	strb	r5, [r2, #2]
   1218c:	beq	12140 <__assert_fail@plt+0xe78>
   12190:	cmp	ip, #0
   12194:	bne	121ac <__assert_fail@plt+0xee4>
   12198:	cmp	r4, #0
   1219c:	strb	r8, [r2, #3]
   121a0:	beq	12140 <__assert_fail@plt+0xe78>
   121a4:	mov	r1, #0
   121a8:	b	121cc <__assert_fail@plt+0xf04>
   121ac:	ldrb	ip, [r0, #2]
   121b0:	cmp	r4, #0
   121b4:	and	ip, ip, #63	; 0x3f
   121b8:	ldrb	ip, [r7, ip]
   121bc:	strb	ip, [r2, #3]
   121c0:	beq	12140 <__assert_fail@plt+0xe78>
   121c4:	subs	r1, r1, #3
   121c8:	addne	r0, r0, #3
   121cc:	add	r2, r2, #4
   121d0:	sub	r4, r4, #4
   121d4:	sub	r3, r3, #4
   121d8:	b	120ec <__assert_fail@plt+0xe24>
   121dc:	cmp	r3, #0
   121e0:	beq	12140 <__assert_fail@plt+0xe78>
   121e4:	strb	ip, [r2]
   121e8:	pop	{r4, r5, r6, r7, r8, r9}
   121ec:	bx	lr
   121f0:	cmp	ip, #0
   121f4:	beq	12140 <__assert_fail@plt+0xe78>
   121f8:	ldr	r3, [pc, #104]	; 12268 <__assert_fail@plt+0xfa0>
   121fc:	add	r7, r0, ip
   12200:	add	r3, pc, r3
   12204:	ldrb	ip, [r0, #1]
   12208:	add	r0, r0, #3
   1220c:	ldrb	r4, [r0, #-1]
   12210:	add	r2, r2, #4
   12214:	ldrb	r1, [r0, #-3]
   12218:	cmp	r0, r7
   1221c:	lsr	r6, ip, #4
   12220:	and	r5, r4, #63	; 0x3f
   12224:	lsr	r4, r4, #6
   12228:	add	ip, r4, ip, lsl #2
   1222c:	add	r4, r6, r1, lsl #4
   12230:	and	ip, ip, #63	; 0x3f
   12234:	and	r4, r4, #63	; 0x3f
   12238:	ldrb	r5, [r3, r5]
   1223c:	ldrb	r6, [r3, ip]
   12240:	ldrb	r4, [r3, r4]
   12244:	ldrb	r1, [r3, r1, lsr #2]
   12248:	strb	r6, [r2, #-2]
   1224c:	strb	r5, [r2, #-1]
   12250:	strb	r4, [r2, #-3]
   12254:	strb	r1, [r2, #-4]
   12258:	bne	12204 <__assert_fail@plt+0xf3c>
   1225c:	b	12140 <__assert_fail@plt+0xe78>
   12260:	andeq	r4, r0, r0, ror #17
   12264:	ldrdeq	r4, [r0], -ip
   12268:	andeq	r4, r0, r4, asr #15
   1226c:	push	{r4, r5, r6, r7, r8, lr}
   12270:	movw	r3, #43691	; 0xaaab
   12274:	add	r6, r1, #2
   12278:	movt	r3, #43690	; 0xaaaa
   1227c:	mov	r7, r2
   12280:	mov	r4, r1
   12284:	umull	r2, r6, r3, r6
   12288:	mov	r8, r0
   1228c:	lsr	r6, r6, #1
   12290:	lsl	r6, r6, #2
   12294:	add	r5, r6, #1
   12298:	cmp	r1, r5
   1229c:	bls	122ac <__assert_fail@plt+0xfe4>
   122a0:	mov	r0, #0
   122a4:	str	r0, [r7]
   122a8:	pop	{r4, r5, r6, r7, r8, pc}
   122ac:	mov	r0, r5
   122b0:	bl	11154 <malloc@plt>
   122b4:	cmp	r0, #0
   122b8:	mov	r2, r0
   122bc:	str	r0, [r7]
   122c0:	beq	122dc <__assert_fail@plt+0x1014>
   122c4:	mov	r0, r8
   122c8:	mov	r1, r4
   122cc:	mov	r3, r5
   122d0:	bl	120b8 <__assert_fail@plt+0xdf0>
   122d4:	mov	r0, r6
   122d8:	pop	{r4, r5, r6, r7, r8, pc}
   122dc:	mov	r0, r5
   122e0:	pop	{r4, r5, r6, r7, r8, pc}
   122e4:	ldr	r3, [pc, #20]	; 12300 <__assert_fail@plt+0x1038>
   122e8:	add	r3, pc, r3
   122ec:	add	r0, r3, r0
   122f0:	ldrb	r0, [r0, #64]	; 0x40
   122f4:	mvn	r0, r0
   122f8:	ubfx	r0, r0, #7, #1
   122fc:	bx	lr
   12300:	ldrdeq	r4, [r0], -ip
   12304:	cmp	r1, #1
   12308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1230c:	mov	r6, r1
   12310:	sub	sp, sp, #12
   12314:	mov	r7, r2
   12318:	mov	r5, r0
   1231c:	mov	sl, r3
   12320:	ldr	r8, [r2]
   12324:	movls	r4, #0
   12328:	bls	12430 <__assert_fail@plt+0x1168>
   1232c:	ldrb	r9, [r0]
   12330:	mov	r0, r9
   12334:	bl	122e4 <__assert_fail@plt+0x101c>
   12338:	subs	r4, r0, #0
   1233c:	beq	12430 <__assert_fail@plt+0x1168>
   12340:	ldrb	r3, [r5, #1]
   12344:	mov	r0, r3
   12348:	str	r3, [sp, #4]
   1234c:	bl	122e4 <__assert_fail@plt+0x101c>
   12350:	ldr	r3, [sp, #4]
   12354:	subs	r4, r0, #0
   12358:	beq	12430 <__assert_fail@plt+0x1168>
   1235c:	ldr	fp, [sl]
   12360:	cmp	fp, #0
   12364:	bne	1243c <__assert_fail@plt+0x1174>
   12368:	cmp	r6, #2
   1236c:	beq	1247c <__assert_fail@plt+0x11b4>
   12370:	ldrb	r9, [r5, #2]
   12374:	cmp	r9, #61	; 0x3d
   12378:	beq	12474 <__assert_fail@plt+0x11ac>
   1237c:	mov	r0, r9
   12380:	bl	122e4 <__assert_fail@plt+0x101c>
   12384:	cmp	r0, #0
   12388:	beq	12490 <__assert_fail@plt+0x11c8>
   1238c:	cmp	fp, #0
   12390:	beq	123cc <__assert_fail@plt+0x1104>
   12394:	ldr	r3, [pc, #284]	; 124b8 <__assert_fail@plt+0x11f0>
   12398:	add	r8, r8, #1
   1239c:	ldrb	r2, [r5, #1]
   123a0:	add	r3, pc, r3
   123a4:	add	r9, r3, r9
   123a8:	add	r2, r3, r2
   123ac:	ldrsb	r3, [r9, #64]	; 0x40
   123b0:	ldrsb	r2, [r2, #64]	; 0x40
   123b4:	asr	r3, r3, #2
   123b8:	orr	r3, r3, r2, lsl #4
   123bc:	strb	r3, [r8, #-1]
   123c0:	ldr	fp, [sl]
   123c4:	sub	fp, fp, #1
   123c8:	str	fp, [sl]
   123cc:	cmp	r6, #3
   123d0:	beq	1247c <__assert_fail@plt+0x11b4>
   123d4:	ldrb	r9, [r5, #3]
   123d8:	cmp	r9, #61	; 0x3d
   123dc:	beq	124ac <__assert_fail@plt+0x11e4>
   123e0:	mov	r0, r9
   123e4:	bl	122e4 <__assert_fail@plt+0x101c>
   123e8:	cmp	r0, #0
   123ec:	beq	12490 <__assert_fail@plt+0x11c8>
   123f0:	cmp	fp, #0
   123f4:	beq	1242c <__assert_fail@plt+0x1164>
   123f8:	ldr	r3, [pc, #188]	; 124bc <__assert_fail@plt+0x11f4>
   123fc:	add	r8, r8, #1
   12400:	ldrb	r2, [r5, #2]
   12404:	add	r3, pc, r3
   12408:	add	r2, r3, r2
   1240c:	add	r3, r3, r9
   12410:	ldrsb	r2, [r2, #64]	; 0x40
   12414:	ldrb	r3, [r3, #64]	; 0x40
   12418:	orr	r3, r3, r2, lsl #6
   1241c:	strb	r3, [r8, #-1]
   12420:	ldr	r3, [sl]
   12424:	sub	r3, r3, #1
   12428:	str	r3, [sl]
   1242c:	str	r8, [r7]
   12430:	mov	r0, r4
   12434:	add	sp, sp, #12
   12438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1243c:	ldr	r2, [pc, #124]	; 124c0 <__assert_fail@plt+0x11f8>
   12440:	add	r8, r8, #1
   12444:	add	r2, pc, r2
   12448:	add	r3, r2, r3
   1244c:	add	r9, r2, r9
   12450:	ldrsb	r3, [r3, #64]	; 0x40
   12454:	ldrsb	r2, [r9, #64]	; 0x40
   12458:	asr	r3, r3, #4
   1245c:	orr	r3, r3, r2, lsl #2
   12460:	strb	r3, [r8, #-1]
   12464:	ldr	fp, [sl]
   12468:	sub	fp, fp, #1
   1246c:	str	fp, [sl]
   12470:	b	12368 <__assert_fail@plt+0x10a0>
   12474:	cmp	r6, #4
   12478:	beq	1249c <__assert_fail@plt+0x11d4>
   1247c:	mov	r4, #0
   12480:	str	r8, [r7]
   12484:	mov	r0, r4
   12488:	add	sp, sp, #12
   1248c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12490:	str	r8, [r7]
   12494:	mov	r4, r0
   12498:	b	12430 <__assert_fail@plt+0x1168>
   1249c:	ldrb	r3, [r5, #3]
   124a0:	cmp	r3, #61	; 0x3d
   124a4:	bne	1247c <__assert_fail@plt+0x11b4>
   124a8:	b	1242c <__assert_fail@plt+0x1164>
   124ac:	cmp	r6, #4
   124b0:	bne	1247c <__assert_fail@plt+0x11b4>
   124b4:	b	1242c <__assert_fail@plt+0x1164>
   124b8:	andeq	r4, r0, r4, lsr #12
   124bc:	andeq	r4, r0, r0, asr #11
   124c0:	andeq	r4, r0, r0, lsl #11
   124c4:	mov	r3, #0
   124c8:	str	r3, [r0]
   124cc:	bx	lr
   124d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124d4:	sub	sp, sp, #36	; 0x24
   124d8:	ldr	ip, [pc, #640]	; 12760 <__assert_fail@plt+0x1498>
   124dc:	mov	r9, r0
   124e0:	str	r3, [sp, #20]
   124e4:	mov	r5, r1
   124e8:	ldr	r3, [sp, #72]	; 0x48
   124ec:	add	ip, pc, ip
   124f0:	ldr	r0, [pc, #620]	; 12764 <__assert_fail@plt+0x149c>
   124f4:	adds	sl, r9, #0
   124f8:	mov	r4, r2
   124fc:	str	r3, [sp, #12]
   12500:	mov	r3, ip
   12504:	ldr	r0, [ip, r0]
   12508:	movne	sl, #1
   1250c:	ldr	r1, [sp, #12]
   12510:	cmp	sl, #0
   12514:	ldr	r3, [r0]
   12518:	ldr	r6, [r1]
   1251c:	str	r0, [sp, #16]
   12520:	str	r3, [sp, #28]
   12524:	str	r6, [sp, #24]
   12528:	beq	12738 <__assert_fail@plt+0x1470>
   1252c:	adds	r2, r2, #0
   12530:	ldr	r3, [r9]
   12534:	movne	r2, #1
   12538:	str	r2, [sp]
   1253c:	cmp	r3, #0
   12540:	movne	r2, #0
   12544:	andeq	r2, r2, #1
   12548:	str	r2, [sp, #4]
   1254c:	ldr	r1, [sp]
   12550:	add	r8, sp, #20
   12554:	add	r7, sp, #24
   12558:	and	r1, sl, r1
   1255c:	str	r1, [sp, #8]
   12560:	b	125fc <__assert_fail@plt+0x1334>
   12564:	ldr	r0, [sp]
   12568:	cmp	r4, #0
   1256c:	movne	r0, #0
   12570:	andeq	r0, r0, #1
   12574:	cmp	r0, #0
   12578:	bne	126ac <__assert_fail@plt+0x13e4>
   1257c:	cmp	r4, #0
   12580:	beq	12590 <__assert_fail@plt+0x12c8>
   12584:	ldrb	r2, [r5]
   12588:	cmp	r2, #10
   1258c:	beq	126dc <__assert_fail@plt+0x1414>
   12590:	ldr	r2, [sp, #20]
   12594:	cmp	sl, #0
   12598:	rsb	r3, r6, r3
   1259c:	str	r6, [sp, #24]
   125a0:	add	r3, r2, r3
   125a4:	add	fp, r5, r4
   125a8:	str	r3, [sp, #20]
   125ac:	moveq	r6, r5
   125b0:	bne	12640 <__assert_fail@plt+0x1378>
   125b4:	cmp	r4, #0
   125b8:	beq	126a4 <__assert_fail@plt+0x13dc>
   125bc:	cmp	r4, #3
   125c0:	bhi	125d0 <__assert_fail@plt+0x1308>
   125c4:	ldr	r3, [sp, #8]
   125c8:	cmp	r3, #0
   125cc:	bne	126a4 <__assert_fail@plt+0x13dc>
   125d0:	mov	r0, r5
   125d4:	mov	r1, r4
   125d8:	mov	r2, r8
   125dc:	mov	r3, r7
   125e0:	bl	12304 <__assert_fail@plt+0x103c>
   125e4:	cmp	r0, #0
   125e8:	beq	12748 <__assert_fail@plt+0x1480>
   125ec:	ldr	r3, [sp, #24]
   125f0:	rsb	r4, r6, fp
   125f4:	mov	r5, r6
   125f8:	mov	r6, r3
   125fc:	ldr	r2, [sp, #4]
   12600:	cmp	r2, #0
   12604:	moveq	r3, r6
   12608:	beq	12564 <__assert_fail@plt+0x129c>
   1260c:	b	1261c <__assert_fail@plt+0x1354>
   12610:	ldr	r6, [sp, #24]
   12614:	add	r5, r5, #4
   12618:	sub	r4, r4, #4
   1261c:	mov	r0, r5
   12620:	mov	r1, r4
   12624:	mov	r2, r8
   12628:	mov	r3, r7
   1262c:	bl	12304 <__assert_fail@plt+0x103c>
   12630:	cmp	r0, #0
   12634:	bne	12610 <__assert_fail@plt+0x1348>
   12638:	ldr	r3, [sp, #24]
   1263c:	b	12564 <__assert_fail@plt+0x129c>
   12640:	ldr	r4, [r9]
   12644:	cmp	r4, #4
   12648:	moveq	r3, #0
   1264c:	streq	r3, [r9]
   12650:	beq	1270c <__assert_fail@plt+0x1444>
   12654:	cmp	r4, #0
   12658:	beq	1270c <__assert_fail@plt+0x1444>
   1265c:	cmp	fp, r5
   12660:	mov	r6, r5
   12664:	bls	12698 <__assert_fail@plt+0x13d0>
   12668:	ldrb	r1, [r6], #1
   1266c:	cmp	r1, #10
   12670:	beq	12690 <__assert_fail@plt+0x13c8>
   12674:	add	r3, r4, #1
   12678:	mov	r2, r9
   1267c:	cmp	r3, #4
   12680:	str	r3, [r2], r4
   12684:	mov	r4, r3
   12688:	strb	r1, [r2, #4]
   1268c:	beq	12698 <__assert_fail@plt+0x13d0>
   12690:	cmp	r6, fp
   12694:	bne	12668 <__assert_fail@plt+0x13a0>
   12698:	cmp	r4, #0
   1269c:	add	r5, r9, #4
   126a0:	bne	125bc <__assert_fail@plt+0x12f4>
   126a4:	ldr	r3, [sp, #24]
   126a8:	mov	r0, #1
   126ac:	ldr	r2, [sp, #12]
   126b0:	ldr	r1, [r2]
   126b4:	ldr	r2, [sp, #28]
   126b8:	rsb	r3, r3, r1
   126bc:	ldr	r1, [sp, #12]
   126c0:	str	r3, [r1]
   126c4:	ldr	r1, [sp, #16]
   126c8:	ldr	r3, [r1]
   126cc:	cmp	r2, r3
   126d0:	bne	1275c <__assert_fail@plt+0x1494>
   126d4:	add	sp, sp, #36	; 0x24
   126d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126dc:	cmp	sl, #0
   126e0:	addne	r5, r5, #1
   126e4:	subne	r4, r4, #1
   126e8:	bne	125f8 <__assert_fail@plt+0x1330>
   126ec:	ldr	r2, [sp, #20]
   126f0:	rsb	r3, r6, r3
   126f4:	str	r6, [sp, #24]
   126f8:	add	fp, r5, r4
   126fc:	add	r3, r2, r3
   12700:	mov	r6, r5
   12704:	str	r3, [sp, #20]
   12708:	b	125bc <__assert_fail@plt+0x12f4>
   1270c:	rsb	r3, r5, fp
   12710:	cmp	r3, #3
   12714:	ble	12730 <__assert_fail@plt+0x1468>
   12718:	mov	r0, r5
   1271c:	mov	r1, #10
   12720:	mov	r2, #4
   12724:	bl	11220 <memchr@plt>
   12728:	cmp	r0, #0
   1272c:	beq	12750 <__assert_fail@plt+0x1488>
   12730:	ldr	r4, [r9]
   12734:	b	1265c <__assert_fail@plt+0x1394>
   12738:	mov	r3, #1
   1273c:	str	r3, [sp, #4]
   12740:	str	r3, [sp]
   12744:	b	1254c <__assert_fail@plt+0x1284>
   12748:	ldr	r3, [sp, #24]
   1274c:	b	126ac <__assert_fail@plt+0x13e4>
   12750:	add	r6, r5, #4
   12754:	mov	r4, #4
   12758:	b	125d0 <__assert_fail@plt+0x1308>
   1275c:	bl	110b8 <__stack_chk_fail@plt>
   12760:	andeq	r5, r1, ip, lsl #22
   12764:	andeq	r0, r0, r4, lsl #2
   12768:	push	{r4, r5, r6, r7, r8, r9, lr}
   1276c:	mov	r5, r2
   12770:	ldr	lr, [pc, #176]	; 12828 <__assert_fail@plt+0x1560>
   12774:	lsr	ip, r5, #2
   12778:	ldr	r2, [pc, #172]	; 1282c <__assert_fail@plt+0x1564>
   1277c:	add	ip, ip, #1
   12780:	add	lr, pc, lr
   12784:	mov	r6, r3
   12788:	sub	sp, sp, #20
   1278c:	mov	r7, r0
   12790:	ldr	r4, [lr, r2]
   12794:	add	r0, ip, ip, lsl #1
   12798:	mov	r8, r1
   1279c:	str	r0, [sp, #8]
   127a0:	ldr	r9, [sp, #48]	; 0x30
   127a4:	ldr	r3, [r4]
   127a8:	str	r3, [sp, #12]
   127ac:	bl	11154 <malloc@plt>
   127b0:	cmp	r0, #0
   127b4:	mov	r3, r0
   127b8:	str	r0, [r6]
   127bc:	beq	1280c <__assert_fail@plt+0x1544>
   127c0:	mov	r2, r5
   127c4:	add	ip, sp, #8
   127c8:	mov	r0, r7
   127cc:	mov	r1, r8
   127d0:	str	ip, [sp]
   127d4:	bl	124d0 <__assert_fail@plt+0x1208>
   127d8:	subs	r5, r0, #0
   127dc:	beq	12814 <__assert_fail@plt+0x154c>
   127e0:	cmp	r9, #0
   127e4:	beq	1280c <__assert_fail@plt+0x1544>
   127e8:	ldr	r3, [sp, #8]
   127ec:	str	r3, [r9]
   127f0:	ldr	r2, [sp, #12]
   127f4:	mov	r0, r5
   127f8:	ldr	r3, [r4]
   127fc:	cmp	r2, r3
   12800:	bne	12824 <__assert_fail@plt+0x155c>
   12804:	add	sp, sp, #20
   12808:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1280c:	mov	r5, #1
   12810:	b	127f0 <__assert_fail@plt+0x1528>
   12814:	ldr	r0, [r6]
   12818:	bl	11058 <free@plt>
   1281c:	str	r5, [r6]
   12820:	b	127f0 <__assert_fail@plt+0x1528>
   12824:	bl	110b8 <__stack_chk_fail@plt>
   12828:	andeq	r5, r1, r8, ror r8
   1282c:	andeq	r0, r0, r4, lsl #2
   12830:	ldr	r3, [pc, #8]	; 12840 <__assert_fail@plt+0x1578>
   12834:	add	r3, pc, r3
   12838:	str	r0, [r3]
   1283c:	bx	lr
   12840:	andeq	r5, r1, r4, asr r9
   12844:	ldr	r3, [pc, #8]	; 12854 <__assert_fail@plt+0x158c>
   12848:	add	r3, pc, r3
   1284c:	strb	r0, [r3, #4]
   12850:	bx	lr
   12854:	andeq	r5, r1, r0, asr #18

00012858 <close_stdout@@Base>:
   12858:	push	{r4, r5, r6, r7, lr}
   1285c:	sub	sp, sp, #12
   12860:	ldr	r4, [pc, #228]	; 1294c <close_stdout@@Base+0xf4>
   12864:	ldr	r3, [pc, #228]	; 12950 <close_stdout@@Base+0xf8>
   12868:	add	r4, pc, r4
   1286c:	ldr	r3, [r4, r3]
   12870:	ldr	r0, [r3]
   12874:	bl	153bc <close_stdout@@Base+0x2b64>
   12878:	cmp	r0, #0
   1287c:	beq	128a4 <close_stdout@@Base+0x4c>
   12880:	ldr	r3, [pc, #204]	; 12954 <close_stdout@@Base+0xfc>
   12884:	add	r3, pc, r3
   12888:	ldrb	r3, [r3, #4]
   1288c:	cmp	r3, #0
   12890:	beq	128c4 <close_stdout@@Base+0x6c>
   12894:	bl	111cc <__errno_location@plt>
   12898:	ldr	r3, [r0]
   1289c:	cmp	r3, #32
   128a0:	bne	128c4 <close_stdout@@Base+0x6c>
   128a4:	ldr	r3, [pc, #172]	; 12958 <close_stdout@@Base+0x100>
   128a8:	ldr	r3, [r4, r3]
   128ac:	ldr	r0, [r3]
   128b0:	bl	153bc <close_stdout@@Base+0x2b64>
   128b4:	cmp	r0, #0
   128b8:	bne	12918 <close_stdout@@Base+0xc0>
   128bc:	add	sp, sp, #12
   128c0:	pop	{r4, r5, r6, r7, pc}
   128c4:	ldr	r1, [pc, #144]	; 1295c <close_stdout@@Base+0x104>
   128c8:	mov	r0, #0
   128cc:	mov	r2, #5
   128d0:	add	r1, pc, r1
   128d4:	bl	110ac <dcgettext@plt>
   128d8:	ldr	r3, [pc, #128]	; 12960 <close_stdout@@Base+0x108>
   128dc:	ldr	r5, [pc, r3]
   128e0:	cmp	r5, #0
   128e4:	mov	r6, r0
   128e8:	beq	12928 <close_stdout@@Base+0xd0>
   128ec:	bl	111cc <__errno_location@plt>
   128f0:	ldr	r7, [r0]
   128f4:	mov	r0, r5
   128f8:	bl	14150 <close_stdout@@Base+0x18f8>
   128fc:	ldr	r2, [pc, #96]	; 12964 <close_stdout@@Base+0x10c>
   12900:	str	r6, [sp]
   12904:	mov	r1, r7
   12908:	add	r2, pc, r2
   1290c:	mov	r3, r0
   12910:	mov	r0, #0
   12914:	bl	11130 <error@plt>
   12918:	ldr	r3, [pc, #72]	; 12968 <close_stdout@@Base+0x110>
   1291c:	ldr	r3, [r4, r3]
   12920:	ldr	r0, [r3]
   12924:	bl	11064 <_exit@plt>
   12928:	bl	111cc <__errno_location@plt>
   1292c:	ldr	r2, [pc, #56]	; 1296c <close_stdout@@Base+0x114>
   12930:	add	r2, pc, r2
   12934:	mov	r3, r0
   12938:	mov	r0, r5
   1293c:	ldr	r1, [r3]
   12940:	mov	r3, r6
   12944:	bl	11130 <error@plt>
   12948:	b	12918 <close_stdout@@Base+0xc0>
   1294c:	muleq	r1, r0, r7
   12950:	andeq	r0, r0, r4, lsr #2
   12954:	andeq	r5, r1, r4, lsl #18
   12958:	andeq	r0, r0, r0, lsl r1
   1295c:	andeq	r3, r0, r0, asr #23
   12960:	andeq	r5, r1, ip, lsr #17
   12964:	strdeq	r4, [r0], -ip
   12968:	andeq	r0, r0, r8, lsr #2
   1296c:	ldrdeq	r4, [r0], -r8
   12970:	ldrb	r3, [r0]
   12974:	cmp	r3, #47	; 0x2f
   12978:	bne	12994 <close_stdout@@Base+0x13c>
   1297c:	add	r2, r0, #1
   12980:	mov	r0, r2
   12984:	add	r2, r2, #1
   12988:	ldrb	r3, [r0]
   1298c:	cmp	r3, #47	; 0x2f
   12990:	beq	12980 <close_stdout@@Base+0x128>
   12994:	cmp	r3, #0
   12998:	bxeq	lr
   1299c:	mov	r2, r0
   129a0:	mov	r1, #0
   129a4:	cmp	r3, #47	; 0x2f
   129a8:	moveq	r1, #1
   129ac:	beq	129bc <close_stdout@@Base+0x164>
   129b0:	cmp	r1, #0
   129b4:	movne	r0, r2
   129b8:	movne	r1, #0
   129bc:	ldrb	r3, [r2, #1]!
   129c0:	cmp	r3, #0
   129c4:	bne	129a4 <close_stdout@@Base+0x14c>
   129c8:	bx	lr
   129cc:	push	{r4, lr}
   129d0:	mov	r4, r0
   129d4:	bl	111a8 <strlen@plt>
   129d8:	cmp	r0, #1
   129dc:	popls	{r4, pc}
   129e0:	sub	r3, r0, #1
   129e4:	ldrb	r2, [r4, r3]
   129e8:	cmp	r2, #47	; 0x2f
   129ec:	popne	{r4, pc}
   129f0:	mov	r0, r3
   129f4:	cmp	r0, #1
   129f8:	sub	r3, r3, #1
   129fc:	beq	12a10 <close_stdout@@Base+0x1b8>
   12a00:	ldrb	r2, [r4, r3]
   12a04:	cmp	r2, #47	; 0x2f
   12a08:	popne	{r4, pc}
   12a0c:	b	129f0 <close_stdout@@Base+0x198>
   12a10:	pop	{r4, pc}
   12a14:	b	11034 <posix_fadvise64@plt>
   12a18:	cmp	r0, #0
   12a1c:	push	{r4, r5, r6, lr}
   12a20:	mov	r6, r1
   12a24:	sub	sp, sp, #16
   12a28:	beq	12a4c <close_stdout@@Base+0x1f4>
   12a2c:	mov	r4, #0
   12a30:	mov	r5, #0
   12a34:	bl	11208 <fileno@plt>
   12a38:	str	r6, [sp, #8]
   12a3c:	mov	r2, r4
   12a40:	mov	r3, r5
   12a44:	strd	r4, [sp]
   12a48:	bl	12a14 <close_stdout@@Base+0x1bc>
   12a4c:	add	sp, sp, #16
   12a50:	pop	{r4, r5, r6, pc}
   12a54:	push	{r3, r4, r5, r6, r7, lr}
   12a58:	subs	r4, r0, #0
   12a5c:	ldr	r5, [pc, #172]	; 12b10 <close_stdout@@Base+0x2b8>
   12a60:	add	r5, pc, r5
   12a64:	beq	12aec <close_stdout@@Base+0x294>
   12a68:	mov	r1, #47	; 0x2f
   12a6c:	bl	11268 <strrchr@plt>
   12a70:	subs	r6, r0, #0
   12a74:	beq	12ad0 <close_stdout@@Base+0x278>
   12a78:	add	r7, r6, #1
   12a7c:	rsb	r3, r4, r7
   12a80:	cmp	r3, #6
   12a84:	ble	12ad0 <close_stdout@@Base+0x278>
   12a88:	ldr	r1, [pc, #132]	; 12b14 <close_stdout@@Base+0x2bc>
   12a8c:	sub	r0, r6, #6
   12a90:	mov	r2, #7
   12a94:	add	r1, pc, r1
   12a98:	bl	112a4 <strncmp@plt>
   12a9c:	cmp	r0, #0
   12aa0:	bne	12ad0 <close_stdout@@Base+0x278>
   12aa4:	ldr	r1, [pc, #108]	; 12b18 <close_stdout@@Base+0x2c0>
   12aa8:	mov	r0, r7
   12aac:	mov	r2, #3
   12ab0:	add	r1, pc, r1
   12ab4:	bl	112a4 <strncmp@plt>
   12ab8:	cmp	r0, #0
   12abc:	movne	r4, r7
   12ac0:	ldreq	r3, [pc, #84]	; 12b1c <close_stdout@@Base+0x2c4>
   12ac4:	addeq	r4, r6, #4
   12ac8:	ldreq	r3, [r5, r3]
   12acc:	streq	r4, [r3]
   12ad0:	ldr	r2, [pc, #72]	; 12b20 <close_stdout@@Base+0x2c8>
   12ad4:	ldr	r3, [pc, #72]	; 12b24 <close_stdout@@Base+0x2cc>
   12ad8:	ldr	r2, [r5, r2]
   12adc:	str	r4, [r2]
   12ae0:	ldr	r3, [r5, r3]
   12ae4:	str	r4, [r3]
   12ae8:	pop	{r3, r4, r5, r6, r7, pc}
   12aec:	ldr	r3, [pc, #52]	; 12b28 <close_stdout@@Base+0x2d0>
   12af0:	mov	r1, #1
   12af4:	ldr	r0, [pc, #48]	; 12b2c <close_stdout@@Base+0x2d4>
   12af8:	mov	r2, #55	; 0x37
   12afc:	ldr	r3, [r5, r3]
   12b00:	add	r0, pc, r0
   12b04:	ldr	r3, [r3]
   12b08:	bl	110e8 <fwrite@plt>
   12b0c:	bl	112b0 <abort@plt>
   12b10:	muleq	r1, r8, r5
   12b14:	strheq	r4, [r0], -r0
   12b18:	muleq	r0, ip, r0
   12b1c:	andeq	r0, r0, r8, lsr r1
   12b20:	andeq	r0, r0, r0, lsr r1
   12b24:	andeq	r0, r0, ip, lsr #2
   12b28:	andeq	r0, r0, r0, lsl r1
   12b2c:	andeq	r4, r0, ip
   12b30:	push	{r3, lr}
   12b34:	mov	r3, r0
   12b38:	mov	r2, #0
   12b3c:	cmp	r1, #8
   12b40:	str	r2, [r3], #4
   12b44:	add	r3, r3, #4
   12b48:	str	r2, [r0, #4]
   12b4c:	str	r2, [r3], #4
   12b50:	str	r2, [r3], #4
   12b54:	str	r2, [r3], #4
   12b58:	str	r2, [r3], #4
   12b5c:	str	r2, [r3], #4
   12b60:	str	r2, [r3], #4
   12b64:	str	r2, [r3], #4
   12b68:	str	r2, [r3], #4
   12b6c:	str	r2, [r3], #4
   12b70:	str	r2, [r3]
   12b74:	beq	12b80 <close_stdout@@Base+0x328>
   12b78:	str	r1, [r0]
   12b7c:	pop	{r3, pc}
   12b80:	bl	112b0 <abort@plt>
   12b84:	push	{r4, r5, r6, lr}
   12b88:	mov	r4, r0
   12b8c:	mov	r6, r1
   12b90:	mov	r0, #0
   12b94:	mov	r1, r4
   12b98:	mov	r2, #5
   12b9c:	bl	110ac <dcgettext@plt>
   12ba0:	cmp	r0, r4
   12ba4:	mov	r5, r0
   12ba8:	beq	12bb0 <close_stdout@@Base+0x358>
   12bac:	pop	{r4, r5, r6, pc}
   12bb0:	bl	1543c <close_stdout@@Base+0x2be4>
   12bb4:	ldrb	r3, [r0]
   12bb8:	bic	r3, r3, #32
   12bbc:	cmp	r3, #85	; 0x55
   12bc0:	bne	12c34 <close_stdout@@Base+0x3dc>
   12bc4:	ldrb	r3, [r0, #1]
   12bc8:	bic	r3, r3, #32
   12bcc:	cmp	r3, #84	; 0x54
   12bd0:	bne	12c20 <close_stdout@@Base+0x3c8>
   12bd4:	ldrb	r3, [r0, #2]
   12bd8:	bic	r3, r3, #32
   12bdc:	cmp	r3, #70	; 0x46
   12be0:	bne	12c20 <close_stdout@@Base+0x3c8>
   12be4:	ldrb	r3, [r0, #3]
   12be8:	cmp	r3, #45	; 0x2d
   12bec:	bne	12c20 <close_stdout@@Base+0x3c8>
   12bf0:	ldrb	r3, [r0, #4]
   12bf4:	cmp	r3, #56	; 0x38
   12bf8:	bne	12c20 <close_stdout@@Base+0x3c8>
   12bfc:	ldrb	r3, [r0, #5]
   12c00:	cmp	r3, #0
   12c04:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c08:	ldrb	r3, [r5]
   12c0c:	cmp	r3, #96	; 0x60
   12c10:	beq	12cac <close_stdout@@Base+0x454>
   12c14:	ldr	r0, [pc, #180]	; 12cd0 <close_stdout@@Base+0x478>
   12c18:	add	r0, pc, r0
   12c1c:	pop	{r4, r5, r6, pc}
   12c20:	cmp	r6, #7
   12c24:	beq	12cb8 <close_stdout@@Base+0x460>
   12c28:	ldr	r0, [pc, #164]	; 12cd4 <close_stdout@@Base+0x47c>
   12c2c:	add	r0, pc, r0
   12c30:	pop	{r4, r5, r6, pc}
   12c34:	cmp	r3, #71	; 0x47
   12c38:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c3c:	ldrb	r3, [r0, #1]
   12c40:	bic	r3, r3, #32
   12c44:	cmp	r3, #66	; 0x42
   12c48:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c4c:	ldrb	r3, [r0, #2]
   12c50:	cmp	r3, #49	; 0x31
   12c54:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c58:	ldrb	r3, [r0, #3]
   12c5c:	cmp	r3, #56	; 0x38
   12c60:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c64:	ldrb	r3, [r0, #4]
   12c68:	cmp	r3, #48	; 0x30
   12c6c:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c70:	ldrb	r3, [r0, #5]
   12c74:	cmp	r3, #51	; 0x33
   12c78:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c7c:	ldrb	r3, [r0, #6]
   12c80:	cmp	r3, #48	; 0x30
   12c84:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c88:	ldrb	r3, [r0, #7]
   12c8c:	cmp	r3, #0
   12c90:	bne	12c20 <close_stdout@@Base+0x3c8>
   12c94:	ldrb	r3, [r5]
   12c98:	cmp	r3, #96	; 0x60
   12c9c:	beq	12cc4 <close_stdout@@Base+0x46c>
   12ca0:	ldr	r0, [pc, #48]	; 12cd8 <close_stdout@@Base+0x480>
   12ca4:	add	r0, pc, r0
   12ca8:	pop	{r4, r5, r6, pc}
   12cac:	ldr	r0, [pc, #40]	; 12cdc <close_stdout@@Base+0x484>
   12cb0:	add	r0, pc, r0
   12cb4:	pop	{r4, r5, r6, pc}
   12cb8:	ldr	r0, [pc, #32]	; 12ce0 <close_stdout@@Base+0x488>
   12cbc:	add	r0, pc, r0
   12cc0:	pop	{r4, r5, r6, pc}
   12cc4:	ldr	r0, [pc, #24]	; 12ce4 <close_stdout@@Base+0x48c>
   12cc8:	add	r0, pc, r0
   12ccc:	pop	{r4, r5, r6, pc}
   12cd0:	andeq	r3, r0, r8, asr pc
   12cd4:	andeq	r3, r0, ip, asr #30
   12cd8:	ldrdeq	r3, [r0], -r0
   12cdc:	ldrdeq	r3, [r0], -r4
   12ce0:	andeq	r3, r0, r0, asr #29
   12ce4:			; <UNDEFINED> instruction: 0x00003eb8
   12ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cec:	sub	sp, sp, #124	; 0x7c
   12cf0:	ldr	ip, [pc, #3304]	; 139e0 <close_stdout@@Base+0x1188>
   12cf4:	mov	sl, r1
   12cf8:	str	r0, [sp, #40]	; 0x28
   12cfc:	mov	r8, r3
   12d00:	ldr	r0, [pc, #3292]	; 139e4 <close_stdout@@Base+0x118c>
   12d04:	add	ip, pc, ip
   12d08:	str	r2, [sp, #32]
   12d0c:	ldr	r1, [sp, #164]	; 0xa4
   12d10:	mov	r3, ip
   12d14:	ldr	r0, [ip, r0]
   12d18:	ldr	r2, [sp, #172]	; 0xac
   12d1c:	ubfx	r1, r1, #1, #1
   12d20:	str	r1, [sp, #36]	; 0x24
   12d24:	str	r0, [sp, #56]	; 0x38
   12d28:	ldr	r0, [sp, #168]	; 0xa8
   12d2c:	ldr	r1, [sp, #176]	; 0xb0
   12d30:	str	r2, [sp, #72]	; 0x48
   12d34:	str	r0, [sp, #48]	; 0x30
   12d38:	ldr	r0, [sp, #56]	; 0x38
   12d3c:	str	r1, [sp, #68]	; 0x44
   12d40:	ldr	r3, [r0]
   12d44:	str	r3, [sp, #116]	; 0x74
   12d48:	bl	11100 <__ctype_get_mb_cur_max@plt>
   12d4c:	ldr	r2, [sp, #160]	; 0xa0
   12d50:	str	r0, [sp, #64]	; 0x40
   12d54:	cmp	r2, #8
   12d58:	addls	pc, pc, r2, lsl #2
   12d5c:	b	138bc <close_stdout@@Base+0x1064>
   12d60:	b	12d84 <close_stdout@@Base+0x52c>
   12d64:	b	135d4 <close_stdout@@Base+0xd7c>
   12d68:	b	13604 <close_stdout@@Base+0xdac>
   12d6c:	b	134b4 <close_stdout@@Base+0xc5c>
   12d70:	b	134f4 <close_stdout@@Base+0xc9c>
   12d74:	b	13520 <close_stdout@@Base+0xcc8>
   12d78:	b	13540 <close_stdout@@Base+0xce8>
   12d7c:	b	13540 <close_stdout@@Base+0xce8>
   12d80:	b	13540 <close_stdout@@Base+0xce8>
   12d84:	mov	r2, #0
   12d88:	str	r2, [sp, #36]	; 0x24
   12d8c:	mov	r9, r2
   12d90:	str	r2, [sp, #24]
   12d94:	str	r2, [sp, #28]
   12d98:	str	r2, [sp, #52]	; 0x34
   12d9c:	ldr	r0, [sp, #36]	; 0x24
   12da0:	mov	fp, #0
   12da4:	ldr	r1, [sp, #24]
   12da8:	eor	r2, r0, #1
   12dac:	eor	r3, r1, #1
   12db0:	and	r3, r2, r3
   12db4:	and	r2, r1, r0
   12db8:	str	r3, [sp, #44]	; 0x2c
   12dbc:	str	r2, [sp, #76]	; 0x4c
   12dc0:	cmn	r8, #1
   12dc4:	beq	13144 <close_stdout@@Base+0x8ec>
   12dc8:	subs	r3, fp, r8
   12dcc:	movne	r3, #1
   12dd0:	cmp	r3, #0
   12dd4:	beq	1315c <close_stdout@@Base+0x904>
   12dd8:	ldr	r3, [sp, #28]
   12ddc:	ldr	r0, [sp, #24]
   12de0:	adds	r7, r3, #0
   12de4:	movne	r7, #1
   12de8:	ands	r6, r7, r0
   12dec:	bne	13648 <close_stdout@@Base+0xdf0>
   12df0:	ldr	r1, [sp, #32]
   12df4:	add	r5, r1, fp
   12df8:	ldrb	r4, [r5]
   12dfc:	cmp	r4, #126	; 0x7e
   12e00:	addls	pc, pc, r4, lsl #2
   12e04:	b	133c8 <close_stdout@@Base+0xb70>
   12e08:	b	132d4 <close_stdout@@Base+0xa7c>
   12e0c:	b	133c8 <close_stdout@@Base+0xb70>
   12e10:	b	133c8 <close_stdout@@Base+0xb70>
   12e14:	b	133c8 <close_stdout@@Base+0xb70>
   12e18:	b	133c8 <close_stdout@@Base+0xb70>
   12e1c:	b	133c8 <close_stdout@@Base+0xb70>
   12e20:	b	133c8 <close_stdout@@Base+0xb70>
   12e24:	b	132bc <close_stdout@@Base+0xa64>
   12e28:	b	132a4 <close_stdout@@Base+0xa4c>
   12e2c:	b	132cc <close_stdout@@Base+0xa74>
   12e30:	b	132c4 <close_stdout@@Base+0xa6c>
   12e34:	b	132b4 <close_stdout@@Base+0xa5c>
   12e38:	b	132ac <close_stdout@@Base+0xa54>
   12e3c:	b	13270 <close_stdout@@Base+0xa18>
   12e40:	b	133c8 <close_stdout@@Base+0xb70>
   12e44:	b	133c8 <close_stdout@@Base+0xb70>
   12e48:	b	133c8 <close_stdout@@Base+0xb70>
   12e4c:	b	133c8 <close_stdout@@Base+0xb70>
   12e50:	b	133c8 <close_stdout@@Base+0xb70>
   12e54:	b	133c8 <close_stdout@@Base+0xb70>
   12e58:	b	133c8 <close_stdout@@Base+0xb70>
   12e5c:	b	133c8 <close_stdout@@Base+0xb70>
   12e60:	b	133c8 <close_stdout@@Base+0xb70>
   12e64:	b	133c8 <close_stdout@@Base+0xb70>
   12e68:	b	133c8 <close_stdout@@Base+0xb70>
   12e6c:	b	133c8 <close_stdout@@Base+0xb70>
   12e70:	b	133c8 <close_stdout@@Base+0xb70>
   12e74:	b	133c8 <close_stdout@@Base+0xb70>
   12e78:	b	133c8 <close_stdout@@Base+0xb70>
   12e7c:	b	133c8 <close_stdout@@Base+0xb70>
   12e80:	b	133c8 <close_stdout@@Base+0xb70>
   12e84:	b	133c8 <close_stdout@@Base+0xb70>
   12e88:	b	131fc <close_stdout@@Base+0x9a4>
   12e8c:	b	131fc <close_stdout@@Base+0x9a4>
   12e90:	b	131fc <close_stdout@@Base+0x9a4>
   12e94:	b	131f4 <close_stdout@@Base+0x99c>
   12e98:	b	131fc <close_stdout@@Base+0x9a4>
   12e9c:	b	130d0 <close_stdout@@Base+0x878>
   12ea0:	b	131fc <close_stdout@@Base+0x9a4>
   12ea4:	b	13370 <close_stdout@@Base+0xb18>
   12ea8:	b	131fc <close_stdout@@Base+0x9a4>
   12eac:	b	131fc <close_stdout@@Base+0x9a4>
   12eb0:	b	131fc <close_stdout@@Base+0x9a4>
   12eb4:	b	130d0 <close_stdout@@Base+0x878>
   12eb8:	b	130d0 <close_stdout@@Base+0x878>
   12ebc:	b	130d0 <close_stdout@@Base+0x878>
   12ec0:	b	130d0 <close_stdout@@Base+0x878>
   12ec4:	b	130d0 <close_stdout@@Base+0x878>
   12ec8:	b	130d0 <close_stdout@@Base+0x878>
   12ecc:	b	130d0 <close_stdout@@Base+0x878>
   12ed0:	b	130d0 <close_stdout@@Base+0x878>
   12ed4:	b	130d0 <close_stdout@@Base+0x878>
   12ed8:	b	130d0 <close_stdout@@Base+0x878>
   12edc:	b	130d0 <close_stdout@@Base+0x878>
   12ee0:	b	130d0 <close_stdout@@Base+0x878>
   12ee4:	b	130d0 <close_stdout@@Base+0x878>
   12ee8:	b	130d0 <close_stdout@@Base+0x878>
   12eec:	b	130d0 <close_stdout@@Base+0x878>
   12ef0:	b	130d0 <close_stdout@@Base+0x878>
   12ef4:	b	131fc <close_stdout@@Base+0x9a4>
   12ef8:	b	131fc <close_stdout@@Base+0x9a4>
   12efc:	b	131fc <close_stdout@@Base+0x9a4>
   12f00:	b	131fc <close_stdout@@Base+0x9a4>
   12f04:	b	13004 <close_stdout@@Base+0x7ac>
   12f08:	b	133c8 <close_stdout@@Base+0xb70>
   12f0c:	b	130d0 <close_stdout@@Base+0x878>
   12f10:	b	130d0 <close_stdout@@Base+0x878>
   12f14:	b	130d0 <close_stdout@@Base+0x878>
   12f18:	b	130d0 <close_stdout@@Base+0x878>
   12f1c:	b	130d0 <close_stdout@@Base+0x878>
   12f20:	b	130d0 <close_stdout@@Base+0x878>
   12f24:	b	130d0 <close_stdout@@Base+0x878>
   12f28:	b	130d0 <close_stdout@@Base+0x878>
   12f2c:	b	130d0 <close_stdout@@Base+0x878>
   12f30:	b	130d0 <close_stdout@@Base+0x878>
   12f34:	b	130d0 <close_stdout@@Base+0x878>
   12f38:	b	130d0 <close_stdout@@Base+0x878>
   12f3c:	b	130d0 <close_stdout@@Base+0x878>
   12f40:	b	130d0 <close_stdout@@Base+0x878>
   12f44:	b	130d0 <close_stdout@@Base+0x878>
   12f48:	b	130d0 <close_stdout@@Base+0x878>
   12f4c:	b	130d0 <close_stdout@@Base+0x878>
   12f50:	b	130d0 <close_stdout@@Base+0x878>
   12f54:	b	130d0 <close_stdout@@Base+0x878>
   12f58:	b	130d0 <close_stdout@@Base+0x878>
   12f5c:	b	130d0 <close_stdout@@Base+0x878>
   12f60:	b	130d0 <close_stdout@@Base+0x878>
   12f64:	b	130d0 <close_stdout@@Base+0x878>
   12f68:	b	130d0 <close_stdout@@Base+0x878>
   12f6c:	b	130d0 <close_stdout@@Base+0x878>
   12f70:	b	130d0 <close_stdout@@Base+0x878>
   12f74:	b	131fc <close_stdout@@Base+0x9a4>
   12f78:	b	13354 <close_stdout@@Base+0xafc>
   12f7c:	b	130d0 <close_stdout@@Base+0x878>
   12f80:	b	131fc <close_stdout@@Base+0x9a4>
   12f84:	b	130d0 <close_stdout@@Base+0x878>
   12f88:	b	131fc <close_stdout@@Base+0x9a4>
   12f8c:	b	130d0 <close_stdout@@Base+0x878>
   12f90:	b	130d0 <close_stdout@@Base+0x878>
   12f94:	b	130d0 <close_stdout@@Base+0x878>
   12f98:	b	130d0 <close_stdout@@Base+0x878>
   12f9c:	b	130d0 <close_stdout@@Base+0x878>
   12fa0:	b	130d0 <close_stdout@@Base+0x878>
   12fa4:	b	130d0 <close_stdout@@Base+0x878>
   12fa8:	b	130d0 <close_stdout@@Base+0x878>
   12fac:	b	130d0 <close_stdout@@Base+0x878>
   12fb0:	b	130d0 <close_stdout@@Base+0x878>
   12fb4:	b	130d0 <close_stdout@@Base+0x878>
   12fb8:	b	130d0 <close_stdout@@Base+0x878>
   12fbc:	b	130d0 <close_stdout@@Base+0x878>
   12fc0:	b	130d0 <close_stdout@@Base+0x878>
   12fc4:	b	130d0 <close_stdout@@Base+0x878>
   12fc8:	b	130d0 <close_stdout@@Base+0x878>
   12fcc:	b	130d0 <close_stdout@@Base+0x878>
   12fd0:	b	130d0 <close_stdout@@Base+0x878>
   12fd4:	b	130d0 <close_stdout@@Base+0x878>
   12fd8:	b	130d0 <close_stdout@@Base+0x878>
   12fdc:	b	130d0 <close_stdout@@Base+0x878>
   12fe0:	b	130d0 <close_stdout@@Base+0x878>
   12fe4:	b	130d0 <close_stdout@@Base+0x878>
   12fe8:	b	130d0 <close_stdout@@Base+0x878>
   12fec:	b	130d0 <close_stdout@@Base+0x878>
   12ff0:	b	130d0 <close_stdout@@Base+0x878>
   12ff4:	b	131dc <close_stdout@@Base+0x984>
   12ff8:	b	131fc <close_stdout@@Base+0x9a4>
   12ffc:	b	131dc <close_stdout@@Base+0x984>
   13000:	b	131f4 <close_stdout@@Base+0x99c>
   13004:	ldr	r3, [sp, #160]	; 0xa0
   13008:	cmp	r3, #2
   1300c:	beq	13898 <close_stdout@@Base+0x1040>
   13010:	cmp	r3, #3
   13014:	bne	130d0 <close_stdout@@Base+0x878>
   13018:	ldr	r1, [sp, #164]	; 0xa4
   1301c:	tst	r1, #4
   13020:	beq	130d0 <close_stdout@@Base+0x878>
   13024:	add	r3, fp, #2
   13028:	cmp	r8, r3
   1302c:	bls	130d0 <close_stdout@@Base+0x878>
   13030:	ldrb	r2, [r5, #1]
   13034:	mov	r1, #1
   13038:	cmp	r2, #63	; 0x3f
   1303c:	bne	130d0 <close_stdout@@Base+0x878>
   13040:	ldr	r0, [sp, #32]
   13044:	ldrb	ip, [r0, r3]
   13048:	sub	r0, ip, #33	; 0x21
   1304c:	uxtb	r0, r0
   13050:	cmp	r0, #29
   13054:	bhi	130d0 <close_stdout@@Base+0x878>
   13058:	lsl	r1, r1, r0
   1305c:	movw	r0, #20929	; 0x51c1
   13060:	movt	r0, #14336	; 0x3800
   13064:	and	r0, r1, r0
   13068:	cmp	r0, #0
   1306c:	beq	130d0 <close_stdout@@Base+0x878>
   13070:	ldr	r1, [sp, #36]	; 0x24
   13074:	cmp	r1, #0
   13078:	bne	13218 <close_stdout@@Base+0x9c0>
   1307c:	cmp	r9, sl
   13080:	mov	r4, ip
   13084:	mov	fp, r3
   13088:	ldrcc	r0, [sp, #40]	; 0x28
   1308c:	strbcc	r2, [r0, r9]
   13090:	add	r2, r9, #1
   13094:	cmp	sl, r2
   13098:	ldrhi	r0, [sp, #40]	; 0x28
   1309c:	movhi	r1, #34	; 0x22
   130a0:	strbhi	r1, [r0, r2]
   130a4:	add	r2, r9, #2
   130a8:	cmp	sl, r2
   130ac:	ldrhi	r0, [sp, #40]	; 0x28
   130b0:	movhi	r1, #34	; 0x22
   130b4:	strbhi	r1, [r0, r2]
   130b8:	add	r2, r9, #3
   130bc:	cmp	sl, r2
   130c0:	add	r9, r9, #4
   130c4:	ldrhi	r0, [sp, #40]	; 0x28
   130c8:	movhi	r1, #63	; 0x3f
   130cc:	strbhi	r1, [r0, r2]
   130d0:	ldr	r0, [sp, #44]	; 0x2c
   130d4:	cmp	r0, #0
   130d8:	bne	13100 <close_stdout@@Base+0x8a8>
   130dc:	ldr	r1, [sp, #48]	; 0x30
   130e0:	cmp	r1, #0
   130e4:	beq	13100 <close_stdout@@Base+0x8a8>
   130e8:	ubfx	r2, r4, #5, #8
   130ec:	and	r3, r4, #31
   130f0:	ldr	r2, [r1, r2, lsl #2]
   130f4:	lsr	r3, r2, r3
   130f8:	tst	r3, #1
   130fc:	bne	13108 <close_stdout@@Base+0x8b0>
   13100:	cmp	r6, #0
   13104:	beq	13128 <close_stdout@@Base+0x8d0>
   13108:	ldr	r2, [sp, #36]	; 0x24
   1310c:	cmp	r2, #0
   13110:	bne	13218 <close_stdout@@Base+0x9c0>
   13114:	cmp	r9, sl
   13118:	ldrcc	r0, [sp, #40]	; 0x28
   1311c:	movcc	r3, #92	; 0x5c
   13120:	strbcc	r3, [r0, r9]
   13124:	add	r9, r9, #1
   13128:	add	fp, fp, #1
   1312c:	cmp	r9, sl
   13130:	ldrcc	r1, [sp, #40]	; 0x28
   13134:	strbcc	r4, [r1, r9]
   13138:	cmn	r8, #1
   1313c:	add	r9, r9, #1
   13140:	bne	12dc8 <close_stdout@@Base+0x570>
   13144:	ldr	r2, [sp, #32]
   13148:	ldrb	r3, [r2, fp]
   1314c:	adds	r3, r3, #0
   13150:	movne	r3, #1
   13154:	cmp	r3, #0
   13158:	bne	12dd8 <close_stdout@@Base+0x580>
   1315c:	ldr	r3, [sp, #160]	; 0xa0
   13160:	cmp	r9, #0
   13164:	cmpeq	r3, #2
   13168:	bne	13178 <close_stdout@@Base+0x920>
   1316c:	ldr	r0, [sp, #36]	; 0x24
   13170:	cmp	r0, #0
   13174:	bne	13218 <close_stdout@@Base+0x9c0>
   13178:	ldr	r1, [sp, #36]	; 0x24
   1317c:	ldr	r2, [sp, #52]	; 0x34
   13180:	eor	r3, r1, #1
   13184:	cmp	r2, #0
   13188:	moveq	r3, #0
   1318c:	andne	r3, r3, #1
   13190:	cmp	r3, #0
   13194:	beq	131c0 <close_stdout@@Base+0x968>
   13198:	ldrb	r3, [r2]
   1319c:	cmp	r3, #0
   131a0:	beq	131c0 <close_stdout@@Base+0x968>
   131a4:	ldr	r1, [sp, #40]	; 0x28
   131a8:	cmp	sl, r9
   131ac:	strbhi	r3, [r1, r9]
   131b0:	ldrb	r3, [r2, #1]!
   131b4:	add	r9, r9, #1
   131b8:	cmp	r3, #0
   131bc:	bne	131a8 <close_stdout@@Base+0x950>
   131c0:	cmp	r9, sl
   131c4:	movcs	r0, r9
   131c8:	ldrcc	r1, [sp, #40]	; 0x28
   131cc:	movcc	r3, #0
   131d0:	movcc	r0, r9
   131d4:	strbcc	r3, [r1, r9]
   131d8:	b	13254 <close_stdout@@Base+0x9fc>
   131dc:	cmn	r8, #1
   131e0:	beq	138a8 <close_stdout@@Base+0x1050>
   131e4:	subs	r3, r8, #1
   131e8:	movne	r3, #1
   131ec:	cmp	r3, #0
   131f0:	bne	130d0 <close_stdout@@Base+0x878>
   131f4:	cmp	fp, #0
   131f8:	bne	130d0 <close_stdout@@Base+0x878>
   131fc:	ldr	r3, [sp, #36]	; 0x24
   13200:	ldr	r0, [sp, #160]	; 0xa0
   13204:	cmp	r0, #2
   13208:	movne	r3, #0
   1320c:	andeq	r3, r3, #1
   13210:	cmp	r3, #0
   13214:	beq	130d0 <close_stdout@@Base+0x878>
   13218:	ldr	r2, [sp, #164]	; 0xa4
   1321c:	mov	ip, #0
   13220:	ldr	r0, [sp, #160]	; 0xa0
   13224:	bic	r3, r2, #2
   13228:	ldr	r1, [sp, #72]	; 0x48
   1322c:	ldr	r2, [sp, #68]	; 0x44
   13230:	stm	sp, {r0, r3}
   13234:	mov	r3, r8
   13238:	str	r1, [sp, #12]
   1323c:	mov	r1, sl
   13240:	str	r2, [sp, #16]
   13244:	ldr	r0, [sp, #40]	; 0x28
   13248:	ldr	r2, [sp, #32]
   1324c:	str	ip, [sp, #8]
   13250:	bl	12ce8 <close_stdout@@Base+0x490>
   13254:	ldr	r1, [sp, #56]	; 0x38
   13258:	ldr	r2, [sp, #116]	; 0x74
   1325c:	ldr	r3, [r1]
   13260:	cmp	r2, r3
   13264:	bne	13998 <close_stdout@@Base+0x1140>
   13268:	add	sp, sp, #124	; 0x7c
   1326c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13270:	mov	r3, #114	; 0x72
   13274:	ldr	r2, [sp, #36]	; 0x24
   13278:	ldr	r0, [sp, #160]	; 0xa0
   1327c:	cmp	r0, #2
   13280:	movne	r2, #0
   13284:	andeq	r2, r2, #1
   13288:	cmp	r2, #0
   1328c:	bne	13218 <close_stdout@@Base+0x9c0>
   13290:	ldr	r1, [sp, #24]
   13294:	cmp	r1, #0
   13298:	beq	130d0 <close_stdout@@Base+0x878>
   1329c:	mov	r4, r3
   132a0:	b	13108 <close_stdout@@Base+0x8b0>
   132a4:	mov	r3, #98	; 0x62
   132a8:	b	13290 <close_stdout@@Base+0xa38>
   132ac:	mov	r3, #102	; 0x66
   132b0:	b	13290 <close_stdout@@Base+0xa38>
   132b4:	mov	r3, #118	; 0x76
   132b8:	b	13290 <close_stdout@@Base+0xa38>
   132bc:	mov	r3, #97	; 0x61
   132c0:	b	13290 <close_stdout@@Base+0xa38>
   132c4:	mov	r3, #110	; 0x6e
   132c8:	b	13274 <close_stdout@@Base+0xa1c>
   132cc:	mov	r3, #116	; 0x74
   132d0:	b	13274 <close_stdout@@Base+0xa1c>
   132d4:	ldr	r2, [sp, #24]
   132d8:	cmp	r2, #0
   132dc:	beq	13884 <close_stdout@@Base+0x102c>
   132e0:	ldr	r3, [sp, #36]	; 0x24
   132e4:	cmp	r3, #0
   132e8:	bne	13218 <close_stdout@@Base+0x9c0>
   132ec:	cmp	r9, sl
   132f0:	add	r2, r9, #1
   132f4:	ldrcc	r0, [sp, #40]	; 0x28
   132f8:	movcc	r3, #92	; 0x5c
   132fc:	strbcc	r3, [r0, r9]
   13300:	add	r3, fp, #1
   13304:	cmp	r8, r3
   13308:	bls	13348 <close_stdout@@Base+0xaf0>
   1330c:	ldr	r1, [sp, #32]
   13310:	ldrb	r3, [r1, r3]
   13314:	sub	r3, r3, #48	; 0x30
   13318:	cmp	r3, #9
   1331c:	bhi	13348 <close_stdout@@Base+0xaf0>
   13320:	cmp	sl, r2
   13324:	ldrhi	r0, [sp, #40]	; 0x28
   13328:	movhi	r3, #48	; 0x30
   1332c:	strbhi	r3, [r0, r2]
   13330:	add	r3, r9, #2
   13334:	cmp	sl, r3
   13338:	ldrhi	r1, [sp, #40]	; 0x28
   1333c:	movhi	r2, #48	; 0x30
   13340:	strbhi	r2, [r1, r3]
   13344:	add	r2, r9, #3
   13348:	mov	r9, r2
   1334c:	mov	r4, #48	; 0x30
   13350:	b	130dc <close_stdout@@Base+0x884>
   13354:	ldr	r1, [sp, #76]	; 0x4c
   13358:	cmp	r1, #0
   1335c:	beq	13368 <close_stdout@@Base+0xb10>
   13360:	cmp	r7, #0
   13364:	bne	13128 <close_stdout@@Base+0x8d0>
   13368:	mov	r3, r4
   1336c:	b	13274 <close_stdout@@Base+0xa1c>
   13370:	ldr	r1, [sp, #160]	; 0xa0
   13374:	cmp	r1, #2
   13378:	bne	130d0 <close_stdout@@Base+0x878>
   1337c:	ldr	r2, [sp, #36]	; 0x24
   13380:	cmp	r2, #0
   13384:	bne	13218 <close_stdout@@Base+0x9c0>
   13388:	cmp	r9, sl
   1338c:	ldrcc	r0, [sp, #40]	; 0x28
   13390:	movcc	r3, #39	; 0x27
   13394:	strbcc	r3, [r0, r9]
   13398:	add	r3, r9, #1
   1339c:	cmp	sl, r3
   133a0:	ldrhi	r1, [sp, #40]	; 0x28
   133a4:	movhi	r2, #92	; 0x5c
   133a8:	strbhi	r2, [r1, r3]
   133ac:	add	r3, r9, #2
   133b0:	cmp	sl, r3
   133b4:	add	r9, r9, #3
   133b8:	ldrhi	r0, [sp, #40]	; 0x28
   133bc:	movhi	r2, #39	; 0x27
   133c0:	strbhi	r2, [r0, r3]
   133c4:	b	130d0 <close_stdout@@Base+0x878>
   133c8:	ldr	r1, [sp, #64]	; 0x40
   133cc:	cmp	r1, #1
   133d0:	bne	136c8 <close_stdout@@Base+0xe70>
   133d4:	bl	11190 <__ctype_b_loc@plt>
   133d8:	ldr	r2, [sp, #64]	; 0x40
   133dc:	sxth	r3, r4
   133e0:	str	r2, [sp, #60]	; 0x3c
   133e4:	lsl	r3, r3, #1
   133e8:	ldr	r2, [r0]
   133ec:	ldrh	r2, [r2, r3]
   133f0:	eor	r2, r2, #16384	; 0x4000
   133f4:	ubfx	r2, r2, #14, #1
   133f8:	ldr	r1, [sp, #24]
   133fc:	ands	r2, r2, r1
   13400:	beq	130d0 <close_stdout@@Base+0x878>
   13404:	ldr	r3, [sp, #60]	; 0x3c
   13408:	mov	r0, #92	; 0x5c
   1340c:	ldr	r7, [sp, #36]	; 0x24
   13410:	add	r1, r3, fp
   13414:	str	r8, [sp, #60]	; 0x3c
   13418:	ldr	r3, [sp, #40]	; 0x28
   1341c:	b	13480 <close_stdout@@Base+0xc28>
   13420:	cmp	r7, #0
   13424:	bne	138c0 <close_stdout@@Base+0x1068>
   13428:	add	ip, r9, #1
   1342c:	cmp	r9, sl
   13430:	strbcc	r0, [r3, r9]
   13434:	cmp	sl, ip
   13438:	lsrhi	r8, r4, #6
   1343c:	addhi	r8, r8, #48	; 0x30
   13440:	strbhi	r8, [r3, ip]
   13444:	add	ip, r9, #2
   13448:	add	r9, r9, #3
   1344c:	cmp	sl, ip
   13450:	ubfxhi	r8, r4, #3, #3
   13454:	and	r4, r4, #7
   13458:	add	r4, r4, #48	; 0x30
   1345c:	addhi	r8, r8, #48	; 0x30
   13460:	strbhi	r8, [r3, ip]
   13464:	add	fp, fp, #1
   13468:	cmp	r1, fp
   1346c:	bls	134ac <close_stdout@@Base+0xc54>
   13470:	cmp	r9, sl
   13474:	strbcc	r4, [r3, r9]
   13478:	ldrb	r4, [r5, #1]!
   1347c:	add	r9, r9, #1
   13480:	cmp	r2, #0
   13484:	bne	13420 <close_stdout@@Base+0xbc8>
   13488:	cmp	r6, #0
   1348c:	beq	13464 <close_stdout@@Base+0xc0c>
   13490:	add	fp, fp, #1
   13494:	cmp	r9, sl
   13498:	strbcc	r0, [r3, r9]
   1349c:	cmp	r1, fp
   134a0:	add	r9, r9, #1
   134a4:	mov	r6, #0
   134a8:	bhi	13470 <close_stdout@@Base+0xc18>
   134ac:	ldr	r8, [sp, #60]	; 0x3c
   134b0:	b	1312c <close_stdout@@Base+0x8d4>
   134b4:	ldr	r3, [sp, #36]	; 0x24
   134b8:	cmp	r3, #0
   134bc:	bne	139c0 <close_stdout@@Base+0x1168>
   134c0:	cmp	sl, #0
   134c4:	beq	138d8 <close_stdout@@Base+0x1080>
   134c8:	ldr	r1, [sp, #40]	; 0x28
   134cc:	mov	r0, #1
   134d0:	ldr	r2, [pc, #1296]	; 139e8 <close_stdout@@Base+0x1190>
   134d4:	mov	r3, #34	; 0x22
   134d8:	str	r0, [sp, #24]
   134dc:	mov	r9, r0
   134e0:	add	r2, pc, r2
   134e4:	str	r0, [sp, #28]
   134e8:	strb	r3, [r1]
   134ec:	str	r2, [sp, #52]	; 0x34
   134f0:	b	12d9c <close_stdout@@Base+0x544>
   134f4:	ldr	r3, [pc, #1264]	; 139ec <close_stdout@@Base+0x1194>
   134f8:	mov	r2, #1
   134fc:	mov	r0, #3
   13500:	str	r2, [sp, #36]	; 0x24
   13504:	add	r3, pc, r3
   13508:	str	r2, [sp, #24]
   1350c:	str	r3, [sp, #52]	; 0x34
   13510:	mov	r9, #0
   13514:	str	r2, [sp, #28]
   13518:	str	r0, [sp, #160]	; 0xa0
   1351c:	b	12d9c <close_stdout@@Base+0x544>
   13520:	mov	r0, #0
   13524:	mov	r1, #1
   13528:	str	r0, [sp, #36]	; 0x24
   1352c:	mov	r9, r0
   13530:	str	r1, [sp, #24]
   13534:	str	r0, [sp, #28]
   13538:	str	r0, [sp, #52]	; 0x34
   1353c:	b	12d9c <close_stdout@@Base+0x544>
   13540:	ldr	r3, [sp, #160]	; 0xa0
   13544:	cmp	r3, #8
   13548:	beq	13574 <close_stdout@@Base+0xd1c>
   1354c:	ldr	r0, [pc, #1180]	; 139f0 <close_stdout@@Base+0x1198>
   13550:	mov	r1, r3
   13554:	add	r0, pc, r0
   13558:	bl	12b84 <close_stdout@@Base+0x32c>
   1355c:	ldr	r1, [sp, #160]	; 0xa0
   13560:	str	r0, [sp, #72]	; 0x48
   13564:	ldr	r0, [pc, #1160]	; 139f4 <close_stdout@@Base+0x119c>
   13568:	add	r0, pc, r0
   1356c:	bl	12b84 <close_stdout@@Base+0x32c>
   13570:	str	r0, [sp, #68]	; 0x44
   13574:	ldr	r0, [sp, #36]	; 0x24
   13578:	cmp	r0, #0
   1357c:	movne	r9, #0
   13580:	bne	135b8 <close_stdout@@Base+0xd60>
   13584:	ldr	r1, [sp, #72]	; 0x48
   13588:	ldrb	r3, [r1]
   1358c:	cmp	r3, #0
   13590:	beq	13990 <close_stdout@@Base+0x1138>
   13594:	mov	r2, r1
   13598:	ldr	r1, [sp, #40]	; 0x28
   1359c:	mov	r9, r0
   135a0:	cmp	r9, sl
   135a4:	strbcc	r3, [r1, r9]
   135a8:	ldrb	r3, [r2, #1]!
   135ac:	add	r9, r9, #1
   135b0:	cmp	r3, #0
   135b4:	bne	135a0 <close_stdout@@Base+0xd48>
   135b8:	ldr	r0, [sp, #68]	; 0x44
   135bc:	str	r0, [sp, #52]	; 0x34
   135c0:	bl	111a8 <strlen@plt>
   135c4:	mov	r2, #1
   135c8:	str	r2, [sp, #24]
   135cc:	str	r0, [sp, #28]
   135d0:	b	12d9c <close_stdout@@Base+0x544>
   135d4:	ldr	r3, [pc, #1052]	; 139f8 <close_stdout@@Base+0x11a0>
   135d8:	mov	r2, #0
   135dc:	mov	r1, #1
   135e0:	mov	r0, #2
   135e4:	add	r3, pc, r3
   135e8:	str	r1, [sp, #36]	; 0x24
   135ec:	str	r2, [sp, #24]
   135f0:	mov	r9, r2
   135f4:	str	r1, [sp, #28]
   135f8:	str	r3, [sp, #52]	; 0x34
   135fc:	str	r0, [sp, #160]	; 0xa0
   13600:	b	12d9c <close_stdout@@Base+0x544>
   13604:	ldr	r3, [sp, #36]	; 0x24
   13608:	cmp	r3, #0
   1360c:	bne	1399c <close_stdout@@Base+0x1144>
   13610:	cmp	sl, #0
   13614:	beq	138f8 <close_stdout@@Base+0x10a0>
   13618:	ldr	r1, [sp, #40]	; 0x28
   1361c:	mov	r3, #39	; 0x27
   13620:	ldr	r2, [sp, #36]	; 0x24
   13624:	mov	r0, #1
   13628:	mov	r9, r0
   1362c:	str	r0, [sp, #28]
   13630:	strb	r3, [r1]
   13634:	ldr	r3, [pc, #960]	; 139fc <close_stdout@@Base+0x11a4>
   13638:	str	r2, [sp, #24]
   1363c:	add	r3, pc, r3
   13640:	str	r3, [sp, #52]	; 0x34
   13644:	b	12d9c <close_stdout@@Base+0x544>
   13648:	ldr	r2, [sp, #28]
   1364c:	cmp	r2, #1
   13650:	add	r4, fp, r2
   13654:	movls	r3, #0
   13658:	movhi	r3, #1
   1365c:	cmn	r8, #1
   13660:	movne	r3, #0
   13664:	cmp	r3, #0
   13668:	beq	13678 <close_stdout@@Base+0xe20>
   1366c:	ldr	r0, [sp, #32]
   13670:	bl	111a8 <strlen@plt>
   13674:	mov	r8, r0
   13678:	cmp	r8, r4
   1367c:	ldrcc	r3, [sp, #32]
   13680:	movcc	r6, #0
   13684:	addcc	r5, r3, fp
   13688:	bcc	12df8 <close_stdout@@Base+0x5a0>
   1368c:	ldr	r0, [sp, #32]
   13690:	ldr	r1, [sp, #52]	; 0x34
   13694:	add	r5, r0, fp
   13698:	ldr	r2, [sp, #28]
   1369c:	mov	r0, r5
   136a0:	bl	110a0 <memcmp@plt>
   136a4:	cmp	r0, #0
   136a8:	bne	136c0 <close_stdout@@Base+0xe68>
   136ac:	ldr	r1, [sp, #36]	; 0x24
   136b0:	cmp	r1, #0
   136b4:	bne	13218 <close_stdout@@Base+0x9c0>
   136b8:	mov	r6, #1
   136bc:	b	12df8 <close_stdout@@Base+0x5a0>
   136c0:	mov	r6, #0
   136c4:	b	12df8 <close_stdout@@Base+0x5a0>
   136c8:	add	r7, sp, #108	; 0x6c
   136cc:	cmn	r8, #1
   136d0:	mov	r3, #0
   136d4:	str	r3, [sp, #108]	; 0x6c
   136d8:	str	r3, [r7, #4]
   136dc:	beq	138c8 <close_stdout@@Base+0x1070>
   136e0:	mov	r1, #0
   136e4:	ldr	r0, [sp, #32]
   136e8:	mov	ip, #1
   136ec:	str	r9, [sp, #88]	; 0x58
   136f0:	str	r6, [sp, #96]	; 0x60
   136f4:	mov	r9, r1
   136f8:	str	r5, [sp, #100]	; 0x64
   136fc:	mov	r6, ip
   13700:	mov	r5, r7
   13704:	add	r3, sp, #104	; 0x68
   13708:	sub	r0, r0, #1
   1370c:	str	r3, [sp, #80]	; 0x50
   13710:	str	r0, [sp, #84]	; 0x54
   13714:	str	r1, [sp, #60]	; 0x3c
   13718:	str	r4, [sp, #92]	; 0x5c
   1371c:	ldr	r2, [sp, #32]
   13720:	add	r7, r9, fp
   13724:	add	r0, sp, #104	; 0x68
   13728:	mov	r3, r5
   1372c:	add	r4, r2, r7
   13730:	rsb	r2, r7, r8
   13734:	mov	r1, r4
   13738:	bl	11124 <mbrtowc@plt>
   1373c:	subs	r2, r0, #0
   13740:	beq	1384c <close_stdout@@Base+0xff4>
   13744:	cmn	r2, #1
   13748:	beq	13974 <close_stdout@@Base+0x111c>
   1374c:	cmn	r2, #2
   13750:	beq	13918 <close_stdout@@Base+0x10c0>
   13754:	ldr	r3, [sp, #36]	; 0x24
   13758:	ldr	r0, [sp, #160]	; 0xa0
   1375c:	cmp	r0, #2
   13760:	movne	r3, #0
   13764:	andeq	r3, r3, #1
   13768:	cmp	r3, #0
   1376c:	beq	13828 <close_stdout@@Base+0xfd0>
   13770:	cmp	r2, #1
   13774:	beq	13828 <close_stdout@@Base+0xfd0>
   13778:	ldr	r1, [sp, #84]	; 0x54
   1377c:	add	r3, r1, r2
   13780:	add	r7, r3, r7
   13784:	ldrb	r3, [r4, #1]!
   13788:	sub	r3, r3, #91	; 0x5b
   1378c:	cmp	r3, #33	; 0x21
   13790:	addls	pc, pc, r3, lsl #2
   13794:	b	13820 <close_stdout@@Base+0xfc8>
   13798:	b	13218 <close_stdout@@Base+0x9c0>
   1379c:	b	13218 <close_stdout@@Base+0x9c0>
   137a0:	b	13820 <close_stdout@@Base+0xfc8>
   137a4:	b	13218 <close_stdout@@Base+0x9c0>
   137a8:	b	13820 <close_stdout@@Base+0xfc8>
   137ac:	b	13218 <close_stdout@@Base+0x9c0>
   137b0:	b	13820 <close_stdout@@Base+0xfc8>
   137b4:	b	13820 <close_stdout@@Base+0xfc8>
   137b8:	b	13820 <close_stdout@@Base+0xfc8>
   137bc:	b	13820 <close_stdout@@Base+0xfc8>
   137c0:	b	13820 <close_stdout@@Base+0xfc8>
   137c4:	b	13820 <close_stdout@@Base+0xfc8>
   137c8:	b	13820 <close_stdout@@Base+0xfc8>
   137cc:	b	13820 <close_stdout@@Base+0xfc8>
   137d0:	b	13820 <close_stdout@@Base+0xfc8>
   137d4:	b	13820 <close_stdout@@Base+0xfc8>
   137d8:	b	13820 <close_stdout@@Base+0xfc8>
   137dc:	b	13820 <close_stdout@@Base+0xfc8>
   137e0:	b	13820 <close_stdout@@Base+0xfc8>
   137e4:	b	13820 <close_stdout@@Base+0xfc8>
   137e8:	b	13820 <close_stdout@@Base+0xfc8>
   137ec:	b	13820 <close_stdout@@Base+0xfc8>
   137f0:	b	13820 <close_stdout@@Base+0xfc8>
   137f4:	b	13820 <close_stdout@@Base+0xfc8>
   137f8:	b	13820 <close_stdout@@Base+0xfc8>
   137fc:	b	13820 <close_stdout@@Base+0xfc8>
   13800:	b	13820 <close_stdout@@Base+0xfc8>
   13804:	b	13820 <close_stdout@@Base+0xfc8>
   13808:	b	13820 <close_stdout@@Base+0xfc8>
   1380c:	b	13820 <close_stdout@@Base+0xfc8>
   13810:	b	13820 <close_stdout@@Base+0xfc8>
   13814:	b	13820 <close_stdout@@Base+0xfc8>
   13818:	b	13820 <close_stdout@@Base+0xfc8>
   1381c:	b	13218 <close_stdout@@Base+0x9c0>
   13820:	cmp	r4, r7
   13824:	bne	13784 <close_stdout@@Base+0xf2c>
   13828:	ldr	r0, [sp, #104]	; 0x68
   1382c:	add	r9, r9, r2
   13830:	bl	110dc <iswprint@plt>
   13834:	cmp	r0, #0
   13838:	mov	r0, r5
   1383c:	moveq	r6, #0
   13840:	bl	11088 <mbsinit@plt>
   13844:	cmp	r0, #0
   13848:	beq	1371c <close_stdout@@Base+0xec4>
   1384c:	mov	ip, r6
   13850:	eor	r2, ip, #1
   13854:	str	r9, [sp, #60]	; 0x3c
   13858:	ldr	r4, [sp, #92]	; 0x5c
   1385c:	uxtb	r2, r2
   13860:	ldr	r9, [sp, #88]	; 0x58
   13864:	ldr	r6, [sp, #96]	; 0x60
   13868:	ldr	r5, [sp, #100]	; 0x64
   1386c:	ldr	r3, [sp, #60]	; 0x3c
   13870:	cmp	r3, #1
   13874:	bls	133f8 <close_stdout@@Base+0xba0>
   13878:	ldr	r0, [sp, #24]
   1387c:	and	r2, r2, r0
   13880:	b	13404 <close_stdout@@Base+0xbac>
   13884:	ldr	r2, [sp, #164]	; 0xa4
   13888:	tst	r2, #1
   1388c:	addne	fp, fp, #1
   13890:	bne	12dc0 <close_stdout@@Base+0x568>
   13894:	b	130d0 <close_stdout@@Base+0x878>
   13898:	ldr	r0, [sp, #36]	; 0x24
   1389c:	cmp	r0, #0
   138a0:	beq	130d0 <close_stdout@@Base+0x878>
   138a4:	b	13218 <close_stdout@@Base+0x9c0>
   138a8:	ldr	r2, [sp, #32]
   138ac:	ldrb	r3, [r2, #1]
   138b0:	adds	r3, r3, #0
   138b4:	movne	r3, #1
   138b8:	b	131ec <close_stdout@@Base+0x994>
   138bc:	bl	112b0 <abort@plt>
   138c0:	ldr	r8, [sp, #60]	; 0x3c
   138c4:	b	13218 <close_stdout@@Base+0x9c0>
   138c8:	ldr	r0, [sp, #32]
   138cc:	bl	111a8 <strlen@plt>
   138d0:	mov	r8, r0
   138d4:	b	136e0 <close_stdout@@Base+0xe88>
   138d8:	ldr	r2, [pc, #288]	; 13a00 <close_stdout@@Base+0x11a8>
   138dc:	mov	r1, #1
   138e0:	mov	r9, r1
   138e4:	str	r1, [sp, #24]
   138e8:	add	r2, pc, r2
   138ec:	str	r1, [sp, #28]
   138f0:	str	r2, [sp, #52]	; 0x34
   138f4:	b	12d9c <close_stdout@@Base+0x544>
   138f8:	ldr	r2, [pc, #260]	; 13a04 <close_stdout@@Base+0x11ac>
   138fc:	mov	r3, #1
   13900:	mov	r9, r3
   13904:	str	r3, [sp, #28]
   13908:	add	r2, pc, r2
   1390c:	str	sl, [sp, #24]
   13910:	str	r2, [sp, #52]	; 0x34
   13914:	b	12d9c <close_stdout@@Base+0x544>
   13918:	cmp	r8, r7
   1391c:	str	r9, [sp, #60]	; 0x3c
   13920:	mov	ip, r4
   13924:	ldr	r6, [sp, #96]	; 0x60
   13928:	ldr	r9, [sp, #88]	; 0x58
   1392c:	ldr	r4, [sp, #92]	; 0x5c
   13930:	ldr	r5, [sp, #100]	; 0x64
   13934:	bls	1396c <close_stdout@@Base+0x1114>
   13938:	ldrb	r3, [ip]
   1393c:	cmp	r3, #0
   13940:	beq	1396c <close_stdout@@Base+0x1114>
   13944:	ldr	r3, [sp, #60]	; 0x3c
   13948:	b	13958 <close_stdout@@Base+0x1100>
   1394c:	ldrb	r2, [r5, r3]
   13950:	cmp	r2, #0
   13954:	beq	13968 <close_stdout@@Base+0x1110>
   13958:	add	r3, r3, #1
   1395c:	add	r2, fp, r3
   13960:	cmp	r8, r2
   13964:	bhi	1394c <close_stdout@@Base+0x10f4>
   13968:	str	r3, [sp, #60]	; 0x3c
   1396c:	mov	r2, #1
   13970:	b	1386c <close_stdout@@Base+0x1014>
   13974:	str	r9, [sp, #60]	; 0x3c
   13978:	mov	r2, #1
   1397c:	ldr	r4, [sp, #92]	; 0x5c
   13980:	ldr	r6, [sp, #96]	; 0x60
   13984:	ldr	r9, [sp, #88]	; 0x58
   13988:	ldr	r5, [sp, #100]	; 0x64
   1398c:	b	1386c <close_stdout@@Base+0x1014>
   13990:	ldr	r9, [sp, #36]	; 0x24
   13994:	b	135b8 <close_stdout@@Base+0xd60>
   13998:	bl	110b8 <__stack_chk_fail@plt>
   1399c:	ldr	r1, [pc, #100]	; 13a08 <close_stdout@@Base+0x11b0>
   139a0:	mov	r3, #0
   139a4:	mov	r0, #1
   139a8:	str	r3, [sp, #24]
   139ac:	add	r1, pc, r1
   139b0:	str	r0, [sp, #28]
   139b4:	mov	r9, r3
   139b8:	str	r1, [sp, #52]	; 0x34
   139bc:	b	12d9c <close_stdout@@Base+0x544>
   139c0:	ldr	r0, [pc, #68]	; 13a0c <close_stdout@@Base+0x11b4>
   139c4:	mov	r3, #1
   139c8:	mov	r9, #0
   139cc:	str	r3, [sp, #24]
   139d0:	add	r0, pc, r0
   139d4:	str	r3, [sp, #28]
   139d8:	str	r0, [sp, #52]	; 0x34
   139dc:	b	12d9c <close_stdout@@Base+0x544>
   139e0:	strdeq	r5, [r1], -r4
   139e4:	andeq	r0, r0, r4, lsl #2
   139e8:	muleq	r0, ip, r6
   139ec:	andeq	r3, r0, r8, ror r6
   139f0:	andeq	r3, r0, r4, lsr r6
   139f4:	andeq	r3, r0, r0, lsl r6
   139f8:	muleq	r0, r4, r5
   139fc:	andeq	r3, r0, ip, lsr r5
   13a00:	muleq	r0, r4, r2
   13a04:	andeq	r3, r0, r0, ror r2
   13a08:	andeq	r3, r0, ip, asr #3
   13a0c:	andeq	r3, r0, ip, lsr #3
   13a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a14:	sub	sp, sp, #44	; 0x2c
   13a18:	mov	r6, r0
   13a1c:	mov	r9, r1
   13a20:	mov	sl, r2
   13a24:	mov	r4, r3
   13a28:	bl	111cc <__errno_location@plt>
   13a2c:	ldr	fp, [pc, #412]	; 13bd0 <close_stdout@@Base+0x1378>
   13a30:	cmp	r6, #0
   13a34:	add	fp, pc, fp
   13a38:	ldr	r5, [fp]
   13a3c:	ldr	r1, [r0]
   13a40:	mov	r8, r0
   13a44:	str	r1, [sp, #36]	; 0x24
   13a48:	blt	13bc8 <close_stdout@@Base+0x1370>
   13a4c:	ldr	r3, [pc, #384]	; 13bd4 <close_stdout@@Base+0x137c>
   13a50:	add	r3, pc, r3
   13a54:	ldr	r3, [r3]
   13a58:	cmp	r6, r3
   13a5c:	bcc	13ab0 <close_stdout@@Base+0x1258>
   13a60:	add	r7, r6, #1
   13a64:	cmn	r7, #-536870911	; 0xe0000001
   13a68:	bhi	13bcc <close_stdout@@Base+0x1374>
   13a6c:	add	r3, fp, #4
   13a70:	cmp	r5, r3
   13a74:	beq	13ba0 <close_stdout@@Base+0x1348>
   13a78:	mov	r0, r5
   13a7c:	lsl	r1, r7, #3
   13a80:	bl	148a8 <close_stdout@@Base+0x2050>
   13a84:	mov	r5, r0
   13a88:	str	r0, [fp]
   13a8c:	ldr	fp, [pc, #324]	; 13bd8 <close_stdout@@Base+0x1380>
   13a90:	mov	r1, #0
   13a94:	add	fp, pc, fp
   13a98:	ldr	r0, [fp]
   13a9c:	rsb	r2, r0, r7
   13aa0:	add	r0, r5, r0, lsl #3
   13aa4:	lsl	r2, r2, #3
   13aa8:	bl	111e4 <memset@plt>
   13aac:	str	r7, [fp]
   13ab0:	add	r2, r4, #8
   13ab4:	str	r2, [sp, #32]
   13ab8:	ldr	r1, [r4]
   13abc:	add	fp, r5, r6, lsl #3
   13ac0:	ldr	lr, [sp, #32]
   13ac4:	mov	r2, r9
   13ac8:	ldr	r3, [r4, #4]
   13acc:	ldr	ip, [r5, r6, lsl #3]
   13ad0:	ldr	r7, [fp, #4]
   13ad4:	orr	r3, r3, #1
   13ad8:	str	r1, [sp]
   13adc:	str	r3, [sp, #4]
   13ae0:	mov	r1, ip
   13ae4:	str	lr, [sp, #8]
   13ae8:	mov	r0, r7
   13aec:	ldr	lr, [r4, #40]	; 0x28
   13af0:	str	r3, [sp, #28]
   13af4:	mov	r3, sl
   13af8:	str	lr, [sp, #12]
   13afc:	ldr	lr, [r4, #44]	; 0x2c
   13b00:	str	ip, [sp, #24]
   13b04:	str	lr, [sp, #16]
   13b08:	bl	12ce8 <close_stdout@@Base+0x490>
   13b0c:	ldr	ip, [sp, #24]
   13b10:	cmp	ip, r0
   13b14:	bhi	13b8c <close_stdout@@Base+0x1334>
   13b18:	ldr	r3, [pc, #188]	; 13bdc <close_stdout@@Base+0x1384>
   13b1c:	add	r1, r0, #1
   13b20:	str	r1, [r5, r6, lsl #3]
   13b24:	add	r3, pc, r3
   13b28:	cmp	r7, r3
   13b2c:	beq	13b40 <close_stdout@@Base+0x12e8>
   13b30:	mov	r0, r7
   13b34:	str	r1, [sp, #24]
   13b38:	bl	11058 <free@plt>
   13b3c:	ldr	r1, [sp, #24]
   13b40:	mov	r0, r1
   13b44:	str	r1, [sp, #24]
   13b48:	bl	14850 <close_stdout@@Base+0x1ff8>
   13b4c:	ldr	r3, [sp, #28]
   13b50:	ldr	lr, [sp, #32]
   13b54:	mov	r2, r9
   13b58:	str	r0, [fp, #4]
   13b5c:	mov	r7, r0
   13b60:	ldr	ip, [r4]
   13b64:	str	r3, [sp, #4]
   13b68:	mov	r3, sl
   13b6c:	str	lr, [sp, #8]
   13b70:	str	ip, [sp]
   13b74:	ldr	ip, [r4, #40]	; 0x28
   13b78:	ldr	r1, [sp, #24]
   13b7c:	str	ip, [sp, #12]
   13b80:	ldr	ip, [r4, #44]	; 0x2c
   13b84:	str	ip, [sp, #16]
   13b88:	bl	12ce8 <close_stdout@@Base+0x490>
   13b8c:	ldr	r1, [sp, #36]	; 0x24
   13b90:	mov	r0, r7
   13b94:	str	r1, [r8]
   13b98:	add	sp, sp, #44	; 0x2c
   13b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba0:	lsl	r1, r7, #3
   13ba4:	mov	r0, #0
   13ba8:	str	r3, [sp, #24]
   13bac:	bl	148a8 <close_stdout@@Base+0x2050>
   13bb0:	ldr	r3, [sp, #24]
   13bb4:	mov	r5, r0
   13bb8:	ldm	r3, {r0, r1}
   13bbc:	str	r5, [fp]
   13bc0:	stm	r5, {r0, r1}
   13bc4:	b	13a8c <close_stdout@@Base+0x1234>
   13bc8:	bl	112b0 <abort@plt>
   13bcc:	bl	14a64 <close_stdout@@Base+0x220c>
   13bd0:	andeq	r4, r1, r4, asr #14
   13bd4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13bd8:			; <UNDEFINED> instruction: 0x000146b0
   13bdc:	andeq	r4, r1, r0, ror r6
   13be0:	push	{r4, r5, r6, lr}
   13be4:	mov	r5, r0
   13be8:	bl	111cc <__errno_location@plt>
   13bec:	cmp	r5, #0
   13bf0:	mov	r1, #48	; 0x30
   13bf4:	mov	r4, r0
   13bf8:	ldr	r0, [pc, #24]	; 13c18 <close_stdout@@Base+0x13c0>
   13bfc:	ldr	r6, [r4]
   13c00:	add	r0, pc, r0
   13c04:	add	r0, r0, #256	; 0x100
   13c08:	movne	r0, r5
   13c0c:	bl	14a24 <close_stdout@@Base+0x21cc>
   13c10:	str	r6, [r4]
   13c14:	pop	{r4, r5, r6, pc}
   13c18:	muleq	r1, r4, r5
   13c1c:	cmp	r0, #0
   13c20:	beq	13c2c <close_stdout@@Base+0x13d4>
   13c24:	ldr	r0, [r0]
   13c28:	bx	lr
   13c2c:	ldr	r0, [pc, #12]	; 13c40 <close_stdout@@Base+0x13e8>
   13c30:	add	r0, pc, r0
   13c34:	add	r0, r0, #256	; 0x100
   13c38:	ldr	r0, [r0]
   13c3c:	bx	lr
   13c40:	andeq	r4, r1, r4, ror #10
   13c44:	cmp	r0, #0
   13c48:	beq	13c54 <close_stdout@@Base+0x13fc>
   13c4c:	str	r1, [r0]
   13c50:	bx	lr
   13c54:	ldr	r0, [pc, #12]	; 13c68 <close_stdout@@Base+0x1410>
   13c58:	add	r0, pc, r0
   13c5c:	add	r0, r0, #256	; 0x100
   13c60:	str	r1, [r0]
   13c64:	bx	lr
   13c68:	andeq	r4, r1, ip, lsr r5
   13c6c:	cmp	r0, #0
   13c70:	movne	r3, r0
   13c74:	beq	13ca4 <close_stdout@@Base+0x144c>
   13c78:	lsr	ip, r1, #5
   13c7c:	and	r1, r1, #31
   13c80:	add	r3, r3, ip, lsl #2
   13c84:	ldr	ip, [r3, #8]
   13c88:	lsr	r0, ip, r1
   13c8c:	eor	r2, r0, r2
   13c90:	and	r0, r0, #1
   13c94:	and	r2, r2, #1
   13c98:	eor	ip, ip, r2, lsl r1
   13c9c:	str	ip, [r3, #8]
   13ca0:	bx	lr
   13ca4:	ldr	r3, [pc, #8]	; 13cb4 <close_stdout@@Base+0x145c>
   13ca8:	add	r3, pc, r3
   13cac:	add	r3, r3, #256	; 0x100
   13cb0:	b	13c78 <close_stdout@@Base+0x1420>
   13cb4:	andeq	r4, r1, ip, ror #9
   13cb8:	subs	r3, r0, #0
   13cbc:	beq	13ccc <close_stdout@@Base+0x1474>
   13cc0:	ldr	r0, [r3, #4]
   13cc4:	str	r1, [r3, #4]
   13cc8:	bx	lr
   13ccc:	ldr	r3, [pc, #8]	; 13cdc <close_stdout@@Base+0x1484>
   13cd0:	add	r3, pc, r3
   13cd4:	add	r3, r3, #256	; 0x100
   13cd8:	b	13cc0 <close_stdout@@Base+0x1468>
   13cdc:	andeq	r4, r1, r4, asr #9
   13ce0:	cmp	r0, #0
   13ce4:	push	{r3, lr}
   13ce8:	beq	13d0c <close_stdout@@Base+0x14b4>
   13cec:	cmp	r2, #0
   13cf0:	cmpne	r1, #0
   13cf4:	mov	r3, #8
   13cf8:	strne	r1, [r0, #40]	; 0x28
   13cfc:	str	r3, [r0]
   13d00:	strne	r2, [r0, #44]	; 0x2c
   13d04:	popne	{r3, pc}
   13d08:	bl	112b0 <abort@plt>
   13d0c:	ldr	r0, [pc, #8]	; 13d1c <close_stdout@@Base+0x14c4>
   13d10:	add	r0, pc, r0
   13d14:	add	r0, r0, #256	; 0x100
   13d18:	b	13cec <close_stdout@@Base+0x1494>
   13d1c:	andeq	r4, r1, r4, lsl #9
   13d20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d24:	sub	sp, sp, #24
   13d28:	mov	r7, r0
   13d2c:	mov	sl, r1
   13d30:	ldr	r4, [sp, #56]	; 0x38
   13d34:	mov	r9, r2
   13d38:	mov	r8, r3
   13d3c:	cmp	r4, #0
   13d40:	beq	13d94 <close_stdout@@Base+0x153c>
   13d44:	bl	111cc <__errno_location@plt>
   13d48:	ldr	r3, [r4]
   13d4c:	add	lr, r4, #8
   13d50:	mov	r1, sl
   13d54:	mov	r2, r9
   13d58:	ldr	r6, [r0]
   13d5c:	mov	r5, r0
   13d60:	str	r3, [sp]
   13d64:	mov	r0, r7
   13d68:	ldr	ip, [r4, #4]
   13d6c:	mov	r3, r8
   13d70:	stmib	sp, {ip, lr}
   13d74:	ldr	ip, [r4, #40]	; 0x28
   13d78:	str	ip, [sp, #12]
   13d7c:	ldr	ip, [r4, #44]	; 0x2c
   13d80:	str	ip, [sp, #16]
   13d84:	bl	12ce8 <close_stdout@@Base+0x490>
   13d88:	str	r6, [r5]
   13d8c:	add	sp, sp, #24
   13d90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d94:	ldr	r4, [pc, #8]	; 13da4 <close_stdout@@Base+0x154c>
   13d98:	add	r4, pc, r4
   13d9c:	add	r4, r4, #256	; 0x100
   13da0:	b	13d44 <close_stdout@@Base+0x14ec>
   13da4:	strdeq	r4, [r1], -ip
   13da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dac:	subs	r4, r3, #0
   13db0:	sub	sp, sp, #36	; 0x24
   13db4:	mov	r7, r0
   13db8:	mov	r6, r1
   13dbc:	mov	r5, r2
   13dc0:	beq	13e7c <close_stdout@@Base+0x1624>
   13dc4:	bl	111cc <__errno_location@plt>
   13dc8:	ldr	r3, [r4]
   13dcc:	ldr	sl, [r4, #4]
   13dd0:	add	r9, r4, #8
   13dd4:	mov	r8, r0
   13dd8:	mov	r0, #0
   13ddc:	ldr	r2, [r8]
   13de0:	cmp	r5, r0
   13de4:	orreq	sl, sl, #1
   13de8:	str	r9, [sp, #8]
   13dec:	mov	r1, r0
   13df0:	stm	sp, {r3, sl}
   13df4:	mov	r3, r6
   13df8:	ldr	ip, [r4, #40]	; 0x28
   13dfc:	str	r2, [sp, #28]
   13e00:	mov	r2, r7
   13e04:	str	ip, [sp, #12]
   13e08:	ldr	ip, [r4, #44]	; 0x2c
   13e0c:	str	ip, [sp, #16]
   13e10:	bl	12ce8 <close_stdout@@Base+0x490>
   13e14:	add	r1, r0, #1
   13e18:	mov	fp, r0
   13e1c:	str	r1, [sp, #24]
   13e20:	mov	r0, r1
   13e24:	bl	14850 <close_stdout@@Base+0x1ff8>
   13e28:	ldr	lr, [r4]
   13e2c:	str	sl, [sp, #4]
   13e30:	mov	r3, r6
   13e34:	str	r9, [sp, #8]
   13e38:	mov	r2, r7
   13e3c:	str	lr, [sp]
   13e40:	ldr	lr, [r4, #40]	; 0x28
   13e44:	ldr	r1, [sp, #24]
   13e48:	str	lr, [sp, #12]
   13e4c:	ldr	lr, [r4, #44]	; 0x2c
   13e50:	str	lr, [sp, #16]
   13e54:	str	r0, [sp, #24]
   13e58:	bl	12ce8 <close_stdout@@Base+0x490>
   13e5c:	ldr	r3, [sp, #28]
   13e60:	cmp	r5, #0
   13e64:	str	r3, [r8]
   13e68:	ldr	ip, [sp, #24]
   13e6c:	strne	fp, [r5]
   13e70:	mov	r0, ip
   13e74:	add	sp, sp, #36	; 0x24
   13e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e7c:	ldr	r4, [pc, #8]	; 13e8c <close_stdout@@Base+0x1634>
   13e80:	add	r4, pc, r4
   13e84:	add	r4, r4, #256	; 0x100
   13e88:	b	13dc4 <close_stdout@@Base+0x156c>
   13e8c:	andeq	r4, r1, r4, lsl r3
   13e90:	mov	r3, r2
   13e94:	mov	r2, #0
   13e98:	b	13da8 <close_stdout@@Base+0x1550>
   13e9c:	ldr	r2, [pc, #152]	; 13f3c <close_stdout@@Base+0x16e4>
   13ea0:	push	{r3, r4, r5, r6, r7, lr}
   13ea4:	add	r2, pc, r2
   13ea8:	ldr	r3, [pc, #144]	; 13f40 <close_stdout@@Base+0x16e8>
   13eac:	ldr	r6, [r2]
   13eb0:	add	r3, pc, r3
   13eb4:	cmp	r6, #1
   13eb8:	ldr	r7, [r3]
   13ebc:	movhi	r4, #1
   13ec0:	movhi	r5, r7
   13ec4:	bls	13ee0 <close_stdout@@Base+0x1688>
   13ec8:	ldr	r0, [r5, #12]
   13ecc:	add	r4, r4, #1
   13ed0:	bl	11058 <free@plt>
   13ed4:	cmp	r4, r6
   13ed8:	add	r5, r5, #8
   13edc:	bne	13ec8 <close_stdout@@Base+0x1670>
   13ee0:	ldr	r4, [pc, #92]	; 13f44 <close_stdout@@Base+0x16ec>
   13ee4:	ldr	r0, [r7, #4]
   13ee8:	add	r4, pc, r4
   13eec:	cmp	r0, r4
   13ef0:	beq	13f08 <close_stdout@@Base+0x16b0>
   13ef4:	bl	11058 <free@plt>
   13ef8:	ldr	r3, [pc, #72]	; 13f48 <close_stdout@@Base+0x16f0>
   13efc:	mov	r2, #256	; 0x100
   13f00:	add	r3, pc, r3
   13f04:	stmib	r3, {r2, r4}
   13f08:	ldr	r4, [pc, #60]	; 13f4c <close_stdout@@Base+0x16f4>
   13f0c:	add	r4, pc, r4
   13f10:	add	r5, r4, #4
   13f14:	cmp	r7, r5
   13f18:	beq	13f28 <close_stdout@@Base+0x16d0>
   13f1c:	mov	r0, r7
   13f20:	bl	11058 <free@plt>
   13f24:	str	r5, [r4]
   13f28:	ldr	r3, [pc, #32]	; 13f50 <close_stdout@@Base+0x16f8>
   13f2c:	mov	r2, #1
   13f30:	add	r3, pc, r3
   13f34:	str	r2, [r3]
   13f38:	pop	{r3, r4, r5, r6, r7, pc}
   13f3c:	andeq	r4, r1, r0, lsr #5
   13f40:	andeq	r4, r1, r8, asr #5
   13f44:	andeq	r4, r1, ip, lsr #5
   13f48:	andeq	r4, r1, r8, ror r2
   13f4c:	andeq	r4, r1, ip, ror #4
   13f50:	andeq	r4, r1, r4, lsl r2
   13f54:	ldr	r3, [pc, #12]	; 13f68 <close_stdout@@Base+0x1710>
   13f58:	mvn	r2, #0
   13f5c:	add	r3, pc, r3
   13f60:	add	r3, r3, #256	; 0x100
   13f64:	b	13a10 <close_stdout@@Base+0x11b8>
   13f68:	andeq	r4, r1, r8, lsr r2
   13f6c:	ldr	r3, [pc, #8]	; 13f7c <close_stdout@@Base+0x1724>
   13f70:	add	r3, pc, r3
   13f74:	add	r3, r3, #256	; 0x100
   13f78:	b	13a10 <close_stdout@@Base+0x11b8>
   13f7c:	andeq	r4, r1, r4, lsr #4
   13f80:	mov	r1, r0
   13f84:	mov	r0, #0
   13f88:	b	13f54 <close_stdout@@Base+0x16fc>
   13f8c:	mov	r2, r1
   13f90:	mov	r1, r0
   13f94:	mov	r0, #0
   13f98:	b	13f6c <close_stdout@@Base+0x1714>
   13f9c:	ldr	r3, [pc, #92]	; 14000 <close_stdout@@Base+0x17a8>
   13fa0:	ldr	ip, [pc, #92]	; 14004 <close_stdout@@Base+0x17ac>
   13fa4:	add	r3, pc, r3
   13fa8:	push	{r4, r5, r6, r7, lr}
   13fac:	sub	sp, sp, #60	; 0x3c
   13fb0:	ldr	r4, [r3, ip]
   13fb4:	add	r5, sp, #4
   13fb8:	mov	r7, r2
   13fbc:	mov	r6, r0
   13fc0:	mov	r0, r5
   13fc4:	ldr	r3, [r4]
   13fc8:	str	r3, [sp, #52]	; 0x34
   13fcc:	bl	12b30 <close_stdout@@Base+0x2d8>
   13fd0:	mov	r3, r5
   13fd4:	mvn	r2, #0
   13fd8:	mov	r0, r6
   13fdc:	mov	r1, r7
   13fe0:	bl	13a10 <close_stdout@@Base+0x11b8>
   13fe4:	ldr	r2, [sp, #52]	; 0x34
   13fe8:	ldr	r3, [r4]
   13fec:	cmp	r2, r3
   13ff0:	bne	13ffc <close_stdout@@Base+0x17a4>
   13ff4:	add	sp, sp, #60	; 0x3c
   13ff8:	pop	{r4, r5, r6, r7, pc}
   13ffc:	bl	110b8 <__stack_chk_fail@plt>
   14000:	andeq	r4, r1, r4, asr r0
   14004:	andeq	r0, r0, r4, lsl #2
   14008:	ldr	ip, [pc, #96]	; 14070 <close_stdout@@Base+0x1818>
   1400c:	push	{r4, r5, r6, r7, r8, lr}
   14010:	add	ip, pc, ip
   14014:	ldr	lr, [pc, #88]	; 14074 <close_stdout@@Base+0x181c>
   14018:	sub	sp, sp, #56	; 0x38
   1401c:	mov	r8, r3
   14020:	add	r5, sp, #4
   14024:	mov	r7, r2
   14028:	mov	r6, r0
   1402c:	ldr	r4, [ip, lr]
   14030:	mov	r0, r5
   14034:	ldr	r3, [r4]
   14038:	str	r3, [sp, #52]	; 0x34
   1403c:	bl	12b30 <close_stdout@@Base+0x2d8>
   14040:	mov	r2, r8
   14044:	mov	r3, r5
   14048:	mov	r0, r6
   1404c:	mov	r1, r7
   14050:	bl	13a10 <close_stdout@@Base+0x11b8>
   14054:	ldr	r2, [sp, #52]	; 0x34
   14058:	ldr	r3, [r4]
   1405c:	cmp	r2, r3
   14060:	bne	1406c <close_stdout@@Base+0x1814>
   14064:	add	sp, sp, #56	; 0x38
   14068:	pop	{r4, r5, r6, r7, r8, pc}
   1406c:	bl	110b8 <__stack_chk_fail@plt>
   14070:	andeq	r3, r1, r8, ror #31
   14074:	andeq	r0, r0, r4, lsl #2
   14078:	mov	r2, r1
   1407c:	mov	r1, r0
   14080:	mov	r0, #0
   14084:	b	13f9c <close_stdout@@Base+0x1744>
   14088:	mov	ip, r1
   1408c:	mov	r3, r2
   14090:	mov	r1, r0
   14094:	mov	r2, ip
   14098:	mov	r0, #0
   1409c:	b	14008 <close_stdout@@Base+0x17b0>
   140a0:	push	{r4, r5, r6, r7, r8, lr}
   140a4:	mov	r5, r2
   140a8:	ldr	lr, [pc, #136]	; 14138 <close_stdout@@Base+0x18e0>
   140ac:	mov	r7, r0
   140b0:	mov	r6, r1
   140b4:	ldr	r4, [pc, #128]	; 1413c <close_stdout@@Base+0x18e4>
   140b8:	add	lr, pc, lr
   140bc:	sub	sp, sp, #56	; 0x38
   140c0:	add	lr, lr, #256	; 0x100
   140c4:	ldr	r8, [pc, #116]	; 14140 <close_stdout@@Base+0x18e8>
   140c8:	add	r4, pc, r4
   140cc:	add	ip, sp, #4
   140d0:	ldm	lr!, {r0, r1, r2, r3}
   140d4:	ldr	r4, [r4, r8]
   140d8:	stmia	ip!, {r0, r1, r2, r3}
   140dc:	ldm	lr!, {r0, r1, r2, r3}
   140e0:	ldr	r8, [r4]
   140e4:	stmia	ip!, {r0, r1, r2, r3}
   140e8:	ldm	lr, {r0, r1, r2, r3}
   140ec:	str	r8, [sp, #52]	; 0x34
   140f0:	stm	ip, {r0, r1, r2, r3}
   140f4:	mov	r1, r5
   140f8:	add	r5, sp, #4
   140fc:	mov	r2, #1
   14100:	mov	r0, r5
   14104:	bl	13c6c <close_stdout@@Base+0x1414>
   14108:	mov	r2, r6
   1410c:	mov	r3, r5
   14110:	mov	r1, r7
   14114:	mov	r0, #0
   14118:	bl	13a10 <close_stdout@@Base+0x11b8>
   1411c:	ldr	r2, [sp, #52]	; 0x34
   14120:	ldr	r3, [r4]
   14124:	cmp	r2, r3
   14128:	bne	14134 <close_stdout@@Base+0x18dc>
   1412c:	add	sp, sp, #56	; 0x38
   14130:	pop	{r4, r5, r6, r7, r8, pc}
   14134:	bl	110b8 <__stack_chk_fail@plt>
   14138:	ldrdeq	r4, [r1], -ip
   1413c:	andeq	r3, r1, r0, lsr pc
   14140:	andeq	r0, r0, r4, lsl #2
   14144:	mov	r2, r1
   14148:	mvn	r1, #0
   1414c:	b	140a0 <close_stdout@@Base+0x1848>
   14150:	mov	r1, #58	; 0x3a
   14154:	b	14144 <close_stdout@@Base+0x18ec>
   14158:	mov	r2, #58	; 0x3a
   1415c:	b	140a0 <close_stdout@@Base+0x1848>
   14160:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14164:	mov	r5, r2
   14168:	ldr	lr, [pc, #144]	; 14200 <close_stdout@@Base+0x19a8>
   1416c:	mov	r8, r0
   14170:	mov	r9, r1
   14174:	mov	r7, r3
   14178:	add	lr, pc, lr
   1417c:	ldr	r4, [pc, #128]	; 14204 <close_stdout@@Base+0x19ac>
   14180:	add	lr, lr, #256	; 0x100
   14184:	sub	sp, sp, #56	; 0x38
   14188:	ldr	sl, [pc, #120]	; 14208 <close_stdout@@Base+0x19b0>
   1418c:	add	r4, pc, r4
   14190:	ldm	lr!, {r0, r1, r2, r3}
   14194:	add	ip, sp, #4
   14198:	ldr	r4, [r4, sl]
   1419c:	ldr	r6, [sp, #88]	; 0x58
   141a0:	stmia	ip!, {r0, r1, r2, r3}
   141a4:	ldm	lr!, {r0, r1, r2, r3}
   141a8:	ldr	sl, [r4]
   141ac:	stmia	ip!, {r0, r1, r2, r3}
   141b0:	ldm	lr, {r0, r1, r2, r3}
   141b4:	str	sl, [sp, #52]	; 0x34
   141b8:	stm	ip, {r0, r1, r2, r3}
   141bc:	mov	r2, r5
   141c0:	add	r5, sp, #4
   141c4:	mov	r1, r9
   141c8:	mov	r0, r5
   141cc:	bl	13ce0 <close_stdout@@Base+0x1488>
   141d0:	mov	r2, r6
   141d4:	mov	r3, r5
   141d8:	mov	r0, r8
   141dc:	mov	r1, r7
   141e0:	bl	13a10 <close_stdout@@Base+0x11b8>
   141e4:	ldr	r2, [sp, #52]	; 0x34
   141e8:	ldr	r3, [r4]
   141ec:	cmp	r2, r3
   141f0:	bne	141fc <close_stdout@@Base+0x19a4>
   141f4:	add	sp, sp, #56	; 0x38
   141f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141fc:	bl	110b8 <__stack_chk_fail@plt>
   14200:	andeq	r4, r1, ip, lsl r0
   14204:	andeq	r3, r1, ip, ror #28
   14208:	andeq	r0, r0, r4, lsl #2
   1420c:	push	{lr}		; (str lr, [sp, #-4]!)
   14210:	sub	sp, sp, #12
   14214:	mvn	ip, #0
   14218:	str	ip, [sp]
   1421c:	bl	14160 <close_stdout@@Base+0x1908>
   14220:	add	sp, sp, #12
   14224:	pop	{pc}		; (ldr pc, [sp], #4)
   14228:	mov	ip, r1
   1422c:	mov	r3, r2
   14230:	mov	r1, r0
   14234:	mov	r2, ip
   14238:	mov	r0, #0
   1423c:	b	1420c <close_stdout@@Base+0x19b4>
   14240:	push	{lr}		; (str lr, [sp, #-4]!)
   14244:	sub	sp, sp, #12
   14248:	mov	lr, r1
   1424c:	mov	ip, r2
   14250:	mov	r1, r0
   14254:	str	r3, [sp]
   14258:	mov	r2, lr
   1425c:	mov	r3, ip
   14260:	mov	r0, #0
   14264:	bl	14160 <close_stdout@@Base+0x1908>
   14268:	add	sp, sp, #12
   1426c:	pop	{pc}		; (ldr pc, [sp], #4)
   14270:	ldr	r3, [pc, #12]	; 14284 <close_stdout@@Base+0x1a2c>
   14274:	ldr	ip, [pc, #12]	; 14288 <close_stdout@@Base+0x1a30>
   14278:	add	r3, pc, r3
   1427c:	ldr	r3, [r3, ip]
   14280:	b	13a10 <close_stdout@@Base+0x11b8>
   14284:	andeq	r3, r1, r0, lsl #27
   14288:	andeq	r0, r0, r0, lsl #2
   1428c:	mov	r2, r1
   14290:	mov	r1, r0
   14294:	mov	r0, #0
   14298:	b	14270 <close_stdout@@Base+0x1a18>
   1429c:	mvn	r2, #0
   142a0:	b	14270 <close_stdout@@Base+0x1a18>
   142a4:	mov	r1, r0
   142a8:	mov	r0, #0
   142ac:	b	1429c <close_stdout@@Base+0x1a44>
   142b0:	push	{r4, r5, r6, r7, lr}
   142b4:	cmp	r1, #0
   142b8:	sub	sp, sp, #36	; 0x24
   142bc:	ldr	r7, [pc, #896]	; 14644 <close_stdout@@Base+0x1dec>
   142c0:	mov	ip, r3
   142c4:	mov	r5, r0
   142c8:	add	r7, pc, r7
   142cc:	ldr	r4, [sp, #56]	; 0x38
   142d0:	ldr	r6, [sp, #60]	; 0x3c
   142d4:	beq	14618 <close_stdout@@Base+0x1dc0>
   142d8:	str	r2, [sp]
   142dc:	mov	r3, r1
   142e0:	ldr	r2, [pc, #864]	; 14648 <close_stdout@@Base+0x1df0>
   142e4:	mov	r1, #1
   142e8:	str	ip, [sp, #4]
   142ec:	add	r2, pc, r2
   142f0:	bl	11214 <__fprintf_chk@plt>
   142f4:	ldr	r1, [pc, #848]	; 1464c <close_stdout@@Base+0x1df4>
   142f8:	mov	r2, #5
   142fc:	mov	r0, #0
   14300:	add	r1, pc, r1
   14304:	bl	110ac <dcgettext@plt>
   14308:	ldr	r2, [pc, #832]	; 14650 <close_stdout@@Base+0x1df8>
   1430c:	movw	ip, #2013	; 0x7dd
   14310:	mov	r1, #1
   14314:	ldr	r2, [r7, r2]
   14318:	str	ip, [sp]
   1431c:	mov	r3, r0
   14320:	mov	r0, r5
   14324:	bl	11214 <__fprintf_chk@plt>
   14328:	ldr	r1, [pc, #804]	; 14654 <close_stdout@@Base+0x1dfc>
   1432c:	mov	r0, #0
   14330:	mov	r2, #5
   14334:	add	r1, pc, r1
   14338:	bl	110ac <dcgettext@plt>
   1433c:	mov	r1, r5
   14340:	bl	11010 <fputs_unlocked@plt>
   14344:	cmp	r6, #9
   14348:	addls	pc, pc, r6, lsl #2
   1434c:	b	14634 <close_stdout@@Base+0x1ddc>
   14350:	b	143e4 <close_stdout@@Base+0x1b8c>
   14354:	b	143e8 <close_stdout@@Base+0x1b90>
   14358:	b	14418 <close_stdout@@Base+0x1bc0>
   1435c:	b	1444c <close_stdout@@Base+0x1bf4>
   14360:	b	14488 <close_stdout@@Base+0x1c30>
   14364:	b	144c8 <close_stdout@@Base+0x1c70>
   14368:	b	14510 <close_stdout@@Base+0x1cb8>
   1436c:	b	14560 <close_stdout@@Base+0x1d08>
   14370:	b	145b8 <close_stdout@@Base+0x1d60>
   14374:	b	14378 <close_stdout@@Base+0x1b20>
   14378:	ldr	r1, [pc, #728]	; 14658 <close_stdout@@Base+0x1e00>
   1437c:	mov	r0, #0
   14380:	add	r1, pc, r1
   14384:	mov	r2, #5
   14388:	bl	110ac <dcgettext@plt>
   1438c:	ldm	r4, {r3, ip}
   14390:	mov	r1, #1
   14394:	str	ip, [sp]
   14398:	ldr	ip, [r4, #8]
   1439c:	str	ip, [sp, #4]
   143a0:	ldr	ip, [r4, #12]
   143a4:	str	ip, [sp, #8]
   143a8:	ldr	ip, [r4, #16]
   143ac:	str	ip, [sp, #12]
   143b0:	ldr	ip, [r4, #20]
   143b4:	str	ip, [sp, #16]
   143b8:	ldr	ip, [r4, #24]
   143bc:	str	ip, [sp, #20]
   143c0:	ldr	ip, [r4, #28]
   143c4:	str	ip, [sp, #24]
   143c8:	ldr	ip, [r4, #32]
   143cc:	str	ip, [sp, #28]
   143d0:	mov	r2, r0
   143d4:	mov	r0, r5
   143d8:	bl	11214 <__fprintf_chk@plt>
   143dc:	add	sp, sp, #36	; 0x24
   143e0:	pop	{r4, r5, r6, r7, pc}
   143e4:	bl	112b0 <abort@plt>
   143e8:	ldr	r1, [pc, #620]	; 1465c <close_stdout@@Base+0x1e04>
   143ec:	mov	r2, #5
   143f0:	mov	r0, #0
   143f4:	add	r1, pc, r1
   143f8:	bl	110ac <dcgettext@plt>
   143fc:	ldr	r3, [r4]
   14400:	mov	r1, #1
   14404:	mov	r2, r0
   14408:	mov	r0, r5
   1440c:	add	sp, sp, #36	; 0x24
   14410:	pop	{r4, r5, r6, r7, lr}
   14414:	b	11214 <__fprintf_chk@plt>
   14418:	ldr	r1, [pc, #576]	; 14660 <close_stdout@@Base+0x1e08>
   1441c:	mov	r2, #5
   14420:	mov	r0, #0
   14424:	add	r1, pc, r1
   14428:	bl	110ac <dcgettext@plt>
   1442c:	ldm	r4, {r3, ip}
   14430:	mov	r1, #1
   14434:	str	ip, [sp, #56]	; 0x38
   14438:	mov	r2, r0
   1443c:	mov	r0, r5
   14440:	add	sp, sp, #36	; 0x24
   14444:	pop	{r4, r5, r6, r7, lr}
   14448:	b	11214 <__fprintf_chk@plt>
   1444c:	ldr	r1, [pc, #528]	; 14664 <close_stdout@@Base+0x1e0c>
   14450:	mov	r2, #5
   14454:	mov	r0, #0
   14458:	add	r1, pc, r1
   1445c:	bl	110ac <dcgettext@plt>
   14460:	ldm	r4, {r3, ip}
   14464:	mov	r1, #1
   14468:	str	ip, [sp, #56]	; 0x38
   1446c:	ldr	ip, [r4, #8]
   14470:	str	ip, [sp, #60]	; 0x3c
   14474:	mov	r2, r0
   14478:	mov	r0, r5
   1447c:	add	sp, sp, #36	; 0x24
   14480:	pop	{r4, r5, r6, r7, lr}
   14484:	b	11214 <__fprintf_chk@plt>
   14488:	ldr	r1, [pc, #472]	; 14668 <close_stdout@@Base+0x1e10>
   1448c:	mov	r2, #5
   14490:	mov	r0, #0
   14494:	add	r1, pc, r1
   14498:	bl	110ac <dcgettext@plt>
   1449c:	ldm	r4, {r3, ip}
   144a0:	mov	r1, #1
   144a4:	str	ip, [sp]
   144a8:	ldr	ip, [r4, #8]
   144ac:	str	ip, [sp, #4]
   144b0:	ldr	ip, [r4, #12]
   144b4:	str	ip, [sp, #8]
   144b8:	mov	r2, r0
   144bc:	mov	r0, r5
   144c0:	bl	11214 <__fprintf_chk@plt>
   144c4:	b	143dc <close_stdout@@Base+0x1b84>
   144c8:	ldr	r1, [pc, #412]	; 1466c <close_stdout@@Base+0x1e14>
   144cc:	mov	r2, #5
   144d0:	mov	r0, #0
   144d4:	add	r1, pc, r1
   144d8:	bl	110ac <dcgettext@plt>
   144dc:	ldm	r4, {r3, ip}
   144e0:	mov	r1, #1
   144e4:	str	ip, [sp]
   144e8:	ldr	ip, [r4, #8]
   144ec:	str	ip, [sp, #4]
   144f0:	ldr	ip, [r4, #12]
   144f4:	str	ip, [sp, #8]
   144f8:	ldr	ip, [r4, #16]
   144fc:	str	ip, [sp, #12]
   14500:	mov	r2, r0
   14504:	mov	r0, r5
   14508:	bl	11214 <__fprintf_chk@plt>
   1450c:	b	143dc <close_stdout@@Base+0x1b84>
   14510:	ldr	r1, [pc, #344]	; 14670 <close_stdout@@Base+0x1e18>
   14514:	mov	r2, #5
   14518:	mov	r0, #0
   1451c:	add	r1, pc, r1
   14520:	bl	110ac <dcgettext@plt>
   14524:	ldm	r4, {r3, ip}
   14528:	mov	r1, #1
   1452c:	str	ip, [sp]
   14530:	ldr	ip, [r4, #8]
   14534:	str	ip, [sp, #4]
   14538:	ldr	ip, [r4, #12]
   1453c:	str	ip, [sp, #8]
   14540:	ldr	ip, [r4, #16]
   14544:	str	ip, [sp, #12]
   14548:	ldr	ip, [r4, #20]
   1454c:	str	ip, [sp, #16]
   14550:	mov	r2, r0
   14554:	mov	r0, r5
   14558:	bl	11214 <__fprintf_chk@plt>
   1455c:	b	143dc <close_stdout@@Base+0x1b84>
   14560:	ldr	r1, [pc, #268]	; 14674 <close_stdout@@Base+0x1e1c>
   14564:	mov	r2, #5
   14568:	mov	r0, #0
   1456c:	add	r1, pc, r1
   14570:	bl	110ac <dcgettext@plt>
   14574:	ldm	r4, {r3, ip}
   14578:	mov	r1, #1
   1457c:	str	ip, [sp]
   14580:	ldr	ip, [r4, #8]
   14584:	str	ip, [sp, #4]
   14588:	ldr	ip, [r4, #12]
   1458c:	str	ip, [sp, #8]
   14590:	ldr	ip, [r4, #16]
   14594:	str	ip, [sp, #12]
   14598:	ldr	ip, [r4, #20]
   1459c:	str	ip, [sp, #16]
   145a0:	ldr	ip, [r4, #24]
   145a4:	str	ip, [sp, #20]
   145a8:	mov	r2, r0
   145ac:	mov	r0, r5
   145b0:	bl	11214 <__fprintf_chk@plt>
   145b4:	b	143dc <close_stdout@@Base+0x1b84>
   145b8:	ldr	r1, [pc, #184]	; 14678 <close_stdout@@Base+0x1e20>
   145bc:	mov	r2, #5
   145c0:	mov	r0, #0
   145c4:	add	r1, pc, r1
   145c8:	bl	110ac <dcgettext@plt>
   145cc:	ldm	r4, {r3, ip}
   145d0:	mov	r1, #1
   145d4:	str	ip, [sp]
   145d8:	ldr	ip, [r4, #8]
   145dc:	str	ip, [sp, #4]
   145e0:	ldr	ip, [r4, #12]
   145e4:	str	ip, [sp, #8]
   145e8:	ldr	ip, [r4, #16]
   145ec:	str	ip, [sp, #12]
   145f0:	ldr	ip, [r4, #20]
   145f4:	str	ip, [sp, #16]
   145f8:	ldr	ip, [r4, #24]
   145fc:	str	ip, [sp, #20]
   14600:	ldr	ip, [r4, #28]
   14604:	str	ip, [sp, #24]
   14608:	mov	r2, r0
   1460c:	mov	r0, r5
   14610:	bl	11214 <__fprintf_chk@plt>
   14614:	b	143dc <close_stdout@@Base+0x1b84>
   14618:	str	r3, [sp]
   1461c:	mov	r3, r2
   14620:	ldr	r2, [pc, #84]	; 1467c <close_stdout@@Base+0x1e24>
   14624:	mov	r1, #1
   14628:	add	r2, pc, r2
   1462c:	bl	11214 <__fprintf_chk@plt>
   14630:	b	142f4 <close_stdout@@Base+0x1a9c>
   14634:	ldr	r1, [pc, #68]	; 14680 <close_stdout@@Base+0x1e28>
   14638:	mov	r0, #0
   1463c:	add	r1, pc, r1
   14640:	b	14384 <close_stdout@@Base+0x1b2c>
   14644:	andeq	r3, r1, r0, lsr sp
   14648:	andeq	r2, r0, r0, ror #17
   1464c:	andeq	r2, r0, r0, ror #17
   14650:	andeq	r0, r0, r4, lsr r1
   14654:			; <UNDEFINED> instruction: 0x000028b0
   14658:	andeq	r2, r0, ip, lsr sl
   1465c:			; <UNDEFINED> instruction: 0x000028bc
   14660:	muleq	r0, ip, r8
   14664:	andeq	r2, r0, r0, lsl #17
   14668:	andeq	r2, r0, r0, ror #16
   1466c:	andeq	r2, r0, r0, asr #16
   14670:	andeq	r2, r0, ip, lsl r8
   14674:	strdeq	r2, [r0], -r4
   14678:	andeq	r2, r0, r8, asr #15
   1467c:			; <UNDEFINED> instruction: 0x000025b0
   14680:			; <UNDEFINED> instruction: 0x000027b4
   14684:	push	{r4, r5, lr}
   14688:	sub	sp, sp, #12
   1468c:	ldr	r5, [sp, #24]
   14690:	ldr	ip, [r5]
   14694:	cmp	ip, #0
   14698:	beq	146b4 <close_stdout@@Base+0x1e5c>
   1469c:	mov	lr, r5
   146a0:	mov	ip, #0
   146a4:	ldr	r4, [lr, #4]!
   146a8:	add	ip, ip, #1
   146ac:	cmp	r4, #0
   146b0:	bne	146a4 <close_stdout@@Base+0x1e4c>
   146b4:	stm	sp, {r5, ip}
   146b8:	bl	142b0 <close_stdout@@Base+0x1a58>
   146bc:	add	sp, sp, #12
   146c0:	pop	{r4, r5, pc}
   146c4:	push	{r4, r5, r6, r7, lr}
   146c8:	sub	sp, sp, #60	; 0x3c
   146cc:	ldr	r4, [pc, #100]	; 14738 <close_stdout@@Base+0x1ee0>
   146d0:	mov	ip, #0
   146d4:	ldr	r5, [pc, #96]	; 1473c <close_stdout@@Base+0x1ee4>
   146d8:	mov	lr, ip
   146dc:	add	r4, pc, r4
   146e0:	ldr	r6, [sp, #80]	; 0x50
   146e4:	ldr	r7, [r4, r5]
   146e8:	add	r5, sp, #12
   146ec:	ldr	r4, [r7]
   146f0:	str	r4, [sp, #52]	; 0x34
   146f4:	ldr	r4, [r6, ip]
   146f8:	cmp	r4, #0
   146fc:	str	r4, [r5, ip]
   14700:	beq	14714 <close_stdout@@Base+0x1ebc>
   14704:	add	lr, lr, #1
   14708:	add	ip, ip, #4
   1470c:	cmp	lr, #10
   14710:	bne	146f4 <close_stdout@@Base+0x1e9c>
   14714:	stm	sp, {r5, lr}
   14718:	bl	142b0 <close_stdout@@Base+0x1a58>
   1471c:	ldr	r2, [sp, #52]	; 0x34
   14720:	ldr	r3, [r7]
   14724:	cmp	r2, r3
   14728:	bne	14734 <close_stdout@@Base+0x1edc>
   1472c:	add	sp, sp, #60	; 0x3c
   14730:	pop	{r4, r5, r6, r7, pc}
   14734:	bl	110b8 <__stack_chk_fail@plt>
   14738:	andeq	r3, r1, ip, lsl r9
   1473c:	andeq	r0, r0, r4, lsl #2
   14740:	push	{r3}		; (str r3, [sp, #-4]!)
   14744:	push	{r4, lr}
   14748:	sub	sp, sp, #20
   1474c:	ldr	lr, [pc, #72]	; 1479c <close_stdout@@Base+0x1f44>
   14750:	add	ip, sp, #32
   14754:	ldr	r4, [pc, #68]	; 147a0 <close_stdout@@Base+0x1f48>
   14758:	add	lr, pc, lr
   1475c:	ldr	r3, [sp, #28]
   14760:	ldr	r4, [lr, r4]
   14764:	str	ip, [sp]
   14768:	str	ip, [sp, #8]
   1476c:	ldr	ip, [r4]
   14770:	str	ip, [sp, #12]
   14774:	bl	146c4 <close_stdout@@Base+0x1e6c>
   14778:	ldr	r2, [sp, #12]
   1477c:	ldr	r3, [r4]
   14780:	cmp	r2, r3
   14784:	bne	14798 <close_stdout@@Base+0x1f40>
   14788:	add	sp, sp, #20
   1478c:	pop	{r4, lr}
   14790:	add	sp, sp, #4
   14794:	bx	lr
   14798:	bl	110b8 <__stack_chk_fail@plt>
   1479c:	andeq	r3, r1, r0, lsr #17
   147a0:	andeq	r0, r0, r4, lsl #2
   147a4:	ldr	r1, [pc, #132]	; 14830 <close_stdout@@Base+0x1fd8>
   147a8:	mov	r2, #5
   147ac:	push	{r4, lr}
   147b0:	add	r1, pc, r1
   147b4:	mov	r0, #0
   147b8:	ldr	r4, [pc, #116]	; 14834 <close_stdout@@Base+0x1fdc>
   147bc:	bl	110ac <dcgettext@plt>
   147c0:	ldr	r2, [pc, #112]	; 14838 <close_stdout@@Base+0x1fe0>
   147c4:	add	r4, pc, r4
   147c8:	add	r2, pc, r2
   147cc:	mov	r1, r0
   147d0:	mov	r0, #1
   147d4:	bl	111fc <__printf_chk@plt>
   147d8:	ldr	r1, [pc, #92]	; 1483c <close_stdout@@Base+0x1fe4>
   147dc:	mov	r2, #5
   147e0:	mov	r0, #0
   147e4:	add	r1, pc, r1
   147e8:	bl	110ac <dcgettext@plt>
   147ec:	ldr	r2, [pc, #76]	; 14840 <close_stdout@@Base+0x1fe8>
   147f0:	ldr	r3, [pc, #76]	; 14844 <close_stdout@@Base+0x1fec>
   147f4:	add	r2, pc, r2
   147f8:	add	r3, pc, r3
   147fc:	mov	r1, r0
   14800:	mov	r0, #1
   14804:	bl	111fc <__printf_chk@plt>
   14808:	ldr	r1, [pc, #56]	; 14848 <close_stdout@@Base+0x1ff0>
   1480c:	mov	r0, #0
   14810:	mov	r2, #5
   14814:	add	r1, pc, r1
   14818:	bl	110ac <dcgettext@plt>
   1481c:	ldr	r3, [pc, #40]	; 1484c <close_stdout@@Base+0x1ff4>
   14820:	ldr	r3, [r4, r3]
   14824:	pop	{r4, lr}
   14828:	ldr	r1, [r3]
   1482c:	b	11010 <fputs_unlocked@plt>
   14830:	andeq	r2, r0, ip, ror r6
   14834:	andeq	r3, r1, r4, lsr r8
   14838:	andeq	r2, r0, ip, ror r6
   1483c:	andeq	r2, r0, r8, ror r6
   14840:	andeq	r2, r0, r0, asr r0
   14844:	andeq	r2, r0, ip, asr r0
   14848:	andeq	r2, r0, ip, asr r6
   1484c:	andeq	r0, r0, r4, lsr #2
   14850:	push	{r4, lr}
   14854:	mov	r4, r0
   14858:	bl	11154 <malloc@plt>
   1485c:	rsbs	r3, r0, #1
   14860:	movcc	r3, #0
   14864:	cmp	r4, #0
   14868:	moveq	r3, #0
   1486c:	cmp	r3, #0
   14870:	popeq	{r4, pc}
   14874:	bl	14a64 <close_stdout@@Base+0x220c>
   14878:	push	{r3, r4, r5, lr}
   1487c:	mov	r4, r0
   14880:	mvn	r0, #0
   14884:	mov	r5, r1
   14888:	bl	1585c <close_stdout@@Base+0x3004>
   1488c:	cmp	r0, r4
   14890:	bcc	148a0 <close_stdout@@Base+0x2048>
   14894:	mul	r0, r4, r5
   14898:	pop	{r3, r4, r5, lr}
   1489c:	b	14850 <close_stdout@@Base+0x1ff8>
   148a0:	bl	14a64 <close_stdout@@Base+0x220c>
   148a4:	b	14850 <close_stdout@@Base+0x1ff8>
   148a8:	rsbs	r3, r1, #1
   148ac:	push	{r4, lr}
   148b0:	movcc	r3, #0
   148b4:	cmp	r0, #0
   148b8:	mov	r4, r1
   148bc:	moveq	r3, #0
   148c0:	cmp	r3, #0
   148c4:	bne	148e8 <close_stdout@@Base+0x2090>
   148c8:	bl	110c4 <realloc@plt>
   148cc:	rsbs	r3, r0, #1
   148d0:	movcc	r3, #0
   148d4:	cmp	r4, #0
   148d8:	moveq	r3, #0
   148dc:	cmp	r3, #0
   148e0:	popeq	{r4, pc}
   148e4:	bl	14a64 <close_stdout@@Base+0x220c>
   148e8:	bl	11058 <free@plt>
   148ec:	mov	r0, #0
   148f0:	pop	{r4, pc}
   148f4:	push	{r4, r5, r6, lr}
   148f8:	mov	r5, r1
   148fc:	mov	r6, r0
   14900:	mov	r1, r2
   14904:	mvn	r0, #0
   14908:	mov	r4, r2
   1490c:	bl	1585c <close_stdout@@Base+0x3004>
   14910:	cmp	r0, r5
   14914:	bcc	14928 <close_stdout@@Base+0x20d0>
   14918:	mov	r0, r6
   1491c:	mul	r1, r5, r4
   14920:	pop	{r4, r5, r6, lr}
   14924:	b	148a8 <close_stdout@@Base+0x2050>
   14928:	bl	14a64 <close_stdout@@Base+0x220c>
   1492c:	push	{r3, r4, r5, r6, r7, lr}
   14930:	subs	r7, r0, #0
   14934:	mov	r5, r1
   14938:	mov	r6, r2
   1493c:	ldr	r4, [r1]
   14940:	beq	14978 <close_stdout@@Base+0x2120>
   14944:	movw	r0, #43690	; 0xaaaa
   14948:	mov	r1, r2
   1494c:	bfi	r0, r0, #16, #16
   14950:	bl	1585c <close_stdout@@Base+0x3004>
   14954:	cmp	r4, r0
   14958:	addcc	r3, r4, #1
   1495c:	addcc	r4, r4, r3, lsr #1
   14960:	bcs	1499c <close_stdout@@Base+0x2144>
   14964:	str	r4, [r5]
   14968:	mov	r0, r7
   1496c:	mul	r1, r6, r4
   14970:	pop	{r3, r4, r5, r6, r7, lr}
   14974:	b	148a8 <close_stdout@@Base+0x2050>
   14978:	cmp	r4, #0
   1497c:	bne	14964 <close_stdout@@Base+0x210c>
   14980:	mov	r0, #64	; 0x40
   14984:	mov	r1, r2
   14988:	bl	1585c <close_stdout@@Base+0x3004>
   1498c:	cmp	r0, #0
   14990:	movne	r4, r0
   14994:	addeq	r4, r0, #1
   14998:	b	14964 <close_stdout@@Base+0x210c>
   1499c:	bl	14a64 <close_stdout@@Base+0x220c>
   149a0:	cmp	r0, #0
   149a4:	push	{r3, lr}
   149a8:	ldr	r3, [r1]
   149ac:	beq	149d8 <close_stdout@@Base+0x2180>
   149b0:	movw	r2, #43689	; 0xaaa9
   149b4:	movt	r2, #43690	; 0xaaaa
   149b8:	cmp	r3, r2
   149bc:	addls	r2, r3, #1
   149c0:	addls	r3, r3, r2, lsr #1
   149c4:	bhi	149f0 <close_stdout@@Base+0x2198>
   149c8:	str	r3, [r1]
   149cc:	mov	r1, r3
   149d0:	pop	{r3, lr}
   149d4:	b	148a8 <close_stdout@@Base+0x2050>
   149d8:	cmp	r3, #0
   149dc:	moveq	r3, #64	; 0x40
   149e0:	str	r3, [r1]
   149e4:	mov	r1, r3
   149e8:	pop	{r3, lr}
   149ec:	b	148a8 <close_stdout@@Base+0x2050>
   149f0:	bl	14a64 <close_stdout@@Base+0x220c>
   149f4:	push	{r4, lr}
   149f8:	mov	r4, r0
   149fc:	bl	14850 <close_stdout@@Base+0x1ff8>
   14a00:	mov	r2, r4
   14a04:	mov	r1, #0
   14a08:	pop	{r4, lr}
   14a0c:	b	111e4 <memset@plt>
   14a10:	push	{r3, lr}
   14a14:	bl	11004 <calloc@plt>
   14a18:	cmp	r0, #0
   14a1c:	popne	{r3, pc}
   14a20:	bl	14a64 <close_stdout@@Base+0x220c>
   14a24:	push	{r3, r4, r5, lr}
   14a28:	mov	r4, r1
   14a2c:	mov	r5, r0
   14a30:	mov	r0, r1
   14a34:	bl	14850 <close_stdout@@Base+0x1ff8>
   14a38:	mov	r1, r5
   14a3c:	mov	r2, r4
   14a40:	pop	{r3, r4, r5, lr}
   14a44:	b	11070 <memcpy@plt>
   14a48:	push	{r4, lr}
   14a4c:	mov	r4, r0
   14a50:	bl	111a8 <strlen@plt>
   14a54:	add	r1, r0, #1
   14a58:	mov	r0, r4
   14a5c:	pop	{r4, lr}
   14a60:	b	14a24 <close_stdout@@Base+0x21cc>
   14a64:	ldr	r3, [pc, #64]	; 14aac <close_stdout@@Base+0x2254>
   14a68:	mov	r2, #5
   14a6c:	ldr	ip, [pc, #60]	; 14ab0 <close_stdout@@Base+0x2258>
   14a70:	mov	r0, #0
   14a74:	add	r3, pc, r3
   14a78:	ldr	r1, [pc, #52]	; 14ab4 <close_stdout@@Base+0x225c>
   14a7c:	push	{r4, lr}
   14a80:	add	r1, pc, r1
   14a84:	ldr	r3, [r3, ip]
   14a88:	ldr	r4, [r3]
   14a8c:	bl	110ac <dcgettext@plt>
   14a90:	ldr	r2, [pc, #32]	; 14ab8 <close_stdout@@Base+0x2260>
   14a94:	mov	r1, #0
   14a98:	add	r2, pc, r2
   14a9c:	mov	r3, r0
   14aa0:	mov	r0, r4
   14aa4:	bl	11130 <error@plt>
   14aa8:	bl	112b0 <abort@plt>
   14aac:	andeq	r3, r1, r4, lsl #11
   14ab0:	andeq	r0, r0, r8, lsr #2
   14ab4:	andeq	r2, r0, r0, ror #8
   14ab8:	andeq	r2, r0, r0, ror r0
   14abc:	ldr	ip, [pc, #1852]	; 15200 <close_stdout@@Base+0x29a8>
   14ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ac4:	mov	fp, r2
   14ac8:	ldr	r2, [pc, #1844]	; 15204 <close_stdout@@Base+0x29ac>
   14acc:	add	ip, pc, ip
   14ad0:	mov	r9, r3
   14ad4:	sub	sp, sp, #36	; 0x24
   14ad8:	mov	r3, ip
   14adc:	cmp	fp, #36	; 0x24
   14ae0:	ldr	sl, [ip, r2]
   14ae4:	mov	r5, r0
   14ae8:	mov	r8, r1
   14aec:	ldr	r6, [sp, #72]	; 0x48
   14af0:	ldr	r3, [sl]
   14af4:	str	r3, [sp, #28]
   14af8:	bhi	151e0 <close_stdout@@Base+0x2988>
   14afc:	cmp	r1, #0
   14b00:	addeq	r8, sp, #24
   14b04:	bl	11190 <__ctype_b_loc@plt>
   14b08:	ldrb	r3, [r5]
   14b0c:	mov	r1, r5
   14b10:	ldr	r0, [r0]
   14b14:	b	14b1c <close_stdout@@Base+0x22c4>
   14b18:	ldrb	r3, [r1, #1]!
   14b1c:	lsl	r2, r3, #1
   14b20:	ldrh	r4, [r0, r2]
   14b24:	and	r4, r4, #8192	; 0x2000
   14b28:	uxth	r4, r4
   14b2c:	cmp	r4, #0
   14b30:	bne	14b18 <close_stdout@@Base+0x22c0>
   14b34:	cmp	r3, #45	; 0x2d
   14b38:	bne	14b58 <close_stdout@@Base+0x2300>
   14b3c:	mov	r0, #4
   14b40:	ldr	r2, [sp, #28]
   14b44:	ldr	r3, [sl]
   14b48:	cmp	r2, r3
   14b4c:	bne	151dc <close_stdout@@Base+0x2984>
   14b50:	add	sp, sp, #36	; 0x24
   14b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b58:	bl	111cc <__errno_location@plt>
   14b5c:	mov	r2, fp
   14b60:	mov	r1, r8
   14b64:	mov	r3, r4
   14b68:	str	r4, [r0]
   14b6c:	mov	r7, r0
   14b70:	mov	r0, r5
   14b74:	bl	1107c <__strtoull_internal@plt>
   14b78:	ldr	fp, [r8]
   14b7c:	cmp	fp, r5
   14b80:	strd	r0, [sp]
   14b84:	beq	14d00 <close_stdout@@Base+0x24a8>
   14b88:	ldr	ip, [r7]
   14b8c:	cmp	ip, #0
   14b90:	bne	14bbc <close_stdout@@Base+0x2364>
   14b94:	mov	r7, ip
   14b98:	cmp	r6, #0
   14b9c:	beq	1516c <close_stdout@@Base+0x2914>
   14ba0:	ldrb	r5, [fp]
   14ba4:	cmp	r5, #0
   14ba8:	bne	14bcc <close_stdout@@Base+0x2374>
   14bac:	ldrd	r2, [sp]
   14bb0:	mov	r0, r7
   14bb4:	strd	r2, [r9]
   14bb8:	b	14b40 <close_stdout@@Base+0x22e8>
   14bbc:	cmp	ip, #34	; 0x22
   14bc0:	moveq	r7, #1
   14bc4:	bne	14b3c <close_stdout@@Base+0x22e4>
   14bc8:	b	14b98 <close_stdout@@Base+0x2340>
   14bcc:	mov	r0, r6
   14bd0:	mov	r1, r5
   14bd4:	bl	111b4 <strchr@plt>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14d3c <close_stdout@@Base+0x24e4>
   14be0:	mov	r0, r6
   14be4:	mov	r1, #48	; 0x30
   14be8:	bl	111b4 <strchr@plt>
   14bec:	cmp	r0, #0
   14bf0:	beq	14c10 <close_stdout@@Base+0x23b8>
   14bf4:	ldrb	r3, [fp, #1]
   14bf8:	cmp	r3, #68	; 0x44
   14bfc:	beq	15194 <close_stdout@@Base+0x293c>
   14c00:	cmp	r3, #105	; 0x69
   14c04:	beq	1517c <close_stdout@@Base+0x2924>
   14c08:	cmp	r3, #66	; 0x42
   14c0c:	beq	15194 <close_stdout@@Base+0x293c>
   14c10:	mov	r6, #1
   14c14:	mov	r4, #1024	; 0x400
   14c18:	sub	r5, r5, #66	; 0x42
   14c1c:	cmp	r5, #53	; 0x35
   14c20:	addls	pc, pc, r5, lsl #2
   14c24:	b	14d3c <close_stdout@@Base+0x24e4>
   14c28:	b	14fe4 <close_stdout@@Base+0x278c>
   14c2c:	b	14d3c <close_stdout@@Base+0x24e4>
   14c30:	b	14d3c <close_stdout@@Base+0x24e4>
   14c34:	b	14f78 <close_stdout@@Base+0x2720>
   14c38:	b	14d3c <close_stdout@@Base+0x24e4>
   14c3c:	b	14f0c <close_stdout@@Base+0x26b4>
   14c40:	b	14d3c <close_stdout@@Base+0x24e4>
   14c44:	b	14d3c <close_stdout@@Base+0x24e4>
   14c48:	b	14d3c <close_stdout@@Base+0x24e4>
   14c4c:	b	14eb4 <close_stdout@@Base+0x265c>
   14c50:	b	14d3c <close_stdout@@Base+0x24e4>
   14c54:	b	1508c <close_stdout@@Base+0x2834>
   14c58:	b	14d3c <close_stdout@@Base+0x24e4>
   14c5c:	b	14d3c <close_stdout@@Base+0x24e4>
   14c60:	b	15020 <close_stdout@@Base+0x27c8>
   14c64:	b	14d3c <close_stdout@@Base+0x24e4>
   14c68:	b	14d3c <close_stdout@@Base+0x24e4>
   14c6c:	b	14d3c <close_stdout@@Base+0x24e4>
   14c70:	b	15100 <close_stdout@@Base+0x28a8>
   14c74:	b	14d3c <close_stdout@@Base+0x24e4>
   14c78:	b	14d3c <close_stdout@@Base+0x24e4>
   14c7c:	b	14d3c <close_stdout@@Base+0x24e4>
   14c80:	b	14d3c <close_stdout@@Base+0x24e4>
   14c84:	b	14e48 <close_stdout@@Base+0x25f0>
   14c88:	b	14dd0 <close_stdout@@Base+0x2578>
   14c8c:	b	14d3c <close_stdout@@Base+0x24e4>
   14c90:	b	14d3c <close_stdout@@Base+0x24e4>
   14c94:	b	14d3c <close_stdout@@Base+0x24e4>
   14c98:	b	14d3c <close_stdout@@Base+0x24e4>
   14c9c:	b	14d3c <close_stdout@@Base+0x24e4>
   14ca0:	b	14d3c <close_stdout@@Base+0x24e4>
   14ca4:	b	14d3c <close_stdout@@Base+0x24e4>
   14ca8:	b	14d94 <close_stdout@@Base+0x253c>
   14cac:	b	14d4c <close_stdout@@Base+0x24f4>
   14cb0:	b	14d3c <close_stdout@@Base+0x24e4>
   14cb4:	b	14d3c <close_stdout@@Base+0x24e4>
   14cb8:	b	14d3c <close_stdout@@Base+0x24e4>
   14cbc:	b	14f0c <close_stdout@@Base+0x26b4>
   14cc0:	b	14d3c <close_stdout@@Base+0x24e4>
   14cc4:	b	14d3c <close_stdout@@Base+0x24e4>
   14cc8:	b	14d3c <close_stdout@@Base+0x24e4>
   14ccc:	b	14eb4 <close_stdout@@Base+0x265c>
   14cd0:	b	14d3c <close_stdout@@Base+0x24e4>
   14cd4:	b	1508c <close_stdout@@Base+0x2834>
   14cd8:	b	14d3c <close_stdout@@Base+0x24e4>
   14cdc:	b	14d3c <close_stdout@@Base+0x24e4>
   14ce0:	b	14d3c <close_stdout@@Base+0x24e4>
   14ce4:	b	14d3c <close_stdout@@Base+0x24e4>
   14ce8:	b	14d3c <close_stdout@@Base+0x24e4>
   14cec:	b	14d3c <close_stdout@@Base+0x24e4>
   14cf0:	b	15100 <close_stdout@@Base+0x28a8>
   14cf4:	b	14d3c <close_stdout@@Base+0x24e4>
   14cf8:	b	14d3c <close_stdout@@Base+0x24e4>
   14cfc:	b	14d6c <close_stdout@@Base+0x2514>
   14d00:	cmp	r6, #0
   14d04:	beq	14b3c <close_stdout@@Base+0x22e4>
   14d08:	ldrb	r5, [r5]
   14d0c:	cmp	r5, #0
   14d10:	beq	14b3c <close_stdout@@Base+0x22e4>
   14d14:	mov	r0, r6
   14d18:	mov	r1, r5
   14d1c:	bl	111b4 <strchr@plt>
   14d20:	cmp	r0, #0
   14d24:	beq	14b3c <close_stdout@@Base+0x22e4>
   14d28:	mov	r0, #1
   14d2c:	mov	r1, #0
   14d30:	mov	r7, r4
   14d34:	strd	r0, [sp]
   14d38:	b	14be0 <close_stdout@@Base+0x2388>
   14d3c:	ldrd	r2, [sp]
   14d40:	orr	r0, r7, #2
   14d44:	strd	r2, [r9]
   14d48:	b	14b40 <close_stdout@@Base+0x22e8>
   14d4c:	mov	r3, #0
   14d50:	add	r2, fp, r6
   14d54:	str	r2, [r8]
   14d58:	ldrb	r2, [fp, r6]
   14d5c:	orr	r7, r7, r3
   14d60:	cmp	r2, #0
   14d64:	orrne	r7, r7, #2
   14d68:	b	14bac <close_stdout@@Base+0x2354>
   14d6c:	ldrd	r2, [sp]
   14d70:	cmp	r2, #0
   14d74:	sbcs	r3, r3, #0
   14d78:	blt	151b4 <close_stdout@@Base+0x295c>
   14d7c:	ldrd	r0, [sp]
   14d80:	mov	r3, #0
   14d84:	adds	r0, r0, r0
   14d88:	adc	r1, r1, r1
   14d8c:	strd	r0, [sp]
   14d90:	b	14d50 <close_stdout@@Base+0x24f8>
   14d94:	ldrd	r0, [sp]
   14d98:	movw	r3, #65535	; 0xffff
   14d9c:	movt	r3, #127	; 0x7f
   14da0:	mvn	r2, #0
   14da4:	cmp	r1, r3
   14da8:	cmpeq	r0, r2
   14dac:	bhi	151b4 <close_stdout@@Base+0x295c>
   14db0:	lsl	r2, r1, #9
   14db4:	ldr	r1, [sp]
   14db8:	lsl	r3, r0, #9
   14dbc:	str	r3, [sp]
   14dc0:	mov	r3, #0
   14dc4:	orr	r2, r2, r1, lsr #23
   14dc8:	str	r2, [sp, #4]
   14dcc:	b	14d50 <close_stdout@@Base+0x24f8>
   14dd0:	asr	r5, r4, #31
   14dd4:	mov	r2, r4
   14dd8:	mvn	r0, #0
   14ddc:	mvn	r1, #0
   14de0:	mov	r3, r5
   14de4:	bl	15a68 <close_stdout@@Base+0x3210>
   14de8:	mov	ip, r7
   14dec:	str	r6, [sp, #20]
   14df0:	mov	r2, #7
   14df4:	ldrd	r6, [sp]
   14df8:	mov	r3, #0
   14dfc:	strd	r0, [sp, #8]
   14e00:	ldrd	r0, [sp, #8]
   14e04:	cmp	r1, r7
   14e08:	cmpeq	r0, r6
   14e0c:	mulcs	r0, r6, r5
   14e10:	movcs	r1, #0
   14e14:	mlacs	r0, r4, r7, r0
   14e18:	movcc	r1, #1
   14e1c:	umullcs	r6, r7, r6, r4
   14e20:	mvncc	r6, #0
   14e24:	mvncc	r7, #0
   14e28:	orr	r3, r3, r1
   14e2c:	addcs	r7, r0, r7
   14e30:	subs	r2, r2, #1
   14e34:	bne	14e00 <close_stdout@@Base+0x25a8>
   14e38:	strd	r6, [sp]
   14e3c:	mov	r7, ip
   14e40:	ldr	r6, [sp, #20]
   14e44:	b	14d50 <close_stdout@@Base+0x24f8>
   14e48:	asr	r5, r4, #31
   14e4c:	mov	r2, r4
   14e50:	mvn	r0, #0
   14e54:	mvn	r1, #0
   14e58:	mov	r3, r5
   14e5c:	bl	15a68 <close_stdout@@Base+0x3210>
   14e60:	mov	ip, r7
   14e64:	str	r6, [sp, #20]
   14e68:	mov	r2, #8
   14e6c:	ldrd	r6, [sp]
   14e70:	mov	r3, #0
   14e74:	strd	r0, [sp, #8]
   14e78:	ldrd	r0, [sp, #8]
   14e7c:	cmp	r1, r7
   14e80:	cmpeq	r0, r6
   14e84:	mulcs	r0, r6, r5
   14e88:	movcs	r1, #0
   14e8c:	mlacs	r0, r4, r7, r0
   14e90:	movcc	r1, #1
   14e94:	umullcs	r6, r7, r6, r4
   14e98:	mvncc	r6, #0
   14e9c:	mvncc	r7, #0
   14ea0:	orr	r3, r3, r1
   14ea4:	addcs	r7, r0, r7
   14ea8:	subs	r2, r2, #1
   14eac:	bne	14e78 <close_stdout@@Base+0x2620>
   14eb0:	b	14e38 <close_stdout@@Base+0x25e0>
   14eb4:	mov	r2, r4
   14eb8:	asr	r3, r4, #31
   14ebc:	mvn	r0, #0
   14ec0:	mvn	r1, #0
   14ec4:	strd	r2, [sp, #8]
   14ec8:	bl	15a68 <close_stdout@@Base+0x3210>
   14ecc:	ldrd	r2, [sp]
   14ed0:	cmp	r3, r1
   14ed4:	cmpeq	r2, r0
   14ed8:	bhi	151a0 <close_stdout@@Base+0x2948>
   14edc:	ldr	r3, [sp]
   14ee0:	ldr	ip, [sp, #12]
   14ee4:	ldr	r0, [sp, #4]
   14ee8:	ldr	r1, [sp]
   14eec:	mul	r2, r3, ip
   14ef0:	mov	r3, #0
   14ef4:	mla	r2, r4, r0, r2
   14ef8:	umull	r0, r1, r1, r4
   14efc:	add	r2, r2, r1
   14f00:	strd	r0, [sp]
   14f04:	str	r2, [sp, #4]
   14f08:	b	14d50 <close_stdout@@Base+0x24f8>
   14f0c:	asr	r5, r4, #31
   14f10:	mov	r2, r4
   14f14:	mvn	r0, #0
   14f18:	mvn	r1, #0
   14f1c:	mov	r3, r5
   14f20:	bl	15a68 <close_stdout@@Base+0x3210>
   14f24:	mov	ip, r7
   14f28:	str	r6, [sp, #20]
   14f2c:	mov	r2, #3
   14f30:	ldrd	r6, [sp]
   14f34:	mov	r3, #0
   14f38:	strd	r0, [sp, #8]
   14f3c:	ldrd	r0, [sp, #8]
   14f40:	cmp	r1, r7
   14f44:	cmpeq	r0, r6
   14f48:	mulcs	r0, r6, r5
   14f4c:	movcs	r1, #0
   14f50:	mlacs	r0, r4, r7, r0
   14f54:	movcc	r1, #1
   14f58:	umullcs	r6, r7, r6, r4
   14f5c:	mvncc	r6, #0
   14f60:	mvncc	r7, #0
   14f64:	orr	r3, r3, r1
   14f68:	addcs	r7, r0, r7
   14f6c:	subs	r2, r2, #1
   14f70:	bne	14f3c <close_stdout@@Base+0x26e4>
   14f74:	b	14e38 <close_stdout@@Base+0x25e0>
   14f78:	asr	r5, r4, #31
   14f7c:	mov	r2, r4
   14f80:	mvn	r0, #0
   14f84:	mvn	r1, #0
   14f88:	mov	r3, r5
   14f8c:	bl	15a68 <close_stdout@@Base+0x3210>
   14f90:	mov	ip, r7
   14f94:	str	r6, [sp, #20]
   14f98:	mov	r2, #6
   14f9c:	ldrd	r6, [sp]
   14fa0:	mov	r3, #0
   14fa4:	strd	r0, [sp, #8]
   14fa8:	ldrd	r0, [sp, #8]
   14fac:	cmp	r1, r7
   14fb0:	cmpeq	r0, r6
   14fb4:	mulcs	r0, r6, r5
   14fb8:	movcs	r1, #0
   14fbc:	mlacs	r0, r4, r7, r0
   14fc0:	movcc	r1, #1
   14fc4:	umullcs	r6, r7, r6, r4
   14fc8:	mvncc	r6, #0
   14fcc:	mvncc	r7, #0
   14fd0:	orr	r3, r3, r1
   14fd4:	addcs	r7, r0, r7
   14fd8:	subs	r2, r2, #1
   14fdc:	bne	14fa8 <close_stdout@@Base+0x2750>
   14fe0:	b	14e38 <close_stdout@@Base+0x25e0>
   14fe4:	ldrd	r0, [sp]
   14fe8:	movw	r3, #65535	; 0xffff
   14fec:	movt	r3, #63	; 0x3f
   14ff0:	mvn	r2, #0
   14ff4:	cmp	r1, r3
   14ff8:	cmpeq	r0, r2
   14ffc:	bhi	151a0 <close_stdout@@Base+0x2948>
   15000:	lsl	r2, r1, #10
   15004:	ldr	r1, [sp]
   15008:	lsl	r3, r0, #10
   1500c:	str	r3, [sp]
   15010:	mov	r3, #0
   15014:	orr	r2, r2, r1, lsr #22
   15018:	str	r2, [sp, #4]
   1501c:	b	14d50 <close_stdout@@Base+0x24f8>
   15020:	asr	r5, r4, #31
   15024:	mov	r2, r4
   15028:	mvn	r0, #0
   1502c:	mvn	r1, #0
   15030:	mov	r3, r5
   15034:	bl	15a68 <close_stdout@@Base+0x3210>
   15038:	mov	ip, r7
   1503c:	str	r6, [sp, #20]
   15040:	mov	r2, #5
   15044:	ldrd	r6, [sp]
   15048:	mov	r3, #0
   1504c:	strd	r0, [sp, #8]
   15050:	ldrd	r0, [sp, #8]
   15054:	cmp	r1, r7
   15058:	cmpeq	r0, r6
   1505c:	mulcs	r0, r6, r5
   15060:	movcs	r1, #0
   15064:	mlacs	r0, r4, r7, r0
   15068:	movcc	r1, #1
   1506c:	umullcs	r6, r7, r6, r4
   15070:	mvncc	r6, #0
   15074:	mvncc	r7, #0
   15078:	orr	r3, r3, r1
   1507c:	addcs	r7, r0, r7
   15080:	subs	r2, r2, #1
   15084:	bne	15050 <close_stdout@@Base+0x27f8>
   15088:	b	14e38 <close_stdout@@Base+0x25e0>
   1508c:	mov	r2, r4
   15090:	asr	r3, r4, #31
   15094:	mvn	r0, #0
   15098:	mvn	r1, #0
   1509c:	strd	r2, [sp, #8]
   150a0:	bl	15a68 <close_stdout@@Base+0x3210>
   150a4:	ldrd	r2, [sp]
   150a8:	cmp	r3, r1
   150ac:	cmpeq	r2, r0
   150b0:	bhi	151c8 <close_stdout@@Base+0x2970>
   150b4:	ldr	ip, [sp, #4]
   150b8:	mul	r3, r4, ip
   150bc:	ldr	ip, [sp, #12]
   150c0:	mla	r3, r2, ip, r3
   150c4:	ldr	r2, [sp]
   150c8:	umull	r4, r5, r4, r2
   150cc:	add	r5, r3, r5
   150d0:	cmp	r1, r5
   150d4:	cmpeq	r0, r4
   150d8:	bcc	151c8 <close_stdout@@Base+0x2970>
   150dc:	mul	r2, r4, ip
   150e0:	ldr	ip, [sp, #8]
   150e4:	mov	r3, #0
   150e8:	umull	r0, r1, r4, ip
   150ec:	mla	r2, ip, r5, r2
   150f0:	strd	r0, [sp]
   150f4:	add	r2, r2, r1
   150f8:	str	r2, [sp, #4]
   150fc:	b	14d50 <close_stdout@@Base+0x24f8>
   15100:	asr	r5, r4, #31
   15104:	mov	r2, r4
   15108:	mvn	r0, #0
   1510c:	mvn	r1, #0
   15110:	mov	r3, r5
   15114:	bl	15a68 <close_stdout@@Base+0x3210>
   15118:	mov	ip, r7
   1511c:	str	r6, [sp, #20]
   15120:	mov	r2, #4
   15124:	ldrd	r6, [sp]
   15128:	mov	r3, #0
   1512c:	strd	r0, [sp, #8]
   15130:	ldrd	r0, [sp, #8]
   15134:	cmp	r1, r7
   15138:	cmpeq	r0, r6
   1513c:	mulcs	r0, r6, r5
   15140:	movcs	r1, #0
   15144:	mlacs	r0, r4, r7, r0
   15148:	movcc	r1, #1
   1514c:	umullcs	r6, r7, r6, r4
   15150:	mvncc	r6, #0
   15154:	mvncc	r7, #0
   15158:	orr	r3, r3, r1
   1515c:	addcs	r7, r0, r7
   15160:	subs	r2, r2, #1
   15164:	bne	15130 <close_stdout@@Base+0x28d8>
   15168:	b	14e38 <close_stdout@@Base+0x25e0>
   1516c:	ldrd	r0, [sp]
   15170:	strd	r0, [r9]
   15174:	mov	r0, r7
   15178:	b	14b40 <close_stdout@@Base+0x22e8>
   1517c:	ldrb	r3, [fp, #2]
   15180:	mov	r4, #1024	; 0x400
   15184:	cmp	r3, #66	; 0x42
   15188:	moveq	r6, #3
   1518c:	movne	r6, #1
   15190:	b	14c18 <close_stdout@@Base+0x23c0>
   15194:	mov	r6, #2
   15198:	mov	r4, #1000	; 0x3e8
   1519c:	b	14c18 <close_stdout@@Base+0x23c0>
   151a0:	mvn	r3, #0
   151a4:	mvn	r2, #0
   151a8:	strd	r2, [sp]
   151ac:	mov	r3, #1
   151b0:	b	14d50 <close_stdout@@Base+0x24f8>
   151b4:	mvn	r0, #0
   151b8:	mvn	r1, #0
   151bc:	mov	r3, #1
   151c0:	strd	r0, [sp]
   151c4:	b	14d50 <close_stdout@@Base+0x24f8>
   151c8:	mvn	r0, #0
   151cc:	mvn	r1, #0
   151d0:	mov	r3, #1
   151d4:	strd	r0, [sp]
   151d8:	b	14d50 <close_stdout@@Base+0x24f8>
   151dc:	bl	110b8 <__stack_chk_fail@plt>
   151e0:	ldr	r0, [pc, #32]	; 15208 <close_stdout@@Base+0x29b0>
   151e4:	mov	r2, #96	; 0x60
   151e8:	ldr	r1, [pc, #28]	; 1520c <close_stdout@@Base+0x29b4>
   151ec:	ldr	r3, [pc, #28]	; 15210 <close_stdout@@Base+0x29b8>
   151f0:	add	r0, pc, r0
   151f4:	add	r1, pc, r1
   151f8:	add	r3, pc, r3
   151fc:	bl	112c8 <__assert_fail@plt>
   15200:	andeq	r3, r1, ip, lsr #10
   15204:	andeq	r0, r0, r4, lsl #2
   15208:	andeq	r1, r0, r0, lsl sp
   1520c:	andeq	r1, r0, r4, lsr sp
   15210:	strdeq	r1, [r0], -ip
   15214:	push	{r4, r5, r6, lr}
   15218:	sub	sp, sp, #8
   1521c:	mov	r4, r0
   15220:	bl	11208 <fileno@plt>
   15224:	cmp	r0, #0
   15228:	mov	r0, r4
   1522c:	blt	152a8 <close_stdout@@Base+0x2a50>
   15230:	bl	1116c <__freading@plt>
   15234:	cmp	r0, #0
   15238:	bne	15274 <close_stdout@@Base+0x2a1c>
   1523c:	mov	r0, r4
   15240:	bl	152b4 <close_stdout@@Base+0x2a5c>
   15244:	cmp	r0, #0
   15248:	beq	152a4 <close_stdout@@Base+0x2a4c>
   1524c:	bl	111cc <__errno_location@plt>
   15250:	ldr	r6, [r0]
   15254:	mov	r5, r0
   15258:	mov	r0, r4
   1525c:	bl	1122c <fclose@plt>
   15260:	cmp	r6, #0
   15264:	mvnne	r0, #0
   15268:	strne	r6, [r5]
   1526c:	add	sp, sp, #8
   15270:	pop	{r4, r5, r6, pc}
   15274:	mov	r0, r4
   15278:	bl	11208 <fileno@plt>
   1527c:	mov	r1, #1
   15280:	mov	r2, #0
   15284:	mov	r3, #0
   15288:	str	r1, [sp]
   1528c:	bl	110f4 <lseek64@plt>
   15290:	mvn	r2, #0
   15294:	mvn	r3, #0
   15298:	cmp	r1, r3
   1529c:	cmpeq	r0, r2
   152a0:	bne	1523c <close_stdout@@Base+0x29e4>
   152a4:	mov	r0, r4
   152a8:	add	sp, sp, #8
   152ac:	pop	{r4, r5, r6, lr}
   152b0:	b	1122c <fclose@plt>
   152b4:	push	{r4, lr}
   152b8:	subs	r4, r0, #0
   152bc:	sub	sp, sp, #8
   152c0:	beq	152d0 <close_stdout@@Base+0x2a78>
   152c4:	bl	1116c <__freading@plt>
   152c8:	cmp	r0, #0
   152cc:	bne	152e0 <close_stdout@@Base+0x2a88>
   152d0:	mov	r0, r4
   152d4:	add	sp, sp, #8
   152d8:	pop	{r4, lr}
   152dc:	b	11040 <fflush@plt>
   152e0:	ldr	r3, [r4]
   152e4:	tst	r3, #256	; 0x100
   152e8:	beq	152d0 <close_stdout@@Base+0x2a78>
   152ec:	mov	r3, #1
   152f0:	mov	r0, r4
   152f4:	str	r3, [sp]
   152f8:	mov	r2, #0
   152fc:	mov	r3, #0
   15300:	bl	15314 <close_stdout@@Base+0x2abc>
   15304:	mov	r0, r4
   15308:	add	sp, sp, #8
   1530c:	pop	{r4, lr}
   15310:	b	11040 <fflush@plt>
   15314:	push	{r4, r5, r6, r7, lr}
   15318:	sub	sp, sp, #20
   1531c:	ldmib	r0, {r1, ip}
   15320:	mov	r6, r0
   15324:	ldr	r4, [sp, #40]	; 0x28
   15328:	cmp	ip, r1
   1532c:	beq	15344 <close_stdout@@Base+0x2aec>
   15330:	str	r4, [sp, #40]	; 0x28
   15334:	mov	r0, r6
   15338:	add	sp, sp, #20
   1533c:	pop	{r4, r5, r6, r7, lr}
   15340:	b	11238 <fseeko64@plt>
   15344:	ldr	ip, [r0, #20]
   15348:	ldr	r1, [r0, #16]
   1534c:	cmp	ip, r1
   15350:	bne	15330 <close_stdout@@Base+0x2ad8>
   15354:	ldr	r7, [r0, #36]	; 0x24
   15358:	cmp	r7, #0
   1535c:	bne	15330 <close_stdout@@Base+0x2ad8>
   15360:	str	r2, [sp, #12]
   15364:	mvn	r5, #0
   15368:	str	r3, [sp, #8]
   1536c:	bl	11208 <fileno@plt>
   15370:	str	r4, [sp]
   15374:	mvn	r4, #0
   15378:	ldr	r2, [sp, #12]
   1537c:	ldr	r3, [sp, #8]
   15380:	bl	110f4 <lseek64@plt>
   15384:	mov	r2, r0
   15388:	mov	r3, r1
   1538c:	cmp	r3, r5
   15390:	cmpeq	r2, r4
   15394:	beq	153b4 <close_stdout@@Base+0x2b5c>
   15398:	ldr	r1, [r6]
   1539c:	mov	r0, r7
   153a0:	strd	r2, [r6, #80]	; 0x50
   153a4:	bic	r3, r1, #16
   153a8:	str	r3, [r6]
   153ac:	add	sp, sp, #20
   153b0:	pop	{r4, r5, r6, r7, pc}
   153b4:	mvn	r0, #0
   153b8:	b	153ac <close_stdout@@Base+0x2b54>
   153bc:	push	{r4, r5, r6, lr}
   153c0:	mov	r4, r0
   153c4:	bl	11118 <__fpending@plt>
   153c8:	mov	r6, r0
   153cc:	mov	r0, r4
   153d0:	ldr	r4, [r4]
   153d4:	bl	15214 <close_stdout@@Base+0x29bc>
   153d8:	and	r4, r4, #32
   153dc:	adds	r5, r0, #0
   153e0:	movne	r5, #1
   153e4:	cmp	r4, #0
   153e8:	bne	15408 <close_stdout@@Base+0x2bb0>
   153ec:	cmp	r5, #0
   153f0:	beq	15400 <close_stdout@@Base+0x2ba8>
   153f4:	cmp	r6, #0
   153f8:	beq	15424 <close_stdout@@Base+0x2bcc>
   153fc:	mvn	r4, #0
   15400:	mov	r0, r4
   15404:	pop	{r4, r5, r6, pc}
   15408:	cmp	r5, #0
   1540c:	bne	153fc <close_stdout@@Base+0x2ba4>
   15410:	bl	111cc <__errno_location@plt>
   15414:	mvn	r4, #0
   15418:	str	r5, [r0]
   1541c:	mov	r0, r4
   15420:	pop	{r4, r5, r6, pc}
   15424:	bl	111cc <__errno_location@plt>
   15428:	ldr	r4, [r0]
   1542c:	subs	r4, r4, #9
   15430:	mvnne	r4, #0
   15434:	mov	r0, r4
   15438:	pop	{r4, r5, r6, pc}
   1543c:	ldr	r3, [pc, #984]	; 1581c <close_stdout@@Base+0x2fc4>
   15440:	mov	r0, #14
   15444:	ldr	r2, [pc, #980]	; 15820 <close_stdout@@Base+0x2fc8>
   15448:	add	r3, pc, r3
   1544c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15450:	sub	sp, sp, #132	; 0x84
   15454:	ldr	r6, [r3, r2]
   15458:	ldr	r3, [r6]
   1545c:	str	r3, [sp, #124]	; 0x7c
   15460:	bl	11274 <nl_langinfo@plt>
   15464:	subs	r5, r0, #0
   15468:	beq	1551c <close_stdout@@Base+0x2cc4>
   1546c:	ldr	r3, [pc, #944]	; 15824 <close_stdout@@Base+0x2fcc>
   15470:	ldr	r4, [pc, r3]
   15474:	cmp	r4, #0
   15478:	beq	15528 <close_stdout@@Base+0x2cd0>
   1547c:	ldrb	r7, [r4]
   15480:	cmp	r7, #0
   15484:	bne	154b8 <close_stdout@@Base+0x2c60>
   15488:	b	154f0 <close_stdout@@Base+0x2c98>
   1548c:	mov	r0, r4
   15490:	bl	111a8 <strlen@plt>
   15494:	add	r0, r0, #1
   15498:	add	r7, r4, r0
   1549c:	mov	r0, r7
   154a0:	bl	111a8 <strlen@plt>
   154a4:	add	r0, r0, #1
   154a8:	add	r4, r7, r0
   154ac:	ldrb	r7, [r7, r0]
   154b0:	cmp	r7, #0
   154b4:	beq	154f0 <close_stdout@@Base+0x2c98>
   154b8:	mov	r0, r5
   154bc:	mov	r1, r4
   154c0:	bl	11028 <strcmp@plt>
   154c4:	cmp	r0, #0
   154c8:	beq	154e0 <close_stdout@@Base+0x2c88>
   154cc:	cmp	r7, #42	; 0x2a
   154d0:	bne	1548c <close_stdout@@Base+0x2c34>
   154d4:	ldrb	r3, [r4, #1]
   154d8:	cmp	r3, #0
   154dc:	bne	1548c <close_stdout@@Base+0x2c34>
   154e0:	mov	r0, r4
   154e4:	bl	111a8 <strlen@plt>
   154e8:	add	r0, r0, #1
   154ec:	add	r5, r4, r0
   154f0:	ldrb	r3, [r5]
   154f4:	cmp	r3, #0
   154f8:	ldreq	r5, [pc, #808]	; 15828 <close_stdout@@Base+0x2fd0>
   154fc:	addeq	r5, pc, r5
   15500:	ldr	r2, [sp, #124]	; 0x7c
   15504:	mov	r0, r5
   15508:	ldr	r3, [r6]
   1550c:	cmp	r2, r3
   15510:	bne	157f0 <close_stdout@@Base+0x2f98>
   15514:	add	sp, sp, #132	; 0x84
   15518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1551c:	ldr	r5, [pc, #776]	; 1582c <close_stdout@@Base+0x2fd4>
   15520:	add	r5, pc, r5
   15524:	b	1546c <close_stdout@@Base+0x2c14>
   15528:	ldr	r0, [pc, #768]	; 15830 <close_stdout@@Base+0x2fd8>
   1552c:	add	r0, pc, r0
   15530:	bl	11148 <getenv@plt>
   15534:	subs	r8, r0, #0
   15538:	beq	157c8 <close_stdout@@Base+0x2f70>
   1553c:	ldrb	r3, [r8]
   15540:	cmp	r3, #0
   15544:	beq	1575c <close_stdout@@Base+0x2f04>
   15548:	bl	111a8 <strlen@plt>
   1554c:	subs	sl, r0, #0
   15550:	subne	r3, sl, #1
   15554:	bne	1576c <close_stdout@@Base+0x2f14>
   15558:	mov	r9, #0
   1555c:	mov	fp, r9
   15560:	add	r9, sl, r9
   15564:	add	r0, r9, #14
   15568:	bl	11154 <malloc@plt>
   1556c:	subs	r7, r0, #0
   15570:	beq	157bc <close_stdout@@Base+0x2f64>
   15574:	mov	r1, r8
   15578:	mov	r2, sl
   1557c:	bl	11070 <memcpy@plt>
   15580:	cmp	fp, #0
   15584:	add	ip, r7, r9
   15588:	movne	r3, #47	; 0x2f
   1558c:	strbne	r3, [r7, sl]
   15590:	ldr	r3, [pc, #668]	; 15834 <close_stdout@@Base+0x2fdc>
   15594:	add	r3, pc, r3
   15598:	ldm	r3!, {r0, r1, r2}
   1559c:	ldrh	r3, [r3]
   155a0:	str	r0, [r7, r9]
   155a4:	mov	r0, r7
   155a8:	str	r1, [ip, #4]
   155ac:	mov	r1, #32768	; 0x8000
   155b0:	strh	r3, [ip, #12]
   155b4:	str	r2, [ip, #8]
   155b8:	bl	1113c <open64@plt>
   155bc:	subs	r8, r0, #0
   155c0:	blt	15784 <close_stdout@@Base+0x2f2c>
   155c4:	ldr	r1, [pc, #620]	; 15838 <close_stdout@@Base+0x2fe0>
   155c8:	add	r1, pc, r1
   155cc:	bl	10ff8 <fdopen@plt>
   155d0:	subs	fp, r0, #0
   155d4:	beq	157dc <close_stdout@@Base+0x2f84>
   155d8:	ldr	r0, [pc, #604]	; 1583c <close_stdout@@Base+0x2fe4>
   155dc:	add	sl, sp, #20
   155e0:	add	r9, sp, #72	; 0x48
   155e4:	mov	r8, #0
   155e8:	add	r0, pc, r0
   155ec:	str	r0, [sp, #12]
   155f0:	ldr	r3, [fp, #4]
   155f4:	ldr	r2, [fp, #8]
   155f8:	cmp	r3, r2
   155fc:	bcs	156e8 <close_stdout@@Base+0x2e90>
   15600:	add	r2, r3, #1
   15604:	str	r2, [fp, #4]
   15608:	ldrb	r0, [r3]
   1560c:	cmp	r0, #32
   15610:	beq	155f0 <close_stdout@@Base+0x2d98>
   15614:	sub	r3, r0, #9
   15618:	cmp	r3, #1
   1561c:	bls	155f0 <close_stdout@@Base+0x2d98>
   15620:	cmp	r0, #35	; 0x23
   15624:	beq	156fc <close_stdout@@Base+0x2ea4>
   15628:	mov	r1, fp
   1562c:	bl	111c0 <ungetc@plt>
   15630:	mov	r0, fp
   15634:	ldr	r1, [sp, #12]
   15638:	mov	r2, sl
   1563c:	mov	r3, r9
   15640:	bl	111f0 <fscanf@plt>
   15644:	cmp	r0, #1
   15648:	ble	1572c <close_stdout@@Base+0x2ed4>
   1564c:	mov	r0, sl
   15650:	bl	111a8 <strlen@plt>
   15654:	str	r0, [sp, #8]
   15658:	mov	r0, r9
   1565c:	bl	111a8 <strlen@plt>
   15660:	cmp	r8, #0
   15664:	mov	r2, r0
   15668:	bne	15790 <close_stdout@@Base+0x2f38>
   1566c:	ldr	r3, [sp, #8]
   15670:	str	r2, [sp]
   15674:	add	r8, r0, r3
   15678:	add	r0, r8, #3
   1567c:	add	r8, r8, #2
   15680:	bl	11154 <malloc@plt>
   15684:	ldr	r2, [sp]
   15688:	mov	r3, r0
   1568c:	cmp	r3, #0
   15690:	beq	157f4 <close_stdout@@Base+0x2f9c>
   15694:	ldr	r0, [sp, #8]
   15698:	movw	r1, #65534	; 0xfffe
   1569c:	movt	r1, #65535	; 0xffff
   156a0:	rsb	r2, r2, r8
   156a4:	rsb	r1, r0, r1
   156a8:	stm	sp, {r2, r3}
   156ac:	add	r0, r1, r2
   156b0:	mov	r1, sl
   156b4:	add	r0, r3, r0
   156b8:	mov	r4, r3
   156bc:	bl	1110c <strcpy@plt>
   156c0:	ldr	r2, [sp]
   156c4:	ldr	r3, [sp, #4]
   156c8:	mov	r1, r9
   156cc:	sub	r0, r2, #1
   156d0:	add	r0, r3, r0
   156d4:	bl	1110c <strcpy@plt>
   156d8:	ldr	r3, [fp, #4]
   156dc:	ldr	r2, [fp, #8]
   156e0:	cmp	r3, r2
   156e4:	bcc	15600 <close_stdout@@Base+0x2da8>
   156e8:	mov	r0, fp
   156ec:	bl	11244 <__uflow@plt>
   156f0:	cmn	r0, #1
   156f4:	beq	1572c <close_stdout@@Base+0x2ed4>
   156f8:	b	1560c <close_stdout@@Base+0x2db4>
   156fc:	ldr	r3, [fp, #4]
   15700:	ldr	r2, [fp, #8]
   15704:	cmp	r3, r2
   15708:	bcs	15810 <close_stdout@@Base+0x2fb8>
   1570c:	add	r2, r3, #1
   15710:	str	r2, [fp, #4]
   15714:	ldrb	r0, [r3]
   15718:	cmp	r0, #10
   1571c:	cmnne	r0, #1
   15720:	bne	156fc <close_stdout@@Base+0x2ea4>
   15724:	cmn	r0, #1
   15728:	bne	155f0 <close_stdout@@Base+0x2d98>
   1572c:	mov	r0, fp
   15730:	bl	15214 <close_stdout@@Base+0x29bc>
   15734:	cmp	r8, #0
   15738:	beq	15784 <close_stdout@@Base+0x2f2c>
   1573c:	mov	r3, #0
   15740:	strb	r3, [r4, r8]
   15744:	mov	r0, r7
   15748:	bl	11058 <free@plt>
   1574c:	ldr	r3, [pc, #236]	; 15840 <close_stdout@@Base+0x2fe8>
   15750:	add	r3, pc, r3
   15754:	str	r4, [r3]
   15758:	b	1547c <close_stdout@@Base+0x2c24>
   1575c:	ldr	r8, [pc, #224]	; 15844 <close_stdout@@Base+0x2fec>
   15760:	mov	r3, #7
   15764:	mov	sl, #8
   15768:	add	r8, pc, r8
   1576c:	ldrb	r3, [r8, r3]
   15770:	cmp	r3, #47	; 0x2f
   15774:	movne	r9, #1
   15778:	movne	fp, r9
   1577c:	bne	15560 <close_stdout@@Base+0x2d08>
   15780:	b	15558 <close_stdout@@Base+0x2d00>
   15784:	ldr	r4, [pc, #188]	; 15848 <close_stdout@@Base+0x2ff0>
   15788:	add	r4, pc, r4
   1578c:	b	15744 <close_stdout@@Base+0x2eec>
   15790:	ldr	r0, [sp, #8]
   15794:	str	r2, [sp]
   15798:	add	r3, r0, r2
   1579c:	mov	r0, r4
   157a0:	add	r8, r3, r8
   157a4:	add	r1, r8, #3
   157a8:	add	r8, r8, #2
   157ac:	bl	110c4 <realloc@plt>
   157b0:	ldr	r2, [sp]
   157b4:	mov	r3, r0
   157b8:	b	1568c <close_stdout@@Base+0x2e34>
   157bc:	ldr	r4, [pc, #136]	; 1584c <close_stdout@@Base+0x2ff4>
   157c0:	add	r4, pc, r4
   157c4:	b	1574c <close_stdout@@Base+0x2ef4>
   157c8:	ldr	r8, [pc, #128]	; 15850 <close_stdout@@Base+0x2ff8>
   157cc:	mov	r3, #7
   157d0:	mov	sl, #8
   157d4:	add	r8, pc, r8
   157d8:	b	1576c <close_stdout@@Base+0x2f14>
   157dc:	ldr	r4, [pc, #112]	; 15854 <close_stdout@@Base+0x2ffc>
   157e0:	mov	r0, r8
   157e4:	add	r4, pc, r4
   157e8:	bl	112bc <close@plt>
   157ec:	b	15744 <close_stdout@@Base+0x2eec>
   157f0:	bl	110b8 <__stack_chk_fail@plt>
   157f4:	mov	r0, r4
   157f8:	ldr	r4, [pc, #88]	; 15858 <close_stdout@@Base+0x3000>
   157fc:	bl	11058 <free@plt>
   15800:	mov	r0, fp
   15804:	add	r4, pc, r4
   15808:	bl	15214 <close_stdout@@Base+0x29bc>
   1580c:	b	15744 <close_stdout@@Base+0x2eec>
   15810:	mov	r0, fp
   15814:	bl	11244 <__uflow@plt>
   15818:	b	15718 <close_stdout@@Base+0x2ec0>
   1581c:			; <UNDEFINED> instruction: 0x00012bb0
   15820:	andeq	r0, r0, r4, lsl #2
   15824:	andeq	r2, r1, r4, asr lr
   15828:	andeq	r1, r0, r8, asr #20
   1582c:	andeq	r1, r0, r8, ror #7
   15830:	andeq	r1, r0, r0, lsr #20
   15834:	andeq	r1, r0, r8, asr #19
   15838:	andeq	r1, r0, r4, lsr #19
   1583c:	andeq	r1, r0, r8, lsl #19
   15840:	andeq	r2, r1, r4, ror fp
   15844:	ldrdeq	r1, [r0], -r0
   15848:	andeq	r1, r0, r0, lsl #3
   1584c:	andeq	r1, r0, r8, asr #2
   15850:	andeq	r1, r0, r4, ror #14
   15854:	andeq	r1, r0, r4, lsr #2
   15858:	andeq	r1, r0, r4, lsl #2
   1585c:	subs	r2, r1, #1
   15860:	bxeq	lr
   15864:	bcc	15a3c <close_stdout@@Base+0x31e4>
   15868:	cmp	r0, r1
   1586c:	bls	15a20 <close_stdout@@Base+0x31c8>
   15870:	tst	r1, r2
   15874:	beq	15a2c <close_stdout@@Base+0x31d4>
   15878:	clz	r3, r0
   1587c:	clz	r2, r1
   15880:	sub	r3, r2, r3
   15884:	rsbs	r3, r3, #31
   15888:	addne	r3, r3, r3, lsl #1
   1588c:	mov	r2, #0
   15890:	addne	pc, pc, r3, lsl #2
   15894:	nop	{0}
   15898:	cmp	r0, r1, lsl #31
   1589c:	adc	r2, r2, r2
   158a0:	subcs	r0, r0, r1, lsl #31
   158a4:	cmp	r0, r1, lsl #30
   158a8:	adc	r2, r2, r2
   158ac:	subcs	r0, r0, r1, lsl #30
   158b0:	cmp	r0, r1, lsl #29
   158b4:	adc	r2, r2, r2
   158b8:	subcs	r0, r0, r1, lsl #29
   158bc:	cmp	r0, r1, lsl #28
   158c0:	adc	r2, r2, r2
   158c4:	subcs	r0, r0, r1, lsl #28
   158c8:	cmp	r0, r1, lsl #27
   158cc:	adc	r2, r2, r2
   158d0:	subcs	r0, r0, r1, lsl #27
   158d4:	cmp	r0, r1, lsl #26
   158d8:	adc	r2, r2, r2
   158dc:	subcs	r0, r0, r1, lsl #26
   158e0:	cmp	r0, r1, lsl #25
   158e4:	adc	r2, r2, r2
   158e8:	subcs	r0, r0, r1, lsl #25
   158ec:	cmp	r0, r1, lsl #24
   158f0:	adc	r2, r2, r2
   158f4:	subcs	r0, r0, r1, lsl #24
   158f8:	cmp	r0, r1, lsl #23
   158fc:	adc	r2, r2, r2
   15900:	subcs	r0, r0, r1, lsl #23
   15904:	cmp	r0, r1, lsl #22
   15908:	adc	r2, r2, r2
   1590c:	subcs	r0, r0, r1, lsl #22
   15910:	cmp	r0, r1, lsl #21
   15914:	adc	r2, r2, r2
   15918:	subcs	r0, r0, r1, lsl #21
   1591c:	cmp	r0, r1, lsl #20
   15920:	adc	r2, r2, r2
   15924:	subcs	r0, r0, r1, lsl #20
   15928:	cmp	r0, r1, lsl #19
   1592c:	adc	r2, r2, r2
   15930:	subcs	r0, r0, r1, lsl #19
   15934:	cmp	r0, r1, lsl #18
   15938:	adc	r2, r2, r2
   1593c:	subcs	r0, r0, r1, lsl #18
   15940:	cmp	r0, r1, lsl #17
   15944:	adc	r2, r2, r2
   15948:	subcs	r0, r0, r1, lsl #17
   1594c:	cmp	r0, r1, lsl #16
   15950:	adc	r2, r2, r2
   15954:	subcs	r0, r0, r1, lsl #16
   15958:	cmp	r0, r1, lsl #15
   1595c:	adc	r2, r2, r2
   15960:	subcs	r0, r0, r1, lsl #15
   15964:	cmp	r0, r1, lsl #14
   15968:	adc	r2, r2, r2
   1596c:	subcs	r0, r0, r1, lsl #14
   15970:	cmp	r0, r1, lsl #13
   15974:	adc	r2, r2, r2
   15978:	subcs	r0, r0, r1, lsl #13
   1597c:	cmp	r0, r1, lsl #12
   15980:	adc	r2, r2, r2
   15984:	subcs	r0, r0, r1, lsl #12
   15988:	cmp	r0, r1, lsl #11
   1598c:	adc	r2, r2, r2
   15990:	subcs	r0, r0, r1, lsl #11
   15994:	cmp	r0, r1, lsl #10
   15998:	adc	r2, r2, r2
   1599c:	subcs	r0, r0, r1, lsl #10
   159a0:	cmp	r0, r1, lsl #9
   159a4:	adc	r2, r2, r2
   159a8:	subcs	r0, r0, r1, lsl #9
   159ac:	cmp	r0, r1, lsl #8
   159b0:	adc	r2, r2, r2
   159b4:	subcs	r0, r0, r1, lsl #8
   159b8:	cmp	r0, r1, lsl #7
   159bc:	adc	r2, r2, r2
   159c0:	subcs	r0, r0, r1, lsl #7
   159c4:	cmp	r0, r1, lsl #6
   159c8:	adc	r2, r2, r2
   159cc:	subcs	r0, r0, r1, lsl #6
   159d0:	cmp	r0, r1, lsl #5
   159d4:	adc	r2, r2, r2
   159d8:	subcs	r0, r0, r1, lsl #5
   159dc:	cmp	r0, r1, lsl #4
   159e0:	adc	r2, r2, r2
   159e4:	subcs	r0, r0, r1, lsl #4
   159e8:	cmp	r0, r1, lsl #3
   159ec:	adc	r2, r2, r2
   159f0:	subcs	r0, r0, r1, lsl #3
   159f4:	cmp	r0, r1, lsl #2
   159f8:	adc	r2, r2, r2
   159fc:	subcs	r0, r0, r1, lsl #2
   15a00:	cmp	r0, r1, lsl #1
   15a04:	adc	r2, r2, r2
   15a08:	subcs	r0, r0, r1, lsl #1
   15a0c:	cmp	r0, r1
   15a10:	adc	r2, r2, r2
   15a14:	subcs	r0, r0, r1
   15a18:	mov	r0, r2
   15a1c:	bx	lr
   15a20:	moveq	r0, #1
   15a24:	movne	r0, #0
   15a28:	bx	lr
   15a2c:	clz	r2, r1
   15a30:	rsb	r2, r2, #31
   15a34:	lsr	r0, r0, r2
   15a38:	bx	lr
   15a3c:	cmp	r0, #0
   15a40:	mvnne	r0, #0
   15a44:	b	15aa4 <close_stdout@@Base+0x324c>
   15a48:	cmp	r1, #0
   15a4c:	beq	15a3c <close_stdout@@Base+0x31e4>
   15a50:	push	{r0, r1, lr}
   15a54:	bl	1585c <close_stdout@@Base+0x3004>
   15a58:	pop	{r1, r2, lr}
   15a5c:	mul	r3, r2, r0
   15a60:	sub	r1, r1, r3
   15a64:	bx	lr
   15a68:	cmp	r3, #0
   15a6c:	cmpeq	r2, #0
   15a70:	bne	15a88 <close_stdout@@Base+0x3230>
   15a74:	cmp	r1, #0
   15a78:	cmpeq	r0, #0
   15a7c:	mvnne	r1, #0
   15a80:	mvnne	r0, #0
   15a84:	b	15aa4 <close_stdout@@Base+0x324c>
   15a88:	sub	sp, sp, #8
   15a8c:	push	{sp, lr}
   15a90:	bl	15af0 <close_stdout@@Base+0x3298>
   15a94:	ldr	lr, [sp, #4]
   15a98:	add	sp, sp, #8
   15a9c:	pop	{r2, r3}
   15aa0:	bx	lr
   15aa4:	push	{r1, lr}
   15aa8:	mov	r0, #8
   15aac:	bl	1101c <raise@plt>
   15ab0:	pop	{r1, pc}
   15ab4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ab8:	mov	r8, r2
   15abc:	mov	r6, r0
   15ac0:	mov	r7, r1
   15ac4:	mov	sl, r3
   15ac8:	ldr	r9, [sp, #32]
   15acc:	bl	15b2c <close_stdout@@Base+0x32d4>
   15ad0:	umull	r4, r5, r8, r0
   15ad4:	mul	r8, r8, r1
   15ad8:	mla	r2, r0, sl, r8
   15adc:	add	r5, r2, r5
   15ae0:	subs	r4, r6, r4
   15ae4:	sbc	r5, r7, r5
   15ae8:	strd	r4, [r9]
   15aec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15af0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15af4:	mov	r8, r2
   15af8:	mov	r6, r0
   15afc:	mov	r7, r1
   15b00:	mov	r5, r3
   15b04:	ldr	r9, [sp, #32]
   15b08:	bl	15fb8 <close_stdout@@Base+0x3760>
   15b0c:	mul	r3, r0, r5
   15b10:	umull	r4, r5, r0, r8
   15b14:	mla	r8, r8, r1, r3
   15b18:	add	r5, r8, r5
   15b1c:	subs	r4, r6, r4
   15b20:	sbc	r5, r7, r5
   15b24:	strd	r4, [r9]
   15b28:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b30:	rsbs	r4, r0, #0
   15b34:	rsc	r5, r1, #0
   15b38:	cmp	r1, #0
   15b3c:	mvn	r6, #0
   15b40:	sub	sp, sp, #12
   15b44:	movge	r4, r0
   15b48:	movge	r5, r1
   15b4c:	movge	r6, #0
   15b50:	cmp	r3, #0
   15b54:	blt	15d8c <close_stdout@@Base+0x3534>
   15b58:	cmp	r3, #0
   15b5c:	mov	sl, r4
   15b60:	mov	ip, r5
   15b64:	mov	r0, r2
   15b68:	mov	r1, r3
   15b6c:	mov	r8, r2
   15b70:	mov	r7, r4
   15b74:	mov	r9, r5
   15b78:	bne	15c70 <close_stdout@@Base+0x3418>
   15b7c:	cmp	r2, r5
   15b80:	bls	15cac <close_stdout@@Base+0x3454>
   15b84:	clz	r3, r2
   15b88:	cmp	r3, #0
   15b8c:	rsbne	r2, r3, #32
   15b90:	lslne	r8, r0, r3
   15b94:	lsrne	r2, r4, r2
   15b98:	lslne	r7, r4, r3
   15b9c:	orrne	r9, r2, r5, lsl r3
   15ba0:	lsr	r4, r8, #16
   15ba4:	uxth	sl, r8
   15ba8:	mov	r1, r4
   15bac:	mov	r0, r9
   15bb0:	bl	1585c <close_stdout@@Base+0x3004>
   15bb4:	mov	r1, r4
   15bb8:	mov	fp, r0
   15bbc:	mov	r0, r9
   15bc0:	bl	15a48 <close_stdout@@Base+0x31f0>
   15bc4:	mul	r0, sl, fp
   15bc8:	lsr	r2, r7, #16
   15bcc:	orr	r1, r2, r1, lsl #16
   15bd0:	cmp	r0, r1
   15bd4:	bls	15bf8 <close_stdout@@Base+0x33a0>
   15bd8:	adds	r1, r1, r8
   15bdc:	sub	r3, fp, #1
   15be0:	bcs	15bf4 <close_stdout@@Base+0x339c>
   15be4:	cmp	r0, r1
   15be8:	subhi	fp, fp, #2
   15bec:	addhi	r1, r1, r8
   15bf0:	bhi	15bf8 <close_stdout@@Base+0x33a0>
   15bf4:	mov	fp, r3
   15bf8:	rsb	r9, r0, r1
   15bfc:	mov	r1, r4
   15c00:	uxth	r7, r7
   15c04:	mov	r0, r9
   15c08:	bl	1585c <close_stdout@@Base+0x3004>
   15c0c:	mov	r1, r4
   15c10:	mov	r5, r0
   15c14:	mov	r0, r9
   15c18:	bl	15a48 <close_stdout@@Base+0x31f0>
   15c1c:	mul	sl, sl, r5
   15c20:	orr	r1, r7, r1, lsl #16
   15c24:	cmp	sl, r1
   15c28:	bls	15c48 <close_stdout@@Base+0x33f0>
   15c2c:	adds	r8, r1, r8
   15c30:	sub	r3, r5, #1
   15c34:	bcs	15c44 <close_stdout@@Base+0x33ec>
   15c38:	cmp	sl, r8
   15c3c:	subhi	r5, r5, #2
   15c40:	bhi	15c48 <close_stdout@@Base+0x33f0>
   15c44:	mov	r5, r3
   15c48:	orr	r3, r5, fp, lsl #16
   15c4c:	mov	r4, #0
   15c50:	cmp	r6, #0
   15c54:	mov	r0, r3
   15c58:	mov	r1, r4
   15c5c:	beq	15c68 <close_stdout@@Base+0x3410>
   15c60:	rsbs	r0, r0, #0
   15c64:	rsc	r1, r1, #0
   15c68:	add	sp, sp, #12
   15c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c70:	cmp	r3, r5
   15c74:	movhi	r4, #0
   15c78:	movhi	r3, r4
   15c7c:	bhi	15c50 <close_stdout@@Base+0x33f8>
   15c80:	clz	r5, r1
   15c84:	cmp	r5, #0
   15c88:	bne	15e78 <close_stdout@@Base+0x3620>
   15c8c:	cmp	r1, ip
   15c90:	cmpcs	r2, sl
   15c94:	movhi	r4, #0
   15c98:	movls	r4, #1
   15c9c:	movls	r3, #1
   15ca0:	movls	r4, r5
   15ca4:	movhi	r3, r4
   15ca8:	b	15c50 <close_stdout@@Base+0x33f8>
   15cac:	cmp	r2, #0
   15cb0:	bne	15cc4 <close_stdout@@Base+0x346c>
   15cb4:	mov	r1, r2
   15cb8:	mov	r0, #1
   15cbc:	bl	1585c <close_stdout@@Base+0x3004>
   15cc0:	mov	r8, r0
   15cc4:	clz	r3, r8
   15cc8:	cmp	r3, #0
   15ccc:	bne	15d9c <close_stdout@@Base+0x3544>
   15cd0:	rsb	r9, r8, r9
   15cd4:	lsr	r5, r8, #16
   15cd8:	uxth	sl, r8
   15cdc:	mov	r4, #1
   15ce0:	mov	r1, r5
   15ce4:	mov	r0, r9
   15ce8:	bl	1585c <close_stdout@@Base+0x3004>
   15cec:	mov	r1, r5
   15cf0:	mov	fp, r0
   15cf4:	mov	r0, r9
   15cf8:	bl	15a48 <close_stdout@@Base+0x31f0>
   15cfc:	mul	r0, sl, fp
   15d00:	lsr	r2, r7, #16
   15d04:	orr	r1, r2, r1, lsl #16
   15d08:	cmp	r0, r1
   15d0c:	bls	15d2c <close_stdout@@Base+0x34d4>
   15d10:	adds	r1, r1, r8
   15d14:	sub	r3, fp, #1
   15d18:	bcs	15f98 <close_stdout@@Base+0x3740>
   15d1c:	cmp	r0, r1
   15d20:	subhi	fp, fp, #2
   15d24:	addhi	r1, r1, r8
   15d28:	bls	15f98 <close_stdout@@Base+0x3740>
   15d2c:	rsb	r2, r0, r1
   15d30:	mov	r1, r5
   15d34:	str	r2, [sp]
   15d38:	uxth	r7, r7
   15d3c:	mov	r0, r2
   15d40:	bl	1585c <close_stdout@@Base+0x3004>
   15d44:	ldr	r2, [sp]
   15d48:	mov	r1, r5
   15d4c:	mov	r9, r0
   15d50:	mov	r0, r2
   15d54:	bl	15a48 <close_stdout@@Base+0x31f0>
   15d58:	mul	sl, sl, r9
   15d5c:	orr	r1, r7, r1, lsl #16
   15d60:	cmp	sl, r1
   15d64:	bls	15d84 <close_stdout@@Base+0x352c>
   15d68:	adds	r8, r1, r8
   15d6c:	sub	r3, r9, #1
   15d70:	bcs	15d80 <close_stdout@@Base+0x3528>
   15d74:	cmp	sl, r8
   15d78:	subhi	r9, r9, #2
   15d7c:	bhi	15d84 <close_stdout@@Base+0x352c>
   15d80:	mov	r9, r3
   15d84:	orr	r3, r9, fp, lsl #16
   15d88:	b	15c50 <close_stdout@@Base+0x33f8>
   15d8c:	mvn	r6, r6
   15d90:	rsbs	r2, r2, #0
   15d94:	rsc	r3, r3, #0
   15d98:	b	15b58 <close_stdout@@Base+0x3300>
   15d9c:	lsl	r8, r8, r3
   15da0:	rsb	fp, r3, #32
   15da4:	lsr	r4, r9, fp
   15da8:	lsr	fp, r7, fp
   15dac:	lsr	r5, r8, #16
   15db0:	orr	fp, fp, r9, lsl r3
   15db4:	mov	r0, r4
   15db8:	lsl	r7, r7, r3
   15dbc:	mov	r1, r5
   15dc0:	uxth	sl, r8
   15dc4:	bl	1585c <close_stdout@@Base+0x3004>
   15dc8:	mov	r1, r5
   15dcc:	mov	r3, r0
   15dd0:	mov	r0, r4
   15dd4:	str	r3, [sp]
   15dd8:	bl	15a48 <close_stdout@@Base+0x31f0>
   15ddc:	ldr	r3, [sp]
   15de0:	lsr	r2, fp, #16
   15de4:	mul	r0, sl, r3
   15de8:	orr	r1, r2, r1, lsl #16
   15dec:	cmp	r0, r1
   15df0:	bls	15e10 <close_stdout@@Base+0x35b8>
   15df4:	adds	r1, r1, r8
   15df8:	sub	r2, r3, #1
   15dfc:	bcs	15fb0 <close_stdout@@Base+0x3758>
   15e00:	cmp	r0, r1
   15e04:	subhi	r3, r3, #2
   15e08:	addhi	r1, r1, r8
   15e0c:	bls	15fb0 <close_stdout@@Base+0x3758>
   15e10:	rsb	r9, r0, r1
   15e14:	mov	r1, r5
   15e18:	str	r3, [sp]
   15e1c:	uxth	fp, fp
   15e20:	mov	r0, r9
   15e24:	bl	1585c <close_stdout@@Base+0x3004>
   15e28:	mov	r1, r5
   15e2c:	mov	r4, r0
   15e30:	mov	r0, r9
   15e34:	bl	15a48 <close_stdout@@Base+0x31f0>
   15e38:	mul	r9, sl, r4
   15e3c:	ldr	r3, [sp]
   15e40:	orr	r1, fp, r1, lsl #16
   15e44:	cmp	r9, r1
   15e48:	bls	15e6c <close_stdout@@Base+0x3614>
   15e4c:	adds	r1, r1, r8
   15e50:	sub	r2, r4, #1
   15e54:	bcs	15e68 <close_stdout@@Base+0x3610>
   15e58:	cmp	r9, r1
   15e5c:	subhi	r4, r4, #2
   15e60:	addhi	r1, r1, r8
   15e64:	bhi	15e6c <close_stdout@@Base+0x3614>
   15e68:	mov	r4, r2
   15e6c:	rsb	r9, r9, r1
   15e70:	orr	r4, r4, r3, lsl #16
   15e74:	b	15ce0 <close_stdout@@Base+0x3488>
   15e78:	rsb	sl, r5, #32
   15e7c:	lsl	r3, r2, r5
   15e80:	lsr	r0, r2, sl
   15e84:	lsr	r2, ip, sl
   15e88:	orr	r4, r0, r1, lsl r5
   15e8c:	lsr	sl, r7, sl
   15e90:	mov	r0, r2
   15e94:	orr	sl, sl, ip, lsl r5
   15e98:	lsr	r9, r4, #16
   15e9c:	str	r3, [sp, #4]
   15ea0:	str	r2, [sp]
   15ea4:	uxth	fp, r4
   15ea8:	mov	r1, r9
   15eac:	bl	1585c <close_stdout@@Base+0x3004>
   15eb0:	ldr	r2, [sp]
   15eb4:	mov	r1, r9
   15eb8:	mov	r8, r0
   15ebc:	mov	r0, r2
   15ec0:	bl	15a48 <close_stdout@@Base+0x31f0>
   15ec4:	mul	r0, fp, r8
   15ec8:	lsr	r2, sl, #16
   15ecc:	orr	r1, r2, r1, lsl #16
   15ed0:	cmp	r0, r1
   15ed4:	bls	15ef4 <close_stdout@@Base+0x369c>
   15ed8:	adds	r1, r1, r4
   15edc:	sub	r2, r8, #1
   15ee0:	bcs	15fa8 <close_stdout@@Base+0x3750>
   15ee4:	cmp	r0, r1
   15ee8:	subhi	r8, r8, #2
   15eec:	addhi	r1, r1, r4
   15ef0:	bls	15fa8 <close_stdout@@Base+0x3750>
   15ef4:	rsb	ip, r0, r1
   15ef8:	mov	r1, r9
   15efc:	str	ip, [sp]
   15f00:	mov	r0, ip
   15f04:	bl	1585c <close_stdout@@Base+0x3004>
   15f08:	ldr	ip, [sp]
   15f0c:	mov	r1, r9
   15f10:	mov	r2, r0
   15f14:	mov	r0, ip
   15f18:	str	r2, [sp]
   15f1c:	bl	15a48 <close_stdout@@Base+0x31f0>
   15f20:	ldr	r2, [sp]
   15f24:	uxth	ip, sl
   15f28:	mul	fp, fp, r2
   15f2c:	orr	ip, ip, r1, lsl #16
   15f30:	cmp	fp, ip
   15f34:	bls	15f54 <close_stdout@@Base+0x36fc>
   15f38:	adds	ip, ip, r4
   15f3c:	sub	r1, r2, #1
   15f40:	bcs	15fa0 <close_stdout@@Base+0x3748>
   15f44:	cmp	fp, ip
   15f48:	subhi	r2, r2, #2
   15f4c:	addhi	ip, ip, r4
   15f50:	bls	15fa0 <close_stdout@@Base+0x3748>
   15f54:	ldr	r0, [sp, #4]
   15f58:	orr	r1, r2, r8, lsl #16
   15f5c:	rsb	fp, fp, ip
   15f60:	umull	r2, r3, r1, r0
   15f64:	cmp	fp, r3
   15f68:	bcc	15f8c <close_stdout@@Base+0x3734>
   15f6c:	movne	r4, #0
   15f70:	moveq	r4, #1
   15f74:	cmp	r2, r7, lsl r5
   15f78:	movls	r4, #0
   15f7c:	andhi	r4, r4, #1
   15f80:	cmp	r4, #0
   15f84:	moveq	r3, r1
   15f88:	beq	15c50 <close_stdout@@Base+0x33f8>
   15f8c:	sub	r3, r1, #1
   15f90:	mov	r4, #0
   15f94:	b	15c50 <close_stdout@@Base+0x33f8>
   15f98:	mov	fp, r3
   15f9c:	b	15d2c <close_stdout@@Base+0x34d4>
   15fa0:	mov	r2, r1
   15fa4:	b	15f54 <close_stdout@@Base+0x36fc>
   15fa8:	mov	r8, r2
   15fac:	b	15ef4 <close_stdout@@Base+0x369c>
   15fb0:	mov	r3, r2
   15fb4:	b	15e10 <close_stdout@@Base+0x35b8>
   15fb8:	cmp	r3, #0
   15fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fc0:	mov	r6, r0
   15fc4:	sub	sp, sp, #12
   15fc8:	mov	r5, r1
   15fcc:	mov	r7, r0
   15fd0:	mov	r4, r2
   15fd4:	mov	r8, r1
   15fd8:	bne	160b8 <close_stdout@@Base+0x3860>
   15fdc:	cmp	r2, r1
   15fe0:	bls	160f4 <close_stdout@@Base+0x389c>
   15fe4:	clz	r3, r2
   15fe8:	cmp	r3, #0
   15fec:	rsbne	r8, r3, #32
   15ff0:	lslne	r4, r2, r3
   15ff4:	lsrne	r8, r0, r8
   15ff8:	lslne	r7, r0, r3
   15ffc:	orrne	r8, r8, r1, lsl r3
   16000:	lsr	r5, r4, #16
   16004:	uxth	sl, r4
   16008:	mov	r1, r5
   1600c:	mov	r0, r8
   16010:	bl	1585c <close_stdout@@Base+0x3004>
   16014:	mov	r1, r5
   16018:	mov	r9, r0
   1601c:	mov	r0, r8
   16020:	bl	15a48 <close_stdout@@Base+0x31f0>
   16024:	mul	r0, sl, r9
   16028:	lsr	r3, r7, #16
   1602c:	orr	r1, r3, r1, lsl #16
   16030:	cmp	r0, r1
   16034:	bls	16058 <close_stdout@@Base+0x3800>
   16038:	adds	r1, r1, r4
   1603c:	sub	r2, r9, #1
   16040:	bcs	16054 <close_stdout@@Base+0x37fc>
   16044:	cmp	r0, r1
   16048:	subhi	r9, r9, #2
   1604c:	addhi	r1, r1, r4
   16050:	bhi	16058 <close_stdout@@Base+0x3800>
   16054:	mov	r9, r2
   16058:	rsb	r8, r0, r1
   1605c:	mov	r1, r5
   16060:	uxth	r7, r7
   16064:	mov	r0, r8
   16068:	bl	1585c <close_stdout@@Base+0x3004>
   1606c:	mov	r1, r5
   16070:	mov	r6, r0
   16074:	mov	r0, r8
   16078:	bl	15a48 <close_stdout@@Base+0x31f0>
   1607c:	mul	sl, sl, r6
   16080:	orr	r1, r7, r1, lsl #16
   16084:	cmp	sl, r1
   16088:	bls	160a4 <close_stdout@@Base+0x384c>
   1608c:	adds	r4, r1, r4
   16090:	sub	r3, r6, #1
   16094:	bcs	163a0 <close_stdout@@Base+0x3b48>
   16098:	cmp	sl, r4
   1609c:	subhi	r6, r6, #2
   160a0:	bls	163a0 <close_stdout@@Base+0x3b48>
   160a4:	orr	r0, r6, r9, lsl #16
   160a8:	mov	r6, #0
   160ac:	mov	r1, r6
   160b0:	add	sp, sp, #12
   160b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b8:	cmp	r3, r1
   160bc:	movhi	r6, #0
   160c0:	movhi	r0, r6
   160c4:	bhi	160ac <close_stdout@@Base+0x3854>
   160c8:	clz	r7, r3
   160cc:	cmp	r7, #0
   160d0:	bne	161d0 <close_stdout@@Base+0x3978>
   160d4:	cmp	r3, r1
   160d8:	cmpcs	r2, r6
   160dc:	movhi	r6, #0
   160e0:	movls	r6, #1
   160e4:	movls	r0, #1
   160e8:	movls	r6, r7
   160ec:	movhi	r0, r6
   160f0:	b	160ac <close_stdout@@Base+0x3854>
   160f4:	cmp	r2, #0
   160f8:	bne	1610c <close_stdout@@Base+0x38b4>
   160fc:	mov	r1, r2
   16100:	mov	r0, #1
   16104:	bl	1585c <close_stdout@@Base+0x3004>
   16108:	mov	r4, r0
   1610c:	clz	r3, r4
   16110:	cmp	r3, #0
   16114:	bne	162cc <close_stdout@@Base+0x3a74>
   16118:	rsb	r5, r4, r5
   1611c:	lsr	r8, r4, #16
   16120:	uxth	sl, r4
   16124:	mov	r6, #1
   16128:	mov	r1, r8
   1612c:	mov	r0, r5
   16130:	bl	1585c <close_stdout@@Base+0x3004>
   16134:	mov	r1, r8
   16138:	mov	r9, r0
   1613c:	mov	r0, r5
   16140:	bl	15a48 <close_stdout@@Base+0x31f0>
   16144:	mul	r0, sl, r9
   16148:	lsr	r3, r7, #16
   1614c:	orr	r1, r3, r1, lsl #16
   16150:	cmp	r0, r1
   16154:	bls	16174 <close_stdout@@Base+0x391c>
   16158:	adds	r1, r1, r4
   1615c:	sub	r2, r9, #1
   16160:	bcs	163a8 <close_stdout@@Base+0x3b50>
   16164:	cmp	r0, r1
   16168:	subhi	r9, r9, #2
   1616c:	addhi	r1, r1, r4
   16170:	bls	163a8 <close_stdout@@Base+0x3b50>
   16174:	rsb	fp, r0, r1
   16178:	mov	r1, r8
   1617c:	uxth	r7, r7
   16180:	mov	r0, fp
   16184:	bl	1585c <close_stdout@@Base+0x3004>
   16188:	mov	r1, r8
   1618c:	mov	r5, r0
   16190:	mov	r0, fp
   16194:	bl	15a48 <close_stdout@@Base+0x31f0>
   16198:	mul	sl, sl, r5
   1619c:	orr	r1, r7, r1, lsl #16
   161a0:	cmp	sl, r1
   161a4:	bls	161c0 <close_stdout@@Base+0x3968>
   161a8:	adds	r4, r1, r4
   161ac:	sub	r3, r5, #1
   161b0:	bcs	163b0 <close_stdout@@Base+0x3b58>
   161b4:	cmp	sl, r4
   161b8:	subhi	r5, r5, #2
   161bc:	bls	163b0 <close_stdout@@Base+0x3b58>
   161c0:	orr	r0, r5, r9, lsl #16
   161c4:	mov	r1, r6
   161c8:	add	sp, sp, #12
   161cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161d0:	rsb	r1, r7, #32
   161d4:	lsl	r0, r2, r7
   161d8:	lsr	r2, r2, r1
   161dc:	lsr	fp, r5, r1
   161e0:	orr	r8, r2, r3, lsl r7
   161e4:	lsr	r1, r6, r1
   161e8:	str	r0, [sp, #4]
   161ec:	orr	r5, r1, r5, lsl r7
   161f0:	lsr	r9, r8, #16
   161f4:	mov	r0, fp
   161f8:	uxth	sl, r8
   161fc:	mov	r1, r9
   16200:	bl	1585c <close_stdout@@Base+0x3004>
   16204:	mov	r1, r9
   16208:	mov	r4, r0
   1620c:	mov	r0, fp
   16210:	bl	15a48 <close_stdout@@Base+0x31f0>
   16214:	mul	r0, sl, r4
   16218:	lsr	ip, r5, #16
   1621c:	orr	r1, ip, r1, lsl #16
   16220:	cmp	r0, r1
   16224:	bls	16238 <close_stdout@@Base+0x39e0>
   16228:	adds	r1, r1, r8
   1622c:	sub	r2, r4, #1
   16230:	bcc	163cc <close_stdout@@Base+0x3b74>
   16234:	mov	r4, r2
   16238:	rsb	ip, r0, r1
   1623c:	mov	r1, r9
   16240:	str	ip, [sp]
   16244:	uxth	r5, r5
   16248:	mov	r0, ip
   1624c:	bl	1585c <close_stdout@@Base+0x3004>
   16250:	ldr	ip, [sp]
   16254:	mov	r1, r9
   16258:	mov	fp, r0
   1625c:	mov	r0, ip
   16260:	bl	15a48 <close_stdout@@Base+0x31f0>
   16264:	mul	sl, sl, fp
   16268:	orr	r1, r5, r1, lsl #16
   1626c:	cmp	sl, r1
   16270:	bls	16284 <close_stdout@@Base+0x3a2c>
   16274:	adds	r1, r1, r8
   16278:	sub	r2, fp, #1
   1627c:	bcc	163b8 <close_stdout@@Base+0x3b60>
   16280:	mov	fp, r2
   16284:	ldr	r3, [sp, #4]
   16288:	orr	r0, fp, r4, lsl #16
   1628c:	rsb	sl, sl, r1
   16290:	umull	r4, r5, r0, r3
   16294:	cmp	sl, r5
   16298:	bcc	162b8 <close_stdout@@Base+0x3a60>
   1629c:	movne	r3, #0
   162a0:	moveq	r3, #1
   162a4:	cmp	r4, r6, lsl r7
   162a8:	movls	r6, #0
   162ac:	andhi	r6, r3, #1
   162b0:	cmp	r6, #0
   162b4:	beq	160ac <close_stdout@@Base+0x3854>
   162b8:	mov	r6, #0
   162bc:	sub	r0, r0, #1
   162c0:	mov	r1, r6
   162c4:	add	sp, sp, #12
   162c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162cc:	lsl	r4, r4, r3
   162d0:	rsb	r9, r3, #32
   162d4:	lsr	r2, r5, r9
   162d8:	lsr	r9, r6, r9
   162dc:	lsr	r8, r4, #16
   162e0:	orr	r9, r9, r5, lsl r3
   162e4:	mov	r0, r2
   162e8:	lsl	r7, r6, r3
   162ec:	mov	r1, r8
   162f0:	str	r2, [sp]
   162f4:	bl	1585c <close_stdout@@Base+0x3004>
   162f8:	ldr	r2, [sp]
   162fc:	mov	r1, r8
   16300:	uxth	sl, r4
   16304:	mov	fp, r0
   16308:	mov	r0, r2
   1630c:	bl	15a48 <close_stdout@@Base+0x31f0>
   16310:	mul	r0, sl, fp
   16314:	lsr	r3, r9, #16
   16318:	orr	r1, r3, r1, lsl #16
   1631c:	cmp	r0, r1
   16320:	bls	16340 <close_stdout@@Base+0x3ae8>
   16324:	adds	r1, r1, r4
   16328:	sub	r3, fp, #1
   1632c:	bcs	163e0 <close_stdout@@Base+0x3b88>
   16330:	cmp	r0, r1
   16334:	subhi	fp, fp, #2
   16338:	addhi	r1, r1, r4
   1633c:	bls	163e0 <close_stdout@@Base+0x3b88>
   16340:	rsb	r5, r0, r1
   16344:	mov	r1, r8
   16348:	uxth	r9, r9
   1634c:	mov	r0, r5
   16350:	bl	1585c <close_stdout@@Base+0x3004>
   16354:	mov	r1, r8
   16358:	mov	r6, r0
   1635c:	mov	r0, r5
   16360:	bl	15a48 <close_stdout@@Base+0x31f0>
   16364:	mul	r5, sl, r6
   16368:	orr	r1, r9, r1, lsl #16
   1636c:	cmp	r5, r1
   16370:	bls	16394 <close_stdout@@Base+0x3b3c>
   16374:	adds	r1, r1, r4
   16378:	sub	r3, r6, #1
   1637c:	bcs	16390 <close_stdout@@Base+0x3b38>
   16380:	cmp	r5, r1
   16384:	subhi	r6, r6, #2
   16388:	addhi	r1, r1, r4
   1638c:	bhi	16394 <close_stdout@@Base+0x3b3c>
   16390:	mov	r6, r3
   16394:	rsb	r5, r5, r1
   16398:	orr	r6, r6, fp, lsl #16
   1639c:	b	16128 <close_stdout@@Base+0x38d0>
   163a0:	mov	r6, r3
   163a4:	b	160a4 <close_stdout@@Base+0x384c>
   163a8:	mov	r9, r2
   163ac:	b	16174 <close_stdout@@Base+0x391c>
   163b0:	mov	r5, r3
   163b4:	b	161c0 <close_stdout@@Base+0x3968>
   163b8:	cmp	sl, r1
   163bc:	subhi	fp, fp, #2
   163c0:	addhi	r1, r1, r8
   163c4:	bhi	16284 <close_stdout@@Base+0x3a2c>
   163c8:	b	16280 <close_stdout@@Base+0x3a28>
   163cc:	cmp	r0, r1
   163d0:	subhi	r4, r4, #2
   163d4:	addhi	r1, r1, r8
   163d8:	bhi	16238 <close_stdout@@Base+0x39e0>
   163dc:	b	16234 <close_stdout@@Base+0x39dc>
   163e0:	mov	fp, r3
   163e4:	b	16340 <close_stdout@@Base+0x3ae8>
   163e8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   163ec:	mov	r7, r0
   163f0:	ldr	r6, [pc, #76]	; 16444 <close_stdout@@Base+0x3bec>
   163f4:	mov	r8, r1
   163f8:	ldr	r5, [pc, #72]	; 16448 <close_stdout@@Base+0x3bf0>
   163fc:	mov	r9, r2
   16400:	add	r6, pc, r6
   16404:	bl	10fd8 <fdopen@plt-0x20>
   16408:	add	r5, pc, r5
   1640c:	rsb	r6, r5, r6
   16410:	asrs	r6, r6, #2
   16414:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16418:	sub	r5, r5, #4
   1641c:	mov	r4, #0
   16420:	add	r4, r4, #1
   16424:	ldr	r3, [r5, #4]!
   16428:	mov	r0, r7
   1642c:	mov	r1, r8
   16430:	mov	r2, r9
   16434:	blx	r3
   16438:	cmp	r4, r6
   1643c:	bne	16420 <close_stdout@@Base+0x3bc8>
   16440:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16444:	andeq	r1, r1, r4, ror sl
   16448:	andeq	r1, r1, r8, ror #20
   1644c:	bx	lr
   16450:	ldr	r3, [pc, #28]	; 16474 <close_stdout@@Base+0x3c1c>
   16454:	mov	r1, #0
   16458:	ldr	r2, [pc, #24]	; 16478 <close_stdout@@Base+0x3c20>
   1645c:	add	r3, pc, r3
   16460:	ldr	r3, [r3, r2]
   16464:	cmp	r3, #0
   16468:	ldrne	r2, [r3]
   1646c:	moveq	r2, r3
   16470:	b	111d8 <__cxa_atexit@plt>
   16474:	muleq	r1, ip, fp
   16478:	andeq	r0, r0, ip, lsl r1

Disassembly of section .fini:

0001647c <.fini>:
   1647c:	push	{r3, lr}
   16480:	pop	{r3, pc}
