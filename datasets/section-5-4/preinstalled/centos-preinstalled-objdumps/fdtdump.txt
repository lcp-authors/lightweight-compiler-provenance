
centos-preinstalled/fdtdump:     file format elf32-littlearm


Disassembly of section .init:

00010824 <.init>:
   10824:	push	{r3, lr}
   10828:	bl	112c8 <__assert_fail@plt+0x928>
   1082c:	pop	{r3, pc}

Disassembly of section .plt:

00010830 <strcmp@plt-0x14>:
   10830:	push	{lr}		; (str lr, [sp, #-4]!)
   10834:	ldr	lr, [pc, #4]	; 10840 <strcmp@plt-0x4>
   10838:	add	lr, pc, lr
   1083c:	ldr	pc, [lr, #8]!
   10840:	andeq	r2, r1, r0, asr #15

00010844 <strcmp@plt>:
   10844:	add	ip, pc, #0, 12
   10848:	add	ip, ip, #73728	; 0x12000
   1084c:	ldr	pc, [ip, #1984]!	; 0x7c0

00010850 <strtol@plt>:
   10850:	add	ip, pc, #0, 12
   10854:	add	ip, ip, #73728	; 0x12000
   10858:	ldr	pc, [ip, #1976]!	; 0x7b8

0001085c <printf@plt>:
   1085c:	add	ip, pc, #0, 12
   10860:	add	ip, ip, #73728	; 0x12000
   10864:	ldr	pc, [ip, #1968]!	; 0x7b0

00010868 <read@plt>:
   10868:	add	ip, pc, #0, 12
   1086c:	add	ip, ip, #73728	; 0x12000
   10870:	ldr	pc, [ip, #1960]!	; 0x7a8

00010874 <free@plt>:
   10874:	add	ip, pc, #0, 12
   10878:	add	ip, ip, #73728	; 0x12000
   1087c:	ldr	pc, [ip, #1952]!	; 0x7a0

00010880 <memcpy@plt>:
   10880:	add	ip, pc, #0, 12
   10884:	add	ip, ip, #73728	; 0x12000
   10888:	ldr	pc, [ip, #1944]!	; 0x798

0001088c <realloc@plt>:
   1088c:	add	ip, pc, #0, 12
   10890:	add	ip, ip, #73728	; 0x12000
   10894:	ldr	pc, [ip, #1936]!	; 0x790

00010898 <puts@plt>:
   10898:	add	ip, pc, #0, 12
   1089c:	add	ip, ip, #73728	; 0x12000
   108a0:	ldr	pc, [ip, #1928]!	; 0x788

000108a4 <malloc@plt>:
   108a4:	add	ip, pc, #0, 12
   108a8:	add	ip, ip, #73728	; 0x12000
   108ac:	ldr	pc, [ip, #1920]!	; 0x780

000108b0 <__libc_start_main@plt>:
   108b0:	add	ip, pc, #0, 12
   108b4:	add	ip, ip, #73728	; 0x12000
   108b8:	ldr	pc, [ip, #1912]!	; 0x778

000108bc <strerror@plt>:
   108bc:	add	ip, pc, #0, 12
   108c0:	add	ip, ip, #73728	; 0x12000
   108c4:	ldr	pc, [ip, #1904]!	; 0x770

000108c8 <__gmon_start__@plt>:
   108c8:	add	ip, pc, #0, 12
   108cc:	add	ip, ip, #73728	; 0x12000
   108d0:	ldr	pc, [ip, #1896]!	; 0x768

000108d4 <open@plt>:
   108d4:	add	ip, pc, #0, 12
   108d8:	add	ip, ip, #73728	; 0x12000
   108dc:	ldr	pc, [ip, #1888]!	; 0x760

000108e0 <getopt_long@plt>:
   108e0:	add	ip, pc, #0, 12
   108e4:	add	ip, ip, #73728	; 0x12000
   108e8:	ldr	pc, [ip, #1880]!	; 0x758

000108ec <__ctype_b_loc@plt>:
   108ec:	add	ip, pc, #0, 12
   108f0:	add	ip, ip, #73728	; 0x12000
   108f4:	ldr	pc, [ip, #1872]!	; 0x750

000108f8 <exit@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #73728	; 0x12000
   10900:	ldr	pc, [ip, #1864]!	; 0x748

00010904 <strlen@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #73728	; 0x12000
   1090c:	ldr	pc, [ip, #1856]!	; 0x740

00010910 <strchr@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #73728	; 0x12000
   10918:	ldr	pc, [ip, #1848]!	; 0x738

0001091c <fprintf@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #73728	; 0x12000
   10924:	ldr	pc, [ip, #1840]!	; 0x730

00010928 <__errno_location@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #73728	; 0x12000
   10930:	ldr	pc, [ip, #1832]!	; 0x728

00010934 <putchar@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #73728	; 0x12000
   1093c:	ldr	pc, [ip, #1824]!	; 0x720

00010940 <strncpy@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #73728	; 0x12000
   10948:	ldr	pc, [ip, #1816]!	; 0x718

0001094c <write@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #73728	; 0x12000
   10954:	ldr	pc, [ip, #1808]!	; 0x710

00010958 <memchr@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #73728	; 0x12000
   10960:	ldr	pc, [ip, #1800]!	; 0x708

00010964 <vfprintf@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #73728	; 0x12000
   1096c:	ldr	pc, [ip, #1792]!	; 0x700

00010970 <vsnprintf@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #73728	; 0x12000
   10978:	ldr	pc, [ip, #1784]!	; 0x6f8

0001097c <fputs@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #73728	; 0x12000
   10984:	ldr	pc, [ip, #1776]!	; 0x6f0

00010988 <abort@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #73728	; 0x12000
   10990:	ldr	pc, [ip, #1768]!	; 0x6e8

00010994 <close@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #73728	; 0x12000
   1099c:	ldr	pc, [ip, #1760]!	; 0x6e0

000109a0 <__assert_fail@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #73728	; 0x12000
   109a8:	ldr	pc, [ip, #1752]!	; 0x6d8

Disassembly of section .text:

000109ac <.text>:
   109ac:	push	{r0, r1, r2, r3}
   109b0:	ldr	r3, [pc, #60]	; 109f4 <__assert_fail@plt+0x54>
   109b4:	push	{r0, r1, r2, lr}
   109b8:	add	r2, sp, #20
   109bc:	str	r2, [sp, #4]
   109c0:	add	r3, pc, r3
   109c4:	ldr	r2, [pc, #44]	; 109f8 <__assert_fail@plt+0x58>
   109c8:	ldr	r0, [pc, #44]	; 109fc <__assert_fail@plt+0x5c>
   109cc:	ldr	r4, [r3, r2]
   109d0:	add	r0, pc, r0
   109d4:	ldr	r1, [r4]
   109d8:	bl	1097c <fputs@plt>
   109dc:	ldr	r0, [r4]
   109e0:	ldr	r1, [sp, #16]
   109e4:	ldr	r2, [sp, #4]
   109e8:	bl	10964 <vfprintf@plt>
   109ec:	mov	r0, #1
   109f0:	bl	108f8 <exit@plt>
   109f4:	andeq	r2, r1, r8, lsr r6
   109f8:	andeq	r0, r0, r8, lsl #1
   109fc:	andeq	r1, r0, r2, ror #11
   10a00:	push	{r0, r1, r2, r3}
   10a04:	ldr	r3, [pc, #60]	; 10a48 <__assert_fail@plt+0xa8>
   10a08:	push	{r0, r1, r2, lr}
   10a0c:	add	r2, sp, #20
   10a10:	str	r2, [sp, #4]
   10a14:	add	r3, pc, r3
   10a18:	ldr	r2, [pc, #44]	; 10a4c <__assert_fail@plt+0xac>
   10a1c:	ldr	r0, [pc, #44]	; 10a50 <__assert_fail@plt+0xb0>
   10a20:	ldr	r4, [r3, r2]
   10a24:	add	r0, pc, r0
   10a28:	ldr	r1, [r4]
   10a2c:	bl	1097c <fputs@plt>
   10a30:	ldr	r0, [r4]
   10a34:	ldr	r1, [sp, #16]
   10a38:	ldr	r2, [sp, #4]
   10a3c:	bl	10964 <vfprintf@plt>
   10a40:	mov	r0, #1
   10a44:	bl	108f8 <exit@plt>
   10a48:	andeq	r2, r1, r4, ror #11
   10a4c:	andeq	r0, r0, r8, lsl #1
   10a50:	andeq	r1, r0, lr, lsl #11
   10a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a58:	mov	sl, r0
   10a5c:	ldr	r8, [pc, #1908]	; 111d8 <__assert_fail@plt+0x838>
   10a60:	sub	sp, sp, #172	; 0xac
   10a64:	ldr	r3, [pc, #1904]	; 111dc <__assert_fail@plt+0x83c>
   10a68:	mov	r9, r1
   10a6c:	add	r8, pc, r8
   10a70:	ldr	r0, [pc, #1896]	; 111e0 <__assert_fail@plt+0x840>
   10a74:	ldr	r7, [pc, #1896]	; 111e4 <__assert_fail@plt+0x844>
   10a78:	mov	r5, #0
   10a7c:	ldr	r4, [r8, r3]
   10a80:	add	r0, pc, r0
   10a84:	add	r7, pc, r7
   10a88:	mov	fp, r5
   10a8c:	add	r6, r7, #25
   10a90:	ldr	r1, [r4]
   10a94:	bl	1097c <fputs@plt>
   10a98:	str	r4, [sp, #140]	; 0x8c
   10a9c:	ldr	r4, [pc, #1860]	; 111e8 <__assert_fail@plt+0x848>
   10aa0:	str	r5, [sp, #36]	; 0x24
   10aa4:	add	r4, pc, r4
   10aa8:	str	fp, [sp]
   10aac:	mov	r0, sl
   10ab0:	mov	r1, r9
   10ab4:	mov	r2, r6
   10ab8:	mov	r3, r4
   10abc:	bl	108e0 <getopt_long@plt>
   10ac0:	cmn	r0, #1
   10ac4:	beq	10b38 <__assert_fail@plt+0x198>
   10ac8:	cmp	r0, #100	; 0x64
   10acc:	beq	10b2c <__assert_fail@plt+0x18c>
   10ad0:	bgt	10ae8 <__assert_fail@plt+0x148>
   10ad4:	cmp	r0, #63	; 0x3f
   10ad8:	beq	10b0c <__assert_fail@plt+0x16c>
   10adc:	cmp	r0, #86	; 0x56
   10ae0:	bne	10aa8 <__assert_fail@plt+0x108>
   10ae4:	bl	11cfc <__assert_fail@plt+0x135c>
   10ae8:	cmp	r0, #104	; 0x68
   10aec:	beq	10afc <__assert_fail@plt+0x15c>
   10af0:	cmp	r0, #115	; 0x73
   10af4:	moveq	r5, #1
   10af8:	b	10aa8 <__assert_fail@plt+0x108>
   10afc:	add	r3, r4, #80	; 0x50
   10b00:	mov	r0, #0
   10b04:	str	r3, [sp]
   10b08:	b	10b1c <__assert_fail@plt+0x17c>
   10b0c:	ldr	r0, [pc, #1752]	; 111ec <__assert_fail@plt+0x84c>
   10b10:	add	r3, r4, #80	; 0x50
   10b14:	str	r3, [sp]
   10b18:	add	r0, pc, r0
   10b1c:	mov	r1, r7
   10b20:	mov	r2, r6
   10b24:	mov	r3, r4
   10b28:	bl	11d24 <__assert_fail@plt+0x1384>
   10b2c:	mov	ip, #1
   10b30:	str	ip, [sp, #36]	; 0x24
   10b34:	b	10aa8 <__assert_fail@plt+0x108>
   10b38:	ldr	r3, [pc, #1712]	; 111f0 <__assert_fail@plt+0x850>
   10b3c:	sub	sl, sl, #1
   10b40:	ldr	r3, [r8, r3]
   10b44:	ldr	r3, [r3]
   10b48:	cmp	r3, sl
   10b4c:	ldrne	r0, [pc, #1696]	; 111f4 <__assert_fail@plt+0x854>
   10b50:	addne	r3, r4, #80	; 0x50
   10b54:	strne	r3, [sp]
   10b58:	addne	r0, pc, r0
   10b5c:	bne	10b1c <__assert_fail@plt+0x17c>
   10b60:	ldr	r6, [r9, r3, lsl #2]
   10b64:	add	r1, sp, #148	; 0x94
   10b68:	mov	r0, r6
   10b6c:	bl	118e0 <__assert_fail@plt+0xf40>
   10b70:	subs	r4, r0, #0
   10b74:	ldreq	r0, [pc, #1660]	; 111f8 <__assert_fail@plt+0x858>
   10b78:	addeq	r0, pc, r0
   10b7c:	beq	10c68 <__assert_fail@plt+0x2c8>
   10b80:	cmp	r5, #0
   10b84:	beq	10c50 <__assert_fail@plt+0x2b0>
   10b88:	ldr	r5, [sp, #148]	; 0x94
   10b8c:	mov	r9, r4
   10b90:	ldr	r8, [pc, #1636]	; 111fc <__assert_fail@plt+0x85c>
   10b94:	ldr	r3, [pc, #1636]	; 11200 <__assert_fail@plt+0x860>
   10b98:	add	r5, r4, r5
   10b9c:	ldr	r7, [pc, #1632]	; 11204 <__assert_fail@plt+0x864>
   10ba0:	add	r8, pc, r8
   10ba4:	str	r3, [sp, #160]	; 0xa0
   10ba8:	rsb	r2, r9, r5
   10bac:	cmp	r2, #3
   10bb0:	ble	10c14 <__assert_fail@plt+0x274>
   10bb4:	mov	r0, r9
   10bb8:	ldrb	r1, [sp, #160]	; 0xa0
   10bbc:	sub	r2, r2, #4
   10bc0:	bl	10958 <memchr@plt>
   10bc4:	subs	r9, r0, #0
   10bc8:	beq	10c28 <__assert_fail@plt+0x288>
   10bcc:	ldr	r0, [r9]
   10bd0:	bl	113c0 <__assert_fail@plt+0xa20>
   10bd4:	cmp	r0, r7
   10bd8:	bne	10c0c <__assert_fail@plt+0x26c>
   10bdc:	mov	r0, r9
   10be0:	rsb	r1, r9, r5
   10be4:	bl	113e4 <__assert_fail@plt+0xa44>
   10be8:	cmp	r0, #0
   10bec:	bne	10c1c <__assert_fail@plt+0x27c>
   10bf0:	ldr	ip, [sp, #36]	; 0x24
   10bf4:	cmp	ip, #0
   10bf8:	beq	10c0c <__assert_fail@plt+0x26c>
   10bfc:	mov	r0, r8
   10c00:	mov	r1, r6
   10c04:	rsb	r2, r4, r9
   10c08:	bl	1085c <printf@plt>
   10c0c:	add	r9, r9, #1
   10c10:	b	10ba8 <__assert_fail@plt+0x208>
   10c14:	cmp	r9, #0
   10c18:	beq	10c28 <__assert_fail@plt+0x288>
   10c1c:	rsb	r5, r9, r5
   10c20:	cmp	r5, #39	; 0x27
   10c24:	bhi	10c34 <__assert_fail@plt+0x294>
   10c28:	ldr	r0, [pc, #1496]	; 11208 <__assert_fail@plt+0x868>
   10c2c:	add	r0, pc, r0
   10c30:	b	10c68 <__assert_fail@plt+0x2c8>
   10c34:	ldr	r0, [pc, #1488]	; 1120c <__assert_fail@plt+0x86c>
   10c38:	rsb	r2, r4, r9
   10c3c:	mov	r1, r6
   10c40:	mov	r4, r9
   10c44:	add	r0, pc, r0
   10c48:	bl	1085c <printf@plt>
   10c4c:	b	10c70 <__assert_fail@plt+0x2d0>
   10c50:	ldr	r1, [sp, #148]	; 0x94
   10c54:	bl	113e4 <__assert_fail@plt+0xa44>
   10c58:	cmp	r0, #0
   10c5c:	bne	10c70 <__assert_fail@plt+0x2d0>
   10c60:	ldr	r0, [pc, #1448]	; 11210 <__assert_fail@plt+0x870>
   10c64:	add	r0, pc, r0
   10c68:	mov	r1, r6
   10c6c:	bl	109ac <__assert_fail@plt+0xc>
   10c70:	ldr	r0, [r4, #16]
   10c74:	bl	113c0 <__assert_fail@plt+0xa20>
   10c78:	mov	r6, r0
   10c7c:	ldr	r0, [r4, #8]
   10c80:	bl	113c0 <__assert_fail@plt+0xa20>
   10c84:	add	r5, r4, r6
   10c88:	mov	r7, r0
   10c8c:	ldr	r0, [r4, #12]
   10c90:	bl	113c0 <__assert_fail@plt+0xa20>
   10c94:	add	sl, r4, r7
   10c98:	add	ip, r4, r0
   10c9c:	mov	r8, r0
   10ca0:	ldr	r0, [r4, #20]
   10ca4:	str	ip, [sp, #136]	; 0x88
   10ca8:	bl	113c0 <__assert_fail@plt+0xa20>
   10cac:	mov	fp, r0
   10cb0:	ldr	r0, [r4, #4]
   10cb4:	bl	113c0 <__assert_fail@plt+0xa20>
   10cb8:	mov	r9, r0
   10cbc:	ldr	r0, [pc, #1360]	; 11214 <__assert_fail@plt+0x874>
   10cc0:	add	r0, pc, r0
   10cc4:	bl	10898 <puts@plt>
   10cc8:	ldr	r0, [r4]
   10ccc:	bl	113c0 <__assert_fail@plt+0xa20>
   10cd0:	mov	r1, r0
   10cd4:	ldr	r0, [pc, #1340]	; 11218 <__assert_fail@plt+0x878>
   10cd8:	add	r0, pc, r0
   10cdc:	bl	1085c <printf@plt>
   10ce0:	ldr	r0, [pc, #1332]	; 1121c <__assert_fail@plt+0x87c>
   10ce4:	mov	r2, r9
   10ce8:	mov	r1, r9
   10cec:	add	r0, pc, r0
   10cf0:	bl	1085c <printf@plt>
   10cf4:	ldr	r0, [pc, #1316]	; 11220 <__assert_fail@plt+0x880>
   10cf8:	mov	r1, r7
   10cfc:	add	r0, pc, r0
   10d00:	bl	1085c <printf@plt>
   10d04:	ldr	r0, [pc, #1304]	; 11224 <__assert_fail@plt+0x884>
   10d08:	mov	r1, r8
   10d0c:	add	r0, pc, r0
   10d10:	bl	1085c <printf@plt>
   10d14:	ldr	r0, [pc, #1292]	; 11228 <__assert_fail@plt+0x888>
   10d18:	mov	r1, r6
   10d1c:	add	r0, pc, r0
   10d20:	bl	1085c <printf@plt>
   10d24:	ldr	r0, [pc, #1280]	; 1122c <__assert_fail@plt+0x88c>
   10d28:	mov	r1, fp
   10d2c:	add	r0, pc, r0
   10d30:	bl	1085c <printf@plt>
   10d34:	ldr	r0, [r4, #24]
   10d38:	bl	113c0 <__assert_fail@plt+0xa20>
   10d3c:	mov	r1, r0
   10d40:	ldr	r0, [pc, #1256]	; 11230 <__assert_fail@plt+0x890>
   10d44:	add	r0, pc, r0
   10d48:	bl	1085c <printf@plt>
   10d4c:	cmp	fp, #1
   10d50:	bls	10dac <__assert_fail@plt+0x40c>
   10d54:	ldr	r0, [r4, #28]
   10d58:	bl	113c0 <__assert_fail@plt+0xa20>
   10d5c:	mov	r1, r0
   10d60:	ldr	r0, [pc, #1228]	; 11234 <__assert_fail@plt+0x894>
   10d64:	add	r0, pc, r0
   10d68:	bl	1085c <printf@plt>
   10d6c:	cmp	fp, #2
   10d70:	beq	10dac <__assert_fail@plt+0x40c>
   10d74:	ldr	r0, [r4, #32]
   10d78:	bl	113c0 <__assert_fail@plt+0xa20>
   10d7c:	mov	r1, r0
   10d80:	ldr	r0, [pc, #1200]	; 11238 <__assert_fail@plt+0x898>
   10d84:	add	r0, pc, r0
   10d88:	bl	1085c <printf@plt>
   10d8c:	cmp	fp, #16
   10d90:	bls	10dac <__assert_fail@plt+0x40c>
   10d94:	ldr	r0, [r4, #36]	; 0x24
   10d98:	bl	113c0 <__assert_fail@plt+0xa20>
   10d9c:	mov	r1, r0
   10da0:	ldr	r0, [pc, #1172]	; 1123c <__assert_fail@plt+0x89c>
   10da4:	add	r0, pc, r0
   10da8:	bl	1085c <printf@plt>
   10dac:	mov	r0, #10
   10db0:	ldr	r6, [pc, #1160]	; 11240 <__assert_fail@plt+0x8a0>
   10db4:	bl	10934 <putchar@plt>
   10db8:	add	r6, pc, r6
   10dbc:	ldr	r3, [r5]
   10dc0:	mov	r1, #0
   10dc4:	ldr	r2, [r5, #4]
   10dc8:	add	r5, r5, #16
   10dcc:	str	r1, [sp, #80]	; 0x50
   10dd0:	str	r3, [sp, #152]	; 0x98
   10dd4:	lsl	r0, r3, #24
   10dd8:	lsl	r3, r3, #8
   10ddc:	str	r0, [sp, #20]
   10de0:	str	r1, [sp, #16]
   10de4:	and	r3, r3, #16711680	; 0xff0000
   10de8:	str	r3, [sp, #84]	; 0x54
   10dec:	str	r2, [sp, #156]	; 0x9c
   10df0:	ldrd	r0, [sp, #16]
   10df4:	ldrd	r2, [sp, #80]	; 0x50
   10df8:	orr	r0, r0, r2
   10dfc:	ldrb	r2, [sp, #159]	; 0x9f
   10e00:	orr	r1, r1, r3
   10e04:	mov	r3, #0
   10e08:	orr	r2, r2, r0
   10e0c:	ldrb	r0, [sp, #154]	; 0x9a
   10e10:	orr	r3, r3, r1
   10e14:	lsl	ip, r0, #8
   10e18:	mov	r0, #0
   10e1c:	str	ip, [sp, #92]	; 0x5c
   10e20:	mov	ip, #0
   10e24:	str	r0, [sp, #88]	; 0x58
   10e28:	ldrd	r0, [sp, #88]	; 0x58
   10e2c:	str	ip, [sp, #96]	; 0x60
   10e30:	orr	r3, r3, r1
   10e34:	ldrb	r1, [sp, #155]	; 0x9b
   10e38:	orr	r2, r2, r0
   10e3c:	str	ip, [sp, #28]
   10e40:	str	r1, [sp, #100]	; 0x64
   10e44:	ldrd	r0, [sp, #96]	; 0x60
   10e48:	orr	r2, r2, r0
   10e4c:	ldrb	r0, [sp, #156]	; 0x9c
   10e50:	orr	r3, r3, r1
   10e54:	lsl	ip, r0, #24
   10e58:	str	ip, [sp, #24]
   10e5c:	ldrd	r0, [sp, #24]
   10e60:	mov	ip, #0
   10e64:	str	ip, [sp, #44]	; 0x2c
   10e68:	orr	r2, r2, r0
   10e6c:	ldrb	r0, [sp, #157]	; 0x9d
   10e70:	orr	r3, r3, r1
   10e74:	lsl	ip, r0, #16
   10e78:	str	ip, [sp, #40]	; 0x28
   10e7c:	ldrd	r0, [sp, #40]	; 0x28
   10e80:	mov	ip, #0
   10e84:	str	ip, [sp, #52]	; 0x34
   10e88:	orr	r2, r2, r0
   10e8c:	ldrb	r0, [sp, #158]	; 0x9e
   10e90:	orr	r3, r3, r1
   10e94:	mov	r1, #0
   10e98:	lsl	ip, r0, #8
   10e9c:	str	ip, [sp, #48]	; 0x30
   10ea0:	ldrd	r8, [sp, #48]	; 0x30
   10ea4:	orr	r9, r9, r3
   10ea8:	ldr	r3, [r5, #-8]
   10eac:	orr	r8, r8, r2
   10eb0:	ldr	r2, [r5, #-4]
   10eb4:	lsl	r0, r3, #24
   10eb8:	str	r3, [sp, #160]	; 0xa0
   10ebc:	lsl	r3, r3, #8
   10ec0:	str	r1, [sp, #112]	; 0x70
   10ec4:	and	r3, r3, #16711680	; 0xff0000
   10ec8:	str	r0, [sp, #108]	; 0x6c
   10ecc:	str	r1, [sp, #104]	; 0x68
   10ed0:	str	r3, [sp, #116]	; 0x74
   10ed4:	str	r2, [sp, #164]	; 0xa4
   10ed8:	ldrd	r0, [sp, #104]	; 0x68
   10edc:	ldrd	r2, [sp, #112]	; 0x70
   10ee0:	orr	r0, r0, r2
   10ee4:	ldrb	r2, [sp, #167]	; 0xa7
   10ee8:	orr	r1, r1, r3
   10eec:	mov	r3, #0
   10ef0:	orr	r2, r2, r0
   10ef4:	ldrb	r0, [sp, #162]	; 0xa2
   10ef8:	orr	r3, r3, r1
   10efc:	lsl	ip, r0, #8
   10f00:	mov	r0, #0
   10f04:	str	ip, [sp, #124]	; 0x7c
   10f08:	mov	ip, #0
   10f0c:	str	r0, [sp, #120]	; 0x78
   10f10:	ldrd	r0, [sp, #120]	; 0x78
   10f14:	str	ip, [sp, #128]	; 0x80
   10f18:	orr	r3, r3, r1
   10f1c:	ldrb	r1, [sp, #163]	; 0xa3
   10f20:	orr	r2, r2, r0
   10f24:	str	ip, [sp, #60]	; 0x3c
   10f28:	str	r1, [sp, #132]	; 0x84
   10f2c:	ldrd	r0, [sp, #128]	; 0x80
   10f30:	orr	r2, r2, r0
   10f34:	ldrb	r0, [sp, #164]	; 0xa4
   10f38:	orr	r3, r3, r1
   10f3c:	lsl	ip, r0, #24
   10f40:	str	ip, [sp, #56]	; 0x38
   10f44:	ldrd	r0, [sp, #56]	; 0x38
   10f48:	mov	ip, #0
   10f4c:	str	ip, [sp, #68]	; 0x44
   10f50:	orr	r2, r2, r0
   10f54:	ldrb	r0, [sp, #165]	; 0xa5
   10f58:	orr	r3, r3, r1
   10f5c:	lsl	ip, r0, #16
   10f60:	str	ip, [sp, #64]	; 0x40
   10f64:	ldrd	r0, [sp, #64]	; 0x40
   10f68:	mov	ip, #0
   10f6c:	str	ip, [sp, #76]	; 0x4c
   10f70:	orr	r2, r2, r0
   10f74:	ldrb	r0, [sp, #166]	; 0xa6
   10f78:	orr	r3, r3, r1
   10f7c:	lsl	ip, r0, #8
   10f80:	str	ip, [sp, #72]	; 0x48
   10f84:	ldrd	r0, [sp, #72]	; 0x48
   10f88:	orr	r2, r2, r0
   10f8c:	orr	r3, r3, r1
   10f90:	orr	r0, r2, r8
   10f94:	orr	r1, r3, r9
   10f98:	orrs	ip, r0, r1
   10f9c:	bne	10fc8 <__assert_fail@plt+0x628>
   10fa0:	ldr	ip, [pc, #668]	; 11244 <__assert_fail@plt+0x8a4>
   10fa4:	mov	r6, #0
   10fa8:	ldr	r9, [pc, #664]	; 11248 <__assert_fail@plt+0x8a8>
   10fac:	add	ip, pc, ip
   10fb0:	str	ip, [sp, #16]
   10fb4:	ldr	ip, [pc, #656]	; 1124c <__assert_fail@plt+0x8ac>
   10fb8:	add	r9, pc, r9
   10fbc:	add	ip, pc, ip
   10fc0:	str	ip, [sp, #24]
   10fc4:	b	11040 <__assert_fail@plt+0x6a0>
   10fc8:	strd	r2, [sp]
   10fcc:	mov	r0, r6
   10fd0:	mov	r2, r8
   10fd4:	mov	r3, r9
   10fd8:	bl	1085c <printf@plt>
   10fdc:	b	10dbc <__assert_fail@plt+0x41c>
   10fe0:	ldr	ip, [sp, #36]	; 0x24
   10fe4:	cmp	ip, #0
   10fe8:	bne	1105c <__assert_fail@plt+0x6bc>
   10fec:	cmp	r7, #1
   10ff0:	bne	1109c <__assert_fail@plt+0x6fc>
   10ff4:	mov	r0, r5
   10ff8:	bl	10904 <strlen@plt>
   10ffc:	ldrb	r3, [sl, #4]
   11000:	cmp	r3, #0
   11004:	add	r0, r5, r0
   11008:	add	r7, r0, #4
   1100c:	bic	r7, r7, #3
   11010:	ldreq	r5, [pc, #568]	; 11250 <__assert_fail@plt+0x8b0>
   11014:	addeq	r5, pc, r5
   11018:	ldr	r0, [pc, #564]	; 11254 <__assert_fail@plt+0x8b4>
   1101c:	lsl	r1, r6, #2
   11020:	ldr	r2, [pc, #560]	; 11258 <__assert_fail@plt+0x8b8>
   11024:	mov	r3, r5
   11028:	add	r0, pc, r0
   1102c:	add	r6, r6, #1
   11030:	add	r2, pc, r2
   11034:	mov	r5, r7
   11038:	bl	1085c <printf@plt>
   1103c:	mov	sl, r5
   11040:	ldr	r0, [sl]
   11044:	add	r5, sl, #4
   11048:	bl	113c0 <__assert_fail@plt+0xa20>
   1104c:	cmp	r0, #9
   11050:	mov	r7, r0
   11054:	bne	10fe0 <__assert_fail@plt+0x640>
   11058:	b	111cc <__assert_fail@plt+0x82c>
   1105c:	cmp	r7, #9
   11060:	mvn	r1, #3
   11064:	rsb	r1, r4, r1
   11068:	add	r1, r5, r1
   1106c:	ldrhi	r3, [sp, #16]
   11070:	bhi	1108c <__assert_fail@plt+0x6ec>
   11074:	ldr	ip, [sp, #24]
   11078:	add	r3, ip, r7, lsl #2
   1107c:	ldr	r3, [r3, #100]	; 0x64
   11080:	cmp	r3, #0
   11084:	ldreq	r3, [pc, #464]	; 1125c <__assert_fail@plt+0x8bc>
   11088:	addeq	r3, pc, r3
   1108c:	mov	r0, r9
   11090:	mov	r2, r7
   11094:	bl	1085c <printf@plt>
   11098:	b	10fec <__assert_fail@plt+0x64c>
   1109c:	cmp	r7, #2
   110a0:	bne	110c0 <__assert_fail@plt+0x720>
   110a4:	sub	r6, r6, #1
   110a8:	ldr	r0, [pc, #432]	; 11260 <__assert_fail@plt+0x8c0>
   110ac:	ldr	r2, [pc, #432]	; 11264 <__assert_fail@plt+0x8c4>
   110b0:	add	r0, pc, r0
   110b4:	lsl	r1, r6, #2
   110b8:	add	r2, pc, r2
   110bc:	b	110e0 <__assert_fail@plt+0x740>
   110c0:	cmp	r7, #4
   110c4:	lsl	r2, r6, #2
   110c8:	bne	110e8 <__assert_fail@plt+0x748>
   110cc:	ldr	r0, [pc, #404]	; 11268 <__assert_fail@plt+0x8c8>
   110d0:	mov	r1, r2
   110d4:	ldr	r2, [pc, #400]	; 1126c <__assert_fail@plt+0x8cc>
   110d8:	add	r0, pc, r0
   110dc:	add	r2, pc, r2
   110e0:	bl	1085c <printf@plt>
   110e4:	b	1103c <__assert_fail@plt+0x69c>
   110e8:	cmp	r7, #3
   110ec:	beq	11114 <__assert_fail@plt+0x774>
   110f0:	ldr	ip, [sp, #140]	; 0x8c
   110f4:	ldr	r1, [pc, #372]	; 11270 <__assert_fail@plt+0x8d0>
   110f8:	ldr	r3, [pc, #372]	; 11274 <__assert_fail@plt+0x8d4>
   110fc:	str	r7, [sp]
   11100:	add	r1, pc, r1
   11104:	ldr	r0, [ip]
   11108:	add	r3, pc, r3
   1110c:	bl	1091c <fprintf@plt>
   11110:	b	111cc <__assert_fail@plt+0x82c>
   11114:	ldr	r0, [sl, #4]
   11118:	add	r7, sl, #12
   1111c:	bl	113c0 <__assert_fail@plt+0xa20>
   11120:	mov	r8, r0
   11124:	ldr	r0, [sl, #8]
   11128:	bl	113c0 <__assert_fail@plt+0xa20>
   1112c:	cmp	r8, #7
   11130:	ldr	ip, [sp, #136]	; 0x88
   11134:	movle	r2, #0
   11138:	movgt	r2, #1
   1113c:	cmp	fp, #15
   11140:	movhi	r2, #0
   11144:	cmp	r2, #0
   11148:	addne	r7, sl, #19
   1114c:	add	r3, ip, r0
   11150:	ldr	ip, [sp, #36]	; 0x24
   11154:	bicne	r7, r7, #7
   11158:	add	r5, r7, r8
   1115c:	cmp	ip, #0
   11160:	add	r5, r5, #3
   11164:	bic	r5, r5, #3
   11168:	beq	11198 <__assert_fail@plt+0x7f8>
   1116c:	ldr	r0, [pc, #260]	; 11278 <__assert_fail@plt+0x8d8>
   11170:	rsb	r1, r4, r3
   11174:	mov	r2, r3
   11178:	str	r3, [sp, #12]
   1117c:	add	r0, pc, r0
   11180:	bl	1085c <printf@plt>
   11184:	ldr	r0, [pc, #240]	; 1127c <__assert_fail@plt+0x8dc>
   11188:	rsb	r1, r4, r7
   1118c:	add	r0, pc, r0
   11190:	bl	1085c <printf@plt>
   11194:	ldr	r3, [sp, #12]
   11198:	ldr	r0, [pc, #224]	; 11280 <__assert_fail@plt+0x8e0>
   1119c:	lsl	r1, r6, #2
   111a0:	ldr	r2, [pc, #220]	; 11284 <__assert_fail@plt+0x8e4>
   111a4:	add	r0, pc, r0
   111a8:	add	r2, pc, r2
   111ac:	bl	1085c <printf@plt>
   111b0:	mov	r0, r7
   111b4:	mov	r1, r8
   111b8:	bl	11b68 <__assert_fail@plt+0x11c8>
   111bc:	ldr	r0, [pc, #196]	; 11288 <__assert_fail@plt+0x8e8>
   111c0:	add	r0, pc, r0
   111c4:	bl	10898 <puts@plt>
   111c8:	b	1103c <__assert_fail@plt+0x69c>
   111cc:	mov	r0, #0
   111d0:	add	sp, sp, #172	; 0xac
   111d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111d8:	andeq	r2, r1, ip, lsl #11
   111dc:	andeq	r0, r0, r8, lsl #1
   111e0:	andeq	r1, r0, sl, asr #10
   111e4:	andeq	r1, r0, r0, lsl r5
   111e8:	ldrdeq	r2, [r1], -r8
   111ec:	andeq	r1, r0, r9, asr r5
   111f0:	andeq	r0, r0, r4, lsl #1
   111f4:	andeq	r1, r0, r8, lsr #10
   111f8:	andeq	r1, r0, pc, lsl r5
   111fc:	andeq	r1, r0, fp, lsl #10
   11200:	ldcl	13, cr0, [lr, #832]!	; 0x340
   11204:	andle	pc, sp, sp, ror #29
   11208:	andeq	r1, r0, r6, lsr #9
   1120c:	andeq	r1, r0, lr, lsr #9
   11210:	andeq	r1, r0, ip, lsr #9
   11214:	andeq	r1, r0, r9, ror #8
   11218:	andeq	r1, r0, fp, asr r4
   1121c:	andeq	r1, r0, r8, asr r4
   11220:	andeq	r1, r0, r2, ror #8
   11224:	andeq	r1, r0, sl, ror #8
   11228:	andeq	r1, r0, r3, ror r4
   1122c:	andeq	r1, r0, ip, ror r4
   11230:	andeq	r1, r0, r5, ror r4
   11234:	andeq	r1, r0, pc, ror #8
   11238:	andeq	r1, r0, r9, ror #8
   1123c:	andeq	r1, r0, r3, ror #8
   11240:	andeq	r1, r0, r8, ror #8
   11244:	andeq	r1, r0, r4, lsl r0
   11248:	andeq	r1, r0, r3, lsl #5
   1124c:	andeq	r1, r1, r0, asr #29
   11250:			; <UNDEFINED> instruction: 0x00000fb4
   11254:	andeq	r1, r0, pc, lsr #4
   11258:	andeq	r1, r0, r0, asr #32
   1125c:	andeq	r0, r0, r8, lsr pc
   11260:			; <UNDEFINED> instruction: 0x000011b0
   11264:			; <UNDEFINED> instruction: 0x00000fb8
   11268:	andeq	r1, r0, pc, lsl #3
   1126c:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   11270:	andeq	r1, r0, r4, ror r1
   11274:	andeq	r0, r0, r8, ror #30
   11278:	andeq	r1, r0, r3, lsl r1
   1127c:	andeq	r1, r0, r9, lsl r1
   11280:	andeq	r1, r0, r2, lsl r1
   11284:	andeq	r0, r0, r8, asr #29
   11288:	andeq	r0, r0, r1, ror pc
   1128c:	mov	fp, #0
   11290:	mov	lr, #0
   11294:	pop	{r1}		; (ldr r1, [sp], #4)
   11298:	mov	r2, sp
   1129c:	push	{r2}		; (str r2, [sp, #-4]!)
   112a0:	push	{r0}		; (str r0, [sp, #-4]!)
   112a4:	ldr	ip, [pc, #16]	; 112bc <__assert_fail@plt+0x91c>
   112a8:	push	{ip}		; (str ip, [sp, #-4]!)
   112ac:	ldr	r0, [pc, #12]	; 112c0 <__assert_fail@plt+0x920>
   112b0:	ldr	r3, [pc, #12]	; 112c4 <__assert_fail@plt+0x924>
   112b4:	bl	108b0 <__libc_start_main@plt>
   112b8:	bl	10988 <abort@plt>
   112bc:	andeq	r1, r1, r8, lsl #31
   112c0:	andeq	r0, r1, r4, asr sl
   112c4:	andeq	r1, r1, r4, lsr #30
   112c8:	ldr	r3, [pc, #20]	; 112e4 <__assert_fail@plt+0x944>
   112cc:	ldr	r2, [pc, #20]	; 112e8 <__assert_fail@plt+0x948>
   112d0:	add	r3, pc, r3
   112d4:	ldr	r2, [r3, r2]
   112d8:	cmp	r2, #0
   112dc:	bxeq	lr
   112e0:	b	108c8 <__gmon_start__@plt>
   112e4:	andeq	r1, r1, r8, lsr #26
   112e8:	andeq	r0, r0, ip, lsl #1
   112ec:	push	{r3, lr}
   112f0:	movw	r0, #12440	; 0x3098
   112f4:	ldr	r3, [pc, #36]	; 11320 <__assert_fail@plt+0x980>
   112f8:	movt	r0, #2
   112fc:	rsb	r3, r0, r3
   11300:	cmp	r3, #6
   11304:	popls	{r3, pc}
   11308:	movw	r3, #0
   1130c:	movt	r3, #0
   11310:	cmp	r3, #0
   11314:	popeq	{r3, pc}
   11318:	blx	r3
   1131c:	pop	{r3, pc}
   11320:	muleq	r2, fp, r0
   11324:	push	{r3, lr}
   11328:	movw	r0, #12440	; 0x3098
   1132c:	movw	r3, #12440	; 0x3098
   11330:	movt	r0, #2
   11334:	movt	r3, #2
   11338:	rsb	r3, r0, r3
   1133c:	asr	r3, r3, #2
   11340:	add	r3, r3, r3, lsr #31
   11344:	asrs	r1, r3, #1
   11348:	popeq	{r3, pc}
   1134c:	movw	r2, #0
   11350:	movt	r2, #0
   11354:	cmp	r2, #0
   11358:	popeq	{r3, pc}
   1135c:	blx	r2
   11360:	pop	{r3, pc}
   11364:	push	{r4, lr}
   11368:	movw	r4, #12440	; 0x3098
   1136c:	movt	r4, #2
   11370:	ldrb	r3, [r4]
   11374:	cmp	r3, #0
   11378:	popne	{r4, pc}
   1137c:	bl	112ec <__assert_fail@plt+0x94c>
   11380:	mov	r3, #1
   11384:	strb	r3, [r4]
   11388:	pop	{r4, pc}
   1138c:	movw	r0, #11904	; 0x2e80
   11390:	movt	r0, #2
   11394:	push	{r3, lr}
   11398:	ldr	r3, [r0]
   1139c:	cmp	r3, #0
   113a0:	beq	113b8 <__assert_fail@plt+0xa18>
   113a4:	movw	r3, #0
   113a8:	movt	r3, #0
   113ac:	cmp	r3, #0
   113b0:	beq	113b8 <__assert_fail@plt+0xa18>
   113b4:	blx	r3
   113b8:	pop	{r3, lr}
   113bc:	b	11324 <__assert_fail@plt+0x984>
   113c0:	ubfx	r3, r0, #8, #8
   113c4:	sub	sp, sp, #8
   113c8:	lsl	r3, r3, #16
   113cc:	orr	r3, r3, r0, lsl #24
   113d0:	orr	r3, r3, r0, lsr #24
   113d4:	ubfx	r0, r0, #16, #8
   113d8:	orr	r0, r3, r0, lsl #8
   113dc:	add	sp, sp, #8
   113e0:	bx	lr
   113e4:	cmp	r1, #39	; 0x27
   113e8:	push	{r3, r4, r5, lr}
   113ec:	mov	r4, r0
   113f0:	mov	r5, r1
   113f4:	bls	11464 <__assert_fail@plt+0xac4>
   113f8:	ldr	r0, [r0]
   113fc:	bl	113c0 <__assert_fail@plt+0xa20>
   11400:	ldr	r3, [pc, #100]	; 1146c <__assert_fail@plt+0xacc>
   11404:	cmp	r0, r3
   11408:	bne	11464 <__assert_fail@plt+0xac4>
   1140c:	ldr	r0, [r4, #20]
   11410:	bl	113c0 <__assert_fail@plt+0xa20>
   11414:	cmp	r0, #17
   11418:	bhi	11464 <__assert_fail@plt+0xac4>
   1141c:	ldr	r0, [r4, #24]
   11420:	bl	113c0 <__assert_fail@plt+0xa20>
   11424:	cmp	r0, #17
   11428:	bhi	11464 <__assert_fail@plt+0xac4>
   1142c:	ldr	r0, [r4, #4]
   11430:	bl	113c0 <__assert_fail@plt+0xa20>
   11434:	cmp	r0, r5
   11438:	bcs	11464 <__assert_fail@plt+0xac4>
   1143c:	ldr	r0, [r4, #8]
   11440:	bl	113c0 <__assert_fail@plt+0xa20>
   11444:	cmp	r0, r5
   11448:	bcs	11464 <__assert_fail@plt+0xac4>
   1144c:	ldr	r0, [r4, #12]
   11450:	bl	113c0 <__assert_fail@plt+0xa20>
   11454:	cmp	r0, r5
   11458:	movcs	r0, #0
   1145c:	movcc	r0, #1
   11460:	pop	{r3, r4, r5, pc}
   11464:	mov	r0, #0
   11468:	pop	{r3, r4, r5, pc}
   1146c:	andle	pc, sp, sp, ror #29
   11470:	push	{r3, lr}
   11474:	bl	108a4 <malloc@plt>
   11478:	cmp	r0, #0
   1147c:	popne	{r3, pc}
   11480:	ldr	r0, [pc, #4]	; 1148c <__assert_fail@plt+0xaec>
   11484:	add	r0, pc, r0
   11488:	bl	10a00 <__assert_fail@plt+0x60>
   1148c:	andeq	r0, r0, sp, lsl pc
   11490:	push	{r3, r4, r5, lr}
   11494:	mov	r5, r0
   11498:	bl	10904 <strlen@plt>
   1149c:	add	r4, r0, #1
   114a0:	mov	r0, r4
   114a4:	bl	11470 <__assert_fail@plt+0xad0>
   114a8:	mov	r1, r5
   114ac:	mov	r2, r4
   114b0:	bl	10880 <memcpy@plt>
   114b4:	pop	{r3, r4, r5, pc}
   114b8:	push	{r1, r2, r3}
   114bc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   114c0:	add	r6, sp, #40	; 0x28
   114c4:	ldr	r8, [sp, #36]	; 0x24
   114c8:	mov	r7, r0
   114cc:	mov	r5, #0
   114d0:	mov	r4, #128	; 0x80
   114d4:	mov	r0, r5
   114d8:	mov	r1, r4
   114dc:	bl	1088c <realloc@plt>
   114e0:	subs	r5, r0, #0
   114e4:	bne	114f8 <__assert_fail@plt+0xb58>
   114e8:	ldr	r0, [pc, #100]	; 11554 <__assert_fail@plt+0xbb4>
   114ec:	mov	r1, r4
   114f0:	add	r0, pc, r0
   114f4:	bl	10a00 <__assert_fail@plt+0x60>
   114f8:	mov	r2, r8
   114fc:	mov	r3, r6
   11500:	mov	r1, r4
   11504:	str	r6, [sp, #4]
   11508:	bl	10970 <vsnprintf@plt>
   1150c:	mvn	r3, r0
   11510:	lsr	r3, r3, #31
   11514:	cmp	r0, r4
   11518:	movge	r2, #0
   1151c:	andlt	r2, r3, #1
   11520:	cmp	r2, #0
   11524:	bne	11538 <__assert_fail@plt+0xb98>
   11528:	cmp	r3, #0
   1152c:	addne	r4, r0, #1
   11530:	lsleq	r4, r4, #1
   11534:	b	114d4 <__assert_fail@plt+0xb34>
   11538:	str	r5, [r7]
   1153c:	mov	r0, r5
   11540:	bl	10904 <strlen@plt>
   11544:	add	sp, sp, #12
   11548:	pop	{r4, r5, r6, r7, r8, lr}
   1154c:	add	sp, sp, #12
   11550:	bx	lr
   11554:	andeq	r0, r0, r2, asr #29
   11558:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1155c:	mov	r7, r1
   11560:	mov	r9, r0
   11564:	bl	10904 <strlen@plt>
   11568:	mov	r4, r0
   1156c:	mov	r8, r0
   11570:	mov	r0, r7
   11574:	bl	10904 <strlen@plt>
   11578:	cmp	r4, #0
   1157c:	add	r3, r4, r0
   11580:	mov	sl, r0
   11584:	add	r0, r3, #2
   11588:	ble	115a4 <__assert_fail@plt+0xc04>
   1158c:	add	r2, r9, r4
   11590:	ldrb	r2, [r2, #-1]
   11594:	cmp	r2, #47	; 0x2f
   11598:	addeq	r0, r3, #1
   1159c:	moveq	r6, #0
   115a0:	beq	115a8 <__assert_fail@plt+0xc08>
   115a4:	mov	r6, #1
   115a8:	bl	11470 <__assert_fail@plt+0xad0>
   115ac:	mov	r1, r9
   115b0:	mov	r2, r4
   115b4:	mov	r5, r0
   115b8:	bl	10880 <memcpy@plt>
   115bc:	cmp	r6, #0
   115c0:	mov	r1, r7
   115c4:	addne	r8, r4, #1
   115c8:	add	r2, sl, #1
   115cc:	movne	r3, #47	; 0x2f
   115d0:	add	r0, r5, r8
   115d4:	strbne	r3, [r5, r4]
   115d8:	bl	10880 <memcpy@plt>
   115dc:	mov	r0, r5
   115e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   115e4:	cmp	r1, #0
   115e8:	push	{r4, r5, r6, r7, r8, lr}
   115ec:	mov	r4, r0
   115f0:	beq	11660 <__assert_fail@plt+0xcc0>
   115f4:	add	r7, r0, r1
   115f8:	ldrb	r3, [r7, #-1]
   115fc:	cmp	r3, #0
   11600:	bne	11660 <__assert_fail@plt+0xcc0>
   11604:	cmp	r4, r7
   11608:	bcs	11668 <__assert_fail@plt+0xcc8>
   1160c:	mov	r5, r4
   11610:	mov	r6, r5
   11614:	ldrb	r8, [r5], #1
   11618:	cmp	r8, #0
   1161c:	beq	11644 <__assert_fail@plt+0xca4>
   11620:	bl	108ec <__ctype_b_loc@plt>
   11624:	lsl	r8, r8, #1
   11628:	ldr	r3, [r0]
   1162c:	ldrh	r3, [r3, r8]
   11630:	tst	r3, #16384	; 0x4000
   11634:	beq	11644 <__assert_fail@plt+0xca4>
   11638:	cmp	r5, r7
   1163c:	mov	r6, r5
   11640:	bne	11610 <__assert_fail@plt+0xc70>
   11644:	ldrb	r0, [r6]
   11648:	cmp	r0, #0
   1164c:	bne	11660 <__assert_fail@plt+0xcc0>
   11650:	cmp	r6, r4
   11654:	popeq	{r4, r5, r6, r7, r8, pc}
   11658:	add	r4, r6, #1
   1165c:	b	11604 <__assert_fail@plt+0xc64>
   11660:	mov	r0, #0
   11664:	pop	{r4, r5, r6, r7, r8, pc}
   11668:	mov	r0, #1
   1166c:	pop	{r4, r5, r6, r7, r8, pc}
   11670:	push	{r0, r1, r4, r5, r6, lr}
   11674:	mov	r3, r0
   11678:	ldr	r5, [r1]
   1167c:	mov	r6, r1
   11680:	add	r1, r0, r5
   11684:	add	r4, r5, #1
   11688:	ldrb	r0, [r0, r5]
   1168c:	cmp	r0, #102	; 0x66
   11690:	beq	11710 <__assert_fail@plt+0xd70>
   11694:	bhi	116c0 <__assert_fail@plt+0xd20>
   11698:	cmp	r0, #97	; 0x61
   1169c:	beq	116f8 <__assert_fail@plt+0xd58>
   116a0:	bhi	116b4 <__assert_fail@plt+0xd14>
   116a4:	sub	r3, r0, #48	; 0x30
   116a8:	cmp	r3, #7
   116ac:	bls	11718 <__assert_fail@plt+0xd78>
   116b0:	b	117c0 <__assert_fail@plt+0xe20>
   116b4:	cmp	r0, #98	; 0x62
   116b8:	moveq	r0, #8
   116bc:	b	117c0 <__assert_fail@plt+0xe20>
   116c0:	cmp	r0, #116	; 0x74
   116c4:	beq	11700 <__assert_fail@plt+0xd60>
   116c8:	bhi	116e4 <__assert_fail@plt+0xd44>
   116cc:	cmp	r0, #110	; 0x6e
   116d0:	moveq	r0, #10
   116d4:	beq	117c0 <__assert_fail@plt+0xe20>
   116d8:	cmp	r0, #114	; 0x72
   116dc:	moveq	r0, #13
   116e0:	b	117c0 <__assert_fail@plt+0xe20>
   116e4:	cmp	r0, #118	; 0x76
   116e8:	beq	11708 <__assert_fail@plt+0xd68>
   116ec:	cmp	r0, #120	; 0x78
   116f0:	beq	11770 <__assert_fail@plt+0xdd0>
   116f4:	b	117c0 <__assert_fail@plt+0xe20>
   116f8:	mov	r0, #7
   116fc:	b	117c0 <__assert_fail@plt+0xe20>
   11700:	mov	r0, #9
   11704:	b	117c0 <__assert_fail@plt+0xe20>
   11708:	mov	r0, #11
   1170c:	b	117c0 <__assert_fail@plt+0xe20>
   11710:	mov	r0, #12
   11714:	b	117c0 <__assert_fail@plt+0xe20>
   11718:	mov	r2, #3
   1171c:	mov	r0, sp
   11720:	mov	r3, #0
   11724:	strb	r3, [sp, #3]
   11728:	bl	10940 <strncpy@plt>
   1172c:	mov	r0, sp
   11730:	add	r1, sp, #4
   11734:	mov	r2, #8
   11738:	bl	10850 <strtol@plt>
   1173c:	ldr	r3, [sp, #4]
   11740:	mov	r4, sp
   11744:	cmp	r3, r4
   11748:	rsbhi	r4, r4, r3
   1174c:	bhi	117b8 <__assert_fail@plt+0xe18>
   11750:	ldr	r0, [pc, #116]	; 117cc <__assert_fail@plt+0xe2c>
   11754:	mov	r2, #150	; 0x96
   11758:	ldr	r1, [pc, #112]	; 117d0 <__assert_fail@plt+0xe30>
   1175c:	ldr	r3, [pc, #112]	; 117d4 <__assert_fail@plt+0xe34>
   11760:	add	r0, pc, r0
   11764:	add	r1, pc, r1
   11768:	add	r3, pc, r3
   1176c:	bl	109a0 <__assert_fail@plt>
   11770:	add	r1, r3, r4
   11774:	mov	r2, #0
   11778:	mov	r0, sp
   1177c:	strb	r2, [sp, #2]
   11780:	mov	r2, #2
   11784:	mov	r5, sp
   11788:	bl	10940 <strncpy@plt>
   1178c:	mov	r0, sp
   11790:	add	r1, sp, #4
   11794:	mov	r2, #16
   11798:	bl	10850 <strtol@plt>
   1179c:	ldr	r3, [sp, #4]
   117a0:	cmp	r3, r5
   117a4:	rsbhi	r5, r5, r3
   117a8:	bhi	117b8 <__assert_fail@plt+0xe18>
   117ac:	ldr	r0, [pc, #36]	; 117d8 <__assert_fail@plt+0xe38>
   117b0:	add	r0, pc, r0
   117b4:	bl	10a00 <__assert_fail@plt+0x60>
   117b8:	add	r4, r4, r5
   117bc:	uxtb	r0, r0
   117c0:	str	r4, [r6]
   117c4:	add	sp, sp, #8
   117c8:	pop	{r4, r5, r6, pc}
   117cc:	andeq	r0, r0, lr, ror #24
   117d0:	andeq	r0, r0, r3, ror ip
   117d4:	andeq	r0, r0, r1, lsr #24
   117d8:	andeq	r0, r0, lr, lsr #24
   117dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117e0:	mov	r9, r1
   117e4:	mov	r4, #0
   117e8:	str	r4, [r1]
   117ec:	ldr	r1, [pc, #208]	; 118c4 <__assert_fail@plt+0xf24>
   117f0:	mov	r5, r0
   117f4:	mov	sl, r2
   117f8:	add	r1, pc, r1
   117fc:	bl	10844 <strcmp@plt>
   11800:	cmp	r0, #0
   11804:	beq	11828 <__assert_fail@plt+0xe88>
   11808:	mov	r0, r5
   1180c:	mov	r1, r4
   11810:	bl	108d4 <open@plt>
   11814:	subs	r8, r0, #0
   11818:	bge	1182c <__assert_fail@plt+0xe8c>
   1181c:	bl	10928 <__errno_location@plt>
   11820:	ldr	r0, [r0]
   11824:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11828:	mov	r8, r0
   1182c:	mov	r0, #1024	; 0x400
   11830:	mov	r5, #0
   11834:	bl	11470 <__assert_fail@plt+0xad0>
   11838:	mov	r4, #1024	; 0x400
   1183c:	mov	r6, r0
   11840:	mov	r0, r8
   11844:	add	r1, r6, r5
   11848:	rsb	r2, r5, r4
   1184c:	bl	10868 <read@plt>
   11850:	subs	r7, r0, #0
   11854:	bge	11864 <__assert_fail@plt+0xec4>
   11858:	bl	10928 <__errno_location@plt>
   1185c:	ldr	r7, [r0]
   11860:	b	1189c <__assert_fail@plt+0xefc>
   11864:	add	r5, r5, r7
   11868:	beq	1189c <__assert_fail@plt+0xefc>
   1186c:	cmp	r5, r4
   11870:	bne	11840 <__assert_fail@plt+0xea0>
   11874:	lsl	r4, r5, #1
   11878:	mov	r0, r6
   1187c:	mov	r1, r4
   11880:	bl	1088c <realloc@plt>
   11884:	subs	r6, r0, #0
   11888:	bne	11840 <__assert_fail@plt+0xea0>
   1188c:	ldr	r0, [pc, #52]	; 118c8 <__assert_fail@plt+0xf28>
   11890:	mov	r1, r4
   11894:	add	r0, pc, r0
   11898:	bl	10a00 <__assert_fail@plt+0x60>
   1189c:	mov	r0, r8
   118a0:	bl	10994 <close@plt>
   118a4:	cmp	r7, #0
   118a8:	streq	r6, [r9]
   118ac:	beq	118b8 <__assert_fail@plt+0xf18>
   118b0:	mov	r0, r6
   118b4:	bl	10874 <free@plt>
   118b8:	str	r4, [sl]
   118bc:	mov	r0, r7
   118c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118c4:	andeq	r0, r0, ip, lsl #24
   118c8:	andeq	r0, r0, lr, lsl fp
   118cc:	push	{r0, r1, r2, lr}
   118d0:	add	r2, sp, #4
   118d4:	bl	117dc <__assert_fail@plt+0xe3c>
   118d8:	add	sp, sp, #12
   118dc:	pop	{pc}		; (ldr pc, [sp], #4)
   118e0:	push	{r0, r1, r2, r4, r5, lr}
   118e4:	mov	r2, r1
   118e8:	add	r1, sp, #4
   118ec:	mov	r5, r0
   118f0:	bl	117dc <__assert_fail@plt+0xe3c>
   118f4:	ldr	r4, [pc, #64]	; 1193c <__assert_fail@plt+0xf9c>
   118f8:	add	r4, pc, r4
   118fc:	cmp	r0, #0
   11900:	ldreq	r0, [sp, #4]
   11904:	beq	11934 <__assert_fail@plt+0xf94>
   11908:	ldr	r3, [pc, #48]	; 11940 <__assert_fail@plt+0xfa0>
   1190c:	ldr	r3, [r4, r3]
   11910:	ldr	r4, [r3]
   11914:	bl	108bc <strerror@plt>
   11918:	ldr	r1, [pc, #36]	; 11944 <__assert_fail@plt+0xfa4>
   1191c:	mov	r2, r5
   11920:	add	r1, pc, r1
   11924:	mov	r3, r0
   11928:	mov	r0, r4
   1192c:	bl	1091c <fprintf@plt>
   11930:	mov	r0, #0
   11934:	add	sp, sp, #12
   11938:	pop	{r4, r5, pc}
   1193c:	andeq	r1, r1, r0, lsl #14
   11940:	andeq	r0, r0, r8, lsl #1
   11944:	andeq	r0, r0, r6, ror #21
   11948:	push	{r0, r1, r2, lr}
   1194c:	add	r1, sp, #4
   11950:	bl	118e0 <__assert_fail@plt+0xf40>
   11954:	add	sp, sp, #12
   11958:	pop	{pc}		; (ldr pc, [sp], #4)
   1195c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11960:	mov	r7, r1
   11964:	ldr	r1, [pc, #188]	; 11a28 <__assert_fail@plt+0x1088>
   11968:	mov	r4, r0
   1196c:	add	r1, pc, r1
   11970:	bl	10844 <strcmp@plt>
   11974:	cmp	r0, #0
   11978:	moveq	r6, #1
   1197c:	beq	119a4 <__assert_fail@plt+0x1004>
   11980:	mov	r0, r4
   11984:	movw	r1, #577	; 0x241
   11988:	movw	r2, #438	; 0x1b6
   1198c:	bl	108d4 <open@plt>
   11990:	subs	r6, r0, #0
   11994:	bge	119a4 <__assert_fail@plt+0x1004>
   11998:	bl	10928 <__errno_location@plt>
   1199c:	ldr	r0, [r0]
   119a0:	b	11a20 <__assert_fail@plt+0x1080>
   119a4:	ldr	r3, [r7, #4]
   119a8:	mov	r4, #0
   119ac:	mov	r5, r4
   119b0:	ubfx	r8, r3, #8, #8
   119b4:	str	r3, [sp, #4]
   119b8:	lsl	r8, r8, #16
   119bc:	orr	r8, r8, r3, lsl #24
   119c0:	orr	r8, r8, r3, lsr #24
   119c4:	ubfx	r3, r3, #16, #8
   119c8:	orr	r8, r8, r3, lsl #8
   119cc:	cmp	r5, r8
   119d0:	bge	11a04 <__assert_fail@plt+0x1064>
   119d4:	mov	r0, r6
   119d8:	add	r1, r7, r5
   119dc:	rsb	r2, r5, r8
   119e0:	bl	1094c <write@plt>
   119e4:	subs	r4, r0, #0
   119e8:	bge	119fc <__assert_fail@plt+0x105c>
   119ec:	bl	10928 <__errno_location@plt>
   119f0:	ldr	r4, [r0]
   119f4:	rsb	r4, r4, #0
   119f8:	b	11a04 <__assert_fail@plt+0x1064>
   119fc:	add	r5, r5, r4
   11a00:	b	119cc <__assert_fail@plt+0x102c>
   11a04:	cmp	r6, #1
   11a08:	beq	11a14 <__assert_fail@plt+0x1074>
   11a0c:	mov	r0, r6
   11a10:	bl	10994 <close@plt>
   11a14:	cmp	r4, #0
   11a18:	rsblt	r0, r4, #0
   11a1c:	movge	r0, #0
   11a20:	add	sp, sp, #8
   11a24:	pop	{r4, r5, r6, r7, r8, pc}
   11a28:	muleq	r0, r8, sl
   11a2c:	push	{r3, r4, r5, lr}
   11a30:	mov	r5, r0
   11a34:	bl	1195c <__assert_fail@plt+0xfbc>
   11a38:	ldr	r4, [pc, #64]	; 11a80 <__assert_fail@plt+0x10e0>
   11a3c:	add	r4, pc, r4
   11a40:	subs	r3, r0, #0
   11a44:	beq	11a78 <__assert_fail@plt+0x10d8>
   11a48:	ldr	r3, [pc, #52]	; 11a84 <__assert_fail@plt+0x10e4>
   11a4c:	ldr	r3, [r4, r3]
   11a50:	ldr	r4, [r3]
   11a54:	bl	108bc <strerror@plt>
   11a58:	ldr	r1, [pc, #40]	; 11a88 <__assert_fail@plt+0x10e8>
   11a5c:	mov	r2, r5
   11a60:	add	r1, pc, r1
   11a64:	mov	r3, r0
   11a68:	mov	r0, r4
   11a6c:	bl	1091c <fprintf@plt>
   11a70:	mvn	r0, #0
   11a74:	pop	{r3, r4, r5, pc}
   11a78:	mov	r0, r3
   11a7c:	pop	{r3, r4, r5, pc}
   11a80:			; <UNDEFINED> instruction: 0x000115bc
   11a84:	andeq	r0, r0, r8, lsl #1
   11a88:	andeq	r0, r0, r8, asr #19
   11a8c:	push	{r4, r5, r6, r7, r8, lr}
   11a90:	mov	r4, r0
   11a94:	ldrb	r3, [r0]
   11a98:	mov	r8, r1
   11a9c:	mov	r7, r2
   11aa0:	cmp	r3, #0
   11aa4:	bne	11ab0 <__assert_fail@plt+0x1110>
   11aa8:	mvn	r0, #0
   11aac:	pop	{r4, r5, r6, r7, r8, pc}
   11ab0:	mvn	r3, #0
   11ab4:	str	r3, [r2]
   11ab8:	ldrb	r5, [r0]
   11abc:	ldr	r0, [pc, #156]	; 11b60 <__assert_fail@plt+0x11c0>
   11ac0:	mov	r1, r5
   11ac4:	add	r0, pc, r0
   11ac8:	bl	10910 <strchr@plt>
   11acc:	cmp	r0, #0
   11ad0:	moveq	r5, r0
   11ad4:	beq	11af4 <__assert_fail@plt+0x1154>
   11ad8:	ldrb	r3, [r4, #1]
   11adc:	cmp	r5, r3
   11ae0:	addne	r4, r4, #1
   11ae4:	bne	11af4 <__assert_fail@plt+0x1154>
   11ae8:	cmp	r5, #104	; 0x68
   11aec:	add	r4, r4, #2
   11af0:	moveq	r5, #98	; 0x62
   11af4:	ldrb	r6, [r4]
   11af8:	cmp	r6, #0
   11afc:	beq	11aa8 <__assert_fail@plt+0x1108>
   11b00:	ldr	r0, [pc, #92]	; 11b64 <__assert_fail@plt+0x11c4>
   11b04:	mov	r1, r6
   11b08:	add	r0, pc, r0
   11b0c:	bl	10910 <strchr@plt>
   11b10:	cmp	r0, #0
   11b14:	beq	11aa8 <__assert_fail@plt+0x1108>
   11b18:	cmp	r6, #115	; 0x73
   11b1c:	beq	11b48 <__assert_fail@plt+0x11a8>
   11b20:	cmp	r5, #98	; 0x62
   11b24:	moveq	r3, #1
   11b28:	beq	11b44 <__assert_fail@plt+0x11a4>
   11b2c:	cmp	r5, #104	; 0x68
   11b30:	moveq	r3, #2
   11b34:	beq	11b44 <__assert_fail@plt+0x11a4>
   11b38:	cmp	r5, #108	; 0x6c
   11b3c:	mvnne	r3, #0
   11b40:	moveq	r3, #4
   11b44:	str	r3, [r7]
   11b48:	ldrb	r3, [r4]
   11b4c:	str	r3, [r8]
   11b50:	ldrb	r0, [r4, #1]
   11b54:	subs	r0, r0, #0
   11b58:	mvnne	r0, #0
   11b5c:	pop	{r4, r5, r6, r7, r8, pc}
   11b60:	andeq	r0, r0, r5, lsl #19
   11b64:	andeq	r0, r0, r6, asr #18
   11b68:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11b6c:	subs	r4, r1, #0
   11b70:	mov	r6, r0
   11b74:	beq	11cc8 <__assert_fail@plt+0x1328>
   11b78:	bl	115e4 <__assert_fail@plt+0xc44>
   11b7c:	subs	r5, r0, #0
   11b80:	beq	11bd8 <__assert_fail@plt+0x1238>
   11b84:	ldr	r0, [pc, #324]	; 11cd0 <__assert_fail@plt+0x1330>
   11b88:	mov	r5, r6
   11b8c:	ldr	r7, [pc, #320]	; 11cd4 <__assert_fail@plt+0x1334>
   11b90:	add	r4, r6, r4
   11b94:	add	r0, pc, r0
   11b98:	ldr	r6, [pc, #312]	; 11cd8 <__assert_fail@plt+0x1338>
   11b9c:	bl	1085c <printf@plt>
   11ba0:	add	r7, pc, r7
   11ba4:	add	r6, pc, r6
   11ba8:	mov	r1, r5
   11bac:	mov	r0, r7
   11bb0:	bl	1085c <printf@plt>
   11bb4:	mov	r0, r5
   11bb8:	bl	10904 <strlen@plt>
   11bbc:	add	r0, r0, #1
   11bc0:	add	r5, r5, r0
   11bc4:	cmp	r5, r4
   11bc8:	bcs	11cc8 <__assert_fail@plt+0x1328>
   11bcc:	mov	r0, r6
   11bd0:	bl	1085c <printf@plt>
   11bd4:	b	11ba8 <__assert_fail@plt+0x1208>
   11bd8:	ands	r7, r4, #3
   11bdc:	bne	11c68 <__assert_fail@plt+0x12c8>
   11be0:	ldr	r0, [pc, #244]	; 11cdc <__assert_fail@plt+0x133c>
   11be4:	mov	r5, r7
   11be8:	ldr	r8, [pc, #240]	; 11ce0 <__assert_fail@plt+0x1340>
   11bec:	add	r0, pc, r0
   11bf0:	ldr	r7, [pc, #236]	; 11ce4 <__assert_fail@plt+0x1344>
   11bf4:	bl	1085c <printf@plt>
   11bf8:	add	r3, r4, #3
   11bfc:	cmp	r4, #0
   11c00:	ldr	r9, [pc, #224]	; 11ce8 <__assert_fail@plt+0x1348>
   11c04:	add	r7, pc, r7
   11c08:	add	r8, pc, r8
   11c0c:	movlt	r4, r3
   11c10:	add	r9, pc, r9
   11c14:	asr	r4, r4, #2
   11c18:	cmp	r5, r4
   11c1c:	bge	11c60 <__assert_fail@plt+0x12c0>
   11c20:	ldr	r3, [r6, r5, lsl #2]
   11c24:	sub	r2, r4, #1
   11c28:	cmp	r5, r2
   11c2c:	mov	r0, r9
   11c30:	ubfx	r1, r3, #8, #8
   11c34:	add	r5, r5, #1
   11c38:	str	r3, [sp, #4]
   11c3c:	movge	r2, r7
   11c40:	movlt	r2, r8
   11c44:	lsl	r1, r1, #16
   11c48:	orr	r1, r1, r3, lsl #24
   11c4c:	orr	r1, r1, r3, lsr #24
   11c50:	ubfx	r3, r3, #16, #8
   11c54:	orr	r1, r1, r3, lsl #8
   11c58:	bl	1085c <printf@plt>
   11c5c:	b	11c18 <__assert_fail@plt+0x1278>
   11c60:	mov	r0, #62	; 0x3e
   11c64:	b	11cbc <__assert_fail@plt+0x131c>
   11c68:	ldr	r0, [pc, #124]	; 11cec <__assert_fail@plt+0x134c>
   11c6c:	ldr	r7, [pc, #124]	; 11cf0 <__assert_fail@plt+0x1350>
   11c70:	add	r0, pc, r0
   11c74:	ldr	r8, [pc, #120]	; 11cf4 <__assert_fail@plt+0x1354>
   11c78:	bl	1085c <printf@plt>
   11c7c:	ldr	r9, [pc, #116]	; 11cf8 <__assert_fail@plt+0x1358>
   11c80:	add	r7, pc, r7
   11c84:	add	r8, pc, r8
   11c88:	add	r9, pc, r9
   11c8c:	cmp	r5, r4
   11c90:	bge	11cb8 <__assert_fail@plt+0x1318>
   11c94:	sub	r3, r4, #1
   11c98:	ldrb	r1, [r6, r5]
   11c9c:	cmp	r5, r3
   11ca0:	mov	r0, r9
   11ca4:	add	r5, r5, #1
   11ca8:	movge	r2, r7
   11cac:	movlt	r2, r8
   11cb0:	bl	1085c <printf@plt>
   11cb4:	b	11c8c <__assert_fail@plt+0x12ec>
   11cb8:	mov	r0, #93	; 0x5d
   11cbc:	add	sp, sp, #12
   11cc0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   11cc4:	b	10934 <putchar@plt>
   11cc8:	add	sp, sp, #12
   11ccc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11cd0:			; <UNDEFINED> instruction: 0x000008bf
   11cd4:			; <UNDEFINED> instruction: 0x000008b7
   11cd8:	andeq	r0, r0, ip, lsr #18
   11cdc:	andeq	r0, r0, r0, ror r8
   11ce0:	andeq	r0, r0, r1, asr #17
   11ce4:	andeq	r0, r0, ip, ror #8
   11ce8:	andeq	r0, r0, r1, asr r8
   11cec:	strdeq	r0, [r0], -sl
   11cf0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11cf4:	andeq	r0, r0, r5, asr #16
   11cf8:	andeq	r0, r0, r7, ror #15
   11cfc:	ldr	r0, [pc, #24]	; 11d1c <__assert_fail@plt+0x137c>
   11d00:	ldr	r1, [pc, #24]	; 11d20 <__assert_fail@plt+0x1380>
   11d04:	push	{r3, lr}
   11d08:	add	r0, pc, r0
   11d0c:	add	r1, pc, r1
   11d10:	bl	1085c <printf@plt>
   11d14:	mov	r0, #0
   11d18:	bl	108f8 <exit@plt>
   11d1c:	andeq	r0, r0, lr, ror #14
   11d20:	andeq	r0, r0, r7, ror r7
   11d24:	ldr	ip, [pc, #444]	; 11ee8 <__assert_fail@plt+0x1548>
   11d28:	subs	r8, r0, #0
   11d2c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
   11d30:	add	ip, pc, ip
   11d34:	mov	r6, r1
   11d38:	mov	lr, r2
   11d3c:	mov	r5, r3
   11d40:	ldrne	r3, [pc, #420]	; 11eec <__assert_fail@plt+0x154c>
   11d44:	ldreq	r3, [pc, #420]	; 11ef0 <__assert_fail@plt+0x1550>
   11d48:	ldr	r3, [ip, r3]
   11d4c:	mov	r2, r6
   11d50:	ldr	ip, [pc, #412]	; 11ef4 <__assert_fail@plt+0x1554>
   11d54:	mov	r6, #0
   11d58:	ldr	r1, [pc, #408]	; 11ef8 <__assert_fail@plt+0x1558>
   11d5c:	mov	r7, r6
   11d60:	add	ip, pc, ip
   11d64:	ldr	r4, [r3]
   11d68:	add	r1, pc, r1
   11d6c:	ldr	r0, [ip]
   11d70:	ldrh	r3, [ip, #4]
   11d74:	str	r0, [sp, #16]
   11d78:	mov	r0, r4
   11d7c:	strh	r3, [sp, #20]
   11d80:	mov	r3, lr
   11d84:	bl	1091c <fprintf@plt>
   11d88:	ldr	r0, [r5, r6]
   11d8c:	cmp	r0, #0
   11d90:	beq	11dbc <__assert_fail@plt+0x141c>
   11d94:	bl	10904 <strlen@plt>
   11d98:	add	r3, r5, r6
   11d9c:	add	r6, r6, #16
   11da0:	ldr	r3, [r3, #4]
   11da4:	cmp	r3, #1
   11da8:	addne	r0, r0, #1
   11dac:	addeq	r0, r0, #7
   11db0:	cmp	r7, r0
   11db4:	movlt	r7, r0
   11db8:	b	11d88 <__assert_fail@plt+0x13e8>
   11dbc:	ldr	r6, [sp, #40]	; 0x28
   11dc0:	ldr	r9, [pc, #308]	; 11efc <__assert_fail@plt+0x155c>
   11dc4:	ldr	sl, [pc, #308]	; 11f00 <__assert_fail@plt+0x1560>
   11dc8:	sub	r6, r6, #4
   11dcc:	ldr	fp, [pc, #304]	; 11f04 <__assert_fail@plt+0x1564>
   11dd0:	add	r9, pc, r9
   11dd4:	add	sl, pc, sl
   11dd8:	add	fp, pc, fp
   11ddc:	ldr	r3, [r5]
   11de0:	cmp	r3, #0
   11de4:	beq	11ec0 <__assert_fail@plt+0x1520>
   11de8:	ldr	r3, [r6, #4]
   11dec:	cmp	r3, #0
   11df0:	bne	11e18 <__assert_fail@plt+0x1478>
   11df4:	ldr	r3, [pc, #268]	; 11f08 <__assert_fail@plt+0x1568>
   11df8:	movw	r2, #450	; 0x1c2
   11dfc:	ldr	r0, [pc, #264]	; 11f0c <__assert_fail@plt+0x156c>
   11e00:	ldr	r1, [pc, #264]	; 11f10 <__assert_fail@plt+0x1570>
   11e04:	add	r3, pc, r3
   11e08:	add	r0, pc, r0
   11e0c:	add	r3, r3, #13
   11e10:	add	r1, pc, r1
   11e14:	bl	109a0 <__assert_fail@plt>
   11e18:	ldr	r2, [r5, #12]
   11e1c:	cmp	r2, #126	; 0x7e
   11e20:	ble	11e34 <__assert_fail@plt+0x1494>
   11e24:	mov	r0, sl
   11e28:	mov	r1, r4
   11e2c:	bl	1097c <fputs@plt>
   11e30:	b	11e40 <__assert_fail@plt+0x14a0>
   11e34:	mov	r0, r4
   11e38:	mov	r1, r9
   11e3c:	bl	1091c <fprintf@plt>
   11e40:	ldr	r3, [r5, #4]
   11e44:	cmp	r3, #0
   11e48:	bne	11e68 <__assert_fail@plt+0x14c8>
   11e4c:	ldr	r1, [pc, #192]	; 11f14 <__assert_fail@plt+0x1574>
   11e50:	mov	r0, r4
   11e54:	mov	r2, r7
   11e58:	ldr	r3, [r5]
   11e5c:	add	r1, pc, r1
   11e60:	bl	1091c <fprintf@plt>
   11e64:	b	11ea4 <__assert_fail@plt+0x1504>
   11e68:	ldr	r2, [r5]
   11e6c:	mov	r0, r2
   11e70:	str	r2, [sp, #12]
   11e74:	bl	10904 <strlen@plt>
   11e78:	sub	r3, r7, #6
   11e7c:	mov	r1, fp
   11e80:	ldr	r2, [sp, #12]
   11e84:	rsb	r0, r0, r3
   11e88:	ldr	r3, [pc, #136]	; 11f18 <__assert_fail@plt+0x1578>
   11e8c:	str	r0, [sp]
   11e90:	mov	r0, r4
   11e94:	add	r3, pc, r3
   11e98:	str	r3, [sp, #4]
   11e9c:	add	r3, sp, #16
   11ea0:	bl	1091c <fprintf@plt>
   11ea4:	ldr	r1, [pc, #112]	; 11f1c <__assert_fail@plt+0x157c>
   11ea8:	mov	r0, r4
   11eac:	ldr	r2, [r6, #4]!
   11eb0:	add	r5, r5, #16
   11eb4:	add	r1, pc, r1
   11eb8:	bl	1091c <fprintf@plt>
   11ebc:	b	11ddc <__assert_fail@plt+0x143c>
   11ec0:	cmp	r8, #0
   11ec4:	moveq	r0, r8
   11ec8:	beq	11ee4 <__assert_fail@plt+0x1544>
   11ecc:	ldr	r1, [pc, #76]	; 11f20 <__assert_fail@plt+0x1580>
   11ed0:	mov	r0, r4
   11ed4:	mov	r2, r8
   11ed8:	add	r1, pc, r1
   11edc:	bl	1091c <fprintf@plt>
   11ee0:	mov	r0, #1
   11ee4:	bl	108f8 <exit@plt>
   11ee8:	andeq	r1, r1, r8, asr #5
   11eec:	andeq	r0, r0, r8, lsl #1
   11ef0:	muleq	r0, r0, r0
   11ef4:	muleq	r0, r1, r7
   11ef8:	andeq	r0, r0, r5, lsr #14
   11efc:	strdeq	r0, [r0], -fp
   11f00:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11f04:	andeq	r0, r0, r2, lsl #14
   11f08:	andeq	r0, r0, r5, lsl #11
   11f0c:	andeq	r0, r0, r0, lsr #13
   11f10:	andeq	r0, r0, r7, asr #11
   11f14:	andeq	r0, r0, r7, ror r6
   11f18:	ldrdeq	r0, [r0], -ip
   11f1c:	andeq	r0, r0, r0, ror r5
   11f20:	andeq	r0, r0, sp, lsl #12
   11f24:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11f28:	mov	r7, r0
   11f2c:	ldr	r6, [pc, #76]	; 11f80 <__assert_fail@plt+0x15e0>
   11f30:	mov	r8, r1
   11f34:	ldr	r5, [pc, #72]	; 11f84 <__assert_fail@plt+0x15e4>
   11f38:	mov	r9, r2
   11f3c:	add	r6, pc, r6
   11f40:	bl	10824 <strcmp@plt-0x20>
   11f44:	add	r5, pc, r5
   11f48:	rsb	r6, r5, r6
   11f4c:	asrs	r6, r6, #2
   11f50:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11f54:	sub	r5, r5, #4
   11f58:	mov	r4, #0
   11f5c:	add	r4, r4, #1
   11f60:	ldr	r3, [r5, #4]!
   11f64:	mov	r0, r7
   11f68:	mov	r1, r8
   11f6c:	mov	r2, r9
   11f70:	blx	r3
   11f74:	cmp	r4, r6
   11f78:	bne	11f5c <__assert_fail@plt+0x15bc>
   11f7c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11f80:	andeq	r0, r1, r8, lsr pc
   11f84:	andeq	r0, r1, ip, lsr #30
   11f88:	bx	lr

Disassembly of section .fini:

00011f8c <.fini>:
   11f8c:	push	{r3, lr}
   11f90:	pop	{r3, pc}
