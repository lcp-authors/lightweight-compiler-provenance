
centos-preinstalled/od:     file format elf32-littlearm


Disassembly of section .init:

000111cc <.init>:
   111cc:	push	{r3, lr}
   111d0:	bl	12e18 <__assert_fail@plt+0x18f0>
   111d4:	pop	{r3, pc}

Disassembly of section .plt:

000111d8 <fdopen@plt-0x14>:
   111d8:	push	{lr}		; (str lr, [sp, #-4]!)
   111dc:	ldr	lr, [pc, #4]	; 111e8 <fdopen@plt-0x4>
   111e0:	add	lr, pc, lr
   111e4:	ldr	pc, [lr, #8]!
   111e8:	andeq	ip, r1, r8, lsl lr

000111ec <fdopen@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3608]!	; 0xe18

000111f8 <calloc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3600]!	; 0xe10

00011204 <fputs_unlocked@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3592]!	; 0xe08

00011210 <raise@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3584]!	; 0xe00

0001121c <strcmp@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3576]!	; 0xdf8

00011228 <fflush@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3568]!	; 0xdf0

00011234 <free@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3560]!	; 0xde8

00011240 <ferror@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3552]!	; 0xde0

0001124c <_exit@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3544]!	; 0xdd8

00011258 <memcpy@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3536]!	; 0xdd0

00011264 <__strtoull_internal@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011270 <mbsinit@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3520]!	; 0xdc0

0001127c <strtold@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3512]!	; 0xdb8

00011288 <fwrite_unlocked@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3504]!	; 0xdb0

00011294 <memcmp@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3496]!	; 0xda8

000112a0 <dcgettext@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3488]!	; 0xda0

000112ac <__stack_chk_fail@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3480]!	; 0xd98

000112b8 <realloc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3472]!	; 0xd90

000112c4 <textdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3464]!	; 0xd88

000112d0 <iswprint@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3456]!	; 0xd80

000112dc <__fxstat64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3448]!	; 0xd78

000112e8 <fwrite@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3440]!	; 0xd70

000112f4 <lseek64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3432]!	; 0xd68

00011300 <__ctype_get_mb_cur_max@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3424]!	; 0xd60

0001130c <strcpy@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3416]!	; 0xd58

00011318 <__fpending@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3408]!	; 0xd50

00011324 <mbrtowc@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3400]!	; 0xd48

00011330 <error@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3392]!	; 0xd40

0001133c <strtof@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3384]!	; 0xd38

00011348 <open64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3376]!	; 0xd30

00011354 <getenv@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3368]!	; 0xd28

00011360 <puts@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3360]!	; 0xd20

0001136c <malloc@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3352]!	; 0xd18

00011378 <__libc_start_main@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3344]!	; 0xd10

00011384 <__freading@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3336]!	; 0xd08

00011390 <__gmon_start__@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3328]!	; 0xd00

0001139c <getopt_long@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3320]!	; 0xcf8

000113a8 <__ctype_b_loc@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b4 <exit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3304]!	; 0xce8

000113c0 <strlen@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3296]!	; 0xce0

000113cc <strchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113d8 <ungetc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e4 <__errno_location@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3272]!	; 0xcc8

000113f0 <__sprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113fc <__cxa_atexit@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3256]!	; 0xcb8

00011408 <setvbuf@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3248]!	; 0xcb0

00011414 <memset@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3240]!	; 0xca8

00011420 <fscanf@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3232]!	; 0xca0

0001142c <fgetc@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3224]!	; 0xc98

00011438 <__printf_chk@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3216]!	; 0xc90

00011444 <strtod@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3208]!	; 0xc88

00011450 <fileno@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3200]!	; 0xc80

0001145c <__fprintf_chk@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3192]!	; 0xc78

00011468 <fclose@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3184]!	; 0xc70

00011474 <fseeko64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3176]!	; 0xc68

00011480 <__uflow@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3168]!	; 0xc60

0001148c <__overflow@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3160]!	; 0xc58

00011498 <setlocale@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3152]!	; 0xc50

000114a4 <strrchr@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3144]!	; 0xc48

000114b0 <nl_langinfo@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3136]!	; 0xc40

000114bc <__fread_unlocked_chk@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3128]!	; 0xc38

000114c8 <localeconv@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3120]!	; 0xc30

000114d4 <fopen64@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3112]!	; 0xc28

000114e0 <bindtextdomain@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3104]!	; 0xc20

000114ec <fread_unlocked@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #3096]!	; 0xc18

000114f8 <strncmp@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #3088]!	; 0xc10

00011504 <abort@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #3080]!	; 0xc08

00011510 <close@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #3072]!	; 0xc00

0001151c <__snprintf_chk@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #3064]!	; 0xbf8

00011528 <__assert_fail@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #3056]!	; 0xbf0

Disassembly of section .text:

00011538 <close_stdout@@Base-0x4148>:
   11538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1153c:	sub	sp, sp, #92	; 0x5c
   11540:	ldr	r8, [pc, #3872]	; 12468 <__assert_fail@plt+0xf40>
   11544:	mov	r6, r0
   11548:	ldr	r3, [pc, #3868]	; 1246c <__assert_fail@plt+0xf44>
   1154c:	mov	r4, r1
   11550:	add	r8, pc, r8
   11554:	ldr	r0, [r1]
   11558:	ldr	r5, [pc, #3856]	; 12470 <__assert_fail@plt+0xf48>
   1155c:	ldr	r3, [r8, r3]
   11560:	add	r5, pc, r5
   11564:	ldr	r3, [r3]
   11568:	str	r3, [sp, #84]	; 0x54
   1156c:	bl	15cb0 <close_stdout@@Base+0x630>
   11570:	ldr	r1, [pc, #3836]	; 12474 <__assert_fail@plt+0xf4c>
   11574:	mov	r0, #6
   11578:	add	r1, pc, r1
   1157c:	bl	11498 <setlocale@plt>
   11580:	ldr	r1, [pc, #3824]	; 12478 <__assert_fail@plt+0xf50>
   11584:	mov	r0, r5
   11588:	add	r1, pc, r1
   1158c:	bl	114e0 <bindtextdomain@plt>
   11590:	mov	r0, r5
   11594:	bl	112c4 <textdomain@plt>
   11598:	ldr	r3, [pc, #3804]	; 1247c <__assert_fail@plt+0xf54>
   1159c:	ldr	r0, [r8, r3]
   115a0:	bl	1b8bc <close_stdout@@Base+0x623c>
   115a4:	ldr	r2, [pc, #3796]	; 12480 <__assert_fail@plt+0xf58>
   115a8:	mov	r1, #0
   115ac:	add	r2, pc, r2
   115b0:	add	r3, r2, #28
   115b4:	add	r2, r2, #64	; 0x40
   115b8:	str	r1, [r3, #4]!
   115bc:	cmp	r3, r2
   115c0:	bne	115b8 <__assert_fail@plt+0x90>
   115c4:	ldr	r2, [pc, #3768]	; 12484 <__assert_fail@plt+0xf5c>
   115c8:	mov	r0, #0
   115cc:	mov	ip, #2
   115d0:	mov	r5, #1
   115d4:	add	r2, pc, r2
   115d8:	mov	lr, #4
   115dc:	add	r1, r2, #100	; 0x64
   115e0:	mov	r3, r2
   115e4:	str	ip, [r2, #40]	; 0x28
   115e8:	str	r5, [r2, #36]	; 0x24
   115ec:	mov	ip, #5
   115f0:	str	lr, [r2, #48]	; 0x30
   115f4:	str	ip, [r3, #64]!	; 0x40
   115f8:	str	r0, [r3, #4]!
   115fc:	cmp	r3, r1
   11600:	mov	r2, #0
   11604:	bne	115f8 <__assert_fail@plt+0xd0>
   11608:	ldr	r3, [pc, #3704]	; 12488 <__assert_fail@plt+0xf60>
   1160c:	add	fp, sp, #56	; 0x38
   11610:	ldr	r9, [pc, #3700]	; 1248c <__assert_fail@plt+0xf64>
   11614:	mov	r5, #1
   11618:	add	r3, pc, r3
   1161c:	ldr	r0, [pc, #3692]	; 12490 <__assert_fail@plt+0xf68>
   11620:	add	r3, r3, #532	; 0x214
   11624:	str	r3, [sp, #24]
   11628:	ldr	r3, [pc, #3684]	; 12494 <__assert_fail@plt+0xf6c>
   1162c:	add	r9, pc, r9
   11630:	ldr	r1, [pc, #3680]	; 12498 <__assert_fail@plt+0xf70>
   11634:	add	r0, pc, r0
   11638:	add	r3, pc, r3
   1163c:	mov	sl, r2
   11640:	add	r1, pc, r1
   11644:	add	ip, r9, #136	; 0x88
   11648:	add	r0, r0, #128	; 0x80
   1164c:	mov	r7, r2
   11650:	str	r2, [r3]
   11654:	str	r2, [r3, #28]
   11658:	str	r2, [r3, #4]
   1165c:	strb	r2, [r3, #106]	; 0x6a
   11660:	mov	r2, #6
   11664:	str	r1, [r3, #116]	; 0x74
   11668:	mov	r1, #8
   1166c:	str	r2, [r3, #84]	; 0x54
   11670:	mov	r2, #7
   11674:	str	ip, [sp, #12]
   11678:	str	r0, [sp, #16]
   1167c:	str	r1, [r3, #12]
   11680:	str	r2, [r3, #100]	; 0x64
   11684:	str	r2, [r3, #8]
   11688:	str	r8, [sp, #28]
   1168c:	str	r9, [sp, #44]	; 0x2c
   11690:	ldr	r2, [pc, #3588]	; 1249c <__assert_fail@plt+0xf74>
   11694:	mov	r0, r6
   11698:	ldr	r3, [pc, #3584]	; 124a0 <__assert_fail@plt+0xf78>
   1169c:	mov	r1, r4
   116a0:	add	r2, pc, r2
   116a4:	str	fp, [sp]
   116a8:	add	r2, r2, #496	; 0x1f0
   116ac:	add	r3, pc, r3
   116b0:	mvn	ip, #0
   116b4:	str	ip, [sp, #56]	; 0x38
   116b8:	bl	1139c <getopt_long@plt>
   116bc:	cmn	r0, #1
   116c0:	beq	11e7c <__assert_fail@plt+0x954>
   116c4:	add	r0, r0, #3
   116c8:	movw	r3, #259	; 0x103
   116cc:	cmp	r0, r3
   116d0:	addls	pc, pc, r0, lsl #2
   116d4:	b	11f94 <__assert_fail@plt+0xa6c>
   116d8:	b	11e34 <__assert_fail@plt+0x90c>
   116dc:	b	11e2c <__assert_fail@plt+0x904>
   116e0:	b	11f94 <__assert_fail@plt+0xa6c>
   116e4:	b	11f94 <__assert_fail@plt+0xa6c>
   116e8:	b	11f94 <__assert_fail@plt+0xa6c>
   116ec:	b	11f94 <__assert_fail@plt+0xa6c>
   116f0:	b	11f94 <__assert_fail@plt+0xa6c>
   116f4:	b	11f94 <__assert_fail@plt+0xa6c>
   116f8:	b	11f94 <__assert_fail@plt+0xa6c>
   116fc:	b	11f94 <__assert_fail@plt+0xa6c>
   11700:	b	11f94 <__assert_fail@plt+0xa6c>
   11704:	b	11f94 <__assert_fail@plt+0xa6c>
   11708:	b	11f94 <__assert_fail@plt+0xa6c>
   1170c:	b	11f94 <__assert_fail@plt+0xa6c>
   11710:	b	11f94 <__assert_fail@plt+0xa6c>
   11714:	b	11f94 <__assert_fail@plt+0xa6c>
   11718:	b	11f94 <__assert_fail@plt+0xa6c>
   1171c:	b	11f94 <__assert_fail@plt+0xa6c>
   11720:	b	11f94 <__assert_fail@plt+0xa6c>
   11724:	b	11f94 <__assert_fail@plt+0xa6c>
   11728:	b	11f94 <__assert_fail@plt+0xa6c>
   1172c:	b	11f94 <__assert_fail@plt+0xa6c>
   11730:	b	11f94 <__assert_fail@plt+0xa6c>
   11734:	b	11f94 <__assert_fail@plt+0xa6c>
   11738:	b	11f94 <__assert_fail@plt+0xa6c>
   1173c:	b	11f94 <__assert_fail@plt+0xa6c>
   11740:	b	11f94 <__assert_fail@plt+0xa6c>
   11744:	b	11f94 <__assert_fail@plt+0xa6c>
   11748:	b	11f94 <__assert_fail@plt+0xa6c>
   1174c:	b	11f94 <__assert_fail@plt+0xa6c>
   11750:	b	11f94 <__assert_fail@plt+0xa6c>
   11754:	b	11f94 <__assert_fail@plt+0xa6c>
   11758:	b	11f94 <__assert_fail@plt+0xa6c>
   1175c:	b	11f94 <__assert_fail@plt+0xa6c>
   11760:	b	11f94 <__assert_fail@plt+0xa6c>
   11764:	b	11f94 <__assert_fail@plt+0xa6c>
   11768:	b	11f94 <__assert_fail@plt+0xa6c>
   1176c:	b	11f94 <__assert_fail@plt+0xa6c>
   11770:	b	11f94 <__assert_fail@plt+0xa6c>
   11774:	b	11f94 <__assert_fail@plt+0xa6c>
   11778:	b	11f94 <__assert_fail@plt+0xa6c>
   1177c:	b	11f94 <__assert_fail@plt+0xa6c>
   11780:	b	11f94 <__assert_fail@plt+0xa6c>
   11784:	b	11f94 <__assert_fail@plt+0xa6c>
   11788:	b	11f94 <__assert_fail@plt+0xa6c>
   1178c:	b	11f94 <__assert_fail@plt+0xa6c>
   11790:	b	11f94 <__assert_fail@plt+0xa6c>
   11794:	b	11f94 <__assert_fail@plt+0xa6c>
   11798:	b	11f94 <__assert_fail@plt+0xa6c>
   1179c:	b	11f94 <__assert_fail@plt+0xa6c>
   117a0:	b	11f94 <__assert_fail@plt+0xa6c>
   117a4:	b	11f94 <__assert_fail@plt+0xa6c>
   117a8:	b	11f94 <__assert_fail@plt+0xa6c>
   117ac:	b	11f94 <__assert_fail@plt+0xa6c>
   117b0:	b	11f94 <__assert_fail@plt+0xa6c>
   117b4:	b	11f94 <__assert_fail@plt+0xa6c>
   117b8:	b	11f94 <__assert_fail@plt+0xa6c>
   117bc:	b	11f94 <__assert_fail@plt+0xa6c>
   117c0:	b	11f94 <__assert_fail@plt+0xa6c>
   117c4:	b	11f94 <__assert_fail@plt+0xa6c>
   117c8:	b	11f94 <__assert_fail@plt+0xa6c>
   117cc:	b	11f94 <__assert_fail@plt+0xa6c>
   117d0:	b	11f94 <__assert_fail@plt+0xa6c>
   117d4:	b	11f94 <__assert_fail@plt+0xa6c>
   117d8:	b	11f94 <__assert_fail@plt+0xa6c>
   117dc:	b	11f94 <__assert_fail@plt+0xa6c>
   117e0:	b	11f94 <__assert_fail@plt+0xa6c>
   117e4:	b	11f94 <__assert_fail@plt+0xa6c>
   117e8:	b	11dd0 <__assert_fail@plt+0x8a8>
   117ec:	b	11dbc <__assert_fail@plt+0x894>
   117f0:	b	11f94 <__assert_fail@plt+0xa6c>
   117f4:	b	11da8 <__assert_fail@plt+0x880>
   117f8:	b	11f94 <__assert_fail@plt+0xa6c>
   117fc:	b	11d94 <__assert_fail@plt+0x86c>
   11800:	b	11f94 <__assert_fail@plt+0xa6c>
   11804:	b	11d80 <__assert_fail@plt+0x858>
   11808:	b	11d6c <__assert_fail@plt+0x844>
   1180c:	b	11f94 <__assert_fail@plt+0xa6c>
   11810:	b	11f94 <__assert_fail@plt+0xa6c>
   11814:	b	11d6c <__assert_fail@plt+0x844>
   11818:	b	11f94 <__assert_fail@plt+0xa6c>
   1181c:	b	11d0c <__assert_fail@plt+0x7e4>
   11820:	b	11cf8 <__assert_fail@plt+0x7d0>
   11824:	b	11f94 <__assert_fail@plt+0xa6c>
   11828:	b	11f94 <__assert_fail@plt+0xa6c>
   1182c:	b	11f94 <__assert_fail@plt+0xa6c>
   11830:	b	11c7c <__assert_fail@plt+0x754>
   11834:	b	11f94 <__assert_fail@plt+0xa6c>
   11838:	b	11f94 <__assert_fail@plt+0xa6c>
   1183c:	b	11f94 <__assert_fail@plt+0xa6c>
   11840:	b	11f94 <__assert_fail@plt+0xa6c>
   11844:	b	11d80 <__assert_fail@plt+0x858>
   11848:	b	11f94 <__assert_fail@plt+0xa6c>
   1184c:	b	11f94 <__assert_fail@plt+0xa6c>
   11850:	b	11f94 <__assert_fail@plt+0xa6c>
   11854:	b	11f94 <__assert_fail@plt+0xa6c>
   11858:	b	11f94 <__assert_fail@plt+0xa6c>
   1185c:	b	11f94 <__assert_fail@plt+0xa6c>
   11860:	b	11f94 <__assert_fail@plt+0xa6c>
   11864:	b	11f94 <__assert_fail@plt+0xa6c>
   11868:	b	11c68 <__assert_fail@plt+0x740>
   1186c:	b	11c54 <__assert_fail@plt+0x72c>
   11870:	b	11c40 <__assert_fail@plt+0x718>
   11874:	b	11c2c <__assert_fail@plt+0x704>
   11878:	b	11d94 <__assert_fail@plt+0x86c>
   1187c:	b	11c18 <__assert_fail@plt+0x6f0>
   11880:	b	11f94 <__assert_fail@plt+0xa6c>
   11884:	b	11c04 <__assert_fail@plt+0x6dc>
   11888:	b	11bf0 <__assert_fail@plt+0x6c8>
   1188c:	b	11bb0 <__assert_fail@plt+0x688>
   11890:	b	11f94 <__assert_fail@plt+0xa6c>
   11894:	b	11d6c <__assert_fail@plt+0x844>
   11898:	b	11f94 <__assert_fail@plt+0xa6c>
   1189c:	b	11f94 <__assert_fail@plt+0xa6c>
   118a0:	b	11dbc <__assert_fail@plt+0x894>
   118a4:	b	11f94 <__assert_fail@plt+0xa6c>
   118a8:	b	11f94 <__assert_fail@plt+0xa6c>
   118ac:	b	11f94 <__assert_fail@plt+0xa6c>
   118b0:	b	11b9c <__assert_fail@plt+0x674>
   118b4:	b	11b7c <__assert_fail@plt+0x654>
   118b8:	b	11f94 <__assert_fail@plt+0xa6c>
   118bc:	b	11b64 <__assert_fail@plt+0x63c>
   118c0:	b	11afc <__assert_fail@plt+0x5d4>
   118c4:	b	11c04 <__assert_fail@plt+0x6dc>
   118c8:	b	11f94 <__assert_fail@plt+0xa6c>
   118cc:	b	11f94 <__assert_fail@plt+0xa6c>
   118d0:	b	11f94 <__assert_fail@plt+0xa6c>
   118d4:	b	11f94 <__assert_fail@plt+0xa6c>
   118d8:	b	11f94 <__assert_fail@plt+0xa6c>
   118dc:	b	11f94 <__assert_fail@plt+0xa6c>
   118e0:	b	11f94 <__assert_fail@plt+0xa6c>
   118e4:	b	11f94 <__assert_fail@plt+0xa6c>
   118e8:	b	11f94 <__assert_fail@plt+0xa6c>
   118ec:	b	11f94 <__assert_fail@plt+0xa6c>
   118f0:	b	11f94 <__assert_fail@plt+0xa6c>
   118f4:	b	11f94 <__assert_fail@plt+0xa6c>
   118f8:	b	11f94 <__assert_fail@plt+0xa6c>
   118fc:	b	11f94 <__assert_fail@plt+0xa6c>
   11900:	b	11f94 <__assert_fail@plt+0xa6c>
   11904:	b	11f94 <__assert_fail@plt+0xa6c>
   11908:	b	11f94 <__assert_fail@plt+0xa6c>
   1190c:	b	11f94 <__assert_fail@plt+0xa6c>
   11910:	b	11f94 <__assert_fail@plt+0xa6c>
   11914:	b	11f94 <__assert_fail@plt+0xa6c>
   11918:	b	11f94 <__assert_fail@plt+0xa6c>
   1191c:	b	11f94 <__assert_fail@plt+0xa6c>
   11920:	b	11f94 <__assert_fail@plt+0xa6c>
   11924:	b	11f94 <__assert_fail@plt+0xa6c>
   11928:	b	11f94 <__assert_fail@plt+0xa6c>
   1192c:	b	11f94 <__assert_fail@plt+0xa6c>
   11930:	b	11f94 <__assert_fail@plt+0xa6c>
   11934:	b	11f94 <__assert_fail@plt+0xa6c>
   11938:	b	11f94 <__assert_fail@plt+0xa6c>
   1193c:	b	11f94 <__assert_fail@plt+0xa6c>
   11940:	b	11f94 <__assert_fail@plt+0xa6c>
   11944:	b	11f94 <__assert_fail@plt+0xa6c>
   11948:	b	11f94 <__assert_fail@plt+0xa6c>
   1194c:	b	11f94 <__assert_fail@plt+0xa6c>
   11950:	b	11f94 <__assert_fail@plt+0xa6c>
   11954:	b	11f94 <__assert_fail@plt+0xa6c>
   11958:	b	11f94 <__assert_fail@plt+0xa6c>
   1195c:	b	11f94 <__assert_fail@plt+0xa6c>
   11960:	b	11f94 <__assert_fail@plt+0xa6c>
   11964:	b	11f94 <__assert_fail@plt+0xa6c>
   11968:	b	11f94 <__assert_fail@plt+0xa6c>
   1196c:	b	11f94 <__assert_fail@plt+0xa6c>
   11970:	b	11f94 <__assert_fail@plt+0xa6c>
   11974:	b	11f94 <__assert_fail@plt+0xa6c>
   11978:	b	11f94 <__assert_fail@plt+0xa6c>
   1197c:	b	11f94 <__assert_fail@plt+0xa6c>
   11980:	b	11f94 <__assert_fail@plt+0xa6c>
   11984:	b	11f94 <__assert_fail@plt+0xa6c>
   11988:	b	11f94 <__assert_fail@plt+0xa6c>
   1198c:	b	11f94 <__assert_fail@plt+0xa6c>
   11990:	b	11f94 <__assert_fail@plt+0xa6c>
   11994:	b	11f94 <__assert_fail@plt+0xa6c>
   11998:	b	11f94 <__assert_fail@plt+0xa6c>
   1199c:	b	11f94 <__assert_fail@plt+0xa6c>
   119a0:	b	11f94 <__assert_fail@plt+0xa6c>
   119a4:	b	11f94 <__assert_fail@plt+0xa6c>
   119a8:	b	11f94 <__assert_fail@plt+0xa6c>
   119ac:	b	11f94 <__assert_fail@plt+0xa6c>
   119b0:	b	11f94 <__assert_fail@plt+0xa6c>
   119b4:	b	11f94 <__assert_fail@plt+0xa6c>
   119b8:	b	11f94 <__assert_fail@plt+0xa6c>
   119bc:	b	11f94 <__assert_fail@plt+0xa6c>
   119c0:	b	11f94 <__assert_fail@plt+0xa6c>
   119c4:	b	11f94 <__assert_fail@plt+0xa6c>
   119c8:	b	11f94 <__assert_fail@plt+0xa6c>
   119cc:	b	11f94 <__assert_fail@plt+0xa6c>
   119d0:	b	11f94 <__assert_fail@plt+0xa6c>
   119d4:	b	11f94 <__assert_fail@plt+0xa6c>
   119d8:	b	11f94 <__assert_fail@plt+0xa6c>
   119dc:	b	11f94 <__assert_fail@plt+0xa6c>
   119e0:	b	11f94 <__assert_fail@plt+0xa6c>
   119e4:	b	11f94 <__assert_fail@plt+0xa6c>
   119e8:	b	11f94 <__assert_fail@plt+0xa6c>
   119ec:	b	11f94 <__assert_fail@plt+0xa6c>
   119f0:	b	11f94 <__assert_fail@plt+0xa6c>
   119f4:	b	11f94 <__assert_fail@plt+0xa6c>
   119f8:	b	11f94 <__assert_fail@plt+0xa6c>
   119fc:	b	11f94 <__assert_fail@plt+0xa6c>
   11a00:	b	11f94 <__assert_fail@plt+0xa6c>
   11a04:	b	11f94 <__assert_fail@plt+0xa6c>
   11a08:	b	11f94 <__assert_fail@plt+0xa6c>
   11a0c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a10:	b	11f94 <__assert_fail@plt+0xa6c>
   11a14:	b	11f94 <__assert_fail@plt+0xa6c>
   11a18:	b	11f94 <__assert_fail@plt+0xa6c>
   11a1c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a20:	b	11f94 <__assert_fail@plt+0xa6c>
   11a24:	b	11f94 <__assert_fail@plt+0xa6c>
   11a28:	b	11f94 <__assert_fail@plt+0xa6c>
   11a2c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a30:	b	11f94 <__assert_fail@plt+0xa6c>
   11a34:	b	11f94 <__assert_fail@plt+0xa6c>
   11a38:	b	11f94 <__assert_fail@plt+0xa6c>
   11a3c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a40:	b	11f94 <__assert_fail@plt+0xa6c>
   11a44:	b	11f94 <__assert_fail@plt+0xa6c>
   11a48:	b	11f94 <__assert_fail@plt+0xa6c>
   11a4c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a50:	b	11f94 <__assert_fail@plt+0xa6c>
   11a54:	b	11f94 <__assert_fail@plt+0xa6c>
   11a58:	b	11f94 <__assert_fail@plt+0xa6c>
   11a5c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a60:	b	11f94 <__assert_fail@plt+0xa6c>
   11a64:	b	11f94 <__assert_fail@plt+0xa6c>
   11a68:	b	11f94 <__assert_fail@plt+0xa6c>
   11a6c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a70:	b	11f94 <__assert_fail@plt+0xa6c>
   11a74:	b	11f94 <__assert_fail@plt+0xa6c>
   11a78:	b	11f94 <__assert_fail@plt+0xa6c>
   11a7c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a80:	b	11f94 <__assert_fail@plt+0xa6c>
   11a84:	b	11f94 <__assert_fail@plt+0xa6c>
   11a88:	b	11f94 <__assert_fail@plt+0xa6c>
   11a8c:	b	11f94 <__assert_fail@plt+0xa6c>
   11a90:	b	11f94 <__assert_fail@plt+0xa6c>
   11a94:	b	11f94 <__assert_fail@plt+0xa6c>
   11a98:	b	11f94 <__assert_fail@plt+0xa6c>
   11a9c:	b	11f94 <__assert_fail@plt+0xa6c>
   11aa0:	b	11f94 <__assert_fail@plt+0xa6c>
   11aa4:	b	11f94 <__assert_fail@plt+0xa6c>
   11aa8:	b	11f94 <__assert_fail@plt+0xa6c>
   11aac:	b	11f94 <__assert_fail@plt+0xa6c>
   11ab0:	b	11f94 <__assert_fail@plt+0xa6c>
   11ab4:	b	11f94 <__assert_fail@plt+0xa6c>
   11ab8:	b	11f94 <__assert_fail@plt+0xa6c>
   11abc:	b	11f94 <__assert_fail@plt+0xa6c>
   11ac0:	b	11f94 <__assert_fail@plt+0xa6c>
   11ac4:	b	11f94 <__assert_fail@plt+0xa6c>
   11ac8:	b	11f94 <__assert_fail@plt+0xa6c>
   11acc:	b	11f94 <__assert_fail@plt+0xa6c>
   11ad0:	b	11f94 <__assert_fail@plt+0xa6c>
   11ad4:	b	11f94 <__assert_fail@plt+0xa6c>
   11ad8:	b	11f94 <__assert_fail@plt+0xa6c>
   11adc:	b	11f94 <__assert_fail@plt+0xa6c>
   11ae0:	b	11f94 <__assert_fail@plt+0xa6c>
   11ae4:	b	11ae8 <__assert_fail@plt+0x5c0>
   11ae8:	ldr	r3, [pc, #2484]	; 124a4 <__assert_fail@plt+0xf7c>
   11aec:	mov	r2, #1
   11af0:	add	r3, pc, r3
   11af4:	strb	r2, [r3, #148]	; 0x94
   11af8:	b	11690 <__assert_fail@plt+0x168>
   11afc:	ldr	r3, [pc, #2468]	; 124a8 <__assert_fail@plt+0xf80>
   11b00:	ldr	r8, [sp, #28]
   11b04:	ldr	sl, [r8, r3]
   11b08:	ldr	r0, [sl]
   11b0c:	cmp	r0, #0
   11b10:	beq	11fb0 <__assert_fail@plt+0xa88>
   11b14:	ldr	ip, [pc, #2448]	; 124ac <__assert_fail@plt+0xf84>
   11b18:	mov	r1, #0
   11b1c:	mov	r2, #10
   11b20:	add	r3, sp, #64	; 0x40
   11b24:	add	ip, pc, ip
   11b28:	str	ip, [sp]
   11b2c:	bl	17fd4 <close_stdout@@Base+0x2954>
   11b30:	subs	r7, r0, #0
   11b34:	bne	12ccc <__assert_fail@plt+0x17a4>
   11b38:	ldrd	r2, [sp, #64]	; 0x40
   11b3c:	mvn	r8, #0
   11b40:	mov	r9, #0
   11b44:	cmp	r3, r9
   11b48:	cmpeq	r2, r8
   11b4c:	bhi	127c0 <__assert_fail@plt+0x1298>
   11b50:	ldr	r9, [sp, #64]	; 0x40
   11b54:	mov	sl, #1
   11b58:	mov	r7, sl
   11b5c:	str	r9, [sp, #40]	; 0x28
   11b60:	b	11690 <__assert_fail@plt+0x168>
   11b64:	ldr	r3, [pc, #2372]	; 124b0 <__assert_fail@plt+0xf88>
   11b68:	mov	r2, #0
   11b6c:	mov	r7, #1
   11b70:	add	r3, pc, r3
   11b74:	strb	r2, [r3]
   11b78:	b	11690 <__assert_fail@plt+0x168>
   11b7c:	ldr	ip, [sp, #28]
   11b80:	mov	r7, #1
   11b84:	ldr	r3, [pc, #2332]	; 124a8 <__assert_fail@plt+0xf80>
   11b88:	ldr	r3, [ip, r3]
   11b8c:	ldr	r0, [r3]
   11b90:	bl	13df8 <__assert_fail@plt+0x28d0>
   11b94:	and	r5, r0, r5
   11b98:	b	11690 <__assert_fail@plt+0x168>
   11b9c:	ldr	r0, [pc, #2320]	; 124b4 <__assert_fail@plt+0xf8c>
   11ba0:	add	r0, pc, r0
   11ba4:	bl	13df8 <__assert_fail@plt+0x28d0>
   11ba8:	and	r5, r0, r5
   11bac:	b	11690 <__assert_fail@plt+0x168>
   11bb0:	ldr	ip, [pc, #2288]	; 124a8 <__assert_fail@plt+0xf80>
   11bb4:	mov	r1, #0
   11bb8:	ldr	r9, [sp, #28]
   11bbc:	mov	r2, r1
   11bc0:	ldr	r0, [pc, #2288]	; 124b8 <__assert_fail@plt+0xf90>
   11bc4:	ldr	r3, [sp, #16]
   11bc8:	ldr	r7, [r9, ip]
   11bcc:	add	r0, pc, r0
   11bd0:	add	r0, r0, #532	; 0x214
   11bd4:	str	r0, [sp]
   11bd8:	ldr	r0, [r7]
   11bdc:	bl	17fd4 <close_stdout@@Base+0x2954>
   11be0:	cmp	r0, #0
   11be4:	bne	12c88 <__assert_fail@plt+0x1760>
   11be8:	mov	r7, #1
   11bec:	b	11690 <__assert_fail@plt+0x168>
   11bf0:	ldr	r0, [pc, #2244]	; 124bc <__assert_fail@plt+0xf94>
   11bf4:	add	r0, pc, r0
   11bf8:	bl	13df8 <__assert_fail@plt+0x28d0>
   11bfc:	and	r5, r0, r5
   11c00:	b	11690 <__assert_fail@plt+0x168>
   11c04:	ldr	r0, [pc, #2228]	; 124c0 <__assert_fail@plt+0xf98>
   11c08:	add	r0, pc, r0
   11c0c:	bl	13df8 <__assert_fail@plt+0x28d0>
   11c10:	and	r5, r0, r5
   11c14:	b	11690 <__assert_fail@plt+0x168>
   11c18:	ldr	r0, [pc, #2212]	; 124c4 <__assert_fail@plt+0xf9c>
   11c1c:	add	r0, pc, r0
   11c20:	bl	13df8 <__assert_fail@plt+0x28d0>
   11c24:	and	r5, r0, r5
   11c28:	b	11690 <__assert_fail@plt+0x168>
   11c2c:	ldr	r0, [pc, #2196]	; 124c8 <__assert_fail@plt+0xfa0>
   11c30:	add	r0, pc, r0
   11c34:	bl	13df8 <__assert_fail@plt+0x28d0>
   11c38:	and	r5, r0, r5
   11c3c:	b	11690 <__assert_fail@plt+0x168>
   11c40:	ldr	r0, [pc, #2180]	; 124cc <__assert_fail@plt+0xfa4>
   11c44:	add	r0, pc, r0
   11c48:	bl	13df8 <__assert_fail@plt+0x28d0>
   11c4c:	and	r5, r0, r5
   11c50:	b	11690 <__assert_fail@plt+0x168>
   11c54:	ldr	r0, [pc, #2164]	; 124d0 <__assert_fail@plt+0xfa8>
   11c58:	add	r0, pc, r0
   11c5c:	bl	13df8 <__assert_fail@plt+0x28d0>
   11c60:	and	r5, r0, r5
   11c64:	b	11690 <__assert_fail@plt+0x168>
   11c68:	ldr	r0, [pc, #2148]	; 124d4 <__assert_fail@plt+0xfac>
   11c6c:	add	r0, pc, r0
   11c70:	bl	13df8 <__assert_fail@plt+0x28d0>
   11c74:	and	r5, r0, r5
   11c78:	b	11690 <__assert_fail@plt+0x168>
   11c7c:	ldr	r3, [pc, #2084]	; 124a8 <__assert_fail@plt+0xf80>
   11c80:	ldr	ip, [sp, #28]
   11c84:	ldr	r3, [ip, r3]
   11c88:	ldr	r0, [r3]
   11c8c:	str	r3, [sp, #20]
   11c90:	cmp	r0, #0
   11c94:	beq	11f9c <__assert_fail@plt+0xa74>
   11c98:	ldr	r8, [sp, #24]
   11c9c:	mov	r1, #0
   11ca0:	mov	r2, r1
   11ca4:	add	r3, sp, #64	; 0x40
   11ca8:	str	r8, [sp]
   11cac:	bl	17fd4 <close_stdout@@Base+0x2954>
   11cb0:	subs	r7, r0, #0
   11cb4:	bne	12cac <__assert_fail@plt+0x1784>
   11cb8:	ldrd	r2, [sp, #64]	; 0x40
   11cbc:	mvn	r8, #0
   11cc0:	mov	r9, #0
   11cc4:	cmp	r3, r9
   11cc8:	cmpeq	r2, r8
   11ccc:	bhi	127e8 <__assert_fail@plt+0x12c0>
   11cd0:	ldr	r3, [pc, #2048]	; 124d8 <__assert_fail@plt+0xfb0>
   11cd4:	ldr	r2, [sp, #64]	; 0x40
   11cd8:	add	r3, pc, r3
   11cdc:	str	r2, [r3, #144]	; 0x90
   11ce0:	ldr	r2, [pc, #2036]	; 124dc <__assert_fail@plt+0xfb4>
   11ce4:	mov	r3, #1
   11ce8:	mov	r7, r3
   11cec:	add	r2, pc, r2
   11cf0:	strb	r3, [r2, #106]	; 0x6a
   11cf4:	b	11690 <__assert_fail@plt+0x168>
   11cf8:	ldr	r0, [pc, #2016]	; 124e0 <__assert_fail@plt+0xfb8>
   11cfc:	add	r0, pc, r0
   11d00:	bl	13df8 <__assert_fail@plt+0x28d0>
   11d04:	and	r5, r0, r5
   11d08:	b	11690 <__assert_fail@plt+0x168>
   11d0c:	ldr	r3, [pc, #1940]	; 124a8 <__assert_fail@plt+0xf80>
   11d10:	mov	r7, #1
   11d14:	ldr	ip, [sp, #44]	; 0x2c
   11d18:	mov	r1, #0
   11d1c:	ldr	r9, [sp, #28]
   11d20:	mov	r2, r1
   11d24:	ldr	r0, [pc, #1976]	; 124e4 <__assert_fail@plt+0xfbc>
   11d28:	strb	r7, [ip, #105]	; 0x69
   11d2c:	ldr	r8, [r9, r3]
   11d30:	add	r0, pc, r0
   11d34:	add	r0, r0, #532	; 0x214
   11d38:	ldr	r3, [sp, #12]
   11d3c:	str	r0, [sp]
   11d40:	ldr	r0, [r8]
   11d44:	bl	17fd4 <close_stdout@@Base+0x2954>
   11d48:	cmp	r0, #0
   11d4c:	beq	11690 <__assert_fail@plt+0x168>
   11d50:	ldr	ip, [r8]
   11d54:	mov	r2, #78	; 0x4e
   11d58:	ldr	r3, [pc, #1928]	; 124e8 <__assert_fail@plt+0xfc0>
   11d5c:	ldr	r1, [sp, #56]	; 0x38
   11d60:	add	r3, pc, r3
   11d64:	str	ip, [sp]
   11d68:	bl	17ee0 <close_stdout@@Base+0x2860>
   11d6c:	ldr	r0, [pc, #1912]	; 124ec <__assert_fail@plt+0xfc4>
   11d70:	add	r0, pc, r0
   11d74:	bl	13df8 <__assert_fail@plt+0x28d0>
   11d78:	and	r5, r0, r5
   11d7c:	b	11690 <__assert_fail@plt+0x168>
   11d80:	ldr	r0, [pc, #1896]	; 124f0 <__assert_fail@plt+0xfc8>
   11d84:	add	r0, pc, r0
   11d88:	bl	13df8 <__assert_fail@plt+0x28d0>
   11d8c:	and	r5, r0, r5
   11d90:	b	11690 <__assert_fail@plt+0x168>
   11d94:	ldr	r0, [pc, #1880]	; 124f4 <__assert_fail@plt+0xfcc>
   11d98:	add	r0, pc, r0
   11d9c:	bl	13df8 <__assert_fail@plt+0x28d0>
   11da0:	and	r5, r0, r5
   11da4:	b	11690 <__assert_fail@plt+0x168>
   11da8:	ldr	r0, [pc, #1864]	; 124f8 <__assert_fail@plt+0xfd0>
   11dac:	add	r0, pc, r0
   11db0:	bl	13df8 <__assert_fail@plt+0x28d0>
   11db4:	and	r5, r0, r5
   11db8:	b	11690 <__assert_fail@plt+0x168>
   11dbc:	ldr	r0, [pc, #1848]	; 124fc <__assert_fail@plt+0xfd4>
   11dc0:	add	r0, pc, r0
   11dc4:	bl	13df8 <__assert_fail@plt+0x28d0>
   11dc8:	and	r5, r0, r5
   11dcc:	b	11690 <__assert_fail@plt+0x168>
   11dd0:	ldr	r3, [pc, #1744]	; 124a8 <__assert_fail@plt+0xf80>
   11dd4:	ldr	r8, [sp, #28]
   11dd8:	ldr	ip, [r8, r3]
   11ddc:	ldr	r3, [ip]
   11de0:	ldrb	r3, [r3]
   11de4:	cmp	r3, #110	; 0x6e
   11de8:	beq	12748 <__assert_fail@plt+0x1220>
   11dec:	bls	11fc4 <__assert_fail@plt+0xa9c>
   11df0:	cmp	r3, #111	; 0x6f
   11df4:	beq	127a8 <__assert_fail@plt+0x1280>
   11df8:	cmp	r3, #120	; 0x78
   11dfc:	bne	1276c <__assert_fail@plt+0x1244>
   11e00:	ldr	r3, [pc, #1784]	; 12500 <__assert_fail@plt+0xfd8>
   11e04:	mov	r0, #16
   11e08:	ldr	r1, [pc, #1780]	; 12504 <__assert_fail@plt+0xfdc>
   11e0c:	mov	r2, #6
   11e10:	add	r3, pc, r3
   11e14:	mov	r7, #1
   11e18:	add	r1, pc, r1
   11e1c:	str	r0, [r3, #12]
   11e20:	str	r1, [r3, #116]	; 0x74
   11e24:	str	r2, [r3, #8]
   11e28:	b	11690 <__assert_fail@plt+0x168>
   11e2c:	mov	r0, #0
   11e30:	bl	15310 <__assert_fail@plt+0x3de8>
   11e34:	ldr	r8, [sp, #28]
   11e38:	mov	r4, #0
   11e3c:	ldr	r1, [pc, #1956]	; 125e8 <__assert_fail@plt+0x10c0>
   11e40:	ldr	r3, [pc, #1728]	; 12508 <__assert_fail@plt+0xfe0>
   11e44:	ldr	r2, [pc, #1728]	; 1250c <__assert_fail@plt+0xfe4>
   11e48:	ldr	r0, [r8, r1]
   11e4c:	ldr	r3, [r8, r3]
   11e50:	add	r2, pc, r2
   11e54:	ldr	r1, [pc, #1716]	; 12510 <__assert_fail@plt+0xfe8>
   11e58:	ldr	r0, [r0]
   11e5c:	ldr	r3, [r3]
   11e60:	add	r1, pc, r1
   11e64:	stm	sp, {r2, r4}
   11e68:	ldr	r2, [pc, #1700]	; 12514 <__assert_fail@plt+0xfec>
   11e6c:	add	r2, pc, r2
   11e70:	bl	1799c <close_stdout@@Base+0x231c>
   11e74:	mov	r0, r4
   11e78:	bl	113b4 <exit@plt>
   11e7c:	cmp	r5, #0
   11e80:	ldr	r8, [sp, #28]
   11e84:	beq	128a0 <__assert_fail@plt+0x1378>
   11e88:	ldr	r3, [pc, #1672]	; 12518 <__assert_fail@plt+0xff0>
   11e8c:	add	r3, pc, r3
   11e90:	ldrb	r2, [r3, #106]	; 0x6a
   11e94:	cmp	r2, #0
   11e98:	beq	11ecc <__assert_fail@plt+0x9a4>
   11e9c:	ldr	r3, [r3]
   11ea0:	cmp	r3, #0
   11ea4:	beq	11ecc <__assert_fail@plt+0x9a4>
   11ea8:	ldr	r1, [pc, #1644]	; 1251c <__assert_fail@plt+0xff4>
   11eac:	mov	r2, #5
   11eb0:	mov	r0, #0
   11eb4:	add	r1, pc, r1
   11eb8:	bl	112a0 <dcgettext@plt>
   11ebc:	mov	r1, #0
   11ec0:	mov	r2, r0
   11ec4:	mov	r0, #1
   11ec8:	bl	11330 <error@plt>
   11ecc:	ldr	r3, [pc, #1612]	; 12520 <__assert_fail@plt+0xff8>
   11ed0:	cmp	r7, #0
   11ed4:	ldr	r5, [r8, r3]
   11ed8:	ldr	r3, [r5]
   11edc:	rsb	r6, r3, r6
   11ee0:	beq	11ef8 <__assert_fail@plt+0x9d0>
   11ee4:	ldr	r2, [pc, #1592]	; 12524 <__assert_fail@plt+0xffc>
   11ee8:	add	r2, pc, r2
   11eec:	ldrb	r2, [r2, #148]	; 0x94
   11ef0:	cmp	r2, #0
   11ef4:	beq	1207c <__assert_fail@plt+0xb54>
   11ef8:	cmp	r6, #2
   11efc:	beq	11ff8 <__assert_fail@plt+0xad0>
   11f00:	cmp	r6, #3
   11f04:	beq	1285c <__assert_fail@plt+0x1334>
   11f08:	cmp	r6, #1
   11f0c:	beq	12958 <__assert_fail@plt+0x1430>
   11f10:	ldr	r3, [pc, #1552]	; 12528 <__assert_fail@plt+0x1000>
   11f14:	add	r3, pc, r3
   11f18:	ldrb	r3, [r3, #148]	; 0x94
   11f1c:	cmp	r3, #0
   11f20:	beq	1207c <__assert_fail@plt+0xb54>
   11f24:	cmp	r6, #1
   11f28:	ble	1207c <__assert_fail@plt+0xb54>
   11f2c:	ldr	r1, [pc, #1528]	; 1252c <__assert_fail@plt+0x1004>
   11f30:	mov	r2, #5
   11f34:	mov	r0, #0
   11f38:	add	r1, pc, r1
   11f3c:	bl	112a0 <dcgettext@plt>
   11f40:	ldr	r3, [r5]
   11f44:	add	r3, r3, #1
   11f48:	mov	r6, r0
   11f4c:	ldr	r0, [r4, r3, lsl #2]
   11f50:	bl	17500 <close_stdout@@Base+0x1e80>
   11f54:	mov	r2, r6
   11f58:	mov	r3, r0
   11f5c:	mov	r0, #0
   11f60:	mov	r1, r0
   11f64:	bl	11330 <error@plt>
   11f68:	ldr	r1, [pc, #1472]	; 12530 <__assert_fail@plt+0x1008>
   11f6c:	mov	r2, #5
   11f70:	mov	r0, #0
   11f74:	add	r1, pc, r1
   11f78:	bl	112a0 <dcgettext@plt>
   11f7c:	ldr	r2, [pc, #1456]	; 12534 <__assert_fail@plt+0x100c>
   11f80:	add	r2, pc, r2
   11f84:	mov	r3, r0
   11f88:	mov	r0, #0
   11f8c:	mov	r1, r0
   11f90:	bl	11330 <error@plt>
   11f94:	mov	r0, #1
   11f98:	bl	15310 <__assert_fail@plt+0x3de8>
   11f9c:	ldr	r3, [pc, #1428]	; 12538 <__assert_fail@plt+0x1010>
   11fa0:	mov	r2, #3
   11fa4:	add	r3, pc, r3
   11fa8:	str	r2, [r3, #144]	; 0x90
   11fac:	b	11ce0 <__assert_fail@plt+0x7b8>
   11fb0:	mov	sl, #1
   11fb4:	mov	ip, #32
   11fb8:	mov	r7, sl
   11fbc:	str	ip, [sp, #40]	; 0x28
   11fc0:	b	11690 <__assert_fail@plt+0x168>
   11fc4:	cmp	r3, #100	; 0x64
   11fc8:	bne	1276c <__assert_fail@plt+0x1244>
   11fcc:	ldr	r3, [pc, #1384]	; 1253c <__assert_fail@plt+0x1014>
   11fd0:	mov	r0, #10
   11fd4:	ldr	r1, [pc, #1380]	; 12540 <__assert_fail@plt+0x1018>
   11fd8:	add	r3, pc, r3
   11fdc:	add	r1, pc, r1
   11fe0:	mov	r2, #7
   11fe4:	str	r0, [r3, #12]
   11fe8:	str	r1, [r3, #116]	; 0x74
   11fec:	mov	r7, #1
   11ff0:	str	r2, [r3, #8]
   11ff4:	b	11690 <__assert_fail@plt+0x168>
   11ff8:	ldr	r2, [pc, #1348]	; 12544 <__assert_fail@plt+0x101c>
   11ffc:	add	r3, r3, #1
   12000:	add	r2, pc, r2
   12004:	ldrb	r2, [r2, #148]	; 0x94
   12008:	cmp	r2, #0
   1200c:	bne	1202c <__assert_fail@plt+0xb04>
   12010:	ldr	r2, [r4, r3, lsl #2]
   12014:	ldrb	r2, [r2]
   12018:	cmp	r2, #43	; 0x2b
   1201c:	beq	1202c <__assert_fail@plt+0xb04>
   12020:	sub	r2, r2, #48	; 0x30
   12024:	cmp	r2, #9
   12028:	bhi	1207c <__assert_fail@plt+0xb54>
   1202c:	ldr	r0, [r4, r3, lsl #2]
   12030:	add	r1, sp, #64	; 0x40
   12034:	bl	1329c <__assert_fail@plt+0x1d74>
   12038:	cmp	r0, #0
   1203c:	beq	12888 <__assert_fail@plt+0x1360>
   12040:	ldr	r7, [pc, #1280]	; 12548 <__assert_fail@plt+0x1020>
   12044:	add	r7, pc, r7
   12048:	ldrb	r3, [r7, #148]	; 0x94
   1204c:	cmp	r3, #0
   12050:	bne	12d54 <__assert_fail@plt+0x182c>
   12054:	ldr	r0, [pc, #1264]	; 1254c <__assert_fail@plt+0x1024>
   12058:	mov	r6, #1
   1205c:	ldrd	r2, [sp, #64]	; 0x40
   12060:	ldr	r1, [r5]
   12064:	add	r0, pc, r0
   12068:	strd	r2, [r0, #128]	; 0x80
   1206c:	add	r3, r1, r6
   12070:	ldr	r2, [r4, r1, lsl #2]
   12074:	str	r2, [r4, r3, lsl #2]
   12078:	add	r4, r4, #4
   1207c:	ldr	r3, [pc, #1228]	; 12550 <__assert_fail@plt+0x1028>
   12080:	add	r3, pc, r3
   12084:	ldrb	r2, [r3, #149]	; 0x95
   12088:	cmp	r2, #0
   1208c:	beq	120b0 <__assert_fail@plt+0xb88>
   12090:	ldr	r2, [pc, #1212]	; 12554 <__assert_fail@plt+0x102c>
   12094:	ldr	r1, [r3, #116]	; 0x74
   12098:	add	r2, pc, r2
   1209c:	cmp	r1, r2
   120a0:	beq	12c68 <__assert_fail@plt+0x1740>
   120a4:	ldr	r2, [pc, #1196]	; 12558 <__assert_fail@plt+0x1030>
   120a8:	add	r2, pc, r2
   120ac:	str	r2, [r3, #116]	; 0x74
   120b0:	ldr	ip, [pc, #1188]	; 1255c <__assert_fail@plt+0x1034>
   120b4:	add	ip, pc, ip
   120b8:	ldrb	r3, [ip, #105]	; 0x69
   120bc:	cmp	r3, #0
   120c0:	bne	12814 <__assert_fail@plt+0x12ec>
   120c4:	ldr	r3, [pc, #1172]	; 12560 <__assert_fail@plt+0x1038>
   120c8:	add	r3, pc, r3
   120cc:	ldr	r3, [r3]
   120d0:	cmp	r3, #0
   120d4:	beq	128a8 <__assert_fail@plt+0x1380>
   120d8:	cmp	r6, #0
   120dc:	ble	1293c <__assert_fail@plt+0x1414>
   120e0:	ldr	r3, [pc, #1148]	; 12564 <__assert_fail@plt+0x103c>
   120e4:	ldr	r2, [r5]
   120e8:	add	r3, pc, r3
   120ec:	add	r4, r4, r2, lsl #2
   120f0:	str	r4, [r3, #24]
   120f4:	bl	14a4c <__assert_fail@plt+0x3524>
   120f8:	ldr	r4, [pc, #1128]	; 12568 <__assert_fail@plt+0x1040>
   120fc:	add	r4, pc, r4
   12100:	ldr	r3, [r4, #16]
   12104:	cmp	r3, #0
   12108:	str	r0, [sp, #16]
   1210c:	beq	12724 <__assert_fail@plt+0x11fc>
   12110:	ldrd	r0, [r4, #128]	; 0x80
   12114:	bl	14b8c <__assert_fail@plt+0x3664>
   12118:	ldr	r9, [sp, #16]
   1211c:	ldr	r3, [r4, #16]
   12120:	cmp	r3, #0
   12124:	and	r0, r0, r9
   12128:	uxtb	r0, r0
   1212c:	str	r0, [sp, #16]
   12130:	beq	12724 <__assert_fail@plt+0x11fc>
   12134:	ldrb	r3, [r4, #149]	; 0x95
   12138:	cmp	r3, #0
   1213c:	moveq	r2, #0
   12140:	moveq	r3, #0
   12144:	beq	12158 <__assert_fail@plt+0xc30>
   12148:	ldrd	r2, [r4, #128]	; 0x80
   1214c:	ldrd	r0, [sp, #32]
   12150:	subs	r2, r0, r2
   12154:	sbc	r3, r1, r3
   12158:	ldr	r4, [pc, #1036]	; 1256c <__assert_fail@plt+0x1044>
   1215c:	add	r4, pc, r4
   12160:	strd	r2, [r4, #120]	; 0x78
   12164:	bl	12f14 <__assert_fail@plt+0x19ec>
   12168:	cmp	sl, #0
   1216c:	mov	r5, r0
   12170:	beq	128b8 <__assert_fail@plt+0x1390>
   12174:	ldr	r9, [sp, #40]	; 0x28
   12178:	cmp	r9, #0
   1217c:	beq	12198 <__assert_fail@plt+0xc70>
   12180:	mov	r0, r9
   12184:	mov	r1, r5
   12188:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1218c:	cmp	r1, #0
   12190:	streq	r9, [r4, #108]	; 0x6c
   12194:	beq	121d0 <__assert_fail@plt+0xca8>
   12198:	ldr	r1, [pc, #976]	; 12570 <__assert_fail@plt+0x1048>
   1219c:	mov	r2, #5
   121a0:	mov	r0, #0
   121a4:	add	r1, pc, r1
   121a8:	bl	112a0 <dcgettext@plt>
   121ac:	ldr	r3, [sp, #40]	; 0x28
   121b0:	str	r5, [sp]
   121b4:	mov	r2, r0
   121b8:	mov	r0, #0
   121bc:	mov	r1, r0
   121c0:	bl	11330 <error@plt>
   121c4:	ldr	r3, [pc, #936]	; 12574 <__assert_fail@plt+0x104c>
   121c8:	add	r3, pc, r3
   121cc:	str	r5, [r3, #108]	; 0x6c
   121d0:	ldr	r3, [pc, #928]	; 12578 <__assert_fail@plt+0x1050>
   121d4:	mov	r5, #0
   121d8:	ldr	r4, [pc, #924]	; 1257c <__assert_fail@plt+0x1054>
   121dc:	mov	sl, r5
   121e0:	add	r3, pc, r3
   121e4:	str	r8, [sp, #24]
   121e8:	add	r4, pc, r4
   121ec:	ldr	ip, [r3, #4]
   121f0:	ldr	r6, [r3]
   121f4:	ldr	r7, [r3, #108]	; 0x6c
   121f8:	str	ip, [sp, #12]
   121fc:	mov	r9, ip
   12200:	b	1222c <__assert_fail@plt+0xd04>
   12204:	ldr	r2, [r9, #-28]	; 0xffffffe4
   12208:	mov	r0, r7
   1220c:	ldr	r3, [r9, #-8]
   12210:	add	sl, sl, #1
   12214:	ldr	r1, [r4, r2, lsl #2]
   12218:	add	r8, r3, #1
   1221c:	bl	1aa88 <close_stdout@@Base+0x5408>
   12220:	mul	r0, r0, r8
   12224:	cmp	r5, r0
   12228:	movcc	r5, r0
   1222c:	cmp	sl, r6
   12230:	add	r9, r9, #32
   12234:	bne	12204 <__assert_fail@plt+0xcdc>
   12238:	ldr	sl, [pc, #832]	; 12580 <__assert_fail@plt+0x1058>
   1223c:	mov	r9, #0
   12240:	ldr	r8, [sp, #24]
   12244:	ldr	r4, [sp, #12]
   12248:	add	sl, pc, sl
   1224c:	b	12270 <__assert_fail@plt+0xd48>
   12250:	ldr	r3, [r4, #-28]	; 0xffffffe4
   12254:	mov	r0, r7
   12258:	add	r9, r9, #1
   1225c:	ldr	r1, [sl, r3, lsl #2]
   12260:	bl	1aa88 <close_stdout@@Base+0x5408>
   12264:	ldr	r3, [r4, #-8]
   12268:	mls	r0, r3, r0, r5
   1226c:	str	r0, [r4, #-4]
   12270:	cmp	r9, r6
   12274:	add	r4, r4, #32
   12278:	bne	12250 <__assert_fail@plt+0xd28>
   1227c:	ldr	r7, [pc, #768]	; 12584 <__assert_fail@plt+0x105c>
   12280:	add	r7, pc, r7
   12284:	ldrb	r4, [r7, #106]	; 0x6a
   12288:	cmp	r4, #0
   1228c:	beq	1240c <__assert_fail@plt+0xee4>
   12290:	ldr	ip, [pc, #752]	; 12588 <__assert_fail@plt+0x1060>
   12294:	mov	r9, #1
   12298:	ldr	r0, [r7, #144]	; 0x90
   1229c:	add	ip, pc, ip
   122a0:	str	ip, [sp, #40]	; 0x28
   122a4:	ldr	ip, [pc, #736]	; 1258c <__assert_fail@plt+0x1064>
   122a8:	cmp	r0, #100	; 0x64
   122ac:	movcc	r0, #100	; 0x64
   122b0:	str	r7, [sp, #24]
   122b4:	add	ip, pc, ip
   122b8:	str	r0, [sp, #56]	; 0x38
   122bc:	str	ip, [sp, #32]
   122c0:	bl	17aac <close_stdout@@Base+0x242c>
   122c4:	ldr	sl, [pc, #708]	; 12590 <__assert_fail@plt+0x1068>
   122c8:	ldrd	r4, [r7, #128]	; 0x80
   122cc:	add	sl, pc, sl
   122d0:	str	r8, [sp, #20]
   122d4:	str	fp, [sp, #28]
   122d8:	mov	r6, r0
   122dc:	ldr	r8, [sp, #24]
   122e0:	ldrb	r3, [r8, #105]	; 0x69
   122e4:	cmp	r3, #0
   122e8:	beq	12318 <__assert_fail@plt+0xdf0>
   122ec:	ldr	r0, [r8, #144]	; 0x90
   122f0:	mov	r1, #0
   122f4:	ldrd	r2, [r8, #152]	; 0x98
   122f8:	cmp	r1, r3
   122fc:	cmpeq	r0, r2
   12300:	bhi	12d38 <__assert_fail@plt+0x1810>
   12304:	subs	r2, r2, r0
   12308:	sbc	r3, r3, r1
   1230c:	cmp	r3, r5
   12310:	cmpeq	r2, r4
   12314:	bls	12d38 <__assert_fail@plt+0x1810>
   12318:	mov	fp, #0
   1231c:	add	r7, sp, #64	; 0x40
   12320:	b	12364 <__assert_fail@plt+0xe3c>
   12324:	adds	r4, r4, #1
   12328:	mov	r0, r7
   1232c:	adc	r5, r5, #0
   12330:	bl	14dc0 <__assert_fail@plt+0x3898>
   12334:	ldr	r8, [sp, #64]	; 0x40
   12338:	cmp	r8, #0
   1233c:	and	r9, r0, r9
   12340:	blt	12924 <__assert_fail@plt+0x13fc>
   12344:	bl	113a8 <__ctype_b_loc@plt>
   12348:	lsl	r3, r8, #1
   1234c:	ldr	r2, [r0]
   12350:	ldrh	r3, [r2, r3]
   12354:	tst	r3, #16384	; 0x4000
   12358:	beq	122dc <__assert_fail@plt+0xdb4>
   1235c:	strb	r8, [r6, fp]
   12360:	add	fp, fp, #1
   12364:	ldr	r3, [sl, #144]	; 0x90
   12368:	cmp	fp, r3
   1236c:	bcc	12324 <__assert_fail@plt+0xdfc>
   12370:	rsb	fp, r4, fp
   12374:	str	sl, [sp, #44]	; 0x2c
   12378:	str	fp, [sp, #12]
   1237c:	add	r8, sp, #64	; 0x40
   12380:	ldr	sl, [sp, #40]	; 0x28
   12384:	b	123c8 <__assert_fail@plt+0xea0>
   12388:	adds	r4, r4, #1
   1238c:	mov	r0, r8
   12390:	adc	r5, r5, #0
   12394:	bl	14dc0 <__assert_fail@plt+0x3898>
   12398:	ldr	fp, [sp, #64]	; 0x40
   1239c:	cmp	fp, #0
   123a0:	and	r9, r0, r9
   123a4:	blt	12924 <__assert_fail@plt+0x13fc>
   123a8:	beq	12ab0 <__assert_fail@plt+0x1588>
   123ac:	bl	113a8 <__ctype_b_loc@plt>
   123b0:	lsl	r2, fp, #1
   123b4:	ldr	r1, [r0]
   123b8:	ldrh	r2, [r1, r2]
   123bc:	tst	r2, #16384	; 0x4000
   123c0:	beq	12ca4 <__assert_fail@plt+0x177c>
   123c4:	strb	fp, [r6, r7]
   123c8:	ldrb	r3, [sl, #105]	; 0x69
   123cc:	ldr	ip, [sp, #12]
   123d0:	cmp	r3, #0
   123d4:	add	r7, ip, r4
   123d8:	beq	123ec <__assert_fail@plt+0xec4>
   123dc:	ldrd	r2, [sl, #152]	; 0x98
   123e0:	cmp	r5, r3
   123e4:	cmpeq	r4, r2
   123e8:	bcs	12ab0 <__assert_fail@plt+0x1588>
   123ec:	ldr	r3, [sp, #56]	; 0x38
   123f0:	cmp	r7, r3
   123f4:	bne	12388 <__assert_fail@plt+0xe60>
   123f8:	mov	r0, r6
   123fc:	ldr	r1, [sp, #28]
   12400:	bl	17bfc <close_stdout@@Base+0x257c>
   12404:	mov	r6, r0
   12408:	b	12388 <__assert_fail@plt+0xe60>
   1240c:	ldr	r5, [r7, #108]	; 0x6c
   12410:	mvn	r0, #0
   12414:	mov	r1, r5
   12418:	bl	1aa88 <close_stdout@@Base+0x5408>
   1241c:	cmp	r0, #1
   12420:	bls	12db4 <__assert_fail@plt+0x188c>
   12424:	lsl	r0, r5, #1
   12428:	bl	17aac <close_stdout@@Base+0x242c>
   1242c:	ldrb	r3, [r7, #105]	; 0x69
   12430:	ldr	r2, [r7, #108]	; 0x6c
   12434:	cmp	r3, #0
   12438:	ldrd	sl, [r7, #128]	; 0x80
   1243c:	str	r0, [sp, #76]	; 0x4c
   12440:	add	r0, r0, r2
   12444:	str	r0, [sp, #80]	; 0x50
   12448:	beq	129ac <__assert_fail@plt+0x1484>
   1244c:	ldr	r9, [pc, #320]	; 12594 <__assert_fail@plt+0x106c>
   12450:	add	ip, sp, #64	; 0x40
   12454:	mov	r6, #1
   12458:	str	ip, [sp, #12]
   1245c:	add	r9, pc, r9
   12460:	str	r8, [sp, #24]
   12464:	b	126ac <__assert_fail@plt+0x1184>
   12468:	andeq	ip, r1, r8, lsr #21
   1246c:	andeq	r0, r0, r8, lsr #2
   12470:	andeq	fp, r0, r0, lsr r5
   12474:	andeq	sl, r0, r8, asr #19
   12478:	andeq	fp, r0, ip, asr #11
   1247c:	andeq	r0, r0, r8, lsr r1
   12480:	andeq	ip, r1, ip, lsl #24
   12484:	andeq	ip, r1, r4, ror #23
   12488:	ldrdeq	sl, [r0], -r8
   1248c:	andeq	ip, r1, ip, lsl #23
   12490:	andeq	ip, r1, r4, lsl #23
   12494:	andeq	ip, r1, r0, lsl #23
   12498:	andeq	r1, r0, r0, ror #18
   1249c:	andeq	sl, r0, r0, asr r2
   124a0:	andeq	ip, r1, r8, ror r7
   124a4:	andeq	ip, r1, r8, asr #13
   124a8:	andeq	r0, r0, r0, ror #2
   124ac:	andeq	sl, r0, ip, lsl r4
   124b0:	strdeq	ip, [r1], -r0
   124b4:	andeq	fp, r0, ip, asr #32
   124b8:	andeq	r9, r0, r4, lsr #26
   124bc:	andeq	sl, r0, r8, ror #31
   124c0:	andeq	sl, r0, r8, ror #31
   124c4:			; <UNDEFINED> instruction: 0x0000afb8
   124c8:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   124cc:	andeq	fp, r0, r8, ror #11
   124d0:	andeq	sl, r0, ip, ror #30
   124d4:	andeq	sl, r0, r4, asr pc
   124d8:	andeq	ip, r1, r0, ror #9
   124dc:	andeq	ip, r1, ip, asr #9
   124e0:	andeq	sl, r0, r8, ror #29
   124e4:	andeq	r9, r0, r0, asr #23
   124e8:	andeq	ip, r1, r4, asr #1
   124ec:	andeq	sl, r0, r0, ror lr
   124f0:	andeq	sl, r0, r4, asr lr
   124f4:	andeq	sl, r0, r8, lsr lr
   124f8:	andeq	sl, r0, ip, lsl lr
   124fc:	andeq	sl, r0, r8, lsr #28
   12500:	andeq	ip, r1, r8, lsr #7
   12504:	andeq	r1, r0, r8, lsl #3
   12508:	andeq	r0, r0, r0, lsr r1
   1250c:	andeq	sl, r0, r8, lsr #27
   12510:	muleq	r0, r4, sp
   12514:	andeq	sl, r0, r0, lsr #24
   12518:	andeq	ip, r1, ip, lsr #6
   1251c:	andeq	sl, r0, r4, asr sp
   12520:	andeq	r0, r0, ip, lsr #2
   12524:	ldrdeq	ip, [r1], -r0
   12528:	andeq	ip, r1, r4, lsr #5
   1252c:	andeq	sl, r0, r0, lsl #26
   12530:	ldrdeq	sl, [r0], -r8
   12534:	strdeq	sl, [r0], -r8
   12538:	andeq	ip, r1, r4, lsl r2
   1253c:	andeq	ip, r1, r0, ror #3
   12540:	andeq	r0, r0, r4, asr #31
   12544:			; <UNDEFINED> instruction: 0x0001c1b8
   12548:	andeq	ip, r1, r4, ror r1
   1254c:	andeq	ip, r1, r4, asr r1
   12550:	andeq	ip, r1, r8, lsr r1
   12554:	andeq	r0, r0, r0, ror lr
   12558:	andeq	r3, r0, r8, lsr r1
   1255c:	andeq	ip, r1, r4, lsl #2
   12560:	strdeq	ip, [r1], -r0
   12564:	ldrdeq	ip, [r1], -r0
   12568:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>
   1256c:	andeq	ip, r1, ip, asr r0
   12570:	andeq	sl, r0, r4, lsl #22
   12574:	strdeq	fp, [r1], -r0
   12578:	ldrdeq	fp, [r1], -r8
   1257c:	andeq	r9, r0, r8, lsl #14
   12580:	andeq	r9, r0, r8, lsr #13
   12584:	andeq	fp, r1, r8, lsr pc
   12588:	andeq	fp, r1, ip, lsl pc
   1258c:	andeq	r9, r0, ip, ror #20
   12590:	andeq	fp, r1, ip, ror #29
   12594:	andeq	fp, r1, ip, asr sp
   12598:	andeq	fp, r1, r0, ror #21
   1259c:	muleq	r1, r0, sl
   125a0:	andeq	fp, r1, r0, ror #20
   125a4:	andeq	r0, r0, ip, lsr #15
   125a8:	andeq	sl, r0, ip, ror #7
   125ac:	andeq	fp, r1, r4, lsl #20
   125b0:	andeq	r0, r0, r8, ror #15
   125b4:	andeq	sl, r0, r8, ror #7
   125b8:	andeq	sl, r0, r0, asr #7
   125bc:	andeq	sl, r0, ip, lsr r4
   125c0:	andeq	fp, r1, r8, asr r9
   125c4:	andeq	fp, r1, ip, lsr #18
   125c8:	strdeq	sl, [r0], -r8
   125cc:	andeq	r0, r0, r4, asr #2
   125d0:	andeq	r9, r0, r4, lsr #8
   125d4:	andeq	fp, r1, r4, ror r8
   125d8:	ldrdeq	fp, [r1], -ip
   125dc:	andeq	fp, r1, ip, asr r8
   125e0:	andeq	fp, r1, r8, lsl r8
   125e4:	strdeq	fp, [r1], -r8
   125e8:	andeq	r0, r0, r8, asr #2
   125ec:	andeq	r9, r0, r4, lsr #4
   125f0:	andeq	r9, r0, ip, lsl r2
   125f4:	andeq	r9, r0, r8, lsl #4
   125f8:	strdeq	r9, [r0], -r8
   125fc:	andeq	r9, r0, r8, ror #3
   12600:	andeq	r9, r0, r8, asr r1
   12604:	andeq	r2, r0, ip, asr #9
   12608:	andeq	fp, r1, ip, lsl #3
   1260c:	andeq	fp, r1, r4, ror #2
   12610:	andeq	fp, r1, r8, asr #2
   12614:	andeq	r8, r0, r0, asr fp
   12618:	andeq	r9, r0, r4, lsr pc
   1261c:	andeq	r8, r0, ip, ror #27
   12620:	andeq	r8, r0, r8, lsr #22
   12624:	andeq	r9, r0, ip, lsl #30
   12628:	andeq	r8, r0, r4, asr #27
   1262c:	add	lr, sp, #88	; 0x58
   12630:	lsl	r5, r4, #2
   12634:	ldr	r0, [r7, #108]	; 0x6c
   12638:	add	ip, lr, r5
   1263c:	subs	r2, r2, sl
   12640:	sbc	r3, r3, fp
   12644:	mov	r1, #0
   12648:	ldr	r8, [ip, #-12]
   1264c:	cmp	r3, r1
   12650:	cmpeq	r2, r0
   12654:	movhi	r2, r0
   12658:	mov	r0, r2
   1265c:	mov	r1, r8
   12660:	add	r2, sp, #64	; 0x40
   12664:	bl	15224 <__assert_fail@plt+0x3cfc>
   12668:	ldr	r2, [sp, #64]	; 0x40
   1266c:	ldr	r3, [r9, #108]	; 0x6c
   12670:	cmp	r2, r3
   12674:	and	r6, r0, r6
   12678:	bcc	12a28 <__assert_fail@plt+0x1500>
   1267c:	bne	12d90 <__assert_fail@plt+0x1868>
   12680:	eor	r4, r4, #1
   12684:	str	r8, [sp]
   12688:	add	r8, sp, #88	; 0x58
   1268c:	mov	r0, sl
   12690:	add	r3, r8, r4, lsl #2
   12694:	mov	r1, fp
   12698:	ldr	r3, [r3, #-12]
   1269c:	bl	14e48 <__assert_fail@plt+0x3920>
   126a0:	ldr	r3, [sp, #64]	; 0x40
   126a4:	adds	sl, sl, r3
   126a8:	adc	fp, fp, #0
   126ac:	ldrd	r2, [r7, #152]	; 0x98
   126b0:	cmp	r3, fp
   126b4:	cmpeq	r2, sl
   126b8:	bhi	1262c <__assert_fail@plt+0x1104>
   126bc:	ldr	r8, [sp, #24]
   126c0:	mov	r3, #0
   126c4:	str	r3, [sp, #64]	; 0x40
   126c8:	ldr	r4, [pc, #-312]	; 12598 <__assert_fail@plt+0x1070>
   126cc:	mov	r0, sl
   126d0:	mov	r1, fp
   126d4:	mov	r2, #10
   126d8:	add	r4, pc, r4
   126dc:	ldr	r3, [r4, #116]	; 0x74
   126e0:	blx	r3
   126e4:	ldrb	r3, [r4, #105]	; 0x69
   126e8:	cmp	r3, #0
   126ec:	beq	1270c <__assert_fail@plt+0x11e4>
   126f0:	ldrd	r2, [r4, #152]	; 0x98
   126f4:	cmp	fp, r3
   126f8:	cmpeq	sl, r2
   126fc:	bcc	1270c <__assert_fail@plt+0x11e4>
   12700:	mov	r0, #0
   12704:	bl	13134 <__assert_fail@plt+0x1c0c>
   12708:	and	r6, r0, r6
   1270c:	ldr	r0, [sp, #76]	; 0x4c
   12710:	bl	11234 <free@plt>
   12714:	ldr	r9, [sp, #16]
   12718:	and	r3, r6, r9
   1271c:	and	r3, r3, #1
   12720:	str	r3, [sp, #16]
   12724:	ldr	r3, [pc, #-400]	; 1259c <__assert_fail@plt+0x1074>
   12728:	add	r3, pc, r3
   1272c:	ldrb	r3, [r3, #104]	; 0x68
   12730:	cmp	r3, #0
   12734:	bne	128dc <__assert_fail@plt+0x13b4>
   12738:	ldr	ip, [sp, #16]
   1273c:	rsbs	r0, ip, #1
   12740:	movcc	r0, #0
   12744:	bl	113b4 <exit@plt>
   12748:	ldr	r3, [pc, #-432]	; 125a0 <__assert_fail@plt+0x1078>
   1274c:	mov	r1, #0
   12750:	ldr	r2, [pc, #-436]	; 125a4 <__assert_fail@plt+0x107c>
   12754:	mov	r7, #1
   12758:	add	r3, pc, r3
   1275c:	add	r2, pc, r2
   12760:	str	r1, [r3, #8]
   12764:	str	r2, [r3, #116]	; 0x74
   12768:	b	11690 <__assert_fail@plt+0x168>
   1276c:	ldr	r1, [pc, #-460]	; 125a8 <__assert_fail@plt+0x1080>
   12770:	mov	r2, #5
   12774:	mov	r0, #0
   12778:	str	ip, [sp, #8]
   1277c:	add	r1, pc, r1
   12780:	mov	r7, #1
   12784:	bl	112a0 <dcgettext@plt>
   12788:	ldr	ip, [sp, #8]
   1278c:	mov	r1, #0
   12790:	ldr	r3, [ip]
   12794:	ldrb	r3, [r3]
   12798:	mov	r2, r0
   1279c:	mov	r0, r7
   127a0:	bl	11330 <error@plt>
   127a4:	b	11690 <__assert_fail@plt+0x168>
   127a8:	ldr	r3, [pc, #-516]	; 125ac <__assert_fail@plt+0x1084>
   127ac:	mov	r0, #8
   127b0:	ldr	r1, [pc, #-520]	; 125b0 <__assert_fail@plt+0x1088>
   127b4:	add	r3, pc, r3
   127b8:	add	r1, pc, r1
   127bc:	b	11fe0 <__assert_fail@plt+0xab8>
   127c0:	ldr	r1, [pc, #-532]	; 125b4 <__assert_fail@plt+0x108c>
   127c4:	mov	r2, #5
   127c8:	add	r1, pc, r1
   127cc:	bl	112a0 <dcgettext@plt>
   127d0:	mov	r1, r7
   127d4:	ldr	r3, [sl]
   127d8:	mov	r2, r0
   127dc:	mov	r0, #1
   127e0:	bl	11330 <error@plt>
   127e4:	b	11b50 <__assert_fail@plt+0x628>
   127e8:	ldr	r1, [pc, #-568]	; 125b8 <__assert_fail@plt+0x1090>
   127ec:	mov	r2, #5
   127f0:	add	r1, pc, r1
   127f4:	bl	112a0 <dcgettext@plt>
   127f8:	ldr	r9, [sp, #20]
   127fc:	mov	r1, r7
   12800:	ldr	r3, [r9]
   12804:	mov	r2, r0
   12808:	mov	r0, #1
   1280c:	bl	11330 <error@plt>
   12810:	b	11cd0 <__assert_fail@plt+0x7a8>
   12814:	ldrd	r0, [ip, #128]	; 0x80
   12818:	ldrd	r2, [ip, #136]	; 0x88
   1281c:	adds	r2, r2, r0
   12820:	adc	r3, r3, r1
   12824:	strd	r2, [ip, #152]	; 0x98
   12828:	cmp	r1, r3
   1282c:	cmpeq	r0, r2
   12830:	bls	120c4 <__assert_fail@plt+0xb9c>
   12834:	ldr	r1, [pc, #-640]	; 125bc <__assert_fail@plt+0x1094>
   12838:	mov	r2, #5
   1283c:	mov	r0, #0
   12840:	add	r1, pc, r1
   12844:	bl	112a0 <dcgettext@plt>
   12848:	mov	r1, #0
   1284c:	mov	r2, r0
   12850:	mov	r0, #1
   12854:	bl	11330 <error@plt>
   12858:	b	120c4 <__assert_fail@plt+0xb9c>
   1285c:	ldr	r7, [pc, #-676]	; 125c0 <__assert_fail@plt+0x1098>
   12860:	add	r7, pc, r7
   12864:	ldrb	r2, [r7, #148]	; 0x94
   12868:	cmp	r2, #0
   1286c:	beq	1207c <__assert_fail@plt+0xb54>
   12870:	add	r3, r3, #1
   12874:	mov	r1, fp
   12878:	ldr	r0, [r4, r3, lsl #2]
   1287c:	bl	1329c <__assert_fail@plt+0x1d74>
   12880:	cmp	r0, #0
   12884:	bne	12ce8 <__assert_fail@plt+0x17c0>
   12888:	ldr	r3, [pc, #-716]	; 125c4 <__assert_fail@plt+0x109c>
   1288c:	add	r3, pc, r3
   12890:	ldrb	r3, [r3, #148]	; 0x94
   12894:	cmp	r3, #0
   12898:	bne	11f2c <__assert_fail@plt+0xa04>
   1289c:	b	1207c <__assert_fail@plt+0xb54>
   128a0:	mov	r0, #1
   128a4:	bl	113b4 <exit@plt>
   128a8:	ldr	r0, [pc, #-744]	; 125c8 <__assert_fail@plt+0x10a0>
   128ac:	add	r0, pc, r0
   128b0:	bl	13df8 <__assert_fail@plt+0x28d0>
   128b4:	b	120d8 <__assert_fail@plt+0xbb0>
   128b8:	cmp	r0, #15
   128bc:	strgt	r0, [r4, #108]	; 0x6c
   128c0:	bgt	121d0 <__assert_fail@plt+0xca8>
   128c4:	mov	r0, #16
   128c8:	mov	r1, r5
   128cc:	bl	1ac94 <close_stdout@@Base+0x5614>
   128d0:	mul	r0, r0, r5
   128d4:	str	r0, [r4, #108]	; 0x6c
   128d8:	b	121d0 <__assert_fail@plt+0xca8>
   128dc:	ldr	r3, [pc, #-792]	; 125cc <__assert_fail@plt+0x10a4>
   128e0:	ldr	r3, [r8, r3]
   128e4:	ldr	r0, [r3]
   128e8:	bl	1872c <close_stdout@@Base+0x30ac>
   128ec:	cmn	r0, #1
   128f0:	bne	12738 <__assert_fail@plt+0x1210>
   128f4:	bl	113e4 <__errno_location@plt>
   128f8:	ldr	r1, [pc, #-816]	; 125d0 <__assert_fail@plt+0x10a8>
   128fc:	mov	r2, #5
   12900:	add	r1, pc, r1
   12904:	ldr	r4, [r0]
   12908:	mov	r0, #0
   1290c:	bl	112a0 <dcgettext@plt>
   12910:	mov	r1, r4
   12914:	mov	r2, r0
   12918:	mov	r0, #1
   1291c:	bl	11330 <error@plt>
   12920:	b	12738 <__assert_fail@plt+0x1210>
   12924:	mov	r0, r6
   12928:	ldr	r8, [sp, #20]
   1292c:	bl	11234 <free@plt>
   12930:	mov	r0, r9
   12934:	mov	r6, r0
   12938:	b	12714 <__assert_fail@plt+0x11ec>
   1293c:	ldr	r3, [pc, #-880]	; 125d4 <__assert_fail@plt+0x10ac>
   12940:	ldr	r2, [pc, #-880]	; 125d8 <__assert_fail@plt+0x10b0>
   12944:	add	r3, pc, r3
   12948:	add	r2, pc, r2
   1294c:	add	r2, r2, #176	; 0xb0
   12950:	str	r2, [r3, #24]
   12954:	b	120f4 <__assert_fail@plt+0xbcc>
   12958:	ldr	r2, [pc, #-900]	; 125dc <__assert_fail@plt+0x10b4>
   1295c:	add	r2, pc, r2
   12960:	ldrb	r2, [r2, #148]	; 0x94
   12964:	cmp	r2, #0
   12968:	bne	1297c <__assert_fail@plt+0x1454>
   1296c:	ldr	r2, [r4, r3, lsl #2]
   12970:	ldrb	r2, [r2]
   12974:	cmp	r2, #43	; 0x2b
   12978:	bne	1207c <__assert_fail@plt+0xb54>
   1297c:	ldr	r0, [r4, r3, lsl #2]
   12980:	mov	r1, fp
   12984:	bl	1329c <__assert_fail@plt+0x1d74>
   12988:	cmp	r0, #0
   1298c:	beq	1207c <__assert_fail@plt+0xb54>
   12990:	ldr	r1, [pc, #-952]	; 125e0 <__assert_fail@plt+0x10b8>
   12994:	add	r4, r4, #4
   12998:	ldrd	r2, [sp, #56]	; 0x38
   1299c:	mov	r6, #0
   129a0:	add	r1, pc, r1
   129a4:	strd	r2, [r1, #128]	; 0x80
   129a8:	b	1207c <__assert_fail@plt+0xb54>
   129ac:	mov	r4, r3
   129b0:	add	r9, sp, #64	; 0x40
   129b4:	mov	r5, r3
   129b8:	mov	r6, #1
   129bc:	str	r8, [sp, #24]
   129c0:	b	129f8 <__assert_fail@plt+0x14d0>
   129c4:	bne	12db8 <__assert_fail@plt+0x1890>
   129c8:	eor	r4, r4, #1
   129cc:	add	lr, sp, #88	; 0x58
   129d0:	str	r8, [sp]
   129d4:	mov	r0, sl
   129d8:	lsl	r5, r4, #2
   129dc:	mov	r1, fp
   129e0:	add	r3, lr, r5
   129e4:	ldr	r3, [r3, #-12]
   129e8:	bl	14e48 <__assert_fail@plt+0x3920>
   129ec:	ldr	r3, [sp, #64]	; 0x40
   129f0:	adds	sl, sl, r3
   129f4:	adc	fp, fp, #0
   129f8:	add	ip, sp, #88	; 0x58
   129fc:	mov	r2, r9
   12a00:	add	r3, ip, r5
   12a04:	ldr	r0, [r7, #108]	; 0x6c
   12a08:	ldr	r8, [r3, #-12]
   12a0c:	mov	r1, r8
   12a10:	bl	15224 <__assert_fail@plt+0x3cfc>
   12a14:	ldr	r2, [sp, #64]	; 0x40
   12a18:	ldr	r3, [r7, #108]	; 0x6c
   12a1c:	cmp	r2, r3
   12a20:	and	r6, r6, r0
   12a24:	bcs	129c4 <__assert_fail@plt+0x149c>
   12a28:	cmp	r2, #0
   12a2c:	ldr	r8, [sp, #24]
   12a30:	beq	126c8 <__assert_fail@plt+0x11a0>
   12a34:	str	r2, [sp, #8]
   12a38:	bl	12f14 <__assert_fail@plt+0x19ec>
   12a3c:	ldr	r3, [sp, #8]
   12a40:	eor	r4, r4, #1
   12a44:	mov	r7, r0
   12a48:	add	r0, sp, #88	; 0x58
   12a4c:	add	r5, r0, r5
   12a50:	sub	r0, r3, #1
   12a54:	mov	r1, r7
   12a58:	add	r0, r0, r7
   12a5c:	bl	1aa88 <close_stdout@@Base+0x5408>
   12a60:	ldr	r5, [r5, #-12]
   12a64:	ldr	r3, [sp, #8]
   12a68:	mov	r1, #0
   12a6c:	mul	r2, r7, r0
   12a70:	add	r0, r5, r3
   12a74:	rsb	r2, r3, r2
   12a78:	bl	11414 <memset@plt>
   12a7c:	ldr	r3, [sp, #8]
   12a80:	add	r1, sp, #88	; 0x58
   12a84:	str	r5, [sp]
   12a88:	mov	r0, sl
   12a8c:	mov	r2, r3
   12a90:	add	r3, r1, r4, lsl #2
   12a94:	mov	r1, fp
   12a98:	ldr	r3, [r3, #-12]
   12a9c:	bl	14e48 <__assert_fail@plt+0x3920>
   12aa0:	ldr	r3, [sp, #64]	; 0x40
   12aa4:	adds	sl, sl, r3
   12aa8:	adc	fp, fp, #0
   12aac:	b	126c8 <__assert_fail@plt+0x11a0>
   12ab0:	ldr	r3, [pc, #-1236]	; 125e4 <__assert_fail@plt+0x10bc>
   12ab4:	subs	r0, r4, #1
   12ab8:	sbc	r1, r5, #0
   12abc:	mov	ip, #0
   12ac0:	add	r3, pc, r3
   12ac4:	strb	ip, [r6, r7]
   12ac8:	subs	r0, r0, r7
   12acc:	sbc	r1, r1, #0
   12ad0:	mov	r2, #32
   12ad4:	ldr	r3, [r3, #116]	; 0x74
   12ad8:	sub	r7, r6, #1
   12adc:	ldr	sl, [sp, #44]	; 0x2c
   12ae0:	blx	r3
   12ae4:	ldr	ip, [sp, #20]
   12ae8:	ldr	r3, [pc, #-1288]	; 125e8 <__assert_fail@plt+0x10c0>
   12aec:	ldr	r8, [pc, #-1288]	; 125ec <__assert_fail@plt+0x10c4>
   12af0:	ldr	fp, [pc, #-1288]	; 125f0 <__assert_fail@plt+0x10c8>
   12af4:	add	r8, pc, r8
   12af8:	str	r8, [sp, #12]
   12afc:	ldr	r8, [ip, r3]
   12b00:	add	fp, pc, fp
   12b04:	ldr	ip, [pc, #-1304]	; 125f4 <__assert_fail@plt+0x10cc>
   12b08:	add	ip, pc, ip
   12b0c:	str	ip, [sp, #44]	; 0x2c
   12b10:	ldr	ip, [pc, #-1312]	; 125f8 <__assert_fail@plt+0x10d0>
   12b14:	add	ip, pc, ip
   12b18:	str	ip, [sp, #48]	; 0x30
   12b1c:	ldr	ip, [pc, #-1320]	; 125fc <__assert_fail@plt+0x10d4>
   12b20:	add	ip, pc, ip
   12b24:	str	ip, [sp, #52]	; 0x34
   12b28:	ldrb	r1, [r7, #1]!
   12b2c:	cmp	r1, #0
   12b30:	str	r1, [sp, #64]	; 0x40
   12b34:	beq	12c38 <__assert_fail@plt+0x1710>
   12b38:	sub	r3, r1, #7
   12b3c:	cmp	r3, #6
   12b40:	addls	pc, pc, r3, lsl #2
   12b44:	b	12c10 <__assert_fail@plt+0x16e8>
   12b48:	b	12bf8 <__assert_fail@plt+0x16d0>
   12b4c:	b	12be0 <__assert_fail@plt+0x16b8>
   12b50:	b	12bc8 <__assert_fail@plt+0x16a0>
   12b54:	b	12bac <__assert_fail@plt+0x1684>
   12b58:	b	12b94 <__assert_fail@plt+0x166c>
   12b5c:	b	12b7c <__assert_fail@plt+0x1654>
   12b60:	b	12b64 <__assert_fail@plt+0x163c>
   12b64:	ldr	r0, [sp, #12]
   12b68:	mov	r1, #1
   12b6c:	mov	r2, #2
   12b70:	ldr	r3, [r8]
   12b74:	bl	11288 <fwrite_unlocked@plt>
   12b78:	b	12b28 <__assert_fail@plt+0x1600>
   12b7c:	ldr	r0, [sp, #44]	; 0x2c
   12b80:	mov	r1, #1
   12b84:	mov	r2, #2
   12b88:	ldr	r3, [r8]
   12b8c:	bl	11288 <fwrite_unlocked@plt>
   12b90:	b	12b28 <__assert_fail@plt+0x1600>
   12b94:	ldr	r0, [sp, #32]
   12b98:	mov	r1, #1
   12b9c:	mov	r2, #2
   12ba0:	ldr	r3, [r8]
   12ba4:	bl	11288 <fwrite_unlocked@plt>
   12ba8:	b	12b28 <__assert_fail@plt+0x1600>
   12bac:	ldr	r0, [pc, #-1460]	; 12600 <__assert_fail@plt+0x10d8>
   12bb0:	mov	r1, #1
   12bb4:	mov	r2, #2
   12bb8:	ldr	r3, [r8]
   12bbc:	add	r0, pc, r0
   12bc0:	bl	11288 <fwrite_unlocked@plt>
   12bc4:	b	12b28 <__assert_fail@plt+0x1600>
   12bc8:	mov	r0, fp
   12bcc:	mov	r1, #1
   12bd0:	mov	r2, #2
   12bd4:	ldr	r3, [r8]
   12bd8:	bl	11288 <fwrite_unlocked@plt>
   12bdc:	b	12b28 <__assert_fail@plt+0x1600>
   12be0:	ldr	r0, [sp, #48]	; 0x30
   12be4:	mov	r1, #1
   12be8:	mov	r2, #2
   12bec:	ldr	r3, [r8]
   12bf0:	bl	11288 <fwrite_unlocked@plt>
   12bf4:	b	12b28 <__assert_fail@plt+0x1600>
   12bf8:	ldr	r0, [sp, #52]	; 0x34
   12bfc:	mov	r1, #1
   12c00:	mov	r2, #2
   12c04:	ldr	r3, [r8]
   12c08:	bl	11288 <fwrite_unlocked@plt>
   12c0c:	b	12b28 <__assert_fail@plt+0x1600>
   12c10:	ldr	r0, [r8]
   12c14:	ldr	r3, [r0, #20]
   12c18:	ldr	r2, [r0, #24]
   12c1c:	cmp	r3, r2
   12c20:	addcc	r2, r3, #1
   12c24:	strcc	r2, [r0, #20]
   12c28:	strbcc	r1, [r3]
   12c2c:	bcc	12b28 <__assert_fail@plt+0x1600>
   12c30:	bl	1148c <__overflow@plt>
   12c34:	b	12b28 <__assert_fail@plt+0x1600>
   12c38:	ldr	r0, [r8]
   12c3c:	ldr	r2, [r0, #24]
   12c40:	ldr	r3, [r0, #20]
   12c44:	cmp	r3, r2
   12c48:	addcc	r2, r3, #1
   12c4c:	strcc	r2, [r0, #20]
   12c50:	movcc	r2, #10
   12c54:	strbcc	r2, [r3]
   12c58:	bcc	122dc <__assert_fail@plt+0xdb4>
   12c5c:	mov	r1, #10
   12c60:	bl	1148c <__overflow@plt>
   12c64:	b	122dc <__assert_fail@plt+0xdb4>
   12c68:	ldr	r2, [pc, #-1644]	; 12604 <__assert_fail@plt+0x10dc>
   12c6c:	mov	r0, #8
   12c70:	mov	r1, #7
   12c74:	str	r0, [r3, #12]
   12c78:	add	r2, pc, r2
   12c7c:	str	r1, [r3, #8]
   12c80:	str	r2, [r3, #116]	; 0x74
   12c84:	b	120b0 <__assert_fail@plt+0xb88>
   12c88:	ldr	ip, [r7]
   12c8c:	mov	r2, #106	; 0x6a
   12c90:	ldr	r3, [pc, #-1680]	; 12608 <__assert_fail@plt+0x10e0>
   12c94:	ldr	r1, [sp, #56]	; 0x38
   12c98:	add	r3, pc, r3
   12c9c:	str	ip, [sp]
   12ca0:	bl	17ee0 <close_stdout@@Base+0x2860>
   12ca4:	ldr	sl, [sp, #44]	; 0x2c
   12ca8:	b	122dc <__assert_fail@plt+0xdb4>
   12cac:	ldr	r9, [sp, #20]
   12cb0:	mov	r2, #83	; 0x53
   12cb4:	ldr	r3, [pc, #-1712]	; 1260c <__assert_fail@plt+0x10e4>
   12cb8:	ldr	r1, [sp, #56]	; 0x38
   12cbc:	ldr	ip, [r9]
   12cc0:	add	r3, pc, r3
   12cc4:	str	ip, [sp]
   12cc8:	bl	17ee0 <close_stdout@@Base+0x2860>
   12ccc:	ldr	ip, [sl]
   12cd0:	mov	r2, #119	; 0x77
   12cd4:	ldr	r3, [pc, #-1740]	; 12610 <__assert_fail@plt+0x10e8>
   12cd8:	ldr	r1, [sp, #56]	; 0x38
   12cdc:	add	r3, pc, r3
   12ce0:	str	ip, [sp]
   12ce4:	bl	17ee0 <close_stdout@@Base+0x2860>
   12ce8:	ldr	r3, [r5]
   12cec:	add	r1, sp, #64	; 0x40
   12cf0:	add	r3, r3, #2
   12cf4:	ldr	r0, [r4, r3, lsl #2]
   12cf8:	bl	1329c <__assert_fail@plt+0x1d74>
   12cfc:	cmp	r0, #0
   12d00:	beq	12888 <__assert_fail@plt+0x1360>
   12d04:	ldr	r1, [r5]
   12d08:	mov	r0, #1
   12d0c:	ldrd	r2, [sp, #56]	; 0x38
   12d10:	mov	r6, r0
   12d14:	strb	r0, [r7, #149]	; 0x95
   12d18:	strd	r2, [r7, #128]	; 0x80
   12d1c:	add	r3, r1, #2
   12d20:	ldr	r2, [r4, r1, lsl #2]
   12d24:	ldrd	r0, [sp, #64]	; 0x40
   12d28:	str	r2, [r4, r3, lsl #2]
   12d2c:	add	r4, r4, #8
   12d30:	strd	r0, [sp, #32]
   12d34:	b	1207c <__assert_fail@plt+0xb54>
   12d38:	mov	r0, r6
   12d3c:	ldr	r8, [sp, #20]
   12d40:	bl	11234 <free@plt>
   12d44:	mov	r0, #0
   12d48:	bl	13134 <__assert_fail@plt+0x1c0c>
   12d4c:	and	r0, r0, r9
   12d50:	b	12934 <__assert_fail@plt+0x140c>
   12d54:	ldr	r3, [r5]
   12d58:	mov	r1, fp
   12d5c:	ldr	r0, [r4, r3, lsl #2]
   12d60:	bl	1329c <__assert_fail@plt+0x1d74>
   12d64:	cmp	r0, #0
   12d68:	beq	12054 <__assert_fail@plt+0xb2c>
   12d6c:	mov	r1, #1
   12d70:	ldrd	r2, [sp, #64]	; 0x40
   12d74:	strb	r1, [r7, #149]	; 0x95
   12d78:	add	r4, r4, #8
   12d7c:	ldrd	r0, [sp, #56]	; 0x38
   12d80:	mov	r6, #0
   12d84:	strd	r2, [sp, #32]
   12d88:	strd	r0, [r7, #128]	; 0x80
   12d8c:	b	1207c <__assert_fail@plt+0xb54>
   12d90:	ldr	r3, [pc, #-1924]	; 12614 <__assert_fail@plt+0x10ec>
   12d94:	movw	r2, #1352	; 0x548
   12d98:	ldr	r0, [pc, #-1928]	; 12618 <__assert_fail@plt+0x10f0>
   12d9c:	ldr	r1, [pc, #-1928]	; 1261c <__assert_fail@plt+0x10f4>
   12da0:	add	r3, pc, r3
   12da4:	add	r0, pc, r0
   12da8:	add	r3, r3, #548	; 0x224
   12dac:	add	r1, pc, r1
   12db0:	bl	11528 <__assert_fail@plt>
   12db4:	bl	17cc0 <close_stdout@@Base+0x2640>
   12db8:	ldr	r3, [pc, #-1952]	; 12620 <__assert_fail@plt+0x10f8>
   12dbc:	movw	r2, #1366	; 0x556
   12dc0:	ldr	r0, [pc, #-1956]	; 12624 <__assert_fail@plt+0x10fc>
   12dc4:	ldr	r1, [pc, #-1956]	; 12628 <__assert_fail@plt+0x1100>
   12dc8:	add	r3, pc, r3
   12dcc:	add	r0, pc, r0
   12dd0:	add	r3, r3, #548	; 0x224
   12dd4:	add	r1, pc, r1
   12dd8:	bl	11528 <__assert_fail@plt>
   12ddc:	mov	fp, #0
   12de0:	mov	lr, #0
   12de4:	pop	{r1}		; (ldr r1, [sp], #4)
   12de8:	mov	r2, sp
   12dec:	push	{r2}		; (str r2, [sp, #-4]!)
   12df0:	push	{r0}		; (str r0, [sp, #-4]!)
   12df4:	ldr	ip, [pc, #16]	; 12e0c <__assert_fail@plt+0x18e4>
   12df8:	push	{ip}		; (str ip, [sp, #-4]!)
   12dfc:	ldr	r0, [pc, #12]	; 12e10 <__assert_fail@plt+0x18e8>
   12e00:	ldr	r3, [pc, #12]	; 12e14 <__assert_fail@plt+0x18ec>
   12e04:	bl	11378 <__libc_start_main@plt>
   12e08:	bl	11504 <abort@plt>
   12e0c:			; <UNDEFINED> instruction: 0x0001b8b8
   12e10:	andeq	r1, r1, r8, lsr r5
   12e14:	andeq	fp, r1, r4, asr r8
   12e18:	ldr	r3, [pc, #20]	; 12e34 <__assert_fail@plt+0x190c>
   12e1c:	ldr	r2, [pc, #20]	; 12e38 <__assert_fail@plt+0x1910>
   12e20:	add	r3, pc, r3
   12e24:	ldr	r2, [r3, r2]
   12e28:	cmp	r2, #0
   12e2c:	bxeq	lr
   12e30:	b	11390 <__gmon_start__@plt>
   12e34:	ldrdeq	fp, [r1], -r8
   12e38:	andeq	r0, r0, ip, lsr r1
   12e3c:	push	{r3, lr}
   12e40:	movw	r0, #57780	; 0xe1b4
   12e44:	ldr	r3, [pc, #36]	; 12e70 <__assert_fail@plt+0x1948>
   12e48:	movt	r0, #2
   12e4c:	rsb	r3, r0, r3
   12e50:	cmp	r3, #6
   12e54:	popls	{r3, pc}
   12e58:	movw	r3, #0
   12e5c:	movt	r3, #0
   12e60:	cmp	r3, #0
   12e64:	popeq	{r3, pc}
   12e68:	blx	r3
   12e6c:	pop	{r3, pc}
   12e70:			; <UNDEFINED> instruction: 0x0002e1b7
   12e74:	push	{r3, lr}
   12e78:	movw	r0, #57780	; 0xe1b4
   12e7c:	movw	r3, #57780	; 0xe1b4
   12e80:	movt	r0, #2
   12e84:	movt	r3, #2
   12e88:	rsb	r3, r0, r3
   12e8c:	asr	r3, r3, #2
   12e90:	add	r3, r3, r3, lsr #31
   12e94:	asrs	r1, r3, #1
   12e98:	popeq	{r3, pc}
   12e9c:	movw	r2, #0
   12ea0:	movt	r2, #0
   12ea4:	cmp	r2, #0
   12ea8:	popeq	{r3, pc}
   12eac:	blx	r2
   12eb0:	pop	{r3, pc}
   12eb4:	push	{r4, lr}
   12eb8:	movw	r4, #57784	; 0xe1b8
   12ebc:	movt	r4, #2
   12ec0:	ldrb	r3, [r4]
   12ec4:	cmp	r3, #0
   12ec8:	popne	{r4, pc}
   12ecc:	bl	12e3c <__assert_fail@plt+0x1914>
   12ed0:	mov	r3, #1
   12ed4:	strb	r3, [r4]
   12ed8:	pop	{r4, pc}
   12edc:	movw	r0, #56872	; 0xde28
   12ee0:	movt	r0, #2
   12ee4:	push	{r3, lr}
   12ee8:	ldr	r3, [r0]
   12eec:	cmp	r3, #0
   12ef0:	beq	12f08 <__assert_fail@plt+0x19e0>
   12ef4:	movw	r3, #0
   12ef8:	movt	r3, #0
   12efc:	cmp	r3, #0
   12f00:	beq	12f08 <__assert_fail@plt+0x19e0>
   12f04:	blx	r3
   12f08:	pop	{r3, lr}
   12f0c:	b	12e74 <__assert_fail@plt+0x194c>
   12f10:	bx	lr
   12f14:	ldr	r3, [pc, #132]	; 12fa0 <__assert_fail@plt+0x1a78>
   12f18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f1c:	add	r3, pc, r3
   12f20:	ldr	r9, [r3]
   12f24:	cmp	r9, #0
   12f28:	beq	12f98 <__assert_fail@plt+0x1a70>
   12f2c:	ldr	r8, [pc, #112]	; 12fa4 <__assert_fail@plt+0x1a7c>
   12f30:	lsl	r9, r9, #5
   12f34:	ldr	sl, [r3, #4]
   12f38:	mov	r5, #0
   12f3c:	add	r8, pc, r8
   12f40:	mov	r6, #1
   12f44:	add	r3, sl, r5
   12f48:	mov	r0, r6
   12f4c:	ldr	r3, [r3, #4]
   12f50:	ldr	r7, [r8, r3, lsl #2]
   12f54:	mov	r4, r7
   12f58:	b	12f60 <__assert_fail@plt+0x1a38>
   12f5c:	mov	r4, r1
   12f60:	mov	r1, r4
   12f64:	bl	1ac74 <close_stdout@@Base+0x55f4>
   12f68:	mov	r0, r4
   12f6c:	cmp	r1, #0
   12f70:	bne	12f5c <__assert_fail@plt+0x1a34>
   12f74:	mov	r0, r7
   12f78:	mov	r1, r4
   12f7c:	bl	1aa88 <close_stdout@@Base+0x5408>
   12f80:	add	r5, r5, #32
   12f84:	cmp	r5, r9
   12f88:	mul	r6, r6, r0
   12f8c:	bne	12f44 <__assert_fail@plt+0x1a1c>
   12f90:	mov	r0, r6
   12f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f98:	mov	r6, #1
   12f9c:	b	12f90 <__assert_fail@plt+0x1a68>
   12fa0:	muleq	r1, ip, r2
   12fa4:			; <UNDEFINED> instruction: 0x000089b4
   12fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fac:	mov	r5, r1
   12fb0:	ldr	r8, [pc, #360]	; 13120 <__assert_fail@plt+0x1bf8>
   12fb4:	sub	sp, sp, #36	; 0x24
   12fb8:	ldr	r3, [pc, #356]	; 13124 <__assert_fail@plt+0x1bfc>
   12fbc:	add	fp, sp, #32
   12fc0:	add	r8, pc, r8
   12fc4:	ldr	r1, [pc, #348]	; 13128 <__assert_fail@plt+0x1c00>
   12fc8:	mov	r4, r0
   12fcc:	mov	r0, #0
   12fd0:	ldr	r9, [r8, r3]
   12fd4:	add	r1, pc, r1
   12fd8:	strb	r2, [fp, #-9]!
   12fdc:	ldr	r3, [r1, #12]
   12fe0:	ldr	sl, [r1, #8]
   12fe4:	ldr	r1, [r9]
   12fe8:	cmp	r3, #10
   12fec:	rsb	sl, sl, fp
   12ff0:	strb	r0, [sp, #24]
   12ff4:	str	r1, [sp, #28]
   12ff8:	beq	130d0 <__assert_fail@plt+0x1ba8>
   12ffc:	cmp	r3, #16
   13000:	beq	1308c <__assert_fail@plt+0x1b64>
   13004:	cmp	r3, #8
   13008:	beq	13058 <__assert_fail@plt+0x1b30>
   1300c:	cmp	fp, sl
   13010:	movhi	r0, fp
   13014:	movhi	r3, #48	; 0x30
   13018:	bls	1302c <__assert_fail@plt+0x1b04>
   1301c:	strb	r3, [r0, #-1]!
   13020:	cmp	r0, sl
   13024:	bne	1301c <__assert_fail@plt+0x1af4>
   13028:	mov	fp, r0
   1302c:	ldr	r3, [pc, #248]	; 1312c <__assert_fail@plt+0x1c04>
   13030:	mov	r0, fp
   13034:	ldr	r3, [r8, r3]
   13038:	ldr	r1, [r3]
   1303c:	bl	11204 <fputs_unlocked@plt>
   13040:	ldr	r2, [sp, #28]
   13044:	ldr	r3, [r9]
   13048:	cmp	r2, r3
   1304c:	bne	1311c <__assert_fail@plt+0x1bf4>
   13050:	add	sp, sp, #36	; 0x24
   13054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13058:	add	r2, sp, #22
   1305c:	lsr	r3, r4, #3
   13060:	lsr	r1, r5, #3
   13064:	orr	r3, r3, r5, lsl #29
   13068:	and	r0, r4, #7
   1306c:	mov	r5, r1
   13070:	mov	fp, r2
   13074:	mov	r4, r3
   13078:	orrs	r1, r4, r5
   1307c:	add	r3, r0, #48	; 0x30
   13080:	strb	r3, [r2], #-1
   13084:	bne	1305c <__assert_fail@plt+0x1b34>
   13088:	b	1300c <__assert_fail@plt+0x1ae4>
   1308c:	ldr	r0, [pc, #156]	; 13130 <__assert_fail@plt+0x1c08>
   13090:	add	r1, sp, #22
   13094:	mov	r6, #15
   13098:	add	r0, pc, r0
   1309c:	and	r2, r4, r6
   130a0:	lsr	r3, r4, #4
   130a4:	orr	r3, r3, r5, lsl #28
   130a8:	add	r2, r0, r2
   130ac:	lsr	ip, r5, #4
   130b0:	mov	fp, r1
   130b4:	mov	r4, r3
   130b8:	ldrb	r3, [r2]
   130bc:	mov	r5, ip
   130c0:	orrs	r2, r4, r5
   130c4:	strb	r3, [r1], #-1
   130c8:	bne	1309c <__assert_fail@plt+0x1b74>
   130cc:	b	1300c <__assert_fail@plt+0x1ae4>
   130d0:	add	r6, sp, #22
   130d4:	mov	r0, r4
   130d8:	mov	r1, r5
   130dc:	mov	r2, #10
   130e0:	mov	r3, #0
   130e4:	bl	1aed4 <close_stdout@@Base+0x5854>
   130e8:	mov	fp, r6
   130ec:	mov	r0, r4
   130f0:	mov	r1, r5
   130f4:	mov	r3, #0
   130f8:	add	ip, r2, #48	; 0x30
   130fc:	mov	r2, #10
   13100:	strb	ip, [r6], #-1
   13104:	bl	1aed4 <close_stdout@@Base+0x5854>
   13108:	mov	r4, r0
   1310c:	mov	r5, r1
   13110:	orrs	r2, r4, r5
   13114:	bne	130d4 <__assert_fail@plt+0x1bac>
   13118:	b	1300c <__assert_fail@plt+0x1ae4>
   1311c:	bl	112ac <__stack_chk_fail@plt>
   13120:	andeq	fp, r1, r8, lsr r0
   13124:	andeq	r0, r0, r8, lsr #2
   13128:	andeq	fp, r1, r4, ror #3
   1312c:	andeq	r0, r0, r8, asr #2
   13130:	andeq	r8, r0, r4, lsl #21
   13134:	push	{r4, r5, r6, lr}
   13138:	mov	r6, r0
   1313c:	ldr	r4, [pc, #308]	; 13278 <__assert_fail@plt+0x1d50>
   13140:	ldr	r5, [pc, #308]	; 1327c <__assert_fail@plt+0x1d54>
   13144:	add	r4, pc, r4
   13148:	add	r5, pc, r5
   1314c:	ldr	r0, [r4, #16]
   13150:	cmp	r0, #0
   13154:	moveq	r0, #1
   13158:	beq	1319c <__assert_fail@plt+0x1c74>
   1315c:	ldr	r2, [r0]
   13160:	tst	r2, #32
   13164:	bne	131e0 <__assert_fail@plt+0x1cb8>
   13168:	ldr	r2, [r4, #24]
   1316c:	ldr	r2, [r2, #-4]
   13170:	ldrb	r1, [r2]
   13174:	cmp	r1, #45	; 0x2d
   13178:	bne	13240 <__assert_fail@plt+0x1d18>
   1317c:	ldrb	r2, [r2, #1]
   13180:	cmp	r2, #0
   13184:	bne	13240 <__assert_fail@plt+0x1d18>
   13188:	mov	r0, #1
   1318c:	ldr	r3, [pc, #236]	; 13280 <__assert_fail@plt+0x1d58>
   13190:	mov	r2, #0
   13194:	add	r3, pc, r3
   13198:	str	r2, [r3, #16]
   1319c:	ldr	r3, [pc, #224]	; 13284 <__assert_fail@plt+0x1d5c>
   131a0:	ldr	r3, [r5, r3]
   131a4:	ldr	r3, [r3]
   131a8:	ldr	r3, [r3]
   131ac:	tst	r3, #32
   131b0:	popeq	{r4, r5, r6, pc}
   131b4:	ldr	r1, [pc, #204]	; 13288 <__assert_fail@plt+0x1d60>
   131b8:	mov	r2, #5
   131bc:	mov	r0, #0
   131c0:	add	r1, pc, r1
   131c4:	bl	112a0 <dcgettext@plt>
   131c8:	mov	r2, r0
   131cc:	mov	r0, #0
   131d0:	mov	r1, r0
   131d4:	bl	11330 <error@plt>
   131d8:	mov	r0, #0
   131dc:	pop	{r4, r5, r6, pc}
   131e0:	ldr	r1, [pc, #164]	; 1328c <__assert_fail@plt+0x1d64>
   131e4:	mov	r2, #5
   131e8:	mov	r0, #0
   131ec:	add	r1, pc, r1
   131f0:	bl	112a0 <dcgettext@plt>
   131f4:	ldr	r3, [r4, #20]
   131f8:	mov	r1, r6
   131fc:	mov	r2, r0
   13200:	mov	r0, #0
   13204:	bl	11330 <error@plt>
   13208:	ldr	r3, [r4, #24]
   1320c:	ldr	r3, [r3, #-4]
   13210:	ldrb	r2, [r3]
   13214:	cmp	r2, #45	; 0x2d
   13218:	bne	13228 <__assert_fail@plt+0x1d00>
   1321c:	ldrb	r0, [r3, #1]
   13220:	cmp	r0, #0
   13224:	beq	1318c <__assert_fail@plt+0x1c64>
   13228:	ldr	r3, [pc, #96]	; 13290 <__assert_fail@plt+0x1d68>
   1322c:	add	r3, pc, r3
   13230:	ldr	r0, [r3, #16]
   13234:	bl	1872c <close_stdout@@Base+0x30ac>
   13238:	mov	r0, #0
   1323c:	b	1318c <__assert_fail@plt+0x1c64>
   13240:	bl	1872c <close_stdout@@Base+0x30ac>
   13244:	cmp	r0, #0
   13248:	beq	13188 <__assert_fail@plt+0x1c60>
   1324c:	bl	113e4 <__errno_location@plt>
   13250:	ldr	r3, [pc, #60]	; 13294 <__assert_fail@plt+0x1d6c>
   13254:	ldr	r2, [pc, #60]	; 13298 <__assert_fail@plt+0x1d70>
   13258:	add	r3, pc, r3
   1325c:	add	r2, pc, r2
   13260:	ldr	r3, [r3, #20]
   13264:	ldr	r1, [r0]
   13268:	mov	r0, #0
   1326c:	bl	11330 <error@plt>
   13270:	mov	r0, #0
   13274:	b	1318c <__assert_fail@plt+0x1c64>
   13278:	andeq	fp, r1, r4, ror r0
   1327c:			; <UNDEFINED> instruction: 0x0001aeb0
   13280:	andeq	fp, r1, r4, lsr #32
   13284:	andeq	r0, r0, r8, asr #2
   13288:	andeq	r8, r0, r0, lsl #19
   1328c:	andeq	r8, r0, r4, asr #18
   13290:	andeq	sl, r1, ip, lsl #31
   13294:	andeq	sl, r1, r0, ror #30
   13298:	andeq	r9, r0, ip, lsl fp
   1329c:	push	{r4, r5, lr}
   132a0:	mov	r4, r0
   132a4:	ldrb	r0, [r0]
   132a8:	sub	sp, sp, #12
   132ac:	mov	r5, r1
   132b0:	cmp	r0, #0
   132b4:	beq	132fc <__assert_fail@plt+0x1dd4>
   132b8:	cmp	r0, #43	; 0x2b
   132bc:	mov	r1, #46	; 0x2e
   132c0:	addeq	r4, r4, #1
   132c4:	mov	r0, r4
   132c8:	bl	113cc <strchr@plt>
   132cc:	cmp	r0, #0
   132d0:	movne	r2, #10
   132d4:	beq	13304 <__assert_fail@plt+0x1ddc>
   132d8:	ldr	ip, [pc, #76]	; 1332c <__assert_fail@plt+0x1e04>
   132dc:	mov	r0, r4
   132e0:	mov	r3, r5
   132e4:	mov	r1, #0
   132e8:	add	ip, pc, ip
   132ec:	str	ip, [sp]
   132f0:	bl	17fd4 <close_stdout@@Base+0x2954>
   132f4:	rsbs	r0, r0, #1
   132f8:	movcc	r0, #0
   132fc:	add	sp, sp, #12
   13300:	pop	{r4, r5, pc}
   13304:	ldrb	r3, [r4]
   13308:	cmp	r3, #48	; 0x30
   1330c:	movne	r2, #8
   13310:	bne	132d8 <__assert_fail@plt+0x1db0>
   13314:	ldrb	r2, [r4, #1]
   13318:	and	r2, r2, #223	; 0xdf
   1331c:	cmp	r2, #88	; 0x58
   13320:	moveq	r2, #16
   13324:	movne	r2, #8
   13328:	b	132d8 <__assert_fail@plt+0x1db0>
   1332c:	andeq	r8, r0, r4, ror #16
   13330:	ldr	r3, [pc, #332]	; 13484 <__assert_fail@plt+0x1f5c>
   13334:	ldr	ip, [pc, #332]	; 13488 <__assert_fail@plt+0x1f60>
   13338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1333c:	add	r3, pc, r3
   13340:	sub	sp, sp, #52	; 0x34
   13344:	mov	r4, r0
   13348:	mov	r5, #0
   1334c:	mov	r6, r1
   13350:	mov	r7, #0
   13354:	strd	r4, [sp]
   13358:	strd	r6, [sp, #8]
   1335c:	cmp	r5, r7
   13360:	cmpeq	r4, r6
   13364:	ldr	ip, [r3, ip]
   13368:	ldr	fp, [sp, #92]	; 0x5c
   1336c:	ldr	r3, [ip]
   13370:	str	ip, [sp, #36]	; 0x24
   13374:	str	r3, [sp, #44]	; 0x2c
   13378:	bls	13464 <__assert_fail@plt+0x1f3c>
   1337c:	ldrd	r6, [sp]
   13380:	asr	r5, fp, #31
   13384:	add	sl, r2, r0
   13388:	ldr	r3, [pc, #252]	; 1348c <__assert_fail@plt+0x1f64>
   1338c:	subs	r6, r6, #1
   13390:	mov	r4, fp
   13394:	sbc	r7, r7, #0
   13398:	strd	r4, [sp, #16]
   1339c:	mul	r2, r6, r5
   133a0:	ldr	r9, [pc, #232]	; 13490 <__assert_fail@plt+0x1f68>
   133a4:	mla	r2, fp, r7, r2
   133a8:	ldr	r5, [pc, #228]	; 13494 <__assert_fail@plt+0x1f6c>
   133ac:	umull	r6, r7, r6, fp
   133b0:	add	r3, pc, r3
   133b4:	add	r5, pc, r5
   133b8:	add	r3, r3, #36	; 0x24
   133bc:	str	r5, [sp, #32]
   133c0:	add	r9, pc, r9
   133c4:	str	r3, [sp, #28]
   133c8:	add	r7, r2, r7
   133cc:	ldrd	r4, [sp]
   133d0:	str	sl, [sp, #24]
   133d4:	b	13428 <__assert_fail@plt+0x1f00>
   133d8:	cmp	r2, #32
   133dc:	strbgt	r2, [sp, #40]	; 0x28
   133e0:	addgt	r2, sp, #40	; 0x28
   133e4:	ldrle	sl, [sp, #28]
   133e8:	movgt	r1, #0
   133ec:	strbgt	r1, [sp, #41]	; 0x29
   133f0:	addle	r2, sl, r2, lsl #2
   133f4:	ldr	sl, [sp, #88]	; 0x58
   133f8:	rsb	r1, r8, fp
   133fc:	mov	r0, r9
   13400:	add	r1, r1, sl
   13404:	ldrd	sl, [sp, #16]
   13408:	bl	17d9c <close_stdout@@Base+0x271c>
   1340c:	subs	r6, r6, sl
   13410:	sbc	r7, r7, fp
   13414:	ldrd	sl, [sp, #8]
   13418:	cmp	r5, fp
   1341c:	cmpeq	r4, sl
   13420:	bls	13464 <__assert_fail@plt+0x1f3c>
   13424:	mov	fp, r8
   13428:	subs	r4, r4, #1
   1342c:	ldrd	r2, [sp]
   13430:	mov	r0, r6
   13434:	mov	r1, r7
   13438:	sbc	r5, r5, #0
   1343c:	bl	1aed4 <close_stdout@@Base+0x5854>
   13440:	ldr	sl, [sp, #24]
   13444:	rsb	r2, r4, sl
   13448:	ldrb	r2, [r2, #-1]
   1344c:	and	r2, r2, #127	; 0x7f
   13450:	cmp	r2, #127	; 0x7f
   13454:	mov	r8, r0
   13458:	bne	133d8 <__assert_fail@plt+0x1eb0>
   1345c:	ldr	r2, [sp, #32]
   13460:	b	133f4 <__assert_fail@plt+0x1ecc>
   13464:	ldr	fp, [sp, #36]	; 0x24
   13468:	ldr	r2, [sp, #44]	; 0x2c
   1346c:	ldr	r3, [fp]
   13470:	cmp	r2, r3
   13474:	bne	13480 <__assert_fail@plt+0x1f58>
   13478:	add	sp, sp, #52	; 0x34
   1347c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13480:	bl	112ac <__stack_chk_fail@plt>
   13484:			; <UNDEFINED> instruction: 0x0001acbc
   13488:	andeq	r0, r0, r8, lsr #2
   1348c:	andeq	r8, r0, r0, asr #10
   13490:	muleq	r0, r4, r7
   13494:	muleq	r0, ip, r7
   13498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1349c:	mov	sl, r1
   134a0:	sub	sp, sp, #36	; 0x24
   134a4:	mov	fp, #0
   134a8:	mov	r4, r0
   134ac:	mov	r5, #0
   134b0:	cmp	r5, fp
   134b4:	cmpeq	r4, sl
   134b8:	strd	sl, [sp, #16]
   134bc:	strd	r4, [sp, #8]
   134c0:	mov	r9, r2
   134c4:	mov	sl, r3
   134c8:	ldr	fp, [sp, #76]	; 0x4c
   134cc:	bls	13558 <__assert_fail@plt+0x2030>
   134d0:	mov	r4, fp
   134d4:	asr	r5, fp, #31
   134d8:	strd	r4, [sp, #24]
   134dc:	ldrd	r4, [sp, #8]
   134e0:	ldr	r0, [sp, #28]
   134e4:	subs	r4, r4, #1
   134e8:	ldrd	r6, [sp, #8]
   134ec:	sbc	r5, r5, #0
   134f0:	str	sl, [sp, #4]
   134f4:	mul	r3, r4, r0
   134f8:	mla	r3, fp, r5, r3
   134fc:	umull	r4, r5, r4, fp
   13500:	add	r5, r3, r5
   13504:	ldrd	r2, [sp, #8]
   13508:	mov	r0, r4
   1350c:	mov	r1, r5
   13510:	bl	1aed4 <close_stdout@@Base+0x5854>
   13514:	ldr	sl, [sp, #72]	; 0x48
   13518:	subs	r6, r6, #1
   1351c:	ldrd	r2, [r9], #8
   13520:	sbc	r7, r7, #0
   13524:	rsb	r1, r0, fp
   13528:	mov	r8, r0
   1352c:	add	r1, r1, sl
   13530:	ldrd	sl, [sp, #24]
   13534:	ldr	r0, [sp, #4]
   13538:	subs	r4, r4, sl
   1353c:	sbc	r5, r5, fp
   13540:	bl	17d9c <close_stdout@@Base+0x271c>
   13544:	ldrd	sl, [sp, #16]
   13548:	cmp	r7, fp
   1354c:	cmpeq	r6, sl
   13550:	mov	fp, r8
   13554:	bhi	13504 <__assert_fail@plt+0x1fdc>
   13558:	add	sp, sp, #36	; 0x24
   1355c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13564:	mov	r8, r1
   13568:	sub	sp, sp, #36	; 0x24
   1356c:	mov	r4, r0
   13570:	mov	r5, #0
   13574:	mov	r9, #0
   13578:	cmp	r5, r9
   1357c:	cmpeq	r4, r8
   13580:	strd	r8, [sp, #16]
   13584:	strd	r4, [sp, #8]
   13588:	mov	sl, r3
   1358c:	ldr	r8, [sp, #76]	; 0x4c
   13590:	bls	13624 <__assert_fail@plt+0x20fc>
   13594:	mov	r4, r8
   13598:	asr	r5, r8, #31
   1359c:	strd	r4, [sp, #24]
   135a0:	ldrd	r4, [sp, #8]
   135a4:	ldr	r0, [sp, #28]
   135a8:	subs	r4, r4, #1
   135ac:	ldrd	r6, [sp, #8]
   135b0:	sbc	r5, r5, #0
   135b4:	str	r2, [sp, #4]
   135b8:	mul	r3, r4, r0
   135bc:	mla	r3, r8, r5, r3
   135c0:	umull	r4, r5, r4, r8
   135c4:	add	r5, r3, r5
   135c8:	ldrd	r2, [sp, #8]
   135cc:	mov	r0, r4
   135d0:	mov	r1, r5
   135d4:	bl	1aed4 <close_stdout@@Base+0x5854>
   135d8:	ldr	r9, [sp, #4]
   135dc:	subs	r6, r6, #1
   135e0:	sbc	r7, r7, #0
   135e4:	ldr	r2, [r9], #4
   135e8:	str	r9, [sp, #4]
   135ec:	rsb	r1, r0, r8
   135f0:	ldr	r8, [sp, #72]	; 0x48
   135f4:	mov	fp, r0
   135f8:	mov	r0, sl
   135fc:	add	r1, r1, r8
   13600:	ldrd	r8, [sp, #24]
   13604:	bl	17d9c <close_stdout@@Base+0x271c>
   13608:	subs	r4, r4, r8
   1360c:	sbc	r5, r5, r9
   13610:	ldrd	r8, [sp, #16]
   13614:	cmp	r7, r9
   13618:	cmpeq	r6, r8
   1361c:	mov	r8, fp
   13620:	bhi	135c8 <__assert_fail@plt+0x20a0>
   13624:	add	sp, sp, #36	; 0x24
   13628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1362c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13630:	mov	r8, r1
   13634:	sub	sp, sp, #36	; 0x24
   13638:	mov	r4, r0
   1363c:	mov	r5, #0
   13640:	mov	r9, #0
   13644:	cmp	r5, r9
   13648:	cmpeq	r4, r8
   1364c:	strd	r8, [sp, #16]
   13650:	strd	r4, [sp, #8]
   13654:	mov	sl, r3
   13658:	ldr	r8, [sp, #76]	; 0x4c
   1365c:	bls	136f0 <__assert_fail@plt+0x21c8>
   13660:	mov	r4, r8
   13664:	asr	r5, r8, #31
   13668:	strd	r4, [sp, #24]
   1366c:	ldrd	r4, [sp, #8]
   13670:	ldr	r0, [sp, #28]
   13674:	subs	r4, r4, #1
   13678:	ldrd	r6, [sp, #8]
   1367c:	sbc	r5, r5, #0
   13680:	str	r2, [sp, #4]
   13684:	mul	r3, r4, r0
   13688:	mla	r3, r8, r5, r3
   1368c:	umull	r4, r5, r4, r8
   13690:	add	r5, r3, r5
   13694:	ldrd	r2, [sp, #8]
   13698:	mov	r0, r4
   1369c:	mov	r1, r5
   136a0:	bl	1aed4 <close_stdout@@Base+0x5854>
   136a4:	ldr	r9, [sp, #4]
   136a8:	subs	r6, r6, #1
   136ac:	sbc	r7, r7, #0
   136b0:	ldr	r2, [r9], #4
   136b4:	str	r9, [sp, #4]
   136b8:	rsb	r1, r0, r8
   136bc:	ldr	r8, [sp, #72]	; 0x48
   136c0:	mov	fp, r0
   136c4:	mov	r0, sl
   136c8:	add	r1, r1, r8
   136cc:	ldrd	r8, [sp, #24]
   136d0:	bl	17d9c <close_stdout@@Base+0x271c>
   136d4:	subs	r4, r4, r8
   136d8:	sbc	r5, r5, r9
   136dc:	ldrd	r8, [sp, #16]
   136e0:	cmp	r7, r9
   136e4:	cmpeq	r6, r8
   136e8:	mov	r8, fp
   136ec:	bhi	13694 <__assert_fail@plt+0x216c>
   136f0:	add	sp, sp, #36	; 0x24
   136f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136fc:	mov	r8, r1
   13700:	sub	sp, sp, #36	; 0x24
   13704:	mov	r4, r0
   13708:	mov	r5, #0
   1370c:	mov	r9, #0
   13710:	cmp	r5, r9
   13714:	cmpeq	r4, r8
   13718:	strd	r8, [sp, #16]
   1371c:	strd	r4, [sp, #8]
   13720:	mov	sl, r3
   13724:	ldr	r8, [sp, #76]	; 0x4c
   13728:	bls	137bc <__assert_fail@plt+0x2294>
   1372c:	mov	r4, r8
   13730:	asr	r5, r8, #31
   13734:	strd	r4, [sp, #24]
   13738:	ldrd	r4, [sp, #8]
   1373c:	ldr	r0, [sp, #28]
   13740:	subs	r4, r4, #1
   13744:	ldrd	r6, [sp, #8]
   13748:	sbc	r5, r5, #0
   1374c:	str	r2, [sp, #4]
   13750:	mul	r3, r4, r0
   13754:	mla	r3, r8, r5, r3
   13758:	umull	r4, r5, r4, r8
   1375c:	add	r5, r3, r5
   13760:	ldrd	r2, [sp, #8]
   13764:	mov	r0, r4
   13768:	mov	r1, r5
   1376c:	bl	1aed4 <close_stdout@@Base+0x5854>
   13770:	ldr	r9, [sp, #4]
   13774:	subs	r6, r6, #1
   13778:	sbc	r7, r7, #0
   1377c:	ldrh	r2, [r9], #2
   13780:	str	r9, [sp, #4]
   13784:	rsb	r1, r0, r8
   13788:	ldr	r8, [sp, #72]	; 0x48
   1378c:	mov	fp, r0
   13790:	mov	r0, sl
   13794:	add	r1, r1, r8
   13798:	ldrd	r8, [sp, #24]
   1379c:	bl	17d9c <close_stdout@@Base+0x271c>
   137a0:	subs	r4, r4, r8
   137a4:	sbc	r5, r5, r9
   137a8:	ldrd	r8, [sp, #16]
   137ac:	cmp	r7, r9
   137b0:	cmpeq	r6, r8
   137b4:	mov	r8, fp
   137b8:	bhi	13760 <__assert_fail@plt+0x2238>
   137bc:	add	sp, sp, #36	; 0x24
   137c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137c8:	mov	r8, r1
   137cc:	sub	sp, sp, #36	; 0x24
   137d0:	mov	r4, r0
   137d4:	mov	r5, #0
   137d8:	mov	r9, #0
   137dc:	cmp	r5, r9
   137e0:	cmpeq	r4, r8
   137e4:	strd	r8, [sp, #16]
   137e8:	strd	r4, [sp, #8]
   137ec:	mov	sl, r3
   137f0:	ldr	r8, [sp, #76]	; 0x4c
   137f4:	bls	13888 <__assert_fail@plt+0x2360>
   137f8:	mov	r4, r8
   137fc:	asr	r5, r8, #31
   13800:	strd	r4, [sp, #24]
   13804:	ldrd	r4, [sp, #8]
   13808:	ldr	r0, [sp, #28]
   1380c:	subs	r4, r4, #1
   13810:	ldrd	r6, [sp, #8]
   13814:	sbc	r5, r5, #0
   13818:	str	r2, [sp, #4]
   1381c:	mul	r3, r4, r0
   13820:	mla	r3, r8, r5, r3
   13824:	umull	r4, r5, r4, r8
   13828:	add	r5, r3, r5
   1382c:	ldrd	r2, [sp, #8]
   13830:	mov	r0, r4
   13834:	mov	r1, r5
   13838:	bl	1aed4 <close_stdout@@Base+0x5854>
   1383c:	ldr	r9, [sp, #4]
   13840:	subs	r6, r6, #1
   13844:	sbc	r7, r7, #0
   13848:	ldrsh	r2, [r9], #2
   1384c:	str	r9, [sp, #4]
   13850:	rsb	r1, r0, r8
   13854:	ldr	r8, [sp, #72]	; 0x48
   13858:	mov	fp, r0
   1385c:	mov	r0, sl
   13860:	add	r1, r1, r8
   13864:	ldrd	r8, [sp, #24]
   13868:	bl	17d9c <close_stdout@@Base+0x271c>
   1386c:	subs	r4, r4, r8
   13870:	sbc	r5, r5, r9
   13874:	ldrd	r8, [sp, #16]
   13878:	cmp	r7, r9
   1387c:	cmpeq	r6, r8
   13880:	mov	r8, fp
   13884:	bhi	1382c <__assert_fail@plt+0x2304>
   13888:	add	sp, sp, #36	; 0x24
   1388c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13894:	mov	r4, r1
   13898:	sub	sp, sp, #36	; 0x24
   1389c:	mov	r5, #0
   138a0:	mov	r6, r0
   138a4:	mov	r7, #0
   138a8:	cmp	r7, r5
   138ac:	cmpeq	r6, r4
   138b0:	strd	r4, [sp, #16]
   138b4:	strd	r6, [sp, #8]
   138b8:	mov	r9, r3
   138bc:	ldr	sl, [sp, #72]	; 0x48
   138c0:	ldr	r8, [sp, #76]	; 0x4c
   138c4:	bls	1395c <__assert_fail@plt+0x2434>
   138c8:	mov	r4, r8
   138cc:	asr	r5, r8, #31
   138d0:	strd	r4, [sp, #24]
   138d4:	subs	r6, r0, #1
   138d8:	add	fp, r2, r0
   138dc:	ldr	r0, [sp, #28]
   138e0:	sbc	r7, r7, #0
   138e4:	ldrd	r4, [sp, #8]
   138e8:	str	sl, [sp, #4]
   138ec:	mul	r3, r6, r0
   138f0:	str	fp, [sp]
   138f4:	mla	r3, r8, r7, r3
   138f8:	umull	r6, r7, r6, r8
   138fc:	add	r7, r3, r7
   13900:	subs	r4, r4, #1
   13904:	ldrd	r2, [sp, #8]
   13908:	mov	r0, r6
   1390c:	mov	r1, r7
   13910:	sbc	r5, r5, #0
   13914:	bl	1aed4 <close_stdout@@Base+0x5854>
   13918:	ldrd	sl, [sp, #24]
   1391c:	subs	r6, r6, sl
   13920:	sbc	r7, r7, fp
   13924:	ldr	sl, [sp]
   13928:	rsb	r2, r4, sl
   1392c:	ldr	sl, [sp, #4]
   13930:	ldrb	r2, [r2, #-1]
   13934:	rsb	r1, r0, r8
   13938:	mov	r3, r0
   1393c:	add	r1, r1, sl
   13940:	mov	r0, r9
   13944:	mov	r8, r3
   13948:	bl	17d9c <close_stdout@@Base+0x271c>
   1394c:	ldrd	sl, [sp, #16]
   13950:	cmp	r5, fp
   13954:	cmpeq	r4, sl
   13958:	bhi	13900 <__assert_fail@plt+0x23d8>
   1395c:	add	sp, sp, #36	; 0x24
   13960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13968:	mov	r4, r1
   1396c:	sub	sp, sp, #36	; 0x24
   13970:	mov	r5, #0
   13974:	mov	r6, r0
   13978:	mov	r7, #0
   1397c:	cmp	r7, r5
   13980:	cmpeq	r6, r4
   13984:	strd	r4, [sp, #16]
   13988:	strd	r6, [sp, #8]
   1398c:	mov	r9, r3
   13990:	ldr	sl, [sp, #72]	; 0x48
   13994:	ldr	r8, [sp, #76]	; 0x4c
   13998:	bls	13a30 <__assert_fail@plt+0x2508>
   1399c:	mov	r4, r8
   139a0:	asr	r5, r8, #31
   139a4:	strd	r4, [sp, #24]
   139a8:	subs	r6, r0, #1
   139ac:	add	fp, r2, r0
   139b0:	ldr	r0, [sp, #28]
   139b4:	sbc	r7, r7, #0
   139b8:	ldrd	r4, [sp, #8]
   139bc:	str	sl, [sp, #4]
   139c0:	mul	r3, r6, r0
   139c4:	str	fp, [sp]
   139c8:	mla	r3, r8, r7, r3
   139cc:	umull	r6, r7, r6, r8
   139d0:	add	r7, r3, r7
   139d4:	subs	r4, r4, #1
   139d8:	ldrd	r2, [sp, #8]
   139dc:	mov	r0, r6
   139e0:	mov	r1, r7
   139e4:	sbc	r5, r5, #0
   139e8:	bl	1aed4 <close_stdout@@Base+0x5854>
   139ec:	ldrd	sl, [sp, #24]
   139f0:	subs	r6, r6, sl
   139f4:	sbc	r7, r7, fp
   139f8:	ldr	sl, [sp]
   139fc:	rsb	r2, r4, sl
   13a00:	ldr	sl, [sp, #4]
   13a04:	ldrsb	r2, [r2, #-1]
   13a08:	rsb	r1, r0, r8
   13a0c:	mov	r3, r0
   13a10:	add	r1, r1, sl
   13a14:	mov	r0, r9
   13a18:	mov	r8, r3
   13a1c:	bl	17d9c <close_stdout@@Base+0x271c>
   13a20:	ldrd	sl, [sp, #16]
   13a24:	cmp	r5, fp
   13a28:	cmpeq	r4, sl
   13a2c:	bhi	139d4 <__assert_fail@plt+0x24ac>
   13a30:	add	sp, sp, #36	; 0x24
   13a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a38:	ldr	r3, [pc, #300]	; 13b6c <__assert_fail@plt+0x2644>
   13a3c:	ldr	ip, [pc, #300]	; 13b70 <__assert_fail@plt+0x2648>
   13a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a44:	add	r3, pc, r3
   13a48:	sub	sp, sp, #92	; 0x5c
   13a4c:	mov	r7, #0
   13a50:	mov	r4, r0
   13a54:	mov	r5, #0
   13a58:	mov	r6, r1
   13a5c:	strd	r4, [sp, #8]
   13a60:	strd	r6, [sp, #16]
   13a64:	cmp	r5, r7
   13a68:	cmpeq	r4, r6
   13a6c:	ldr	ip, [r3, ip]
   13a70:	mov	sl, r2
   13a74:	ldr	r7, [sp, #132]	; 0x84
   13a78:	ldr	r3, [ip]
   13a7c:	str	ip, [sp, #36]	; 0x24
   13a80:	str	r3, [sp, #84]	; 0x54
   13a84:	bls	13b4c <__assert_fail@plt+0x2624>
   13a88:	mov	r4, r7
   13a8c:	asr	r5, r7, #31
   13a90:	ldrd	r2, [sp, #8]
   13a94:	add	r9, sl, r0, lsl #3
   13a98:	strd	r4, [sp, #24]
   13a9c:	add	r8, sp, #44	; 0x2c
   13aa0:	ldr	r6, [sp, #28]
   13aa4:	subs	r2, r2, #1
   13aa8:	sbc	r3, r3, #0
   13aac:	ldr	r5, [pc, #192]	; 13b74 <__assert_fail@plt+0x264c>
   13ab0:	umull	sl, fp, r2, r7
   13ab4:	add	r5, pc, r5
   13ab8:	mul	r1, r2, r6
   13abc:	str	r5, [sp, #32]
   13ac0:	mla	r3, r7, r3, r1
   13ac4:	ldrd	r4, [sp, #8]
   13ac8:	str	r7, [sp, #4]
   13acc:	add	fp, r3, fp
   13ad0:	b	13ad8 <__assert_fail@plt+0x25b0>
   13ad4:	str	r6, [sp, #4]
   13ad8:	subs	r4, r4, #1
   13adc:	ldrd	r2, [sp, #8]
   13ae0:	mov	r0, sl
   13ae4:	mov	r1, fp
   13ae8:	sbc	r5, r5, #0
   13aec:	bl	1aed4 <close_stdout@@Base+0x5854>
   13af0:	ldrd	r6, [sp, #24]
   13af4:	mov	r2, #0
   13af8:	ldr	r1, [sp, #128]	; 0x80
   13afc:	mov	r3, r2
   13b00:	subs	sl, sl, r6
   13b04:	sbc	fp, fp, r7
   13b08:	mov	r6, r0
   13b0c:	ldr	r0, [sp, #4]
   13b10:	rsb	r7, r6, r0
   13b14:	mov	r0, r8
   13b18:	add	r7, r7, r1
   13b1c:	sub	r1, r9, r4, lsl #3
   13b20:	vldr	d0, [r1, #-8]
   13b24:	mov	r1, #40	; 0x28
   13b28:	bl	15b30 <close_stdout@@Base+0x4b0>
   13b2c:	mov	r2, r8
   13b30:	ldr	r0, [sp, #32]
   13b34:	mov	r1, r7
   13b38:	bl	17d9c <close_stdout@@Base+0x271c>
   13b3c:	ldrd	r2, [sp, #16]
   13b40:	cmp	r5, r3
   13b44:	cmpeq	r4, r2
   13b48:	bhi	13ad4 <__assert_fail@plt+0x25ac>
   13b4c:	ldr	r4, [sp, #36]	; 0x24
   13b50:	ldr	r2, [sp, #84]	; 0x54
   13b54:	ldr	r3, [r4]
   13b58:	cmp	r2, r3
   13b5c:	bne	13b68 <__assert_fail@plt+0x2640>
   13b60:	add	sp, sp, #92	; 0x5c
   13b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b68:	bl	112ac <__stack_chk_fail@plt>
   13b6c:			; <UNDEFINED> instruction: 0x0001a5b4
   13b70:	andeq	r0, r0, r8, lsr #2
   13b74:	andeq	r8, r0, r0, lsr #1
   13b78:	ldr	r3, [pc, #300]	; 13cac <__assert_fail@plt+0x2784>
   13b7c:	ldr	ip, [pc, #300]	; 13cb0 <__assert_fail@plt+0x2788>
   13b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b84:	add	r3, pc, r3
   13b88:	sub	sp, sp, #92	; 0x5c
   13b8c:	mov	r7, #0
   13b90:	mov	r4, r0
   13b94:	mov	r5, #0
   13b98:	mov	r6, r1
   13b9c:	strd	r4, [sp, #8]
   13ba0:	strd	r6, [sp, #16]
   13ba4:	cmp	r5, r7
   13ba8:	cmpeq	r4, r6
   13bac:	ldr	ip, [r3, ip]
   13bb0:	mov	sl, r2
   13bb4:	ldr	r7, [sp, #132]	; 0x84
   13bb8:	ldr	r3, [ip]
   13bbc:	str	ip, [sp, #36]	; 0x24
   13bc0:	str	r3, [sp, #84]	; 0x54
   13bc4:	bls	13c8c <__assert_fail@plt+0x2764>
   13bc8:	mov	r4, r7
   13bcc:	asr	r5, r7, #31
   13bd0:	ldrd	r2, [sp, #8]
   13bd4:	add	r9, sl, r0, lsl #3
   13bd8:	strd	r4, [sp, #24]
   13bdc:	add	r8, sp, #44	; 0x2c
   13be0:	ldr	r6, [sp, #28]
   13be4:	subs	r2, r2, #1
   13be8:	sbc	r3, r3, #0
   13bec:	ldr	r5, [pc, #192]	; 13cb4 <__assert_fail@plt+0x278c>
   13bf0:	umull	sl, fp, r2, r7
   13bf4:	add	r5, pc, r5
   13bf8:	mul	r1, r2, r6
   13bfc:	str	r5, [sp, #32]
   13c00:	mla	r3, r7, r3, r1
   13c04:	ldrd	r4, [sp, #8]
   13c08:	str	r7, [sp, #4]
   13c0c:	add	fp, r3, fp
   13c10:	b	13c18 <__assert_fail@plt+0x26f0>
   13c14:	str	r6, [sp, #4]
   13c18:	subs	r4, r4, #1
   13c1c:	ldrd	r2, [sp, #8]
   13c20:	mov	r0, sl
   13c24:	mov	r1, fp
   13c28:	sbc	r5, r5, #0
   13c2c:	bl	1aed4 <close_stdout@@Base+0x5854>
   13c30:	ldrd	r6, [sp, #24]
   13c34:	mov	r2, #0
   13c38:	ldr	r1, [sp, #128]	; 0x80
   13c3c:	mov	r3, r2
   13c40:	subs	sl, sl, r6
   13c44:	sbc	fp, fp, r7
   13c48:	mov	r6, r0
   13c4c:	ldr	r0, [sp, #4]
   13c50:	rsb	r7, r6, r0
   13c54:	mov	r0, r8
   13c58:	add	r7, r7, r1
   13c5c:	sub	r1, r9, r4, lsl #3
   13c60:	vldr	d0, [r1, #-8]
   13c64:	mov	r1, #40	; 0x28
   13c68:	bl	15840 <close_stdout@@Base+0x1c0>
   13c6c:	mov	r2, r8
   13c70:	ldr	r0, [sp, #32]
   13c74:	mov	r1, r7
   13c78:	bl	17d9c <close_stdout@@Base+0x271c>
   13c7c:	ldrd	r2, [sp, #16]
   13c80:	cmp	r5, r3
   13c84:	cmpeq	r4, r2
   13c88:	bhi	13c14 <__assert_fail@plt+0x26ec>
   13c8c:	ldr	r4, [sp, #36]	; 0x24
   13c90:	ldr	r2, [sp, #84]	; 0x54
   13c94:	ldr	r3, [r4]
   13c98:	cmp	r2, r3
   13c9c:	bne	13ca8 <__assert_fail@plt+0x2780>
   13ca0:	add	sp, sp, #92	; 0x5c
   13ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ca8:	bl	112ac <__stack_chk_fail@plt>
   13cac:	andeq	sl, r1, r4, ror r4
   13cb0:	andeq	r0, r0, r8, lsr #2
   13cb4:	andeq	r7, r0, r0, ror #30
   13cb8:	ldr	r3, [pc, #300]	; 13dec <__assert_fail@plt+0x28c4>
   13cbc:	ldr	ip, [pc, #300]	; 13df0 <__assert_fail@plt+0x28c8>
   13cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc4:	add	r3, pc, r3
   13cc8:	sub	sp, sp, #84	; 0x54
   13ccc:	mov	r7, #0
   13cd0:	mov	r4, r0
   13cd4:	mov	r5, #0
   13cd8:	mov	r6, r1
   13cdc:	strd	r4, [sp, #8]
   13ce0:	strd	r6, [sp, #16]
   13ce4:	cmp	r5, r7
   13ce8:	cmpeq	r4, r6
   13cec:	ldr	ip, [r3, ip]
   13cf0:	mov	sl, r2
   13cf4:	ldr	r7, [sp, #124]	; 0x7c
   13cf8:	ldr	r3, [ip]
   13cfc:	str	ip, [sp, #36]	; 0x24
   13d00:	str	r3, [sp, #76]	; 0x4c
   13d04:	bls	13dcc <__assert_fail@plt+0x28a4>
   13d08:	mov	r4, r7
   13d0c:	asr	r5, r7, #31
   13d10:	ldrd	r2, [sp, #8]
   13d14:	add	r9, sl, r0, lsl #2
   13d18:	strd	r4, [sp, #24]
   13d1c:	add	r8, sp, #44	; 0x2c
   13d20:	ldr	r6, [sp, #28]
   13d24:	subs	r2, r2, #1
   13d28:	sbc	r3, r3, #0
   13d2c:	ldr	r5, [pc, #192]	; 13df4 <__assert_fail@plt+0x28cc>
   13d30:	umull	sl, fp, r2, r7
   13d34:	add	r5, pc, r5
   13d38:	mul	r1, r2, r6
   13d3c:	str	r5, [sp, #32]
   13d40:	mla	r3, r7, r3, r1
   13d44:	ldrd	r4, [sp, #8]
   13d48:	str	r7, [sp, #4]
   13d4c:	add	fp, r3, fp
   13d50:	b	13d58 <__assert_fail@plt+0x2830>
   13d54:	str	r6, [sp, #4]
   13d58:	subs	r4, r4, #1
   13d5c:	ldrd	r2, [sp, #8]
   13d60:	mov	r0, sl
   13d64:	mov	r1, fp
   13d68:	sbc	r5, r5, #0
   13d6c:	bl	1aed4 <close_stdout@@Base+0x5854>
   13d70:	ldrd	r6, [sp, #24]
   13d74:	mov	r2, #0
   13d78:	ldr	r1, [sp, #120]	; 0x78
   13d7c:	mov	r3, r2
   13d80:	subs	sl, sl, r6
   13d84:	sbc	fp, fp, r7
   13d88:	mov	r6, r0
   13d8c:	ldr	r0, [sp, #4]
   13d90:	rsb	r7, r6, r0
   13d94:	mov	r0, r8
   13d98:	add	r7, r7, r1
   13d9c:	sub	r1, r9, r4, lsl #2
   13da0:	vldr	s0, [r1, #-4]
   13da4:	mov	r1, #31
   13da8:	bl	159b8 <close_stdout@@Base+0x338>
   13dac:	mov	r2, r8
   13db0:	ldr	r0, [sp, #32]
   13db4:	mov	r1, r7
   13db8:	bl	17d9c <close_stdout@@Base+0x271c>
   13dbc:	ldrd	r2, [sp, #16]
   13dc0:	cmp	r5, r3
   13dc4:	cmpeq	r4, r2
   13dc8:	bhi	13d54 <__assert_fail@plt+0x282c>
   13dcc:	ldr	r4, [sp, #36]	; 0x24
   13dd0:	ldr	r2, [sp, #76]	; 0x4c
   13dd4:	ldr	r3, [r4]
   13dd8:	cmp	r2, r3
   13ddc:	bne	13de8 <__assert_fail@plt+0x28c0>
   13de0:	add	sp, sp, #84	; 0x54
   13de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de8:	bl	112ac <__stack_chk_fail@plt>
   13dec:	andeq	sl, r1, r4, lsr r3
   13df0:	andeq	r0, r0, r8, lsr #2
   13df4:	andeq	r7, r0, r0, lsr #28
   13df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dfc:	cmp	r0, #0
   13e00:	sub	sp, sp, #36	; 0x24
   13e04:	str	r0, [sp, #12]
   13e08:	beq	146c0 <__assert_fail@plt+0x3198>
   13e0c:	ldrb	r3, [r0]
   13e10:	cmp	r3, #0
   13e14:	beq	145cc <__assert_fail@plt+0x30a4>
   13e18:	ldr	r8, [pc, #2244]	; 146e4 <__assert_fail@plt+0x31bc>
   13e1c:	movw	fp, #52429	; 0xcccd
   13e20:	ldr	ip, [pc, #2240]	; 146e8 <__assert_fail@plt+0x31c0>
   13e24:	movt	fp, #52428	; 0xcccc
   13e28:	add	r8, pc, r8
   13e2c:	ldr	r7, [pc, #2232]	; 146ec <__assert_fail@plt+0x31c4>
   13e30:	add	ip, pc, ip
   13e34:	str	ip, [sp, #20]
   13e38:	ldr	ip, [pc, #2224]	; 146f0 <__assert_fail@plt+0x31c8>
   13e3c:	add	r7, pc, r7
   13e40:	ldr	r6, [sp, #12]
   13e44:	ldr	r2, [r8]
   13e48:	add	ip, pc, ip
   13e4c:	str	ip, [sp, #24]
   13e50:	ldr	ip, [pc, #2204]	; 146f4 <__assert_fail@plt+0x31cc>
   13e54:	add	ip, pc, ip
   13e58:	str	ip, [sp, #28]
   13e5c:	ldr	r3, [r8, #28]
   13e60:	cmp	r2, r3
   13e64:	ldrcc	r5, [r8, #4]
   13e68:	bcc	13ea8 <__assert_fail@plt+0x2980>
   13e6c:	ldr	r0, [r8, #4]
   13e70:	cmp	r0, #0
   13e74:	beq	14118 <__assert_fail@plt+0x2bf0>
   13e78:	movw	r2, #21844	; 0x5554
   13e7c:	movt	r2, #1365	; 0x555
   13e80:	cmp	r3, r2
   13e84:	bhi	14698 <__assert_fail@plt+0x3170>
   13e88:	add	r2, r3, #1
   13e8c:	add	r3, r3, r2, lsr #1
   13e90:	lsl	r1, r3, #5
   13e94:	str	r3, [r7, #28]
   13e98:	bl	17b04 <close_stdout@@Base+0x2484>
   13e9c:	ldr	r2, [r7]
   13ea0:	mov	r5, r0
   13ea4:	str	r0, [r7, #4]
   13ea8:	adds	r5, r5, r2, lsl #5
   13eac:	beq	14650 <__assert_fail@plt+0x3128>
   13eb0:	ldrb	r2, [r6]
   13eb4:	sub	r3, r2, #97	; 0x61
   13eb8:	cmp	r3, #23
   13ebc:	addls	pc, pc, r3, lsl #2
   13ec0:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ec4:	b	140b8 <__assert_fail@plt+0x2b90>
   13ec8:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ecc:	b	14048 <__assert_fail@plt+0x2b20>
   13ed0:	b	13ff0 <__assert_fail@plt+0x2ac8>
   13ed4:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ed8:	b	13f24 <__assert_fail@plt+0x29fc>
   13edc:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ee0:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ee4:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ee8:	b	140d0 <__assert_fail@plt+0x2ba8>
   13eec:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ef0:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ef4:	b	140d0 <__assert_fail@plt+0x2ba8>
   13ef8:	b	140d0 <__assert_fail@plt+0x2ba8>
   13efc:	b	13ff0 <__assert_fail@plt+0x2ac8>
   13f00:	b	140d0 <__assert_fail@plt+0x2ba8>
   13f04:	b	140d0 <__assert_fail@plt+0x2ba8>
   13f08:	b	140d0 <__assert_fail@plt+0x2ba8>
   13f0c:	b	140d0 <__assert_fail@plt+0x2ba8>
   13f10:	b	140d0 <__assert_fail@plt+0x2ba8>
   13f14:	b	13ff0 <__assert_fail@plt+0x2ac8>
   13f18:	b	140d0 <__assert_fail@plt+0x2ba8>
   13f1c:	b	140d0 <__assert_fail@plt+0x2ba8>
   13f20:	b	13ff0 <__assert_fail@plt+0x2ac8>
   13f24:	ldrb	r3, [r6, #1]
   13f28:	cmp	r3, #70	; 0x46
   13f2c:	beq	144ac <__assert_fail@plt+0x2f84>
   13f30:	cmp	r3, #76	; 0x4c
   13f34:	beq	14498 <__assert_fail@plt+0x2f70>
   13f38:	cmp	r3, #68	; 0x44
   13f3c:	beq	143c8 <__assert_fail@plt+0x2ea0>
   13f40:	sub	r3, r3, #48	; 0x30
   13f44:	add	r0, r6, #1
   13f48:	cmp	r3, #9
   13f4c:	bhi	145f8 <__assert_fail@plt+0x30d0>
   13f50:	add	r2, r6, #2
   13f54:	mov	r9, #0
   13f58:	b	13f6c <__assert_fail@plt+0x2a44>
   13f5c:	mvn	r1, r3
   13f60:	umull	lr, r1, fp, r1
   13f64:	cmp	r9, r1, lsr #3
   13f68:	bhi	144c0 <__assert_fail@plt+0x2f98>
   13f6c:	ldrb	r1, [r2]
   13f70:	add	r9, r9, r9, lsl #2
   13f74:	mov	r4, r2
   13f78:	add	r2, r2, #1
   13f7c:	add	r9, r3, r9, lsl #1
   13f80:	sub	r3, r1, #48	; 0x30
   13f84:	cmp	r3, #9
   13f88:	bls	13f5c <__assert_fail@plt+0x2a34>
   13f8c:	cmp	r0, r4
   13f90:	beq	14628 <__assert_fail@plt+0x3100>
   13f94:	cmp	r9, #8
   13f98:	bhi	13fb4 <__assert_fail@plt+0x2a8c>
   13f9c:	ldr	r3, [pc, #1876]	; 146f8 <__assert_fail@plt+0x31d0>
   13fa0:	add	r3, pc, r3
   13fa4:	add	r3, r3, r9, lsl #2
   13fa8:	ldr	sl, [r3, #68]	; 0x44
   13fac:	cmp	sl, #0
   13fb0:	bne	143d8 <__assert_fail@plt+0x2eb0>
   13fb4:	ldr	r1, [pc, #1856]	; 146fc <__assert_fail@plt+0x31d4>
   13fb8:	mov	r0, #0
   13fbc:	add	r1, pc, r1
   13fc0:	mov	r2, #5
   13fc4:	bl	112a0 <dcgettext@plt>
   13fc8:	mov	r4, r0
   13fcc:	ldr	r0, [sp, #12]
   13fd0:	bl	17500 <close_stdout@@Base+0x1e80>
   13fd4:	mov	r2, r4
   13fd8:	str	r9, [sp]
   13fdc:	mov	r3, r0
   13fe0:	mov	r0, #0
   13fe4:	mov	r1, r0
   13fe8:	bl	11330 <error@plt>
   13fec:	b	1410c <__assert_fail@plt+0x2be4>
   13ff0:	ldrb	r3, [r6, #1]
   13ff4:	sub	r1, r3, #67	; 0x43
   13ff8:	cmp	r1, #16
   13ffc:	addls	pc, pc, r1, lsl #2
   14000:	b	14410 <__assert_fail@plt+0x2ee8>
   14004:	b	141c4 <__assert_fail@plt+0x2c9c>
   14008:	b	14410 <__assert_fail@plt+0x2ee8>
   1400c:	b	14410 <__assert_fail@plt+0x2ee8>
   14010:	b	14410 <__assert_fail@plt+0x2ee8>
   14014:	b	14410 <__assert_fail@plt+0x2ee8>
   14018:	b	14410 <__assert_fail@plt+0x2ee8>
   1401c:	b	141e0 <__assert_fail@plt+0x2cb8>
   14020:	b	14410 <__assert_fail@plt+0x2ee8>
   14024:	b	14410 <__assert_fail@plt+0x2ee8>
   14028:	b	141a8 <__assert_fail@plt+0x2c80>
   1402c:	b	14410 <__assert_fail@plt+0x2ee8>
   14030:	b	14410 <__assert_fail@plt+0x2ee8>
   14034:	b	14410 <__assert_fail@plt+0x2ee8>
   14038:	b	14410 <__assert_fail@plt+0x2ee8>
   1403c:	b	14410 <__assert_fail@plt+0x2ee8>
   14040:	b	14410 <__assert_fail@plt+0x2ee8>
   14044:	b	1412c <__assert_fail@plt+0x2c04>
   14048:	ldr	r3, [sp, #20]
   1404c:	add	r4, r6, #1
   14050:	mov	r9, #3
   14054:	mov	sl, #6
   14058:	mov	r2, #1
   1405c:	str	r2, [r5, #4]
   14060:	str	sl, [r5]
   14064:	str	r3, [r5, #8]
   14068:	str	r9, [r5, #24]
   1406c:	ldrb	r3, [r4]
   14070:	subs	r2, r3, #122	; 0x7a
   14074:	rsbs	r3, r2, #0
   14078:	adcs	r3, r3, r2
   1407c:	strb	r3, [r5, #21]
   14080:	cmp	r3, #0
   14084:	addne	r4, r4, #1
   14088:	cmp	r6, r4
   1408c:	beq	14674 <__assert_fail@plt+0x314c>
   14090:	ldr	r3, [pc, #1640]	; 14700 <__assert_fail@plt+0x31d8>
   14094:	ldrb	r1, [r4]
   14098:	add	r3, pc, r3
   1409c:	cmp	r1, #0
   140a0:	ldr	r2, [r3]
   140a4:	add	r2, r2, #1
   140a8:	str	r2, [r3]
   140ac:	beq	145cc <__assert_fail@plt+0x30a4>
   140b0:	mov	r6, r4
   140b4:	b	13e5c <__assert_fail@plt+0x2934>
   140b8:	add	r4, r6, #1
   140bc:	mov	r9, #3
   140c0:	ldr	r3, [sp, #24]
   140c4:	mov	sl, #5
   140c8:	mov	r2, #1
   140cc:	b	1405c <__assert_fail@plt+0x2b34>
   140d0:	ldr	r1, [pc, #1580]	; 14704 <__assert_fail@plt+0x31dc>
   140d4:	mov	r2, #5
   140d8:	mov	r0, #0
   140dc:	add	r1, pc, r1
   140e0:	bl	112a0 <dcgettext@plt>
   140e4:	ldrb	r4, [r6]
   140e8:	mov	r5, r0
   140ec:	ldr	r0, [sp, #12]
   140f0:	bl	17500 <close_stdout@@Base+0x1e80>
   140f4:	mov	r2, r5
   140f8:	mov	r3, r4
   140fc:	str	r0, [sp]
   14100:	mov	r0, #0
   14104:	mov	r1, r0
   14108:	bl	11330 <error@plt>
   1410c:	mov	r0, #0
   14110:	add	sp, sp, #36	; 0x24
   14114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14118:	cmp	r3, #0
   1411c:	moveq	r1, #64	; 0x40
   14120:	moveq	r3, #2
   14124:	beq	13e94 <__assert_fail@plt+0x296c>
   14128:	b	13e90 <__assert_fail@plt+0x2968>
   1412c:	ldr	r3, [pc, #1492]	; 14708 <__assert_fail@plt+0x31e0>
   14130:	add	r4, r6, #2
   14134:	mov	r9, #2
   14138:	add	r3, pc, r3
   1413c:	ldr	r3, [r3, #40]	; 0x28
   14140:	str	r3, [sp, #16]
   14144:	sub	r2, r2, #100	; 0x64
   14148:	cmp	r2, #20
   1414c:	addls	pc, pc, r2, lsl #2
   14150:	b	1440c <__assert_fail@plt+0x2ee4>
   14154:	b	14330 <__assert_fail@plt+0x2e08>
   14158:	b	1440c <__assert_fail@plt+0x2ee4>
   1415c:	b	1440c <__assert_fail@plt+0x2ee4>
   14160:	b	1440c <__assert_fail@plt+0x2ee4>
   14164:	b	1440c <__assert_fail@plt+0x2ee4>
   14168:	b	1440c <__assert_fail@plt+0x2ee4>
   1416c:	b	1440c <__assert_fail@plt+0x2ee4>
   14170:	b	1440c <__assert_fail@plt+0x2ee4>
   14174:	b	1440c <__assert_fail@plt+0x2ee4>
   14178:	b	1440c <__assert_fail@plt+0x2ee4>
   1417c:	b	1440c <__assert_fail@plt+0x2ee4>
   14180:	b	142c8 <__assert_fail@plt+0x2da0>
   14184:	b	1440c <__assert_fail@plt+0x2ee4>
   14188:	b	1440c <__assert_fail@plt+0x2ee4>
   1418c:	b	1440c <__assert_fail@plt+0x2ee4>
   14190:	b	1440c <__assert_fail@plt+0x2ee4>
   14194:	b	1440c <__assert_fail@plt+0x2ee4>
   14198:	b	14264 <__assert_fail@plt+0x2d3c>
   1419c:	b	1440c <__assert_fail@plt+0x2ee4>
   141a0:	b	1440c <__assert_fail@plt+0x2ee4>
   141a4:	b	141fc <__assert_fail@plt+0x2cd4>
   141a8:	ldr	r3, [pc, #1372]	; 1470c <__assert_fail@plt+0x31e4>
   141ac:	add	r4, r6, #2
   141b0:	mov	r9, #4
   141b4:	add	r3, pc, r3
   141b8:	ldr	r3, [r3, #48]	; 0x30
   141bc:	str	r3, [sp, #16]
   141c0:	b	14144 <__assert_fail@plt+0x2c1c>
   141c4:	ldr	r3, [pc, #1348]	; 14710 <__assert_fail@plt+0x31e8>
   141c8:	add	r4, r6, #2
   141cc:	mov	r9, #1
   141d0:	add	r3, pc, r3
   141d4:	ldr	r3, [r3, #36]	; 0x24
   141d8:	str	r3, [sp, #16]
   141dc:	b	14144 <__assert_fail@plt+0x2c1c>
   141e0:	ldr	r3, [pc, #1324]	; 14714 <__assert_fail@plt+0x31ec>
   141e4:	add	r4, r6, #2
   141e8:	mov	r9, #4
   141ec:	add	r3, pc, r3
   141f0:	ldr	r3, [r3, #48]	; 0x30
   141f4:	str	r3, [sp, #16]
   141f8:	b	14144 <__assert_fail@plt+0x2c1c>
   141fc:	ldr	r3, [pc, #1300]	; 14718 <__assert_fail@plt+0x31f0>
   14200:	ldr	ip, [sp, #16]
   14204:	add	r3, pc, r3
   14208:	cmp	ip, #5
   1420c:	add	r9, r3, r9, lsl #2
   14210:	add	ip, r5, #12
   14214:	ldr	r9, [r9, #416]	; 0x1a0
   14218:	beq	145a8 <__assert_fail@plt+0x3080>
   1421c:	ldr	lr, [sp, #16]
   14220:	ldr	r3, [pc, #1268]	; 1471c <__assert_fail@plt+0x31f4>
   14224:	cmp	lr, #4
   14228:	add	r3, pc, r3
   1422c:	ldrne	r3, [pc, #1260]	; 14720 <__assert_fail@plt+0x31f8>
   14230:	addne	r3, pc, r3
   14234:	str	r3, [sp, #4]
   14238:	mov	r0, ip
   1423c:	ldr	r3, [pc, #1248]	; 14724 <__assert_fail@plt+0x31fc>
   14240:	mov	r1, #1
   14244:	str	r9, [sp]
   14248:	mov	r2, #9
   1424c:	add	r3, pc, r3
   14250:	str	ip, [sp, #8]
   14254:	mov	sl, #3
   14258:	bl	113f0 <__sprintf_chk@plt>
   1425c:	ldr	ip, [sp, #8]
   14260:	b	14390 <__assert_fail@plt+0x2e68>
   14264:	ldr	r3, [pc, #1212]	; 14728 <__assert_fail@plt+0x3200>
   14268:	ldr	ip, [sp, #16]
   1426c:	add	r3, pc, r3
   14270:	cmp	ip, #5
   14274:	add	r9, r3, r9, lsl #2
   14278:	add	ip, r5, #12
   1427c:	ldr	r9, [r9, #348]	; 0x15c
   14280:	beq	1459c <__assert_fail@plt+0x3074>
   14284:	ldr	lr, [sp, #16]
   14288:	ldr	r3, [pc, #1180]	; 1472c <__assert_fail@plt+0x3204>
   1428c:	cmp	lr, #4
   14290:	add	r3, pc, r3
   14294:	ldrne	r3, [pc, #1172]	; 14730 <__assert_fail@plt+0x3208>
   14298:	addne	r3, pc, r3
   1429c:	str	r3, [sp]
   142a0:	mov	r0, ip
   142a4:	ldr	r3, [pc, #1160]	; 14734 <__assert_fail@plt+0x320c>
   142a8:	mov	r1, #1
   142ac:	mov	r2, #9
   142b0:	str	ip, [sp, #8]
   142b4:	add	r3, pc, r3
   142b8:	mov	sl, r1
   142bc:	bl	113f0 <__sprintf_chk@plt>
   142c0:	ldr	ip, [sp, #8]
   142c4:	b	14390 <__assert_fail@plt+0x2e68>
   142c8:	ldr	r3, [pc, #1128]	; 14738 <__assert_fail@plt+0x3210>
   142cc:	ldr	ip, [sp, #16]
   142d0:	add	r3, pc, r3
   142d4:	cmp	ip, #5
   142d8:	add	r9, r3, r9, lsl #2
   142dc:	add	ip, r5, #12
   142e0:	ldr	r9, [r9, #280]	; 0x118
   142e4:	beq	145b4 <__assert_fail@plt+0x308c>
   142e8:	ldr	lr, [sp, #16]
   142ec:	ldr	r3, [pc, #1096]	; 1473c <__assert_fail@plt+0x3214>
   142f0:	cmp	lr, #4
   142f4:	add	r3, pc, r3
   142f8:	ldrne	r3, [pc, #1088]	; 14740 <__assert_fail@plt+0x3218>
   142fc:	addne	r3, pc, r3
   14300:	str	r3, [sp, #4]
   14304:	mov	r0, ip
   14308:	ldr	r3, [pc, #1076]	; 14744 <__assert_fail@plt+0x321c>
   1430c:	mov	r1, #1
   14310:	str	r9, [sp]
   14314:	mov	r2, #9
   14318:	add	r3, pc, r3
   1431c:	str	ip, [sp, #8]
   14320:	mov	sl, #2
   14324:	bl	113f0 <__sprintf_chk@plt>
   14328:	ldr	ip, [sp, #8]
   1432c:	b	14390 <__assert_fail@plt+0x2e68>
   14330:	ldr	r3, [pc, #1040]	; 14748 <__assert_fail@plt+0x3220>
   14334:	ldr	ip, [sp, #16]
   14338:	add	r3, pc, r3
   1433c:	cmp	ip, #5
   14340:	add	r9, r3, r9, lsl #2
   14344:	add	ip, r5, #12
   14348:	ldr	r9, [r9, #212]	; 0xd4
   1434c:	beq	145c0 <__assert_fail@plt+0x3098>
   14350:	ldr	lr, [sp, #16]
   14354:	ldr	r3, [pc, #1008]	; 1474c <__assert_fail@plt+0x3224>
   14358:	cmp	lr, #4
   1435c:	add	r3, pc, r3
   14360:	ldrne	r3, [pc, #1000]	; 14750 <__assert_fail@plt+0x3228>
   14364:	addne	r3, pc, r3
   14368:	str	r3, [sp]
   1436c:	mov	r0, ip
   14370:	ldr	r3, [pc, #988]	; 14754 <__assert_fail@plt+0x322c>
   14374:	mov	r1, #1
   14378:	mov	r2, #9
   1437c:	str	ip, [sp, #8]
   14380:	add	r3, pc, r3
   14384:	mov	sl, #0
   14388:	bl	113f0 <__sprintf_chk@plt>
   1438c:	ldr	ip, [sp, #8]
   14390:	mov	r0, ip
   14394:	bl	113c0 <strlen@plt>
   14398:	cmp	r0, #8
   1439c:	bhi	1469c <__assert_fail@plt+0x3174>
   143a0:	ldr	ip, [sp, #16]
   143a4:	sub	r3, ip, #1
   143a8:	cmp	r3, #4
   143ac:	addls	pc, pc, r3, lsl #2
   143b0:	b	1440c <__assert_fail@plt+0x2ee4>
   143b4:	b	14584 <__assert_fail@plt+0x305c>
   143b8:	b	1456c <__assert_fail@plt+0x3044>
   143bc:	b	1455c <__assert_fail@plt+0x3034>
   143c0:	b	1454c <__assert_fail@plt+0x3024>
   143c4:	b	1453c <__assert_fail@plt+0x3014>
   143c8:	ldr	r3, [pc, #904]	; 14758 <__assert_fail@plt+0x3230>
   143cc:	add	r4, r6, #2
   143d0:	add	r3, pc, r3
   143d4:	ldr	sl, [r3, #100]	; 0x64
   143d8:	bl	114c8 <localeconv@plt>
   143dc:	ldr	r0, [r0]
   143e0:	ldrb	r3, [r0]
   143e4:	cmp	r3, #0
   143e8:	moveq	r0, #1
   143ec:	beq	143f4 <__assert_fail@plt+0x2ecc>
   143f0:	bl	113c0 <strlen@plt>
   143f4:	cmp	sl, #7
   143f8:	beq	144f8 <__assert_fail@plt+0x2fd0>
   143fc:	cmp	sl, #8
   14400:	beq	14524 <__assert_fail@plt+0x2ffc>
   14404:	cmp	sl, #6
   14408:	beq	1450c <__assert_fail@plt+0x2fe4>
   1440c:	bl	11504 <abort@plt>
   14410:	sub	r3, r3, #48	; 0x30
   14414:	add	r0, r6, #1
   14418:	cmp	r3, #9
   1441c:	bhi	1460c <__assert_fail@plt+0x30e4>
   14420:	add	r1, r6, #2
   14424:	mov	r9, #0
   14428:	b	1443c <__assert_fail@plt+0x2f14>
   1442c:	mvn	ip, r3
   14430:	umull	lr, ip, fp, ip
   14434:	cmp	r9, ip, lsr #3
   14438:	bhi	144c0 <__assert_fail@plt+0x2f98>
   1443c:	ldrb	ip, [r1]
   14440:	add	r9, r9, r9, lsl #2
   14444:	mov	r4, r1
   14448:	add	r1, r1, #1
   1444c:	add	r9, r3, r9, lsl #1
   14450:	sub	r3, ip, #48	; 0x30
   14454:	cmp	r3, #9
   14458:	bls	1442c <__assert_fail@plt+0x2f04>
   1445c:	cmp	r0, r4
   14460:	beq	14638 <__assert_fail@plt+0x3110>
   14464:	cmp	r9, #8
   14468:	bhi	14488 <__assert_fail@plt+0x2f60>
   1446c:	ldr	r3, [pc, #744]	; 1475c <__assert_fail@plt+0x3234>
   14470:	add	r3, pc, r3
   14474:	add	r3, r3, r9, lsl #2
   14478:	ldr	r3, [r3, #32]
   1447c:	cmp	r3, #0
   14480:	str	r3, [sp, #16]
   14484:	bne	14144 <__assert_fail@plt+0x2c1c>
   14488:	ldr	r1, [pc, #720]	; 14760 <__assert_fail@plt+0x3238>
   1448c:	mov	r0, #0
   14490:	add	r1, pc, r1
   14494:	b	13fc0 <__assert_fail@plt+0x2a98>
   14498:	ldr	r3, [pc, #708]	; 14764 <__assert_fail@plt+0x323c>
   1449c:	add	r4, r6, #2
   144a0:	add	r3, pc, r3
   144a4:	ldr	sl, [r3, #100]	; 0x64
   144a8:	b	143d8 <__assert_fail@plt+0x2eb0>
   144ac:	ldr	r3, [pc, #692]	; 14768 <__assert_fail@plt+0x3240>
   144b0:	add	r4, r6, #2
   144b4:	add	r3, pc, r3
   144b8:	ldr	sl, [r3, #84]	; 0x54
   144bc:	b	143d8 <__assert_fail@plt+0x2eb0>
   144c0:	ldr	r1, [pc, #676]	; 1476c <__assert_fail@plt+0x3244>
   144c4:	mov	r2, #5
   144c8:	mov	r0, #0
   144cc:	add	r1, pc, r1
   144d0:	bl	112a0 <dcgettext@plt>
   144d4:	mov	r4, r0
   144d8:	ldr	r0, [sp, #12]
   144dc:	bl	17500 <close_stdout@@Base+0x1e80>
   144e0:	mov	r2, r4
   144e4:	mov	r3, r0
   144e8:	mov	r0, #0
   144ec:	mov	r1, r0
   144f0:	bl	11330 <error@plt>
   144f4:	b	1410c <__assert_fail@plt+0x2be4>
   144f8:	mov	r2, sl
   144fc:	add	r9, r0, #23
   14500:	ldr	r3, [sp, #28]
   14504:	mov	sl, #4
   14508:	b	1405c <__assert_fail@plt+0x2b34>
   1450c:	ldr	r3, [pc, #604]	; 14770 <__assert_fail@plt+0x3248>
   14510:	mov	r2, sl
   14514:	add	r9, r0, #14
   14518:	mov	sl, #4
   1451c:	add	r3, pc, r3
   14520:	b	1405c <__assert_fail@plt+0x2b34>
   14524:	ldr	r3, [pc, #584]	; 14774 <__assert_fail@plt+0x324c>
   14528:	mov	r2, sl
   1452c:	add	r9, r0, #23
   14530:	mov	sl, #4
   14534:	add	r3, pc, r3
   14538:	b	1405c <__assert_fail@plt+0x2b34>
   1453c:	ldr	r3, [pc, #564]	; 14778 <__assert_fail@plt+0x3250>
   14540:	mov	r2, #5
   14544:	add	r3, pc, r3
   14548:	b	1405c <__assert_fail@plt+0x2b34>
   1454c:	ldr	r3, [pc, #552]	; 1477c <__assert_fail@plt+0x3254>
   14550:	mov	r2, #4
   14554:	add	r3, pc, r3
   14558:	b	1405c <__assert_fail@plt+0x2b34>
   1455c:	ldr	r3, [pc, #540]	; 14780 <__assert_fail@plt+0x3258>
   14560:	mov	r2, #3
   14564:	add	r3, pc, r3
   14568:	b	1405c <__assert_fail@plt+0x2b34>
   1456c:	cmp	sl, #0
   14570:	bne	145d8 <__assert_fail@plt+0x30b0>
   14574:	ldr	r3, [pc, #520]	; 14784 <__assert_fail@plt+0x325c>
   14578:	mov	r2, #2
   1457c:	add	r3, pc, r3
   14580:	b	1405c <__assert_fail@plt+0x2b34>
   14584:	cmp	sl, #0
   14588:	bne	145e8 <__assert_fail@plt+0x30c0>
   1458c:	ldr	r3, [pc, #500]	; 14788 <__assert_fail@plt+0x3260>
   14590:	mov	r2, #1
   14594:	add	r3, pc, r3
   14598:	b	1405c <__assert_fail@plt+0x2b34>
   1459c:	ldr	r3, [pc, #488]	; 1478c <__assert_fail@plt+0x3264>
   145a0:	add	r3, pc, r3
   145a4:	b	1429c <__assert_fail@plt+0x2d74>
   145a8:	ldr	r3, [pc, #480]	; 14790 <__assert_fail@plt+0x3268>
   145ac:	add	r3, pc, r3
   145b0:	b	14234 <__assert_fail@plt+0x2d0c>
   145b4:	ldr	r3, [pc, #472]	; 14794 <__assert_fail@plt+0x326c>
   145b8:	add	r3, pc, r3
   145bc:	b	14300 <__assert_fail@plt+0x2dd8>
   145c0:	ldr	r3, [pc, #464]	; 14798 <__assert_fail@plt+0x3270>
   145c4:	add	r3, pc, r3
   145c8:	b	14368 <__assert_fail@plt+0x2e40>
   145cc:	mov	r0, #1
   145d0:	add	sp, sp, #36	; 0x24
   145d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145d8:	ldr	r3, [pc, #444]	; 1479c <__assert_fail@plt+0x3274>
   145dc:	mov	r2, #2
   145e0:	add	r3, pc, r3
   145e4:	b	1405c <__assert_fail@plt+0x2b34>
   145e8:	ldr	r3, [pc, #432]	; 147a0 <__assert_fail@plt+0x3278>
   145ec:	mov	r2, #1
   145f0:	add	r3, pc, r3
   145f4:	b	1405c <__assert_fail@plt+0x2b34>
   145f8:	ldr	r3, [pc, #420]	; 147a4 <__assert_fail@plt+0x327c>
   145fc:	mov	r4, r0
   14600:	add	r3, pc, r3
   14604:	ldr	sl, [r3, #100]	; 0x64
   14608:	b	143d8 <__assert_fail@plt+0x2eb0>
   1460c:	ldr	r3, [pc, #404]	; 147a8 <__assert_fail@plt+0x3280>
   14610:	mov	r4, r0
   14614:	mov	r9, #4
   14618:	add	r3, pc, r3
   1461c:	ldr	r3, [r3, #48]	; 0x30
   14620:	str	r3, [sp, #16]
   14624:	b	14144 <__assert_fail@plt+0x2c1c>
   14628:	ldr	r3, [pc, #380]	; 147ac <__assert_fail@plt+0x3284>
   1462c:	add	r3, pc, r3
   14630:	ldr	sl, [r3, #100]	; 0x64
   14634:	b	143d8 <__assert_fail@plt+0x2eb0>
   14638:	ldr	r3, [pc, #368]	; 147b0 <__assert_fail@plt+0x3288>
   1463c:	mov	r9, #4
   14640:	add	r3, pc, r3
   14644:	ldr	r3, [r3, #48]	; 0x30
   14648:	str	r3, [sp, #16]
   1464c:	b	14144 <__assert_fail@plt+0x2c1c>
   14650:	ldr	r3, [pc, #348]	; 147b4 <__assert_fail@plt+0x328c>
   14654:	movw	r2, #601	; 0x259
   14658:	ldr	r0, [pc, #344]	; 147b8 <__assert_fail@plt+0x3290>
   1465c:	ldr	r1, [pc, #344]	; 147bc <__assert_fail@plt+0x3294>
   14660:	add	r3, pc, r3
   14664:	add	r0, pc, r0
   14668:	add	r3, r3, #192	; 0xc0
   1466c:	add	r1, pc, r1
   14670:	bl	11528 <__assert_fail@plt>
   14674:	ldr	r3, [pc, #324]	; 147c0 <__assert_fail@plt+0x3298>
   14678:	mov	r2, #952	; 0x3b8
   1467c:	ldr	r0, [pc, #320]	; 147c4 <__assert_fail@plt+0x329c>
   14680:	ldr	r1, [pc, #320]	; 147c8 <__assert_fail@plt+0x32a0>
   14684:	add	r3, pc, r3
   14688:	add	r0, pc, r0
   1468c:	add	r3, r3, #168	; 0xa8
   14690:	add	r1, pc, r1
   14694:	bl	11528 <__assert_fail@plt>
   14698:	bl	17cc0 <close_stdout@@Base+0x2640>
   1469c:	ldr	r3, [pc, #296]	; 147cc <__assert_fail@plt+0x32a4>
   146a0:	mov	r2, #700	; 0x2bc
   146a4:	ldr	r0, [pc, #292]	; 147d0 <__assert_fail@plt+0x32a8>
   146a8:	ldr	r1, [pc, #292]	; 147d4 <__assert_fail@plt+0x32ac>
   146ac:	add	r3, pc, r3
   146b0:	add	r0, pc, r0
   146b4:	add	r3, r3, #192	; 0xc0
   146b8:	add	r1, pc, r1
   146bc:	bl	11528 <__assert_fail@plt>
   146c0:	ldr	r3, [pc, #272]	; 147d8 <__assert_fail@plt+0x32b0>
   146c4:	mov	r2, #940	; 0x3ac
   146c8:	ldr	r0, [pc, #268]	; 147dc <__assert_fail@plt+0x32b4>
   146cc:	ldr	r1, [pc, #268]	; 147e0 <__assert_fail@plt+0x32b8>
   146d0:	add	r3, pc, r3
   146d4:	add	r0, pc, r0
   146d8:	add	r3, r3, #168	; 0xa8
   146dc:	add	r1, pc, r1
   146e0:	bl	11528 <__assert_fail@plt>
   146e4:	muleq	r1, r0, r3
   146e8:	andeq	r0, r0, ip, lsr #19
   146ec:	andeq	sl, r1, ip, ror r3
   146f0:			; <UNDEFINED> instruction: 0xfffff4e0
   146f4:			; <UNDEFINED> instruction: 0xfffffd1c
   146f8:	andeq	sl, r1, r8, lsl r2
   146fc:	muleq	r0, r8, ip
   14700:	andeq	sl, r1, r0, lsr #2
   14704:	andeq	r7, r0, ip, asr #23
   14708:	andeq	sl, r1, r0, lsl #1
   1470c:	andeq	sl, r1, r4
   14710:	andeq	r9, r1, r8, ror #31
   14714:	andeq	r9, r1, ip, asr #31
   14718:	andeq	r7, r0, ip, ror #13
   1471c:	andeq	r7, r0, r8, asr r9
   14720:	andeq	r8, r0, r0, ror #21
   14724:	andeq	r7, r0, r8, asr #19
   14728:	andeq	r7, r0, r4, lsl #13
   1472c:	andeq	r7, r0, r8, ror #17
   14730:	ldrdeq	r7, [r0], -ip
   14734:	andeq	r7, r0, r8, asr r9
   14738:	andeq	r7, r0, r0, lsr #12
   1473c:	andeq	r7, r0, r8, ror r8
   14740:	andeq	r7, r0, ip, ror #16
   14744:	strdeq	r7, [r0], -ip
   14748:			; <UNDEFINED> instruction: 0x000075b8
   1474c:	andeq	r7, r0, r4, lsl #16
   14750:	strdeq	r7, [r0], -r8
   14754:	andeq	r7, r0, ip, lsl #17
   14758:	andeq	r9, r1, r8, ror #27
   1475c:	andeq	r9, r1, r8, asr #26
   14760:	andeq	r7, r0, ip, lsr #14
   14764:	andeq	r9, r1, r8, lsl sp
   14768:	andeq	r9, r1, r4, lsl #26
   1476c:	andeq	r7, r0, r4, lsl r8
   14770:			; <UNDEFINED> instruction: 0xfffff794
   14774:			; <UNDEFINED> instruction: 0xfffff4fc
   14778:			; <UNDEFINED> instruction: 0xffffef4c
   1477c:			; <UNDEFINED> instruction: 0xfffff004
   14780:			; <UNDEFINED> instruction: 0xfffff0c0
   14784:			; <UNDEFINED> instruction: 0xfffff240
   14788:			; <UNDEFINED> instruction: 0xfffff3c8
   1478c:	ldrdeq	r7, [r0], -r0
   14790:	ldrdeq	r7, [r0], -r0
   14794:	andeq	r7, r0, ip, lsr #11
   14798:	muleq	r0, r4, r5
   1479c:			; <UNDEFINED> instruction: 0xfffff110
   147a0:			; <UNDEFINED> instruction: 0xfffff298
   147a4:			; <UNDEFINED> instruction: 0x00019bb8
   147a8:	andeq	r9, r1, r0, lsr #23
   147ac:	andeq	r9, r1, ip, lsl #23
   147b0:	andeq	r9, r1, r8, ror fp
   147b4:	muleq	r0, r0, r2
   147b8:	andeq	r7, r0, r0, asr #10
   147bc:	andeq	r7, r0, ip, lsr #10
   147c0:	andeq	r7, r0, ip, ror #4
   147c4:	andeq	r7, r0, ip, asr #12
   147c8:	andeq	r7, r0, r8, lsl #10
   147cc:	andeq	r7, r0, r4, asr #4
   147d0:	andeq	r7, r0, r0, ror r5
   147d4:	andeq	r7, r0, r0, ror #9
   147d8:	andeq	r7, r0, r0, lsr #4
   147dc:			; <UNDEFINED> instruction: 0x000074b0
   147e0:			; <UNDEFINED> instruction: 0x000074bc
   147e4:	ldr	r3, [pc, #556]	; 14a18 <__assert_fail@plt+0x34f0>
   147e8:	ldr	ip, [pc, #556]	; 14a1c <__assert_fail@plt+0x34f4>
   147ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147f0:	add	r3, pc, r3
   147f4:	sub	sp, sp, #84	; 0x54
   147f8:	mov	r4, r0
   147fc:	mov	r5, #0
   14800:	mov	r6, r1
   14804:	mov	r7, #0
   14808:	strd	r4, [sp, #16]
   1480c:	strd	r6, [sp, #24]
   14810:	cmp	r5, r7
   14814:	cmpeq	r4, r6
   14818:	ldr	ip, [r3, ip]
   1481c:	ldr	sl, [sp, #120]	; 0x78
   14820:	ldr	r9, [sp, #124]	; 0x7c
   14824:	ldr	r3, [ip]
   14828:	str	ip, [sp, #44]	; 0x2c
   1482c:	str	r3, [sp, #76]	; 0x4c
   14830:	bls	149f8 <__assert_fail@plt+0x34d0>
   14834:	mov	r4, r9
   14838:	asr	r5, r9, #31
   1483c:	ldrd	r6, [sp, #16]
   14840:	add	fp, r2, r0
   14844:	strd	r4, [sp, #32]
   14848:	ldr	r1, [sp, #36]	; 0x24
   1484c:	subs	r6, r6, #1
   14850:	ldr	r5, [pc, #456]	; 14a20 <__assert_fail@plt+0x34f8>
   14854:	sbc	r7, r7, #0
   14858:	ldr	r4, [pc, #452]	; 14a24 <__assert_fail@plt+0x34fc>
   1485c:	mul	r3, r6, r1
   14860:	add	r5, pc, r5
   14864:	str	r5, [sp, #48]	; 0x30
   14868:	add	r4, pc, r4
   1486c:	ldr	r5, [pc, #436]	; 14a28 <__assert_fail@plt+0x3500>
   14870:	mla	r3, r9, r7, r3
   14874:	add	r5, pc, r5
   14878:	umull	r6, r7, r6, r9
   1487c:	str	r4, [sp, #64]	; 0x40
   14880:	str	r5, [sp, #68]	; 0x44
   14884:	ldr	r4, [pc, #416]	; 14a2c <__assert_fail@plt+0x3504>
   14888:	add	r7, r3, r7
   1488c:	ldr	r5, [pc, #412]	; 14a30 <__assert_fail@plt+0x3508>
   14890:	add	r4, pc, r4
   14894:	str	r4, [sp, #52]	; 0x34
   14898:	add	r5, pc, r5
   1489c:	str	r5, [sp, #56]	; 0x38
   148a0:	ldrd	r4, [sp, #16]
   148a4:	ldr	r1, [pc, #392]	; 14a34 <__assert_fail@plt+0x350c>
   148a8:	str	sl, [sp, #8]
   148ac:	add	r1, pc, r1
   148b0:	str	fp, [sp, #40]	; 0x28
   148b4:	str	r1, [sp, #60]	; 0x3c
   148b8:	subs	r4, r4, #1
   148bc:	ldrd	r2, [sp, #16]
   148c0:	mov	r0, r6
   148c4:	mov	r1, r7
   148c8:	sbc	r5, r5, #0
   148cc:	bl	1aed4 <close_stdout@@Base+0x5854>
   148d0:	ldr	sl, [sp, #40]	; 0x28
   148d4:	rsb	r3, r4, sl
   148d8:	ldrb	r2, [r3, #-1]
   148dc:	mov	r8, r0
   148e0:	cmp	r2, #13
   148e4:	addls	pc, pc, r2, lsl #2
   148e8:	b	149ac <__assert_fail@plt+0x3484>
   148ec:	b	14964 <__assert_fail@plt+0x343c>
   148f0:	b	149ac <__assert_fail@plt+0x3484>
   148f4:	b	149ac <__assert_fail@plt+0x3484>
   148f8:	b	149ac <__assert_fail@plt+0x3484>
   148fc:	b	149ac <__assert_fail@plt+0x3484>
   14900:	b	149ac <__assert_fail@plt+0x3484>
   14904:	b	149ac <__assert_fail@plt+0x3484>
   14908:	b	14924 <__assert_fail@plt+0x33fc>
   1490c:	b	149a0 <__assert_fail@plt+0x3478>
   14910:	b	14998 <__assert_fail@plt+0x3470>
   14914:	b	1498c <__assert_fail@plt+0x3464>
   14918:	b	14984 <__assert_fail@plt+0x345c>
   1491c:	b	14978 <__assert_fail@plt+0x3450>
   14920:	b	14970 <__assert_fail@plt+0x3448>
   14924:	ldr	r2, [sp, #48]	; 0x30
   14928:	ldr	sl, [sp, #8]
   1492c:	rsb	r1, r8, r9
   14930:	ldr	r0, [pc, #256]	; 14a38 <__assert_fail@plt+0x3510>
   14934:	add	r1, r1, sl
   14938:	ldrd	sl, [sp, #32]
   1493c:	add	r0, pc, r0
   14940:	subs	r6, r6, sl
   14944:	sbc	r7, r7, fp
   14948:	bl	17d9c <close_stdout@@Base+0x271c>
   1494c:	ldrd	sl, [sp, #24]
   14950:	cmp	r5, fp
   14954:	cmpeq	r4, sl
   14958:	bls	149f8 <__assert_fail@plt+0x34d0>
   1495c:	mov	r9, r8
   14960:	b	148b8 <__assert_fail@plt+0x3390>
   14964:	ldr	r2, [pc, #208]	; 14a3c <__assert_fail@plt+0x3514>
   14968:	add	r2, pc, r2
   1496c:	b	14928 <__assert_fail@plt+0x3400>
   14970:	ldr	r2, [sp, #60]	; 0x3c
   14974:	b	14928 <__assert_fail@plt+0x3400>
   14978:	ldr	r2, [pc, #192]	; 14a40 <__assert_fail@plt+0x3518>
   1497c:	add	r2, pc, r2
   14980:	b	14928 <__assert_fail@plt+0x3400>
   14984:	ldr	r2, [sp, #52]	; 0x34
   14988:	b	14928 <__assert_fail@plt+0x3400>
   1498c:	ldr	r2, [pc, #176]	; 14a44 <__assert_fail@plt+0x351c>
   14990:	add	r2, pc, r2
   14994:	b	14928 <__assert_fail@plt+0x3400>
   14998:	ldr	r2, [sp, #56]	; 0x38
   1499c:	b	14928 <__assert_fail@plt+0x3400>
   149a0:	ldr	r2, [pc, #160]	; 14a48 <__assert_fail@plt+0x3520>
   149a4:	add	r2, pc, r2
   149a8:	b	14928 <__assert_fail@plt+0x3400>
   149ac:	str	r2, [sp, #12]
   149b0:	bl	113a8 <__ctype_b_loc@plt>
   149b4:	ldr	r2, [sp, #12]
   149b8:	add	ip, sp, #72	; 0x48
   149bc:	lsl	r3, r2, #1
   149c0:	ldr	r1, [r0]
   149c4:	mov	r0, ip
   149c8:	ldrh	r3, [r1, r3]
   149cc:	mov	r1, #1
   149d0:	str	r2, [sp]
   149d4:	mov	r2, #4
   149d8:	tst	r3, #16384	; 0x4000
   149dc:	str	ip, [sp, #12]
   149e0:	ldrne	r3, [sp, #68]	; 0x44
   149e4:	ldreq	r3, [sp, #64]	; 0x40
   149e8:	bl	113f0 <__sprintf_chk@plt>
   149ec:	ldr	ip, [sp, #12]
   149f0:	mov	r2, ip
   149f4:	b	14928 <__assert_fail@plt+0x3400>
   149f8:	ldr	fp, [sp, #44]	; 0x2c
   149fc:	ldr	r2, [sp, #76]	; 0x4c
   14a00:	ldr	r3, [fp]
   14a04:	cmp	r2, r3
   14a08:	bne	14a14 <__assert_fail@plt+0x34ec>
   14a0c:	add	sp, sp, #84	; 0x54
   14a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a14:	bl	112ac <__stack_chk_fail@plt>
   14a18:	andeq	r9, r1, r8, lsl #16
   14a1c:	andeq	r0, r0, r8, lsr #2
   14a20:	andeq	r7, r0, r8, lsr #9
   14a24:	muleq	r0, r4, r4
   14a28:	andeq	r7, r0, r4, lsl #9
   14a2c:	muleq	r0, r0, r4
   14a30:	andeq	r7, r0, r4, lsl #9
   14a34:	andeq	r7, r0, ip, ror #8
   14a38:	andeq	r7, r0, r8, lsl r2
   14a3c:	muleq	r0, ip, r3
   14a40:	muleq	r0, r4, r3
   14a44:	andeq	r7, r0, r4, lsl #7
   14a48:	andeq	r7, r0, r8, ror #6
   14a4c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a50:	mov	r9, #1
   14a54:	ldr	r4, [pc, #272]	; 14b6c <__assert_fail@plt+0x3644>
   14a58:	ldr	r8, [pc, #272]	; 14b70 <__assert_fail@plt+0x3648>
   14a5c:	ldr	r7, [pc, #272]	; 14b74 <__assert_fail@plt+0x364c>
   14a60:	add	r4, pc, r4
   14a64:	ldr	sl, [pc, #268]	; 14b78 <__assert_fail@plt+0x3650>
   14a68:	add	r8, pc, r8
   14a6c:	ldr	r5, [pc, #264]	; 14b7c <__assert_fail@plt+0x3654>
   14a70:	add	r7, pc, r7
   14a74:	ldr	r6, [pc, #260]	; 14b80 <__assert_fail@plt+0x3658>
   14a78:	add	sl, pc, sl
   14a7c:	add	r5, pc, r5
   14a80:	add	r6, pc, r6
   14a84:	ldr	r3, [r4, #24]
   14a88:	mov	r1, r5
   14a8c:	mov	r2, #5
   14a90:	add	ip, r3, #4
   14a94:	ldr	r3, [r3]
   14a98:	cmp	r3, #0
   14a9c:	mov	r0, r3
   14aa0:	str	r3, [r4, #20]
   14aa4:	beq	14b30 <__assert_fail@plt+0x3608>
   14aa8:	ldrb	lr, [r3]
   14aac:	str	ip, [r4, #24]
   14ab0:	cmp	lr, #45	; 0x2d
   14ab4:	bne	14af8 <__assert_fail@plt+0x35d0>
   14ab8:	ldrb	r3, [r3, #1]
   14abc:	cmp	r3, #0
   14ac0:	bne	14af8 <__assert_fail@plt+0x35d0>
   14ac4:	mov	r0, r3
   14ac8:	bl	112a0 <dcgettext@plt>
   14acc:	ldr	r2, [pc, #176]	; 14b84 <__assert_fail@plt+0x365c>
   14ad0:	mov	r3, #1
   14ad4:	str	r0, [r4, #20]
   14ad8:	ldr	r2, [r6, r2]
   14adc:	strb	r3, [r4, #104]	; 0x68
   14ae0:	ldr	r3, [r2]
   14ae4:	str	r3, [r4, #16]
   14ae8:	cmp	r3, #0
   14aec:	beq	14a84 <__assert_fail@plt+0x355c>
   14af0:	mov	r0, r3
   14af4:	b	14b10 <__assert_fail@plt+0x35e8>
   14af8:	mov	r1, r8
   14afc:	bl	114d4 <fopen64@plt>
   14b00:	cmp	r0, #0
   14b04:	mov	fp, r0
   14b08:	str	r0, [r7, #16]
   14b0c:	beq	14b38 <__assert_fail@plt+0x3610>
   14b10:	ldr	r3, [pc, #112]	; 14b88 <__assert_fail@plt+0x3660>
   14b14:	add	r3, pc, r3
   14b18:	ldrb	r2, [r3, #105]	; 0x69
   14b1c:	cmp	r2, #0
   14b20:	beq	14b30 <__assert_fail@plt+0x3608>
   14b24:	ldrb	r1, [r3, #106]	; 0x6a
   14b28:	cmp	r1, #0
   14b2c:	beq	14b5c <__assert_fail@plt+0x3634>
   14b30:	mov	r0, r9
   14b34:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b38:	bl	113e4 <__errno_location@plt>
   14b3c:	ldr	r3, [r7, #20]
   14b40:	mov	r2, sl
   14b44:	mov	r9, fp
   14b48:	ldr	r1, [r0]
   14b4c:	mov	r0, fp
   14b50:	bl	11330 <error@plt>
   14b54:	ldr	r3, [r7, #16]
   14b58:	b	14ae8 <__assert_fail@plt+0x35c0>
   14b5c:	mov	r3, r1
   14b60:	mov	r2, #2
   14b64:	bl	11408 <setvbuf@plt>
   14b68:	b	14b30 <__assert_fail@plt+0x3608>
   14b6c:	andeq	r9, r1, r8, asr r7
   14b70:	andeq	r7, r0, ip, asr #5
   14b74:	andeq	r9, r1, r8, asr #14
   14b78:	andeq	r8, r0, r0, lsl #6
   14b7c:	andeq	r7, r0, r8, lsr #5
   14b80:	andeq	r9, r1, r8, ror r5
   14b84:	andeq	r0, r0, r4, asr #2
   14b88:	andeq	r9, r1, r4, lsr #13
   14b8c:	ldr	r3, [pc, #520]	; 14d9c <__assert_fail@plt+0x3874>
   14b90:	ldr	r2, [pc, #520]	; 14da0 <__assert_fail@plt+0x3878>
   14b94:	add	r3, pc, r3
   14b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b9c:	sub	sp, sp, #8320	; 0x2080
   14ba0:	ldr	r2, [r3, r2]
   14ba4:	sub	sp, sp, #4
   14ba8:	mov	r4, r0
   14bac:	mov	r5, r1
   14bb0:	orrs	r1, r4, r5
   14bb4:	ldr	r3, [r2]
   14bb8:	str	r2, [sp, #8]
   14bbc:	add	r2, sp, #8192	; 0x2000
   14bc0:	moveq	r0, #1
   14bc4:	str	r3, [r2, #124]	; 0x7c
   14bc8:	beq	14d48 <__assert_fail@plt+0x3820>
   14bcc:	ldr	r3, [pc, #464]	; 14da4 <__assert_fail@plt+0x387c>
   14bd0:	add	r3, pc, r3
   14bd4:	ldr	fp, [r3, #16]
   14bd8:	cmp	fp, #0
   14bdc:	beq	14d90 <__assert_fail@plt+0x3868>
   14be0:	ldr	sl, [pc, #448]	; 14da8 <__assert_fail@plt+0x3880>
   14be4:	add	r7, sp, #16
   14be8:	ldr	r9, [pc, #444]	; 14dac <__assert_fail@plt+0x3884>
   14bec:	mov	r6, #1
   14bf0:	ldr	r8, [pc, #440]	; 14db0 <__assert_fail@plt+0x3888>
   14bf4:	add	sl, pc, sl
   14bf8:	add	r9, pc, r9
   14bfc:	add	r3, sp, #64	; 0x40
   14c00:	add	r8, pc, r8
   14c04:	str	r3, [sp, #12]
   14c08:	mov	r0, fp
   14c0c:	bl	11450 <fileno@plt>
   14c10:	mov	r2, r7
   14c14:	mov	r1, r0
   14c18:	mov	r0, #3
   14c1c:	bl	112dc <__fxstat64@plt>
   14c20:	cmp	r0, #0
   14c24:	bne	14ca8 <__assert_fail@plt+0x3780>
   14c28:	ldr	r2, [r7, #16]
   14c2c:	and	r2, r2, #61440	; 0xf000
   14c30:	cmp	r2, #32768	; 0x8000
   14c34:	beq	14d10 <__assert_fail@plt+0x37e8>
   14c38:	ldr	sl, [pc, #372]	; 14db4 <__assert_fail@plt+0x388c>
   14c3c:	add	r8, sp, #124	; 0x7c
   14c40:	ldr	r9, [pc, #368]	; 14db8 <__assert_fail@plt+0x3890>
   14c44:	mov	r7, #8192	; 0x2000
   14c48:	add	sl, pc, sl
   14c4c:	add	r9, pc, r9
   14c50:	b	14c8c <__assert_fail@plt+0x3764>
   14c54:	ldr	r3, [r9, #16]
   14c58:	mov	r7, r4
   14c5c:	str	r3, [sp]
   14c60:	mov	r0, r8
   14c64:	mov	r1, #8192	; 0x2000
   14c68:	mov	r2, #1
   14c6c:	mov	r3, r7
   14c70:	bl	114bc <__fread_unlocked_chk@plt>
   14c74:	subs	r4, r4, r0
   14c78:	sbc	r5, r5, #0
   14c7c:	cmp	r7, r0
   14c80:	bne	14d40 <__assert_fail@plt+0x3818>
   14c84:	orrs	r1, r4, r5
   14c88:	beq	14d44 <__assert_fail@plt+0x381c>
   14c8c:	mov	r2, r7
   14c90:	mov	r3, #0
   14c94:	cmp	r3, r5
   14c98:	cmpeq	r2, r4
   14c9c:	bhi	14c54 <__assert_fail@plt+0x372c>
   14ca0:	ldr	r3, [sl, #16]
   14ca4:	b	14c5c <__assert_fail@plt+0x3734>
   14ca8:	bl	113e4 <__errno_location@plt>
   14cac:	mov	r6, #0
   14cb0:	mov	r2, sl
   14cb4:	ldr	r3, [r9, #20]
   14cb8:	ldr	r1, [r0]
   14cbc:	mov	r0, r6
   14cc0:	bl	11330 <error@plt>
   14cc4:	mov	r0, #0
   14cc8:	bl	13134 <__assert_fail@plt+0x1c0c>
   14ccc:	and	r0, r0, r6
   14cd0:	uxtb	r6, r0
   14cd4:	bl	14a4c <__assert_fail@plt+0x3524>
   14cd8:	ldr	fp, [r8, #16]
   14cdc:	cmp	fp, #0
   14ce0:	and	r6, r6, r0
   14ce4:	bne	14c08 <__assert_fail@plt+0x36e0>
   14ce8:	ldr	r1, [pc, #204]	; 14dbc <__assert_fail@plt+0x3894>
   14cec:	mov	r2, #5
   14cf0:	mov	r0, #0
   14cf4:	add	r1, pc, r1
   14cf8:	bl	112a0 <dcgettext@plt>
   14cfc:	mov	r1, #0
   14d00:	mov	r2, r0
   14d04:	mov	r0, #1
   14d08:	bl	11330 <error@plt>
   14d0c:	b	14d44 <__assert_fail@plt+0x381c>
   14d10:	ldrd	r0, [sp, #64]	; 0x40
   14d14:	cmp	r0, #1
   14d18:	sbcs	r2, r1, #0
   14d1c:	blt	14c38 <__assert_fail@plt+0x3710>
   14d20:	cmp	r5, r1
   14d24:	cmpeq	r4, r0
   14d28:	bls	14d6c <__assert_fail@plt+0x3844>
   14d2c:	subs	r4, r4, r0
   14d30:	sbc	r5, r5, r1
   14d34:	orrs	r3, r4, r5
   14d38:	bne	14cc4 <__assert_fail@plt+0x379c>
   14d3c:	b	14d44 <__assert_fail@plt+0x381c>
   14d40:	mov	r6, #0
   14d44:	mov	r0, r6
   14d48:	ldr	r1, [sp, #8]
   14d4c:	add	r3, sp, #8192	; 0x2000
   14d50:	ldr	r2, [r3, #124]	; 0x7c
   14d54:	ldr	r3, [r1]
   14d58:	cmp	r2, r3
   14d5c:	bne	14d98 <__assert_fail@plt+0x3870>
   14d60:	add	sp, sp, #8320	; 0x2080
   14d64:	add	sp, sp, #4
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d6c:	mov	r1, #1
   14d70:	mov	r0, fp
   14d74:	mov	r2, r4
   14d78:	mov	r3, r5
   14d7c:	str	r1, [sp]
   14d80:	bl	1882c <close_stdout@@Base+0x31ac>
   14d84:	cmp	r0, #0
   14d88:	movne	r6, #0
   14d8c:	b	14d44 <__assert_fail@plt+0x381c>
   14d90:	mov	r6, #1
   14d94:	b	14ce8 <__assert_fail@plt+0x37c0>
   14d98:	bl	112ac <__stack_chk_fail@plt>
   14d9c:	andeq	r9, r1, r4, ror #8
   14da0:	andeq	r0, r0, r8, lsr #2
   14da4:	andeq	r9, r1, r8, ror #11
   14da8:	andeq	r8, r0, r4, lsl #3
   14dac:	andeq	r9, r1, r0, asr #11
   14db0:			; <UNDEFINED> instruction: 0x000195b8
   14db4:	andeq	r9, r1, r0, ror r5
   14db8:	andeq	r9, r1, ip, ror #10
   14dbc:	andeq	r7, r0, r4, asr #32
   14dc0:	push	{r3, r4, r5, r6, r7, lr}
   14dc4:	mvn	r2, #0
   14dc8:	ldr	r3, [pc, #112]	; 14e40 <__assert_fail@plt+0x3918>
   14dcc:	mov	r6, r0
   14dd0:	str	r2, [r0]
   14dd4:	add	r3, pc, r3
   14dd8:	ldr	r3, [r3, #16]
   14ddc:	cmp	r3, #0
   14de0:	beq	14e38 <__assert_fail@plt+0x3910>
   14de4:	ldr	r7, [pc, #88]	; 14e44 <__assert_fail@plt+0x391c>
   14de8:	mov	r4, #1
   14dec:	add	r7, pc, r7
   14df0:	b	14e1c <__assert_fail@plt+0x38f4>
   14df4:	bl	113e4 <__errno_location@plt>
   14df8:	ldr	r0, [r0]
   14dfc:	bl	13134 <__assert_fail@plt+0x1c0c>
   14e00:	mov	r5, r0
   14e04:	bl	14a4c <__assert_fail@plt+0x3524>
   14e08:	ldr	r3, [r7, #16]
   14e0c:	cmp	r3, #0
   14e10:	and	r0, r5, r0
   14e14:	and	r4, r4, r0
   14e18:	beq	14e30 <__assert_fail@plt+0x3908>
   14e1c:	mov	r0, r3
   14e20:	bl	1142c <fgetc@plt>
   14e24:	cmn	r0, #1
   14e28:	str	r0, [r6]
   14e2c:	beq	14df4 <__assert_fail@plt+0x38cc>
   14e30:	mov	r0, r4
   14e34:	pop	{r3, r4, r5, r6, r7, pc}
   14e38:	mov	r4, #1
   14e3c:	b	14e30 <__assert_fail@plt+0x3908>
   14e40:	andeq	r9, r1, r4, ror #7
   14e44:	andeq	r9, r1, ip, asr #7
   14e48:	ldr	ip, [pc, #708]	; 15114 <__assert_fail@plt+0x3bec>
   14e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e50:	add	ip, pc, ip
   14e54:	sub	sp, sp, #44	; 0x2c
   14e58:	ldr	r5, [pc, #696]	; 15118 <__assert_fail@plt+0x3bf0>
   14e5c:	strd	r0, [sp, #16]
   14e60:	add	r5, pc, r5
   14e64:	ldrb	r1, [ip]
   14e68:	str	r2, [sp, #12]
   14e6c:	cmp	r1, #0
   14e70:	beq	14e80 <__assert_fail@plt+0x3958>
   14e74:	ldrb	r1, [ip, #1]
   14e78:	cmp	r1, #0
   14e7c:	beq	150a0 <__assert_fail@plt+0x3b78>
   14e80:	ldr	r6, [pc, #660]	; 1511c <__assert_fail@plt+0x3bf4>
   14e84:	mov	r4, #0
   14e88:	add	r6, pc, r6
   14e8c:	ldr	r3, [r6]
   14e90:	strb	r4, [r6, #112]	; 0x70
   14e94:	cmp	r3, r4
   14e98:	beq	150e8 <__assert_fail@plt+0x3bc0>
   14e9c:	ldr	r3, [pc, #636]	; 15120 <__assert_fail@plt+0x3bf8>
   14ea0:	mov	r7, r6
   14ea4:	ldr	r0, [pc, #632]	; 15124 <__assert_fail@plt+0x3bfc>
   14ea8:	ldr	r1, [pc, #632]	; 15128 <__assert_fail@plt+0x3c00>
   14eac:	add	r0, pc, r0
   14eb0:	ldr	r2, [pc, #628]	; 1512c <__assert_fail@plt+0x3c04>
   14eb4:	str	r0, [sp, #24]
   14eb8:	add	r1, pc, r1
   14ebc:	str	r1, [sp, #28]
   14ec0:	add	r2, pc, r2
   14ec4:	ldr	r5, [r5, r3]
   14ec8:	ldr	r3, [pc, #608]	; 15130 <__assert_fail@plt+0x3c08>
   14ecc:	str	r2, [sp, #32]
   14ed0:	add	r3, pc, r3
   14ed4:	str	r3, [sp, #36]	; 0x24
   14ed8:	b	14f6c <__assert_fail@plt+0x3a44>
   14edc:	ldr	r3, [r6, #116]	; 0x74
   14ee0:	mov	r2, r4
   14ee4:	ldrd	r0, [sp, #16]
   14ee8:	blx	r3
   14eec:	ldr	ip, [r7, #4]
   14ef0:	mov	r0, fp
   14ef4:	mov	r1, sl
   14ef8:	ldr	r2, [sp, #80]	; 0x50
   14efc:	add	ip, ip, r9
   14f00:	add	r3, ip, #12
   14f04:	ldr	lr, [ip, #24]
   14f08:	str	lr, [sp]
   14f0c:	ldr	lr, [ip, #28]
   14f10:	str	lr, [sp, #4]
   14f14:	ldr	ip, [ip, #8]
   14f18:	blx	ip
   14f1c:	ldr	r3, [r7, #4]
   14f20:	add	r9, r3, r9
   14f24:	ldrb	r3, [r9, #21]
   14f28:	cmp	r3, #0
   14f2c:	bne	14fcc <__assert_fail@plt+0x3aa4>
   14f30:	ldr	r0, [r5]
   14f34:	ldr	r2, [r0, #24]
   14f38:	ldr	r3, [r0, #20]
   14f3c:	cmp	r3, r2
   14f40:	addcc	r2, r3, #1
   14f44:	strcc	r2, [r0, #20]
   14f48:	movcc	r2, #10
   14f4c:	strbcc	r2, [r3]
   14f50:	bcs	15108 <__assert_fail@plt+0x3be0>
   14f54:	ldr	r3, [pc, #472]	; 15134 <__assert_fail@plt+0x3c0c>
   14f58:	add	r4, r4, #1
   14f5c:	add	r3, pc, r3
   14f60:	ldr	r3, [r3]
   14f64:	cmp	r3, r4
   14f68:	bls	150e8 <__assert_fail@plt+0x3bc0>
   14f6c:	ldr	r3, [r6, #4]
   14f70:	lsl	r9, r4, #5
   14f74:	ldr	r1, [sp, #24]
   14f78:	add	r3, r3, r9
   14f7c:	ldr	sl, [r6, #108]	; 0x6c
   14f80:	ldr	r3, [r3, #4]
   14f84:	mov	r0, sl
   14f88:	ldr	r8, [r1, r3, lsl #2]
   14f8c:	mov	r1, r8
   14f90:	bl	1aa88 <close_stdout@@Base+0x5408>
   14f94:	ldr	r2, [sp, #12]
   14f98:	mov	r1, r8
   14f9c:	mov	fp, r0
   14fa0:	rsb	r0, r2, sl
   14fa4:	bl	1aa88 <close_stdout@@Base+0x5408>
   14fa8:	cmp	r4, #0
   14fac:	mov	sl, r0
   14fb0:	beq	14edc <__assert_fail@plt+0x39b4>
   14fb4:	ldr	r1, [sp, #28]
   14fb8:	mov	r0, #1
   14fbc:	ldr	r2, [r6, #8]
   14fc0:	ldr	r3, [sp, #32]
   14fc4:	bl	11438 <__printf_chk@plt>
   14fc8:	b	14eec <__assert_fail@plt+0x39c4>
   14fcc:	ldr	r0, [r9, #28]
   14fd0:	mov	r1, fp
   14fd4:	ldr	r3, [r9, #24]
   14fd8:	mul	r0, r0, sl
   14fdc:	mul	sl, r3, sl
   14fe0:	bl	1ac94 <close_stdout@@Base+0x5614>
   14fe4:	ldr	r3, [pc, #332]	; 15138 <__assert_fail@plt+0x3c10>
   14fe8:	ldr	r1, [sp, #36]	; 0x24
   14fec:	add	r3, pc, r3
   14ff0:	add	r2, sl, r0
   14ff4:	mov	r0, #1
   14ff8:	bl	11438 <__printf_chk@plt>
   14ffc:	ldr	r0, [pc, #312]	; 1513c <__assert_fail@plt+0x3c14>
   15000:	ldr	r3, [r5]
   15004:	mov	r1, #1
   15008:	add	r0, pc, r0
   1500c:	mov	r2, #3
   15010:	bl	11288 <fwrite_unlocked@plt>
   15014:	ldr	r3, [sp, #12]
   15018:	cmp	r3, #0
   1501c:	beq	15070 <__assert_fail@plt+0x3b48>
   15020:	bl	113a8 <__ctype_b_loc@plt>
   15024:	ldr	r9, [sp, #12]
   15028:	ldr	sl, [sp, #80]	; 0x50
   1502c:	mov	fp, r0
   15030:	ldrb	r1, [sl], #1
   15034:	ldr	r2, [fp]
   15038:	ldr	r0, [r5]
   1503c:	lsl	r3, r1, #1
   15040:	ldrh	r2, [r2, r3]
   15044:	ldr	r3, [r0, #20]
   15048:	tst	r2, #16384	; 0x4000
   1504c:	ldr	r2, [r0, #24]
   15050:	add	ip, r3, #1
   15054:	moveq	r1, #46	; 0x2e
   15058:	cmp	r3, r2
   1505c:	strcc	ip, [r0, #20]
   15060:	strbcc	r1, [r3]
   15064:	bcs	15100 <__assert_fail@plt+0x3bd8>
   15068:	subs	r9, r9, #1
   1506c:	bne	15030 <__assert_fail@plt+0x3b08>
   15070:	ldr	r0, [r5]
   15074:	ldr	r2, [r0, #24]
   15078:	ldr	r3, [r0, #20]
   1507c:	cmp	r3, r2
   15080:	addcc	r2, r3, #1
   15084:	strcc	r2, [r0, #20]
   15088:	movcc	r2, #60	; 0x3c
   1508c:	strbcc	r2, [r3]
   15090:	bcc	14f30 <__assert_fail@plt+0x3a08>
   15094:	mov	r1, #60	; 0x3c
   15098:	bl	1148c <__overflow@plt>
   1509c:	b	14f30 <__assert_fail@plt+0x3a08>
   150a0:	ldr	r4, [pc, #152]	; 15140 <__assert_fail@plt+0x3c18>
   150a4:	add	r4, pc, r4
   150a8:	ldr	r1, [r4, #108]	; 0x6c
   150ac:	cmp	r2, r1
   150b0:	bne	14e80 <__assert_fail@plt+0x3958>
   150b4:	mov	r0, r3
   150b8:	ldr	r1, [sp, #80]	; 0x50
   150bc:	bl	11294 <memcmp@plt>
   150c0:	cmp	r0, #0
   150c4:	bne	14e80 <__assert_fail@plt+0x3958>
   150c8:	ldrb	r3, [r4, #112]	; 0x70
   150cc:	cmp	r3, #0
   150d0:	bne	150e8 <__assert_fail@plt+0x3bc0>
   150d4:	ldr	r0, [pc, #104]	; 15144 <__assert_fail@plt+0x3c1c>
   150d8:	add	r0, pc, r0
   150dc:	bl	11360 <puts@plt>
   150e0:	mov	r3, #1
   150e4:	strb	r3, [r4, #112]	; 0x70
   150e8:	ldr	r3, [pc, #88]	; 15148 <__assert_fail@plt+0x3c20>
   150ec:	mov	r2, #0
   150f0:	add	r3, pc, r3
   150f4:	strb	r2, [r3, #1]
   150f8:	add	sp, sp, #44	; 0x2c
   150fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15100:	bl	1148c <__overflow@plt>
   15104:	b	15068 <__assert_fail@plt+0x3b40>
   15108:	mov	r1, #10
   1510c:	bl	1148c <__overflow@plt>
   15110:	b	14f54 <__assert_fail@plt+0x3a2c>
   15114:	andeq	r9, r1, r0, lsl r3
   15118:	muleq	r1, r8, r1
   1511c:	andeq	r9, r1, r0, lsr r3
   15120:	andeq	r0, r0, r8, asr #2
   15124:	andeq	r6, r0, r4, asr #20
   15128:	muleq	r0, ip, ip
   1512c:	andeq	r7, r0, r0, lsl #1
   15130:	andeq	r6, r0, r4, lsl #25
   15134:	andeq	r9, r1, ip, asr r2
   15138:	andeq	r6, r0, r4, asr pc
   1513c:	andeq	r6, r0, ip, asr sp
   15140:	andeq	r9, r1, r4, lsl r1
   15144:	andeq	r6, r0, r8, lsl #25
   15148:	andeq	r9, r1, r0, ror r0
   1514c:	push	{r3, r4, r5, r6, r7, lr}
   15150:	mov	r5, r1
   15154:	ldr	r3, [pc, #132]	; 151e0 <__assert_fail@plt+0x3cb8>
   15158:	mov	r4, r0
   1515c:	ldr	r1, [pc, #128]	; 151e4 <__assert_fail@plt+0x3cbc>
   15160:	mov	r7, r2
   15164:	add	r3, pc, r3
   15168:	ldr	r6, [r3, r1]
   1516c:	ldr	r0, [r6]
   15170:	ldr	r3, [r0, #20]
   15174:	ldr	r2, [r0, #24]
   15178:	cmp	r3, r2
   1517c:	addcc	r1, r3, #1
   15180:	strcc	r1, [r0, #20]
   15184:	movcc	r2, #40	; 0x28
   15188:	strbcc	r2, [r3]
   1518c:	bcs	151d4 <__assert_fail@plt+0x3cac>
   15190:	mov	r0, r4
   15194:	mov	r1, r5
   15198:	mov	r2, #41	; 0x29
   1519c:	bl	12fa8 <__assert_fail@plt+0x1a80>
   151a0:	cmp	r7, #0
   151a4:	popeq	{r3, r4, r5, r6, r7, pc}
   151a8:	ldr	r0, [r6]
   151ac:	ldr	r3, [r0, #20]
   151b0:	ldr	r2, [r0, #24]
   151b4:	cmp	r3, r2
   151b8:	addcc	r2, r3, #1
   151bc:	strcc	r2, [r0, #20]
   151c0:	strbcc	r7, [r3]
   151c4:	popcc	{r3, r4, r5, r6, r7, pc}
   151c8:	mov	r1, r7
   151cc:	pop	{r3, r4, r5, r6, r7, lr}
   151d0:	b	1148c <__overflow@plt>
   151d4:	mov	r1, #40	; 0x28
   151d8:	bl	1148c <__overflow@plt>
   151dc:	b	15190 <__assert_fail@plt+0x3c68>
   151e0:	muleq	r1, r4, lr
   151e4:	andeq	r0, r0, r8, asr #2
   151e8:	push	{r4, r5, r6, lr}
   151ec:	mov	r6, r2
   151f0:	mov	r2, #32
   151f4:	mov	r4, r0
   151f8:	mov	r5, r1
   151fc:	bl	12fa8 <__assert_fail@plt+0x1a80>
   15200:	ldr	r3, [pc, #24]	; 15220 <__assert_fail@plt+0x3cf8>
   15204:	mov	r2, r6
   15208:	add	r3, pc, r3
   1520c:	ldrd	r0, [r3, #120]	; 0x78
   15210:	adds	r0, r0, r4
   15214:	adc	r1, r1, r5
   15218:	pop	{r4, r5, r6, lr}
   1521c:	b	1514c <__assert_fail@plt+0x3c24>
   15220:			; <UNDEFINED> instruction: 0x00018fb0
   15224:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15228:	subs	r7, r0, #0
   1522c:	mov	r8, r1
   15230:	mov	r4, r2
   15234:	beq	152d8 <__assert_fail@plt+0x3db0>
   15238:	ldr	r3, [pc, #188]	; 152fc <__assert_fail@plt+0x3dd4>
   1523c:	add	r3, pc, r3
   15240:	ldr	r2, [r3, #108]	; 0x6c
   15244:	cmp	r7, r2
   15248:	bhi	152d8 <__assert_fail@plt+0x3db0>
   1524c:	ldr	r3, [r3, #16]
   15250:	mov	ip, #0
   15254:	str	ip, [r4]
   15258:	cmp	r3, ip
   1525c:	beq	152d0 <__assert_fail@plt+0x3da8>
   15260:	ldr	r9, [pc, #152]	; 15300 <__assert_fail@plt+0x3dd8>
   15264:	mov	r0, ip
   15268:	mov	r6, #1
   1526c:	add	r9, pc, r9
   15270:	b	15278 <__assert_fail@plt+0x3d50>
   15274:	ldr	r0, [r4]
   15278:	rsb	r5, r0, r7
   1527c:	mov	r1, #1
   15280:	add	r0, r8, r0
   15284:	mov	r2, r5
   15288:	bl	114ec <fread_unlocked@plt>
   1528c:	ldr	r3, [r4]
   15290:	cmp	r5, r0
   15294:	add	r0, r3, r0
   15298:	str	r0, [r4]
   1529c:	beq	152c8 <__assert_fail@plt+0x3da0>
   152a0:	bl	113e4 <__errno_location@plt>
   152a4:	ldr	r0, [r0]
   152a8:	bl	13134 <__assert_fail@plt+0x1c0c>
   152ac:	mov	r5, r0
   152b0:	bl	14a4c <__assert_fail@plt+0x3524>
   152b4:	ldr	r3, [r9, #16]
   152b8:	cmp	r3, #0
   152bc:	and	r0, r5, r0
   152c0:	and	r6, r6, r0
   152c4:	bne	15274 <__assert_fail@plt+0x3d4c>
   152c8:	mov	r0, r6
   152cc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   152d0:	mov	r6, #1
   152d4:	b	152c8 <__assert_fail@plt+0x3da0>
   152d8:	ldr	r3, [pc, #36]	; 15304 <__assert_fail@plt+0x3ddc>
   152dc:	movw	r2, #1238	; 0x4d6
   152e0:	ldr	r0, [pc, #32]	; 15308 <__assert_fail@plt+0x3de0>
   152e4:	ldr	r1, [pc, #32]	; 1530c <__assert_fail@plt+0x3de4>
   152e8:	add	r3, pc, r3
   152ec:	add	r0, pc, r0
   152f0:	add	r3, r3, #484	; 0x1e4
   152f4:	add	r1, pc, r1
   152f8:	bl	11528 <__assert_fail@plt>
   152fc:	andeq	r8, r1, ip, ror pc
   15300:	andeq	r8, r1, ip, asr #30
   15304:	andeq	r6, r0, r8, lsl #12
   15308:	andeq	r6, r0, ip, ror sl
   1530c:	andeq	r6, r0, r4, lsr #17
   15310:	push	{r4, r5, r6, lr}
   15314:	subs	r4, r0, #0
   15318:	ldr	r5, [pc, #720]	; 155f0 <__assert_fail@plt+0x40c8>
   1531c:	sub	sp, sp, #8
   15320:	add	r5, pc, r5
   15324:	beq	1536c <__assert_fail@plt+0x3e44>
   15328:	ldr	r3, [pc, #708]	; 155f4 <__assert_fail@plt+0x40cc>
   1532c:	mov	r2, #5
   15330:	ldr	r1, [pc, #704]	; 155f8 <__assert_fail@plt+0x40d0>
   15334:	mov	r0, #0
   15338:	ldr	r3, [r5, r3]
   1533c:	add	r1, pc, r1
   15340:	ldr	r6, [r3]
   15344:	bl	112a0 <dcgettext@plt>
   15348:	ldr	r3, [pc, #684]	; 155fc <__assert_fail@plt+0x40d4>
   1534c:	mov	r1, #1
   15350:	ldr	r3, [r5, r3]
   15354:	ldr	r3, [r3]
   15358:	mov	r2, r0
   1535c:	mov	r0, r6
   15360:	bl	1145c <__fprintf_chk@plt>
   15364:	mov	r0, r4
   15368:	bl	113b4 <exit@plt>
   1536c:	ldr	r1, [pc, #652]	; 15600 <__assert_fail@plt+0x40d8>
   15370:	mov	r2, #5
   15374:	add	r1, pc, r1
   15378:	bl	112a0 <dcgettext@plt>
   1537c:	ldr	r3, [pc, #632]	; 155fc <__assert_fail@plt+0x40d4>
   15380:	ldr	r6, [r5, r3]
   15384:	ldr	r3, [r6]
   15388:	mov	r2, r3
   1538c:	str	r3, [sp]
   15390:	mov	r1, r0
   15394:	mov	r0, #1
   15398:	bl	11438 <__printf_chk@plt>
   1539c:	ldr	r1, [pc, #608]	; 15604 <__assert_fail@plt+0x40dc>
   153a0:	mov	r2, #5
   153a4:	mov	r0, r4
   153a8:	add	r1, pc, r1
   153ac:	bl	112a0 <dcgettext@plt>
   153b0:	ldr	r3, [pc, #592]	; 15608 <__assert_fail@plt+0x40e0>
   153b4:	ldr	r5, [r5, r3]
   153b8:	ldr	r1, [r5]
   153bc:	bl	11204 <fputs_unlocked@plt>
   153c0:	ldr	r1, [pc, #580]	; 1560c <__assert_fail@plt+0x40e4>
   153c4:	mov	r2, #5
   153c8:	mov	r0, r4
   153cc:	add	r1, pc, r1
   153d0:	bl	112a0 <dcgettext@plt>
   153d4:	ldr	r1, [r5]
   153d8:	bl	11204 <fputs_unlocked@plt>
   153dc:	ldr	r1, [pc, #556]	; 15610 <__assert_fail@plt+0x40e8>
   153e0:	mov	r2, #5
   153e4:	mov	r0, r4
   153e8:	add	r1, pc, r1
   153ec:	bl	112a0 <dcgettext@plt>
   153f0:	ldr	r1, [r5]
   153f4:	bl	11204 <fputs_unlocked@plt>
   153f8:	ldr	r1, [pc, #532]	; 15614 <__assert_fail@plt+0x40ec>
   153fc:	mov	r2, #5
   15400:	mov	r0, r4
   15404:	add	r1, pc, r1
   15408:	bl	112a0 <dcgettext@plt>
   1540c:	ldr	r1, [r5]
   15410:	bl	11204 <fputs_unlocked@plt>
   15414:	ldr	r1, [pc, #508]	; 15618 <__assert_fail@plt+0x40f0>
   15418:	mov	r2, #5
   1541c:	mov	r0, r4
   15420:	add	r1, pc, r1
   15424:	bl	112a0 <dcgettext@plt>
   15428:	ldr	r1, [r5]
   1542c:	bl	11204 <fputs_unlocked@plt>
   15430:	ldr	r1, [pc, #484]	; 1561c <__assert_fail@plt+0x40f4>
   15434:	mov	r2, #5
   15438:	mov	r0, r4
   1543c:	add	r1, pc, r1
   15440:	bl	112a0 <dcgettext@plt>
   15444:	ldr	r1, [r5]
   15448:	bl	11204 <fputs_unlocked@plt>
   1544c:	ldr	r1, [pc, #460]	; 15620 <__assert_fail@plt+0x40f8>
   15450:	mov	r2, #5
   15454:	mov	r0, r4
   15458:	add	r1, pc, r1
   1545c:	bl	112a0 <dcgettext@plt>
   15460:	ldr	r1, [r5]
   15464:	bl	11204 <fputs_unlocked@plt>
   15468:	ldr	r1, [pc, #436]	; 15624 <__assert_fail@plt+0x40fc>
   1546c:	mov	r2, #5
   15470:	mov	r0, r4
   15474:	add	r1, pc, r1
   15478:	bl	112a0 <dcgettext@plt>
   1547c:	ldr	r1, [r5]
   15480:	bl	11204 <fputs_unlocked@plt>
   15484:	ldr	r1, [pc, #412]	; 15628 <__assert_fail@plt+0x4100>
   15488:	mov	r2, #5
   1548c:	mov	r0, r4
   15490:	add	r1, pc, r1
   15494:	bl	112a0 <dcgettext@plt>
   15498:	ldr	r1, [r5]
   1549c:	bl	11204 <fputs_unlocked@plt>
   154a0:	ldr	r1, [pc, #388]	; 1562c <__assert_fail@plt+0x4104>
   154a4:	mov	r2, #5
   154a8:	mov	r0, r4
   154ac:	add	r1, pc, r1
   154b0:	bl	112a0 <dcgettext@plt>
   154b4:	ldr	r1, [r5]
   154b8:	bl	11204 <fputs_unlocked@plt>
   154bc:	ldr	r1, [pc, #364]	; 15630 <__assert_fail@plt+0x4108>
   154c0:	mov	r2, #5
   154c4:	mov	r0, r4
   154c8:	add	r1, pc, r1
   154cc:	bl	112a0 <dcgettext@plt>
   154d0:	ldr	r1, [r5]
   154d4:	bl	11204 <fputs_unlocked@plt>
   154d8:	ldr	r1, [pc, #340]	; 15634 <__assert_fail@plt+0x410c>
   154dc:	mov	r2, #5
   154e0:	mov	r0, r4
   154e4:	add	r1, pc, r1
   154e8:	bl	112a0 <dcgettext@plt>
   154ec:	ldr	r1, [r5]
   154f0:	bl	11204 <fputs_unlocked@plt>
   154f4:	ldr	r1, [pc, #316]	; 15638 <__assert_fail@plt+0x4110>
   154f8:	mov	r2, #5
   154fc:	mov	r0, r4
   15500:	add	r1, pc, r1
   15504:	bl	112a0 <dcgettext@plt>
   15508:	ldr	r1, [r5]
   1550c:	bl	11204 <fputs_unlocked@plt>
   15510:	ldr	r1, [pc, #292]	; 1563c <__assert_fail@plt+0x4114>
   15514:	mov	r2, #5
   15518:	mov	r0, r4
   1551c:	add	r1, pc, r1
   15520:	bl	112a0 <dcgettext@plt>
   15524:	ldr	r1, [r5]
   15528:	bl	11204 <fputs_unlocked@plt>
   1552c:	ldr	r1, [pc, #268]	; 15640 <__assert_fail@plt+0x4118>
   15530:	mov	r2, #5
   15534:	mov	r0, r4
   15538:	add	r1, pc, r1
   1553c:	bl	112a0 <dcgettext@plt>
   15540:	ldr	r2, [pc, #252]	; 15644 <__assert_fail@plt+0x411c>
   15544:	ldr	r3, [pc, #252]	; 15648 <__assert_fail@plt+0x4120>
   15548:	add	r2, pc, r2
   1554c:	add	r3, pc, r3
   15550:	mov	r1, r0
   15554:	mov	r0, #1
   15558:	bl	11438 <__printf_chk@plt>
   1555c:	mov	r0, #5
   15560:	mov	r1, r4
   15564:	bl	11498 <setlocale@plt>
   15568:	cmp	r0, #0
   1556c:	beq	15588 <__assert_fail@plt+0x4060>
   15570:	ldr	r1, [pc, #212]	; 1564c <__assert_fail@plt+0x4124>
   15574:	mov	r2, #3
   15578:	add	r1, pc, r1
   1557c:	bl	114f8 <strncmp@plt>
   15580:	cmp	r0, #0
   15584:	bne	155bc <__assert_fail@plt+0x4094>
   15588:	ldr	r1, [pc, #192]	; 15650 <__assert_fail@plt+0x4128>
   1558c:	mov	r2, #5
   15590:	mov	r0, #0
   15594:	add	r1, pc, r1
   15598:	bl	112a0 <dcgettext@plt>
   1559c:	mov	r5, r0
   155a0:	ldr	r0, [r6]
   155a4:	bl	15798 <close_stdout@@Base+0x118>
   155a8:	mov	r1, r5
   155ac:	mov	r2, r0
   155b0:	mov	r0, #1
   155b4:	bl	11438 <__printf_chk@plt>
   155b8:	b	15364 <__assert_fail@plt+0x3e3c>
   155bc:	ldr	r1, [pc, #144]	; 15654 <__assert_fail@plt+0x412c>
   155c0:	mov	r2, #5
   155c4:	mov	r0, r4
   155c8:	add	r1, pc, r1
   155cc:	bl	112a0 <dcgettext@plt>
   155d0:	mov	r5, r0
   155d4:	ldr	r0, [r6]
   155d8:	bl	15798 <close_stdout@@Base+0x118>
   155dc:	mov	r1, r5
   155e0:	mov	r2, r0
   155e4:	mov	r0, #1
   155e8:	bl	11438 <__printf_chk@plt>
   155ec:	b	15588 <__assert_fail@plt+0x4060>
   155f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   155f4:	andeq	r0, r0, r4, lsr r1
   155f8:	andeq	r6, r0, ip, asr #20
   155fc:	andeq	r0, r0, r4, asr r1
   15600:	andeq	r6, r0, ip, lsr sl
   15604:	andeq	r6, r0, ip, lsr #21
   15608:	andeq	r0, r0, r8, asr #2
   1560c:	andeq	r6, r0, r8, ror fp
   15610:	andeq	r6, r0, r4, ror #25
   15614:	andeq	r6, r0, r4, lsl sp
   15618:	andeq	r6, r0, ip, asr #27
   1561c:	ldrdeq	r6, [r0], -r8
   15620:	andeq	r6, r0, ip, ror #31
   15624:	andeq	r7, r0, r8
   15628:	andeq	r7, r0, r8, lsr #2
   1562c:	andeq	r7, r0, r0, lsr #4
   15630:	andeq	r7, r0, ip, lsr #5
   15634:	andeq	r7, r0, ip, lsl #7
   15638:	andeq	r7, r0, r4, ror #8
   1563c:	andeq	r7, r0, r8, lsr #9
   15640:	andeq	r7, r0, ip, lsr r5
   15644:	andeq	r7, r0, r4, asr #10
   15648:	andeq	r7, r0, r0, asr r5
   1564c:	andeq	r7, r0, ip, asr #10
   15650:	andeq	r7, r0, ip, ror r5
   15654:	andeq	r7, r0, r0, lsl #10
   15658:	ldr	r3, [pc, #8]	; 15668 <__assert_fail@plt+0x4140>
   1565c:	add	r3, pc, r3
   15660:	str	r0, [r3]
   15664:	bx	lr
   15668:	strdeq	r8, [r1], -ip
   1566c:	ldr	r3, [pc, #8]	; 1567c <__assert_fail@plt+0x4154>
   15670:	add	r3, pc, r3
   15674:	strb	r0, [r3, #4]
   15678:	bx	lr
   1567c:	andeq	r8, r1, r8, ror #23

00015680 <close_stdout@@Base>:
   15680:	push	{r4, r5, r6, r7, lr}
   15684:	sub	sp, sp, #12
   15688:	ldr	r4, [pc, #228]	; 15774 <close_stdout@@Base+0xf4>
   1568c:	ldr	r3, [pc, #228]	; 15778 <close_stdout@@Base+0xf8>
   15690:	add	r4, pc, r4
   15694:	ldr	r3, [r4, r3]
   15698:	ldr	r0, [r3]
   1569c:	bl	189f0 <close_stdout@@Base+0x3370>
   156a0:	cmp	r0, #0
   156a4:	beq	156cc <close_stdout@@Base+0x4c>
   156a8:	ldr	r3, [pc, #204]	; 1577c <close_stdout@@Base+0xfc>
   156ac:	add	r3, pc, r3
   156b0:	ldrb	r3, [r3, #4]
   156b4:	cmp	r3, #0
   156b8:	beq	156ec <close_stdout@@Base+0x6c>
   156bc:	bl	113e4 <__errno_location@plt>
   156c0:	ldr	r3, [r0]
   156c4:	cmp	r3, #32
   156c8:	bne	156ec <close_stdout@@Base+0x6c>
   156cc:	ldr	r3, [pc, #172]	; 15780 <close_stdout@@Base+0x100>
   156d0:	ldr	r3, [r4, r3]
   156d4:	ldr	r0, [r3]
   156d8:	bl	189f0 <close_stdout@@Base+0x3370>
   156dc:	cmp	r0, #0
   156e0:	bne	15740 <close_stdout@@Base+0xc0>
   156e4:	add	sp, sp, #12
   156e8:	pop	{r4, r5, r6, r7, pc}
   156ec:	ldr	r1, [pc, #144]	; 15784 <close_stdout@@Base+0x104>
   156f0:	mov	r0, #0
   156f4:	mov	r2, #5
   156f8:	add	r1, pc, r1
   156fc:	bl	112a0 <dcgettext@plt>
   15700:	ldr	r3, [pc, #128]	; 15788 <close_stdout@@Base+0x108>
   15704:	ldr	r5, [pc, r3]
   15708:	cmp	r5, #0
   1570c:	mov	r6, r0
   15710:	beq	15750 <close_stdout@@Base+0xd0>
   15714:	bl	113e4 <__errno_location@plt>
   15718:	ldr	r7, [r0]
   1571c:	mov	r0, r5
   15720:	bl	173ac <close_stdout@@Base+0x1d2c>
   15724:	ldr	r2, [pc, #96]	; 1578c <close_stdout@@Base+0x10c>
   15728:	str	r6, [sp]
   1572c:	mov	r1, r7
   15730:	add	r2, pc, r2
   15734:	mov	r3, r0
   15738:	mov	r0, #0
   1573c:	bl	11330 <error@plt>
   15740:	ldr	r3, [pc, #72]	; 15790 <close_stdout@@Base+0x110>
   15744:	ldr	r3, [r4, r3]
   15748:	ldr	r0, [r3]
   1574c:	bl	1124c <_exit@plt>
   15750:	bl	113e4 <__errno_location@plt>
   15754:	ldr	r2, [pc, #56]	; 15794 <close_stdout@@Base+0x114>
   15758:	add	r2, pc, r2
   1575c:	mov	r3, r0
   15760:	mov	r0, r5
   15764:	ldr	r1, [r3]
   15768:	mov	r3, r6
   1576c:	bl	11330 <error@plt>
   15770:	b	15740 <close_stdout@@Base+0xc0>
   15774:	andeq	r8, r1, r8, ror #18
   15778:	andeq	r0, r0, r8, asr #2
   1577c:	andeq	r8, r1, ip, lsr #23
   15780:	andeq	r0, r0, r4, lsr r1
   15784:	andeq	r6, r0, r8, asr #8
   15788:	andeq	r8, r1, r4, asr fp
   1578c:	andeq	r7, r0, r4, asr #12
   15790:	andeq	r0, r0, ip, asr #2
   15794:	andeq	r7, r0, r0, lsr #12
   15798:	ldrb	r3, [r0]
   1579c:	cmp	r3, #47	; 0x2f
   157a0:	bne	157bc <close_stdout@@Base+0x13c>
   157a4:	add	r2, r0, #1
   157a8:	mov	r0, r2
   157ac:	add	r2, r2, #1
   157b0:	ldrb	r3, [r0]
   157b4:	cmp	r3, #47	; 0x2f
   157b8:	beq	157a8 <close_stdout@@Base+0x128>
   157bc:	cmp	r3, #0
   157c0:	bxeq	lr
   157c4:	mov	r2, r0
   157c8:	mov	r1, #0
   157cc:	cmp	r3, #47	; 0x2f
   157d0:	moveq	r1, #1
   157d4:	beq	157e4 <close_stdout@@Base+0x164>
   157d8:	cmp	r1, #0
   157dc:	movne	r0, r2
   157e0:	movne	r1, #0
   157e4:	ldrb	r3, [r2, #1]!
   157e8:	cmp	r3, #0
   157ec:	bne	157cc <close_stdout@@Base+0x14c>
   157f0:	bx	lr
   157f4:	push	{r4, lr}
   157f8:	mov	r4, r0
   157fc:	bl	113c0 <strlen@plt>
   15800:	cmp	r0, #1
   15804:	popls	{r4, pc}
   15808:	sub	r3, r0, #1
   1580c:	ldrb	r2, [r4, r3]
   15810:	cmp	r2, #47	; 0x2f
   15814:	popne	{r4, pc}
   15818:	mov	r0, r3
   1581c:	cmp	r0, #1
   15820:	sub	r3, r3, #1
   15824:	beq	15838 <close_stdout@@Base+0x1b8>
   15828:	ldrb	r2, [r4, r3]
   1582c:	cmp	r2, #47	; 0x2f
   15830:	popne	{r4, pc}
   15834:	b	15818 <close_stdout@@Base+0x198>
   15838:	pop	{r4, pc}
   1583c:	andeq	r0, r0, r0
   15840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15844:	vpush	{d8}
   15848:	mov	r6, r0
   1584c:	vldr	d7, [pc, #340]	; 159a8 <close_stdout@@Base+0x328>
   15850:	ldr	r0, [pc, #344]	; 159b0 <close_stdout@@Base+0x330>
   15854:	mov	r5, r1
   15858:	ldr	r1, [pc, #340]	; 159b4 <close_stdout@@Base+0x334>
   1585c:	vcmpe.f64	d0, #0.0
   15860:	add	r0, pc, r0
   15864:	sub	sp, sp, #52	; 0x34
   15868:	mov	r8, r3
   1586c:	and	sl, r2, #1
   15870:	ldr	r1, [r0, r1]
   15874:	mov	r3, r0
   15878:	vmrs	APSR_nzcv, fpscr
   1587c:	vnegmi.f64	d6, d0
   15880:	ubfx	r4, r2, #1, #1
   15884:	ubfx	ip, r2, #2, #1
   15888:	ldr	r3, [r1]
   1588c:	mov	fp, #37	; 0x25
   15890:	str	r1, [sp, #28]
   15894:	add	r1, sp, #48	; 0x30
   15898:	vmovpl.f64	d6, d0
   1589c:	tst	r2, #16
   158a0:	str	r3, [sp, #44]	; 0x2c
   158a4:	mov	r3, #45	; 0x2d
   158a8:	strb	r3, [r1, #-15]!
   158ac:	add	r9, r1, sl
   158b0:	add	lr, r9, r4
   158b4:	ubfx	r2, r2, #3, #1
   158b8:	vcmpe.f64	d6, d7
   158bc:	add	r0, lr, ip
   158c0:	add	r3, r0, r2
   158c4:	strb	fp, [sp, #32]
   158c8:	add	r7, sp, #32
   158cc:	mov	fp, #43	; 0x2b
   158d0:	strb	fp, [r1, sl]
   158d4:	moveq	r1, #103	; 0x67
   158d8:	movne	r1, #71	; 0x47
   158dc:	mov	sl, #32
   158e0:	vmrs	APSR_nzcv, fpscr
   158e4:	strb	sl, [r9, r4]
   158e8:	vmov.f64	d8, d0
   158ec:	mov	r9, #48	; 0x30
   158f0:	movmi	r4, #1
   158f4:	movpl	r4, #15
   158f8:	strb	r9, [lr, ip]
   158fc:	mov	ip, #42	; 0x2a
   15900:	mov	lr, #46	; 0x2e
   15904:	strb	ip, [r0, r2]
   15908:	mov	r2, #0
   1590c:	strb	ip, [r3, #2]
   15910:	strb	lr, [r3, #1]
   15914:	strb	r1, [r3, #3]
   15918:	strb	r2, [r3, #4]
   1591c:	b	15924 <close_stdout@@Base+0x2a4>
   15920:	add	r4, r4, #1
   15924:	mov	r1, r5
   15928:	mvn	r3, #0
   1592c:	str	r7, [sp]
   15930:	vstr	d8, [sp, #16]
   15934:	str	r8, [sp, #4]
   15938:	mov	r0, r6
   1593c:	str	r4, [sp, #8]
   15940:	mov	r2, #1
   15944:	bl	1151c <__snprintf_chk@plt>
   15948:	lsr	r3, r0, #31
   1594c:	mov	r9, r0
   15950:	cmp	r4, #16
   15954:	movle	r1, r3
   15958:	orrgt	r1, r3, #1
   1595c:	cmp	r1, #0
   15960:	bne	15980 <close_stdout@@Base+0x300>
   15964:	cmp	r5, r0
   15968:	bls	15920 <close_stdout@@Base+0x2a0>
   1596c:	mov	r0, r6
   15970:	bl	11444 <strtod@plt>
   15974:	vcmp.f64	d0, d8
   15978:	vmrs	APSR_nzcv, fpscr
   1597c:	bne	15920 <close_stdout@@Base+0x2a0>
   15980:	ldr	r1, [sp, #28]
   15984:	mov	r0, r9
   15988:	ldr	r2, [sp, #44]	; 0x2c
   1598c:	ldr	r3, [r1]
   15990:	cmp	r2, r3
   15994:	bne	159a4 <close_stdout@@Base+0x324>
   15998:	add	sp, sp, #52	; 0x34
   1599c:	vpop	{d8}
   159a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a4:	bl	112ac <__stack_chk_fail@plt>
   159a8:	andeq	r0, r0, r0
   159ac:	andseq	r0, r0, r0
   159b0:	muleq	r1, r8, r7
   159b4:	andeq	r0, r0, r8, lsr #2
   159b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159bc:	vpush	{d8-d9}
   159c0:	mov	r6, r0
   159c4:	vldr	s15, [pc, #344]	; 15b24 <close_stdout@@Base+0x4a4>
   159c8:	ldr	r0, [pc, #344]	; 15b28 <close_stdout@@Base+0x4a8>
   159cc:	mov	r5, r1
   159d0:	ldr	r1, [pc, #340]	; 15b2c <close_stdout@@Base+0x4ac>
   159d4:	vcmpe.f32	s0, #0.0
   159d8:	add	r0, pc, r0
   159dc:	sub	sp, sp, #52	; 0x34
   159e0:	mov	r8, r3
   159e4:	and	sl, r2, #1
   159e8:	ldr	r1, [r0, r1]
   159ec:	mov	r3, r0
   159f0:	vmrs	APSR_nzcv, fpscr
   159f4:	vnegmi.f32	s14, s0
   159f8:	ubfx	r4, r2, #1, #1
   159fc:	ubfx	ip, r2, #2, #1
   15a00:	ldr	r3, [r1]
   15a04:	mov	r7, #37	; 0x25
   15a08:	str	r1, [sp, #28]
   15a0c:	add	r1, sp, #48	; 0x30
   15a10:	vmovpl.f32	s14, s0
   15a14:	tst	r2, #16
   15a18:	str	r3, [sp, #44]	; 0x2c
   15a1c:	mov	r3, #45	; 0x2d
   15a20:	strb	r3, [r1, #-15]!
   15a24:	add	r9, r1, sl
   15a28:	add	lr, r9, r4
   15a2c:	ubfx	r2, r2, #3, #1
   15a30:	vcmpe.f32	s14, s15
   15a34:	add	r0, lr, ip
   15a38:	add	r3, r0, r2
   15a3c:	strb	r7, [sp, #32]
   15a40:	mov	fp, #43	; 0x2b
   15a44:	add	r7, sp, #32
   15a48:	strb	fp, [r1, sl]
   15a4c:	moveq	r1, #103	; 0x67
   15a50:	movne	r1, #71	; 0x47
   15a54:	mov	sl, #32
   15a58:	vmrs	APSR_nzcv, fpscr
   15a5c:	strb	sl, [r9, r4]
   15a60:	vmov.f32	s18, s0
   15a64:	mov	r9, #48	; 0x30
   15a68:	movmi	r4, #1
   15a6c:	movpl	r4, #6
   15a70:	strb	r9, [lr, ip]
   15a74:	mov	ip, #42	; 0x2a
   15a78:	mov	lr, #46	; 0x2e
   15a7c:	strb	ip, [r0, r2]
   15a80:	vcvt.f64.f32	d8, s0
   15a84:	mov	r2, #0
   15a88:	strb	ip, [r3, #2]
   15a8c:	strb	lr, [r3, #1]
   15a90:	strb	r1, [r3, #3]
   15a94:	strb	r2, [r3, #4]
   15a98:	b	15aa0 <close_stdout@@Base+0x420>
   15a9c:	add	r4, r4, #1
   15aa0:	mov	r1, r5
   15aa4:	mvn	r3, #0
   15aa8:	str	r7, [sp]
   15aac:	vstr	d8, [sp, #16]
   15ab0:	str	r8, [sp, #4]
   15ab4:	mov	r0, r6
   15ab8:	str	r4, [sp, #8]
   15abc:	mov	r2, #1
   15ac0:	bl	1151c <__snprintf_chk@plt>
   15ac4:	lsr	r3, r0, #31
   15ac8:	mov	r9, r0
   15acc:	cmp	r4, #8
   15ad0:	movle	r1, r3
   15ad4:	orrgt	r1, r3, #1
   15ad8:	cmp	r1, #0
   15adc:	bne	15afc <close_stdout@@Base+0x47c>
   15ae0:	cmp	r5, r0
   15ae4:	bls	15a9c <close_stdout@@Base+0x41c>
   15ae8:	mov	r0, r6
   15aec:	bl	1133c <strtof@plt>
   15af0:	vcmp.f32	s0, s18
   15af4:	vmrs	APSR_nzcv, fpscr
   15af8:	bne	15a9c <close_stdout@@Base+0x41c>
   15afc:	ldr	r1, [sp, #28]
   15b00:	mov	r0, r9
   15b04:	ldr	r2, [sp, #44]	; 0x2c
   15b08:	ldr	r3, [r1]
   15b0c:	cmp	r2, r3
   15b10:	bne	15b20 <close_stdout@@Base+0x4a0>
   15b14:	add	sp, sp, #52	; 0x34
   15b18:	vpop	{d8-d9}
   15b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b20:	bl	112ac <__stack_chk_fail@plt>
   15b24:	addeq	r0, r0, r0
   15b28:	andeq	r8, r1, r0, lsr #12
   15b2c:	andeq	r0, r0, r8, lsr #2
   15b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b34:	vpush	{d8}
   15b38:	mov	r6, r0
   15b3c:	vldr	d7, [pc, #348]	; 15ca0 <close_stdout@@Base+0x620>
   15b40:	ldr	r0, [pc, #352]	; 15ca8 <close_stdout@@Base+0x628>
   15b44:	mov	r5, r1
   15b48:	ldr	r1, [pc, #348]	; 15cac <close_stdout@@Base+0x62c>
   15b4c:	vcmpe.f64	d0, #0.0
   15b50:	add	r0, pc, r0
   15b54:	sub	sp, sp, #52	; 0x34
   15b58:	mov	r8, r3
   15b5c:	and	sl, r2, #1
   15b60:	ldr	r1, [r0, r1]
   15b64:	mov	r3, r0
   15b68:	vmrs	APSR_nzcv, fpscr
   15b6c:	vnegmi.f64	d6, d0
   15b70:	ubfx	r4, r2, #1, #1
   15b74:	ubfx	ip, r2, #2, #1
   15b78:	ldr	r3, [r1]
   15b7c:	mov	fp, #37	; 0x25
   15b80:	str	r1, [sp, #28]
   15b84:	add	r1, sp, #48	; 0x30
   15b88:	vmovpl.f64	d6, d0
   15b8c:	tst	r2, #16
   15b90:	str	r3, [sp, #44]	; 0x2c
   15b94:	mov	r3, #45	; 0x2d
   15b98:	strb	r3, [r1, #-15]!
   15b9c:	add	r9, r1, sl
   15ba0:	add	lr, r9, r4
   15ba4:	ubfx	r2, r2, #3, #1
   15ba8:	vcmpe.f64	d6, d7
   15bac:	add	r0, lr, ip
   15bb0:	add	r3, r0, r2
   15bb4:	strb	fp, [sp, #32]
   15bb8:	add	r7, sp, #32
   15bbc:	mov	fp, #43	; 0x2b
   15bc0:	strb	fp, [r1, sl]
   15bc4:	moveq	r1, #103	; 0x67
   15bc8:	movne	r1, #71	; 0x47
   15bcc:	mov	sl, #32
   15bd0:	vmrs	APSR_nzcv, fpscr
   15bd4:	strb	sl, [r9, r4]
   15bd8:	vmov.f64	d8, d0
   15bdc:	mov	r9, #48	; 0x30
   15be0:	movmi	r4, #1
   15be4:	movpl	r4, #15
   15be8:	strb	r9, [lr, ip]
   15bec:	mov	ip, #42	; 0x2a
   15bf0:	mov	lr, #46	; 0x2e
   15bf4:	strb	ip, [r0, r2]
   15bf8:	mov	r0, #76	; 0x4c
   15bfc:	mov	r2, #0
   15c00:	strb	ip, [r3, #2]
   15c04:	strb	lr, [r3, #1]
   15c08:	strb	r0, [r3, #3]
   15c0c:	strb	r1, [r3, #4]
   15c10:	strb	r2, [r3, #5]
   15c14:	b	15c1c <close_stdout@@Base+0x59c>
   15c18:	add	r4, r4, #1
   15c1c:	mov	r1, r5
   15c20:	mvn	r3, #0
   15c24:	str	r7, [sp]
   15c28:	vstr	d8, [sp, #16]
   15c2c:	str	r8, [sp, #4]
   15c30:	mov	r0, r6
   15c34:	str	r4, [sp, #8]
   15c38:	mov	r2, #1
   15c3c:	bl	1151c <__snprintf_chk@plt>
   15c40:	lsr	r3, r0, #31
   15c44:	mov	r9, r0
   15c48:	cmp	r4, #16
   15c4c:	movle	r1, r3
   15c50:	orrgt	r1, r3, #1
   15c54:	cmp	r1, #0
   15c58:	bne	15c78 <close_stdout@@Base+0x5f8>
   15c5c:	cmp	r5, r0
   15c60:	bls	15c18 <close_stdout@@Base+0x598>
   15c64:	mov	r0, r6
   15c68:	bl	1127c <strtold@plt>
   15c6c:	vcmp.f64	d0, d8
   15c70:	vmrs	APSR_nzcv, fpscr
   15c74:	bne	15c18 <close_stdout@@Base+0x598>
   15c78:	ldr	r1, [sp, #28]
   15c7c:	mov	r0, r9
   15c80:	ldr	r2, [sp, #44]	; 0x2c
   15c84:	ldr	r3, [r1]
   15c88:	cmp	r2, r3
   15c8c:	bne	15c9c <close_stdout@@Base+0x61c>
   15c90:	add	sp, sp, #52	; 0x34
   15c94:	vpop	{d8}
   15c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c9c:	bl	112ac <__stack_chk_fail@plt>
   15ca0:	andeq	r0, r0, r0
   15ca4:	andseq	r0, r0, r0
   15ca8:	andeq	r8, r1, r8, lsr #9
   15cac:	andeq	r0, r0, r8, lsr #2
   15cb0:	push	{r3, r4, r5, r6, r7, lr}
   15cb4:	subs	r4, r0, #0
   15cb8:	ldr	r5, [pc, #172]	; 15d6c <close_stdout@@Base+0x6ec>
   15cbc:	add	r5, pc, r5
   15cc0:	beq	15d48 <close_stdout@@Base+0x6c8>
   15cc4:	mov	r1, #47	; 0x2f
   15cc8:	bl	114a4 <strrchr@plt>
   15ccc:	subs	r6, r0, #0
   15cd0:	beq	15d2c <close_stdout@@Base+0x6ac>
   15cd4:	add	r7, r6, #1
   15cd8:	rsb	r3, r4, r7
   15cdc:	cmp	r3, #6
   15ce0:	ble	15d2c <close_stdout@@Base+0x6ac>
   15ce4:	ldr	r1, [pc, #132]	; 15d70 <close_stdout@@Base+0x6f0>
   15ce8:	sub	r0, r6, #6
   15cec:	mov	r2, #7
   15cf0:	add	r1, pc, r1
   15cf4:	bl	114f8 <strncmp@plt>
   15cf8:	cmp	r0, #0
   15cfc:	bne	15d2c <close_stdout@@Base+0x6ac>
   15d00:	ldr	r1, [pc, #108]	; 15d74 <close_stdout@@Base+0x6f4>
   15d04:	mov	r0, r7
   15d08:	mov	r2, #3
   15d0c:	add	r1, pc, r1
   15d10:	bl	114f8 <strncmp@plt>
   15d14:	cmp	r0, #0
   15d18:	movne	r4, r7
   15d1c:	ldreq	r3, [pc, #84]	; 15d78 <close_stdout@@Base+0x6f8>
   15d20:	addeq	r4, r6, #4
   15d24:	ldreq	r3, [r5, r3]
   15d28:	streq	r4, [r3]
   15d2c:	ldr	r2, [pc, #72]	; 15d7c <close_stdout@@Base+0x6fc>
   15d30:	ldr	r3, [pc, #72]	; 15d80 <close_stdout@@Base+0x700>
   15d34:	ldr	r2, [r5, r2]
   15d38:	str	r4, [r2]
   15d3c:	ldr	r3, [r5, r3]
   15d40:	str	r4, [r3]
   15d44:	pop	{r3, r4, r5, r6, r7, pc}
   15d48:	ldr	r3, [pc, #52]	; 15d84 <close_stdout@@Base+0x704>
   15d4c:	mov	r1, #1
   15d50:	ldr	r0, [pc, #48]	; 15d88 <close_stdout@@Base+0x708>
   15d54:	mov	r2, #55	; 0x37
   15d58:	ldr	r3, [r5, r3]
   15d5c:	add	r0, pc, r0
   15d60:	ldr	r3, [r3]
   15d64:	bl	112e8 <fwrite@plt>
   15d68:	bl	11504 <abort@plt>
   15d6c:	andeq	r8, r1, ip, lsr r3
   15d70:	andeq	r7, r0, r4, asr #1
   15d74:	strheq	r7, [r0], -r0
   15d78:	andeq	r0, r0, ip, asr r1
   15d7c:	andeq	r0, r0, r4, asr r1
   15d80:	andeq	r0, r0, r0, asr r1
   15d84:	andeq	r0, r0, r4, lsr r1
   15d88:	andeq	r7, r0, r0, lsr #32
   15d8c:	push	{r3, lr}
   15d90:	mov	r3, r0
   15d94:	mov	r2, #0
   15d98:	cmp	r1, #8
   15d9c:	str	r2, [r3], #4
   15da0:	add	r3, r3, #4
   15da4:	str	r2, [r0, #4]
   15da8:	str	r2, [r3], #4
   15dac:	str	r2, [r3], #4
   15db0:	str	r2, [r3], #4
   15db4:	str	r2, [r3], #4
   15db8:	str	r2, [r3], #4
   15dbc:	str	r2, [r3], #4
   15dc0:	str	r2, [r3], #4
   15dc4:	str	r2, [r3], #4
   15dc8:	str	r2, [r3], #4
   15dcc:	str	r2, [r3]
   15dd0:	beq	15ddc <close_stdout@@Base+0x75c>
   15dd4:	str	r1, [r0]
   15dd8:	pop	{r3, pc}
   15ddc:	bl	11504 <abort@plt>
   15de0:	push	{r4, r5, r6, lr}
   15de4:	mov	r4, r0
   15de8:	mov	r6, r1
   15dec:	mov	r0, #0
   15df0:	mov	r1, r4
   15df4:	mov	r2, #5
   15df8:	bl	112a0 <dcgettext@plt>
   15dfc:	cmp	r0, r4
   15e00:	mov	r5, r0
   15e04:	beq	15e0c <close_stdout@@Base+0x78c>
   15e08:	pop	{r4, r5, r6, pc}
   15e0c:	bl	18a70 <close_stdout@@Base+0x33f0>
   15e10:	ldrb	r3, [r0]
   15e14:	bic	r3, r3, #32
   15e18:	cmp	r3, #85	; 0x55
   15e1c:	bne	15e90 <close_stdout@@Base+0x810>
   15e20:	ldrb	r3, [r0, #1]
   15e24:	bic	r3, r3, #32
   15e28:	cmp	r3, #84	; 0x54
   15e2c:	bne	15e7c <close_stdout@@Base+0x7fc>
   15e30:	ldrb	r3, [r0, #2]
   15e34:	bic	r3, r3, #32
   15e38:	cmp	r3, #70	; 0x46
   15e3c:	bne	15e7c <close_stdout@@Base+0x7fc>
   15e40:	ldrb	r3, [r0, #3]
   15e44:	cmp	r3, #45	; 0x2d
   15e48:	bne	15e7c <close_stdout@@Base+0x7fc>
   15e4c:	ldrb	r3, [r0, #4]
   15e50:	cmp	r3, #56	; 0x38
   15e54:	bne	15e7c <close_stdout@@Base+0x7fc>
   15e58:	ldrb	r3, [r0, #5]
   15e5c:	cmp	r3, #0
   15e60:	bne	15e7c <close_stdout@@Base+0x7fc>
   15e64:	ldrb	r3, [r5]
   15e68:	cmp	r3, #96	; 0x60
   15e6c:	beq	15f08 <close_stdout@@Base+0x888>
   15e70:	ldr	r0, [pc, #180]	; 15f2c <close_stdout@@Base+0x8ac>
   15e74:	add	r0, pc, r0
   15e78:	pop	{r4, r5, r6, pc}
   15e7c:	cmp	r6, #7
   15e80:	beq	15f14 <close_stdout@@Base+0x894>
   15e84:	ldr	r0, [pc, #164]	; 15f30 <close_stdout@@Base+0x8b0>
   15e88:	add	r0, pc, r0
   15e8c:	pop	{r4, r5, r6, pc}
   15e90:	cmp	r3, #71	; 0x47
   15e94:	bne	15e7c <close_stdout@@Base+0x7fc>
   15e98:	ldrb	r3, [r0, #1]
   15e9c:	bic	r3, r3, #32
   15ea0:	cmp	r3, #66	; 0x42
   15ea4:	bne	15e7c <close_stdout@@Base+0x7fc>
   15ea8:	ldrb	r3, [r0, #2]
   15eac:	cmp	r3, #49	; 0x31
   15eb0:	bne	15e7c <close_stdout@@Base+0x7fc>
   15eb4:	ldrb	r3, [r0, #3]
   15eb8:	cmp	r3, #56	; 0x38
   15ebc:	bne	15e7c <close_stdout@@Base+0x7fc>
   15ec0:	ldrb	r3, [r0, #4]
   15ec4:	cmp	r3, #48	; 0x30
   15ec8:	bne	15e7c <close_stdout@@Base+0x7fc>
   15ecc:	ldrb	r3, [r0, #5]
   15ed0:	cmp	r3, #51	; 0x33
   15ed4:	bne	15e7c <close_stdout@@Base+0x7fc>
   15ed8:	ldrb	r3, [r0, #6]
   15edc:	cmp	r3, #48	; 0x30
   15ee0:	bne	15e7c <close_stdout@@Base+0x7fc>
   15ee4:	ldrb	r3, [r0, #7]
   15ee8:	cmp	r3, #0
   15eec:	bne	15e7c <close_stdout@@Base+0x7fc>
   15ef0:	ldrb	r3, [r5]
   15ef4:	cmp	r3, #96	; 0x60
   15ef8:	beq	15f20 <close_stdout@@Base+0x8a0>
   15efc:	ldr	r0, [pc, #48]	; 15f34 <close_stdout@@Base+0x8b4>
   15f00:	add	r0, pc, r0
   15f04:	pop	{r4, r5, r6, pc}
   15f08:	ldr	r0, [pc, #40]	; 15f38 <close_stdout@@Base+0x8b8>
   15f0c:	add	r0, pc, r0
   15f10:	pop	{r4, r5, r6, pc}
   15f14:	ldr	r0, [pc, #32]	; 15f3c <close_stdout@@Base+0x8bc>
   15f18:	add	r0, pc, r0
   15f1c:	pop	{r4, r5, r6, pc}
   15f20:	ldr	r0, [pc, #24]	; 15f40 <close_stdout@@Base+0x8c0>
   15f24:	add	r0, pc, r0
   15f28:	pop	{r4, r5, r6, pc}
   15f2c:	andeq	r6, r0, ip, ror #30
   15f30:	andeq	r6, r0, r0, ror #30
   15f34:	andeq	r6, r0, r4, ror #29
   15f38:	andeq	r6, r0, r8, ror #29
   15f3c:	ldrdeq	r6, [r0], -r4
   15f40:	andeq	r6, r0, ip, asr #29
   15f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f48:	sub	sp, sp, #124	; 0x7c
   15f4c:	ldr	ip, [pc, #3304]	; 16c3c <close_stdout@@Base+0x15bc>
   15f50:	mov	sl, r1
   15f54:	str	r0, [sp, #40]	; 0x28
   15f58:	mov	r8, r3
   15f5c:	ldr	r0, [pc, #3292]	; 16c40 <close_stdout@@Base+0x15c0>
   15f60:	add	ip, pc, ip
   15f64:	str	r2, [sp, #32]
   15f68:	ldr	r1, [sp, #164]	; 0xa4
   15f6c:	mov	r3, ip
   15f70:	ldr	r0, [ip, r0]
   15f74:	ldr	r2, [sp, #172]	; 0xac
   15f78:	ubfx	r1, r1, #1, #1
   15f7c:	str	r1, [sp, #36]	; 0x24
   15f80:	str	r0, [sp, #56]	; 0x38
   15f84:	ldr	r0, [sp, #168]	; 0xa8
   15f88:	ldr	r1, [sp, #176]	; 0xb0
   15f8c:	str	r2, [sp, #72]	; 0x48
   15f90:	str	r0, [sp, #48]	; 0x30
   15f94:	ldr	r0, [sp, #56]	; 0x38
   15f98:	str	r1, [sp, #68]	; 0x44
   15f9c:	ldr	r3, [r0]
   15fa0:	str	r3, [sp, #116]	; 0x74
   15fa4:	bl	11300 <__ctype_get_mb_cur_max@plt>
   15fa8:	ldr	r2, [sp, #160]	; 0xa0
   15fac:	str	r0, [sp, #64]	; 0x40
   15fb0:	cmp	r2, #8
   15fb4:	addls	pc, pc, r2, lsl #2
   15fb8:	b	16b18 <close_stdout@@Base+0x1498>
   15fbc:	b	15fe0 <close_stdout@@Base+0x960>
   15fc0:	b	16830 <close_stdout@@Base+0x11b0>
   15fc4:	b	16860 <close_stdout@@Base+0x11e0>
   15fc8:	b	16710 <close_stdout@@Base+0x1090>
   15fcc:	b	16750 <close_stdout@@Base+0x10d0>
   15fd0:	b	1677c <close_stdout@@Base+0x10fc>
   15fd4:	b	1679c <close_stdout@@Base+0x111c>
   15fd8:	b	1679c <close_stdout@@Base+0x111c>
   15fdc:	b	1679c <close_stdout@@Base+0x111c>
   15fe0:	mov	r2, #0
   15fe4:	str	r2, [sp, #36]	; 0x24
   15fe8:	mov	r9, r2
   15fec:	str	r2, [sp, #24]
   15ff0:	str	r2, [sp, #28]
   15ff4:	str	r2, [sp, #52]	; 0x34
   15ff8:	ldr	r0, [sp, #36]	; 0x24
   15ffc:	mov	fp, #0
   16000:	ldr	r1, [sp, #24]
   16004:	eor	r2, r0, #1
   16008:	eor	r3, r1, #1
   1600c:	and	r3, r2, r3
   16010:	and	r2, r1, r0
   16014:	str	r3, [sp, #44]	; 0x2c
   16018:	str	r2, [sp, #76]	; 0x4c
   1601c:	cmn	r8, #1
   16020:	beq	163a0 <close_stdout@@Base+0xd20>
   16024:	subs	r3, fp, r8
   16028:	movne	r3, #1
   1602c:	cmp	r3, #0
   16030:	beq	163b8 <close_stdout@@Base+0xd38>
   16034:	ldr	r3, [sp, #28]
   16038:	ldr	r0, [sp, #24]
   1603c:	adds	r7, r3, #0
   16040:	movne	r7, #1
   16044:	ands	r6, r7, r0
   16048:	bne	168a4 <close_stdout@@Base+0x1224>
   1604c:	ldr	r1, [sp, #32]
   16050:	add	r5, r1, fp
   16054:	ldrb	r4, [r5]
   16058:	cmp	r4, #126	; 0x7e
   1605c:	addls	pc, pc, r4, lsl #2
   16060:	b	16624 <close_stdout@@Base+0xfa4>
   16064:	b	16530 <close_stdout@@Base+0xeb0>
   16068:	b	16624 <close_stdout@@Base+0xfa4>
   1606c:	b	16624 <close_stdout@@Base+0xfa4>
   16070:	b	16624 <close_stdout@@Base+0xfa4>
   16074:	b	16624 <close_stdout@@Base+0xfa4>
   16078:	b	16624 <close_stdout@@Base+0xfa4>
   1607c:	b	16624 <close_stdout@@Base+0xfa4>
   16080:	b	16518 <close_stdout@@Base+0xe98>
   16084:	b	16500 <close_stdout@@Base+0xe80>
   16088:	b	16528 <close_stdout@@Base+0xea8>
   1608c:	b	16520 <close_stdout@@Base+0xea0>
   16090:	b	16510 <close_stdout@@Base+0xe90>
   16094:	b	16508 <close_stdout@@Base+0xe88>
   16098:	b	164cc <close_stdout@@Base+0xe4c>
   1609c:	b	16624 <close_stdout@@Base+0xfa4>
   160a0:	b	16624 <close_stdout@@Base+0xfa4>
   160a4:	b	16624 <close_stdout@@Base+0xfa4>
   160a8:	b	16624 <close_stdout@@Base+0xfa4>
   160ac:	b	16624 <close_stdout@@Base+0xfa4>
   160b0:	b	16624 <close_stdout@@Base+0xfa4>
   160b4:	b	16624 <close_stdout@@Base+0xfa4>
   160b8:	b	16624 <close_stdout@@Base+0xfa4>
   160bc:	b	16624 <close_stdout@@Base+0xfa4>
   160c0:	b	16624 <close_stdout@@Base+0xfa4>
   160c4:	b	16624 <close_stdout@@Base+0xfa4>
   160c8:	b	16624 <close_stdout@@Base+0xfa4>
   160cc:	b	16624 <close_stdout@@Base+0xfa4>
   160d0:	b	16624 <close_stdout@@Base+0xfa4>
   160d4:	b	16624 <close_stdout@@Base+0xfa4>
   160d8:	b	16624 <close_stdout@@Base+0xfa4>
   160dc:	b	16624 <close_stdout@@Base+0xfa4>
   160e0:	b	16624 <close_stdout@@Base+0xfa4>
   160e4:	b	16458 <close_stdout@@Base+0xdd8>
   160e8:	b	16458 <close_stdout@@Base+0xdd8>
   160ec:	b	16458 <close_stdout@@Base+0xdd8>
   160f0:	b	16450 <close_stdout@@Base+0xdd0>
   160f4:	b	16458 <close_stdout@@Base+0xdd8>
   160f8:	b	1632c <close_stdout@@Base+0xcac>
   160fc:	b	16458 <close_stdout@@Base+0xdd8>
   16100:	b	165cc <close_stdout@@Base+0xf4c>
   16104:	b	16458 <close_stdout@@Base+0xdd8>
   16108:	b	16458 <close_stdout@@Base+0xdd8>
   1610c:	b	16458 <close_stdout@@Base+0xdd8>
   16110:	b	1632c <close_stdout@@Base+0xcac>
   16114:	b	1632c <close_stdout@@Base+0xcac>
   16118:	b	1632c <close_stdout@@Base+0xcac>
   1611c:	b	1632c <close_stdout@@Base+0xcac>
   16120:	b	1632c <close_stdout@@Base+0xcac>
   16124:	b	1632c <close_stdout@@Base+0xcac>
   16128:	b	1632c <close_stdout@@Base+0xcac>
   1612c:	b	1632c <close_stdout@@Base+0xcac>
   16130:	b	1632c <close_stdout@@Base+0xcac>
   16134:	b	1632c <close_stdout@@Base+0xcac>
   16138:	b	1632c <close_stdout@@Base+0xcac>
   1613c:	b	1632c <close_stdout@@Base+0xcac>
   16140:	b	1632c <close_stdout@@Base+0xcac>
   16144:	b	1632c <close_stdout@@Base+0xcac>
   16148:	b	1632c <close_stdout@@Base+0xcac>
   1614c:	b	1632c <close_stdout@@Base+0xcac>
   16150:	b	16458 <close_stdout@@Base+0xdd8>
   16154:	b	16458 <close_stdout@@Base+0xdd8>
   16158:	b	16458 <close_stdout@@Base+0xdd8>
   1615c:	b	16458 <close_stdout@@Base+0xdd8>
   16160:	b	16260 <close_stdout@@Base+0xbe0>
   16164:	b	16624 <close_stdout@@Base+0xfa4>
   16168:	b	1632c <close_stdout@@Base+0xcac>
   1616c:	b	1632c <close_stdout@@Base+0xcac>
   16170:	b	1632c <close_stdout@@Base+0xcac>
   16174:	b	1632c <close_stdout@@Base+0xcac>
   16178:	b	1632c <close_stdout@@Base+0xcac>
   1617c:	b	1632c <close_stdout@@Base+0xcac>
   16180:	b	1632c <close_stdout@@Base+0xcac>
   16184:	b	1632c <close_stdout@@Base+0xcac>
   16188:	b	1632c <close_stdout@@Base+0xcac>
   1618c:	b	1632c <close_stdout@@Base+0xcac>
   16190:	b	1632c <close_stdout@@Base+0xcac>
   16194:	b	1632c <close_stdout@@Base+0xcac>
   16198:	b	1632c <close_stdout@@Base+0xcac>
   1619c:	b	1632c <close_stdout@@Base+0xcac>
   161a0:	b	1632c <close_stdout@@Base+0xcac>
   161a4:	b	1632c <close_stdout@@Base+0xcac>
   161a8:	b	1632c <close_stdout@@Base+0xcac>
   161ac:	b	1632c <close_stdout@@Base+0xcac>
   161b0:	b	1632c <close_stdout@@Base+0xcac>
   161b4:	b	1632c <close_stdout@@Base+0xcac>
   161b8:	b	1632c <close_stdout@@Base+0xcac>
   161bc:	b	1632c <close_stdout@@Base+0xcac>
   161c0:	b	1632c <close_stdout@@Base+0xcac>
   161c4:	b	1632c <close_stdout@@Base+0xcac>
   161c8:	b	1632c <close_stdout@@Base+0xcac>
   161cc:	b	1632c <close_stdout@@Base+0xcac>
   161d0:	b	16458 <close_stdout@@Base+0xdd8>
   161d4:	b	165b0 <close_stdout@@Base+0xf30>
   161d8:	b	1632c <close_stdout@@Base+0xcac>
   161dc:	b	16458 <close_stdout@@Base+0xdd8>
   161e0:	b	1632c <close_stdout@@Base+0xcac>
   161e4:	b	16458 <close_stdout@@Base+0xdd8>
   161e8:	b	1632c <close_stdout@@Base+0xcac>
   161ec:	b	1632c <close_stdout@@Base+0xcac>
   161f0:	b	1632c <close_stdout@@Base+0xcac>
   161f4:	b	1632c <close_stdout@@Base+0xcac>
   161f8:	b	1632c <close_stdout@@Base+0xcac>
   161fc:	b	1632c <close_stdout@@Base+0xcac>
   16200:	b	1632c <close_stdout@@Base+0xcac>
   16204:	b	1632c <close_stdout@@Base+0xcac>
   16208:	b	1632c <close_stdout@@Base+0xcac>
   1620c:	b	1632c <close_stdout@@Base+0xcac>
   16210:	b	1632c <close_stdout@@Base+0xcac>
   16214:	b	1632c <close_stdout@@Base+0xcac>
   16218:	b	1632c <close_stdout@@Base+0xcac>
   1621c:	b	1632c <close_stdout@@Base+0xcac>
   16220:	b	1632c <close_stdout@@Base+0xcac>
   16224:	b	1632c <close_stdout@@Base+0xcac>
   16228:	b	1632c <close_stdout@@Base+0xcac>
   1622c:	b	1632c <close_stdout@@Base+0xcac>
   16230:	b	1632c <close_stdout@@Base+0xcac>
   16234:	b	1632c <close_stdout@@Base+0xcac>
   16238:	b	1632c <close_stdout@@Base+0xcac>
   1623c:	b	1632c <close_stdout@@Base+0xcac>
   16240:	b	1632c <close_stdout@@Base+0xcac>
   16244:	b	1632c <close_stdout@@Base+0xcac>
   16248:	b	1632c <close_stdout@@Base+0xcac>
   1624c:	b	1632c <close_stdout@@Base+0xcac>
   16250:	b	16438 <close_stdout@@Base+0xdb8>
   16254:	b	16458 <close_stdout@@Base+0xdd8>
   16258:	b	16438 <close_stdout@@Base+0xdb8>
   1625c:	b	16450 <close_stdout@@Base+0xdd0>
   16260:	ldr	r3, [sp, #160]	; 0xa0
   16264:	cmp	r3, #2
   16268:	beq	16af4 <close_stdout@@Base+0x1474>
   1626c:	cmp	r3, #3
   16270:	bne	1632c <close_stdout@@Base+0xcac>
   16274:	ldr	r1, [sp, #164]	; 0xa4
   16278:	tst	r1, #4
   1627c:	beq	1632c <close_stdout@@Base+0xcac>
   16280:	add	r3, fp, #2
   16284:	cmp	r8, r3
   16288:	bls	1632c <close_stdout@@Base+0xcac>
   1628c:	ldrb	r2, [r5, #1]
   16290:	mov	r1, #1
   16294:	cmp	r2, #63	; 0x3f
   16298:	bne	1632c <close_stdout@@Base+0xcac>
   1629c:	ldr	r0, [sp, #32]
   162a0:	ldrb	ip, [r0, r3]
   162a4:	sub	r0, ip, #33	; 0x21
   162a8:	uxtb	r0, r0
   162ac:	cmp	r0, #29
   162b0:	bhi	1632c <close_stdout@@Base+0xcac>
   162b4:	lsl	r1, r1, r0
   162b8:	movw	r0, #20929	; 0x51c1
   162bc:	movt	r0, #14336	; 0x3800
   162c0:	and	r0, r1, r0
   162c4:	cmp	r0, #0
   162c8:	beq	1632c <close_stdout@@Base+0xcac>
   162cc:	ldr	r1, [sp, #36]	; 0x24
   162d0:	cmp	r1, #0
   162d4:	bne	16474 <close_stdout@@Base+0xdf4>
   162d8:	cmp	r9, sl
   162dc:	mov	r4, ip
   162e0:	mov	fp, r3
   162e4:	ldrcc	r0, [sp, #40]	; 0x28
   162e8:	strbcc	r2, [r0, r9]
   162ec:	add	r2, r9, #1
   162f0:	cmp	sl, r2
   162f4:	ldrhi	r0, [sp, #40]	; 0x28
   162f8:	movhi	r1, #34	; 0x22
   162fc:	strbhi	r1, [r0, r2]
   16300:	add	r2, r9, #2
   16304:	cmp	sl, r2
   16308:	ldrhi	r0, [sp, #40]	; 0x28
   1630c:	movhi	r1, #34	; 0x22
   16310:	strbhi	r1, [r0, r2]
   16314:	add	r2, r9, #3
   16318:	cmp	sl, r2
   1631c:	add	r9, r9, #4
   16320:	ldrhi	r0, [sp, #40]	; 0x28
   16324:	movhi	r1, #63	; 0x3f
   16328:	strbhi	r1, [r0, r2]
   1632c:	ldr	r0, [sp, #44]	; 0x2c
   16330:	cmp	r0, #0
   16334:	bne	1635c <close_stdout@@Base+0xcdc>
   16338:	ldr	r1, [sp, #48]	; 0x30
   1633c:	cmp	r1, #0
   16340:	beq	1635c <close_stdout@@Base+0xcdc>
   16344:	ubfx	r2, r4, #5, #8
   16348:	and	r3, r4, #31
   1634c:	ldr	r2, [r1, r2, lsl #2]
   16350:	lsr	r3, r2, r3
   16354:	tst	r3, #1
   16358:	bne	16364 <close_stdout@@Base+0xce4>
   1635c:	cmp	r6, #0
   16360:	beq	16384 <close_stdout@@Base+0xd04>
   16364:	ldr	r2, [sp, #36]	; 0x24
   16368:	cmp	r2, #0
   1636c:	bne	16474 <close_stdout@@Base+0xdf4>
   16370:	cmp	r9, sl
   16374:	ldrcc	r0, [sp, #40]	; 0x28
   16378:	movcc	r3, #92	; 0x5c
   1637c:	strbcc	r3, [r0, r9]
   16380:	add	r9, r9, #1
   16384:	add	fp, fp, #1
   16388:	cmp	r9, sl
   1638c:	ldrcc	r1, [sp, #40]	; 0x28
   16390:	strbcc	r4, [r1, r9]
   16394:	cmn	r8, #1
   16398:	add	r9, r9, #1
   1639c:	bne	16024 <close_stdout@@Base+0x9a4>
   163a0:	ldr	r2, [sp, #32]
   163a4:	ldrb	r3, [r2, fp]
   163a8:	adds	r3, r3, #0
   163ac:	movne	r3, #1
   163b0:	cmp	r3, #0
   163b4:	bne	16034 <close_stdout@@Base+0x9b4>
   163b8:	ldr	r3, [sp, #160]	; 0xa0
   163bc:	cmp	r9, #0
   163c0:	cmpeq	r3, #2
   163c4:	bne	163d4 <close_stdout@@Base+0xd54>
   163c8:	ldr	r0, [sp, #36]	; 0x24
   163cc:	cmp	r0, #0
   163d0:	bne	16474 <close_stdout@@Base+0xdf4>
   163d4:	ldr	r1, [sp, #36]	; 0x24
   163d8:	ldr	r2, [sp, #52]	; 0x34
   163dc:	eor	r3, r1, #1
   163e0:	cmp	r2, #0
   163e4:	moveq	r3, #0
   163e8:	andne	r3, r3, #1
   163ec:	cmp	r3, #0
   163f0:	beq	1641c <close_stdout@@Base+0xd9c>
   163f4:	ldrb	r3, [r2]
   163f8:	cmp	r3, #0
   163fc:	beq	1641c <close_stdout@@Base+0xd9c>
   16400:	ldr	r1, [sp, #40]	; 0x28
   16404:	cmp	sl, r9
   16408:	strbhi	r3, [r1, r9]
   1640c:	ldrb	r3, [r2, #1]!
   16410:	add	r9, r9, #1
   16414:	cmp	r3, #0
   16418:	bne	16404 <close_stdout@@Base+0xd84>
   1641c:	cmp	r9, sl
   16420:	movcs	r0, r9
   16424:	ldrcc	r1, [sp, #40]	; 0x28
   16428:	movcc	r3, #0
   1642c:	movcc	r0, r9
   16430:	strbcc	r3, [r1, r9]
   16434:	b	164b0 <close_stdout@@Base+0xe30>
   16438:	cmn	r8, #1
   1643c:	beq	16b04 <close_stdout@@Base+0x1484>
   16440:	subs	r3, r8, #1
   16444:	movne	r3, #1
   16448:	cmp	r3, #0
   1644c:	bne	1632c <close_stdout@@Base+0xcac>
   16450:	cmp	fp, #0
   16454:	bne	1632c <close_stdout@@Base+0xcac>
   16458:	ldr	r3, [sp, #36]	; 0x24
   1645c:	ldr	r0, [sp, #160]	; 0xa0
   16460:	cmp	r0, #2
   16464:	movne	r3, #0
   16468:	andeq	r3, r3, #1
   1646c:	cmp	r3, #0
   16470:	beq	1632c <close_stdout@@Base+0xcac>
   16474:	ldr	r2, [sp, #164]	; 0xa4
   16478:	mov	ip, #0
   1647c:	ldr	r0, [sp, #160]	; 0xa0
   16480:	bic	r3, r2, #2
   16484:	ldr	r1, [sp, #72]	; 0x48
   16488:	ldr	r2, [sp, #68]	; 0x44
   1648c:	stm	sp, {r0, r3}
   16490:	mov	r3, r8
   16494:	str	r1, [sp, #12]
   16498:	mov	r1, sl
   1649c:	str	r2, [sp, #16]
   164a0:	ldr	r0, [sp, #40]	; 0x28
   164a4:	ldr	r2, [sp, #32]
   164a8:	str	ip, [sp, #8]
   164ac:	bl	15f44 <close_stdout@@Base+0x8c4>
   164b0:	ldr	r1, [sp, #56]	; 0x38
   164b4:	ldr	r2, [sp, #116]	; 0x74
   164b8:	ldr	r3, [r1]
   164bc:	cmp	r2, r3
   164c0:	bne	16bf4 <close_stdout@@Base+0x1574>
   164c4:	add	sp, sp, #124	; 0x7c
   164c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164cc:	mov	r3, #114	; 0x72
   164d0:	ldr	r2, [sp, #36]	; 0x24
   164d4:	ldr	r0, [sp, #160]	; 0xa0
   164d8:	cmp	r0, #2
   164dc:	movne	r2, #0
   164e0:	andeq	r2, r2, #1
   164e4:	cmp	r2, #0
   164e8:	bne	16474 <close_stdout@@Base+0xdf4>
   164ec:	ldr	r1, [sp, #24]
   164f0:	cmp	r1, #0
   164f4:	beq	1632c <close_stdout@@Base+0xcac>
   164f8:	mov	r4, r3
   164fc:	b	16364 <close_stdout@@Base+0xce4>
   16500:	mov	r3, #98	; 0x62
   16504:	b	164ec <close_stdout@@Base+0xe6c>
   16508:	mov	r3, #102	; 0x66
   1650c:	b	164ec <close_stdout@@Base+0xe6c>
   16510:	mov	r3, #118	; 0x76
   16514:	b	164ec <close_stdout@@Base+0xe6c>
   16518:	mov	r3, #97	; 0x61
   1651c:	b	164ec <close_stdout@@Base+0xe6c>
   16520:	mov	r3, #110	; 0x6e
   16524:	b	164d0 <close_stdout@@Base+0xe50>
   16528:	mov	r3, #116	; 0x74
   1652c:	b	164d0 <close_stdout@@Base+0xe50>
   16530:	ldr	r2, [sp, #24]
   16534:	cmp	r2, #0
   16538:	beq	16ae0 <close_stdout@@Base+0x1460>
   1653c:	ldr	r3, [sp, #36]	; 0x24
   16540:	cmp	r3, #0
   16544:	bne	16474 <close_stdout@@Base+0xdf4>
   16548:	cmp	r9, sl
   1654c:	add	r2, r9, #1
   16550:	ldrcc	r0, [sp, #40]	; 0x28
   16554:	movcc	r3, #92	; 0x5c
   16558:	strbcc	r3, [r0, r9]
   1655c:	add	r3, fp, #1
   16560:	cmp	r8, r3
   16564:	bls	165a4 <close_stdout@@Base+0xf24>
   16568:	ldr	r1, [sp, #32]
   1656c:	ldrb	r3, [r1, r3]
   16570:	sub	r3, r3, #48	; 0x30
   16574:	cmp	r3, #9
   16578:	bhi	165a4 <close_stdout@@Base+0xf24>
   1657c:	cmp	sl, r2
   16580:	ldrhi	r0, [sp, #40]	; 0x28
   16584:	movhi	r3, #48	; 0x30
   16588:	strbhi	r3, [r0, r2]
   1658c:	add	r3, r9, #2
   16590:	cmp	sl, r3
   16594:	ldrhi	r1, [sp, #40]	; 0x28
   16598:	movhi	r2, #48	; 0x30
   1659c:	strbhi	r2, [r1, r3]
   165a0:	add	r2, r9, #3
   165a4:	mov	r9, r2
   165a8:	mov	r4, #48	; 0x30
   165ac:	b	16338 <close_stdout@@Base+0xcb8>
   165b0:	ldr	r1, [sp, #76]	; 0x4c
   165b4:	cmp	r1, #0
   165b8:	beq	165c4 <close_stdout@@Base+0xf44>
   165bc:	cmp	r7, #0
   165c0:	bne	16384 <close_stdout@@Base+0xd04>
   165c4:	mov	r3, r4
   165c8:	b	164d0 <close_stdout@@Base+0xe50>
   165cc:	ldr	r1, [sp, #160]	; 0xa0
   165d0:	cmp	r1, #2
   165d4:	bne	1632c <close_stdout@@Base+0xcac>
   165d8:	ldr	r2, [sp, #36]	; 0x24
   165dc:	cmp	r2, #0
   165e0:	bne	16474 <close_stdout@@Base+0xdf4>
   165e4:	cmp	r9, sl
   165e8:	ldrcc	r0, [sp, #40]	; 0x28
   165ec:	movcc	r3, #39	; 0x27
   165f0:	strbcc	r3, [r0, r9]
   165f4:	add	r3, r9, #1
   165f8:	cmp	sl, r3
   165fc:	ldrhi	r1, [sp, #40]	; 0x28
   16600:	movhi	r2, #92	; 0x5c
   16604:	strbhi	r2, [r1, r3]
   16608:	add	r3, r9, #2
   1660c:	cmp	sl, r3
   16610:	add	r9, r9, #3
   16614:	ldrhi	r0, [sp, #40]	; 0x28
   16618:	movhi	r2, #39	; 0x27
   1661c:	strbhi	r2, [r0, r3]
   16620:	b	1632c <close_stdout@@Base+0xcac>
   16624:	ldr	r1, [sp, #64]	; 0x40
   16628:	cmp	r1, #1
   1662c:	bne	16924 <close_stdout@@Base+0x12a4>
   16630:	bl	113a8 <__ctype_b_loc@plt>
   16634:	ldr	r2, [sp, #64]	; 0x40
   16638:	sxth	r3, r4
   1663c:	str	r2, [sp, #60]	; 0x3c
   16640:	lsl	r3, r3, #1
   16644:	ldr	r2, [r0]
   16648:	ldrh	r2, [r2, r3]
   1664c:	eor	r2, r2, #16384	; 0x4000
   16650:	ubfx	r2, r2, #14, #1
   16654:	ldr	r1, [sp, #24]
   16658:	ands	r2, r2, r1
   1665c:	beq	1632c <close_stdout@@Base+0xcac>
   16660:	ldr	r3, [sp, #60]	; 0x3c
   16664:	mov	r0, #92	; 0x5c
   16668:	ldr	r7, [sp, #36]	; 0x24
   1666c:	add	r1, r3, fp
   16670:	str	r8, [sp, #60]	; 0x3c
   16674:	ldr	r3, [sp, #40]	; 0x28
   16678:	b	166dc <close_stdout@@Base+0x105c>
   1667c:	cmp	r7, #0
   16680:	bne	16b1c <close_stdout@@Base+0x149c>
   16684:	add	ip, r9, #1
   16688:	cmp	r9, sl
   1668c:	strbcc	r0, [r3, r9]
   16690:	cmp	sl, ip
   16694:	lsrhi	r8, r4, #6
   16698:	addhi	r8, r8, #48	; 0x30
   1669c:	strbhi	r8, [r3, ip]
   166a0:	add	ip, r9, #2
   166a4:	add	r9, r9, #3
   166a8:	cmp	sl, ip
   166ac:	ubfxhi	r8, r4, #3, #3
   166b0:	and	r4, r4, #7
   166b4:	add	r4, r4, #48	; 0x30
   166b8:	addhi	r8, r8, #48	; 0x30
   166bc:	strbhi	r8, [r3, ip]
   166c0:	add	fp, fp, #1
   166c4:	cmp	r1, fp
   166c8:	bls	16708 <close_stdout@@Base+0x1088>
   166cc:	cmp	r9, sl
   166d0:	strbcc	r4, [r3, r9]
   166d4:	ldrb	r4, [r5, #1]!
   166d8:	add	r9, r9, #1
   166dc:	cmp	r2, #0
   166e0:	bne	1667c <close_stdout@@Base+0xffc>
   166e4:	cmp	r6, #0
   166e8:	beq	166c0 <close_stdout@@Base+0x1040>
   166ec:	add	fp, fp, #1
   166f0:	cmp	r9, sl
   166f4:	strbcc	r0, [r3, r9]
   166f8:	cmp	r1, fp
   166fc:	add	r9, r9, #1
   16700:	mov	r6, #0
   16704:	bhi	166cc <close_stdout@@Base+0x104c>
   16708:	ldr	r8, [sp, #60]	; 0x3c
   1670c:	b	16388 <close_stdout@@Base+0xd08>
   16710:	ldr	r3, [sp, #36]	; 0x24
   16714:	cmp	r3, #0
   16718:	bne	16c1c <close_stdout@@Base+0x159c>
   1671c:	cmp	sl, #0
   16720:	beq	16b34 <close_stdout@@Base+0x14b4>
   16724:	ldr	r1, [sp, #40]	; 0x28
   16728:	mov	r0, #1
   1672c:	ldr	r2, [pc, #1296]	; 16c44 <close_stdout@@Base+0x15c4>
   16730:	mov	r3, #34	; 0x22
   16734:	str	r0, [sp, #24]
   16738:	mov	r9, r0
   1673c:	add	r2, pc, r2
   16740:	str	r0, [sp, #28]
   16744:	strb	r3, [r1]
   16748:	str	r2, [sp, #52]	; 0x34
   1674c:	b	15ff8 <close_stdout@@Base+0x978>
   16750:	ldr	r3, [pc, #1264]	; 16c48 <close_stdout@@Base+0x15c8>
   16754:	mov	r2, #1
   16758:	mov	r0, #3
   1675c:	str	r2, [sp, #36]	; 0x24
   16760:	add	r3, pc, r3
   16764:	str	r2, [sp, #24]
   16768:	str	r3, [sp, #52]	; 0x34
   1676c:	mov	r9, #0
   16770:	str	r2, [sp, #28]
   16774:	str	r0, [sp, #160]	; 0xa0
   16778:	b	15ff8 <close_stdout@@Base+0x978>
   1677c:	mov	r0, #0
   16780:	mov	r1, #1
   16784:	str	r0, [sp, #36]	; 0x24
   16788:	mov	r9, r0
   1678c:	str	r1, [sp, #24]
   16790:	str	r0, [sp, #28]
   16794:	str	r0, [sp, #52]	; 0x34
   16798:	b	15ff8 <close_stdout@@Base+0x978>
   1679c:	ldr	r3, [sp, #160]	; 0xa0
   167a0:	cmp	r3, #8
   167a4:	beq	167d0 <close_stdout@@Base+0x1150>
   167a8:	ldr	r0, [pc, #1180]	; 16c4c <close_stdout@@Base+0x15cc>
   167ac:	mov	r1, r3
   167b0:	add	r0, pc, r0
   167b4:	bl	15de0 <close_stdout@@Base+0x760>
   167b8:	ldr	r1, [sp, #160]	; 0xa0
   167bc:	str	r0, [sp, #72]	; 0x48
   167c0:	ldr	r0, [pc, #1160]	; 16c50 <close_stdout@@Base+0x15d0>
   167c4:	add	r0, pc, r0
   167c8:	bl	15de0 <close_stdout@@Base+0x760>
   167cc:	str	r0, [sp, #68]	; 0x44
   167d0:	ldr	r0, [sp, #36]	; 0x24
   167d4:	cmp	r0, #0
   167d8:	movne	r9, #0
   167dc:	bne	16814 <close_stdout@@Base+0x1194>
   167e0:	ldr	r1, [sp, #72]	; 0x48
   167e4:	ldrb	r3, [r1]
   167e8:	cmp	r3, #0
   167ec:	beq	16bec <close_stdout@@Base+0x156c>
   167f0:	mov	r2, r1
   167f4:	ldr	r1, [sp, #40]	; 0x28
   167f8:	mov	r9, r0
   167fc:	cmp	r9, sl
   16800:	strbcc	r3, [r1, r9]
   16804:	ldrb	r3, [r2, #1]!
   16808:	add	r9, r9, #1
   1680c:	cmp	r3, #0
   16810:	bne	167fc <close_stdout@@Base+0x117c>
   16814:	ldr	r0, [sp, #68]	; 0x44
   16818:	str	r0, [sp, #52]	; 0x34
   1681c:	bl	113c0 <strlen@plt>
   16820:	mov	r2, #1
   16824:	str	r2, [sp, #24]
   16828:	str	r0, [sp, #28]
   1682c:	b	15ff8 <close_stdout@@Base+0x978>
   16830:	ldr	r3, [pc, #1052]	; 16c54 <close_stdout@@Base+0x15d4>
   16834:	mov	r2, #0
   16838:	mov	r1, #1
   1683c:	mov	r0, #2
   16840:	add	r3, pc, r3
   16844:	str	r1, [sp, #36]	; 0x24
   16848:	str	r2, [sp, #24]
   1684c:	mov	r9, r2
   16850:	str	r1, [sp, #28]
   16854:	str	r3, [sp, #52]	; 0x34
   16858:	str	r0, [sp, #160]	; 0xa0
   1685c:	b	15ff8 <close_stdout@@Base+0x978>
   16860:	ldr	r3, [sp, #36]	; 0x24
   16864:	cmp	r3, #0
   16868:	bne	16bf8 <close_stdout@@Base+0x1578>
   1686c:	cmp	sl, #0
   16870:	beq	16b54 <close_stdout@@Base+0x14d4>
   16874:	ldr	r1, [sp, #40]	; 0x28
   16878:	mov	r3, #39	; 0x27
   1687c:	ldr	r2, [sp, #36]	; 0x24
   16880:	mov	r0, #1
   16884:	mov	r9, r0
   16888:	str	r0, [sp, #28]
   1688c:	strb	r3, [r1]
   16890:	ldr	r3, [pc, #960]	; 16c58 <close_stdout@@Base+0x15d8>
   16894:	str	r2, [sp, #24]
   16898:	add	r3, pc, r3
   1689c:	str	r3, [sp, #52]	; 0x34
   168a0:	b	15ff8 <close_stdout@@Base+0x978>
   168a4:	ldr	r2, [sp, #28]
   168a8:	cmp	r2, #1
   168ac:	add	r4, fp, r2
   168b0:	movls	r3, #0
   168b4:	movhi	r3, #1
   168b8:	cmn	r8, #1
   168bc:	movne	r3, #0
   168c0:	cmp	r3, #0
   168c4:	beq	168d4 <close_stdout@@Base+0x1254>
   168c8:	ldr	r0, [sp, #32]
   168cc:	bl	113c0 <strlen@plt>
   168d0:	mov	r8, r0
   168d4:	cmp	r8, r4
   168d8:	ldrcc	r3, [sp, #32]
   168dc:	movcc	r6, #0
   168e0:	addcc	r5, r3, fp
   168e4:	bcc	16054 <close_stdout@@Base+0x9d4>
   168e8:	ldr	r0, [sp, #32]
   168ec:	ldr	r1, [sp, #52]	; 0x34
   168f0:	add	r5, r0, fp
   168f4:	ldr	r2, [sp, #28]
   168f8:	mov	r0, r5
   168fc:	bl	11294 <memcmp@plt>
   16900:	cmp	r0, #0
   16904:	bne	1691c <close_stdout@@Base+0x129c>
   16908:	ldr	r1, [sp, #36]	; 0x24
   1690c:	cmp	r1, #0
   16910:	bne	16474 <close_stdout@@Base+0xdf4>
   16914:	mov	r6, #1
   16918:	b	16054 <close_stdout@@Base+0x9d4>
   1691c:	mov	r6, #0
   16920:	b	16054 <close_stdout@@Base+0x9d4>
   16924:	add	r7, sp, #108	; 0x6c
   16928:	cmn	r8, #1
   1692c:	mov	r3, #0
   16930:	str	r3, [sp, #108]	; 0x6c
   16934:	str	r3, [r7, #4]
   16938:	beq	16b24 <close_stdout@@Base+0x14a4>
   1693c:	mov	r1, #0
   16940:	ldr	r0, [sp, #32]
   16944:	mov	ip, #1
   16948:	str	r9, [sp, #88]	; 0x58
   1694c:	str	r6, [sp, #96]	; 0x60
   16950:	mov	r9, r1
   16954:	str	r5, [sp, #100]	; 0x64
   16958:	mov	r6, ip
   1695c:	mov	r5, r7
   16960:	add	r3, sp, #104	; 0x68
   16964:	sub	r0, r0, #1
   16968:	str	r3, [sp, #80]	; 0x50
   1696c:	str	r0, [sp, #84]	; 0x54
   16970:	str	r1, [sp, #60]	; 0x3c
   16974:	str	r4, [sp, #92]	; 0x5c
   16978:	ldr	r2, [sp, #32]
   1697c:	add	r7, r9, fp
   16980:	add	r0, sp, #104	; 0x68
   16984:	mov	r3, r5
   16988:	add	r4, r2, r7
   1698c:	rsb	r2, r7, r8
   16990:	mov	r1, r4
   16994:	bl	11324 <mbrtowc@plt>
   16998:	subs	r2, r0, #0
   1699c:	beq	16aa8 <close_stdout@@Base+0x1428>
   169a0:	cmn	r2, #1
   169a4:	beq	16bd0 <close_stdout@@Base+0x1550>
   169a8:	cmn	r2, #2
   169ac:	beq	16b74 <close_stdout@@Base+0x14f4>
   169b0:	ldr	r3, [sp, #36]	; 0x24
   169b4:	ldr	r0, [sp, #160]	; 0xa0
   169b8:	cmp	r0, #2
   169bc:	movne	r3, #0
   169c0:	andeq	r3, r3, #1
   169c4:	cmp	r3, #0
   169c8:	beq	16a84 <close_stdout@@Base+0x1404>
   169cc:	cmp	r2, #1
   169d0:	beq	16a84 <close_stdout@@Base+0x1404>
   169d4:	ldr	r1, [sp, #84]	; 0x54
   169d8:	add	r3, r1, r2
   169dc:	add	r7, r3, r7
   169e0:	ldrb	r3, [r4, #1]!
   169e4:	sub	r3, r3, #91	; 0x5b
   169e8:	cmp	r3, #33	; 0x21
   169ec:	addls	pc, pc, r3, lsl #2
   169f0:	b	16a7c <close_stdout@@Base+0x13fc>
   169f4:	b	16474 <close_stdout@@Base+0xdf4>
   169f8:	b	16474 <close_stdout@@Base+0xdf4>
   169fc:	b	16a7c <close_stdout@@Base+0x13fc>
   16a00:	b	16474 <close_stdout@@Base+0xdf4>
   16a04:	b	16a7c <close_stdout@@Base+0x13fc>
   16a08:	b	16474 <close_stdout@@Base+0xdf4>
   16a0c:	b	16a7c <close_stdout@@Base+0x13fc>
   16a10:	b	16a7c <close_stdout@@Base+0x13fc>
   16a14:	b	16a7c <close_stdout@@Base+0x13fc>
   16a18:	b	16a7c <close_stdout@@Base+0x13fc>
   16a1c:	b	16a7c <close_stdout@@Base+0x13fc>
   16a20:	b	16a7c <close_stdout@@Base+0x13fc>
   16a24:	b	16a7c <close_stdout@@Base+0x13fc>
   16a28:	b	16a7c <close_stdout@@Base+0x13fc>
   16a2c:	b	16a7c <close_stdout@@Base+0x13fc>
   16a30:	b	16a7c <close_stdout@@Base+0x13fc>
   16a34:	b	16a7c <close_stdout@@Base+0x13fc>
   16a38:	b	16a7c <close_stdout@@Base+0x13fc>
   16a3c:	b	16a7c <close_stdout@@Base+0x13fc>
   16a40:	b	16a7c <close_stdout@@Base+0x13fc>
   16a44:	b	16a7c <close_stdout@@Base+0x13fc>
   16a48:	b	16a7c <close_stdout@@Base+0x13fc>
   16a4c:	b	16a7c <close_stdout@@Base+0x13fc>
   16a50:	b	16a7c <close_stdout@@Base+0x13fc>
   16a54:	b	16a7c <close_stdout@@Base+0x13fc>
   16a58:	b	16a7c <close_stdout@@Base+0x13fc>
   16a5c:	b	16a7c <close_stdout@@Base+0x13fc>
   16a60:	b	16a7c <close_stdout@@Base+0x13fc>
   16a64:	b	16a7c <close_stdout@@Base+0x13fc>
   16a68:	b	16a7c <close_stdout@@Base+0x13fc>
   16a6c:	b	16a7c <close_stdout@@Base+0x13fc>
   16a70:	b	16a7c <close_stdout@@Base+0x13fc>
   16a74:	b	16a7c <close_stdout@@Base+0x13fc>
   16a78:	b	16474 <close_stdout@@Base+0xdf4>
   16a7c:	cmp	r4, r7
   16a80:	bne	169e0 <close_stdout@@Base+0x1360>
   16a84:	ldr	r0, [sp, #104]	; 0x68
   16a88:	add	r9, r9, r2
   16a8c:	bl	112d0 <iswprint@plt>
   16a90:	cmp	r0, #0
   16a94:	mov	r0, r5
   16a98:	moveq	r6, #0
   16a9c:	bl	11270 <mbsinit@plt>
   16aa0:	cmp	r0, #0
   16aa4:	beq	16978 <close_stdout@@Base+0x12f8>
   16aa8:	mov	ip, r6
   16aac:	eor	r2, ip, #1
   16ab0:	str	r9, [sp, #60]	; 0x3c
   16ab4:	ldr	r4, [sp, #92]	; 0x5c
   16ab8:	uxtb	r2, r2
   16abc:	ldr	r9, [sp, #88]	; 0x58
   16ac0:	ldr	r6, [sp, #96]	; 0x60
   16ac4:	ldr	r5, [sp, #100]	; 0x64
   16ac8:	ldr	r3, [sp, #60]	; 0x3c
   16acc:	cmp	r3, #1
   16ad0:	bls	16654 <close_stdout@@Base+0xfd4>
   16ad4:	ldr	r0, [sp, #24]
   16ad8:	and	r2, r2, r0
   16adc:	b	16660 <close_stdout@@Base+0xfe0>
   16ae0:	ldr	r2, [sp, #164]	; 0xa4
   16ae4:	tst	r2, #1
   16ae8:	addne	fp, fp, #1
   16aec:	bne	1601c <close_stdout@@Base+0x99c>
   16af0:	b	1632c <close_stdout@@Base+0xcac>
   16af4:	ldr	r0, [sp, #36]	; 0x24
   16af8:	cmp	r0, #0
   16afc:	beq	1632c <close_stdout@@Base+0xcac>
   16b00:	b	16474 <close_stdout@@Base+0xdf4>
   16b04:	ldr	r2, [sp, #32]
   16b08:	ldrb	r3, [r2, #1]
   16b0c:	adds	r3, r3, #0
   16b10:	movne	r3, #1
   16b14:	b	16448 <close_stdout@@Base+0xdc8>
   16b18:	bl	11504 <abort@plt>
   16b1c:	ldr	r8, [sp, #60]	; 0x3c
   16b20:	b	16474 <close_stdout@@Base+0xdf4>
   16b24:	ldr	r0, [sp, #32]
   16b28:	bl	113c0 <strlen@plt>
   16b2c:	mov	r8, r0
   16b30:	b	1693c <close_stdout@@Base+0x12bc>
   16b34:	ldr	r2, [pc, #288]	; 16c5c <close_stdout@@Base+0x15dc>
   16b38:	mov	r1, #1
   16b3c:	mov	r9, r1
   16b40:	str	r1, [sp, #24]
   16b44:	add	r2, pc, r2
   16b48:	str	r1, [sp, #28]
   16b4c:	str	r2, [sp, #52]	; 0x34
   16b50:	b	15ff8 <close_stdout@@Base+0x978>
   16b54:	ldr	r2, [pc, #260]	; 16c60 <close_stdout@@Base+0x15e0>
   16b58:	mov	r3, #1
   16b5c:	mov	r9, r3
   16b60:	str	r3, [sp, #28]
   16b64:	add	r2, pc, r2
   16b68:	str	sl, [sp, #24]
   16b6c:	str	r2, [sp, #52]	; 0x34
   16b70:	b	15ff8 <close_stdout@@Base+0x978>
   16b74:	cmp	r8, r7
   16b78:	str	r9, [sp, #60]	; 0x3c
   16b7c:	mov	ip, r4
   16b80:	ldr	r6, [sp, #96]	; 0x60
   16b84:	ldr	r9, [sp, #88]	; 0x58
   16b88:	ldr	r4, [sp, #92]	; 0x5c
   16b8c:	ldr	r5, [sp, #100]	; 0x64
   16b90:	bls	16bc8 <close_stdout@@Base+0x1548>
   16b94:	ldrb	r3, [ip]
   16b98:	cmp	r3, #0
   16b9c:	beq	16bc8 <close_stdout@@Base+0x1548>
   16ba0:	ldr	r3, [sp, #60]	; 0x3c
   16ba4:	b	16bb4 <close_stdout@@Base+0x1534>
   16ba8:	ldrb	r2, [r5, r3]
   16bac:	cmp	r2, #0
   16bb0:	beq	16bc4 <close_stdout@@Base+0x1544>
   16bb4:	add	r3, r3, #1
   16bb8:	add	r2, fp, r3
   16bbc:	cmp	r8, r2
   16bc0:	bhi	16ba8 <close_stdout@@Base+0x1528>
   16bc4:	str	r3, [sp, #60]	; 0x3c
   16bc8:	mov	r2, #1
   16bcc:	b	16ac8 <close_stdout@@Base+0x1448>
   16bd0:	str	r9, [sp, #60]	; 0x3c
   16bd4:	mov	r2, #1
   16bd8:	ldr	r4, [sp, #92]	; 0x5c
   16bdc:	ldr	r6, [sp, #96]	; 0x60
   16be0:	ldr	r9, [sp, #88]	; 0x58
   16be4:	ldr	r5, [sp, #100]	; 0x64
   16be8:	b	16ac8 <close_stdout@@Base+0x1448>
   16bec:	ldr	r9, [sp, #36]	; 0x24
   16bf0:	b	16814 <close_stdout@@Base+0x1194>
   16bf4:	bl	112ac <__stack_chk_fail@plt>
   16bf8:	ldr	r1, [pc, #100]	; 16c64 <close_stdout@@Base+0x15e4>
   16bfc:	mov	r3, #0
   16c00:	mov	r0, #1
   16c04:	str	r3, [sp, #24]
   16c08:	add	r1, pc, r1
   16c0c:	str	r0, [sp, #28]
   16c10:	mov	r9, r3
   16c14:	str	r1, [sp, #52]	; 0x34
   16c18:	b	15ff8 <close_stdout@@Base+0x978>
   16c1c:	ldr	r0, [pc, #68]	; 16c68 <close_stdout@@Base+0x15e8>
   16c20:	mov	r3, #1
   16c24:	mov	r9, #0
   16c28:	str	r3, [sp, #24]
   16c2c:	add	r0, pc, r0
   16c30:	str	r3, [sp, #28]
   16c34:	str	r0, [sp, #52]	; 0x34
   16c38:	b	15ff8 <close_stdout@@Base+0x978>
   16c3c:	muleq	r1, r8, r0
   16c40:	andeq	r0, r0, r8, lsr #2
   16c44:			; <UNDEFINED> instruction: 0x000066b0
   16c48:	andeq	r6, r0, ip, lsl #13
   16c4c:	andeq	r6, r0, r8, asr #12
   16c50:	andeq	r6, r0, r4, lsr #12
   16c54:	andeq	r6, r0, r8, lsr #11
   16c58:	andeq	r6, r0, r0, asr r5
   16c5c:	andeq	r6, r0, r8, lsr #5
   16c60:	andeq	r6, r0, r4, lsl #5
   16c64:	andeq	r6, r0, r0, ror #3
   16c68:	andeq	r6, r0, r0, asr #3
   16c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c70:	sub	sp, sp, #44	; 0x2c
   16c74:	mov	r6, r0
   16c78:	mov	r9, r1
   16c7c:	mov	sl, r2
   16c80:	mov	r4, r3
   16c84:	bl	113e4 <__errno_location@plt>
   16c88:	ldr	fp, [pc, #412]	; 16e2c <close_stdout@@Base+0x17ac>
   16c8c:	cmp	r6, #0
   16c90:	add	fp, pc, fp
   16c94:	ldr	r5, [fp]
   16c98:	ldr	r1, [r0]
   16c9c:	mov	r8, r0
   16ca0:	str	r1, [sp, #36]	; 0x24
   16ca4:	blt	16e24 <close_stdout@@Base+0x17a4>
   16ca8:	ldr	r3, [pc, #384]	; 16e30 <close_stdout@@Base+0x17b0>
   16cac:	add	r3, pc, r3
   16cb0:	ldr	r3, [r3]
   16cb4:	cmp	r6, r3
   16cb8:	bcc	16d0c <close_stdout@@Base+0x168c>
   16cbc:	add	r7, r6, #1
   16cc0:	cmn	r7, #-536870911	; 0xe0000001
   16cc4:	bhi	16e28 <close_stdout@@Base+0x17a8>
   16cc8:	add	r3, fp, #4
   16ccc:	cmp	r5, r3
   16cd0:	beq	16dfc <close_stdout@@Base+0x177c>
   16cd4:	mov	r0, r5
   16cd8:	lsl	r1, r7, #3
   16cdc:	bl	17b04 <close_stdout@@Base+0x2484>
   16ce0:	mov	r5, r0
   16ce4:	str	r0, [fp]
   16ce8:	ldr	fp, [pc, #324]	; 16e34 <close_stdout@@Base+0x17b4>
   16cec:	mov	r1, #0
   16cf0:	add	fp, pc, fp
   16cf4:	ldr	r0, [fp]
   16cf8:	rsb	r2, r0, r7
   16cfc:	add	r0, r5, r0, lsl #3
   16d00:	lsl	r2, r2, #3
   16d04:	bl	11414 <memset@plt>
   16d08:	str	r7, [fp]
   16d0c:	add	r2, r4, #8
   16d10:	str	r2, [sp, #32]
   16d14:	ldr	r1, [r4]
   16d18:	add	fp, r5, r6, lsl #3
   16d1c:	ldr	lr, [sp, #32]
   16d20:	mov	r2, r9
   16d24:	ldr	r3, [r4, #4]
   16d28:	ldr	ip, [r5, r6, lsl #3]
   16d2c:	ldr	r7, [fp, #4]
   16d30:	orr	r3, r3, #1
   16d34:	str	r1, [sp]
   16d38:	str	r3, [sp, #4]
   16d3c:	mov	r1, ip
   16d40:	str	lr, [sp, #8]
   16d44:	mov	r0, r7
   16d48:	ldr	lr, [r4, #40]	; 0x28
   16d4c:	str	r3, [sp, #28]
   16d50:	mov	r3, sl
   16d54:	str	lr, [sp, #12]
   16d58:	ldr	lr, [r4, #44]	; 0x2c
   16d5c:	str	ip, [sp, #24]
   16d60:	str	lr, [sp, #16]
   16d64:	bl	15f44 <close_stdout@@Base+0x8c4>
   16d68:	ldr	ip, [sp, #24]
   16d6c:	cmp	ip, r0
   16d70:	bhi	16de8 <close_stdout@@Base+0x1768>
   16d74:	ldr	r3, [pc, #188]	; 16e38 <close_stdout@@Base+0x17b8>
   16d78:	add	r1, r0, #1
   16d7c:	str	r1, [r5, r6, lsl #3]
   16d80:	add	r3, pc, r3
   16d84:	cmp	r7, r3
   16d88:	beq	16d9c <close_stdout@@Base+0x171c>
   16d8c:	mov	r0, r7
   16d90:	str	r1, [sp, #24]
   16d94:	bl	11234 <free@plt>
   16d98:	ldr	r1, [sp, #24]
   16d9c:	mov	r0, r1
   16da0:	str	r1, [sp, #24]
   16da4:	bl	17aac <close_stdout@@Base+0x242c>
   16da8:	ldr	r3, [sp, #28]
   16dac:	ldr	lr, [sp, #32]
   16db0:	mov	r2, r9
   16db4:	str	r0, [fp, #4]
   16db8:	mov	r7, r0
   16dbc:	ldr	ip, [r4]
   16dc0:	str	r3, [sp, #4]
   16dc4:	mov	r3, sl
   16dc8:	str	lr, [sp, #8]
   16dcc:	str	ip, [sp]
   16dd0:	ldr	ip, [r4, #40]	; 0x28
   16dd4:	ldr	r1, [sp, #24]
   16dd8:	str	ip, [sp, #12]
   16ddc:	ldr	ip, [r4, #44]	; 0x2c
   16de0:	str	ip, [sp, #16]
   16de4:	bl	15f44 <close_stdout@@Base+0x8c4>
   16de8:	ldr	r1, [sp, #36]	; 0x24
   16dec:	mov	r0, r7
   16df0:	str	r1, [r8]
   16df4:	add	sp, sp, #44	; 0x2c
   16df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dfc:	lsl	r1, r7, #3
   16e00:	mov	r0, #0
   16e04:	str	r3, [sp, #24]
   16e08:	bl	17b04 <close_stdout@@Base+0x2484>
   16e0c:	ldr	r3, [sp, #24]
   16e10:	mov	r5, r0
   16e14:	ldm	r3, {r0, r1}
   16e18:	str	r5, [fp]
   16e1c:	stm	r5, {r0, r1}
   16e20:	b	16ce8 <close_stdout@@Base+0x1668>
   16e24:	bl	11504 <abort@plt>
   16e28:	bl	17cc0 <close_stdout@@Base+0x2640>
   16e2c:	andeq	r7, r1, r0, lsl r5
   16e30:	andeq	r7, r1, r0, asr #9
   16e34:	andeq	r7, r1, ip, ror r4
   16e38:	andeq	r7, r1, r4, ror #9
   16e3c:	push	{r4, r5, r6, lr}
   16e40:	mov	r5, r0
   16e44:	bl	113e4 <__errno_location@plt>
   16e48:	cmp	r5, #0
   16e4c:	mov	r1, #48	; 0x30
   16e50:	mov	r4, r0
   16e54:	ldr	r0, [pc, #24]	; 16e74 <close_stdout@@Base+0x17f4>
   16e58:	ldr	r6, [r4]
   16e5c:	add	r0, pc, r0
   16e60:	add	r0, r0, #256	; 0x100
   16e64:	movne	r0, r5
   16e68:	bl	17c80 <close_stdout@@Base+0x2600>
   16e6c:	str	r6, [r4]
   16e70:	pop	{r4, r5, r6, pc}
   16e74:	andeq	r7, r1, r8, lsl #8
   16e78:	cmp	r0, #0
   16e7c:	beq	16e88 <close_stdout@@Base+0x1808>
   16e80:	ldr	r0, [r0]
   16e84:	bx	lr
   16e88:	ldr	r0, [pc, #12]	; 16e9c <close_stdout@@Base+0x181c>
   16e8c:	add	r0, pc, r0
   16e90:	add	r0, r0, #256	; 0x100
   16e94:	ldr	r0, [r0]
   16e98:	bx	lr
   16e9c:	ldrdeq	r7, [r1], -r8
   16ea0:	cmp	r0, #0
   16ea4:	beq	16eb0 <close_stdout@@Base+0x1830>
   16ea8:	str	r1, [r0]
   16eac:	bx	lr
   16eb0:	ldr	r0, [pc, #12]	; 16ec4 <close_stdout@@Base+0x1844>
   16eb4:	add	r0, pc, r0
   16eb8:	add	r0, r0, #256	; 0x100
   16ebc:	str	r1, [r0]
   16ec0:	bx	lr
   16ec4:			; <UNDEFINED> instruction: 0x000173b0
   16ec8:	cmp	r0, #0
   16ecc:	movne	r3, r0
   16ed0:	beq	16f00 <close_stdout@@Base+0x1880>
   16ed4:	lsr	ip, r1, #5
   16ed8:	and	r1, r1, #31
   16edc:	add	r3, r3, ip, lsl #2
   16ee0:	ldr	ip, [r3, #8]
   16ee4:	lsr	r0, ip, r1
   16ee8:	eor	r2, r0, r2
   16eec:	and	r0, r0, #1
   16ef0:	and	r2, r2, #1
   16ef4:	eor	ip, ip, r2, lsl r1
   16ef8:	str	ip, [r3, #8]
   16efc:	bx	lr
   16f00:	ldr	r3, [pc, #8]	; 16f10 <close_stdout@@Base+0x1890>
   16f04:	add	r3, pc, r3
   16f08:	add	r3, r3, #256	; 0x100
   16f0c:	b	16ed4 <close_stdout@@Base+0x1854>
   16f10:	andeq	r7, r1, r0, ror #6
   16f14:	subs	r3, r0, #0
   16f18:	beq	16f28 <close_stdout@@Base+0x18a8>
   16f1c:	ldr	r0, [r3, #4]
   16f20:	str	r1, [r3, #4]
   16f24:	bx	lr
   16f28:	ldr	r3, [pc, #8]	; 16f38 <close_stdout@@Base+0x18b8>
   16f2c:	add	r3, pc, r3
   16f30:	add	r3, r3, #256	; 0x100
   16f34:	b	16f1c <close_stdout@@Base+0x189c>
   16f38:	andeq	r7, r1, r8, lsr r3
   16f3c:	cmp	r0, #0
   16f40:	push	{r3, lr}
   16f44:	beq	16f68 <close_stdout@@Base+0x18e8>
   16f48:	cmp	r2, #0
   16f4c:	cmpne	r1, #0
   16f50:	mov	r3, #8
   16f54:	strne	r1, [r0, #40]	; 0x28
   16f58:	str	r3, [r0]
   16f5c:	strne	r2, [r0, #44]	; 0x2c
   16f60:	popne	{r3, pc}
   16f64:	bl	11504 <abort@plt>
   16f68:	ldr	r0, [pc, #8]	; 16f78 <close_stdout@@Base+0x18f8>
   16f6c:	add	r0, pc, r0
   16f70:	add	r0, r0, #256	; 0x100
   16f74:	b	16f48 <close_stdout@@Base+0x18c8>
   16f78:	strdeq	r7, [r1], -r8
   16f7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f80:	sub	sp, sp, #24
   16f84:	mov	r7, r0
   16f88:	mov	sl, r1
   16f8c:	ldr	r4, [sp, #56]	; 0x38
   16f90:	mov	r9, r2
   16f94:	mov	r8, r3
   16f98:	cmp	r4, #0
   16f9c:	beq	16ff0 <close_stdout@@Base+0x1970>
   16fa0:	bl	113e4 <__errno_location@plt>
   16fa4:	ldr	r3, [r4]
   16fa8:	add	lr, r4, #8
   16fac:	mov	r1, sl
   16fb0:	mov	r2, r9
   16fb4:	ldr	r6, [r0]
   16fb8:	mov	r5, r0
   16fbc:	str	r3, [sp]
   16fc0:	mov	r0, r7
   16fc4:	ldr	ip, [r4, #4]
   16fc8:	mov	r3, r8
   16fcc:	stmib	sp, {ip, lr}
   16fd0:	ldr	ip, [r4, #40]	; 0x28
   16fd4:	str	ip, [sp, #12]
   16fd8:	ldr	ip, [r4, #44]	; 0x2c
   16fdc:	str	ip, [sp, #16]
   16fe0:	bl	15f44 <close_stdout@@Base+0x8c4>
   16fe4:	str	r6, [r5]
   16fe8:	add	sp, sp, #24
   16fec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ff0:	ldr	r4, [pc, #8]	; 17000 <close_stdout@@Base+0x1980>
   16ff4:	add	r4, pc, r4
   16ff8:	add	r4, r4, #256	; 0x100
   16ffc:	b	16fa0 <close_stdout@@Base+0x1920>
   17000:	andeq	r7, r1, r0, ror r2
   17004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17008:	subs	r4, r3, #0
   1700c:	sub	sp, sp, #36	; 0x24
   17010:	mov	r7, r0
   17014:	mov	r6, r1
   17018:	mov	r5, r2
   1701c:	beq	170d8 <close_stdout@@Base+0x1a58>
   17020:	bl	113e4 <__errno_location@plt>
   17024:	ldr	r3, [r4]
   17028:	ldr	sl, [r4, #4]
   1702c:	add	r9, r4, #8
   17030:	mov	r8, r0
   17034:	mov	r0, #0
   17038:	ldr	r2, [r8]
   1703c:	cmp	r5, r0
   17040:	orreq	sl, sl, #1
   17044:	str	r9, [sp, #8]
   17048:	mov	r1, r0
   1704c:	stm	sp, {r3, sl}
   17050:	mov	r3, r6
   17054:	ldr	ip, [r4, #40]	; 0x28
   17058:	str	r2, [sp, #28]
   1705c:	mov	r2, r7
   17060:	str	ip, [sp, #12]
   17064:	ldr	ip, [r4, #44]	; 0x2c
   17068:	str	ip, [sp, #16]
   1706c:	bl	15f44 <close_stdout@@Base+0x8c4>
   17070:	add	r1, r0, #1
   17074:	mov	fp, r0
   17078:	str	r1, [sp, #24]
   1707c:	mov	r0, r1
   17080:	bl	17aac <close_stdout@@Base+0x242c>
   17084:	ldr	lr, [r4]
   17088:	str	sl, [sp, #4]
   1708c:	mov	r3, r6
   17090:	str	r9, [sp, #8]
   17094:	mov	r2, r7
   17098:	str	lr, [sp]
   1709c:	ldr	lr, [r4, #40]	; 0x28
   170a0:	ldr	r1, [sp, #24]
   170a4:	str	lr, [sp, #12]
   170a8:	ldr	lr, [r4, #44]	; 0x2c
   170ac:	str	lr, [sp, #16]
   170b0:	str	r0, [sp, #24]
   170b4:	bl	15f44 <close_stdout@@Base+0x8c4>
   170b8:	ldr	r3, [sp, #28]
   170bc:	cmp	r5, #0
   170c0:	str	r3, [r8]
   170c4:	ldr	ip, [sp, #24]
   170c8:	strne	fp, [r5]
   170cc:	mov	r0, ip
   170d0:	add	sp, sp, #36	; 0x24
   170d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d8:	ldr	r4, [pc, #8]	; 170e8 <close_stdout@@Base+0x1a68>
   170dc:	add	r4, pc, r4
   170e0:	add	r4, r4, #256	; 0x100
   170e4:	b	17020 <close_stdout@@Base+0x19a0>
   170e8:	andeq	r7, r1, r8, lsl #3
   170ec:	mov	r3, r2
   170f0:	mov	r2, #0
   170f4:	b	17004 <close_stdout@@Base+0x1984>
   170f8:	ldr	r2, [pc, #152]	; 17198 <close_stdout@@Base+0x1b18>
   170fc:	push	{r3, r4, r5, r6, r7, lr}
   17100:	add	r2, pc, r2
   17104:	ldr	r3, [pc, #144]	; 1719c <close_stdout@@Base+0x1b1c>
   17108:	ldr	r6, [r2]
   1710c:	add	r3, pc, r3
   17110:	cmp	r6, #1
   17114:	ldr	r7, [r3]
   17118:	movhi	r4, #1
   1711c:	movhi	r5, r7
   17120:	bls	1713c <close_stdout@@Base+0x1abc>
   17124:	ldr	r0, [r5, #12]
   17128:	add	r4, r4, #1
   1712c:	bl	11234 <free@plt>
   17130:	cmp	r4, r6
   17134:	add	r5, r5, #8
   17138:	bne	17124 <close_stdout@@Base+0x1aa4>
   1713c:	ldr	r4, [pc, #92]	; 171a0 <close_stdout@@Base+0x1b20>
   17140:	ldr	r0, [r7, #4]
   17144:	add	r4, pc, r4
   17148:	cmp	r0, r4
   1714c:	beq	17164 <close_stdout@@Base+0x1ae4>
   17150:	bl	11234 <free@plt>
   17154:	ldr	r3, [pc, #72]	; 171a4 <close_stdout@@Base+0x1b24>
   17158:	mov	r2, #256	; 0x100
   1715c:	add	r3, pc, r3
   17160:	stmib	r3, {r2, r4}
   17164:	ldr	r4, [pc, #60]	; 171a8 <close_stdout@@Base+0x1b28>
   17168:	add	r4, pc, r4
   1716c:	add	r5, r4, #4
   17170:	cmp	r7, r5
   17174:	beq	17184 <close_stdout@@Base+0x1b04>
   17178:	mov	r0, r7
   1717c:	bl	11234 <free@plt>
   17180:	str	r5, [r4]
   17184:	ldr	r3, [pc, #32]	; 171ac <close_stdout@@Base+0x1b2c>
   17188:	mov	r2, #1
   1718c:	add	r3, pc, r3
   17190:	str	r2, [r3]
   17194:	pop	{r3, r4, r5, r6, r7, pc}
   17198:	andeq	r7, r1, ip, rrx
   1719c:	muleq	r1, r4, r0
   171a0:	andeq	r7, r1, r0, lsr #2
   171a4:	andeq	r7, r1, r4, asr #32
   171a8:	andeq	r7, r1, r8, lsr r0
   171ac:	andeq	r6, r1, r0, ror #31
   171b0:	ldr	r3, [pc, #12]	; 171c4 <close_stdout@@Base+0x1b44>
   171b4:	mvn	r2, #0
   171b8:	add	r3, pc, r3
   171bc:	add	r3, r3, #256	; 0x100
   171c0:	b	16c6c <close_stdout@@Base+0x15ec>
   171c4:	andeq	r7, r1, ip, lsr #1
   171c8:	ldr	r3, [pc, #8]	; 171d8 <close_stdout@@Base+0x1b58>
   171cc:	add	r3, pc, r3
   171d0:	add	r3, r3, #256	; 0x100
   171d4:	b	16c6c <close_stdout@@Base+0x15ec>
   171d8:	muleq	r1, r8, r0
   171dc:	mov	r1, r0
   171e0:	mov	r0, #0
   171e4:	b	171b0 <close_stdout@@Base+0x1b30>
   171e8:	mov	r2, r1
   171ec:	mov	r1, r0
   171f0:	mov	r0, #0
   171f4:	b	171c8 <close_stdout@@Base+0x1b48>
   171f8:	ldr	r3, [pc, #92]	; 1725c <close_stdout@@Base+0x1bdc>
   171fc:	ldr	ip, [pc, #92]	; 17260 <close_stdout@@Base+0x1be0>
   17200:	add	r3, pc, r3
   17204:	push	{r4, r5, r6, r7, lr}
   17208:	sub	sp, sp, #60	; 0x3c
   1720c:	ldr	r4, [r3, ip]
   17210:	add	r5, sp, #4
   17214:	mov	r7, r2
   17218:	mov	r6, r0
   1721c:	mov	r0, r5
   17220:	ldr	r3, [r4]
   17224:	str	r3, [sp, #52]	; 0x34
   17228:	bl	15d8c <close_stdout@@Base+0x70c>
   1722c:	mov	r3, r5
   17230:	mvn	r2, #0
   17234:	mov	r0, r6
   17238:	mov	r1, r7
   1723c:	bl	16c6c <close_stdout@@Base+0x15ec>
   17240:	ldr	r2, [sp, #52]	; 0x34
   17244:	ldr	r3, [r4]
   17248:	cmp	r2, r3
   1724c:	bne	17258 <close_stdout@@Base+0x1bd8>
   17250:	add	sp, sp, #60	; 0x3c
   17254:	pop	{r4, r5, r6, r7, pc}
   17258:	bl	112ac <__stack_chk_fail@plt>
   1725c:	strdeq	r6, [r1], -r8
   17260:	andeq	r0, r0, r8, lsr #2
   17264:	ldr	ip, [pc, #96]	; 172cc <close_stdout@@Base+0x1c4c>
   17268:	push	{r4, r5, r6, r7, r8, lr}
   1726c:	add	ip, pc, ip
   17270:	ldr	lr, [pc, #88]	; 172d0 <close_stdout@@Base+0x1c50>
   17274:	sub	sp, sp, #56	; 0x38
   17278:	mov	r8, r3
   1727c:	add	r5, sp, #4
   17280:	mov	r7, r2
   17284:	mov	r6, r0
   17288:	ldr	r4, [ip, lr]
   1728c:	mov	r0, r5
   17290:	ldr	r3, [r4]
   17294:	str	r3, [sp, #52]	; 0x34
   17298:	bl	15d8c <close_stdout@@Base+0x70c>
   1729c:	mov	r2, r8
   172a0:	mov	r3, r5
   172a4:	mov	r0, r6
   172a8:	mov	r1, r7
   172ac:	bl	16c6c <close_stdout@@Base+0x15ec>
   172b0:	ldr	r2, [sp, #52]	; 0x34
   172b4:	ldr	r3, [r4]
   172b8:	cmp	r2, r3
   172bc:	bne	172c8 <close_stdout@@Base+0x1c48>
   172c0:	add	sp, sp, #56	; 0x38
   172c4:	pop	{r4, r5, r6, r7, r8, pc}
   172c8:	bl	112ac <__stack_chk_fail@plt>
   172cc:	andeq	r6, r1, ip, lsl #27
   172d0:	andeq	r0, r0, r8, lsr #2
   172d4:	mov	r2, r1
   172d8:	mov	r1, r0
   172dc:	mov	r0, #0
   172e0:	b	171f8 <close_stdout@@Base+0x1b78>
   172e4:	mov	ip, r1
   172e8:	mov	r3, r2
   172ec:	mov	r1, r0
   172f0:	mov	r2, ip
   172f4:	mov	r0, #0
   172f8:	b	17264 <close_stdout@@Base+0x1be4>
   172fc:	push	{r4, r5, r6, r7, r8, lr}
   17300:	mov	r5, r2
   17304:	ldr	lr, [pc, #136]	; 17394 <close_stdout@@Base+0x1d14>
   17308:	mov	r7, r0
   1730c:	mov	r6, r1
   17310:	ldr	r4, [pc, #128]	; 17398 <close_stdout@@Base+0x1d18>
   17314:	add	lr, pc, lr
   17318:	sub	sp, sp, #56	; 0x38
   1731c:	add	lr, lr, #256	; 0x100
   17320:	ldr	r8, [pc, #116]	; 1739c <close_stdout@@Base+0x1d1c>
   17324:	add	r4, pc, r4
   17328:	add	ip, sp, #4
   1732c:	ldm	lr!, {r0, r1, r2, r3}
   17330:	ldr	r4, [r4, r8]
   17334:	stmia	ip!, {r0, r1, r2, r3}
   17338:	ldm	lr!, {r0, r1, r2, r3}
   1733c:	ldr	r8, [r4]
   17340:	stmia	ip!, {r0, r1, r2, r3}
   17344:	ldm	lr, {r0, r1, r2, r3}
   17348:	str	r8, [sp, #52]	; 0x34
   1734c:	stm	ip, {r0, r1, r2, r3}
   17350:	mov	r1, r5
   17354:	add	r5, sp, #4
   17358:	mov	r2, #1
   1735c:	mov	r0, r5
   17360:	bl	16ec8 <close_stdout@@Base+0x1848>
   17364:	mov	r2, r6
   17368:	mov	r3, r5
   1736c:	mov	r1, r7
   17370:	mov	r0, #0
   17374:	bl	16c6c <close_stdout@@Base+0x15ec>
   17378:	ldr	r2, [sp, #52]	; 0x34
   1737c:	ldr	r3, [r4]
   17380:	cmp	r2, r3
   17384:	bne	17390 <close_stdout@@Base+0x1d10>
   17388:	add	sp, sp, #56	; 0x38
   1738c:	pop	{r4, r5, r6, r7, r8, pc}
   17390:	bl	112ac <__stack_chk_fail@plt>
   17394:	andeq	r6, r1, r0, asr pc
   17398:	ldrdeq	r6, [r1], -r4
   1739c:	andeq	r0, r0, r8, lsr #2
   173a0:	mov	r2, r1
   173a4:	mvn	r1, #0
   173a8:	b	172fc <close_stdout@@Base+0x1c7c>
   173ac:	mov	r1, #58	; 0x3a
   173b0:	b	173a0 <close_stdout@@Base+0x1d20>
   173b4:	mov	r2, #58	; 0x3a
   173b8:	b	172fc <close_stdout@@Base+0x1c7c>
   173bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   173c0:	mov	r5, r2
   173c4:	ldr	lr, [pc, #144]	; 1745c <close_stdout@@Base+0x1ddc>
   173c8:	mov	r8, r0
   173cc:	mov	r9, r1
   173d0:	mov	r7, r3
   173d4:	add	lr, pc, lr
   173d8:	ldr	r4, [pc, #128]	; 17460 <close_stdout@@Base+0x1de0>
   173dc:	add	lr, lr, #256	; 0x100
   173e0:	sub	sp, sp, #56	; 0x38
   173e4:	ldr	sl, [pc, #120]	; 17464 <close_stdout@@Base+0x1de4>
   173e8:	add	r4, pc, r4
   173ec:	ldm	lr!, {r0, r1, r2, r3}
   173f0:	add	ip, sp, #4
   173f4:	ldr	r4, [r4, sl]
   173f8:	ldr	r6, [sp, #88]	; 0x58
   173fc:	stmia	ip!, {r0, r1, r2, r3}
   17400:	ldm	lr!, {r0, r1, r2, r3}
   17404:	ldr	sl, [r4]
   17408:	stmia	ip!, {r0, r1, r2, r3}
   1740c:	ldm	lr, {r0, r1, r2, r3}
   17410:	str	sl, [sp, #52]	; 0x34
   17414:	stm	ip, {r0, r1, r2, r3}
   17418:	mov	r2, r5
   1741c:	add	r5, sp, #4
   17420:	mov	r1, r9
   17424:	mov	r0, r5
   17428:	bl	16f3c <close_stdout@@Base+0x18bc>
   1742c:	mov	r2, r6
   17430:	mov	r3, r5
   17434:	mov	r0, r8
   17438:	mov	r1, r7
   1743c:	bl	16c6c <close_stdout@@Base+0x15ec>
   17440:	ldr	r2, [sp, #52]	; 0x34
   17444:	ldr	r3, [r4]
   17448:	cmp	r2, r3
   1744c:	bne	17458 <close_stdout@@Base+0x1dd8>
   17450:	add	sp, sp, #56	; 0x38
   17454:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17458:	bl	112ac <__stack_chk_fail@plt>
   1745c:	muleq	r1, r0, lr
   17460:	andeq	r6, r1, r0, lsl ip
   17464:	andeq	r0, r0, r8, lsr #2
   17468:	push	{lr}		; (str lr, [sp, #-4]!)
   1746c:	sub	sp, sp, #12
   17470:	mvn	ip, #0
   17474:	str	ip, [sp]
   17478:	bl	173bc <close_stdout@@Base+0x1d3c>
   1747c:	add	sp, sp, #12
   17480:	pop	{pc}		; (ldr pc, [sp], #4)
   17484:	mov	ip, r1
   17488:	mov	r3, r2
   1748c:	mov	r1, r0
   17490:	mov	r2, ip
   17494:	mov	r0, #0
   17498:	b	17468 <close_stdout@@Base+0x1de8>
   1749c:	push	{lr}		; (str lr, [sp, #-4]!)
   174a0:	sub	sp, sp, #12
   174a4:	mov	lr, r1
   174a8:	mov	ip, r2
   174ac:	mov	r1, r0
   174b0:	str	r3, [sp]
   174b4:	mov	r2, lr
   174b8:	mov	r3, ip
   174bc:	mov	r0, #0
   174c0:	bl	173bc <close_stdout@@Base+0x1d3c>
   174c4:	add	sp, sp, #12
   174c8:	pop	{pc}		; (ldr pc, [sp], #4)
   174cc:	ldr	r3, [pc, #12]	; 174e0 <close_stdout@@Base+0x1e60>
   174d0:	ldr	ip, [pc, #12]	; 174e4 <close_stdout@@Base+0x1e64>
   174d4:	add	r3, pc, r3
   174d8:	ldr	r3, [r3, ip]
   174dc:	b	16c6c <close_stdout@@Base+0x15ec>
   174e0:	andeq	r6, r1, r4, lsr #22
   174e4:	andeq	r0, r0, r4, lsr #2
   174e8:	mov	r2, r1
   174ec:	mov	r1, r0
   174f0:	mov	r0, #0
   174f4:	b	174cc <close_stdout@@Base+0x1e4c>
   174f8:	mvn	r2, #0
   174fc:	b	174cc <close_stdout@@Base+0x1e4c>
   17500:	mov	r1, r0
   17504:	mov	r0, #0
   17508:	b	174f8 <close_stdout@@Base+0x1e78>
   1750c:	push	{r4, r5, r6, r7, lr}
   17510:	cmp	r1, #0
   17514:	sub	sp, sp, #36	; 0x24
   17518:	ldr	r7, [pc, #896]	; 178a0 <close_stdout@@Base+0x2220>
   1751c:	mov	ip, r3
   17520:	mov	r5, r0
   17524:	add	r7, pc, r7
   17528:	ldr	r4, [sp, #56]	; 0x38
   1752c:	ldr	r6, [sp, #60]	; 0x3c
   17530:	beq	17874 <close_stdout@@Base+0x21f4>
   17534:	str	r2, [sp]
   17538:	mov	r3, r1
   1753c:	ldr	r2, [pc, #864]	; 178a4 <close_stdout@@Base+0x2224>
   17540:	mov	r1, #1
   17544:	str	ip, [sp, #4]
   17548:	add	r2, pc, r2
   1754c:	bl	1145c <__fprintf_chk@plt>
   17550:	ldr	r1, [pc, #848]	; 178a8 <close_stdout@@Base+0x2228>
   17554:	mov	r2, #5
   17558:	mov	r0, #0
   1755c:	add	r1, pc, r1
   17560:	bl	112a0 <dcgettext@plt>
   17564:	ldr	r2, [pc, #832]	; 178ac <close_stdout@@Base+0x222c>
   17568:	movw	ip, #2013	; 0x7dd
   1756c:	mov	r1, #1
   17570:	ldr	r2, [r7, r2]
   17574:	str	ip, [sp]
   17578:	mov	r3, r0
   1757c:	mov	r0, r5
   17580:	bl	1145c <__fprintf_chk@plt>
   17584:	ldr	r1, [pc, #804]	; 178b0 <close_stdout@@Base+0x2230>
   17588:	mov	r0, #0
   1758c:	mov	r2, #5
   17590:	add	r1, pc, r1
   17594:	bl	112a0 <dcgettext@plt>
   17598:	mov	r1, r5
   1759c:	bl	11204 <fputs_unlocked@plt>
   175a0:	cmp	r6, #9
   175a4:	addls	pc, pc, r6, lsl #2
   175a8:	b	17890 <close_stdout@@Base+0x2210>
   175ac:	b	17640 <close_stdout@@Base+0x1fc0>
   175b0:	b	17644 <close_stdout@@Base+0x1fc4>
   175b4:	b	17674 <close_stdout@@Base+0x1ff4>
   175b8:	b	176a8 <close_stdout@@Base+0x2028>
   175bc:	b	176e4 <close_stdout@@Base+0x2064>
   175c0:	b	17724 <close_stdout@@Base+0x20a4>
   175c4:	b	1776c <close_stdout@@Base+0x20ec>
   175c8:	b	177bc <close_stdout@@Base+0x213c>
   175cc:	b	17814 <close_stdout@@Base+0x2194>
   175d0:	b	175d4 <close_stdout@@Base+0x1f54>
   175d4:	ldr	r1, [pc, #728]	; 178b4 <close_stdout@@Base+0x2234>
   175d8:	mov	r0, #0
   175dc:	add	r1, pc, r1
   175e0:	mov	r2, #5
   175e4:	bl	112a0 <dcgettext@plt>
   175e8:	ldm	r4, {r3, ip}
   175ec:	mov	r1, #1
   175f0:	str	ip, [sp]
   175f4:	ldr	ip, [r4, #8]
   175f8:	str	ip, [sp, #4]
   175fc:	ldr	ip, [r4, #12]
   17600:	str	ip, [sp, #8]
   17604:	ldr	ip, [r4, #16]
   17608:	str	ip, [sp, #12]
   1760c:	ldr	ip, [r4, #20]
   17610:	str	ip, [sp, #16]
   17614:	ldr	ip, [r4, #24]
   17618:	str	ip, [sp, #20]
   1761c:	ldr	ip, [r4, #28]
   17620:	str	ip, [sp, #24]
   17624:	ldr	ip, [r4, #32]
   17628:	str	ip, [sp, #28]
   1762c:	mov	r2, r0
   17630:	mov	r0, r5
   17634:	bl	1145c <__fprintf_chk@plt>
   17638:	add	sp, sp, #36	; 0x24
   1763c:	pop	{r4, r5, r6, r7, pc}
   17640:	bl	11504 <abort@plt>
   17644:	ldr	r1, [pc, #620]	; 178b8 <close_stdout@@Base+0x2238>
   17648:	mov	r2, #5
   1764c:	mov	r0, #0
   17650:	add	r1, pc, r1
   17654:	bl	112a0 <dcgettext@plt>
   17658:	ldr	r3, [r4]
   1765c:	mov	r1, #1
   17660:	mov	r2, r0
   17664:	mov	r0, r5
   17668:	add	sp, sp, #36	; 0x24
   1766c:	pop	{r4, r5, r6, r7, lr}
   17670:	b	1145c <__fprintf_chk@plt>
   17674:	ldr	r1, [pc, #576]	; 178bc <close_stdout@@Base+0x223c>
   17678:	mov	r2, #5
   1767c:	mov	r0, #0
   17680:	add	r1, pc, r1
   17684:	bl	112a0 <dcgettext@plt>
   17688:	ldm	r4, {r3, ip}
   1768c:	mov	r1, #1
   17690:	str	ip, [sp, #56]	; 0x38
   17694:	mov	r2, r0
   17698:	mov	r0, r5
   1769c:	add	sp, sp, #36	; 0x24
   176a0:	pop	{r4, r5, r6, r7, lr}
   176a4:	b	1145c <__fprintf_chk@plt>
   176a8:	ldr	r1, [pc, #528]	; 178c0 <close_stdout@@Base+0x2240>
   176ac:	mov	r2, #5
   176b0:	mov	r0, #0
   176b4:	add	r1, pc, r1
   176b8:	bl	112a0 <dcgettext@plt>
   176bc:	ldm	r4, {r3, ip}
   176c0:	mov	r1, #1
   176c4:	str	ip, [sp, #56]	; 0x38
   176c8:	ldr	ip, [r4, #8]
   176cc:	str	ip, [sp, #60]	; 0x3c
   176d0:	mov	r2, r0
   176d4:	mov	r0, r5
   176d8:	add	sp, sp, #36	; 0x24
   176dc:	pop	{r4, r5, r6, r7, lr}
   176e0:	b	1145c <__fprintf_chk@plt>
   176e4:	ldr	r1, [pc, #472]	; 178c4 <close_stdout@@Base+0x2244>
   176e8:	mov	r2, #5
   176ec:	mov	r0, #0
   176f0:	add	r1, pc, r1
   176f4:	bl	112a0 <dcgettext@plt>
   176f8:	ldm	r4, {r3, ip}
   176fc:	mov	r1, #1
   17700:	str	ip, [sp]
   17704:	ldr	ip, [r4, #8]
   17708:	str	ip, [sp, #4]
   1770c:	ldr	ip, [r4, #12]
   17710:	str	ip, [sp, #8]
   17714:	mov	r2, r0
   17718:	mov	r0, r5
   1771c:	bl	1145c <__fprintf_chk@plt>
   17720:	b	17638 <close_stdout@@Base+0x1fb8>
   17724:	ldr	r1, [pc, #412]	; 178c8 <close_stdout@@Base+0x2248>
   17728:	mov	r2, #5
   1772c:	mov	r0, #0
   17730:	add	r1, pc, r1
   17734:	bl	112a0 <dcgettext@plt>
   17738:	ldm	r4, {r3, ip}
   1773c:	mov	r1, #1
   17740:	str	ip, [sp]
   17744:	ldr	ip, [r4, #8]
   17748:	str	ip, [sp, #4]
   1774c:	ldr	ip, [r4, #12]
   17750:	str	ip, [sp, #8]
   17754:	ldr	ip, [r4, #16]
   17758:	str	ip, [sp, #12]
   1775c:	mov	r2, r0
   17760:	mov	r0, r5
   17764:	bl	1145c <__fprintf_chk@plt>
   17768:	b	17638 <close_stdout@@Base+0x1fb8>
   1776c:	ldr	r1, [pc, #344]	; 178cc <close_stdout@@Base+0x224c>
   17770:	mov	r2, #5
   17774:	mov	r0, #0
   17778:	add	r1, pc, r1
   1777c:	bl	112a0 <dcgettext@plt>
   17780:	ldm	r4, {r3, ip}
   17784:	mov	r1, #1
   17788:	str	ip, [sp]
   1778c:	ldr	ip, [r4, #8]
   17790:	str	ip, [sp, #4]
   17794:	ldr	ip, [r4, #12]
   17798:	str	ip, [sp, #8]
   1779c:	ldr	ip, [r4, #16]
   177a0:	str	ip, [sp, #12]
   177a4:	ldr	ip, [r4, #20]
   177a8:	str	ip, [sp, #16]
   177ac:	mov	r2, r0
   177b0:	mov	r0, r5
   177b4:	bl	1145c <__fprintf_chk@plt>
   177b8:	b	17638 <close_stdout@@Base+0x1fb8>
   177bc:	ldr	r1, [pc, #268]	; 178d0 <close_stdout@@Base+0x2250>
   177c0:	mov	r2, #5
   177c4:	mov	r0, #0
   177c8:	add	r1, pc, r1
   177cc:	bl	112a0 <dcgettext@plt>
   177d0:	ldm	r4, {r3, ip}
   177d4:	mov	r1, #1
   177d8:	str	ip, [sp]
   177dc:	ldr	ip, [r4, #8]
   177e0:	str	ip, [sp, #4]
   177e4:	ldr	ip, [r4, #12]
   177e8:	str	ip, [sp, #8]
   177ec:	ldr	ip, [r4, #16]
   177f0:	str	ip, [sp, #12]
   177f4:	ldr	ip, [r4, #20]
   177f8:	str	ip, [sp, #16]
   177fc:	ldr	ip, [r4, #24]
   17800:	str	ip, [sp, #20]
   17804:	mov	r2, r0
   17808:	mov	r0, r5
   1780c:	bl	1145c <__fprintf_chk@plt>
   17810:	b	17638 <close_stdout@@Base+0x1fb8>
   17814:	ldr	r1, [pc, #184]	; 178d4 <close_stdout@@Base+0x2254>
   17818:	mov	r2, #5
   1781c:	mov	r0, #0
   17820:	add	r1, pc, r1
   17824:	bl	112a0 <dcgettext@plt>
   17828:	ldm	r4, {r3, ip}
   1782c:	mov	r1, #1
   17830:	str	ip, [sp]
   17834:	ldr	ip, [r4, #8]
   17838:	str	ip, [sp, #4]
   1783c:	ldr	ip, [r4, #12]
   17840:	str	ip, [sp, #8]
   17844:	ldr	ip, [r4, #16]
   17848:	str	ip, [sp, #12]
   1784c:	ldr	ip, [r4, #20]
   17850:	str	ip, [sp, #16]
   17854:	ldr	ip, [r4, #24]
   17858:	str	ip, [sp, #20]
   1785c:	ldr	ip, [r4, #28]
   17860:	str	ip, [sp, #24]
   17864:	mov	r2, r0
   17868:	mov	r0, r5
   1786c:	bl	1145c <__fprintf_chk@plt>
   17870:	b	17638 <close_stdout@@Base+0x1fb8>
   17874:	str	r3, [sp]
   17878:	mov	r3, r2
   1787c:	ldr	r2, [pc, #84]	; 178d8 <close_stdout@@Base+0x2258>
   17880:	mov	r1, #1
   17884:	add	r2, pc, r2
   17888:	bl	1145c <__fprintf_chk@plt>
   1788c:	b	17550 <close_stdout@@Base+0x1ed0>
   17890:	ldr	r1, [pc, #68]	; 178dc <close_stdout@@Base+0x225c>
   17894:	mov	r0, #0
   17898:	add	r1, pc, r1
   1789c:	b	175e0 <close_stdout@@Base+0x1f60>
   178a0:	ldrdeq	r6, [r1], -r4
   178a4:	strdeq	r5, [r0], -r4
   178a8:	strdeq	r5, [r0], -r4
   178ac:	andeq	r0, r0, r8, asr r1
   178b0:	andeq	r5, r0, r4, asr #17
   178b4:	andeq	r5, r0, r0, asr sl
   178b8:	ldrdeq	r5, [r0], -r0
   178bc:			; <UNDEFINED> instruction: 0x000058b0
   178c0:	muleq	r0, r4, r8
   178c4:	andeq	r5, r0, r4, ror r8
   178c8:	andeq	r5, r0, r4, asr r8
   178cc:	andeq	r5, r0, r0, lsr r8
   178d0:	andeq	r5, r0, r8, lsl #16
   178d4:	ldrdeq	r5, [r0], -ip
   178d8:	andeq	r5, r0, r4, asr #11
   178dc:	andeq	r5, r0, r8, asr #15
   178e0:	push	{r4, r5, lr}
   178e4:	sub	sp, sp, #12
   178e8:	ldr	r5, [sp, #24]
   178ec:	ldr	ip, [r5]
   178f0:	cmp	ip, #0
   178f4:	beq	17910 <close_stdout@@Base+0x2290>
   178f8:	mov	lr, r5
   178fc:	mov	ip, #0
   17900:	ldr	r4, [lr, #4]!
   17904:	add	ip, ip, #1
   17908:	cmp	r4, #0
   1790c:	bne	17900 <close_stdout@@Base+0x2280>
   17910:	stm	sp, {r5, ip}
   17914:	bl	1750c <close_stdout@@Base+0x1e8c>
   17918:	add	sp, sp, #12
   1791c:	pop	{r4, r5, pc}
   17920:	push	{r4, r5, r6, r7, lr}
   17924:	sub	sp, sp, #60	; 0x3c
   17928:	ldr	r4, [pc, #100]	; 17994 <close_stdout@@Base+0x2314>
   1792c:	mov	ip, #0
   17930:	ldr	r5, [pc, #96]	; 17998 <close_stdout@@Base+0x2318>
   17934:	mov	lr, ip
   17938:	add	r4, pc, r4
   1793c:	ldr	r6, [sp, #80]	; 0x50
   17940:	ldr	r7, [r4, r5]
   17944:	add	r5, sp, #12
   17948:	ldr	r4, [r7]
   1794c:	str	r4, [sp, #52]	; 0x34
   17950:	ldr	r4, [r6, ip]
   17954:	cmp	r4, #0
   17958:	str	r4, [r5, ip]
   1795c:	beq	17970 <close_stdout@@Base+0x22f0>
   17960:	add	lr, lr, #1
   17964:	add	ip, ip, #4
   17968:	cmp	lr, #10
   1796c:	bne	17950 <close_stdout@@Base+0x22d0>
   17970:	stm	sp, {r5, lr}
   17974:	bl	1750c <close_stdout@@Base+0x1e8c>
   17978:	ldr	r2, [sp, #52]	; 0x34
   1797c:	ldr	r3, [r7]
   17980:	cmp	r2, r3
   17984:	bne	17990 <close_stdout@@Base+0x2310>
   17988:	add	sp, sp, #60	; 0x3c
   1798c:	pop	{r4, r5, r6, r7, pc}
   17990:	bl	112ac <__stack_chk_fail@plt>
   17994:	andeq	r6, r1, r0, asr #13
   17998:	andeq	r0, r0, r8, lsr #2
   1799c:	push	{r3}		; (str r3, [sp, #-4]!)
   179a0:	push	{r4, lr}
   179a4:	sub	sp, sp, #20
   179a8:	ldr	lr, [pc, #72]	; 179f8 <close_stdout@@Base+0x2378>
   179ac:	add	ip, sp, #32
   179b0:	ldr	r4, [pc, #68]	; 179fc <close_stdout@@Base+0x237c>
   179b4:	add	lr, pc, lr
   179b8:	ldr	r3, [sp, #28]
   179bc:	ldr	r4, [lr, r4]
   179c0:	str	ip, [sp]
   179c4:	str	ip, [sp, #8]
   179c8:	ldr	ip, [r4]
   179cc:	str	ip, [sp, #12]
   179d0:	bl	17920 <close_stdout@@Base+0x22a0>
   179d4:	ldr	r2, [sp, #12]
   179d8:	ldr	r3, [r4]
   179dc:	cmp	r2, r3
   179e0:	bne	179f4 <close_stdout@@Base+0x2374>
   179e4:	add	sp, sp, #20
   179e8:	pop	{r4, lr}
   179ec:	add	sp, sp, #4
   179f0:	bx	lr
   179f4:	bl	112ac <__stack_chk_fail@plt>
   179f8:	andeq	r6, r1, r4, asr #12
   179fc:	andeq	r0, r0, r8, lsr #2
   17a00:	ldr	r1, [pc, #132]	; 17a8c <close_stdout@@Base+0x240c>
   17a04:	mov	r2, #5
   17a08:	push	{r4, lr}
   17a0c:	add	r1, pc, r1
   17a10:	mov	r0, #0
   17a14:	ldr	r4, [pc, #116]	; 17a90 <close_stdout@@Base+0x2410>
   17a18:	bl	112a0 <dcgettext@plt>
   17a1c:	ldr	r2, [pc, #112]	; 17a94 <close_stdout@@Base+0x2414>
   17a20:	add	r4, pc, r4
   17a24:	add	r2, pc, r2
   17a28:	mov	r1, r0
   17a2c:	mov	r0, #1
   17a30:	bl	11438 <__printf_chk@plt>
   17a34:	ldr	r1, [pc, #92]	; 17a98 <close_stdout@@Base+0x2418>
   17a38:	mov	r2, #5
   17a3c:	mov	r0, #0
   17a40:	add	r1, pc, r1
   17a44:	bl	112a0 <dcgettext@plt>
   17a48:	ldr	r2, [pc, #76]	; 17a9c <close_stdout@@Base+0x241c>
   17a4c:	ldr	r3, [pc, #76]	; 17aa0 <close_stdout@@Base+0x2420>
   17a50:	add	r2, pc, r2
   17a54:	add	r3, pc, r3
   17a58:	mov	r1, r0
   17a5c:	mov	r0, #1
   17a60:	bl	11438 <__printf_chk@plt>
   17a64:	ldr	r1, [pc, #56]	; 17aa4 <close_stdout@@Base+0x2424>
   17a68:	mov	r0, #0
   17a6c:	mov	r2, #5
   17a70:	add	r1, pc, r1
   17a74:	bl	112a0 <dcgettext@plt>
   17a78:	ldr	r3, [pc, #40]	; 17aa8 <close_stdout@@Base+0x2428>
   17a7c:	ldr	r3, [r4, r3]
   17a80:	pop	{r4, lr}
   17a84:	ldr	r1, [r3]
   17a88:	b	11204 <fputs_unlocked@plt>
   17a8c:	muleq	r0, r0, r6
   17a90:	ldrdeq	r6, [r1], -r8
   17a94:	muleq	r0, r0, r6
   17a98:	andeq	r5, r0, ip, lsl #13
   17a9c:	andeq	r5, r0, ip, lsr r0
   17aa0:	andeq	r5, r0, r8, asr #32
   17aa4:	andeq	r5, r0, r0, ror r6
   17aa8:	andeq	r0, r0, r8, asr #2
   17aac:	push	{r4, lr}
   17ab0:	mov	r4, r0
   17ab4:	bl	1136c <malloc@plt>
   17ab8:	rsbs	r3, r0, #1
   17abc:	movcc	r3, #0
   17ac0:	cmp	r4, #0
   17ac4:	moveq	r3, #0
   17ac8:	cmp	r3, #0
   17acc:	popeq	{r4, pc}
   17ad0:	bl	17cc0 <close_stdout@@Base+0x2640>
   17ad4:	push	{r3, r4, r5, lr}
   17ad8:	mov	r4, r0
   17adc:	mvn	r0, #0
   17ae0:	mov	r5, r1
   17ae4:	bl	1aa88 <close_stdout@@Base+0x5408>
   17ae8:	cmp	r0, r4
   17aec:	bcc	17afc <close_stdout@@Base+0x247c>
   17af0:	mul	r0, r4, r5
   17af4:	pop	{r3, r4, r5, lr}
   17af8:	b	17aac <close_stdout@@Base+0x242c>
   17afc:	bl	17cc0 <close_stdout@@Base+0x2640>
   17b00:	b	17aac <close_stdout@@Base+0x242c>
   17b04:	rsbs	r3, r1, #1
   17b08:	push	{r4, lr}
   17b0c:	movcc	r3, #0
   17b10:	cmp	r0, #0
   17b14:	mov	r4, r1
   17b18:	moveq	r3, #0
   17b1c:	cmp	r3, #0
   17b20:	bne	17b44 <close_stdout@@Base+0x24c4>
   17b24:	bl	112b8 <realloc@plt>
   17b28:	rsbs	r3, r0, #1
   17b2c:	movcc	r3, #0
   17b30:	cmp	r4, #0
   17b34:	moveq	r3, #0
   17b38:	cmp	r3, #0
   17b3c:	popeq	{r4, pc}
   17b40:	bl	17cc0 <close_stdout@@Base+0x2640>
   17b44:	bl	11234 <free@plt>
   17b48:	mov	r0, #0
   17b4c:	pop	{r4, pc}
   17b50:	push	{r4, r5, r6, lr}
   17b54:	mov	r5, r1
   17b58:	mov	r6, r0
   17b5c:	mov	r1, r2
   17b60:	mvn	r0, #0
   17b64:	mov	r4, r2
   17b68:	bl	1aa88 <close_stdout@@Base+0x5408>
   17b6c:	cmp	r0, r5
   17b70:	bcc	17b84 <close_stdout@@Base+0x2504>
   17b74:	mov	r0, r6
   17b78:	mul	r1, r5, r4
   17b7c:	pop	{r4, r5, r6, lr}
   17b80:	b	17b04 <close_stdout@@Base+0x2484>
   17b84:	bl	17cc0 <close_stdout@@Base+0x2640>
   17b88:	push	{r3, r4, r5, r6, r7, lr}
   17b8c:	subs	r7, r0, #0
   17b90:	mov	r5, r1
   17b94:	mov	r6, r2
   17b98:	ldr	r4, [r1]
   17b9c:	beq	17bd4 <close_stdout@@Base+0x2554>
   17ba0:	movw	r0, #43690	; 0xaaaa
   17ba4:	mov	r1, r2
   17ba8:	bfi	r0, r0, #16, #16
   17bac:	bl	1aa88 <close_stdout@@Base+0x5408>
   17bb0:	cmp	r4, r0
   17bb4:	addcc	r3, r4, #1
   17bb8:	addcc	r4, r4, r3, lsr #1
   17bbc:	bcs	17bf8 <close_stdout@@Base+0x2578>
   17bc0:	str	r4, [r5]
   17bc4:	mov	r0, r7
   17bc8:	mul	r1, r6, r4
   17bcc:	pop	{r3, r4, r5, r6, r7, lr}
   17bd0:	b	17b04 <close_stdout@@Base+0x2484>
   17bd4:	cmp	r4, #0
   17bd8:	bne	17bc0 <close_stdout@@Base+0x2540>
   17bdc:	mov	r0, #64	; 0x40
   17be0:	mov	r1, r2
   17be4:	bl	1aa88 <close_stdout@@Base+0x5408>
   17be8:	cmp	r0, #0
   17bec:	movne	r4, r0
   17bf0:	addeq	r4, r0, #1
   17bf4:	b	17bc0 <close_stdout@@Base+0x2540>
   17bf8:	bl	17cc0 <close_stdout@@Base+0x2640>
   17bfc:	cmp	r0, #0
   17c00:	push	{r3, lr}
   17c04:	ldr	r3, [r1]
   17c08:	beq	17c34 <close_stdout@@Base+0x25b4>
   17c0c:	movw	r2, #43689	; 0xaaa9
   17c10:	movt	r2, #43690	; 0xaaaa
   17c14:	cmp	r3, r2
   17c18:	addls	r2, r3, #1
   17c1c:	addls	r3, r3, r2, lsr #1
   17c20:	bhi	17c4c <close_stdout@@Base+0x25cc>
   17c24:	str	r3, [r1]
   17c28:	mov	r1, r3
   17c2c:	pop	{r3, lr}
   17c30:	b	17b04 <close_stdout@@Base+0x2484>
   17c34:	cmp	r3, #0
   17c38:	moveq	r3, #64	; 0x40
   17c3c:	str	r3, [r1]
   17c40:	mov	r1, r3
   17c44:	pop	{r3, lr}
   17c48:	b	17b04 <close_stdout@@Base+0x2484>
   17c4c:	bl	17cc0 <close_stdout@@Base+0x2640>
   17c50:	push	{r4, lr}
   17c54:	mov	r4, r0
   17c58:	bl	17aac <close_stdout@@Base+0x242c>
   17c5c:	mov	r2, r4
   17c60:	mov	r1, #0
   17c64:	pop	{r4, lr}
   17c68:	b	11414 <memset@plt>
   17c6c:	push	{r3, lr}
   17c70:	bl	111f8 <calloc@plt>
   17c74:	cmp	r0, #0
   17c78:	popne	{r3, pc}
   17c7c:	bl	17cc0 <close_stdout@@Base+0x2640>
   17c80:	push	{r3, r4, r5, lr}
   17c84:	mov	r4, r1
   17c88:	mov	r5, r0
   17c8c:	mov	r0, r1
   17c90:	bl	17aac <close_stdout@@Base+0x242c>
   17c94:	mov	r1, r5
   17c98:	mov	r2, r4
   17c9c:	pop	{r3, r4, r5, lr}
   17ca0:	b	11258 <memcpy@plt>
   17ca4:	push	{r4, lr}
   17ca8:	mov	r4, r0
   17cac:	bl	113c0 <strlen@plt>
   17cb0:	add	r1, r0, #1
   17cb4:	mov	r0, r4
   17cb8:	pop	{r4, lr}
   17cbc:	b	17c80 <close_stdout@@Base+0x2600>
   17cc0:	ldr	r3, [pc, #64]	; 17d08 <close_stdout@@Base+0x2688>
   17cc4:	mov	r2, #5
   17cc8:	ldr	ip, [pc, #60]	; 17d0c <close_stdout@@Base+0x268c>
   17ccc:	mov	r0, #0
   17cd0:	add	r3, pc, r3
   17cd4:	ldr	r1, [pc, #52]	; 17d10 <close_stdout@@Base+0x2690>
   17cd8:	push	{r4, lr}
   17cdc:	add	r1, pc, r1
   17ce0:	ldr	r3, [r3, ip]
   17ce4:	ldr	r4, [r3]
   17ce8:	bl	112a0 <dcgettext@plt>
   17cec:	ldr	r2, [pc, #32]	; 17d14 <close_stdout@@Base+0x2694>
   17cf0:	mov	r1, #0
   17cf4:	add	r2, pc, r2
   17cf8:	mov	r3, r0
   17cfc:	mov	r0, r4
   17d00:	bl	11330 <error@plt>
   17d04:	bl	11504 <abort@plt>
   17d08:	andeq	r6, r1, r8, lsr #6
   17d0c:	andeq	r0, r0, ip, asr #2
   17d10:	andeq	r5, r0, r4, ror r4
   17d14:	andeq	r5, r0, r4, lsl #1
   17d18:	push	{r3, r4, r5, r6, r7, lr}
   17d1c:	bl	189c8 <close_stdout@@Base+0x3348>
   17d20:	ldr	r4, [pc, #100]	; 17d8c <close_stdout@@Base+0x270c>
   17d24:	add	r4, pc, r4
   17d28:	subs	r5, r0, #0
   17d2c:	blt	17d38 <close_stdout@@Base+0x26b8>
   17d30:	mov	r0, r5
   17d34:	pop	{r3, r4, r5, r6, r7, pc}
   17d38:	ldr	r3, [pc, #80]	; 17d90 <close_stdout@@Base+0x2710>
   17d3c:	ldr	r3, [r4, r3]
   17d40:	ldr	r0, [r3]
   17d44:	bl	11240 <ferror@plt>
   17d48:	subs	r6, r0, #0
   17d4c:	bne	17d30 <close_stdout@@Base+0x26b0>
   17d50:	ldr	r3, [pc, #60]	; 17d94 <close_stdout@@Base+0x2714>
   17d54:	ldr	r3, [r4, r3]
   17d58:	ldr	r7, [r3]
   17d5c:	bl	113e4 <__errno_location@plt>
   17d60:	ldr	r1, [pc, #48]	; 17d98 <close_stdout@@Base+0x2718>
   17d64:	mov	r2, #5
   17d68:	add	r1, pc, r1
   17d6c:	ldr	r4, [r0]
   17d70:	mov	r0, r6
   17d74:	bl	112a0 <dcgettext@plt>
   17d78:	mov	r1, r4
   17d7c:	mov	r2, r0
   17d80:	mov	r0, r7
   17d84:	bl	11330 <error@plt>
   17d88:	b	17d30 <close_stdout@@Base+0x26b0>
   17d8c:	ldrdeq	r6, [r1], -r4
   17d90:	andeq	r0, r0, r8, asr #2
   17d94:	andeq	r0, r0, ip, asr #2
   17d98:	strdeq	r5, [r0], -ip
   17d9c:	push	{r0, r1, r2, r3}
   17da0:	ldr	r2, [pc, #80]	; 17df8 <close_stdout@@Base+0x2778>
   17da4:	ldr	ip, [pc, #80]	; 17dfc <close_stdout@@Base+0x277c>
   17da8:	add	r2, pc, r2
   17dac:	push	{r4, lr}
   17db0:	sub	sp, sp, #8
   17db4:	ldr	r4, [r2, ip]
   17db8:	add	r3, sp, #20
   17dbc:	str	r3, [sp]
   17dc0:	mov	r1, r3
   17dc4:	ldr	r0, [sp, #16]
   17dc8:	ldr	r3, [r4]
   17dcc:	str	r3, [sp, #4]
   17dd0:	bl	17d18 <close_stdout@@Base+0x2698>
   17dd4:	ldr	r2, [sp, #4]
   17dd8:	ldr	r3, [r4]
   17ddc:	cmp	r2, r3
   17de0:	bne	17df4 <close_stdout@@Base+0x2774>
   17de4:	add	sp, sp, #8
   17de8:	pop	{r4, lr}
   17dec:	add	sp, sp, #16
   17df0:	bx	lr
   17df4:	bl	112ac <__stack_chk_fail@plt>
   17df8:	andeq	r6, r1, r0, asr r2
   17dfc:	andeq	r0, r0, r8, lsr #2
   17e00:	push	{r3, r4, r5, r6, r7, lr}
   17e04:	mov	r6, r0
   17e08:	bl	188d4 <close_stdout@@Base+0x3254>
   17e0c:	ldr	r4, [pc, #92]	; 17e70 <close_stdout@@Base+0x27f0>
   17e10:	add	r4, pc, r4
   17e14:	subs	r5, r0, #0
   17e18:	blt	17e24 <close_stdout@@Base+0x27a4>
   17e1c:	mov	r0, r5
   17e20:	pop	{r3, r4, r5, r6, r7, pc}
   17e24:	mov	r0, r6
   17e28:	bl	11240 <ferror@plt>
   17e2c:	subs	r6, r0, #0
   17e30:	bne	17e1c <close_stdout@@Base+0x279c>
   17e34:	ldr	r3, [pc, #56]	; 17e74 <close_stdout@@Base+0x27f4>
   17e38:	ldr	r3, [r4, r3]
   17e3c:	ldr	r7, [r3]
   17e40:	bl	113e4 <__errno_location@plt>
   17e44:	ldr	r1, [pc, #44]	; 17e78 <close_stdout@@Base+0x27f8>
   17e48:	mov	r2, #5
   17e4c:	add	r1, pc, r1
   17e50:	ldr	r4, [r0]
   17e54:	mov	r0, r6
   17e58:	bl	112a0 <dcgettext@plt>
   17e5c:	mov	r1, r4
   17e60:	mov	r2, r0
   17e64:	mov	r0, r7
   17e68:	bl	11330 <error@plt>
   17e6c:	b	17e1c <close_stdout@@Base+0x279c>
   17e70:	andeq	r6, r1, r8, ror #3
   17e74:	andeq	r0, r0, ip, asr #2
   17e78:	andeq	r5, r0, r8, lsl r3
   17e7c:	ldr	ip, [pc, #84]	; 17ed8 <close_stdout@@Base+0x2858>
   17e80:	push	{r1, r2, r3}
   17e84:	add	ip, pc, ip
   17e88:	push	{r4, lr}
   17e8c:	sub	sp, sp, #12
   17e90:	ldr	lr, [pc, #68]	; 17edc <close_stdout@@Base+0x285c>
   17e94:	add	r3, sp, #24
   17e98:	ldr	r1, [sp, #20]
   17e9c:	mov	r2, r3
   17ea0:	ldr	r4, [ip, lr]
   17ea4:	str	r3, [sp]
   17ea8:	ldr	r3, [r4]
   17eac:	str	r3, [sp, #4]
   17eb0:	bl	17e00 <close_stdout@@Base+0x2780>
   17eb4:	ldr	r2, [sp, #4]
   17eb8:	ldr	r3, [r4]
   17ebc:	cmp	r2, r3
   17ec0:	bne	17ed4 <close_stdout@@Base+0x2854>
   17ec4:	add	sp, sp, #12
   17ec8:	pop	{r4, lr}
   17ecc:	add	sp, sp, #12
   17ed0:	bx	lr
   17ed4:	bl	112ac <__stack_chk_fail@plt>
   17ed8:	andeq	r6, r1, r4, ror r1
   17edc:	andeq	r0, r0, r8, lsr #2
   17ee0:	ldr	ip, [pc, #204]	; 17fb4 <close_stdout@@Base+0x2934>
   17ee4:	push	{r4, r5, r6, r7, lr}
   17ee8:	sub	lr, r0, #1
   17eec:	ldr	r0, [pc, #196]	; 17fb8 <close_stdout@@Base+0x2938>
   17ef0:	add	ip, pc, ip
   17ef4:	ldr	r4, [pc, #192]	; 17fbc <close_stdout@@Base+0x293c>
   17ef8:	sub	sp, sp, #20
   17efc:	ldr	r0, [ip, r0]
   17f00:	ldr	r5, [sp, #40]	; 0x28
   17f04:	ldr	r0, [r0]
   17f08:	str	r0, [sp, #12]
   17f0c:	ldr	r0, [ip, r4]
   17f10:	ldr	r4, [r0]
   17f14:	cmp	lr, #3
   17f18:	addls	pc, pc, lr, lsl #2
   17f1c:	b	17f78 <close_stdout@@Base+0x28f8>
   17f20:	b	17f7c <close_stdout@@Base+0x28fc>
   17f24:	b	17f30 <close_stdout@@Base+0x28b0>
   17f28:	b	17f30 <close_stdout@@Base+0x28b0>
   17f2c:	b	17f88 <close_stdout@@Base+0x2908>
   17f30:	ldr	r0, [pc, #136]	; 17fc0 <close_stdout@@Base+0x2940>
   17f34:	add	r0, pc, r0
   17f38:	cmp	r1, #0
   17f3c:	blt	17f94 <close_stdout@@Base+0x2914>
   17f40:	ldr	r7, [pc, #124]	; 17fc4 <close_stdout@@Base+0x2944>
   17f44:	ldr	r6, [r3, r1, lsl #4]
   17f48:	add	r7, pc, r7
   17f4c:	mov	r1, r0
   17f50:	mov	r2, #5
   17f54:	mov	r0, #0
   17f58:	bl	112a0 <dcgettext@plt>
   17f5c:	str	r6, [sp]
   17f60:	str	r5, [sp, #4]
   17f64:	mov	r3, r7
   17f68:	mov	r1, #0
   17f6c:	mov	r2, r0
   17f70:	mov	r0, r4
   17f74:	bl	11330 <error@plt>
   17f78:	bl	11504 <abort@plt>
   17f7c:	ldr	r0, [pc, #68]	; 17fc8 <close_stdout@@Base+0x2948>
   17f80:	add	r0, pc, r0
   17f84:	b	17f38 <close_stdout@@Base+0x28b8>
   17f88:	ldr	r0, [pc, #60]	; 17fcc <close_stdout@@Base+0x294c>
   17f8c:	add	r0, pc, r0
   17f90:	b	17f38 <close_stdout@@Base+0x28b8>
   17f94:	ldr	r7, [pc, #52]	; 17fd0 <close_stdout@@Base+0x2950>
   17f98:	mov	r3, #0
   17f9c:	strb	r2, [sp, #8]
   17fa0:	add	r6, sp, #8
   17fa4:	add	r7, pc, r7
   17fa8:	strb	r3, [sp, #9]
   17fac:	rsb	r7, r1, r7
   17fb0:	b	17f4c <close_stdout@@Base+0x28cc>
   17fb4:	andeq	r6, r1, r8, lsl #2
   17fb8:	andeq	r0, r0, r8, lsr #2
   17fbc:	andeq	r0, r0, ip, asr #2
   17fc0:	andeq	r5, r0, ip, ror #4
   17fc4:	andeq	r5, r0, r0, lsr #5
   17fc8:	andeq	r5, r0, r8, asr #4
   17fcc:	strdeq	r5, [r0], -r8
   17fd0:	andeq	r5, r0, r4, asr #4
   17fd4:	ldr	ip, [pc, #1852]	; 18718 <close_stdout@@Base+0x3098>
   17fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fdc:	mov	fp, r2
   17fe0:	ldr	r2, [pc, #1844]	; 1871c <close_stdout@@Base+0x309c>
   17fe4:	add	ip, pc, ip
   17fe8:	mov	r9, r3
   17fec:	sub	sp, sp, #36	; 0x24
   17ff0:	mov	r3, ip
   17ff4:	cmp	fp, #36	; 0x24
   17ff8:	ldr	sl, [ip, r2]
   17ffc:	mov	r5, r0
   18000:	mov	r8, r1
   18004:	ldr	r6, [sp, #72]	; 0x48
   18008:	ldr	r3, [sl]
   1800c:	str	r3, [sp, #28]
   18010:	bhi	186f8 <close_stdout@@Base+0x3078>
   18014:	cmp	r1, #0
   18018:	addeq	r8, sp, #24
   1801c:	bl	113a8 <__ctype_b_loc@plt>
   18020:	ldrb	r3, [r5]
   18024:	mov	r1, r5
   18028:	ldr	r0, [r0]
   1802c:	b	18034 <close_stdout@@Base+0x29b4>
   18030:	ldrb	r3, [r1, #1]!
   18034:	lsl	r2, r3, #1
   18038:	ldrh	r4, [r0, r2]
   1803c:	and	r4, r4, #8192	; 0x2000
   18040:	uxth	r4, r4
   18044:	cmp	r4, #0
   18048:	bne	18030 <close_stdout@@Base+0x29b0>
   1804c:	cmp	r3, #45	; 0x2d
   18050:	bne	18070 <close_stdout@@Base+0x29f0>
   18054:	mov	r0, #4
   18058:	ldr	r2, [sp, #28]
   1805c:	ldr	r3, [sl]
   18060:	cmp	r2, r3
   18064:	bne	186f4 <close_stdout@@Base+0x3074>
   18068:	add	sp, sp, #36	; 0x24
   1806c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18070:	bl	113e4 <__errno_location@plt>
   18074:	mov	r2, fp
   18078:	mov	r1, r8
   1807c:	mov	r3, r4
   18080:	str	r4, [r0]
   18084:	mov	r7, r0
   18088:	mov	r0, r5
   1808c:	bl	11264 <__strtoull_internal@plt>
   18090:	ldr	fp, [r8]
   18094:	cmp	fp, r5
   18098:	strd	r0, [sp]
   1809c:	beq	18218 <close_stdout@@Base+0x2b98>
   180a0:	ldr	ip, [r7]
   180a4:	cmp	ip, #0
   180a8:	bne	180d4 <close_stdout@@Base+0x2a54>
   180ac:	mov	r7, ip
   180b0:	cmp	r6, #0
   180b4:	beq	18684 <close_stdout@@Base+0x3004>
   180b8:	ldrb	r5, [fp]
   180bc:	cmp	r5, #0
   180c0:	bne	180e4 <close_stdout@@Base+0x2a64>
   180c4:	ldrd	r2, [sp]
   180c8:	mov	r0, r7
   180cc:	strd	r2, [r9]
   180d0:	b	18058 <close_stdout@@Base+0x29d8>
   180d4:	cmp	ip, #34	; 0x22
   180d8:	moveq	r7, #1
   180dc:	bne	18054 <close_stdout@@Base+0x29d4>
   180e0:	b	180b0 <close_stdout@@Base+0x2a30>
   180e4:	mov	r0, r6
   180e8:	mov	r1, r5
   180ec:	bl	113cc <strchr@plt>
   180f0:	cmp	r0, #0
   180f4:	beq	18254 <close_stdout@@Base+0x2bd4>
   180f8:	mov	r0, r6
   180fc:	mov	r1, #48	; 0x30
   18100:	bl	113cc <strchr@plt>
   18104:	cmp	r0, #0
   18108:	beq	18128 <close_stdout@@Base+0x2aa8>
   1810c:	ldrb	r3, [fp, #1]
   18110:	cmp	r3, #68	; 0x44
   18114:	beq	186ac <close_stdout@@Base+0x302c>
   18118:	cmp	r3, #105	; 0x69
   1811c:	beq	18694 <close_stdout@@Base+0x3014>
   18120:	cmp	r3, #66	; 0x42
   18124:	beq	186ac <close_stdout@@Base+0x302c>
   18128:	mov	r6, #1
   1812c:	mov	r4, #1024	; 0x400
   18130:	sub	r5, r5, #66	; 0x42
   18134:	cmp	r5, #53	; 0x35
   18138:	addls	pc, pc, r5, lsl #2
   1813c:	b	18254 <close_stdout@@Base+0x2bd4>
   18140:	b	184fc <close_stdout@@Base+0x2e7c>
   18144:	b	18254 <close_stdout@@Base+0x2bd4>
   18148:	b	18254 <close_stdout@@Base+0x2bd4>
   1814c:	b	18490 <close_stdout@@Base+0x2e10>
   18150:	b	18254 <close_stdout@@Base+0x2bd4>
   18154:	b	18424 <close_stdout@@Base+0x2da4>
   18158:	b	18254 <close_stdout@@Base+0x2bd4>
   1815c:	b	18254 <close_stdout@@Base+0x2bd4>
   18160:	b	18254 <close_stdout@@Base+0x2bd4>
   18164:	b	183cc <close_stdout@@Base+0x2d4c>
   18168:	b	18254 <close_stdout@@Base+0x2bd4>
   1816c:	b	185a4 <close_stdout@@Base+0x2f24>
   18170:	b	18254 <close_stdout@@Base+0x2bd4>
   18174:	b	18254 <close_stdout@@Base+0x2bd4>
   18178:	b	18538 <close_stdout@@Base+0x2eb8>
   1817c:	b	18254 <close_stdout@@Base+0x2bd4>
   18180:	b	18254 <close_stdout@@Base+0x2bd4>
   18184:	b	18254 <close_stdout@@Base+0x2bd4>
   18188:	b	18618 <close_stdout@@Base+0x2f98>
   1818c:	b	18254 <close_stdout@@Base+0x2bd4>
   18190:	b	18254 <close_stdout@@Base+0x2bd4>
   18194:	b	18254 <close_stdout@@Base+0x2bd4>
   18198:	b	18254 <close_stdout@@Base+0x2bd4>
   1819c:	b	18360 <close_stdout@@Base+0x2ce0>
   181a0:	b	182e8 <close_stdout@@Base+0x2c68>
   181a4:	b	18254 <close_stdout@@Base+0x2bd4>
   181a8:	b	18254 <close_stdout@@Base+0x2bd4>
   181ac:	b	18254 <close_stdout@@Base+0x2bd4>
   181b0:	b	18254 <close_stdout@@Base+0x2bd4>
   181b4:	b	18254 <close_stdout@@Base+0x2bd4>
   181b8:	b	18254 <close_stdout@@Base+0x2bd4>
   181bc:	b	18254 <close_stdout@@Base+0x2bd4>
   181c0:	b	182ac <close_stdout@@Base+0x2c2c>
   181c4:	b	18264 <close_stdout@@Base+0x2be4>
   181c8:	b	18254 <close_stdout@@Base+0x2bd4>
   181cc:	b	18254 <close_stdout@@Base+0x2bd4>
   181d0:	b	18254 <close_stdout@@Base+0x2bd4>
   181d4:	b	18424 <close_stdout@@Base+0x2da4>
   181d8:	b	18254 <close_stdout@@Base+0x2bd4>
   181dc:	b	18254 <close_stdout@@Base+0x2bd4>
   181e0:	b	18254 <close_stdout@@Base+0x2bd4>
   181e4:	b	183cc <close_stdout@@Base+0x2d4c>
   181e8:	b	18254 <close_stdout@@Base+0x2bd4>
   181ec:	b	185a4 <close_stdout@@Base+0x2f24>
   181f0:	b	18254 <close_stdout@@Base+0x2bd4>
   181f4:	b	18254 <close_stdout@@Base+0x2bd4>
   181f8:	b	18254 <close_stdout@@Base+0x2bd4>
   181fc:	b	18254 <close_stdout@@Base+0x2bd4>
   18200:	b	18254 <close_stdout@@Base+0x2bd4>
   18204:	b	18254 <close_stdout@@Base+0x2bd4>
   18208:	b	18618 <close_stdout@@Base+0x2f98>
   1820c:	b	18254 <close_stdout@@Base+0x2bd4>
   18210:	b	18254 <close_stdout@@Base+0x2bd4>
   18214:	b	18284 <close_stdout@@Base+0x2c04>
   18218:	cmp	r6, #0
   1821c:	beq	18054 <close_stdout@@Base+0x29d4>
   18220:	ldrb	r5, [r5]
   18224:	cmp	r5, #0
   18228:	beq	18054 <close_stdout@@Base+0x29d4>
   1822c:	mov	r0, r6
   18230:	mov	r1, r5
   18234:	bl	113cc <strchr@plt>
   18238:	cmp	r0, #0
   1823c:	beq	18054 <close_stdout@@Base+0x29d4>
   18240:	mov	r0, #1
   18244:	mov	r1, #0
   18248:	mov	r7, r4
   1824c:	strd	r0, [sp]
   18250:	b	180f8 <close_stdout@@Base+0x2a78>
   18254:	ldrd	r2, [sp]
   18258:	orr	r0, r7, #2
   1825c:	strd	r2, [r9]
   18260:	b	18058 <close_stdout@@Base+0x29d8>
   18264:	mov	r3, #0
   18268:	add	r2, fp, r6
   1826c:	str	r2, [r8]
   18270:	ldrb	r2, [fp, r6]
   18274:	orr	r7, r7, r3
   18278:	cmp	r2, #0
   1827c:	orrne	r7, r7, #2
   18280:	b	180c4 <close_stdout@@Base+0x2a44>
   18284:	ldrd	r2, [sp]
   18288:	cmp	r2, #0
   1828c:	sbcs	r3, r3, #0
   18290:	blt	186cc <close_stdout@@Base+0x304c>
   18294:	ldrd	r0, [sp]
   18298:	mov	r3, #0
   1829c:	adds	r0, r0, r0
   182a0:	adc	r1, r1, r1
   182a4:	strd	r0, [sp]
   182a8:	b	18268 <close_stdout@@Base+0x2be8>
   182ac:	ldrd	r0, [sp]
   182b0:	movw	r3, #65535	; 0xffff
   182b4:	movt	r3, #127	; 0x7f
   182b8:	mvn	r2, #0
   182bc:	cmp	r1, r3
   182c0:	cmpeq	r0, r2
   182c4:	bhi	186cc <close_stdout@@Base+0x304c>
   182c8:	lsl	r2, r1, #9
   182cc:	ldr	r1, [sp]
   182d0:	lsl	r3, r0, #9
   182d4:	str	r3, [sp]
   182d8:	mov	r3, #0
   182dc:	orr	r2, r2, r1, lsr #23
   182e0:	str	r2, [sp, #4]
   182e4:	b	18268 <close_stdout@@Base+0x2be8>
   182e8:	asr	r5, r4, #31
   182ec:	mov	r2, r4
   182f0:	mvn	r0, #0
   182f4:	mvn	r1, #0
   182f8:	mov	r3, r5
   182fc:	bl	1aed4 <close_stdout@@Base+0x5854>
   18300:	mov	ip, r7
   18304:	str	r6, [sp, #20]
   18308:	mov	r2, #7
   1830c:	ldrd	r6, [sp]
   18310:	mov	r3, #0
   18314:	strd	r0, [sp, #8]
   18318:	ldrd	r0, [sp, #8]
   1831c:	cmp	r1, r7
   18320:	cmpeq	r0, r6
   18324:	mulcs	r0, r6, r5
   18328:	movcs	r1, #0
   1832c:	mlacs	r0, r4, r7, r0
   18330:	movcc	r1, #1
   18334:	umullcs	r6, r7, r6, r4
   18338:	mvncc	r6, #0
   1833c:	mvncc	r7, #0
   18340:	orr	r3, r3, r1
   18344:	addcs	r7, r0, r7
   18348:	subs	r2, r2, #1
   1834c:	bne	18318 <close_stdout@@Base+0x2c98>
   18350:	strd	r6, [sp]
   18354:	mov	r7, ip
   18358:	ldr	r6, [sp, #20]
   1835c:	b	18268 <close_stdout@@Base+0x2be8>
   18360:	asr	r5, r4, #31
   18364:	mov	r2, r4
   18368:	mvn	r0, #0
   1836c:	mvn	r1, #0
   18370:	mov	r3, r5
   18374:	bl	1aed4 <close_stdout@@Base+0x5854>
   18378:	mov	ip, r7
   1837c:	str	r6, [sp, #20]
   18380:	mov	r2, #8
   18384:	ldrd	r6, [sp]
   18388:	mov	r3, #0
   1838c:	strd	r0, [sp, #8]
   18390:	ldrd	r0, [sp, #8]
   18394:	cmp	r1, r7
   18398:	cmpeq	r0, r6
   1839c:	mulcs	r0, r6, r5
   183a0:	movcs	r1, #0
   183a4:	mlacs	r0, r4, r7, r0
   183a8:	movcc	r1, #1
   183ac:	umullcs	r6, r7, r6, r4
   183b0:	mvncc	r6, #0
   183b4:	mvncc	r7, #0
   183b8:	orr	r3, r3, r1
   183bc:	addcs	r7, r0, r7
   183c0:	subs	r2, r2, #1
   183c4:	bne	18390 <close_stdout@@Base+0x2d10>
   183c8:	b	18350 <close_stdout@@Base+0x2cd0>
   183cc:	mov	r2, r4
   183d0:	asr	r3, r4, #31
   183d4:	mvn	r0, #0
   183d8:	mvn	r1, #0
   183dc:	strd	r2, [sp, #8]
   183e0:	bl	1aed4 <close_stdout@@Base+0x5854>
   183e4:	ldrd	r2, [sp]
   183e8:	cmp	r3, r1
   183ec:	cmpeq	r2, r0
   183f0:	bhi	186b8 <close_stdout@@Base+0x3038>
   183f4:	ldr	r3, [sp]
   183f8:	ldr	ip, [sp, #12]
   183fc:	ldr	r0, [sp, #4]
   18400:	ldr	r1, [sp]
   18404:	mul	r2, r3, ip
   18408:	mov	r3, #0
   1840c:	mla	r2, r4, r0, r2
   18410:	umull	r0, r1, r1, r4
   18414:	add	r2, r2, r1
   18418:	strd	r0, [sp]
   1841c:	str	r2, [sp, #4]
   18420:	b	18268 <close_stdout@@Base+0x2be8>
   18424:	asr	r5, r4, #31
   18428:	mov	r2, r4
   1842c:	mvn	r0, #0
   18430:	mvn	r1, #0
   18434:	mov	r3, r5
   18438:	bl	1aed4 <close_stdout@@Base+0x5854>
   1843c:	mov	ip, r7
   18440:	str	r6, [sp, #20]
   18444:	mov	r2, #3
   18448:	ldrd	r6, [sp]
   1844c:	mov	r3, #0
   18450:	strd	r0, [sp, #8]
   18454:	ldrd	r0, [sp, #8]
   18458:	cmp	r1, r7
   1845c:	cmpeq	r0, r6
   18460:	mulcs	r0, r6, r5
   18464:	movcs	r1, #0
   18468:	mlacs	r0, r4, r7, r0
   1846c:	movcc	r1, #1
   18470:	umullcs	r6, r7, r6, r4
   18474:	mvncc	r6, #0
   18478:	mvncc	r7, #0
   1847c:	orr	r3, r3, r1
   18480:	addcs	r7, r0, r7
   18484:	subs	r2, r2, #1
   18488:	bne	18454 <close_stdout@@Base+0x2dd4>
   1848c:	b	18350 <close_stdout@@Base+0x2cd0>
   18490:	asr	r5, r4, #31
   18494:	mov	r2, r4
   18498:	mvn	r0, #0
   1849c:	mvn	r1, #0
   184a0:	mov	r3, r5
   184a4:	bl	1aed4 <close_stdout@@Base+0x5854>
   184a8:	mov	ip, r7
   184ac:	str	r6, [sp, #20]
   184b0:	mov	r2, #6
   184b4:	ldrd	r6, [sp]
   184b8:	mov	r3, #0
   184bc:	strd	r0, [sp, #8]
   184c0:	ldrd	r0, [sp, #8]
   184c4:	cmp	r1, r7
   184c8:	cmpeq	r0, r6
   184cc:	mulcs	r0, r6, r5
   184d0:	movcs	r1, #0
   184d4:	mlacs	r0, r4, r7, r0
   184d8:	movcc	r1, #1
   184dc:	umullcs	r6, r7, r6, r4
   184e0:	mvncc	r6, #0
   184e4:	mvncc	r7, #0
   184e8:	orr	r3, r3, r1
   184ec:	addcs	r7, r0, r7
   184f0:	subs	r2, r2, #1
   184f4:	bne	184c0 <close_stdout@@Base+0x2e40>
   184f8:	b	18350 <close_stdout@@Base+0x2cd0>
   184fc:	ldrd	r0, [sp]
   18500:	movw	r3, #65535	; 0xffff
   18504:	movt	r3, #63	; 0x3f
   18508:	mvn	r2, #0
   1850c:	cmp	r1, r3
   18510:	cmpeq	r0, r2
   18514:	bhi	186b8 <close_stdout@@Base+0x3038>
   18518:	lsl	r2, r1, #10
   1851c:	ldr	r1, [sp]
   18520:	lsl	r3, r0, #10
   18524:	str	r3, [sp]
   18528:	mov	r3, #0
   1852c:	orr	r2, r2, r1, lsr #22
   18530:	str	r2, [sp, #4]
   18534:	b	18268 <close_stdout@@Base+0x2be8>
   18538:	asr	r5, r4, #31
   1853c:	mov	r2, r4
   18540:	mvn	r0, #0
   18544:	mvn	r1, #0
   18548:	mov	r3, r5
   1854c:	bl	1aed4 <close_stdout@@Base+0x5854>
   18550:	mov	ip, r7
   18554:	str	r6, [sp, #20]
   18558:	mov	r2, #5
   1855c:	ldrd	r6, [sp]
   18560:	mov	r3, #0
   18564:	strd	r0, [sp, #8]
   18568:	ldrd	r0, [sp, #8]
   1856c:	cmp	r1, r7
   18570:	cmpeq	r0, r6
   18574:	mulcs	r0, r6, r5
   18578:	movcs	r1, #0
   1857c:	mlacs	r0, r4, r7, r0
   18580:	movcc	r1, #1
   18584:	umullcs	r6, r7, r6, r4
   18588:	mvncc	r6, #0
   1858c:	mvncc	r7, #0
   18590:	orr	r3, r3, r1
   18594:	addcs	r7, r0, r7
   18598:	subs	r2, r2, #1
   1859c:	bne	18568 <close_stdout@@Base+0x2ee8>
   185a0:	b	18350 <close_stdout@@Base+0x2cd0>
   185a4:	mov	r2, r4
   185a8:	asr	r3, r4, #31
   185ac:	mvn	r0, #0
   185b0:	mvn	r1, #0
   185b4:	strd	r2, [sp, #8]
   185b8:	bl	1aed4 <close_stdout@@Base+0x5854>
   185bc:	ldrd	r2, [sp]
   185c0:	cmp	r3, r1
   185c4:	cmpeq	r2, r0
   185c8:	bhi	186e0 <close_stdout@@Base+0x3060>
   185cc:	ldr	ip, [sp, #4]
   185d0:	mul	r3, r4, ip
   185d4:	ldr	ip, [sp, #12]
   185d8:	mla	r3, r2, ip, r3
   185dc:	ldr	r2, [sp]
   185e0:	umull	r4, r5, r4, r2
   185e4:	add	r5, r3, r5
   185e8:	cmp	r1, r5
   185ec:	cmpeq	r0, r4
   185f0:	bcc	186e0 <close_stdout@@Base+0x3060>
   185f4:	mul	r2, r4, ip
   185f8:	ldr	ip, [sp, #8]
   185fc:	mov	r3, #0
   18600:	umull	r0, r1, r4, ip
   18604:	mla	r2, ip, r5, r2
   18608:	strd	r0, [sp]
   1860c:	add	r2, r2, r1
   18610:	str	r2, [sp, #4]
   18614:	b	18268 <close_stdout@@Base+0x2be8>
   18618:	asr	r5, r4, #31
   1861c:	mov	r2, r4
   18620:	mvn	r0, #0
   18624:	mvn	r1, #0
   18628:	mov	r3, r5
   1862c:	bl	1aed4 <close_stdout@@Base+0x5854>
   18630:	mov	ip, r7
   18634:	str	r6, [sp, #20]
   18638:	mov	r2, #4
   1863c:	ldrd	r6, [sp]
   18640:	mov	r3, #0
   18644:	strd	r0, [sp, #8]
   18648:	ldrd	r0, [sp, #8]
   1864c:	cmp	r1, r7
   18650:	cmpeq	r0, r6
   18654:	mulcs	r0, r6, r5
   18658:	movcs	r1, #0
   1865c:	mlacs	r0, r4, r7, r0
   18660:	movcc	r1, #1
   18664:	umullcs	r6, r7, r6, r4
   18668:	mvncc	r6, #0
   1866c:	mvncc	r7, #0
   18670:	orr	r3, r3, r1
   18674:	addcs	r7, r0, r7
   18678:	subs	r2, r2, #1
   1867c:	bne	18648 <close_stdout@@Base+0x2fc8>
   18680:	b	18350 <close_stdout@@Base+0x2cd0>
   18684:	ldrd	r0, [sp]
   18688:	strd	r0, [r9]
   1868c:	mov	r0, r7
   18690:	b	18058 <close_stdout@@Base+0x29d8>
   18694:	ldrb	r3, [fp, #2]
   18698:	mov	r4, #1024	; 0x400
   1869c:	cmp	r3, #66	; 0x42
   186a0:	moveq	r6, #3
   186a4:	movne	r6, #1
   186a8:	b	18130 <close_stdout@@Base+0x2ab0>
   186ac:	mov	r6, #2
   186b0:	mov	r4, #1000	; 0x3e8
   186b4:	b	18130 <close_stdout@@Base+0x2ab0>
   186b8:	mvn	r3, #0
   186bc:	mvn	r2, #0
   186c0:	strd	r2, [sp]
   186c4:	mov	r3, #1
   186c8:	b	18268 <close_stdout@@Base+0x2be8>
   186cc:	mvn	r0, #0
   186d0:	mvn	r1, #0
   186d4:	mov	r3, #1
   186d8:	strd	r0, [sp]
   186dc:	b	18268 <close_stdout@@Base+0x2be8>
   186e0:	mvn	r0, #0
   186e4:	mvn	r1, #0
   186e8:	mov	r3, #1
   186ec:	strd	r0, [sp]
   186f0:	b	18268 <close_stdout@@Base+0x2be8>
   186f4:	bl	112ac <__stack_chk_fail@plt>
   186f8:	ldr	r0, [pc, #32]	; 18720 <close_stdout@@Base+0x30a0>
   186fc:	mov	r2, #96	; 0x60
   18700:	ldr	r1, [pc, #28]	; 18724 <close_stdout@@Base+0x30a4>
   18704:	ldr	r3, [pc, #28]	; 18728 <close_stdout@@Base+0x30a8>
   18708:	add	r0, pc, r0
   1870c:	add	r1, pc, r1
   18710:	add	r3, pc, r3
   18714:	bl	11528 <__assert_fail@plt>
   18718:	andeq	r6, r1, r4, lsl r0
   1871c:	andeq	r0, r0, r8, lsr #2
   18720:	strdeq	r4, [r0], -r0
   18724:	andeq	r4, r0, r4, lsl fp
   18728:	ldrdeq	r4, [r0], -ip
   1872c:	push	{r4, r5, r6, lr}
   18730:	sub	sp, sp, #8
   18734:	mov	r4, r0
   18738:	bl	11450 <fileno@plt>
   1873c:	cmp	r0, #0
   18740:	mov	r0, r4
   18744:	blt	187c0 <close_stdout@@Base+0x3140>
   18748:	bl	11384 <__freading@plt>
   1874c:	cmp	r0, #0
   18750:	bne	1878c <close_stdout@@Base+0x310c>
   18754:	mov	r0, r4
   18758:	bl	187cc <close_stdout@@Base+0x314c>
   1875c:	cmp	r0, #0
   18760:	beq	187bc <close_stdout@@Base+0x313c>
   18764:	bl	113e4 <__errno_location@plt>
   18768:	ldr	r6, [r0]
   1876c:	mov	r5, r0
   18770:	mov	r0, r4
   18774:	bl	11468 <fclose@plt>
   18778:	cmp	r6, #0
   1877c:	mvnne	r0, #0
   18780:	strne	r6, [r5]
   18784:	add	sp, sp, #8
   18788:	pop	{r4, r5, r6, pc}
   1878c:	mov	r0, r4
   18790:	bl	11450 <fileno@plt>
   18794:	mov	r1, #1
   18798:	mov	r2, #0
   1879c:	mov	r3, #0
   187a0:	str	r1, [sp]
   187a4:	bl	112f4 <lseek64@plt>
   187a8:	mvn	r2, #0
   187ac:	mvn	r3, #0
   187b0:	cmp	r1, r3
   187b4:	cmpeq	r0, r2
   187b8:	bne	18754 <close_stdout@@Base+0x30d4>
   187bc:	mov	r0, r4
   187c0:	add	sp, sp, #8
   187c4:	pop	{r4, r5, r6, lr}
   187c8:	b	11468 <fclose@plt>
   187cc:	push	{r4, lr}
   187d0:	subs	r4, r0, #0
   187d4:	sub	sp, sp, #8
   187d8:	beq	187e8 <close_stdout@@Base+0x3168>
   187dc:	bl	11384 <__freading@plt>
   187e0:	cmp	r0, #0
   187e4:	bne	187f8 <close_stdout@@Base+0x3178>
   187e8:	mov	r0, r4
   187ec:	add	sp, sp, #8
   187f0:	pop	{r4, lr}
   187f4:	b	11228 <fflush@plt>
   187f8:	ldr	r3, [r4]
   187fc:	tst	r3, #256	; 0x100
   18800:	beq	187e8 <close_stdout@@Base+0x3168>
   18804:	mov	r3, #1
   18808:	mov	r0, r4
   1880c:	str	r3, [sp]
   18810:	mov	r2, #0
   18814:	mov	r3, #0
   18818:	bl	1882c <close_stdout@@Base+0x31ac>
   1881c:	mov	r0, r4
   18820:	add	sp, sp, #8
   18824:	pop	{r4, lr}
   18828:	b	11228 <fflush@plt>
   1882c:	push	{r4, r5, r6, r7, lr}
   18830:	sub	sp, sp, #20
   18834:	ldmib	r0, {r1, ip}
   18838:	mov	r6, r0
   1883c:	ldr	r4, [sp, #40]	; 0x28
   18840:	cmp	ip, r1
   18844:	beq	1885c <close_stdout@@Base+0x31dc>
   18848:	str	r4, [sp, #40]	; 0x28
   1884c:	mov	r0, r6
   18850:	add	sp, sp, #20
   18854:	pop	{r4, r5, r6, r7, lr}
   18858:	b	11474 <fseeko64@plt>
   1885c:	ldr	ip, [r0, #20]
   18860:	ldr	r1, [r0, #16]
   18864:	cmp	ip, r1
   18868:	bne	18848 <close_stdout@@Base+0x31c8>
   1886c:	ldr	r7, [r0, #36]	; 0x24
   18870:	cmp	r7, #0
   18874:	bne	18848 <close_stdout@@Base+0x31c8>
   18878:	str	r2, [sp, #12]
   1887c:	mvn	r5, #0
   18880:	str	r3, [sp, #8]
   18884:	bl	11450 <fileno@plt>
   18888:	str	r4, [sp]
   1888c:	mvn	r4, #0
   18890:	ldr	r2, [sp, #12]
   18894:	ldr	r3, [sp, #8]
   18898:	bl	112f4 <lseek64@plt>
   1889c:	mov	r2, r0
   188a0:	mov	r3, r1
   188a4:	cmp	r3, r5
   188a8:	cmpeq	r2, r4
   188ac:	beq	188cc <close_stdout@@Base+0x324c>
   188b0:	ldr	r1, [r6]
   188b4:	mov	r0, r7
   188b8:	strd	r2, [r6, #80]	; 0x50
   188bc:	bic	r3, r1, #16
   188c0:	str	r3, [r6]
   188c4:	add	sp, sp, #20
   188c8:	pop	{r4, r5, r6, r7, pc}
   188cc:	mvn	r0, #0
   188d0:	b	188c4 <close_stdout@@Base+0x3244>
   188d4:	ldr	ip, [pc, #228]	; 189c0 <close_stdout@@Base+0x3340>
   188d8:	mov	r3, r2
   188dc:	push	{r4, r5, r6, r7, r8, lr}
   188e0:	add	ip, pc, ip
   188e4:	ldr	r4, [pc, #216]	; 189c4 <close_stdout@@Base+0x3344>
   188e8:	sub	sp, sp, #2000	; 0x7d0
   188ec:	sub	sp, sp, #8
   188f0:	mov	r2, r1
   188f4:	add	r6, sp, #4
   188f8:	mov	r8, r0
   188fc:	ldr	r5, [ip, r4]
   18900:	mov	ip, #2000	; 0x7d0
   18904:	str	ip, [sp]
   18908:	mov	r1, sp
   1890c:	mov	r0, r6
   18910:	ldr	ip, [r5]
   18914:	str	ip, [sp, #2004]	; 0x7d4
   18918:	bl	18ea0 <close_stdout@@Base+0x3820>
   1891c:	ldr	r4, [sp]
   18920:	subs	r7, r0, #0
   18924:	beq	189ac <close_stdout@@Base+0x332c>
   18928:	mov	r1, #1
   1892c:	mov	r2, r4
   18930:	mov	r3, r8
   18934:	bl	112e8 <fwrite@plt>
   18938:	cmp	r4, r0
   1893c:	bhi	18978 <close_stdout@@Base+0x32f8>
   18940:	cmp	r7, r6
   18944:	beq	18950 <close_stdout@@Base+0x32d0>
   18948:	mov	r0, r7
   1894c:	bl	11234 <free@plt>
   18950:	cmp	r4, #0
   18954:	movge	r0, r4
   18958:	blt	189a0 <close_stdout@@Base+0x3320>
   1895c:	ldr	r2, [sp, #2004]	; 0x7d4
   18960:	ldr	r3, [r5]
   18964:	cmp	r2, r3
   18968:	bne	189bc <close_stdout@@Base+0x333c>
   1896c:	add	sp, sp, #2000	; 0x7d0
   18970:	add	sp, sp, #8
   18974:	pop	{r4, r5, r6, r7, r8, pc}
   18978:	cmp	r7, r6
   1897c:	beq	189b4 <close_stdout@@Base+0x3334>
   18980:	bl	113e4 <__errno_location@plt>
   18984:	ldr	r6, [r0]
   18988:	mov	r4, r0
   1898c:	mov	r0, r7
   18990:	bl	11234 <free@plt>
   18994:	mvn	r0, #0
   18998:	str	r6, [r4]
   1899c:	b	1895c <close_stdout@@Base+0x32dc>
   189a0:	bl	113e4 <__errno_location@plt>
   189a4:	mov	r3, #75	; 0x4b
   189a8:	str	r3, [r0]
   189ac:	mov	r0, r8
   189b0:	bl	18e90 <close_stdout@@Base+0x3810>
   189b4:	mvn	r0, #0
   189b8:	b	1895c <close_stdout@@Base+0x32dc>
   189bc:	bl	112ac <__stack_chk_fail@plt>
   189c0:	andeq	r5, r1, r8, lsl r7
   189c4:	andeq	r0, r0, r8, lsr #2
   189c8:	ldr	r3, [pc, #24]	; 189e8 <close_stdout@@Base+0x3368>
   189cc:	mov	r2, r1
   189d0:	ldr	ip, [pc, #20]	; 189ec <close_stdout@@Base+0x336c>
   189d4:	mov	r1, r0
   189d8:	add	r3, pc, r3
   189dc:	ldr	r3, [r3, ip]
   189e0:	ldr	r0, [r3]
   189e4:	b	188d4 <close_stdout@@Base+0x3254>
   189e8:	andeq	r5, r1, r0, lsr #12
   189ec:	andeq	r0, r0, r8, asr #2
   189f0:	push	{r4, r5, r6, lr}
   189f4:	mov	r4, r0
   189f8:	bl	11318 <__fpending@plt>
   189fc:	mov	r6, r0
   18a00:	mov	r0, r4
   18a04:	ldr	r4, [r4]
   18a08:	bl	1872c <close_stdout@@Base+0x30ac>
   18a0c:	and	r4, r4, #32
   18a10:	adds	r5, r0, #0
   18a14:	movne	r5, #1
   18a18:	cmp	r4, #0
   18a1c:	bne	18a3c <close_stdout@@Base+0x33bc>
   18a20:	cmp	r5, #0
   18a24:	beq	18a34 <close_stdout@@Base+0x33b4>
   18a28:	cmp	r6, #0
   18a2c:	beq	18a58 <close_stdout@@Base+0x33d8>
   18a30:	mvn	r4, #0
   18a34:	mov	r0, r4
   18a38:	pop	{r4, r5, r6, pc}
   18a3c:	cmp	r5, #0
   18a40:	bne	18a30 <close_stdout@@Base+0x33b0>
   18a44:	bl	113e4 <__errno_location@plt>
   18a48:	mvn	r4, #0
   18a4c:	str	r5, [r0]
   18a50:	mov	r0, r4
   18a54:	pop	{r4, r5, r6, pc}
   18a58:	bl	113e4 <__errno_location@plt>
   18a5c:	ldr	r4, [r0]
   18a60:	subs	r4, r4, #9
   18a64:	mvnne	r4, #0
   18a68:	mov	r0, r4
   18a6c:	pop	{r4, r5, r6, pc}
   18a70:	ldr	r3, [pc, #984]	; 18e50 <close_stdout@@Base+0x37d0>
   18a74:	mov	r0, #14
   18a78:	ldr	r2, [pc, #980]	; 18e54 <close_stdout@@Base+0x37d4>
   18a7c:	add	r3, pc, r3
   18a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a84:	sub	sp, sp, #132	; 0x84
   18a88:	ldr	r6, [r3, r2]
   18a8c:	ldr	r3, [r6]
   18a90:	str	r3, [sp, #124]	; 0x7c
   18a94:	bl	114b0 <nl_langinfo@plt>
   18a98:	subs	r5, r0, #0
   18a9c:	beq	18b50 <close_stdout@@Base+0x34d0>
   18aa0:	ldr	r3, [pc, #944]	; 18e58 <close_stdout@@Base+0x37d8>
   18aa4:	ldr	r4, [pc, r3]
   18aa8:	cmp	r4, #0
   18aac:	beq	18b5c <close_stdout@@Base+0x34dc>
   18ab0:	ldrb	r7, [r4]
   18ab4:	cmp	r7, #0
   18ab8:	bne	18aec <close_stdout@@Base+0x346c>
   18abc:	b	18b24 <close_stdout@@Base+0x34a4>
   18ac0:	mov	r0, r4
   18ac4:	bl	113c0 <strlen@plt>
   18ac8:	add	r0, r0, #1
   18acc:	add	r7, r4, r0
   18ad0:	mov	r0, r7
   18ad4:	bl	113c0 <strlen@plt>
   18ad8:	add	r0, r0, #1
   18adc:	add	r4, r7, r0
   18ae0:	ldrb	r7, [r7, r0]
   18ae4:	cmp	r7, #0
   18ae8:	beq	18b24 <close_stdout@@Base+0x34a4>
   18aec:	mov	r0, r5
   18af0:	mov	r1, r4
   18af4:	bl	1121c <strcmp@plt>
   18af8:	cmp	r0, #0
   18afc:	beq	18b14 <close_stdout@@Base+0x3494>
   18b00:	cmp	r7, #42	; 0x2a
   18b04:	bne	18ac0 <close_stdout@@Base+0x3440>
   18b08:	ldrb	r3, [r4, #1]
   18b0c:	cmp	r3, #0
   18b10:	bne	18ac0 <close_stdout@@Base+0x3440>
   18b14:	mov	r0, r4
   18b18:	bl	113c0 <strlen@plt>
   18b1c:	add	r0, r0, #1
   18b20:	add	r5, r4, r0
   18b24:	ldrb	r3, [r5]
   18b28:	cmp	r3, #0
   18b2c:	ldreq	r5, [pc, #808]	; 18e5c <close_stdout@@Base+0x37dc>
   18b30:	addeq	r5, pc, r5
   18b34:	ldr	r2, [sp, #124]	; 0x7c
   18b38:	mov	r0, r5
   18b3c:	ldr	r3, [r6]
   18b40:	cmp	r2, r3
   18b44:	bne	18e24 <close_stdout@@Base+0x37a4>
   18b48:	add	sp, sp, #132	; 0x84
   18b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b50:	ldr	r5, [pc, #776]	; 18e60 <close_stdout@@Base+0x37e0>
   18b54:	add	r5, pc, r5
   18b58:	b	18aa0 <close_stdout@@Base+0x3420>
   18b5c:	ldr	r0, [pc, #768]	; 18e64 <close_stdout@@Base+0x37e4>
   18b60:	add	r0, pc, r0
   18b64:	bl	11354 <getenv@plt>
   18b68:	subs	r8, r0, #0
   18b6c:	beq	18dfc <close_stdout@@Base+0x377c>
   18b70:	ldrb	r3, [r8]
   18b74:	cmp	r3, #0
   18b78:	beq	18d90 <close_stdout@@Base+0x3710>
   18b7c:	bl	113c0 <strlen@plt>
   18b80:	subs	sl, r0, #0
   18b84:	subne	r3, sl, #1
   18b88:	bne	18da0 <close_stdout@@Base+0x3720>
   18b8c:	mov	r9, #0
   18b90:	mov	fp, r9
   18b94:	add	r9, sl, r9
   18b98:	add	r0, r9, #14
   18b9c:	bl	1136c <malloc@plt>
   18ba0:	subs	r7, r0, #0
   18ba4:	beq	18df0 <close_stdout@@Base+0x3770>
   18ba8:	mov	r1, r8
   18bac:	mov	r2, sl
   18bb0:	bl	11258 <memcpy@plt>
   18bb4:	cmp	fp, #0
   18bb8:	add	ip, r7, r9
   18bbc:	movne	r3, #47	; 0x2f
   18bc0:	strbne	r3, [r7, sl]
   18bc4:	ldr	r3, [pc, #668]	; 18e68 <close_stdout@@Base+0x37e8>
   18bc8:	add	r3, pc, r3
   18bcc:	ldm	r3!, {r0, r1, r2}
   18bd0:	ldrh	r3, [r3]
   18bd4:	str	r0, [r7, r9]
   18bd8:	mov	r0, r7
   18bdc:	str	r1, [ip, #4]
   18be0:	mov	r1, #32768	; 0x8000
   18be4:	strh	r3, [ip, #12]
   18be8:	str	r2, [ip, #8]
   18bec:	bl	11348 <open64@plt>
   18bf0:	subs	r8, r0, #0
   18bf4:	blt	18db8 <close_stdout@@Base+0x3738>
   18bf8:	ldr	r1, [pc, #620]	; 18e6c <close_stdout@@Base+0x37ec>
   18bfc:	add	r1, pc, r1
   18c00:	bl	111ec <fdopen@plt>
   18c04:	subs	fp, r0, #0
   18c08:	beq	18e10 <close_stdout@@Base+0x3790>
   18c0c:	ldr	r0, [pc, #604]	; 18e70 <close_stdout@@Base+0x37f0>
   18c10:	add	sl, sp, #20
   18c14:	add	r9, sp, #72	; 0x48
   18c18:	mov	r8, #0
   18c1c:	add	r0, pc, r0
   18c20:	str	r0, [sp, #12]
   18c24:	ldr	r3, [fp, #4]
   18c28:	ldr	r2, [fp, #8]
   18c2c:	cmp	r3, r2
   18c30:	bcs	18d1c <close_stdout@@Base+0x369c>
   18c34:	add	r2, r3, #1
   18c38:	str	r2, [fp, #4]
   18c3c:	ldrb	r0, [r3]
   18c40:	cmp	r0, #32
   18c44:	beq	18c24 <close_stdout@@Base+0x35a4>
   18c48:	sub	r3, r0, #9
   18c4c:	cmp	r3, #1
   18c50:	bls	18c24 <close_stdout@@Base+0x35a4>
   18c54:	cmp	r0, #35	; 0x23
   18c58:	beq	18d30 <close_stdout@@Base+0x36b0>
   18c5c:	mov	r1, fp
   18c60:	bl	113d8 <ungetc@plt>
   18c64:	mov	r0, fp
   18c68:	ldr	r1, [sp, #12]
   18c6c:	mov	r2, sl
   18c70:	mov	r3, r9
   18c74:	bl	11420 <fscanf@plt>
   18c78:	cmp	r0, #1
   18c7c:	ble	18d60 <close_stdout@@Base+0x36e0>
   18c80:	mov	r0, sl
   18c84:	bl	113c0 <strlen@plt>
   18c88:	str	r0, [sp, #8]
   18c8c:	mov	r0, r9
   18c90:	bl	113c0 <strlen@plt>
   18c94:	cmp	r8, #0
   18c98:	mov	r2, r0
   18c9c:	bne	18dc4 <close_stdout@@Base+0x3744>
   18ca0:	ldr	r3, [sp, #8]
   18ca4:	str	r2, [sp]
   18ca8:	add	r8, r0, r3
   18cac:	add	r0, r8, #3
   18cb0:	add	r8, r8, #2
   18cb4:	bl	1136c <malloc@plt>
   18cb8:	ldr	r2, [sp]
   18cbc:	mov	r3, r0
   18cc0:	cmp	r3, #0
   18cc4:	beq	18e28 <close_stdout@@Base+0x37a8>
   18cc8:	ldr	r0, [sp, #8]
   18ccc:	movw	r1, #65534	; 0xfffe
   18cd0:	movt	r1, #65535	; 0xffff
   18cd4:	rsb	r2, r2, r8
   18cd8:	rsb	r1, r0, r1
   18cdc:	stm	sp, {r2, r3}
   18ce0:	add	r0, r1, r2
   18ce4:	mov	r1, sl
   18ce8:	add	r0, r3, r0
   18cec:	mov	r4, r3
   18cf0:	bl	1130c <strcpy@plt>
   18cf4:	ldr	r2, [sp]
   18cf8:	ldr	r3, [sp, #4]
   18cfc:	mov	r1, r9
   18d00:	sub	r0, r2, #1
   18d04:	add	r0, r3, r0
   18d08:	bl	1130c <strcpy@plt>
   18d0c:	ldr	r3, [fp, #4]
   18d10:	ldr	r2, [fp, #8]
   18d14:	cmp	r3, r2
   18d18:	bcc	18c34 <close_stdout@@Base+0x35b4>
   18d1c:	mov	r0, fp
   18d20:	bl	11480 <__uflow@plt>
   18d24:	cmn	r0, #1
   18d28:	beq	18d60 <close_stdout@@Base+0x36e0>
   18d2c:	b	18c40 <close_stdout@@Base+0x35c0>
   18d30:	ldr	r3, [fp, #4]
   18d34:	ldr	r2, [fp, #8]
   18d38:	cmp	r3, r2
   18d3c:	bcs	18e44 <close_stdout@@Base+0x37c4>
   18d40:	add	r2, r3, #1
   18d44:	str	r2, [fp, #4]
   18d48:	ldrb	r0, [r3]
   18d4c:	cmp	r0, #10
   18d50:	cmnne	r0, #1
   18d54:	bne	18d30 <close_stdout@@Base+0x36b0>
   18d58:	cmn	r0, #1
   18d5c:	bne	18c24 <close_stdout@@Base+0x35a4>
   18d60:	mov	r0, fp
   18d64:	bl	1872c <close_stdout@@Base+0x30ac>
   18d68:	cmp	r8, #0
   18d6c:	beq	18db8 <close_stdout@@Base+0x3738>
   18d70:	mov	r3, #0
   18d74:	strb	r3, [r4, r8]
   18d78:	mov	r0, r7
   18d7c:	bl	11234 <free@plt>
   18d80:	ldr	r3, [pc, #236]	; 18e74 <close_stdout@@Base+0x37f4>
   18d84:	add	r3, pc, r3
   18d88:	str	r4, [r3]
   18d8c:	b	18ab0 <close_stdout@@Base+0x3430>
   18d90:	ldr	r8, [pc, #224]	; 18e78 <close_stdout@@Base+0x37f8>
   18d94:	mov	r3, #7
   18d98:	mov	sl, #8
   18d9c:	add	r8, pc, r8
   18da0:	ldrb	r3, [r8, r3]
   18da4:	cmp	r3, #47	; 0x2f
   18da8:	movne	r9, #1
   18dac:	movne	fp, r9
   18db0:	bne	18b94 <close_stdout@@Base+0x3514>
   18db4:	b	18b8c <close_stdout@@Base+0x350c>
   18db8:	ldr	r4, [pc, #188]	; 18e7c <close_stdout@@Base+0x37fc>
   18dbc:	add	r4, pc, r4
   18dc0:	b	18d78 <close_stdout@@Base+0x36f8>
   18dc4:	ldr	r0, [sp, #8]
   18dc8:	str	r2, [sp]
   18dcc:	add	r3, r0, r2
   18dd0:	mov	r0, r4
   18dd4:	add	r8, r3, r8
   18dd8:	add	r1, r8, #3
   18ddc:	add	r8, r8, #2
   18de0:	bl	112b8 <realloc@plt>
   18de4:	ldr	r2, [sp]
   18de8:	mov	r3, r0
   18dec:	b	18cc0 <close_stdout@@Base+0x3640>
   18df0:	ldr	r4, [pc, #136]	; 18e80 <close_stdout@@Base+0x3800>
   18df4:	add	r4, pc, r4
   18df8:	b	18d80 <close_stdout@@Base+0x3700>
   18dfc:	ldr	r8, [pc, #128]	; 18e84 <close_stdout@@Base+0x3804>
   18e00:	mov	r3, #7
   18e04:	mov	sl, #8
   18e08:	add	r8, pc, r8
   18e0c:	b	18da0 <close_stdout@@Base+0x3720>
   18e10:	ldr	r4, [pc, #112]	; 18e88 <close_stdout@@Base+0x3808>
   18e14:	mov	r0, r8
   18e18:	add	r4, pc, r4
   18e1c:	bl	11510 <close@plt>
   18e20:	b	18d78 <close_stdout@@Base+0x36f8>
   18e24:	bl	112ac <__stack_chk_fail@plt>
   18e28:	mov	r0, r4
   18e2c:	ldr	r4, [pc, #88]	; 18e8c <close_stdout@@Base+0x380c>
   18e30:	bl	11234 <free@plt>
   18e34:	mov	r0, fp
   18e38:	add	r4, pc, r4
   18e3c:	bl	1872c <close_stdout@@Base+0x30ac>
   18e40:	b	18d78 <close_stdout@@Base+0x36f8>
   18e44:	mov	r0, fp
   18e48:	bl	11480 <__uflow@plt>
   18e4c:	b	18d4c <close_stdout@@Base+0x36cc>
   18e50:	andeq	r5, r1, ip, ror r5
   18e54:	andeq	r0, r0, r8, lsr #2
   18e58:	strdeq	r5, [r1], -r0
   18e5c:	andeq	r4, r0, ip, lsl #14
   18e60:	andeq	r3, r0, ip, ror #7
   18e64:	andeq	r4, r0, r4, ror #13
   18e68:	andeq	r4, r0, ip, lsl #13
   18e6c:	andeq	r3, r0, r8, lsr r1
   18e70:	andeq	r4, r0, r8, asr #12
   18e74:	andeq	r5, r1, r0, lsl r6
   18e78:	muleq	r0, r4, r4
   18e7c:	andeq	r3, r0, r4, lsl #3
   18e80:	andeq	r3, r0, ip, asr #2
   18e84:	andeq	r4, r0, r8, lsr #8
   18e88:	andeq	r3, r0, r8, lsr #2
   18e8c:	andeq	r3, r0, r8, lsl #2
   18e90:	ldr	r3, [r0]
   18e94:	orr	r3, r3, #32
   18e98:	str	r3, [r0]
   18e9c:	bx	lr
   18ea0:	ldr	ip, [pc, #3636]	; 19cdc <close_stdout@@Base+0x465c>
   18ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ea8:	add	fp, sp, #32
   18eac:	ldr	lr, [pc, #3628]	; 19ce0 <close_stdout@@Base+0x4660>
   18eb0:	sub	sp, sp, #564	; 0x234
   18eb4:	add	ip, pc, ip
   18eb8:	str	r0, [fp, #-504]	; 0xfffffe08
   18ebc:	sub	r4, fp, #484	; 0x1e4
   18ec0:	str	r1, [fp, #-536]	; 0xfffffde8
   18ec4:	mov	r0, r2
   18ec8:	ldr	lr, [ip, lr]
   18ecc:	mov	r5, r2
   18ed0:	sub	r1, fp, #364	; 0x16c
   18ed4:	mov	r2, r4
   18ed8:	mov	r6, r3
   18edc:	ldr	ip, [lr]
   18ee0:	str	lr, [fp, #-528]	; 0xfffffdf0
   18ee4:	str	ip, [fp, #-40]	; 0xffffffd8
   18ee8:	bl	19e34 <close_stdout@@Base+0x47b4>
   18eec:	cmp	r0, #0
   18ef0:	blt	199e0 <close_stdout@@Base+0x4360>
   18ef4:	mov	r0, r6
   18ef8:	mov	r1, r4
   18efc:	bl	19ce4 <close_stdout@@Base+0x4664>
   18f00:	cmp	r0, #0
   18f04:	blt	19aa0 <close_stdout@@Base+0x4420>
   18f08:	ldr	r3, [fp, #-356]	; 0xfffffe9c
   18f0c:	ldr	r2, [fp, #-352]	; 0xfffffea0
   18f10:	add	r3, r3, #7
   18f14:	cmp	r3, #6
   18f18:	mvnls	r3, #0
   18f1c:	adds	r3, r3, r2
   18f20:	bcs	1923c <close_stdout@@Base+0x3bbc>
   18f24:	adds	r0, r3, #6
   18f28:	bcs	1923c <close_stdout@@Base+0x3bbc>
   18f2c:	cmp	r0, #4000	; 0xfa0
   18f30:	bcs	19984 <close_stdout@@Base+0x4304>
   18f34:	add	r3, r3, #20
   18f38:	mov	r1, #0
   18f3c:	bic	r3, r3, #7
   18f40:	str	r1, [fp, #-548]	; 0xfffffddc
   18f44:	sub	sp, sp, r3
   18f48:	add	r2, sp, #32
   18f4c:	str	r2, [fp, #-512]	; 0xfffffe00
   18f50:	ldr	r3, [fp, #-504]	; 0xfffffe08
   18f54:	sub	r2, fp, #496	; 0x1f0
   18f58:	str	r2, [fp, #-532]	; 0xfffffdec
   18f5c:	mov	ip, #0
   18f60:	cmp	r3, #0
   18f64:	ldr	r3, [fp, #-360]	; 0xfffffe98
   18f68:	ldr	r2, [fp, #-504]	; 0xfffffe08
   18f6c:	mov	r6, ip
   18f70:	ldrne	r1, [fp, #-536]	; 0xfffffde8
   18f74:	add	r7, r3, #44	; 0x2c
   18f78:	ldreq	r4, [fp, #-504]	; 0xfffffe08
   18f7c:	str	ip, [fp, #-520]	; 0xfffffdf8
   18f80:	ldrne	r4, [r1]
   18f84:	ldr	sl, [r7, #-44]	; 0xffffffd4
   18f88:	sub	r3, r7, #44	; 0x2c
   18f8c:	str	r3, [fp, #-540]	; 0xfffffde4
   18f90:	cmp	sl, r5
   18f94:	beq	19850 <close_stdout@@Base+0x41d0>
   18f98:	rsb	r3, r5, sl
   18f9c:	adds	r9, r3, r6
   18fa0:	mvncs	r9, #0
   18fa4:	cmp	r4, r9
   18fa8:	bcs	197e0 <close_stdout@@Base+0x4160>
   18fac:	cmp	r4, #0
   18fb0:	beq	196ac <close_stdout@@Base+0x402c>
   18fb4:	blt	19adc <close_stdout@@Base+0x445c>
   18fb8:	lsl	r4, r4, #1
   18fbc:	cmp	r4, r9
   18fc0:	movcc	r4, r9
   18fc4:	cmn	r4, #1
   18fc8:	beq	19adc <close_stdout@@Base+0x445c>
   18fcc:	ldr	r1, [fp, #-504]	; 0xfffffe08
   18fd0:	subs	lr, r2, r1
   18fd4:	rsbs	r8, lr, #0
   18fd8:	adcs	r8, r8, lr
   18fdc:	cmp	r2, r1
   18fe0:	cmpne	r2, #0
   18fe4:	bne	196b4 <close_stdout@@Base+0x4034>
   18fe8:	mov	r0, r4
   18fec:	str	r2, [fp, #-560]	; 0xfffffdd0
   18ff0:	str	r3, [fp, #-556]	; 0xfffffdd4
   18ff4:	bl	1136c <malloc@plt>
   18ff8:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   18ffc:	ldr	r3, [fp, #-556]	; 0xfffffdd4
   19000:	mov	sl, r0
   19004:	cmp	sl, #0
   19008:	beq	19adc <close_stdout@@Base+0x445c>
   1900c:	cmp	r6, #0
   19010:	moveq	r8, #0
   19014:	andne	r8, r8, #1
   19018:	cmp	r8, #0
   1901c:	bne	19834 <close_stdout@@Base+0x41b4>
   19020:	add	r0, sl, r6
   19024:	mov	r1, r5
   19028:	mov	r2, r3
   1902c:	bl	11258 <memcpy@plt>
   19030:	ldr	r3, [fp, #-364]	; 0xfffffe94
   19034:	ldr	r2, [fp, #-520]	; 0xfffffdf8
   19038:	cmp	r3, r2
   1903c:	beq	19af0 <close_stdout@@Base+0x4470>
   19040:	ldrb	r3, [r7, #-8]
   19044:	cmp	r3, #37	; 0x25
   19048:	beq	196d8 <close_stdout@@Base+0x4058>
   1904c:	ldr	r2, [r7, #-4]
   19050:	cmn	r2, #1
   19054:	beq	199c0 <close_stdout@@Base+0x4340>
   19058:	cmp	r3, #110	; 0x6e
   1905c:	beq	19804 <close_stdout@@Base+0x4184>
   19060:	ldr	r1, [fp, #-480]	; 0xfffffe20
   19064:	ldr	r3, [r7, #-36]	; 0xffffffdc
   19068:	ldr	r8, [r1, r2, lsl #4]
   1906c:	tst	r3, #1
   19070:	ldr	r1, [fp, #-512]	; 0xfffffe00
   19074:	mov	r2, #37	; 0x25
   19078:	addeq	r5, r1, #1
   1907c:	strb	r2, [r1]
   19080:	ldrne	r2, [fp, #-512]	; 0xfffffe00
   19084:	ldrne	r1, [fp, #-512]	; 0xfffffe00
   19088:	addne	r5, r2, #2
   1908c:	movne	r2, #39	; 0x27
   19090:	strbne	r2, [r1, #1]
   19094:	tst	r3, #2
   19098:	movne	r2, #45	; 0x2d
   1909c:	strbne	r2, [r5]
   190a0:	addne	r5, r5, #1
   190a4:	tst	r3, #4
   190a8:	movne	r2, #43	; 0x2b
   190ac:	strbne	r2, [r5]
   190b0:	addne	r5, r5, #1
   190b4:	tst	r3, #8
   190b8:	movne	r2, #32
   190bc:	strbne	r2, [r5]
   190c0:	addne	r5, r5, #1
   190c4:	tst	r3, #16
   190c8:	movne	r2, #35	; 0x23
   190cc:	strbne	r2, [r5]
   190d0:	addne	r5, r5, #1
   190d4:	tst	r3, #64	; 0x40
   190d8:	movne	r2, #73	; 0x49
   190dc:	strbne	r2, [r5]
   190e0:	addne	r5, r5, #1
   190e4:	tst	r3, #32
   190e8:	movne	r3, #48	; 0x30
   190ec:	strbne	r3, [r5]
   190f0:	ldr	r1, [r7, #-32]	; 0xffffffe0
   190f4:	addne	r5, r5, #1
   190f8:	ldr	r2, [r7, #-28]	; 0xffffffe4
   190fc:	cmp	r1, r2
   19100:	beq	19114 <close_stdout@@Base+0x3a94>
   19104:	rsb	r2, r1, r2
   19108:	mov	r0, r5
   1910c:	add	r5, r5, r2
   19110:	bl	11258 <memcpy@plt>
   19114:	ldr	r1, [r7, #-20]	; 0xffffffec
   19118:	ldr	r2, [r7, #-16]
   1911c:	cmp	r1, r2
   19120:	beq	19134 <close_stdout@@Base+0x3ab4>
   19124:	rsb	r2, r1, r2
   19128:	mov	r0, r5
   1912c:	add	r5, r5, r2
   19130:	bl	11258 <memcpy@plt>
   19134:	sub	r3, r8, #7
   19138:	cmp	r3, #9
   1913c:	bhi	19164 <close_stdout@@Base+0x3ae4>
   19140:	mov	r2, #1
   19144:	lsl	r3, r2, r3
   19148:	movw	r2, #643	; 0x283
   1914c:	and	r2, r3, r2
   19150:	cmp	r2, #0
   19154:	beq	1985c <close_stdout@@Base+0x41dc>
   19158:	mov	r3, #108	; 0x6c
   1915c:	add	r5, r5, #1
   19160:	strb	r3, [r5, #-1]
   19164:	ldrb	r3, [r7, #-8]
   19168:	mov	r1, #0
   1916c:	strb	r1, [r5, #1]
   19170:	strb	r3, [r5]
   19174:	ldr	r3, [r7, #-24]	; 0xffffffe8
   19178:	cmn	r3, #1
   1917c:	beq	1997c <close_stdout@@Base+0x42fc>
   19180:	ldr	r2, [fp, #-480]	; 0xfffffe20
   19184:	add	r1, r2, r3, lsl #4
   19188:	ldr	r3, [r2, r3, lsl #4]
   1918c:	cmp	r3, #5
   19190:	bne	199c0 <close_stdout@@Base+0x4340>
   19194:	ldr	r3, [r1, #8]
   19198:	mov	r6, #1
   1919c:	str	r3, [fp, #-492]	; 0xfffffe14
   191a0:	ldr	r3, [r7, #-12]
   191a4:	cmn	r3, #1
   191a8:	beq	191d4 <close_stdout@@Base+0x3b54>
   191ac:	ldr	r2, [fp, #-480]	; 0xfffffe20
   191b0:	add	r1, r2, r3, lsl #4
   191b4:	ldr	r3, [r2, r3, lsl #4]
   191b8:	cmp	r3, #5
   191bc:	bne	199c0 <close_stdout@@Base+0x4340>
   191c0:	ldr	r2, [r1, #8]
   191c4:	sub	r1, fp, #36	; 0x24
   191c8:	add	r3, r1, r6, lsl #2
   191cc:	add	r6, r6, #1
   191d0:	str	r2, [r3, #-456]	; 0xfffffe38
   191d4:	adds	r2, r9, #2
   191d8:	str	r2, [fp, #-524]	; 0xfffffdf4
   191dc:	mov	r3, r2
   191e0:	mvncs	r3, #0
   191e4:	cmp	r4, r3
   191e8:	bcs	19324 <close_stdout@@Base+0x3ca4>
   191ec:	cmp	r4, #0
   191f0:	beq	1929c <close_stdout@@Base+0x3c1c>
   191f4:	blt	19cc8 <close_stdout@@Base+0x4648>
   191f8:	cmp	r9, r2
   191fc:	lsl	r4, r4, #1
   19200:	bls	192ac <close_stdout@@Base+0x3c2c>
   19204:	str	sl, [fp, #-560]	; 0xfffffdd0
   19208:	bl	113e4 <__errno_location@plt>
   1920c:	str	r0, [fp, #-516]	; 0xfffffdfc
   19210:	mov	r2, sl
   19214:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19218:	cmp	r2, #0
   1921c:	cmpne	r2, r3
   19220:	bne	19c68 <close_stdout@@Base+0x45e8>
   19224:	ldr	r1, [fp, #-548]	; 0xfffffddc
   19228:	cmp	r1, #0
   1922c:	beq	1923c <close_stdout@@Base+0x3bbc>
   19230:	mov	r0, r1
   19234:	bl	11234 <free@plt>
   19238:	b	19244 <close_stdout@@Base+0x3bc4>
   1923c:	bl	113e4 <__errno_location@plt>
   19240:	str	r0, [fp, #-516]	; 0xfffffdfc
   19244:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19248:	sub	r3, fp, #348	; 0x15c
   1924c:	cmp	r0, r3
   19250:	beq	19258 <close_stdout@@Base+0x3bd8>
   19254:	bl	11234 <free@plt>
   19258:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1925c:	sub	r3, fp, #476	; 0x1dc
   19260:	cmp	r0, r3
   19264:	beq	1926c <close_stdout@@Base+0x3bec>
   19268:	bl	11234 <free@plt>
   1926c:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   19270:	mov	r3, #0
   19274:	mov	r2, #12
   19278:	str	r2, [r1]
   1927c:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   19280:	mov	r0, r3
   19284:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19288:	ldr	r3, [r1]
   1928c:	cmp	r2, r3
   19290:	bne	19cc4 <close_stdout@@Base+0x4644>
   19294:	sub	sp, fp, #32
   19298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1929c:	ldr	r3, [fp, #-524]	; 0xfffffdf4
   192a0:	cmp	r9, r3
   192a4:	bhi	19204 <close_stdout@@Base+0x3b84>
   192a8:	mov	r4, #12
   192ac:	ldr	r3, [fp, #-524]	; 0xfffffdf4
   192b0:	cmp	r3, r4
   192b4:	movcs	r4, r3
   192b8:	cmn	r4, #1
   192bc:	beq	19204 <close_stdout@@Base+0x3b84>
   192c0:	ldr	r1, [fp, #-504]	; 0xfffffe08
   192c4:	subs	r0, sl, r1
   192c8:	rsbs	r2, r0, #0
   192cc:	adcs	r2, r2, r0
   192d0:	cmp	sl, r1
   192d4:	cmpne	sl, #0
   192d8:	bne	199a4 <close_stdout@@Base+0x4324>
   192dc:	mov	r0, r4
   192e0:	str	r2, [fp, #-560]	; 0xfffffdd0
   192e4:	bl	1136c <malloc@plt>
   192e8:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   192ec:	mov	r3, r0
   192f0:	cmp	r3, #0
   192f4:	beq	19204 <close_stdout@@Base+0x3b84>
   192f8:	cmp	r9, #0
   192fc:	moveq	r2, #0
   19300:	andne	r2, r2, #1
   19304:	cmp	r2, #0
   19308:	moveq	sl, r3
   1930c:	beq	19324 <close_stdout@@Base+0x3ca4>
   19310:	mov	r1, sl
   19314:	mov	r0, r3
   19318:	mov	r2, r9
   1931c:	mov	sl, r3
   19320:	bl	11258 <memcpy@plt>
   19324:	mov	r2, #0
   19328:	strb	r2, [sl, r9]
   1932c:	sub	r8, r8, #1
   19330:	str	r8, [fp, #-508]	; 0xfffffe04
   19334:	bl	113e4 <__errno_location@plt>
   19338:	rsb	ip, r9, r4
   1933c:	str	r5, [fp, #-544]	; 0xfffffde0
   19340:	mov	r5, ip
   19344:	ldr	r3, [r0]
   19348:	str	r0, [fp, #-516]	; 0xfffffdfc
   1934c:	str	r3, [fp, #-552]	; 0xfffffdd8
   19350:	ldr	r2, [fp, #-516]	; 0xfffffdfc
   19354:	mvn	r1, #0
   19358:	cmp	r5, #0
   1935c:	str	r1, [fp, #-496]	; 0xfffffe10
   19360:	ldr	r1, [fp, #-508]	; 0xfffffe04
   19364:	mov	r3, #0
   19368:	movge	r8, r5
   1936c:	mvnlt	r8, #-2147483648	; 0x80000000
   19370:	str	r3, [r2]
   19374:	cmp	r1, #16
   19378:	addls	pc, pc, r1, lsl #2
   1937c:	b	199c0 <close_stdout@@Base+0x4340>
   19380:	b	198b4 <close_stdout@@Base+0x4234>
   19384:	b	19794 <close_stdout@@Base+0x4114>
   19388:	b	19898 <close_stdout@@Base+0x4218>
   1938c:	b	1987c <close_stdout@@Base+0x41fc>
   19390:	b	193c4 <close_stdout@@Base+0x3d44>
   19394:	b	193c4 <close_stdout@@Base+0x3d44>
   19398:	b	193c4 <close_stdout@@Base+0x3d44>
   1939c:	b	193c4 <close_stdout@@Base+0x3d44>
   193a0:	b	1951c <close_stdout@@Base+0x3e9c>
   193a4:	b	1951c <close_stdout@@Base+0x3e9c>
   193a8:	b	19578 <close_stdout@@Base+0x3ef8>
   193ac:	b	19578 <close_stdout@@Base+0x3ef8>
   193b0:	b	193c4 <close_stdout@@Base+0x3d44>
   193b4:	b	193c4 <close_stdout@@Base+0x3d44>
   193b8:	b	193c4 <close_stdout@@Base+0x3d44>
   193bc:	b	193c4 <close_stdout@@Base+0x3d44>
   193c0:	b	193c4 <close_stdout@@Base+0x3d44>
   193c4:	ldr	r2, [r7, #-4]
   193c8:	cmp	r6, #1
   193cc:	ldr	r3, [fp, #-480]	; 0xfffffe20
   193d0:	add	r3, r3, r2, lsl #4
   193d4:	ldr	r3, [r3, #8]
   193d8:	beq	197ac <close_stdout@@Base+0x412c>
   193dc:	cmp	r6, #2
   193e0:	bne	195d4 <close_stdout@@Base+0x3f54>
   193e4:	ldr	r2, [fp, #-512]	; 0xfffffe00
   193e8:	add	r0, sl, r9
   193ec:	ldr	lr, [fp, #-492]	; 0xfffffe14
   193f0:	mov	r1, r8
   193f4:	ldr	ip, [fp, #-488]	; 0xfffffe18
   193f8:	str	r2, [sp]
   193fc:	mov	r2, #1
   19400:	str	r3, [sp, #12]
   19404:	sub	r3, fp, #496	; 0x1f0
   19408:	str	lr, [sp, #4]
   1940c:	str	r3, [sp, #16]
   19410:	mvn	r3, #0
   19414:	str	ip, [sp, #8]
   19418:	bl	1151c <__snprintf_chk@plt>
   1941c:	ldr	r3, [fp, #-496]	; 0xfffffe10
   19420:	cmp	r3, #0
   19424:	blt	19608 <close_stdout@@Base+0x3f88>
   19428:	cmp	r8, r3
   1942c:	bls	19440 <close_stdout@@Base+0x3dc0>
   19430:	add	r2, sl, r3
   19434:	ldrb	r2, [r2, r9]
   19438:	cmp	r2, #0
   1943c:	bne	199c0 <close_stdout@@Base+0x4340>
   19440:	cmp	r0, r3
   19444:	movle	r0, r3
   19448:	ble	19450 <close_stdout@@Base+0x3dd0>
   1944c:	str	r0, [fp, #-496]	; 0xfffffe10
   19450:	add	r3, r0, #1
   19454:	cmp	r8, r3
   19458:	bhi	19bf0 <close_stdout@@Base+0x4570>
   1945c:	cmn	r8, #-2147483647	; 0x80000001
   19460:	beq	19c08 <close_stdout@@Base+0x4588>
   19464:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   19468:	add	r0, r0, r2
   1946c:	cmp	r9, r0
   19470:	mvnhi	r0, #0
   19474:	cmp	r4, #0
   19478:	mvnlt	r0, #0
   1947c:	blt	1948c <close_stdout@@Base+0x3e0c>
   19480:	lsl	r3, r4, #1
   19484:	cmp	r0, r3
   19488:	movcc	r0, r3
   1948c:	cmp	r4, r0
   19490:	bcs	19350 <close_stdout@@Base+0x3cd0>
   19494:	cmp	r4, #0
   19498:	beq	197e8 <close_stdout@@Base+0x4168>
   1949c:	blt	19210 <close_stdout@@Base+0x3b90>
   194a0:	lsl	r4, r4, #1
   194a4:	cmp	r4, r0
   194a8:	movcc	r4, r0
   194ac:	cmn	r4, #1
   194b0:	beq	19210 <close_stdout@@Base+0x3b90>
   194b4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   194b8:	subs	r2, sl, r3
   194bc:	rsbs	r5, r2, #0
   194c0:	adcs	r5, r5, r2
   194c4:	cmp	sl, r3
   194c8:	cmpne	sl, #0
   194cc:	bne	197f0 <close_stdout@@Base+0x4170>
   194d0:	mov	r0, r4
   194d4:	bl	1136c <malloc@plt>
   194d8:	mov	r3, r0
   194dc:	cmp	r3, #0
   194e0:	beq	19210 <close_stdout@@Base+0x3b90>
   194e4:	cmp	r9, #0
   194e8:	moveq	r5, #0
   194ec:	andne	r5, r5, #1
   194f0:	cmp	r5, #0
   194f4:	rsbeq	r5, r9, r4
   194f8:	moveq	sl, r3
   194fc:	beq	19350 <close_stdout@@Base+0x3cd0>
   19500:	mov	r1, sl
   19504:	mov	r0, r3
   19508:	mov	r2, r9
   1950c:	mov	sl, r3
   19510:	rsb	r5, r9, r4
   19514:	bl	11258 <memcpy@plt>
   19518:	b	19350 <close_stdout@@Base+0x3cd0>
   1951c:	ldr	r2, [r7, #-4]
   19520:	cmp	r6, #1
   19524:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19528:	add	r3, r3, r2, lsl #4
   1952c:	ldrd	r2, [r3, #8]
   19530:	beq	19948 <close_stdout@@Base+0x42c8>
   19534:	cmp	r6, #2
   19538:	bne	19a24 <close_stdout@@Base+0x43a4>
   1953c:	ldr	r1, [fp, #-512]	; 0xfffffe00
   19540:	add	r0, sl, r9
   19544:	ldr	lr, [fp, #-492]	; 0xfffffe14
   19548:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1954c:	strd	r2, [sp, #16]
   19550:	sub	r2, fp, #496	; 0x1f0
   19554:	str	r1, [sp]
   19558:	mvn	r3, #0
   1955c:	str	r2, [sp, #24]
   19560:	mov	r1, r8
   19564:	mov	r2, #1
   19568:	str	lr, [sp, #4]
   1956c:	str	ip, [sp, #8]
   19570:	bl	1151c <__snprintf_chk@plt>
   19574:	b	1941c <close_stdout@@Base+0x3d9c>
   19578:	ldr	r2, [r7, #-4]
   1957c:	cmp	r6, #1
   19580:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19584:	add	r3, r3, r2, lsl #4
   19588:	ldrd	r0, [r3, #8]
   1958c:	beq	19914 <close_stdout@@Base+0x4294>
   19590:	cmp	r6, #2
   19594:	bne	199f8 <close_stdout@@Base+0x4378>
   19598:	ldr	r3, [fp, #-492]	; 0xfffffe14
   1959c:	ldr	r2, [fp, #-512]	; 0xfffffe00
   195a0:	ldr	lr, [fp, #-488]	; 0xfffffe18
   195a4:	strd	r0, [sp, #16]
   195a8:	add	r0, sl, r9
   195ac:	str	r2, [sp]
   195b0:	mov	r1, r8
   195b4:	sub	r2, fp, #496	; 0x1f0
   195b8:	str	r3, [sp, #4]
   195bc:	str	r2, [sp, #24]
   195c0:	mvn	r3, #0
   195c4:	mov	r2, #1
   195c8:	str	lr, [sp, #8]
   195cc:	bl	1151c <__snprintf_chk@plt>
   195d0:	b	1941c <close_stdout@@Base+0x3d9c>
   195d4:	ldr	r1, [fp, #-512]	; 0xfffffe00
   195d8:	sub	r2, fp, #496	; 0x1f0
   195dc:	str	r3, [sp, #4]
   195e0:	add	r0, sl, r9
   195e4:	str	r2, [sp, #8]
   195e8:	mvn	r3, #0
   195ec:	str	r1, [sp]
   195f0:	mov	r2, #1
   195f4:	mov	r1, r8
   195f8:	bl	1151c <__snprintf_chk@plt>
   195fc:	ldr	r3, [fp, #-496]	; 0xfffffe10
   19600:	cmp	r3, #0
   19604:	bge	19428 <close_stdout@@Base+0x3da8>
   19608:	ldr	r1, [fp, #-544]	; 0xfffffde0
   1960c:	ldrb	r3, [r1, #1]
   19610:	cmp	r3, #0
   19614:	movne	r2, #0
   19618:	strbne	r2, [r1, #1]
   1961c:	bne	19350 <close_stdout@@Base+0x3cd0>
   19620:	cmp	r0, #0
   19624:	bge	1944c <close_stdout@@Base+0x3dcc>
   19628:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1962c:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   19630:	cmp	sl, #0
   19634:	cmpne	r3, sl
   19638:	ldr	r4, [r1]
   1963c:	bne	19a94 <close_stdout@@Base+0x4414>
   19640:	ldr	r2, [fp, #-548]	; 0xfffffddc
   19644:	cmp	r2, #0
   19648:	beq	19654 <close_stdout@@Base+0x3fd4>
   1964c:	mov	r0, r2
   19650:	bl	11234 <free@plt>
   19654:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19658:	sub	r3, fp, #348	; 0x15c
   1965c:	cmp	r0, r3
   19660:	beq	19668 <close_stdout@@Base+0x3fe8>
   19664:	bl	11234 <free@plt>
   19668:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1966c:	sub	r3, fp, #476	; 0x1dc
   19670:	cmp	r0, r3
   19674:	beq	1967c <close_stdout@@Base+0x3ffc>
   19678:	bl	11234 <free@plt>
   1967c:	cmp	r4, #0
   19680:	bne	1969c <close_stdout@@Base+0x401c>
   19684:	ldr	r3, [fp, #-540]	; 0xfffffde4
   19688:	ldrb	r4, [r3, #36]	; 0x24
   1968c:	and	r4, r4, #239	; 0xef
   19690:	cmp	r4, #99	; 0x63
   19694:	movne	r4, #22
   19698:	moveq	r4, #84	; 0x54
   1969c:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   196a0:	mov	r3, #0
   196a4:	str	r4, [r1]
   196a8:	b	1927c <close_stdout@@Base+0x3bfc>
   196ac:	mov	r4, #12
   196b0:	b	18fbc <close_stdout@@Base+0x393c>
   196b4:	mov	r0, r2
   196b8:	mov	r1, r4
   196bc:	str	r2, [fp, #-560]	; 0xfffffdd0
   196c0:	str	r3, [fp, #-556]	; 0xfffffdd4
   196c4:	bl	112b8 <realloc@plt>
   196c8:	ldr	r3, [fp, #-556]	; 0xfffffdd4
   196cc:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   196d0:	mov	sl, r0
   196d4:	b	19004 <close_stdout@@Base+0x3984>
   196d8:	ldr	r3, [r7, #-4]
   196dc:	cmn	r3, #1
   196e0:	bne	199c0 <close_stdout@@Base+0x4340>
   196e4:	adds	r6, r9, #1
   196e8:	mvncs	r6, #0
   196ec:	cmp	r4, r6
   196f0:	bcs	19770 <close_stdout@@Base+0x40f0>
   196f4:	cmp	r4, #0
   196f8:	beq	199c4 <close_stdout@@Base+0x4344>
   196fc:	blt	19204 <close_stdout@@Base+0x3b84>
   19700:	lsl	r4, r4, #1
   19704:	cmp	r4, r6
   19708:	movcc	r4, r6
   1970c:	cmn	r4, #1
   19710:	beq	19204 <close_stdout@@Base+0x3b84>
   19714:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19718:	subs	ip, sl, r3
   1971c:	rsbs	r5, ip, #0
   19720:	adcs	r5, r5, ip
   19724:	cmp	sl, r3
   19728:	cmpne	sl, #0
   1972c:	bne	199cc <close_stdout@@Base+0x434c>
   19730:	mov	r0, r4
   19734:	bl	1136c <malloc@plt>
   19738:	mov	r3, r0
   1973c:	cmp	r3, #0
   19740:	beq	19204 <close_stdout@@Base+0x3b84>
   19744:	cmp	r9, #0
   19748:	moveq	r5, #0
   1974c:	andne	r5, r5, #1
   19750:	cmp	r5, #0
   19754:	moveq	sl, r3
   19758:	beq	19770 <close_stdout@@Base+0x40f0>
   1975c:	mov	r1, sl
   19760:	mov	r0, r3
   19764:	mov	r2, r9
   19768:	mov	sl, r3
   1976c:	bl	11258 <memcpy@plt>
   19770:	mov	r2, sl
   19774:	mov	r1, #37	; 0x25
   19778:	strb	r1, [sl, r9]
   1977c:	ldr	r1, [fp, #-520]	; 0xfffffdf8
   19780:	add	r7, r7, #44	; 0x2c
   19784:	ldr	r5, [r7, #-84]	; 0xffffffac
   19788:	add	r1, r1, #1
   1978c:	str	r1, [fp, #-520]	; 0xfffffdf8
   19790:	b	18f84 <close_stdout@@Base+0x3904>
   19794:	ldr	r2, [r7, #-4]
   19798:	cmp	r6, #1
   1979c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   197a0:	add	r3, r3, r2, lsl #4
   197a4:	ldrb	r3, [r3, #8]
   197a8:	bne	193dc <close_stdout@@Base+0x3d5c>
   197ac:	ldr	r1, [fp, #-512]	; 0xfffffe00
   197b0:	add	r0, sl, r9
   197b4:	ldr	lr, [fp, #-492]	; 0xfffffe14
   197b8:	mov	r2, r6
   197bc:	str	r3, [sp, #8]
   197c0:	sub	r3, fp, #496	; 0x1f0
   197c4:	str	r1, [sp]
   197c8:	mov	r1, r8
   197cc:	str	r3, [sp, #12]
   197d0:	mvn	r3, #0
   197d4:	str	lr, [sp, #4]
   197d8:	bl	1151c <__snprintf_chk@plt>
   197dc:	b	1941c <close_stdout@@Base+0x3d9c>
   197e0:	mov	sl, r2
   197e4:	b	19020 <close_stdout@@Base+0x39a0>
   197e8:	mov	r4, #12
   197ec:	b	194a4 <close_stdout@@Base+0x3e24>
   197f0:	mov	r0, sl
   197f4:	mov	r1, r4
   197f8:	bl	112b8 <realloc@plt>
   197fc:	mov	r3, r0
   19800:	b	194dc <close_stdout@@Base+0x3e5c>
   19804:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19808:	add	r1, r3, r2, lsl #4
   1980c:	ldr	r3, [r3, r2, lsl #4]
   19810:	sub	r3, r3, #18
   19814:	cmp	r3, #4
   19818:	addls	pc, pc, r3, lsl #2
   1981c:	b	199c0 <close_stdout@@Base+0x4340>
   19820:	b	19a50 <close_stdout@@Base+0x43d0>
   19824:	b	19a64 <close_stdout@@Base+0x43e4>
   19828:	b	19900 <close_stdout@@Base+0x4280>
   1982c:	b	19900 <close_stdout@@Base+0x4280>
   19830:	b	19a78 <close_stdout@@Base+0x43f8>
   19834:	mov	r1, r2
   19838:	mov	r0, sl
   1983c:	mov	r2, r6
   19840:	str	r3, [fp, #-556]	; 0xfffffdd4
   19844:	bl	11258 <memcpy@plt>
   19848:	ldr	r3, [fp, #-556]	; 0xfffffdd4
   1984c:	b	19020 <close_stdout@@Base+0x39a0>
   19850:	mov	r9, r6
   19854:	mov	sl, r2
   19858:	b	19030 <close_stdout@@Base+0x39b0>
   1985c:	tst	r3, #32
   19860:	bne	199e8 <close_stdout@@Base+0x4368>
   19864:	tst	r3, #12
   19868:	beq	19164 <close_stdout@@Base+0x3ae4>
   1986c:	mov	r3, #108	; 0x6c
   19870:	add	r5, r5, #1
   19874:	strb	r3, [r5, #-1]
   19878:	b	19158 <close_stdout@@Base+0x3ad8>
   1987c:	ldr	r2, [r7, #-4]
   19880:	cmp	r6, #1
   19884:	ldr	r3, [fp, #-480]	; 0xfffffe20
   19888:	add	r3, r3, r2, lsl #4
   1988c:	ldrh	r3, [r3, #8]
   19890:	bne	193dc <close_stdout@@Base+0x3d5c>
   19894:	b	197ac <close_stdout@@Base+0x412c>
   19898:	ldr	r2, [r7, #-4]
   1989c:	cmp	r6, #1
   198a0:	ldr	r3, [fp, #-480]	; 0xfffffe20
   198a4:	add	r3, r3, r2, lsl #4
   198a8:	ldrsh	r3, [r3, #8]
   198ac:	bne	193dc <close_stdout@@Base+0x3d5c>
   198b0:	b	197ac <close_stdout@@Base+0x412c>
   198b4:	ldr	r2, [r7, #-4]
   198b8:	cmp	r6, #1
   198bc:	ldr	r3, [fp, #-480]	; 0xfffffe20
   198c0:	add	r3, r3, r2, lsl #4
   198c4:	ldrsb	r3, [r3, #8]
   198c8:	beq	197ac <close_stdout@@Base+0x412c>
   198cc:	cmp	r6, #2
   198d0:	beq	193e4 <close_stdout@@Base+0x3d64>
   198d4:	ldr	r2, [fp, #-512]	; 0xfffffe00
   198d8:	add	r0, sl, r9
   198dc:	str	r3, [sp, #4]
   198e0:	mov	r1, r8
   198e4:	sub	r3, fp, #496	; 0x1f0
   198e8:	str	r3, [sp, #8]
   198ec:	str	r2, [sp]
   198f0:	mvn	r3, #0
   198f4:	mov	r2, #1
   198f8:	bl	1151c <__snprintf_chk@plt>
   198fc:	b	1941c <close_stdout@@Base+0x3d9c>
   19900:	ldr	r3, [r1, #8]
   19904:	mov	r2, sl
   19908:	mov	r6, r9
   1990c:	str	r9, [r3]
   19910:	b	1977c <close_stdout@@Base+0x40fc>
   19914:	ldr	r3, [fp, #-492]	; 0xfffffe14
   19918:	ldr	r2, [fp, #-512]	; 0xfffffe00
   1991c:	strd	r0, [sp, #8]
   19920:	sub	r1, fp, #496	; 0x1f0
   19924:	str	r3, [sp, #4]
   19928:	add	r0, sl, r9
   1992c:	str	r2, [sp]
   19930:	mvn	r3, #0
   19934:	str	r1, [sp, #16]
   19938:	mov	r2, r6
   1993c:	mov	r1, r8
   19940:	bl	1151c <__snprintf_chk@plt>
   19944:	b	1941c <close_stdout@@Base+0x3d9c>
   19948:	ldr	r1, [fp, #-512]	; 0xfffffe00
   1994c:	add	r0, sl, r9
   19950:	ldr	lr, [fp, #-492]	; 0xfffffe14
   19954:	strd	r2, [sp, #8]
   19958:	sub	r3, fp, #496	; 0x1f0
   1995c:	str	r1, [sp]
   19960:	mov	r2, r6
   19964:	str	r3, [sp, #16]
   19968:	mov	r1, r8
   1996c:	mvn	r3, #0
   19970:	str	lr, [sp, #4]
   19974:	bl	1151c <__snprintf_chk@plt>
   19978:	b	1941c <close_stdout@@Base+0x3d9c>
   1997c:	mov	r6, #0
   19980:	b	191a0 <close_stdout@@Base+0x3b20>
   19984:	cmn	r0, #1
   19988:	beq	1923c <close_stdout@@Base+0x3bbc>
   1998c:	bl	1136c <malloc@plt>
   19990:	cmp	r0, #0
   19994:	str	r0, [fp, #-512]	; 0xfffffe00
   19998:	beq	1923c <close_stdout@@Base+0x3bbc>
   1999c:	str	r0, [fp, #-548]	; 0xfffffddc
   199a0:	b	18f50 <close_stdout@@Base+0x38d0>
   199a4:	mov	r0, sl
   199a8:	mov	r1, r4
   199ac:	str	r2, [fp, #-560]	; 0xfffffdd0
   199b0:	bl	112b8 <realloc@plt>
   199b4:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   199b8:	mov	r3, r0
   199bc:	b	192f0 <close_stdout@@Base+0x3c70>
   199c0:	bl	11504 <abort@plt>
   199c4:	mov	r4, #12
   199c8:	b	19704 <close_stdout@@Base+0x4084>
   199cc:	mov	r0, sl
   199d0:	mov	r1, r4
   199d4:	bl	112b8 <realloc@plt>
   199d8:	mov	r3, r0
   199dc:	b	1973c <close_stdout@@Base+0x40bc>
   199e0:	mov	r3, #0
   199e4:	b	1927c <close_stdout@@Base+0x3bfc>
   199e8:	mov	r3, #76	; 0x4c
   199ec:	add	r5, r5, #1
   199f0:	strb	r3, [r5, #-1]
   199f4:	b	19164 <close_stdout@@Base+0x3ae4>
   199f8:	ldr	r3, [fp, #-512]	; 0xfffffe00
   199fc:	mov	r2, #1
   19a00:	strd	r0, [sp, #8]
   19a04:	sub	r1, fp, #496	; 0x1f0
   19a08:	add	r0, sl, r9
   19a0c:	str	r1, [sp, #16]
   19a10:	str	r3, [sp]
   19a14:	mov	r1, r8
   19a18:	mvn	r3, #0
   19a1c:	bl	1151c <__snprintf_chk@plt>
   19a20:	b	1941c <close_stdout@@Base+0x3d9c>
   19a24:	ldr	r1, [fp, #-512]	; 0xfffffe00
   19a28:	add	r0, sl, r9
   19a2c:	strd	r2, [sp, #8]
   19a30:	sub	r2, fp, #496	; 0x1f0
   19a34:	mvn	r3, #0
   19a38:	str	r2, [sp, #16]
   19a3c:	str	r1, [sp]
   19a40:	mov	r2, #1
   19a44:	mov	r1, r8
   19a48:	bl	1151c <__snprintf_chk@plt>
   19a4c:	b	1941c <close_stdout@@Base+0x3d9c>
   19a50:	ldr	r3, [r1, #8]
   19a54:	mov	r2, sl
   19a58:	mov	r6, r9
   19a5c:	strb	r9, [r3]
   19a60:	b	1977c <close_stdout@@Base+0x40fc>
   19a64:	ldr	r3, [r1, #8]
   19a68:	mov	r2, sl
   19a6c:	mov	r6, r9
   19a70:	strh	r9, [r3]
   19a74:	b	1977c <close_stdout@@Base+0x40fc>
   19a78:	ldr	r3, [r1, #8]
   19a7c:	mov	r2, sl
   19a80:	mov	r1, #0
   19a84:	mov	r6, r9
   19a88:	str	r9, [r3]
   19a8c:	str	r1, [r3, #4]
   19a90:	b	1977c <close_stdout@@Base+0x40fc>
   19a94:	mov	r0, sl
   19a98:	bl	11234 <free@plt>
   19a9c:	b	19640 <close_stdout@@Base+0x3fc0>
   19aa0:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19aa4:	sub	r3, fp, #348	; 0x15c
   19aa8:	cmp	r0, r3
   19aac:	beq	19ab4 <close_stdout@@Base+0x4434>
   19ab0:	bl	11234 <free@plt>
   19ab4:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19ab8:	sub	r3, fp, #476	; 0x1dc
   19abc:	cmp	r0, r3
   19ac0:	beq	19ac8 <close_stdout@@Base+0x4448>
   19ac4:	bl	11234 <free@plt>
   19ac8:	bl	113e4 <__errno_location@plt>
   19acc:	mov	r2, #22
   19ad0:	mov	r3, #0
   19ad4:	str	r2, [r0]
   19ad8:	b	1927c <close_stdout@@Base+0x3bfc>
   19adc:	str	r2, [fp, #-560]	; 0xfffffdd0
   19ae0:	bl	113e4 <__errno_location@plt>
   19ae4:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   19ae8:	str	r0, [fp, #-516]	; 0xfffffdfc
   19aec:	b	19214 <close_stdout@@Base+0x3b94>
   19af0:	adds	r5, r9, #1
   19af4:	movcc	r3, r5
   19af8:	mvncs	r3, #0
   19afc:	cmp	r3, r4
   19b00:	bls	19b88 <close_stdout@@Base+0x4508>
   19b04:	cmp	r4, #0
   19b08:	moveq	r4, #12
   19b0c:	beq	19b18 <close_stdout@@Base+0x4498>
   19b10:	lslge	r4, r4, #1
   19b14:	mvnlt	r4, #0
   19b18:	cmp	r5, r9
   19b1c:	movcs	r3, r5
   19b20:	mvncc	r3, #0
   19b24:	cmp	r4, r3
   19b28:	bcs	19b38 <close_stdout@@Base+0x44b8>
   19b2c:	cmp	r5, r9
   19b30:	bcc	19204 <close_stdout@@Base+0x3b84>
   19b34:	mov	r4, r5
   19b38:	cmn	r4, #1
   19b3c:	beq	19204 <close_stdout@@Base+0x3b84>
   19b40:	ldr	r2, [fp, #-504]	; 0xfffffe08
   19b44:	subs	r3, sl, r2
   19b48:	rsbs	r6, r3, #0
   19b4c:	adcs	r6, r6, r3
   19b50:	cmp	sl, r2
   19b54:	cmpne	sl, #0
   19b58:	bne	19c98 <close_stdout@@Base+0x4618>
   19b5c:	mov	r0, r4
   19b60:	bl	1136c <malloc@plt>
   19b64:	mov	r3, r0
   19b68:	cmp	r3, #0
   19b6c:	beq	19204 <close_stdout@@Base+0x3b84>
   19b70:	cmp	r9, #0
   19b74:	moveq	r6, #0
   19b78:	andne	r6, r6, #1
   19b7c:	cmp	r6, #0
   19b80:	moveq	sl, r3
   19b84:	bne	19cac <close_stdout@@Base+0x462c>
   19b88:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19b8c:	cmp	sl, r3
   19b90:	mov	r3, #0
   19b94:	strb	r3, [sl, r9]
   19b98:	beq	19ba4 <close_stdout@@Base+0x4524>
   19b9c:	cmp	r4, r5
   19ba0:	bhi	19c80 <close_stdout@@Base+0x4600>
   19ba4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   19ba8:	cmp	r1, #0
   19bac:	beq	19bb8 <close_stdout@@Base+0x4538>
   19bb0:	mov	r0, r1
   19bb4:	bl	11234 <free@plt>
   19bb8:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19bbc:	sub	r3, fp, #348	; 0x15c
   19bc0:	cmp	r0, r3
   19bc4:	beq	19bcc <close_stdout@@Base+0x454c>
   19bc8:	bl	11234 <free@plt>
   19bcc:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19bd0:	sub	r3, fp, #476	; 0x1dc
   19bd4:	cmp	r0, r3
   19bd8:	beq	19be0 <close_stdout@@Base+0x4560>
   19bdc:	bl	11234 <free@plt>
   19be0:	ldr	r2, [fp, #-536]	; 0xfffffde8
   19be4:	mov	r3, sl
   19be8:	str	r9, [r2]
   19bec:	b	1927c <close_stdout@@Base+0x3bfc>
   19bf0:	ldr	r2, [fp, #-516]	; 0xfffffdfc
   19bf4:	add	r6, r0, r9
   19bf8:	ldr	r1, [fp, #-552]	; 0xfffffdd8
   19bfc:	str	r1, [r2]
   19c00:	mov	r2, sl
   19c04:	b	1977c <close_stdout@@Base+0x40fc>
   19c08:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19c0c:	cmp	sl, #0
   19c10:	cmpne	sl, r3
   19c14:	bne	19c74 <close_stdout@@Base+0x45f4>
   19c18:	ldr	r3, [fp, #-548]	; 0xfffffddc
   19c1c:	cmp	r3, #0
   19c20:	beq	19c2c <close_stdout@@Base+0x45ac>
   19c24:	mov	r0, r3
   19c28:	bl	11234 <free@plt>
   19c2c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19c30:	sub	r3, fp, #348	; 0x15c
   19c34:	cmp	r0, r3
   19c38:	beq	19c40 <close_stdout@@Base+0x45c0>
   19c3c:	bl	11234 <free@plt>
   19c40:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19c44:	sub	r3, fp, #476	; 0x1dc
   19c48:	cmp	r0, r3
   19c4c:	beq	19c54 <close_stdout@@Base+0x45d4>
   19c50:	bl	11234 <free@plt>
   19c54:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   19c58:	mov	r2, #75	; 0x4b
   19c5c:	mov	r3, #0
   19c60:	str	r2, [r1]
   19c64:	b	1927c <close_stdout@@Base+0x3bfc>
   19c68:	mov	r0, r2
   19c6c:	bl	11234 <free@plt>
   19c70:	b	19224 <close_stdout@@Base+0x3ba4>
   19c74:	mov	r0, sl
   19c78:	bl	11234 <free@plt>
   19c7c:	b	19c18 <close_stdout@@Base+0x4598>
   19c80:	mov	r0, sl
   19c84:	mov	r1, r5
   19c88:	bl	112b8 <realloc@plt>
   19c8c:	cmp	r0, #0
   19c90:	movne	sl, r0
   19c94:	b	19ba4 <close_stdout@@Base+0x4524>
   19c98:	mov	r0, sl
   19c9c:	mov	r1, r4
   19ca0:	bl	112b8 <realloc@plt>
   19ca4:	mov	r3, r0
   19ca8:	b	19b68 <close_stdout@@Base+0x44e8>
   19cac:	mov	r1, sl
   19cb0:	mov	r0, r3
   19cb4:	mov	r2, r9
   19cb8:	mov	sl, r3
   19cbc:	bl	11258 <memcpy@plt>
   19cc0:	b	19b88 <close_stdout@@Base+0x4508>
   19cc4:	bl	112ac <__stack_chk_fail@plt>
   19cc8:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   19ccc:	cmp	r9, r2
   19cd0:	bhi	19204 <close_stdout@@Base+0x3b84>
   19cd4:	mvn	r4, #0
   19cd8:	b	192ac <close_stdout@@Base+0x3c2c>
   19cdc:	andeq	r5, r1, r4, asr #2
   19ce0:	andeq	r0, r0, r8, lsr #2
   19ce4:	push	{r4, r5, r6}
   19ce8:	ldm	r1, {r3, ip}
   19cec:	cmp	r3, #0
   19cf0:	beq	19d98 <close_stdout@@Base+0x4718>
   19cf4:	ldr	r6, [pc, #304]	; 19e2c <close_stdout@@Base+0x47ac>
   19cf8:	add	ip, ip, #16
   19cfc:	ldr	r5, [pc, #300]	; 19e30 <close_stdout@@Base+0x47b0>
   19d00:	mov	r4, #0
   19d04:	add	r6, pc, r6
   19d08:	add	r5, pc, r5
   19d0c:	ldr	r3, [ip, #-16]
   19d10:	sub	r3, r3, #1
   19d14:	cmp	r3, #21
   19d18:	addls	pc, pc, r3, lsl #2
   19d1c:	b	19e24 <close_stdout@@Base+0x47a4>
   19d20:	b	19de4 <close_stdout@@Base+0x4764>
   19d24:	b	19de4 <close_stdout@@Base+0x4764>
   19d28:	b	19dd4 <close_stdout@@Base+0x4754>
   19d2c:	b	19dd4 <close_stdout@@Base+0x4754>
   19d30:	b	19d78 <close_stdout@@Base+0x46f8>
   19d34:	b	19d78 <close_stdout@@Base+0x46f8>
   19d38:	b	19d78 <close_stdout@@Base+0x46f8>
   19d3c:	b	19d78 <close_stdout@@Base+0x46f8>
   19d40:	b	19da4 <close_stdout@@Base+0x4724>
   19d44:	b	19da4 <close_stdout@@Base+0x4724>
   19d48:	b	19dbc <close_stdout@@Base+0x473c>
   19d4c:	b	19dbc <close_stdout@@Base+0x473c>
   19d50:	b	19d78 <close_stdout@@Base+0x46f8>
   19d54:	b	19d78 <close_stdout@@Base+0x46f8>
   19d58:	b	19df4 <close_stdout@@Base+0x4774>
   19d5c:	b	19e0c <close_stdout@@Base+0x478c>
   19d60:	b	19d78 <close_stdout@@Base+0x46f8>
   19d64:	b	19d78 <close_stdout@@Base+0x46f8>
   19d68:	b	19d78 <close_stdout@@Base+0x46f8>
   19d6c:	b	19d78 <close_stdout@@Base+0x46f8>
   19d70:	b	19d78 <close_stdout@@Base+0x46f8>
   19d74:	b	19d78 <close_stdout@@Base+0x46f8>
   19d78:	ldr	r3, [r0]
   19d7c:	add	r0, r0, #4
   19d80:	str	r3, [ip, #-8]
   19d84:	ldr	r3, [r1]
   19d88:	add	r4, r4, #1
   19d8c:	add	ip, ip, #16
   19d90:	cmp	r3, r4
   19d94:	bhi	19d0c <close_stdout@@Base+0x468c>
   19d98:	mov	r0, #0
   19d9c:	pop	{r4, r5, r6}
   19da0:	bx	lr
   19da4:	add	r3, r0, #7
   19da8:	bic	r3, r3, #7
   19dac:	add	r0, r3, #8
   19db0:	ldrd	r2, [r3]
   19db4:	strd	r2, [ip, #-8]
   19db8:	b	19d84 <close_stdout@@Base+0x4704>
   19dbc:	add	r0, r0, #7
   19dc0:	bic	r0, r0, #7
   19dc4:	add	r0, r0, #8
   19dc8:	ldrd	r2, [r0, #-8]
   19dcc:	strd	r2, [ip, #-8]
   19dd0:	b	19d84 <close_stdout@@Base+0x4704>
   19dd4:	ldr	r3, [r0]
   19dd8:	add	r0, r0, #4
   19ddc:	strh	r3, [ip, #-8]
   19de0:	b	19d84 <close_stdout@@Base+0x4704>
   19de4:	ldr	r3, [r0]
   19de8:	add	r0, r0, #4
   19dec:	strb	r3, [ip, #-8]
   19df0:	b	19d84 <close_stdout@@Base+0x4704>
   19df4:	ldr	r3, [r0]
   19df8:	add	r0, r0, #4
   19dfc:	cmp	r3, #0
   19e00:	str	r3, [ip, #-8]
   19e04:	streq	r5, [ip, #-8]
   19e08:	b	19d84 <close_stdout@@Base+0x4704>
   19e0c:	ldr	r3, [r0]
   19e10:	add	r0, r0, #4
   19e14:	cmp	r3, #0
   19e18:	str	r3, [ip, #-8]
   19e1c:	streq	r6, [ip, #-8]
   19e20:	b	19d84 <close_stdout@@Base+0x4704>
   19e24:	mvn	r0, #0
   19e28:	b	19d9c <close_stdout@@Base+0x471c>
   19e2c:	andeq	r3, r0, ip, ror #10
   19e30:	andeq	r3, r0, r4, lsl #11
   19e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e38:	mov	r7, r1
   19e3c:	sub	sp, sp, #44	; 0x2c
   19e40:	mov	r5, r2
   19e44:	movw	sl, #39321	; 0x9999
   19e48:	mov	r2, r7
   19e4c:	movt	sl, #6553	; 0x1999
   19e50:	mov	r3, #0
   19e54:	str	r3, [r2], #16
   19e58:	mov	r1, #7
   19e5c:	str	r2, [r7, #4]
   19e60:	mov	r9, r0
   19e64:	str	r2, [sp, #16]
   19e68:	mov	r2, r5
   19e6c:	str	r3, [r2], #8
   19e70:	mov	r6, r3
   19e74:	str	r2, [r5, #4]
   19e78:	movw	r0, #29789	; 0x745d
   19e7c:	str	r3, [sp, #8]
   19e80:	movt	r0, #1489	; 0x5d1
   19e84:	str	r1, [sp, #20]
   19e88:	mov	ip, sl
   19e8c:	str	r3, [sp, #24]
   19e90:	str	r3, [sp, #36]	; 0x24
   19e94:	mov	r3, #7
   19e98:	str	r2, [sp, #12]
   19e9c:	str	r3, [sp, #28]
   19ea0:	ldr	r1, [r7]
   19ea4:	ldr	r3, [r7, #4]
   19ea8:	str	r0, [sp, #32]
   19eac:	b	19eb8 <close_stdout@@Base+0x4838>
   19eb0:	cmp	r0, #37	; 0x25
   19eb4:	beq	19ef8 <close_stdout@@Base+0x4878>
   19eb8:	mov	r8, r9
   19ebc:	ldrb	r0, [r9], #1
   19ec0:	cmp	r0, #0
   19ec4:	mov	r2, r9
   19ec8:	bne	19eb0 <close_stdout@@Base+0x4830>
   19ecc:	mov	r4, #44	; 0x2c
   19ed0:	mov	r2, r0
   19ed4:	mul	r1, r4, r1
   19ed8:	str	r8, [r3, r1]
   19edc:	ldr	r3, [sp, #24]
   19ee0:	str	r3, [r7, #8]
   19ee4:	ldr	r3, [sp, #8]
   19ee8:	str	r3, [r7, #12]
   19eec:	mov	r0, r2
   19ef0:	add	sp, sp, #44	; 0x2c
   19ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ef8:	mov	r0, #44	; 0x2c
   19efc:	mul	r1, r0, r1
   19f00:	add	r4, r3, r1
   19f04:	str	r8, [r3, r1]
   19f08:	mvn	r1, #0
   19f0c:	str	r6, [r4, #8]
   19f10:	str	r1, [r4, #20]
   19f14:	str	r1, [r4, #32]
   19f18:	str	r1, [r4, #40]	; 0x28
   19f1c:	str	r6, [r4, #12]
   19f20:	str	r6, [r4, #16]
   19f24:	str	r6, [r4, #24]
   19f28:	str	r6, [r4, #28]
   19f2c:	ldrb	r3, [r8, #1]
   19f30:	sub	sl, r3, #48	; 0x30
   19f34:	uxtb	r1, sl
   19f38:	cmp	r1, #9
   19f3c:	bls	1a2d0 <close_stdout@@Base+0x4c50>
   19f40:	mvn	r8, #0
   19f44:	b	19f88 <close_stdout@@Base+0x4908>
   19f48:	cmp	r3, #45	; 0x2d
   19f4c:	beq	19fa4 <close_stdout@@Base+0x4924>
   19f50:	cmp	r3, #43	; 0x2b
   19f54:	beq	19fb4 <close_stdout@@Base+0x4934>
   19f58:	cmp	r3, #32
   19f5c:	beq	19fc4 <close_stdout@@Base+0x4944>
   19f60:	cmp	r3, #35	; 0x23
   19f64:	beq	19fd4 <close_stdout@@Base+0x4954>
   19f68:	cmp	r3, #48	; 0x30
   19f6c:	beq	19fe4 <close_stdout@@Base+0x4964>
   19f70:	cmp	r3, #73	; 0x49
   19f74:	bne	19ff4 <close_stdout@@Base+0x4974>
   19f78:	ldr	r3, [r4, #8]
   19f7c:	orr	r3, r3, #64	; 0x40
   19f80:	str	r3, [r4, #8]
   19f84:	ldrb	r3, [r2, #1]!
   19f88:	cmp	r3, #39	; 0x27
   19f8c:	mov	r9, r2
   19f90:	bne	19f48 <close_stdout@@Base+0x48c8>
   19f94:	ldr	r3, [r4, #8]
   19f98:	orr	r3, r3, #1
   19f9c:	str	r3, [r4, #8]
   19fa0:	b	19f84 <close_stdout@@Base+0x4904>
   19fa4:	ldr	r3, [r4, #8]
   19fa8:	orr	r3, r3, #2
   19fac:	str	r3, [r4, #8]
   19fb0:	b	19f84 <close_stdout@@Base+0x4904>
   19fb4:	ldr	r3, [r4, #8]
   19fb8:	orr	r3, r3, #4
   19fbc:	str	r3, [r4, #8]
   19fc0:	b	19f84 <close_stdout@@Base+0x4904>
   19fc4:	ldr	r3, [r4, #8]
   19fc8:	orr	r3, r3, #8
   19fcc:	str	r3, [r4, #8]
   19fd0:	b	19f84 <close_stdout@@Base+0x4904>
   19fd4:	ldr	r3, [r4, #8]
   19fd8:	orr	r3, r3, #16
   19fdc:	str	r3, [r4, #8]
   19fe0:	b	19f84 <close_stdout@@Base+0x4904>
   19fe4:	ldr	r3, [r4, #8]
   19fe8:	orr	r3, r3, #32
   19fec:	str	r3, [r4, #8]
   19ff0:	b	19f84 <close_stdout@@Base+0x4904>
   19ff4:	cmp	r3, #42	; 0x2a
   19ff8:	beq	1a46c <close_stdout@@Base+0x4dec>
   19ffc:	sub	r1, r3, #48	; 0x30
   1a000:	uxtb	r1, r1
   1a004:	cmp	r1, #9
   1a008:	bls	1a348 <close_stdout@@Base+0x4cc8>
   1a00c:	cmp	r3, #46	; 0x2e
   1a010:	beq	1a39c <close_stdout@@Base+0x4d1c>
   1a014:	mov	sl, #0
   1a018:	mov	r0, #1
   1a01c:	b	1a028 <close_stdout@@Base+0x49a8>
   1a020:	ldrb	r3, [r2, #1]
   1a024:	add	r9, r9, #1
   1a028:	cmp	r3, #104	; 0x68
   1a02c:	mov	r2, r9
   1a030:	andeq	r3, sl, #1
   1a034:	orreq	sl, sl, r0, lsl r3
   1a038:	beq	1a020 <close_stdout@@Base+0x49a0>
   1a03c:	cmp	r3, #76	; 0x4c
   1a040:	orreq	sl, sl, #4
   1a044:	beq	1a020 <close_stdout@@Base+0x49a0>
   1a048:	cmp	r3, #108	; 0x6c
   1a04c:	addeq	sl, sl, #8
   1a050:	beq	1a020 <close_stdout@@Base+0x49a0>
   1a054:	cmp	r3, #106	; 0x6a
   1a058:	addeq	sl, sl, #16
   1a05c:	beq	1a020 <close_stdout@@Base+0x49a0>
   1a060:	and	r1, r3, #223	; 0xdf
   1a064:	cmp	r1, #90	; 0x5a
   1a068:	beq	1a020 <close_stdout@@Base+0x49a0>
   1a06c:	cmp	r3, #116	; 0x74
   1a070:	beq	1a020 <close_stdout@@Base+0x49a0>
   1a074:	sub	r2, r3, #37	; 0x25
   1a078:	add	r9, r9, #1
   1a07c:	mov	fp, r3
   1a080:	cmp	r2, #83	; 0x53
   1a084:	addls	pc, pc, r2, lsl #2
   1a088:	b	1a7ac <close_stdout@@Base+0x512c>
   1a08c:	b	1a23c <close_stdout@@Base+0x4bbc>
   1a090:	b	1a7ac <close_stdout@@Base+0x512c>
   1a094:	b	1a7ac <close_stdout@@Base+0x512c>
   1a098:	b	1a7ac <close_stdout@@Base+0x512c>
   1a09c:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0a0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0a4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0a8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0ac:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0b0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0b4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0b8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0bc:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0c0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0c4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0c8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0cc:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0d0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0d4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0d8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0dc:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0e0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0e4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0e8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0ec:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0f0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0f4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0f8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a0fc:	b	1a588 <close_stdout@@Base+0x4f08>
   1a100:	b	1a7ac <close_stdout@@Base+0x512c>
   1a104:	b	1a5ac <close_stdout@@Base+0x4f2c>
   1a108:	b	1a7ac <close_stdout@@Base+0x512c>
   1a10c:	b	1a588 <close_stdout@@Base+0x4f08>
   1a110:	b	1a588 <close_stdout@@Base+0x4f08>
   1a114:	b	1a588 <close_stdout@@Base+0x4f08>
   1a118:	b	1a7ac <close_stdout@@Base+0x512c>
   1a11c:	b	1a7ac <close_stdout@@Base+0x512c>
   1a120:	b	1a7ac <close_stdout@@Base+0x512c>
   1a124:	b	1a7ac <close_stdout@@Base+0x512c>
   1a128:	b	1a7ac <close_stdout@@Base+0x512c>
   1a12c:	b	1a7ac <close_stdout@@Base+0x512c>
   1a130:	b	1a7ac <close_stdout@@Base+0x512c>
   1a134:	b	1a7ac <close_stdout@@Base+0x512c>
   1a138:	b	1a7ac <close_stdout@@Base+0x512c>
   1a13c:	b	1a7ac <close_stdout@@Base+0x512c>
   1a140:	b	1a7ac <close_stdout@@Base+0x512c>
   1a144:	b	1a5b8 <close_stdout@@Base+0x4f38>
   1a148:	b	1a7ac <close_stdout@@Base+0x512c>
   1a14c:	b	1a7ac <close_stdout@@Base+0x512c>
   1a150:	b	1a7ac <close_stdout@@Base+0x512c>
   1a154:	b	1a7ac <close_stdout@@Base+0x512c>
   1a158:	b	1a5c4 <close_stdout@@Base+0x4f44>
   1a15c:	b	1a7ac <close_stdout@@Base+0x512c>
   1a160:	b	1a7ac <close_stdout@@Base+0x512c>
   1a164:	b	1a7ac <close_stdout@@Base+0x512c>
   1a168:	b	1a7ac <close_stdout@@Base+0x512c>
   1a16c:	b	1a7ac <close_stdout@@Base+0x512c>
   1a170:	b	1a7ac <close_stdout@@Base+0x512c>
   1a174:	b	1a7ac <close_stdout@@Base+0x512c>
   1a178:	b	1a7ac <close_stdout@@Base+0x512c>
   1a17c:	b	1a588 <close_stdout@@Base+0x4f08>
   1a180:	b	1a7ac <close_stdout@@Base+0x512c>
   1a184:	b	1a64c <close_stdout@@Base+0x4fcc>
   1a188:	b	1a608 <close_stdout@@Base+0x4f88>
   1a18c:	b	1a588 <close_stdout@@Base+0x4f08>
   1a190:	b	1a588 <close_stdout@@Base+0x4f08>
   1a194:	b	1a588 <close_stdout@@Base+0x4f08>
   1a198:	b	1a7ac <close_stdout@@Base+0x512c>
   1a19c:	b	1a608 <close_stdout@@Base+0x4f88>
   1a1a0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1a4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1a8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1ac:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1b0:	b	1a65c <close_stdout@@Base+0x4fdc>
   1a1b4:	b	1a5c4 <close_stdout@@Base+0x4f44>
   1a1b8:	b	1a1dc <close_stdout@@Base+0x4b5c>
   1a1bc:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1c0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1c4:	b	1a578 <close_stdout@@Base+0x4ef8>
   1a1c8:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1cc:	b	1a5c4 <close_stdout@@Base+0x4f44>
   1a1d0:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1d4:	b	1a7ac <close_stdout@@Base+0x512c>
   1a1d8:	b	1a5c4 <close_stdout@@Base+0x4f44>
   1a1dc:	mov	sl, #17
   1a1e0:	cmn	r8, #1
   1a1e4:	strne	r8, [r4, #40]	; 0x28
   1a1e8:	beq	1a908 <close_stdout@@Base+0x5288>
   1a1ec:	ldr	r3, [sp, #20]
   1a1f0:	cmp	r3, r8
   1a1f4:	bls	1a834 <close_stdout@@Base+0x51b4>
   1a1f8:	ldr	r0, [r5, #4]
   1a1fc:	ldr	r3, [r5]
   1a200:	cmp	r3, r8
   1a204:	bhi	1a224 <close_stdout@@Base+0x4ba4>
   1a208:	add	r2, r3, #1
   1a20c:	str	r2, [r5]
   1a210:	str	r6, [r0, r3, lsl #4]
   1a214:	ldr	r3, [r5]
   1a218:	ldr	r0, [r5, #4]
   1a21c:	cmp	r3, r8
   1a220:	bls	1a208 <close_stdout@@Base+0x4b88>
   1a224:	ldr	r3, [r0, r8, lsl #4]
   1a228:	cmp	r3, #0
   1a22c:	streq	sl, [r0, r8, lsl #4]
   1a230:	beq	1a23c <close_stdout@@Base+0x4bbc>
   1a234:	cmp	sl, r3
   1a238:	bne	1a7b0 <close_stdout@@Base+0x5130>
   1a23c:	strb	fp, [r4, #36]	; 0x24
   1a240:	str	r9, [r4, #4]
   1a244:	ldr	r1, [r7]
   1a248:	ldr	r3, [sp, #28]
   1a24c:	add	r1, r1, #1
   1a250:	str	r1, [r7]
   1a254:	cmp	r3, r1
   1a258:	bhi	1a340 <close_stdout@@Base+0x4cc0>
   1a25c:	ldr	r3, [sp, #28]
   1a260:	cmp	r3, #0
   1a264:	blt	1a42c <close_stdout@@Base+0x4dac>
   1a268:	ldr	r3, [sp, #28]
   1a26c:	ldr	r0, [sp, #32]
   1a270:	lsl	r3, r3, #1
   1a274:	str	r3, [sp, #28]
   1a278:	cmp	r3, r0
   1a27c:	bhi	1a42c <close_stdout@@Base+0x4dac>
   1a280:	mov	r2, #44	; 0x2c
   1a284:	ldr	r0, [r7, #4]
   1a288:	mul	r1, r2, r3
   1a28c:	ldr	r3, [sp, #16]
   1a290:	cmp	r3, r0
   1a294:	beq	1a928 <close_stdout@@Base+0x52a8>
   1a298:	str	ip, [sp, #4]
   1a29c:	bl	112b8 <realloc@plt>
   1a2a0:	ldr	ip, [sp, #4]
   1a2a4:	mov	r4, r0
   1a2a8:	cmp	r4, #0
   1a2ac:	beq	1a42c <close_stdout@@Base+0x4dac>
   1a2b0:	ldr	r3, [r7, #4]
   1a2b4:	ldr	r0, [sp, #16]
   1a2b8:	cmp	r0, r3
   1a2bc:	beq	1a9e4 <close_stdout@@Base+0x5364>
   1a2c0:	ldr	r1, [r7]
   1a2c4:	mov	r3, r4
   1a2c8:	str	r4, [r7, #4]
   1a2cc:	b	19eb8 <close_stdout@@Base+0x4838>
   1a2d0:	mov	r0, r9
   1a2d4:	ldrb	r1, [r0, #1]!
   1a2d8:	sub	r8, r1, #48	; 0x30
   1a2dc:	cmp	r8, #9
   1a2e0:	bls	1a2d4 <close_stdout@@Base+0x4c54>
   1a2e4:	cmp	r1, #36	; 0x24
   1a2e8:	bne	19f40 <close_stdout@@Base+0x48c0>
   1a2ec:	mov	r8, #0
   1a2f0:	b	1a2f8 <close_stdout@@Base+0x4c78>
   1a2f4:	mov	r9, r2
   1a2f8:	add	r3, r8, r8, lsl #2
   1a2fc:	cmp	r8, ip
   1a300:	mvn	r8, #0
   1a304:	add	r2, r9, #1
   1a308:	lslls	r8, r3, #1
   1a30c:	adds	r8, r8, sl
   1a310:	ldrb	sl, [r9, #1]
   1a314:	sub	sl, sl, #48	; 0x30
   1a318:	mvncs	r8, #0
   1a31c:	uxtb	r3, sl
   1a320:	cmp	r3, #9
   1a324:	bls	1a2f4 <close_stdout@@Base+0x4c74>
   1a328:	sub	r8, r8, #1
   1a32c:	cmn	r8, #3
   1a330:	bhi	1a7ac <close_stdout@@Base+0x512c>
   1a334:	add	r2, r2, #1
   1a338:	ldrb	r3, [r9, #2]
   1a33c:	b	19f88 <close_stdout@@Base+0x4908>
   1a340:	ldr	r3, [r7, #4]
   1a344:	b	19eb8 <close_stdout@@Base+0x4838>
   1a348:	str	r2, [r4, #12]
   1a34c:	ldrb	r3, [r2]
   1a350:	sub	r3, r3, #48	; 0x30
   1a354:	cmp	r3, #9
   1a358:	bhi	1a9dc <close_stdout@@Base+0x535c>
   1a35c:	add	r3, r2, #1
   1a360:	mov	r9, r3
   1a364:	add	r3, r3, #1
   1a368:	ldrb	r1, [r9]
   1a36c:	sub	r1, r1, #48	; 0x30
   1a370:	cmp	r1, #9
   1a374:	bls	1a360 <close_stdout@@Base+0x4ce0>
   1a378:	rsb	r2, r2, r9
   1a37c:	ldr	r3, [sp, #24]
   1a380:	str	r9, [r4, #16]
   1a384:	cmp	r3, r2
   1a388:	movcc	r3, r2
   1a38c:	str	r3, [sp, #24]
   1a390:	ldrb	r3, [r9]
   1a394:	cmp	r3, #46	; 0x2e
   1a398:	bne	1a014 <close_stdout@@Base+0x4994>
   1a39c:	ldrb	r3, [r9, #1]
   1a3a0:	str	r9, [r4, #24]
   1a3a4:	cmp	r3, #42	; 0x2a
   1a3a8:	beq	1a694 <close_stdout@@Base+0x5014>
   1a3ac:	ldrb	r3, [r9, #1]
   1a3b0:	add	r2, r9, #1
   1a3b4:	sub	r3, r3, #48	; 0x30
   1a3b8:	cmp	r3, #9
   1a3bc:	bhi	1a3dc <close_stdout@@Base+0x4d5c>
   1a3c0:	add	r3, r9, #2
   1a3c4:	mov	r2, r3
   1a3c8:	add	r3, r3, #1
   1a3cc:	ldrb	r1, [r2]
   1a3d0:	sub	r1, r1, #48	; 0x30
   1a3d4:	cmp	r1, #9
   1a3d8:	bls	1a3c4 <close_stdout@@Base+0x4d44>
   1a3dc:	ldr	r0, [sp, #8]
   1a3e0:	rsb	r9, r9, r2
   1a3e4:	str	r2, [r4, #28]
   1a3e8:	cmp	r0, r9
   1a3ec:	movcc	r0, r9
   1a3f0:	ldrb	r3, [r2]
   1a3f4:	str	r0, [sp, #8]
   1a3f8:	mov	r9, r2
   1a3fc:	b	1a014 <close_stdout@@Base+0x4994>
   1a400:	ldr	r3, [sp, #20]
   1a404:	cmp	r3, #0
   1a408:	lslge	r3, r3, #1
   1a40c:	mvnlt	r3, #0
   1a410:	str	r3, [sp, #20]
   1a414:	ldr	r3, [sp, #20]
   1a418:	cmp	r3, sl
   1a41c:	bhi	1a8b8 <close_stdout@@Base+0x5238>
   1a420:	adds	r3, sl, #1
   1a424:	str	r3, [sp, #20]
   1a428:	bcc	1a8b8 <close_stdout@@Base+0x5238>
   1a42c:	ldr	r2, [r5, #4]
   1a430:	ldr	r3, [sp, #12]
   1a434:	cmp	r3, r2
   1a438:	beq	1a444 <close_stdout@@Base+0x4dc4>
   1a43c:	mov	r0, r2
   1a440:	bl	11234 <free@plt>
   1a444:	ldr	r0, [r7, #4]
   1a448:	ldr	r3, [sp, #16]
   1a44c:	cmp	r3, r0
   1a450:	beq	1a458 <close_stdout@@Base+0x4dd8>
   1a454:	bl	11234 <free@plt>
   1a458:	bl	113e4 <__errno_location@plt>
   1a45c:	mov	r3, #12
   1a460:	mvn	r2, #0
   1a464:	str	r3, [r0]
   1a468:	b	19eec <close_stdout@@Base+0x486c>
   1a46c:	ldr	r3, [sp, #24]
   1a470:	add	r9, r2, #1
   1a474:	str	r2, [r4, #12]
   1a478:	str	r9, [r4, #16]
   1a47c:	cmp	r3, #0
   1a480:	ldrb	sl, [r2, #1]
   1a484:	moveq	r3, #1
   1a488:	str	r3, [sp, #24]
   1a48c:	sub	sl, sl, #48	; 0x30
   1a490:	uxtb	r3, sl
   1a494:	cmp	r3, #9
   1a498:	bls	1a50c <close_stdout@@Base+0x4e8c>
   1a49c:	ldr	r3, [sp, #36]	; 0x24
   1a4a0:	cmn	r3, #1
   1a4a4:	str	r3, [r4, #20]
   1a4a8:	add	r3, r3, #1
   1a4ac:	beq	1a7ac <close_stdout@@Base+0x512c>
   1a4b0:	ldr	sl, [sp, #36]	; 0x24
   1a4b4:	str	r3, [sp, #36]	; 0x24
   1a4b8:	ldr	r3, [sp, #20]
   1a4bc:	cmp	r3, sl
   1a4c0:	bls	1a400 <close_stdout@@Base+0x4d80>
   1a4c4:	ldr	r0, [r5, #4]
   1a4c8:	ldr	r3, [r5]
   1a4cc:	cmp	r3, sl
   1a4d0:	bhi	1a4f0 <close_stdout@@Base+0x4e70>
   1a4d4:	add	r2, r3, #1
   1a4d8:	str	r2, [r5]
   1a4dc:	str	r6, [r0, r3, lsl #4]
   1a4e0:	ldr	r3, [r5]
   1a4e4:	ldr	r0, [r5, #4]
   1a4e8:	cmp	r3, sl
   1a4ec:	bls	1a4d4 <close_stdout@@Base+0x4e54>
   1a4f0:	ldr	r3, [r0, sl, lsl #4]
   1a4f4:	cmp	r3, #0
   1a4f8:	bne	1a8ac <close_stdout@@Base+0x522c>
   1a4fc:	mov	r1, #5
   1a500:	str	r1, [r0, sl, lsl #4]
   1a504:	ldrb	r3, [r9]
   1a508:	b	1a00c <close_stdout@@Base+0x498c>
   1a50c:	mov	r1, r9
   1a510:	ldrb	r3, [r1, #1]!
   1a514:	sub	r0, r3, #48	; 0x30
   1a518:	cmp	r0, #9
   1a51c:	bls	1a510 <close_stdout@@Base+0x4e90>
   1a520:	cmp	r3, #36	; 0x24
   1a524:	bne	1a49c <close_stdout@@Base+0x4e1c>
   1a528:	add	r2, r2, #2
   1a52c:	mov	r3, #0
   1a530:	add	r1, r3, r3, lsl #2
   1a534:	cmp	r3, ip
   1a538:	mvn	r3, #0
   1a53c:	lslls	r3, r1, #1
   1a540:	adds	r3, r3, sl
   1a544:	ldrb	sl, [r2], #1
   1a548:	sub	sl, sl, #48	; 0x30
   1a54c:	mvncs	r3, #0
   1a550:	uxtb	r1, sl
   1a554:	cmp	r1, #9
   1a558:	bls	1a530 <close_stdout@@Base+0x4eb0>
   1a55c:	sub	r3, r3, #1
   1a560:	cmn	r3, #3
   1a564:	bhi	1a7ac <close_stdout@@Base+0x512c>
   1a568:	str	r3, [r4, #20]
   1a56c:	mov	r9, r2
   1a570:	mov	sl, r3
   1a574:	b	1a4b8 <close_stdout@@Base+0x4e38>
   1a578:	cmp	sl, #7
   1a57c:	movle	sl, #15
   1a580:	movgt	sl, #16
   1a584:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a588:	cmp	sl, #15
   1a58c:	movgt	fp, r3
   1a590:	movgt	sl, #12
   1a594:	bgt	1a1e0 <close_stdout@@Base+0x4b60>
   1a598:	tst	sl, #4
   1a59c:	mov	fp, r3
   1a5a0:	moveq	sl, #11
   1a5a4:	movne	sl, #12
   1a5a8:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a5ac:	mov	sl, #14
   1a5b0:	mov	fp, #99	; 0x63
   1a5b4:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a5b8:	mov	sl, #16
   1a5bc:	mov	fp, #115	; 0x73
   1a5c0:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a5c4:	cmp	sl, #15
   1a5c8:	bgt	1a7e8 <close_stdout@@Base+0x5168>
   1a5cc:	tst	sl, #4
   1a5d0:	bne	1a7e8 <close_stdout@@Base+0x5168>
   1a5d4:	cmp	sl, #7
   1a5d8:	movgt	fp, r3
   1a5dc:	movgt	sl, #8
   1a5e0:	bgt	1a1e0 <close_stdout@@Base+0x4b60>
   1a5e4:	tst	sl, #2
   1a5e8:	movne	fp, r3
   1a5ec:	movne	sl, #2
   1a5f0:	bne	1a1e0 <close_stdout@@Base+0x4b60>
   1a5f4:	tst	sl, #1
   1a5f8:	mov	fp, r3
   1a5fc:	moveq	sl, #6
   1a600:	movne	sl, #4
   1a604:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a608:	cmp	sl, #15
   1a60c:	bgt	1a7f4 <close_stdout@@Base+0x5174>
   1a610:	tst	sl, #4
   1a614:	bne	1a7f4 <close_stdout@@Base+0x5174>
   1a618:	cmp	sl, #7
   1a61c:	movgt	fp, r3
   1a620:	movgt	sl, #7
   1a624:	bgt	1a1e0 <close_stdout@@Base+0x4b60>
   1a628:	tst	sl, #2
   1a62c:	movne	fp, r3
   1a630:	movne	sl, #1
   1a634:	bne	1a1e0 <close_stdout@@Base+0x4b60>
   1a638:	tst	sl, #1
   1a63c:	mov	fp, r3
   1a640:	moveq	sl, #5
   1a644:	movne	sl, #3
   1a648:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a64c:	cmp	sl, #7
   1a650:	movle	sl, #13
   1a654:	movgt	sl, #14
   1a658:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a65c:	cmp	sl, #15
   1a660:	bgt	1a800 <close_stdout@@Base+0x5180>
   1a664:	tst	sl, #4
   1a668:	bne	1a800 <close_stdout@@Base+0x5180>
   1a66c:	cmp	sl, #7
   1a670:	movgt	sl, #21
   1a674:	bgt	1a1e0 <close_stdout@@Base+0x4b60>
   1a678:	tst	sl, #2
   1a67c:	movne	sl, #18
   1a680:	bne	1a1e0 <close_stdout@@Base+0x4b60>
   1a684:	tst	sl, #1
   1a688:	moveq	sl, #20
   1a68c:	movne	sl, #19
   1a690:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a694:	ldr	r3, [sp, #8]
   1a698:	add	sl, r9, #2
   1a69c:	str	sl, [r4, #28]
   1a6a0:	ldrb	r0, [r9, #2]
   1a6a4:	cmp	r3, #1
   1a6a8:	sub	r0, r0, #48	; 0x30
   1a6ac:	movls	r3, #2
   1a6b0:	str	r3, [sp, #8]
   1a6b4:	uxtb	r3, r0
   1a6b8:	cmp	r3, #9
   1a6bc:	bhi	1a808 <close_stdout@@Base+0x5188>
   1a6c0:	mov	r2, sl
   1a6c4:	ldrb	r3, [r2, #1]!
   1a6c8:	sub	r1, r3, #48	; 0x30
   1a6cc:	cmp	r1, #9
   1a6d0:	bls	1a6c4 <close_stdout@@Base+0x5044>
   1a6d4:	cmp	r3, #36	; 0x24
   1a6d8:	bne	1a808 <close_stdout@@Base+0x5188>
   1a6dc:	add	r9, r9, #3
   1a6e0:	mov	r3, #0
   1a6e4:	add	r2, r3, r3, lsl #2
   1a6e8:	cmp	r3, ip
   1a6ec:	mvn	r3, #0
   1a6f0:	lslls	r3, r2, #1
   1a6f4:	adds	r3, r3, r0
   1a6f8:	ldrb	r0, [r9], #1
   1a6fc:	sub	r0, r0, #48	; 0x30
   1a700:	mvncs	r3, #0
   1a704:	uxtb	r2, r0
   1a708:	cmp	r2, #9
   1a70c:	bls	1a6e4 <close_stdout@@Base+0x5064>
   1a710:	sub	r3, r3, #1
   1a714:	cmn	r3, #3
   1a718:	bhi	1a7ac <close_stdout@@Base+0x512c>
   1a71c:	mov	sl, r9
   1a720:	mov	r9, r3
   1a724:	str	r3, [r4, #32]
   1a728:	ldr	r3, [sp, #20]
   1a72c:	cmp	r3, r9
   1a730:	bhi	1a940 <close_stdout@@Base+0x52c0>
   1a734:	ldr	r3, [sp, #20]
   1a738:	cmp	r3, #0
   1a73c:	blt	1a42c <close_stdout@@Base+0x4dac>
   1a740:	lsl	r3, r3, #1
   1a744:	str	r3, [sp, #20]
   1a748:	cmp	r3, r9
   1a74c:	bhi	1a75c <close_stdout@@Base+0x50dc>
   1a750:	adds	r3, r9, #1
   1a754:	str	r3, [sp, #20]
   1a758:	bcs	1a42c <close_stdout@@Base+0x4dac>
   1a75c:	ldr	r3, [sp, #20]
   1a760:	cmn	r3, #-268435455	; 0xf0000001
   1a764:	bhi	1a42c <close_stdout@@Base+0x4dac>
   1a768:	ldr	r0, [r5, #4]
   1a76c:	lsl	r1, r3, #4
   1a770:	ldr	r3, [sp, #12]
   1a774:	cmp	r3, r0
   1a778:	beq	1aa44 <close_stdout@@Base+0x53c4>
   1a77c:	str	ip, [sp, #4]
   1a780:	bl	112b8 <realloc@plt>
   1a784:	ldr	r2, [r5, #4]
   1a788:	ldr	ip, [sp, #4]
   1a78c:	subs	r3, r0, #0
   1a790:	beq	1a430 <close_stdout@@Base+0x4db0>
   1a794:	ldr	r0, [sp, #12]
   1a798:	cmp	r0, r2
   1a79c:	beq	1aa5c <close_stdout@@Base+0x53dc>
   1a7a0:	mov	r0, r3
   1a7a4:	str	r3, [r5, #4]
   1a7a8:	b	1a944 <close_stdout@@Base+0x52c4>
   1a7ac:	ldr	r0, [r5, #4]
   1a7b0:	ldr	r3, [sp, #12]
   1a7b4:	cmp	r3, r0
   1a7b8:	beq	1a7c0 <close_stdout@@Base+0x5140>
   1a7bc:	bl	11234 <free@plt>
   1a7c0:	ldr	r0, [r7, #4]
   1a7c4:	ldr	r3, [sp, #16]
   1a7c8:	cmp	r3, r0
   1a7cc:	beq	1a7d4 <close_stdout@@Base+0x5154>
   1a7d0:	bl	11234 <free@plt>
   1a7d4:	bl	113e4 <__errno_location@plt>
   1a7d8:	mov	r3, #22
   1a7dc:	mvn	r2, #0
   1a7e0:	str	r3, [r0]
   1a7e4:	b	19eec <close_stdout@@Base+0x486c>
   1a7e8:	mov	fp, r3
   1a7ec:	mov	sl, #10
   1a7f0:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a7f4:	mov	fp, r3
   1a7f8:	mov	sl, #9
   1a7fc:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a800:	mov	sl, #22
   1a804:	b	1a1e0 <close_stdout@@Base+0x4b60>
   1a808:	ldr	r9, [r4, #32]
   1a80c:	cmn	r9, #1
   1a810:	bne	1a728 <close_stdout@@Base+0x50a8>
   1a814:	ldr	r3, [sp, #36]	; 0x24
   1a818:	cmn	r3, #1
   1a81c:	str	r3, [r4, #32]
   1a820:	add	r3, r3, #1
   1a824:	beq	1a7ac <close_stdout@@Base+0x512c>
   1a828:	ldr	r9, [sp, #36]	; 0x24
   1a82c:	str	r3, [sp, #36]	; 0x24
   1a830:	b	1a728 <close_stdout@@Base+0x50a8>
   1a834:	ldr	r3, [sp, #20]
   1a838:	cmp	r3, #0
   1a83c:	blt	1a42c <close_stdout@@Base+0x4dac>
   1a840:	lsl	r3, r3, #1
   1a844:	str	r3, [sp, #20]
   1a848:	cmp	r3, r8
   1a84c:	bhi	1a85c <close_stdout@@Base+0x51dc>
   1a850:	adds	r3, r8, #1
   1a854:	str	r3, [sp, #20]
   1a858:	bcs	1a42c <close_stdout@@Base+0x4dac>
   1a85c:	ldr	r3, [sp, #20]
   1a860:	cmn	r3, #-268435455	; 0xf0000001
   1a864:	bhi	1a42c <close_stdout@@Base+0x4dac>
   1a868:	ldr	r0, [r5, #4]
   1a86c:	lsl	r1, r3, #4
   1a870:	ldr	r3, [sp, #12]
   1a874:	cmp	r3, r0
   1a878:	beq	1a9a0 <close_stdout@@Base+0x5320>
   1a87c:	str	ip, [sp, #4]
   1a880:	bl	112b8 <realloc@plt>
   1a884:	ldr	r2, [r5, #4]
   1a888:	ldr	ip, [sp, #4]
   1a88c:	subs	r3, r0, #0
   1a890:	beq	1a430 <close_stdout@@Base+0x4db0>
   1a894:	ldr	r0, [sp, #12]
   1a898:	cmp	r0, r2
   1a89c:	beq	1a9b8 <close_stdout@@Base+0x5338>
   1a8a0:	mov	r0, r3
   1a8a4:	str	r3, [r5, #4]
   1a8a8:	b	1a1fc <close_stdout@@Base+0x4b7c>
   1a8ac:	cmp	r3, #5
   1a8b0:	beq	1a390 <close_stdout@@Base+0x4d10>
   1a8b4:	b	1a7b0 <close_stdout@@Base+0x5130>
   1a8b8:	ldr	r3, [sp, #20]
   1a8bc:	cmn	r3, #-268435455	; 0xf0000001
   1a8c0:	bhi	1a42c <close_stdout@@Base+0x4dac>
   1a8c4:	ldr	r0, [r5, #4]
   1a8c8:	lsl	r1, r3, #4
   1a8cc:	ldr	r3, [sp, #12]
   1a8d0:	cmp	r3, r0
   1a8d4:	beq	1aa08 <close_stdout@@Base+0x5388>
   1a8d8:	str	ip, [sp, #4]
   1a8dc:	bl	112b8 <realloc@plt>
   1a8e0:	ldr	r2, [r5, #4]
   1a8e4:	ldr	ip, [sp, #4]
   1a8e8:	subs	r3, r0, #0
   1a8ec:	beq	1a430 <close_stdout@@Base+0x4db0>
   1a8f0:	ldr	r0, [sp, #12]
   1a8f4:	cmp	r0, r2
   1a8f8:	beq	1aa20 <close_stdout@@Base+0x53a0>
   1a8fc:	mov	r0, r3
   1a900:	str	r3, [r5, #4]
   1a904:	b	1a4c8 <close_stdout@@Base+0x4e48>
   1a908:	ldr	r3, [sp, #36]	; 0x24
   1a90c:	cmn	r3, #1
   1a910:	str	r3, [r4, #40]	; 0x28
   1a914:	add	r3, r3, #1
   1a918:	beq	1a7ac <close_stdout@@Base+0x512c>
   1a91c:	ldr	r8, [sp, #36]	; 0x24
   1a920:	str	r3, [sp, #36]	; 0x24
   1a924:	b	1a1ec <close_stdout@@Base+0x4b6c>
   1a928:	mov	r0, r1
   1a92c:	str	ip, [sp, #4]
   1a930:	bl	1136c <malloc@plt>
   1a934:	ldr	ip, [sp, #4]
   1a938:	mov	r4, r0
   1a93c:	b	1a2a8 <close_stdout@@Base+0x4c28>
   1a940:	ldr	r0, [r5, #4]
   1a944:	ldr	r3, [r5]
   1a948:	cmp	r3, r9
   1a94c:	bhi	1a96c <close_stdout@@Base+0x52ec>
   1a950:	add	r2, r3, #1
   1a954:	str	r2, [r5]
   1a958:	str	r6, [r0, r3, lsl #4]
   1a95c:	ldr	r3, [r5]
   1a960:	ldr	r0, [r5, #4]
   1a964:	cmp	r3, r9
   1a968:	bls	1a950 <close_stdout@@Base+0x52d0>
   1a96c:	ldr	r3, [r0, r9, lsl #4]
   1a970:	cmp	r3, #0
   1a974:	bne	1a98c <close_stdout@@Base+0x530c>
   1a978:	mov	r1, #5
   1a97c:	str	r1, [r0, r9, lsl #4]
   1a980:	mov	r9, sl
   1a984:	ldrb	r3, [sl]
   1a988:	b	1a014 <close_stdout@@Base+0x4994>
   1a98c:	cmp	r3, #5
   1a990:	bne	1a7b0 <close_stdout@@Base+0x5130>
   1a994:	ldrb	r3, [sl]
   1a998:	mov	r9, sl
   1a99c:	b	1a014 <close_stdout@@Base+0x4994>
   1a9a0:	mov	r0, r1
   1a9a4:	str	ip, [sp, #4]
   1a9a8:	bl	1136c <malloc@plt>
   1a9ac:	ldr	ip, [sp, #4]
   1a9b0:	subs	r3, r0, #0
   1a9b4:	beq	1aa80 <close_stdout@@Base+0x5400>
   1a9b8:	ldr	r2, [r5]
   1a9bc:	mov	r0, r3
   1a9c0:	ldr	r1, [sp, #12]
   1a9c4:	str	ip, [sp, #4]
   1a9c8:	lsl	r2, r2, #4
   1a9cc:	bl	11258 <memcpy@plt>
   1a9d0:	ldr	ip, [sp, #4]
   1a9d4:	mov	r3, r0
   1a9d8:	b	1a8a0 <close_stdout@@Base+0x5220>
   1a9dc:	mov	r2, #0
   1a9e0:	b	1a37c <close_stdout@@Base+0x4cfc>
   1a9e4:	ldr	r2, [r7]
   1a9e8:	mov	r3, #44	; 0x2c
   1a9ec:	mov	r0, r4
   1a9f0:	ldr	r1, [sp, #16]
   1a9f4:	str	ip, [sp, #4]
   1a9f8:	mul	r2, r3, r2
   1a9fc:	bl	11258 <memcpy@plt>
   1aa00:	ldr	ip, [sp, #4]
   1aa04:	b	1a2c0 <close_stdout@@Base+0x4c40>
   1aa08:	mov	r0, r1
   1aa0c:	str	ip, [sp, #4]
   1aa10:	bl	1136c <malloc@plt>
   1aa14:	ldr	ip, [sp, #4]
   1aa18:	subs	r3, r0, #0
   1aa1c:	beq	1aa80 <close_stdout@@Base+0x5400>
   1aa20:	ldr	r2, [r5]
   1aa24:	mov	r0, r3
   1aa28:	ldr	r1, [sp, #12]
   1aa2c:	str	ip, [sp, #4]
   1aa30:	lsl	r2, r2, #4
   1aa34:	bl	11258 <memcpy@plt>
   1aa38:	ldr	ip, [sp, #4]
   1aa3c:	mov	r3, r0
   1aa40:	b	1a8fc <close_stdout@@Base+0x527c>
   1aa44:	mov	r0, r1
   1aa48:	str	ip, [sp, #4]
   1aa4c:	bl	1136c <malloc@plt>
   1aa50:	ldr	ip, [sp, #4]
   1aa54:	subs	r3, r0, #0
   1aa58:	beq	1aa80 <close_stdout@@Base+0x5400>
   1aa5c:	ldr	r2, [r5]
   1aa60:	mov	r0, r3
   1aa64:	ldr	r1, [sp, #12]
   1aa68:	str	ip, [sp, #4]
   1aa6c:	lsl	r2, r2, #4
   1aa70:	bl	11258 <memcpy@plt>
   1aa74:	ldr	ip, [sp, #4]
   1aa78:	mov	r3, r0
   1aa7c:	b	1a7a0 <close_stdout@@Base+0x5120>
   1aa80:	ldr	r2, [sp, #12]
   1aa84:	b	1a430 <close_stdout@@Base+0x4db0>
   1aa88:	subs	r2, r1, #1
   1aa8c:	bxeq	lr
   1aa90:	bcc	1ac68 <close_stdout@@Base+0x55e8>
   1aa94:	cmp	r0, r1
   1aa98:	bls	1ac4c <close_stdout@@Base+0x55cc>
   1aa9c:	tst	r1, r2
   1aaa0:	beq	1ac58 <close_stdout@@Base+0x55d8>
   1aaa4:	clz	r3, r0
   1aaa8:	clz	r2, r1
   1aaac:	sub	r3, r2, r3
   1aab0:	rsbs	r3, r3, #31
   1aab4:	addne	r3, r3, r3, lsl #1
   1aab8:	mov	r2, #0
   1aabc:	addne	pc, pc, r3, lsl #2
   1aac0:	nop	{0}
   1aac4:	cmp	r0, r1, lsl #31
   1aac8:	adc	r2, r2, r2
   1aacc:	subcs	r0, r0, r1, lsl #31
   1aad0:	cmp	r0, r1, lsl #30
   1aad4:	adc	r2, r2, r2
   1aad8:	subcs	r0, r0, r1, lsl #30
   1aadc:	cmp	r0, r1, lsl #29
   1aae0:	adc	r2, r2, r2
   1aae4:	subcs	r0, r0, r1, lsl #29
   1aae8:	cmp	r0, r1, lsl #28
   1aaec:	adc	r2, r2, r2
   1aaf0:	subcs	r0, r0, r1, lsl #28
   1aaf4:	cmp	r0, r1, lsl #27
   1aaf8:	adc	r2, r2, r2
   1aafc:	subcs	r0, r0, r1, lsl #27
   1ab00:	cmp	r0, r1, lsl #26
   1ab04:	adc	r2, r2, r2
   1ab08:	subcs	r0, r0, r1, lsl #26
   1ab0c:	cmp	r0, r1, lsl #25
   1ab10:	adc	r2, r2, r2
   1ab14:	subcs	r0, r0, r1, lsl #25
   1ab18:	cmp	r0, r1, lsl #24
   1ab1c:	adc	r2, r2, r2
   1ab20:	subcs	r0, r0, r1, lsl #24
   1ab24:	cmp	r0, r1, lsl #23
   1ab28:	adc	r2, r2, r2
   1ab2c:	subcs	r0, r0, r1, lsl #23
   1ab30:	cmp	r0, r1, lsl #22
   1ab34:	adc	r2, r2, r2
   1ab38:	subcs	r0, r0, r1, lsl #22
   1ab3c:	cmp	r0, r1, lsl #21
   1ab40:	adc	r2, r2, r2
   1ab44:	subcs	r0, r0, r1, lsl #21
   1ab48:	cmp	r0, r1, lsl #20
   1ab4c:	adc	r2, r2, r2
   1ab50:	subcs	r0, r0, r1, lsl #20
   1ab54:	cmp	r0, r1, lsl #19
   1ab58:	adc	r2, r2, r2
   1ab5c:	subcs	r0, r0, r1, lsl #19
   1ab60:	cmp	r0, r1, lsl #18
   1ab64:	adc	r2, r2, r2
   1ab68:	subcs	r0, r0, r1, lsl #18
   1ab6c:	cmp	r0, r1, lsl #17
   1ab70:	adc	r2, r2, r2
   1ab74:	subcs	r0, r0, r1, lsl #17
   1ab78:	cmp	r0, r1, lsl #16
   1ab7c:	adc	r2, r2, r2
   1ab80:	subcs	r0, r0, r1, lsl #16
   1ab84:	cmp	r0, r1, lsl #15
   1ab88:	adc	r2, r2, r2
   1ab8c:	subcs	r0, r0, r1, lsl #15
   1ab90:	cmp	r0, r1, lsl #14
   1ab94:	adc	r2, r2, r2
   1ab98:	subcs	r0, r0, r1, lsl #14
   1ab9c:	cmp	r0, r1, lsl #13
   1aba0:	adc	r2, r2, r2
   1aba4:	subcs	r0, r0, r1, lsl #13
   1aba8:	cmp	r0, r1, lsl #12
   1abac:	adc	r2, r2, r2
   1abb0:	subcs	r0, r0, r1, lsl #12
   1abb4:	cmp	r0, r1, lsl #11
   1abb8:	adc	r2, r2, r2
   1abbc:	subcs	r0, r0, r1, lsl #11
   1abc0:	cmp	r0, r1, lsl #10
   1abc4:	adc	r2, r2, r2
   1abc8:	subcs	r0, r0, r1, lsl #10
   1abcc:	cmp	r0, r1, lsl #9
   1abd0:	adc	r2, r2, r2
   1abd4:	subcs	r0, r0, r1, lsl #9
   1abd8:	cmp	r0, r1, lsl #8
   1abdc:	adc	r2, r2, r2
   1abe0:	subcs	r0, r0, r1, lsl #8
   1abe4:	cmp	r0, r1, lsl #7
   1abe8:	adc	r2, r2, r2
   1abec:	subcs	r0, r0, r1, lsl #7
   1abf0:	cmp	r0, r1, lsl #6
   1abf4:	adc	r2, r2, r2
   1abf8:	subcs	r0, r0, r1, lsl #6
   1abfc:	cmp	r0, r1, lsl #5
   1ac00:	adc	r2, r2, r2
   1ac04:	subcs	r0, r0, r1, lsl #5
   1ac08:	cmp	r0, r1, lsl #4
   1ac0c:	adc	r2, r2, r2
   1ac10:	subcs	r0, r0, r1, lsl #4
   1ac14:	cmp	r0, r1, lsl #3
   1ac18:	adc	r2, r2, r2
   1ac1c:	subcs	r0, r0, r1, lsl #3
   1ac20:	cmp	r0, r1, lsl #2
   1ac24:	adc	r2, r2, r2
   1ac28:	subcs	r0, r0, r1, lsl #2
   1ac2c:	cmp	r0, r1, lsl #1
   1ac30:	adc	r2, r2, r2
   1ac34:	subcs	r0, r0, r1, lsl #1
   1ac38:	cmp	r0, r1
   1ac3c:	adc	r2, r2, r2
   1ac40:	subcs	r0, r0, r1
   1ac44:	mov	r0, r2
   1ac48:	bx	lr
   1ac4c:	moveq	r0, #1
   1ac50:	movne	r0, #0
   1ac54:	bx	lr
   1ac58:	clz	r2, r1
   1ac5c:	rsb	r2, r2, #31
   1ac60:	lsr	r0, r0, r2
   1ac64:	bx	lr
   1ac68:	cmp	r0, #0
   1ac6c:	mvnne	r0, #0
   1ac70:	b	1af10 <close_stdout@@Base+0x5890>
   1ac74:	cmp	r1, #0
   1ac78:	beq	1ac68 <close_stdout@@Base+0x55e8>
   1ac7c:	push	{r0, r1, lr}
   1ac80:	bl	1aa88 <close_stdout@@Base+0x5408>
   1ac84:	pop	{r1, r2, lr}
   1ac88:	mul	r3, r2, r0
   1ac8c:	sub	r1, r1, r3
   1ac90:	bx	lr
   1ac94:	cmp	r1, #0
   1ac98:	beq	1aea4 <close_stdout@@Base+0x5824>
   1ac9c:	eor	ip, r0, r1
   1aca0:	rsbmi	r1, r1, #0
   1aca4:	subs	r2, r1, #1
   1aca8:	beq	1ae70 <close_stdout@@Base+0x57f0>
   1acac:	movs	r3, r0
   1acb0:	rsbmi	r3, r0, #0
   1acb4:	cmp	r3, r1
   1acb8:	bls	1ae7c <close_stdout@@Base+0x57fc>
   1acbc:	tst	r1, r2
   1acc0:	beq	1ae8c <close_stdout@@Base+0x580c>
   1acc4:	clz	r2, r3
   1acc8:	clz	r0, r1
   1accc:	sub	r2, r0, r2
   1acd0:	rsbs	r2, r2, #31
   1acd4:	addne	r2, r2, r2, lsl #1
   1acd8:	mov	r0, #0
   1acdc:	addne	pc, pc, r2, lsl #2
   1ace0:	nop	{0}
   1ace4:	cmp	r3, r1, lsl #31
   1ace8:	adc	r0, r0, r0
   1acec:	subcs	r3, r3, r1, lsl #31
   1acf0:	cmp	r3, r1, lsl #30
   1acf4:	adc	r0, r0, r0
   1acf8:	subcs	r3, r3, r1, lsl #30
   1acfc:	cmp	r3, r1, lsl #29
   1ad00:	adc	r0, r0, r0
   1ad04:	subcs	r3, r3, r1, lsl #29
   1ad08:	cmp	r3, r1, lsl #28
   1ad0c:	adc	r0, r0, r0
   1ad10:	subcs	r3, r3, r1, lsl #28
   1ad14:	cmp	r3, r1, lsl #27
   1ad18:	adc	r0, r0, r0
   1ad1c:	subcs	r3, r3, r1, lsl #27
   1ad20:	cmp	r3, r1, lsl #26
   1ad24:	adc	r0, r0, r0
   1ad28:	subcs	r3, r3, r1, lsl #26
   1ad2c:	cmp	r3, r1, lsl #25
   1ad30:	adc	r0, r0, r0
   1ad34:	subcs	r3, r3, r1, lsl #25
   1ad38:	cmp	r3, r1, lsl #24
   1ad3c:	adc	r0, r0, r0
   1ad40:	subcs	r3, r3, r1, lsl #24
   1ad44:	cmp	r3, r1, lsl #23
   1ad48:	adc	r0, r0, r0
   1ad4c:	subcs	r3, r3, r1, lsl #23
   1ad50:	cmp	r3, r1, lsl #22
   1ad54:	adc	r0, r0, r0
   1ad58:	subcs	r3, r3, r1, lsl #22
   1ad5c:	cmp	r3, r1, lsl #21
   1ad60:	adc	r0, r0, r0
   1ad64:	subcs	r3, r3, r1, lsl #21
   1ad68:	cmp	r3, r1, lsl #20
   1ad6c:	adc	r0, r0, r0
   1ad70:	subcs	r3, r3, r1, lsl #20
   1ad74:	cmp	r3, r1, lsl #19
   1ad78:	adc	r0, r0, r0
   1ad7c:	subcs	r3, r3, r1, lsl #19
   1ad80:	cmp	r3, r1, lsl #18
   1ad84:	adc	r0, r0, r0
   1ad88:	subcs	r3, r3, r1, lsl #18
   1ad8c:	cmp	r3, r1, lsl #17
   1ad90:	adc	r0, r0, r0
   1ad94:	subcs	r3, r3, r1, lsl #17
   1ad98:	cmp	r3, r1, lsl #16
   1ad9c:	adc	r0, r0, r0
   1ada0:	subcs	r3, r3, r1, lsl #16
   1ada4:	cmp	r3, r1, lsl #15
   1ada8:	adc	r0, r0, r0
   1adac:	subcs	r3, r3, r1, lsl #15
   1adb0:	cmp	r3, r1, lsl #14
   1adb4:	adc	r0, r0, r0
   1adb8:	subcs	r3, r3, r1, lsl #14
   1adbc:	cmp	r3, r1, lsl #13
   1adc0:	adc	r0, r0, r0
   1adc4:	subcs	r3, r3, r1, lsl #13
   1adc8:	cmp	r3, r1, lsl #12
   1adcc:	adc	r0, r0, r0
   1add0:	subcs	r3, r3, r1, lsl #12
   1add4:	cmp	r3, r1, lsl #11
   1add8:	adc	r0, r0, r0
   1addc:	subcs	r3, r3, r1, lsl #11
   1ade0:	cmp	r3, r1, lsl #10
   1ade4:	adc	r0, r0, r0
   1ade8:	subcs	r3, r3, r1, lsl #10
   1adec:	cmp	r3, r1, lsl #9
   1adf0:	adc	r0, r0, r0
   1adf4:	subcs	r3, r3, r1, lsl #9
   1adf8:	cmp	r3, r1, lsl #8
   1adfc:	adc	r0, r0, r0
   1ae00:	subcs	r3, r3, r1, lsl #8
   1ae04:	cmp	r3, r1, lsl #7
   1ae08:	adc	r0, r0, r0
   1ae0c:	subcs	r3, r3, r1, lsl #7
   1ae10:	cmp	r3, r1, lsl #6
   1ae14:	adc	r0, r0, r0
   1ae18:	subcs	r3, r3, r1, lsl #6
   1ae1c:	cmp	r3, r1, lsl #5
   1ae20:	adc	r0, r0, r0
   1ae24:	subcs	r3, r3, r1, lsl #5
   1ae28:	cmp	r3, r1, lsl #4
   1ae2c:	adc	r0, r0, r0
   1ae30:	subcs	r3, r3, r1, lsl #4
   1ae34:	cmp	r3, r1, lsl #3
   1ae38:	adc	r0, r0, r0
   1ae3c:	subcs	r3, r3, r1, lsl #3
   1ae40:	cmp	r3, r1, lsl #2
   1ae44:	adc	r0, r0, r0
   1ae48:	subcs	r3, r3, r1, lsl #2
   1ae4c:	cmp	r3, r1, lsl #1
   1ae50:	adc	r0, r0, r0
   1ae54:	subcs	r3, r3, r1, lsl #1
   1ae58:	cmp	r3, r1
   1ae5c:	adc	r0, r0, r0
   1ae60:	subcs	r3, r3, r1
   1ae64:	cmp	ip, #0
   1ae68:	rsbmi	r0, r0, #0
   1ae6c:	bx	lr
   1ae70:	teq	ip, r0
   1ae74:	rsbmi	r0, r0, #0
   1ae78:	bx	lr
   1ae7c:	movcc	r0, #0
   1ae80:	asreq	r0, ip, #31
   1ae84:	orreq	r0, r0, #1
   1ae88:	bx	lr
   1ae8c:	clz	r2, r1
   1ae90:	rsb	r2, r2, #31
   1ae94:	cmp	ip, #0
   1ae98:	lsr	r0, r3, r2
   1ae9c:	rsbmi	r0, r0, #0
   1aea0:	bx	lr
   1aea4:	cmp	r0, #0
   1aea8:	mvngt	r0, #-2147483648	; 0x80000000
   1aeac:	movlt	r0, #-2147483648	; 0x80000000
   1aeb0:	b	1af10 <close_stdout@@Base+0x5890>
   1aeb4:	cmp	r1, #0
   1aeb8:	beq	1aea4 <close_stdout@@Base+0x5824>
   1aebc:	push	{r0, r1, lr}
   1aec0:	bl	1ac9c <close_stdout@@Base+0x561c>
   1aec4:	pop	{r1, r2, lr}
   1aec8:	mul	r3, r2, r0
   1aecc:	sub	r1, r1, r3
   1aed0:	bx	lr
   1aed4:	cmp	r3, #0
   1aed8:	cmpeq	r2, #0
   1aedc:	bne	1aef4 <close_stdout@@Base+0x5874>
   1aee0:	cmp	r1, #0
   1aee4:	cmpeq	r0, #0
   1aee8:	mvnne	r1, #0
   1aeec:	mvnne	r0, #0
   1aef0:	b	1af10 <close_stdout@@Base+0x5890>
   1aef4:	sub	sp, sp, #8
   1aef8:	push	{sp, lr}
   1aefc:	bl	1af5c <close_stdout@@Base+0x58dc>
   1af00:	ldr	lr, [sp, #4]
   1af04:	add	sp, sp, #8
   1af08:	pop	{r2, r3}
   1af0c:	bx	lr
   1af10:	push	{r1, lr}
   1af14:	mov	r0, #8
   1af18:	bl	11210 <raise@plt>
   1af1c:	pop	{r1, pc}
   1af20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af24:	mov	r8, r2
   1af28:	mov	r6, r0
   1af2c:	mov	r7, r1
   1af30:	mov	sl, r3
   1af34:	ldr	r9, [sp, #32]
   1af38:	bl	1af98 <close_stdout@@Base+0x5918>
   1af3c:	umull	r4, r5, r8, r0
   1af40:	mul	r8, r8, r1
   1af44:	mla	r2, r0, sl, r8
   1af48:	add	r5, r2, r5
   1af4c:	subs	r4, r6, r4
   1af50:	sbc	r5, r7, r5
   1af54:	strd	r4, [r9]
   1af58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af5c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1af60:	mov	r8, r2
   1af64:	mov	r6, r0
   1af68:	mov	r7, r1
   1af6c:	mov	r5, r3
   1af70:	ldr	r9, [sp, #32]
   1af74:	bl	1b424 <close_stdout@@Base+0x5da4>
   1af78:	mul	r3, r0, r5
   1af7c:	umull	r4, r5, r0, r8
   1af80:	mla	r8, r8, r1, r3
   1af84:	add	r5, r8, r5
   1af88:	subs	r4, r6, r4
   1af8c:	sbc	r5, r7, r5
   1af90:	strd	r4, [r9]
   1af94:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1af98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af9c:	rsbs	r4, r0, #0
   1afa0:	rsc	r5, r1, #0
   1afa4:	cmp	r1, #0
   1afa8:	mvn	r6, #0
   1afac:	sub	sp, sp, #12
   1afb0:	movge	r4, r0
   1afb4:	movge	r5, r1
   1afb8:	movge	r6, #0
   1afbc:	cmp	r3, #0
   1afc0:	blt	1b1f8 <close_stdout@@Base+0x5b78>
   1afc4:	cmp	r3, #0
   1afc8:	mov	sl, r4
   1afcc:	mov	ip, r5
   1afd0:	mov	r0, r2
   1afd4:	mov	r1, r3
   1afd8:	mov	r8, r2
   1afdc:	mov	r7, r4
   1afe0:	mov	r9, r5
   1afe4:	bne	1b0dc <close_stdout@@Base+0x5a5c>
   1afe8:	cmp	r2, r5
   1afec:	bls	1b118 <close_stdout@@Base+0x5a98>
   1aff0:	clz	r3, r2
   1aff4:	cmp	r3, #0
   1aff8:	rsbne	r2, r3, #32
   1affc:	lslne	r8, r0, r3
   1b000:	lsrne	r2, r4, r2
   1b004:	lslne	r7, r4, r3
   1b008:	orrne	r9, r2, r5, lsl r3
   1b00c:	lsr	r4, r8, #16
   1b010:	uxth	sl, r8
   1b014:	mov	r1, r4
   1b018:	mov	r0, r9
   1b01c:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b020:	mov	r1, r4
   1b024:	mov	fp, r0
   1b028:	mov	r0, r9
   1b02c:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b030:	mul	r0, sl, fp
   1b034:	lsr	r2, r7, #16
   1b038:	orr	r1, r2, r1, lsl #16
   1b03c:	cmp	r0, r1
   1b040:	bls	1b064 <close_stdout@@Base+0x59e4>
   1b044:	adds	r1, r1, r8
   1b048:	sub	r3, fp, #1
   1b04c:	bcs	1b060 <close_stdout@@Base+0x59e0>
   1b050:	cmp	r0, r1
   1b054:	subhi	fp, fp, #2
   1b058:	addhi	r1, r1, r8
   1b05c:	bhi	1b064 <close_stdout@@Base+0x59e4>
   1b060:	mov	fp, r3
   1b064:	rsb	r9, r0, r1
   1b068:	mov	r1, r4
   1b06c:	uxth	r7, r7
   1b070:	mov	r0, r9
   1b074:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b078:	mov	r1, r4
   1b07c:	mov	r5, r0
   1b080:	mov	r0, r9
   1b084:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b088:	mul	sl, sl, r5
   1b08c:	orr	r1, r7, r1, lsl #16
   1b090:	cmp	sl, r1
   1b094:	bls	1b0b4 <close_stdout@@Base+0x5a34>
   1b098:	adds	r8, r1, r8
   1b09c:	sub	r3, r5, #1
   1b0a0:	bcs	1b0b0 <close_stdout@@Base+0x5a30>
   1b0a4:	cmp	sl, r8
   1b0a8:	subhi	r5, r5, #2
   1b0ac:	bhi	1b0b4 <close_stdout@@Base+0x5a34>
   1b0b0:	mov	r5, r3
   1b0b4:	orr	r3, r5, fp, lsl #16
   1b0b8:	mov	r4, #0
   1b0bc:	cmp	r6, #0
   1b0c0:	mov	r0, r3
   1b0c4:	mov	r1, r4
   1b0c8:	beq	1b0d4 <close_stdout@@Base+0x5a54>
   1b0cc:	rsbs	r0, r0, #0
   1b0d0:	rsc	r1, r1, #0
   1b0d4:	add	sp, sp, #12
   1b0d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0dc:	cmp	r3, r5
   1b0e0:	movhi	r4, #0
   1b0e4:	movhi	r3, r4
   1b0e8:	bhi	1b0bc <close_stdout@@Base+0x5a3c>
   1b0ec:	clz	r5, r1
   1b0f0:	cmp	r5, #0
   1b0f4:	bne	1b2e4 <close_stdout@@Base+0x5c64>
   1b0f8:	cmp	r1, ip
   1b0fc:	cmpcs	r2, sl
   1b100:	movhi	r4, #0
   1b104:	movls	r4, #1
   1b108:	movls	r3, #1
   1b10c:	movls	r4, r5
   1b110:	movhi	r3, r4
   1b114:	b	1b0bc <close_stdout@@Base+0x5a3c>
   1b118:	cmp	r2, #0
   1b11c:	bne	1b130 <close_stdout@@Base+0x5ab0>
   1b120:	mov	r1, r2
   1b124:	mov	r0, #1
   1b128:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b12c:	mov	r8, r0
   1b130:	clz	r3, r8
   1b134:	cmp	r3, #0
   1b138:	bne	1b208 <close_stdout@@Base+0x5b88>
   1b13c:	rsb	r9, r8, r9
   1b140:	lsr	r5, r8, #16
   1b144:	uxth	sl, r8
   1b148:	mov	r4, #1
   1b14c:	mov	r1, r5
   1b150:	mov	r0, r9
   1b154:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b158:	mov	r1, r5
   1b15c:	mov	fp, r0
   1b160:	mov	r0, r9
   1b164:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b168:	mul	r0, sl, fp
   1b16c:	lsr	r2, r7, #16
   1b170:	orr	r1, r2, r1, lsl #16
   1b174:	cmp	r0, r1
   1b178:	bls	1b198 <close_stdout@@Base+0x5b18>
   1b17c:	adds	r1, r1, r8
   1b180:	sub	r3, fp, #1
   1b184:	bcs	1b404 <close_stdout@@Base+0x5d84>
   1b188:	cmp	r0, r1
   1b18c:	subhi	fp, fp, #2
   1b190:	addhi	r1, r1, r8
   1b194:	bls	1b404 <close_stdout@@Base+0x5d84>
   1b198:	rsb	r2, r0, r1
   1b19c:	mov	r1, r5
   1b1a0:	str	r2, [sp]
   1b1a4:	uxth	r7, r7
   1b1a8:	mov	r0, r2
   1b1ac:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b1b0:	ldr	r2, [sp]
   1b1b4:	mov	r1, r5
   1b1b8:	mov	r9, r0
   1b1bc:	mov	r0, r2
   1b1c0:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b1c4:	mul	sl, sl, r9
   1b1c8:	orr	r1, r7, r1, lsl #16
   1b1cc:	cmp	sl, r1
   1b1d0:	bls	1b1f0 <close_stdout@@Base+0x5b70>
   1b1d4:	adds	r8, r1, r8
   1b1d8:	sub	r3, r9, #1
   1b1dc:	bcs	1b1ec <close_stdout@@Base+0x5b6c>
   1b1e0:	cmp	sl, r8
   1b1e4:	subhi	r9, r9, #2
   1b1e8:	bhi	1b1f0 <close_stdout@@Base+0x5b70>
   1b1ec:	mov	r9, r3
   1b1f0:	orr	r3, r9, fp, lsl #16
   1b1f4:	b	1b0bc <close_stdout@@Base+0x5a3c>
   1b1f8:	mvn	r6, r6
   1b1fc:	rsbs	r2, r2, #0
   1b200:	rsc	r3, r3, #0
   1b204:	b	1afc4 <close_stdout@@Base+0x5944>
   1b208:	lsl	r8, r8, r3
   1b20c:	rsb	fp, r3, #32
   1b210:	lsr	r4, r9, fp
   1b214:	lsr	fp, r7, fp
   1b218:	lsr	r5, r8, #16
   1b21c:	orr	fp, fp, r9, lsl r3
   1b220:	mov	r0, r4
   1b224:	lsl	r7, r7, r3
   1b228:	mov	r1, r5
   1b22c:	uxth	sl, r8
   1b230:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b234:	mov	r1, r5
   1b238:	mov	r3, r0
   1b23c:	mov	r0, r4
   1b240:	str	r3, [sp]
   1b244:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b248:	ldr	r3, [sp]
   1b24c:	lsr	r2, fp, #16
   1b250:	mul	r0, sl, r3
   1b254:	orr	r1, r2, r1, lsl #16
   1b258:	cmp	r0, r1
   1b25c:	bls	1b27c <close_stdout@@Base+0x5bfc>
   1b260:	adds	r1, r1, r8
   1b264:	sub	r2, r3, #1
   1b268:	bcs	1b41c <close_stdout@@Base+0x5d9c>
   1b26c:	cmp	r0, r1
   1b270:	subhi	r3, r3, #2
   1b274:	addhi	r1, r1, r8
   1b278:	bls	1b41c <close_stdout@@Base+0x5d9c>
   1b27c:	rsb	r9, r0, r1
   1b280:	mov	r1, r5
   1b284:	str	r3, [sp]
   1b288:	uxth	fp, fp
   1b28c:	mov	r0, r9
   1b290:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b294:	mov	r1, r5
   1b298:	mov	r4, r0
   1b29c:	mov	r0, r9
   1b2a0:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b2a4:	mul	r9, sl, r4
   1b2a8:	ldr	r3, [sp]
   1b2ac:	orr	r1, fp, r1, lsl #16
   1b2b0:	cmp	r9, r1
   1b2b4:	bls	1b2d8 <close_stdout@@Base+0x5c58>
   1b2b8:	adds	r1, r1, r8
   1b2bc:	sub	r2, r4, #1
   1b2c0:	bcs	1b2d4 <close_stdout@@Base+0x5c54>
   1b2c4:	cmp	r9, r1
   1b2c8:	subhi	r4, r4, #2
   1b2cc:	addhi	r1, r1, r8
   1b2d0:	bhi	1b2d8 <close_stdout@@Base+0x5c58>
   1b2d4:	mov	r4, r2
   1b2d8:	rsb	r9, r9, r1
   1b2dc:	orr	r4, r4, r3, lsl #16
   1b2e0:	b	1b14c <close_stdout@@Base+0x5acc>
   1b2e4:	rsb	sl, r5, #32
   1b2e8:	lsl	r3, r2, r5
   1b2ec:	lsr	r0, r2, sl
   1b2f0:	lsr	r2, ip, sl
   1b2f4:	orr	r4, r0, r1, lsl r5
   1b2f8:	lsr	sl, r7, sl
   1b2fc:	mov	r0, r2
   1b300:	orr	sl, sl, ip, lsl r5
   1b304:	lsr	r9, r4, #16
   1b308:	str	r3, [sp, #4]
   1b30c:	str	r2, [sp]
   1b310:	uxth	fp, r4
   1b314:	mov	r1, r9
   1b318:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b31c:	ldr	r2, [sp]
   1b320:	mov	r1, r9
   1b324:	mov	r8, r0
   1b328:	mov	r0, r2
   1b32c:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b330:	mul	r0, fp, r8
   1b334:	lsr	r2, sl, #16
   1b338:	orr	r1, r2, r1, lsl #16
   1b33c:	cmp	r0, r1
   1b340:	bls	1b360 <close_stdout@@Base+0x5ce0>
   1b344:	adds	r1, r1, r4
   1b348:	sub	r2, r8, #1
   1b34c:	bcs	1b414 <close_stdout@@Base+0x5d94>
   1b350:	cmp	r0, r1
   1b354:	subhi	r8, r8, #2
   1b358:	addhi	r1, r1, r4
   1b35c:	bls	1b414 <close_stdout@@Base+0x5d94>
   1b360:	rsb	ip, r0, r1
   1b364:	mov	r1, r9
   1b368:	str	ip, [sp]
   1b36c:	mov	r0, ip
   1b370:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b374:	ldr	ip, [sp]
   1b378:	mov	r1, r9
   1b37c:	mov	r2, r0
   1b380:	mov	r0, ip
   1b384:	str	r2, [sp]
   1b388:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b38c:	ldr	r2, [sp]
   1b390:	uxth	ip, sl
   1b394:	mul	fp, fp, r2
   1b398:	orr	ip, ip, r1, lsl #16
   1b39c:	cmp	fp, ip
   1b3a0:	bls	1b3c0 <close_stdout@@Base+0x5d40>
   1b3a4:	adds	ip, ip, r4
   1b3a8:	sub	r1, r2, #1
   1b3ac:	bcs	1b40c <close_stdout@@Base+0x5d8c>
   1b3b0:	cmp	fp, ip
   1b3b4:	subhi	r2, r2, #2
   1b3b8:	addhi	ip, ip, r4
   1b3bc:	bls	1b40c <close_stdout@@Base+0x5d8c>
   1b3c0:	ldr	r0, [sp, #4]
   1b3c4:	orr	r1, r2, r8, lsl #16
   1b3c8:	rsb	fp, fp, ip
   1b3cc:	umull	r2, r3, r1, r0
   1b3d0:	cmp	fp, r3
   1b3d4:	bcc	1b3f8 <close_stdout@@Base+0x5d78>
   1b3d8:	movne	r4, #0
   1b3dc:	moveq	r4, #1
   1b3e0:	cmp	r2, r7, lsl r5
   1b3e4:	movls	r4, #0
   1b3e8:	andhi	r4, r4, #1
   1b3ec:	cmp	r4, #0
   1b3f0:	moveq	r3, r1
   1b3f4:	beq	1b0bc <close_stdout@@Base+0x5a3c>
   1b3f8:	sub	r3, r1, #1
   1b3fc:	mov	r4, #0
   1b400:	b	1b0bc <close_stdout@@Base+0x5a3c>
   1b404:	mov	fp, r3
   1b408:	b	1b198 <close_stdout@@Base+0x5b18>
   1b40c:	mov	r2, r1
   1b410:	b	1b3c0 <close_stdout@@Base+0x5d40>
   1b414:	mov	r8, r2
   1b418:	b	1b360 <close_stdout@@Base+0x5ce0>
   1b41c:	mov	r3, r2
   1b420:	b	1b27c <close_stdout@@Base+0x5bfc>
   1b424:	cmp	r3, #0
   1b428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b42c:	mov	r6, r0
   1b430:	sub	sp, sp, #12
   1b434:	mov	r5, r1
   1b438:	mov	r7, r0
   1b43c:	mov	r4, r2
   1b440:	mov	r8, r1
   1b444:	bne	1b524 <close_stdout@@Base+0x5ea4>
   1b448:	cmp	r2, r1
   1b44c:	bls	1b560 <close_stdout@@Base+0x5ee0>
   1b450:	clz	r3, r2
   1b454:	cmp	r3, #0
   1b458:	rsbne	r8, r3, #32
   1b45c:	lslne	r4, r2, r3
   1b460:	lsrne	r8, r0, r8
   1b464:	lslne	r7, r0, r3
   1b468:	orrne	r8, r8, r1, lsl r3
   1b46c:	lsr	r5, r4, #16
   1b470:	uxth	sl, r4
   1b474:	mov	r1, r5
   1b478:	mov	r0, r8
   1b47c:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b480:	mov	r1, r5
   1b484:	mov	r9, r0
   1b488:	mov	r0, r8
   1b48c:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b490:	mul	r0, sl, r9
   1b494:	lsr	r3, r7, #16
   1b498:	orr	r1, r3, r1, lsl #16
   1b49c:	cmp	r0, r1
   1b4a0:	bls	1b4c4 <close_stdout@@Base+0x5e44>
   1b4a4:	adds	r1, r1, r4
   1b4a8:	sub	r2, r9, #1
   1b4ac:	bcs	1b4c0 <close_stdout@@Base+0x5e40>
   1b4b0:	cmp	r0, r1
   1b4b4:	subhi	r9, r9, #2
   1b4b8:	addhi	r1, r1, r4
   1b4bc:	bhi	1b4c4 <close_stdout@@Base+0x5e44>
   1b4c0:	mov	r9, r2
   1b4c4:	rsb	r8, r0, r1
   1b4c8:	mov	r1, r5
   1b4cc:	uxth	r7, r7
   1b4d0:	mov	r0, r8
   1b4d4:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b4d8:	mov	r1, r5
   1b4dc:	mov	r6, r0
   1b4e0:	mov	r0, r8
   1b4e4:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b4e8:	mul	sl, sl, r6
   1b4ec:	orr	r1, r7, r1, lsl #16
   1b4f0:	cmp	sl, r1
   1b4f4:	bls	1b510 <close_stdout@@Base+0x5e90>
   1b4f8:	adds	r4, r1, r4
   1b4fc:	sub	r3, r6, #1
   1b500:	bcs	1b80c <close_stdout@@Base+0x618c>
   1b504:	cmp	sl, r4
   1b508:	subhi	r6, r6, #2
   1b50c:	bls	1b80c <close_stdout@@Base+0x618c>
   1b510:	orr	r0, r6, r9, lsl #16
   1b514:	mov	r6, #0
   1b518:	mov	r1, r6
   1b51c:	add	sp, sp, #12
   1b520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b524:	cmp	r3, r1
   1b528:	movhi	r6, #0
   1b52c:	movhi	r0, r6
   1b530:	bhi	1b518 <close_stdout@@Base+0x5e98>
   1b534:	clz	r7, r3
   1b538:	cmp	r7, #0
   1b53c:	bne	1b63c <close_stdout@@Base+0x5fbc>
   1b540:	cmp	r3, r1
   1b544:	cmpcs	r2, r6
   1b548:	movhi	r6, #0
   1b54c:	movls	r6, #1
   1b550:	movls	r0, #1
   1b554:	movls	r6, r7
   1b558:	movhi	r0, r6
   1b55c:	b	1b518 <close_stdout@@Base+0x5e98>
   1b560:	cmp	r2, #0
   1b564:	bne	1b578 <close_stdout@@Base+0x5ef8>
   1b568:	mov	r1, r2
   1b56c:	mov	r0, #1
   1b570:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b574:	mov	r4, r0
   1b578:	clz	r3, r4
   1b57c:	cmp	r3, #0
   1b580:	bne	1b738 <close_stdout@@Base+0x60b8>
   1b584:	rsb	r5, r4, r5
   1b588:	lsr	r8, r4, #16
   1b58c:	uxth	sl, r4
   1b590:	mov	r6, #1
   1b594:	mov	r1, r8
   1b598:	mov	r0, r5
   1b59c:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b5a0:	mov	r1, r8
   1b5a4:	mov	r9, r0
   1b5a8:	mov	r0, r5
   1b5ac:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b5b0:	mul	r0, sl, r9
   1b5b4:	lsr	r3, r7, #16
   1b5b8:	orr	r1, r3, r1, lsl #16
   1b5bc:	cmp	r0, r1
   1b5c0:	bls	1b5e0 <close_stdout@@Base+0x5f60>
   1b5c4:	adds	r1, r1, r4
   1b5c8:	sub	r2, r9, #1
   1b5cc:	bcs	1b814 <close_stdout@@Base+0x6194>
   1b5d0:	cmp	r0, r1
   1b5d4:	subhi	r9, r9, #2
   1b5d8:	addhi	r1, r1, r4
   1b5dc:	bls	1b814 <close_stdout@@Base+0x6194>
   1b5e0:	rsb	fp, r0, r1
   1b5e4:	mov	r1, r8
   1b5e8:	uxth	r7, r7
   1b5ec:	mov	r0, fp
   1b5f0:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b5f4:	mov	r1, r8
   1b5f8:	mov	r5, r0
   1b5fc:	mov	r0, fp
   1b600:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b604:	mul	sl, sl, r5
   1b608:	orr	r1, r7, r1, lsl #16
   1b60c:	cmp	sl, r1
   1b610:	bls	1b62c <close_stdout@@Base+0x5fac>
   1b614:	adds	r4, r1, r4
   1b618:	sub	r3, r5, #1
   1b61c:	bcs	1b81c <close_stdout@@Base+0x619c>
   1b620:	cmp	sl, r4
   1b624:	subhi	r5, r5, #2
   1b628:	bls	1b81c <close_stdout@@Base+0x619c>
   1b62c:	orr	r0, r5, r9, lsl #16
   1b630:	mov	r1, r6
   1b634:	add	sp, sp, #12
   1b638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b63c:	rsb	r1, r7, #32
   1b640:	lsl	r0, r2, r7
   1b644:	lsr	r2, r2, r1
   1b648:	lsr	fp, r5, r1
   1b64c:	orr	r8, r2, r3, lsl r7
   1b650:	lsr	r1, r6, r1
   1b654:	str	r0, [sp, #4]
   1b658:	orr	r5, r1, r5, lsl r7
   1b65c:	lsr	r9, r8, #16
   1b660:	mov	r0, fp
   1b664:	uxth	sl, r8
   1b668:	mov	r1, r9
   1b66c:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b670:	mov	r1, r9
   1b674:	mov	r4, r0
   1b678:	mov	r0, fp
   1b67c:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b680:	mul	r0, sl, r4
   1b684:	lsr	ip, r5, #16
   1b688:	orr	r1, ip, r1, lsl #16
   1b68c:	cmp	r0, r1
   1b690:	bls	1b6a4 <close_stdout@@Base+0x6024>
   1b694:	adds	r1, r1, r8
   1b698:	sub	r2, r4, #1
   1b69c:	bcc	1b838 <close_stdout@@Base+0x61b8>
   1b6a0:	mov	r4, r2
   1b6a4:	rsb	ip, r0, r1
   1b6a8:	mov	r1, r9
   1b6ac:	str	ip, [sp]
   1b6b0:	uxth	r5, r5
   1b6b4:	mov	r0, ip
   1b6b8:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b6bc:	ldr	ip, [sp]
   1b6c0:	mov	r1, r9
   1b6c4:	mov	fp, r0
   1b6c8:	mov	r0, ip
   1b6cc:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b6d0:	mul	sl, sl, fp
   1b6d4:	orr	r1, r5, r1, lsl #16
   1b6d8:	cmp	sl, r1
   1b6dc:	bls	1b6f0 <close_stdout@@Base+0x6070>
   1b6e0:	adds	r1, r1, r8
   1b6e4:	sub	r2, fp, #1
   1b6e8:	bcc	1b824 <close_stdout@@Base+0x61a4>
   1b6ec:	mov	fp, r2
   1b6f0:	ldr	r3, [sp, #4]
   1b6f4:	orr	r0, fp, r4, lsl #16
   1b6f8:	rsb	sl, sl, r1
   1b6fc:	umull	r4, r5, r0, r3
   1b700:	cmp	sl, r5
   1b704:	bcc	1b724 <close_stdout@@Base+0x60a4>
   1b708:	movne	r3, #0
   1b70c:	moveq	r3, #1
   1b710:	cmp	r4, r6, lsl r7
   1b714:	movls	r6, #0
   1b718:	andhi	r6, r3, #1
   1b71c:	cmp	r6, #0
   1b720:	beq	1b518 <close_stdout@@Base+0x5e98>
   1b724:	mov	r6, #0
   1b728:	sub	r0, r0, #1
   1b72c:	mov	r1, r6
   1b730:	add	sp, sp, #12
   1b734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b738:	lsl	r4, r4, r3
   1b73c:	rsb	r9, r3, #32
   1b740:	lsr	r2, r5, r9
   1b744:	lsr	r9, r6, r9
   1b748:	lsr	r8, r4, #16
   1b74c:	orr	r9, r9, r5, lsl r3
   1b750:	mov	r0, r2
   1b754:	lsl	r7, r6, r3
   1b758:	mov	r1, r8
   1b75c:	str	r2, [sp]
   1b760:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b764:	ldr	r2, [sp]
   1b768:	mov	r1, r8
   1b76c:	uxth	sl, r4
   1b770:	mov	fp, r0
   1b774:	mov	r0, r2
   1b778:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b77c:	mul	r0, sl, fp
   1b780:	lsr	r3, r9, #16
   1b784:	orr	r1, r3, r1, lsl #16
   1b788:	cmp	r0, r1
   1b78c:	bls	1b7ac <close_stdout@@Base+0x612c>
   1b790:	adds	r1, r1, r4
   1b794:	sub	r3, fp, #1
   1b798:	bcs	1b84c <close_stdout@@Base+0x61cc>
   1b79c:	cmp	r0, r1
   1b7a0:	subhi	fp, fp, #2
   1b7a4:	addhi	r1, r1, r4
   1b7a8:	bls	1b84c <close_stdout@@Base+0x61cc>
   1b7ac:	rsb	r5, r0, r1
   1b7b0:	mov	r1, r8
   1b7b4:	uxth	r9, r9
   1b7b8:	mov	r0, r5
   1b7bc:	bl	1aa88 <close_stdout@@Base+0x5408>
   1b7c0:	mov	r1, r8
   1b7c4:	mov	r6, r0
   1b7c8:	mov	r0, r5
   1b7cc:	bl	1ac74 <close_stdout@@Base+0x55f4>
   1b7d0:	mul	r5, sl, r6
   1b7d4:	orr	r1, r9, r1, lsl #16
   1b7d8:	cmp	r5, r1
   1b7dc:	bls	1b800 <close_stdout@@Base+0x6180>
   1b7e0:	adds	r1, r1, r4
   1b7e4:	sub	r3, r6, #1
   1b7e8:	bcs	1b7fc <close_stdout@@Base+0x617c>
   1b7ec:	cmp	r5, r1
   1b7f0:	subhi	r6, r6, #2
   1b7f4:	addhi	r1, r1, r4
   1b7f8:	bhi	1b800 <close_stdout@@Base+0x6180>
   1b7fc:	mov	r6, r3
   1b800:	rsb	r5, r5, r1
   1b804:	orr	r6, r6, fp, lsl #16
   1b808:	b	1b594 <close_stdout@@Base+0x5f14>
   1b80c:	mov	r6, r3
   1b810:	b	1b510 <close_stdout@@Base+0x5e90>
   1b814:	mov	r9, r2
   1b818:	b	1b5e0 <close_stdout@@Base+0x5f60>
   1b81c:	mov	r5, r3
   1b820:	b	1b62c <close_stdout@@Base+0x5fac>
   1b824:	cmp	sl, r1
   1b828:	subhi	fp, fp, #2
   1b82c:	addhi	r1, r1, r8
   1b830:	bhi	1b6f0 <close_stdout@@Base+0x6070>
   1b834:	b	1b6ec <close_stdout@@Base+0x606c>
   1b838:	cmp	r0, r1
   1b83c:	subhi	r4, r4, #2
   1b840:	addhi	r1, r1, r8
   1b844:	bhi	1b6a4 <close_stdout@@Base+0x6024>
   1b848:	b	1b6a0 <close_stdout@@Base+0x6020>
   1b84c:	mov	fp, r3
   1b850:	b	1b7ac <close_stdout@@Base+0x612c>
   1b854:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1b858:	mov	r7, r0
   1b85c:	ldr	r6, [pc, #76]	; 1b8b0 <close_stdout@@Base+0x6230>
   1b860:	mov	r8, r1
   1b864:	ldr	r5, [pc, #72]	; 1b8b4 <close_stdout@@Base+0x6234>
   1b868:	mov	r9, r2
   1b86c:	add	r6, pc, r6
   1b870:	bl	111cc <fdopen@plt-0x20>
   1b874:	add	r5, pc, r5
   1b878:	rsb	r6, r5, r6
   1b87c:	asrs	r6, r6, #2
   1b880:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1b884:	sub	r5, r5, #4
   1b888:	mov	r4, #0
   1b88c:	add	r4, r4, #1
   1b890:	ldr	r3, [r5, #4]!
   1b894:	mov	r0, r7
   1b898:	mov	r1, r8
   1b89c:	mov	r2, r9
   1b8a0:	blx	r3
   1b8a4:	cmp	r4, r6
   1b8a8:	bne	1b88c <close_stdout@@Base+0x620c>
   1b8ac:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1b8b0:			; <UNDEFINED> instruction: 0x000125b0
   1b8b4:	andeq	r2, r1, r4, lsr #11
   1b8b8:	bx	lr
   1b8bc:	ldr	r3, [pc, #28]	; 1b8e0 <close_stdout@@Base+0x6260>
   1b8c0:	mov	r1, #0
   1b8c4:	ldr	r2, [pc, #24]	; 1b8e4 <close_stdout@@Base+0x6264>
   1b8c8:	add	r3, pc, r3
   1b8cc:	ldr	r3, [r3, r2]
   1b8d0:	cmp	r3, #0
   1b8d4:	ldrne	r2, [r3]
   1b8d8:	moveq	r2, r3
   1b8dc:	b	113fc <__cxa_atexit@plt>
   1b8e0:	andeq	r2, r1, r0, lsr r7
   1b8e4:	andeq	r0, r0, r0, asr #2

Disassembly of section .fini:

0001b8e8 <.fini>:
   1b8e8:	push	{r3, lr}
   1b8ec:	pop	{r3, pc}
