
centos-preinstalled/size:     file format elf32-littlearm


Disassembly of section .init:

00011334 <_init@@Base>:
   11334:	push	{r3, lr}
   11338:	bl	11c90 <__assert_fail@plt+0x5b8>
   1133c:	pop	{r3, pc}

Disassembly of section .plt:

00011340 <bfd_scan_vma@plt-0x14>:
   11340:	push	{lr}		; (str lr, [sp, #-4]!)
   11344:	ldr	lr, [pc, #4]	; 11350 <_init@@Base+0x1c>
   11348:	add	lr, pc, lr
   1134c:	ldr	pc, [lr, #8]!
   11350:			; <UNDEFINED> instruction: 0x00015cb0

00011354 <bfd_scan_vma@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #86016	; 0x15000
   1135c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011360 <strcmp@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #86016	; 0x15000
   11368:	ldr	pc, [ip, #3240]!	; 0xca8

0001136c <strtol@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #86016	; 0x15000
   11374:	ldr	pc, [ip, #3232]!	; 0xca0

00011378 <bfd_core_file_failing_command@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #86016	; 0x15000
   11380:	ldr	pc, [ip, #3224]!	; 0xc98

00011384 <fflush@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #86016	; 0x15000
   1138c:	ldr	pc, [ip, #3216]!	; 0xc90

00011390 <bfd_arch_list@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #86016	; 0x15000
   11398:	ldr	pc, [ip, #3208]!	; 0xc88

0001139c <memmove@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #86016	; 0x15000
   113a4:	ldr	pc, [ip, #3200]!	; 0xc80

000113a8 <bfd_set_default_target@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #86016	; 0x15000
   113b0:	ldr	pc, [ip, #3192]!	; 0xc78

000113b4 <free@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #86016	; 0x15000
   113bc:	ldr	pc, [ip, #3184]!	; 0xc70

000113c0 <ferror@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #86016	; 0x15000
   113c8:	ldr	pc, [ip, #3176]!	; 0xc68

000113cc <memcpy@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #86016	; 0x15000
   113d4:	ldr	pc, [ip, #3168]!	; 0xc60

000113d8 <bfd_openr@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #86016	; 0x15000
   113e0:	ldr	pc, [ip, #3160]!	; 0xc58

000113e4 <ftell@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #86016	; 0x15000
   113ec:	ldr	pc, [ip, #3152]!	; 0xc50

000113f0 <ctime@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #86016	; 0x15000
   113f8:	ldr	pc, [ip, #3144]!	; 0xc48

000113fc <dcgettext@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #86016	; 0x15000
   11404:	ldr	pc, [ip, #3136]!	; 0xc40

00011408 <bfd_malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #86016	; 0x15000
   11410:	ldr	pc, [ip, #3128]!	; 0xc38

00011414 <__stack_chk_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #86016	; 0x15000
   1141c:	ldr	pc, [ip, #3120]!	; 0xc30

00011420 <unlink@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #86016	; 0x15000
   11428:	ldr	pc, [ip, #3112]!	; 0xc28

0001142c <xrealloc@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #86016	; 0x15000
   11434:	ldr	pc, [ip, #3104]!	; 0xc20

00011438 <textdomain@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #86016	; 0x15000
   11440:	ldr	pc, [ip, #3096]!	; 0xc18

00011444 <bfd_target_list@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #86016	; 0x15000
   1144c:	ldr	pc, [ip, #3088]!	; 0xc10

00011450 <bfd_get_error@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #86016	; 0x15000
   11458:	ldr	pc, [ip, #3080]!	; 0xc08

0001145c <_IO_putc@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #86016	; 0x15000
   11464:	ldr	pc, [ip, #3072]!	; 0xc00

00011468 <fwrite@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #86016	; 0x15000
   11470:	ldr	pc, [ip, #3064]!	; 0xbf8

00011474 <xmalloc@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #86016	; 0x15000
   1147c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011480 <bfd_set_error@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #86016	; 0x15000
   11488:	ldr	pc, [ip, #3048]!	; 0xbe8

0001148c <xmalloc_set_program_name@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #86016	; 0x15000
   11494:	ldr	pc, [ip, #3040]!	; 0xbe0

00011498 <xstrdup@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #86016	; 0x15000
   114a0:	ldr	pc, [ip, #3032]!	; 0xbd8

000114a4 <strcpy@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #86016	; 0x15000
   114ac:	ldr	pc, [ip, #3024]!	; 0xbd0

000114b0 <fread@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #86016	; 0x15000
   114b8:	ldr	pc, [ip, #3016]!	; 0xbc8

000114bc <bfd_init@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #86016	; 0x15000
   114c4:	ldr	pc, [ip, #3008]!	; 0xbc0

000114c8 <mkstemps64@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #86016	; 0x15000
   114d0:	ldr	pc, [ip, #3000]!	; 0xbb8

000114d4 <getenv@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #86016	; 0x15000
   114dc:	ldr	pc, [ip, #2992]!	; 0xbb0

000114e0 <mkstemp64@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #86016	; 0x15000
   114e8:	ldr	pc, [ip, #2984]!	; 0xba8

000114ec <__gnu_Unwind_Find_exidx@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #86016	; 0x15000
   114f4:	ldr	pc, [ip, #2976]!	; 0xba0

000114f8 <puts@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #86016	; 0x15000
   11500:	ldr	pc, [ip, #2968]!	; 0xb98

00011504 <__cxa_begin_cleanup@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #86016	; 0x15000
   1150c:	ldr	pc, [ip, #2960]!	; 0xb90

00011510 <__libc_start_main@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #86016	; 0x15000
   11518:	ldr	pc, [ip, #2952]!	; 0xb88

0001151c <strerror@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #86016	; 0x15000
   11524:	ldr	pc, [ip, #2944]!	; 0xb80

00011528 <__vfprintf_chk@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #86016	; 0x15000
   11530:	ldr	pc, [ip, #2936]!	; 0xb78

00011534 <__gmon_start__@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #86016	; 0x15000
   1153c:	ldr	pc, [ip, #2928]!	; 0xb70

00011540 <bfd_set_format@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #86016	; 0x15000
   11548:	ldr	pc, [ip, #2920]!	; 0xb68

0001154c <getopt_long@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #86016	; 0x15000
   11554:	ldr	pc, [ip, #2912]!	; 0xb60

00011558 <exit@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #86016	; 0x15000
   11560:	ldr	pc, [ip, #2904]!	; 0xb58

00011564 <__cxa_type_match@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #86016	; 0x15000
   1156c:	ldr	pc, [ip, #2896]!	; 0xb50

00011570 <strlen@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #86016	; 0x15000
   11578:	ldr	pc, [ip, #2888]!	; 0xb48

0001157c <bfd_close_all_done@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #86016	; 0x15000
   11584:	ldr	pc, [ip, #2880]!	; 0xb40

00011588 <bfd_printable_arch_mach@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #86016	; 0x15000
   11590:	ldr	pc, [ip, #2872]!	; 0xb38

00011594 <__errno_location@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #86016	; 0x15000
   1159c:	ldr	pc, [ip, #2864]!	; 0xb30

000115a0 <__sprintf_chk@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #86016	; 0x15000
   115a8:	ldr	pc, [ip, #2856]!	; 0xb28

000115ac <putchar@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #86016	; 0x15000
   115b4:	ldr	pc, [ip, #2848]!	; 0xb20

000115b8 <__printf_chk@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #86016	; 0x15000
   115c0:	ldr	pc, [ip, #2840]!	; 0xb18

000115c4 <__fprintf_chk@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #86016	; 0x15000
   115cc:	ldr	pc, [ip, #2832]!	; 0xb10

000115d0 <access@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #86016	; 0x15000
   115d8:	ldr	pc, [ip, #2824]!	; 0xb08

000115dc <fclose@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #86016	; 0x15000
   115e4:	ldr	pc, [ip, #2816]!	; 0xb00

000115e8 <bfd_openw@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #86016	; 0x15000
   115f0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115f4 <bfd_set_error_program_name@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #86016	; 0x15000
   115fc:	ldr	pc, [ip, #2800]!	; 0xaf0

00011600 <setlocale@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #86016	; 0x15000
   11608:	ldr	pc, [ip, #2792]!	; 0xae8

0001160c <strrchr@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #86016	; 0x15000
   11614:	ldr	pc, [ip, #2784]!	; 0xae0

00011618 <fputc@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #86016	; 0x15000
   11620:	ldr	pc, [ip, #2776]!	; 0xad8

00011624 <xexit@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #86016	; 0x15000
   1162c:	ldr	pc, [ip, #2768]!	; 0xad0

00011630 <bfd_close@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #86016	; 0x15000
   11638:	ldr	pc, [ip, #2760]!	; 0xac8

0001163c <mkdtemp@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #86016	; 0x15000
   11644:	ldr	pc, [ip, #2752]!	; 0xac0

00011648 <bfd_check_format_matches@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #86016	; 0x15000
   11650:	ldr	pc, [ip, #2744]!	; 0xab8

00011654 <fopen64@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #86016	; 0x15000
   1165c:	ldr	pc, [ip, #2736]!	; 0xab0

00011660 <bfd_errmsg@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #86016	; 0x15000
   11668:	ldr	pc, [ip, #2728]!	; 0xaa8

0001166c <bindtextdomain@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #86016	; 0x15000
   11674:	ldr	pc, [ip, #2720]!	; 0xaa0

00011678 <bfd_check_format@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #86016	; 0x15000
   11680:	ldr	pc, [ip, #2712]!	; 0xa98

00011684 <bfd_openr_next_archived_file@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #86016	; 0x15000
   1168c:	ldr	pc, [ip, #2704]!	; 0xa90

00011690 <bfd_map_over_sections@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #86016	; 0x15000
   11698:	ldr	pc, [ip, #2696]!	; 0xa88

0001169c <fseek@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #86016	; 0x15000
   116a4:	ldr	pc, [ip, #2688]!	; 0xa80

000116a8 <__xstat64@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #86016	; 0x15000
   116b0:	ldr	pc, [ip, #2680]!	; 0xa78

000116b4 <fputs@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #86016	; 0x15000
   116bc:	ldr	pc, [ip, #2672]!	; 0xa70

000116c0 <abort@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #86016	; 0x15000
   116c8:	ldr	pc, [ip, #2664]!	; 0xa68

000116cc <close@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #86016	; 0x15000
   116d4:	ldr	pc, [ip, #2656]!	; 0xa60

000116d8 <__assert_fail@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #86016	; 0x15000
   116e0:	ldr	pc, [ip, #2648]!	; 0xa58

Disassembly of section .text:

000116e4 <.text>:
   116e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   116e8:	sub	sp, sp, #16
   116ec:	movw	r4, #30124	; 0x75ac
   116f0:	movt	r4, #2
   116f4:	str	r1, [sp, #8]
   116f8:	movw	r1, #23076	; 0x5a24
   116fc:	str	r0, [sp, #12]
   11700:	movt	r1, #1
   11704:	mov	r0, #5
   11708:	movw	r5, #29992	; 0x7528
   1170c:	bl	11600 <setlocale@plt>
   11710:	movw	r1, #23076	; 0x5a24
   11714:	mov	r0, #0
   11718:	movt	r1, #1
   1171c:	bl	11600 <setlocale@plt>
   11720:	movw	r0, #24124	; 0x5e3c
   11724:	movw	r1, #24136	; 0x5e48
   11728:	movt	r0, #1
   1172c:	movt	r1, #1
   11730:	movw	r7, #29020	; 0x715c
   11734:	bl	1166c <bindtextdomain@plt>
   11738:	movw	r0, #24124	; 0x5e3c
   1173c:	movt	r0, #1
   11740:	movw	r6, #29984	; 0x7520
   11744:	bl	11438 <textdomain@plt>
   11748:	ldr	r3, [sp, #8]
   1174c:	movt	r5, #2
   11750:	movt	r7, #2
   11754:	movt	r6, #2
   11758:	mov	r8, #1
   1175c:	ldr	r3, [r3]
   11760:	mov	r0, r3
   11764:	str	r3, [r4]
   11768:	bl	1148c <xmalloc_set_program_name@plt>
   1176c:	ldr	r0, [r4]
   11770:	bl	115f4 <bfd_set_error_program_name@plt>
   11774:	add	r0, sp, #12
   11778:	add	r1, sp, #8
   1177c:	bl	13c84 <__assert_fail@plt+0x25ac>
   11780:	bl	114bc <bfd_init@plt>
   11784:	bl	12a08 <__assert_fail@plt+0x1330>
   11788:	mov	r4, #0
   1178c:	ldr	r0, [sp, #12]
   11790:	movw	r2, #24212	; 0x5e94
   11794:	ldr	r1, [sp, #8]
   11798:	movt	r2, #1
   1179c:	str	r4, [sp]
   117a0:	ldr	r3, [pc, #1192]	; 11c50 <__assert_fail@plt+0x578>
   117a4:	bl	1154c <getopt_long@plt>
   117a8:	cmn	r0, #1
   117ac:	beq	11ae4 <__assert_fail@plt+0x40c>
   117b0:	sub	r0, r0, #63	; 0x3f
   117b4:	cmp	r0, #139	; 0x8b
   117b8:	ldrls	pc, [pc, r0, lsl #2]
   117bc:	b	1178c <__assert_fail@plt+0xb4>
   117c0:	andeq	r1, r1, r8, lsr sl
   117c4:	andeq	r1, r1, ip, lsl #15
   117c8:	andeq	r1, r1, ip, asr sl
   117cc:	andeq	r1, r1, r4, asr sl
   117d0:	andeq	r1, r1, ip, lsl #15
   117d4:	andeq	r1, r1, ip, lsl #15
   117d8:	andeq	r1, r1, ip, lsl #15
   117dc:	andeq	r1, r1, ip, lsl #15
   117e0:	andeq	r1, r1, ip, lsl #15
   117e4:	andeq	r1, r1, r8, lsr sl
   117e8:	andeq	r1, r1, ip, lsl #15
   117ec:	andeq	r1, r1, ip, lsl #15
   117f0:	andeq	r1, r1, ip, lsl #15
   117f4:	andeq	r1, r1, ip, lsl #15
   117f8:	andeq	r1, r1, ip, lsl #15
   117fc:	andeq	r1, r1, ip, lsl #15
   11800:	andeq	r1, r1, ip, lsl #15
   11804:	andeq	r1, r1, ip, lsl #15
   11808:	andeq	r1, r1, ip, lsl #15
   1180c:	andeq	r1, r1, ip, lsl #15
   11810:	andeq	r1, r1, ip, lsl #15
   11814:	andeq	r1, r1, ip, lsl #15
   11818:	andeq	r1, r1, ip, lsl #15
   1181c:	andeq	r1, r1, r4, asr #21
   11820:	andeq	r1, r1, ip, lsl #15
   11824:	andeq	r1, r1, ip, lsl #15
   11828:	andeq	r1, r1, ip, lsl #15
   1182c:	andeq	r1, r1, ip, lsl #15
   11830:	andeq	r1, r1, ip, lsl #15
   11834:	andeq	r1, r1, ip, lsl #15
   11838:	andeq	r1, r1, ip, lsl #15
   1183c:	andeq	r1, r1, ip, lsl #15
   11840:	andeq	r1, r1, ip, lsl #15
   11844:	andeq	r1, r1, ip, lsl #15
   11848:	andeq	r1, r1, ip, lsl #15
   1184c:	andeq	r1, r1, ip, lsl #15
   11850:	andeq	r1, r1, ip, lsl #15
   11854:	andeq	r1, r1, r8, lsl #21
   11858:	andeq	r1, r1, ip, lsl #15
   1185c:	andeq	r1, r1, ip, lsl #15
   11860:	andeq	r1, r1, ip, lsl #15
   11864:	andeq	r1, r1, r8, lsr sl
   11868:	andeq	r1, r1, ip, lsl #15
   1186c:	andeq	r1, r1, ip, lsl #15
   11870:	andeq	r1, r1, ip, lsl #15
   11874:	andeq	r1, r1, ip, lsl #15
   11878:	andeq	r1, r1, ip, lsl #15
   1187c:	andeq	r1, r1, ip, lsl #15
   11880:			; <UNDEFINED> instruction: 0x00011ab0
   11884:	andeq	r1, r1, ip, lsl #15
   11888:	andeq	r1, r1, ip, lsl #15
   1188c:	andeq	r1, r1, ip, lsl #15
   11890:	andeq	r1, r1, ip, lsl #15
   11894:	andeq	r1, r1, ip, asr #21
   11898:	andeq	r1, r1, ip, lsl #15
   1189c:	andeq	r1, r1, r4, asr #21
   118a0:	andeq	r1, r1, ip, lsl #15
   118a4:	muleq	r1, r4, sl
   118a8:	andeq	r1, r1, ip, lsl #15
   118ac:	andeq	r1, r1, ip, lsl #15
   118b0:	andeq	r1, r1, ip, lsl #15
   118b4:	andeq	r1, r1, ip, lsl #15
   118b8:	andeq	r1, r1, ip, lsl #15
   118bc:	andeq	r1, r1, ip, lsl #15
   118c0:	andeq	r1, r1, ip, lsl #15
   118c4:	andeq	r1, r1, ip, lsl #15
   118c8:	andeq	r1, r1, ip, lsl #15
   118cc:	andeq	r1, r1, ip, lsl #15
   118d0:	andeq	r1, r1, ip, lsl #15
   118d4:	andeq	r1, r1, ip, lsl #15
   118d8:	andeq	r1, r1, ip, lsl #15
   118dc:	andeq	r1, r1, ip, lsl #15
   118e0:	andeq	r1, r1, ip, lsl #15
   118e4:	andeq	r1, r1, ip, lsl #15
   118e8:	andeq	r1, r1, ip, lsl #15
   118ec:	andeq	r1, r1, ip, lsl #15
   118f0:	andeq	r1, r1, ip, lsl #15
   118f4:	andeq	r1, r1, ip, lsl #15
   118f8:	andeq	r1, r1, ip, lsl #15
   118fc:	andeq	r1, r1, ip, lsl #15
   11900:	andeq	r1, r1, ip, lsl #15
   11904:	andeq	r1, r1, ip, lsl #15
   11908:	andeq	r1, r1, ip, lsl #15
   1190c:	andeq	r1, r1, ip, lsl #15
   11910:	andeq	r1, r1, ip, lsl #15
   11914:	andeq	r1, r1, ip, lsl #15
   11918:	andeq	r1, r1, ip, lsl #15
   1191c:	andeq	r1, r1, ip, lsl #15
   11920:	andeq	r1, r1, ip, lsl #15
   11924:	andeq	r1, r1, ip, lsl #15
   11928:	andeq	r1, r1, ip, lsl #15
   1192c:	andeq	r1, r1, ip, lsl #15
   11930:	andeq	r1, r1, ip, lsl #15
   11934:	andeq	r1, r1, ip, lsl #15
   11938:	andeq	r1, r1, ip, lsl #15
   1193c:	andeq	r1, r1, ip, lsl #15
   11940:	andeq	r1, r1, ip, lsl #15
   11944:	andeq	r1, r1, ip, lsl #15
   11948:	andeq	r1, r1, ip, lsl #15
   1194c:	andeq	r1, r1, ip, lsl #15
   11950:	andeq	r1, r1, ip, lsl #15
   11954:	andeq	r1, r1, ip, lsl #15
   11958:	andeq	r1, r1, ip, lsl #15
   1195c:	andeq	r1, r1, ip, lsl #15
   11960:	andeq	r1, r1, ip, lsl #15
   11964:	andeq	r1, r1, ip, lsl #15
   11968:	andeq	r1, r1, ip, lsl #15
   1196c:	andeq	r1, r1, ip, lsl #15
   11970:	andeq	r1, r1, ip, lsl #15
   11974:	andeq	r1, r1, ip, lsl #15
   11978:	andeq	r1, r1, ip, lsl #15
   1197c:	andeq	r1, r1, ip, lsl #15
   11980:	andeq	r1, r1, ip, lsl #15
   11984:	andeq	r1, r1, ip, lsl #15
   11988:	andeq	r1, r1, ip, lsl #15
   1198c:	andeq	r1, r1, ip, lsl #15
   11990:	andeq	r1, r1, ip, lsl #15
   11994:	andeq	r1, r1, ip, lsl #15
   11998:	andeq	r1, r1, ip, lsl #15
   1199c:	andeq	r1, r1, ip, lsl #15
   119a0:	andeq	r1, r1, ip, lsl #15
   119a4:	andeq	r1, r1, ip, lsl #15
   119a8:	andeq	r1, r1, ip, lsl #15
   119ac:	andeq	r1, r1, ip, lsl #15
   119b0:	andeq	r1, r1, ip, lsl #15
   119b4:	andeq	r1, r1, ip, lsl #15
   119b8:	andeq	r1, r1, ip, lsl #15
   119bc:	andeq	r1, r1, ip, lsl #15
   119c0:	andeq	r1, r1, ip, lsl #15
   119c4:	andeq	r1, r1, ip, lsl #15
   119c8:	andeq	r1, r1, ip, lsl #15
   119cc:	andeq	r1, r1, ip, lsl #15
   119d0:	andeq	r1, r1, ip, lsl #15
   119d4:	andeq	r1, r1, ip, lsl #15
   119d8:	andeq	r1, r1, ip, lsl #15
   119dc:	andeq	r1, r1, ip, lsl #15
   119e0:	andeq	r1, r1, ip, lsl #15
   119e4:	strdeq	r1, [r1], -r0
   119e8:	andeq	r1, r1, r8, ror #20
   119ec:			; <UNDEFINED> instruction: 0x00011ab8
   119f0:	ldr	r3, [r6]
   119f4:	movw	r4, #29984	; 0x7520
   119f8:	movt	r4, #2
   119fc:	ldrb	r3, [r3]
   11a00:	cmp	r3, #83	; 0x53
   11a04:	beq	11a5c <__assert_fail@plt+0x384>
   11a08:	bls	11a4c <__assert_fail@plt+0x374>
   11a0c:	cmp	r3, #98	; 0x62
   11a10:	beq	11a54 <__assert_fail@plt+0x37c>
   11a14:	cmp	r3, #115	; 0x73
   11a18:	beq	11a5c <__assert_fail@plt+0x384>
   11a1c:	movw	r1, #24156	; 0x5e5c
   11a20:	movt	r1, #1
   11a24:	mov	r0, #0
   11a28:	mov	r2, #5
   11a2c:	bl	113fc <dcgettext@plt>
   11a30:	ldr	r1, [r4]
   11a34:	bl	129b4 <__assert_fail@plt+0x12dc>
   11a38:	movw	r3, #29164	; 0x71ec
   11a3c:	movt	r3, #2
   11a40:	mov	r1, #1
   11a44:	ldr	r0, [r3]
   11a48:	bl	11dec <__assert_fail@plt+0x714>
   11a4c:	cmp	r3, #66	; 0x42
   11a50:	bne	11a1c <__assert_fail@plt+0x344>
   11a54:	str	r8, [r7]
   11a58:	b	11788 <__assert_fail@plt+0xb0>
   11a5c:	mov	r3, #0
   11a60:	str	r3, [r7]
   11a64:	b	11788 <__assert_fail@plt+0xb0>
   11a68:	ldr	r0, [r6]
   11a6c:	mov	r1, #0
   11a70:	mov	r2, #10
   11a74:	movw	r4, #29984	; 0x7520
   11a78:	bl	1136c <strtol@plt>
   11a7c:	movt	r4, #2
   11a80:	cmp	r0, #10
   11a84:	bne	11aa0 <__assert_fail@plt+0x3c8>
   11a88:	mov	r3, #0
   11a8c:	str	r3, [r5, #48]	; 0x30
   11a90:	b	11788 <__assert_fail@plt+0xb0>
   11a94:	mov	r3, #2
   11a98:	str	r3, [r5, #48]	; 0x30
   11a9c:	b	11788 <__assert_fail@plt+0xb0>
   11aa0:	cmp	r0, #16
   11aa4:	beq	11a94 <__assert_fail@plt+0x3bc>
   11aa8:	cmp	r0, #8
   11aac:	bne	11ad4 <__assert_fail@plt+0x3fc>
   11ab0:	str	r8, [r5, #48]	; 0x30
   11ab4:	b	11788 <__assert_fail@plt+0xb0>
   11ab8:	ldr	r3, [r6]
   11abc:	str	r3, [r5, #108]	; 0x6c
   11ac0:	b	11788 <__assert_fail@plt+0xb0>
   11ac4:	str	r8, [r5, #112]	; 0x70
   11ac8:	b	11788 <__assert_fail@plt+0xb0>
   11acc:	str	r8, [r5, #76]	; 0x4c
   11ad0:	b	11788 <__assert_fail@plt+0xb0>
   11ad4:	movw	r1, #24192	; 0x5e80
   11ad8:	mov	r0, #0
   11adc:	movt	r1, #1
   11ae0:	b	11a28 <__assert_fail@plt+0x350>
   11ae4:	movw	r8, #29992	; 0x7528
   11ae8:	movt	r8, #2
   11aec:	ldr	r3, [r8, #112]	; 0x70
   11af0:	cmp	r3, #0
   11af4:	bne	11c2c <__assert_fail@plt+0x554>
   11af8:	ldr	r3, [r8, #116]	; 0x74
   11afc:	cmp	r3, #0
   11b00:	bne	11c3c <__assert_fail@plt+0x564>
   11b04:	movw	r4, #29160	; 0x71e8
   11b08:	movt	r4, #2
   11b0c:	ldr	r2, [sp, #12]
   11b10:	ldr	r3, [r4]
   11b14:	cmp	r3, r2
   11b18:	beq	11c1c <__assert_fail@plt+0x544>
   11b1c:	bge	11b44 <__assert_fail@plt+0x46c>
   11b20:	ldr	r2, [sp, #8]
   11b24:	add	r1, r3, #1
   11b28:	str	r1, [r4]
   11b2c:	ldr	r0, [r2, r3, lsl #2]
   11b30:	bl	126c8 <__assert_fail@plt+0xff0>
   11b34:	ldr	r3, [r4]
   11b38:	ldr	r2, [sp, #12]
   11b3c:	cmp	r3, r2
   11b40:	blt	11b20 <__assert_fail@plt+0x448>
   11b44:	ldr	r3, [r8, #76]	; 0x4c
   11b48:	movw	r9, #29992	; 0x7528
   11b4c:	movt	r9, #2
   11b50:	cmp	r3, #0
   11b54:	beq	11c10 <__assert_fail@plt+0x538>
   11b58:	movw	r3, #29020	; 0x715c
   11b5c:	movt	r3, #2
   11b60:	ldr	r3, [r3]
   11b64:	cmp	r3, #0
   11b68:	beq	11c10 <__assert_fail@plt+0x538>
   11b6c:	ldrd	r6, [r9, #80]	; 0x50
   11b70:	movw	sl, #29976	; 0x7518
   11b74:	ldrd	r0, [r9, #88]	; 0x58
   11b78:	movt	sl, #2
   11b7c:	ldrd	r4, [r9, #96]	; 0x60
   11b80:	mov	r2, r6
   11b84:	mov	r3, r7
   11b88:	adds	r6, r6, r0
   11b8c:	mov	r0, #7
   11b90:	adds	r4, r4, r6
   11b94:	bl	11fec <__assert_fail@plt+0x914>
   11b98:	ldr	r1, [sl]
   11b9c:	mov	r0, #9
   11ba0:	bl	1145c <_IO_putc@plt>
   11ba4:	ldrd	r2, [r9, #88]	; 0x58
   11ba8:	mov	r0, #7
   11bac:	bl	11fec <__assert_fail@plt+0x914>
   11bb0:	ldr	r1, [sl]
   11bb4:	mov	r0, #9
   11bb8:	bl	1145c <_IO_putc@plt>
   11bbc:	ldrd	r2, [r9, #96]	; 0x60
   11bc0:	mov	r0, #7
   11bc4:	bl	11fec <__assert_fail@plt+0x914>
   11bc8:	ldr	r1, [r9, #48]	; 0x30
   11bcc:	movw	r2, #24000	; 0x5dc0
   11bd0:	movw	r3, #23988	; 0x5db4
   11bd4:	cmp	r1, #1
   11bd8:	movt	r2, #1
   11bdc:	movt	r3, #1
   11be0:	mov	r0, #1
   11be4:	movne	r1, r2
   11be8:	mov	r2, r4
   11bec:	moveq	r1, r3
   11bf0:	mov	r3, r4
   11bf4:	bl	115b8 <__printf_chk@plt>
   11bf8:	movw	r0, #24232	; 0x5ea8
   11bfc:	ldr	r3, [sl]
   11c00:	mov	r1, #1
   11c04:	movt	r0, #1
   11c08:	mov	r2, #9
   11c0c:	bl	11468 <fwrite@plt>
   11c10:	ldr	r0, [r8, #104]	; 0x68
   11c14:	add	sp, sp, #16
   11c18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c1c:	movw	r0, #24224	; 0x5ea0
   11c20:	movt	r0, #1
   11c24:	bl	126c8 <__assert_fail@plt+0xff0>
   11c28:	b	11b44 <__assert_fail@plt+0x46c>
   11c2c:	movw	r0, #24060	; 0x5dfc
   11c30:	movt	r0, #1
   11c34:	bl	13728 <__assert_fail@plt+0x2050>
   11c38:	b	11af8 <__assert_fail@plt+0x420>
   11c3c:	movw	r3, #29976	; 0x7518
   11c40:	movt	r3, #2
   11c44:	mov	r1, #0
   11c48:	ldr	r0, [r3]
   11c4c:	bl	11dec <__assert_fail@plt+0x714>
   11c50:	andeq	r7, r2, r0, ror #2
   11c54:	mov	fp, #0
   11c58:	mov	lr, #0
   11c5c:	pop	{r1}		; (ldr r1, [sp], #4)
   11c60:	mov	r2, sp
   11c64:	push	{r2}		; (str r2, [sp, #-4]!)
   11c68:	push	{r0}		; (str r0, [sp, #-4]!)
   11c6c:	ldr	ip, [pc, #16]	; 11c84 <__assert_fail@plt+0x5ac>
   11c70:	push	{ip}		; (str ip, [sp, #-4]!)
   11c74:	ldr	r0, [pc, #12]	; 11c88 <__assert_fail@plt+0x5b0>
   11c78:	ldr	r3, [pc, #12]	; 11c8c <__assert_fail@plt+0x5b4>
   11c7c:	bl	11510 <__libc_start_main@plt>
   11c80:	bl	116c0 <abort@plt>
   11c84:	strdeq	r5, [r1], -r0
   11c88:	andeq	r1, r1, r4, ror #13
   11c8c:	andeq	r5, r1, ip, lsl #19
   11c90:	ldr	r3, [pc, #20]	; 11cac <__assert_fail@plt+0x5d4>
   11c94:	ldr	r2, [pc, #20]	; 11cb0 <__assert_fail@plt+0x5d8>
   11c98:	add	r3, pc, r3
   11c9c:	ldr	r2, [r3, r2]
   11ca0:	cmp	r2, #0
   11ca4:	bxeq	lr
   11ca8:	b	11534 <__gmon_start__@plt>
   11cac:	andeq	r5, r1, r0, ror #6
   11cb0:	andeq	r0, r0, ip, asr #2
   11cb4:	push	{r3, lr}
   11cb8:	movw	r0, #29152	; 0x71e0
   11cbc:	ldr	r3, [pc, #36]	; 11ce8 <__assert_fail@plt+0x610>
   11cc0:	movt	r0, #2
   11cc4:	rsb	r3, r0, r3
   11cc8:	cmp	r3, #6
   11ccc:	popls	{r3, pc}
   11cd0:	movw	r3, #0
   11cd4:	movt	r3, #0
   11cd8:	cmp	r3, #0
   11cdc:	popeq	{r3, pc}
   11ce0:	blx	r3
   11ce4:	pop	{r3, pc}
   11ce8:	andeq	r7, r2, r3, ror #3
   11cec:	push	{r3, lr}
   11cf0:	movw	r0, #29152	; 0x71e0
   11cf4:	movw	r3, #29152	; 0x71e0
   11cf8:	movt	r0, #2
   11cfc:	movt	r3, #2
   11d00:	rsb	r3, r0, r3
   11d04:	asr	r3, r3, #2
   11d08:	add	r3, r3, r3, lsr #31
   11d0c:	asrs	r1, r3, #1
   11d10:	popeq	{r3, pc}
   11d14:	movw	r2, #0
   11d18:	movt	r2, #0
   11d1c:	cmp	r2, #0
   11d20:	popeq	{r3, pc}
   11d24:	blx	r2
   11d28:	pop	{r3, pc}
   11d2c:	push	{r4, lr}
   11d30:	movw	r4, #29988	; 0x7524
   11d34:	movt	r4, #2
   11d38:	ldrb	r3, [r4]
   11d3c:	cmp	r3, #0
   11d40:	popne	{r4, pc}
   11d44:	bl	11cb4 <__assert_fail@plt+0x5dc>
   11d48:	mov	r3, #1
   11d4c:	strb	r3, [r4]
   11d50:	pop	{r4, pc}
   11d54:	movw	r0, #28412	; 0x6efc
   11d58:	movt	r0, #2
   11d5c:	push	{r3, lr}
   11d60:	ldr	r3, [r0]
   11d64:	cmp	r3, #0
   11d68:	beq	11d80 <__assert_fail@plt+0x6a8>
   11d6c:	movw	r3, #0
   11d70:	movt	r3, #0
   11d74:	cmp	r3, #0
   11d78:	beq	11d80 <__assert_fail@plt+0x6a8>
   11d7c:	blx	r3
   11d80:	pop	{r3, lr}
   11d84:	b	11cec <__assert_fail@plt+0x614>
   11d88:	ldr	r0, [r1, #20]
   11d8c:	tst	r0, #1
   11d90:	bxeq	lr
   11d94:	tst	r0, #24
   11d98:	movw	ip, #29992	; 0x7528
   11d9c:	ldrd	r2, [r1, #48]	; 0x30
   11da0:	movt	ip, #2
   11da4:	bne	11dc4 <__assert_fail@plt+0x6ec>
   11da8:	tst	r0, #256	; 0x100
   11dac:	bne	11dd8 <__assert_fail@plt+0x700>
   11db0:	ldrd	r0, [ip, #16]
   11db4:	adds	r2, r2, r0
   11db8:	adc	r3, r3, r1
   11dbc:	strd	r2, [ip, #16]
   11dc0:	bx	lr
   11dc4:	ldrd	r0, [ip]
   11dc8:	adds	r2, r2, r0
   11dcc:	adc	r3, r3, r1
   11dd0:	strd	r2, [ip]
   11dd4:	bx	lr
   11dd8:	ldrd	r0, [ip, #8]
   11ddc:	adds	r2, r2, r0
   11de0:	adc	r3, r3, r1
   11de4:	strd	r2, [ip, #8]
   11de8:	bx	lr
   11dec:	push	{r4, r5, r6, lr}
   11df0:	mov	r2, #5
   11df4:	mov	r4, r0
   11df8:	mov	r6, r1
   11dfc:	mov	r0, #0
   11e00:	movw	r1, #23044	; 0x5a04
   11e04:	movt	r1, #1
   11e08:	movw	r5, #30124	; 0x75ac
   11e0c:	bl	113fc <dcgettext@plt>
   11e10:	movt	r5, #2
   11e14:	mov	r1, #1
   11e18:	ldr	r3, [r5]
   11e1c:	mov	r2, r0
   11e20:	mov	r0, r4
   11e24:	bl	115c4 <__fprintf_chk@plt>
   11e28:	mov	r2, #5
   11e2c:	movw	r1, #23080	; 0x5a28
   11e30:	mov	r0, #0
   11e34:	movt	r1, #1
   11e38:	bl	113fc <dcgettext@plt>
   11e3c:	mov	r1, #1
   11e40:	mov	r2, r0
   11e44:	mov	r0, r4
   11e48:	bl	115c4 <__fprintf_chk@plt>
   11e4c:	mov	r2, #5
   11e50:	movw	r1, #23136	; 0x5a60
   11e54:	mov	r0, #0
   11e58:	movt	r1, #1
   11e5c:	bl	113fc <dcgettext@plt>
   11e60:	mov	r1, #1
   11e64:	mov	r2, r0
   11e68:	mov	r0, r4
   11e6c:	bl	115c4 <__fprintf_chk@plt>
   11e70:	mov	r2, #5
   11e74:	movw	r1, #23192	; 0x5a98
   11e78:	mov	r0, #0
   11e7c:	movt	r1, #1
   11e80:	bl	113fc <dcgettext@plt>
   11e84:	mov	r1, #1
   11e88:	movw	r3, #23776	; 0x5ce0
   11e8c:	movt	r3, #1
   11e90:	mov	r2, r0
   11e94:	mov	r0, r4
   11e98:	bl	115c4 <__fprintf_chk@plt>
   11e9c:	ldr	r0, [r5]
   11ea0:	mov	r1, r4
   11ea4:	bl	12ae0 <__assert_fail@plt+0x1408>
   11ea8:	cmp	r6, #0
   11eac:	beq	11eb8 <__assert_fail@plt+0x7e0>
   11eb0:	mov	r0, r6
   11eb4:	bl	11558 <exit@plt>
   11eb8:	mov	r0, r6
   11ebc:	mov	r2, #5
   11ec0:	movw	r1, #23788	; 0x5cec
   11ec4:	movt	r1, #1
   11ec8:	bl	113fc <dcgettext@plt>
   11ecc:	movw	r3, #23808	; 0x5d00
   11ed0:	mov	r1, #1
   11ed4:	movt	r3, #1
   11ed8:	mov	r2, r0
   11edc:	mov	r0, r4
   11ee0:	bl	115c4 <__fprintf_chk@plt>
   11ee4:	b	11eb0 <__assert_fail@plt+0x7d8>
   11ee8:	ldr	r3, [pc, #116]	; 11f64 <__assert_fail@plt+0x88c>
   11eec:	push	{r4, r5, r6, r7, r8, lr}
   11ef0:	cmp	r1, r3
   11ef4:	mov	r6, r1
   11ef8:	ldrd	r4, [r1, #48]	; 0x30
   11efc:	popeq	{r4, r5, r6, r7, r8, pc}
   11f00:	ldr	r2, [r1, #20]
   11f04:	tst	r2, #4096	; 0x1000
   11f08:	popne	{r4, r5, r6, r7, r8, pc}
   11f0c:	sub	r3, r3, #200	; 0xc8
   11f10:	cmp	r1, r3
   11f14:	popeq	{r4, r5, r6, r7, r8, pc}
   11f18:	ldr	r0, [r1]
   11f1c:	movw	r8, #29992	; 0x7528
   11f20:	bl	11570 <strlen@plt>
   11f24:	movw	ip, #29992	; 0x7528
   11f28:	movt	ip, #2
   11f2c:	movt	r8, #2
   11f30:	ldr	r3, [ip, #24]
   11f34:	cmp	r0, r3
   11f38:	ldrd	r2, [ip, #32]
   11f3c:	strgt	r0, [ip, #24]
   11f40:	ldrd	r0, [r6, #32]
   11f44:	adds	r4, r4, r2
   11f48:	ldrd	r6, [ip, #40]	; 0x28
   11f4c:	adc	r5, r5, r3
   11f50:	strd	r4, [ip, #32]
   11f54:	cmp	r1, r7
   11f58:	cmpeq	r0, r6
   11f5c:	strdhi	r0, [r8, #40]	; 0x28
   11f60:	pop	{r4, r5, r6, r7, r8, pc}
   11f64:	andeq	r7, r2, r8, lsl #7
   11f68:	movw	r3, #29992	; 0x7528
   11f6c:	movt	r3, #2
   11f70:	push	{r4, lr}
   11f74:	movw	r4, #29152	; 0x71e0
   11f78:	movt	r4, #2
   11f7c:	ldr	r2, [r3, #48]	; 0x30
   11f80:	sub	sp, sp, #56	; 0x38
   11f84:	ldr	r3, [r4]
   11f88:	cmp	r2, #0
   11f8c:	str	r3, [sp, #52]	; 0x34
   11f90:	movweq	r3, #23856	; 0x5d30
   11f94:	movteq	r3, #1
   11f98:	beq	11fb4 <__assert_fail@plt+0x8dc>
   11f9c:	movw	ip, #23848	; 0x5d28
   11fa0:	cmp	r2, #1
   11fa4:	movt	ip, #1
   11fa8:	movw	r3, #23864	; 0x5d38
   11fac:	movt	r3, #1
   11fb0:	movne	r3, ip
   11fb4:	strd	r0, [sp]
   11fb8:	mov	r2, #40	; 0x28
   11fbc:	mov	r1, #1
   11fc0:	add	r0, sp, #12
   11fc4:	bl	115a0 <__sprintf_chk@plt>
   11fc8:	add	r0, sp, #12
   11fcc:	bl	11570 <strlen@plt>
   11fd0:	ldr	r2, [sp, #52]	; 0x34
   11fd4:	ldr	r3, [r4]
   11fd8:	cmp	r2, r3
   11fdc:	bne	11fe8 <__assert_fail@plt+0x910>
   11fe0:	add	sp, sp, #56	; 0x38
   11fe4:	pop	{r4, pc}
   11fe8:	bl	11414 <__stack_chk_fail@plt>
   11fec:	movw	r1, #29992	; 0x7528
   11ff0:	movt	r1, #2
   11ff4:	push	{r4, r5, lr}
   11ff8:	movw	r4, #29152	; 0x71e0
   11ffc:	movt	r4, #2
   12000:	ldr	ip, [r1, #48]	; 0x30
   12004:	sub	sp, sp, #60	; 0x3c
   12008:	mov	r5, r0
   1200c:	ldr	r1, [r4]
   12010:	cmp	ip, #0
   12014:	str	r1, [sp, #52]	; 0x34
   12018:	movweq	r1, #23856	; 0x5d30
   1201c:	movteq	r1, #1
   12020:	beq	1203c <__assert_fail@plt+0x964>
   12024:	movw	lr, #23848	; 0x5d28
   12028:	cmp	ip, #1
   1202c:	movt	lr, #1
   12030:	movw	r1, #23864	; 0x5d38
   12034:	movt	r1, #1
   12038:	movne	r1, lr
   1203c:	strd	r2, [sp]
   12040:	add	r0, sp, #12
   12044:	mov	r3, r1
   12048:	mov	r2, #40	; 0x28
   1204c:	mov	r1, #1
   12050:	bl	115a0 <__sprintf_chk@plt>
   12054:	add	r3, sp, #12
   12058:	mov	r2, r5
   1205c:	movw	r1, #23872	; 0x5d40
   12060:	mov	r0, #1
   12064:	movt	r1, #1
   12068:	bl	115b8 <__printf_chk@plt>
   1206c:	ldr	r2, [sp, #52]	; 0x34
   12070:	ldr	r3, [r4]
   12074:	cmp	r2, r3
   12078:	bne	12084 <__assert_fail@plt+0x9ac>
   1207c:	add	sp, sp, #60	; 0x3c
   12080:	pop	{r4, r5, pc}
   12084:	bl	11414 <__stack_chk_fail@plt>
   12088:	push	{r4, r5, r6, r7, r8, lr}
   1208c:	movw	r8, #29992	; 0x7528
   12090:	movt	r8, #2
   12094:	ldrd	r4, [sp, #24]
   12098:	mov	r6, r2
   1209c:	mov	r7, r3
   120a0:	ldr	r2, [r8, #24]
   120a4:	mov	r3, r0
   120a8:	movw	r1, #23876	; 0x5d44
   120ac:	mov	r0, #1
   120b0:	movt	r1, #1
   120b4:	bl	115b8 <__printf_chk@plt>
   120b8:	mov	r2, r6
   120bc:	mov	r3, r7
   120c0:	ldr	r0, [r8, #52]	; 0x34
   120c4:	bl	11fec <__assert_fail@plt+0x914>
   120c8:	movw	r1, #23880	; 0x5d48
   120cc:	mov	r0, #1
   120d0:	movt	r1, #1
   120d4:	bl	115b8 <__printf_chk@plt>
   120d8:	ldr	r0, [r8, #56]	; 0x38
   120dc:	mov	r2, r4
   120e0:	mov	r3, r5
   120e4:	bl	11fec <__assert_fail@plt+0x914>
   120e8:	mov	r0, #10
   120ec:	pop	{r4, r5, r6, r7, r8, lr}
   120f0:	b	115ac <putchar@plt>
   120f4:	ldr	r3, [pc, #96]	; 1215c <__assert_fail@plt+0xa84>
   120f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   120fc:	cmp	r1, r3
   12100:	sub	sp, sp, #12
   12104:	ldrd	r8, [r1, #48]	; 0x30
   12108:	beq	12154 <__assert_fail@plt+0xa7c>
   1210c:	ldr	r2, [r1, #20]
   12110:	tst	r2, #4096	; 0x1000
   12114:	bne	12154 <__assert_fail@plt+0xa7c>
   12118:	sub	r3, r3, #200	; 0xc8
   1211c:	cmp	r1, r3
   12120:	beq	12154 <__assert_fail@plt+0xa7c>
   12124:	movw	ip, #29992	; 0x7528
   12128:	movt	ip, #2
   1212c:	ldrd	r6, [r1, #32]
   12130:	mov	r2, r8
   12134:	ldrd	r4, [ip, #32]
   12138:	mov	r3, r9
   1213c:	ldr	r0, [r1]
   12140:	adds	r4, r4, r8
   12144:	strd	r6, [sp]
   12148:	adc	r5, r5, r9
   1214c:	strd	r4, [ip, #32]
   12150:	bl	12088 <__assert_fail@plt+0x9b0>
   12154:	add	sp, sp, #12
   12158:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1215c:	andeq	r7, r2, r8, lsl #7
   12160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12164:	movw	r4, #29992	; 0x7528
   12168:	movt	r4, #2
   1216c:	sub	sp, sp, #20
   12170:	mov	r5, r0
   12174:	ldr	r3, [r4, #60]	; 0x3c
   12178:	cmp	r3, #0
   1217c:	bne	1249c <__assert_fail@plt+0xdc4>
   12180:	movw	r3, #29020	; 0x715c
   12184:	movt	r3, #2
   12188:	ldr	r3, [r3]
   1218c:	cmp	r3, #0
   12190:	bne	12354 <__assert_fail@plt+0xc7c>
   12194:	mov	r2, r3
   12198:	movw	r1, #7912	; 0x1ee8
   1219c:	mov	r0, r5
   121a0:	movt	r1, #1
   121a4:	str	r3, [r4, #24]
   121a8:	mov	r6, #0
   121ac:	mov	r7, #0
   121b0:	strd	r6, [r4, #32]
   121b4:	strd	r6, [r4, #40]	; 0x28
   121b8:	bl	11690 <bfd_map_over_sections@plt>
   121bc:	ldr	r3, [r4, #60]	; 0x3c
   121c0:	movw	r8, #29992	; 0x7528
   121c4:	movt	r8, #2
   121c8:	cmp	r3, #0
   121cc:	beq	121f4 <__assert_fail@plt+0xb1c>
   121d0:	ldr	r3, [r8, #24]
   121d4:	ldrd	r0, [r4, #64]	; 0x40
   121d8:	cmp	r3, #4
   121dc:	movle	r3, #5
   121e0:	strle	r3, [r8, #24]
   121e4:	ldrd	r2, [r4, #32]
   121e8:	adds	r2, r2, r0
   121ec:	adc	r3, r3, r1
   121f0:	strd	r2, [r4, #32]
   121f4:	ldrd	r0, [r4, #40]	; 0x28
   121f8:	movw	r6, #29992	; 0x7528
   121fc:	bl	11f68 <__assert_fail@plt+0x890>
   12200:	movt	r6, #2
   12204:	mov	r7, #0
   12208:	cmp	r0, #3
   1220c:	strhi	r0, [r6, #56]	; 0x38
   12210:	ldrd	r0, [r4, #32]
   12214:	movls	r3, #4
   12218:	strls	r3, [r6, #56]	; 0x38
   1221c:	bl	11f68 <__assert_fail@plt+0x890>
   12220:	movw	r6, #29992	; 0x7528
   12224:	movt	r6, #2
   12228:	ldr	r2, [r5]
   1222c:	movw	r1, #24024	; 0x5dd8
   12230:	movt	r1, #1
   12234:	cmp	r0, #3
   12238:	strhi	r0, [r6, #52]	; 0x34
   1223c:	mov	r0, #1
   12240:	movls	r3, #4
   12244:	strls	r3, [r6, #52]	; 0x34
   12248:	mov	r6, #0
   1224c:	strd	r6, [r4, #32]
   12250:	bl	115b8 <__printf_chk@plt>
   12254:	ldr	r3, [r5, #148]	; 0x94
   12258:	cmp	r3, #0
   1225c:	beq	12274 <__assert_fail@plt+0xb9c>
   12260:	movw	r1, #24012	; 0x5dcc
   12264:	ldr	r2, [r3]
   12268:	mov	r0, #1
   1226c:	movt	r1, #1
   12270:	bl	115b8 <__printf_chk@plt>
   12274:	ldr	ip, [r4, #52]	; 0x34
   12278:	movw	r1, #24060	; 0x5dfc
   1227c:	ldr	r0, [r4, #56]	; 0x38
   12280:	movt	r1, #1
   12284:	ldr	r2, [r4, #24]
   12288:	movw	r3, #24068	; 0x5e04
   1228c:	str	r1, [sp, #4]
   12290:	movt	r3, #1
   12294:	str	ip, [sp]
   12298:	movw	r1, #24032	; 0x5de0
   1229c:	str	r3, [sp, #12]
   122a0:	movt	r1, #1
   122a4:	str	r0, [sp, #8]
   122a8:	movw	r3, #24052	; 0x5df4
   122ac:	mov	r0, #1
   122b0:	movt	r3, #1
   122b4:	bl	115b8 <__printf_chk@plt>
   122b8:	mov	r0, r5
   122bc:	movw	r1, #8436	; 0x20f4
   122c0:	mov	r2, #0
   122c4:	movt	r1, #1
   122c8:	movw	r8, #29992	; 0x7528
   122cc:	bl	11690 <bfd_map_over_sections@plt>
   122d0:	ldr	r3, [r4, #60]	; 0x3c
   122d4:	movt	r8, #2
   122d8:	cmp	r3, #0
   122dc:	bne	1231c <__assert_fail@plt+0xc44>
   122e0:	ldr	r2, [r4, #24]
   122e4:	movw	r1, #23876	; 0x5d44
   122e8:	movw	r3, #24084	; 0x5e14
   122ec:	movt	r1, #1
   122f0:	movt	r3, #1
   122f4:	mov	r0, #1
   122f8:	bl	115b8 <__printf_chk@plt>
   122fc:	ldr	r0, [r4, #52]	; 0x34
   12300:	ldrd	r2, [r4, #32]
   12304:	bl	11fec <__assert_fail@plt+0x914>
   12308:	movw	r0, #23772	; 0x5cdc
   1230c:	movt	r0, #1
   12310:	add	sp, sp, #20
   12314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12318:	b	114f8 <puts@plt>
   1231c:	ldrd	r6, [r8, #64]	; 0x40
   12320:	mov	sl, #0
   12324:	mov	fp, #0
   12328:	strd	sl, [sp]
   1232c:	ldrd	sl, [r8, #32]
   12330:	movw	r0, #24076	; 0x5e0c
   12334:	mov	r2, r6
   12338:	mov	r3, r7
   1233c:	adds	r6, r6, sl
   12340:	movt	r0, #1
   12344:	adc	r7, r7, fp
   12348:	strd	r6, [r8, #32]
   1234c:	bl	12088 <__assert_fail@plt+0x9b0>
   12350:	b	122e0 <__assert_fail@plt+0xc08>
   12354:	mov	r0, r5
   12358:	mov	r2, #0
   1235c:	movw	r1, #7560	; 0x1d88
   12360:	movt	r1, #1
   12364:	mov	r6, #0
   12368:	mov	r7, #0
   1236c:	strd	r6, [r4, #16]
   12370:	movw	r8, #29992	; 0x7528
   12374:	strd	r6, [r4, #8]
   12378:	movt	r8, #2
   1237c:	strd	r6, [r4]
   12380:	bl	11690 <bfd_map_over_sections@plt>
   12384:	ldrd	r2, [r4, #16]
   12388:	ldrd	r0, [r4, #64]	; 0x40
   1238c:	ldr	ip, [r4, #72]	; 0x48
   12390:	adds	sl, r0, r2
   12394:	adc	fp, r1, r3
   12398:	cmp	ip, #0
   1239c:	strd	sl, [r4, #16]
   123a0:	add	ip, ip, #1
   123a4:	str	ip, [r4, #72]	; 0x48
   123a8:	bne	123d4 <__assert_fail@plt+0xcfc>
   123ac:	ldr	r0, [r8, #48]	; 0x30
   123b0:	movw	r2, #23936	; 0x5d80
   123b4:	movw	r3, #23884	; 0x5d4c
   123b8:	movt	r2, #1
   123bc:	cmp	r0, #1
   123c0:	movt	r3, #1
   123c4:	movne	r0, r2
   123c8:	moveq	r0, r3
   123cc:	bl	114f8 <puts@plt>
   123d0:	ldrd	sl, [r4, #16]
   123d4:	ldrd	r2, [r4]
   123d8:	movw	ip, #29992	; 0x7528
   123dc:	ldrd	r8, [r4, #8]
   123e0:	movt	ip, #2
   123e4:	ldr	r1, [r4, #76]	; 0x4c
   123e8:	adds	r6, r8, r2
   123ec:	adds	r6, r6, sl
   123f0:	cmp	r1, #0
   123f4:	bne	12544 <__assert_fail@plt+0xe6c>
   123f8:	movw	r7, #29976	; 0x7518
   123fc:	movt	r7, #2
   12400:	mov	r0, #7
   12404:	bl	11fec <__assert_fail@plt+0x914>
   12408:	ldr	r1, [r7]
   1240c:	mov	r0, #9
   12410:	bl	1145c <_IO_putc@plt>
   12414:	ldrd	r2, [r4, #8]
   12418:	mov	r0, #7
   1241c:	bl	11fec <__assert_fail@plt+0x914>
   12420:	ldr	r1, [r7]
   12424:	mov	r0, #9
   12428:	bl	1145c <_IO_putc@plt>
   1242c:	ldrd	r2, [r4, #16]
   12430:	mov	r0, #7
   12434:	bl	11fec <__assert_fail@plt+0x914>
   12438:	ldr	r1, [r4, #48]	; 0x30
   1243c:	movw	r2, #24000	; 0x5dc0
   12440:	movw	r3, #23988	; 0x5db4
   12444:	cmp	r1, #1
   12448:	movt	r2, #1
   1244c:	movt	r3, #1
   12450:	mov	r0, #1
   12454:	movne	r1, r2
   12458:	mov	r2, r6
   1245c:	moveq	r1, r3
   12460:	mov	r3, r6
   12464:	bl	115b8 <__printf_chk@plt>
   12468:	ldr	r1, [r7]
   1246c:	ldr	r0, [r5]
   12470:	bl	116b4 <fputs@plt>
   12474:	ldr	r3, [r5, #148]	; 0x94
   12478:	cmp	r3, #0
   1247c:	beq	12578 <__assert_fail@plt+0xea0>
   12480:	ldr	r2, [r3]
   12484:	movw	r1, #24012	; 0x5dcc
   12488:	mov	r0, #1
   1248c:	movt	r1, #1
   12490:	add	sp, sp, #20
   12494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12498:	b	115b8 <__printf_chk@plt>
   1249c:	ldr	r1, [r0, #40]	; 0x28
   124a0:	mov	r3, #0
   124a4:	mov	r2, #0
   124a8:	strd	r2, [r4, #64]	; 0x40
   124ac:	ubfx	r3, r1, #5, #20
   124b0:	and	r3, r3, #82	; 0x52
   124b4:	cmp	r3, #16
   124b8:	bne	12180 <__assert_fail@plt+0xaa8>
   124bc:	ldr	r3, [r0, #4]
   124c0:	ldr	r3, [r3, #260]	; 0x104
   124c4:	blx	r3
   124c8:	subs	r9, r0, #0
   124cc:	blt	1258c <__assert_fail@plt+0xeb4>
   124d0:	bne	12580 <__assert_fail@plt+0xea8>
   124d4:	ldr	r3, [r5, #4]
   124d8:	mov	r0, r5
   124dc:	mov	r1, r9
   124e0:	ldr	r3, [r3, #264]	; 0x108
   124e4:	blx	r3
   124e8:	cmp	r0, #0
   124ec:	blt	1258c <__assert_fail@plt+0xeb4>
   124f0:	ldrd	r2, [r4, #64]	; 0x40
   124f4:	add	r8, r9, r0, lsl #2
   124f8:	subs	r0, r0, #1
   124fc:	bcc	12534 <__assert_fail@plt+0xe5c>
   12500:	ldr	r1, [r8, #-4]!
   12504:	ldr	ip, [r1, #20]
   12508:	ldr	ip, [ip, #20]
   1250c:	tst	ip, #4096	; 0x1000
   12510:	beq	124f8 <__assert_fail@plt+0xe20>
   12514:	ldr	ip, [r1, #16]
   12518:	tst	ip, #256	; 0x100
   1251c:	bne	124f8 <__assert_fail@plt+0xe20>
   12520:	ldrd	r6, [r1, #8]
   12524:	adds	r2, r2, r6
   12528:	adc	r3, r3, r7
   1252c:	subs	r0, r0, #1
   12530:	bcs	12500 <__assert_fail@plt+0xe28>
   12534:	mov	r0, r9
   12538:	strd	r2, [r4, #64]	; 0x40
   1253c:	bl	113b4 <free@plt>
   12540:	b	12180 <__assert_fail@plt+0xaa8>
   12544:	ldrd	r0, [ip, #80]	; 0x50
   12548:	adds	r0, r0, r2
   1254c:	adc	r1, r1, r3
   12550:	strd	r0, [ip, #80]	; 0x50
   12554:	ldrd	r0, [ip, #88]	; 0x58
   12558:	adds	r8, r8, r0
   1255c:	adc	r9, r9, r1
   12560:	ldrd	r0, [ip, #96]	; 0x60
   12564:	strd	r8, [ip, #88]	; 0x58
   12568:	adds	r0, r0, sl
   1256c:	adc	r1, r1, fp
   12570:	strd	r0, [ip, #96]	; 0x60
   12574:	b	123f8 <__assert_fail@plt+0xd20>
   12578:	add	sp, sp, #20
   1257c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12580:	bl	11474 <xmalloc@plt>
   12584:	mov	r9, r0
   12588:	b	124d4 <__assert_fail@plt+0xdfc>
   1258c:	ldr	r0, [r5]
   12590:	bl	12904 <__assert_fail@plt+0x122c>
   12594:	push	{r4, r5, lr}
   12598:	movw	r4, #29152	; 0x71e0
   1259c:	movt	r4, #2
   125a0:	sub	sp, sp, #12
   125a4:	mov	r1, #2
   125a8:	mov	r5, r0
   125ac:	ldr	r3, [r4]
   125b0:	str	r3, [sp, #4]
   125b4:	bl	11678 <bfd_check_format@plt>
   125b8:	cmp	r0, #0
   125bc:	beq	125d8 <__assert_fail@plt+0xf00>
   125c0:	ldr	r2, [sp, #4]
   125c4:	ldr	r3, [r4]
   125c8:	cmp	r2, r3
   125cc:	bne	126c4 <__assert_fail@plt+0xfec>
   125d0:	add	sp, sp, #12
   125d4:	pop	{r4, r5, pc}
   125d8:	mov	r0, r5
   125dc:	mov	r1, #1
   125e0:	mov	r2, sp
   125e4:	bl	11648 <bfd_check_format_matches@plt>
   125e8:	cmp	r0, #0
   125ec:	bne	1266c <__assert_fail@plt+0xf94>
   125f0:	bl	11450 <bfd_get_error@plt>
   125f4:	cmp	r0, #13
   125f8:	beq	126a8 <__assert_fail@plt+0xfd0>
   125fc:	mov	r2, sp
   12600:	mov	r0, r5
   12604:	mov	r1, #3
   12608:	bl	11648 <bfd_check_format_matches@plt>
   1260c:	cmp	r0, #0
   12610:	beq	12680 <__assert_fail@plt+0xfa8>
   12614:	mov	r0, r5
   12618:	bl	12160 <__assert_fail@plt+0xa88>
   1261c:	movw	r3, #29976	; 0x7518
   12620:	movt	r3, #2
   12624:	mov	r2, #11
   12628:	mov	r1, #1
   1262c:	movw	r0, #24092	; 0x5e1c
   12630:	ldr	r3, [r3]
   12634:	movt	r0, #1
   12638:	bl	11468 <fwrite@plt>
   1263c:	mov	r0, r5
   12640:	bl	11378 <bfd_core_file_failing_command@plt>
   12644:	subs	r2, r0, #0
   12648:	beq	1265c <__assert_fail@plt+0xf84>
   1264c:	movw	r1, #24104	; 0x5e28
   12650:	mov	r0, #1
   12654:	movt	r1, #1
   12658:	bl	115b8 <__printf_chk@plt>
   1265c:	movw	r0, #24120	; 0x5e38
   12660:	movt	r0, #1
   12664:	bl	114f8 <puts@plt>
   12668:	b	125c0 <__assert_fail@plt+0xee8>
   1266c:	mov	r0, r5
   12670:	bl	12160 <__assert_fail@plt+0xa88>
   12674:	mov	r0, #10
   12678:	bl	115ac <putchar@plt>
   1267c:	b	125c0 <__assert_fail@plt+0xee8>
   12680:	ldr	r0, [r5]
   12684:	bl	12878 <__assert_fail@plt+0x11a0>
   12688:	bl	11450 <bfd_get_error@plt>
   1268c:	cmp	r0, #13
   12690:	beq	126b0 <__assert_fail@plt+0xfd8>
   12694:	movw	r3, #29992	; 0x7528
   12698:	movt	r3, #2
   1269c:	mov	r2, #3
   126a0:	str	r2, [r3, #104]	; 0x68
   126a4:	b	125c0 <__assert_fail@plt+0xee8>
   126a8:	ldr	r0, [r5]
   126ac:	bl	12878 <__assert_fail@plt+0x11a0>
   126b0:	ldr	r0, [sp]
   126b4:	bl	12a50 <__assert_fail@plt+0x1378>
   126b8:	ldr	r0, [sp]
   126bc:	bl	113b4 <free@plt>
   126c0:	b	12694 <__assert_fail@plt+0xfbc>
   126c4:	bl	11414 <__stack_chk_fail@plt>
   126c8:	push	{r4, r5, r6, r7, r8, lr}
   126cc:	mov	r8, r0
   126d0:	bl	13334 <__assert_fail@plt+0x1c5c>
   126d4:	cmp	r0, #1
   126d8:	sbcs	r3, r1, #0
   126dc:	blt	127a4 <__assert_fail@plt+0x10cc>
   126e0:	movw	r7, #29992	; 0x7528
   126e4:	movt	r7, #2
   126e8:	mov	r0, r8
   126ec:	ldr	r1, [r7, #108]	; 0x6c
   126f0:	bl	113d8 <bfd_openr@plt>
   126f4:	subs	r6, r0, #0
   126f8:	beq	12728 <__assert_fail@plt+0x1050>
   126fc:	mov	r1, #2
   12700:	bl	11678 <bfd_check_format@plt>
   12704:	cmp	r0, #0
   12708:	movne	r4, #0
   1270c:	bne	12758 <__assert_fail@plt+0x1080>
   12710:	mov	r0, r6
   12714:	bl	12594 <__assert_fail@plt+0xebc>
   12718:	mov	r0, r6
   1271c:	bl	11630 <bfd_close@plt>
   12720:	cmp	r0, #0
   12724:	popne	{r4, r5, r6, r7, r8, pc}
   12728:	mov	r0, r8
   1272c:	bl	12878 <__assert_fail@plt+0x11a0>
   12730:	mov	r3, #1
   12734:	str	r3, [r7, #104]	; 0x68
   12738:	pop	{r4, r5, r6, r7, r8, pc}
   1273c:	bl	12594 <__assert_fail@plt+0xebc>
   12740:	subs	r0, r4, #0
   12744:	beq	12754 <__assert_fail@plt+0x107c>
   12748:	bl	11630 <bfd_close@plt>
   1274c:	cmp	r4, r5
   12750:	beq	12718 <__assert_fail@plt+0x1040>
   12754:	mov	r4, r5
   12758:	mov	r0, #0
   1275c:	bl	11480 <bfd_set_error@plt>
   12760:	mov	r0, r6
   12764:	mov	r1, r4
   12768:	bl	11684 <bfd_openr_next_archived_file@plt>
   1276c:	subs	r5, r0, #0
   12770:	bne	1273c <__assert_fail@plt+0x1064>
   12774:	bl	11450 <bfd_get_error@plt>
   12778:	cmp	r0, #9
   1277c:	beq	12790 <__assert_fail@plt+0x10b8>
   12780:	ldr	r0, [r6]
   12784:	bl	12878 <__assert_fail@plt+0x11a0>
   12788:	mov	r3, #2
   1278c:	str	r3, [r7, #104]	; 0x68
   12790:	cmp	r4, #0
   12794:	beq	12718 <__assert_fail@plt+0x1040>
   12798:	mov	r0, r4
   1279c:	bl	11630 <bfd_close@plt>
   127a0:	b	12718 <__assert_fail@plt+0x1040>
   127a4:	movw	r3, #29992	; 0x7528
   127a8:	movt	r3, #2
   127ac:	mov	r2, #1
   127b0:	str	r2, [r3, #104]	; 0x68
   127b4:	pop	{r4, r5, r6, r7, r8, pc}
   127b8:	push	{r4, r5, r6, lr}
   127bc:	mov	r1, #47	; 0x2f
   127c0:	mov	r6, r0
   127c4:	bl	1160c <strrchr@plt>
   127c8:	subs	r5, r0, #0
   127cc:	beq	12820 <__assert_fail@plt+0x1148>
   127d0:	rsb	r4, r6, r5
   127d4:	add	r0, r4, #11
   127d8:	add	r5, r4, #1
   127dc:	bl	11474 <xmalloc@plt>
   127e0:	mov	r1, r6
   127e4:	mov	r2, r4
   127e8:	bl	113cc <memcpy@plt>
   127ec:	mov	r3, #47	; 0x2f
   127f0:	mov	ip, r0
   127f4:	strb	r3, [r0, r4]
   127f8:	movw	r3, #24328	; 0x5f08
   127fc:	movt	r3, #1
   12800:	add	r2, ip, r5
   12804:	ldm	r3!, {r0, r1}
   12808:	ldrb	r3, [r3]
   1280c:	str	r0, [ip, r5]
   12810:	mov	r0, ip
   12814:	str	r1, [r2, #4]
   12818:	strb	r3, [r2, #8]
   1281c:	pop	{r4, r5, r6, pc}
   12820:	mov	r0, #9
   12824:	bl	11474 <xmalloc@plt>
   12828:	mov	ip, r0
   1282c:	b	127f8 <__assert_fail@plt+0x1120>
   12830:	subs	r3, r0, #0
   12834:	beq	12868 <__assert_fail@plt+0x1190>
   12838:	cmp	r3, #1
   1283c:	bne	12854 <__assert_fail@plt+0x117c>
   12840:	movw	r1, #24352	; 0x5f20
   12844:	mov	r0, #0
   12848:	movt	r1, #1
   1284c:	mov	r2, #5
   12850:	b	113fc <dcgettext@plt>
   12854:	movw	r1, #24368	; 0x5f30
   12858:	mov	r0, #0
   1285c:	movt	r1, #1
   12860:	mov	r2, #5
   12864:	b	113fc <dcgettext@plt>
   12868:	movw	r1, #24340	; 0x5f14
   1286c:	mov	r2, #5
   12870:	movt	r1, #1
   12874:	b	113fc <dcgettext@plt>
   12878:	push	{r4, r5, lr}
   1287c:	sub	sp, sp, #12
   12880:	mov	r4, r0
   12884:	bl	11450 <bfd_get_error@plt>
   12888:	bl	11660 <bfd_errmsg@plt>
   1288c:	movw	r3, #29976	; 0x7518
   12890:	movt	r3, #2
   12894:	mov	r5, r0
   12898:	ldr	r0, [r3]
   1289c:	bl	11384 <fflush@plt>
   128a0:	cmp	r4, #0
   128a4:	movw	r1, #29164	; 0x71ec
   128a8:	movw	r3, #30124	; 0x75ac
   128ac:	movt	r1, #2
   128b0:	movt	r3, #2
   128b4:	beq	128e0 <__assert_fail@plt+0x1208>
   128b8:	str	r4, [sp]
   128bc:	movw	r2, #24388	; 0x5f44
   128c0:	ldr	r0, [r1]
   128c4:	movt	r2, #1
   128c8:	ldr	r3, [r3]
   128cc:	mov	r1, #1
   128d0:	str	r5, [sp, #4]
   128d4:	bl	115c4 <__fprintf_chk@plt>
   128d8:	add	sp, sp, #12
   128dc:	pop	{r4, r5, pc}
   128e0:	str	r5, [sp]
   128e4:	movw	r2, #24392	; 0x5f48
   128e8:	ldr	r0, [r1]
   128ec:	movt	r2, #1
   128f0:	ldr	r3, [r3]
   128f4:	mov	r1, #1
   128f8:	bl	115c4 <__fprintf_chk@plt>
   128fc:	add	sp, sp, #12
   12900:	pop	{r4, r5, pc}
   12904:	push	{r3, lr}
   12908:	bl	12878 <__assert_fail@plt+0x11a0>
   1290c:	mov	r0, #1
   12910:	bl	11624 <xexit@plt>
   12914:	movw	ip, #29976	; 0x7518
   12918:	movt	ip, #2
   1291c:	push	{r4, r5, r6, lr}
   12920:	mov	r6, r0
   12924:	ldr	r0, [ip]
   12928:	mov	r5, r1
   1292c:	movw	r4, #29164	; 0x71ec
   12930:	bl	11384 <fflush@plt>
   12934:	movt	r4, #2
   12938:	movw	ip, #30124	; 0x75ac
   1293c:	movt	ip, #2
   12940:	mov	r1, #1
   12944:	ldr	r0, [r4]
   12948:	movw	r2, #24400	; 0x5f50
   1294c:	ldr	r3, [ip]
   12950:	movt	r2, #1
   12954:	bl	115c4 <__fprintf_chk@plt>
   12958:	mov	r2, r6
   1295c:	mov	r3, r5
   12960:	ldr	r0, [r4]
   12964:	mov	r1, #1
   12968:	bl	11528 <__vfprintf_chk@plt>
   1296c:	ldr	r1, [r4]
   12970:	mov	r0, #10
   12974:	pop	{r4, r5, r6, lr}
   12978:	b	1145c <_IO_putc@plt>
   1297c:	push	{r0, r1, r2, r3}
   12980:	movw	r3, #29152	; 0x71e0
   12984:	movt	r3, #2
   12988:	push	{lr}		; (str lr, [sp, #-4]!)
   1298c:	sub	sp, sp, #12
   12990:	add	r2, sp, #20
   12994:	ldr	r3, [r3]
   12998:	ldr	r0, [sp, #16]
   1299c:	mov	r1, r2
   129a0:	str	r2, [sp]
   129a4:	str	r3, [sp, #4]
   129a8:	bl	12914 <__assert_fail@plt+0x123c>
   129ac:	mov	r0, #1
   129b0:	bl	11624 <xexit@plt>
   129b4:	push	{r0, r1, r2, r3}
   129b8:	push	{r4, lr}
   129bc:	movw	r4, #29152	; 0x71e0
   129c0:	movt	r4, #2
   129c4:	sub	sp, sp, #8
   129c8:	add	r3, sp, #20
   129cc:	ldr	r2, [r4]
   129d0:	mov	r1, r3
   129d4:	ldr	r0, [sp, #16]
   129d8:	str	r3, [sp]
   129dc:	str	r2, [sp, #4]
   129e0:	bl	12914 <__assert_fail@plt+0x123c>
   129e4:	ldr	r2, [sp, #4]
   129e8:	ldr	r3, [r4]
   129ec:	cmp	r2, r3
   129f0:	bne	12a04 <__assert_fail@plt+0x132c>
   129f4:	add	sp, sp, #8
   129f8:	pop	{r4, lr}
   129fc:	add	sp, sp, #16
   12a00:	bx	lr
   12a04:	bl	11414 <__stack_chk_fail@plt>
   12a08:	push	{r4, lr}
   12a0c:	movw	r0, #24408	; 0x5f58
   12a10:	movt	r0, #1
   12a14:	bl	113a8 <bfd_set_default_target@plt>
   12a18:	cmp	r0, #0
   12a1c:	popne	{r4, pc}
   12a20:	mov	r2, #5
   12a24:	movw	r1, #24440	; 0x5f78
   12a28:	movt	r1, #1
   12a2c:	bl	113fc <dcgettext@plt>
   12a30:	mov	r4, r0
   12a34:	bl	11450 <bfd_get_error@plt>
   12a38:	bl	11660 <bfd_errmsg@plt>
   12a3c:	movw	r1, #24408	; 0x5f58
   12a40:	movt	r1, #1
   12a44:	mov	r2, r0
   12a48:	mov	r0, r4
   12a4c:	bl	1297c <__assert_fail@plt+0x12a4>
   12a50:	movw	r3, #29976	; 0x7518
   12a54:	movt	r3, #2
   12a58:	push	{r4, r5, r6, lr}
   12a5c:	mov	r4, r0
   12a60:	movw	r5, #29164	; 0x71ec
   12a64:	ldr	r0, [r3]
   12a68:	movt	r5, #2
   12a6c:	bl	11384 <fflush@plt>
   12a70:	mov	r2, #5
   12a74:	movw	r1, #24484	; 0x5fa4
   12a78:	mov	r0, #0
   12a7c:	movt	r1, #1
   12a80:	ldr	r6, [r5]
   12a84:	bl	113fc <dcgettext@plt>
   12a88:	movw	r3, #30124	; 0x75ac
   12a8c:	movt	r3, #2
   12a90:	mov	r1, #1
   12a94:	ldr	r3, [r3]
   12a98:	mov	r2, r0
   12a9c:	mov	r0, r6
   12aa0:	bl	115c4 <__fprintf_chk@plt>
   12aa4:	ldr	r3, [r4]
   12aa8:	cmp	r3, #0
   12aac:	beq	12ad0 <__assert_fail@plt+0x13f8>
   12ab0:	movw	r2, #24884	; 0x6134
   12ab4:	ldr	r0, [r5]
   12ab8:	movt	r2, #1
   12abc:	mov	r1, #1
   12ac0:	bl	115c4 <__fprintf_chk@plt>
   12ac4:	ldr	r3, [r4, #4]!
   12ac8:	cmp	r3, #0
   12acc:	bne	12ab0 <__assert_fail@plt+0x13d8>
   12ad0:	ldr	r1, [r5]
   12ad4:	mov	r0, #10
   12ad8:	pop	{r4, r5, r6, lr}
   12adc:	b	11618 <fputc@plt>
   12ae0:	push	{r4, r5, r6, lr}
   12ae4:	subs	r4, r0, #0
   12ae8:	mov	r5, r1
   12aec:	beq	12b68 <__assert_fail@plt+0x1490>
   12af0:	mov	r2, #5
   12af4:	movw	r1, #24528	; 0x5fd0
   12af8:	mov	r0, #0
   12afc:	movt	r1, #1
   12b00:	bl	113fc <dcgettext@plt>
   12b04:	mov	r3, r4
   12b08:	mov	r1, #1
   12b0c:	mov	r2, r0
   12b10:	mov	r0, r5
   12b14:	bl	115c4 <__fprintf_chk@plt>
   12b18:	bl	11444 <bfd_target_list@plt>
   12b1c:	ldr	r3, [r0]
   12b20:	mov	r6, r0
   12b24:	cmp	r3, #0
   12b28:	movne	r4, r0
   12b2c:	beq	12b50 <__assert_fail@plt+0x1478>
   12b30:	movw	r2, #24884	; 0x6134
   12b34:	mov	r0, r5
   12b38:	movt	r2, #1
   12b3c:	mov	r1, #1
   12b40:	bl	115c4 <__fprintf_chk@plt>
   12b44:	ldr	r3, [r4, #4]!
   12b48:	cmp	r3, #0
   12b4c:	bne	12b30 <__assert_fail@plt+0x1458>
   12b50:	mov	r1, r5
   12b54:	mov	r0, #10
   12b58:	bl	11618 <fputc@plt>
   12b5c:	mov	r0, r6
   12b60:	pop	{r4, r5, r6, lr}
   12b64:	b	113b4 <free@plt>
   12b68:	mov	r2, #5
   12b6c:	movw	r1, #24508	; 0x5fbc
   12b70:	movt	r1, #1
   12b74:	bl	113fc <dcgettext@plt>
   12b78:	mov	r1, #1
   12b7c:	mov	r2, r0
   12b80:	mov	r0, r5
   12b84:	bl	115c4 <__fprintf_chk@plt>
   12b88:	b	12b18 <__assert_fail@plt+0x1440>
   12b8c:	push	{r4, r5, r6, lr}
   12b90:	subs	r4, r0, #0
   12b94:	mov	r5, r1
   12b98:	beq	12c14 <__assert_fail@plt+0x153c>
   12b9c:	mov	r2, #5
   12ba0:	movw	r1, #24580	; 0x6004
   12ba4:	mov	r0, #0
   12ba8:	movt	r1, #1
   12bac:	bl	113fc <dcgettext@plt>
   12bb0:	mov	r3, r4
   12bb4:	mov	r1, #1
   12bb8:	mov	r2, r0
   12bbc:	mov	r0, r5
   12bc0:	bl	115c4 <__fprintf_chk@plt>
   12bc4:	bl	11390 <bfd_arch_list@plt>
   12bc8:	ldr	r3, [r0]
   12bcc:	mov	r6, r0
   12bd0:	cmp	r3, #0
   12bd4:	movne	r4, r0
   12bd8:	beq	12bfc <__assert_fail@plt+0x1524>
   12bdc:	movw	r2, #24884	; 0x6134
   12be0:	mov	r0, r5
   12be4:	movt	r2, #1
   12be8:	mov	r1, #1
   12bec:	bl	115c4 <__fprintf_chk@plt>
   12bf0:	ldr	r3, [r4, #4]!
   12bf4:	cmp	r3, #0
   12bf8:	bne	12bdc <__assert_fail@plt+0x1504>
   12bfc:	mov	r1, r5
   12c00:	mov	r0, #10
   12c04:	bl	11618 <fputc@plt>
   12c08:	mov	r0, r6
   12c0c:	pop	{r4, r5, r6, lr}
   12c10:	b	113b4 <free@plt>
   12c14:	mov	r2, #5
   12c18:	movw	r1, #24552	; 0x5fe8
   12c1c:	movt	r1, #1
   12c20:	bl	113fc <dcgettext@plt>
   12c24:	mov	r1, #1
   12c28:	mov	r2, r0
   12c2c:	mov	r0, r5
   12c30:	bl	115c4 <__fprintf_chk@plt>
   12c34:	b	12bc4 <__assert_fail@plt+0x14ec>
   12c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c3c:	mov	r2, #5
   12c40:	sub	sp, sp, #44	; 0x2c
   12c44:	movw	r1, #24612	; 0x6024
   12c48:	mov	r0, #0
   12c4c:	movt	r1, #1
   12c50:	bl	113fc <dcgettext@plt>
   12c54:	movw	r2, #24640	; 0x6040
   12c58:	movt	r2, #1
   12c5c:	movw	fp, #29168	; 0x71f0
   12c60:	movt	fp, #2
   12c64:	mov	r1, r0
   12c68:	mov	r0, #1
   12c6c:	bl	115b8 <__printf_chk@plt>
   12c70:	mov	r0, #0
   12c74:	bl	141ac <__assert_fail@plt+0x2ad4>
   12c78:	ldr	r3, [fp]
   12c7c:	ldr	r4, [r3]
   12c80:	cmp	r4, #0
   12c84:	mov	r6, r0
   12c88:	beq	12dd8 <__assert_fail@plt+0x1700>
   12c8c:	mov	r8, #4
   12c90:	mov	r7, #1
   12c94:	ldr	r1, [r4]
   12c98:	mov	r0, r6
   12c9c:	bl	115e8 <bfd_openw@plt>
   12ca0:	mov	r2, #5
   12ca4:	movw	r1, #24668	; 0x605c
   12ca8:	movt	r1, #1
   12cac:	mov	r5, r0
   12cb0:	mov	r0, #0
   12cb4:	bl	113fc <dcgettext@plt>
   12cb8:	ldr	sl, [r4]
   12cbc:	mov	r1, r0
   12cc0:	ldr	r0, [r4, #12]
   12cc4:	str	r1, [sp, #8]
   12cc8:	bl	12830 <__assert_fail@plt+0x1158>
   12ccc:	mov	r9, r0
   12cd0:	ldr	r0, [r4, #8]
   12cd4:	bl	12830 <__assert_fail@plt+0x1158>
   12cd8:	ldr	r1, [sp, #8]
   12cdc:	mov	r2, sl
   12ce0:	mov	r3, r9
   12ce4:	str	r0, [sp]
   12ce8:	mov	r0, #1
   12cec:	bl	115b8 <__printf_chk@plt>
   12cf0:	cmp	r5, #0
   12cf4:	beq	12dc8 <__assert_fail@plt+0x16f0>
   12cf8:	mov	r0, r5
   12cfc:	mov	r1, #1
   12d00:	bl	11540 <bfd_set_format@plt>
   12d04:	subs	r9, r0, #0
   12d08:	movne	r4, #2
   12d0c:	bne	12d20 <__assert_fail@plt+0x1648>
   12d10:	b	12dac <__assert_fail@plt+0x16d4>
   12d14:	add	r4, r4, #1
   12d18:	cmp	r4, #92	; 0x5c
   12d1c:	beq	12d6c <__assert_fail@plt+0x1694>
   12d20:	ldr	r3, [r5, #4]
   12d24:	mov	r0, r5
   12d28:	mov	r1, r4
   12d2c:	mov	r2, #0
   12d30:	ldr	r3, [r3, #336]	; 0x150
   12d34:	blx	r3
   12d38:	cmp	r0, #0
   12d3c:	beq	12d14 <__assert_fail@plt+0x163c>
   12d40:	mov	r0, r4
   12d44:	mov	r1, #0
   12d48:	bl	11588 <bfd_printable_arch_mach@plt>
   12d4c:	add	r4, r4, #1
   12d50:	movw	r1, #24696	; 0x6078
   12d54:	movt	r1, #1
   12d58:	mov	r2, r0
   12d5c:	mov	r0, #1
   12d60:	bl	115b8 <__printf_chk@plt>
   12d64:	cmp	r4, #92	; 0x5c
   12d68:	bne	12d20 <__assert_fail@plt+0x1648>
   12d6c:	mov	r0, r5
   12d70:	bl	1157c <bfd_close_all_done@plt>
   12d74:	ldr	r3, [fp]
   12d78:	ldr	r4, [r3, r8]
   12d7c:	add	r8, r8, #4
   12d80:	cmp	r4, #0
   12d84:	bne	12c94 <__assert_fail@plt+0x15bc>
   12d88:	mov	r0, r6
   12d8c:	bl	11420 <unlink@plt>
   12d90:	mov	r0, r6
   12d94:	bl	113b4 <free@plt>
   12d98:	cmp	r7, #0
   12d9c:	moveq	r0, #1
   12da0:	bne	12de4 <__assert_fail@plt+0x170c>
   12da4:	add	sp, sp, #44	; 0x2c
   12da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dac:	bl	11450 <bfd_get_error@plt>
   12db0:	cmp	r0, #5
   12db4:	beq	12d6c <__assert_fail@plt+0x1694>
   12db8:	ldr	r0, [r4]
   12dbc:	mov	r7, r9
   12dc0:	bl	12878 <__assert_fail@plt+0x11a0>
   12dc4:	b	12d6c <__assert_fail@plt+0x1694>
   12dc8:	mov	r0, r6
   12dcc:	mov	r7, r5
   12dd0:	bl	12878 <__assert_fail@plt+0x11a0>
   12dd4:	b	12d74 <__assert_fail@plt+0x169c>
   12dd8:	bl	11420 <unlink@plt>
   12ddc:	mov	r0, r6
   12de0:	bl	113b4 <free@plt>
   12de4:	movw	r0, #24704	; 0x6080
   12de8:	movt	r0, #1
   12dec:	bl	114d4 <getenv@plt>
   12df0:	cmp	r0, #0
   12df4:	beq	13138 <__assert_fail@plt+0x1a60>
   12df8:	mov	r1, #0
   12dfc:	mov	r2, #10
   12e00:	bl	1136c <strtol@plt>
   12e04:	cmp	r0, #0
   12e08:	str	r0, [sp, #32]
   12e0c:	beq	13138 <__assert_fail@plt+0x1a60>
   12e10:	movw	sl, #29976	; 0x7518
   12e14:	movt	sl, #2
   12e18:	mov	r3, #1
   12e1c:	mov	r2, #0
   12e20:	str	r3, [sp, #36]	; 0x24
   12e24:	str	r2, [sp, #16]
   12e28:	ldr	r6, [fp]
   12e2c:	ldr	r3, [sp, #16]
   12e30:	ldr	r2, [sp, #16]
   12e34:	lsl	r3, r3, #2
   12e38:	str	r3, [sp, #24]
   12e3c:	ldr	r3, [r6, r2, lsl #2]
   12e40:	cmp	r3, #0
   12e44:	beq	13124 <__assert_fail@plt+0x1a4c>
   12e48:	ldr	r0, [r3]
   12e4c:	ldr	r3, [sp, #16]
   12e50:	add	r9, r3, #1
   12e54:	bl	11570 <strlen@plt>
   12e58:	ldr	r2, [sp, #32]
   12e5c:	add	r5, r0, #16
   12e60:	cmp	r5, r2
   12e64:	bge	13114 <__assert_fail@plt+0x1a3c>
   12e68:	ldr	r2, [sp, #24]
   12e6c:	add	r2, r2, #4
   12e70:	str	r2, [sp, #20]
   12e74:	add	r4, r6, r2
   12e78:	ldr	r3, [r6, r2]
   12e7c:	cmp	r3, #0
   12e80:	beq	12eb4 <__assert_fail@plt+0x17dc>
   12e84:	ldr	r6, [sp, #32]
   12e88:	b	12e9c <__assert_fail@plt+0x17c4>
   12e8c:	ldr	r3, [r4, #4]!
   12e90:	add	r9, r9, #1
   12e94:	cmp	r3, #0
   12e98:	beq	12eb4 <__assert_fail@plt+0x17dc>
   12e9c:	ldr	r0, [r3]
   12ea0:	add	r5, r5, #1
   12ea4:	bl	11570 <strlen@plt>
   12ea8:	add	r5, r5, r0
   12eac:	cmp	r5, r6
   12eb0:	blt	12e8c <__assert_fail@plt+0x17b4>
   12eb4:	movw	r1, #24712	; 0x6088
   12eb8:	movw	r3, #24720	; 0x6090
   12ebc:	movt	r1, #1
   12ec0:	movt	r3, #1
   12ec4:	mov	r0, #1
   12ec8:	mov	r2, #15
   12ecc:	bl	115b8 <__printf_chk@plt>
   12ed0:	ldr	r3, [sp, #16]
   12ed4:	cmp	r9, r3
   12ed8:	ble	12f30 <__assert_fail@plt+0x1858>
   12edc:	ldr	r3, [fp]
   12ee0:	ldr	r2, [sp, #24]
   12ee4:	ldr	r3, [r3, r2]
   12ee8:	cmp	r3, #0
   12eec:	beq	12f30 <__assert_fail@plt+0x1858>
   12ef0:	ldr	r5, [sp, #20]
   12ef4:	ldr	r4, [sp, #16]
   12ef8:	b	12f10 <__assert_fail@plt+0x1838>
   12efc:	ldr	r3, [fp]
   12f00:	ldr	r3, [r3, r5]
   12f04:	add	r5, r5, #4
   12f08:	cmp	r3, #0
   12f0c:	beq	12f30 <__assert_fail@plt+0x1858>
   12f10:	ldr	r2, [r3]
   12f14:	add	r4, r4, #1
   12f18:	movw	r1, #24724	; 0x6094
   12f1c:	mov	r0, #1
   12f20:	movt	r1, #1
   12f24:	bl	115b8 <__printf_chk@plt>
   12f28:	cmp	r4, r9
   12f2c:	bne	12efc <__assert_fail@plt+0x1824>
   12f30:	ldr	r1, [sl]
   12f34:	mov	r0, #10
   12f38:	bl	1145c <_IO_putc@plt>
   12f3c:	mov	r0, #0
   12f40:	bl	141ac <__assert_fail@plt+0x2ad4>
   12f44:	mov	r8, #2
   12f48:	mov	r2, #1
   12f4c:	str	r2, [sp, #28]
   12f50:	str	r0, [sp, #12]
   12f54:	b	12f64 <__assert_fail@plt+0x188c>
   12f58:	add	r8, r8, #1
   12f5c:	cmp	r8, #92	; 0x5c
   12f60:	beq	130b4 <__assert_fail@plt+0x19dc>
   12f64:	mov	r1, #0
   12f68:	mov	r0, r8
   12f6c:	bl	11588 <bfd_printable_arch_mach@plt>
   12f70:	movw	r1, #24728	; 0x6098
   12f74:	movt	r1, #1
   12f78:	bl	11360 <strcmp@plt>
   12f7c:	cmp	r0, #0
   12f80:	beq	12f58 <__assert_fail@plt+0x1880>
   12f84:	mov	r1, #0
   12f88:	mov	r0, r8
   12f8c:	bl	11588 <bfd_printable_arch_mach@plt>
   12f90:	movw	r1, #24740	; 0x60a4
   12f94:	mov	r2, #14
   12f98:	movt	r1, #1
   12f9c:	mov	r3, r0
   12fa0:	mov	r0, #1
   12fa4:	bl	115b8 <__printf_chk@plt>
   12fa8:	ldr	r3, [sp, #16]
   12fac:	cmp	r9, r3
   12fb0:	ble	1309c <__assert_fail@plt+0x19c4>
   12fb4:	ldr	r3, [fp]
   12fb8:	ldr	r2, [sp, #24]
   12fbc:	ldr	r4, [r3, r2]
   12fc0:	cmp	r4, #0
   12fc4:	beq	1309c <__assert_fail@plt+0x19c4>
   12fc8:	ldr	r7, [sp, #20]
   12fcc:	ldr	r6, [sp, #16]
   12fd0:	b	13010 <__assert_fail@plt+0x1938>
   12fd4:	movw	r1, #24724	; 0x6094
   12fd8:	ldr	r2, [r4]
   12fdc:	mov	r0, #1
   12fe0:	movt	r1, #1
   12fe4:	bl	115b8 <__printf_chk@plt>
   12fe8:	mov	r0, r5
   12fec:	add	r6, r6, #1
   12ff0:	bl	1157c <bfd_close_all_done@plt>
   12ff4:	cmp	r6, r9
   12ff8:	beq	1309c <__assert_fail@plt+0x19c4>
   12ffc:	ldr	r3, [fp]
   13000:	ldr	r4, [r3, r7]
   13004:	add	r7, r7, #4
   13008:	cmp	r4, #0
   1300c:	beq	1309c <__assert_fail@plt+0x19c4>
   13010:	ldr	r0, [sp, #12]
   13014:	ldr	r1, [r4]
   13018:	bl	115e8 <bfd_openw@plt>
   1301c:	subs	r5, r0, #0
   13020:	beq	13104 <__assert_fail@plt+0x1a2c>
   13024:	mov	r1, #1
   13028:	bl	11540 <bfd_set_format@plt>
   1302c:	subs	r3, r0, #0
   13030:	beq	130e0 <__assert_fail@plt+0x1a08>
   13034:	ldr	r3, [r5, #4]
   13038:	mov	r0, r5
   1303c:	mov	r1, r8
   13040:	mov	r2, #0
   13044:	ldr	r3, [r3, #336]	; 0x150
   13048:	blx	r3
   1304c:	cmp	r0, #0
   13050:	bne	12fd4 <__assert_fail@plt+0x18fc>
   13054:	ldr	r0, [r4]
   13058:	bl	11570 <strlen@plt>
   1305c:	cmp	r0, #0
   13060:	beq	1307c <__assert_fail@plt+0x19a4>
   13064:	mov	r4, r0
   13068:	mov	r0, #45	; 0x2d
   1306c:	ldr	r1, [sl]
   13070:	bl	1145c <_IO_putc@plt>
   13074:	subs	r4, r4, #1
   13078:	bne	13068 <__assert_fail@plt+0x1990>
   1307c:	mov	r0, #32
   13080:	ldr	r1, [sl]
   13084:	bl	1145c <_IO_putc@plt>
   13088:	cmp	r5, #0
   1308c:	bne	12fe8 <__assert_fail@plt+0x1910>
   13090:	add	r6, r6, #1
   13094:	cmp	r6, r9
   13098:	bne	12ffc <__assert_fail@plt+0x1924>
   1309c:	mov	r0, #10
   130a0:	ldr	r1, [sl]
   130a4:	add	r8, r8, #1
   130a8:	bl	1145c <_IO_putc@plt>
   130ac:	cmp	r8, #92	; 0x5c
   130b0:	bne	12f64 <__assert_fail@plt+0x188c>
   130b4:	ldr	r2, [sp, #28]
   130b8:	ldr	r3, [sp, #36]	; 0x24
   130bc:	cmp	r2, #0
   130c0:	ldr	r0, [sp, #12]
   130c4:	moveq	r3, #0
   130c8:	str	r3, [sp, #36]	; 0x24
   130cc:	bl	11420 <unlink@plt>
   130d0:	ldr	r0, [sp, #12]
   130d4:	bl	113b4 <free@plt>
   130d8:	str	r9, [sp, #16]
   130dc:	b	12e28 <__assert_fail@plt+0x1750>
   130e0:	str	r3, [sp, #8]
   130e4:	bl	11450 <bfd_get_error@plt>
   130e8:	ldr	r3, [sp, #8]
   130ec:	cmp	r0, #5
   130f0:	beq	13054 <__assert_fail@plt+0x197c>
   130f4:	ldr	r0, [r4]
   130f8:	str	r3, [sp, #28]
   130fc:	bl	12878 <__assert_fail@plt+0x11a0>
   13100:	b	13054 <__assert_fail@plt+0x197c>
   13104:	ldr	r0, [r4]
   13108:	str	r5, [sp, #28]
   1310c:	bl	12878 <__assert_fail@plt+0x11a0>
   13110:	b	13054 <__assert_fail@plt+0x197c>
   13114:	ldr	r3, [sp, #24]
   13118:	add	r3, r3, #4
   1311c:	str	r3, [sp, #20]
   13120:	b	12eb4 <__assert_fail@plt+0x17dc>
   13124:	ldr	r3, [sp, #36]	; 0x24
   13128:	rsbs	r0, r3, #1
   1312c:	movcc	r0, #0
   13130:	add	sp, sp, #44	; 0x2c
   13134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13138:	mov	r2, #80	; 0x50
   1313c:	str	r2, [sp, #32]
   13140:	b	12e10 <__assert_fail@plt+0x1738>
   13144:	push	{r4, r5, r6, r7, r8, r9, lr}
   13148:	movw	r6, #29152	; 0x71e0
   1314c:	movt	r6, #2
   13150:	sub	sp, sp, #196	; 0xc4
   13154:	cmp	r2, #0
   13158:	mov	r8, r0
   1315c:	ldr	r3, [r6]
   13160:	mov	r7, r1
   13164:	str	r3, [sp, #188]	; 0xbc
   13168:	bne	1319c <__assert_fail@plt+0x1ac4>
   1316c:	ldr	r3, [r7]
   13170:	mov	r0, r8
   13174:	movw	r2, #24396	; 0x5f4c
   13178:	mov	r1, #1
   1317c:	movt	r2, #1
   13180:	bl	115c4 <__fprintf_chk@plt>
   13184:	ldr	r2, [sp, #188]	; 0xbc
   13188:	ldr	r3, [r6]
   1318c:	cmp	r2, r3
   13190:	bne	13274 <__assert_fail@plt+0x1b9c>
   13194:	add	sp, sp, #196	; 0xc4
   13198:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1319c:	ldr	r3, [r1, #4]
   131a0:	mov	r0, r1
   131a4:	add	r1, sp, #32
   131a8:	ldr	r3, [r3, #252]	; 0xfc
   131ac:	blx	r3
   131b0:	cmp	r0, #0
   131b4:	bne	1316c <__assert_fail@plt+0x1a94>
   131b8:	ldr	r3, [sp, #112]	; 0x70
   131bc:	add	r0, sp, #192	; 0xc0
   131c0:	str	r3, [r0, #-164]!	; 0xffffff5c
   131c4:	bl	113f0 <ctime@plt>
   131c8:	subs	r3, r0, #0
   131cc:	beq	13248 <__assert_fail@plt+0x1b70>
   131d0:	add	r9, sp, #148	; 0x94
   131d4:	add	r2, r3, #4
   131d8:	mov	r1, #1
   131dc:	add	r3, r3, #20
   131e0:	str	r2, [sp]
   131e4:	mov	r0, r9
   131e8:	str	r3, [sp, #4]
   131ec:	mov	r2, #40	; 0x28
   131f0:	movw	r3, #24768	; 0x60c0
   131f4:	movt	r3, #1
   131f8:	bl	115a0 <__sprintf_chk@plt>
   131fc:	ldr	r0, [sp, #48]	; 0x30
   13200:	add	r1, sp, #136	; 0x88
   13204:	bl	13790 <__assert_fail@plt+0x20b8>
   13208:	ldr	r1, [sp, #56]	; 0x38
   1320c:	ldr	r3, [sp, #60]	; 0x3c
   13210:	movw	r2, #24780	; 0x60cc
   13214:	ldrd	r4, [sp, #80]	; 0x50
   13218:	movt	r2, #1
   1321c:	str	r1, [sp]
   13220:	mov	r0, r8
   13224:	str	r3, [sp, #4]
   13228:	mov	r1, #1
   1322c:	str	r9, [sp, #16]
   13230:	add	r3, sp, #137	; 0x89
   13234:	strd	r4, [sp, #8]
   13238:	mov	ip, #0
   1323c:	strb	ip, [sp, #146]	; 0x92
   13240:	bl	115c4 <__fprintf_chk@plt>
   13244:	b	1316c <__assert_fail@plt+0x1a94>
   13248:	mov	r2, #5
   1324c:	movw	r1, #24748	; 0x60ac
   13250:	movt	r1, #1
   13254:	add	r9, sp, #148	; 0x94
   13258:	bl	113fc <dcgettext@plt>
   1325c:	mov	r1, #1
   13260:	mov	r2, #40	; 0x28
   13264:	mov	r3, r0
   13268:	mov	r0, r9
   1326c:	bl	115a0 <__sprintf_chk@plt>
   13270:	b	131fc <__assert_fail@plt+0x1b24>
   13274:	bl	11414 <__stack_chk_fail@plt>
   13278:	push	{r4, lr}
   1327c:	bl	127b8 <__assert_fail@plt+0x10e0>
   13280:	mov	r4, r0
   13284:	bl	114e0 <mkstemp64@plt>
   13288:	cmn	r0, #1
   1328c:	beq	1329c <__assert_fail@plt+0x1bc4>
   13290:	bl	116cc <close@plt>
   13294:	mov	r0, r4
   13298:	pop	{r4, pc}
   1329c:	mov	r0, r4
   132a0:	bl	113b4 <free@plt>
   132a4:	mov	r0, #0
   132a8:	pop	{r4, pc}
   132ac:	push	{r3, lr}
   132b0:	bl	127b8 <__assert_fail@plt+0x10e0>
   132b4:	pop	{r3, lr}
   132b8:	b	1163c <mkdtemp@plt>
   132bc:	push	{r4, r5, r6, lr}
   132c0:	movw	r4, #29152	; 0x71e0
   132c4:	movt	r4, #2
   132c8:	sub	sp, sp, #8
   132cc:	mov	r6, r1
   132d0:	mov	r2, #0
   132d4:	ldr	r3, [r4]
   132d8:	mov	r1, sp
   132dc:	mov	r5, r0
   132e0:	str	r3, [sp, #4]
   132e4:	bl	11354 <bfd_scan_vma@plt>
   132e8:	ldr	r3, [sp]
   132ec:	ldrb	r3, [r3]
   132f0:	cmp	r3, #0
   132f4:	bne	13314 <__assert_fail@plt+0x1c3c>
   132f8:	ldr	r2, [sp, #4]
   132fc:	ldr	r3, [r4]
   13300:	cmp	r2, r3
   13304:	bne	13310 <__assert_fail@plt+0x1c38>
   13308:	add	sp, sp, #8
   1330c:	pop	{r4, r5, r6, pc}
   13310:	bl	11414 <__stack_chk_fail@plt>
   13314:	mov	r2, #5
   13318:	movw	r1, #24804	; 0x60e4
   1331c:	mov	r0, #0
   13320:	movt	r1, #1
   13324:	bl	113fc <dcgettext@plt>
   13328:	mov	r1, r6
   1332c:	mov	r2, r5
   13330:	bl	1297c <__assert_fail@plt+0x12a4>
   13334:	push	{r4, r5, r6, r7, lr}
   13338:	movw	r4, #29152	; 0x71e0
   1333c:	movt	r4, #2
   13340:	sub	sp, sp, #116	; 0x74
   13344:	mov	r1, r0
   13348:	mov	r5, r0
   1334c:	ldr	r3, [r4]
   13350:	mov	r2, sp
   13354:	mov	r0, #3
   13358:	str	r3, [sp, #108]	; 0x6c
   1335c:	bl	116a8 <__xstat64@plt>
   13360:	cmp	r0, #0
   13364:	blt	133b4 <__assert_fail@plt+0x1cdc>
   13368:	ldr	r3, [sp, #16]
   1336c:	and	r3, r3, #61440	; 0xf000
   13370:	cmp	r3, #32768	; 0x8000
   13374:	bne	13410 <__assert_fail@plt+0x1d38>
   13378:	ldrd	r2, [sp, #48]	; 0x30
   1337c:	cmp	r2, #0
   13380:	sbcs	r1, r3, #0
   13384:	movwlt	r1, #24928	; 0x6160
   13388:	movlt	r0, #0
   1338c:	movtlt	r1, #1
   13390:	blt	1341c <__assert_fail@plt+0x1d44>
   13394:	mov	r0, r2
   13398:	mov	r1, r3
   1339c:	ldr	r2, [sp, #108]	; 0x6c
   133a0:	ldr	r3, [r4]
   133a4:	cmp	r2, r3
   133a8:	bne	13438 <__assert_fail@plt+0x1d60>
   133ac:	add	sp, sp, #116	; 0x74
   133b0:	pop	{r4, r5, r6, r7, pc}
   133b4:	bl	11594 <__errno_location@plt>
   133b8:	ldr	r3, [r0]
   133bc:	mov	r6, r0
   133c0:	cmp	r3, #2
   133c4:	movweq	r1, #24824	; 0x60f8
   133c8:	moveq	r0, #0
   133cc:	movteq	r1, #1
   133d0:	beq	1341c <__assert_fail@plt+0x1d44>
   133d4:	mov	r2, #5
   133d8:	movw	r1, #24844	; 0x610c
   133dc:	mov	r0, #0
   133e0:	movt	r1, #1
   133e4:	bl	113fc <dcgettext@plt>
   133e8:	mov	r7, r0
   133ec:	ldr	r0, [r6]
   133f0:	bl	1151c <strerror@plt>
   133f4:	mov	r1, r5
   133f8:	mov	r2, r0
   133fc:	mov	r0, r7
   13400:	bl	129b4 <__assert_fail@plt+0x12dc>
   13404:	mvn	r0, #0
   13408:	mov	r1, r0
   1340c:	b	1339c <__assert_fail@plt+0x1cc4>
   13410:	movw	r1, #24888	; 0x6138
   13414:	movt	r1, #1
   13418:	mov	r0, #0
   1341c:	mov	r2, #5
   13420:	bl	113fc <dcgettext@plt>
   13424:	mov	r1, r5
   13428:	bl	129b4 <__assert_fail@plt+0x12dc>
   1342c:	mvn	r0, #0
   13430:	mov	r1, r0
   13434:	b	1339c <__assert_fail@plt+0x1cc4>
   13438:	bl	11414 <__stack_chk_fail@plt>
   1343c:	push	{r4, r5, r6, r7, r8, lr}
   13440:	subs	r5, r0, #0
   13444:	sub	sp, sp, #8
   13448:	beq	1351c <__assert_fail@plt+0x1e44>
   1344c:	ldr	r3, [r5, #148]	; 0x94
   13450:	cmp	r3, #0
   13454:	beq	134fc <__assert_fail@plt+0x1e24>
   13458:	ldrb	r2, [r3, #44]	; 0x2c
   1345c:	tst	r2, #1
   13460:	bne	134fc <__assert_fail@plt+0x1e24>
   13464:	ldr	r6, [r3]
   13468:	movw	r4, #30112	; 0x75a0
   1346c:	movt	r4, #2
   13470:	mov	r0, r6
   13474:	bl	11570 <strlen@plt>
   13478:	ldr	r8, [r5]
   1347c:	mov	r7, r0
   13480:	mov	r0, r8
   13484:	bl	11570 <strlen@plt>
   13488:	ldr	r3, [r4]
   1348c:	add	r0, r7, r0
   13490:	add	r7, r0, #3
   13494:	cmp	r7, r3
   13498:	bls	13508 <__assert_fail@plt+0x1e30>
   1349c:	cmp	r3, #0
   134a0:	bne	13510 <__assert_fail@plt+0x1e38>
   134a4:	add	r0, r7, r7, lsr #1
   134a8:	mov	r1, #0
   134ac:	str	r0, [r4]
   134b0:	bl	11408 <bfd_malloc@plt>
   134b4:	movw	r6, #30112	; 0x75a0
   134b8:	movt	r6, #2
   134bc:	cmp	r0, #0
   134c0:	str	r0, [r4, #4]
   134c4:	beq	134f8 <__assert_fail@plt+0x1e20>
   134c8:	ldr	r3, [r5, #148]	; 0x94
   134cc:	ldr	r8, [r5]
   134d0:	ldr	r6, [r3]
   134d4:	stm	sp, {r6, r8}
   134d8:	mov	r1, #1
   134dc:	mvn	r2, #0
   134e0:	movw	r3, #25020	; 0x61bc
   134e4:	movt	r3, #1
   134e8:	bl	115a0 <__sprintf_chk@plt>
   134ec:	ldr	r0, [r4, #4]
   134f0:	add	sp, sp, #8
   134f4:	pop	{r4, r5, r6, r7, r8, pc}
   134f8:	str	r0, [r6]
   134fc:	ldr	r0, [r5]
   13500:	add	sp, sp, #8
   13504:	pop	{r4, r5, r6, r7, r8, pc}
   13508:	ldr	r0, [r4, #4]
   1350c:	b	134d4 <__assert_fail@plt+0x1dfc>
   13510:	ldr	r0, [r4, #4]
   13514:	bl	113b4 <free@plt>
   13518:	b	134a4 <__assert_fail@plt+0x1dcc>
   1351c:	movw	r0, #24988	; 0x619c
   13520:	movw	r1, #25008	; 0x61b0
   13524:	movw	r3, #24300	; 0x5eec
   13528:	movt	r0, #1
   1352c:	movt	r1, #1
   13530:	movw	r2, #606	; 0x25e
   13534:	movt	r3, #1
   13538:	bl	116d8 <__assert_fail@plt>
   1353c:	push	{r3}		; (str r3, [sp, #-4]!)
   13540:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13544:	movw	r5, #29152	; 0x71e0
   13548:	movt	r5, #2
   1354c:	sub	sp, sp, #20
   13550:	mov	sl, r1
   13554:	mov	r8, r2
   13558:	ldr	r3, [r5]
   1355c:	mov	r6, r0
   13560:	ldr	r7, [sp, #52]	; 0x34
   13564:	movw	r4, #29164	; 0x71ec
   13568:	movt	r4, #2
   1356c:	str	r3, [sp, #12]
   13570:	bl	11450 <bfd_get_error@plt>
   13574:	bl	11660 <bfd_errmsg@plt>
   13578:	movw	ip, #29976	; 0x7518
   1357c:	movt	ip, #2
   13580:	mov	r9, r0
   13584:	ldr	r0, [ip]
   13588:	bl	11384 <fflush@plt>
   1358c:	movw	ip, #30124	; 0x75ac
   13590:	movt	ip, #2
   13594:	ldr	r1, [r4]
   13598:	add	r3, sp, #56	; 0x38
   1359c:	str	r3, [sp, #8]
   135a0:	ldr	r0, [ip]
   135a4:	bl	116b4 <fputs@plt>
   135a8:	cmp	sl, #0
   135ac:	beq	13654 <__assert_fail@plt+0x1f7c>
   135b0:	cmp	r6, #0
   135b4:	beq	13670 <__assert_fail@plt+0x1f98>
   135b8:	cmp	r8, #0
   135bc:	beq	13654 <__assert_fail@plt+0x1f7c>
   135c0:	ldr	r2, [r8]
   135c4:	cmp	r2, #0
   135c8:	beq	13654 <__assert_fail@plt+0x1f7c>
   135cc:	str	r2, [sp]
   135d0:	mov	r3, r6
   135d4:	movw	r2, #25028	; 0x61c4
   135d8:	ldr	r0, [r4]
   135dc:	mov	r1, #1
   135e0:	movt	r2, #1
   135e4:	bl	115c4 <__fprintf_chk@plt>
   135e8:	cmp	r7, #0
   135ec:	beq	1361c <__assert_fail@plt+0x1f44>
   135f0:	mov	r1, #1
   135f4:	mov	r2, #2
   135f8:	ldr	r3, [r4]
   135fc:	movw	r0, #25040	; 0x61d0
   13600:	movt	r0, #1
   13604:	bl	11468 <fwrite@plt>
   13608:	mov	r2, r7
   1360c:	ldr	r0, [r4]
   13610:	mov	r1, #1
   13614:	ldr	r3, [sp, #8]
   13618:	bl	11528 <__vfprintf_chk@plt>
   1361c:	mov	r3, r9
   13620:	ldr	r0, [r4]
   13624:	movw	r2, #25044	; 0x61d4
   13628:	mov	r1, #1
   1362c:	movt	r2, #1
   13630:	bl	115c4 <__fprintf_chk@plt>
   13634:	ldr	r2, [sp, #12]
   13638:	ldr	r3, [r5]
   1363c:	cmp	r2, r3
   13640:	bne	13680 <__assert_fail@plt+0x1fa8>
   13644:	add	sp, sp, #20
   13648:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1364c:	add	sp, sp, #4
   13650:	bx	lr
   13654:	mov	r3, r6
   13658:	movw	r2, #25036	; 0x61cc
   1365c:	ldr	r0, [r4]
   13660:	movt	r2, #1
   13664:	mov	r1, #1
   13668:	bl	115c4 <__fprintf_chk@plt>
   1366c:	b	135e8 <__assert_fail@plt+0x1f10>
   13670:	mov	r0, sl
   13674:	bl	1343c <__assert_fail@plt+0x1d64>
   13678:	mov	r6, r0
   1367c:	b	135b8 <__assert_fail@plt+0x1ee0>
   13680:	bl	11414 <__stack_chk_fail@plt>
   13684:	ldrb	r3, [r0]
   13688:	cmp	r3, #47	; 0x2f
   1368c:	beq	13720 <__assert_fail@plt+0x2048>
   13690:	cmp	r3, #0
   13694:	beq	136f0 <__assert_fail@plt+0x2018>
   13698:	cmp	r3, #46	; 0x2e
   1369c:	beq	136f8 <__assert_fail@plt+0x2020>
   136a0:	cmp	r3, #0
   136a4:	cmpne	r3, #47	; 0x2f
   136a8:	beq	136c8 <__assert_fail@plt+0x1ff0>
   136ac:	add	r2, r0, #1
   136b0:	mov	r0, r2
   136b4:	add	r2, r2, #1
   136b8:	ldrb	r3, [r0]
   136bc:	cmp	r3, #47	; 0x2f
   136c0:	cmpne	r3, #0
   136c4:	bne	136b0 <__assert_fail@plt+0x1fd8>
   136c8:	cmp	r3, #47	; 0x2f
   136cc:	bne	13690 <__assert_fail@plt+0x1fb8>
   136d0:	add	r2, r0, #1
   136d4:	mov	r0, r2
   136d8:	add	r2, r2, #1
   136dc:	ldrb	r3, [r0]
   136e0:	cmp	r3, #47	; 0x2f
   136e4:	beq	136d4 <__assert_fail@plt+0x1ffc>
   136e8:	cmp	r3, #0
   136ec:	bne	13698 <__assert_fail@plt+0x1fc0>
   136f0:	mov	r0, #1
   136f4:	bx	lr
   136f8:	ldrb	r3, [r0, #1]
   136fc:	cmp	r3, #46	; 0x2e
   13700:	addne	r0, r0, #1
   13704:	bne	136a0 <__assert_fail@plt+0x1fc8>
   13708:	ldrb	r3, [r0, #2]
   1370c:	add	r0, r0, #2
   13710:	cmp	r3, #0
   13714:	beq	13720 <__assert_fail@plt+0x2048>
   13718:	cmp	r3, #47	; 0x2f
   1371c:	bne	136ac <__assert_fail@plt+0x1fd4>
   13720:	mov	r0, #0
   13724:	bx	lr
   13728:	push	{r3, lr}
   1372c:	mov	r2, r0
   13730:	movw	r1, #25052	; 0x61dc
   13734:	movw	r3, #24640	; 0x6040
   13738:	movt	r1, #1
   1373c:	movt	r3, #1
   13740:	mov	r0, #1
   13744:	bl	115b8 <__printf_chk@plt>
   13748:	mov	r2, #5
   1374c:	movw	r1, #25064	; 0x61e8
   13750:	mov	r0, #0
   13754:	movt	r1, #1
   13758:	bl	113fc <dcgettext@plt>
   1375c:	mov	r1, r0
   13760:	mov	r0, #1
   13764:	bl	115b8 <__printf_chk@plt>
   13768:	mov	r2, #5
   1376c:	movw	r1, #25116	; 0x621c
   13770:	mov	r0, #0
   13774:	movt	r1, #1
   13778:	bl	113fc <dcgettext@plt>
   1377c:	mov	r1, r0
   13780:	mov	r0, #1
   13784:	bl	115b8 <__printf_chk@plt>
   13788:	mov	r0, #0
   1378c:	bl	11558 <exit@plt>
   13790:	and	r3, r0, #61440	; 0xf000
   13794:	cmp	r3, #16384	; 0x4000
   13798:	moveq	r3, #100	; 0x64
   1379c:	beq	137dc <__assert_fail@plt+0x2104>
   137a0:	cmp	r3, #40960	; 0xa000
   137a4:	moveq	r3, #108	; 0x6c
   137a8:	beq	137dc <__assert_fail@plt+0x2104>
   137ac:	cmp	r3, #24576	; 0x6000
   137b0:	moveq	r3, #98	; 0x62
   137b4:	beq	137dc <__assert_fail@plt+0x2104>
   137b8:	cmp	r3, #8192	; 0x2000
   137bc:	moveq	r3, #99	; 0x63
   137c0:	beq	137dc <__assert_fail@plt+0x2104>
   137c4:	cmp	r3, #49152	; 0xc000
   137c8:	moveq	r3, #115	; 0x73
   137cc:	beq	137dc <__assert_fail@plt+0x2104>
   137d0:	cmp	r3, #4096	; 0x1000
   137d4:	movne	r3, #45	; 0x2d
   137d8:	moveq	r3, #112	; 0x70
   137dc:	tst	r0, #256	; 0x100
   137e0:	strb	r3, [r1]
   137e4:	moveq	r3, #45	; 0x2d
   137e8:	movne	r3, #114	; 0x72
   137ec:	tst	r0, #128	; 0x80
   137f0:	strb	r3, [r1, #1]
   137f4:	moveq	r3, #45	; 0x2d
   137f8:	movne	r3, #119	; 0x77
   137fc:	tst	r0, #64	; 0x40
   13800:	strb	r3, [r1, #2]
   13804:	moveq	ip, #45	; 0x2d
   13808:	movne	ip, #120	; 0x78
   1380c:	tst	r0, #32
   13810:	strb	ip, [r1, #3]
   13814:	moveq	r3, #45	; 0x2d
   13818:	movne	r3, #114	; 0x72
   1381c:	tst	r0, #16
   13820:	strb	r3, [r1, #4]
   13824:	moveq	r3, #45	; 0x2d
   13828:	movne	r3, #119	; 0x77
   1382c:	tst	r0, #8
   13830:	strb	r3, [r1, #5]
   13834:	moveq	r2, #45	; 0x2d
   13838:	movne	r2, #120	; 0x78
   1383c:	tst	r0, #4
   13840:	strb	r2, [r1, #6]
   13844:	moveq	r3, #45	; 0x2d
   13848:	movne	r3, #114	; 0x72
   1384c:	tst	r0, #2
   13850:	strb	r3, [r1, #7]
   13854:	moveq	r3, #45	; 0x2d
   13858:	movne	r3, #119	; 0x77
   1385c:	tst	r0, #1
   13860:	strb	r3, [r1, #8]
   13864:	moveq	r3, #45	; 0x2d
   13868:	movne	r3, #120	; 0x78
   1386c:	tst	r0, #2048	; 0x800
   13870:	strb	r3, [r1, #9]
   13874:	beq	13888 <__assert_fail@plt+0x21b0>
   13878:	cmp	ip, #120	; 0x78
   1387c:	movne	ip, #83	; 0x53
   13880:	moveq	ip, #115	; 0x73
   13884:	strb	ip, [r1, #3]
   13888:	tst	r0, #1024	; 0x400
   1388c:	beq	138a0 <__assert_fail@plt+0x21c8>
   13890:	cmp	r2, #120	; 0x78
   13894:	movne	r2, #83	; 0x53
   13898:	moveq	r2, #115	; 0x73
   1389c:	strb	r2, [r1, #6]
   138a0:	tst	r0, #512	; 0x200
   138a4:	bxeq	lr
   138a8:	cmp	r3, #120	; 0x78
   138ac:	movne	r3, #84	; 0x54
   138b0:	moveq	r3, #116	; 0x74
   138b4:	strb	r3, [r1, #9]
   138b8:	bx	lr
   138bc:	push	{r3, r4, r5, r6, r7, lr}
   138c0:	subs	r4, r0, #0
   138c4:	beq	13948 <__assert_fail@plt+0x2270>
   138c8:	ldr	r3, [r4]
   138cc:	cmp	r3, #0
   138d0:	beq	13938 <__assert_fail@plt+0x2260>
   138d4:	mov	r2, r4
   138d8:	mov	r3, #0
   138dc:	ldr	r1, [r2, #4]!
   138e0:	add	r3, r3, #1
   138e4:	cmp	r1, #0
   138e8:	bne	138dc <__assert_fail@plt+0x2204>
   138ec:	add	r3, r3, #1
   138f0:	lsl	r0, r3, #2
   138f4:	bl	11474 <xmalloc@plt>
   138f8:	mov	r6, r0
   138fc:	ldr	r0, [r4]
   13900:	cmp	r0, #0
   13904:	beq	13940 <__assert_fail@plt+0x2268>
   13908:	rsb	r7, r4, #4
   1390c:	mov	r5, #0
   13910:	bl	11498 <xstrdup@plt>
   13914:	str	r0, [r6, r5]
   13918:	add	r5, r7, r4
   1391c:	ldr	r0, [r4, #4]!
   13920:	cmp	r0, #0
   13924:	bne	13910 <__assert_fail@plt+0x2238>
   13928:	mov	r3, #0
   1392c:	mov	r0, r6
   13930:	str	r3, [r6, r5]
   13934:	pop	{r3, r4, r5, r6, r7, pc}
   13938:	mov	r0, #4
   1393c:	b	138f4 <__assert_fail@plt+0x221c>
   13940:	mov	r5, r0
   13944:	b	13928 <__assert_fail@plt+0x2250>
   13948:	mov	r0, r4
   1394c:	pop	{r3, r4, r5, r6, r7, pc}
   13950:	push	{r3, r4, r5, lr}
   13954:	subs	r5, r0, #0
   13958:	popeq	{r3, r4, r5, pc}
   1395c:	ldr	r0, [r5]
   13960:	cmp	r0, #0
   13964:	movne	r4, r5
   13968:	beq	1397c <__assert_fail@plt+0x22a4>
   1396c:	bl	113b4 <free@plt>
   13970:	ldr	r0, [r4, #4]!
   13974:	cmp	r0, #0
   13978:	bne	1396c <__assert_fail@plt+0x2294>
   1397c:	mov	r0, r5
   13980:	pop	{r3, r4, r5, lr}
   13984:	b	113b4 <free@plt>
   13988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1398c:	subs	r4, r0, #0
   13990:	ldr	r5, [pc, #536]	; 13bb0 <__assert_fail@plt+0x24d8>
   13994:	sub	sp, sp, #12
   13998:	add	r5, pc, r5
   1399c:	beq	13ba8 <__assert_fail@plt+0x24d0>
   139a0:	bl	11570 <strlen@plt>
   139a4:	mov	r9, #0
   139a8:	mov	r7, r9
   139ac:	mov	r8, r9
   139b0:	mov	r6, r9
   139b4:	mov	fp, r9
   139b8:	mov	sl, r9
   139bc:	add	r0, r0, #1
   139c0:	bl	11474 <xmalloc@plt>
   139c4:	ldr	r3, [pc, #488]	; 13bb4 <__assert_fail@plt+0x24dc>
   139c8:	str	r0, [sp]
   139cc:	ldr	r5, [r5, r3]
   139d0:	ldrb	r3, [r4]
   139d4:	lsl	r3, r3, #1
   139d8:	ldrh	r3, [r5, r3]
   139dc:	tst	r3, #64	; 0x40
   139e0:	beq	13a04 <__assert_fail@plt+0x232c>
   139e4:	mov	r3, r4
   139e8:	ldrb	r2, [r3, #1]
   139ec:	add	r4, r3, #1
   139f0:	mov	r3, r4
   139f4:	lsl	r2, r2, #1
   139f8:	ldrh	r2, [r5, r2]
   139fc:	tst	r2, #64	; 0x40
   13a00:	bne	139e8 <__assert_fail@plt+0x2310>
   13a04:	cmp	r7, #0
   13a08:	beq	13a20 <__assert_fail@plt+0x2348>
   13a0c:	sub	r3, r7, #1
   13a10:	cmp	r9, r3
   13a14:	addlt	r3, r8, r9, lsl #2
   13a18:	strlt	r3, [sp, #4]
   13a1c:	blt	13a4c <__assert_fail@plt+0x2374>
   13a20:	cmp	r8, #0
   13a24:	beq	13b94 <__assert_fail@plt+0x24bc>
   13a28:	lsl	r7, r7, #1
   13a2c:	mov	r0, r8
   13a30:	lsl	r1, r7, #2
   13a34:	bl	1142c <xrealloc@plt>
   13a38:	mov	r8, r0
   13a3c:	add	r3, r8, r9, lsl #2
   13a40:	str	r3, [sp, #4]
   13a44:	mov	r3, #0
   13a48:	str	r3, [r8, r9, lsl #2]
   13a4c:	ldrb	r3, [r4]
   13a50:	cmp	r3, #0
   13a54:	beq	13b0c <__assert_fail@plt+0x2434>
   13a58:	mov	r2, r4
   13a5c:	ldr	lr, [sp]
   13a60:	b	13a84 <__assert_fail@plt+0x23ac>
   13a64:	strb	r3, [lr]
   13a68:	add	lr, lr, #1
   13a6c:	mov	r6, #0
   13a70:	ldrb	r3, [r2, #1]
   13a74:	add	r2, r2, #1
   13a78:	cmp	r3, #0
   13a7c:	mov	r4, r2
   13a80:	beq	13b10 <__assert_fail@plt+0x2438>
   13a84:	lsl	r1, r3, #1
   13a88:	mov	r4, r2
   13a8c:	ldrh	r1, [r5, r1]
   13a90:	tst	r1, #64	; 0x40
   13a94:	beq	13aa4 <__assert_fail@plt+0x23cc>
   13a98:	orr	r0, r6, fp
   13a9c:	orrs	r0, r0, sl
   13aa0:	beq	13b88 <__assert_fail@plt+0x24b0>
   13aa4:	cmp	r6, #0
   13aa8:	bne	13a64 <__assert_fail@plt+0x238c>
   13aac:	cmp	r3, #92	; 0x5c
   13ab0:	moveq	r6, #1
   13ab4:	beq	13a70 <__assert_fail@plt+0x2398>
   13ab8:	cmp	sl, #0
   13abc:	beq	13ad8 <__assert_fail@plt+0x2400>
   13ac0:	cmp	r3, #39	; 0x27
   13ac4:	moveq	sl, r6
   13ac8:	beq	13a70 <__assert_fail@plt+0x2398>
   13acc:	strb	r3, [lr]
   13ad0:	add	lr, lr, #1
   13ad4:	b	13a70 <__assert_fail@plt+0x2398>
   13ad8:	cmp	fp, #0
   13adc:	beq	13af0 <__assert_fail@plt+0x2418>
   13ae0:	cmp	r3, #34	; 0x22
   13ae4:	moveq	fp, sl
   13ae8:	bne	13acc <__assert_fail@plt+0x23f4>
   13aec:	b	13a70 <__assert_fail@plt+0x2398>
   13af0:	cmp	r3, #39	; 0x27
   13af4:	moveq	sl, #1
   13af8:	beq	13a70 <__assert_fail@plt+0x2398>
   13afc:	cmp	r3, #34	; 0x22
   13b00:	moveq	fp, #1
   13b04:	bne	13acc <__assert_fail@plt+0x23f4>
   13b08:	b	13a70 <__assert_fail@plt+0x2398>
   13b0c:	ldr	lr, [sp]
   13b10:	mov	r3, #0
   13b14:	ldr	r0, [sp]
   13b18:	strb	r3, [lr]
   13b1c:	add	r9, r9, #1
   13b20:	bl	11498 <xstrdup@plt>
   13b24:	ldr	r3, [sp, #4]
   13b28:	str	r0, [r3]
   13b2c:	mov	r3, #0
   13b30:	str	r3, [r8, r9, lsl #2]
   13b34:	ldrb	r2, [r4]
   13b38:	lsl	r3, r2, #1
   13b3c:	ldrh	r3, [r5, r3]
   13b40:	tst	r3, #64	; 0x40
   13b44:	beq	13b68 <__assert_fail@plt+0x2490>
   13b48:	mov	r3, r4
   13b4c:	ldrb	r2, [r3, #1]
   13b50:	add	r4, r3, #1
   13b54:	mov	r3, r4
   13b58:	lsl	r1, r2, #1
   13b5c:	ldrh	r1, [r5, r1]
   13b60:	tst	r1, #64	; 0x40
   13b64:	bne	13b4c <__assert_fail@plt+0x2474>
   13b68:	cmp	r2, #0
   13b6c:	bne	139d0 <__assert_fail@plt+0x22f8>
   13b70:	ldr	r0, [sp]
   13b74:	mov	r9, r8
   13b78:	bl	113b4 <free@plt>
   13b7c:	mov	r0, r9
   13b80:	add	sp, sp, #12
   13b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b88:	mov	r6, r0
   13b8c:	mov	sl, r0
   13b90:	b	13b10 <__assert_fail@plt+0x2438>
   13b94:	mov	r0, #32
   13b98:	mov	r7, #8
   13b9c:	bl	11474 <xmalloc@plt>
   13ba0:	mov	r8, r0
   13ba4:	b	13a3c <__assert_fail@plt+0x2364>
   13ba8:	mov	r9, r4
   13bac:	b	13b7c <__assert_fail@plt+0x24a4>
   13bb0:	andeq	r3, r1, r0, ror #12
   13bb4:	andeq	r0, r0, ip, lsr r1
   13bb8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13bbc:	subs	r5, r1, #0
   13bc0:	ldr	r8, [pc, #180]	; 13c7c <__assert_fail@plt+0x25a4>
   13bc4:	add	r8, pc, r8
   13bc8:	beq	13c4c <__assert_fail@plt+0x2574>
   13bcc:	ldr	r6, [r0]
   13bd0:	cmp	r6, #0
   13bd4:	movne	r9, r0
   13bd8:	beq	13c74 <__assert_fail@plt+0x259c>
   13bdc:	ldrb	r4, [r6]
   13be0:	cmp	r4, #0
   13be4:	beq	13c54 <__assert_fail@plt+0x257c>
   13be8:	ldr	r3, [pc, #144]	; 13c80 <__assert_fail@plt+0x25a8>
   13bec:	ldr	r7, [r8, r3]
   13bf0:	b	13c1c <__assert_fail@plt+0x2544>
   13bf4:	cmp	r4, #34	; 0x22
   13bf8:	beq	13c40 <__assert_fail@plt+0x2568>
   13bfc:	mov	r0, r4
   13c00:	mov	r1, r5
   13c04:	bl	11618 <fputc@plt>
   13c08:	cmn	r0, #1
   13c0c:	beq	13c4c <__assert_fail@plt+0x2574>
   13c10:	ldrb	r4, [r6, #1]!
   13c14:	cmp	r4, #0
   13c18:	beq	13c54 <__assert_fail@plt+0x257c>
   13c1c:	lsl	r3, r4, #1
   13c20:	mov	r1, r5
   13c24:	mov	r0, #92	; 0x5c
   13c28:	ldrh	r3, [r7, r3]
   13c2c:	tst	r3, #64	; 0x40
   13c30:	bne	13c40 <__assert_fail@plt+0x2568>
   13c34:	cmp	r4, #39	; 0x27
   13c38:	cmpne	r4, r0
   13c3c:	bne	13bf4 <__assert_fail@plt+0x251c>
   13c40:	bl	11618 <fputc@plt>
   13c44:	cmn	r0, #1
   13c48:	bne	13bfc <__assert_fail@plt+0x2524>
   13c4c:	mov	r0, #1
   13c50:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13c54:	mov	r0, #10
   13c58:	mov	r1, r5
   13c5c:	bl	11618 <fputc@plt>
   13c60:	cmn	r0, #1
   13c64:	beq	13c4c <__assert_fail@plt+0x2574>
   13c68:	ldr	r6, [r9, #4]!
   13c6c:	cmp	r6, #0
   13c70:	bne	13bdc <__assert_fail@plt+0x2504>
   13c74:	mov	r0, #0
   13c78:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13c7c:	andeq	r3, r1, r4, lsr r4
   13c80:	andeq	r0, r0, ip, lsr r1
   13c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c88:	sub	sp, sp, #28
   13c8c:	ldr	ip, [pc, #684]	; 13f40 <__assert_fail@plt+0x2868>
   13c90:	mov	r6, r1
   13c94:	mov	sl, r0
   13c98:	mov	r5, #0
   13c9c:	add	ip, pc, ip
   13ca0:	str	ip, [sp, #12]
   13ca4:	ldr	ip, [pc, #664]	; 13f44 <__assert_fail@plt+0x286c>
   13ca8:	mov	r8, #2000	; 0x7d0
   13cac:	ldr	r1, [r0]
   13cb0:	add	ip, pc, ip
   13cb4:	mov	fp, ip
   13cb8:	b	13cc0 <__assert_fail@plt+0x25e8>
   13cbc:	mov	r5, r4
   13cc0:	add	r4, r5, #1
   13cc4:	cmp	r4, r1
   13cc8:	bge	13ebc <__assert_fail@plt+0x27e4>
   13ccc:	ldr	r3, [r6]
   13cd0:	lsl	r7, r4, #2
   13cd4:	ldr	r0, [r3, r4, lsl #2]
   13cd8:	ldrb	r2, [r0]
   13cdc:	cmp	r2, #64	; 0x40
   13ce0:	bne	13cbc <__assert_fail@plt+0x25e4>
   13ce4:	subs	r8, r8, #1
   13ce8:	beq	13f14 <__assert_fail@plt+0x283c>
   13cec:	add	r0, r0, #1
   13cf0:	mov	r1, fp
   13cf4:	bl	11654 <fopen64@plt>
   13cf8:	subs	r9, r0, #0
   13cfc:	beq	13eb4 <__assert_fail@plt+0x27dc>
   13d00:	mov	r1, #0
   13d04:	mov	r2, #2
   13d08:	bl	1169c <fseek@plt>
   13d0c:	cmn	r0, #1
   13d10:	beq	13eac <__assert_fail@plt+0x27d4>
   13d14:	mov	r0, r9
   13d18:	bl	113e4 <ftell@plt>
   13d1c:	cmn	r0, #1
   13d20:	mov	ip, r0
   13d24:	beq	13eac <__assert_fail@plt+0x27d4>
   13d28:	mov	r1, #0
   13d2c:	mov	r0, r9
   13d30:	mov	r2, r1
   13d34:	str	ip, [sp, #4]
   13d38:	bl	1169c <fseek@plt>
   13d3c:	ldr	ip, [sp, #4]
   13d40:	cmn	r0, #1
   13d44:	beq	13eac <__assert_fail@plt+0x27d4>
   13d48:	add	r0, ip, #1
   13d4c:	bl	11474 <xmalloc@plt>
   13d50:	ldr	ip, [sp, #4]
   13d54:	mov	r3, r9
   13d58:	mov	r1, #1
   13d5c:	mov	r2, ip
   13d60:	str	r0, [sp, #16]
   13d64:	bl	114b0 <fread@plt>
   13d68:	ldr	ip, [sp, #4]
   13d6c:	cmp	ip, r0
   13d70:	mov	r3, r0
   13d74:	beq	13d90 <__assert_fail@plt+0x26b8>
   13d78:	mov	r0, r9
   13d7c:	str	r3, [sp, #8]
   13d80:	bl	113c0 <ferror@plt>
   13d84:	ldr	r3, [sp, #8]
   13d88:	cmp	r0, #0
   13d8c:	bne	13eac <__assert_fail@plt+0x27d4>
   13d90:	ldr	ip, [sp, #16]
   13d94:	mov	r0, #0
   13d98:	strb	r0, [ip, r3]
   13d9c:	ldrb	r3, [ip]
   13da0:	cmp	r3, #0
   13da4:	beq	13de8 <__assert_fail@plt+0x2710>
   13da8:	ldr	r2, [pc, #408]	; 13f48 <__assert_fail@plt+0x2870>
   13dac:	lsl	r3, r3, #1
   13db0:	ldr	ip, [sp, #12]
   13db4:	ldr	r1, [ip, r2]
   13db8:	ldrh	r3, [r1, r3]
   13dbc:	tst	r3, #64	; 0x40
   13dc0:	beq	13ec4 <__assert_fail@plt+0x27ec>
   13dc4:	ldr	r2, [sp, #16]
   13dc8:	b	13ddc <__assert_fail@plt+0x2704>
   13dcc:	lsl	r3, r3, #1
   13dd0:	ldrh	r3, [r1, r3]
   13dd4:	tst	r3, #64	; 0x40
   13dd8:	beq	13ec4 <__assert_fail@plt+0x27ec>
   13ddc:	ldrb	r3, [r2, #1]!
   13de0:	cmp	r3, #0
   13de4:	bne	13dcc <__assert_fail@plt+0x26f4>
   13de8:	mov	r0, #4
   13dec:	mov	ip, #0
   13df0:	str	ip, [sp, #4]
   13df4:	bl	11474 <xmalloc@plt>
   13df8:	ldr	ip, [sp, #4]
   13dfc:	mov	r1, #0
   13e00:	str	r0, [sp, #20]
   13e04:	str	r1, [r0]
   13e08:	ldr	r0, [r6]
   13e0c:	str	ip, [sp, #8]
   13e10:	bl	138bc <__assert_fail@plt+0x21e4>
   13e14:	ldr	r3, [sp, #8]
   13e18:	ldr	ip, [sp, #4]
   13e1c:	str	r0, [r6]
   13e20:	ldr	r1, [sl]
   13e24:	str	ip, [sp, #4]
   13e28:	add	r1, r1, #1
   13e2c:	str	r3, [sp, #8]
   13e30:	add	r1, r1, r3
   13e34:	lsl	r1, r1, #2
   13e38:	bl	1142c <xrealloc@plt>
   13e3c:	ldr	r3, [sp, #8]
   13e40:	ldr	r2, [sl]
   13e44:	add	lr, r7, #4
   13e48:	rsb	r2, r4, r2
   13e4c:	lsl	r2, r2, #2
   13e50:	mov	r1, r0
   13e54:	add	r0, r3, r4
   13e58:	str	r1, [r6]
   13e5c:	mov	r4, r5
   13e60:	add	r0, r1, r0, lsl #2
   13e64:	add	r1, r1, lr
   13e68:	str	r3, [sp, #8]
   13e6c:	bl	1139c <memmove@plt>
   13e70:	ldr	ip, [sp, #4]
   13e74:	ldr	r0, [r6]
   13e78:	ldr	r1, [sp, #20]
   13e7c:	mov	r2, ip
   13e80:	add	r0, r0, r7
   13e84:	bl	113cc <memcpy@plt>
   13e88:	ldr	r2, [sl]
   13e8c:	ldr	r3, [sp, #8]
   13e90:	sub	r2, r2, #1
   13e94:	ldr	r0, [sp, #20]
   13e98:	add	r3, r2, r3
   13e9c:	str	r3, [sl]
   13ea0:	bl	113b4 <free@plt>
   13ea4:	ldr	r0, [sp, #16]
   13ea8:	bl	113b4 <free@plt>
   13eac:	mov	r0, r9
   13eb0:	bl	115dc <fclose@plt>
   13eb4:	ldr	r1, [sl]
   13eb8:	b	13cbc <__assert_fail@plt+0x25e4>
   13ebc:	add	sp, sp, #28
   13ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec4:	ldr	r0, [sp, #16]
   13ec8:	bl	13988 <__assert_fail@plt+0x22b0>
   13ecc:	ldr	ip, [r0]
   13ed0:	str	r0, [sp, #20]
   13ed4:	ldr	r0, [r6]
   13ed8:	str	ip, [sp, #4]
   13edc:	bl	138bc <__assert_fail@plt+0x21e4>
   13ee0:	ldr	ip, [sp, #4]
   13ee4:	cmp	ip, #0
   13ee8:	moveq	r3, ip
   13eec:	str	r0, [r6]
   13ef0:	beq	13e20 <__assert_fail@plt+0x2748>
   13ef4:	ldr	r2, [sp, #20]
   13ef8:	mov	r3, #0
   13efc:	ldr	r1, [r2, #4]!
   13f00:	add	r3, r3, #1
   13f04:	cmp	r1, #0
   13f08:	lsl	ip, r3, #2
   13f0c:	bne	13efc <__assert_fail@plt+0x2824>
   13f10:	b	13e20 <__assert_fail@plt+0x2748>
   13f14:	ldr	ip, [sp, #12]
   13f18:	mov	r1, #1
   13f1c:	ldr	r0, [pc, #40]	; 13f4c <__assert_fail@plt+0x2874>
   13f20:	ldr	r2, [pc, #40]	; 13f50 <__assert_fail@plt+0x2878>
   13f24:	ldr	r3, [r3]
   13f28:	ldr	r0, [ip, r0]
   13f2c:	add	r2, pc, r2
   13f30:	ldr	r0, [r0]
   13f34:	bl	115c4 <__fprintf_chk@plt>
   13f38:	mov	r0, #1
   13f3c:	bl	11624 <xexit@plt>
   13f40:	andeq	r3, r1, ip, asr r3
   13f44:	andeq	r2, r0, r4, asr r6
   13f48:	andeq	r0, r0, ip, lsr r1
   13f4c:	andeq	r0, r0, r0, asr #2
   13f50:	andeq	r2, r0, ip, lsr #7
   13f54:	subs	r3, r0, #0
   13f58:	beq	13f80 <__assert_fail@plt+0x28a8>
   13f5c:	ldr	r0, [r3]
   13f60:	cmp	r0, #0
   13f64:	bxeq	lr
   13f68:	mov	r0, #0
   13f6c:	ldr	r2, [r3, #4]!
   13f70:	add	r0, r0, #1
   13f74:	cmp	r2, #0
   13f78:	bne	13f6c <__assert_fail@plt+0x2894>
   13f7c:	bx	lr
   13f80:	mov	r0, r3
   13f84:	bx	lr
   13f88:	ldr	r3, [pc, #488]	; 14178 <__assert_fail@plt+0x2aa0>
   13f8c:	push	{r4, r5, r6, lr}
   13f90:	ldr	r0, [pc, r3]
   13f94:	cmp	r0, #0
   13f98:	popne	{r4, r5, r6, pc}
   13f9c:	ldr	r0, [pc, #472]	; 1417c <__assert_fail@plt+0x2aa4>
   13fa0:	add	r0, pc, r0
   13fa4:	bl	114d4 <getenv@plt>
   13fa8:	subs	r4, r0, #0
   13fac:	beq	14024 <__assert_fail@plt+0x294c>
   13fb0:	mov	r1, #7
   13fb4:	bl	115d0 <access@plt>
   13fb8:	cmp	r0, #0
   13fbc:	bne	14060 <__assert_fail@plt+0x2988>
   13fc0:	ldr	r0, [pc, #440]	; 14180 <__assert_fail@plt+0x2aa8>
   13fc4:	add	r0, pc, r0
   13fc8:	bl	114d4 <getenv@plt>
   13fcc:	ldr	r0, [pc, #432]	; 14184 <__assert_fail@plt+0x2aac>
   13fd0:	add	r0, pc, r0
   13fd4:	bl	114d4 <getenv@plt>
   13fd8:	mov	r0, r4
   13fdc:	bl	11570 <strlen@plt>
   13fe0:	mov	r3, r0
   13fe4:	mov	r5, r0
   13fe8:	add	r6, r3, #1
   13fec:	add	r0, r0, #2
   13ff0:	bl	11474 <xmalloc@plt>
   13ff4:	mov	r1, r4
   13ff8:	bl	114a4 <strcpy@plt>
   13ffc:	ldr	r2, [pc, #388]	; 14188 <__assert_fail@plt+0x2ab0>
   14000:	mov	r1, #0
   14004:	add	r2, pc, r2
   14008:	mov	r3, r0
   1400c:	mov	r0, #47	; 0x2f
   14010:	str	r3, [r2]
   14014:	strb	r0, [r3, r5]
   14018:	mov	r0, r3
   1401c:	strb	r1, [r3, r6]
   14020:	pop	{r4, r5, r6, pc}
   14024:	ldr	r0, [pc, #352]	; 1418c <__assert_fail@plt+0x2ab4>
   14028:	add	r0, pc, r0
   1402c:	bl	114d4 <getenv@plt>
   14030:	mov	r4, r0
   14034:	cmp	r4, #0
   14038:	beq	14074 <__assert_fail@plt+0x299c>
   1403c:	mov	r0, r4
   14040:	mov	r1, #7
   14044:	bl	115d0 <access@plt>
   14048:	cmp	r0, #0
   1404c:	bne	14104 <__assert_fail@plt+0x2a2c>
   14050:	ldr	r0, [pc, #312]	; 14190 <__assert_fail@plt+0x2ab8>
   14054:	add	r0, pc, r0
   14058:	bl	114d4 <getenv@plt>
   1405c:	b	13fd8 <__assert_fail@plt+0x2900>
   14060:	ldr	r0, [pc, #300]	; 14194 <__assert_fail@plt+0x2abc>
   14064:	add	r0, pc, r0
   14068:	bl	114d4 <getenv@plt>
   1406c:	mov	r4, r0
   14070:	b	14034 <__assert_fail@plt+0x295c>
   14074:	ldr	r0, [pc, #284]	; 14198 <__assert_fail@plt+0x2ac0>
   14078:	add	r0, pc, r0
   1407c:	bl	114d4 <getenv@plt>
   14080:	mov	r4, r0
   14084:	cmp	r4, #0
   14088:	beq	140a0 <__assert_fail@plt+0x29c8>
   1408c:	mov	r0, r4
   14090:	mov	r1, #7
   14094:	bl	115d0 <access@plt>
   14098:	cmp	r0, #0
   1409c:	beq	13fd8 <__assert_fail@plt+0x2900>
   140a0:	ldr	r4, [pc, #244]	; 1419c <__assert_fail@plt+0x2ac4>
   140a4:	mov	r1, #7
   140a8:	add	r4, pc, r4
   140ac:	mov	r0, r4
   140b0:	bl	115d0 <access@plt>
   140b4:	cmp	r0, #0
   140b8:	moveq	r6, #5
   140bc:	moveq	r0, #6
   140c0:	moveq	r5, #4
   140c4:	beq	13ff0 <__assert_fail@plt+0x2918>
   140c8:	ldr	r5, [pc, #208]	; 141a0 <__assert_fail@plt+0x2ac8>
   140cc:	mov	r1, #7
   140d0:	add	r5, pc, r5
   140d4:	add	r4, r5, #8
   140d8:	mov	r0, r4
   140dc:	bl	115d0 <access@plt>
   140e0:	cmp	r0, #0
   140e4:	bne	14118 <__assert_fail@plt+0x2a40>
   140e8:	mov	r0, r4
   140ec:	bl	11570 <strlen@plt>
   140f0:	mov	r6, r0
   140f4:	mov	r5, r0
   140f8:	add	r6, r6, #1
   140fc:	add	r0, r0, #2
   14100:	b	13ff0 <__assert_fail@plt+0x2918>
   14104:	ldr	r0, [pc, #152]	; 141a4 <__assert_fail@plt+0x2acc>
   14108:	add	r0, pc, r0
   1410c:	bl	114d4 <getenv@plt>
   14110:	mov	r4, r0
   14114:	b	14084 <__assert_fail@plt+0x29ac>
   14118:	add	r4, r5, #20
   1411c:	mov	r1, #7
   14120:	mov	r0, r4
   14124:	bl	115d0 <access@plt>
   14128:	cmp	r0, #0
   1412c:	beq	140e8 <__assert_fail@plt+0x2a10>
   14130:	mov	r0, r5
   14134:	mov	r1, #7
   14138:	bl	115d0 <access@plt>
   1413c:	cmp	r0, #0
   14140:	bne	14160 <__assert_fail@plt+0x2a88>
   14144:	mov	r0, r5
   14148:	mov	r4, r5
   1414c:	bl	11570 <strlen@plt>
   14150:	mov	r5, r0
   14154:	add	r0, r0, #2
   14158:	add	r6, r5, #1
   1415c:	b	13ff0 <__assert_fail@plt+0x2918>
   14160:	ldr	r4, [pc, #64]	; 141a8 <__assert_fail@plt+0x2ad0>
   14164:	mov	r6, #2
   14168:	mov	r0, #3
   1416c:	mov	r5, #1
   14170:	add	r4, pc, r4
   14174:	b	13ff0 <__assert_fail@plt+0x2918>
   14178:	andeq	r3, r1, r0, lsl r6
   1417c:	muleq	r0, r4, r3
   14180:	andeq	r2, r0, r8, ror r3
   14184:	andeq	r2, r0, r0, ror r3
   14188:	muleq	r1, ip, r5
   1418c:	andeq	r2, r0, r4, lsl r3
   14190:	andeq	r2, r0, ip, ror #5
   14194:	ldrdeq	r2, [r0], -r8
   14198:	andeq	r2, r0, r8, asr #5
   1419c:	andeq	r2, r0, r4, lsl #5
   141a0:	andeq	r2, r0, r8, lsr r2
   141a4:	andeq	r2, r0, r8, lsr r2
   141a8:			; <UNDEFINED> instruction: 0x000021b8
   141ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   141b0:	sub	sp, sp, #12
   141b4:	mov	r6, r0
   141b8:	bl	13f88 <__assert_fail@plt+0x28b0>
   141bc:	ldr	r9, [pc, #236]	; 142b0 <__assert_fail@plt+0x2bd8>
   141c0:	cmp	r6, #0
   141c4:	add	r9, pc, r9
   141c8:	mov	r7, r0
   141cc:	beq	14260 <__assert_fail@plt+0x2b88>
   141d0:	mov	r0, r6
   141d4:	bl	11570 <strlen@plt>
   141d8:	mov	r8, r0
   141dc:	mov	r4, r0
   141e0:	mov	r0, r7
   141e4:	bl	11570 <strlen@plt>
   141e8:	mov	r5, r0
   141ec:	add	r0, r0, r4
   141f0:	add	r0, r0, #9
   141f4:	bl	11474 <xmalloc@plt>
   141f8:	mov	r1, r7
   141fc:	mov	r4, r0
   14200:	bl	114a4 <strcpy@plt>
   14204:	ldr	r2, [pc, #168]	; 142b4 <__assert_fail@plt+0x2bdc>
   14208:	add	r3, r4, r5
   1420c:	add	ip, r5, #8
   14210:	add	r2, pc, r2
   14214:	ldm	r2!, {r0, r1}
   14218:	ldrb	r2, [r2]
   1421c:	str	r0, [r4, r5]
   14220:	add	r0, r4, ip
   14224:	str	r1, [r3, #4]
   14228:	mov	r1, r6
   1422c:	strb	r2, [r3, #8]
   14230:	bl	114a4 <strcpy@plt>
   14234:	mov	r0, r4
   14238:	mov	r1, r8
   1423c:	bl	114c8 <mkstemps64@plt>
   14240:	cmn	r0, #1
   14244:	beq	14274 <__assert_fail@plt+0x2b9c>
   14248:	bl	116cc <close@plt>
   1424c:	cmp	r0, #0
   14250:	bne	142ac <__assert_fail@plt+0x2bd4>
   14254:	mov	r0, r4
   14258:	add	sp, sp, #12
   1425c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14260:	mov	r8, r6
   14264:	ldr	r6, [pc, #76]	; 142b8 <__assert_fail@plt+0x2be0>
   14268:	mov	r4, r8
   1426c:	add	r6, pc, r6
   14270:	b	141e0 <__assert_fail@plt+0x2b08>
   14274:	ldr	r3, [pc, #64]	; 142bc <__assert_fail@plt+0x2be4>
   14278:	ldr	r3, [r9, r3]
   1427c:	ldr	r4, [r3]
   14280:	bl	11594 <__errno_location@plt>
   14284:	ldr	r0, [r0]
   14288:	bl	1151c <strerror@plt>
   1428c:	ldr	r2, [pc, #44]	; 142c0 <__assert_fail@plt+0x2be8>
   14290:	mov	r3, r7
   14294:	mov	r1, #1
   14298:	add	r2, pc, r2
   1429c:	str	r0, [sp]
   142a0:	mov	r0, r4
   142a4:	bl	115c4 <__fprintf_chk@plt>
   142a8:	bl	116c0 <abort@plt>
   142ac:	bl	116c0 <abort@plt>
   142b0:	andeq	r2, r1, r4, lsr lr
   142b4:	andeq	r2, r0, r8, lsr r1
   142b8:			; <UNDEFINED> instruction: 0x000017b0
   142bc:	andeq	r0, r0, r0, asr #2
   142c0:	strheq	r2, [r0], -ip
   142c4:	ldr	r3, [r0]
   142c8:	tst	r3, #1073741824	; 0x40000000
   142cc:	orrne	r3, r3, #-2147483648	; 0x80000000
   142d0:	biceq	r3, r3, #-2147483648	; 0x80000000
   142d4:	add	r0, r0, r3
   142d8:	bx	lr
   142dc:	cmp	r1, #0
   142e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142e4:	mov	r6, r0
   142e8:	sub	sp, sp, #12
   142ec:	mov	r9, r2
   142f0:	beq	14374 <__assert_fail@plt+0x2c9c>
   142f4:	sub	r1, r1, #1
   142f8:	mov	r7, #0
   142fc:	str	r1, [sp, #4]
   14300:	mov	r8, r1
   14304:	add	r4, r7, r8
   14308:	add	r4, r4, r4, lsr #31
   1430c:	asr	r4, r4, #1
   14310:	lsl	r5, r4, #3
   14314:	add	fp, r6, r5
   14318:	mov	r0, fp
   1431c:	bl	142c4 <__assert_fail@plt+0x2bec>
   14320:	ldr	r3, [sp, #4]
   14324:	cmp	r3, r4
   14328:	mov	sl, r0
   1432c:	add	r0, r5, #8
   14330:	add	r0, r6, r0
   14334:	beq	14384 <__assert_fail@plt+0x2cac>
   14338:	bl	142c4 <__assert_fail@plt+0x2bec>
   1433c:	cmp	sl, r9
   14340:	sub	r0, r0, #1
   14344:	bls	14364 <__assert_fail@plt+0x2c8c>
   14348:	cmp	r4, r7
   1434c:	sub	r8, r4, #1
   14350:	bne	14304 <__assert_fail@plt+0x2c2c>
   14354:	mov	fp, #0
   14358:	mov	r0, fp
   1435c:	add	sp, sp, #12
   14360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14364:	cmp	r0, r9
   14368:	add	r7, r4, #1
   1436c:	bcc	14304 <__assert_fail@plt+0x2c2c>
   14370:	b	14358 <__assert_fail@plt+0x2c80>
   14374:	mov	fp, r1
   14378:	mov	r0, fp
   1437c:	add	sp, sp, #12
   14380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14384:	cmp	sl, r9
   14388:	bhi	14348 <__assert_fail@plt+0x2c70>
   1438c:	b	14358 <__assert_fail@plt+0x2c80>
   14390:	cmp	r0, #1
   14394:	beq	143c8 <__assert_fail@plt+0x2cf0>
   14398:	cmp	r0, #2
   1439c:	beq	143bc <__assert_fail@plt+0x2ce4>
   143a0:	cmp	r0, #0
   143a4:	beq	143b0 <__assert_fail@plt+0x2cd8>
   143a8:	mov	r0, #0
   143ac:	bx	lr
   143b0:	ldr	r0, [pc, #28]	; 143d4 <__assert_fail@plt+0x2cfc>
   143b4:	add	r0, pc, r0
   143b8:	bx	lr
   143bc:	ldr	r0, [pc, #20]	; 143d8 <__assert_fail@plt+0x2d00>
   143c0:	add	r0, pc, r0
   143c4:	bx	lr
   143c8:	ldr	r0, [pc, #12]	; 143dc <__assert_fail@plt+0x2d04>
   143cc:	add	r0, pc, r0
   143d0:	bx	lr
   143d4:	andeq	r0, r0, r0, lsl #23
   143d8:	andeq	r0, r0, r4, lsl #23
   143dc:	andeq	r0, r0, r0, ror fp
   143e0:	ldr	r3, [pc, #276]	; 144fc <__assert_fail@plt+0x2e24>
   143e4:	ldr	r2, [pc, #276]	; 14500 <__assert_fail@plt+0x2e28>
   143e8:	add	r3, pc, r3
   143ec:	push	{r4, r5, lr}
   143f0:	mov	r4, r0
   143f4:	ldr	r2, [r3, r2]
   143f8:	sub	sp, sp, #12
   143fc:	sub	r5, r1, #2
   14400:	cmp	r2, #0
   14404:	beq	144dc <__assert_fail@plt+0x2e04>
   14408:	mov	r0, r5
   1440c:	add	r1, sp, #4
   14410:	bl	114ec <__gnu_Unwind_Find_exidx@plt>
   14414:	cmp	r0, #0
   14418:	beq	144a8 <__assert_fail@plt+0x2dd0>
   1441c:	mov	r2, r5
   14420:	ldr	r1, [sp, #4]
   14424:	bl	142dc <__assert_fail@plt+0x2c04>
   14428:	subs	r5, r0, #0
   1442c:	beq	144a8 <__assert_fail@plt+0x2dd0>
   14430:	bl	142c4 <__assert_fail@plt+0x2bec>
   14434:	ldr	r3, [r5, #4]
   14438:	cmp	r3, #1
   1443c:	str	r0, [r4, #72]	; 0x48
   14440:	beq	14490 <__assert_fail@plt+0x2db8>
   14444:	cmp	r3, #0
   14448:	add	r0, r5, #4
   1444c:	strlt	r0, [r4, #76]	; 0x4c
   14450:	movlt	r3, #1
   14454:	strlt	r3, [r4, #80]	; 0x50
   14458:	blt	1446c <__assert_fail@plt+0x2d94>
   1445c:	bl	142c4 <__assert_fail@plt+0x2bec>
   14460:	mov	r3, #0
   14464:	str	r3, [r4, #80]	; 0x50
   14468:	str	r0, [r4, #76]	; 0x4c
   1446c:	ldr	r3, [r0]
   14470:	cmp	r3, #0
   14474:	blt	144c0 <__assert_fail@plt+0x2de8>
   14478:	bl	142c4 <__assert_fail@plt+0x2bec>
   1447c:	mov	r3, #0
   14480:	str	r0, [r4, #16]
   14484:	mov	r0, r3
   14488:	add	sp, sp, #12
   1448c:	pop	{r4, r5, pc}
   14490:	mov	r3, #5
   14494:	mov	r2, #0
   14498:	mov	r0, r3
   1449c:	str	r2, [r4, #16]
   144a0:	add	sp, sp, #12
   144a4:	pop	{r4, r5, pc}
   144a8:	mov	r3, #9
   144ac:	mov	r2, #0
   144b0:	mov	r0, r3
   144b4:	str	r2, [r4, #16]
   144b8:	add	sp, sp, #12
   144bc:	pop	{r4, r5, pc}
   144c0:	ubfx	r0, r3, #24, #4
   144c4:	bl	14390 <__assert_fail@plt+0x2cb8>
   144c8:	cmp	r0, #0
   144cc:	str	r0, [r4, #16]
   144d0:	moveq	r3, #9
   144d4:	movne	r3, #0
   144d8:	b	14484 <__assert_fail@plt+0x2dac>
   144dc:	ldr	r2, [pc, #32]	; 14504 <__assert_fail@plt+0x2e2c>
   144e0:	ldr	r1, [pc, #32]	; 14508 <__assert_fail@plt+0x2e30>
   144e4:	ldr	r2, [r3, r2]
   144e8:	ldr	r0, [r3, r1]
   144ec:	rsb	r3, r0, r2
   144f0:	asr	r3, r3, #3
   144f4:	str	r3, [sp, #4]
   144f8:	b	1441c <__assert_fail@plt+0x2d44>
   144fc:	andeq	r2, r1, r0, lsl ip
   14500:	andeq	r0, r0, r4, asr #2
   14504:	andeq	r0, r0, r8, asr #2
   14508:	andeq	r0, r0, r0, asr r1
   1450c:	ldr	r3, [r0]
   14510:	push	{r4, lr}
   14514:	tst	r3, #1
   14518:	mov	r4, r0
   1451c:	bne	14534 <__assert_fail@plt+0x2e5c>
   14520:	tst	r3, #2
   14524:	add	r0, r0, #72	; 0x48
   14528:	beq	14558 <__assert_fail@plt+0x2e80>
   1452c:	bl	15304 <__assert_fail@plt+0x3c2c>
   14530:	ldr	r3, [r4]
   14534:	tst	r3, #4
   14538:	beq	14568 <__assert_fail@plt+0x2e90>
   1453c:	tst	r3, #8
   14540:	beq	1457c <__assert_fail@plt+0x2ea4>
   14544:	tst	r3, #16
   14548:	popne	{r4, pc}
   1454c:	add	r0, r4, #464	; 0x1d0
   14550:	pop	{r4, lr}
   14554:	b	153ac <__assert_fail@plt+0x3cd4>
   14558:	bl	152f4 <__assert_fail@plt+0x3c1c>
   1455c:	ldr	r3, [r4]
   14560:	tst	r3, #4
   14564:	bne	1453c <__assert_fail@plt+0x2e64>
   14568:	add	r0, r4, #208	; 0xd0
   1456c:	bl	15314 <__assert_fail@plt+0x3c3c>
   14570:	ldr	r3, [r4]
   14574:	tst	r3, #8
   14578:	bne	14544 <__assert_fail@plt+0x2e6c>
   1457c:	add	r0, r4, #336	; 0x150
   14580:	bl	15324 <__assert_fail@plt+0x3c4c>
   14584:	ldr	r3, [r4]
   14588:	tst	r3, #16
   1458c:	popne	{r4, pc}
   14590:	b	1454c <__assert_fail@plt+0x2e74>
   14594:	ldr	r3, [r0]
   14598:	cmp	r3, #0
   1459c:	ldrne	r0, [r3, r0]
   145a0:	moveq	r0, r3
   145a4:	bx	lr
   145a8:	mov	r0, #9
   145ac:	bx	lr
   145b0:	nop	{0}
   145b4:	bx	lr
   145b8:	push	{r4, r5, r6, lr}
   145bc:	mov	r4, r0
   145c0:	mov	r5, r1
   145c4:	b	145ec <__assert_fail@plt+0x2f14>
   145c8:	ldr	ip, [r5, #64]	; 0x40
   145cc:	mov	r0, #1
   145d0:	ldr	r3, [r4, #16]
   145d4:	mov	r1, r4
   145d8:	mov	r2, r5
   145dc:	str	ip, [r4, #20]
   145e0:	blx	r3
   145e4:	cmp	r0, #8
   145e8:	bne	14604 <__assert_fail@plt+0x2f2c>
   145ec:	mov	r0, r4
   145f0:	ldr	r1, [r5, #64]	; 0x40
   145f4:	bl	143e0 <__assert_fail@plt+0x2d08>
   145f8:	subs	r6, r0, #0
   145fc:	beq	145c8 <__assert_fail@plt+0x2ef0>
   14600:	bl	116c0 <abort@plt>
   14604:	cmp	r0, #7
   14608:	bne	14600 <__assert_fail@plt+0x2f28>
   1460c:	mov	r0, r6
   14610:	ldr	r1, [r5, #64]	; 0x40
   14614:	bl	145b0 <__assert_fail@plt+0x2ed8>
   14618:	add	r0, r5, #4
   1461c:	bl	152e0 <__assert_fail@plt+0x3c08>
   14620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14624:	add	r5, r1, #4
   14628:	sub	sp, sp, #980	; 0x3d4
   1462c:	mov	r4, r0
   14630:	mov	ip, r2
   14634:	add	r3, sp, #20
   14638:	str	r3, [sp, #12]
   1463c:	add	lr, sp, #20
   14640:	ldm	r5!, {r0, r1, r2, r3}
   14644:	cmp	ip, #0
   14648:	ldr	r9, [r4, #12]
   1464c:	mov	r8, #0
   14650:	ldr	sl, [r4, #24]
   14654:	movne	fp, #10
   14658:	moveq	fp, #9
   1465c:	add	r6, sp, #16
   14660:	stmia	lr!, {r0, r1, r2, r3}
   14664:	add	r7, sp, #496	; 0x1f0
   14668:	ldm	r5!, {r0, r1, r2, r3}
   1466c:	stmia	lr!, {r0, r1, r2, r3}
   14670:	ldm	r5!, {r0, r1, r2, r3}
   14674:	stmia	lr!, {r0, r1, r2, r3}
   14678:	ldm	r5, {r0, r1, r2, r3}
   1467c:	stm	lr, {r0, r1, r2, r3}
   14680:	mov	r0, r4
   14684:	ldr	r1, [sp, #80]	; 0x50
   14688:	str	r8, [sp, #16]
   1468c:	bl	143e0 <__assert_fail@plt+0x2d08>
   14690:	mov	r5, r0
   14694:	cmp	r5, #0
   14698:	beq	146d4 <__assert_fail@plt+0x2ffc>
   1469c:	ldr	r0, [sp, #72]	; 0x48
   146a0:	mov	r2, r4
   146a4:	str	r6, [sp]
   146a8:	orr	r1, fp, #16
   146ac:	str	sl, [sp, #4]
   146b0:	mov	r3, r4
   146b4:	str	r0, [sp, #84]	; 0x54
   146b8:	mov	r0, #1
   146bc:	blx	r9
   146c0:	cmp	r0, #0
   146c4:	bne	14768 <__assert_fail@plt+0x3090>
   146c8:	mov	r0, r5
   146cc:	add	sp, sp, #980	; 0x3d4
   146d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d4:	ldr	r3, [sp, #80]	; 0x50
   146d8:	mov	r1, r6
   146dc:	mov	r2, #480	; 0x1e0
   146e0:	mov	r0, r7
   146e4:	str	r3, [r4, #20]
   146e8:	bl	113cc <memcpy@plt>
   146ec:	ldr	r3, [r4, #16]
   146f0:	mov	r1, r4
   146f4:	mov	r2, r7
   146f8:	mov	r0, fp
   146fc:	blx	r3
   14700:	ldr	r3, [sp, #552]	; 0x228
   14704:	mov	r1, fp
   14708:	str	r6, [sp]
   1470c:	str	sl, [sp, #4]
   14710:	mov	r2, r4
   14714:	str	r3, [sp, #84]	; 0x54
   14718:	mov	r3, r4
   1471c:	mov	r8, r0
   14720:	mov	r0, #1
   14724:	blx	r9
   14728:	cmp	r0, #0
   1472c:	bne	14768 <__assert_fail@plt+0x3090>
   14730:	mov	r0, r6
   14734:	mov	r1, r7
   14738:	mov	r2, #480	; 0x1e0
   1473c:	bl	113cc <memcpy@plt>
   14740:	cmp	r8, #8
   14744:	bne	14760 <__assert_fail@plt+0x3088>
   14748:	mov	r0, r4
   1474c:	ldr	r1, [sp, #80]	; 0x50
   14750:	bl	143e0 <__assert_fail@plt+0x2d08>
   14754:	mov	fp, #9
   14758:	mov	r5, r0
   1475c:	b	14694 <__assert_fail@plt+0x2fbc>
   14760:	cmp	r8, #7
   14764:	beq	14774 <__assert_fail@plt+0x309c>
   14768:	mov	r0, #9
   1476c:	add	sp, sp, #980	; 0x3d4
   14770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14774:	mov	r0, r5
   14778:	ldr	r1, [sp, #80]	; 0x50
   1477c:	bl	145b0 <__assert_fail@plt+0x2ed8>
   14780:	add	r0, sp, #20
   14784:	bl	152e0 <__assert_fail@plt+0x3c08>
   14788:	ldr	r0, [r0, #68]	; 0x44
   1478c:	bx	lr
   14790:	ldr	r3, [r1, #60]	; 0x3c
   14794:	push	{r4, r5, r6, r7, lr}
   14798:	add	lr, r1, #4
   1479c:	str	r3, [r1, #64]	; 0x40
   147a0:	mov	r7, r1
   147a4:	mov	r4, r0
   147a8:	sub	sp, sp, #484	; 0x1e4
   147ac:	ldm	lr!, {r0, r1, r2, r3}
   147b0:	add	ip, sp, #4
   147b4:	add	r6, sp, #480	; 0x1e0
   147b8:	mvn	r5, #0
   147bc:	stmia	ip!, {r0, r1, r2, r3}
   147c0:	ldm	lr!, {r0, r1, r2, r3}
   147c4:	stmia	ip!, {r0, r1, r2, r3}
   147c8:	ldm	lr!, {r0, r1, r2, r3}
   147cc:	stmia	ip!, {r0, r1, r2, r3}
   147d0:	ldm	lr, {r0, r1, r2, r3}
   147d4:	stm	ip, {r0, r1, r2, r3}
   147d8:	str	r5, [r6, #-480]!	; 0xfffffe20
   147dc:	b	147fc <__assert_fail@plt+0x3124>
   147e0:	ldr	r3, [r4, #16]
   147e4:	mov	r1, r4
   147e8:	mov	r2, sp
   147ec:	blx	r3
   147f0:	cmp	r0, #8
   147f4:	mov	r5, r0
   147f8:	bne	1481c <__assert_fail@plt+0x3144>
   147fc:	mov	r0, r4
   14800:	ldr	r1, [sp, #64]	; 0x40
   14804:	bl	143e0 <__assert_fail@plt+0x2d08>
   14808:	cmp	r0, #0
   1480c:	beq	147e0 <__assert_fail@plt+0x3108>
   14810:	mov	r0, #9
   14814:	add	sp, sp, #484	; 0x1e4
   14818:	pop	{r4, r5, r6, r7, pc}
   1481c:	mov	r0, sp
   14820:	bl	1450c <__assert_fail@plt+0x2e34>
   14824:	cmp	r5, #6
   14828:	bne	14810 <__assert_fail@plt+0x3138>
   1482c:	mov	r0, r4
   14830:	mov	r1, r7
   14834:	bl	145b8 <__assert_fail@plt+0x2ee0>
   14838:	push	{r4}		; (str r4, [sp, #-4]!)
   1483c:	ldr	r4, [r3, #60]	; 0x3c
   14840:	str	r1, [r0, #12]
   14844:	mov	r1, r3
   14848:	str	r2, [r0, #24]
   1484c:	mov	r2, #0
   14850:	str	r4, [r3, #64]	; 0x40
   14854:	pop	{r4}		; (ldr r4, [sp], #4)
   14858:	b	14620 <__assert_fail@plt+0x2f48>
   1485c:	push	{r4, r5, r6, lr}
   14860:	mov	r4, r0
   14864:	ldr	r6, [r0, #12]
   14868:	mov	r5, r1
   1486c:	ldr	r3, [r0, #20]
   14870:	cmp	r6, #0
   14874:	str	r3, [r1, #64]	; 0x40
   14878:	beq	14888 <__assert_fail@plt+0x31b0>
   1487c:	mov	r2, #1
   14880:	bl	14620 <__assert_fail@plt+0x2f48>
   14884:	bl	116c0 <abort@plt>
   14888:	ldr	r3, [r0, #16]
   1488c:	mov	r1, r4
   14890:	mov	r0, #2
   14894:	mov	r2, r5
   14898:	blx	r3
   1489c:	cmp	r0, #7
   148a0:	beq	148bc <__assert_fail@plt+0x31e4>
   148a4:	cmp	r0, #8
   148a8:	bne	148b8 <__assert_fail@plt+0x31e0>
   148ac:	mov	r0, r4
   148b0:	mov	r1, r5
   148b4:	bl	145b8 <__assert_fail@plt+0x2ee0>
   148b8:	bl	116c0 <abort@plt>
   148bc:	mov	r0, r6
   148c0:	ldr	r1, [r5, #64]	; 0x40
   148c4:	bl	145b0 <__assert_fail@plt+0x2ed8>
   148c8:	add	r0, r5, #4
   148cc:	bl	152e0 <__assert_fail@plt+0x3c08>
   148d0:	ldr	r2, [r0, #12]
   148d4:	cmp	r2, #0
   148d8:	beq	148ec <__assert_fail@plt+0x3214>
   148dc:	ldr	ip, [r1, #60]	; 0x3c
   148e0:	mov	r2, #0
   148e4:	str	ip, [r1, #64]	; 0x40
   148e8:	b	14620 <__assert_fail@plt+0x2f48>
   148ec:	b	14790 <__assert_fail@plt+0x30b8>
   148f0:	bx	lr
   148f4:	push	{r3, lr}
   148f8:	ldr	r3, [r0, #8]
   148fc:	cmp	r3, #0
   14900:	popeq	{r3, pc}
   14904:	mov	r1, r0
   14908:	mov	r0, #1
   1490c:	blx	r3
   14910:	pop	{r3, pc}
   14914:	cmp	r1, #4
   14918:	addls	pc, pc, r1, lsl #2
   1491c:	b	14950 <__assert_fail@plt+0x3278>
   14920:	b	1493c <__assert_fail@plt+0x3264>
   14924:	b	14934 <__assert_fail@plt+0x325c>
   14928:	b	14950 <__assert_fail@plt+0x3278>
   1492c:	b	14934 <__assert_fail@plt+0x325c>
   14930:	b	14934 <__assert_fail@plt+0x325c>
   14934:	mov	r0, #1
   14938:	bx	lr
   1493c:	cmp	r2, #15
   14940:	cmpls	r3, #0
   14944:	moveq	r3, #0
   14948:	movne	r3, #1
   1494c:	beq	14958 <__assert_fail@plt+0x3280>
   14950:	mov	r0, #2
   14954:	bx	lr
   14958:	add	r2, r0, r2, lsl #2
   1495c:	mov	r0, r3
   14960:	ldr	r3, [r2, #4]
   14964:	ldr	r2, [sp]
   14968:	str	r3, [r2]
   1496c:	bx	lr
   14970:	push	{lr}		; (str lr, [sp, #-4]!)
   14974:	sub	sp, sp, #20
   14978:	mov	r2, r1
   1497c:	mov	r1, #0
   14980:	add	ip, sp, #12
   14984:	mov	r3, r1
   14988:	str	ip, [sp]
   1498c:	bl	14914 <__assert_fail@plt+0x323c>
   14990:	ldr	r0, [sp, #12]
   14994:	add	sp, sp, #20
   14998:	pop	{pc}		; (ldr pc, [sp], #4)
   1499c:	cmp	r1, #4
   149a0:	addls	pc, pc, r1, lsl #2
   149a4:	b	149d8 <__assert_fail@plt+0x3300>
   149a8:	b	149c4 <__assert_fail@plt+0x32ec>
   149ac:	b	149bc <__assert_fail@plt+0x32e4>
   149b0:	b	149d8 <__assert_fail@plt+0x3300>
   149b4:	b	149bc <__assert_fail@plt+0x32e4>
   149b8:	b	149bc <__assert_fail@plt+0x32e4>
   149bc:	mov	r0, #1
   149c0:	bx	lr
   149c4:	cmp	r2, #15
   149c8:	cmpls	r3, #0
   149cc:	moveq	r3, #0
   149d0:	movne	r3, #1
   149d4:	beq	149e0 <__assert_fail@plt+0x3308>
   149d8:	mov	r0, #2
   149dc:	bx	lr
   149e0:	ldr	ip, [sp]
   149e4:	add	r2, r0, r2, lsl #2
   149e8:	mov	r0, r3
   149ec:	ldr	r1, [ip]
   149f0:	str	r1, [r2, #4]
   149f4:	bx	lr
   149f8:	push	{lr}		; (str lr, [sp, #-4]!)
   149fc:	sub	sp, sp, #20
   14a00:	add	ip, sp, #16
   14a04:	mov	lr, r1
   14a08:	mov	r1, #0
   14a0c:	str	r2, [ip, #-4]!
   14a10:	mov	r3, r1
   14a14:	str	ip, [sp]
   14a18:	mov	r2, lr
   14a1c:	bl	1499c <__assert_fail@plt+0x32c4>
   14a20:	add	sp, sp, #20
   14a24:	pop	{pc}		; (ldr pc, [sp], #4)
   14a28:	ldr	r3, [r2, #60]	; 0x3c
   14a2c:	push	{r4, r5, r6, r7, r8, lr}
   14a30:	add	lr, r2, #4
   14a34:	str	r3, [r2, #64]	; 0x40
   14a38:	mov	r8, r0
   14a3c:	mov	r7, r1
   14a40:	sub	sp, sp, #568	; 0x238
   14a44:	ldm	lr!, {r0, r1, r2, r3}
   14a48:	add	ip, sp, #92	; 0x5c
   14a4c:	mvn	r6, #0
   14a50:	add	r4, sp, #88	; 0x58
   14a54:	stmia	ip!, {r0, r1, r2, r3}
   14a58:	ldm	lr!, {r0, r1, r2, r3}
   14a5c:	stmia	ip!, {r0, r1, r2, r3}
   14a60:	ldm	lr!, {r0, r1, r2, r3}
   14a64:	stmia	ip!, {r0, r1, r2, r3}
   14a68:	ldm	lr, {r0, r1, r2, r3}
   14a6c:	stm	ip, {r0, r1, r2, r3}
   14a70:	str	r6, [sp, #88]	; 0x58
   14a74:	b	14ab4 <__assert_fail@plt+0x33dc>
   14a78:	bl	149f8 <__assert_fail@plt+0x3320>
   14a7c:	mov	r1, r7
   14a80:	mov	r0, r4
   14a84:	blx	r8
   14a88:	mov	r1, sp
   14a8c:	mov	r2, r4
   14a90:	cmp	r0, #0
   14a94:	mov	r0, #8
   14a98:	bne	14ad4 <__assert_fail@plt+0x33fc>
   14a9c:	ldr	r3, [sp, #16]
   14aa0:	blx	r3
   14aa4:	cmp	r0, #9
   14aa8:	cmpne	r0, #5
   14aac:	mov	r6, r0
   14ab0:	beq	14ad8 <__assert_fail@plt+0x3400>
   14ab4:	ldr	r1, [sp, #152]	; 0x98
   14ab8:	mov	r0, sp
   14abc:	bl	143e0 <__assert_fail@plt+0x2d08>
   14ac0:	mov	r2, sp
   14ac4:	mov	r1, #12
   14ac8:	cmp	r0, #0
   14acc:	mov	r0, r4
   14ad0:	beq	14a78 <__assert_fail@plt+0x33a0>
   14ad4:	mov	r6, #9
   14ad8:	mov	r0, r4
   14adc:	bl	1450c <__assert_fail@plt+0x2e34>
   14ae0:	mov	r0, r6
   14ae4:	add	sp, sp, #568	; 0x238
   14ae8:	pop	{r4, r5, r6, r7, r8, pc}
   14aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14af0:	mov	r4, r1
   14af4:	ldr	r1, [r1, #76]	; 0x4c
   14af8:	mov	r8, r2
   14afc:	sub	sp, sp, #44	; 0x2c
   14b00:	subs	r6, r3, #0
   14b04:	ldr	ip, [pc, #1064]	; 14f34 <__assert_fail@plt+0x385c>
   14b08:	add	r3, r1, #4
   14b0c:	ldr	r2, [r1]
   14b10:	and	r7, r0, #3
   14b14:	add	ip, pc, ip
   14b18:	str	r3, [sp, #32]
   14b1c:	str	ip, [sp, #4]
   14b20:	str	r2, [sp, #28]
   14b24:	bne	14cd0 <__assert_fail@plt+0x35f8>
   14b28:	lsl	r2, r2, #8
   14b2c:	strb	r6, [sp, #37]	; 0x25
   14b30:	str	r2, [sp, #28]
   14b34:	mov	r2, #3
   14b38:	strb	r2, [sp, #36]	; 0x24
   14b3c:	cmp	r7, #2
   14b40:	ldr	r2, [r4, #80]	; 0x50
   14b44:	ldreq	r3, [r4, #56]	; 0x38
   14b48:	ands	r2, r2, #1
   14b4c:	bne	14ca4 <__assert_fail@plt+0x35cc>
   14b50:	eor	r0, r0, #8
   14b54:	str	r2, [sp, #8]
   14b58:	ubfx	r0, r0, #3, #1
   14b5c:	str	r0, [sp, #12]
   14b60:	ldr	r9, [r3]
   14b64:	cmp	r9, #0
   14b68:	beq	14cac <__assert_fail@plt+0x35d4>
   14b6c:	cmp	r6, #2
   14b70:	mov	r0, r8
   14b74:	addeq	r5, r3, #8
   14b78:	addne	r5, r3, #4
   14b7c:	ldreq	sl, [r3, #4]
   14b80:	mov	r1, #15
   14b84:	ldrhne	sl, [r3, #2]
   14b88:	ldrhne	r9, [r3]
   14b8c:	ldr	r3, [r4, #72]	; 0x48
   14b90:	bic	fp, sl, #1
   14b94:	add	fp, fp, r3
   14b98:	bl	14970 <__assert_fail@plt+0x3298>
   14b9c:	cmp	fp, r0
   14ba0:	movhi	r0, #0
   14ba4:	bhi	14bbc <__assert_fail@plt+0x34e4>
   14ba8:	bic	r3, r9, #1
   14bac:	add	fp, fp, r3
   14bb0:	cmp	r0, fp
   14bb4:	movcs	r0, #0
   14bb8:	movcc	r0, #1
   14bbc:	and	sl, sl, #1
   14bc0:	and	r9, r9, #1
   14bc4:	orr	r9, r9, sl, lsl #1
   14bc8:	cmp	r9, #1
   14bcc:	beq	14d48 <__assert_fail@plt+0x3670>
   14bd0:	bcc	14d2c <__assert_fail@plt+0x3654>
   14bd4:	cmp	r9, #2
   14bd8:	bne	14cc0 <__assert_fail@plt+0x35e8>
   14bdc:	ldr	r3, [r5]
   14be0:	cmp	r7, #0
   14be4:	bic	fp, r3, #-2147483648	; 0x80000000
   14be8:	bne	14cfc <__assert_fail@plt+0x3624>
   14bec:	cmp	r0, #0
   14bf0:	beq	14d18 <__assert_fail@plt+0x3640>
   14bf4:	ldr	r2, [sp, #12]
   14bf8:	cmp	fp, #0
   14bfc:	orreq	r2, r2, #1
   14c00:	cmp	r2, #0
   14c04:	beq	14d18 <__assert_fail@plt+0x3640>
   14c08:	cmp	fp, #0
   14c0c:	beq	14c80 <__assert_fail@plt+0x35a8>
   14c10:	add	r2, r4, #88	; 0x58
   14c14:	add	ip, sp, #24
   14c18:	mov	sl, r7
   14c1c:	str	r7, [sp, #20]
   14c20:	str	r6, [sp, #16]
   14c24:	add	r9, r5, #4
   14c28:	mov	r7, r2
   14c2c:	mov	r6, ip
   14c30:	b	14c40 <__assert_fail@plt+0x3568>
   14c34:	cmp	r3, fp
   14c38:	mov	sl, r3
   14c3c:	beq	14c80 <__assert_fail@plt+0x35a8>
   14c40:	mov	r0, r9
   14c44:	str	r7, [sp, #24]
   14c48:	bl	14594 <__assert_fail@plt+0x2ebc>
   14c4c:	mov	r3, r6
   14c50:	mov	r2, #0
   14c54:	add	r9, r9, #4
   14c58:	mov	r1, r0
   14c5c:	mov	r0, r4
   14c60:	bl	11564 <__cxa_type_match@plt>
   14c64:	add	r3, sl, #1
   14c68:	cmp	r0, #0
   14c6c:	beq	14c34 <__assert_fail@plt+0x355c>
   14c70:	cmp	fp, sl
   14c74:	ldr	r7, [sp, #20]
   14c78:	ldr	r6, [sp, #16]
   14c7c:	bne	14d14 <__assert_fail@plt+0x363c>
   14c80:	mov	r0, r8
   14c84:	mov	r1, #13
   14c88:	bl	14970 <__assert_fail@plt+0x3298>
   14c8c:	ldr	r2, [sp, #24]
   14c90:	str	r5, [r4, #40]	; 0x28
   14c94:	mov	r3, #6
   14c98:	str	r2, [r4, #36]	; 0x24
   14c9c:	str	r0, [r4, #32]
   14ca0:	b	14cc4 <__assert_fail@plt+0x35ec>
   14ca4:	mov	ip, #0
   14ca8:	str	ip, [sp, #8]
   14cac:	cmp	r6, #2
   14cb0:	ble	14da4 <__assert_fail@plt+0x36cc>
   14cb4:	bl	145a8 <__assert_fail@plt+0x2ed0>
   14cb8:	cmp	r0, #0
   14cbc:	beq	14db8 <__assert_fail@plt+0x36e0>
   14cc0:	mov	r3, #9
   14cc4:	mov	r0, r3
   14cc8:	add	sp, sp, #44	; 0x2c
   14ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd0:	cmp	r6, #2
   14cd4:	bgt	14b3c <__assert_fail@plt+0x3464>
   14cd8:	lsr	r1, r2, #16
   14cdc:	strb	r1, [sp, #37]	; 0x25
   14ce0:	lsl	r2, r2, #16
   14ce4:	mov	ip, #2
   14ce8:	uxtb	r1, r1
   14cec:	str	r2, [sp, #28]
   14cf0:	strb	ip, [sp, #36]	; 0x24
   14cf4:	add	r3, r3, r1, lsl #2
   14cf8:	b	14b3c <__assert_fail@plt+0x3464>
   14cfc:	mov	r0, r8
   14d00:	mov	r1, #13
   14d04:	ldr	r9, [r4, #32]
   14d08:	bl	14970 <__assert_fail@plt+0x3298>
   14d0c:	cmp	r9, r0
   14d10:	beq	14e58 <__assert_fail@plt+0x3780>
   14d14:	ldr	r3, [r5]
   14d18:	cmp	r3, #0
   14d1c:	addlt	r5, r5, #4
   14d20:	add	fp, fp, #1
   14d24:	add	r3, r5, fp, lsl #2
   14d28:	b	14b60 <__assert_fail@plt+0x3488>
   14d2c:	cmp	r7, #0
   14d30:	moveq	r0, #0
   14d34:	andne	r0, r0, #1
   14d38:	cmp	r0, #0
   14d3c:	bne	14ebc <__assert_fail@plt+0x37e4>
   14d40:	add	r3, r5, #4
   14d44:	b	14b60 <__assert_fail@plt+0x3488>
   14d48:	cmp	r7, #0
   14d4c:	bne	14e04 <__assert_fail@plt+0x372c>
   14d50:	cmp	r0, #0
   14d54:	beq	14d9c <__assert_fail@plt+0x36c4>
   14d58:	ldm	r5, {r2, r3}
   14d5c:	cmn	r3, #2
   14d60:	lsr	r9, r2, #31
   14d64:	beq	14cc0 <__assert_fail@plt+0x35e8>
   14d68:	cmn	r3, #1
   14d6c:	add	r3, r4, #88	; 0x58
   14d70:	str	r3, [sp, #24]
   14d74:	beq	14e98 <__assert_fail@plt+0x37c0>
   14d78:	add	r0, r5, #4
   14d7c:	bl	14594 <__assert_fail@plt+0x2ebc>
   14d80:	mov	r2, r9
   14d84:	add	r3, sp, #24
   14d88:	mov	r1, r0
   14d8c:	mov	r0, r4
   14d90:	bl	11564 <__cxa_type_match@plt>
   14d94:	cmp	r0, #0
   14d98:	bne	14f04 <__assert_fail@plt+0x382c>
   14d9c:	add	r3, r5, #8
   14da0:	b	14b60 <__assert_fail@plt+0x3488>
   14da4:	mov	r0, r8
   14da8:	add	r1, sp, #28
   14dac:	bl	1551c <__assert_fail@plt+0x3e44>
   14db0:	cmp	r0, #0
   14db4:	bne	14cc0 <__assert_fail@plt+0x35e8>
   14db8:	ldr	ip, [sp, #8]
   14dbc:	cmp	ip, #0
   14dc0:	moveq	r3, #8
   14dc4:	beq	14cc4 <__assert_fail@plt+0x35ec>
   14dc8:	mov	r1, #15
   14dcc:	mov	r0, r8
   14dd0:	bl	14970 <__assert_fail@plt+0x3298>
   14dd4:	mov	r1, #14
   14dd8:	mov	r2, r0
   14ddc:	mov	r0, r8
   14de0:	bl	149f8 <__assert_fail@plt+0x3320>
   14de4:	ldr	r3, [pc, #332]	; 14f38 <__assert_fail@plt+0x3860>
   14de8:	ldr	ip, [sp, #4]
   14dec:	mov	r0, r8
   14df0:	mov	r1, #15
   14df4:	ldr	r2, [ip, r3]
   14df8:	bl	149f8 <__assert_fail@plt+0x3320>
   14dfc:	mov	r3, #7
   14e00:	b	14cc4 <__assert_fail@plt+0x35ec>
   14e04:	mov	r0, r8
   14e08:	mov	r1, #13
   14e0c:	ldr	r9, [r4, #32]
   14e10:	bl	14970 <__assert_fail@plt+0x3298>
   14e14:	cmp	r9, r0
   14e18:	bne	14d9c <__assert_fail@plt+0x36c4>
   14e1c:	ldr	r3, [r4, #40]	; 0x28
   14e20:	cmp	r5, r3
   14e24:	bne	14d9c <__assert_fail@plt+0x36c4>
   14e28:	mov	r0, r5
   14e2c:	bl	142c4 <__assert_fail@plt+0x2bec>
   14e30:	mov	r1, #15
   14e34:	mov	r2, r0
   14e38:	mov	r0, r8
   14e3c:	bl	149f8 <__assert_fail@plt+0x3320>
   14e40:	mov	r0, r8
   14e44:	mov	r2, r4
   14e48:	mov	r1, #0
   14e4c:	bl	149f8 <__assert_fail@plt+0x3320>
   14e50:	mov	r3, #7
   14e54:	b	14cc4 <__assert_fail@plt+0x35ec>
   14e58:	ldr	r3, [r4, #40]	; 0x28
   14e5c:	cmp	r5, r3
   14e60:	bne	14d14 <__assert_fail@plt+0x363c>
   14e64:	mov	r2, #4
   14e68:	mov	r3, #0
   14e6c:	str	fp, [r4, #40]	; 0x28
   14e70:	str	r3, [r4, #44]	; 0x2c
   14e74:	add	r3, r5, r2
   14e78:	str	r2, [r4, #48]	; 0x30
   14e7c:	str	r3, [r4, #52]	; 0x34
   14e80:	ldr	r3, [r5]
   14e84:	cmp	r3, #0
   14e88:	blt	14ef8 <__assert_fail@plt+0x3820>
   14e8c:	mov	ip, #1
   14e90:	str	ip, [sp, #8]
   14e94:	b	14d20 <__assert_fail@plt+0x3648>
   14e98:	mov	r0, r8
   14e9c:	mov	r1, #13
   14ea0:	bl	14970 <__assert_fail@plt+0x3298>
   14ea4:	str	r0, [r4, #32]
   14ea8:	ldr	r3, [sp, #24]
   14eac:	str	r3, [r4, #36]	; 0x24
   14eb0:	str	r5, [r4, #40]	; 0x28
   14eb4:	mov	r3, #6
   14eb8:	b	14cc4 <__assert_fail@plt+0x35ec>
   14ebc:	mov	r0, r5
   14ec0:	add	r5, r5, #4
   14ec4:	bl	142c4 <__assert_fail@plt+0x2bec>
   14ec8:	str	r5, [r4, #56]	; 0x38
   14ecc:	mov	r6, r0
   14ed0:	mov	r0, r4
   14ed4:	bl	11504 <__cxa_begin_cleanup@plt>
   14ed8:	cmp	r0, #0
   14edc:	beq	14cc0 <__assert_fail@plt+0x35e8>
   14ee0:	mov	r0, r8
   14ee4:	mov	r2, r6
   14ee8:	mov	r1, #15
   14eec:	bl	149f8 <__assert_fail@plt+0x3320>
   14ef0:	mov	r3, #7
   14ef4:	b	14cc4 <__assert_fail@plt+0x35ec>
   14ef8:	add	r0, fp, #1
   14efc:	add	r0, r5, r0, lsl #2
   14f00:	b	14e2c <__assert_fail@plt+0x3754>
   14f04:	mov	r9, r0
   14f08:	mov	r1, #13
   14f0c:	mov	r0, r8
   14f10:	bl	14970 <__assert_fail@plt+0x3298>
   14f14:	cmp	r9, #2
   14f18:	str	r0, [r4, #32]
   14f1c:	bne	14ea8 <__assert_fail@plt+0x37d0>
   14f20:	ldr	r2, [sp, #24]
   14f24:	mov	r3, r4
   14f28:	str	r2, [r3, #44]!	; 0x2c
   14f2c:	str	r3, [r4, #36]	; 0x24
   14f30:	b	14eb0 <__assert_fail@plt+0x37d8>
   14f34:	andeq	r2, r1, r4, ror #9
   14f38:	andeq	r0, r0, r4, asr r1
   14f3c:	mov	r3, #0
   14f40:	b	14aec <__assert_fail@plt+0x3414>
   14f44:	mov	r3, #1
   14f48:	b	14aec <__assert_fail@plt+0x3414>
   14f4c:	mov	r3, #2
   14f50:	b	14aec <__assert_fail@plt+0x3414>
   14f54:	push	{r4, r5, r6, r7, r8, lr}
   14f58:	mov	r4, r0
   14f5c:	sub	sp, sp, #272	; 0x110
   14f60:	cmp	r1, #4
   14f64:	addls	pc, pc, r1, lsl #2
   14f68:	b	14f88 <__assert_fail@plt+0x38b0>
   14f6c:	b	1517c <__assert_fail@plt+0x3aa4>
   14f70:	b	14ffc <__assert_fail@plt+0x3924>
   14f74:	b	14f88 <__assert_fail@plt+0x38b0>
   14f78:	b	14f80 <__assert_fail@plt+0x38a8>
   14f7c:	b	14f94 <__assert_fail@plt+0x38bc>
   14f80:	cmp	r3, #3
   14f84:	beq	151c0 <__assert_fail@plt+0x3ae8>
   14f88:	mov	r0, #2
   14f8c:	add	sp, sp, #272	; 0x110
   14f90:	pop	{r4, r5, r6, r7, r8, pc}
   14f94:	cmp	r2, #16
   14f98:	cmpls	r3, #0
   14f9c:	bne	14f88 <__assert_fail@plt+0x38b0>
   14fa0:	ldr	r3, [r0]
   14fa4:	tst	r3, #16
   14fa8:	bne	1523c <__assert_fail@plt+0x3b64>
   14fac:	add	r5, sp, #136	; 0x88
   14fb0:	str	r2, [sp, #4]
   14fb4:	mov	r0, r5
   14fb8:	bl	153c0 <__assert_fail@plt+0x3ce8>
   14fbc:	ldr	r1, [r4, #56]	; 0x38
   14fc0:	ldr	r2, [sp, #4]
   14fc4:	mov	r3, #0
   14fc8:	mov	r0, #1
   14fcc:	ands	ip, r2, r0, lsl r3
   14fd0:	ldrne	ip, [r1]
   14fd4:	addne	r1, r1, #4
   14fd8:	strne	ip, [r5, r3, lsl #2]
   14fdc:	add	r3, r3, #1
   14fe0:	cmp	r3, #4
   14fe4:	bne	14fcc <__assert_fail@plt+0x38f4>
   14fe8:	mov	r0, r5
   14fec:	str	r1, [r4, #56]	; 0x38
   14ff0:	bl	153ac <__assert_fail@plt+0x3cd4>
   14ff4:	mov	r0, #0
   14ff8:	b	14f8c <__assert_fail@plt+0x38b4>
   14ffc:	bic	r1, r3, #4
   15000:	cmp	r1, #1
   15004:	bne	14f88 <__assert_fail@plt+0x38b0>
   15008:	cmp	r3, #1
   1500c:	lsr	r5, r2, #16
   15010:	uxth	r6, r2
   15014:	add	r2, r6, r5
   15018:	movne	r1, #32
   1501c:	moveq	r1, #16
   15020:	cmp	r1, r2
   15024:	bcc	14f88 <__assert_fail@plt+0x38b0>
   15028:	subs	r0, r3, #1
   1502c:	rsbs	r7, r0, #0
   15030:	adcs	r7, r7, r0
   15034:	cmp	r5, #15
   15038:	movls	r1, #0
   1503c:	movhi	r1, #1
   15040:	tst	r7, r1
   15044:	bne	14f88 <__assert_fail@plt+0x38b0>
   15048:	cmp	r1, #0
   1504c:	movne	r8, r6
   15050:	bne	15060 <__assert_fail@plt+0x3988>
   15054:	cmp	r2, #16
   15058:	bls	15264 <__assert_fail@plt+0x3b8c>
   1505c:	sub	r8, r2, #16
   15060:	cmp	r8, #0
   15064:	cmpne	r3, #5
   15068:	bne	14f88 <__assert_fail@plt+0x38b0>
   1506c:	cmp	r5, #15
   15070:	bhi	150a0 <__assert_fail@plt+0x39c8>
   15074:	ldr	r2, [r4]
   15078:	tst	r2, #1
   1507c:	beq	150a0 <__assert_fail@plt+0x39c8>
   15080:	cmp	r3, #5
   15084:	mov	r0, r4
   15088:	bic	r3, r2, #1
   1508c:	str	r3, [r4]
   15090:	beq	152d0 <__assert_fail@plt+0x3bf8>
   15094:	bic	r2, r2, #3
   15098:	str	r2, [r0], #72	; 0x48
   1509c:	bl	152fc <__assert_fail@plt+0x3c24>
   150a0:	cmp	r8, #0
   150a4:	beq	150b4 <__assert_fail@plt+0x39dc>
   150a8:	ldr	r3, [r4]
   150ac:	tst	r3, #4
   150b0:	bne	152a8 <__assert_fail@plt+0x3bd0>
   150b4:	cmp	r7, #0
   150b8:	bne	152bc <__assert_fail@plt+0x3be4>
   150bc:	cmp	r5, #15
   150c0:	bls	1528c <__assert_fail@plt+0x3bb4>
   150c4:	cmp	r8, #0
   150c8:	bne	15298 <__assert_fail@plt+0x3bc0>
   150cc:	ldr	ip, [r4, #56]	; 0x38
   150d0:	cmp	r6, #0
   150d4:	mov	r2, ip
   150d8:	ble	1510c <__assert_fail@plt+0x3a34>
   150dc:	add	r0, sp, #136	; 0x88
   150e0:	lsl	r6, r6, #1
   150e4:	add	r0, r0, r5, lsl #3
   150e8:	sub	r1, r6, #1
   150ec:	rsb	r0, ip, r0
   150f0:	sub	r3, ip, #4
   150f4:	sub	r1, r1, #1
   150f8:	ldr	r2, [r3, #4]!
   150fc:	cmn	r1, #1
   15100:	str	r2, [r0, r3]
   15104:	bne	150f4 <__assert_fail@plt+0x3a1c>
   15108:	add	r2, ip, r6, lsl #2
   1510c:	cmp	r8, #0
   15110:	beq	15150 <__assert_fail@plt+0x3a78>
   15114:	cmp	r5, #16
   15118:	movcs	r0, r5
   1511c:	movcc	r0, #16
   15120:	add	r6, sp, #272	; 0x110
   15124:	lsl	r1, r8, #1
   15128:	mov	ip, r2
   1512c:	add	r0, r6, r0, lsl #3
   15130:	sub	r3, r1, #1
   15134:	sub	r0, r0, #392	; 0x188
   15138:	sub	r3, r3, #1
   1513c:	ldr	r6, [ip], #4
   15140:	cmn	r3, #1
   15144:	str	r6, [r0], #4
   15148:	bne	15138 <__assert_fail@plt+0x3a60>
   1514c:	add	r2, r2, r1, lsl #2
   15150:	cmp	r7, #0
   15154:	bne	1526c <__assert_fail@plt+0x3b94>
   15158:	cmp	r5, #15
   1515c:	str	r2, [r4, #56]	; 0x38
   15160:	bls	15280 <__assert_fail@plt+0x3ba8>
   15164:	cmp	r8, #0
   15168:	beq	15174 <__assert_fail@plt+0x3a9c>
   1516c:	add	r0, sp, #8
   15170:	bl	15314 <__assert_fail@plt+0x3c3c>
   15174:	mov	r0, #0
   15178:	b	14f8c <__assert_fail@plt+0x38b4>
   1517c:	cmp	r3, #0
   15180:	bne	14f88 <__assert_fail@plt+0x38b0>
   15184:	ldr	r1, [r0, #56]	; 0x38
   15188:	uxth	r5, r2
   1518c:	mov	ip, #1
   15190:	ands	r0, r5, ip, lsl r3
   15194:	add	r0, r4, r3, lsl #2
   15198:	add	r3, r3, #1
   1519c:	ldrne	r6, [r1]
   151a0:	addne	r1, r1, #4
   151a4:	strne	r6, [r0, #4]
   151a8:	cmp	r3, #16
   151ac:	bne	15190 <__assert_fail@plt+0x3ab8>
   151b0:	ands	r0, r2, #8192	; 0x2000
   151b4:	streq	r1, [r4, #56]	; 0x38
   151b8:	beq	14f8c <__assert_fail@plt+0x38b4>
   151bc:	b	15174 <__assert_fail@plt+0x3a9c>
   151c0:	lsr	r6, r2, #16
   151c4:	uxth	r7, r2
   151c8:	add	r3, r7, r6
   151cc:	cmp	r3, #16
   151d0:	bhi	14f88 <__assert_fail@plt+0x38b0>
   151d4:	ldr	r3, [r0]
   151d8:	tst	r3, #8
   151dc:	bne	15254 <__assert_fail@plt+0x3b7c>
   151e0:	add	r5, sp, #136	; 0x88
   151e4:	lsl	r7, r7, #1
   151e8:	mov	r0, r5
   151ec:	bl	15368 <__assert_fail@plt+0x3c90>
   151f0:	ldr	ip, [r4, #56]	; 0x38
   151f4:	cmp	r7, #0
   151f8:	add	r0, r5, r6, lsl #3
   151fc:	sub	r3, r7, #1
   15200:	mov	r2, ip
   15204:	beq	15228 <__assert_fail@plt+0x3b50>
   15208:	rsb	r0, ip, r0
   1520c:	sub	r2, ip, #4
   15210:	sub	r3, r3, #1
   15214:	ldr	r1, [r2, #4]!
   15218:	cmn	r3, #1
   1521c:	str	r1, [r0, r2]
   15220:	bne	15210 <__assert_fail@plt+0x3b38>
   15224:	add	r2, ip, r7, lsl #2
   15228:	mov	r0, r5
   1522c:	str	r2, [r4, #56]	; 0x38
   15230:	bl	15324 <__assert_fail@plt+0x3c4c>
   15234:	mov	r0, #0
   15238:	b	14f8c <__assert_fail@plt+0x38b4>
   1523c:	bic	r3, r3, #16
   15240:	str	r3, [r0], #464	; 0x1d0
   15244:	str	r2, [sp, #4]
   15248:	bl	153c0 <__assert_fail@plt+0x3ce8>
   1524c:	ldr	r2, [sp, #4]
   15250:	b	14fac <__assert_fail@plt+0x38d4>
   15254:	bic	r3, r3, #8
   15258:	str	r3, [r0], #336	; 0x150
   1525c:	bl	15368 <__assert_fail@plt+0x3c90>
   15260:	b	151e0 <__assert_fail@plt+0x3b08>
   15264:	mov	r8, r1
   15268:	b	1506c <__assert_fail@plt+0x3994>
   1526c:	add	r2, r2, #4
   15270:	add	r0, sp, #136	; 0x88
   15274:	str	r2, [r4, #56]	; 0x38
   15278:	bl	152f4 <__assert_fail@plt+0x3c1c>
   1527c:	b	15174 <__assert_fail@plt+0x3a9c>
   15280:	add	r0, sp, #136	; 0x88
   15284:	bl	15304 <__assert_fail@plt+0x3c2c>
   15288:	b	15164 <__assert_fail@plt+0x3a8c>
   1528c:	add	r0, sp, #136	; 0x88
   15290:	bl	1530c <__assert_fail@plt+0x3c34>
   15294:	b	150c4 <__assert_fail@plt+0x39ec>
   15298:	add	r0, sp, #8
   1529c:	bl	1531c <__assert_fail@plt+0x3c44>
   152a0:	rsb	r6, r5, #16
   152a4:	b	150cc <__assert_fail@plt+0x39f4>
   152a8:	mov	r0, r4
   152ac:	bic	r3, r3, #4
   152b0:	str	r3, [r0], #208	; 0xd0
   152b4:	bl	1531c <__assert_fail@plt+0x3c44>
   152b8:	b	150b4 <__assert_fail@plt+0x39dc>
   152bc:	add	r0, sp, #136	; 0x88
   152c0:	bl	152fc <__assert_fail@plt+0x3c24>
   152c4:	cmp	r8, #0
   152c8:	bne	152a0 <__assert_fail@plt+0x3bc8>
   152cc:	b	150cc <__assert_fail@plt+0x39f4>
   152d0:	orr	r3, r3, #2
   152d4:	str	r3, [r0], #72	; 0x48
   152d8:	bl	1530c <__assert_fail@plt+0x3c34>
   152dc:	b	150a0 <__assert_fail@plt+0x39c8>
   152e0:	add	r1, r0, #52	; 0x34
   152e4:	ldm	r1, {r3, r4, r5}
   152e8:	push	{r3, r4, r5}
   152ec:	ldm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   152f0:	ldm	sp, {sp, lr, pc}
   152f4:	fldmiax	r0, {d0-d15}	;@ Deprecated
   152f8:	bx	lr
   152fc:	fstmiax	r0, {d0-d15}	;@ Deprecated
   15300:	bx	lr
   15304:	vldmia	r0, {d0-d15}
   15308:	bx	lr
   1530c:	vstmia	r0, {d0-d15}
   15310:	bx	lr
   15314:	vldmia	r0, {d16-d31}
   15318:	bx	lr
   1531c:	vstmia	r0, {d16-d31}
   15320:	bx	lr
   15324:	ldfe	f0, [r0], #8
   15328:	ldfe	f1, [r0], #8
   1532c:	ldfe	f2, [r0], #8
   15330:	ldfe	f3, [r0], #8
   15334:	ldfe	f4, [r0], #8
   15338:	ldfe	f5, [r0], #8
   1533c:	ldfe	f6, [r0], #8
   15340:	ldfe	f7, [r0], #8
   15344:	ldfp	f0, [r0], #8
   15348:	ldfp	f1, [r0], #8
   1534c:	ldfp	f2, [r0], #8
   15350:	ldfp	f3, [r0], #8
   15354:	ldfp	f4, [r0], #8
   15358:	ldfp	f5, [r0], #8
   1535c:	ldfp	f6, [r0], #8
   15360:	ldfp	f7, [r0], #8
   15364:	bx	lr
   15368:	stfe	f0, [r0], #8
   1536c:	stfe	f1, [r0], #8
   15370:	stfe	f2, [r0], #8
   15374:	stfe	f3, [r0], #8
   15378:	stfe	f4, [r0], #8
   1537c:	stfe	f5, [r0], #8
   15380:	stfe	f6, [r0], #8
   15384:	stfe	f7, [r0], #8
   15388:	stfp	f0, [r0], #8
   1538c:	stfp	f1, [r0], #8
   15390:	stfp	f2, [r0], #8
   15394:	stfp	f3, [r0], #8
   15398:	stfp	f4, [r0], #8
   1539c:	stfp	f5, [r0], #8
   153a0:	stfp	f6, [r0], #8
   153a4:	stfp	f7, [r0], #8
   153a8:	bx	lr
   153ac:	ldc2	1, cr8, [r0], #4
   153b0:	ldc2	1, cr9, [r0], #4
   153b4:	ldc2	1, cr10, [r0], #4
   153b8:	ldc2	1, cr11, [r0], #4
   153bc:	bx	lr
   153c0:	stc2	1, cr8, [r0], #4
   153c4:	stc2	1, cr9, [r0], #4
   153c8:	stc2	1, cr10, [r0], #4
   153cc:	stc2	1, cr11, [r0], #4
   153d0:	bx	lr
   153d4:	push	{sp, lr, pc}
   153d8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   153dc:	mov	r3, #0
   153e0:	push	{r2, r3}
   153e4:	add	r1, sp, #4
   153e8:	bl	14790 <__assert_fail@plt+0x30b8>
   153ec:	ldr	lr, [sp, #64]	; 0x40
   153f0:	add	sp, sp, #72	; 0x48
   153f4:	bx	lr
   153f8:	push	{sp, lr, pc}
   153fc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15400:	mov	r3, #0
   15404:	push	{r2, r3}
   15408:	add	r1, sp, #4
   1540c:	bl	1485c <__assert_fail@plt+0x3184>
   15410:	ldr	lr, [sp, #64]	; 0x40
   15414:	add	sp, sp, #72	; 0x48
   15418:	bx	lr
   1541c:	push	{sp, lr, pc}
   15420:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15424:	mov	r3, #0
   15428:	push	{r2, r3}
   1542c:	add	r1, sp, #4
   15430:	bl	148d0 <__assert_fail@plt+0x31f8>
   15434:	ldr	lr, [sp, #64]	; 0x40
   15438:	add	sp, sp, #72	; 0x48
   1543c:	bx	lr
   15440:	push	{sp, lr, pc}
   15444:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   15448:	mov	r3, #0
   1544c:	push	{r2, r3}
   15450:	add	r3, sp, #4
   15454:	bl	14838 <__assert_fail@plt+0x3160>
   15458:	ldr	lr, [sp, #64]	; 0x40
   1545c:	add	sp, sp, #72	; 0x48
   15460:	bx	lr
   15464:	push	{sp, lr, pc}
   15468:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1546c:	mov	r3, #0
   15470:	push	{r2, r3}
   15474:	add	r2, sp, #4
   15478:	bl	14a28 <__assert_fail@plt+0x3350>
   1547c:	ldr	lr, [sp, #64]	; 0x40
   15480:	add	sp, sp, #72	; 0x48
   15484:	bx	lr
   15488:	ldrb	r2, [r0, #8]
   1548c:	mov	r3, r0
   15490:	cmp	r2, #0
   15494:	bne	154ac <__assert_fail@plt+0x3dd4>
   15498:	ldrb	r2, [r0, #9]
   1549c:	cmp	r2, #0
   154a0:	bne	154c8 <__assert_fail@plt+0x3df0>
   154a4:	mov	r0, #176	; 0xb0
   154a8:	bx	lr
   154ac:	ldr	r0, [r0]
   154b0:	sub	r2, r2, #1
   154b4:	strb	r2, [r3, #8]
   154b8:	lsl	r2, r0, #8
   154bc:	lsr	r0, r0, #24
   154c0:	str	r2, [r3]
   154c4:	bx	lr
   154c8:	ldr	r1, [r0, #4]
   154cc:	sub	r2, r2, #1
   154d0:	strb	r2, [r0, #9]
   154d4:	mov	r2, #3
   154d8:	add	r0, r1, #4
   154dc:	str	r0, [r3, #4]
   154e0:	ldr	r0, [r1]
   154e4:	strb	r2, [r3, #8]
   154e8:	b	154b8 <__assert_fail@plt+0x3de0>
   154ec:	push	{lr}		; (str lr, [sp, #-4]!)
   154f0:	sub	sp, sp, #20
   154f4:	mov	r1, #0
   154f8:	add	r2, sp, #12
   154fc:	mov	r3, r1
   15500:	str	r2, [sp]
   15504:	mov	r2, #12
   15508:	bl	14914 <__assert_fail@plt+0x323c>
   1550c:	ldr	r0, [sp, #12]
   15510:	add	sp, sp, #20
   15514:	pop	{pc}		; (ldr pc, [sp], #4)
   15518:	b	154ec <__assert_fail@plt+0x3e14>
   1551c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15520:	sub	sp, sp, #20
   15524:	add	r7, sp, #12
   15528:	mov	r6, r0
   1552c:	mov	r5, r1
   15530:	mov	r8, #0
   15534:	mov	r0, r5
   15538:	bl	15488 <__assert_fail@plt+0x3db0>
   1553c:	cmp	r0, #176	; 0xb0
   15540:	mov	r4, r0
   15544:	beq	15760 <__assert_fail@plt+0x4088>
   15548:	bic	r2, r0, #127	; 0x7f
   1554c:	ands	r1, r2, #255	; 0xff
   15550:	beq	155bc <__assert_fail@plt+0x3ee4>
   15554:	and	r2, r0, #240	; 0xf0
   15558:	cmp	r2, #128	; 0x80
   1555c:	beq	156b8 <__assert_fail@plt+0x3fe0>
   15560:	cmp	r2, #144	; 0x90
   15564:	beq	1560c <__assert_fail@plt+0x3f34>
   15568:	cmp	r2, #160	; 0xa0
   1556c:	beq	15634 <__assert_fail@plt+0x3f5c>
   15570:	cmp	r2, #176	; 0xb0
   15574:	beq	1566c <__assert_fail@plt+0x3f94>
   15578:	cmp	r2, #192	; 0xc0
   1557c:	beq	15700 <__assert_fail@plt+0x4028>
   15580:	and	r3, r0, #248	; 0xf8
   15584:	cmp	r3, #208	; 0xd0
   15588:	bne	155b0 <__assert_fail@plt+0x3ed8>
   1558c:	and	r4, r0, #7
   15590:	mov	r1, #1
   15594:	add	r2, r4, #1
   15598:	mov	r0, r6
   1559c:	orr	r2, r2, #524288	; 0x80000
   155a0:	mov	r3, #5
   155a4:	bl	14f54 <__assert_fail@plt+0x387c>
   155a8:	cmp	r0, #0
   155ac:	beq	15534 <__assert_fail@plt+0x3e5c>
   155b0:	mov	r0, #9
   155b4:	add	sp, sp, #20
   155b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   155bc:	lsl	r9, r0, #2
   155c0:	mov	r3, r1
   155c4:	str	r7, [sp]
   155c8:	mov	r0, r6
   155cc:	mov	r2, #13
   155d0:	uxtb	r9, r9
   155d4:	bl	14914 <__assert_fail@plt+0x323c>
   155d8:	ldr	r3, [sp, #12]
   155dc:	add	r9, r9, #4
   155e0:	tst	r4, #64	; 0x40
   155e4:	rsbne	r9, r9, r3
   155e8:	addeq	r9, r3, r9
   155ec:	str	r9, [sp, #12]
   155f0:	mov	r1, #0
   155f4:	str	r7, [sp]
   155f8:	mov	r3, r1
   155fc:	mov	r0, r6
   15600:	mov	r2, #13
   15604:	bl	1499c <__assert_fail@plt+0x32c4>
   15608:	b	15534 <__assert_fail@plt+0x3e5c>
   1560c:	and	r3, r0, #13
   15610:	cmp	r3, #13
   15614:	beq	155b0 <__assert_fail@plt+0x3ed8>
   15618:	mov	r1, #0
   1561c:	and	r2, r0, #15
   15620:	str	r7, [sp]
   15624:	mov	r3, r1
   15628:	mov	r0, r6
   1562c:	bl	14914 <__assert_fail@plt+0x323c>
   15630:	b	155f0 <__assert_fail@plt+0x3f18>
   15634:	mvn	r4, r0
   15638:	mov	r2, #4080	; 0xff0
   1563c:	and	r4, r4, #7
   15640:	tst	r0, #8
   15644:	asr	r2, r2, r4
   15648:	mov	r1, #0
   1564c:	and	r2, r2, #4080	; 0xff0
   15650:	orrne	r2, r2, #16384	; 0x4000
   15654:	mov	r3, r1
   15658:	mov	r0, r6
   1565c:	bl	14f54 <__assert_fail@plt+0x387c>
   15660:	cmp	r0, #0
   15664:	bne	155b0 <__assert_fail@plt+0x3ed8>
   15668:	b	15534 <__assert_fail@plt+0x3e5c>
   1566c:	cmp	r0, #177	; 0xb1
   15670:	beq	157a8 <__assert_fail@plt+0x40d0>
   15674:	cmp	r0, #178	; 0xb2
   15678:	beq	157c4 <__assert_fail@plt+0x40ec>
   1567c:	cmp	r0, #179	; 0xb3
   15680:	beq	15844 <__assert_fail@plt+0x416c>
   15684:	and	r3, r0, #252	; 0xfc
   15688:	cmp	r3, #180	; 0xb4
   1568c:	beq	155b0 <__assert_fail@plt+0x3ed8>
   15690:	and	r2, r0, #7
   15694:	mov	r1, #1
   15698:	add	r2, r2, r1
   1569c:	mov	r3, r1
   156a0:	orr	r2, r2, #524288	; 0x80000
   156a4:	mov	r0, r6
   156a8:	bl	14f54 <__assert_fail@plt+0x387c>
   156ac:	cmp	r0, #0
   156b0:	bne	155b0 <__assert_fail@plt+0x3ed8>
   156b4:	b	15534 <__assert_fail@plt+0x3e5c>
   156b8:	mov	r0, r5
   156bc:	lsl	r4, r4, #8
   156c0:	bl	15488 <__assert_fail@plt+0x3db0>
   156c4:	orr	r0, r0, r4
   156c8:	cmp	r0, #32768	; 0x8000
   156cc:	beq	155b0 <__assert_fail@plt+0x3ed8>
   156d0:	lsl	r4, r0, #4
   156d4:	mov	r1, #0
   156d8:	movw	r2, #65520	; 0xfff0
   156dc:	mov	r3, r1
   156e0:	and	r2, r4, r2
   156e4:	mov	r0, r6
   156e8:	bl	14f54 <__assert_fail@plt+0x387c>
   156ec:	cmp	r0, #0
   156f0:	bne	155b0 <__assert_fail@plt+0x3ed8>
   156f4:	tst	r4, #32768	; 0x8000
   156f8:	movne	r8, #1
   156fc:	b	15534 <__assert_fail@plt+0x3e5c>
   15700:	cmp	r0, #198	; 0xc6
   15704:	beq	15864 <__assert_fail@plt+0x418c>
   15708:	cmp	r0, #199	; 0xc7
   1570c:	beq	15880 <__assert_fail@plt+0x41a8>
   15710:	and	r3, r0, #248	; 0xf8
   15714:	cmp	r3, #192	; 0xc0
   15718:	beq	158b0 <__assert_fail@plt+0x41d8>
   1571c:	cmp	r0, #200	; 0xc8
   15720:	beq	158d8 <__assert_fail@plt+0x4200>
   15724:	cmp	r0, #201	; 0xc9
   15728:	bne	155b0 <__assert_fail@plt+0x3ed8>
   1572c:	mov	r0, r5
   15730:	bl	15488 <__assert_fail@plt+0x3db0>
   15734:	mov	r1, #1
   15738:	and	r3, r0, #15
   1573c:	and	r2, r0, #240	; 0xf0
   15740:	add	r3, r3, #1
   15744:	mov	r0, r6
   15748:	orr	r2, r3, r2, lsl #12
   1574c:	mov	r3, #5
   15750:	bl	14f54 <__assert_fail@plt+0x387c>
   15754:	cmp	r0, #0
   15758:	bne	155b0 <__assert_fail@plt+0x3ed8>
   1575c:	b	15534 <__assert_fail@plt+0x3e5c>
   15760:	cmp	r8, #0
   15764:	movne	r0, #0
   15768:	bne	155b4 <__assert_fail@plt+0x3edc>
   1576c:	add	r4, sp, #12
   15770:	mov	r1, r8
   15774:	mov	r2, #14
   15778:	mov	r3, r8
   1577c:	mov	r0, r6
   15780:	str	r4, [sp]
   15784:	bl	14914 <__assert_fail@plt+0x323c>
   15788:	str	r4, [sp]
   1578c:	mov	r0, r6
   15790:	mov	r1, r8
   15794:	mov	r2, #15
   15798:	mov	r3, r8
   1579c:	bl	1499c <__assert_fail@plt+0x32c4>
   157a0:	mov	r0, r8
   157a4:	b	155b4 <__assert_fail@plt+0x3edc>
   157a8:	mov	r0, r5
   157ac:	bl	15488 <__assert_fail@plt+0x3db0>
   157b0:	subs	r2, r0, #0
   157b4:	beq	155b0 <__assert_fail@plt+0x3ed8>
   157b8:	ands	r1, r2, #240	; 0xf0
   157bc:	beq	15654 <__assert_fail@plt+0x3f7c>
   157c0:	b	155b0 <__assert_fail@plt+0x3ed8>
   157c4:	mov	r1, #0
   157c8:	mov	r2, #13
   157cc:	mov	r3, r1
   157d0:	str	r7, [sp]
   157d4:	mov	r0, r6
   157d8:	mov	r4, #2
   157dc:	bl	14914 <__assert_fail@plt+0x323c>
   157e0:	mov	r0, r5
   157e4:	bl	15488 <__assert_fail@plt+0x3db0>
   157e8:	tst	r0, #128	; 0x80
   157ec:	beq	15814 <__assert_fail@plt+0x413c>
   157f0:	and	r2, r0, #127	; 0x7f
   157f4:	ldr	r3, [sp, #12]
   157f8:	mov	r0, r5
   157fc:	add	r3, r3, r2, lsl r4
   15800:	str	r3, [sp, #12]
   15804:	bl	15488 <__assert_fail@plt+0x3db0>
   15808:	add	r4, r4, #7
   1580c:	tst	r0, #128	; 0x80
   15810:	bne	157f0 <__assert_fail@plt+0x4118>
   15814:	ldr	ip, [sp, #12]
   15818:	and	lr, r0, #127	; 0x7f
   1581c:	mov	r1, #0
   15820:	str	r7, [sp]
   15824:	add	ip, ip, #516	; 0x204
   15828:	mov	r3, r1
   1582c:	mov	r0, r6
   15830:	mov	r2, #13
   15834:	add	r4, ip, lr, lsl r4
   15838:	str	r4, [sp, #12]
   1583c:	bl	1499c <__assert_fail@plt+0x32c4>
   15840:	b	15534 <__assert_fail@plt+0x3e5c>
   15844:	mov	r0, r5
   15848:	bl	15488 <__assert_fail@plt+0x3db0>
   1584c:	mov	r1, #1
   15850:	and	r3, r0, #15
   15854:	and	r2, r0, #240	; 0xf0
   15858:	add	r3, r3, #1
   1585c:	orr	r2, r3, r2, lsl #12
   15860:	b	15654 <__assert_fail@plt+0x3f7c>
   15864:	mov	r0, r5
   15868:	bl	15488 <__assert_fail@plt+0x3db0>
   1586c:	mov	r1, #3
   15870:	and	r3, r0, #15
   15874:	and	r2, r0, #240	; 0xf0
   15878:	add	r3, r3, #1
   1587c:	b	1585c <__assert_fail@plt+0x4184>
   15880:	mov	r0, r5
   15884:	bl	15488 <__assert_fail@plt+0x3db0>
   15888:	subs	r2, r0, #0
   1588c:	beq	155b0 <__assert_fail@plt+0x3ed8>
   15890:	ands	r3, r2, #240	; 0xf0
   15894:	bne	155b0 <__assert_fail@plt+0x3ed8>
   15898:	mov	r0, r6
   1589c:	mov	r1, #4
   158a0:	bl	14f54 <__assert_fail@plt+0x387c>
   158a4:	cmp	r0, #0
   158a8:	bne	155b0 <__assert_fail@plt+0x3ed8>
   158ac:	b	15534 <__assert_fail@plt+0x3e5c>
   158b0:	and	r2, r0, #15
   158b4:	mov	r1, #3
   158b8:	add	r2, r2, #1
   158bc:	mov	r3, r1
   158c0:	orr	r2, r2, #655360	; 0xa0000
   158c4:	mov	r0, r6
   158c8:	bl	14f54 <__assert_fail@plt+0x387c>
   158cc:	cmp	r0, #0
   158d0:	bne	155b0 <__assert_fail@plt+0x3ed8>
   158d4:	b	15534 <__assert_fail@plt+0x3e5c>
   158d8:	mov	r0, r5
   158dc:	bl	15488 <__assert_fail@plt+0x3db0>
   158e0:	mov	r1, #1
   158e4:	and	r2, r0, #240	; 0xf0
   158e8:	and	r3, r0, #15
   158ec:	add	r2, r2, #16
   158f0:	add	r3, r3, #1
   158f4:	mov	r0, r6
   158f8:	orr	r2, r3, r2, lsl #12
   158fc:	mov	r3, #5
   15900:	bl	14f54 <__assert_fail@plt+0x387c>
   15904:	cmp	r0, #0
   15908:	bne	155b0 <__assert_fail@plt+0x3ed8>
   1590c:	b	15534 <__assert_fail@plt+0x3e5c>
   15910:	ldr	r3, [r0, #76]	; 0x4c
   15914:	mov	r0, r1
   15918:	push	{lr}		; (str lr, [sp, #-4]!)
   1591c:	sub	sp, sp, #20
   15920:	ldr	r2, [r3, #4]
   15924:	add	ip, r3, #8
   15928:	mov	lr, #3
   1592c:	strb	lr, [sp, #12]
   15930:	ldrb	r3, [r3, #7]
   15934:	add	r1, sp, #4
   15938:	lsl	r2, r2, #8
   1593c:	stmib	sp, {r2, ip}
   15940:	strb	r3, [sp, #13]
   15944:	bl	1551c <__assert_fail@plt+0x3e44>
   15948:	add	sp, sp, #20
   1594c:	pop	{pc}		; (ldr pc, [sp], #4)
   15950:	push	{r3, lr}
   15954:	bl	15518 <__assert_fail@plt+0x3e40>
   15958:	ldr	r0, [r0, #72]	; 0x48
   1595c:	pop	{r3, pc}
   15960:	push	{r3, lr}
   15964:	bl	15518 <__assert_fail@plt+0x3e40>
   15968:	ldr	r3, [r0, #76]	; 0x4c
   1596c:	ldrb	r2, [r3, #7]
   15970:	add	r0, r3, r2, lsl #2
   15974:	add	r0, r0, #8
   15978:	pop	{r3, pc}
   1597c:	push	{r3, lr}
   15980:	bl	116c0 <abort@plt>
   15984:	push	{r3, lr}
   15988:	bl	116c0 <abort@plt>
   1598c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15990:	mov	r7, r0
   15994:	ldr	r6, [pc, #76]	; 159e8 <__assert_fail@plt+0x4310>
   15998:	mov	r8, r1
   1599c:	ldr	r5, [pc, #72]	; 159ec <__assert_fail@plt+0x4314>
   159a0:	mov	r9, r2
   159a4:	add	r6, pc, r6
   159a8:	bl	11334 <_init@@Base>
   159ac:	add	r5, pc, r5
   159b0:	rsb	r6, r5, r6
   159b4:	asrs	r6, r6, #2
   159b8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   159bc:	sub	r5, r5, #4
   159c0:	mov	r4, #0
   159c4:	add	r4, r4, #1
   159c8:	ldr	r3, [r5, #4]!
   159cc:	mov	r0, r7
   159d0:	mov	r1, r8
   159d4:	mov	r2, r9
   159d8:	blx	r3
   159dc:	cmp	r4, r6
   159e0:	bne	159c4 <__assert_fail@plt+0x42ec>
   159e4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   159e8:	andeq	r1, r1, ip, asr #10
   159ec:	andeq	r1, r1, r0, asr #10
   159f0:	bx	lr

Disassembly of section .fini:

000159f4 <_fini@@Base>:
   159f4:	push	{r3, lr}
   159f8:	pop	{r3, pc}
