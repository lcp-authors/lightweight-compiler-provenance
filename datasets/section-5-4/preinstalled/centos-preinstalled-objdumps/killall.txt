
centos-preinstalled/killall:     file format elf32-littlearm


Disassembly of section .init:

000110ac <_init@@Base>:
   110ac:	push	{r3, lr}
   110b0:	bl	11ac0 <__assert_fail@plt+0x700>
   110b4:	pop	{r3, pc}

Disassembly of section .plt:

000110b8 <calloc@plt-0x14>:
   110b8:	push	{lr}		; (str lr, [sp, #-4]!)
   110bc:	ldr	lr, [pc, #4]	; 110c8 <_init@@Base+0x1c>
   110c0:	add	lr, pc, lr
   110c4:	ldr	pc, [lr, #8]!
   110c8:	andeq	r3, r1, r8, lsr pc

000110cc <calloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #77824	; 0x13000
   110d4:	ldr	pc, [ip, #3896]!	; 0xf38

000110d8 <__getdelim@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #77824	; 0x13000
   110e0:	ldr	pc, [ip, #3888]!	; 0xf30

000110e4 <getpwnam@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #77824	; 0x13000
   110ec:	ldr	pc, [ip, #3880]!	; 0xf28

000110f0 <is_selinux_enabled@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #77824	; 0x13000
   110f8:	ldr	pc, [ip, #3872]!	; 0xf20

000110fc <strcmp@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #77824	; 0x13000
   11104:	ldr	pc, [ip, #3864]!	; 0xf18

00011108 <strtol@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #77824	; 0x13000
   11110:	ldr	pc, [ip, #3856]!	; 0xf10

00011114 <fflush@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #77824	; 0x13000
   1111c:	ldr	pc, [ip, #3848]!	; 0xf08

00011120 <free@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #77824	; 0x13000
   11128:	ldr	pc, [ip, #3840]!	; 0xf00

0001112c <fgets@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #77824	; 0x13000
   11134:	ldr	pc, [ip, #3832]!	; 0xef8

00011138 <memcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #77824	; 0x13000
   11140:	ldr	pc, [ip, #3824]!	; 0xef0

00011144 <memcmp@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #77824	; 0x13000
   1114c:	ldr	pc, [ip, #3816]!	; 0xee8

00011150 <sleep@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #77824	; 0x13000
   11158:	ldr	pc, [ip, #3808]!	; 0xee0

0001115c <dcgettext@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #77824	; 0x13000
   11164:	ldr	pc, [ip, #3800]!	; 0xed8

00011168 <__stack_chk_fail@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #77824	; 0x13000
   11170:	ldr	pc, [ip, #3792]!	; 0xed0

00011174 <rewind@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #77824	; 0x13000
   1117c:	ldr	pc, [ip, #3784]!	; 0xec8

00011180 <sysconf@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #77824	; 0x13000
   11188:	ldr	pc, [ip, #3776]!	; 0xec0

0001118c <realloc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #77824	; 0x13000
   11194:	ldr	pc, [ip, #3768]!	; 0xeb8

00011198 <regexec@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #77824	; 0x13000
   111a0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111a4 <textdomain@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #77824	; 0x13000
   111ac:	ldr	pc, [ip, #3752]!	; 0xea8

000111b0 <strcasecmp@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #77824	; 0x13000
   111b8:	ldr	pc, [ip, #3744]!	; 0xea0

000111bc <perror@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #77824	; 0x13000
   111c4:	ldr	pc, [ip, #3736]!	; 0xe98

000111c8 <readlink@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #77824	; 0x13000
   111d0:	ldr	pc, [ip, #3728]!	; 0xe90

000111d4 <_IO_putc@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #77824	; 0x13000
   111dc:	ldr	pc, [ip, #3720]!	; 0xe88

000111e0 <fwrite@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #77824	; 0x13000
   111e8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ec <opendir@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #77824	; 0x13000
   111f4:	ldr	pc, [ip, #3704]!	; 0xe78

000111f8 <__asprintf_chk@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #77824	; 0x13000
   11200:	ldr	pc, [ip, #3696]!	; 0xe70

00011204 <malloc@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #77824	; 0x13000
   1120c:	ldr	pc, [ip, #3688]!	; 0xe68

00011210 <__libc_start_main@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #77824	; 0x13000
   11218:	ldr	pc, [ip, #3680]!	; 0xe60

0001121c <strerror@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #77824	; 0x13000
   11224:	ldr	pc, [ip, #3672]!	; 0xe58

00011228 <__gmon_start__@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #77824	; 0x13000
   11230:	ldr	pc, [ip, #3664]!	; 0xe50

00011234 <kill@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #77824	; 0x13000
   1123c:	ldr	pc, [ip, #3656]!	; 0xe48

00011240 <__ctype_b_loc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #77824	; 0x13000
   11248:	ldr	pc, [ip, #3648]!	; 0xe40

0001124c <getpid@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #77824	; 0x13000
   11254:	ldr	pc, [ip, #3640]!	; 0xe38

00011258 <exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #77824	; 0x13000
   11260:	ldr	pc, [ip, #3632]!	; 0xe30

00011264 <strlen@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #77824	; 0x13000
   1126c:	ldr	pc, [ip, #3624]!	; 0xe28

00011270 <strchr@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #77824	; 0x13000
   11278:	ldr	pc, [ip, #3616]!	; 0xe20

0001127c <__errno_location@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #77824	; 0x13000
   11284:	ldr	pc, [ip, #3608]!	; 0xe18

00011288 <strncasecmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #77824	; 0x13000
   11290:	ldr	pc, [ip, #3600]!	; 0xe10

00011294 <strncpy@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #77824	; 0x13000
   1129c:	ldr	pc, [ip, #3592]!	; 0xe08

000112a0 <fscanf@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #77824	; 0x13000
   112a8:	ldr	pc, [ip, #3584]!	; 0xe00

000112ac <fgetc@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #77824	; 0x13000
   112b4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b8 <__printf_chk@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #77824	; 0x13000
   112c0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112c4 <strtod@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #77824	; 0x13000
   112cc:	ldr	pc, [ip, #3560]!	; 0xde8

000112d0 <getopt_long_only@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #77824	; 0x13000
   112d8:	ldr	pc, [ip, #3552]!	; 0xde0

000112dc <__fprintf_chk@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #77824	; 0x13000
   112e4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e8 <fclose@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #77824	; 0x13000
   112f0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112f4 <getpgid@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #77824	; 0x13000
   112fc:	ldr	pc, [ip, #3528]!	; 0xdc8

00011300 <rpmatch@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #77824	; 0x13000
   11308:	ldr	pc, [ip, #3520]!	; 0xdc0

0001130c <setlocale@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #77824	; 0x13000
   11314:	ldr	pc, [ip, #3512]!	; 0xdb8

00011318 <strrchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #77824	; 0x13000
   11320:	ldr	pc, [ip, #3504]!	; 0xdb0

00011324 <fputc@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #77824	; 0x13000
   1132c:	ldr	pc, [ip, #3496]!	; 0xda8

00011330 <sscanf@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #77824	; 0x13000
   11338:	ldr	pc, [ip, #3488]!	; 0xda0

0001133c <readdir64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #77824	; 0x13000
   11344:	ldr	pc, [ip, #3480]!	; 0xd98

00011348 <regcomp@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #77824	; 0x13000
   11350:	ldr	pc, [ip, #3472]!	; 0xd90

00011354 <fopen64@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #77824	; 0x13000
   1135c:	ldr	pc, [ip, #3464]!	; 0xd88

00011360 <freecon@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #77824	; 0x13000
   11368:	ldr	pc, [ip, #3456]!	; 0xd80

0001136c <bindtextdomain@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #77824	; 0x13000
   11374:	ldr	pc, [ip, #3448]!	; 0xd78

00011378 <__xstat64@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #77824	; 0x13000
   11380:	ldr	pc, [ip, #3440]!	; 0xd70

00011384 <getpidcon@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #77824	; 0x13000
   1138c:	ldr	pc, [ip, #3432]!	; 0xd68

00011390 <strncmp@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #77824	; 0x13000
   11398:	ldr	pc, [ip, #3424]!	; 0xd60

0001139c <abort@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #77824	; 0x13000
   113a4:	ldr	pc, [ip, #3416]!	; 0xd58

000113a8 <closedir@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #77824	; 0x13000
   113b0:	ldr	pc, [ip, #3408]!	; 0xd50

000113b4 <__snprintf_chk@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #77824	; 0x13000
   113bc:	ldr	pc, [ip, #3400]!	; 0xd48

000113c0 <__assert_fail@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #77824	; 0x13000
   113c8:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113d0 <.text>:
   113d0:	push	{r3, r4, r5, lr}
   113d4:	subs	r3, r0, #0
   113d8:	movw	r4, #21044	; 0x5234
   113dc:	movt	r4, #2
   113e0:	beq	113f8 <__assert_fail@plt+0x38>
   113e4:	movw	r2, #15464	; 0x3c68
   113e8:	ldr	r0, [r4]
   113ec:	movt	r2, #1
   113f0:	mov	r1, #1
   113f4:	bl	112dc <__fprintf_chk@plt>
   113f8:	mov	r2, #5
   113fc:	movw	r1, #13904	; 0x3650
   11400:	mov	r0, #0
   11404:	movt	r1, #1
   11408:	ldr	r5, [r4]
   1140c:	bl	1115c <dcgettext@plt>
   11410:	mov	r1, #1
   11414:	mov	r2, r0
   11418:	mov	r0, r5
   1141c:	bl	112dc <__fprintf_chk@plt>
   11420:	mov	r2, #5
   11424:	movw	r1, #13980	; 0x369c
   11428:	mov	r0, #0
   1142c:	movt	r1, #1
   11430:	ldr	r5, [r4]
   11434:	bl	1115c <dcgettext@plt>
   11438:	mov	r1, #1
   1143c:	mov	r2, r0
   11440:	mov	r0, r5
   11444:	bl	112dc <__fprintf_chk@plt>
   11448:	mov	r2, #5
   1144c:	movw	r1, #14832	; 0x39f0
   11450:	mov	r0, #0
   11454:	movt	r1, #1
   11458:	ldr	r5, [r4]
   1145c:	bl	1115c <dcgettext@plt>
   11460:	mov	r1, #1
   11464:	mov	r2, r0
   11468:	mov	r0, r5
   1146c:	bl	112dc <__fprintf_chk@plt>
   11470:	ldr	r1, [r4]
   11474:	mov	r0, #10
   11478:	bl	11324 <fputc@plt>
   1147c:	mov	r0, #1
   11480:	bl	11258 <exit@plt>
   11484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11488:	movw	sl, #21032	; 0x5228
   1148c:	movt	sl, #2
   11490:	sub	sp, sp, #588	; 0x24c
   11494:	mov	r2, #256	; 0x100
   11498:	mov	r6, r0
   1149c:	ldr	r3, [sl]
   114a0:	mov	r5, r1
   114a4:	add	r0, sp, #164	; 0xa4
   114a8:	ldr	r1, [pc, #1488]	; 11a80 <__assert_fail@plt+0x6c0>
   114ac:	str	r3, [sp, #580]	; 0x244
   114b0:	bl	11138 <memcpy@plt>
   114b4:	movw	r1, #15632	; 0x3d10
   114b8:	mov	r0, #6
   114bc:	movt	r1, #1
   114c0:	bl	1130c <setlocale@plt>
   114c4:	movw	r0, #15864	; 0x3df8
   114c8:	movw	r1, #15872	; 0x3e00
   114cc:	movt	r0, #1
   114d0:	movt	r1, #1
   114d4:	bl	1136c <bindtextdomain@plt>
   114d8:	movw	r0, #15864	; 0x3df8
   114dc:	movt	r0, #1
   114e0:	bl	111a4 <textdomain@plt>
   114e4:	cmp	r6, #1
   114e8:	ble	119d8 <__assert_fail@plt+0x618>
   114ec:	movw	r3, #21060	; 0x5244
   114f0:	movw	r9, #21040	; 0x5230
   114f4:	movt	r3, #2
   114f8:	movw	r8, #21064	; 0x5248
   114fc:	movw	r7, #21072	; 0x5250
   11500:	movt	r9, #2
   11504:	movt	r8, #2
   11508:	movt	r7, #2
   1150c:	mov	fp, #15
   11510:	mov	r2, #0
   11514:	movw	ip, #21044	; 0x5234
   11518:	str	r2, [sp, #12]
   1151c:	movt	ip, #2
   11520:	str	r2, [sp, #20]
   11524:	str	r2, [r3]
   11528:	str	ip, [sp, #16]
   1152c:	mov	r4, #0
   11530:	str	r4, [sp]
   11534:	movw	r2, #16048	; 0x3eb0
   11538:	mov	r0, r6
   1153c:	movt	r2, #1
   11540:	mov	r1, r5
   11544:	add	r3, sp, #164	; 0xa4
   11548:	bl	112d0 <getopt_long_only@plt>
   1154c:	cmn	r0, #1
   11550:	beq	11920 <__assert_fail@plt+0x560>
   11554:	sub	r0, r0, #63	; 0x3f
   11558:	cmp	r0, #58	; 0x3a
   1155c:	ldrls	pc, [pc, r0, lsl #2]
   11560:	b	11530 <__assert_fail@plt+0x170>
   11564:	andeq	r1, r1, r0, lsr #17
   11568:	andeq	r1, r1, r0, lsr r5
   1156c:	andeq	r1, r1, r0, lsr r5
   11570:	andeq	r1, r1, r0, lsr r5
   11574:	andeq	r1, r1, r0, lsr r5
   11578:	andeq	r1, r1, r0, lsr r5
   1157c:	andeq	r1, r1, r0, lsr r5
   11580:	andeq	r1, r1, r0, lsr r5
   11584:	andeq	r1, r1, r0, lsr r5
   11588:	andeq	r1, r1, r0, lsr r5
   1158c:	andeq	r1, r1, r0, ror #16
   11590:	andeq	r1, r1, r0, lsr r5
   11594:	andeq	r1, r1, r0, lsr r5
   11598:	andeq	r1, r1, r0, lsr r5
   1159c:	andeq	r1, r1, r0, lsr r5
   115a0:	andeq	r1, r1, r0, lsr r5
   115a4:	andeq	r1, r1, r0, lsr r5
   115a8:	andeq	r1, r1, r0, lsr r5
   115ac:	andeq	r1, r1, r0, lsr r5
   115b0:	andeq	r1, r1, r0, lsr r5
   115b4:	andeq	r1, r1, r0, lsr r5
   115b8:	andeq	r1, r1, r0, lsr r5
   115bc:	andeq	r1, r1, r0, lsr r5
   115c0:	andeq	r1, r1, ip, lsl #16
   115c4:	andeq	r1, r1, r0, lsr r5
   115c8:	andeq	r1, r1, r0, lsr r5
   115cc:	andeq	r1, r1, r0, lsr r5
   115d0:	andeq	r1, r1, r4, lsr #15
   115d4:	andeq	r1, r1, r0, lsr r5
   115d8:	andeq	r1, r1, r0, lsr r5
   115dc:	andeq	r1, r1, r0, lsr r5
   115e0:	andeq	r1, r1, r0, lsr r5
   115e4:	andeq	r1, r1, r0, lsr r5
   115e8:	andeq	r1, r1, r0, lsr r5
   115ec:	andeq	r1, r1, r0, lsr r5
   115f0:	andeq	r1, r1, r0, lsr r5
   115f4:	andeq	r1, r1, r0, lsr r5
   115f8:	andeq	r1, r1, r0, lsr r5
   115fc:	muleq	r1, r8, r7
   11600:	andeq	r1, r1, r0, lsr r5
   11604:	andeq	r1, r1, ip, lsl #15
   11608:	andeq	r1, r1, r0, lsr r5
   1160c:	andeq	r1, r1, r0, lsl #15
   11610:	andeq	r1, r1, r0, lsr r5
   11614:	andeq	r1, r1, r0, lsr r5
   11618:	andeq	r1, r1, r0, ror #14
   1161c:	andeq	r1, r1, r0, lsr r5
   11620:	andeq	r1, r1, r0, lsr r5
   11624:	andeq	r1, r1, r0, lsr r7
   11628:	andeq	r1, r1, r0, lsr r5
   1162c:	andeq	r1, r1, r4, lsr #14
   11630:	andeq	r1, r1, r8, lsl r7
   11634:	andeq	r1, r1, r0, lsl #14
   11638:	andeq	r1, r1, r0, lsr r5
   1163c:	andeq	r1, r1, ip, lsr #13
   11640:	andeq	r1, r1, r0, lsr #13
   11644:	muleq	r1, r4, r6
   11648:	andeq	r1, r1, r0, lsr r5
   1164c:	andeq	r1, r1, r0, asr r6
   11650:	ldr	r1, [r8]
   11654:	mov	r2, #16
   11658:	add	r0, sp, #420	; 0x1a4
   1165c:	mov	r4, #0
   11660:	bl	11294 <strncpy@plt>
   11664:	add	r0, sp, #420	; 0x1a4
   11668:	strb	r4, [sp, #435]	; 0x1b3
   1166c:	bl	12d6c <__assert_fail@plt+0x19ac>
   11670:	cmp	r0, r4
   11674:	str	r0, [r7, #12]
   11678:	bgt	1152c <__assert_fail@plt+0x16c>
   1167c:	movw	r1, #15892	; 0x3e14
   11680:	mov	r2, #5
   11684:	movt	r1, #1
   11688:	mov	r0, r4
   1168c:	bl	1115c <dcgettext@plt>
   11690:	bl	113d0 <__assert_fail@plt+0x10>
   11694:	mov	r3, #1
   11698:	str	r3, [r7, #32]
   1169c:	b	1152c <__assert_fail@plt+0x16c>
   116a0:	mov	r3, #1
   116a4:	str	r3, [r7, #20]
   116a8:	b	1152c <__assert_fail@plt+0x16c>
   116ac:	ldr	r0, [r8]
   116b0:	movw	r4, #21064	; 0x5248
   116b4:	bl	110e4 <getpwnam@plt>
   116b8:	movt	r4, #2
   116bc:	subs	ip, r0, #0
   116c0:	str	ip, [sp, #20]
   116c4:	bne	1152c <__assert_fail@plt+0x16c>
   116c8:	movw	r3, #21044	; 0x5234
   116cc:	movt	r3, #2
   116d0:	mov	r2, #5
   116d4:	movw	r1, #15920	; 0x3e30
   116d8:	movt	r1, #1
   116dc:	ldr	r5, [r3]
   116e0:	bl	1115c <dcgettext@plt>
   116e4:	ldr	r3, [r4]
   116e8:	mov	r1, #1
   116ec:	mov	r2, r0
   116f0:	mov	r0, r5
   116f4:	bl	112dc <__fprintf_chk@plt>
   116f8:	mov	r0, #1
   116fc:	bl	11258 <exit@plt>
   11700:	movw	r1, #15912	; 0x3e28
   11704:	ldr	r0, [r8]
   11708:	movt	r1, #1
   1170c:	bl	13030 <__assert_fail@plt+0x1c70>
   11710:	mov	fp, r0
   11714:	b	1152c <__assert_fail@plt+0x16c>
   11718:	mov	r3, #1
   1171c:	str	r3, [r7]
   11720:	b	1152c <__assert_fail@plt+0x16c>
   11724:	mov	r3, #1
   11728:	str	r3, [r7, #28]
   1172c:	b	1152c <__assert_fail@plt+0x16c>
   11730:	ldr	r1, [r8]
   11734:	mov	r2, #16
   11738:	add	r0, sp, #436	; 0x1b4
   1173c:	mov	r4, #0
   11740:	bl	11294 <strncpy@plt>
   11744:	add	r0, sp, #436	; 0x1b4
   11748:	strb	r4, [sp, #451]	; 0x1c3
   1174c:	bl	12d6c <__assert_fail@plt+0x19ac>
   11750:	cmp	r0, r4
   11754:	str	r0, [r7, #16]
   11758:	bgt	1152c <__assert_fail@plt+0x16c>
   1175c:	b	1167c <__assert_fail@plt+0x2bc>
   11760:	bl	12f64 <__assert_fail@plt+0x1ba4>
   11764:	mov	r0, #0
   11768:	ldr	r2, [sp, #580]	; 0x244
   1176c:	ldr	r3, [sl]
   11770:	cmp	r2, r3
   11774:	bne	11a00 <__assert_fail@plt+0x640>
   11778:	add	sp, sp, #588	; 0x24c
   1177c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11780:	mov	r3, #1
   11784:	str	r3, [r7, #24]
   11788:	b	1152c <__assert_fail@plt+0x16c>
   1178c:	mov	r3, #1
   11790:	str	r3, [r7, #8]
   11794:	b	1152c <__assert_fail@plt+0x16c>
   11798:	mov	r3, #1
   1179c:	str	r3, [r7, #36]	; 0x24
   117a0:	b	1152c <__assert_fail@plt+0x16c>
   117a4:	bl	110f0 <is_selinux_enabled@plt>
   117a8:	cmp	r0, #0
   117ac:	ble	119e0 <__assert_fail@plt+0x620>
   117b0:	ldr	ip, [r8]
   117b4:	add	r0, sp, #24
   117b8:	mov	r2, #9
   117bc:	mov	r1, ip
   117c0:	str	ip, [sp, #12]
   117c4:	bl	11348 <regcomp@plt>
   117c8:	cmp	r0, #0
   117cc:	beq	1152c <__assert_fail@plt+0x16c>
   117d0:	movw	r3, #21044	; 0x5234
   117d4:	movt	r3, #2
   117d8:	mov	r2, #5
   117dc:	movw	r1, #15948	; 0x3e4c
   117e0:	mov	r0, #0
   117e4:	movt	r1, #1
   117e8:	ldr	r4, [r3]
   117ec:	bl	1115c <dcgettext@plt>
   117f0:	ldr	r3, [sp, #12]
   117f4:	mov	r1, #1
   117f8:	mov	r2, r0
   117fc:	mov	r0, r4
   11800:	bl	112dc <__fprintf_chk@plt>
   11804:	mov	r0, #1
   11808:	bl	11258 <exit@plt>
   1180c:	ldr	r3, [r9]
   11810:	sub	r3, r3, #-1073741823	; 0xc0000001
   11814:	ldr	r0, [r5, r3, lsl #2]
   11818:	lsl	r4, r3, #2
   1181c:	ldrb	r2, [r0]
   11820:	cmp	r2, #45	; 0x2d
   11824:	beq	118fc <__assert_fail@plt+0x53c>
   11828:	movw	r1, #15944	; 0x3e48
   1182c:	mov	r2, #2
   11830:	movt	r1, #1
   11834:	bl	11390 <strncmp@plt>
   11838:	cmp	r0, #0
   1183c:	beq	11914 <__assert_fail@plt+0x554>
   11840:	add	r4, r5, r4
   11844:	movw	r1, #15912	; 0x3e28
   11848:	movt	r1, #1
   1184c:	ldr	r0, [r4, #4]
   11850:	add	r0, r0, #1
   11854:	bl	13030 <__assert_fail@plt+0x1c70>
   11858:	mov	fp, r0
   1185c:	b	1152c <__assert_fail@plt+0x16c>
   11860:	ldr	r3, [r9]
   11864:	sub	r3, r3, #-1073741823	; 0xc0000001
   11868:	ldr	r0, [r5, r3, lsl #2]
   1186c:	lsl	r4, r3, #2
   11870:	ldrb	r2, [r0]
   11874:	cmp	r2, #45	; 0x2d
   11878:	beq	118e0 <__assert_fail@plt+0x520>
   1187c:	movw	r1, #15944	; 0x3e48
   11880:	mov	r2, #2
   11884:	movt	r1, #1
   11888:	bl	11390 <strncmp@plt>
   1188c:	cmp	r0, #0
   11890:	bne	11840 <__assert_fail@plt+0x480>
   11894:	mov	r3, #1
   11898:	str	r3, [r7, #4]
   1189c:	b	1152c <__assert_fail@plt+0x16c>
   118a0:	ldr	r3, [r9]
   118a4:	sub	r3, r3, #-1073741823	; 0xc0000001
   118a8:	ldr	r0, [r5, r3, lsl #2]
   118ac:	ldrb	r3, [r0, #1]
   118b0:	sub	r2, r3, #65	; 0x41
   118b4:	cmp	r2, #25
   118b8:	bls	119ac <__assert_fail@plt+0x5ec>
   118bc:	sub	r3, r3, #48	; 0x30
   118c0:	cmp	r3, #9
   118c4:	bhi	119d8 <__assert_fail@plt+0x618>
   118c8:	add	r0, r0, #1
   118cc:	mov	r1, #0
   118d0:	mov	r2, #10
   118d4:	bl	11108 <strtol@plt>
   118d8:	mov	fp, r0
   118dc:	b	1152c <__assert_fail@plt+0x16c>
   118e0:	ldrb	r3, [r0, #1]
   118e4:	cmp	r3, #73	; 0x49
   118e8:	bne	1187c <__assert_fail@plt+0x4bc>
   118ec:	ldrb	r3, [r0, #2]
   118f0:	cmp	r3, #0
   118f4:	beq	11894 <__assert_fail@plt+0x4d4>
   118f8:	b	1187c <__assert_fail@plt+0x4bc>
   118fc:	ldrb	r3, [r0, #1]
   11900:	cmp	r3, #86	; 0x56
   11904:	bne	11828 <__assert_fail@plt+0x468>
   11908:	ldrb	r3, [r0, #2]
   1190c:	cmp	r3, #0
   11910:	bne	11828 <__assert_fail@plt+0x468>
   11914:	bl	12ee8 <__assert_fail@plt+0x1b28>
   11918:	mov	r0, #0
   1191c:	b	11768 <__assert_fail@plt+0x3a8>
   11920:	movw	r3, #21040	; 0x5230
   11924:	movt	r3, #2
   11928:	ldr	r4, [r3]
   1192c:	rsb	r6, r4, r6
   11930:	cmp	r6, #0
   11934:	ble	119c4 <__assert_fail@plt+0x604>
   11938:	cmp	r6, #32
   1193c:	bgt	11a04 <__assert_fail@plt+0x644>
   11940:	bl	1124c <getpid@plt>
   11944:	mov	r1, #128	; 0x80
   11948:	mov	r3, r1
   1194c:	mov	r2, #1
   11950:	movw	ip, #15048	; 0x3ac8
   11954:	movt	ip, #1
   11958:	str	ip, [sp]
   1195c:	str	r0, [sp, #4]
   11960:	add	r0, sp, #452	; 0x1c4
   11964:	bl	113b4 <__snprintf_chk@plt>
   11968:	add	r1, sp, #452	; 0x1c4
   1196c:	mov	r0, #3
   11970:	add	r2, sp, #56	; 0x38
   11974:	bl	11378 <__xstat64@plt>
   11978:	cmp	r0, #0
   1197c:	bne	11a40 <__assert_fail@plt+0x680>
   11980:	ldr	ip, [sp, #12]
   11984:	add	r2, r5, r4, lsl #2
   11988:	mov	r0, fp
   1198c:	mov	r1, r6
   11990:	cmp	ip, #0
   11994:	addne	r3, sp, #24
   11998:	ldreq	r3, [sp, #12]
   1199c:	str	r3, [sp]
   119a0:	ldr	r3, [sp, #20]
   119a4:	bl	11bb8 <__assert_fail@plt+0x7f8>
   119a8:	b	11768 <__assert_fail@plt+0x3a8>
   119ac:	add	r0, r0, #1
   119b0:	movw	r1, #15912	; 0x3e28
   119b4:	movt	r1, #1
   119b8:	bl	13030 <__assert_fail@plt+0x1c70>
   119bc:	mov	fp, r0
   119c0:	b	1152c <__assert_fail@plt+0x16c>
   119c4:	ldr	ip, [sp, #12]
   119c8:	ldr	r1, [sp, #20]
   119cc:	cmp	ip, #0
   119d0:	cmpeq	r1, #0
   119d4:	bne	11940 <__assert_fail@plt+0x580>
   119d8:	mov	r0, #0
   119dc:	bl	113d0 <__assert_fail@plt+0x10>
   119e0:	ldr	ip, [sp, #16]
   119e4:	movw	r0, #15976	; 0x3e68
   119e8:	mov	r1, #1
   119ec:	mov	r2, #68	; 0x44
   119f0:	movt	r0, #1
   119f4:	ldr	r3, [ip]
   119f8:	bl	111e0 <fwrite@plt>
   119fc:	b	1152c <__assert_fail@plt+0x16c>
   11a00:	bl	11168 <__stack_chk_fail@plt>
   11a04:	movw	r3, #21044	; 0x5234
   11a08:	movt	r3, #2
   11a0c:	mov	r2, #5
   11a10:	movw	r1, #16072	; 0x3ec8
   11a14:	mov	r0, #0
   11a18:	movt	r1, #1
   11a1c:	ldr	r4, [r3]
   11a20:	bl	1115c <dcgettext@plt>
   11a24:	mov	r1, #1
   11a28:	mov	r3, #32
   11a2c:	mov	r2, r0
   11a30:	mov	r0, r4
   11a34:	bl	112dc <__fprintf_chk@plt>
   11a38:	mov	r0, #1
   11a3c:	bl	11258 <exit@plt>
   11a40:	movw	r3, #21044	; 0x5234
   11a44:	movt	r3, #2
   11a48:	mov	r2, #5
   11a4c:	movw	r1, #16112	; 0x3ef0
   11a50:	mov	r0, #0
   11a54:	movt	r1, #1
   11a58:	ldr	r4, [r3]
   11a5c:	bl	1115c <dcgettext@plt>
   11a60:	movw	r3, #15004	; 0x3a9c
   11a64:	mov	r1, #1
   11a68:	movt	r3, #1
   11a6c:	mov	r2, r0
   11a70:	mov	r0, r4
   11a74:	bl	112dc <__fprintf_chk@plt>
   11a78:	mov	r0, #1
   11a7c:	bl	11258 <exit@plt>
   11a80:	andeq	r3, r1, r0, asr r5
   11a84:	mov	fp, #0
   11a88:	mov	lr, #0
   11a8c:	pop	{r1}		; (ldr r1, [sp], #4)
   11a90:	mov	r2, sp
   11a94:	push	{r2}		; (str r2, [sp, #-4]!)
   11a98:	push	{r0}		; (str r0, [sp, #-4]!)
   11a9c:	ldr	ip, [pc, #16]	; 11ab4 <__assert_fail@plt+0x6f4>
   11aa0:	push	{ip}		; (str ip, [sp, #-4]!)
   11aa4:	ldr	r0, [pc, #12]	; 11ab8 <__assert_fail@plt+0x6f8>
   11aa8:	ldr	r3, [pc, #12]	; 11abc <__assert_fail@plt+0x6fc>
   11aac:	bl	11210 <__libc_start_main@plt>
   11ab0:	bl	1139c <abort@plt>
   11ab4:	andeq	r3, r1, r0, lsr r5
   11ab8:	andeq	r1, r1, r4, lsl #9
   11abc:	andeq	r3, r1, ip, asr #9
   11ac0:	ldr	r3, [pc, #20]	; 11adc <__assert_fail@plt+0x71c>
   11ac4:	ldr	r2, [pc, #20]	; 11ae0 <__assert_fail@plt+0x720>
   11ac8:	add	r3, pc, r3
   11acc:	ldr	r2, [r3, r2]
   11ad0:	cmp	r2, #0
   11ad4:	bxeq	lr
   11ad8:	b	11228 <__gmon_start__@plt>
   11adc:	andeq	r3, r1, r0, lsr r5
   11ae0:	andeq	r0, r0, ip, lsl #2
   11ae4:	push	{r3, lr}
   11ae8:	movw	r0, #21028	; 0x5224
   11aec:	ldr	r3, [pc, #36]	; 11b18 <__assert_fail@plt+0x758>
   11af0:	movt	r0, #2
   11af4:	rsb	r3, r0, r3
   11af8:	cmp	r3, #6
   11afc:	popls	{r3, pc}
   11b00:	movw	r3, #0
   11b04:	movt	r3, #0
   11b08:	cmp	r3, #0
   11b0c:	popeq	{r3, pc}
   11b10:	blx	r3
   11b14:	pop	{r3, pc}
   11b18:	andeq	r5, r2, r7, lsr #4
   11b1c:	push	{r3, lr}
   11b20:	movw	r0, #21028	; 0x5224
   11b24:	movw	r3, #21028	; 0x5224
   11b28:	movt	r0, #2
   11b2c:	movt	r3, #2
   11b30:	rsb	r3, r0, r3
   11b34:	asr	r3, r3, #2
   11b38:	add	r3, r3, r3, lsr #31
   11b3c:	asrs	r1, r3, #1
   11b40:	popeq	{r3, pc}
   11b44:	movw	r2, #0
   11b48:	movt	r2, #0
   11b4c:	cmp	r2, #0
   11b50:	popeq	{r3, pc}
   11b54:	blx	r2
   11b58:	pop	{r3, pc}
   11b5c:	push	{r4, lr}
   11b60:	movw	r4, #21068	; 0x524c
   11b64:	movt	r4, #2
   11b68:	ldrb	r3, [r4]
   11b6c:	cmp	r3, #0
   11b70:	popne	{r4, pc}
   11b74:	bl	11ae4 <__assert_fail@plt+0x724>
   11b78:	mov	r3, #1
   11b7c:	strb	r3, [r4]
   11b80:	pop	{r4, pc}
   11b84:	movw	r0, #20220	; 0x4efc
   11b88:	movt	r0, #2
   11b8c:	push	{r3, lr}
   11b90:	ldr	r3, [r0]
   11b94:	cmp	r3, #0
   11b98:	beq	11bb0 <__assert_fail@plt+0x7f0>
   11b9c:	movw	r3, #0
   11ba0:	movt	r3, #0
   11ba4:	cmp	r3, #0
   11ba8:	beq	11bb0 <__assert_fail@plt+0x7f0>
   11bac:	blx	r3
   11bb0:	pop	{r3, lr}
   11bb4:	b	11b1c <__assert_fail@plt+0x75c>
   11bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bbc:	vpush	{d8-d10}
   11bc0:	sub	sp, sp, #5632	; 0x1600
   11bc4:	sub	sp, sp, #20
   11bc8:	movw	ip, #21032	; 0x5228
   11bcc:	movt	ip, #2
   11bd0:	add	lr, sp, #8192	; 0x2000
   11bd4:	str	ip, [sp, #64]	; 0x40
   11bd8:	cmp	r1, #0
   11bdc:	ldr	ip, [ip]
   11be0:	mov	r8, #0
   11be4:	str	r0, [sp, #108]	; 0x6c
   11be8:	add	r0, sp, #5632	; 0x1600
   11bec:	str	r1, [sp, #44]	; 0x2c
   11bf0:	add	r0, r0, #16
   11bf4:	str	ip, [lr, #-2548]	; 0xfffff60c
   11bf8:	movw	r1, #60016	; 0xea70
   11bfc:	ldr	ip, [lr, #-2480]	; 0xfffff650
   11c00:	movt	r1, #65535	; 0xffff
   11c04:	str	r2, [sp, #60]	; 0x3c
   11c08:	str	r3, [sp, #28]
   11c0c:	str	r8, [r0, r1]
   11c10:	str	ip, [sp, #36]	; 0x24
   11c14:	beq	11cdc <__assert_fail@plt+0x91c>
   11c18:	movw	r4, #21072	; 0x5250
   11c1c:	movt	r4, #2
   11c20:	ldr	ip, [sp, #44]	; 0x2c
   11c24:	ldr	r7, [r4]
   11c28:	cmp	r7, r8
   11c2c:	bne	12668 <__assert_fail@plt+0x12a8>
   11c30:	lsl	r0, ip, #2
   11c34:	bl	11204 <malloc@plt>
   11c38:	cmp	r0, #0
   11c3c:	str	r0, [sp, #88]	; 0x58
   11c40:	beq	1264c <__assert_fail@plt+0x128c>
   11c44:	ldr	ip, [sp, #44]	; 0x2c
   11c48:	cmp	ip, #0
   11c4c:	ble	12c38 <__assert_fail@plt+0x1878>
   11c50:	add	r8, sp, #248	; 0xf8
   11c54:	mov	r4, #0
   11c58:	mov	r5, #0
   11c5c:	ldr	r6, [sp, #60]	; 0x3c
   11c60:	mov	fp, ip
   11c64:	b	11c90 <__assert_fail@plt+0x8d0>
   11c68:	mov	r1, sl
   11c6c:	mov	r0, #3
   11c70:	mov	r2, r8
   11c74:	bl	11378 <__xstat64@plt>
   11c78:	cmp	r0, #0
   11c7c:	blt	12d5c <__assert_fail@plt+0x199c>
   11c80:	add	r7, r7, #1
   11c84:	add	r8, r8, #104	; 0x68
   11c88:	cmp	r7, fp
   11c8c:	beq	11cd0 <__assert_fail@plt+0x910>
   11c90:	mov	r9, r6
   11c94:	ldr	sl, [r6], #4
   11c98:	mov	r1, #47	; 0x2f
   11c9c:	mov	r0, sl
   11ca0:	bl	11270 <strchr@plt>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11c68 <__assert_fail@plt+0x8a8>
   11cac:	strd	r4, [r8]
   11cb0:	add	r8, r8, #104	; 0x68
   11cb4:	ldr	r0, [r6, #-4]
   11cb8:	bl	11264 <strlen@plt>
   11cbc:	ldr	ip, [sp, #88]	; 0x58
   11cc0:	str	r0, [ip, r7, lsl #2]
   11cc4:	add	r7, r7, #1
   11cc8:	cmp	r7, fp
   11ccc:	bne	11c90 <__assert_fail@plt+0x8d0>
   11cd0:	mov	ip, #0
   11cd4:	str	ip, [sp, #96]	; 0x60
   11cd8:	b	11ce8 <__assert_fail@plt+0x928>
   11cdc:	ldr	ip, [sp, #44]	; 0x2c
   11ce0:	str	ip, [sp, #96]	; 0x60
   11ce4:	str	ip, [sp, #88]	; 0x58
   11ce8:	bl	1124c <getpid@plt>
   11cec:	mov	r6, r0
   11cf0:	movw	r0, #15004	; 0x3a9c
   11cf4:	movt	r0, #1
   11cf8:	bl	111ec <opendir@plt>
   11cfc:	subs	r5, r0, #0
   11d00:	beq	12cac <__assert_fail@plt+0x18ec>
   11d04:	mov	r0, #1024	; 0x400
   11d08:	bl	11204 <malloc@plt>
   11d0c:	subs	r4, r0, #0
   11d10:	beq	1264c <__assert_fail@plt+0x128c>
   11d14:	mov	ip, #0
   11d18:	mov	r7, #256	; 0x100
   11d1c:	mov	r9, ip
   11d20:	str	ip, [sp, #32]
   11d24:	mov	r0, r5
   11d28:	bl	1133c <readdir64@plt>
   11d2c:	cmp	r0, #0
   11d30:	beq	11d78 <__assert_fail@plt+0x9b8>
   11d34:	add	r0, r0, #19
   11d38:	mov	r1, #0
   11d3c:	mov	r2, #10
   11d40:	bl	11108 <strtol@plt>
   11d44:	subs	r8, r0, #0
   11d48:	beq	11d24 <__assert_fail@plt+0x964>
   11d4c:	cmp	r6, r8
   11d50:	beq	11d24 <__assert_fail@plt+0x964>
   11d54:	cmp	r9, r7
   11d58:	beq	12480 <__assert_fail@plt+0x10c0>
   11d5c:	mov	r3, r9
   11d60:	mov	r0, r5
   11d64:	str	r8, [r4, r3, lsl #2]
   11d68:	add	r9, r9, #1
   11d6c:	bl	1133c <readdir64@plt>
   11d70:	cmp	r0, #0
   11d74:	bne	11d34 <__assert_fail@plt+0x974>
   11d78:	mov	r0, r5
   11d7c:	str	r9, [sp, #32]
   11d80:	bl	113a8 <closedir@plt>
   11d84:	lsl	r0, r7, #2
   11d88:	bl	11204 <malloc@plt>
   11d8c:	subs	sl, r0, #0
   11d90:	beq	1264c <__assert_fail@plt+0x128c>
   11d94:	movw	ip, #21072	; 0x5250
   11d98:	movt	ip, #2
   11d9c:	str	ip, [sp, #40]	; 0x28
   11da0:	ldr	r3, [ip, #8]
   11da4:	cmp	r3, #0
   11da8:	streq	r3, [sp, #104]	; 0x68
   11dac:	bne	12634 <__assert_fail@plt+0x1274>
   11db0:	ldr	ip, [sp, #32]
   11db4:	cmp	ip, #0
   11db8:	beq	12c14 <__assert_fail@plt+0x1854>
   11dbc:	add	lr, sp, #3600	; 0xe10
   11dc0:	mov	ip, #0
   11dc4:	sub	r7, lr, #4
   11dc8:	str	sl, [sp, #100]	; 0x64
   11dcc:	mov	fp, r4
   11dd0:	mov	sl, ip
   11dd4:	mov	r8, r7
   11dd8:	str	ip, [sp, #56]	; 0x38
   11ddc:	vldr	d9, [pc, #748]	; 120d0 <__assert_fail@plt+0xd10>
   11de0:	str	ip, [sp, #92]	; 0x5c
   11de4:	ldr	ip, [sp, #28]
   11de8:	cmp	ip, #0
   11dec:	beq	120d8 <__assert_fail@plt+0xd18>
   11df0:	ldr	r7, [ip, #8]
   11df4:	movw	r3, #15020	; 0x3aac
   11df8:	movt	r3, #1
   11dfc:	str	r3, [sp]
   11e00:	ldr	ip, [fp]
   11e04:	mov	r1, #128	; 0x80
   11e08:	mov	r3, r1
   11e0c:	mov	r2, #1
   11e10:	mov	r0, r8
   11e14:	str	ip, [sp, #4]
   11e18:	bl	113b4 <__snprintf_chk@plt>
   11e1c:	mov	r0, r8
   11e20:	movw	r1, #15036	; 0x3abc
   11e24:	movt	r1, #1
   11e28:	bl	11354 <fopen64@plt>
   11e2c:	subs	r4, r0, #0
   11e30:	addne	r5, sp, #136	; 0x88
   11e34:	bne	11e5c <__assert_fail@plt+0xa9c>
   11e38:	b	11f3c <__assert_fail@plt+0xb7c>
   11e3c:	movw	r1, #15040	; 0x3ac0
   11e40:	mov	r0, r8
   11e44:	movt	r1, #1
   11e48:	mov	r2, r5
   11e4c:	bl	11330 <sscanf@plt>
   11e50:	add	r9, sp, #144	; 0x90
   11e54:	cmp	r0, #0
   11e58:	bne	11eb8 <__assert_fail@plt+0xaf8>
   11e5c:	mov	r0, r8
   11e60:	mov	r1, #128	; 0x80
   11e64:	mov	r2, r4
   11e68:	bl	1112c <fgets@plt>
   11e6c:	cmp	r0, #0
   11e70:	bne	11e3c <__assert_fail@plt+0xa7c>
   11e74:	mov	r6, r0
   11e78:	mov	r0, r4
   11e7c:	bl	112e8 <fclose@plt>
   11e80:	movw	r3, #21044	; 0x5234
   11e84:	movt	r3, #2
   11e88:	mov	r2, #5
   11e8c:	mov	r0, r6
   11e90:	movw	r1, #15492	; 0x3c84
   11e94:	movt	r1, #1
   11e98:	ldr	r4, [r3]
   11e9c:	bl	1115c <dcgettext@plt>
   11ea0:	mov	r1, #1
   11ea4:	mov	r2, r0
   11ea8:	mov	r0, r4
   11eac:	bl	112dc <__fprintf_chk@plt>
   11eb0:	mov	r0, #1
   11eb4:	bl	11258 <exit@plt>
   11eb8:	add	lr, sp, #5632	; 0x1600
   11ebc:	movw	r3, #60024	; 0xea78
   11ec0:	add	lr, lr, #16
   11ec4:	movt	r3, #65535	; 0xffff
   11ec8:	mov	r0, r4
   11ecc:	ldr	r4, [lr, r3]
   11ed0:	bl	112e8 <fclose@plt>
   11ed4:	cmp	r7, r4
   11ed8:	bne	11f3c <__assert_fail@plt+0xb7c>
   11edc:	ldr	ip, [sp, #36]	; 0x24
   11ee0:	cmp	ip, #0
   11ee4:	beq	120e8 <__assert_fail@plt+0xd28>
   11ee8:	ldr	r0, [fp]
   11eec:	sub	r1, r9, #16
   11ef0:	bl	11384 <getpidcon@plt>
   11ef4:	cmp	r0, #0
   11ef8:	blt	11f3c <__assert_fail@plt+0xb7c>
   11efc:	add	lr, sp, #5632	; 0x1600
   11f00:	movw	r4, #60016	; 0xea70
   11f04:	add	lr, lr, #16
   11f08:	movt	r4, #65535	; 0xffff
   11f0c:	mov	r3, #0
   11f10:	ldr	r0, [sp, #36]	; 0x24
   11f14:	ldr	r1, [lr, r4]
   11f18:	mov	r2, r3
   11f1c:	str	r3, [sp]
   11f20:	bl	11198 <regexec@plt>
   11f24:	cmp	r0, #0
   11f28:	beq	1241c <__assert_fail@plt+0x105c>
   11f2c:	add	r1, sp, #5632	; 0x1600
   11f30:	add	r1, r1, #16
   11f34:	ldr	r0, [r1, r4]
   11f38:	bl	11360 <freecon@plt>
   11f3c:	ldr	ip, [sp, #32]
   11f40:	add	sl, sl, #1
   11f44:	add	fp, fp, #4
   11f48:	cmp	sl, ip
   11f4c:	bne	11de4 <__assert_fail@plt+0xa24>
   11f50:	ldr	sl, [sp, #100]	; 0x64
   11f54:	ldr	r8, [sp, #92]	; 0x5c
   11f58:	ldr	ip, [sp, #40]	; 0x28
   11f5c:	ldr	r4, [ip, #28]
   11f60:	cmp	r4, #0
   11f64:	bne	12000 <__assert_fail@plt+0xc40>
   11f68:	ldr	ip, [sp, #44]	; 0x2c
   11f6c:	cmp	ip, #0
   11f70:	ble	12000 <__assert_fail@plt+0xc40>
   11f74:	movw	r6, #21044	; 0x5234
   11f78:	mov	r5, #1
   11f7c:	movt	r6, #2
   11f80:	ldr	r7, [sp, #56]	; 0x38
   11f84:	mov	fp, ip
   11f88:	b	11f98 <__assert_fail@plt+0xbd8>
   11f8c:	add	r4, r4, #1
   11f90:	cmp	r4, fp
   11f94:	beq	11fd8 <__assert_fail@plt+0xc18>
   11f98:	ands	r0, r7, r5, lsl r4
   11f9c:	bne	11f8c <__assert_fail@plt+0xbcc>
   11fa0:	mov	r2, #5
   11fa4:	movw	r1, #15468	; 0x3c6c
   11fa8:	movt	r1, #1
   11fac:	ldr	r9, [r6]
   11fb0:	bl	1115c <dcgettext@plt>
   11fb4:	ldr	ip, [sp, #60]	; 0x3c
   11fb8:	mov	r1, #1
   11fbc:	ldr	r3, [ip, r4, lsl #2]
   11fc0:	add	r4, r4, #1
   11fc4:	mov	r2, r0
   11fc8:	mov	r0, r9
   11fcc:	bl	112dc <__fprintf_chk@plt>
   11fd0:	cmp	r4, fp
   11fd4:	bne	11f98 <__assert_fail@plt+0xbd8>
   11fd8:	ldr	ip, [sp, #44]	; 0x2c
   11fdc:	mov	r2, #1
   11fe0:	sub	r3, ip, #1
   11fe4:	ldr	ip, [sp, #56]	; 0x38
   11fe8:	lsl	r3, r2, r3
   11fec:	sub	r2, r3, #1
   11ff0:	orr	r3, r2, r3
   11ff4:	subs	r6, r3, ip
   11ff8:	movne	r6, #1
   11ffc:	b	12014 <__assert_fail@plt+0xc54>
   12000:	ldr	ip, [sp, #44]	; 0x2c
   12004:	cmp	ip, #0
   12008:	bne	11fd8 <__assert_fail@plt+0xc18>
   1200c:	rsbs	r6, r8, #1
   12010:	movcc	r6, #0
   12014:	cmp	r8, #0
   12018:	beq	120a4 <__assert_fail@plt+0xce4>
   1201c:	ldr	ip, [sp, #40]	; 0x28
   12020:	ldr	r3, [ip, #32]
   12024:	cmp	r3, #0
   12028:	ldrne	r7, [sp, #40]	; 0x28
   1202c:	beq	120a4 <__assert_fail@plt+0xce4>
   12030:	ldr	r5, [r7, #8]
   12034:	mov	r4, #0
   12038:	b	12048 <__assert_fail@plt+0xc88>
   1203c:	add	r4, r4, #1
   12040:	cmp	r4, r8
   12044:	bge	12088 <__assert_fail@plt+0xcc8>
   12048:	ldr	r0, [sl, r4, lsl #2]
   1204c:	cmp	r5, #0
   12050:	mov	r1, #0
   12054:	rsbne	r0, r0, #0
   12058:	bl	11234 <kill@plt>
   1205c:	cmp	r0, #0
   12060:	bge	1203c <__assert_fail@plt+0xc7c>
   12064:	bl	1127c <__errno_location@plt>
   12068:	ldr	r3, [r0]
   1206c:	cmp	r3, #3
   12070:	bne	1203c <__assert_fail@plt+0xc7c>
   12074:	sub	r8, r8, #1
   12078:	cmp	r4, r8
   1207c:	ldr	r3, [sl, r8, lsl #2]
   12080:	str	r3, [sl, r4, lsl #2]
   12084:	blt	12048 <__assert_fail@plt+0xc88>
   12088:	mov	r0, #1
   1208c:	bl	11150 <sleep@plt>
   12090:	cmp	r8, #0
   12094:	beq	120a4 <__assert_fail@plt+0xce4>
   12098:	ldr	r3, [r7, #32]
   1209c:	cmp	r3, #0
   120a0:	bne	12030 <__assert_fail@plt+0xc70>
   120a4:	ldr	ip, [sp, #64]	; 0x40
   120a8:	add	r0, sp, #8192	; 0x2000
   120ac:	ldr	r2, [r0, #-2548]	; 0xfffff60c
   120b0:	mov	r0, r6
   120b4:	ldr	r3, [ip]
   120b8:	cmp	r2, r3
   120bc:	bne	12cc0 <__assert_fail@plt+0x1900>
   120c0:	add	sp, sp, #5632	; 0x1600
   120c4:	add	sp, sp, #20
   120c8:	vpop	{d8-d10}
   120cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   120d8:	ldr	ip, [sp, #36]	; 0x24
   120dc:	add	r9, sp, #144	; 0x90
   120e0:	cmp	ip, #0
   120e4:	bne	11ee8 <__assert_fail@plt+0xb28>
   120e8:	movw	r2, #15048	; 0x3ac8
   120ec:	mov	r1, #1
   120f0:	movt	r2, #1
   120f4:	add	r0, sp, #124	; 0x7c
   120f8:	ldr	r3, [fp]
   120fc:	bl	111f8 <__asprintf_chk@plt>
   12100:	cmp	r0, #0
   12104:	blt	11f3c <__assert_fail@plt+0xb7c>
   12108:	add	r3, sp, #5632	; 0x1600
   1210c:	movw	r5, #60012	; 0xea6c
   12110:	add	r3, r3, #16
   12114:	movt	r5, #65535	; 0xffff
   12118:	movw	r1, #15036	; 0x3abc
   1211c:	movt	r1, #1
   12120:	ldr	r0, [r3, r5]
   12124:	bl	11354 <fopen64@plt>
   12128:	subs	r4, r0, #0
   1212c:	beq	12554 <__assert_fail@plt+0x1194>
   12130:	add	lr, sp, #5632	; 0x1600
   12134:	add	lr, lr, #16
   12138:	ldr	r0, [lr, r5]
   1213c:	bl	11120 <free@plt>
   12140:	add	r2, sp, #3568	; 0xdf0
   12144:	add	ip, sp, #3584	; 0xe00
   12148:	movw	r1, #15064	; 0x3ad8
   1214c:	mov	r0, r4
   12150:	movt	r1, #1
   12154:	add	r2, r2, #12
   12158:	sub	ip, ip, #4
   1215c:	str	ip, [sp, #24]
   12160:	bl	112a0 <fscanf@plt>
   12164:	cmp	r0, #1
   12168:	bne	12474 <__assert_fail@plt+0x10b4>
   1216c:	ldr	ip, [sp, #40]	; 0x28
   12170:	movw	r3, #21072	; 0x5250
   12174:	movt	r3, #2
   12178:	ldr	r2, [ip, #12]
   1217c:	cmp	r2, #0
   12180:	bne	12430 <__assert_fail@plt+0x1070>
   12184:	ldr	r3, [r3, #16]
   12188:	cmp	r3, #0
   1218c:	bne	12430 <__assert_fail@plt+0x1070>
   12190:	vldr	d8, [pc, #-200]	; 120d0 <__assert_fail@plt+0xd10>
   12194:	mov	r0, r4
   12198:	bl	112e8 <fclose@plt>
   1219c:	add	r0, sp, #3568	; 0xdf0
   121a0:	add	r0, r0, #12
   121a4:	bl	11264 <strlen@plt>
   121a8:	cmp	r0, #15
   121ac:	str	r0, [sp, #72]	; 0x48
   121b0:	beq	127ac <__assert_fail@plt+0x13ec>
   121b4:	mov	ip, #0
   121b8:	str	ip, [sp, #68]	; 0x44
   121bc:	mov	r5, ip
   121c0:	ldr	ip, [sp, #44]	; 0x2c
   121c4:	cmp	ip, #0
   121c8:	ble	12c0c <__assert_fail@plt+0x184c>
   121cc:	movw	ip, #21072	; 0x5250
   121d0:	movt	ip, #2
   121d4:	str	ip, [sp, #48]	; 0x30
   121d8:	movw	ip, #60012	; 0xea6c
   121dc:	movt	ip, #65535	; 0xffff
   121e0:	str	ip, [sp, #84]	; 0x54
   121e4:	movw	ip, #60032	; 0xea80
   121e8:	movt	ip, #65535	; 0xffff
   121ec:	str	ip, [sp, #112]	; 0x70
   121f0:	mov	r4, #0
   121f4:	ldr	ip, [sp, #96]	; 0x60
   121f8:	add	r7, sp, #344	; 0x158
   121fc:	str	sl, [sp, #76]	; 0x4c
   12200:	mov	r6, r4
   12204:	ldr	sl, [sp, #40]	; 0x28
   12208:	str	r9, [sp, #116]	; 0x74
   1220c:	mov	r9, ip
   12210:	str	r8, [sp, #80]	; 0x50
   12214:	mov	r8, r5
   12218:	ldr	r3, [sl]
   1221c:	cmp	r3, #0
   12220:	beq	1249c <__assert_fail@plt+0x10dc>
   12224:	ldr	ip, [sp, #68]	; 0x44
   12228:	mov	r3, #0
   1222c:	ldr	r1, [sp, #24]
   12230:	mov	r0, r9
   12234:	cmp	ip, r3
   12238:	mov	r2, r3
   1223c:	str	r3, [sp]
   12240:	movne	r1, r8
   12244:	bl	11198 <regexec@plt>
   12248:	cmp	r0, #0
   1224c:	bne	123f4 <__assert_fail@plt+0x1034>
   12250:	mov	r5, r8
   12254:	ldr	sl, [sp, #76]	; 0x4c
   12258:	ldr	r8, [sp, #80]	; 0x50
   1225c:	ldr	ip, [sp, #44]	; 0x2c
   12260:	adds	r3, ip, #0
   12264:	movne	r3, #1
   12268:	cmn	r6, #1
   1226c:	movne	r3, #0
   12270:	cmp	r3, #0
   12274:	bne	11f3c <__assert_fail@plt+0xb7c>
   12278:	ldr	ip, [sp, #40]	; 0x28
   1227c:	ldr	r3, [ip, #8]
   12280:	cmp	r3, #0
   12284:	ldreq	r4, [fp]
   12288:	bne	128d0 <__assert_fail@plt+0x1510>
   1228c:	ldr	ip, [sp, #40]	; 0x28
   12290:	ldr	r3, [ip, #24]
   12294:	cmp	r3, #0
   12298:	bne	12928 <__assert_fail@plt+0x1568>
   1229c:	ldr	ip, [sp, #40]	; 0x28
   122a0:	ldr	r9, [ip, #8]
   122a4:	cmp	r9, #0
   122a8:	moveq	r0, r4
   122ac:	bne	12660 <__assert_fail@plt+0x12a0>
   122b0:	ldr	r1, [sp, #108]	; 0x6c
   122b4:	bl	11234 <kill@plt>
   122b8:	cmp	r0, #0
   122bc:	blt	12a34 <__assert_fail@plt+0x1674>
   122c0:	ldr	ip, [sp, #40]	; 0x28
   122c4:	ldr	r3, [ip, #20]
   122c8:	cmp	r3, #0
   122cc:	bne	12730 <__assert_fail@plt+0x1370>
   122d0:	cmn	r6, #1
   122d4:	ldr	r0, [sp, #100]	; 0x64
   122d8:	ldrne	ip, [sp, #56]	; 0x38
   122dc:	movne	r3, #1
   122e0:	orrne	ip, ip, r3, lsl r6
   122e4:	strne	ip, [sp, #56]	; 0x38
   122e8:	ldr	ip, [sp, #92]	; 0x5c
   122ec:	str	r4, [r0, ip, lsl #2]
   122f0:	add	ip, ip, #1
   122f4:	str	ip, [sp, #92]	; 0x5c
   122f8:	b	11f3c <__assert_fail@plt+0xb7c>
   122fc:	movw	r2, #15328	; 0x3be0
   12300:	add	r0, sp, #124	; 0x7c
   12304:	movt	r2, #1
   12308:	mov	r1, #1
   1230c:	ldr	r3, [fp]
   12310:	bl	111f8 <__asprintf_chk@plt>
   12314:	cmp	r0, #0
   12318:	blt	123f4 <__assert_fail@plt+0x1034>
   1231c:	ldr	ip, [sp, #84]	; 0x54
   12320:	add	lr, sp, #5632	; 0x1600
   12324:	add	lr, lr, #16
   12328:	mov	r0, #3
   1232c:	ldr	r2, [sp, #116]	; 0x74
   12330:	movw	r5, #60012	; 0xea6c
   12334:	ldr	r1, [lr, ip]
   12338:	movt	r5, #65535	; 0xffff
   1233c:	bl	11378 <__xstat64@plt>
   12340:	cmp	r0, #0
   12344:	blt	123e0 <__assert_fail@plt+0x1020>
   12348:	add	lr, sp, #5632	; 0x1600
   1234c:	ldr	ip, [sp, #112]	; 0x70
   12350:	add	lr, lr, #16
   12354:	ldrd	r0, [r7, #-96]	; 0xffffffa0
   12358:	ldrd	r2, [lr, ip]
   1235c:	cmp	r1, r3
   12360:	cmpeq	r0, r2
   12364:	bne	12380 <__assert_fail@plt+0xfc0>
   12368:	ldr	ip, [sp, #116]	; 0x74
   1236c:	ldrd	r0, [r7]
   12370:	ldrd	r2, [ip, #96]	; 0x60
   12374:	cmp	r1, r3
   12378:	cmpeq	r0, r2
   1237c:	beq	12cc4 <__assert_fail@plt+0x1904>
   12380:	ldr	ip, [sp, #60]	; 0x3c
   12384:	ldr	r0, [ip, r4]
   12388:	bl	11264 <strlen@plt>
   1238c:	add	r2, r0, #1
   12390:	mov	r5, r0
   12394:	str	r2, [sp, #20]
   12398:	mov	r0, r2
   1239c:	bl	11204 <malloc@plt>
   123a0:	ldr	r2, [sp, #20]
   123a4:	subs	r3, r0, #0
   123a8:	beq	123d8 <__assert_fail@plt+0x1018>
   123ac:	ldr	ip, [sp, #84]	; 0x54
   123b0:	add	lr, sp, #5632	; 0x1600
   123b4:	add	lr, lr, #16
   123b8:	mov	r1, r3
   123bc:	ldr	r0, [lr, ip]
   123c0:	str	r3, [sp, #20]
   123c4:	bl	111c8 <readlink@plt>
   123c8:	ldr	r3, [sp, #20]
   123cc:	cmp	r0, r5
   123d0:	mov	r2, r0
   123d4:	beq	12ba8 <__assert_fail@plt+0x17e8>
   123d8:	mov	r0, r3
   123dc:	bl	11120 <free@plt>
   123e0:	add	lr, sp, #5632	; 0x1600
   123e4:	ldr	ip, [sp, #84]	; 0x54
   123e8:	add	lr, lr, #16
   123ec:	ldr	r0, [lr, ip]
   123f0:	bl	11120 <free@plt>
   123f4:	ldr	ip, [sp, #44]	; 0x2c
   123f8:	add	r6, r6, #1
   123fc:	add	r4, r4, #4
   12400:	add	r7, r7, #104	; 0x68
   12404:	cmp	r6, ip
   12408:	add	r9, r9, #32
   1240c:	bne	12218 <__assert_fail@plt+0xe58>
   12410:	ldr	sl, [sp, #76]	; 0x4c
   12414:	ldr	r8, [sp, #80]	; 0x50
   12418:	b	11f3c <__assert_fail@plt+0xb7c>
   1241c:	add	r2, sp, #5632	; 0x1600
   12420:	add	r2, r2, #16
   12424:	ldr	r0, [r2, r4]
   12428:	bl	11360 <freecon@plt>
   1242c:	b	120e8 <__assert_fail@plt+0xd28>
   12430:	mov	r0, r4
   12434:	movw	r5, #60024	; 0xea78
   12438:	bl	11174 <rewind@plt>
   1243c:	add	lr, sp, #5632	; 0x1600
   12440:	add	lr, lr, #16
   12444:	movt	r5, #65535	; 0xffff
   12448:	mov	r2, #0
   1244c:	mov	r3, #0
   12450:	movw	r1, #15080	; 0x3ae8
   12454:	strd	r2, [lr, r5]
   12458:	movt	r1, #1
   1245c:	mov	r0, r4
   12460:	sub	r2, r9, #8
   12464:	bl	112a0 <fscanf@plt>
   12468:	cmp	r0, #1
   1246c:	mov	r7, r0
   12470:	beq	12568 <__assert_fail@plt+0x11a8>
   12474:	mov	r0, r4
   12478:	bl	112e8 <fclose@plt>
   1247c:	b	11f3c <__assert_fail@plt+0xb7c>
   12480:	mov	r0, r4
   12484:	lsl	r1, r9, #3
   12488:	bl	1118c <realloc@plt>
   1248c:	subs	r4, r0, #0
   12490:	beq	12d48 <__assert_fail@plt+0x1988>
   12494:	lsl	r7, r9, #1
   12498:	b	11d5c <__assert_fail@plt+0x99c>
   1249c:	ldr	ip, [sp, #48]	; 0x30
   124a0:	ldr	r3, [ip, #12]
   124a4:	cmp	r3, #0
   124a8:	beq	12520 <__assert_fail@plt+0x1160>
   124ac:	vcmp.f64	d8, #0.0
   124b0:	vmrs	APSR_nzcv, fpscr
   124b4:	beq	124dc <__assert_fail@plt+0x111c>
   124b8:	vmov	s13, r3
   124bc:	vcvt.f64.s32	d7, s13
   124c0:	vcmpe.f64	d8, d7
   124c4:	vmrs	APSR_nzcv, fpscr
   124c8:	bgt	123f4 <__assert_fail@plt+0x1034>
   124cc:	ldr	ip, [sp, #48]	; 0x30
   124d0:	ldr	r3, [ip, #16]
   124d4:	cmp	r3, #0
   124d8:	bne	1253c <__assert_fail@plt+0x117c>
   124dc:	ldrd	r2, [r7, #-96]	; 0xffffffa0
   124e0:	orrs	r0, r2, r3
   124e4:	bne	122fc <__assert_fail@plt+0xf3c>
   124e8:	ldr	ip, [sp, #72]	; 0x48
   124ec:	cmp	ip, #15
   124f0:	beq	126dc <__assert_fail@plt+0x131c>
   124f4:	ldr	r3, [sl, #4]
   124f8:	add	r1, sp, #3568	; 0xdf0
   124fc:	ldr	ip, [sp, #60]	; 0x3c
   12500:	add	r1, r1, #12
   12504:	cmp	r3, #1
   12508:	ldr	r0, [ip, r4]
   1250c:	beq	1279c <__assert_fail@plt+0x13dc>
   12510:	bl	110fc <strcmp@plt>
   12514:	cmp	r0, #0
   12518:	bne	123f4 <__assert_fail@plt+0x1034>
   1251c:	b	12250 <__assert_fail@plt+0xe90>
   12520:	ldr	ip, [sp, #48]	; 0x30
   12524:	ldr	r3, [ip, #16]
   12528:	cmp	r3, #0
   1252c:	beq	124dc <__assert_fail@plt+0x111c>
   12530:	vcmp.f64	d8, #0.0
   12534:	vmrs	APSR_nzcv, fpscr
   12538:	beq	124dc <__assert_fail@plt+0x111c>
   1253c:	vmov	s13, r3
   12540:	vcvt.f64.s32	d7, s13
   12544:	vcmpe.f64	d8, d7
   12548:	vmrs	APSR_nzcv, fpscr
   1254c:	bmi	123f4 <__assert_fail@plt+0x1034>
   12550:	b	124dc <__assert_fail@plt+0x111c>
   12554:	add	ip, sp, #5632	; 0x1600
   12558:	add	ip, ip, #16
   1255c:	ldr	r0, [ip, r5]
   12560:	bl	11120 <free@plt>
   12564:	b	11f3c <__assert_fail@plt+0xb7c>
   12568:	add	r3, sp, #5632	; 0x1600
   1256c:	mov	r0, #2
   12570:	add	r3, r3, #16
   12574:	ldrd	r2, [r3, r5]
   12578:	strd	r2, [sp, #48]	; 0x30
   1257c:	bl	11180 <sysconf@plt>
   12580:	vmov	s13, r0
   12584:	vcvt.f64.s32	d10, s13
   12588:	vcmpe.f64	d10, #0.0
   1258c:	vmrs	APSR_nzcv, fpscr
   12590:	ble	12c5c <__assert_fail@plt+0x189c>
   12594:	movw	r0, #15196	; 0x3b5c
   12598:	movw	r1, #15036	; 0x3abc
   1259c:	movt	r0, #1
   125a0:	movt	r1, #1
   125a4:	bl	11354 <fopen64@plt>
   125a8:	subs	r5, r0, #0
   125ac:	beq	12c7c <__assert_fail@plt+0x18bc>
   125b0:	mov	r1, #0
   125b4:	mov	r0, r7
   125b8:	bl	1130c <setlocale@plt>
   125bc:	movw	r1, #15248	; 0x3b90
   125c0:	movt	r1, #1
   125c4:	mov	r6, r0
   125c8:	mov	r0, r7
   125cc:	bl	1130c <setlocale@plt>
   125d0:	mov	r0, r5
   125d4:	movw	r1, #15252	; 0x3b94
   125d8:	mov	r2, r8
   125dc:	movt	r1, #1
   125e0:	bl	112a0 <fscanf@plt>
   125e4:	cmn	r0, #1
   125e8:	beq	12a88 <__assert_fail@plt+0x16c8>
   125ec:	mov	r0, r5
   125f0:	bl	112e8 <fclose@plt>
   125f4:	mov	r1, r6
   125f8:	mov	r0, #1
   125fc:	bl	1130c <setlocale@plt>
   12600:	mov	r0, r8
   12604:	mov	r1, #0
   12608:	bl	112c4 <strtod@plt>
   1260c:	ldrd	r0, [sp, #48]	; 0x30
   12610:	vmov.f64	d8, d0
   12614:	bl	13458 <__assert_fail@plt+0x2098>
   12618:	vmov	d7, r0, r1
   1261c:	vdiv.f64	d10, d7, d10
   12620:	vsub.f64	d8, d8, d10
   12624:	vcmp.f64	d8, #0.0
   12628:	vmrs	APSR_nzcv, fpscr
   1262c:	vmovmi.f64	d8, d9
   12630:	b	12194 <__assert_fail@plt+0xdd4>
   12634:	ldr	r0, [sp, #32]
   12638:	mov	r1, #4
   1263c:	bl	110cc <calloc@plt>
   12640:	cmp	r0, #0
   12644:	str	r0, [sp, #104]	; 0x68
   12648:	bne	11db0 <__assert_fail@plt+0x9f0>
   1264c:	movw	r0, #14956	; 0x3a6c
   12650:	movt	r0, #1
   12654:	bl	111bc <perror@plt>
   12658:	mov	r0, #1
   1265c:	bl	11258 <exit@plt>
   12660:	rsb	r0, r4, #0
   12664:	b	122b0 <__assert_fail@plt+0xef0>
   12668:	lsl	r0, ip, #5
   1266c:	bl	11204 <malloc@plt>
   12670:	cmp	r0, #0
   12674:	str	r0, [sp, #96]	; 0x60
   12678:	beq	1264c <__assert_fail@plt+0x128c>
   1267c:	ldr	r6, [r4, #4]
   12680:	ldr	ip, [sp, #44]	; 0x2c
   12684:	cmp	r6, #0
   12688:	movne	r6, #11
   1268c:	moveq	r6, #9
   12690:	cmp	ip, #0
   12694:	ble	12d40 <__assert_fail@plt+0x1980>
   12698:	ldr	r7, [sp, #60]	; 0x3c
   1269c:	mov	r9, ip
   126a0:	ldr	r4, [sp, #96]	; 0x60
   126a4:	ldr	r1, [r7]
   126a8:	mov	r0, r4
   126ac:	mov	r2, r6
   126b0:	mov	r5, r7
   126b4:	bl	11348 <regcomp@plt>
   126b8:	add	r7, r7, #4
   126bc:	cmp	r0, #0
   126c0:	bne	12ce8 <__assert_fail@plt+0x1928>
   126c4:	add	r8, r8, #1
   126c8:	add	r4, r4, #32
   126cc:	cmp	r8, r9
   126d0:	bne	126a4 <__assert_fail@plt+0x12e4>
   126d4:	str	r0, [sp, #88]	; 0x58
   126d8:	b	11ce8 <__assert_fail@plt+0x928>
   126dc:	ldr	ip, [sp, #88]	; 0x58
   126e0:	ldr	r3, [ip, r4]
   126e4:	cmp	r3, #14
   126e8:	ble	124f4 <__assert_fail@plt+0x1134>
   126ec:	ldr	r3, [sl, #4]
   126f0:	ldr	ip, [sp, #68]	; 0x44
   126f4:	cmp	r3, #1
   126f8:	beq	12be8 <__assert_fail@plt+0x1828>
   126fc:	cmp	ip, #0
   12700:	ldr	ip, [sp, #60]	; 0x3c
   12704:	ldr	r0, [ip, r4]
   12708:	bne	12a98 <__assert_fail@plt+0x16d8>
   1270c:	add	r1, sp, #3568	; 0xdf0
   12710:	ldr	r2, [sp, #72]	; 0x48
   12714:	add	r1, r1, #12
   12718:	bl	11390 <strncmp@plt>
   1271c:	adds	r0, r0, #0
   12720:	movne	r0, #1
   12724:	cmp	r0, #0
   12728:	bne	123f4 <__assert_fail@plt+0x1034>
   1272c:	b	12250 <__assert_fail@plt+0xe90>
   12730:	movw	r3, #21044	; 0x5234
   12734:	movt	r3, #2
   12738:	mov	r2, #5
   1273c:	movw	r1, #15424	; 0x3c40
   12740:	mov	r0, #0
   12744:	movt	r1, #1
   12748:	ldr	r7, [r3]
   1274c:	bl	1115c <dcgettext@plt>
   12750:	ldr	lr, [sp, #68]	; 0x44
   12754:	movw	r1, #14948	; 0x3a64
   12758:	ldr	r3, [sp, #24]
   1275c:	movt	r1, #1
   12760:	cmp	lr, #0
   12764:	ldr	lr, [sp, #108]	; 0x6c
   12768:	movw	ip, #15632	; 0x3d10
   1276c:	str	r4, [sp, #4]
   12770:	movne	r3, r5
   12774:	cmp	r9, #0
   12778:	movt	ip, #1
   1277c:	str	lr, [sp, #8]
   12780:	movne	ip, r1
   12784:	mov	r1, #1
   12788:	str	ip, [sp]
   1278c:	mov	r2, r0
   12790:	mov	r0, r7
   12794:	bl	112dc <__fprintf_chk@plt>
   12798:	b	122d0 <__assert_fail@plt+0xf10>
   1279c:	bl	111b0 <strcasecmp@plt>
   127a0:	cmp	r0, #0
   127a4:	bne	123f4 <__assert_fail@plt+0x1034>
   127a8:	b	12250 <__assert_fail@plt+0xe90>
   127ac:	movw	r2, #15268	; 0x3ba4
   127b0:	add	r0, sp, #124	; 0x7c
   127b4:	movt	r2, #1
   127b8:	mov	r1, #1
   127bc:	ldr	r3, [fp]
   127c0:	bl	111f8 <__asprintf_chk@plt>
   127c4:	cmp	r0, #0
   127c8:	blt	11f3c <__assert_fail@plt+0xb7c>
   127cc:	add	r2, sp, #5632	; 0x1600
   127d0:	movw	r5, #60012	; 0xea6c
   127d4:	add	r2, r2, #16
   127d8:	movt	r5, #65535	; 0xffff
   127dc:	movw	r1, #15036	; 0x3abc
   127e0:	movt	r1, #1
   127e4:	ldr	r0, [r2, r5]
   127e8:	bl	11354 <fopen64@plt>
   127ec:	cmp	r0, #0
   127f0:	str	r0, [sp, #48]	; 0x30
   127f4:	beq	12d24 <__assert_fail@plt+0x1964>
   127f8:	add	ip, sp, #5632	; 0x1600
   127fc:	add	ip, ip, #16
   12800:	ldr	r0, [ip, r5]
   12804:	bl	11120 <free@plt>
   12808:	ldr	r7, [sp, #48]	; 0x30
   1280c:	str	r8, [sp, #68]	; 0x44
   12810:	mov	r0, #128	; 0x80
   12814:	bl	11204 <malloc@plt>
   12818:	subs	r5, r0, #0
   1281c:	beq	12d38 <__assert_fail@plt+0x1978>
   12820:	mov	r4, r5
   12824:	mov	r6, #128	; 0x80
   12828:	b	12844 <__assert_fail@plt+0x1484>
   1282c:	mov	r0, r7
   12830:	bl	112ac <fgetc@plt>
   12834:	add	r3, r0, #1
   12838:	cmp	r3, #1
   1283c:	bls	12874 <__assert_fail@plt+0x14b4>
   12840:	strb	r0, [r4], #1
   12844:	add	r3, r5, r6
   12848:	mov	r8, r6
   1284c:	cmp	r4, r3
   12850:	bne	1282c <__assert_fail@plt+0x146c>
   12854:	lsl	r6, r6, #1
   12858:	mov	r0, r5
   1285c:	mov	r1, r6
   12860:	bl	1118c <realloc@plt>
   12864:	subs	r5, r0, #0
   12868:	beq	12d38 <__assert_fail@plt+0x1978>
   1286c:	add	r4, r5, r8
   12870:	b	1282c <__assert_fail@plt+0x146c>
   12874:	mov	lr, #0
   12878:	strb	lr, [r4]
   1287c:	ldrb	r6, [r5]
   12880:	cmp	r6, #0
   12884:	beq	12b34 <__assert_fail@plt+0x1774>
   12888:	mov	r0, r5
   1288c:	mov	r1, #47	; 0x2f
   12890:	bl	11318 <strrchr@plt>
   12894:	add	r1, sp, #3568	; 0xdf0
   12898:	add	r1, r1, #12
   1289c:	mov	r2, #15
   128a0:	cmp	r0, #0
   128a4:	addne	r5, r0, #1
   128a8:	mov	r0, r5
   128ac:	bl	11390 <strncmp@plt>
   128b0:	cmp	r0, #0
   128b4:	bne	12810 <__assert_fail@plt+0x1450>
   128b8:	ldr	r0, [sp, #48]	; 0x30
   128bc:	mov	ip, #1
   128c0:	ldr	r8, [sp, #68]	; 0x44
   128c4:	str	ip, [sp, #68]	; 0x44
   128c8:	bl	112e8 <fclose@plt>
   128cc:	b	121c0 <__assert_fail@plt+0xe00>
   128d0:	ldr	r0, [fp]
   128d4:	bl	112f4 <getpgid@plt>
   128d8:	ldr	ip, [sp, #104]	; 0x68
   128dc:	cmp	r0, #0
   128e0:	mov	r4, r0
   128e4:	str	r0, [ip, sl, lsl #2]
   128e8:	blt	12af8 <__assert_fail@plt+0x1738>
   128ec:	cmp	sl, #0
   128f0:	beq	1228c <__assert_fail@plt+0xecc>
   128f4:	ldr	ip, [sp, #104]	; 0x68
   128f8:	ldr	r3, [ip]
   128fc:	cmp	r3, r4
   12900:	beq	11f3c <__assert_fail@plt+0xb7c>
   12904:	mov	r2, ip
   12908:	mov	r3, #0
   1290c:	add	r3, r3, #1
   12910:	cmp	r3, sl
   12914:	beq	1228c <__assert_fail@plt+0xecc>
   12918:	ldr	r1, [r2, #4]!
   1291c:	cmp	r1, r4
   12920:	bne	1290c <__assert_fail@plt+0x154c>
   12924:	b	11f3c <__assert_fail@plt+0xb7c>
   12928:	add	r0, sp, #5632	; 0x1600
   1292c:	movw	r3, #60024	; 0xea78
   12930:	add	r0, r0, #16
   12934:	movt	r3, #65535	; 0xffff
   12938:	movw	r2, #60020	; 0xea74
   1293c:	movw	ip, #21048	; 0x5238
   12940:	movt	r2, #65535	; 0xffff
   12944:	movt	ip, #2
   12948:	mov	r1, #0
   1294c:	movw	r9, #21056	; 0x5240
   12950:	movw	lr, #15632	; 0x3d10
   12954:	movw	r7, #14948	; 0x3a64
   12958:	movt	lr, #1
   1295c:	str	r5, [sp, #80]	; 0x50
   12960:	str	r6, [sp, #84]	; 0x54
   12964:	movt	r9, #2
   12968:	str	r8, [sp, #76]	; 0x4c
   1296c:	movt	r7, #1
   12970:	str	lr, [sp, #48]	; 0x30
   12974:	mov	r8, ip
   12978:	str	r1, [r0, r3]
   1297c:	str	r1, [r0, r2]
   12980:	str	sl, [sp, #72]	; 0x48
   12984:	ldr	r6, [sp, #108]	; 0x6c
   12988:	ldr	r5, [sp, #40]	; 0x28
   1298c:	b	129b4 <__assert_fail@plt+0x15f4>
   12990:	ldr	r0, [sp, #136]	; 0x88
   12994:	movw	sl, #60024	; 0xea78
   12998:	movt	sl, #65535	; 0xffff
   1299c:	ldrb	r2, [r0]
   129a0:	cmp	r2, #10
   129a4:	beq	12ae8 <__assert_fail@plt+0x1728>
   129a8:	bl	11300 <rpmatch@plt>
   129ac:	cmp	r0, #0
   129b0:	bge	12aac <__assert_fail@plt+0x16ec>
   129b4:	cmp	r6, #15
   129b8:	mov	r2, #5
   129bc:	movweq	r1, #15372	; 0x3c0c
   129c0:	movwne	r1, #15396	; 0x3c24
   129c4:	movteq	r1, #1
   129c8:	movtne	r1, #1
   129cc:	moveq	r0, #0
   129d0:	movne	r0, #0
   129d4:	bl	1115c <dcgettext@plt>
   129d8:	ldr	r3, [r5, #8]
   129dc:	ldr	ip, [sp, #48]	; 0x30
   129e0:	add	r2, sp, #3568	; 0xdf0
   129e4:	cmp	r3, #0
   129e8:	add	r2, r2, #12
   129ec:	str	r4, [sp]
   129f0:	movne	ip, r7
   129f4:	mov	r3, ip
   129f8:	mov	r1, r0
   129fc:	mov	r0, #1
   12a00:	bl	112b8 <__printf_chk@plt>
   12a04:	ldr	r0, [r9]
   12a08:	bl	11114 <fflush@plt>
   12a0c:	add	r0, sp, #136	; 0x88
   12a10:	add	r1, sp, #132	; 0x84
   12a14:	mov	r2, #10
   12a18:	ldr	r3, [r8]
   12a1c:	bl	110d8 <__getdelim@plt>
   12a20:	cmp	r0, #0
   12a24:	bge	12990 <__assert_fail@plt+0x15d0>
   12a28:	ldr	sl, [sp, #72]	; 0x48
   12a2c:	ldr	r8, [sp, #76]	; 0x4c
   12a30:	b	11f3c <__assert_fail@plt+0xb7c>
   12a34:	bl	1127c <__errno_location@plt>
   12a38:	ldr	r0, [r0]
   12a3c:	cmp	r0, #3
   12a40:	beq	12c24 <__assert_fail@plt+0x1864>
   12a44:	ldr	ip, [sp, #68]	; 0x44
   12a48:	movw	r2, #21044	; 0x5234
   12a4c:	movt	r2, #2
   12a50:	ldr	r6, [sp, #24]
   12a54:	cmp	ip, #0
   12a58:	movne	r6, r5
   12a5c:	ldr	r5, [r2]
   12a60:	bl	1121c <strerror@plt>
   12a64:	mov	r3, r6
   12a68:	str	r4, [sp]
   12a6c:	movw	r2, #15456	; 0x3c60
   12a70:	mov	r1, #1
   12a74:	movt	r2, #1
   12a78:	str	r0, [sp, #4]
   12a7c:	mov	r0, r5
   12a80:	bl	112dc <__fprintf_chk@plt>
   12a84:	b	11f3c <__assert_fail@plt+0xb7c>
   12a88:	movw	r0, #15260	; 0x3b9c
   12a8c:	movt	r0, #1
   12a90:	bl	111bc <perror@plt>
   12a94:	b	125ec <__assert_fail@plt+0x122c>
   12a98:	mov	r1, r8
   12a9c:	bl	110fc <strcmp@plt>
   12aa0:	adds	r0, r0, #0
   12aa4:	movne	r0, #1
   12aa8:	b	12724 <__assert_fail@plt+0x1364>
   12aac:	add	lr, sp, #5632	; 0x1600
   12ab0:	mov	r9, sl
   12ab4:	add	lr, lr, #16
   12ab8:	mov	r2, r0
   12abc:	ldr	r5, [sp, #80]	; 0x50
   12ac0:	ldr	r0, [lr, r9]
   12ac4:	ldr	r6, [sp, #84]	; 0x54
   12ac8:	str	r2, [sp, #20]
   12acc:	ldr	sl, [sp, #72]	; 0x48
   12ad0:	ldr	r8, [sp, #76]	; 0x4c
   12ad4:	bl	11120 <free@plt>
   12ad8:	ldr	r2, [sp, #20]
   12adc:	cmp	r2, #0
   12ae0:	bne	1229c <__assert_fail@plt+0xedc>
   12ae4:	b	11f3c <__assert_fail@plt+0xb7c>
   12ae8:	ldr	sl, [sp, #72]	; 0x48
   12aec:	ldr	r8, [sp, #76]	; 0x4c
   12af0:	bl	11120 <free@plt>
   12af4:	b	11f3c <__assert_fail@plt+0xb7c>
   12af8:	movw	r2, #21044	; 0x5234
   12afc:	movt	r2, #2
   12b00:	ldr	r7, [fp]
   12b04:	ldr	r9, [r2]
   12b08:	bl	1127c <__errno_location@plt>
   12b0c:	ldr	r0, [r0]
   12b10:	bl	1121c <strerror@plt>
   12b14:	mov	r3, r7
   12b18:	movw	r2, #15344	; 0x3bf0
   12b1c:	mov	r1, #1
   12b20:	movt	r2, #1
   12b24:	str	r0, [sp]
   12b28:	mov	r0, r9
   12b2c:	bl	112dc <__fprintf_chk@plt>
   12b30:	b	128ec <__assert_fail@plt+0x152c>
   12b34:	ldr	r0, [sp, #48]	; 0x30
   12b38:	ldr	r8, [sp, #68]	; 0x44
   12b3c:	bl	112e8 <fclose@plt>
   12b40:	ldr	ip, [sp, #40]	; 0x28
   12b44:	movw	r3, #21072	; 0x5250
   12b48:	movt	r3, #2
   12b4c:	ldr	r2, [ip, #36]	; 0x24
   12b50:	cmp	r2, #0
   12b54:	beq	121b4 <__assert_fail@plt+0xdf4>
   12b58:	ldr	r3, [r3, #20]
   12b5c:	cmp	r3, #0
   12b60:	beq	11f3c <__assert_fail@plt+0xb7c>
   12b64:	movw	r3, #21044	; 0x5234
   12b68:	movt	r3, #2
   12b6c:	mov	r0, r6
   12b70:	mov	r2, #5
   12b74:	movw	r1, #15288	; 0x3bb8
   12b78:	movt	r1, #1
   12b7c:	ldr	r4, [r3]
   12b80:	bl	1115c <dcgettext@plt>
   12b84:	ldr	ip, [fp]
   12b88:	add	r3, sp, #3568	; 0xdf0
   12b8c:	add	r3, r3, #12
   12b90:	mov	r1, #1
   12b94:	str	ip, [sp]
   12b98:	mov	r2, r0
   12b9c:	mov	r0, r4
   12ba0:	bl	112dc <__fprintf_chk@plt>
   12ba4:	b	11f3c <__assert_fail@plt+0xb7c>
   12ba8:	ldr	ip, [sp, #60]	; 0x3c
   12bac:	mov	r1, r3
   12bb0:	ldr	r0, [ip, r4]
   12bb4:	bl	11144 <memcmp@plt>
   12bb8:	ldr	r3, [sp, #20]
   12bbc:	mov	r5, r0
   12bc0:	mov	r0, r3
   12bc4:	bl	11120 <free@plt>
   12bc8:	ldr	ip, [sp, #84]	; 0x54
   12bcc:	add	lr, sp, #5632	; 0x1600
   12bd0:	add	lr, lr, #16
   12bd4:	ldr	r0, [lr, ip]
   12bd8:	bl	11120 <free@plt>
   12bdc:	cmp	r5, #0
   12be0:	beq	12250 <__assert_fail@plt+0xe90>
   12be4:	b	123f4 <__assert_fail@plt+0x1034>
   12be8:	cmp	ip, #0
   12bec:	ldr	ip, [sp, #60]	; 0x3c
   12bf0:	ldr	r0, [ip, r4]
   12bf4:	beq	12c40 <__assert_fail@plt+0x1880>
   12bf8:	mov	r1, r8
   12bfc:	bl	111b0 <strcasecmp@plt>
   12c00:	adds	r0, r0, #0
   12c04:	movne	r0, #1
   12c08:	b	12724 <__assert_fail@plt+0x1364>
   12c0c:	mvn	r6, #0
   12c10:	b	1225c <__assert_fail@plt+0xe9c>
   12c14:	ldr	ip, [sp, #32]
   12c18:	str	ip, [sp, #56]	; 0x38
   12c1c:	mov	r8, ip
   12c20:	b	11f58 <__assert_fail@plt+0xb98>
   12c24:	ldr	ip, [sp, #40]	; 0x28
   12c28:	ldr	r3, [ip, #24]
   12c2c:	cmp	r3, #0
   12c30:	beq	11f3c <__assert_fail@plt+0xb7c>
   12c34:	b	12a44 <__assert_fail@plt+0x1684>
   12c38:	str	r7, [sp, #96]	; 0x60
   12c3c:	b	11ce8 <__assert_fail@plt+0x928>
   12c40:	add	r1, sp, #3568	; 0xdf0
   12c44:	ldr	r2, [sp, #72]	; 0x48
   12c48:	add	r1, r1, #12
   12c4c:	bl	11288 <strncasecmp@plt>
   12c50:	adds	r0, r0, #0
   12c54:	movne	r0, #1
   12c58:	b	12724 <__assert_fail@plt+0x1364>
   12c5c:	movw	r0, #15168	; 0x3b40
   12c60:	movw	r1, #15184	; 0x3b50
   12c64:	movw	r3, #13636	; 0x3544
   12c68:	movt	r0, #1
   12c6c:	movt	r1, #1
   12c70:	mov	r2, #147	; 0x93
   12c74:	movt	r3, #1
   12c78:	bl	113c0 <__assert_fail@plt>
   12c7c:	movw	r3, #21044	; 0x5234
   12c80:	movt	r3, #2
   12c84:	movw	r0, #15212	; 0x3b6c
   12c88:	mov	r1, r7
   12c8c:	ldr	r3, [r3]
   12c90:	movt	r0, #1
   12c94:	mov	r2, #35	; 0x23
   12c98:	str	r7, [sp, #20]
   12c9c:	bl	111e0 <fwrite@plt>
   12ca0:	ldr	ip, [sp, #20]
   12ca4:	mov	r0, ip
   12ca8:	bl	11258 <exit@plt>
   12cac:	movw	r0, #15004	; 0x3a9c
   12cb0:	movt	r0, #1
   12cb4:	bl	111bc <perror@plt>
   12cb8:	mov	r0, #1
   12cbc:	bl	11258 <exit@plt>
   12cc0:	bl	11168 <__stack_chk_fail@plt>
   12cc4:	add	r1, sp, #5632	; 0x1600
   12cc8:	mov	ip, r5
   12ccc:	add	r1, r1, #16
   12cd0:	mov	r5, r8
   12cd4:	ldr	sl, [sp, #76]	; 0x4c
   12cd8:	ldr	r0, [r1, ip]
   12cdc:	ldr	r8, [sp, #80]	; 0x50
   12ce0:	bl	11120 <free@plt>
   12ce4:	b	1225c <__assert_fail@plt+0xe9c>
   12ce8:	movw	r3, #21044	; 0x5234
   12cec:	movt	r3, #2
   12cf0:	mov	r2, #5
   12cf4:	movw	r1, #14964	; 0x3a74
   12cf8:	mov	r0, #0
   12cfc:	movt	r1, #1
   12d00:	ldr	r4, [r3]
   12d04:	bl	1115c <dcgettext@plt>
   12d08:	ldr	r3, [r5]
   12d0c:	mov	r1, #1
   12d10:	mov	r2, r0
   12d14:	mov	r0, r4
   12d18:	bl	112dc <__fprintf_chk@plt>
   12d1c:	mov	r0, #1
   12d20:	bl	11258 <exit@plt>
   12d24:	add	r3, sp, #5632	; 0x1600
   12d28:	add	r3, r3, #16
   12d2c:	ldr	r0, [r3, r5]
   12d30:	bl	11120 <free@plt>
   12d34:	b	11f3c <__assert_fail@plt+0xb7c>
   12d38:	mov	r0, #1
   12d3c:	bl	11258 <exit@plt>
   12d40:	str	r8, [sp, #88]	; 0x58
   12d44:	b	11ce8 <__assert_fail@plt+0x928>
   12d48:	movw	r0, #15012	; 0x3aa4
   12d4c:	movt	r0, #1
   12d50:	bl	111bc <perror@plt>
   12d54:	mov	r0, #1
   12d58:	bl	11258 <exit@plt>
   12d5c:	ldr	r0, [r9]
   12d60:	bl	111bc <perror@plt>
   12d64:	mov	r0, #1
   12d68:	bl	11258 <exit@plt>
   12d6c:	push	{r4, r5, lr}
   12d70:	movw	r4, #21032	; 0x5228
   12d74:	movt	r4, #2
   12d78:	sub	sp, sp, #12
   12d7c:	mov	r2, #10
   12d80:	mov	r5, r0
   12d84:	ldr	r3, [r4]
   12d88:	mov	r1, sp
   12d8c:	str	r3, [sp, #4]
   12d90:	bl	11108 <strtol@plt>
   12d94:	ldr	r3, [sp]
   12d98:	cmp	r5, r3
   12d9c:	beq	12edc <__assert_fail@plt+0x1b1c>
   12da0:	ldrb	r3, [r3]
   12da4:	cmp	r3, #0
   12da8:	beq	12edc <__assert_fail@plt+0x1b1c>
   12dac:	sub	r3, r3, #77	; 0x4d
   12db0:	cmp	r3, #44	; 0x2c
   12db4:	ldrls	pc, [pc, r3, lsl #2]
   12db8:	b	12edc <__assert_fail@plt+0x1b1c>
   12dbc:	muleq	r1, r4, lr
   12dc0:	ldrdeq	r2, [r1], -ip
   12dc4:	ldrdeq	r2, [r1], -ip
   12dc8:	ldrdeq	r2, [r1], -ip
   12dcc:	ldrdeq	r2, [r1], -ip
   12dd0:	ldrdeq	r2, [r1], -ip
   12dd4:	ldrdeq	r2, [r1], -ip
   12dd8:	ldrdeq	r2, [r1], -ip
   12ddc:	ldrdeq	r2, [r1], -ip
   12de0:	ldrdeq	r2, [r1], -ip
   12de4:	ldrdeq	r2, [r1], -ip
   12de8:	ldrdeq	r2, [r1], -ip
   12dec:	ldrdeq	r2, [r1], -ip
   12df0:	ldrdeq	r2, [r1], -ip
   12df4:	ldrdeq	r2, [r1], -ip
   12df8:	ldrdeq	r2, [r1], -ip
   12dfc:	ldrdeq	r2, [r1], -ip
   12e00:	ldrdeq	r2, [r1], -ip
   12e04:	ldrdeq	r2, [r1], -ip
   12e08:	ldrdeq	r2, [r1], -ip
   12e0c:	ldrdeq	r2, [r1], -ip
   12e10:	ldrdeq	r2, [r1], -ip
   12e14:	ldrdeq	r2, [r1], -ip
   12e18:	andeq	r2, r1, r4, lsr #29
   12e1c:	ldrdeq	r2, [r1], -ip
   12e20:	ldrdeq	r2, [r1], -ip
   12e24:	ldrdeq	r2, [r1], -ip
   12e28:			; <UNDEFINED> instruction: 0x00012eb4
   12e2c:	ldrdeq	r2, [r1], -ip
   12e30:	ldrdeq	r2, [r1], -ip
   12e34:	ldrdeq	r2, [r1], -ip
   12e38:	ldrdeq	r2, [r1], -ip
   12e3c:	andeq	r2, r1, r0, asr #29
   12e40:	ldrdeq	r2, [r1], -ip
   12e44:	ldrdeq	r2, [r1], -ip
   12e48:	ldrdeq	r2, [r1], -ip
   12e4c:	ldrdeq	r2, [r1], -ip
   12e50:	ldrdeq	r2, [r1], -ip
   12e54:	andeq	r2, r1, ip, ror lr
   12e58:	ldrdeq	r2, [r1], -ip
   12e5c:	ldrdeq	r2, [r1], -ip
   12e60:	ldrdeq	r2, [r1], -ip
   12e64:	andeq	r2, r1, ip, asr #29
   12e68:	ldrdeq	r2, [r1], -ip
   12e6c:	andeq	r2, r1, r0, ror lr
   12e70:	mov	r3, #63488	; 0xf800
   12e74:	movt	r3, #442	; 0x1ba
   12e78:	mul	r0, r3, r0
   12e7c:	ldr	r2, [sp, #4]
   12e80:	ldr	r3, [r4]
   12e84:	cmp	r2, r3
   12e88:	bne	12ee4 <__assert_fail@plt+0x1b24>
   12e8c:	add	sp, sp, #12
   12e90:	pop	{r4, r5, pc}
   12e94:	mov	r3, #59904	; 0xea00
   12e98:	movt	r3, #36	; 0x24
   12e9c:	mul	r0, r3, r0
   12ea0:	b	12e7c <__assert_fail@plt+0x1abc>
   12ea4:	movw	r3, #20864	; 0x5180
   12ea8:	movt	r3, #1
   12eac:	mul	r0, r3, r0
   12eb0:	b	12e7c <__assert_fail@plt+0x1abc>
   12eb4:	mov	r3, #3600	; 0xe10
   12eb8:	mul	r0, r3, r0
   12ebc:	b	12e7c <__assert_fail@plt+0x1abc>
   12ec0:	rsb	r0, r0, r0, lsl #4
   12ec4:	lsl	r0, r0, #2
   12ec8:	b	12e7c <__assert_fail@plt+0x1abc>
   12ecc:	mov	r3, #14976	; 0x3a80
   12ed0:	movt	r3, #9
   12ed4:	mul	r0, r3, r0
   12ed8:	b	12e7c <__assert_fail@plt+0x1abc>
   12edc:	mvn	r0, #0
   12ee0:	b	12e7c <__assert_fail@plt+0x1abc>
   12ee4:	bl	11168 <__stack_chk_fail@plt>
   12ee8:	push	{r3, r4, r5, lr}
   12eec:	movw	r4, #21044	; 0x5234
   12ef0:	movt	r4, #2
   12ef4:	mov	r1, #1
   12ef8:	movw	r2, #15540	; 0x3cb4
   12efc:	movw	r3, #15564	; 0x3ccc
   12f00:	ldr	r0, [r4]
   12f04:	movt	r3, #1
   12f08:	movt	r2, #1
   12f0c:	bl	112dc <__fprintf_chk@plt>
   12f10:	mov	r2, #5
   12f14:	movw	r1, #15572	; 0x3cd4
   12f18:	mov	r0, #0
   12f1c:	movt	r1, #1
   12f20:	ldr	r5, [r4]
   12f24:	bl	1115c <dcgettext@plt>
   12f28:	mov	r1, #1
   12f2c:	mov	r2, r0
   12f30:	mov	r0, r5
   12f34:	bl	112dc <__fprintf_chk@plt>
   12f38:	mov	r2, #5
   12f3c:	movw	r1, #15636	; 0x3d14
   12f40:	mov	r0, #0
   12f44:	movt	r1, #1
   12f48:	ldr	r4, [r4]
   12f4c:	bl	1115c <dcgettext@plt>
   12f50:	mov	r1, #1
   12f54:	mov	r2, r0
   12f58:	mov	r0, r4
   12f5c:	pop	{r3, r4, r5, lr}
   12f60:	b	112dc <__fprintf_chk@plt>
   12f64:	push	{r4, r5, r6, r7, r8, lr}
   12f68:	movw	r4, #20756	; 0x5114
   12f6c:	movt	r4, #2
   12f70:	ldr	r3, [r4, #4]
   12f74:	cmp	r3, #0
   12f78:	beq	13018 <__assert_fail@plt+0x1c58>
   12f7c:	movw	r8, #21056	; 0x5240
   12f80:	movw	r7, #14952	; 0x3a68
   12f84:	movw	r6, #15632	; 0x3d10
   12f88:	add	r4, r4, #8
   12f8c:	movt	r8, #2
   12f90:	movt	r7, #1
   12f94:	movt	r6, #1
   12f98:	mov	r5, #0
   12f9c:	b	12fd4 <__assert_fail@plt+0x1c14>
   12fa0:	ldr	r3, [r4, #-4]
   12fa4:	movw	r1, #16320	; 0x3fc0
   12fa8:	mov	r0, #1
   12fac:	movt	r1, #1
   12fb0:	bl	112b8 <__printf_chk@plt>
   12fb4:	ldr	r0, [r4, #-4]
   12fb8:	bl	11264 <strlen@plt>
   12fbc:	add	r4, r4, #8
   12fc0:	ldr	r3, [r4, #-4]
   12fc4:	cmp	r3, #0
   12fc8:	add	r0, r0, r5
   12fcc:	add	r5, r0, #1
   12fd0:	beq	13020 <__assert_fail@plt+0x1c60>
   12fd4:	mov	r0, r3
   12fd8:	bl	11264 <strlen@plt>
   12fdc:	cmp	r5, #0
   12fe0:	movne	r2, r7
   12fe4:	moveq	r2, r6
   12fe8:	add	r0, r0, #1
   12fec:	add	r0, r0, r5
   12ff0:	moveq	r5, #0
   12ff4:	cmp	r0, #80	; 0x50
   12ff8:	bls	12fa0 <__assert_fail@plt+0x1be0>
   12ffc:	mov	r0, #10
   13000:	ldr	r1, [r8]
   13004:	bl	111d4 <_IO_putc@plt>
   13008:	mov	r5, #0
   1300c:	movw	r2, #15632	; 0x3d10
   13010:	movt	r2, #1
   13014:	b	12fa0 <__assert_fail@plt+0x1be0>
   13018:	movw	r8, #21056	; 0x5240
   1301c:	movt	r8, #2
   13020:	ldr	r1, [r8]
   13024:	mov	r0, #10
   13028:	pop	{r4, r5, r6, r7, r8, lr}
   1302c:	b	111d4 <_IO_putc@plt>
   13030:	push	{r4, r5, r6, lr}
   13034:	sub	sp, sp, #8
   13038:	mov	r5, r0
   1303c:	mov	r6, r1
   13040:	bl	11240 <__ctype_b_loc@plt>
   13044:	ldrb	r3, [r5]
   13048:	lsl	r3, r3, #1
   1304c:	ldr	r2, [r0]
   13050:	ldrh	r3, [r2, r3]
   13054:	tst	r3, #2048	; 0x800
   13058:	bne	130fc <__assert_fail@plt+0x1d3c>
   1305c:	mov	r1, r5
   13060:	movw	r0, #16328	; 0x3fc8
   13064:	mov	r2, #3
   13068:	movt	r0, #1
   1306c:	bl	11390 <strncmp@plt>
   13070:	movw	r4, #20756	; 0x5114
   13074:	movt	r4, #2
   13078:	cmp	r0, #0
   1307c:	ldr	r0, [r4, #4]
   13080:	addeq	r5, r5, #3
   13084:	cmp	r0, #0
   13088:	bne	130a0 <__assert_fail@plt+0x1ce0>
   1308c:	b	130bc <__assert_fail@plt+0x1cfc>
   13090:	add	r4, r4, #8
   13094:	ldr	r0, [r4, #4]
   13098:	cmp	r0, #0
   1309c:	beq	130bc <__assert_fail@plt+0x1cfc>
   130a0:	mov	r1, r5
   130a4:	bl	110fc <strcmp@plt>
   130a8:	cmp	r0, #0
   130ac:	bne	13090 <__assert_fail@plt+0x1cd0>
   130b0:	ldr	r0, [r4]
   130b4:	add	sp, sp, #8
   130b8:	pop	{r4, r5, r6, pc}
   130bc:	movw	r3, #21044	; 0x5234
   130c0:	movt	r3, #2
   130c4:	mov	r2, #5
   130c8:	movw	r1, #16332	; 0x3fcc
   130cc:	mov	r0, #0
   130d0:	movt	r1, #1
   130d4:	ldr	r4, [r3]
   130d8:	bl	1115c <dcgettext@plt>
   130dc:	str	r6, [sp]
   130e0:	mov	r3, r5
   130e4:	mov	r1, #1
   130e8:	mov	r2, r0
   130ec:	mov	r0, r4
   130f0:	bl	112dc <__fprintf_chk@plt>
   130f4:	mov	r0, #1
   130f8:	bl	11258 <exit@plt>
   130fc:	mov	r0, r5
   13100:	mov	r1, #0
   13104:	mov	r2, #10
   13108:	add	sp, sp, #8
   1310c:	pop	{r4, r5, r6, lr}
   13110:	b	11108 <strtol@plt>
   13114:	eor	r1, r1, #-2147483648	; 0x80000000
   13118:	b	13120 <__assert_fail@plt+0x1d60>
   1311c:	eor	r3, r3, #-2147483648	; 0x80000000
   13120:	push	{r4, r5, lr}
   13124:	lsl	r4, r1, #1
   13128:	lsl	r5, r3, #1
   1312c:	teq	r4, r5
   13130:	teqeq	r0, r2
   13134:	orrsne	ip, r4, r0
   13138:	orrsne	ip, r5, r2
   1313c:	mvnsne	ip, r4, asr #21
   13140:	mvnsne	ip, r5, asr #21
   13144:	beq	13330 <__assert_fail@plt+0x1f70>
   13148:	lsr	r4, r4, #21
   1314c:	rsbs	r5, r4, r5, lsr #21
   13150:	rsblt	r5, r5, #0
   13154:	ble	13174 <__assert_fail@plt+0x1db4>
   13158:	add	r4, r4, r5
   1315c:	eor	r2, r0, r2
   13160:	eor	r3, r1, r3
   13164:	eor	r0, r2, r0
   13168:	eor	r1, r3, r1
   1316c:	eor	r2, r0, r2
   13170:	eor	r3, r1, r3
   13174:	cmp	r5, #54	; 0x36
   13178:	pophi	{r4, r5, pc}
   1317c:	tst	r1, #-2147483648	; 0x80000000
   13180:	lsl	r1, r1, #12
   13184:	mov	ip, #1048576	; 0x100000
   13188:	orr	r1, ip, r1, lsr #12
   1318c:	beq	13198 <__assert_fail@plt+0x1dd8>
   13190:	rsbs	r0, r0, #0
   13194:	rsc	r1, r1, #0
   13198:	tst	r3, #-2147483648	; 0x80000000
   1319c:	lsl	r3, r3, #12
   131a0:	orr	r3, ip, r3, lsr #12
   131a4:	beq	131b0 <__assert_fail@plt+0x1df0>
   131a8:	rsbs	r2, r2, #0
   131ac:	rsc	r3, r3, #0
   131b0:	teq	r4, r5
   131b4:	beq	13318 <__assert_fail@plt+0x1f58>
   131b8:	sub	r4, r4, #1
   131bc:	rsbs	lr, r5, #32
   131c0:	blt	131dc <__assert_fail@plt+0x1e1c>
   131c4:	lsl	ip, r2, lr
   131c8:	adds	r0, r0, r2, lsr r5
   131cc:	adc	r1, r1, #0
   131d0:	adds	r0, r0, r3, lsl lr
   131d4:	adcs	r1, r1, r3, asr r5
   131d8:	b	131f8 <__assert_fail@plt+0x1e38>
   131dc:	sub	r5, r5, #32
   131e0:	add	lr, lr, #32
   131e4:	cmp	r2, #1
   131e8:	lsl	ip, r3, lr
   131ec:	orrcs	ip, ip, #2
   131f0:	adds	r0, r0, r3, asr r5
   131f4:	adcs	r1, r1, r3, asr #31
   131f8:	and	r5, r1, #-2147483648	; 0x80000000
   131fc:	bpl	1320c <__assert_fail@plt+0x1e4c>
   13200:	rsbs	ip, ip, #0
   13204:	rscs	r0, r0, #0
   13208:	rsc	r1, r1, #0
   1320c:	cmp	r1, #1048576	; 0x100000
   13210:	bcc	13250 <__assert_fail@plt+0x1e90>
   13214:	cmp	r1, #2097152	; 0x200000
   13218:	bcc	13238 <__assert_fail@plt+0x1e78>
   1321c:	lsrs	r1, r1, #1
   13220:	rrxs	r0, r0
   13224:	rrx	ip, ip
   13228:	add	r4, r4, #1
   1322c:	lsl	r2, r4, #21
   13230:	cmn	r2, #4194304	; 0x400000
   13234:	bcs	13390 <__assert_fail@plt+0x1fd0>
   13238:	cmp	ip, #-2147483648	; 0x80000000
   1323c:	lsrseq	ip, r0, #1
   13240:	adcs	r0, r0, #0
   13244:	adc	r1, r1, r4, lsl #20
   13248:	orr	r1, r1, r5
   1324c:	pop	{r4, r5, pc}
   13250:	lsls	ip, ip, #1
   13254:	adcs	r0, r0, r0
   13258:	adc	r1, r1, r1
   1325c:	tst	r1, #1048576	; 0x100000
   13260:	sub	r4, r4, #1
   13264:	bne	13238 <__assert_fail@plt+0x1e78>
   13268:	teq	r1, #0
   1326c:	moveq	r1, r0
   13270:	moveq	r0, #0
   13274:	clz	r3, r1
   13278:	addeq	r3, r3, #32
   1327c:	sub	r3, r3, #11
   13280:	subs	r2, r3, #32
   13284:	bge	132a8 <__assert_fail@plt+0x1ee8>
   13288:	adds	r2, r2, #12
   1328c:	ble	132a4 <__assert_fail@plt+0x1ee4>
   13290:	add	ip, r2, #20
   13294:	rsb	r2, r2, #12
   13298:	lsl	r0, r1, ip
   1329c:	lsr	r1, r1, r2
   132a0:	b	132b8 <__assert_fail@plt+0x1ef8>
   132a4:	add	r2, r2, #20
   132a8:	rsble	ip, r2, #32
   132ac:	lsl	r1, r1, r2
   132b0:	orrle	r1, r1, r0, lsr ip
   132b4:	lslle	r0, r0, r2
   132b8:	subs	r4, r4, r3
   132bc:	addge	r1, r1, r4, lsl #20
   132c0:	orrge	r1, r1, r5
   132c4:	popge	{r4, r5, pc}
   132c8:	mvn	r4, r4
   132cc:	subs	r4, r4, #31
   132d0:	bge	1330c <__assert_fail@plt+0x1f4c>
   132d4:	adds	r4, r4, #12
   132d8:	bgt	132f4 <__assert_fail@plt+0x1f34>
   132dc:	add	r4, r4, #20
   132e0:	rsb	r2, r4, #32
   132e4:	lsr	r0, r0, r4
   132e8:	orr	r0, r0, r1, lsl r2
   132ec:	orr	r1, r5, r1, lsr r4
   132f0:	pop	{r4, r5, pc}
   132f4:	rsb	r4, r4, #12
   132f8:	rsb	r2, r4, #32
   132fc:	lsr	r0, r0, r2
   13300:	orr	r0, r0, r1, lsl r4
   13304:	mov	r1, r5
   13308:	pop	{r4, r5, pc}
   1330c:	lsr	r0, r1, r4
   13310:	mov	r1, r5
   13314:	pop	{r4, r5, pc}
   13318:	teq	r4, #0
   1331c:	eor	r3, r3, #1048576	; 0x100000
   13320:	eoreq	r1, r1, #1048576	; 0x100000
   13324:	addeq	r4, r4, #1
   13328:	subne	r5, r5, #1
   1332c:	b	131b8 <__assert_fail@plt+0x1df8>
   13330:	mvns	ip, r4, asr #21
   13334:	mvnsne	ip, r5, asr #21
   13338:	beq	133a0 <__assert_fail@plt+0x1fe0>
   1333c:	teq	r4, r5
   13340:	teqeq	r0, r2
   13344:	beq	13358 <__assert_fail@plt+0x1f98>
   13348:	orrs	ip, r4, r0
   1334c:	moveq	r1, r3
   13350:	moveq	r0, r2
   13354:	pop	{r4, r5, pc}
   13358:	teq	r1, r3
   1335c:	movne	r1, #0
   13360:	movne	r0, #0
   13364:	popne	{r4, r5, pc}
   13368:	lsrs	ip, r4, #21
   1336c:	bne	13380 <__assert_fail@plt+0x1fc0>
   13370:	lsls	r0, r0, #1
   13374:	adcs	r1, r1, r1
   13378:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1337c:	pop	{r4, r5, pc}
   13380:	adds	r4, r4, #4194304	; 0x400000
   13384:	addcc	r1, r1, #1048576	; 0x100000
   13388:	popcc	{r4, r5, pc}
   1338c:	and	r5, r1, #-2147483648	; 0x80000000
   13390:	orr	r1, r5, #2130706432	; 0x7f000000
   13394:	orr	r1, r1, #15728640	; 0xf00000
   13398:	mov	r0, #0
   1339c:	pop	{r4, r5, pc}
   133a0:	mvns	ip, r4, asr #21
   133a4:	movne	r1, r3
   133a8:	movne	r0, r2
   133ac:	mvnseq	ip, r5, asr #21
   133b0:	movne	r3, r1
   133b4:	movne	r2, r0
   133b8:	orrs	r4, r0, r1, lsl #12
   133bc:	orrseq	r5, r2, r3, lsl #12
   133c0:	teqeq	r1, r3
   133c4:	orrne	r1, r1, #524288	; 0x80000
   133c8:	pop	{r4, r5, pc}
   133cc:	teq	r0, #0
   133d0:	moveq	r1, #0
   133d4:	bxeq	lr
   133d8:	push	{r4, r5, lr}
   133dc:	mov	r4, #1024	; 0x400
   133e0:	add	r4, r4, #50	; 0x32
   133e4:	mov	r5, #0
   133e8:	mov	r1, #0
   133ec:	b	13268 <__assert_fail@plt+0x1ea8>
   133f0:	teq	r0, #0
   133f4:	moveq	r1, #0
   133f8:	bxeq	lr
   133fc:	push	{r4, r5, lr}
   13400:	mov	r4, #1024	; 0x400
   13404:	add	r4, r4, #50	; 0x32
   13408:	ands	r5, r0, #-2147483648	; 0x80000000
   1340c:	rsbmi	r0, r0, #0
   13410:	mov	r1, #0
   13414:	b	13268 <__assert_fail@plt+0x1ea8>
   13418:	lsls	r2, r0, #1
   1341c:	asr	r1, r2, #3
   13420:	rrx	r1, r1
   13424:	lsl	r0, r2, #28
   13428:	andsne	r3, r2, #-16777216	; 0xff000000
   1342c:	teqne	r3, #-16777216	; 0xff000000
   13430:	eorne	r1, r1, #939524096	; 0x38000000
   13434:	bxne	lr
   13438:	teq	r2, #0
   1343c:	teqne	r3, #-16777216	; 0xff000000
   13440:	bxeq	lr
   13444:	push	{r4, r5, lr}
   13448:	mov	r4, #896	; 0x380
   1344c:	and	r5, r1, #-2147483648	; 0x80000000
   13450:	bic	r1, r1, #-2147483648	; 0x80000000
   13454:	b	13268 <__assert_fail@plt+0x1ea8>
   13458:	orrs	r2, r0, r1
   1345c:	bxeq	lr
   13460:	push	{r4, r5, lr}
   13464:	mov	r5, #0
   13468:	b	13488 <__assert_fail@plt+0x20c8>
   1346c:	orrs	r2, r0, r1
   13470:	bxeq	lr
   13474:	push	{r4, r5, lr}
   13478:	ands	r5, r1, #-2147483648	; 0x80000000
   1347c:	bpl	13488 <__assert_fail@plt+0x20c8>
   13480:	rsbs	r0, r0, #0
   13484:	rsc	r1, r1, #0
   13488:	mov	r4, #1024	; 0x400
   1348c:	add	r4, r4, #50	; 0x32
   13490:	lsrs	ip, r1, #22
   13494:	beq	1320c <__assert_fail@plt+0x1e4c>
   13498:	mov	r2, #3
   1349c:	lsrs	ip, ip, #3
   134a0:	addne	r2, r2, #3
   134a4:	lsrs	ip, ip, #3
   134a8:	addne	r2, r2, #3
   134ac:	add	r2, r2, ip, lsr #3
   134b0:	rsb	r3, r2, #32
   134b4:	lsl	ip, r0, r3
   134b8:	lsr	r0, r0, r2
   134bc:	orr	r0, r0, r1, lsl r3
   134c0:	lsr	r1, r1, r2
   134c4:	add	r4, r4, r2
   134c8:	b	1320c <__assert_fail@plt+0x1e4c>
   134cc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   134d0:	mov	r7, r0
   134d4:	ldr	r6, [pc, #76]	; 13528 <__assert_fail@plt+0x2168>
   134d8:	mov	r8, r1
   134dc:	ldr	r5, [pc, #72]	; 1352c <__assert_fail@plt+0x216c>
   134e0:	mov	r9, r2
   134e4:	add	r6, pc, r6
   134e8:	bl	110ac <_init@@Base>
   134ec:	add	r5, pc, r5
   134f0:	rsb	r6, r5, r6
   134f4:	asrs	r6, r6, #2
   134f8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   134fc:	sub	r5, r5, #4
   13500:	mov	r4, #0
   13504:	add	r4, r4, #1
   13508:	ldr	r3, [r5, #4]!
   1350c:	mov	r0, r7
   13510:	mov	r1, r8
   13514:	mov	r2, r9
   13518:	blx	r3
   1351c:	cmp	r4, r6
   13520:	bne	13504 <__assert_fail@plt+0x2144>
   13524:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13528:	andeq	r1, r1, ip, lsl #20
   1352c:	andeq	r1, r1, r0, lsl #20
   13530:	bx	lr

Disassembly of section .fini:

00013534 <_fini@@Base>:
   13534:	push	{r3, lr}
   13538:	pop	{r3, pc}
