
centos-preinstalled/objdump:     file format elf32-littlearm


Disassembly of section .init:

0001211c <_init@@Base>:
   1211c:	push	{r3, lr}
   12120:	bl	149a0 <__assert_fail@plt+0x21c8>
   12124:	pop	{r3, pc}

Disassembly of section .plt:

00012128 <strstr@plt-0x14>:
   12128:	push	{lr}		; (str lr, [sp, #-4]!)
   1212c:	ldr	lr, [pc, #4]	; 12138 <_init@@Base+0x1c>
   12130:	add	lr, pc, lr
   12134:	ldr	pc, [lr, #8]!
   12138:	andeq	ip, r5, r8, asr #29

0001213c <strstr@plt>:
   1213c:	add	ip, pc, #0, 12
   12140:	add	ip, ip, #92, 20	; 0x5c000
   12144:	ldr	pc, [ip, #3784]!	; 0xec8

00012148 <cplus_demangle_print@plt>:
   12148:	add	ip, pc, #0, 12
   1214c:	add	ip, ip, #92, 20	; 0x5c000
   12150:	ldr	pc, [ip, #3776]!	; 0xec0

00012154 <raise@plt>:
   12154:	add	ip, pc, #0, 12
   12158:	add	ip, ip, #92, 20	; 0x5c000
   1215c:	ldr	pc, [ip, #3768]!	; 0xeb8

00012160 <cplus_demangle_name_to_style@plt>:
   12160:	add	ip, pc, #0, 12
   12164:	add	ip, ip, #92, 20	; 0x5c000
   12168:	ldr	pc, [ip, #3760]!	; 0xeb0

0001216c <bfd_scan_vma@plt>:
   1216c:	add	ip, pc, #0, 12
   12170:	add	ip, ip, #92, 20	; 0x5c000
   12174:	ldr	pc, [ip, #3752]!	; 0xea8

00012178 <strcmp@plt>:
   12178:	add	ip, pc, #0, 12
   1217c:	add	ip, ip, #92, 20	; 0x5c000
   12180:	ldr	pc, [ip, #3744]!	; 0xea0

00012184 <strtol@plt>:
   12184:	add	ip, pc, #0, 12
   12188:	add	ip, ip, #92, 20	; 0x5c000
   1218c:	ldr	pc, [ip, #3736]!	; 0xe98

00012190 <bfd_get_stab_name@plt>:
   12190:	add	ip, pc, #0, 12
   12194:	add	ip, ip, #92, 20	; 0x5c000
   12198:	ldr	pc, [ip, #3728]!	; 0xe90

0001219c <bfd_make_section_with_flags@plt>:
   1219c:	add	ip, pc, #0, 12
   121a0:	add	ip, ip, #92, 20	; 0x5c000
   121a4:	ldr	pc, [ip, #3720]!	; 0xe88

000121a8 <read@plt>:
   121a8:	add	ip, pc, #0, 12
   121ac:	add	ip, ip, #92, 20	; 0x5c000
   121b0:	ldr	pc, [ip, #3712]!	; 0xe80

000121b4 <fflush@plt>:
   121b4:	add	ip, pc, #0, 12
   121b8:	add	ip, ip, #92, 20	; 0x5c000
   121bc:	ldr	pc, [ip, #3704]!	; 0xe78

000121c0 <bfd_arch_list@plt>:
   121c0:	add	ip, pc, #0, 12
   121c4:	add	ip, ip, #92, 20	; 0x5c000
   121c8:	ldr	pc, [ip, #3696]!	; 0xe70

000121cc <memmove@plt>:
   121cc:	add	ip, pc, #0, 12
   121d0:	add	ip, ip, #92, 20	; 0x5c000
   121d4:	ldr	pc, [ip, #3688]!	; 0xe68

000121d8 <bfd_hash_traverse@plt>:
   121d8:	add	ip, pc, #0, 12
   121dc:	add	ip, ip, #92, 20	; 0x5c000
   121e0:	ldr	pc, [ip, #3680]!	; 0xe60

000121e4 <bfd_set_default_target@plt>:
   121e4:	add	ip, pc, #0, 12
   121e8:	add	ip, ip, #92, 20	; 0x5c000
   121ec:	ldr	pc, [ip, #3672]!	; 0xe58

000121f0 <free@plt>:
   121f0:	add	ip, pc, #0, 12
   121f4:	add	ip, ip, #92, 20	; 0x5c000
   121f8:	ldr	pc, [ip, #3664]!	; 0xe50

000121fc <ferror@plt>:
   121fc:	add	ip, pc, #0, 12
   12200:	add	ip, ip, #92, 20	; 0x5c000
   12204:	ldr	pc, [ip, #3656]!	; 0xe48

00012208 <filename_cmp@plt>:
   12208:	add	ip, pc, #0, 12
   1220c:	add	ip, ip, #92, 20	; 0x5c000
   12210:	ldr	pc, [ip, #3648]!	; 0xe40

00012214 <cplus_demangle_set_style@plt>:
   12214:	add	ip, pc, #0, 12
   12218:	add	ip, ip, #92, 20	; 0x5c000
   1221c:	ldr	pc, [ip, #3640]!	; 0xe38

00012220 <__vsnprintf_chk@plt>:
   12220:	add	ip, pc, #0, 12
   12224:	add	ip, ip, #92, 20	; 0x5c000
   12228:	ldr	pc, [ip, #3632]!	; 0xe30

0001222c <memcpy@plt>:
   1222c:	add	ip, pc, #0, 12
   12230:	add	ip, ip, #92, 20	; 0x5c000
   12234:	ldr	pc, [ip, #3624]!	; 0xe28

00012238 <bfd_openr@plt>:
   12238:	add	ip, pc, #0, 12
   1223c:	add	ip, ip, #92, 20	; 0x5c000
   12240:	ldr	pc, [ip, #3616]!	; 0xe20

00012244 <bfd_hash_newfunc@plt>:
   12244:	add	ip, pc, #0, 12
   12248:	add	ip, ip, #92, 20	; 0x5c000
   1224c:	ldr	pc, [ip, #3608]!	; 0xe18

00012250 <_IO_getc@plt>:
   12250:	add	ip, pc, #0, 12
   12254:	add	ip, ip, #92, 20	; 0x5c000
   12258:	ldr	pc, [ip, #3600]!	; 0xe10

0001225c <ftell@plt>:
   1225c:	add	ip, pc, #0, 12
   12260:	add	ip, ip, #92, 20	; 0x5c000
   12264:	ldr	pc, [ip, #3592]!	; 0xe08

00012268 <memcmp@plt>:
   12268:	add	ip, pc, #0, 12
   1226c:	add	ip, ip, #92, 20	; 0x5c000
   12270:	ldr	pc, [ip, #3584]!	; 0xe00

00012274 <stpcpy@plt>:
   12274:	add	ip, pc, #0, 12
   12278:	add	ip, ip, #92, 20	; 0x5c000
   1227c:	ldr	pc, [ip, #3576]!	; 0xdf8

00012280 <ctime@plt>:
   12280:	add	ip, pc, #0, 12
   12284:	add	ip, ip, #92, 20	; 0x5c000
   12288:	ldr	pc, [ip, #3568]!	; 0xdf0

0001228c <bfd_get_section_contents@plt>:
   1228c:	add	ip, pc, #0, 12
   12290:	add	ip, ip, #92, 20	; 0x5c000
   12294:	ldr	pc, [ip, #3560]!	; 0xde8

00012298 <dcgettext@plt>:
   12298:	add	ip, pc, #0, 12
   1229c:	add	ip, ip, #92, 20	; 0x5c000
   122a0:	ldr	pc, [ip, #3552]!	; 0xde0

000122a4 <bfd_malloc@plt>:
   122a4:	add	ip, pc, #0, 12
   122a8:	add	ip, ip, #92, 20	; 0x5c000
   122ac:	ldr	pc, [ip, #3544]!	; 0xdd8

000122b0 <__stack_chk_fail@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #92, 20	; 0x5c000
   122b8:	ldr	pc, [ip, #3536]!	; 0xdd0

000122bc <unlink@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #92, 20	; 0x5c000
   122c4:	ldr	pc, [ip, #3528]!	; 0xdc8

000122c8 <xrealloc@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #92, 20	; 0x5c000
   122d0:	ldr	pc, [ip, #3520]!	; 0xdc0

000122d4 <bfd_hash_table_free@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #92, 20	; 0x5c000
   122dc:	ldr	pc, [ip, #3512]!	; 0xdb8

000122e0 <textdomain@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #92, 20	; 0x5c000
   122e8:	ldr	pc, [ip, #3504]!	; 0xdb0

000122ec <concat@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #92, 20	; 0x5c000
   122f4:	ldr	pc, [ip, #3496]!	; 0xda8

000122f8 <bfd_set_section_contents@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #92, 20	; 0x5c000
   12300:	ldr	pc, [ip, #3488]!	; 0xda0

00012304 <bfd_target_list@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #92, 20	; 0x5c000
   1230c:	ldr	pc, [ip, #3480]!	; 0xd98

00012310 <bfd_get_error@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #92, 20	; 0x5c000
   12318:	ldr	pc, [ip, #3472]!	; 0xd90

0001231c <disassemble_init_for_target@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #92, 20	; 0x5c000
   12324:	ldr	pc, [ip, #3464]!	; 0xd88

00012328 <__fxstat64@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #92, 20	; 0x5c000
   12330:	ldr	pc, [ip, #3456]!	; 0xd80

00012334 <_IO_putc@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #92, 20	; 0x5c000
   1233c:	ldr	pc, [ip, #3448]!	; 0xd78

00012340 <fwrite@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #92, 20	; 0x5c000
   12348:	ldr	pc, [ip, #3440]!	; 0xd70

0001234c <strcat@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #92, 20	; 0x5c000
   12354:	ldr	pc, [ip, #3432]!	; 0xd68

00012358 <xmalloc@plt>:
   12358:	add	ip, pc, #0, 12
   1235c:	add	ip, ip, #92, 20	; 0x5c000
   12360:	ldr	pc, [ip, #3424]!	; 0xd60

00012364 <bfd_set_error@plt>:
   12364:	add	ip, pc, #0, 12
   12368:	add	ip, ip, #92, 20	; 0x5c000
   1236c:	ldr	pc, [ip, #3416]!	; 0xd58

00012370 <xmalloc_set_program_name@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #92, 20	; 0x5c000
   12378:	ldr	pc, [ip, #3408]!	; 0xd50

0001237c <xstrdup@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #92, 20	; 0x5c000
   12384:	ldr	pc, [ip, #3400]!	; 0xd48

00012388 <strcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #92, 20	; 0x5c000
   12390:	ldr	pc, [ip, #3392]!	; 0xd40

00012394 <fread@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #92, 20	; 0x5c000
   1239c:	ldr	pc, [ip, #3384]!	; 0xd38

000123a0 <bfd_get_section_by_name@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #92, 20	; 0x5c000
   123a8:	ldr	pc, [ip, #3376]!	; 0xd30

000123ac <bfd_get_arch_size@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #92, 20	; 0x5c000
   123b4:	ldr	pc, [ip, #3368]!	; 0xd28

000123b8 <bfd_init@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #92, 20	; 0x5c000
   123c0:	ldr	pc, [ip, #3360]!	; 0xd20

000123c4 <bfd_get_full_section_contents@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #92, 20	; 0x5c000
   123cc:	ldr	pc, [ip, #3352]!	; 0xd18

000123d0 <lbasename@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #92, 20	; 0x5c000
   123d8:	ldr	pc, [ip, #3344]!	; 0xd10

000123dc <open64@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #92, 20	; 0x5c000
   123e4:	ldr	pc, [ip, #3336]!	; 0xd08

000123e8 <mkstemps64@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #92, 20	; 0x5c000
   123f0:	ldr	pc, [ip, #3328]!	; 0xd00

000123f4 <getenv@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #92, 20	; 0x5c000
   123fc:	ldr	pc, [ip, #3320]!	; 0xcf8

00012400 <mkstemp64@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #92, 20	; 0x5c000
   12408:	ldr	pc, [ip, #3312]!	; 0xcf0

0001240c <__gnu_Unwind_Find_exidx@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #92, 20	; 0x5c000
   12414:	ldr	pc, [ip, #3304]!	; 0xce8

00012418 <puts@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #92, 20	; 0x5c000
   12420:	ldr	pc, [ip, #3296]!	; 0xce0

00012424 <bfd_hash_allocate@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #92, 20	; 0x5c000
   1242c:	ldr	pc, [ip, #3288]!	; 0xcd8

00012430 <disassembler_usage@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #92, 20	; 0x5c000
   12438:	ldr	pc, [ip, #3280]!	; 0xcd0

0001243c <malloc@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #92, 20	; 0x5c000
   12444:	ldr	pc, [ip, #3272]!	; 0xcc8

00012448 <__cxa_begin_cleanup@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #92, 20	; 0x5c000
   12450:	ldr	pc, [ip, #3264]!	; 0xcc0

00012454 <__libc_start_main@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #92, 20	; 0x5c000
   1245c:	ldr	pc, [ip, #3256]!	; 0xcb8

00012460 <strerror@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #92, 20	; 0x5c000
   12468:	ldr	pc, [ip, #3248]!	; 0xcb0

0001246c <__vfprintf_chk@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #92, 20	; 0x5c000
   12474:	ldr	pc, [ip, #3240]!	; 0xca8

00012478 <__gmon_start__@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #92, 20	; 0x5c000
   12480:	ldr	pc, [ip, #3232]!	; 0xca0

00012484 <bfd_set_format@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #92, 20	; 0x5c000
   1248c:	ldr	pc, [ip, #3224]!	; 0xc98

00012490 <getopt_long@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #92, 20	; 0x5c000
   12498:	ldr	pc, [ip, #3216]!	; 0xc90

0001249c <bfd_octets_per_byte@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #92, 20	; 0x5c000
   124a4:	ldr	pc, [ip, #3208]!	; 0xc88

000124a8 <exit@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #92, 20	; 0x5c000
   124b0:	ldr	pc, [ip, #3200]!	; 0xc80

000124b4 <cplus_demangle_init_info@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #92, 20	; 0x5c000
   124bc:	ldr	pc, [ip, #3192]!	; 0xc78

000124c0 <__cxa_type_match@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #92, 20	; 0x5c000
   124c8:	ldr	pc, [ip, #3184]!	; 0xc70

000124cc <bfd_hash_lookup@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #92, 20	; 0x5c000
   124d4:	ldr	pc, [ip, #3176]!	; 0xc68

000124d8 <strtoul@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #92, 20	; 0x5c000
   124e0:	ldr	pc, [ip, #3168]!	; 0xc60

000124e4 <strlen@plt>:
   124e4:	add	ip, pc, #0, 12
   124e8:	add	ip, ip, #92, 20	; 0x5c000
   124ec:	ldr	pc, [ip, #3160]!	; 0xc58

000124f0 <bfd_close_all_done@plt>:
   124f0:	add	ip, pc, #0, 12
   124f4:	add	ip, ip, #92, 20	; 0x5c000
   124f8:	ldr	pc, [ip, #3152]!	; 0xc50

000124fc <strchr@plt>:
   124fc:	add	ip, pc, #0, 12
   12500:	add	ip, ip, #92, 20	; 0x5c000
   12504:	ldr	pc, [ip, #3144]!	; 0xc48

00012508 <bfd_get_arch@plt>:
   12508:	add	ip, pc, #0, 12
   1250c:	add	ip, ip, #92, 20	; 0x5c000
   12510:	ldr	pc, [ip, #3136]!	; 0xc40

00012514 <fprintf@plt>:
   12514:	add	ip, pc, #0, 12
   12518:	add	ip, ip, #92, 20	; 0x5c000
   1251c:	ldr	pc, [ip, #3128]!	; 0xc38

00012520 <bfd_cache_section_contents@plt>:
   12520:	add	ip, pc, #0, 12
   12524:	add	ip, ip, #92, 20	; 0x5c000
   12528:	ldr	pc, [ip, #3120]!	; 0xc30

0001252c <bfd_printable_arch_mach@plt>:
   1252c:	add	ip, pc, #0, 12
   12530:	add	ip, ip, #92, 20	; 0x5c000
   12534:	ldr	pc, [ip, #3112]!	; 0xc28

00012538 <bfd_coff_get_auxent@plt>:
   12538:	add	ip, pc, #0, 12
   1253c:	add	ip, ip, #92, 20	; 0x5c000
   12540:	ldr	pc, [ip, #3104]!	; 0xc20

00012544 <cplus_mangle_opname@plt>:
   12544:	add	ip, pc, #0, 12
   12548:	add	ip, ip, #92, 20	; 0x5c000
   1254c:	ldr	pc, [ip, #3096]!	; 0xc18

00012550 <bfd_set_section_size@plt>:
   12550:	add	ip, pc, #0, 12
   12554:	add	ip, ip, #92, 20	; 0x5c000
   12558:	ldr	pc, [ip, #3088]!	; 0xc10

0001255c <__errno_location@plt>:
   1255c:	add	ip, pc, #0, 12
   12560:	add	ip, ip, #92, 20	; 0x5c000
   12564:	ldr	pc, [ip, #3080]!	; 0xc08

00012568 <__sprintf_chk@plt>:
   12568:	add	ip, pc, #0, 12
   1256c:	add	ip, ip, #92, 20	; 0x5c000
   12570:	ldr	pc, [ip, #3072]!	; 0xc00

00012574 <__strdup@plt>:
   12574:	add	ip, pc, #0, 12
   12578:	add	ip, ip, #92, 20	; 0x5c000
   1257c:	ldr	pc, [ip, #3064]!	; 0xbf8

00012580 <memset@plt>:
   12580:	add	ip, pc, #0, 12
   12584:	add	ip, ip, #92, 20	; 0x5c000
   12588:	ldr	pc, [ip, #3056]!	; 0xbf0

0001258c <putchar@plt>:
   1258c:	add	ip, pc, #0, 12
   12590:	add	ip, ip, #92, 20	; 0x5c000
   12594:	ldr	pc, [ip, #3048]!	; 0xbe8

00012598 <strncpy@plt>:
   12598:	add	ip, pc, #0, 12
   1259c:	add	ip, ip, #92, 20	; 0x5c000
   125a0:	ldr	pc, [ip, #3040]!	; 0xbe0

000125a4 <disassembler@plt>:
   125a4:	add	ip, pc, #0, 12
   125a8:	add	ip, ip, #92, 20	; 0x5c000
   125ac:	ldr	pc, [ip, #3032]!	; 0xbd8

000125b0 <bfd_get_mach@plt>:
   125b0:	add	ip, pc, #0, 12
   125b4:	add	ip, ip, #92, 20	; 0x5c000
   125b8:	ldr	pc, [ip, #3024]!	; 0xbd0

000125bc <__printf_chk@plt>:
   125bc:	add	ip, pc, #0, 12
   125c0:	add	ip, ip, #92, 20	; 0x5c000
   125c4:	ldr	pc, [ip, #3016]!	; 0xbc8

000125c8 <strtod@plt>:
   125c8:	add	ip, pc, #0, 12
   125cc:	add	ip, ip, #92, 20	; 0x5c000
   125d0:	ldr	pc, [ip, #3008]!	; 0xbc0

000125d4 <__fprintf_chk@plt>:
   125d4:	add	ip, pc, #0, 12
   125d8:	add	ip, ip, #92, 20	; 0x5c000
   125dc:	ldr	pc, [ip, #3000]!	; 0xbb8

000125e0 <access@plt>:
   125e0:	add	ip, pc, #0, 12
   125e4:	add	ip, ip, #92, 20	; 0x5c000
   125e8:	ldr	pc, [ip, #2992]!	; 0xbb0

000125ec <fclose@plt>:
   125ec:	add	ip, pc, #0, 12
   125f0:	add	ip, ip, #92, 20	; 0x5c000
   125f4:	ldr	pc, [ip, #2984]!	; 0xba8

000125f8 <bfd_openw@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #92, 20	; 0x5c000
   12600:	ldr	pc, [ip, #2976]!	; 0xba0

00012604 <strnlen@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #92, 20	; 0x5c000
   1260c:	ldr	pc, [ip, #2968]!	; 0xb98

00012610 <bfd_coff_get_syment@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #92, 20	; 0x5c000
   12618:	ldr	pc, [ip, #2960]!	; 0xb90

0001261c <cplus_demangle@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #92, 20	; 0x5c000
   12624:	ldr	pc, [ip, #2952]!	; 0xb88

00012628 <cplus_demangle_type@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #92, 20	; 0x5c000
   12630:	ldr	pc, [ip, #2944]!	; 0xb80

00012634 <bfd_set_error_program_name@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #92, 20	; 0x5c000
   1263c:	ldr	pc, [ip, #2936]!	; 0xb78

00012640 <__fread_chk@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #92, 20	; 0x5c000
   12648:	ldr	pc, [ip, #2928]!	; 0xb70

0001264c <bfd_demangle@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #92, 20	; 0x5c000
   12654:	ldr	pc, [ip, #2920]!	; 0xb68

00012658 <setlocale@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #92, 20	; 0x5c000
   12660:	ldr	pc, [ip, #2912]!	; 0xb60

00012664 <cplus_demangle_mangled_name@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #92, 20	; 0x5c000
   1266c:	ldr	pc, [ip, #2904]!	; 0xb58

00012670 <bfd_scan_arch@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #92, 20	; 0x5c000
   12678:	ldr	pc, [ip, #2896]!	; 0xb50

0001267c <strrchr@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #92, 20	; 0x5c000
   12684:	ldr	pc, [ip, #2888]!	; 0xb48

00012688 <bfd_simple_get_relocated_section_contents@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #92, 20	; 0x5c000
   12690:	ldr	pc, [ip, #2880]!	; 0xb40

00012694 <fputc@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #92, 20	; 0x5c000
   1269c:	ldr	pc, [ip, #2872]!	; 0xb38

000126a0 <xexit@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #92, 20	; 0x5c000
   126a8:	ldr	pc, [ip, #2864]!	; 0xb30

000126ac <bfd_close@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #92, 20	; 0x5c000
   126b4:	ldr	pc, [ip, #2856]!	; 0xb28

000126b8 <bfd_sprintf_vma@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #92, 20	; 0x5c000
   126c0:	ldr	pc, [ip, #2848]!	; 0xb20

000126c4 <mkdtemp@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #92, 20	; 0x5c000
   126cc:	ldr	pc, [ip, #2840]!	; 0xb18

000126d0 <bfd_check_format_matches@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #92, 20	; 0x5c000
   126d8:	ldr	pc, [ip, #2832]!	; 0xb10

000126dc <fopen64@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #92, 20	; 0x5c000
   126e4:	ldr	pc, [ip, #2824]!	; 0xb08

000126e8 <bfd_errmsg@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #92, 20	; 0x5c000
   126f0:	ldr	pc, [ip, #2816]!	; 0xb00

000126f4 <qsort@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #92, 20	; 0x5c000
   126fc:	ldr	pc, [ip, #2808]!	; 0xaf8

00012700 <bfd_canonicalize_reloc@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #92, 20	; 0x5c000
   12708:	ldr	pc, [ip, #2800]!	; 0xaf0

0001270c <bindtextdomain@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #92, 20	; 0x5c000
   12714:	ldr	pc, [ip, #2792]!	; 0xae8

00012718 <bfd_check_format@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #92, 20	; 0x5c000
   12720:	ldr	pc, [ip, #2784]!	; 0xae0

00012724 <bfd_openr_next_archived_file@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #92, 20	; 0x5c000
   1272c:	ldr	pc, [ip, #2776]!	; 0xad8

00012730 <bfd_hash_table_init@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #92, 20	; 0x5c000
   12738:	ldr	pc, [ip, #2768]!	; 0xad0

0001273c <bfd_fprintf_vma@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #92, 20	; 0x5c000
   12744:	ldr	pc, [ip, #2760]!	; 0xac8

00012748 <bfd_get_reloc_upper_bound@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #92, 20	; 0x5c000
   12750:	ldr	pc, [ip, #2752]!	; 0xac0

00012754 <bfd_map_over_sections@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #92, 20	; 0x5c000
   1275c:	ldr	pc, [ip, #2744]!	; 0xab8

00012760 <fseek@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #92, 20	; 0x5c000
   12768:	ldr	pc, [ip, #2736]!	; 0xab0

0001276c <__xstat64@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #92, 20	; 0x5c000
   12774:	ldr	pc, [ip, #2728]!	; 0xaa8

00012778 <fputs@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #92, 20	; 0x5c000
   12780:	ldr	pc, [ip, #2720]!	; 0xaa0

00012784 <strncmp@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #92, 20	; 0x5c000
   1278c:	ldr	pc, [ip, #2712]!	; 0xa98

00012790 <abort@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #92, 20	; 0x5c000
   12798:	ldr	pc, [ip, #2704]!	; 0xa90

0001279c <init_disassemble_info@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #92, 20	; 0x5c000
   127a4:	ldr	pc, [ip, #2696]!	; 0xa88

000127a8 <close@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #92, 20	; 0x5c000
   127b0:	ldr	pc, [ip, #2688]!	; 0xa80

000127b4 <xcalloc@plt>:
   127b4:	add	ip, pc, #0, 12
   127b8:	add	ip, ip, #92, 20	; 0x5c000
   127bc:	ldr	pc, [ip, #2680]!	; 0xa78

000127c0 <bfd_arch_bits_per_address@plt>:
   127c0:	add	ip, pc, #0, 12
   127c4:	add	ip, ip, #92, 20	; 0x5c000
   127c8:	ldr	pc, [ip, #2672]!	; 0xa70

000127cc <__snprintf_chk@plt>:
   127cc:	add	ip, pc, #0, 12
   127d0:	add	ip, ip, #92, 20	; 0x5c000
   127d4:	ldr	pc, [ip, #2664]!	; 0xa68

000127d8 <__assert_fail@plt>:
   127d8:	add	ip, pc, #0, 12
   127dc:	add	ip, ip, #92, 20	; 0x5c000
   127e0:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

000127e4 <error@@Base-0x36cd8>:
   127e4:	push	{r3, lr}
   127e8:	movw	r0, #36264	; 0x8da8
   127ec:	movw	r1, #36044	; 0x8ccc
   127f0:	movt	r0, #5
   127f4:	movt	r1, #5
   127f8:	movw	r2, #2103	; 0x837
   127fc:	ldr	r3, [pc]	; 12804 <__assert_fail@plt+0x2c>
   12800:	bl	127d8 <__assert_fail@plt>
   12804:	andeq	r8, r5, ip, ror #18
   12808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1280c:	movw	r9, #65176	; 0xfe98
   12810:	ldr	r6, [r1]
   12814:	movt	r9, #6
   12818:	mov	fp, r2
   1281c:	mov	sl, r3
   12820:	ldr	r3, [r9]
   12824:	sub	sp, sp, #44	; 0x2c
   12828:	ldrb	r2, [r6]
   1282c:	mov	r7, r1
   12830:	mov	r8, r0
   12834:	cmp	r2, #241	; 0xf1
   12838:	str	r3, [sp, #36]	; 0x24
   1283c:	bne	1285c <__assert_fail@plt+0x84>
   12840:	add	r3, r6, #1
   12844:	str	r3, [r1]
   12848:	ldrb	r2, [r6, #1]
   1284c:	movw	r3, #61902	; 0xf1ce
   12850:	orr	r2, r2, #61696	; 0xf100
   12854:	cmp	r2, r3
   12858:	beq	1286c <__assert_fail@plt+0x94>
   1285c:	movw	r1, #43408	; 0xa990
   12860:	mov	r0, #0
   12864:	movt	r1, #5
   12868:	b	128e8 <__assert_fail@plt+0x110>
   1286c:	add	r3, r6, #2
   12870:	add	r2, sp, #8
   12874:	str	r3, [r1]
   12878:	mov	r3, #0
   1287c:	bl	43454 <__assert_fail@plt+0x30c7c>
   12880:	cmp	r0, #0
   12884:	beq	12904 <__assert_fail@plt+0x12c>
   12888:	mov	r0, r8
   1288c:	mov	r1, r7
   12890:	add	r2, sp, #16
   12894:	mov	r3, #0
   12898:	bl	43454 <__assert_fail@plt+0x30c7c>
   1289c:	cmp	r0, #0
   128a0:	beq	12904 <__assert_fail@plt+0x12c>
   128a4:	mov	r0, r8
   128a8:	mov	r1, r7
   128ac:	add	r2, sp, #24
   128b0:	mov	r3, #0
   128b4:	bl	43454 <__assert_fail@plt+0x30c7c>
   128b8:	cmp	r0, #0
   128bc:	beq	12904 <__assert_fail@plt+0x12c>
   128c0:	ldrd	r4, [sp, #16]
   128c4:	orrs	r3, r4, r5
   128c8:	bne	128dc <__assert_fail@plt+0x104>
   128cc:	ldrd	r2, [sp, #24]
   128d0:	cmp	r3, #0
   128d4:	cmpeq	r2, #65	; 0x41
   128d8:	beq	1290c <__assert_fail@plt+0x134>
   128dc:	movw	r1, #43432	; 0xa9a8
   128e0:	movt	r1, #5
   128e4:	mov	r0, #0
   128e8:	mov	r2, #5
   128ec:	bl	12298 <dcgettext@plt>
   128f0:	mov	r2, r6
   128f4:	add	r1, r8, #8
   128f8:	mov	r3, r0
   128fc:	ldr	r0, [r8, #4]
   12900:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   12904:	mov	r0, #0
   12908:	b	12928 <__assert_fail@plt+0x150>
   1290c:	mov	ip, #0
   12910:	mov	r0, r8
   12914:	mov	r1, r7
   12918:	mov	r2, fp
   1291c:	mov	r3, sl
   12920:	str	ip, [sp]
   12924:	bl	4335c <__assert_fail@plt+0x30b84>
   12928:	ldr	r2, [sp, #36]	; 0x24
   1292c:	ldr	r3, [r9]
   12930:	cmp	r2, r3
   12934:	beq	1293c <__assert_fail@plt+0x164>
   12938:	bl	122b0 <__stack_chk_fail@plt>
   1293c:	add	sp, sp, #44	; 0x2c
   12940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12944:	movw	r3, #65176	; 0xfe98
   12948:	movt	r3, #6
   1294c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12950:	sub	sp, sp, #204	; 0xcc
   12954:	ldr	r3, [r3]
   12958:	mov	r4, r2
   1295c:	add	r2, sp, #144	; 0x90
   12960:	mov	r6, r1
   12964:	ldr	r5, [r1]
   12968:	mov	sl, r0
   1296c:	str	r3, [sp, #196]	; 0xc4
   12970:	bl	437f8 <__assert_fail@plt+0x31020>
   12974:	cmp	r0, #0
   12978:	beq	13074 <__assert_fail@plt+0x89c>
   1297c:	ldrd	r0, [sp, #144]	; 0x90
   12980:	cmp	r1, #0
   12984:	cmpeq	r0, #82	; 0x52
   12988:	beq	12d30 <__assert_fail@plt+0x558>
   1298c:	bhi	129ac <__assert_fail@plt+0x1d4>
   12990:	cmp	r1, #0
   12994:	cmpeq	r0, #66	; 0x42
   12998:	beq	12abc <__assert_fail@plt+0x2e4>
   1299c:	cmp	r1, #0
   129a0:	cmpeq	r0, #77	; 0x4d
   129a4:	beq	12a68 <__assert_fail@plt+0x290>
   129a8:	b	129c4 <__assert_fail@plt+0x1ec>
   129ac:	cmp	r1, #0
   129b0:	cmpeq	r0, #84	; 0x54
   129b4:	beq	129d4 <__assert_fail@plt+0x1fc>
   129b8:	cmp	r1, #0
   129bc:	cmpeq	r0, #122	; 0x7a
   129c0:	beq	12cbc <__assert_fail@plt+0x4e4>
   129c4:	movw	r1, #43580	; 0xaa3c
   129c8:	mov	r0, #0
   129cc:	movt	r1, #5
   129d0:	b	12ae8 <__assert_fail@plt+0x310>
   129d4:	ldr	ip, [r6]
   129d8:	mov	r0, sl
   129dc:	mov	r1, r6
   129e0:	add	r2, sp, #152	; 0x98
   129e4:	str	ip, [sp, #32]
   129e8:	bl	437f8 <__assert_fail@plt+0x31020>
   129ec:	cmp	r0, #0
   129f0:	beq	12b04 <__assert_fail@plt+0x32c>
   129f4:	mov	r0, sl
   129f8:	mov	r1, r6
   129fc:	add	r2, sp, #116	; 0x74
   12a00:	add	r3, sp, #120	; 0x78
   12a04:	bl	12808 <__assert_fail@plt+0x30>
   12a08:	cmp	r0, #0
   12a0c:	beq	12b04 <__assert_fail@plt+0x32c>
   12a10:	ldr	fp, [sl, #544]	; 0x220
   12a14:	ldr	r7, [sp, #116]	; 0x74
   12a18:	ldr	r9, [sp, #120]	; 0x78
   12a1c:	cmp	fp, #0
   12a20:	beq	13090 <__assert_fail@plt+0x8b8>
   12a24:	ldr	r5, [fp, #4]
   12a28:	ldrb	r3, [r7]
   12a2c:	ldrb	r0, [r5]
   12a30:	cmp	r0, r3
   12a34:	bne	12a60 <__assert_fail@plt+0x288>
   12a38:	mov	r0, r5
   12a3c:	mov	r1, r7
   12a40:	mov	r2, r9
   12a44:	bl	12784 <strncmp@plt>
   12a48:	subs	r8, r0, #0
   12a4c:	bne	12a60 <__assert_fail@plt+0x288>
   12a50:	mov	r0, r5
   12a54:	bl	124e4 <strlen@plt>
   12a58:	cmp	r9, r0
   12a5c:	beq	130c0 <__assert_fail@plt+0x8e8>
   12a60:	ldr	fp, [fp]
   12a64:	b	12a1c <__assert_fail@plt+0x244>
   12a68:	mov	r0, sl
   12a6c:	mov	r1, r6
   12a70:	add	r2, sp, #184	; 0xb8
   12a74:	bl	437f8 <__assert_fail@plt+0x31020>
   12a78:	cmp	r0, #0
   12a7c:	beq	12b04 <__assert_fail@plt+0x32c>
   12a80:	ldr	r3, [r6]
   12a84:	ldr	r2, [sl, #12]
   12a88:	cmp	r3, r2
   12a8c:	bcs	12d28 <__assert_fail@plt+0x550>
   12a90:	ldrb	r3, [r3]
   12a94:	cmp	r3, #241	; 0xf1
   12a98:	bne	12d28 <__assert_fail@plt+0x550>
   12a9c:	mov	r0, sl
   12aa0:	mov	r1, r6
   12aa4:	add	r2, sp, #168	; 0xa8
   12aa8:	add	r3, sp, #176	; 0xb0
   12aac:	bl	12808 <__assert_fail@plt+0x30>
   12ab0:	cmp	r0, #0
   12ab4:	bne	12d28 <__assert_fail@plt+0x550>
   12ab8:	b	12b04 <__assert_fail@plt+0x32c>
   12abc:	ldr	r3, [sl, #16]
   12ac0:	add	r2, sl, #20
   12ac4:	ldr	r5, [r6]
   12ac8:	cmp	r3, r2
   12acc:	bls	12adc <__assert_fail@plt+0x304>
   12ad0:	ldr	r3, [r3, #-8]
   12ad4:	cmn	r3, #1
   12ad8:	bne	12b0c <__assert_fail@plt+0x334>
   12adc:	movw	r1, #44036	; 0xac04
   12ae0:	movt	r1, #5
   12ae4:	mov	r0, #0
   12ae8:	mov	r2, #5
   12aec:	bl	12298 <dcgettext@plt>
   12af0:	mov	r2, r5
   12af4:	add	r1, sl, #8
   12af8:	mov	r3, r0
   12afc:	ldr	r0, [sl, #4]
   12b00:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   12b04:	mov	r0, #0
   12b08:	b	13074 <__assert_fail@plt+0x89c>
   12b0c:	mov	r0, sl
   12b10:	mov	r1, r6
   12b14:	add	r2, sp, #140	; 0x8c
   12b18:	add	r3, sp, #152	; 0x98
   12b1c:	bl	12808 <__assert_fail@plt+0x30>
   12b20:	cmp	r0, #0
   12b24:	beq	12b04 <__assert_fail@plt+0x32c>
   12b28:	mov	r0, sl
   12b2c:	mov	r1, r6
   12b30:	add	r2, sp, #168	; 0xa8
   12b34:	bl	437f8 <__assert_fail@plt+0x31020>
   12b38:	cmp	r0, #0
   12b3c:	subne	r4, r4, #3
   12b40:	beq	12b04 <__assert_fail@plt+0x32c>
   12b44:	ldrd	r2, [sp, #168]	; 0xa8
   12b48:	subs	r0, r2, #1
   12b4c:	sbc	r1, r3, #0
   12b50:	orrs	ip, r2, r3
   12b54:	strd	r0, [sp, #168]	; 0xa8
   12b58:	beq	12bfc <__assert_fail@plt+0x424>
   12b5c:	mov	r0, sl
   12b60:	mov	r1, r6
   12b64:	add	r2, sp, #176	; 0xb0
   12b68:	bl	437f8 <__assert_fail@plt+0x31020>
   12b6c:	cmp	r0, #0
   12b70:	beq	12b04 <__assert_fail@plt+0x32c>
   12b74:	ldrd	r2, [sp, #176]	; 0xb0
   12b78:	cmp	r3, #0
   12b7c:	cmpeq	r2, #7
   12b80:	bhi	12be4 <__assert_fail@plt+0x40c>
   12b84:	mov	r3, #1
   12b88:	lsl	r2, r3, r2
   12b8c:	tst	r2, #17
   12b90:	bne	12bf4 <__assert_fail@plt+0x41c>
   12b94:	tst	r2, #136	; 0x88
   12b98:	bne	12bc0 <__assert_fail@plt+0x3e8>
   12b9c:	tst	r2, #6
   12ba0:	beq	12be4 <__assert_fail@plt+0x40c>
   12ba4:	mov	r0, sl
   12ba8:	mov	r1, r6
   12bac:	add	r2, sp, #184	; 0xb8
   12bb0:	bl	437f8 <__assert_fail@plt+0x31020>
   12bb4:	cmp	r0, #0
   12bb8:	bne	12bdc <__assert_fail@plt+0x404>
   12bbc:	b	12b04 <__assert_fail@plt+0x32c>
   12bc0:	mov	r0, sl
   12bc4:	mov	r1, r6
   12bc8:	add	r2, sp, #160	; 0xa0
   12bcc:	add	r3, sp, #184	; 0xb8
   12bd0:	bl	12808 <__assert_fail@plt+0x30>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12b04 <__assert_fail@plt+0x32c>
   12bdc:	sub	r4, r4, #2
   12be0:	b	12b44 <__assert_fail@plt+0x36c>
   12be4:	movw	r1, #44076	; 0xac2c
   12be8:	mov	r0, #0
   12bec:	movt	r1, #5
   12bf0:	b	12ae8 <__assert_fail@plt+0x310>
   12bf4:	sub	r4, r4, #1
   12bf8:	b	12b44 <__assert_fail@plt+0x36c>
   12bfc:	cmp	r4, #0
   12c00:	beq	12d28 <__assert_fail@plt+0x550>
   12c04:	ldr	r2, [sl, #16]
   12c08:	ldr	r3, [sl, #296]	; 0x128
   12c0c:	ldr	r7, [sl]
   12c10:	ldr	r2, [r2, #-8]
   12c14:	add	r3, r3, r2, lsl #4
   12c18:	ldr	r9, [r3, #8]
   12c1c:	mov	r0, sl
   12c20:	mov	r1, r6
   12c24:	add	r2, sp, #184	; 0xb8
   12c28:	bl	437f8 <__assert_fail@plt+0x31020>
   12c2c:	cmp	r0, #0
   12c30:	beq	12b04 <__assert_fail@plt+0x32c>
   12c34:	ldrd	r2, [sp, #184]	; 0xb8
   12c38:	subs	r2, r2, #1
   12c3c:	sbc	r3, r3, #0
   12c40:	cmp	r9, #0
   12c44:	strd	r2, [sp, #184]	; 0xb8
   12c48:	bne	12c5c <__assert_fail@plt+0x484>
   12c4c:	movw	r1, #44108	; 0xac4c
   12c50:	mov	r0, #0
   12c54:	movt	r1, #5
   12c58:	b	12ae8 <__assert_fail@plt+0x310>
   12c5c:	ldr	r1, [r9, r2, lsl #2]
   12c60:	cmp	r1, #0
   12c64:	beq	12c4c <__assert_fail@plt+0x474>
   12c68:	mov	r0, r7
   12c6c:	bl	35818 <__assert_fail@plt+0x23040>
   12c70:	cmp	r0, #12
   12c74:	bne	12c4c <__assert_fail@plt+0x474>
   12c78:	ldr	r3, [sp, #184]	; 0xb8
   12c7c:	mov	r0, r7
   12c80:	sub	r4, r4, #1
   12c84:	ldr	r1, [r9, r3, lsl #2]
   12c88:	bl	359a8 <__assert_fail@plt+0x231d0>
   12c8c:	ldr	r8, [sp, #184]	; 0xb8
   12c90:	mov	r1, r0
   12c94:	mov	r0, r7
   12c98:	bl	34e40 <__assert_fail@plt+0x22668>
   12c9c:	ldr	r3, [sp, #184]	; 0xb8
   12ca0:	str	r0, [r9, r8, lsl #2]
   12ca4:	ldr	r3, [r9, r3, lsl #2]
   12ca8:	cmp	r3, #0
   12cac:	beq	12b04 <__assert_fail@plt+0x32c>
   12cb0:	cmp	r4, #0
   12cb4:	bne	12c1c <__assert_fail@plt+0x444>
   12cb8:	b	12d28 <__assert_fail@plt+0x550>
   12cbc:	mov	r0, sl
   12cc0:	mov	r1, r6
   12cc4:	add	r2, sp, #136	; 0x88
   12cc8:	add	r3, sp, #160	; 0xa0
   12ccc:	bl	12808 <__assert_fail@plt+0x30>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12b04 <__assert_fail@plt+0x32c>
   12cd8:	mov	r0, sl
   12cdc:	mov	r1, r6
   12ce0:	add	r2, sp, #140	; 0x8c
   12ce4:	add	r3, sp, #168	; 0xa8
   12ce8:	bl	12808 <__assert_fail@plt+0x30>
   12cec:	cmp	r0, #0
   12cf0:	beq	12b04 <__assert_fail@plt+0x32c>
   12cf4:	mov	r0, sl
   12cf8:	mov	r1, r6
   12cfc:	add	r2, sp, #152	; 0x98
   12d00:	add	r3, sp, #176	; 0xb0
   12d04:	bl	12808 <__assert_fail@plt+0x30>
   12d08:	cmp	r0, #0
   12d0c:	beq	12b04 <__assert_fail@plt+0x32c>
   12d10:	mov	r0, sl
   12d14:	mov	r1, r6
   12d18:	add	r2, sp, #184	; 0xb8
   12d1c:	bl	437f8 <__assert_fail@plt+0x31020>
   12d20:	cmp	r0, #0
   12d24:	beq	12b04 <__assert_fail@plt+0x32c>
   12d28:	mov	r0, #1
   12d2c:	b	13074 <__assert_fail@plt+0x89c>
   12d30:	mov	r0, sl
   12d34:	mov	r1, r6
   12d38:	add	r2, sp, #184	; 0xb8
   12d3c:	ldr	r9, [r6]
   12d40:	bl	437f8 <__assert_fail@plt+0x31020>
   12d44:	cmp	r0, #0
   12d48:	beq	12b04 <__assert_fail@plt+0x32c>
   12d4c:	ldrd	r2, [sp, #184]	; 0xb8
   12d50:	cmp	r3, #0
   12d54:	cmpeq	r2, #3
   12d58:	beq	12d7c <__assert_fail@plt+0x5a4>
   12d5c:	mov	r1, r6
   12d60:	mov	r0, sl
   12d64:	add	r2, sp, #160	; 0xa0
   12d68:	add	r3, sp, #176	; 0xb0
   12d6c:	bl	12808 <__assert_fail@plt+0x30>
   12d70:	cmp	r0, #0
   12d74:	bne	12d9c <__assert_fail@plt+0x5c4>
   12d78:	b	12b04 <__assert_fail@plt+0x32c>
   12d7c:	mov	r0, sl
   12d80:	mov	r1, r6
   12d84:	add	r2, sp, #152	; 0x98
   12d88:	add	r3, sp, #168	; 0xa8
   12d8c:	bl	12808 <__assert_fail@plt+0x30>
   12d90:	cmp	r0, #0
   12d94:	bne	12d5c <__assert_fail@plt+0x584>
   12d98:	b	12b04 <__assert_fail@plt+0x32c>
   12d9c:	ldrd	r0, [sp, #184]	; 0xb8
   12da0:	cmp	r1, #0
   12da4:	cmpeq	r0, #3
   12da8:	strd	r0, [sp, #32]
   12dac:	beq	12ee0 <__assert_fail@plt+0x708>
   12db0:	ldr	fp, [sp, #176]	; 0xb0
   12db4:	mov	r3, #0
   12db8:	ldr	r8, [sp, #160]	; 0xa0
   12dbc:	str	r3, [sp, #44]	; 0x2c
   12dc0:	str	r9, [sp, #48]	; 0x30
   12dc4:	ldr	ip, [sp, #44]	; 0x2c
   12dc8:	cmp	ip, #0
   12dcc:	addeq	r9, sl, #280	; 0x118
   12dd0:	beq	12de0 <__assert_fail@plt+0x608>
   12dd4:	ldr	r9, [sl, #288]	; 0x120
   12dd8:	cmp	r9, #0
   12ddc:	beq	12ff4 <__assert_fail@plt+0x81c>
   12de0:	ldr	r5, [r9]
   12de4:	mov	r0, #20
   12de8:	mov	r4, r9
   12dec:	sub	r5, r5, #1
   12df0:	mul	r6, r0, r5
   12df4:	mov	r9, r6
   12df8:	mov	r6, r5
   12dfc:	mov	r5, fp
   12e00:	mov	fp, r8
   12e04:	cmp	r6, #0
   12e08:	blt	12fd8 <__assert_fail@plt+0x800>
   12e0c:	ldr	r7, [r4, #4]
   12e10:	add	r7, r7, r9
   12e14:	ldr	r8, [r7, #12]
   12e18:	cmp	r8, #0
   12e1c:	beq	12ed4 <__assert_fail@plt+0x6fc>
   12e20:	ldr	r2, [r7, #4]
   12e24:	cmp	r2, r5
   12e28:	bne	12ed4 <__assert_fail@plt+0x6fc>
   12e2c:	ldr	r0, [r7]
   12e30:	mov	r1, fp
   12e34:	mov	r2, r5
   12e38:	bl	12784 <strncmp@plt>
   12e3c:	subs	ip, r0, #0
   12e40:	bne	12ed4 <__assert_fail@plt+0x6fc>
   12e44:	ldrd	r2, [sp, #32]
   12e48:	cmp	r3, #0
   12e4c:	cmpeq	r2, #1
   12e50:	beq	12eb4 <__assert_fail@plt+0x6dc>
   12e54:	bcc	12e9c <__assert_fail@plt+0x6c4>
   12e58:	cmp	r3, #0
   12e5c:	cmpeq	r2, #2
   12e60:	beq	12ec8 <__assert_fail@plt+0x6f0>
   12e64:	mov	r2, #5
   12e68:	movw	r1, #44148	; 0xac74
   12e6c:	movt	r1, #5
   12e70:	str	ip, [sp, #28]
   12e74:	ldr	r9, [sp, #48]	; 0x30
   12e78:	bl	12298 <dcgettext@plt>
   12e7c:	add	r1, sl, #8
   12e80:	mov	r2, r9
   12e84:	mov	r3, r0
   12e88:	ldr	r0, [sl, #4]
   12e8c:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   12e90:	ldr	ip, [sp, #28]
   12e94:	mov	r0, ip
   12e98:	b	13074 <__assert_fail@plt+0x89c>
   12e9c:	ldr	r2, [r7, #16]
   12ea0:	sub	r1, r2, #1
   12ea4:	cmp	r2, #5
   12ea8:	cmpne	r1, #1
   12eac:	bls	13008 <__assert_fail@plt+0x830>
   12eb0:	b	12ed4 <__assert_fail@plt+0x6fc>
   12eb4:	ldr	r2, [r7, #16]
   12eb8:	cmp	r2, #3
   12ebc:	cmpne	r2, #5
   12ec0:	beq	13008 <__assert_fail@plt+0x830>
   12ec4:	b	12ed4 <__assert_fail@plt+0x6fc>
   12ec8:	ldr	r2, [r7, #16]
   12ecc:	cmp	r2, #4
   12ed0:	beq	13008 <__assert_fail@plt+0x830>
   12ed4:	sub	r6, r6, #1
   12ed8:	sub	r9, r9, #20
   12edc:	b	12e04 <__assert_fail@plt+0x62c>
   12ee0:	ldr	r4, [sl, #544]	; 0x220
   12ee4:	ldr	r6, [sp, #152]	; 0x98
   12ee8:	ldr	r7, [sp, #168]	; 0xa8
   12eec:	cmp	r4, #0
   12ef0:	beq	12ff8 <__assert_fail@plt+0x820>
   12ef4:	ldr	r5, [r4, #4]
   12ef8:	ldrb	r3, [r6]
   12efc:	ldrb	r0, [r5]
   12f00:	cmp	r0, r3
   12f04:	bne	12fd0 <__assert_fail@plt+0x7f8>
   12f08:	mov	r0, r5
   12f0c:	mov	r1, r6
   12f10:	mov	r2, r7
   12f14:	bl	12784 <strncmp@plt>
   12f18:	subs	r8, r0, #0
   12f1c:	bne	12fd0 <__assert_fail@plt+0x7f8>
   12f20:	mov	r0, r5
   12f24:	bl	124e4 <strlen@plt>
   12f28:	cmp	r7, r0
   12f2c:	bne	12fd0 <__assert_fail@plt+0x7f8>
   12f30:	ldr	r3, [r4, #16]
   12f34:	cmp	r3, #0
   12f38:	beq	12ff8 <__assert_fail@plt+0x820>
   12f3c:	ldr	r0, [sl]
   12f40:	ldr	r1, [r4, #8]
   12f44:	bl	35a10 <__assert_fail@plt+0x23238>
   12f48:	subs	r6, r0, #0
   12f4c:	bne	12f9c <__assert_fail@plt+0x7c4>
   12f50:	ldr	r0, [sl, #4]
   12f54:	mov	r2, r9
   12f58:	movw	r3, #44180	; 0xac94
   12f5c:	add	r1, sl, #8
   12f60:	movt	r3, #5
   12f64:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   12f68:	mov	r0, r6
   12f6c:	b	13074 <__assert_fail@plt+0x89c>
   12f70:	ldr	r0, [sl]
   12f74:	bl	35a60 <__assert_fail@plt+0x23288>
   12f78:	subs	fp, r0, #0
   12f7c:	beq	12b04 <__assert_fail@plt+0x32c>
   12f80:	ldr	r5, [sp, #176]	; 0xb0
   12f84:	ldr	r1, [sp, #160]	; 0xa0
   12f88:	mov	r2, r5
   12f8c:	bl	12784 <strncmp@plt>
   12f90:	cmp	r0, #0
   12f94:	beq	12fb0 <__assert_fail@plt+0x7d8>
   12f98:	add	r8, r8, #1
   12f9c:	ldr	r1, [r6, r8, lsl #2]
   12fa0:	lsl	r7, r8, #2
   12fa4:	cmp	r1, #0
   12fa8:	bne	12f70 <__assert_fail@plt+0x798>
   12fac:	b	12ff8 <__assert_fail@plt+0x820>
   12fb0:	mov	r0, fp
   12fb4:	bl	124e4 <strlen@plt>
   12fb8:	cmp	r5, r0
   12fbc:	bne	12f98 <__assert_fail@plt+0x7c0>
   12fc0:	ldr	r3, [r4, #16]
   12fc4:	adds	r7, r3, r7
   12fc8:	beq	12ff8 <__assert_fail@plt+0x820>
   12fcc:	b	13010 <__assert_fail@plt+0x838>
   12fd0:	ldr	r4, [r4]
   12fd4:	b	12eec <__assert_fail@plt+0x714>
   12fd8:	ldr	r3, [sp, #44]	; 0x2c
   12fdc:	mov	r8, fp
   12fe0:	mov	fp, r5
   12fe4:	add	r3, r3, #1
   12fe8:	str	r3, [sp, #44]	; 0x2c
   12fec:	cmp	r3, #2
   12ff0:	bne	12dc4 <__assert_fail@plt+0x5ec>
   12ff4:	ldr	r9, [sp, #48]	; 0x30
   12ff8:	movw	r1, #44220	; 0xacbc
   12ffc:	mov	r0, #0
   13000:	movt	r1, #5
   13004:	b	13030 <__assert_fail@plt+0x858>
   13008:	ldr	r9, [sp, #48]	; 0x30
   1300c:	mov	r7, r8
   13010:	ldr	r0, [sl]
   13014:	ldr	r1, [r7]
   13018:	bl	35818 <__assert_fail@plt+0x23040>
   1301c:	cmp	r0, #12
   13020:	beq	13050 <__assert_fail@plt+0x878>
   13024:	movw	r1, #44244	; 0xacd4
   13028:	movt	r1, #5
   1302c:	mov	r0, #0
   13030:	mov	r2, #5
   13034:	bl	12298 <dcgettext@plt>
   13038:	mov	r2, r9
   1303c:	add	r1, sl, #8
   13040:	mov	r3, r0
   13044:	ldr	r0, [sl, #4]
   13048:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   1304c:	b	12b04 <__assert_fail@plt+0x32c>
   13050:	ldr	r1, [r7]
   13054:	ldr	r0, [sl]
   13058:	bl	359a8 <__assert_fail@plt+0x231d0>
   1305c:	mov	r1, r0
   13060:	ldr	r0, [sl]
   13064:	bl	34e40 <__assert_fail@plt+0x22668>
   13068:	str	r0, [r7]
   1306c:	adds	r0, r0, #0
   13070:	movne	r0, #1
   13074:	movw	r3, #65176	; 0xfe98
   13078:	movt	r3, #6
   1307c:	ldr	r2, [sp, #196]	; 0xc4
   13080:	ldr	r3, [r3]
   13084:	cmp	r2, r3
   13088:	beq	13e70 <__assert_fail@plt+0x1698>
   1308c:	bl	122b0 <__stack_chk_fail@plt>
   13090:	mov	r2, #5
   13094:	movw	r1, #44276	; 0xacf4
   13098:	mov	r0, fp
   1309c:	movt	r1, #5
   130a0:	bl	12298 <dcgettext@plt>
   130a4:	ldr	r2, [sp, #32]
   130a8:	add	r1, sl, #8
   130ac:	mov	r3, r0
   130b0:	ldr	r0, [sl, #4]
   130b4:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   130b8:	mov	r0, fp
   130bc:	b	13074 <__assert_fail@plt+0x89c>
   130c0:	ldr	ip, [sl]
   130c4:	sub	r4, r4, #3
   130c8:	ldr	r1, [fp, #8]
   130cc:	str	r8, [sp, #52]	; 0x34
   130d0:	mov	r0, ip
   130d4:	str	r8, [sp, #104]	; 0x68
   130d8:	str	r8, [sp, #108]	; 0x6c
   130dc:	str	r8, [sp, #72]	; 0x48
   130e0:	str	ip, [sp, #48]	; 0x30
   130e4:	str	r4, [sp, #44]	; 0x2c
   130e8:	bl	35a10 <__assert_fail@plt+0x23238>
   130ec:	ldr	r8, [sp, #52]	; 0x34
   130f0:	str	fp, [sp, #96]	; 0x60
   130f4:	str	r8, [sp, #88]	; 0x58
   130f8:	str	r8, [sp, #100]	; 0x64
   130fc:	str	r8, [sp, #68]	; 0x44
   13100:	str	r8, [sp, #84]	; 0x54
   13104:	str	r8, [sp, #92]	; 0x5c
   13108:	str	r8, [sp, #60]	; 0x3c
   1310c:	str	r8, [sp, #76]	; 0x4c
   13110:	str	r0, [sp, #64]	; 0x40
   13114:	ldr	ip, [sp, #44]	; 0x2c
   13118:	cmp	ip, #0
   1311c:	beq	13a34 <__assert_fail@plt+0x125c>
   13120:	mov	r0, sl
   13124:	mov	r1, r6
   13128:	add	r2, sp, #160	; 0xa0
   1312c:	ldr	r4, [r6]
   13130:	bl	437f8 <__assert_fail@plt+0x31020>
   13134:	cmp	r0, #0
   13138:	beq	12b04 <__assert_fail@plt+0x32c>
   1313c:	ldrd	r2, [sp, #160]	; 0xa0
   13140:	cmp	r3, #0
   13144:	cmpeq	r2, #109	; 0x6d
   13148:	beq	13750 <__assert_fail@plt+0xf78>
   1314c:	bhi	1316c <__assert_fail@plt+0x994>
   13150:	cmp	r3, #0
   13154:	cmpeq	r2, #98	; 0x62
   13158:	beq	131bc <__assert_fail@plt+0x9e4>
   1315c:	cmp	r3, #0
   13160:	cmpeq	r2, #100	; 0x64
   13164:	beq	133f8 <__assert_fail@plt+0xc20>
   13168:	b	13190 <__assert_fail@plt+0x9b8>
   1316c:	cmp	r3, #0
   13170:	cmpeq	r2, #118	; 0x76
   13174:	beq	13750 <__assert_fail@plt+0xf78>
   13178:	cmp	r3, #0
   1317c:	cmpeq	r2, #122	; 0x7a
   13180:	beq	13964 <__assert_fail@plt+0x118c>
   13184:	cmp	r3, #0
   13188:	cmpeq	r2, #111	; 0x6f
   1318c:	beq	1387c <__assert_fail@plt+0x10a4>
   13190:	mov	r2, #5
   13194:	movw	r1, #43612	; 0xaa5c
   13198:	mov	r0, #0
   1319c:	movt	r1, #5
   131a0:	bl	12298 <dcgettext@plt>
   131a4:	mov	r2, r4
   131a8:	add	r1, sl, #8
   131ac:	mov	r3, r0
   131b0:	ldr	r0, [sl, #4]
   131b4:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   131b8:	b	12b04 <__assert_fail@plt+0x32c>
   131bc:	mov	r0, sl
   131c0:	mov	r1, r6
   131c4:	add	r2, sp, #176	; 0xb0
   131c8:	bl	437f8 <__assert_fail@plt+0x31020>
   131cc:	cmp	r0, #0
   131d0:	beq	12b04 <__assert_fail@plt+0x32c>
   131d4:	mov	r0, sl
   131d8:	mov	r1, r6
   131dc:	add	r2, sp, #132	; 0x84
   131e0:	add	r3, sp, #140	; 0x8c
   131e4:	bl	12808 <__assert_fail@plt+0x30>
   131e8:	cmp	r0, #0
   131ec:	beq	12b04 <__assert_fail@plt+0x32c>
   131f0:	mov	r0, sl
   131f4:	mov	r1, r6
   131f8:	add	r2, sp, #184	; 0xb8
   131fc:	bl	437f8 <__assert_fail@plt+0x31020>
   13200:	cmp	r0, #0
   13204:	beq	12b04 <__assert_fail@plt+0x32c>
   13208:	mov	r0, sl
   1320c:	mov	r1, r6
   13210:	add	r2, sp, #136	; 0x88
   13214:	add	r3, sp, #168	; 0xa8
   13218:	bl	12808 <__assert_fail@plt+0x30>
   1321c:	cmp	r0, #0
   13220:	beq	12b04 <__assert_fail@plt+0x32c>
   13224:	ldrd	r2, [sp, #176]	; 0xb0
   13228:	mov	r0, #16
   1322c:	mov	r1, #0
   13230:	ldr	ip, [sp, #44]	; 0x2c
   13234:	and	r2, r2, r0
   13238:	and	r3, r3, r1
   1323c:	orrs	r0, r2, r3
   13240:	sub	ip, ip, #5
   13244:	str	ip, [sp, #44]	; 0x2c
   13248:	bne	13114 <__assert_fail@plt+0x93c>
   1324c:	ldr	r3, [sp, #188]	; 0xbc
   13250:	ldr	r2, [sp, #184]	; 0xb8
   13254:	ldr	r5, [sp, #168]	; 0xa8
   13258:	orrs	r3, r2, r3
   1325c:	movne	r3, #0
   13260:	moveq	r3, #1
   13264:	cmp	r5, #0
   13268:	moveq	r5, r3
   1326c:	eorne	r5, r3, #1
   13270:	cmp	r5, #0
   13274:	movwne	r1, #43644	; 0xaa7c
   13278:	movne	r0, #0
   1327c:	movtne	r1, #5
   13280:	bne	13944 <__assert_fail@plt+0x116c>
   13284:	ldr	r1, [sp, #140]	; 0x8c
   13288:	ldr	r0, [sp, #132]	; 0x84
   1328c:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   13290:	mov	r2, r5
   13294:	mov	r4, r0
   13298:	ldr	r0, [sp, #48]	; 0x30
   1329c:	mov	r1, r4
   132a0:	bl	3575c <__assert_fail@plt+0x22f84>
   132a4:	mov	r9, r0
   132a8:	mov	r0, r4
   132ac:	bl	121f0 <free@plt>
   132b0:	cmp	r9, #0
   132b4:	bne	132cc <__assert_fail@plt+0xaf4>
   132b8:	movw	r1, #43672	; 0xaa98
   132bc:	mov	r0, r9
   132c0:	mov	r2, #5
   132c4:	movt	r1, #5
   132c8:	b	13948 <__assert_fail@plt+0x1170>
   132cc:	ldr	r3, [sp, #168]	; 0xa8
   132d0:	cmp	r3, #0
   132d4:	beq	13374 <__assert_fail@plt+0xb9c>
   132d8:	ldr	ip, [sp, #64]	; 0x40
   132dc:	cmp	ip, #0
   132e0:	beq	134d4 <__assert_fail@plt+0xcfc>
   132e4:	mov	r7, ip
   132e8:	mov	r4, r7
   132ec:	ldr	r1, [r7], #4
   132f0:	cmp	r1, #0
   132f4:	beq	13340 <__assert_fail@plt+0xb68>
   132f8:	ldr	r0, [sp, #48]	; 0x30
   132fc:	bl	35a60 <__assert_fail@plt+0x23288>
   13300:	subs	r5, r0, #0
   13304:	beq	12b04 <__assert_fail@plt+0x32c>
   13308:	ldr	r1, [sp, #136]	; 0x88
   1330c:	ldrb	r2, [r5]
   13310:	ldrb	r3, [r1]
   13314:	cmp	r2, r3
   13318:	bne	132e8 <__assert_fail@plt+0xb10>
   1331c:	ldr	r8, [sp, #168]	; 0xa8
   13320:	mov	r2, r8
   13324:	bl	12784 <strncmp@plt>
   13328:	cmp	r0, #0
   1332c:	bne	132e8 <__assert_fail@plt+0xb10>
   13330:	mov	r0, r5
   13334:	bl	124e4 <strlen@plt>
   13338:	cmp	r8, r0
   1333c:	bne	132e8 <__assert_fail@plt+0xb10>
   13340:	ldr	r1, [r4]
   13344:	cmp	r1, #0
   13348:	bne	13360 <__assert_fail@plt+0xb88>
   1334c:	mov	r0, r1
   13350:	mov	r2, #5
   13354:	movw	r1, #43728	; 0xaad0
   13358:	movt	r1, #5
   1335c:	b	13948 <__assert_fail@plt+0x1170>
   13360:	ldr	r0, [sp, #48]	; 0x30
   13364:	bl	35a70 <__assert_fail@plt+0x23298>
   13368:	mov	r2, r0
   1336c:	mov	r3, r1
   13370:	b	1337c <__assert_fail@plt+0xba4>
   13374:	mov	r2, #0
   13378:	mov	r3, #0
   1337c:	ldrd	r4, [sp, #176]	; 0xb0
   13380:	mov	r1, r9
   13384:	ldr	r0, [sp, #48]	; 0x30
   13388:	lsl	ip, r4, #1
   1338c:	lsrs	r5, r5, #1
   13390:	rrx	r4, r4
   13394:	and	ip, ip, #2
   13398:	and	r4, r4, #1
   1339c:	stm	sp, {r4, ip}
   133a0:	bl	35108 <__assert_fail@plt+0x22930>
   133a4:	subs	r5, r0, #0
   133a8:	beq	12b04 <__assert_fail@plt+0x32c>
   133ac:	ldr	ip, [sp, #68]	; 0x44
   133b0:	add	r4, ip, #1
   133b4:	ldr	ip, [sp, #100]	; 0x64
   133b8:	cmp	r4, ip
   133bc:	bcc	133d8 <__assert_fail@plt+0xc00>
   133c0:	add	ip, ip, #10
   133c4:	ldr	r0, [sp, #84]	; 0x54
   133c8:	str	ip, [sp, #100]	; 0x64
   133cc:	lsl	r1, ip, #2
   133d0:	bl	122c8 <xrealloc@plt>
   133d4:	str	r0, [sp, #84]	; 0x54
   133d8:	ldr	r0, [sp, #68]	; 0x44
   133dc:	mov	r2, #0
   133e0:	ldr	ip, [sp, #84]	; 0x54
   133e4:	str	r4, [sp, #68]	; 0x44
   133e8:	add	r3, ip, r0, lsl #2
   133ec:	str	r5, [ip, r0, lsl #2]
   133f0:	str	r2, [r3, #4]
   133f4:	b	13114 <__assert_fail@plt+0x93c>
   133f8:	mov	r0, sl
   133fc:	mov	r1, r6
   13400:	add	r2, sp, #184	; 0xb8
   13404:	bl	437f8 <__assert_fail@plt+0x31020>
   13408:	cmp	r0, #0
   1340c:	beq	12b04 <__assert_fail@plt+0x32c>
   13410:	mov	r0, sl
   13414:	mov	r1, r6
   13418:	add	r2, sp, #136	; 0x88
   1341c:	add	r3, sp, #168	; 0xa8
   13420:	bl	12808 <__assert_fail@plt+0x30>
   13424:	cmp	r0, #0
   13428:	beq	12b04 <__assert_fail@plt+0x32c>
   1342c:	mov	r0, sl
   13430:	mov	r1, r6
   13434:	add	r2, sp, #140	; 0x8c
   13438:	add	r3, sp, #176	; 0xb0
   1343c:	bl	12808 <__assert_fail@plt+0x30>
   13440:	cmp	r0, #0
   13444:	beq	12b04 <__assert_fail@plt+0x32c>
   13448:	ldr	r0, [sp, #136]	; 0x88
   1344c:	ldr	r1, [sp, #168]	; 0xa8
   13450:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   13454:	ldr	r8, [sp, #184]	; 0xb8
   13458:	ubfx	r8, r8, #2, #1
   1345c:	cmp	r8, #0
   13460:	str	r0, [sp, #56]	; 0x38
   13464:	beq	134b4 <__assert_fail@plt+0xcdc>
   13468:	ldr	r4, [sl, #284]	; 0x11c
   1346c:	mov	fp, #20
   13470:	ldr	r3, [sl, #280]	; 0x118
   13474:	ldr	r9, [sp, #176]	; 0xb0
   13478:	ldr	r7, [sp, #140]	; 0x8c
   1347c:	mla	fp, fp, r3, r4
   13480:	cmp	r4, fp
   13484:	bcs	13b24 <__assert_fail@plt+0x134c>
   13488:	ldr	r3, [r4, #4]
   1348c:	cmp	r3, r9
   13490:	bne	134ac <__assert_fail@plt+0xcd4>
   13494:	ldr	r0, [r4]
   13498:	mov	r1, r7
   1349c:	mov	r2, r9
   134a0:	bl	12784 <strncmp@plt>
   134a4:	cmp	r0, #0
   134a8:	beq	13b18 <__assert_fail@plt+0x1340>
   134ac:	add	r4, r4, #20
   134b0:	b	13480 <__assert_fail@plt+0xca8>
   134b4:	ldr	ip, [sp, #64]	; 0x40
   134b8:	cmp	ip, #0
   134bc:	beq	134d4 <__assert_fail@plt+0xcfc>
   134c0:	mov	r9, ip
   134c4:	mov	r4, #0
   134c8:	ldr	r7, [sp, #48]	; 0x30
   134cc:	str	r6, [sp, #80]	; 0x50
   134d0:	b	13510 <__assert_fail@plt+0xd38>
   134d4:	movw	r1, #43700	; 0xaab4
   134d8:	ldr	r0, [sp, #64]	; 0x40
   134dc:	mov	r2, #5
   134e0:	movt	r1, #5
   134e4:	b	13948 <__assert_fail@plt+0x1170>
   134e8:	mov	r0, r7
   134ec:	bl	35a60 <__assert_fail@plt+0x23288>
   134f0:	subs	r6, r0, #0
   134f4:	beq	12b04 <__assert_fail@plt+0x32c>
   134f8:	ldr	r1, [sp, #140]	; 0x8c
   134fc:	ldrb	ip, [r6]
   13500:	ldrb	r2, [r1]
   13504:	cmp	ip, r2
   13508:	beq	13524 <__assert_fail@plt+0xd4c>
   1350c:	add	r4, r4, #1
   13510:	mov	r5, r9
   13514:	ldr	r1, [r9], #4
   13518:	cmp	r1, #0
   1351c:	bne	134e8 <__assert_fail@plt+0xd10>
   13520:	b	13548 <__assert_fail@plt+0xd70>
   13524:	ldr	fp, [sp, #176]	; 0xb0
   13528:	mov	r2, fp
   1352c:	bl	12784 <strncmp@plt>
   13530:	cmp	r0, #0
   13534:	bne	1350c <__assert_fail@plt+0xd34>
   13538:	mov	r0, r6
   1353c:	bl	124e4 <strlen@plt>
   13540:	cmp	fp, r0
   13544:	bne	1350c <__assert_fail@plt+0xd34>
   13548:	ldr	r1, [r5]
   1354c:	ldr	r6, [sp, #80]	; 0x50
   13550:	cmp	r1, #0
   13554:	bne	1356c <__assert_fail@plt+0xd94>
   13558:	mov	r0, r1
   1355c:	mov	r2, #5
   13560:	movw	r1, #43768	; 0xaaf8
   13564:	movt	r1, #5
   13568:	b	13948 <__assert_fail@plt+0x1170>
   1356c:	ldr	r0, [sp, #48]	; 0x30
   13570:	bl	35a50 <__assert_fail@plt+0x23278>
   13574:	mov	r7, r0
   13578:	ldr	r0, [sp, #48]	; 0x30
   1357c:	mov	r1, r7
   13580:	bl	35818 <__assert_fail@plt+0x23040>
   13584:	cmp	r0, #12
   13588:	bne	135fc <__assert_fail@plt+0xe24>
   1358c:	ldr	ip, [sp, #96]	; 0x60
   13590:	ldr	r3, [ip, #16]
   13594:	cmp	r3, #0
   13598:	bne	135d0 <__assert_fail@plt+0xdf8>
   1359c:	ldr	ip, [sp, #64]	; 0x40
   135a0:	lsl	r9, r3, #2
   135a4:	ldr	fp, [ip, r3, lsl #2]
   135a8:	cmp	fp, #0
   135ac:	addne	r3, r3, #1
   135b0:	bne	1359c <__assert_fail@plt+0xdc4>
   135b4:	mov	r0, r9
   135b8:	bl	12358 <xmalloc@plt>
   135bc:	ldr	ip, [sp, #96]	; 0x60
   135c0:	mov	r1, fp
   135c4:	mov	r2, r9
   135c8:	str	r0, [ip, #16]
   135cc:	bl	12580 <memset@plt>
   135d0:	cmp	r7, #0
   135d4:	beq	12b04 <__assert_fail@plt+0x32c>
   135d8:	ldr	ip, [sp, #96]	; 0x60
   135dc:	mov	r2, #0
   135e0:	ldr	r0, [sp, #48]	; 0x30
   135e4:	ldr	r3, [ip, #16]
   135e8:	str	r7, [r3, r4, lsl #2]
   135ec:	ldr	r1, [ip, #16]
   135f0:	add	r1, r1, r4, lsl #2
   135f4:	bl	34bc0 <__assert_fail@plt+0x223e8>
   135f8:	mov	r7, r0
   135fc:	cmp	r7, #0
   13600:	beq	12b04 <__assert_fail@plt+0x32c>
   13604:	ldrd	r2, [sp, #184]	; 0xb8
   13608:	mov	r0, #3
   1360c:	mov	r1, #0
   13610:	and	r2, r2, r0
   13614:	and	r3, r3, r1
   13618:	cmp	r3, #0
   1361c:	cmpeq	r2, #1
   13620:	beq	13644 <__assert_fail@plt+0xe6c>
   13624:	bcc	1363c <__assert_fail@plt+0xe64>
   13628:	cmp	r3, #0
   1362c:	cmpeq	r2, #2
   13630:	bne	1386c <__assert_fail@plt+0x1094>
   13634:	mov	r4, #1
   13638:	b	13648 <__assert_fail@plt+0xe70>
   1363c:	mov	r4, #0
   13640:	b	13648 <__assert_fail@plt+0xe70>
   13644:	mov	r4, #2
   13648:	cmp	r8, #0
   1364c:	beq	1367c <__assert_fail@plt+0xea4>
   13650:	ldr	r1, [sp, #176]	; 0xb0
   13654:	ldr	r0, [sp, #140]	; 0x8c
   13658:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   1365c:	str	r4, [sp]
   13660:	ldr	r1, [sp, #56]	; 0x38
   13664:	mov	r2, r7
   13668:	mov	r3, r0
   1366c:	ldr	r0, [sp, #48]	; 0x30
   13670:	bl	35198 <__assert_fail@plt+0x229c0>
   13674:	mov	r5, r0
   13678:	b	136f0 <__assert_fail@plt+0xf18>
   1367c:	ldr	r0, [sp, #48]	; 0x30
   13680:	ldr	r1, [r5]
   13684:	bl	35a70 <__assert_fail@plt+0x23298>
   13688:	mov	fp, r0
   1368c:	mov	r9, r1
   13690:	ldr	r0, [sp, #48]	; 0x30
   13694:	ldr	r1, [r5]
   13698:	bl	35a98 <__assert_fail@plt+0x232c0>
   1369c:	and	r2, r0, r1
   136a0:	mov	r3, r1
   136a4:	and	r1, fp, r9
   136a8:	cmn	r2, #1
   136ac:	cmnne	r1, #1
   136b0:	bne	136c8 <__assert_fail@plt+0xef0>
   136b4:	movw	r1, #43832	; 0xab38
   136b8:	mov	r0, r8
   136bc:	mov	r2, #5
   136c0:	movt	r1, #5
   136c4:	b	13948 <__assert_fail@plt+0x1170>
   136c8:	str	r0, [sp, #8]
   136cc:	mov	r2, r7
   136d0:	str	fp, [sp]
   136d4:	ldr	r1, [sp, #56]	; 0x38
   136d8:	str	r9, [sp, #4]
   136dc:	ldr	r0, [sp, #48]	; 0x30
   136e0:	str	r3, [sp, #12]
   136e4:	str	r4, [sp, #16]
   136e8:	bl	3514c <__assert_fail@plt+0x22974>
   136ec:	mov	r5, r0
   136f0:	cmp	r5, #0
   136f4:	beq	12b04 <__assert_fail@plt+0x32c>
   136f8:	ldr	ip, [sp, #60]	; 0x3c
   136fc:	add	r4, ip, #1
   13700:	ldr	ip, [sp, #92]	; 0x5c
   13704:	cmp	r4, ip
   13708:	bcc	13724 <__assert_fail@plt+0xf4c>
   1370c:	add	ip, ip, #10
   13710:	ldr	r0, [sp, #76]	; 0x4c
   13714:	str	ip, [sp, #92]	; 0x5c
   13718:	lsl	r1, ip, #2
   1371c:	bl	122c8 <xrealloc@plt>
   13720:	str	r0, [sp, #76]	; 0x4c
   13724:	ldr	ip, [sp, #76]	; 0x4c
   13728:	mov	r2, #0
   1372c:	ldr	r0, [sp, #60]	; 0x3c
   13730:	str	r4, [sp, #60]	; 0x3c
   13734:	add	r3, ip, r0, lsl #2
   13738:	str	r5, [ip, r0, lsl #2]
   1373c:	ldr	ip, [sp, #44]	; 0x2c
   13740:	sub	ip, ip, #4
   13744:	str	ip, [sp, #44]	; 0x2c
   13748:	str	r2, [r3, #4]
   1374c:	b	13114 <__assert_fail@plt+0x93c>
   13750:	mov	r0, sl
   13754:	mov	r1, r6
   13758:	add	r2, sp, #168	; 0xa8
   1375c:	bl	437f8 <__assert_fail@plt+0x31020>
   13760:	cmp	r0, #0
   13764:	beq	12b04 <__assert_fail@plt+0x32c>
   13768:	mov	r0, sl
   1376c:	mov	r1, r6
   13770:	add	r2, sp, #124	; 0x7c
   13774:	add	r3, sp, #132	; 0x84
   13778:	bl	12808 <__assert_fail@plt+0x30>
   1377c:	cmp	r0, #0
   13780:	beq	12b04 <__assert_fail@plt+0x32c>
   13784:	mov	r0, sl
   13788:	mov	r1, r6
   1378c:	add	r2, sp, #128	; 0x80
   13790:	add	r3, sp, #136	; 0x88
   13794:	bl	12808 <__assert_fail@plt+0x30>
   13798:	cmp	r0, #0
   1379c:	beq	12b04 <__assert_fail@plt+0x32c>
   137a0:	ldrd	r2, [sp, #160]	; 0xa0
   137a4:	ldr	ip, [sp, #44]	; 0x2c
   137a8:	cmp	r3, #0
   137ac:	cmpeq	r2, #118	; 0x76
   137b0:	sub	r4, ip, #4
   137b4:	movne	r2, #0
   137b8:	movne	r3, #0
   137bc:	strdne	r2, [sp, #176]	; 0xb0
   137c0:	bne	137e4 <__assert_fail@plt+0x100c>
   137c4:	mov	r0, sl
   137c8:	mov	r1, r6
   137cc:	add	r2, sp, #176	; 0xb0
   137d0:	bl	437f8 <__assert_fail@plt+0x31020>
   137d4:	cmp	r0, #0
   137d8:	beq	12b04 <__assert_fail@plt+0x32c>
   137dc:	ldr	ip, [sp, #44]	; 0x2c
   137e0:	sub	r4, ip, #5
   137e4:	mov	r0, sl
   137e8:	mov	r1, r6
   137ec:	add	r2, sp, #184	; 0xb8
   137f0:	bl	437f8 <__assert_fail@plt+0x31020>
   137f4:	cmp	r0, #0
   137f8:	beq	12b04 <__assert_fail@plt+0x32c>
   137fc:	ldrd	r2, [sp, #168]	; 0xa8
   13800:	mov	r0, #16
   13804:	mov	r1, #0
   13808:	sub	r4, r4, #1
   1380c:	and	r2, r2, r0
   13810:	and	r3, r3, r1
   13814:	orrs	r0, r2, r3
   13818:	str	r4, [sp, #44]	; 0x2c
   1381c:	bne	13114 <__assert_fail@plt+0x93c>
   13820:	ldr	r4, [sl, #284]	; 0x11c
   13824:	mov	r9, #20
   13828:	ldr	r3, [sl, #280]	; 0x118
   1382c:	ldr	r5, [sp, #136]	; 0x88
   13830:	ldr	r7, [sp, #128]	; 0x80
   13834:	mla	r9, r9, r3, r4
   13838:	cmp	r4, r9
   1383c:	bcs	13b50 <__assert_fail@plt+0x1378>
   13840:	ldr	r3, [r4, #4]
   13844:	cmp	r3, r5
   13848:	bne	13864 <__assert_fail@plt+0x108c>
   1384c:	ldr	r0, [r4]
   13850:	mov	r1, r7
   13854:	mov	r2, r5
   13858:	bl	12784 <strncmp@plt>
   1385c:	cmp	r0, #0
   13860:	beq	13dfc <__assert_fail@plt+0x1624>
   13864:	add	r4, r4, #20
   13868:	b	13838 <__assert_fail@plt+0x1060>
   1386c:	movw	r1, #43808	; 0xab20
   13870:	mov	r0, #0
   13874:	movt	r1, #5
   13878:	b	13944 <__assert_fail@plt+0x116c>
   1387c:	mov	r0, sl
   13880:	mov	r1, r6
   13884:	add	r2, sp, #176	; 0xb0
   13888:	bl	437f8 <__assert_fail@plt+0x31020>
   1388c:	cmp	r0, #0
   13890:	beq	12b04 <__assert_fail@plt+0x32c>
   13894:	ldrd	r2, [sp, #176]	; 0xb0
   13898:	mov	r0, #4
   1389c:	mov	r1, #0
   138a0:	and	r0, r0, r2
   138a4:	and	r1, r1, r3
   138a8:	orrs	ip, r0, r1
   138ac:	beq	138f4 <__assert_fail@plt+0x111c>
   138b0:	mov	r0, sl
   138b4:	mov	r1, r6
   138b8:	add	r2, sp, #140	; 0x8c
   138bc:	add	r3, sp, #168	; 0xa8
   138c0:	bl	12808 <__assert_fail@plt+0x30>
   138c4:	cmp	r0, #0
   138c8:	beq	12b04 <__assert_fail@plt+0x32c>
   138cc:	mov	r0, sl
   138d0:	mov	r1, r6
   138d4:	add	r2, sp, #184	; 0xb8
   138d8:	bl	437f8 <__assert_fail@plt+0x31020>
   138dc:	cmp	r0, #0
   138e0:	beq	12b04 <__assert_fail@plt+0x32c>
   138e4:	ldr	ip, [sp, #44]	; 0x2c
   138e8:	sub	ip, ip, #4
   138ec:	str	ip, [sp, #44]	; 0x2c
   138f0:	b	13114 <__assert_fail@plt+0x93c>
   138f4:	mov	r0, #8
   138f8:	mov	r1, #0
   138fc:	and	r2, r2, r0
   13900:	and	r3, r3, r1
   13904:	orrs	r0, r2, r3
   13908:	beq	13938 <__assert_fail@plt+0x1160>
   1390c:	mov	r0, sl
   13910:	mov	r1, r6
   13914:	add	r2, sp, #168	; 0xa8
   13918:	add	r3, sp, #184	; 0xb8
   1391c:	bl	12808 <__assert_fail@plt+0x30>
   13920:	cmp	r0, #0
   13924:	beq	12b04 <__assert_fail@plt+0x32c>
   13928:	ldr	ip, [sp, #44]	; 0x2c
   1392c:	sub	ip, ip, #3
   13930:	str	ip, [sp, #44]	; 0x2c
   13934:	b	13114 <__assert_fail@plt+0x93c>
   13938:	movw	r1, #43972	; 0xabc4
   1393c:	movt	r1, #5
   13940:	mov	r0, #0
   13944:	mov	r2, #5
   13948:	bl	12298 <dcgettext@plt>
   1394c:	ldr	r2, [sp, #32]
   13950:	add	r1, sl, #8
   13954:	mov	r3, r0
   13958:	ldr	r0, [sl, #4]
   1395c:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   13960:	b	12b04 <__assert_fail@plt+0x32c>
   13964:	mov	r0, sl
   13968:	mov	r1, r6
   1396c:	add	r2, sp, #132	; 0x84
   13970:	add	r3, sp, #140	; 0x8c
   13974:	bl	12808 <__assert_fail@plt+0x30>
   13978:	cmp	r0, #0
   1397c:	beq	12b04 <__assert_fail@plt+0x32c>
   13980:	mov	r0, sl
   13984:	mov	r1, r6
   13988:	add	r2, sp, #176	; 0xb0
   1398c:	bl	437f8 <__assert_fail@plt+0x31020>
   13990:	cmp	r0, #0
   13994:	beq	12b04 <__assert_fail@plt+0x32c>
   13998:	mov	r0, sl
   1399c:	mov	r1, r6
   139a0:	add	r2, sp, #136	; 0x88
   139a4:	add	r3, sp, #168	; 0xa8
   139a8:	bl	12808 <__assert_fail@plt+0x30>
   139ac:	cmp	r0, #0
   139b0:	beq	12b04 <__assert_fail@plt+0x32c>
   139b4:	mov	r0, sl
   139b8:	mov	r1, r6
   139bc:	add	r2, sp, #184	; 0xb8
   139c0:	bl	437f8 <__assert_fail@plt+0x31020>
   139c4:	cmp	r0, #0
   139c8:	beq	12b04 <__assert_fail@plt+0x32c>
   139cc:	ldr	r1, [sp, #168]	; 0xa8
   139d0:	ldr	ip, [sp, #44]	; 0x2c
   139d4:	cmp	r1, #0
   139d8:	sub	ip, ip, #5
   139dc:	str	ip, [sp, #44]	; 0x2c
   139e0:	moveq	ip, #1
   139e4:	streq	ip, [sp, #52]	; 0x34
   139e8:	beq	13114 <__assert_fail@plt+0x93c>
   139ec:	ldr	r0, [sp, #136]	; 0x88
   139f0:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   139f4:	mov	r2, #0
   139f8:	mov	r4, r0
   139fc:	ldr	r0, [sp, #48]	; 0x30
   13a00:	mov	r1, r4
   13a04:	bl	3575c <__assert_fail@plt+0x22f84>
   13a08:	str	r0, [sp, #104]	; 0x68
   13a0c:	mov	r0, r4
   13a10:	bl	121f0 <free@plt>
   13a14:	ldr	ip, [sp, #104]	; 0x68
   13a18:	cmp	ip, #0
   13a1c:	bne	13114 <__assert_fail@plt+0x93c>
   13a20:	movw	r1, #44012	; 0xabec
   13a24:	mov	r0, ip
   13a28:	mov	r2, #5
   13a2c:	movt	r1, #5
   13a30:	b	13948 <__assert_fail@plt+0x1170>
   13a34:	ldr	ip, [sp, #72]	; 0x48
   13a38:	ldr	fp, [sp, #96]	; 0x60
   13a3c:	cmp	ip, #0
   13a40:	beq	13aac <__assert_fail@plt+0x12d4>
   13a44:	add	r0, ip, #1
   13a48:	ldr	r6, [sp, #44]	; 0x2c
   13a4c:	ldr	r5, [sp, #88]	; 0x58
   13a50:	lsl	r0, r0, #2
   13a54:	bl	12358 <xmalloc@plt>
   13a58:	ldr	r7, [sp, #48]	; 0x30
   13a5c:	ldr	r8, [sp, #72]	; 0x48
   13a60:	mov	r4, r0
   13a64:	ldm	r5, {r0, r1}
   13a68:	add	r5, r5, #20
   13a6c:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   13a70:	ldr	r2, [r5, #-12]
   13a74:	mov	r1, r0
   13a78:	mov	r0, r7
   13a7c:	bl	351e4 <__assert_fail@plt+0x22a0c>
   13a80:	cmp	r0, #0
   13a84:	str	r0, [r4, r6, lsl #2]
   13a88:	beq	12b04 <__assert_fail@plt+0x32c>
   13a8c:	add	r6, r6, #1
   13a90:	cmp	r6, r8
   13a94:	bne	13a64 <__assert_fail@plt+0x128c>
   13a98:	mov	r3, #0
   13a9c:	ldr	r0, [sp, #88]	; 0x58
   13aa0:	str	r3, [r4, r6, lsl #2]
   13aa4:	bl	121f0 <free@plt>
   13aa8:	b	13ab0 <__assert_fail@plt+0x12d8>
   13aac:	ldr	r4, [sp, #72]	; 0x48
   13ab0:	ldrd	r2, [sp, #152]	; 0x98
   13ab4:	ldr	r0, [sp, #48]	; 0x30
   13ab8:	cmp	r3, #0
   13abc:	cmpeq	r2, #117	; 0x75
   13ac0:	ldr	r1, [fp, #12]
   13ac4:	moveq	r5, #0
   13ac8:	movne	r5, #1
   13acc:	bl	35888 <__assert_fail@plt+0x230b0>
   13ad0:	ldr	ip, [sp, #76]	; 0x4c
   13ad4:	str	r4, [sp, #8]
   13ad8:	str	ip, [sp]
   13adc:	ldr	ip, [sp, #84]	; 0x54
   13ae0:	str	ip, [sp, #4]
   13ae4:	ldr	ip, [sp, #104]	; 0x68
   13ae8:	str	ip, [sp, #12]
   13aec:	ldr	ip, [sp, #52]	; 0x34
   13af0:	str	ip, [sp, #16]
   13af4:	mov	r2, r0
   13af8:	mov	r3, r1
   13afc:	ldr	r0, [sp, #48]	; 0x30
   13b00:	mov	r1, r5
   13b04:	bl	34ca4 <__assert_fail@plt+0x224cc>
   13b08:	str	r0, [fp, #12]
   13b0c:	adds	r0, r0, #0
   13b10:	movne	r0, #1
   13b14:	b	13074 <__assert_fail@plt+0x89c>
   13b18:	ldr	r7, [r4, #8]
   13b1c:	mov	r5, r0
   13b20:	b	135fc <__assert_fail@plt+0xe24>
   13b24:	ldr	r7, [sl, #304]	; 0x130
   13b28:	cmp	r7, #0
   13b2c:	movne	r5, #0
   13b30:	bne	13604 <__assert_fail@plt+0xe2c>
   13b34:	mov	r0, sl
   13b38:	ldr	r1, [sp, #32]
   13b3c:	mov	r2, #1
   13b40:	mov	r5, #0
   13b44:	bl	438c0 <__assert_fail@plt+0x310e8>
   13b48:	mov	r7, r0
   13b4c:	b	135fc <__assert_fail@plt+0xe24>
   13b50:	ldr	r1, [sl, #304]	; 0x130
   13b54:	cmp	r1, #0
   13b58:	bne	13b70 <__assert_fail@plt+0x1398>
   13b5c:	ldr	r1, [sp, #32]
   13b60:	mov	r0, sl
   13b64:	mov	r2, #1
   13b68:	bl	438c0 <__assert_fail@plt+0x310e8>
   13b6c:	mov	r1, r0
   13b70:	mov	r2, #0
   13b74:	ldr	r0, [sp, #48]	; 0x30
   13b78:	mov	r3, r2
   13b7c:	bl	34dbc <__assert_fail@plt+0x225e4>
   13b80:	mov	fp, r0
   13b84:	b	13ba8 <__assert_fail@plt+0x13d0>
   13b88:	ldr	r2, [sp, #140]	; 0x8c
   13b8c:	mov	r1, r5
   13b90:	ldr	ip, [sp, #96]	; 0x60
   13b94:	ldr	r0, [sp, #48]	; 0x30
   13b98:	str	r2, [sp]
   13b9c:	ldr	r2, [ip, #8]
   13ba0:	bl	35044 <__assert_fail@plt+0x2286c>
   13ba4:	mov	fp, r0
   13ba8:	cmp	fp, #0
   13bac:	beq	12b04 <__assert_fail@plt+0x32c>
   13bb0:	ldrd	r4, [sp, #168]	; 0xa8
   13bb4:	mov	r2, #3
   13bb8:	mov	r3, #0
   13bbc:	and	r2, r2, r4
   13bc0:	and	r3, r3, r5
   13bc4:	cmp	r3, #0
   13bc8:	cmpeq	r2, #1
   13bcc:	beq	13bf8 <__assert_fail@plt+0x1420>
   13bd0:	bcc	13bec <__assert_fail@plt+0x1414>
   13bd4:	cmp	r3, #0
   13bd8:	cmpeq	r2, #2
   13bdc:	bne	1386c <__assert_fail@plt+0x1094>
   13be0:	mov	ip, #1
   13be4:	str	ip, [sp, #80]	; 0x50
   13be8:	b	13c00 <__assert_fail@plt+0x1428>
   13bec:	mov	r3, #0
   13bf0:	str	r3, [sp, #80]	; 0x50
   13bf4:	b	13c00 <__assert_fail@plt+0x1428>
   13bf8:	mov	r3, #2
   13bfc:	str	r3, [sp, #80]	; 0x50
   13c00:	ldr	r1, [sp, #136]	; 0x88
   13c04:	ubfx	ip, r4, #6, #1
   13c08:	ldr	r0, [sp, #128]	; 0x80
   13c0c:	ubfx	r7, r4, #5, #1
   13c10:	str	ip, [sp, #56]	; 0x38
   13c14:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   13c18:	ldrd	r4, [sp, #168]	; 0xa8
   13c1c:	mov	r8, #4
   13c20:	mov	r9, #0
   13c24:	ldrd	r2, [sp, #160]	; 0xa0
   13c28:	and	r4, r4, r8
   13c2c:	and	r5, r5, r9
   13c30:	orrs	r1, r4, r5
   13c34:	beq	13c78 <__assert_fail@plt+0x14a0>
   13c38:	cmp	r3, #0
   13c3c:	cmpeq	r2, #118	; 0x76
   13c40:	movweq	r1, #43944	; 0xaba8
   13c44:	moveq	r0, #0
   13c48:	movteq	r1, #5
   13c4c:	beq	13944 <__assert_fail@plt+0x116c>
   13c50:	ldr	r3, [sp, #56]	; 0x38
   13c54:	mov	r1, r0
   13c58:	mov	r2, fp
   13c5c:	str	r7, [sp]
   13c60:	ldr	r0, [sp, #48]	; 0x30
   13c64:	str	r3, [sp, #4]
   13c68:	ldr	r3, [sp, #80]	; 0x50
   13c6c:	bl	3527c <__assert_fail@plt+0x22aa4>
   13c70:	mov	fp, r0
   13c74:	b	13cbc <__assert_fail@plt+0x14e4>
   13c78:	cmp	r3, #0
   13c7c:	cmpeq	r2, #118	; 0x76
   13c80:	ldrd	r4, [sp, #176]	; 0xb0
   13c84:	ldr	r3, [sp, #56]	; 0x38
   13c88:	mov	r2, fp
   13c8c:	ldreq	r1, [sp, #96]	; 0x60
   13c90:	movne	ip, #0
   13c94:	ldreq	ip, [r1, #8]
   13c98:	mov	r1, r0
   13c9c:	str	r3, [sp, #4]
   13ca0:	str	r7, [sp]
   13ca4:	ldr	r3, [sp, #80]	; 0x50
   13ca8:	str	ip, [sp, #16]
   13cac:	ldr	r0, [sp, #48]	; 0x30
   13cb0:	strd	r4, [sp, #8]
   13cb4:	bl	35220 <__assert_fail@plt+0x22a48>
   13cb8:	mov	fp, r0
   13cbc:	cmp	fp, #0
   13cc0:	beq	12b04 <__assert_fail@plt+0x32c>
   13cc4:	ldr	ip, [sp, #88]	; 0x58
   13cc8:	mov	r5, #0
   13ccc:	ldr	r9, [sp, #132]	; 0x84
   13cd0:	ldr	r7, [sp, #124]	; 0x7c
   13cd4:	add	r4, ip, #20
   13cd8:	ldr	r8, [sp, #72]	; 0x48
   13cdc:	str	r6, [sp, #56]	; 0x38
   13ce0:	cmp	r5, r8
   13ce4:	sub	r6, r4, #20
   13ce8:	beq	13d1c <__assert_fail@plt+0x1544>
   13cec:	ldr	r3, [r4, #-16]
   13cf0:	cmp	r3, r9
   13cf4:	bne	13d10 <__assert_fail@plt+0x1538>
   13cf8:	ldr	r0, [r4, #-20]	; 0xffffffec
   13cfc:	mov	r1, r7
   13d00:	mov	r2, r9
   13d04:	bl	12784 <strncmp@plt>
   13d08:	cmp	r0, #0
   13d0c:	beq	13d24 <__assert_fail@plt+0x154c>
   13d10:	add	r5, r5, #1
   13d14:	add	r4, r4, #20
   13d18:	b	13ce0 <__assert_fail@plt+0x1508>
   13d1c:	ldr	r6, [sp, #56]	; 0x38
   13d20:	b	13d38 <__assert_fail@plt+0x1560>
   13d24:	ldr	ip, [sp, #72]	; 0x48
   13d28:	mov	r8, r6
   13d2c:	ldr	r6, [sp, #56]	; 0x38
   13d30:	cmp	r5, ip
   13d34:	bcc	13da8 <__assert_fail@plt+0x15d0>
   13d38:	ldr	ip, [sp, #72]	; 0x48
   13d3c:	ldr	r0, [sp, #108]	; 0x6c
   13d40:	cmp	ip, r0
   13d44:	bcc	13d68 <__assert_fail@plt+0x1590>
   13d48:	add	r0, r0, #10
   13d4c:	str	r0, [sp, #108]	; 0x6c
   13d50:	ldr	ip, [sp, #108]	; 0x6c
   13d54:	mov	r1, #20
   13d58:	ldr	r0, [sp, #88]	; 0x58
   13d5c:	mul	r1, r1, ip
   13d60:	bl	122c8 <xrealloc@plt>
   13d64:	str	r0, [sp, #88]	; 0x58
   13d68:	ldr	ip, [sp, #72]	; 0x48
   13d6c:	mov	r2, #20
   13d70:	ldr	r1, [sp, #132]	; 0x84
   13d74:	mov	r3, #0
   13d78:	ldr	r0, [sp, #124]	; 0x7c
   13d7c:	mul	r2, r2, ip
   13d80:	ldr	ip, [sp, #88]	; 0x58
   13d84:	add	r8, ip, r2
   13d88:	ldr	ip, [sp, #72]	; 0x48
   13d8c:	add	ip, ip, #1
   13d90:	str	ip, [sp, #72]	; 0x48
   13d94:	ldr	ip, [sp, #88]	; 0x58
   13d98:	str	r0, [ip, r2]
   13d9c:	stmib	r8, {r1, r3}
   13da0:	str	r3, [r8, #12]
   13da4:	str	r3, [r8, #16]
   13da8:	ldr	r2, [r8, #12]
   13dac:	ldr	r3, [r8, #16]
   13db0:	add	r2, r2, #1
   13db4:	cmp	r2, r3
   13db8:	bcc	13dd4 <__assert_fail@plt+0x15fc>
   13dbc:	add	r1, r3, #10
   13dc0:	ldr	r0, [r8, #8]
   13dc4:	str	r1, [r8, #16]
   13dc8:	lsl	r1, r1, #2
   13dcc:	bl	122c8 <xrealloc@plt>
   13dd0:	str	r0, [r8, #8]
   13dd4:	ldr	r3, [r8, #12]
   13dd8:	mov	r2, #0
   13ddc:	ldr	r1, [r8, #8]
   13de0:	add	r0, r3, #1
   13de4:	str	fp, [r1, r3, lsl #2]
   13de8:	ldr	r1, [r8, #8]
   13dec:	str	r0, [r8, #12]
   13df0:	add	r3, r1, r3, lsl #2
   13df4:	str	r2, [r3, #4]
   13df8:	b	13114 <__assert_fail@plt+0x93c>
   13dfc:	mov	r8, r0
   13e00:	ldr	r1, [r4, #8]
   13e04:	ldr	r0, [sp, #48]	; 0x30
   13e08:	str	r8, [sp, #140]	; 0x8c
   13e0c:	bl	35818 <__assert_fail@plt+0x23040>
   13e10:	cmp	r0, #13
   13e14:	beq	13e2c <__assert_fail@plt+0x1654>
   13e18:	movw	r1, #43864	; 0xab58
   13e1c:	mov	r0, r8
   13e20:	mov	r2, #5
   13e24:	movt	r1, #5
   13e28:	b	13948 <__assert_fail@plt+0x1170>
   13e2c:	ldr	r1, [r4, #8]
   13e30:	ldr	r0, [sp, #48]	; 0x30
   13e34:	bl	358f8 <__assert_fail@plt+0x23120>
   13e38:	ldr	r1, [r4, #8]
   13e3c:	add	r2, sp, #140	; 0x8c
   13e40:	mov	r5, r0
   13e44:	ldr	r0, [sp, #48]	; 0x30
   13e48:	bl	3593c <__assert_fail@plt+0x23164>
   13e4c:	cmp	r5, #0
   13e50:	cmpne	r0, #0
   13e54:	mov	r3, r0
   13e58:	bne	13b88 <__assert_fail@plt+0x13b0>
   13e5c:	movw	r1, #43900	; 0xab7c
   13e60:	mov	r0, r8
   13e64:	mov	r2, #5
   13e68:	movt	r1, #5
   13e6c:	b	13948 <__assert_fail@plt+0x1170>
   13e70:	add	sp, sp, #204	; 0xcc
   13e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e7c:	movw	r7, #65176	; 0xfe98
   13e80:	movt	r7, #6
   13e84:	sub	sp, sp, #36	; 0x24
   13e88:	movw	r8, #3468	; 0xd8c
   13e8c:	movt	r8, #7
   13e90:	ldr	r3, [r7]
   13e94:	movw	r4, #992	; 0x3e0
   13e98:	str	r1, [sp, #16]
   13e9c:	movw	r1, #11856	; 0x2e50
   13ea0:	str	r0, [sp, #20]
   13ea4:	movt	r1, #5
   13ea8:	mov	r0, #5
   13eac:	str	r3, [sp, #28]
   13eb0:	bl	12658 <setlocale@plt>
   13eb4:	mov	r0, #0
   13eb8:	movw	r1, #11856	; 0x2e50
   13ebc:	movt	r1, #5
   13ec0:	mov	r6, r0
   13ec4:	bl	12658 <setlocale@plt>
   13ec8:	movw	r0, #11948	; 0x2eac
   13ecc:	movw	r1, #11960	; 0x2eb8
   13ed0:	movt	r0, #5
   13ed4:	movt	r1, #5
   13ed8:	bl	1270c <bindtextdomain@plt>
   13edc:	movw	r0, #11948	; 0x2eac
   13ee0:	movt	r0, #5
   13ee4:	movw	fp, #2940	; 0xb7c
   13ee8:	bl	122e0 <textdomain@plt>
   13eec:	ldr	r3, [sp, #16]
   13ef0:	mov	sl, r6
   13ef4:	movt	r4, #7
   13ef8:	mov	r5, #1
   13efc:	movt	fp, #7
   13f00:	ldr	r3, [r3]
   13f04:	mov	r0, r3
   13f08:	str	r3, [r8]
   13f0c:	bl	12370 <xmalloc_set_program_name@plt>
   13f10:	ldr	r0, [r8]
   13f14:	bl	12634 <bfd_set_error_program_name@plt>
   13f18:	add	r0, sp, #20
   13f1c:	add	r1, sp, #16
   13f20:	bl	4af88 <warn@@Base+0x1390>
   13f24:	bl	123b8 <bfd_init@plt>
   13f28:	bl	48608 <__assert_fail@plt+0x35e30>
   13f2c:	mov	r3, #0
   13f30:	ldr	r0, [sp, #20]
   13f34:	str	r3, [sp]
   13f38:	movw	r2, #12340	; 0x3034
   13f3c:	ldr	r1, [sp, #16]
   13f40:	movt	r2, #5
   13f44:	ldr	r3, [pc, #2580]	; 14960 <__assert_fail@plt+0x2188>
   13f48:	bl	12490 <getopt_long@plt>
   13f4c:	cmn	r0, #1
   13f50:	beq	14768 <__assert_fail@plt+0x1f90>
   13f54:	cmp	r0, #160	; 0xa0
   13f58:	ldrls	pc, [pc, r0, lsl #2]
   13f5c:	b	14754 <__assert_fail@plt+0x1f7c>
   13f60:	andeq	r3, r1, ip, lsr #30
   13f64:	andeq	r4, r1, r4, asr r7
   13f68:	andeq	r4, r1, r4, asr r7
   13f6c:	andeq	r4, r1, r4, asr r7
   13f70:	andeq	r4, r1, r4, asr r7
   13f74:	andeq	r4, r1, r4, asr r7
   13f78:	andeq	r4, r1, r4, asr r7
   13f7c:	andeq	r4, r1, r4, asr r7
   13f80:	andeq	r4, r1, r4, asr r7
   13f84:	andeq	r4, r1, r4, asr r7
   13f88:	andeq	r4, r1, r4, asr r7
   13f8c:	andeq	r4, r1, r4, asr r7
   13f90:	andeq	r4, r1, r4, asr r7
   13f94:	andeq	r4, r1, r4, asr r7
   13f98:	andeq	r4, r1, r4, asr r7
   13f9c:	andeq	r4, r1, r4, asr r7
   13fa0:	andeq	r4, r1, r4, asr r7
   13fa4:	andeq	r4, r1, r4, asr r7
   13fa8:	andeq	r4, r1, r4, asr r7
   13fac:	andeq	r4, r1, r4, asr r7
   13fb0:	andeq	r4, r1, r4, asr r7
   13fb4:	andeq	r4, r1, r4, asr r7
   13fb8:	andeq	r4, r1, r4, asr r7
   13fbc:	andeq	r4, r1, r4, asr r7
   13fc0:	andeq	r4, r1, r4, asr r7
   13fc4:	andeq	r4, r1, r4, asr r7
   13fc8:	andeq	r4, r1, r4, asr r7
   13fcc:	andeq	r4, r1, r4, asr r7
   13fd0:	andeq	r4, r1, r4, asr r7
   13fd4:	andeq	r4, r1, r4, asr r7
   13fd8:	andeq	r4, r1, r4, asr r7
   13fdc:	andeq	r4, r1, r4, asr r7
   13fe0:	andeq	r4, r1, r4, asr r7
   13fe4:	andeq	r4, r1, r4, asr r7
   13fe8:	andeq	r4, r1, r4, asr r7
   13fec:	andeq	r4, r1, r4, asr r7
   13ff0:	andeq	r4, r1, r4, asr r7
   13ff4:	andeq	r4, r1, r4, asr r7
   13ff8:	andeq	r4, r1, r4, asr r7
   13ffc:	andeq	r4, r1, r4, asr r7
   14000:	andeq	r4, r1, r4, asr r7
   14004:	andeq	r4, r1, r4, asr r7
   14008:	andeq	r4, r1, r4, asr r7
   1400c:	andeq	r4, r1, r4, asr r7
   14010:	andeq	r4, r1, r4, asr r7
   14014:	andeq	r4, r1, r4, asr r7
   14018:	andeq	r4, r1, r4, asr r7
   1401c:	andeq	r4, r1, r4, asr r7
   14020:	andeq	r4, r1, r4, asr r7
   14024:	andeq	r4, r1, r4, asr r7
   14028:	andeq	r4, r1, r4, asr r7
   1402c:	andeq	r4, r1, r4, asr r7
   14030:	andeq	r4, r1, r4, asr r7
   14034:	andeq	r4, r1, r4, asr r7
   14038:	andeq	r4, r1, r4, asr r7
   1403c:	andeq	r4, r1, r4, asr r7
   14040:	andeq	r4, r1, r4, asr r7
   14044:	andeq	r4, r1, r4, asr r7
   14048:	andeq	r4, r1, r4, asr r7
   1404c:	andeq	r4, r1, r4, asr r7
   14050:	andeq	r4, r1, r4, asr r7
   14054:	andeq	r4, r1, r4, asr r7
   14058:	andeq	r4, r1, r4, asr r7
   1405c:	andeq	r4, r1, r4, asr r7
   14060:	andeq	r4, r1, r4, asr r7
   14064:	andeq	r4, r1, r4, asr r7
   14068:	andeq	r4, r1, r4, asr r7
   1406c:	andeq	r4, r1, r8, lsr #14
   14070:	andeq	r4, r1, r8, lsl r7
   14074:			; <UNDEFINED> instruction: 0x000146bc
   14078:			; <UNDEFINED> instruction: 0x000146b4
   1407c:	andeq	r4, r1, r8, lsr #13
   14080:	muleq	r1, r4, r6
   14084:	andeq	r4, r1, r0, asr r6
   14088:	andeq	r4, r1, r4, asr r7
   1408c:	andeq	r4, r1, r4, asr r7
   14090:	andeq	r4, r1, r4, asr r7
   14094:	andeq	r4, r1, r0, lsr #12
   14098:	andeq	r4, r1, r4, asr r7
   1409c:	andeq	r4, r1, r4, asr r7
   140a0:	andeq	r4, r1, r8, lsl #12
   140a4:	andeq	r4, r1, r4, asr r7
   140a8:	strdeq	r4, [r1], -ip
   140ac:	andeq	r4, r1, ip, ror #11
   140b0:	andeq	r4, r1, r0, ror #11
   140b4:	andeq	r4, r1, r4, asr r7
   140b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140bc:			; <UNDEFINED> instruction: 0x000145b0
   140c0:	andeq	r4, r1, r4, asr r7
   140c4:	andeq	r4, r1, r4, asr r7
   140c8:	andeq	r4, r1, r4, asr r7
   140cc:	andeq	r4, r1, r4, asr r7
   140d0:	andeq	r4, r1, r4, asr r7
   140d4:	andeq	r4, r1, r4, asr r7
   140d8:	andeq	r4, r1, r4, asr r7
   140dc:	andeq	r4, r1, r4, asr r7
   140e0:	andeq	r4, r1, r4, asr r7
   140e4:	andeq	r4, r1, r4, lsr #11
   140e8:	muleq	r1, r4, r5
   140ec:	andeq	r4, r1, r4, asr r7
   140f0:	andeq	r4, r1, r8, lsl #11
   140f4:	andeq	r4, r1, r4, ror r5
   140f8:	andeq	r4, r1, r8, ror #10
   140fc:	andeq	r4, r1, ip, asr r5
   14100:	andeq	r4, r1, r0, asr r5
   14104:	andeq	r4, r1, r4, asr #10
   14108:	andeq	r4, r1, ip, ror #9
   1410c:	andeq	r4, r1, r4, asr r7
   14110:	andeq	r4, r1, r4, ror #9
   14114:	ldrdeq	r4, [r1], -r0
   14118:	andeq	r4, r1, r4, asr r7
   1411c:	andeq	r4, r1, r4, asr r7
   14120:	andeq	r4, r1, r4, asr #9
   14124:	andeq	r4, r1, r4, asr r7
   14128:			; <UNDEFINED> instruction: 0x000144b8
   1412c:	andeq	r4, r1, ip, lsr #9
   14130:	andeq	r4, r1, r0, lsr #9
   14134:	andeq	r4, r1, r4, asr r7
   14138:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1413c:	muleq	r1, r8, r4
   14140:	andeq	r4, r1, r8, ror r4
   14144:	andeq	r4, r1, r4, asr r7
   14148:	andeq	r4, r1, r0, ror r4
   1414c:	andeq	r4, r1, r4, asr r7
   14150:	andeq	r4, r1, r4, asr r7
   14154:	andeq	r4, r1, r4, asr r7
   14158:	andeq	r4, r1, r4, asr r7
   1415c:	andeq	r4, r1, r4, asr r7
   14160:	andeq	r4, r1, r4, asr r7
   14164:	andeq	r4, r1, r4, asr r7
   14168:	andeq	r4, r1, r4, asr r7
   1416c:	andeq	r4, r1, r4, asr r7
   14170:	andeq	r4, r1, r4, asr r7
   14174:	andeq	r4, r1, r4, asr r7
   14178:	andeq	r4, r1, r4, asr r7
   1417c:	andeq	r4, r1, r4, asr r7
   14180:	andeq	r4, r1, r4, asr r7
   14184:	andeq	r4, r1, r4, asr r7
   14188:	andeq	r4, r1, r4, asr r7
   1418c:	andeq	r4, r1, r4, asr r7
   14190:	andeq	r4, r1, r4, asr r7
   14194:	andeq	r4, r1, r4, asr r7
   14198:	andeq	r4, r1, r4, asr r7
   1419c:	andeq	r4, r1, r4, asr r7
   141a0:	andeq	r4, r1, r4, asr r7
   141a4:	andeq	r4, r1, r4, asr r7
   141a8:	andeq	r4, r1, r4, asr r7
   141ac:	andeq	r4, r1, r4, asr r7
   141b0:	andeq	r4, r1, r4, asr r7
   141b4:	andeq	r4, r1, r4, asr r7
   141b8:	andeq	r4, r1, r8, lsl #8
   141bc:	andeq	r4, r1, r8, lsr #7
   141c0:	andeq	r4, r1, r8, asr #6
   141c4:	andeq	r4, r1, r4, lsr #6
   141c8:	ldrdeq	r4, [r1], -r8
   141cc:	muleq	r1, ip, r2
   141d0:	andeq	r4, r1, r0, ror #4
   141d4:	andeq	r4, r1, r0, asr #4
   141d8:	andeq	r4, r1, r8, lsl r2
   141dc:	andeq	r4, r1, r0, lsl r2
   141e0:	andeq	r4, r1, r4, ror #3
   141e4:	movw	r3, #984	; 0x3d8
   141e8:	movt	r3, #7
   141ec:	add	r1, sp, #24
   141f0:	mov	r2, #0
   141f4:	ldr	r0, [r3]
   141f8:	bl	124d8 <strtoul@plt>
   141fc:	movw	r3, #3464	; 0xd88
   14200:	movt	r3, #7
   14204:	str	r5, [r4, #84]	; 0x54
   14208:	str	r0, [r3]
   1420c:	b	13f2c <__assert_fail@plt+0x1754>
   14210:	str	r5, [fp]
   14214:	b	13f2c <__assert_fail@plt+0x1754>
   14218:	movw	r3, #984	; 0x3d8
   1421c:	movt	r3, #7
   14220:	add	r1, sp, #24
   14224:	mov	r2, #0
   14228:	ldr	r0, [r3]
   1422c:	bl	124d8 <strtoul@plt>
   14230:	movw	r3, #65168	; 0xfe90
   14234:	movt	r3, #6
   14238:	str	r0, [r3]
   1423c:	b	13f2c <__assert_fail@plt+0x1754>
   14240:	movw	r3, #984	; 0x3d8
   14244:	movt	r3, #7
   14248:	movw	r1, #12016	; 0x2ef0
   1424c:	movt	r1, #5
   14250:	ldr	r0, [r3]
   14254:	bl	48ebc <__assert_fail@plt+0x366e4>
   14258:	strd	r0, [r4, #48]	; 0x30
   1425c:	b	13f2c <__assert_fail@plt+0x1754>
   14260:	movw	r3, #984	; 0x3d8
   14264:	movt	r3, #7
   14268:	mov	r1, #0
   1426c:	ldr	r0, [r3]
   14270:	mov	r2, r1
   14274:	bl	124d8 <strtoul@plt>
   14278:	cmp	r0, #0
   1427c:	str	r0, [r4, #200]	; 0xc8
   14280:	bgt	13f2c <__assert_fail@plt+0x1754>
   14284:	movw	r1, #12228	; 0x2fc4
   14288:	mov	r2, #5
   1428c:	movt	r1, #5
   14290:	mov	r0, #0
   14294:	bl	12298 <dcgettext@plt>
   14298:	bl	4857c <__assert_fail@plt+0x35da4>
   1429c:	movw	r3, #984	; 0x3d8
   142a0:	movt	r3, #7
   142a4:	mov	r1, #0
   142a8:	mov	r2, #10
   142ac:	ldr	r0, [r3]
   142b0:	bl	12184 <strtol@plt>
   142b4:	cmp	r0, #0
   142b8:	str	r0, [r4, #220]	; 0xdc
   142bc:	bge	13f2c <__assert_fail@plt+0x1754>
   142c0:	movw	r1, #12184	; 0x2f98
   142c4:	mov	r2, #5
   142c8:	movt	r1, #5
   142cc:	mov	r0, #0
   142d0:	bl	12298 <dcgettext@plt>
   142d4:	bl	4857c <__assert_fail@plt+0x35da4>
   142d8:	movw	r3, #984	; 0x3d8
   142dc:	movt	r3, #7
   142e0:	ldr	r8, [r3]
   142e4:	mov	r0, r8
   142e8:	str	r8, [r4, #212]	; 0xd4
   142ec:	bl	124e4 <strlen@plt>
   142f0:	sub	r2, r0, #1
   142f4:	str	r0, [r4, #216]	; 0xd8
   142f8:	ldrb	r3, [r8, r2]
   142fc:	cmp	r3, #47	; 0x2f
   14300:	beq	1430c <__assert_fail@plt+0x1b34>
   14304:	b	13f2c <__assert_fail@plt+0x1754>
   14308:	mov	r2, r3
   1430c:	sub	r3, r2, #1
   14310:	ldrb	r1, [r8, r3]
   14314:	cmp	r1, #47	; 0x2f
   14318:	beq	14308 <__assert_fail@plt+0x1b30>
   1431c:	str	r2, [r4, #216]	; 0xd8
   14320:	b	13f2c <__assert_fail@plt+0x1754>
   14324:	movw	r3, #984	; 0x3d8
   14328:	movt	r3, #7
   1432c:	str	r5, [r4, #120]	; 0x78
   14330:	ldr	r0, [r3]
   14334:	cmp	r0, #0
   14338:	beq	148c0 <__assert_fail@plt+0x20e8>
   1433c:	mov	r6, #1
   14340:	bl	2d194 <__assert_fail@plt+0x1a9bc>
   14344:	b	13f2c <__assert_fail@plt+0x1754>
   14348:	movw	r3, #984	; 0x3d8
   1434c:	movt	r3, #7
   14350:	movw	r1, #12108	; 0x2f4c
   14354:	movt	r1, #5
   14358:	ldr	r0, [r3]
   1435c:	mvn	r8, #0
   14360:	bl	48ebc <__assert_fail@plt+0x366e4>
   14364:	movw	ip, #62072	; 0xf278
   14368:	movt	ip, #6
   1436c:	mvn	r9, #0
   14370:	ldrd	r2, [ip]
   14374:	cmp	r3, r9
   14378:	cmpeq	r2, r8
   1437c:	strd	r0, [ip, #8]
   14380:	beq	13f2c <__assert_fail@plt+0x1754>
   14384:	cmp	r1, r3
   14388:	cmpeq	r0, r2
   1438c:	bhi	13f2c <__assert_fail@plt+0x1754>
   14390:	movw	r1, #12124	; 0x2f5c
   14394:	mov	r2, #5
   14398:	movt	r1, #5
   1439c:	mov	r0, #0
   143a0:	bl	12298 <dcgettext@plt>
   143a4:	bl	4857c <__assert_fail@plt+0x35da4>
   143a8:	movw	r3, #984	; 0x3d8
   143ac:	movt	r3, #7
   143b0:	movw	r1, #12032	; 0x2f00
   143b4:	movt	r1, #5
   143b8:	ldr	r0, [r3]
   143bc:	mvn	r8, #0
   143c0:	bl	48ebc <__assert_fail@plt+0x366e4>
   143c4:	movw	ip, #62072	; 0xf278
   143c8:	movt	ip, #6
   143cc:	mvn	r9, #0
   143d0:	ldrd	r2, [ip, #8]
   143d4:	cmp	r3, r9
   143d8:	cmpeq	r2, r8
   143dc:	strd	r0, [ip]
   143e0:	beq	13f2c <__assert_fail@plt+0x1754>
   143e4:	cmp	r1, r3
   143e8:	cmpeq	r0, r2
   143ec:	bcc	13f2c <__assert_fail@plt+0x1754>
   143f0:	movw	r1, #12048	; 0x2f10
   143f4:	mov	r2, #5
   143f8:	movt	r1, #5
   143fc:	mov	r0, #0
   14400:	bl	12298 <dcgettext@plt>
   14404:	bl	4857c <__assert_fail@plt+0x35da4>
   14408:	movw	r8, #984	; 0x3d8
   1440c:	movt	r8, #7
   14410:	ldr	r9, [r8]
   14414:	mov	r0, r9
   14418:	bl	124e4 <strlen@plt>
   1441c:	movw	r1, #12296	; 0x3008
   14420:	movt	r1, #5
   14424:	mov	r3, r0
   14428:	mov	r0, r9
   1442c:	mov	r2, r3
   14430:	str	r3, [sp, #12]
   14434:	bl	12784 <strncmp@plt>
   14438:	ldr	r3, [sp, #12]
   1443c:	cmp	r0, #0
   14440:	beq	1489c <__assert_fail@plt+0x20c4>
   14444:	mov	r0, r9
   14448:	mov	r2, r3
   1444c:	movw	r1, #12300	; 0x300c
   14450:	movt	r1, #5
   14454:	bl	12784 <strncmp@plt>
   14458:	cmp	r0, #0
   1445c:	bne	14910 <__assert_fail@plt+0x2138>
   14460:	movw	r3, #62072	; 0xf278
   14464:	movt	r3, #6
   14468:	str	r5, [r3, #16]
   1446c:	b	13f2c <__assert_fail@plt+0x1754>
   14470:	str	r5, [r4, #204]	; 0xcc
   14474:	b	13f2c <__assert_fail@plt+0x1754>
   14478:	str	r5, [r4, #96]	; 0x60
   1447c:	mov	r6, #1
   14480:	str	r5, [r4, #104]	; 0x68
   14484:	str	r5, [r4, #108]	; 0x6c
   14488:	str	r5, [r4, #92]	; 0x5c
   1448c:	str	r5, [r4, #88]	; 0x58
   14490:	str	r5, [r4, #124]	; 0x7c
   14494:	b	13f2c <__assert_fail@plt+0x1754>
   14498:	str	r5, [r4, #60]	; 0x3c
   1449c:	b	13f2c <__assert_fail@plt+0x1754>
   144a0:	str	r5, [r4, #104]	; 0x68
   144a4:	mov	r6, #1
   144a8:	b	13f2c <__assert_fail@plt+0x1754>
   144ac:	str	r5, [r4, #148]	; 0x94
   144b0:	mov	r6, #1
   144b4:	b	13f2c <__assert_fail@plt+0x1754>
   144b8:	str	r5, [r4, #108]	; 0x6c
   144bc:	mov	r6, #1
   144c0:	b	13f2c <__assert_fail@plt+0x1754>
   144c4:	str	r5, [r4, #96]	; 0x60
   144c8:	mov	r6, #1
   144cc:	b	13f2c <__assert_fail@plt+0x1754>
   144d0:	movw	r3, #984	; 0x3d8
   144d4:	movt	r3, #7
   144d8:	ldr	r3, [r3]
   144dc:	str	r3, [r4, #164]	; 0xa4
   144e0:	b	13f2c <__assert_fail@plt+0x1754>
   144e4:	str	r5, [r4, #32]
   144e8:	b	13f2c <__assert_fail@plt+0x1754>
   144ec:	ldr	r8, [r4, #56]	; 0x38
   144f0:	movw	r3, #984	; 0x3d8
   144f4:	movt	r3, #7
   144f8:	cmp	r8, #0
   144fc:	ldr	r9, [r3]
   14500:	beq	14524 <__assert_fail@plt+0x1d4c>
   14504:	ldr	r0, [r8]
   14508:	mov	r1, r9
   1450c:	bl	12178 <strcmp@plt>
   14510:	cmp	r0, #0
   14514:	beq	13f2c <__assert_fail@plt+0x1754>
   14518:	ldr	r8, [r8, #8]
   1451c:	cmp	r8, #0
   14520:	bne	14504 <__assert_fail@plt+0x1d2c>
   14524:	mov	r0, #12
   14528:	bl	12358 <xmalloc@plt>
   1452c:	ldr	r3, [r4, #56]	; 0x38
   14530:	mov	r2, #0
   14534:	str	r9, [r0]
   14538:	stmib	r0, {r2, r3}
   1453c:	str	r0, [r4, #56]	; 0x38
   14540:	b	13f2c <__assert_fail@plt+0x1754>
   14544:	str	r5, [r4, #240]	; 0xf0
   14548:	mov	r6, #1
   1454c:	b	13f2c <__assert_fail@plt+0x1754>
   14550:	str	r5, [r4, #124]	; 0x7c
   14554:	mov	r6, #1
   14558:	b	13f2c <__assert_fail@plt+0x1754>
   1455c:	str	r5, [r4, #116]	; 0x74
   14560:	mov	r6, #1
   14564:	b	13f2c <__assert_fail@plt+0x1754>
   14568:	str	r5, [r4, #92]	; 0x5c
   1456c:	mov	r6, #1
   14570:	b	13f2c <__assert_fail@plt+0x1754>
   14574:	str	r5, [r4, #116]	; 0x74
   14578:	mov	r6, #1
   1457c:	str	r5, [r4, #80]	; 0x50
   14580:	str	r5, [r4, #12]
   14584:	b	13f2c <__assert_fail@plt+0x1754>
   14588:	str	r5, [r4, #112]	; 0x70
   1458c:	mov	r6, #1
   14590:	b	13f2c <__assert_fail@plt+0x1754>
   14594:	movw	r3, #984	; 0x3d8
   14598:	movt	r3, #7
   1459c:	ldr	sl, [r3]
   145a0:	b	13f2c <__assert_fail@plt+0x1754>
   145a4:	str	r5, [r4, #88]	; 0x58
   145a8:	mov	r6, #1
   145ac:	b	13f2c <__assert_fail@plt+0x1754>
   145b0:	movw	r3, #984	; 0x3d8
   145b4:	movt	r3, #7
   145b8:	str	r5, [r4, #120]	; 0x78
   145bc:	ldr	r0, [r3]
   145c0:	cmp	r0, #0
   145c4:	beq	148c0 <__assert_fail@plt+0x20e8>
   145c8:	mov	r6, #1
   145cc:	bl	2d290 <__assert_fail@plt+0x1aab8>
   145d0:	b	13f2c <__assert_fail@plt+0x1754>
   145d4:	str	r5, [r4, #244]	; 0xf4
   145d8:	mov	r6, #1
   145dc:	b	13f2c <__assert_fail@plt+0x1754>
   145e0:	str	r5, [r4, #128]	; 0x80
   145e4:	mov	r6, #1
   145e8:	b	13f2c <__assert_fail@plt+0x1754>
   145ec:	str	r5, [r4, #112]	; 0x70
   145f0:	mov	r6, #1
   145f4:	str	r5, [r4, #208]	; 0xd0
   145f8:	b	13f2c <__assert_fail@plt+0x1754>
   145fc:	str	r5, [r4, #132]	; 0x84
   14600:	mov	r6, #1
   14604:	b	13f2c <__assert_fail@plt+0x1754>
   14608:	movw	r3, #984	; 0x3d8
   1460c:	movt	r3, #7
   14610:	mov	r6, #1
   14614:	ldr	r3, [r3]
   14618:	str	r3, [r4, #100]	; 0x64
   1461c:	b	13f2c <__assert_fail@plt+0x1754>
   14620:	ldr	r0, [r4, #168]	; 0xa8
   14624:	movw	r3, #984	; 0x3d8
   14628:	movt	r3, #7
   1462c:	cmp	r0, #0
   14630:	beq	148b4 <__assert_fail@plt+0x20dc>
   14634:	ldr	r2, [r3]
   14638:	movw	r1, #11980	; 0x2ecc
   1463c:	mov	r3, #0
   14640:	movt	r1, #5
   14644:	bl	122ec <concat@plt>
   14648:	str	r0, [r4, #168]	; 0xa8
   1464c:	b	13f2c <__assert_fail@plt+0x1754>
   14650:	movw	r3, #984	; 0x3d8
   14654:	movt	r3, #7
   14658:	ldr	r8, [r3]
   1465c:	ldrb	r3, [r8]
   14660:	cmp	r3, #0
   14664:	beq	13f2c <__assert_fail@plt+0x1754>
   14668:	ldr	r1, [r4, #224]	; 0xe0
   1466c:	ldr	r0, [r4, #228]	; 0xe4
   14670:	add	r1, r1, #1
   14674:	str	r1, [r4, #224]	; 0xe0
   14678:	lsl	r1, r1, #2
   1467c:	bl	122c8 <xrealloc@plt>
   14680:	ldr	r3, [r4, #224]	; 0xe0
   14684:	sub	r3, r3, #-1073741823	; 0xc0000001
   14688:	str	r0, [r4, #228]	; 0xe4
   1468c:	str	r8, [r0, r3, lsl #2]
   14690:	b	13f2c <__assert_fail@plt+0x1754>
   14694:	movw	r3, #976	; 0x3d0
   14698:	movt	r3, #7
   1469c:	mov	r1, #0
   146a0:	ldr	r0, [r3]
   146a4:	bl	15114 <__assert_fail@plt+0x293c>
   146a8:	str	r5, [r4, #144]	; 0x90
   146ac:	mov	r6, #1
   146b0:	b	13f2c <__assert_fail@plt+0x1754>
   146b4:	str	r5, [r4, #20]
   146b8:	b	13f2c <__assert_fail@plt+0x1754>
   146bc:	movw	r3, #984	; 0x3d8
   146c0:	movt	r3, #7
   146c4:	ldr	r3, [r3]
   146c8:	ldrb	r2, [r3]
   146cc:	cmp	r2, #66	; 0x42
   146d0:	beq	14880 <__assert_fail@plt+0x20a8>
   146d4:	cmp	r2, #76	; 0x4c
   146d8:	beq	148dc <__assert_fail@plt+0x2104>
   146dc:	movw	r1, #12272	; 0x2ff0
   146e0:	mov	r2, #5
   146e4:	movt	r1, #5
   146e8:	mov	r0, #0
   146ec:	bl	12298 <dcgettext@plt>
   146f0:	bl	48478 <__assert_fail@plt+0x35ca0>
   146f4:	movw	r2, #168	; 0xa8
   146f8:	movt	r2, #7
   146fc:	mov	ip, #1
   14700:	movw	r3, #992	; 0x3e0
   14704:	movt	r3, #7
   14708:	ldr	r0, [r2]
   1470c:	mov	r1, ip
   14710:	str	ip, [r3, #16]
   14714:	bl	15114 <__assert_fail@plt+0x293c>
   14718:	str	r5, [r4, #112]	; 0x70
   1471c:	mov	r6, #1
   14720:	str	r5, [r4, #196]	; 0xc4
   14724:	b	13f2c <__assert_fail@plt+0x1754>
   14728:	movw	r8, #984	; 0x3d8
   1472c:	movt	r8, #7
   14730:	str	r5, [r4, #12]
   14734:	ldr	r0, [r8]
   14738:	cmp	r0, #0
   1473c:	beq	13f2c <__assert_fail@plt+0x1754>
   14740:	bl	12160 <cplus_demangle_name_to_style@plt>
   14744:	cmp	r0, #0
   14748:	beq	14930 <__assert_fail@plt+0x2158>
   1474c:	bl	12214 <cplus_demangle_set_style@plt>
   14750:	b	13f2c <__assert_fail@plt+0x1754>
   14754:	movw	r3, #168	; 0xa8
   14758:	movt	r3, #7
   1475c:	mov	r1, #1
   14760:	ldr	r0, [r3]
   14764:	bl	15114 <__assert_fail@plt+0x293c>
   14768:	movw	r8, #992	; 0x3e0
   1476c:	movt	r8, #7
   14770:	ldr	r3, [r8, #244]	; 0xf4
   14774:	cmp	r3, #0
   14778:	bne	148cc <__assert_fail@plt+0x20f4>
   1477c:	cmp	r6, #0
   14780:	beq	14948 <__assert_fail@plt+0x2170>
   14784:	ldr	r3, [r8, #240]	; 0xf0
   14788:	movw	r4, #992	; 0x3e0
   1478c:	movt	r4, #7
   14790:	cmp	r3, #0
   14794:	bne	148ec <__assert_fail@plt+0x2114>
   14798:	movw	r4, #65184	; 0xfea0
   1479c:	movt	r4, #6
   147a0:	ldr	r2, [sp, #20]
   147a4:	ldr	r3, [r4]
   147a8:	cmp	r3, r2
   147ac:	beq	148f8 <__assert_fail@plt+0x2120>
   147b0:	bge	147ec <__assert_fail@plt+0x2014>
   147b4:	ldr	r0, [sp, #16]
   147b8:	sub	r2, r2, #1
   147bc:	subs	r1, r3, r2
   147c0:	rsbs	r2, r1, #0
   147c4:	adcs	r2, r2, r1
   147c8:	ldr	r0, [r0, r3, lsl #2]
   147cc:	mov	r1, sl
   147d0:	bl	1a658 <__assert_fail@plt+0x7e80>
   147d4:	ldr	r3, [r4]
   147d8:	ldr	r2, [sp, #20]
   147dc:	add	r3, r3, #1
   147e0:	str	r3, [r4]
   147e4:	cmp	r2, r3
   147e8:	bgt	147b4 <__assert_fail@plt+0x1fdc>
   147ec:	ldr	r4, [r8, #56]	; 0x38
   147f0:	cmp	r4, #0
   147f4:	movne	r3, r4
   147f8:	beq	14864 <__assert_fail@plt+0x208c>
   147fc:	ldr	r2, [r3, #4]
   14800:	cmp	r2, #0
   14804:	bne	148ac <__assert_fail@plt+0x20d4>
   14808:	ldr	r3, [r3, #8]
   1480c:	cmp	r3, #0
   14810:	bne	147fc <__assert_fail@plt+0x2024>
   14814:	mov	r6, r3
   14818:	mov	r9, #1
   1481c:	b	14838 <__assert_fail@plt+0x2060>
   14820:	ldr	r5, [r4, #8]
   14824:	mov	r0, r4
   14828:	bl	121f0 <free@plt>
   1482c:	cmp	r5, #0
   14830:	beq	14864 <__assert_fail@plt+0x208c>
   14834:	mov	r4, r5
   14838:	cmp	r6, #0
   1483c:	bne	14820 <__assert_fail@plt+0x2048>
   14840:	mov	r2, #5
   14844:	movw	r1, #12400	; 0x3070
   14848:	mov	r0, r6
   1484c:	movt	r1, #5
   14850:	bl	12298 <dcgettext@plt>
   14854:	ldr	r1, [r4]
   14858:	bl	485b4 <__assert_fail@plt+0x35ddc>
   1485c:	str	r9, [r8, #16]
   14860:	b	14820 <__assert_fail@plt+0x2048>
   14864:	ldr	r2, [sp, #28]
   14868:	ldr	r3, [r7]
   1486c:	ldr	r0, [r8, #16]
   14870:	cmp	r2, r3
   14874:	bne	1495c <__assert_fail@plt+0x2184>
   14878:	add	sp, sp, #36	; 0x24
   1487c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14880:	ldrb	r2, [r3, #1]
   14884:	cmp	r2, #0
   14888:	bne	146dc <__assert_fail@plt+0x1f04>
   1488c:	movw	r3, #62072	; 0xf278
   14890:	movt	r3, #6
   14894:	str	r2, [r3, #16]
   14898:	b	13f2c <__assert_fail@plt+0x1754>
   1489c:	movw	r3, #62072	; 0xf278
   148a0:	movt	r3, #6
   148a4:	str	r0, [r3, #16]
   148a8:	b	13f2c <__assert_fail@plt+0x1754>
   148ac:	mov	r6, #1
   148b0:	b	14818 <__assert_fail@plt+0x2040>
   148b4:	ldr	r3, [r3]
   148b8:	str	r3, [r4, #168]	; 0xa8
   148bc:	b	13f2c <__assert_fail@plt+0x1754>
   148c0:	bl	2d4a8 <__assert_fail@plt+0x1acd0>
   148c4:	mov	r6, #1
   148c8:	b	13f2c <__assert_fail@plt+0x1754>
   148cc:	movw	r0, #12384	; 0x3060
   148d0:	movt	r0, #5
   148d4:	bl	49328 <__assert_fail@plt+0x36b50>
   148d8:	b	1477c <__assert_fail@plt+0x1fa4>
   148dc:	ldrb	r3, [r3, #1]
   148e0:	cmp	r3, #0
   148e4:	beq	14460 <__assert_fail@plt+0x1c88>
   148e8:	b	146dc <__assert_fail@plt+0x1f04>
   148ec:	bl	48838 <__assert_fail@plt+0x36060>
   148f0:	str	r0, [r4, #16]
   148f4:	b	147ec <__assert_fail@plt+0x2014>
   148f8:	mov	r1, sl
   148fc:	movw	r0, #12392	; 0x3068
   14900:	mov	r2, #1
   14904:	movt	r0, #5
   14908:	bl	1a658 <__assert_fail@plt+0x7e80>
   1490c:	b	147ec <__assert_fail@plt+0x2014>
   14910:	mov	r2, #5
   14914:	movw	r1, #12308	; 0x3014
   14918:	mov	r0, #0
   1491c:	movt	r1, #5
   14920:	bl	12298 <dcgettext@plt>
   14924:	ldr	r1, [r8]
   14928:	bl	485b4 <__assert_fail@plt+0x35ddc>
   1492c:	b	146f4 <__assert_fail@plt+0x1f1c>
   14930:	movw	r1, #11984	; 0x2ed0
   14934:	mov	r2, #5
   14938:	movt	r1, #5
   1493c:	bl	12298 <dcgettext@plt>
   14940:	ldr	r1, [r8]
   14944:	bl	4857c <__assert_fail@plt+0x35da4>
   14948:	movw	r3, #168	; 0xa8
   1494c:	movt	r3, #7
   14950:	mov	r1, #2
   14954:	ldr	r0, [r3]
   14958:	bl	15114 <__assert_fail@plt+0x293c>
   1495c:	bl	122b0 <__stack_chk_fail@plt>
   14960:	andeq	pc, r6, ip, lsl #5
   14964:	mov	fp, #0
   14968:	mov	lr, #0
   1496c:	pop	{r1}		; (ldr r1, [sp], #4)
   14970:	mov	r2, sp
   14974:	push	{r2}		; (str r2, [sp, #-4]!)
   14978:	push	{r0}		; (str r0, [sp, #-4]!)
   1497c:	ldr	ip, [pc, #16]	; 14994 <__assert_fail@plt+0x21bc>
   14980:	push	{ip}		; (str ip, [sp, #-4]!)
   14984:	ldr	r0, [pc, #12]	; 14998 <__assert_fail@plt+0x21c0>
   14988:	ldr	r3, [pc, #12]	; 1499c <__assert_fail@plt+0x21c4>
   1498c:	bl	12454 <__libc_start_main@plt>
   14990:	bl	12790 <abort@plt>
   14994:	andeq	r1, r5, r8, lsr r5
   14998:	andeq	r3, r1, r8, ror lr
   1499c:	ldrdeq	r1, [r5], -r4
   149a0:	ldr	r3, [pc, #20]	; 149bc <__assert_fail@plt+0x21e4>
   149a4:	ldr	r2, [pc, #20]	; 149c0 <__assert_fail@plt+0x21e8>
   149a8:	add	r3, pc, r3
   149ac:	ldr	r2, [r3, r2]
   149b0:	cmp	r2, #0
   149b4:	bxeq	lr
   149b8:	b	12478 <__gmon_start__@plt>
   149bc:	andeq	sl, r5, r0, asr r6
   149c0:	andeq	r0, r0, r8, asr r2
   149c4:	push	{r3, lr}
   149c8:	movw	r0, #65176	; 0xfe98
   149cc:	ldr	r3, [pc, #36]	; 149f8 <__assert_fail@plt+0x2220>
   149d0:	movt	r0, #6
   149d4:	rsb	r3, r0, r3
   149d8:	cmp	r3, #6
   149dc:	popls	{r3, pc}
   149e0:	movw	r3, #0
   149e4:	movt	r3, #0
   149e8:	cmp	r3, #0
   149ec:	popeq	{r3, pc}
   149f0:	blx	r3
   149f4:	pop	{r3, pc}
   149f8:	muleq	r6, fp, lr
   149fc:	push	{r3, lr}
   14a00:	movw	r0, #65176	; 0xfe98
   14a04:	movw	r3, #65176	; 0xfe98
   14a08:	movt	r0, #6
   14a0c:	movt	r3, #6
   14a10:	rsb	r3, r0, r3
   14a14:	asr	r3, r3, #2
   14a18:	add	r3, r3, r3, lsr #31
   14a1c:	asrs	r1, r3, #1
   14a20:	popeq	{r3, pc}
   14a24:	movw	r2, #0
   14a28:	movt	r2, #0
   14a2c:	cmp	r2, #0
   14a30:	popeq	{r3, pc}
   14a34:	blx	r2
   14a38:	pop	{r3, pc}
   14a3c:	push	{r4, lr}
   14a40:	movw	r4, #988	; 0x3dc
   14a44:	movt	r4, #7
   14a48:	ldrb	r3, [r4]
   14a4c:	cmp	r3, #0
   14a50:	popne	{r4, pc}
   14a54:	bl	149c4 <__assert_fail@plt+0x21ec>
   14a58:	mov	r3, #1
   14a5c:	strb	r3, [r4]
   14a60:	pop	{r4, pc}
   14a64:	movw	r0, #61172	; 0xeef4
   14a68:	movt	r0, #6
   14a6c:	push	{r3, lr}
   14a70:	ldr	r3, [r0]
   14a74:	cmp	r3, #0
   14a78:	beq	14a90 <__assert_fail@plt+0x22b8>
   14a7c:	movw	r3, #0
   14a80:	movt	r3, #0
   14a84:	cmp	r3, #0
   14a88:	beq	14a90 <__assert_fail@plt+0x22b8>
   14a8c:	blx	r3
   14a90:	pop	{r3, lr}
   14a94:	b	149fc <__assert_fail@plt+0x2224>
   14a98:	push	{r4}		; (str r4, [sp, #-4]!)
   14a9c:	ldr	ip, [r0]
   14aa0:	ldr	r4, [r1]
   14aa4:	ldrd	r0, [ip, #8]
   14aa8:	ldrd	r2, [r4, #8]
   14aac:	cmp	r1, r3
   14ab0:	cmpeq	r0, r2
   14ab4:	bhi	14ad4 <__assert_fail@plt+0x22fc>
   14ab8:	bcc	14ae0 <__assert_fail@plt+0x2308>
   14abc:	cmp	ip, r4
   14ac0:	bhi	14ad4 <__assert_fail@plt+0x22fc>
   14ac4:	movcs	r0, #0
   14ac8:	mvncc	r0, #0
   14acc:	pop	{r4}		; (ldr r4, [sp], #4)
   14ad0:	bx	lr
   14ad4:	mov	r0, #1
   14ad8:	pop	{r4}		; (ldr r4, [sp], #4)
   14adc:	bx	lr
   14ae0:	mvn	r0, #0
   14ae4:	b	14ad8 <__assert_fail@plt+0x2300>
   14ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aec:	movw	r4, #992	; 0x3e0
   14af0:	movt	r4, #7
   14af4:	sub	sp, sp, #76	; 0x4c
   14af8:	ldr	r9, [r4]
   14afc:	str	r4, [sp, #32]
   14b00:	cmp	r9, #0
   14b04:	strd	r0, [sp, #48]	; 0x30
   14b08:	str	r2, [sp, #36]	; 0x24
   14b0c:	str	r3, [sp, #64]	; 0x40
   14b10:	ble	14fa4 <__assert_fail@plt+0x27cc>
   14b14:	ldr	r5, [sp, #36]	; 0x24
   14b18:	mov	fp, #0
   14b1c:	ldr	r6, [sp, #36]	; 0x24
   14b20:	ldr	r7, [sp, #32]
   14b24:	ldr	r5, [r5, #8]
   14b28:	ldr	r6, [r6, #120]	; 0x78
   14b2c:	ldr	r8, [r7, #4]
   14b30:	ldr	r4, [r5, #4]
   14b34:	ldr	ip, [r5]
   14b38:	str	r5, [sp, #40]	; 0x28
   14b3c:	str	r4, [sp, #56]	; 0x38
   14b40:	ldrd	r4, [sp, #48]	; 0x30
   14b44:	str	r6, [sp, #68]	; 0x44
   14b48:	str	ip, [sp, #60]	; 0x3c
   14b4c:	add	r6, fp, #1
   14b50:	add	ip, r9, fp
   14b54:	cmp	r9, r6
   14b58:	asr	ip, ip, #1
   14b5c:	ble	14b98 <__assert_fail@plt+0x23c0>
   14b60:	ldr	r3, [r8, ip, lsl #2]
   14b64:	ldr	r2, [r3, #20]
   14b68:	ldrd	r0, [r3, #8]
   14b6c:	ldrd	r2, [r2, #32]
   14b70:	adds	r2, r2, r0
   14b74:	adc	r3, r3, r1
   14b78:	cmp	r3, r5
   14b7c:	cmpeq	r2, r4
   14b80:	bls	14d40 <__assert_fail@plt+0x2568>
   14b84:	mov	r9, ip
   14b88:	add	ip, r9, fp
   14b8c:	cmp	r9, r6
   14b90:	asr	ip, ip, #1
   14b94:	bgt	14b60 <__assert_fail@plt+0x2388>
   14b98:	cmp	fp, #0
   14b9c:	beq	14d54 <__assert_fail@plt+0x257c>
   14ba0:	add	r1, r8, fp, lsl #2
   14ba4:	b	14bbc <__assert_fail@plt+0x23e4>
   14ba8:	ldr	r3, [ip, #16]
   14bac:	tst	r3, #260	; 0x104
   14bb0:	bne	14bfc <__assert_fail@plt+0x2424>
   14bb4:	subs	fp, fp, #1
   14bb8:	beq	14d54 <__assert_fail@plt+0x257c>
   14bbc:	ldr	r0, [r1]
   14bc0:	rsb	sl, r8, r1
   14bc4:	ldr	ip, [r1, #-4]!
   14bc8:	ldr	r2, [r0, #20]
   14bcc:	ldrd	r6, [r0, #8]
   14bd0:	ldr	r3, [ip, #20]
   14bd4:	ldrd	r4, [r2, #32]
   14bd8:	adds	r4, r4, r6
   14bdc:	ldrd	r2, [r3, #32]
   14be0:	adc	r5, r5, r7
   14be4:	ldrd	r6, [ip, #8]
   14be8:	adds	r2, r2, r6
   14bec:	adc	r3, r3, r7
   14bf0:	cmp	r5, r3
   14bf4:	cmpeq	r4, r2
   14bf8:	beq	14ba8 <__assert_fail@plt+0x23d0>
   14bfc:	cmp	fp, r9
   14c00:	str	sl, [sp, #44]	; 0x2c
   14c04:	bge	150b8 <__assert_fail@plt+0x28e0>
   14c08:	lsl	sl, fp, #2
   14c0c:	mov	r6, fp
   14c10:	str	fp, [sp, #24]
   14c14:	mov	r7, r0
   14c18:	ldr	fp, [sp, #56]	; 0x38
   14c1c:	b	14c34 <__assert_fail@plt+0x245c>
   14c20:	add	r6, r6, #1
   14c24:	add	sl, sl, #4
   14c28:	cmp	r6, r9
   14c2c:	beq	14cb8 <__assert_fail@plt+0x24e0>
   14c30:	ldr	r0, [r8, sl]
   14c34:	ldr	r3, [r7, #20]
   14c38:	ldr	r1, [r0, #20]
   14c3c:	ldrd	r4, [r3, #32]
   14c40:	ldrd	r2, [r0, #8]
   14c44:	strd	r4, [sp]
   14c48:	ldrd	r4, [r1, #32]
   14c4c:	adds	r2, r2, r4
   14c50:	adc	r3, r3, r5
   14c54:	ldrd	r4, [r7, #8]
   14c58:	strd	r2, [sp, #16]
   14c5c:	ldrd	r2, [sp]
   14c60:	adds	r2, r2, r4
   14c64:	adc	r3, r3, r5
   14c68:	ldrd	r4, [sp, #16]
   14c6c:	cmp	r5, r3
   14c70:	cmpeq	r4, r2
   14c74:	bne	14cb8 <__assert_fail@plt+0x24e0>
   14c78:	cmp	fp, r1
   14c7c:	bne	14c20 <__assert_fail@plt+0x2448>
   14c80:	ldr	r7, [sp, #36]	; 0x24
   14c84:	ldr	r3, [r7, #84]	; 0x54
   14c88:	mov	r1, r7
   14c8c:	blx	r3
   14c90:	cmp	r0, #0
   14c94:	bne	1509c <__assert_fail@plt+0x28c4>
   14c98:	ldr	ip, [sp, #32]
   14c9c:	add	r6, r6, #1
   14ca0:	ldr	r4, [sp, #44]	; 0x2c
   14ca4:	cmp	r6, r9
   14ca8:	add	sl, sl, #4
   14cac:	ldr	r8, [ip, #4]
   14cb0:	ldr	r7, [r8, r4]
   14cb4:	bne	14c30 <__assert_fail@plt+0x2458>
   14cb8:	ldr	fp, [sp, #24]
   14cbc:	ldr	r5, [sp, #40]	; 0x28
   14cc0:	ldr	r3, [r5, #8]
   14cc4:	cmp	r3, #0
   14cc8:	bne	15084 <__assert_fail@plt+0x28ac>
   14ccc:	ldr	ip, [sp, #60]	; 0x3c
   14cd0:	ldr	r2, [ip, #40]	; 0x28
   14cd4:	ubfx	r2, r2, #5, #1
   14cd8:	cmp	r2, #0
   14cdc:	beq	14d68 <__assert_fail@plt+0x2590>
   14ce0:	ldr	ip, [sp, #56]	; 0x38
   14ce4:	ldrd	r0, [sp, #48]	; 0x30
   14ce8:	ldrd	r4, [ip, #32]
   14cec:	cmp	r1, r5
   14cf0:	cmpeq	r0, r4
   14cf4:	bcc	14f9c <__assert_fail@plt+0x27c4>
   14cf8:	ldr	r2, [sp, #68]	; 0x44
   14cfc:	ldrd	r0, [ip, #48]	; 0x30
   14d00:	bl	4f48c <warn@@Base+0x5894>
   14d04:	ldr	r3, [r7, #20]
   14d08:	adds	r0, r0, r4
   14d0c:	adc	r1, r1, r5
   14d10:	ldrd	r4, [sp, #48]	; 0x30
   14d14:	cmp	r5, r1
   14d18:	cmpeq	r4, r0
   14d1c:	ldr	r5, [sp, #56]	; 0x38
   14d20:	movcs	r9, #0
   14d24:	movcc	r9, #1
   14d28:	cmp	r3, r5
   14d2c:	beq	14d6c <__assert_fail@plt+0x2594>
   14d30:	cmp	r9, #0
   14d34:	beq	14d6c <__assert_fail@plt+0x2594>
   14d38:	mov	r9, #1
   14d3c:	b	14d90 <__assert_fail@plt+0x25b8>
   14d40:	cmp	r5, r3
   14d44:	cmpeq	r4, r2
   14d48:	mov	fp, ip
   14d4c:	bhi	14b4c <__assert_fail@plt+0x2374>
   14d50:	b	14ba0 <__assert_fail@plt+0x23c8>
   14d54:	mov	r6, #0
   14d58:	ldr	r0, [r8]
   14d5c:	str	r6, [sp, #44]	; 0x2c
   14d60:	mov	fp, r6
   14d64:	b	14c08 <__assert_fail@plt+0x2430>
   14d68:	mov	r9, r2
   14d6c:	mov	r0, r7
   14d70:	ldr	r7, [sp, #36]	; 0x24
   14d74:	ldr	r3, [r7, #84]	; 0x54
   14d78:	mov	r1, r7
   14d7c:	blx	r3
   14d80:	cmp	r0, #0
   14d84:	bne	14eec <__assert_fail@plt+0x2714>
   14d88:	ldr	ip, [sp, #32]
   14d8c:	ldr	r8, [ip, #4]
   14d90:	sub	r6, r6, #1
   14d94:	ldr	r4, [sp, #32]
   14d98:	cmn	r6, #1
   14d9c:	ldr	sl, [r4]
   14da0:	beq	14fe4 <__assert_fail@plt+0x280c>
   14da4:	str	fp, [sp, #60]	; 0x3c
   14da8:	lsl	r7, r6, #2
   14dac:	ldr	fp, [sp, #56]	; 0x38
   14db0:	ldr	r4, [sp, #36]	; 0x24
   14db4:	ldr	r5, [sp, #32]
   14db8:	b	14dd0 <__assert_fail@plt+0x25f8>
   14dbc:	ldr	r8, [r5, #4]
   14dc0:	sub	r6, r6, #1
   14dc4:	sub	r7, r7, #4
   14dc8:	cmn	r6, #1
   14dcc:	beq	14e94 <__assert_fail@plt+0x26bc>
   14dd0:	ldr	r3, [r8, r7]
   14dd4:	mov	r1, r4
   14dd8:	mov	r0, r3
   14ddc:	ldr	r3, [r3, #20]
   14de0:	cmp	r3, fp
   14de4:	beq	14df0 <__assert_fail@plt+0x2618>
   14de8:	cmp	r9, #0
   14dec:	bne	14dc0 <__assert_fail@plt+0x25e8>
   14df0:	ldr	r3, [r4, #84]	; 0x54
   14df4:	blx	r3
   14df8:	cmp	r0, #0
   14dfc:	beq	14dbc <__assert_fail@plt+0x25e4>
   14e00:	ldr	ip, [r5]
   14e04:	lsl	r3, sl, #2
   14e08:	cmp	sl, ip
   14e0c:	str	ip, [sp, #12]
   14e10:	ldr	ip, [r5, #4]
   14e14:	moveq	r3, r7
   14e18:	moveq	sl, r6
   14e1c:	ldr	r0, [ip, r7]
   14e20:	mov	r8, ip
   14e24:	ldr	r2, [ip, r3]
   14e28:	ldr	r0, [r0, #20]
   14e2c:	ldr	r3, [r2, #20]
   14e30:	str	r0, [sp, #8]
   14e34:	ldrd	r0, [r2, #8]
   14e38:	ldrd	r2, [r3, #32]
   14e3c:	strd	r0, [sp, #24]
   14e40:	ldr	r1, [sp, #8]
   14e44:	ldrd	r0, [r1, #32]
   14e48:	strd	r0, [sp, #16]
   14e4c:	ldrd	r0, [sp, #24]
   14e50:	adds	r0, r0, r2
   14e54:	adc	r1, r1, r3
   14e58:	ldr	r3, [ip, r7]
   14e5c:	strd	r0, [sp]
   14e60:	ldrd	r0, [sp, #16]
   14e64:	ldrd	r2, [r3, #8]
   14e68:	adds	r2, r2, r0
   14e6c:	adc	r3, r3, r1
   14e70:	ldrd	r0, [sp]
   14e74:	cmp	r3, r1
   14e78:	cmpeq	r2, r0
   14e7c:	bne	15060 <__assert_fail@plt+0x2888>
   14e80:	mov	sl, r6
   14e84:	sub	r6, r6, #1
   14e88:	cmn	r6, #1
   14e8c:	sub	r7, r7, #4
   14e90:	bne	14dd0 <__assert_fail@plt+0x25f8>
   14e94:	ldr	r4, [sp, #32]
   14e98:	ldr	fp, [sp, #60]	; 0x3c
   14e9c:	ldr	r3, [r4]
   14ea0:	cmp	sl, r3
   14ea4:	beq	14fe4 <__assert_fail@plt+0x280c>
   14ea8:	mov	fp, sl
   14eac:	lsl	r5, sl, #2
   14eb0:	str	r5, [sp, #44]	; 0x2c
   14eb4:	ldr	r7, [sp, #44]	; 0x2c
   14eb8:	ldr	ip, [sp, #56]	; 0x38
   14ebc:	ldr	r0, [r8, r7]
   14ec0:	ldr	r3, [r0, #20]
   14ec4:	cmp	r3, ip
   14ec8:	beq	14ed4 <__assert_fail@plt+0x26fc>
   14ecc:	cmp	r9, #0
   14ed0:	bne	14fa4 <__assert_fail@plt+0x27cc>
   14ed4:	ldr	r4, [sp, #36]	; 0x24
   14ed8:	ldr	r3, [r4, #84]	; 0x54
   14edc:	mov	r1, r4
   14ee0:	blx	r3
   14ee4:	cmp	r0, #0
   14ee8:	beq	14fa4 <__assert_fail@plt+0x27cc>
   14eec:	cmp	r9, #0
   14ef0:	beq	14f18 <__assert_fail@plt+0x2740>
   14ef4:	ldr	r5, [sp, #32]
   14ef8:	ldr	r6, [sp, #44]	; 0x2c
   14efc:	ldr	r3, [r5, #4]
   14f00:	ldr	r0, [r3, r6]
   14f04:	ldr	r4, [sp, #64]	; 0x40
   14f08:	cmp	r4, #0
   14f0c:	strne	fp, [r4]
   14f10:	add	sp, sp, #76	; 0x4c
   14f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f18:	ldr	r7, [sp, #40]	; 0x28
   14f1c:	ldr	r4, [r7, #12]
   14f20:	cmp	r4, #0
   14f24:	beq	15070 <__assert_fail@plt+0x2898>
   14f28:	ldr	r5, [sp, #32]
   14f2c:	ldr	r6, [sp, #44]	; 0x2c
   14f30:	ldr	r3, [r5, #4]
   14f34:	ldr	r0, [r3, r6]
   14f38:	ldrd	r6, [sp, #48]	; 0x30
   14f3c:	ldrd	r2, [r0, #8]
   14f40:	cmp	r3, r7
   14f44:	cmpeq	r2, r6
   14f48:	beq	14f04 <__assert_fail@plt+0x272c>
   14f4c:	ldr	r3, [r0, #16]
   14f50:	tst	r3, #2097152	; 0x200000
   14f54:	bne	14f04 <__assert_fail@plt+0x272c>
   14f58:	ldr	r7, [sp, #40]	; 0x28
   14f5c:	ldr	r5, [pc, #360]	; 150cc <__assert_fail@plt+0x28f4>
   14f60:	ldr	r1, [r7, #16]
   14f64:	ldrd	r6, [sp, #48]	; 0x30
   14f68:	add	r4, r4, r1, lsl #2
   14f6c:	cmp	r1, #0
   14f70:	sub	r1, r1, #1
   14f74:	beq	14f04 <__assert_fail@plt+0x272c>
   14f78:	ldr	ip, [r4, #-4]!
   14f7c:	ldrd	r2, [ip, #8]
   14f80:	cmp	r3, r7
   14f84:	cmpeq	r2, r6
   14f88:	beq	14fb0 <__assert_fail@plt+0x27d8>
   14f8c:	cmp	r7, r3
   14f90:	cmpeq	r6, r2
   14f94:	bls	14f6c <__assert_fail@plt+0x2794>
   14f98:	b	14f04 <__assert_fail@plt+0x272c>
   14f9c:	mov	r9, r3
   14fa0:	b	14d6c <__assert_fail@plt+0x2594>
   14fa4:	mov	r0, #0
   14fa8:	add	sp, sp, #76	; 0x4c
   14fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb0:	ldr	r3, [ip]
   14fb4:	cmp	r3, #0
   14fb8:	beq	14f6c <__assert_fail@plt+0x2794>
   14fbc:	ldr	r3, [r3]
   14fc0:	ldr	r2, [r3, #20]
   14fc4:	cmp	r2, r5
   14fc8:	beq	14f6c <__assert_fail@plt+0x2794>
   14fcc:	ldr	ip, [sp, #64]	; 0x40
   14fd0:	cmp	ip, #0
   14fd4:	beq	150c4 <__assert_fail@plt+0x28ec>
   14fd8:	str	fp, [ip]
   14fdc:	mov	r0, r3
   14fe0:	b	14f10 <__assert_fail@plt+0x2738>
   14fe4:	add	r4, fp, #1
   14fe8:	cmp	r4, sl
   14fec:	bge	14eb4 <__assert_fail@plt+0x26dc>
   14ff0:	lsl	r5, r4, #2
   14ff4:	ldr	r6, [sp, #56]	; 0x38
   14ff8:	ldr	r7, [sp, #36]	; 0x24
   14ffc:	ldr	sl, [sp, #32]
   15000:	b	1501c <__assert_fail@plt+0x2844>
   15004:	ldr	r8, [sl, #4]
   15008:	ldr	r3, [sl]
   1500c:	add	r4, r4, #1
   15010:	add	r5, r5, #4
   15014:	cmp	r3, r4
   15018:	ble	14eb4 <__assert_fail@plt+0x26dc>
   1501c:	ldr	r3, [r8, r5]
   15020:	mov	r1, r7
   15024:	mov	r0, r3
   15028:	ldr	r3, [r3, #20]
   1502c:	cmp	r3, r6
   15030:	beq	1503c <__assert_fail@plt+0x2864>
   15034:	cmp	r9, #0
   15038:	bne	15008 <__assert_fail@plt+0x2830>
   1503c:	ldr	r3, [r7, #84]	; 0x54
   15040:	blx	r3
   15044:	cmp	r0, #0
   15048:	beq	15004 <__assert_fail@plt+0x282c>
   1504c:	ldr	r6, [sp, #32]
   15050:	mov	fp, r4
   15054:	str	r5, [sp, #44]	; 0x2c
   15058:	ldr	r8, [r6, #4]
   1505c:	b	14eb4 <__assert_fail@plt+0x26dc>
   15060:	ldr	fp, [sp, #60]	; 0x3c
   15064:	mov	r8, ip
   15068:	ldr	r3, [sp, #12]
   1506c:	b	14ea0 <__assert_fail@plt+0x26c8>
   15070:	ldr	ip, [sp, #32]
   15074:	ldr	r4, [sp, #44]	; 0x2c
   15078:	ldr	r3, [ip, #4]
   1507c:	ldr	r0, [r3, r4]
   15080:	b	14f04 <__assert_fail@plt+0x272c>
   15084:	ldr	r3, [r7, #20]
   15088:	ldr	r5, [sp, #56]	; 0x38
   1508c:	cmp	r3, r5
   15090:	moveq	r9, #1
   15094:	bne	14d38 <__assert_fail@plt+0x2560>
   15098:	b	14d6c <__assert_fail@plt+0x2594>
   1509c:	ldr	r5, [sp, #64]	; 0x40
   150a0:	cmp	r5, #0
   150a4:	strne	r6, [r5]
   150a8:	ldr	r6, [sp, #32]
   150ac:	ldr	r3, [r6, #4]
   150b0:	ldr	r0, [r3, sl]
   150b4:	b	14f10 <__assert_fail@plt+0x2738>
   150b8:	mov	r7, r0
   150bc:	mov	r6, fp
   150c0:	b	14cbc <__assert_fail@plt+0x24e4>
   150c4:	mov	r0, r3
   150c8:	b	14f10 <__assert_fail@plt+0x2738>
   150cc:	andeq	r0, r7, r0, asr #4
   150d0:	push	{r3, r4, r5, lr}
   150d4:	mov	r3, #0
   150d8:	mov	r4, r0
   150dc:	mov	r5, r1
   150e0:	bl	14ae8 <__assert_fail@plt+0x2310>
   150e4:	cmp	r0, #0
   150e8:	popeq	{r3, r4, r5, pc}
   150ec:	ldr	r3, [r0, #20]
   150f0:	ldrd	r0, [r0, #8]
   150f4:	ldrd	r2, [r3, #32]
   150f8:	adds	r2, r2, r0
   150fc:	adc	r3, r3, r1
   15100:	cmp	r5, r3
   15104:	cmpeq	r4, r2
   15108:	movne	r0, #0
   1510c:	moveq	r0, #1
   15110:	pop	{r3, r4, r5, pc}
   15114:	push	{r4, r5, r6, lr}
   15118:	mov	r2, #5
   1511c:	mov	r4, r0
   15120:	mov	r6, r1
   15124:	mov	r0, #0
   15128:	movw	r1, #5452	; 0x154c
   1512c:	movt	r1, #5
   15130:	movw	r5, #3468	; 0xd8c
   15134:	bl	12298 <dcgettext@plt>
   15138:	movt	r5, #7
   1513c:	mov	r1, #1
   15140:	ldr	r3, [r5]
   15144:	mov	r2, r0
   15148:	mov	r0, r4
   1514c:	bl	125d4 <__fprintf_chk@plt>
   15150:	mov	r2, #5
   15154:	movw	r1, #5488	; 0x1570
   15158:	mov	r0, #0
   1515c:	movt	r1, #5
   15160:	bl	12298 <dcgettext@plt>
   15164:	mov	r1, #1
   15168:	mov	r2, r0
   1516c:	mov	r0, r4
   15170:	bl	125d4 <__fprintf_chk@plt>
   15174:	mov	r2, #5
   15178:	movw	r1, #5536	; 0x15a0
   1517c:	mov	r0, #0
   15180:	movt	r1, #5
   15184:	bl	12298 <dcgettext@plt>
   15188:	mov	r1, #1
   1518c:	mov	r2, r0
   15190:	mov	r0, r4
   15194:	bl	125d4 <__fprintf_chk@plt>
   15198:	mov	r2, #5
   1519c:	movw	r1, #5592	; 0x15d8
   151a0:	mov	r0, #0
   151a4:	movt	r1, #5
   151a8:	bl	12298 <dcgettext@plt>
   151ac:	mov	r1, #1
   151b0:	mov	r2, r0
   151b4:	mov	r0, r4
   151b8:	bl	125d4 <__fprintf_chk@plt>
   151bc:	cmp	r6, #2
   151c0:	beq	15284 <__assert_fail@plt+0x2aac>
   151c4:	mov	r2, #5
   151c8:	movw	r1, #7364	; 0x1cc4
   151cc:	mov	r0, #0
   151d0:	movt	r1, #5
   151d4:	bl	12298 <dcgettext@plt>
   151d8:	mov	r1, #1
   151dc:	mov	r2, r0
   151e0:	mov	r0, r4
   151e4:	bl	125d4 <__fprintf_chk@plt>
   151e8:	mov	r2, #5
   151ec:	movw	r1, #7404	; 0x1cec
   151f0:	mov	r0, #0
   151f4:	movt	r1, #5
   151f8:	bl	12298 <dcgettext@plt>
   151fc:	mov	r1, #1
   15200:	mov	r2, r0
   15204:	mov	r0, r4
   15208:	bl	125d4 <__fprintf_chk@plt>
   1520c:	mov	r2, #5
   15210:	movw	r1, #9276	; 0x243c
   15214:	mov	r0, #0
   15218:	movt	r1, #5
   1521c:	bl	12298 <dcgettext@plt>
   15220:	mov	r1, #1
   15224:	mov	r2, r0
   15228:	mov	r0, r4
   1522c:	bl	125d4 <__fprintf_chk@plt>
   15230:	ldr	r0, [r5]
   15234:	mov	r1, r4
   15238:	bl	486e0 <__assert_fail@plt+0x35f08>
   1523c:	ldr	r0, [r5]
   15240:	mov	r1, r4
   15244:	bl	4878c <__assert_fail@plt+0x35fb4>
   15248:	mov	r0, r4
   1524c:	bl	12430 <disassembler_usage@plt>
   15250:	cmp	r6, #0
   15254:	bne	15284 <__assert_fail@plt+0x2aac>
   15258:	mov	r2, #5
   1525c:	movw	r1, #9552	; 0x2550
   15260:	mov	r0, r6
   15264:	movt	r1, #5
   15268:	bl	12298 <dcgettext@plt>
   1526c:	movw	r3, #9572	; 0x2564
   15270:	mov	r1, #1
   15274:	movt	r3, #5
   15278:	mov	r2, r0
   1527c:	mov	r0, r4
   15280:	bl	125d4 <__fprintf_chk@plt>
   15284:	mov	r0, r6
   15288:	bl	124a8 <exit@plt>
   1528c:	push	{r4, r5, r6, lr}
   15290:	movw	r5, #65176	; 0xfe98
   15294:	movt	r5, #6
   15298:	sub	sp, sp, #16
   1529c:	movw	r4, #992	; 0x3e0
   152a0:	movt	r4, #7
   152a4:	ldr	r3, [r5]
   152a8:	mov	r6, #0
   152ac:	str	r1, [sp]
   152b0:	movw	r1, #33756	; 0x83dc
   152b4:	str	r2, [sp, #4]
   152b8:	movt	r1, #1
   152bc:	mov	r2, sp
   152c0:	str	r3, [sp, #12]
   152c4:	str	r6, [sp, #8]
   152c8:	bl	12754 <bfd_map_over_sections@plt>
   152cc:	ldr	r0, [r4, #8]
   152d0:	bl	121f0 <free@plt>
   152d4:	ldr	r2, [sp, #12]
   152d8:	ldr	r3, [r5]
   152dc:	str	r6, [r4, #8]
   152e0:	cmp	r2, r3
   152e4:	bne	152f0 <__assert_fail@plt+0x2b18>
   152e8:	add	sp, sp, #16
   152ec:	pop	{r4, r5, r6, pc}
   152f0:	bl	122b0 <__stack_chk_fail@plt>
   152f4:	movw	r3, #992	; 0x3e0
   152f8:	movt	r3, #7
   152fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   15300:	movw	r4, #65176	; 0xfe98
   15304:	movt	r4, #6
   15308:	ldr	r8, [r3, #12]
   1530c:	sub	sp, sp, #12
   15310:	mov	r6, r2
   15314:	ldr	r3, [r4]
   15318:	cmp	r8, #0
   1531c:	ldr	r9, [r2, #4]
   15320:	mov	r5, r1
   15324:	mov	r2, #0
   15328:	mov	r7, r0
   1532c:	str	r3, [sp, #4]
   15330:	str	r2, [sp]
   15334:	beq	15344 <__assert_fail@plt+0x2b6c>
   15338:	ldrb	r8, [r9]
   1533c:	cmp	r8, r2
   15340:	bne	15414 <__assert_fail@plt+0x2c3c>
   15344:	ldr	r3, [r6, #16]
   15348:	tst	r3, #2097152	; 0x200000
   1534c:	movne	r7, #0
   15350:	beq	153f4 <__assert_fail@plt+0x2c1c>
   15354:	ldr	r3, [pc, #292]	; 15480 <__assert_fail@plt+0x2ca8>
   15358:	movw	r1, #44884	; 0xaf54
   1535c:	ldr	r2, [r6, #20]
   15360:	cmp	r2, r3
   15364:	mov	r2, r9
   15368:	moveq	r3, #1
   1536c:	streq	r3, [sp]
   15370:	cmp	r5, #0
   15374:	beq	15430 <__assert_fail@plt+0x2c58>
   15378:	ldr	r3, [r5]
   1537c:	movt	r1, #5
   15380:	ldr	r0, [r5, #4]
   15384:	blx	r3
   15388:	cmp	r7, #0
   1538c:	beq	1539c <__assert_fail@plt+0x2bc4>
   15390:	ldrb	r3, [r7]
   15394:	cmp	r3, #0
   15398:	bne	153c4 <__assert_fail@plt+0x2bec>
   1539c:	cmp	r8, #0
   153a0:	beq	153ac <__assert_fail@plt+0x2bd4>
   153a4:	mov	r0, r8
   153a8:	bl	121f0 <free@plt>
   153ac:	ldr	r2, [sp, #4]
   153b0:	ldr	r3, [r4]
   153b4:	cmp	r2, r3
   153b8:	bne	1547c <__assert_fail@plt+0x2ca4>
   153bc:	add	sp, sp, #12
   153c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153c4:	ldr	r0, [sp]
   153c8:	movw	r3, #9612	; 0x258c
   153cc:	movt	r3, #5
   153d0:	movw	r1, #9616	; 0x2590
   153d4:	cmp	r0, #0
   153d8:	movt	r1, #5
   153dc:	mov	r2, r7
   153e0:	ldr	r0, [r5, #4]
   153e4:	movne	r1, r3
   153e8:	ldr	r3, [r5]
   153ec:	blx	r3
   153f0:	b	1539c <__assert_fail@plt+0x2bc4>
   153f4:	ldr	r3, [r7, #4]
   153f8:	mov	r0, r7
   153fc:	mov	r1, r6
   15400:	mov	r2, sp
   15404:	ldr	r3, [r3, #280]	; 0x118
   15408:	blx	r3
   1540c:	mov	r7, r0
   15410:	b	15354 <__assert_fail@plt+0x2b7c>
   15414:	mov	r1, r9
   15418:	mov	r2, #3
   1541c:	bl	1264c <bfd_demangle@plt>
   15420:	cmp	r0, #0
   15424:	mov	r8, r0
   15428:	movne	r9, r0
   1542c:	b	15344 <__assert_fail@plt+0x2b6c>
   15430:	mov	r0, #1
   15434:	movt	r1, #5
   15438:	bl	125bc <__printf_chk@plt>
   1543c:	cmp	r7, #0
   15440:	beq	1539c <__assert_fail@plt+0x2bc4>
   15444:	ldrb	r3, [r7]
   15448:	cmp	r3, #0
   1544c:	beq	1539c <__assert_fail@plt+0x2bc4>
   15450:	ldr	r0, [sp]
   15454:	movw	r3, #9612	; 0x258c
   15458:	movt	r3, #5
   1545c:	movw	r1, #9616	; 0x2590
   15460:	cmp	r0, #0
   15464:	movt	r1, #5
   15468:	mov	r2, r7
   1546c:	mov	r0, #1
   15470:	movne	r1, r3
   15474:	bl	125bc <__printf_chk@plt>
   15478:	b	1539c <__assert_fail@plt+0x2bc4>
   1547c:	bl	122b0 <__stack_chk_fail@plt>
   15480:	andeq	r0, r7, r8, ror r1
   15484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15488:	sub	sp, sp, #20
   1548c:	mov	r8, r2
   15490:	mov	r9, r0
   15494:	mov	sl, r1
   15498:	bl	123a0 <bfd_get_section_by_name@plt>
   1549c:	subs	r4, r0, #0
   154a0:	beq	15548 <__assert_fail@plt+0x2d70>
   154a4:	ldr	r6, [r4, #48]	; 0x30
   154a8:	mov	r5, #0
   154ac:	ldr	r7, [r4, #52]	; 0x34
   154b0:	mov	r0, r6
   154b4:	bl	12358 <xmalloc@plt>
   154b8:	mov	r1, r4
   154bc:	str	r6, [sp, #8]
   154c0:	mov	r4, #0
   154c4:	str	r7, [sp, #12]
   154c8:	strd	r4, [sp]
   154cc:	mov	r2, r0
   154d0:	mov	fp, r0
   154d4:	mov	r0, r9
   154d8:	bl	1228c <bfd_get_section_contents@plt>
   154dc:	subs	r4, r0, #0
   154e0:	beq	154f4 <__assert_fail@plt+0x2d1c>
   154e4:	mov	r0, fp
   154e8:	stm	r8, {r6, r7}
   154ec:	add	sp, sp, #20
   154f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154f4:	mov	r2, #5
   154f8:	movw	r1, #9648	; 0x25b0
   154fc:	movt	r1, #5
   15500:	bl	12298 <dcgettext@plt>
   15504:	ldr	r5, [r9]
   15508:	mov	r6, r0
   1550c:	bl	12310 <bfd_get_error@plt>
   15510:	bl	126e8 <bfd_errmsg@plt>
   15514:	mov	r1, sl
   15518:	mov	r2, r5
   1551c:	mov	r3, r0
   15520:	mov	r0, r6
   15524:	bl	485b4 <__assert_fail@plt+0x35ddc>
   15528:	movw	r3, #992	; 0x3e0
   1552c:	movt	r3, #7
   15530:	mov	r0, fp
   15534:	mov	r2, #1
   15538:	str	r2, [r3, #16]
   1553c:	bl	121f0 <free@plt>
   15540:	mov	r0, r4
   15544:	b	154ec <__assert_fail@plt+0x2d14>
   15548:	mov	r2, #5
   1554c:	movw	r1, #9624	; 0x2598
   15550:	movt	r1, #5
   15554:	bl	12298 <dcgettext@plt>
   15558:	mov	r2, sl
   1555c:	mov	r1, r0
   15560:	mov	r0, #1
   15564:	bl	125bc <__printf_chk@plt>
   15568:	mov	r0, r4
   1556c:	b	154ec <__assert_fail@plt+0x2d14>
   15570:	push	{r4, r5, r6, r7, r8, lr}
   15574:	movw	r6, #65176	; 0xfe98
   15578:	movt	r6, #6
   1557c:	mov	r7, r2
   15580:	ldr	r2, [r2, #8]
   15584:	sub	sp, sp, #40	; 0x28
   15588:	ldr	ip, [r6]
   1558c:	mov	r4, r0
   15590:	mov	r8, r3
   15594:	mov	r3, r1
   15598:	ldr	r0, [r2]
   1559c:	add	r1, sp, #4
   155a0:	mov	r2, r4
   155a4:	str	ip, [sp, #36]	; 0x24
   155a8:	bl	126b8 <bfd_sprintf_vma@plt>
   155ac:	cmp	r8, #0
   155b0:	addeq	r2, sp, #4
   155b4:	beq	155e0 <__assert_fail@plt+0x2e08>
   155b8:	ldrb	r1, [sp, #4]
   155bc:	cmp	r1, #48	; 0x30
   155c0:	bne	1560c <__assert_fail@plt+0x2e34>
   155c4:	add	r3, sp, #5
   155c8:	mov	r2, r3
   155cc:	ldrb	r1, [r3], #1
   155d0:	cmp	r1, #48	; 0x30
   155d4:	beq	155c8 <__assert_fail@plt+0x2df0>
   155d8:	cmp	r1, #0
   155dc:	subeq	r2, r2, #1
   155e0:	ldr	r3, [r7]
   155e4:	movw	r1, #44884	; 0xaf54
   155e8:	ldr	r0, [r7, #4]
   155ec:	movt	r1, #5
   155f0:	blx	r3
   155f4:	ldr	r2, [sp, #36]	; 0x24
   155f8:	ldr	r3, [r6]
   155fc:	cmp	r2, r3
   15600:	bne	15614 <__assert_fail@plt+0x2e3c>
   15604:	add	sp, sp, #40	; 0x28
   15608:	pop	{r4, r5, r6, r7, r8, pc}
   1560c:	add	r2, sp, #4
   15610:	b	155d8 <__assert_fail@plt+0x2e00>
   15614:	bl	122b0 <__stack_chk_fail@plt>
   15618:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1561c:	mov	r9, r2
   15620:	ldrd	r6, [sp, #40]	; 0x28
   15624:	mov	sl, r0
   15628:	ldr	r8, [sp, #48]	; 0x30
   1562c:	mov	fp, r1
   15630:	ldr	r3, [sp, #52]	; 0x34
   15634:	mov	r0, r6
   15638:	mov	r1, r7
   1563c:	mov	r2, r8
   15640:	bl	15570 <__assert_fail@plt+0x2d98>
   15644:	cmp	r9, #0
   15648:	beq	1579c <__assert_fail@plt+0x2fc4>
   1564c:	ldr	r3, [r8]
   15650:	movw	r1, #9700	; 0x25e4
   15654:	ldr	r0, [r8, #4]
   15658:	movt	r1, #5
   1565c:	blx	r3
   15660:	mov	r0, sl
   15664:	mov	r1, r8
   15668:	mov	r2, r9
   1566c:	bl	152f4 <__assert_fail@plt+0x2b1c>
   15670:	ldr	r3, [r9, #20]
   15674:	ldrd	r0, [r9, #8]
   15678:	ldrd	r4, [r3, #32]
   1567c:	adds	r4, r4, r0
   15680:	adc	r5, r5, r1
   15684:	cmp	r5, r7
   15688:	cmpeq	r4, r6
   1568c:	beq	156bc <__assert_fail@plt+0x2ee4>
   15690:	ldr	r2, [sl, #40]	; 0x28
   15694:	ubfx	r2, r2, #5, #20
   15698:	tst	r2, #66	; 0x42
   1569c:	beq	156ac <__assert_fail@plt+0x2ed4>
   156a0:	ldr	r2, [pc, #392]	; 15830 <__assert_fail@plt+0x3058>
   156a4:	cmp	r3, r2
   156a8:	beq	156bc <__assert_fail@plt+0x2ee4>
   156ac:	cmp	r7, r5
   156b0:	cmpeq	r6, r4
   156b4:	bcc	1571c <__assert_fail@plt+0x2f44>
   156b8:	bhi	1575c <__assert_fail@plt+0x2f84>
   156bc:	ldr	r3, [r8]
   156c0:	movw	r1, #23032	; 0x59f8
   156c4:	ldr	r0, [r8, #4]
   156c8:	movt	r1, #5
   156cc:	blx	r3
   156d0:	movw	r3, #992	; 0x3e0
   156d4:	movt	r3, #7
   156d8:	ldr	r3, [r3, #20]
   156dc:	cmp	r3, #0
   156e0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e4:	mov	r2, #5
   156e8:	movw	r1, #9704	; 0x25e8
   156ec:	mov	r0, #0
   156f0:	movt	r1, #5
   156f4:	ldm	r8, {r4, r5}
   156f8:	bl	12298 <dcgettext@plt>
   156fc:	ldr	r2, [fp, #112]	; 0x70
   15700:	ldr	r3, [fp, #32]
   15704:	rsb	r2, r3, r2
   15708:	add	r2, r2, r6
   1570c:	mov	r1, r0
   15710:	mov	r0, r5
   15714:	blx	r4
   15718:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1571c:	ldr	r3, [r8]
   15720:	movw	r1, #9692	; 0x25dc
   15724:	ldr	r0, [r8, #4]
   15728:	movt	r1, #5
   1572c:	blx	r3
   15730:	ldr	r1, [r9, #20]
   15734:	ldrd	r4, [r9, #8]
   15738:	mov	r2, r8
   1573c:	mov	r3, #1
   15740:	ldrd	r0, [r1, #32]
   15744:	adds	r0, r0, r4
   15748:	adc	r1, r1, r5
   1574c:	subs	r0, r0, r6
   15750:	sbc	r1, r1, r7
   15754:	bl	15570 <__assert_fail@plt+0x2d98>
   15758:	b	156bc <__assert_fail@plt+0x2ee4>
   1575c:	ldr	r3, [r8]
   15760:	movw	r1, #9696	; 0x25e0
   15764:	ldr	r0, [r8, #4]
   15768:	movt	r1, #5
   1576c:	blx	r3
   15770:	ldr	ip, [r9, #20]
   15774:	ldrd	r0, [r9, #8]
   15778:	mov	r2, r8
   1577c:	mov	r3, #1
   15780:	ldrd	r4, [ip, #32]
   15784:	adds	r0, r0, r4
   15788:	adc	r1, r1, r5
   1578c:	subs	r0, r6, r0
   15790:	sbc	r1, r7, r1
   15794:	bl	15570 <__assert_fail@plt+0x2d98>
   15798:	b	156bc <__assert_fail@plt+0x2ee4>
   1579c:	movw	r1, #9684	; 0x25d4
   157a0:	ldr	r3, [r8]
   157a4:	movt	r1, #5
   157a8:	ldr	r0, [r8, #4]
   157ac:	ldr	r2, [fp]
   157b0:	blx	r3
   157b4:	ldrd	r4, [fp, #32]
   157b8:	cmp	r7, r5
   157bc:	cmpeq	r6, r4
   157c0:	bcc	157fc <__assert_fail@plt+0x3024>
   157c4:	bls	156bc <__assert_fail@plt+0x2ee4>
   157c8:	ldr	r3, [r8]
   157cc:	movw	r1, #9696	; 0x25e0
   157d0:	ldr	r0, [r8, #4]
   157d4:	movt	r1, #5
   157d8:	blx	r3
   157dc:	mov	r0, r6
   157e0:	mov	r1, r7
   157e4:	mov	r2, r8
   157e8:	subs	r0, r0, r4
   157ec:	sbc	r1, r1, r5
   157f0:	mov	r3, #1
   157f4:	bl	15570 <__assert_fail@plt+0x2d98>
   157f8:	b	156bc <__assert_fail@plt+0x2ee4>
   157fc:	ldr	r3, [r8]
   15800:	movw	r1, #9692	; 0x25dc
   15804:	ldr	r0, [r8, #4]
   15808:	movt	r1, #5
   1580c:	blx	r3
   15810:	mov	r0, r4
   15814:	mov	r1, r5
   15818:	mov	r2, r8
   1581c:	subs	r0, r0, r6
   15820:	sbc	r1, r1, r7
   15824:	mov	r3, #1
   15828:	bl	15570 <__assert_fail@plt+0x2d98>
   1582c:	b	156bc <__assert_fail@plt+0x2ee4>
   15830:	andeq	r0, r7, r8, ror r1
   15834:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15838:	movw	r6, #992	; 0x3e0
   1583c:	movt	r6, #7
   15840:	mov	sl, r2
   15844:	sub	sp, sp, #24
   15848:	mov	r4, r0
   1584c:	ldr	r2, [r6]
   15850:	mov	r5, r1
   15854:	mov	r8, r3
   15858:	ldr	fp, [sl, #8]
   1585c:	cmp	r2, #0
   15860:	ble	158e4 <__assert_fail@plt+0x310c>
   15864:	ldr	r3, [fp, #24]
   15868:	cmp	r3, #0
   1586c:	beq	158b0 <__assert_fail@plt+0x30d8>
   15870:	ldr	r3, [r3]
   15874:	cmp	r3, #0
   15878:	beq	158b0 <__assert_fail@plt+0x30d8>
   1587c:	ldr	r2, [r3]
   15880:	cmp	r2, #0
   15884:	beq	158b0 <__assert_fail@plt+0x30d8>
   15888:	ldr	r3, [r2, #20]
   1588c:	ldrd	r6, [r2, #8]
   15890:	ldr	ip, [pc, #188]	; 15954 <__assert_fail@plt+0x317c>
   15894:	ldrd	r0, [r3, #32]
   15898:	adds	r0, r0, r6
   1589c:	adc	r1, r1, r7
   158a0:	adds	r4, r4, r0
   158a4:	adc	r5, r5, r1
   158a8:	cmp	r3, ip
   158ac:	beq	158c8 <__assert_fail@plt+0x30f0>
   158b0:	mov	r2, sl
   158b4:	mov	r0, r4
   158b8:	mov	r1, r5
   158bc:	mov	r3, #0
   158c0:	bl	14ae8 <__assert_fail@plt+0x2310>
   158c4:	mov	r2, r0
   158c8:	ldm	fp, {r0, r1}
   158cc:	strd	r4, [sp]
   158d0:	str	sl, [sp, #8]
   158d4:	str	r8, [sp, #12]
   158d8:	bl	15618 <__assert_fail@plt+0x2e40>
   158dc:	add	sp, sp, #24
   158e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158e4:	ldr	r3, [sl]
   158e8:	movw	r1, #9728	; 0x2600
   158ec:	ldr	r0, [sl, #4]
   158f0:	movt	r1, #5
   158f4:	blx	r3
   158f8:	mov	r3, r8
   158fc:	mov	r0, r4
   15900:	mov	r1, r5
   15904:	mov	r2, sl
   15908:	bl	15570 <__assert_fail@plt+0x2d98>
   1590c:	ldr	r3, [r6, #20]
   15910:	cmp	r3, #0
   15914:	beq	158dc <__assert_fail@plt+0x3104>
   15918:	mov	r2, #5
   1591c:	movw	r1, #9704	; 0x25e8
   15920:	mov	r0, #0
   15924:	movt	r1, #5
   15928:	ldm	sl, {r5, r6}
   1592c:	bl	12298 <dcgettext@plt>
   15930:	ldr	r3, [fp, #4]
   15934:	ldr	r2, [r3, #112]	; 0x70
   15938:	ldr	r3, [r3, #32]
   1593c:	rsb	r2, r3, r2
   15940:	add	r2, r2, r4
   15944:	mov	r1, r0
   15948:	mov	r0, r6
   1594c:	blx	r5
   15950:	b	158dc <__assert_fail@plt+0x3104>
   15954:	andeq	r0, r7, r8, ror r1
   15958:	movw	r3, #992	; 0x3e0
   1595c:	movt	r3, #7
   15960:	ldr	r3, [r3, #24]
   15964:	rsbs	r3, r3, #1
   15968:	movcc	r3, #0
   1596c:	b	15834 <__assert_fail@plt+0x305c>
   15970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15974:	movw	r4, #992	; 0x3e0
   15978:	movt	r4, #7
   1597c:	sub	sp, sp, #148	; 0x94
   15980:	movw	r5, #65176	; 0xfe98
   15984:	movt	r5, #6
   15988:	ldr	ip, [r4, #28]
   1598c:	mov	fp, r2
   15990:	str	r1, [sp, #60]	; 0x3c
   15994:	mov	r7, r3
   15998:	ldr	r1, [r5]
   1599c:	cmp	ip, #0
   159a0:	str	r4, [sp, #52]	; 0x34
   159a4:	mov	r8, r0
   159a8:	str	r5, [sp, #56]	; 0x38
   159ac:	movne	r2, ip
   159b0:	str	r1, [sp, #140]	; 0x8c
   159b4:	beq	15e4c <__assert_fail@plt+0x3674>
   159b8:	mov	r0, #12
   159bc:	movw	r3, #11856	; 0x2e50
   159c0:	str	r0, [sp]
   159c4:	movt	r3, #5
   159c8:	movw	r1, #9764	; 0x2624
   159cc:	str	r3, [sp, #4]
   159d0:	movt	r1, #5
   159d4:	mov	r0, #1
   159d8:	bl	125bc <__printf_chk@plt>
   159dc:	cmp	r7, #0
   159e0:	beq	15ec0 <__assert_fail@plt+0x36e8>
   159e4:	ldr	sl, [fp]
   159e8:	cmp	sl, #0
   159ec:	beq	15ec0 <__assert_fail@plt+0x36e8>
   159f0:	movw	r6, #62072	; 0xf278
   159f4:	movt	r6, #6
   159f8:	mov	r9, r8
   159fc:	mov	r8, r7
   15a00:	mov	ip, #0
   15a04:	movw	r4, #992	; 0x3e0
   15a08:	str	ip, [sp, #72]	; 0x48
   15a0c:	movt	r4, #7
   15a10:	movw	r5, #976	; 0x3d0
   15a14:	str	r4, [sp, #68]	; 0x44
   15a18:	movw	ip, #9752	; 0x2618
   15a1c:	mov	r4, #0
   15a20:	movt	r5, #7
   15a24:	movt	ip, #5
   15a28:	str	r5, [sp, #48]	; 0x30
   15a2c:	str	ip, [sp, #76]	; 0x4c
   15a30:	str	r4, [sp, #84]	; 0x54
   15a34:	str	r4, [sp, #64]	; 0x40
   15a38:	str	r4, [sp, #80]	; 0x50
   15a3c:	ldrd	r0, [r6]
   15a40:	mvn	r2, #0
   15a44:	mvn	r3, #0
   15a48:	cmp	r1, r3
   15a4c:	cmpeq	r0, r2
   15a50:	ldrd	r2, [sl, #8]
   15a54:	beq	15a64 <__assert_fail@plt+0x328c>
   15a58:	cmp	r1, r3
   15a5c:	cmpeq	r0, r2
   15a60:	bhi	15ca4 <__assert_fail@plt+0x34cc>
   15a64:	ldrd	r0, [r6, #8]
   15a68:	mvn	r4, #0
   15a6c:	mvn	r5, #0
   15a70:	cmp	r1, r5
   15a74:	cmpeq	r0, r4
   15a78:	beq	15a88 <__assert_fail@plt+0x32b0>
   15a7c:	cmp	r1, r3
   15a80:	cmpeq	r0, r2
   15a84:	bcc	15ca4 <__assert_fail@plt+0x34cc>
   15a88:	ldr	r5, [sp, #52]	; 0x34
   15a8c:	ldr	r1, [r5, #32]
   15a90:	cmp	r1, #0
   15a94:	beq	15b50 <__assert_fail@plt+0x3378>
   15a98:	ldr	ip, [sp, #60]	; 0x3c
   15a9c:	cmp	ip, #0
   15aa0:	beq	15b50 <__assert_fail@plt+0x3378>
   15aa4:	ldr	ip, [r9, #4]
   15aa8:	add	r0, sp, #92	; 0x5c
   15aac:	ldr	r4, [sp, #68]	; 0x44
   15ab0:	ldr	r1, [r4, #36]	; 0x24
   15ab4:	strd	r2, [sp]
   15ab8:	add	r3, sp, #96	; 0x60
   15abc:	str	r0, [sp, #8]
   15ac0:	add	r2, sp, #100	; 0x64
   15ac4:	str	r3, [sp, #12]
   15ac8:	mov	r0, r9
   15acc:	str	r2, [sp, #16]
   15ad0:	add	r3, sp, #104	; 0x68
   15ad4:	ldr	r2, [sp, #60]	; 0x3c
   15ad8:	str	r3, [sp, #20]
   15adc:	ldr	r3, [ip, #296]	; 0x128
   15ae0:	blx	r3
   15ae4:	cmp	r0, #0
   15ae8:	beq	15b4c <__assert_fail@plt+0x3374>
   15aec:	ldr	r4, [sp, #96]	; 0x60
   15af0:	cmp	r4, #0
   15af4:	beq	15b40 <__assert_fail@plt+0x3368>
   15af8:	ldr	r5, [sp, #64]	; 0x40
   15afc:	cmp	r5, #0
   15b00:	beq	15f48 <__assert_fail@plt+0x3770>
   15b04:	mov	r0, r4
   15b08:	mov	r1, r5
   15b0c:	bl	12178 <strcmp@plt>
   15b10:	cmp	r0, #0
   15b14:	beq	15b40 <__assert_fail@plt+0x3368>
   15b18:	mov	r2, r4
   15b1c:	movw	r1, #9908	; 0x26b4
   15b20:	mov	r0, #1
   15b24:	movt	r1, #5
   15b28:	bl	125bc <__printf_chk@plt>
   15b2c:	ldr	r0, [sp, #64]	; 0x40
   15b30:	bl	121f0 <free@plt>
   15b34:	ldr	r0, [sp, #96]	; 0x60
   15b38:	bl	1237c <xstrdup@plt>
   15b3c:	str	r0, [sp, #64]	; 0x40
   15b40:	ldr	r3, [sp, #100]	; 0x64
   15b44:	cmp	r3, #0
   15b48:	bne	15dd0 <__assert_fail@plt+0x35f8>
   15b4c:	ldrd	r2, [sl, #8]
   15b50:	ldr	r1, [sl]
   15b54:	cmp	r1, #0
   15b58:	beq	15cf8 <__assert_fail@plt+0x3520>
   15b5c:	ldr	r1, [r1]
   15b60:	cmp	r1, #0
   15b64:	beq	15cf8 <__assert_fail@plt+0x3520>
   15b68:	ldr	r0, [r1, #20]
   15b6c:	ldr	r7, [r1, #4]
   15b70:	ldr	r0, [r0]
   15b74:	str	r0, [sp, #28]
   15b78:	ldr	ip, [sp, #48]	; 0x30
   15b7c:	mov	r0, r9
   15b80:	ldr	r1, [ip]
   15b84:	bl	1273c <bfd_fprintf_vma@plt>
   15b88:	ldr	r3, [sl, #24]
   15b8c:	cmp	r3, #0
   15b90:	beq	15e74 <__assert_fail@plt+0x369c>
   15b94:	ldr	r2, [r3, #32]
   15b98:	cmp	r2, #0
   15b9c:	beq	15e98 <__assert_fail@plt+0x36c0>
   15ba0:	ldr	r3, [r9, #4]
   15ba4:	ldr	r3, [r3, #4]
   15ba8:	cmp	r3, #5
   15bac:	beq	15d04 <__assert_fail@plt+0x352c>
   15bb0:	mov	r4, #0
   15bb4:	mov	r5, #0
   15bb8:	strd	r4, [sp, #40]	; 0x28
   15bbc:	movw	r1, #9876	; 0x2694
   15bc0:	mov	r0, #1
   15bc4:	movt	r1, #5
   15bc8:	mov	r4, fp
   15bcc:	bl	125bc <__printf_chk@plt>
   15bd0:	cmp	r7, #0
   15bd4:	beq	15cac <__assert_fail@plt+0x34d4>
   15bd8:	ldr	r3, [sl]
   15bdc:	mov	r0, r9
   15be0:	mov	r1, #0
   15be4:	ldr	r2, [r3]
   15be8:	bl	152f4 <__assert_fail@plt+0x2b1c>
   15bec:	ldrd	r2, [sl, #16]
   15bf0:	orrs	lr, r2, r3
   15bf4:	beq	15c34 <__assert_fail@plt+0x345c>
   15bf8:	cmp	r2, #0
   15bfc:	sbcs	r0, r3, #0
   15c00:	blt	15da4 <__assert_fail@plt+0x35cc>
   15c04:	movw	r1, #9696	; 0x25e0
   15c08:	mov	r0, #1
   15c0c:	movt	r1, #5
   15c10:	str	r2, [sp, #32]
   15c14:	str	r3, [sp, #36]	; 0x24
   15c18:	bl	125bc <__printf_chk@plt>
   15c1c:	ldr	r3, [sp, #36]	; 0x24
   15c20:	ldr	r2, [sp, #32]
   15c24:	ldr	r5, [sp, #48]	; 0x30
   15c28:	mov	r0, r9
   15c2c:	ldr	r1, [r5]
   15c30:	bl	1273c <bfd_fprintf_vma@plt>
   15c34:	ldrd	r0, [sp, #40]	; 0x28
   15c38:	orrs	r1, r0, r1
   15c3c:	bne	15cd0 <__assert_fail@plt+0x34f8>
   15c40:	mov	r0, #10
   15c44:	bl	1258c <putchar@plt>
   15c48:	subs	r8, r8, #1
   15c4c:	add	fp, fp, #4
   15c50:	beq	15c60 <__assert_fail@plt+0x3488>
   15c54:	ldr	sl, [r4, #4]
   15c58:	cmp	sl, #0
   15c5c:	bne	15a3c <__assert_fail@plt+0x3264>
   15c60:	ldr	ip, [sp, #80]	; 0x50
   15c64:	cmp	ip, #0
   15c68:	beq	15c74 <__assert_fail@plt+0x349c>
   15c6c:	ldr	r0, [sp, #80]	; 0x50
   15c70:	bl	121f0 <free@plt>
   15c74:	ldr	r4, [sp, #64]	; 0x40
   15c78:	cmp	r4, #0
   15c7c:	beq	15ec0 <__assert_fail@plt+0x36e8>
   15c80:	ldr	r5, [sp, #56]	; 0x38
   15c84:	ldr	r2, [sp, #140]	; 0x8c
   15c88:	ldr	r3, [r5]
   15c8c:	cmp	r2, r3
   15c90:	bne	15f60 <__assert_fail@plt+0x3788>
   15c94:	ldr	r0, [sp, #64]	; 0x40
   15c98:	add	sp, sp, #148	; 0x94
   15c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ca0:	b	121f0 <free@plt>
   15ca4:	mov	r4, fp
   15ca8:	b	15c48 <__assert_fail@plt+0x3470>
   15cac:	ldr	r2, [sp, #28]
   15cb0:	movw	r1, #9900	; 0x26ac
   15cb4:	ldr	r5, [sp, #76]	; 0x4c
   15cb8:	movt	r1, #5
   15cbc:	cmp	r2, #0
   15cc0:	mov	r0, #1
   15cc4:	moveq	r2, r5
   15cc8:	bl	125bc <__printf_chk@plt>
   15ccc:	b	15bec <__assert_fail@plt+0x3414>
   15cd0:	movw	r1, #9696	; 0x25e0
   15cd4:	mov	r0, #1
   15cd8:	movt	r1, #5
   15cdc:	bl	125bc <__printf_chk@plt>
   15ce0:	ldr	r5, [sp, #48]	; 0x30
   15ce4:	mov	r0, r9
   15ce8:	ldrd	r2, [sp, #40]	; 0x28
   15cec:	ldr	r1, [r5]
   15cf0:	bl	1273c <bfd_fprintf_vma@plt>
   15cf4:	b	15c40 <__assert_fail@plt+0x3468>
   15cf8:	str	r1, [sp, #28]
   15cfc:	mov	r7, r1
   15d00:	b	15b78 <__assert_fail@plt+0x33a0>
   15d04:	ldr	r3, [r9, #168]	; 0xa8
   15d08:	ldrh	r3, [r3, #50]	; 0x32
   15d0c:	cmp	r3, #43	; 0x2b
   15d10:	bne	15bb0 <__assert_fail@plt+0x33d8>
   15d14:	cmp	r8, #1
   15d18:	ble	15bb0 <__assert_fail@plt+0x33d8>
   15d1c:	mov	r0, r2
   15d20:	movw	r1, #9848	; 0x2678
   15d24:	movt	r1, #5
   15d28:	str	r2, [sp, #32]
   15d2c:	bl	12178 <strcmp@plt>
   15d30:	ldr	r2, [sp, #32]
   15d34:	cmp	r0, #0
   15d38:	bne	15bb0 <__assert_fail@plt+0x33d8>
   15d3c:	ldr	r3, [fp, #4]
   15d40:	cmp	r3, #0
   15d44:	beq	15bb0 <__assert_fail@plt+0x33d8>
   15d48:	ldr	ip, [r3, #24]
   15d4c:	cmp	ip, #0
   15d50:	beq	15bb0 <__assert_fail@plt+0x33d8>
   15d54:	ldrd	r4, [sl, #8]
   15d58:	ldrd	r0, [r3, #8]
   15d5c:	cmp	r5, r1
   15d60:	cmpeq	r4, r0
   15d64:	bne	15bb0 <__assert_fail@plt+0x33d8>
   15d68:	ldr	r0, [ip, #32]
   15d6c:	movw	r1, #9864	; 0x2688
   15d70:	movt	r1, #5
   15d74:	str	r3, [sp, #36]	; 0x24
   15d78:	bl	12178 <strcmp@plt>
   15d7c:	ldr	r2, [sp, #32]
   15d80:	ldr	r3, [sp, #36]	; 0x24
   15d84:	cmp	r0, #0
   15d88:	bne	15bb0 <__assert_fail@plt+0x33d8>
   15d8c:	ldrd	r4, [r3, #16]
   15d90:	movw	r2, #9736	; 0x2608
   15d94:	add	fp, fp, #4
   15d98:	movt	r2, #5
   15d9c:	strd	r4, [sp, #40]	; 0x28
   15da0:	b	15bbc <__assert_fail@plt+0x33e4>
   15da4:	movw	r1, #9692	; 0x25dc
   15da8:	mov	r0, #1
   15dac:	movt	r1, #5
   15db0:	rsbs	r2, r2, #0
   15db4:	rsc	r3, r3, #0
   15db8:	str	r2, [sp, #32]
   15dbc:	str	r3, [sp, #36]	; 0x24
   15dc0:	bl	125bc <__printf_chk@plt>
   15dc4:	ldr	r2, [sp, #32]
   15dc8:	ldr	r3, [sp, #36]	; 0x24
   15dcc:	b	15c24 <__assert_fail@plt+0x344c>
   15dd0:	ldr	ip, [sp, #84]	; 0x54
   15dd4:	cmp	ip, r3
   15dd8:	beq	15f00 <__assert_fail@plt+0x3728>
   15ddc:	ldr	r1, [sp, #104]	; 0x68
   15de0:	cmp	r1, #0
   15de4:	ldr	r2, [sp, #92]	; 0x5c
   15de8:	bne	15edc <__assert_fail@plt+0x3704>
   15dec:	movw	r0, #9732	; 0x2604
   15df0:	cmp	r2, #0
   15df4:	movt	r0, #5
   15df8:	str	r1, [sp]
   15dfc:	movw	r1, #9800	; 0x2648
   15e00:	movt	r1, #5
   15e04:	moveq	r2, r0
   15e08:	mov	r0, #1
   15e0c:	bl	125bc <__printf_chk@plt>
   15e10:	ldr	ip, [sp, #80]	; 0x50
   15e14:	ldr	r4, [sp, #100]	; 0x64
   15e18:	ldr	r5, [sp, #104]	; 0x68
   15e1c:	cmp	ip, #0
   15e20:	str	r4, [sp, #84]	; 0x54
   15e24:	str	r5, [sp, #72]	; 0x48
   15e28:	beq	15e34 <__assert_fail@plt+0x365c>
   15e2c:	mov	r0, ip
   15e30:	bl	121f0 <free@plt>
   15e34:	ldr	r0, [sp, #92]	; 0x5c
   15e38:	cmp	r0, #0
   15e3c:	beq	15e44 <__assert_fail@plt+0x366c>
   15e40:	bl	1237c <xstrdup@plt>
   15e44:	str	r0, [sp, #80]	; 0x50
   15e48:	b	15b4c <__assert_fail@plt+0x3374>
   15e4c:	mvn	r2, #0
   15e50:	mvn	r3, #0
   15e54:	add	r1, sp, #108	; 0x6c
   15e58:	bl	126b8 <bfd_sprintf_vma@plt>
   15e5c:	add	r0, sp, #108	; 0x6c
   15e60:	bl	124e4 <strlen@plt>
   15e64:	sub	r0, r0, #7
   15e68:	str	r0, [r4, #28]
   15e6c:	mov	r2, r0
   15e70:	b	159b8 <__assert_fail@plt+0x31e0>
   15e74:	movw	r1, #9828	; 0x2664
   15e78:	mov	r0, #1
   15e7c:	movt	r1, #5
   15e80:	mov	r4, fp
   15e84:	bl	125bc <__printf_chk@plt>
   15e88:	mov	r0, #0
   15e8c:	mov	r1, #0
   15e90:	strd	r0, [sp, #40]	; 0x28
   15e94:	b	15bd0 <__assert_fail@plt+0x33f8>
   15e98:	ldr	r2, [r3]
   15e9c:	movw	r1, #9888	; 0x26a0
   15ea0:	mov	r0, #1
   15ea4:	movt	r1, #5
   15ea8:	mov	r4, #0
   15eac:	bl	125bc <__printf_chk@plt>
   15eb0:	mov	r5, #0
   15eb4:	strd	r4, [sp, #40]	; 0x28
   15eb8:	mov	r4, fp
   15ebc:	b	15bd0 <__assert_fail@plt+0x33f8>
   15ec0:	ldr	ip, [sp, #56]	; 0x38
   15ec4:	ldr	r2, [sp, #140]	; 0x8c
   15ec8:	ldr	r3, [ip]
   15ecc:	cmp	r2, r3
   15ed0:	bne	15f60 <__assert_fail@plt+0x3788>
   15ed4:	add	sp, sp, #148	; 0x94
   15ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15edc:	cmp	r2, #0
   15ee0:	movw	r1, #9732	; 0x2604
   15ee4:	movt	r1, #5
   15ee8:	mov	r0, #1
   15eec:	moveq	r2, r1
   15ef0:	movw	r1, #9792	; 0x2640
   15ef4:	movt	r1, #5
   15ef8:	bl	125bc <__printf_chk@plt>
   15efc:	b	15e10 <__assert_fail@plt+0x3638>
   15f00:	ldr	r0, [sp, #92]	; 0x5c
   15f04:	cmp	r0, #0
   15f08:	beq	15f30 <__assert_fail@plt+0x3758>
   15f0c:	ldr	r5, [sp, #80]	; 0x50
   15f10:	cmp	r5, #0
   15f14:	beq	15f30 <__assert_fail@plt+0x3758>
   15f18:	mov	r1, r5
   15f1c:	bl	12208 <filename_cmp@plt>
   15f20:	cmp	r0, #0
   15f24:	ldrne	r1, [sp, #104]	; 0x68
   15f28:	ldrne	r3, [sp, #100]	; 0x64
   15f2c:	bne	15de0 <__assert_fail@plt+0x3608>
   15f30:	ldr	r1, [sp, #104]	; 0x68
   15f34:	ldr	r4, [sp, #72]	; 0x48
   15f38:	cmp	r1, r4
   15f3c:	ldrne	r3, [sp, #100]	; 0x64
   15f40:	bne	15de0 <__assert_fail@plt+0x3608>
   15f44:	b	15b4c <__assert_fail@plt+0x3374>
   15f48:	mov	r2, r4
   15f4c:	movw	r1, #9908	; 0x26b4
   15f50:	mov	r0, #1
   15f54:	movt	r1, #5
   15f58:	bl	125bc <__printf_chk@plt>
   15f5c:	b	15b34 <__assert_fail@plt+0x335c>
   15f60:	bl	122b0 <__stack_chk_fail@plt>
   15f64:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f68:	ldr	r7, [r0]
   15f6c:	ldr	r6, [r1]
   15f70:	ldr	r8, [r7, #20]
   15f74:	ldr	ip, [r6, #20]
   15f78:	ldrd	r0, [r7, #8]
   15f7c:	ldrd	r2, [r8, #32]
   15f80:	ldrd	sl, [ip, #32]
   15f84:	ldrd	r4, [r6, #8]
   15f88:	adds	r2, r2, r0
   15f8c:	adc	r3, r3, r1
   15f90:	adds	r4, r4, sl
   15f94:	adc	r5, r5, fp
   15f98:	cmp	r3, r5
   15f9c:	cmpeq	r2, r4
   15fa0:	bhi	16070 <__assert_fail@plt+0x3898>
   15fa4:	bcc	160dc <__assert_fail@plt+0x3904>
   15fa8:	cmp	r8, ip
   15fac:	bhi	16070 <__assert_fail@plt+0x3898>
   15fb0:	bcc	160dc <__assert_fail@plt+0x3904>
   15fb4:	ldr	r4, [r7, #4]
   15fb8:	ldr	r5, [r6, #4]
   15fbc:	mov	r0, r4
   15fc0:	bl	124e4 <strlen@plt>
   15fc4:	mov	sl, r0
   15fc8:	mov	r0, r5
   15fcc:	bl	124e4 <strlen@plt>
   15fd0:	movw	r1, #9916	; 0x26bc
   15fd4:	movt	r1, #5
   15fd8:	mov	r9, r0
   15fdc:	mov	r0, r4
   15fe0:	bl	1213c <strstr@plt>
   15fe4:	cmp	r0, #0
   15fe8:	movne	r8, #1
   15fec:	beq	160e4 <__assert_fail@plt+0x390c>
   15ff0:	movw	r1, #9916	; 0x26bc
   15ff4:	mov	r0, r5
   15ff8:	movt	r1, #5
   15ffc:	bl	1213c <strstr@plt>
   16000:	cmp	r0, #0
   16004:	beq	16050 <__assert_fail@plt+0x3878>
   16008:	cmp	r8, #0
   1600c:	beq	160dc <__assert_fail@plt+0x3904>
   16010:	ldr	r3, [r7, #16]
   16014:	ands	r1, r3, #16384	; 0x4000
   16018:	movne	r1, #1
   1601c:	beq	16078 <__assert_fail@plt+0x38a0>
   16020:	ldr	r2, [r6, #16]
   16024:	tst	r2, #16384	; 0x4000
   16028:	beq	160a0 <__assert_fail@plt+0x38c8>
   1602c:	tst	r1, #1
   16030:	beq	160dc <__assert_fail@plt+0x3904>
   16034:	eor	r2, r2, r3
   16038:	tst	r2, #4
   1603c:	beq	160bc <__assert_fail@plt+0x38e4>
   16040:	tst	r3, #4
   16044:	mvneq	r0, #0
   16048:	movne	r0, #1
   1604c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16050:	movw	r1, #9932	; 0x26cc
   16054:	mov	r0, r5
   16058:	movt	r1, #5
   1605c:	bl	1213c <strstr@plt>
   16060:	cmp	r0, #0
   16064:	bne	16008 <__assert_fail@plt+0x3830>
   16068:	cmp	r8, #0
   1606c:	beq	16010 <__assert_fail@plt+0x3838>
   16070:	mov	r0, #1
   16074:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16078:	add	sl, r4, sl
   1607c:	ldrb	r2, [sl, #-2]
   16080:	cmp	r2, #46	; 0x2e
   16084:	bne	16020 <__assert_fail@plt+0x3848>
   16088:	ldrb	r1, [sl, #-1]
   1608c:	cmp	r1, #111	; 0x6f
   16090:	cmpne	r1, #97	; 0x61
   16094:	movne	r1, #0
   16098:	moveq	r1, #1
   1609c:	b	16020 <__assert_fail@plt+0x3848>
   160a0:	add	r9, r5, r9
   160a4:	ldrb	r0, [r9, #-2]
   160a8:	cmp	r0, #46	; 0x2e
   160ac:	beq	16110 <__assert_fail@plt+0x3938>
   160b0:	tst	r1, #1
   160b4:	bne	16070 <__assert_fail@plt+0x3898>
   160b8:	b	16034 <__assert_fail@plt+0x385c>
   160bc:	tst	r2, #8
   160c0:	bne	16100 <__assert_fail@plt+0x3928>
   160c4:	tst	r2, #1
   160c8:	beq	16124 <__assert_fail@plt+0x394c>
   160cc:	tst	r3, #1
   160d0:	mvneq	r0, #0
   160d4:	movne	r0, #1
   160d8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160dc:	mvn	r0, #0
   160e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160e4:	movw	r1, #9932	; 0x26cc
   160e8:	mov	r0, r4
   160ec:	movt	r1, #5
   160f0:	bl	1213c <strstr@plt>
   160f4:	adds	r8, r0, #0
   160f8:	movne	r8, #1
   160fc:	b	15ff0 <__assert_fail@plt+0x3818>
   16100:	tst	r3, #8
   16104:	moveq	r0, #1
   16108:	mvnne	r0, #0
   1610c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16110:	ldrb	r0, [r9, #-1]
   16114:	cmp	r0, #111	; 0x6f
   16118:	cmpne	r0, #97	; 0x61
   1611c:	beq	1602c <__assert_fail@plt+0x3854>
   16120:	b	160b0 <__assert_fail@plt+0x38d8>
   16124:	tst	r2, #2
   16128:	beq	1613c <__assert_fail@plt+0x3964>
   1612c:	tst	r3, #2
   16130:	moveq	r0, #1
   16134:	mvnne	r0, #0
   16138:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1613c:	ldrb	r3, [r4]
   16140:	cmp	r3, #46	; 0x2e
   16144:	ldrb	r3, [r5]
   16148:	beq	16164 <__assert_fail@plt+0x398c>
   1614c:	cmp	r3, #46	; 0x2e
   16150:	beq	160dc <__assert_fail@plt+0x3904>
   16154:	mov	r0, r4
   16158:	mov	r1, r5
   1615c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16160:	b	12178 <strcmp@plt>
   16164:	cmp	r3, #46	; 0x2e
   16168:	bne	16070 <__assert_fail@plt+0x3898>
   1616c:	b	16154 <__assert_fail@plt+0x397c>
   16170:	push	{r1, r2, r3}
   16174:	push	{r4, r5, r6, r7, r8, lr}
   16178:	movw	r8, #65176	; 0xfe98
   1617c:	movt	r8, #6
   16180:	sub	sp, sp, #20
   16184:	add	r6, sp, #48	; 0x30
   16188:	mov	r4, r0
   1618c:	ldr	r3, [r8]
   16190:	ldr	r7, [sp, #44]	; 0x2c
   16194:	str	r3, [sp, #12]
   16198:	b	161b8 <__assert_fail@plt+0x39e0>
   1619c:	ldr	r1, [r4, #8]
   161a0:	ldr	r0, [r4]
   161a4:	add	r3, r3, r1
   161a8:	lsl	r1, r3, #1
   161ac:	str	r1, [r4, #8]
   161b0:	bl	122c8 <xrealloc@plt>
   161b4:	str	r0, [r4]
   161b8:	ldr	r1, [r4, #4]
   161bc:	mvn	r3, #0
   161c0:	ldr	r5, [r4, #8]
   161c4:	mov	r2, #1
   161c8:	ldr	r0, [r4]
   161cc:	rsb	r5, r1, r5
   161d0:	str	r7, [sp]
   161d4:	add	r0, r0, r1
   161d8:	str	r6, [sp, #4]
   161dc:	mov	r1, r5
   161e0:	str	r6, [sp, #8]
   161e4:	bl	12220 <__vsnprintf_chk@plt>
   161e8:	cmp	r5, r0
   161ec:	mov	r3, r0
   161f0:	bls	1619c <__assert_fail@plt+0x39c4>
   161f4:	ldr	ip, [sp, #12]
   161f8:	ldr	r1, [r8]
   161fc:	ldr	r2, [r4, #4]
   16200:	cmp	ip, r1
   16204:	add	r3, r2, r0
   16208:	str	r3, [r4, #4]
   1620c:	bne	16220 <__assert_fail@plt+0x3a48>
   16210:	add	sp, sp, #20
   16214:	pop	{r4, r5, r6, r7, r8, lr}
   16218:	add	sp, sp, #12
   1621c:	bx	lr
   16220:	bl	122b0 <__stack_chk_fail@plt>
   16224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16228:	movw	r3, #65176	; 0xfe98
   1622c:	sub	sp, sp, #140	; 0x8c
   16230:	movt	r3, #6
   16234:	str	r3, [sp, #4]
   16238:	ldr	r3, [r3]
   1623c:	str	r0, [sp, #16]
   16240:	mov	r0, #40	; 0x28
   16244:	str	r1, [sp, #12]
   16248:	str	r3, [sp, #132]	; 0x84
   1624c:	bl	12358 <xmalloc@plt>
   16250:	mov	r1, #0
   16254:	mov	r9, r0
   16258:	ldr	r0, [sp, #12]
   1625c:	bl	123dc <open64@plt>
   16260:	subs	r4, r0, #0
   16264:	blt	1645c <__assert_fail@plt+0x3c84>
   16268:	mov	r0, #3
   1626c:	mov	r1, r4
   16270:	add	r2, sp, #24
   16274:	bl	12328 <__fxstat64@plt>
   16278:	cmp	r0, #0
   1627c:	blt	16454 <__assert_fail@plt+0x3c7c>
   16280:	ldr	r5, [sp, #72]	; 0x48
   16284:	mov	r0, r5
   16288:	str	r5, [r9, #16]
   1628c:	bl	1243c <malloc@plt>
   16290:	subs	r3, r0, #0
   16294:	beq	162bc <__assert_fail@plt+0x3ae4>
   16298:	mov	r2, r5
   1629c:	mov	r1, r3
   162a0:	mov	r0, r4
   162a4:	str	r3, [sp]
   162a8:	bl	121a8 <read@plt>
   162ac:	ldr	r2, [r9, #16]
   162b0:	ldr	r3, [sp]
   162b4:	cmp	r0, r2
   162b8:	beq	162fc <__assert_fail@plt+0x3b24>
   162bc:	mov	r0, r3
   162c0:	bl	121f0 <free@plt>
   162c4:	mov	r0, r4
   162c8:	bl	127a8 <close@plt>
   162cc:	mov	r3, #0
   162d0:	str	r3, [r9, #12]
   162d4:	mov	r0, r9
   162d8:	bl	121f0 <free@plt>
   162dc:	mov	r0, #0
   162e0:	ldr	r4, [sp, #4]
   162e4:	ldr	r2, [sp, #132]	; 0x84
   162e8:	ldr	r3, [r4]
   162ec:	cmp	r2, r3
   162f0:	bne	16474 <__assert_fail@plt+0x3c9c>
   162f4:	add	sp, sp, #140	; 0x8c
   162f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162fc:	mov	r0, r4
   16300:	str	r3, [sp]
   16304:	bl	127a8 <close@plt>
   16308:	ldr	r3, [sp]
   1630c:	ldr	r2, [r9, #16]
   16310:	add	r8, r3, r2
   16314:	str	r3, [r9, #12]
   16318:	cmp	r3, r8
   1631c:	str	r2, [sp, #8]
   16320:	bcs	16468 <__assert_fail@plt+0x3c90>
   16324:	mov	sl, #0
   16328:	mov	fp, #45	; 0x2d
   1632c:	str	r9, [sp, #20]
   16330:	mov	r4, r3
   16334:	mov	r9, fp
   16338:	mov	r7, sl
   1633c:	mov	r6, sl
   16340:	mov	fp, r3
   16344:	b	1635c <__assert_fail@plt+0x3b84>
   16348:	cmp	r2, #13
   1634c:	addne	r4, r4, #1
   16350:	beq	16434 <__assert_fail@plt+0x3c5c>
   16354:	cmp	r8, r4
   16358:	bls	163e8 <__assert_fail@plt+0x3c10>
   1635c:	ldrb	r2, [r4]
   16360:	cmp	r2, #10
   16364:	bne	16348 <__assert_fail@plt+0x3b70>
   16368:	add	r2, r4, #1
   1636c:	cmp	r8, r2
   16370:	bls	16380 <__assert_fail@plt+0x3ba8>
   16374:	ldrb	r1, [r4, #1]
   16378:	cmp	r1, #13
   1637c:	beq	1644c <__assert_fail@plt+0x3c74>
   16380:	mov	r4, r2
   16384:	cmp	r6, #0
   16388:	add	r5, r7, #1
   1638c:	beq	16398 <__assert_fail@plt+0x3bc0>
   16390:	cmp	r5, sl
   16394:	bls	163d4 <__assert_fail@plt+0x3bfc>
   16398:	sub	ip, r9, #5
   1639c:	ldr	r0, [sp, #8]
   163a0:	cmp	ip, #1
   163a4:	movge	r9, ip
   163a8:	movlt	r9, #1
   163ac:	mov	r1, r9
   163b0:	bl	4f040 <warn@@Base+0x5448>
   163b4:	add	r3, r0, #1
   163b8:	mov	r0, r6
   163bc:	cmp	r5, r3
   163c0:	movcs	sl, r5
   163c4:	movcc	sl, r3
   163c8:	lsl	r1, sl, #2
   163cc:	bl	122c8 <xrealloc@plt>
   163d0:	mov	r6, r0
   163d4:	cmp	r8, r4
   163d8:	str	fp, [r6, r7, lsl #2]
   163dc:	mov	r7, r5
   163e0:	mov	fp, r4
   163e4:	bhi	1635c <__assert_fail@plt+0x3b84>
   163e8:	ldr	r9, [sp, #20]
   163ec:	ldr	r4, [sp, #16]
   163f0:	movw	r3, #992	; 0x3e0
   163f4:	movt	r3, #7
   163f8:	mov	r2, #0
   163fc:	mov	r1, #1
   16400:	mov	r0, r9
   16404:	ldr	ip, [r3, #40]	; 0x28
   16408:	str	r4, [r9, #4]
   1640c:	ldr	r4, [sp, #12]
   16410:	str	r7, [r9, #24]
   16414:	str	r6, [r9, #20]
   16418:	str	r4, [r9, #8]
   1641c:	str	ip, [r9]
   16420:	str	r9, [r3, #40]	; 0x28
   16424:	str	r2, [r9, #28]
   16428:	str	r2, [r9, #32]
   1642c:	str	r1, [r9, #36]	; 0x24
   16430:	b	162e0 <__assert_fail@plt+0x3b08>
   16434:	add	r2, r4, #1
   16438:	cmp	r8, r2
   1643c:	bls	16380 <__assert_fail@plt+0x3ba8>
   16440:	ldrb	r1, [r4, #1]
   16444:	cmp	r1, #10
   16448:	bne	16380 <__assert_fail@plt+0x3ba8>
   1644c:	add	r4, r4, #2
   16450:	b	16384 <__assert_fail@plt+0x3bac>
   16454:	mov	r0, r4
   16458:	bl	127a8 <close@plt>
   1645c:	mov	r3, #0
   16460:	str	r3, [r9, #12]
   16464:	b	162d4 <__assert_fail@plt+0x3afc>
   16468:	mov	r7, #0
   1646c:	mov	r6, r7
   16470:	b	163ec <__assert_fail@plt+0x3c14>
   16474:	bl	122b0 <__stack_chk_fail@plt>
   16478:	ldr	r2, [r0, #40]	; 0x28
   1647c:	movw	r3, #992	; 0x3e0
   16480:	movt	r3, #7
   16484:	ubfx	r2, r2, #5, #20
   16488:	tst	r2, #66	; 0x42
   1648c:	push	{r4, lr}
   16490:	movne	r2, #0
   16494:	moveq	r2, #1
   16498:	mov	r4, r0
   1649c:	str	r2, [r3, #44]	; 0x2c
   164a0:	bl	127c0 <bfd_arch_bits_per_address@plt>
   164a4:	ldr	r2, [r4, #4]
   164a8:	movw	r3, #3424	; 0xd60
   164ac:	movt	r3, #7
   164b0:	ldr	r2, [r2, #8]
   164b4:	cmp	r2, #0
   164b8:	lsr	r0, r0, #3
   164bc:	str	r0, [r3]
   164c0:	bne	1651c <__assert_fail@plt+0x3d44>
   164c4:	movw	r3, #3472	; 0xd90
   164c8:	movt	r3, #7
   164cc:	mov	r0, r4
   164d0:	movw	r2, #38248	; 0x9568
   164d4:	movt	r2, #4
   164d8:	str	r2, [r3]
   164dc:	bl	12508 <bfd_get_arch@plt>
   164e0:	cmp	r0, #12
   164e4:	beq	16548 <__assert_fail@plt+0x3d70>
   164e8:	bls	16550 <__assert_fail@plt+0x3d78>
   164ec:	cmp	r0, #76	; 0x4c
   164f0:	beq	165bc <__assert_fail@plt+0x3de4>
   164f4:	cmp	r0, #89	; 0x59
   164f8:	bne	16500 <__assert_fail@plt+0x3d28>
   164fc:	bl	21928 <__assert_fail@plt+0xf150>
   16500:	mov	r0, r4
   16504:	movw	r1, #43332	; 0xa944
   16508:	mov	r2, #0
   1650c:	movt	r1, #1
   16510:	bl	12754 <bfd_map_over_sections@plt>
   16514:	pop	{r4, lr}
   16518:	b	2d0d0 <__assert_fail@plt+0x1a8f8>
   1651c:	cmp	r2, #1
   16520:	bne	16584 <__assert_fail@plt+0x3dac>
   16524:	movw	r3, #3472	; 0xd90
   16528:	movt	r3, #7
   1652c:	mov	r0, r4
   16530:	movw	r2, #40436	; 0x9df4
   16534:	movt	r2, #4
   16538:	str	r2, [r3]
   1653c:	bl	12508 <bfd_get_arch@plt>
   16540:	cmp	r0, #12
   16544:	bne	164e8 <__assert_fail@plt+0x3d10>
   16548:	bl	218e8 <__assert_fail@plt+0xf110>
   1654c:	b	16500 <__assert_fail@plt+0x3d28>
   16550:	cmp	r0, #9
   16554:	bne	16500 <__assert_fail@plt+0x3d28>
   16558:	mov	r0, r4
   1655c:	bl	125b0 <bfd_get_mach@plt>
   16560:	cmp	r0, #17
   16564:	bhi	165a4 <__assert_fail@plt+0x3dcc>
   16568:	cmp	r0, #16
   1656c:	bcs	165b4 <__assert_fail@plt+0x3ddc>
   16570:	sub	r0, r0, #8
   16574:	cmp	r0, #1
   16578:	bls	165b4 <__assert_fail@plt+0x3ddc>
   1657c:	bl	218c8 <__assert_fail@plt+0xf0f0>
   16580:	b	16500 <__assert_fail@plt+0x3d28>
   16584:	movw	r1, #9948	; 0x26dc
   16588:	mov	r0, #0
   1658c:	movt	r1, #5
   16590:	mov	r2, #5
   16594:	bl	12298 <dcgettext@plt>
   16598:	ldr	r1, [r4]
   1659c:	pop	{r4, lr}
   165a0:	b	49bf8 <warn@@Base>
   165a4:	cmp	r0, #136	; 0x88
   165a8:	beq	165b4 <__assert_fail@plt+0x3ddc>
   165ac:	cmp	r0, #144	; 0x90
   165b0:	bne	1657c <__assert_fail@plt+0x3da4>
   165b4:	bl	21908 <__assert_fail@plt+0xf130>
   165b8:	b	16500 <__assert_fail@plt+0x3d28>
   165bc:	bl	21948 <__assert_fail@plt+0xf170>
   165c0:	b	16500 <__assert_fail@plt+0x3d28>
   165c4:	ldr	r3, [r1, #20]
   165c8:	mov	ip, r1
   165cc:	push	{r4}		; (str r4, [sp, #-4]!)
   165d0:	tst	r3, #8192	; 0x2000
   165d4:	bne	16610 <__assert_fail@plt+0x3e38>
   165d8:	movw	r3, #992	; 0x3e0
   165dc:	movt	r3, #7
   165e0:	ldr	r4, [r2]
   165e4:	ldrd	r0, [r1, #32]
   165e8:	ldrd	r2, [r3, #48]	; 0x30
   165ec:	adds	r0, r0, r2
   165f0:	adc	r1, r1, r3
   165f4:	cmp	r4, #0
   165f8:	strd	r0, [ip, #32]
   165fc:	beq	16610 <__assert_fail@plt+0x3e38>
   16600:	ldrd	r0, [ip, #40]	; 0x28
   16604:	adds	r2, r2, r0
   16608:	adc	r3, r3, r1
   1660c:	strd	r2, [ip, #40]	; 0x28
   16610:	pop	{r4}		; (ldr r4, [sp], #4)
   16614:	bx	lr
   16618:	push	{r3, r4, r5, lr}
   1661c:	movw	r3, #992	; 0x3e0
   16620:	movt	r3, #7
   16624:	ldr	r4, [r3, #56]	; 0x38
   16628:	cmp	r4, #0
   1662c:	beq	16668 <__assert_fail@plt+0x3e90>
   16630:	ldr	r5, [r0]
   16634:	ldr	r0, [r4]
   16638:	mov	r1, r5
   1663c:	bl	12178 <strcmp@plt>
   16640:	cmp	r0, #0
   16644:	beq	1665c <__assert_fail@plt+0x3e84>
   16648:	ldr	r4, [r4, #8]
   1664c:	cmp	r4, #0
   16650:	bne	16634 <__assert_fail@plt+0x3e5c>
   16654:	mov	r0, r4
   16658:	pop	{r3, r4, r5, pc}
   1665c:	mov	r0, #1
   16660:	str	r0, [r4, #4]
   16664:	pop	{r3, r4, r5, pc}
   16668:	mov	r0, #1
   1666c:	pop	{r3, r4, r5, pc}
   16670:	push	{r4, r5, r6, lr}
   16674:	sub	sp, sp, #8
   16678:	mov	r4, r1
   1667c:	mov	r6, r0
   16680:	bl	1249c <bfd_octets_per_byte@plt>
   16684:	ldr	r3, [r4, #20]
   16688:	tst	r3, #1048576	; 0x100000
   1668c:	mov	r5, r0
   16690:	beq	1669c <__assert_fail@plt+0x3ec4>
   16694:	add	sp, sp, #8
   16698:	pop	{r4, r5, r6, pc}
   1669c:	mov	r0, r4
   166a0:	bl	16618 <__assert_fail@plt+0x3e40>
   166a4:	cmp	r0, #0
   166a8:	beq	16694 <__assert_fail@plt+0x3ebc>
   166ac:	mov	r1, r5
   166b0:	ldr	r0, [r4, #48]	; 0x30
   166b4:	bl	4f040 <warn@@Base+0x5448>
   166b8:	movw	r5, #976	; 0x3d0
   166bc:	movt	r5, #7
   166c0:	ldr	r2, [r4, #8]
   166c4:	ldr	r3, [r4]
   166c8:	movw	r1, #10088	; 0x2768
   166cc:	movt	r1, #5
   166d0:	str	r0, [sp]
   166d4:	mov	r0, #1
   166d8:	bl	125bc <__printf_chk@plt>
   166dc:	ldrd	r2, [r4, #32]
   166e0:	ldr	r1, [r5]
   166e4:	mov	r0, r6
   166e8:	bl	1273c <bfd_fprintf_vma@plt>
   166ec:	movw	r1, #16880	; 0x41f0
   166f0:	mov	r0, #1
   166f4:	movt	r1, #5
   166f8:	bl	125bc <__printf_chk@plt>
   166fc:	ldrd	r2, [r4, #40]	; 0x28
   16700:	mov	r0, r6
   16704:	ldr	r1, [r5]
   16708:	bl	1273c <bfd_fprintf_vma@plt>
   1670c:	ldr	r3, [r4, #92]	; 0x5c
   16710:	movw	r1, #10108	; 0x277c
   16714:	mov	r0, #1
   16718:	movt	r1, #5
   1671c:	ldr	r2, [r4, #112]	; 0x70
   16720:	bl	125bc <__printf_chk@plt>
   16724:	movw	r3, #992	; 0x3e0
   16728:	movt	r3, #7
   1672c:	ldr	r3, [r3, #60]	; 0x3c
   16730:	cmp	r3, #0
   16734:	beq	16b6c <__assert_fail@plt+0x4394>
   16738:	movw	r1, #16880	; 0x41f0
   1673c:	mov	r0, #1
   16740:	movt	r1, #5
   16744:	bl	125bc <__printf_chk@plt>
   16748:	ldr	r3, [r4, #20]
   1674c:	tst	r3, #256	; 0x100
   16750:	movweq	r5, #11856	; 0x2e50
   16754:	movteq	r5, #5
   16758:	bne	16b3c <__assert_fail@plt+0x4364>
   1675c:	tst	r3, #1
   16760:	bne	16b10 <__assert_fail@plt+0x4338>
   16764:	tst	r3, #128	; 0x80
   16768:	bne	16ae4 <__assert_fail@plt+0x430c>
   1676c:	tst	r3, #2
   16770:	bne	16ab8 <__assert_fail@plt+0x42e0>
   16774:	tst	r3, #4
   16778:	bne	16a8c <__assert_fail@plt+0x42b4>
   1677c:	tst	r3, #8
   16780:	bne	16a60 <__assert_fail@plt+0x4288>
   16784:	tst	r3, #16
   16788:	bne	16a34 <__assert_fail@plt+0x425c>
   1678c:	tst	r3, #32
   16790:	bne	16a08 <__assert_fail@plt+0x4230>
   16794:	tst	r3, #64	; 0x40
   16798:	bne	169dc <__assert_fail@plt+0x4204>
   1679c:	tst	r3, #8192	; 0x2000
   167a0:	bne	169b0 <__assert_fail@plt+0x41d8>
   167a4:	tst	r3, #512	; 0x200
   167a8:	bne	16984 <__assert_fail@plt+0x41ac>
   167ac:	tst	r3, #32768	; 0x8000
   167b0:	bne	16958 <__assert_fail@plt+0x4180>
   167b4:	tst	r3, #65536	; 0x10000
   167b8:	bne	16930 <__assert_fail@plt+0x4158>
   167bc:	mov	r0, r6
   167c0:	bl	12508 <bfd_get_arch@plt>
   167c4:	ldr	r3, [r4, #20]
   167c8:	cmp	r0, #45	; 0x2d
   167cc:	beq	16b80 <__assert_fail@plt+0x43a8>
   167d0:	tst	r3, #4194304	; 0x400000
   167d4:	bne	16904 <__assert_fail@plt+0x412c>
   167d8:	ldr	r2, [r6, #4]
   167dc:	ldr	r2, [r2, #4]
   167e0:	cmp	r2, #2
   167e4:	beq	16bbc <__assert_fail@plt+0x43e4>
   167e8:	cmp	r2, #5
   167ec:	beq	16c40 <__assert_fail@plt+0x4468>
   167f0:	tst	r3, #1024	; 0x400
   167f4:	bne	168d8 <__assert_fail@plt+0x4100>
   167f8:	tst	r3, #33554432	; 0x2000000
   167fc:	bne	168b0 <__assert_fail@plt+0x40d8>
   16800:	mov	r0, r6
   16804:	bl	12508 <bfd_get_arch@plt>
   16808:	ldr	r3, [r4, #20]
   1680c:	cmp	r0, #60	; 0x3c
   16810:	beq	16bf8 <__assert_fail@plt+0x4420>
   16814:	tst	r3, #131072	; 0x20000
   16818:	beq	16894 <__assert_fail@plt+0x40bc>
   1681c:	and	r3, r3, #786432	; 0xc0000
   16820:	cmp	r3, #262144	; 0x40000
   16824:	beq	16c74 <__assert_fail@plt+0x449c>
   16828:	bls	16c2c <__assert_fail@plt+0x4454>
   1682c:	cmp	r3, #524288	; 0x80000
   16830:	beq	168a4 <__assert_fail@plt+0x40cc>
   16834:	cmp	r3, #786432	; 0xc0000
   16838:	movweq	r3, #10064	; 0x2750
   1683c:	movteq	r3, #5
   16840:	bne	16c3c <__assert_fail@plt+0x4464>
   16844:	mov	r2, r5
   16848:	movw	r1, #10144	; 0x27a0
   1684c:	mov	r0, #1
   16850:	movt	r1, #5
   16854:	bl	125bc <__printf_chk@plt>
   16858:	ldr	r3, [r6, #4]
   1685c:	ldr	r3, [r3, #4]
   16860:	cmp	r3, #2
   16864:	bne	16894 <__assert_fail@plt+0x40bc>
   16868:	ldr	r3, [r4, #172]	; 0xac
   1686c:	cmp	r3, #0
   16870:	beq	16894 <__assert_fail@plt+0x40bc>
   16874:	ldr	r3, [r3, #32]
   16878:	cmp	r3, #0
   1687c:	beq	16894 <__assert_fail@plt+0x40bc>
   16880:	movw	r1, #10348	; 0x286c
   16884:	mov	r0, #1
   16888:	movt	r1, #5
   1688c:	ldm	r3, {r2, r3}
   16890:	bl	125bc <__printf_chk@plt>
   16894:	mov	r0, #10
   16898:	add	sp, sp, #8
   1689c:	pop	{r4, r5, r6, lr}
   168a0:	b	1258c <putchar@plt>
   168a4:	movw	r3, #10044	; 0x273c
   168a8:	movt	r3, #5
   168ac:	b	16844 <__assert_fail@plt+0x406c>
   168b0:	mov	r2, r5
   168b4:	movw	r1, #10144	; 0x27a0
   168b8:	movw	r3, #10332	; 0x285c
   168bc:	movt	r1, #5
   168c0:	movt	r3, #5
   168c4:	mov	r0, #1
   168c8:	movw	r5, #10648	; 0x2998
   168cc:	bl	125bc <__printf_chk@plt>
   168d0:	movt	r5, #5
   168d4:	b	16800 <__assert_fail@plt+0x4028>
   168d8:	mov	r2, r5
   168dc:	movw	r1, #10144	; 0x27a0
   168e0:	movw	r3, #10316	; 0x284c
   168e4:	movt	r1, #5
   168e8:	movt	r3, #5
   168ec:	mov	r0, #1
   168f0:	bl	125bc <__printf_chk@plt>
   168f4:	movw	r5, #10648	; 0x2998
   168f8:	ldr	r3, [r4, #20]
   168fc:	movt	r5, #5
   16900:	b	167f8 <__assert_fail@plt+0x4020>
   16904:	mov	r2, r5
   16908:	movw	r1, #10144	; 0x27a0
   1690c:	movw	r3, #10288	; 0x2830
   16910:	movt	r1, #5
   16914:	movt	r3, #5
   16918:	mov	r0, #1
   1691c:	bl	125bc <__printf_chk@plt>
   16920:	movw	r5, #10648	; 0x2998
   16924:	ldr	r3, [r4, #20]
   16928:	movt	r5, #5
   1692c:	b	167d8 <__assert_fail@plt+0x4000>
   16930:	mov	r2, r5
   16934:	movw	r1, #10144	; 0x27a0
   16938:	movw	r3, #10256	; 0x2810
   1693c:	movt	r1, #5
   16940:	movt	r3, #5
   16944:	mov	r0, #1
   16948:	movw	r5, #10648	; 0x2998
   1694c:	bl	125bc <__printf_chk@plt>
   16950:	movt	r5, #5
   16954:	b	167bc <__assert_fail@plt+0x3fe4>
   16958:	mov	r2, r5
   1695c:	movw	r1, #10144	; 0x27a0
   16960:	movw	r3, #10248	; 0x2808
   16964:	movt	r1, #5
   16968:	movt	r3, #5
   1696c:	mov	r0, #1
   16970:	bl	125bc <__printf_chk@plt>
   16974:	movw	r5, #10648	; 0x2998
   16978:	ldr	r3, [r4, #20]
   1697c:	movt	r5, #5
   16980:	b	167b4 <__assert_fail@plt+0x3fdc>
   16984:	mov	r2, r5
   16988:	movw	r1, #10144	; 0x27a0
   1698c:	movw	r3, #10236	; 0x27fc
   16990:	movt	r1, #5
   16994:	movt	r3, #5
   16998:	mov	r0, #1
   1699c:	bl	125bc <__printf_chk@plt>
   169a0:	movw	r5, #10648	; 0x2998
   169a4:	ldr	r3, [r4, #20]
   169a8:	movt	r5, #5
   169ac:	b	167ac <__assert_fail@plt+0x3fd4>
   169b0:	mov	r2, r5
   169b4:	movw	r1, #10144	; 0x27a0
   169b8:	movw	r3, #10224	; 0x27f0
   169bc:	movt	r1, #5
   169c0:	movt	r3, #5
   169c4:	mov	r0, #1
   169c8:	bl	125bc <__printf_chk@plt>
   169cc:	movw	r5, #10648	; 0x2998
   169d0:	ldr	r3, [r4, #20]
   169d4:	movt	r5, #5
   169d8:	b	167a4 <__assert_fail@plt+0x3fcc>
   169dc:	mov	r2, r5
   169e0:	movw	r1, #10144	; 0x27a0
   169e4:	movw	r3, #10220	; 0x27ec
   169e8:	movt	r1, #5
   169ec:	movt	r3, #5
   169f0:	mov	r0, #1
   169f4:	bl	125bc <__printf_chk@plt>
   169f8:	movw	r5, #10648	; 0x2998
   169fc:	ldr	r3, [r4, #20]
   16a00:	movt	r5, #5
   16a04:	b	1679c <__assert_fail@plt+0x3fc4>
   16a08:	mov	r2, r5
   16a0c:	movw	r1, #10144	; 0x27a0
   16a10:	movw	r3, #10212	; 0x27e4
   16a14:	movt	r1, #5
   16a18:	movt	r3, #5
   16a1c:	mov	r0, #1
   16a20:	bl	125bc <__printf_chk@plt>
   16a24:	movw	r5, #10648	; 0x2998
   16a28:	ldr	r3, [r4, #20]
   16a2c:	movt	r5, #5
   16a30:	b	16794 <__assert_fail@plt+0x3fbc>
   16a34:	mov	r2, r5
   16a38:	movw	r1, #10144	; 0x27a0
   16a3c:	movw	r3, #10204	; 0x27dc
   16a40:	movt	r1, #5
   16a44:	movt	r3, #5
   16a48:	mov	r0, #1
   16a4c:	bl	125bc <__printf_chk@plt>
   16a50:	movw	r5, #10648	; 0x2998
   16a54:	ldr	r3, [r4, #20]
   16a58:	movt	r5, #5
   16a5c:	b	1678c <__assert_fail@plt+0x3fb4>
   16a60:	mov	r2, r5
   16a64:	movw	r1, #10144	; 0x27a0
   16a68:	movw	r3, #10192	; 0x27d0
   16a6c:	movt	r1, #5
   16a70:	movt	r3, #5
   16a74:	mov	r0, #1
   16a78:	bl	125bc <__printf_chk@plt>
   16a7c:	movw	r5, #10648	; 0x2998
   16a80:	ldr	r3, [r4, #20]
   16a84:	movt	r5, #5
   16a88:	b	16784 <__assert_fail@plt+0x3fac>
   16a8c:	mov	r2, r5
   16a90:	movw	r1, #10144	; 0x27a0
   16a94:	movw	r3, #10672	; 0x29b0
   16a98:	movt	r1, #5
   16a9c:	movt	r3, #5
   16aa0:	mov	r0, #1
   16aa4:	bl	125bc <__printf_chk@plt>
   16aa8:	movw	r5, #10648	; 0x2998
   16aac:	ldr	r3, [r4, #20]
   16ab0:	movt	r5, #5
   16ab4:	b	1677c <__assert_fail@plt+0x3fa4>
   16ab8:	mov	r2, r5
   16abc:	movw	r1, #10144	; 0x27a0
   16ac0:	movw	r3, #10184	; 0x27c8
   16ac4:	movt	r1, #5
   16ac8:	movt	r3, #5
   16acc:	mov	r0, #1
   16ad0:	bl	125bc <__printf_chk@plt>
   16ad4:	movw	r5, #10648	; 0x2998
   16ad8:	ldr	r3, [r4, #20]
   16adc:	movt	r5, #5
   16ae0:	b	16774 <__assert_fail@plt+0x3f9c>
   16ae4:	mov	r2, r5
   16ae8:	movw	r1, #10144	; 0x27a0
   16aec:	movw	r3, #10172	; 0x27bc
   16af0:	movt	r1, #5
   16af4:	movt	r3, #5
   16af8:	mov	r0, #1
   16afc:	bl	125bc <__printf_chk@plt>
   16b00:	movw	r5, #10648	; 0x2998
   16b04:	ldr	r3, [r4, #20]
   16b08:	movt	r5, #5
   16b0c:	b	1676c <__assert_fail@plt+0x3f94>
   16b10:	mov	r2, r5
   16b14:	movw	r1, #10144	; 0x27a0
   16b18:	movw	r3, #10164	; 0x27b4
   16b1c:	movt	r1, #5
   16b20:	movt	r3, #5
   16b24:	mov	r0, #1
   16b28:	bl	125bc <__printf_chk@plt>
   16b2c:	movw	r5, #10648	; 0x2998
   16b30:	ldr	r3, [r4, #20]
   16b34:	movt	r5, #5
   16b38:	b	16764 <__assert_fail@plt+0x3f8c>
   16b3c:	movw	r1, #10144	; 0x27a0
   16b40:	movw	r2, #11856	; 0x2e50
   16b44:	movt	r1, #5
   16b48:	movt	r2, #5
   16b4c:	movw	r3, #10152	; 0x27a8
   16b50:	mov	r0, #1
   16b54:	movt	r3, #5
   16b58:	movw	r5, #10648	; 0x2998
   16b5c:	bl	125bc <__printf_chk@plt>
   16b60:	movt	r5, #5
   16b64:	ldr	r3, [r4, #20]
   16b68:	b	1675c <__assert_fail@plt+0x3f84>
   16b6c:	movw	r1, #10124	; 0x278c
   16b70:	mov	r0, #1
   16b74:	movt	r1, #5
   16b78:	bl	125bc <__printf_chk@plt>
   16b7c:	b	16738 <__assert_fail@plt+0x3f60>
   16b80:	tst	r3, #268435456	; 0x10000000
   16b84:	bne	16c80 <__assert_fail@plt+0x44a8>
   16b88:	tst	r3, #536870912	; 0x20000000
   16b8c:	beq	167d0 <__assert_fail@plt+0x3ff8>
   16b90:	mov	r2, r5
   16b94:	movw	r1, #10144	; 0x27a0
   16b98:	movw	r3, #10280	; 0x2828
   16b9c:	movt	r1, #5
   16ba0:	movt	r3, #5
   16ba4:	mov	r0, #1
   16ba8:	bl	125bc <__printf_chk@plt>
   16bac:	movw	r5, #10648	; 0x2998
   16bb0:	ldr	r3, [r4, #20]
   16bb4:	movt	r5, #5
   16bb8:	b	167d0 <__assert_fail@plt+0x3ff8>
   16bbc:	tst	r3, #134217728	; 0x8000000
   16bc0:	bne	16cac <__assert_fail@plt+0x44d4>
   16bc4:	tst	r3, #1073741824	; 0x40000000
   16bc8:	beq	167f0 <__assert_fail@plt+0x4018>
   16bcc:	mov	r2, r5
   16bd0:	movw	r1, #10144	; 0x27a0
   16bd4:	movw	r3, #10308	; 0x2844
   16bd8:	movt	r1, #5
   16bdc:	movt	r3, #5
   16be0:	mov	r0, #1
   16be4:	bl	125bc <__printf_chk@plt>
   16be8:	movw	r5, #10648	; 0x2998
   16bec:	ldr	r3, [r4, #20]
   16bf0:	movt	r5, #5
   16bf4:	b	167f0 <__assert_fail@plt+0x4018>
   16bf8:	tst	r3, #536870912	; 0x20000000
   16bfc:	beq	16814 <__assert_fail@plt+0x403c>
   16c00:	mov	r2, r5
   16c04:	movw	r1, #10144	; 0x27a0
   16c08:	movw	r3, #10340	; 0x2864
   16c0c:	movt	r1, #5
   16c10:	movt	r3, #5
   16c14:	mov	r0, #1
   16c18:	bl	125bc <__printf_chk@plt>
   16c1c:	movw	r5, #10648	; 0x2998
   16c20:	ldr	r3, [r4, #20]
   16c24:	movt	r5, #5
   16c28:	b	16814 <__assert_fail@plt+0x403c>
   16c2c:	cmp	r3, #0
   16c30:	movweq	r3, #10004	; 0x2714
   16c34:	movteq	r3, #5
   16c38:	beq	16844 <__assert_fail@plt+0x406c>
   16c3c:	bl	12790 <abort@plt>
   16c40:	cmp	r3, #0
   16c44:	bge	167f0 <__assert_fail@plt+0x4018>
   16c48:	mov	r2, r5
   16c4c:	movw	r1, #10144	; 0x27a0
   16c50:	movw	r3, #10308	; 0x2844
   16c54:	movt	r1, #5
   16c58:	movt	r3, #5
   16c5c:	mov	r0, #1
   16c60:	bl	125bc <__printf_chk@plt>
   16c64:	movw	r5, #10648	; 0x2998
   16c68:	ldr	r3, [r4, #20]
   16c6c:	movt	r5, #5
   16c70:	b	167f0 <__assert_fail@plt+0x4018>
   16c74:	movw	r3, #10024	; 0x2728
   16c78:	movt	r3, #5
   16c7c:	b	16844 <__assert_fail@plt+0x406c>
   16c80:	mov	r2, r5
   16c84:	movw	r1, #10144	; 0x27a0
   16c88:	movw	r3, #10272	; 0x2820
   16c8c:	movt	r1, #5
   16c90:	movt	r3, #5
   16c94:	mov	r0, #1
   16c98:	bl	125bc <__printf_chk@plt>
   16c9c:	movw	r5, #10648	; 0x2998
   16ca0:	ldr	r3, [r4, #20]
   16ca4:	movt	r5, #5
   16ca8:	b	16b88 <__assert_fail@plt+0x43b0>
   16cac:	mov	r2, r5
   16cb0:	movw	r1, #10144	; 0x27a0
   16cb4:	movw	r3, #10300	; 0x283c
   16cb8:	movt	r1, #5
   16cbc:	movt	r3, #5
   16cc0:	mov	r0, #1
   16cc4:	bl	125bc <__printf_chk@plt>
   16cc8:	movw	r5, #10648	; 0x2998
   16ccc:	ldr	r3, [r4, #20]
   16cd0:	movt	r5, #5
   16cd4:	b	16bc4 <__assert_fail@plt+0x43ec>
   16cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cdc:	movw	r4, #65176	; 0xfe98
   16ce0:	movt	r4, #6
   16ce4:	sub	sp, sp, #124	; 0x7c
   16ce8:	mov	r2, #0
   16cec:	ldr	r3, [r4]
   16cf0:	str	r4, [sp, #4]
   16cf4:	str	r1, [sp, #8]
   16cf8:	str	r3, [sp, #116]	; 0x74
   16cfc:	str	r0, [sp, #24]
   16d00:	str	r2, [sp, #48]	; 0x30
   16d04:	bl	1249c <bfd_octets_per_byte@plt>
   16d08:	ldr	r5, [sp, #8]
   16d0c:	ldr	r3, [r5, #20]
   16d10:	tst	r3, #256	; 0x100
   16d14:	str	r0, [sp, #12]
   16d18:	bne	16d38 <__assert_fail@plt+0x4560>
   16d1c:	ldr	r4, [sp, #4]
   16d20:	ldr	r2, [sp, #116]	; 0x74
   16d24:	ldr	r3, [r4]
   16d28:	cmp	r2, r3
   16d2c:	bne	171f0 <__assert_fail@plt+0x4a18>
   16d30:	add	sp, sp, #124	; 0x7c
   16d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d38:	mov	r0, r5
   16d3c:	bl	16618 <__assert_fail@plt+0x3e40>
   16d40:	cmp	r0, #0
   16d44:	beq	16d1c <__assert_fail@plt+0x4544>
   16d48:	ldrd	r0, [r5, #48]	; 0x30
   16d4c:	orrs	r6, r0, r1
   16d50:	beq	16d1c <__assert_fail@plt+0x4544>
   16d54:	movw	ip, #62072	; 0xf278
   16d58:	movt	ip, #6
   16d5c:	mvn	r4, #0
   16d60:	mvn	r5, #0
   16d64:	ldrd	r2, [ip]
   16d68:	cmp	r3, r5
   16d6c:	cmpeq	r2, r4
   16d70:	beq	16e9c <__assert_fail@plt+0x46c4>
   16d74:	ldr	r7, [sp, #8]
   16d78:	ldrd	r4, [r7, #32]
   16d7c:	cmp	r3, r5
   16d80:	cmpeq	r2, r4
   16d84:	bcs	16e8c <__assert_fail@plt+0x46b4>
   16d88:	mov	r6, #0
   16d8c:	mov	r7, #0
   16d90:	strd	r6, [sp, #16]
   16d94:	ldrd	r6, [ip, #8]
   16d98:	mvn	r2, #0
   16d9c:	mvn	r3, #0
   16da0:	cmp	r7, r3
   16da4:	cmpeq	r6, r2
   16da8:	beq	16eac <__assert_fail@plt+0x46d4>
   16dac:	ldr	ip, [sp, #8]
   16db0:	ldrd	r4, [ip, #32]
   16db4:	cmp	r7, r5
   16db8:	cmpeq	r6, r4
   16dbc:	bcc	16d1c <__assert_fail@plt+0x4544>
   16dc0:	ldr	r2, [sp, #12]
   16dc4:	mov	r3, #0
   16dc8:	bl	4f48c <warn@@Base+0x5894>
   16dcc:	subs	r6, r6, r4
   16dd0:	sbc	r7, r7, r5
   16dd4:	strd	r0, [sp, #32]
   16dd8:	cmp	r7, r1
   16ddc:	cmpeq	r6, r0
   16de0:	strdls	r6, [sp, #32]
   16de4:	ldrd	r4, [sp, #16]
   16de8:	ldrd	r6, [sp, #32]
   16dec:	cmp	r5, r7
   16df0:	cmpeq	r4, r6
   16df4:	bcs	16d1c <__assert_fail@plt+0x4544>
   16df8:	mov	r2, #5
   16dfc:	movw	r1, #10368	; 0x2880
   16e00:	mov	r0, #0
   16e04:	movt	r1, #5
   16e08:	bl	12298 <dcgettext@plt>
   16e0c:	ldr	r7, [sp, #8]
   16e10:	ldr	r2, [r7]
   16e14:	mov	r1, r0
   16e18:	mov	r0, #1
   16e1c:	bl	125bc <__printf_chk@plt>
   16e20:	movw	r3, #992	; 0x3e0
   16e24:	movt	r3, #7
   16e28:	ldr	r3, [r3, #20]
   16e2c:	cmp	r3, #0
   16e30:	bne	171c4 <__assert_fail@plt+0x49ec>
   16e34:	mov	r0, #10
   16e38:	bl	1258c <putchar@plt>
   16e3c:	ldr	r0, [sp, #24]
   16e40:	ldr	r1, [sp, #8]
   16e44:	add	r2, sp, #48	; 0x30
   16e48:	bl	123c4 <bfd_get_full_section_contents@plt>
   16e4c:	cmp	r0, #0
   16e50:	bne	16ec0 <__assert_fail@plt+0x46e8>
   16e54:	mov	r2, #5
   16e58:	movw	r1, #10428	; 0x28bc
   16e5c:	movt	r1, #5
   16e60:	bl	12298 <dcgettext@plt>
   16e64:	ldr	ip, [sp, #8]
   16e68:	ldr	r4, [ip]
   16e6c:	mov	r5, r0
   16e70:	bl	12310 <bfd_get_error@plt>
   16e74:	bl	126e8 <bfd_errmsg@plt>
   16e78:	mov	r1, r4
   16e7c:	mov	r2, r0
   16e80:	mov	r0, r5
   16e84:	bl	485b4 <__assert_fail@plt+0x35ddc>
   16e88:	b	16d1c <__assert_fail@plt+0x4544>
   16e8c:	subs	r2, r2, r4
   16e90:	sbc	r3, r3, r5
   16e94:	strd	r2, [sp, #16]
   16e98:	b	16d94 <__assert_fail@plt+0x45bc>
   16e9c:	mov	r4, #0
   16ea0:	mov	r5, #0
   16ea4:	strd	r4, [sp, #16]
   16ea8:	b	16d94 <__assert_fail@plt+0x45bc>
   16eac:	ldr	r2, [sp, #12]
   16eb0:	mov	r3, #0
   16eb4:	bl	4f48c <warn@@Base+0x5894>
   16eb8:	strd	r0, [sp, #32]
   16ebc:	b	16de4 <__assert_fail@plt+0x460c>
   16ec0:	ldr	r4, [sp, #8]
   16ec4:	add	r1, sp, #52	; 0x34
   16ec8:	ldrd	r6, [sp, #16]
   16ecc:	ldr	r0, [sp, #24]
   16ed0:	ldrd	r2, [r4, #32]
   16ed4:	adds	r2, r2, r6
   16ed8:	adc	r3, r3, r7
   16edc:	bl	126b8 <bfd_sprintf_vma@plt>
   16ee0:	add	r0, sp, #52	; 0x34
   16ee4:	bl	124e4 <strlen@plt>
   16ee8:	cmp	r0, #63	; 0x3f
   16eec:	ldrbls	r3, [sp, #52]	; 0x34
   16ef0:	movls	r1, #0
   16ef4:	bls	16f18 <__assert_fail@plt+0x4740>
   16ef8:	b	171f4 <__assert_fail@plt+0x4a1c>
   16efc:	add	r2, r1, #1
   16f00:	add	r7, sp, #52	; 0x34
   16f04:	ldrb	r7, [r7, r2]
   16f08:	uxtb	r3, r7
   16f0c:	cmp	r3, #0
   16f10:	beq	16f20 <__assert_fail@plt+0x4748>
   16f14:	mov	r1, r2
   16f18:	cmp	r3, #48	; 0x30
   16f1c:	beq	16efc <__assert_fail@plt+0x4724>
   16f20:	ldr	r7, [sp, #8]
   16f24:	rsb	r4, r1, r0
   16f28:	add	r1, sp, #52	; 0x34
   16f2c:	ldr	r0, [sp, #24]
   16f30:	ldrd	r2, [r7, #32]
   16f34:	ldrd	r6, [sp, #32]
   16f38:	subs	r2, r2, #1
   16f3c:	sbc	r3, r3, #0
   16f40:	cmp	r4, #4
   16f44:	movlt	r4, #4
   16f48:	adds	r2, r2, r6
   16f4c:	adc	r3, r3, r7
   16f50:	bl	126b8 <bfd_sprintf_vma@plt>
   16f54:	add	r0, sp, #52	; 0x34
   16f58:	bl	124e4 <strlen@plt>
   16f5c:	cmp	r0, #63	; 0x3f
   16f60:	ldrbls	r3, [sp, #52]	; 0x34
   16f64:	movls	r1, #0
   16f68:	bls	16f8c <__assert_fail@plt+0x47b4>
   16f6c:	b	171f4 <__assert_fail@plt+0x4a1c>
   16f70:	add	r2, r1, #1
   16f74:	add	ip, sp, #52	; 0x34
   16f78:	ldrb	ip, [ip, r2]
   16f7c:	uxtb	r3, ip
   16f80:	cmp	r3, #0
   16f84:	beq	16f94 <__assert_fail@plt+0x47bc>
   16f88:	mov	r1, r2
   16f8c:	cmp	r3, #48	; 0x30
   16f90:	beq	16f70 <__assert_fail@plt+0x4798>
   16f94:	ldr	r6, [sp, #12]
   16f98:	rsb	r1, r1, r0
   16f9c:	ldr	r5, [sp, #32]
   16fa0:	cmp	r4, r1
   16fa4:	movlt	r4, r1
   16fa8:	ldr	r0, [sp, #36]	; 0x24
   16fac:	movw	r7, #976	; 0x3d0
   16fb0:	movw	ip, #65192	; 0xfea8
   16fb4:	movt	r7, #7
   16fb8:	umull	sl, fp, r5, r6
   16fbc:	movt	ip, #6
   16fc0:	str	r4, [sp, #40]	; 0x28
   16fc4:	str	r7, [sp, #28]
   16fc8:	str	ip, [sp, #44]	; 0x2c
   16fcc:	mla	fp, r6, r0, fp
   16fd0:	ldr	r4, [sp, #8]
   16fd4:	ldrd	r6, [sp, #16]
   16fd8:	add	r1, sp, #52	; 0x34
   16fdc:	ldr	r0, [sp, #24]
   16fe0:	ldrd	r2, [r4, #32]
   16fe4:	adds	r2, r2, r6
   16fe8:	adc	r3, r3, r7
   16fec:	bl	126b8 <bfd_sprintf_vma@plt>
   16ff0:	add	r0, sp, #52	; 0x34
   16ff4:	bl	124e4 <strlen@plt>
   16ff8:	cmp	r0, #63	; 0x3f
   16ffc:	mov	r5, r0
   17000:	mov	r4, r0
   17004:	bhi	171f4 <__assert_fail@plt+0x4a1c>
   17008:	ldr	r7, [sp, #28]
   1700c:	mov	r0, #32
   17010:	ldr	r1, [r7]
   17014:	bl	12334 <_IO_putc@plt>
   17018:	ldr	ip, [sp, #40]	; 0x28
   1701c:	cmp	r5, ip
   17020:	bge	17044 <__assert_fail@plt+0x486c>
   17024:	ldr	r6, [sp, #28]
   17028:	mov	r5, ip
   1702c:	add	r4, r4, #1
   17030:	mov	r0, #48	; 0x30
   17034:	ldr	r1, [r6]
   17038:	bl	12334 <_IO_putc@plt>
   1703c:	cmp	r4, r5
   17040:	bne	1702c <__assert_fail@plt+0x4854>
   17044:	ldr	r0, [sp, #16]
   17048:	add	r1, sp, #52	; 0x34
   1704c:	ldr	r5, [sp, #12]
   17050:	ldr	ip, [sp, #40]	; 0x28
   17054:	umull	r6, r7, r0, r5
   17058:	rsb	r0, ip, r4
   1705c:	ldr	r4, [sp, #28]
   17060:	add	r0, r1, r0
   17064:	ldr	r1, [r4]
   17068:	bl	12778 <fputs@plt>
   1706c:	mov	r0, #32
   17070:	ldr	r1, [r4]
   17074:	bl	12334 <_IO_putc@plt>
   17078:	ldr	ip, [sp, #20]
   1707c:	adds	r8, r6, #16
   17080:	mla	r7, r5, ip, r7
   17084:	adc	r9, r7, #0
   17088:	cmp	r7, r9
   1708c:	cmpeq	r6, r8
   17090:	bcs	17174 <__assert_fail@plt+0x499c>
   17094:	mov	r4, r6
   17098:	mov	r5, r7
   1709c:	b	170ec <__assert_fail@plt+0x4914>
   170a0:	ldr	r3, [sp, #48]	; 0x30
   170a4:	movw	r1, #10468	; 0x28e4
   170a8:	mov	r0, #1
   170ac:	movt	r1, #5
   170b0:	add	r3, r3, r4
   170b4:	ldrb	r2, [r3]
   170b8:	bl	125bc <__printf_chk@plt>
   170bc:	mov	r2, #3
   170c0:	mov	r3, #0
   170c4:	and	r2, r2, r4
   170c8:	and	r3, r3, r5
   170cc:	cmp	r3, #0
   170d0:	cmpeq	r2, #3
   170d4:	beq	1710c <__assert_fail@plt+0x4934>
   170d8:	adds	r4, r4, #1
   170dc:	adc	r5, r5, #0
   170e0:	cmp	r5, r9
   170e4:	cmpeq	r4, r8
   170e8:	beq	17118 <__assert_fail@plt+0x4940>
   170ec:	cmp	fp, r5
   170f0:	cmpeq	sl, r4
   170f4:	bhi	170a0 <__assert_fail@plt+0x48c8>
   170f8:	movw	r1, #16880	; 0x41f0
   170fc:	mov	r0, #1
   17100:	movt	r1, #5
   17104:	bl	125bc <__printf_chk@plt>
   17108:	b	170bc <__assert_fail@plt+0x48e4>
   1710c:	mov	r0, #32
   17110:	bl	1258c <putchar@plt>
   17114:	b	170d8 <__assert_fail@plt+0x4900>
   17118:	mov	r0, #32
   1711c:	bl	1258c <putchar@plt>
   17120:	ldr	r4, [sp, #44]	; 0x2c
   17124:	b	1715c <__assert_fail@plt+0x4984>
   17128:	ldr	r3, [sp, #48]	; 0x30
   1712c:	add	r3, r3, r6
   17130:	ldrb	r0, [r3]
   17134:	lsl	r3, r0, #1
   17138:	ldrh	r3, [r4, r3]
   1713c:	tst	r3, #16
   17140:	moveq	r0, #46	; 0x2e
   17144:	bl	1258c <putchar@plt>
   17148:	adds	r6, r6, #1
   1714c:	adc	r7, r7, #0
   17150:	cmp	r7, r9
   17154:	cmpeq	r6, r8
   17158:	beq	1717c <__assert_fail@plt+0x49a4>
   1715c:	cmp	r7, fp
   17160:	cmpeq	r6, sl
   17164:	bcc	17128 <__assert_fail@plt+0x4950>
   17168:	mov	r0, #32
   1716c:	bl	1258c <putchar@plt>
   17170:	b	17148 <__assert_fail@plt+0x4970>
   17174:	mov	r0, #32
   17178:	bl	1258c <putchar@plt>
   1717c:	ldr	r4, [sp, #28]
   17180:	mov	r0, #10
   17184:	ldr	r1, [r4]
   17188:	bl	12334 <_IO_putc@plt>
   1718c:	mov	r0, #16
   17190:	ldr	r1, [sp, #12]
   17194:	bl	4f040 <warn@@Base+0x5448>
   17198:	ldrd	r6, [sp, #16]
   1719c:	ldrd	r4, [sp, #32]
   171a0:	adds	r6, r6, r0
   171a4:	adc	r7, r7, #0
   171a8:	strd	r6, [sp, #16]
   171ac:	cmp	r5, r7
   171b0:	cmpeq	r4, r6
   171b4:	bhi	16fd0 <__assert_fail@plt+0x47f8>
   171b8:	ldr	r0, [sp, #48]	; 0x30
   171bc:	bl	121f0 <free@plt>
   171c0:	b	16d1c <__assert_fail@plt+0x4544>
   171c4:	mov	r2, #5
   171c8:	movw	r1, #10392	; 0x2898
   171cc:	mov	r0, #0
   171d0:	movt	r1, #5
   171d4:	bl	12298 <dcgettext@plt>
   171d8:	ldr	r2, [r7, #112]	; 0x70
   171dc:	add	r2, r2, r4
   171e0:	mov	r1, r0
   171e4:	mov	r0, #1
   171e8:	bl	125bc <__printf_chk@plt>
   171ec:	b	16e34 <__assert_fail@plt+0x465c>
   171f0:	bl	122b0 <__stack_chk_fail@plt>
   171f4:	bl	12790 <abort@plt>
   171f8:	cmp	r0, #0
   171fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17200:	movw	r7, #992	; 0x3e0
   17204:	movt	r7, #7
   17208:	movwne	r0, #10476	; 0x28ec
   1720c:	movweq	r0, #10484	; 0x28f4
   17210:	movtne	r0, #5
   17214:	ldrne	r8, [r7, #68]	; 0x44
   17218:	movteq	r0, #5
   1721c:	ldreq	r8, [r7, #72]	; 0x48
   17220:	ldrne	r6, [r7, #64]	; 0x40
   17224:	ldreq	r6, [r7, #36]	; 0x24
   17228:	bl	12418 <puts@plt>
   1722c:	cmp	r8, #0
   17230:	beq	1738c <__assert_fail@plt+0x4bb4>
   17234:	ble	1730c <__assert_fail@plt+0x4b34>
   17238:	movw	r9, #976	; 0x3d0
   1723c:	mov	r4, #0
   17240:	movt	r9, #7
   17244:	b	172b8 <__assert_fail@plt+0x4ae0>
   17248:	ldr	r0, [r0, #20]
   1724c:	bl	16618 <__assert_fail@plt+0x3e40>
   17250:	cmp	r0, #0
   17254:	beq	172ac <__assert_fail@plt+0x4ad4>
   17258:	ldr	r3, [r7, #76]	; 0x4c
   1725c:	cmp	r3, #0
   17260:	beq	1731c <__assert_fail@plt+0x4b44>
   17264:	ldr	r3, [r7, #12]
   17268:	ldr	r2, [r6, #-4]
   1726c:	cmp	r3, #0
   17270:	ldr	sl, [r2, #4]
   17274:	beq	1728c <__assert_fail@plt+0x4ab4>
   17278:	cmp	sl, #0
   1727c:	beq	1728c <__assert_fail@plt+0x4ab4>
   17280:	ldrb	r3, [sl]
   17284:	cmp	r3, #0
   17288:	bne	1733c <__assert_fail@plt+0x4b64>
   1728c:	ldr	ip, [r5, #4]
   17290:	mov	r0, r5
   17294:	ldr	r1, [r9]
   17298:	mov	r3, #2
   1729c:	ldr	ip, [ip, #272]	; 0x110
   172a0:	blx	ip
   172a4:	mov	r0, #10
   172a8:	bl	1258c <putchar@plt>
   172ac:	add	r4, r4, #1
   172b0:	cmp	r4, r8
   172b4:	beq	1730c <__assert_fail@plt+0x4b34>
   172b8:	ldr	r0, [r6], #4
   172bc:	cmp	r0, #0
   172c0:	movweq	r1, #10512	; 0x2910
   172c4:	moveq	r2, #5
   172c8:	movteq	r1, #5
   172cc:	beq	172ec <__assert_fail@plt+0x4b14>
   172d0:	ldr	r5, [r0]
   172d4:	cmp	r5, #0
   172d8:	bne	17248 <__assert_fail@plt+0x4a70>
   172dc:	movw	r1, #10552	; 0x2938
   172e0:	movt	r1, #5
   172e4:	mov	r0, r5
   172e8:	mov	r2, #5
   172ec:	bl	12298 <dcgettext@plt>
   172f0:	mov	r2, r4
   172f4:	add	r4, r4, #1
   172f8:	mov	r1, r0
   172fc:	mov	r0, #1
   17300:	bl	125bc <__printf_chk@plt>
   17304:	cmp	r4, r8
   17308:	bne	172b8 <__assert_fail@plt+0x4ae0>
   1730c:	movw	r0, #15480	; 0x3c78
   17310:	movt	r0, #5
   17314:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17318:	b	12418 <puts@plt>
   1731c:	ldr	r3, [r5, #4]
   17320:	mov	r0, r5
   17324:	ldr	r1, [r6, #-4]
   17328:	ldr	r3, [r3, #288]	; 0x120
   1732c:	blx	r3
   17330:	cmp	r0, #0
   17334:	beq	17264 <__assert_fail@plt+0x4a8c>
   17338:	b	172ac <__assert_fail@plt+0x4ad4>
   1733c:	mov	r0, r5
   17340:	mov	r1, sl
   17344:	mov	r2, #3
   17348:	bl	1264c <bfd_demangle@plt>
   1734c:	subs	fp, r0, #0
   17350:	beq	173bc <__assert_fail@plt+0x4be4>
   17354:	ldr	r2, [r5, #4]
   17358:	mov	r0, r5
   1735c:	ldr	ip, [r6, #-4]
   17360:	mov	r3, #2
   17364:	ldr	r1, [r9]
   17368:	str	fp, [ip, #4]
   1736c:	ldr	ip, [r2, #272]	; 0x110
   17370:	ldr	r2, [r6, #-4]
   17374:	blx	ip
   17378:	ldr	r3, [r6, #-4]
   1737c:	mov	r0, fp
   17380:	str	sl, [r3, #4]
   17384:	bl	121f0 <free@plt>
   17388:	b	172a4 <__assert_fail@plt+0x4acc>
   1738c:	mov	r0, r8
   17390:	mov	r2, #5
   17394:	movw	r1, #10500	; 0x2904
   17398:	movt	r1, #5
   1739c:	bl	12298 <dcgettext@plt>
   173a0:	mov	r1, r0
   173a4:	mov	r0, #1
   173a8:	bl	125bc <__printf_chk@plt>
   173ac:	movw	r0, #15480	; 0x3c78
   173b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173b4:	movt	r0, #5
   173b8:	b	12418 <puts@plt>
   173bc:	ldr	ip, [r5, #4]
   173c0:	mov	r0, r5
   173c4:	ldr	r1, [r9]
   173c8:	mov	r3, #2
   173cc:	ldr	r2, [r6, #-4]
   173d0:	ldr	ip, [ip, #272]	; 0x110
   173d4:	blx	ip
   173d8:	b	172a4 <__assert_fail@plt+0x4acc>
   173dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173e0:	movw	r6, #992	; 0x3e0
   173e4:	movt	r6, #7
   173e8:	movw	r8, #65176	; 0xfe98
   173ec:	movt	r8, #6
   173f0:	sub	sp, sp, #236	; 0xec
   173f4:	ldrd	r4, [r6, #48]	; 0x30
   173f8:	mov	r7, r0
   173fc:	ldr	r3, [r8]
   17400:	orrs	r2, r4, r5
   17404:	str	r3, [sp, #228]	; 0xe4
   17408:	bne	17894 <__assert_fail@plt+0x50bc>
   1740c:	ldr	r2, [r6, #80]	; 0x50
   17410:	movw	r3, #992	; 0x3e0
   17414:	movt	r3, #7
   17418:	cmp	r2, #0
   1741c:	bne	1742c <__assert_fail@plt+0x4c54>
   17420:	ldr	r0, [r3, #84]	; 0x54
   17424:	cmp	r0, #0
   17428:	beq	17e8c <__assert_fail@plt+0x56b4>
   1742c:	ldr	r3, [r6, #88]	; 0x58
   17430:	cmp	r3, #0
   17434:	bne	179f0 <__assert_fail@plt+0x5218>
   17438:	ldr	r3, [r6, #92]	; 0x5c
   1743c:	cmp	r3, #0
   17440:	bne	178b4 <__assert_fail@plt+0x50dc>
   17444:	ldr	r3, [r6, #96]	; 0x60
   17448:	cmp	r3, #0
   1744c:	bne	179d0 <__assert_fail@plt+0x51f8>
   17450:	ldr	r3, [r6, #100]	; 0x64
   17454:	cmp	r3, #0
   17458:	beq	17474 <__assert_fail@plt+0x4c9c>
   1745c:	movw	r1, #10800	; 0x2a30
   17460:	mov	r2, #5
   17464:	movt	r1, #5
   17468:	mov	r0, #0
   1746c:	bl	12298 <dcgettext@plt>
   17470:	bl	485b4 <__assert_fail@plt+0x35ddc>
   17474:	ldr	r2, [r6, #80]	; 0x50
   17478:	movw	r3, #992	; 0x3e0
   1747c:	movt	r3, #7
   17480:	cmp	r2, #0
   17484:	bne	17494 <__assert_fail@plt+0x4cbc>
   17488:	ldr	r3, [r3, #84]	; 0x54
   1748c:	cmp	r3, #0
   17490:	beq	17eb8 <__assert_fail@plt+0x56e0>
   17494:	ldr	r2, [r6, #104]	; 0x68
   17498:	movw	r3, #992	; 0x3e0
   1749c:	movt	r3, #7
   174a0:	cmp	r2, #0
   174a4:	bne	174b4 <__assert_fail@plt+0x4cdc>
   174a8:	ldr	r2, [r3, #108]	; 0x6c
   174ac:	cmp	r2, #0
   174b0:	beq	17748 <__assert_fail@plt+0x4f70>
   174b4:	ldr	r1, [r7, #40]	; 0x28
   174b8:	ubfx	r1, r1, #5, #20
   174bc:	ands	r4, r1, #16
   174c0:	streq	r4, [r6, #72]	; 0x48
   174c4:	beq	17504 <__assert_fail@plt+0x4d2c>
   174c8:	ldr	r3, [r7, #4]
   174cc:	mov	r0, r7
   174d0:	ldr	r3, [r3, #260]	; 0x104
   174d4:	blx	r3
   174d8:	subs	r4, r0, #0
   174dc:	blt	18194 <__assert_fail@plt+0x59bc>
   174e0:	bne	17e74 <__assert_fail@plt+0x569c>
   174e4:	ldr	r3, [r7, #4]
   174e8:	mov	r0, r7
   174ec:	mov	r1, r4
   174f0:	ldr	r3, [r3, #264]	; 0x108
   174f4:	blx	r3
   174f8:	cmp	r0, #0
   174fc:	str	r0, [r6, #72]	; 0x48
   17500:	blt	18130 <__assert_fail@plt+0x5958>
   17504:	str	r4, [r6, #36]	; 0x24
   17508:	ldr	r3, [r6, #124]	; 0x7c
   1750c:	cmp	r3, #0
   17510:	bne	17df0 <__assert_fail@plt+0x5618>
   17514:	ldr	r2, [r6, #128]	; 0x80
   17518:	movw	r3, #992	; 0x3e0
   1751c:	movt	r3, #7
   17520:	cmp	r2, #0
   17524:	bne	17534 <__assert_fail@plt+0x4d5c>
   17528:	ldr	r2, [r3, #132]	; 0x84
   1752c:	cmp	r2, #0
   17530:	beq	17770 <__assert_fail@plt+0x4f98>
   17534:	ldr	r3, [r7, #4]
   17538:	mov	r0, r7
   1753c:	ldr	r3, [r3, #412]	; 0x19c
   17540:	blx	r3
   17544:	subs	r4, r0, #0
   17548:	blt	17f38 <__assert_fail@plt+0x5760>
   1754c:	bne	17e80 <__assert_fail@plt+0x56a8>
   17550:	ldr	r3, [r7, #4]
   17554:	mov	r0, r7
   17558:	mov	r1, r4
   1755c:	ldr	r3, [r3, #416]	; 0x1a0
   17560:	blx	r3
   17564:	cmp	r0, #0
   17568:	str	r0, [r6, #68]	; 0x44
   1756c:	blt	18130 <__assert_fail@plt+0x5958>
   17570:	str	r4, [r6, #64]	; 0x40
   17574:	ldr	r3, [r6, #112]	; 0x70
   17578:	movw	r4, #992	; 0x3e0
   1757c:	movt	r4, #7
   17580:	cmp	r3, #0
   17584:	bne	17798 <__assert_fail@plt+0x4fc0>
   17588:	ldr	r3, [r6, #104]	; 0x68
   1758c:	cmp	r3, #0
   17590:	bne	177dc <__assert_fail@plt+0x5004>
   17594:	ldr	r3, [r6, #128]	; 0x80
   17598:	cmp	r3, #0
   1759c:	bne	177f0 <__assert_fail@plt+0x5018>
   175a0:	ldr	r3, [r6, #120]	; 0x78
   175a4:	cmp	r3, #0
   175a8:	bne	17804 <__assert_fail@plt+0x502c>
   175ac:	ldr	r3, [r6, #144]	; 0x90
   175b0:	cmp	r3, #0
   175b4:	bne	17818 <__assert_fail@plt+0x5040>
   175b8:	ldr	r2, [r6, #108]	; 0x6c
   175bc:	movw	r3, #992	; 0x3e0
   175c0:	movt	r3, #7
   175c4:	cmp	r2, #0
   175c8:	beq	175d8 <__assert_fail@plt+0x4e00>
   175cc:	ldr	r2, [r3, #112]	; 0x70
   175d0:	cmp	r2, #0
   175d4:	beq	17ed0 <__assert_fail@plt+0x56f8>
   175d8:	ldr	r3, [r6, #132]	; 0x84
   175dc:	movw	r4, #992	; 0x3e0
   175e0:	movt	r4, #7
   175e4:	cmp	r3, #0
   175e8:	bne	176a8 <__assert_fail@plt+0x4ed0>
   175ec:	ldr	r3, [r6, #148]	; 0x94
   175f0:	cmp	r3, #0
   175f4:	bne	17dd8 <__assert_fail@plt+0x5600>
   175f8:	ldr	r2, [r6, #112]	; 0x70
   175fc:	movw	r3, #992	; 0x3e0
   17600:	movt	r3, #7
   17604:	cmp	r2, #0
   17608:	bne	17a88 <__assert_fail@plt+0x52b0>
   1760c:	ldr	r3, [r6, #116]	; 0x74
   17610:	movw	r4, #992	; 0x3e0
   17614:	movt	r4, #7
   17618:	cmp	r3, #0
   1761c:	bne	17a0c <__assert_fail@plt+0x5234>
   17620:	ldr	r0, [r6, #36]	; 0x24
   17624:	movw	r4, #992	; 0x3e0
   17628:	movt	r4, #7
   1762c:	cmp	r0, #0
   17630:	beq	17640 <__assert_fail@plt+0x4e68>
   17634:	bl	121f0 <free@plt>
   17638:	mov	r3, #0
   1763c:	str	r3, [r4, #36]	; 0x24
   17640:	ldr	r0, [r6, #64]	; 0x40
   17644:	movw	r4, #992	; 0x3e0
   17648:	movt	r4, #7
   1764c:	cmp	r0, #0
   17650:	beq	17660 <__assert_fail@plt+0x4e88>
   17654:	bl	121f0 <free@plt>
   17658:	mov	r3, #0
   1765c:	str	r3, [r4, #64]	; 0x40
   17660:	ldr	r0, [r6, #136]	; 0x88
   17664:	movw	r4, #992	; 0x3e0
   17668:	movt	r4, #7
   1766c:	cmp	r0, #0
   17670:	beq	17680 <__assert_fail@plt+0x4ea8>
   17674:	bl	121f0 <free@plt>
   17678:	mov	r3, #0
   1767c:	str	r3, [r4, #136]	; 0x88
   17680:	ldr	r1, [sp, #228]	; 0xe4
   17684:	mov	r3, #0
   17688:	ldr	r2, [r8]
   1768c:	str	r3, [r6, #72]	; 0x48
   17690:	cmp	r1, r2
   17694:	str	r3, [r6, #68]	; 0x44
   17698:	str	r3, [r6, #140]	; 0x8c
   1769c:	bne	181c8 <__assert_fail@plt+0x59f0>
   176a0:	add	sp, sp, #236	; 0xec
   176a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176a8:	ldr	r5, [r4, #112]	; 0x70
   176ac:	cmp	r5, #0
   176b0:	bne	175ec <__assert_fail@plt+0x4e14>
   176b4:	ldr	r3, [r7, #4]
   176b8:	mov	r0, r7
   176bc:	ldr	r3, [r3, #424]	; 0x1a8
   176c0:	blx	r3
   176c4:	subs	r9, r0, #0
   176c8:	blt	18130 <__assert_fail@plt+0x5958>
   176cc:	movw	r1, #11244	; 0x2bec
   176d0:	mov	r0, #1
   176d4:	movt	r1, #5
   176d8:	bl	125bc <__printf_chk@plt>
   176dc:	cmp	r9, #0
   176e0:	beq	18138 <__assert_fail@plt+0x5960>
   176e4:	mov	r0, r9
   176e8:	bl	12358 <xmalloc@plt>
   176ec:	ldr	r3, [r7, #4]
   176f0:	ldr	r2, [r4, #64]	; 0x40
   176f4:	ldr	r3, [r3, #428]	; 0x1ac
   176f8:	mov	r1, r0
   176fc:	mov	r9, r0
   17700:	mov	r0, r7
   17704:	blx	r3
   17708:	subs	r4, r0, #0
   1770c:	blt	18130 <__assert_fail@plt+0x5958>
   17710:	beq	18148 <__assert_fail@plt+0x5970>
   17714:	mov	r0, #10
   17718:	bl	1258c <putchar@plt>
   1771c:	mov	r0, r7
   17720:	mov	r1, r5
   17724:	mov	r2, r9
   17728:	mov	r3, r4
   1772c:	bl	15970 <__assert_fail@plt+0x3198>
   17730:	movw	r0, #15480	; 0x3c78
   17734:	movt	r0, #5
   17738:	bl	12418 <puts@plt>
   1773c:	mov	r0, r9
   17740:	bl	121f0 <free@plt>
   17744:	b	175ec <__assert_fail@plt+0x4e14>
   17748:	ldr	r2, [r3, #112]	; 0x70
   1774c:	cmp	r2, #0
   17750:	bne	174b4 <__assert_fail@plt+0x4cdc>
   17754:	ldr	r2, [r3, #116]	; 0x74
   17758:	cmp	r2, #0
   1775c:	bne	174b4 <__assert_fail@plt+0x4cdc>
   17760:	ldr	r3, [r3, #120]	; 0x78
   17764:	cmp	r3, #0
   17768:	beq	17508 <__assert_fail@plt+0x4d30>
   1776c:	b	174b4 <__assert_fail@plt+0x4cdc>
   17770:	ldr	r3, [r3, #112]	; 0x70
   17774:	cmp	r3, #0
   17778:	beq	17588 <__assert_fail@plt+0x4db0>
   1777c:	ldr	r3, [r7, #4]
   17780:	mov	r0, r7
   17784:	ldr	r3, [r3, #412]	; 0x19c
   17788:	blx	r3
   1778c:	cmp	r0, #0
   17790:	bgt	17534 <__assert_fail@plt+0x4d5c>
   17794:	b	17574 <__assert_fail@plt+0x4d9c>
   17798:	ldr	ip, [r7, #4]
   1779c:	add	lr, r4, #136	; 0x88
   177a0:	ldr	r5, [r4, #64]	; 0x40
   177a4:	mov	r0, r7
   177a8:	ldr	r3, [r4, #68]	; 0x44
   177ac:	ldr	r1, [r4, #72]	; 0x48
   177b0:	ldr	r2, [r4, #36]	; 0x24
   177b4:	stm	sp, {r5, lr}
   177b8:	ldr	ip, [ip, #420]	; 0x1a4
   177bc:	blx	ip
   177c0:	cmp	r0, #0
   177c4:	strge	r0, [r4, #140]	; 0x8c
   177c8:	movlt	r3, #0
   177cc:	strlt	r3, [r4, #140]	; 0x8c
   177d0:	ldr	r3, [r6, #104]	; 0x68
   177d4:	cmp	r3, #0
   177d8:	beq	17594 <__assert_fail@plt+0x4dbc>
   177dc:	mov	r0, #0
   177e0:	bl	171f8 <__assert_fail@plt+0x4a20>
   177e4:	ldr	r3, [r6, #128]	; 0x80
   177e8:	cmp	r3, #0
   177ec:	beq	175a0 <__assert_fail@plt+0x4dc8>
   177f0:	mov	r0, #1
   177f4:	bl	171f8 <__assert_fail@plt+0x4a20>
   177f8:	ldr	r3, [r6, #120]	; 0x78
   177fc:	cmp	r3, #0
   17800:	beq	175ac <__assert_fail@plt+0x4dd4>
   17804:	mov	r0, r7
   17808:	bl	16478 <__assert_fail@plt+0x3ca0>
   1780c:	ldr	r3, [r6, #144]	; 0x90
   17810:	cmp	r3, #0
   17814:	beq	175b8 <__assert_fail@plt+0x4de0>
   17818:	mov	r0, r7
   1781c:	movw	r1, #11100	; 0x2b5c
   17820:	movw	r2, #11108	; 0x2b64
   17824:	movt	r1, #5
   17828:	movt	r2, #5
   1782c:	bl	1528c <__assert_fail@plt+0x2ab4>
   17830:	mov	r0, r7
   17834:	movw	r1, #11120	; 0x2b70
   17838:	movw	r2, #11132	; 0x2b7c
   1783c:	movt	r1, #5
   17840:	movt	r2, #5
   17844:	bl	1528c <__assert_fail@plt+0x2ab4>
   17848:	mov	r0, r7
   1784c:	movw	r1, #11148	; 0x2b8c
   17850:	movw	r2, #11160	; 0x2b98
   17854:	movt	r1, #5
   17858:	movt	r2, #5
   1785c:	bl	1528c <__assert_fail@plt+0x2ab4>
   17860:	mov	r0, r7
   17864:	movw	r1, #11176	; 0x2ba8
   17868:	movw	r2, #11192	; 0x2bb8
   1786c:	movt	r1, #5
   17870:	movt	r2, #5
   17874:	bl	1528c <__assert_fail@plt+0x2ab4>
   17878:	mov	r0, r7
   1787c:	movw	r1, #11212	; 0x2bcc
   17880:	movw	r2, #11228	; 0x2bdc
   17884:	movt	r1, #5
   17888:	movt	r2, #5
   1788c:	bl	1528c <__assert_fail@plt+0x2ab4>
   17890:	b	175b8 <__assert_fail@plt+0x4de0>
   17894:	ldr	r3, [r0, #40]	; 0x28
   17898:	add	r2, sp, #232	; 0xe8
   1789c:	movw	r1, #26052	; 0x65c4
   178a0:	movt	r1, #1
   178a4:	ubfx	r3, r3, #5, #1
   178a8:	str	r3, [r2, #-184]!	; 0xffffff48
   178ac:	bl	12754 <bfd_map_over_sections@plt>
   178b0:	b	1740c <__assert_fail@plt+0x4c34>
   178b4:	mov	r2, #5
   178b8:	movw	r1, #10632	; 0x2988
   178bc:	mov	r0, #0
   178c0:	movt	r1, #5
   178c4:	bl	12298 <dcgettext@plt>
   178c8:	mov	r4, r0
   178cc:	mov	r0, r7
   178d0:	bl	12508 <bfd_get_arch@plt>
   178d4:	mov	r5, r0
   178d8:	mov	r0, r7
   178dc:	bl	125b0 <bfd_get_mach@plt>
   178e0:	mov	r1, r0
   178e4:	mov	r0, r5
   178e8:	bl	1252c <bfd_printable_arch_mach@plt>
   178ec:	mov	r1, r4
   178f0:	mov	r2, r0
   178f4:	mov	r0, #1
   178f8:	bl	125bc <__printf_chk@plt>
   178fc:	mov	r2, #5
   17900:	movw	r1, #10652	; 0x299c
   17904:	mov	r0, #0
   17908:	movt	r1, #5
   1790c:	bl	12298 <dcgettext@plt>
   17910:	ldr	r2, [r7, #40]	; 0x28
   17914:	ubfx	r2, r2, #5, #10
   17918:	mov	r1, r0
   1791c:	mov	r0, #1
   17920:	bl	125bc <__printf_chk@plt>
   17924:	ldr	r3, [r7, #40]	; 0x28
   17928:	ubfx	r3, r3, #5, #20
   1792c:	tst	r3, #1
   17930:	movweq	r2, #11856	; 0x2e50
   17934:	movteq	r2, #5
   17938:	bne	180f0 <__assert_fail@plt+0x5918>
   1793c:	tst	r3, #2
   17940:	bne	180c4 <__assert_fail@plt+0x58ec>
   17944:	tst	r3, #4
   17948:	bne	18098 <__assert_fail@plt+0x58c0>
   1794c:	tst	r3, #8
   17950:	bne	1806c <__assert_fail@plt+0x5894>
   17954:	tst	r3, #16
   17958:	bne	18040 <__assert_fail@plt+0x5868>
   1795c:	tst	r3, #32
   17960:	bne	18014 <__assert_fail@plt+0x583c>
   17964:	tst	r3, #64	; 0x40
   17968:	bne	17fe8 <__assert_fail@plt+0x5810>
   1796c:	tst	r3, #128	; 0x80
   17970:	bne	17fbc <__assert_fail@plt+0x57e4>
   17974:	tst	r3, #256	; 0x100
   17978:	bne	17f90 <__assert_fail@plt+0x57b8>
   1797c:	tst	r3, #512	; 0x200
   17980:	bne	17f1c <__assert_fail@plt+0x5744>
   17984:	mov	r2, #5
   17988:	movw	r1, #10780	; 0x2a1c
   1798c:	mov	r0, #0
   17990:	movt	r1, #5
   17994:	bl	12298 <dcgettext@plt>
   17998:	mov	r1, r0
   1799c:	mov	r0, #1
   179a0:	bl	125bc <__printf_chk@plt>
   179a4:	movw	r1, #976	; 0x3d0
   179a8:	movt	r1, #7
   179ac:	ldrd	r2, [r7, #120]	; 0x78
   179b0:	mov	r0, r7
   179b4:	ldr	r1, [r1]
   179b8:	bl	1273c <bfd_fprintf_vma@plt>
   179bc:	mov	r0, #10
   179c0:	bl	1258c <putchar@plt>
   179c4:	ldr	r3, [r6, #96]	; 0x60
   179c8:	cmp	r3, #0
   179cc:	beq	17450 <__assert_fail@plt+0x4c78>
   179d0:	ldr	r2, [r7, #4]
   179d4:	movw	r3, #976	; 0x3d0
   179d8:	movt	r3, #7
   179dc:	mov	r0, r7
   179e0:	ldr	r1, [r3]
   179e4:	ldr	r3, [r2, #196]	; 0xc4
   179e8:	blx	r3
   179ec:	b	17450 <__assert_fail@plt+0x4c78>
   179f0:	movw	r3, #976	; 0x3d0
   179f4:	movt	r3, #7
   179f8:	mov	r1, r7
   179fc:	mov	r2, #1
   17a00:	ldr	r0, [r3]
   17a04:	bl	48d44 <__assert_fail@plt+0x3656c>
   17a08:	b	17438 <__assert_fail@plt+0x4c60>
   17a0c:	ldr	r1, [r4, #36]	; 0x24
   17a10:	mov	r0, r7
   17a14:	ldr	r2, [r4, #72]	; 0x48
   17a18:	mov	r3, #1
   17a1c:	bl	31adc <__assert_fail@plt+0x1f304>
   17a20:	subs	r1, r0, #0
   17a24:	beq	17f74 <__assert_fail@plt+0x579c>
   17a28:	ldr	ip, [r4, #80]	; 0x50
   17a2c:	movw	r2, #976	; 0x3d0
   17a30:	movt	r2, #7
   17a34:	ldr	r3, [r4, #36]	; 0x24
   17a38:	adds	ip, ip, #0
   17a3c:	ldr	r0, [r2]
   17a40:	movw	r2, #9804	; 0x264c
   17a44:	movne	ip, #1
   17a48:	movt	r2, #1
   17a4c:	str	ip, [sp, #4]
   17a50:	str	r2, [sp]
   17a54:	mov	r2, r7
   17a58:	bl	317b4 <__assert_fail@plt+0x1efdc>
   17a5c:	cmp	r0, #0
   17a60:	bne	17620 <__assert_fail@plt+0x4e48>
   17a64:	mov	r2, #5
   17a68:	movw	r1, #11376	; 0x2c70
   17a6c:	movt	r1, #5
   17a70:	bl	12298 <dcgettext@plt>
   17a74:	ldr	r1, [r7]
   17a78:	bl	485b4 <__assert_fail@plt+0x35ddc>
   17a7c:	mov	r3, #1
   17a80:	str	r3, [r4, #16]
   17a84:	b	17620 <__assert_fail@plt+0x4e48>
   17a88:	ldr	r1, [r3, #72]	; 0x48
   17a8c:	mov	r2, #0
   17a90:	mvn	r0, #0
   17a94:	str	r2, [r3, #40]	; 0x28
   17a98:	cmp	r1, r2
   17a9c:	str	r2, [r3, #152]	; 0x98
   17aa0:	str	r2, [r3, #160]	; 0xa0
   17aa4:	movw	r4, #992	; 0x3e0
   17aa8:	str	r0, [r3, #156]	; 0x9c
   17aac:	movne	r3, r1
   17ab0:	ldreq	r3, [r3, #68]	; 0x44
   17ab4:	movt	r4, #7
   17ab8:	ldr	r2, [r6, #140]	; 0x8c
   17abc:	add	r0, r3, r2
   17ac0:	str	r3, [r6]
   17ac4:	lsl	r0, r0, #2
   17ac8:	bl	12358 <xmalloc@plt>
   17acc:	ldr	r3, [r6, #72]	; 0x48
   17ad0:	cmp	r3, #0
   17ad4:	ldrne	r1, [r4, #36]	; 0x24
   17ad8:	ldreq	r1, [r4, #64]	; 0x40
   17adc:	ldr	r4, [r6]
   17ae0:	lsl	r2, r4, #2
   17ae4:	mov	r9, r0
   17ae8:	str	r0, [r6, #4]
   17aec:	str	r9, [sp, #12]
   17af0:	mov	fp, r9
   17af4:	bl	1222c <memcpy@plt>
   17af8:	subs	r4, r4, #1
   17afc:	bmi	17ba0 <__assert_fail@plt+0x53c8>
   17b00:	ldr	sl, [fp], #4
   17b04:	ldr	r5, [sl, #4]
   17b08:	cmp	r5, #0
   17b0c:	beq	17af8 <__assert_fail@plt+0x5320>
   17b10:	ldrb	r2, [r5]
   17b14:	cmp	r2, #0
   17b18:	beq	17af8 <__assert_fail@plt+0x5320>
   17b1c:	ldr	r2, [sl, #16]
   17b20:	tst	r2, #260	; 0x104
   17b24:	beq	17b70 <__assert_fail@plt+0x5398>
   17b28:	movw	r1, #11284	; 0x2c14
   17b2c:	mov	r0, r5
   17b30:	movt	r1, #5
   17b34:	bl	12178 <strcmp@plt>
   17b38:	cmp	r0, #0
   17b3c:	beq	17b70 <__assert_fail@plt+0x5398>
   17b40:	movw	r1, #11296	; 0x2c20
   17b44:	mov	r0, r5
   17b48:	movt	r1, #5
   17b4c:	bl	12178 <strcmp@plt>
   17b50:	cmp	r0, #0
   17b54:	beq	17b70 <__assert_fail@plt+0x5398>
   17b58:	mov	r0, r5
   17b5c:	movw	r1, #11292	; 0x2c1c
   17b60:	movt	r1, #5
   17b64:	bl	12178 <strcmp@plt>
   17b68:	cmp	r0, #0
   17b6c:	bne	17af8 <__assert_fail@plt+0x5320>
   17b70:	ldr	r2, [sl, #20]
   17b74:	ldr	r3, [pc, #1640]	; 181e4 <__assert_fail@plt+0x5a0c>
   17b78:	cmp	r2, r3
   17b7c:	beq	17af8 <__assert_fail@plt+0x5320>
   17b80:	ldr	r2, [r2, #20]
   17b84:	tst	r2, #4096	; 0x1000
   17b88:	ldreq	r3, [sp, #12]
   17b8c:	streq	sl, [r3]
   17b90:	addeq	r3, r3, #4
   17b94:	streq	r3, [sp, #12]
   17b98:	subs	r4, r4, #1
   17b9c:	bpl	17b00 <__assert_fail@plt+0x5328>
   17ba0:	ldr	r3, [sp, #12]
   17ba4:	ldr	r0, [r6, #140]	; 0x8c
   17ba8:	rsb	sl, r9, r3
   17bac:	movw	r3, #992	; 0x3e0
   17bb0:	cmp	r0, #0
   17bb4:	movt	r3, #7
   17bb8:	asr	sl, sl, #2
   17bbc:	str	sl, [r6]
   17bc0:	mov	r1, sl
   17bc4:	ble	17bf0 <__assert_fail@plt+0x5418>
   17bc8:	ldr	r3, [r3, #136]	; 0x88
   17bcc:	sub	r2, sl, #-1073741823	; 0xc0000001
   17bd0:	add	r1, r3, r0, lsl #5
   17bd4:	add	r2, r9, r2, lsl #2
   17bd8:	str	r3, [r2, #4]!
   17bdc:	add	r3, r3, #32
   17be0:	cmp	r3, r1
   17be4:	bne	17bd8 <__assert_fail@plt+0x5400>
   17be8:	add	r1, sl, r0
   17bec:	str	r1, [r6]
   17bf0:	mov	r0, r9
   17bf4:	mov	r2, #4
   17bf8:	movw	r3, #24420	; 0x5f64
   17bfc:	movt	r3, #1
   17c00:	bl	126f4 <qsort@plt>
   17c04:	movw	r3, #976	; 0x3d0
   17c08:	movt	r3, #7
   17c0c:	add	r0, sp, #48	; 0x30
   17c10:	movw	r2, #9492	; 0x2514
   17c14:	movt	r2, #1
   17c18:	ldr	r1, [r3]
   17c1c:	movw	r4, #992	; 0x3e0
   17c20:	bl	1279c <init_disassemble_info@plt>
   17c24:	ldr	r0, [r6, #164]	; 0xa4
   17c28:	movw	r2, #22872	; 0x5958
   17c2c:	movw	r3, #20688	; 0x50d0
   17c30:	cmp	r0, #0
   17c34:	movt	r2, #1
   17c38:	movt	r3, #1
   17c3c:	str	r2, [sp, #124]	; 0x7c
   17c40:	str	r3, [sp, #128]	; 0x80
   17c44:	add	r2, sp, #20
   17c48:	mov	r3, #0
   17c4c:	str	r7, [sp, #20]
   17c50:	str	r2, [sp, #56]	; 0x38
   17c54:	movt	r4, #7
   17c58:	str	r3, [sp, #28]
   17c5c:	str	r3, [sp, #32]
   17c60:	str	r3, [sp, #36]	; 0x24
   17c64:	str	r3, [sp, #44]	; 0x2c
   17c68:	beq	17c7c <__assert_fail@plt+0x54a4>
   17c6c:	bl	12670 <bfd_scan_arch@plt>
   17c70:	subs	r3, r0, #0
   17c74:	strne	r3, [r7, #140]	; 0x8c
   17c78:	beq	181cc <__assert_fail@plt+0x59f4>
   17c7c:	movw	r4, #62072	; 0xf278
   17c80:	movt	r4, #6
   17c84:	ldr	r3, [r4, #16]
   17c88:	cmp	r3, #2
   17c8c:	beq	17cb0 <__assert_fail@plt+0x54d8>
   17c90:	mov	r0, #440	; 0x1b8
   17c94:	bl	12358 <xmalloc@plt>
   17c98:	mov	r2, #440	; 0x1b8
   17c9c:	ldr	r1, [r7, #4]
   17ca0:	bl	1222c <memcpy@plt>
   17ca4:	ldr	r2, [r4, #16]
   17ca8:	str	r2, [r0, #8]
   17cac:	str	r0, [r7, #4]
   17cb0:	mov	r0, r7
   17cb4:	bl	125a4 <disassembler@plt>
   17cb8:	cmp	r0, #0
   17cbc:	mov	r4, r0
   17cc0:	str	r0, [sp, #40]	; 0x28
   17cc4:	beq	18158 <__assert_fail@plt+0x5980>
   17cc8:	ldr	r3, [r7, #4]
   17ccc:	mov	r0, r7
   17cd0:	ldr	r3, [r3, #4]
   17cd4:	str	r3, [sp, #60]	; 0x3c
   17cd8:	bl	12508 <bfd_get_arch@plt>
   17cdc:	str	r0, [sp, #64]	; 0x40
   17ce0:	mov	r0, r7
   17ce4:	bl	125b0 <bfd_get_mach@plt>
   17ce8:	ldr	r3, [r6, #168]	; 0xa8
   17cec:	str	r3, [sp, #208]	; 0xd0
   17cf0:	str	r0, [sp, #68]	; 0x44
   17cf4:	mov	r0, r7
   17cf8:	bl	1249c <bfd_octets_per_byte@plt>
   17cfc:	ldr	r3, [r7, #4]
   17d00:	mov	r2, #8
   17d04:	str	r2, [sp, #172]	; 0xac
   17d08:	mov	r2, #0
   17d0c:	mov	r1, #3
   17d10:	ldr	r3, [r3, #8]
   17d14:	str	r1, [sp, #176]	; 0xb0
   17d18:	cmp	r3, r2
   17d1c:	str	r2, [sp, #180]	; 0xb4
   17d20:	str	r0, [sp, #168]	; 0xa8
   17d24:	bne	17ee4 <__assert_fail@plt+0x570c>
   17d28:	str	r3, [sp, #72]	; 0x48
   17d2c:	str	r3, [sp, #164]	; 0xa4
   17d30:	add	r0, sp, #48	; 0x30
   17d34:	bl	1231c <disassemble_init_for_target@plt>
   17d38:	ldr	r3, [r7, #4]
   17d3c:	mov	r0, r7
   17d40:	ldr	r3, [r3, #424]	; 0x1a8
   17d44:	blx	r3
   17d48:	cmp	r0, #0
   17d4c:	blt	18124 <__assert_fail@plt+0x594c>
   17d50:	beq	17d98 <__assert_fail@plt+0x55c0>
   17d54:	bl	12358 <xmalloc@plt>
   17d58:	ldr	r3, [r7, #4]
   17d5c:	ldr	r2, [r6, #64]	; 0x40
   17d60:	ldr	r3, [r3, #428]	; 0x1ac
   17d64:	mov	r1, r0
   17d68:	str	r0, [sp, #32]
   17d6c:	mov	r0, r7
   17d70:	blx	r3
   17d74:	cmp	r0, #0
   17d78:	mov	r1, r0
   17d7c:	str	r0, [sp, #36]	; 0x24
   17d80:	blt	18130 <__assert_fail@plt+0x5958>
   17d84:	movw	r3, #19096	; 0x4a98
   17d88:	ldr	r0, [sp, #32]
   17d8c:	movt	r3, #1
   17d90:	mov	r2, #4
   17d94:	bl	126f4 <qsort@plt>
   17d98:	ldr	ip, [r6, #4]
   17d9c:	mov	r0, r7
   17da0:	ldr	r3, [r6]
   17da4:	add	r2, sp, #48	; 0x30
   17da8:	movw	r1, #34996	; 0x88b4
   17dac:	movt	r1, #1
   17db0:	str	ip, [sp, #96]	; 0x60
   17db4:	str	r3, [sp, #104]	; 0x68
   17db8:	bl	12754 <bfd_map_over_sections@plt>
   17dbc:	ldr	r0, [sp, #32]
   17dc0:	cmp	r0, #0
   17dc4:	beq	17dcc <__assert_fail@plt+0x55f4>
   17dc8:	bl	121f0 <free@plt>
   17dcc:	ldr	r0, [r6, #4]
   17dd0:	bl	121f0 <free@plt>
   17dd4:	b	1760c <__assert_fail@plt+0x4e34>
   17dd8:	movw	r1, #27864	; 0x6cd8
   17ddc:	mov	r0, r7
   17de0:	movt	r1, #1
   17de4:	mov	r2, #0
   17de8:	bl	12754 <bfd_map_over_sections@plt>
   17dec:	b	175f8 <__assert_fail@plt+0x4e20>
   17df0:	mov	r2, #5
   17df4:	movw	r1, #10908	; 0x2a9c
   17df8:	mov	r0, #0
   17dfc:	movt	r1, #5
   17e00:	bl	12298 <dcgettext@plt>
   17e04:	mov	r1, r0
   17e08:	mov	r0, #1
   17e0c:	bl	125bc <__printf_chk@plt>
   17e10:	mov	r0, r7
   17e14:	bl	123ac <bfd_get_arch_size@plt>
   17e18:	mov	r2, #5
   17e1c:	cmp	r0, #32
   17e20:	movweq	r1, #10920	; 0x2aa8
   17e24:	movwne	r1, #10984	; 0x2ae8
   17e28:	movteq	r1, #5
   17e2c:	movtne	r1, #5
   17e30:	moveq	r0, #0
   17e34:	movne	r0, #0
   17e38:	bl	12298 <dcgettext@plt>
   17e3c:	mov	r1, r0
   17e40:	mov	r0, #1
   17e44:	bl	125bc <__printf_chk@plt>
   17e48:	ldr	r3, [r6, #60]	; 0x3c
   17e4c:	cmp	r3, #0
   17e50:	bne	17ef8 <__assert_fail@plt+0x5720>
   17e54:	mov	r0, #10
   17e58:	bl	1258c <putchar@plt>
   17e5c:	mov	r0, r7
   17e60:	movw	r1, #26224	; 0x6670
   17e64:	mov	r2, #0
   17e68:	movt	r1, #1
   17e6c:	bl	12754 <bfd_map_over_sections@plt>
   17e70:	b	17514 <__assert_fail@plt+0x4d3c>
   17e74:	bl	12358 <xmalloc@plt>
   17e78:	mov	r4, r0
   17e7c:	b	174e4 <__assert_fail@plt+0x4d0c>
   17e80:	bl	12358 <xmalloc@plt>
   17e84:	mov	r4, r0
   17e88:	b	17550 <__assert_fail@plt+0x4d78>
   17e8c:	mov	r2, #5
   17e90:	movw	r1, #10604	; 0x296c
   17e94:	movt	r1, #5
   17e98:	bl	12298 <dcgettext@plt>
   17e9c:	ldr	r3, [r7, #4]
   17ea0:	ldr	r2, [r7]
   17ea4:	ldr	r3, [r3]
   17ea8:	mov	r1, r0
   17eac:	mov	r0, #1
   17eb0:	bl	125bc <__printf_chk@plt>
   17eb4:	b	1742c <__assert_fail@plt+0x4c54>
   17eb8:	movw	r3, #976	; 0x3d0
   17ebc:	movt	r3, #7
   17ec0:	mov	r0, #10
   17ec4:	ldr	r1, [r3]
   17ec8:	bl	12334 <_IO_putc@plt>
   17ecc:	b	17494 <__assert_fail@plt+0x4cbc>
   17ed0:	movw	r1, #34664	; 0x8768
   17ed4:	mov	r0, r7
   17ed8:	movt	r1, #1
   17edc:	bl	12754 <bfd_map_over_sections@plt>
   17ee0:	b	175d8 <__assert_fail@plt+0x4e00>
   17ee4:	cmp	r3, #1
   17ee8:	movne	r3, #2
   17eec:	strne	r3, [sp, #72]	; 0x48
   17ef0:	bne	17d30 <__assert_fail@plt+0x5558>
   17ef4:	b	17d28 <__assert_fail@plt+0x5550>
   17ef8:	mov	r2, #5
   17efc:	movw	r1, #11064	; 0x2b38
   17f00:	mov	r0, #0
   17f04:	movt	r1, #5
   17f08:	bl	12298 <dcgettext@plt>
   17f0c:	mov	r1, r0
   17f10:	mov	r0, #1
   17f14:	bl	125bc <__printf_chk@plt>
   17f18:	b	17e54 <__assert_fail@plt+0x567c>
   17f1c:	movw	r1, #10144	; 0x27a0
   17f20:	movw	r3, #10760	; 0x2a08
   17f24:	movt	r1, #5
   17f28:	movt	r3, #5
   17f2c:	mov	r0, #1
   17f30:	bl	125bc <__printf_chk@plt>
   17f34:	b	17984 <__assert_fail@plt+0x51ac>
   17f38:	ldr	r4, [r7, #40]	; 0x28
   17f3c:	ubfx	r4, r4, #5, #20
   17f40:	ands	r4, r4, #64	; 0x40
   17f44:	bne	18130 <__assert_fail@plt+0x5958>
   17f48:	mov	r2, #5
   17f4c:	movw	r1, #11072	; 0x2b40
   17f50:	mov	r0, r4
   17f54:	movt	r1, #5
   17f58:	bl	12298 <dcgettext@plt>
   17f5c:	ldr	r1, [r7]
   17f60:	bl	485b4 <__assert_fail@plt+0x35ddc>
   17f64:	mov	r3, #1
   17f68:	str	r4, [r6, #68]	; 0x44
   17f6c:	str	r3, [r6, #16]
   17f70:	b	17570 <__assert_fail@plt+0x4d98>
   17f74:	ldr	r3, [r4, #120]	; 0x78
   17f78:	cmp	r3, #0
   17f7c:	bne	17620 <__assert_fail@plt+0x4e48>
   17f80:	bl	2d4a8 <__assert_fail@plt+0x1acd0>
   17f84:	mov	r0, r7
   17f88:	bl	16478 <__assert_fail@plt+0x3ca0>
   17f8c:	b	17620 <__assert_fail@plt+0x4e48>
   17f90:	movw	r1, #10144	; 0x27a0
   17f94:	movw	r3, #10752	; 0x2a00
   17f98:	movt	r1, #5
   17f9c:	movt	r3, #5
   17fa0:	mov	r0, #1
   17fa4:	bl	125bc <__printf_chk@plt>
   17fa8:	ldr	r3, [r7, #40]	; 0x28
   17fac:	movw	r2, #10648	; 0x2998
   17fb0:	movt	r2, #5
   17fb4:	ubfx	r3, r3, #5, #20
   17fb8:	b	1797c <__assert_fail@plt+0x51a4>
   17fbc:	movw	r1, #10144	; 0x27a0
   17fc0:	movw	r3, #10744	; 0x29f8
   17fc4:	movt	r1, #5
   17fc8:	movt	r3, #5
   17fcc:	mov	r0, #1
   17fd0:	bl	125bc <__printf_chk@plt>
   17fd4:	ldr	r3, [r7, #40]	; 0x28
   17fd8:	movw	r2, #10648	; 0x2998
   17fdc:	movt	r2, #5
   17fe0:	ubfx	r3, r3, #5, #20
   17fe4:	b	17974 <__assert_fail@plt+0x519c>
   17fe8:	movw	r1, #10144	; 0x27a0
   17fec:	movw	r3, #10736	; 0x29f0
   17ff0:	movt	r1, #5
   17ff4:	movt	r3, #5
   17ff8:	mov	r0, #1
   17ffc:	bl	125bc <__printf_chk@plt>
   18000:	ldr	r3, [r7, #40]	; 0x28
   18004:	movw	r2, #10648	; 0x2998
   18008:	movt	r2, #5
   1800c:	ubfx	r3, r3, #5, #20
   18010:	b	1796c <__assert_fail@plt+0x5194>
   18014:	movw	r1, #10144	; 0x27a0
   18018:	movw	r3, #10724	; 0x29e4
   1801c:	movt	r1, #5
   18020:	movt	r3, #5
   18024:	mov	r0, #1
   18028:	bl	125bc <__printf_chk@plt>
   1802c:	ldr	r3, [r7, #40]	; 0x28
   18030:	movw	r2, #10648	; 0x2998
   18034:	movt	r2, #5
   18038:	ubfx	r3, r3, #5, #20
   1803c:	b	17964 <__assert_fail@plt+0x518c>
   18040:	movw	r1, #10144	; 0x27a0
   18044:	movw	r3, #10712	; 0x29d8
   18048:	movt	r1, #5
   1804c:	movt	r3, #5
   18050:	mov	r0, #1
   18054:	bl	125bc <__printf_chk@plt>
   18058:	ldr	r3, [r7, #40]	; 0x28
   1805c:	movw	r2, #10648	; 0x2998
   18060:	movt	r2, #5
   18064:	ubfx	r3, r3, #5, #20
   18068:	b	1795c <__assert_fail@plt+0x5184>
   1806c:	movw	r1, #10144	; 0x27a0
   18070:	movw	r3, #10700	; 0x29cc
   18074:	movt	r1, #5
   18078:	movt	r3, #5
   1807c:	mov	r0, #1
   18080:	bl	125bc <__printf_chk@plt>
   18084:	ldr	r3, [r7, #40]	; 0x28
   18088:	movw	r2, #10648	; 0x2998
   1808c:	movt	r2, #5
   18090:	ubfx	r3, r3, #5, #20
   18094:	b	17954 <__assert_fail@plt+0x517c>
   18098:	movw	r1, #10144	; 0x27a0
   1809c:	movw	r3, #10688	; 0x29c0
   180a0:	movt	r1, #5
   180a4:	movt	r3, #5
   180a8:	mov	r0, #1
   180ac:	bl	125bc <__printf_chk@plt>
   180b0:	ldr	r3, [r7, #40]	; 0x28
   180b4:	movw	r2, #10648	; 0x2998
   180b8:	movt	r2, #5
   180bc:	ubfx	r3, r3, #5, #20
   180c0:	b	1794c <__assert_fail@plt+0x5174>
   180c4:	movw	r1, #10144	; 0x27a0
   180c8:	movw	r3, #10680	; 0x29b8
   180cc:	movt	r1, #5
   180d0:	movt	r3, #5
   180d4:	mov	r0, #1
   180d8:	bl	125bc <__printf_chk@plt>
   180dc:	ldr	r3, [r7, #40]	; 0x28
   180e0:	movw	r2, #10648	; 0x2998
   180e4:	movt	r2, #5
   180e8:	ubfx	r3, r3, #5, #20
   180ec:	b	17944 <__assert_fail@plt+0x516c>
   180f0:	movw	r1, #10144	; 0x27a0
   180f4:	movw	r2, #11856	; 0x2e50
   180f8:	movt	r1, #5
   180fc:	movt	r2, #5
   18100:	movw	r3, #10668	; 0x29ac
   18104:	mov	r0, #1
   18108:	movt	r3, #5
   1810c:	bl	125bc <__printf_chk@plt>
   18110:	ldr	r3, [r7, #40]	; 0x28
   18114:	movw	r2, #10648	; 0x2998
   18118:	movt	r2, #5
   1811c:	ubfx	r3, r3, #5, #20
   18120:	b	1793c <__assert_fail@plt+0x5164>
   18124:	ldr	r3, [r6, #132]	; 0x84
   18128:	cmp	r3, #0
   1812c:	beq	17d98 <__assert_fail@plt+0x55c0>
   18130:	ldr	r0, [r7]
   18134:	bl	48504 <__assert_fail@plt+0x35d2c>
   18138:	movw	r0, #11272	; 0x2c08
   1813c:	movt	r0, #5
   18140:	bl	12418 <puts@plt>
   18144:	b	175ec <__assert_fail@plt+0x4e14>
   18148:	movw	r0, #11272	; 0x2c08
   1814c:	movt	r0, #5
   18150:	bl	12418 <puts@plt>
   18154:	b	1773c <__assert_fail@plt+0x4f64>
   18158:	mov	r2, #5
   1815c:	movw	r1, #11336	; 0x2c48
   18160:	movt	r1, #5
   18164:	bl	12298 <dcgettext@plt>
   18168:	mov	r5, r0
   1816c:	mov	r0, r7
   18170:	bl	12508 <bfd_get_arch@plt>
   18174:	mov	r1, r4
   18178:	bl	1252c <bfd_printable_arch_mach@plt>
   1817c:	mov	r1, r0
   18180:	mov	r0, r5
   18184:	bl	485b4 <__assert_fail@plt+0x35ddc>
   18188:	mov	r3, #1
   1818c:	str	r3, [r6, #16]
   18190:	b	1760c <__assert_fail@plt+0x4e34>
   18194:	mov	r2, #5
   18198:	movw	r1, #10848	; 0x2a60
   1819c:	mov	r0, #0
   181a0:	movt	r1, #5
   181a4:	bl	12298 <dcgettext@plt>
   181a8:	ldr	r1, [r7]
   181ac:	bl	485b4 <__assert_fail@plt+0x35ddc>
   181b0:	movw	r1, #10888	; 0x2a88
   181b4:	mov	r2, #5
   181b8:	movt	r1, #5
   181bc:	mov	r0, #0
   181c0:	bl	12298 <dcgettext@plt>
   181c4:	bl	48504 <__assert_fail@plt+0x35d2c>
   181c8:	bl	122b0 <__stack_chk_fail@plt>
   181cc:	movw	r1, #11304	; 0x2c28
   181d0:	mov	r2, #5
   181d4:	movt	r1, #5
   181d8:	bl	12298 <dcgettext@plt>
   181dc:	ldr	r1, [r4, #164]	; 0xa4
   181e0:	bl	4857c <__assert_fail@plt+0x35da4>
   181e4:	andeq	r0, r7, r8, ror r1
   181e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   181ec:	movw	r9, #992	; 0x3e0
   181f0:	movt	r9, #7
   181f4:	movw	r8, #65176	; 0xfe98
   181f8:	movt	r8, #6
   181fc:	sub	sp, sp, #12
   18200:	ldr	r3, [r9, #148]	; 0x94
   18204:	mov	r7, r1
   18208:	ldr	r2, [r8]
   1820c:	mov	r1, #2
   18210:	cmp	r3, #0
   18214:	mov	r6, r0
   18218:	str	r2, [sp, #4]
   1821c:	ldreq	r3, [r0, #40]	; 0x28
   18220:	orreq	r3, r3, #1048576	; 0x100000
   18224:	streq	r3, [r0, #40]	; 0x28
   18228:	bl	12718 <bfd_check_format@plt>
   1822c:	cmp	r0, #0
   18230:	beq	18304 <__assert_fail@plt+0x5b2c>
   18234:	cmp	r7, #0
   18238:	movweq	r1, #11420	; 0x2c9c
   1823c:	moveq	r0, r7
   18240:	movteq	r1, #5
   18244:	beq	1825c <__assert_fail@plt+0x5a84>
   18248:	cmp	r7, #100	; 0x64
   1824c:	movwle	r1, #11464	; 0x2cc8
   18250:	movle	r0, #0
   18254:	movtle	r1, #5
   18258:	bgt	183c0 <__assert_fail@plt+0x5be8>
   1825c:	mov	r2, #5
   18260:	add	r7, r7, #1
   18264:	bl	12298 <dcgettext@plt>
   18268:	ldr	r2, [r6]
   1826c:	mov	r4, #0
   18270:	mov	r1, r0
   18274:	mov	r0, #1
   18278:	bl	125bc <__printf_chk@plt>
   1827c:	b	182a4 <__assert_fail@plt+0x5acc>
   18280:	mov	r1, r7
   18284:	bl	181e8 <__assert_fail@plt+0x5a10>
   18288:	cmp	r4, #0
   1828c:	beq	182a0 <__assert_fail@plt+0x5ac8>
   18290:	mov	r0, r4
   18294:	bl	126ac <bfd_close@plt>
   18298:	cmp	r4, r5
   1829c:	beq	182ec <__assert_fail@plt+0x5b14>
   182a0:	mov	r4, r5
   182a4:	mov	r0, #0
   182a8:	bl	12364 <bfd_set_error@plt>
   182ac:	mov	r0, r6
   182b0:	mov	r1, r4
   182b4:	bl	12724 <bfd_openr_next_archived_file@plt>
   182b8:	subs	r5, r0, #0
   182bc:	bne	18280 <__assert_fail@plt+0x5aa8>
   182c0:	bl	12310 <bfd_get_error@plt>
   182c4:	cmp	r0, #9
   182c8:	beq	182dc <__assert_fail@plt+0x5b04>
   182cc:	ldr	r0, [r6]
   182d0:	bl	48478 <__assert_fail@plt+0x35ca0>
   182d4:	mov	r3, #1
   182d8:	str	r3, [r9, #16]
   182dc:	cmp	r4, #0
   182e0:	beq	182ec <__assert_fail@plt+0x5b14>
   182e4:	mov	r0, r4
   182e8:	bl	126ac <bfd_close@plt>
   182ec:	ldr	r2, [sp, #4]
   182f0:	ldr	r3, [r8]
   182f4:	cmp	r2, r3
   182f8:	bne	183d8 <__assert_fail@plt+0x5c00>
   182fc:	add	sp, sp, #12
   18300:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18304:	mov	r0, r6
   18308:	mov	r1, #1
   1830c:	mov	r2, sp
   18310:	bl	126d0 <bfd_check_format_matches@plt>
   18314:	cmp	r0, #0
   18318:	bne	18348 <__assert_fail@plt+0x5b70>
   1831c:	bl	12310 <bfd_get_error@plt>
   18320:	cmp	r0, #13
   18324:	beq	18354 <__assert_fail@plt+0x5b7c>
   18328:	bl	12310 <bfd_get_error@plt>
   1832c:	cmp	r0, #12
   18330:	beq	18378 <__assert_fail@plt+0x5ba0>
   18334:	ldr	r0, [r6]
   18338:	bl	48478 <__assert_fail@plt+0x35ca0>
   1833c:	mov	r3, #1
   18340:	str	r3, [r9, #16]
   18344:	b	182ec <__assert_fail@plt+0x5b14>
   18348:	mov	r0, r6
   1834c:	bl	173dc <__assert_fail@plt+0x4c04>
   18350:	b	182ec <__assert_fail@plt+0x5b14>
   18354:	ldr	r0, [r6]
   18358:	bl	48478 <__assert_fail@plt+0x35ca0>
   1835c:	ldr	r0, [sp]
   18360:	mov	r3, #1
   18364:	str	r3, [r9, #16]
   18368:	bl	48650 <__assert_fail@plt+0x35e78>
   1836c:	ldr	r0, [sp]
   18370:	bl	121f0 <free@plt>
   18374:	b	182ec <__assert_fail@plt+0x5b14>
   18378:	mov	r2, sp
   1837c:	mov	r0, r6
   18380:	mov	r1, #3
   18384:	bl	126d0 <bfd_check_format_matches@plt>
   18388:	cmp	r0, #0
   1838c:	bne	18348 <__assert_fail@plt+0x5b70>
   18390:	ldr	r0, [r6]
   18394:	bl	48478 <__assert_fail@plt+0x35ca0>
   18398:	mov	r3, #1
   1839c:	str	r3, [r9, #16]
   183a0:	bl	12310 <bfd_get_error@plt>
   183a4:	cmp	r0, #13
   183a8:	bne	182ec <__assert_fail@plt+0x5b14>
   183ac:	ldr	r0, [sp]
   183b0:	bl	48650 <__assert_fail@plt+0x35e78>
   183b4:	ldr	r0, [sp]
   183b8:	bl	121f0 <free@plt>
   183bc:	b	182ec <__assert_fail@plt+0x5b14>
   183c0:	movw	r1, #11436	; 0x2cac
   183c4:	mov	r2, #5
   183c8:	movt	r1, #5
   183cc:	mov	r0, #0
   183d0:	bl	12298 <dcgettext@plt>
   183d4:	bl	4857c <__assert_fail@plt+0x35da4>
   183d8:	bl	122b0 <__stack_chk_fail@plt>
   183dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183e0:	sub	sp, sp, #36	; 0x24
   183e4:	ldr	r6, [r2]
   183e8:	mov	r5, r0
   183ec:	mov	r8, r1
   183f0:	str	r2, [sp, #28]
   183f4:	mov	r0, r6
   183f8:	bl	124e4 <strlen@plt>
   183fc:	ldr	r4, [r8]
   18400:	mov	r1, r4
   18404:	mov	r7, r0
   18408:	mov	r0, r6
   1840c:	mov	r2, r7
   18410:	bl	12784 <strncmp@plt>
   18414:	cmp	r0, #0
   18418:	bne	18634 <__assert_fail@plt+0x5e5c>
   1841c:	ldrb	r3, [r4, r7]
   18420:	cmp	r3, #0
   18424:	bne	1863c <__assert_fail@plt+0x5e64>
   18428:	movw	ip, #992	; 0x3e0
   1842c:	movt	ip, #7
   18430:	str	ip, [sp, #12]
   18434:	ldr	r3, [ip, #8]
   18438:	cmp	r3, #0
   1843c:	beq	18738 <__assert_fail@plt+0x5f60>
   18440:	movw	r6, #992	; 0x3e0
   18444:	movt	r6, #7
   18448:	mov	r1, r4
   1844c:	add	r2, r6, #184	; 0xb8
   18450:	mov	r0, r5
   18454:	bl	15484 <__assert_fail@plt+0x2cac>
   18458:	ldr	ip, [sp, #12]
   1845c:	cmp	r0, #0
   18460:	mov	r4, r0
   18464:	str	r0, [ip, #192]	; 0xc0
   18468:	beq	18634 <__assert_fail@plt+0x5e5c>
   1846c:	ldr	ip, [sp, #28]
   18470:	mov	r2, #5
   18474:	movw	r1, #11488	; 0x2ce0
   18478:	mov	r0, #0
   1847c:	movt	r1, #5
   18480:	ldr	r8, [r8]
   18484:	ldr	ip, [ip, #8]
   18488:	ldr	r7, [r6, #184]	; 0xb8
   1848c:	str	ip, [sp, #8]
   18490:	bl	12298 <dcgettext@plt>
   18494:	add	r7, r4, r7
   18498:	mov	r2, r8
   1849c:	sub	r7, r7, #12
   184a0:	str	r7, [sp, #20]
   184a4:	mov	r1, r0
   184a8:	mov	r0, #1
   184ac:	bl	125bc <__printf_chk@plt>
   184b0:	movw	r0, #11516	; 0x2cfc
   184b4:	movt	r0, #5
   184b8:	bl	12418 <puts@plt>
   184bc:	ldr	r7, [sp, #20]
   184c0:	cmp	r4, r7
   184c4:	bhi	1861c <__assert_fail@plt+0x5e44>
   184c8:	movw	ip, #976	; 0x3d0
   184cc:	mvn	r9, #0
   184d0:	movt	ip, #7
   184d4:	str	ip, [sp, #16]
   184d8:	mov	ip, #0
   184dc:	str	ip, [sp, #24]
   184e0:	b	18508 <__assert_fail@plt+0x5d30>
   184e4:	ldr	ip, [sp, #8]
   184e8:	str	ip, [sp, #24]
   184ec:	add	ip, ip, r7
   184f0:	str	ip, [sp, #8]
   184f4:	ldr	ip, [sp, #20]
   184f8:	add	r4, r4, #12
   184fc:	add	r9, r9, #1
   18500:	cmp	r4, ip
   18504:	bhi	1861c <__assert_fail@plt+0x5e44>
   18508:	ldr	r3, [r5, #4]
   1850c:	mov	r0, r4
   18510:	ldr	r3, [r3, #76]	; 0x4c
   18514:	blx	r3
   18518:	ldr	r3, [r5, #4]
   1851c:	ldrb	r6, [r4, #4]
   18520:	ldrb	fp, [r4, #5]
   18524:	ldr	r3, [r3, #88]	; 0x58
   18528:	mov	r8, r0
   1852c:	add	r0, r4, #6
   18530:	blx	r3
   18534:	ldr	r3, [r5, #4]
   18538:	ldr	r3, [r3, #76]	; 0x4c
   1853c:	uxth	sl, r0
   18540:	add	r0, r4, #8
   18544:	blx	r3
   18548:	mov	r2, r9
   1854c:	str	r1, [sp, #4]
   18550:	mov	r7, r0
   18554:	movw	r1, #11568	; 0x2d30
   18558:	mov	r0, #1
   1855c:	movt	r1, #5
   18560:	bl	125bc <__printf_chk@plt>
   18564:	mov	r0, r6
   18568:	bl	12190 <bfd_get_stab_name@plt>
   1856c:	subs	r2, r0, #0
   18570:	beq	18668 <__assert_fail@plt+0x5e90>
   18574:	movw	r1, #11576	; 0x2d38
   18578:	mov	r0, #1
   1857c:	movt	r1, #5
   18580:	bl	125bc <__printf_chk@plt>
   18584:	mov	r2, fp
   18588:	mov	r3, sl
   1858c:	movw	r1, #11584	; 0x2d40
   18590:	mov	r0, #1
   18594:	movt	r1, #5
   18598:	bl	125bc <__printf_chk@plt>
   1859c:	ldr	ip, [sp, #16]
   185a0:	mov	r0, r5
   185a4:	ldr	r3, [sp, #4]
   185a8:	mov	r2, r7
   185ac:	ldr	r1, [ip]
   185b0:	bl	1273c <bfd_fprintf_vma@plt>
   185b4:	movw	r1, #11596	; 0x2d4c
   185b8:	mov	r0, #1
   185bc:	movt	r1, #5
   185c0:	mov	r2, r8
   185c4:	bl	125bc <__printf_chk@plt>
   185c8:	cmp	r6, #0
   185cc:	beq	184e4 <__assert_fail@plt+0x5d0c>
   185d0:	ldr	r1, [sp, #24]
   185d4:	add	ip, r8, r1
   185d8:	ldr	r1, [sp, #12]
   185dc:	mov	r0, ip
   185e0:	ldrd	r2, [r1, #176]	; 0xb0
   185e4:	mov	r1, #0
   185e8:	cmp	r1, r3
   185ec:	cmpeq	r0, r2
   185f0:	bcs	186c8 <__assert_fail@plt+0x5ef0>
   185f4:	movw	r1, #992	; 0x3e0
   185f8:	movt	r1, #7
   185fc:	rsb	r2, ip, r2
   18600:	mov	r0, #1
   18604:	ldr	r3, [r1, #8]
   18608:	movw	r1, #11620	; 0x2d64
   1860c:	movt	r1, #5
   18610:	add	r3, r3, ip
   18614:	bl	125bc <__printf_chk@plt>
   18618:	b	184f4 <__assert_fail@plt+0x5d1c>
   1861c:	movw	r0, #15480	; 0x3c78
   18620:	movt	r0, #5
   18624:	bl	12418 <puts@plt>
   18628:	ldr	ip, [sp, #8]
   1862c:	ldr	r1, [sp, #28]
   18630:	str	ip, [r1, #8]
   18634:	add	sp, sp, #36	; 0x24
   18638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1863c:	cmp	r3, #46	; 0x2e
   18640:	bne	18634 <__assert_fail@plt+0x5e5c>
   18644:	add	r7, r4, r7
   18648:	movw	r3, #65192	; 0xfea8
   1864c:	movt	r3, #6
   18650:	ldrb	r2, [r7, #1]
   18654:	lsl	r2, r2, #1
   18658:	ldrh	r3, [r3, r2]
   1865c:	tst	r3, #4
   18660:	bne	18428 <__assert_fail@plt+0x5c50>
   18664:	b	18634 <__assert_fail@plt+0x5e5c>
   18668:	cmp	r6, #0
   1866c:	bne	186dc <__assert_fail@plt+0x5f04>
   18670:	movw	r1, #11604	; 0x2d54
   18674:	mov	r0, #1
   18678:	movt	r1, #5
   1867c:	bl	125bc <__printf_chk@plt>
   18680:	mov	r2, fp
   18684:	mov	r3, sl
   18688:	movw	r1, #11584	; 0x2d40
   1868c:	mov	r0, #1
   18690:	movt	r1, #5
   18694:	bl	125bc <__printf_chk@plt>
   18698:	ldr	ip, [sp, #16]
   1869c:	mov	r0, r5
   186a0:	mov	r2, r7
   186a4:	ldr	r3, [sp, #4]
   186a8:	ldr	r1, [ip]
   186ac:	bl	1273c <bfd_fprintf_vma@plt>
   186b0:	mov	r2, r8
   186b4:	movw	r1, #11596	; 0x2d4c
   186b8:	mov	r0, #1
   186bc:	movt	r1, #5
   186c0:	bl	125bc <__printf_chk@plt>
   186c4:	b	184e4 <__assert_fail@plt+0x5d0c>
   186c8:	movw	r1, #11628	; 0x2d6c
   186cc:	mov	r0, #1
   186d0:	movt	r1, #5
   186d4:	bl	125bc <__printf_chk@plt>
   186d8:	b	184f4 <__assert_fail@plt+0x5d1c>
   186dc:	mov	r2, r6
   186e0:	movw	r1, #11612	; 0x2d5c
   186e4:	mov	r0, #1
   186e8:	movt	r1, #5
   186ec:	bl	125bc <__printf_chk@plt>
   186f0:	mov	r2, fp
   186f4:	mov	r3, sl
   186f8:	movw	r1, #11584	; 0x2d40
   186fc:	mov	r0, #1
   18700:	movt	r1, #5
   18704:	bl	125bc <__printf_chk@plt>
   18708:	ldr	ip, [sp, #16]
   1870c:	mov	r0, r5
   18710:	mov	r2, r7
   18714:	ldr	r3, [sp, #4]
   18718:	ldr	r1, [ip]
   1871c:	bl	1273c <bfd_fprintf_vma@plt>
   18720:	movw	r1, #11596	; 0x2d4c
   18724:	mov	r2, r8
   18728:	movt	r1, #5
   1872c:	mov	r0, #1
   18730:	bl	125bc <__printf_chk@plt>
   18734:	b	185d0 <__assert_fail@plt+0x5df8>
   18738:	ldr	ip, [sp, #28]
   1873c:	mov	r0, r5
   18740:	ldr	r1, [ip, #4]
   18744:	ldr	ip, [sp, #12]
   18748:	add	r2, ip, #176	; 0xb0
   1874c:	bl	15484 <__assert_fail@plt+0x2cac>
   18750:	ldr	ip, [sp, #12]
   18754:	cmp	r0, #0
   18758:	str	r0, [ip, #8]
   1875c:	beq	18634 <__assert_fail@plt+0x5e5c>
   18760:	ldr	r4, [r8]
   18764:	b	18440 <__assert_fail@plt+0x5c68>
   18768:	ldr	r3, [pc, #320]	; 188b0 <__assert_fail@plt+0x60d8>
   1876c:	push	{r4, r5, r6, r7, r8, lr}
   18770:	cmp	r1, r3
   18774:	mov	r4, r1
   18778:	mov	r5, r0
   1877c:	popeq	{r4, r5, r6, r7, r8, pc}
   18780:	sub	r3, r3, #200	; 0xc8
   18784:	cmp	r1, r3
   18788:	popeq	{r4, r5, r6, r7, r8, pc}
   1878c:	ldr	r3, [r1, #20]
   18790:	ands	r6, r3, #4096	; 0x1000
   18794:	popne	{r4, r5, r6, r7, r8, pc}
   18798:	mov	r0, r1
   1879c:	bl	16618 <__assert_fail@plt+0x3e40>
   187a0:	cmp	r0, #0
   187a4:	popeq	{r4, r5, r6, r7, r8, pc}
   187a8:	ldr	r3, [r4, #20]
   187ac:	tst	r3, #4
   187b0:	popeq	{r4, r5, r6, r7, r8, pc}
   187b4:	mov	r0, r5
   187b8:	mov	r1, r4
   187bc:	bl	12748 <bfd_get_reloc_upper_bound@plt>
   187c0:	subs	r7, r0, #0
   187c4:	blt	1886c <__assert_fail@plt+0x6094>
   187c8:	movw	r1, #11632	; 0x2d70
   187cc:	mov	r0, #1
   187d0:	movt	r1, #5
   187d4:	ldr	r2, [r4]
   187d8:	bl	125bc <__printf_chk@plt>
   187dc:	cmp	r7, #0
   187e0:	beq	18830 <__assert_fail@plt+0x6058>
   187e4:	mov	r0, r7
   187e8:	bl	12358 <xmalloc@plt>
   187ec:	movw	r3, #992	; 0x3e0
   187f0:	movt	r3, #7
   187f4:	mov	r1, r4
   187f8:	ldr	r3, [r3, #36]	; 0x24
   187fc:	mov	r2, r0
   18800:	mov	r7, r0
   18804:	mov	r0, r5
   18808:	bl	12700 <bfd_canonicalize_reloc@plt>
   1880c:	subs	r8, r0, #0
   18810:	blt	18874 <__assert_fail@plt+0x609c>
   18814:	bne	18840 <__assert_fail@plt+0x6068>
   18818:	movw	r0, #11272	; 0x2c08
   1881c:	movt	r0, #5
   18820:	bl	12418 <puts@plt>
   18824:	mov	r0, r7
   18828:	pop	{r4, r5, r6, r7, r8, lr}
   1882c:	b	121f0 <free@plt>
   18830:	movw	r0, #11272	; 0x2c08
   18834:	movt	r0, #5
   18838:	pop	{r4, r5, r6, r7, r8, lr}
   1883c:	b	12418 <puts@plt>
   18840:	mov	r0, #10
   18844:	bl	1258c <putchar@plt>
   18848:	mov	r0, r5
   1884c:	mov	r1, r4
   18850:	mov	r2, r7
   18854:	mov	r3, r8
   18858:	bl	15970 <__assert_fail@plt+0x3198>
   1885c:	movw	r0, #15480	; 0x3c78
   18860:	movt	r0, #5
   18864:	bl	12418 <puts@plt>
   18868:	b	18824 <__assert_fail@plt+0x604c>
   1886c:	ldr	r0, [r5]
   18870:	bl	48504 <__assert_fail@plt+0x35d2c>
   18874:	mov	r0, #10
   18878:	bl	1258c <putchar@plt>
   1887c:	mov	r2, #5
   18880:	mov	r0, r6
   18884:	movw	r1, #11664	; 0x2d90
   18888:	movt	r1, #5
   1888c:	bl	12298 <dcgettext@plt>
   18890:	ldr	r1, [r5]
   18894:	bl	485b4 <__assert_fail@plt+0x35ddc>
   18898:	movw	r1, #10888	; 0x2a88
   1889c:	mov	r2, #5
   188a0:	movt	r1, #5
   188a4:	mov	r0, r6
   188a8:	bl	12298 <dcgettext@plt>
   188ac:	bl	48504 <__assert_fail@plt+0x35d2c>
   188b0:	andeq	r0, r7, r0, asr #4
   188b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188b8:	movw	r8, #992	; 0x3e0
   188bc:	movt	r8, #7
   188c0:	movw	r4, #65176	; 0xfe98
   188c4:	movt	r4, #6
   188c8:	mov	r9, r2
   188cc:	ldr	r3, [r8, #196]	; 0xc4
   188d0:	sub	sp, sp, #332	; 0x14c
   188d4:	ldr	r2, [r4]
   188d8:	cmp	r3, #0
   188dc:	str	r4, [sp, #224]	; 0xe0
   188e0:	mov	r3, #0
   188e4:	str	r0, [sp, #208]	; 0xd0
   188e8:	str	r1, [sp, #128]	; 0x80
   188ec:	ldr	r6, [r9, #120]	; 0x78
   188f0:	str	r2, [sp, #324]	; 0x144
   188f4:	str	r3, [sp, #240]	; 0xf0
   188f8:	bne	18908 <__assert_fail@plt+0x6130>
   188fc:	ldr	r3, [r8, #56]	; 0x38
   18900:	cmp	r3, #0
   18904:	beq	18da8 <__assert_fail@plt+0x65d0>
   18908:	ldr	r0, [sp, #128]	; 0x80
   1890c:	bl	16618 <__assert_fail@plt+0x3e40>
   18910:	cmp	r0, #0
   18914:	beq	18db8 <__assert_fail@plt+0x65e0>
   18918:	ldr	r5, [sp, #128]	; 0x80
   1891c:	ldrd	sl, [r5, #48]	; 0x30
   18920:	orrs	r7, sl, fp
   18924:	beq	18db8 <__assert_fail@plt+0x65e0>
   18928:	movw	ip, #62072	; 0xf278
   1892c:	movt	ip, #6
   18930:	mvn	r2, #0
   18934:	mvn	r3, #0
   18938:	ldrd	r0, [ip]
   1893c:	cmp	r1, r3
   18940:	cmpeq	r0, r2
   18944:	beq	18dd8 <__assert_fail@plt+0x6600>
   18948:	ldrd	r4, [r5, #32]
   1894c:	cmp	r1, r5
   18950:	cmpeq	r0, r4
   18954:	bcc	18dd8 <__assert_fail@plt+0x6600>
   18958:	rsb	r2, r4, r0
   1895c:	mov	r3, #0
   18960:	str	r2, [sp, #72]	; 0x48
   18964:	str	r3, [sp, #76]	; 0x4c
   18968:	ldrd	r4, [ip, #8]
   1896c:	mvn	r2, #0
   18970:	mvn	r3, #0
   18974:	cmp	r5, r3
   18978:	cmpeq	r4, r2
   1897c:	beq	1a488 <__assert_fail@plt+0x7cb0>
   18980:	ldr	r7, [sp, #128]	; 0x80
   18984:	ldrd	r0, [r7, #32]
   18988:	cmp	r5, r1
   1898c:	cmpeq	r4, r0
   18990:	bcc	1a3ec <__assert_fail@plt+0x7c14>
   18994:	subs	r4, r4, r0
   18998:	sbc	r5, r5, r1
   1899c:	mov	r2, r6
   189a0:	mov	r3, #0
   189a4:	mov	r0, sl
   189a8:	mov	r1, fp
   189ac:	bl	4f48c <warn@@Base+0x5894>
   189b0:	cmp	r5, r1
   189b4:	cmpeq	r4, r0
   189b8:	strd	r0, [sp, #176]	; 0xb0
   189bc:	bls	1a3f4 <__assert_fail@plt+0x7c1c>
   189c0:	ldrd	r4, [sp, #176]	; 0xb0
   189c4:	ldrd	r6, [sp, #72]	; 0x48
   189c8:	cmp	r5, r7
   189cc:	cmpeq	r4, r6
   189d0:	bls	18db8 <__assert_fail@plt+0x65e0>
   189d4:	ldr	r7, [r9, #8]
   189d8:	ldr	ip, [r7, #12]
   189dc:	str	r7, [sp, #200]	; 0xc8
   189e0:	cmp	ip, #0
   189e4:	str	ip, [sp, #152]	; 0x98
   189e8:	beq	1a36c <__assert_fail@plt+0x7b94>
   189ec:	ldr	r3, [r8, #132]	; 0x84
   189f0:	cmp	r3, #0
   189f4:	beq	1a36c <__assert_fail@plt+0x7b94>
   189f8:	ldr	r3, [r7, #16]
   189fc:	mov	r4, #0
   18a00:	ldr	r7, [sp, #128]	; 0x80
   18a04:	str	r4, [sp, #188]	; 0xbc
   18a08:	add	r3, ip, r3, lsl #2
   18a0c:	str	r3, [sp, #172]	; 0xac
   18a10:	ldrd	r6, [r7, #32]
   18a14:	strd	r6, [sp, #104]	; 0x68
   18a18:	mov	r0, sl
   18a1c:	bl	12358 <xmalloc@plt>
   18a20:	mov	r1, #0
   18a24:	strd	sl, [sp, #8]
   18a28:	mov	r2, r0
   18a2c:	str	r0, [sp, #140]	; 0x8c
   18a30:	mov	r0, #0
   18a34:	strd	r0, [sp]
   18a38:	ldr	r0, [sp, #208]	; 0xd0
   18a3c:	ldr	r1, [sp, #128]	; 0x80
   18a40:	bl	1228c <bfd_get_section_contents@plt>
   18a44:	ldr	r6, [sp, #128]	; 0x80
   18a48:	ldr	r7, [sp, #152]	; 0x98
   18a4c:	ldr	ip, [sp, #172]	; 0xac
   18a50:	ldrd	r2, [r6, #32]
   18a54:	ldr	r4, [sp, #200]	; 0xc8
   18a58:	cmp	r7, ip
   18a5c:	ldr	r5, [sp, #140]	; 0x8c
   18a60:	str	r6, [r4, #4]
   18a64:	str	r5, [r9, #88]	; 0x58
   18a68:	strd	r2, [r9, #96]	; 0x60
   18a6c:	str	sl, [r9, #104]	; 0x68
   18a70:	str	r6, [r9, #36]	; 0x24
   18a74:	bcs	18ad0 <__assert_fail@plt+0x62f8>
   18a78:	ldr	r1, [r7]
   18a7c:	ldrd	r2, [sp, #104]	; 0x68
   18a80:	ldrd	r6, [sp, #72]	; 0x48
   18a84:	ldrd	r0, [r1, #8]
   18a88:	adds	r2, r2, r6
   18a8c:	adc	r3, r3, r7
   18a90:	cmp	r3, r1
   18a94:	cmpeq	r2, r0
   18a98:	bls	18ad0 <__assert_fail@plt+0x62f8>
   18a9c:	ldr	ip, [sp, #152]	; 0x98
   18aa0:	mov	lr, ip
   18aa4:	b	18abc <__assert_fail@plt+0x62e4>
   18aa8:	ldr	r1, [ip, #4]!
   18aac:	ldrd	r0, [r1, #8]
   18ab0:	cmp	r1, r3
   18ab4:	cmpeq	r0, r2
   18ab8:	bcs	18acc <__assert_fail@plt+0x62f4>
   18abc:	ldr	r7, [sp, #172]	; 0xac
   18ac0:	add	lr, lr, #4
   18ac4:	cmp	lr, r7
   18ac8:	bcc	18aa8 <__assert_fail@plt+0x62d0>
   18acc:	str	lr, [sp, #152]	; 0x98
   18ad0:	mov	r2, #5
   18ad4:	movw	r1, #11696	; 0x2db0
   18ad8:	mov	r0, #0
   18adc:	movt	r1, #5
   18ae0:	bl	12298 <dcgettext@plt>
   18ae4:	ldr	ip, [sp, #128]	; 0x80
   18ae8:	ldr	r2, [ip]
   18aec:	mov	r1, r0
   18af0:	mov	r0, #1
   18af4:	mov	r4, r0
   18af8:	bl	125bc <__printf_chk@plt>
   18afc:	ldr	r6, [sp, #200]	; 0xc8
   18b00:	mov	r2, r9
   18b04:	ldr	r5, [sp, #128]	; 0x80
   18b08:	add	r3, sp, #240	; 0xf0
   18b0c:	ldrd	r0, [r5, #32]
   18b10:	str	r4, [r6, #8]
   18b14:	ldrd	r6, [sp, #72]	; 0x48
   18b18:	adds	r0, r0, r6
   18b1c:	adc	r1, r1, r7
   18b20:	bl	14ae8 <__assert_fail@plt+0x2310>
   18b24:	ldr	r7, [sp, #208]	; 0xd0
   18b28:	ldr	ip, [sp, #200]	; 0xc8
   18b2c:	mov	r2, #0
   18b30:	ldr	r3, [r7, #4]
   18b34:	str	r2, [ip, #8]
   18b38:	ldr	r1, [r3, #4]
   18b3c:	cmp	r1, #5
   18b40:	mov	fp, r0
   18b44:	beq	1a524 <__assert_fail@plt+0x7d4c>
   18b48:	mvn	r4, #0
   18b4c:	mvn	r5, #0
   18b50:	mov	r6, #0
   18b54:	mov	r7, #0
   18b58:	strd	r4, [sp, #216]	; 0xd8
   18b5c:	strd	r6, [sp, #160]	; 0xa0
   18b60:	movw	r7, #992	; 0x3e0
   18b64:	movw	ip, #976	; 0x3d0
   18b68:	movt	r7, #7
   18b6c:	movt	ip, #7
   18b70:	str	r7, [sp, #100]	; 0x64
   18b74:	str	ip, [sp, #120]	; 0x78
   18b78:	ldr	r7, [sp, #128]	; 0x80
   18b7c:	ldrd	r4, [sp, #72]	; 0x48
   18b80:	ldrd	r2, [r7, #32]
   18b84:	ldrd	r6, [sp, #216]	; 0xd8
   18b88:	adds	r2, r2, r4
   18b8c:	adc	r3, r3, r5
   18b90:	ldrd	r4, [sp, #160]	; 0xa0
   18b94:	and	r6, r6, r2
   18b98:	and	r7, r7, r3
   18b9c:	eor	r6, r6, r4
   18ba0:	eor	r7, r7, r5
   18ba4:	subs	r6, r6, r4
   18ba8:	sbc	r7, r7, r5
   18bac:	cmp	fp, #0
   18bb0:	beq	1a284 <__assert_fail@plt+0x7aac>
   18bb4:	ldr	lr, [fp, #20]
   18bb8:	ldrd	r0, [fp, #8]
   18bbc:	ldrd	r2, [lr, #32]
   18bc0:	adds	r2, r2, r0
   18bc4:	adc	r3, r3, r1
   18bc8:	cmp	r7, r3
   18bcc:	cmpeq	r6, r2
   18bd0:	bcc	1a284 <__assert_fail@plt+0x7aac>
   18bd4:	ldr	ip, [sp, #240]	; 0xf0
   18bd8:	ldr	r5, [r8]
   18bdc:	cmp	ip, r5
   18be0:	bge	1a358 <__assert_fail@plt+0x7b80>
   18be4:	ldr	r4, [sp, #100]	; 0x64
   18be8:	ldr	r3, [r4, #4]
   18bec:	add	r4, r3, ip, lsl #2
   18bf0:	ldr	r3, [r3, ip, lsl #2]
   18bf4:	ldr	r2, [r3, #20]
   18bf8:	ldrd	r0, [r3, #8]
   18bfc:	ldrd	r2, [r2, #32]
   18c00:	adds	r2, r2, r0
   18c04:	adc	r3, r3, r1
   18c08:	cmp	r7, r3
   18c0c:	cmpeq	r6, r2
   18c10:	movcc	lr, ip
   18c14:	bcc	18c50 <__assert_fail@plt+0x6478>
   18c18:	mov	sl, r4
   18c1c:	mov	lr, ip
   18c20:	add	lr, lr, #1
   18c24:	cmp	lr, r5
   18c28:	beq	18c50 <__assert_fail@plt+0x6478>
   18c2c:	ldr	r3, [sl, #4]!
   18c30:	ldr	r2, [r3, #20]
   18c34:	ldrd	r0, [r3, #8]
   18c38:	ldrd	r2, [r2, #32]
   18c3c:	adds	r2, r2, r0
   18c40:	adc	r3, r3, r1
   18c44:	cmp	r7, r3
   18c48:	cmpeq	r6, r2
   18c4c:	bcs	18c20 <__assert_fail@plt+0x6448>
   18c50:	rsb	lr, ip, lr
   18c54:	str	r4, [r9, #40]	; 0x28
   18c58:	str	lr, [r9, #44]	; 0x2c
   18c5c:	str	ip, [r9, #52]	; 0x34
   18c60:	ldr	r4, [r8, #24]
   18c64:	cmp	r4, #0
   18c68:	bne	18cb0 <__assert_fail@plt+0x64d8>
   18c6c:	ldr	r3, [r9]
   18c70:	movw	r1, #15480	; 0x3c78
   18c74:	ldr	r0, [r9, #4]
   18c78:	movt	r1, #5
   18c7c:	blx	r3
   18c80:	ldr	r0, [sp, #208]	; 0xd0
   18c84:	ldr	r1, [sp, #128]	; 0x80
   18c88:	mov	r2, fp
   18c8c:	strd	r6, [sp]
   18c90:	str	r9, [sp, #8]
   18c94:	str	r4, [sp, #12]
   18c98:	bl	15618 <__assert_fail@plt+0x2e40>
   18c9c:	movw	r1, #9912	; 0x26b8
   18ca0:	ldr	r3, [r9]
   18ca4:	movt	r1, #5
   18ca8:	ldr	r0, [r9, #4]
   18cac:	blx	r3
   18cb0:	cmp	fp, #0
   18cb4:	beq	1a010 <__assert_fail@plt+0x7838>
   18cb8:	ldr	lr, [fp, #20]
   18cbc:	ldrd	r0, [fp, #8]
   18cc0:	ldrd	r2, [lr, #32]
   18cc4:	adds	r4, r2, r0
   18cc8:	adc	r5, r3, r1
   18ccc:	strd	r2, [sp, #40]	; 0x28
   18cd0:	cmp	r7, r5
   18cd4:	cmpeq	r6, r4
   18cd8:	bcc	18de8 <__assert_fail@plt+0x6610>
   18cdc:	ldr	ip, [sp, #240]	; 0xf0
   18ce0:	ldr	r3, [r8]
   18ce4:	cmp	ip, r3
   18ce8:	mov	r3, ip
   18cec:	bge	1a010 <__assert_fail@plt+0x7838>
   18cf0:	strd	r0, [sp, #48]	; 0x30
   18cf4:	strd	r6, [sp, #88]	; 0x58
   18cf8:	b	18d24 <__assert_fail@plt+0x654c>
   18cfc:	ldrd	r4, [sp, #48]	; 0x30
   18d00:	ldrd	r6, [sp, #40]	; 0x28
   18d04:	adds	r4, r4, r6
   18d08:	adc	r5, r5, r7
   18d0c:	ldr	r3, [r8]
   18d10:	add	ip, ip, #1
   18d14:	str	ip, [sp, #240]	; 0xf0
   18d18:	cmp	r3, ip
   18d1c:	ble	1a000 <__assert_fail@plt+0x7828>
   18d20:	mov	r3, ip
   18d24:	ldr	r2, [r8, #4]
   18d28:	movw	sl, #992	; 0x3e0
   18d2c:	ldr	r7, [sp, #128]	; 0x80
   18d30:	movt	sl, #7
   18d34:	ldr	r0, [r2, r3, lsl #2]
   18d38:	ldr	r3, [r0, #20]
   18d3c:	cmp	r3, r7
   18d40:	bne	18cfc <__assert_fail@plt+0x6524>
   18d44:	ldrd	r2, [r7, #32]
   18d48:	ldrd	r4, [sp, #48]	; 0x30
   18d4c:	ldrd	r6, [sp, #40]	; 0x28
   18d50:	adds	r4, r4, r6
   18d54:	adc	r5, r5, r7
   18d58:	ldrd	r6, [r0, #8]
   18d5c:	adds	r2, r2, r6
   18d60:	adc	r3, r3, r7
   18d64:	cmp	r3, r5
   18d68:	cmpeq	r2, r4
   18d6c:	bls	18d0c <__assert_fail@plt+0x6534>
   18d70:	ldr	r3, [r9, #84]	; 0x54
   18d74:	mov	r1, r9
   18d78:	blx	r3
   18d7c:	cmp	r0, #0
   18d80:	bne	1a2cc <__assert_fail@plt+0x7af4>
   18d84:	ldr	lr, [fp, #20]
   18d88:	ldrd	r0, [fp, #8]
   18d8c:	ldr	ip, [sp, #240]	; 0xf0
   18d90:	ldrd	r2, [lr, #32]
   18d94:	strd	r0, [sp, #48]	; 0x30
   18d98:	adds	r4, r0, r2
   18d9c:	strd	r2, [sp, #40]	; 0x28
   18da0:	adc	r5, r1, r3
   18da4:	b	18d0c <__assert_fail@plt+0x6534>
   18da8:	ldr	r3, [r1, #20]
   18dac:	and	r3, r3, #272	; 0x110
   18db0:	cmp	r3, #272	; 0x110
   18db4:	beq	18908 <__assert_fail@plt+0x6130>
   18db8:	ldr	r5, [sp, #224]	; 0xe0
   18dbc:	ldr	r2, [sp, #324]	; 0x144
   18dc0:	ldr	r3, [r5]
   18dc4:	cmp	r2, r3
   18dc8:	bne	18dd4 <__assert_fail@plt+0x65fc>
   18dcc:	add	sp, sp, #332	; 0x14c
   18dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd4:	bl	122b0 <__stack_chk_fail@plt>
   18dd8:	mov	r4, #0
   18ddc:	mov	r5, #0
   18de0:	strd	r4, [sp, #72]	; 0x48
   18de4:	b	18968 <__assert_fail@plt+0x6190>
   18de8:	str	fp, [sp, #212]	; 0xd4
   18dec:	ldr	ip, [sp, #128]	; 0x80
   18df0:	mov	r0, r4
   18df4:	mov	r1, r5
   18df8:	ldrd	r2, [ip, #32]
   18dfc:	subs	r0, r0, r2
   18e00:	sbc	r1, r1, r3
   18e04:	strd	r0, [sp, #144]	; 0x90
   18e08:	ldrd	r4, [sp, #176]	; 0xb0
   18e0c:	ldrd	r0, [sp, #144]	; 0x90
   18e10:	cmp	r5, r1
   18e14:	cmpeq	r4, r0
   18e18:	bcs	1a020 <__assert_fail@plt+0x7848>
   18e1c:	ldr	r3, [r8, #196]	; 0xc4
   18e20:	ldrd	r4, [sp, #176]	; 0xb0
   18e24:	cmp	r3, #0
   18e28:	strd	r4, [sp, #144]	; 0x90
   18e2c:	beq	1a050 <__assert_fail@plt+0x7878>
   18e30:	ldr	r5, [r9, #8]
   18e34:	mov	r3, #120	; 0x78
   18e38:	ldr	r6, [sp, #200]	; 0xc8
   18e3c:	mov	r0, r3
   18e40:	ldr	r7, [r9, #120]	; 0x78
   18e44:	ldr	ip, [r5, #4]
   18e48:	ldr	r6, [r6, #20]
   18e4c:	str	r5, [sp, #124]	; 0x7c
   18e50:	ldr	r4, [r9, #124]	; 0x7c
   18e54:	ldr	r5, [r9, #128]	; 0x80
   18e58:	str	r6, [sp, #228]	; 0xe4
   18e5c:	str	r7, [sp, #116]	; 0x74
   18e60:	str	r3, [sp, #268]	; 0x10c
   18e64:	str	ip, [sp, #132]	; 0x84
   18e68:	str	r4, [sp, #232]	; 0xe8
   18e6c:	str	r5, [sp, #236]	; 0xec
   18e70:	bl	12358 <xmalloc@plt>
   18e74:	ldr	r6, [r8, #200]	; 0xc8
   18e78:	mov	r3, #0
   18e7c:	str	r3, [sp, #264]	; 0x108
   18e80:	cmp	r6, r3
   18e84:	str	r6, [sp, #136]	; 0x88
   18e88:	movne	r7, #1
   18e8c:	strne	r7, [sp, #184]	; 0xb8
   18e90:	str	r0, [sp, #260]	; 0x104
   18e94:	bne	18ea8 <__assert_fail@plt+0x66d0>
   18e98:	mov	r4, #1
   18e9c:	mov	r5, #4
   18ea0:	str	r4, [sp, #184]	; 0xb8
   18ea4:	str	r5, [sp, #136]	; 0x88
   18ea8:	ldr	r4, [r8, #24]
   18eac:	cmp	r4, #0
   18eb0:	movne	r5, #0
   18eb4:	strne	r5, [sp, #168]	; 0xa8
   18eb8:	beq	19f68 <__assert_fail@plt+0x7790>
   18ebc:	ldrd	r6, [sp, #144]	; 0x90
   18ec0:	mov	r3, #0
   18ec4:	ldrd	r4, [sp, #72]	; 0x48
   18ec8:	strb	r3, [r9, #136]	; 0x88
   18ecc:	cmp	r7, r5
   18ed0:	cmpeq	r6, r4
   18ed4:	bls	19bf4 <__assert_fail@plt+0x741c>
   18ed8:	ldr	r7, [sp, #116]	; 0x74
   18edc:	mov	fp, r9
   18ee0:	ldr	r6, [sp, #144]	; 0x90
   18ee4:	ldr	ip, [sp, #148]	; 0x94
   18ee8:	str	r8, [sp, #84]	; 0x54
   18eec:	umull	r6, r7, r7, r6
   18ef0:	strd	r6, [sp, #192]	; 0xc0
   18ef4:	ldr	lr, [sp, #196]	; 0xc4
   18ef8:	ldr	r7, [sp, #116]	; 0x74
   18efc:	mla	ip, r7, ip, lr
   18f00:	str	r7, [sp, #80]	; 0x50
   18f04:	str	ip, [sp, #196]	; 0xc4
   18f08:	ldr	r5, [sp, #72]	; 0x48
   18f0c:	mov	r3, #0
   18f10:	ldr	r4, [sp, #116]	; 0x74
   18f14:	ldr	r7, [sp, #116]	; 0x74
   18f18:	ldr	r6, [sp, #76]	; 0x4c
   18f1c:	umull	r4, r5, r5, r4
   18f20:	strd	r4, [sp, #64]	; 0x40
   18f24:	ldr	ip, [sp, #68]	; 0x44
   18f28:	ldr	r5, [sp, #124]	; 0x7c
   18f2c:	mla	r6, r7, r6, ip
   18f30:	str	r3, [r5, #24]
   18f34:	str	r6, [sp, #68]	; 0x44
   18f38:	ldrd	r4, [sp, #64]	; 0x40
   18f3c:	ldrd	r6, [sp, #192]	; 0xc0
   18f40:	cmp	r5, r7
   18f44:	cmpeq	r4, r6
   18f48:	bcs	19f60 <__assert_fail@plt+0x7788>
   18f4c:	ldr	r7, [sp, #140]	; 0x8c
   18f50:	add	r3, r7, r4
   18f54:	ldrb	r3, [r3]
   18f58:	cmp	r3, #0
   18f5c:	bne	19f60 <__assert_fail@plt+0x7788>
   18f60:	adds	r2, r4, #1
   18f64:	mov	lr, r7
   18f68:	adc	r3, r5, #0
   18f6c:	ldrd	r4, [sp, #192]	; 0xc0
   18f70:	b	18f94 <__assert_fail@plt+0x67bc>
   18f74:	adds	r0, r2, #1
   18f78:	add	ip, lr, r0
   18f7c:	adc	r1, r3, #0
   18f80:	ldrb	ip, [ip, #-1]
   18f84:	cmp	ip, #0
   18f88:	bne	18fa0 <__assert_fail@plt+0x67c8>
   18f8c:	mov	r2, r0
   18f90:	mov	r3, r1
   18f94:	cmp	r3, r5
   18f98:	cmpeq	r2, r4
   18f9c:	bne	18f74 <__assert_fail@plt+0x679c>
   18fa0:	ldr	ip, [sp, #84]	; 0x54
   18fa4:	ldr	r1, [ip, #204]	; 0xcc
   18fa8:	cmp	r1, #0
   18fac:	bne	19000 <__assert_fail@plt+0x6828>
   18fb0:	ldrb	r1, [fp, #136]	; 0x88
   18fb4:	cmp	r1, #0
   18fb8:	beq	18fc8 <__assert_fail@plt+0x67f0>
   18fbc:	ldrb	r1, [fp, #137]	; 0x89
   18fc0:	cmp	r1, #0
   18fc4:	bne	19000 <__assert_fail@plt+0x6828>
   18fc8:	ldrd	r0, [sp, #64]	; 0x40
   18fcc:	mov	r7, #0
   18fd0:	ldr	r6, [sp, #232]	; 0xe8
   18fd4:	mov	r5, r7
   18fd8:	subs	r0, r2, r0
   18fdc:	sbc	r1, r3, r1
   18fe0:	mov	r4, r6
   18fe4:	cmp	r1, r5
   18fe8:	cmpeq	r0, r4
   18fec:	ldrd	r4, [sp, #192]	; 0xc0
   18ff0:	bcs	19e94 <__assert_fail@plt+0x76bc>
   18ff4:	cmp	r3, r5
   18ff8:	cmpeq	r2, r4
   18ffc:	beq	19f24 <__assert_fail@plt+0x774c>
   19000:	ldr	r6, [sp, #84]	; 0x54
   19004:	ldr	r3, [r6, #32]
   19008:	cmp	r3, #0
   1900c:	bne	19dfc <__assert_fail@plt+0x7624>
   19010:	ldr	r7, [sp, #100]	; 0x64
   19014:	ldr	r3, [r7, #208]	; 0xd0
   19018:	cmp	r3, #0
   1901c:	beq	193b0 <__assert_fail@plt+0x6bd8>
   19020:	ldr	r6, [sp, #124]	; 0x7c
   19024:	ldr	r0, [r6]
   19028:	ldr	r3, [r0, #4]
   1902c:	add	r2, sp, #244	; 0xf4
   19030:	ldr	ip, [sp, #84]	; 0x54
   19034:	ldrd	r4, [sp, #72]	; 0x48
   19038:	ldr	r1, [ip, #36]	; 0x24
   1903c:	add	ip, sp, #248	; 0xf8
   19040:	str	r2, [sp, #8]
   19044:	add	r2, sp, #252	; 0xfc
   19048:	strd	r4, [sp]
   1904c:	str	r2, [sp, #16]
   19050:	add	r2, sp, #256	; 0x100
   19054:	str	ip, [sp, #12]
   19058:	str	r2, [sp, #20]
   1905c:	ldr	r2, [sp, #132]	; 0x84
   19060:	ldr	r3, [r3, #296]	; 0x128
   19064:	blx	r3
   19068:	cmp	r0, #0
   1906c:	beq	193b0 <__assert_fail@plt+0x6bd8>
   19070:	ldr	r6, [sp, #244]	; 0xf4
   19074:	cmp	r6, #0
   19078:	beq	1908c <__assert_fail@plt+0x68b4>
   1907c:	ldrb	r3, [r6]
   19080:	cmp	r3, #0
   19084:	streq	r3, [sp, #244]	; 0xf4
   19088:	moveq	r6, r3
   1908c:	ldr	r3, [sp, #248]	; 0xf8
   19090:	cmp	r3, #0
   19094:	beq	190a4 <__assert_fail@plt+0x68cc>
   19098:	ldrb	r3, [r3]
   1909c:	cmp	r3, #0
   190a0:	streq	r3, [sp, #248]	; 0xf8
   190a4:	cmp	r6, #0
   190a8:	beq	1a2a4 <__assert_fail@plt+0x7acc>
   190ac:	ldrb	r3, [r6]
   190b0:	cmp	r3, #47	; 0x2f
   190b4:	movne	r5, #0
   190b8:	movne	r7, r5
   190bc:	beq	1a1d4 <__assert_fail@plt+0x79fc>
   190c0:	ldr	r4, [sp, #84]	; 0x54
   190c4:	ldr	r3, [r4, #32]
   190c8:	cmp	r3, #0
   190cc:	beq	19160 <__assert_fail@plt+0x6988>
   190d0:	ldr	r4, [sp, #248]	; 0xf8
   190d4:	cmp	r4, #0
   190d8:	beq	19110 <__assert_fail@plt+0x6938>
   190dc:	ldr	r6, [sp, #100]	; 0x64
   190e0:	ldr	r1, [r6, #152]	; 0x98
   190e4:	cmp	r1, #0
   190e8:	beq	190fc <__assert_fail@plt+0x6924>
   190ec:	mov	r0, r4
   190f0:	bl	12178 <strcmp@plt>
   190f4:	cmp	r0, #0
   190f8:	beq	19110 <__assert_fail@plt+0x6938>
   190fc:	movw	r1, #9908	; 0x26b4
   19100:	mov	r2, r4
   19104:	mov	r0, #1
   19108:	movt	r1, #5
   1910c:	bl	125bc <__printf_chk@plt>
   19110:	ldr	r3, [sp, #252]	; 0xfc
   19114:	cmp	r3, #0
   19118:	beq	19160 <__assert_fail@plt+0x6988>
   1911c:	ldr	ip, [sp, #84]	; 0x54
   19120:	ldr	r0, [sp, #256]	; 0x100
   19124:	ldr	r2, [ip, #156]	; 0x9c
   19128:	cmp	r3, r2
   1912c:	beq	1a4bc <__assert_fail@plt+0x7ce4>
   19130:	cmp	r0, #0
   19134:	movw	r1, #9732	; 0x2604
   19138:	ldr	r2, [sp, #244]	; 0xf4
   1913c:	movt	r1, #5
   19140:	beq	1a16c <__assert_fail@plt+0x7994>
   19144:	cmp	r2, #0
   19148:	str	r0, [sp]
   1914c:	mov	r0, #1
   19150:	moveq	r2, r1
   19154:	movw	r1, #9800	; 0x2648
   19158:	movt	r1, #5
   1915c:	bl	125bc <__printf_chk@plt>
   19160:	ldr	r6, [sp, #84]	; 0x54
   19164:	ldr	r3, [r6, #208]	; 0xd0
   19168:	cmp	r3, #0
   1916c:	beq	19314 <__assert_fail@plt+0x6b3c>
   19170:	ldr	r0, [sp, #244]	; 0xf4
   19174:	cmp	r0, #0
   19178:	beq	19314 <__assert_fail@plt+0x6b3c>
   1917c:	ldr	r3, [sp, #252]	; 0xfc
   19180:	cmp	r3, #0
   19184:	beq	19314 <__assert_fail@plt+0x6b3c>
   19188:	ldr	ip, [sp, #100]	; 0x64
   1918c:	ldr	r3, [ip, #40]	; 0x28
   19190:	cmp	r3, #0
   19194:	beq	191d4 <__assert_fail@plt+0x69fc>
   19198:	ldr	r4, [pc, #4072]	; 1a188 <__assert_fail@plt+0x79b0>
   1919c:	mov	r1, r0
   191a0:	b	191b4 <__assert_fail@plt+0x69dc>
   191a4:	ldr	r3, [r4]
   191a8:	cmp	r3, #0
   191ac:	beq	191d0 <__assert_fail@plt+0x69f8>
   191b0:	ldr	r1, [sp, #244]	; 0xf4
   191b4:	ldr	r0, [r3, #4]
   191b8:	bl	12208 <filename_cmp@plt>
   191bc:	ldr	r4, [r4]
   191c0:	cmp	r0, #0
   191c4:	bne	191a4 <__assert_fail@plt+0x69cc>
   191c8:	cmp	r4, #0
   191cc:	bne	19200 <__assert_fail@plt+0x6a28>
   191d0:	ldr	r0, [sp, #244]	; 0xf4
   191d4:	cmp	r7, #0
   191d8:	moveq	r6, r0
   191dc:	beq	191ec <__assert_fail@plt+0x6a14>
   191e0:	bl	1237c <xstrdup@plt>
   191e4:	mov	r6, r0
   191e8:	str	r0, [sp, #244]	; 0xf4
   191ec:	mov	r0, r6
   191f0:	mov	r1, r6
   191f4:	bl	16224 <__assert_fail@plt+0x3a4c>
   191f8:	subs	r4, r0, #0
   191fc:	beq	1a5c8 <__assert_fail@plt+0x7df0>
   19200:	ldr	r6, [sp, #252]	; 0xfc
   19204:	ldr	r3, [r4, #28]
   19208:	cmp	r3, r6
   1920c:	beq	19314 <__assert_fail@plt+0x6b3c>
   19210:	ldr	r7, [sp, #84]	; 0x54
   19214:	ldr	r3, [r7, #232]	; 0xe8
   19218:	cmp	r3, #0
   1921c:	beq	1922c <__assert_fail@plt+0x6a54>
   19220:	ldr	r3, [r4, #36]	; 0x24
   19224:	cmp	r3, #0
   19228:	bne	1a5ac <__assert_fail@plt+0x7dd4>
   1922c:	cmp	r6, #4
   19230:	ldr	r3, [r4, #32]
   19234:	subhi	r7, r6, #5
   19238:	movls	r7, #1
   1923c:	cmp	r3, r7
   19240:	bcc	1a5b0 <__assert_fail@plt+0x7dd8>
   19244:	cmp	r6, r3
   19248:	addhi	r7, r3, #1
   1924c:	bhi	1a5b0 <__assert_fail@plt+0x7dd8>
   19250:	ldr	r3, [r4, #12]
   19254:	cmp	r3, #0
   19258:	beq	19308 <__assert_fail@plt+0x6b30>
   1925c:	mov	r7, r6
   19260:	sub	r8, r7, #-1073741823	; 0xc0000001
   19264:	lsl	r8, r8, #2
   19268:	ldr	r1, [r4, #24]
   1926c:	sub	r2, r7, #1
   19270:	ldr	r3, [r4, #20]
   19274:	cmp	r1, r2
   19278:	bls	192e8 <__assert_fail@plt+0x6b10>
   1927c:	ldr	r0, [r3, r8]
   19280:	ldrb	r3, [r0]
   19284:	cmp	r3, #0
   19288:	beq	1a594 <__assert_fail@plt+0x7dbc>
   1928c:	cmp	r3, #10
   19290:	beq	1a594 <__assert_fail@plt+0x7dbc>
   19294:	cmp	r3, #13
   19298:	movne	r2, r0
   1929c:	movne	r1, #0
   192a0:	bne	192b8 <__assert_fail@plt+0x6ae0>
   192a4:	b	1a594 <__assert_fail@plt+0x7dbc>
   192a8:	cmp	r3, #10
   192ac:	beq	192c8 <__assert_fail@plt+0x6af0>
   192b0:	cmp	r3, #13
   192b4:	beq	192c8 <__assert_fail@plt+0x6af0>
   192b8:	ldrb	r3, [r2, #1]!
   192bc:	add	r1, r1, #1
   192c0:	cmp	r3, #0
   192c4:	bne	192a8 <__assert_fail@plt+0x6ad0>
   192c8:	ldr	ip, [sp, #120]	; 0x78
   192cc:	mov	r2, #1
   192d0:	ldr	r3, [ip]
   192d4:	bl	12340 <fwrite@plt>
   192d8:	movw	r3, #976	; 0x3d0
   192dc:	movt	r3, #7
   192e0:	cmp	r0, #1
   192e4:	beq	1a59c <__assert_fail@plt+0x7dc4>
   192e8:	add	r7, r7, #1
   192ec:	add	r8, r8, #4
   192f0:	cmp	r6, r7
   192f4:	bcs	19268 <__assert_fail@plt+0x6a90>
   192f8:	ldr	r6, [sp, #252]	; 0xfc
   192fc:	ldr	r3, [r4, #32]
   19300:	cmp	r3, r6
   19304:	strcc	r6, [r4, #32]
   19308:	mov	r3, #0
   1930c:	str	r6, [r4, #28]
   19310:	str	r3, [r4, #36]	; 0x24
   19314:	ldr	r0, [sp, #248]	; 0xf8
   19318:	cmp	r0, #0
   1931c:	beq	19368 <__assert_fail@plt+0x6b90>
   19320:	ldr	r6, [sp, #84]	; 0x54
   19324:	ldr	r4, [r6, #152]	; 0x98
   19328:	cmp	r4, #0
   1932c:	beq	1934c <__assert_fail@plt+0x6b74>
   19330:	mov	r1, r4
   19334:	bl	12178 <strcmp@plt>
   19338:	cmp	r0, #0
   1933c:	beq	19368 <__assert_fail@plt+0x6b90>
   19340:	mov	r0, r4
   19344:	bl	121f0 <free@plt>
   19348:	ldr	r0, [sp, #248]	; 0xf8
   1934c:	bl	124e4 <strlen@plt>
   19350:	add	r0, r0, #1
   19354:	bl	12358 <xmalloc@plt>
   19358:	ldr	r7, [sp, #84]	; 0x54
   1935c:	ldr	r1, [sp, #248]	; 0xf8
   19360:	str	r0, [r7, #152]	; 0x98
   19364:	bl	12388 <strcpy@plt>
   19368:	ldr	r3, [sp, #252]	; 0xfc
   1936c:	cmp	r3, #0
   19370:	beq	19388 <__assert_fail@plt+0x6bb0>
   19374:	ldr	ip, [sp, #84]	; 0x54
   19378:	ldr	r2, [ip, #156]	; 0x9c
   1937c:	cmp	r3, r2
   19380:	ldrne	r4, [sp, #100]	; 0x64
   19384:	strne	r3, [r4, #156]	; 0x9c
   19388:	ldr	r6, [sp, #84]	; 0x54
   1938c:	ldr	r3, [sp, #256]	; 0x100
   19390:	ldr	r2, [r6, #160]	; 0xa0
   19394:	cmp	r3, r2
   19398:	ldrne	r7, [sp, #100]	; 0x64
   1939c:	strne	r3, [r7, #160]	; 0xa0
   193a0:	cmp	r5, #0
   193a4:	beq	193b0 <__assert_fail@plt+0x6bd8>
   193a8:	mov	r0, r5
   193ac:	bl	121f0 <free@plt>
   193b0:	ldr	ip, [sp, #84]	; 0x54
   193b4:	ldr	r3, [ip, #24]
   193b8:	cmp	r3, #0
   193bc:	bne	19d9c <__assert_fail@plt+0x75c4>
   193c0:	ldr	r5, [sp, #132]	; 0x84
   193c4:	add	r4, sp, #272	; 0x110
   193c8:	ldr	r6, [sp, #124]	; 0x7c
   193cc:	mov	r1, r4
   193d0:	str	r4, [sp, #156]	; 0x9c
   193d4:	ldrd	r2, [r5, #32]
   193d8:	ldrd	r4, [sp, #72]	; 0x48
   193dc:	ldr	r0, [r6]
   193e0:	adds	r2, r2, r4
   193e4:	adc	r3, r3, r5
   193e8:	bl	126b8 <bfd_sprintf_vma@plt>
   193ec:	ldr	r6, [sp, #156]	; 0x9c
   193f0:	ldr	r5, [sp, #168]	; 0xa8
   193f4:	add	r2, r6, r5
   193f8:	ldrb	r1, [r6, r5]
   193fc:	cmp	r1, #48	; 0x30
   19400:	bne	1a29c <__assert_fail@plt+0x7ac4>
   19404:	add	r3, r2, #1
   19408:	mov	ip, #32
   1940c:	strb	ip, [r3, #-1]
   19410:	mov	r0, r3
   19414:	ldrb	r1, [r3], #1
   19418:	cmp	r1, #48	; 0x30
   1941c:	beq	1940c <__assert_fail@plt+0x6c34>
   19420:	cmp	r1, #0
   19424:	movw	r1, #11796	; 0x2e14
   19428:	movt	r1, #5
   1942c:	moveq	r3, #48	; 0x30
   19430:	strbeq	r3, [r0, #-1]
   19434:	mov	r0, #1
   19438:	bl	125bc <__printf_chk@plt>
   1943c:	ldr	r7, [sp, #184]	; 0xb8
   19440:	cmp	r7, #0
   19444:	beq	19cbc <__assert_fail@plt+0x74e4>
   19448:	ldr	ip, [sp, #84]	; 0x54
   1944c:	movw	r3, #24944	; 0x6170
   19450:	movt	r3, #1
   19454:	str	r3, [fp]
   19458:	mov	r3, #0
   1945c:	str	r3, [sp, #264]	; 0x108
   19460:	ldr	r7, [ip, #196]	; 0xc4
   19464:	ldr	r1, [ip, #164]	; 0xa4
   19468:	cmp	r7, #0
   1946c:	str	r3, [fp, #108]	; 0x6c
   19470:	str	r3, [fp, #112]	; 0x70
   19474:	ldr	r3, [fp, #132]	; 0x84
   19478:	movne	r2, #1073741824	; 0x40000000
   1947c:	moveq	r2, #0
   19480:	cmp	r1, #0
   19484:	str	r2, [fp, #60]	; 0x3c
   19488:	orrne	r2, r2, #536870912	; 0x20000000
   1948c:	strne	r2, [fp, #60]	; 0x3c
   19490:	cmp	r3, #0
   19494:	add	r1, sp, #260	; 0x104
   19498:	str	r1, [fp, #4]
   1949c:	beq	1952c <__assert_fail@plt+0x6d54>
   194a0:	ldr	r4, [sp, #124]	; 0x7c
   194a4:	ldr	r3, [r4]
   194a8:	ldr	r3, [r3, #40]	; 0x28
   194ac:	ubfx	r3, r3, #5, #20
   194b0:	tst	r3, #66	; 0x42
   194b4:	bne	1952c <__assert_fail@plt+0x6d54>
   194b8:	ldr	r5, [sp, #152]	; 0x98
   194bc:	ldr	r6, [sp, #172]	; 0xac
   194c0:	cmp	r5, r6
   194c4:	bcs	1952c <__assert_fail@plt+0x6d54>
   194c8:	ldr	r6, [r5]
   194cc:	ldrd	r0, [sp, #104]	; 0x68
   194d0:	ldrd	r2, [sp, #72]	; 0x48
   194d4:	ldrd	r4, [r6, #8]
   194d8:	subs	r4, r4, r0
   194dc:	sbc	r5, r5, r1
   194e0:	subs	r4, r4, r2
   194e4:	sbc	r5, r5, r3
   194e8:	orrs	r3, r4, r5
   194ec:	beq	19518 <__assert_fail@plt+0x6d40>
   194f0:	cmp	r4, #1
   194f4:	sbcs	ip, r5, #0
   194f8:	blt	1952c <__assert_fail@plt+0x6d54>
   194fc:	ldr	r1, [sp, #116]	; 0x74
   19500:	ldr	r0, [sp, #80]	; 0x50
   19504:	bl	4f040 <warn@@Base+0x5448>
   19508:	mov	r1, #0
   1950c:	cmp	r4, r0
   19510:	sbcs	lr, r5, r1
   19514:	bge	1952c <__assert_fail@plt+0x6d54>
   19518:	ldr	r4, [sp, #124]	; 0x7c
   1951c:	ldr	r3, [fp, #60]	; 0x3c
   19520:	orr	r3, r3, #-2147483648	; 0x80000000
   19524:	str	r3, [fp, #60]	; 0x3c
   19528:	str	r6, [r4, #24]
   1952c:	cmp	r7, #0
   19530:	beq	19e40 <__assert_fail@plt+0x7668>
   19534:	ldr	r5, [sp, #132]	; 0x84
   19538:	ldrd	r0, [r5, #32]
   1953c:	ldrd	r4, [sp, #72]	; 0x48
   19540:	mov	r2, fp
   19544:	adds	r0, r0, r4
   19548:	adc	r1, r1, r5
   1954c:	ldr	r5, [sp, #228]	; 0xe4
   19550:	blx	r5
   19554:	ldr	r6, [sp, #84]	; 0x54
   19558:	ldr	r7, [sp, #120]	; 0x78
   1955c:	movw	r3, #9492	; 0x2514
   19560:	movt	r3, #1
   19564:	ldr	r2, [r6, #200]	; 0xc8
   19568:	ldr	r1, [r7]
   1956c:	cmp	r2, #0
   19570:	str	r3, [fp]
   19574:	mov	r2, #0
   19578:	mov	r3, #0
   1957c:	str	r1, [fp, #4]
   19580:	strd	r2, [fp, #168]	; 0xa8
   19584:	str	r0, [sp, #80]	; 0x50
   19588:	bne	195a0 <__assert_fail@plt+0x6dc8>
   1958c:	ldr	r3, [fp, #108]	; 0x6c
   19590:	ldr	ip, [sp, #136]	; 0x88
   19594:	cmp	r3, #0
   19598:	movne	ip, r3
   1959c:	str	ip, [sp, #136]	; 0x88
   195a0:	ldr	r4, [sp, #80]	; 0x50
   195a4:	ldr	r5, [sp, #116]	; 0x74
   195a8:	cmp	r4, r5
   195ac:	blt	1a18c <__assert_fail@plt+0x79b4>
   195b0:	str	r4, [sp, #204]	; 0xcc
   195b4:	ldr	r4, [sp, #84]	; 0x54
   195b8:	ldr	r2, [r4, #24]
   195bc:	cmp	r2, #0
   195c0:	beq	19c84 <__assert_fail@plt+0x74ac>
   195c4:	ldr	r5, [sp, #100]	; 0x64
   195c8:	ldr	r3, [r5, #236]	; 0xec
   195cc:	cmp	r3, #0
   195d0:	movle	r3, #0
   195d4:	movgt	r3, #1
   195d8:	cmp	r3, #0
   195dc:	beq	19c9c <__assert_fail@plt+0x74c4>
   195e0:	ldr	r7, [sp, #136]	; 0x88
   195e4:	ldr	ip, [sp, #80]	; 0x50
   195e8:	cmp	r7, ip
   195ec:	bge	19e70 <__assert_fail@plt+0x7698>
   195f0:	cmp	r2, #0
   195f4:	bne	19f18 <__assert_fail@plt+0x7740>
   195f8:	ldr	r4, [sp, #84]	; 0x54
   195fc:	ldr	r3, [r4, #60]	; 0x3c
   19600:	cmp	r3, #0
   19604:	movne	r7, ip
   19608:	str	r7, [sp, #60]	; 0x3c
   1960c:	ldr	r6, [sp, #60]	; 0x3c
   19610:	ldrd	r4, [sp, #64]	; 0x40
   19614:	ldr	r8, [fp, #112]	; 0x70
   19618:	adds	r4, r4, r6
   1961c:	adc	r5, r5, r6, asr #31
   19620:	cmp	r8, #0
   19624:	ldrd	r6, [sp, #64]	; 0x40
   19628:	moveq	r8, #1
   1962c:	strd	r4, [sp, #40]	; 0x28
   19630:	cmp	r7, r5
   19634:	cmpeq	r6, r4
   19638:	bcs	196bc <__assert_fail@plt+0x6ee4>
   1963c:	ldrd	r6, [sp, #64]	; 0x40
   19640:	asr	r5, r8, #31
   19644:	ldr	ip, [sp, #140]	; 0x8c
   19648:	mov	r4, r8
   1964c:	add	r9, ip, r8
   19650:	str	r9, [sp, #48]	; 0x30
   19654:	cmp	r8, #1
   19658:	ble	19ba4 <__assert_fail@plt+0x73cc>
   1965c:	ldr	r3, [fp, #116]	; 0x74
   19660:	cmp	r3, #1
   19664:	beq	19c20 <__assert_fail@plt+0x7448>
   19668:	ldr	ip, [sp, #140]	; 0x8c
   1966c:	mov	sl, #0
   19670:	add	r9, ip, r6
   19674:	mov	r0, #1
   19678:	ldrb	r2, [r9, sl]
   1967c:	movw	r1, #10468	; 0x28e4
   19680:	add	sl, sl, r0
   19684:	movt	r1, #5
   19688:	bl	125bc <__printf_chk@plt>
   1968c:	cmp	sl, r8
   19690:	bne	19674 <__assert_fail@plt+0x6e9c>
   19694:	ldr	ip, [sp, #120]	; 0x78
   19698:	mov	r0, #32
   1969c:	ldr	r1, [ip]
   196a0:	bl	12334 <_IO_putc@plt>
   196a4:	adds	r6, r6, r4
   196a8:	ldrd	r0, [sp, #40]	; 0x28
   196ac:	adc	r7, r7, r5
   196b0:	cmp	r7, r1
   196b4:	cmpeq	r6, r0
   196b8:	bcc	19654 <__assert_fail@plt+0x6e7c>
   196bc:	ldr	r7, [sp, #136]	; 0x88
   196c0:	ldr	ip, [sp, #60]	; 0x3c
   196c4:	cmp	r7, ip
   196c8:	ble	1971c <__assert_fail@plt+0x6f44>
   196cc:	ldr	r5, [sp, #60]	; 0x3c
   196d0:	ldr	r6, [sp, #136]	; 0x88
   196d4:	ldr	r7, [sp, #120]	; 0x78
   196d8:	cmp	r8, #0
   196dc:	ble	19700 <__assert_fail@plt+0x6f28>
   196e0:	mov	r4, #0
   196e4:	add	r4, r4, #1
   196e8:	movw	r1, #16880	; 0x41f0
   196ec:	mov	r0, #1
   196f0:	movt	r1, #5
   196f4:	bl	125bc <__printf_chk@plt>
   196f8:	cmp	r4, r8
   196fc:	bne	196e4 <__assert_fail@plt+0x6f0c>
   19700:	add	r5, r5, r8
   19704:	mov	r0, #32
   19708:	ldr	r1, [r7]
   1970c:	bl	12334 <_IO_putc@plt>
   19710:	cmp	r6, r5
   19714:	bgt	196d8 <__assert_fail@plt+0x6f00>
   19718:	str	r5, [sp, #60]	; 0x3c
   1971c:	ldr	r4, [sp, #184]	; 0xb8
   19720:	cmp	r4, #0
   19724:	beq	19e08 <__assert_fail@plt+0x7630>
   19728:	ldr	r5, [sp, #120]	; 0x78
   1972c:	mov	r0, #9
   19730:	ldr	r1, [r5]
   19734:	bl	12334 <_IO_putc@plt>
   19738:	ldr	r3, [sp, #264]	; 0x108
   1973c:	cmp	r3, #0
   19740:	bne	19e7c <__assert_fail@plt+0x76a4>
   19744:	ldr	r7, [sp, #84]	; 0x54
   19748:	ldr	r3, [r7, #24]
   1974c:	cmp	r3, #0
   19750:	beq	19c70 <__assert_fail@plt+0x7498>
   19754:	ldr	ip, [sp, #100]	; 0x64
   19758:	ldr	r3, [ip, #236]	; 0xec
   1975c:	cmp	r3, #0
   19760:	movle	r3, #0
   19764:	movgt	r3, #1
   19768:	cmp	r3, #0
   1976c:	beq	19914 <__assert_fail@plt+0x713c>
   19770:	ldr	r4, [sp, #80]	; 0x50
   19774:	ldr	r5, [sp, #60]	; 0x3c
   19778:	cmp	r4, r5
   1977c:	ble	19914 <__assert_fail@plt+0x713c>
   19780:	ldr	r9, [sp, #140]	; 0x8c
   19784:	mov	r4, r5
   19788:	ldr	r7, [sp, #120]	; 0x78
   1978c:	asr	r5, r5, #31
   19790:	strd	r4, [sp, #88]	; 0x58
   19794:	add	r6, sp, #272	; 0x110
   19798:	ldr	r5, [sp, #168]	; 0xa8
   1979c:	str	r6, [sp, #156]	; 0x9c
   197a0:	add	r5, r6, r5
   197a4:	str	r5, [sp, #96]	; 0x60
   197a8:	ldrd	r0, [sp, #64]	; 0x40
   197ac:	ldrd	r4, [sp, #88]	; 0x58
   197b0:	adds	r4, r4, r0
   197b4:	mov	r0, #10
   197b8:	adc	r5, r5, r1
   197bc:	ldr	r1, [r7]
   197c0:	bl	12334 <_IO_putc@plt>
   197c4:	ldr	r2, [sp, #116]	; 0x74
   197c8:	mov	r3, #0
   197cc:	mov	r0, r4
   197d0:	mov	r1, r5
   197d4:	bl	4f48c <warn@@Base+0x5894>
   197d8:	ldr	r6, [sp, #132]	; 0x84
   197dc:	ldrd	r2, [r6, #32]
   197e0:	ldr	r6, [sp, #124]	; 0x7c
   197e4:	ldr	ip, [r6]
   197e8:	adds	r2, r2, r0
   197ec:	mov	r0, ip
   197f0:	adc	r3, r3, r1
   197f4:	ldr	r1, [sp, #156]	; 0x9c
   197f8:	bl	126b8 <bfd_sprintf_vma@plt>
   197fc:	ldr	ip, [sp, #96]	; 0x60
   19800:	ldrb	r2, [ip]
   19804:	cmp	r2, #48	; 0x30
   19808:	bne	19de8 <__assert_fail@plt+0x7610>
   1980c:	add	r3, ip, #1
   19810:	mov	lr, #32
   19814:	mov	r1, r3
   19818:	strb	lr, [r3, #-1]
   1981c:	ldrb	r2, [r3], #1
   19820:	cmp	r2, #48	; 0x30
   19824:	beq	19810 <__assert_fail@plt+0x7038>
   19828:	cmp	r2, #0
   1982c:	ldr	r2, [sp, #96]	; 0x60
   19830:	moveq	r0, #48	; 0x30
   19834:	strbeq	r0, [r1, #-1]
   19838:	movw	r1, #11796	; 0x2e14
   1983c:	mov	r0, #1
   19840:	movt	r1, #5
   19844:	bl	125bc <__printf_chk@plt>
   19848:	ldr	r6, [sp, #136]	; 0x88
   1984c:	ldr	ip, [sp, #60]	; 0x3c
   19850:	add	r3, r6, ip
   19854:	ldr	r6, [sp, #80]	; 0x50
   19858:	cmp	r6, r3
   1985c:	movge	r6, r3
   19860:	ldrd	r2, [sp, #64]	; 0x40
   19864:	str	r6, [sp, #60]	; 0x3c
   19868:	mov	r0, r6
   1986c:	asr	r1, r6, #31
   19870:	strd	r0, [sp, #88]	; 0x58
   19874:	adds	r0, r6, r2
   19878:	adc	r1, r1, r3
   1987c:	strd	r0, [sp, #40]	; 0x28
   19880:	cmp	r5, r1
   19884:	cmpeq	r4, r0
   19888:	bcs	19904 <__assert_fail@plt+0x712c>
   1988c:	mov	r0, r8
   19890:	asr	r1, r8, #31
   19894:	add	r3, r9, r8
   19898:	strd	r0, [sp, #48]	; 0x30
   1989c:	str	r3, [sp, #112]	; 0x70
   198a0:	cmp	r8, #1
   198a4:	ble	19b24 <__assert_fail@plt+0x734c>
   198a8:	ldr	r3, [fp, #116]	; 0x74
   198ac:	cmp	r3, #1
   198b0:	beq	19b30 <__assert_fail@plt+0x7358>
   198b4:	add	r6, r9, r4
   198b8:	mov	sl, #0
   198bc:	mov	r0, #1
   198c0:	ldrb	r2, [r6, sl]
   198c4:	movw	r1, #10468	; 0x28e4
   198c8:	add	sl, sl, r0
   198cc:	movt	r1, #5
   198d0:	bl	125bc <__printf_chk@plt>
   198d4:	cmp	sl, r8
   198d8:	bne	198bc <__assert_fail@plt+0x70e4>
   198dc:	ldr	r1, [r7]
   198e0:	mov	r0, #32
   198e4:	bl	12334 <_IO_putc@plt>
   198e8:	ldrd	r0, [sp, #48]	; 0x30
   198ec:	ldrd	r2, [sp, #40]	; 0x28
   198f0:	adds	r4, r4, r0
   198f4:	adc	r5, r5, r1
   198f8:	cmp	r5, r3
   198fc:	cmpeq	r4, r2
   19900:	bcc	198a0 <__assert_fail@plt+0x70c8>
   19904:	ldr	r4, [sp, #80]	; 0x50
   19908:	ldr	r5, [sp, #60]	; 0x3c
   1990c:	cmp	r4, r5
   19910:	bgt	197a8 <__assert_fail@plt+0x6fd0>
   19914:	ldr	r5, [sp, #84]	; 0x54
   19918:	ldr	r4, [r5, #60]	; 0x3c
   1991c:	cmp	r4, #0
   19920:	movne	r4, #1
   19924:	beq	19e5c <__assert_fail@plt+0x7684>
   19928:	ldr	r7, [sp, #152]	; 0x98
   1992c:	ldr	ip, [sp, #172]	; 0xac
   19930:	cmp	r7, ip
   19934:	bcs	19bb8 <__assert_fail@plt+0x73e0>
   19938:	ldr	r0, [sp, #204]	; 0xcc
   1993c:	ldr	r1, [sp, #116]	; 0x74
   19940:	bl	4f040 <warn@@Base+0x5448>
   19944:	ldr	r7, [sp, #152]	; 0x98
   19948:	ldrd	r2, [sp, #104]	; 0x68
   1994c:	ldrd	r8, [sp, #72]	; 0x48
   19950:	ldr	r7, [r7]
   19954:	adds	r8, r8, r2
   19958:	adc	r9, r9, r3
   1995c:	ldrd	r2, [r7, #8]
   19960:	adds	r8, r8, r0
   19964:	adc	r9, r9, #0
   19968:	cmp	r9, r3
   1996c:	cmpeq	r8, r2
   19970:	bls	19bb8 <__assert_fail@plt+0x73e0>
   19974:	strd	r8, [sp, #40]	; 0x28
   19978:	movw	sl, #9752	; 0x2618
   1997c:	ldr	r6, [sp, #152]	; 0x98
   19980:	movt	sl, #5
   19984:	ldr	r9, [sp, #132]	; 0x84
   19988:	str	sl, [sp, #48]	; 0x30
   1998c:	str	r4, [sp, #60]	; 0x3c
   19990:	ldr	r8, [sp, #84]	; 0x54
   19994:	ldr	sl, [sp, #172]	; 0xac
   19998:	b	19ae8 <__assert_fail@plt+0x7310>
   1999c:	ldr	r5, [sp, #120]	; 0x78
   199a0:	mov	r0, #9
   199a4:	ldr	r1, [r5]
   199a8:	bl	12334 <_IO_putc@plt>
   199ac:	ldrd	r4, [r7, #8]
   199b0:	mov	r3, #1
   199b4:	ldrd	r0, [r9, #32]
   199b8:	mov	r2, fp
   199bc:	adds	r0, r0, r4
   199c0:	adc	r1, r1, r5
   199c4:	ldrd	r4, [sp, #104]	; 0x68
   199c8:	subs	r0, r0, r4
   199cc:	sbc	r1, r1, r5
   199d0:	bl	15570 <__assert_fail@plt+0x2d98>
   199d4:	ldr	r3, [r7, #24]
   199d8:	cmp	r3, #0
   199dc:	beq	19c5c <__assert_fail@plt+0x7484>
   199e0:	ldr	r2, [r3, #32]
   199e4:	cmp	r2, #0
   199e8:	movwne	r1, #11860	; 0x2e54
   199ec:	movweq	r1, #11868	; 0x2e5c
   199f0:	movne	r0, #1
   199f4:	movtne	r1, #5
   199f8:	ldreq	r2, [r3]
   199fc:	moveq	r0, #1
   19a00:	movteq	r1, #5
   19a04:	bl	125bc <__printf_chk@plt>
   19a08:	ldr	r3, [r7]
   19a0c:	cmp	r3, #0
   19a10:	beq	19b60 <__assert_fail@plt+0x7388>
   19a14:	ldr	r2, [r3]
   19a18:	cmp	r2, #0
   19a1c:	beq	19b60 <__assert_fail@plt+0x7388>
   19a20:	ldr	r3, [r2, #4]
   19a24:	cmp	r3, #0
   19a28:	beq	19a38 <__assert_fail@plt+0x7260>
   19a2c:	ldrb	r3, [r3]
   19a30:	cmp	r3, #0
   19a34:	bne	19b74 <__assert_fail@plt+0x739c>
   19a38:	ldr	r3, [r2, #20]
   19a3c:	ldr	r2, [r3]
   19a40:	cmp	r2, #0
   19a44:	beq	19c50 <__assert_fail@plt+0x7478>
   19a48:	ldrb	r3, [r2]
   19a4c:	ldr	ip, [sp, #48]	; 0x30
   19a50:	cmp	r3, #0
   19a54:	moveq	r2, ip
   19a58:	movw	r1, #44884	; 0xaf54
   19a5c:	mov	r0, #1
   19a60:	movt	r1, #5
   19a64:	bl	125bc <__printf_chk@plt>
   19a68:	ldrd	r0, [r7, #16]
   19a6c:	orrs	lr, r0, r1
   19a70:	beq	19aac <__assert_fail@plt+0x72d4>
   19a74:	mov	r4, r0
   19a78:	mov	r5, r1
   19a7c:	cmp	r4, #0
   19a80:	sbcs	r0, r5, #0
   19a84:	blt	19b88 <__assert_fail@plt+0x73b0>
   19a88:	movw	r1, #9696	; 0x25e0
   19a8c:	mov	r0, #1
   19a90:	movt	r1, #5
   19a94:	bl	125bc <__printf_chk@plt>
   19a98:	mov	r0, r4
   19a9c:	mov	r1, r5
   19aa0:	mov	r2, fp
   19aa4:	mov	r3, #1
   19aa8:	bl	15570 <__assert_fail@plt+0x2d98>
   19aac:	mov	r0, #10
   19ab0:	mov	r1, #0
   19ab4:	str	r1, [sp, #60]	; 0x3c
   19ab8:	bl	1258c <putchar@plt>
   19abc:	add	r1, r6, #4
   19ac0:	cmp	r1, sl
   19ac4:	mov	r0, r1
   19ac8:	bcs	19bb0 <__assert_fail@plt+0x73d8>
   19acc:	ldr	r7, [r6, #4]
   19ad0:	ldrd	r4, [sp, #40]	; 0x28
   19ad4:	ldrd	r2, [r7, #8]
   19ad8:	cmp	r5, r3
   19adc:	cmpeq	r4, r2
   19ae0:	bls	19bb0 <__assert_fail@plt+0x73d8>
   19ae4:	mov	r6, r1
   19ae8:	ldr	r3, [r8, #108]	; 0x6c
   19aec:	cmp	r3, #0
   19af0:	bne	19b04 <__assert_fail@plt+0x732c>
   19af4:	ldr	r4, [sp, #100]	; 0x64
   19af8:	ldr	r3, [r4, #132]	; 0x84
   19afc:	cmp	r3, #0
   19b00:	beq	19abc <__assert_fail@plt+0x72e4>
   19b04:	ldr	r3, [r8, #60]	; 0x3c
   19b08:	cmp	r3, #0
   19b0c:	bne	1999c <__assert_fail@plt+0x71c4>
   19b10:	movw	r1, #11840	; 0x2e40
   19b14:	mov	r0, #1
   19b18:	movt	r1, #5
   19b1c:	bl	125bc <__printf_chk@plt>
   19b20:	b	199ac <__assert_fail@plt+0x71d4>
   19b24:	cmp	r8, #0
   19b28:	bgt	198b4 <__assert_fail@plt+0x70dc>
   19b2c:	b	198dc <__assert_fail@plt+0x7104>
   19b30:	ldr	ip, [sp, #112]	; 0x70
   19b34:	sub	r6, r8, #1
   19b38:	add	sl, ip, r4
   19b3c:	sub	r6, r6, #1
   19b40:	movw	r1, #10468	; 0x28e4
   19b44:	mov	r0, #1
   19b48:	movt	r1, #5
   19b4c:	ldrb	r2, [sl, #-1]!
   19b50:	bl	125bc <__printf_chk@plt>
   19b54:	cmn	r6, #1
   19b58:	bne	19b3c <__assert_fail@plt+0x7364>
   19b5c:	b	198dc <__assert_fail@plt+0x7104>
   19b60:	movw	r1, #9752	; 0x2618
   19b64:	mov	r0, #1
   19b68:	movt	r1, #5
   19b6c:	bl	125bc <__printf_chk@plt>
   19b70:	b	19a68 <__assert_fail@plt+0x7290>
   19b74:	ldr	r5, [sp, #124]	; 0x7c
   19b78:	mov	r1, fp
   19b7c:	ldr	r0, [r5]
   19b80:	bl	152f4 <__assert_fail@plt+0x2b1c>
   19b84:	b	19a68 <__assert_fail@plt+0x7290>
   19b88:	movw	r1, #9692	; 0x25dc
   19b8c:	mov	r0, #1
   19b90:	movt	r1, #5
   19b94:	rsbs	r4, r4, #0
   19b98:	rsc	r5, r5, #0
   19b9c:	bl	125bc <__printf_chk@plt>
   19ba0:	b	19a98 <__assert_fail@plt+0x72c0>
   19ba4:	cmp	r8, #0
   19ba8:	bgt	19668 <__assert_fail@plt+0x6e90>
   19bac:	b	19694 <__assert_fail@plt+0x6ebc>
   19bb0:	ldr	r4, [sp, #60]	; 0x3c
   19bb4:	str	r0, [sp, #152]	; 0x98
   19bb8:	cmp	r4, #0
   19bbc:	bne	19df0 <__assert_fail@plt+0x7618>
   19bc0:	ldr	r0, [sp, #204]	; 0xcc
   19bc4:	ldr	r1, [sp, #116]	; 0x74
   19bc8:	bl	4f040 <warn@@Base+0x5448>
   19bcc:	ldrd	r4, [sp, #72]	; 0x48
   19bd0:	ldrd	r6, [sp, #144]	; 0x90
   19bd4:	adds	r4, r4, r0
   19bd8:	adc	r5, r5, #0
   19bdc:	strd	r4, [sp, #72]	; 0x48
   19be0:	cmp	r7, r5
   19be4:	cmpeq	r6, r4
   19be8:	bhi	18f08 <__assert_fail@plt+0x6730>
   19bec:	ldr	r8, [sp, #84]	; 0x54
   19bf0:	mov	r9, fp
   19bf4:	ldr	r4, [sp, #144]	; 0x90
   19bf8:	mov	r5, #0
   19bfc:	ldr	r0, [sp, #260]	; 0x104
   19c00:	strd	r4, [sp, #72]	; 0x48
   19c04:	bl	121f0 <free@plt>
   19c08:	ldrd	r6, [sp, #176]	; 0xb0
   19c0c:	cmp	r7, r5
   19c10:	cmpeq	r6, r4
   19c14:	bls	1a4d0 <__assert_fail@plt+0x7cf8>
   19c18:	ldr	fp, [sp, #212]	; 0xd4
   19c1c:	b	18b78 <__assert_fail@plt+0x63a0>
   19c20:	ldr	r3, [sp, #48]	; 0x30
   19c24:	sub	r9, r8, #1
   19c28:	add	sl, r3, r6
   19c2c:	sub	r9, r9, #1
   19c30:	movw	r1, #10468	; 0x28e4
   19c34:	mov	r0, #1
   19c38:	movt	r1, #5
   19c3c:	ldrb	r2, [sl, #-1]!
   19c40:	bl	125bc <__printf_chk@plt>
   19c44:	cmn	r9, #1
   19c48:	bne	19c2c <__assert_fail@plt+0x7454>
   19c4c:	b	19694 <__assert_fail@plt+0x6ebc>
   19c50:	movw	r2, #9752	; 0x2618
   19c54:	movt	r2, #5
   19c58:	b	19a58 <__assert_fail@plt+0x7280>
   19c5c:	movw	r1, #11844	; 0x2e44
   19c60:	mov	r0, #1
   19c64:	movt	r1, #5
   19c68:	bl	125bc <__printf_chk@plt>
   19c6c:	b	19a08 <__assert_fail@plt+0x7230>
   19c70:	ldr	r4, [sp, #100]	; 0x64
   19c74:	ldr	r3, [r4, #236]	; 0xec
   19c78:	mvn	r3, r3
   19c7c:	lsr	r3, r3, #31
   19c80:	b	19768 <__assert_fail@plt+0x6f90>
   19c84:	ldr	r6, [sp, #100]	; 0x64
   19c88:	ldr	r3, [r6, #236]	; 0xec
   19c8c:	mvn	r3, r3
   19c90:	lsr	r3, r3, #31
   19c94:	cmp	r3, #0
   19c98:	bne	195e0 <__assert_fail@plt+0x6e08>
   19c9c:	ldr	r6, [sp, #184]	; 0xb8
   19ca0:	cmp	r6, #0
   19ca4:	strne	r3, [sp, #60]	; 0x3c
   19ca8:	movne	r8, r3
   19cac:	bne	19738 <__assert_fail@plt+0x6f60>
   19cb0:	str	r6, [sp, #60]	; 0x3c
   19cb4:	mov	r8, r6
   19cb8:	b	19e18 <__assert_fail@plt+0x7640>
   19cbc:	ldr	r1, [sp, #116]	; 0x74
   19cc0:	ldr	r0, [sp, #136]	; 0x88
   19cc4:	bl	4f040 <warn@@Base+0x5448>
   19cc8:	ldrd	r4, [sp, #72]	; 0x48
   19ccc:	ldrd	r6, [sp, #144]	; 0x90
   19cd0:	adds	r4, r4, r0
   19cd4:	adc	r5, r5, #0
   19cd8:	mov	r0, r4
   19cdc:	mov	r1, r5
   19ce0:	cmp	r7, r1
   19ce4:	cmpeq	r6, r0
   19ce8:	bcs	19e30 <__assert_fail@plt+0x7658>
   19cec:	ldrd	r4, [sp, #72]	; 0x48
   19cf0:	mov	r2, r6
   19cf4:	mov	r3, r7
   19cf8:	subs	r2, r2, r4
   19cfc:	sbc	r3, r3, r5
   19d00:	ldr	r5, [sp, #116]	; 0x74
   19d04:	mul	r5, r2, r5
   19d08:	str	r5, [sp, #80]	; 0x50
   19d0c:	str	r5, [sp, #204]	; 0xcc
   19d10:	ldr	r4, [sp, #80]	; 0x50
   19d14:	ldrd	r2, [sp, #64]	; 0x40
   19d18:	asr	r5, r4, #31
   19d1c:	adds	r2, r2, r4
   19d20:	adc	r3, r3, r5
   19d24:	mov	r6, r4
   19d28:	ldrd	r4, [sp, #64]	; 0x40
   19d2c:	cmp	r5, r3
   19d30:	cmpeq	r4, r2
   19d34:	bcs	1a120 <__assert_fail@plt+0x7948>
   19d38:	add	r5, sp, #272	; 0x110
   19d3c:	rsb	lr, r4, r2
   19d40:	str	r5, [sp, #156]	; 0x9c
   19d44:	movw	r0, #65192	; 0xfea8
   19d48:	ldr	r4, [sp, #140]	; 0x8c
   19d4c:	movt	r0, #6
   19d50:	ldr	r5, [sp, #64]	; 0x40
   19d54:	mov	r3, #0
   19d58:	add	ip, r4, r5
   19d5c:	ldr	r5, [sp, #156]	; 0x9c
   19d60:	mov	r4, #46	; 0x2e
   19d64:	ldrb	r2, [ip, r3]
   19d68:	lsl	r1, r2, #1
   19d6c:	ldrh	r1, [r0, r1]
   19d70:	tst	r1, #16
   19d74:	strbne	r2, [r5, r3]
   19d78:	strbeq	r4, [r5, r3]
   19d7c:	add	r3, r3, #1
   19d80:	cmp	r3, lr
   19d84:	bne	19d64 <__assert_fail@plt+0x758c>
   19d88:	add	ip, sp, #328	; 0x148
   19d8c:	mov	r3, #0
   19d90:	add	r6, ip, r6
   19d94:	strb	r3, [r6, #-56]	; 0xffffffc8
   19d98:	b	195b4 <__assert_fail@plt+0x6ddc>
   19d9c:	ldr	r7, [sp, #132]	; 0x84
   19da0:	mov	r3, #1
   19da4:	ldrd	r4, [sp, #72]	; 0x48
   19da8:	mov	r2, fp
   19dac:	ldr	ip, [sp, #124]	; 0x7c
   19db0:	ldrd	r0, [r7, #32]
   19db4:	adds	r0, r0, r4
   19db8:	str	r3, [ip, #8]
   19dbc:	adc	r1, r1, r5
   19dc0:	mov	r3, #0
   19dc4:	bl	15834 <__assert_fail@plt+0x305c>
   19dc8:	ldr	r5, [sp, #124]	; 0x7c
   19dcc:	ldr	r6, [sp, #120]	; 0x78
   19dd0:	mov	r3, #0
   19dd4:	mov	r0, #32
   19dd8:	str	r3, [r5, #8]
   19ddc:	ldr	r1, [r6]
   19de0:	bl	12334 <_IO_putc@plt>
   19de4:	b	1943c <__assert_fail@plt+0x6c64>
   19de8:	ldr	r1, [sp, #96]	; 0x60
   19dec:	b	19828 <__assert_fail@plt+0x7050>
   19df0:	mov	r0, #10
   19df4:	bl	1258c <putchar@plt>
   19df8:	b	19bc0 <__assert_fail@plt+0x73e8>
   19dfc:	ldr	r7, [sp, #124]	; 0x7c
   19e00:	ldr	r0, [r7]
   19e04:	b	19028 <__assert_fail@plt+0x6850>
   19e08:	movw	r1, #46872	; 0xb718
   19e0c:	mov	r0, #1
   19e10:	movt	r1, #5
   19e14:	bl	125bc <__printf_chk@plt>
   19e18:	movw	r1, #44884	; 0xaf54
   19e1c:	add	r2, sp, #272	; 0x110
   19e20:	movt	r1, #5
   19e24:	mov	r0, #1
   19e28:	bl	125bc <__printf_chk@plt>
   19e2c:	b	19744 <__assert_fail@plt+0x6f6c>
   19e30:	ldr	r6, [sp, #136]	; 0x88
   19e34:	str	r6, [sp, #204]	; 0xcc
   19e38:	str	r6, [sp, #80]	; 0x50
   19e3c:	b	19d10 <__assert_fail@plt+0x7538>
   19e40:	ldr	r6, [sp, #132]	; 0x84
   19e44:	ldr	r3, [r6, #20]
   19e48:	and	r3, r3, #272	; 0x110
   19e4c:	cmp	r3, #272	; 0x110
   19e50:	beq	19f44 <__assert_fail@plt+0x776c>
   19e54:	ldrd	r0, [r6, #32]
   19e58:	b	1953c <__assert_fail@plt+0x6d64>
   19e5c:	ldr	r6, [sp, #120]	; 0x78
   19e60:	mov	r0, #10
   19e64:	ldr	r1, [r6]
   19e68:	bl	12334 <_IO_putc@plt>
   19e6c:	b	19928 <__assert_fail@plt+0x7150>
   19e70:	ldr	r5, [sp, #80]	; 0x50
   19e74:	str	r5, [sp, #60]	; 0x3c
   19e78:	b	1960c <__assert_fail@plt+0x6e34>
   19e7c:	movw	r1, #44884	; 0xaf54
   19e80:	ldr	r2, [sp, #260]	; 0x104
   19e84:	movt	r1, #5
   19e88:	mov	r0, #1
   19e8c:	bl	125bc <__printf_chk@plt>
   19e90:	b	19744 <__assert_fail@plt+0x6f6c>
   19e94:	cmp	r3, r5
   19e98:	cmpeq	r2, r4
   19e9c:	beq	19eb0 <__assert_fail@plt+0x76d8>
   19ea0:	ldrd	r6, [sp, #64]	; 0x40
   19ea4:	mvn	r2, #3
   19ea8:	and	r2, r2, r0
   19eac:	adds	r2, r2, r6
   19eb0:	ldr	ip, [sp, #72]	; 0x48
   19eb4:	ldr	r4, [sp, #116]	; 0x74
   19eb8:	ldr	r7, [sp, #84]	; 0x54
   19ebc:	mls	ip, r4, ip, r2
   19ec0:	ldr	r3, [r7, #20]
   19ec4:	cmp	r3, #0
   19ec8:	str	ip, [sp, #80]	; 0x50
   19ecc:	beq	19efc <__assert_fail@plt+0x7724>
   19ed0:	mov	r1, r4
   19ed4:	mov	r0, ip
   19ed8:	bl	4f040 <warn@@Base+0x5448>
   19edc:	ldrd	r4, [sp, #72]	; 0x48
   19ee0:	ldrd	r6, [sp, #144]	; 0x90
   19ee4:	adds	r4, r4, r0
   19ee8:	mov	r2, r0
   19eec:	adc	r5, r5, #0
   19ef0:	cmp	r7, r5
   19ef4:	cmpeq	r6, r4
   19ef8:	bhi	1a138 <__assert_fail@plt+0x7960>
   19efc:	movw	r0, #11788	; 0x2e0c
   19f00:	movt	r0, #5
   19f04:	bl	12418 <puts@plt>
   19f08:	ldr	r5, [sp, #80]	; 0x50
   19f0c:	mov	r4, #0
   19f10:	str	r5, [sp, #204]	; 0xcc
   19f14:	b	19928 <__assert_fail@plt+0x7150>
   19f18:	ldr	r6, [sp, #80]	; 0x50
   19f1c:	str	r6, [sp, #60]	; 0x3c
   19f20:	b	1960c <__assert_fail@plt+0x6e34>
   19f24:	ldr	r6, [sp, #236]	; 0xec
   19f28:	mov	r7, #0
   19f2c:	mov	r5, r7
   19f30:	mov	r4, r6
   19f34:	cmp	r1, r5
   19f38:	cmpeq	r0, r4
   19f3c:	bcc	19eb0 <__assert_fail@plt+0x76d8>
   19f40:	b	19000 <__assert_fail@plt+0x6828>
   19f44:	ldr	r7, [sp, #132]	; 0x84
   19f48:	ldrd	r2, [sp, #144]	; 0x90
   19f4c:	ldrd	r0, [r7, #32]
   19f50:	adds	r2, r2, r0
   19f54:	adc	r3, r3, r1
   19f58:	strd	r2, [fp, #168]	; 0xa8
   19f5c:	b	1953c <__assert_fail@plt+0x6d64>
   19f60:	ldrd	r2, [sp, #64]	; 0x40
   19f64:	b	18fa0 <__assert_fail@plt+0x67c8>
   19f68:	ldr	ip, [sp, #132]	; 0x84
   19f6c:	mov	r3, r4
   19f70:	ldr	r2, [sp, #116]	; 0x74
   19f74:	ldr	r6, [sp, #124]	; 0x7c
   19f78:	ldrd	r0, [ip, #48]	; 0x30
   19f7c:	bl	4f48c <warn@@Base+0x5894>
   19f80:	ldr	r7, [sp, #132]	; 0x84
   19f84:	ldr	r5, [r6]
   19f88:	add	r6, sp, #272	; 0x110
   19f8c:	ldrd	r2, [r7, #32]
   19f90:	adds	r2, r2, r0
   19f94:	mov	r0, r5
   19f98:	adc	r3, r3, r1
   19f9c:	mov	r1, r6
   19fa0:	bl	126b8 <bfd_sprintf_vma@plt>
   19fa4:	ldrb	r1, [sp, #272]	; 0x110
   19fa8:	str	r4, [sp, #168]	; 0xa8
   19fac:	cmp	r1, #48	; 0x30
   19fb0:	bne	19fcc <__assert_fail@plt+0x77f4>
   19fb4:	mov	r3, r4
   19fb8:	add	r3, r3, #1
   19fbc:	ldrb	r1, [r6, r3]
   19fc0:	cmp	r1, #48	; 0x30
   19fc4:	beq	19fb8 <__assert_fail@plt+0x77e0>
   19fc8:	str	r3, [sp, #168]	; 0xa8
   19fcc:	cmp	r1, #0
   19fd0:	bne	19fe8 <__assert_fail@plt+0x7810>
   19fd4:	ldr	ip, [sp, #132]	; 0x84
   19fd8:	ldrd	r2, [ip, #32]
   19fdc:	orrs	lr, r2, r3
   19fe0:	strne	r1, [sp, #168]	; 0xa8
   19fe4:	bne	18ebc <__assert_fail@plt+0x66e4>
   19fe8:	ldr	r4, [sp, #168]	; 0xa8
   19fec:	cmp	r4, #0
   19ff0:	subne	r4, r4, #1
   19ff4:	bicne	r4, r4, #3
   19ff8:	strne	r4, [sp, #168]	; 0xa8
   19ffc:	b	18ebc <__assert_fail@plt+0x66e4>
   1a000:	ldrd	r6, [sp, #88]	; 0x58
   1a004:	cmp	r7, r5
   1a008:	cmpeq	r6, r4
   1a00c:	bcc	1a2c0 <__assert_fail@plt+0x7ae8>
   1a010:	ldrd	r4, [sp, #176]	; 0xb0
   1a014:	strd	r4, [sp, #144]	; 0x90
   1a018:	mov	r5, #0
   1a01c:	str	r5, [sp, #212]	; 0xd4
   1a020:	ldrd	r4, [sp, #144]	; 0x90
   1a024:	ldrd	r0, [sp, #72]	; 0x48
   1a028:	ldr	r3, [r8, #196]	; 0xc4
   1a02c:	cmp	r5, r1
   1a030:	cmpeq	r4, r0
   1a034:	ldrdls	r4, [sp, #176]	; 0xb0
   1a038:	strdls	r4, [sp, #144]	; 0x90
   1a03c:	cmp	r3, #0
   1a040:	bne	18e30 <__assert_fail@plt+0x6658>
   1a044:	cmp	fp, #0
   1a048:	beq	18e30 <__assert_fail@plt+0x6658>
   1a04c:	ldr	lr, [fp, #20]
   1a050:	ldr	r5, [sp, #128]	; 0x80
   1a054:	cmp	lr, r5
   1a058:	bne	18e30 <__assert_fail@plt+0x6658>
   1a05c:	ldrd	r0, [fp, #8]
   1a060:	ldrd	r2, [r5, #32]
   1a064:	adds	r2, r2, r0
   1a068:	adc	r3, r3, r1
   1a06c:	cmp	r7, r3
   1a070:	cmpeq	r6, r2
   1a074:	bcc	18e30 <__assert_fail@plt+0x6658>
   1a078:	ldr	r4, [fp, #16]
   1a07c:	tst	r4, #65536	; 0x10000
   1a080:	bne	1a0a0 <__assert_fail@plt+0x78c8>
   1a084:	ldr	r5, [fp, #4]
   1a088:	movw	r1, #9916	; 0x26bc
   1a08c:	movt	r1, #5
   1a090:	mov	r0, r5
   1a094:	bl	1213c <strstr@plt>
   1a098:	cmp	r0, #0
   1a09c:	beq	1a508 <__assert_fail@plt+0x7d30>
   1a0a0:	ldr	r6, [r9, #8]
   1a0a4:	ubfx	r4, r4, #3, #1
   1a0a8:	ldr	r7, [sp, #200]	; 0xc8
   1a0ac:	mov	r3, #120	; 0x78
   1a0b0:	ldr	ip, [r9, #120]	; 0x78
   1a0b4:	mov	r0, r3
   1a0b8:	str	r6, [sp, #124]	; 0x7c
   1a0bc:	ldr	r7, [r7, #20]
   1a0c0:	str	r4, [sp, #184]	; 0xb8
   1a0c4:	ldr	r5, [r9, #124]	; 0x7c
   1a0c8:	ldr	r4, [r6, #4]
   1a0cc:	ldr	r6, [r9, #128]	; 0x80
   1a0d0:	str	r7, [sp, #228]	; 0xe4
   1a0d4:	str	r3, [sp, #268]	; 0x10c
   1a0d8:	str	ip, [sp, #116]	; 0x74
   1a0dc:	str	r4, [sp, #132]	; 0x84
   1a0e0:	str	r5, [sp, #232]	; 0xe8
   1a0e4:	str	r6, [sp, #236]	; 0xec
   1a0e8:	bl	12358 <xmalloc@plt>
   1a0ec:	ldr	r7, [r8, #200]	; 0xc8
   1a0f0:	mov	r3, #0
   1a0f4:	str	r3, [sp, #264]	; 0x108
   1a0f8:	cmp	r7, r3
   1a0fc:	str	r7, [sp, #136]	; 0x88
   1a100:	str	r0, [sp, #260]	; 0x104
   1a104:	bne	18ea8 <__assert_fail@plt+0x66d0>
   1a108:	ldr	ip, [sp, #184]	; 0xb8
   1a10c:	cmp	ip, r3
   1a110:	moveq	r6, #16
   1a114:	streq	r6, [sp, #136]	; 0x88
   1a118:	beq	18ea8 <__assert_fail@plt+0x66d0>
   1a11c:	b	18e98 <__assert_fail@plt+0x66c0>
   1a120:	add	ip, sp, #328	; 0x148
   1a124:	mov	r6, #0
   1a128:	add	r6, ip, r6
   1a12c:	mov	r3, #0
   1a130:	strb	r3, [r6, #-56]	; 0xffffffc8
   1a134:	b	195b4 <__assert_fail@plt+0x6ddc>
   1a138:	ldr	r7, [sp, #132]	; 0x84
   1a13c:	movw	r1, #11728	; 0x2dd0
   1a140:	ldr	ip, [sp, #72]	; 0x48
   1a144:	mov	r0, #1
   1a148:	ldr	r4, [sp, #80]	; 0x50
   1a14c:	movt	r1, #5
   1a150:	ldr	r3, [r7, #112]	; 0x70
   1a154:	add	r3, r3, ip
   1a158:	str	r4, [sp, #204]	; 0xcc
   1a15c:	add	r3, r3, r2
   1a160:	mov	r4, #0
   1a164:	bl	125bc <__printf_chk@plt>
   1a168:	b	19928 <__assert_fail@plt+0x7150>
   1a16c:	cmp	r2, #0
   1a170:	mov	r0, #1
   1a174:	moveq	r2, r1
   1a178:	movw	r1, #9792	; 0x2640
   1a17c:	movt	r1, #5
   1a180:	bl	125bc <__printf_chk@plt>
   1a184:	b	19160 <__assert_fail@plt+0x6988>
   1a188:	andeq	r0, r7, r8, lsl #8
   1a18c:	ldr	r3, [sp, #264]	; 0x108
   1a190:	mov	r9, fp
   1a194:	ldr	r8, [sp, #84]	; 0x54
   1a198:	cmp	r3, #0
   1a19c:	bne	1a34c <__assert_fail@plt+0x7b74>
   1a1a0:	ldr	r6, [sp, #80]	; 0x50
   1a1a4:	cmp	r6, #0
   1a1a8:	blt	19bf4 <__assert_fail@plt+0x741c>
   1a1ac:	mov	r2, #5
   1a1b0:	movw	r1, #11804	; 0x2e1c
   1a1b4:	mov	r0, #0
   1a1b8:	movt	r1, #5
   1a1bc:	bl	12298 <dcgettext@plt>
   1a1c0:	ldr	r1, [sp, #80]	; 0x50
   1a1c4:	bl	485b4 <__assert_fail@plt+0x35ddc>
   1a1c8:	mov	r3, #1
   1a1cc:	str	r3, [r8, #16]
   1a1d0:	b	19bf4 <__assert_fail@plt+0x741c>
   1a1d4:	ldr	r7, [sp, #84]	; 0x54
   1a1d8:	ldr	r5, [r7, #212]	; 0xd4
   1a1dc:	cmp	r5, #0
   1a1e0:	moveq	r7, r5
   1a1e4:	beq	190c0 <__assert_fail@plt+0x68e8>
   1a1e8:	ldr	ip, [sp, #100]	; 0x64
   1a1ec:	ldr	r0, [ip, #216]	; 0xd8
   1a1f0:	add	r0, r0, #4096	; 0x1000
   1a1f4:	add	r0, r0, #1
   1a1f8:	bl	12358 <xmalloc@plt>
   1a1fc:	ldr	r7, [sp, #100]	; 0x64
   1a200:	ldr	r4, [r7, #216]	; 0xd8
   1a204:	cmp	r4, #0
   1a208:	mov	r5, r0
   1a20c:	bne	1a2b0 <__assert_fail@plt+0x7ad8>
   1a210:	ldr	ip, [sp, #84]	; 0x54
   1a214:	add	r4, r5, r4
   1a218:	ldr	r0, [ip, #220]	; 0xdc
   1a21c:	cmp	r0, #0
   1a220:	ble	1a25c <__assert_fail@plt+0x7a84>
   1a224:	ldrb	r3, [r6, #1]
   1a228:	add	r1, r6, #1
   1a22c:	cmp	r3, #0
   1a230:	beq	1a25c <__assert_fail@plt+0x7a84>
   1a234:	mov	r2, #0
   1a238:	b	1a244 <__assert_fail@plt+0x7a6c>
   1a23c:	cmp	r0, r2
   1a240:	ble	1a25c <__assert_fail@plt+0x7a84>
   1a244:	cmp	r3, #47	; 0x2f
   1a248:	addeq	r2, r2, #1
   1a24c:	moveq	r6, r1
   1a250:	ldrb	r3, [r1, #1]!
   1a254:	cmp	r3, #0
   1a258:	bne	1a23c <__assert_fail@plt+0x7a64>
   1a25c:	mov	r2, #4096	; 0x1000
   1a260:	mov	r1, r6
   1a264:	mov	r0, r4
   1a268:	mov	r7, #1
   1a26c:	bl	12598 <strncpy@plt>
   1a270:	mov	r3, #4096	; 0x1000
   1a274:	mov	r2, #0
   1a278:	str	r5, [sp, #244]	; 0xf4
   1a27c:	strb	r2, [r4, r3]
   1a280:	b	190c0 <__assert_fail@plt+0x68e8>
   1a284:	mov	r3, #0
   1a288:	str	r3, [r9, #40]	; 0x28
   1a28c:	str	r3, [r9, #44]	; 0x2c
   1a290:	mvn	r3, #0
   1a294:	str	r3, [r9, #52]	; 0x34
   1a298:	b	18c60 <__assert_fail@plt+0x6488>
   1a29c:	mov	r0, r2
   1a2a0:	b	19420 <__assert_fail@plt+0x6c48>
   1a2a4:	mov	r5, r6
   1a2a8:	mov	r7, r6
   1a2ac:	b	190c0 <__assert_fail@plt+0x68e8>
   1a2b0:	ldr	r1, [r7, #212]	; 0xd4
   1a2b4:	mov	r2, r4
   1a2b8:	bl	1222c <memcpy@plt>
   1a2bc:	b	1a210 <__assert_fail@plt+0x7a38>
   1a2c0:	mov	ip, #0
   1a2c4:	str	ip, [sp, #212]	; 0xd4
   1a2c8:	b	18dec <__assert_fail@plt+0x6614>
   1a2cc:	ldr	lr, [fp, #20]
   1a2d0:	ldrd	r0, [fp, #8]
   1a2d4:	ldr	ip, [sp, #240]	; 0xf0
   1a2d8:	ldrd	r2, [lr, #32]
   1a2dc:	ldrd	r6, [sp, #88]	; 0x58
   1a2e0:	adds	r4, r0, r2
   1a2e4:	adc	r5, r1, r3
   1a2e8:	ldr	r3, [sl]
   1a2ec:	cmp	ip, r3
   1a2f0:	bge	1a004 <__assert_fail@plt+0x782c>
   1a2f4:	ldr	r3, [sl, #4]
   1a2f8:	cmp	r7, r5
   1a2fc:	cmpeq	r6, r4
   1a300:	ldr	r3, [r3, ip, lsl #2]
   1a304:	str	r3, [sp, #212]	; 0xd4
   1a308:	bcc	18dec <__assert_fail@plt+0x6614>
   1a30c:	ldr	r4, [sp, #212]	; 0xd4
   1a310:	cmp	r4, #0
   1a314:	beq	1a010 <__assert_fail@plt+0x7838>
   1a318:	ldr	r5, [sp, #128]	; 0x80
   1a31c:	ldr	r3, [r4, #20]
   1a320:	ldrd	r0, [r4, #8]
   1a324:	ldrd	r4, [r5, #32]
   1a328:	ldrd	r2, [r3, #32]
   1a32c:	strd	r4, [sp, #24]
   1a330:	adds	r4, r0, r2
   1a334:	adc	r5, r1, r3
   1a338:	ldrd	r0, [sp, #24]
   1a33c:	subs	r4, r4, r0
   1a340:	sbc	r5, r5, r1
   1a344:	strd	r4, [sp, #144]	; 0x90
   1a348:	b	18e08 <__assert_fail@plt+0x6630>
   1a34c:	ldr	r0, [sp, #260]	; 0x104
   1a350:	bl	12418 <puts@plt>
   1a354:	b	1a1a0 <__assert_fail@plt+0x79c8>
   1a358:	ldr	r5, [sp, #100]	; 0x64
   1a35c:	mov	lr, ip
   1a360:	ldr	r4, [r5, #4]
   1a364:	add	r4, r4, ip, lsl #2
   1a368:	b	18c50 <__assert_fail@plt+0x6478>
   1a36c:	ldr	ip, [sp, #128]	; 0x80
   1a370:	ldr	r3, [ip, #20]
   1a374:	tst	r3, #4
   1a378:	bne	1a3fc <__assert_fail@plt+0x7c24>
   1a37c:	mov	r0, sl
   1a380:	mov	r4, #0
   1a384:	bl	12358 <xmalloc@plt>
   1a388:	str	r4, [sp]
   1a38c:	str	r4, [sp, #4]
   1a390:	mov	r5, r4
   1a394:	strd	sl, [sp, #8]
   1a398:	ldr	r1, [sp, #128]	; 0x80
   1a39c:	str	r4, [sp, #172]	; 0xac
   1a3a0:	mov	r2, r0
   1a3a4:	str	r0, [sp, #140]	; 0x8c
   1a3a8:	ldr	r0, [sp, #208]	; 0xd0
   1a3ac:	bl	1228c <bfd_get_section_contents@plt>
   1a3b0:	ldr	r7, [sp, #128]	; 0x80
   1a3b4:	str	r4, [sp, #104]	; 0x68
   1a3b8:	ldr	ip, [sp, #200]	; 0xc8
   1a3bc:	ldrd	r2, [r7, #32]
   1a3c0:	str	r4, [sp, #108]	; 0x6c
   1a3c4:	str	r5, [sp, #188]	; 0xbc
   1a3c8:	ldr	r4, [sp, #140]	; 0x8c
   1a3cc:	ldr	r5, [sp, #172]	; 0xac
   1a3d0:	str	r7, [ip, #4]
   1a3d4:	str	r4, [r9, #88]	; 0x58
   1a3d8:	strd	r2, [r9, #96]	; 0x60
   1a3dc:	str	sl, [r9, #104]	; 0x68
   1a3e0:	str	r5, [sp, #152]	; 0x98
   1a3e4:	str	r7, [r9, #36]	; 0x24
   1a3e8:	b	18ad0 <__assert_fail@plt+0x62f8>
   1a3ec:	mov	r4, #0
   1a3f0:	mov	r5, #0
   1a3f4:	strd	r4, [sp, #176]	; 0xb0
   1a3f8:	b	189c0 <__assert_fail@plt+0x61e8>
   1a3fc:	ldr	r3, [r8, #108]	; 0x6c
   1a400:	cmp	r3, #0
   1a404:	bne	1a414 <__assert_fail@plt+0x7c3c>
   1a408:	ldr	r3, [r9, #132]	; 0x84
   1a40c:	cmp	r3, #0
   1a410:	beq	1a37c <__assert_fail@plt+0x7ba4>
   1a414:	ldr	r0, [sp, #208]	; 0xd0
   1a418:	ldr	r1, [sp, #128]	; 0x80
   1a41c:	bl	12748 <bfd_get_reloc_upper_bound@plt>
   1a420:	cmp	r0, #0
   1a424:	blt	1a4b0 <__assert_fail@plt+0x7cd8>
   1a428:	beq	1a37c <__assert_fail@plt+0x7ba4>
   1a42c:	bl	12358 <xmalloc@plt>
   1a430:	ldr	r1, [sp, #128]	; 0x80
   1a434:	ldr	r3, [r8, #36]	; 0x24
   1a438:	str	r0, [sp, #188]	; 0xbc
   1a43c:	ldr	r2, [sp, #188]	; 0xbc
   1a440:	ldr	r0, [sp, #208]	; 0xd0
   1a444:	bl	12700 <bfd_canonicalize_reloc@plt>
   1a448:	subs	ip, r0, #0
   1a44c:	blt	1a4a4 <__assert_fail@plt+0x7ccc>
   1a450:	ldr	r0, [sp, #188]	; 0xbc
   1a454:	mov	r1, ip
   1a458:	movw	r3, #19096	; 0x4a98
   1a45c:	mov	r2, #4
   1a460:	movt	r3, #1
   1a464:	add	ip, r0, ip, lsl #2
   1a468:	mov	r5, #0
   1a46c:	str	ip, [sp, #172]	; 0xac
   1a470:	mov	r4, #0
   1a474:	bl	126f4 <qsort@plt>
   1a478:	strd	r4, [sp, #104]	; 0x68
   1a47c:	ldr	r5, [sp, #188]	; 0xbc
   1a480:	str	r5, [sp, #152]	; 0x98
   1a484:	b	18a18 <__assert_fail@plt+0x6240>
   1a488:	mov	r2, r6
   1a48c:	mov	r0, sl
   1a490:	mov	r1, fp
   1a494:	mov	r3, #0
   1a498:	bl	4f48c <warn@@Base+0x5894>
   1a49c:	strd	r0, [sp, #176]	; 0xb0
   1a4a0:	b	189c0 <__assert_fail@plt+0x61e8>
   1a4a4:	ldr	r7, [sp, #208]	; 0xd0
   1a4a8:	ldr	r0, [r7]
   1a4ac:	bl	48504 <__assert_fail@plt+0x35d2c>
   1a4b0:	ldr	r6, [sp, #208]	; 0xd0
   1a4b4:	ldr	r0, [r6]
   1a4b8:	bl	48504 <__assert_fail@plt+0x35d2c>
   1a4bc:	ldr	r4, [sp, #100]	; 0x64
   1a4c0:	ldr	r2, [r4, #160]	; 0xa0
   1a4c4:	cmp	r0, r2
   1a4c8:	bne	19130 <__assert_fail@plt+0x6958>
   1a4cc:	b	19160 <__assert_fail@plt+0x6988>
   1a4d0:	ldr	r0, [sp, #140]	; 0x8c
   1a4d4:	bl	121f0 <free@plt>
   1a4d8:	ldr	r7, [sp, #188]	; 0xbc
   1a4dc:	cmp	r7, #0
   1a4e0:	beq	18db8 <__assert_fail@plt+0x65e0>
   1a4e4:	ldr	ip, [sp, #224]	; 0xe0
   1a4e8:	ldr	r2, [sp, #324]	; 0x144
   1a4ec:	ldr	r3, [ip]
   1a4f0:	cmp	r2, r3
   1a4f4:	bne	18dd4 <__assert_fail@plt+0x65fc>
   1a4f8:	ldr	r0, [sp, #188]	; 0xbc
   1a4fc:	add	sp, sp, #332	; 0x14c
   1a500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a504:	b	121f0 <free@plt>
   1a508:	mov	r0, r5
   1a50c:	movw	r1, #9932	; 0x26cc
   1a510:	movt	r1, #5
   1a514:	bl	1213c <strstr@plt>
   1a518:	cmp	r0, #0
   1a51c:	bne	1a0a0 <__assert_fail@plt+0x78c8>
   1a520:	b	18e30 <__assert_fail@plt+0x6658>
   1a524:	ldr	r3, [r3, #436]	; 0x1b4
   1a528:	cmp	r3, r2
   1a52c:	beq	18b48 <__assert_fail@plt+0x6370>
   1a530:	ldrb	r1, [r3, #472]	; 0x1d8
   1a534:	lsrs	r1, r1, #7
   1a538:	beq	18b48 <__assert_fail@plt+0x6370>
   1a53c:	ldr	r3, [r3, #392]	; 0x188
   1a540:	mov	r6, #0
   1a544:	mov	r7, #0
   1a548:	strd	r6, [sp, #160]	; 0xa0
   1a54c:	ldrb	r2, [r3, #10]
   1a550:	sub	r3, r2, #1
   1a554:	sub	r2, r2, #33	; 0x21
   1a558:	lsl	r2, r4, r2
   1a55c:	str	r2, [sp, #164]	; 0xa4
   1a560:	ldr	r7, [sp, #164]	; 0xa4
   1a564:	rsb	r2, r3, #32
   1a568:	lsl	r3, r4, r3
   1a56c:	str	r3, [sp, #160]	; 0xa0
   1a570:	orr	r2, r7, r4, lsr r2
   1a574:	str	r2, [sp, #164]	; 0xa4
   1a578:	ldrd	r2, [sp, #160]	; 0xa0
   1a57c:	adds	r2, r2, r2
   1a580:	adc	r3, r3, r3
   1a584:	subs	r6, r2, #1
   1a588:	sbc	r7, r3, #0
   1a58c:	strd	r6, [sp, #216]	; 0xd8
   1a590:	b	18b60 <__assert_fail@plt+0x6388>
   1a594:	movw	r3, #976	; 0x3d0
   1a598:	movt	r3, #7
   1a59c:	ldr	r1, [r3]
   1a5a0:	mov	r0, #10
   1a5a4:	bl	12334 <_IO_putc@plt>
   1a5a8:	b	192e8 <__assert_fail@plt+0x6b10>
   1a5ac:	mov	r7, #1
   1a5b0:	ldr	r3, [r4, #12]
   1a5b4:	cmp	r3, #0
   1a5b8:	beq	192fc <__assert_fail@plt+0x6b24>
   1a5bc:	cmp	r6, r7
   1a5c0:	bcs	19260 <__assert_fail@plt+0x6a88>
   1a5c4:	b	192fc <__assert_fail@plt+0x6b24>
   1a5c8:	ldr	r7, [sp, #84]	; 0x54
   1a5cc:	ldr	r3, [r7, #224]	; 0xe0
   1a5d0:	cmp	r3, #0
   1a5d4:	beq	19314 <__assert_fail@plt+0x6b3c>
   1a5d8:	mov	r0, r6
   1a5dc:	bl	123d0 <lbasename@plt>
   1a5e0:	ldr	ip, [sp, #100]	; 0x64
   1a5e4:	ldr	r3, [ip, #224]	; 0xe0
   1a5e8:	cmp	r3, #0
   1a5ec:	mov	r8, r0
   1a5f0:	ble	19314 <__assert_fail@plt+0x6b3c>
   1a5f4:	ldr	sl, [sp, #84]	; 0x54
   1a5f8:	mov	r7, r4
   1a5fc:	ldr	r0, [sl, #228]	; 0xe4
   1a600:	mov	r2, r8
   1a604:	mov	r3, #0
   1a608:	movw	r1, #37640	; 0x9308
   1a60c:	movt	r1, #5
   1a610:	ldr	r0, [r0, r7, lsl #2]
   1a614:	bl	122ec <concat@plt>
   1a618:	mov	r9, r0
   1a61c:	mov	r0, r6
   1a620:	mov	r1, r9
   1a624:	bl	16224 <__assert_fail@plt+0x3a4c>
   1a628:	cmp	r0, #0
   1a62c:	bne	1a650 <__assert_fail@plt+0x7e78>
   1a630:	mov	r0, r9
   1a634:	add	r7, r7, #1
   1a638:	bl	121f0 <free@plt>
   1a63c:	ldr	r4, [sp, #100]	; 0x64
   1a640:	ldr	r3, [r4, #224]	; 0xe0
   1a644:	cmp	r7, r3
   1a648:	blt	1a5fc <__assert_fail@plt+0x7e24>
   1a64c:	b	19314 <__assert_fail@plt+0x6b3c>
   1a650:	mov	r4, r0
   1a654:	b	19200 <__assert_fail@plt+0x6a28>
   1a658:	push	{r4, r5, r6, lr}
   1a65c:	mov	r5, r1
   1a660:	mov	r6, r2
   1a664:	mov	r4, r0
   1a668:	bl	48f34 <__assert_fail@plt+0x3675c>
   1a66c:	cmp	r0, #1
   1a670:	sbcs	r3, r1, #0
   1a674:	blt	1a6b0 <__assert_fail@plt+0x7ed8>
   1a678:	mov	r1, r5
   1a67c:	mov	r0, r4
   1a680:	bl	12238 <bfd_openr@plt>
   1a684:	subs	r5, r0, #0
   1a688:	beq	1a6a8 <__assert_fail@plt+0x7ed0>
   1a68c:	mov	r1, #0
   1a690:	bl	181e8 <__assert_fail@plt+0x5a10>
   1a694:	cmp	r6, #0
   1a698:	popne	{r4, r5, r6, pc}
   1a69c:	mov	r0, r5
   1a6a0:	pop	{r4, r5, r6, lr}
   1a6a4:	b	126ac <bfd_close@plt>
   1a6a8:	mov	r0, r4
   1a6ac:	bl	48478 <__assert_fail@plt+0x35ca0>
   1a6b0:	movw	r3, #992	; 0x3e0
   1a6b4:	movt	r3, #7
   1a6b8:	mov	r2, #1
   1a6bc:	str	r2, [r3, #16]
   1a6c0:	pop	{r4, r5, r6, pc}
   1a6c4:	cmp	r0, #0
   1a6c8:	push	{r4, r5}
   1a6cc:	beq	1a70c <__assert_fail@plt+0x7f34>
   1a6d0:	ldr	r1, [r0, #36]	; 0x24
   1a6d4:	cmp	r1, #0
   1a6d8:	beq	1a714 <__assert_fail@plt+0x7f3c>
   1a6dc:	ldr	r0, [r1]
   1a6e0:	cmp	r0, #0
   1a6e4:	bne	1a6f8 <__assert_fail@plt+0x7f20>
   1a6e8:	b	1a70c <__assert_fail@plt+0x7f34>
   1a6ec:	ldr	r0, [r1, #4]!
   1a6f0:	cmp	r0, #0
   1a6f4:	beq	1a70c <__assert_fail@plt+0x7f34>
   1a6f8:	ldrd	r4, [r0, #8]
   1a6fc:	cmp	r5, r3
   1a700:	cmpeq	r4, r2
   1a704:	bne	1a6ec <__assert_fail@plt+0x7f14>
   1a708:	mov	r0, #1
   1a70c:	pop	{r4, r5}
   1a710:	bx	lr
   1a714:	mov	r0, r1
   1a718:	b	1a70c <__assert_fail@plt+0x7f34>
   1a71c:	push	{r4, lr}
   1a720:	movw	r4, #62864	; 0xf590
   1a724:	movt	r4, #6
   1a728:	add	r4, r4, r0, lsl #6
   1a72c:	ldr	r0, [r4, #12]
   1a730:	cmp	r0, #0
   1a734:	popeq	{r4, pc}
   1a738:	ldr	r3, [r4, #44]	; 0x2c
   1a73c:	cmp	r3, #0
   1a740:	beq	1a750 <__assert_fail@plt+0x7f78>
   1a744:	ldr	r2, [r3, #140]	; 0x8c
   1a748:	cmp	r0, r2
   1a74c:	beq	1a770 <__assert_fail@plt+0x7f98>
   1a750:	bl	121f0 <free@plt>
   1a754:	mov	r2, #0
   1a758:	mov	r3, #0
   1a75c:	mov	r1, #0
   1a760:	strd	r2, [r4, #16]
   1a764:	str	r1, [r4, #12]
   1a768:	strd	r2, [r4, #24]
   1a76c:	pop	{r4, pc}
   1a770:	ldr	ip, [r3, #20]
   1a774:	mov	r1, #0
   1a778:	ldrb	r2, [r3, #24]
   1a77c:	bic	ip, ip, #16384	; 0x4000
   1a780:	str	r1, [r3, #140]	; 0x8c
   1a784:	bfi	r2, r1, #4, #2
   1a788:	str	ip, [r3, #20]
   1a78c:	strb	r2, [r3, #24]
   1a790:	b	1a750 <__assert_fail@plt+0x7f78>
   1a794:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a798:	movw	r3, #62864	; 0xf590
   1a79c:	movt	r3, #6
   1a7a0:	mov	sl, r0
   1a7a4:	add	r8, r3, r0, lsl #6
   1a7a8:	mov	fp, r2
   1a7ac:	mov	r5, r1
   1a7b0:	ldr	r9, [r8, #12]
   1a7b4:	cmp	r9, #0
   1a7b8:	beq	1a7c4 <__assert_fail@plt+0x7fec>
   1a7bc:	mov	r0, #1
   1a7c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7c4:	ldrd	r6, [r1, #32]
   1a7c8:	mov	r0, r2
   1a7cc:	ldrd	r2, [r1, #48]	; 0x30
   1a7d0:	str	r9, [r8, #36]	; 0x24
   1a7d4:	str	r9, [r8, #40]	; 0x28
   1a7d8:	strd	r2, [r8, #24]
   1a7dc:	add	r2, r8, #12
   1a7e0:	strd	r6, [r8, #16]
   1a7e4:	str	r9, [r8, #12]
   1a7e8:	str	r1, [r8, #44]	; 0x2c
   1a7ec:	bl	123c4 <bfd_get_full_section_contents@plt>
   1a7f0:	subs	r4, r0, #0
   1a7f4:	beq	1a888 <__assert_fail@plt+0x80b0>
   1a7f8:	movw	r4, #992	; 0x3e0
   1a7fc:	movt	r4, #7
   1a800:	ldr	r3, [r4, #44]	; 0x2c
   1a804:	cmp	r3, #0
   1a808:	beq	1a7bc <__assert_fail@plt+0x7fe4>
   1a80c:	ldr	r3, [r8, #56]	; 0x38
   1a810:	cmp	r3, #0
   1a814:	beq	1a7bc <__assert_fail@plt+0x7fe4>
   1a818:	mov	r0, r5
   1a81c:	ldr	r1, [r8, #12]
   1a820:	bl	12520 <bfd_cache_section_contents@plt>
   1a824:	ldr	r3, [r4, #36]	; 0x24
   1a828:	mov	r0, fp
   1a82c:	mov	r1, r5
   1a830:	ldr	r2, [r8, #12]
   1a834:	bl	12688 <bfd_simple_get_relocated_section_contents@plt>
   1a838:	subs	r4, r0, #0
   1a83c:	beq	1a888 <__assert_fail@plt+0x80b0>
   1a840:	mov	r0, fp
   1a844:	mov	r1, r5
   1a848:	bl	12748 <bfd_get_reloc_upper_bound@plt>
   1a84c:	cmp	r0, #0
   1a850:	ble	1a7bc <__assert_fail@plt+0x7fe4>
   1a854:	bl	12358 <xmalloc@plt>
   1a858:	mov	r3, r9
   1a85c:	mov	r1, r5
   1a860:	mov	r4, r0
   1a864:	mov	r0, fp
   1a868:	mov	r2, r4
   1a86c:	bl	12700 <bfd_canonicalize_reloc@plt>
   1a870:	subs	r3, r0, #0
   1a874:	beq	1a8bc <__assert_fail@plt+0x80e4>
   1a878:	mov	r0, #1
   1a87c:	str	r4, [r8, #36]	; 0x24
   1a880:	str	r3, [r8, #40]	; 0x28
   1a884:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a888:	mov	r0, sl
   1a88c:	bl	1a71c <__assert_fail@plt+0x7f44>
   1a890:	mov	r0, r4
   1a894:	mov	r2, #5
   1a898:	movw	r1, #11876	; 0x2e64
   1a89c:	movt	r1, #5
   1a8a0:	bl	12298 <dcgettext@plt>
   1a8a4:	ldr	r2, [r8, #8]
   1a8a8:	mov	r1, r0
   1a8ac:	mov	r0, #1
   1a8b0:	bl	125bc <__printf_chk@plt>
   1a8b4:	mov	r0, r4
   1a8b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8bc:	mov	r0, r4
   1a8c0:	bl	121f0 <free@plt>
   1a8c4:	b	1a7bc <__assert_fail@plt+0x7fe4>
   1a8c8:	push	{r3, r4, r5, r6, r7, lr}
   1a8cc:	movw	r4, #62864	; 0xf590
   1a8d0:	movt	r4, #6
   1a8d4:	mov	r5, r0
   1a8d8:	add	r6, r4, r0, lsl #6
   1a8dc:	mov	r7, r1
   1a8e0:	ldr	r3, [r6, #12]
   1a8e4:	cmp	r3, #0
   1a8e8:	beq	1a8f4 <__assert_fail@plt+0x811c>
   1a8ec:	mov	r0, #1
   1a8f0:	pop	{r3, r4, r5, r6, r7, pc}
   1a8f4:	mov	r0, r1
   1a8f8:	ldr	r1, [r4, r5, lsl #6]
   1a8fc:	bl	123a0 <bfd_get_section_by_name@plt>
   1a900:	subs	r1, r0, #0
   1a904:	beq	1a920 <__assert_fail@plt+0x8148>
   1a908:	ldr	r3, [r4, r5, lsl #6]
   1a90c:	str	r3, [r6, #8]
   1a910:	mov	r0, r5
   1a914:	mov	r2, r7
   1a918:	pop	{r3, r4, r5, r6, r7, lr}
   1a91c:	b	1a794 <__assert_fail@plt+0x7fbc>
   1a920:	ldr	r1, [r6, #4]
   1a924:	mov	r0, r7
   1a928:	bl	123a0 <bfd_get_section_by_name@plt>
   1a92c:	subs	r1, r0, #0
   1a930:	ldrne	r3, [r6, #4]
   1a934:	strne	r3, [r6, #8]
   1a938:	bne	1a910 <__assert_fail@plt+0x8138>
   1a93c:	mov	r0, r1
   1a940:	pop	{r3, r4, r5, r6, r7, pc}
   1a944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a948:	mov	r2, #17
   1a94c:	ldr	r6, [r1]
   1a950:	mov	r7, r1
   1a954:	mov	r8, r0
   1a958:	movw	r1, #11928	; 0x2e98
   1a95c:	movt	r1, #5
   1a960:	mov	r5, #0
   1a964:	mov	r0, r6
   1a968:	ldr	r4, [pc, #220]	; 1aa4c <__assert_fail@plt+0x8274>
   1a96c:	bl	12784 <strncmp@plt>
   1a970:	movw	r3, #11916	; 0x2e8c
   1a974:	movt	r3, #5
   1a978:	cmp	r0, r5
   1a97c:	moveq	r6, r3
   1a980:	b	1a994 <__assert_fail@plt+0x81bc>
   1a984:	add	r5, r5, #1
   1a988:	add	r4, r4, #64	; 0x40
   1a98c:	cmp	r5, #36	; 0x24
   1a990:	beq	1aa48 <__assert_fail@plt+0x8270>
   1a994:	mov	r1, r6
   1a998:	ldr	r0, [r4, #-52]	; 0xffffffcc
   1a99c:	bl	12178 <strcmp@plt>
   1a9a0:	mov	r1, r6
   1a9a4:	cmp	r0, #0
   1a9a8:	beq	1a9bc <__assert_fail@plt+0x81e4>
   1a9ac:	ldr	r0, [r4, #-48]	; 0xffffffd0
   1a9b0:	bl	12178 <strcmp@plt>
   1a9b4:	cmp	r0, #0
   1a9b8:	bne	1a984 <__assert_fail@plt+0x81ac>
   1a9bc:	ldr	r3, [r4]
   1a9c0:	cmp	r3, #0
   1a9c4:	beq	1a984 <__assert_fail@plt+0x81ac>
   1a9c8:	ldr	r3, [r3]
   1a9cc:	cmp	r3, #0
   1a9d0:	beq	1a984 <__assert_fail@plt+0x81ac>
   1a9d4:	movw	r4, #62864	; 0xf590
   1a9d8:	movt	r4, #6
   1a9dc:	mov	r1, r6
   1a9e0:	lsl	sl, r5, #6
   1a9e4:	ldr	r9, [r4, r5, lsl #6]
   1a9e8:	add	r6, r4, sl
   1a9ec:	mov	r0, r9
   1a9f0:	bl	12178 <strcmp@plt>
   1a9f4:	mov	r1, r7
   1a9f8:	mov	r2, r8
   1a9fc:	cmp	r0, #0
   1aa00:	mov	r0, r5
   1aa04:	streq	r9, [r6, #8]
   1aa08:	ldrne	r3, [r6, #4]
   1aa0c:	strne	r3, [r6, #8]
   1aa10:	bl	1a794 <__assert_fail@plt+0x7fbc>
   1aa14:	cmp	r0, #0
   1aa18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa1c:	add	r4, r4, sl
   1aa20:	mov	r0, r6
   1aa24:	mov	r1, r8
   1aa28:	ldr	r3, [r4, #48]	; 0x30
   1aa2c:	blx	r3
   1aa30:	cmp	r5, #0
   1aa34:	cmpne	r5, #3
   1aa38:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa3c:	mov	r0, r5
   1aa40:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aa44:	b	1a71c <__assert_fail@plt+0x7f44>
   1aa48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa4c:	andeq	pc, r6, r4, asr #11
   1aa50:	ldr	r2, [r0]
   1aa54:	movw	r3, #1240	; 0x4d8
   1aa58:	ldr	r0, [r1]
   1aa5c:	movt	r3, #7
   1aa60:	push	{r4, r5}
   1aa64:	lsl	r2, r2, #3
   1aa68:	ldr	r1, [r3]
   1aa6c:	lsl	r0, r0, #3
   1aa70:	ldrd	r2, [r2, r1]
   1aa74:	ldrd	r4, [r1, r0]
   1aa78:	cmp	r3, r5
   1aa7c:	cmpeq	r2, r4
   1aa80:	movls	r0, #0
   1aa84:	movhi	r0, #1
   1aa88:	cmp	r5, r3
   1aa8c:	cmpeq	r4, r2
   1aa90:	subhi	r0, r0, #1
   1aa94:	pop	{r4, r5}
   1aa98:	bx	lr
   1aa9c:	ldr	r3, [r0, #32]
   1aaa0:	ldr	r0, [r1, #32]
   1aaa4:	rsb	r0, r0, r3
   1aaa8:	bx	lr
   1aaac:	ldr	r3, [r0]
   1aab0:	ldr	r2, [r1]
   1aab4:	cmp	r2, r3
   1aab8:	movls	r0, #0
   1aabc:	movhi	r0, #1
   1aac0:	cmp	r3, r2
   1aac4:	rsbls	r0, r0, #0
   1aac8:	rsbhi	r0, r0, #1
   1aacc:	bx	lr
   1aad0:	push	{r4, lr}
   1aad4:	mov	r2, #5
   1aad8:	mov	r4, r0
   1aadc:	movw	r1, #15356	; 0x3bfc
   1aae0:	mov	r0, #0
   1aae4:	movt	r1, #5
   1aae8:	bl	12298 <dcgettext@plt>
   1aaec:	ldr	r2, [r4, #8]
   1aaf0:	mov	r1, r0
   1aaf4:	mov	r0, #1
   1aaf8:	bl	125bc <__printf_chk@plt>
   1aafc:	mov	r0, #1
   1ab00:	pop	{r4, pc}
   1ab04:	push	{r3, r4, r5, r6, r7, lr}
   1ab08:	movw	r7, #1240	; 0x4d8
   1ab0c:	movt	r7, #7
   1ab10:	ldr	r5, [r7, #4]
   1ab14:	cmp	r5, #0
   1ab18:	beq	1ab54 <__assert_fail@plt+0x837c>
   1ab1c:	ldr	r0, [r5, #12]
   1ab20:	ldr	r6, [r5, #20]
   1ab24:	cmp	r0, #0
   1ab28:	beq	1ab40 <__assert_fail@plt+0x8368>
   1ab2c:	ldr	r4, [r0, #8]
   1ab30:	bl	121f0 <free@plt>
   1ab34:	cmp	r4, #0
   1ab38:	mov	r0, r4
   1ab3c:	bne	1ab2c <__assert_fail@plt+0x8354>
   1ab40:	mov	r0, r5
   1ab44:	bl	121f0 <free@plt>
   1ab48:	cmp	r6, #0
   1ab4c:	movne	r5, r6
   1ab50:	bne	1ab1c <__assert_fail@plt+0x8344>
   1ab54:	mov	r3, #0
   1ab58:	str	r3, [r7, #4]
   1ab5c:	str	r3, [r7, #8]
   1ab60:	pop	{r3, r4, r5, r6, r7, pc}
   1ab64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab68:	mov	r6, r0
   1ab6c:	ldr	r9, [r0, #24]
   1ab70:	ldr	r8, [r0, #12]
   1ab74:	cmp	r9, #0
   1ab78:	ldrd	r4, [r0, #16]
   1ab7c:	beq	1ac98 <__assert_fail@plt+0x84c0>
   1ab80:	mov	r2, #5
   1ab84:	movw	r1, #15452	; 0x3c5c
   1ab88:	mov	r0, #0
   1ab8c:	movt	r1, #5
   1ab90:	bl	12298 <dcgettext@plt>
   1ab94:	ldr	r2, [r6, #8]
   1ab98:	movw	sl, #976	; 0x3d0
   1ab9c:	movt	sl, #7
   1aba0:	mov	r1, r0
   1aba4:	mov	r0, #1
   1aba8:	bl	125bc <__printf_chk@plt>
   1abac:	movw	r1, #15484	; 0x3c7c
   1abb0:	mov	r0, #1
   1abb4:	movt	r1, #5
   1abb8:	mov	r2, r4
   1abbc:	bl	125bc <__printf_chk@plt>
   1abc0:	cmp	r9, #16
   1abc4:	movcc	r7, r9
   1abc8:	movcs	r7, #16
   1abcc:	mov	r6, #0
   1abd0:	b	1abfc <__assert_fail@plt+0x8424>
   1abd4:	ldrb	r2, [r8, r6]
   1abd8:	movw	r1, #15496	; 0x3c88
   1abdc:	movt	r1, #5
   1abe0:	bl	125bc <__printf_chk@plt>
   1abe4:	and	r3, r6, #3
   1abe8:	cmp	r3, #3
   1abec:	add	r6, r6, #1
   1abf0:	beq	1ac24 <__assert_fail@plt+0x844c>
   1abf4:	cmp	r6, #16
   1abf8:	beq	1ac34 <__assert_fail@plt+0x845c>
   1abfc:	cmp	r7, r6
   1ac00:	movw	r1, #16880	; 0x41f0
   1ac04:	mov	r0, #1
   1ac08:	movt	r1, #5
   1ac0c:	bgt	1abd4 <__assert_fail@plt+0x83fc>
   1ac10:	bl	125bc <__printf_chk@plt>
   1ac14:	and	r3, r6, #3
   1ac18:	cmp	r3, #3
   1ac1c:	add	r6, r6, #1
   1ac20:	bne	1abf4 <__assert_fail@plt+0x841c>
   1ac24:	mov	r0, #32
   1ac28:	bl	1258c <putchar@plt>
   1ac2c:	cmp	r6, #16
   1ac30:	bne	1abfc <__assert_fail@plt+0x8424>
   1ac34:	mov	r6, #0
   1ac38:	ldrb	r3, [r8, r6]
   1ac3c:	mov	r0, #46	; 0x2e
   1ac40:	add	r6, r6, #1
   1ac44:	sub	r2, r3, #32
   1ac48:	cmp	r2, #95	; 0x5f
   1ac4c:	movls	r0, r3
   1ac50:	bl	1258c <putchar@plt>
   1ac54:	cmp	r7, r6
   1ac58:	bgt	1ac38 <__assert_fail@plt+0x8460>
   1ac5c:	adds	r4, r4, r7
   1ac60:	mov	r0, #10
   1ac64:	ldr	r1, [sl]
   1ac68:	adc	r5, r5, r7, asr #31
   1ac6c:	bl	12334 <_IO_putc@plt>
   1ac70:	subs	r9, r9, r7
   1ac74:	movw	r3, #976	; 0x3d0
   1ac78:	add	r8, r8, r7
   1ac7c:	movt	r3, #7
   1ac80:	bne	1abac <__assert_fail@plt+0x83d4>
   1ac84:	ldr	r1, [r3]
   1ac88:	mov	r0, #10
   1ac8c:	bl	12334 <_IO_putc@plt>
   1ac90:	mov	r0, #1
   1ac94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac98:	mov	r0, r9
   1ac9c:	mov	r2, #5
   1aca0:	movw	r1, #15424	; 0x3c40
   1aca4:	movt	r1, #5
   1aca8:	bl	12298 <dcgettext@plt>
   1acac:	ldr	r2, [r6, #8]
   1acb0:	mov	r1, r0
   1acb4:	mov	r0, #1
   1acb8:	bl	125bc <__printf_chk@plt>
   1acbc:	mov	r0, r9
   1acc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1acc4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1acc8:	sub	sp, sp, #60	; 0x3c
   1accc:	movw	r1, #1240	; 0x4d8
   1acd0:	movw	r6, #65176	; 0xfe98
   1acd4:	movt	r1, #7
   1acd8:	movt	r6, #6
   1acdc:	ldr	r8, [sp, #88]	; 0x58
   1ace0:	add	r7, r1, #16
   1ace4:	ldr	ip, [r1, #12]
   1ace8:	mov	r4, r2
   1acec:	ldr	lr, [r6]
   1acf0:	cmp	r8, #0
   1acf4:	add	r9, ip, #1
   1acf8:	mov	r5, r3
   1acfc:	and	r9, r9, #15
   1ad00:	add	r7, r7, ip, lsl #6
   1ad04:	str	r9, [r1, #12]
   1ad08:	str	lr, [sp, #52]	; 0x34
   1ad0c:	beq	1ad64 <__assert_fail@plt+0x858c>
   1ad10:	mov	r1, #64	; 0x40
   1ad14:	strd	r4, [sp, #8]
   1ad18:	movw	r2, #15504	; 0x3c90
   1ad1c:	mov	r3, r1
   1ad20:	movt	r2, #5
   1ad24:	mov	r0, r7
   1ad28:	str	r2, [sp]
   1ad2c:	mov	r2, #1
   1ad30:	bl	127cc <__snprintf_chk@plt>
   1ad34:	cmp	r8, #8
   1ad38:	movcc	r0, r8
   1ad3c:	movcs	r0, #8
   1ad40:	lsl	r0, r0, #1
   1ad44:	rsb	r0, r0, #16
   1ad48:	add	r0, r7, r0
   1ad4c:	ldr	r2, [sp, #52]	; 0x34
   1ad50:	ldr	r3, [r6]
   1ad54:	cmp	r2, r3
   1ad58:	bne	1adb4 <__assert_fail@plt+0x85dc>
   1ad5c:	add	sp, sp, #60	; 0x3c
   1ad60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ad64:	add	r8, sp, #20
   1ad68:	str	r0, [sp, #4]
   1ad6c:	mov	r1, #1
   1ad70:	movw	r2, #38704	; 0x9730
   1ad74:	movw	r3, #15516	; 0x3c9c
   1ad78:	movt	r2, #5
   1ad7c:	movt	r3, #5
   1ad80:	str	r2, [sp]
   1ad84:	mov	r0, r8
   1ad88:	mov	r2, #32
   1ad8c:	bl	12568 <__sprintf_chk@plt>
   1ad90:	mov	r1, #64	; 0x40
   1ad94:	str	r8, [sp]
   1ad98:	mov	r3, r1
   1ad9c:	strd	r4, [sp, #8]
   1ada0:	mov	r0, r7
   1ada4:	mov	r2, #1
   1ada8:	bl	127cc <__snprintf_chk@plt>
   1adac:	mov	r0, r7
   1adb0:	b	1ad4c <__assert_fail@plt+0x8574>
   1adb4:	bl	122b0 <__stack_chk_fail@plt>
   1adb8:	push	{r4, r5, lr}
   1adbc:	sub	sp, sp, #12
   1adc0:	mov	r4, r0
   1adc4:	mov	r3, r1
   1adc8:	str	r2, [sp]
   1adcc:	mov	r0, #0
   1add0:	mov	r2, r4
   1add4:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1add8:	movw	r1, #18832	; 0x4990
   1addc:	movt	r1, #5
   1ade0:	mov	r2, r0
   1ade4:	mov	r0, #1
   1ade8:	add	sp, sp, #12
   1adec:	pop	{r4, r5, lr}
   1adf0:	b	125bc <__printf_chk@plt>
   1adf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adf8:	mov	r2, #5
   1adfc:	mov	r8, r0
   1ae00:	sub	sp, sp, #68	; 0x44
   1ae04:	movw	r1, #15524	; 0x3ca4
   1ae08:	mov	r0, #0
   1ae0c:	movt	r1, #5
   1ae10:	ldr	r9, [r8, #12]
   1ae14:	bl	12298 <dcgettext@plt>
   1ae18:	ldr	r2, [r8, #8]
   1ae1c:	mov	r1, r0
   1ae20:	mov	r0, #1
   1ae24:	bl	125bc <__printf_chk@plt>
   1ae28:	ldrd	r2, [r8, #24]
   1ae2c:	cmp	r3, #0
   1ae30:	cmpeq	r2, #23
   1ae34:	bls	1b434 <__assert_fail@plt+0x8c5c>
   1ae38:	mov	r0, r9
   1ae3c:	mov	r1, #4
   1ae40:	bl	49df4 <warn@@Base+0x1fc>
   1ae44:	mov	r2, #5
   1ae48:	movw	r1, #15596	; 0x3cec
   1ae4c:	movt	r1, #5
   1ae50:	mov	r4, r0
   1ae54:	mov	r0, #0
   1ae58:	bl	12298 <dcgettext@plt>
   1ae5c:	mov	r2, r4
   1ae60:	mov	r1, r0
   1ae64:	mov	r0, #1
   1ae68:	bl	125bc <__printf_chk@plt>
   1ae6c:	sub	r3, r4, #3
   1ae70:	cmp	r3, #5
   1ae74:	bhi	1b444 <__assert_fail@plt+0x8c6c>
   1ae78:	cmp	r4, #3
   1ae7c:	beq	1b46c <__assert_fail@plt+0x8c94>
   1ae80:	cmp	r4, #4
   1ae84:	beq	1b484 <__assert_fail@plt+0x8cac>
   1ae88:	cmp	r4, #5
   1ae8c:	beq	1b49c <__assert_fail@plt+0x8cc4>
   1ae90:	cmp	r4, #6
   1ae94:	beq	1b4b4 <__assert_fail@plt+0x8cdc>
   1ae98:	add	r0, r9, #4
   1ae9c:	mov	r1, #4
   1aea0:	bl	49df4 <warn@@Base+0x1fc>
   1aea4:	mvn	r4, #0
   1aea8:	mov	r5, #0
   1aeac:	mov	sl, r0
   1aeb0:	mov	fp, r1
   1aeb4:	add	r0, r9, #8
   1aeb8:	mov	r1, #4
   1aebc:	bl	49df4 <warn@@Base+0x1fc>
   1aec0:	and	r6, sl, r4
   1aec4:	and	r7, fp, r5
   1aec8:	strd	r0, [sp, #8]
   1aecc:	add	r0, r9, #12
   1aed0:	mov	r1, #4
   1aed4:	bl	49df4 <warn@@Base+0x1fc>
   1aed8:	strd	r0, [sp, #16]
   1aedc:	add	r0, r9, #16
   1aee0:	mov	r1, #4
   1aee4:	bl	49df4 <warn@@Base+0x1fc>
   1aee8:	strd	r0, [sp, #24]
   1aeec:	add	r0, r9, #20
   1aef0:	mov	r1, #4
   1aef4:	bl	49df4 <warn@@Base+0x1fc>
   1aef8:	ldrd	r2, [r8, #24]
   1aefc:	cmp	r7, r3
   1af00:	cmpeq	r6, r2
   1af04:	strd	r0, [sp, #32]
   1af08:	bhi	1b40c <__assert_fail@plt+0x8c34>
   1af0c:	ldrd	r0, [sp, #8]
   1af10:	and	r0, r0, r4
   1af14:	and	r1, r1, r5
   1af18:	cmp	r3, r1
   1af1c:	cmpeq	r2, r0
   1af20:	bcc	1b40c <__assert_fail@plt+0x8c34>
   1af24:	ldrd	r0, [sp, #16]
   1af28:	and	r0, r0, r4
   1af2c:	and	r1, r1, r5
   1af30:	cmp	r3, r1
   1af34:	cmpeq	r2, r0
   1af38:	bcc	1b40c <__assert_fail@plt+0x8c34>
   1af3c:	ldrd	r0, [sp, #24]
   1af40:	and	r0, r0, r4
   1af44:	and	r1, r1, r5
   1af48:	cmp	r3, r1
   1af4c:	cmpeq	r2, r0
   1af50:	bcc	1b40c <__assert_fail@plt+0x8c34>
   1af54:	ldrd	r0, [sp, #32]
   1af58:	and	r4, r4, r0
   1af5c:	and	r5, r5, r1
   1af60:	cmp	r3, r5
   1af64:	cmpeq	r2, r4
   1af68:	bcc	1b40c <__assert_fail@plt+0x8c34>
   1af6c:	ldr	r1, [sp, #8]
   1af70:	cmp	sl, r1
   1af74:	bhi	1b4d0 <__assert_fail@plt+0x8cf8>
   1af78:	ldr	r0, [sp, #8]
   1af7c:	ldr	r1, [sp, #16]
   1af80:	cmp	r0, r1
   1af84:	bhi	1b6a8 <__assert_fail@plt+0x8ed0>
   1af88:	ldr	r0, [sp, #16]
   1af8c:	ldr	r1, [sp, #24]
   1af90:	cmp	r0, r1
   1af94:	bhi	1b6f0 <__assert_fail@plt+0x8f18>
   1af98:	ldr	r1, [sp, #32]
   1af9c:	ldr	r0, [sp, #24]
   1afa0:	str	r1, [sp, #56]	; 0x38
   1afa4:	cmp	r0, r1
   1afa8:	ldr	r1, [sp, #24]
   1afac:	ldr	r0, [sp, #16]
   1afb0:	rsb	r1, r0, r1
   1afb4:	str	r1, [sp, #44]	; 0x2c
   1afb8:	bhi	1b718 <__assert_fail@plt+0x8f40>
   1afbc:	ldr	r1, [sp, #44]	; 0x2c
   1afc0:	ldr	r0, [sp, #16]
   1afc4:	rsb	r3, r1, r1, lsl #3
   1afc8:	ldr	r1, [r8, #12]
   1afcc:	add	r0, r9, r0
   1afd0:	str	r0, [sp, #48]	; 0x30
   1afd4:	add	r3, r0, r3, lsl #1
   1afd8:	add	r2, r1, r2
   1afdc:	cmp	r3, r2
   1afe0:	bhi	1b6d0 <__assert_fail@plt+0x8ef8>
   1afe4:	ldr	r1, [sp, #8]
   1afe8:	mov	r2, #5
   1afec:	mov	r0, #0
   1aff0:	rsb	r3, sl, r1
   1aff4:	movw	r1, #16164	; 0x3f24
   1aff8:	movt	r1, #5
   1affc:	lsr	r3, r3, #3
   1b000:	str	r3, [sp, #52]	; 0x34
   1b004:	bl	12298 <dcgettext@plt>
   1b008:	mov	r1, r0
   1b00c:	mov	r0, #1
   1b010:	bl	125bc <__printf_chk@plt>
   1b014:	ldr	r2, [sp, #52]	; 0x34
   1b018:	cmp	r2, #0
   1b01c:	beq	1b090 <__assert_fail@plt+0x88b8>
   1b020:	ldr	r7, [sp, #52]	; 0x34
   1b024:	add	sl, r9, sl
   1b028:	mov	r4, #0
   1b02c:	mov	r0, sl
   1b030:	mov	r1, #8
   1b034:	bl	49df4 <warn@@Base+0x1fc>
   1b038:	mov	r1, #8
   1b03c:	mov	r5, r0
   1b040:	add	r0, sl, r1
   1b044:	bl	49df4 <warn@@Base+0x1fc>
   1b048:	mov	r2, #5
   1b04c:	movw	r1, #16188	; 0x3f3c
   1b050:	movt	r1, #5
   1b054:	add	sl, sl, #16
   1b058:	mov	r6, r0
   1b05c:	mov	r0, #0
   1b060:	bl	12298 <dcgettext@plt>
   1b064:	add	r6, r5, r6
   1b068:	mov	r3, r5
   1b06c:	sub	r6, r6, #1
   1b070:	str	r6, [sp]
   1b074:	mov	r1, r0
   1b078:	mov	r0, #1
   1b07c:	lsr	r2, r4, r0
   1b080:	add	r4, r4, #2
   1b084:	bl	125bc <__printf_chk@plt>
   1b088:	cmp	r7, r4
   1b08c:	bhi	1b02c <__assert_fail@plt+0x8854>
   1b090:	ldr	r3, [sp, #16]
   1b094:	mov	r2, #5
   1b098:	ldr	r0, [sp, #8]
   1b09c:	movw	r1, #16176	; 0x3f30
   1b0a0:	movt	r1, #5
   1b0a4:	rsb	r7, r0, r3
   1b0a8:	mov	r0, #0
   1b0ac:	bl	12298 <dcgettext@plt>
   1b0b0:	lsr	r7, r7, #3
   1b0b4:	mov	r1, r0
   1b0b8:	mov	r0, #1
   1b0bc:	bl	125bc <__printf_chk@plt>
   1b0c0:	cmp	r7, #0
   1b0c4:	beq	1b17c <__assert_fail@plt+0x89a4>
   1b0c8:	ldr	r2, [sp, #8]
   1b0cc:	movw	ip, #43691	; 0xaaab
   1b0d0:	movt	ip, #43690	; 0xaaaa
   1b0d4:	mov	sl, #0
   1b0d8:	add	r6, r9, r2
   1b0dc:	str	r9, [sp, #8]
   1b0e0:	mov	fp, ip
   1b0e4:	str	r8, [sp, #16]
   1b0e8:	mov	r0, r6
   1b0ec:	mov	r1, #8
   1b0f0:	bl	49df4 <warn@@Base+0x1fc>
   1b0f4:	mov	r1, #8
   1b0f8:	mov	r8, r0
   1b0fc:	add	r0, r6, r1
   1b100:	bl	49df4 <warn@@Base+0x1fc>
   1b104:	mov	r1, #8
   1b108:	mov	r9, r0
   1b10c:	add	r0, r6, #16
   1b110:	bl	49df4 <warn@@Base+0x1fc>
   1b114:	mov	r2, #5
   1b118:	add	r6, r6, #24
   1b11c:	mov	r4, r0
   1b120:	mov	r5, r1
   1b124:	mov	r0, #0
   1b128:	movw	r1, #16232	; 0x3f68
   1b12c:	movt	r1, #5
   1b130:	bl	12298 <dcgettext@plt>
   1b134:	umull	r3, r2, fp, sl
   1b138:	str	r9, [sp]
   1b13c:	mov	r3, r8
   1b140:	add	sl, sl, #3
   1b144:	mov	r1, r0
   1b148:	mov	r0, #1
   1b14c:	lsr	r2, r2, r0
   1b150:	bl	125bc <__printf_chk@plt>
   1b154:	mov	r0, r4
   1b158:	mov	r1, r5
   1b15c:	mov	r2, #8
   1b160:	bl	1adb8 <__assert_fail@plt+0x85e0>
   1b164:	mov	r0, #10
   1b168:	bl	1258c <putchar@plt>
   1b16c:	cmp	r7, sl
   1b170:	bhi	1b0e8 <__assert_fail@plt+0x8910>
   1b174:	ldr	r9, [sp, #8]
   1b178:	ldr	r8, [sp, #16]
   1b17c:	mov	r2, #5
   1b180:	movw	r1, #16212	; 0x3f54
   1b184:	mov	r0, #0
   1b188:	movt	r1, #5
   1b18c:	bl	12298 <dcgettext@plt>
   1b190:	mov	r1, r0
   1b194:	mov	r0, #1
   1b198:	bl	125bc <__printf_chk@plt>
   1b19c:	ldr	r1, [sp, #44]	; 0x2c
   1b1a0:	cmp	r1, #0
   1b1a4:	beq	1b27c <__assert_fail@plt+0x8aa4>
   1b1a8:	ldr	r0, [sp, #48]	; 0x30
   1b1ac:	mov	sl, #0
   1b1b0:	ldr	r3, [sp, #44]	; 0x2c
   1b1b4:	add	ip, r0, #8
   1b1b8:	str	r9, [sp, #16]
   1b1bc:	sub	r3, r3, #20
   1b1c0:	str	r3, [sp, #8]
   1b1c4:	add	r3, r0, #16
   1b1c8:	str	r8, [sp, #60]	; 0x3c
   1b1cc:	mov	r9, ip
   1b1d0:	mov	fp, r3
   1b1d4:	b	1b1e4 <__assert_fail@plt+0x8a0c>
   1b1d8:	ldr	r3, [sp, #8]
   1b1dc:	cmp	sl, r3
   1b1e0:	bhi	1b274 <__assert_fail@plt+0x8a9c>
   1b1e4:	ldr	r1, [sp, #48]	; 0x30
   1b1e8:	add	r0, r1, sl
   1b1ec:	mov	r1, #8
   1b1f0:	bl	49df4 <warn@@Base+0x1fc>
   1b1f4:	mov	r6, r0
   1b1f8:	mov	r7, r1
   1b1fc:	add	r0, r9, sl
   1b200:	mov	r1, #8
   1b204:	bl	49df4 <warn@@Base+0x1fc>
   1b208:	mov	r4, r0
   1b20c:	mov	r5, r1
   1b210:	add	r0, fp, sl
   1b214:	mov	r1, #4
   1b218:	bl	49df4 <warn@@Base+0x1fc>
   1b21c:	mov	r1, r7
   1b220:	mov	r2, #8
   1b224:	add	sl, sl, #20
   1b228:	mov	r8, r0
   1b22c:	mov	r0, r6
   1b230:	bl	1adb8 <__assert_fail@plt+0x85e0>
   1b234:	mov	r0, r4
   1b238:	mov	r1, r5
   1b23c:	mov	r2, #8
   1b240:	bl	1adb8 <__assert_fail@plt+0x85e0>
   1b244:	mov	r2, #5
   1b248:	movw	r1, #16268	; 0x3f8c
   1b24c:	mov	r0, #0
   1b250:	movt	r1, #5
   1b254:	bl	12298 <dcgettext@plt>
   1b258:	mov	r2, r8
   1b25c:	mov	r1, r0
   1b260:	mov	r0, #1
   1b264:	bl	125bc <__printf_chk@plt>
   1b268:	ldr	r2, [sp, #44]	; 0x2c
   1b26c:	cmp	r2, sl
   1b270:	bhi	1b1d8 <__assert_fail@plt+0x8a00>
   1b274:	ldr	r9, [sp, #16]
   1b278:	ldr	r8, [sp, #60]	; 0x3c
   1b27c:	ldr	r0, [sp, #32]
   1b280:	mov	r2, #5
   1b284:	ldr	r1, [sp, #24]
   1b288:	rsb	r3, r1, r0
   1b28c:	movw	r1, #16252	; 0x3f7c
   1b290:	mov	r0, #0
   1b294:	movt	r1, #5
   1b298:	lsr	sl, r3, #3
   1b29c:	bl	12298 <dcgettext@plt>
   1b2a0:	mov	r1, r0
   1b2a4:	mov	r0, #1
   1b2a8:	bl	125bc <__printf_chk@plt>
   1b2ac:	cmp	sl, #0
   1b2b0:	beq	1b638 <__assert_fail@plt+0x8e60>
   1b2b4:	ldr	r1, [sp, #52]	; 0x34
   1b2b8:	movw	r3, #13028	; 0x32e4
   1b2bc:	ldr	r0, [sp, #32]
   1b2c0:	movt	r3, #5
   1b2c4:	ldr	r2, [sp, #24]
   1b2c8:	mov	r4, #0
   1b2cc:	add	r5, r9, r0
   1b2d0:	lsr	r1, r1, #1
   1b2d4:	add	r9, r9, r2
   1b2d8:	str	r1, [sp, #44]	; 0x2c
   1b2dc:	str	r3, [sp, #8]
   1b2e0:	b	1b3a0 <__assert_fail@plt+0x8bc8>
   1b2e4:	mov	r2, #5
   1b2e8:	movw	r1, #16276	; 0x3f94
   1b2ec:	mov	r0, #0
   1b2f0:	movt	r1, #5
   1b2f4:	bl	12298 <dcgettext@plt>
   1b2f8:	mov	r2, r4
   1b2fc:	mov	r3, r6
   1b300:	mov	r1, r0
   1b304:	mov	r0, #1
   1b308:	bl	125bc <__printf_chk@plt>
   1b30c:	mov	r2, #5
   1b310:	movw	r1, #16304	; 0x3fb0
   1b314:	mov	r0, #0
   1b318:	movt	r1, #5
   1b31c:	bl	12298 <dcgettext@plt>
   1b320:	mov	r1, r6
   1b324:	mov	r2, r4
   1b328:	bl	49bf8 <warn@@Base>
   1b32c:	adds	r0, r5, r7
   1b330:	bcs	1b34c <__assert_fail@plt+0x8b74>
   1b334:	ldr	r3, [r8, #24]
   1b338:	ldr	r2, [r8, #12]
   1b33c:	sub	r3, r3, #3
   1b340:	add	r3, r2, r3
   1b344:	cmp	r0, r3
   1b348:	bcc	1b4f8 <__assert_fail@plt+0x8d20>
   1b34c:	mov	r2, #5
   1b350:	movw	r1, #16376	; 0x3ff8
   1b354:	mov	r0, #0
   1b358:	movt	r1, #5
   1b35c:	bl	12298 <dcgettext@plt>
   1b360:	mov	r2, r7
   1b364:	mov	r1, r0
   1b368:	mov	r0, #1
   1b36c:	bl	125bc <__printf_chk@plt>
   1b370:	mov	r2, #5
   1b374:	movw	r1, #16408	; 0x4018
   1b378:	mov	r0, #0
   1b37c:	movt	r1, #5
   1b380:	bl	12298 <dcgettext@plt>
   1b384:	mov	r1, r7
   1b388:	mov	r2, r4
   1b38c:	bl	49bf8 <warn@@Base>
   1b390:	add	r4, r4, #1
   1b394:	add	r9, r9, #8
   1b398:	cmp	r4, sl
   1b39c:	beq	1b638 <__assert_fail@plt+0x8e60>
   1b3a0:	mov	r0, r9
   1b3a4:	mov	r1, #4
   1b3a8:	bl	49df4 <warn@@Base+0x1fc>
   1b3ac:	mov	r1, #4
   1b3b0:	mov	r6, r0
   1b3b4:	add	r0, r9, r1
   1b3b8:	bl	49df4 <warn@@Base+0x1fc>
   1b3bc:	mov	r7, r0
   1b3c0:	orrs	r0, r7, r6
   1b3c4:	beq	1b390 <__assert_fail@plt+0x8bb8>
   1b3c8:	adds	r2, r5, r6
   1b3cc:	bcs	1b2e4 <__assert_fail@plt+0x8b0c>
   1b3d0:	ldr	r3, [r8, #24]
   1b3d4:	ldr	r1, [r8, #12]
   1b3d8:	add	r1, r1, r3
   1b3dc:	cmp	r2, r1
   1b3e0:	bcs	1b2e4 <__assert_fail@plt+0x8b0c>
   1b3e4:	ldr	r1, [sp, #56]	; 0x38
   1b3e8:	mov	r0, #1
   1b3ec:	str	r2, [sp]
   1b3f0:	mov	r2, r4
   1b3f4:	rsb	r3, r1, r3
   1b3f8:	movw	r1, #16364	; 0x3fec
   1b3fc:	rsb	r3, r6, r3
   1b400:	movt	r1, #5
   1b404:	bl	125bc <__printf_chk@plt>
   1b408:	b	1b32c <__assert_fail@plt+0x8b54>
   1b40c:	movw	r1, #15844	; 0x3de4
   1b410:	movt	r1, #5
   1b414:	mov	r0, #0
   1b418:	mov	r2, #5
   1b41c:	bl	12298 <dcgettext@plt>
   1b420:	ldr	r1, [r8, #8]
   1b424:	bl	49bf8 <warn@@Base>
   1b428:	mov	r0, #0
   1b42c:	add	sp, sp, #68	; 0x44
   1b430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b434:	movw	r1, #15556	; 0x3cc4
   1b438:	mov	r0, #0
   1b43c:	movt	r1, #5
   1b440:	b	1b418 <__assert_fail@plt+0x8c40>
   1b444:	mov	r2, #5
   1b448:	movw	r1, #15612	; 0x3cfc
   1b44c:	mov	r0, #0
   1b450:	movt	r1, #5
   1b454:	bl	12298 <dcgettext@plt>
   1b458:	mov	r1, r4
   1b45c:	bl	49bf8 <warn@@Base>
   1b460:	mov	r0, #0
   1b464:	add	sp, sp, #68	; 0x44
   1b468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b46c:	movw	r1, #15640	; 0x3d18
   1b470:	mov	r2, #5
   1b474:	movt	r1, #5
   1b478:	mov	r0, #0
   1b47c:	bl	12298 <dcgettext@plt>
   1b480:	bl	49bf8 <warn@@Base>
   1b484:	movw	r1, #15692	; 0x3d4c
   1b488:	mov	r2, #5
   1b48c:	movt	r1, #5
   1b490:	mov	r0, #0
   1b494:	bl	12298 <dcgettext@plt>
   1b498:	bl	49bf8 <warn@@Base>
   1b49c:	movw	r1, #15748	; 0x3d84
   1b4a0:	mov	r2, #5
   1b4a4:	movt	r1, #5
   1b4a8:	mov	r0, #0
   1b4ac:	bl	12298 <dcgettext@plt>
   1b4b0:	bl	49bf8 <warn@@Base>
   1b4b4:	mov	r2, #5
   1b4b8:	movw	r1, #15796	; 0x3db4
   1b4bc:	mov	r0, #0
   1b4c0:	movt	r1, #5
   1b4c4:	bl	12298 <dcgettext@plt>
   1b4c8:	bl	49bf8 <warn@@Base>
   1b4cc:	b	1ae98 <__assert_fail@plt+0x86c0>
   1b4d0:	mov	r2, #5
   1b4d4:	movw	r1, #15880	; 0x3e08
   1b4d8:	mov	r0, #0
   1b4dc:	movt	r1, #5
   1b4e0:	bl	12298 <dcgettext@plt>
   1b4e4:	ldr	r1, [sp, #8]
   1b4e8:	mov	r2, sl
   1b4ec:	bl	49bf8 <warn@@Base>
   1b4f0:	mov	r0, #0
   1b4f4:	b	1b42c <__assert_fail@plt+0x8c54>
   1b4f8:	mov	r1, #4
   1b4fc:	bl	49df4 <warn@@Base+0x1fc>
   1b500:	lsl	r3, r0, #2
   1b504:	mov	r6, r0
   1b508:	cmp	r0, r3
   1b50c:	bhi	1b670 <__assert_fail@plt+0x8e98>
   1b510:	add	r7, r7, #4
   1b514:	ldr	r1, [r8, #12]
   1b518:	ldr	r2, [r8, #24]
   1b51c:	add	r3, r7, r3
   1b520:	add	r3, r5, r3
   1b524:	add	r2, r1, r2
   1b528:	cmp	r3, r2
   1b52c:	bcs	1b670 <__assert_fail@plt+0x8e98>
   1b530:	cmp	r5, r3
   1b534:	bhi	1b670 <__assert_fail@plt+0x8e98>
   1b538:	cmp	r6, #1
   1b53c:	bls	1b740 <__assert_fail@plt+0x8f68>
   1b540:	mov	r0, #10
   1b544:	bl	1258c <putchar@plt>
   1b548:	str	r4, [sp, #32]
   1b54c:	mov	ip, #0
   1b550:	ldr	r4, [sp, #44]	; 0x2c
   1b554:	add	r7, r5, r7
   1b558:	str	sl, [sp, #16]
   1b55c:	mov	sl, ip
   1b560:	str	r5, [sp, #24]
   1b564:	mov	r0, r7
   1b568:	mov	r1, #4
   1b56c:	bl	49df4 <warn@@Base+0x1fc>
   1b570:	movw	r1, #16572	; 0x40bc
   1b574:	movt	r1, #5
   1b578:	mov	fp, r0
   1b57c:	bic	r2, fp, #-16777216	; 0xff000000
   1b580:	cmp	r2, r4
   1b584:	lsr	r5, fp, #31
   1b588:	mov	r0, #1
   1b58c:	rsb	r3, r4, r2
   1b590:	ubfx	fp, fp, #28, #3
   1b594:	bcc	1b640 <__assert_fail@plt+0x8e68>
   1b598:	cmp	r6, r0
   1b59c:	movw	r1, #16564	; 0x40b4
   1b5a0:	movt	r1, #5
   1b5a4:	moveq	r2, #32
   1b5a8:	movne	r2, #9
   1b5ac:	bl	125bc <__printf_chk@plt>
   1b5b0:	mov	r0, #0
   1b5b4:	cmp	r5, r0
   1b5b8:	movw	r1, #16580	; 0x40c4
   1b5bc:	movt	r1, #5
   1b5c0:	moveq	r0, r5
   1b5c4:	movweq	r1, #16588	; 0x40cc
   1b5c8:	mov	r2, #5
   1b5cc:	movteq	r1, #5
   1b5d0:	moveq	r2, #5
   1b5d4:	add	sl, sl, #1
   1b5d8:	bl	12298 <dcgettext@plt>
   1b5dc:	ldr	r3, [sp, #8]
   1b5e0:	mov	r2, #5
   1b5e4:	add	r7, r7, #4
   1b5e8:	ldr	r1, [r3, fp, lsl #2]
   1b5ec:	mov	r5, r0
   1b5f0:	mov	r0, #0
   1b5f4:	bl	12298 <dcgettext@plt>
   1b5f8:	mov	r2, r5
   1b5fc:	movw	r1, #16596	; 0x40d4
   1b600:	movt	r1, #5
   1b604:	mov	r3, r0
   1b608:	mov	r0, #1
   1b60c:	bl	125bc <__printf_chk@plt>
   1b610:	cmp	r6, #1
   1b614:	mov	r0, #10
   1b618:	beq	1b658 <__assert_fail@plt+0x8e80>
   1b61c:	bl	1258c <putchar@plt>
   1b620:	cmp	r6, sl
   1b624:	bhi	1b564 <__assert_fail@plt+0x8d8c>
   1b628:	ldr	sl, [sp, #16]
   1b62c:	ldr	r5, [sp, #24]
   1b630:	ldr	r4, [sp, #32]
   1b634:	b	1b390 <__assert_fail@plt+0x8bb8>
   1b638:	mov	r0, #1
   1b63c:	b	1b42c <__assert_fail@plt+0x8c54>
   1b640:	cmp	r6, #1
   1b644:	mov	r3, r2
   1b648:	moveq	r2, #32
   1b64c:	movne	r2, #9
   1b650:	bl	125bc <__printf_chk@plt>
   1b654:	b	1b5b0 <__assert_fail@plt+0x8dd8>
   1b658:	ldr	sl, [sp, #16]
   1b65c:	ldr	r5, [sp, #24]
   1b660:	ldr	r4, [sp, #32]
   1b664:	mov	r0, #10
   1b668:	bl	1258c <putchar@plt>
   1b66c:	b	1b390 <__assert_fail@plt+0x8bb8>
   1b670:	mov	r2, r6
   1b674:	movw	r1, #16476	; 0x405c
   1b678:	mov	r0, #1
   1b67c:	movt	r1, #5
   1b680:	bl	125bc <__printf_chk@plt>
   1b684:	mov	r2, #5
   1b688:	movw	r1, #16508	; 0x407c
   1b68c:	mov	r0, #0
   1b690:	movt	r1, #5
   1b694:	bl	12298 <dcgettext@plt>
   1b698:	mov	r1, r6
   1b69c:	mov	r2, r4
   1b6a0:	bl	49bf8 <warn@@Base>
   1b6a4:	b	1b390 <__assert_fail@plt+0x8bb8>
   1b6a8:	mov	r2, #5
   1b6ac:	movw	r1, #15924	; 0x3e34
   1b6b0:	mov	r0, #0
   1b6b4:	movt	r1, #5
   1b6b8:	bl	12298 <dcgettext@plt>
   1b6bc:	ldr	r1, [sp, #16]
   1b6c0:	ldr	r2, [sp, #8]
   1b6c4:	bl	49bf8 <warn@@Base>
   1b6c8:	mov	r0, #0
   1b6cc:	b	1b42c <__assert_fail@plt+0x8c54>
   1b6d0:	mov	r2, #5
   1b6d4:	movw	r1, #16116	; 0x3ef4
   1b6d8:	mov	r0, #0
   1b6dc:	movt	r1, #5
   1b6e0:	bl	12298 <dcgettext@plt>
   1b6e4:	bl	49bf8 <warn@@Base>
   1b6e8:	mov	r0, #0
   1b6ec:	b	1b42c <__assert_fail@plt+0x8c54>
   1b6f0:	mov	r2, #5
   1b6f4:	movw	r1, #15980	; 0x3e6c
   1b6f8:	mov	r0, #0
   1b6fc:	movt	r1, #5
   1b700:	bl	12298 <dcgettext@plt>
   1b704:	ldr	r1, [sp, #24]
   1b708:	ldr	r2, [sp, #16]
   1b70c:	bl	49bf8 <warn@@Base>
   1b710:	mov	r0, #0
   1b714:	b	1b42c <__assert_fail@plt+0x8c54>
   1b718:	mov	r2, #5
   1b71c:	movw	r1, #16048	; 0x3eb0
   1b720:	mov	r0, #0
   1b724:	movt	r1, #5
   1b728:	bl	12298 <dcgettext@plt>
   1b72c:	ldr	r1, [sp, #32]
   1b730:	ldr	r2, [sp, #24]
   1b734:	bl	49bf8 <warn@@Base>
   1b738:	mov	r0, #0
   1b73c:	b	1b42c <__assert_fail@plt+0x8c54>
   1b740:	cmp	r6, #0
   1b744:	bne	1b548 <__assert_fail@plt+0x8d70>
   1b748:	b	1b664 <__assert_fail@plt+0x8e8c>
   1b74c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b750:	add	r8, r1, #4
   1b754:	cmp	r8, r2
   1b758:	sub	sp, sp, #12
   1b75c:	mov	r9, r1
   1b760:	mov	r6, r2
   1b764:	mov	r5, r0
   1b768:	mov	r7, r3
   1b76c:	bcc	1b880 <__assert_fail@plt+0x90a8>
   1b770:	cmp	r1, r2
   1b774:	bcc	1b98c <__assert_fail@plt+0x91b4>
   1b778:	mov	fp, #4
   1b77c:	mov	r2, #0
   1b780:	mov	r3, #0
   1b784:	mov	sl, fp
   1b788:	strd	r2, [r7]
   1b78c:	mov	r2, #4
   1b790:	mov	r3, #0
   1b794:	ldrd	r0, [r5, #24]
   1b798:	cmp	r3, r1
   1b79c:	cmpeq	r2, r0
   1b7a0:	bhi	1b904 <__assert_fail@plt+0x912c>
   1b7a4:	add	r5, r8, #2
   1b7a8:	cmp	r6, r5
   1b7ac:	bls	1b944 <__assert_fail@plt+0x916c>
   1b7b0:	mov	r1, #2
   1b7b4:	movw	r4, #3472	; 0xd90
   1b7b8:	movt	r4, #7
   1b7bc:	mov	r0, r8
   1b7c0:	ldr	r3, [r4]
   1b7c4:	blx	r3
   1b7c8:	uxth	r0, r0
   1b7cc:	strh	r0, [r7, #8]
   1b7d0:	sub	r0, r0, #2
   1b7d4:	cmp	r0, #2
   1b7d8:	bhi	1b964 <__assert_fail@plt+0x918c>
   1b7dc:	add	r8, r5, sl
   1b7e0:	cmp	r6, r8
   1b7e4:	bhi	1b7f4 <__assert_fail@plt+0x901c>
   1b7e8:	cmp	r6, r5
   1b7ec:	bls	1b800 <__assert_fail@plt+0x9028>
   1b7f0:	rsb	sl, r5, r6
   1b7f4:	sub	r3, sl, #1
   1b7f8:	cmp	r3, #7
   1b7fc:	bls	1bb54 <__assert_fail@plt+0x937c>
   1b800:	mov	r2, #0
   1b804:	mov	r3, #0
   1b808:	strd	r2, [r7, #16]
   1b80c:	add	r5, r8, #1
   1b810:	cmp	r6, r5
   1b814:	bhi	1ba88 <__assert_fail@plt+0x92b0>
   1b818:	cmp	r6, r8
   1b81c:	bls	1b830 <__assert_fail@plt+0x9058>
   1b820:	rsb	r1, r8, r6
   1b824:	sub	r3, r1, #1
   1b828:	cmp	r3, #7
   1b82c:	bls	1ba8c <__assert_fail@plt+0x92b4>
   1b830:	mov	r3, #0
   1b834:	strb	r3, [r7, #24]
   1b838:	ldrh	r3, [r7, #8]
   1b83c:	cmp	r3, #3
   1b840:	bls	1b9a0 <__assert_fail@plt+0x91c8>
   1b844:	add	r8, r8, #2
   1b848:	cmp	r6, r8
   1b84c:	bhi	1bb6c <__assert_fail@plt+0x9394>
   1b850:	cmp	r6, r5
   1b854:	bhi	1bbe4 <__assert_fail@plt+0x940c>
   1b858:	mov	r3, #0
   1b85c:	strb	r3, [r7, #25]
   1b860:	mov	r2, #5
   1b864:	movw	r1, #16764	; 0x417c
   1b868:	mov	r0, #0
   1b86c:	movt	r1, #5
   1b870:	bl	12298 <dcgettext@plt>
   1b874:	mov	r5, #0
   1b878:	bl	49bf8 <warn@@Base>
   1b87c:	b	1b980 <__assert_fail@plt+0x91a8>
   1b880:	mov	r1, #4
   1b884:	movw	r4, #3472	; 0xd90
   1b888:	movt	r4, #7
   1b88c:	mov	r0, r9
   1b890:	ldr	r3, [r4]
   1b894:	blx	r3
   1b898:	mvn	r2, #0
   1b89c:	mov	r3, #0
   1b8a0:	cmp	r1, r3
   1b8a4:	cmpeq	r0, r2
   1b8a8:	strd	r0, [r7]
   1b8ac:	bne	1bbf8 <__assert_fail@plt+0x9420>
   1b8b0:	add	r3, r9, #12
   1b8b4:	cmp	r6, r3
   1b8b8:	bhi	1bbb8 <__assert_fail@plt+0x93e0>
   1b8bc:	cmp	r8, r6
   1b8c0:	bcs	1b8d4 <__assert_fail@plt+0x90fc>
   1b8c4:	rsb	r1, r8, r6
   1b8c8:	sub	r2, r1, #1
   1b8cc:	cmp	r2, #7
   1b8d0:	bls	1bbbc <__assert_fail@plt+0x93e4>
   1b8d4:	mov	r0, #0
   1b8d8:	mov	r1, #0
   1b8dc:	strd	r0, [r7]
   1b8e0:	mov	r8, r3
   1b8e4:	ldrd	r0, [r5, #24]
   1b8e8:	mov	r2, #12
   1b8ec:	mov	r3, #0
   1b8f0:	mov	fp, #12
   1b8f4:	cmp	r3, r1
   1b8f8:	cmpeq	r2, r0
   1b8fc:	mov	sl, #8
   1b900:	bls	1b7a4 <__assert_fail@plt+0x8fcc>
   1b904:	ldr	r2, [r5, #12]
   1b908:	mov	r4, #0
   1b90c:	mov	r0, r5
   1b910:	mov	r3, r4
   1b914:	rsb	r2, r2, r8
   1b918:	rsb	r2, sl, r2
   1b91c:	bl	1a6c4 <__assert_fail@plt+0x7eec>
   1b920:	subs	r5, r0, #0
   1b924:	beq	1bc0c <__assert_fail@plt+0x9434>
   1b928:	add	r5, r8, #2
   1b92c:	rsb	r3, r9, r6
   1b930:	cmp	r6, r5
   1b934:	rsb	r3, fp, r3
   1b938:	str	r4, [r7, #4]
   1b93c:	str	r3, [r7]
   1b940:	bhi	1b7b0 <__assert_fail@plt+0x8fd8>
   1b944:	cmp	r8, r6
   1b948:	bcs	1b95c <__assert_fail@plt+0x9184>
   1b94c:	rsb	r1, r8, r6
   1b950:	sub	r3, r1, #1
   1b954:	cmp	r3, #7
   1b958:	bls	1b7b4 <__assert_fail@plt+0x8fdc>
   1b95c:	mov	r3, #0
   1b960:	strh	r3, [r7, #8]
   1b964:	movw	r1, #16696	; 0x4138
   1b968:	mov	r0, #0
   1b96c:	movt	r1, #5
   1b970:	mov	r2, #5
   1b974:	bl	12298 <dcgettext@plt>
   1b978:	mov	r5, #0
   1b97c:	bl	49bf8 <warn@@Base>
   1b980:	mov	r0, r5
   1b984:	add	sp, sp, #12
   1b988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b98c:	rsb	r1, r1, r2
   1b990:	sub	r3, r1, #1
   1b994:	cmp	r3, #7
   1b998:	bhi	1b778 <__assert_fail@plt+0x8fa0>
   1b99c:	b	1b884 <__assert_fail@plt+0x90ac>
   1b9a0:	mov	r3, #1
   1b9a4:	strb	r3, [r7, #25]
   1b9a8:	add	r8, r5, #1
   1b9ac:	cmp	r6, r8
   1b9b0:	bls	1baa0 <__assert_fail@plt+0x92c8>
   1b9b4:	ldr	r3, [r4]
   1b9b8:	mov	r0, r5
   1b9bc:	mov	r1, #1
   1b9c0:	add	sl, r5, #2
   1b9c4:	blx	r3
   1b9c8:	cmp	r6, sl
   1b9cc:	strb	r0, [r7, #26]
   1b9d0:	bls	1bb94 <__assert_fail@plt+0x93bc>
   1b9d4:	mov	r0, r8
   1b9d8:	mov	r1, #1
   1b9dc:	bl	4a0f0 <warn@@Base+0x4f8>
   1b9e0:	add	r8, r5, #3
   1b9e4:	cmp	r6, r8
   1b9e8:	str	r0, [r7, #28]
   1b9ec:	bls	1bb1c <__assert_fail@plt+0x9344>
   1b9f0:	mov	r0, sl
   1b9f4:	ldr	r3, [r4]
   1b9f8:	mov	r1, #1
   1b9fc:	add	r5, r5, #4
   1ba00:	blx	r3
   1ba04:	cmp	r6, r5
   1ba08:	strb	r0, [r7, #32]
   1ba0c:	bls	1bb00 <__assert_fail@plt+0x9328>
   1ba10:	mov	r1, #1
   1ba14:	ldr	r3, [r4]
   1ba18:	mov	r0, r8
   1ba1c:	blx	r3
   1ba20:	strb	r0, [r7, #33]	; 0x21
   1ba24:	ldr	r3, [r7]
   1ba28:	add	fp, fp, r3
   1ba2c:	ldr	r3, [sp, #48]	; 0x30
   1ba30:	add	r9, r9, fp
   1ba34:	cmp	r6, r9
   1ba38:	str	r9, [r3]
   1ba3c:	bcs	1b980 <__assert_fail@plt+0x91a8>
   1ba40:	mov	r2, #5
   1ba44:	movw	r1, #16804	; 0x41a4
   1ba48:	mov	r0, #0
   1ba4c:	movt	r1, #5
   1ba50:	bl	12298 <dcgettext@plt>
   1ba54:	mov	r5, #0
   1ba58:	ldrd	r2, [r7]
   1ba5c:	str	r5, [sp]
   1ba60:	mov	r4, r0
   1ba64:	movw	r0, #53816	; 0xd238
   1ba68:	movt	r0, #5
   1ba6c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1ba70:	mov	r1, r0
   1ba74:	mov	r0, r4
   1ba78:	bl	49bf8 <warn@@Base>
   1ba7c:	ldr	r3, [sp, #48]	; 0x30
   1ba80:	str	r6, [r3]
   1ba84:	b	1b980 <__assert_fail@plt+0x91a8>
   1ba88:	mov	r1, #1
   1ba8c:	ldr	r3, [r4]
   1ba90:	mov	r0, r8
   1ba94:	blx	r3
   1ba98:	strb	r0, [r7, #24]
   1ba9c:	b	1b838 <__assert_fail@plt+0x9060>
   1baa0:	cmp	r5, r6
   1baa4:	bcs	1bab8 <__assert_fail@plt+0x92e0>
   1baa8:	rsb	r1, r5, r6
   1baac:	sub	r3, r1, #1
   1bab0:	cmp	r3, #7
   1bab4:	bls	1bc28 <__assert_fail@plt+0x9450>
   1bab8:	add	sl, r5, #2
   1babc:	mov	r3, #0
   1bac0:	cmp	sl, r6
   1bac4:	strb	r3, [r7, #26]
   1bac8:	bcc	1b9d4 <__assert_fail@plt+0x91fc>
   1bacc:	add	r8, r5, #3
   1bad0:	mov	r3, #0
   1bad4:	cmp	r8, r6
   1bad8:	str	r3, [r7, #28]
   1badc:	bcc	1b9f0 <__assert_fail@plt+0x9218>
   1bae0:	add	r5, r5, #4
   1bae4:	mov	r3, #0
   1bae8:	cmp	r6, r5
   1baec:	strb	r3, [r7, #32]
   1baf0:	bhi	1ba10 <__assert_fail@plt+0x9238>
   1baf4:	mov	r3, #0
   1baf8:	strb	r3, [r7, #33]	; 0x21
   1bafc:	b	1ba24 <__assert_fail@plt+0x924c>
   1bb00:	cmp	r6, r8
   1bb04:	bls	1baf4 <__assert_fail@plt+0x931c>
   1bb08:	rsb	r1, r8, r6
   1bb0c:	sub	r3, r1, #1
   1bb10:	cmp	r3, #7
   1bb14:	bhi	1baf4 <__assert_fail@plt+0x931c>
   1bb18:	b	1ba14 <__assert_fail@plt+0x923c>
   1bb1c:	cmp	r6, sl
   1bb20:	bls	1bae0 <__assert_fail@plt+0x9308>
   1bb24:	rsb	r1, sl, r6
   1bb28:	sub	r3, r1, #1
   1bb2c:	cmp	r3, #7
   1bb30:	bhi	1bae0 <__assert_fail@plt+0x9308>
   1bb34:	mov	r0, sl
   1bb38:	ldr	r3, [r4]
   1bb3c:	blx	r3
   1bb40:	add	r5, r5, #4
   1bb44:	cmp	r6, r5
   1bb48:	strb	r0, [r7, #32]
   1bb4c:	bls	1baf4 <__assert_fail@plt+0x931c>
   1bb50:	b	1ba10 <__assert_fail@plt+0x9238>
   1bb54:	mov	r0, r5
   1bb58:	mov	r1, sl
   1bb5c:	ldr	r3, [r4]
   1bb60:	blx	r3
   1bb64:	strd	r0, [r7, #16]
   1bb68:	b	1b80c <__assert_fail@plt+0x9034>
   1bb6c:	mov	r1, #1
   1bb70:	mov	r0, r5
   1bb74:	ldr	r3, [r4]
   1bb78:	blx	r3
   1bb7c:	uxtb	r0, r0
   1bb80:	strb	r0, [r7, #25]
   1bb84:	cmp	r0, #0
   1bb88:	movne	r5, r8
   1bb8c:	bne	1b9a8 <__assert_fail@plt+0x91d0>
   1bb90:	b	1b860 <__assert_fail@plt+0x9088>
   1bb94:	subs	r1, r6, r8
   1bb98:	beq	1bacc <__assert_fail@plt+0x92f4>
   1bb9c:	mov	r0, r8
   1bba0:	add	r8, r5, #3
   1bba4:	bl	4a0f0 <warn@@Base+0x4f8>
   1bba8:	cmp	r6, r8
   1bbac:	str	r0, [r7, #28]
   1bbb0:	bls	1bae0 <__assert_fail@plt+0x9308>
   1bbb4:	b	1b9f0 <__assert_fail@plt+0x9218>
   1bbb8:	mov	r1, #8
   1bbbc:	ldr	r2, [r4]
   1bbc0:	mov	r0, r8
   1bbc4:	mov	r8, r3
   1bbc8:	blx	r2
   1bbcc:	mov	fp, #12
   1bbd0:	mov	sl, #8
   1bbd4:	adds	r2, r0, #12
   1bbd8:	strd	r0, [r7]
   1bbdc:	adc	r3, r1, #0
   1bbe0:	b	1b794 <__assert_fail@plt+0x8fbc>
   1bbe4:	rsb	r1, r5, r6
   1bbe8:	sub	r3, r1, #1
   1bbec:	cmp	r3, #7
   1bbf0:	bhi	1b858 <__assert_fail@plt+0x9080>
   1bbf4:	b	1bb70 <__assert_fail@plt+0x9398>
   1bbf8:	mov	fp, #4
   1bbfc:	adds	r2, r0, #4
   1bc00:	adc	r3, r1, #0
   1bc04:	mov	sl, fp
   1bc08:	b	1b794 <__assert_fail@plt+0x8fbc>
   1bc0c:	mov	r2, #5
   1bc10:	movw	r1, #16608	; 0x40e0
   1bc14:	movt	r1, #5
   1bc18:	bl	12298 <dcgettext@plt>
   1bc1c:	ldr	r1, [r7]
   1bc20:	bl	49bf8 <warn@@Base>
   1bc24:	b	1b980 <__assert_fail@plt+0x91a8>
   1bc28:	ldr	r3, [r4]
   1bc2c:	mov	r0, r5
   1bc30:	blx	r3
   1bc34:	add	sl, r5, #2
   1bc38:	cmp	r6, sl
   1bc3c:	strb	r0, [r7, #26]
   1bc40:	bls	1bacc <__assert_fail@plt+0x92f4>
   1bc44:	b	1b9d4 <__assert_fail@plt+0x91fc>
   1bc48:	push	{r4, lr}
   1bc4c:	movw	r4, #1240	; 0x4d8
   1bc50:	movt	r4, #7
   1bc54:	sub	sp, sp, #16
   1bc58:	mov	r3, r0
   1bc5c:	ldr	r2, [r4, #1104]	; 0x450
   1bc60:	cmp	r2, #0
   1bc64:	beq	1bcbc <__assert_fail@plt+0x94e4>
   1bc68:	ldr	r0, [r4, #1108]	; 0x454
   1bc6c:	cmp	r0, r3
   1bc70:	bls	1bcbc <__assert_fail@plt+0x94e4>
   1bc74:	ldr	r0, [r2, r3, lsl #2]
   1bc78:	cmp	r0, #0
   1bc7c:	beq	1bcbc <__assert_fail@plt+0x94e4>
   1bc80:	cmp	r1, #0
   1bc84:	bne	1bce4 <__assert_fail@plt+0x950c>
   1bc88:	mov	r1, #64	; 0x40
   1bc8c:	str	r3, [sp, #4]
   1bc90:	str	r0, [sp, #8]
   1bc94:	mov	r3, r1
   1bc98:	add	r0, r4, #1040	; 0x410
   1bc9c:	movw	r2, #16852	; 0x41d4
   1bca0:	movt	r2, #5
   1bca4:	str	r2, [sp]
   1bca8:	mov	r2, #1
   1bcac:	bl	127cc <__snprintf_chk@plt>
   1bcb0:	add	r0, r4, #1040	; 0x410
   1bcb4:	add	sp, sp, #16
   1bcb8:	pop	{r4, pc}
   1bcbc:	mov	r1, #64	; 0x40
   1bcc0:	str	r3, [sp, #4]
   1bcc4:	movw	r2, #16864	; 0x41e0
   1bcc8:	mov	r3, r1
   1bccc:	movt	r2, #5
   1bcd0:	ldr	r0, [pc, #20]	; 1bcec <__assert_fail@plt+0x9514>
   1bcd4:	str	r2, [sp]
   1bcd8:	mov	r2, #1
   1bcdc:	bl	127cc <__snprintf_chk@plt>
   1bce0:	ldr	r0, [pc, #4]	; 1bcec <__assert_fail@plt+0x9514>
   1bce4:	add	sp, sp, #16
   1bce8:	pop	{r4, pc}
   1bcec:	andeq	r0, r7, r8, ror #17
   1bcf0:	ldr	r3, [r0, #8]
   1bcf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcf8:	mov	r5, r0
   1bcfc:	movw	r7, #65176	; 0xfe98
   1bd00:	ldr	r0, [r2]
   1bd04:	movt	r7, #6
   1bd08:	mov	r8, r2
   1bd0c:	cmp	r0, r3
   1bd10:	sub	sp, sp, #116	; 0x74
   1bd14:	ldr	r2, [r7]
   1bd18:	movw	r6, #3424	; 0xd60
   1bd1c:	strcc	r3, [r8]
   1bd20:	movt	r6, #7
   1bd24:	ldr	r3, [r1]
   1bd28:	str	r2, [sp, #108]	; 0x6c
   1bd2c:	cmp	r3, #0
   1bd30:	bne	1bf10 <__assert_fail@plt+0x9738>
   1bd34:	ldr	r2, [r6]
   1bd38:	ldrd	r0, [r5, #32]
   1bd3c:	bl	1adb8 <__assert_fail@plt+0x85e0>
   1bd40:	ldrb	r3, [r5, #69]	; 0x45
   1bd44:	cmp	r3, #0
   1bd48:	beq	1bed8 <__assert_fail@plt+0x9700>
   1bd4c:	add	r6, sp, #112	; 0x70
   1bd50:	movw	r3, #30821	; 0x7865
   1bd54:	movt	r3, #112	; 0x70
   1bd58:	str	r3, [r6, #-104]!	; 0xffffff98
   1bd5c:	movw	r1, #16920	; 0x4218
   1bd60:	mov	r0, #1
   1bd64:	movt	r1, #5
   1bd68:	mov	r2, r6
   1bd6c:	bl	125bc <__printf_chk@plt>
   1bd70:	ldr	r1, [r5, #8]
   1bd74:	cmp	r1, #0
   1bd78:	beq	1be44 <__assert_fail@plt+0x966c>
   1bd7c:	mov	fp, #0
   1bd80:	movw	sl, #30821	; 0x7865
   1bd84:	movw	r9, #12142	; 0x2f6e
   1bd88:	movw	r8, #16944	; 0x4230
   1bd8c:	movt	sl, #112	; 0x70
   1bd90:	movt	r9, #97	; 0x61
   1bd94:	movt	r8, #5
   1bd98:	mov	r4, fp
   1bd9c:	b	1bde4 <__assert_fail@plt+0x960c>
   1bda0:	cmp	r3, #8
   1bda4:	beq	1bea8 <__assert_fail@plt+0x96d0>
   1bda8:	cmp	r3, #9
   1bdac:	beq	1be78 <__assert_fail@plt+0x96a0>
   1bdb0:	cmp	r3, #7
   1bdb4:	beq	1be6c <__assert_fail@plt+0x9694>
   1bdb8:	str	r9, [r6]
   1bdbc:	movw	r1, #16904	; 0x4208
   1bdc0:	mov	r0, #1
   1bdc4:	movt	r1, #5
   1bdc8:	mov	r2, r6
   1bdcc:	bl	125bc <__printf_chk@plt>
   1bdd0:	ldr	r1, [r5, #8]
   1bdd4:	add	r4, r4, #1
   1bdd8:	add	fp, fp, #4
   1bddc:	cmp	r1, r4
   1bde0:	bls	1be44 <__assert_fail@plt+0x966c>
   1bde4:	ldr	r2, [r5, #12]
   1bde8:	lsl	r3, r4, #1
   1bdec:	ldrsh	r3, [r2, r3]
   1bdf0:	cmn	r3, #1
   1bdf4:	beq	1bdd4 <__assert_fail@plt+0x95fc>
   1bdf8:	cmp	r3, #16
   1bdfc:	beq	1be64 <__assert_fail@plt+0x968c>
   1be00:	ble	1bda0 <__assert_fail@plt+0x95c8>
   1be04:	cmp	r3, #22
   1be08:	beq	1bec8 <__assert_fail@plt+0x96f0>
   1be0c:	cmp	r3, #128	; 0x80
   1be10:	beq	1beb4 <__assert_fail@plt+0x96dc>
   1be14:	cmp	r3, #20
   1be18:	bne	1bdb8 <__assert_fail@plt+0x95e0>
   1be1c:	ldr	ip, [r5, #16]
   1be20:	movw	r3, #16936	; 0x4228
   1be24:	movt	r3, #5
   1be28:	mov	r0, r6
   1be2c:	ldr	ip, [ip, fp]
   1be30:	mov	r1, #1
   1be34:	mov	r2, #100	; 0x64
   1be38:	str	ip, [sp]
   1be3c:	bl	12568 <__sprintf_chk@plt>
   1be40:	b	1bdbc <__assert_fail@plt+0x95e4>
   1be44:	mov	r0, #10
   1be48:	bl	1258c <putchar@plt>
   1be4c:	ldr	r2, [sp, #108]	; 0x6c
   1be50:	ldr	r3, [r7]
   1be54:	cmp	r2, r3
   1be58:	bne	1bfc4 <__assert_fail@plt+0x97ec>
   1be5c:	add	sp, sp, #116	; 0x74
   1be60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be64:	str	sl, [r6]
   1be68:	b	1bdbc <__assert_fail@plt+0x95e4>
   1be6c:	mov	r3, #117	; 0x75
   1be70:	strh	r3, [r6]
   1be74:	b	1bdbc <__assert_fail@plt+0x95e4>
   1be78:	ldr	r3, [r5, #16]
   1be7c:	mov	r1, #0
   1be80:	ldr	r0, [r3, fp]
   1be84:	bl	1bc48 <__assert_fail@plt+0x9470>
   1be88:	movw	r3, #44884	; 0xaf54
   1be8c:	mov	r1, #1
   1be90:	movt	r3, #5
   1be94:	mov	r2, #100	; 0x64
   1be98:	str	r0, [sp]
   1be9c:	mov	r0, r6
   1bea0:	bl	12568 <__sprintf_chk@plt>
   1bea4:	b	1bdbc <__assert_fail@plt+0x95e4>
   1bea8:	mov	r3, #115	; 0x73
   1beac:	strh	r3, [r6]
   1beb0:	b	1bdbc <__assert_fail@plt+0x95e4>
   1beb4:	movw	r3, #16928	; 0x4220
   1beb8:	ldr	ip, [r5, #16]
   1bebc:	mov	r0, r6
   1bec0:	movt	r3, #5
   1bec4:	b	1be2c <__assert_fail@plt+0x9654>
   1bec8:	ldm	r8, {r0, r1}
   1becc:	str	r0, [r6]
   1bed0:	strb	r1, [sp, #12]
   1bed4:	b	1bdbc <__assert_fail@plt+0x95e4>
   1bed8:	ldr	r0, [r5, #48]	; 0x30
   1bedc:	mov	r1, #1
   1bee0:	bl	1bc48 <__assert_fail@plt+0x9470>
   1bee4:	add	r6, sp, #8
   1bee8:	movw	r3, #16912	; 0x4210
   1beec:	mov	r1, #1
   1bef0:	movt	r3, #5
   1bef4:	mov	r2, #100	; 0x64
   1bef8:	str	r0, [sp]
   1befc:	mov	r0, r6
   1bf00:	ldr	ip, [r5, #56]	; 0x38
   1bf04:	str	ip, [sp, #4]
   1bf08:	bl	12568 <__sprintf_chk@plt>
   1bf0c:	b	1bd5c <__assert_fail@plt+0x9584>
   1bf10:	mov	r4, #0
   1bf14:	str	r4, [r1]
   1bf18:	ldr	r2, [r6]
   1bf1c:	mov	r0, #1
   1bf20:	movw	r1, #16868	; 0x41e4
   1bf24:	movw	r3, #16884	; 0x41f4
   1bf28:	movt	r1, #5
   1bf2c:	movt	r3, #5
   1bf30:	lsl	r2, r2, r0
   1bf34:	bl	125bc <__printf_chk@plt>
   1bf38:	ldr	r0, [r8]
   1bf3c:	cmp	r0, r4
   1bf40:	bne	1bf78 <__assert_fail@plt+0x97a0>
   1bf44:	b	1bfb8 <__assert_fail@plt+0x97e0>
   1bf48:	mov	r1, #1
   1bf4c:	mov	r0, r4
   1bf50:	bl	1bc48 <__assert_fail@plt+0x9470>
   1bf54:	movw	r1, #16904	; 0x4208
   1bf58:	movt	r1, #5
   1bf5c:	mov	r2, r0
   1bf60:	mov	r0, #1
   1bf64:	bl	125bc <__printf_chk@plt>
   1bf68:	ldr	r0, [r8]
   1bf6c:	add	r4, r4, #1
   1bf70:	cmp	r0, r4
   1bf74:	bls	1bfb8 <__assert_fail@plt+0x97e0>
   1bf78:	ldr	r1, [r5, #12]
   1bf7c:	lsl	r3, r4, #1
   1bf80:	ldrsh	r3, [r1, r3]
   1bf84:	cmn	r3, #1
   1bf88:	beq	1bf6c <__assert_fail@plt+0x9794>
   1bf8c:	ldr	r3, [r5, #64]	; 0x40
   1bf90:	cmp	r3, r4
   1bf94:	bne	1bf48 <__assert_fail@plt+0x9770>
   1bf98:	movw	r1, #16892	; 0x41fc
   1bf9c:	mov	r0, #1
   1bfa0:	movt	r1, #5
   1bfa4:	add	r4, r4, #1
   1bfa8:	bl	125bc <__printf_chk@plt>
   1bfac:	ldr	r0, [r8]
   1bfb0:	cmp	r0, r4
   1bfb4:	bhi	1bf78 <__assert_fail@plt+0x97a0>
   1bfb8:	mov	r0, #10
   1bfbc:	bl	1258c <putchar@plt>
   1bfc0:	b	1bd34 <__assert_fail@plt+0x955c>
   1bfc4:	bl	122b0 <__stack_chk_fail@plt>
   1bfc8:	sub	r3, r0, #1
   1bfcc:	push	{lr}		; (str lr, [sp, #-4]!)
   1bfd0:	sub	sp, sp, #12
   1bfd4:	cmp	r3, #7
   1bfd8:	ldrls	pc, [pc, r3, lsl #2]
   1bfdc:	b	1c080 <__assert_fail@plt+0x98a8>
   1bfe0:	andeq	ip, r1, r0, ror r0
   1bfe4:	andeq	ip, r1, r0
   1bfe8:	andeq	ip, r1, r0, lsl r0
   1bfec:	andeq	ip, r1, r0, lsr #32
   1bff0:	andeq	ip, r1, r0, lsr r0
   1bff4:	andeq	ip, r1, r0, asr #32
   1bff8:	andeq	ip, r1, r0, asr r0
   1bffc:	andeq	ip, r1, r0, rrx
   1c000:	movw	r0, #33560	; 0x8318
   1c004:	movt	r0, #5
   1c008:	add	sp, sp, #12
   1c00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c010:	movw	r0, #33036	; 0x810c
   1c014:	movt	r0, #5
   1c018:	add	sp, sp, #12
   1c01c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c020:	movw	r0, #33144	; 0x8178
   1c024:	movt	r0, #5
   1c028:	add	sp, sp, #12
   1c02c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c030:	movw	r0, #33340	; 0x823c
   1c034:	movt	r0, #5
   1c038:	add	sp, sp, #12
   1c03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c040:	movw	r0, #16952	; 0x4238
   1c044:	movt	r0, #5
   1c048:	add	sp, sp, #12
   1c04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c050:	movw	r0, #33256	; 0x81e8
   1c054:	movt	r0, #5
   1c058:	add	sp, sp, #12
   1c05c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c060:	movw	r0, #33288	; 0x8208
   1c064:	movt	r0, #5
   1c068:	add	sp, sp, #12
   1c06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c070:	movw	r0, #33116	; 0x815c
   1c074:	movt	r0, #5
   1c078:	add	sp, sp, #12
   1c07c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c080:	mov	r1, #16
   1c084:	str	r0, [sp, #4]
   1c088:	mov	r3, r1
   1c08c:	movw	r2, #37020	; 0x909c
   1c090:	ldr	r0, [pc, #24]	; 1c0b0 <__assert_fail@plt+0x98d8>
   1c094:	movt	r2, #5
   1c098:	str	r2, [sp]
   1c09c:	mov	r2, #1
   1c0a0:	bl	127cc <__snprintf_chk@plt>
   1c0a4:	ldr	r0, [pc, #4]	; 1c0b0 <__assert_fail@plt+0x98d8>
   1c0a8:	add	sp, sp, #12
   1c0ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0b0:	andeq	r0, r7, r0, lsr r9
   1c0b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c0b8:	sub	sp, sp, #8
   1c0bc:	mov	r8, r0
   1c0c0:	mov	r6, r2
   1c0c4:	movw	r1, #16960	; 0x4240
   1c0c8:	mov	r2, #5
   1c0cc:	movt	r1, #5
   1c0d0:	mov	r0, #0
   1c0d4:	ldr	r4, [sp, #40]	; 0x28
   1c0d8:	mov	r7, r3
   1c0dc:	bl	12298 <dcgettext@plt>
   1c0e0:	mov	r1, #0
   1c0e4:	mov	r2, r6
   1c0e8:	mov	r3, r7
   1c0ec:	str	r1, [sp]
   1c0f0:	mov	r5, r0
   1c0f4:	movw	r0, #53816	; 0xd238
   1c0f8:	movt	r0, #5
   1c0fc:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1c100:	mov	r1, r5
   1c104:	mov	r2, r0
   1c108:	mov	r0, #1
   1c10c:	bl	125bc <__printf_chk@plt>
   1c110:	cmp	r8, r4
   1c114:	movhi	r0, r4
   1c118:	bhi	1c194 <__assert_fail@plt+0x99bc>
   1c11c:	rsb	r4, r8, r4
   1c120:	asr	r5, r4, #31
   1c124:	cmp	r5, r7
   1c128:	cmpeq	r4, r6
   1c12c:	movhi	r4, r6
   1c130:	movhi	r5, r7
   1c134:	subs	r6, r4, #1
   1c138:	orrs	r3, r4, r5
   1c13c:	beq	1c190 <__assert_fail@plt+0x99b8>
   1c140:	movw	sl, #3472	; 0xd90
   1c144:	movt	sl, #7
   1c148:	mov	r3, r8
   1c14c:	mov	r0, r3
   1c150:	ldr	r2, [sl]
   1c154:	mov	r1, #1
   1c158:	add	r9, r3, r1
   1c15c:	blx	r2
   1c160:	subs	r4, r4, #1
   1c164:	sbc	r5, r5, #0
   1c168:	movw	r1, #16980	; 0x4254
   1c16c:	movt	r1, #5
   1c170:	mov	r2, r0
   1c174:	mov	r0, #1
   1c178:	bl	125bc <__printf_chk@plt>
   1c17c:	orrs	r3, r4, r5
   1c180:	mov	r3, r9
   1c184:	bne	1c14c <__assert_fail@plt+0x9974>
   1c188:	add	r6, r6, #1
   1c18c:	add	r8, r8, r6
   1c190:	mov	r0, r8
   1c194:	add	sp, sp, #8
   1c198:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c19c:	ldrd	r2, [r0, #24]
   1c1a0:	push	{r4, lr}
   1c1a4:	orrs	r1, r2, r3
   1c1a8:	mov	r4, r0
   1c1ac:	beq	1c1b8 <__assert_fail@plt+0x99e0>
   1c1b0:	mov	r0, #1
   1c1b4:	pop	{r4, pc}
   1c1b8:	mov	r2, #5
   1c1bc:	movw	r1, #15424	; 0x3c40
   1c1c0:	mov	r0, #0
   1c1c4:	movt	r1, #5
   1c1c8:	bl	12298 <dcgettext@plt>
   1c1cc:	ldr	r2, [r4, #8]
   1c1d0:	mov	r1, r0
   1c1d4:	mov	r0, #1
   1c1d8:	bl	125bc <__printf_chk@plt>
   1c1dc:	mov	r0, #0
   1c1e0:	pop	{r4, pc}
   1c1e4:	movw	r3, #62864	; 0xf590
   1c1e8:	movt	r3, #6
   1c1ec:	push	{r4, r5, r6, lr}
   1c1f0:	mov	r4, r0
   1c1f4:	ldr	r0, [r3, #652]	; 0x28c
   1c1f8:	mov	r5, r1
   1c1fc:	sub	sp, sp, #8
   1c200:	cmp	r0, #0
   1c204:	movweq	r1, #16988	; 0x425c
   1c208:	moveq	r2, #5
   1c20c:	movteq	r1, #5
   1c210:	beq	1c288 <__assert_fail@plt+0x9ab0>
   1c214:	mov	r2, #664	; 0x298
   1c218:	add	r2, r3, r2
   1c21c:	ldrd	r2, [r2]
   1c220:	cmp	r3, r5
   1c224:	cmpeq	r2, r4
   1c228:	bcc	1c238 <__assert_fail@plt+0x9a60>
   1c22c:	add	r0, r0, r4
   1c230:	add	sp, sp, #8
   1c234:	pop	{r4, r5, r6, pc}
   1c238:	mov	r2, #5
   1c23c:	movw	r1, #17012	; 0x4274
   1c240:	mov	r0, #0
   1c244:	movt	r1, #5
   1c248:	bl	12298 <dcgettext@plt>
   1c24c:	mov	r2, r4
   1c250:	mov	r3, r5
   1c254:	mov	r4, #0
   1c258:	str	r4, [sp]
   1c25c:	mov	r6, r0
   1c260:	movw	r0, #41908	; 0xa3b4
   1c264:	movt	r0, #5
   1c268:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1c26c:	mov	r1, r0
   1c270:	mov	r0, r6
   1c274:	bl	49bf8 <warn@@Base>
   1c278:	movw	r1, #17048	; 0x4298
   1c27c:	movt	r1, #5
   1c280:	mov	r0, r4
   1c284:	mov	r2, #5
   1c288:	add	sp, sp, #8
   1c28c:	pop	{r4, r5, r6, lr}
   1c290:	b	12298 <dcgettext@plt>
   1c294:	push	{r4, lr}
   1c298:	sub	sp, sp, #8
   1c29c:	mov	r4, r0
   1c2a0:	bl	4b680 <warn@@Base+0x1a88>
   1c2a4:	subs	r3, r0, #0
   1c2a8:	movne	r0, r3
   1c2ac:	beq	1c2b8 <__assert_fail@plt+0x9ae0>
   1c2b0:	add	sp, sp, #8
   1c2b4:	pop	{r4, pc}
   1c2b8:	mov	r2, #5
   1c2bc:	movw	r1, #17068	; 0x42ac
   1c2c0:	movt	r1, #5
   1c2c4:	bl	12298 <dcgettext@plt>
   1c2c8:	mov	r1, #100	; 0x64
   1c2cc:	str	r4, [sp, #4]
   1c2d0:	mov	r3, r1
   1c2d4:	mov	r2, #1
   1c2d8:	str	r0, [sp]
   1c2dc:	ldr	r0, [pc, #12]	; 1c2f0 <__assert_fail@plt+0x9b18>
   1c2e0:	bl	127cc <__snprintf_chk@plt>
   1c2e4:	ldr	r0, [pc, #4]	; 1c2f0 <__assert_fail@plt+0x9b18>
   1c2e8:	add	sp, sp, #8
   1c2ec:	pop	{r4, pc}
   1c2f0:	andeq	r0, r7, r0, asr #18
   1c2f4:	push	{r4, lr}
   1c2f8:	subs	r4, r0, #0
   1c2fc:	sub	sp, sp, #8
   1c300:	movweq	r0, #17092	; 0x42c4
   1c304:	movteq	r0, #5
   1c308:	beq	1c330 <__assert_fail@plt+0x9b58>
   1c30c:	movw	r3, #8193	; 0x2001
   1c310:	cmp	r4, r3
   1c314:	movweq	r0, #17108	; 0x42d4
   1c318:	movteq	r0, #5
   1c31c:	beq	1c330 <__assert_fail@plt+0x9b58>
   1c320:	bl	4c158 <warn@@Base+0x2560>
   1c324:	subs	r3, r0, #0
   1c328:	movne	r0, r3
   1c32c:	beq	1c338 <__assert_fail@plt+0x9b60>
   1c330:	add	sp, sp, #8
   1c334:	pop	{r4, pc}
   1c338:	mov	r2, #5
   1c33c:	movw	r1, #17148	; 0x42fc
   1c340:	movt	r1, #5
   1c344:	bl	12298 <dcgettext@plt>
   1c348:	mov	r1, #100	; 0x64
   1c34c:	str	r4, [sp, #4]
   1c350:	mov	r3, r1
   1c354:	mov	r2, #1
   1c358:	str	r0, [sp]
   1c35c:	ldr	r0, [pc, #8]	; 1c36c <__assert_fail@plt+0x9b94>
   1c360:	bl	127cc <__snprintf_chk@plt>
   1c364:	ldr	r0, [pc]	; 1c36c <__assert_fail@plt+0x9b94>
   1c368:	b	1c330 <__assert_fail@plt+0x9b58>
   1c36c:	andeq	r0, r7, r4, lsr #19
   1c370:	push	{r4, lr}
   1c374:	subs	r4, r0, #0
   1c378:	sub	sp, sp, #8
   1c37c:	movweq	r0, #17172	; 0x4314
   1c380:	movteq	r0, #5
   1c384:	bne	1c390 <__assert_fail@plt+0x9bb8>
   1c388:	add	sp, sp, #8
   1c38c:	pop	{r4, pc}
   1c390:	bl	4bea0 <warn@@Base+0x22a8>
   1c394:	subs	r3, r0, #0
   1c398:	movne	r0, r3
   1c39c:	bne	1c388 <__assert_fail@plt+0x9bb0>
   1c3a0:	mov	r2, #5
   1c3a4:	movw	r1, #17192	; 0x4328
   1c3a8:	movt	r1, #5
   1c3ac:	bl	12298 <dcgettext@plt>
   1c3b0:	mov	r1, #100	; 0x64
   1c3b4:	str	r4, [sp, #4]
   1c3b8:	mov	r3, r1
   1c3bc:	mov	r2, #1
   1c3c0:	str	r0, [sp]
   1c3c4:	ldr	r0, [pc, #8]	; 1c3d4 <__assert_fail@plt+0x9bfc>
   1c3c8:	bl	127cc <__snprintf_chk@plt>
   1c3cc:	ldr	r0, [pc]	; 1c3d4 <__assert_fail@plt+0x9bfc>
   1c3d0:	b	1c388 <__assert_fail@plt+0x9bb0>
   1c3d4:	andeq	r0, r7, r8, lsl #20
   1c3d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3dc:	and	r4, r1, #7
   1c3e0:	cmp	r4, #3
   1c3e4:	mov	r7, r1
   1c3e8:	mov	r6, r0
   1c3ec:	mov	sl, r2
   1c3f0:	mov	fp, r3
   1c3f4:	ldr	r8, [r0]
   1c3f8:	ldr	r5, [sp, #40]	; 0x28
   1c3fc:	beq	1c4a8 <__assert_fail@plt+0x9cd0>
   1c400:	cmp	r4, #4
   1c404:	beq	1c470 <__assert_fail@plt+0x9c98>
   1c408:	cmp	r4, #2
   1c40c:	beq	1c474 <__assert_fail@plt+0x9c9c>
   1c410:	movw	r3, #3424	; 0xd60
   1c414:	movt	r3, #7
   1c418:	ldr	r4, [r3]
   1c41c:	add	r9, r8, r4
   1c420:	cmp	r9, r5
   1c424:	bcs	1c480 <__assert_fail@plt+0x9ca8>
   1c428:	cmp	r4, #8
   1c42c:	bhi	1c4fc <__assert_fail@plt+0x9d24>
   1c430:	cmp	r4, #0
   1c434:	beq	1c528 <__assert_fail@plt+0x9d50>
   1c438:	tst	r7, #8
   1c43c:	beq	1c4b0 <__assert_fail@plt+0x9cd8>
   1c440:	mov	r1, r4
   1c444:	mov	r0, r8
   1c448:	bl	4a0f0 <warn@@Base+0x4f8>
   1c44c:	and	r7, r7, #112	; 0x70
   1c450:	cmp	r7, #16
   1c454:	mov	r4, r0
   1c458:	mov	r5, r1
   1c45c:	beq	1c4dc <__assert_fail@plt+0x9d04>
   1c460:	str	r9, [r6]
   1c464:	mov	r0, r4
   1c468:	mov	r1, r5
   1c46c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c470:	mov	r4, #8
   1c474:	add	r9, r8, r4
   1c478:	cmp	r5, r9
   1c47c:	bhi	1c438 <__assert_fail@plt+0x9c60>
   1c480:	movw	r1, #17216	; 0x4340
   1c484:	movt	r1, #5
   1c488:	mov	r0, #0
   1c48c:	mov	r2, #5
   1c490:	bl	12298 <dcgettext@plt>
   1c494:	bl	49bf8 <warn@@Base>
   1c498:	mov	r0, #0
   1c49c:	str	r5, [r6]
   1c4a0:	mov	r1, r0
   1c4a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4a8:	mov	r4, #4
   1c4ac:	b	1c41c <__assert_fail@plt+0x9c44>
   1c4b0:	movw	r3, #3472	; 0xd90
   1c4b4:	movt	r3, #7
   1c4b8:	mov	r1, r4
   1c4bc:	mov	r0, r8
   1c4c0:	ldr	r3, [r3]
   1c4c4:	and	r7, r7, #112	; 0x70
   1c4c8:	blx	r3
   1c4cc:	cmp	r7, #16
   1c4d0:	mov	r4, r0
   1c4d4:	mov	r5, r1
   1c4d8:	bne	1c460 <__assert_fail@plt+0x9c88>
   1c4dc:	ldr	r1, [sl]
   1c4e0:	ldrd	r2, [fp]
   1c4e4:	rsb	r8, r1, r8
   1c4e8:	adds	r2, r2, r8
   1c4ec:	adc	r3, r3, r8, asr #31
   1c4f0:	adds	r4, r4, r2
   1c4f4:	adc	r5, r5, r3
   1c4f8:	b	1c460 <__assert_fail@plt+0x9c88>
   1c4fc:	mov	r2, #5
   1c500:	movw	r1, #17260	; 0x436c
   1c504:	mov	r0, #0
   1c508:	movt	r1, #5
   1c50c:	bl	12298 <dcgettext@plt>
   1c510:	mov	r1, r4
   1c514:	bl	49bf8 <warn@@Base>
   1c518:	mov	r0, #0
   1c51c:	str	r5, [r6]
   1c520:	mov	r1, r0
   1c524:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c528:	movw	r1, #17304	; 0x4398
   1c52c:	mov	r0, r4
   1c530:	mov	r2, #5
   1c534:	movt	r1, #5
   1c538:	b	1c490 <__assert_fail@plt+0x9cb8>
   1c53c:	push	{r4, lr}
   1c540:	sub	sp, sp, #8
   1c544:	ldr	r4, [pc, #64]	; 1c58c <__assert_fail@plt+0x9db4>
   1c548:	mov	r1, #15
   1c54c:	str	r0, [sp, #4]
   1c550:	mov	r3, r1
   1c554:	movw	r2, #17344	; 0x43c0
   1c558:	movt	r2, #5
   1c55c:	mov	r0, r4
   1c560:	str	r2, [sp]
   1c564:	mov	r2, #1
   1c568:	bl	127cc <__snprintf_chk@plt>
   1c56c:	mov	r3, r4
   1c570:	movw	r1, #17352	; 0x43c8
   1c574:	mov	r0, #1
   1c578:	movt	r1, #5
   1c57c:	mov	r2, #8
   1c580:	add	sp, sp, #8
   1c584:	pop	{r4, lr}
   1c588:	b	125bc <__printf_chk@plt>
   1c58c:	andeq	r0, r7, ip, ror #20
   1c590:	push	{r6, r7, r8, lr}
   1c594:	mov	r7, r3
   1c598:	sub	sp, sp, #16
   1c59c:	orrs	r3, r0, r1
   1c5a0:	mov	r6, r2
   1c5a4:	ldr	r8, [sp, #32]
   1c5a8:	beq	1c604 <__assert_fail@plt+0x9e2c>
   1c5ac:	strd	r0, [sp, #8]
   1c5b0:	mov	r2, #1
   1c5b4:	mov	r0, r8
   1c5b8:	mov	r1, #64	; 0x40
   1c5bc:	movw	r3, #17360	; 0x43d0
   1c5c0:	movt	r3, #5
   1c5c4:	str	r3, [sp]
   1c5c8:	mvn	r3, #0
   1c5cc:	bl	127cc <__snprintf_chk@plt>
   1c5d0:	strd	r6, [sp, #8]
   1c5d4:	mov	r2, #1
   1c5d8:	movw	r3, #17368	; 0x43d8
   1c5dc:	movt	r3, #5
   1c5e0:	str	r3, [sp]
   1c5e4:	mvn	r3, #0
   1c5e8:	mov	r1, r0
   1c5ec:	add	r0, r8, r0
   1c5f0:	rsb	r1, r1, #64	; 0x40
   1c5f4:	bl	127cc <__snprintf_chk@plt>
   1c5f8:	mov	r0, r8
   1c5fc:	add	sp, sp, #16
   1c600:	pop	{r6, r7, r8, pc}
   1c604:	strd	r6, [sp, #8]
   1c608:	mov	r0, r8
   1c60c:	mov	r1, #64	; 0x40
   1c610:	mov	r2, #1
   1c614:	movw	r3, #17360	; 0x43d0
   1c618:	movt	r3, #5
   1c61c:	str	r3, [sp]
   1c620:	mvn	r3, #0
   1c624:	bl	127cc <__snprintf_chk@plt>
   1c628:	mov	r0, r8
   1c62c:	add	sp, sp, #16
   1c630:	pop	{r6, r7, r8, pc}
   1c634:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1c638:	cmp	r0, r3
   1c63c:	sub	sp, sp, #8
   1c640:	stm	sp, {r1, r2}
   1c644:	bcs	1c734 <__assert_fail@plt+0x9f5c>
   1c648:	ldrb	ip, [r0]
   1c64c:	mov	r7, #0
   1c650:	and	r6, ip, #127	; 0x7f
   1c654:	tst	ip, #128	; 0x80
   1c658:	uxtb	r6, r6
   1c65c:	beq	1c750 <__assert_fail@plt+0x9f78>
   1c660:	sub	fp, r3, #1
   1c664:	mov	r1, #7
   1c668:	mov	r8, #1
   1c66c:	cmp	r0, fp
   1c670:	sub	sl, r1, #32
   1c674:	rsb	r9, r1, #32
   1c678:	beq	1c72c <__assert_fail@plt+0x9f54>
   1c67c:	ldrb	ip, [r0, #1]!
   1c680:	add	r8, r8, #1
   1c684:	mov	r3, #0
   1c688:	and	r2, ip, #127	; 0x7f
   1c68c:	tst	ip, #128	; 0x80
   1c690:	uxtb	r2, r2
   1c694:	lsl	r5, r2, sl
   1c698:	lsl	r4, r2, r1
   1c69c:	orr	r5, r5, r2, lsr r9
   1c6a0:	add	r1, r1, #7
   1c6a4:	orr	r6, r6, r4
   1c6a8:	orr	r7, r7, r5
   1c6ac:	beq	1c6b8 <__assert_fail@plt+0x9ee0>
   1c6b0:	cmp	r8, #10
   1c6b4:	bne	1c66c <__assert_fail@plt+0x9e94>
   1c6b8:	cmp	r1, #63	; 0x3f
   1c6bc:	movhi	r3, #0
   1c6c0:	movls	r3, #1
   1c6c4:	ldr	r2, [sp]
   1c6c8:	cmp	r2, #0
   1c6cc:	strne	r8, [r2]
   1c6d0:	ldr	r2, [sp, #4]
   1c6d4:	cmp	r2, #0
   1c6d8:	moveq	r3, #0
   1c6dc:	andne	r3, r3, #1
   1c6e0:	cmp	r3, #0
   1c6e4:	beq	1c718 <__assert_fail@plt+0x9f40>
   1c6e8:	tst	ip, #64	; 0x40
   1c6ec:	beq	1c718 <__assert_fail@plt+0x9f40>
   1c6f0:	mov	r0, #1
   1c6f4:	sub	r4, r1, #32
   1c6f8:	rsb	ip, r1, #32
   1c6fc:	lsl	r3, r0, r4
   1c700:	orr	r3, r3, r0, lsr ip
   1c704:	lsl	r2, r0, r1
   1c708:	rsbs	r2, r2, #0
   1c70c:	rsc	r3, r3, #0
   1c710:	orr	r6, r6, r2
   1c714:	orr	r7, r7, r3
   1c718:	mov	r0, r6
   1c71c:	mov	r1, r7
   1c720:	add	sp, sp, #8
   1c724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1c728:	bx	lr
   1c72c:	mov	r3, #1
   1c730:	b	1c6c4 <__assert_fail@plt+0x9eec>
   1c734:	mov	ip, #0
   1c738:	mov	r3, #1
   1c73c:	mov	r1, ip
   1c740:	mov	r8, ip
   1c744:	mov	r6, #0
   1c748:	mov	r7, #0
   1c74c:	b	1c6c4 <__assert_fail@plt+0x9eec>
   1c750:	mov	r3, #1
   1c754:	mov	r1, #7
   1c758:	mov	r8, r3
   1c75c:	b	1c6c4 <__assert_fail@plt+0x9eec>
   1c760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c764:	movw	sl, #65176	; 0xfe98
   1c768:	movt	sl, #6
   1c76c:	sub	sp, sp, #12
   1c770:	cmp	r1, r0
   1c774:	mov	r5, r0
   1c778:	ldr	r3, [sl]
   1c77c:	mov	r4, r1
   1c780:	str	r3, [sp, #4]
   1c784:	bls	1c8c8 <__assert_fail@plt+0xa0f0>
   1c788:	movw	r9, #1240	; 0x4d8
   1c78c:	movt	r9, #7
   1c790:	mov	r8, #0
   1c794:	mov	r0, r5
   1c798:	mov	r1, sp
   1c79c:	mov	r2, #0
   1c7a0:	mov	r3, r4
   1c7a4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1c7a8:	ldr	fp, [sp]
   1c7ac:	add	fp, r5, fp
   1c7b0:	cmp	r4, fp
   1c7b4:	mov	r6, r0
   1c7b8:	beq	1c8e0 <__assert_fail@plt+0xa108>
   1c7bc:	cmp	r6, #0
   1c7c0:	mov	r0, fp
   1c7c4:	beq	1c8e4 <__assert_fail@plt+0xa10c>
   1c7c8:	mov	r3, r4
   1c7cc:	mov	r1, sp
   1c7d0:	mov	r2, #0
   1c7d4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1c7d8:	ldr	r3, [sp]
   1c7dc:	add	r5, fp, r3
   1c7e0:	cmp	r4, r5
   1c7e4:	mov	r7, r0
   1c7e8:	beq	1c8e0 <__assert_fail@plt+0xa108>
   1c7ec:	mov	r0, #24
   1c7f0:	ldrb	fp, [fp, r3]
   1c7f4:	bl	1243c <malloc@plt>
   1c7f8:	add	r5, r5, #1
   1c7fc:	cmp	r0, #0
   1c800:	beq	1c8a0 <__assert_fail@plt+0xa0c8>
   1c804:	ldr	r2, [r9, #4]
   1c808:	movw	r3, #1240	; 0x4d8
   1c80c:	movt	r3, #7
   1c810:	str	r6, [r0]
   1c814:	cmp	r2, #0
   1c818:	stmib	r0, {r7, fp}
   1c81c:	str	r8, [r0, #12]
   1c820:	ldrne	r3, [r3, #8]
   1c824:	str	r8, [r0, #16]
   1c828:	str	r8, [r0, #20]
   1c82c:	streq	r0, [r3, #4]
   1c830:	strne	r0, [r3, #20]
   1c834:	str	r0, [r9, #8]
   1c838:	b	1c8a0 <__assert_fail@plt+0xa0c8>
   1c83c:	mov	r0, r5
   1c840:	mov	r3, r4
   1c844:	mov	r1, sp
   1c848:	mov	r2, #0
   1c84c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1c850:	ldr	r3, [sp]
   1c854:	add	r5, r5, r3
   1c858:	cmp	r4, r5
   1c85c:	mov	r7, r0
   1c860:	beq	1c8c8 <__assert_fail@plt+0xa0f0>
   1c864:	mov	r0, #12
   1c868:	bl	1243c <malloc@plt>
   1c86c:	cmp	r0, #0
   1c870:	beq	1c898 <__assert_fail@plt+0xa0c0>
   1c874:	ldr	r3, [r9, #8]
   1c878:	stm	r0, {r6, r7}
   1c87c:	ldr	r1, [r3, #12]
   1c880:	str	r8, [r0, #8]
   1c884:	cmp	r1, #0
   1c888:	streq	r0, [r3, #12]
   1c88c:	ldrne	r1, [r3, #16]
   1c890:	strne	r0, [r1, #8]
   1c894:	str	r0, [r3, #16]
   1c898:	cmp	r6, #0
   1c89c:	beq	1c8fc <__assert_fail@plt+0xa124>
   1c8a0:	mov	r0, r5
   1c8a4:	mov	r3, r4
   1c8a8:	mov	r1, sp
   1c8ac:	mov	r2, #0
   1c8b0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1c8b4:	ldr	r3, [sp]
   1c8b8:	add	r5, r5, r3
   1c8bc:	cmp	r4, r5
   1c8c0:	mov	r6, r0
   1c8c4:	bne	1c83c <__assert_fail@plt+0xa064>
   1c8c8:	movw	r1, #17376	; 0x43e0
   1c8cc:	mov	r2, #5
   1c8d0:	movt	r1, #5
   1c8d4:	mov	r0, #0
   1c8d8:	bl	12298 <dcgettext@plt>
   1c8dc:	bl	494bc <error@@Base>
   1c8e0:	mov	r0, #0
   1c8e4:	ldr	r2, [sp, #4]
   1c8e8:	ldr	r3, [sl]
   1c8ec:	cmp	r2, r3
   1c8f0:	bne	1c908 <__assert_fail@plt+0xa130>
   1c8f4:	add	sp, sp, #12
   1c8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8fc:	cmp	r4, r5
   1c900:	bhi	1c794 <__assert_fail@plt+0x9fbc>
   1c904:	b	1c8c8 <__assert_fail@plt+0xa0f0>
   1c908:	bl	122b0 <__stack_chk_fail@plt>
   1c90c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c910:	mov	r2, #5
   1c914:	sub	sp, sp, #12
   1c918:	ldr	r4, [r0, #12]
   1c91c:	ldr	fp, [r0, #24]
   1c920:	mov	sl, r0
   1c924:	movw	r1, #15452	; 0x3c5c
   1c928:	mov	r0, #0
   1c92c:	movt	r1, #5
   1c930:	movw	r8, #1240	; 0x4d8
   1c934:	bl	12298 <dcgettext@plt>
   1c938:	movt	r8, #7
   1c93c:	ldr	r2, [sl, #8]
   1c940:	add	fp, r4, fp
   1c944:	mov	r9, r8
   1c948:	mov	r1, r0
   1c94c:	mov	r0, #1
   1c950:	bl	125bc <__printf_chk@plt>
   1c954:	bl	1ab04 <__assert_fail@plt+0x832c>
   1c958:	ldr	r3, [r8, #4]
   1c95c:	cmp	r3, #0
   1c960:	bne	1ca74 <__assert_fail@plt+0xa29c>
   1c964:	mov	r0, r4
   1c968:	mov	r1, fp
   1c96c:	bl	1c760 <__assert_fail@plt+0x9f88>
   1c970:	ldr	r3, [r9, #4]
   1c974:	cmp	r3, #0
   1c978:	mov	r7, r0
   1c97c:	beq	1ca58 <__assert_fail@plt+0xa280>
   1c980:	mov	r2, #5
   1c984:	movw	r1, #17420	; 0x440c
   1c988:	mov	r0, #0
   1c98c:	movt	r1, #5
   1c990:	bl	12298 <dcgettext@plt>
   1c994:	ldr	r2, [sl, #12]
   1c998:	rsb	r2, r2, r4
   1c99c:	mov	r1, r0
   1c9a0:	mov	r0, #1
   1c9a4:	bl	125bc <__printf_chk@plt>
   1c9a8:	ldr	r6, [r8, #4]
   1c9ac:	cmp	r6, #0
   1c9b0:	beq	1ca58 <__assert_fail@plt+0xa280>
   1c9b4:	ldr	r0, [r6, #4]
   1c9b8:	ldr	r4, [r6]
   1c9bc:	bl	1c294 <__assert_fail@plt+0x9abc>
   1c9c0:	mov	r5, r0
   1c9c4:	ldr	r0, [r6, #8]
   1c9c8:	cmp	r0, #0
   1c9cc:	movwne	r1, #17444	; 0x4424
   1c9d0:	movweq	r1, #17460	; 0x4434
   1c9d4:	movtne	r1, #5
   1c9d8:	movne	r2, #5
   1c9dc:	moveq	r2, #5
   1c9e0:	movteq	r1, #5
   1c9e4:	movne	r0, #0
   1c9e8:	bl	12298 <dcgettext@plt>
   1c9ec:	mov	r2, r4
   1c9f0:	mov	r3, r5
   1c9f4:	movw	r1, #17472	; 0x4440
   1c9f8:	movt	r1, #5
   1c9fc:	str	r0, [sp]
   1ca00:	mov	r0, #1
   1ca04:	bl	125bc <__printf_chk@plt>
   1ca08:	ldr	r4, [r6, #12]
   1ca0c:	cmp	r4, #0
   1ca10:	beq	1ca4c <__assert_fail@plt+0xa274>
   1ca14:	ldr	r0, [r4]
   1ca18:	bl	1c2f4 <__assert_fail@plt+0x9b1c>
   1ca1c:	mov	r5, r0
   1ca20:	ldr	r0, [r4, #4]
   1ca24:	bl	1c370 <__assert_fail@plt+0x9b98>
   1ca28:	mov	r2, r5
   1ca2c:	movw	r1, #17496	; 0x4458
   1ca30:	movt	r1, #5
   1ca34:	mov	r3, r0
   1ca38:	mov	r0, #1
   1ca3c:	bl	125bc <__printf_chk@plt>
   1ca40:	ldr	r4, [r4, #8]
   1ca44:	cmp	r4, #0
   1ca48:	bne	1ca14 <__assert_fail@plt+0xa23c>
   1ca4c:	ldr	r6, [r6, #20]
   1ca50:	cmp	r6, #0
   1ca54:	bne	1c9b4 <__assert_fail@plt+0xa1dc>
   1ca58:	cmp	r7, #0
   1ca5c:	beq	1ca7c <__assert_fail@plt+0xa2a4>
   1ca60:	bl	1ab04 <__assert_fail@plt+0x832c>
   1ca64:	ldr	r3, [r8, #4]
   1ca68:	mov	r4, r7
   1ca6c:	cmp	r3, #0
   1ca70:	beq	1c964 <__assert_fail@plt+0xa18c>
   1ca74:	mov	r7, #0
   1ca78:	b	1c980 <__assert_fail@plt+0xa1a8>
   1ca7c:	mov	r0, #10
   1ca80:	bl	1258c <putchar@plt>
   1ca84:	mov	r0, #1
   1ca88:	add	sp, sp, #12
   1ca8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca90:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ca94:	movw	r8, #65176	; 0xfe98
   1ca98:	movt	r8, #6
   1ca9c:	sub	sp, sp, #12
   1caa0:	ldr	r4, [r0, #12]
   1caa4:	mov	r5, r0
   1caa8:	ldr	r3, [r8]
   1caac:	mov	r2, #5
   1cab0:	movw	r1, #15452	; 0x3c5c
   1cab4:	mov	r0, #0
   1cab8:	movt	r1, #5
   1cabc:	ldr	r6, [r5, #24]
   1cac0:	str	r3, [sp, #4]
   1cac4:	bl	12298 <dcgettext@plt>
   1cac8:	add	r6, r4, r6
   1cacc:	ldr	r2, [r5, #8]
   1cad0:	mov	r1, r0
   1cad4:	mov	r0, #1
   1cad8:	bl	125bc <__printf_chk@plt>
   1cadc:	cmp	r4, r6
   1cae0:	bcc	1cb5c <__assert_fail@plt+0xa384>
   1cae4:	b	1cc1c <__assert_fail@plt+0xa444>
   1cae8:	cmp	r5, #1
   1caec:	beq	1cbb8 <__assert_fail@plt+0xa3e0>
   1caf0:	cmp	r5, #2
   1caf4:	bne	1cb54 <__assert_fail@plt+0xa37c>
   1caf8:	mov	r2, #0
   1cafc:	mov	r3, r6
   1cb00:	mov	r0, r4
   1cb04:	mov	r1, sp
   1cb08:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1cb0c:	ldr	r5, [sp]
   1cb10:	add	r5, r4, r5
   1cb14:	rsb	r1, r5, r6
   1cb18:	mov	r7, r0
   1cb1c:	mov	r0, r5
   1cb20:	bl	12604 <strnlen@plt>
   1cb24:	movw	r1, #17636	; 0x44e4
   1cb28:	movt	r1, #5
   1cb2c:	mov	r2, #5
   1cb30:	add	r4, r0, #1
   1cb34:	mov	r0, #0
   1cb38:	bl	12298 <dcgettext@plt>
   1cb3c:	mov	r3, r5
   1cb40:	mov	r2, r7
   1cb44:	add	r4, r5, r4
   1cb48:	mov	r1, r0
   1cb4c:	mov	r0, #1
   1cb50:	bl	125bc <__printf_chk@plt>
   1cb54:	cmp	r6, r4
   1cb58:	bls	1cc1c <__assert_fail@plt+0xa444>
   1cb5c:	ldrb	r5, [r4], #1
   1cb60:	cmp	r5, #3
   1cb64:	beq	1cc5c <__assert_fail@plt+0xa484>
   1cb68:	bls	1cae8 <__assert_fail@plt+0xa310>
   1cb6c:	cmp	r5, #4
   1cb70:	beq	1cc38 <__assert_fail@plt+0xa460>
   1cb74:	cmp	r5, #255	; 0xff
   1cb78:	bne	1cb54 <__assert_fail@plt+0xa37c>
   1cb7c:	mov	r2, #0
   1cb80:	mov	r3, r6
   1cb84:	mov	r0, r4
   1cb88:	mov	r1, sp
   1cb8c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1cb90:	ldr	r5, [sp]
   1cb94:	add	r5, r4, r5
   1cb98:	rsb	r1, r5, r6
   1cb9c:	mov	r7, r0
   1cba0:	mov	r0, r5
   1cba4:	bl	12604 <strnlen@plt>
   1cba8:	movw	r1, #17680	; 0x4510
   1cbac:	mov	r2, #5
   1cbb0:	movt	r1, #5
   1cbb4:	b	1cb30 <__assert_fail@plt+0xa358>
   1cbb8:	mov	r3, r6
   1cbbc:	mov	r2, #0
   1cbc0:	mov	r0, r4
   1cbc4:	mov	r1, sp
   1cbc8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1cbcc:	ldr	r7, [sp]
   1cbd0:	add	r7, r4, r7
   1cbd4:	rsb	r1, r7, r6
   1cbd8:	mov	r9, r0
   1cbdc:	mov	r0, r7
   1cbe0:	bl	12604 <strnlen@plt>
   1cbe4:	mov	r2, #5
   1cbe8:	movw	r1, #17588	; 0x44b4
   1cbec:	movt	r1, #5
   1cbf0:	add	r4, r0, #1
   1cbf4:	mov	r0, #0
   1cbf8:	bl	12298 <dcgettext@plt>
   1cbfc:	add	r4, r7, r4
   1cc00:	mov	r2, r9
   1cc04:	mov	r3, r7
   1cc08:	mov	r1, r0
   1cc0c:	mov	r0, r5
   1cc10:	bl	125bc <__printf_chk@plt>
   1cc14:	cmp	r6, r4
   1cc18:	bhi	1cb5c <__assert_fail@plt+0xa384>
   1cc1c:	ldr	r2, [sp, #4]
   1cc20:	mov	r0, #1
   1cc24:	ldr	r3, [r8]
   1cc28:	cmp	r2, r3
   1cc2c:	bne	1ccc8 <__assert_fail@plt+0xa4f0>
   1cc30:	add	sp, sp, #12
   1cc34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cc38:	mov	r2, #5
   1cc3c:	movw	r1, #17564	; 0x449c
   1cc40:	mov	r0, #0
   1cc44:	movt	r1, #5
   1cc48:	bl	12298 <dcgettext@plt>
   1cc4c:	mov	r1, r0
   1cc50:	mov	r0, #1
   1cc54:	bl	125bc <__printf_chk@plt>
   1cc58:	b	1cb54 <__assert_fail@plt+0xa37c>
   1cc5c:	mov	r3, r6
   1cc60:	mov	r0, r4
   1cc64:	mov	r1, sp
   1cc68:	mov	r2, #0
   1cc6c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1cc70:	mov	r3, r6
   1cc74:	mov	r1, sp
   1cc78:	mov	r2, #0
   1cc7c:	mov	r5, r0
   1cc80:	ldr	r0, [sp]
   1cc84:	add	r4, r4, r0
   1cc88:	mov	r0, r4
   1cc8c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1cc90:	ldr	r3, [sp]
   1cc94:	mov	r2, #5
   1cc98:	movw	r1, #17512	; 0x4468
   1cc9c:	movt	r1, #5
   1cca0:	add	r4, r4, r3
   1cca4:	mov	r7, r0
   1cca8:	mov	r0, #0
   1ccac:	bl	12298 <dcgettext@plt>
   1ccb0:	mov	r2, r5
   1ccb4:	mov	r3, r7
   1ccb8:	mov	r1, r0
   1ccbc:	mov	r0, #1
   1ccc0:	bl	125bc <__printf_chk@plt>
   1ccc4:	b	1cb54 <__assert_fail@plt+0xa37c>
   1ccc8:	bl	122b0 <__stack_chk_fail@plt>
   1cccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccd0:	movw	r7, #65176	; 0xfe98
   1ccd4:	movt	r7, #6
   1ccd8:	sub	sp, sp, #52	; 0x34
   1ccdc:	mov	fp, r3
   1cce0:	mov	ip, r0
   1cce4:	ldr	r4, [r7]
   1cce8:	mov	r8, r1
   1ccec:	ldr	r6, [sp, #88]	; 0x58
   1ccf0:	mov	sl, r2
   1ccf4:	mov	r3, r0
   1ccf8:	mov	r9, #0
   1ccfc:	str	r4, [sp, #44]	; 0x2c
   1cd00:	add	r6, r0, r6
   1cd04:	ldr	r4, [sp, #104]	; 0x68
   1cd08:	str	r0, [sp, #36]	; 0x24
   1cd0c:	str	r4, [sp, #32]
   1cd10:	cmp	r3, r6
   1cd14:	bcs	1d148 <__assert_fail@plt+0xa970>
   1cd18:	add	r0, r3, #1
   1cd1c:	str	r0, [sp, #36]	; 0x24
   1cd20:	ldrb	r2, [r3]
   1cd24:	sub	r1, r2, #3
   1cd28:	cmp	r1, #249	; 0xf9
   1cd2c:	ldrls	pc, [pc, r1, lsl #2]
   1cd30:	b	1d11c <__assert_fail@plt+0xa944>
   1cd34:	muleq	r1, r4, r3
   1cd38:	andeq	sp, r1, ip, lsl r1
   1cd3c:	andeq	sp, r1, ip, lsl r1
   1cd40:	andeq	lr, r1, ip, ror r3
   1cd44:	andeq	sp, r1, ip, lsl r1
   1cd48:	andeq	lr, r1, ip, asr #6
   1cd4c:	andeq	lr, r1, r0, lsl r3
   1cd50:	andeq	lr, r1, r0, ror #5
   1cd54:	andeq	lr, r1, r4, lsr #5
   1cd58:	andeq	lr, r1, r4, ror r2
   1cd5c:	andeq	lr, r1, r8, lsr r2
   1cd60:			; <UNDEFINED> instruction: 0x0001e1b0
   1cd64:	andeq	lr, r1, r8, lsr #2
   1cd68:	andeq	lr, r1, r8, ror #1
   1cd6c:	andeq	lr, r1, r8, lsr #1
   1cd70:	muleq	r1, r0, r0
   1cd74:	andeq	lr, r1, r8, ror r0
   1cd78:	andeq	lr, r1, r0, rrx
   1cd7c:	andeq	lr, r1, r0, lsr r0
   1cd80:	andeq	lr, r1, r8, lsl r0
   1cd84:	andeq	lr, r1, r0
   1cd88:	andeq	sp, r1, r8, ror #31
   1cd8c:	ldrdeq	sp, [r1], -r0
   1cd90:			; <UNDEFINED> instruction: 0x0001dfb8
   1cd94:	andeq	sp, r1, r0, lsr #31
   1cd98:	andeq	sp, r1, r8, lsl #31
   1cd9c:	andeq	sp, r1, r0, ror pc
   1cda0:	andeq	sp, r1, r8, asr pc
   1cda4:	andeq	sp, r1, r0, asr #30
   1cda8:	andeq	sp, r1, r8, lsr #30
   1cdac:	andeq	sp, r1, r0, lsl pc
   1cdb0:	strdeq	sp, [r1], -r8
   1cdb4:			; <UNDEFINED> instruction: 0x0001deb8
   1cdb8:	andeq	sp, r1, r0, lsr #29
   1cdbc:	andeq	sp, r1, r8, lsl #29
   1cdc0:	andeq	sp, r1, r0, ror lr
   1cdc4:	andeq	sp, r1, r8, asr lr
   1cdc8:	andeq	sp, r1, ip, lsl lr
   1cdcc:	andeq	sp, r1, r4, lsl #28
   1cdd0:	andeq	sp, r1, ip, ror #27
   1cdd4:	ldrdeq	sp, [r1], -r4
   1cdd8:			; <UNDEFINED> instruction: 0x0001ddbc
   1cddc:	andeq	sp, r1, r4, lsr #27
   1cde0:	andeq	sp, r1, ip, lsl #27
   1cde4:	andeq	sp, r1, r0, asr sp
   1cde8:	andeq	sp, r1, r4, lsr sp
   1cdec:	andeq	sp, r1, r4, lsr sp
   1cdf0:	andeq	sp, r1, r4, lsr sp
   1cdf4:	andeq	sp, r1, r4, lsr sp
   1cdf8:	andeq	sp, r1, r4, lsr sp
   1cdfc:	andeq	sp, r1, r4, lsr sp
   1ce00:	andeq	sp, r1, r4, lsr sp
   1ce04:	andeq	sp, r1, r4, lsr sp
   1ce08:	andeq	sp, r1, r4, lsr sp
   1ce0c:	andeq	sp, r1, r4, lsr sp
   1ce10:	andeq	sp, r1, r4, lsr sp
   1ce14:	andeq	sp, r1, r4, lsr sp
   1ce18:	andeq	sp, r1, r4, lsr sp
   1ce1c:	andeq	sp, r1, r4, lsr sp
   1ce20:	andeq	sp, r1, r4, lsr sp
   1ce24:	andeq	sp, r1, r4, lsr sp
   1ce28:	andeq	sp, r1, r4, lsr sp
   1ce2c:	andeq	sp, r1, r4, lsr sp
   1ce30:	andeq	sp, r1, r4, lsr sp
   1ce34:	andeq	sp, r1, r4, lsr sp
   1ce38:	andeq	sp, r1, r4, lsr sp
   1ce3c:	andeq	sp, r1, r4, lsr sp
   1ce40:	andeq	sp, r1, r4, lsr sp
   1ce44:	andeq	sp, r1, r4, lsr sp
   1ce48:	andeq	sp, r1, r4, lsr sp
   1ce4c:	andeq	sp, r1, r4, lsr sp
   1ce50:	andeq	sp, r1, r4, lsr sp
   1ce54:	andeq	sp, r1, r4, lsr sp
   1ce58:	andeq	sp, r1, r4, lsr sp
   1ce5c:	andeq	sp, r1, r4, lsr sp
   1ce60:	andeq	sp, r1, r4, lsr sp
   1ce64:	andeq	sp, r1, r4, lsr sp
   1ce68:	andeq	sp, r1, r4, lsl #26
   1ce6c:	andeq	sp, r1, r4, lsl #26
   1ce70:	andeq	sp, r1, r4, lsl #26
   1ce74:	andeq	sp, r1, r4, lsl #26
   1ce78:	andeq	sp, r1, r4, lsl #26
   1ce7c:	andeq	sp, r1, r4, lsl #26
   1ce80:	andeq	sp, r1, r4, lsl #26
   1ce84:	andeq	sp, r1, r4, lsl #26
   1ce88:	andeq	sp, r1, r4, lsl #26
   1ce8c:	andeq	sp, r1, r4, lsl #26
   1ce90:	andeq	sp, r1, r4, lsl #26
   1ce94:	andeq	sp, r1, r4, lsl #26
   1ce98:	andeq	sp, r1, r4, lsl #26
   1ce9c:	andeq	sp, r1, r4, lsl #26
   1cea0:	andeq	sp, r1, r4, lsl #26
   1cea4:	andeq	sp, r1, r4, lsl #26
   1cea8:	andeq	sp, r1, r4, lsl #26
   1ceac:	andeq	sp, r1, r4, lsl #26
   1ceb0:	andeq	sp, r1, r4, lsl #26
   1ceb4:	andeq	sp, r1, r4, lsl #26
   1ceb8:	andeq	sp, r1, r4, lsl #26
   1cebc:	andeq	sp, r1, r4, lsl #26
   1cec0:	andeq	sp, r1, r4, lsl #26
   1cec4:	andeq	sp, r1, r4, lsl #26
   1cec8:	andeq	sp, r1, r4, lsl #26
   1cecc:	andeq	sp, r1, r4, lsl #26
   1ced0:	andeq	sp, r1, r4, lsl #26
   1ced4:	andeq	sp, r1, r4, lsl #26
   1ced8:	andeq	sp, r1, r4, lsl #26
   1cedc:	andeq	sp, r1, r4, lsl #26
   1cee0:	andeq	sp, r1, r4, lsl #26
   1cee4:	andeq	sp, r1, r4, lsl #26
   1cee8:	andeq	sp, r1, ip, lsr #25
   1ceec:	andeq	sp, r1, ip, lsr #25
   1cef0:	andeq	sp, r1, ip, lsr #25
   1cef4:	andeq	sp, r1, ip, lsr #25
   1cef8:	andeq	sp, r1, ip, lsr #25
   1cefc:	andeq	sp, r1, ip, lsr #25
   1cf00:	andeq	sp, r1, ip, lsr #25
   1cf04:	andeq	sp, r1, ip, lsr #25
   1cf08:	andeq	sp, r1, ip, lsr #25
   1cf0c:	andeq	sp, r1, ip, lsr #25
   1cf10:	andeq	sp, r1, ip, lsr #25
   1cf14:	andeq	sp, r1, ip, lsr #25
   1cf18:	andeq	sp, r1, ip, lsr #25
   1cf1c:	andeq	sp, r1, ip, lsr #25
   1cf20:	andeq	sp, r1, ip, lsr #25
   1cf24:	andeq	sp, r1, ip, lsr #25
   1cf28:	andeq	sp, r1, ip, lsr #25
   1cf2c:	andeq	sp, r1, ip, lsr #25
   1cf30:	andeq	sp, r1, ip, lsr #25
   1cf34:	andeq	sp, r1, ip, lsr #25
   1cf38:	andeq	sp, r1, ip, lsr #25
   1cf3c:	andeq	sp, r1, ip, lsr #25
   1cf40:	andeq	sp, r1, ip, lsr #25
   1cf44:	andeq	sp, r1, ip, lsr #25
   1cf48:	andeq	sp, r1, ip, lsr #25
   1cf4c:	andeq	sp, r1, ip, lsr #25
   1cf50:	andeq	sp, r1, ip, lsr #25
   1cf54:	andeq	sp, r1, ip, lsr #25
   1cf58:	andeq	sp, r1, ip, lsr #25
   1cf5c:	andeq	sp, r1, ip, lsr #25
   1cf60:	andeq	sp, r1, ip, lsr #25
   1cf64:	andeq	sp, r1, ip, lsr #25
   1cf68:	andeq	sp, r1, ip, lsr ip
   1cf6c:	strdeq	sp, [r1], -r8
   1cf70:	andeq	sp, r1, r0, asr #22
   1cf74:	andeq	sp, r1, r0, lsl #22
   1cf78:	ldrdeq	sp, [r1], -r0
   1cf7c:	andeq	sp, r1, r0, lsr #21
   1cf80:	andeq	sp, r1, r8, lsl #21
   1cf84:	andeq	sp, r1, r0, ror sl
   1cf88:	andeq	sp, r1, ip, lsl #20
   1cf8c:	andeq	sp, r1, r8, lsr #19
   1cf90:	andeq	sp, r1, r4, lsr r9
   1cf94:	andeq	sp, r1, ip, lsl r9
   1cf98:	andeq	sp, r1, r4, lsl #18
   1cf9c:	andeq	sp, r1, r4, lsr #16
   1cfa0:	ldrdeq	sp, [r1], -r4
   1cfa4:			; <UNDEFINED> instruction: 0x0001d7bc
   1cfa8:	andeq	sp, r1, ip, lsl r1
   1cfac:	andeq	sp, r1, ip, lsl r1
   1cfb0:	andeq	sp, r1, ip, lsl r1
   1cfb4:	andeq	sp, r1, ip, lsl r1
   1cfb8:	andeq	sp, r1, ip, lsl r1
   1cfbc:	andeq	sp, r1, ip, lsl r1
   1cfc0:	andeq	sp, r1, ip, lsl r1
   1cfc4:	andeq	sp, r1, ip, lsl r1
   1cfc8:	andeq	sp, r1, ip, lsl r1
   1cfcc:	andeq	sp, r1, ip, lsl r1
   1cfd0:	andeq	sp, r1, ip, lsl r1
   1cfd4:	andeq	sp, r1, ip, lsl r1
   1cfd8:	andeq	sp, r1, ip, lsl r1
   1cfdc:	andeq	sp, r1, ip, lsl r1
   1cfe0:	andeq	sp, r1, ip, lsl r1
   1cfe4:	andeq	sp, r1, ip, lsl r1
   1cfe8:	andeq	sp, r1, ip, lsl r1
   1cfec:	andeq	sp, r1, ip, lsl r1
   1cff0:	andeq	sp, r1, ip, lsl r1
   1cff4:	andeq	sp, r1, ip, lsl r1
   1cff8:	andeq	sp, r1, ip, lsl r1
   1cffc:	andeq	sp, r1, ip, lsl r1
   1d000:	andeq	sp, r1, ip, lsl r1
   1d004:	andeq	sp, r1, ip, lsl r1
   1d008:	andeq	sp, r1, ip, lsl r1
   1d00c:	andeq	sp, r1, ip, lsl r1
   1d010:	andeq	sp, r1, ip, lsl r1
   1d014:	andeq	sp, r1, ip, lsl r1
   1d018:	andeq	sp, r1, ip, lsl r1
   1d01c:	andeq	sp, r1, ip, lsl r1
   1d020:	andeq	sp, r1, ip, lsl r1
   1d024:	andeq	sp, r1, ip, lsl r1
   1d028:	andeq	sp, r1, ip, lsl r1
   1d02c:	andeq	sp, r1, ip, lsl r1
   1d030:	andeq	sp, r1, ip, lsl r1
   1d034:	andeq	sp, r1, ip, lsl r1
   1d038:	andeq	sp, r1, ip, lsl r1
   1d03c:	andeq	sp, r1, ip, lsl r1
   1d040:	andeq	sp, r1, ip, lsl r1
   1d044:	andeq	sp, r1, ip, lsl r1
   1d048:	andeq	sp, r1, ip, lsl r1
   1d04c:	andeq	sp, r1, ip, lsl r1
   1d050:	andeq	sp, r1, ip, lsl r1
   1d054:	andeq	sp, r1, ip, lsl r1
   1d058:	andeq	sp, r1, ip, lsl r1
   1d05c:	andeq	sp, r1, ip, lsl r1
   1d060:	andeq	sp, r1, ip, lsl r1
   1d064:	andeq	sp, r1, ip, lsl r1
   1d068:	andeq	sp, r1, ip, lsl r1
   1d06c:	andeq	sp, r1, ip, lsl r1
   1d070:	andeq	sp, r1, ip, lsl r1
   1d074:	andeq	sp, r1, ip, lsl r1
   1d078:	andeq	sp, r1, ip, lsl r1
   1d07c:	andeq	sp, r1, ip, lsl r1
   1d080:	andeq	sp, r1, ip, lsl r1
   1d084:	andeq	sp, r1, ip, lsl r1
   1d088:	andeq	sp, r1, ip, lsl r1
   1d08c:	andeq	sp, r1, ip, lsl r1
   1d090:	andeq	sp, r1, ip, lsl r1
   1d094:	andeq	sp, r1, ip, lsl r1
   1d098:	andeq	sp, r1, ip, lsl r1
   1d09c:	andeq	sp, r1, ip, lsl r1
   1d0a0:	andeq	sp, r1, ip, lsl r1
   1d0a4:	andeq	sp, r1, ip, lsl r1
   1d0a8:	muleq	r1, r4, r7
   1d0ac:	andeq	sp, r1, r4, lsr r7
   1d0b0:	andeq	sp, r1, ip, lsl r7
   1d0b4:	andeq	sp, r1, r4, lsl #14
   1d0b8:	andeq	sp, r1, ip, ror #13
   1d0bc:	andeq	sp, r1, r4, ror #14
   1d0c0:	andeq	sp, r1, ip, asr #14
   1d0c4:	andeq	sp, r1, ip, lsl r1
   1d0c8:	andeq	sp, r1, ip, lsl r1
   1d0cc:	andeq	sp, r1, ip, lsl r1
   1d0d0:	andeq	sp, r1, ip, lsl r1
   1d0d4:	andeq	sp, r1, ip, lsl r1
   1d0d8:	andeq	sp, r1, ip, lsl r1
   1d0dc:	andeq	sp, r1, ip, lsl r1
   1d0e0:	andeq	sp, r1, ip, lsl r1
   1d0e4:	andeq	sp, r1, ip, lsl r1
   1d0e8:	andeq	sp, r1, ip, ror r7
   1d0ec:	andeq	sp, r1, r0, lsl #13
   1d0f0:	andeq	sp, r1, ip, asr #11
   1d0f4:	andeq	sp, r1, r0, lsl r5
   1d0f8:	andeq	sp, r1, r8, lsl #9
   1d0fc:	andeq	sp, r1, r0, asr #7
   1d100:	muleq	r1, r0, r3
   1d104:	andeq	sp, r1, r4, lsr #6
   1d108:	andeq	sp, r1, ip, lsl #6
   1d10c:	andeq	sp, r1, r0, lsr #5
   1d110:	andeq	sp, r1, r0, lsr r2
   1d114:	ldrdeq	sp, [r1], -r8
   1d118:	andeq	sp, r1, r4, ror #2
   1d11c:	sub	r2, r2, #224	; 0xe0
   1d120:	cmp	r2, #31
   1d124:	bls	1e408 <__assert_fail@plt+0xbc30>
   1d128:	movw	r1, #19520	; 0x4c40
   1d12c:	movt	r1, #5
   1d130:	mov	r0, #0
   1d134:	mov	r2, #5
   1d138:	bl	12298 <dcgettext@plt>
   1d13c:	mov	r1, r0
   1d140:	mov	r0, #1
   1d144:	bl	125bc <__printf_chk@plt>
   1d148:	ldr	r2, [sp, #44]	; 0x2c
   1d14c:	mov	r0, r9
   1d150:	ldr	r3, [r7]
   1d154:	cmp	r2, r3
   1d158:	bne	1ea24 <__assert_fail@plt+0xc24c>
   1d15c:	add	sp, sp, #52	; 0x34
   1d160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d164:	mov	r2, #0
   1d168:	mov	r3, r6
   1d16c:	add	r1, sp, #40	; 0x28
   1d170:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d174:	ldr	ip, [sp, #36]	; 0x24
   1d178:	mov	r3, r1
   1d17c:	ldr	r1, [sp, #40]	; 0x28
   1d180:	mov	r2, r0
   1d184:	mov	r0, #0
   1d188:	str	r0, [sp]
   1d18c:	movw	r0, #41908	; 0xa3b4
   1d190:	movt	r0, #5
   1d194:	add	r1, ip, r1
   1d198:	str	r1, [sp, #36]	; 0x24
   1d19c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d1a0:	movw	r1, #19312	; 0x4b70
   1d1a4:	movt	r1, #5
   1d1a8:	mov	r2, r0
   1d1ac:	mov	r0, #1
   1d1b0:	bl	125bc <__printf_chk@plt>
   1d1b4:	ldr	r3, [sp, #36]	; 0x24
   1d1b8:	cmp	r6, r3
   1d1bc:	bls	1cd10 <__assert_fail@plt+0xa538>
   1d1c0:	movw	r1, #19544	; 0x4c58
   1d1c4:	mov	r0, #1
   1d1c8:	movt	r1, #5
   1d1cc:	bl	125bc <__printf_chk@plt>
   1d1d0:	ldr	r3, [sp, #36]	; 0x24
   1d1d4:	b	1cd10 <__assert_fail@plt+0xa538>
   1d1d8:	mov	r2, #0
   1d1dc:	mov	r3, r6
   1d1e0:	add	r1, sp, #40	; 0x28
   1d1e4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d1e8:	ldr	ip, [sp, #36]	; 0x24
   1d1ec:	mov	r3, r1
   1d1f0:	ldr	r1, [sp, #40]	; 0x28
   1d1f4:	mov	r2, r0
   1d1f8:	mov	r0, #0
   1d1fc:	str	r0, [sp]
   1d200:	movw	r0, #41908	; 0xa3b4
   1d204:	movt	r0, #5
   1d208:	add	r1, ip, r1
   1d20c:	str	r1, [sp, #36]	; 0x24
   1d210:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d214:	movw	r1, #19284	; 0x4b54
   1d218:	movt	r1, #5
   1d21c:	mov	r2, r0
   1d220:	mov	r0, #1
   1d224:	bl	125bc <__printf_chk@plt>
   1d228:	ldr	r3, [sp, #36]	; 0x24
   1d22c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d230:	add	r3, r3, #5
   1d234:	cmp	r6, r3
   1d238:	bls	1e6ac <__assert_fail@plt+0xbed4>
   1d23c:	mov	r1, #4
   1d240:	movw	r3, #3472	; 0xd90
   1d244:	movt	r3, #7
   1d248:	ldr	r3, [r3]
   1d24c:	blx	r3
   1d250:	mov	r3, r1
   1d254:	ldr	r1, [sp, #36]	; 0x24
   1d258:	mov	r2, r0
   1d25c:	ldrd	r4, [sp, #96]	; 0x60
   1d260:	mov	ip, #0
   1d264:	movw	r0, #41908	; 0xa3b4
   1d268:	str	ip, [sp]
   1d26c:	adds	r2, r2, r4
   1d270:	movt	r0, #5
   1d274:	adc	r3, r3, r5
   1d278:	add	r1, r1, #4
   1d27c:	str	r1, [sp, #36]	; 0x24
   1d280:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d284:	movw	r1, #19252	; 0x4b34
   1d288:	movt	r1, #5
   1d28c:	mov	r2, r0
   1d290:	mov	r0, #1
   1d294:	bl	125bc <__printf_chk@plt>
   1d298:	ldr	r3, [sp, #36]	; 0x24
   1d29c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d2a0:	mov	r2, #0
   1d2a4:	mov	r3, r6
   1d2a8:	add	r1, sp, #40	; 0x28
   1d2ac:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d2b0:	ldr	r2, [sp, #36]	; 0x24
   1d2b4:	ldr	r3, [sp, #40]	; 0x28
   1d2b8:	add	r3, r2, r3
   1d2bc:	str	r3, [sp, #36]	; 0x24
   1d2c0:	orrs	r5, r0, r1
   1d2c4:	moveq	r2, r0
   1d2c8:	moveq	r3, r1
   1d2cc:	beq	1d2dc <__assert_fail@plt+0xab04>
   1d2d0:	ldrd	r2, [sp, #96]	; 0x60
   1d2d4:	adds	r2, r2, r0
   1d2d8:	adc	r3, r3, r1
   1d2dc:	mov	r1, #0
   1d2e0:	movw	r0, #41908	; 0xa3b4
   1d2e4:	str	r1, [sp]
   1d2e8:	movt	r0, #5
   1d2ec:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d2f0:	movw	r1, #19220	; 0x4b14
   1d2f4:	movt	r1, #5
   1d2f8:	mov	r2, r0
   1d2fc:	mov	r0, #1
   1d300:	bl	125bc <__printf_chk@plt>
   1d304:	ldr	r3, [sp, #36]	; 0x24
   1d308:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d30c:	movw	r1, #19464	; 0x4c08
   1d310:	mov	r0, #1
   1d314:	movt	r1, #5
   1d318:	bl	125bc <__printf_chk@plt>
   1d31c:	ldr	r3, [sp, #36]	; 0x24
   1d320:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d324:	mov	r2, #0
   1d328:	mov	r3, r6
   1d32c:	add	r1, sp, #40	; 0x28
   1d330:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d334:	ldr	r2, [sp, #36]	; 0x24
   1d338:	ldr	r3, [sp, #40]	; 0x28
   1d33c:	add	r3, r2, r3
   1d340:	str	r3, [sp, #36]	; 0x24
   1d344:	orrs	r4, r0, r1
   1d348:	moveq	r2, r0
   1d34c:	moveq	r3, r1
   1d350:	beq	1d360 <__assert_fail@plt+0xab88>
   1d354:	ldrd	r2, [sp, #96]	; 0x60
   1d358:	adds	r2, r2, r0
   1d35c:	adc	r3, r3, r1
   1d360:	mov	r1, #0
   1d364:	movw	r0, #41908	; 0xa3b4
   1d368:	str	r1, [sp]
   1d36c:	movt	r0, #5
   1d370:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d374:	movw	r1, #19192	; 0x4af8
   1d378:	movt	r1, #5
   1d37c:	mov	r2, r0
   1d380:	mov	r0, #1
   1d384:	bl	125bc <__printf_chk@plt>
   1d388:	ldr	r3, [sp, #36]	; 0x24
   1d38c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d390:	add	r3, r3, #2
   1d394:	cmp	r6, r3
   1d398:	bhi	1e6d4 <__assert_fail@plt+0xbefc>
   1d39c:	cmp	r6, r0
   1d3a0:	bls	1d3b4 <__assert_fail@plt+0xabdc>
   1d3a4:	rsb	r1, r0, r6
   1d3a8:	sub	r3, r1, #1
   1d3ac:	cmp	r3, #7
   1d3b0:	bls	1e6d8 <__assert_fail@plt+0xbf00>
   1d3b4:	mov	r3, r0
   1d3b8:	mov	r2, #0
   1d3bc:	b	1e6f0 <__assert_fail@plt+0xbf18>
   1d3c0:	mov	r2, #0
   1d3c4:	mov	r3, r6
   1d3c8:	add	r1, sp, #40	; 0x28
   1d3cc:	mov	r4, r2
   1d3d0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d3d4:	ldr	ip, [sp, #36]	; 0x24
   1d3d8:	ldr	r3, [sp, #40]	; 0x28
   1d3dc:	str	r4, [sp]
   1d3e0:	add	r3, ip, r3
   1d3e4:	str	r3, [sp, #36]	; 0x24
   1d3e8:	mov	r2, r0
   1d3ec:	mov	r3, r1
   1d3f0:	mov	r5, r0
   1d3f4:	movw	r0, #53816	; 0xd238
   1d3f8:	movt	r0, #5
   1d3fc:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d400:	mov	r1, #1
   1d404:	mov	r2, r0
   1d408:	mov	r0, r5
   1d40c:	str	r2, [sp, #28]
   1d410:	bl	1bc48 <__assert_fail@plt+0x9470>
   1d414:	ldr	r2, [sp, #28]
   1d418:	movw	r1, #19132	; 0x4abc
   1d41c:	movt	r1, #5
   1d420:	mov	r3, r0
   1d424:	mov	r0, #1
   1d428:	bl	125bc <__printf_chk@plt>
   1d42c:	mov	r2, r4
   1d430:	mov	r3, r6
   1d434:	add	r1, sp, #40	; 0x28
   1d438:	ldr	r0, [sp, #36]	; 0x24
   1d43c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d440:	ldr	r2, [sp, #36]	; 0x24
   1d444:	ldr	r3, [sp, #40]	; 0x28
   1d448:	str	r4, [sp]
   1d44c:	add	r3, r2, r3
   1d450:	str	r3, [sp, #36]	; 0x24
   1d454:	ldrd	r2, [sp, #96]	; 0x60
   1d458:	adds	r2, r2, r0
   1d45c:	movw	r0, #41908	; 0xa3b4
   1d460:	adc	r3, r3, r1
   1d464:	movt	r0, #5
   1d468:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d46c:	movw	r1, #18660	; 0x48e4
   1d470:	movt	r1, #5
   1d474:	mov	r2, r0
   1d478:	mov	r0, #1
   1d47c:	bl	125bc <__printf_chk@plt>
   1d480:	ldr	r3, [sp, #36]	; 0x24
   1d484:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d488:	mov	r2, #0
   1d48c:	mov	r3, r6
   1d490:	add	r1, sp, #40	; 0x28
   1d494:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d498:	ldr	r2, [sp, #36]	; 0x24
   1d49c:	ldr	r3, [sp, #40]	; 0x28
   1d4a0:	mov	ip, #0
   1d4a4:	str	ip, [sp]
   1d4a8:	add	r3, r2, r3
   1d4ac:	str	r3, [sp, #36]	; 0x24
   1d4b0:	ldrd	r2, [sp, #96]	; 0x60
   1d4b4:	adds	r2, r2, r0
   1d4b8:	movw	r0, #41908	; 0xa3b4
   1d4bc:	adc	r3, r3, r1
   1d4c0:	movt	r0, #5
   1d4c4:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d4c8:	movw	r1, #19100	; 0x4a9c
   1d4cc:	movt	r1, #5
   1d4d0:	mov	r2, r0
   1d4d4:	mov	r0, #1
   1d4d8:	bl	125bc <__printf_chk@plt>
   1d4dc:	ldr	r0, [sp, #36]	; 0x24
   1d4e0:	add	ip, r0, #1
   1d4e4:	cmp	r6, ip
   1d4e8:	bhi	1e730 <__assert_fail@plt+0xbf58>
   1d4ec:	cmp	r6, r0
   1d4f0:	bls	1d504 <__assert_fail@plt+0xad2c>
   1d4f4:	rsb	r1, r0, r6
   1d4f8:	sub	r3, r1, #1
   1d4fc:	cmp	r3, #7
   1d500:	bls	1e734 <__assert_fail@plt+0xbf5c>
   1d504:	mov	r2, #0
   1d508:	mov	r3, #0
   1d50c:	b	1e754 <__assert_fail@plt+0xbf7c>
   1d510:	mov	r2, #0
   1d514:	mov	r3, r6
   1d518:	add	r1, sp, #40	; 0x28
   1d51c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d520:	ldr	r2, [sp, #36]	; 0x24
   1d524:	ldr	r3, [sp, #40]	; 0x28
   1d528:	add	r3, r2, r3
   1d52c:	str	r3, [sp, #36]	; 0x24
   1d530:	rsb	r3, r3, r6
   1d534:	mov	r2, r3
   1d538:	asr	r3, r3, #31
   1d53c:	mov	r4, r0
   1d540:	mov	r5, r1
   1d544:	cmp	r5, r3
   1d548:	cmpeq	r4, r2
   1d54c:	movw	r1, #19072	; 0x4a80
   1d550:	mov	r0, #1
   1d554:	movt	r1, #5
   1d558:	movhi	r4, r2
   1d55c:	movhi	r5, r3
   1d560:	bl	125bc <__printf_chk@plt>
   1d564:	ldrd	r2, [sp, #96]	; 0x60
   1d568:	strd	r4, [sp]
   1d56c:	mov	r1, r8
   1d570:	ldr	r0, [sp, #36]	; 0x24
   1d574:	strd	r2, [sp, #8]
   1d578:	mov	r2, sl
   1d57c:	ldr	r3, [sp, #32]
   1d580:	str	r3, [sp, #16]
   1d584:	mov	r3, fp
   1d588:	bl	1cccc <__assert_fail@plt+0xa4f4>
   1d58c:	movw	r3, #976	; 0x3d0
   1d590:	movt	r3, #7
   1d594:	ldr	r1, [r3]
   1d598:	cmp	r0, #0
   1d59c:	mov	r0, #41	; 0x29
   1d5a0:	movne	r9, #1
   1d5a4:	bl	12334 <_IO_putc@plt>
   1d5a8:	ldr	r3, [sp, #36]	; 0x24
   1d5ac:	add	r4, r3, r4
   1d5b0:	cmp	r6, r4
   1d5b4:	strcc	r6, [sp, #36]	; 0x24
   1d5b8:	movcc	r3, r6
   1d5bc:	bcc	1cd10 <__assert_fail@plt+0xa538>
   1d5c0:	mov	r3, r4
   1d5c4:	str	r4, [sp, #36]	; 0x24
   1d5c8:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d5cc:	cmn	fp, #1
   1d5d0:	beq	1ea04 <__assert_fail@plt+0xc22c>
   1d5d4:	cmp	fp, #2
   1d5d8:	beq	1e874 <__assert_fail@plt+0xc09c>
   1d5dc:	cmp	sl, #8
   1d5e0:	movls	r1, sl
   1d5e4:	bhi	1e7e0 <__assert_fail@plt+0xc008>
   1d5e8:	add	r3, r0, r1
   1d5ec:	cmp	r6, r3
   1d5f0:	bls	1e770 <__assert_fail@plt+0xbf98>
   1d5f4:	sub	r3, r1, #1
   1d5f8:	cmp	r3, #7
   1d5fc:	bls	1e96c <__assert_fail@plt+0xc194>
   1d600:	mov	r2, #0
   1d604:	mov	r3, #0
   1d608:	add	r0, r0, sl
   1d60c:	str	r0, [sp, #36]	; 0x24
   1d610:	mov	r4, #0
   1d614:	movw	r0, #41908	; 0xa3b4
   1d618:	str	r4, [sp]
   1d61c:	movt	r0, #5
   1d620:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d624:	mov	r2, #1
   1d628:	mov	r3, r6
   1d62c:	add	r1, sp, #40	; 0x28
   1d630:	mov	r5, r0
   1d634:	ldr	r0, [sp, #36]	; 0x24
   1d638:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d63c:	str	r4, [sp]
   1d640:	mov	r2, r0
   1d644:	mov	r3, r1
   1d648:	movw	r0, #11836	; 0x2e3c
   1d64c:	movt	r0, #5
   1d650:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d654:	mov	r2, r5
   1d658:	movw	r1, #19032	; 0x4a58
   1d65c:	movt	r1, #5
   1d660:	mov	r3, r0
   1d664:	mov	r0, #1
   1d668:	bl	125bc <__printf_chk@plt>
   1d66c:	ldr	r2, [sp, #36]	; 0x24
   1d670:	ldr	r3, [sp, #40]	; 0x28
   1d674:	add	r3, r2, r3
   1d678:	str	r3, [sp, #36]	; 0x24
   1d67c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d680:	cmp	r6, r0
   1d684:	ldr	r5, [sp, #32]
   1d688:	addhi	r2, r3, #2
   1d68c:	strhi	r2, [sp, #36]	; 0x24
   1d690:	ldrbhi	ip, [r3, #1]
   1d694:	movls	ip, #0
   1d698:	add	r3, r5, #16
   1d69c:	add	r2, r5, #12
   1d6a0:	str	r6, [sp]
   1d6a4:	add	r0, sp, #36	; 0x24
   1d6a8:	mov	r1, ip
   1d6ac:	str	ip, [sp, #28]
   1d6b0:	bl	1c3d8 <__assert_fail@plt+0x9c00>
   1d6b4:	ldr	ip, [sp, #28]
   1d6b8:	mov	r2, ip
   1d6bc:	mov	r4, r0
   1d6c0:	mov	r5, r1
   1d6c4:	mov	r0, #1
   1d6c8:	movw	r1, #18948	; 0x4a04
   1d6cc:	movt	r1, #5
   1d6d0:	bl	125bc <__printf_chk@plt>
   1d6d4:	mov	r0, r4
   1d6d8:	mov	r1, r5
   1d6dc:	mov	r2, r8
   1d6e0:	bl	1adb8 <__assert_fail@plt+0x85e0>
   1d6e4:	ldr	r3, [sp, #36]	; 0x24
   1d6e8:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d6ec:	movw	r1, #19404	; 0x4bcc
   1d6f0:	mov	r0, #1
   1d6f4:	movt	r1, #5
   1d6f8:	bl	125bc <__printf_chk@plt>
   1d6fc:	ldr	r3, [sp, #36]	; 0x24
   1d700:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d704:	movw	r1, #19384	; 0x4bb8
   1d708:	mov	r0, #1
   1d70c:	movt	r1, #5
   1d710:	bl	125bc <__printf_chk@plt>
   1d714:	ldr	r3, [sp, #36]	; 0x24
   1d718:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d71c:	movw	r1, #19364	; 0x4ba4
   1d720:	mov	r0, #1
   1d724:	movt	r1, #5
   1d728:	bl	125bc <__printf_chk@plt>
   1d72c:	ldr	r3, [sp, #36]	; 0x24
   1d730:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d734:	movw	r1, #19344	; 0x4b90
   1d738:	mov	r0, #1
   1d73c:	movt	r1, #5
   1d740:	bl	125bc <__printf_chk@plt>
   1d744:	ldr	r3, [sp, #36]	; 0x24
   1d748:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d74c:	movw	r1, #19448	; 0x4bf8
   1d750:	mov	r0, #1
   1d754:	movt	r1, #5
   1d758:	bl	125bc <__printf_chk@plt>
   1d75c:	ldr	r3, [sp, #36]	; 0x24
   1d760:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d764:	movw	r1, #19424	; 0x4be0
   1d768:	mov	r0, #1
   1d76c:	movt	r1, #5
   1d770:	bl	125bc <__printf_chk@plt>
   1d774:	ldr	r3, [sp, #36]	; 0x24
   1d778:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d77c:	movw	r1, #18928	; 0x49f0
   1d780:	mov	r0, #1
   1d784:	movt	r1, #5
   1d788:	bl	125bc <__printf_chk@plt>
   1d78c:	ldr	r3, [sp, #36]	; 0x24
   1d790:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d794:	mov	r2, #5
   1d798:	movw	r1, #18880	; 0x49c0
   1d79c:	mov	r0, #0
   1d7a0:	movt	r1, #5
   1d7a4:	bl	12298 <dcgettext@plt>
   1d7a8:	mov	r1, r0
   1d7ac:	mov	r0, #1
   1d7b0:	bl	125bc <__printf_chk@plt>
   1d7b4:	ldr	r3, [sp, #36]	; 0x24
   1d7b8:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d7bc:	movw	r1, #18836	; 0x4994
   1d7c0:	mov	r0, #1
   1d7c4:	movt	r1, #5
   1d7c8:	bl	125bc <__printf_chk@plt>
   1d7cc:	ldr	r3, [sp, #36]	; 0x24
   1d7d0:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d7d4:	movw	r1, #18856	; 0x49a8
   1d7d8:	mov	r0, #1
   1d7dc:	movt	r1, #5
   1d7e0:	bl	125bc <__printf_chk@plt>
   1d7e4:	mov	r2, #0
   1d7e8:	mov	r3, r6
   1d7ec:	ldr	r0, [sp, #36]	; 0x24
   1d7f0:	add	r1, sp, #40	; 0x28
   1d7f4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d7f8:	str	r6, [sp]
   1d7fc:	mov	r3, r1
   1d800:	mov	r2, r0
   1d804:	ldr	r1, [sp, #40]	; 0x28
   1d808:	ldr	r0, [sp, #36]	; 0x24
   1d80c:	add	r0, r0, r1
   1d810:	str	r0, [sp, #36]	; 0x24
   1d814:	bl	1c0b4 <__assert_fail@plt+0x98dc>
   1d818:	mov	r3, r0
   1d81c:	str	r0, [sp, #36]	; 0x24
   1d820:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d824:	movw	r1, #18792	; 0x4968
   1d828:	mov	r0, #1
   1d82c:	movt	r1, #5
   1d830:	bl	125bc <__printf_chk@plt>
   1d834:	mov	r0, #0
   1d838:	mov	r2, #5
   1d83c:	movw	r1, #18812	; 0x497c
   1d840:	movt	r1, #5
   1d844:	mov	r4, r0
   1d848:	bl	12298 <dcgettext@plt>
   1d84c:	mov	r2, r4
   1d850:	mov	r3, r6
   1d854:	add	r1, sp, #40	; 0x28
   1d858:	mov	r5, r0
   1d85c:	ldr	r0, [sp, #36]	; 0x24
   1d860:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d864:	str	r4, [sp]
   1d868:	mov	r3, r1
   1d86c:	mov	r2, r0
   1d870:	movw	r0, #53816	; 0xd238
   1d874:	movt	r0, #5
   1d878:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d87c:	mov	r1, r5
   1d880:	mov	r2, r0
   1d884:	mov	r0, #1
   1d888:	bl	125bc <__printf_chk@plt>
   1d88c:	ldr	ip, [sp, #36]	; 0x24
   1d890:	ldr	r3, [sp, #40]	; 0x28
   1d894:	mov	r2, #5
   1d898:	mov	r0, r4
   1d89c:	movw	r1, #18824	; 0x4988
   1d8a0:	movt	r1, #5
   1d8a4:	add	r3, ip, r3
   1d8a8:	str	r3, [sp, #36]	; 0x24
   1d8ac:	bl	12298 <dcgettext@plt>
   1d8b0:	mov	r2, r4
   1d8b4:	mov	r3, r6
   1d8b8:	add	r1, sp, #40	; 0x28
   1d8bc:	mov	r5, r0
   1d8c0:	ldr	r0, [sp, #36]	; 0x24
   1d8c4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1d8c8:	str	r4, [sp]
   1d8cc:	mov	r2, r0
   1d8d0:	mov	r3, r1
   1d8d4:	movw	r0, #53816	; 0xd238
   1d8d8:	movt	r0, #5
   1d8dc:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d8e0:	mov	r1, r5
   1d8e4:	mov	r2, r0
   1d8e8:	mov	r0, #1
   1d8ec:	bl	125bc <__printf_chk@plt>
   1d8f0:	ldr	r2, [sp, #36]	; 0x24
   1d8f4:	ldr	r3, [sp, #40]	; 0x28
   1d8f8:	add	r3, r2, r3
   1d8fc:	str	r3, [sp, #36]	; 0x24
   1d900:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d904:	movw	r1, #18768	; 0x4950
   1d908:	mov	r0, #1
   1d90c:	movt	r1, #5
   1d910:	bl	125bc <__printf_chk@plt>
   1d914:	ldr	r3, [sp, #36]	; 0x24
   1d918:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d91c:	movw	r1, #18744	; 0x4938
   1d920:	mov	r0, #1
   1d924:	movt	r1, #5
   1d928:	bl	125bc <__printf_chk@plt>
   1d92c:	ldr	r3, [sp, #36]	; 0x24
   1d930:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d934:	cmn	fp, #1
   1d938:	beq	1ea14 <__assert_fail@plt+0xc23c>
   1d93c:	cmp	fp, #2
   1d940:	beq	1e8a8 <__assert_fail@plt+0xc0d0>
   1d944:	cmp	sl, #8
   1d948:	movls	r1, sl
   1d94c:	bhi	1e7b4 <__assert_fail@plt+0xbfdc>
   1d950:	add	r3, r0, r1
   1d954:	cmp	r6, r3
   1d958:	bls	1e780 <__assert_fail@plt+0xbfa8>
   1d95c:	sub	r3, r1, #1
   1d960:	cmp	r3, #7
   1d964:	bls	1e98c <__assert_fail@plt+0xc1b4>
   1d968:	mov	r2, #0
   1d96c:	mov	r3, #0
   1d970:	add	r0, r0, sl
   1d974:	str	r0, [sp, #36]	; 0x24
   1d978:	mov	r1, #0
   1d97c:	movw	r0, #41908	; 0xa3b4
   1d980:	str	r1, [sp]
   1d984:	movt	r0, #5
   1d988:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d98c:	movw	r1, #18720	; 0x4920
   1d990:	movt	r1, #5
   1d994:	mov	r2, r0
   1d998:	mov	r0, #1
   1d99c:	bl	125bc <__printf_chk@plt>
   1d9a0:	ldr	r3, [sp, #36]	; 0x24
   1d9a4:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1d9a8:	add	r3, r3, #5
   1d9ac:	cmp	r6, r3
   1d9b0:	bls	1e68c <__assert_fail@plt+0xbeb4>
   1d9b4:	mov	r1, #4
   1d9b8:	bl	4a0f0 <warn@@Base+0x4f8>
   1d9bc:	mov	r3, r1
   1d9c0:	ldr	r1, [sp, #36]	; 0x24
   1d9c4:	mov	r2, r0
   1d9c8:	ldrd	r4, [sp, #96]	; 0x60
   1d9cc:	mov	ip, #0
   1d9d0:	movw	r0, #41908	; 0xa3b4
   1d9d4:	str	ip, [sp]
   1d9d8:	adds	r2, r2, r4
   1d9dc:	movt	r0, #5
   1d9e0:	adc	r3, r3, r5
   1d9e4:	add	r1, r1, #4
   1d9e8:	str	r1, [sp, #36]	; 0x24
   1d9ec:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1d9f0:	movw	r1, #18668	; 0x48ec
   1d9f4:	movt	r1, #5
   1d9f8:	mov	r2, r0
   1d9fc:	mov	r0, #1
   1da00:	bl	125bc <__printf_chk@plt>
   1da04:	ldr	r3, [sp, #36]	; 0x24
   1da08:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1da0c:	add	r3, r3, #3
   1da10:	cmp	r6, r3
   1da14:	bls	1e66c <__assert_fail@plt+0xbe94>
   1da18:	mov	r1, #2
   1da1c:	bl	4a0f0 <warn@@Base+0x4f8>
   1da20:	mov	r3, r1
   1da24:	ldr	r1, [sp, #36]	; 0x24
   1da28:	mov	r2, r0
   1da2c:	ldrd	r4, [sp, #96]	; 0x60
   1da30:	mov	ip, #0
   1da34:	movw	r0, #41908	; 0xa3b4
   1da38:	str	ip, [sp]
   1da3c:	adds	r2, r2, r4
   1da40:	movt	r0, #5
   1da44:	adc	r3, r3, r5
   1da48:	add	r1, r1, #2
   1da4c:	str	r1, [sp, #36]	; 0x24
   1da50:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1da54:	movw	r1, #18648	; 0x48d8
   1da58:	movt	r1, #5
   1da5c:	mov	r2, r0
   1da60:	mov	r0, #1
   1da64:	bl	125bc <__printf_chk@plt>
   1da68:	ldr	r3, [sp, #36]	; 0x24
   1da6c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1da70:	movw	r1, #18620	; 0x48bc
   1da74:	mov	r0, #1
   1da78:	movt	r1, #5
   1da7c:	bl	125bc <__printf_chk@plt>
   1da80:	ldr	r3, [sp, #36]	; 0x24
   1da84:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1da88:	movw	r1, #18608	; 0x48b0
   1da8c:	mov	r0, #1
   1da90:	movt	r1, #5
   1da94:	bl	125bc <__printf_chk@plt>
   1da98:	ldr	r3, [sp, #36]	; 0x24
   1da9c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1daa0:	add	r3, r3, #2
   1daa4:	cmp	r6, r3
   1daa8:	bhi	1e630 <__assert_fail@plt+0xbe58>
   1daac:	cmp	r6, r0
   1dab0:	bls	1dac4 <__assert_fail@plt+0xb2ec>
   1dab4:	rsb	r1, r0, r6
   1dab8:	sub	r3, r1, #1
   1dabc:	cmp	r3, #7
   1dac0:	bls	1e634 <__assert_fail@plt+0xbe5c>
   1dac4:	mov	r3, r0
   1dac8:	mov	r2, #0
   1dacc:	b	1e64c <__assert_fail@plt+0xbe74>
   1dad0:	add	r3, r3, #2
   1dad4:	cmp	r6, r3
   1dad8:	bhi	1e5f4 <__assert_fail@plt+0xbe1c>
   1dadc:	cmp	r6, r0
   1dae0:	bls	1daf4 <__assert_fail@plt+0xb31c>
   1dae4:	rsb	r1, r0, r6
   1dae8:	sub	r3, r1, #1
   1daec:	cmp	r3, #7
   1daf0:	bls	1e5f8 <__assert_fail@plt+0xbe20>
   1daf4:	mov	r3, r0
   1daf8:	mov	r2, #0
   1dafc:	b	1e610 <__assert_fail@plt+0xbe38>
   1db00:	mov	r2, #0
   1db04:	mov	r3, r6
   1db08:	add	r1, sp, #40	; 0x28
   1db0c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1db10:	mov	r2, r0
   1db14:	mov	r3, r1
   1db18:	movw	r0, #53816	; 0xd238
   1db1c:	mov	r1, #0
   1db20:	movt	r0, #5
   1db24:	str	r1, [sp]
   1db28:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1db2c:	movw	r1, #18544	; 0x4870
   1db30:	movt	r1, #5
   1db34:	mov	r2, r0
   1db38:	mov	r0, #1
   1db3c:	b	1d8ec <__assert_fail@plt+0xb114>
   1db40:	mov	r2, #0
   1db44:	mov	r3, r6
   1db48:	add	r1, sp, #40	; 0x28
   1db4c:	mov	r4, r2
   1db50:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1db54:	ldr	ip, [sp, #36]	; 0x24
   1db58:	ldr	r3, [sp, #40]	; 0x28
   1db5c:	str	r4, [sp]
   1db60:	add	r3, ip, r3
   1db64:	str	r3, [sp, #36]	; 0x24
   1db68:	mov	r2, r0
   1db6c:	mov	r3, r1
   1db70:	mov	r5, r0
   1db74:	movw	r0, #53816	; 0xd238
   1db78:	movt	r0, #5
   1db7c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1db80:	mov	r1, #1
   1db84:	mov	ip, r0
   1db88:	mov	r0, r5
   1db8c:	str	ip, [sp, #28]
   1db90:	bl	1bc48 <__assert_fail@plt+0x9470>
   1db94:	mov	r2, #1
   1db98:	mov	r3, r6
   1db9c:	add	r1, sp, #40	; 0x28
   1dba0:	mov	r5, r0
   1dba4:	ldr	r0, [sp, #36]	; 0x24
   1dba8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1dbac:	str	r4, [sp]
   1dbb0:	mov	r2, r0
   1dbb4:	mov	r3, r1
   1dbb8:	movw	r0, #11836	; 0x2e3c
   1dbbc:	movt	r0, #5
   1dbc0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1dbc4:	ldr	ip, [sp, #28]
   1dbc8:	movw	r1, #18520	; 0x4858
   1dbcc:	movt	r1, #5
   1dbd0:	mov	r3, r5
   1dbd4:	mov	r2, ip
   1dbd8:	str	r0, [sp]
   1dbdc:	mov	r0, #1
   1dbe0:	bl	125bc <__printf_chk@plt>
   1dbe4:	ldr	r2, [sp, #36]	; 0x24
   1dbe8:	ldr	r3, [sp, #40]	; 0x28
   1dbec:	add	r3, r2, r3
   1dbf0:	str	r3, [sp, #36]	; 0x24
   1dbf4:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dbf8:	mov	r2, #1
   1dbfc:	mov	r3, r6
   1dc00:	add	r1, sp, #40	; 0x28
   1dc04:	mov	r9, #1
   1dc08:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1dc0c:	mov	r2, r0
   1dc10:	mov	r3, r1
   1dc14:	movw	r0, #11836	; 0x2e3c
   1dc18:	mov	r1, #0
   1dc1c:	movt	r0, #5
   1dc20:	str	r1, [sp]
   1dc24:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1dc28:	movw	r1, #18504	; 0x4848
   1dc2c:	movt	r1, #5
   1dc30:	mov	r2, r0
   1dc34:	mov	r0, r9
   1dc38:	b	1d8ec <__assert_fail@plt+0xb114>
   1dc3c:	mov	r2, #0
   1dc40:	mov	r3, r6
   1dc44:	add	r1, sp, #40	; 0x28
   1dc48:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1dc4c:	ldr	ip, [sp, #36]	; 0x24
   1dc50:	ldr	r3, [sp, #40]	; 0x28
   1dc54:	add	r3, ip, r3
   1dc58:	str	r3, [sp, #36]	; 0x24
   1dc5c:	mov	r2, r0
   1dc60:	mov	r3, r1
   1dc64:	mov	r4, r0
   1dc68:	mov	r0, #0
   1dc6c:	str	r0, [sp]
   1dc70:	movw	r0, #53816	; 0xd238
   1dc74:	movt	r0, #5
   1dc78:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1dc7c:	mov	r1, #1
   1dc80:	mov	r5, r0
   1dc84:	mov	r0, r4
   1dc88:	bl	1bc48 <__assert_fail@plt+0x9470>
   1dc8c:	mov	r2, r5
   1dc90:	movw	r1, #18484	; 0x4834
   1dc94:	movt	r1, #5
   1dc98:	mov	r3, r0
   1dc9c:	mov	r0, #1
   1dca0:	bl	125bc <__printf_chk@plt>
   1dca4:	ldr	r3, [sp, #36]	; 0x24
   1dca8:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dcac:	sub	r4, r2, #112	; 0x70
   1dcb0:	mov	r1, #1
   1dcb4:	mov	r0, r4
   1dcb8:	bl	1bc48 <__assert_fail@plt+0x9470>
   1dcbc:	mov	r2, #1
   1dcc0:	mov	r3, r6
   1dcc4:	add	r1, sp, #40	; 0x28
   1dcc8:	mov	r5, r0
   1dccc:	ldr	r0, [sp, #36]	; 0x24
   1dcd0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1dcd4:	mov	r2, r0
   1dcd8:	mov	r3, r1
   1dcdc:	movw	r0, #11836	; 0x2e3c
   1dce0:	mov	r1, #0
   1dce4:	movt	r0, #5
   1dce8:	str	r1, [sp]
   1dcec:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1dcf0:	movw	r1, #18460	; 0x481c
   1dcf4:	mov	r2, r4
   1dcf8:	mov	r3, r5
   1dcfc:	movt	r1, #5
   1dd00:	b	1dbd8 <__assert_fail@plt+0xb400>
   1dd04:	sub	r4, r2, #80	; 0x50
   1dd08:	mov	r1, #1
   1dd0c:	mov	r0, r4
   1dd10:	bl	1bc48 <__assert_fail@plt+0x9470>
   1dd14:	mov	r2, r4
   1dd18:	movw	r1, #18440	; 0x4808
   1dd1c:	movt	r1, #5
   1dd20:	mov	r3, r0
   1dd24:	mov	r0, #1
   1dd28:	bl	125bc <__printf_chk@plt>
   1dd2c:	ldr	r3, [sp, #36]	; 0x24
   1dd30:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dd34:	sub	r2, r2, #48	; 0x30
   1dd38:	movw	r1, #18428	; 0x47fc
   1dd3c:	mov	r0, #1
   1dd40:	movt	r1, #5
   1dd44:	bl	125bc <__printf_chk@plt>
   1dd48:	ldr	r3, [sp, #36]	; 0x24
   1dd4c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dd50:	add	r3, r3, #3
   1dd54:	cmp	r6, r3
   1dd58:	bls	1e5d0 <__assert_fail@plt+0xbdf8>
   1dd5c:	mov	r1, #2
   1dd60:	bl	4a0f0 <warn@@Base+0x4f8>
   1dd64:	ldr	r3, [sp, #36]	; 0x24
   1dd68:	mov	r2, r0
   1dd6c:	movw	r1, #18412	; 0x47ec
   1dd70:	mov	r0, #1
   1dd74:	movt	r1, #5
   1dd78:	add	r3, r3, #2
   1dd7c:	str	r3, [sp, #36]	; 0x24
   1dd80:	bl	125bc <__printf_chk@plt>
   1dd84:	ldr	r3, [sp, #36]	; 0x24
   1dd88:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dd8c:	movw	r1, #18400	; 0x47e0
   1dd90:	mov	r0, #1
   1dd94:	movt	r1, #5
   1dd98:	bl	125bc <__printf_chk@plt>
   1dd9c:	ldr	r3, [sp, #36]	; 0x24
   1dda0:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dda4:	movw	r1, #18388	; 0x47d4
   1dda8:	mov	r0, #1
   1ddac:	movt	r1, #5
   1ddb0:	bl	125bc <__printf_chk@plt>
   1ddb4:	ldr	r3, [sp, #36]	; 0x24
   1ddb8:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1ddbc:	movw	r1, #18376	; 0x47c8
   1ddc0:	mov	r0, #1
   1ddc4:	movt	r1, #5
   1ddc8:	bl	125bc <__printf_chk@plt>
   1ddcc:	ldr	r3, [sp, #36]	; 0x24
   1ddd0:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1ddd4:	movw	r1, #18364	; 0x47bc
   1ddd8:	mov	r0, #1
   1dddc:	movt	r1, #5
   1dde0:	bl	125bc <__printf_chk@plt>
   1dde4:	ldr	r3, [sp, #36]	; 0x24
   1dde8:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1ddec:	movw	r1, #18352	; 0x47b0
   1ddf0:	mov	r0, #1
   1ddf4:	movt	r1, #5
   1ddf8:	bl	125bc <__printf_chk@plt>
   1ddfc:	ldr	r3, [sp, #36]	; 0x24
   1de00:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1de04:	movw	r1, #18340	; 0x47a4
   1de08:	mov	r0, #1
   1de0c:	movt	r1, #5
   1de10:	bl	125bc <__printf_chk@plt>
   1de14:	ldr	r3, [sp, #36]	; 0x24
   1de18:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1de1c:	add	r3, r3, #3
   1de20:	cmp	r6, r3
   1de24:	bls	1e5ac <__assert_fail@plt+0xbdd4>
   1de28:	mov	r1, #2
   1de2c:	bl	4a0f0 <warn@@Base+0x4f8>
   1de30:	ldr	r3, [sp, #36]	; 0x24
   1de34:	mov	r2, r0
   1de38:	movw	r1, #18324	; 0x4794
   1de3c:	mov	r0, #1
   1de40:	movt	r1, #5
   1de44:	add	r3, r3, #2
   1de48:	str	r3, [sp, #36]	; 0x24
   1de4c:	bl	125bc <__printf_chk@plt>
   1de50:	ldr	r3, [sp, #36]	; 0x24
   1de54:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1de58:	movw	r1, #18312	; 0x4788
   1de5c:	mov	r0, #1
   1de60:	movt	r1, #5
   1de64:	bl	125bc <__printf_chk@plt>
   1de68:	ldr	r3, [sp, #36]	; 0x24
   1de6c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1de70:	movw	r1, #18300	; 0x477c
   1de74:	mov	r0, #1
   1de78:	movt	r1, #5
   1de7c:	bl	125bc <__printf_chk@plt>
   1de80:	ldr	r3, [sp, #36]	; 0x24
   1de84:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1de88:	movw	r1, #18288	; 0x4770
   1de8c:	mov	r0, #1
   1de90:	movt	r1, #5
   1de94:	bl	125bc <__printf_chk@plt>
   1de98:	ldr	r3, [sp, #36]	; 0x24
   1de9c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dea0:	movw	r1, #18276	; 0x4764
   1dea4:	mov	r0, #1
   1dea8:	movt	r1, #5
   1deac:	bl	125bc <__printf_chk@plt>
   1deb0:	ldr	r3, [sp, #36]	; 0x24
   1deb4:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1deb8:	mov	r2, #0
   1debc:	mov	r3, r6
   1dec0:	add	r1, sp, #40	; 0x28
   1dec4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1dec8:	mov	r2, r0
   1decc:	mov	r3, r1
   1ded0:	movw	r0, #53816	; 0xd238
   1ded4:	mov	r1, #0
   1ded8:	movt	r0, #5
   1dedc:	str	r1, [sp]
   1dee0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1dee4:	movw	r1, #18252	; 0x474c
   1dee8:	movt	r1, #5
   1deec:	mov	r2, r0
   1def0:	mov	r0, #1
   1def4:	b	1d8ec <__assert_fail@plt+0xb114>
   1def8:	movw	r1, #18240	; 0x4740
   1defc:	mov	r0, #1
   1df00:	movt	r1, #5
   1df04:	bl	125bc <__printf_chk@plt>
   1df08:	ldr	r3, [sp, #36]	; 0x24
   1df0c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1df10:	movw	r1, #18228	; 0x4734
   1df14:	mov	r0, #1
   1df18:	movt	r1, #5
   1df1c:	bl	125bc <__printf_chk@plt>
   1df20:	ldr	r3, [sp, #36]	; 0x24
   1df24:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1df28:	movw	r1, #18216	; 0x4728
   1df2c:	mov	r0, #1
   1df30:	movt	r1, #5
   1df34:	bl	125bc <__printf_chk@plt>
   1df38:	ldr	r3, [sp, #36]	; 0x24
   1df3c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1df40:	movw	r1, #18204	; 0x471c
   1df44:	mov	r0, #1
   1df48:	movt	r1, #5
   1df4c:	bl	125bc <__printf_chk@plt>
   1df50:	ldr	r3, [sp, #36]	; 0x24
   1df54:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1df58:	movw	r1, #18192	; 0x4710
   1df5c:	mov	r0, #1
   1df60:	movt	r1, #5
   1df64:	bl	125bc <__printf_chk@plt>
   1df68:	ldr	r3, [sp, #36]	; 0x24
   1df6c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1df70:	movw	r1, #18180	; 0x4704
   1df74:	mov	r0, #1
   1df78:	movt	r1, #5
   1df7c:	bl	125bc <__printf_chk@plt>
   1df80:	ldr	r3, [sp, #36]	; 0x24
   1df84:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1df88:	movw	r1, #18168	; 0x46f8
   1df8c:	mov	r0, #1
   1df90:	movt	r1, #5
   1df94:	bl	125bc <__printf_chk@plt>
   1df98:	ldr	r3, [sp, #36]	; 0x24
   1df9c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dfa0:	movw	r1, #18156	; 0x46ec
   1dfa4:	mov	r0, #1
   1dfa8:	movt	r1, #5
   1dfac:	bl	125bc <__printf_chk@plt>
   1dfb0:	ldr	r3, [sp, #36]	; 0x24
   1dfb4:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dfb8:	movw	r1, #18144	; 0x46e0
   1dfbc:	mov	r0, #1
   1dfc0:	movt	r1, #5
   1dfc4:	bl	125bc <__printf_chk@plt>
   1dfc8:	ldr	r3, [sp, #36]	; 0x24
   1dfcc:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dfd0:	movw	r1, #18132	; 0x46d4
   1dfd4:	mov	r0, #1
   1dfd8:	movt	r1, #5
   1dfdc:	bl	125bc <__printf_chk@plt>
   1dfe0:	ldr	r3, [sp, #36]	; 0x24
   1dfe4:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1dfe8:	movw	r1, #18116	; 0x46c4
   1dfec:	mov	r0, #1
   1dff0:	movt	r1, #5
   1dff4:	bl	125bc <__printf_chk@plt>
   1dff8:	ldr	r3, [sp, #36]	; 0x24
   1dffc:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e000:	movw	r1, #18104	; 0x46b8
   1e004:	mov	r0, #1
   1e008:	movt	r1, #5
   1e00c:	bl	125bc <__printf_chk@plt>
   1e010:	ldr	r3, [sp, #36]	; 0x24
   1e014:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e018:	movw	r1, #18092	; 0x46ac
   1e01c:	mov	r0, #1
   1e020:	movt	r1, #5
   1e024:	bl	125bc <__printf_chk@plt>
   1e028:	ldr	r3, [sp, #36]	; 0x24
   1e02c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e030:	add	r3, r3, #2
   1e034:	cmp	r6, r3
   1e038:	bhi	1e538 <__assert_fail@plt+0xbd60>
   1e03c:	cmp	r6, r0
   1e040:	bls	1e054 <__assert_fail@plt+0xb87c>
   1e044:	rsb	r1, r0, r6
   1e048:	sub	r3, r1, #1
   1e04c:	cmp	r3, #7
   1e050:	bls	1e53c <__assert_fail@plt+0xbd64>
   1e054:	mov	r3, r0
   1e058:	mov	r2, #0
   1e05c:	b	1e554 <__assert_fail@plt+0xbd7c>
   1e060:	movw	r1, #18064	; 0x4690
   1e064:	mov	r0, #1
   1e068:	movt	r1, #5
   1e06c:	bl	125bc <__printf_chk@plt>
   1e070:	ldr	r3, [sp, #36]	; 0x24
   1e074:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e078:	movw	r1, #18052	; 0x4684
   1e07c:	mov	r0, #1
   1e080:	movt	r1, #5
   1e084:	bl	125bc <__printf_chk@plt>
   1e088:	ldr	r3, [sp, #36]	; 0x24
   1e08c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e090:	movw	r1, #18040	; 0x4678
   1e094:	mov	r0, #1
   1e098:	movt	r1, #5
   1e09c:	bl	125bc <__printf_chk@plt>
   1e0a0:	ldr	r3, [sp, #36]	; 0x24
   1e0a4:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e0a8:	mov	r2, #1
   1e0ac:	mov	r3, r6
   1e0b0:	add	r1, sp, #40	; 0x28
   1e0b4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1e0b8:	mov	r2, r0
   1e0bc:	mov	r3, r1
   1e0c0:	movw	r0, #11836	; 0x2e3c
   1e0c4:	mov	r1, #0
   1e0c8:	movt	r0, #5
   1e0cc:	str	r1, [sp]
   1e0d0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1e0d4:	movw	r1, #18020	; 0x4664
   1e0d8:	movt	r1, #5
   1e0dc:	mov	r2, r0
   1e0e0:	mov	r0, #1
   1e0e4:	b	1d8ec <__assert_fail@plt+0xb114>
   1e0e8:	mov	r2, #0
   1e0ec:	mov	r3, r6
   1e0f0:	add	r1, sp, #40	; 0x28
   1e0f4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1e0f8:	mov	r2, r0
   1e0fc:	mov	r3, r1
   1e100:	movw	r0, #53816	; 0xd238
   1e104:	mov	r1, #0
   1e108:	movt	r0, #5
   1e10c:	str	r1, [sp]
   1e110:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1e114:	movw	r1, #18000	; 0x4650
   1e118:	movt	r1, #5
   1e11c:	mov	r2, r0
   1e120:	mov	r0, #1
   1e124:	b	1d8ec <__assert_fail@plt+0xb114>
   1e128:	add	r3, r3, #5
   1e12c:	cmp	r6, r3
   1e130:	bhi	1e598 <__assert_fail@plt+0xbdc0>
   1e134:	cmp	r6, r0
   1e138:	movls	r3, r0
   1e13c:	movls	r2, #0
   1e140:	bls	1e154 <__assert_fail@plt+0xb97c>
   1e144:	subs	r1, r6, r0
   1e148:	moveq	r3, r0
   1e14c:	moveq	r2, r1
   1e150:	bne	1e59c <__assert_fail@plt+0xbdc4>
   1e154:	movw	r1, #17980	; 0x463c
   1e158:	mov	r0, #1
   1e15c:	movt	r1, #5
   1e160:	add	r3, r3, #4
   1e164:	str	r3, [sp, #36]	; 0x24
   1e168:	bl	125bc <__printf_chk@plt>
   1e16c:	ldr	r0, [sp, #36]	; 0x24
   1e170:	add	r3, r0, #4
   1e174:	cmp	r6, r3
   1e178:	bhi	1e80c <__assert_fail@plt+0xc034>
   1e17c:	cmp	r6, r0
   1e180:	movls	r2, #0
   1e184:	bls	1e194 <__assert_fail@plt+0xb9bc>
   1e188:	subs	r1, r6, r0
   1e18c:	moveq	r2, r1
   1e190:	bne	1e810 <__assert_fail@plt+0xc038>
   1e194:	movw	r1, #18088	; 0x46a8
   1e198:	mov	r0, #1
   1e19c:	movt	r1, #5
   1e1a0:	str	r3, [sp, #36]	; 0x24
   1e1a4:	bl	125bc <__printf_chk@plt>
   1e1a8:	ldr	r3, [sp, #36]	; 0x24
   1e1ac:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e1b0:	add	r3, r3, #5
   1e1b4:	cmp	r6, r3
   1e1b8:	bls	1e574 <__assert_fail@plt+0xbd9c>
   1e1bc:	mov	r1, #4
   1e1c0:	movw	r3, #3472	; 0xd90
   1e1c4:	movt	r3, #7
   1e1c8:	ldr	r3, [r3]
   1e1cc:	blx	r3
   1e1d0:	ldr	r3, [sp, #36]	; 0x24
   1e1d4:	mov	r2, r0
   1e1d8:	movw	r1, #17956	; 0x4624
   1e1dc:	mov	r0, #1
   1e1e0:	movt	r1, #5
   1e1e4:	add	r3, r3, #4
   1e1e8:	str	r3, [sp, #36]	; 0x24
   1e1ec:	bl	125bc <__printf_chk@plt>
   1e1f0:	ldr	r0, [sp, #36]	; 0x24
   1e1f4:	add	r3, r0, #4
   1e1f8:	cmp	r6, r3
   1e1fc:	bhi	1e824 <__assert_fail@plt+0xc04c>
   1e200:	cmp	r6, r0
   1e204:	bls	1e218 <__assert_fail@plt+0xba40>
   1e208:	rsb	r1, r0, r6
   1e20c:	sub	r2, r1, #1
   1e210:	cmp	r2, #7
   1e214:	bls	1e828 <__assert_fail@plt+0xc050>
   1e218:	mov	r2, #0
   1e21c:	movw	r1, #17976	; 0x4638
   1e220:	mov	r0, #1
   1e224:	movt	r1, #5
   1e228:	str	r3, [sp, #36]	; 0x24
   1e22c:	bl	125bc <__printf_chk@plt>
   1e230:	ldr	r3, [sp, #36]	; 0x24
   1e234:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e238:	add	r3, r3, #5
   1e23c:	cmp	r6, r3
   1e240:	bls	1e514 <__assert_fail@plt+0xbd3c>
   1e244:	mov	r1, #4
   1e248:	bl	4a0f0 <warn@@Base+0x4f8>
   1e24c:	ldr	r3, [sp, #36]	; 0x24
   1e250:	mov	r2, r0
   1e254:	movw	r1, #17936	; 0x4610
   1e258:	mov	r0, #1
   1e25c:	movt	r1, #5
   1e260:	add	r3, r3, #4
   1e264:	str	r3, [sp, #36]	; 0x24
   1e268:	bl	125bc <__printf_chk@plt>
   1e26c:	ldr	r3, [sp, #36]	; 0x24
   1e270:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e274:	add	r3, r3, #5
   1e278:	cmp	r6, r3
   1e27c:	bhi	1e4d8 <__assert_fail@plt+0xbd00>
   1e280:	cmp	r6, r0
   1e284:	bls	1e298 <__assert_fail@plt+0xbac0>
   1e288:	rsb	r1, r0, r6
   1e28c:	sub	r3, r1, #1
   1e290:	cmp	r3, #7
   1e294:	bls	1e4dc <__assert_fail@plt+0xbd04>
   1e298:	mov	r3, r0
   1e29c:	mov	r2, #0
   1e2a0:	b	1e4f4 <__assert_fail@plt+0xbd1c>
   1e2a4:	add	r3, r3, #3
   1e2a8:	cmp	r6, r3
   1e2ac:	bls	1e4b4 <__assert_fail@plt+0xbcdc>
   1e2b0:	mov	r1, #2
   1e2b4:	bl	4a0f0 <warn@@Base+0x4f8>
   1e2b8:	ldr	r3, [sp, #36]	; 0x24
   1e2bc:	mov	r2, r0
   1e2c0:	movw	r1, #17896	; 0x45e8
   1e2c4:	mov	r0, #1
   1e2c8:	movt	r1, #5
   1e2cc:	add	r3, r3, #2
   1e2d0:	str	r3, [sp, #36]	; 0x24
   1e2d4:	bl	125bc <__printf_chk@plt>
   1e2d8:	ldr	r3, [sp, #36]	; 0x24
   1e2dc:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e2e0:	add	r3, r3, #3
   1e2e4:	cmp	r6, r3
   1e2e8:	bhi	1e478 <__assert_fail@plt+0xbca0>
   1e2ec:	cmp	r6, r0
   1e2f0:	bls	1e304 <__assert_fail@plt+0xbb2c>
   1e2f4:	rsb	r1, r0, r6
   1e2f8:	sub	r3, r1, #1
   1e2fc:	cmp	r3, #7
   1e300:	bls	1e47c <__assert_fail@plt+0xbca4>
   1e304:	mov	r3, r0
   1e308:	mov	r2, #0
   1e30c:	b	1e494 <__assert_fail@plt+0xbcbc>
   1e310:	add	r3, r3, #2
   1e314:	cmp	r6, r3
   1e318:	bls	1e454 <__assert_fail@plt+0xbc7c>
   1e31c:	mov	r1, #1
   1e320:	bl	4a0f0 <warn@@Base+0x4f8>
   1e324:	ldr	r3, [sp, #36]	; 0x24
   1e328:	mov	r2, r0
   1e32c:	mov	r0, #1
   1e330:	movw	r1, #17856	; 0x45c0
   1e334:	movt	r1, #5
   1e338:	add	r3, r3, r0
   1e33c:	str	r3, [sp, #36]	; 0x24
   1e340:	bl	125bc <__printf_chk@plt>
   1e344:	ldr	r3, [sp, #36]	; 0x24
   1e348:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e34c:	add	r3, r3, #2
   1e350:	cmp	r6, r3
   1e354:	bhi	1e418 <__assert_fail@plt+0xbc40>
   1e358:	cmp	r6, r0
   1e35c:	bls	1e370 <__assert_fail@plt+0xbb98>
   1e360:	rsb	r1, r0, r6
   1e364:	sub	r3, r1, #1
   1e368:	cmp	r3, #7
   1e36c:	bls	1e41c <__assert_fail@plt+0xbc44>
   1e370:	mov	r3, r0
   1e374:	mov	r2, #0
   1e378:	b	1e434 <__assert_fail@plt+0xbc5c>
   1e37c:	movw	r1, #17824	; 0x45a0
   1e380:	mov	r0, #1
   1e384:	movt	r1, #5
   1e388:	bl	125bc <__printf_chk@plt>
   1e38c:	ldr	r3, [sp, #36]	; 0x24
   1e390:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e394:	cmp	r8, #8
   1e398:	movls	ip, r0
   1e39c:	movls	r1, r8
   1e3a0:	bhi	1e848 <__assert_fail@plt+0xc070>
   1e3a4:	add	r3, ip, r1
   1e3a8:	cmp	r6, r3
   1e3ac:	bhi	1e3bc <__assert_fail@plt+0xbbe4>
   1e3b0:	cmp	r6, ip
   1e3b4:	bls	1e3c8 <__assert_fail@plt+0xbbf0>
   1e3b8:	rsb	r1, ip, r6
   1e3bc:	sub	r3, r1, #1
   1e3c0:	cmp	r3, #7
   1e3c4:	bls	1e790 <__assert_fail@plt+0xbfb8>
   1e3c8:	mov	r2, #0
   1e3cc:	mov	r3, #0
   1e3d0:	mov	r1, #0
   1e3d4:	movw	r0, #41908	; 0xa3b4
   1e3d8:	str	r1, [sp]
   1e3dc:	movt	r0, #5
   1e3e0:	add	ip, ip, r8
   1e3e4:	str	ip, [sp, #36]	; 0x24
   1e3e8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1e3ec:	movw	r1, #17808	; 0x4590
   1e3f0:	movt	r1, #5
   1e3f4:	mov	r2, r0
   1e3f8:	mov	r0, #1
   1e3fc:	bl	125bc <__printf_chk@plt>
   1e400:	ldr	r3, [sp, #36]	; 0x24
   1e404:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e408:	movw	r1, #19492	; 0x4c24
   1e40c:	mov	r0, #0
   1e410:	movt	r1, #5
   1e414:	b	1d134 <__assert_fail@plt+0xa95c>
   1e418:	mov	r1, #1
   1e41c:	movw	r3, #3472	; 0xd90
   1e420:	movt	r3, #7
   1e424:	ldr	r3, [r3]
   1e428:	blx	r3
   1e42c:	ldr	r3, [sp, #36]	; 0x24
   1e430:	mov	r2, r0
   1e434:	mov	r0, #1
   1e438:	movw	r1, #17836	; 0x45ac
   1e43c:	movt	r1, #5
   1e440:	add	r3, r3, r0
   1e444:	str	r3, [sp, #36]	; 0x24
   1e448:	bl	125bc <__printf_chk@plt>
   1e44c:	ldr	r3, [sp, #36]	; 0x24
   1e450:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e454:	cmp	r6, r0
   1e458:	movls	r3, r0
   1e45c:	movls	r2, #0
   1e460:	bls	1e32c <__assert_fail@plt+0xbb54>
   1e464:	subs	r1, r6, r0
   1e468:	moveq	r3, r0
   1e46c:	moveq	r2, r1
   1e470:	beq	1e32c <__assert_fail@plt+0xbb54>
   1e474:	b	1e320 <__assert_fail@plt+0xbb48>
   1e478:	mov	r1, #2
   1e47c:	movw	r3, #3472	; 0xd90
   1e480:	movt	r3, #7
   1e484:	ldr	r3, [r3]
   1e488:	blx	r3
   1e48c:	ldr	r3, [sp, #36]	; 0x24
   1e490:	mov	r2, r0
   1e494:	movw	r1, #17876	; 0x45d4
   1e498:	mov	r0, #1
   1e49c:	movt	r1, #5
   1e4a0:	add	r3, r3, #2
   1e4a4:	str	r3, [sp, #36]	; 0x24
   1e4a8:	bl	125bc <__printf_chk@plt>
   1e4ac:	ldr	r3, [sp, #36]	; 0x24
   1e4b0:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e4b4:	cmp	r6, r0
   1e4b8:	movls	r3, r0
   1e4bc:	movls	r2, #0
   1e4c0:	bls	1e2c0 <__assert_fail@plt+0xbae8>
   1e4c4:	subs	r1, r6, r0
   1e4c8:	moveq	r3, r0
   1e4cc:	moveq	r2, r1
   1e4d0:	beq	1e2c0 <__assert_fail@plt+0xbae8>
   1e4d4:	b	1e2b4 <__assert_fail@plt+0xbadc>
   1e4d8:	mov	r1, #4
   1e4dc:	movw	r3, #3472	; 0xd90
   1e4e0:	movt	r3, #7
   1e4e4:	ldr	r3, [r3]
   1e4e8:	blx	r3
   1e4ec:	ldr	r3, [sp, #36]	; 0x24
   1e4f0:	mov	r2, r0
   1e4f4:	movw	r1, #17916	; 0x45fc
   1e4f8:	mov	r0, #1
   1e4fc:	movt	r1, #5
   1e500:	add	r3, r3, #4
   1e504:	str	r3, [sp, #36]	; 0x24
   1e508:	bl	125bc <__printf_chk@plt>
   1e50c:	ldr	r3, [sp, #36]	; 0x24
   1e510:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e514:	cmp	r6, r0
   1e518:	movls	r3, r0
   1e51c:	movls	r2, #0
   1e520:	bls	1e254 <__assert_fail@plt+0xba7c>
   1e524:	subs	r1, r6, r0
   1e528:	moveq	r3, r0
   1e52c:	moveq	r2, r1
   1e530:	beq	1e254 <__assert_fail@plt+0xba7c>
   1e534:	b	1e248 <__assert_fail@plt+0xba70>
   1e538:	mov	r1, #1
   1e53c:	movw	r3, #3472	; 0xd90
   1e540:	movt	r3, #7
   1e544:	ldr	r3, [r3]
   1e548:	blx	r3
   1e54c:	ldr	r3, [sp, #36]	; 0x24
   1e550:	mov	r2, r0
   1e554:	mov	r0, #1
   1e558:	movw	r1, #18076	; 0x469c
   1e55c:	movt	r1, #5
   1e560:	add	r3, r3, r0
   1e564:	str	r3, [sp, #36]	; 0x24
   1e568:	bl	125bc <__printf_chk@plt>
   1e56c:	ldr	r3, [sp, #36]	; 0x24
   1e570:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e574:	cmp	r6, r0
   1e578:	bls	1e58c <__assert_fail@plt+0xbdb4>
   1e57c:	rsb	r1, r0, r6
   1e580:	sub	r3, r1, #1
   1e584:	cmp	r3, #7
   1e588:	bls	1e1c0 <__assert_fail@plt+0xb9e8>
   1e58c:	mov	r3, r0
   1e590:	mov	r2, #0
   1e594:	b	1e1d8 <__assert_fail@plt+0xba00>
   1e598:	mov	r1, #4
   1e59c:	bl	4a0f0 <warn@@Base+0x4f8>
   1e5a0:	ldr	r3, [sp, #36]	; 0x24
   1e5a4:	mov	r2, r0
   1e5a8:	b	1e154 <__assert_fail@plt+0xb97c>
   1e5ac:	cmp	r6, r0
   1e5b0:	movls	r3, r0
   1e5b4:	movls	r2, #0
   1e5b8:	bls	1de38 <__assert_fail@plt+0xb660>
   1e5bc:	subs	r1, r6, r0
   1e5c0:	moveq	r3, r0
   1e5c4:	moveq	r2, r1
   1e5c8:	beq	1de38 <__assert_fail@plt+0xb660>
   1e5cc:	b	1de2c <__assert_fail@plt+0xb654>
   1e5d0:	cmp	r6, r0
   1e5d4:	movls	r3, r0
   1e5d8:	movls	r2, #0
   1e5dc:	bls	1dd6c <__assert_fail@plt+0xb594>
   1e5e0:	subs	r1, r6, r0
   1e5e4:	moveq	r3, r0
   1e5e8:	moveq	r2, r1
   1e5ec:	beq	1dd6c <__assert_fail@plt+0xb594>
   1e5f0:	b	1dd60 <__assert_fail@plt+0xb588>
   1e5f4:	mov	r1, #1
   1e5f8:	movw	r3, #3472	; 0xd90
   1e5fc:	movt	r3, #7
   1e600:	ldr	r3, [r3]
   1e604:	blx	r3
   1e608:	ldr	r3, [sp, #36]	; 0x24
   1e60c:	mov	r2, r0
   1e610:	mov	r0, #1
   1e614:	movw	r1, #18560	; 0x4880
   1e618:	movt	r1, #5
   1e61c:	add	r3, r3, r0
   1e620:	str	r3, [sp, #36]	; 0x24
   1e624:	bl	125bc <__printf_chk@plt>
   1e628:	ldr	r3, [sp, #36]	; 0x24
   1e62c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e630:	mov	r1, #1
   1e634:	movw	r3, #3472	; 0xd90
   1e638:	movt	r3, #7
   1e63c:	ldr	r3, [r3]
   1e640:	blx	r3
   1e644:	ldr	r3, [sp, #36]	; 0x24
   1e648:	mov	r2, r0
   1e64c:	mov	r0, #1
   1e650:	movw	r1, #18584	; 0x4898
   1e654:	movt	r1, #5
   1e658:	add	r3, r3, r0
   1e65c:	str	r3, [sp, #36]	; 0x24
   1e660:	bl	125bc <__printf_chk@plt>
   1e664:	ldr	r3, [sp, #36]	; 0x24
   1e668:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e66c:	cmp	r6, r0
   1e670:	bls	1e8dc <__assert_fail@plt+0xc104>
   1e674:	subs	r1, r6, r0
   1e678:	moveq	r2, #0
   1e67c:	moveq	r3, #0
   1e680:	moveq	r1, r0
   1e684:	beq	1da2c <__assert_fail@plt+0xb254>
   1e688:	b	1da1c <__assert_fail@plt+0xb244>
   1e68c:	cmp	r6, r0
   1e690:	bls	1e8fc <__assert_fail@plt+0xc124>
   1e694:	subs	r1, r6, r0
   1e698:	moveq	r2, #0
   1e69c:	moveq	r3, #0
   1e6a0:	moveq	r1, r0
   1e6a4:	beq	1d9c8 <__assert_fail@plt+0xb1f0>
   1e6a8:	b	1d9b8 <__assert_fail@plt+0xb1e0>
   1e6ac:	cmp	r6, r0
   1e6b0:	bls	1e8ec <__assert_fail@plt+0xc114>
   1e6b4:	rsb	r1, r0, r6
   1e6b8:	sub	r3, r1, #1
   1e6bc:	cmp	r3, #7
   1e6c0:	movhi	r2, #0
   1e6c4:	movhi	r3, #0
   1e6c8:	movhi	r1, r0
   1e6cc:	bhi	1d25c <__assert_fail@plt+0xaa84>
   1e6d0:	b	1d240 <__assert_fail@plt+0xaa68>
   1e6d4:	mov	r1, #1
   1e6d8:	movw	r3, #3472	; 0xd90
   1e6dc:	movt	r3, #7
   1e6e0:	ldr	r3, [r3]
   1e6e4:	blx	r3
   1e6e8:	ldr	r3, [sp, #36]	; 0x24
   1e6ec:	mov	r2, r0
   1e6f0:	mov	r0, #1
   1e6f4:	movw	r1, #19164	; 0x4adc
   1e6f8:	movt	r1, #5
   1e6fc:	add	r3, r3, r0
   1e700:	str	r3, [sp, #36]	; 0x24
   1e704:	bl	125bc <__printf_chk@plt>
   1e708:	mov	r2, #0
   1e70c:	mov	r3, r6
   1e710:	ldr	r0, [sp, #36]	; 0x24
   1e714:	add	r1, sp, #40	; 0x28
   1e718:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1e71c:	mov	ip, #0
   1e720:	ldr	r2, [sp, #36]	; 0x24
   1e724:	ldr	r3, [sp, #40]	; 0x28
   1e728:	str	ip, [sp]
   1e72c:	b	1d44c <__assert_fail@plt+0xac74>
   1e730:	mov	r1, #1
   1e734:	movw	r3, #3472	; 0xd90
   1e738:	movt	r3, #7
   1e73c:	ldr	r3, [r3]
   1e740:	blx	r3
   1e744:	ldr	ip, [sp, #36]	; 0x24
   1e748:	add	ip, ip, #1
   1e74c:	mov	r2, r0
   1e750:	mov	r3, r1
   1e754:	str	r6, [sp]
   1e758:	mov	r0, ip
   1e75c:	str	ip, [sp, #36]	; 0x24
   1e760:	bl	1c0b4 <__assert_fail@plt+0x98dc>
   1e764:	mov	r3, r0
   1e768:	str	r0, [sp, #36]	; 0x24
   1e76c:	b	1d1b8 <__assert_fail@plt+0xa9e0>
   1e770:	cmp	r6, r0
   1e774:	bls	1d600 <__assert_fail@plt+0xae28>
   1e778:	rsb	r1, r0, r6
   1e77c:	b	1d5f4 <__assert_fail@plt+0xae1c>
   1e780:	cmp	r6, r0
   1e784:	bls	1d968 <__assert_fail@plt+0xb190>
   1e788:	rsb	r1, r0, r6
   1e78c:	b	1d95c <__assert_fail@plt+0xb184>
   1e790:	movw	r3, #3472	; 0xd90
   1e794:	movt	r3, #7
   1e798:	mov	r0, ip
   1e79c:	ldr	r3, [r3]
   1e7a0:	blx	r3
   1e7a4:	ldr	ip, [sp, #36]	; 0x24
   1e7a8:	mov	r2, r0
   1e7ac:	mov	r3, r1
   1e7b0:	b	1e3d0 <__assert_fail@plt+0xbbf8>
   1e7b4:	mov	r2, #5
   1e7b8:	movw	r1, #17732	; 0x4544
   1e7bc:	mov	r0, #0
   1e7c0:	movt	r1, #5
   1e7c4:	bl	12298 <dcgettext@plt>
   1e7c8:	mov	r1, sl
   1e7cc:	mov	r2, #8
   1e7d0:	bl	494bc <error@@Base>
   1e7d4:	ldr	r0, [sp, #36]	; 0x24
   1e7d8:	mov	r1, #8
   1e7dc:	b	1d950 <__assert_fail@plt+0xb178>
   1e7e0:	mov	r2, #5
   1e7e4:	movw	r1, #17732	; 0x4544
   1e7e8:	mov	r0, #0
   1e7ec:	movt	r1, #5
   1e7f0:	bl	12298 <dcgettext@plt>
   1e7f4:	mov	r1, sl
   1e7f8:	mov	r2, #8
   1e7fc:	bl	494bc <error@@Base>
   1e800:	ldr	r0, [sp, #36]	; 0x24
   1e804:	mov	r1, #8
   1e808:	b	1d5e8 <__assert_fail@plt+0xae10>
   1e80c:	mov	r1, #4
   1e810:	bl	4a0f0 <warn@@Base+0x4f8>
   1e814:	ldr	r3, [sp, #36]	; 0x24
   1e818:	add	r3, r3, #4
   1e81c:	mov	r2, r0
   1e820:	b	1e194 <__assert_fail@plt+0xb9bc>
   1e824:	mov	r1, #4
   1e828:	movw	r3, #3472	; 0xd90
   1e82c:	movt	r3, #7
   1e830:	ldr	r3, [r3]
   1e834:	blx	r3
   1e838:	ldr	r3, [sp, #36]	; 0x24
   1e83c:	add	r3, r3, #4
   1e840:	mov	r2, r0
   1e844:	b	1e21c <__assert_fail@plt+0xba44>
   1e848:	mov	r2, #5
   1e84c:	movw	r1, #17732	; 0x4544
   1e850:	mov	r0, #0
   1e854:	movt	r1, #5
   1e858:	bl	12298 <dcgettext@plt>
   1e85c:	mov	r1, r8
   1e860:	mov	r2, #8
   1e864:	bl	494bc <error@@Base>
   1e868:	ldr	ip, [sp, #36]	; 0x24
   1e86c:	mov	r1, #8
   1e870:	b	1e3a4 <__assert_fail@plt+0xbbcc>
   1e874:	cmp	r8, #8
   1e878:	movls	r1, r8
   1e87c:	bhi	1e9d8 <__assert_fail@plt+0xc200>
   1e880:	add	r3, r0, r1
   1e884:	cmp	r6, r3
   1e888:	bhi	1e910 <__assert_fail@plt+0xc138>
   1e88c:	cmp	r6, r0
   1e890:	bhi	1e90c <__assert_fail@plt+0xc134>
   1e894:	mov	r2, #0
   1e898:	mov	r3, #0
   1e89c:	add	r0, r0, r8
   1e8a0:	str	r0, [sp, #36]	; 0x24
   1e8a4:	b	1d610 <__assert_fail@plt+0xae38>
   1e8a8:	cmp	r8, #8
   1e8ac:	movls	r1, r8
   1e8b0:	bhi	1e9ac <__assert_fail@plt+0xc1d4>
   1e8b4:	add	r3, r0, r1
   1e8b8:	cmp	r6, r3
   1e8bc:	bhi	1e940 <__assert_fail@plt+0xc168>
   1e8c0:	cmp	r6, r0
   1e8c4:	bhi	1e93c <__assert_fail@plt+0xc164>
   1e8c8:	mov	r2, #0
   1e8cc:	mov	r3, #0
   1e8d0:	add	r0, r0, r8
   1e8d4:	str	r0, [sp, #36]	; 0x24
   1e8d8:	b	1d978 <__assert_fail@plt+0xb1a0>
   1e8dc:	mov	r1, r0
   1e8e0:	mov	r2, #0
   1e8e4:	mov	r3, #0
   1e8e8:	b	1da2c <__assert_fail@plt+0xb254>
   1e8ec:	mov	r1, r0
   1e8f0:	mov	r2, #0
   1e8f4:	mov	r3, #0
   1e8f8:	b	1d25c <__assert_fail@plt+0xaa84>
   1e8fc:	mov	r1, r0
   1e900:	mov	r2, #0
   1e904:	mov	r3, #0
   1e908:	b	1d9c8 <__assert_fail@plt+0xb1f0>
   1e90c:	rsb	r1, r0, r6
   1e910:	sub	r3, r1, #1
   1e914:	cmp	r3, #7
   1e918:	bhi	1e894 <__assert_fail@plt+0xc0bc>
   1e91c:	movw	r3, #3472	; 0xd90
   1e920:	movt	r3, #7
   1e924:	ldr	r3, [r3]
   1e928:	blx	r3
   1e92c:	mov	r2, r0
   1e930:	mov	r3, r1
   1e934:	ldr	r0, [sp, #36]	; 0x24
   1e938:	b	1e89c <__assert_fail@plt+0xc0c4>
   1e93c:	rsb	r1, r0, r6
   1e940:	sub	r3, r1, #1
   1e944:	cmp	r3, #7
   1e948:	bhi	1e8c8 <__assert_fail@plt+0xc0f0>
   1e94c:	movw	r3, #3472	; 0xd90
   1e950:	movt	r3, #7
   1e954:	ldr	r3, [r3]
   1e958:	blx	r3
   1e95c:	mov	r2, r0
   1e960:	mov	r3, r1
   1e964:	ldr	r0, [sp, #36]	; 0x24
   1e968:	b	1e8d0 <__assert_fail@plt+0xc0f8>
   1e96c:	movw	r3, #3472	; 0xd90
   1e970:	movt	r3, #7
   1e974:	ldr	r3, [r3]
   1e978:	blx	r3
   1e97c:	mov	r2, r0
   1e980:	mov	r3, r1
   1e984:	ldr	r0, [sp, #36]	; 0x24
   1e988:	b	1d608 <__assert_fail@plt+0xae30>
   1e98c:	movw	r3, #3472	; 0xd90
   1e990:	movt	r3, #7
   1e994:	ldr	r3, [r3]
   1e998:	blx	r3
   1e99c:	mov	r2, r0
   1e9a0:	mov	r3, r1
   1e9a4:	ldr	r0, [sp, #36]	; 0x24
   1e9a8:	b	1d970 <__assert_fail@plt+0xb198>
   1e9ac:	mov	r2, #5
   1e9b0:	movw	r1, #17732	; 0x4544
   1e9b4:	mov	r0, #0
   1e9b8:	movt	r1, #5
   1e9bc:	bl	12298 <dcgettext@plt>
   1e9c0:	mov	r1, r8
   1e9c4:	mov	r2, #8
   1e9c8:	bl	494bc <error@@Base>
   1e9cc:	ldr	r0, [sp, #36]	; 0x24
   1e9d0:	mov	r1, #8
   1e9d4:	b	1e8b4 <__assert_fail@plt+0xc0dc>
   1e9d8:	mov	r2, #5
   1e9dc:	movw	r1, #17732	; 0x4544
   1e9e0:	mov	r0, #0
   1e9e4:	movt	r1, #5
   1e9e8:	bl	12298 <dcgettext@plt>
   1e9ec:	mov	r1, r8
   1e9f0:	mov	r2, #8
   1e9f4:	bl	494bc <error@@Base>
   1e9f8:	ldr	r0, [sp, #36]	; 0x24
   1e9fc:	mov	r1, #8
   1ea00:	b	1e880 <__assert_fail@plt+0xc0a8>
   1ea04:	movw	r1, #18988	; 0x4a2c
   1ea08:	mov	r0, #0
   1ea0c:	movt	r1, #5
   1ea10:	b	1d134 <__assert_fail@plt+0xa95c>
   1ea14:	movw	r1, #18688	; 0x4900
   1ea18:	mov	r0, #0
   1ea1c:	movt	r1, #5
   1ea20:	b	1d134 <__assert_fail@plt+0xa95c>
   1ea24:	bl	122b0 <__stack_chk_fail@plt>
   1ea28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea2c:	movw	r4, #3432	; 0xd68
   1ea30:	movt	r4, #7
   1ea34:	movw	r5, #65176	; 0xfe98
   1ea38:	movt	r5, #6
   1ea3c:	sub	sp, sp, #172	; 0xac
   1ea40:	ldr	r3, [r4]
   1ea44:	ldr	r1, [r5]
   1ea48:	cmp	r3, #0
   1ea4c:	ldr	r7, [r0, #12]
   1ea50:	ldr	r2, [r0, #24]
   1ea54:	moveq	r3, #1
   1ea58:	str	r4, [sp, #108]	; 0x6c
   1ea5c:	str	r5, [sp, #104]	; 0x68
   1ea60:	add	r9, r7, r2
   1ea64:	str	r0, [sp, #88]	; 0x58
   1ea68:	str	r1, [sp, #164]	; 0xa4
   1ea6c:	streq	r3, [r4]
   1ea70:	bne	1edfc <__assert_fail@plt+0xc624>
   1ea74:	mov	r2, #5
   1ea78:	movw	r1, #19560	; 0x4c68
   1ea7c:	mov	r0, #0
   1ea80:	movt	r1, #5
   1ea84:	bl	12298 <dcgettext@plt>
   1ea88:	ldr	r6, [sp, #88]	; 0x58
   1ea8c:	ldr	r2, [r6, #8]
   1ea90:	mov	r1, r0
   1ea94:	mov	r0, #1
   1ea98:	bl	125bc <__printf_chk@plt>
   1ea9c:	cmp	r7, r9
   1eaa0:	bcs	20c50 <__assert_fail@plt+0xe478>
   1eaa4:	movw	ip, #1240	; 0x4d8
   1eaa8:	add	r4, sp, #120	; 0x78
   1eaac:	movt	ip, #7
   1eab0:	str	r4, [sp, #96]	; 0x60
   1eab4:	str	ip, [sp, #60]	; 0x3c
   1eab8:	mov	sl, r7
   1eabc:	mov	fp, r9
   1eac0:	str	r7, [sp, #56]	; 0x38
   1eac4:	b	1eaf0 <__assert_fail@plt+0xc318>
   1eac8:	movw	r1, #20460	; 0x4fec
   1eacc:	mov	r0, #0
   1ead0:	movt	r1, #5
   1ead4:	mov	r2, #5
   1ead8:	bl	12298 <dcgettext@plt>
   1eadc:	mov	r1, r0
   1eae0:	mov	r0, #1
   1eae4:	bl	125bc <__printf_chk@plt>
   1eae8:	cmp	fp, sl
   1eaec:	bls	20c48 <__assert_fail@plt+0xe470>
   1eaf0:	ldr	r6, [sp, #88]	; 0x58
   1eaf4:	movw	r1, #19604	; 0x4c94
   1eaf8:	mov	r2, #12
   1eafc:	movt	r1, #5
   1eb00:	ldr	r5, [r6, #8]
   1eb04:	mov	r0, r5
   1eb08:	bl	12784 <strncmp@plt>
   1eb0c:	subs	r4, r0, #0
   1eb10:	bne	1f434 <__assert_fail@plt+0xcc5c>
   1eb14:	mov	r0, r5
   1eb18:	movw	r1, #19620	; 0x4ca4
   1eb1c:	movt	r1, #5
   1eb20:	bl	12178 <strcmp@plt>
   1eb24:	cmp	r0, #0
   1eb28:	beq	1f434 <__assert_fail@plt+0xcc5c>
   1eb2c:	movw	r7, #1240	; 0x4d8
   1eb30:	movt	r7, #7
   1eb34:	add	ip, r7, #1440	; 0x5a0
   1eb38:	ldr	lr, [sp, #96]	; 0x60
   1eb3c:	add	ip, ip, #8
   1eb40:	str	fp, [sp, #112]	; 0x70
   1eb44:	ldm	ip!, {r0, r1, r2, r3}
   1eb48:	stmia	lr!, {r0, r1, r2, r3}
   1eb4c:	ldm	ip!, {r0, r1, r2, r3}
   1eb50:	stmia	lr!, {r0, r1, r2, r3}
   1eb54:	ldm	ip, {r0, r1}
   1eb58:	stm	lr, {r0, r1}
   1eb5c:	ldrb	r0, [sp, #152]	; 0x98
   1eb60:	cmp	r0, #0
   1eb64:	beq	21380 <__assert_fail@plt+0xeba8>
   1eb68:	ldrb	ip, [sp, #146]	; 0x92
   1eb6c:	mov	r0, #1488	; 0x5d0
   1eb70:	strb	r4, [r7, #1516]	; 0x5ec
   1eb74:	mov	r1, #1
   1eb78:	str	r4, [sp, #84]	; 0x54
   1eb7c:	mov	r2, #0
   1eb80:	str	r4, [r7, #1504]	; 0x5e0
   1eb84:	mov	r3, #0
   1eb88:	str	r4, [r7, #1512]	; 0x5e8
   1eb8c:	strb	r4, [r7, #1517]	; 0x5ed
   1eb90:	str	r4, [r7, #1520]	; 0x5f0
   1eb94:	mov	r4, fp
   1eb98:	str	ip, [r7, #1508]	; 0x5e4
   1eb9c:	strd	r2, [r7, r0]
   1eba0:	str	r1, [r7, #1496]	; 0x5d8
   1eba4:	str	r1, [r7, #1500]	; 0x5dc
   1eba8:	cmp	sl, r4
   1ebac:	bcs	1eac8 <__assert_fail@plt+0xc2f0>
   1ebb0:	mov	r2, #5
   1ebb4:	movw	r1, #20492	; 0x500c
   1ebb8:	mov	r0, #0
   1ebbc:	movt	r1, #5
   1ebc0:	bl	12298 <dcgettext@plt>
   1ebc4:	mov	r1, r0
   1ebc8:	mov	r0, #1
   1ebcc:	bl	125bc <__printf_chk@plt>
   1ebd0:	ldr	r3, [sp, #112]	; 0x70
   1ebd4:	cmp	sl, r3
   1ebd8:	movwcs	ip, #976	; 0x3d0
   1ebdc:	movtcs	ip, #7
   1ebe0:	strcs	ip, [sp, #80]	; 0x50
   1ebe4:	bcs	1eeac <__assert_fail@plt+0xc6d4>
   1ebe8:	movw	r4, #976	; 0x3d0
   1ebec:	str	fp, [sp, #100]	; 0x64
   1ebf0:	movt	r4, #7
   1ebf4:	mov	r8, r7
   1ebf8:	str	r4, [sp, #80]	; 0x50
   1ebfc:	b	1ed90 <__assert_fail@plt+0xc5b8>
   1ec00:	rsb	sl, r0, r4
   1ec04:	ldrb	r1, [sp, #152]	; 0x98
   1ec08:	mov	r5, #0
   1ec0c:	uxtb	sl, sl
   1ec10:	mov	r0, sl
   1ec14:	bl	4f040 <warn@@Base+0x5448>
   1ec18:	ldrb	r6, [sp, #145]	; 0x91
   1ec1c:	cmp	r6, #1
   1ec20:	uxtb	r7, r0
   1ec24:	uxtb	r4, r7
   1ec28:	strd	r4, [sp, #48]	; 0x30
   1ec2c:	beq	1f3b4 <__assert_fail@plt+0xcbdc>
   1ec30:	ldrb	r2, [r8, #1516]	; 0x5ec
   1ec34:	uxtb	r6, r6
   1ec38:	ldrd	r4, [sp, #48]	; 0x30
   1ec3c:	mov	r3, #0
   1ec40:	mov	r7, #0
   1ec44:	mov	fp, #1488	; 0x5d0
   1ec48:	adds	r4, r4, r2
   1ec4c:	mov	r2, r6
   1ec50:	adc	r5, r5, r3
   1ec54:	mov	r3, r7
   1ec58:	mov	r0, r4
   1ec5c:	mov	r1, r5
   1ec60:	bl	4f48c <warn@@Base+0x5894>
   1ec64:	ldrb	r2, [sp, #144]	; 0x90
   1ec68:	mov	r3, #0
   1ec6c:	strd	r2, [sp, #72]	; 0x48
   1ec70:	mov	r3, r7
   1ec74:	ldr	r7, [sp, #72]	; 0x48
   1ec78:	mov	r2, r6
   1ec7c:	ldr	ip, [sp, #72]	; 0x48
   1ec80:	umull	r6, r7, r0, r7
   1ec84:	mov	r0, r4
   1ec88:	mla	r1, r1, ip, r7
   1ec8c:	strd	r6, [sp, #32]
   1ec90:	ldrd	r6, [r8, fp]
   1ec94:	str	r1, [sp, #36]	; 0x24
   1ec98:	mov	r1, r5
   1ec9c:	ldrd	r4, [sp, #32]
   1eca0:	adds	r4, r4, r6
   1eca4:	adc	r5, r5, r7
   1eca8:	strd	r4, [r8, fp]
   1ecac:	bl	4f48c <warn@@Base+0x5894>
   1ecb0:	movw	r1, #20584	; 0x5068
   1ecb4:	mov	r0, #0
   1ecb8:	movt	r1, #5
   1ecbc:	mov	r7, #0
   1ecc0:	strb	r2, [r8, #1516]	; 0x5ec
   1ecc4:	mov	r2, #5
   1ecc8:	bl	12298 <dcgettext@plt>
   1eccc:	ldrd	r2, [sp, #48]	; 0x30
   1ecd0:	str	r7, [sp]
   1ecd4:	mov	r5, r0
   1ecd8:	movw	r0, #53816	; 0xd238
   1ecdc:	movt	r0, #5
   1ece0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1ece4:	ldrd	r2, [r8, fp]
   1ece8:	str	r7, [sp]
   1ecec:	mov	r4, r0
   1ecf0:	movw	r0, #41908	; 0xa3b4
   1ecf4:	movt	r0, #5
   1ecf8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1ecfc:	ldrb	ip, [r8, #1516]	; 0x5ec
   1ed00:	mov	r1, r5
   1ed04:	mov	r3, r4
   1ed08:	mov	r2, sl
   1ed0c:	stm	sp, {r0, ip}
   1ed10:	mov	r0, #1
   1ed14:	bl	125bc <__printf_chk@plt>
   1ed18:	mov	r0, sl
   1ed1c:	ldrb	r1, [sp, #152]	; 0x98
   1ed20:	bl	4f22c <warn@@Base+0x5634>
   1ed24:	ldr	r4, [sp, #148]	; 0x94
   1ed28:	ldr	r3, [r8, #1500]	; 0x5dc
   1ed2c:	mov	r2, #5
   1ed30:	mov	r0, #0
   1ed34:	mov	sl, r9
   1ed38:	uxtab	r4, r4, r1
   1ed3c:	movw	r1, #20640	; 0x50a0
   1ed40:	movt	r1, #5
   1ed44:	add	r3, r4, r3
   1ed48:	str	r3, [r8, #1500]	; 0x5dc
   1ed4c:	bl	12298 <dcgettext@plt>
   1ed50:	asr	r3, r4, #31
   1ed54:	mov	r2, r4
   1ed58:	mov	r1, #0
   1ed5c:	str	r1, [sp]
   1ed60:	mov	r5, r0
   1ed64:	movw	r0, #11836	; 0x2e3c
   1ed68:	movt	r0, #5
   1ed6c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1ed70:	mov	r1, r5
   1ed74:	ldr	r3, [r8, #1500]	; 0x5dc
   1ed78:	mov	r2, r0
   1ed7c:	mov	r0, #1
   1ed80:	bl	125bc <__printf_chk@plt>
   1ed84:	ldr	r3, [sp, #112]	; 0x70
   1ed88:	cmp	r3, sl
   1ed8c:	bls	1eea8 <__assert_fail@plt+0xc6d0>
   1ed90:	ldr	r5, [sp, #56]	; 0x38
   1ed94:	movw	r1, #20520	; 0x5028
   1ed98:	mov	r0, #1
   1ed9c:	movt	r1, #5
   1eda0:	rsb	r2, r5, sl
   1eda4:	add	r9, sl, #1
   1eda8:	bl	125bc <__printf_chk@plt>
   1edac:	ldrb	r4, [sl]
   1edb0:	ldrb	r0, [sp, #153]	; 0x99
   1edb4:	cmp	r4, r0
   1edb8:	bcs	1ec00 <__assert_fail@plt+0xc428>
   1edbc:	cmp	r4, #12
   1edc0:	ldrls	pc, [pc, r4, lsl #2]
   1edc4:	b	1f9fc <__assert_fail@plt+0xd224>
   1edc8:	andeq	pc, r1, r4, asr #6
   1edcc:	strdeq	pc, [r1], -r4
   1edd0:	ldrdeq	pc, [r1], -r8
   1edd4:	andeq	pc, r1, r4, ror r0	; <UNPREDICTABLE>
   1edd8:	andeq	pc, r1, r4, ror r2	; <UNPREDICTABLE>
   1eddc:	andeq	pc, r1, r4, lsl #4
   1ede0:	andeq	pc, r1, r4, ror #5
   1ede4:	andeq	pc, r1, r4, asr #32
   1ede8:	andeq	lr, r1, r4, lsr #31
   1edec:	strdeq	lr, [r1], -r8
   1edf0:	andeq	lr, r1, r8, ror #29
   1edf4:	andeq	lr, r1, r0, asr #29
   1edf8:	andeq	lr, r1, r4, lsr lr
   1edfc:	ands	r2, r3, #1
   1ee00:	streq	r2, [sp, #92]	; 0x5c
   1ee04:	bne	1ea74 <__assert_fail@plt+0xc29c>
   1ee08:	tst	r3, #2
   1ee0c:	bne	1fba0 <__assert_fail@plt+0xd3c8>
   1ee10:	ldr	r5, [sp, #92]	; 0x5c
   1ee14:	eor	r0, r5, #1
   1ee18:	ldr	ip, [sp, #104]	; 0x68
   1ee1c:	ldr	r2, [sp, #164]	; 0xa4
   1ee20:	ldr	r3, [ip]
   1ee24:	cmp	r2, r3
   1ee28:	bne	213dc <__assert_fail@plt+0xec04>
   1ee2c:	add	sp, sp, #172	; 0xac
   1ee30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee34:	ldr	r3, [sp, #100]	; 0x64
   1ee38:	mov	r2, #0
   1ee3c:	mov	r0, r9
   1ee40:	add	r1, sp, #116	; 0x74
   1ee44:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1ee48:	mov	r2, #5
   1ee4c:	ldr	sl, [sp, #116]	; 0x74
   1ee50:	add	sl, r9, sl
   1ee54:	mov	r4, r0
   1ee58:	mov	r5, r1
   1ee5c:	mov	r0, #0
   1ee60:	movw	r1, #21880	; 0x5578
   1ee64:	movt	r1, #5
   1ee68:	bl	12298 <dcgettext@plt>
   1ee6c:	mov	r3, r5
   1ee70:	mov	r1, #0
   1ee74:	mov	r2, r4
   1ee78:	str	r1, [sp]
   1ee7c:	mov	r6, r0
   1ee80:	movw	r0, #53816	; 0xd238
   1ee84:	movt	r0, #5
   1ee88:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1ee8c:	mov	r1, r6
   1ee90:	mov	r2, r0
   1ee94:	mov	r0, #1
   1ee98:	bl	125bc <__printf_chk@plt>
   1ee9c:	ldr	r3, [sp, #112]	; 0x70
   1eea0:	cmp	r3, sl
   1eea4:	bhi	1ed90 <__assert_fail@plt+0xc5b8>
   1eea8:	ldr	fp, [sp, #100]	; 0x64
   1eeac:	ldr	r7, [sp, #80]	; 0x50
   1eeb0:	mov	r0, #10
   1eeb4:	ldr	r1, [r7]
   1eeb8:	bl	12334 <_IO_putc@plt>
   1eebc:	b	1eae8 <__assert_fail@plt+0xc310>
   1eec0:	movw	r1, #21848	; 0x5558
   1eec4:	movt	r1, #5
   1eec8:	mov	r0, #0
   1eecc:	mov	r2, #5
   1eed0:	mov	sl, r9
   1eed4:	bl	12298 <dcgettext@plt>
   1eed8:	mov	r1, r0
   1eedc:	mov	r0, #1
   1eee0:	bl	125bc <__printf_chk@plt>
   1eee4:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1eee8:	movw	r1, #21820	; 0x553c
   1eeec:	mov	r0, #0
   1eef0:	movt	r1, #5
   1eef4:	b	1eecc <__assert_fail@plt+0xc6f4>
   1eef8:	ldr	r4, [sp, #100]	; 0x64
   1eefc:	add	sl, sl, #3
   1ef00:	cmp	r4, sl
   1ef04:	bhi	1facc <__assert_fail@plt+0xd2f4>
   1ef08:	cmp	r4, r9
   1ef0c:	bls	1ef20 <__assert_fail@plt+0xc748>
   1ef10:	rsb	r1, r9, r4
   1ef14:	sub	r3, r1, #1
   1ef18:	cmp	r3, #7
   1ef1c:	bls	1fad0 <__assert_fail@plt+0xd2f8>
   1ef20:	mov	r4, #0
   1ef24:	mov	r5, #0
   1ef28:	mov	r7, #1488	; 0x5d0
   1ef2c:	mov	r6, #0
   1ef30:	ldrd	r2, [r8, r7]
   1ef34:	mov	r0, r6
   1ef38:	movw	r1, #21772	; 0x550c
   1ef3c:	movt	r1, #5
   1ef40:	adds	r2, r2, r4
   1ef44:	strb	r6, [r8, #1516]	; 0x5ec
   1ef48:	adc	r3, r3, r5
   1ef4c:	strd	r2, [r8, r7]
   1ef50:	mov	r2, #5
   1ef54:	bl	12298 <dcgettext@plt>
   1ef58:	mov	r2, r4
   1ef5c:	mov	r3, r5
   1ef60:	str	r6, [sp]
   1ef64:	mov	r9, r0
   1ef68:	movw	r0, #53816	; 0xd238
   1ef6c:	movt	r0, #5
   1ef70:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1ef74:	ldrd	r2, [r8, r7]
   1ef78:	str	r6, [sp]
   1ef7c:	mov	r4, r0
   1ef80:	movw	r0, #41908	; 0xa3b4
   1ef84:	movt	r0, #5
   1ef88:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1ef8c:	mov	r1, r9
   1ef90:	mov	r2, r4
   1ef94:	mov	r3, r0
   1ef98:	mov	r0, #1
   1ef9c:	bl	125bc <__printf_chk@plt>
   1efa0:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1efa4:	rsb	r0, r0, #255	; 0xff
   1efa8:	ldrb	r1, [sp, #152]	; 0x98
   1efac:	bl	4f24c <warn@@Base+0x5654>
   1efb0:	ldrb	fp, [sp, #145]	; 0x91
   1efb4:	cmp	fp, #0
   1efb8:	mov	r4, r0
   1efbc:	asr	r5, r0, #31
   1efc0:	mov	r6, r0
   1efc4:	strd	r4, [sp, #48]	; 0x30
   1efc8:	beq	1faf0 <__assert_fail@plt+0xd318>
   1efcc:	mov	r7, #1488	; 0x5d0
   1efd0:	ldrb	fp, [sp, #144]	; 0x90
   1efd4:	ldrd	r4, [r8, r7]
   1efd8:	mov	r0, #0
   1efdc:	mov	r2, #5
   1efe0:	movw	r1, #21688	; 0x54b8
   1efe4:	movt	r1, #5
   1efe8:	mov	sl, r9
   1efec:	smlal	r4, r5, fp, r6
   1eff0:	mov	r9, r0
   1eff4:	strd	r4, [r8, r7]
   1eff8:	bl	12298 <dcgettext@plt>
   1effc:	smull	r2, r3, r6, fp
   1f000:	str	r9, [sp]
   1f004:	mov	r5, r0
   1f008:	movw	r0, #53816	; 0xd238
   1f00c:	movt	r0, #5
   1f010:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f014:	ldrd	r2, [r8, r7]
   1f018:	str	r9, [sp]
   1f01c:	mov	r4, r0
   1f020:	movw	r0, #41908	; 0xa3b4
   1f024:	movt	r0, #5
   1f028:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f02c:	mov	r1, r5
   1f030:	mov	r2, r4
   1f034:	mov	r3, r0
   1f038:	mov	r0, #1
   1f03c:	bl	125bc <__printf_chk@plt>
   1f040:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1f044:	mov	r2, #5
   1f048:	movw	r1, #21668	; 0x54a4
   1f04c:	mov	r0, #0
   1f050:	movt	r1, #5
   1f054:	bl	12298 <dcgettext@plt>
   1f058:	mov	sl, r9
   1f05c:	mov	r1, r0
   1f060:	mov	r0, #1
   1f064:	bl	125bc <__printf_chk@plt>
   1f068:	mov	r3, #1
   1f06c:	str	r3, [r8, #1512]	; 0x5e8
   1f070:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1f074:	mov	r2, #1
   1f078:	ldr	r3, [sp, #100]	; 0x64
   1f07c:	mov	r0, r9
   1f080:	add	r1, sp, #116	; 0x74
   1f084:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f088:	ldr	r3, [r8, #1500]	; 0x5dc
   1f08c:	mov	r2, #5
   1f090:	ldr	sl, [sp, #116]	; 0x74
   1f094:	add	sl, r9, sl
   1f098:	mov	r4, r0
   1f09c:	mov	r6, r1
   1f0a0:	mov	r0, #0
   1f0a4:	movw	r1, #21544	; 0x5428
   1f0a8:	movt	r1, #5
   1f0ac:	add	r3, r3, r4
   1f0b0:	str	r3, [r8, #1500]	; 0x5dc
   1f0b4:	bl	12298 <dcgettext@plt>
   1f0b8:	mov	r1, #0
   1f0bc:	mov	r2, r4
   1f0c0:	mov	r3, r6
   1f0c4:	str	r1, [sp]
   1f0c8:	mov	r5, r0
   1f0cc:	movw	r0, #11836	; 0x2e3c
   1f0d0:	movt	r0, #5
   1f0d4:	b	1ed6c <__assert_fail@plt+0xc594>
   1f0d8:	mov	r0, r9
   1f0dc:	add	r1, sp, #116	; 0x74
   1f0e0:	mov	r2, #0
   1f0e4:	ldr	r3, [sp, #100]	; 0x64
   1f0e8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f0ec:	ldrb	r4, [sp, #145]	; 0x91
   1f0f0:	ldr	sl, [sp, #116]	; 0x74
   1f0f4:	cmp	r4, #1
   1f0f8:	str	r4, [sp, #72]	; 0x48
   1f0fc:	add	sl, r9, sl
   1f100:	strd	r0, [sp, #48]	; 0x30
   1f104:	beq	20b88 <__assert_fail@plt+0xe3b0>
   1f108:	ldr	r6, [sp, #72]	; 0x48
   1f10c:	mov	r7, #0
   1f110:	ldrb	r2, [r8, #1516]	; 0x5ec
   1f114:	mov	r5, r7
   1f118:	mov	r3, #0
   1f11c:	mov	fp, #1488	; 0x5d0
   1f120:	uxtb	r6, r6
   1f124:	mov	r4, r6
   1f128:	ldrd	r6, [sp, #48]	; 0x30
   1f12c:	adds	r6, r6, r2
   1f130:	mov	r2, r4
   1f134:	adc	r7, r7, r3
   1f138:	mov	r3, r5
   1f13c:	mov	r0, r6
   1f140:	strd	r6, [sp, #64]	; 0x40
   1f144:	mov	r1, r7
   1f148:	mov	r7, #0
   1f14c:	bl	4f48c <warn@@Base+0x5894>
   1f150:	ldrb	r6, [sp, #144]	; 0x90
   1f154:	mov	r2, r4
   1f158:	mov	r3, r5
   1f15c:	ldrd	r4, [r8, fp]
   1f160:	strd	r6, [sp, #72]	; 0x48
   1f164:	ldr	r9, [sp, #72]	; 0x48
   1f168:	ldr	ip, [sp, #72]	; 0x48
   1f16c:	umull	r6, r7, r0, r9
   1f170:	mov	r9, #0
   1f174:	adds	r4, r4, r6
   1f178:	mla	r7, r1, ip, r7
   1f17c:	ldrd	r0, [sp, #64]	; 0x40
   1f180:	adc	r5, r5, r7
   1f184:	strd	r4, [r8, fp]
   1f188:	bl	4f48c <warn@@Base+0x5894>
   1f18c:	movw	r1, #21512	; 0x5408
   1f190:	mov	r0, r9
   1f194:	movt	r1, #5
   1f198:	strb	r2, [r8, #1516]	; 0x5ec
   1f19c:	mov	r2, #5
   1f1a0:	bl	12298 <dcgettext@plt>
   1f1a4:	ldrd	r2, [sp, #48]	; 0x30
   1f1a8:	str	r9, [sp]
   1f1ac:	mov	r5, r0
   1f1b0:	movw	r0, #53816	; 0xd238
   1f1b4:	movt	r0, #5
   1f1b8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f1bc:	ldrd	r2, [r8, fp]
   1f1c0:	str	r9, [sp]
   1f1c4:	mov	r4, r0
   1f1c8:	movw	r0, #41908	; 0xa3b4
   1f1cc:	movt	r0, #5
   1f1d0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f1d4:	ldrb	ip, [r8, #1516]	; 0x5ec
   1f1d8:	mov	r1, r5
   1f1dc:	mov	r2, r4
   1f1e0:	str	ip, [sp]
   1f1e4:	mov	r3, r0
   1f1e8:	mov	r0, #1
   1f1ec:	bl	125bc <__printf_chk@plt>
   1f1f0:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1f1f4:	movw	r1, #21476	; 0x53e4
   1f1f8:	mov	r0, #0
   1f1fc:	movt	r1, #5
   1f200:	b	1eecc <__assert_fail@plt+0xc6f4>
   1f204:	ldr	r3, [sp, #100]	; 0x64
   1f208:	mov	r2, #0
   1f20c:	mov	r0, r9
   1f210:	add	r1, sp, #116	; 0x74
   1f214:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f218:	mov	r2, #5
   1f21c:	ldr	sl, [sp, #116]	; 0x74
   1f220:	add	sl, r9, sl
   1f224:	mov	r4, r0
   1f228:	mov	r6, r1
   1f22c:	mov	r0, #0
   1f230:	movw	r1, #21624	; 0x5478
   1f234:	movt	r1, #5
   1f238:	bl	12298 <dcgettext@plt>
   1f23c:	mov	r1, #0
   1f240:	mov	r3, r6
   1f244:	mov	r2, r4
   1f248:	str	r1, [sp]
   1f24c:	mov	r5, r0
   1f250:	movw	r0, #53816	; 0xd238
   1f254:	movt	r0, #5
   1f258:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f25c:	mov	r1, r5
   1f260:	mov	r2, r0
   1f264:	mov	r0, #1
   1f268:	bl	125bc <__printf_chk@plt>
   1f26c:	str	r4, [r8, #1504]	; 0x5e0
   1f270:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1f274:	ldr	r3, [sp, #100]	; 0x64
   1f278:	mov	r2, #0
   1f27c:	mov	r0, r9
   1f280:	add	r1, sp, #116	; 0x74
   1f284:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f288:	mov	r2, #5
   1f28c:	ldr	sl, [sp, #116]	; 0x74
   1f290:	add	sl, r9, sl
   1f294:	mov	r4, r0
   1f298:	mov	r6, r1
   1f29c:	mov	r0, #0
   1f2a0:	movw	r1, #21572	; 0x5444
   1f2a4:	movt	r1, #5
   1f2a8:	bl	12298 <dcgettext@plt>
   1f2ac:	mov	r1, #0
   1f2b0:	mov	r3, r6
   1f2b4:	mov	r2, r4
   1f2b8:	str	r1, [sp]
   1f2bc:	mov	r5, r0
   1f2c0:	movw	r0, #11836	; 0x2e3c
   1f2c4:	movt	r0, #5
   1f2c8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f2cc:	mov	r1, r5
   1f2d0:	mov	r2, r0
   1f2d4:	mov	r0, #1
   1f2d8:	bl	125bc <__printf_chk@plt>
   1f2dc:	str	r4, [r8, #1496]	; 0x5d8
   1f2e0:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1f2e4:	ldr	r4, [r8, #1508]	; 0x5e4
   1f2e8:	mov	r0, #0
   1f2ec:	mov	r2, #5
   1f2f0:	movw	r1, #21644	; 0x548c
   1f2f4:	subs	r3, r4, r0
   1f2f8:	movt	r1, #5
   1f2fc:	rsbs	r4, r3, #0
   1f300:	mov	sl, r9
   1f304:	adcs	r4, r4, r3
   1f308:	bl	12298 <dcgettext@plt>
   1f30c:	mov	r1, #0
   1f310:	mov	r3, #0
   1f314:	uxtb	r2, r4
   1f318:	str	r1, [sp]
   1f31c:	mov	r5, r0
   1f320:	movw	r0, #11836	; 0x2e3c
   1f324:	movt	r0, #5
   1f328:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f32c:	mov	r1, r5
   1f330:	mov	r2, r0
   1f334:	mov	r0, #1
   1f338:	bl	125bc <__printf_chk@plt>
   1f33c:	str	r4, [r8, #1508]	; 0x5e4
   1f340:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1f344:	add	r4, sp, #116	; 0x74
   1f348:	ldr	r3, [sp, #100]	; 0x64
   1f34c:	mov	r0, r9
   1f350:	mov	r2, #0
   1f354:	mov	r1, r4
   1f358:	ldrb	r6, [sp, #146]	; 0x92
   1f35c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f360:	ldr	sl, [sp, #116]	; 0x74
   1f364:	ldr	ip, [sp, #100]	; 0x64
   1f368:	add	fp, r9, sl
   1f36c:	cmp	ip, fp
   1f370:	cmpne	r0, #0
   1f374:	mov	r3, r0
   1f378:	movne	r0, #0
   1f37c:	moveq	r0, #1
   1f380:	beq	1f390 <__assert_fail@plt+0xcbb8>
   1f384:	rsb	r2, fp, ip
   1f388:	cmp	r3, r2
   1f38c:	bls	2094c <__assert_fail@plt+0xe174>
   1f390:	mov	r2, #5
   1f394:	movw	r1, #20664	; 0x50b8
   1f398:	mov	r0, #0
   1f39c:	movt	r1, #5
   1f3a0:	bl	12298 <dcgettext@plt>
   1f3a4:	bl	49bf8 <warn@@Base>
   1f3a8:	ldr	sl, [sp, #116]	; 0x74
   1f3ac:	add	sl, r9, sl
   1f3b0:	b	1ed84 <__assert_fail@plt+0xc5ac>
   1f3b4:	mov	ip, #1488	; 0x5d0
   1f3b8:	ldrb	fp, [sp, #144]	; 0x90
   1f3bc:	ldrd	r4, [r8, ip]
   1f3c0:	mov	r2, #5
   1f3c4:	movw	r1, #20532	; 0x5034
   1f3c8:	mov	r0, #0
   1f3cc:	movt	r1, #5
   1f3d0:	umlal	r4, r5, fp, r7
   1f3d4:	strd	r4, [r8, ip]
   1f3d8:	str	ip, [sp, #44]	; 0x2c
   1f3dc:	bl	12298 <dcgettext@plt>
   1f3e0:	umull	r2, r3, r7, fp
   1f3e4:	mov	r7, #0
   1f3e8:	str	r7, [sp]
   1f3ec:	mov	r5, r0
   1f3f0:	movw	r0, #53816	; 0xd238
   1f3f4:	movt	r0, #5
   1f3f8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f3fc:	ldr	ip, [sp, #44]	; 0x2c
   1f400:	ldrd	r2, [r8, ip]
   1f404:	str	r7, [sp]
   1f408:	mov	r4, r0
   1f40c:	movw	r0, #41908	; 0xa3b4
   1f410:	movt	r0, #5
   1f414:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f418:	mov	r1, r5
   1f41c:	mov	r3, r4
   1f420:	mov	r2, sl
   1f424:	str	r0, [sp]
   1f428:	mov	r0, r6
   1f42c:	bl	125bc <__printf_chk@plt>
   1f430:	b	1ed18 <__assert_fail@plt+0xc540>
   1f434:	add	r3, sp, #112	; 0x70
   1f438:	ldr	r0, [sp, #88]	; 0x58
   1f43c:	str	r3, [sp]
   1f440:	mov	r1, sl
   1f444:	mov	r2, fp
   1f448:	ldr	r3, [sp, #96]	; 0x60
   1f44c:	bl	1b74c <__assert_fail@plt+0x8f74>
   1f450:	cmp	r0, #0
   1f454:	str	r0, [sp, #84]	; 0x54
   1f458:	beq	20d3c <__assert_fail@plt+0xe564>
   1f45c:	mov	r2, #5
   1f460:	movw	r1, #19720	; 0x4d08
   1f464:	mov	r0, #0
   1f468:	movt	r1, #5
   1f46c:	bl	12298 <dcgettext@plt>
   1f470:	ldr	r7, [sp, #56]	; 0x38
   1f474:	rsb	r2, r7, sl
   1f478:	mov	r1, r0
   1f47c:	mov	r0, #1
   1f480:	bl	125bc <__printf_chk@plt>
   1f484:	mov	r2, #5
   1f488:	movw	r1, #19760	; 0x4d30
   1f48c:	mov	r0, #0
   1f490:	movt	r1, #5
   1f494:	bl	12298 <dcgettext@plt>
   1f498:	ldr	r2, [sp, #120]	; 0x78
   1f49c:	mov	r1, r0
   1f4a0:	mov	r0, #1
   1f4a4:	bl	125bc <__printf_chk@plt>
   1f4a8:	mov	r2, #5
   1f4ac:	movw	r1, #19796	; 0x4d54
   1f4b0:	mov	r0, #0
   1f4b4:	movt	r1, #5
   1f4b8:	bl	12298 <dcgettext@plt>
   1f4bc:	ldrh	r2, [sp, #128]	; 0x80
   1f4c0:	mov	r1, r0
   1f4c4:	mov	r0, #1
   1f4c8:	bl	125bc <__printf_chk@plt>
   1f4cc:	mov	r2, #5
   1f4d0:	movw	r1, #19832	; 0x4d78
   1f4d4:	mov	r0, #0
   1f4d8:	movt	r1, #5
   1f4dc:	bl	12298 <dcgettext@plt>
   1f4e0:	ldr	r2, [sp, #136]	; 0x88
   1f4e4:	mov	r1, r0
   1f4e8:	mov	r0, #1
   1f4ec:	bl	125bc <__printf_chk@plt>
   1f4f0:	mov	r2, #5
   1f4f4:	movw	r1, #19868	; 0x4d9c
   1f4f8:	mov	r0, #0
   1f4fc:	movt	r1, #5
   1f500:	bl	12298 <dcgettext@plt>
   1f504:	ldrb	r2, [sp, #144]	; 0x90
   1f508:	mov	r1, r0
   1f50c:	mov	r0, #1
   1f510:	bl	125bc <__printf_chk@plt>
   1f514:	ldrh	r3, [sp, #128]	; 0x80
   1f518:	cmp	r3, #3
   1f51c:	bhi	1f9d4 <__assert_fail@plt+0xd1fc>
   1f520:	mov	r2, #5
   1f524:	movw	r1, #19940	; 0x4de4
   1f528:	mov	r0, #0
   1f52c:	movt	r1, #5
   1f530:	bl	12298 <dcgettext@plt>
   1f534:	ldrb	r2, [sp, #146]	; 0x92
   1f538:	mov	r1, r0
   1f53c:	mov	r0, #1
   1f540:	bl	125bc <__printf_chk@plt>
   1f544:	mov	r2, #5
   1f548:	movw	r1, #19976	; 0x4e08
   1f54c:	mov	r0, #0
   1f550:	movt	r1, #5
   1f554:	bl	12298 <dcgettext@plt>
   1f558:	ldr	r2, [sp, #148]	; 0x94
   1f55c:	mov	r1, r0
   1f560:	mov	r0, #1
   1f564:	bl	125bc <__printf_chk@plt>
   1f568:	mov	r2, #5
   1f56c:	movw	r1, #20012	; 0x4e2c
   1f570:	mov	r0, #0
   1f574:	movt	r1, #5
   1f578:	bl	12298 <dcgettext@plt>
   1f57c:	ldrb	r2, [sp, #152]	; 0x98
   1f580:	mov	r1, r0
   1f584:	mov	r0, #1
   1f588:	bl	125bc <__printf_chk@plt>
   1f58c:	mov	r2, #5
   1f590:	movw	r1, #20048	; 0x4e50
   1f594:	mov	r0, #0
   1f598:	movt	r1, #5
   1f59c:	bl	12298 <dcgettext@plt>
   1f5a0:	ldrb	r2, [sp, #153]	; 0x99
   1f5a4:	mov	r1, r0
   1f5a8:	mov	r0, #1
   1f5ac:	bl	125bc <__printf_chk@plt>
   1f5b0:	ldrb	r0, [sp, #152]	; 0x98
   1f5b4:	cmp	r0, #0
   1f5b8:	beq	1f9b4 <__assert_fail@plt+0xd1dc>
   1f5bc:	ldrb	r0, [sp, #153]	; 0x99
   1f5c0:	mov	ip, #1488	; 0x5d0
   1f5c4:	ldr	r8, [sp, #84]	; 0x54
   1f5c8:	mov	r5, #1
   1f5cc:	ldr	r9, [sp, #60]	; 0x3c
   1f5d0:	mov	r2, #0
   1f5d4:	add	r0, r8, r0
   1f5d8:	ldrb	r1, [sp, #146]	; 0x92
   1f5dc:	cmp	fp, r0
   1f5e0:	mov	r3, #0
   1f5e4:	mov	r0, #0
   1f5e8:	movw	r7, #1240	; 0x4d8
   1f5ec:	strd	r2, [r9, ip]
   1f5f0:	movt	r7, #7
   1f5f4:	str	r1, [r9, #1508]	; 0x5e4
   1f5f8:	strb	r0, [r9, #1516]	; 0x5ec
   1f5fc:	str	r0, [r9, #1504]	; 0x5e0
   1f600:	str	r0, [r9, #1512]	; 0x5e8
   1f604:	strb	r0, [r9, #1517]	; 0x5ed
   1f608:	str	r0, [r9, #1520]	; 0x5f0
   1f60c:	str	r5, [r9, #1496]	; 0x5d8
   1f610:	str	r5, [r9, #1500]	; 0x5dc
   1f614:	bls	20d50 <__assert_fail@plt+0xe578>
   1f618:	mov	r2, #5
   1f61c:	movw	r1, #20176	; 0x4ed0
   1f620:	movt	r1, #5
   1f624:	bl	12298 <dcgettext@plt>
   1f628:	mov	r1, r0
   1f62c:	mov	r0, r5
   1f630:	bl	125bc <__printf_chk@plt>
   1f634:	ldrb	r3, [sp, #153]	; 0x99
   1f638:	cmp	r3, #1
   1f63c:	ble	1f680 <__assert_fail@plt+0xcea8>
   1f640:	ldr	ip, [sp, #84]	; 0x54
   1f644:	sub	r4, ip, #1
   1f648:	mov	r2, #5
   1f64c:	movw	r1, #20188	; 0x4edc
   1f650:	mov	r0, #0
   1f654:	movt	r1, #5
   1f658:	bl	12298 <dcgettext@plt>
   1f65c:	mov	r2, r5
   1f660:	ldrb	r3, [r4, #1]!
   1f664:	add	r5, r5, #1
   1f668:	mov	r1, r0
   1f66c:	mov	r0, #1
   1f670:	bl	125bc <__printf_chk@plt>
   1f674:	ldrb	r3, [sp, #153]	; 0x99
   1f678:	cmp	r5, r3
   1f67c:	blt	1f648 <__assert_fail@plt+0xce70>
   1f680:	ldr	r4, [sp, #84]	; 0x54
   1f684:	sub	r3, r3, #1
   1f688:	add	r5, r4, r3
   1f68c:	ldrb	r0, [r4, r3]
   1f690:	cmp	r0, #0
   1f694:	bne	1f720 <__assert_fail@plt+0xcf48>
   1f698:	movw	r1, #20216	; 0x4ef8
   1f69c:	mov	r2, #5
   1f6a0:	movt	r1, #5
   1f6a4:	bl	12298 <dcgettext@plt>
   1f6a8:	mov	r1, r0
   1f6ac:	mov	r0, #1
   1f6b0:	bl	125bc <__printf_chk@plt>
   1f6b4:	ldrb	r0, [r5, #1]
   1f6b8:	add	r4, r5, #1
   1f6bc:	cmp	r0, #0
   1f6c0:	bne	1f7d0 <__assert_fail@plt+0xcff8>
   1f6c4:	movw	r1, #20304	; 0x4f50
   1f6c8:	mov	r2, #5
   1f6cc:	movt	r1, #5
   1f6d0:	bl	12298 <dcgettext@plt>
   1f6d4:	mov	r1, r0
   1f6d8:	mov	r0, #1
   1f6dc:	bl	125bc <__printf_chk@plt>
   1f6e0:	movw	r9, #976	; 0x3d0
   1f6e4:	movt	r9, #7
   1f6e8:	mov	r0, #10
   1f6ec:	add	sl, r4, #1
   1f6f0:	ldr	r1, [r9]
   1f6f4:	bl	12334 <_IO_putc@plt>
   1f6f8:	ldr	lr, [sp, #96]	; 0x60
   1f6fc:	ldr	ip, [pc, #3408]	; 20454 <__assert_fail@plt+0xdc7c>
   1f700:	ldr	r4, [sp, #112]	; 0x70
   1f704:	ldm	lr!, {r0, r1, r2, r3}
   1f708:	stmia	ip!, {r0, r1, r2, r3}
   1f70c:	ldm	lr!, {r0, r1, r2, r3}
   1f710:	stmia	ip!, {r0, r1, r2, r3}
   1f714:	ldm	lr, {r0, r1}
   1f718:	stm	ip, {r0, r1}
   1f71c:	b	1eba8 <__assert_fail@plt+0xc3d0>
   1f720:	mov	r2, #5
   1f724:	movw	r1, #20252	; 0x4f1c
   1f728:	mov	r0, #0
   1f72c:	movt	r1, #5
   1f730:	bl	12298 <dcgettext@plt>
   1f734:	ldr	r6, [sp, #56]	; 0x38
   1f738:	rsb	r2, r6, r5
   1f73c:	mov	r1, r0
   1f740:	mov	r0, #1
   1f744:	bl	125bc <__printf_chk@plt>
   1f748:	cmp	fp, r5
   1f74c:	bls	1f7b0 <__assert_fail@plt+0xcfd8>
   1f750:	ldrb	r3, [r5]
   1f754:	cmp	r3, #0
   1f758:	beq	1f7b0 <__assert_fail@plt+0xcfd8>
   1f75c:	mov	r4, #0
   1f760:	b	1f770 <__assert_fail@plt+0xcf98>
   1f764:	ldrb	r3, [r5]
   1f768:	cmp	r3, #0
   1f76c:	beq	1f7b0 <__assert_fail@plt+0xcfd8>
   1f770:	rsb	r6, r5, fp
   1f774:	add	r4, r4, #1
   1f778:	str	r5, [sp]
   1f77c:	movw	r1, #20292	; 0x4f44
   1f780:	mov	r2, r4
   1f784:	mov	r3, r6
   1f788:	movt	r1, #5
   1f78c:	mov	r0, #1
   1f790:	bl	125bc <__printf_chk@plt>
   1f794:	mov	r0, r5
   1f798:	mov	r1, r6
   1f79c:	bl	12604 <strnlen@plt>
   1f7a0:	add	r0, r0, #1
   1f7a4:	add	r5, r5, r0
   1f7a8:	cmp	fp, r5
   1f7ac:	bhi	1f764 <__assert_fail@plt+0xcf8c>
   1f7b0:	sub	r3, fp, #1
   1f7b4:	cmp	r5, r3
   1f7b8:	bcc	1f6b4 <__assert_fail@plt+0xcedc>
   1f7bc:	mov	ip, #0
   1f7c0:	mov	r9, fp
   1f7c4:	ldr	r7, [sp, #56]	; 0x38
   1f7c8:	str	ip, [sp, #92]	; 0x5c
   1f7cc:	b	20c58 <__assert_fail@plt+0xe480>
   1f7d0:	mov	r2, #5
   1f7d4:	movw	r1, #20340	; 0x4f74
   1f7d8:	mov	r0, #0
   1f7dc:	movt	r1, #5
   1f7e0:	bl	12298 <dcgettext@plt>
   1f7e4:	ldr	r8, [sp, #56]	; 0x38
   1f7e8:	rsb	r2, r8, r4
   1f7ec:	mov	r1, r0
   1f7f0:	mov	r0, #1
   1f7f4:	bl	125bc <__printf_chk@plt>
   1f7f8:	mov	r2, #5
   1f7fc:	movw	r1, #20380	; 0x4f9c
   1f800:	mov	r0, #0
   1f804:	movt	r1, #5
   1f808:	bl	12298 <dcgettext@plt>
   1f80c:	mov	r1, r0
   1f810:	mov	r0, #1
   1f814:	bl	125bc <__printf_chk@plt>
   1f818:	cmp	fp, r4
   1f81c:	bls	1f6e0 <__assert_fail@plt+0xcf08>
   1f820:	ldrb	r3, [r5, #1]
   1f824:	cmp	r3, #0
   1f828:	beq	1f6e0 <__assert_fail@plt+0xcf08>
   1f82c:	add	sl, sp, #116	; 0x74
   1f830:	mov	ip, r4
   1f834:	mov	r6, #0
   1f838:	str	r7, [sp, #48]	; 0x30
   1f83c:	ldr	r9, [sp, #60]	; 0x3c
   1f840:	b	1f858 <__assert_fail@plt+0xd080>
   1f844:	bls	1f9ac <__assert_fail@plt+0xd1d4>
   1f848:	ldrb	r3, [r5, r8]
   1f84c:	cmp	r3, #0
   1f850:	beq	1f9ac <__assert_fail@plt+0xd1d4>
   1f854:	mov	ip, r4
   1f858:	ldr	r2, [r9, #1520]	; 0x5f0
   1f85c:	rsb	r7, r4, fp
   1f860:	mov	r0, #1
   1f864:	movw	r1, #20408	; 0x4fb8
   1f868:	add	r2, r2, r0
   1f86c:	movt	r1, #5
   1f870:	str	r2, [r9, #1520]	; 0x5f0
   1f874:	str	ip, [sp, #44]	; 0x2c
   1f878:	bl	125bc <__printf_chk@plt>
   1f87c:	mov	r1, r7
   1f880:	mov	r0, r4
   1f884:	bl	12604 <strnlen@plt>
   1f888:	mov	r2, #0
   1f88c:	mov	r3, fp
   1f890:	mov	r1, sl
   1f894:	add	r0, r0, #1
   1f898:	add	r4, r4, r0
   1f89c:	mov	r0, r4
   1f8a0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f8a4:	str	r6, [sp]
   1f8a8:	mov	r3, r1
   1f8ac:	mov	r2, r0
   1f8b0:	movw	r0, #53816	; 0xd238
   1f8b4:	movt	r0, #5
   1f8b8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f8bc:	movw	r1, #20416	; 0x4fc0
   1f8c0:	movt	r1, #5
   1f8c4:	mov	r2, r0
   1f8c8:	mov	r0, #1
   1f8cc:	bl	125bc <__printf_chk@plt>
   1f8d0:	ldr	r5, [sp, #116]	; 0x74
   1f8d4:	mov	r2, #0
   1f8d8:	mov	r3, fp
   1f8dc:	add	r4, r4, r5
   1f8e0:	mov	r1, sl
   1f8e4:	mov	r0, r4
   1f8e8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f8ec:	str	r6, [sp]
   1f8f0:	mov	r3, r1
   1f8f4:	mov	r2, r0
   1f8f8:	movw	r0, #53816	; 0xd238
   1f8fc:	movt	r0, #5
   1f900:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f904:	movw	r1, #20416	; 0x4fc0
   1f908:	movt	r1, #5
   1f90c:	mov	r2, r0
   1f910:	mov	r0, #1
   1f914:	bl	125bc <__printf_chk@plt>
   1f918:	ldr	r5, [sp, #116]	; 0x74
   1f91c:	mov	r2, #0
   1f920:	mov	r3, fp
   1f924:	add	r5, r4, r5
   1f928:	mov	r1, sl
   1f92c:	mov	r0, r5
   1f930:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1f934:	str	r6, [sp]
   1f938:	mov	r3, r1
   1f93c:	mov	r2, r0
   1f940:	movw	r0, #53816	; 0xd238
   1f944:	movt	r0, #5
   1f948:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1f94c:	movw	r1, #20416	; 0x4fc0
   1f950:	movt	r1, #5
   1f954:	mov	r2, r0
   1f958:	mov	r0, #1
   1f95c:	bl	125bc <__printf_chk@plt>
   1f960:	ldr	ip, [sp, #44]	; 0x2c
   1f964:	ldr	r8, [sp, #116]	; 0x74
   1f968:	mov	r2, r7
   1f96c:	movw	r1, #20420	; 0x4fc4
   1f970:	mov	r0, #1
   1f974:	mov	r3, ip
   1f978:	movt	r1, #5
   1f97c:	add	r4, r5, r8
   1f980:	bl	125bc <__printf_chk@plt>
   1f984:	cmp	fp, r4
   1f988:	bne	1f844 <__assert_fail@plt+0xd06c>
   1f98c:	mov	r2, #5
   1f990:	movw	r1, #20428	; 0x4fcc
   1f994:	mov	r0, #0
   1f998:	movt	r1, #5
   1f99c:	ldr	r7, [sp, #48]	; 0x30
   1f9a0:	bl	12298 <dcgettext@plt>
   1f9a4:	bl	49bf8 <warn@@Base>
   1f9a8:	b	1f6e0 <__assert_fail@plt+0xcf08>
   1f9ac:	ldr	r7, [sp, #48]	; 0x30
   1f9b0:	b	1f6e0 <__assert_fail@plt+0xcf08>
   1f9b4:	mov	r2, #5
   1f9b8:	movw	r1, #20084	; 0x4e74
   1f9bc:	movt	r1, #5
   1f9c0:	bl	12298 <dcgettext@plt>
   1f9c4:	bl	49bf8 <warn@@Base>
   1f9c8:	mov	r3, #1
   1f9cc:	strb	r3, [sp, #152]	; 0x98
   1f9d0:	b	1f5bc <__assert_fail@plt+0xcde4>
   1f9d4:	mov	r2, #5
   1f9d8:	movw	r1, #19904	; 0x4dc0
   1f9dc:	mov	r0, #0
   1f9e0:	movt	r1, #5
   1f9e4:	bl	12298 <dcgettext@plt>
   1f9e8:	ldrb	r2, [sp, #145]	; 0x91
   1f9ec:	mov	r1, r0
   1f9f0:	mov	r0, #1
   1f9f4:	bl	125bc <__printf_chk@plt>
   1f9f8:	b	1f520 <__assert_fail@plt+0xcd48>
   1f9fc:	mov	r2, #5
   1fa00:	movw	r1, #21900	; 0x558c
   1fa04:	mov	r0, #0
   1fa08:	movt	r1, #5
   1fa0c:	bl	12298 <dcgettext@plt>
   1fa10:	mov	r2, r4
   1fa14:	mov	r1, r0
   1fa18:	mov	r0, #1
   1fa1c:	bl	125bc <__printf_chk@plt>
   1fa20:	ldr	r5, [sp, #84]	; 0x54
   1fa24:	cmp	r5, #0
   1fa28:	beq	20c90 <__assert_fail@plt+0xe4b8>
   1fa2c:	add	r4, r5, r4
   1fa30:	ldrb	r5, [r4, #-1]
   1fa34:	cmp	r5, #0
   1fa38:	beq	20c90 <__assert_fail@plt+0xe4b8>
   1fa3c:	add	r4, sp, #116	; 0x74
   1fa40:	mov	r6, #0
   1fa44:	ldr	r7, [sp, #100]	; 0x64
   1fa48:	b	1fa70 <__assert_fail@plt+0xd298>
   1fa4c:	movw	r1, #21936	; 0x55b0
   1fa50:	movw	r3, #10648	; 0x2998
   1fa54:	movt	r1, #5
   1fa58:	movt	r3, #5
   1fa5c:	mov	r0, #1
   1fa60:	sub	r5, r5, #1
   1fa64:	bl	125bc <__printf_chk@plt>
   1fa68:	ldr	r3, [sp, #116]	; 0x74
   1fa6c:	add	r9, r9, r3
   1fa70:	mov	r2, #0
   1fa74:	mov	r3, r7
   1fa78:	mov	r0, r9
   1fa7c:	mov	r1, r4
   1fa80:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1fa84:	str	r6, [sp]
   1fa88:	mov	r2, r0
   1fa8c:	mov	r3, r1
   1fa90:	movw	r0, #41908	; 0xa3b4
   1fa94:	movt	r0, #5
   1fa98:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1fa9c:	cmp	r5, #1
   1faa0:	mov	r2, r0
   1faa4:	bne	1fa4c <__assert_fail@plt+0xd274>
   1faa8:	mov	r0, r5
   1faac:	movw	r1, #21936	; 0x55b0
   1fab0:	movw	r3, #11856	; 0x2e50
   1fab4:	movt	r1, #5
   1fab8:	movt	r3, #5
   1fabc:	bl	125bc <__printf_chk@plt>
   1fac0:	ldr	sl, [sp, #116]	; 0x74
   1fac4:	add	sl, r9, sl
   1fac8:	b	20c94 <__assert_fail@plt+0xe4bc>
   1facc:	mov	r1, #2
   1fad0:	movw	r3, #3472	; 0xd90
   1fad4:	movt	r3, #7
   1fad8:	mov	r0, r9
   1fadc:	ldr	r3, [r3]
   1fae0:	blx	r3
   1fae4:	mov	r4, r0
   1fae8:	mov	r5, r1
   1faec:	b	1ef28 <__assert_fail@plt+0xc750>
   1faf0:	ldrb	r0, [r8, #1516]	; 0x5ec
   1faf4:	mov	r1, #0
   1faf8:	ldrd	r4, [sp, #48]	; 0x30
   1fafc:	mov	r2, #0
   1fb00:	mov	r3, #0
   1fb04:	mov	r7, #0
   1fb08:	adds	r4, r4, r0
   1fb0c:	mov	sl, r9
   1fb10:	adc	r5, r5, r1
   1fb14:	mov	r9, #1488	; 0x5d0
   1fb18:	mov	r0, r4
   1fb1c:	mov	r1, r5
   1fb20:	bl	4f48c <warn@@Base+0x5894>
   1fb24:	ldrb	r6, [sp, #144]	; 0x90
   1fb28:	mov	r2, #0
   1fb2c:	mov	r3, #0
   1fb30:	strd	r6, [sp, #64]	; 0x40
   1fb34:	ldr	ip, [sp, #64]	; 0x40
   1fb38:	umull	r6, r7, r0, ip
   1fb3c:	mov	r0, r4
   1fb40:	mla	r7, r1, ip, r7
   1fb44:	mov	r1, r5
   1fb48:	ldrd	r4, [r8, r9]
   1fb4c:	adds	r4, r4, r6
   1fb50:	adc	r5, r5, r7
   1fb54:	strd	r4, [r8, r9]
   1fb58:	bl	4f48c <warn@@Base+0x5894>
   1fb5c:	movw	r1, #21728	; 0x54e0
   1fb60:	mov	r0, fp
   1fb64:	movt	r1, #5
   1fb68:	strb	r2, [r8, #1516]	; 0x5ec
   1fb6c:	mov	r2, #5
   1fb70:	bl	12298 <dcgettext@plt>
   1fb74:	ldrd	r2, [sp, #48]	; 0x30
   1fb78:	str	fp, [sp]
   1fb7c:	mov	r5, r0
   1fb80:	movw	r0, #53816	; 0xd238
   1fb84:	movt	r0, #5
   1fb88:	bl	1acc4 <__assert_fail@plt+0x84ec>
   1fb8c:	ldrd	r2, [r8, r9]
   1fb90:	str	fp, [sp]
   1fb94:	mov	r4, r0
   1fb98:	movw	r0, #41908	; 0xa3b4
   1fb9c:	b	1f1cc <__assert_fail@plt+0xc9f4>
   1fba0:	mov	r2, #5
   1fba4:	movw	r1, #21944	; 0x55b8
   1fba8:	mov	r0, #0
   1fbac:	movt	r1, #5
   1fbb0:	bl	12298 <dcgettext@plt>
   1fbb4:	ldr	r6, [sp, #88]	; 0x58
   1fbb8:	ldr	r2, [r6, #8]
   1fbbc:	mov	r1, r0
   1fbc0:	mov	r0, #1
   1fbc4:	bl	125bc <__printf_chk@plt>
   1fbc8:	cmp	r7, r9
   1fbcc:	ldrcs	r7, [sp, #92]	; 0x5c
   1fbd0:	eorcs	r0, r7, #1
   1fbd4:	bcs	1ee18 <__assert_fail@plt+0xc640>
   1fbd8:	movw	sl, #3420	; 0xd5c
   1fbdc:	movt	sl, #7
   1fbe0:	movw	r8, #1240	; 0x4d8
   1fbe4:	add	ip, sp, #120	; 0x78
   1fbe8:	movt	r8, #7
   1fbec:	str	ip, [sp, #96]	; 0x60
   1fbf0:	str	r8, [sp, #60]	; 0x3c
   1fbf4:	ldr	r5, [sp, #88]	; 0x58
   1fbf8:	movw	r1, #19604	; 0x4c94
   1fbfc:	mov	r2, #12
   1fc00:	movt	r1, #5
   1fc04:	ldr	r4, [r5, #8]
   1fc08:	mov	r0, r4
   1fc0c:	bl	12784 <strncmp@plt>
   1fc10:	subs	r6, r0, #0
   1fc14:	bne	2045c <__assert_fail@plt+0xdc84>
   1fc18:	mov	r0, r4
   1fc1c:	movw	r1, #19620	; 0x4ca4
   1fc20:	movt	r1, #5
   1fc24:	bl	12178 <strcmp@plt>
   1fc28:	cmp	r0, #0
   1fc2c:	beq	2045c <__assert_fail@plt+0xdc84>
   1fc30:	movw	r4, #1240	; 0x4d8
   1fc34:	movt	r4, #7
   1fc38:	add	ip, r4, #1520	; 0x5f0
   1fc3c:	ldr	lr, [sp, #96]	; 0x60
   1fc40:	add	ip, ip, #8
   1fc44:	str	r9, [sp, #112]	; 0x70
   1fc48:	ldm	ip!, {r0, r1, r2, r3}
   1fc4c:	stmia	lr!, {r0, r1, r2, r3}
   1fc50:	ldm	ip!, {r0, r1, r2, r3}
   1fc54:	stmia	lr!, {r0, r1, r2, r3}
   1fc58:	ldm	ip, {r0, r1}
   1fc5c:	stm	lr, {r0, r1}
   1fc60:	ldrb	r0, [sp, #152]	; 0x98
   1fc64:	cmp	r0, #0
   1fc68:	beq	20ca8 <__assert_fail@plt+0xe4d0>
   1fc6c:	ldrb	r3, [sp, #146]	; 0x92
   1fc70:	mov	r1, #1488	; 0x5d0
   1fc74:	mov	r5, r9
   1fc78:	mov	r2, #0
   1fc7c:	str	r6, [sp, #48]	; 0x30
   1fc80:	str	r3, [r4, #1508]	; 0x5e4
   1fc84:	mov	r3, #0
   1fc88:	str	r6, [sp, #84]	; 0x54
   1fc8c:	strd	r2, [r4, r1]
   1fc90:	mov	r3, #1
   1fc94:	str	r6, [sp, #56]	; 0x38
   1fc98:	str	r6, [sp, #80]	; 0x50
   1fc9c:	strb	r6, [r4, #1516]	; 0x5ec
   1fca0:	str	r6, [r4, #1504]	; 0x5e0
   1fca4:	str	r6, [r4, #1512]	; 0x5e8
   1fca8:	strb	r6, [r4, #1517]	; 0x5ed
   1fcac:	str	r6, [r4, #1520]	; 0x5f0
   1fcb0:	str	r3, [r4, #1496]	; 0x5d8
   1fcb4:	str	r3, [r4, #1500]	; 0x5dc
   1fcb8:	cmp	r7, r5
   1fcbc:	movwcs	r6, #976	; 0x3d0
   1fcc0:	movtcs	r6, #7
   1fcc4:	strcs	r6, [sp, #72]	; 0x48
   1fcc8:	bcs	1fea8 <__assert_fail@plt+0xd6d0>
   1fccc:	str	r9, [sp, #64]	; 0x40
   1fcd0:	movw	r8, #976	; 0x3d0
   1fcd4:	ldr	r9, [sp, #56]	; 0x38
   1fcd8:	movt	r8, #7
   1fcdc:	mov	r3, r5
   1fce0:	str	r8, [sp, #72]	; 0x48
   1fce4:	str	r9, [sp, #100]	; 0x64
   1fce8:	b	1fe30 <__assert_fail@plt+0xd658>
   1fcec:	rsb	r5, r0, r5
   1fcf0:	ldrb	r7, [sp, #152]	; 0x98
   1fcf4:	uxtb	r5, r5
   1fcf8:	mov	r1, r7
   1fcfc:	mov	r0, r5
   1fd00:	bl	4f040 <warn@@Base+0x5448>
   1fd04:	ldrb	r8, [sp, #145]	; 0x91
   1fd08:	cmp	r8, #1
   1fd0c:	uxtb	r0, r0
   1fd10:	beq	203e8 <__assert_fail@plt+0xdc10>
   1fd14:	ldrb	r3, [r4, #1516]	; 0x5ec
   1fd18:	mov	r1, r8
   1fd1c:	mov	fp, #1488	; 0x5d0
   1fd20:	add	r9, r0, r3
   1fd24:	mov	r0, r9
   1fd28:	bl	4f040 <warn@@Base+0x5448>
   1fd2c:	ldrb	ip, [sp, #144]	; 0x90
   1fd30:	ldrd	r2, [r4, fp]
   1fd34:	mov	r1, r8
   1fd38:	mul	ip, ip, r0
   1fd3c:	mov	r0, r9
   1fd40:	adds	r2, r2, ip
   1fd44:	adc	r3, r3, #0
   1fd48:	strd	r2, [r4, fp]
   1fd4c:	bl	4f22c <warn@@Base+0x5634>
   1fd50:	strb	r1, [r4, #1516]	; 0x5ec
   1fd54:	mov	r1, r7
   1fd58:	mov	r0, r5
   1fd5c:	bl	4f22c <warn@@Base+0x5634>
   1fd60:	ldr	r2, [sp, #148]	; 0x94
   1fd64:	ldr	r3, [r4, #1500]	; 0x5dc
   1fd68:	mov	r7, r6
   1fd6c:	uxtab	r1, r2, r1
   1fd70:	add	r3, r1, r3
   1fd74:	str	r3, [r4, #1500]	; 0x5dc
   1fd78:	ldr	r9, [sp, #100]	; 0x64
   1fd7c:	cmp	r9, #0
   1fd80:	beq	20378 <__assert_fail@plt+0xdba0>
   1fd84:	ldr	r3, [r4, #1496]	; 0x5d8
   1fd88:	sub	r3, r3, #-268435455	; 0xf0000001
   1fd8c:	ldr	r8, [r9, r3, lsl #4]
   1fd90:	mov	r0, r8
   1fd94:	bl	124e4 <strlen@plt>
   1fd98:	cmp	r0, #35	; 0x23
   1fd9c:	mov	fp, r0
   1fda0:	addls	fp, r0, #1
   1fda4:	bls	20384 <__assert_fail@plt+0xdbac>
   1fda8:	ldr	r3, [sl]
   1fdac:	cmp	r3, #0
   1fdb0:	beq	20428 <__assert_fail@plt+0xdc50>
   1fdb4:	add	fp, fp, #1
   1fdb8:	mov	r0, fp
   1fdbc:	bl	12358 <xmalloc@plt>
   1fdc0:	mov	r1, r8
   1fdc4:	mov	r2, fp
   1fdc8:	mov	r6, r0
   1fdcc:	bl	12598 <strncpy@plt>
   1fdd0:	ldr	r3, [sl]
   1fdd4:	cmp	r3, #0
   1fdd8:	beq	2039c <__assert_fail@plt+0xdbc4>
   1fddc:	ldrb	r0, [sp, #145]	; 0x91
   1fde0:	mov	r2, #1488	; 0x5d0
   1fde4:	ldr	r3, [r4, #1500]	; 0x5dc
   1fde8:	cmp	r0, #1
   1fdec:	beq	20778 <__assert_fail@plt+0xdfa0>
   1fdf0:	ldrd	r0, [r4, r2]
   1fdf4:	strd	r0, [sp]
   1fdf8:	movw	r1, #22300	; 0x571c
   1fdfc:	ldrb	r2, [r4, #1516]	; 0x5ec
   1fe00:	movt	r1, #5
   1fe04:	mov	r0, #1
   1fe08:	str	r2, [sp, #8]
   1fe0c:	mov	r2, r6
   1fe10:	bl	125bc <__printf_chk@plt>
   1fe14:	cmp	r5, #1
   1fe18:	beq	203dc <__assert_fail@plt+0xdc04>
   1fe1c:	mov	r0, r6
   1fe20:	bl	121f0 <free@plt>
   1fe24:	ldr	r3, [sp, #112]	; 0x70
   1fe28:	cmp	r3, r7
   1fe2c:	bls	1fe9c <__assert_fail@plt+0xd6c4>
   1fe30:	ldrb	r5, [r7]
   1fe34:	add	r6, r7, #1
   1fe38:	ldrb	r0, [sp, #153]	; 0x99
   1fe3c:	cmp	r5, r0
   1fe40:	bcs	1fcec <__assert_fail@plt+0xd514>
   1fe44:	cmp	r5, #12
   1fe48:	ldrls	pc, [pc, r5, lsl #2]
   1fe4c:	b	20794 <__assert_fail@plt+0xdfbc>
   1fe50:	strdeq	pc, [r1], -r4
   1fe54:	andeq	pc, r1, r4, lsl #29
   1fe58:	andeq	r0, r2, r4, ror r1
   1fe5c:	andeq	r0, r2, r8, asr #2
   1fe60:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fe64:	andeq	r0, r2, ip, lsr #1
   1fe68:	muleq	r2, r4, r0
   1fe6c:	andeq	r0, r2, r4, lsl #1
   1fe70:	andeq	r0, r2, r4, lsr #32
   1fe74:	ldrdeq	pc, [r1], -r4
   1fe78:	andeq	pc, r1, r4, lsl #29
   1fe7c:	andeq	pc, r1, r4, lsl #29
   1fe80:	andeq	pc, r1, ip, lsl #31
   1fe84:	mov	r7, r6
   1fe88:	cmp	r5, #1
   1fe8c:	beq	1fd78 <__assert_fail@plt+0xd5a0>
   1fe90:	ldr	r3, [sp, #112]	; 0x70
   1fe94:	cmp	r3, r7
   1fe98:	bhi	1fe30 <__assert_fail@plt+0xd658>
   1fe9c:	ldr	r4, [sp, #100]	; 0x64
   1fea0:	ldr	r9, [sp, #64]	; 0x40
   1fea4:	str	r4, [sp, #56]	; 0x38
   1fea8:	ldr	r5, [sp, #56]	; 0x38
   1feac:	cmp	r5, #0
   1feb0:	beq	1febc <__assert_fail@plt+0xd6e4>
   1feb4:	mov	r0, r5
   1feb8:	bl	121f0 <free@plt>
   1febc:	ldr	r6, [sp, #48]	; 0x30
   1fec0:	cmp	r6, #0
   1fec4:	beq	1fed0 <__assert_fail@plt+0xd6f8>
   1fec8:	mov	r0, r6
   1fecc:	bl	121f0 <free@plt>
   1fed0:	ldr	r8, [sp, #72]	; 0x48
   1fed4:	mov	r0, #10
   1fed8:	ldr	r1, [r8]
   1fedc:	bl	12334 <_IO_putc@plt>
   1fee0:	cmp	r9, r7
   1fee4:	bhi	1fbf4 <__assert_fail@plt+0xd41c>
   1fee8:	ldr	r9, [sp, #92]	; 0x5c
   1feec:	eor	r0, r9, #1
   1fef0:	b	1ee18 <__assert_fail@plt+0xc640>
   1fef4:	add	r8, sp, #116	; 0x74
   1fef8:	mov	r2, #0
   1fefc:	mov	r0, r6
   1ff00:	mov	r1, r8
   1ff04:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1ff08:	ldr	r7, [sp, #116]	; 0x74
   1ff0c:	subs	r2, r0, #0
   1ff10:	beq	208b4 <__assert_fail@plt+0xe0dc>
   1ff14:	ldrb	r5, [r6, r7]
   1ff18:	add	fp, r6, r7
   1ff1c:	add	fp, fp, #1
   1ff20:	add	r7, r2, r7
   1ff24:	sub	r3, r5, #1
   1ff28:	cmp	r3, #21
   1ff2c:	ldrls	pc, [pc, r3, lsl #2]
   1ff30:	b	20344 <__assert_fail@plt+0xdb6c>
   1ff34:	andeq	r0, r2, r0, lsl #6
   1ff38:	andeq	r0, r2, r0, ror #3
   1ff3c:	andeq	r0, r2, r8, asr r2
   1ff40:	andeq	r0, r2, r0, asr r2
   1ff44:	andeq	r0, r2, r4, asr #6
   1ff48:	andeq	r0, r2, r4, asr #6
   1ff4c:	andeq	r0, r2, r4, asr #6
   1ff50:	andeq	r0, r2, r4, asr #6
   1ff54:	andeq	r0, r2, r4, asr #6
   1ff58:	andeq	r0, r2, r4, asr #6
   1ff5c:	andeq	r0, r2, r4, asr #6
   1ff60:	andeq	r0, r2, r4, asr #6
   1ff64:	andeq	r0, r2, r4, asr #6
   1ff68:	andeq	r0, r2, r4, asr #6
   1ff6c:	andeq	r0, r2, r4, asr #6
   1ff70:	andeq	r0, r2, r4, asr #6
   1ff74:	andeq	r0, r2, r4, asr #6
   1ff78:	andeq	r0, r2, r4, asr #6
   1ff7c:	andeq	r0, r2, r4, asr #6
   1ff80:	andeq	r0, r2, r4, asr #6
   1ff84:	andeq	r0, r2, r4, asr #6
   1ff88:	andeq	r0, r2, r0, asr r2
   1ff8c:	ldr	r3, [sp, #64]	; 0x40
   1ff90:	mov	r0, r6
   1ff94:	add	r1, sp, #116	; 0x74
   1ff98:	mov	r2, #0
   1ff9c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   1ffa0:	mov	r2, #5
   1ffa4:	movw	r1, #22208	; 0x56c0
   1ffa8:	movt	r1, #5
   1ffac:	ldr	r7, [sp, #116]	; 0x74
   1ffb0:	add	r7, r6, r7
   1ffb4:	mov	r5, r0
   1ffb8:	mov	r0, #0
   1ffbc:	bl	12298 <dcgettext@plt>
   1ffc0:	mov	r2, r5
   1ffc4:	mov	r1, r0
   1ffc8:	mov	r0, #1
   1ffcc:	bl	125bc <__printf_chk@plt>
   1ffd0:	b	1fe24 <__assert_fail@plt+0xd64c>
   1ffd4:	ldr	r5, [sp, #64]	; 0x40
   1ffd8:	add	r7, r7, #3
   1ffdc:	cmp	r5, r7
   1ffe0:	bhi	20874 <__assert_fail@plt+0xe09c>
   1ffe4:	cmp	r5, r6
   1ffe8:	bls	1fffc <__assert_fail@plt+0xd824>
   1ffec:	rsb	r1, r6, r5
   1fff0:	sub	r3, r1, #1
   1fff4:	cmp	r3, #7
   1fff8:	bls	20878 <__assert_fail@plt+0xe0a0>
   1fffc:	mov	r0, #0
   20000:	mov	r1, #0
   20004:	mov	ip, #1488	; 0x5d0
   20008:	mov	lr, #0
   2000c:	ldrd	r2, [r4, ip]
   20010:	strb	lr, [r4, #1516]	; 0x5ec
   20014:	adds	r2, r2, r0
   20018:	adc	r3, r3, r1
   2001c:	strd	r2, [r4, ip]
   20020:	b	1fe24 <__assert_fail@plt+0xd64c>
   20024:	rsb	r0, r0, #255	; 0xff
   20028:	ldrb	r1, [sp, #152]	; 0x98
   2002c:	bl	4f24c <warn@@Base+0x5654>
   20030:	ldrb	r8, [sp, #145]	; 0x91
   20034:	cmp	r8, #1
   20038:	beq	208d0 <__assert_fail@plt+0xe0f8>
   2003c:	ldrb	r3, [r4, #1516]	; 0x5ec
   20040:	mov	r7, r6
   20044:	mov	r1, r8
   20048:	mov	r5, #1488	; 0x5d0
   2004c:	add	r6, r0, r3
   20050:	mov	r0, r6
   20054:	bl	4f040 <warn@@Base+0x5448>
   20058:	ldrb	ip, [sp, #144]	; 0x90
   2005c:	ldrd	r2, [r4, r5]
   20060:	mov	r1, r8
   20064:	mul	ip, ip, r0
   20068:	mov	r0, r6
   2006c:	adds	r2, r2, ip
   20070:	adc	r3, r3, #0
   20074:	strd	r2, [r4, r5]
   20078:	bl	4f22c <warn@@Base+0x5634>
   2007c:	strb	r1, [r4, #1516]	; 0x5ec
   20080:	b	1fe24 <__assert_fail@plt+0xd64c>
   20084:	mov	r3, #1
   20088:	mov	r7, r6
   2008c:	str	r3, [r4, #1512]	; 0x5e8
   20090:	b	1fe24 <__assert_fail@plt+0xd64c>
   20094:	ldr	r3, [r4, #1508]	; 0x5e4
   20098:	mov	r7, r6
   2009c:	rsbs	r3, r3, #1
   200a0:	movcc	r3, #0
   200a4:	str	r3, [r4, #1508]	; 0x5e4
   200a8:	b	1fe24 <__assert_fail@plt+0xd64c>
   200ac:	mov	r0, r6
   200b0:	add	r1, sp, #116	; 0x74
   200b4:	mov	r2, #0
   200b8:	ldr	r3, [sp, #64]	; 0x40
   200bc:	bl	1c634 <__assert_fail@plt+0x9e5c>
   200c0:	ldr	r7, [sp, #116]	; 0x74
   200c4:	add	r7, r6, r7
   200c8:	str	r0, [r4, #1504]	; 0x5e0
   200cc:	b	1fe24 <__assert_fail@plt+0xd64c>
   200d0:	mov	r0, r6
   200d4:	add	r1, sp, #116	; 0x74
   200d8:	mov	r2, #0
   200dc:	ldr	r3, [sp, #64]	; 0x40
   200e0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   200e4:	ldr	ip, [sp, #100]	; 0x64
   200e8:	ldr	r7, [sp, #116]	; 0x74
   200ec:	cmp	ip, #0
   200f0:	add	r7, r6, r7
   200f4:	mov	r5, r0
   200f8:	str	r0, [r4, #1496]	; 0x5d8
   200fc:	beq	20cc4 <__assert_fail@plt+0xe4ec>
   20100:	sub	r5, r0, #-268435455	; 0xf0000001
   20104:	ldr	r8, [sp, #100]	; 0x64
   20108:	add	r6, r8, r5, lsl #4
   2010c:	ldr	r3, [r6, #4]
   20110:	cmp	r3, #0
   20114:	beq	20900 <__assert_fail@plt+0xe128>
   20118:	ldr	r9, [sp, #48]	; 0x30
   2011c:	cmp	r9, #0
   20120:	beq	20c64 <__assert_fail@plt+0xe48c>
   20124:	ldr	ip, [sp, #48]	; 0x30
   20128:	sub	r2, r3, #-1073741823	; 0xc0000001
   2012c:	movw	r1, #22196	; 0x56b4
   20130:	ldr	r3, [r6]
   20134:	movt	r1, #5
   20138:	mov	r0, #1
   2013c:	ldr	r2, [ip, r2, lsl #2]
   20140:	bl	125bc <__printf_chk@plt>
   20144:	b	1fe24 <__assert_fail@plt+0xd64c>
   20148:	ldr	r3, [sp, #64]	; 0x40
   2014c:	mov	r0, r6
   20150:	add	r1, sp, #116	; 0x74
   20154:	mov	r2, #1
   20158:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2015c:	ldr	r3, [r4, #1500]	; 0x5dc
   20160:	ldr	r7, [sp, #116]	; 0x74
   20164:	add	r7, r6, r7
   20168:	add	r0, r3, r0
   2016c:	str	r0, [r4, #1500]	; 0x5dc
   20170:	b	1fe24 <__assert_fail@plt+0xd64c>
   20174:	mov	r0, r6
   20178:	add	r1, sp, #116	; 0x74
   2017c:	mov	r2, #0
   20180:	ldr	r3, [sp, #64]	; 0x40
   20184:	bl	1c634 <__assert_fail@plt+0x9e5c>
   20188:	ldrb	r5, [sp, #145]	; 0x91
   2018c:	ldr	r7, [sp, #116]	; 0x74
   20190:	cmp	r5, #1
   20194:	add	r7, r6, r7
   20198:	beq	208f4 <__assert_fail@plt+0xe11c>
   2019c:	ldrb	r8, [r4, #1516]	; 0x5ec
   201a0:	mov	r1, r5
   201a4:	mov	r6, #1488	; 0x5d0
   201a8:	add	r8, r0, r8
   201ac:	mov	r0, r8
   201b0:	bl	4f040 <warn@@Base+0x5448>
   201b4:	ldrb	ip, [sp, #144]	; 0x90
   201b8:	ldrd	r2, [r4, r6]
   201bc:	mov	r1, r5
   201c0:	mul	ip, ip, r0
   201c4:	mov	r0, r8
   201c8:	adds	r2, r2, ip
   201cc:	adc	r3, r3, #0
   201d0:	strd	r2, [r4, r6]
   201d4:	bl	4f22c <warn@@Base+0x5634>
   201d8:	strb	r1, [r4, #1516]	; 0x5ec
   201dc:	b	1fe24 <__assert_fail@plt+0xd64c>
   201e0:	sub	r5, r2, #1
   201e4:	cmp	r5, #8
   201e8:	bls	20210 <__assert_fail@plt+0xda38>
   201ec:	mov	r2, #5
   201f0:	movw	r1, #17732	; 0x4544
   201f4:	mov	r0, #0
   201f8:	movt	r1, #5
   201fc:	bl	12298 <dcgettext@plt>
   20200:	mov	r1, r5
   20204:	mov	r2, #8
   20208:	mov	r5, r2
   2020c:	bl	494bc <error@@Base>
   20210:	ldr	ip, [sp, #64]	; 0x40
   20214:	add	r3, fp, r5
   20218:	cmp	ip, r3
   2021c:	bhi	2022c <__assert_fail@plt+0xda54>
   20220:	cmp	ip, fp
   20224:	bls	20238 <__assert_fail@plt+0xda60>
   20228:	rsb	r5, fp, ip
   2022c:	sub	r3, r5, #1
   20230:	cmp	r3, #7
   20234:	bls	20c24 <__assert_fail@plt+0xe44c>
   20238:	mov	r1, #1488	; 0x5d0
   2023c:	mov	r2, #0
   20240:	mov	r3, #0
   20244:	strd	r2, [r4, r1]
   20248:	mov	r3, #0
   2024c:	strb	r3, [r4, #1516]	; 0x5ec
   20250:	add	r7, r6, r7
   20254:	b	1fe24 <__assert_fail@plt+0xd64c>
   20258:	ldr	r5, [sp, #84]	; 0x54
   2025c:	add	r7, r6, r7
   20260:	ldr	r0, [sp, #100]	; 0x64
   20264:	add	r5, r5, #1
   20268:	str	r5, [sp, #84]	; 0x54
   2026c:	lsl	r5, r5, #4
   20270:	mov	r1, r5
   20274:	bl	122c8 <xrealloc@plt>
   20278:	sub	r3, r5, #16
   2027c:	ldr	r2, [r4, #1520]	; 0x5f0
   20280:	str	r0, [sp, #100]	; 0x64
   20284:	mov	r0, fp
   20288:	ldr	r9, [sp, #100]	; 0x64
   2028c:	add	r5, r9, r3
   20290:	str	fp, [r9, r3]
   20294:	add	r3, r2, #1
   20298:	str	r3, [r4, #1520]	; 0x5f0
   2029c:	bl	124e4 <strlen@plt>
   202a0:	mov	r2, #0
   202a4:	ldr	r3, [sp, #112]	; 0x70
   202a8:	mov	r1, r8
   202ac:	add	r0, r0, #1
   202b0:	add	fp, fp, r0
   202b4:	mov	r0, fp
   202b8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   202bc:	ldr	r3, [sp, #112]	; 0x70
   202c0:	mov	r2, #0
   202c4:	mov	r1, r8
   202c8:	str	r0, [r5, #4]
   202cc:	ldr	r0, [sp, #116]	; 0x74
   202d0:	add	fp, fp, r0
   202d4:	mov	r0, fp
   202d8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   202dc:	ldr	r3, [sp, #112]	; 0x70
   202e0:	mov	r1, r8
   202e4:	mov	r2, #0
   202e8:	str	r0, [r5, #8]
   202ec:	ldr	r0, [sp, #116]	; 0x74
   202f0:	add	r0, fp, r0
   202f4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   202f8:	str	r0, [r5, #12]
   202fc:	b	1fe24 <__assert_fail@plt+0xd64c>
   20300:	ldrb	r1, [sp, #146]	; 0x92
   20304:	mov	r0, #1488	; 0x5d0
   20308:	mov	r2, #0
   2030c:	mov	r3, #0
   20310:	add	r7, r6, r7
   20314:	strd	r2, [r4, r0]
   20318:	str	r1, [r4, #1508]	; 0x5e4
   2031c:	mov	r3, #0
   20320:	mov	r2, #1
   20324:	strb	r3, [r4, #1516]	; 0x5ec
   20328:	str	r3, [r4, #1504]	; 0x5e0
   2032c:	str	r3, [r4, #1512]	; 0x5e8
   20330:	strb	r3, [r4, #1517]	; 0x5ed
   20334:	str	r3, [r4, #1520]	; 0x5f0
   20338:	str	r2, [r4, #1496]	; 0x5d8
   2033c:	str	r2, [r4, #1500]	; 0x5dc
   20340:	b	1fe24 <__assert_fail@plt+0xd64c>
   20344:	mov	r2, #5
   20348:	movw	r1, #22088	; 0x5648
   2034c:	mov	r0, #0
   20350:	movt	r1, #5
   20354:	bl	12298 <dcgettext@plt>
   20358:	ldr	r3, [sp, #116]	; 0x74
   2035c:	mov	r2, r5
   20360:	rsb	r3, r3, r7
   20364:	add	r7, r6, r7
   20368:	mov	r1, r0
   2036c:	mov	r0, #1
   20370:	bl	125bc <__printf_chk@plt>
   20374:	b	1fe24 <__assert_fail@plt+0xd64c>
   20378:	movw	r8, #19548	; 0x4c5c
   2037c:	movt	r8, #5
   20380:	mov	fp, #10
   20384:	mov	r0, fp
   20388:	bl	12358 <xmalloc@plt>
   2038c:	mov	r1, r8
   20390:	mov	r2, fp
   20394:	mov	r6, r0
   20398:	bl	12598 <strncpy@plt>
   2039c:	ldrb	r0, [sp, #145]	; 0x91
   203a0:	cmp	r0, #1
   203a4:	beq	20400 <__assert_fail@plt+0xdc28>
   203a8:	mov	r2, #1488	; 0x5d0
   203ac:	ldr	r3, [r4, #1500]	; 0x5dc
   203b0:	ldrd	r8, [r4, r2]
   203b4:	movw	r1, #22252	; 0x56ec
   203b8:	mov	r0, #1
   203bc:	movt	r1, #5
   203c0:	strd	r8, [sp]
   203c4:	ldrb	r2, [r4, #1516]	; 0x5ec
   203c8:	str	r2, [sp, #8]
   203cc:	mov	r2, r6
   203d0:	bl	125bc <__printf_chk@plt>
   203d4:	cmp	r5, #1
   203d8:	bne	1fe1c <__assert_fail@plt+0xd644>
   203dc:	mov	r0, #10
   203e0:	bl	1258c <putchar@plt>
   203e4:	b	1fe1c <__assert_fail@plt+0xd644>
   203e8:	mov	r1, #1488	; 0x5d0
   203ec:	ldrb	ip, [sp, #144]	; 0x90
   203f0:	ldrd	r2, [r4, r1]
   203f4:	umlal	r2, r3, ip, r0
   203f8:	strd	r2, [r4, r1]
   203fc:	b	1fd54 <__assert_fail@plt+0xd57c>
   20400:	mov	r1, #1488	; 0x5d0
   20404:	ldr	ip, [r4, #1500]	; 0x5dc
   20408:	ldrd	r2, [r4, r1]
   2040c:	movw	r1, #22228	; 0x56d4
   20410:	movt	r1, #5
   20414:	strd	r2, [sp]
   20418:	mov	r3, ip
   2041c:	mov	r2, r6
   20420:	bl	125bc <__printf_chk@plt>
   20424:	b	1fe14 <__assert_fail@plt+0xd63c>
   20428:	mov	r0, #36	; 0x24
   2042c:	bl	12358 <xmalloc@plt>
   20430:	sub	r1, fp, #35	; 0x23
   20434:	mov	r2, #36	; 0x24
   20438:	add	r1, r8, r1
   2043c:	mov	r6, r0
   20440:	bl	12598 <strncpy@plt>
   20444:	ldr	r3, [sl]
   20448:	cmp	r3, #0
   2044c:	bne	1fddc <__assert_fail@plt+0xd604>
   20450:	b	2039c <__assert_fail@plt+0xdbc4>
   20454:	andeq	r0, r7, r0, lsl #21
   20458:	ldrdeq	r0, [r7], -r0	; <UNPREDICTABLE>
   2045c:	add	r3, sp, #112	; 0x70
   20460:	mov	r1, r7
   20464:	str	r3, [sp]
   20468:	mov	r2, r9
   2046c:	ldr	r0, [sp, #88]	; 0x58
   20470:	ldr	r3, [sp, #96]	; 0x60
   20474:	bl	1b74c <__assert_fail@plt+0x8f74>
   20478:	cmp	r0, #0
   2047c:	str	r0, [sp, #80]	; 0x50
   20480:	beq	20cbc <__assert_fail@plt+0xe4e4>
   20484:	ldrb	r0, [sp, #152]	; 0x98
   20488:	cmp	r0, #0
   2048c:	beq	20894 <__assert_fail@plt+0xe0bc>
   20490:	ldrb	r1, [sp, #153]	; 0x99
   20494:	mov	ip, #1488	; 0x5d0
   20498:	ldr	r7, [sp, #60]	; 0x3c
   2049c:	mov	r2, #0
   204a0:	ldr	r8, [sp, #80]	; 0x50
   204a4:	sub	r1, r1, #1
   204a8:	ldrb	r0, [sp, #146]	; 0x92
   204ac:	mov	r3, #0
   204b0:	strd	r2, [r7, ip]
   204b4:	movw	r4, #1240	; 0x4d8
   204b8:	ldrb	r2, [r8, r1]
   204bc:	mov	r3, #1
   204c0:	ldr	ip, [sp, #60]	; 0x3c
   204c4:	add	r6, r8, r1
   204c8:	str	r0, [r7, #1508]	; 0x5e4
   204cc:	mov	r7, #0
   204d0:	cmp	r2, r7
   204d4:	movt	r4, #7
   204d8:	strb	r7, [ip, #1516]	; 0x5ec
   204dc:	str	r7, [ip, #1504]	; 0x5e0
   204e0:	str	r7, [ip, #1512]	; 0x5e8
   204e4:	strb	r7, [ip, #1517]	; 0x5ed
   204e8:	str	r7, [ip, #1520]	; 0x5f0
   204ec:	str	r3, [ip, #1496]	; 0x5d8
   204f0:	str	r3, [ip, #1500]	; 0x5dc
   204f4:	streq	r2, [sp, #48]	; 0x30
   204f8:	beq	20560 <__assert_fail@plt+0xdd88>
   204fc:	mov	r5, r6
   20500:	mov	r0, r5
   20504:	rsb	r1, r5, r9
   20508:	bl	12604 <strnlen@plt>
   2050c:	add	r7, r7, #1
   20510:	add	r0, r0, #1
   20514:	ldrb	r3, [r5, r0]!
   20518:	cmp	r3, #0
   2051c:	bne	20500 <__assert_fail@plt+0xdd28>
   20520:	lsl	r0, r7, #2
   20524:	bl	12358 <xmalloc@plt>
   20528:	ldrb	r3, [r6]
   2052c:	cmp	r3, #0
   20530:	str	r0, [sp, #48]	; 0x30
   20534:	beq	2055c <__assert_fail@plt+0xdd84>
   20538:	sub	r7, r0, #4
   2053c:	str	r6, [r7, #4]!
   20540:	mov	r0, r6
   20544:	rsb	r1, r9, r6
   20548:	bl	12604 <strnlen@plt>
   2054c:	add	r0, r0, #1
   20550:	ldrb	r3, [r6, r0]!
   20554:	cmp	r3, #0
   20558:	bne	2053c <__assert_fail@plt+0xdd64>
   2055c:	mov	r6, r5
   20560:	ldrb	r3, [r6, #1]
   20564:	add	r7, r6, #1
   20568:	cmp	r3, #0
   2056c:	streq	r3, [sp, #84]	; 0x54
   20570:	streq	r3, [sp, #56]	; 0x38
   20574:	beq	2074c <__assert_fail@plt+0xdf74>
   20578:	mov	ip, #0
   2057c:	add	r5, sp, #116	; 0x74
   20580:	mov	r8, r7
   20584:	mov	fp, ip
   20588:	str	ip, [sp, #84]	; 0x54
   2058c:	str	r4, [sp, #56]	; 0x38
   20590:	rsb	r1, r8, r9
   20594:	mov	r0, r8
   20598:	bl	12604 <strnlen@plt>
   2059c:	mov	r2, #0
   205a0:	mov	r3, r9
   205a4:	mov	r1, r5
   205a8:	add	fp, fp, #1
   205ac:	add	r0, r0, #1
   205b0:	add	r8, r8, r0
   205b4:	mov	r0, r8
   205b8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   205bc:	ldr	ip, [sp, #116]	; 0x74
   205c0:	mov	r2, #0
   205c4:	mov	r3, r9
   205c8:	add	r8, r8, ip
   205cc:	mov	r1, r5
   205d0:	mov	r0, r8
   205d4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   205d8:	ldr	ip, [sp, #116]	; 0x74
   205dc:	mov	r3, r9
   205e0:	mov	r1, r5
   205e4:	add	r4, r8, ip
   205e8:	mov	r2, #0
   205ec:	mov	r0, r4
   205f0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   205f4:	ldr	r3, [sp, #116]	; 0x74
   205f8:	add	r8, r4, r3
   205fc:	ldrb	r3, [r4, r3]
   20600:	cmp	r3, #0
   20604:	bne	20590 <__assert_fail@plt+0xddb8>
   20608:	lsl	r0, fp, #4
   2060c:	str	fp, [sp, #84]	; 0x54
   20610:	ldr	r4, [sp, #56]	; 0x38
   20614:	bl	12358 <xmalloc@plt>
   20618:	ldrb	r3, [r6, #1]
   2061c:	cmp	r3, #0
   20620:	str	r0, [sp, #56]	; 0x38
   20624:	ldrne	r6, [sp, #56]	; 0x38
   20628:	beq	206b4 <__assert_fail@plt+0xdedc>
   2062c:	str	r7, [r6]
   20630:	rsb	r1, r7, r9
   20634:	mov	r0, r7
   20638:	add	r6, r6, #16
   2063c:	bl	12604 <strnlen@plt>
   20640:	mov	r2, #0
   20644:	mov	r3, r9
   20648:	mov	r1, r5
   2064c:	add	r0, r0, #1
   20650:	add	r7, r7, r0
   20654:	mov	r0, r7
   20658:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2065c:	ldr	fp, [sp, #116]	; 0x74
   20660:	mov	r2, #0
   20664:	mov	r3, r9
   20668:	add	r7, r7, fp
   2066c:	mov	r1, r5
   20670:	str	r0, [r6, #-12]
   20674:	mov	r0, r7
   20678:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2067c:	ldr	fp, [sp, #116]	; 0x74
   20680:	mov	r3, r9
   20684:	mov	r1, r5
   20688:	add	fp, r7, fp
   2068c:	mov	r2, #0
   20690:	str	r0, [r6, #-8]
   20694:	mov	r0, fp
   20698:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2069c:	ldr	r3, [sp, #116]	; 0x74
   206a0:	add	r7, fp, r3
   206a4:	str	r0, [r6, #-4]
   206a8:	ldrb	r3, [fp, r3]
   206ac:	cmp	r3, #0
   206b0:	bne	2062c <__assert_fail@plt+0xde54>
   206b4:	ldr	r5, [sp, #48]	; 0x30
   206b8:	cmp	r5, #0
   206bc:	beq	20cec <__assert_fail@plt+0xe514>
   206c0:	ldr	r7, [sp, #56]	; 0x38
   206c4:	ldr	r3, [r7, #4]
   206c8:	cmp	r3, #0
   206cc:	subne	r3, r3, #-1073741823	; 0xc0000001
   206d0:	ldrne	ip, [sp, #48]	; 0x30
   206d4:	movweq	r5, #41096	; 0xa088
   206d8:	movteq	r5, #5
   206dc:	ldrne	r5, [ip, r3, lsl #2]
   206e0:	ldr	r3, [sl]
   206e4:	cmp	r3, #0
   206e8:	bne	206fc <__assert_fail@plt+0xdf24>
   206ec:	mov	r0, r5
   206f0:	bl	124e4 <strlen@plt>
   206f4:	cmp	r0, #75	; 0x4b
   206f8:	bhi	20930 <__assert_fail@plt+0xe158>
   206fc:	mov	r2, #5
   20700:	movw	r1, #22076	; 0x563c
   20704:	mov	r0, #0
   20708:	movt	r1, #5
   2070c:	bl	12298 <dcgettext@plt>
   20710:	mov	r2, r5
   20714:	ldr	r5, [sp, #56]	; 0x38
   20718:	ldr	r3, [r5]
   2071c:	mov	r1, r0
   20720:	mov	r0, #1
   20724:	bl	125bc <__printf_chk@plt>
   20728:	movw	r1, #22004	; 0x55f4
   2072c:	mov	r0, #0
   20730:	movt	r1, #5
   20734:	mov	r2, #5
   20738:	bl	12298 <dcgettext@plt>
   2073c:	mov	r7, r8
   20740:	mov	r1, r0
   20744:	mov	r0, #1
   20748:	bl	125bc <__printf_chk@plt>
   2074c:	ldr	lr, [sp, #96]	; 0x60
   20750:	add	r7, r7, #1
   20754:	ldr	ip, [pc, #-772]	; 20458 <__assert_fail@plt+0xdc80>
   20758:	ldr	r5, [sp, #112]	; 0x70
   2075c:	ldm	lr!, {r0, r1, r2, r3}
   20760:	stmia	ip!, {r0, r1, r2, r3}
   20764:	ldm	lr!, {r0, r1, r2, r3}
   20768:	stmia	ip!, {r0, r1, r2, r3}
   2076c:	ldm	lr, {r0, r1}
   20770:	stm	ip, {r0, r1}
   20774:	b	1fcb8 <__assert_fail@plt+0xd4e0>
   20778:	ldrd	r8, [r4, r2]
   2077c:	movw	r1, #22280	; 0x5708
   20780:	mov	r2, r6
   20784:	movt	r1, #5
   20788:	strd	r8, [sp]
   2078c:	bl	125bc <__printf_chk@plt>
   20790:	b	1fe14 <__assert_fail@plt+0xd63c>
   20794:	mov	r2, #5
   20798:	movw	r1, #21900	; 0x558c
   2079c:	mov	r0, #0
   207a0:	movt	r1, #5
   207a4:	bl	12298 <dcgettext@plt>
   207a8:	mov	r2, r5
   207ac:	mov	r1, r0
   207b0:	mov	r0, #1
   207b4:	bl	125bc <__printf_chk@plt>
   207b8:	ldr	r7, [sp, #80]	; 0x50
   207bc:	cmp	r7, #0
   207c0:	beq	20918 <__assert_fail@plt+0xe140>
   207c4:	add	r3, r7, r5
   207c8:	ldrb	r7, [r3, #-1]
   207cc:	cmp	r7, #0
   207d0:	beq	20918 <__assert_fail@plt+0xe140>
   207d4:	str	r5, [sp, #56]	; 0x38
   207d8:	add	r8, sp, #116	; 0x74
   207dc:	mov	fp, #0
   207e0:	ldr	r5, [sp, #64]	; 0x40
   207e4:	ldr	r9, [sp, #100]	; 0x64
   207e8:	b	20810 <__assert_fail@plt+0xe038>
   207ec:	movw	r1, #21936	; 0x55b0
   207f0:	movw	r3, #10648	; 0x2998
   207f4:	movt	r1, #5
   207f8:	movt	r3, #5
   207fc:	mov	r0, #1
   20800:	sub	r7, r7, #1
   20804:	bl	125bc <__printf_chk@plt>
   20808:	ldr	r3, [sp, #116]	; 0x74
   2080c:	add	r6, r6, r3
   20810:	mov	r2, #0
   20814:	mov	r3, r5
   20818:	mov	r0, r6
   2081c:	mov	r1, r8
   20820:	bl	1c634 <__assert_fail@plt+0x9e5c>
   20824:	str	fp, [sp]
   20828:	mov	r2, r0
   2082c:	mov	r3, r1
   20830:	movw	r0, #41908	; 0xa3b4
   20834:	movt	r0, #5
   20838:	bl	1acc4 <__assert_fail@plt+0x84ec>
   2083c:	cmp	r7, #1
   20840:	mov	r2, r0
   20844:	bne	207ec <__assert_fail@plt+0xe014>
   20848:	mov	r0, r7
   2084c:	movw	r1, #21936	; 0x55b0
   20850:	movw	r3, #11856	; 0x2e50
   20854:	movt	r1, #5
   20858:	movt	r3, #5
   2085c:	ldr	r5, [sp, #56]	; 0x38
   20860:	str	r9, [sp, #100]	; 0x64
   20864:	bl	125bc <__printf_chk@plt>
   20868:	ldr	r7, [sp, #116]	; 0x74
   2086c:	add	r7, r6, r7
   20870:	b	2091c <__assert_fail@plt+0xe144>
   20874:	mov	r1, #2
   20878:	movw	r3, #3472	; 0xd90
   2087c:	movt	r3, #7
   20880:	mov	r0, r6
   20884:	ldr	r3, [r3]
   20888:	blx	r3
   2088c:	mov	r1, #0
   20890:	b	20004 <__assert_fail@plt+0xd82c>
   20894:	mov	r2, #5
   20898:	movw	r1, #20084	; 0x4e74
   2089c:	movt	r1, #5
   208a0:	bl	12298 <dcgettext@plt>
   208a4:	bl	49bf8 <warn@@Base>
   208a8:	mov	r3, #1
   208ac:	strb	r3, [sp, #152]	; 0x98
   208b0:	b	20490 <__assert_fail@plt+0xdcb8>
   208b4:	mov	r2, #5
   208b8:	movw	r1, #20664	; 0x50b8
   208bc:	movt	r1, #5
   208c0:	mov	r7, r6
   208c4:	bl	12298 <dcgettext@plt>
   208c8:	bl	49bf8 <warn@@Base>
   208cc:	b	1fe24 <__assert_fail@plt+0xd64c>
   208d0:	ldrb	ip, [sp, #144]	; 0x90
   208d4:	mov	r1, #1488	; 0x5d0
   208d8:	mov	r7, r6
   208dc:	mul	r0, ip, r0
   208e0:	ldrd	r2, [r4, r1]
   208e4:	adds	r2, r2, r0
   208e8:	adc	r3, r3, #0
   208ec:	strd	r2, [r4, r1]
   208f0:	b	1fe24 <__assert_fail@plt+0xd64c>
   208f4:	ldrb	ip, [sp, #144]	; 0x90
   208f8:	mov	r1, #1488	; 0x5d0
   208fc:	b	208dc <__assert_fail@plt+0xe104>
   20900:	ldr	r2, [r8, r5, lsl #4]
   20904:	movw	r1, #22148	; 0x5684
   20908:	mov	r0, #1
   2090c:	movt	r1, #5
   20910:	bl	125bc <__printf_chk@plt>
   20914:	b	1fe24 <__assert_fail@plt+0xd64c>
   20918:	mov	r7, r6
   2091c:	ldr	r8, [sp, #72]	; 0x48
   20920:	mov	r0, #10
   20924:	ldr	r1, [r8]
   20928:	bl	12334 <_IO_putc@plt>
   2092c:	b	1fe88 <__assert_fail@plt+0xd6b0>
   20930:	ldr	r6, [sp, #56]	; 0x38
   20934:	movw	r1, #21996	; 0x55ec
   20938:	mov	r0, #1
   2093c:	movt	r1, #5
   20940:	ldr	r2, [r6]
   20944:	bl	125bc <__printf_chk@plt>
   20948:	b	20728 <__assert_fail@plt+0xdf50>
   2094c:	mov	r2, #5
   20950:	movw	r1, #20708	; 0x50e4
   20954:	movt	r1, #5
   20958:	ldrb	r7, [fp]
   2095c:	add	sl, r3, sl
   20960:	bl	12298 <dcgettext@plt>
   20964:	mov	r2, r7
   20968:	mov	r1, r0
   2096c:	mov	r0, #1
   20970:	add	r5, fp, r0
   20974:	bl	125bc <__printf_chk@plt>
   20978:	sub	r3, r7, #1
   2097c:	cmp	r3, #127	; 0x7f
   20980:	ldrls	pc, [pc, r3, lsl #2]
   20984:	b	21190 <__assert_fail@plt+0xe9b8>
   20988:	andeq	r0, r2, r0, ror sp
   2098c:	andeq	r0, r2, ip, asr #27
   20990:	andeq	r0, r2, r8, ror lr
   20994:	andeq	r1, r2, r0, lsl r0
   20998:	muleq	r2, r0, r1
   2099c:	muleq	r2, r0, r1
   209a0:	muleq	r2, r0, r1
   209a4:	muleq	r2, r0, r1
   209a8:	muleq	r2, r0, r1
   209ac:	muleq	r2, r0, r1
   209b0:	muleq	r2, r0, r1
   209b4:	muleq	r2, r0, r1
   209b8:	muleq	r2, r0, r1
   209bc:	muleq	r2, r0, r1
   209c0:	muleq	r2, r0, r1
   209c4:	muleq	r2, r0, r1
   209c8:	andeq	r1, r2, ip, rrx
   209cc:	andeq	r1, r2, ip, ror r0
   209d0:	andeq	r1, r2, ip, lsl #1
   209d4:	muleq	r2, ip, r0
   209d8:	andeq	r1, r2, ip, lsr #1
   209dc:	strheq	r1, [r2], -ip
   209e0:	andeq	r1, r2, ip, asr #1
   209e4:	ldrdeq	r1, [r2], -ip
   209e8:	andeq	r1, r2, ip, ror #1
   209ec:	muleq	r2, r0, r1
   209f0:	muleq	r2, r0, r1
   209f4:	muleq	r2, r0, r1
   209f8:	muleq	r2, r0, r1
   209fc:	muleq	r2, r0, r1
   20a00:	muleq	r2, r0, r1
   20a04:	strdeq	r1, [r2], -ip
   20a08:	muleq	r2, r0, r1
   20a0c:	muleq	r2, r0, r1
   20a10:	muleq	r2, r0, r1
   20a14:	muleq	r2, r0, r1
   20a18:	muleq	r2, r0, r1
   20a1c:	muleq	r2, r0, r1
   20a20:	muleq	r2, r0, r1
   20a24:	muleq	r2, r0, r1
   20a28:	muleq	r2, r0, r1
   20a2c:	muleq	r2, r0, r1
   20a30:	muleq	r2, r0, r1
   20a34:	muleq	r2, r0, r1
   20a38:	muleq	r2, r0, r1
   20a3c:	muleq	r2, r0, r1
   20a40:	muleq	r2, r0, r1
   20a44:	muleq	r2, r0, r1
   20a48:	muleq	r2, r0, r1
   20a4c:	muleq	r2, r0, r1
   20a50:	muleq	r2, r0, r1
   20a54:	muleq	r2, r0, r1
   20a58:	muleq	r2, r0, r1
   20a5c:	muleq	r2, r0, r1
   20a60:	muleq	r2, r0, r1
   20a64:	muleq	r2, r0, r1
   20a68:	muleq	r2, r0, r1
   20a6c:	muleq	r2, r0, r1
   20a70:	muleq	r2, r0, r1
   20a74:	muleq	r2, r0, r1
   20a78:	muleq	r2, r0, r1
   20a7c:	muleq	r2, r0, r1
   20a80:	muleq	r2, r0, r1
   20a84:	muleq	r2, r0, r1
   20a88:	muleq	r2, r0, r1
   20a8c:	muleq	r2, r0, r1
   20a90:	muleq	r2, r0, r1
   20a94:	muleq	r2, r0, r1
   20a98:	muleq	r2, r0, r1
   20a9c:	muleq	r2, r0, r1
   20aa0:	muleq	r2, r0, r1
   20aa4:	muleq	r2, r0, r1
   20aa8:	muleq	r2, r0, r1
   20aac:	muleq	r2, r0, r1
   20ab0:	muleq	r2, r0, r1
   20ab4:	muleq	r2, r0, r1
   20ab8:	muleq	r2, r0, r1
   20abc:	muleq	r2, r0, r1
   20ac0:	muleq	r2, r0, r1
   20ac4:	muleq	r2, r0, r1
   20ac8:	muleq	r2, r0, r1
   20acc:	muleq	r2, r0, r1
   20ad0:	muleq	r2, r0, r1
   20ad4:	muleq	r2, r0, r1
   20ad8:	muleq	r2, r0, r1
   20adc:	muleq	r2, r0, r1
   20ae0:	muleq	r2, r0, r1
   20ae4:	muleq	r2, r0, r1
   20ae8:	muleq	r2, r0, r1
   20aec:	muleq	r2, r0, r1
   20af0:	muleq	r2, r0, r1
   20af4:	muleq	r2, r0, r1
   20af8:	muleq	r2, r0, r1
   20afc:	muleq	r2, r0, r1
   20b00:	muleq	r2, r0, r1
   20b04:	muleq	r2, r0, r1
   20b08:	muleq	r2, r0, r1
   20b0c:	muleq	r2, r0, r1
   20b10:	muleq	r2, r0, r1
   20b14:	muleq	r2, r0, r1
   20b18:	muleq	r2, r0, r1
   20b1c:	muleq	r2, r0, r1
   20b20:	muleq	r2, r0, r1
   20b24:	muleq	r2, r0, r1
   20b28:	muleq	r2, r0, r1
   20b2c:	muleq	r2, r0, r1
   20b30:	muleq	r2, r0, r1
   20b34:	muleq	r2, r0, r1
   20b38:	muleq	r2, r0, r1
   20b3c:	muleq	r2, r0, r1
   20b40:	muleq	r2, r0, r1
   20b44:	muleq	r2, r0, r1
   20b48:	muleq	r2, r0, r1
   20b4c:	muleq	r2, r0, r1
   20b50:	muleq	r2, r0, r1
   20b54:	muleq	r2, r0, r1
   20b58:	muleq	r2, r0, r1
   20b5c:	muleq	r2, r0, r1
   20b60:	muleq	r2, r0, r1
   20b64:	muleq	r2, r0, r1
   20b68:	muleq	r2, r0, r1
   20b6c:	muleq	r2, r0, r1
   20b70:	muleq	r2, r0, r1
   20b74:	muleq	r2, r0, r1
   20b78:	muleq	r2, r0, r1
   20b7c:	muleq	r2, r0, r1
   20b80:	muleq	r2, r0, r1
   20b84:	andeq	r1, r2, ip, lsl #2
   20b88:	ldrb	r2, [sp, #144]	; 0x90
   20b8c:	mov	r5, #1488	; 0x5d0
   20b90:	ldr	r7, [sp, #48]	; 0x30
   20b94:	mov	r0, #0
   20b98:	ldrd	r4, [r5, r8]
   20b9c:	movw	r1, #21484	; 0x53ec
   20ba0:	movt	r1, #5
   20ba4:	mov	fp, r0
   20ba8:	umull	r6, r7, r7, r2
   20bac:	strd	r6, [sp, #64]	; 0x40
   20bb0:	ldr	r6, [sp, #52]	; 0x34
   20bb4:	mla	r6, r2, r6, r7
   20bb8:	mov	r2, #5
   20bbc:	str	r6, [sp, #68]	; 0x44
   20bc0:	ldrd	r6, [sp, #64]	; 0x40
   20bc4:	adds	r4, r4, r6
   20bc8:	adc	r5, r5, r7
   20bcc:	mov	r7, #1488	; 0x5d0
   20bd0:	strd	r4, [r8, r7]
   20bd4:	bl	12298 <dcgettext@plt>
   20bd8:	ldrd	r2, [sp, #64]	; 0x40
   20bdc:	str	fp, [sp]
   20be0:	mov	r9, r0
   20be4:	movw	r0, #53816	; 0xd238
   20be8:	movt	r0, #5
   20bec:	bl	1acc4 <__assert_fail@plt+0x84ec>
   20bf0:	mov	ip, #1488	; 0x5d0
   20bf4:	ldrd	r2, [r8, ip]
   20bf8:	str	fp, [sp]
   20bfc:	mov	r7, r0
   20c00:	movw	r0, #41908	; 0xa3b4
   20c04:	movt	r0, #5
   20c08:	bl	1acc4 <__assert_fail@plt+0x84ec>
   20c0c:	mov	r1, r9
   20c10:	mov	r2, r7
   20c14:	mov	r3, r0
   20c18:	ldr	r0, [sp, #72]	; 0x48
   20c1c:	bl	125bc <__printf_chk@plt>
   20c20:	b	1ed84 <__assert_fail@plt+0xc5ac>
   20c24:	movw	r3, #3472	; 0xd90
   20c28:	movt	r3, #7
   20c2c:	mov	r0, fp
   20c30:	mov	r1, r5
   20c34:	ldr	r3, [r3]
   20c38:	blx	r3
   20c3c:	mov	r3, #1488	; 0x5d0
   20c40:	strd	r0, [r4, r3]
   20c44:	b	20248 <__assert_fail@plt+0xda70>
   20c48:	ldr	r7, [sp, #56]	; 0x38
   20c4c:	mov	r9, fp
   20c50:	mov	r8, #0
   20c54:	str	r8, [sp, #92]	; 0x5c
   20c58:	ldr	r4, [sp, #108]	; 0x6c
   20c5c:	ldr	r3, [r4]
   20c60:	b	1ee08 <__assert_fail@plt+0xc630>
   20c64:	mov	r0, r9
   20c68:	mov	r2, #5
   20c6c:	movw	r1, #22160	; 0x5690
   20c70:	movt	r1, #5
   20c74:	bl	12298 <dcgettext@plt>
   20c78:	ldr	r2, [r6, #4]
   20c7c:	sub	r2, r2, #1
   20c80:	mov	r1, r0
   20c84:	mov	r0, #1
   20c88:	bl	125bc <__printf_chk@plt>
   20c8c:	b	1fe24 <__assert_fail@plt+0xd64c>
   20c90:	mov	sl, r9
   20c94:	ldr	r6, [sp, #80]	; 0x50
   20c98:	mov	r0, #10
   20c9c:	ldr	r1, [r6]
   20ca0:	bl	12334 <_IO_putc@plt>
   20ca4:	b	1ed84 <__assert_fail@plt+0xc5ac>
   20ca8:	movw	r1, #19636	; 0x4cb4
   20cac:	mov	r2, #5
   20cb0:	movt	r1, #5
   20cb4:	bl	12298 <dcgettext@plt>
   20cb8:	bl	49bf8 <warn@@Base>
   20cbc:	mov	r0, #0
   20cc0:	b	1ee18 <__assert_fail@plt+0xc640>
   20cc4:	mov	r0, ip
   20cc8:	mov	r2, #5
   20ccc:	movw	r1, #22116	; 0x5664
   20cd0:	movt	r1, #5
   20cd4:	bl	12298 <dcgettext@plt>
   20cd8:	sub	r2, r5, #1
   20cdc:	mov	r1, r0
   20ce0:	mov	r0, #1
   20ce4:	bl	125bc <__printf_chk@plt>
   20ce8:	b	1fe24 <__assert_fail@plt+0xd64c>
   20cec:	ldr	r0, [sp, #48]	; 0x30
   20cf0:	mov	r2, #5
   20cf4:	movw	r1, #21992	; 0x55e8
   20cf8:	movt	r1, #5
   20cfc:	bl	12298 <dcgettext@plt>
   20d00:	ldr	r6, [sp, #56]	; 0x38
   20d04:	mov	r7, r8
   20d08:	ldr	r2, [r6]
   20d0c:	mov	r1, r0
   20d10:	mov	r0, #1
   20d14:	bl	125bc <__printf_chk@plt>
   20d18:	ldr	r0, [sp, #48]	; 0x30
   20d1c:	mov	r2, #5
   20d20:	movw	r1, #22004	; 0x55f4
   20d24:	movt	r1, #5
   20d28:	bl	12298 <dcgettext@plt>
   20d2c:	mov	r1, r0
   20d30:	mov	r0, #1
   20d34:	bl	125bc <__printf_chk@plt>
   20d38:	b	2074c <__assert_fail@plt+0xdf74>
   20d3c:	ldr	r7, [sp, #56]	; 0x38
   20d40:	mov	r9, fp
   20d44:	mov	r8, #1
   20d48:	str	r8, [sp, #92]	; 0x5c
   20d4c:	b	20c58 <__assert_fail@plt+0xe480>
   20d50:	mov	r2, #5
   20d54:	movw	r1, #20132	; 0x4ea4
   20d58:	movt	r1, #5
   20d5c:	mov	r9, fp
   20d60:	ldr	r7, [sp, #56]	; 0x38
   20d64:	bl	12298 <dcgettext@plt>
   20d68:	bl	49bf8 <warn@@Base>
   20d6c:	b	20d44 <__assert_fail@plt+0xe56c>
   20d70:	mov	r2, #5
   20d74:	movw	r1, #20732	; 0x50fc
   20d78:	mov	r0, #0
   20d7c:	movt	r1, #5
   20d80:	bl	12298 <dcgettext@plt>
   20d84:	mov	r1, r0
   20d88:	mov	r0, #1
   20d8c:	bl	125bc <__printf_chk@plt>
   20d90:	mov	r0, #1488	; 0x5d0
   20d94:	mov	r1, #0
   20d98:	mov	r3, #0
   20d9c:	mov	r2, #0
   20da0:	str	r6, [r8, #1508]	; 0x5e4
   20da4:	strd	r2, [r8, r0]
   20da8:	mov	r3, #1
   20dac:	strb	r1, [r8, #1516]	; 0x5ec
   20db0:	str	r1, [r8, #1504]	; 0x5e0
   20db4:	str	r1, [r8, #1512]	; 0x5e8
   20db8:	strb	r1, [r8, #1517]	; 0x5ed
   20dbc:	str	r1, [r8, #1520]	; 0x5f0
   20dc0:	str	r3, [r8, #1496]	; 0x5d8
   20dc4:	str	r3, [r8, #1500]	; 0x5dc
   20dc8:	b	1f3ac <__assert_fail@plt+0xcbd4>
   20dcc:	ldr	r1, [sp, #116]	; 0x74
   20dd0:	mvn	r1, r1
   20dd4:	add	r1, r1, sl
   20dd8:	cmp	r1, #8
   20ddc:	bhi	213a0 <__assert_fail@plt+0xebc8>
   20de0:	ldr	r4, [sp, #100]	; 0x64
   20de4:	add	r3, r5, r1
   20de8:	cmp	r4, r3
   20dec:	bhi	20dfc <__assert_fail@plt+0xe624>
   20df0:	cmp	r4, r5
   20df4:	bls	213d0 <__assert_fail@plt+0xebf8>
   20df8:	rsb	r1, r5, r4
   20dfc:	sub	r3, r1, #1
   20e00:	cmp	r3, #7
   20e04:	bhi	213d0 <__assert_fail@plt+0xebf8>
   20e08:	movw	r3, #3472	; 0xd90
   20e0c:	movt	r3, #7
   20e10:	mov	r0, r5
   20e14:	ldr	r3, [r3]
   20e18:	blx	r3
   20e1c:	mov	r4, r0
   20e20:	mov	r5, r1
   20e24:	mov	r2, #5
   20e28:	movw	r1, #20804	; 0x5144
   20e2c:	mov	r0, #0
   20e30:	movt	r1, #5
   20e34:	bl	12298 <dcgettext@plt>
   20e38:	mov	r6, #0
   20e3c:	mov	r3, r5
   20e40:	mov	r2, r4
   20e44:	str	r6, [sp]
   20e48:	mov	r7, r0
   20e4c:	movw	r0, #41908	; 0xa3b4
   20e50:	movt	r0, #5
   20e54:	bl	1acc4 <__assert_fail@plt+0x84ec>
   20e58:	mov	r1, r7
   20e5c:	mov	r2, r0
   20e60:	mov	r0, #1
   20e64:	bl	125bc <__printf_chk@plt>
   20e68:	mov	r3, #1488	; 0x5d0
   20e6c:	strb	r6, [r8, #1516]	; 0x5ec
   20e70:	strd	r4, [r8, r3]
   20e74:	b	1f3ac <__assert_fail@plt+0xcbd4>
   20e78:	mov	r2, #5
   20e7c:	movw	r1, #20828	; 0x515c
   20e80:	mov	r0, #0
   20e84:	movt	r1, #5
   20e88:	bl	12298 <dcgettext@plt>
   20e8c:	mov	r1, r0
   20e90:	mov	r0, #1
   20e94:	bl	125bc <__printf_chk@plt>
   20e98:	mov	r2, #5
   20e9c:	mov	r0, #0
   20ea0:	movw	r1, #20380	; 0x4f9c
   20ea4:	movt	r1, #5
   20ea8:	mov	r6, r0
   20eac:	bl	12298 <dcgettext@plt>
   20eb0:	mov	r1, r0
   20eb4:	mov	r0, #1
   20eb8:	bl	125bc <__printf_chk@plt>
   20ebc:	ldr	r2, [r8, #1520]	; 0x5f0
   20ec0:	mov	r0, #1
   20ec4:	movw	r1, #20860	; 0x517c
   20ec8:	add	r2, r2, r0
   20ecc:	movt	r1, #5
   20ed0:	str	r2, [r8, #1520]	; 0x5f0
   20ed4:	bl	125bc <__printf_chk@plt>
   20ed8:	ldr	r7, [sp, #100]	; 0x64
   20edc:	mov	r0, r5
   20ee0:	rsb	r1, r5, r7
   20ee4:	bl	12604 <strnlen@plt>
   20ee8:	mov	r1, r4
   20eec:	mov	r2, r6
   20ef0:	ldr	r3, [sp, #100]	; 0x64
   20ef4:	add	r0, r0, #1
   20ef8:	add	r7, r5, r0
   20efc:	mov	r0, r7
   20f00:	bl	1c634 <__assert_fail@plt+0x9e5c>
   20f04:	str	r6, [sp]
   20f08:	mov	r3, r1
   20f0c:	mov	r2, r0
   20f10:	movw	r0, #53816	; 0xd238
   20f14:	movt	r0, #5
   20f18:	bl	1acc4 <__assert_fail@plt+0x84ec>
   20f1c:	movw	r1, #20416	; 0x4fc0
   20f20:	movt	r1, #5
   20f24:	mov	r2, r0
   20f28:	mov	r0, #1
   20f2c:	bl	125bc <__printf_chk@plt>
   20f30:	ldr	r3, [sp, #116]	; 0x74
   20f34:	mov	r2, r6
   20f38:	mov	r1, r4
   20f3c:	add	r7, r7, r3
   20f40:	ldr	r3, [sp, #100]	; 0x64
   20f44:	mov	r0, r7
   20f48:	bl	1c634 <__assert_fail@plt+0x9e5c>
   20f4c:	str	r6, [sp]
   20f50:	mov	r3, r1
   20f54:	mov	r2, r0
   20f58:	movw	r0, #53816	; 0xd238
   20f5c:	movt	r0, #5
   20f60:	bl	1acc4 <__assert_fail@plt+0x84ec>
   20f64:	movw	r1, #20416	; 0x4fc0
   20f68:	movt	r1, #5
   20f6c:	mov	r2, r0
   20f70:	mov	r0, #1
   20f74:	bl	125bc <__printf_chk@plt>
   20f78:	ldr	r3, [sp, #116]	; 0x74
   20f7c:	mov	r1, r4
   20f80:	mov	r2, r6
   20f84:	add	r4, r7, r3
   20f88:	ldr	r3, [sp, #100]	; 0x64
   20f8c:	mov	r0, r4
   20f90:	bl	1c634 <__assert_fail@plt+0x9e5c>
   20f94:	str	r6, [sp]
   20f98:	mov	r3, r1
   20f9c:	mov	r2, r0
   20fa0:	movw	r0, #53816	; 0xd238
   20fa4:	movt	r0, #5
   20fa8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   20fac:	movw	r1, #20416	; 0x4fc0
   20fb0:	movt	r1, #5
   20fb4:	mov	r2, r0
   20fb8:	mov	r0, #1
   20fbc:	bl	125bc <__printf_chk@plt>
   20fc0:	ldr	r3, [sp, #116]	; 0x74
   20fc4:	mov	r2, r5
   20fc8:	movw	r1, #20868	; 0x5184
   20fcc:	add	r4, r4, r3
   20fd0:	movt	r1, #5
   20fd4:	mov	r0, #1
   20fd8:	bl	125bc <__printf_chk@plt>
   20fdc:	rsb	r3, r9, r4
   20fe0:	cmp	sl, r3
   20fe4:	bne	20ff4 <__assert_fail@plt+0xe81c>
   20fe8:	ldr	ip, [sp, #100]	; 0x64
   20fec:	cmp	ip, r4
   20ff0:	bne	1f3ac <__assert_fail@plt+0xcbd4>
   20ff4:	mov	r2, #5
   20ff8:	movw	r1, #20876	; 0x518c
   20ffc:	mov	r0, #0
   21000:	movt	r1, #5
   21004:	bl	12298 <dcgettext@plt>
   21008:	bl	49bf8 <warn@@Base>
   2100c:	b	1f3ac <__assert_fail@plt+0xcbd4>
   21010:	mov	r2, #5
   21014:	movw	r1, #20916	; 0x51b4
   21018:	mov	r0, #0
   2101c:	movt	r1, #5
   21020:	bl	12298 <dcgettext@plt>
   21024:	ldr	r3, [sp, #100]	; 0x64
   21028:	mov	r1, r4
   2102c:	mov	r2, #0
   21030:	mov	r6, r0
   21034:	mov	r0, r5
   21038:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2103c:	mov	r2, r0
   21040:	mov	r3, r1
   21044:	movw	r0, #53816	; 0xd238
   21048:	mov	r1, #0
   2104c:	movt	r0, #5
   21050:	str	r1, [sp]
   21054:	bl	1acc4 <__assert_fail@plt+0x84ec>
   21058:	mov	r1, r6
   2105c:	mov	r2, r0
   21060:	mov	r0, #1
   21064:	bl	125bc <__printf_chk@plt>
   21068:	b	1f3ac <__assert_fail@plt+0xcbd4>
   2106c:	movw	r0, #20944	; 0x51d0
   21070:	movt	r0, #5
   21074:	bl	12418 <puts@plt>
   21078:	b	1f3ac <__assert_fail@plt+0xcbd4>
   2107c:	movw	r0, #20976	; 0x51f0
   21080:	movt	r0, #5
   21084:	bl	12418 <puts@plt>
   21088:	b	1f3ac <__assert_fail@plt+0xcbd4>
   2108c:	movw	r0, #21000	; 0x5208
   21090:	movt	r0, #5
   21094:	bl	12418 <puts@plt>
   21098:	b	1f3ac <__assert_fail@plt+0xcbd4>
   2109c:	movw	r0, #21024	; 0x5220
   210a0:	movt	r0, #5
   210a4:	bl	12418 <puts@plt>
   210a8:	b	1f3ac <__assert_fail@plt+0xcbd4>
   210ac:	movw	r0, #21056	; 0x5240
   210b0:	movt	r0, #5
   210b4:	bl	12418 <puts@plt>
   210b8:	b	1f3ac <__assert_fail@plt+0xcbd4>
   210bc:	movw	r0, #21084	; 0x525c
   210c0:	movt	r0, #5
   210c4:	bl	12418 <puts@plt>
   210c8:	b	1f3ac <__assert_fail@plt+0xcbd4>
   210cc:	movw	r0, #21108	; 0x5274
   210d0:	movt	r0, #5
   210d4:	bl	12418 <puts@plt>
   210d8:	b	1f3ac <__assert_fail@plt+0xcbd4>
   210dc:	movw	r0, #21140	; 0x5294
   210e0:	movt	r0, #5
   210e4:	bl	12418 <puts@plt>
   210e8:	b	1f3ac <__assert_fail@plt+0xcbd4>
   210ec:	movw	r0, #21172	; 0x52b4
   210f0:	movt	r0, #5
   210f4:	bl	12418 <puts@plt>
   210f8:	b	1f3ac <__assert_fail@plt+0xcbd4>
   210fc:	movw	r0, #21208	; 0x52d8
   21100:	movt	r0, #5
   21104:	bl	12418 <puts@plt>
   21108:	b	1f3ac <__assert_fail@plt+0xcbd4>
   2110c:	ldr	r7, [sp, #116]	; 0x74
   21110:	movw	r0, #21232	; 0x52f0
   21114:	movt	r0, #5
   21118:	bl	12418 <puts@plt>
   2111c:	mvn	r7, r7
   21120:	add	r7, r7, sl
   21124:	add	r7, r5, r7
   21128:	cmp	r5, r7
   2112c:	bcs	1f3ac <__assert_fail@plt+0xcbd4>
   21130:	mov	r0, r5
   21134:	mov	r3, r7
   21138:	mov	r1, r4
   2113c:	mov	r2, #0
   21140:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21144:	ldr	r3, [sp, #116]	; 0x74
   21148:	add	r5, r5, r3
   2114c:	cmp	r0, #2
   21150:	beq	21330 <__assert_fail@plt+0xeb58>
   21154:	cmp	r0, #3
   21158:	beq	21240 <__assert_fail@plt+0xea68>
   2115c:	cmp	r0, #1
   21160:	beq	21228 <__assert_fail@plt+0xea50>
   21164:	mov	r6, r0
   21168:	mov	r2, #5
   2116c:	movw	r1, #21388	; 0x538c
   21170:	mov	r0, #0
   21174:	movt	r1, #5
   21178:	bl	12298 <dcgettext@plt>
   2117c:	mov	r2, r6
   21180:	mov	r1, r0
   21184:	mov	r0, #1
   21188:	bl	125bc <__printf_chk@plt>
   2118c:	b	1f3ac <__assert_fail@plt+0xcbd4>
   21190:	tst	r7, #128	; 0x80
   21194:	mov	r2, #5
   21198:	ldr	r4, [sp, #116]	; 0x74
   2119c:	movwne	r1, #21428	; 0x53b4
   211a0:	movweq	r1, #21444	; 0x53c4
   211a4:	movtne	r1, #5
   211a8:	movteq	r1, #5
   211ac:	movne	r0, #0
   211b0:	moveq	r0, #0
   211b4:	bl	12298 <dcgettext@plt>
   211b8:	mvn	r4, r4
   211bc:	add	r4, r4, sl
   211c0:	mov	r1, r0
   211c4:	mov	r0, #1
   211c8:	bl	125bc <__printf_chk@plt>
   211cc:	mov	r2, #5
   211d0:	movw	r1, #21456	; 0x53d0
   211d4:	mov	r0, #0
   211d8:	movt	r1, #5
   211dc:	bl	12298 <dcgettext@plt>
   211e0:	mov	r2, r4
   211e4:	mov	r1, r0
   211e8:	mov	r0, #1
   211ec:	bl	125bc <__printf_chk@plt>
   211f0:	cmp	r4, #0
   211f4:	movne	r5, fp
   211f8:	beq	21218 <__assert_fail@plt+0xea40>
   211fc:	movw	r1, #21468	; 0x53dc
   21200:	mov	r0, #1
   21204:	movt	r1, #5
   21208:	ldrb	r2, [r5, #1]!
   2120c:	bl	125bc <__printf_chk@plt>
   21210:	subs	r4, r4, #1
   21214:	bne	211fc <__assert_fail@plt+0xea24>
   21218:	movw	r0, #16604	; 0x40dc
   2121c:	movt	r0, #5
   21220:	bl	12418 <puts@plt>
   21224:	b	1f3ac <__assert_fail@plt+0xcbd4>
   21228:	movw	r0, #21268	; 0x5314
   2122c:	movt	r0, #5
   21230:	bl	12418 <puts@plt>
   21234:	cmp	r7, r5
   21238:	bhi	21130 <__assert_fail@plt+0xe958>
   2123c:	b	1f3ac <__assert_fail@plt+0xcbd4>
   21240:	mov	r6, #0
   21244:	movw	r1, #21340	; 0x535c
   21248:	mov	r0, #1
   2124c:	movt	r1, #5
   21250:	bl	125bc <__printf_chk@plt>
   21254:	mov	r0, r5
   21258:	mov	r2, r6
   2125c:	mov	r3, r7
   21260:	mov	r1, r4
   21264:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21268:	str	r6, [sp]
   2126c:	mov	r3, r1
   21270:	mov	r2, r0
   21274:	movw	r0, #53816	; 0xd238
   21278:	movt	r0, #5
   2127c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   21280:	movw	r1, #21372	; 0x537c
   21284:	movt	r1, #5
   21288:	mov	r2, r0
   2128c:	mov	r0, #1
   21290:	bl	125bc <__printf_chk@plt>
   21294:	ldr	r3, [sp, #116]	; 0x74
   21298:	mov	r2, r6
   2129c:	mov	r1, r4
   212a0:	add	r5, r5, r3
   212a4:	mov	r3, r7
   212a8:	mov	r0, r5
   212ac:	bl	1c634 <__assert_fail@plt+0x9e5c>
   212b0:	str	r6, [sp]
   212b4:	mov	r3, r1
   212b8:	mov	r2, r0
   212bc:	movw	r0, #53816	; 0xd238
   212c0:	movt	r0, #5
   212c4:	bl	1acc4 <__assert_fail@plt+0x84ec>
   212c8:	movw	r1, #21376	; 0x5380
   212cc:	movt	r1, #5
   212d0:	mov	r2, r0
   212d4:	mov	r0, #1
   212d8:	bl	125bc <__printf_chk@plt>
   212dc:	ldr	r3, [sp, #116]	; 0x74
   212e0:	mov	r2, r6
   212e4:	mov	r1, r4
   212e8:	add	r5, r5, r3
   212ec:	mov	r3, r7
   212f0:	mov	r0, r5
   212f4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   212f8:	str	r6, [sp]
   212fc:	mov	r3, r1
   21300:	mov	r2, r0
   21304:	movw	r0, #53816	; 0xd238
   21308:	movt	r0, #5
   2130c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   21310:	movw	r1, #21380	; 0x5384
   21314:	movt	r1, #5
   21318:	mov	r2, r0
   2131c:	mov	r0, #1
   21320:	bl	125bc <__printf_chk@plt>
   21324:	ldr	r3, [sp, #116]	; 0x74
   21328:	add	r5, r5, r3
   2132c:	b	21234 <__assert_fail@plt+0xea5c>
   21330:	mov	r0, r5
   21334:	mov	r2, #0
   21338:	mov	r3, r7
   2133c:	mov	r1, r4
   21340:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21344:	mov	r3, r1
   21348:	mov	r2, r0
   2134c:	mov	r1, #0
   21350:	movw	r0, #53816	; 0xd238
   21354:	str	r1, [sp]
   21358:	movt	r0, #5
   2135c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   21360:	movw	r1, #21296	; 0x5330
   21364:	movt	r1, #5
   21368:	mov	r2, r0
   2136c:	mov	r0, #1
   21370:	bl	125bc <__printf_chk@plt>
   21374:	ldr	r3, [sp, #116]	; 0x74
   21378:	add	r5, r5, r3
   2137c:	b	21234 <__assert_fail@plt+0xea5c>
   21380:	mov	r2, #5
   21384:	movw	r1, #19636	; 0x4cb4
   21388:	movt	r1, #5
   2138c:	mov	r9, fp
   21390:	ldr	r7, [sp, #56]	; 0x38
   21394:	bl	12298 <dcgettext@plt>
   21398:	bl	49bf8 <warn@@Base>
   2139c:	b	20d44 <__assert_fail@plt+0xe56c>
   213a0:	mov	r2, #5
   213a4:	movw	r1, #20752	; 0x5110
   213a8:	mov	r0, #0
   213ac:	movt	r1, #5
   213b0:	bl	12298 <dcgettext@plt>
   213b4:	ldr	r1, [sp, #116]	; 0x74
   213b8:	mov	r4, #0
   213bc:	mov	r5, #0
   213c0:	mvn	r1, r1
   213c4:	add	r1, r1, sl
   213c8:	bl	49bf8 <warn@@Base>
   213cc:	b	20e24 <__assert_fail@plt+0xe64c>
   213d0:	mov	r4, #0
   213d4:	mov	r5, #0
   213d8:	b	20e24 <__assert_fail@plt+0xe64c>
   213dc:	bl	122b0 <__stack_chk_fail@plt>
   213e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213e4:	movw	r6, #65176	; 0xfe98
   213e8:	sub	sp, sp, #36	; 0x24
   213ec:	movt	r6, #6
   213f0:	mov	fp, r3
   213f4:	mov	r8, r0
   213f8:	ldr	ip, [r6]
   213fc:	mov	r0, #72	; 0x48
   21400:	ldr	r3, [sp, #76]	; 0x4c
   21404:	mov	r4, r1
   21408:	str	r2, [sp, #12]
   2140c:	add	sl, r8, #1
   21410:	ldr	r2, [sp, #72]	; 0x48
   21414:	str	ip, [sp, #28]
   21418:	str	r3, [sp, #16]
   2141c:	str	r2, [sp, #8]
   21420:	bl	12358 <xmalloc@plt>
   21424:	mov	r1, #0
   21428:	mov	r2, #72	; 0x48
   2142c:	mov	r5, r0
   21430:	bl	12580 <memset@plt>
   21434:	mov	r0, #2
   21438:	bl	12358 <xmalloc@plt>
   2143c:	str	r0, [r5, #12]
   21440:	mov	r0, #4
   21444:	bl	12358 <xmalloc@plt>
   21448:	cmp	sl, r4
   2144c:	str	sl, [r5, #20]
   21450:	ldrb	r7, [r8]
   21454:	str	r0, [r5, #16]
   21458:	bcs	21484 <__assert_fail@plt+0xecac>
   2145c:	ldrb	r3, [r8, #1]
   21460:	add	sl, r8, #2
   21464:	cmp	r3, #0
   21468:	bne	2147c <__assert_fail@plt+0xeca4>
   2146c:	b	21484 <__assert_fail@plt+0xecac>
   21470:	ldrb	r3, [sl], #1
   21474:	cmp	r3, #0
   21478:	beq	21484 <__assert_fail@plt+0xecac>
   2147c:	cmp	r4, sl
   21480:	bhi	21470 <__assert_fail@plt+0xec98>
   21484:	cmp	r4, sl
   21488:	beq	2186c <__assert_fail@plt+0xf094>
   2148c:	ldrb	r3, [r8, #1]
   21490:	cmp	r3, #101	; 0x65
   21494:	bne	214bc <__assert_fail@plt+0xece4>
   21498:	ldrb	r3, [r8, #2]
   2149c:	cmp	r3, #104	; 0x68
   214a0:	bne	214bc <__assert_fail@plt+0xece4>
   214a4:	ldrb	r3, [r8, #3]
   214a8:	cmp	r3, #0
   214ac:	movweq	r3, #3424	; 0xd60
   214b0:	movteq	r3, #7
   214b4:	ldreq	r3, [r3]
   214b8:	addeq	sl, sl, r3
   214bc:	cmp	r7, #3
   214c0:	ble	21518 <__assert_fail@plt+0xed40>
   214c4:	add	r8, sl, #1
   214c8:	cmp	r4, r8
   214cc:	bhi	215ac <__assert_fail@plt+0xedd4>
   214d0:	cmp	r4, sl
   214d4:	bhi	21734 <__assert_fail@plt+0xef5c>
   214d8:	mov	r3, #0
   214dc:	strb	r3, [r5, #70]	; 0x46
   214e0:	mov	r2, #5
   214e4:	movw	r1, #22364	; 0x575c
   214e8:	mov	r0, #0
   214ec:	movt	r1, #5
   214f0:	bl	12298 <dcgettext@plt>
   214f4:	ldrb	r1, [r5, #70]	; 0x46
   214f8:	bl	49bf8 <warn@@Base>
   214fc:	mov	r0, r4
   21500:	ldr	r2, [sp, #28]
   21504:	ldr	r3, [r6]
   21508:	cmp	r2, r3
   2150c:	bne	218c4 <__assert_fail@plt+0xf0ec>
   21510:	add	sp, sp, #36	; 0x24
   21514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21518:	movw	r9, #3424	; 0xd60
   2151c:	movt	r9, #7
   21520:	add	r8, sp, #24
   21524:	mov	r3, #0
   21528:	ldr	ip, [r9]
   2152c:	mov	r2, r3
   21530:	mov	r0, sl
   21534:	strb	r3, [r5, #71]	; 0x47
   21538:	mov	r1, r8
   2153c:	mov	r3, r4
   21540:	strb	ip, [r5, #70]	; 0x46
   21544:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21548:	ldr	ip, [sp, #24]
   2154c:	mov	r1, r8
   21550:	mov	r2, #1
   21554:	mov	r3, r4
   21558:	add	sl, sl, ip
   2155c:	str	r0, [r5, #24]
   21560:	mov	r0, sl
   21564:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21568:	ldr	ip, [sp, #24]
   2156c:	cmp	r7, #1
   21570:	add	ip, sl, ip
   21574:	str	r0, [r5, #28]
   21578:	bne	21660 <__assert_fail@plt+0xee88>
   2157c:	add	sl, ip, #1
   21580:	cmp	r4, sl
   21584:	bhi	21714 <__assert_fail@plt+0xef3c>
   21588:	cmp	r4, ip
   2158c:	bls	215a0 <__assert_fail@plt+0xedc8>
   21590:	rsb	r1, ip, r4
   21594:	sub	r3, r1, #1
   21598:	cmp	r3, #7
   2159c:	bls	21718 <__assert_fail@plt+0xef40>
   215a0:	mov	r3, #0
   215a4:	str	r3, [r5, #64]	; 0x40
   215a8:	b	21688 <__assert_fail@plt+0xeeb0>
   215ac:	mov	r1, #1
   215b0:	movw	r9, #3472	; 0xd90
   215b4:	movt	r9, #7
   215b8:	mov	r0, sl
   215bc:	ldr	r3, [r9]
   215c0:	blx	r3
   215c4:	uxtb	ip, r0
   215c8:	strb	ip, [r5, #70]	; 0x46
   215cc:	sub	r3, ip, #1
   215d0:	cmp	r3, #7
   215d4:	bhi	214e0 <__assert_fail@plt+0xed08>
   215d8:	add	sl, sl, #2
   215dc:	cmp	r4, sl
   215e0:	bhi	216d0 <__assert_fail@plt+0xeef8>
   215e4:	cmp	r4, r8
   215e8:	bls	215fc <__assert_fail@plt+0xee24>
   215ec:	rsb	r1, r8, r4
   215f0:	sub	r3, r1, #1
   215f4:	cmp	r3, #7
   215f8:	bls	216d4 <__assert_fail@plt+0xeefc>
   215fc:	mov	r3, #0
   21600:	strb	r3, [r5, #71]	; 0x47
   21604:	add	r3, ip, r3
   21608:	cmp	r3, #8
   2160c:	bgt	216f0 <__assert_fail@plt+0xef18>
   21610:	add	r8, sp, #24
   21614:	movw	r9, #3424	; 0xd60
   21618:	movt	r9, #7
   2161c:	mov	r0, sl
   21620:	mov	r2, #0
   21624:	mov	r3, r4
   21628:	mov	r1, r8
   2162c:	str	ip, [r9]
   21630:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21634:	ldr	ip, [sp, #24]
   21638:	mov	r1, r8
   2163c:	mov	r2, #1
   21640:	add	sl, sl, ip
   21644:	mov	r3, r4
   21648:	str	r0, [r5, #24]
   2164c:	mov	r0, sl
   21650:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21654:	ldr	ip, [sp, #24]
   21658:	add	ip, sl, ip
   2165c:	str	r0, [r5, #28]
   21660:	mov	r0, ip
   21664:	mov	r1, r8
   21668:	mov	r2, #0
   2166c:	mov	r3, r4
   21670:	str	ip, [sp]
   21674:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21678:	ldr	sl, [sp, #24]
   2167c:	ldr	ip, [sp]
   21680:	add	sl, ip, sl
   21684:	str	r0, [r5, #64]	; 0x40
   21688:	ldr	r3, [r5, #20]
   2168c:	ldrb	r3, [r3]
   21690:	cmp	r3, #122	; 0x7a
   21694:	movne	r8, #0
   21698:	movne	ip, r8
   2169c:	beq	21748 <__assert_fail@plt+0xef70>
   216a0:	ldr	r3, [sp, #12]
   216a4:	cmp	fp, #0
   216a8:	ldr	r2, [sp, #8]
   216ac:	str	r5, [r3]
   216b0:	strne	r7, [fp]
   216b4:	cmp	r2, #0
   216b8:	strne	ip, [r2]
   216bc:	ldrne	r3, [sp, #16]
   216c0:	movne	r0, sl
   216c4:	moveq	r0, sl
   216c8:	strne	r8, [r3]
   216cc:	b	21500 <__assert_fail@plt+0xed28>
   216d0:	mov	r1, #1
   216d4:	ldr	r3, [r9]
   216d8:	mov	r0, r8
   216dc:	blx	r3
   216e0:	uxtb	r0, r0
   216e4:	strb	r0, [r5, #71]	; 0x47
   216e8:	cmp	r0, #8
   216ec:	bls	2188c <__assert_fail@plt+0xf0b4>
   216f0:	mov	r2, #5
   216f4:	movw	r1, #22404	; 0x5784
   216f8:	mov	r0, #0
   216fc:	movt	r1, #5
   21700:	bl	12298 <dcgettext@plt>
   21704:	ldrb	r1, [r5, #71]	; 0x47
   21708:	bl	49bf8 <warn@@Base>
   2170c:	mov	r0, r4
   21710:	b	21500 <__assert_fail@plt+0xed28>
   21714:	mov	r1, r7
   21718:	movw	r3, #3472	; 0xd90
   2171c:	movt	r3, #7
   21720:	mov	r0, ip
   21724:	ldr	r3, [r3]
   21728:	blx	r3
   2172c:	str	r0, [r5, #64]	; 0x40
   21730:	b	21688 <__assert_fail@plt+0xeeb0>
   21734:	rsb	r1, sl, r4
   21738:	sub	r3, r1, #1
   2173c:	cmp	r3, #7
   21740:	bhi	214d8 <__assert_fail@plt+0xed00>
   21744:	b	215b0 <__assert_fail@plt+0xedd8>
   21748:	mov	r1, r8
   2174c:	mov	r0, sl
   21750:	mov	r2, #0
   21754:	mov	r3, r4
   21758:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2175c:	ldr	r8, [sp, #24]
   21760:	add	r8, sl, r8
   21764:	add	sl, r8, r0
   21768:	mov	ip, r0
   2176c:	cmp	r4, sl
   21770:	bcc	21898 <__assert_fail@plt+0xf0c0>
   21774:	cmp	r0, #0
   21778:	beq	216a0 <__assert_fail@plt+0xeec8>
   2177c:	ldr	r3, [r5, #20]
   21780:	cmp	r8, sl
   21784:	add	r2, r3, #1
   21788:	str	r2, [sp, #20]
   2178c:	bhi	21838 <__assert_fail@plt+0xf060>
   21790:	ldr	r2, [sp, #20]
   21794:	cmp	r4, r2
   21798:	bls	216a0 <__assert_fail@plt+0xeec8>
   2179c:	add	r2, r8, ip
   217a0:	cmp	r2, r8
   217a4:	bls	216a0 <__assert_fail@plt+0xeec8>
   217a8:	ldr	r1, [r9]
   217ac:	sub	r4, r4, #1
   217b0:	mov	r0, r8
   217b4:	add	r9, r1, #1
   217b8:	b	217dc <__assert_fail@plt+0xf004>
   217bc:	cmp	r1, #82	; 0x52
   217c0:	beq	21828 <__assert_fail@plt+0xf050>
   217c4:	cmp	r1, #83	; 0x53
   217c8:	bne	216a0 <__assert_fail@plt+0xeec8>
   217cc:	cmp	r3, r4
   217d0:	beq	216a0 <__assert_fail@plt+0xeec8>
   217d4:	cmp	r2, r0
   217d8:	bls	216a0 <__assert_fail@plt+0xeec8>
   217dc:	ldrb	r1, [r3, #1]!
   217e0:	cmp	r1, #76	; 0x4c
   217e4:	addeq	r0, r0, #1
   217e8:	beq	217cc <__assert_fail@plt+0xeff4>
   217ec:	cmp	r1, #80	; 0x50
   217f0:	bne	217bc <__assert_fail@plt+0xefe4>
   217f4:	ldrb	r1, [r0]
   217f8:	and	r1, r1, #7
   217fc:	cmp	r1, #3
   21800:	moveq	r1, #5
   21804:	beq	21820 <__assert_fail@plt+0xf048>
   21808:	cmp	r1, #4
   2180c:	moveq	r1, #9
   21810:	beq	21820 <__assert_fail@plt+0xf048>
   21814:	cmp	r1, #2
   21818:	movne	r1, r9
   2181c:	moveq	r1, #3
   21820:	add	r0, r0, r1
   21824:	b	217cc <__assert_fail@plt+0xeff4>
   21828:	ldrb	r1, [r0]
   2182c:	add	r0, r0, #1
   21830:	strb	r1, [r5, #68]	; 0x44
   21834:	b	217cc <__assert_fail@plt+0xeff4>
   21838:	mov	r2, #5
   2183c:	movw	r1, #22480	; 0x57d0
   21840:	mov	r0, #0
   21844:	movt	r1, #5
   21848:	str	r3, [sp, #4]
   2184c:	str	ip, [sp]
   21850:	bl	12298 <dcgettext@plt>
   21854:	ldr	ip, [sp]
   21858:	mov	r1, ip
   2185c:	bl	49bf8 <warn@@Base>
   21860:	mov	ip, #0
   21864:	ldr	r3, [sp, #4]
   21868:	b	21790 <__assert_fail@plt+0xefb8>
   2186c:	mov	r2, #5
   21870:	movw	r1, #22324	; 0x5734
   21874:	mov	r0, #0
   21878:	movt	r1, #5
   2187c:	bl	12298 <dcgettext@plt>
   21880:	bl	49bf8 <warn@@Base>
   21884:	mov	r0, r4
   21888:	b	21500 <__assert_fail@plt+0xed28>
   2188c:	ldrb	ip, [r5, #70]	; 0x46
   21890:	mov	r3, r0
   21894:	b	21604 <__assert_fail@plt+0xee2c>
   21898:	mov	r2, #5
   2189c:	movw	r1, #22444	; 0x57ac
   218a0:	mov	r0, #0
   218a4:	movt	r1, #5
   218a8:	str	ip, [sp]
   218ac:	bl	12298 <dcgettext@plt>
   218b0:	ldr	ip, [sp]
   218b4:	mov	r1, ip
   218b8:	bl	49bf8 <warn@@Base>
   218bc:	mov	r0, r4
   218c0:	b	21500 <__assert_fail@plt+0xed28>
   218c4:	bl	122b0 <__stack_chk_fail@plt>
   218c8:	ldr	r1, [pc, #20]	; 218e4 <__assert_fail@plt+0xf10c>
   218cc:	movw	r3, #1240	; 0x4d8
   218d0:	movt	r3, #7
   218d4:	mov	r2, #101	; 0x65
   218d8:	str	r1, [r3, #1104]	; 0x450
   218dc:	str	r2, [r3, #1108]	; 0x454
   218e0:	bx	lr
   218e4:	andeq	r3, r5, r4, lsl #6
   218e8:	ldr	r1, [pc, #20]	; 21904 <__assert_fail@plt+0xf12c>
   218ec:	movw	r3, #1240	; 0x4d8
   218f0:	movt	r3, #7
   218f4:	mov	r2, #101	; 0x65
   218f8:	str	r1, [r3, #1104]	; 0x450
   218fc:	str	r2, [r3, #1108]	; 0x454
   21900:	bx	lr
   21904:	muleq	r5, r8, r4
   21908:	ldr	r1, [pc, #20]	; 21924 <__assert_fail@plt+0xf14c>
   2190c:	movw	r3, #1240	; 0x4d8
   21910:	movt	r3, #7
   21914:	mov	r2, #126	; 0x7e
   21918:	str	r1, [r3, #1104]	; 0x450
   2191c:	str	r2, [r3, #1108]	; 0x454
   21920:	bx	lr
   21924:	andeq	r3, r5, ip, lsr #12
   21928:	ldr	r1, [pc, #20]	; 21944 <__assert_fail@plt+0xf16c>
   2192c:	movw	r3, #1240	; 0x4d8
   21930:	movt	r3, #7
   21934:	mov	r2, #96	; 0x60
   21938:	str	r1, [r3, #1104]	; 0x450
   2193c:	str	r2, [r3, #1108]	; 0x454
   21940:	bx	lr
   21944:	andeq	r3, r5, r4, lsr #16
   21948:	ldr	r1, [pc, #20]	; 21964 <__assert_fail@plt+0xf18c>
   2194c:	movw	r3, #1240	; 0x4d8
   21950:	movt	r3, #7
   21954:	mov	r2, #84	; 0x54
   21958:	str	r1, [r3, #1104]	; 0x450
   2195c:	str	r2, [r3, #1108]	; 0x454
   21960:	bx	lr
   21964:	andeq	r3, r5, r4, lsr #19
   21968:	cmp	r0, #62	; 0x3e
   2196c:	beq	219e4 <__assert_fail@plt+0xf20c>
   21970:	bhi	21994 <__assert_fail@plt+0xf1bc>
   21974:	cmp	r0, #6
   21978:	beq	219c8 <__assert_fail@plt+0xf1f0>
   2197c:	cmp	r0, #22
   21980:	beq	21a00 <__assert_fail@plt+0xf228>
   21984:	cmp	r0, #3
   21988:	bxne	lr
   2198c:	ldr	r1, [pc, #136]	; 21a1c <__assert_fail@plt+0xf244>
   21990:	b	219cc <__assert_fail@plt+0xf1f4>
   21994:	cmp	r0, #180	; 0xb4
   21998:	bxcc	lr
   2199c:	cmp	r0, #181	; 0xb5
   219a0:	bls	219e4 <__assert_fail@plt+0xf20c>
   219a4:	cmp	r0, #183	; 0xb7
   219a8:	bxne	lr
   219ac:	ldr	r1, [pc, #108]	; 21a20 <__assert_fail@plt+0xf248>
   219b0:	movw	r3, #1240	; 0x4d8
   219b4:	movt	r3, #7
   219b8:	mov	r2, #96	; 0x60
   219bc:	str	r1, [r3, #1104]	; 0x450
   219c0:	str	r2, [r3, #1108]	; 0x454
   219c4:	bx	lr
   219c8:	ldr	r1, [pc, #84]	; 21a24 <__assert_fail@plt+0xf24c>
   219cc:	movw	r3, #1240	; 0x4d8
   219d0:	movt	r3, #7
   219d4:	mov	r2, #101	; 0x65
   219d8:	str	r1, [r3, #1104]	; 0x450
   219dc:	str	r2, [r3, #1108]	; 0x454
   219e0:	bx	lr
   219e4:	ldr	r1, [pc, #60]	; 21a28 <__assert_fail@plt+0xf250>
   219e8:	movw	r3, #1240	; 0x4d8
   219ec:	movt	r3, #7
   219f0:	mov	r2, #126	; 0x7e
   219f4:	str	r1, [r3, #1104]	; 0x450
   219f8:	str	r2, [r3, #1108]	; 0x454
   219fc:	bx	lr
   21a00:	ldr	r1, [pc, #36]	; 21a2c <__assert_fail@plt+0xf254>
   21a04:	movw	r3, #1240	; 0x4d8
   21a08:	movt	r3, #7
   21a0c:	mov	r2, #84	; 0x54
   21a10:	str	r1, [r3, #1104]	; 0x450
   21a14:	str	r2, [r3, #1108]	; 0x454
   21a18:	bx	lr
   21a1c:	andeq	r3, r5, r4, lsl #6
   21a20:	andeq	r3, r5, r4, lsr #16
   21a24:	muleq	r5, r8, r4
   21a28:	andeq	r3, r5, ip, lsr #12
   21a2c:	andeq	r3, r5, r4, lsr #19
   21a30:	push	{r3, r4, r5, lr}
   21a34:	mov	r4, r0
   21a38:	mvn	r0, #0
   21a3c:	mov	r5, r1
   21a40:	bl	4f040 <warn@@Base+0x5448>
   21a44:	cmp	r0, r4
   21a48:	bls	21a58 <__assert_fail@plt+0xf280>
   21a4c:	mul	r0, r4, r5
   21a50:	pop	{r3, r4, r5, lr}
   21a54:	b	12358 <xmalloc@plt>
   21a58:	mov	r0, #0
   21a5c:	pop	{r3, r4, r5, pc}
   21a60:	push	{r3, r4, r5, lr}
   21a64:	mov	r4, r0
   21a68:	mvn	r0, #0
   21a6c:	mov	r5, r1
   21a70:	bl	4f040 <warn@@Base+0x5448>
   21a74:	cmp	r0, r4
   21a78:	bls	21a88 <__assert_fail@plt+0xf2b0>
   21a7c:	mul	r0, r4, r5
   21a80:	pop	{r3, r4, r5, lr}
   21a84:	b	12358 <xmalloc@plt>
   21a88:	movw	r3, #168	; 0xa8
   21a8c:	movt	r3, #7
   21a90:	mov	r2, #5
   21a94:	movw	r1, #22524	; 0x57fc
   21a98:	mov	r0, #0
   21a9c:	movt	r1, #5
   21aa0:	ldr	r5, [r3]
   21aa4:	bl	12298 <dcgettext@plt>
   21aa8:	mov	r3, r4
   21aac:	mov	r1, #1
   21ab0:	mov	r2, r0
   21ab4:	mov	r0, r5
   21ab8:	bl	125d4 <__fprintf_chk@plt>
   21abc:	mov	r0, #1
   21ac0:	bl	126a0 <xexit@plt>
   21ac4:	push	{r4, r5, r6, lr}
   21ac8:	mov	r4, r1
   21acc:	mov	r6, r0
   21ad0:	mov	r1, r2
   21ad4:	mvn	r0, #0
   21ad8:	mov	r5, r2
   21adc:	bl	4f040 <warn@@Base+0x5448>
   21ae0:	cmp	r0, r4
   21ae4:	bls	21af8 <__assert_fail@plt+0xf320>
   21ae8:	mov	r0, r6
   21aec:	mul	r1, r4, r5
   21af0:	pop	{r4, r5, r6, lr}
   21af4:	b	122c8 <xrealloc@plt>
   21af8:	movw	r3, #168	; 0xa8
   21afc:	movt	r3, #7
   21b00:	mov	r2, #5
   21b04:	movw	r1, #22600	; 0x5848
   21b08:	mov	r0, #0
   21b0c:	movt	r1, #5
   21b10:	ldr	r5, [r3]
   21b14:	bl	12298 <dcgettext@plt>
   21b18:	mov	r3, r4
   21b1c:	mov	r1, #1
   21b20:	mov	r2, r0
   21b24:	mov	r0, r5
   21b28:	bl	125d4 <__fprintf_chk@plt>
   21b2c:	mov	r0, #1
   21b30:	bl	126a0 <xexit@plt>
   21b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b38:	movw	r8, #65176	; 0xfe98
   21b3c:	sub	sp, sp, #196	; 0xc4
   21b40:	movt	r8, #6
   21b44:	mov	sl, r2
   21b48:	cmp	sl, r3
   21b4c:	ldr	r5, [sp, #248]	; 0xf8
   21b50:	mov	r4, r0
   21b54:	ldr	r2, [r8]
   21b58:	mov	r9, r1
   21b5c:	ldr	r6, [sp, #260]	; 0x104
   21b60:	mov	r0, #0
   21b64:	ldr	r7, [sp, #268]	; 0x10c
   21b68:	mov	r1, #0
   21b6c:	ldr	ip, [sp, #272]	; 0x110
   21b70:	mov	fp, r3
   21b74:	str	r5, [sp, #64]	; 0x40
   21b78:	str	r2, [sp, #188]	; 0xbc
   21b7c:	strd	r0, [sp, #104]	; 0x68
   21b80:	ldr	r5, [sp, #252]	; 0xfc
   21b84:	str	r6, [sp, #48]	; 0x30
   21b88:	str	r7, [sp, #80]	; 0x50
   21b8c:	str	ip, [sp, #68]	; 0x44
   21b90:	bhi	21e10 <__assert_fail@plt+0xf638>
   21b94:	movne	r2, #0
   21b98:	moveq	r2, #1
   21b9c:	cmp	r9, #25
   21ba0:	moveq	r2, #0
   21ba4:	andne	r2, r2, #1
   21ba8:	cmp	r2, #0
   21bac:	bne	21e10 <__assert_fail@plt+0xf638>
   21bb0:	cmp	r9, #17
   21bb4:	beq	227e4 <__assert_fail@plt+0x1000c>
   21bb8:	bls	21e44 <__assert_fail@plt+0xf66c>
   21bbc:	cmp	r9, #23
   21bc0:	beq	227fc <__assert_fail@plt+0x10024>
   21bc4:	bls	21f14 <__assert_fail@plt+0xf73c>
   21bc8:	movw	r1, #7938	; 0x1f02
   21bcc:	cmp	r9, r1
   21bd0:	beq	22688 <__assert_fail@plt+0xfeb0>
   21bd4:	bhi	220cc <__assert_fail@plt+0xf8f4>
   21bd8:	cmp	r9, #25
   21bdc:	beq	22078 <__assert_fail@plt+0xf8a0>
   21be0:	movw	r3, #7937	; 0x1f01
   21be4:	cmp	r9, r3
   21be8:	bne	220dc <__assert_fail@plt+0xf904>
   21bec:	mov	r0, sl
   21bf0:	add	r1, sp, #100	; 0x64
   21bf4:	mov	r2, #0
   21bf8:	mov	r3, fp
   21bfc:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21c00:	ldr	ip, [sp, #100]	; 0x64
   21c04:	add	ip, sl, ip
   21c08:	str	ip, [sp, #52]	; 0x34
   21c0c:	strd	r0, [sp, #104]	; 0x68
   21c10:	ldr	r7, [sp, #264]	; 0x108
   21c14:	cmp	r7, #0
   21c18:	bne	21eac <__assert_fail@plt+0xf6d4>
   21c1c:	mov	r0, r7
   21c20:	mov	r2, #5
   21c24:	movw	r1, #23212	; 0x5aac
   21c28:	movt	r1, #5
   21c2c:	bl	12298 <dcgettext@plt>
   21c30:	ldrd	r2, [sp, #104]	; 0x68
   21c34:	str	r7, [sp]
   21c38:	movw	r5, #62864	; 0xf590
   21c3c:	movt	r5, #6
   21c40:	str	r0, [sp, #84]	; 0x54
   21c44:	movw	r0, #41908	; 0xa3b4
   21c48:	movt	r0, #5
   21c4c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   21c50:	ldr	r3, [sp, #104]	; 0x68
   21c54:	ldr	r2, [sp, #108]	; 0x6c
   21c58:	ldr	r1, [sp, #244]	; 0xf4
   21c5c:	ldr	lr, [r5, #2124]	; 0x84c
   21c60:	cmp	lr, #0
   21c64:	mov	ip, r0
   21c68:	ldr	r0, [sp, #240]	; 0xf0
   21c6c:	umull	r6, r7, r3, r0
   21c70:	mul	r2, r0, r2
   21c74:	mla	r2, r3, r1, r2
   21c78:	strd	r6, [sp, #72]	; 0x48
   21c7c:	add	r2, r2, r7
   21c80:	str	r2, [sp, #76]	; 0x4c
   21c84:	beq	2412c <__assert_fail@plt+0x11954>
   21c88:	ldrd	r0, [sp, #72]	; 0x48
   21c8c:	movw	r3, #2136	; 0x858
   21c90:	ldrd	r6, [sp, #240]	; 0xf0
   21c94:	ldrd	r2, [r3, r5]
   21c98:	adds	r0, r0, r6
   21c9c:	adc	r1, r1, r7
   21ca0:	cmp	r1, r3
   21ca4:	cmpeq	r0, r2
   21ca8:	bhi	23c88 <__assert_fail@plt+0x114b0>
   21cac:	ldr	r1, [sp, #72]	; 0x48
   21cb0:	movw	r3, #3472	; 0xd90
   21cb4:	movt	r3, #7
   21cb8:	add	r0, lr, r1
   21cbc:	ldr	r1, [sp, #240]	; 0xf0
   21cc0:	ldr	r3, [r3]
   21cc4:	str	ip, [sp, #56]	; 0x38
   21cc8:	blx	r3
   21ccc:	ldr	r5, [sp, #264]	; 0x108
   21cd0:	str	r5, [sp]
   21cd4:	mov	r2, r0
   21cd8:	mov	r3, r1
   21cdc:	movw	r0, #41908	; 0xa3b4
   21ce0:	movt	r0, #5
   21ce4:	bl	1acc4 <__assert_fail@plt+0x84ec>
   21ce8:	ldr	ip, [sp, #56]	; 0x38
   21cec:	mov	r3, r0
   21cf0:	ldr	r1, [sp, #84]	; 0x54
   21cf4:	mov	r2, ip
   21cf8:	mov	r0, #1
   21cfc:	mov	r7, #0
   21d00:	bl	125bc <__printf_chk@plt>
   21d04:	movw	r3, #3404	; 0xd4c
   21d08:	movt	r3, #7
   21d0c:	ldr	r3, [r3]
   21d10:	cmp	r3, #0
   21d14:	bne	21eb0 <__assert_fail@plt+0xf6d8>
   21d18:	movw	r3, #3436	; 0xd6c
   21d1c:	movt	r3, #7
   21d20:	ldr	r3, [r3]
   21d24:	cmp	r3, #0
   21d28:	bne	21eb0 <__assert_fail@plt+0xf6d8>
   21d2c:	rsbs	r3, r4, #1
   21d30:	ldr	ip, [sp, #264]	; 0x108
   21d34:	movcc	r3, #0
   21d38:	cmp	ip, #0
   21d3c:	orrne	r3, r3, #1
   21d40:	cmp	r3, #0
   21d44:	bne	21f0c <__assert_fail@plt+0xf734>
   21d48:	cmp	r4, #56	; 0x38
   21d4c:	beq	22280 <__assert_fail@plt+0xfaa8>
   21d50:	bhi	22248 <__assert_fail@plt+0xfa70>
   21d54:	cmp	r4, #25
   21d58:	beq	22280 <__assert_fail@plt+0xfaa8>
   21d5c:	bhi	22330 <__assert_fail@plt+0xfb58>
   21d60:	cmp	r4, #19
   21d64:	beq	22bfc <__assert_fail@plt+0x10424>
   21d68:	bls	22b98 <__assert_fail@plt+0x103c0>
   21d6c:	cmp	r4, #23
   21d70:	beq	22c60 <__assert_fail@plt+0x10488>
   21d74:	cmp	r4, #24
   21d78:	bne	21f0c <__assert_fail@plt+0xf734>
   21d7c:	movw	r3, #7968	; 0x1f20
   21d80:	cmp	r9, #32
   21d84:	cmpne	r9, r3
   21d88:	beq	21f0c <__assert_fail@plt+0xf734>
   21d8c:	sub	r3, r9, #17
   21d90:	ldrd	r4, [sp, #104]	; 0x68
   21d94:	cmp	r9, #21
   21d98:	cmpne	r3, #2
   21d9c:	bhi	21db0 <__assert_fail@plt+0xf5d8>
   21da0:	ldrd	r0, [sp, #232]	; 0xe8
   21da4:	adds	r4, r4, r0
   21da8:	adc	r5, r5, r1
   21dac:	strd	r4, [sp, #104]	; 0x68
   21db0:	ldr	r6, [sp, #80]	; 0x50
   21db4:	ldrd	r2, [r6, #24]
   21db8:	cmp	r3, r5
   21dbc:	cmpeq	r2, r4
   21dc0:	bhi	239f8 <__assert_fail@plt+0x11220>
   21dc4:	mov	r2, #5
   21dc8:	movw	r1, #24724	; 0x6094
   21dcc:	mov	r0, #0
   21dd0:	movt	r1, #5
   21dd4:	bl	12298 <dcgettext@plt>
   21dd8:	ldrd	r2, [sp, #104]	; 0x68
   21ddc:	mov	r1, #0
   21de0:	str	r1, [sp]
   21de4:	mov	r4, r0
   21de8:	movw	r0, #41908	; 0xa3b4
   21dec:	movt	r0, #5
   21df0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   21df4:	ldr	r2, [r6, #12]
   21df8:	rsb	r2, r2, sl
   21dfc:	mov	r1, r0
   21e00:	mov	r0, r4
   21e04:	bl	49bf8 <warn@@Base>
   21e08:	ldr	r0, [sp, #52]	; 0x34
   21e0c:	b	21e2c <__assert_fail@plt+0xf654>
   21e10:	mov	r2, #5
   21e14:	movw	r1, #22700	; 0x58ac
   21e18:	mov	r0, #0
   21e1c:	movt	r1, #5
   21e20:	bl	12298 <dcgettext@plt>
   21e24:	bl	49bf8 <warn@@Base>
   21e28:	mov	r0, sl
   21e2c:	ldr	r2, [sp, #188]	; 0xbc
   21e30:	ldr	r3, [r8]
   21e34:	cmp	r2, r3
   21e38:	bne	23f60 <__assert_fail@plt+0x11788>
   21e3c:	add	sp, sp, #196	; 0xc4
   21e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e44:	cmp	r9, #12
   21e48:	bls	21fcc <__assert_fail@plt+0xf7f4>
   21e4c:	cmp	r9, #14
   21e50:	beq	227fc <__assert_fail@plt+0x10024>
   21e54:	bcc	2264c <__assert_fail@plt+0xfe74>
   21e58:	cmp	r9, #15
   21e5c:	beq	22190 <__assert_fail@plt+0xf9b8>
   21e60:	cmp	r9, #16
   21e64:	bne	220dc <__assert_fail@plt+0xf904>
   21e68:	ldr	r0, [sp, #256]	; 0x100
   21e6c:	cmp	r0, #2
   21e70:	beq	23618 <__assert_fail@plt+0x10e40>
   21e74:	ldr	r6, [sp, #256]	; 0x100
   21e78:	sub	r3, r6, #3
   21e7c:	cmp	r3, #1
   21e80:	bls	232f0 <__assert_fail@plt+0x10b18>
   21e84:	movw	r1, #22720	; 0x58c0
   21e88:	mov	r0, #0
   21e8c:	movt	r1, #5
   21e90:	mov	r2, #5
   21e94:	bl	12298 <dcgettext@plt>
   21e98:	str	sl, [sp, #52]	; 0x34
   21e9c:	bl	494bc <error@@Base>
   21ea0:	ldr	ip, [sp, #264]	; 0x108
   21ea4:	cmp	ip, #0
   21ea8:	beq	237a0 <__assert_fail@plt+0x10fc8>
   21eac:	mov	r7, #0
   21eb0:	movw	r5, #1240	; 0x4d8
   21eb4:	movt	r5, #7
   21eb8:	ldr	r3, [r5, #1568]	; 0x620
   21ebc:	cmp	r3, #0
   21ec0:	bne	21d2c <__assert_fail@plt+0xf554>
   21ec4:	ldr	ip, [sp, #48]	; 0x30
   21ec8:	cmp	ip, #0
   21ecc:	beq	21d2c <__assert_fail@plt+0xf554>
   21ed0:	cmp	r4, #72	; 0x48
   21ed4:	beq	223f8 <__assert_fail@plt+0xfc20>
   21ed8:	bls	223ac <__assert_fail@plt+0xfbd4>
   21edc:	movw	r3, #8468	; 0x2114
   21ee0:	cmp	r4, r3
   21ee4:	bls	22588 <__assert_fail@plt+0xfdb0>
   21ee8:	movw	r3, #8498	; 0x2132
   21eec:	cmp	r4, r3
   21ef0:	beq	22bec <__assert_fail@plt+0x10414>
   21ef4:	add	r3, r3, #1
   21ef8:	cmp	r4, r3
   21efc:	bne	21d2c <__assert_fail@plt+0xf554>
   21f00:	ldrd	r2, [sp, #104]	; 0x68
   21f04:	ldr	r7, [sp, #48]	; 0x30
   21f08:	strd	r2, [r7, #32]
   21f0c:	ldr	r0, [sp, #52]	; 0x34
   21f10:	b	21e2c <__assert_fail@plt+0xf654>
   21f14:	cmp	r9, #19
   21f18:	beq	22670 <__assert_fail@plt+0xfe98>
   21f1c:	bcc	22600 <__assert_fail@plt+0xfe28>
   21f20:	cmp	r9, #21
   21f24:	beq	22190 <__assert_fail@plt+0xf9b8>
   21f28:	cmp	r9, #22
   21f2c:	bne	220dc <__assert_fail@plt+0xf904>
   21f30:	mov	r0, sl
   21f34:	add	r1, sp, #100	; 0x64
   21f38:	mov	r2, #0
   21f3c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   21f40:	ldr	ip, [sp, #264]	; 0x108
   21f44:	ldr	r3, [sp, #100]	; 0x64
   21f48:	cmp	ip, #0
   21f4c:	add	sl, sl, r3
   21f50:	mov	r7, r0
   21f54:	bne	21f70 <__assert_fail@plt+0xf798>
   21f58:	bl	1c370 <__assert_fail@plt+0x9b98>
   21f5c:	movw	r1, #18540	; 0x486c
   21f60:	movt	r1, #5
   21f64:	mov	r2, r0
   21f68:	mov	r0, #1
   21f6c:	bl	125bc <__printf_chk@plt>
   21f70:	ldrd	r0, [sp, #232]	; 0xe8
   21f74:	ldr	r6, [sp, #64]	; 0x40
   21f78:	ldrd	r2, [sp, #240]	; 0xf0
   21f7c:	strd	r0, [sp]
   21f80:	mov	r1, r7
   21f84:	ldr	r7, [sp, #256]	; 0x100
   21f88:	mov	r0, r4
   21f8c:	str	r6, [sp, #16]
   21f90:	str	r5, [sp, #20]
   21f94:	str	r7, [sp, #24]
   21f98:	ldr	ip, [sp, #48]	; 0x30
   21f9c:	ldr	r5, [sp, #264]	; 0x108
   21fa0:	ldr	r6, [sp, #80]	; 0x50
   21fa4:	ldr	r7, [sp, #68]	; 0x44
   21fa8:	strd	r2, [sp, #8]
   21fac:	mov	r2, sl
   21fb0:	mov	r3, fp
   21fb4:	str	ip, [sp, #28]
   21fb8:	str	r5, [sp, #32]
   21fbc:	str	r6, [sp, #36]	; 0x24
   21fc0:	str	r7, [sp, #40]	; 0x28
   21fc4:	bl	21b34 <__assert_fail@plt+0xf35c>
   21fc8:	b	21e2c <__assert_fail@plt+0xf654>
   21fcc:	cmp	r9, #11
   21fd0:	bcs	227e4 <__assert_fail@plt+0x1000c>
   21fd4:	cmp	r9, #5
   21fd8:	beq	22600 <__assert_fail@plt+0xfe28>
   21fdc:	cmp	r9, #6
   21fe0:	beq	22670 <__assert_fail@plt+0xfe98>
   21fe4:	cmp	r9, #1
   21fe8:	bne	220dc <__assert_fail@plt+0xf904>
   21fec:	ldr	r0, [sp, #240]	; 0xf0
   21ff0:	cmp	r0, #8
   21ff4:	mov	r1, r0
   21ff8:	bhi	235d4 <__assert_fail@plt+0x10dfc>
   21ffc:	add	r3, sl, r1
   22000:	cmp	fp, r3
   22004:	bhi	22014 <__assert_fail@plt+0xf83c>
   22008:	cmp	sl, fp
   2200c:	bcs	22020 <__assert_fail@plt+0xf848>
   22010:	rsb	r1, sl, fp
   22014:	sub	r3, r1, #1
   22018:	cmp	r3, #7
   2201c:	bls	235fc <__assert_fail@plt+0x10e24>
   22020:	mov	r2, #0
   22024:	mov	r3, #0
   22028:	strd	r2, [sp, #104]	; 0x68
   2202c:	ldr	r5, [sp, #240]	; 0xf0
   22030:	add	r5, sl, r5
   22034:	str	r5, [sp, #52]	; 0x34
   22038:	ldr	r7, [sp, #264]	; 0x108
   2203c:	cmp	r7, #0
   22040:	bne	21eac <__assert_fail@plt+0xf6d4>
   22044:	ldrd	r2, [sp, #104]	; 0x68
   22048:	movw	r0, #41908	; 0xa3b4
   2204c:	str	r7, [sp]
   22050:	movt	r0, #5
   22054:	bl	1acc4 <__assert_fail@plt+0x84ec>
   22058:	movw	r1, #22784	; 0x5900
   2205c:	movt	r1, #5
   22060:	mov	r2, r0
   22064:	mov	r0, #1
   22068:	bl	125bc <__printf_chk@plt>
   2206c:	movw	r3, #3404	; 0xd4c
   22070:	movt	r3, #7
   22074:	b	21d0c <__assert_fail@plt+0xf534>
   22078:	mov	r2, #1
   2207c:	mov	r3, #0
   22080:	str	sl, [sp, #52]	; 0x34
   22084:	strd	r2, [sp, #104]	; 0x68
   22088:	ldr	ip, [sp, #264]	; 0x108
   2208c:	cmp	ip, #0
   22090:	bne	21eac <__assert_fail@plt+0xf6d4>
   22094:	ldrd	r2, [sp, #104]	; 0x68
   22098:	movw	r0, #11836	; 0x2e3c
   2209c:	str	ip, [sp]
   220a0:	movt	r0, #5
   220a4:	mov	r7, ip
   220a8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   220ac:	movw	r1, #18540	; 0x486c
   220b0:	movt	r1, #5
   220b4:	mov	r2, r0
   220b8:	mov	r0, #1
   220bc:	bl	125bc <__printf_chk@plt>
   220c0:	movw	r3, #3404	; 0xd4c
   220c4:	movt	r3, #7
   220c8:	b	21d0c <__assert_fail@plt+0xf534>
   220cc:	sub	r3, r9, #7936	; 0x1f00
   220d0:	sub	r3, r3, #32
   220d4:	cmp	r3, #1
   220d8:	bls	227fc <__assert_fail@plt+0x10024>
   220dc:	str	sl, [sp, #52]	; 0x34
   220e0:	cmp	r9, #16
   220e4:	beq	21ea0 <__assert_fail@plt+0xf6c8>
   220e8:	bhi	221b8 <__assert_fail@plt+0xf9e0>
   220ec:	cmp	r9, #8
   220f0:	beq	229e8 <__assert_fail@plt+0x10210>
   220f4:	bhi	224dc <__assert_fail@plt+0xfd04>
   220f8:	cmp	r9, #4
   220fc:	beq	22a1c <__assert_fail@plt+0x10244>
   22100:	bhi	22b28 <__assert_fail@plt+0x10350>
   22104:	cmp	r9, #1
   22108:	beq	22038 <__assert_fail@plt+0xf860>
   2210c:	cmp	r9, #3
   22110:	bne	2293c <__assert_fail@plt+0x10164>
   22114:	ldr	r6, [sp, #52]	; 0x34
   22118:	add	r7, r6, #2
   2211c:	cmp	fp, r7
   22120:	bhi	2343c <__assert_fail@plt+0x10c64>
   22124:	cmp	r6, fp
   22128:	bcs	2213c <__assert_fail@plt+0xf964>
   2212c:	rsb	r1, r6, fp
   22130:	sub	r3, r1, #1
   22134:	cmp	r3, #7
   22138:	bls	2416c <__assert_fail@plt+0x11994>
   2213c:	mov	r2, #0
   22140:	mov	r3, #0
   22144:	strd	r2, [sp, #104]	; 0x68
   22148:	mov	r2, #5
   2214c:	movw	r1, #22792	; 0x5908
   22150:	mov	r0, #0
   22154:	movt	r1, #5
   22158:	bl	12298 <dcgettext@plt>
   2215c:	mov	r7, fp
   22160:	bl	49bf8 <warn@@Base>
   22164:	mov	r2, #0
   22168:	mov	r3, r2
   2216c:	mov	r0, #0
   22170:	mov	r1, #0
   22174:	strd	r0, [sp, #104]	; 0x68
   22178:	ldr	ip, [sp, #264]	; 0x108
   2217c:	cmp	ip, #0
   22180:	beq	2256c <__assert_fail@plt+0xfd94>
   22184:	add	r2, r7, r2
   22188:	str	r2, [sp, #52]	; 0x34
   2218c:	b	21eb0 <__assert_fail@plt+0xf6d8>
   22190:	mov	r0, sl
   22194:	add	r1, sp, #100	; 0x64
   22198:	mov	r2, #0
   2219c:	mov	r3, fp
   221a0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   221a4:	ldr	ip, [sp, #100]	; 0x64
   221a8:	add	ip, sl, ip
   221ac:	str	ip, [sp, #52]	; 0x34
   221b0:	strd	r0, [sp, #104]	; 0x68
   221b4:	b	220e0 <__assert_fail@plt+0xf908>
   221b8:	cmp	r9, #24
   221bc:	beq	2295c <__assert_fail@plt+0x10184>
   221c0:	bls	224ac <__assert_fail@plt+0xfcd4>
   221c4:	movw	r3, #7937	; 0x1f01
   221c8:	cmp	r9, r3
   221cc:	beq	21c10 <__assert_fail@plt+0xf438>
   221d0:	bls	2322c <__assert_fail@plt+0x10a54>
   221d4:	movw	r3, #7968	; 0x1f20
   221d8:	cmp	r9, r3
   221dc:	beq	22a90 <__assert_fail@plt+0x102b8>
   221e0:	add	r3, r3, #1
   221e4:	cmp	r9, r3
   221e8:	bne	22930 <__assert_fail@plt+0x10158>
   221ec:	ldr	r5, [sp, #264]	; 0x108
   221f0:	cmp	r5, #0
   221f4:	bne	21eac <__assert_fail@plt+0xf6d4>
   221f8:	mov	r0, r5
   221fc:	mov	r2, #5
   22200:	movw	r1, #23152	; 0x5a70
   22204:	movt	r1, #5
   22208:	bl	12298 <dcgettext@plt>
   2220c:	ldr	r6, [sp, #264]	; 0x108
   22210:	ldrd	r2, [sp, #104]	; 0x68
   22214:	str	r6, [sp]
   22218:	mov	r7, r6
   2221c:	mov	r5, r0
   22220:	movw	r0, #41908	; 0xa3b4
   22224:	movt	r0, #5
   22228:	bl	1acc4 <__assert_fail@plt+0x84ec>
   2222c:	mov	r1, r5
   22230:	mov	r2, r0
   22234:	mov	r0, #1
   22238:	bl	125bc <__printf_chk@plt>
   2223c:	movw	r3, #3404	; 0xd4c
   22240:	movt	r3, #7
   22244:	b	21d0c <__assert_fail@plt+0xf534>
   22248:	cmp	r4, #74	; 0x4a
   2224c:	beq	22280 <__assert_fail@plt+0xfaa8>
   22250:	bhi	2284c <__assert_fail@plt+0x10074>
   22254:	cmp	r4, #66	; 0x42
   22258:	beq	22ca4 <__assert_fail@plt+0x104cc>
   2225c:	bhi	23838 <__assert_fail@plt+0x11060>
   22260:	cmp	r4, #62	; 0x3e
   22264:	beq	22d38 <__assert_fail@plt+0x10560>
   22268:	cmp	r4, #64	; 0x40
   2226c:	movweq	r3, #1240	; 0x4d8
   22270:	movteq	r3, #7
   22274:	moveq	r2, #1
   22278:	streq	r2, [r3, #1572]	; 0x624
   2227c:	bne	21f0c <__assert_fail@plt+0xf734>
   22280:	ldr	r0, [sp, #256]	; 0x100
   22284:	cmp	r0, #3
   22288:	bgt	22298 <__assert_fail@plt+0xfac0>
   2228c:	sub	r3, r9, #6
   22290:	cmp	r3, #1
   22294:	bls	232cc <__assert_fail@plt+0x10af4>
   22298:	cmp	r9, #23
   2229c:	beq	232cc <__assert_fail@plt+0x10af4>
   222a0:	cmp	r7, #0
   222a4:	beq	21f0c <__assert_fail@plt+0xf734>
   222a8:	movw	r1, #24692	; 0x6074
   222ac:	mov	r0, #1
   222b0:	movt	r1, #5
   222b4:	bl	125bc <__printf_chk@plt>
   222b8:	ldrd	r2, [sp, #232]	; 0xe8
   222bc:	ldrd	r4, [sp, #104]	; 0x68
   222c0:	mov	r0, r7
   222c4:	ldr	r6, [sp, #80]	; 0x50
   222c8:	strd	r2, [sp, #8]
   222cc:	strd	r4, [sp]
   222d0:	ldr	r2, [sp, #64]	; 0x40
   222d4:	ldr	r1, [sp, #240]	; 0xf0
   222d8:	ldr	r3, [sp, #256]	; 0x100
   222dc:	str	r6, [sp, #16]
   222e0:	bl	1cccc <__assert_fail@plt+0xa4f4>
   222e4:	mov	r4, r0
   222e8:	mov	r0, #41	; 0x29
   222ec:	bl	1258c <putchar@plt>
   222f0:	cmp	r4, #0
   222f4:	beq	21f0c <__assert_fail@plt+0xf734>
   222f8:	movw	r3, #1240	; 0x4d8
   222fc:	movt	r3, #7
   22300:	ldr	r0, [r3, #1572]	; 0x624
   22304:	cmp	r0, #0
   22308:	bne	21f0c <__assert_fail@plt+0xf734>
   2230c:	movw	r1, #24696	; 0x6078
   22310:	movt	r1, #5
   22314:	mov	r2, #5
   22318:	bl	12298 <dcgettext@plt>
   2231c:	mov	r1, r0
   22320:	mov	r0, #1
   22324:	bl	125bc <__printf_chk@plt>
   22328:	ldr	r0, [sp, #52]	; 0x34
   2232c:	b	21e2c <__assert_fail@plt+0xf654>
   22330:	cmp	r4, #42	; 0x2a
   22334:	beq	22280 <__assert_fail@plt+0xfaa8>
   22338:	bls	228a4 <__assert_fail@plt+0x100cc>
   2233c:	cmp	r4, #50	; 0x32
   22340:	beq	231e8 <__assert_fail@plt+0x10a10>
   22344:	cmp	r4, #54	; 0x36
   22348:	bne	23714 <__assert_fail@plt+0x10f3c>
   2234c:	mov	r0, #9
   22350:	bl	1258c <putchar@plt>
   22354:	ldrd	r2, [sp, #104]	; 0x68
   22358:	cmp	r3, #0
   2235c:	cmpeq	r2, #2
   22360:	beq	239e0 <__assert_fail@plt+0x11208>
   22364:	cmp	r3, #0
   22368:	cmpeq	r2, #3
   2236c:	beq	238dc <__assert_fail@plt+0x11104>
   22370:	cmp	r3, #0
   22374:	cmpeq	r2, #1
   22378:	beq	238c4 <__assert_fail@plt+0x110ec>
   2237c:	subs	r2, r2, #64	; 0x40
   22380:	sbc	r3, r3, #0
   22384:	cmp	r3, #0
   22388:	cmpeq	r2, #191	; 0xbf
   2238c:	mov	r2, #5
   22390:	movwls	r1, #24592	; 0x6010
   22394:	movwhi	r1, #24608	; 0x6020
   22398:	movls	r0, #0
   2239c:	movtls	r1, #5
   223a0:	movhi	r0, #0
   223a4:	movthi	r1, #5
   223a8:	b	22318 <__assert_fail@plt+0xfb40>
   223ac:	cmp	r4, #42	; 0x2a
   223b0:	beq	223f8 <__assert_fail@plt+0xfc20>
   223b4:	bhi	223d8 <__assert_fail@plt+0xfc00>
   223b8:	cmp	r4, #17
   223bc:	bne	2357c <__assert_fail@plt+0x10da4>
   223c0:	ldr	r3, [r5, #1576]	; 0x628
   223c4:	cmp	r3, #0
   223c8:	ldrdne	r2, [sp, #104]	; 0x68
   223cc:	ldrne	r6, [sp, #48]	; 0x30
   223d0:	strdne	r2, [r6, #24]
   223d4:	b	21f0c <__assert_fail@plt+0xf734>
   223d8:	cmp	r4, #64	; 0x40
   223dc:	moveq	r3, #1
   223e0:	streq	r3, [r5, #1572]	; 0x624
   223e4:	beq	223f8 <__assert_fail@plt+0xfc20>
   223e8:	cmp	r4, #70	; 0x46
   223ec:	beq	223f8 <__assert_fail@plt+0xfc20>
   223f0:	cmp	r4, #56	; 0x38
   223f4:	bne	21d2c <__assert_fail@plt+0xf554>
   223f8:	ldr	r0, [sp, #256]	; 0x100
   223fc:	cmp	r0, #3
   22400:	bgt	22410 <__assert_fail@plt+0xfc38>
   22404:	sub	r3, r9, #6
   22408:	cmp	r3, #1
   2240c:	bls	22418 <__assert_fail@plt+0xfc40>
   22410:	cmp	r9, #23
   22414:	bne	21d2c <__assert_fail@plt+0xf554>
   22418:	ldr	r6, [sp, #48]	; 0x30
   2241c:	ldr	r3, [r6, #60]	; 0x3c
   22420:	ldr	ip, [r6, #56]	; 0x38
   22424:	cmp	r3, #0
   22428:	cmpne	ip, r3
   2242c:	bcs	23870 <__assert_fail@plt+0x11098>
   22430:	ldr	r0, [r6, #52]	; 0x34
   22434:	str	r0, [sp, #84]	; 0x54
   22438:	ldr	r6, [sp, #68]	; 0x44
   2243c:	cmp	r6, #0
   22440:	beq	23c74 <__assert_fail@plt+0x1149c>
   22444:	ldr	r6, [sp, #68]	; 0x44
   22448:	ldrd	r0, [sp, #104]	; 0x68
   2244c:	ldrd	r2, [r6, #48]	; 0x30
   22450:	adds	r2, r2, r0
   22454:	str	r2, [sp, #88]	; 0x58
   22458:	adc	r3, r3, r1
   2245c:	strd	r2, [sp, #104]	; 0x68
   22460:	str	r3, [sp, #92]	; 0x5c
   22464:	ldr	r0, [sp, #48]	; 0x30
   22468:	lsl	r3, ip, #3
   2246c:	ldr	r2, [r5, #1572]	; 0x624
   22470:	mov	r1, #4
   22474:	ldr	r5, [sp, #88]	; 0x58
   22478:	ldr	r6, [r0, #48]	; 0x30
   2247c:	add	r0, r6, r3
   22480:	str	r5, [r6, r3]
   22484:	add	r1, r0, r1
   22488:	ldr	r5, [sp, #48]	; 0x30
   2248c:	ldr	r6, [sp, #92]	; 0x5c
   22490:	ldr	r0, [sp, #84]	; 0x54
   22494:	str	r6, [r1]
   22498:	str	r2, [r0, ip, lsl #2]
   2249c:	ldr	r3, [r5, #56]	; 0x38
   224a0:	add	r3, r3, #1
   224a4:	str	r3, [r5, #56]	; 0x38
   224a8:	b	21d2c <__assert_fail@plt+0xf554>
   224ac:	cmp	r9, #20
   224b0:	beq	22b34 <__assert_fail@plt+0x1035c>
   224b4:	bcc	22ad8 <__assert_fail@plt+0x10300>
   224b8:	cmp	r9, #22
   224bc:	bne	22ad4 <__assert_fail@plt+0x102fc>
   224c0:	ldr	r6, [sp, #264]	; 0x108
   224c4:	cmp	r6, #0
   224c8:	bne	21eac <__assert_fail@plt+0xf6d4>
   224cc:	movw	r3, #3404	; 0xd4c
   224d0:	movt	r3, #7
   224d4:	mov	r7, #0
   224d8:	b	21d0c <__assert_fail@plt+0xf534>
   224dc:	cmp	r9, #13
   224e0:	bhi	23258 <__assert_fail@plt+0x10a80>
   224e4:	cmp	r9, #11
   224e8:	bcs	22088 <__assert_fail@plt+0xf8b0>
   224ec:	cmp	r9, #9
   224f0:	beq	2295c <__assert_fail@plt+0x10184>
   224f4:	cmp	r9, #10
   224f8:	bne	2293c <__assert_fail@plt+0x10164>
   224fc:	ldr	ip, [sp, #52]	; 0x34
   22500:	add	r7, ip, #1
   22504:	cmp	fp, r7
   22508:	bhi	23340 <__assert_fail@plt+0x10b68>
   2250c:	cmp	ip, fp
   22510:	bcs	22524 <__assert_fail@plt+0xfd4c>
   22514:	rsb	r1, ip, fp
   22518:	sub	r3, r1, #1
   2251c:	cmp	r3, #7
   22520:	bls	24188 <__assert_fail@plt+0x119b0>
   22524:	mov	r2, #0
   22528:	mov	r3, #0
   2252c:	strd	r2, [sp, #104]	; 0x68
   22530:	mov	r2, #5
   22534:	movw	r1, #22792	; 0x5908
   22538:	mov	r0, #0
   2253c:	movt	r1, #5
   22540:	bl	12298 <dcgettext@plt>
   22544:	mov	r7, fp
   22548:	bl	49bf8 <warn@@Base>
   2254c:	mov	r2, #0
   22550:	mov	r3, r2
   22554:	mov	r0, #0
   22558:	mov	r1, #0
   2255c:	strd	r0, [sp, #104]	; 0x68
   22560:	ldr	r5, [sp, #264]	; 0x108
   22564:	cmp	r5, #0
   22568:	bne	22184 <__assert_fail@plt+0xf9ac>
   2256c:	str	fp, [sp]
   22570:	mov	r0, r7
   22574:	bl	1c0b4 <__assert_fail@plt+0x98dc>
   22578:	movw	r3, #3404	; 0xd4c
   2257c:	movt	r3, #7
   22580:	str	r0, [sp, #52]	; 0x34
   22584:	b	21d0c <__assert_fail@plt+0xf534>
   22588:	movw	r3, #8465	; 0x2111
   2258c:	cmp	r4, r3
   22590:	bcs	223f8 <__assert_fail@plt+0xfc20>
   22594:	cmp	r4, #77	; 0x4d
   22598:	beq	223f8 <__assert_fail@plt+0xfc20>
   2259c:	cmp	r4, #85	; 0x55
   225a0:	bne	2372c <__assert_fail@plt+0x10f54>
   225a4:	ldr	r0, [sp, #256]	; 0x100
   225a8:	cmp	r0, #3
   225ac:	bgt	225bc <__assert_fail@plt+0xfde4>
   225b0:	sub	r3, r9, #6
   225b4:	cmp	r3, #1
   225b8:	bls	225c4 <__assert_fail@plt+0xfdec>
   225bc:	cmp	r9, #23
   225c0:	bne	21f0c <__assert_fail@plt+0xf734>
   225c4:	ldr	r5, [sp, #48]	; 0x30
   225c8:	ldr	r3, [r5, #72]	; 0x48
   225cc:	ldr	r4, [r5, #68]	; 0x44
   225d0:	cmp	r3, #0
   225d4:	cmpne	r4, r3
   225d8:	bcs	23ce8 <__assert_fail@plt+0x11510>
   225dc:	ldr	r5, [r5, #64]	; 0x40
   225e0:	mov	r3, r4
   225e4:	ldrd	sl, [sp, #104]	; 0x68
   225e8:	lsl	r4, r4, #3
   225ec:	ldr	r7, [sp, #48]	; 0x30
   225f0:	add	r1, r3, #1
   225f4:	strd	sl, [r5, r4]
   225f8:	str	r1, [r7, #68]	; 0x44
   225fc:	b	21f0c <__assert_fail@plt+0xf734>
   22600:	add	r6, sl, #2
   22604:	str	r6, [sp, #52]	; 0x34
   22608:	cmp	fp, r6
   2260c:	bls	22630 <__assert_fail@plt+0xfe58>
   22610:	mov	r1, #2
   22614:	movw	r3, #3472	; 0xd90
   22618:	movt	r3, #7
   2261c:	mov	r0, sl
   22620:	ldr	r3, [r3]
   22624:	blx	r3
   22628:	strd	r0, [sp, #104]	; 0x68
   2262c:	b	220e0 <__assert_fail@plt+0xf908>
   22630:	cmp	sl, fp
   22634:	bcs	220e0 <__assert_fail@plt+0xf908>
   22638:	rsb	r1, sl, fp
   2263c:	sub	r3, r1, #1
   22640:	cmp	r3, #7
   22644:	bhi	220e0 <__assert_fail@plt+0xf908>
   22648:	b	22614 <__assert_fail@plt+0xfe3c>
   2264c:	mov	r0, sl
   22650:	add	r1, sp, #100	; 0x64
   22654:	mov	r2, #1
   22658:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2265c:	ldr	ip, [sp, #100]	; 0x64
   22660:	add	ip, sl, ip
   22664:	str	ip, [sp, #52]	; 0x34
   22668:	strd	r0, [sp, #104]	; 0x68
   2266c:	b	22088 <__assert_fail@plt+0xf8b0>
   22670:	add	r7, sl, #4
   22674:	str	r7, [sp, #52]	; 0x34
   22678:	cmp	fp, r7
   2267c:	bls	22630 <__assert_fail@plt+0xfe58>
   22680:	mov	r1, #4
   22684:	b	22614 <__assert_fail@plt+0xfe3c>
   22688:	mov	r0, sl
   2268c:	add	r1, sp, #100	; 0x64
   22690:	bl	1c634 <__assert_fail@plt+0x9e5c>
   22694:	ldr	ip, [sp, #100]	; 0x64
   22698:	add	ip, sl, ip
   2269c:	str	ip, [sp, #52]	; 0x34
   226a0:	strd	r0, [sp, #104]	; 0x68
   226a4:	ldr	ip, [sp, #264]	; 0x108
   226a8:	cmp	ip, #0
   226ac:	bne	21eac <__assert_fail@plt+0xf6d4>
   226b0:	ldr	r6, [sp, #80]	; 0x50
   226b4:	mov	r1, #46	; 0x2e
   226b8:	ldr	r0, [r6, #8]
   226bc:	bl	1267c <strrchr@plt>
   226c0:	cmp	r0, #0
   226c4:	beq	237b8 <__assert_fail@plt+0x10fe0>
   226c8:	movw	r1, #33792	; 0x8400
   226cc:	movt	r1, #5
   226d0:	bl	12178 <strcmp@plt>
   226d4:	cmp	r0, #0
   226d8:	bne	237b8 <__assert_fail@plt+0x10fe0>
   226dc:	mov	r2, #5
   226e0:	movw	r1, #24836	; 0x6104
   226e4:	movt	r1, #5
   226e8:	bl	12298 <dcgettext@plt>
   226ec:	ldr	ip, [sp, #264]	; 0x108
   226f0:	ldrd	r2, [sp, #104]	; 0x68
   226f4:	str	ip, [sp]
   226f8:	str	r0, [sp, #84]	; 0x54
   226fc:	movw	r0, #41908	; 0xa3b4
   22700:	movt	r0, #5
   22704:	bl	1acc4 <__assert_fail@plt+0x84ec>
   22708:	ldr	r3, [sp, #104]	; 0x68
   2270c:	ldr	r6, [sp, #64]	; 0x40
   22710:	movw	r1, #62864	; 0xf590
   22714:	ldr	r2, [sp, #108]	; 0x6c
   22718:	movt	r1, #6
   2271c:	mul	r2, r6, r2
   22720:	umull	r6, r7, r3, r6
   22724:	mla	r5, r5, r3, r2
   22728:	strd	r6, [sp, #72]	; 0x48
   2272c:	add	r5, r5, r7
   22730:	str	r5, [sp, #76]	; 0x4c
   22734:	str	r0, [sp, #88]	; 0x58
   22738:	ldr	r0, [r1, #2060]	; 0x80c
   2273c:	cmp	r0, #0
   22740:	beq	23f2c <__assert_fail@plt+0x11754>
   22744:	add	r5, r1, #1920	; 0x780
   22748:	add	r1, r1, #2048	; 0x800
   2274c:	mov	ip, #1
   22750:	ldr	r7, [sp, #68]	; 0x44
   22754:	cmp	r7, #0
   22758:	beq	22770 <__assert_fail@plt+0xff98>
   2275c:	ldrd	r2, [r7, #56]	; 0x38
   22760:	ldrd	r6, [sp, #72]	; 0x48
   22764:	adds	r6, r6, r2
   22768:	adc	r7, r7, r3
   2276c:	strd	r6, [sp, #72]	; 0x48
   22770:	ldrd	r2, [r1, #24]
   22774:	ldrd	r6, [sp, #72]	; 0x48
   22778:	cmp	r3, r7
   2277c:	cmpeq	r2, r6
   22780:	bcc	23d44 <__assert_fail@plt+0x1156c>
   22784:	ldr	r3, [r5, #12]
   22788:	cmp	r3, #0
   2278c:	beq	23d14 <__assert_fail@plt+0x1153c>
   22790:	ldr	r7, [sp, #72]	; 0x48
   22794:	movw	r3, #3472	; 0xd90
   22798:	movt	r3, #7
   2279c:	ldr	r1, [sp, #64]	; 0x40
   227a0:	add	r0, r0, r7
   227a4:	ldr	r3, [r3]
   227a8:	blx	r3
   227ac:	ldrd	r2, [r5, #16]
   227b0:	mov	r6, r0
   227b4:	mov	r7, r1
   227b8:	subs	r6, r6, r2
   227bc:	sbc	r7, r7, r3
   227c0:	ldrd	r2, [r5, #24]
   227c4:	cmp	r7, r3
   227c8:	cmpeq	r6, r2
   227cc:	bhi	23ec8 <__assert_fail@plt+0x116f0>
   227d0:	ldr	r3, [r5, #12]
   227d4:	add	r3, r3, r6
   227d8:	ldr	r1, [sp, #84]	; 0x54
   227dc:	ldr	r2, [sp, #88]	; 0x58
   227e0:	b	21cf8 <__assert_fail@plt+0xf520>
   227e4:	add	ip, sl, #1
   227e8:	str	ip, [sp, #52]	; 0x34
   227ec:	cmp	fp, ip
   227f0:	bls	22630 <__assert_fail@plt+0xfe58>
   227f4:	mov	r1, #1
   227f8:	b	22614 <__assert_fail@plt+0xfe3c>
   227fc:	ldr	r6, [sp, #64]	; 0x40
   22800:	cmp	r6, #8
   22804:	mov	r1, r6
   22808:	bhi	23590 <__assert_fail@plt+0x10db8>
   2280c:	add	r3, sl, r1
   22810:	cmp	fp, r3
   22814:	bhi	22824 <__assert_fail@plt+0x1004c>
   22818:	cmp	sl, fp
   2281c:	bcs	22830 <__assert_fail@plt+0x10058>
   22820:	rsb	r1, sl, fp
   22824:	sub	r3, r1, #1
   22828:	cmp	r3, #7
   2282c:	bls	235b8 <__assert_fail@plt+0x10de0>
   22830:	mov	r2, #0
   22834:	mov	r3, #0
   22838:	strd	r2, [sp, #104]	; 0x68
   2283c:	ldr	r7, [sp, #64]	; 0x40
   22840:	add	r7, sl, r7
   22844:	str	r7, [sp, #52]	; 0x34
   22848:	b	220e0 <__assert_fail@plt+0xf908>
   2284c:	cmp	r4, #81	; 0x51
   22850:	bhi	23abc <__assert_fail@plt+0x112e4>
   22854:	cmp	r4, #78	; 0x4e
   22858:	bcs	222a0 <__assert_fail@plt+0xfac8>
   2285c:	cmp	r4, #76	; 0x4c
   22860:	bne	23ab0 <__assert_fail@plt+0x112d8>
   22864:	mov	r0, #9
   22868:	bl	1258c <putchar@plt>
   2286c:	ldrd	r2, [sp, #104]	; 0x68
   22870:	cmp	r3, #0
   22874:	cmpeq	r2, #1
   22878:	beq	239c8 <__assert_fail@plt+0x111f0>
   2287c:	bcc	239b0 <__assert_fail@plt+0x111d8>
   22880:	cmp	r3, #0
   22884:	cmpeq	r2, #2
   22888:	bne	23924 <__assert_fail@plt+0x1114c>
   2288c:	movw	r1, #24436	; 0x5f74
   22890:	mov	r0, #1
   22894:	movt	r1, #5
   22898:	bl	125bc <__printf_chk@plt>
   2289c:	ldr	r0, [sp, #52]	; 0x34
   228a0:	b	21e2c <__assert_fail@plt+0xf654>
   228a4:	cmp	r4, #32
   228a8:	bne	23720 <__assert_fail@plt+0x10f48>
   228ac:	mov	r0, #9
   228b0:	bl	1258c <putchar@plt>
   228b4:	ldrd	r2, [sp, #104]	; 0x68
   228b8:	cmp	r3, #0
   228bc:	cmpeq	r2, #3
   228c0:	bhi	23b4c <__assert_fail@plt+0x11374>
   228c4:	cmp	r2, #3
   228c8:	ldrls	pc, [pc, r2, lsl #2]
   228cc:	b	23b4c <__assert_fail@plt+0x11374>
   228d0:	andeq	r2, r2, ip, lsl r9
   228d4:	andeq	r2, r2, r8, lsl #18
   228d8:	strdeq	r2, [r2], -r4
   228dc:	andeq	r2, r2, r0, ror #17
   228e0:	movw	r1, #23388	; 0x5b5c
   228e4:	mov	r0, #0
   228e8:	movt	r1, #5
   228ec:	mov	r2, #5
   228f0:	b	22318 <__assert_fail@plt+0xfb40>
   228f4:	movw	r1, #23352	; 0x5b38
   228f8:	mov	r0, #0
   228fc:	movt	r1, #5
   22900:	mov	r2, #5
   22904:	b	22318 <__assert_fail@plt+0xfb40>
   22908:	movw	r1, #23340	; 0x5b2c
   2290c:	mov	r0, #0
   22910:	movt	r1, #5
   22914:	mov	r2, #5
   22918:	b	22318 <__assert_fail@plt+0xfb40>
   2291c:	movw	r1, #23324	; 0x5b1c
   22920:	mov	r0, #0
   22924:	movt	r1, #5
   22928:	mov	r2, #5
   2292c:	b	22318 <__assert_fail@plt+0xfb40>
   22930:	movw	r3, #7938	; 0x1f02
   22934:	cmp	r9, r3
   22938:	beq	226a4 <__assert_fail@plt+0xfecc>
   2293c:	mov	r2, #5
   22940:	movw	r1, #23300	; 0x5b04
   22944:	mov	r0, #0
   22948:	movt	r1, #5
   2294c:	bl	12298 <dcgettext@plt>
   22950:	mov	r1, r9
   22954:	bl	49bf8 <warn@@Base>
   22958:	b	224c0 <__assert_fail@plt+0xfce8>
   2295c:	mov	r3, fp
   22960:	ldr	r0, [sp, #52]	; 0x34
   22964:	add	r1, sp, #100	; 0x64
   22968:	mov	r2, #0
   2296c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   22970:	ldr	r3, [sp, #100]	; 0x64
   22974:	ldr	r5, [sp, #52]	; 0x34
   22978:	add	r7, r5, r3
   2297c:	cmp	fp, r7
   22980:	str	r1, [sp, #108]	; 0x6c
   22984:	str	r0, [sp, #104]	; 0x68
   22988:	bls	2376c <__assert_fail@plt+0x10f94>
   2298c:	add	r3, r7, r0
   22990:	cmp	fp, r3
   22994:	bcc	229a0 <__assert_fail@plt+0x101c8>
   22998:	cmp	r7, r3
   2299c:	bls	229d0 <__assert_fail@plt+0x101f8>
   229a0:	mov	r2, #5
   229a4:	movw	r1, #22816	; 0x5920
   229a8:	mov	r0, #0
   229ac:	movt	r1, #5
   229b0:	bl	12298 <dcgettext@plt>
   229b4:	ldr	r1, [sp, #104]	; 0x68
   229b8:	bl	49bf8 <warn@@Base>
   229bc:	rsb	r0, r7, fp
   229c0:	asr	r3, r0, #31
   229c4:	mov	r2, r0
   229c8:	strd	r2, [sp, #104]	; 0x68
   229cc:	mov	r1, r3
   229d0:	ldr	r6, [sp, #264]	; 0x108
   229d4:	cmp	r6, #0
   229d8:	beq	23738 <__assert_fail@plt+0x10f60>
   229dc:	add	r0, r7, r0
   229e0:	str	r0, [sp, #52]	; 0x34
   229e4:	b	21eb0 <__assert_fail@plt+0xf6d8>
   229e8:	ldr	ip, [sp, #264]	; 0x108
   229ec:	cmp	ip, #0
   229f0:	beq	23748 <__assert_fail@plt+0x10f70>
   229f4:	ldr	r6, [sp, #52]	; 0x34
   229f8:	rsb	r5, r6, fp
   229fc:	ldr	r0, [sp, #52]	; 0x34
   22a00:	mov	r1, r5
   22a04:	bl	12604 <strnlen@plt>
   22a08:	ldr	ip, [sp, #52]	; 0x34
   22a0c:	add	r0, r0, #1
   22a10:	add	ip, ip, r0
   22a14:	str	ip, [sp, #52]	; 0x34
   22a18:	b	224c0 <__assert_fail@plt+0xfce8>
   22a1c:	ldr	r5, [sp, #52]	; 0x34
   22a20:	add	r7, r5, #4
   22a24:	cmp	fp, r7
   22a28:	bhi	234ac <__assert_fail@plt+0x10cd4>
   22a2c:	cmp	r5, fp
   22a30:	bcs	22a44 <__assert_fail@plt+0x1026c>
   22a34:	rsb	r1, r5, fp
   22a38:	sub	r3, r1, #1
   22a3c:	cmp	r3, #7
   22a40:	bls	24150 <__assert_fail@plt+0x11978>
   22a44:	mov	r2, #0
   22a48:	mov	r3, #0
   22a4c:	strd	r2, [sp, #104]	; 0x68
   22a50:	mov	r2, #5
   22a54:	movw	r1, #22792	; 0x5908
   22a58:	mov	r0, #0
   22a5c:	movt	r1, #5
   22a60:	bl	12298 <dcgettext@plt>
   22a64:	mov	r7, fp
   22a68:	bl	49bf8 <warn@@Base>
   22a6c:	mov	r2, #0
   22a70:	mov	r3, r2
   22a74:	mov	r0, #0
   22a78:	mov	r1, #0
   22a7c:	strd	r0, [sp, #104]	; 0x68
   22a80:	ldr	r6, [sp, #264]	; 0x108
   22a84:	cmp	r6, #0
   22a88:	bne	22184 <__assert_fail@plt+0xf9ac>
   22a8c:	b	2256c <__assert_fail@plt+0xfd94>
   22a90:	ldr	r5, [sp, #264]	; 0x108
   22a94:	cmp	r5, #0
   22a98:	bne	21eac <__assert_fail@plt+0xf6d4>
   22a9c:	ldrd	r2, [sp, #104]	; 0x68
   22aa0:	movw	r0, #41908	; 0xa3b4
   22aa4:	str	r5, [sp]
   22aa8:	movt	r0, #5
   22aac:	bl	1acc4 <__assert_fail@plt+0x84ec>
   22ab0:	movw	r1, #22772	; 0x58f4
   22ab4:	movt	r1, #5
   22ab8:	mov	r7, r5
   22abc:	mov	r2, r0
   22ac0:	mov	r0, #1
   22ac4:	bl	125bc <__printf_chk@plt>
   22ac8:	movw	r3, #3404	; 0xd4c
   22acc:	movt	r3, #7
   22ad0:	b	21d0c <__assert_fail@plt+0xf534>
   22ad4:	bhi	22038 <__assert_fail@plt+0xf860>
   22ad8:	ldr	r6, [sp, #264]	; 0x108
   22adc:	cmp	r6, #0
   22ae0:	bne	21eac <__assert_fail@plt+0xf6d4>
   22ae4:	ldrd	r2, [sp, #104]	; 0x68
   22ae8:	movw	r0, #41908	; 0xa3b4
   22aec:	str	r6, [sp]
   22af0:	movt	r0, #5
   22af4:	ldrd	r6, [sp, #232]	; 0xe8
   22af8:	adds	r2, r2, r6
   22afc:	adc	r3, r3, r7
   22b00:	ldr	r7, [sp, #264]	; 0x108
   22b04:	bl	1acc4 <__assert_fail@plt+0x84ec>
   22b08:	movw	r1, #18660	; 0x48e4
   22b0c:	movt	r1, #5
   22b10:	mov	r2, r0
   22b14:	mov	r0, #1
   22b18:	bl	125bc <__printf_chk@plt>
   22b1c:	movw	r3, #3404	; 0xd4c
   22b20:	movt	r3, #7
   22b24:	b	21d0c <__assert_fail@plt+0xf534>
   22b28:	cmp	r9, #6
   22b2c:	beq	22038 <__assert_fail@plt+0xf860>
   22b30:	bls	22088 <__assert_fail@plt+0xf8b0>
   22b34:	ldr	r5, [sp, #264]	; 0x108
   22b38:	cmp	r5, #0
   22b3c:	beq	233b0 <__assert_fail@plt+0x10bd8>
   22b40:	ldr	r6, [sp, #52]	; 0x34
   22b44:	add	r5, r6, #8
   22b48:	movw	r3, #1240	; 0x4d8
   22b4c:	movt	r3, #7
   22b50:	ldr	r3, [r3, #1568]	; 0x620
   22b54:	cmp	r3, #0
   22b58:	strne	r5, [sp, #52]	; 0x34
   22b5c:	bne	224c0 <__assert_fail@plt+0xfce8>
   22b60:	cmp	r5, fp
   22b64:	bcc	2384c <__assert_fail@plt+0x11074>
   22b68:	ldr	r7, [sp, #52]	; 0x34
   22b6c:	cmp	r7, fp
   22b70:	bcs	22b84 <__assert_fail@plt+0x103ac>
   22b74:	rsb	r1, r7, fp
   22b78:	sub	r3, r1, #1
   22b7c:	cmp	r3, #7
   22b80:	bls	23850 <__assert_fail@plt+0x11078>
   22b84:	mov	r2, #0
   22b88:	mov	r3, #0
   22b8c:	str	r5, [sp, #52]	; 0x34
   22b90:	strd	r2, [sp, #104]	; 0x68
   22b94:	b	224c0 <__assert_fail@plt+0xfce8>
   22b98:	cmp	r4, #2
   22b9c:	beq	22280 <__assert_fail@plt+0xfaa8>
   22ba0:	cmp	r4, #9
   22ba4:	bne	21f0c <__assert_fail@plt+0xf734>
   22ba8:	mov	r0, r4
   22bac:	bl	1258c <putchar@plt>
   22bb0:	ldrd	r2, [sp, #104]	; 0x68
   22bb4:	cmp	r3, #0
   22bb8:	cmpeq	r2, #1
   22bbc:	beq	2390c <__assert_fail@plt+0x11134>
   22bc0:	bcc	238f4 <__assert_fail@plt+0x1111c>
   22bc4:	mvn	r0, #0
   22bc8:	mvn	r1, #0
   22bcc:	cmp	r3, r1
   22bd0:	cmpeq	r2, r0
   22bd4:	bne	21f0c <__assert_fail@plt+0xf734>
   22bd8:	movw	r1, #24632	; 0x6038
   22bdc:	mov	r0, #0
   22be0:	movt	r1, #5
   22be4:	mov	r2, #5
   22be8:	b	22318 <__assert_fail@plt+0xfb40>
   22bec:	ldrd	r2, [sp, #104]	; 0x68
   22bf0:	ldr	ip, [sp, #48]	; 0x30
   22bf4:	strd	r2, [ip, #40]	; 0x28
   22bf8:	b	21f0c <__assert_fail@plt+0xf734>
   22bfc:	mov	r0, #9
   22c00:	bl	1258c <putchar@plt>
   22c04:	ldrd	r2, [sp, #104]	; 0x68
   22c08:	cmp	r3, #0
   22c0c:	cmpeq	r2, #14
   22c10:	beq	2403c <__assert_fail@plt+0x11864>
   22c14:	bhi	23664 <__assert_fail@plt+0x10e8c>
   22c18:	cmp	r3, #0
   22c1c:	cmpeq	r2, #7
   22c20:	beq	23fc4 <__assert_fail@plt+0x117ec>
   22c24:	bhi	23b14 <__assert_fail@plt+0x1133c>
   22c28:	cmp	r3, #0
   22c2c:	cmpeq	r2, #3
   22c30:	beq	2409c <__assert_fail@plt+0x118c4>
   22c34:	bls	23e68 <__assert_fail@plt+0x11690>
   22c38:	cmp	r3, #0
   22c3c:	cmpeq	r2, #5
   22c40:	beq	24084 <__assert_fail@plt+0x118ac>
   22c44:	bhi	2406c <__assert_fail@plt+0x11894>
   22c48:	movw	r1, #23500	; 0x5bcc
   22c4c:	mov	r0, #1
   22c50:	movt	r1, #5
   22c54:	bl	125bc <__printf_chk@plt>
   22c58:	ldr	r0, [sp, #52]	; 0x34
   22c5c:	b	21e2c <__assert_fail@plt+0xf654>
   22c60:	mov	r0, #9
   22c64:	bl	1258c <putchar@plt>
   22c68:	ldrd	r2, [sp, #104]	; 0x68
   22c6c:	cmp	r3, #0
   22c70:	cmpeq	r2, #2
   22c74:	beq	23980 <__assert_fail@plt+0x111a8>
   22c78:	cmp	r3, #0
   22c7c:	cmpeq	r2, #3
   22c80:	beq	23968 <__assert_fail@plt+0x11190>
   22c84:	cmp	r3, #0
   22c88:	cmpeq	r2, #1
   22c8c:	beq	23998 <__assert_fail@plt+0x111c0>
   22c90:	movw	r1, #24392	; 0x5f48
   22c94:	mov	r0, #0
   22c98:	movt	r1, #5
   22c9c:	mov	r2, #5
   22ca0:	b	22318 <__assert_fail@plt+0xfb40>
   22ca4:	mov	r0, #9
   22ca8:	bl	1258c <putchar@plt>
   22cac:	ldrd	r2, [sp, #104]	; 0x68
   22cb0:	cmp	r3, #0
   22cb4:	cmpeq	r2, #3
   22cb8:	bhi	23b5c <__assert_fail@plt+0x11384>
   22cbc:	cmp	r2, #3
   22cc0:	ldrls	pc, [pc, r2, lsl #2]
   22cc4:	b	23b5c <__assert_fail@plt+0x11384>
   22cc8:	andeq	r2, r2, r0, lsr #26
   22ccc:	andeq	r2, r2, r8, lsl #26
   22cd0:	strdeq	r2, [r2], -r0
   22cd4:	ldrdeq	r2, [r2], -r8
   22cd8:	movw	r1, #24520	; 0x5fc8
   22cdc:	mov	r0, #1
   22ce0:	movt	r1, #5
   22ce4:	bl	125bc <__printf_chk@plt>
   22ce8:	ldr	r0, [sp, #52]	; 0x34
   22cec:	b	21e2c <__assert_fail@plt+0xf654>
   22cf0:	movw	r1, #24508	; 0x5fbc
   22cf4:	mov	r0, #1
   22cf8:	movt	r1, #5
   22cfc:	bl	125bc <__printf_chk@plt>
   22d00:	ldr	r0, [sp, #52]	; 0x34
   22d04:	b	21e2c <__assert_fail@plt+0xf654>
   22d08:	movw	r1, #24496	; 0x5fb0
   22d0c:	mov	r0, #1
   22d10:	movt	r1, #5
   22d14:	bl	125bc <__printf_chk@plt>
   22d18:	ldr	r0, [sp, #52]	; 0x34
   22d1c:	b	21e2c <__assert_fail@plt+0xf654>
   22d20:	movw	r1, #24476	; 0x5f9c
   22d24:	mov	r0, #1
   22d28:	movt	r1, #5
   22d2c:	bl	125bc <__printf_chk@plt>
   22d30:	ldr	r0, [sp, #52]	; 0x34
   22d34:	b	21e2c <__assert_fail@plt+0xf654>
   22d38:	mov	r0, #9
   22d3c:	bl	1258c <putchar@plt>
   22d40:	ldrd	r2, [sp, #104]	; 0x68
   22d44:	cmp	r3, #0
   22d48:	cmpeq	r2, #134	; 0x86
   22d4c:	bhi	231b8 <__assert_fail@plt+0x109e0>
   22d50:	cmp	r2, #134	; 0x86
   22d54:	ldrls	pc, [pc, r2, lsl #2]
   22d58:	b	231b8 <__assert_fail@plt+0x109e0>
   22d5c:	andeq	r3, r2, r0, lsr #3
   22d60:	andeq	r3, r2, r8, lsl #3
   22d64:	andeq	r3, r2, r0, ror r1
   22d68:	andeq	r3, r2, r8, asr r1
   22d6c:	andeq	r3, r2, r0, asr #2
   22d70:	andeq	r3, r2, r8, lsr #2
   22d74:	andeq	r3, r2, r0, lsl r1
   22d78:	strdeq	r3, [r2], -r8
   22d7c:	andeq	r3, r2, r0, ror #1
   22d80:	andeq	r3, r2, r8, asr #1
   22d84:	strheq	r3, [r2], -r0
   22d88:	muleq	r2, r8, r0
   22d8c:	andeq	r3, r2, r0, lsl #1
   22d90:	andeq	r3, r2, r8, rrx
   22d94:	andeq	r3, r2, r0, asr r0
   22d98:	andeq	r3, r2, r8, lsr r0
   22d9c:	andeq	r3, r2, r0, lsr #32
   22da0:			; <UNDEFINED> instruction: 0x000231b8
   22da4:			; <UNDEFINED> instruction: 0x000231b8
   22da8:			; <UNDEFINED> instruction: 0x000231b8
   22dac:			; <UNDEFINED> instruction: 0x000231b8
   22db0:			; <UNDEFINED> instruction: 0x000231b8
   22db4:			; <UNDEFINED> instruction: 0x000231b8
   22db8:			; <UNDEFINED> instruction: 0x000231b8
   22dbc:			; <UNDEFINED> instruction: 0x000231b8
   22dc0:			; <UNDEFINED> instruction: 0x000231b8
   22dc4:			; <UNDEFINED> instruction: 0x000231b8
   22dc8:			; <UNDEFINED> instruction: 0x000231b8
   22dcc:			; <UNDEFINED> instruction: 0x000231b8
   22dd0:			; <UNDEFINED> instruction: 0x000231b8
   22dd4:			; <UNDEFINED> instruction: 0x000231b8
   22dd8:			; <UNDEFINED> instruction: 0x000231b8
   22ddc:			; <UNDEFINED> instruction: 0x000231b8
   22de0:			; <UNDEFINED> instruction: 0x000231b8
   22de4:			; <UNDEFINED> instruction: 0x000231b8
   22de8:			; <UNDEFINED> instruction: 0x000231b8
   22dec:			; <UNDEFINED> instruction: 0x000231b8
   22df0:			; <UNDEFINED> instruction: 0x000231b8
   22df4:			; <UNDEFINED> instruction: 0x000231b8
   22df8:			; <UNDEFINED> instruction: 0x000231b8
   22dfc:			; <UNDEFINED> instruction: 0x000231b8
   22e00:			; <UNDEFINED> instruction: 0x000231b8
   22e04:			; <UNDEFINED> instruction: 0x000231b8
   22e08:			; <UNDEFINED> instruction: 0x000231b8
   22e0c:			; <UNDEFINED> instruction: 0x000231b8
   22e10:			; <UNDEFINED> instruction: 0x000231b8
   22e14:			; <UNDEFINED> instruction: 0x000231b8
   22e18:			; <UNDEFINED> instruction: 0x000231b8
   22e1c:			; <UNDEFINED> instruction: 0x000231b8
   22e20:			; <UNDEFINED> instruction: 0x000231b8
   22e24:			; <UNDEFINED> instruction: 0x000231b8
   22e28:			; <UNDEFINED> instruction: 0x000231b8
   22e2c:			; <UNDEFINED> instruction: 0x000231b8
   22e30:			; <UNDEFINED> instruction: 0x000231b8
   22e34:			; <UNDEFINED> instruction: 0x000231b8
   22e38:			; <UNDEFINED> instruction: 0x000231b8
   22e3c:			; <UNDEFINED> instruction: 0x000231b8
   22e40:			; <UNDEFINED> instruction: 0x000231b8
   22e44:			; <UNDEFINED> instruction: 0x000231b8
   22e48:			; <UNDEFINED> instruction: 0x000231b8
   22e4c:			; <UNDEFINED> instruction: 0x000231b8
   22e50:			; <UNDEFINED> instruction: 0x000231b8
   22e54:			; <UNDEFINED> instruction: 0x000231b8
   22e58:			; <UNDEFINED> instruction: 0x000231b8
   22e5c:			; <UNDEFINED> instruction: 0x000231b8
   22e60:			; <UNDEFINED> instruction: 0x000231b8
   22e64:			; <UNDEFINED> instruction: 0x000231b8
   22e68:			; <UNDEFINED> instruction: 0x000231b8
   22e6c:			; <UNDEFINED> instruction: 0x000231b8
   22e70:			; <UNDEFINED> instruction: 0x000231b8
   22e74:			; <UNDEFINED> instruction: 0x000231b8
   22e78:			; <UNDEFINED> instruction: 0x000231b8
   22e7c:			; <UNDEFINED> instruction: 0x000231b8
   22e80:			; <UNDEFINED> instruction: 0x000231b8
   22e84:			; <UNDEFINED> instruction: 0x000231b8
   22e88:			; <UNDEFINED> instruction: 0x000231b8
   22e8c:			; <UNDEFINED> instruction: 0x000231b8
   22e90:			; <UNDEFINED> instruction: 0x000231b8
   22e94:			; <UNDEFINED> instruction: 0x000231b8
   22e98:			; <UNDEFINED> instruction: 0x000231b8
   22e9c:			; <UNDEFINED> instruction: 0x000231b8
   22ea0:			; <UNDEFINED> instruction: 0x000231b8
   22ea4:			; <UNDEFINED> instruction: 0x000231b8
   22ea8:			; <UNDEFINED> instruction: 0x000231b8
   22eac:			; <UNDEFINED> instruction: 0x000231b8
   22eb0:			; <UNDEFINED> instruction: 0x000231b8
   22eb4:			; <UNDEFINED> instruction: 0x000231b8
   22eb8:			; <UNDEFINED> instruction: 0x000231b8
   22ebc:			; <UNDEFINED> instruction: 0x000231b8
   22ec0:			; <UNDEFINED> instruction: 0x000231b8
   22ec4:			; <UNDEFINED> instruction: 0x000231b8
   22ec8:			; <UNDEFINED> instruction: 0x000231b8
   22ecc:			; <UNDEFINED> instruction: 0x000231b8
   22ed0:			; <UNDEFINED> instruction: 0x000231b8
   22ed4:			; <UNDEFINED> instruction: 0x000231b8
   22ed8:			; <UNDEFINED> instruction: 0x000231b8
   22edc:			; <UNDEFINED> instruction: 0x000231b8
   22ee0:			; <UNDEFINED> instruction: 0x000231b8
   22ee4:			; <UNDEFINED> instruction: 0x000231b8
   22ee8:			; <UNDEFINED> instruction: 0x000231b8
   22eec:			; <UNDEFINED> instruction: 0x000231b8
   22ef0:			; <UNDEFINED> instruction: 0x000231b8
   22ef4:			; <UNDEFINED> instruction: 0x000231b8
   22ef8:			; <UNDEFINED> instruction: 0x000231b8
   22efc:			; <UNDEFINED> instruction: 0x000231b8
   22f00:			; <UNDEFINED> instruction: 0x000231b8
   22f04:			; <UNDEFINED> instruction: 0x000231b8
   22f08:			; <UNDEFINED> instruction: 0x000231b8
   22f0c:			; <UNDEFINED> instruction: 0x000231b8
   22f10:			; <UNDEFINED> instruction: 0x000231b8
   22f14:			; <UNDEFINED> instruction: 0x000231b8
   22f18:			; <UNDEFINED> instruction: 0x000231b8
   22f1c:			; <UNDEFINED> instruction: 0x000231b8
   22f20:			; <UNDEFINED> instruction: 0x000231b8
   22f24:			; <UNDEFINED> instruction: 0x000231b8
   22f28:			; <UNDEFINED> instruction: 0x000231b8
   22f2c:			; <UNDEFINED> instruction: 0x000231b8
   22f30:			; <UNDEFINED> instruction: 0x000231b8
   22f34:			; <UNDEFINED> instruction: 0x000231b8
   22f38:			; <UNDEFINED> instruction: 0x000231b8
   22f3c:			; <UNDEFINED> instruction: 0x000231b8
   22f40:			; <UNDEFINED> instruction: 0x000231b8
   22f44:			; <UNDEFINED> instruction: 0x000231b8
   22f48:			; <UNDEFINED> instruction: 0x000231b8
   22f4c:			; <UNDEFINED> instruction: 0x000231b8
   22f50:			; <UNDEFINED> instruction: 0x000231b8
   22f54:			; <UNDEFINED> instruction: 0x000231b8
   22f58:			; <UNDEFINED> instruction: 0x000231b8
   22f5c:	andeq	r3, r2, r8
   22f60:	strdeq	r2, [r2], -r0
   22f64:	ldrdeq	r2, [r2], -r8
   22f68:	andeq	r2, r2, r0, asr #31
   22f6c:	andeq	r2, r2, r8, lsr #31
   22f70:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   22f74:	andeq	r2, r2, r8, ror pc
   22f78:	movw	r1, #24220	; 0x5e9c
   22f7c:	mov	r0, #1
   22f80:	movt	r1, #5
   22f84:	bl	125bc <__printf_chk@plt>
   22f88:	ldr	r0, [sp, #52]	; 0x34
   22f8c:	b	21e2c <__assert_fail@plt+0xf654>
   22f90:	movw	r1, #24196	; 0x5e84
   22f94:	mov	r0, #1
   22f98:	movt	r1, #5
   22f9c:	bl	125bc <__printf_chk@plt>
   22fa0:	ldr	r0, [sp, #52]	; 0x34
   22fa4:	b	21e2c <__assert_fail@plt+0xf654>
   22fa8:	movw	r1, #24176	; 0x5e70
   22fac:	mov	r0, #1
   22fb0:	movt	r1, #5
   22fb4:	bl	125bc <__printf_chk@plt>
   22fb8:	ldr	r0, [sp, #52]	; 0x34
   22fbc:	b	21e2c <__assert_fail@plt+0xf654>
   22fc0:	movw	r1, #24152	; 0x5e58
   22fc4:	mov	r0, #1
   22fc8:	movt	r1, #5
   22fcc:	bl	125bc <__printf_chk@plt>
   22fd0:	ldr	r0, [sp, #52]	; 0x34
   22fd4:	b	21e2c <__assert_fail@plt+0xf654>
   22fd8:	movw	r1, #24136	; 0x5e48
   22fdc:	mov	r0, #1
   22fe0:	movt	r1, #5
   22fe4:	bl	125bc <__printf_chk@plt>
   22fe8:	ldr	r0, [sp, #52]	; 0x34
   22fec:	b	21e2c <__assert_fail@plt+0xf654>
   22ff0:	movw	r1, #24112	; 0x5e30
   22ff4:	mov	r0, #1
   22ff8:	movt	r1, #5
   22ffc:	bl	125bc <__printf_chk@plt>
   23000:	ldr	r0, [sp, #52]	; 0x34
   23004:	b	21e2c <__assert_fail@plt+0xf654>
   23008:	movw	r1, #24096	; 0x5e20
   2300c:	mov	r0, #1
   23010:	movt	r1, #5
   23014:	bl	125bc <__printf_chk@plt>
   23018:	ldr	r0, [sp, #52]	; 0x34
   2301c:	b	21e2c <__assert_fail@plt+0xf654>
   23020:	movw	r1, #24244	; 0x5eb4
   23024:	mov	r0, #1
   23028:	movt	r1, #5
   2302c:	bl	125bc <__printf_chk@plt>
   23030:	ldr	r0, [sp, #52]	; 0x34
   23034:	b	21e2c <__assert_fail@plt+0xf654>
   23038:	movw	r1, #23992	; 0x5db8
   2303c:	mov	r0, #1
   23040:	movt	r1, #5
   23044:	bl	125bc <__printf_chk@plt>
   23048:	ldr	r0, [sp, #52]	; 0x34
   2304c:	b	21e2c <__assert_fail@plt+0xf654>
   23050:	movw	r1, #24076	; 0x5e0c
   23054:	mov	r0, #1
   23058:	movt	r1, #5
   2305c:	bl	125bc <__printf_chk@plt>
   23060:	ldr	r0, [sp, #52]	; 0x34
   23064:	b	21e2c <__assert_fail@plt+0xf654>
   23068:	movw	r1, #24060	; 0x5dfc
   2306c:	mov	r0, #1
   23070:	movt	r1, #5
   23074:	bl	125bc <__printf_chk@plt>
   23078:	ldr	r0, [sp, #52]	; 0x34
   2307c:	b	21e2c <__assert_fail@plt+0xf654>
   23080:	movw	r1, #24048	; 0x5df0
   23084:	mov	r0, #1
   23088:	movt	r1, #5
   2308c:	bl	125bc <__printf_chk@plt>
   23090:	ldr	r0, [sp, #52]	; 0x34
   23094:	b	21e2c <__assert_fail@plt+0xf654>
   23098:	movw	r1, #24028	; 0x5ddc
   2309c:	mov	r0, #1
   230a0:	movt	r1, #5
   230a4:	bl	125bc <__printf_chk@plt>
   230a8:	ldr	r0, [sp, #52]	; 0x34
   230ac:	b	21e2c <__assert_fail@plt+0xf654>
   230b0:	movw	r1, #24008	; 0x5dc8
   230b4:	mov	r0, #1
   230b8:	movt	r1, #5
   230bc:	bl	125bc <__printf_chk@plt>
   230c0:	ldr	r0, [sp, #52]	; 0x34
   230c4:	b	21e2c <__assert_fail@plt+0xf654>
   230c8:	movw	r1, #23972	; 0x5da4
   230cc:	mov	r0, #1
   230d0:	movt	r1, #5
   230d4:	bl	125bc <__printf_chk@plt>
   230d8:	ldr	r0, [sp, #52]	; 0x34
   230dc:	b	21e2c <__assert_fail@plt+0xf654>
   230e0:	movw	r1, #23956	; 0x5d94
   230e4:	mov	r0, #1
   230e8:	movt	r1, #5
   230ec:	bl	125bc <__printf_chk@plt>
   230f0:	ldr	r0, [sp, #52]	; 0x34
   230f4:	b	21e2c <__assert_fail@plt+0xf654>
   230f8:	movw	r1, #23944	; 0x5d88
   230fc:	mov	r0, #1
   23100:	movt	r1, #5
   23104:	bl	125bc <__printf_chk@plt>
   23108:	ldr	r0, [sp, #52]	; 0x34
   2310c:	b	21e2c <__assert_fail@plt+0xf654>
   23110:	movw	r1, #23928	; 0x5d78
   23114:	mov	r0, #1
   23118:	movt	r1, #5
   2311c:	bl	125bc <__printf_chk@plt>
   23120:	ldr	r0, [sp, #52]	; 0x34
   23124:	b	21e2c <__assert_fail@plt+0xf654>
   23128:	movw	r1, #23916	; 0x5d6c
   2312c:	mov	r0, #1
   23130:	movt	r1, #5
   23134:	bl	125bc <__printf_chk@plt>
   23138:	ldr	r0, [sp, #52]	; 0x34
   2313c:	b	21e2c <__assert_fail@plt+0xf654>
   23140:	movw	r1, #23908	; 0x5d64
   23144:	mov	r0, #1
   23148:	movt	r1, #5
   2314c:	bl	125bc <__printf_chk@plt>
   23150:	ldr	r0, [sp, #52]	; 0x34
   23154:	b	21e2c <__assert_fail@plt+0xf654>
   23158:	movw	r1, #23892	; 0x5d54
   2315c:	mov	r0, #1
   23160:	movt	r1, #5
   23164:	bl	125bc <__printf_chk@plt>
   23168:	ldr	r0, [sp, #52]	; 0x34
   2316c:	b	21e2c <__assert_fail@plt+0xf654>
   23170:	movw	r1, #23880	; 0x5d48
   23174:	mov	r0, #1
   23178:	movt	r1, #5
   2317c:	bl	125bc <__printf_chk@plt>
   23180:	ldr	r0, [sp, #52]	; 0x34
   23184:	b	21e2c <__assert_fail@plt+0xf654>
   23188:	movw	r1, #23860	; 0x5d34
   2318c:	mov	r0, #1
   23190:	movt	r1, #5
   23194:	bl	125bc <__printf_chk@plt>
   23198:	ldr	r0, [sp, #52]	; 0x34
   2319c:	b	21e2c <__assert_fail@plt+0xf654>
   231a0:	movw	r1, #23852	; 0x5d2c
   231a4:	mov	r0, #1
   231a8:	movt	r1, #5
   231ac:	bl	125bc <__printf_chk@plt>
   231b0:	ldr	r0, [sp, #52]	; 0x34
   231b4:	b	21e2c <__assert_fail@plt+0xf654>
   231b8:	subs	r2, r2, #128	; 0x80
   231bc:	sbc	r3, r3, #0
   231c0:	cmp	r3, #0
   231c4:	cmpeq	r2, #127	; 0x7f
   231c8:	mov	r2, #5
   231cc:	movwls	r1, #24264	; 0x5ec8
   231d0:	movwhi	r1, #24284	; 0x5edc
   231d4:	movls	r0, #0
   231d8:	movtls	r1, #5
   231dc:	movhi	r0, #0
   231e0:	movthi	r1, #5
   231e4:	b	22318 <__assert_fail@plt+0xfb40>
   231e8:	mov	r0, #9
   231ec:	bl	1258c <putchar@plt>
   231f0:	ldrd	r2, [sp, #104]	; 0x68
   231f4:	cmp	r3, #0
   231f8:	cmpeq	r2, #2
   231fc:	beq	23950 <__assert_fail@plt+0x11178>
   23200:	cmp	r3, #0
   23204:	cmpeq	r2, #3
   23208:	beq	23938 <__assert_fail@plt+0x11160>
   2320c:	cmp	r3, #0
   23210:	cmpeq	r2, #1
   23214:	beq	23a98 <__assert_fail@plt+0x112c0>
   23218:	movw	r1, #24336	; 0x5f10
   2321c:	mov	r0, #0
   23220:	movt	r1, #5
   23224:	mov	r2, #5
   23228:	b	22318 <__assert_fail@plt+0xfb40>
   2322c:	cmp	r9, #25
   23230:	beq	22088 <__assert_fail@plt+0xf8b0>
   23234:	cmp	r9, #32
   23238:	bne	2293c <__assert_fail@plt+0x10164>
   2323c:	ldr	r7, [sp, #264]	; 0x108
   23240:	cmp	r7, #0
   23244:	beq	2351c <__assert_fail@plt+0x10d44>
   23248:	ldr	ip, [sp, #52]	; 0x34
   2324c:	add	ip, ip, #8
   23250:	str	ip, [sp, #52]	; 0x34
   23254:	b	224c0 <__assert_fail@plt+0xfce8>
   23258:	cmp	r9, #14
   2325c:	bne	23da4 <__assert_fail@plt+0x115cc>
   23260:	ldr	r7, [sp, #264]	; 0x108
   23264:	cmp	r7, #0
   23268:	bne	21eac <__assert_fail@plt+0xf6d4>
   2326c:	mov	r0, r7
   23270:	mov	r2, #5
   23274:	movw	r1, #22856	; 0x5948
   23278:	movt	r1, #5
   2327c:	bl	12298 <dcgettext@plt>
   23280:	ldrd	r2, [sp, #104]	; 0x68
   23284:	str	r7, [sp]
   23288:	ldr	r7, [sp, #264]	; 0x108
   2328c:	mov	r5, r0
   23290:	movw	r0, #41908	; 0xa3b4
   23294:	movt	r0, #5
   23298:	bl	1acc4 <__assert_fail@plt+0x84ec>
   2329c:	mov	r2, r0
   232a0:	ldrd	r0, [sp, #104]	; 0x68
   232a4:	str	r2, [sp, #60]	; 0x3c
   232a8:	bl	1c1e4 <__assert_fail@plt+0x9a0c>
   232ac:	mov	r1, r5
   232b0:	ldr	r2, [sp, #60]	; 0x3c
   232b4:	mov	r3, r0
   232b8:	mov	r0, #1
   232bc:	bl	125bc <__printf_chk@plt>
   232c0:	movw	r3, #3404	; 0xd4c
   232c4:	movt	r3, #7
   232c8:	b	21d0c <__assert_fail@plt+0xf534>
   232cc:	mov	r2, #5
   232d0:	movw	r1, #24672	; 0x6060
   232d4:	mov	r0, #0
   232d8:	movt	r1, #5
   232dc:	bl	12298 <dcgettext@plt>
   232e0:	mov	r1, r0
   232e4:	mov	r0, #1
   232e8:	bl	125bc <__printf_chk@plt>
   232ec:	b	222a0 <__assert_fail@plt+0xfac8>
   232f0:	ldr	r7, [sp, #64]	; 0x40
   232f4:	cmp	r7, #8
   232f8:	mov	r1, r7
   232fc:	bhi	23b70 <__assert_fail@plt+0x11398>
   23300:	add	r3, sl, r1
   23304:	cmp	fp, r3
   23308:	bhi	23318 <__assert_fail@plt+0x10b40>
   2330c:	cmp	sl, fp
   23310:	bcs	23324 <__assert_fail@plt+0x10b4c>
   23314:	rsb	r1, sl, fp
   23318:	sub	r3, r1, #1
   2331c:	cmp	r3, #7
   23320:	bls	23b98 <__assert_fail@plt+0x113c0>
   23324:	mov	r2, #0
   23328:	mov	r3, #0
   2332c:	strd	r2, [sp, #104]	; 0x68
   23330:	ldr	ip, [sp, #64]	; 0x40
   23334:	add	ip, sl, ip
   23338:	str	ip, [sp, #52]	; 0x34
   2333c:	b	21ea0 <__assert_fail@plt+0xf6c8>
   23340:	movw	r3, #3472	; 0xd90
   23344:	movt	r3, #7
   23348:	ldr	r0, [sp, #52]	; 0x34
   2334c:	mov	r1, #1
   23350:	ldr	r3, [r3]
   23354:	blx	r3
   23358:	add	r2, r7, r0
   2335c:	str	r1, [sp, #108]	; 0x6c
   23360:	cmp	fp, r2
   23364:	str	r0, [sp, #104]	; 0x68
   23368:	bcc	2337c <__assert_fail@plt+0x10ba4>
   2336c:	cmp	r7, r2
   23370:	movls	r2, r0
   23374:	movls	r3, r1
   23378:	bls	22560 <__assert_fail@plt+0xfd88>
   2337c:	mov	r2, #5
   23380:	movw	r1, #22816	; 0x5920
   23384:	mov	r0, #0
   23388:	movt	r1, #5
   2338c:	bl	12298 <dcgettext@plt>
   23390:	ldr	r1, [sp, #104]	; 0x68
   23394:	bl	49bf8 <warn@@Base>
   23398:	rsb	r2, r7, fp
   2339c:	asr	r1, r2, #31
   233a0:	mov	r0, r2
   233a4:	strd	r0, [sp, #104]	; 0x68
   233a8:	mov	r3, r1
   233ac:	b	22560 <__assert_fail@plt+0xfd88>
   233b0:	ldr	r7, [sp, #52]	; 0x34
   233b4:	add	r5, r7, #8
   233b8:	cmp	fp, r5
   233bc:	bcs	23bd8 <__assert_fail@plt+0x11400>
   233c0:	mov	r2, #0
   233c4:	str	r2, [sp, #112]	; 0x70
   233c8:	mov	r0, r2
   233cc:	mov	r1, r2
   233d0:	str	r2, [sp, #104]	; 0x68
   233d4:	strd	r0, [sp, #72]	; 0x48
   233d8:	str	r2, [sp, #116]	; 0x74
   233dc:	str	r2, [sp, #108]	; 0x6c
   233e0:	cmp	r9, #20
   233e4:	beq	23bf8 <__assert_fail@plt+0x11420>
   233e8:	ldrd	r2, [sp, #72]	; 0x48
   233ec:	add	lr, sp, #124	; 0x7c
   233f0:	str	lr, [sp]
   233f4:	bl	1c590 <__assert_fail@plt+0x9db8>
   233f8:	movw	r1, #22784	; 0x5900
   233fc:	movt	r1, #5
   23400:	mov	r2, r0
   23404:	mov	r0, #1
   23408:	bl	125bc <__printf_chk@plt>
   2340c:	movw	r3, #3404	; 0xd4c
   23410:	movt	r3, #7
   23414:	ldr	r2, [r3]
   23418:	cmp	r2, #0
   2341c:	bne	22b48 <__assert_fail@plt+0x10370>
   23420:	movw	r2, #3436	; 0xd6c
   23424:	movt	r2, #7
   23428:	ldr	r2, [r2]
   2342c:	cmp	r2, #0
   23430:	bne	22b48 <__assert_fail@plt+0x10370>
   23434:	str	r5, [sp, #52]	; 0x34
   23438:	b	224d4 <__assert_fail@plt+0xfcfc>
   2343c:	movw	r3, #3472	; 0xd90
   23440:	movt	r3, #7
   23444:	ldr	r0, [sp, #52]	; 0x34
   23448:	mov	r1, #2
   2344c:	ldr	r3, [r3]
   23450:	blx	r3
   23454:	add	r2, r7, r0
   23458:	str	r1, [sp, #108]	; 0x6c
   2345c:	cmp	fp, r2
   23460:	str	r0, [sp, #104]	; 0x68
   23464:	bcc	23478 <__assert_fail@plt+0x10ca0>
   23468:	cmp	r7, r2
   2346c:	movls	r2, r0
   23470:	movls	r3, r1
   23474:	bls	22178 <__assert_fail@plt+0xf9a0>
   23478:	mov	r2, #5
   2347c:	movw	r1, #22816	; 0x5920
   23480:	mov	r0, #0
   23484:	movt	r1, #5
   23488:	bl	12298 <dcgettext@plt>
   2348c:	ldr	r1, [sp, #104]	; 0x68
   23490:	bl	49bf8 <warn@@Base>
   23494:	rsb	r2, r7, fp
   23498:	asr	r1, r2, #31
   2349c:	mov	r0, r2
   234a0:	strd	r0, [sp, #104]	; 0x68
   234a4:	mov	r3, r1
   234a8:	b	22178 <__assert_fail@plt+0xf9a0>
   234ac:	movw	r3, #3472	; 0xd90
   234b0:	movt	r3, #7
   234b4:	ldr	r0, [sp, #52]	; 0x34
   234b8:	mov	r1, r9
   234bc:	ldr	r3, [r3]
   234c0:	blx	r3
   234c4:	add	r2, r7, r0
   234c8:	str	r1, [sp, #108]	; 0x6c
   234cc:	cmp	fp, r2
   234d0:	str	r0, [sp, #104]	; 0x68
   234d4:	bcc	234e8 <__assert_fail@plt+0x10d10>
   234d8:	cmp	r7, r2
   234dc:	movls	r2, r0
   234e0:	movls	r3, r1
   234e4:	bls	22a80 <__assert_fail@plt+0x102a8>
   234e8:	mov	r2, #5
   234ec:	movw	r1, #22816	; 0x5920
   234f0:	mov	r0, #0
   234f4:	movt	r1, #5
   234f8:	bl	12298 <dcgettext@plt>
   234fc:	ldr	r1, [sp, #104]	; 0x68
   23500:	bl	49bf8 <warn@@Base>
   23504:	rsb	r2, r7, fp
   23508:	asr	r1, r2, #31
   2350c:	mov	r0, r2
   23510:	strd	r0, [sp, #104]	; 0x68
   23514:	mov	r3, r1
   23518:	b	22a80 <__assert_fail@plt+0x102a8>
   2351c:	ldr	r6, [sp, #52]	; 0x34
   23520:	add	r5, r6, #8
   23524:	cmp	fp, r5
   23528:	bcs	23bb4 <__assert_fail@plt+0x113dc>
   2352c:	mov	r1, #0
   23530:	str	r1, [sp, #112]	; 0x70
   23534:	mov	r2, r1
   23538:	mov	r3, r1
   2353c:	mov	r0, r1
   23540:	str	r1, [sp, #104]	; 0x68
   23544:	str	r1, [sp, #116]	; 0x74
   23548:	str	r1, [sp, #108]	; 0x6c
   2354c:	add	ip, sp, #124	; 0x7c
   23550:	str	ip, [sp]
   23554:	bl	1c590 <__assert_fail@plt+0x9db8>
   23558:	movw	r1, #23192	; 0x5a98
   2355c:	movt	r1, #5
   23560:	str	r5, [sp, #52]	; 0x34
   23564:	mov	r2, r0
   23568:	mov	r0, #1
   2356c:	bl	125bc <__printf_chk@plt>
   23570:	movw	r3, #3404	; 0xd4c
   23574:	movt	r3, #7
   23578:	b	224d4 <__assert_fail@plt+0xfcfc>
   2357c:	cmp	r4, #25
   23580:	beq	223f8 <__assert_fail@plt+0xfc20>
   23584:	cmp	r4, #2
   23588:	bne	21d2c <__assert_fail@plt+0xf554>
   2358c:	b	223f8 <__assert_fail@plt+0xfc20>
   23590:	mov	r2, #5
   23594:	movw	r1, #17732	; 0x4544
   23598:	mov	r0, #0
   2359c:	movt	r1, #5
   235a0:	bl	12298 <dcgettext@plt>
   235a4:	ldr	r1, [sp, #64]	; 0x40
   235a8:	mov	r2, #8
   235ac:	bl	494bc <error@@Base>
   235b0:	mov	r1, #8
   235b4:	b	2280c <__assert_fail@plt+0x10034>
   235b8:	movw	r3, #3472	; 0xd90
   235bc:	movt	r3, #7
   235c0:	mov	r0, sl
   235c4:	ldr	r3, [r3]
   235c8:	blx	r3
   235cc:	strd	r0, [sp, #104]	; 0x68
   235d0:	b	2283c <__assert_fail@plt+0x10064>
   235d4:	mov	r2, #5
   235d8:	movw	r1, #17732	; 0x4544
   235dc:	mov	r0, #0
   235e0:	movt	r1, #5
   235e4:	bl	12298 <dcgettext@plt>
   235e8:	ldr	r1, [sp, #240]	; 0xf0
   235ec:	mov	r2, #8
   235f0:	bl	494bc <error@@Base>
   235f4:	mov	r1, #8
   235f8:	b	21ffc <__assert_fail@plt+0xf824>
   235fc:	movw	r3, #3472	; 0xd90
   23600:	movt	r3, #7
   23604:	mov	r0, sl
   23608:	ldr	r3, [r3]
   2360c:	blx	r3
   23610:	strd	r0, [sp, #104]	; 0x68
   23614:	b	2202c <__assert_fail@plt+0xf854>
   23618:	ldr	r1, [sp, #240]	; 0xf0
   2361c:	cmp	r1, #8
   23620:	bhi	23c4c <__assert_fail@plt+0x11474>
   23624:	add	r3, sl, r1
   23628:	cmp	fp, r3
   2362c:	bhi	2363c <__assert_fail@plt+0x10e64>
   23630:	cmp	sl, fp
   23634:	bcs	23648 <__assert_fail@plt+0x10e70>
   23638:	rsb	r1, sl, fp
   2363c:	sub	r3, r1, #1
   23640:	cmp	r3, #7
   23644:	bls	23c30 <__assert_fail@plt+0x11458>
   23648:	mov	r2, #0
   2364c:	mov	r3, #0
   23650:	strd	r2, [sp, #104]	; 0x68
   23654:	ldr	r5, [sp, #240]	; 0xf0
   23658:	add	r5, sl, r5
   2365c:	str	r5, [sp, #52]	; 0x34
   23660:	b	21ea0 <__assert_fail@plt+0xf6c8>
   23664:	cmp	r3, #0
   23668:	cmpeq	r2, #22
   2366c:	beq	23fac <__assert_fail@plt+0x117d4>
   23670:	bls	23ad0 <__assert_fail@plt+0x112f8>
   23674:	cmp	r3, #0
   23678:	cmpeq	r2, #34	; 0x22
   2367c:	beq	23f64 <__assert_fail@plt+0x1178c>
   23680:	bhi	23db0 <__assert_fail@plt+0x115d8>
   23684:	cmp	r3, #0
   23688:	cmpeq	r2, #29
   2368c:	beq	24024 <__assert_fail@plt+0x1184c>
   23690:	cmp	r3, #0
   23694:	cmpeq	r2, #33	; 0x21
   23698:	beq	2400c <__assert_fail@plt+0x11834>
   2369c:	cmp	r3, #0
   236a0:	cmpeq	r2, #26
   236a4:	beq	23ff4 <__assert_fail@plt+0x1181c>
   236a8:	subs	r2, r2, #32768	; 0x8000
   236ac:	mov	r1, #0
   236b0:	sbc	r3, r3, #0
   236b4:	movw	r0, #32767	; 0x7fff
   236b8:	cmp	r3, r1
   236bc:	cmpeq	r2, r0
   236c0:	movwls	r1, #23804	; 0x5cfc
   236c4:	movwhi	r1, #23836	; 0x5d1c
   236c8:	movtls	r1, #5
   236cc:	movthi	r1, #5
   236d0:	movls	r0, #0
   236d4:	movhi	r0, #0
   236d8:	mov	r2, #5
   236dc:	bl	12298 <dcgettext@plt>
   236e0:	ldrd	r2, [sp, #104]	; 0x68
   236e4:	mov	r1, #0
   236e8:	str	r1, [sp]
   236ec:	mov	r4, r0
   236f0:	movw	r0, #41908	; 0xa3b4
   236f4:	movt	r0, #5
   236f8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   236fc:	mov	r1, r4
   23700:	mov	r2, r0
   23704:	mov	r0, #1
   23708:	bl	125bc <__printf_chk@plt>
   2370c:	ldr	r0, [sp, #52]	; 0x34
   23710:	b	21e2c <__assert_fail@plt+0xf654>
   23714:	cmp	r4, #47	; 0x2f
   23718:	bne	21f0c <__assert_fail@plt+0xf734>
   2371c:	b	222a0 <__assert_fail@plt+0xfac8>
   23720:	cmp	r4, #34	; 0x22
   23724:	beq	222a0 <__assert_fail@plt+0xfac8>
   23728:	b	21f0c <__assert_fail@plt+0xf734>
   2372c:	cmp	r4, #74	; 0x4a
   23730:	bne	21d2c <__assert_fail@plt+0xf554>
   23734:	b	223f8 <__assert_fail@plt+0xfc20>
   23738:	str	fp, [sp]
   2373c:	mov	r2, r0
   23740:	mov	r3, r1
   23744:	b	22570 <__assert_fail@plt+0xfd98>
   23748:	ldr	r7, [sp, #52]	; 0x34
   2374c:	movw	r1, #11620	; 0x2d64
   23750:	mov	r0, #1
   23754:	movt	r1, #5
   23758:	rsb	r5, r7, fp
   2375c:	mov	r3, r7
   23760:	mov	r2, r5
   23764:	bl	125bc <__printf_chk@plt>
   23768:	b	229fc <__assert_fail@plt+0x10224>
   2376c:	mov	r2, #5
   23770:	movw	r1, #22792	; 0x5908
   23774:	mov	r0, #0
   23778:	movt	r1, #5
   2377c:	bl	12298 <dcgettext@plt>
   23780:	mov	r7, fp
   23784:	bl	49bf8 <warn@@Base>
   23788:	mov	r0, #0
   2378c:	mov	r2, #0
   23790:	mov	r3, #0
   23794:	mov	r1, r0
   23798:	strd	r2, [sp, #104]	; 0x68
   2379c:	b	229d0 <__assert_fail@plt+0x101f8>
   237a0:	movw	r0, #41908	; 0xa3b4
   237a4:	ldrd	r2, [sp, #104]	; 0x68
   237a8:	str	ip, [sp]
   237ac:	movt	r0, #5
   237b0:	mov	r7, ip
   237b4:	b	22b04 <__assert_fail@plt+0x1032c>
   237b8:	mov	r2, #5
   237bc:	movw	r1, #24836	; 0x6104
   237c0:	mov	r0, #0
   237c4:	movt	r1, #5
   237c8:	bl	12298 <dcgettext@plt>
   237cc:	mov	ip, #0
   237d0:	ldrd	r2, [sp, #104]	; 0x68
   237d4:	str	ip, [sp]
   237d8:	str	ip, [sp, #56]	; 0x38
   237dc:	str	r0, [sp, #84]	; 0x54
   237e0:	movw	r0, #41908	; 0xa3b4
   237e4:	movt	r0, #5
   237e8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   237ec:	ldr	r3, [sp, #104]	; 0x68
   237f0:	ldr	r6, [sp, #64]	; 0x40
   237f4:	movw	r1, #62864	; 0xf590
   237f8:	ldr	r2, [sp, #108]	; 0x6c
   237fc:	movt	r1, #6
   23800:	ldr	ip, [sp, #56]	; 0x38
   23804:	mul	r2, r6, r2
   23808:	umull	r6, r7, r3, r6
   2380c:	mla	r5, r5, r3, r2
   23810:	strd	r6, [sp, #72]	; 0x48
   23814:	add	r5, r5, r7
   23818:	str	r5, [sp, #76]	; 0x4c
   2381c:	str	r0, [sp, #88]	; 0x58
   23820:	ldr	r0, [r1, #1996]	; 0x7cc
   23824:	cmp	r0, #0
   23828:	beq	23f48 <__assert_fail@plt+0x11770>
   2382c:	add	r5, r1, #640	; 0x280
   23830:	add	r1, r1, #1984	; 0x7c0
   23834:	b	22750 <__assert_fail@plt+0xff78>
   23838:	cmp	r4, #70	; 0x46
   2383c:	beq	22280 <__assert_fail@plt+0xfaa8>
   23840:	cmp	r4, #72	; 0x48
   23844:	bne	21f0c <__assert_fail@plt+0xf734>
   23848:	b	22280 <__assert_fail@plt+0xfaa8>
   2384c:	mov	r1, #8
   23850:	movw	r3, #3472	; 0xd90
   23854:	movt	r3, #7
   23858:	ldr	r0, [sp, #52]	; 0x34
   2385c:	ldr	r3, [r3]
   23860:	str	r5, [sp, #52]	; 0x34
   23864:	blx	r3
   23868:	strd	r0, [sp, #104]	; 0x68
   2386c:	b	224c0 <__assert_fail@plt+0xfce8>
   23870:	ldr	r6, [sp, #48]	; 0x30
   23874:	add	r3, r3, #1024	; 0x400
   23878:	mov	r2, #8
   2387c:	mov	r1, r3
   23880:	ldr	r0, [r6, #48]	; 0x30
   23884:	str	ip, [sp, #56]	; 0x38
   23888:	str	r3, [sp, #60]	; 0x3c
   2388c:	bl	21ac4 <__assert_fail@plt+0xf2ec>
   23890:	ldr	r3, [sp, #60]	; 0x3c
   23894:	mov	r2, #4
   23898:	mov	r1, r3
   2389c:	str	r0, [r6, #48]	; 0x30
   238a0:	ldr	r0, [r6, #52]	; 0x34
   238a4:	str	r3, [sp, #60]	; 0x3c
   238a8:	bl	21ac4 <__assert_fail@plt+0xf2ec>
   238ac:	ldr	r3, [sp, #60]	; 0x3c
   238b0:	ldr	ip, [sp, #56]	; 0x38
   238b4:	str	r3, [r6, #60]	; 0x3c
   238b8:	str	r0, [sp, #84]	; 0x54
   238bc:	str	r0, [r6, #52]	; 0x34
   238c0:	b	22438 <__assert_fail@plt+0xfc60>
   238c4:	movw	r1, #24556	; 0x5fec
   238c8:	mov	r0, #1
   238cc:	movt	r1, #5
   238d0:	bl	125bc <__printf_chk@plt>
   238d4:	ldr	r0, [sp, #52]	; 0x34
   238d8:	b	21e2c <__assert_fail@plt+0xf654>
   238dc:	movw	r1, #24580	; 0x6004
   238e0:	mov	r0, #1
   238e4:	movt	r1, #5
   238e8:	bl	125bc <__printf_chk@plt>
   238ec:	ldr	r0, [sp, #52]	; 0x34
   238f0:	b	21e2c <__assert_fail@plt+0xf654>
   238f4:	movw	r1, #24644	; 0x6044
   238f8:	mov	r0, #1
   238fc:	movt	r1, #5
   23900:	bl	125bc <__printf_chk@plt>
   23904:	ldr	r0, [sp, #52]	; 0x34
   23908:	b	21e2c <__assert_fail@plt+0xf654>
   2390c:	movw	r1, #24656	; 0x6050
   23910:	mov	r0, #1
   23914:	movt	r1, #5
   23918:	bl	125bc <__printf_chk@plt>
   2391c:	ldr	r0, [sp, #52]	; 0x34
   23920:	b	21e2c <__assert_fail@plt+0xf654>
   23924:	movw	r1, #24452	; 0x5f84
   23928:	mov	r0, #0
   2392c:	movt	r1, #5
   23930:	mov	r2, #5
   23934:	b	22318 <__assert_fail@plt+0xfb40>
   23938:	movw	r1, #24324	; 0x5f04
   2393c:	mov	r0, #1
   23940:	movt	r1, #5
   23944:	bl	125bc <__printf_chk@plt>
   23948:	ldr	r0, [sp, #52]	; 0x34
   2394c:	b	21e2c <__assert_fail@plt+0xf654>
   23950:	movw	r1, #24312	; 0x5ef8
   23954:	mov	r0, #1
   23958:	movt	r1, #5
   2395c:	bl	125bc <__printf_chk@plt>
   23960:	ldr	r0, [sp, #52]	; 0x34
   23964:	b	21e2c <__assert_fail@plt+0xf654>
   23968:	movw	r1, #24380	; 0x5f3c
   2396c:	mov	r0, #1
   23970:	movt	r1, #5
   23974:	bl	125bc <__printf_chk@plt>
   23978:	ldr	r0, [sp, #52]	; 0x34
   2397c:	b	21e2c <__assert_fail@plt+0xf654>
   23980:	movw	r1, #24368	; 0x5f30
   23984:	mov	r0, #1
   23988:	movt	r1, #5
   2398c:	bl	125bc <__printf_chk@plt>
   23990:	ldr	r0, [sp, #52]	; 0x34
   23994:	b	21e2c <__assert_fail@plt+0xf654>
   23998:	movw	r1, #24360	; 0x5f28
   2399c:	mov	r0, #1
   239a0:	movt	r1, #5
   239a4:	bl	125bc <__printf_chk@plt>
   239a8:	ldr	r0, [sp, #52]	; 0x34
   239ac:	b	21e2c <__assert_fail@plt+0xf654>
   239b0:	movw	r1, #24416	; 0x5f60
   239b4:	mov	r0, #1
   239b8:	movt	r1, #5
   239bc:	bl	125bc <__printf_chk@plt>
   239c0:	ldr	r0, [sp, #52]	; 0x34
   239c4:	b	21e2c <__assert_fail@plt+0xf654>
   239c8:	movw	r1, #24424	; 0x5f68
   239cc:	mov	r0, #1
   239d0:	movt	r1, #5
   239d4:	bl	125bc <__printf_chk@plt>
   239d8:	ldr	r0, [sp, #52]	; 0x34
   239dc:	b	21e2c <__assert_fail@plt+0xf654>
   239e0:	movw	r1, #24568	; 0x5ff8
   239e4:	mov	r0, #1
   239e8:	movt	r1, #5
   239ec:	bl	125bc <__printf_chk@plt>
   239f0:	ldr	r0, [sp, #52]	; 0x34
   239f4:	b	21e2c <__assert_fail@plt+0xf654>
   239f8:	ldr	r7, [sp, #80]	; 0x50
   239fc:	mov	r1, #0
   23a00:	mov	r3, fp
   23a04:	mov	r2, r1
   23a08:	ldr	r0, [r7, #12]
   23a0c:	add	r0, r0, r4
   23a10:	bl	1c634 <__assert_fail@plt+0x9e5c>
   23a14:	mov	r2, #5
   23a18:	movw	r1, #24812	; 0x60ec
   23a1c:	movt	r1, #5
   23a20:	mov	r4, r0
   23a24:	mov	r0, #0
   23a28:	bl	12298 <dcgettext@plt>
   23a2c:	mov	r2, r4
   23a30:	mov	r1, r0
   23a34:	mov	r0, #1
   23a38:	bl	125bc <__printf_chk@plt>
   23a3c:	cmp	r9, #16
   23a40:	beq	23a88 <__assert_fail@plt+0x112b0>
   23a44:	movw	r3, #1240	; 0x4d8
   23a48:	movt	r3, #7
   23a4c:	ldr	r3, [r3, #4]
   23a50:	cmp	r3, #0
   23a54:	beq	23a88 <__assert_fail@plt+0x112b0>
   23a58:	ldr	r2, [r3]
   23a5c:	cmp	r2, r4
   23a60:	ldrne	r7, [sp, #52]	; 0x34
   23a64:	bne	23a78 <__assert_fail@plt+0x112a0>
   23a68:	b	23e00 <__assert_fail@plt+0x11628>
   23a6c:	ldr	r2, [r3]
   23a70:	cmp	r2, r4
   23a74:	beq	23dfc <__assert_fail@plt+0x11624>
   23a78:	ldr	r3, [r3, #20]
   23a7c:	cmp	r3, #0
   23a80:	bne	23a6c <__assert_fail@plt+0x11294>
   23a84:	str	r7, [sp, #52]	; 0x34
   23a88:	mov	r0, #93	; 0x5d
   23a8c:	bl	1258c <putchar@plt>
   23a90:	ldr	r0, [sp, #52]	; 0x34
   23a94:	b	21e2c <__assert_fail@plt+0xf654>
   23a98:	movw	r1, #24300	; 0x5eec
   23a9c:	mov	r0, #1
   23aa0:	movt	r1, #5
   23aa4:	bl	125bc <__printf_chk@plt>
   23aa8:	ldr	r0, [sp, #52]	; 0x34
   23aac:	b	21e2c <__assert_fail@plt+0xf654>
   23ab0:	cmp	r4, #77	; 0x4d
   23ab4:	bne	21f0c <__assert_fail@plt+0xf734>
   23ab8:	b	22280 <__assert_fail@plt+0xfaa8>
   23abc:	sub	r3, r4, #8448	; 0x2100
   23ac0:	sub	r3, r3, #17
   23ac4:	cmp	r3, #3
   23ac8:	bhi	21f0c <__assert_fail@plt+0xf734>
   23acc:	b	22280 <__assert_fail@plt+0xfaa8>
   23ad0:	cmp	r3, #0
   23ad4:	cmpeq	r2, #17
   23ad8:	beq	23f94 <__assert_fail@plt+0x117bc>
   23adc:	bls	23e38 <__assert_fail@plt+0x11660>
   23ae0:	cmp	r3, #0
   23ae4:	cmpeq	r2, #19
   23ae8:	beq	23f7c <__assert_fail@plt+0x117a4>
   23aec:	bcc	23e20 <__assert_fail@plt+0x11648>
   23af0:	cmp	r3, #0
   23af4:	cmpeq	r2, #20
   23af8:	bne	236a8 <__assert_fail@plt+0x10ed0>
   23afc:	movw	r1, #23708	; 0x5c9c
   23b00:	mov	r0, #1
   23b04:	movt	r1, #5
   23b08:	bl	125bc <__printf_chk@plt>
   23b0c:	ldr	r0, [sp, #52]	; 0x34
   23b10:	b	21e2c <__assert_fail@plt+0xf654>
   23b14:	cmp	r3, #0
   23b18:	cmpeq	r2, #10
   23b1c:	beq	240fc <__assert_fail@plt+0x11924>
   23b20:	bls	23e98 <__assert_fail@plt+0x116c0>
   23b24:	cmp	r3, #0
   23b28:	cmpeq	r2, #12
   23b2c:	beq	240e4 <__assert_fail@plt+0x1190c>
   23b30:	bhi	240cc <__assert_fail@plt+0x118f4>
   23b34:	movw	r1, #23592	; 0x5c28
   23b38:	mov	r0, #1
   23b3c:	movt	r1, #5
   23b40:	bl	125bc <__printf_chk@plt>
   23b44:	ldr	r0, [sp, #52]	; 0x34
   23b48:	b	21e2c <__assert_fail@plt+0xf654>
   23b4c:	movw	r1, #23424	; 0x5b80
   23b50:	mov	r0, #0
   23b54:	movt	r1, #5
   23b58:	b	236d8 <__assert_fail@plt+0x10f00>
   23b5c:	movw	r1, #24540	; 0x5fdc
   23b60:	mov	r0, #0
   23b64:	movt	r1, #5
   23b68:	mov	r2, #5
   23b6c:	b	22318 <__assert_fail@plt+0xfb40>
   23b70:	mov	r2, #5
   23b74:	movw	r1, #17732	; 0x4544
   23b78:	mov	r0, #0
   23b7c:	movt	r1, #5
   23b80:	bl	12298 <dcgettext@plt>
   23b84:	ldr	r1, [sp, #64]	; 0x40
   23b88:	mov	r2, #8
   23b8c:	bl	494bc <error@@Base>
   23b90:	mov	r1, #8
   23b94:	b	23300 <__assert_fail@plt+0x10b28>
   23b98:	movw	r3, #3472	; 0xd90
   23b9c:	movt	r3, #7
   23ba0:	mov	r0, sl
   23ba4:	ldr	r3, [r3]
   23ba8:	blx	r3
   23bac:	strd	r0, [sp, #104]	; 0x68
   23bb0:	b	23330 <__assert_fail@plt+0x10b58>
   23bb4:	mov	r0, r6
   23bb8:	add	r1, sp, #112	; 0x70
   23bbc:	add	r2, sp, #104	; 0x68
   23bc0:	bl	4a1b0 <warn@@Base+0x5b8>
   23bc4:	ldr	r0, [sp, #112]	; 0x70
   23bc8:	ldr	r1, [sp, #116]	; 0x74
   23bcc:	ldr	r2, [sp, #104]	; 0x68
   23bd0:	ldr	r3, [sp, #108]	; 0x6c
   23bd4:	b	2354c <__assert_fail@plt+0x10d74>
   23bd8:	mov	r0, r7
   23bdc:	add	r1, sp, #112	; 0x70
   23be0:	add	r2, sp, #104	; 0x68
   23be4:	bl	4a1b0 <warn@@Base+0x5b8>
   23be8:	ldrd	r2, [sp, #104]	; 0x68
   23bec:	ldrd	r0, [sp, #112]	; 0x70
   23bf0:	strd	r2, [sp, #72]	; 0x48
   23bf4:	b	233e0 <__assert_fail@plt+0x10c08>
   23bf8:	ldrd	r2, [sp, #72]	; 0x48
   23bfc:	ldrd	r6, [sp, #232]	; 0xe8
   23c00:	adds	r2, r2, r6
   23c04:	adc	r3, r3, r7
   23c08:	ldrd	r6, [sp, #72]	; 0x48
   23c0c:	cmp	r3, r7
   23c10:	cmpeq	r2, r6
   23c14:	strdcs	r2, [sp, #72]	; 0x48
   23c18:	bcs	233e8 <__assert_fail@plt+0x10c10>
   23c1c:	adds	r0, r0, #1
   23c20:	strd	r2, [sp, #72]	; 0x48
   23c24:	adc	r1, r1, #0
   23c28:	strd	r0, [sp, #112]	; 0x70
   23c2c:	b	233e8 <__assert_fail@plt+0x10c10>
   23c30:	movw	r3, #3472	; 0xd90
   23c34:	movt	r3, #7
   23c38:	mov	r0, sl
   23c3c:	ldr	r3, [r3]
   23c40:	blx	r3
   23c44:	strd	r0, [sp, #104]	; 0x68
   23c48:	b	23654 <__assert_fail@plt+0x10e7c>
   23c4c:	mov	r2, #5
   23c50:	movw	r1, #17732	; 0x4544
   23c54:	mov	r0, #0
   23c58:	movt	r1, #5
   23c5c:	bl	12298 <dcgettext@plt>
   23c60:	ldr	r1, [sp, #240]	; 0xf0
   23c64:	mov	r2, #8
   23c68:	bl	494bc <error@@Base>
   23c6c:	mov	r1, #8
   23c70:	b	23624 <__assert_fail@plt+0x10e4c>
   23c74:	ldr	r0, [sp, #104]	; 0x68
   23c78:	ldr	r1, [sp, #108]	; 0x6c
   23c7c:	str	r0, [sp, #88]	; 0x58
   23c80:	str	r1, [sp, #92]	; 0x5c
   23c84:	b	22464 <__assert_fail@plt+0xfc8c>
   23c88:	mov	r2, #5
   23c8c:	movw	r1, #23264	; 0x5ae0
   23c90:	ldr	r0, [sp, #264]	; 0x108
   23c94:	movt	r1, #5
   23c98:	str	ip, [sp, #56]	; 0x38
   23c9c:	bl	12298 <dcgettext@plt>
   23ca0:	ldr	r7, [sp, #264]	; 0x108
   23ca4:	ldr	r5, [r5, #2120]	; 0x848
   23ca8:	ldrd	r2, [sp, #72]	; 0x48
   23cac:	str	r7, [sp]
   23cb0:	mov	r1, r0
   23cb4:	movw	r0, #41908	; 0xa3b4
   23cb8:	movt	r0, #5
   23cbc:	str	r1, [sp, #60]	; 0x3c
   23cc0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   23cc4:	ldr	r1, [sp, #60]	; 0x3c
   23cc8:	mov	r2, r0
   23ccc:	mov	r0, r1
   23cd0:	mov	r1, r5
   23cd4:	bl	49bf8 <warn@@Base>
   23cd8:	movw	r3, #22680	; 0x5898
   23cdc:	ldr	ip, [sp, #56]	; 0x38
   23ce0:	movt	r3, #5
   23ce4:	b	21cf0 <__assert_fail@plt+0xf518>
   23ce8:	ldr	r6, [sp, #48]	; 0x30
   23cec:	add	r9, r3, #1024	; 0x400
   23cf0:	mov	r2, #8
   23cf4:	mov	r1, r9
   23cf8:	ldr	r0, [r6, #64]	; 0x40
   23cfc:	bl	21ac4 <__assert_fail@plt+0xf2ec>
   23d00:	ldr	r3, [r6, #68]	; 0x44
   23d04:	str	r9, [r6, #72]	; 0x48
   23d08:	mov	r5, r0
   23d0c:	str	r0, [r6, #64]	; 0x40
   23d10:	b	225e4 <__assert_fail@plt+0xfe0c>
   23d14:	cmp	ip, #0
   23d18:	movne	r0, r3
   23d1c:	movwne	r1, #23036	; 0x59fc
   23d20:	movweq	r1, #16988	; 0x425c
   23d24:	movne	r2, #5
   23d28:	movtne	r1, #5
   23d2c:	moveq	r0, ip
   23d30:	moveq	r2, #5
   23d34:	movteq	r1, #5
   23d38:	bl	12298 <dcgettext@plt>
   23d3c:	mov	r3, r0
   23d40:	b	227d8 <__assert_fail@plt+0x10000>
   23d44:	mov	r2, #5
   23d48:	movw	r1, #22964	; 0x59b4
   23d4c:	mov	r0, #0
   23d50:	movt	r1, #5
   23d54:	bl	12298 <dcgettext@plt>
   23d58:	mov	r5, #0
   23d5c:	ldrd	r2, [sp, #72]	; 0x48
   23d60:	str	r5, [sp]
   23d64:	mov	ip, r0
   23d68:	movw	r0, #41908	; 0xa3b4
   23d6c:	movt	r0, #5
   23d70:	str	ip, [sp, #56]	; 0x38
   23d74:	bl	1acc4 <__assert_fail@plt+0x84ec>
   23d78:	ldr	ip, [sp, #56]	; 0x38
   23d7c:	mov	r1, r0
   23d80:	mov	r0, ip
   23d84:	bl	49bf8 <warn@@Base>
   23d88:	mov	r0, r5
   23d8c:	movw	r1, #23008	; 0x59e0
   23d90:	mov	r2, #5
   23d94:	movt	r1, #5
   23d98:	bl	12298 <dcgettext@plt>
   23d9c:	mov	r3, r0
   23da0:	b	227d8 <__assert_fail@plt+0x10000>
   23da4:	cmp	r9, #15
   23da8:	bne	2293c <__assert_fail@plt+0x10164>
   23dac:	b	22088 <__assert_fail@plt+0xf8b0>
   23db0:	movw	r0, #32769	; 0x8001
   23db4:	mov	r1, #0
   23db8:	cmp	r3, r1
   23dbc:	cmpeq	r2, r0
   23dc0:	beq	24054 <__assert_fail@plt+0x1187c>
   23dc4:	movw	r0, #34661	; 0x8765
   23dc8:	mov	r1, #0
   23dcc:	cmp	r3, r1
   23dd0:	cmpeq	r2, r0
   23dd4:	beq	23e20 <__assert_fail@plt+0x11648>
   23dd8:	cmp	r3, #0
   23ddc:	cmpeq	r2, #35	; 0x23
   23de0:	bne	236a8 <__assert_fail@plt+0x10ed0>
   23de4:	movw	r1, #23768	; 0x5cd8
   23de8:	mov	r0, #1
   23dec:	movt	r1, #5
   23df0:	bl	125bc <__printf_chk@plt>
   23df4:	ldr	r0, [sp, #52]	; 0x34
   23df8:	b	21e2c <__assert_fail@plt+0xf654>
   23dfc:	str	r7, [sp, #52]	; 0x34
   23e00:	ldr	r0, [r3, #4]
   23e04:	bl	1c294 <__assert_fail@plt+0x9abc>
   23e08:	movw	r1, #24864	; 0x6120
   23e0c:	movt	r1, #5
   23e10:	mov	r2, r0
   23e14:	mov	r0, #1
   23e18:	bl	125bc <__printf_chk@plt>
   23e1c:	b	23a88 <__assert_fail@plt+0x112b0>
   23e20:	movw	r1, #23680	; 0x5c80
   23e24:	mov	r0, #1
   23e28:	movt	r1, #5
   23e2c:	bl	125bc <__printf_chk@plt>
   23e30:	ldr	r0, [sp, #52]	; 0x34
   23e34:	b	21e2c <__assert_fail@plt+0xf654>
   23e38:	cmp	r3, #0
   23e3c:	cmpeq	r2, #15
   23e40:	beq	240b4 <__assert_fail@plt+0x118dc>
   23e44:	cmp	r3, #0
   23e48:	cmpeq	r2, #16
   23e4c:	bne	236a8 <__assert_fail@plt+0x10ed0>
   23e50:	movw	r1, #23648	; 0x5c60
   23e54:	mov	r0, #1
   23e58:	movt	r1, #5
   23e5c:	bl	125bc <__printf_chk@plt>
   23e60:	ldr	r0, [sp, #52]	; 0x34
   23e64:	b	21e2c <__assert_fail@plt+0xf654>
   23e68:	cmp	r3, #0
   23e6c:	cmpeq	r2, #1
   23e70:	beq	24114 <__assert_fail@plt+0x1193c>
   23e74:	cmp	r3, #0
   23e78:	cmpeq	r2, #2
   23e7c:	bne	236a8 <__assert_fail@plt+0x10ed0>
   23e80:	movw	r1, #23476	; 0x5bb4
   23e84:	mov	r0, #1
   23e88:	movt	r1, #5
   23e8c:	bl	125bc <__printf_chk@plt>
   23e90:	ldr	r0, [sp, #52]	; 0x34
   23e94:	b	21e2c <__assert_fail@plt+0xf654>
   23e98:	cmp	r3, #0
   23e9c:	cmpeq	r2, #8
   23ea0:	beq	23fdc <__assert_fail@plt+0x11804>
   23ea4:	cmp	r3, #0
   23ea8:	cmpeq	r2, #9
   23eac:	bne	236a8 <__assert_fail@plt+0x10ed0>
   23eb0:	movw	r1, #23564	; 0x5c0c
   23eb4:	mov	r0, #1
   23eb8:	movt	r1, #5
   23ebc:	bl	125bc <__printf_chk@plt>
   23ec0:	ldr	r0, [sp, #52]	; 0x34
   23ec4:	b	21e2c <__assert_fail@plt+0xf654>
   23ec8:	mov	r2, #5
   23ecc:	movw	r1, #23064	; 0x5a18
   23ed0:	mov	r0, #0
   23ed4:	movt	r1, #5
   23ed8:	bl	12298 <dcgettext@plt>
   23edc:	mov	r5, #0
   23ee0:	mov	r3, r7
   23ee4:	mov	r2, r6
   23ee8:	str	r5, [sp]
   23eec:	mov	ip, r0
   23ef0:	movw	r0, #41908	; 0xa3b4
   23ef4:	movt	r0, #5
   23ef8:	str	ip, [sp, #56]	; 0x38
   23efc:	bl	1acc4 <__assert_fail@plt+0x84ec>
   23f00:	ldr	ip, [sp, #56]	; 0x38
   23f04:	mov	r1, r0
   23f08:	mov	r0, ip
   23f0c:	bl	49bf8 <warn@@Base>
   23f10:	mov	r0, r5
   23f14:	movw	r1, #23116	; 0x5a4c
   23f18:	mov	r2, #5
   23f1c:	movt	r1, #5
   23f20:	bl	12298 <dcgettext@plt>
   23f24:	mov	r3, r0
   23f28:	b	227d8 <__assert_fail@plt+0x10000>
   23f2c:	movw	r1, #22896	; 0x5970
   23f30:	ldr	r0, [sp, #264]	; 0x108
   23f34:	movt	r1, #5
   23f38:	mov	r2, #5
   23f3c:	bl	12298 <dcgettext@plt>
   23f40:	mov	r3, r0
   23f44:	b	227d8 <__assert_fail@plt+0x10000>
   23f48:	movw	r1, #22932	; 0x5994
   23f4c:	mov	r2, #5
   23f50:	movt	r1, #5
   23f54:	bl	12298 <dcgettext@plt>
   23f58:	mov	r3, r0
   23f5c:	b	227d8 <__assert_fail@plt+0x10000>
   23f60:	bl	122b0 <__stack_chk_fail@plt>
   23f64:	movw	r1, #23752	; 0x5cc8
   23f68:	mov	r0, #1
   23f6c:	movt	r1, #5
   23f70:	bl	125bc <__printf_chk@plt>
   23f74:	ldr	r0, [sp, #52]	; 0x34
   23f78:	b	21e2c <__assert_fail@plt+0xf654>
   23f7c:	movw	r1, #23704	; 0x5c98
   23f80:	mov	r0, #1
   23f84:	movt	r1, #5
   23f88:	bl	125bc <__printf_chk@plt>
   23f8c:	ldr	r0, [sp, #52]	; 0x34
   23f90:	b	21e2c <__assert_fail@plt+0xf654>
   23f94:	movw	r1, #23664	; 0x5c70
   23f98:	mov	r0, #1
   23f9c:	movt	r1, #5
   23fa0:	bl	125bc <__printf_chk@plt>
   23fa4:	ldr	r0, [sp, #52]	; 0x34
   23fa8:	b	21e2c <__assert_fail@plt+0xf654>
   23fac:	movw	r1, #23720	; 0x5ca8
   23fb0:	mov	r0, #1
   23fb4:	movt	r1, #5
   23fb8:	bl	125bc <__printf_chk@plt>
   23fbc:	ldr	r0, [sp, #52]	; 0x34
   23fc0:	b	21e2c <__assert_fail@plt+0xf654>
   23fc4:	movw	r1, #23532	; 0x5bec
   23fc8:	mov	r0, #1
   23fcc:	movt	r1, #5
   23fd0:	bl	125bc <__printf_chk@plt>
   23fd4:	ldr	r0, [sp, #52]	; 0x34
   23fd8:	b	21e2c <__assert_fail@plt+0xf654>
   23fdc:	movw	r1, #23548	; 0x5bfc
   23fe0:	mov	r0, #1
   23fe4:	movt	r1, #5
   23fe8:	bl	125bc <__printf_chk@plt>
   23fec:	ldr	r0, [sp, #52]	; 0x34
   23ff0:	b	21e2c <__assert_fail@plt+0xf654>
   23ff4:	movw	r1, #23728	; 0x5cb0
   23ff8:	mov	r0, #1
   23ffc:	movt	r1, #5
   24000:	bl	125bc <__printf_chk@plt>
   24004:	ldr	r0, [sp, #52]	; 0x34
   24008:	b	21e2c <__assert_fail@plt+0xf654>
   2400c:	movw	r1, #23744	; 0x5cc0
   24010:	mov	r0, #1
   24014:	movt	r1, #5
   24018:	bl	125bc <__printf_chk@plt>
   2401c:	ldr	r0, [sp, #52]	; 0x34
   24020:	b	21e2c <__assert_fail@plt+0xf654>
   24024:	movw	r1, #23736	; 0x5cb8
   24028:	mov	r0, #1
   2402c:	movt	r1, #5
   24030:	bl	125bc <__printf_chk@plt>
   24034:	ldr	r0, [sp, #52]	; 0x34
   24038:	b	21e2c <__assert_fail@plt+0xf654>
   2403c:	movw	r1, #23624	; 0x5c48
   24040:	mov	r0, #1
   24044:	movt	r1, #5
   24048:	bl	125bc <__printf_chk@plt>
   2404c:	ldr	r0, [sp, #52]	; 0x34
   24050:	b	21e2c <__assert_fail@plt+0xf654>
   24054:	movw	r1, #23784	; 0x5ce8
   24058:	mov	r0, #1
   2405c:	movt	r1, #5
   24060:	bl	125bc <__printf_chk@plt>
   24064:	ldr	r0, [sp, #52]	; 0x34
   24068:	b	21e2c <__assert_fail@plt+0xf654>
   2406c:	movw	r1, #23520	; 0x5be0
   24070:	mov	r0, #1
   24074:	movt	r1, #5
   24078:	bl	125bc <__printf_chk@plt>
   2407c:	ldr	r0, [sp, #52]	; 0x34
   24080:	b	21e2c <__assert_fail@plt+0xf654>
   24084:	movw	r1, #23508	; 0x5bd4
   24088:	mov	r0, #1
   2408c:	movt	r1, #5
   24090:	bl	125bc <__printf_chk@plt>
   24094:	ldr	r0, [sp, #52]	; 0x34
   24098:	b	21e2c <__assert_fail@plt+0xf654>
   2409c:	movw	r1, #23492	; 0x5bc4
   240a0:	mov	r0, #1
   240a4:	movt	r1, #5
   240a8:	bl	125bc <__printf_chk@plt>
   240ac:	ldr	r0, [sp, #52]	; 0x34
   240b0:	b	21e2c <__assert_fail@plt+0xf654>
   240b4:	movw	r1, #23640	; 0x5c58
   240b8:	mov	r0, #1
   240bc:	movt	r1, #5
   240c0:	bl	125bc <__printf_chk@plt>
   240c4:	ldr	r0, [sp, #52]	; 0x34
   240c8:	b	21e2c <__assert_fail@plt+0xf654>
   240cc:	movw	r1, #23612	; 0x5c3c
   240d0:	mov	r0, #1
   240d4:	movt	r1, #5
   240d8:	bl	125bc <__printf_chk@plt>
   240dc:	ldr	r0, [sp, #52]	; 0x34
   240e0:	b	21e2c <__assert_fail@plt+0xf654>
   240e4:	movw	r1, #23600	; 0x5c30
   240e8:	mov	r0, #1
   240ec:	movt	r1, #5
   240f0:	bl	125bc <__printf_chk@plt>
   240f4:	ldr	r0, [sp, #52]	; 0x34
   240f8:	b	21e2c <__assert_fail@plt+0xf654>
   240fc:	movw	r1, #23580	; 0x5c1c
   24100:	mov	r0, #1
   24104:	movt	r1, #5
   24108:	bl	125bc <__printf_chk@plt>
   2410c:	ldr	r0, [sp, #52]	; 0x34
   24110:	b	21e2c <__assert_fail@plt+0xf654>
   24114:	movw	r1, #23464	; 0x5ba8
   24118:	mov	r0, #1
   2411c:	movt	r1, #5
   24120:	bl	125bc <__printf_chk@plt>
   24124:	ldr	r0, [sp, #52]	; 0x34
   24128:	b	21e2c <__assert_fail@plt+0xf654>
   2412c:	movw	r1, #23236	; 0x5ac4
   24130:	ldr	r0, [sp, #264]	; 0x108
   24134:	movt	r1, #5
   24138:	mov	r2, #5
   2413c:	str	ip, [sp, #56]	; 0x38
   24140:	bl	12298 <dcgettext@plt>
   24144:	ldr	ip, [sp, #56]	; 0x38
   24148:	mov	r3, r0
   2414c:	b	21cf0 <__assert_fail@plt+0xf518>
   24150:	movw	r3, #3472	; 0xd90
   24154:	movt	r3, #7
   24158:	mov	r0, r5
   2415c:	ldr	r3, [r3]
   24160:	blx	r3
   24164:	strd	r0, [sp, #104]	; 0x68
   24168:	b	22a50 <__assert_fail@plt+0x10278>
   2416c:	movw	r3, #3472	; 0xd90
   24170:	movt	r3, #7
   24174:	mov	r0, r6
   24178:	ldr	r3, [r3]
   2417c:	blx	r3
   24180:	strd	r0, [sp, #104]	; 0x68
   24184:	b	22148 <__assert_fail@plt+0xf970>
   24188:	movw	r3, #3472	; 0xd90
   2418c:	movt	r3, #7
   24190:	mov	r0, ip
   24194:	ldr	r3, [r3]
   24198:	blx	r3
   2419c:	strd	r0, [sp, #104]	; 0x68
   241a0:	b	22530 <__assert_fail@plt+0xfd58>
   241a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241a8:	movw	r6, #65176	; 0xfe98
   241ac:	ldr	r7, [r0, #12]
   241b0:	sub	sp, sp, #284	; 0x11c
   241b4:	movt	r6, #6
   241b8:	cmp	r3, #0
   241bc:	str	r3, [sp, #132]	; 0x84
   241c0:	str	r7, [sp, #100]	; 0x64
   241c4:	mov	r7, r2
   241c8:	ldr	r3, [r6]
   241cc:	ldr	r2, [r0, #24]
   241d0:	ldr	ip, [sp, #100]	; 0x64
   241d4:	str	r6, [sp, #160]	; 0xa0
   241d8:	mov	r6, r1
   241dc:	str	r0, [sp, #140]	; 0x8c
   241e0:	add	fp, ip, r2
   241e4:	str	r3, [sp, #276]	; 0x114
   241e8:	bne	24200 <__assert_fail@plt+0x11a28>
   241ec:	movw	r3, #3404	; 0xd4c
   241f0:	movt	r3, #7
   241f4:	ldr	r3, [r3]
   241f8:	cmp	r3, #0
   241fc:	beq	24410 <__assert_fail@plt+0x11c38>
   24200:	movw	ip, #1240	; 0x4d8
   24204:	movt	ip, #7
   24208:	str	ip, [sp, #136]	; 0x88
   2420c:	ldr	r3, [ip, #1568]	; 0x620
   24210:	cmp	r3, #0
   24214:	beq	24348 <__assert_fail@plt+0x11b70>
   24218:	mov	ip, #0
   2421c:	str	ip, [sp, #180]	; 0xb4
   24220:	ldr	ip, [sp, #132]	; 0x84
   24224:	cmp	ip, #0
   24228:	beq	2442c <__assert_fail@plt+0x11c54>
   2422c:	lsl	ip, r7, #6
   24230:	str	ip, [sp, #176]	; 0xb0
   24234:	mov	r1, r6
   24238:	ldr	r6, [sp, #176]	; 0xb0
   2423c:	movw	ip, #62864	; 0xf590
   24240:	movt	ip, #6
   24244:	add	r4, ip, r6
   24248:	mov	r0, r7
   2424c:	str	ip, [sp, #148]	; 0x94
   24250:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   24254:	ldr	r5, [r4, #12]
   24258:	cmp	r5, #0
   2425c:	beq	25698 <__assert_fail@plt+0x12ec0>
   24260:	ldr	r7, [sp, #100]	; 0x64
   24264:	cmp	r7, fp
   24268:	bcs	248f8 <__assert_fail@plt+0x12120>
   2426c:	movw	ip, #1240	; 0x4d8
   24270:	movt	ip, #7
   24274:	str	ip, [sp, #136]	; 0x88
   24278:	movw	r6, #3472	; 0xd90
   2427c:	mov	sl, ip
   24280:	ldr	ip, [sp, #100]	; 0x64
   24284:	movt	r6, #7
   24288:	movw	r7, #3464	; 0xd88
   2428c:	str	r6, [sp, #164]	; 0xa4
   24290:	movt	r7, #7
   24294:	mov	r6, #0
   24298:	str	r7, [sp, #144]	; 0x90
   2429c:	str	ip, [sp, #128]	; 0x80
   242a0:	str	r6, [sp, #108]	; 0x6c
   242a4:	ldr	r7, [sp, #100]	; 0x64
   242a8:	mov	r2, #0
   242ac:	mov	r3, #0
   242b0:	strd	r2, [sp, #192]	; 0xc0
   242b4:	add	r4, r7, #4
   242b8:	strd	r2, [sp, #200]	; 0xc8
   242bc:	cmp	fp, r4
   242c0:	movhi	r1, #4
   242c4:	bls	244cc <__assert_fail@plt+0x11cf4>
   242c8:	ldr	r6, [sp, #164]	; 0xa4
   242cc:	movw	r7, #3472	; 0xd90
   242d0:	ldr	r0, [sp, #100]	; 0x64
   242d4:	movt	r7, #7
   242d8:	ldr	r3, [r6]
   242dc:	blx	r3
   242e0:	mvn	r2, #0
   242e4:	mov	r3, #0
   242e8:	mov	r8, r0
   242ec:	mov	r9, r1
   242f0:	cmp	r9, r3
   242f4:	cmpeq	r8, r2
   242f8:	bne	2545c <__assert_fail@plt+0x12c84>
   242fc:	ldr	ip, [sp, #100]	; 0x64
   24300:	add	r2, ip, #12
   24304:	cmp	fp, r2
   24308:	bhi	245f8 <__assert_fail@plt+0x11e20>
   2430c:	cmp	fp, r4
   24310:	bls	25480 <__assert_fail@plt+0x12ca8>
   24314:	rsb	r1, r4, fp
   24318:	sub	r3, r1, #1
   2431c:	cmp	r3, #7
   24320:	bls	245fc <__assert_fail@plt+0x11e24>
   24324:	mov	r7, #0
   24328:	mov	r6, #12
   2432c:	mov	ip, #8
   24330:	strd	r6, [sp, #80]	; 0x50
   24334:	mov	r4, r2
   24338:	mov	r7, #12
   2433c:	str	ip, [sp, #96]	; 0x60
   24340:	str	r7, [sp, #152]	; 0x98
   24344:	b	24500 <__assert_fail@plt+0x11d28>
   24348:	ldr	ip, [sp, #320]	; 0x140
   2434c:	cmp	ip, #0
   24350:	bne	25478 <__assert_fail@plt+0x12ca0>
   24354:	ldr	ip, [sp, #100]	; 0x64
   24358:	cmp	ip, fp
   2435c:	bcs	256f8 <__assert_fail@plt+0x12f20>
   24360:	ldr	ip, [sp, #320]	; 0x140
   24364:	movw	sl, #3472	; 0xd90
   24368:	ldr	r8, [sp, #100]	; 0x64
   2436c:	movt	sl, #7
   24370:	mov	r4, ip
   24374:	str	ip, [sp, #180]	; 0xb4
   24378:	mov	r5, r8
   2437c:	add	r9, r8, #4
   24380:	cmp	fp, r9
   24384:	bhi	24480 <__assert_fail@plt+0x11ca8>
   24388:	cmp	r8, fp
   2438c:	bcs	243a0 <__assert_fail@plt+0x11bc8>
   24390:	rsb	r1, r8, fp
   24394:	sub	r3, r1, #1
   24398:	cmp	r3, #7
   2439c:	bls	24484 <__assert_fail@plt+0x11cac>
   243a0:	mov	r4, #0
   243a4:	mov	r5, #0
   243a8:	mov	r2, #5
   243ac:	movw	r1, #24972	; 0x618c
   243b0:	mov	r0, #0
   243b4:	movt	r1, #5
   243b8:	bl	12298 <dcgettext@plt>
   243bc:	mov	r2, r4
   243c0:	mov	r3, r5
   243c4:	mov	r4, #0
   243c8:	str	r4, [sp]
   243cc:	mov	r6, r0
   243d0:	movw	r0, #41908	; 0xa3b4
   243d4:	movt	r0, #5
   243d8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   243dc:	ldr	r7, [sp, #140]	; 0x8c
   243e0:	ldr	r2, [r7, #8]
   243e4:	mov	r1, r0
   243e8:	mov	r0, r6
   243ec:	bl	49bf8 <warn@@Base>
   243f0:	mov	r0, r4
   243f4:	ldr	ip, [sp, #160]	; 0xa0
   243f8:	ldr	r2, [sp, #276]	; 0x114
   243fc:	ldr	r3, [ip]
   24400:	cmp	r2, r3
   24404:	bne	25720 <__assert_fail@plt+0x12f48>
   24408:	add	sp, sp, #284	; 0x11c
   2440c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24410:	movw	r3, #3436	; 0xd6c
   24414:	movt	r3, #7
   24418:	ldr	r3, [r3]
   2441c:	cmp	r3, #0
   24420:	bne	24200 <__assert_fail@plt+0x11a28>
   24424:	ldr	ip, [sp, #132]	; 0x84
   24428:	str	ip, [sp, #180]	; 0xb4
   2442c:	movw	r3, #3464	; 0xd88
   24430:	movt	r3, #7
   24434:	ldr	r0, [r3]
   24438:	cmp	r0, #0
   2443c:	beq	2555c <__assert_fail@plt+0x12d84>
   24440:	mov	r1, r6
   24444:	mov	r0, #10
   24448:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   2444c:	mov	r1, r6
   24450:	mov	r0, #30
   24454:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   24458:	mov	r1, r6
   2445c:	mov	r0, #31
   24460:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   24464:	mov	r1, r6
   24468:	mov	r0, #32
   2446c:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   24470:	mov	r1, r6
   24474:	mov	r0, #33	; 0x21
   24478:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   2447c:	b	2422c <__assert_fail@plt+0x11a54>
   24480:	mov	r1, #4
   24484:	ldr	r3, [sl]
   24488:	mov	r0, r8
   2448c:	blx	r3
   24490:	mvn	r2, #0
   24494:	mov	r3, #0
   24498:	cmp	r1, r3
   2449c:	cmpeq	r0, r2
   244a0:	bne	24520 <__assert_fail@plt+0x11d48>
   244a4:	add	r3, r8, #12
   244a8:	cmp	fp, r3
   244ac:	bhi	245d8 <__assert_fail@plt+0x11e00>
   244b0:	cmp	fp, r9
   244b4:	bls	243a0 <__assert_fail@plt+0x11bc8>
   244b8:	rsb	r1, r9, fp
   244bc:	sub	r3, r1, #1
   244c0:	cmp	r3, #7
   244c4:	bhi	243a0 <__assert_fail@plt+0x11bc8>
   244c8:	b	245dc <__assert_fail@plt+0x11e04>
   244cc:	ldr	ip, [sp, #100]	; 0x64
   244d0:	cmp	fp, ip
   244d4:	bls	245b8 <__assert_fail@plt+0x11de0>
   244d8:	rsb	r1, ip, fp
   244dc:	sub	r3, r1, #1
   244e0:	cmp	r3, #7
   244e4:	bls	242c8 <__assert_fail@plt+0x11af0>
   244e8:	mov	ip, #4
   244ec:	mov	r6, #4
   244f0:	mov	r7, #0
   244f4:	str	ip, [sp, #152]	; 0x98
   244f8:	strd	r6, [sp, #80]	; 0x50
   244fc:	str	ip, [sp, #96]	; 0x60
   24500:	add	r5, r4, #2
   24504:	cmp	r5, fp
   24508:	bcc	24d88 <__assert_fail@plt+0x125b0>
   2450c:	mov	ip, #0
   24510:	mov	r8, #0
   24514:	mov	r9, #0
   24518:	str	ip, [sp, #104]	; 0x68
   2451c:	b	24668 <__assert_fail@plt+0x11e90>
   24520:	adds	r2, r0, #16
   24524:	sbc	r3, r1, #0
   24528:	cmp	r3, #0
   2452c:	cmpeq	r2, #14
   24530:	bls	255d8 <__assert_fail@plt+0x12e00>
   24534:	add	r2, r0, #4
   24538:	mov	r3, r0
   2453c:	add	r8, r8, r2
   24540:	cmp	r3, #0
   24544:	ble	25584 <__assert_fail@plt+0x12dac>
   24548:	cmp	r8, r5
   2454c:	bcc	25584 <__assert_fail@plt+0x12dac>
   24550:	cmp	r8, fp
   24554:	add	r4, r4, #1
   24558:	bcc	2437c <__assert_fail@plt+0x11ba4>
   2455c:	cmp	r4, #0
   24560:	str	r4, [sp, #180]	; 0xb4
   24564:	beq	256f8 <__assert_fail@plt+0x12f20>
   24568:	movw	r3, #13106	; 0x3332
   2456c:	movt	r3, #819	; 0x333
   24570:	cmp	r4, r3
   24574:	bls	25598 <__assert_fail@plt+0x12dc0>
   24578:	ldr	r6, [sp, #136]	; 0x88
   2457c:	mov	r3, #0
   24580:	str	r3, [r6, #1580]	; 0x62c
   24584:	mov	r2, #5
   24588:	movw	r1, #25020	; 0x61bc
   2458c:	mov	r0, #0
   24590:	movt	r1, #5
   24594:	bl	12298 <dcgettext@plt>
   24598:	ldr	r1, [sp, #180]	; 0xb4
   2459c:	bl	494bc <error@@Base>
   245a0:	ldr	r6, [sp, #136]	; 0x88
   245a4:	mov	r3, #0
   245a8:	mov	r0, r3
   245ac:	str	r3, [r6, #1568]	; 0x620
   245b0:	str	r3, [r6, #1584]	; 0x630
   245b4:	b	243f4 <__assert_fail@plt+0x11c1c>
   245b8:	mov	r7, #4
   245bc:	mov	r6, #4
   245c0:	str	r7, [sp, #152]	; 0x98
   245c4:	mov	r7, #0
   245c8:	strd	r6, [sp, #80]	; 0x50
   245cc:	mov	r7, #4
   245d0:	str	r7, [sp, #96]	; 0x60
   245d4:	b	24500 <__assert_fail@plt+0x11d28>
   245d8:	mov	r1, #8
   245dc:	ldr	r3, [sl]
   245e0:	mov	r0, r9
   245e4:	blx	r3
   245e8:	add	r3, r0, #12
   245ec:	add	r8, r8, r3
   245f0:	mov	r3, r0
   245f4:	b	24540 <__assert_fail@plt+0x11d68>
   245f8:	mov	r1, #8
   245fc:	ldr	r6, [sp, #164]	; 0xa4
   24600:	mov	r0, r4
   24604:	mov	r4, r2
   24608:	ldr	r3, [r6]
   2460c:	mov	r6, #12
   24610:	blx	r3
   24614:	mov	ip, #8
   24618:	str	r6, [sp, #152]	; 0x98
   2461c:	str	ip, [sp, #96]	; 0x60
   24620:	mov	r8, r0
   24624:	mov	r9, r1
   24628:	mov	r0, #12
   2462c:	mov	r1, #0
   24630:	strd	r0, [sp, #80]	; 0x50
   24634:	add	r5, r4, #2
   24638:	cmp	fp, r5
   2463c:	bhi	24d98 <__assert_fail@plt+0x125c0>
   24640:	cmp	r4, fp
   24644:	movcs	r6, #0
   24648:	strcs	r6, [sp, #104]	; 0x68
   2464c:	bcs	24668 <__assert_fail@plt+0x11e90>
   24650:	rsb	r1, r4, fp
   24654:	sub	r3, r1, #1
   24658:	cmp	r3, #7
   2465c:	movhi	r7, #0
   24660:	strhi	r7, [sp, #104]	; 0x68
   24664:	bls	24d9c <__assert_fail@plt+0x125c4>
   24668:	ldr	r6, [sp, #320]	; 0x140
   2466c:	ldr	r7, [sp, #100]	; 0x64
   24670:	ldr	ip, [sp, #128]	; 0x80
   24674:	cmp	r6, #0
   24678:	rsb	r3, ip, r7
   2467c:	asr	r7, r3, #31
   24680:	mov	r6, r3
   24684:	strd	r6, [sp, #64]	; 0x40
   24688:	ldr	r7, [sp, #136]	; 0x88
   2468c:	beq	24db4 <__assert_fail@plt+0x125dc>
   24690:	ldr	r0, [r7, #1588]	; 0x634
   24694:	mov	ip, #2
   24698:	ldr	r1, [r7, #1592]	; 0x638
   2469c:	cmp	r1, #0
   246a0:	beq	25590 <__assert_fail@plt+0x12db8>
   246a4:	add	lr, r0, ip, lsl #3
   246a8:	ldrd	r6, [sp, #64]	; 0x40
   246ac:	ldrd	r2, [lr, #8]
   246b0:	cmp	r7, r3
   246b4:	cmpeq	r6, r2
   246b8:	beq	24dcc <__assert_fail@plt+0x125f4>
   246bc:	mov	lr, r5
   246c0:	lsl	ip, ip, #3
   246c4:	ldr	r6, [sp, #152]	; 0x98
   246c8:	ldrd	r4, [sp, #64]	; 0x40
   246cc:	b	246e4 <__assert_fail@plt+0x11f0c>
   246d0:	add	r3, r0, ip
   246d4:	ldrd	r2, [r3, #8]
   246d8:	cmp	r5, r3
   246dc:	cmpeq	r4, r2
   246e0:	beq	24dc4 <__assert_fail@plt+0x125ec>
   246e4:	subs	r1, r1, #1
   246e8:	add	r0, r0, #104	; 0x68
   246ec:	bne	246d0 <__assert_fail@plt+0x11ef8>
   246f0:	mov	r5, lr
   246f4:	str	r6, [sp, #152]	; 0x98
   246f8:	str	r1, [sp, #76]	; 0x4c
   246fc:	ldr	ip, [sp, #96]	; 0x60
   24700:	add	r4, r5, ip
   24704:	cmp	fp, r4
   24708:	bhi	24ce8 <__assert_fail@plt+0x12510>
   2470c:	cmp	fp, r5
   24710:	rsbhi	r1, r5, fp
   24714:	bhi	24cec <__assert_fail@plt+0x12514>
   24718:	mov	r7, #0
   2471c:	mov	r6, #0
   24720:	strd	r6, [sp, #88]	; 0x58
   24724:	ldr	r7, [sp, #76]	; 0x4c
   24728:	cmp	r7, #0
   2472c:	beq	24d18 <__assert_fail@plt+0x12540>
   24730:	ldr	r7, [sp, #76]	; 0x4c
   24734:	add	r5, r4, #1
   24738:	ldr	ip, [sp, #76]	; 0x4c
   2473c:	cmp	fp, r5
   24740:	ldrd	r6, [r7, #32]
   24744:	strd	r6, [sp, #112]	; 0x70
   24748:	ldr	r7, [ip, #84]	; 0x54
   2474c:	bhi	24d40 <__assert_fail@plt+0x12568>
   24750:	cmp	fp, r4
   24754:	bls	24768 <__assert_fail@plt+0x11f90>
   24758:	rsb	r1, r4, fp
   2475c:	sub	r3, r1, #1
   24760:	cmp	r3, #7
   24764:	bls	24d44 <__assert_fail@plt+0x1256c>
   24768:	mov	r3, #0
   2476c:	mov	r2, #5
   24770:	movw	r1, #25108	; 0x6214
   24774:	mov	r0, #0
   24778:	movt	r1, #5
   2477c:	str	r3, [sp, #60]	; 0x3c
   24780:	bl	12298 <dcgettext@plt>
   24784:	ldr	r3, [sp, #60]	; 0x3c
   24788:	ldr	r2, [sp, #96]	; 0x60
   2478c:	mov	r1, r3
   24790:	bl	49bf8 <warn@@Base>
   24794:	ldr	r6, [sp, #320]	; 0x140
   24798:	ldr	ip, [sp, #96]	; 0x60
   2479c:	cmp	r6, #0
   247a0:	uxtb	ip, ip
   247a4:	str	ip, [sp, #156]	; 0x9c
   247a8:	beq	24d78 <__assert_fail@plt+0x125a0>
   247ac:	add	r4, r4, #9
   247b0:	cmp	fp, r4
   247b4:	bcs	25424 <__assert_fail@plt+0x12c4c>
   247b8:	mov	r2, #0
   247bc:	mov	r3, #0
   247c0:	strd	r2, [sp, #192]	; 0xc0
   247c4:	strd	r2, [sp, #200]	; 0xc8
   247c8:	ldr	ip, [sp, #96]	; 0x60
   247cc:	add	r5, r4, ip
   247d0:	cmp	fp, r5
   247d4:	bhi	253fc <__assert_fail@plt+0x12c24>
   247d8:	cmp	fp, r4
   247dc:	rsbhi	r1, r4, fp
   247e0:	bls	24d78 <__assert_fail@plt+0x125a0>
   247e4:	sub	r3, r1, #1
   247e8:	cmp	r3, #7
   247ec:	bls	2540c <__assert_fail@plt+0x12c34>
   247f0:	mov	r2, #0
   247f4:	mov	r3, #0
   247f8:	strd	r2, [sp, #120]	; 0x78
   247fc:	ldr	r6, [sp, #132]	; 0x84
   24800:	cmp	r6, #0
   24804:	bne	2493c <__assert_fail@plt+0x12164>
   24808:	movw	r3, #3404	; 0xd4c
   2480c:	movt	r3, #7
   24810:	ldr	r3, [r3]
   24814:	cmp	r3, #0
   24818:	bne	2493c <__assert_fail@plt+0x12164>
   2481c:	movw	r3, #3436	; 0xd6c
   24820:	movt	r3, #7
   24824:	ldr	r3, [r3]
   24828:	cmp	r3, #0
   2482c:	bne	2493c <__assert_fail@plt+0x12164>
   24830:	ldr	ip, [sp, #144]	; 0x90
   24834:	ldr	r4, [ip]
   24838:	cmp	r4, #0
   2483c:	beq	249e0 <__assert_fail@plt+0x12208>
   24840:	ldr	r3, [sp, #140]	; 0x8c
   24844:	ldrd	r0, [sp, #80]	; 0x50
   24848:	ldrd	r2, [r3, #24]
   2484c:	adds	r0, r0, r8
   24850:	adc	r1, r1, r9
   24854:	strd	r2, [sp, #48]	; 0x30
   24858:	ldrd	r2, [sp, #64]	; 0x40
   2485c:	adds	r0, r0, r2
   24860:	adc	r1, r1, r3
   24864:	ldrd	r2, [sp, #48]	; 0x30
   24868:	cmp	r1, r3
   2486c:	cmpeq	r0, r2
   24870:	bhi	25630 <__assert_fail@plt+0x12e58>
   24874:	ldr	ip, [sp, #152]	; 0x98
   24878:	add	r6, ip, r8
   2487c:	ldr	ip, [sp, #100]	; 0x64
   24880:	add	ip, ip, r6
   24884:	str	ip, [sp, #100]	; 0x64
   24888:	cmp	fp, ip
   2488c:	bcc	25380 <__assert_fail@plt+0x12ba8>
   24890:	ldr	r6, [sp, #104]	; 0x68
   24894:	sub	r3, r6, #2
   24898:	cmp	r3, #2
   2489c:	bls	24dd4 <__assert_fail@plt+0x125fc>
   248a0:	mov	r2, #5
   248a4:	movw	r1, #25720	; 0x6478
   248a8:	mov	r0, #0
   248ac:	movt	r1, #5
   248b0:	bl	12298 <dcgettext@plt>
   248b4:	mov	r1, #0
   248b8:	ldrd	r2, [sp, #64]	; 0x40
   248bc:	str	r1, [sp]
   248c0:	mov	r4, r0
   248c4:	movw	r0, #41908	; 0xa3b4
   248c8:	movt	r0, #5
   248cc:	bl	1acc4 <__assert_fail@plt+0x84ec>
   248d0:	ldr	r2, [sp, #104]	; 0x68
   248d4:	mov	r1, r0
   248d8:	mov	r0, r4
   248dc:	bl	49bf8 <warn@@Base>
   248e0:	ldr	ip, [sp, #100]	; 0x64
   248e4:	ldr	r6, [sp, #108]	; 0x6c
   248e8:	cmp	ip, fp
   248ec:	add	r6, r6, #1
   248f0:	str	r6, [sp, #108]	; 0x6c
   248f4:	bcc	242a4 <__assert_fail@plt+0x11acc>
   248f8:	ldr	r7, [sp, #132]	; 0x84
   248fc:	cmp	r7, #0
   24900:	bne	25338 <__assert_fail@plt+0x12b60>
   24904:	movw	r3, #3404	; 0xd4c
   24908:	movt	r3, #7
   2490c:	ldr	r3, [r3]
   24910:	cmp	r3, #0
   24914:	bne	25338 <__assert_fail@plt+0x12b60>
   24918:	movw	r3, #3436	; 0xd6c
   2491c:	movt	r3, #7
   24920:	ldr	r3, [r3]
   24924:	cmp	r3, #0
   24928:	bne	25338 <__assert_fail@plt+0x12b60>
   2492c:	mov	r0, #10
   24930:	bl	1258c <putchar@plt>
   24934:	mov	r0, #1
   24938:	b	243f4 <__assert_fail@plt+0x11c1c>
   2493c:	ldr	r6, [sp, #136]	; 0x88
   24940:	ldr	r3, [r6, #1568]	; 0x620
   24944:	cmp	r3, #0
   24948:	bne	249c4 <__assert_fail@plt+0x121ec>
   2494c:	ldr	ip, [sp, #320]	; 0x140
   24950:	cmp	ip, #0
   24954:	bne	249c4 <__assert_fail@plt+0x121ec>
   24958:	ldr	r6, [sp, #108]	; 0x6c
   2495c:	ldr	r0, [sl, #1580]	; 0x62c
   24960:	ldrd	r2, [sp, #64]	; 0x40
   24964:	add	ip, r6, r6, lsl #2
   24968:	ldr	r6, [sp, #156]	; 0x9c
   2496c:	add	r1, r0, ip, lsl #4
   24970:	strd	r2, [r1, #16]
   24974:	mov	r2, #0
   24978:	str	r6, [r0, ip, lsl #4]
   2497c:	mov	r3, #0
   24980:	ldr	ip, [sp, #96]	; 0x60
   24984:	ldr	r6, [sp, #104]	; 0x68
   24988:	strd	r2, [r1, #24]
   2498c:	mvn	r2, #0
   24990:	str	ip, [r1, #4]
   24994:	mov	r3, #0
   24998:	ldr	ip, [sp, #320]	; 0x140
   2499c:	str	r6, [r1, #8]
   249a0:	strd	r2, [r1, #32]
   249a4:	str	ip, [r1, #48]	; 0x30
   249a8:	str	ip, [r1, #52]	; 0x34
   249ac:	str	ip, [r1, #60]	; 0x3c
   249b0:	str	ip, [r1, #56]	; 0x38
   249b4:	str	ip, [r1, #64]	; 0x40
   249b8:	str	ip, [r1, #72]	; 0x48
   249bc:	str	ip, [r1, #68]	; 0x44
   249c0:	strd	r2, [r1, #40]	; 0x28
   249c4:	ldr	r6, [sp, #132]	; 0x84
   249c8:	cmp	r6, #0
   249cc:	bne	24840 <__assert_fail@plt+0x12068>
   249d0:	ldr	ip, [sp, #144]	; 0x90
   249d4:	ldr	r4, [ip]
   249d8:	cmp	r4, #0
   249dc:	bne	24840 <__assert_fail@plt+0x12068>
   249e0:	mov	r2, #5
   249e4:	movw	r1, #25172	; 0x6254
   249e8:	mov	r0, r4
   249ec:	movt	r1, #5
   249f0:	bl	12298 <dcgettext@plt>
   249f4:	ldrd	r2, [sp, #64]	; 0x40
   249f8:	str	r4, [sp]
   249fc:	mov	r1, r0
   24a00:	movw	r0, #41908	; 0xa3b4
   24a04:	movt	r0, #5
   24a08:	str	r1, [sp, #60]	; 0x3c
   24a0c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24a10:	ldr	r1, [sp, #60]	; 0x3c
   24a14:	mov	r2, r0
   24a18:	mov	r0, #1
   24a1c:	bl	125bc <__printf_chk@plt>
   24a20:	mov	r2, #5
   24a24:	mov	r0, r4
   24a28:	movw	r1, #25208	; 0x6278
   24a2c:	movt	r1, #5
   24a30:	bl	12298 <dcgettext@plt>
   24a34:	mov	r2, r8
   24a38:	mov	r3, r9
   24a3c:	str	r4, [sp]
   24a40:	mov	r1, r0
   24a44:	movw	r0, #41908	; 0xa3b4
   24a48:	movt	r0, #5
   24a4c:	str	r1, [sp, #60]	; 0x3c
   24a50:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24a54:	ldr	r6, [sp, #96]	; 0x60
   24a58:	movw	ip, #24880	; 0x6130
   24a5c:	movt	ip, #5
   24a60:	cmp	r6, #8
   24a64:	ldr	r1, [sp, #60]	; 0x3c
   24a68:	movw	r3, #24872	; 0x6128
   24a6c:	movt	r3, #5
   24a70:	movne	r3, ip
   24a74:	mov	r2, r0
   24a78:	mov	r0, #1
   24a7c:	bl	125bc <__printf_chk@plt>
   24a80:	mov	r2, #5
   24a84:	mov	r0, r4
   24a88:	movw	r1, #25240	; 0x6298
   24a8c:	movt	r1, #5
   24a90:	bl	12298 <dcgettext@plt>
   24a94:	ldr	r2, [sp, #104]	; 0x68
   24a98:	mov	r1, r0
   24a9c:	mov	r0, #1
   24aa0:	bl	125bc <__printf_chk@plt>
   24aa4:	mov	r2, #5
   24aa8:	mov	r0, r4
   24aac:	movw	r1, #25264	; 0x62b0
   24ab0:	movt	r1, #5
   24ab4:	bl	12298 <dcgettext@plt>
   24ab8:	ldrd	r2, [sp, #88]	; 0x58
   24abc:	str	r4, [sp]
   24ac0:	mov	r1, r0
   24ac4:	movw	r0, #41908	; 0xa3b4
   24ac8:	movt	r0, #5
   24acc:	str	r1, [sp, #60]	; 0x3c
   24ad0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24ad4:	ldr	r1, [sp, #60]	; 0x3c
   24ad8:	mov	r2, r0
   24adc:	mov	r0, #1
   24ae0:	bl	125bc <__printf_chk@plt>
   24ae4:	mov	r2, #5
   24ae8:	mov	r0, r4
   24aec:	movw	r1, #25288	; 0x62c8
   24af0:	movt	r1, #5
   24af4:	bl	12298 <dcgettext@plt>
   24af8:	ldr	r2, [sp, #156]	; 0x9c
   24afc:	mov	r1, r0
   24b00:	mov	r0, #1
   24b04:	bl	125bc <__printf_chk@plt>
   24b08:	ldr	ip, [sp, #320]	; 0x140
   24b0c:	cmp	ip, #0
   24b10:	bne	254a4 <__assert_fail@plt+0x12ccc>
   24b14:	ldr	r6, [sp, #76]	; 0x4c
   24b18:	cmp	r6, #0
   24b1c:	beq	24840 <__assert_fail@plt+0x12068>
   24b20:	mov	r2, #5
   24b24:	movw	r1, #25360	; 0x6310
   24b28:	mov	r0, #0
   24b2c:	movt	r1, #5
   24b30:	bl	12298 <dcgettext@plt>
   24b34:	mov	r1, r0
   24b38:	mov	r0, #1
   24b3c:	bl	125bc <__printf_chk@plt>
   24b40:	mov	r0, #0
   24b44:	mov	r2, #5
   24b48:	movw	r1, #25388	; 0x632c
   24b4c:	movt	r1, #5
   24b50:	mov	r4, r0
   24b54:	bl	12298 <dcgettext@plt>
   24b58:	ldrd	r2, [r6, #32]
   24b5c:	str	r4, [sp]
   24b60:	mov	r1, r0
   24b64:	movw	r0, #41908	; 0xa3b4
   24b68:	movt	r0, #5
   24b6c:	str	r1, [sp, #60]	; 0x3c
   24b70:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24b74:	ldr	r2, [r6, #84]	; 0x54
   24b78:	mov	r3, r4
   24b7c:	str	r4, [sp]
   24b80:	mov	ip, r0
   24b84:	movw	r0, #41908	; 0xa3b4
   24b88:	movt	r0, #5
   24b8c:	str	ip, [sp, #56]	; 0x38
   24b90:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24b94:	ldr	ip, [sp, #56]	; 0x38
   24b98:	ldr	r1, [sp, #60]	; 0x3c
   24b9c:	mov	r2, ip
   24ba0:	mov	r3, r0
   24ba4:	mov	r0, #1
   24ba8:	bl	125bc <__printf_chk@plt>
   24bac:	mov	r0, r4
   24bb0:	mov	r2, #5
   24bb4:	movw	r1, #25432	; 0x6358
   24bb8:	movt	r1, #5
   24bbc:	bl	12298 <dcgettext@plt>
   24bc0:	ldrd	r2, [r6, #40]	; 0x28
   24bc4:	str	r4, [sp]
   24bc8:	mov	r1, r0
   24bcc:	movw	r0, #41908	; 0xa3b4
   24bd0:	movt	r0, #5
   24bd4:	str	r1, [sp, #60]	; 0x3c
   24bd8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24bdc:	ldr	r2, [r6, #88]	; 0x58
   24be0:	mov	r3, r4
   24be4:	str	r4, [sp]
   24be8:	mov	ip, r0
   24bec:	movw	r0, #41908	; 0xa3b4
   24bf0:	movt	r0, #5
   24bf4:	str	ip, [sp, #56]	; 0x38
   24bf8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24bfc:	ldr	ip, [sp, #56]	; 0x38
   24c00:	ldr	r1, [sp, #60]	; 0x3c
   24c04:	mov	r2, ip
   24c08:	mov	r3, r0
   24c0c:	mov	r0, #1
   24c10:	bl	125bc <__printf_chk@plt>
   24c14:	mov	r0, r4
   24c18:	mov	r2, #5
   24c1c:	movw	r1, #25476	; 0x6384
   24c20:	movt	r1, #5
   24c24:	bl	12298 <dcgettext@plt>
   24c28:	ldrd	r2, [r6, #48]	; 0x30
   24c2c:	str	r4, [sp]
   24c30:	mov	r1, r0
   24c34:	movw	r0, #41908	; 0xa3b4
   24c38:	movt	r0, #5
   24c3c:	str	r1, [sp, #60]	; 0x3c
   24c40:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24c44:	ldr	r2, [r6, #92]	; 0x5c
   24c48:	mov	r3, r4
   24c4c:	str	r4, [sp]
   24c50:	mov	ip, r0
   24c54:	movw	r0, #41908	; 0xa3b4
   24c58:	movt	r0, #5
   24c5c:	str	ip, [sp, #56]	; 0x38
   24c60:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24c64:	ldr	ip, [sp, #56]	; 0x38
   24c68:	ldr	r1, [sp, #60]	; 0x3c
   24c6c:	mov	r2, ip
   24c70:	mov	r3, r0
   24c74:	mov	r0, #1
   24c78:	bl	125bc <__printf_chk@plt>
   24c7c:	mov	r0, r4
   24c80:	mov	r2, #5
   24c84:	movw	r1, #25520	; 0x63b0
   24c88:	movt	r1, #5
   24c8c:	bl	12298 <dcgettext@plt>
   24c90:	ldrd	r2, [r6, #56]	; 0x38
   24c94:	str	r4, [sp]
   24c98:	mov	r1, r0
   24c9c:	movw	r0, #41908	; 0xa3b4
   24ca0:	movt	r0, #5
   24ca4:	str	r1, [sp, #60]	; 0x3c
   24ca8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24cac:	ldr	r2, [r6, #96]	; 0x60
   24cb0:	mov	r3, r4
   24cb4:	str	r4, [sp]
   24cb8:	mov	ip, r0
   24cbc:	movw	r0, #41908	; 0xa3b4
   24cc0:	movt	r0, #5
   24cc4:	str	ip, [sp, #56]	; 0x38
   24cc8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   24ccc:	ldr	ip, [sp, #56]	; 0x38
   24cd0:	ldr	r1, [sp, #60]	; 0x3c
   24cd4:	mov	r2, ip
   24cd8:	mov	r3, r0
   24cdc:	mov	r0, #1
   24ce0:	bl	125bc <__printf_chk@plt>
   24ce4:	b	24840 <__assert_fail@plt+0x12068>
   24ce8:	ldr	r1, [sp, #96]	; 0x60
   24cec:	sub	r3, r1, #1
   24cf0:	cmp	r3, #7
   24cf4:	bhi	24718 <__assert_fail@plt+0x11f40>
   24cf8:	ldr	r6, [sp, #164]	; 0xa4
   24cfc:	mov	r0, r5
   24d00:	ldr	r3, [r6]
   24d04:	blx	r3
   24d08:	ldr	r7, [sp, #76]	; 0x4c
   24d0c:	cmp	r7, #0
   24d10:	strd	r0, [sp, #88]	; 0x58
   24d14:	bne	24730 <__assert_fail@plt+0x11f58>
   24d18:	ldr	r6, [sp, #176]	; 0xb0
   24d1c:	add	r5, r4, #1
   24d20:	ldr	ip, [sp, #148]	; 0x94
   24d24:	cmp	fp, r5
   24d28:	mov	r7, #0
   24d2c:	add	r3, ip, r6
   24d30:	mov	r6, #0
   24d34:	strd	r6, [sp, #112]	; 0x70
   24d38:	ldr	r7, [r3, #24]
   24d3c:	bls	24750 <__assert_fail@plt+0x11f78>
   24d40:	mov	r1, #1
   24d44:	ldr	r6, [sp, #164]	; 0xa4
   24d48:	mov	r0, r4
   24d4c:	ldr	r3, [r6]
   24d50:	blx	r3
   24d54:	uxtb	r0, r0
   24d58:	str	r0, [sp, #156]	; 0x9c
   24d5c:	sub	r3, r0, #2
   24d60:	cmp	r3, #6
   24d64:	movhi	r3, r0
   24d68:	bhi	2476c <__assert_fail@plt+0x11f94>
   24d6c:	ldr	r6, [sp, #320]	; 0x140
   24d70:	cmp	r6, #0
   24d74:	bne	247ac <__assert_fail@plt+0x11fd4>
   24d78:	mov	r0, #0
   24d7c:	mov	r1, #0
   24d80:	strd	r0, [sp, #120]	; 0x78
   24d84:	b	247fc <__assert_fail@plt+0x12024>
   24d88:	movw	r7, #3472	; 0xd90
   24d8c:	movt	r7, #7
   24d90:	mov	r8, #0
   24d94:	mov	r9, #0
   24d98:	mov	r1, #2
   24d9c:	ldr	r3, [r7]
   24da0:	mov	r0, r4
   24da4:	blx	r3
   24da8:	uxth	r0, r0
   24dac:	str	r0, [sp, #104]	; 0x68
   24db0:	b	24668 <__assert_fail@plt+0x11e90>
   24db4:	ldr	r0, [r7, #1596]	; 0x63c
   24db8:	mov	ip, #1
   24dbc:	ldr	r1, [r7, #1600]	; 0x640
   24dc0:	b	2469c <__assert_fail@plt+0x11ec4>
   24dc4:	mov	r5, lr
   24dc8:	str	r6, [sp, #152]	; 0x98
   24dcc:	str	r0, [sp, #76]	; 0x4c
   24dd0:	b	246fc <__assert_fail@plt+0x11f24>
   24dd4:	bl	1ab04 <__assert_fail@plt+0x832c>
   24dd8:	ldrd	r2, [sp, #88]	; 0x58
   24ddc:	mov	r0, r7
   24de0:	mov	r1, #0
   24de4:	cmp	r3, r1
   24de8:	cmpeq	r2, r0
   24dec:	bcs	25438 <__assert_fail@plt+0x12c60>
   24df0:	ldr	ip, [sp, #148]	; 0x94
   24df4:	ldr	r6, [sp, #176]	; 0xb0
   24df8:	ldrd	r2, [sp, #112]	; 0x70
   24dfc:	add	r4, ip, r6
   24e00:	adds	r0, r7, r2
   24e04:	adc	r1, r1, r3
   24e08:	ldrd	r2, [r4, #24]
   24e0c:	cmp	r1, r3
   24e10:	cmpeq	r0, r2
   24e14:	bhi	2552c <__assert_fail@plt+0x12d54>
   24e18:	ldr	r6, [sp, #136]	; 0x88
   24e1c:	ldr	r2, [r4, #12]
   24e20:	ldr	r3, [r6, #4]
   24e24:	cmp	r3, #0
   24e28:	beq	256bc <__assert_fail@plt+0x12ee4>
   24e2c:	ldr	r6, [sp, #100]	; 0x64
   24e30:	cmp	r6, r5
   24e34:	bls	248e0 <__assert_fail@plt+0x12108>
   24e38:	ldr	r6, [sp, #108]	; 0x6c
   24e3c:	mov	r7, #0
   24e40:	ldr	r9, [sp, #136]	; 0x88
   24e44:	mvn	ip, #0
   24e48:	str	r7, [sp, #168]	; 0xa8
   24e4c:	add	r3, r6, r6, lsl #2
   24e50:	str	r7, [sp, #112]	; 0x70
   24e54:	str	ip, [sp, #172]	; 0xac
   24e58:	lsl	r3, r3, #4
   24e5c:	str	fp, [sp, #80]	; 0x50
   24e60:	str	r3, [sp, #120]	; 0x78
   24e64:	mov	r0, r5
   24e68:	ldr	r3, [sp, #100]	; 0x64
   24e6c:	add	r1, sp, #188	; 0xbc
   24e70:	mov	r2, #0
   24e74:	bl	1c634 <__assert_fail@plt+0x9e5c>
   24e78:	ldr	r3, [sp, #188]	; 0xbc
   24e7c:	ldr	r7, [sp, #128]	; 0x80
   24e80:	rsb	r6, r7, r5
   24e84:	add	r5, r5, r3
   24e88:	subs	r4, r0, #0
   24e8c:	bne	24fa0 <__assert_fail@plt+0x127c8>
   24e90:	ldr	ip, [sp, #112]	; 0x70
   24e94:	ldr	r7, [sp, #100]	; 0x64
   24e98:	ldr	r0, [sp, #80]	; 0x50
   24e9c:	cmp	ip, #0
   24ea0:	cmpeq	r7, r0
   24ea4:	bne	24ef0 <__assert_fail@plt+0x12718>
   24ea8:	cmp	r7, r5
   24eac:	bls	25554 <__assert_fail@plt+0x12d7c>
   24eb0:	ldrb	r3, [r5]
   24eb4:	cmp	r3, #0
   24eb8:	bne	25554 <__assert_fail@plt+0x12d7c>
   24ebc:	add	r3, r5, #1
   24ec0:	mov	r0, r7
   24ec4:	b	24ed8 <__assert_fail@plt+0x12700>
   24ec8:	ldrb	r1, [r2]
   24ecc:	add	r3, r3, #1
   24ed0:	cmp	r1, #0
   24ed4:	bne	24ee4 <__assert_fail@plt+0x1270c>
   24ed8:	cmp	r3, r0
   24edc:	mov	r2, r3
   24ee0:	bne	24ec8 <__assert_fail@plt+0x126f0>
   24ee4:	ldr	r7, [sp, #100]	; 0x64
   24ee8:	cmp	r2, r7
   24eec:	beq	24f98 <__assert_fail@plt+0x127c0>
   24ef0:	ldr	ip, [sp, #132]	; 0x84
   24ef4:	cmp	ip, #0
   24ef8:	movwne	r4, #3464	; 0xd88
   24efc:	movtne	r4, #7
   24f00:	bne	24f60 <__assert_fail@plt+0x12788>
   24f04:	ldr	r7, [sp, #144]	; 0x90
   24f08:	movw	r4, #3464	; 0xd88
   24f0c:	movt	r4, #7
   24f10:	ldr	r3, [r7]
   24f14:	cmp	r6, r3
   24f18:	bcc	24f60 <__assert_fail@plt+0x12788>
   24f1c:	ldr	ip, [sp, #148]	; 0x94
   24f20:	ldr	r3, [ip, #2304]	; 0x900
   24f24:	cmn	r3, #1
   24f28:	beq	24f38 <__assert_fail@plt+0x12760>
   24f2c:	ldr	r7, [sp, #112]	; 0x70
   24f30:	cmp	r3, r7
   24f34:	ble	24f60 <__assert_fail@plt+0x12788>
   24f38:	mov	r2, #5
   24f3c:	movw	r1, #25968	; 0x6570
   24f40:	mov	r0, #0
   24f44:	movt	r1, #5
   24f48:	bl	12298 <dcgettext@plt>
   24f4c:	ldr	r2, [sp, #112]	; 0x70
   24f50:	mov	r3, r6
   24f54:	mov	r1, r0
   24f58:	mov	r0, #1
   24f5c:	bl	125bc <__printf_chk@plt>
   24f60:	ldr	ip, [sp, #112]	; 0x70
   24f64:	subs	ip, ip, #1
   24f68:	str	ip, [sp, #112]	; 0x70
   24f6c:	bmi	25298 <__assert_fail@plt+0x12ac0>
   24f70:	ldr	r3, [r4]
   24f74:	cmp	r3, #0
   24f78:	beq	24f8c <__assert_fail@plt+0x127b4>
   24f7c:	ldr	r7, [sp, #172]	; 0xac
   24f80:	ldr	ip, [sp, #112]	; 0x70
   24f84:	cmp	r7, ip
   24f88:	bgt	25378 <__assert_fail@plt+0x12ba0>
   24f8c:	ldr	r7, [sp, #100]	; 0x64
   24f90:	cmp	r7, r5
   24f94:	bhi	24e64 <__assert_fail@plt+0x1268c>
   24f98:	ldr	fp, [sp, #80]	; 0x50
   24f9c:	b	248e0 <__assert_fail@plt+0x12108>
   24fa0:	ldr	r7, [sp, #132]	; 0x84
   24fa4:	cmp	r7, #0
   24fa8:	movne	fp, #0
   24fac:	movne	r8, #1
   24fb0:	bne	24fd4 <__assert_fail@plt+0x127fc>
   24fb4:	ldr	ip, [sp, #144]	; 0x90
   24fb8:	ldr	r3, [ip]
   24fbc:	cmp	r3, #0
   24fc0:	beq	25220 <__assert_fail@plt+0x12a48>
   24fc4:	cmp	r6, r3
   24fc8:	bcs	25218 <__assert_fail@plt+0x12a40>
   24fcc:	ldr	fp, [sp, #132]	; 0x84
   24fd0:	mov	r8, fp
   24fd4:	ldr	r7, [r9, #4]
   24fd8:	cmp	r7, #0
   24fdc:	beq	24ff8 <__assert_fail@plt+0x12820>
   24fe0:	ldr	r3, [r7]
   24fe4:	cmp	r3, r4
   24fe8:	beq	25028 <__assert_fail@plt+0x12850>
   24fec:	ldr	r7, [r7, #20]
   24ff0:	cmp	r7, #0
   24ff4:	bne	24fe0 <__assert_fail@plt+0x12808>
   24ff8:	cmp	fp, #0
   24ffc:	bne	256dc <__assert_fail@plt+0x12f04>
   25000:	mov	r2, #5
   25004:	movw	r1, #26152	; 0x6628
   25008:	mov	r0, #0
   2500c:	movt	r1, #5
   25010:	bl	12298 <dcgettext@plt>
   25014:	mov	r1, r6
   25018:	mov	r2, r4
   2501c:	bl	49bf8 <warn@@Base>
   25020:	mov	r0, #0
   25024:	b	243f4 <__assert_fail@plt+0x11c1c>
   25028:	cmp	fp, #0
   2502c:	bne	25278 <__assert_fail@plt+0x12aa0>
   25030:	ldr	r3, [r7, #4]
   25034:	cmp	r3, #17
   25038:	beq	2526c <__assert_fail@plt+0x12a94>
   2503c:	cmp	r3, #46	; 0x2e
   25040:	beq	2525c <__assert_fail@plt+0x12a84>
   25044:	cmp	r3, #3
   25048:	beq	2525c <__assert_fail@plt+0x12a84>
   2504c:	mov	r3, #0
   25050:	str	r3, [r9, #1576]	; 0x628
   25054:	ldr	r4, [r7, #12]
   25058:	cmp	r4, #0
   2505c:	beq	25200 <__assert_fail@plt+0x12a28>
   25060:	ldr	r3, [r4]
   25064:	cmp	r3, #0
   25068:	beq	25200 <__assert_fail@plt+0x12a28>
   2506c:	ldr	r0, [sp, #156]	; 0x9c
   25070:	eor	r8, r8, #1
   25074:	ldr	r6, [sp, #132]	; 0x84
   25078:	and	r8, r8, #1
   2507c:	mov	r1, #0
   25080:	str	r7, [sp, #152]	; 0x98
   25084:	uxtb	r0, r0
   25088:	cmp	r6, #0
   2508c:	orrne	r8, r8, #1
   25090:	strd	r0, [sp, #88]	; 0x58
   25094:	b	25140 <__assert_fail@plt+0x12968>
   25098:	ldr	ip, [r9, #1580]	; 0x62c
   2509c:	cmp	ip, #0
   250a0:	beq	250bc <__assert_fail@plt+0x128e4>
   250a4:	ldr	r3, [sl, #1584]	; 0x630
   250a8:	ldr	r6, [sp, #108]	; 0x6c
   250ac:	cmp	r6, r3
   250b0:	ldrcc	r7, [sp, #120]	; 0x78
   250b4:	movcs	ip, #0
   250b8:	addcc	ip, ip, r7
   250bc:	cmp	r8, #0
   250c0:	ldr	r6, [r4]
   250c4:	ldr	r3, [r4, #4]
   250c8:	beq	25164 <__assert_fail@plt+0x1298c>
   250cc:	ldrd	r0, [sp, #64]	; 0x40
   250d0:	mov	r2, r5
   250d4:	str	ip, [sp, #28]
   250d8:	mov	lr, #0
   250dc:	ldr	ip, [sp, #140]	; 0x8c
   250e0:	strd	r0, [sp]
   250e4:	mov	r0, r6
   250e8:	ldrd	r6, [sp, #88]	; 0x58
   250ec:	mov	r1, r3
   250f0:	str	lr, [sp, #20]
   250f4:	ldr	r3, [sp, #80]	; 0x50
   250f8:	strd	r6, [sp, #8]
   250fc:	ldr	r6, [sp, #104]	; 0x68
   25100:	ldr	r7, [sp, #96]	; 0x60
   25104:	str	ip, [sp, #36]	; 0x24
   25108:	str	r6, [sp, #24]
   2510c:	ldr	r6, [sp, #76]	; 0x4c
   25110:	str	r7, [sp, #16]
   25114:	mov	r7, #1
   25118:	str	r7, [sp, #32]
   2511c:	str	r6, [sp, #40]	; 0x28
   25120:	bl	21b34 <__assert_fail@plt+0xf35c>
   25124:	ldr	r4, [r4, #8]
   25128:	cmp	r4, #0
   2512c:	mov	r5, r0
   25130:	beq	251fc <__assert_fail@plt+0x12a24>
   25134:	ldr	r3, [r4]
   25138:	cmp	r3, #0
   2513c:	beq	251fc <__assert_fail@plt+0x12a24>
   25140:	cmp	fp, #0
   25144:	beq	25098 <__assert_fail@plt+0x128c0>
   25148:	ldr	r7, [sp, #128]	; 0x80
   2514c:	movw	r1, #26236	; 0x667c
   25150:	mov	r0, #1
   25154:	movt	r1, #5
   25158:	rsb	r2, r7, r5
   2515c:	bl	125bc <__printf_chk@plt>
   25160:	b	25098 <__assert_fail@plt+0x128c0>
   25164:	mov	r0, r6
   25168:	str	r3, [sp, #60]	; 0x3c
   2516c:	str	ip, [sp, #56]	; 0x38
   25170:	bl	1c2f4 <__assert_fail@plt+0x9b1c>
   25174:	movw	r1, #26248	; 0x6688
   25178:	movt	r1, #5
   2517c:	mov	r7, #0
   25180:	mov	r2, r0
   25184:	mov	r0, #1
   25188:	bl	125bc <__printf_chk@plt>
   2518c:	ldrd	r0, [sp, #64]	; 0x40
   25190:	ldr	ip, [sp, #56]	; 0x38
   25194:	mov	r2, r5
   25198:	ldr	r3, [sp, #60]	; 0x3c
   2519c:	strd	r0, [sp]
   251a0:	ldrd	r0, [sp, #88]	; 0x58
   251a4:	str	r7, [sp, #20]
   251a8:	str	ip, [sp, #28]
   251ac:	strd	r0, [sp, #8]
   251b0:	mov	r0, r6
   251b4:	ldr	r6, [sp, #96]	; 0x60
   251b8:	mov	r1, r3
   251bc:	ldr	ip, [sp, #76]	; 0x4c
   251c0:	ldr	r7, [sp, #140]	; 0x8c
   251c4:	str	r6, [sp, #16]
   251c8:	ldr	r6, [sp, #104]	; 0x68
   251cc:	ldr	r3, [sp, #80]	; 0x50
   251d0:	str	ip, [sp, #40]	; 0x28
   251d4:	str	r6, [sp, #24]
   251d8:	str	r8, [sp, #32]
   251dc:	str	r7, [sp, #36]	; 0x24
   251e0:	bl	21b34 <__assert_fail@plt+0xf35c>
   251e4:	mov	r5, r0
   251e8:	mov	r0, #10
   251ec:	bl	1258c <putchar@plt>
   251f0:	ldr	r4, [r4, #8]
   251f4:	cmp	r4, #0
   251f8:	bne	25134 <__assert_fail@plt+0x1295c>
   251fc:	ldr	r7, [sp, #152]	; 0x98
   25200:	ldr	r3, [r7, #8]
   25204:	cmp	r3, #0
   25208:	ldrne	r6, [sp, #112]	; 0x70
   2520c:	addne	r6, r6, #1
   25210:	strne	r6, [sp, #112]	; 0x70
   25214:	b	24f8c <__assert_fail@plt+0x127b4>
   25218:	ldreq	r7, [sp, #112]	; 0x70
   2521c:	streq	r7, [sp, #172]	; 0xac
   25220:	ldr	ip, [sp, #148]	; 0x94
   25224:	ldr	r3, [ip, #2304]	; 0x900
   25228:	cmn	r3, #1
   2522c:	beq	252f8 <__assert_fail@plt+0x12b20>
   25230:	ldr	r7, [sp, #112]	; 0x70
   25234:	cmp	r3, r7
   25238:	bgt	252f8 <__assert_fail@plt+0x12b20>
   2523c:	ldr	ip, [sp, #168]	; 0xa8
   25240:	cmp	ip, r3
   25244:	blt	253c4 <__assert_fail@plt+0x12bec>
   25248:	ldr	r7, [sp, #112]	; 0x70
   2524c:	mov	fp, #0
   25250:	mov	r8, fp
   25254:	str	r7, [sp, #168]	; 0xa8
   25258:	b	24fd4 <__assert_fail@plt+0x127fc>
   2525c:	mov	r3, #0
   25260:	str	r3, [r9, #1576]	; 0x628
   25264:	str	r3, [r9, #1572]	; 0x624
   25268:	b	25054 <__assert_fail@plt+0x1287c>
   2526c:	mov	r3, #1
   25270:	str	r3, [r9, #1576]	; 0x628
   25274:	b	25054 <__assert_fail@plt+0x1287c>
   25278:	ldr	r0, [r7, #4]
   2527c:	bl	1c294 <__assert_fail@plt+0x9abc>
   25280:	movw	r1, #26228	; 0x6674
   25284:	movt	r1, #5
   25288:	mov	r2, r0
   2528c:	mov	r0, #1
   25290:	bl	125bc <__printf_chk@plt>
   25294:	b	25030 <__assert_fail@plt+0x12858>
   25298:	ldr	r3, [r9, #1604]	; 0x644
   2529c:	cmp	r3, #2
   252a0:	bhi	24f70 <__assert_fail@plt+0x12798>
   252a4:	mov	r2, #5
   252a8:	movw	r1, #26000	; 0x6590
   252ac:	mov	r0, #0
   252b0:	movt	r1, #5
   252b4:	bl	12298 <dcgettext@plt>
   252b8:	mov	r1, r6
   252bc:	ldr	r6, [sp, #140]	; 0x8c
   252c0:	ldr	r2, [r6, #8]
   252c4:	bl	49bf8 <warn@@Base>
   252c8:	ldr	r3, [sl, #1604]	; 0x644
   252cc:	add	r3, r3, #1
   252d0:	str	r3, [sl, #1604]	; 0x644
   252d4:	cmp	r3, #3
   252d8:	bne	24f70 <__assert_fail@plt+0x12798>
   252dc:	mov	r2, #5
   252e0:	movw	r1, #26068	; 0x65d4
   252e4:	mov	r0, #0
   252e8:	movt	r1, #5
   252ec:	bl	12298 <dcgettext@plt>
   252f0:	bl	49bf8 <warn@@Base>
   252f4:	b	24f70 <__assert_fail@plt+0x12798>
   252f8:	mov	r2, #5
   252fc:	movw	r1, #26260	; 0x6694
   25300:	mov	r0, #0
   25304:	movt	r1, #5
   25308:	bl	12298 <dcgettext@plt>
   2530c:	str	r4, [sp]
   25310:	ldr	r2, [sp, #112]	; 0x70
   25314:	mov	r3, r6
   25318:	mov	r1, r0
   2531c:	mov	r0, #1
   25320:	mov	fp, r0
   25324:	bl	125bc <__printf_chk@plt>
   25328:	ldr	r7, [sp, #112]	; 0x70
   2532c:	mov	r8, fp
   25330:	str	r7, [sp, #168]	; 0xa8
   25334:	b	24fd4 <__assert_fail@plt+0x127fc>
   25338:	movw	r3, #1240	; 0x4d8
   2533c:	movt	r3, #7
   25340:	ldr	r2, [r3, #1568]	; 0x620
   25344:	cmp	r2, #0
   25348:	bne	2536c <__assert_fail@plt+0x12b94>
   2534c:	ldr	ip, [sp, #320]	; 0x140
   25350:	cmp	ip, #0
   25354:	bne	2536c <__assert_fail@plt+0x12b94>
   25358:	ldr	r2, [r3, #1584]	; 0x630
   2535c:	ldr	r6, [sp, #180]	; 0xb4
   25360:	cmp	r2, r6
   25364:	strls	r2, [r3, #1568]	; 0x620
   25368:	strhi	r6, [r3, #1568]	; 0x620
   2536c:	ldr	r7, [sp, #132]	; 0x84
   25370:	cmp	r7, #0
   25374:	beq	2492c <__assert_fail@plt+0x12154>
   25378:	mov	r0, #1
   2537c:	b	243f4 <__assert_fail@plt+0x11c1c>
   25380:	mov	r2, #5
   25384:	movw	r1, #25656	; 0x6438
   25388:	mov	r0, #0
   2538c:	movt	r1, #5
   25390:	bl	12298 <dcgettext@plt>
   25394:	mov	r3, #0
   25398:	str	r3, [sp]
   2539c:	ldrd	r2, [sp, #64]	; 0x40
   253a0:	str	fp, [sp, #100]	; 0x64
   253a4:	mov	r4, r0
   253a8:	movw	r0, #41908	; 0xa3b4
   253ac:	movt	r0, #5
   253b0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   253b4:	mov	r1, r0
   253b8:	mov	r0, r4
   253bc:	bl	49bf8 <warn@@Base>
   253c0:	b	24890 <__assert_fail@plt+0x120b8>
   253c4:	mov	r2, #5
   253c8:	movw	r1, #26132	; 0x6614
   253cc:	mov	r0, #0
   253d0:	movt	r1, #5
   253d4:	bl	12298 <dcgettext@plt>
   253d8:	mov	fp, #0
   253dc:	ldr	r2, [sp, #112]	; 0x70
   253e0:	mov	r3, r6
   253e4:	mov	r8, fp
   253e8:	mov	r1, r0
   253ec:	mov	r0, #1
   253f0:	bl	125bc <__printf_chk@plt>
   253f4:	str	r7, [sp, #168]	; 0xa8
   253f8:	b	24fd4 <__assert_fail@plt+0x127fc>
   253fc:	ldr	r1, [sp, #96]	; 0x60
   25400:	sub	r3, r1, #1
   25404:	cmp	r3, #7
   25408:	bhi	247f0 <__assert_fail@plt+0x12018>
   2540c:	ldr	r6, [sp, #164]	; 0xa4
   25410:	mov	r0, r4
   25414:	ldr	r3, [r6]
   25418:	blx	r3
   2541c:	strd	r0, [sp, #120]	; 0x78
   25420:	b	247fc <__assert_fail@plt+0x12024>
   25424:	mov	r0, r5
   25428:	add	r1, sp, #192	; 0xc0
   2542c:	add	r2, sp, #200	; 0xc8
   25430:	bl	4a1b0 <warn@@Base+0x5b8>
   25434:	b	247c8 <__assert_fail@plt+0x11ff0>
   25438:	mov	r2, #5
   2543c:	movw	r1, #25792	; 0x64c0
   25440:	mov	r0, #0
   25444:	movt	r1, #5
   25448:	bl	12298 <dcgettext@plt>
   2544c:	ldr	r1, [sp, #88]	; 0x58
   25450:	mov	r2, r7
   25454:	bl	49bf8 <warn@@Base>
   25458:	b	24e2c <__assert_fail@plt+0x12654>
   2545c:	mov	r6, #4
   25460:	mov	r0, #4
   25464:	mov	r1, #0
   25468:	str	r6, [sp, #152]	; 0x98
   2546c:	strd	r0, [sp, #80]	; 0x50
   25470:	str	r6, [sp, #96]	; 0x60
   25474:	b	24634 <__assert_fail@plt+0x11e5c>
   25478:	str	r3, [sp, #180]	; 0xb4
   2547c:	b	24220 <__assert_fail@plt+0x11a48>
   25480:	mov	r7, #0
   25484:	mov	r6, #12
   25488:	mov	ip, #8
   2548c:	strd	r6, [sp, #80]	; 0x50
   25490:	mov	r4, r2
   25494:	mov	r7, #12
   25498:	str	ip, [sp, #96]	; 0x60
   2549c:	str	r7, [sp, #152]	; 0x98
   254a0:	b	24500 <__assert_fail@plt+0x11d28>
   254a4:	mov	r0, r4
   254a8:	mov	r2, #5
   254ac:	movw	r1, #25312	; 0x62e0
   254b0:	movt	r1, #5
   254b4:	bl	12298 <dcgettext@plt>
   254b8:	add	r3, sp, #212	; 0xd4
   254bc:	str	r3, [sp]
   254c0:	ldrd	r2, [sp, #200]	; 0xc8
   254c4:	mov	ip, r0
   254c8:	ldrd	r0, [sp, #192]	; 0xc0
   254cc:	str	ip, [sp, #56]	; 0x38
   254d0:	bl	1c590 <__assert_fail@plt+0x9db8>
   254d4:	ldr	ip, [sp, #56]	; 0x38
   254d8:	mov	r1, ip
   254dc:	mov	r2, r0
   254e0:	mov	r0, #1
   254e4:	bl	125bc <__printf_chk@plt>
   254e8:	mov	r0, r4
   254ec:	mov	r2, #5
   254f0:	movw	r1, #25336	; 0x62f8
   254f4:	movt	r1, #5
   254f8:	bl	12298 <dcgettext@plt>
   254fc:	ldrd	r2, [sp, #120]	; 0x78
   25500:	str	r4, [sp]
   25504:	mov	r1, r0
   25508:	movw	r0, #41908	; 0xa3b4
   2550c:	movt	r0, #5
   25510:	str	r1, [sp, #60]	; 0x3c
   25514:	bl	1acc4 <__assert_fail@plt+0x84ec>
   25518:	ldr	r1, [sp, #60]	; 0x3c
   2551c:	mov	r2, r0
   25520:	mov	r0, #1
   25524:	bl	125bc <__printf_chk@plt>
   25528:	b	24b14 <__assert_fail@plt+0x1233c>
   2552c:	mov	r2, #5
   25530:	movw	r1, #25880	; 0x6518
   25534:	mov	r0, #0
   25538:	movt	r1, #5
   2553c:	bl	12298 <dcgettext@plt>
   25540:	ldr	r3, [sp, #112]	; 0x70
   25544:	ldr	r2, [r4, #24]
   25548:	add	r1, r7, r3
   2554c:	bl	49bf8 <warn@@Base>
   25550:	b	24e2c <__assert_fail@plt+0x12654>
   25554:	mov	r2, r5
   25558:	b	24ee4 <__assert_fail@plt+0x1270c>
   2555c:	mov	r2, #5
   25560:	movw	r1, #15452	; 0x3c5c
   25564:	movt	r1, #5
   25568:	bl	12298 <dcgettext@plt>
   2556c:	ldr	ip, [sp, #140]	; 0x8c
   25570:	ldr	r2, [ip, #8]
   25574:	mov	r1, r0
   25578:	mov	r0, #1
   2557c:	bl	125bc <__printf_chk@plt>
   25580:	b	24440 <__assert_fail@plt+0x11c68>
   25584:	mov	r4, r0
   25588:	mov	r5, r1
   2558c:	b	243a8 <__assert_fail@plt+0x11bd0>
   25590:	str	r1, [sp, #76]	; 0x4c
   25594:	b	246fc <__assert_fail@plt+0x11f24>
   25598:	add	r5, r4, r4, lsl #2
   2559c:	movw	r4, #1240	; 0x4d8
   255a0:	movt	r4, #7
   255a4:	lsl	r5, r5, #4
   255a8:	mov	r0, r5
   255ac:	bl	12358 <xmalloc@plt>
   255b0:	ldr	ip, [sp, #136]	; 0x88
   255b4:	cmp	r0, #0
   255b8:	str	r0, [ip, #1580]	; 0x62c
   255bc:	beq	24584 <__assert_fail@plt+0x11dac>
   255c0:	mov	r2, r5
   255c4:	mov	r1, #0
   255c8:	bl	12580 <memset@plt>
   255cc:	ldr	ip, [sp, #180]	; 0xb4
   255d0:	str	ip, [r4, #1584]	; 0x630
   255d4:	b	24220 <__assert_fail@plt+0x11a48>
   255d8:	mov	r4, r0
   255dc:	mov	r5, r1
   255e0:	mov	r2, #5
   255e4:	movw	r1, #24920	; 0x6158
   255e8:	mov	r0, #0
   255ec:	movt	r1, #5
   255f0:	bl	12298 <dcgettext@plt>
   255f4:	mov	r2, r4
   255f8:	mov	r3, r5
   255fc:	mov	r4, #0
   25600:	str	r4, [sp]
   25604:	mov	r6, r0
   25608:	movw	r0, #41908	; 0xa3b4
   2560c:	movt	r0, #5
   25610:	bl	1acc4 <__assert_fail@plt+0x84ec>
   25614:	mov	r1, r0
   25618:	mov	r0, r6
   2561c:	ldr	r6, [sp, #140]	; 0x8c
   25620:	ldr	r2, [r6, #8]
   25624:	bl	49bf8 <warn@@Base>
   25628:	mov	r0, r4
   2562c:	b	243f4 <__assert_fail@plt+0x11c1c>
   25630:	mov	r2, #5
   25634:	movw	r1, #25564	; 0x63dc
   25638:	mov	r0, #0
   2563c:	movt	r1, #5
   25640:	bl	12298 <dcgettext@plt>
   25644:	ldr	r6, [sp, #108]	; 0x6c
   25648:	ldrd	r2, [sp, #64]	; 0x40
   2564c:	mov	r5, #0
   25650:	str	r5, [sp]
   25654:	str	r6, [sp, #180]	; 0xb4
   25658:	mov	r4, r0
   2565c:	movw	r0, #41908	; 0xa3b4
   25660:	movt	r0, #5
   25664:	bl	1acc4 <__assert_fail@plt+0x84ec>
   25668:	mov	r2, r8
   2566c:	str	r5, [sp]
   25670:	mov	r3, r9
   25674:	mov	r6, r0
   25678:	movw	r0, #41908	; 0xa3b4
   2567c:	movt	r0, #5
   25680:	bl	1acc4 <__assert_fail@plt+0x84ec>
   25684:	mov	r1, r6
   25688:	mov	r2, r0
   2568c:	mov	r0, r4
   25690:	bl	49bf8 <warn@@Base>
   25694:	b	248f8 <__assert_fail@plt+0x12120>
   25698:	mov	r2, #5
   2569c:	movw	r1, #25076	; 0x61f4
   256a0:	mov	r0, r5
   256a4:	movt	r1, #5
   256a8:	bl	12298 <dcgettext@plt>
   256ac:	ldr	r1, [r4, #8]
   256b0:	bl	49bf8 <warn@@Base>
   256b4:	mov	r0, r5
   256b8:	b	243f4 <__assert_fail@plt+0x11c1c>
   256bc:	ldr	lr, [sp, #112]	; 0x70
   256c0:	ldr	ip, [sp, #88]	; 0x58
   256c4:	add	r1, r7, lr
   256c8:	add	r0, lr, ip
   256cc:	add	r1, r2, r1
   256d0:	add	r0, r2, r0
   256d4:	bl	1c760 <__assert_fail@plt+0x9f88>
   256d8:	b	24e2c <__assert_fail@plt+0x12654>
   256dc:	mov	r0, #10
   256e0:	bl	1258c <putchar@plt>
   256e4:	movw	r3, #976	; 0x3d0
   256e8:	movt	r3, #7
   256ec:	ldr	r0, [r3]
   256f0:	bl	121b4 <fflush@plt>
   256f4:	b	25000 <__assert_fail@plt+0x12828>
   256f8:	mov	r2, #5
   256fc:	movw	r1, #24888	; 0x6138
   25700:	mov	r0, #0
   25704:	movt	r1, #5
   25708:	bl	12298 <dcgettext@plt>
   2570c:	ldr	r6, [sp, #140]	; 0x8c
   25710:	ldr	r1, [r6, #8]
   25714:	bl	494bc <error@@Base>
   25718:	mov	r0, #0
   2571c:	b	243f4 <__assert_fail@plt+0x11c1c>
   25720:	bl	122b0 <__stack_chk_fail@plt>
   25724:	push	{lr}		; (str lr, [sp, #-4]!)
   25728:	sub	sp, sp, #12
   2572c:	mov	ip, #0
   25730:	ldr	r2, [r0, #32]
   25734:	mov	r3, ip
   25738:	str	ip, [sp]
   2573c:	bl	241a4 <__assert_fail@plt+0x119cc>
   25740:	add	sp, sp, #12
   25744:	pop	{pc}		; (ldr pc, [sp], #4)
   25748:	push	{lr}		; (str lr, [sp, #-4]!)
   2574c:	sub	sp, sp, #12
   25750:	ldr	r2, [r0, #32]
   25754:	mov	ip, #1
   25758:	mov	r3, #0
   2575c:	str	ip, [sp]
   25760:	bl	241a4 <__assert_fail@plt+0x119cc>
   25764:	add	sp, sp, #12
   25768:	pop	{pc}		; (ldr pc, [sp], #4)
   2576c:	push	{lr}		; (str lr, [sp, #-4]!)
   25770:	sub	sp, sp, #12
   25774:	mov	ip, #0
   25778:	ldr	r2, [r0, #32]
   2577c:	mov	r3, ip
   25780:	str	ip, [sp]
   25784:	bl	241a4 <__assert_fail@plt+0x119cc>
   25788:	add	sp, sp, #12
   2578c:	pop	{pc}		; (ldr pc, [sp], #4)
   25790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25794:	sub	sp, sp, #1168	; 0x490
   25798:	sub	sp, sp, #12
   2579c:	movw	r4, #65176	; 0xfe98
   257a0:	movt	r4, #6
   257a4:	str	r4, [sp, #108]	; 0x6c
   257a8:	mov	r4, r1
   257ac:	str	r0, [sp, #120]	; 0x78
   257b0:	mov	r0, #10
   257b4:	ldr	r5, [sp, #108]	; 0x6c
   257b8:	ldr	ip, [sp, #120]	; 0x78
   257bc:	ldr	r2, [r5]
   257c0:	ldr	r6, [ip, #12]
   257c4:	ldr	r3, [ip, #24]
   257c8:	str	r2, [sp, #1172]	; 0x494
   257cc:	add	fp, r6, r3
   257d0:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   257d4:	mov	r1, r4
   257d8:	mov	r0, #4
   257dc:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   257e0:	mov	r2, #5
   257e4:	movw	r1, #15452	; 0x3c5c
   257e8:	mov	r0, #0
   257ec:	movt	r1, #5
   257f0:	bl	12298 <dcgettext@plt>
   257f4:	ldr	r4, [sp, #120]	; 0x78
   257f8:	ldr	r2, [r4, #8]
   257fc:	mov	r1, r0
   25800:	mov	r0, #1
   25804:	bl	125bc <__printf_chk@plt>
   25808:	cmp	r6, fp
   2580c:	bcs	2588c <__assert_fail@plt+0x130b4>
   25810:	movw	r8, #3472	; 0xd90
   25814:	movt	r8, #7
   25818:	mov	r9, fp
   2581c:	str	r6, [sp, #124]	; 0x7c
   25820:	mov	r7, r8
   25824:	add	r4, r6, #2
   25828:	ldr	ip, [sp, #124]	; 0x7c
   2582c:	cmp	r9, r4
   25830:	rsb	r5, ip, r6
   25834:	bhi	25894 <__assert_fail@plt+0x130bc>
   25838:	cmp	r9, r6
   2583c:	bhi	25b6c <__assert_fail@plt+0x13394>
   25840:	mov	r2, #5
   25844:	movw	r1, #26292	; 0x66b4
   25848:	mov	r0, #0
   2584c:	movt	r1, #5
   25850:	bl	12298 <dcgettext@plt>
   25854:	ldr	r4, [sp, #120]	; 0x78
   25858:	ldr	r1, [r4, #8]
   2585c:	bl	494bc <error@@Base>
   25860:	mov	r0, #0
   25864:	ldr	r4, [sp, #108]	; 0x6c
   25868:	ldr	r2, [sp, #1172]	; 0x494
   2586c:	ldr	r3, [r4]
   25870:	cmp	r2, r3
   25874:	bne	267d0 <__assert_fail@plt+0x13ff8>
   25878:	add	sp, sp, #1168	; 0x490
   2587c:	add	sp, sp, #12
   25880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25884:	mov	r0, #10
   25888:	bl	1258c <putchar@plt>
   2588c:	mov	r0, #1
   25890:	b	25864 <__assert_fail@plt+0x1308c>
   25894:	mov	r1, #2
   25898:	ldr	r3, [r7]
   2589c:	mov	r0, r6
   258a0:	blx	r3
   258a4:	cmp	r0, #4
   258a8:	bne	25840 <__assert_fail@plt+0x13068>
   258ac:	add	r6, r6, #3
   258b0:	cmp	r9, r6
   258b4:	bhi	259b4 <__assert_fail@plt+0x131dc>
   258b8:	cmp	r9, r4
   258bc:	bhi	25ba0 <__assert_fail@plt+0x133c8>
   258c0:	mov	r4, #0
   258c4:	str	r4, [sp, #104]	; 0x68
   258c8:	mov	ip, #4
   258cc:	str	ip, [sp, #96]	; 0x60
   258d0:	mov	r2, #5
   258d4:	movw	r1, #19720	; 0x4d08
   258d8:	mov	r0, #0
   258dc:	movt	r1, #5
   258e0:	bl	12298 <dcgettext@plt>
   258e4:	mov	r2, r5
   258e8:	mov	r1, r0
   258ec:	mov	r0, #1
   258f0:	bl	125bc <__printf_chk@plt>
   258f4:	mov	r2, #5
   258f8:	movw	r1, #26356	; 0x66f4
   258fc:	mov	r0, #0
   25900:	movt	r1, #5
   25904:	bl	12298 <dcgettext@plt>
   25908:	mov	r2, #4
   2590c:	mov	r1, r0
   25910:	mov	r0, #1
   25914:	bl	125bc <__printf_chk@plt>
   25918:	mov	r2, #5
   2591c:	movw	r1, #26392	; 0x6718
   25920:	mov	r0, #0
   25924:	movt	r1, #5
   25928:	bl	12298 <dcgettext@plt>
   2592c:	ldr	r2, [sp, #96]	; 0x60
   25930:	mov	r1, r0
   25934:	mov	r0, #1
   25938:	bl	125bc <__printf_chk@plt>
   2593c:	ldr	r5, [sp, #104]	; 0x68
   25940:	cmp	r5, #0
   25944:	beq	259e4 <__assert_fail@plt+0x1320c>
   25948:	ldr	ip, [sp, #96]	; 0x60
   2594c:	add	r5, r6, ip
   25950:	cmp	r9, r5
   25954:	bls	25b80 <__assert_fail@plt+0x133a8>
   25958:	ldr	r1, [sp, #96]	; 0x60
   2595c:	sub	r3, r1, #1
   25960:	cmp	r3, #7
   25964:	bls	25d2c <__assert_fail@plt+0x13554>
   25968:	mov	r6, #0
   2596c:	mov	r2, #0
   25970:	mov	r3, #0
   25974:	strd	r2, [sp, #112]	; 0x70
   25978:	mov	r2, #5
   2597c:	movw	r1, #26428	; 0x673c
   25980:	mov	r0, #0
   25984:	movt	r1, #5
   25988:	bl	12298 <dcgettext@plt>
   2598c:	mov	r2, r6
   25990:	mov	r6, r5
   25994:	mov	r1, r0
   25998:	mov	r0, #1
   2599c:	bl	125bc <__printf_chk@plt>
   259a0:	cmp	r4, #0
   259a4:	bne	259f8 <__assert_fail@plt+0x13220>
   259a8:	mov	fp, r6
   259ac:	str	r4, [sp, #100]	; 0x64
   259b0:	b	25d4c <__assert_fail@plt+0x13574>
   259b4:	mov	r1, #1
   259b8:	mov	r0, r4
   259bc:	ldr	r3, [r7]
   259c0:	blx	r3
   259c4:	tst	r0, #1
   259c8:	beq	267d4 <__assert_fail@plt+0x13ffc>
   259cc:	and	ip, r0, #2
   259d0:	and	r4, r0, #4
   259d4:	str	ip, [sp, #104]	; 0x68
   259d8:	mov	ip, #8
   259dc:	str	ip, [sp, #96]	; 0x60
   259e0:	b	258d0 <__assert_fail@plt+0x130f8>
   259e4:	cmp	r4, #0
   259e8:	mov	r0, #0
   259ec:	mov	r1, #0
   259f0:	strd	r0, [sp, #112]	; 0x70
   259f4:	beq	259a8 <__assert_fail@plt+0x131d0>
   259f8:	add	fp, r6, #1
   259fc:	cmp	r9, fp
   25a00:	bhi	25a44 <__assert_fail@plt+0x1326c>
   25a04:	cmp	r6, r9
   25a08:	bcc	25bb4 <__assert_fail@plt+0x133dc>
   25a0c:	mov	r1, #0
   25a10:	add	r0, sp, #148	; 0x94
   25a14:	mov	r2, #1024	; 0x400
   25a18:	bl	12580 <memset@plt>
   25a1c:	mov	r0, #10
   25a20:	bl	1258c <putchar@plt>
   25a24:	mov	r2, #5
   25a28:	movw	r1, #26612	; 0x67f4
   25a2c:	mov	r0, #0
   25a30:	movt	r1, #5
   25a34:	bl	12298 <dcgettext@plt>
   25a38:	bl	494bc <error@@Base>
   25a3c:	mov	r0, #0
   25a40:	b	25864 <__assert_fail@plt+0x1308c>
   25a44:	mov	r1, #1
   25a48:	ldr	r3, [r7]
   25a4c:	mov	r0, r6
   25a50:	blx	r3
   25a54:	mov	r1, #0
   25a58:	mov	r2, #1024	; 0x400
   25a5c:	str	r0, [sp, #88]	; 0x58
   25a60:	add	r0, sp, #148	; 0x94
   25a64:	bl	12580 <memset@plt>
   25a68:	ldr	r4, [sp, #88]	; 0x58
   25a6c:	cmp	r4, #0
   25a70:	beq	25d44 <__assert_fail@plt+0x1356c>
   25a74:	mov	r2, #5
   25a78:	movw	r1, #26468	; 0x6764
   25a7c:	mov	r0, #0
   25a80:	movt	r1, #5
   25a84:	bl	12298 <dcgettext@plt>
   25a88:	mov	r8, fp
   25a8c:	movw	r5, #10648	; 0x2998
   25a90:	add	r4, sp, #140	; 0x8c
   25a94:	movt	r5, #5
   25a98:	mov	r1, r0
   25a9c:	mov	r0, #1
   25aa0:	bl	125bc <__printf_chk@plt>
   25aa4:	movw	ip, #15480	; 0x3c78
   25aa8:	movt	ip, #5
   25aac:	str	r5, [sp, #64]	; 0x40
   25ab0:	str	r4, [sp, #128]	; 0x80
   25ab4:	mov	r5, #0
   25ab8:	mov	fp, ip
   25abc:	str	r5, [sp, #80]	; 0x50
   25ac0:	str	r7, [sp, #100]	; 0x64
   25ac4:	add	r5, r8, #1
   25ac8:	cmp	r9, r5
   25acc:	bhi	25bc8 <__assert_fail@plt+0x133f0>
   25ad0:	cmp	r9, r8
   25ad4:	bls	25ae8 <__assert_fail@plt+0x13310>
   25ad8:	rsb	r1, r8, r9
   25adc:	sub	r3, r1, #1
   25ae0:	cmp	r3, #7
   25ae4:	bls	25bcc <__assert_fail@plt+0x133f4>
   25ae8:	add	ip, sp, #148	; 0x94
   25aec:	mov	r4, #0
   25af0:	mov	r0, r5
   25af4:	ldr	r1, [sp, #128]	; 0x80
   25af8:	mov	r2, #0
   25afc:	mov	r3, r9
   25b00:	str	r5, [ip]
   25b04:	bl	1c634 <__assert_fail@plt+0x9e5c>
   25b08:	ldr	r8, [sp, #140]	; 0x8c
   25b0c:	add	r8, r5, r8
   25b10:	strd	r0, [sp, #56]	; 0x38
   25b14:	orrs	r1, r0, r1
   25b18:	bne	25bec <__assert_fail@plt+0x13414>
   25b1c:	mov	r2, #5
   25b20:	movw	r1, #26500	; 0x6784
   25b24:	mov	r0, #0
   25b28:	movt	r1, #5
   25b2c:	bl	12298 <dcgettext@plt>
   25b30:	mov	r2, r4
   25b34:	mov	r1, r0
   25b38:	mov	r0, #1
   25b3c:	bl	125bc <__printf_chk@plt>
   25b40:	ldr	r4, [sp, #80]	; 0x50
   25b44:	ldr	r5, [sp, #88]	; 0x58
   25b48:	add	r4, r4, #1
   25b4c:	str	r4, [sp, #80]	; 0x50
   25b50:	cmp	r5, r4
   25b54:	bhi	25ac4 <__assert_fail@plt+0x132ec>
   25b58:	ldr	r7, [sp, #100]	; 0x64
   25b5c:	add	r4, sp, #148	; 0x94
   25b60:	mov	fp, r8
   25b64:	str	r4, [sp, #100]	; 0x64
   25b68:	b	25d4c <__assert_fail@plt+0x13574>
   25b6c:	rsb	r1, r6, r9
   25b70:	sub	r3, r1, #1
   25b74:	cmp	r3, #7
   25b78:	bhi	25840 <__assert_fail@plt+0x13068>
   25b7c:	b	25898 <__assert_fail@plt+0x130c0>
   25b80:	cmp	r9, r6
   25b84:	rsbhi	r1, r6, r9
   25b88:	bhi	2595c <__assert_fail@plt+0x13184>
   25b8c:	mov	r0, #0
   25b90:	mov	r1, #0
   25b94:	mov	r6, #0
   25b98:	strd	r0, [sp, #112]	; 0x70
   25b9c:	b	25978 <__assert_fail@plt+0x131a0>
   25ba0:	rsb	r1, r4, r9
   25ba4:	sub	r3, r1, #1
   25ba8:	cmp	r3, #7
   25bac:	bhi	258c0 <__assert_fail@plt+0x130e8>
   25bb0:	b	259b8 <__assert_fail@plt+0x131e0>
   25bb4:	rsb	r1, r6, r9
   25bb8:	sub	r3, r1, #1
   25bbc:	cmp	r3, #7
   25bc0:	bhi	25a0c <__assert_fail@plt+0x13234>
   25bc4:	b	25a48 <__assert_fail@plt+0x13270>
   25bc8:	mov	r1, #1
   25bcc:	ldr	ip, [sp, #100]	; 0x64
   25bd0:	mov	r0, r8
   25bd4:	ldr	r3, [ip]
   25bd8:	blx	r3
   25bdc:	mov	r4, r0
   25be0:	add	r0, sp, #148	; 0x94
   25be4:	add	ip, r0, r4, lsl #2
   25be8:	b	25af0 <__assert_fail@plt+0x13318>
   25bec:	mov	r2, #5
   25bf0:	movw	r1, #26540	; 0x67ac
   25bf4:	mov	r0, #0
   25bf8:	movt	r1, #5
   25bfc:	bl	12298 <dcgettext@plt>
   25c00:	mov	r2, r4
   25c04:	ldrd	r4, [sp, #56]	; 0x38
   25c08:	mov	sl, r8
   25c0c:	subs	r4, r4, #1
   25c10:	sbc	r5, r5, #0
   25c14:	strd	r4, [sp, #72]	; 0x48
   25c18:	mov	r4, #0
   25c1c:	mov	r5, #0
   25c20:	mov	r1, r0
   25c24:	mov	r0, #1
   25c28:	bl	125bc <__printf_chk@plt>
   25c2c:	mov	r0, r8
   25c30:	b	25cc8 <__assert_fail@plt+0x134f0>
   25c34:	cmp	r9, sl
   25c38:	bls	25c4c <__assert_fail@plt+0x13474>
   25c3c:	rsb	r1, sl, r9
   25c40:	sub	r3, r1, #1
   25c44:	cmp	r3, #7
   25c48:	bls	25cd8 <__assert_fail@plt+0x13500>
   25c4c:	mvn	r8, #2
   25c50:	mov	r6, #0
   25c54:	mov	r0, r6
   25c58:	bl	1c370 <__assert_fail@plt+0x9b98>
   25c5c:	ldr	r3, [sp, #64]	; 0x40
   25c60:	mov	r2, r0
   25c64:	ldrd	r0, [sp, #72]	; 0x48
   25c68:	cmp	r1, r5
   25c6c:	cmpeq	r0, r4
   25c70:	movw	r1, #10144	; 0x27a0
   25c74:	mov	r0, #1
   25c78:	movt	r1, #5
   25c7c:	moveq	r3, fp
   25c80:	bl	125bc <__printf_chk@plt>
   25c84:	cmp	r8, #20
   25c88:	bhi	25cf0 <__assert_fail@plt+0x13518>
   25c8c:	mov	r1, #1
   25c90:	movw	r3, #8191	; 0x1fff
   25c94:	lsl	r8, r1, r8
   25c98:	movt	r3, #16
   25c9c:	and	r3, r8, r3
   25ca0:	cmp	r3, #0
   25ca4:	beq	25cf0 <__assert_fail@plt+0x13518>
   25ca8:	adds	r4, r4, #1
   25cac:	ldrd	r2, [sp, #56]	; 0x38
   25cb0:	adc	r5, r5, #0
   25cb4:	add	sl, sl, r1
   25cb8:	cmp	r5, r3
   25cbc:	cmpeq	r4, r2
   25cc0:	beq	26740 <__assert_fail@plt+0x13f68>
   25cc4:	mov	r0, r7
   25cc8:	add	r7, r0, #1
   25ccc:	cmp	r9, r7
   25cd0:	bls	25c34 <__assert_fail@plt+0x1345c>
   25cd4:	mov	r1, #1
   25cd8:	ldr	ip, [sp, #100]	; 0x64
   25cdc:	ldr	r3, [ip]
   25ce0:	blx	r3
   25ce4:	mov	r6, r0
   25ce8:	sub	r8, r0, #3
   25cec:	b	25c54 <__assert_fail@plt+0x1347c>
   25cf0:	mov	r2, #5
   25cf4:	movw	r1, #26576	; 0x67d0
   25cf8:	mov	r0, #0
   25cfc:	movt	r1, #5
   25d00:	str	r6, [sp, #52]	; 0x34
   25d04:	bl	12298 <dcgettext@plt>
   25d08:	ldr	ip, [sp, #52]	; 0x34
   25d0c:	mov	r4, r0
   25d10:	mov	r0, ip
   25d14:	bl	1c370 <__assert_fail@plt+0x9b98>
   25d18:	mov	r1, r0
   25d1c:	mov	r0, r4
   25d20:	bl	494bc <error@@Base>
   25d24:	mov	r0, #0
   25d28:	b	25864 <__assert_fail@plt+0x1308c>
   25d2c:	mov	r0, r6
   25d30:	ldr	r3, [r7]
   25d34:	blx	r3
   25d38:	strd	r0, [sp, #112]	; 0x70
   25d3c:	ldr	r6, [sp, #112]	; 0x70
   25d40:	b	25978 <__assert_fail@plt+0x131a0>
   25d44:	add	ip, sp, #148	; 0x94
   25d48:	str	ip, [sp, #100]	; 0x64
   25d4c:	mov	r0, #10
   25d50:	bl	1258c <putchar@plt>
   25d54:	cmp	fp, r9
   25d58:	bcs	25a24 <__assert_fail@plt+0x1324c>
   25d5c:	add	r6, fp, #1
   25d60:	mov	sl, r7
   25d64:	cmp	r9, r6
   25d68:	bhi	25e28 <__assert_fail@plt+0x13650>
   25d6c:	cmp	r9, fp
   25d70:	bls	25884 <__assert_fail@plt+0x130ac>
   25d74:	rsb	r1, fp, r9
   25d78:	sub	r3, r1, #1
   25d7c:	cmp	r3, #7
   25d80:	bhi	25884 <__assert_fail@plt+0x130ac>
   25d84:	mov	r0, fp
   25d88:	ldr	r3, [sl]
   25d8c:	blx	r3
   25d90:	subs	r4, r0, #0
   25d94:	beq	267b8 <__assert_fail@plt+0x13fe0>
   25d98:	sub	r3, r4, #1
   25d9c:	cmp	r3, #9
   25da0:	ldrls	pc, [pc, r3, lsl #2]
   25da4:	b	26150 <__assert_fail@plt+0x13978>
   25da8:	strheq	r6, [r2], -r8
   25dac:	andeq	r6, r2, r8, asr r0
   25db0:	andeq	r5, r2, r4, asr #30
   25db4:	andeq	r5, r2, ip, lsl pc
   25db8:	strdeq	r6, [r2], -r4
   25dbc:	andeq	r5, r2, r0, ror #31
   25dc0:	andeq	r5, r2, ip, ror #29
   25dc4:	muleq	r2, ip, lr
   25dc8:	andeq	r5, r2, r0, lsr lr
   25dcc:	ldrdeq	r5, [r2], -r0
   25dd0:	ldr	ip, [sp, #96]	; 0x60
   25dd4:	add	fp, r6, ip
   25dd8:	cmp	r9, fp
   25ddc:	bhi	261fc <__assert_fail@plt+0x13a24>
   25de0:	cmp	r9, r6
   25de4:	rsbhi	r1, r6, r9
   25de8:	bhi	26200 <__assert_fail@plt+0x13a28>
   25dec:	mov	r4, #0
   25df0:	movw	r1, #27272	; 0x6a88
   25df4:	movt	r1, #5
   25df8:	mov	r0, #0
   25dfc:	mov	r2, #5
   25e00:	bl	12298 <dcgettext@plt>
   25e04:	mov	r2, r4
   25e08:	mov	r1, r0
   25e0c:	mov	r0, #1
   25e10:	bl	125bc <__printf_chk@plt>
   25e14:	cmp	r9, fp
   25e18:	bls	25a24 <__assert_fail@plt+0x1324c>
   25e1c:	add	r6, fp, #1
   25e20:	cmp	r9, r6
   25e24:	bls	25d6c <__assert_fail@plt+0x13594>
   25e28:	mov	r1, #1
   25e2c:	b	25d84 <__assert_fail@plt+0x135ac>
   25e30:	mov	r0, r6
   25e34:	add	r1, sp, #140	; 0x8c
   25e38:	mov	r2, #0
   25e3c:	mov	r3, r9
   25e40:	bl	1c634 <__assert_fail@plt+0x9e5c>
   25e44:	ldr	r5, [sp, #96]	; 0x60
   25e48:	mov	r4, r0
   25e4c:	ldr	r0, [sp, #140]	; 0x8c
   25e50:	add	r0, r6, r0
   25e54:	add	fp, r0, r5
   25e58:	cmp	r9, fp
   25e5c:	bhi	261bc <__assert_fail@plt+0x139e4>
   25e60:	cmp	r9, r0
   25e64:	rsbhi	r1, r0, r9
   25e68:	bhi	261c0 <__assert_fail@plt+0x139e8>
   25e6c:	mov	r5, #0
   25e70:	movw	r1, #27200	; 0x6a40
   25e74:	movt	r1, #5
   25e78:	mov	r0, #0
   25e7c:	mov	r2, #5
   25e80:	bl	12298 <dcgettext@plt>
   25e84:	mov	r2, r4
   25e88:	mov	r3, r5
   25e8c:	mov	r1, r0
   25e90:	mov	r0, #1
   25e94:	bl	125bc <__printf_chk@plt>
   25e98:	b	25e14 <__assert_fail@plt+0x1363c>
   25e9c:	mov	r0, r6
   25ea0:	add	r1, sp, #140	; 0x8c
   25ea4:	mov	r2, #0
   25ea8:	mov	r3, r9
   25eac:	bl	1c634 <__assert_fail@plt+0x9e5c>
   25eb0:	ldr	r5, [sp, #96]	; 0x60
   25eb4:	mov	r4, r0
   25eb8:	ldr	r0, [sp, #140]	; 0x8c
   25ebc:	add	r0, r6, r0
   25ec0:	add	fp, r0, r5
   25ec4:	cmp	r9, fp
   25ec8:	bhi	261dc <__assert_fail@plt+0x13a04>
   25ecc:	cmp	r9, r0
   25ed0:	rsbhi	r1, r0, r9
   25ed4:	bhi	261e0 <__assert_fail@plt+0x13a08>
   25ed8:	mov	r5, #0
   25edc:	movw	r1, #27128	; 0x69f8
   25ee0:	mov	r0, #0
   25ee4:	movt	r1, #5
   25ee8:	b	25e7c <__assert_fail@plt+0x136a4>
   25eec:	ldr	ip, [sp, #96]	; 0x60
   25ef0:	add	fp, r6, ip
   25ef4:	cmp	r9, fp
   25ef8:	bhi	26220 <__assert_fail@plt+0x13a48>
   25efc:	cmp	r9, r6
   25f00:	rsbhi	r1, r6, r9
   25f04:	bhi	26224 <__assert_fail@plt+0x13a4c>
   25f08:	mov	r4, #0
   25f0c:	movw	r1, #27076	; 0x69c4
   25f10:	mov	r0, #0
   25f14:	movt	r1, #5
   25f18:	b	25dfc <__assert_fail@plt+0x13624>
   25f1c:	mov	r2, #5
   25f20:	movw	r1, #26844	; 0x68dc
   25f24:	mov	r0, #0
   25f28:	movt	r1, #5
   25f2c:	bl	12298 <dcgettext@plt>
   25f30:	mov	fp, r6
   25f34:	mov	r1, r0
   25f38:	mov	r0, #1
   25f3c:	bl	125bc <__printf_chk@plt>
   25f40:	b	25e14 <__assert_fail@plt+0x1363c>
   25f44:	add	r4, sp, #140	; 0x8c
   25f48:	mov	r0, r6
   25f4c:	mov	r2, #0
   25f50:	mov	r3, r9
   25f54:	mov	r1, r4
   25f58:	add	r5, sp, #152	; 0x98
   25f5c:	str	r5, [sp, #64]	; 0x40
   25f60:	bl	1c634 <__assert_fail@plt+0x9e5c>
   25f64:	ldr	fp, [sp, #140]	; 0x8c
   25f68:	mov	r1, r4
   25f6c:	mov	r2, #0
   25f70:	mov	r3, r9
   25f74:	add	r6, r6, fp
   25f78:	str	r0, [sp, #72]	; 0x48
   25f7c:	mov	r0, r6
   25f80:	bl	1c634 <__assert_fail@plt+0x9e5c>
   25f84:	ldr	ip, [sp, #104]	; 0x68
   25f88:	ldr	fp, [sp, #140]	; 0x8c
   25f8c:	cmp	ip, #0
   25f90:	add	fp, r6, fp
   25f94:	str	r0, [sp, #56]	; 0x38
   25f98:	bne	2627c <__assert_fail@plt+0x13aa4>
   25f9c:	movw	r1, #26656	; 0x6820
   25fa0:	mov	r0, ip
   25fa4:	movt	r1, #5
   25fa8:	mov	r2, #5
   25fac:	bl	12298 <dcgettext@plt>
   25fb0:	bl	494bc <error@@Base>
   25fb4:	mov	r2, #5
   25fb8:	movw	r1, #26724	; 0x6864
   25fbc:	mov	r0, #0
   25fc0:	movt	r1, #5
   25fc4:	bl	12298 <dcgettext@plt>
   25fc8:	ldr	r2, [sp, #72]	; 0x48
   25fcc:	ldr	r3, [sp, #56]	; 0x38
   25fd0:	mov	r1, r0
   25fd4:	mov	r0, #1
   25fd8:	bl	125bc <__printf_chk@plt>
   25fdc:	b	25e14 <__assert_fail@plt+0x1363c>
   25fe0:	mov	r0, r6
   25fe4:	add	r1, sp, #140	; 0x8c
   25fe8:	mov	r2, #0
   25fec:	mov	r3, r9
   25ff0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   25ff4:	ldr	r5, [sp, #96]	; 0x60
   25ff8:	mov	r4, r0
   25ffc:	ldr	r0, [sp, #140]	; 0x8c
   26000:	add	r0, r6, r0
   26004:	add	fp, r0, r5
   26008:	cmp	r9, fp
   2600c:	bhi	26244 <__assert_fail@plt+0x13a6c>
   26010:	cmp	r9, r0
   26014:	rsbhi	r1, r0, r9
   26018:	bhi	26248 <__assert_fail@plt+0x13a70>
   2601c:	mov	r0, #0
   26020:	mov	r1, #0
   26024:	bl	1c1e4 <__assert_fail@plt+0x9a0c>
   26028:	movw	r1, #27020	; 0x698c
   2602c:	movt	r1, #5
   26030:	mov	r5, r0
   26034:	mov	r0, #0
   26038:	mov	r2, #5
   2603c:	bl	12298 <dcgettext@plt>
   26040:	mov	r3, r5
   26044:	mov	r2, r4
   26048:	mov	r1, r0
   2604c:	mov	r0, #1
   26050:	bl	125bc <__printf_chk@plt>
   26054:	b	25e14 <__assert_fail@plt+0x1363c>
   26058:	mov	r2, #0
   2605c:	mov	r0, r6
   26060:	mov	r3, r9
   26064:	add	r1, sp, #140	; 0x8c
   26068:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2606c:	ldr	r3, [sp, #140]	; 0x8c
   26070:	add	r6, r6, r3
   26074:	rsb	r1, r6, r9
   26078:	mov	r4, r0
   2607c:	mov	r0, r6
   26080:	bl	12604 <strnlen@plt>
   26084:	movw	r1, #26916	; 0x6924
   26088:	movt	r1, #5
   2608c:	mov	r2, #5
   26090:	add	fp, r0, #1
   26094:	mov	r0, #0
   26098:	bl	12298 <dcgettext@plt>
   2609c:	mov	r3, r6
   260a0:	mov	r2, r4
   260a4:	add	fp, r6, fp
   260a8:	mov	r1, r0
   260ac:	mov	r0, #1
   260b0:	bl	125bc <__printf_chk@plt>
   260b4:	b	25e14 <__assert_fail@plt+0x1363c>
   260b8:	mov	r2, #0
   260bc:	mov	r0, r6
   260c0:	mov	r3, r9
   260c4:	add	r1, sp, #140	; 0x8c
   260c8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   260cc:	ldr	r3, [sp, #140]	; 0x8c
   260d0:	add	r6, r6, r3
   260d4:	rsb	r1, r6, r9
   260d8:	mov	r4, r0
   260dc:	mov	r0, r6
   260e0:	bl	12604 <strnlen@plt>
   260e4:	movw	r1, #26868	; 0x68f4
   260e8:	mov	r2, #5
   260ec:	movt	r1, #5
   260f0:	b	26090 <__assert_fail@plt+0x138b8>
   260f4:	mov	r0, r6
   260f8:	add	r1, sp, #140	; 0x8c
   260fc:	mov	r2, #0
   26100:	mov	r3, r9
   26104:	bl	1c634 <__assert_fail@plt+0x9e5c>
   26108:	ldr	r5, [sp, #96]	; 0x60
   2610c:	mov	r4, r0
   26110:	ldr	r0, [sp, #140]	; 0x8c
   26114:	add	r0, r6, r0
   26118:	add	fp, r0, r5
   2611c:	cmp	r9, fp
   26120:	bhi	26260 <__assert_fail@plt+0x13a88>
   26124:	cmp	r9, r0
   26128:	rsbhi	r1, r0, r9
   2612c:	bhi	26264 <__assert_fail@plt+0x13a8c>
   26130:	mov	r0, #0
   26134:	mov	r1, #0
   26138:	bl	1c1e4 <__assert_fail@plt+0x9a0c>
   2613c:	movw	r1, #26964	; 0x6954
   26140:	movt	r1, #5
   26144:	mov	r5, r0
   26148:	mov	r0, #0
   2614c:	b	26038 <__assert_fail@plt+0x13860>
   26150:	ldr	r5, [sp, #100]	; 0x64
   26154:	cmp	r5, #0
   26158:	beq	26794 <__assert_fail@plt+0x13fbc>
   2615c:	ldr	ip, [sp, #100]	; 0x64
   26160:	ldr	r8, [ip, r4, lsl #2]
   26164:	cmp	r8, #0
   26168:	beq	26794 <__assert_fail@plt+0x13fbc>
   2616c:	mov	r3, r9
   26170:	mov	r0, r8
   26174:	add	r1, sp, #140	; 0x8c
   26178:	mov	r2, #0
   2617c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   26180:	ldr	r7, [sp, #140]	; 0x8c
   26184:	orrs	r3, r0, r1
   26188:	strd	r0, [sp, #64]	; 0x40
   2618c:	bne	26330 <__assert_fail@plt+0x13b58>
   26190:	mov	r2, #5
   26194:	movw	r1, #27364	; 0x6ae4
   26198:	mov	r0, #0
   2619c:	movt	r1, #5
   261a0:	bl	12298 <dcgettext@plt>
   261a4:	mov	r2, r4
   261a8:	mov	fp, r6
   261ac:	mov	r1, r0
   261b0:	mov	r0, #1
   261b4:	bl	125bc <__printf_chk@plt>
   261b8:	b	25e14 <__assert_fail@plt+0x1363c>
   261bc:	ldr	r1, [sp, #96]	; 0x60
   261c0:	sub	r3, r1, #1
   261c4:	cmp	r3, #7
   261c8:	bhi	25e6c <__assert_fail@plt+0x13694>
   261cc:	ldr	r3, [sl]
   261d0:	blx	r3
   261d4:	mov	r5, r0
   261d8:	b	25e70 <__assert_fail@plt+0x13698>
   261dc:	ldr	r1, [sp, #96]	; 0x60
   261e0:	sub	r3, r1, #1
   261e4:	cmp	r3, #7
   261e8:	bhi	25ed8 <__assert_fail@plt+0x13700>
   261ec:	ldr	r3, [sl]
   261f0:	blx	r3
   261f4:	mov	r5, r0
   261f8:	b	25edc <__assert_fail@plt+0x13704>
   261fc:	ldr	r1, [sp, #96]	; 0x60
   26200:	sub	r3, r1, #1
   26204:	cmp	r3, #7
   26208:	bhi	25dec <__assert_fail@plt+0x13614>
   2620c:	mov	r0, r6
   26210:	ldr	r3, [sl]
   26214:	blx	r3
   26218:	mov	r4, r0
   2621c:	b	25df0 <__assert_fail@plt+0x13618>
   26220:	ldr	r1, [sp, #96]	; 0x60
   26224:	sub	r3, r1, #1
   26228:	cmp	r3, #7
   2622c:	bhi	25f08 <__assert_fail@plt+0x13730>
   26230:	mov	r0, r6
   26234:	ldr	r3, [sl]
   26238:	blx	r3
   2623c:	mov	r4, r0
   26240:	b	25f0c <__assert_fail@plt+0x13734>
   26244:	ldr	r1, [sp, #96]	; 0x60
   26248:	sub	r3, r1, #1
   2624c:	cmp	r3, #7
   26250:	bhi	2601c <__assert_fail@plt+0x13844>
   26254:	ldr	r3, [sl]
   26258:	blx	r3
   2625c:	b	26024 <__assert_fail@plt+0x1384c>
   26260:	ldr	r1, [sp, #96]	; 0x60
   26264:	sub	r3, r1, #1
   26268:	cmp	r3, #7
   2626c:	bhi	26130 <__assert_fail@plt+0x13958>
   26270:	ldr	r3, [sl]
   26274:	blx	r3
   26278:	b	26138 <__assert_fail@plt+0x13960>
   2627c:	movw	r5, #62864	; 0xf590
   26280:	movt	r5, #6
   26284:	ldr	r0, [sp, #56]	; 0x38
   26288:	mov	r1, #0
   2628c:	ldr	r4, [r5, #268]	; 0x10c
   26290:	cmp	r4, #0
   26294:	strd	r0, [sp, #80]	; 0x50
   26298:	beq	25fb4 <__assert_fail@plt+0x137dc>
   2629c:	mov	r3, #280	; 0x118
   262a0:	ldrd	r0, [sp, #112]	; 0x70
   262a4:	ldrd	r2, [r3, r5]
   262a8:	cmp	r1, r3
   262ac:	cmpeq	r0, r2
   262b0:	bcs	25fb4 <__assert_fail@plt+0x137dc>
   262b4:	ldrd	r0, [sp, #80]	; 0x50
   262b8:	orrs	r1, r0, r1
   262bc:	beq	25fb4 <__assert_fail@plt+0x137dc>
   262c0:	ldr	ip, [sp, #112]	; 0x70
   262c4:	add	r6, r4, ip
   262c8:	add	r4, r4, r2
   262cc:	add	r7, r6, #4
   262d0:	cmp	r4, r7
   262d4:	bhi	26478 <__assert_fail@plt+0x13ca0>
   262d8:	cmp	r6, r4
   262dc:	bcs	262f0 <__assert_fail@plt+0x13b18>
   262e0:	rsb	r1, r6, r4
   262e4:	sub	r0, r1, #1
   262e8:	cmp	r0, #7
   262ec:	bls	2647c <__assert_fail@plt+0x13ca4>
   262f0:	mov	r0, #4
   262f4:	mov	r1, #0
   262f8:	mov	r5, #4
   262fc:	cmp	r1, r3
   26300:	cmpeq	r0, r2
   26304:	bhi	25fb4 <__assert_fail@plt+0x137dc>
   26308:	add	r6, r7, #2
   2630c:	cmp	r4, r6
   26310:	bhi	264dc <__assert_fail@plt+0x13d04>
   26314:	cmp	r4, r7
   26318:	bls	25fb4 <__assert_fail@plt+0x137dc>
   2631c:	rsb	r1, r7, r4
   26320:	sub	r3, r1, #1
   26324:	cmp	r3, #7
   26328:	bhi	25fb4 <__assert_fail@plt+0x137dc>
   2632c:	b	264e0 <__assert_fail@plt+0x13d08>
   26330:	mov	r2, #5
   26334:	movw	r1, #27384	; 0x6af8
   26338:	mov	r0, #0
   2633c:	movt	r1, #5
   26340:	bl	12298 <dcgettext@plt>
   26344:	mov	r2, r4
   26348:	mov	r5, #0
   2634c:	mov	r4, #0
   26350:	strd	r4, [sp, #88]	; 0x58
   26354:	mov	fp, #0
   26358:	mov	r1, r0
   2635c:	mov	r0, #1
   26360:	bl	125bc <__printf_chk@plt>
   26364:	add	r0, r8, r7
   26368:	ldrd	r4, [sp, #64]	; 0x40
   2636c:	ldr	r7, [sp, #92]	; 0x5c
   26370:	mov	r3, r0
   26374:	subs	r4, r4, #1
   26378:	str	sl, [sp, #80]	; 0x50
   2637c:	sbc	r5, r5, #0
   26380:	mov	sl, r6
   26384:	strd	r4, [sp, #72]	; 0x48
   26388:	mov	r4, fp
   2638c:	str	r7, [sp, #56]	; 0x38
   26390:	ldr	r8, [sp, #88]	; 0x58
   26394:	ldrd	r6, [sp, #88]	; 0x58
   26398:	b	26438 <__assert_fail@plt+0x13c60>
   2639c:	cmp	r9, r3
   263a0:	bls	263b4 <__assert_fail@plt+0x13bdc>
   263a4:	rsb	r1, r3, r9
   263a8:	sub	r0, r1, #1
   263ac:	cmp	r0, #7
   263b0:	bls	26448 <__assert_fail@plt+0x13c70>
   263b4:	mov	r1, #0
   263b8:	ldr	ip, [sp, #56]	; 0x38
   263bc:	mov	r2, sl
   263c0:	str	r8, [sp]
   263c4:	mov	r0, #0
   263c8:	str	r8, [sp, #8]
   263cc:	mov	r3, r9
   263d0:	str	ip, [sp, #4]
   263d4:	str	ip, [sp, #12]
   263d8:	ldr	ip, [sp, #96]	; 0x60
   263dc:	str	fp, [sp, #20]
   263e0:	str	r4, [sp, #28]
   263e4:	str	ip, [sp, #16]
   263e8:	mov	ip, #4
   263ec:	str	r4, [sp, #32]
   263f0:	str	ip, [sp, #24]
   263f4:	str	r4, [sp, #36]	; 0x24
   263f8:	str	r4, [sp, #40]	; 0x28
   263fc:	bl	21b34 <__assert_fail@plt+0xf35c>
   26400:	mov	sl, r0
   26404:	ldrd	r0, [sp, #72]	; 0x48
   26408:	cmp	r1, r7
   2640c:	cmpeq	r0, r6
   26410:	beq	2641c <__assert_fail@plt+0x13c44>
   26414:	mov	r0, #44	; 0x2c
   26418:	bl	1258c <putchar@plt>
   2641c:	adds	r6, r6, #1
   26420:	ldrd	r2, [sp, #64]	; 0x40
   26424:	adc	r7, r7, #0
   26428:	cmp	r7, r3
   2642c:	cmpeq	r6, r2
   26430:	beq	26460 <__assert_fail@plt+0x13c88>
   26434:	mov	r3, r5
   26438:	add	r5, r3, #1
   2643c:	cmp	r9, r5
   26440:	bls	2639c <__assert_fail@plt+0x13bc4>
   26444:	mov	r1, #1
   26448:	ldr	ip, [sp, #80]	; 0x50
   2644c:	mov	r0, r3
   26450:	ldr	r3, [ip]
   26454:	blx	r3
   26458:	mov	r1, r0
   2645c:	b	263b8 <__assert_fail@plt+0x13be0>
   26460:	mov	r6, sl
   26464:	mov	r0, #10
   26468:	ldr	sl, [sp, #80]	; 0x50
   2646c:	mov	fp, r6
   26470:	bl	1258c <putchar@plt>
   26474:	b	25e14 <__assert_fail@plt+0x1363c>
   26478:	mov	r1, #4
   2647c:	ldr	r3, [sl]
   26480:	mov	r0, r6
   26484:	blx	r3
   26488:	mvn	r2, #0
   2648c:	mov	r3, #0
   26490:	cmp	r1, r3
   26494:	cmpeq	r0, r2
   26498:	bne	2677c <__assert_fail@plt+0x13fa4>
   2649c:	add	r6, r6, #12
   264a0:	cmp	r4, r6
   264a4:	bhi	26750 <__assert_fail@plt+0x13f78>
   264a8:	cmp	r4, r7
   264ac:	bls	264c0 <__assert_fail@plt+0x13ce8>
   264b0:	rsb	r1, r7, r4
   264b4:	sub	r3, r1, #1
   264b8:	cmp	r3, #7
   264bc:	bls	26754 <__assert_fail@plt+0x13f7c>
   264c0:	mov	r3, #280	; 0x118
   264c4:	mov	r7, r6
   264c8:	ldrd	r2, [r3, r5]
   264cc:	mov	r0, #12
   264d0:	mov	r1, #0
   264d4:	mov	r5, #8
   264d8:	b	262fc <__assert_fail@plt+0x13b24>
   264dc:	mov	r1, #2
   264e0:	ldr	r3, [sl]
   264e4:	mov	r0, r7
   264e8:	blx	r3
   264ec:	sub	r3, r0, #2
   264f0:	cmp	r3, #2
   264f4:	bhi	25fb4 <__assert_fail@plt+0x137dc>
   264f8:	add	r5, r5, #1
   264fc:	cmp	r0, #4
   26500:	add	r6, r6, r5
   26504:	addeq	r6, r6, #1
   26508:	add	r7, r6, #4
   2650c:	add	r0, r6, #3
   26510:	cmp	r4, r7
   26514:	bhi	26534 <__assert_fail@plt+0x13d5c>
   26518:	cmp	r4, r0
   2651c:	bls	25fb4 <__assert_fail@plt+0x137dc>
   26520:	rsb	r1, r0, r4
   26524:	sub	r3, r1, #1
   26528:	cmp	r3, #7
   2652c:	bhi	25fb4 <__assert_fail@plt+0x137dc>
   26530:	b	26538 <__assert_fail@plt+0x13d60>
   26534:	mov	r1, #1
   26538:	ldr	r3, [sl]
   2653c:	blx	r3
   26540:	cmp	r0, #0
   26544:	beq	25fb4 <__assert_fail@plt+0x137dc>
   26548:	sub	r0, r0, #1
   2654c:	str	r0, [sp, #88]	; 0x58
   26550:	add	r6, r7, r0
   26554:	ldrb	r3, [r7, r0]
   26558:	mov	r5, r6
   2655c:	cmp	r3, #0
   26560:	beq	26580 <__assert_fail@plt+0x13da8>
   26564:	mov	r0, r5
   26568:	rsb	r1, r5, r4
   2656c:	bl	12604 <strnlen@plt>
   26570:	add	r0, r0, #1
   26574:	ldrb	r3, [r5, r0]!
   26578:	cmp	r3, #0
   2657c:	bne	26564 <__assert_fail@plt+0x13d8c>
   26580:	ldrb	r3, [r5, #1]
   26584:	add	r5, r5, #1
   26588:	cmp	r3, #0
   2658c:	beq	25fb4 <__assert_fail@plt+0x137dc>
   26590:	ldrd	r2, [sp, #80]	; 0x50
   26594:	cmp	r3, #0
   26598:	cmpeq	r2, #1
   2659c:	beq	26640 <__assert_fail@plt+0x13e68>
   265a0:	str	r7, [sp, #128]	; 0x80
   265a4:	mov	r7, r3
   265a8:	str	r6, [sp, #132]	; 0x84
   265ac:	mov	r6, r2
   265b0:	rsb	r1, r5, r4
   265b4:	mov	r0, r5
   265b8:	bl	12604 <strnlen@plt>
   265bc:	subs	r6, r6, #1
   265c0:	mov	r2, #0
   265c4:	mov	r3, r4
   265c8:	add	r1, sp, #144	; 0x90
   265cc:	sbc	r7, r7, #0
   265d0:	add	r0, r0, #1
   265d4:	add	r5, r5, r0
   265d8:	mov	r0, r5
   265dc:	bl	1c634 <__assert_fail@plt+0x9e5c>
   265e0:	ldr	r8, [sp, #144]	; 0x90
   265e4:	mov	r2, #0
   265e8:	mov	r3, r4
   265ec:	add	r5, r5, r8
   265f0:	add	r1, sp, #144	; 0x90
   265f4:	mov	r0, r5
   265f8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   265fc:	ldr	r8, [sp, #144]	; 0x90
   26600:	mov	r3, r4
   26604:	add	r1, sp, #144	; 0x90
   26608:	add	r8, r5, r8
   2660c:	mov	r2, #0
   26610:	mov	r0, r8
   26614:	bl	1c634 <__assert_fail@plt+0x9e5c>
   26618:	ldr	r3, [sp, #144]	; 0x90
   2661c:	add	r5, r8, r3
   26620:	ldrb	r3, [r8, r3]
   26624:	cmp	r3, #0
   26628:	beq	25fb4 <__assert_fail@plt+0x137dc>
   2662c:	cmp	r7, #0
   26630:	cmpeq	r6, #1
   26634:	bne	265b0 <__assert_fail@plt+0x13dd8>
   26638:	ldr	r7, [sp, #128]	; 0x80
   2663c:	ldr	r6, [sp, #132]	; 0x84
   26640:	cmp	r4, r5
   26644:	beq	25fb4 <__assert_fail@plt+0x137dc>
   26648:	rsb	r1, r5, r4
   2664c:	mov	r0, r5
   26650:	bl	12604 <strnlen@plt>
   26654:	ldr	ip, [sp, #64]	; 0x40
   26658:	mov	r2, #0
   2665c:	mov	r3, r4
   26660:	sub	r1, ip, #8
   26664:	add	r0, r0, #1
   26668:	add	r0, r5, r0
   2666c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   26670:	mov	r2, r0
   26674:	mov	r3, r1
   26678:	orrs	r0, r2, r3
   2667c:	beq	266e4 <__assert_fail@plt+0x13f0c>
   26680:	ldr	ip, [sp, #88]	; 0x58
   26684:	ldrb	r1, [r7, ip]
   26688:	cmp	r1, #0
   2668c:	beq	25fb4 <__assert_fail@plt+0x137dc>
   26690:	cmp	r3, #0
   26694:	cmpeq	r2, #1
   26698:	bls	266e8 <__assert_fail@plt+0x13f10>
   2669c:	mov	r7, r9
   266a0:	mov	r8, r2
   266a4:	mov	r9, r3
   266a8:	b	266b8 <__assert_fail@plt+0x13ee0>
   266ac:	cmp	r9, #0
   266b0:	cmpeq	r8, #1
   266b4:	beq	26748 <__assert_fail@plt+0x13f70>
   266b8:	mov	r0, r6
   266bc:	rsb	r1, r6, r4
   266c0:	bl	12604 <strnlen@plt>
   266c4:	subs	r8, r8, #1
   266c8:	sbc	r9, r9, #0
   266cc:	add	r0, r0, #1
   266d0:	ldrb	r3, [r6, r0]!
   266d4:	cmp	r3, #0
   266d8:	bne	266ac <__assert_fail@plt+0x13ed4>
   266dc:	mov	r9, r7
   266e0:	b	25fb4 <__assert_fail@plt+0x137dc>
   266e4:	mov	r6, #0
   266e8:	cmp	r5, #0
   266ec:	beq	25fb4 <__assert_fail@plt+0x137dc>
   266f0:	mov	r2, #5
   266f4:	movw	r1, #26776	; 0x6898
   266f8:	mov	r0, #0
   266fc:	movt	r1, #5
   26700:	bl	12298 <dcgettext@plt>
   26704:	cmp	r6, #0
   26708:	ldr	r2, [sp, #72]	; 0x48
   2670c:	movweq	r6, #11856	; 0x2e50
   26710:	movteq	r6, #5
   26714:	movwne	r3, #37640	; 0x9308
   26718:	str	r6, [sp]
   2671c:	moveq	r3, r6
   26720:	str	r5, [sp, #8]
   26724:	movtne	r3, #5
   26728:	mov	r1, r0
   2672c:	str	r3, [sp, #4]
   26730:	mov	r0, #1
   26734:	ldr	r3, [sp, #56]	; 0x38
   26738:	bl	125bc <__printf_chk@plt>
   2673c:	b	25e14 <__assert_fail@plt+0x1363c>
   26740:	mov	r8, r7
   26744:	b	25b40 <__assert_fail@plt+0x13368>
   26748:	mov	r9, r7
   2674c:	b	266e8 <__assert_fail@plt+0x13f10>
   26750:	mov	r1, #8
   26754:	mov	r0, r7
   26758:	ldr	r3, [sl]
   2675c:	blx	r3
   26760:	mov	r3, #280	; 0x118
   26764:	ldrd	r2, [r3, r5]
   26768:	mov	r7, r6
   2676c:	mov	r5, #8
   26770:	adds	r0, r0, #12
   26774:	adc	r1, r1, #0
   26778:	b	262fc <__assert_fail@plt+0x13b24>
   2677c:	mov	r3, #280	; 0x118
   26780:	adds	r0, r0, #4
   26784:	ldrd	r2, [r3, r5]
   26788:	adc	r1, r1, #0
   2678c:	mov	r5, #4
   26790:	b	262fc <__assert_fail@plt+0x13b24>
   26794:	mov	r2, #5
   26798:	movw	r1, #27328	; 0x6ac0
   2679c:	mov	r0, #0
   267a0:	movt	r1, #5
   267a4:	bl	12298 <dcgettext@plt>
   267a8:	mov	r1, r4
   267ac:	bl	494bc <error@@Base>
   267b0:	mov	r0, #0
   267b4:	b	25864 <__assert_fail@plt+0x1308c>
   267b8:	mov	r0, #10
   267bc:	mov	r7, sl
   267c0:	bl	1258c <putchar@plt>
   267c4:	cmp	r9, r6
   267c8:	bhi	25824 <__assert_fail@plt+0x1304c>
   267cc:	b	2588c <__assert_fail@plt+0x130b4>
   267d0:	bl	122b0 <__stack_chk_fail@plt>
   267d4:	and	r4, r0, #2
   267d8:	str	r4, [sp, #104]	; 0x68
   267dc:	and	r4, r0, #4
   267e0:	b	258c8 <__assert_fail@plt+0x130f0>
   267e4:	push	{r4, r5, r6, lr}
   267e8:	mov	r5, r0
   267ec:	ldr	r4, [r0, #8]
   267f0:	mov	r6, r1
   267f4:	cmp	r4, r1
   267f8:	bhi	268b4 <__assert_fail@plt+0x140dc>
   267fc:	movw	r3, #1240	; 0x4d8
   26800:	movt	r3, #7
   26804:	ldr	r3, [r3, #1108]	; 0x454
   26808:	cmp	r3, #0
   2680c:	bne	268a4 <__assert_fail@plt+0x140cc>
   26810:	add	r1, r6, #1
   26814:	str	r1, [r5, #8]
   26818:	cmp	r1, #0
   2681c:	beq	268ac <__assert_fail@plt+0x140d4>
   26820:	cmp	r1, #1024	; 0x400
   26824:	bhi	268bc <__assert_fail@plt+0x140e4>
   26828:	mov	r2, #2
   2682c:	ldr	r0, [r5, #12]
   26830:	bl	21ac4 <__assert_fail@plt+0xf2ec>
   26834:	mov	r2, #4
   26838:	ldr	r1, [r5, #8]
   2683c:	str	r0, [r5, #12]
   26840:	ldr	r0, [r5, #16]
   26844:	bl	21ac4 <__assert_fail@plt+0xf2ec>
   26848:	ldr	r2, [r5, #12]
   2684c:	cmp	r2, #0
   26850:	str	r0, [r5, #16]
   26854:	beq	268e8 <__assert_fail@plt+0x14110>
   26858:	cmp	r0, #0
   2685c:	beq	268e8 <__assert_fail@plt+0x14110>
   26860:	ldr	r3, [r5, #8]
   26864:	cmp	r4, r3
   26868:	bcs	2689c <__assert_fail@plt+0x140c4>
   2686c:	sub	r3, r4, #-2147483647	; 0x80000001
   26870:	sub	r6, r4, #-1073741823	; 0xc0000001
   26874:	mvn	ip, #0
   26878:	mov	r1, #0
   2687c:	add	r3, r2, r3, lsl #1
   26880:	add	r0, r0, r6, lsl #2
   26884:	strh	ip, [r3, #2]!
   26888:	add	r4, r4, #1
   2688c:	str	r1, [r0, #4]!
   26890:	ldr	r2, [r5, #8]
   26894:	cmp	r2, r4
   26898:	bhi	26884 <__assert_fail@plt+0x140ac>
   2689c:	mov	r0, #1
   268a0:	pop	{r4, r5, r6, pc}
   268a4:	cmp	r1, r3
   268a8:	bls	26810 <__assert_fail@plt+0x14038>
   268ac:	mvn	r0, #0
   268b0:	pop	{r4, r5, r6, pc}
   268b4:	mov	r0, #0
   268b8:	pop	{r4, r5, r6, pc}
   268bc:	mov	r2, #5
   268c0:	movw	r1, #27408	; 0x6b10
   268c4:	mov	r0, #0
   268c8:	movt	r1, #5
   268cc:	bl	12298 <dcgettext@plt>
   268d0:	mov	r1, r6
   268d4:	bl	494bc <error@@Base>
   268d8:	mov	r3, #0
   268dc:	mvn	r0, #0
   268e0:	str	r3, [r5, #8]
   268e4:	pop	{r4, r5, r6, pc}
   268e8:	mov	r2, #5
   268ec:	movw	r1, #27448	; 0x6b38
   268f0:	mov	r0, #0
   268f4:	movt	r1, #5
   268f8:	bl	12298 <dcgettext@plt>
   268fc:	ldr	r1, [r5, #8]
   26900:	bl	494bc <error@@Base>
   26904:	mov	r3, #0
   26908:	mvn	r0, #0
   2690c:	str	r3, [r5, #8]
   26910:	pop	{r4, r5, r6, pc}
   26914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26918:	movw	r4, #65176	; 0xfe98
   2691c:	movt	r4, #6
   26920:	sub	sp, sp, #148	; 0x94
   26924:	ldr	r5, [r0, #12]
   26928:	movw	r1, #27508	; 0x6b74
   2692c:	ldr	r2, [r4]
   26930:	movt	r1, #5
   26934:	ldr	r3, [r0, #24]
   26938:	movw	ip, #3424	; 0xd60
   2693c:	str	r0, [sp, #76]	; 0x4c
   26940:	movt	ip, #7
   26944:	ldr	r0, [r0, #8]
   26948:	add	fp, r5, r3
   2694c:	str	r4, [sp, #96]	; 0x60
   26950:	mov	r4, #0
   26954:	str	r5, [sp, #64]	; 0x40
   26958:	str	ip, [sp, #68]	; 0x44
   2695c:	str	r2, [sp, #140]	; 0x8c
   26960:	str	r5, [sp, #108]	; 0x6c
   26964:	bl	12178 <strcmp@plt>
   26968:	movw	r5, #1240	; 0x4d8
   2696c:	movt	r5, #7
   26970:	mov	r2, #5
   26974:	add	ip, r5, #1600	; 0x640
   26978:	movw	r1, #27520	; 0x6b80
   2697c:	movt	r1, #5
   26980:	add	ip, ip, #8
   26984:	str	r4, [sp, #116]	; 0x74
   26988:	str	r5, [sp, #28]
   2698c:	movw	r5, #3472	; 0xd90
   26990:	str	r4, [sp, #52]	; 0x34
   26994:	movt	r5, #7
   26998:	str	ip, [sp, #100]	; 0x64
   2699c:	str	r4, [sp, #88]	; 0x58
   269a0:	str	r4, [sp, #72]	; 0x48
   269a4:	str	r5, [sp, #84]	; 0x54
   269a8:	subs	r3, r0, r4
   269ac:	rsbs	r0, r3, #0
   269b0:	adcs	r0, r0, r3
   269b4:	str	r0, [sp, #92]	; 0x5c
   269b8:	mov	r0, r4
   269bc:	bl	12298 <dcgettext@plt>
   269c0:	ldr	ip, [sp, #68]	; 0x44
   269c4:	mov	r2, #5
   269c8:	movw	r1, #15524	; 0x3ca4
   269cc:	movt	r1, #5
   269d0:	ldr	ip, [ip]
   269d4:	str	ip, [sp, #80]	; 0x50
   269d8:	str	r0, [sp, #48]	; 0x30
   269dc:	mov	r0, r4
   269e0:	bl	12298 <dcgettext@plt>
   269e4:	ldr	r4, [sp, #76]	; 0x4c
   269e8:	ldr	r2, [r4, #8]
   269ec:	mov	r1, r0
   269f0:	mov	r0, #1
   269f4:	bl	125bc <__printf_chk@plt>
   269f8:	ldr	r8, [sp, #108]	; 0x6c
   269fc:	cmp	fp, r8
   26a00:	bls	26b4c <__assert_fail@plt+0x14374>
   26a04:	add	r2, r8, #4
   26a08:	mov	r3, #1
   26a0c:	cmp	fp, r2
   26a10:	str	r3, [sp, #124]	; 0x7c
   26a14:	mov	r3, #0
   26a18:	str	r3, [sp, #128]	; 0x80
   26a1c:	str	r3, [sp, #132]	; 0x84
   26a20:	bhi	26a98 <__assert_fail@plt+0x142c0>
   26a24:	rsb	r1, r8, fp
   26a28:	sub	r3, r1, #1
   26a2c:	cmp	r3, #7
   26a30:	strhi	r2, [sp, #108]	; 0x6c
   26a34:	bls	26a9c <__assert_fail@plt+0x142c4>
   26a38:	ldr	r4, [sp, #64]	; 0x40
   26a3c:	movw	r1, #27536	; 0x6b90
   26a40:	mov	r0, #1
   26a44:	movt	r1, #5
   26a48:	rsb	r2, r4, r8
   26a4c:	bl	125bc <__printf_chk@plt>
   26a50:	ldr	r8, [sp, #108]	; 0x6c
   26a54:	cmp	r8, fp
   26a58:	bcs	269fc <__assert_fail@plt+0x14224>
   26a5c:	ldrb	r3, [r8]
   26a60:	cmp	r3, #0
   26a64:	bne	269fc <__assert_fail@plt+0x14224>
   26a68:	add	r3, r8, #1
   26a6c:	b	26a80 <__assert_fail@plt+0x142a8>
   26a70:	ldrb	r2, [r3]
   26a74:	add	r3, r3, #1
   26a78:	cmp	r2, #0
   26a7c:	bne	269fc <__assert_fail@plt+0x14224>
   26a80:	cmp	r3, fp
   26a84:	str	r3, [sp, #108]	; 0x6c
   26a88:	mov	r8, r3
   26a8c:	bne	26a70 <__assert_fail@plt+0x14298>
   26a90:	mov	r8, fp
   26a94:	b	269fc <__assert_fail@plt+0x14224>
   26a98:	mov	r1, #4
   26a9c:	ldr	r5, [sp, #84]	; 0x54
   26aa0:	mov	r0, r8
   26aa4:	ldr	r3, [r5]
   26aa8:	blx	r3
   26aac:	strd	r0, [sp, #40]	; 0x28
   26ab0:	orrs	ip, r0, r1
   26ab4:	ldr	r1, [sp, #108]	; 0x6c
   26ab8:	add	r0, r1, #4
   26abc:	str	r0, [sp, #108]	; 0x6c
   26ac0:	beq	26a38 <__assert_fail@plt+0x14260>
   26ac4:	ldrd	r4, [sp, #40]	; 0x28
   26ac8:	mvn	r2, #0
   26acc:	mov	r3, #0
   26ad0:	cmp	r5, r3
   26ad4:	cmpeq	r4, r2
   26ad8:	beq	2889c <__assert_fail@plt+0x160c4>
   26adc:	add	sl, r4, #4
   26ae0:	mov	r4, #4
   26ae4:	add	sl, r8, sl
   26ae8:	cmp	sl, fp
   26aec:	movls	r3, #0
   26af0:	movhi	r3, #1
   26af4:	cmp	sl, r0
   26af8:	orrcc	r3, r3, #1
   26afc:	cmp	r3, #0
   26b00:	bne	28868 <__assert_fail@plt+0x16090>
   26b04:	add	ip, r0, r4
   26b08:	cmp	fp, ip
   26b0c:	bhi	26b74 <__assert_fail@plt+0x1439c>
   26b10:	cmp	fp, r0
   26b14:	rsbhi	r1, r0, fp
   26b18:	bhi	26b78 <__assert_fail@plt+0x143a0>
   26b1c:	ldr	r5, [sp, #92]	; 0x5c
   26b20:	str	ip, [sp, #108]	; 0x6c
   26b24:	cmp	r5, #0
   26b28:	beq	286fc <__assert_fail@plt+0x15f24>
   26b2c:	mov	r2, #0
   26b30:	mov	r3, #0
   26b34:	strd	r2, [sp, #56]	; 0x38
   26b38:	cmp	fp, ip
   26b3c:	mov	r3, #0
   26b40:	str	r3, [sp, #120]	; 0x78
   26b44:	bhi	28eb4 <__assert_fail@plt+0x166dc>
   26b48:	str	fp, [sp, #108]	; 0x6c
   26b4c:	mov	r0, #10
   26b50:	bl	1258c <putchar@plt>
   26b54:	ldr	ip, [sp, #96]	; 0x60
   26b58:	ldr	r2, [sp, #140]	; 0x8c
   26b5c:	mov	r0, #1
   26b60:	ldr	r3, [ip]
   26b64:	cmp	r2, r3
   26b68:	bne	29740 <__assert_fail@plt+0x16f68>
   26b6c:	add	sp, sp, #148	; 0x94
   26b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b74:	mov	r1, r4
   26b78:	sub	r3, r1, #1
   26b7c:	cmp	r3, #7
   26b80:	bhi	26b1c <__assert_fail@plt+0x14344>
   26b84:	ldr	ip, [sp, #84]	; 0x54
   26b88:	ldr	r3, [ip]
   26b8c:	blx	r3
   26b90:	ldr	r5, [sp, #92]	; 0x5c
   26b94:	ldr	ip, [sp, #108]	; 0x6c
   26b98:	cmp	r5, #0
   26b9c:	add	ip, ip, r4
   26ba0:	str	ip, [sp, #108]	; 0x6c
   26ba4:	strd	r0, [sp, #56]	; 0x38
   26ba8:	beq	28708 <__assert_fail@plt+0x15f30>
   26bac:	orrs	lr, r0, r1
   26bb0:	beq	26b38 <__assert_fail@plt+0x14360>
   26bb4:	lsl	r3, r4, #3
   26bb8:	mov	r2, #1
   26bbc:	sub	r3, r3, #1
   26bc0:	ldr	lr, [sp, #56]	; 0x38
   26bc4:	lsl	r3, r2, r3
   26bc8:	sub	r5, r3, #4
   26bcc:	eor	r3, r3, lr
   26bd0:	rsb	r5, r3, r5
   26bd4:	add	r5, ip, r5
   26bd8:	cmp	r5, r8
   26bdc:	bhi	2875c <__assert_fail@plt+0x15f84>
   26be0:	ldr	ip, [sp, #72]	; 0x48
   26be4:	cmp	ip, #0
   26be8:	str	ip, [sp, #120]	; 0x78
   26bec:	beq	26c20 <__assert_fail@plt+0x14448>
   26bf0:	ldr	r3, [ip, #4]
   26bf4:	cmp	r3, r5
   26bf8:	beq	295c0 <__assert_fail@plt+0x16de8>
   26bfc:	mov	r3, ip
   26c00:	b	26c10 <__assert_fail@plt+0x14438>
   26c04:	ldr	r2, [r3, #4]
   26c08:	cmp	r2, r5
   26c0c:	beq	28930 <__assert_fail@plt+0x16158>
   26c10:	ldr	r3, [r3]
   26c14:	cmp	r3, #0
   26c18:	bne	26c04 <__assert_fail@plt+0x1442c>
   26c1c:	str	r3, [sp, #120]	; 0x78
   26c20:	ldr	r0, [pc, #3992]	; 27bc0 <__assert_fail@plt+0x153e8>
   26c24:	mov	r1, #0
   26c28:	mov	r2, #72	; 0x48
   26c2c:	bl	12580 <memset@plt>
   26c30:	ldrd	r2, [sp, #56]	; 0x38
   26c34:	mov	r0, #0
   26c38:	str	r4, [sp]
   26c3c:	movw	r7, #1240	; 0x4d8
   26c40:	ldr	r5, [sp, #64]	; 0x40
   26c44:	bl	1acc4 <__assert_fail@plt+0x84ec>
   26c48:	movt	r7, #7
   26c4c:	rsb	r8, r5, r8
   26c50:	mov	r2, r8
   26c54:	mov	r1, r0
   26c58:	movw	r0, #27952	; 0x6d30
   26c5c:	movt	r0, #5
   26c60:	bl	49bf8 <warn@@Base>
   26c64:	ldr	ip, [sp, #28]
   26c68:	mov	r0, #2
   26c6c:	mov	r3, #0
   26c70:	str	r3, [ip, #1616]	; 0x650
   26c74:	bl	12358 <xmalloc@plt>
   26c78:	ldr	r5, [sp, #28]
   26c7c:	str	r0, [r5, #1620]	; 0x654
   26c80:	mov	r0, #4
   26c84:	bl	12358 <xmalloc@plt>
   26c88:	ldr	r3, [sp, #116]	; 0x74
   26c8c:	cmp	r3, #0
   26c90:	subne	r1, r3, #1
   26c94:	moveq	r1, r3
   26c98:	str	r0, [r5, #1624]	; 0x658
   26c9c:	ldr	r0, [pc, #3868]	; 27bc0 <__assert_fail@plt+0x153e8>
   26ca0:	bl	267e4 <__assert_fail@plt+0x1400c>
   26ca4:	cmp	r0, #0
   26ca8:	blt	295a4 <__assert_fail@plt+0x16dcc>
   26cac:	ldr	ip, [sp, #68]	; 0x44
   26cb0:	mov	r3, #0
   26cb4:	ldr	r5, [sp, #100]	; 0x64
   26cb8:	mov	r1, r3
   26cbc:	ldr	r2, [ip]
   26cc0:	ldr	ip, [sp, #28]
   26cc4:	str	r5, [sp, #120]	; 0x78
   26cc8:	mov	r5, r3
   26ccc:	strb	r3, [ip, #1676]	; 0x68c
   26cd0:	strb	r3, [ip, #1679]	; 0x68f
   26cd4:	movw	r3, #11856	; 0x2e50
   26cd8:	strb	r2, [ip, #1678]	; 0x68e
   26cdc:	movt	r3, #5
   26ce0:	str	r3, [ip, #1628]	; 0x65c
   26ce4:	ldr	ip, [sp, #80]	; 0x50
   26ce8:	str	ip, [sp, #32]
   26cec:	ldr	ip, [sp, #76]	; 0x4c
   26cf0:	add	r0, sp, #108	; 0x6c
   26cf4:	str	fp, [sp]
   26cf8:	add	r3, ip, #16
   26cfc:	add	r2, ip, #12
   26d00:	bl	1c3d8 <__assert_fail@plt+0x9c00>
   26d04:	ldr	ip, [sp, #32]
   26d08:	movw	r3, #1640	; 0x668
   26d0c:	cmp	ip, #8
   26d10:	strd	r0, [r7, r3]
   26d14:	ldrls	r1, [sp, #32]
   26d18:	bhi	29098 <__assert_fail@plt+0x168c0>
   26d1c:	ldr	r0, [sp, #108]	; 0x6c
   26d20:	add	r3, r0, r1
   26d24:	cmp	fp, r3
   26d28:	bhi	26d38 <__assert_fail@plt+0x14560>
   26d2c:	cmp	fp, r0
   26d30:	bls	26d44 <__assert_fail@plt+0x1456c>
   26d34:	rsb	r1, r0, fp
   26d38:	sub	r3, r1, #1
   26d3c:	cmp	r3, #7
   26d40:	bls	290c0 <__assert_fail@plt+0x168e8>
   26d44:	mov	r1, #1648	; 0x670
   26d48:	mov	ip, r0
   26d4c:	mov	r2, #0
   26d50:	mov	r3, #0
   26d54:	strd	r2, [r7, r1]
   26d58:	ldr	r3, [sp, #120]	; 0x78
   26d5c:	ldr	lr, [sp, #32]
   26d60:	ldr	r3, [r3, #20]
   26d64:	add	r0, ip, lr
   26d68:	str	r0, [sp, #108]	; 0x6c
   26d6c:	ldrb	r3, [r3]
   26d70:	cmp	r3, #122	; 0x7a
   26d74:	beq	291f4 <__assert_fail@plt+0x16a1c>
   26d78:	ldrb	r1, [r7, #1678]	; 0x68e
   26d7c:	mov	r0, #0
   26d80:	ldrd	r2, [sp, #40]	; 0x28
   26d84:	str	r1, [sp]
   26d88:	bl	1acc4 <__assert_fail@plt+0x84ec>
   26d8c:	ldrd	r2, [sp, #56]	; 0x38
   26d90:	str	r4, [sp]
   26d94:	mov	r6, r0
   26d98:	mov	r0, #0
   26d9c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   26da0:	ldr	ip, [sp, #120]	; 0x78
   26da4:	ldr	r4, [sp, #64]	; 0x40
   26da8:	mov	r3, r6
   26dac:	mov	r2, r8
   26db0:	movw	r1, #28092	; 0x6dbc
   26db4:	movt	r1, #5
   26db8:	str	r0, [sp]
   26dbc:	mov	r0, #1
   26dc0:	ldr	ip, [ip, #4]
   26dc4:	rsb	ip, r4, ip
   26dc8:	str	ip, [sp, #4]
   26dcc:	bl	125bc <__printf_chk@plt>
   26dd0:	ldrb	r3, [r7, #1679]	; 0x68f
   26dd4:	cmp	r3, #0
   26dd8:	bne	29080 <__assert_fail@plt+0x168a8>
   26ddc:	ldrb	r1, [r7, #1678]	; 0x68e
   26de0:	movw	r4, #1640	; 0x668
   26de4:	ldrd	r2, [r7, r4]
   26de8:	mov	r0, #0
   26dec:	movw	r9, #3452	; 0xd7c
   26df0:	movt	r9, #7
   26df4:	str	r1, [sp]
   26df8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   26dfc:	mov	r3, #1648	; 0x670
   26e00:	ldrd	r4, [r4, r7]
   26e04:	ldrd	r2, [r3, r7]
   26e08:	ldrb	r1, [r7, #1678]	; 0x68e
   26e0c:	adds	r2, r2, r4
   26e10:	adc	r3, r3, r5
   26e14:	str	r1, [sp]
   26e18:	mov	r8, r0
   26e1c:	mov	r0, #0
   26e20:	bl	1acc4 <__assert_fail@plt+0x84ec>
   26e24:	mov	r2, r8
   26e28:	movw	r1, #28132	; 0x6de4
   26e2c:	movt	r1, #5
   26e30:	mov	r3, r0
   26e34:	mov	r0, #1
   26e38:	bl	125bc <__printf_chk@plt>
   26e3c:	ldr	r4, [r9]
   26e40:	cmp	r4, #0
   26e44:	bne	26e54 <__assert_fail@plt+0x1467c>
   26e48:	ldr	r3, [sp, #132]	; 0x84
   26e4c:	cmp	r3, #0
   26e50:	bne	29260 <__assert_fail@plt+0x16a88>
   26e54:	ldr	r6, [pc, #3428]	; 27bc0 <__assert_fail@plt+0x153e8>
   26e58:	ldr	r7, [sp, #108]	; 0x6c
   26e5c:	mov	r4, #7
   26e60:	mov	r2, r7
   26e64:	cmp	sl, r2
   26e68:	bls	271e4 <__assert_fail@plt+0x14a0c>
   26e6c:	add	r0, r2, #1
   26e70:	str	r0, [sp, #108]	; 0x6c
   26e74:	ldrb	ip, [r0, #-1]
   26e78:	ands	r3, ip, #192	; 0xc0
   26e7c:	and	r5, ip, #63	; 0x3f
   26e80:	movne	ip, r3
   26e84:	sub	ip, ip, #1
   26e88:	cmp	ip, #191	; 0xbf
   26e8c:	ldrls	pc, [pc, ip, lsl #2]
   26e90:	b	2742c <__assert_fail@plt+0x14c54>
   26e94:	strdeq	r7, [r2], -r8
   26e98:	strdeq	r7, [r2], -r0
   26e9c:	andeq	r7, r2, r8, ror #5
   26ea0:	ldrdeq	r7, [r2], -r8
   26ea4:	muleq	r2, r4, r2
   26ea8:	muleq	r2, r4, r1
   26eac:	muleq	r2, r4, r1
   26eb0:	muleq	r2, r4, r1
   26eb4:	muleq	r2, r4, r2
   26eb8:	andeq	r7, r2, ip, lsr #8
   26ebc:	andeq	r7, r2, ip, lsr #8
   26ec0:	andeq	r7, r2, r4, lsr r4
   26ec4:	andeq	r7, r2, r4, ror r2
   26ec8:	andeq	r7, r2, r4, ror r2
   26ecc:	ldrdeq	r7, [r2], -ip
   26ed0:	andeq	r7, r2, ip, ror #6
   26ed4:	andeq	r7, r2, r4, asr #6
   26ed8:	andeq	r7, r2, r4, lsl #6
   26edc:	andeq	r7, r2, r8, asr r4
   26ee0:	muleq	r2, r4, r2
   26ee4:	andeq	r7, r2, r4, asr #6
   26ee8:	andeq	r7, r2, ip, ror #6
   26eec:	andeq	r7, r2, ip, lsr #8
   26ef0:	andeq	r7, r2, ip, lsr #8
   26ef4:	andeq	r7, r2, ip, lsr #8
   26ef8:	andeq	r7, r2, ip, lsr #8
   26efc:	andeq	r7, r2, ip, lsr #8
   26f00:	andeq	r7, r2, ip, lsr #8
   26f04:	andeq	r7, r2, r0, ror #5
   26f08:	andeq	r7, r2, ip, lsr #8
   26f0c:	andeq	r7, r2, ip, lsr #8
   26f10:	andeq	r7, r2, ip, lsr #8
   26f14:	andeq	r7, r2, ip, lsr #8
   26f18:	andeq	r7, r2, ip, lsr #8
   26f1c:	andeq	r7, r2, ip, lsr #8
   26f20:	andeq	r7, r2, ip, lsr #8
   26f24:	andeq	r7, r2, ip, lsr #8
   26f28:	andeq	r7, r2, ip, lsr #8
   26f2c:	andeq	r7, r2, ip, lsr #8
   26f30:	andeq	r7, r2, ip, lsr #8
   26f34:	andeq	r7, r2, ip, lsr #8
   26f38:	andeq	r7, r2, ip, lsr #8
   26f3c:	andeq	r7, r2, ip, lsr #8
   26f40:	andeq	r7, r2, ip, lsr #8
   26f44:	andeq	r7, r2, ip, lsr #8
   26f48:	andeq	r7, r2, r4, ror r2
   26f4c:	muleq	r2, r4, r2
   26f50:	andeq	r7, r2, ip, lsr #8
   26f54:	andeq	r7, r2, ip, lsr #8
   26f58:	andeq	r7, r2, ip, lsr #8
   26f5c:	andeq	r7, r2, ip, lsr #8
   26f60:	andeq	r7, r2, ip, lsr #8
   26f64:	andeq	r7, r2, ip, lsr #8
   26f68:	andeq	r7, r2, ip, lsr #8
   26f6c:	andeq	r7, r2, ip, lsr #8
   26f70:	andeq	r7, r2, ip, lsr #8
   26f74:	andeq	r7, r2, ip, lsr #8
   26f78:	andeq	r7, r2, ip, lsr #8
   26f7c:	andeq	r7, r2, ip, lsr #8
   26f80:	andeq	r7, r2, ip, lsr #8
   26f84:	andeq	r7, r2, ip, lsr #8
   26f88:	andeq	r7, r2, ip, lsr #8
   26f8c:	andeq	r7, r2, ip, lsr #8
   26f90:	andeq	r7, r2, ip, lsr #8
   26f94:	andeq	r7, r2, ip, lsr #8
   26f98:	andeq	r7, r2, ip, lsr #8
   26f9c:	andeq	r7, r2, ip, lsr #8
   26fa0:	andeq	r7, r2, ip, lsr #8
   26fa4:	andeq	r7, r2, ip, lsr #8
   26fa8:	andeq	r7, r2, ip, lsr #8
   26fac:	andeq	r7, r2, ip, lsr #8
   26fb0:	andeq	r7, r2, ip, lsr #8
   26fb4:	andeq	r7, r2, ip, lsr #8
   26fb8:	andeq	r7, r2, ip, lsr #8
   26fbc:	andeq	r7, r2, ip, lsr #8
   26fc0:	andeq	r7, r2, ip, lsr #8
   26fc4:	andeq	r7, r2, ip, lsr #8
   26fc8:	andeq	r7, r2, ip, lsr #8
   26fcc:	andeq	r7, r2, ip, lsr #8
   26fd0:	andeq	r7, r2, ip, lsr #8
   26fd4:	andeq	r7, r2, ip, lsr #8
   26fd8:	andeq	r7, r2, ip, lsr #8
   26fdc:	andeq	r7, r2, ip, lsr #8
   26fe0:	andeq	r7, r2, ip, lsr #8
   26fe4:	andeq	r7, r2, ip, lsr #8
   26fe8:	andeq	r7, r2, ip, lsr #8
   26fec:	andeq	r7, r2, ip, lsr #8
   26ff0:	andeq	r7, r2, ip, lsr #8
   26ff4:	andeq	r7, r2, ip, lsr #8
   26ff8:	andeq	r7, r2, ip, lsr #8
   26ffc:	andeq	r7, r2, ip, lsr #8
   27000:	andeq	r7, r2, ip, lsr #8
   27004:	andeq	r7, r2, ip, lsr #8
   27008:	andeq	r7, r2, ip, lsr #8
   2700c:	andeq	r7, r2, ip, lsr #8
   27010:	andeq	r7, r2, ip, lsr #8
   27014:	andeq	r7, r2, ip, lsr #8
   27018:	andeq	r7, r2, ip, lsr #8
   2701c:	andeq	r7, r2, ip, lsr #8
   27020:	andeq	r7, r2, ip, lsr #8
   27024:	andeq	r7, r2, ip, lsr #8
   27028:	andeq	r7, r2, ip, lsr #8
   2702c:	andeq	r7, r2, ip, lsr #8
   27030:	andeq	r7, r2, ip, lsr #8
   27034:	andeq	r7, r2, ip, lsr #8
   27038:	andeq	r7, r2, ip, lsr #8
   2703c:	andeq	r7, r2, ip, lsr #8
   27040:	andeq	r7, r2, ip, lsr #8
   27044:	andeq	r7, r2, ip, lsr #8
   27048:	andeq	r7, r2, ip, lsr #8
   2704c:	andeq	r7, r2, ip, lsr #8
   27050:	andeq	r7, r2, ip, lsr #8
   27054:	andeq	r7, r2, ip, lsr #8
   27058:	andeq	r7, r2, ip, lsr #8
   2705c:	andeq	r7, r2, ip, lsr #8
   27060:	andeq	r7, r2, ip, lsr #8
   27064:	andeq	r7, r2, ip, lsr #8
   27068:	andeq	r7, r2, ip, lsr #8
   2706c:	andeq	r7, r2, ip, lsr #8
   27070:	andeq	r7, r2, ip, lsr #8
   27074:	andeq	r7, r2, ip, lsr #8
   27078:	andeq	r7, r2, ip, lsr #8
   2707c:	andeq	r7, r2, ip, lsr #8
   27080:	andeq	r7, r2, ip, lsr #8
   27084:	andeq	r7, r2, ip, lsr #8
   27088:	andeq	r7, r2, ip, lsr #8
   2708c:	andeq	r7, r2, ip, lsr #8
   27090:	andeq	r7, r2, r4, ror #8
   27094:	andeq	r7, r2, ip, lsr #8
   27098:	andeq	r7, r2, ip, lsr #8
   2709c:	andeq	r7, r2, ip, lsr #8
   270a0:	andeq	r7, r2, ip, lsr #8
   270a4:	andeq	r7, r2, ip, lsr #8
   270a8:	andeq	r7, r2, ip, lsr #8
   270ac:	andeq	r7, r2, ip, lsr #8
   270b0:	andeq	r7, r2, ip, lsr #8
   270b4:	andeq	r7, r2, ip, lsr #8
   270b8:	andeq	r7, r2, ip, lsr #8
   270bc:	andeq	r7, r2, ip, lsr #8
   270c0:	andeq	r7, r2, ip, lsr #8
   270c4:	andeq	r7, r2, ip, lsr #8
   270c8:	andeq	r7, r2, ip, lsr #8
   270cc:	andeq	r7, r2, ip, lsr #8
   270d0:	andeq	r7, r2, ip, lsr #8
   270d4:	andeq	r7, r2, ip, lsr #8
   270d8:	andeq	r7, r2, ip, lsr #8
   270dc:	andeq	r7, r2, ip, lsr #8
   270e0:	andeq	r7, r2, ip, lsr #8
   270e4:	andeq	r7, r2, ip, lsr #8
   270e8:	andeq	r7, r2, ip, lsr #8
   270ec:	andeq	r7, r2, ip, lsr #8
   270f0:	andeq	r7, r2, ip, lsr #8
   270f4:	andeq	r7, r2, ip, lsr #8
   270f8:	andeq	r7, r2, ip, lsr #8
   270fc:	andeq	r7, r2, ip, lsr #8
   27100:	andeq	r7, r2, ip, lsr #8
   27104:	andeq	r7, r2, ip, lsr #8
   27108:	andeq	r7, r2, ip, lsr #8
   2710c:	andeq	r7, r2, ip, lsr #8
   27110:	andeq	r7, r2, ip, lsr #8
   27114:	andeq	r7, r2, ip, lsr #8
   27118:	andeq	r7, r2, ip, lsr #8
   2711c:	andeq	r7, r2, ip, lsr #8
   27120:	andeq	r7, r2, ip, lsr #8
   27124:	andeq	r7, r2, ip, lsr #8
   27128:	andeq	r7, r2, ip, lsr #8
   2712c:	andeq	r7, r2, ip, lsr #8
   27130:	andeq	r7, r2, ip, lsr #8
   27134:	andeq	r7, r2, ip, lsr #8
   27138:	andeq	r7, r2, ip, lsr #8
   2713c:	andeq	r7, r2, ip, lsr #8
   27140:	andeq	r7, r2, ip, lsr #8
   27144:	andeq	r7, r2, ip, lsr #8
   27148:	andeq	r7, r2, ip, lsr #8
   2714c:	andeq	r7, r2, ip, lsr #8
   27150:	andeq	r7, r2, ip, lsr #8
   27154:	andeq	r7, r2, ip, lsr #8
   27158:	andeq	r7, r2, ip, lsr #8
   2715c:	andeq	r7, r2, ip, lsr #8
   27160:	andeq	r7, r2, ip, lsr #8
   27164:	andeq	r7, r2, ip, lsr #8
   27168:	andeq	r7, r2, ip, lsr #8
   2716c:	andeq	r7, r2, ip, lsr #8
   27170:	andeq	r7, r2, ip, lsr #8
   27174:	andeq	r7, r2, ip, lsr #8
   27178:	andeq	r7, r2, ip, lsr #8
   2717c:	andeq	r7, r2, ip, lsr #8
   27180:	andeq	r7, r2, ip, lsr #8
   27184:	andeq	r7, r2, ip, lsr #8
   27188:	andeq	r7, r2, ip, lsr #8
   2718c:	andeq	r7, r2, ip, lsr #8
   27190:	andeq	r7, r2, r0, asr #7
   27194:	mov	r2, #0
   27198:	mov	r3, fp
   2719c:	add	r1, sp, #112	; 0x70
   271a0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   271a4:	ldr	r2, [sp, #108]	; 0x6c
   271a8:	ldr	r3, [sp, #112]	; 0x70
   271ac:	mov	r5, r0
   271b0:	mov	r1, r0
   271b4:	mov	r0, r6
   271b8:	add	r3, r2, r3
   271bc:	str	r3, [sp, #108]	; 0x6c
   271c0:	bl	267e4 <__assert_fail@plt+0x1400c>
   271c4:	cmp	r0, #0
   271c8:	blt	273d4 <__assert_fail@plt+0x14bfc>
   271cc:	ldr	r2, [sp, #108]	; 0x6c
   271d0:	lsl	r5, r5, #1
   271d4:	ldr	r3, [r6, #12]
   271d8:	cmp	sl, r2
   271dc:	strh	r4, [r3, r5]
   271e0:	bhi	26e6c <__assert_fail@plt+0x14694>
   271e4:	movw	r8, #11856	; 0x2e50
   271e8:	movt	r8, #5
   271ec:	str	r7, [sp, #108]	; 0x6c
   271f0:	mov	ip, r7
   271f4:	mov	r7, #1
   271f8:	cmp	sl, ip
   271fc:	bls	27248 <__assert_fail@plt+0x14a70>
   27200:	add	r0, ip, #1
   27204:	str	r0, [sp, #108]	; 0x6c
   27208:	ldrb	r4, [ip]
   2720c:	ands	r5, r4, #192	; 0xc0
   27210:	bne	27488 <__assert_fail@plt+0x14cb0>
   27214:	cmp	r4, #0
   27218:	mov	r5, r4
   2721c:	bne	27488 <__assert_fail@plt+0x14cb0>
   27220:	ldr	r3, [r9]
   27224:	cmp	r3, #0
   27228:	movne	ip, r0
   2722c:	bne	271f8 <__assert_fail@plt+0x14a20>
   27230:	movw	r0, #28864	; 0x70c0
   27234:	movt	r0, #5
   27238:	bl	12418 <puts@plt>
   2723c:	ldr	ip, [sp, #108]	; 0x6c
   27240:	cmp	sl, ip
   27244:	bhi	27200 <__assert_fail@plt+0x14a28>
   27248:	ldr	r3, [r9]
   2724c:	cmp	r3, #0
   27250:	beq	2725c <__assert_fail@plt+0x14a84>
   27254:	cmp	r7, #0
   27258:	beq	2906c <__assert_fail@plt+0x16894>
   2725c:	ldr	r4, [sp, #80]	; 0x50
   27260:	mov	r8, sl
   27264:	ldr	r5, [sp, #68]	; 0x44
   27268:	str	sl, [sp, #108]	; 0x6c
   2726c:	str	r4, [r5]
   27270:	b	269fc <__assert_fail@plt+0x14224>
   27274:	add	r1, sp, #112	; 0x70
   27278:	mov	r2, #0
   2727c:	mov	r3, fp
   27280:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27284:	ldr	r2, [sp, #108]	; 0x6c
   27288:	ldr	r3, [sp, #112]	; 0x70
   2728c:	add	r2, r2, r3
   27290:	b	26e64 <__assert_fail@plt+0x1468c>
   27294:	mov	r2, #0
   27298:	mov	r3, fp
   2729c:	add	r1, sp, #112	; 0x70
   272a0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   272a4:	ldr	r3, [sp, #112]	; 0x70
   272a8:	add	r1, sp, #112	; 0x70
   272ac:	mov	r2, #0
   272b0:	mov	r5, r0
   272b4:	ldr	r0, [sp, #108]	; 0x6c
   272b8:	add	r0, r0, r3
   272bc:	mov	r3, fp
   272c0:	str	r0, [sp, #108]	; 0x6c
   272c4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   272c8:	ldr	r2, [sp, #108]	; 0x6c
   272cc:	mov	r1, r5
   272d0:	ldr	r3, [sp, #112]	; 0x70
   272d4:	b	271b4 <__assert_fail@plt+0x149dc>
   272d8:	add	r2, r2, #5
   272dc:	b	26e64 <__assert_fail@plt+0x1468c>
   272e0:	add	r2, r2, #9
   272e4:	b	26e64 <__assert_fail@plt+0x1468c>
   272e8:	add	r2, r2, #3
   272ec:	b	26e64 <__assert_fail@plt+0x1468c>
   272f0:	add	r2, r2, #2
   272f4:	b	26e64 <__assert_fail@plt+0x1468c>
   272f8:	ldr	r5, [sp, #32]
   272fc:	add	r2, r0, r5
   27300:	b	26e64 <__assert_fail@plt+0x1468c>
   27304:	mov	r2, #0
   27308:	add	r1, sp, #112	; 0x70
   2730c:	mov	r3, fp
   27310:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27314:	ldr	ip, [sp, #108]	; 0x6c
   27318:	ldr	r0, [sp, #112]	; 0x70
   2731c:	add	r1, sp, #112	; 0x70
   27320:	mov	r2, #1
   27324:	mov	r3, fp
   27328:	add	r0, ip, r0
   2732c:	str	r0, [sp, #108]	; 0x6c
   27330:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27334:	ldr	r2, [sp, #108]	; 0x6c
   27338:	ldr	r3, [sp, #112]	; 0x70
   2733c:	add	r2, r2, r3
   27340:	b	26e64 <__assert_fail@plt+0x1468c>
   27344:	mov	r2, #0
   27348:	mov	r3, fp
   2734c:	add	r1, sp, #112	; 0x70
   27350:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27354:	add	r1, sp, #112	; 0x70
   27358:	ldr	r3, [sp, #112]	; 0x70
   2735c:	mov	r2, #1
   27360:	mov	r5, r0
   27364:	ldr	r0, [sp, #108]	; 0x6c
   27368:	b	272b8 <__assert_fail@plt+0x14ae0>
   2736c:	mov	r2, #0
   27370:	mov	r3, fp
   27374:	add	r1, sp, #112	; 0x70
   27378:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2737c:	ldr	r3, [sp, #112]	; 0x70
   27380:	mov	r2, #0
   27384:	add	r1, sp, #112	; 0x70
   27388:	mov	r5, r0
   2738c:	ldr	r0, [sp, #108]	; 0x6c
   27390:	add	r0, r0, r3
   27394:	mov	r3, fp
   27398:	str	r0, [sp, #108]	; 0x6c
   2739c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   273a0:	ldr	r2, [sp, #108]	; 0x6c
   273a4:	ldr	r3, [sp, #112]	; 0x70
   273a8:	add	r3, r2, r3
   273ac:	str	r3, [sp, #108]	; 0x6c
   273b0:	adds	r3, r3, r0
   273b4:	mov	r8, r0
   273b8:	strcc	r3, [sp, #108]	; 0x6c
   273bc:	bcs	286d8 <__assert_fail@plt+0x15f00>
   273c0:	mov	r0, r6
   273c4:	mov	r1, r5
   273c8:	bl	267e4 <__assert_fail@plt+0x1400c>
   273cc:	cmp	r0, #0
   273d0:	bge	271cc <__assert_fail@plt+0x149f4>
   273d4:	ldr	r2, [sp, #108]	; 0x6c
   273d8:	b	26e64 <__assert_fail@plt+0x1468c>
   273dc:	mov	r2, #0
   273e0:	mov	r3, fp
   273e4:	add	r1, sp, #112	; 0x70
   273e8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   273ec:	ldr	r2, [sp, #108]	; 0x6c
   273f0:	ldr	r3, [sp, #112]	; 0x70
   273f4:	add	r2, r2, r3
   273f8:	str	r2, [sp, #108]	; 0x6c
   273fc:	adds	r2, r2, r0
   27400:	mov	r5, r0
   27404:	bcc	26e64 <__assert_fail@plt+0x1468c>
   27408:	mov	r2, #5
   2740c:	movw	r1, #28140	; 0x6dec
   27410:	mov	r0, #0
   27414:	movt	r1, #5
   27418:	bl	12298 <dcgettext@plt>
   2741c:	mov	r1, r5
   27420:	bl	49bf8 <warn@@Base>
   27424:	mov	r2, sl
   27428:	b	26e64 <__assert_fail@plt+0x1468c>
   2742c:	mov	r2, r0
   27430:	b	26e64 <__assert_fail@plt+0x1468c>
   27434:	mov	r2, #0
   27438:	add	r1, sp, #112	; 0x70
   2743c:	mov	r3, fp
   27440:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27444:	ldr	ip, [sp, #108]	; 0x6c
   27448:	ldr	r0, [sp, #112]	; 0x70
   2744c:	add	r1, sp, #112	; 0x70
   27450:	mov	r2, #0
   27454:	b	27324 <__assert_fail@plt+0x14b4c>
   27458:	add	r1, sp, #112	; 0x70
   2745c:	mov	r2, #1
   27460:	b	2727c <__assert_fail@plt+0x14aa4>
   27464:	mov	r2, #0
   27468:	mov	r3, fp
   2746c:	add	r1, sp, #112	; 0x70
   27470:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27474:	ldr	r2, [sp, #108]	; 0x6c
   27478:	ldr	r3, [sp, #112]	; 0x70
   2747c:	mov	r0, r6
   27480:	mov	r1, r5
   27484:	b	271b8 <__assert_fail@plt+0x149e0>
   27488:	sub	r3, r5, #1
   2748c:	and	r4, r4, #63	; 0x3f
   27490:	cmp	r3, #191	; 0xbf
   27494:	ldrls	pc, [pc, r3, lsl #2]
   27498:	b	28698 <__assert_fail@plt+0x15ec0>
   2749c:	andeq	r8, r2, r0, rrx
   274a0:	ldrdeq	r8, [r2], -r0
   274a4:	andeq	r8, r2, r4, ror #2
   274a8:	andeq	r8, r2, ip, lsr #4
   274ac:	andeq	r7, r2, r4, asr #30
   274b0:	andeq	r8, r2, ip, ror #10
   274b4:	andeq	r8, r2, r8, asr #5
   274b8:	andeq	r8, r2, ip, lsr r3
   274bc:	andeq	r7, r2, ip, asr #31
   274c0:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   274c4:	strheq	r8, [r2], -r0
   274c8:	andeq	r8, r2, r0, asr #8
   274cc:	andeq	r7, r2, r4, ror #29
   274d0:	muleq	r2, r4, lr
   274d4:	andeq	r7, r2, ip, lsl #27
   274d8:	andeq	r7, r2, r8, ror #27
   274dc:	andeq	r7, r2, r4, asr #23
   274e0:	andeq	r7, r2, r4, ror #25
   274e4:	andeq	r7, r2, r4, lsl #25
   274e8:	andeq	r7, r2, r8, lsr fp
   274ec:	andeq	r7, r2, ip, lsr #21
   274f0:	andeq	r7, r2, ip, ror #19
   274f4:	muleq	r2, r8, r6
   274f8:	muleq	r2, r8, r6
   274fc:	muleq	r2, r8, r6
   27500:	muleq	r2, r8, r6
   27504:	muleq	r2, r8, r6
   27508:	muleq	r2, r8, r6
   2750c:	andeq	r7, r2, ip, lsr r9
   27510:	muleq	r2, r8, r6
   27514:	muleq	r2, r8, r6
   27518:	muleq	r2, r8, r6
   2751c:	muleq	r2, r8, r6
   27520:	muleq	r2, r8, r6
   27524:	muleq	r2, r8, r6
   27528:	muleq	r2, r8, r6
   2752c:	muleq	r2, r8, r6
   27530:	muleq	r2, r8, r6
   27534:	muleq	r2, r8, r6
   27538:	muleq	r2, r8, r6
   2753c:	muleq	r2, r8, r6
   27540:	muleq	r2, r8, r6
   27544:	muleq	r2, r8, r6
   27548:	muleq	r2, r8, r6
   2754c:	andeq	r7, r2, r4, asr #19
   27550:	andeq	r7, r2, r8, lsl #18
   27554:	andeq	r7, r2, r8, asr r8
   27558:	muleq	r2, r8, r6
   2755c:	muleq	r2, r8, r6
   27560:	muleq	r2, r8, r6
   27564:	muleq	r2, r8, r6
   27568:	muleq	r2, r8, r6
   2756c:	muleq	r2, r8, r6
   27570:	muleq	r2, r8, r6
   27574:	muleq	r2, r8, r6
   27578:	muleq	r2, r8, r6
   2757c:	muleq	r2, r8, r6
   27580:	muleq	r2, r8, r6
   27584:	muleq	r2, r8, r6
   27588:	muleq	r2, r8, r6
   2758c:	muleq	r2, r8, r6
   27590:	muleq	r2, r8, r6
   27594:	muleq	r2, r8, r6
   27598:	andeq	r7, r2, r8, lsl r8
   2759c:	muleq	r2, r8, r6
   275a0:	muleq	r2, r8, r6
   275a4:	muleq	r2, r8, r6
   275a8:	muleq	r2, r8, r6
   275ac:	muleq	r2, r8, r6
   275b0:	muleq	r2, r8, r6
   275b4:	muleq	r2, r8, r6
   275b8:	muleq	r2, r8, r6
   275bc:	muleq	r2, r8, r6
   275c0:	muleq	r2, r8, r6
   275c4:	muleq	r2, r8, r6
   275c8:	muleq	r2, r8, r6
   275cc:	muleq	r2, r8, r6
   275d0:	muleq	r2, r8, r6
   275d4:	muleq	r2, r8, r6
   275d8:	muleq	r2, r8, r6
   275dc:	muleq	r2, r8, r6
   275e0:	muleq	r2, r8, r6
   275e4:	muleq	r2, r8, r6
   275e8:	muleq	r2, r8, r6
   275ec:	muleq	r2, r8, r6
   275f0:	muleq	r2, r8, r6
   275f4:	muleq	r2, r8, r6
   275f8:	muleq	r2, r8, r6
   275fc:	muleq	r2, r8, r6
   27600:	muleq	r2, r8, r6
   27604:	muleq	r2, r8, r6
   27608:	muleq	r2, r8, r6
   2760c:	muleq	r2, r8, r6
   27610:	muleq	r2, r8, r6
   27614:	muleq	r2, r8, r6
   27618:	muleq	r2, r8, r6
   2761c:	muleq	r2, r8, r6
   27620:	muleq	r2, r8, r6
   27624:	muleq	r2, r8, r6
   27628:	muleq	r2, r8, r6
   2762c:	muleq	r2, r8, r6
   27630:	muleq	r2, r8, r6
   27634:	muleq	r2, r8, r6
   27638:	muleq	r2, r8, r6
   2763c:	muleq	r2, r8, r6
   27640:	muleq	r2, r8, r6
   27644:	muleq	r2, r8, r6
   27648:	muleq	r2, r8, r6
   2764c:	muleq	r2, r8, r6
   27650:	muleq	r2, r8, r6
   27654:	muleq	r2, r8, r6
   27658:	muleq	r2, r8, r6
   2765c:	muleq	r2, r8, r6
   27660:	muleq	r2, r8, r6
   27664:	muleq	r2, r8, r6
   27668:	muleq	r2, r8, r6
   2766c:	muleq	r2, r8, r6
   27670:	muleq	r2, r8, r6
   27674:	muleq	r2, r8, r6
   27678:	muleq	r2, r8, r6
   2767c:	muleq	r2, r8, r6
   27680:	muleq	r2, r8, r6
   27684:	muleq	r2, r8, r6
   27688:	muleq	r2, r8, r6
   2768c:	muleq	r2, r8, r6
   27690:	muleq	r2, r8, r6
   27694:	muleq	r2, r8, r6
   27698:	muleq	r2, ip, r7
   2769c:	muleq	r2, r8, r6
   276a0:	muleq	r2, r8, r6
   276a4:	muleq	r2, r8, r6
   276a8:	muleq	r2, r8, r6
   276ac:	muleq	r2, r8, r6
   276b0:	muleq	r2, r8, r6
   276b4:	muleq	r2, r8, r6
   276b8:	muleq	r2, r8, r6
   276bc:	muleq	r2, r8, r6
   276c0:	muleq	r2, r8, r6
   276c4:	muleq	r2, r8, r6
   276c8:	muleq	r2, r8, r6
   276cc:	muleq	r2, r8, r6
   276d0:	muleq	r2, r8, r6
   276d4:	muleq	r2, r8, r6
   276d8:	muleq	r2, r8, r6
   276dc:	muleq	r2, r8, r6
   276e0:	muleq	r2, r8, r6
   276e4:	muleq	r2, r8, r6
   276e8:	muleq	r2, r8, r6
   276ec:	muleq	r2, r8, r6
   276f0:	muleq	r2, r8, r6
   276f4:	muleq	r2, r8, r6
   276f8:	muleq	r2, r8, r6
   276fc:	muleq	r2, r8, r6
   27700:	muleq	r2, r8, r6
   27704:	muleq	r2, r8, r6
   27708:	muleq	r2, r8, r6
   2770c:	muleq	r2, r8, r6
   27710:	muleq	r2, r8, r6
   27714:	muleq	r2, r8, r6
   27718:	muleq	r2, r8, r6
   2771c:	muleq	r2, r8, r6
   27720:	muleq	r2, r8, r6
   27724:	muleq	r2, r8, r6
   27728:	muleq	r2, r8, r6
   2772c:	muleq	r2, r8, r6
   27730:	muleq	r2, r8, r6
   27734:	muleq	r2, r8, r6
   27738:	muleq	r2, r8, r6
   2773c:	muleq	r2, r8, r6
   27740:	muleq	r2, r8, r6
   27744:	muleq	r2, r8, r6
   27748:	muleq	r2, r8, r6
   2774c:	muleq	r2, r8, r6
   27750:	muleq	r2, r8, r6
   27754:	muleq	r2, r8, r6
   27758:	muleq	r2, r8, r6
   2775c:	muleq	r2, r8, r6
   27760:	muleq	r2, r8, r6
   27764:	muleq	r2, r8, r6
   27768:	muleq	r2, r8, r6
   2776c:	muleq	r2, r8, r6
   27770:	muleq	r2, r8, r6
   27774:	muleq	r2, r8, r6
   27778:	muleq	r2, r8, r6
   2777c:	muleq	r2, r8, r6
   27780:	muleq	r2, r8, r6
   27784:	muleq	r2, r8, r6
   27788:	muleq	r2, r8, r6
   2778c:	muleq	r2, r8, r6
   27790:	muleq	r2, r8, r6
   27794:	muleq	r2, r8, r6
   27798:			; <UNDEFINED> instruction: 0x000283b0
   2779c:	mov	r2, #0
   277a0:	mov	r3, fp
   277a4:	add	r1, sp, #112	; 0x70
   277a8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   277ac:	ldr	r7, [r6, #8]
   277b0:	ldr	ip, [sp, #48]	; 0x30
   277b4:	cmp	r4, r7
   277b8:	ldr	r2, [r9]
   277bc:	ldr	r3, [sp, #112]	; 0x70
   277c0:	movcc	ip, r8
   277c4:	cmp	r2, #0
   277c8:	mov	r7, ip
   277cc:	ldr	ip, [sp, #108]	; 0x6c
   277d0:	add	ip, ip, r3
   277d4:	str	ip, [sp, #108]	; 0x6c
   277d8:	mov	r5, r0
   277dc:	beq	28b80 <__assert_fail@plt+0x163a8>
   277e0:	ldrb	r3, [r7]
   277e4:	cmp	r3, #0
   277e8:	bne	28b80 <__assert_fail@plt+0x163a8>
   277ec:	sxth	r4, r4
   277f0:	ldr	r3, [r6, #28]
   277f4:	ldr	r1, [r6, #12]
   277f8:	mov	r0, #128	; 0x80
   277fc:	lsl	r2, r4, #1
   27800:	mul	r5, r3, r5
   27804:	ldr	r3, [r6, #16]
   27808:	mov	r7, #0
   2780c:	strh	r0, [r1, r2]
   27810:	str	r5, [r3, r4, lsl #2]
   27814:	b	271f8 <__assert_fail@plt+0x14a20>
   27818:	ldr	r0, [r9]
   2781c:	cmp	r0, #0
   27820:	beq	28dc4 <__assert_fail@plt+0x165ec>
   27824:	mov	r0, r6
   27828:	add	r1, sp, #124	; 0x7c
   2782c:	add	r2, sp, #116	; 0x74
   27830:	bl	1bcf0 <__assert_fail@plt+0x9518>
   27834:	ldr	r1, [r6, #24]
   27838:	mov	r7, #0
   2783c:	ldrd	r2, [r6, #32]
   27840:	ldr	ip, [sp, #108]	; 0x6c
   27844:	mul	r4, r1, r4
   27848:	adds	r2, r2, r4
   2784c:	adc	r3, r3, #0
   27850:	strd	r2, [r6, #32]
   27854:	b	271f8 <__assert_fail@plt+0x14a20>
   27858:	mov	r2, #0
   2785c:	mov	r3, fp
   27860:	add	r1, sp, #112	; 0x70
   27864:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27868:	ldr	ip, [sp, #108]	; 0x6c
   2786c:	mov	r2, #0
   27870:	mov	r3, fp
   27874:	add	r1, sp, #112	; 0x70
   27878:	mov	r4, r0
   2787c:	ldr	r0, [sp, #112]	; 0x70
   27880:	add	r0, ip, r0
   27884:	str	r0, [sp, #108]	; 0x6c
   27888:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2788c:	ldr	r2, [sp, #108]	; 0x6c
   27890:	ldr	r3, [sp, #112]	; 0x70
   27894:	add	r3, r2, r3
   27898:	str	r3, [sp, #108]	; 0x6c
   2789c:	rsbs	r2, r0, #0
   278a0:	rsc	r3, r1, #0
   278a4:	mov	r1, r4
   278a8:	mov	r0, r6
   278ac:	strd	r2, [sp, #32]
   278b0:	bl	267e4 <__assert_fail@plt+0x1400c>
   278b4:	ldr	r3, [r9]
   278b8:	ldr	r5, [sp, #48]	; 0x30
   278bc:	cmp	r0, #0
   278c0:	movge	r5, r8
   278c4:	cmp	r3, #0
   278c8:	beq	28ac8 <__assert_fail@plt+0x162f0>
   278cc:	ldrb	r3, [r5]
   278d0:	cmp	r3, #0
   278d4:	bne	28ac8 <__assert_fail@plt+0x162f0>
   278d8:	ldr	r7, [sp, #32]
   278dc:	ldr	r2, [r6, #28]
   278e0:	lsl	r1, r4, #1
   278e4:	ldr	r0, [r6, #12]
   278e8:	mov	ip, #128	; 0x80
   278ec:	mul	r2, r2, r7
   278f0:	ldr	r3, [r6, #16]
   278f4:	mov	r7, #0
   278f8:	strh	ip, [r0, r1]
   278fc:	ldr	ip, [sp, #108]	; 0x6c
   27900:	str	r2, [r3, r4, lsl #2]
   27904:	b	271f8 <__assert_fail@plt+0x14a20>
   27908:	mov	r3, fp
   2790c:	add	r1, sp, #112	; 0x70
   27910:	mov	r2, #0
   27914:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27918:	ldr	r7, [r9]
   2791c:	ldr	ip, [sp, #108]	; 0x6c
   27920:	ldr	r3, [sp, #112]	; 0x70
   27924:	cmp	r7, #0
   27928:	add	ip, ip, r3
   2792c:	str	ip, [sp, #108]	; 0x6c
   27930:	beq	29140 <__assert_fail@plt+0x16968>
   27934:	mov	r7, #0
   27938:	b	271f8 <__assert_fail@plt+0x14a20>
   2793c:	add	ip, ip, #9
   27940:	cmp	sl, ip
   27944:	bhi	28e54 <__assert_fail@plt+0x1667c>
   27948:	cmp	sl, r0
   2794c:	bls	29184 <__assert_fail@plt+0x169ac>
   27950:	rsb	r1, r0, sl
   27954:	sub	r3, r1, #1
   27958:	cmp	r3, #7
   2795c:	movhi	r5, #0
   27960:	movhi	r3, r0
   27964:	strhi	r5, [sp, #40]	; 0x28
   27968:	strhi	r5, [sp, #56]	; 0x38
   2796c:	bls	28e58 <__assert_fail@plt+0x16680>
   27970:	ldr	r0, [r9]
   27974:	add	r3, r3, #8
   27978:	str	r3, [sp, #108]	; 0x6c
   2797c:	cmp	r0, #0
   27980:	beq	28e00 <__assert_fail@plt+0x16628>
   27984:	mov	r0, r6
   27988:	add	r1, sp, #124	; 0x7c
   2798c:	add	r2, sp, #116	; 0x74
   27990:	bl	1bcf0 <__assert_fail@plt+0x9518>
   27994:	ldr	r1, [r6, #24]
   27998:	mov	r7, #0
   2799c:	ldr	r5, [sp, #40]	; 0x28
   279a0:	ldr	r4, [sp, #56]	; 0x38
   279a4:	ldr	ip, [sp, #108]	; 0x6c
   279a8:	umull	r2, r3, r5, r1
   279ac:	mla	r3, r1, r4, r3
   279b0:	ldrd	r0, [r6, #32]
   279b4:	adds	r2, r2, r0
   279b8:	adc	r3, r3, r1
   279bc:	strd	r2, [r6, #32]
   279c0:	b	271f8 <__assert_fail@plt+0x14a20>
   279c4:	ldr	r7, [r9]
   279c8:	cmp	r7, #0
   279cc:	movne	ip, r0
   279d0:	movne	r7, #0
   279d4:	bne	271f8 <__assert_fail@plt+0x14a20>
   279d8:	movw	r0, #29300	; 0x7274
   279dc:	movt	r0, #5
   279e0:	bl	12418 <puts@plt>
   279e4:	ldr	ip, [sp, #108]	; 0x6c
   279e8:	b	271f8 <__assert_fail@plt+0x14a20>
   279ec:	mov	r2, #0
   279f0:	mov	r3, fp
   279f4:	add	r1, sp, #112	; 0x70
   279f8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   279fc:	ldr	ip, [sp, #108]	; 0x6c
   27a00:	mov	r2, #0
   27a04:	mov	r3, fp
   27a08:	add	r1, sp, #112	; 0x70
   27a0c:	str	r0, [sp, #32]
   27a10:	ldr	r0, [sp, #112]	; 0x70
   27a14:	add	r0, ip, r0
   27a18:	str	r0, [sp, #108]	; 0x6c
   27a1c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27a20:	ldr	r7, [r6, #8]
   27a24:	ldr	r5, [sp, #32]
   27a28:	ldr	r2, [sp, #108]	; 0x6c
   27a2c:	ldr	r3, [sp, #112]	; 0x70
   27a30:	cmp	r5, r7
   27a34:	ldr	r4, [sp, #48]	; 0x30
   27a38:	add	r3, r2, r3
   27a3c:	movcc	r4, r8
   27a40:	cmp	sl, r3
   27a44:	str	r3, [sp, #108]	; 0x6c
   27a48:	mov	r7, r4
   27a4c:	mov	ip, r0
   27a50:	bls	288e0 <__assert_fail@plt+0x16108>
   27a54:	add	r4, r3, r0
   27a58:	str	r4, [sp, #40]	; 0x28
   27a5c:	cmp	sl, r4
   27a60:	bcc	288e0 <__assert_fail@plt+0x16108>
   27a64:	cmp	r3, r4
   27a68:	bhi	288e0 <__assert_fail@plt+0x16108>
   27a6c:	ldr	r3, [r9]
   27a70:	cmp	r3, #0
   27a74:	beq	293d4 <__assert_fail@plt+0x16bfc>
   27a78:	ldrb	r3, [r7]
   27a7c:	cmp	r3, #0
   27a80:	bne	293d4 <__assert_fail@plt+0x16bfc>
   27a84:	ldr	r5, [sp, #32]
   27a88:	mov	r2, #22
   27a8c:	ldr	r3, [r6, #12]
   27a90:	lsl	r4, r5, #1
   27a94:	strh	r2, [r3, r4]
   27a98:	ldr	r5, [sp, #40]	; 0x28
   27a9c:	mov	r7, #0
   27aa0:	str	r5, [sp, #108]	; 0x6c
   27aa4:	mov	ip, r5
   27aa8:	b	271f8 <__assert_fail@plt+0x14a20>
   27aac:	mov	r2, #0
   27ab0:	mov	r3, fp
   27ab4:	add	r1, sp, #112	; 0x70
   27ab8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27abc:	ldr	ip, [sp, #108]	; 0x6c
   27ac0:	mov	r2, #1
   27ac4:	mov	r3, fp
   27ac8:	add	r1, sp, #112	; 0x70
   27acc:	mov	r4, r0
   27ad0:	ldr	r0, [sp, #112]	; 0x70
   27ad4:	add	r0, ip, r0
   27ad8:	str	r0, [sp, #108]	; 0x6c
   27adc:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27ae0:	ldr	r2, [sp, #108]	; 0x6c
   27ae4:	ldr	r3, [sp, #112]	; 0x70
   27ae8:	mov	r1, r4
   27aec:	add	r3, r2, r3
   27af0:	str	r3, [sp, #108]	; 0x6c
   27af4:	mov	r7, r0
   27af8:	mov	r0, r6
   27afc:	bl	267e4 <__assert_fail@plt+0x1400c>
   27b00:	ldr	r3, [r9]
   27b04:	ldr	r5, [sp, #48]	; 0x30
   27b08:	cmp	r0, #0
   27b0c:	movge	r5, r8
   27b10:	cmp	r3, #0
   27b14:	beq	28afc <__assert_fail@plt+0x16324>
   27b18:	ldrb	r3, [r5]
   27b1c:	cmp	r3, #0
   27b20:	bne	28afc <__assert_fail@plt+0x16324>
   27b24:	ldr	r2, [r6, #28]
   27b28:	lsl	r1, r4, #1
   27b2c:	ldr	r0, [r6, #12]
   27b30:	mov	ip, #20
   27b34:	b	278ec <__assert_fail@plt+0x15114>
   27b38:	mov	r2, #0
   27b3c:	mov	r3, fp
   27b40:	add	r1, sp, #112	; 0x70
   27b44:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27b48:	ldr	ip, [sp, #108]	; 0x6c
   27b4c:	mov	r2, #0
   27b50:	mov	r3, fp
   27b54:	add	r1, sp, #112	; 0x70
   27b58:	mov	r4, r0
   27b5c:	ldr	r0, [sp, #112]	; 0x70
   27b60:	add	r0, ip, r0
   27b64:	str	r0, [sp, #108]	; 0x6c
   27b68:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27b6c:	ldr	r7, [r6, #8]
   27b70:	ldr	ip, [sp, #48]	; 0x30
   27b74:	cmp	r4, r7
   27b78:	ldr	r2, [r9]
   27b7c:	ldr	r3, [sp, #112]	; 0x70
   27b80:	movcc	ip, r8
   27b84:	cmp	r2, #0
   27b88:	mov	r7, ip
   27b8c:	ldr	ip, [sp, #108]	; 0x6c
   27b90:	add	ip, ip, r3
   27b94:	str	ip, [sp, #108]	; 0x6c
   27b98:	mov	r5, r0
   27b9c:	beq	28b3c <__assert_fail@plt+0x16364>
   27ba0:	ldrb	r3, [r7]
   27ba4:	cmp	r3, #0
   27ba8:	bne	28b3c <__assert_fail@plt+0x16364>
   27bac:	ldr	r3, [r6, #28]
   27bb0:	lsl	r2, r4, #1
   27bb4:	ldr	r1, [r6, #12]
   27bb8:	mov	r0, #20
   27bbc:	b	27800 <__assert_fail@plt+0x15028>
   27bc0:	andeq	r0, r7, r0, lsr #22
   27bc4:	mov	r2, #0
   27bc8:	mov	r3, fp
   27bcc:	add	r1, sp, #112	; 0x70
   27bd0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27bd4:	ldr	ip, [sp, #108]	; 0x6c
   27bd8:	mov	r2, #1
   27bdc:	mov	r3, fp
   27be0:	add	r1, sp, #112	; 0x70
   27be4:	mov	r4, r0
   27be8:	ldr	r0, [sp, #112]	; 0x70
   27bec:	add	r0, ip, r0
   27bf0:	str	r0, [sp, #108]	; 0x6c
   27bf4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27bf8:	ldr	r2, [sp, #108]	; 0x6c
   27bfc:	ldr	r3, [sp, #112]	; 0x70
   27c00:	mov	r1, r4
   27c04:	add	r3, r2, r3
   27c08:	str	r3, [sp, #108]	; 0x6c
   27c0c:	mov	r7, r0
   27c10:	mov	r0, r6
   27c14:	bl	267e4 <__assert_fail@plt+0x1400c>
   27c18:	ldr	r3, [r9]
   27c1c:	ldr	r5, [sp, #48]	; 0x30
   27c20:	cmp	r0, #0
   27c24:	movge	r5, r8
   27c28:	cmp	r3, #0
   27c2c:	beq	27c3c <__assert_fail@plt+0x15464>
   27c30:	ldrb	r3, [r5]
   27c34:	cmp	r3, #0
   27c38:	beq	278dc <__assert_fail@plt+0x15104>
   27c3c:	mov	r1, #0
   27c40:	mov	r0, r4
   27c44:	bl	1bc48 <__assert_fail@plt+0x9470>
   27c48:	ldr	ip, [r6, #28]
   27c4c:	movw	r1, #29104	; 0x71b0
   27c50:	movt	r1, #5
   27c54:	mov	r2, r5
   27c58:	mul	ip, ip, r7
   27c5c:	mov	r3, r0
   27c60:	mov	r0, #1
   27c64:	str	ip, [sp]
   27c68:	bl	125bc <__printf_chk@plt>
   27c6c:	ldrb	r3, [r5]
   27c70:	cmp	r3, #0
   27c74:	beq	278dc <__assert_fail@plt+0x15104>
   27c78:	ldr	ip, [sp, #108]	; 0x6c
   27c7c:	mov	r7, #0
   27c80:	b	271f8 <__assert_fail@plt+0x14a20>
   27c84:	mov	r2, #1
   27c88:	mov	r3, fp
   27c8c:	add	r1, sp, #112	; 0x70
   27c90:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27c94:	ldr	lr, [r6, #28]
   27c98:	ldr	r7, [r9]
   27c9c:	ldr	ip, [sp, #108]	; 0x6c
   27ca0:	asr	r5, lr, #31
   27ca4:	cmp	r7, #0
   27ca8:	umull	r2, r3, r0, lr
   27cac:	mul	r4, r0, r5
   27cb0:	ldr	r0, [sp, #112]	; 0x70
   27cb4:	mla	r1, lr, r1, r4
   27cb8:	add	ip, ip, r0
   27cbc:	str	ip, [sp, #108]	; 0x6c
   27cc0:	add	r3, r1, r3
   27cc4:	strd	r2, [r6, #56]	; 0x38
   27cc8:	bne	27934 <__assert_fail@plt+0x1515c>
   27ccc:	movw	r1, #29228	; 0x722c
   27cd0:	mov	r0, #1
   27cd4:	movt	r1, #5
   27cd8:	bl	125bc <__printf_chk@plt>
   27cdc:	ldr	ip, [sp, #108]	; 0x6c
   27ce0:	b	271f8 <__assert_fail@plt+0x14a20>
   27ce4:	mov	r2, #0
   27ce8:	mov	r3, fp
   27cec:	add	r1, sp, #112	; 0x70
   27cf0:	mov	r7, #0
   27cf4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27cf8:	ldr	ip, [sp, #108]	; 0x6c
   27cfc:	ldr	r3, [sp, #112]	; 0x70
   27d00:	mov	r2, #1
   27d04:	add	r1, sp, #112	; 0x70
   27d08:	add	ip, ip, r3
   27d0c:	mov	r3, fp
   27d10:	str	ip, [sp, #108]	; 0x6c
   27d14:	str	r0, [r6, #48]	; 0x30
   27d18:	mov	r0, ip
   27d1c:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27d20:	ldr	lr, [r6, #28]
   27d24:	ldr	r4, [r9]
   27d28:	ldr	ip, [sp, #108]	; 0x6c
   27d2c:	asr	r5, lr, #31
   27d30:	cmp	r4, r7
   27d34:	strb	r7, [r6, #69]	; 0x45
   27d38:	umull	r2, r3, r0, lr
   27d3c:	mul	r5, r0, r5
   27d40:	ldr	r0, [sp, #112]	; 0x70
   27d44:	mla	r1, lr, r1, r5
   27d48:	add	ip, ip, r0
   27d4c:	str	ip, [sp, #108]	; 0x6c
   27d50:	add	r3, r1, r3
   27d54:	strd	r2, [r6, #56]	; 0x38
   27d58:	bne	271f8 <__assert_fail@plt+0x14a20>
   27d5c:	mov	r1, r4
   27d60:	ldr	r0, [r6, #48]	; 0x30
   27d64:	bl	1bc48 <__assert_fail@plt+0x9470>
   27d68:	movw	r1, #29196	; 0x720c
   27d6c:	ldr	r3, [r6, #56]	; 0x38
   27d70:	movt	r1, #5
   27d74:	mov	r7, r4
   27d78:	mov	r2, r0
   27d7c:	mov	r0, #1
   27d80:	bl	125bc <__printf_chk@plt>
   27d84:	ldr	ip, [sp, #108]	; 0x6c
   27d88:	b	271f8 <__assert_fail@plt+0x14a20>
   27d8c:	mov	r2, #0
   27d90:	mov	r3, fp
   27d94:	add	r1, sp, #112	; 0x70
   27d98:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27d9c:	ldr	r2, [sp, #108]	; 0x6c
   27da0:	ldr	r3, [sp, #112]	; 0x70
   27da4:	add	r3, r2, r3
   27da8:	str	r3, [sp, #108]	; 0x6c
   27dac:	cmp	sl, r3
   27db0:	mov	r7, r0
   27db4:	bls	28bc4 <__assert_fail@plt+0x163ec>
   27db8:	rsb	r2, r3, sl
   27dbc:	cmp	r0, r2
   27dc0:	bhi	28bc4 <__assert_fail@plt+0x163ec>
   27dc4:	ldr	r4, [r9]
   27dc8:	cmp	r4, #0
   27dcc:	beq	294d8 <__assert_fail@plt+0x16d00>
   27dd0:	add	ip, r3, r7
   27dd4:	mov	r3, #1
   27dd8:	str	ip, [sp, #108]	; 0x6c
   27ddc:	mov	r7, #0
   27de0:	strb	r3, [r6, #69]	; 0x45
   27de4:	b	271f8 <__assert_fail@plt+0x14a20>
   27de8:	mov	r2, #0
   27dec:	mov	r3, fp
   27df0:	add	r1, sp, #112	; 0x70
   27df4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27df8:	ldr	ip, [sp, #108]	; 0x6c
   27dfc:	mov	r2, #0
   27e00:	mov	r3, fp
   27e04:	add	r1, sp, #112	; 0x70
   27e08:	str	r0, [sp, #32]
   27e0c:	ldr	r0, [sp, #112]	; 0x70
   27e10:	add	r0, ip, r0
   27e14:	str	r0, [sp, #108]	; 0x6c
   27e18:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27e1c:	ldr	r1, [r6, #8]
   27e20:	ldr	r5, [sp, #32]
   27e24:	ldr	r2, [sp, #108]	; 0x6c
   27e28:	ldr	r3, [sp, #112]	; 0x70
   27e2c:	cmp	r5, r1
   27e30:	ldr	ip, [sp, #48]	; 0x30
   27e34:	add	r3, r2, r3
   27e38:	movcc	ip, r8
   27e3c:	cmp	sl, r3
   27e40:	str	r3, [sp, #108]	; 0x6c
   27e44:	mov	r7, r0
   27e48:	bls	28900 <__assert_fail@plt+0x16128>
   27e4c:	add	r4, r3, r7
   27e50:	str	r4, [sp, #40]	; 0x28
   27e54:	cmp	sl, r4
   27e58:	bcc	28900 <__assert_fail@plt+0x16128>
   27e5c:	cmp	r3, r4
   27e60:	bhi	28900 <__assert_fail@plt+0x16128>
   27e64:	ldr	r3, [r9]
   27e68:	cmp	r3, #0
   27e6c:	beq	29454 <__assert_fail@plt+0x16c7c>
   27e70:	ldrb	r3, [ip]
   27e74:	cmp	r3, #0
   27e78:	bne	29454 <__assert_fail@plt+0x16c7c>
   27e7c:	ldr	r5, [sp, #32]
   27e80:	mov	r2, #16
   27e84:	ldr	r3, [r6, #12]
   27e88:	lsl	r4, r5, #1
   27e8c:	strh	r2, [r3, r4]
   27e90:	b	27a98 <__assert_fail@plt+0x152c0>
   27e94:	mov	r3, fp
   27e98:	add	r1, sp, #112	; 0x70
   27e9c:	mov	r2, #0
   27ea0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27ea4:	ldr	r7, [r9]
   27ea8:	ldr	ip, [sp, #108]	; 0x6c
   27eac:	ldr	r3, [sp, #112]	; 0x70
   27eb0:	cmp	r7, #0
   27eb4:	add	ip, ip, r3
   27eb8:	str	ip, [sp, #108]	; 0x6c
   27ebc:	str	r0, [r6, #56]	; 0x38
   27ec0:	str	r1, [r6, #60]	; 0x3c
   27ec4:	bne	27934 <__assert_fail@plt+0x1515c>
   27ec8:	mov	r2, r0
   27ecc:	movw	r1, #28832	; 0x70a0
   27ed0:	mov	r0, #1
   27ed4:	movt	r1, #5
   27ed8:	bl	125bc <__printf_chk@plt>
   27edc:	ldr	ip, [sp, #108]	; 0x6c
   27ee0:	b	271f8 <__assert_fail@plt+0x14a20>
   27ee4:	mov	r2, #0
   27ee8:	mov	r3, fp
   27eec:	add	r1, sp, #112	; 0x70
   27ef0:	mov	r7, #0
   27ef4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27ef8:	ldr	r3, [r9]
   27efc:	ldr	ip, [sp, #108]	; 0x6c
   27f00:	ldr	r2, [sp, #112]	; 0x70
   27f04:	cmp	r3, r7
   27f08:	strb	r7, [r6, #69]	; 0x45
   27f0c:	add	ip, ip, r2
   27f10:	str	ip, [sp, #108]	; 0x6c
   27f14:	str	r0, [r6, #48]	; 0x30
   27f18:	bne	271f8 <__assert_fail@plt+0x14a20>
   27f1c:	mov	r1, r3
   27f20:	mov	r7, r3
   27f24:	bl	1bc48 <__assert_fail@plt+0x9470>
   27f28:	movw	r1, #28800	; 0x7080
   27f2c:	movt	r1, #5
   27f30:	mov	r2, r0
   27f34:	mov	r0, #1
   27f38:	bl	125bc <__printf_chk@plt>
   27f3c:	ldr	ip, [sp, #108]	; 0x6c
   27f40:	b	271f8 <__assert_fail@plt+0x14a20>
   27f44:	mov	r2, #0
   27f48:	mov	r3, fp
   27f4c:	add	r1, sp, #112	; 0x70
   27f50:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27f54:	ldr	ip, [sp, #108]	; 0x6c
   27f58:	mov	r2, #0
   27f5c:	mov	r3, fp
   27f60:	add	r1, sp, #112	; 0x70
   27f64:	mov	r4, r0
   27f68:	ldr	r0, [sp, #112]	; 0x70
   27f6c:	add	r0, ip, r0
   27f70:	str	r0, [sp, #108]	; 0x6c
   27f74:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27f78:	ldr	r7, [r6, #8]
   27f7c:	ldr	ip, [sp, #48]	; 0x30
   27f80:	cmp	r4, r7
   27f84:	ldr	r2, [r9]
   27f88:	ldr	r3, [sp, #112]	; 0x70
   27f8c:	movcc	ip, r8
   27f90:	cmp	r2, #0
   27f94:	mov	r7, ip
   27f98:	ldr	ip, [sp, #108]	; 0x6c
   27f9c:	add	ip, ip, r3
   27fa0:	str	ip, [sp, #108]	; 0x6c
   27fa4:	mov	r5, r0
   27fa8:	beq	28bd4 <__assert_fail@plt+0x163fc>
   27fac:	ldrb	r3, [r7]
   27fb0:	cmp	r3, #0
   27fb4:	bne	28bd4 <__assert_fail@plt+0x163fc>
   27fb8:	ldr	r3, [r6, #28]
   27fbc:	lsl	r2, r4, #1
   27fc0:	ldr	r1, [r6, #12]
   27fc4:	mov	r0, #128	; 0x80
   27fc8:	b	27800 <__assert_fail@plt+0x15028>
   27fcc:	mov	r2, #0
   27fd0:	mov	r3, fp
   27fd4:	add	r1, sp, #112	; 0x70
   27fd8:	bl	1c634 <__assert_fail@plt+0x9e5c>
   27fdc:	ldr	ip, [sp, #108]	; 0x6c
   27fe0:	mov	r2, #0
   27fe4:	mov	r3, fp
   27fe8:	add	r1, sp, #112	; 0x70
   27fec:	mov	r5, r0
   27ff0:	ldr	r0, [sp, #112]	; 0x70
   27ff4:	add	r0, ip, r0
   27ff8:	str	r0, [sp, #108]	; 0x6c
   27ffc:	bl	1c634 <__assert_fail@plt+0x9e5c>
   28000:	ldr	r7, [r6, #8]
   28004:	ldr	ip, [sp, #48]	; 0x30
   28008:	cmp	r5, r7
   2800c:	ldr	r2, [r9]
   28010:	ldr	r3, [sp, #112]	; 0x70
   28014:	movcc	ip, r8
   28018:	cmp	r2, #0
   2801c:	mov	r7, ip
   28020:	ldr	ip, [sp, #108]	; 0x6c
   28024:	add	ip, ip, r3
   28028:	str	ip, [sp, #108]	; 0x6c
   2802c:	mov	r4, r0
   28030:	beq	28cc8 <__assert_fail@plt+0x164f0>
   28034:	ldrb	r3, [r7]
   28038:	cmp	r3, #0
   2803c:	bne	28cc8 <__assert_fail@plt+0x164f0>
   28040:	ldr	r1, [r6, #12]
   28044:	lsl	r2, r5, #1
   28048:	ldr	r3, [r6, #16]
   2804c:	mov	r0, #9
   28050:	mov	r7, #0
   28054:	strh	r0, [r1, r2]
   28058:	str	r4, [r3, r5, lsl #2]
   2805c:	b	271f8 <__assert_fail@plt+0x14a20>
   28060:	ldr	r4, [sp, #76]	; 0x4c
   28064:	add	r0, sp, #108	; 0x6c
   28068:	ldrb	r1, [r6, #68]	; 0x44
   2806c:	add	r2, r4, #12
   28070:	add	r3, r4, #16
   28074:	str	sl, [sp]
   28078:	bl	1c3d8 <__assert_fail@plt+0x9c00>
   2807c:	mov	r4, r0
   28080:	ldr	r0, [r9]
   28084:	mov	r5, r1
   28088:	cmp	r0, #0
   2808c:	beq	28d98 <__assert_fail@plt+0x165c0>
   28090:	mov	r0, r6
   28094:	add	r1, sp, #124	; 0x7c
   28098:	add	r2, sp, #116	; 0x74
   2809c:	bl	1bcf0 <__assert_fail@plt+0x9518>
   280a0:	strd	r4, [r6, #32]
   280a4:	mov	r7, #0
   280a8:	ldr	ip, [sp, #108]	; 0x6c
   280ac:	b	271f8 <__assert_fail@plt+0x14a20>
   280b0:	ldr	r3, [r9]
   280b4:	cmp	r3, #0
   280b8:	beq	29120 <__assert_fail@plt+0x16948>
   280bc:	ldr	ip, [sp, #52]	; 0x34
   280c0:	cmp	ip, #0
   280c4:	beq	290fc <__assert_fail@plt+0x16924>
   280c8:	ldr	r4, [sp, #52]	; 0x34
   280cc:	mov	r0, r6
   280d0:	ldrd	r2, [ip, #56]	; 0x38
   280d4:	ldr	r5, [sp, #52]	; 0x34
   280d8:	ldr	r1, [r4, #64]	; 0x40
   280dc:	ldr	ip, [ip, #48]	; 0x30
   280e0:	ldr	r4, [r4]
   280e4:	strd	r2, [r6, #56]	; 0x38
   280e8:	ldrb	r3, [r5, #69]	; 0x45
   280ec:	str	r1, [r6, #64]	; 0x40
   280f0:	ldr	r1, [r5, #8]
   280f4:	str	ip, [r6, #48]	; 0x30
   280f8:	strb	r3, [r6, #69]	; 0x45
   280fc:	sub	r1, r1, #1
   28100:	bl	267e4 <__assert_fail@plt+0x1400c>
   28104:	cmp	r0, #0
   28108:	blt	293a4 <__assert_fail@plt+0x16bcc>
   2810c:	ldr	ip, [sp, #52]	; 0x34
   28110:	mov	r7, #0
   28114:	ldr	r0, [r6, #12]
   28118:	ldr	r2, [ip, #8]
   2811c:	ldr	r1, [ip, #12]
   28120:	lsl	r2, r2, #1
   28124:	bl	1222c <memcpy@plt>
   28128:	ldr	r5, [sp, #52]	; 0x34
   2812c:	ldr	r0, [r6, #16]
   28130:	ldr	r2, [r5, #8]
   28134:	ldr	r1, [r5, #16]
   28138:	lsl	r2, r2, #2
   2813c:	bl	1222c <memcpy@plt>
   28140:	ldr	r0, [r5, #12]
   28144:	bl	121f0 <free@plt>
   28148:	ldr	r0, [r5, #16]
   2814c:	bl	121f0 <free@plt>
   28150:	ldr	r0, [sp, #52]	; 0x34
   28154:	bl	121f0 <free@plt>
   28158:	str	r4, [sp, #52]	; 0x34
   2815c:	ldr	ip, [sp, #108]	; 0x6c
   28160:	b	271f8 <__assert_fail@plt+0x14a20>
   28164:	add	ip, ip, #3
   28168:	cmp	sl, ip
   2816c:	bhi	28e74 <__assert_fail@plt+0x1669c>
   28170:	cmp	sl, r0
   28174:	bls	29198 <__assert_fail@plt+0x169c0>
   28178:	rsb	r1, r0, sl
   2817c:	sub	r3, r1, #1
   28180:	cmp	r3, #7
   28184:	movhi	r4, #0
   28188:	movhi	r3, r0
   2818c:	strhi	r4, [sp, #40]	; 0x28
   28190:	strhi	r4, [sp, #56]	; 0x38
   28194:	bls	28e78 <__assert_fail@plt+0x166a0>
   28198:	ldr	r0, [r9]
   2819c:	add	r3, r3, #2
   281a0:	str	r3, [sp, #108]	; 0x6c
   281a4:	cmp	r0, #0
   281a8:	bne	28854 <__assert_fail@plt+0x1607c>
   281ac:	ldr	r1, [r6, #24]
   281b0:	ldrd	r2, [r6, #32]
   281b4:	ldr	r4, [sp, #40]	; 0x28
   281b8:	ldr	r5, [sp, #56]	; 0x38
   281bc:	strd	r2, [sp, #32]
   281c0:	umull	r2, r3, r4, r1
   281c4:	ldrb	ip, [r6, #70]	; 0x46
   281c8:	mul	r7, r4, r1
   281cc:	str	ip, [sp]
   281d0:	mla	r3, r1, r5, r3
   281d4:	ldrd	r4, [sp, #32]
   281d8:	adds	r2, r2, r4
   281dc:	adc	r3, r3, r5
   281e0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   281e4:	movw	r1, #28368	; 0x6ed0
   281e8:	mov	r2, r7
   281ec:	movt	r1, #5
   281f0:	mov	r3, r0
   281f4:	mov	r0, #1
   281f8:	bl	125bc <__printf_chk@plt>
   281fc:	ldr	lr, [r6, #24]
   28200:	mov	r7, #0
   28204:	ldr	r5, [sp, #40]	; 0x28
   28208:	ldr	r4, [sp, #56]	; 0x38
   2820c:	ldrd	r2, [r6, #32]
   28210:	umull	r0, r1, r5, lr
   28214:	ldr	ip, [sp, #108]	; 0x6c
   28218:	adds	r2, r2, r0
   2821c:	mla	r1, lr, r4, r1
   28220:	adc	r3, r3, r1
   28224:	strd	r2, [r6, #32]
   28228:	b	271f8 <__assert_fail@plt+0x14a20>
   2822c:	add	ip, ip, #5
   28230:	cmp	sl, ip
   28234:	bhi	28e94 <__assert_fail@plt+0x166bc>
   28238:	cmp	sl, r0
   2823c:	bls	2915c <__assert_fail@plt+0x16984>
   28240:	rsb	r1, r0, sl
   28244:	sub	r3, r1, #1
   28248:	cmp	r3, #7
   2824c:	movhi	r4, #0
   28250:	movhi	r3, r0
   28254:	strhi	r4, [sp, #40]	; 0x28
   28258:	strhi	r4, [sp, #56]	; 0x38
   2825c:	bls	28e98 <__assert_fail@plt+0x166c0>
   28260:	ldr	r0, [r9]
   28264:	add	r3, r3, #4
   28268:	str	r3, [sp, #108]	; 0x6c
   2826c:	cmp	r0, #0
   28270:	bne	28854 <__assert_fail@plt+0x1607c>
   28274:	ldr	r1, [r6, #24]
   28278:	ldrd	r2, [r6, #32]
   2827c:	ldr	r4, [sp, #40]	; 0x28
   28280:	ldr	r5, [sp, #56]	; 0x38
   28284:	strd	r2, [sp, #32]
   28288:	umull	r2, r3, r4, r1
   2828c:	ldrb	ip, [r6, #70]	; 0x46
   28290:	mul	r7, r4, r1
   28294:	str	ip, [sp]
   28298:	mla	r3, r1, r5, r3
   2829c:	ldrd	r4, [sp, #32]
   282a0:	adds	r2, r2, r4
   282a4:	adc	r3, r3, r5
   282a8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   282ac:	mov	r2, r7
   282b0:	movw	r1, #28404	; 0x6ef4
   282b4:	movt	r1, #5
   282b8:	mov	r3, r0
   282bc:	mov	r0, #1
   282c0:	bl	125bc <__printf_chk@plt>
   282c4:	b	281fc <__assert_fail@plt+0x15a24>
   282c8:	mov	r2, #0
   282cc:	mov	r3, fp
   282d0:	add	r1, sp, #112	; 0x70
   282d4:	bl	1c634 <__assert_fail@plt+0x9e5c>
   282d8:	ldr	r5, [r6, #8]
   282dc:	ldr	ip, [sp, #48]	; 0x30
   282e0:	ldr	r2, [r9]
   282e4:	ldr	r3, [sp, #112]	; 0x70
   282e8:	cmp	r0, r5
   282ec:	mov	r4, r0
   282f0:	movcc	ip, r8
   282f4:	cmp	r2, #0
   282f8:	mov	r5, ip
   282fc:	ldr	ip, [sp, #108]	; 0x6c
   28300:	add	ip, ip, r3
   28304:	str	ip, [sp, #108]	; 0x6c
   28308:	beq	28c18 <__assert_fail@plt+0x16440>
   2830c:	ldrb	r3, [r5]
   28310:	cmp	r3, #0
   28314:	bne	28c18 <__assert_fail@plt+0x16440>
   28318:	ldr	r0, [r6, #12]
   2831c:	lsl	r1, r4, #1
   28320:	ldr	r2, [r6, #16]
   28324:	mov	r3, #0
   28328:	mov	lr, #7
   2832c:	mov	r7, r3
   28330:	strh	lr, [r0, r1]
   28334:	str	r3, [r2, r4, lsl #2]
   28338:	b	271f8 <__assert_fail@plt+0x14a20>
   2833c:	mov	r2, #0
   28340:	mov	r3, fp
   28344:	add	r1, sp, #112	; 0x70
   28348:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2834c:	ldr	r5, [r6, #8]
   28350:	ldr	ip, [sp, #48]	; 0x30
   28354:	ldr	r2, [r9]
   28358:	ldr	r3, [sp, #112]	; 0x70
   2835c:	cmp	r0, r5
   28360:	mov	r4, r0
   28364:	movcc	ip, r8
   28368:	cmp	r2, #0
   2836c:	mov	r5, ip
   28370:	ldr	ip, [sp, #108]	; 0x6c
   28374:	add	ip, ip, r3
   28378:	str	ip, [sp, #108]	; 0x6c
   2837c:	beq	28d10 <__assert_fail@plt+0x16538>
   28380:	ldrb	r3, [r5]
   28384:	cmp	r3, #0
   28388:	bne	28d10 <__assert_fail@plt+0x16538>
   2838c:	ldr	r0, [r6, #12]
   28390:	lsl	r1, r4, #1
   28394:	ldr	r2, [r6, #16]
   28398:	mov	r3, #0
   2839c:	mov	lr, #8
   283a0:	mov	r7, r3
   283a4:	strh	lr, [r0, r1]
   283a8:	str	r3, [r2, r4, lsl #2]
   283ac:	b	271f8 <__assert_fail@plt+0x14a20>
   283b0:	ldr	r3, [sp, #120]	; 0x78
   283b4:	ldr	r2, [r3, #8]
   283b8:	cmp	r4, r2
   283bc:	bcs	28d70 <__assert_fail@plt+0x16598>
   283c0:	ldr	r5, [r6, #8]
   283c4:	ldr	ip, [sp, #48]	; 0x30
   283c8:	cmp	r4, r5
   283cc:	movcc	ip, r8
   283d0:	mov	r5, ip
   283d4:	ldr	r2, [r9]
   283d8:	cmp	r2, #0
   283dc:	beq	28c50 <__assert_fail@plt+0x16478>
   283e0:	ldrb	r2, [r5]
   283e4:	cmp	r2, #0
   283e8:	bne	28c50 <__assert_fail@plt+0x16478>
   283ec:	mov	ip, r0
   283f0:	sxth	r4, r4
   283f4:	ldr	r1, [r3, #12]
   283f8:	ldr	lr, [r3, #16]
   283fc:	lsl	r3, r4, #1
   28400:	ldr	r2, [r6, #12]
   28404:	ldr	r0, [r6, #16]
   28408:	ldrh	r1, [r1, r3]
   2840c:	ldr	lr, [lr, r4, lsl #2]
   28410:	strh	r1, [r2, r3]
   28414:	str	lr, [r0, r4, lsl #2]
   28418:	ldr	r7, [r9]
   2841c:	cmp	r7, #0
   28420:	beq	271f8 <__assert_fail@plt+0x14a20>
   28424:	sxth	r1, r1
   28428:	cmn	r1, #1
   2842c:	moveq	r1, #7
   28430:	moveq	r7, #0
   28434:	strheq	r1, [r2, r3]
   28438:	bne	27934 <__assert_fail@plt+0x1515c>
   2843c:	b	271f8 <__assert_fail@plt+0x14a20>
   28440:	mov	r2, #0
   28444:	mov	r3, fp
   28448:	add	r1, sp, #112	; 0x70
   2844c:	mov	r7, #0
   28450:	bl	1c634 <__assert_fail@plt+0x9e5c>
   28454:	ldr	ip, [sp, #108]	; 0x6c
   28458:	ldr	r3, [sp, #112]	; 0x70
   2845c:	add	r1, sp, #112	; 0x70
   28460:	mov	r2, #0
   28464:	add	ip, ip, r3
   28468:	mov	r3, fp
   2846c:	str	ip, [sp, #108]	; 0x6c
   28470:	str	r0, [r6, #48]	; 0x30
   28474:	mov	r0, ip
   28478:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2847c:	ldr	r4, [r9]
   28480:	ldr	ip, [sp, #108]	; 0x6c
   28484:	ldr	r3, [sp, #112]	; 0x70
   28488:	cmp	r4, r7
   2848c:	strb	r7, [r6, #69]	; 0x45
   28490:	add	ip, ip, r3
   28494:	str	ip, [sp, #108]	; 0x6c
   28498:	strd	r0, [r6, #56]	; 0x38
   2849c:	bne	271f8 <__assert_fail@plt+0x14a20>
   284a0:	mov	r1, r4
   284a4:	ldr	r0, [r6, #48]	; 0x30
   284a8:	bl	1bc48 <__assert_fail@plt+0x9470>
   284ac:	movw	r1, #28768	; 0x7060
   284b0:	ldr	r3, [r6, #56]	; 0x38
   284b4:	movt	r1, #5
   284b8:	mov	r7, r4
   284bc:	mov	r2, r0
   284c0:	mov	r0, #1
   284c4:	bl	125bc <__printf_chk@plt>
   284c8:	ldr	ip, [sp, #108]	; 0x6c
   284cc:	b	271f8 <__assert_fail@plt+0x14a20>
   284d0:	add	ip, ip, #2
   284d4:	cmp	fp, ip
   284d8:	bhi	28d50 <__assert_fail@plt+0x16578>
   284dc:	cmp	fp, r0
   284e0:	bls	29170 <__assert_fail@plt+0x16998>
   284e4:	rsb	r1, r0, fp
   284e8:	sub	r3, r1, #1
   284ec:	cmp	r3, #7
   284f0:	movhi	r4, #0
   284f4:	movhi	r3, r0
   284f8:	strhi	r4, [sp, #40]	; 0x28
   284fc:	strhi	r4, [sp, #56]	; 0x38
   28500:	bls	28d54 <__assert_fail@plt+0x1657c>
   28504:	ldr	r0, [r9]
   28508:	add	r3, r3, #1
   2850c:	str	r3, [sp, #108]	; 0x6c
   28510:	cmp	r0, #0
   28514:	bne	28854 <__assert_fail@plt+0x1607c>
   28518:	ldr	r1, [r6, #24]
   2851c:	ldrd	r2, [r6, #32]
   28520:	ldr	r4, [sp, #40]	; 0x28
   28524:	ldr	r5, [sp, #56]	; 0x38
   28528:	strd	r2, [sp, #32]
   2852c:	umull	r2, r3, r4, r1
   28530:	ldrb	ip, [r6, #70]	; 0x46
   28534:	mul	r7, r4, r1
   28538:	str	ip, [sp]
   2853c:	mla	r3, r1, r5, r3
   28540:	ldrd	r4, [sp, #32]
   28544:	adds	r2, r2, r4
   28548:	adc	r3, r3, r5
   2854c:	bl	1acc4 <__assert_fail@plt+0x84ec>
   28550:	mov	r2, r7
   28554:	movw	r1, #28332	; 0x6eac
   28558:	movt	r1, #5
   2855c:	mov	r3, r0
   28560:	mov	r0, #1
   28564:	bl	125bc <__printf_chk@plt>
   28568:	b	281fc <__assert_fail@plt+0x15a24>
   2856c:	mov	r2, #0
   28570:	mov	r3, fp
   28574:	add	r1, sp, #112	; 0x70
   28578:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2857c:	ldr	r3, [sp, #120]	; 0x78
   28580:	ldr	ip, [sp, #108]	; 0x6c
   28584:	ldr	r1, [sp, #112]	; 0x70
   28588:	ldr	r2, [r3, #8]
   2858c:	add	ip, ip, r1
   28590:	str	ip, [sp, #108]	; 0x6c
   28594:	mov	r4, r0
   28598:	cmp	r4, r2
   2859c:	bcs	28d48 <__assert_fail@plt+0x16570>
   285a0:	ldr	r5, [r6, #8]
   285a4:	ldr	lr, [sp, #48]	; 0x30
   285a8:	cmp	r4, r5
   285ac:	movcc	lr, r8
   285b0:	mov	r5, lr
   285b4:	ldr	r2, [r9]
   285b8:	cmp	r2, #0
   285bc:	beq	28c8c <__assert_fail@plt+0x164b4>
   285c0:	ldrb	r2, [r5]
   285c4:	cmp	r2, #0
   285c8:	bne	28c8c <__assert_fail@plt+0x164b4>
   285cc:	ldr	r1, [r3, #12]
   285d0:	lsl	r2, r4, #1
   285d4:	ldr	r3, [r3, #16]
   285d8:	mov	r7, #0
   285dc:	ldr	r0, [r6, #12]
   285e0:	ldrh	lr, [r1, r2]
   285e4:	ldr	r1, [r3, r4, lsl #2]
   285e8:	ldr	r3, [r6, #16]
   285ec:	strh	lr, [r0, r2]
   285f0:	str	r1, [r3, r4, lsl #2]
   285f4:	b	271f8 <__assert_fail@plt+0x14a20>
   285f8:	ldr	r3, [r9]
   285fc:	cmp	r3, #0
   28600:	beq	29130 <__assert_fail@plt+0x16958>
   28604:	mov	r0, #72	; 0x48
   28608:	mov	r7, #0
   2860c:	bl	12358 <xmalloc@plt>
   28610:	ldrd	r2, [r6, #56]	; 0x38
   28614:	ldr	ip, [r6, #8]
   28618:	mov	r1, #2
   2861c:	ldr	lr, [r6, #48]	; 0x30
   28620:	strd	r2, [r0, #56]	; 0x38
   28624:	mov	r4, r0
   28628:	ldrb	r3, [r6, #69]	; 0x45
   2862c:	mov	r0, ip
   28630:	ldr	r2, [r6, #64]	; 0x40
   28634:	str	lr, [r4, #48]	; 0x30
   28638:	str	ip, [r4, #8]
   2863c:	strb	r3, [r4, #69]	; 0x45
   28640:	str	r2, [r4, #64]	; 0x40
   28644:	bl	21a60 <__assert_fail@plt+0xf288>
   28648:	mov	r1, #4
   2864c:	str	r0, [r4, #12]
   28650:	ldr	r0, [r4, #8]
   28654:	bl	21a60 <__assert_fail@plt+0xf288>
   28658:	ldr	r2, [r4, #8]
   2865c:	ldr	r1, [r6, #12]
   28660:	lsl	r2, r2, #1
   28664:	str	r0, [r4, #16]
   28668:	ldr	r0, [r4, #12]
   2866c:	bl	1222c <memcpy@plt>
   28670:	ldr	r2, [r4, #8]
   28674:	ldr	r0, [r4, #16]
   28678:	ldr	r1, [r6, #16]
   2867c:	lsl	r2, r2, #2
   28680:	bl	1222c <memcpy@plt>
   28684:	ldr	r5, [sp, #52]	; 0x34
   28688:	ldr	ip, [sp, #108]	; 0x6c
   2868c:	str	r4, [sp, #52]	; 0x34
   28690:	str	r5, [r4]
   28694:	b	271f8 <__assert_fail@plt+0x14a20>
   28698:	sub	r3, r5, #28
   2869c:	cmp	r3, #35	; 0x23
   286a0:	bhi	28d78 <__assert_fail@plt+0x165a0>
   286a4:	mov	r2, #5
   286a8:	movw	r1, #29416	; 0x72e8
   286ac:	mov	r0, #0
   286b0:	movt	r1, #5
   286b4:	bl	12298 <dcgettext@plt>
   286b8:	mov	r2, r5
   286bc:	mov	r1, r0
   286c0:	mov	r0, #1
   286c4:	bl	125bc <__printf_chk@plt>
   286c8:	str	sl, [sp, #108]	; 0x6c
   286cc:	mov	ip, sl
   286d0:	mov	r7, #0
   286d4:	b	271f8 <__assert_fail@plt+0x14a20>
   286d8:	mov	r2, #5
   286dc:	movw	r1, #28180	; 0x6e14
   286e0:	mov	r0, #0
   286e4:	movt	r1, #5
   286e8:	bl	12298 <dcgettext@plt>
   286ec:	mov	r1, r8
   286f0:	bl	49bf8 <warn@@Base>
   286f4:	str	sl, [sp, #108]	; 0x6c
   286f8:	b	273c0 <__assert_fail@plt+0x14be8>
   286fc:	mov	r0, #0
   28700:	mov	r1, #0
   28704:	strd	r0, [sp, #56]	; 0x38
   28708:	ldrd	r0, [sp, #56]	; 0x38
   2870c:	mov	r3, #0
   28710:	mvn	r2, #0
   28714:	cmp	r1, r3
   28718:	cmpeq	r0, r2
   2871c:	movne	r3, #0
   28720:	moveq	r3, #1
   28724:	cmp	r4, #4
   28728:	movne	r3, #0
   2872c:	andeq	r3, r3, #1
   28730:	cmp	r3, #0
   28734:	bne	26b38 <__assert_fail@plt+0x14360>
   28738:	and	r3, r0, r1
   2873c:	cmp	r4, #8
   28740:	cmneq	r3, #1
   28744:	beq	26b38 <__assert_fail@plt+0x14360>
   28748:	ldr	ip, [sp, #64]	; 0x40
   2874c:	ldr	lr, [sp, #56]	; 0x38
   28750:	add	r5, ip, lr
   28754:	cmp	r5, r8
   28758:	bls	26be0 <__assert_fail@plt+0x14408>
   2875c:	ldr	ip, [sp, #88]	; 0x58
   28760:	cmp	ip, #0
   28764:	str	ip, [sp, #120]	; 0x78
   28768:	beq	2879c <__assert_fail@plt+0x15fc4>
   2876c:	ldr	r3, [ip, #4]
   28770:	cmp	r3, r5
   28774:	beq	29594 <__assert_fail@plt+0x16dbc>
   28778:	mov	r3, ip
   2877c:	b	2878c <__assert_fail@plt+0x15fb4>
   28780:	ldr	r2, [r3, #4]
   28784:	cmp	r2, r5
   28788:	beq	28930 <__assert_fail@plt+0x16158>
   2878c:	ldr	r3, [r3]
   28790:	cmp	r3, #0
   28794:	bne	28780 <__assert_fail@plt+0x15fa8>
   28798:	str	r3, [sp, #120]	; 0x78
   2879c:	add	r7, r5, #4
   287a0:	cmp	fp, r7
   287a4:	movhi	r1, #4
   287a8:	bls	29534 <__assert_fail@plt+0x16d5c>
   287ac:	ldr	ip, [sp, #84]	; 0x54
   287b0:	mov	r0, r5
   287b4:	ldr	r3, [ip]
   287b8:	blx	r3
   287bc:	mvn	r2, #0
   287c0:	mov	r3, #0
   287c4:	cmp	r1, r3
   287c8:	cmpeq	r0, r2
   287cc:	strd	r0, [sp, #40]	; 0x28
   287d0:	bne	295ec <__assert_fail@plt+0x16e14>
   287d4:	add	r2, r5, #12
   287d8:	cmp	fp, r2
   287dc:	bls	295d0 <__assert_fail@plt+0x16df8>
   287e0:	mov	r1, #8
   287e4:	ldr	ip, [sp, #84]	; 0x54
   287e8:	mov	r0, r7
   287ec:	mov	r7, r2
   287f0:	mov	r6, #8
   287f4:	ldr	r3, [ip]
   287f8:	blx	r3
   287fc:	strd	r0, [sp, #40]	; 0x28
   28800:	ldrd	r0, [sp, #40]	; 0x28
   28804:	orrs	r1, r0, r1
   28808:	beq	2884c <__assert_fail@plt+0x16074>
   2880c:	add	r9, r7, r6
   28810:	cmp	fp, r9
   28814:	bhi	295f4 <__assert_fail@plt+0x16e1c>
   28818:	cmp	r7, fp
   2881c:	rsbcc	r1, r7, fp
   28820:	bcc	295f8 <__assert_fail@plt+0x16e20>
   28824:	ldr	ip, [sp, #92]	; 0x5c
   28828:	mov	r0, #0
   2882c:	mov	r1, #0
   28830:	cmp	ip, #0
   28834:	beq	29620 <__assert_fail@plt+0x16e48>
   28838:	orrs	lr, r0, r1
   2883c:	movne	r3, #0
   28840:	moveq	r3, #1
   28844:	cmp	r3, #0
   28848:	bne	29668 <__assert_fail@plt+0x16e90>
   2884c:	ldr	r5, [sp, #120]	; 0x78
   28850:	b	2955c <__assert_fail@plt+0x16d84>
   28854:	mov	r0, r6
   28858:	add	r1, sp, #124	; 0x7c
   2885c:	add	r2, sp, #116	; 0x74
   28860:	bl	1bcf0 <__assert_fail@plt+0x9518>
   28864:	b	281fc <__assert_fail@plt+0x15a24>
   28868:	ldrd	r2, [sp, #40]	; 0x28
   2886c:	mov	r0, #0
   28870:	str	r4, [sp]
   28874:	mov	sl, fp
   28878:	bl	1acc4 <__assert_fail@plt+0x84ec>
   2887c:	ldr	r5, [sp, #64]	; 0x40
   28880:	rsb	r2, r5, r8
   28884:	mov	r1, r0
   28888:	movw	r0, #27564	; 0x6bac
   2888c:	movt	r0, #5
   28890:	bl	49bf8 <warn@@Base>
   28894:	ldr	r0, [sp, #108]	; 0x6c
   28898:	b	26b04 <__assert_fail@plt+0x1432c>
   2889c:	add	r1, r1, #12
   288a0:	cmp	fp, r1
   288a4:	bhi	290dc <__assert_fail@plt+0x16904>
   288a8:	cmp	fp, r0
   288ac:	bls	29358 <__assert_fail@plt+0x16b80>
   288b0:	rsb	r1, r0, fp
   288b4:	sub	r3, r1, #1
   288b8:	cmp	r3, #7
   288bc:	movhi	r4, #0
   288c0:	movhi	r5, #0
   288c4:	movhi	sl, #12
   288c8:	strdhi	r4, [sp, #40]	; 0x28
   288cc:	bls	290e0 <__assert_fail@plt+0x16908>
   288d0:	add	r0, r0, #8
   288d4:	mov	r4, #8
   288d8:	str	r0, [sp, #108]	; 0x6c
   288dc:	b	26ae4 <__assert_fail@plt+0x1430c>
   288e0:	mov	r2, ip
   288e4:	movw	r1, #29028	; 0x7164
   288e8:	mov	r0, #1
   288ec:	movt	r1, #5
   288f0:	bl	125bc <__printf_chk@plt>
   288f4:	mov	r7, #0
   288f8:	ldr	ip, [sp, #108]	; 0x6c
   288fc:	b	271f8 <__assert_fail@plt+0x14a20>
   28900:	movw	r1, #28960	; 0x7120
   28904:	movt	r1, #5
   28908:	mov	r0, #0
   2890c:	mov	r2, #5
   28910:	bl	12298 <dcgettext@plt>
   28914:	mov	r2, r7
   28918:	mov	r7, #0
   2891c:	mov	r1, r0
   28920:	mov	r0, #1
   28924:	bl	125bc <__printf_chk@plt>
   28928:	ldr	ip, [sp, #108]	; 0x6c
   2892c:	b	271f8 <__assert_fail@plt+0x14a20>
   28930:	ldr	ip, [sp, #80]	; 0x50
   28934:	mov	r5, r3
   28938:	str	r3, [sp, #120]	; 0x78
   2893c:	str	ip, [sp, #32]
   28940:	ldr	r0, [pc, #-3464]	; 27bc0 <__assert_fail@plt+0x153e8>
   28944:	mov	r1, #0
   28948:	mov	r2, #72	; 0x48
   2894c:	bl	12580 <memset@plt>
   28950:	ldr	r3, [r5, #8]
   28954:	mov	r1, #2
   28958:	ldr	r5, [sp, #28]
   2895c:	movw	r7, #1240	; 0x4d8
   28960:	movt	r7, #7
   28964:	mov	r0, r3
   28968:	str	r3, [r5, #1616]	; 0x650
   2896c:	bl	21a60 <__assert_fail@plt+0xf288>
   28970:	mov	r1, #4
   28974:	str	r0, [r5, #1620]	; 0x654
   28978:	ldr	r0, [r5, #1616]	; 0x650
   2897c:	bl	21a60 <__assert_fail@plt+0xf288>
   28980:	ldr	r3, [sp, #120]	; 0x78
   28984:	ldr	r2, [r5, #1616]	; 0x650
   28988:	ldr	r1, [r3, #12]
   2898c:	lsl	r2, r2, #1
   28990:	str	r0, [r5, #1624]	; 0x658
   28994:	ldr	r0, [r5, #1620]	; 0x654
   28998:	bl	1222c <memcpy@plt>
   2899c:	ldr	r3, [sp, #120]	; 0x78
   289a0:	ldr	r2, [r5, #1616]	; 0x650
   289a4:	ldr	r0, [r5, #1624]	; 0x658
   289a8:	ldr	r1, [r3, #16]
   289ac:	lsl	r2, r2, #2
   289b0:	bl	1222c <memcpy@plt>
   289b4:	ldr	r3, [sp, #120]	; 0x78
   289b8:	ldr	ip, [sp, #68]	; 0x44
   289bc:	ldr	r1, [sp, #116]	; 0x74
   289c0:	ldrb	r2, [r3, #70]	; 0x46
   289c4:	ldr	r0, [r3, #20]
   289c8:	cmp	r1, #0
   289cc:	subne	r1, r1, #1
   289d0:	strb	r2, [r5, #1678]	; 0x68e
   289d4:	ldrb	r2, [r3, #71]	; 0x47
   289d8:	str	r0, [r5, #1628]	; 0x65c
   289dc:	ldrb	r0, [r3, #70]	; 0x46
   289e0:	strb	r2, [r5, #1679]	; 0x68f
   289e4:	ldr	r2, [r3, #24]
   289e8:	str	r0, [ip]
   289ec:	ldr	r0, [r3, #28]
   289f0:	str	r2, [r5, #1632]	; 0x660
   289f4:	ldr	r2, [r3, #48]	; 0x30
   289f8:	str	r0, [r5, #1636]	; 0x664
   289fc:	ldr	r0, [r3, #64]	; 0x40
   28a00:	str	r2, [r5, #1656]	; 0x678
   28a04:	ldrd	r2, [r3, #56]	; 0x38
   28a08:	str	r0, [r5, #1672]	; 0x688
   28a0c:	mov	r0, #1664	; 0x680
   28a10:	strd	r2, [r5, r0]
   28a14:	ldr	r0, [pc, #-3676]	; 27bc0 <__assert_fail@plt+0x153e8>
   28a18:	bl	267e4 <__assert_fail@plt+0x1400c>
   28a1c:	cmp	r0, #0
   28a20:	blt	295a4 <__assert_fail@plt+0x16dcc>
   28a24:	ldr	r3, [sp, #120]	; 0x78
   28a28:	ldr	ip, [sp, #28]
   28a2c:	ldr	r5, [sp, #64]	; 0x40
   28a30:	ldrb	r1, [r3, #68]	; 0x44
   28a34:	rsb	r8, r5, r8
   28a38:	ldrb	r5, [ip, #1679]	; 0x68f
   28a3c:	cmp	r1, #0
   28a40:	strb	r1, [ip, #1676]	; 0x68c
   28a44:	beq	28a70 <__assert_fail@plt+0x16298>
   28a48:	and	r3, r1, #7
   28a4c:	cmp	r3, #3
   28a50:	beq	29398 <__assert_fail@plt+0x16bc0>
   28a54:	cmp	r3, #4
   28a58:	beq	2938c <__assert_fail@plt+0x16bb4>
   28a5c:	cmp	r3, #2
   28a60:	beq	2936c <__assert_fail@plt+0x16b94>
   28a64:	ldr	ip, [sp, #68]	; 0x44
   28a68:	ldr	ip, [ip]
   28a6c:	str	ip, [sp, #32]
   28a70:	cmp	r5, #0
   28a74:	beq	26cec <__assert_fail@plt+0x14514>
   28a78:	cmp	r5, #4
   28a7c:	movls	r1, r5
   28a80:	bhi	291ac <__assert_fail@plt+0x169d4>
   28a84:	ldr	r0, [sp, #108]	; 0x6c
   28a88:	add	r3, r0, r1
   28a8c:	cmp	fp, r3
   28a90:	bhi	28aa0 <__assert_fail@plt+0x162c8>
   28a94:	cmp	fp, r0
   28a98:	bls	28aac <__assert_fail@plt+0x162d4>
   28a9c:	rsb	r1, r0, fp
   28aa0:	sub	r3, r1, #1
   28aa4:	cmp	r3, #7
   28aa8:	bls	291dc <__assert_fail@plt+0x16a04>
   28aac:	mov	r5, #0
   28ab0:	ldr	ip, [sp, #28]
   28ab4:	ldrb	r3, [ip, #1679]	; 0x68f
   28ab8:	ldrb	r1, [ip, #1676]	; 0x68c
   28abc:	add	r3, r0, r3
   28ac0:	str	r3, [sp, #108]	; 0x6c
   28ac4:	b	26cec <__assert_fail@plt+0x14514>
   28ac8:	mov	r1, #0
   28acc:	mov	r0, r4
   28ad0:	bl	1bc48 <__assert_fail@plt+0x9470>
   28ad4:	ldr	lr, [sp, #32]
   28ad8:	ldr	ip, [r6, #28]
   28adc:	movw	r1, #29360	; 0x72b0
   28ae0:	mov	r2, r5
   28ae4:	movt	r1, #5
   28ae8:	mov	r7, lr
   28aec:	mul	ip, ip, lr
   28af0:	mov	r3, r0
   28af4:	mov	r0, #1
   28af8:	b	27c64 <__assert_fail@plt+0x1548c>
   28afc:	mov	r1, #0
   28b00:	mov	r0, r4
   28b04:	bl	1bc48 <__assert_fail@plt+0x9470>
   28b08:	ldr	ip, [r6, #28]
   28b0c:	movw	r1, #29152	; 0x71e0
   28b10:	mov	r2, r5
   28b14:	movt	r1, #5
   28b18:	mul	ip, ip, r7
   28b1c:	str	ip, [sp]
   28b20:	mov	r3, r0
   28b24:	mov	r0, #1
   28b28:	bl	125bc <__printf_chk@plt>
   28b2c:	ldrb	r3, [r5]
   28b30:	cmp	r3, #0
   28b34:	bne	27c78 <__assert_fail@plt+0x154a0>
   28b38:	b	27b24 <__assert_fail@plt+0x1534c>
   28b3c:	mov	r1, #0
   28b40:	mov	r0, r4
   28b44:	bl	1bc48 <__assert_fail@plt+0x9470>
   28b48:	ldr	ip, [r6, #28]
   28b4c:	movw	r1, #28484	; 0x6f44
   28b50:	mov	r2, r7
   28b54:	movt	r1, #5
   28b58:	mul	ip, ip, r5
   28b5c:	str	ip, [sp]
   28b60:	mov	r3, r0
   28b64:	mov	r0, #1
   28b68:	bl	125bc <__printf_chk@plt>
   28b6c:	ldrb	r3, [r7]
   28b70:	ldr	ip, [sp, #108]	; 0x6c
   28b74:	cmp	r3, #0
   28b78:	bne	27934 <__assert_fail@plt+0x1515c>
   28b7c:	b	27bac <__assert_fail@plt+0x153d4>
   28b80:	mov	r1, #0
   28b84:	mov	r0, r4
   28b88:	bl	1bc48 <__assert_fail@plt+0x9470>
   28b8c:	ldr	ip, [r6, #28]
   28b90:	movw	r1, #28248	; 0x6e58
   28b94:	mov	r2, r7
   28b98:	movt	r1, #5
   28b9c:	mul	ip, ip, r5
   28ba0:	str	ip, [sp]
   28ba4:	mov	r3, r0
   28ba8:	mov	r0, #1
   28bac:	bl	125bc <__printf_chk@plt>
   28bb0:	ldrb	r3, [r7]
   28bb4:	ldr	ip, [sp, #108]	; 0x6c
   28bb8:	cmp	r3, #0
   28bbc:	bne	27934 <__assert_fail@plt+0x1515c>
   28bc0:	b	277ec <__assert_fail@plt+0x15014>
   28bc4:	movw	r1, #28880	; 0x70d0
   28bc8:	mov	r0, #0
   28bcc:	movt	r1, #5
   28bd0:	b	2890c <__assert_fail@plt+0x16134>
   28bd4:	mov	r1, #0
   28bd8:	mov	r0, r4
   28bdc:	bl	1bc48 <__assert_fail@plt+0x9470>
   28be0:	ldr	ip, [r6, #28]
   28be4:	movw	r1, #28440	; 0x6f18
   28be8:	mov	r2, r7
   28bec:	movt	r1, #5
   28bf0:	mul	ip, ip, r5
   28bf4:	str	ip, [sp]
   28bf8:	mov	r3, r0
   28bfc:	mov	r0, #1
   28c00:	bl	125bc <__printf_chk@plt>
   28c04:	ldrb	r3, [r7]
   28c08:	ldr	ip, [sp, #108]	; 0x6c
   28c0c:	cmp	r3, #0
   28c10:	bne	27934 <__assert_fail@plt+0x1515c>
   28c14:	b	27fb8 <__assert_fail@plt+0x157e0>
   28c18:	mov	r1, #0
   28c1c:	mov	r0, r4
   28c20:	bl	1bc48 <__assert_fail@plt+0x9470>
   28c24:	movw	r1, #28560	; 0x6f90
   28c28:	mov	r2, r5
   28c2c:	movt	r1, #5
   28c30:	mov	r3, r0
   28c34:	mov	r0, #1
   28c38:	bl	125bc <__printf_chk@plt>
   28c3c:	ldrb	r3, [r5]
   28c40:	ldr	ip, [sp, #108]	; 0x6c
   28c44:	cmp	r3, #0
   28c48:	bne	27934 <__assert_fail@plt+0x1515c>
   28c4c:	b	28318 <__assert_fail@plt+0x15b40>
   28c50:	mov	r1, #0
   28c54:	mov	r0, r4
   28c58:	bl	1bc48 <__assert_fail@plt+0x9470>
   28c5c:	movw	r1, #28284	; 0x6e7c
   28c60:	mov	r2, r5
   28c64:	movt	r1, #5
   28c68:	mov	r3, r0
   28c6c:	mov	r0, #1
   28c70:	bl	125bc <__printf_chk@plt>
   28c74:	ldrb	r3, [r5]
   28c78:	cmp	r3, #0
   28c7c:	bne	27c78 <__assert_fail@plt+0x154a0>
   28c80:	ldr	r3, [sp, #120]	; 0x78
   28c84:	ldr	ip, [sp, #108]	; 0x6c
   28c88:	b	283f0 <__assert_fail@plt+0x15c18>
   28c8c:	mov	r1, #0
   28c90:	mov	r0, r4
   28c94:	bl	1bc48 <__assert_fail@plt+0x9470>
   28c98:	movw	r1, #28524	; 0x6f6c
   28c9c:	mov	r2, r5
   28ca0:	movt	r1, #5
   28ca4:	mov	r3, r0
   28ca8:	mov	r0, #1
   28cac:	bl	125bc <__printf_chk@plt>
   28cb0:	ldrb	r3, [r5]
   28cb4:	cmp	r3, #0
   28cb8:	bne	27c78 <__assert_fail@plt+0x154a0>
   28cbc:	ldr	r3, [sp, #120]	; 0x78
   28cc0:	ldr	ip, [sp, #108]	; 0x6c
   28cc4:	b	285cc <__assert_fail@plt+0x15df4>
   28cc8:	mov	r1, #0
   28ccc:	mov	r0, r5
   28cd0:	bl	1bc48 <__assert_fail@plt+0x9470>
   28cd4:	mov	r2, r7
   28cd8:	movw	r1, #28616	; 0x6fc8
   28cdc:	movt	r1, #5
   28ce0:	mov	r3, r0
   28ce4:	mov	r0, #1
   28ce8:	bl	125bc <__printf_chk@plt>
   28cec:	mov	r1, #0
   28cf0:	mov	r0, r4
   28cf4:	bl	1bc48 <__assert_fail@plt+0x9470>
   28cf8:	bl	12418 <puts@plt>
   28cfc:	ldrb	r3, [r7]
   28d00:	ldr	ip, [sp, #108]	; 0x6c
   28d04:	cmp	r3, #0
   28d08:	bne	27934 <__assert_fail@plt+0x1515c>
   28d0c:	b	28040 <__assert_fail@plt+0x15868>
   28d10:	mov	r1, #0
   28d14:	mov	r0, r4
   28d18:	bl	1bc48 <__assert_fail@plt+0x9470>
   28d1c:	movw	r1, #28588	; 0x6fac
   28d20:	mov	r2, r5
   28d24:	movt	r1, #5
   28d28:	mov	r3, r0
   28d2c:	mov	r0, #1
   28d30:	bl	125bc <__printf_chk@plt>
   28d34:	ldrb	r3, [r5]
   28d38:	ldr	ip, [sp, #108]	; 0x6c
   28d3c:	cmp	r3, #0
   28d40:	bne	27934 <__assert_fail@plt+0x1515c>
   28d44:	b	2838c <__assert_fail@plt+0x15bb4>
   28d48:	ldr	r5, [sp, #48]	; 0x30
   28d4c:	b	285b4 <__assert_fail@plt+0x15ddc>
   28d50:	mov	r1, #1
   28d54:	ldr	r5, [sp, #84]	; 0x54
   28d58:	ldr	r3, [r5]
   28d5c:	blx	r3
   28d60:	ldr	r3, [sp, #108]	; 0x6c
   28d64:	str	r0, [sp, #40]	; 0x28
   28d68:	str	r1, [sp, #56]	; 0x38
   28d6c:	b	28504 <__assert_fail@plt+0x15d2c>
   28d70:	ldr	r5, [sp, #48]	; 0x30
   28d74:	b	283d4 <__assert_fail@plt+0x15bfc>
   28d78:	mov	r2, #5
   28d7c:	movw	r1, #29464	; 0x7318
   28d80:	mov	r0, #0
   28d84:	movt	r1, #5
   28d88:	bl	12298 <dcgettext@plt>
   28d8c:	mov	r1, r5
   28d90:	bl	49bf8 <warn@@Base>
   28d94:	b	286c8 <__assert_fail@plt+0x15ef0>
   28d98:	ldrb	r1, [r6, #70]	; 0x46
   28d9c:	mov	r2, r4
   28da0:	mov	r3, r5
   28da4:	str	r1, [sp]
   28da8:	bl	1acc4 <__assert_fail@plt+0x84ec>
   28dac:	movw	r1, #28308	; 0x6e94
   28db0:	movt	r1, #5
   28db4:	mov	r2, r0
   28db8:	mov	r0, #1
   28dbc:	bl	125bc <__printf_chk@plt>
   28dc0:	b	280a0 <__assert_fail@plt+0x158c8>
   28dc4:	ldr	r5, [r6, #24]
   28dc8:	ldrd	r2, [r6, #32]
   28dcc:	ldrb	r1, [r6, #70]	; 0x46
   28dd0:	mul	r5, r5, r4
   28dd4:	str	r1, [sp]
   28dd8:	adds	r2, r2, r5
   28ddc:	adc	r3, r3, #0
   28de0:	bl	1acc4 <__assert_fail@plt+0x84ec>
   28de4:	mov	r2, r5
   28de8:	movw	r1, #28216	; 0x6e38
   28dec:	movt	r1, #5
   28df0:	mov	r3, r0
   28df4:	mov	r0, #1
   28df8:	bl	125bc <__printf_chk@plt>
   28dfc:	b	27834 <__assert_fail@plt+0x1505c>
   28e00:	ldr	r1, [r6, #24]
   28e04:	ldrd	r2, [r6, #32]
   28e08:	ldr	r4, [sp, #40]	; 0x28
   28e0c:	ldr	r5, [sp, #56]	; 0x38
   28e10:	strd	r2, [sp, #32]
   28e14:	umull	r2, r3, r4, r1
   28e18:	ldrb	ip, [r6, #70]	; 0x46
   28e1c:	mul	r7, r4, r1
   28e20:	str	ip, [sp]
   28e24:	mla	r3, r1, r5, r3
   28e28:	ldrd	r4, [sp, #32]
   28e2c:	adds	r2, r2, r4
   28e30:	adc	r3, r3, r5
   28e34:	bl	1acc4 <__assert_fail@plt+0x84ec>
   28e38:	mov	r2, r7
   28e3c:	movw	r1, #29260	; 0x724c
   28e40:	movt	r1, #5
   28e44:	mov	r3, r0
   28e48:	mov	r0, #1
   28e4c:	bl	125bc <__printf_chk@plt>
   28e50:	b	27994 <__assert_fail@plt+0x151bc>
   28e54:	mov	r1, #8
   28e58:	ldr	ip, [sp, #84]	; 0x54
   28e5c:	ldr	r3, [ip]
   28e60:	blx	r3
   28e64:	ldr	r3, [sp, #108]	; 0x6c
   28e68:	str	r0, [sp, #40]	; 0x28
   28e6c:	str	r1, [sp, #56]	; 0x38
   28e70:	b	27970 <__assert_fail@plt+0x15198>
   28e74:	mov	r1, #2
   28e78:	ldr	r5, [sp, #84]	; 0x54
   28e7c:	ldr	r3, [r5]
   28e80:	blx	r3
   28e84:	ldr	r3, [sp, #108]	; 0x6c
   28e88:	str	r0, [sp, #40]	; 0x28
   28e8c:	str	r1, [sp, #56]	; 0x38
   28e90:	b	28198 <__assert_fail@plt+0x159c0>
   28e94:	mov	r1, #4
   28e98:	ldr	r5, [sp, #84]	; 0x54
   28e9c:	ldr	r3, [r5]
   28ea0:	blx	r3
   28ea4:	ldr	r3, [sp, #108]	; 0x6c
   28ea8:	str	r0, [sp, #40]	; 0x28
   28eac:	str	r1, [sp, #56]	; 0x38
   28eb0:	b	28260 <__assert_fail@plt+0x15a88>
   28eb4:	add	r2, sp, #132	; 0x84
   28eb8:	add	r3, sp, #128	; 0x80
   28ebc:	mov	r0, ip
   28ec0:	stm	sp, {r2, r3}
   28ec4:	mov	r1, fp
   28ec8:	add	r2, sp, #120	; 0x78
   28ecc:	add	r3, sp, #136	; 0x88
   28ed0:	bl	213e0 <__assert_fail@plt+0xec08>
   28ed4:	ldr	r6, [sp, #120]	; 0x78
   28ed8:	cmp	r6, #0
   28edc:	str	r0, [sp, #108]	; 0x6c
   28ee0:	beq	26b4c <__assert_fail@plt+0x14374>
   28ee4:	ldr	r3, [sp, #116]	; 0x74
   28ee8:	mov	r0, r6
   28eec:	ldr	r5, [sp, #72]	; 0x48
   28ef0:	cmp	r3, #0
   28ef4:	ldr	r1, [r6, #64]	; 0x40
   28ef8:	subne	r3, r3, #1
   28efc:	str	r8, [r6, #4]
   28f00:	cmp	r3, r1
   28f04:	movcs	r1, r3
   28f08:	str	r5, [r6]
   28f0c:	bl	267e4 <__assert_fail@plt+0x1400c>
   28f10:	cmp	r0, #0
   28f14:	blt	26b4c <__assert_fail@plt+0x14374>
   28f18:	ldrb	r3, [r6, #68]	; 0x44
   28f1c:	cmp	r3, #0
   28f20:	beq	28fc0 <__assert_fail@plt+0x167e8>
   28f24:	and	r3, r3, #7
   28f28:	cmp	r3, #3
   28f2c:	beq	29380 <__assert_fail@plt+0x16ba8>
   28f30:	cmp	r3, #4
   28f34:	beq	29374 <__assert_fail@plt+0x16b9c>
   28f38:	cmp	r3, #2
   28f3c:	streq	r3, [sp, #32]
   28f40:	ldrne	ip, [sp, #68]	; 0x44
   28f44:	ldrne	ip, [ip]
   28f48:	strne	ip, [sp, #32]
   28f4c:	ldr	ip, [sp, #64]	; 0x40
   28f50:	movw	r1, #27604	; 0x6bd4
   28f54:	mov	r0, #1
   28f58:	movt	r1, #5
   28f5c:	rsb	r2, ip, r8
   28f60:	movw	r9, #3452	; 0xd7c
   28f64:	bl	125bc <__printf_chk@plt>
   28f68:	movt	r9, #7
   28f6c:	ldrd	r0, [sp, #40]	; 0x28
   28f70:	ldrb	r2, [r6, #70]	; 0x46
   28f74:	bl	1adb8 <__assert_fail@plt+0x85e0>
   28f78:	ldrd	r0, [sp, #56]	; 0x38
   28f7c:	mov	r2, r4
   28f80:	bl	1adb8 <__assert_fail@plt+0x85e0>
   28f84:	ldr	r3, [r9]
   28f88:	cmp	r3, #0
   28f8c:	beq	28fcc <__assert_fail@plt+0x167f4>
   28f90:	ldr	ip, [r6, #28]
   28f94:	movw	r1, #27612	; 0x6bdc
   28f98:	ldr	r2, [r6, #20]
   28f9c:	movt	r1, #5
   28fa0:	ldr	r3, [r6, #24]
   28fa4:	mov	r0, #1
   28fa8:	str	ip, [sp]
   28fac:	ldr	ip, [r6, #64]	; 0x40
   28fb0:	str	ip, [sp, #4]
   28fb4:	bl	125bc <__printf_chk@plt>
   28fb8:	str	r6, [sp, #72]	; 0x48
   28fbc:	b	26e58 <__assert_fail@plt+0x14680>
   28fc0:	ldr	ip, [sp, #80]	; 0x50
   28fc4:	str	ip, [sp, #32]
   28fc8:	b	28f4c <__assert_fail@plt+0x16774>
   28fcc:	movw	r0, #27640	; 0x6bf8
   28fd0:	movt	r0, #5
   28fd4:	bl	12418 <puts@plt>
   28fd8:	ldr	r2, [sp, #136]	; 0x88
   28fdc:	movw	r1, #27644	; 0x6bfc
   28fe0:	mov	r0, #1
   28fe4:	movt	r1, #5
   28fe8:	bl	125bc <__printf_chk@plt>
   28fec:	movw	r1, #27676	; 0x6c1c
   28ff0:	mov	r0, #1
   28ff4:	movt	r1, #5
   28ff8:	ldr	r2, [r6, #20]
   28ffc:	bl	125bc <__printf_chk@plt>
   29000:	ldr	r3, [sp, #136]	; 0x88
   29004:	cmp	r3, #3
   29008:	bgt	2932c <__assert_fail@plt+0x16b54>
   2900c:	ldr	r2, [r6, #24]
   29010:	movw	r1, #27772	; 0x6c7c
   29014:	mov	r0, #1
   29018:	movt	r1, #5
   2901c:	bl	125bc <__printf_chk@plt>
   29020:	ldr	r2, [r6, #28]
   29024:	movw	r1, #27804	; 0x6c9c
   29028:	mov	r0, #1
   2902c:	movt	r1, #5
   29030:	bl	125bc <__printf_chk@plt>
   29034:	movw	r1, #27836	; 0x6cbc
   29038:	mov	r0, #1
   2903c:	movt	r1, #5
   29040:	ldr	r2, [r6, #64]	; 0x40
   29044:	bl	125bc <__printf_chk@plt>
   29048:	ldr	r3, [sp, #132]	; 0x84
   2904c:	cmp	r3, #0
   29050:	bne	292cc <__assert_fail@plt+0x16af4>
   29054:	movw	r4, #976	; 0x3d0
   29058:	movt	r4, #7
   2905c:	ldr	r1, [r4]
   29060:	mov	r0, #10
   29064:	bl	12334 <_IO_putc@plt>
   29068:	b	28fb8 <__assert_fail@plt+0x167e0>
   2906c:	mov	r0, r6
   29070:	add	r1, sp, #124	; 0x7c
   29074:	add	r2, sp, #116	; 0x74
   29078:	bl	1bcf0 <__assert_fail@plt+0x9518>
   2907c:	b	2725c <__assert_fail@plt+0x14a84>
   29080:	mov	r2, r5
   29084:	movw	r1, #28124	; 0x6ddc
   29088:	mov	r0, #1
   2908c:	movt	r1, #5
   29090:	bl	125bc <__printf_chk@plt>
   29094:	b	26ddc <__assert_fail@plt+0x14604>
   29098:	mov	r2, #5
   2909c:	movw	r1, #17732	; 0x4544
   290a0:	mov	r0, #0
   290a4:	movt	r1, #5
   290a8:	bl	12298 <dcgettext@plt>
   290ac:	ldr	r1, [sp, #32]
   290b0:	mov	r2, #8
   290b4:	bl	494bc <error@@Base>
   290b8:	mov	r1, #8
   290bc:	b	26d1c <__assert_fail@plt+0x14544>
   290c0:	ldr	ip, [sp, #84]	; 0x54
   290c4:	ldr	r3, [ip]
   290c8:	blx	r3
   290cc:	mov	r3, #1648	; 0x670
   290d0:	ldr	ip, [sp, #108]	; 0x6c
   290d4:	strd	r0, [r7, r3]
   290d8:	b	26d58 <__assert_fail@plt+0x14580>
   290dc:	mov	r1, #8
   290e0:	ldr	r5, [sp, #84]	; 0x54
   290e4:	ldr	r3, [r5]
   290e8:	blx	r3
   290ec:	strd	r0, [sp, #40]	; 0x28
   290f0:	add	sl, r0, #12
   290f4:	ldr	r0, [sp, #108]	; 0x6c
   290f8:	b	288d0 <__assert_fail@plt+0x160f8>
   290fc:	ldr	r3, [r9]
   29100:	cmp	r3, #0
   29104:	beq	27c78 <__assert_fail@plt+0x154a0>
   29108:	movw	r0, #28736	; 0x7040
   2910c:	movt	r0, #5
   29110:	bl	12418 <puts@plt>
   29114:	ldr	r7, [sp, #52]	; 0x34
   29118:	ldr	ip, [sp, #108]	; 0x6c
   2911c:	b	271f8 <__assert_fail@plt+0x14a20>
   29120:	movw	r0, #28668	; 0x6ffc
   29124:	movt	r0, #5
   29128:	bl	12418 <puts@plt>
   2912c:	b	280bc <__assert_fail@plt+0x158e4>
   29130:	movw	r0, #28644	; 0x6fe4
   29134:	movt	r0, #5
   29138:	bl	12418 <puts@plt>
   2913c:	b	28604 <__assert_fail@plt+0x15e2c>
   29140:	mov	r2, r0
   29144:	movw	r1, #29328	; 0x7290
   29148:	mov	r0, #1
   2914c:	movt	r1, #5
   29150:	bl	125bc <__printf_chk@plt>
   29154:	ldr	ip, [sp, #108]	; 0x6c
   29158:	b	271f8 <__assert_fail@plt+0x14a20>
   2915c:	mov	ip, #0
   29160:	mov	r3, r0
   29164:	str	ip, [sp, #40]	; 0x28
   29168:	str	ip, [sp, #56]	; 0x38
   2916c:	b	28260 <__assert_fail@plt+0x15a88>
   29170:	mov	ip, #0
   29174:	mov	r3, r0
   29178:	str	ip, [sp, #40]	; 0x28
   2917c:	str	ip, [sp, #56]	; 0x38
   29180:	b	28504 <__assert_fail@plt+0x15d2c>
   29184:	mov	r4, #0
   29188:	mov	r3, r0
   2918c:	str	r4, [sp, #40]	; 0x28
   29190:	str	r4, [sp, #56]	; 0x38
   29194:	b	27970 <__assert_fail@plt+0x15198>
   29198:	mov	ip, #0
   2919c:	mov	r3, r0
   291a0:	str	ip, [sp, #40]	; 0x28
   291a4:	str	ip, [sp, #56]	; 0x38
   291a8:	b	28198 <__assert_fail@plt+0x159c0>
   291ac:	mov	r2, #5
   291b0:	movw	r1, #27996	; 0x6d5c
   291b4:	mov	r0, #0
   291b8:	movt	r1, #5
   291bc:	bl	12298 <dcgettext@plt>
   291c0:	ldr	r5, [sp, #28]
   291c4:	ldrb	r1, [r5, #1679]	; 0x68f
   291c8:	bl	49bf8 <warn@@Base>
   291cc:	mov	r3, #4
   291d0:	mov	r1, r3
   291d4:	strb	r3, [r5, #1679]	; 0x68f
   291d8:	b	28a84 <__assert_fail@plt+0x162ac>
   291dc:	ldr	ip, [sp, #84]	; 0x54
   291e0:	ldr	r3, [ip]
   291e4:	blx	r3
   291e8:	mov	r5, r0
   291ec:	ldr	r0, [sp, #108]	; 0x6c
   291f0:	b	28ab0 <__assert_fail@plt+0x162d8>
   291f4:	mov	r2, #0
   291f8:	mov	r3, fp
   291fc:	add	r1, sp, #112	; 0x70
   29200:	bl	1c634 <__assert_fail@plt+0x9e5c>
   29204:	ldr	r2, [sp, #108]	; 0x6c
   29208:	ldr	r3, [sp, #112]	; 0x70
   2920c:	add	r3, r2, r3
   29210:	str	r3, [sp, #128]	; 0x80
   29214:	add	r3, r3, r0
   29218:	str	r0, [sp, #132]	; 0x84
   2921c:	cmp	fp, r3
   29220:	str	r3, [sp, #108]	; 0x6c
   29224:	bls	29230 <__assert_fail@plt+0x16a58>
   29228:	cmp	r0, #0
   2922c:	bge	26d78 <__assert_fail@plt+0x145a0>
   29230:	mov	r2, #5
   29234:	movw	r1, #28052	; 0x6d94
   29238:	mov	r0, #0
   2923c:	movt	r1, #5
   29240:	bl	12298 <dcgettext@plt>
   29244:	ldr	r1, [sp, #132]	; 0x84
   29248:	bl	49bf8 <warn@@Base>
   2924c:	mov	r3, #0
   29250:	str	fp, [sp, #108]	; 0x6c
   29254:	str	r3, [sp, #128]	; 0x80
   29258:	str	r3, [sp, #132]	; 0x84
   2925c:	b	26d78 <__assert_fail@plt+0x145a0>
   29260:	movw	r1, #27868	; 0x6cdc
   29264:	mov	r0, #1
   29268:	movt	r1, #5
   2926c:	bl	125bc <__printf_chk@plt>
   29270:	ldr	r3, [sp, #132]	; 0x84
   29274:	cmp	r3, #0
   29278:	beq	292a4 <__assert_fail@plt+0x16acc>
   2927c:	ldr	r3, [sp, #128]	; 0x80
   29280:	mov	r0, #1
   29284:	movw	r1, #21468	; 0x53dc
   29288:	movt	r1, #5
   2928c:	ldrb	r2, [r3, r4]
   29290:	add	r4, r4, r0
   29294:	bl	125bc <__printf_chk@plt>
   29298:	ldr	r3, [sp, #132]	; 0x84
   2929c:	cmp	r3, r4
   292a0:	bhi	2927c <__assert_fail@plt+0x16aa4>
   292a4:	movw	r4, #976	; 0x3d0
   292a8:	movt	r4, #7
   292ac:	mov	r0, #10
   292b0:	ldr	r6, [pc, #1188]	; 2975c <__assert_fail@plt+0x16f84>
   292b4:	ldr	r1, [r4]
   292b8:	bl	12334 <_IO_putc@plt>
   292bc:	ldr	r1, [r4]
   292c0:	mov	r0, #10
   292c4:	bl	12334 <_IO_putc@plt>
   292c8:	b	26e58 <__assert_fail@plt+0x14680>
   292cc:	movw	r1, #27868	; 0x6cdc
   292d0:	mov	r0, #1
   292d4:	movt	r1, #5
   292d8:	bl	125bc <__printf_chk@plt>
   292dc:	ldr	r3, [sp, #132]	; 0x84
   292e0:	cmp	r3, #0
   292e4:	movne	r4, #0
   292e8:	beq	29314 <__assert_fail@plt+0x16b3c>
   292ec:	ldr	r3, [sp, #128]	; 0x80
   292f0:	mov	r0, #1
   292f4:	movw	r1, #21468	; 0x53dc
   292f8:	movt	r1, #5
   292fc:	ldrb	r2, [r3, r4]
   29300:	add	r4, r4, r0
   29304:	bl	125bc <__printf_chk@plt>
   29308:	ldr	r3, [sp, #132]	; 0x84
   2930c:	cmp	r3, r4
   29310:	bhi	292ec <__assert_fail@plt+0x16b14>
   29314:	movw	r4, #976	; 0x3d0
   29318:	movt	r4, #7
   2931c:	mov	r0, #10
   29320:	ldr	r1, [r4]
   29324:	bl	12334 <_IO_putc@plt>
   29328:	b	2905c <__assert_fail@plt+0x16884>
   2932c:	ldrb	r2, [r6, #70]	; 0x46
   29330:	movw	r1, #27708	; 0x6c3c
   29334:	mov	r0, #1
   29338:	movt	r1, #5
   2933c:	bl	125bc <__printf_chk@plt>
   29340:	movw	r1, #27740	; 0x6c5c
   29344:	ldrb	r2, [r6, #71]	; 0x47
   29348:	movt	r1, #5
   2934c:	mov	r0, #1
   29350:	bl	125bc <__printf_chk@plt>
   29354:	b	2900c <__assert_fail@plt+0x16834>
   29358:	mov	r4, #0
   2935c:	mov	r5, #0
   29360:	mov	sl, #12
   29364:	strd	r4, [sp, #40]	; 0x28
   29368:	b	288d0 <__assert_fail@plt+0x160f8>
   2936c:	str	r3, [sp, #32]
   29370:	b	28a70 <__assert_fail@plt+0x16298>
   29374:	mov	r5, #8
   29378:	str	r5, [sp, #32]
   2937c:	b	28f4c <__assert_fail@plt+0x16774>
   29380:	mov	r5, #4
   29384:	str	r5, [sp, #32]
   29388:	b	28f4c <__assert_fail@plt+0x16774>
   2938c:	mov	ip, #8
   29390:	str	ip, [sp, #32]
   29394:	b	28a70 <__assert_fail@plt+0x16298>
   29398:	mov	ip, #4
   2939c:	str	ip, [sp, #32]
   293a0:	b	28a70 <__assert_fail@plt+0x16298>
   293a4:	mov	r2, #5
   293a8:	movw	r1, #28692	; 0x7014
   293ac:	mov	r0, #0
   293b0:	movt	r1, #5
   293b4:	bl	12298 <dcgettext@plt>
   293b8:	str	r4, [sp, #52]	; 0x34
   293bc:	bl	49bf8 <warn@@Base>
   293c0:	mov	r3, #0
   293c4:	mov	r7, r3
   293c8:	str	r3, [r6, #8]
   293cc:	ldr	ip, [sp, #108]	; 0x6c
   293d0:	b	271f8 <__assert_fail@plt+0x14a20>
   293d4:	mov	r1, #0
   293d8:	ldr	r0, [sp, #32]
   293dc:	str	ip, [sp, #24]
   293e0:	bl	1bc48 <__assert_fail@plt+0x9470>
   293e4:	mov	r2, r7
   293e8:	movw	r1, #29072	; 0x7190
   293ec:	movt	r1, #5
   293f0:	mov	r5, #0
   293f4:	mov	r3, r0
   293f8:	mov	r0, #1
   293fc:	bl	125bc <__printf_chk@plt>
   29400:	ldr	r4, [sp, #68]	; 0x44
   29404:	ldr	ip, [sp, #24]
   29408:	mvn	r3, #0
   2940c:	mov	r2, #0
   29410:	ldr	r0, [sp, #108]	; 0x6c
   29414:	ldr	r1, [r4]
   29418:	mov	r4, ip
   2941c:	strd	r4, [sp]
   29420:	ldr	r5, [sp, #76]	; 0x4c
   29424:	mov	r4, #0
   29428:	str	r5, [sp, #16]
   2942c:	mov	r5, #0
   29430:	strd	r4, [sp, #8]
   29434:	bl	1cccc <__assert_fail@plt+0xa4f4>
   29438:	movw	r0, #42900	; 0xa794
   2943c:	movt	r0, #5
   29440:	bl	12418 <puts@plt>
   29444:	ldrb	r3, [r7]
   29448:	cmp	r3, #0
   2944c:	bne	27a98 <__assert_fail@plt+0x152c0>
   29450:	b	27a84 <__assert_fail@plt+0x152ac>
   29454:	mov	r1, #0
   29458:	ldr	r0, [sp, #32]
   2945c:	str	ip, [sp, #24]
   29460:	bl	1bc48 <__assert_fail@plt+0x9470>
   29464:	ldr	ip, [sp, #24]
   29468:	movw	r1, #29000	; 0x7148
   2946c:	movt	r1, #5
   29470:	mov	r5, #0
   29474:	mov	r2, ip
   29478:	mov	r3, r0
   2947c:	mov	r0, #1
   29480:	bl	125bc <__printf_chk@plt>
   29484:	ldr	r4, [sp, #68]	; 0x44
   29488:	mvn	r3, #0
   2948c:	mov	r2, #0
   29490:	ldr	r0, [sp, #108]	; 0x6c
   29494:	ldr	r1, [r4]
   29498:	mov	r4, r7
   2949c:	strd	r4, [sp]
   294a0:	mov	r4, #0
   294a4:	ldr	r5, [sp, #76]	; 0x4c
   294a8:	str	r5, [sp, #16]
   294ac:	mov	r5, #0
   294b0:	strd	r4, [sp, #8]
   294b4:	bl	1cccc <__assert_fail@plt+0xa4f4>
   294b8:	movw	r0, #42900	; 0xa794
   294bc:	movt	r0, #5
   294c0:	bl	12418 <puts@plt>
   294c4:	ldr	ip, [sp, #24]
   294c8:	ldrb	r3, [ip]
   294cc:	cmp	r3, #0
   294d0:	bne	27a98 <__assert_fail@plt+0x152c0>
   294d4:	b	27e7c <__assert_fail@plt+0x156a4>
   294d8:	movw	r1, #28928	; 0x7100
   294dc:	mov	r0, #1
   294e0:	movt	r1, #5
   294e4:	mov	r5, #0
   294e8:	bl	125bc <__printf_chk@plt>
   294ec:	ldr	ip, [sp, #68]	; 0x44
   294f0:	mov	r2, r4
   294f4:	ldr	r4, [sp, #76]	; 0x4c
   294f8:	mvn	r3, #0
   294fc:	ldr	r0, [sp, #108]	; 0x6c
   29500:	ldr	r1, [ip]
   29504:	str	r4, [sp, #16]
   29508:	mov	r4, r7
   2950c:	strd	r4, [sp]
   29510:	mov	r4, #0
   29514:	mov	r5, #0
   29518:	strd	r4, [sp, #8]
   2951c:	bl	1cccc <__assert_fail@plt+0xa4f4>
   29520:	movw	r0, #42900	; 0xa794
   29524:	movt	r0, #5
   29528:	bl	12418 <puts@plt>
   2952c:	ldr	r3, [sp, #108]	; 0x6c
   29530:	b	27dd0 <__assert_fail@plt+0x155f8>
   29534:	cmp	r5, fp
   29538:	bcs	29580 <__assert_fail@plt+0x16da8>
   2953c:	rsb	r1, r5, fp
   29540:	sub	r3, r1, #1
   29544:	cmp	r3, #7
   29548:	bls	287ac <__assert_fail@plt+0x15fd4>
   2954c:	ldr	r5, [sp, #120]	; 0x78
   29550:	mov	r2, #0
   29554:	mov	r3, #0
   29558:	strd	r2, [sp, #40]	; 0x28
   2955c:	ldr	r0, [pc, #504]	; 2975c <__assert_fail@plt+0x16f84>
   29560:	mov	r1, #0
   29564:	mov	r2, #72	; 0x48
   29568:	bl	12580 <memset@plt>
   2956c:	cmp	r5, #0
   29570:	ldrne	ip, [sp, #80]	; 0x50
   29574:	strne	ip, [sp, #32]
   29578:	bne	28950 <__assert_fail@plt+0x16178>
   2957c:	b	26c30 <__assert_fail@plt+0x14458>
   29580:	mov	r0, #0
   29584:	mov	r1, #0
   29588:	ldr	r5, [sp, #120]	; 0x78
   2958c:	strd	r0, [sp, #40]	; 0x28
   29590:	b	2955c <__assert_fail@plt+0x16d84>
   29594:	ldr	ip, [sp, #80]	; 0x50
   29598:	ldr	r5, [sp, #88]	; 0x58
   2959c:	str	ip, [sp, #32]
   295a0:	b	28940 <__assert_fail@plt+0x16168>
   295a4:	mov	r2, #5
   295a8:	movw	r1, #27928	; 0x6d18
   295ac:	mov	r0, #0
   295b0:	movt	r1, #5
   295b4:	bl	12298 <dcgettext@plt>
   295b8:	bl	49bf8 <warn@@Base>
   295bc:	b	26b4c <__assert_fail@plt+0x14374>
   295c0:	ldr	ip, [sp, #80]	; 0x50
   295c4:	ldr	r5, [sp, #72]	; 0x48
   295c8:	str	ip, [sp, #32]
   295cc:	b	28940 <__assert_fail@plt+0x16168>
   295d0:	cmp	fp, r7
   295d4:	bls	29580 <__assert_fail@plt+0x16da8>
   295d8:	rsb	r1, r7, fp
   295dc:	sub	r3, r1, #1
   295e0:	cmp	r3, #7
   295e4:	bhi	2954c <__assert_fail@plt+0x16d74>
   295e8:	b	287e4 <__assert_fail@plt+0x1600c>
   295ec:	mov	r6, #4
   295f0:	b	28800 <__assert_fail@plt+0x16028>
   295f4:	mov	r1, r6
   295f8:	sub	r3, r1, #1
   295fc:	cmp	r3, #7
   29600:	bhi	28824 <__assert_fail@plt+0x1604c>
   29604:	ldr	ip, [sp, #84]	; 0x54
   29608:	mov	r0, r7
   2960c:	ldr	r3, [ip]
   29610:	blx	r3
   29614:	ldr	ip, [sp, #92]	; 0x5c
   29618:	cmp	ip, #0
   2961c:	bne	28838 <__assert_fail@plt+0x16060>
   29620:	mov	r3, #0
   29624:	mvn	r2, #0
   29628:	cmp	r1, r3
   2962c:	cmpeq	r0, r2
   29630:	movne	r3, #0
   29634:	moveq	r3, #1
   29638:	cmp	r6, #4
   2963c:	movne	r3, #0
   29640:	andeq	r3, r3, #1
   29644:	cmp	r3, #0
   29648:	bne	28844 <__assert_fail@plt+0x1606c>
   2964c:	and	r3, r0, r1
   29650:	cmp	r6, #8
   29654:	cmneq	r3, #1
   29658:	movne	r3, #0
   2965c:	moveq	r3, #1
   29660:	cmp	r3, #0
   29664:	beq	2884c <__assert_fail@plt+0x16074>
   29668:	cmp	fp, r9
   2966c:	mov	r3, #0
   29670:	str	r3, [sp, #120]	; 0x78
   29674:	bhi	29694 <__assert_fail@plt+0x16ebc>
   29678:	mov	r2, #5
   2967c:	movw	r1, #27896	; 0x6cf8
   29680:	mov	r0, #0
   29684:	movt	r1, #5
   29688:	bl	12298 <dcgettext@plt>
   2968c:	bl	49bf8 <warn@@Base>
   29690:	b	26b4c <__assert_fail@plt+0x14374>
   29694:	add	r2, sp, #132	; 0x84
   29698:	add	r3, sp, #128	; 0x80
   2969c:	mov	r0, r9
   296a0:	stm	sp, {r2, r3}
   296a4:	mov	r1, fp
   296a8:	add	r2, sp, #120	; 0x78
   296ac:	add	r3, sp, #136	; 0x88
   296b0:	bl	213e0 <__assert_fail@plt+0xec08>
   296b4:	ldr	r6, [sp, #120]	; 0x78
   296b8:	cmp	r6, #0
   296bc:	beq	29678 <__assert_fail@plt+0x16ea0>
   296c0:	ldr	r3, [sp, #116]	; 0x74
   296c4:	mov	r0, r6
   296c8:	ldr	ip, [sp, #88]	; 0x58
   296cc:	cmp	r3, #0
   296d0:	ldr	r1, [r6, #64]	; 0x40
   296d4:	subne	r3, r3, #1
   296d8:	str	r5, [r6, #4]
   296dc:	cmp	r3, r1
   296e0:	movcs	r1, r3
   296e4:	str	ip, [r6]
   296e8:	bl	267e4 <__assert_fail@plt+0x1400c>
   296ec:	cmp	r0, #0
   296f0:	blt	295a4 <__assert_fail@plt+0x16dcc>
   296f4:	ldr	r5, [sp, #120]	; 0x78
   296f8:	ldrb	r3, [r5, #68]	; 0x44
   296fc:	cmp	r3, #0
   29700:	beq	29734 <__assert_fail@plt+0x16f5c>
   29704:	and	r3, r3, #7
   29708:	cmp	r3, #3
   2970c:	beq	29750 <__assert_fail@plt+0x16f78>
   29710:	cmp	r3, #4
   29714:	beq	29744 <__assert_fail@plt+0x16f6c>
   29718:	cmp	r3, #2
   2971c:	streq	r3, [sp, #32]
   29720:	ldrne	ip, [sp, #68]	; 0x44
   29724:	ldrne	ip, [ip]
   29728:	strne	ip, [sp, #32]
   2972c:	str	r6, [sp, #88]	; 0x58
   29730:	b	28940 <__assert_fail@plt+0x16168>
   29734:	ldr	ip, [sp, #80]	; 0x50
   29738:	str	ip, [sp, #32]
   2973c:	b	2972c <__assert_fail@plt+0x16f54>
   29740:	bl	122b0 <__stack_chk_fail@plt>
   29744:	mov	ip, #8
   29748:	str	ip, [sp, #32]
   2974c:	b	2972c <__assert_fail@plt+0x16f54>
   29750:	mov	ip, #4
   29754:	str	ip, [sp, #32]
   29758:	b	2972c <__assert_fail@plt+0x16f54>
   2975c:	andeq	r0, r7, r0, lsr #22
   29760:	push	{r3, r4, r5, lr}
   29764:	mov	r4, r0
   29768:	mvn	r0, #0
   2976c:	mov	r5, r1
   29770:	bl	4f040 <warn@@Base+0x5448>
   29774:	cmp	r0, r4
   29778:	bls	2978c <__assert_fail@plt+0x16fb4>
   2977c:	mov	r0, r4
   29780:	mov	r1, r5
   29784:	pop	{r3, r4, r5, lr}
   29788:	b	127b4 <xcalloc@plt>
   2978c:	movw	r3, #168	; 0xa8
   29790:	movt	r3, #7
   29794:	mov	r2, #5
   29798:	movw	r1, #29532	; 0x735c
   2979c:	mov	r0, #0
   297a0:	movt	r1, #5
   297a4:	ldr	r5, [r3]
   297a8:	bl	12298 <dcgettext@plt>
   297ac:	mov	r3, r4
   297b0:	mov	r1, #1
   297b4:	mov	r2, r0
   297b8:	mov	r0, r5
   297bc:	bl	125d4 <__fprintf_chk@plt>
   297c0:	mov	r0, #1
   297c4:	bl	126a0 <xexit@plt>
   297c8:	movw	ip, #65176	; 0xfe98
   297cc:	movt	ip, #6
   297d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297d4:	mov	r8, r1
   297d8:	ldr	r7, [r0, #12]
   297dc:	sub	sp, sp, #172	; 0xac
   297e0:	ldr	r1, [ip]
   297e4:	mov	fp, r0
   297e8:	cmp	r7, #0
   297ec:	ldrd	r2, [r0, #24]
   297f0:	str	ip, [sp, #16]
   297f4:	str	r1, [sp, #164]	; 0xa4
   297f8:	add	r6, r7, r2
   297fc:	movweq	r1, #29616	; 0x73b0
   29800:	moveq	r0, r7
   29804:	movteq	r1, #5
   29808:	beq	29a50 <__assert_fail@plt+0x17278>
   2980c:	cmp	r3, #0
   29810:	cmpeq	r2, #23
   29814:	bls	29a44 <__assert_fail@plt+0x1726c>
   29818:	add	r5, r7, #4
   2981c:	cmp	r6, r5
   29820:	bls	298d0 <__assert_fail@plt+0x170f8>
   29824:	mov	r1, #4
   29828:	movw	r9, #3472	; 0xd90
   2982c:	movt	r9, #7
   29830:	mov	r0, r7
   29834:	add	sl, r7, #8
   29838:	ldr	r3, [r9]
   2983c:	blx	r3
   29840:	cmp	r0, #1
   29844:	mov	r4, r0
   29848:	movls	r5, #0
   2984c:	bls	298e4 <__assert_fail@plt+0x1710c>
   29850:	cmp	r6, sl
   29854:	bhi	29a68 <__assert_fail@plt+0x17290>
   29858:	cmp	r6, r5
   2985c:	bls	29870 <__assert_fail@plt+0x17098>
   29860:	rsb	r1, r5, r6
   29864:	sub	r3, r1, #1
   29868:	cmp	r3, #7
   2986c:	bls	29a6c <__assert_fail@plt+0x17294>
   29870:	add	r2, r7, #12
   29874:	cmp	r6, r2
   29878:	bls	2a774 <__assert_fail@plt+0x17f9c>
   2987c:	mov	r0, sl
   29880:	ldr	r3, [r9]
   29884:	mov	r1, #4
   29888:	str	r2, [sp, #12]
   2988c:	blx	r3
   29890:	add	sl, r7, #16
   29894:	cmp	r6, sl
   29898:	mov	r5, #0
   2989c:	ldr	r2, [sp, #12]
   298a0:	str	r0, [sp, #52]	; 0x34
   298a4:	bhi	29920 <__assert_fail@plt+0x17148>
   298a8:	cmp	r6, r2
   298ac:	bls	29b04 <__assert_fail@plt+0x1732c>
   298b0:	rsb	r1, r2, r6
   298b4:	sub	r3, r1, #1
   298b8:	cmp	r3, #7
   298bc:	bls	29924 <__assert_fail@plt+0x1714c>
   298c0:	mov	r3, #0
   298c4:	str	r3, [sp, #24]
   298c8:	mov	r2, r3
   298cc:	b	2993c <__assert_fail@plt+0x17164>
   298d0:	cmp	r7, r6
   298d4:	bcc	29a80 <__assert_fail@plt+0x172a8>
   298d8:	mov	r4, #0
   298dc:	add	sl, r7, #8
   298e0:	mov	r5, r4
   298e4:	add	r2, r7, #12
   298e8:	cmp	r6, r2
   298ec:	bls	299cc <__assert_fail@plt+0x171f4>
   298f0:	movw	r9, #3472	; 0xd90
   298f4:	movt	r9, #7
   298f8:	mov	r0, sl
   298fc:	mov	r1, #4
   29900:	ldr	r3, [r9]
   29904:	add	sl, r7, #16
   29908:	str	r2, [sp, #12]
   2990c:	blx	r3
   29910:	cmp	r6, sl
   29914:	ldr	r2, [sp, #12]
   29918:	str	r0, [sp, #52]	; 0x34
   2991c:	bls	298b0 <__assert_fail@plt+0x170d8>
   29920:	mov	r1, #4
   29924:	ldr	r3, [r9]
   29928:	mov	r0, r2
   2992c:	blx	r3
   29930:	lsl	r2, r0, #3
   29934:	lsl	r3, r0, #2
   29938:	str	r0, [sp, #24]
   2993c:	add	r2, sl, r2
   29940:	str	r2, [sp, #20]
   29944:	add	r3, r2, r3
   29948:	str	r3, [sp, #28]
   2994c:	cmp	sl, r2
   29950:	ldr	ip, [sp, #28]
   29954:	movls	r3, #0
   29958:	movhi	r3, #1
   2995c:	cmp	ip, r7
   29960:	movcs	r7, r3
   29964:	orrcc	r7, r3, #1
   29968:	cmp	r7, #0
   2996c:	bne	29a04 <__assert_fail@plt+0x1722c>
   29970:	ldr	ip, [sp, #24]
   29974:	adds	ip, ip, #0
   29978:	movne	ip, #1
   2997c:	str	ip, [sp, #36]	; 0x24
   29980:	mov	r7, ip
   29984:	cmp	sl, r2
   29988:	movne	r7, #0
   2998c:	andeq	r7, r7, #1
   29990:	cmp	r7, #0
   29994:	bne	29a04 <__assert_fail@plt+0x1722c>
   29998:	cmp	r8, #0
   2999c:	bne	29b14 <__assert_fail@plt+0x1733c>
   299a0:	ldr	ip, [sp, #28]
   299a4:	cmp	r6, ip
   299a8:	bcc	29cd4 <__assert_fail@plt+0x174fc>
   299ac:	cmp	r4, #1
   299b0:	beq	29bd4 <__assert_fail@plt+0x173fc>
   299b4:	cmp	r4, #2
   299b8:	beq	29a94 <__assert_fail@plt+0x172bc>
   299bc:	cmp	r8, #0
   299c0:	bne	29d4c <__assert_fail@plt+0x17574>
   299c4:	mov	r0, #1
   299c8:	b	29a28 <__assert_fail@plt+0x17250>
   299cc:	cmp	r6, sl
   299d0:	bls	299e4 <__assert_fail@plt+0x1720c>
   299d4:	rsb	r1, sl, r6
   299d8:	sub	r3, r1, #1
   299dc:	cmp	r3, #7
   299e0:	bls	2a744 <__assert_fail@plt+0x17f6c>
   299e4:	add	sl, r7, #16
   299e8:	cmp	sl, r6
   299ec:	bcc	2a77c <__assert_fail@plt+0x17fa4>
   299f0:	mov	r3, #0
   299f4:	str	r3, [sp, #52]	; 0x34
   299f8:	mov	r2, r3
   299fc:	str	r3, [sp, #24]
   29a00:	b	2993c <__assert_fail@plt+0x17164>
   29a04:	movw	r1, #29692	; 0x73fc
   29a08:	movt	r1, #5
   29a0c:	mov	r0, #0
   29a10:	mov	r2, #5
   29a14:	bl	12298 <dcgettext@plt>
   29a18:	ldr	r1, [fp, #8]
   29a1c:	ldr	r2, [sp, #24]
   29a20:	bl	49bf8 <warn@@Base>
   29a24:	mov	r0, #0
   29a28:	ldr	ip, [sp, #16]
   29a2c:	ldr	r2, [sp, #164]	; 0xa4
   29a30:	ldr	r3, [ip]
   29a34:	cmp	r2, r3
   29a38:	bne	2a6ac <__assert_fail@plt+0x17ed4>
   29a3c:	add	sp, sp, #172	; 0xac
   29a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a44:	movw	r1, #29640	; 0x73c8
   29a48:	movt	r1, #5
   29a4c:	mov	r0, #0
   29a50:	mov	r2, #5
   29a54:	bl	12298 <dcgettext@plt>
   29a58:	ldr	r1, [fp, #8]
   29a5c:	bl	49bf8 <warn@@Base>
   29a60:	mov	r0, #0
   29a64:	b	29a28 <__assert_fail@plt+0x17250>
   29a68:	mov	r1, #4
   29a6c:	mov	r0, r5
   29a70:	ldr	r3, [r9]
   29a74:	blx	r3
   29a78:	mov	r5, r0
   29a7c:	b	298e4 <__assert_fail@plt+0x1710c>
   29a80:	rsb	r1, r7, r6
   29a84:	sub	r3, r1, #1
   29a88:	cmp	r3, #7
   29a8c:	bhi	298d8 <__assert_fail@plt+0x17100>
   29a90:	b	29828 <__assert_fail@plt+0x17050>
   29a94:	ldr	ip, [sp, #28]
   29a98:	lsl	r4, r5, #2
   29a9c:	movw	r1, #30096	; 0x7590
   29aa0:	ldr	r0, [fp, #8]
   29aa4:	movt	r1, #5
   29aa8:	add	ip, ip, r4
   29aac:	str	ip, [sp, #56]	; 0x38
   29ab0:	bl	12178 <strcmp@plt>
   29ab4:	ldr	ip, [sp, #28]
   29ab8:	ldr	r1, [sp, #56]	; 0x38
   29abc:	cmp	ip, r1
   29ac0:	bhi	29ae0 <__assert_fail@plt+0x17308>
   29ac4:	rsb	r3, ip, r1
   29ac8:	cmp	r3, #0
   29acc:	add	r2, r3, #3
   29ad0:	movlt	r3, r2
   29ad4:	asr	r7, r3, #2
   29ad8:	cmp	r7, r5
   29adc:	beq	29e34 <__assert_fail@plt+0x1765c>
   29ae0:	mov	r2, #5
   29ae4:	movw	r1, #30112	; 0x75a0
   29ae8:	mov	r0, #0
   29aec:	movt	r1, #5
   29af0:	bl	12298 <dcgettext@plt>
   29af4:	mov	r1, r5
   29af8:	bl	49bf8 <warn@@Base>
   29afc:	mov	r0, #0
   29b00:	b	29a28 <__assert_fail@plt+0x17250>
   29b04:	mov	r3, r5
   29b08:	mov	r2, r5
   29b0c:	str	r5, [sp, #24]
   29b10:	b	2993c <__assert_fail@plt+0x17164>
   29b14:	mov	r2, #5
   29b18:	movw	r1, #15452	; 0x3c5c
   29b1c:	mov	r0, r7
   29b20:	movt	r1, #5
   29b24:	bl	12298 <dcgettext@plt>
   29b28:	ldr	r2, [fp, #8]
   29b2c:	mov	r1, r0
   29b30:	mov	r0, #1
   29b34:	bl	125bc <__printf_chk@plt>
   29b38:	mov	r2, #5
   29b3c:	mov	r0, r7
   29b40:	movw	r1, #29732	; 0x7424
   29b44:	movt	r1, #5
   29b48:	bl	12298 <dcgettext@plt>
   29b4c:	mov	r2, r4
   29b50:	mov	r1, r0
   29b54:	mov	r0, #1
   29b58:	bl	125bc <__printf_chk@plt>
   29b5c:	cmp	r4, #1
   29b60:	bls	29b88 <__assert_fail@plt+0x173b0>
   29b64:	mov	r2, #5
   29b68:	mov	r0, r7
   29b6c:	movw	r1, #29764	; 0x7444
   29b70:	movt	r1, #5
   29b74:	bl	12298 <dcgettext@plt>
   29b78:	mov	r2, r5
   29b7c:	mov	r1, r0
   29b80:	mov	r0, #1
   29b84:	bl	125bc <__printf_chk@plt>
   29b88:	mov	r2, #5
   29b8c:	movw	r1, #29796	; 0x7464
   29b90:	mov	r0, #0
   29b94:	movt	r1, #5
   29b98:	bl	12298 <dcgettext@plt>
   29b9c:	ldr	r2, [sp, #52]	; 0x34
   29ba0:	mov	r1, r0
   29ba4:	mov	r0, #1
   29ba8:	bl	125bc <__printf_chk@plt>
   29bac:	mov	r2, #5
   29bb0:	movw	r1, #29828	; 0x7484
   29bb4:	mov	r0, #0
   29bb8:	movt	r1, #5
   29bbc:	bl	12298 <dcgettext@plt>
   29bc0:	ldr	r2, [sp, #24]
   29bc4:	mov	r1, r0
   29bc8:	mov	r0, #1
   29bcc:	bl	125bc <__printf_chk@plt>
   29bd0:	b	299a0 <__assert_fail@plt+0x171c8>
   29bd4:	cmp	r8, #0
   29bd8:	beq	29dec <__assert_fail@plt+0x17614>
   29bdc:	ldr	ip, [sp, #36]	; 0x24
   29be0:	cmp	ip, #0
   29be4:	beq	2a1bc <__assert_fail@plt+0x179e4>
   29be8:	ldr	r4, [sp, #20]
   29bec:	mov	r0, sl
   29bf0:	ldr	ip, [sp, #20]
   29bf4:	movw	r9, #3472	; 0xd90
   29bf8:	str	fp, [sp, #20]
   29bfc:	movw	r7, #1240	; 0x4d8
   29c00:	mov	fp, r4
   29c04:	add	r4, r0, #8
   29c08:	cmp	r6, r4
   29c0c:	add	ip, ip, #4
   29c10:	str	ip, [sp, #32]
   29c14:	mov	ip, #0
   29c18:	movt	r9, #7
   29c1c:	movt	r7, #7
   29c20:	mov	sl, ip
   29c24:	bcs	29c68 <__assert_fail@plt+0x17490>
   29c28:	mov	r2, #0
   29c2c:	mov	r3, #0
   29c30:	strd	r2, [sp, #80]	; 0x50
   29c34:	strd	r2, [sp, #88]	; 0x58
   29c38:	ldr	ip, [sp, #32]
   29c3c:	add	sl, sl, #1
   29c40:	add	fp, fp, #4
   29c44:	add	ip, ip, #4
   29c48:	str	ip, [sp, #32]
   29c4c:	ldr	ip, [sp, #24]
   29c50:	cmp	ip, sl
   29c54:	bls	2a1bc <__assert_fail@plt+0x179e4>
   29c58:	mov	r0, r4
   29c5c:	add	r4, r0, #8
   29c60:	cmp	r6, r4
   29c64:	bcc	29c28 <__assert_fail@plt+0x17450>
   29c68:	add	r2, sp, #88	; 0x58
   29c6c:	add	r1, sp, #80	; 0x50
   29c70:	bl	4a1b0 <warn@@Base+0x5b8>
   29c74:	ldrd	r2, [sp, #80]	; 0x50
   29c78:	orrs	r0, r2, r3
   29c7c:	beq	2a734 <__assert_fail@plt+0x17f5c>
   29c80:	ldr	ip, [sp, #32]
   29c84:	cmp	r6, ip
   29c88:	bhi	29ce4 <__assert_fail@plt+0x1750c>
   29c8c:	cmp	r6, fp
   29c90:	bhi	29d38 <__assert_fail@plt+0x17560>
   29c94:	ldr	r5, [sp, #28]
   29c98:	cmp	r8, #0
   29c9c:	bne	29d7c <__assert_fail@plt+0x175a4>
   29ca0:	cmp	r6, r5
   29ca4:	bls	29d24 <__assert_fail@plt+0x1754c>
   29ca8:	mov	r0, r5
   29cac:	add	r5, r5, #4
   29cb0:	cmp	r6, r5
   29cb4:	bhi	2a6b0 <__assert_fail@plt+0x17ed8>
   29cb8:	cmp	r6, r0
   29cbc:	bhi	2a720 <__assert_fail@plt+0x17f48>
   29cc0:	cmp	r8, #0
   29cc4:	beq	29dc8 <__assert_fail@plt+0x175f0>
   29cc8:	mov	r0, #10
   29ccc:	bl	1258c <putchar@plt>
   29cd0:	b	29c38 <__assert_fail@plt+0x17460>
   29cd4:	movw	r1, #29860	; 0x74a4
   29cd8:	mov	r0, #0
   29cdc:	movt	r1, #5
   29ce0:	b	29a10 <__assert_fail@plt+0x17238>
   29ce4:	mov	r1, #4
   29ce8:	ldr	r3, [r9]
   29cec:	mov	r0, fp
   29cf0:	blx	r3
   29cf4:	ldr	ip, [sp, #28]
   29cf8:	add	r5, ip, r0, lsl #2
   29cfc:	cmp	ip, r5
   29d00:	bls	29c98 <__assert_fail@plt+0x174c0>
   29d04:	mov	r2, #5
   29d08:	movw	r1, #29908	; 0x74d4
   29d0c:	mov	r0, #0
   29d10:	movt	r1, #5
   29d14:	bl	12298 <dcgettext@plt>
   29d18:	bl	49bf8 <warn@@Base>
   29d1c:	mov	r0, #0
   29d20:	b	29a28 <__assert_fail@plt+0x17250>
   29d24:	movw	r1, #30000	; 0x7530
   29d28:	ldr	fp, [sp, #20]
   29d2c:	mov	r0, #0
   29d30:	movt	r1, #5
   29d34:	b	29a50 <__assert_fail@plt+0x17278>
   29d38:	rsb	r1, fp, r6
   29d3c:	sub	r3, r1, #1
   29d40:	cmp	r3, #7
   29d44:	bhi	29c94 <__assert_fail@plt+0x174bc>
   29d48:	b	29ce8 <__assert_fail@plt+0x17510>
   29d4c:	mov	r2, #5
   29d50:	movw	r1, #30524	; 0x773c
   29d54:	mov	r0, #0
   29d58:	movt	r1, #5
   29d5c:	bl	12298 <dcgettext@plt>
   29d60:	mov	r2, r4
   29d64:	mov	r1, r0
   29d68:	mov	r0, #1
   29d6c:	bl	125bc <__printf_chk@plt>
   29d70:	mov	r0, #10
   29d74:	bl	1258c <putchar@plt>
   29d78:	b	299c4 <__assert_fail@plt+0x171ec>
   29d7c:	mov	r2, #5
   29d80:	movw	r1, #29960	; 0x7508
   29d84:	mov	r0, #0
   29d88:	movt	r1, #5
   29d8c:	bl	12298 <dcgettext@plt>
   29d90:	add	r3, sp, #100	; 0x64
   29d94:	str	r3, [sp]
   29d98:	ldrd	r2, [sp, #88]	; 0x58
   29d9c:	mov	ip, r0
   29da0:	ldrd	r0, [sp, #80]	; 0x50
   29da4:	str	ip, [sp, #12]
   29da8:	bl	1c590 <__assert_fail@plt+0x9db8>
   29dac:	ldr	ip, [sp, #12]
   29db0:	mov	r2, sl
   29db4:	mov	r1, ip
   29db8:	mov	r3, r0
   29dbc:	mov	r0, #1
   29dc0:	bl	125bc <__printf_chk@plt>
   29dc4:	b	29ca0 <__assert_fail@plt+0x174c8>
   29dc8:	ldr	r3, [r7, #1688]	; 0x698
   29dcc:	ldr	r2, [r7, #1684]	; 0x694
   29dd0:	cmp	r3, r2
   29dd4:	bcs	2a1c8 <__assert_fail@plt+0x179f0>
   29dd8:	ldr	r2, [r7, #1680]	; 0x690
   29ddc:	add	r1, r3, #1
   29de0:	str	r1, [r7, #1688]	; 0x698
   29de4:	str	r8, [r2, r3, lsl #2]
   29de8:	b	29c38 <__assert_fail@plt+0x17460>
   29dec:	ldr	ip, [sp, #28]
   29df0:	movw	r4, #1240	; 0x4d8
   29df4:	movt	r4, #7
   29df8:	rsb	r3, ip, r6
   29dfc:	cmp	r3, #0
   29e00:	add	r2, r3, #3
   29e04:	ldr	r0, [r4, #1680]	; 0x690
   29e08:	movlt	r3, r2
   29e0c:	cmp	r0, #0
   29e10:	asr	r3, r3, #2
   29e14:	beq	2a5f4 <__assert_fail@plt+0x17e1c>
   29e18:	ldr	r1, [r4, #1688]	; 0x698
   29e1c:	mov	r2, #4
   29e20:	add	r1, r3, r1
   29e24:	str	r1, [r4, #1684]	; 0x694
   29e28:	bl	21ac4 <__assert_fail@plt+0xf2ec>
   29e2c:	str	r0, [r4, #1680]	; 0x690
   29e30:	b	29bdc <__assert_fail@plt+0x17404>
   29e34:	ldr	ip, [sp, #52]	; 0x34
   29e38:	mul	r4, r4, ip
   29e3c:	ldr	ip, [sp, #56]	; 0x38
   29e40:	add	ip, ip, r4
   29e44:	str	ip, [sp, #68]	; 0x44
   29e48:	add	r4, ip, r4
   29e4c:	cmp	r6, r4
   29e50:	movwcc	r1, #30148	; 0x75c4
   29e54:	movcc	r0, #0
   29e58:	movtcc	r1, #5
   29e5c:	bcc	29a50 <__assert_fail@plt+0x17278>
   29e60:	rsbs	r0, r0, #1
   29e64:	movcc	r0, #0
   29e68:	cmp	r8, #0
   29e6c:	str	r0, [sp, #72]	; 0x48
   29e70:	bne	2a4e0 <__assert_fail@plt+0x17d08>
   29e74:	ldr	ip, [sp, #72]	; 0x48
   29e78:	movw	r4, #1240	; 0x4d8
   29e7c:	ldr	r0, [sp, #52]	; 0x34
   29e80:	movt	r4, #7
   29e84:	cmp	ip, #0
   29e88:	mov	r1, #104	; 0x68
   29e8c:	beq	2a4cc <__assert_fail@plt+0x17cf4>
   29e90:	str	r0, [r4, #1592]	; 0x638
   29e94:	bl	29760 <__assert_fail@plt+0x16f88>
   29e98:	str	r0, [sp, #60]	; 0x3c
   29e9c:	str	r0, [r4, #1588]	; 0x634
   29ea0:	ldr	ip, [sp, #36]	; 0x24
   29ea4:	cmp	ip, #0
   29ea8:	beq	2a1e8 <__assert_fail@plt+0x17a10>
   29eac:	movw	ip, #3472	; 0xd90
   29eb0:	movt	ip, #7
   29eb4:	lsl	r0, r7, #2
   29eb8:	mov	r1, #0
   29ebc:	str	r0, [sp, #64]	; 0x40
   29ec0:	mov	r4, sl
   29ec4:	ldr	r5, [sp, #20]
   29ec8:	mov	fp, ip
   29ecc:	str	r1, [sp, #44]	; 0x2c
   29ed0:	str	sl, [sp, #76]	; 0x4c
   29ed4:	b	29f10 <__assert_fail@plt+0x17738>
   29ed8:	cmp	r6, r5
   29edc:	bls	29ef0 <__assert_fail@plt+0x17718>
   29ee0:	rsb	r1, r5, r6
   29ee4:	sub	r3, r1, #1
   29ee8:	cmp	r3, #7
   29eec:	bls	29f44 <__assert_fail@plt+0x1776c>
   29ef0:	ldr	ip, [sp, #44]	; 0x2c
   29ef4:	ldr	r0, [sp, #24]
   29ef8:	add	ip, ip, #1
   29efc:	str	ip, [sp, #44]	; 0x2c
   29f00:	cmp	r0, ip
   29f04:	bls	2a1e4 <__assert_fail@plt+0x17a0c>
   29f08:	ldr	r5, [sp, #48]	; 0x30
   29f0c:	ldr	r4, [sp, #40]	; 0x28
   29f10:	add	ip, r4, #8
   29f14:	str	ip, [sp, #40]	; 0x28
   29f18:	cmp	r6, ip
   29f1c:	bcs	2a124 <__assert_fail@plt+0x1794c>
   29f20:	mov	r0, #0
   29f24:	mov	r1, #0
   29f28:	strd	r0, [sp, #80]	; 0x50
   29f2c:	strd	r0, [sp, #88]	; 0x58
   29f30:	add	ip, r5, #4
   29f34:	str	ip, [sp, #48]	; 0x30
   29f38:	cmp	r6, ip
   29f3c:	bls	29ed8 <__assert_fail@plt+0x17700>
   29f40:	mov	r1, #4
   29f44:	mov	r0, r5
   29f48:	ldr	r3, [fp]
   29f4c:	blx	r3
   29f50:	subs	r5, r0, #0
   29f54:	beq	29ef0 <__assert_fail@plt+0x17718>
   29f58:	ldr	ip, [sp, #52]	; 0x34
   29f5c:	cmp	ip, r5
   29f60:	bcc	2a5cc <__assert_fail@plt+0x17df4>
   29f64:	cmp	r8, #0
   29f68:	beq	2a138 <__assert_fail@plt+0x17960>
   29f6c:	ldr	r0, [sp, #56]	; 0x38
   29f70:	sub	sl, r5, #-1073741823	; 0xc0000001
   29f74:	ldr	ip, [sp, #64]	; 0x40
   29f78:	mla	sl, sl, ip, r0
   29f7c:	ldr	ip, [sp, #56]	; 0x38
   29f80:	cmp	sl, r6
   29f84:	movls	r0, #0
   29f88:	movhi	r0, #1
   29f8c:	cmp	sl, ip
   29f90:	orrcc	r0, r0, #1
   29f94:	cmp	r0, #0
   29f98:	bne	2a194 <__assert_fail@plt+0x179bc>
   29f9c:	mov	r2, #5
   29fa0:	movw	r1, #30440	; 0x76e8
   29fa4:	movt	r1, #5
   29fa8:	bl	12298 <dcgettext@plt>
   29fac:	add	r3, sp, #100	; 0x64
   29fb0:	str	r3, [sp]
   29fb4:	ldrd	r2, [sp, #88]	; 0x58
   29fb8:	mov	r4, r0
   29fbc:	ldrd	r0, [sp, #80]	; 0x50
   29fc0:	bl	1c590 <__assert_fail@plt+0x9db8>
   29fc4:	mov	r1, r4
   29fc8:	ldr	r2, [sp, #44]	; 0x2c
   29fcc:	mov	r3, r0
   29fd0:	mov	r0, #1
   29fd4:	bl	125bc <__printf_chk@plt>
   29fd8:	cmp	r7, #0
   29fdc:	beq	2a0c8 <__assert_fail@plt+0x178f0>
   29fe0:	ldr	ip, [sp, #60]	; 0x3c
   29fe4:	mov	r9, #104	; 0x68
   29fe8:	ldr	r3, [sp, #28]
   29fec:	mov	r0, sl
   29ff0:	mov	r4, #0
   29ff4:	mla	r9, r9, r5, ip
   29ff8:	mov	sl, r3
   29ffc:	sub	r9, r9, #104	; 0x68
   2a000:	str	r9, [sp, #32]
   2a004:	b	2a080 <__assert_fail@plt+0x178a8>
   2a008:	cmp	r6, r0
   2a00c:	bls	2a020 <__assert_fail@plt+0x17848>
   2a010:	rsb	r1, r0, r6
   2a014:	sub	r3, r1, #1
   2a018:	cmp	r3, #7
   2a01c:	bls	2a090 <__assert_fail@plt+0x178b8>
   2a020:	cmp	r8, #0
   2a024:	mov	r2, #0
   2a028:	bne	2a0a4 <__assert_fail@plt+0x178cc>
   2a02c:	add	r9, sl, #4
   2a030:	cmp	r6, r9
   2a034:	bhi	2a0dc <__assert_fail@plt+0x17904>
   2a038:	cmp	r6, sl
   2a03c:	bls	2a050 <__assert_fail@plt+0x17878>
   2a040:	rsb	r1, sl, r6
   2a044:	sub	r0, r1, #1
   2a048:	cmp	r0, #7
   2a04c:	bls	2a0e0 <__assert_fail@plt+0x17908>
   2a050:	mov	r1, r8
   2a054:	add	r1, r1, #1
   2a058:	ldr	r3, [sp, #32]
   2a05c:	mov	ip, #0
   2a060:	add	r0, r3, r1, lsl #3
   2a064:	str	r2, [r3, r1, lsl #3]
   2a068:	str	ip, [r0, #4]
   2a06c:	add	r4, r4, #1
   2a070:	mov	sl, r9
   2a074:	cmp	r7, r4
   2a078:	beq	2a0c8 <__assert_fail@plt+0x178f0>
   2a07c:	mov	r0, r5
   2a080:	add	r5, r0, #4
   2a084:	cmp	r6, r5
   2a088:	bls	2a008 <__assert_fail@plt+0x17830>
   2a08c:	mov	r1, #4
   2a090:	ldr	r3, [fp]
   2a094:	blx	r3
   2a098:	cmp	r8, #0
   2a09c:	mov	r2, r0
   2a0a0:	beq	2a02c <__assert_fail@plt+0x17854>
   2a0a4:	movw	r1, #30456	; 0x76f8
   2a0a8:	mov	r0, #1
   2a0ac:	movt	r1, #5
   2a0b0:	add	r4, r4, #1
   2a0b4:	add	r9, sl, #4
   2a0b8:	bl	125bc <__printf_chk@plt>
   2a0bc:	cmp	r7, r4
   2a0c0:	mov	sl, r9
   2a0c4:	bne	2a07c <__assert_fail@plt+0x178a4>
   2a0c8:	cmp	r8, #0
   2a0cc:	beq	29ef0 <__assert_fail@plt+0x17718>
   2a0d0:	mov	r0, #10
   2a0d4:	bl	1258c <putchar@plt>
   2a0d8:	b	29ef0 <__assert_fail@plt+0x17718>
   2a0dc:	mov	r1, #4
   2a0e0:	mov	r0, sl
   2a0e4:	ldr	ip, [fp]
   2a0e8:	str	r2, [sp, #12]
   2a0ec:	blx	ip
   2a0f0:	ldr	r2, [sp, #12]
   2a0f4:	cmp	r0, #7
   2a0f8:	mov	sl, r0
   2a0fc:	mov	r1, r0
   2a100:	bls	2a054 <__assert_fail@plt+0x1787c>
   2a104:	mov	r2, #5
   2a108:	movw	r1, #30464	; 0x7700
   2a10c:	mov	r0, #0
   2a110:	movt	r1, #5
   2a114:	bl	12298 <dcgettext@plt>
   2a118:	mov	r1, sl
   2a11c:	bl	49bf8 <warn@@Base>
   2a120:	b	2a06c <__assert_fail@plt+0x17894>
   2a124:	mov	r0, r4
   2a128:	add	r1, sp, #80	; 0x50
   2a12c:	add	r2, sp, #88	; 0x58
   2a130:	bl	4a1b0 <warn@@Base+0x5b8>
   2a134:	b	29f30 <__assert_fail@plt+0x17758>
   2a138:	ldr	ip, [sp, #40]	; 0x28
   2a13c:	cmp	r6, ip
   2a140:	bls	2a688 <__assert_fail@plt+0x17eb0>
   2a144:	ldr	r1, [sp, #56]	; 0x38
   2a148:	sub	sl, r5, #-1073741823	; 0xc0000001
   2a14c:	ldr	ip, [sp, #64]	; 0x40
   2a150:	mov	r3, #104	; 0x68
   2a154:	mul	r3, r3, r5
   2a158:	ldr	r0, [r4]
   2a15c:	mla	sl, ip, sl, r1
   2a160:	ldr	ip, [sp, #60]	; 0x3c
   2a164:	sub	r3, r3, #104	; 0x68
   2a168:	ldr	r2, [r4, #4]
   2a16c:	cmp	sl, r1
   2a170:	str	r0, [ip, r3]
   2a174:	add	r3, ip, r3
   2a178:	movcs	r1, #0
   2a17c:	movcc	r1, #1
   2a180:	cmp	sl, r6
   2a184:	orrhi	r1, r1, #1
   2a188:	str	r2, [r3, #4]
   2a18c:	cmp	r1, #0
   2a190:	beq	29fd8 <__assert_fail@plt+0x17800>
   2a194:	mov	r2, #5
   2a198:	movw	r1, #30376	; 0x76a8
   2a19c:	mov	r0, #0
   2a1a0:	movt	r1, #5
   2a1a4:	bl	12298 <dcgettext@plt>
   2a1a8:	mov	r1, r5
   2a1ac:	mov	r2, r7
   2a1b0:	bl	49bf8 <warn@@Base>
   2a1b4:	mov	r0, #0
   2a1b8:	b	29a28 <__assert_fail@plt+0x17250>
   2a1bc:	cmp	r8, #0
   2a1c0:	bne	29d70 <__assert_fail@plt+0x17598>
   2a1c4:	b	299c4 <__assert_fail@plt+0x171ec>
   2a1c8:	mov	r2, #5
   2a1cc:	movw	r1, #30044	; 0x755c
   2a1d0:	mov	r0, r8
   2a1d4:	movt	r1, #5
   2a1d8:	bl	12298 <dcgettext@plt>
   2a1dc:	bl	494bc <error@@Base>
   2a1e0:	b	29c38 <__assert_fail@plt+0x17460>
   2a1e4:	ldr	sl, [sp, #76]	; 0x4c
   2a1e8:	cmp	r8, #0
   2a1ec:	bne	2a61c <__assert_fail@plt+0x17e44>
   2a1f0:	cmp	r7, #0
   2a1f4:	beq	2a278 <__assert_fail@plt+0x17aa0>
   2a1f8:	movw	r9, #3472	; 0xd90
   2a1fc:	ldr	r0, [sp, #28]
   2a200:	movt	r9, #7
   2a204:	mov	r4, #0
   2a208:	b	2a240 <__assert_fail@plt+0x17a68>
   2a20c:	cmp	r6, r0
   2a210:	bls	2a224 <__assert_fail@plt+0x17a4c>
   2a214:	rsb	r1, r0, r6
   2a218:	sub	r3, r1, #1
   2a21c:	cmp	r3, #7
   2a220:	bls	2a250 <__assert_fail@plt+0x17a78>
   2a224:	mov	r0, #0
   2a228:	cmp	r8, #0
   2a22c:	bne	2a25c <__assert_fail@plt+0x17a84>
   2a230:	add	r4, r4, #1
   2a234:	cmp	r7, r4
   2a238:	beq	2a278 <__assert_fail@plt+0x17aa0>
   2a23c:	mov	r0, r5
   2a240:	add	r5, r0, #4
   2a244:	cmp	r6, r5
   2a248:	bls	2a20c <__assert_fail@plt+0x17a34>
   2a24c:	mov	r1, #4
   2a250:	ldr	r3, [r9]
   2a254:	blx	r3
   2a258:	b	2a228 <__assert_fail@plt+0x17a50>
   2a25c:	bl	1bfc8 <__assert_fail@plt+0x97f0>
   2a260:	movw	r1, #30252	; 0x762c
   2a264:	movt	r1, #5
   2a268:	mov	r2, r0
   2a26c:	mov	r0, #1
   2a270:	bl	125bc <__printf_chk@plt>
   2a274:	b	2a230 <__assert_fail@plt+0x17a58>
   2a278:	cmp	r8, #0
   2a27c:	bne	2a610 <__assert_fail@plt+0x17e38>
   2a280:	ldr	ip, [sp, #36]	; 0x24
   2a284:	cmp	ip, #0
   2a288:	beq	2a1bc <__assert_fail@plt+0x179e4>
   2a28c:	lsl	ip, r7, #2
   2a290:	str	ip, [sp, #44]	; 0x2c
   2a294:	mov	ip, #0
   2a298:	movw	r5, #3472	; 0xd90
   2a29c:	ldr	r4, [sp, #20]
   2a2a0:	movt	r5, #7
   2a2a4:	mov	r0, sl
   2a2a8:	mov	fp, ip
   2a2ac:	b	2a2e0 <__assert_fail@plt+0x17b08>
   2a2b0:	cmp	r6, r4
   2a2b4:	bls	2a2c8 <__assert_fail@plt+0x17af0>
   2a2b8:	rsb	r1, r4, r6
   2a2bc:	sub	r3, r1, #1
   2a2c0:	cmp	r3, #7
   2a2c4:	bls	2a314 <__assert_fail@plt+0x17b3c>
   2a2c8:	ldr	ip, [sp, #24]
   2a2cc:	add	fp, fp, #1
   2a2d0:	cmp	ip, fp
   2a2d4:	bls	2a1bc <__assert_fail@plt+0x179e4>
   2a2d8:	ldr	r4, [sp, #36]	; 0x24
   2a2dc:	ldr	r0, [sp, #32]
   2a2e0:	add	ip, r0, #8
   2a2e4:	str	ip, [sp, #32]
   2a2e8:	cmp	r6, ip
   2a2ec:	bcs	2a478 <__assert_fail@plt+0x17ca0>
   2a2f0:	mov	r0, #0
   2a2f4:	mov	r1, #0
   2a2f8:	strd	r0, [sp, #80]	; 0x50
   2a2fc:	strd	r0, [sp, #88]	; 0x58
   2a300:	add	ip, r4, #4
   2a304:	str	ip, [sp, #36]	; 0x24
   2a308:	cmp	r6, ip
   2a30c:	bls	2a2b0 <__assert_fail@plt+0x17ad8>
   2a310:	mov	r1, #4
   2a314:	mov	r0, r4
   2a318:	ldr	r3, [r5]
   2a31c:	blx	r3
   2a320:	subs	r4, r0, #0
   2a324:	beq	2a2c8 <__assert_fail@plt+0x17af0>
   2a328:	ldr	ip, [sp, #44]	; 0x2c
   2a32c:	sub	r9, r4, #-1073741823	; 0xc0000001
   2a330:	ldr	r0, [sp, #68]	; 0x44
   2a334:	cmp	r8, #0
   2a338:	mla	r9, ip, r9, r0
   2a33c:	bne	2a488 <__assert_fail@plt+0x17cb0>
   2a340:	cmp	r7, #0
   2a344:	beq	2a464 <__assert_fail@plt+0x17c8c>
   2a348:	ldr	ip, [sp, #60]	; 0x3c
   2a34c:	mov	sl, #104	; 0x68
   2a350:	ldr	r3, [sp, #28]
   2a354:	mov	r0, r9
   2a358:	str	fp, [sp, #40]	; 0x28
   2a35c:	mla	sl, sl, r4, ip
   2a360:	mov	fp, r3
   2a364:	mov	r4, #0
   2a368:	sub	sl, sl, #104	; 0x68
   2a36c:	str	sl, [sp, #20]
   2a370:	b	2a3e0 <__assert_fail@plt+0x17c08>
   2a374:	cmp	r6, r0
   2a378:	bls	2a38c <__assert_fail@plt+0x17bb4>
   2a37c:	rsb	r1, r0, r6
   2a380:	sub	r2, r1, #1
   2a384:	cmp	r2, #7
   2a388:	bls	2a3f0 <__assert_fail@plt+0x17c18>
   2a38c:	mov	r2, #0
   2a390:	cmp	r8, #0
   2a394:	bne	2a448 <__assert_fail@plt+0x17c70>
   2a398:	add	r9, fp, #4
   2a39c:	cmp	r6, r9
   2a3a0:	bhi	2a400 <__assert_fail@plt+0x17c28>
   2a3a4:	cmp	r6, fp
   2a3a8:	bls	2a3bc <__assert_fail@plt+0x17be4>
   2a3ac:	rsb	r1, fp, r6
   2a3b0:	sub	r0, r1, #1
   2a3b4:	cmp	r0, #7
   2a3b8:	bls	2a404 <__assert_fail@plt+0x17c2c>
   2a3bc:	mov	r1, r8
   2a3c0:	ldr	r3, [sp, #20]
   2a3c4:	add	r1, r1, #18
   2a3c8:	str	r2, [r3, r1, lsl #2]
   2a3cc:	add	r4, r4, #1
   2a3d0:	mov	fp, r9
   2a3d4:	cmp	r7, r4
   2a3d8:	beq	2a460 <__assert_fail@plt+0x17c88>
   2a3dc:	mov	r0, sl
   2a3e0:	add	sl, r0, #4
   2a3e4:	cmp	r6, sl
   2a3e8:	bls	2a374 <__assert_fail@plt+0x17b9c>
   2a3ec:	mov	r1, #4
   2a3f0:	ldr	r2, [r5]
   2a3f4:	blx	r2
   2a3f8:	mov	r2, r0
   2a3fc:	b	2a390 <__assert_fail@plt+0x17bb8>
   2a400:	mov	r1, #4
   2a404:	mov	r0, fp
   2a408:	ldr	r3, [r5]
   2a40c:	str	r2, [sp, #12]
   2a410:	blx	r3
   2a414:	ldr	r2, [sp, #12]
   2a418:	cmp	r0, #7
   2a41c:	mov	fp, r0
   2a420:	mov	r1, r0
   2a424:	bls	2a3c0 <__assert_fail@plt+0x17be8>
   2a428:	mov	r2, #5
   2a42c:	movw	r1, #30464	; 0x7700
   2a430:	mov	r0, #0
   2a434:	movt	r1, #5
   2a438:	bl	12298 <dcgettext@plt>
   2a43c:	mov	r1, fp
   2a440:	bl	49bf8 <warn@@Base>
   2a444:	b	2a3cc <__assert_fail@plt+0x17bf4>
   2a448:	movw	r1, #30456	; 0x76f8
   2a44c:	mov	r0, #1
   2a450:	movt	r1, #5
   2a454:	add	r9, fp, #4
   2a458:	bl	125bc <__printf_chk@plt>
   2a45c:	b	2a3cc <__assert_fail@plt+0x17bf4>
   2a460:	ldr	fp, [sp, #40]	; 0x28
   2a464:	cmp	r8, #0
   2a468:	beq	2a2c8 <__assert_fail@plt+0x17af0>
   2a46c:	mov	r0, #10
   2a470:	bl	1258c <putchar@plt>
   2a474:	b	2a2c8 <__assert_fail@plt+0x17af0>
   2a478:	add	r1, sp, #80	; 0x50
   2a47c:	add	r2, sp, #88	; 0x58
   2a480:	bl	4a1b0 <warn@@Base+0x5b8>
   2a484:	b	2a300 <__assert_fail@plt+0x17b28>
   2a488:	mov	r2, #5
   2a48c:	movw	r1, #30440	; 0x76e8
   2a490:	mov	r0, #0
   2a494:	movt	r1, #5
   2a498:	bl	12298 <dcgettext@plt>
   2a49c:	add	r3, sp, #100	; 0x64
   2a4a0:	str	r3, [sp]
   2a4a4:	ldrd	r2, [sp, #88]	; 0x58
   2a4a8:	mov	sl, r0
   2a4ac:	ldrd	r0, [sp, #80]	; 0x50
   2a4b0:	bl	1c590 <__assert_fail@plt+0x9db8>
   2a4b4:	mov	r1, sl
   2a4b8:	mov	r2, fp
   2a4bc:	mov	r3, r0
   2a4c0:	mov	r0, #1
   2a4c4:	bl	125bc <__printf_chk@plt>
   2a4c8:	b	2a340 <__assert_fail@plt+0x17b68>
   2a4cc:	str	r0, [r4, #1600]	; 0x640
   2a4d0:	bl	29760 <__assert_fail@plt+0x16f88>
   2a4d4:	str	r0, [sp, #60]	; 0x3c
   2a4d8:	str	r0, [r4, #1596]	; 0x63c
   2a4dc:	b	29ea0 <__assert_fail@plt+0x176c8>
   2a4e0:	mov	r2, #5
   2a4e4:	movw	r1, #30200	; 0x75f8
   2a4e8:	mov	r0, #0
   2a4ec:	movt	r1, #5
   2a4f0:	bl	12298 <dcgettext@plt>
   2a4f4:	mov	r1, r0
   2a4f8:	mov	r0, #1
   2a4fc:	bl	125bc <__printf_chk@plt>
   2a500:	ldr	ip, [sp, #72]	; 0x48
   2a504:	mov	r2, #5
   2a508:	cmp	ip, #0
   2a50c:	movwne	r1, #30216	; 0x7608
   2a510:	movweq	r1, #30228	; 0x7614
   2a514:	movne	r0, #0
   2a518:	ldreq	r0, [sp, #72]	; 0x48
   2a51c:	movtne	r1, #5
   2a520:	movteq	r1, #5
   2a524:	bl	12298 <dcgettext@plt>
   2a528:	movw	r1, #30236	; 0x761c
   2a52c:	movt	r1, #5
   2a530:	mov	r2, r0
   2a534:	mov	r0, #1
   2a538:	bl	125bc <__printf_chk@plt>
   2a53c:	cmp	r7, #0
   2a540:	beq	2a5b8 <__assert_fail@plt+0x17de0>
   2a544:	movw	r9, #3472	; 0xd90
   2a548:	ldr	r0, [sp, #28]
   2a54c:	movt	r9, #7
   2a550:	mov	r4, #0
   2a554:	b	2a59c <__assert_fail@plt+0x17dc4>
   2a558:	cmp	r6, r0
   2a55c:	bls	2a570 <__assert_fail@plt+0x17d98>
   2a560:	rsb	r1, r0, r6
   2a564:	sub	r3, r1, #1
   2a568:	cmp	r3, #7
   2a56c:	bls	2a5ac <__assert_fail@plt+0x17dd4>
   2a570:	mov	r0, #0
   2a574:	bl	1bfc8 <__assert_fail@plt+0x97f0>
   2a578:	add	r4, r4, #1
   2a57c:	movw	r1, #30252	; 0x762c
   2a580:	movt	r1, #5
   2a584:	mov	r2, r0
   2a588:	mov	r0, #1
   2a58c:	bl	125bc <__printf_chk@plt>
   2a590:	cmp	r7, r4
   2a594:	beq	2a5b8 <__assert_fail@plt+0x17de0>
   2a598:	mov	r0, r5
   2a59c:	add	r5, r0, #4
   2a5a0:	cmp	r6, r5
   2a5a4:	bls	2a558 <__assert_fail@plt+0x17d80>
   2a5a8:	mov	r1, #4
   2a5ac:	ldr	r3, [r9]
   2a5b0:	blx	r3
   2a5b4:	b	2a574 <__assert_fail@plt+0x17d9c>
   2a5b8:	mov	r0, #10
   2a5bc:	mov	ip, #0
   2a5c0:	str	ip, [sp, #60]	; 0x3c
   2a5c4:	bl	1258c <putchar@plt>
   2a5c8:	b	29ea0 <__assert_fail@plt+0x176c8>
   2a5cc:	mov	r2, #5
   2a5d0:	movw	r1, #30260	; 0x7634
   2a5d4:	mov	r0, #0
   2a5d8:	movt	r1, #5
   2a5dc:	bl	12298 <dcgettext@plt>
   2a5e0:	mov	r1, r5
   2a5e4:	ldr	r2, [sp, #52]	; 0x34
   2a5e8:	bl	49bf8 <warn@@Base>
   2a5ec:	mov	r0, #0
   2a5f0:	b	29a28 <__assert_fail@plt+0x17250>
   2a5f4:	mov	r0, r3
   2a5f8:	mov	r1, #4
   2a5fc:	str	r3, [r4, #1684]	; 0x694
   2a600:	str	r8, [r4, #1688]	; 0x698
   2a604:	bl	21a60 <__assert_fail@plt+0xf288>
   2a608:	str	r0, [r4, #1680]	; 0x690
   2a60c:	b	29bdc <__assert_fail@plt+0x17404>
   2a610:	mov	r0, #10
   2a614:	bl	1258c <putchar@plt>
   2a618:	b	2a280 <__assert_fail@plt+0x17aa8>
   2a61c:	mov	r0, #10
   2a620:	bl	1258c <putchar@plt>
   2a624:	mov	r2, #5
   2a628:	movw	r1, #30508	; 0x772c
   2a62c:	mov	r0, #0
   2a630:	movt	r1, #5
   2a634:	bl	12298 <dcgettext@plt>
   2a638:	mov	r1, r0
   2a63c:	mov	r0, #1
   2a640:	bl	125bc <__printf_chk@plt>
   2a644:	ldr	ip, [sp, #72]	; 0x48
   2a648:	cmp	ip, #0
   2a64c:	movwne	r1, #30216	; 0x7608
   2a650:	movweq	r1, #30228	; 0x7614
   2a654:	movne	r2, #5
   2a658:	moveq	r2, #5
   2a65c:	movne	r0, #0
   2a660:	ldreq	r0, [sp, #72]	; 0x48
   2a664:	movtne	r1, #5
   2a668:	movteq	r1, #5
   2a66c:	bl	12298 <dcgettext@plt>
   2a670:	movw	r1, #30236	; 0x761c
   2a674:	movt	r1, #5
   2a678:	mov	r2, r0
   2a67c:	mov	r0, #1
   2a680:	bl	125bc <__printf_chk@plt>
   2a684:	b	2a1f0 <__assert_fail@plt+0x17a18>
   2a688:	mov	r2, #5
   2a68c:	movw	r1, #30320	; 0x7670
   2a690:	mov	r0, r8
   2a694:	movt	r1, #5
   2a698:	bl	12298 <dcgettext@plt>
   2a69c:	mov	r1, r4
   2a6a0:	bl	49bf8 <warn@@Base>
   2a6a4:	mov	r0, r8
   2a6a8:	b	29a28 <__assert_fail@plt+0x17250>
   2a6ac:	bl	122b0 <__stack_chk_fail@plt>
   2a6b0:	mov	r1, #4
   2a6b4:	ldr	r3, [r9]
   2a6b8:	blx	r3
   2a6bc:	subs	r2, r0, #0
   2a6c0:	beq	29cc0 <__assert_fail@plt+0x174e8>
   2a6c4:	cmp	r8, #0
   2a6c8:	beq	2a6e0 <__assert_fail@plt+0x17f08>
   2a6cc:	movw	r1, #30040	; 0x7558
   2a6d0:	mov	r0, #1
   2a6d4:	movt	r1, #5
   2a6d8:	bl	125bc <__printf_chk@plt>
   2a6dc:	b	29ca0 <__assert_fail@plt+0x174c8>
   2a6e0:	ldr	r3, [r7, #1688]	; 0x698
   2a6e4:	ldr	r1, [r7, #1684]	; 0x694
   2a6e8:	cmp	r3, r1
   2a6ec:	bcs	2a704 <__assert_fail@plt+0x17f2c>
   2a6f0:	ldr	r1, [r7, #1680]	; 0x690
   2a6f4:	add	r0, r3, #1
   2a6f8:	str	r0, [r7, #1688]	; 0x698
   2a6fc:	str	r2, [r1, r3, lsl #2]
   2a700:	b	29ca0 <__assert_fail@plt+0x174c8>
   2a704:	mov	r2, #5
   2a708:	movw	r1, #30044	; 0x755c
   2a70c:	mov	r0, r8
   2a710:	movt	r1, #5
   2a714:	bl	12298 <dcgettext@plt>
   2a718:	bl	494bc <error@@Base>
   2a71c:	b	29ca0 <__assert_fail@plt+0x174c8>
   2a720:	rsb	r1, r0, r6
   2a724:	sub	r3, r1, #1
   2a728:	cmp	r3, #7
   2a72c:	bls	2a6b4 <__assert_fail@plt+0x17edc>
   2a730:	b	29cc0 <__assert_fail@plt+0x174e8>
   2a734:	ldrd	r2, [sp, #88]	; 0x58
   2a738:	orrs	ip, r2, r3
   2a73c:	bne	29c80 <__assert_fail@plt+0x174a8>
   2a740:	b	29c38 <__assert_fail@plt+0x17460>
   2a744:	movw	r9, #3472	; 0xd90
   2a748:	movt	r9, #7
   2a74c:	mov	r0, sl
   2a750:	add	sl, r7, #16
   2a754:	ldr	r3, [r9]
   2a758:	str	r2, [sp, #12]
   2a75c:	blx	r3
   2a760:	cmp	r6, sl
   2a764:	ldr	r2, [sp, #12]
   2a768:	str	r0, [sp, #52]	; 0x34
   2a76c:	bls	298c0 <__assert_fail@plt+0x170e8>
   2a770:	b	29920 <__assert_fail@plt+0x17148>
   2a774:	mov	r5, #0
   2a778:	b	299e4 <__assert_fail@plt+0x1720c>
   2a77c:	movw	r9, #3472	; 0xd90
   2a780:	mov	ip, #0
   2a784:	movt	r9, #7
   2a788:	str	ip, [sp, #52]	; 0x34
   2a78c:	b	29920 <__assert_fail@plt+0x17148>
   2a790:	push	{r3, r4, r5, lr}
   2a794:	movw	r4, #62864	; 0xf590
   2a798:	movt	r4, #6
   2a79c:	mov	r5, r0
   2a7a0:	ldr	r3, [r4, #2308]	; 0x904
   2a7a4:	cmn	r3, #1
   2a7a8:	beq	2a7b4 <__assert_fail@plt+0x17fdc>
   2a7ac:	mov	r0, r3
   2a7b0:	pop	{r3, r4, r5, pc}
   2a7b4:	mov	r0, #34	; 0x22
   2a7b8:	mov	r1, r5
   2a7bc:	mov	r3, #1
   2a7c0:	str	r3, [r4, #2308]	; 0x904
   2a7c4:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   2a7c8:	cmp	r0, #0
   2a7cc:	bne	2a810 <__assert_fail@plt+0x18038>
   2a7d0:	mov	r1, r5
   2a7d4:	mov	r0, #35	; 0x23
   2a7d8:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   2a7dc:	cmp	r0, #0
   2a7e0:	bne	2a7ec <__assert_fail@plt+0x18014>
   2a7e4:	ldr	r0, [r4, #2308]	; 0x904
   2a7e8:	pop	{r3, r4, r5, pc}
   2a7ec:	movw	r4, #62864	; 0xf590
   2a7f0:	movt	r4, #6
   2a7f4:	add	r0, r4, #2240	; 0x8c0
   2a7f8:	mov	r1, #0
   2a7fc:	bl	297c8 <__assert_fail@plt+0x16ff0>
   2a800:	cmp	r0, #0
   2a804:	bne	2a7e4 <__assert_fail@plt+0x1800c>
   2a808:	str	r0, [r4, #2308]	; 0x904
   2a80c:	pop	{r3, r4, r5, pc}
   2a810:	add	r0, r4, #2176	; 0x880
   2a814:	mov	r1, #0
   2a818:	bl	297c8 <__assert_fail@plt+0x16ff0>
   2a81c:	cmp	r0, #0
   2a820:	streq	r0, [r4, #2308]	; 0x904
   2a824:	b	2a7d0 <__assert_fail@plt+0x17ff8>
   2a828:	push	{r4, r5, r6, lr}
   2a82c:	mov	r6, r1
   2a830:	bl	2a790 <__assert_fail@plt+0x17fb8>
   2a834:	cmp	r0, #0
   2a838:	popeq	{r4, r5, r6, pc}
   2a83c:	movw	r3, #1240	; 0x4d8
   2a840:	movt	r3, #7
   2a844:	ldr	r5, [r3, #1688]	; 0x698
   2a848:	cmp	r5, #0
   2a84c:	beq	2a888 <__assert_fail@plt+0x180b0>
   2a850:	ldr	r0, [r3, #1680]	; 0x690
   2a854:	ldr	r3, [r0]
   2a858:	cmp	r3, r6
   2a85c:	beq	2a8e8 <__assert_fail@plt+0x18110>
   2a860:	mov	ip, r0
   2a864:	mov	r2, #0
   2a868:	b	2a87c <__assert_fail@plt+0x180a4>
   2a86c:	ldr	r4, [ip, #4]!
   2a870:	cmp	r4, r6
   2a874:	beq	2a890 <__assert_fail@plt+0x180b8>
   2a878:	mov	r2, r3
   2a87c:	add	r3, r2, #1
   2a880:	cmp	r3, r5
   2a884:	bne	2a86c <__assert_fail@plt+0x18094>
   2a888:	mov	r0, #0
   2a88c:	pop	{r4, r5, r6, pc}
   2a890:	cmp	r3, #0
   2a894:	beq	2a8d4 <__assert_fail@plt+0x180fc>
   2a898:	add	r2, r2, #1073741824	; 0x40000000
   2a89c:	ldr	r1, [r0, r2, lsl #2]
   2a8a0:	lsl	r2, r2, #2
   2a8a4:	cmp	r1, #0
   2a8a8:	addeq	r3, r2, #4
   2a8ac:	beq	2a8d4 <__assert_fail@plt+0x180fc>
   2a8b0:	add	r2, r2, #4
   2a8b4:	add	r2, r0, r2
   2a8b8:	b	2a8c8 <__assert_fail@plt+0x180f0>
   2a8bc:	ldr	r1, [r2, #-4]
   2a8c0:	cmp	r1, #0
   2a8c4:	beq	2a8dc <__assert_fail@plt+0x18104>
   2a8c8:	subs	r3, r3, #1
   2a8cc:	sub	r2, r2, #4
   2a8d0:	bne	2a8bc <__assert_fail@plt+0x180e4>
   2a8d4:	add	r0, r0, r3
   2a8d8:	pop	{r4, r5, r6, pc}
   2a8dc:	lsl	r3, r3, #2
   2a8e0:	add	r0, r0, r3
   2a8e4:	pop	{r4, r5, r6, pc}
   2a8e8:	mov	r3, #0
   2a8ec:	b	2a8d4 <__assert_fail@plt+0x180fc>
   2a8f0:	push	{r4, r5, r6, lr}
   2a8f4:	movw	r4, #1240	; 0x4d8
   2a8f8:	movt	r4, #7
   2a8fc:	mov	r3, #0
   2a900:	mov	r6, r0
   2a904:	sub	sp, sp, #8
   2a908:	ldr	r5, [r4, #1568]	; 0x620
   2a90c:	str	r3, [r4, #1692]	; 0x69c
   2a910:	cmn	r5, #1
   2a914:	str	r3, [r4, #1696]	; 0x6a0
   2a918:	moveq	r0, r3
   2a91c:	beq	2a92c <__assert_fail@plt+0x18154>
   2a920:	cmp	r5, r3
   2a924:	movne	r0, r5
   2a928:	beq	2a934 <__assert_fail@plt+0x1815c>
   2a92c:	add	sp, sp, #8
   2a930:	pop	{r4, r5, r6, pc}
   2a934:	bl	2a790 <__assert_fail@plt+0x17fb8>
   2a938:	mov	r0, #3
   2a93c:	mov	r1, r6
   2a940:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   2a944:	cmp	r0, #0
   2a948:	beq	2a974 <__assert_fail@plt+0x1819c>
   2a94c:	str	r5, [sp]
   2a950:	mov	r2, r5
   2a954:	ldr	r0, [pc, #104]	; 2a9c4 <__assert_fail@plt+0x181ec>
   2a958:	mov	r1, r6
   2a95c:	mov	r3, #1
   2a960:	bl	241a4 <__assert_fail@plt+0x119cc>
   2a964:	cmp	r0, #0
   2a968:	beq	2a974 <__assert_fail@plt+0x1819c>
   2a96c:	ldr	r0, [r4, #1568]	; 0x620
   2a970:	b	2a92c <__assert_fail@plt+0x18154>
   2a974:	mov	r0, #23
   2a978:	mov	r1, r6
   2a97c:	bl	1a8c8 <__assert_fail@plt+0x80f0>
   2a980:	cmp	r0, #0
   2a984:	bne	2a99c <__assert_fail@plt+0x181c4>
   2a988:	mvn	r3, #0
   2a98c:	mov	r0, #0
   2a990:	str	r3, [r4, #1568]	; 0x620
   2a994:	add	sp, sp, #8
   2a998:	pop	{r4, r5, r6, pc}
   2a99c:	mov	r3, #0
   2a9a0:	mov	r1, r6
   2a9a4:	str	r3, [sp]
   2a9a8:	mov	r2, #24
   2a9ac:	ldr	r0, [pc, #20]	; 2a9c8 <__assert_fail@plt+0x181f0>
   2a9b0:	mov	r3, #1
   2a9b4:	bl	241a4 <__assert_fail@plt+0x119cc>
   2a9b8:	cmp	r0, #0
   2a9bc:	beq	2a988 <__assert_fail@plt+0x181b0>
   2a9c0:	b	2a96c <__assert_fail@plt+0x18194>
   2a9c4:	andeq	pc, r6, r0, asr r6	; <UNPREDICTABLE>
   2a9c8:	andeq	pc, r6, r0, asr fp	; <UNPREDICTABLE>
   2a9cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a9d0:	sub	sp, sp, #28
   2a9d4:	ldrd	r2, [r0, #24]
   2a9d8:	str	r0, [sp, #12]
   2a9dc:	orrs	r0, r2, r3
   2a9e0:	beq	2aaf8 <__assert_fail@plt+0x18320>
   2a9e4:	mov	r0, r1
   2a9e8:	bl	2a8f0 <__assert_fail@plt+0x18118>
   2a9ec:	subs	r4, r0, #0
   2a9f0:	beq	2aad0 <__assert_fail@plt+0x182f8>
   2a9f4:	mov	r2, #5
   2a9f8:	movw	r1, #15452	; 0x3c5c
   2a9fc:	mov	r0, #0
   2aa00:	movt	r1, #5
   2aa04:	bl	12298 <dcgettext@plt>
   2aa08:	ldr	r6, [sp, #12]
   2aa0c:	movw	fp, #1240	; 0x4d8
   2aa10:	movt	fp, #7
   2aa14:	ldr	r2, [r6, #8]
   2aa18:	mov	r1, r0
   2aa1c:	mov	r0, #1
   2aa20:	bl	125bc <__printf_chk@plt>
   2aa24:	ldr	r0, [fp, #1568]	; 0x620
   2aa28:	mov	r1, #4
   2aa2c:	add	r0, r0, #1
   2aa30:	bl	127b4 <xcalloc@plt>
   2aa34:	ldr	r6, [fp, #1568]	; 0x620
   2aa38:	cmp	r6, #0
   2aa3c:	str	r0, [sp, #20]
   2aa40:	beq	2acbc <__assert_fail@plt+0x184e4>
   2aa44:	mov	r9, #0
   2aa48:	mvn	r6, #0
   2aa4c:	mov	r7, #0
   2aa50:	str	r9, [sp, #16]
   2aa54:	mov	r8, r9
   2aa58:	mov	r5, r9
   2aa5c:	ldr	r4, [sp, #12]
   2aa60:	b	2aa84 <__assert_fail@plt+0x182ac>
   2aa64:	ldr	ip, [sp, #20]
   2aa68:	str	sl, [ip, r5, lsl #2]
   2aa6c:	add	r5, r5, #1
   2aa70:	ldr	r2, [fp, #1568]	; 0x620
   2aa74:	add	r8, r8, #1
   2aa78:	add	r9, r9, #80	; 0x50
   2aa7c:	cmp	r8, r2
   2aa80:	bcs	2ab2c <__assert_fail@plt+0x18354>
   2aa84:	ldr	sl, [fp, #1580]	; 0x62c
   2aa88:	add	sl, sl, r9
   2aa8c:	ldrd	r0, [sl, #32]
   2aa90:	cmp	r1, r7
   2aa94:	cmpeq	r0, r6
   2aa98:	beq	2aa70 <__assert_fail@plt+0x18298>
   2aa9c:	ldrd	r2, [r4, #24]
   2aaa0:	cmp	r1, r3
   2aaa4:	cmpeq	r0, r2
   2aaa8:	bcc	2aa64 <__assert_fail@plt+0x1828c>
   2aaac:	mov	r2, #5
   2aab0:	movw	r1, #30636	; 0x77ac
   2aab4:	mov	r0, #0
   2aab8:	movt	r1, #5
   2aabc:	bl	12298 <dcgettext@plt>
   2aac0:	ldr	r1, [sl, #32]
   2aac4:	mov	r2, r8
   2aac8:	bl	49bf8 <warn@@Base>
   2aacc:	b	2aa70 <__assert_fail@plt+0x18298>
   2aad0:	mov	r2, #5
   2aad4:	movw	r1, #30552	; 0x7758
   2aad8:	movt	r1, #5
   2aadc:	bl	12298 <dcgettext@plt>
   2aae0:	ldr	ip, [sp, #12]
   2aae4:	ldr	r1, [ip, #8]
   2aae8:	bl	49bf8 <warn@@Base>
   2aaec:	mov	r0, r4
   2aaf0:	add	sp, sp, #28
   2aaf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aaf8:	mov	r2, #5
   2aafc:	movw	r1, #15424	; 0x3c40
   2ab00:	mov	r0, #0
   2ab04:	movt	r1, #5
   2ab08:	bl	12298 <dcgettext@plt>
   2ab0c:	ldr	r6, [sp, #12]
   2ab10:	ldr	r2, [r6, #8]
   2ab14:	mov	r1, r0
   2ab18:	mov	r0, #1
   2ab1c:	bl	125bc <__printf_chk@plt>
   2ab20:	mov	r0, #0
   2ab24:	add	sp, sp, #28
   2ab28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab2c:	mov	r0, #80	; 0x50
   2ab30:	str	r5, [sp, #16]
   2ab34:	bl	12358 <xmalloc@plt>
   2ab38:	ldr	r6, [sp, #12]
   2ab3c:	ldr	r1, [sp, #16]
   2ab40:	movw	r3, #43676	; 0xaa9c
   2ab44:	mov	r2, #4
   2ab48:	movt	r3, #1
   2ab4c:	ldrd	r4, [r6, #24]
   2ab50:	mov	ip, r0
   2ab54:	ldr	r0, [sp, #20]
   2ab58:	strd	r4, [ip, #32]
   2ab5c:	str	ip, [r0, r1, lsl #2]
   2ab60:	bl	126f4 <qsort@plt>
   2ab64:	ldr	ip, [sp, #16]
   2ab68:	cmp	ip, #0
   2ab6c:	beq	2aca0 <__assert_fail@plt+0x184c8>
   2ab70:	ldr	ip, [sp, #20]
   2ab74:	movw	r9, #3472	; 0xd90
   2ab78:	movt	r9, #7
   2ab7c:	mov	r6, #0
   2ab80:	sub	sl, ip, #4
   2ab84:	str	r6, [sp, #8]
   2ab88:	ldr	r3, [sl, #4]
   2ab8c:	mov	r2, #5
   2ab90:	ldr	r6, [sp, #8]
   2ab94:	movw	r1, #30692	; 0x77e4
   2ab98:	mov	r0, #0
   2ab9c:	movt	r1, #5
   2aba0:	add	r6, r6, #1
   2aba4:	str	r6, [sp, #8]
   2aba8:	ldr	r6, [r3]
   2abac:	bl	12298 <dcgettext@plt>
   2abb0:	ldr	r3, [sl, #4]
   2abb4:	mov	ip, #0
   2abb8:	ldrd	r2, [r3, #16]
   2abbc:	str	ip, [sp]
   2abc0:	mov	r4, r0
   2abc4:	movw	r0, #41908	; 0xa3b4
   2abc8:	movt	r0, #5
   2abcc:	bl	1acc4 <__assert_fail@plt+0x84ec>
   2abd0:	mov	r1, r4
   2abd4:	mov	r2, r0
   2abd8:	mov	r0, #1
   2abdc:	bl	125bc <__printf_chk@plt>
   2abe0:	mov	r2, #5
   2abe4:	movw	r1, #30732	; 0x780c
   2abe8:	mov	r0, #0
   2abec:	movt	r1, #5
   2abf0:	bl	12298 <dcgettext@plt>
   2abf4:	mov	r1, r0
   2abf8:	mov	r0, #1
   2abfc:	bl	125bc <__printf_chk@plt>
   2ac00:	ldr	r3, [sl, #4]!
   2ac04:	ldr	ip, [sp, #12]
   2ac08:	ldr	r1, [sl, #4]
   2ac0c:	ldr	r2, [ip, #12]
   2ac10:	ldr	r3, [r3, #32]
   2ac14:	ldr	r8, [r1, #32]
   2ac18:	add	fp, r2, r3
   2ac1c:	add	r8, r2, r8
   2ac20:	cmp	fp, r8
   2ac24:	movcc	r7, #0
   2ac28:	bcs	2ac90 <__assert_fail@plt+0x184b8>
   2ac2c:	ldr	r3, [r9]
   2ac30:	mov	r0, fp
   2ac34:	mov	r1, r6
   2ac38:	add	fp, fp, r6
   2ac3c:	blx	r3
   2ac40:	mov	r2, #5
   2ac44:	mov	r4, r0
   2ac48:	mov	r5, r1
   2ac4c:	mov	r0, #0
   2ac50:	movw	r1, #30748	; 0x781c
   2ac54:	movt	r1, #5
   2ac58:	bl	12298 <dcgettext@plt>
   2ac5c:	mov	r2, r7
   2ac60:	mov	r1, r0
   2ac64:	mov	r0, #1
   2ac68:	add	r7, r7, r0
   2ac6c:	bl	125bc <__printf_chk@plt>
   2ac70:	mov	r0, r4
   2ac74:	mov	r1, r5
   2ac78:	mov	r2, r6
   2ac7c:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2ac80:	mov	r0, #10
   2ac84:	bl	1258c <putchar@plt>
   2ac88:	cmp	r8, fp
   2ac8c:	bhi	2ac2c <__assert_fail@plt+0x18454>
   2ac90:	ldr	r6, [sp, #8]
   2ac94:	ldr	ip, [sp, #16]
   2ac98:	cmp	r6, ip
   2ac9c:	bne	2ab88 <__assert_fail@plt+0x183b0>
   2aca0:	mov	r0, #10
   2aca4:	bl	1258c <putchar@plt>
   2aca8:	ldr	r0, [sp, #20]
   2acac:	bl	121f0 <free@plt>
   2acb0:	mov	r0, #1
   2acb4:	add	sp, sp, #28
   2acb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acbc:	mov	r0, #80	; 0x50
   2acc0:	bl	12358 <xmalloc@plt>
   2acc4:	ldr	lr, [sp, #12]
   2acc8:	mov	r1, r6
   2accc:	movw	r3, #43676	; 0xaa9c
   2acd0:	mov	r2, #4
   2acd4:	movt	r3, #1
   2acd8:	ldrd	r4, [lr, #24]
   2acdc:	mov	ip, r0
   2ace0:	ldr	r0, [sp, #20]
   2ace4:	strd	r4, [ip, #32]
   2ace8:	str	ip, [r0]
   2acec:	bl	126f4 <qsort@plt>
   2acf0:	b	2aca0 <__assert_fail@plt+0x184c8>
   2acf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2acf8:	sub	sp, sp, #84	; 0x54
   2acfc:	ldr	r4, [r0, #24]
   2ad00:	ldr	ip, [r0, #12]
   2ad04:	cmp	r4, #0
   2ad08:	str	r0, [sp, #72]	; 0x48
   2ad0c:	str	ip, [sp, #56]	; 0x38
   2ad10:	beq	2b238 <__assert_fail@plt+0x18a60>
   2ad14:	mov	r0, r1
   2ad18:	bl	2a8f0 <__assert_fail@plt+0x18118>
   2ad1c:	subs	r5, r0, #0
   2ad20:	beq	2b2cc <__assert_fail@plt+0x18af4>
   2ad24:	movw	ip, #1240	; 0x4d8
   2ad28:	movt	ip, #7
   2ad2c:	str	ip, [sp, #68]	; 0x44
   2ad30:	ldr	r1, [ip, #1568]	; 0x620
   2ad34:	cmp	r1, #0
   2ad38:	beq	2b2f4 <__assert_fail@plt+0x18b1c>
   2ad3c:	ldr	ip, [sp, #68]	; 0x44
   2ad40:	add	r1, r1, r1, lsl #2
   2ad44:	ldr	r3, [ip, #1580]	; 0x62c
   2ad48:	mov	ip, #0
   2ad4c:	mov	r2, ip
   2ad50:	str	ip, [sp, #64]	; 0x40
   2ad54:	add	r1, r3, r1, lsl #4
   2ad58:	ldr	r0, [r3, #68]	; 0x44
   2ad5c:	add	r3, r3, #80	; 0x50
   2ad60:	cmp	r3, r1
   2ad64:	add	r2, r2, r0
   2ad68:	bne	2ad58 <__assert_fail@plt+0x18580>
   2ad6c:	cmp	r2, #0
   2ad70:	str	r2, [sp, #64]	; 0x40
   2ad74:	beq	2b2f4 <__assert_fail@plt+0x18b1c>
   2ad78:	ldr	ip, [sp, #64]	; 0x40
   2ad7c:	lsl	r0, ip, #3
   2ad80:	bl	12358 <xmalloc@plt>
   2ad84:	ldr	ip, [sp, #68]	; 0x44
   2ad88:	movw	r3, #1240	; 0x4d8
   2ad8c:	movt	r3, #7
   2ad90:	ldr	r5, [ip, #1568]	; 0x620
   2ad94:	cmp	r5, #0
   2ad98:	str	r0, [sp, #76]	; 0x4c
   2ad9c:	beq	2adf4 <__assert_fail@plt+0x1861c>
   2ada0:	ldr	r1, [r3, #1580]	; 0x62c
   2ada4:	add	r5, r5, r5, lsl #2
   2ada8:	ldr	r0, [sp, #76]	; 0x4c
   2adac:	add	r5, r1, r5, lsl #4
   2adb0:	ldr	lr, [r1, #68]	; 0x44
   2adb4:	cmp	lr, #0
   2adb8:	beq	2ade8 <__assert_fail@plt+0x18610>
   2adbc:	ldr	r6, [r1, #64]	; 0x40
   2adc0:	lsl	lr, lr, #3
   2adc4:	mov	r3, #0
   2adc8:	ldr	ip, [r6, r3]
   2adcc:	mov	r2, r0
   2add0:	str	ip, [r2, r3]!
   2add4:	add	r3, r3, #8
   2add8:	cmp	r3, lr
   2addc:	str	r1, [r2, #4]
   2ade0:	bne	2adc8 <__assert_fail@plt+0x185f0>
   2ade4:	add	r0, r0, r3
   2ade8:	add	r1, r1, #80	; 0x50
   2adec:	cmp	r1, r5
   2adf0:	bne	2adb0 <__assert_fail@plt+0x185d8>
   2adf4:	movw	r3, #43692	; 0xaaac
   2adf8:	ldr	r0, [sp, #76]	; 0x4c
   2adfc:	movt	r3, #1
   2ae00:	ldr	r1, [sp, #64]	; 0x40
   2ae04:	mov	r2, #8
   2ae08:	bl	126f4 <qsort@plt>
   2ae0c:	ldr	ip, [sp, #68]	; 0x44
   2ae10:	ldr	r3, [ip, #1700]	; 0x6a4
   2ae14:	cmp	r3, #0
   2ae18:	bne	2b290 <__assert_fail@plt+0x18ab8>
   2ae1c:	mov	r2, #5
   2ae20:	movw	r1, #15452	; 0x3c5c
   2ae24:	mov	r0, #0
   2ae28:	movt	r1, #5
   2ae2c:	bl	12298 <dcgettext@plt>
   2ae30:	ldr	ip, [sp, #72]	; 0x48
   2ae34:	ldr	r2, [ip, #8]
   2ae38:	ldr	ip, [sp, #56]	; 0x38
   2ae3c:	add	r8, ip, r4
   2ae40:	mov	r1, r0
   2ae44:	mov	r0, #1
   2ae48:	bl	125bc <__printf_chk@plt>
   2ae4c:	mov	r2, #5
   2ae50:	movw	r1, #31120	; 0x7990
   2ae54:	mov	r0, #0
   2ae58:	movt	r1, #5
   2ae5c:	movw	ip, #976	; 0x3d0
   2ae60:	str	ip, [sp, #32]
   2ae64:	bl	12298 <dcgettext@plt>
   2ae68:	mov	r1, r0
   2ae6c:	mov	r0, #1
   2ae70:	bl	125bc <__printf_chk@plt>
   2ae74:	ldr	ip, [sp, #32]
   2ae78:	ldr	r5, [sp, #56]	; 0x38
   2ae7c:	movt	ip, #7
   2ae80:	str	ip, [sp, #32]
   2ae84:	ldr	ip, [sp, #76]	; 0x4c
   2ae88:	mov	r6, r5
   2ae8c:	str	ip, [sp, #40]	; 0x28
   2ae90:	movw	ip, #3472	; 0xd90
   2ae94:	movt	ip, #7
   2ae98:	str	ip, [sp, #60]	; 0x3c
   2ae9c:	mov	ip, #0
   2aea0:	str	ip, [sp, #44]	; 0x2c
   2aea4:	ldr	ip, [sp, #40]	; 0x28
   2aea8:	ldr	r3, [ip, #4]
   2aeac:	ldr	ip, [ip]
   2aeb0:	ldr	r9, [r3]
   2aeb4:	ldr	r4, [r3, #24]
   2aeb8:	sub	r3, r9, #2
   2aebc:	str	ip, [sp, #24]
   2aec0:	cmp	r3, #6
   2aec4:	bhi	2b0dc <__assert_fail@plt+0x18904>
   2aec8:	ldr	r0, [sp, #24]
   2aecc:	ldr	ip, [sp, #56]	; 0x38
   2aed0:	ldr	r1, [sp, #56]	; 0x38
   2aed4:	add	ip, ip, r0
   2aed8:	str	ip, [sp, #28]
   2aedc:	cmp	r1, ip
   2aee0:	cmpls	ip, r8
   2aee4:	movcc	r0, #0
   2aee8:	movcs	r0, #1
   2aeec:	bcs	2b1e8 <__assert_fail@plt+0x18a10>
   2aef0:	ldr	ip, [sp, #68]	; 0x44
   2aef4:	ldr	r3, [ip, #1700]	; 0x6a4
   2aef8:	cmp	r3, #0
   2aefc:	beq	2af64 <__assert_fail@plt+0x1878c>
   2af00:	ldr	ip, [sp, #44]	; 0x2c
   2af04:	cmp	ip, #0
   2af08:	beq	2af64 <__assert_fail@plt+0x1878c>
   2af0c:	ldr	ip, [sp, #28]
   2af10:	cmp	ip, r6
   2af14:	movwhi	r1, #30944	; 0x78e0
   2af18:	movhi	r2, #5
   2af1c:	movthi	r1, #5
   2af20:	bhi	2af44 <__assert_fail@plt+0x1876c>
   2af24:	bcs	2af64 <__assert_fail@plt+0x1878c>
   2af28:	ldr	ip, [sp, #28]
   2af2c:	cmp	ip, r5
   2af30:	streq	r5, [sp, #28]
   2af34:	beq	2b100 <__assert_fail@plt+0x18928>
   2af38:	movw	r1, #30992	; 0x7910
   2af3c:	movt	r1, #5
   2af40:	mov	r2, #5
   2af44:	bl	12298 <dcgettext@plt>
   2af48:	ldr	ip, [sp, #56]	; 0x38
   2af4c:	ldr	r3, [sp, #28]
   2af50:	rsb	r1, ip, r6
   2af54:	rsb	r2, ip, r3
   2af58:	ldr	ip, [sp, #72]	; 0x48
   2af5c:	ldr	r3, [ip, #8]
   2af60:	bl	49bf8 <warn@@Base>
   2af64:	ldr	ip, [sp, #28]
   2af68:	cmp	r8, ip
   2af6c:	bls	2b320 <__assert_fail@plt+0x18b48>
   2af70:	lsl	r2, r9, #3
   2af74:	mvn	r0, #0
   2af78:	add	r3, r2, r0
   2af7c:	sub	r1, r2, #33	; 0x21
   2af80:	lsl	r0, r0, r3
   2af84:	mvn	r2, #1
   2af88:	orr	r1, r0, r2, lsl r1
   2af8c:	str	r1, [sp, #52]	; 0x34
   2af90:	ldr	r0, [sp, #52]	; 0x34
   2af94:	rsb	r1, r3, #32
   2af98:	lsl	ip, r9, #1
   2af9c:	str	ip, [sp, #20]
   2afa0:	orr	r1, r0, r2, lsr r1
   2afa4:	lsl	r2, r2, r3
   2afa8:	str	r1, [sp, #52]	; 0x34
   2afac:	str	r2, [sp, #48]	; 0x30
   2afb0:	ldr	ip, [sp, #28]
   2afb4:	ldrd	r0, [sp, #48]	; 0x30
   2afb8:	add	sl, ip, r9
   2afbc:	str	r4, [sp, #36]	; 0x24
   2afc0:	mov	fp, ip
   2afc4:	mvn	r0, r0
   2afc8:	mvn	r1, r1
   2afcc:	strd	r0, [sp, #8]
   2afd0:	b	2b0c8 <__assert_fail@plt+0x188f0>
   2afd4:	cmp	r8, fp
   2afd8:	bls	2b1e0 <__assert_fail@plt+0x18a08>
   2afdc:	rsb	r1, fp, r8
   2afe0:	sub	r3, r1, #1
   2afe4:	cmp	r3, #7
   2afe8:	movhi	r6, #0
   2afec:	movhi	r7, #0
   2aff0:	bhi	2b00c <__assert_fail@plt+0x18834>
   2aff4:	ldr	ip, [sp, #60]	; 0x3c
   2aff8:	mov	r0, fp
   2affc:	ldr	r3, [ip]
   2b000:	blx	r3
   2b004:	mov	r6, r0
   2b008:	mov	r7, r1
   2b00c:	cmp	r8, sl
   2b010:	bls	2b1e0 <__assert_fail@plt+0x18a08>
   2b014:	ldr	r3, [sp, #20]
   2b018:	add	fp, fp, r3
   2b01c:	cmp	r8, fp
   2b020:	bhi	2b1a4 <__assert_fail@plt+0x189cc>
   2b024:	subs	r1, r8, sl
   2b028:	moveq	r4, #0
   2b02c:	moveq	r5, #0
   2b030:	bne	2b1a8 <__assert_fail@plt+0x189d0>
   2b034:	ldr	r2, [sp, #24]
   2b038:	movw	r1, #31044	; 0x7944
   2b03c:	mov	r0, #1
   2b040:	movt	r1, #5
   2b044:	bl	125bc <__printf_chk@plt>
   2b048:	orr	r2, r4, r6
   2b04c:	orr	r3, r5, r7
   2b050:	orrs	ip, r2, r3
   2b054:	beq	2b210 <__assert_fail@plt+0x18a38>
   2b058:	ldrd	r2, [sp, #8]
   2b05c:	ldrd	r0, [sp, #8]
   2b060:	and	r2, r2, r6
   2b064:	and	r3, r3, r7
   2b068:	cmp	r1, r3
   2b06c:	cmpeq	r0, r2
   2b070:	bne	2b130 <__assert_fail@plt+0x18958>
   2b074:	and	r2, r0, r4
   2b078:	and	r3, r1, r5
   2b07c:	cmp	r1, r3
   2b080:	cmpeq	r0, r2
   2b084:	beq	2b130 <__assert_fail@plt+0x18958>
   2b088:	mov	r0, r6
   2b08c:	mov	r1, r7
   2b090:	mov	r2, r9
   2b094:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2b098:	mov	r0, r4
   2b09c:	mov	r1, r5
   2b0a0:	mov	r2, r9
   2b0a4:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2b0a8:	movw	r0, #31072	; 0x7960
   2b0ac:	movt	r0, #5
   2b0b0:	str	r4, [sp, #36]	; 0x24
   2b0b4:	bl	12418 <puts@plt>
   2b0b8:	ldr	r3, [sp, #20]
   2b0bc:	cmp	r8, fp
   2b0c0:	add	sl, sl, r3
   2b0c4:	bls	2b19c <__assert_fail@plt+0x189c4>
   2b0c8:	cmp	r8, sl
   2b0cc:	mov	r4, sl
   2b0d0:	bls	2afd4 <__assert_fail@plt+0x187fc>
   2b0d4:	mov	r1, r9
   2b0d8:	b	2afe0 <__assert_fail@plt+0x18808>
   2b0dc:	mov	r2, #5
   2b0e0:	movw	r1, #30840	; 0x7878
   2b0e4:	mov	r0, #0
   2b0e8:	movt	r1, #5
   2b0ec:	bl	12298 <dcgettext@plt>
   2b0f0:	mov	r1, r9
   2b0f4:	ldr	r2, [sp, #24]
   2b0f8:	str	r5, [sp, #28]
   2b0fc:	bl	49bf8 <warn@@Base>
   2b100:	ldr	ip, [sp, #44]	; 0x2c
   2b104:	ldr	r0, [sp, #64]	; 0x40
   2b108:	add	ip, ip, #1
   2b10c:	str	ip, [sp, #44]	; 0x2c
   2b110:	ldr	ip, [sp, #40]	; 0x28
   2b114:	add	ip, ip, #8
   2b118:	str	ip, [sp, #40]	; 0x28
   2b11c:	ldr	ip, [sp, #44]	; 0x2c
   2b120:	cmp	ip, r0
   2b124:	beq	2b26c <__assert_fail@plt+0x18a94>
   2b128:	ldr	r5, [sp, #28]
   2b12c:	b	2aea4 <__assert_fail@plt+0x186cc>
   2b130:	ldr	r0, [sp, #36]	; 0x24
   2b134:	mov	r1, #0
   2b138:	mov	r2, r9
   2b13c:	strd	r0, [sp]
   2b140:	adds	r0, r0, r6
   2b144:	adc	r1, r1, r7
   2b148:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2b14c:	ldrd	r0, [sp]
   2b150:	mov	r2, r9
   2b154:	adds	r0, r0, r4
   2b158:	adc	r1, r1, r5
   2b15c:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2b160:	cmp	r7, r5
   2b164:	cmpeq	r6, r4
   2b168:	movweq	r1, #31088	; 0x7970
   2b16c:	moveq	r0, #0
   2b170:	movteq	r1, #5
   2b174:	beq	2b1c8 <__assert_fail@plt+0x189f0>
   2b178:	bhi	2b1bc <__assert_fail@plt+0x189e4>
   2b17c:	ldr	ip, [sp, #32]
   2b180:	mov	r0, #10
   2b184:	ldr	r1, [ip]
   2b188:	bl	12334 <_IO_putc@plt>
   2b18c:	ldr	r3, [sp, #20]
   2b190:	cmp	r8, fp
   2b194:	add	sl, sl, r3
   2b198:	bhi	2b0c8 <__assert_fail@plt+0x188f0>
   2b19c:	mov	r6, fp
   2b1a0:	b	2b100 <__assert_fail@plt+0x18928>
   2b1a4:	mov	r1, r9
   2b1a8:	mov	r0, sl
   2b1ac:	bl	4a0f0 <warn@@Base+0x4f8>
   2b1b0:	mov	r4, r0
   2b1b4:	mov	r5, r1
   2b1b8:	b	2b034 <__assert_fail@plt+0x1885c>
   2b1bc:	movw	r1, #31104	; 0x7980
   2b1c0:	movt	r1, #5
   2b1c4:	mov	r0, #0
   2b1c8:	mov	r2, #5
   2b1cc:	bl	12298 <dcgettext@plt>
   2b1d0:	ldr	ip, [sp, #32]
   2b1d4:	ldr	r1, [ip]
   2b1d8:	bl	12778 <fputs@plt>
   2b1dc:	b	2b17c <__assert_fail@plt+0x189a4>
   2b1e0:	mov	r6, r4
   2b1e4:	b	2b100 <__assert_fail@plt+0x18928>
   2b1e8:	mov	r2, #5
   2b1ec:	movw	r1, #30900	; 0x78b4
   2b1f0:	mov	r0, #0
   2b1f4:	movt	r1, #5
   2b1f8:	bl	12298 <dcgettext@plt>
   2b1fc:	ldr	r1, [sp, #24]
   2b200:	ldr	r2, [sp, #44]	; 0x2c
   2b204:	str	r5, [sp, #28]
   2b208:	bl	49bf8 <warn@@Base>
   2b20c:	b	2b100 <__assert_fail@plt+0x18928>
   2b210:	mov	r2, #5
   2b214:	movw	r1, #31056	; 0x7950
   2b218:	mov	r0, #0
   2b21c:	movt	r1, #5
   2b220:	bl	12298 <dcgettext@plt>
   2b224:	mov	r6, fp
   2b228:	mov	r1, r0
   2b22c:	mov	r0, #1
   2b230:	bl	125bc <__printf_chk@plt>
   2b234:	b	2b100 <__assert_fail@plt+0x18928>
   2b238:	mov	r0, r4
   2b23c:	mov	r2, #5
   2b240:	movw	r1, #15424	; 0x3c40
   2b244:	movt	r1, #5
   2b248:	bl	12298 <dcgettext@plt>
   2b24c:	ldr	ip, [sp, #72]	; 0x48
   2b250:	ldr	r2, [ip, #8]
   2b254:	mov	r1, r0
   2b258:	mov	r0, #1
   2b25c:	bl	125bc <__printf_chk@plt>
   2b260:	mov	r0, r4
   2b264:	add	sp, sp, #84	; 0x54
   2b268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b26c:	ldr	ip, [sp, #32]
   2b270:	mov	r0, #10
   2b274:	ldr	r1, [ip]
   2b278:	bl	12334 <_IO_putc@plt>
   2b27c:	ldr	r0, [sp, #76]	; 0x4c
   2b280:	bl	121f0 <free@plt>
   2b284:	mov	r0, #1
   2b288:	add	sp, sp, #84	; 0x54
   2b28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b290:	ldr	ip, [sp, #76]	; 0x4c
   2b294:	ldr	r3, [ip]
   2b298:	cmp	r3, #0
   2b29c:	beq	2ae1c <__assert_fail@plt+0x18644>
   2b2a0:	mov	r2, #5
   2b2a4:	movw	r1, #30796	; 0x784c
   2b2a8:	mov	r0, #0
   2b2ac:	movt	r1, #5
   2b2b0:	bl	12298 <dcgettext@plt>
   2b2b4:	ldr	ip, [sp, #72]	; 0x48
   2b2b8:	ldr	r1, [ip, #8]
   2b2bc:	ldr	ip, [sp, #76]	; 0x4c
   2b2c0:	ldr	r2, [ip]
   2b2c4:	bl	49bf8 <warn@@Base>
   2b2c8:	b	2ae1c <__assert_fail@plt+0x18644>
   2b2cc:	mov	r2, #5
   2b2d0:	movw	r1, #30552	; 0x7758
   2b2d4:	movt	r1, #5
   2b2d8:	bl	12298 <dcgettext@plt>
   2b2dc:	ldr	ip, [sp, #72]	; 0x48
   2b2e0:	ldr	r1, [ip, #8]
   2b2e4:	bl	49bf8 <warn@@Base>
   2b2e8:	mov	r0, r5
   2b2ec:	add	sp, sp, #84	; 0x54
   2b2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2f4:	mov	r2, #5
   2b2f8:	movw	r1, #30756	; 0x7824
   2b2fc:	mov	r0, #0
   2b300:	movt	r1, #5
   2b304:	bl	12298 <dcgettext@plt>
   2b308:	mov	r1, r0
   2b30c:	mov	r0, #1
   2b310:	bl	125bc <__printf_chk@plt>
   2b314:	mov	r0, #1
   2b318:	add	sp, sp, #84	; 0x54
   2b31c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b320:	ldr	r6, [sp, #28]
   2b324:	b	2b100 <__assert_fail@plt+0x18928>
   2b328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b32c:	sub	sp, sp, #180	; 0xb4
   2b330:	movw	r5, #65176	; 0xfe98
   2b334:	movt	r5, #6
   2b338:	str	r0, [sp, #56]	; 0x38
   2b33c:	mov	r4, r1
   2b340:	ldr	ip, [sp, #56]	; 0x38
   2b344:	mov	r1, #46	; 0x2e
   2b348:	ldr	r3, [r5]
   2b34c:	ldr	r0, [r0, #8]
   2b350:	ldr	ip, [ip, #12]
   2b354:	str	r3, [sp, #172]	; 0xac
   2b358:	str	r5, [sp, #164]	; 0xa4
   2b35c:	str	ip, [sp, #140]	; 0x8c
   2b360:	bl	1267c <strrchr@plt>
   2b364:	subs	r3, r0, #0
   2b368:	streq	r3, [sp, #152]	; 0x98
   2b36c:	beq	2b388 <__assert_fail@plt+0x18bb0>
   2b370:	movw	r1, #33792	; 0x8400
   2b374:	movt	r1, #5
   2b378:	bl	12178 <strcmp@plt>
   2b37c:	rsbs	r0, r0, #1
   2b380:	movcc	r0, #0
   2b384:	str	r0, [sp, #152]	; 0x98
   2b388:	ldr	r5, [sp, #56]	; 0x38
   2b38c:	ldr	r5, [r5, #24]
   2b390:	cmp	r5, #0
   2b394:	str	r5, [sp, #144]	; 0x90
   2b398:	beq	2c150 <__assert_fail@plt+0x19978>
   2b39c:	mov	r0, r4
   2b3a0:	bl	2a8f0 <__assert_fail@plt+0x18118>
   2b3a4:	subs	r4, r0, #0
   2b3a8:	beq	2c1a4 <__assert_fail@plt+0x199cc>
   2b3ac:	movw	r5, #1240	; 0x4d8
   2b3b0:	movt	r5, #7
   2b3b4:	str	r5, [sp, #116]	; 0x74
   2b3b8:	ldr	r9, [r5, #1568]	; 0x620
   2b3bc:	cmp	r9, #0
   2b3c0:	beq	2c250 <__assert_fail@plt+0x19a78>
   2b3c4:	ldr	ip, [sp, #116]	; 0x74
   2b3c8:	mov	r2, #0
   2b3cc:	mov	r5, #1
   2b3d0:	mvn	sl, #0
   2b3d4:	mov	fp, #0
   2b3d8:	mov	r7, r2
   2b3dc:	ldr	ip, [ip, #1580]	; 0x62c
   2b3e0:	mov	r6, r2
   2b3e4:	mov	r8, r5
   2b3e8:	str	r2, [sp, #136]	; 0x88
   2b3ec:	str	r5, [sp, #128]	; 0x80
   2b3f0:	str	ip, [sp, #40]	; 0x28
   2b3f4:	mov	ip, r2
   2b3f8:	ldr	lr, [sp, #40]	; 0x28
   2b3fc:	str	r9, [sp, #24]
   2b400:	ldr	r5, [lr, #56]	; 0x38
   2b404:	cmp	r5, #0
   2b408:	moveq	r3, #0
   2b40c:	andne	r3, r8, #1
   2b410:	cmp	r6, r5
   2b414:	movcc	r6, r5
   2b418:	cmp	r3, #0
   2b41c:	beq	2b498 <__assert_fail@plt+0x18cc0>
   2b420:	cmp	r2, #0
   2b424:	streq	r7, [sp, #136]	; 0x88
   2b428:	ldreq	r3, [lr, #48]	; 0x30
   2b42c:	moveq	r4, #1
   2b430:	movne	r4, #0
   2b434:	ldreq	ip, [r3]
   2b438:	cmp	r5, r4
   2b43c:	bls	2b494 <__assert_fail@plt+0x18cbc>
   2b440:	ldr	r2, [lr, #48]	; 0x30
   2b444:	lsl	r3, r4, #3
   2b448:	mov	r0, ip
   2b44c:	mov	r1, #0
   2b450:	add	r9, r2, r3
   2b454:	add	r2, r2, r3
   2b458:	ldrd	r2, [r2]
   2b45c:	cmp	r1, r3
   2b460:	cmpeq	r0, r2
   2b464:	bls	2b484 <__assert_fail@plt+0x18cac>
   2b468:	b	2c104 <__assert_fail@plt+0x1992c>
   2b46c:	and	r0, r2, sl
   2b470:	and	r1, r3, fp
   2b474:	ldrd	r2, [r9, #8]!
   2b478:	cmp	r1, r3
   2b47c:	cmpeq	r0, r2
   2b480:	bhi	2c104 <__assert_fail@plt+0x1992c>
   2b484:	add	r4, r4, #1
   2b488:	mov	ip, r2
   2b48c:	cmp	r5, r4
   2b490:	bhi	2b46c <__assert_fail@plt+0x18c94>
   2b494:	mov	r2, #1
   2b498:	ldr	r0, [sp, #24]
   2b49c:	add	r7, r7, #1
   2b4a0:	add	lr, lr, #80	; 0x50
   2b4a4:	cmp	r7, r0
   2b4a8:	bne	2b400 <__assert_fail@plt+0x18c28>
   2b4ac:	ldr	ip, [sp, #136]	; 0x88
   2b4b0:	cmp	r2, #0
   2b4b4:	str	r8, [sp, #128]	; 0x80
   2b4b8:	add	r5, ip, ip, lsl #2
   2b4bc:	lsl	r5, r5, #4
   2b4c0:	beq	2c264 <__assert_fail@plt+0x19a8c>
   2b4c4:	ldr	r0, [sp, #40]	; 0x28
   2b4c8:	add	r5, r0, r5
   2b4cc:	ldr	r3, [r5, #56]	; 0x38
   2b4d0:	cmp	r3, #0
   2b4d4:	beq	2b4e8 <__assert_fail@plt+0x18d10>
   2b4d8:	ldr	r3, [r5, #48]	; 0x30
   2b4dc:	ldrd	r2, [r3]
   2b4e0:	orrs	r1, r2, r3
   2b4e4:	bne	2c1c8 <__assert_fail@plt+0x199f0>
   2b4e8:	ldr	r5, [sp, #128]	; 0x80
   2b4ec:	cmp	r5, #0
   2b4f0:	movne	ip, #0
   2b4f4:	strne	ip, [sp, #160]	; 0xa0
   2b4f8:	beq	2c23c <__assert_fail@plt+0x19a64>
   2b4fc:	mov	r2, #5
   2b500:	movw	r1, #15452	; 0x3c5c
   2b504:	mov	r0, #0
   2b508:	movt	r1, #5
   2b50c:	bl	12298 <dcgettext@plt>
   2b510:	ldr	r5, [sp, #56]	; 0x38
   2b514:	ldr	r2, [r5, #8]
   2b518:	mov	r1, r0
   2b51c:	mov	r0, #1
   2b520:	bl	125bc <__printf_chk@plt>
   2b524:	ldr	r0, [sp, #56]	; 0x38
   2b528:	mov	r2, #0
   2b52c:	mov	r3, #0
   2b530:	bl	1a6c4 <__assert_fail@plt+0x7eec>
   2b534:	cmp	r0, #0
   2b538:	bne	2c218 <__assert_fail@plt+0x19a40>
   2b53c:	mov	r2, #5
   2b540:	movw	r1, #31320	; 0x7a58
   2b544:	mov	r0, #0
   2b548:	movt	r1, #5
   2b54c:	bl	12298 <dcgettext@plt>
   2b550:	mov	r1, r0
   2b554:	mov	r0, #1
   2b558:	bl	125bc <__printf_chk@plt>
   2b55c:	ldr	ip, [sp, #116]	; 0x74
   2b560:	ldr	r5, [sp, #136]	; 0x88
   2b564:	ldr	r3, [ip, #1568]	; 0x620
   2b568:	cmp	r5, r3
   2b56c:	bcs	2c2c0 <__assert_fail@plt+0x19ae8>
   2b570:	ldr	fp, [sp, #140]	; 0x8c
   2b574:	add	r3, r5, r5, lsl #2
   2b578:	movw	ip, #976	; 0x3d0
   2b57c:	movw	r5, #1240	; 0x4d8
   2b580:	movt	ip, #7
   2b584:	movt	r5, #7
   2b588:	str	ip, [sp, #148]	; 0x94
   2b58c:	lsl	r3, r3, #4
   2b590:	str	r5, [sp, #156]	; 0x9c
   2b594:	movw	ip, #3472	; 0xd90
   2b598:	mov	r5, #0
   2b59c:	movt	ip, #7
   2b5a0:	str	r3, [sp, #112]	; 0x70
   2b5a4:	str	ip, [sp, #92]	; 0x5c
   2b5a8:	str	r5, [sp, #132]	; 0x84
   2b5ac:	ldr	ip, [sp, #128]	; 0x80
   2b5b0:	cmp	ip, #0
   2b5b4:	bne	2b614 <__assert_fail@plt+0x18e3c>
   2b5b8:	ldr	r5, [sp, #116]	; 0x74
   2b5bc:	ldr	ip, [sp, #112]	; 0x70
   2b5c0:	ldr	r0, [r5, #1580]	; 0x62c
   2b5c4:	add	r0, r0, ip
   2b5c8:	ldr	r1, [r0, #56]	; 0x38
   2b5cc:	cmp	r1, #0
   2b5d0:	beq	2b5f4 <__assert_fail@plt+0x18e1c>
   2b5d4:	ldr	r5, [sp, #160]	; 0xa0
   2b5d8:	ldr	r3, [sp, #128]	; 0x80
   2b5dc:	sub	r2, r5, #4
   2b5e0:	str	r3, [r2, #4]!
   2b5e4:	add	r3, r3, #1
   2b5e8:	ldr	r1, [r0, #56]	; 0x38
   2b5ec:	cmp	r1, r3
   2b5f0:	bhi	2b5e0 <__assert_fail@plt+0x18e08>
   2b5f4:	ldr	lr, [r0, #48]	; 0x30
   2b5f8:	movw	r3, #43600	; 0xaa50
   2b5fc:	ldr	ip, [sp, #116]	; 0x74
   2b600:	movt	r3, #1
   2b604:	ldr	r0, [sp, #160]	; 0xa0
   2b608:	mov	r2, #4
   2b60c:	str	lr, [ip]
   2b610:	bl	126f4 <qsort@plt>
   2b614:	ldr	r5, [sp, #116]	; 0x74
   2b618:	ldr	ip, [sp, #112]	; 0x70
   2b61c:	ldr	r4, [r5, #1580]	; 0x62c
   2b620:	add	r4, r4, ip
   2b624:	ldr	r3, [r4, #56]	; 0x38
   2b628:	cmp	r3, #0
   2b62c:	beq	2bf84 <__assert_fail@plt+0x197ac>
   2b630:	ldr	r5, [sp, #160]	; 0xa0
   2b634:	mov	ip, #0
   2b638:	mov	sl, fp
   2b63c:	str	ip, [sp, #60]	; 0x3c
   2b640:	str	r5, [sp, #88]	; 0x58
   2b644:	b	2b7c0 <__assert_fail@plt+0x18fe8>
   2b648:	ldr	r3, [r4, #48]	; 0x30
   2b64c:	ldr	r3, [r3, lr, lsl #3]
   2b650:	str	r3, [sp, #52]	; 0x34
   2b654:	ldr	r3, [r4, #52]	; 0x34
   2b658:	ldr	r5, [sp, #132]	; 0x84
   2b65c:	ldr	ip, [sp, #140]	; 0x8c
   2b660:	ldr	r3, [r3, lr, lsl #2]
   2b664:	cmp	r5, #0
   2b668:	ldr	r5, [sp, #52]	; 0x34
   2b66c:	ldr	r4, [r4, #24]
   2b670:	add	fp, ip, r5
   2b674:	str	r3, [sp, #72]	; 0x48
   2b678:	moveq	ip, #1
   2b67c:	streq	ip, [sp, #132]	; 0x84
   2b680:	beq	2b690 <__assert_fail@plt+0x18eb8>
   2b684:	cmp	fp, sl
   2b688:	bhi	2bf28 <__assert_fail@plt+0x19750>
   2b68c:	bcc	2bffc <__assert_fail@plt+0x19824>
   2b690:	ldr	r5, [sp, #144]	; 0x90
   2b694:	ldr	ip, [sp, #52]	; 0x34
   2b698:	cmp	r5, ip
   2b69c:	movwls	r1, #31496	; 0x7b08
   2b6a0:	movls	r0, #0
   2b6a4:	movtls	r1, #5
   2b6a8:	bls	2b834 <__assert_fail@plt+0x1905c>
   2b6ac:	ldr	r5, [sp, #152]	; 0x98
   2b6b0:	cmp	r5, #0
   2b6b4:	beq	2b84c <__assert_fail@plt+0x19074>
   2b6b8:	ldr	ip, [sp, #116]	; 0x74
   2b6bc:	ldr	r5, [sp, #56]	; 0x38
   2b6c0:	ldr	r3, [ip, #1568]	; 0x620
   2b6c4:	ldr	ip, [sp, #136]	; 0x88
   2b6c8:	ldr	r1, [r5, #24]
   2b6cc:	cmp	r3, ip
   2b6d0:	ldr	r6, [r5, #12]
   2b6d4:	movwls	r1, #31552	; 0x7b40
   2b6d8:	movls	r0, #0
   2b6dc:	movtls	r1, #5
   2b6e0:	bls	2bf10 <__assert_fail@plt+0x19738>
   2b6e4:	ldr	r5, [sp, #156]	; 0x9c
   2b6e8:	ldr	ip, [sp, #112]	; 0x70
   2b6ec:	ldr	r2, [r5, #1580]	; 0x62c
   2b6f0:	add	r3, r2, ip
   2b6f4:	ldr	r7, [r2, ip]
   2b6f8:	ldr	r0, [r3, #16]
   2b6fc:	sub	r2, r7, #2
   2b700:	ldr	r5, [r3, #4]
   2b704:	cmp	r2, #6
   2b708:	ldr	r9, [r3, #8]
   2b70c:	bhi	2c048 <__assert_fail@plt+0x19870>
   2b710:	add	r6, r6, r1
   2b714:	mov	r8, fp
   2b718:	mov	r4, fp
   2b71c:	mov	r2, r0
   2b720:	mov	r3, #0
   2b724:	strd	r2, [sp, #32]
   2b728:	ldr	ip, [sp, #52]	; 0x34
   2b72c:	rsb	r2, r8, r4
   2b730:	movw	r1, #31044	; 0x7944
   2b734:	mov	r0, #1
   2b738:	add	r2, r2, ip
   2b73c:	movt	r1, #5
   2b740:	bl	125bc <__printf_chk@plt>
   2b744:	cmp	r6, r4
   2b748:	bls	2b824 <__assert_fail@plt+0x1904c>
   2b74c:	add	sl, r4, #1
   2b750:	cmp	r6, sl
   2b754:	bhi	2bca4 <__assert_fail@plt+0x194cc>
   2b758:	rsb	r1, r4, r6
   2b75c:	sub	r3, r1, #1
   2b760:	cmp	r3, #7
   2b764:	bls	2bca8 <__assert_fail@plt+0x194d0>
   2b768:	movw	r1, #31056	; 0x7950
   2b76c:	mov	r0, #0
   2b770:	movt	r1, #5
   2b774:	mov	r2, #5
   2b778:	bl	12298 <dcgettext@plt>
   2b77c:	mov	r1, r0
   2b780:	mov	r0, #1
   2b784:	bl	125bc <__printf_chk@plt>
   2b788:	ldr	r5, [sp, #116]	; 0x74
   2b78c:	ldr	ip, [sp, #60]	; 0x3c
   2b790:	ldr	r4, [r5, #1580]	; 0x62c
   2b794:	add	ip, ip, #1
   2b798:	str	ip, [sp, #60]	; 0x3c
   2b79c:	ldr	ip, [sp, #112]	; 0x70
   2b7a0:	ldr	r5, [sp, #88]	; 0x58
   2b7a4:	add	r4, r4, ip
   2b7a8:	add	r5, r5, #4
   2b7ac:	str	r5, [sp, #88]	; 0x58
   2b7b0:	ldr	r3, [r4, #56]	; 0x38
   2b7b4:	ldr	r5, [sp, #60]	; 0x3c
   2b7b8:	cmp	r3, r5
   2b7bc:	bls	2bf80 <__assert_fail@plt+0x197a8>
   2b7c0:	ldr	r5, [sp, #128]	; 0x80
   2b7c4:	cmp	r5, #0
   2b7c8:	ldr	r5, [sp, #60]	; 0x3c
   2b7cc:	ldreq	ip, [sp, #88]	; 0x58
   2b7d0:	ldrne	lr, [sp, #60]	; 0x3c
   2b7d4:	ldreq	lr, [ip]
   2b7d8:	cmp	r5, #0
   2b7dc:	beq	2b648 <__assert_fail@plt+0x18e70>
   2b7e0:	ldr	ip, [sp, #128]	; 0x80
   2b7e4:	lsl	r2, lr, #3
   2b7e8:	ldr	r3, [r4, #48]	; 0x30
   2b7ec:	cmp	ip, #0
   2b7f0:	add	r2, r3, r2
   2b7f4:	ldreq	ip, [sp, #88]	; 0x58
   2b7f8:	ldrne	r5, [sp, #60]	; 0x3c
   2b7fc:	ldreq	r1, [ip, #-4]
   2b800:	subne	r1, r5, #-536870911	; 0xe0000001
   2b804:	lsl	r1, r1, #3
   2b808:	ldrd	r0, [r1, r3]
   2b80c:	ldrd	r2, [r2]
   2b810:	cmp	r1, r3
   2b814:	cmpeq	r0, r2
   2b818:	beq	2b788 <__assert_fail@plt+0x18fb0>
   2b81c:	str	r2, [sp, #52]	; 0x34
   2b820:	b	2b654 <__assert_fail@plt+0x18e7c>
   2b824:	mov	fp, r4
   2b828:	movw	r1, #31660	; 0x7bac
   2b82c:	movt	r1, #5
   2b830:	mov	r0, #0
   2b834:	mov	r2, #5
   2b838:	mov	sl, fp
   2b83c:	bl	12298 <dcgettext@plt>
   2b840:	ldr	r1, [sp, #52]	; 0x34
   2b844:	bl	49bf8 <warn@@Base>
   2b848:	b	2b788 <__assert_fail@plt+0x18fb0>
   2b84c:	ldr	r5, [sp, #116]	; 0x74
   2b850:	ldr	r3, [r5, #1568]	; 0x620
   2b854:	ldr	r5, [sp, #56]	; 0x38
   2b858:	ldr	ip, [r5, #12]
   2b85c:	ldr	r5, [sp, #136]	; 0x88
   2b860:	cmp	r3, r5
   2b864:	ldr	r5, [sp, #56]	; 0x38
   2b868:	ldr	r1, [r5, #24]
   2b86c:	bls	2bf04 <__assert_fail@plt+0x1972c>
   2b870:	ldr	r5, [sp, #156]	; 0x9c
   2b874:	ldr	r2, [r5, #1580]	; 0x62c
   2b878:	ldr	r5, [sp, #112]	; 0x70
   2b87c:	add	r3, r2, r5
   2b880:	ldr	r7, [r2, r5]
   2b884:	ldr	r0, [r3, #16]
   2b888:	ldr	r5, [r3, #4]
   2b88c:	sub	r2, r7, #2
   2b890:	ldr	r3, [r3, #8]
   2b894:	cmp	r2, #6
   2b898:	str	r5, [sp, #96]	; 0x60
   2b89c:	str	r3, [sp, #100]	; 0x64
   2b8a0:	bhi	2c0cc <__assert_fail@plt+0x198f4>
   2b8a4:	lsl	lr, r7, #3
   2b8a8:	mvn	r2, #0
   2b8ac:	add	r3, lr, r2
   2b8b0:	sub	lr, lr, #33	; 0x21
   2b8b4:	lsl	r2, r2, r3
   2b8b8:	str	r2, [sp, #124]	; 0x7c
   2b8bc:	ldr	r5, [sp, #124]	; 0x7c
   2b8c0:	mvn	r2, #1
   2b8c4:	ldr	r8, [sp, #148]	; 0x94
   2b8c8:	add	r6, ip, r1
   2b8cc:	orr	lr, r5, r2, lsl lr
   2b8d0:	str	lr, [sp, #124]	; 0x7c
   2b8d4:	ldr	r5, [sp, #124]	; 0x7c
   2b8d8:	rsb	lr, r3, #32
   2b8dc:	str	r4, [sp, #84]	; 0x54
   2b8e0:	orr	lr, r5, r2, lsr lr
   2b8e4:	lsl	r2, r2, r3
   2b8e8:	str	lr, [sp, #124]	; 0x7c
   2b8ec:	lsl	r5, r7, #1
   2b8f0:	str	r2, [sp, #120]	; 0x78
   2b8f4:	ldrd	r2, [sp, #120]	; 0x78
   2b8f8:	str	fp, [sp, #76]	; 0x4c
   2b8fc:	str	r5, [sp, #80]	; 0x50
   2b900:	mvn	r2, r2
   2b904:	mvn	r3, r3
   2b908:	strd	r2, [sp, #40]	; 0x28
   2b90c:	mov	r2, r0
   2b910:	mov	r3, #0
   2b914:	strd	r2, [sp, #104]	; 0x68
   2b918:	ldr	r5, [sp, #80]	; 0x50
   2b91c:	ldr	ip, [sp, #76]	; 0x4c
   2b920:	add	r3, fp, r5
   2b924:	ldr	r5, [sp, #52]	; 0x34
   2b928:	cmp	r6, r3
   2b92c:	rsb	r4, ip, fp
   2b930:	add	r4, r4, r5
   2b934:	bcc	2b828 <__assert_fail@plt+0x19050>
   2b938:	movw	r1, #31044	; 0x7944
   2b93c:	mov	r0, #1
   2b940:	movt	r1, #5
   2b944:	mov	r2, r4
   2b948:	add	r5, fp, r7
   2b94c:	bl	125bc <__printf_chk@plt>
   2b950:	cmp	r6, r5
   2b954:	bhi	2b9d4 <__assert_fail@plt+0x191fc>
   2b958:	cmp	r6, fp
   2b95c:	rsbhi	r1, fp, r6
   2b960:	bhi	2b9d8 <__assert_fail@plt+0x19200>
   2b964:	add	r9, r5, r7
   2b968:	cmp	r9, r6
   2b96c:	bcc	2c2d4 <__assert_fail@plt+0x19afc>
   2b970:	mov	fp, r9
   2b974:	mov	r2, #0
   2b978:	mov	r3, #0
   2b97c:	strd	r2, [sp, #24]
   2b980:	strd	r2, [sp, #32]
   2b984:	mov	r3, #0
   2b988:	ldr	r0, [sp, #56]	; 0x38
   2b98c:	mov	r2, r4
   2b990:	bl	1a6c4 <__assert_fail@plt+0x7eec>
   2b994:	subs	r3, r0, #0
   2b998:	bne	2ba24 <__assert_fail@plt+0x1924c>
   2b99c:	add	r2, r4, r7
   2b9a0:	ldr	r0, [sp, #56]	; 0x38
   2b9a4:	bl	1a6c4 <__assert_fail@plt+0x7eec>
   2b9a8:	cmp	r0, #0
   2b9ac:	bne	2ba24 <__assert_fail@plt+0x1924c>
   2b9b0:	mov	r2, #5
   2b9b4:	movw	r1, #31056	; 0x7950
   2b9b8:	movt	r1, #5
   2b9bc:	mov	sl, r9
   2b9c0:	bl	12298 <dcgettext@plt>
   2b9c4:	mov	r1, r0
   2b9c8:	mov	r0, #1
   2b9cc:	bl	125bc <__printf_chk@plt>
   2b9d0:	b	2b788 <__assert_fail@plt+0x18fb0>
   2b9d4:	mov	r1, r7
   2b9d8:	sub	r3, r1, #1
   2b9dc:	cmp	r3, #7
   2b9e0:	bls	2bbb8 <__assert_fail@plt+0x193e0>
   2b9e4:	mov	r0, #0
   2b9e8:	mov	r1, #0
   2b9ec:	strd	r0, [sp, #24]
   2b9f0:	add	r9, r5, r7
   2b9f4:	cmp	r6, r9
   2b9f8:	bhi	2bb4c <__assert_fail@plt+0x19374>
   2b9fc:	cmp	r6, r5
   2ba00:	rsbhi	r1, r5, r6
   2ba04:	bhi	2bb50 <__assert_fail@plt+0x19378>
   2ba08:	ldrd	r2, [sp, #24]
   2ba0c:	mov	r0, #0
   2ba10:	mov	r1, #0
   2ba14:	strd	r0, [sp, #32]
   2ba18:	orrs	r1, r2, r3
   2ba1c:	mov	fp, r9
   2ba20:	beq	2b984 <__assert_fail@plt+0x191ac>
   2ba24:	ldrd	r0, [sp, #40]	; 0x28
   2ba28:	ldrd	r2, [sp, #24]
   2ba2c:	and	r2, r2, r0
   2ba30:	and	r3, r3, r1
   2ba34:	cmp	r1, r3
   2ba38:	cmpeq	r0, r2
   2ba3c:	beq	2bbd0 <__assert_fail@plt+0x193f8>
   2ba40:	add	sl, r9, #2
   2ba44:	cmp	r6, sl
   2ba48:	bcc	2c070 <__assert_fail@plt+0x19898>
   2ba4c:	bhi	2bb88 <__assert_fail@plt+0x193b0>
   2ba50:	cmp	r9, r6
   2ba54:	bcs	2bc50 <__assert_fail@plt+0x19478>
   2ba58:	rsb	r1, r9, r6
   2ba5c:	sub	r3, r1, #1
   2ba60:	cmp	r3, #7
   2ba64:	movhi	r2, #0
   2ba68:	movhi	r3, #0
   2ba6c:	movhi	fp, sl
   2ba70:	strdhi	r2, [sp, #64]	; 0x40
   2ba74:	bls	2bb8c <__assert_fail@plt+0x193b4>
   2ba78:	ldr	r0, [sp, #84]	; 0x54
   2ba7c:	mov	r1, #0
   2ba80:	mov	r5, r1
   2ba84:	mov	r2, r7
   2ba88:	mov	r4, r0
   2ba8c:	ldrd	r0, [sp, #24]
   2ba90:	adds	r0, r0, r4
   2ba94:	adc	r1, r1, r5
   2ba98:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2ba9c:	ldrd	r0, [sp, #32]
   2baa0:	mov	r2, r7
   2baa4:	adds	r0, r0, r4
   2baa8:	adc	r1, r1, r5
   2baac:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2bab0:	ldr	r1, [r8]
   2bab4:	mov	r0, #40	; 0x28
   2bab8:	bl	12334 <_IO_putc@plt>
   2babc:	ldrd	r2, [sp, #64]	; 0x40
   2bac0:	ldrd	r0, [sp, #104]	; 0x68
   2bac4:	ldr	r5, [sp, #56]	; 0x38
   2bac8:	strd	r2, [sp]
   2bacc:	strd	r0, [sp, #8]
   2bad0:	mov	r1, r7
   2bad4:	ldr	r2, [sp, #96]	; 0x60
   2bad8:	mov	r0, sl
   2badc:	ldr	r3, [sp, #100]	; 0x64
   2bae0:	str	r5, [sp, #16]
   2bae4:	bl	1cccc <__assert_fail@plt+0xa4f4>
   2bae8:	ldr	r1, [r8]
   2baec:	mov	r4, r0
   2baf0:	mov	r0, #41	; 0x29
   2baf4:	bl	12334 <_IO_putc@plt>
   2baf8:	adds	r4, r4, #0
   2bafc:	ldr	ip, [sp, #72]	; 0x48
   2bb00:	movne	r4, #1
   2bb04:	cmp	ip, #0
   2bb08:	movne	r4, #0
   2bb0c:	cmp	r4, #0
   2bb10:	bne	2bc2c <__assert_fail@plt+0x19454>
   2bb14:	ldrd	r0, [sp, #24]
   2bb18:	ldrd	r2, [sp, #32]
   2bb1c:	cmp	r1, r3
   2bb20:	cmpeq	r0, r2
   2bb24:	beq	2bc84 <__assert_fail@plt+0x194ac>
   2bb28:	ldrd	r0, [sp, #32]
   2bb2c:	ldrd	r2, [sp, #24]
   2bb30:	cmp	r1, r3
   2bb34:	cmpeq	r0, r2
   2bb38:	bcc	2bc64 <__assert_fail@plt+0x1948c>
   2bb3c:	ldr	r1, [r8]
   2bb40:	mov	r0, #10
   2bb44:	bl	12334 <_IO_putc@plt>
   2bb48:	b	2b918 <__assert_fail@plt+0x19140>
   2bb4c:	mov	r1, r7
   2bb50:	sub	r3, r1, #1
   2bb54:	cmp	r3, #7
   2bb58:	bhi	2ba08 <__assert_fail@plt+0x19230>
   2bb5c:	mov	r0, r5
   2bb60:	ldr	r5, [sp, #92]	; 0x5c
   2bb64:	ldr	r3, [r5]
   2bb68:	blx	r3
   2bb6c:	mov	r2, r0
   2bb70:	mov	r3, r1
   2bb74:	strd	r0, [sp, #32]
   2bb78:	ldrd	r0, [sp, #24]
   2bb7c:	orr	r2, r2, r0
   2bb80:	orr	r3, r3, r1
   2bb84:	b	2ba18 <__assert_fail@plt+0x19240>
   2bb88:	mov	r1, #2
   2bb8c:	ldr	ip, [sp, #92]	; 0x5c
   2bb90:	mov	r0, r9
   2bb94:	ldr	r3, [ip]
   2bb98:	blx	r3
   2bb9c:	uxtah	fp, sl, r0
   2bba0:	cmp	r6, fp
   2bba4:	bcc	2be90 <__assert_fail@plt+0x196b8>
   2bba8:	uxth	r2, r0
   2bbac:	mov	r3, #0
   2bbb0:	strd	r2, [sp, #64]	; 0x40
   2bbb4:	b	2ba78 <__assert_fail@plt+0x192a0>
   2bbb8:	ldr	ip, [sp, #92]	; 0x5c
   2bbbc:	mov	r0, fp
   2bbc0:	ldr	r3, [ip]
   2bbc4:	blx	r3
   2bbc8:	strd	r0, [sp, #24]
   2bbcc:	b	2b9f0 <__assert_fail@plt+0x19218>
   2bbd0:	ldrd	r2, [sp, #32]
   2bbd4:	and	r2, r2, r0
   2bbd8:	and	r3, r3, r1
   2bbdc:	cmp	r1, r3
   2bbe0:	cmpeq	r0, r2
   2bbe4:	beq	2ba40 <__assert_fail@plt+0x19268>
   2bbe8:	ldrd	r0, [sp, #24]
   2bbec:	mov	r2, r7
   2bbf0:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2bbf4:	ldrd	r0, [sp, #32]
   2bbf8:	mov	r2, r7
   2bbfc:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2bc00:	ldr	r5, [sp, #32]
   2bc04:	mov	r2, #5
   2bc08:	movw	r1, #31860	; 0x7c74
   2bc0c:	mov	r0, #0
   2bc10:	movt	r1, #5
   2bc14:	str	r5, [sp, #84]	; 0x54
   2bc18:	bl	12298 <dcgettext@plt>
   2bc1c:	mov	r1, r0
   2bc20:	mov	r0, #1
   2bc24:	bl	125bc <__printf_chk@plt>
   2bc28:	b	2b918 <__assert_fail@plt+0x19140>
   2bc2c:	mov	r2, #5
   2bc30:	movw	r1, #24696	; 0x6078
   2bc34:	mov	r0, #0
   2bc38:	movt	r1, #5
   2bc3c:	bl	12298 <dcgettext@plt>
   2bc40:	mov	r1, r0
   2bc44:	mov	r0, #1
   2bc48:	bl	125bc <__printf_chk@plt>
   2bc4c:	b	2bb14 <__assert_fail@plt+0x1933c>
   2bc50:	mov	r0, #0
   2bc54:	mov	r1, #0
   2bc58:	mov	fp, sl
   2bc5c:	strd	r0, [sp, #64]	; 0x40
   2bc60:	b	2ba78 <__assert_fail@plt+0x192a0>
   2bc64:	mov	r2, #5
   2bc68:	movw	r1, #31892	; 0x7c94
   2bc6c:	mov	r0, #0
   2bc70:	movt	r1, #5
   2bc74:	bl	12298 <dcgettext@plt>
   2bc78:	ldr	r1, [r8]
   2bc7c:	bl	12778 <fputs@plt>
   2bc80:	b	2bb3c <__assert_fail@plt+0x19364>
   2bc84:	mov	r2, #5
   2bc88:	movw	r1, #31876	; 0x7c84
   2bc8c:	mov	r0, #0
   2bc90:	movt	r1, #5
   2bc94:	bl	12298 <dcgettext@plt>
   2bc98:	ldr	r1, [r8]
   2bc9c:	bl	12778 <fputs@plt>
   2bca0:	b	2bb3c <__assert_fail@plt+0x19364>
   2bca4:	mov	r1, #1
   2bca8:	ldr	ip, [sp, #92]	; 0x5c
   2bcac:	mov	r0, r4
   2bcb0:	ldr	r3, [ip]
   2bcb4:	blx	r3
   2bcb8:	cmp	r0, #4
   2bcbc:	ldrls	pc, [pc, r0, lsl #2]
   2bcc0:	b	2c024 <__assert_fail@plt+0x1984c>
   2bcc4:	andeq	fp, r2, r8, ror #14
   2bcc8:			; <UNDEFINED> instruction: 0x0002beb0
   2bccc:	andeq	fp, r2, r4, asr #28
   2bcd0:	andeq	fp, r2, r4, lsr sp
   2bcd4:	ldrdeq	fp, [r2], -r8
   2bcd8:	add	fp, r4, #5
   2bcdc:	cmp	r6, fp
   2bce0:	bls	2c0d8 <__assert_fail@plt+0x19900>
   2bce4:	ldr	ip, [sp, #92]	; 0x5c
   2bce8:	mov	r0, sl
   2bcec:	mov	r1, #4
   2bcf0:	add	sl, r4, #9
   2bcf4:	ldr	r3, [ip]
   2bcf8:	blx	r3
   2bcfc:	movw	r1, #31752	; 0x7c08
   2bd00:	movt	r1, #5
   2bd04:	mov	r2, r0
   2bd08:	mov	r0, #1
   2bd0c:	bl	125bc <__printf_chk@plt>
   2bd10:	cmp	r6, sl
   2bd14:	bls	2bd68 <__assert_fail@plt+0x19590>
   2bd18:	mov	r1, #4
   2bd1c:	ldr	ip, [sp, #92]	; 0x5c
   2bd20:	mov	r0, fp
   2bd24:	ldr	r3, [ip]
   2bd28:	blx	r3
   2bd2c:	mov	r2, r0
   2bd30:	b	2bd7c <__assert_fail@plt+0x195a4>
   2bd34:	mov	r0, sl
   2bd38:	mov	r2, #0
   2bd3c:	mov	r3, r6
   2bd40:	add	r1, sp, #168	; 0xa8
   2bd44:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2bd48:	ldr	fp, [sp, #168]	; 0xa8
   2bd4c:	bl	1c53c <__assert_fail@plt+0x9d64>
   2bd50:	add	fp, sl, fp
   2bd54:	add	sl, fp, #4
   2bd58:	cmp	r6, sl
   2bd5c:	bhi	2bd18 <__assert_fail@plt+0x19540>
   2bd60:	cmp	r6, fp
   2bd64:	bls	2bd78 <__assert_fail@plt+0x195a0>
   2bd68:	rsb	r1, fp, r6
   2bd6c:	sub	r3, r1, #1
   2bd70:	cmp	r3, #7
   2bd74:	bls	2bd1c <__assert_fail@plt+0x19544>
   2bd78:	mov	r2, #0
   2bd7c:	movw	r1, #31752	; 0x7c08
   2bd80:	mov	r0, #1
   2bd84:	movt	r1, #5
   2bd88:	add	fp, sl, #2
   2bd8c:	bl	125bc <__printf_chk@plt>
   2bd90:	cmp	r6, fp
   2bd94:	bcc	2be90 <__assert_fail@plt+0x196b8>
   2bd98:	bhi	2bf50 <__assert_fail@plt+0x19778>
   2bd9c:	cmp	r6, sl
   2bda0:	bls	2c0b8 <__assert_fail@plt+0x198e0>
   2bda4:	rsb	r1, sl, r6
   2bda8:	sub	r2, r1, #1
   2bdac:	cmp	r2, #7
   2bdb0:	movhi	r2, #0
   2bdb4:	movhi	r3, #0
   2bdb8:	movhi	r4, fp
   2bdbc:	strdhi	r2, [sp, #24]
   2bdc0:	bls	2bf54 <__assert_fail@plt+0x1977c>
   2bdc4:	ldr	ip, [sp, #148]	; 0x94
   2bdc8:	mov	r0, #40	; 0x28
   2bdcc:	ldr	r1, [ip]
   2bdd0:	bl	12334 <_IO_putc@plt>
   2bdd4:	ldrd	r2, [sp, #24]
   2bdd8:	ldrd	r0, [sp, #32]
   2bddc:	ldr	ip, [sp, #56]	; 0x38
   2bde0:	strd	r2, [sp]
   2bde4:	mov	r2, r5
   2bde8:	strd	r0, [sp, #8]
   2bdec:	mov	r3, r9
   2bdf0:	str	ip, [sp, #16]
   2bdf4:	mov	r1, r7
   2bdf8:	mov	r0, fp
   2bdfc:	bl	1cccc <__assert_fail@plt+0xa4f4>
   2be00:	ldr	ip, [sp, #148]	; 0x94
   2be04:	ldr	r1, [ip]
   2be08:	mov	sl, r0
   2be0c:	mov	r0, #41	; 0x29
   2be10:	bl	12334 <_IO_putc@plt>
   2be14:	adds	sl, sl, #0
   2be18:	ldr	ip, [sp, #72]	; 0x48
   2be1c:	movne	sl, #1
   2be20:	cmp	ip, #0
   2be24:	movne	sl, #0
   2be28:	cmp	sl, #0
   2be2c:	bne	2c094 <__assert_fail@plt+0x198bc>
   2be30:	ldr	ip, [sp, #148]	; 0x94
   2be34:	mov	r0, #10
   2be38:	ldr	r1, [ip]
   2be3c:	bl	12334 <_IO_putc@plt>
   2be40:	b	2b728 <__assert_fail@plt+0x18f50>
   2be44:	mov	r2, #0
   2be48:	mov	r0, sl
   2be4c:	mov	r3, r6
   2be50:	add	r1, sp, #168	; 0xa8
   2be54:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2be58:	ldr	r3, [sp, #168]	; 0xa8
   2be5c:	add	sl, sl, r3
   2be60:	bl	1c53c <__assert_fail@plt+0x9d64>
   2be64:	mov	r2, #0
   2be68:	mov	r3, r6
   2be6c:	mov	r0, sl
   2be70:	add	r1, sp, #168	; 0xa8
   2be74:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2be78:	ldr	r3, [sp, #168]	; 0xa8
   2be7c:	add	sl, sl, r3
   2be80:	bl	1c53c <__assert_fail@plt+0x9d64>
   2be84:	add	fp, sl, #2
   2be88:	cmp	r6, fp
   2be8c:	bcs	2bd98 <__assert_fail@plt+0x195c0>
   2be90:	mov	r2, #5
   2be94:	movw	r1, #31660	; 0x7bac
   2be98:	mov	r0, #0
   2be9c:	movt	r1, #5
   2bea0:	bl	12298 <dcgettext@plt>
   2bea4:	ldr	r1, [sp, #52]	; 0x34
   2bea8:	bl	49bf8 <warn@@Base>
   2beac:	b	2b788 <__assert_fail@plt+0x18fb0>
   2beb0:	mov	r3, r6
   2beb4:	mov	r2, #0
   2beb8:	mov	r0, sl
   2bebc:	add	r1, sp, #168	; 0xa8
   2bec0:	bl	1c634 <__assert_fail@plt+0x9e5c>
   2bec4:	ldr	ip, [sp, #168]	; 0xa8
   2bec8:	add	r4, sl, ip
   2becc:	bl	1c53c <__assert_fail@plt+0x9d64>
   2bed0:	movw	r1, #10132	; 0x2794
   2bed4:	mov	r0, #1
   2bed8:	movt	r1, #5
   2bedc:	bl	125bc <__printf_chk@plt>
   2bee0:	mov	r2, #5
   2bee4:	movw	r1, #31720	; 0x7be8
   2bee8:	mov	r0, #0
   2beec:	movt	r1, #5
   2bef0:	bl	12298 <dcgettext@plt>
   2bef4:	mov	r1, r0
   2bef8:	mov	r0, #1
   2befc:	bl	125bc <__printf_chk@plt>
   2bf00:	b	2b728 <__assert_fail@plt+0x18f50>
   2bf04:	ldr	r0, [sp, #152]	; 0x98
   2bf08:	movw	r1, #31800	; 0x7c38
   2bf0c:	movt	r1, #5
   2bf10:	mov	r2, #5
   2bf14:	mov	sl, fp
   2bf18:	bl	12298 <dcgettext@plt>
   2bf1c:	ldr	r1, [sp, #136]	; 0x88
   2bf20:	bl	49bf8 <warn@@Base>
   2bf24:	b	2b788 <__assert_fail@plt+0x18fb0>
   2bf28:	mov	r2, #5
   2bf2c:	movw	r1, #31380	; 0x7a94
   2bf30:	mov	r0, #0
   2bf34:	movt	r1, #5
   2bf38:	bl	12298 <dcgettext@plt>
   2bf3c:	ldr	ip, [sp, #140]	; 0x8c
   2bf40:	ldr	r2, [sp, #52]	; 0x34
   2bf44:	rsb	r1, ip, sl
   2bf48:	bl	49bf8 <warn@@Base>
   2bf4c:	b	2b690 <__assert_fail@plt+0x18eb8>
   2bf50:	mov	r1, #2
   2bf54:	ldr	ip, [sp, #92]	; 0x5c
   2bf58:	mov	r0, sl
   2bf5c:	ldr	r2, [ip]
   2bf60:	blx	r2
   2bf64:	uxtah	r4, fp, r0
   2bf68:	cmp	r6, r4
   2bf6c:	bcc	2c180 <__assert_fail@plt+0x199a8>
   2bf70:	uxth	r2, r0
   2bf74:	mov	r3, #0
   2bf78:	strd	r2, [sp, #24]
   2bf7c:	b	2bdc4 <__assert_fail@plt+0x195ec>
   2bf80:	mov	fp, sl
   2bf84:	ldr	ip, [sp, #116]	; 0x74
   2bf88:	ldr	r5, [sp, #136]	; 0x88
   2bf8c:	ldr	r3, [ip, #1568]	; 0x620
   2bf90:	add	r5, r5, #1
   2bf94:	ldr	ip, [sp, #112]	; 0x70
   2bf98:	cmp	r3, r5
   2bf9c:	str	r5, [sp, #136]	; 0x88
   2bfa0:	add	ip, ip, #80	; 0x50
   2bfa4:	str	ip, [sp, #112]	; 0x70
   2bfa8:	bhi	2b5ac <__assert_fail@plt+0x18dd4>
   2bfac:	ldr	ip, [sp, #56]	; 0x38
   2bfb0:	ldr	r2, [ip, #12]
   2bfb4:	ldr	r3, [ip, #24]
   2bfb8:	add	r3, r2, r3
   2bfbc:	cmp	fp, r3
   2bfc0:	bcc	2c28c <__assert_fail@plt+0x19ab4>
   2bfc4:	ldr	ip, [sp, #148]	; 0x94
   2bfc8:	mov	r0, #10
   2bfcc:	ldr	r1, [ip]
   2bfd0:	bl	12334 <_IO_putc@plt>
   2bfd4:	ldr	r0, [sp, #160]	; 0xa0
   2bfd8:	bl	121f0 <free@plt>
   2bfdc:	mov	r0, #1
   2bfe0:	ldr	r5, [sp, #164]	; 0xa4
   2bfe4:	ldr	r2, [sp, #172]	; 0xac
   2bfe8:	ldr	r3, [r5]
   2bfec:	cmp	r2, r3
   2bff0:	bne	2c2e8 <__assert_fail@plt+0x19b10>
   2bff4:	add	sp, sp, #180	; 0xb4
   2bff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bffc:	mov	r2, #5
   2c000:	movw	r1, #31436	; 0x7acc
   2c004:	mov	r0, #0
   2c008:	movt	r1, #5
   2c00c:	bl	12298 <dcgettext@plt>
   2c010:	ldr	r5, [sp, #140]	; 0x8c
   2c014:	ldr	r2, [sp, #52]	; 0x34
   2c018:	rsb	r1, r5, sl
   2c01c:	bl	49bf8 <warn@@Base>
   2c020:	b	2b690 <__assert_fail@plt+0x18eb8>
   2c024:	mov	r4, r0
   2c028:	mov	r2, #5
   2c02c:	movw	r1, #31760	; 0x7c10
   2c030:	mov	r0, #0
   2c034:	movt	r1, #5
   2c038:	bl	12298 <dcgettext@plt>
   2c03c:	mov	r1, r4
   2c040:	bl	49bf8 <warn@@Base>
   2c044:	b	2b788 <__assert_fail@plt+0x18fb0>
   2c048:	movw	r1, #31604	; 0x7b74
   2c04c:	mov	r0, #0
   2c050:	movt	r1, #5
   2c054:	mov	r2, #5
   2c058:	bl	12298 <dcgettext@plt>
   2c05c:	mov	r1, r7
   2c060:	ldr	r2, [sp, #136]	; 0x88
   2c064:	mov	sl, fp
   2c068:	bl	49bf8 <warn@@Base>
   2c06c:	b	2b788 <__assert_fail@plt+0x18fb0>
   2c070:	mov	r2, #5
   2c074:	movw	r1, #31660	; 0x7bac
   2c078:	mov	r0, #0
   2c07c:	movt	r1, #5
   2c080:	bl	12298 <dcgettext@plt>
   2c084:	ldr	r1, [sp, #52]	; 0x34
   2c088:	mov	sl, r9
   2c08c:	bl	49bf8 <warn@@Base>
   2c090:	b	2b788 <__assert_fail@plt+0x18fb0>
   2c094:	mov	r2, #5
   2c098:	movw	r1, #24696	; 0x6078
   2c09c:	mov	r0, #0
   2c0a0:	movt	r1, #5
   2c0a4:	bl	12298 <dcgettext@plt>
   2c0a8:	mov	r1, r0
   2c0ac:	mov	r0, #1
   2c0b0:	bl	125bc <__printf_chk@plt>
   2c0b4:	b	2be30 <__assert_fail@plt+0x19658>
   2c0b8:	mov	r2, #0
   2c0bc:	mov	r3, #0
   2c0c0:	mov	r4, fp
   2c0c4:	strd	r2, [sp, #24]
   2c0c8:	b	2bdc4 <__assert_fail@plt+0x195ec>
   2c0cc:	movw	r1, #31604	; 0x7b74
   2c0d0:	ldr	r0, [sp, #152]	; 0x98
   2c0d4:	b	2c050 <__assert_fail@plt+0x19878>
   2c0d8:	cmp	r6, sl
   2c0dc:	bhi	2c10c <__assert_fail@plt+0x19934>
   2c0e0:	add	sl, r4, #9
   2c0e4:	movw	r1, #31752	; 0x7c08
   2c0e8:	mov	r0, #1
   2c0ec:	movt	r1, #5
   2c0f0:	mov	r2, #0
   2c0f4:	bl	125bc <__printf_chk@plt>
   2c0f8:	cmp	sl, r6
   2c0fc:	bcs	2bd78 <__assert_fail@plt+0x195a0>
   2c100:	b	2bd18 <__assert_fail@plt+0x19540>
   2c104:	mov	r8, #0
   2c108:	b	2b494 <__assert_fail@plt+0x18cbc>
   2c10c:	rsb	r1, sl, r6
   2c110:	sub	r3, r1, #1
   2c114:	cmp	r3, #7
   2c118:	bhi	2c0e0 <__assert_fail@plt+0x19908>
   2c11c:	ldr	ip, [sp, #92]	; 0x5c
   2c120:	mov	r0, sl
   2c124:	add	sl, r4, #9
   2c128:	ldr	r3, [ip]
   2c12c:	blx	r3
   2c130:	movw	r1, #31752	; 0x7c08
   2c134:	movt	r1, #5
   2c138:	mov	r2, r0
   2c13c:	mov	r0, #1
   2c140:	bl	125bc <__printf_chk@plt>
   2c144:	cmp	r6, sl
   2c148:	bls	2bd78 <__assert_fail@plt+0x195a0>
   2c14c:	b	2bd18 <__assert_fail@plt+0x19540>
   2c150:	mov	r2, #5
   2c154:	movw	r1, #15424	; 0x3c40
   2c158:	mov	r0, r5
   2c15c:	movt	r1, #5
   2c160:	bl	12298 <dcgettext@plt>
   2c164:	ldr	ip, [sp, #56]	; 0x38
   2c168:	ldr	r2, [ip, #8]
   2c16c:	mov	r1, r0
   2c170:	mov	r0, #1
   2c174:	bl	125bc <__printf_chk@plt>
   2c178:	ldr	r0, [sp, #144]	; 0x90
   2c17c:	b	2bfe0 <__assert_fail@plt+0x19808>
   2c180:	mov	r2, #5
   2c184:	movw	r1, #31660	; 0x7bac
   2c188:	mov	r0, #0
   2c18c:	movt	r1, #5
   2c190:	bl	12298 <dcgettext@plt>
   2c194:	ldr	r1, [sp, #52]	; 0x34
   2c198:	mov	sl, fp
   2c19c:	bl	49bf8 <warn@@Base>
   2c1a0:	b	2b788 <__assert_fail@plt+0x18fb0>
   2c1a4:	mov	r2, #5
   2c1a8:	movw	r1, #30552	; 0x7758
   2c1ac:	movt	r1, #5
   2c1b0:	bl	12298 <dcgettext@plt>
   2c1b4:	ldr	r5, [sp, #56]	; 0x38
   2c1b8:	ldr	r1, [r5, #8]
   2c1bc:	bl	49bf8 <warn@@Base>
   2c1c0:	mov	r0, r4
   2c1c4:	b	2bfe0 <__assert_fail@plt+0x19808>
   2c1c8:	mov	r2, #5
   2c1cc:	movw	r1, #31192	; 0x79d8
   2c1d0:	mov	r0, #0
   2c1d4:	movt	r1, #5
   2c1d8:	bl	12298 <dcgettext@plt>
   2c1dc:	ldr	r3, [r5, #48]	; 0x30
   2c1e0:	ldr	ip, [sp, #56]	; 0x38
   2c1e4:	mov	r1, #0
   2c1e8:	ldrd	r2, [r3]
   2c1ec:	ldr	r5, [ip, #8]
   2c1f0:	str	r1, [sp]
   2c1f4:	mov	r4, r0
   2c1f8:	movw	r0, #41908	; 0xa3b4
   2c1fc:	movt	r0, #5
   2c200:	bl	1acc4 <__assert_fail@plt+0x84ec>
   2c204:	mov	r1, r5
   2c208:	mov	r2, r0
   2c20c:	mov	r0, r4
   2c210:	bl	49bf8 <warn@@Base>
   2c214:	b	2b4e8 <__assert_fail@plt+0x18d10>
   2c218:	mov	r2, #5
   2c21c:	movw	r1, #31236	; 0x7a04
   2c220:	mov	r0, #0
   2c224:	movt	r1, #5
   2c228:	bl	12298 <dcgettext@plt>
   2c22c:	mov	r1, r0
   2c230:	mov	r0, #1
   2c234:	bl	125bc <__printf_chk@plt>
   2c238:	b	2b53c <__assert_fail@plt+0x18d64>
   2c23c:	mov	r0, r6
   2c240:	mov	r1, #4
   2c244:	bl	21a60 <__assert_fail@plt+0xf288>
   2c248:	str	r0, [sp, #160]	; 0xa0
   2c24c:	b	2b4fc <__assert_fail@plt+0x18d24>
   2c250:	mov	r5, r9
   2c254:	mov	r6, r9
   2c258:	mov	ip, #1
   2c25c:	str	r9, [sp, #136]	; 0x88
   2c260:	str	ip, [sp, #128]	; 0x80
   2c264:	mov	r2, #5
   2c268:	movw	r1, #31148	; 0x79ac
   2c26c:	mov	r0, #0
   2c270:	movt	r1, #5
   2c274:	bl	12298 <dcgettext@plt>
   2c278:	bl	494bc <error@@Base>
   2c27c:	ldr	lr, [sp, #116]	; 0x74
   2c280:	ldr	lr, [lr, #1580]	; 0x62c
   2c284:	str	lr, [sp, #40]	; 0x28
   2c288:	b	2b4c4 <__assert_fail@plt+0x18cec>
   2c28c:	mov	r2, #5
   2c290:	movw	r1, #31908	; 0x7ca4
   2c294:	mov	r0, #0
   2c298:	movt	r1, #5
   2c29c:	bl	12298 <dcgettext@plt>
   2c2a0:	ldr	r5, [sp, #56]	; 0x38
   2c2a4:	ldr	r1, [r5, #12]
   2c2a8:	ldr	r3, [r5, #24]
   2c2ac:	ldr	r2, [r5, #8]
   2c2b0:	add	r1, r1, r3
   2c2b4:	rsb	r1, fp, r1
   2c2b8:	bl	49bf8 <warn@@Base>
   2c2bc:	b	2bfc4 <__assert_fail@plt+0x197ec>
   2c2c0:	movw	r5, #976	; 0x3d0
   2c2c4:	ldr	fp, [sp, #140]	; 0x8c
   2c2c8:	movt	r5, #7
   2c2cc:	str	r5, [sp, #148]	; 0x94
   2c2d0:	b	2bfac <__assert_fail@plt+0x197d4>
   2c2d4:	mov	r2, #0
   2c2d8:	mov	r3, #0
   2c2dc:	mov	r1, r7
   2c2e0:	strd	r2, [sp, #24]
   2c2e4:	b	2bb50 <__assert_fail@plt+0x19378>
   2c2e8:	bl	122b0 <__stack_chk_fail@plt>
   2c2ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2f0:	sub	sp, sp, #68	; 0x44
   2c2f4:	str	r0, [sp, #60]	; 0x3c
   2c2f8:	mov	r0, r1
   2c2fc:	ldr	r6, [sp, #60]	; 0x3c
   2c300:	ldr	r7, [sp, #60]	; 0x3c
   2c304:	str	r2, [sp, #44]	; 0x2c
   2c308:	ldr	r6, [r6, #12]
   2c30c:	ldr	r3, [r7, #24]
   2c310:	str	r6, [sp, #40]	; 0x28
   2c314:	add	r8, r6, r3
   2c318:	bl	2a8f0 <__assert_fail@plt+0x18118>
   2c31c:	mov	r2, #5
   2c320:	movw	r1, #15452	; 0x3c5c
   2c324:	mov	r0, #0
   2c328:	movt	r1, #5
   2c32c:	bl	12298 <dcgettext@plt>
   2c330:	ldr	r2, [r7, #8]
   2c334:	mov	r1, r0
   2c338:	mov	r0, #1
   2c33c:	bl	125bc <__printf_chk@plt>
   2c340:	cmp	r6, r8
   2c344:	bcs	2c6b4 <__assert_fail@plt+0x19edc>
   2c348:	movw	sl, #3472	; 0xd90
   2c34c:	movt	sl, #7
   2c350:	movw	r6, #1240	; 0x4d8
   2c354:	movt	r6, #7
   2c358:	str	r6, [sp, #48]	; 0x30
   2c35c:	ldr	r7, [sp, #40]	; 0x28
   2c360:	add	r6, r7, #4
   2c364:	cmp	r8, r6
   2c368:	bhi	2c3cc <__assert_fail@plt+0x19bf4>
   2c36c:	cmp	r7, r8
   2c370:	bcs	2c384 <__assert_fail@plt+0x19bac>
   2c374:	rsb	r1, r7, r8
   2c378:	sub	r3, r1, #1
   2c37c:	cmp	r3, #7
   2c380:	bls	2c3d0 <__assert_fail@plt+0x19bf8>
   2c384:	mov	r4, r6
   2c388:	mov	r1, #4
   2c38c:	add	fp, r6, #2
   2c390:	cmp	r8, fp
   2c394:	bhi	2c948 <__assert_fail@plt+0x1a170>
   2c398:	add	r3, fp, r1
   2c39c:	mov	r6, #0
   2c3a0:	cmp	r8, r3
   2c3a4:	bls	2c998 <__assert_fail@plt+0x1a1c0>
   2c3a8:	mov	r7, #0
   2c3ac:	str	r6, [sp, #28]
   2c3b0:	str	r6, [sp, #52]	; 0x34
   2c3b4:	mov	r9, r1
   2c3b8:	mov	r6, #0
   2c3bc:	strd	r6, [sp, #32]
   2c3c0:	movw	r7, #65534	; 0xfffe
   2c3c4:	str	r7, [sp, #56]	; 0x38
   2c3c8:	b	2c504 <__assert_fail@plt+0x19d2c>
   2c3cc:	mov	r1, #4
   2c3d0:	ldr	r3, [sl]
   2c3d4:	movw	r7, #3472	; 0xd90
   2c3d8:	ldr	r0, [sp, #40]	; 0x28
   2c3dc:	movt	r7, #7
   2c3e0:	blx	r3
   2c3e4:	mvn	r2, #0
   2c3e8:	mov	r3, #0
   2c3ec:	mov	r4, r0
   2c3f0:	mov	r5, r1
   2c3f4:	cmp	r5, r3
   2c3f8:	cmpeq	r4, r2
   2c3fc:	bne	2c93c <__assert_fail@plt+0x1a164>
   2c400:	ldr	lr, [sp, #40]	; 0x28
   2c404:	add	r3, lr, #12
   2c408:	cmp	r8, r3
   2c40c:	bhi	2c438 <__assert_fail@plt+0x19c60>
   2c410:	cmp	r8, r6
   2c414:	bls	2c428 <__assert_fail@plt+0x19c50>
   2c418:	rsb	r1, r6, r8
   2c41c:	sub	r2, r1, #1
   2c420:	cmp	r2, #7
   2c424:	bls	2c43c <__assert_fail@plt+0x19c64>
   2c428:	mov	r6, r3
   2c42c:	mov	r1, #8
   2c430:	mov	r4, r3
   2c434:	b	2c38c <__assert_fail@plt+0x19bb4>
   2c438:	mov	r1, #8
   2c43c:	mov	r0, r6
   2c440:	ldr	r2, [sl]
   2c444:	mov	r6, r3
   2c448:	blx	r2
   2c44c:	mov	r9, #8
   2c450:	mov	ip, #12
   2c454:	mov	r4, r0
   2c458:	mov	r5, r1
   2c45c:	add	fp, r6, #2
   2c460:	cmp	r8, fp
   2c464:	bhi	2c4b0 <__assert_fail@plt+0x19cd8>
   2c468:	cmp	r6, r8
   2c46c:	bcc	2c8e8 <__assert_fail@plt+0x1a110>
   2c470:	add	r3, fp, r9
   2c474:	strd	r4, [sp, #32]
   2c478:	cmp	r8, r3
   2c47c:	bhi	2c96c <__assert_fail@plt+0x1a194>
   2c480:	mov	r6, #0
   2c484:	str	r6, [sp, #52]	; 0x34
   2c488:	ldr	r6, [sp, #32]
   2c48c:	add	ip, ip, r4
   2c490:	ldr	r7, [sp, #40]	; 0x28
   2c494:	mov	fp, #0
   2c498:	mov	r0, fp
   2c49c:	add	ip, r7, ip
   2c4a0:	str	r6, [sp, #28]
   2c4a4:	movw	r7, #65534	; 0xfffe
   2c4a8:	str	r7, [sp, #56]	; 0x38
   2c4ac:	b	2c51c <__assert_fail@plt+0x19d44>
   2c4b0:	strd	r4, [sp, #32]
   2c4b4:	add	ip, ip, r4
   2c4b8:	ldr	lr, [sp, #40]	; 0x28
   2c4bc:	ldr	r3, [sp, #32]
   2c4c0:	add	r4, lr, ip
   2c4c4:	str	r3, [sp, #28]
   2c4c8:	mov	r1, #2
   2c4cc:	ldr	r2, [r7]
   2c4d0:	add	r3, fp, r9
   2c4d4:	mov	r0, r6
   2c4d8:	str	r3, [sp, #24]
   2c4dc:	blx	r2
   2c4e0:	ldr	r3, [sp, #24]
   2c4e4:	cmp	r8, r3
   2c4e8:	uxth	r0, r0
   2c4ec:	str	r0, [sp, #52]	; 0x34
   2c4f0:	sub	r2, r0, #2
   2c4f4:	uxth	r2, r2
   2c4f8:	str	r2, [sp, #56]	; 0x38
   2c4fc:	bls	2c6f4 <__assert_fail@plt+0x19f1c>
   2c500:	mov	r1, r9
   2c504:	sub	r2, r1, #1
   2c508:	cmp	r2, #7
   2c50c:	bls	2c70c <__assert_fail@plt+0x19f34>
   2c510:	mov	fp, #0
   2c514:	mov	ip, r4
   2c518:	mov	r0, fp
   2c51c:	ldr	r7, [sp, #48]	; 0x30
   2c520:	ldr	lr, [r7, #1568]	; 0x620
   2c524:	sub	r2, lr, #1
   2c528:	cmn	r2, #3
   2c52c:	bhi	2c5a0 <__assert_fail@plt+0x19dc8>
   2c530:	movw	r1, #1240	; 0x4d8
   2c534:	movt	r1, #7
   2c538:	mov	r6, r0
   2c53c:	mov	r7, #0
   2c540:	ldr	r2, [r1, #1580]	; 0x62c
   2c544:	mov	r1, #0
   2c548:	mov	r4, r1
   2c54c:	ldrd	r0, [r2, #16]
   2c550:	add	r4, r4, #1
   2c554:	add	r2, r2, #80	; 0x50
   2c558:	cmp	r1, r7
   2c55c:	cmpeq	r0, r6
   2c560:	beq	2c5a0 <__assert_fail@plt+0x19dc8>
   2c564:	cmp	r4, lr
   2c568:	bne	2c54c <__assert_fail@plt+0x19d74>
   2c56c:	mov	r2, #5
   2c570:	movw	r1, #32340	; 0x7e54
   2c574:	mov	r0, #0
   2c578:	movt	r1, #5
   2c57c:	str	r3, [sp, #24]
   2c580:	str	ip, [sp, #20]
   2c584:	bl	12298 <dcgettext@plt>
   2c588:	ldr	r6, [sp, #60]	; 0x3c
   2c58c:	mov	r1, fp
   2c590:	ldr	r2, [r6, #8]
   2c594:	bl	49bf8 <warn@@Base>
   2c598:	ldr	r3, [sp, #24]
   2c59c:	ldr	ip, [sp, #20]
   2c5a0:	add	r4, r3, r9
   2c5a4:	cmp	r8, r4
   2c5a8:	bhi	2c6c8 <__assert_fail@plt+0x19ef0>
   2c5ac:	cmp	r8, r3
   2c5b0:	rsbhi	r1, r3, r8
   2c5b4:	bhi	2c6cc <__assert_fail@plt+0x19ef4>
   2c5b8:	mov	r5, #0
   2c5bc:	ldrd	r6, [sp, #32]
   2c5c0:	cmp	r6, #0
   2c5c4:	sbcs	r7, r7, #0
   2c5c8:	blt	2c5dc <__assert_fail@plt+0x19e04>
   2c5cc:	ldr	r6, [sp, #40]	; 0x28
   2c5d0:	cmp	r6, ip
   2c5d4:	strls	ip, [sp, #40]	; 0x28
   2c5d8:	bls	2c5fc <__assert_fail@plt+0x19e24>
   2c5dc:	mov	r2, #5
   2c5e0:	movw	r1, #31964	; 0x7cdc
   2c5e4:	mov	r0, #0
   2c5e8:	movt	r1, #5
   2c5ec:	bl	12298 <dcgettext@plt>
   2c5f0:	ldr	r1, [sp, #28]
   2c5f4:	bl	49bf8 <warn@@Base>
   2c5f8:	str	r8, [sp, #40]	; 0x28
   2c5fc:	mov	r2, #5
   2c600:	movw	r1, #32004	; 0x7d04
   2c604:	mov	r0, #0
   2c608:	movt	r1, #5
   2c60c:	bl	12298 <dcgettext@plt>
   2c610:	ldr	r2, [sp, #28]
   2c614:	mov	r1, r0
   2c618:	mov	r0, #1
   2c61c:	bl	125bc <__printf_chk@plt>
   2c620:	mov	r2, #5
   2c624:	movw	r1, #32048	; 0x7d30
   2c628:	mov	r0, #0
   2c62c:	movt	r1, #5
   2c630:	bl	12298 <dcgettext@plt>
   2c634:	ldr	r2, [sp, #52]	; 0x34
   2c638:	mov	r1, r0
   2c63c:	mov	r0, #1
   2c640:	bl	125bc <__printf_chk@plt>
   2c644:	mov	r2, #5
   2c648:	movw	r1, #32092	; 0x7d5c
   2c64c:	mov	r0, #0
   2c650:	movt	r1, #5
   2c654:	bl	12298 <dcgettext@plt>
   2c658:	mov	r2, fp
   2c65c:	mov	r1, r0
   2c660:	mov	r0, #1
   2c664:	bl	125bc <__printf_chk@plt>
   2c668:	mov	r2, #5
   2c66c:	movw	r1, #32140	; 0x7d8c
   2c670:	mov	r0, #0
   2c674:	movt	r1, #5
   2c678:	bl	12298 <dcgettext@plt>
   2c67c:	mov	r2, r5
   2c680:	mov	r1, r0
   2c684:	mov	r0, #1
   2c688:	bl	125bc <__printf_chk@plt>
   2c68c:	ldr	r7, [sp, #56]	; 0x38
   2c690:	cmp	r7, #1
   2c694:	bls	2c730 <__assert_fail@plt+0x19f58>
   2c698:	ldr	r6, [sp, #48]	; 0x30
   2c69c:	ldr	r0, [r6, #1704]	; 0x6a8
   2c6a0:	cmp	r0, #0
   2c6a4:	beq	2c914 <__assert_fail@plt+0x1a13c>
   2c6a8:	ldr	r6, [sp, #40]	; 0x28
   2c6ac:	cmp	r6, r8
   2c6b0:	bcc	2c35c <__assert_fail@plt+0x19b84>
   2c6b4:	mov	r0, #10
   2c6b8:	bl	1258c <putchar@plt>
   2c6bc:	mov	r0, #1
   2c6c0:	add	sp, sp, #68	; 0x44
   2c6c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6c8:	mov	r1, r9
   2c6cc:	sub	r2, r1, #1
   2c6d0:	cmp	r2, #7
   2c6d4:	bhi	2c5b8 <__assert_fail@plt+0x19de0>
   2c6d8:	mov	r0, r3
   2c6dc:	str	ip, [sp, #20]
   2c6e0:	ldr	r3, [sl]
   2c6e4:	blx	r3
   2c6e8:	ldr	ip, [sp, #20]
   2c6ec:	mov	r5, r0
   2c6f0:	b	2c5bc <__assert_fail@plt+0x19de4>
   2c6f4:	cmp	fp, r8
   2c6f8:	rsbcc	r1, fp, r8
   2c6fc:	bcs	2c510 <__assert_fail@plt+0x19d38>
   2c700:	sub	r2, r1, #1
   2c704:	cmp	r2, #7
   2c708:	bhi	2c510 <__assert_fail@plt+0x19d38>
   2c70c:	mov	r0, fp
   2c710:	str	r3, [sp, #24]
   2c714:	ldr	r2, [sl]
   2c718:	str	r4, [sp, #20]
   2c71c:	blx	r2
   2c720:	ldr	r3, [sp, #24]
   2c724:	ldr	ip, [sp, #20]
   2c728:	mov	fp, r0
   2c72c:	b	2c51c <__assert_fail@plt+0x19d44>
   2c730:	ldr	r6, [sp, #44]	; 0x2c
   2c734:	mov	r2, #5
   2c738:	movw	r7, #13028	; 0x32e4
   2c73c:	movt	r7, #5
   2c740:	cmp	r6, #0
   2c744:	movwne	r1, #32240	; 0x7df0
   2c748:	movweq	r1, #32276	; 0x7e14
   2c74c:	movtne	r1, #5
   2c750:	movteq	r1, #5
   2c754:	movne	r0, #0
   2c758:	ldreq	r0, [sp, #44]	; 0x2c
   2c75c:	bl	12298 <dcgettext@plt>
   2c760:	mov	r1, r0
   2c764:	mov	r0, #1
   2c768:	bl	125bc <__printf_chk@plt>
   2c76c:	str	r9, [sp, #28]
   2c770:	ldr	r6, [sp, #28]
   2c774:	mov	r0, r4
   2c778:	str	r7, [sp, #32]
   2c77c:	add	r9, r0, r6
   2c780:	cmp	r8, r9
   2c784:	bhi	2c868 <__assert_fail@plt+0x1a090>
   2c788:	cmp	r0, r8
   2c78c:	bcs	2c6a8 <__assert_fail@plt+0x19ed0>
   2c790:	rsb	r1, r0, r8
   2c794:	sub	r3, r1, #1
   2c798:	cmp	r3, #7
   2c79c:	bhi	2c6a8 <__assert_fail@plt+0x19ed0>
   2c7a0:	ldr	r3, [sl]
   2c7a4:	blx	r3
   2c7a8:	mov	r4, r0
   2c7ac:	mov	r5, r1
   2c7b0:	orrs	r7, r4, r5
   2c7b4:	beq	2c6a8 <__assert_fail@plt+0x19ed0>
   2c7b8:	cmp	r8, r9
   2c7bc:	bls	2c6a8 <__assert_fail@plt+0x19ed0>
   2c7c0:	ldr	r6, [sp, #44]	; 0x2c
   2c7c4:	rsb	r1, r9, r8
   2c7c8:	sub	r3, r1, #1
   2c7cc:	cmp	r6, #0
   2c7d0:	mov	r6, r3
   2c7d4:	beq	2c8c8 <__assert_fail@plt+0x1a0f0>
   2c7d8:	add	fp, r9, #1
   2c7dc:	cmp	r8, fp
   2c7e0:	bhi	2c870 <__assert_fail@plt+0x1a098>
   2c7e4:	cmp	r3, #7
   2c7e8:	bls	2c874 <__assert_fail@plt+0x1a09c>
   2c7ec:	movw	r1, #32416	; 0x7ea0
   2c7f0:	mov	r0, #0
   2c7f4:	movt	r1, #5
   2c7f8:	mov	r2, #5
   2c7fc:	subs	r6, r3, #1
   2c800:	bl	12298 <dcgettext@plt>
   2c804:	mov	r5, r0
   2c808:	movw	r1, #18212	; 0x4724
   2c80c:	mov	r0, #0
   2c810:	movt	r1, #5
   2c814:	mov	r2, #5
   2c818:	bl	12298 <dcgettext@plt>
   2c81c:	mov	r3, r0
   2c820:	movw	r1, #32296	; 0x7e28
   2c824:	str	r5, [sp]
   2c828:	mov	r2, r4
   2c82c:	stmib	sp, {r6, fp}
   2c830:	mov	r0, #1
   2c834:	movt	r1, #5
   2c838:	bl	125bc <__printf_chk@plt>
   2c83c:	mov	r1, r6
   2c840:	mov	r0, fp
   2c844:	bl	12604 <strnlen@plt>
   2c848:	add	r0, r0, #1
   2c84c:	add	r0, fp, r0
   2c850:	cmp	r8, r0
   2c854:	bls	2c6a8 <__assert_fail@plt+0x19ed0>
   2c858:	ldr	r6, [sp, #28]
   2c85c:	add	r9, r0, r6
   2c860:	cmp	r8, r9
   2c864:	bls	2c788 <__assert_fail@plt+0x19fb0>
   2c868:	ldr	r1, [sp, #28]
   2c86c:	b	2c794 <__assert_fail@plt+0x19fbc>
   2c870:	mov	r1, #1
   2c874:	mov	r0, r9
   2c878:	ldr	r3, [sl]
   2c87c:	subs	r6, r6, #1
   2c880:	blx	r3
   2c884:	ldr	lr, [sp, #32]
   2c888:	mov	r2, #5
   2c88c:	lsl	r9, r0, #24
   2c890:	mov	r0, #0
   2c894:	ubfx	r1, r9, #28, #3
   2c898:	ldr	r1, [lr, r1, lsl #2]
   2c89c:	bl	12298 <dcgettext@plt>
   2c8a0:	cmp	r9, #0
   2c8a4:	mov	r5, r0
   2c8a8:	bge	2c808 <__assert_fail@plt+0x1a030>
   2c8ac:	movw	r1, #18480	; 0x4830
   2c8b0:	mov	r0, #0
   2c8b4:	movt	r1, #5
   2c8b8:	mov	r2, #5
   2c8bc:	bl	12298 <dcgettext@plt>
   2c8c0:	mov	r3, r0
   2c8c4:	b	2c820 <__assert_fail@plt+0x1a048>
   2c8c8:	str	r9, [sp]
   2c8cc:	mov	r2, r4
   2c8d0:	movw	r1, #32324	; 0x7e44
   2c8d4:	mov	r0, #1
   2c8d8:	movt	r1, #5
   2c8dc:	mov	fp, r9
   2c8e0:	bl	125bc <__printf_chk@plt>
   2c8e4:	b	2c83c <__assert_fail@plt+0x1a064>
   2c8e8:	rsb	r1, r6, r8
   2c8ec:	sub	r3, r1, #1
   2c8f0:	cmp	r3, #7
   2c8f4:	bhi	2c470 <__assert_fail@plt+0x19c98>
   2c8f8:	strd	r4, [sp, #32]
   2c8fc:	add	ip, ip, r4
   2c900:	ldr	r3, [sp, #32]
   2c904:	ldr	r2, [sp, #40]	; 0x28
   2c908:	str	r3, [sp, #28]
   2c90c:	add	r4, r2, ip
   2c910:	b	2c4cc <__assert_fail@plt+0x19cf4>
   2c914:	mov	r2, #5
   2c918:	movw	r1, #32184	; 0x7db8
   2c91c:	movw	r7, #1240	; 0x4d8
   2c920:	movt	r1, #5
   2c924:	movt	r7, #7
   2c928:	bl	12298 <dcgettext@plt>
   2c92c:	bl	49bf8 <warn@@Base>
   2c930:	mov	r3, #1
   2c934:	str	r3, [r7, #1704]	; 0x6a8
   2c938:	b	2c6a8 <__assert_fail@plt+0x19ed0>
   2c93c:	mov	ip, #4
   2c940:	mov	r9, ip
   2c944:	b	2c45c <__assert_fail@plt+0x19c84>
   2c948:	mov	r3, #0
   2c94c:	movw	r7, #3472	; 0xd90
   2c950:	str	r3, [sp, #28]
   2c954:	mov	r2, #0
   2c958:	mov	r3, #0
   2c95c:	mov	r9, r1
   2c960:	movt	r7, #7
   2c964:	strd	r2, [sp, #32]
   2c968:	b	2c4c8 <__assert_fail@plt+0x19cf0>
   2c96c:	ldr	r7, [sp, #32]
   2c970:	add	r4, ip, r4
   2c974:	ldr	r6, [sp, #40]	; 0x28
   2c978:	mov	r1, r9
   2c97c:	add	r4, r6, r4
   2c980:	str	r7, [sp, #28]
   2c984:	movw	r6, #65534	; 0xfffe
   2c988:	mov	r7, #0
   2c98c:	str	r6, [sp, #56]	; 0x38
   2c990:	str	r7, [sp, #52]	; 0x34
   2c994:	b	2c504 <__assert_fail@plt+0x19d2c>
   2c998:	mov	r7, #0
   2c99c:	strd	r6, [sp, #32]
   2c9a0:	mov	r7, #0
   2c9a4:	movw	r6, #65534	; 0xfffe
   2c9a8:	str	r7, [sp, #28]
   2c9ac:	mov	ip, r4
   2c9b0:	mov	r9, r1
   2c9b4:	ldr	r0, [sp, #32]
   2c9b8:	str	r7, [sp, #52]	; 0x34
   2c9bc:	mov	fp, r7
   2c9c0:	str	r6, [sp, #56]	; 0x38
   2c9c4:	b	2c51c <__assert_fail@plt+0x19d44>
   2c9c8:	mov	r2, #1
   2c9cc:	b	2c2ec <__assert_fail@plt+0x19b14>
   2c9d0:	mov	r2, #0
   2c9d4:	b	2c2ec <__assert_fail@plt+0x19b14>
   2c9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c9dc:	sub	sp, sp, #36	; 0x24
   2c9e0:	ldr	r6, [r0, #12]
   2c9e4:	mov	r4, r1
   2c9e8:	ldr	r3, [r0, #24]
   2c9ec:	mov	r2, #5
   2c9f0:	str	r0, [sp, #28]
   2c9f4:	movw	r1, #15452	; 0x3c5c
   2c9f8:	mov	r0, #0
   2c9fc:	movt	r1, #5
   2ca00:	add	sl, r6, r3
   2ca04:	bl	12298 <dcgettext@plt>
   2ca08:	ldr	r3, [sp, #28]
   2ca0c:	ldr	r2, [r3, #8]
   2ca10:	mov	r1, r0
   2ca14:	mov	r0, #1
   2ca18:	bl	125bc <__printf_chk@plt>
   2ca1c:	mov	r0, r4
   2ca20:	bl	2a8f0 <__assert_fail@plt+0x18118>
   2ca24:	cmp	r6, sl
   2ca28:	bcs	2cebc <__assert_fail@plt+0x1a6e4>
   2ca2c:	mov	fp, sl
   2ca30:	movw	ip, #1240	; 0x4d8
   2ca34:	movw	r3, #3472	; 0xd90
   2ca38:	movt	ip, #7
   2ca3c:	movt	r3, #7
   2ca40:	str	ip, [sp, #24]
   2ca44:	str	r3, [sp, #20]
   2ca48:	add	r8, r6, #4
   2ca4c:	cmp	fp, r8
   2ca50:	bhi	2cd2c <__assert_fail@plt+0x1a554>
   2ca54:	cmp	fp, r6
   2ca58:	bls	2ca6c <__assert_fail@plt+0x1a294>
   2ca5c:	rsb	r1, r6, fp
   2ca60:	sub	r3, r1, #1
   2ca64:	cmp	r3, #7
   2ca68:	bls	2cd30 <__assert_fail@plt+0x1a558>
   2ca6c:	mov	r9, #4
   2ca70:	mov	r5, r9
   2ca74:	add	r4, r8, #2
   2ca78:	cmp	r4, fp
   2ca7c:	bcc	2cdf0 <__assert_fail@plt+0x1a618>
   2ca80:	add	r7, r4, r5
   2ca84:	cmp	fp, r7
   2ca88:	bls	2d0a4 <__assert_fail@plt+0x1a8cc>
   2ca8c:	movw	r3, #65534	; 0xfffe
   2ca90:	mov	r0, #0
   2ca94:	str	r3, [sp, #16]
   2ca98:	mov	r1, #0
   2ca9c:	mov	r3, #0
   2caa0:	strd	r0, [sp]
   2caa4:	str	r3, [sp, #12]
   2caa8:	sub	r3, r5, #1
   2caac:	cmp	r3, #7
   2cab0:	bls	2ce4c <__assert_fail@plt+0x1a674>
   2cab4:	mov	r8, #0
   2cab8:	ldr	r3, [sp, #24]
   2cabc:	ldr	ip, [r3, #1568]	; 0x620
   2cac0:	sub	r3, ip, #1
   2cac4:	cmn	r3, #3
   2cac8:	bhi	2cb28 <__assert_fail@plt+0x1a350>
   2cacc:	movw	r0, #1240	; 0x4d8
   2cad0:	movt	r0, #7
   2cad4:	mov	r2, r8
   2cad8:	mov	r3, #0
   2cadc:	ldr	r1, [r0, #1580]	; 0x62c
   2cae0:	mov	r0, #0
   2cae4:	ldrd	r4, [r1, #16]
   2cae8:	add	r0, r0, #1
   2caec:	add	r1, r1, #80	; 0x50
   2caf0:	cmp	r5, r3
   2caf4:	cmpeq	r4, r2
   2caf8:	beq	2cb28 <__assert_fail@plt+0x1a350>
   2cafc:	cmp	r0, ip
   2cb00:	bne	2cae4 <__assert_fail@plt+0x1a30c>
   2cb04:	mov	r2, #5
   2cb08:	movw	r1, #32340	; 0x7e54
   2cb0c:	mov	r0, #0
   2cb10:	movt	r1, #5
   2cb14:	bl	12298 <dcgettext@plt>
   2cb18:	ldr	ip, [sp, #28]
   2cb1c:	mov	r1, r8
   2cb20:	ldr	r2, [ip, #8]
   2cb24:	bl	49bf8 <warn@@Base>
   2cb28:	add	r4, r7, #1
   2cb2c:	cmp	fp, r4
   2cb30:	bls	2ce68 <__assert_fail@plt+0x1a690>
   2cb34:	ldr	ip, [sp, #20]
   2cb38:	mov	r0, r7
   2cb3c:	mov	r1, #1
   2cb40:	add	sl, r7, #2
   2cb44:	movw	r7, #3472	; 0xd90
   2cb48:	movt	r7, #7
   2cb4c:	ldr	r3, [ip]
   2cb50:	blx	r3
   2cb54:	cmp	fp, sl
   2cb58:	uxtb	r5, r0
   2cb5c:	bhi	2ce90 <__assert_fail@plt+0x1a6b8>
   2cb60:	rsb	r1, r4, fp
   2cb64:	sub	r3, r1, #1
   2cb68:	cmp	r3, #7
   2cb6c:	bls	2ce94 <__assert_fail@plt+0x1a6bc>
   2cb70:	mov	r4, #0
   2cb74:	ldr	r3, [sp, #16]
   2cb78:	cmp	r3, #1
   2cb7c:	bhi	2ceb0 <__assert_fail@plt+0x1a6d8>
   2cb80:	mov	r2, #5
   2cb84:	movw	r1, #32480	; 0x7ee0
   2cb88:	mov	r0, #0
   2cb8c:	movt	r1, #5
   2cb90:	bl	12298 <dcgettext@plt>
   2cb94:	ldr	r2, [sp]
   2cb98:	mov	r7, r2
   2cb9c:	mov	r1, r0
   2cba0:	mov	r0, #1
   2cba4:	bl	125bc <__printf_chk@plt>
   2cba8:	mov	r2, #5
   2cbac:	movw	r1, #32516	; 0x7f04
   2cbb0:	mov	r0, #0
   2cbb4:	movt	r1, #5
   2cbb8:	bl	12298 <dcgettext@plt>
   2cbbc:	ldr	r2, [sp, #12]
   2cbc0:	mov	r1, r0
   2cbc4:	mov	r0, #1
   2cbc8:	bl	125bc <__printf_chk@plt>
   2cbcc:	mov	r2, #5
   2cbd0:	movw	r1, #32548	; 0x7f24
   2cbd4:	mov	r0, #0
   2cbd8:	movt	r1, #5
   2cbdc:	bl	12298 <dcgettext@plt>
   2cbe0:	mov	r2, r8
   2cbe4:	mov	r1, r0
   2cbe8:	mov	r0, #1
   2cbec:	bl	125bc <__printf_chk@plt>
   2cbf0:	mov	r2, #5
   2cbf4:	movw	r1, #32584	; 0x7f48
   2cbf8:	mov	r0, #0
   2cbfc:	movt	r1, #5
   2cc00:	bl	12298 <dcgettext@plt>
   2cc04:	mov	r2, r5
   2cc08:	mov	r1, r0
   2cc0c:	mov	r0, #1
   2cc10:	bl	125bc <__printf_chk@plt>
   2cc14:	mov	r2, #5
   2cc18:	movw	r1, #32616	; 0x7f68
   2cc1c:	mov	r0, #0
   2cc20:	movt	r1, #5
   2cc24:	bl	12298 <dcgettext@plt>
   2cc28:	mov	r2, r4
   2cc2c:	add	r4, r5, r4
   2cc30:	uxtb	r4, r4
   2cc34:	mov	r1, r0
   2cc38:	mov	r0, #1
   2cc3c:	bl	125bc <__printf_chk@plt>
   2cc40:	sub	r0, r4, #1
   2cc44:	uxtb	r3, r0
   2cc48:	cmp	r3, #7
   2cc4c:	bhi	2d034 <__assert_fail@plt+0x1a85c>
   2cc50:	ands	r0, r0, r4
   2cc54:	bne	2d018 <__assert_fail@plt+0x1a840>
   2cc58:	cmp	r4, #4
   2cc5c:	movwhi	r1, #32740	; 0x7fe4
   2cc60:	movwls	r1, #32772	; 0x8004
   2cc64:	movthi	r1, #5
   2cc68:	movtls	r1, #5
   2cc6c:	movhi	r2, #5
   2cc70:	movls	r2, #5
   2cc74:	bl	12298 <dcgettext@plt>
   2cc78:	mov	r1, r0
   2cc7c:	mov	r0, #1
   2cc80:	bl	125bc <__printf_chk@plt>
   2cc84:	lsl	ip, r4, #1
   2cc88:	rsb	r0, r6, sl
   2cc8c:	str	ip, [sp, #12]
   2cc90:	mov	r1, ip
   2cc94:	bl	4f46c <warn@@Base+0x5874>
   2cc98:	ldr	ip, [sp]
   2cc9c:	add	r9, r9, ip
   2cca0:	add	r9, r6, r9
   2cca4:	str	r9, [sp]
   2cca8:	cmp	r1, #0
   2ccac:	ldrne	r3, [sp, #12]
   2ccb0:	rsbne	r1, r1, r3
   2ccb4:	addne	sl, sl, r1
   2ccb8:	cmp	r9, r6
   2ccbc:	movcs	r6, #0
   2ccc0:	movcc	r6, #1
   2ccc4:	cmp	r9, fp
   2ccc8:	orrhi	r6, r6, #1
   2cccc:	cmp	r6, #0
   2ccd0:	bne	2d074 <__assert_fail@plt+0x1a89c>
   2ccd4:	ldr	ip, [sp, #12]
   2ccd8:	add	r3, sl, ip
   2ccdc:	cmp	r9, r3
   2cce0:	movwcs	ip, #976	; 0x3d0
   2cce4:	movtcs	ip, #7
   2cce8:	strcs	ip, [sp, #16]
   2ccec:	bcc	2cf78 <__assert_fail@plt+0x1a7a0>
   2ccf0:	add	r6, sl, r4
   2ccf4:	cmp	fp, r6
   2ccf8:	bhi	2ced0 <__assert_fail@plt+0x1a6f8>
   2ccfc:	cmp	fp, sl
   2cd00:	rsbhi	r1, sl, fp
   2cd04:	bhi	2ced4 <__assert_fail@plt+0x1a6fc>
   2cd08:	add	r5, r6, r4
   2cd0c:	cmp	fp, r5
   2cd10:	bhi	2d094 <__assert_fail@plt+0x1a8bc>
   2cd14:	mov	r9, #0
   2cd18:	mov	sl, r5
   2cd1c:	mov	r8, r9
   2cd20:	mov	r7, r9
   2cd24:	mov	r6, r9
   2cd28:	b	2cf24 <__assert_fail@plt+0x1a74c>
   2cd2c:	mov	r1, #4
   2cd30:	ldr	ip, [sp, #20]
   2cd34:	mov	r0, r6
   2cd38:	movw	r7, #3472	; 0xd90
   2cd3c:	movt	r7, #7
   2cd40:	ldr	r3, [ip]
   2cd44:	blx	r3
   2cd48:	mvn	r2, #0
   2cd4c:	mov	r3, #0
   2cd50:	cmp	r1, r3
   2cd54:	cmpeq	r0, r2
   2cd58:	strd	r0, [sp]
   2cd5c:	bne	2d00c <__assert_fail@plt+0x1a834>
   2cd60:	add	r3, r6, #12
   2cd64:	cmp	fp, r3
   2cd68:	bhi	2cd94 <__assert_fail@plt+0x1a5bc>
   2cd6c:	cmp	fp, r8
   2cd70:	bls	2cd84 <__assert_fail@plt+0x1a5ac>
   2cd74:	rsb	r1, r8, fp
   2cd78:	sub	r2, r1, #1
   2cd7c:	cmp	r2, #7
   2cd80:	bls	2cd98 <__assert_fail@plt+0x1a5c0>
   2cd84:	mov	r8, r3
   2cd88:	mov	r9, #12
   2cd8c:	mov	r5, #8
   2cd90:	b	2ca74 <__assert_fail@plt+0x1a29c>
   2cd94:	mov	r1, #8
   2cd98:	ldr	ip, [sp, #20]
   2cd9c:	mov	r0, r8
   2cda0:	mov	r8, r3
   2cda4:	mov	r9, #12
   2cda8:	mov	r5, #8
   2cdac:	ldr	r2, [ip]
   2cdb0:	blx	r2
   2cdb4:	strd	r0, [sp]
   2cdb8:	add	r4, r8, #2
   2cdbc:	cmp	fp, r4
   2cdc0:	bhi	2ce04 <__assert_fail@plt+0x1a62c>
   2cdc4:	cmp	r8, fp
   2cdc8:	bcc	2cff8 <__assert_fail@plt+0x1a820>
   2cdcc:	add	r7, r4, r5
   2cdd0:	mov	ip, #0
   2cdd4:	cmp	fp, r7
   2cdd8:	movw	r3, #65534	; 0xfffe
   2cddc:	str	ip, [sp, #12]
   2cde0:	str	r3, [sp, #16]
   2cde4:	movls	r8, ip
   2cde8:	bls	2cab8 <__assert_fail@plt+0x1a2e0>
   2cdec:	b	2caa8 <__assert_fail@plt+0x1a2d0>
   2cdf0:	movw	r7, #3472	; 0xd90
   2cdf4:	movt	r7, #7
   2cdf8:	mov	r0, #0
   2cdfc:	mov	r1, #0
   2ce00:	strd	r0, [sp]
   2ce04:	mov	r1, #2
   2ce08:	ldr	r3, [r7]
   2ce0c:	mov	r0, r8
   2ce10:	blx	r3
   2ce14:	add	r7, r4, r5
   2ce18:	cmp	fp, r7
   2ce1c:	uxth	r0, r0
   2ce20:	str	r0, [sp, #12]
   2ce24:	sub	sl, r0, #2
   2ce28:	uxth	sl, sl
   2ce2c:	str	sl, [sp, #16]
   2ce30:	bhi	2caa8 <__assert_fail@plt+0x1a2d0>
   2ce34:	cmp	fp, r4
   2ce38:	bls	2cab4 <__assert_fail@plt+0x1a2dc>
   2ce3c:	rsb	r5, r4, fp
   2ce40:	sub	r3, r5, #1
   2ce44:	cmp	r3, #7
   2ce48:	bhi	2cab4 <__assert_fail@plt+0x1a2dc>
   2ce4c:	ldr	ip, [sp, #20]
   2ce50:	mov	r0, r4
   2ce54:	mov	r1, r5
   2ce58:	ldr	r3, [ip]
   2ce5c:	blx	r3
   2ce60:	mov	r8, r0
   2ce64:	b	2cab8 <__assert_fail@plt+0x1a2e0>
   2ce68:	cmp	fp, r7
   2ce6c:	bhi	2cfbc <__assert_fail@plt+0x1a7e4>
   2ce70:	add	sl, r7, #2
   2ce74:	cmp	fp, sl
   2ce78:	movls	r5, #0
   2ce7c:	movls	r4, r5
   2ce80:	bls	2cb74 <__assert_fail@plt+0x1a39c>
   2ce84:	movw	r7, #3472	; 0xd90
   2ce88:	movt	r7, #7
   2ce8c:	mov	r5, #0
   2ce90:	mov	r1, #1
   2ce94:	ldr	r3, [r7]
   2ce98:	mov	r0, r4
   2ce9c:	blx	r3
   2cea0:	ldr	r3, [sp, #16]
   2cea4:	cmp	r3, #1
   2cea8:	uxtb	r4, r0
   2ceac:	bls	2cb80 <__assert_fail@plt+0x1a3a8>
   2ceb0:	ldr	ip, [sp, #12]
   2ceb4:	cmp	ip, #0
   2ceb8:	bne	2d058 <__assert_fail@plt+0x1a880>
   2cebc:	mov	r0, #10
   2cec0:	bl	1258c <putchar@plt>
   2cec4:	mov	r0, #1
   2cec8:	add	sp, sp, #36	; 0x24
   2cecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ced0:	mov	r1, r4
   2ced4:	sub	r2, r1, #1
   2ced8:	cmp	r2, #7
   2cedc:	movhi	r9, #0
   2cee0:	movhi	r8, r9
   2cee4:	bhi	2cf00 <__assert_fail@plt+0x1a728>
   2cee8:	ldr	r3, [sp, #20]
   2ceec:	mov	r0, sl
   2cef0:	ldr	r2, [r3]
   2cef4:	blx	r2
   2cef8:	mov	r9, r0
   2cefc:	mov	r8, r1
   2cf00:	add	r5, r6, r4
   2cf04:	cmp	fp, r5
   2cf08:	bhi	2cf8c <__assert_fail@plt+0x1a7b4>
   2cf0c:	cmp	fp, r6
   2cf10:	rsbhi	r1, r6, fp
   2cf14:	bhi	2cf90 <__assert_fail@plt+0x1a7b8>
   2cf18:	mov	r7, #0
   2cf1c:	mov	sl, r5
   2cf20:	mov	r6, r7
   2cf24:	movw	r1, #46872	; 0xb718
   2cf28:	mov	r0, #1
   2cf2c:	movt	r1, #5
   2cf30:	bl	125bc <__printf_chk@plt>
   2cf34:	mov	r0, r9
   2cf38:	mov	r1, r8
   2cf3c:	mov	r2, r4
   2cf40:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2cf44:	mov	r0, r7
   2cf48:	mov	r1, r6
   2cf4c:	mov	r2, r4
   2cf50:	bl	1adb8 <__assert_fail@plt+0x85e0>
   2cf54:	ldr	r3, [sp, #16]
   2cf58:	mov	r0, #10
   2cf5c:	ldr	r1, [r3]
   2cf60:	bl	12334 <_IO_putc@plt>
   2cf64:	ldr	ip, [sp, #12]
   2cf68:	ldr	r3, [sp]
   2cf6c:	add	r5, r5, ip
   2cf70:	cmp	r3, r5
   2cf74:	bcs	2ccf0 <__assert_fail@plt+0x1a518>
   2cf78:	ldr	r3, [sp]
   2cf7c:	cmp	fp, r3
   2cf80:	bls	2cebc <__assert_fail@plt+0x1a6e4>
   2cf84:	ldr	r6, [sp]
   2cf88:	b	2ca48 <__assert_fail@plt+0x1a270>
   2cf8c:	mov	r1, r4
   2cf90:	sub	r2, r1, #1
   2cf94:	cmp	r2, #7
   2cf98:	bhi	2cf18 <__assert_fail@plt+0x1a740>
   2cf9c:	ldr	ip, [sp, #20]
   2cfa0:	mov	r0, r6
   2cfa4:	mov	sl, r5
   2cfa8:	ldr	r2, [ip]
   2cfac:	blx	r2
   2cfb0:	mov	r7, r0
   2cfb4:	mov	r6, r1
   2cfb8:	b	2cf24 <__assert_fail@plt+0x1a74c>
   2cfbc:	rsb	r1, r7, fp
   2cfc0:	sub	r3, r1, #1
   2cfc4:	cmp	r3, #7
   2cfc8:	bhi	2ce70 <__assert_fail@plt+0x1a698>
   2cfcc:	ldr	ip, [sp, #20]
   2cfd0:	mov	r0, r7
   2cfd4:	add	sl, r7, #2
   2cfd8:	movw	r7, #3472	; 0xd90
   2cfdc:	movt	r7, #7
   2cfe0:	ldr	r3, [ip]
   2cfe4:	blx	r3
   2cfe8:	cmp	fp, sl
   2cfec:	uxtb	r5, r0
   2cff0:	bls	2cb70 <__assert_fail@plt+0x1a398>
   2cff4:	b	2ce90 <__assert_fail@plt+0x1a6b8>
   2cff8:	rsb	r1, r8, fp
   2cffc:	sub	r3, r1, #1
   2d000:	cmp	r3, #7
   2d004:	bhi	2cdcc <__assert_fail@plt+0x1a5f4>
   2d008:	b	2ce08 <__assert_fail@plt+0x1a630>
   2d00c:	mov	r9, #4
   2d010:	mov	r5, r9
   2d014:	b	2cdb8 <__assert_fail@plt+0x1a5e0>
   2d018:	mov	r2, #5
   2d01c:	movw	r1, #32688	; 0x7fb0
   2d020:	mov	r0, #0
   2d024:	movt	r1, #5
   2d028:	bl	12298 <dcgettext@plt>
   2d02c:	bl	49bf8 <warn@@Base>
   2d030:	b	2cebc <__assert_fail@plt+0x1a6e4>
   2d034:	mov	r2, #5
   2d038:	movw	r1, #32648	; 0x7f88
   2d03c:	mov	r0, #0
   2d040:	movt	r1, #5
   2d044:	bl	12298 <dcgettext@plt>
   2d048:	ldr	r3, [sp, #28]
   2d04c:	ldr	r1, [r3, #8]
   2d050:	bl	494bc <error@@Base>
   2d054:	b	2cebc <__assert_fail@plt+0x1a6e4>
   2d058:	mov	r2, #5
   2d05c:	movw	r1, #32424	; 0x7ea8
   2d060:	mov	r0, #0
   2d064:	movt	r1, #5
   2d068:	bl	12298 <dcgettext@plt>
   2d06c:	bl	49bf8 <warn@@Base>
   2d070:	b	2cebc <__assert_fail@plt+0x1a6e4>
   2d074:	mov	r2, #5
   2d078:	movw	r1, #32796	; 0x801c
   2d07c:	mov	r0, #0
   2d080:	movt	r1, #5
   2d084:	bl	12298 <dcgettext@plt>
   2d088:	mov	r1, r7
   2d08c:	bl	494bc <error@@Base>
   2d090:	b	2cebc <__assert_fail@plt+0x1a6e4>
   2d094:	mov	r9, #0
   2d098:	mov	r1, r4
   2d09c:	mov	r8, r9
   2d0a0:	b	2cf90 <__assert_fail@plt+0x1a7b8>
   2d0a4:	mov	r0, #0
   2d0a8:	mov	r1, #0
   2d0ac:	strd	r0, [sp]
   2d0b0:	movw	r3, #65534	; 0xfffe
   2d0b4:	mov	ip, #0
   2d0b8:	str	r3, [sp, #16]
   2d0bc:	str	ip, [sp, #12]
   2d0c0:	ldr	r8, [sp]
   2d0c4:	b	2cab8 <__assert_fail@plt+0x1a2e0>
   2d0c8:	mov	r1, #1
   2d0cc:	b	297c8 <__assert_fail@plt+0x16ff0>
   2d0d0:	push	{r4, r5, r6, r7, r8, lr}
   2d0d4:	bl	1ab04 <__assert_fail@plt+0x832c>
   2d0d8:	mov	r4, #0
   2d0dc:	mov	r0, r4
   2d0e0:	add	r4, r4, #1
   2d0e4:	bl	1a71c <__assert_fail@plt+0x7f44>
   2d0e8:	cmp	r4, #36	; 0x24
   2d0ec:	bne	2d0dc <__assert_fail@plt+0x1a904>
   2d0f0:	movw	r7, #1240	; 0x4d8
   2d0f4:	movt	r7, #7
   2d0f8:	ldr	r8, [r7, #1580]	; 0x62c
   2d0fc:	cmp	r8, #0
   2d100:	popeq	{r4, r5, r6, r7, r8, pc}
   2d104:	ldr	r6, [r7, #1568]	; 0x620
   2d108:	sub	r3, r6, #1
   2d10c:	cmn	r3, #3
   2d110:	movls	r4, r8
   2d114:	movls	r5, #0
   2d118:	bls	2d138 <__assert_fail@plt+0x1a960>
   2d11c:	b	2d178 <__assert_fail@plt+0x1a9a0>
   2d120:	ldr	r3, [r4, #72]	; 0x48
   2d124:	cmp	r3, #0
   2d128:	beq	2d164 <__assert_fail@plt+0x1a98c>
   2d12c:	cmp	r5, r6
   2d130:	add	r4, r4, #80	; 0x50
   2d134:	beq	2d178 <__assert_fail@plt+0x1a9a0>
   2d138:	ldr	r3, [r4, #60]	; 0x3c
   2d13c:	add	r5, r5, #1
   2d140:	cmp	r3, #0
   2d144:	bne	2d120 <__assert_fail@plt+0x1a948>
   2d148:	ldr	r0, [r4, #48]	; 0x30
   2d14c:	bl	121f0 <free@plt>
   2d150:	ldr	r0, [r4, #52]	; 0x34
   2d154:	bl	121f0 <free@plt>
   2d158:	ldr	r3, [r4, #72]	; 0x48
   2d15c:	cmp	r3, #0
   2d160:	bne	2d12c <__assert_fail@plt+0x1a954>
   2d164:	ldr	r0, [r4, #64]	; 0x40
   2d168:	add	r4, r4, #80	; 0x50
   2d16c:	bl	121f0 <free@plt>
   2d170:	cmp	r5, r6
   2d174:	bne	2d138 <__assert_fail@plt+0x1a960>
   2d178:	mov	r0, r8
   2d17c:	bl	121f0 <free@plt>
   2d180:	mov	r3, #0
   2d184:	str	r3, [r7, #1580]	; 0x62c
   2d188:	str	r3, [r7, #1568]	; 0x620
   2d18c:	str	r3, [r7, #1584]	; 0x630
   2d190:	pop	{r4, r5, r6, r7, r8, pc}
   2d194:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2d198:	movw	r8, #3452	; 0xd7c
   2d19c:	ldrb	r3, [r0]
   2d1a0:	movw	r9, #3396	; 0xd44
   2d1a4:	mov	r6, r0
   2d1a8:	movt	r8, #7
   2d1ac:	cmp	r3, #0
   2d1b0:	movt	r9, #7
   2d1b4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d1b8:	movw	r4, #32828	; 0x803c
   2d1bc:	ldr	r7, [pc, #200]	; 2d28c <__assert_fail@plt+0x1aab4>
   2d1c0:	movt	r4, #5
   2d1c4:	mov	r5, #6
   2d1c8:	b	2d1d4 <__assert_fail@plt+0x1a9fc>
   2d1cc:	bl	124e4 <strlen@plt>
   2d1d0:	mov	r5, r0
   2d1d4:	mov	r2, r5
   2d1d8:	mov	r1, r4
   2d1dc:	mov	r0, r6
   2d1e0:	bl	12784 <strncmp@plt>
   2d1e4:	add	r2, r6, r5
   2d1e8:	cmp	r0, #0
   2d1ec:	bne	2d200 <__assert_fail@plt+0x1aa28>
   2d1f0:	ldrb	r3, [r6, r5]
   2d1f4:	cmp	r3, #44	; 0x2c
   2d1f8:	cmpne	r3, #0
   2d1fc:	beq	2d25c <__assert_fail@plt+0x1aa84>
   2d200:	ldr	r4, [r7, #12]!
   2d204:	cmp	r4, #0
   2d208:	mov	r0, r4
   2d20c:	bne	2d1cc <__assert_fail@plt+0x1a9f4>
   2d210:	mov	r2, #5
   2d214:	mov	r0, r4
   2d218:	movw	r1, #32836	; 0x8044
   2d21c:	movt	r1, #5
   2d220:	bl	12298 <dcgettext@plt>
   2d224:	mov	r1, r6
   2d228:	bl	49bf8 <warn@@Base>
   2d22c:	mov	r0, r6
   2d230:	mov	r1, #44	; 0x2c
   2d234:	bl	124fc <strchr@plt>
   2d238:	subs	r6, r0, #0
   2d23c:	beq	2d288 <__assert_fail@plt+0x1aab0>
   2d240:	ldrb	r3, [r6]
   2d244:	cmp	r3, #44	; 0x2c
   2d248:	ldrbeq	r3, [r6, #1]
   2d24c:	addeq	r6, r6, #1
   2d250:	cmp	r3, #0
   2d254:	bne	2d1b8 <__assert_fail@plt+0x1a9e0>
   2d258:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d25c:	ldr	r3, [r7, #4]
   2d260:	mov	r6, r2
   2d264:	ldr	r1, [r7, #8]
   2d268:	ldr	r0, [r3]
   2d26c:	orr	r1, r0, r1
   2d270:	str	r1, [r3]
   2d274:	ldr	r3, [r8]
   2d278:	cmp	r3, #0
   2d27c:	movne	r3, #1
   2d280:	strne	r3, [r9]
   2d284:	b	2d240 <__assert_fail@plt+0x1aa68>
   2d288:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d28c:	strdeq	r3, [r5], -r4
   2d290:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d294:	movw	sl, #3404	; 0xd4c
   2d298:	movw	r8, #3384	; 0xd38
   2d29c:	movw	r7, #3448	; 0xd78
   2d2a0:	movw	r5, #3396	; 0xd44
   2d2a4:	movw	r6, #3452	; 0xd7c
   2d2a8:	sub	r4, r0, #1
   2d2ac:	movt	sl, #7
   2d2b0:	movt	r8, #7
   2d2b4:	movt	r7, #7
   2d2b8:	movt	r5, #7
   2d2bc:	movt	r6, #7
   2d2c0:	mov	r9, r0
   2d2c4:	ldrb	r3, [r4, #1]!
   2d2c8:	cmp	r3, #0
   2d2cc:	beq	2d3b8 <__assert_fail@plt+0x1abe0>
   2d2d0:	sub	r3, r3, #70	; 0x46
   2d2d4:	cmp	r3, #46	; 0x2e
   2d2d8:	ldrls	pc, [pc, r3, lsl #2]
   2d2dc:	b	2d488 <__assert_fail@plt+0x1acb0>
   2d2e0:	muleq	r2, ip, r3
   2d2e4:	andeq	sp, r2, r8, lsl #9
   2d2e8:	andeq	sp, r2, r8, lsl #9
   2d2ec:	andeq	sp, r2, r8, lsl #9
   2d2f0:	andeq	sp, r2, r8, lsl #9
   2d2f4:	andeq	sp, r2, r8, lsl #9
   2d2f8:	andeq	sp, r2, r4, ror #7
   2d2fc:	andeq	sp, r2, r8, lsl #9
   2d300:	andeq	sp, r2, r8, lsl #9
   2d304:	andeq	sp, r2, r8, lsl #9
   2d308:	andeq	sp, r2, r8, lsl #9
   2d30c:	andeq	sp, r2, r8, lsl #9
   2d310:	ldrdeq	sp, [r2], -r0
   2d314:	andeq	sp, r2, r8, lsl #9
   2d318:	andeq	sp, r2, r8, lsl #9
   2d31c:	andeq	sp, r2, r8, lsl #9
   2d320:	andeq	sp, r2, r8, lsl #9
   2d324:	andeq	sp, r2, r8, lsl #9
   2d328:	andeq	sp, r2, r8, lsl #9
   2d32c:	andeq	sp, r2, r8, lsl #9
   2d330:	andeq	sp, r2, r8, lsl #9
   2d334:	andeq	sp, r2, r8, lsl #9
   2d338:	andeq	sp, r2, r8, lsl #9
   2d33c:	andeq	sp, r2, r8, lsl #9
   2d340:	andeq	sp, r2, r8, lsl #9
   2d344:	andeq	sp, r2, r8, lsl #9
   2d348:	andeq	sp, r2, r8, lsl #9
   2d34c:			; <UNDEFINED> instruction: 0x0002d3bc
   2d350:	andeq	sp, r2, r8, lsl #9
   2d354:	andeq	sp, r2, r8, lsl #9
   2d358:	andeq	sp, r2, r8, lsl #9
   2d35c:	andeq	sp, r2, r8, lsl #9
   2d360:	andeq	sp, r2, r4, lsr #7
   2d364:	andeq	sp, r2, r8, lsl #9
   2d368:	andeq	sp, r2, r8, lsl #9
   2d36c:	andeq	sp, r2, r4, ror r4
   2d370:	andeq	sp, r2, r8, lsl #9
   2d374:	andeq	sp, r2, r8, lsl #9
   2d378:	andeq	sp, r2, ip, asr r4
   2d37c:	andeq	sp, r2, r0, asr r4
   2d380:	andeq	sp, r2, r8, lsl #9
   2d384:	andeq	sp, r2, r4, asr #8
   2d388:	andeq	sp, r2, r0, lsr r4
   2d38c:	andeq	sp, r2, r8, lsl #9
   2d390:	andeq	sp, r2, ip, lsl r4
   2d394:	andeq	sp, r2, r0, lsl r4
   2d398:	strdeq	sp, [r2], -ip
   2d39c:	mov	r3, #1
   2d3a0:	str	r3, [r6]
   2d3a4:	mov	r3, #1
   2d3a8:	str	r3, [r5]
   2d3ac:	ldrb	r3, [r4, #1]!
   2d3b0:	cmp	r3, #0
   2d3b4:	bne	2d2d0 <__assert_fail@plt+0x1aaf8>
   2d3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d3bc:	movw	r3, #3408	; 0xd50
   2d3c0:	movt	r3, #7
   2d3c4:	mov	r2, #1
   2d3c8:	str	r2, [r3]
   2d3cc:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d3d0:	movw	r3, #3436	; 0xd6c
   2d3d4:	movt	r3, #7
   2d3d8:	mov	r2, #1
   2d3dc:	str	r2, [r3]
   2d3e0:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d3e4:	movw	r3, #3432	; 0xd68
   2d3e8:	movt	r3, #7
   2d3ec:	ldr	r2, [r3]
   2d3f0:	orr	r2, r2, #2
   2d3f4:	str	r2, [r3]
   2d3f8:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d3fc:	movw	r3, #3444	; 0xd74
   2d400:	movt	r3, #7
   2d404:	mov	r2, #1
   2d408:	str	r2, [r3]
   2d40c:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d410:	mov	r3, #1
   2d414:	str	r3, [r8]
   2d418:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d41c:	movw	r3, #3392	; 0xd40
   2d420:	movt	r3, #7
   2d424:	mov	r2, #1
   2d428:	str	r2, [r3]
   2d42c:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d430:	movw	r3, #3400	; 0xd48
   2d434:	movt	r3, #7
   2d438:	mov	r2, #1
   2d43c:	str	r2, [r3]
   2d440:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d444:	mov	r3, #1
   2d448:	str	r3, [sl]
   2d44c:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d450:	mov	r3, #1
   2d454:	str	r3, [r7]
   2d458:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d45c:	movw	r3, #3432	; 0xd68
   2d460:	movt	r3, #7
   2d464:	ldr	r2, [r3]
   2d468:	orr	r2, r2, #1
   2d46c:	str	r2, [r3]
   2d470:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d474:	movw	r3, #3388	; 0xd3c
   2d478:	movt	r3, #7
   2d47c:	mov	r2, #1
   2d480:	str	r2, [r3]
   2d484:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d488:	mov	r2, #5
   2d48c:	movw	r1, #32836	; 0x8044
   2d490:	mov	r0, #0
   2d494:	movt	r1, #5
   2d498:	bl	12298 <dcgettext@plt>
   2d49c:	mov	r1, r9
   2d4a0:	bl	49bf8 <warn@@Base>
   2d4a4:	b	2d2c4 <__assert_fail@plt+0x1aaec>
   2d4a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   2d4ac:	sub	sp, sp, #8
   2d4b0:	movw	r2, #3456	; 0xd80
   2d4b4:	movt	r2, #7
   2d4b8:	movw	sl, #3408	; 0xd50
   2d4bc:	movw	r9, #3432	; 0xd68
   2d4c0:	movt	sl, #7
   2d4c4:	movt	r9, #7
   2d4c8:	movw	r8, #3400	; 0xd48
   2d4cc:	movw	r7, #3444	; 0xd74
   2d4d0:	movt	r8, #7
   2d4d4:	movt	r7, #7
   2d4d8:	movw	r3, #3440	; 0xd70
   2d4dc:	movt	r3, #7
   2d4e0:	str	r3, [sp, #4]
   2d4e4:	mov	r3, #1
   2d4e8:	str	r3, [r2]
   2d4ec:	movw	fp, #3388	; 0xd3c
   2d4f0:	ldr	r2, [sp, #4]
   2d4f4:	movt	fp, #7
   2d4f8:	str	r3, [sl]
   2d4fc:	movw	r6, #3392	; 0xd40
   2d500:	str	r3, [r9]
   2d504:	movt	r6, #7
   2d508:	str	r3, [r8]
   2d50c:	movw	r5, #3436	; 0xd6c
   2d510:	str	r3, [r7]
   2d514:	movt	r5, #7
   2d518:	movw	r4, #3396	; 0xd44
   2d51c:	movw	ip, #3448	; 0xd78
   2d520:	movt	r4, #7
   2d524:	movt	ip, #7
   2d528:	movw	r0, #3384	; 0xd38
   2d52c:	movw	r1, #3404	; 0xd4c
   2d530:	movt	r0, #7
   2d534:	movt	r1, #7
   2d538:	movw	sl, #3428	; 0xd64
   2d53c:	movw	r9, #3416	; 0xd58
   2d540:	movt	sl, #7
   2d544:	movt	r9, #7
   2d548:	movw	r8, #3412	; 0xd54
   2d54c:	movw	r7, #3460	; 0xd84
   2d550:	movt	r8, #7
   2d554:	movt	r7, #7
   2d558:	str	r3, [fp]
   2d55c:	str	r3, [r6]
   2d560:	str	r3, [r5]
   2d564:	str	r3, [r4]
   2d568:	str	r3, [ip]
   2d56c:	str	r3, [r0]
   2d570:	str	r3, [r1]
   2d574:	str	r3, [r2]
   2d578:	str	r3, [sl]
   2d57c:	str	r3, [r9]
   2d580:	str	r3, [r8]
   2d584:	str	r3, [r7]
   2d588:	add	sp, sp, #8
   2d58c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   2d590:	bx	lr
   2d594:	ldr	r3, [r0, #8]
   2d598:	mov	r2, #0
   2d59c:	mov	r0, #1
   2d5a0:	str	r2, [r3, #12]
   2d5a4:	bx	lr
   2d5a8:	mov	r0, #1
   2d5ac:	bx	lr
   2d5b0:	mov	r0, #1
   2d5b4:	bx	lr
   2d5b8:	mov	r0, #1
   2d5bc:	bx	lr
   2d5c0:	ldr	r3, [r0, #4]
   2d5c4:	push	{r4, r5, r6, lr}
   2d5c8:	vpush	{d8}
   2d5cc:	cmp	r3, #0
   2d5d0:	sub	sp, sp, #8
   2d5d4:	mov	r5, r0
   2d5d8:	mov	r6, r1
   2d5dc:	vmov.f64	d8, d0
   2d5e0:	beq	2d604 <__assert_fail@plt+0x1ae2c>
   2d5e4:	mov	r4, #0
   2d5e8:	mov	r0, #32
   2d5ec:	ldr	r1, [r5]
   2d5f0:	bl	12334 <_IO_putc@plt>
   2d5f4:	ldr	r2, [r5, #4]
   2d5f8:	add	r4, r4, #1
   2d5fc:	cmp	r4, r2
   2d600:	bcc	2d5e8 <__assert_fail@plt+0x1ae10>
   2d604:	ldr	r0, [r5]
   2d608:	mov	r3, r6
   2d60c:	vstr	d8, [sp]
   2d610:	mov	r1, #1
   2d614:	movw	r2, #35900	; 0x8c3c
   2d618:	movt	r2, #5
   2d61c:	bl	125d4 <__fprintf_chk@plt>
   2d620:	mov	r0, #1
   2d624:	add	sp, sp, #8
   2d628:	vpop	{d8}
   2d62c:	pop	{r4, r5, r6, pc}
   2d630:	ldr	r3, [r0, #4]
   2d634:	push	{r4, r5, r6, lr}
   2d638:	vpush	{d8}
   2d63c:	cmp	r3, #0
   2d640:	sub	sp, sp, #16
   2d644:	mov	r5, r0
   2d648:	mov	r6, r1
   2d64c:	vmov.f64	d8, d0
   2d650:	beq	2d674 <__assert_fail@plt+0x1ae9c>
   2d654:	mov	r4, #0
   2d658:	mov	r0, #32
   2d65c:	ldr	r1, [r5]
   2d660:	bl	12334 <_IO_putc@plt>
   2d664:	ldr	r2, [r5, #4]
   2d668:	add	r4, r4, #1
   2d66c:	cmp	r4, r2
   2d670:	bcc	2d658 <__assert_fail@plt+0x1ae80>
   2d674:	ldr	ip, [r5, #16]
   2d678:	mov	r3, r6
   2d67c:	ldr	r0, [r5]
   2d680:	mov	r1, #1
   2d684:	vstr	d8, [sp, #8]
   2d688:	movw	r2, #35924	; 0x8c54
   2d68c:	str	ip, [sp]
   2d690:	movt	r2, #5
   2d694:	bl	125d4 <__fprintf_chk@plt>
   2d698:	mov	r0, #1
   2d69c:	add	sp, sp, #16
   2d6a0:	vpop	{d8}
   2d6a4:	pop	{r4, r5, r6, pc}
   2d6a8:	push	{r3, lr}
   2d6ac:	cmp	r0, #3
   2d6b0:	ldrls	pc, [pc, r0, lsl #2]
   2d6b4:	b	2d6f8 <__assert_fail@plt+0x1af20>
   2d6b8:	andeq	sp, r2, r0, ror #13
   2d6bc:	ldrdeq	sp, [r2], -r4
   2d6c0:	andeq	sp, r2, r8, asr #13
   2d6c4:	andeq	sp, r2, ip, ror #13
   2d6c8:	movw	r0, #12512	; 0x30e0
   2d6cc:	movt	r0, #5
   2d6d0:	pop	{r3, pc}
   2d6d4:	movw	r0, #35980	; 0x8c8c
   2d6d8:	movt	r0, #5
   2d6dc:	pop	{r3, pc}
   2d6e0:	movw	r0, #35972	; 0x8c84
   2d6e4:	movt	r0, #5
   2d6e8:	pop	{r3, pc}
   2d6ec:	movw	r0, #35992	; 0x8c98
   2d6f0:	movt	r0, #5
   2d6f4:	pop	{r3, pc}
   2d6f8:	bl	12790 <abort@plt>
   2d6fc:	push	{r3, r4, r5, lr}
   2d700:	mov	r5, r1
   2d704:	mov	r4, r0
   2d708:	ldr	r0, [r0, #16]
   2d70c:	bl	121f0 <free@plt>
   2d710:	mov	r0, r5
   2d714:	bl	12574 <__strdup@plt>
   2d718:	str	r0, [r4, #16]
   2d71c:	mov	r0, #1
   2d720:	pop	{r3, r4, r5, pc}
   2d724:	push	{r3, r4, r5, lr}
   2d728:	mov	r5, r1
   2d72c:	mov	r4, r0
   2d730:	ldr	r0, [r0, #16]
   2d734:	bl	121f0 <free@plt>
   2d738:	mov	r0, r5
   2d73c:	bl	12574 <__strdup@plt>
   2d740:	str	r0, [r4, #16]
   2d744:	mov	r0, #1
   2d748:	pop	{r3, r4, r5, pc}
   2d74c:	push	{lr}		; (str lr, [sp, #-4]!)
   2d750:	sub	sp, sp, #12
   2d754:	movw	r3, #36008	; 0x8ca8
   2d758:	movt	r3, #5
   2d75c:	strd	r0, [sp]
   2d760:	mov	r0, r2
   2d764:	mov	r1, #1
   2d768:	mvn	r2, #0
   2d76c:	bl	12568 <__sprintf_chk@plt>
   2d770:	add	sp, sp, #12
   2d774:	pop	{pc}		; (ldr pc, [sp], #4)
   2d778:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d77c:	movw	r8, #2952	; 0xb88
   2d780:	movt	r8, #7
   2d784:	sub	sp, sp, #24
   2d788:	mov	r3, r1
   2d78c:	ldr	ip, [r8]
   2d790:	cmp	ip, #0
   2d794:	bne	2d7d0 <__assert_fail@plt+0x1aff8>
   2d798:	ldr	r4, [r3, #20]
   2d79c:	tst	r4, #1
   2d7a0:	beq	2d7d0 <__assert_fail@plt+0x1aff8>
   2d7a4:	ldrd	sl, [r3, #32]
   2d7a8:	ldrd	r4, [r8, #8]
   2d7ac:	cmp	fp, r5
   2d7b0:	cmpeq	sl, r4
   2d7b4:	bhi	2d7d0 <__assert_fail@plt+0x1aff8>
   2d7b8:	ldrd	r6, [r3, #48]	; 0x30
   2d7bc:	adds	r6, r6, sl
   2d7c0:	adc	r7, r7, fp
   2d7c4:	cmp	r5, r7
   2d7c8:	cmpeq	r4, r6
   2d7cc:	bcc	2d7d8 <__assert_fail@plt+0x1b000>
   2d7d0:	add	sp, sp, #24
   2d7d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2d7d8:	ldr	lr, [r0, #4]
   2d7dc:	mov	r1, r2
   2d7e0:	str	ip, [sp, #20]
   2d7e4:	mov	r2, r3
   2d7e8:	add	ip, r8, #16
   2d7ec:	add	r3, r8, #20
   2d7f0:	str	ip, [sp, #8]
   2d7f4:	subs	r4, r4, sl
   2d7f8:	sbc	r5, r5, fp
   2d7fc:	str	r3, [sp, #12]
   2d800:	add	r3, r8, #24
   2d804:	strd	r4, [sp]
   2d808:	str	r3, [sp, #16]
   2d80c:	ldr	r3, [lr, #296]	; 0x128
   2d810:	blx	r3
   2d814:	str	r0, [r8]
   2d818:	b	2d7d0 <__assert_fail@plt+0x1aff8>
   2d81c:	ldr	r3, [r0]
   2d820:	mov	r2, r0
   2d824:	push	{r4, lr}
   2d828:	cmp	r3, #0
   2d82c:	beq	2d84c <__assert_fail@plt+0x1b074>
   2d830:	ldr	r1, [r3]
   2d834:	mov	r0, r3
   2d838:	str	r1, [r2]
   2d83c:	ldr	r4, [r3, #4]
   2d840:	bl	121f0 <free@plt>
   2d844:	mov	r0, r4
   2d848:	pop	{r4, pc}
   2d84c:	movw	r0, #36016	; 0x8cb0
   2d850:	movw	r1, #36044	; 0x8ccc
   2d854:	movw	r3, #35080	; 0x8908
   2d858:	movt	r0, #5
   2d85c:	movt	r1, #5
   2d860:	movw	r2, #478	; 0x1de
   2d864:	movt	r3, #5
   2d868:	bl	127d8 <__assert_fail@plt>
   2d86c:	push	{r4, r5, r6, lr}
   2d870:	mov	r5, r0
   2d874:	add	r0, r0, #8
   2d878:	bl	2d81c <__assert_fail@plt+0x1b044>
   2d87c:	subs	r6, r0, #0
   2d880:	beq	2d8d8 <__assert_fail@plt+0x1b100>
   2d884:	ldr	r3, [r5, #4]
   2d888:	cmp	r3, #0
   2d88c:	movne	r4, #0
   2d890:	beq	2d8b0 <__assert_fail@plt+0x1b0d8>
   2d894:	mov	r0, #32
   2d898:	ldr	r1, [r5]
   2d89c:	bl	12334 <_IO_putc@plt>
   2d8a0:	ldr	r2, [r5, #4]
   2d8a4:	add	r4, r4, #1
   2d8a8:	cmp	r4, r2
   2d8ac:	bcc	2d894 <__assert_fail@plt+0x1b0bc>
   2d8b0:	mov	r1, #1
   2d8b4:	mov	r3, r6
   2d8b8:	ldr	r0, [r5]
   2d8bc:	movw	r2, #36824	; 0x8fd8
   2d8c0:	movt	r2, #5
   2d8c4:	bl	125d4 <__fprintf_chk@plt>
   2d8c8:	mov	r0, r6
   2d8cc:	bl	121f0 <free@plt>
   2d8d0:	mov	r0, #1
   2d8d4:	pop	{r4, r5, r6, pc}
   2d8d8:	mov	r0, r6
   2d8dc:	pop	{r4, r5, r6, pc}
   2d8e0:	push	{r3, lr}
   2d8e4:	add	r0, r0, #8
   2d8e8:	bl	2d81c <__assert_fail@plt+0x1b044>
   2d8ec:	subs	r3, r0, #0
   2d8f0:	beq	2d900 <__assert_fail@plt+0x1b128>
   2d8f4:	bl	121f0 <free@plt>
   2d8f8:	mov	r0, #1
   2d8fc:	pop	{r3, pc}
   2d900:	mov	r0, r3
   2d904:	pop	{r3, pc}
   2d908:	push	{r4, r5, r6, lr}
   2d90c:	mov	r4, r0
   2d910:	sub	sp, sp, #8
   2d914:	add	r0, r0, #8
   2d918:	mov	r6, r1
   2d91c:	bl	2d81c <__assert_fail@plt+0x1b044>
   2d920:	subs	r5, r0, #0
   2d924:	moveq	r0, r5
   2d928:	beq	2d95c <__assert_fail@plt+0x1b184>
   2d92c:	ldr	ip, [r4, #16]
   2d930:	mov	r3, r6
   2d934:	ldr	r0, [r4]
   2d938:	mov	r1, #1
   2d93c:	movw	r2, #36052	; 0x8cd4
   2d940:	str	r5, [sp, #4]
   2d944:	movt	r2, #5
   2d948:	str	ip, [sp]
   2d94c:	bl	125d4 <__fprintf_chk@plt>
   2d950:	mov	r0, r5
   2d954:	bl	121f0 <free@plt>
   2d958:	mov	r0, #1
   2d95c:	add	sp, sp, #8
   2d960:	pop	{r4, r5, r6, pc}
   2d964:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d968:	mov	r4, r0
   2d96c:	sub	sp, sp, #12
   2d970:	add	r0, r0, #8
   2d974:	mov	r5, r1
   2d978:	mov	r7, r2
   2d97c:	bl	2d81c <__assert_fail@plt+0x1b044>
   2d980:	subs	r8, r0, #0
   2d984:	beq	2daa4 <__assert_fail@plt+0x1b2cc>
   2d988:	ldr	r6, [r4, #28]
   2d98c:	cmp	r6, #0
   2d990:	beq	2da90 <__assert_fail@plt+0x1b2b8>
   2d994:	ldr	r0, [r4, #20]
   2d998:	mov	r1, r5
   2d99c:	mov	r2, #3
   2d9a0:	blx	r6
   2d9a4:	subs	r6, r0, #0
   2d9a8:	beq	2da90 <__assert_fail@plt+0x1b2b8>
   2d9ac:	movw	r1, #12380	; 0x305c
   2d9b0:	movt	r1, #5
   2d9b4:	bl	1213c <strstr@plt>
   2d9b8:	cmp	r0, #0
   2d9bc:	beq	2da98 <__assert_fail@plt+0x1b2c0>
   2d9c0:	mov	r5, r0
   2d9c4:	mov	r9, r6
   2d9c8:	mov	r3, #0
   2d9cc:	strb	r3, [r5], #2
   2d9d0:	ldr	ip, [r4, #16]
   2d9d4:	mov	r3, r5
   2d9d8:	ldr	r0, [r4]
   2d9dc:	movw	r2, #36080	; 0x8cf0
   2d9e0:	str	r8, [sp, #4]
   2d9e4:	movt	r2, #5
   2d9e8:	mov	r1, #1
   2d9ec:	str	ip, [sp]
   2d9f0:	bl	125d4 <__fprintf_chk@plt>
   2d9f4:	cmp	r7, #2
   2d9f8:	bcc	2da24 <__assert_fail@plt+0x1b24c>
   2d9fc:	cmp	r7, #3
   2da00:	bls	2da74 <__assert_fail@plt+0x1b29c>
   2da04:	cmp	r7, #5
   2da08:	bne	2da24 <__assert_fail@plt+0x1b24c>
   2da0c:	movw	r0, #36116	; 0x8d14
   2da10:	mov	r1, #1
   2da14:	movt	r0, #5
   2da18:	mov	r2, #10
   2da1c:	ldr	r3, [r4]
   2da20:	bl	12340 <fwrite@plt>
   2da24:	cmp	r9, #0
   2da28:	beq	2da44 <__assert_fail@plt+0x1b26c>
   2da2c:	movw	r2, #36128	; 0x8d20
   2da30:	mov	r3, r9
   2da34:	ldr	r0, [r4]
   2da38:	movt	r2, #5
   2da3c:	mov	r1, #1
   2da40:	bl	125d4 <__fprintf_chk@plt>
   2da44:	cmp	r6, #0
   2da48:	beq	2da54 <__assert_fail@plt+0x1b27c>
   2da4c:	mov	r0, r6
   2da50:	bl	121f0 <free@plt>
   2da54:	ldr	r1, [r4]
   2da58:	mov	r0, #10
   2da5c:	bl	12694 <fputc@plt>
   2da60:	mov	r0, r8
   2da64:	bl	121f0 <free@plt>
   2da68:	mov	r0, #1
   2da6c:	add	sp, sp, #12
   2da70:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2da74:	movw	r0, #36108	; 0x8d0c
   2da78:	mov	r1, #1
   2da7c:	mov	r2, #6
   2da80:	ldr	r3, [r4]
   2da84:	movt	r0, #5
   2da88:	bl	12340 <fwrite@plt>
   2da8c:	b	2da24 <__assert_fail@plt+0x1b24c>
   2da90:	mov	r9, r6
   2da94:	b	2d9d0 <__assert_fail@plt+0x1b1f8>
   2da98:	mov	r9, r0
   2da9c:	mov	r5, r6
   2daa0:	b	2d9d0 <__assert_fail@plt+0x1b1f8>
   2daa4:	mov	r0, r8
   2daa8:	add	sp, sp, #12
   2daac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2dab0:	push	{r3, lr}
   2dab4:	ldr	r3, [r0, #8]
   2dab8:	cmp	r3, #0
   2dabc:	beq	2dacc <__assert_fail@plt+0x1b2f4>
   2dac0:	str	r1, [r3, #12]
   2dac4:	mov	r0, #1
   2dac8:	pop	{r3, pc}
   2dacc:	movw	r0, #36016	; 0x8cb0
   2dad0:	movw	r1, #36044	; 0x8ccc
   2dad4:	movt	r0, #5
   2dad8:	movt	r1, #5
   2dadc:	movw	r2, #1432	; 0x598
   2dae0:	ldr	r3, [pc]	; 2dae8 <__assert_fail@plt+0x1b310>
   2dae4:	bl	127d8 <__assert_fail@plt>
   2dae8:	andeq	r8, r5, r4, lsl r9
   2daec:	ldr	r2, [r0, #4]
   2daf0:	push	{r3, lr}
   2daf4:	cmp	r2, #0
   2daf8:	bne	2db1c <__assert_fail@plt+0x1b344>
   2dafc:	mov	r3, r1
   2db00:	ldr	r0, [r0]
   2db04:	mov	r1, #1
   2db08:	movw	r2, #36160	; 0x8d40
   2db0c:	movt	r2, #5
   2db10:	bl	125d4 <__fprintf_chk@plt>
   2db14:	mov	r0, #1
   2db18:	pop	{r3, pc}
   2db1c:	movw	r0, #36140	; 0x8d2c
   2db20:	movw	r1, #36044	; 0x8ccc
   2db24:	movt	r0, #5
   2db28:	movt	r1, #5
   2db2c:	movw	r2, #551	; 0x227
   2db30:	ldr	r3, [pc]	; 2db38 <__assert_fail@plt+0x1b360>
   2db34:	bl	127d8 <__assert_fail@plt>
   2db38:	andeq	r8, r5, ip, lsr #18
   2db3c:	ldr	r2, [r0, #4]
   2db40:	push	{r3, lr}
   2db44:	cmp	r2, #0
   2db48:	bne	2db6c <__assert_fail@plt+0x1b394>
   2db4c:	mov	r3, r1
   2db50:	ldr	r0, [r0]
   2db54:	mov	r1, #1
   2db58:	movw	r2, #21996	; 0x55ec
   2db5c:	movt	r2, #5
   2db60:	bl	125d4 <__fprintf_chk@plt>
   2db64:	mov	r0, #1
   2db68:	pop	{r3, pc}
   2db6c:	movw	r0, #36140	; 0x8d2c
   2db70:	movw	r1, #36044	; 0x8ccc
   2db74:	movt	r0, #5
   2db78:	movt	r1, #5
   2db7c:	movw	r2, #537	; 0x219
   2db80:	ldr	r3, [pc]	; 2db88 <__assert_fail@plt+0x1b3b0>
   2db84:	bl	127d8 <__assert_fail@plt>
   2db88:	andeq	r8, r5, ip, lsr r9
   2db8c:	cmp	r0, #0
   2db90:	push	{r3, lr}
   2db94:	beq	2dbb8 <__assert_fail@plt+0x1b3e0>
   2db98:	ldr	r3, [r0, #8]
   2db9c:	cmp	r3, r1
   2dba0:	beq	2dbb0 <__assert_fail@plt+0x1b3d8>
   2dba4:	cmp	r3, #3
   2dba8:	strne	r1, [r0, #8]
   2dbac:	beq	2dbd4 <__assert_fail@plt+0x1b3fc>
   2dbb0:	mov	r0, #1
   2dbb4:	pop	{r3, pc}
   2dbb8:	movw	r0, #36016	; 0x8cb0
   2dbbc:	movw	r1, #36044	; 0x8ccc
   2dbc0:	movt	r0, #5
   2dbc4:	movt	r1, #5
   2dbc8:	movw	r2, #2058	; 0x80a
   2dbcc:	ldr	r3, [pc, #28]	; 2dbf0 <__assert_fail@plt+0x1b418>
   2dbd0:	bl	127d8 <__assert_fail@plt>
   2dbd4:	movw	r0, #36168	; 0x8d48
   2dbd8:	movw	r1, #36044	; 0x8ccc
   2dbdc:	movt	r0, #5
   2dbe0:	movt	r1, #5
   2dbe4:	movw	r2, #2063	; 0x80f
   2dbe8:	ldr	r3, [pc]	; 2dbf0 <__assert_fail@plt+0x1b418>
   2dbec:	bl	127d8 <__assert_fail@plt>
   2dbf0:	andeq	r8, r5, r8, asr r9
   2dbf4:	push	{r4, r5, r6, r7, lr}
   2dbf8:	mov	r4, r0
   2dbfc:	sub	sp, sp, #28
   2dc00:	add	r0, r0, #8
   2dc04:	mov	r5, r1
   2dc08:	bl	2d81c <__assert_fail@plt+0x1b044>
   2dc0c:	subs	r6, r0, #0
   2dc10:	beq	2dc8c <__assert_fail@plt+0x1b4b4>
   2dc14:	ldr	r0, [r4, #8]
   2dc18:	ldr	r1, [sp, #56]	; 0x38
   2dc1c:	bl	2db8c <__assert_fail@plt+0x1b3b4>
   2dc20:	cmp	r0, #0
   2dc24:	beq	2dc8c <__assert_fail@plt+0x1b4b4>
   2dc28:	ldrb	r3, [r5]
   2dc2c:	cmp	r3, #0
   2dc30:	moveq	r0, #1
   2dc34:	beq	2dc90 <__assert_fail@plt+0x1b4b8>
   2dc38:	ldr	r0, [sp, #56]	; 0x38
   2dc3c:	bl	2d6a8 <__assert_fail@plt+0x1aed0>
   2dc40:	ldr	r7, [r4, #8]
   2dc44:	ldr	r1, [r4, #16]
   2dc48:	mov	r3, r5
   2dc4c:	str	r6, [sp, #4]
   2dc50:	movw	r2, #36220	; 0x8d7c
   2dc54:	ldr	ip, [r4]
   2dc58:	movt	r2, #5
   2dc5c:	str	r1, [sp]
   2dc60:	mov	r1, #1
   2dc64:	ldr	lr, [r7, #16]
   2dc68:	str	lr, [sp, #8]
   2dc6c:	ldr	lr, [r7, #4]
   2dc70:	str	lr, [sp, #12]
   2dc74:	str	r0, [sp, #16]
   2dc78:	mov	r0, ip
   2dc7c:	bl	125d4 <__fprintf_chk@plt>
   2dc80:	mov	r0, #1
   2dc84:	add	sp, sp, #28
   2dc88:	pop	{r4, r5, r6, r7, pc}
   2dc8c:	mov	r0, #0
   2dc90:	add	sp, sp, #28
   2dc94:	pop	{r4, r5, r6, r7, pc}
   2dc98:	push	{r3, lr}
   2dc9c:	ldr	r3, [r0, #8]
   2dca0:	cmp	r3, #0
   2dca4:	beq	2dcb0 <__assert_fail@plt+0x1b4d8>
   2dca8:	mov	r0, #1
   2dcac:	pop	{r3, pc}
   2dcb0:	bl	127e4 <__assert_fail@plt+0xc>
   2dcb4:	push	{r4, lr}
   2dcb8:	sub	sp, sp, #8
   2dcbc:	ldr	ip, [r0, #8]
   2dcc0:	mov	r4, r0
   2dcc4:	ldr	lr, [r0, #16]
   2dcc8:	movw	r2, #36312	; 0x8dd8
   2dccc:	ldr	r0, [r0]
   2dcd0:	movt	r2, #5
   2dcd4:	ldr	r3, [ip, #4]
   2dcd8:	mov	r1, #1
   2dcdc:	str	lr, [sp]
   2dce0:	ldr	ip, [ip, #16]
   2dce4:	str	ip, [sp, #4]
   2dce8:	bl	125d4 <__fprintf_chk@plt>
   2dcec:	ldr	r3, [r4, #8]
   2dcf0:	ldr	r2, [r3, #24]
   2dcf4:	cmp	r2, #0
   2dcf8:	bne	2dd20 <__assert_fail@plt+0x1b548>
   2dcfc:	mov	r0, #10
   2dd00:	ldr	r1, [r4]
   2dd04:	bl	12694 <fputc@plt>
   2dd08:	ldr	r3, [r4, #8]
   2dd0c:	cmp	r3, #0
   2dd10:	beq	2dd48 <__assert_fail@plt+0x1b570>
   2dd14:	mov	r0, #1
   2dd18:	add	sp, sp, #8
   2dd1c:	pop	{r4, pc}
   2dd20:	ldr	r3, [r3, #20]
   2dd24:	mov	r1, #1
   2dd28:	ldr	r0, [r4]
   2dd2c:	movw	r2, #36340	; 0x8df4
   2dd30:	movt	r2, #5
   2dd34:	bl	125d4 <__fprintf_chk@plt>
   2dd38:	ldr	r3, [r4, #8]
   2dd3c:	ldr	r0, [r3, #20]
   2dd40:	bl	121f0 <free@plt>
   2dd44:	b	2dcfc <__assert_fail@plt+0x1b524>
   2dd48:	bl	127e4 <__assert_fail@plt+0xc>
   2dd4c:	ldr	r3, [r0, #8]
   2dd50:	push	{r4, lr}
   2dd54:	cmp	r3, #0
   2dd58:	beq	2ddf4 <__assert_fail@plt+0x1b61c>
   2dd5c:	ldr	r2, [r0, #4]
   2dd60:	cmp	r2, #1
   2dd64:	bls	2ddd8 <__assert_fail@plt+0x1b600>
   2dd68:	ldr	r4, [r3, #4]
   2dd6c:	sub	r2, r2, #2
   2dd70:	str	r2, [r0, #4]
   2dd74:	mov	r0, r4
   2dd78:	bl	124e4 <strlen@plt>
   2dd7c:	sub	r3, r0, #2
   2dd80:	add	r2, r4, r3
   2dd84:	ldrb	r1, [r4, r3]
   2dd88:	cmp	r1, #32
   2dd8c:	bne	2ddbc <__assert_fail@plt+0x1b5e4>
   2dd90:	ldrb	r1, [r2, #1]
   2dd94:	cmp	r1, #32
   2dd98:	bne	2ddbc <__assert_fail@plt+0x1b5e4>
   2dd9c:	ldrb	r1, [r2, #2]
   2dda0:	cmp	r1, #0
   2dda4:	bne	2ddbc <__assert_fail@plt+0x1b5e4>
   2dda8:	mov	ip, #125	; 0x7d
   2ddac:	mov	r0, #1
   2ddb0:	strb	ip, [r4, r3]
   2ddb4:	strb	r1, [r2, #1]
   2ddb8:	pop	{r4, pc}
   2ddbc:	movw	r0, #36376	; 0x8e18
   2ddc0:	movw	r1, #36044	; 0x8ccc
   2ddc4:	movt	r0, #5
   2ddc8:	movt	r1, #5
   2ddcc:	movw	r2, #1204	; 0x4b4
   2ddd0:	ldr	r3, [pc, #56]	; 2de10 <__assert_fail@plt+0x1b638>
   2ddd4:	bl	127d8 <__assert_fail@plt>
   2ddd8:	movw	r0, #36356	; 0x8e04
   2dddc:	movw	r1, #36044	; 0x8ccc
   2dde0:	movt	r0, #5
   2dde4:	movt	r1, #5
   2dde8:	movw	r2, #1198	; 0x4ae
   2ddec:	ldr	r3, [pc, #28]	; 2de10 <__assert_fail@plt+0x1b638>
   2ddf0:	bl	127d8 <__assert_fail@plt>
   2ddf4:	movw	r0, #36016	; 0x8cb0
   2ddf8:	movw	r1, #36044	; 0x8ccc
   2ddfc:	movt	r0, #5
   2de00:	movt	r1, #5
   2de04:	movw	r2, #1197	; 0x4ad
   2de08:	ldr	r3, [pc]	; 2de10 <__assert_fail@plt+0x1b638>
   2de0c:	bl	127d8 <__assert_fail@plt>
   2de10:	andeq	r8, r5, r0, lsl #19
   2de14:	b	2dd4c <__assert_fail@plt+0x1b574>
   2de18:	push	{r4, r5, r6, r7, lr}
   2de1c:	mov	r4, r0
   2de20:	ldr	r5, [r0]
   2de24:	sub	sp, sp, #12
   2de28:	mov	r6, r1
   2de2c:	cmp	r5, #0
   2de30:	beq	2de9c <__assert_fail@plt+0x1b6c4>
   2de34:	mov	r0, r1
   2de38:	bl	124e4 <strlen@plt>
   2de3c:	mov	r7, r0
   2de40:	ldr	r0, [r5, #4]
   2de44:	bl	124e4 <strlen@plt>
   2de48:	add	r0, r7, r0
   2de4c:	add	r0, r0, #1
   2de50:	bl	12358 <xmalloc@plt>
   2de54:	ldr	ip, [r4]
   2de58:	str	r6, [sp]
   2de5c:	mov	r1, #1
   2de60:	mvn	r2, #0
   2de64:	movw	r3, #10144	; 0x27a0
   2de68:	ldr	ip, [ip, #4]
   2de6c:	movt	r3, #5
   2de70:	str	ip, [sp, #4]
   2de74:	mov	r5, r0
   2de78:	bl	12568 <__sprintf_chk@plt>
   2de7c:	ldr	r3, [r4]
   2de80:	ldr	r0, [r3, #4]
   2de84:	bl	121f0 <free@plt>
   2de88:	ldr	r3, [r4]
   2de8c:	mov	r0, #1
   2de90:	str	r5, [r3, #4]
   2de94:	add	sp, sp, #12
   2de98:	pop	{r4, r5, r6, r7, pc}
   2de9c:	movw	r0, #36016	; 0x8cb0
   2dea0:	movw	r1, #36044	; 0x8ccc
   2dea4:	movt	r0, #5
   2dea8:	movt	r1, #5
   2deac:	mov	r2, #360	; 0x168
   2deb0:	ldr	r3, [pc]	; 2deb8 <__assert_fail@plt+0x1b6e0>
   2deb4:	bl	127d8 <__assert_fail@plt>
   2deb8:	muleq	r5, r4, r9
   2debc:	push	{r4, r5, r6, r7, r8, lr}
   2dec0:	subs	r5, r1, #0
   2dec4:	mov	r6, r0
   2dec8:	beq	2df20 <__assert_fail@plt+0x1b748>
   2decc:	ldr	r4, [r0]
   2ded0:	cmp	r4, #0
   2ded4:	beq	2df28 <__assert_fail@plt+0x1b750>
   2ded8:	ldr	r8, [r4, #4]
   2dedc:	mov	r0, r8
   2dee0:	bl	124e4 <strlen@plt>
   2dee4:	mov	r7, r0
   2dee8:	mov	r0, r5
   2deec:	bl	124e4 <strlen@plt>
   2def0:	add	r1, r7, r0
   2def4:	mov	r0, r8
   2def8:	add	r1, r1, #1
   2defc:	bl	122c8 <xrealloc@plt>
   2df00:	mov	r1, r5
   2df04:	str	r0, [r4, #4]
   2df08:	ldr	r3, [r6]
   2df0c:	ldr	r0, [r3, #4]
   2df10:	add	r0, r0, r7
   2df14:	bl	12388 <strcpy@plt>
   2df18:	mov	r0, #1
   2df1c:	pop	{r4, r5, r6, r7, r8, pc}
   2df20:	mov	r0, r5
   2df24:	pop	{r4, r5, r6, r7, r8, pc}
   2df28:	movw	r0, #36016	; 0x8cb0
   2df2c:	movw	r1, #36044	; 0x8ccc
   2df30:	movt	r0, #5
   2df34:	movt	r1, #5
   2df38:	mov	r2, #380	; 0x17c
   2df3c:	ldr	r3, [pc]	; 2df44 <__assert_fail@plt+0x1b76c>
   2df40:	bl	127d8 <__assert_fail@plt>
   2df44:	andeq	r8, r5, r4, lsr #19
   2df48:	push	{r3, r4, r5, r6, r7, lr}
   2df4c:	mov	r4, r0
   2df50:	ldr	r3, [r0, #8]
   2df54:	mov	r7, r1
   2df58:	cmp	r3, #0
   2df5c:	beq	2e0ac <__assert_fail@plt+0x1b8d4>
   2df60:	ldr	r5, [r3, #4]
   2df64:	mov	r1, #124	; 0x7c
   2df68:	mov	r0, r5
   2df6c:	bl	124fc <strchr@plt>
   2df70:	subs	r6, r0, #0
   2df74:	beq	2dfe8 <__assert_fail@plt+0x1b810>
   2df78:	mov	r0, r5
   2df7c:	bl	124e4 <strlen@plt>
   2df80:	mov	r5, r0
   2df84:	mov	r0, r7
   2df88:	bl	124e4 <strlen@plt>
   2df8c:	add	r0, r0, r5
   2df90:	bl	12358 <xmalloc@plt>
   2df94:	ldr	r3, [r4, #8]
   2df98:	ldr	r1, [r3, #4]
   2df9c:	rsb	r2, r1, r6
   2dfa0:	mov	r5, r0
   2dfa4:	bl	1222c <memcpy@plt>
   2dfa8:	ldr	r3, [r4, #8]
   2dfac:	mov	r1, r7
   2dfb0:	ldr	r0, [r3, #4]
   2dfb4:	rsb	r0, r0, r6
   2dfb8:	add	r0, r5, r0
   2dfbc:	bl	12388 <strcpy@plt>
   2dfc0:	add	r1, r6, #1
   2dfc4:	mov	r0, r5
   2dfc8:	bl	1234c <strcat@plt>
   2dfcc:	ldr	r3, [r4, #8]
   2dfd0:	ldr	r0, [r3, #4]
   2dfd4:	bl	121f0 <free@plt>
   2dfd8:	ldr	r3, [r4, #8]
   2dfdc:	mov	r0, #1
   2dfe0:	str	r5, [r3, #4]
   2dfe4:	pop	{r3, r4, r5, r6, r7, pc}
   2dfe8:	mov	r0, r7
   2dfec:	mov	r1, #124	; 0x7c
   2dff0:	bl	124fc <strchr@plt>
   2dff4:	cmp	r0, #0
   2dff8:	beq	2e04c <__assert_fail@plt+0x1b874>
   2dffc:	mov	r0, r5
   2e000:	mov	r1, #123	; 0x7b
   2e004:	bl	124fc <strchr@plt>
   2e008:	cmp	r0, #0
   2e00c:	beq	2e060 <__assert_fail@plt+0x1b888>
   2e010:	add	r5, r4, #8
   2e014:	movw	r1, #36444	; 0x8e5c
   2e018:	movt	r1, #5
   2e01c:	mov	r0, r5
   2e020:	bl	2de18 <__assert_fail@plt+0x1b640>
   2e024:	cmp	r0, #0
   2e028:	bne	2e034 <__assert_fail@plt+0x1b85c>
   2e02c:	mov	r0, #0
   2e030:	pop	{r3, r4, r5, r6, r7, pc}
   2e034:	mov	r0, r5
   2e038:	movw	r1, #42900	; 0xa794
   2e03c:	movt	r1, #5
   2e040:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e044:	cmp	r0, #0
   2e048:	beq	2e02c <__assert_fail@plt+0x1b854>
   2e04c:	ldrb	r3, [r7]
   2e050:	cmp	r3, #0
   2e054:	bne	2e078 <__assert_fail@plt+0x1b8a0>
   2e058:	mov	r0, #1
   2e05c:	pop	{r3, r4, r5, r6, r7, pc}
   2e060:	mov	r0, r5
   2e064:	mov	r1, #40	; 0x28
   2e068:	bl	124fc <strchr@plt>
   2e06c:	cmp	r0, #0
   2e070:	bne	2e010 <__assert_fail@plt+0x1b838>
   2e074:	b	2e04c <__assert_fail@plt+0x1b874>
   2e078:	add	r4, r4, #8
   2e07c:	movw	r1, #10140	; 0x279c
   2e080:	movt	r1, #5
   2e084:	mov	r0, r4
   2e088:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e08c:	cmp	r0, #0
   2e090:	beq	2e02c <__assert_fail@plt+0x1b854>
   2e094:	mov	r0, r4
   2e098:	mov	r1, r7
   2e09c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e0a0:	adds	r0, r0, #0
   2e0a4:	movne	r0, #1
   2e0a8:	pop	{r3, r4, r5, r6, r7, pc}
   2e0ac:	movw	r0, #36016	; 0x8cb0
   2e0b0:	movw	r1, #36044	; 0x8ccc
   2e0b4:	movt	r0, #5
   2e0b8:	movt	r1, #5
   2e0bc:	movw	r2, #419	; 0x1a3
   2e0c0:	ldr	r3, [pc]	; 2e0c8 <__assert_fail@plt+0x1b8f0>
   2e0c4:	bl	127d8 <__assert_fail@plt>
   2e0c8:			; <UNDEFINED> instruction: 0x000589b0
   2e0cc:	movw	r1, #36420	; 0x8e44
   2e0d0:	movt	r1, #5
   2e0d4:	b	2df48 <__assert_fail@plt+0x1b770>
   2e0d8:	movw	r1, #36432	; 0x8e50
   2e0dc:	movt	r1, #5
   2e0e0:	b	2df48 <__assert_fail@plt+0x1b770>
   2e0e4:	ldr	r3, [r0, #8]
   2e0e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0ec:	cmp	r3, #0
   2e0f0:	sub	sp, sp, #12
   2e0f4:	mov	r7, r0
   2e0f8:	mov	r9, r1
   2e0fc:	mov	fp, r2
   2e100:	beq	2e2f8 <__assert_fail@plt+0x1bb20>
   2e104:	cmp	r1, #0
   2e108:	ble	2e288 <__assert_fail@plt+0x1bab0>
   2e10c:	lsl	r6, r1, #2
   2e110:	add	r8, r0, #8
   2e114:	sub	r4, r1, #1
   2e118:	mov	r5, #10
   2e11c:	mov	r0, r6
   2e120:	bl	12358 <xmalloc@plt>
   2e124:	add	r6, r0, r6
   2e128:	mov	sl, r0
   2e12c:	movw	r1, #11856	; 0x2e50
   2e130:	mov	r0, r7
   2e134:	movt	r1, #5
   2e138:	bl	2df48 <__assert_fail@plt+0x1b770>
   2e13c:	subs	r3, r0, #0
   2e140:	beq	2e26c <__assert_fail@plt+0x1ba94>
   2e144:	mov	r0, r8
   2e148:	bl	2d81c <__assert_fail@plt+0x1b044>
   2e14c:	cmp	r0, #0
   2e150:	mov	r3, r0
   2e154:	str	r0, [r6, #-4]!
   2e158:	beq	2e26c <__assert_fail@plt+0x1ba94>
   2e15c:	bl	124e4 <strlen@plt>
   2e160:	sub	r4, r4, #1
   2e164:	cmn	r4, #1
   2e168:	add	r0, r0, #2
   2e16c:	add	r5, r5, r0
   2e170:	bne	2e12c <__assert_fail@plt+0x1b954>
   2e174:	cmp	fp, #0
   2e178:	movw	r8, #10648	; 0x2998
   2e17c:	addne	r5, r5, #5
   2e180:	movt	r8, #5
   2e184:	sub	r6, sl, #4
   2e188:	mov	r4, #0
   2e18c:	mov	r0, r5
   2e190:	bl	12358 <xmalloc@plt>
   2e194:	movw	r3, #36440	; 0x8e58
   2e198:	movt	r3, #5
   2e19c:	mov	r5, r0
   2e1a0:	ldr	r0, [r3]
   2e1a4:	ldrh	r3, [r3, #4]
   2e1a8:	str	r0, [r5]
   2e1ac:	strh	r3, [r5, #4]
   2e1b0:	b	2e1c8 <__assert_fail@plt+0x1b9f0>
   2e1b4:	cmp	r4, #0
   2e1b8:	ldrhne	r2, [r8]
   2e1bc:	ldrbne	r3, [r8, #2]
   2e1c0:	strhne	r2, [r0]
   2e1c4:	strbne	r3, [r0, #2]
   2e1c8:	mov	r0, r5
   2e1cc:	add	r4, r4, #1
   2e1d0:	bl	124e4 <strlen@plt>
   2e1d4:	ldr	r1, [r6, #4]!
   2e1d8:	add	r0, r5, r0
   2e1dc:	bl	12274 <stpcpy@plt>
   2e1e0:	cmp	r4, r9
   2e1e4:	bne	2e1b4 <__assert_fail@plt+0x1b9dc>
   2e1e8:	cmp	fp, #0
   2e1ec:	beq	2e2c4 <__assert_fail@plt+0x1baec>
   2e1f0:	movw	r3, #10648	; 0x2998
   2e1f4:	movt	r3, #5
   2e1f8:	ldrh	r2, [r3]
   2e1fc:	ldrb	r3, [r3, #2]
   2e200:	strh	r2, [r0]
   2e204:	strb	r3, [r0, #2]
   2e208:	mov	r0, r5
   2e20c:	bl	124e4 <strlen@plt>
   2e210:	movw	r3, #36464	; 0x8e70
   2e214:	movt	r3, #5
   2e218:	cmp	r9, #0
   2e21c:	mov	r2, r0
   2e220:	ldr	r0, [r3]
   2e224:	str	r0, [r5, r2]
   2e228:	bne	2e2c4 <__assert_fail@plt+0x1baec>
   2e22c:	mov	r0, r5
   2e230:	bl	124e4 <strlen@plt>
   2e234:	movw	r3, #42900	; 0xa794
   2e238:	movt	r3, #5
   2e23c:	mov	r1, r5
   2e240:	ldrh	r3, [r3]
   2e244:	strh	r3, [r5, r0]
   2e248:	mov	r0, r7
   2e24c:	bl	2df48 <__assert_fail@plt+0x1b770>
   2e250:	cmp	r0, #0
   2e254:	beq	2e264 <__assert_fail@plt+0x1ba8c>
   2e258:	mov	r0, r5
   2e25c:	bl	121f0 <free@plt>
   2e260:	mov	r0, #1
   2e264:	add	sp, sp, #12
   2e268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e26c:	mov	r0, sl
   2e270:	str	r3, [sp, #4]
   2e274:	bl	121f0 <free@plt>
   2e278:	ldr	r3, [sp, #4]
   2e27c:	mov	r0, r3
   2e280:	add	sp, sp, #12
   2e284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e288:	mov	r0, #25
   2e28c:	bl	12358 <xmalloc@plt>
   2e290:	movw	r3, #36440	; 0x8e58
   2e294:	movt	r3, #5
   2e298:	cmp	r9, #0
   2e29c:	mov	r5, r0
   2e2a0:	ldr	r0, [r3]
   2e2a4:	ldrh	r3, [r3, #4]
   2e2a8:	str	r0, [r5]
   2e2ac:	strh	r3, [r5, #4]
   2e2b0:	bne	2e2d0 <__assert_fail@plt+0x1baf8>
   2e2b4:	cmp	fp, #0
   2e2b8:	beq	2e22c <__assert_fail@plt+0x1ba54>
   2e2bc:	mov	sl, r9
   2e2c0:	b	2e208 <__assert_fail@plt+0x1ba30>
   2e2c4:	mov	r0, sl
   2e2c8:	bl	121f0 <free@plt>
   2e2cc:	b	2e22c <__assert_fail@plt+0x1ba54>
   2e2d0:	movw	r3, #36448	; 0x8e60
   2e2d4:	movt	r3, #5
   2e2d8:	add	lr, r5, #5
   2e2dc:	ldm	r3!, {r0, r1, r2}
   2e2e0:	ldrh	ip, [r3]
   2e2e4:	str	r0, [r5, #5]
   2e2e8:	str	r1, [lr, #4]
   2e2ec:	strh	ip, [lr, #12]
   2e2f0:	str	r2, [lr, #8]
   2e2f4:	b	2e22c <__assert_fail@plt+0x1ba54>
   2e2f8:	movw	r0, #36016	; 0x8cb0
   2e2fc:	movw	r1, #36044	; 0x8ccc
   2e300:	movt	r0, #5
   2e304:	movt	r1, #5
   2e308:	movw	r2, #717	; 0x2cd
   2e30c:	ldr	r3, [pc]	; 2e314 <__assert_fail@plt+0x1bb3c>
   2e310:	bl	127d8 <__assert_fail@plt>
   2e314:	andeq	r8, r5, r0, asr #19
   2e318:	push	{r4, r5, r6, r7, r8, r9, lr}
   2e31c:	mov	r4, r0
   2e320:	sub	sp, sp, #20
   2e324:	mov	r0, r1
   2e328:	mov	r5, r1
   2e32c:	mov	r7, r3
   2e330:	bl	124e4 <strlen@plt>
   2e334:	ldr	r2, [r4, #8]
   2e338:	ldr	r2, [r2]
   2e33c:	mov	r6, r0
   2e340:	ldr	r0, [r2, #4]
   2e344:	bl	124e4 <strlen@plt>
   2e348:	add	r0, r6, r0
   2e34c:	add	r0, r0, #3
   2e350:	bl	12358 <xmalloc@plt>
   2e354:	subs	r6, r0, #0
   2e358:	moveq	r0, r6
   2e35c:	beq	2e430 <__assert_fail@plt+0x1bc58>
   2e360:	ldr	ip, [r4, #8]
   2e364:	mov	r1, #1
   2e368:	mvn	r2, #0
   2e36c:	movw	r3, #36468	; 0x8e74
   2e370:	movt	r3, #5
   2e374:	ldr	ip, [ip]
   2e378:	ldr	ip, [ip, #4]
   2e37c:	str	r5, [sp, #4]
   2e380:	str	ip, [sp]
   2e384:	bl	12568 <__sprintf_chk@plt>
   2e388:	mov	r0, r4
   2e38c:	mov	r1, r6
   2e390:	bl	2df48 <__assert_fail@plt+0x1b770>
   2e394:	subs	r8, r0, #0
   2e398:	beq	2e438 <__assert_fail@plt+0x1bc60>
   2e39c:	add	r8, r4, #8
   2e3a0:	movw	r1, #36476	; 0x8e7c
   2e3a4:	movt	r1, #5
   2e3a8:	mov	r0, r8
   2e3ac:	bl	2de18 <__assert_fail@plt+0x1b640>
   2e3b0:	subs	r9, r0, #0
   2e3b4:	beq	2e454 <__assert_fail@plt+0x1bc7c>
   2e3b8:	mov	r0, r8
   2e3bc:	bl	2d81c <__assert_fail@plt+0x1b044>
   2e3c0:	subs	r8, r0, #0
   2e3c4:	beq	2e438 <__assert_fail@plt+0x1bc60>
   2e3c8:	ldr	r0, [r4, #8]
   2e3cc:	mov	r1, r7
   2e3d0:	bl	2db8c <__assert_fail@plt+0x1b3b4>
   2e3d4:	subs	r9, r0, #0
   2e3d8:	beq	2e44c <__assert_fail@plt+0x1bc74>
   2e3dc:	mov	r0, r7
   2e3e0:	bl	2d6a8 <__assert_fail@plt+0x1aed0>
   2e3e4:	ldr	r1, [r4, #16]
   2e3e8:	str	r8, [sp, #4]
   2e3ec:	mov	r3, r5
   2e3f0:	ldr	ip, [r4]
   2e3f4:	movw	r2, #36484	; 0x8e84
   2e3f8:	str	r1, [sp]
   2e3fc:	movt	r2, #5
   2e400:	ldr	lr, [r4, #8]
   2e404:	mov	r1, #1
   2e408:	ldr	lr, [lr, #4]
   2e40c:	str	lr, [sp, #8]
   2e410:	str	r0, [sp, #12]
   2e414:	mov	r0, ip
   2e418:	bl	125d4 <__fprintf_chk@plt>
   2e41c:	mov	r0, r8
   2e420:	bl	121f0 <free@plt>
   2e424:	mov	r0, r6
   2e428:	bl	121f0 <free@plt>
   2e42c:	mov	r0, #1
   2e430:	add	sp, sp, #20
   2e434:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e438:	mov	r0, r6
   2e43c:	bl	121f0 <free@plt>
   2e440:	mov	r0, r8
   2e444:	add	sp, sp, #20
   2e448:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e44c:	mov	r0, r8
   2e450:	bl	121f0 <free@plt>
   2e454:	mov	r0, r6
   2e458:	bl	121f0 <free@plt>
   2e45c:	mov	r0, r9
   2e460:	add	sp, sp, #20
   2e464:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2e468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e46c:	subs	sl, r1, #0
   2e470:	sub	sp, sp, #20
   2e474:	mov	r7, r2
   2e478:	mov	r8, r0
   2e47c:	moveq	r5, #10
   2e480:	str	r3, [sp, #8]
   2e484:	streq	sl, [sp, #12]
   2e488:	bne	2e628 <__assert_fail@plt+0x1be50>
   2e48c:	cmp	r7, #0
   2e490:	addle	r5, r5, #15
   2e494:	movle	fp, #0
   2e498:	ble	2e50c <__assert_fail@plt+0x1bd34>
   2e49c:	lsl	r6, r7, #2
   2e4a0:	sub	r4, r7, #1
   2e4a4:	add	r9, r8, #8
   2e4a8:	mov	r0, r6
   2e4ac:	bl	12358 <xmalloc@plt>
   2e4b0:	add	r6, r0, r6
   2e4b4:	mov	fp, r0
   2e4b8:	movw	r1, #11856	; 0x2e50
   2e4bc:	mov	r0, r8
   2e4c0:	movt	r1, #5
   2e4c4:	sub	r4, r4, #1
   2e4c8:	bl	2df48 <__assert_fail@plt+0x1b770>
   2e4cc:	subs	r3, r0, #0
   2e4d0:	mov	r0, r9
   2e4d4:	beq	2e6d8 <__assert_fail@plt+0x1bf00>
   2e4d8:	bl	2d81c <__assert_fail@plt+0x1b044>
   2e4dc:	cmp	r0, #0
   2e4e0:	mov	r3, r0
   2e4e4:	str	r0, [r6, #-4]!
   2e4e8:	beq	2e6d8 <__assert_fail@plt+0x1bf00>
   2e4ec:	bl	124e4 <strlen@plt>
   2e4f0:	cmn	r4, #1
   2e4f4:	add	r0, r0, #2
   2e4f8:	add	r5, r5, r0
   2e4fc:	bne	2e4b8 <__assert_fail@plt+0x1bce0>
   2e500:	ldr	r3, [sp, #8]
   2e504:	cmp	r3, #0
   2e508:	addne	r5, r5, #5
   2e50c:	mov	r0, r5
   2e510:	bl	12358 <xmalloc@plt>
   2e514:	cmp	sl, #0
   2e518:	mov	r5, r0
   2e51c:	strbeq	sl, [r0]
   2e520:	bne	2e708 <__assert_fail@plt+0x1bf30>
   2e524:	mov	r0, r5
   2e528:	bl	124e4 <strlen@plt>
   2e52c:	movw	r3, #36556	; 0x8ecc
   2e530:	movt	r3, #5
   2e534:	cmp	r7, #0
   2e538:	mov	r2, r0
   2e53c:	add	r1, r5, r0
   2e540:	ldr	r0, [r3]
   2e544:	ldrh	r3, [r3, #4]
   2e548:	str	r0, [r5, r2]
   2e54c:	strh	r3, [r1, #4]
   2e550:	blt	2e714 <__assert_fail@plt+0x1bf3c>
   2e554:	beq	2e740 <__assert_fail@plt+0x1bf68>
   2e558:	movw	r9, #10648	; 0x2998
   2e55c:	sub	r6, fp, #4
   2e560:	movt	r9, #5
   2e564:	mov	r4, #0
   2e568:	b	2e580 <__assert_fail@plt+0x1bda8>
   2e56c:	cmp	r4, #0
   2e570:	ldrhne	r2, [r9]
   2e574:	ldrbne	r3, [r9, #2]
   2e578:	strhne	r2, [r0]
   2e57c:	strbne	r3, [r0, #2]
   2e580:	mov	r0, r5
   2e584:	add	r4, r4, #1
   2e588:	bl	124e4 <strlen@plt>
   2e58c:	ldr	r1, [r6, #4]!
   2e590:	add	r0, r5, r0
   2e594:	bl	12274 <stpcpy@plt>
   2e598:	cmp	r4, r7
   2e59c:	bne	2e56c <__assert_fail@plt+0x1bd94>
   2e5a0:	ldr	r3, [sp, #8]
   2e5a4:	cmp	r3, #0
   2e5a8:	beq	2e5e0 <__assert_fail@plt+0x1be08>
   2e5ac:	movw	r3, #10648	; 0x2998
   2e5b0:	movt	r3, #5
   2e5b4:	ldrh	r2, [r3]
   2e5b8:	ldrb	r3, [r3, #2]
   2e5bc:	strh	r2, [r0]
   2e5c0:	strb	r3, [r0, #2]
   2e5c4:	mov	r0, r5
   2e5c8:	bl	124e4 <strlen@plt>
   2e5cc:	movw	r3, #36464	; 0x8e70
   2e5d0:	movt	r3, #5
   2e5d4:	mov	r2, r0
   2e5d8:	ldr	r0, [r3]
   2e5dc:	str	r0, [r5, r2]
   2e5e0:	cmp	r7, #0
   2e5e4:	beq	2e5f0 <__assert_fail@plt+0x1be18>
   2e5e8:	mov	r0, fp
   2e5ec:	bl	121f0 <free@plt>
   2e5f0:	mov	r0, r5
   2e5f4:	bl	124e4 <strlen@plt>
   2e5f8:	movw	r3, #42900	; 0xa794
   2e5fc:	movt	r3, #5
   2e600:	mov	r1, r5
   2e604:	ldrh	r3, [r3]
   2e608:	strh	r3, [r5, r0]
   2e60c:	mov	r0, r8
   2e610:	bl	2df48 <__assert_fail@plt+0x1b770>
   2e614:	cmp	r0, #0
   2e618:	bne	2e6f4 <__assert_fail@plt+0x1bf1c>
   2e61c:	mov	r0, #0
   2e620:	add	sp, sp, #20
   2e624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e628:	movw	r1, #11856	; 0x2e50
   2e62c:	movt	r1, #5
   2e630:	bl	2df48 <__assert_fail@plt+0x1b770>
   2e634:	cmp	r0, #0
   2e638:	beq	2e61c <__assert_fail@plt+0x1be44>
   2e63c:	add	r0, r8, #8
   2e640:	bl	2d81c <__assert_fail@plt+0x1b044>
   2e644:	subs	r3, r0, #0
   2e648:	str	r3, [sp, #12]
   2e64c:	beq	2e61c <__assert_fail@plt+0x1be44>
   2e650:	movw	r1, #36532	; 0x8eb4
   2e654:	mov	r2, #6
   2e658:	movt	r1, #5
   2e65c:	bl	12784 <strncmp@plt>
   2e660:	cmp	r0, #0
   2e664:	bne	2e688 <__assert_fail@plt+0x1beb0>
   2e668:	ldr	r3, [sp, #12]
   2e66c:	mov	r1, #32
   2e670:	add	r4, r3, #6
   2e674:	mov	r0, r4
   2e678:	bl	124fc <strchr@plt>
   2e67c:	cmp	r0, #0
   2e680:	streq	r4, [sp, #12]
   2e684:	beq	2e6c8 <__assert_fail@plt+0x1bef0>
   2e688:	movw	r1, #36540	; 0x8ebc
   2e68c:	ldr	r0, [sp, #12]
   2e690:	movt	r1, #5
   2e694:	mov	r2, #12
   2e698:	bl	12784 <strncmp@plt>
   2e69c:	cmp	r0, #0
   2e6a0:	bne	2e6c8 <__assert_fail@plt+0x1bef0>
   2e6a4:	ldr	r3, [sp, #12]
   2e6a8:	mov	r1, #32
   2e6ac:	add	r4, r3, #12
   2e6b0:	mov	r0, r4
   2e6b4:	bl	124fc <strchr@plt>
   2e6b8:	ldr	r3, [sp, #12]
   2e6bc:	cmp	r0, #0
   2e6c0:	moveq	r3, r4
   2e6c4:	str	r3, [sp, #12]
   2e6c8:	ldr	r0, [sp, #12]
   2e6cc:	bl	124e4 <strlen@plt>
   2e6d0:	add	r5, r0, #10
   2e6d4:	b	2e48c <__assert_fail@plt+0x1bcb4>
   2e6d8:	mov	r0, fp
   2e6dc:	str	r3, [sp, #4]
   2e6e0:	bl	121f0 <free@plt>
   2e6e4:	ldr	r3, [sp, #4]
   2e6e8:	mov	r0, r3
   2e6ec:	add	sp, sp, #20
   2e6f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e6f4:	mov	r0, r5
   2e6f8:	bl	121f0 <free@plt>
   2e6fc:	mov	r0, #1
   2e700:	add	sp, sp, #20
   2e704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e708:	ldr	r1, [sp, #12]
   2e70c:	bl	12388 <strcpy@plt>
   2e710:	b	2e524 <__assert_fail@plt+0x1bd4c>
   2e714:	movw	r3, #36448	; 0x8e60
   2e718:	movt	r3, #5
   2e71c:	add	lr, r2, #5
   2e720:	ldm	r3!, {r0, r1, r2}
   2e724:	add	ip, r5, lr
   2e728:	ldrh	r3, [r3]
   2e72c:	str	r0, [r5, lr]
   2e730:	str	r1, [ip, #4]
   2e734:	strh	r3, [ip, #12]
   2e738:	str	r2, [ip, #8]
   2e73c:	b	2e5f0 <__assert_fail@plt+0x1be18>
   2e740:	ldr	r3, [sp, #8]
   2e744:	cmp	r3, #0
   2e748:	bne	2e5c4 <__assert_fail@plt+0x1bdec>
   2e74c:	b	2e5e0 <__assert_fail@plt+0x1be08>
   2e750:	ldr	r3, [r0, #4]
   2e754:	push	{r4, r5, r6, lr}
   2e758:	cmp	r3, #0
   2e75c:	mov	r5, r0
   2e760:	addne	r6, r0, #8
   2e764:	movne	r4, #0
   2e768:	beq	2e794 <__assert_fail@plt+0x1bfbc>
   2e76c:	movw	r1, #10140	; 0x279c
   2e770:	mov	r0, r6
   2e774:	movt	r1, #5
   2e778:	add	r4, r4, #1
   2e77c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e780:	cmp	r0, #0
   2e784:	popeq	{r4, r5, r6, pc}
   2e788:	ldr	r3, [r5, #4]
   2e78c:	cmp	r3, r4
   2e790:	bhi	2e76c <__assert_fail@plt+0x1bf94>
   2e794:	mov	r0, #1
   2e798:	pop	{r4, r5, r6, pc}
   2e79c:	ldr	r3, [r0, #8]
   2e7a0:	push	{r4, r5, r6, r7, r8, lr}
   2e7a4:	cmp	r3, #0
   2e7a8:	mov	r5, r0
   2e7ac:	mov	r4, r1
   2e7b0:	beq	2e890 <__assert_fail@plt+0x1c0b8>
   2e7b4:	ldr	r2, [r3, #8]
   2e7b8:	cmp	r2, r1
   2e7bc:	beq	2e884 <__assert_fail@plt+0x1c0ac>
   2e7c0:	cmp	r1, #3
   2e7c4:	ldrls	pc, [pc, r1, lsl #2]
   2e7c8:	b	2e88c <__assert_fail@plt+0x1c0b4>
   2e7cc:	andeq	lr, r2, r8, ror r8
   2e7d0:	andeq	lr, r2, r0, ror #16
   2e7d4:	ldrdeq	lr, [r2], -ip
   2e7d8:	andeq	lr, r2, ip, ror #16
   2e7dc:	movw	r6, #12512	; 0x30e0
   2e7e0:	movt	r6, #5
   2e7e4:	ldr	r7, [r3, #4]
   2e7e8:	mov	r0, r7
   2e7ec:	bl	124e4 <strlen@plt>
   2e7f0:	sub	r0, r0, #1
   2e7f4:	ldrb	r2, [r7, r0]
   2e7f8:	cmp	r2, #32
   2e7fc:	bne	2e8ac <__assert_fail@plt+0x1c0d4>
   2e800:	add	r8, r5, #8
   2e804:	mov	r2, #0
   2e808:	mov	r1, r6
   2e80c:	strb	r2, [r7, r0]
   2e810:	mov	r0, r8
   2e814:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e818:	cmp	r0, #0
   2e81c:	bne	2e828 <__assert_fail@plt+0x1c050>
   2e820:	mov	r0, #0
   2e824:	pop	{r4, r5, r6, r7, r8, pc}
   2e828:	mov	r0, r8
   2e82c:	movw	r1, #9912	; 0x26b8
   2e830:	movt	r1, #5
   2e834:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e838:	cmp	r0, #0
   2e83c:	beq	2e820 <__assert_fail@plt+0x1c048>
   2e840:	mov	r0, r5
   2e844:	bl	2e750 <__assert_fail@plt+0x1bf78>
   2e848:	cmp	r0, #0
   2e84c:	beq	2e820 <__assert_fail@plt+0x1c048>
   2e850:	ldr	r3, [r5, #8]
   2e854:	mov	r0, #1
   2e858:	str	r4, [r3, #8]
   2e85c:	pop	{r4, r5, r6, r7, r8, pc}
   2e860:	movw	r6, #35980	; 0x8c8c
   2e864:	movt	r6, #5
   2e868:	b	2e7e4 <__assert_fail@plt+0x1c00c>
   2e86c:	movw	r6, #35992	; 0x8c98
   2e870:	movt	r6, #5
   2e874:	b	2e7e4 <__assert_fail@plt+0x1c00c>
   2e878:	movw	r6, #35972	; 0x8c84
   2e87c:	movt	r6, #5
   2e880:	b	2e7e4 <__assert_fail@plt+0x1c00c>
   2e884:	mov	r0, #1
   2e888:	pop	{r4, r5, r6, r7, r8, pc}
   2e88c:	bl	12790 <abort@plt>
   2e890:	movw	r0, #36016	; 0x8cb0
   2e894:	movw	r1, #36044	; 0x8ccc
   2e898:	movt	r0, #5
   2e89c:	movt	r1, #5
   2e8a0:	movw	r2, #1105	; 0x451
   2e8a4:	ldr	r3, [pc, #28]	; 2e8c8 <__assert_fail@plt+0x1c0f0>
   2e8a8:	bl	127d8 <__assert_fail@plt>
   2e8ac:	movw	r0, #36564	; 0x8ed4
   2e8b0:	movw	r1, #36044	; 0x8ccc
   2e8b4:	movt	r0, #5
   2e8b8:	movt	r1, #5
   2e8bc:	movw	r2, #1134	; 0x46e
   2e8c0:	ldr	r3, [pc]	; 2e8c8 <__assert_fail@plt+0x1c0f0>
   2e8c4:	bl	127d8 <__assert_fail@plt>
   2e8c8:	ldrdeq	r8, [r5], -r4
   2e8cc:	push	{r4, r5, r6, r7, r8, lr}
   2e8d0:	mov	r4, r0
   2e8d4:	ldr	r0, [r0, #8]
   2e8d8:	mov	r8, r1
   2e8dc:	mov	r7, r2
   2e8e0:	mov	r6, r3
   2e8e4:	cmp	r0, #0
   2e8e8:	beq	2ea20 <__assert_fail@plt+0x1c248>
   2e8ec:	ldr	r0, [r0]
   2e8f0:	cmp	r0, #0
   2e8f4:	beq	2ea58 <__assert_fail@plt+0x1c280>
   2e8f8:	ldr	r0, [r0, #12]
   2e8fc:	cmp	r0, #0
   2e900:	beq	2ea3c <__assert_fail@plt+0x1c264>
   2e904:	ldr	r3, [sp, #24]
   2e908:	add	r5, r4, #8
   2e90c:	cmp	r3, #0
   2e910:	bne	2ea00 <__assert_fail@plt+0x1c228>
   2e914:	cmp	r6, #0
   2e918:	beq	2e934 <__assert_fail@plt+0x1c15c>
   2e91c:	movw	r1, #36676	; 0x8f44
   2e920:	mov	r0, r5
   2e924:	movt	r1, #5
   2e928:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e92c:	cmp	r0, #0
   2e930:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e934:	movw	r1, #36476	; 0x8e7c
   2e938:	mov	r0, r5
   2e93c:	movt	r1, #5
   2e940:	bl	2de18 <__assert_fail@plt+0x1b640>
   2e944:	cmp	r0, #0
   2e948:	bne	2e954 <__assert_fail@plt+0x1c17c>
   2e94c:	mov	r0, #0
   2e950:	pop	{r4, r5, r6, r7, r8, pc}
   2e954:	ldr	r3, [r4, #8]
   2e958:	mov	r0, r4
   2e95c:	ldr	r3, [r3]
   2e960:	ldr	r1, [r3, #12]
   2e964:	bl	2df48 <__assert_fail@plt+0x1b770>
   2e968:	cmp	r0, #0
   2e96c:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e970:	mov	r0, r5
   2e974:	bl	2d81c <__assert_fail@plt+0x1b044>
   2e978:	subs	r6, r0, #0
   2e97c:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e980:	mov	r1, r7
   2e984:	mov	r0, r4
   2e988:	bl	2e79c <__assert_fail@plt+0x1bfc4>
   2e98c:	cmp	r0, #0
   2e990:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e994:	mov	r1, r6
   2e998:	mov	r0, r5
   2e99c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e9a0:	cmp	r0, #0
   2e9a4:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e9a8:	movw	r1, #36684	; 0x8f4c
   2e9ac:	mov	r0, r5
   2e9b0:	movt	r1, #5
   2e9b4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e9b8:	cmp	r0, #0
   2e9bc:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e9c0:	mov	r1, r8
   2e9c4:	mov	r0, r5
   2e9c8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e9cc:	cmp	r0, #0
   2e9d0:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e9d4:	mov	r0, r5
   2e9d8:	movw	r1, #37312	; 0x91c0
   2e9dc:	movt	r1, #5
   2e9e0:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2e9e4:	cmp	r0, #0
   2e9e8:	beq	2e94c <__assert_fail@plt+0x1c174>
   2e9ec:	mov	r0, r4
   2e9f0:	bl	2e750 <__assert_fail@plt+0x1bf78>
   2e9f4:	adds	r0, r0, #0
   2e9f8:	movne	r0, #1
   2e9fc:	pop	{r4, r5, r6, r7, r8, pc}
   2ea00:	movw	r1, #36664	; 0x8f38
   2ea04:	mov	r0, r5
   2ea08:	movt	r1, #5
   2ea0c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ea10:	cmp	r0, #0
   2ea14:	bne	2e914 <__assert_fail@plt+0x1c13c>
   2ea18:	mov	r0, #0
   2ea1c:	pop	{r4, r5, r6, r7, r8, pc}
   2ea20:	movw	r0, #36016	; 0x8cb0
   2ea24:	movw	r1, #36044	; 0x8ccc
   2ea28:	movt	r0, #5
   2ea2c:	movt	r1, #5
   2ea30:	movw	r2, #1527	; 0x5f7
   2ea34:	ldr	r3, [pc, #56]	; 2ea74 <__assert_fail@plt+0x1c29c>
   2ea38:	bl	127d8 <__assert_fail@plt>
   2ea3c:	movw	r0, #36620	; 0x8f0c
   2ea40:	movw	r1, #36044	; 0x8ccc
   2ea44:	movt	r0, #5
   2ea48:	movt	r1, #5
   2ea4c:	movw	r2, #1529	; 0x5f9
   2ea50:	ldr	r3, [pc, #28]	; 2ea74 <__assert_fail@plt+0x1c29c>
   2ea54:	bl	127d8 <__assert_fail@plt>
   2ea58:	movw	r0, #36584	; 0x8ee8
   2ea5c:	movw	r1, #36044	; 0x8ccc
   2ea60:	movt	r0, #5
   2ea64:	movt	r1, #5
   2ea68:	movw	r2, #1528	; 0x5f8
   2ea6c:	ldr	r3, [pc]	; 2ea74 <__assert_fail@plt+0x1c29c>
   2ea70:	bl	127d8 <__assert_fail@plt>
   2ea74:	andeq	r8, r5, r8, ror #19
   2ea78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea7c:	movw	r4, #65176	; 0xfe98
   2ea80:	movt	r4, #6
   2ea84:	mov	fp, r0
   2ea88:	ldr	r0, [r0, #8]
   2ea8c:	mov	r5, r2
   2ea90:	ldr	r2, [r4]
   2ea94:	sub	sp, sp, #44	; 0x2c
   2ea98:	cmp	r0, #0
   2ea9c:	mov	r6, r1
   2eaa0:	mov	r9, r3
   2eaa4:	ldr	r7, [sp, #88]	; 0x58
   2eaa8:	str	r2, [sp, #36]	; 0x24
   2eaac:	ldr	r8, [sp, #92]	; 0x5c
   2eab0:	beq	2ed24 <__assert_fail@plt+0x1c54c>
   2eab4:	ldr	r2, [r0]
   2eab8:	cmp	r2, #0
   2eabc:	beq	2ed08 <__assert_fail@plt+0x1c530>
   2eac0:	ldr	r2, [sp, #80]	; 0x50
   2eac4:	cmp	r2, #0
   2eac8:	bne	2ec74 <__assert_fail@plt+0x1c49c>
   2eacc:	cmp	r9, #0
   2ead0:	bne	2ec94 <__assert_fail@plt+0x1c4bc>
   2ead4:	ldr	r3, [sp, #96]	; 0x60
   2ead8:	cmp	r3, #0
   2eadc:	bne	2eb18 <__assert_fail@plt+0x1c340>
   2eae0:	ldr	r3, [fp, #8]
   2eae4:	mov	r0, fp
   2eae8:	ldr	r3, [r3]
   2eaec:	ldr	r1, [r3, #12]
   2eaf0:	bl	2df48 <__assert_fail@plt+0x1b770>
   2eaf4:	cmp	r0, #0
   2eaf8:	bne	2eb38 <__assert_fail@plt+0x1c360>
   2eafc:	mov	r0, #0
   2eb00:	ldr	r2, [sp, #36]	; 0x24
   2eb04:	ldr	r3, [r4]
   2eb08:	cmp	r2, r3
   2eb0c:	bne	2ed04 <__assert_fail@plt+0x1c52c>
   2eb10:	add	sp, sp, #44	; 0x2c
   2eb14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb18:	ldr	r3, [fp, #8]
   2eb1c:	mov	r0, fp
   2eb20:	ldr	r3, [r3]
   2eb24:	ldr	r3, [r3]
   2eb28:	ldr	r1, [r3, #12]
   2eb2c:	bl	2df48 <__assert_fail@plt+0x1b770>
   2eb30:	cmp	r0, #0
   2eb34:	beq	2eafc <__assert_fail@plt+0x1c324>
   2eb38:	add	r9, fp, #8
   2eb3c:	mov	r0, r9
   2eb40:	bl	2d81c <__assert_fail@plt+0x1b044>
   2eb44:	subs	sl, r0, #0
   2eb48:	beq	2eafc <__assert_fail@plt+0x1c324>
   2eb4c:	ldr	r2, [sp, #96]	; 0x60
   2eb50:	cmp	r2, #0
   2eb54:	beq	2ecb0 <__assert_fail@plt+0x1c4d8>
   2eb58:	mov	r0, r9
   2eb5c:	bl	2d81c <__assert_fail@plt+0x1b044>
   2eb60:	cmp	r0, #0
   2eb64:	str	r0, [sp, #12]
   2eb68:	beq	2eafc <__assert_fail@plt+0x1c324>
   2eb6c:	mov	r1, r5
   2eb70:	mov	r0, fp
   2eb74:	bl	2e79c <__assert_fail@plt+0x1bfc4>
   2eb78:	cmp	r0, #0
   2eb7c:	beq	2eafc <__assert_fail@plt+0x1c324>
   2eb80:	mov	r1, sl
   2eb84:	mov	r0, r9
   2eb88:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2eb8c:	cmp	r0, #0
   2eb90:	beq	2eafc <__assert_fail@plt+0x1c324>
   2eb94:	movw	r1, #36684	; 0x8f4c
   2eb98:	mov	r0, r9
   2eb9c:	movt	r1, #5
   2eba0:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2eba4:	cmp	r0, #0
   2eba8:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ebac:	mov	r1, r6
   2ebb0:	mov	r0, r9
   2ebb4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ebb8:	cmp	r0, #0
   2ebbc:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ebc0:	movw	r1, #10140	; 0x279c
   2ebc4:	mov	r0, r9
   2ebc8:	movt	r1, #5
   2ebcc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ebd0:	cmp	r0, #0
   2ebd4:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ebd8:	ldr	r2, [sp, #96]	; 0x60
   2ebdc:	adds	r3, r2, #0
   2ebe0:	movne	r3, #1
   2ebe4:	orrs	r2, r7, r8
   2ebe8:	moveq	r2, r3
   2ebec:	orrne	r2, r3, #1
   2ebf0:	cmp	r2, #0
   2ebf4:	beq	2ec48 <__assert_fail@plt+0x1c470>
   2ebf8:	cmp	r3, #0
   2ebfc:	bne	2ecbc <__assert_fail@plt+0x1c4e4>
   2ec00:	mov	r1, #1
   2ec04:	mov	r2, #20
   2ec08:	stm	sp, {r7, r8}
   2ec0c:	movw	r3, #36692	; 0x8f54
   2ec10:	add	r0, sp, #16
   2ec14:	movt	r3, #5
   2ec18:	bl	12568 <__sprintf_chk@plt>
   2ec1c:	mov	r0, r9
   2ec20:	movw	r1, #36700	; 0x8f5c
   2ec24:	movt	r1, #5
   2ec28:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ec2c:	cmp	r0, #0
   2ec30:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ec34:	add	r1, sp, #16
   2ec38:	mov	r0, r9
   2ec3c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ec40:	cmp	r0, #0
   2ec44:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ec48:	mov	r0, r9
   2ec4c:	movw	r1, #37312	; 0x91c0
   2ec50:	movt	r1, #5
   2ec54:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ec58:	cmp	r0, #0
   2ec5c:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ec60:	mov	r0, fp
   2ec64:	bl	2e750 <__assert_fail@plt+0x1bf78>
   2ec68:	adds	r0, r0, #0
   2ec6c:	movne	r0, #1
   2ec70:	b	2eb00 <__assert_fail@plt+0x1c328>
   2ec74:	movw	r1, #36664	; 0x8f38
   2ec78:	add	r0, fp, #8
   2ec7c:	movt	r1, #5
   2ec80:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ec84:	cmp	r0, #0
   2ec88:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ec8c:	cmp	r9, #0
   2ec90:	beq	2ead4 <__assert_fail@plt+0x1c2fc>
   2ec94:	movw	r1, #36676	; 0x8f44
   2ec98:	add	r0, fp, #8
   2ec9c:	movt	r1, #5
   2eca0:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2eca4:	cmp	r0, #0
   2eca8:	bne	2ead4 <__assert_fail@plt+0x1c2fc>
   2ecac:	b	2eafc <__assert_fail@plt+0x1c324>
   2ecb0:	ldr	r3, [sp, #96]	; 0x60
   2ecb4:	str	r3, [sp, #12]
   2ecb8:	b	2eb6c <__assert_fail@plt+0x1c394>
   2ecbc:	movw	r1, #36712	; 0x8f68
   2ecc0:	mov	r0, r9
   2ecc4:	movt	r1, #5
   2ecc8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2eccc:	cmp	r0, #0
   2ecd0:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ecd4:	ldr	r1, [sp, #12]
   2ecd8:	mov	r0, r9
   2ecdc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ece0:	cmp	r0, #0
   2ece4:	beq	2eafc <__assert_fail@plt+0x1c324>
   2ece8:	movw	r1, #10140	; 0x279c
   2ecec:	mov	r0, r9
   2ecf0:	movt	r1, #5
   2ecf4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ecf8:	cmp	r0, #0
   2ecfc:	bne	2ec00 <__assert_fail@plt+0x1c428>
   2ed00:	b	2eafc <__assert_fail@plt+0x1c324>
   2ed04:	bl	122b0 <__stack_chk_fail@plt>
   2ed08:	movw	r0, #36584	; 0x8ee8
   2ed0c:	movw	r1, #36044	; 0x8ccc
   2ed10:	movt	r0, #5
   2ed14:	movt	r1, #5
   2ed18:	movw	r2, #1450	; 0x5aa
   2ed1c:	ldr	r3, [pc, #28]	; 2ed40 <__assert_fail@plt+0x1c568>
   2ed20:	bl	127d8 <__assert_fail@plt>
   2ed24:	movw	r0, #36016	; 0x8cb0
   2ed28:	movw	r1, #36044	; 0x8ccc
   2ed2c:	movt	r0, #5
   2ed30:	movt	r1, #5
   2ed34:	movw	r2, #1449	; 0x5a9
   2ed38:	ldr	r3, [pc]	; 2ed40 <__assert_fail@plt+0x1c568>
   2ed3c:	bl	127d8 <__assert_fail@plt>
   2ed40:	andeq	r8, r5, r8, lsl #20
   2ed44:	cmp	r2, #0
   2ed48:	push	{r4, r5, r6, r7, r8, lr}
   2ed4c:	movweq	r3, #16580	; 0x40c4
   2ed50:	ldreq	r2, [r0, #8]
   2ed54:	movteq	r3, #5
   2ed58:	ldrne	r3, [r0, #8]
   2ed5c:	movne	r2, #0
   2ed60:	ldr	r6, [r0, #28]
   2ed64:	mov	r5, r1
   2ed68:	streq	r3, [r2, #16]
   2ed6c:	mov	r4, r0
   2ed70:	strne	r2, [r3, #16]
   2ed74:	cmp	r6, #0
   2ed78:	moveq	r1, r1
   2ed7c:	beq	2eda0 <__assert_fail@plt+0x1c5c8>
   2ed80:	mov	r1, r5
   2ed84:	ldr	r0, [r0, #20]
   2ed88:	mov	r2, #3
   2ed8c:	blx	r6
   2ed90:	cmp	r0, #0
   2ed94:	mov	r6, r0
   2ed98:	movne	r1, r0
   2ed9c:	moveq	r1, r5
   2eda0:	mov	r0, r4
   2eda4:	bl	2df48 <__assert_fail@plt+0x1b770>
   2eda8:	cmp	r0, #0
   2edac:	beq	2ee50 <__assert_fail@plt+0x1c678>
   2edb0:	ldr	r7, [r4, #8]
   2edb4:	cmp	r6, #0
   2edb8:	mov	r8, #0
   2edbc:	str	r8, [r7, #12]
   2edc0:	beq	2ee10 <__assert_fail@plt+0x1c638>
   2edc4:	movw	r1, #12380	; 0x305c
   2edc8:	mov	r0, r6
   2edcc:	movt	r1, #5
   2edd0:	bl	1213c <strstr@plt>
   2edd4:	mov	r1, #40	; 0x28
   2edd8:	cmp	r0, #0
   2eddc:	strne	r6, [r7, #12]
   2ede0:	movne	r5, r0
   2ede4:	moveq	r5, r6
   2ede8:	movweq	r3, #11856	; 0x2e50
   2edec:	strbne	r8, [r5], #2
   2edf0:	movteq	r3, #5
   2edf4:	mov	r0, r5
   2edf8:	streq	r3, [r7, #12]
   2edfc:	bl	124fc <strchr@plt>
   2ee00:	cmp	r0, #0
   2ee04:	movne	r3, #0
   2ee08:	strbne	r3, [r0]
   2ee0c:	ldr	r7, [r4, #8]
   2ee10:	mov	r0, r5
   2ee14:	bl	12574 <__strdup@plt>
   2ee18:	ldr	r3, [r4, #8]
   2ee1c:	ldr	r3, [r3, #12]
   2ee20:	cmp	r3, #0
   2ee24:	str	r0, [r7, #20]
   2ee28:	beq	2ee38 <__assert_fail@plt+0x1c660>
   2ee2c:	mov	r0, #1
   2ee30:	str	r0, [r4, #12]
   2ee34:	pop	{r4, r5, r6, r7, r8, pc}
   2ee38:	movw	r1, #36444	; 0x8e5c
   2ee3c:	add	r0, r4, #8
   2ee40:	movt	r1, #5
   2ee44:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ee48:	cmp	r0, #0
   2ee4c:	bne	2ee2c <__assert_fail@plt+0x1c654>
   2ee50:	mov	r0, #0
   2ee54:	pop	{r4, r5, r6, r7, r8, pc}
   2ee58:	ldr	ip, [r0, #8]
   2ee5c:	push	{r4, r5, r6, r7, r8, lr}
   2ee60:	cmp	ip, #0
   2ee64:	sub	sp, sp, #16
   2ee68:	mov	r4, r0
   2ee6c:	mov	r7, r2
   2ee70:	mov	r6, r3
   2ee74:	beq	2efd8 <__assert_fail@plt+0x1c800>
   2ee78:	ldr	ip, [ip]
   2ee7c:	cmp	ip, #0
   2ee80:	beq	2f010 <__assert_fail@plt+0x1c838>
   2ee84:	ldr	ip, [ip, #12]
   2ee88:	cmp	ip, #0
   2ee8c:	beq	2eff4 <__assert_fail@plt+0x1c81c>
   2ee90:	ldr	r3, [sp, #40]	; 0x28
   2ee94:	add	r5, r0, #8
   2ee98:	cmp	r3, #0
   2ee9c:	bne	2ef90 <__assert_fail@plt+0x1c7b8>
   2eea0:	cmp	r6, #0
   2eea4:	beq	2eec0 <__assert_fail@plt+0x1c6e8>
   2eea8:	movw	r1, #36676	; 0x8f44
   2eeac:	mov	r0, r5
   2eeb0:	movt	r1, #5
   2eeb4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2eeb8:	cmp	r0, #0
   2eebc:	beq	2eed8 <__assert_fail@plt+0x1c700>
   2eec0:	movw	r1, #36476	; 0x8e7c
   2eec4:	mov	r0, r5
   2eec8:	movt	r1, #5
   2eecc:	bl	2de18 <__assert_fail@plt+0x1b640>
   2eed0:	cmp	r0, #0
   2eed4:	bne	2eee4 <__assert_fail@plt+0x1c70c>
   2eed8:	mov	r0, #0
   2eedc:	add	sp, sp, #16
   2eee0:	pop	{r4, r5, r6, r7, r8, pc}
   2eee4:	ldr	r3, [r4, #8]
   2eee8:	ldr	r3, [r3]
   2eeec:	ldr	r0, [r3, #12]
   2eef0:	bl	12574 <__strdup@plt>
   2eef4:	ldr	r3, [r4, #8]
   2eef8:	ldr	r3, [r3]
   2eefc:	ldr	r1, [r3, #12]
   2ef00:	mov	r6, r0
   2ef04:	mov	r0, r4
   2ef08:	bl	2df48 <__assert_fail@plt+0x1b770>
   2ef0c:	subs	r8, r0, #0
   2ef10:	beq	2efb4 <__assert_fail@plt+0x1c7dc>
   2ef14:	mov	r0, r5
   2ef18:	bl	2d81c <__assert_fail@plt+0x1b044>
   2ef1c:	subs	r5, r0, #0
   2ef20:	beq	2efc8 <__assert_fail@plt+0x1c7f0>
   2ef24:	ldr	r0, [r4, #8]
   2ef28:	mov	r1, r7
   2ef2c:	bl	2db8c <__assert_fail@plt+0x1b3b4>
   2ef30:	subs	r8, r0, #0
   2ef34:	beq	2efac <__assert_fail@plt+0x1c7d4>
   2ef38:	mov	r0, r7
   2ef3c:	bl	2d6a8 <__assert_fail@plt+0x1aed0>
   2ef40:	ldr	r3, [r4, #16]
   2ef44:	str	r5, [sp, #4]
   2ef48:	mov	r1, #1
   2ef4c:	ldr	ip, [r4]
   2ef50:	movw	r2, #36724	; 0x8f74
   2ef54:	str	r3, [sp]
   2ef58:	movt	r2, #5
   2ef5c:	ldr	lr, [r4, #8]
   2ef60:	mov	r3, r6
   2ef64:	ldr	lr, [lr, #4]
   2ef68:	str	lr, [sp, #8]
   2ef6c:	str	r0, [sp, #12]
   2ef70:	mov	r0, ip
   2ef74:	bl	125d4 <__fprintf_chk@plt>
   2ef78:	mov	r0, r5
   2ef7c:	bl	121f0 <free@plt>
   2ef80:	mov	r0, r6
   2ef84:	bl	121f0 <free@plt>
   2ef88:	mov	r0, #1
   2ef8c:	b	2eedc <__assert_fail@plt+0x1c704>
   2ef90:	movw	r1, #36664	; 0x8f38
   2ef94:	mov	r0, r5
   2ef98:	movt	r1, #5
   2ef9c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2efa0:	cmp	r0, #0
   2efa4:	bne	2eea0 <__assert_fail@plt+0x1c6c8>
   2efa8:	b	2eed8 <__assert_fail@plt+0x1c700>
   2efac:	mov	r0, r5
   2efb0:	bl	121f0 <free@plt>
   2efb4:	mov	r0, r6
   2efb8:	bl	121f0 <free@plt>
   2efbc:	mov	r0, r8
   2efc0:	add	sp, sp, #16
   2efc4:	pop	{r4, r5, r6, r7, r8, pc}
   2efc8:	mov	r0, r6
   2efcc:	bl	121f0 <free@plt>
   2efd0:	mov	r0, r5
   2efd4:	b	2eedc <__assert_fail@plt+0x1c704>
   2efd8:	movw	r0, #36016	; 0x8cb0
   2efdc:	movw	r1, #36044	; 0x8ccc
   2efe0:	movt	r0, #5
   2efe4:	movt	r1, #5
   2efe8:	movw	r2, #2380	; 0x94c
   2efec:	ldr	r3, [pc, #56]	; 2f02c <__assert_fail@plt+0x1c854>
   2eff0:	bl	127d8 <__assert_fail@plt>
   2eff4:	movw	r0, #36620	; 0x8f0c
   2eff8:	movw	r1, #36044	; 0x8ccc
   2effc:	movt	r0, #5
   2f000:	movt	r1, #5
   2f004:	movw	r2, #2382	; 0x94e
   2f008:	ldr	r3, [pc, #28]	; 2f02c <__assert_fail@plt+0x1c854>
   2f00c:	bl	127d8 <__assert_fail@plt>
   2f010:	movw	r0, #36584	; 0x8ee8
   2f014:	movw	r1, #36044	; 0x8ccc
   2f018:	movt	r0, #5
   2f01c:	movt	r1, #5
   2f020:	movw	r2, #2381	; 0x94d
   2f024:	ldr	r3, [pc]	; 2f02c <__assert_fail@plt+0x1c854>
   2f028:	bl	127d8 <__assert_fail@plt>
   2f02c:	andeq	r8, r5, r0, lsr #20
   2f030:	ldr	ip, [r0, #8]
   2f034:	push	{r4, r5, r6, r7, r8, r9, lr}
   2f038:	cmp	ip, #0
   2f03c:	sub	sp, sp, #20
   2f040:	mov	r4, r0
   2f044:	mov	r7, r2
   2f048:	mov	r5, r3
   2f04c:	ldr	r6, [sp, #64]	; 0x40
   2f050:	beq	2f1fc <__assert_fail@plt+0x1ca24>
   2f054:	ldr	r0, [ip]
   2f058:	cmp	r0, #0
   2f05c:	beq	2f1e0 <__assert_fail@plt+0x1ca08>
   2f060:	ldr	r3, [sp, #48]	; 0x30
   2f064:	cmp	r3, #0
   2f068:	bne	2f160 <__assert_fail@plt+0x1c988>
   2f06c:	cmp	r5, #0
   2f070:	bne	2f184 <__assert_fail@plt+0x1c9ac>
   2f074:	cmp	r6, #0
   2f078:	bne	2f138 <__assert_fail@plt+0x1c960>
   2f07c:	ldr	r3, [r4, #8]
   2f080:	ldr	r3, [r3]
   2f084:	ldr	r0, [r3, #12]
   2f088:	bl	12574 <__strdup@plt>
   2f08c:	mov	r5, r0
   2f090:	mov	r0, r4
   2f094:	mov	r1, r5
   2f098:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f09c:	subs	r8, r0, #0
   2f0a0:	beq	2f14c <__assert_fail@plt+0x1c974>
   2f0a4:	add	r9, r4, #8
   2f0a8:	mov	r0, r9
   2f0ac:	bl	2d81c <__assert_fail@plt+0x1b044>
   2f0b0:	subs	r8, r0, #0
   2f0b4:	beq	2f14c <__assert_fail@plt+0x1c974>
   2f0b8:	cmp	r6, #0
   2f0bc:	beq	2f0d0 <__assert_fail@plt+0x1c8f8>
   2f0c0:	mov	r0, r9
   2f0c4:	bl	2d81c <__assert_fail@plt+0x1b044>
   2f0c8:	subs	r6, r0, #0
   2f0cc:	beq	2f1c8 <__assert_fail@plt+0x1c9f0>
   2f0d0:	mov	r1, r7
   2f0d4:	ldr	r0, [r4, #8]
   2f0d8:	bl	2db8c <__assert_fail@plt+0x1b3b4>
   2f0dc:	subs	r7, r0, #0
   2f0e0:	beq	2f1a4 <__assert_fail@plt+0x1c9cc>
   2f0e4:	ldr	r3, [r4, #16]
   2f0e8:	mov	r1, #1
   2f0ec:	str	r8, [sp, #4]
   2f0f0:	movw	r2, #36772	; 0x8fa4
   2f0f4:	ldr	r0, [r4]
   2f0f8:	movt	r2, #5
   2f0fc:	str	r3, [sp]
   2f100:	mov	r3, r5
   2f104:	ldr	ip, [r4, #8]
   2f108:	ldr	ip, [ip, #4]
   2f10c:	str	ip, [sp, #8]
   2f110:	bl	125d4 <__fprintf_chk@plt>
   2f114:	mov	r0, r8
   2f118:	bl	121f0 <free@plt>
   2f11c:	mov	r0, r5
   2f120:	bl	121f0 <free@plt>
   2f124:	mov	r0, r6
   2f128:	bl	121f0 <free@plt>
   2f12c:	mov	r0, #1
   2f130:	add	sp, sp, #20
   2f134:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f138:	ldr	r3, [r4, #8]
   2f13c:	ldr	r3, [r3]
   2f140:	ldr	r3, [r3]
   2f144:	ldr	r0, [r3, #12]
   2f148:	b	2f088 <__assert_fail@plt+0x1c8b0>
   2f14c:	mov	r0, r5
   2f150:	bl	121f0 <free@plt>
   2f154:	mov	r0, r8
   2f158:	add	sp, sp, #20
   2f15c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f160:	movw	r1, #36664	; 0x8f38
   2f164:	add	r0, r4, #8
   2f168:	movt	r1, #5
   2f16c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f170:	cmp	r0, #0
   2f174:	bne	2f06c <__assert_fail@plt+0x1c894>
   2f178:	mov	r0, #0
   2f17c:	add	sp, sp, #20
   2f180:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f184:	movw	r1, #36676	; 0x8f44
   2f188:	add	r0, r4, #8
   2f18c:	movt	r1, #5
   2f190:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f194:	cmp	r0, #0
   2f198:	bne	2f074 <__assert_fail@plt+0x1c89c>
   2f19c:	mov	r0, #0
   2f1a0:	b	2f17c <__assert_fail@plt+0x1c9a4>
   2f1a4:	mov	r0, r8
   2f1a8:	bl	121f0 <free@plt>
   2f1ac:	mov	r0, r5
   2f1b0:	bl	121f0 <free@plt>
   2f1b4:	mov	r0, r6
   2f1b8:	bl	121f0 <free@plt>
   2f1bc:	mov	r0, r7
   2f1c0:	add	sp, sp, #20
   2f1c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f1c8:	mov	r0, r8
   2f1cc:	bl	121f0 <free@plt>
   2f1d0:	mov	r0, r5
   2f1d4:	bl	121f0 <free@plt>
   2f1d8:	mov	r0, r6
   2f1dc:	b	2f130 <__assert_fail@plt+0x1c958>
   2f1e0:	movw	r0, #36584	; 0x8ee8
   2f1e4:	movw	r1, #36044	; 0x8ccc
   2f1e8:	movt	r0, #5
   2f1ec:	movt	r1, #5
   2f1f0:	mov	r2, #2304	; 0x900
   2f1f4:	ldr	r3, [pc, #28]	; 2f218 <__assert_fail@plt+0x1ca40>
   2f1f8:	bl	127d8 <__assert_fail@plt>
   2f1fc:	movw	r0, #36016	; 0x8cb0
   2f200:	movw	r1, #36044	; 0x8ccc
   2f204:	movt	r0, #5
   2f208:	movt	r1, #5
   2f20c:	movw	r2, #2303	; 0x8ff
   2f210:	ldr	r3, [pc]	; 2f218 <__assert_fail@plt+0x1ca40>
   2f214:	bl	127d8 <__assert_fail@plt>
   2f218:	andeq	r8, r5, r0, asr #20
   2f21c:	push	{r3, r4, r5, r6, r7, lr}
   2f220:	mov	r6, r2
   2f224:	mov	r5, r0
   2f228:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f22c:	cmp	r0, #0
   2f230:	popeq	{r3, r4, r5, r6, r7, pc}
   2f234:	add	r0, r5, #8
   2f238:	bl	2d81c <__assert_fail@plt+0x1b044>
   2f23c:	subs	r7, r0, #0
   2f240:	beq	2f2bc <__assert_fail@plt+0x1cae4>
   2f244:	ldr	r3, [r5, #4]
   2f248:	cmp	r3, #0
   2f24c:	movne	r4, #0
   2f250:	beq	2f270 <__assert_fail@plt+0x1ca98>
   2f254:	ldr	r1, [r5]
   2f258:	mov	r0, #32
   2f25c:	bl	12334 <_IO_putc@plt>
   2f260:	ldr	r1, [r5, #4]
   2f264:	add	r4, r4, #1
   2f268:	cmp	r4, r1
   2f26c:	bcc	2f254 <__assert_fail@plt+0x1ca7c>
   2f270:	cmp	r6, #0
   2f274:	beq	2f2a0 <__assert_fail@plt+0x1cac8>
   2f278:	mov	r3, r7
   2f27c:	ldr	r0, [r5]
   2f280:	mov	r1, #1
   2f284:	movw	r2, #36808	; 0x8fc8
   2f288:	movt	r2, #5
   2f28c:	bl	125d4 <__fprintf_chk@plt>
   2f290:	mov	r3, #1
   2f294:	mov	r0, r3
   2f298:	str	r3, [r5, #12]
   2f29c:	pop	{r3, r4, r5, r6, r7, pc}
   2f2a0:	movw	r0, #36476	; 0x8e7c
   2f2a4:	mov	r1, #1
   2f2a8:	mov	r2, #7
   2f2ac:	ldr	r3, [r5]
   2f2b0:	movt	r0, #5
   2f2b4:	bl	12340 <fwrite@plt>
   2f2b8:	b	2f278 <__assert_fail@plt+0x1caa0>
   2f2bc:	mov	r0, r7
   2f2c0:	pop	{r3, r4, r5, r6, r7, pc}
   2f2c4:	push	{r4, r5, r6, lr}
   2f2c8:	mov	r5, r0
   2f2cc:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f2d0:	cmp	r0, #0
   2f2d4:	popeq	{r4, r5, r6, pc}
   2f2d8:	add	r0, r5, #8
   2f2dc:	bl	2d81c <__assert_fail@plt+0x1b044>
   2f2e0:	subs	r6, r0, #0
   2f2e4:	beq	2f33c <__assert_fail@plt+0x1cb64>
   2f2e8:	ldr	r3, [r5, #4]
   2f2ec:	cmp	r3, #0
   2f2f0:	movne	r4, #0
   2f2f4:	beq	2f314 <__assert_fail@plt+0x1cb3c>
   2f2f8:	mov	r0, #32
   2f2fc:	ldr	r1, [r5]
   2f300:	bl	12334 <_IO_putc@plt>
   2f304:	ldr	r2, [r5, #4]
   2f308:	add	r4, r4, #1
   2f30c:	cmp	r4, r2
   2f310:	bcc	2f2f8 <__assert_fail@plt+0x1cb20>
   2f314:	mov	r1, #1
   2f318:	mov	r3, r6
   2f31c:	ldr	r0, [r5]
   2f320:	movw	r2, #36816	; 0x8fd0
   2f324:	movt	r2, #5
   2f328:	bl	125d4 <__fprintf_chk@plt>
   2f32c:	mov	r0, r6
   2f330:	bl	121f0 <free@plt>
   2f334:	mov	r0, #1
   2f338:	pop	{r4, r5, r6, pc}
   2f33c:	mov	r0, r6
   2f340:	pop	{r4, r5, r6, pc}
   2f344:	push	{r3, lr}
   2f348:	ldr	r3, [r0, #8]
   2f34c:	cmp	r3, #0
   2f350:	beq	2f364 <__assert_fail@plt+0x1cb8c>
   2f354:	movw	r1, #36832	; 0x8fe0
   2f358:	movt	r1, #5
   2f35c:	pop	{r3, lr}
   2f360:	b	2df48 <__assert_fail@plt+0x1b770>
   2f364:	movw	r0, #36016	; 0x8cb0
   2f368:	movw	r1, #36044	; 0x8ccc
   2f36c:	movt	r0, #5
   2f370:	movt	r1, #5
   2f374:	movw	r2, #794	; 0x31a
   2f378:	ldr	r3, [pc]	; 2f380 <__assert_fail@plt+0x1cba8>
   2f37c:	bl	127d8 <__assert_fail@plt>
   2f380:	andeq	r8, r5, r8, asr sl
   2f384:	ldr	r3, [r0, #8]
   2f388:	push	{r4, lr}
   2f38c:	cmp	r3, #0
   2f390:	mov	r4, r0
   2f394:	beq	2f3e0 <__assert_fail@plt+0x1cc08>
   2f398:	ldr	r0, [r3, #4]
   2f39c:	mov	r1, #124	; 0x7c
   2f3a0:	bl	124fc <strchr@plt>
   2f3a4:	cmp	r0, #0
   2f3a8:	beq	2f3b8 <__assert_fail@plt+0x1cbe0>
   2f3ac:	ldrb	r3, [r0, #1]
   2f3b0:	cmp	r3, #91	; 0x5b
   2f3b4:	beq	2f3cc <__assert_fail@plt+0x1cbf4>
   2f3b8:	mov	r0, r4
   2f3bc:	movw	r1, #36844	; 0x8fec
   2f3c0:	pop	{r4, lr}
   2f3c4:	movt	r1, #5
   2f3c8:	b	2df48 <__assert_fail@plt+0x1b770>
   2f3cc:	mov	r0, r4
   2f3d0:	movw	r1, #36836	; 0x8fe4
   2f3d4:	pop	{r4, lr}
   2f3d8:	movt	r1, #5
   2f3dc:	b	2df48 <__assert_fail@plt+0x1b770>
   2f3e0:	movw	r0, #36016	; 0x8cb0
   2f3e4:	movw	r1, #36044	; 0x8ccc
   2f3e8:	movt	r0, #5
   2f3ec:	movt	r1, #5
   2f3f0:	movw	r2, #699	; 0x2bb
   2f3f4:	ldr	r3, [pc]	; 2f3fc <__assert_fail@plt+0x1cc24>
   2f3f8:	bl	127d8 <__assert_fail@plt>
   2f3fc:	andeq	r8, r5, ip, ror #20
   2f400:	push	{r4, r5, r6, lr}
   2f404:	movw	r1, #11856	; 0x2e50
   2f408:	movt	r1, #5
   2f40c:	mov	r4, r0
   2f410:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f414:	cmp	r0, #0
   2f418:	popeq	{r4, r5, r6, pc}
   2f41c:	add	r5, r4, #8
   2f420:	mov	r0, r5
   2f424:	bl	2d81c <__assert_fail@plt+0x1b044>
   2f428:	subs	r6, r0, #0
   2f42c:	beq	2f448 <__assert_fail@plt+0x1cc70>
   2f430:	mov	r0, r4
   2f434:	movw	r1, #11856	; 0x2e50
   2f438:	movt	r1, #5
   2f43c:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f440:	cmp	r0, #0
   2f444:	bne	2f450 <__assert_fail@plt+0x1cc78>
   2f448:	mov	r0, #0
   2f44c:	pop	{r4, r5, r6, pc}
   2f450:	movw	r1, #10140	; 0x279c
   2f454:	mov	r0, r5
   2f458:	movt	r1, #5
   2f45c:	bl	2de18 <__assert_fail@plt+0x1b640>
   2f460:	cmp	r0, #0
   2f464:	beq	2f448 <__assert_fail@plt+0x1cc70>
   2f468:	mov	r1, r6
   2f46c:	mov	r0, r5
   2f470:	bl	2de18 <__assert_fail@plt+0x1b640>
   2f474:	cmp	r0, #0
   2f478:	beq	2f448 <__assert_fail@plt+0x1cc70>
   2f47c:	mov	r0, r5
   2f480:	movw	r1, #36848	; 0x8ff0
   2f484:	movt	r1, #5
   2f488:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f48c:	adds	r0, r0, #0
   2f490:	movne	r0, #1
   2f494:	pop	{r4, r5, r6, pc}
   2f498:	push	{r3, r4, r5, lr}
   2f49c:	mov	r5, r1
   2f4a0:	movw	r1, #11856	; 0x2e50
   2f4a4:	movt	r1, #5
   2f4a8:	mov	r4, r0
   2f4ac:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f4b0:	cmp	r0, #0
   2f4b4:	popeq	{r3, r4, r5, pc}
   2f4b8:	add	r4, r4, #8
   2f4bc:	movw	r1, #36852	; 0x8ff4
   2f4c0:	movt	r1, #5
   2f4c4:	mov	r0, r4
   2f4c8:	bl	2de18 <__assert_fail@plt+0x1b640>
   2f4cc:	cmp	r0, #0
   2f4d0:	bne	2f4dc <__assert_fail@plt+0x1cd04>
   2f4d4:	mov	r0, #0
   2f4d8:	pop	{r3, r4, r5, pc}
   2f4dc:	movw	r1, #36860	; 0x8ffc
   2f4e0:	mov	r0, r4
   2f4e4:	movt	r1, #5
   2f4e8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f4ec:	cmp	r0, #0
   2f4f0:	beq	2f4d4 <__assert_fail@plt+0x1ccfc>
   2f4f4:	cmp	r5, #0
   2f4f8:	bne	2f504 <__assert_fail@plt+0x1cd2c>
   2f4fc:	mov	r0, #1
   2f500:	pop	{r3, r4, r5, pc}
   2f504:	mov	r0, r4
   2f508:	movw	r1, #36864	; 0x9000
   2f50c:	movt	r1, #5
   2f510:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f514:	adds	r0, r0, #0
   2f518:	movne	r0, #1
   2f51c:	pop	{r3, r4, r5, pc}
   2f520:	sub	r3, r2, #3
   2f524:	cmp	r3, #1
   2f528:	push	{r4, r5, r6, r7, lr}
   2f52c:	mov	r5, r2
   2f530:	sub	sp, sp, #12
   2f534:	mov	r4, r0
   2f538:	bls	2f59c <__assert_fail@plt+0x1cdc4>
   2f53c:	mov	r0, r4
   2f540:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f544:	cmp	r0, #0
   2f548:	bne	2f558 <__assert_fail@plt+0x1cd80>
   2f54c:	mov	r0, #0
   2f550:	add	sp, sp, #12
   2f554:	pop	{r4, r5, r6, r7, pc}
   2f558:	add	r6, r4, #8
   2f55c:	mov	r0, r6
   2f560:	bl	2d81c <__assert_fail@plt+0x1b044>
   2f564:	subs	r7, r0, #0
   2f568:	beq	2f54c <__assert_fail@plt+0x1cd74>
   2f56c:	ldr	r3, [r4, #8]
   2f570:	ldr	r3, [r3, #12]
   2f574:	cmp	r3, #0
   2f578:	beq	2f5b4 <__assert_fail@plt+0x1cddc>
   2f57c:	mov	r0, r7
   2f580:	bl	121f0 <free@plt>
   2f584:	ldr	r3, [r4, #12]
   2f588:	mov	r0, #1
   2f58c:	add	r3, r3, r0
   2f590:	str	r3, [r4, #12]
   2f594:	add	sp, sp, #12
   2f598:	pop	{r4, r5, r6, r7, pc}
   2f59c:	str	r1, [sp, #4]
   2f5a0:	bl	2f344 <__assert_fail@plt+0x1cb6c>
   2f5a4:	ldr	r1, [sp, #4]
   2f5a8:	cmp	r0, #0
   2f5ac:	bne	2f53c <__assert_fail@plt+0x1cd64>
   2f5b0:	b	2f54c <__assert_fail@plt+0x1cd74>
   2f5b4:	ldr	r3, [r4, #12]
   2f5b8:	cmp	r3, #1
   2f5bc:	beq	2f5d8 <__assert_fail@plt+0x1ce00>
   2f5c0:	movw	r1, #10648	; 0x2998
   2f5c4:	mov	r0, r6
   2f5c8:	movt	r1, #5
   2f5cc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f5d0:	cmp	r0, #0
   2f5d4:	beq	2f54c <__assert_fail@plt+0x1cd74>
   2f5d8:	cmp	r5, #2
   2f5dc:	cmpne	r5, #4
   2f5e0:	bne	2f5fc <__assert_fail@plt+0x1ce24>
   2f5e4:	movw	r1, #36880	; 0x9010
   2f5e8:	mov	r0, r6
   2f5ec:	movt	r1, #5
   2f5f0:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f5f4:	cmp	r0, #0
   2f5f8:	beq	2f54c <__assert_fail@plt+0x1cd74>
   2f5fc:	mov	r0, r6
   2f600:	mov	r1, r7
   2f604:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f608:	cmp	r0, #0
   2f60c:	bne	2f57c <__assert_fail@plt+0x1cda4>
   2f610:	b	2f54c <__assert_fail@plt+0x1cd74>
   2f614:	push	{r4, r5, r6, r7, r8, lr}
   2f618:	subs	r6, r1, #0
   2f61c:	mov	r7, r0
   2f620:	beq	2f684 <__assert_fail@plt+0x1ceac>
   2f624:	ldr	r4, [r0]
   2f628:	cmp	r4, #0
   2f62c:	beq	2f68c <__assert_fail@plt+0x1ceb4>
   2f630:	ldr	r5, [r4, #20]
   2f634:	cmp	r5, #0
   2f638:	moveq	r8, r5
   2f63c:	beq	2f64c <__assert_fail@plt+0x1ce74>
   2f640:	mov	r0, r5
   2f644:	bl	124e4 <strlen@plt>
   2f648:	mov	r8, r0
   2f64c:	mov	r0, r6
   2f650:	bl	124e4 <strlen@plt>
   2f654:	add	r1, r0, r8
   2f658:	mov	r0, r5
   2f65c:	add	r1, r1, #1
   2f660:	bl	122c8 <xrealloc@plt>
   2f664:	mov	r1, r6
   2f668:	str	r0, [r4, #20]
   2f66c:	ldr	r3, [r7]
   2f670:	ldr	r0, [r3, #20]
   2f674:	add	r0, r0, r8
   2f678:	bl	12388 <strcpy@plt>
   2f67c:	mov	r0, #1
   2f680:	pop	{r4, r5, r6, r7, r8, pc}
   2f684:	mov	r0, r6
   2f688:	pop	{r4, r5, r6, r7, r8, pc}
   2f68c:	movw	r0, #36016	; 0x8cb0
   2f690:	movw	r1, #36044	; 0x8ccc
   2f694:	movt	r0, #5
   2f698:	movt	r1, #5
   2f69c:	mov	r2, #400	; 0x190
   2f6a0:	ldr	r3, [pc]	; 2f6a8 <__assert_fail@plt+0x1ced0>
   2f6a4:	bl	127d8 <__assert_fail@plt>
   2f6a8:	andeq	r8, r5, ip, ror sl
   2f6ac:	push	{r3, r4, r5, r6, r7, lr}
   2f6b0:	mov	r5, r2
   2f6b4:	mov	r7, r3
   2f6b8:	mov	r4, r0
   2f6bc:	bl	2df48 <__assert_fail@plt+0x1b770>
   2f6c0:	cmp	r0, #0
   2f6c4:	bne	2f6d0 <__assert_fail@plt+0x1cef8>
   2f6c8:	mov	r0, #0
   2f6cc:	pop	{r3, r4, r5, r6, r7, pc}
   2f6d0:	add	r6, r4, #8
   2f6d4:	movw	r1, #36476	; 0x8e7c
   2f6d8:	movt	r1, #5
   2f6dc:	mov	r0, r6
   2f6e0:	bl	2de18 <__assert_fail@plt+0x1b640>
   2f6e4:	cmp	r0, #0
   2f6e8:	beq	2f6c8 <__assert_fail@plt+0x1cef0>
   2f6ec:	movw	r1, #36892	; 0x901c
   2f6f0:	mov	r0, r6
   2f6f4:	movt	r1, #5
   2f6f8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f6fc:	cmp	r0, #0
   2f700:	beq	2f6c8 <__assert_fail@plt+0x1cef0>
   2f704:	mov	r1, r5
   2f708:	mov	r0, r6
   2f70c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f710:	cmp	r0, #0
   2f714:	beq	2f6c8 <__assert_fail@plt+0x1cef0>
   2f718:	movw	r1, #36900	; 0x9024
   2f71c:	mov	r0, r6
   2f720:	movt	r1, #5
   2f724:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f728:	cmp	r0, #0
   2f72c:	beq	2f6c8 <__assert_fail@plt+0x1cef0>
   2f730:	mov	r0, r4
   2f734:	bl	2e750 <__assert_fail@plt+0x1bf78>
   2f738:	cmp	r0, #0
   2f73c:	beq	2f6c8 <__assert_fail@plt+0x1cef0>
   2f740:	mov	r0, r6
   2f744:	bl	2d81c <__assert_fail@plt+0x1b044>
   2f748:	subs	r5, r0, #0
   2f74c:	beq	2f6c8 <__assert_fail@plt+0x1cef0>
   2f750:	mov	r0, r4
   2f754:	mov	r1, r7
   2f758:	bl	2e79c <__assert_fail@plt+0x1bfc4>
   2f75c:	cmp	r0, #0
   2f760:	beq	2f6c8 <__assert_fail@plt+0x1cef0>
   2f764:	mov	r0, r6
   2f768:	mov	r1, r5
   2f76c:	pop	{r3, r4, r5, r6, r7, lr}
   2f770:	b	2debc <__assert_fail@plt+0x1b6e4>
   2f774:	push	{r4, r5, r6, lr}
   2f778:	subs	r6, r1, #0
   2f77c:	mov	r5, r0
   2f780:	beq	2f7c8 <__assert_fail@plt+0x1cff0>
   2f784:	mov	r0, #28
   2f788:	bl	12358 <xmalloc@plt>
   2f78c:	mov	r1, #0
   2f790:	mov	r2, #28
   2f794:	mov	r4, r0
   2f798:	bl	12580 <memset@plt>
   2f79c:	mov	r0, r6
   2f7a0:	mov	r6, #1
   2f7a4:	bl	1237c <xstrdup@plt>
   2f7a8:	ldr	r3, [r5]
   2f7ac:	mov	r1, #3
   2f7b0:	mov	r2, #0
   2f7b4:	str	r1, [r4, #8]
   2f7b8:	str	r2, [r4, #12]
   2f7bc:	str	r3, [r4]
   2f7c0:	str	r4, [r5]
   2f7c4:	str	r0, [r4, #4]
   2f7c8:	mov	r0, r6
   2f7cc:	pop	{r4, r5, r6, pc}
   2f7d0:	push	{r4, r5, r6, r7, r8, lr}
   2f7d4:	movw	r4, #65176	; 0xfe98
   2f7d8:	movt	r4, #6
   2f7dc:	mov	r5, r3
   2f7e0:	sub	ip, r3, #7
   2f7e4:	sub	sp, sp, #32
   2f7e8:	ldr	r3, [r4]
   2f7ec:	mov	r7, r1
   2f7f0:	mov	r8, r2
   2f7f4:	str	r3, [sp, #28]
   2f7f8:	cmp	ip, #4
   2f7fc:	ldrls	pc, [pc, ip, lsl #2]
   2f800:	b	2f8e4 <__assert_fail@plt+0x1d10c>
   2f804:	andeq	pc, r2, r0, lsl #17
   2f808:	andeq	pc, r2, r8, lsl r8	; <UNPREDICTABLE>
   2f80c:	andeq	pc, r2, ip, lsl #17
   2f810:	muleq	r2, r8, r8
   2f814:	andeq	pc, r2, r4, lsr #17
   2f818:	movw	r1, #36916	; 0x9034
   2f81c:	movt	r1, #5
   2f820:	add	r6, r0, #8
   2f824:	mov	r0, r6
   2f828:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   2f82c:	cmp	r0, #0
   2f830:	beq	2f878 <__assert_fail@plt+0x1d0a0>
   2f834:	cmp	r7, #0
   2f838:	movne	r1, r7
   2f83c:	beq	2f8e8 <__assert_fail@plt+0x1d110>
   2f840:	mov	r0, r6
   2f844:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f848:	cmp	r0, #0
   2f84c:	beq	2f878 <__assert_fail@plt+0x1d0a0>
   2f850:	cmp	r5, #11
   2f854:	cmpne	r7, #0
   2f858:	moveq	r0, #1
   2f85c:	bne	2f8b0 <__assert_fail@plt+0x1d0d8>
   2f860:	ldr	r2, [sp, #28]
   2f864:	ldr	r3, [r4]
   2f868:	cmp	r2, r3
   2f86c:	bne	2f90c <__assert_fail@plt+0x1d134>
   2f870:	add	sp, sp, #32
   2f874:	pop	{r4, r5, r6, r7, r8, pc}
   2f878:	mov	r0, #0
   2f87c:	b	2f860 <__assert_fail@plt+0x1d088>
   2f880:	movw	r1, #36908	; 0x902c
   2f884:	movt	r1, #5
   2f888:	b	2f820 <__assert_fail@plt+0x1d048>
   2f88c:	movw	r1, #36532	; 0x8eb4
   2f890:	movt	r1, #5
   2f894:	b	2f820 <__assert_fail@plt+0x1d048>
   2f898:	movw	r1, #36540	; 0x8ebc
   2f89c:	movt	r1, #5
   2f8a0:	b	2f820 <__assert_fail@plt+0x1d048>
   2f8a4:	movw	r1, #36924	; 0x903c
   2f8a8:	movt	r1, #5
   2f8ac:	b	2f820 <__assert_fail@plt+0x1d048>
   2f8b0:	mov	r1, #1
   2f8b4:	mov	r2, #20
   2f8b8:	str	r8, [sp]
   2f8bc:	movw	r3, #36944	; 0x9050
   2f8c0:	add	r0, sp, #8
   2f8c4:	movt	r3, #5
   2f8c8:	bl	12568 <__sprintf_chk@plt>
   2f8cc:	mov	r0, r6
   2f8d0:	add	r1, sp, #8
   2f8d4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f8d8:	adds	r0, r0, #0
   2f8dc:	movne	r0, #1
   2f8e0:	b	2f860 <__assert_fail@plt+0x1d088>
   2f8e4:	bl	12790 <abort@plt>
   2f8e8:	mov	r1, #1
   2f8ec:	str	r8, [sp]
   2f8f0:	movw	r3, #36932	; 0x9044
   2f8f4:	add	r0, sp, #8
   2f8f8:	movt	r3, #5
   2f8fc:	mov	r2, #20
   2f900:	bl	12568 <__sprintf_chk@plt>
   2f904:	add	r1, sp, #8
   2f908:	b	2f840 <__assert_fail@plt+0x1d068>
   2f90c:	bl	122b0 <__stack_chk_fail@plt>
   2f910:	add	r0, r0, #8
   2f914:	b	2f774 <__assert_fail@plt+0x1cf9c>
   2f918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f91c:	sub	sp, sp, #52	; 0x34
   2f920:	movw	r4, #65176	; 0xfe98
   2f924:	movt	r4, #6
   2f928:	ldr	r8, [sp, #92]	; 0x5c
   2f92c:	mov	r5, r0
   2f930:	ldr	ip, [sp, #96]	; 0x60
   2f934:	add	r6, r5, #8
   2f938:	adds	r8, r8, #0
   2f93c:	ldr	r0, [r4]
   2f940:	mov	r7, r1
   2f944:	mov	sl, r2
   2f948:	movne	r8, #1
   2f94c:	cmp	ip, #0
   2f950:	movne	fp, #0
   2f954:	andeq	fp, r8, #1
   2f958:	cmp	fp, #0
   2f95c:	ldr	ip, [r5, #4]
   2f960:	mov	r9, r3
   2f964:	str	r0, [sp, #44]	; 0x2c
   2f968:	add	ip, ip, #2
   2f96c:	str	ip, [r5, #4]
   2f970:	bne	2fa34 <__assert_fail@plt+0x1d25c>
   2f974:	cmp	r9, #0
   2f978:	movw	r2, #36532	; 0x8eb4
   2f97c:	movt	r2, #5
   2f980:	movw	r1, #36540	; 0x8ebc
   2f984:	mov	r0, r6
   2f988:	movt	r1, #5
   2f98c:	movne	r1, r2
   2f990:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   2f994:	cmp	r0, #0
   2f998:	beq	2fa18 <__assert_fail@plt+0x1d240>
   2f99c:	cmp	r7, #0
   2f9a0:	beq	2fac4 <__assert_fail@plt+0x1d2ec>
   2f9a4:	mov	r0, r6
   2f9a8:	mov	r1, r7
   2f9ac:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f9b0:	cmp	r0, #0
   2f9b4:	beq	2fa18 <__assert_fail@plt+0x1d240>
   2f9b8:	movw	r1, #36960	; 0x9060
   2f9bc:	mov	r0, r6
   2f9c0:	movt	r1, #5
   2f9c4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2f9c8:	cmp	r0, #0
   2f9cc:	beq	2fa18 <__assert_fail@plt+0x1d240>
   2f9d0:	ldr	r0, [sp, #88]	; 0x58
   2f9d4:	adds	r9, r0, #0
   2f9d8:	movne	r9, #1
   2f9dc:	orrs	r3, r8, r9
   2f9e0:	bne	2fa48 <__assert_fail@plt+0x1d270>
   2f9e4:	ldr	ip, [sp, #96]	; 0x60
   2f9e8:	cmp	r7, #0
   2f9ec:	cmpeq	ip, #0
   2f9f0:	bne	2fa48 <__assert_fail@plt+0x1d270>
   2f9f4:	ldr	r3, [r5, #8]
   2f9f8:	mov	r2, #2
   2f9fc:	mov	r0, r6
   2fa00:	movw	r1, #15480	; 0x3c78
   2fa04:	movt	r1, #5
   2fa08:	str	r2, [r3, #8]
   2fa0c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fa10:	cmp	r0, #0
   2fa14:	bne	2faf8 <__assert_fail@plt+0x1d320>
   2fa18:	mov	r0, #0
   2fa1c:	ldr	r2, [sp, #44]	; 0x2c
   2fa20:	ldr	r3, [r4]
   2fa24:	cmp	r2, r3
   2fa28:	bne	2fbcc <__assert_fail@plt+0x1d3f4>
   2fa2c:	add	sp, sp, #52	; 0x34
   2fa30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa34:	mov	r0, r6
   2fa38:	bl	2d81c <__assert_fail@plt+0x1b044>
   2fa3c:	subs	fp, r0, #0
   2fa40:	bne	2f974 <__assert_fail@plt+0x1d19c>
   2fa44:	b	2fa18 <__assert_fail@plt+0x1d240>
   2fa48:	movw	r1, #36964	; 0x9064
   2fa4c:	mov	r0, r6
   2fa50:	movt	r1, #5
   2fa54:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fa58:	cmp	r0, #0
   2fa5c:	beq	2fa18 <__assert_fail@plt+0x1d240>
   2fa60:	cmp	r9, #0
   2fa64:	bne	2fb4c <__assert_fail@plt+0x1d374>
   2fa68:	cmp	r8, #0
   2fa6c:	bne	2fb0c <__assert_fail@plt+0x1d334>
   2fa70:	cmp	r7, #0
   2fa74:	beq	2faa8 <__assert_fail@plt+0x1d2d0>
   2fa78:	mov	r1, #1
   2fa7c:	mov	r2, #30
   2fa80:	str	sl, [sp]
   2fa84:	movw	r3, #36996	; 0x9084
   2fa88:	add	r0, sp, #12
   2fa8c:	movt	r3, #5
   2fa90:	bl	12568 <__sprintf_chk@plt>
   2fa94:	mov	r0, r6
   2fa98:	add	r1, sp, #12
   2fa9c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2faa0:	cmp	r0, #0
   2faa4:	beq	2fa1c <__assert_fail@plt+0x1d244>
   2faa8:	movw	r1, #37400	; 0x9218
   2faac:	mov	r0, r6
   2fab0:	movt	r1, #5
   2fab4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fab8:	cmp	r0, #0
   2fabc:	bne	2f9f4 <__assert_fail@plt+0x1d21c>
   2fac0:	b	2fa18 <__assert_fail@plt+0x1d240>
   2fac4:	mov	r1, #1
   2fac8:	mov	r2, #20
   2facc:	str	sl, [sp]
   2fad0:	movw	r3, #36932	; 0x9044
   2fad4:	add	r0, sp, #12
   2fad8:	movt	r3, #5
   2fadc:	bl	12568 <__sprintf_chk@plt>
   2fae0:	mov	r0, r6
   2fae4:	add	r1, sp, #12
   2fae8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2faec:	cmp	r0, #0
   2faf0:	bne	2f9b8 <__assert_fail@plt+0x1d1e0>
   2faf4:	b	2fa18 <__assert_fail@plt+0x1d240>
   2faf8:	mov	r0, r5
   2fafc:	bl	2e750 <__assert_fail@plt+0x1bf78>
   2fb00:	adds	r0, r0, #0
   2fb04:	movne	r0, #1
   2fb08:	b	2fa1c <__assert_fail@plt+0x1d244>
   2fb0c:	movw	r1, #36976	; 0x9070
   2fb10:	mov	r0, r6
   2fb14:	movt	r1, #5
   2fb18:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fb1c:	cmp	r0, #0
   2fb20:	beq	2fa18 <__assert_fail@plt+0x1d240>
   2fb24:	ldr	ip, [sp, #96]	; 0x60
   2fb28:	cmp	ip, #0
   2fb2c:	beq	2fb9c <__assert_fail@plt+0x1d3c4>
   2fb30:	movw	r1, #36988	; 0x907c
   2fb34:	mov	r0, r6
   2fb38:	movt	r1, #5
   2fb3c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fb40:	cmp	r0, #0
   2fb44:	bne	2fa70 <__assert_fail@plt+0x1d298>
   2fb48:	b	2fa18 <__assert_fail@plt+0x1d240>
   2fb4c:	ldr	r0, [sp, #88]	; 0x58
   2fb50:	mov	r1, #1
   2fb54:	mov	r2, #20
   2fb58:	movw	r3, #37000	; 0x9088
   2fb5c:	movt	r3, #5
   2fb60:	str	r0, [sp]
   2fb64:	add	r0, sp, #12
   2fb68:	bl	12568 <__sprintf_chk@plt>
   2fb6c:	mov	r0, r6
   2fb70:	movw	r1, #36968	; 0x9068
   2fb74:	movt	r1, #5
   2fb78:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fb7c:	cmp	r0, #0
   2fb80:	beq	2fa18 <__assert_fail@plt+0x1d240>
   2fb84:	add	r1, sp, #12
   2fb88:	mov	r0, r6
   2fb8c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fb90:	cmp	r0, #0
   2fb94:	bne	2fa68 <__assert_fail@plt+0x1d290>
   2fb98:	b	2fa18 <__assert_fail@plt+0x1d240>
   2fb9c:	mov	r1, fp
   2fba0:	mov	r0, r6
   2fba4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fba8:	cmp	r0, #0
   2fbac:	beq	2fa18 <__assert_fail@plt+0x1d240>
   2fbb0:	movw	r1, #10140	; 0x279c
   2fbb4:	mov	r0, r6
   2fbb8:	movt	r1, #5
   2fbbc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fbc0:	cmp	r0, #0
   2fbc4:	bne	2fa70 <__assert_fail@plt+0x1d298>
   2fbc8:	b	2fa18 <__assert_fail@plt+0x1d240>
   2fbcc:	bl	122b0 <__stack_chk_fail@plt>
   2fbd0:	push	{r4, r5, r6, r7, r8, r9, lr}
   2fbd4:	movw	r4, #65176	; 0xfe98
   2fbd8:	movt	r4, #6
   2fbdc:	cmp	r3, #0
   2fbe0:	mov	r5, r0
   2fbe4:	add	r6, r0, #8
   2fbe8:	ldr	r8, [r4]
   2fbec:	movw	lr, #36916	; 0x9034
   2fbf0:	ldr	r0, [r0, #4]
   2fbf4:	movt	lr, #5
   2fbf8:	movw	ip, #36908	; 0x902c
   2fbfc:	movt	ip, #5
   2fc00:	sub	sp, sp, #52	; 0x34
   2fc04:	mov	r7, r1
   2fc08:	add	r1, r0, #2
   2fc0c:	mov	r0, r6
   2fc10:	str	r1, [r5, #4]
   2fc14:	moveq	r1, lr
   2fc18:	movne	r1, ip
   2fc1c:	mov	r9, r2
   2fc20:	str	r8, [sp, #44]	; 0x2c
   2fc24:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   2fc28:	cmp	r0, #0
   2fc2c:	beq	2fd54 <__assert_fail@plt+0x1d57c>
   2fc30:	cmp	r7, #0
   2fc34:	beq	2fd70 <__assert_fail@plt+0x1d598>
   2fc38:	mov	r0, r6
   2fc3c:	mov	r1, r7
   2fc40:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fc44:	cmp	r0, #0
   2fc48:	beq	2fd54 <__assert_fail@plt+0x1d57c>
   2fc4c:	movw	r1, #36960	; 0x9060
   2fc50:	mov	r0, r6
   2fc54:	movt	r1, #5
   2fc58:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fc5c:	cmp	r0, #0
   2fc60:	beq	2fd54 <__assert_fail@plt+0x1d57c>
   2fc64:	adds	r7, r7, #0
   2fc68:	ldr	r3, [sp, #80]	; 0x50
   2fc6c:	movne	r7, #1
   2fc70:	adds	r8, r3, #0
   2fc74:	movne	r8, #1
   2fc78:	orrs	r3, r7, r8
   2fc7c:	beq	2fcf0 <__assert_fail@plt+0x1d518>
   2fc80:	movw	r1, #36964	; 0x9064
   2fc84:	mov	r0, r6
   2fc88:	movt	r1, #5
   2fc8c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fc90:	cmp	r0, #0
   2fc94:	beq	2fd54 <__assert_fail@plt+0x1d57c>
   2fc98:	cmp	r8, #0
   2fc9c:	bne	2fd20 <__assert_fail@plt+0x1d548>
   2fca0:	cmp	r7, #0
   2fca4:	beq	2fcd8 <__assert_fail@plt+0x1d500>
   2fca8:	mov	r1, #1
   2fcac:	mov	r2, #30
   2fcb0:	str	r9, [sp]
   2fcb4:	movw	r3, #36996	; 0x9084
   2fcb8:	add	r0, sp, #12
   2fcbc:	movt	r3, #5
   2fcc0:	bl	12568 <__sprintf_chk@plt>
   2fcc4:	mov	r0, r6
   2fcc8:	add	r1, sp, #12
   2fccc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fcd0:	cmp	r0, #0
   2fcd4:	beq	2fd54 <__assert_fail@plt+0x1d57c>
   2fcd8:	movw	r1, #37400	; 0x9218
   2fcdc:	mov	r0, r6
   2fce0:	movt	r1, #5
   2fce4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fce8:	cmp	r0, #0
   2fcec:	beq	2fd54 <__assert_fail@plt+0x1d57c>
   2fcf0:	mov	r0, r6
   2fcf4:	movw	r1, #15480	; 0x3c78
   2fcf8:	movt	r1, #5
   2fcfc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fd00:	cmp	r0, #0
   2fd04:	beq	2fd54 <__assert_fail@plt+0x1d57c>
   2fd08:	ldr	r3, [r5, #8]
   2fd0c:	mov	r2, #0
   2fd10:	mov	r0, r5
   2fd14:	str	r2, [r3, #8]
   2fd18:	bl	2e750 <__assert_fail@plt+0x1bf78>
   2fd1c:	b	2fd58 <__assert_fail@plt+0x1d580>
   2fd20:	ldr	r3, [sp, #80]	; 0x50
   2fd24:	mov	r1, #1
   2fd28:	mov	r2, #30
   2fd2c:	add	r0, sp, #12
   2fd30:	str	r3, [sp]
   2fd34:	movw	r3, #37004	; 0x908c
   2fd38:	movt	r3, #5
   2fd3c:	bl	12568 <__sprintf_chk@plt>
   2fd40:	mov	r0, r6
   2fd44:	add	r1, sp, #12
   2fd48:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fd4c:	cmp	r0, #0
   2fd50:	bne	2fca0 <__assert_fail@plt+0x1d4c8>
   2fd54:	mov	r0, #0
   2fd58:	ldr	r2, [sp, #44]	; 0x2c
   2fd5c:	ldr	r3, [r4]
   2fd60:	cmp	r2, r3
   2fd64:	bne	2fda4 <__assert_fail@plt+0x1d5cc>
   2fd68:	add	sp, sp, #52	; 0x34
   2fd6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2fd70:	mov	r1, #1
   2fd74:	mov	r2, #20
   2fd78:	str	r9, [sp]
   2fd7c:	movw	r3, #36932	; 0x9044
   2fd80:	add	r0, sp, #12
   2fd84:	movt	r3, #5
   2fd88:	bl	12568 <__sprintf_chk@plt>
   2fd8c:	mov	r0, r6
   2fd90:	add	r1, sp, #12
   2fd94:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2fd98:	cmp	r0, #0
   2fd9c:	bne	2fc4c <__assert_fail@plt+0x1d474>
   2fda0:	b	2fd58 <__assert_fail@plt+0x1d580>
   2fda4:	bl	122b0 <__stack_chk_fail@plt>
   2fda8:	push	{r4, r5, lr}
   2fdac:	movw	r4, #65176	; 0xfe98
   2fdb0:	movt	r4, #6
   2fdb4:	sub	sp, sp, #28
   2fdb8:	mov	r2, #10
   2fdbc:	mov	r5, r0
   2fdc0:	ldr	ip, [r4]
   2fdc4:	lsl	r1, r1, #3
   2fdc8:	add	r0, sp, #8
   2fdcc:	str	r1, [sp]
   2fdd0:	movw	r3, #37016	; 0x9098
   2fdd4:	mov	r1, #1
   2fdd8:	movt	r3, #5
   2fddc:	str	ip, [sp, #20]
   2fde0:	bl	12568 <__sprintf_chk@plt>
   2fde4:	add	r0, r5, #8
   2fde8:	add	r1, sp, #8
   2fdec:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   2fdf0:	ldr	r2, [sp, #20]
   2fdf4:	ldr	r3, [r4]
   2fdf8:	cmp	r2, r3
   2fdfc:	bne	2fe08 <__assert_fail@plt+0x1d630>
   2fe00:	add	sp, sp, #28
   2fe04:	pop	{r4, r5, pc}
   2fe08:	bl	122b0 <__stack_chk_fail@plt>
   2fe0c:	push	{r4, r5, lr}
   2fe10:	movw	r4, #65176	; 0xfe98
   2fe14:	movt	r4, #6
   2fe18:	sub	sp, sp, #28
   2fe1c:	cmp	r2, #0
   2fe20:	movw	ip, #11856	; 0x2e50
   2fe24:	ldr	lr, [r4]
   2fe28:	movt	ip, #5
   2fe2c:	movw	r3, #53816	; 0xd238
   2fe30:	movt	r3, #5
   2fe34:	moveq	r2, ip
   2fe38:	mov	r5, r0
   2fe3c:	movne	r2, r3
   2fe40:	lsl	r1, r1, #3
   2fe44:	str	r2, [sp]
   2fe48:	add	r0, sp, #8
   2fe4c:	mov	r2, #10
   2fe50:	str	r1, [sp, #4]
   2fe54:	movw	r3, #37024	; 0x90a0
   2fe58:	mov	r1, #1
   2fe5c:	movt	r3, #5
   2fe60:	str	lr, [sp, #20]
   2fe64:	bl	12568 <__sprintf_chk@plt>
   2fe68:	add	r0, r5, #8
   2fe6c:	add	r1, sp, #8
   2fe70:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   2fe74:	ldr	r2, [sp, #20]
   2fe78:	ldr	r3, [r4]
   2fe7c:	cmp	r2, r3
   2fe80:	bne	2fe8c <__assert_fail@plt+0x1d6b4>
   2fe84:	add	sp, sp, #28
   2fe88:	pop	{r4, r5, pc}
   2fe8c:	bl	122b0 <__stack_chk_fail@plt>
   2fe90:	movw	r1, #37032	; 0x90a8
   2fe94:	add	r0, r0, #8
   2fe98:	movt	r1, #5
   2fe9c:	b	2f774 <__assert_fail@plt+0x1cf9c>
   2fea0:	movw	r1, #37040	; 0x90b0
   2fea4:	add	r0, r0, #8
   2fea8:	movt	r1, #5
   2feac:	b	2f774 <__assert_fail@plt+0x1cf9c>
   2feb0:	push	{r4, r5, r6, r7, lr}
   2feb4:	movw	r4, #65176	; 0xfe98
   2feb8:	movt	r4, #6
   2febc:	sub	sp, sp, #36	; 0x24
   2fec0:	sub	r3, r3, #7
   2fec4:	mov	r6, r1
   2fec8:	ldr	ip, [r4]
   2fecc:	mov	r7, r2
   2fed0:	str	ip, [sp, #28]
   2fed4:	cmp	r3, #4
   2fed8:	ldrls	pc, [pc, r3, lsl #2]
   2fedc:	b	2ff74 <__assert_fail@plt+0x1d79c>
   2fee0:	andeq	pc, r2, r4, asr #30
   2fee4:	strdeq	pc, [r2], -r4
   2fee8:	andeq	pc, r2, r0, asr pc	; <UNPREDICTABLE>
   2feec:	andeq	pc, r2, ip, asr pc	; <UNPREDICTABLE>
   2fef0:	andeq	pc, r2, r8, ror #30
   2fef4:	movw	r1, #36916	; 0x9034
   2fef8:	movt	r1, #5
   2fefc:	add	r5, r0, #8
   2ff00:	mov	r0, r5
   2ff04:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   2ff08:	cmp	r0, #0
   2ff0c:	beq	2ff2c <__assert_fail@plt+0x1d754>
   2ff10:	cmp	r6, #0
   2ff14:	beq	2ff78 <__assert_fail@plt+0x1d7a0>
   2ff18:	mov	r0, r5
   2ff1c:	mov	r1, r6
   2ff20:	bl	2debc <__assert_fail@plt+0x1b6e4>
   2ff24:	adds	r0, r0, #0
   2ff28:	movne	r0, #1
   2ff2c:	ldr	r2, [sp, #28]
   2ff30:	ldr	r3, [r4]
   2ff34:	cmp	r2, r3
   2ff38:	bne	2ff9c <__assert_fail@plt+0x1d7c4>
   2ff3c:	add	sp, sp, #36	; 0x24
   2ff40:	pop	{r4, r5, r6, r7, pc}
   2ff44:	movw	r1, #36908	; 0x902c
   2ff48:	movt	r1, #5
   2ff4c:	b	2fefc <__assert_fail@plt+0x1d724>
   2ff50:	movw	r1, #36532	; 0x8eb4
   2ff54:	movt	r1, #5
   2ff58:	b	2fefc <__assert_fail@plt+0x1d724>
   2ff5c:	movw	r1, #36540	; 0x8ebc
   2ff60:	movt	r1, #5
   2ff64:	b	2fefc <__assert_fail@plt+0x1d724>
   2ff68:	movw	r1, #36924	; 0x903c
   2ff6c:	movt	r1, #5
   2ff70:	b	2fefc <__assert_fail@plt+0x1d724>
   2ff74:	bl	12790 <abort@plt>
   2ff78:	add	r0, sp, #8
   2ff7c:	str	r7, [sp]
   2ff80:	movw	r3, #36932	; 0x9044
   2ff84:	mov	r1, #1
   2ff88:	movt	r3, #5
   2ff8c:	mov	r2, #20
   2ff90:	mov	r6, r0
   2ff94:	bl	12568 <__sprintf_chk@plt>
   2ff98:	b	2ff18 <__assert_fail@plt+0x1d740>
   2ff9c:	bl	122b0 <__stack_chk_fail@plt>
   2ffa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ffa4:	sub	sp, sp, #36	; 0x24
   2ffa8:	movw	r4, #65176	; 0xfe98
   2ffac:	movt	r4, #6
   2ffb0:	ldr	fp, [sp, #76]	; 0x4c
   2ffb4:	mov	r5, r0
   2ffb8:	ldr	ip, [sp, #80]	; 0x50
   2ffbc:	add	r7, r5, #8
   2ffc0:	adds	fp, fp, #0
   2ffc4:	ldr	r0, [r4]
   2ffc8:	mov	r6, r1
   2ffcc:	mov	r8, r2
   2ffd0:	movne	fp, #1
   2ffd4:	cmp	ip, #0
   2ffd8:	movne	sl, #0
   2ffdc:	andeq	sl, fp, #1
   2ffe0:	cmp	sl, #0
   2ffe4:	ldr	ip, [r5, #4]
   2ffe8:	mov	r9, r3
   2ffec:	str	r0, [sp, #28]
   2fff0:	add	ip, ip, #2
   2fff4:	str	ip, [r5, #4]
   2fff8:	bne	300d0 <__assert_fail@plt+0x1d8f8>
   2fffc:	cmp	r6, #0
   30000:	beq	300e4 <__assert_fail@plt+0x1d90c>
   30004:	mov	r1, r6
   30008:	mov	r0, r7
   3000c:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   30010:	cmp	r0, #0
   30014:	beq	300b4 <__assert_fail@plt+0x1d8dc>
   30018:	ldr	ip, [sp, #72]	; 0x48
   3001c:	movw	r1, #37052	; 0x90bc
   30020:	movw	r3, #53584	; 0xd150
   30024:	movt	r1, #5
   30028:	cmp	ip, #0
   3002c:	moveq	r0, fp
   30030:	orrne	r0, fp, #1
   30034:	movt	r3, #5
   30038:	cmp	r9, #0
   3003c:	ldr	r2, [r5, #8]
   30040:	moveq	r9, r1
   30044:	movne	r9, r3
   30048:	cmp	r0, #0
   3004c:	str	r9, [r2, #16]
   30050:	mov	r0, #0
   30054:	str	r0, [r2, #20]
   30058:	str	r0, [r2, #24]
   3005c:	beq	30068 <__assert_fail@plt+0x1d890>
   30060:	cmp	fp, r0
   30064:	bne	30078 <__assert_fail@plt+0x1d8a0>
   30068:	mov	r3, #2
   3006c:	mov	r0, #1
   30070:	str	r3, [r2, #8]
   30074:	b	300b8 <__assert_fail@plt+0x1d8e0>
   30078:	movw	r1, #36976	; 0x9070
   3007c:	mov	r0, r7
   30080:	movt	r1, #5
   30084:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30088:	cmp	r0, #0
   3008c:	beq	300b4 <__assert_fail@plt+0x1d8dc>
   30090:	ldr	ip, [sp, #80]	; 0x50
   30094:	cmp	ip, #0
   30098:	beq	30108 <__assert_fail@plt+0x1d930>
   3009c:	mov	r0, r7
   300a0:	movw	r1, #36988	; 0x907c
   300a4:	movt	r1, #5
   300a8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   300ac:	cmp	r0, #0
   300b0:	bne	30134 <__assert_fail@plt+0x1d95c>
   300b4:	mov	r0, #0
   300b8:	ldr	r2, [sp, #28]
   300bc:	ldr	r3, [r4]
   300c0:	cmp	r2, r3
   300c4:	bne	3013c <__assert_fail@plt+0x1d964>
   300c8:	add	sp, sp, #36	; 0x24
   300cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   300d0:	mov	r0, r7
   300d4:	bl	2d81c <__assert_fail@plt+0x1b044>
   300d8:	subs	sl, r0, #0
   300dc:	bne	2fffc <__assert_fail@plt+0x1d824>
   300e0:	b	300b4 <__assert_fail@plt+0x1d8dc>
   300e4:	add	r0, sp, #8
   300e8:	str	r8, [sp]
   300ec:	movw	r3, #36932	; 0x9044
   300f0:	mov	r1, #1
   300f4:	movt	r3, #5
   300f8:	mov	r2, #20
   300fc:	mov	r6, r0
   30100:	bl	12568 <__sprintf_chk@plt>
   30104:	b	30004 <__assert_fail@plt+0x1d82c>
   30108:	mov	r1, sl
   3010c:	mov	r0, r7
   30110:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30114:	cmp	r0, #0
   30118:	beq	300b4 <__assert_fail@plt+0x1d8dc>
   3011c:	mov	r0, r7
   30120:	movw	r1, #10140	; 0x279c
   30124:	movt	r1, #5
   30128:	bl	2debc <__assert_fail@plt+0x1b6e4>
   3012c:	cmp	r0, #0
   30130:	beq	300b4 <__assert_fail@plt+0x1d8dc>
   30134:	ldr	r2, [r5, #8]
   30138:	b	30068 <__assert_fail@plt+0x1d890>
   3013c:	bl	122b0 <__stack_chk_fail@plt>
   30140:	push	{r4, r5, r6, r7, lr}
   30144:	movw	r5, #65176	; 0xfe98
   30148:	movt	r5, #6
   3014c:	mov	r4, r0
   30150:	sub	sp, sp, #36	; 0x24
   30154:	subs	r6, r1, #0
   30158:	ldr	r0, [r5]
   3015c:	mov	r7, r3
   30160:	str	r0, [sp, #28]
   30164:	beq	301f4 <__assert_fail@plt+0x1da1c>
   30168:	add	r0, r4, #8
   3016c:	mov	r1, r6
   30170:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   30174:	cmp	r0, #0
   30178:	beq	301dc <__assert_fail@plt+0x1da04>
   3017c:	cmp	r7, #0
   30180:	movw	r1, #37072	; 0x90d0
   30184:	movt	r1, #5
   30188:	ldr	lr, [r4, #8]
   3018c:	movw	r2, #37064	; 0x90c8
   30190:	movt	r2, #5
   30194:	moveq	ip, r1
   30198:	ldr	r1, [r4, #16]
   3019c:	movne	ip, r2
   301a0:	ldr	r0, [r4]
   301a4:	str	ip, [lr, #16]
   301a8:	mov	r3, r6
   301ac:	str	r1, [sp]
   301b0:	movw	r2, #37080	; 0x90d8
   301b4:	ldrb	ip, [ip]
   301b8:	movt	r2, #5
   301bc:	mov	r1, #1
   301c0:	str	ip, [sp, #4]
   301c4:	bl	125d4 <__fprintf_chk@plt>
   301c8:	ldr	r3, [r4, #8]
   301cc:	mov	r2, #0
   301d0:	mov	r0, r4
   301d4:	str	r2, [r3, #8]
   301d8:	bl	2e750 <__assert_fail@plt+0x1bf78>
   301dc:	ldr	r2, [sp, #28]
   301e0:	ldr	r3, [r5]
   301e4:	cmp	r2, r3
   301e8:	bne	30218 <__assert_fail@plt+0x1da40>
   301ec:	add	sp, sp, #36	; 0x24
   301f0:	pop	{r4, r5, r6, r7, pc}
   301f4:	add	r0, sp, #8
   301f8:	str	r2, [sp]
   301fc:	movw	r3, #36932	; 0x9044
   30200:	mov	r1, #1
   30204:	movt	r3, #5
   30208:	mov	r2, #20
   3020c:	mov	r6, r0
   30210:	bl	12568 <__sprintf_chk@plt>
   30214:	b	30168 <__assert_fail@plt+0x1d990>
   30218:	bl	122b0 <__stack_chk_fail@plt>
   3021c:	ldr	r3, [r0, #8]
   30220:	push	{r4, r5, r6, lr}
   30224:	cmp	r3, #0
   30228:	mov	r5, r0
   3022c:	beq	30350 <__assert_fail@plt+0x1db78>
   30230:	ldr	r3, [r3]
   30234:	cmp	r3, #0
   30238:	beq	30350 <__assert_fail@plt+0x1db78>
   3023c:	add	r4, r0, #8
   30240:	mov	r0, r4
   30244:	bl	2d81c <__assert_fail@plt+0x1b044>
   30248:	subs	r6, r0, #0
   3024c:	beq	302c0 <__assert_fail@plt+0x1dae8>
   30250:	mov	r2, #6
   30254:	movw	r1, #36532	; 0x8eb4
   30258:	movt	r1, #5
   3025c:	bl	12784 <strncmp@plt>
   30260:	cmp	r0, #0
   30264:	mov	r0, r4
   30268:	addeq	r6, r6, #6
   3026c:	mov	r1, r6
   30270:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   30274:	cmp	r0, #0
   30278:	beq	302c0 <__assert_fail@plt+0x1dae8>
   3027c:	ldr	r2, [sp, #16]
   30280:	cmp	r2, #0
   30284:	bne	30334 <__assert_fail@plt+0x1db5c>
   30288:	ldr	r3, [sp, #20]
   3028c:	cmp	r3, #2
   30290:	movwhi	r1, #37100	; 0x90ec
   30294:	movthi	r1, #5
   30298:	bhi	302b0 <__assert_fail@plt+0x1dad8>
   3029c:	ldr	r2, [sp, #20]
   302a0:	movw	r3, #35080	; 0x8908
   302a4:	movt	r3, #5
   302a8:	add	r3, r3, r2, lsl #2
   302ac:	ldr	r1, [r3, #408]	; 0x198
   302b0:	mov	r0, r4
   302b4:	bl	2de18 <__assert_fail@plt+0x1b640>
   302b8:	cmp	r0, #0
   302bc:	bne	302c8 <__assert_fail@plt+0x1daf0>
   302c0:	mov	r0, #0
   302c4:	pop	{r4, r5, r6, pc}
   302c8:	mov	r0, r4
   302cc:	bl	2d81c <__assert_fail@plt+0x1b044>
   302d0:	subs	r6, r0, #0
   302d4:	beq	302c0 <__assert_fail@plt+0x1dae8>
   302d8:	ldr	r3, [r5, #8]
   302dc:	ldr	r3, [r3, #24]
   302e0:	cmp	r3, #0
   302e4:	beq	30300 <__assert_fail@plt+0x1db28>
   302e8:	movw	r1, #10648	; 0x2998
   302ec:	mov	r0, r4
   302f0:	movt	r1, #5
   302f4:	bl	2f614 <__assert_fail@plt+0x1ce3c>
   302f8:	cmp	r0, #0
   302fc:	beq	302c0 <__assert_fail@plt+0x1dae8>
   30300:	mov	r0, r4
   30304:	mov	r1, r6
   30308:	bl	2f614 <__assert_fail@plt+0x1ce3c>
   3030c:	cmp	r0, #0
   30310:	beq	302c0 <__assert_fail@plt+0x1dae8>
   30314:	ldr	r3, [r5, #8]
   30318:	mov	r0, r6
   3031c:	ldr	r2, [r3, #24]
   30320:	add	r2, r2, #1
   30324:	str	r2, [r3, #24]
   30328:	bl	121f0 <free@plt>
   3032c:	mov	r0, #1
   30330:	pop	{r4, r5, r6, pc}
   30334:	movw	r1, #37192	; 0x9148
   30338:	mov	r0, r4
   3033c:	movt	r1, #5
   30340:	bl	2de18 <__assert_fail@plt+0x1b640>
   30344:	cmp	r0, #0
   30348:	bne	30288 <__assert_fail@plt+0x1dab0>
   3034c:	b	302c0 <__assert_fail@plt+0x1dae8>
   30350:	movw	r0, #37128	; 0x9108
   30354:	movw	r1, #36044	; 0x8ccc
   30358:	movt	r0, #5
   3035c:	movt	r1, #5
   30360:	movw	r2, #2234	; 0x8ba
   30364:	ldr	r3, [pc]	; 3036c <__assert_fail@plt+0x1db94>
   30368:	bl	127d8 <__assert_fail@plt>
   3036c:	andeq	r8, r5, ip, lsl #21
   30370:	push	{r4, r5, lr}
   30374:	movw	r4, #65176	; 0xfe98
   30378:	movt	r4, #6
   3037c:	sub	sp, sp, #28
   30380:	cmp	r1, #4
   30384:	mov	r5, r0
   30388:	ldr	r3, [r4]
   3038c:	str	r3, [sp, #20]
   30390:	beq	303f4 <__assert_fail@plt+0x1dc1c>
   30394:	cmp	r1, #8
   30398:	beq	303e0 <__assert_fail@plt+0x1dc08>
   3039c:	lsl	r1, r1, #3
   303a0:	movw	r3, #37220	; 0x9164
   303a4:	str	r1, [sp]
   303a8:	add	r0, sp, #8
   303ac:	mov	r1, #1
   303b0:	movt	r3, #5
   303b4:	mov	r2, #10
   303b8:	bl	12568 <__sprintf_chk@plt>
   303bc:	add	r1, sp, #8
   303c0:	add	r0, r5, #8
   303c4:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   303c8:	ldr	r2, [sp, #20]
   303cc:	ldr	r3, [r4]
   303d0:	cmp	r2, r3
   303d4:	bne	30408 <__assert_fail@plt+0x1dc30>
   303d8:	add	sp, sp, #28
   303dc:	pop	{r4, r5, pc}
   303e0:	movw	r1, #37212	; 0x915c
   303e4:	add	r0, r0, #8
   303e8:	movt	r1, #5
   303ec:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   303f0:	b	303c8 <__assert_fail@plt+0x1dbf0>
   303f4:	movw	r1, #37204	; 0x9154
   303f8:	add	r0, r0, #8
   303fc:	movt	r1, #5
   30400:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   30404:	b	303c8 <__assert_fail@plt+0x1dbf0>
   30408:	bl	122b0 <__stack_chk_fail@plt>
   3040c:	push	{r4, lr}
   30410:	mov	r4, r0
   30414:	bl	30370 <__assert_fail@plt+0x1db98>
   30418:	cmp	r0, #0
   3041c:	popeq	{r4, pc}
   30420:	add	r0, r4, #8
   30424:	movw	r1, #37228	; 0x916c
   30428:	pop	{r4, lr}
   3042c:	movt	r1, #5
   30430:	b	2de18 <__assert_fail@plt+0x1b640>
   30434:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30438:	movw	r7, #65176	; 0xfe98
   3043c:	movt	r7, #6
   30440:	ldr	r1, [r0, #12]
   30444:	mov	r5, r3
   30448:	sub	sp, sp, #32
   3044c:	ldr	r3, [r7]
   30450:	cmp	r1, #0
   30454:	mov	r6, r0
   30458:	mov	r4, r2
   3045c:	movle	r0, #1
   30460:	str	r3, [sp, #28]
   30464:	ble	305c8 <__assert_fail@plt+0x1ddf0>
   30468:	ldr	ip, [r6, #16]
   3046c:	mov	r9, #0
   30470:	ldr	r3, [r6, #8]
   30474:	mov	r1, #1
   30478:	ldr	r0, [r6]
   3047c:	movw	r2, #37240	; 0x9178
   30480:	movt	r2, #5
   30484:	movw	r8, #2952	; 0xb88
   30488:	ldr	r3, [r3, #20]
   3048c:	movt	r8, #7
   30490:	str	r9, [r6, #12]
   30494:	str	ip, [sp]
   30498:	bl	125d4 <__fprintf_chk@plt>
   3049c:	ldr	r3, [r6, #8]
   304a0:	ldr	r0, [r3, #20]
   304a4:	bl	121f0 <free@plt>
   304a8:	mov	r0, r4
   304ac:	mov	r1, r5
   304b0:	add	r2, sp, #8
   304b4:	bl	2d74c <__assert_fail@plt+0x1af74>
   304b8:	mov	r2, #16
   304bc:	add	r0, sp, #8
   304c0:	mov	r1, r9
   304c4:	ldr	r5, [r6, #20]
   304c8:	ldr	sl, [r6, #24]
   304cc:	ldr	r4, [r6]
   304d0:	bl	1216c <bfd_scan_vma@plt>
   304d4:	str	r9, [r8]
   304d8:	mov	r2, sl
   304dc:	strd	r0, [r8, #8]
   304e0:	mov	r0, r5
   304e4:	movw	r1, #55160	; 0xd778
   304e8:	movt	r1, #2
   304ec:	bl	12754 <bfd_map_over_sections@plt>
   304f0:	ldr	r3, [r8]
   304f4:	cmp	r3, r9
   304f8:	beq	305e0 <__assert_fail@plt+0x1de08>
   304fc:	movw	r2, #37000	; 0x9088
   30500:	mov	r0, r4
   30504:	ldr	r3, [r8, #24]
   30508:	mov	r1, #1
   3050c:	movt	r2, #5
   30510:	bl	125d4 <__fprintf_chk@plt>
   30514:	ldr	r3, [r6, #8]
   30518:	ldr	r4, [r3, #12]
   3051c:	ldr	r8, [r3, #16]
   30520:	cmp	r4, #0
   30524:	beq	305fc <__assert_fail@plt+0x1de24>
   30528:	ldrb	r3, [r4]
   3052c:	cmp	r3, #0
   30530:	addne	r5, r6, #8
   30534:	movne	r9, #109	; 0x6d
   30538:	addeq	r5, r6, #8
   3053c:	moveq	r4, r3
   30540:	moveq	r9, #102	; 0x66
   30544:	mov	r0, r5
   30548:	bl	2d81c <__assert_fail@plt+0x1b044>
   3054c:	subs	r2, r0, #0
   30550:	beq	3061c <__assert_fail@plt+0x1de44>
   30554:	ldr	r0, [r6]
   30558:	mov	r3, r9
   3055c:	str	r2, [sp]
   30560:	mov	r1, #1
   30564:	movw	r2, #37252	; 0x9184
   30568:	movt	r2, #5
   3056c:	bl	125d4 <__fprintf_chk@plt>
   30570:	cmp	r8, #0
   30574:	beq	30590 <__assert_fail@plt+0x1ddb8>
   30578:	movw	r0, #36108	; 0x8d0c
   3057c:	mov	r1, #1
   30580:	movt	r0, #5
   30584:	mov	r2, #6
   30588:	ldr	r3, [r6]
   3058c:	bl	12340 <fwrite@plt>
   30590:	cmp	r4, #0
   30594:	beq	305b8 <__assert_fail@plt+0x1dde0>
   30598:	movw	r2, #36128	; 0x8d20
   3059c:	ldr	r0, [r6]
   305a0:	movt	r2, #5
   305a4:	mov	r1, #1
   305a8:	mov	r3, r4
   305ac:	bl	125d4 <__fprintf_chk@plt>
   305b0:	mov	r0, r4
   305b4:	bl	121f0 <free@plt>
   305b8:	ldr	r1, [r6]
   305bc:	mov	r0, #10
   305c0:	bl	12694 <fputc@plt>
   305c4:	mov	r0, #1
   305c8:	ldr	r2, [sp, #28]
   305cc:	ldr	r3, [r7]
   305d0:	cmp	r2, r3
   305d4:	bne	30624 <__assert_fail@plt+0x1de4c>
   305d8:	add	sp, sp, #32
   305dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   305e0:	mov	r3, r4
   305e4:	movw	r0, #37248	; 0x9180
   305e8:	mov	r1, #1
   305ec:	mov	r2, #2
   305f0:	movt	r0, #5
   305f4:	bl	12340 <fwrite@plt>
   305f8:	b	30514 <__assert_fail@plt+0x1dd3c>
   305fc:	add	r5, r6, #8
   30600:	movw	r1, #42900	; 0xa794
   30604:	movt	r1, #5
   30608:	mov	r0, r5
   3060c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30610:	cmp	r0, #0
   30614:	movne	r9, #102	; 0x66
   30618:	bne	30544 <__assert_fail@plt+0x1dd6c>
   3061c:	mov	r0, #0
   30620:	b	305c8 <__assert_fail@plt+0x1ddf0>
   30624:	bl	122b0 <__stack_chk_fail@plt>
   30628:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3062c:	movw	r8, #65176	; 0xfe98
   30630:	movt	r8, #6
   30634:	ldr	r3, [r0, #4]
   30638:	mov	sl, r2
   3063c:	sub	sp, sp, #32
   30640:	ldr	r2, [r8]
   30644:	cmp	r3, #0
   30648:	mov	r7, r0
   3064c:	mov	r9, r1
   30650:	ldrd	r4, [sp, #64]	; 0x40
   30654:	movne	r6, #0
   30658:	str	r2, [sp, #28]
   3065c:	beq	3067c <__assert_fail@plt+0x1dea4>
   30660:	mov	r0, #32
   30664:	ldr	r1, [r7]
   30668:	bl	12334 <_IO_putc@plt>
   3066c:	ldr	r0, [r7, #4]
   30670:	add	r6, r6, #1
   30674:	cmp	r6, r0
   30678:	bcc	30660 <__assert_fail@plt+0x1de88>
   3067c:	add	r6, sp, #8
   30680:	mov	r0, r4
   30684:	mov	r1, r5
   30688:	mov	r2, r6
   3068c:	bl	2d74c <__assert_fail@plt+0x1af74>
   30690:	ldr	r0, [r7]
   30694:	mov	r3, r9
   30698:	str	r6, [sp, #4]
   3069c:	str	sl, [sp]
   306a0:	movw	r2, #37272	; 0x9198
   306a4:	mov	r1, #1
   306a8:	movt	r2, #5
   306ac:	bl	125d4 <__fprintf_chk@plt>
   306b0:	ldr	r2, [sp, #28]
   306b4:	ldr	r3, [r8]
   306b8:	mov	r0, #1
   306bc:	cmp	r2, r3
   306c0:	bne	306cc <__assert_fail@plt+0x1def4>
   306c4:	add	sp, sp, #32
   306c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   306cc:	bl	122b0 <__stack_chk_fail@plt>
   306d0:	push	{r4, r5, r6, r7, r8, lr}
   306d4:	movw	r6, #65176	; 0xfe98
   306d8:	movt	r6, #6
   306dc:	sub	sp, sp, #32
   306e0:	mov	r7, r2
   306e4:	mov	r5, r0
   306e8:	ldr	r3, [r6]
   306ec:	str	r3, [sp, #28]
   306f0:	bl	2df48 <__assert_fail@plt+0x1b770>
   306f4:	cmp	r0, #0
   306f8:	bne	30714 <__assert_fail@plt+0x1df3c>
   306fc:	ldr	r2, [sp, #28]
   30700:	ldr	r3, [r6]
   30704:	cmp	r2, r3
   30708:	bne	307e0 <__assert_fail@plt+0x1e008>
   3070c:	add	sp, sp, #32
   30710:	pop	{r4, r5, r6, r7, r8, pc}
   30714:	add	r0, r5, #8
   30718:	bl	2d81c <__assert_fail@plt+0x1b044>
   3071c:	subs	r8, r0, #0
   30720:	beq	307d8 <__assert_fail@plt+0x1e000>
   30724:	ldr	r3, [r5, #4]
   30728:	cmp	r3, #0
   3072c:	movne	r4, #0
   30730:	beq	30750 <__assert_fail@plt+0x1df78>
   30734:	ldr	r1, [r5]
   30738:	mov	r0, #32
   3073c:	bl	12334 <_IO_putc@plt>
   30740:	ldr	r1, [r5, #4]
   30744:	add	r4, r4, #1
   30748:	cmp	r4, r1
   3074c:	bcc	30734 <__assert_fail@plt+0x1df5c>
   30750:	cmp	r7, #2
   30754:	bcc	30780 <__assert_fail@plt+0x1dfa8>
   30758:	cmp	r7, #3
   3075c:	bls	307bc <__assert_fail@plt+0x1dfe4>
   30760:	cmp	r7, #5
   30764:	bne	30780 <__assert_fail@plt+0x1dfa8>
   30768:	movw	r0, #36880	; 0x9010
   3076c:	mov	r1, #1
   30770:	movt	r0, #5
   30774:	mov	r2, #9
   30778:	ldr	r3, [r5]
   3077c:	bl	12340 <fwrite@plt>
   30780:	add	r4, sp, #8
   30784:	ldrd	r0, [sp, #56]	; 0x38
   30788:	mov	r2, r4
   3078c:	bl	2d74c <__assert_fail@plt+0x1af74>
   30790:	ldr	r0, [r5]
   30794:	mov	r1, #1
   30798:	mov	r3, r8
   3079c:	str	r4, [sp]
   307a0:	movw	r2, #37304	; 0x91b8
   307a4:	movt	r2, #5
   307a8:	bl	125d4 <__fprintf_chk@plt>
   307ac:	mov	r0, r8
   307b0:	bl	121f0 <free@plt>
   307b4:	mov	r0, #1
   307b8:	b	306fc <__assert_fail@plt+0x1df24>
   307bc:	movw	r0, #36476	; 0x8e7c
   307c0:	mov	r1, #1
   307c4:	mov	r2, #7
   307c8:	ldr	r3, [r5]
   307cc:	movt	r0, #5
   307d0:	bl	12340 <fwrite@plt>
   307d4:	b	30780 <__assert_fail@plt+0x1dfa8>
   307d8:	mov	r0, r8
   307dc:	b	306fc <__assert_fail@plt+0x1df24>
   307e0:	bl	122b0 <__stack_chk_fail@plt>
   307e4:	push	{r4, r5, r6, r7, r8, lr}
   307e8:	movw	r8, #65176	; 0xfe98
   307ec:	movt	r8, #6
   307f0:	ldr	r1, [r0, #12]
   307f4:	mov	r5, r3
   307f8:	sub	sp, sp, #24
   307fc:	ldr	r3, [r8]
   30800:	cmp	r1, #0
   30804:	mov	r7, r0
   30808:	mov	r4, r2
   3080c:	str	r3, [sp, #20]
   30810:	ble	30834 <__assert_fail@plt+0x1e05c>
   30814:	ldr	r3, [r7]
   30818:	movw	r0, #26232	; 0x6678
   3081c:	mov	r1, #1
   30820:	movt	r0, #5
   30824:	mov	r2, #2
   30828:	bl	12340 <fwrite@plt>
   3082c:	mov	r3, #0
   30830:	str	r3, [r7, #12]
   30834:	ldr	r3, [r7, #4]
   30838:	cmp	r3, #0
   3083c:	movne	r6, #0
   30840:	beq	30860 <__assert_fail@plt+0x1e088>
   30844:	mov	r0, #32
   30848:	ldr	r1, [r7]
   3084c:	bl	12334 <_IO_putc@plt>
   30850:	ldr	r3, [r7, #4]
   30854:	add	r6, r6, #1
   30858:	cmp	r6, r3
   3085c:	bcc	30844 <__assert_fail@plt+0x1e06c>
   30860:	mov	r0, r4
   30864:	mov	r1, r5
   30868:	mov	r2, sp
   3086c:	bl	2d74c <__assert_fail@plt+0x1af74>
   30870:	mov	r3, sp
   30874:	mov	r1, #1
   30878:	movw	r2, #37320	; 0x91c8
   3087c:	ldr	r0, [r7]
   30880:	movt	r2, #5
   30884:	bl	125d4 <__fprintf_chk@plt>
   30888:	ldr	r1, [sp, #20]
   3088c:	ldr	r2, [r8]
   30890:	mov	r0, #1
   30894:	ldr	r3, [r7, #4]
   30898:	cmp	r1, r2
   3089c:	add	r3, r3, #2
   308a0:	str	r3, [r7, #4]
   308a4:	bne	308b0 <__assert_fail@plt+0x1e0d8>
   308a8:	add	sp, sp, #24
   308ac:	pop	{r4, r5, r6, r7, r8, pc}
   308b0:	bl	122b0 <__stack_chk_fail@plt>
   308b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   308b8:	movw	r4, #65176	; 0xfe98
   308bc:	movt	r4, #6
   308c0:	mov	r6, r2
   308c4:	sub	r2, r2, #3
   308c8:	sub	sp, sp, #44	; 0x2c
   308cc:	ldr	r3, [r4]
   308d0:	cmp	r2, #1
   308d4:	mov	r5, r0
   308d8:	str	r3, [sp, #36]	; 0x24
   308dc:	bls	30994 <__assert_fail@plt+0x1e1bc>
   308e0:	mov	r0, r5
   308e4:	bl	2df48 <__assert_fail@plt+0x1b770>
   308e8:	cmp	r0, #0
   308ec:	bne	3090c <__assert_fail@plt+0x1e134>
   308f0:	mov	r0, #0
   308f4:	ldr	r2, [sp, #36]	; 0x24
   308f8:	ldr	r3, [r4]
   308fc:	cmp	r2, r3
   30900:	bne	309d0 <__assert_fail@plt+0x1e1f8>
   30904:	add	sp, sp, #44	; 0x2c
   30908:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3090c:	add	r0, r5, #8
   30910:	bl	2d81c <__assert_fail@plt+0x1b044>
   30914:	subs	r7, r0, #0
   30918:	beq	309c8 <__assert_fail@plt+0x1e1f0>
   3091c:	ldr	r3, [r5, #12]
   30920:	cmp	r3, #1
   30924:	beq	30940 <__assert_fail@plt+0x1e168>
   30928:	movw	r0, #10648	; 0x2998
   3092c:	mov	r1, #1
   30930:	movt	r0, #5
   30934:	mov	r2, #2
   30938:	ldr	r3, [r5]
   3093c:	bl	12340 <fwrite@plt>
   30940:	cmp	r6, #2
   30944:	cmpne	r6, #4
   30948:	beq	309ac <__assert_fail@plt+0x1e1d4>
   3094c:	add	r6, sp, #16
   30950:	ldrd	r0, [sp, #72]	; 0x48
   30954:	mov	r2, r6
   30958:	bl	2d74c <__assert_fail@plt+0x1af74>
   3095c:	mov	r3, r7
   30960:	ldr	r0, [r5]
   30964:	mov	r1, #1
   30968:	str	r6, [sp]
   3096c:	movw	r2, #37332	; 0x91d4
   30970:	movt	r2, #5
   30974:	bl	125d4 <__fprintf_chk@plt>
   30978:	mov	r0, r7
   3097c:	bl	121f0 <free@plt>
   30980:	ldr	r3, [r5, #12]
   30984:	mov	r0, #1
   30988:	add	r3, r3, r0
   3098c:	str	r3, [r5, #12]
   30990:	b	308f4 <__assert_fail@plt+0x1e11c>
   30994:	str	r1, [sp, #12]
   30998:	bl	2f344 <__assert_fail@plt+0x1cb6c>
   3099c:	ldr	r1, [sp, #12]
   309a0:	cmp	r0, #0
   309a4:	bne	308e0 <__assert_fail@plt+0x1e108>
   309a8:	b	308f0 <__assert_fail@plt+0x1e118>
   309ac:	movw	r0, #36880	; 0x9010
   309b0:	mov	r1, #1
   309b4:	mov	r2, #9
   309b8:	ldr	r3, [r5]
   309bc:	movt	r0, #5
   309c0:	bl	12340 <fwrite@plt>
   309c4:	b	3094c <__assert_fail@plt+0x1e174>
   309c8:	mov	r0, r7
   309cc:	b	308f4 <__assert_fail@plt+0x1e11c>
   309d0:	bl	122b0 <__stack_chk_fail@plt>
   309d4:	push	{r4, r5, r6, r7, r8, lr}
   309d8:	movw	r8, #65176	; 0xfe98
   309dc:	ldr	r1, [r0, #4]
   309e0:	movt	r8, #6
   309e4:	mov	r4, r2
   309e8:	mov	r5, r3
   309ec:	ldr	r2, [r8]
   309f0:	sub	r3, r1, #2
   309f4:	sub	sp, sp, #24
   309f8:	cmp	r3, #0
   309fc:	mov	r7, r0
   30a00:	str	r3, [r0, #4]
   30a04:	str	r2, [sp, #20]
   30a08:	movne	r6, #0
   30a0c:	beq	30a2c <__assert_fail@plt+0x1e254>
   30a10:	mov	r0, #32
   30a14:	ldr	r1, [r7]
   30a18:	bl	12334 <_IO_putc@plt>
   30a1c:	ldr	r3, [r7, #4]
   30a20:	add	r6, r6, #1
   30a24:	cmp	r6, r3
   30a28:	bcc	30a10 <__assert_fail@plt+0x1e238>
   30a2c:	mov	r0, r4
   30a30:	mov	r1, r5
   30a34:	mov	r2, sp
   30a38:	bl	2d74c <__assert_fail@plt+0x1af74>
   30a3c:	mov	r3, sp
   30a40:	ldr	r0, [r7]
   30a44:	movw	r2, #37344	; 0x91e0
   30a48:	mov	r1, #1
   30a4c:	movt	r2, #5
   30a50:	bl	125d4 <__fprintf_chk@plt>
   30a54:	ldr	r2, [sp, #20]
   30a58:	ldr	r3, [r8]
   30a5c:	mov	r0, #1
   30a60:	cmp	r2, r3
   30a64:	bne	30a70 <__assert_fail@plt+0x1e298>
   30a68:	add	sp, sp, #24
   30a6c:	pop	{r4, r5, r6, r7, r8, pc}
   30a70:	bl	122b0 <__stack_chk_fail@plt>
   30a74:	push	{r4, r5, r6, r7, lr}
   30a78:	movw	r6, #65176	; 0xfe98
   30a7c:	movt	r6, #6
   30a80:	ldr	r1, [r0, #8]
   30a84:	mov	r5, r3
   30a88:	sub	sp, sp, #60	; 0x3c
   30a8c:	ldr	r3, [r6]
   30a90:	cmp	r1, #0
   30a94:	mov	r7, r0
   30a98:	mov	r4, r2
   30a9c:	str	r3, [sp, #52]	; 0x34
   30aa0:	beq	30b90 <__assert_fail@plt+0x1e3b8>
   30aa4:	movw	r1, #11856	; 0x2e50
   30aa8:	movt	r1, #5
   30aac:	bl	2df48 <__assert_fail@plt+0x1b770>
   30ab0:	cmp	r0, #0
   30ab4:	bne	30ad0 <__assert_fail@plt+0x1e2f8>
   30ab8:	ldr	r2, [sp, #52]	; 0x34
   30abc:	ldr	r3, [r6]
   30ac0:	cmp	r2, r3
   30ac4:	bne	30b8c <__assert_fail@plt+0x1e3b4>
   30ac8:	add	sp, sp, #60	; 0x3c
   30acc:	pop	{r4, r5, r6, r7, pc}
   30ad0:	mov	r1, #1
   30ad4:	mov	r2, #20
   30ad8:	strd	r4, [sp]
   30adc:	add	r0, sp, #12
   30ae0:	movw	r3, #37356	; 0x91ec
   30ae4:	movt	r3, #5
   30ae8:	bl	12568 <__sprintf_chk@plt>
   30aec:	ldrd	r2, [sp, #80]	; 0x50
   30af0:	add	r7, r7, #8
   30af4:	mov	r1, #1
   30af8:	add	r0, sp, #32
   30afc:	strd	r2, [sp]
   30b00:	mov	r2, #20
   30b04:	movw	r3, #37356	; 0x91ec
   30b08:	movt	r3, #5
   30b0c:	bl	12568 <__sprintf_chk@plt>
   30b10:	mov	r0, r7
   30b14:	movw	r1, #37364	; 0x91f4
   30b18:	movt	r1, #5
   30b1c:	bl	2de18 <__assert_fail@plt+0x1b640>
   30b20:	cmp	r0, #0
   30b24:	bne	30b30 <__assert_fail@plt+0x1e358>
   30b28:	mov	r0, #0
   30b2c:	b	30ab8 <__assert_fail@plt+0x1e2e0>
   30b30:	movw	r1, #37372	; 0x91fc
   30b34:	mov	r0, r7
   30b38:	movt	r1, #5
   30b3c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30b40:	cmp	r0, #0
   30b44:	beq	30b28 <__assert_fail@plt+0x1e350>
   30b48:	add	r1, sp, #12
   30b4c:	mov	r0, r7
   30b50:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30b54:	cmp	r0, #0
   30b58:	beq	30b28 <__assert_fail@plt+0x1e350>
   30b5c:	movw	r1, #10496	; 0x2900
   30b60:	mov	r0, r7
   30b64:	movt	r1, #5
   30b68:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30b6c:	cmp	r0, #0
   30b70:	beq	30b28 <__assert_fail@plt+0x1e350>
   30b74:	mov	r0, r7
   30b78:	add	r1, sp, #32
   30b7c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30b80:	adds	r0, r0, #0
   30b84:	movne	r0, #1
   30b88:	b	30ab8 <__assert_fail@plt+0x1e2e0>
   30b8c:	bl	122b0 <__stack_chk_fail@plt>
   30b90:	movw	r0, #36016	; 0x8cb0
   30b94:	movw	r1, #36044	; 0x8ccc
   30b98:	movt	r0, #5
   30b9c:	movt	r1, #5
   30ba0:	movw	r2, #807	; 0x327
   30ba4:	ldr	r3, [pc]	; 30bac <__assert_fail@plt+0x1e3d4>
   30ba8:	bl	127d8 <__assert_fail@plt>
   30bac:	andeq	r8, r5, ip, lsr #21
   30bb0:	push	{r4, r5, r6, r7, r8, r9, lr}
   30bb4:	movw	r6, #65176	; 0xfe98
   30bb8:	movt	r6, #6
   30bbc:	mov	r5, r3
   30bc0:	sub	sp, sp, #36	; 0x24
   30bc4:	mov	r4, r2
   30bc8:	ldr	r3, [r6]
   30bcc:	mov	r7, r0
   30bd0:	str	r3, [sp, #28]
   30bd4:	bl	2df48 <__assert_fail@plt+0x1b770>
   30bd8:	cmp	r0, #0
   30bdc:	bne	30bf8 <__assert_fail@plt+0x1e420>
   30be0:	ldr	r2, [sp, #28]
   30be4:	ldr	r3, [r6]
   30be8:	cmp	r2, r3
   30bec:	bne	30d38 <__assert_fail@plt+0x1e560>
   30bf0:	add	sp, sp, #36	; 0x24
   30bf4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   30bf8:	add	r8, r7, #8
   30bfc:	movw	r1, #36892	; 0x901c
   30c00:	movt	r1, #5
   30c04:	mov	r0, r8
   30c08:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30c0c:	cmp	r0, #0
   30c10:	beq	30c6c <__assert_fail@plt+0x1e494>
   30c14:	ldrd	r2, [sp, #64]	; 0x40
   30c18:	add	r9, sp, #8
   30c1c:	orrs	r3, r2, r3
   30c20:	bne	30c74 <__assert_fail@plt+0x1e49c>
   30c24:	mov	r1, #1
   30c28:	mov	r2, #20
   30c2c:	strd	r4, [sp]
   30c30:	movw	r3, #36692	; 0x8f54
   30c34:	mov	r0, r9
   30c38:	movt	r3, #5
   30c3c:	bl	12568 <__sprintf_chk@plt>
   30c40:	mov	r0, r8
   30c44:	movw	r1, #37652	; 0x9314
   30c48:	movt	r1, #5
   30c4c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30c50:	cmp	r0, #0
   30c54:	beq	30c6c <__assert_fail@plt+0x1e494>
   30c58:	mov	r1, r9
   30c5c:	mov	r0, r8
   30c60:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30c64:	cmp	r0, #0
   30c68:	bne	30cdc <__assert_fail@plt+0x1e504>
   30c6c:	mov	r0, #0
   30c70:	b	30be0 <__assert_fail@plt+0x1e408>
   30c74:	ldrd	r2, [sp, #64]	; 0x40
   30c78:	mov	r1, #1
   30c7c:	mov	r0, r9
   30c80:	strd	r2, [sp]
   30c84:	mov	r2, #20
   30c88:	movw	r3, #36692	; 0x8f54
   30c8c:	movt	r3, #5
   30c90:	bl	12568 <__sprintf_chk@plt>
   30c94:	mov	r0, r8
   30c98:	movw	r1, #37376	; 0x9200
   30c9c:	movt	r1, #5
   30ca0:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30ca4:	cmp	r0, #0
   30ca8:	beq	30c6c <__assert_fail@plt+0x1e494>
   30cac:	mov	r0, r8
   30cb0:	mov	r1, r9
   30cb4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30cb8:	cmp	r0, #0
   30cbc:	beq	30c6c <__assert_fail@plt+0x1e494>
   30cc0:	movw	r1, #10648	; 0x2998
   30cc4:	mov	r0, r8
   30cc8:	movt	r1, #5
   30ccc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30cd0:	cmp	r0, #0
   30cd4:	bne	30c24 <__assert_fail@plt+0x1e44c>
   30cd8:	b	30c6c <__assert_fail@plt+0x1e494>
   30cdc:	movw	r1, #36900	; 0x9024
   30ce0:	mov	r0, r8
   30ce4:	movt	r1, #5
   30ce8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30cec:	cmp	r0, #0
   30cf0:	beq	30c6c <__assert_fail@plt+0x1e494>
   30cf4:	mov	r0, r7
   30cf8:	bl	2e750 <__assert_fail@plt+0x1bf78>
   30cfc:	cmp	r0, #0
   30d00:	beq	30c6c <__assert_fail@plt+0x1e494>
   30d04:	mov	r0, r8
   30d08:	bl	2d81c <__assert_fail@plt+0x1b044>
   30d0c:	subs	r4, r0, #0
   30d10:	beq	30c6c <__assert_fail@plt+0x1e494>
   30d14:	mov	r0, r7
   30d18:	ldr	r1, [sp, #72]	; 0x48
   30d1c:	bl	2e79c <__assert_fail@plt+0x1bfc4>
   30d20:	cmp	r0, #0
   30d24:	beq	30c6c <__assert_fail@plt+0x1e494>
   30d28:	mov	r0, r8
   30d2c:	mov	r1, r4
   30d30:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30d34:	b	30be0 <__assert_fail@plt+0x1e408>
   30d38:	bl	122b0 <__stack_chk_fail@plt>
   30d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30d40:	movw	r9, #65176	; 0xfe98
   30d44:	movt	r9, #6
   30d48:	add	r8, r0, #8
   30d4c:	sub	sp, sp, #36	; 0x24
   30d50:	mov	r4, r1
   30d54:	ldr	ip, [r9]
   30d58:	movw	r1, #36924	; 0x903c
   30d5c:	mov	r0, r8
   30d60:	movt	r1, #5
   30d64:	mov	fp, r2
   30d68:	mov	sl, r3
   30d6c:	str	ip, [sp, #28]
   30d70:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   30d74:	cmp	r0, #0
   30d78:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30d7c:	cmp	r4, #0
   30d80:	beq	30dcc <__assert_fail@plt+0x1e5f4>
   30d84:	mov	r1, r4
   30d88:	mov	r0, r8
   30d8c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30d90:	cmp	r0, #0
   30d94:	bne	30db4 <__assert_fail@plt+0x1e5dc>
   30d98:	mov	r0, #0
   30d9c:	ldr	r2, [sp, #28]
   30da0:	ldr	r3, [r9]
   30da4:	cmp	r2, r3
   30da8:	bne	30ee0 <__assert_fail@plt+0x1e708>
   30dac:	add	sp, sp, #36	; 0x24
   30db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30db4:	movw	r1, #10140	; 0x279c
   30db8:	mov	r0, r8
   30dbc:	movt	r1, #5
   30dc0:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30dc4:	cmp	r0, #0
   30dc8:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30dcc:	movw	r1, #36856	; 0x8ff8
   30dd0:	mov	r0, r8
   30dd4:	movt	r1, #5
   30dd8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30ddc:	cmp	r0, #0
   30de0:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30de4:	cmp	fp, #0
   30de8:	beq	30eb4 <__assert_fail@plt+0x1e6dc>
   30dec:	ldr	r1, [fp]
   30df0:	cmp	r1, #0
   30df4:	addne	fp, fp, #4
   30df8:	movne	r4, #0
   30dfc:	movne	r5, #0
   30e00:	beq	30ecc <__assert_fail@plt+0x1e6f4>
   30e04:	mov	r0, r8
   30e08:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30e0c:	cmp	r0, #0
   30e10:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30e14:	ldrd	r6, [sl], #8
   30e18:	cmp	r7, r5
   30e1c:	cmpeq	r6, r4
   30e20:	beq	30e70 <__assert_fail@plt+0x1e698>
   30e24:	mov	r1, #1
   30e28:	mov	r2, #20
   30e2c:	strd	r6, [sp]
   30e30:	movw	r3, #37356	; 0x91ec
   30e34:	add	r0, sp, #8
   30e38:	movt	r3, #5
   30e3c:	bl	12568 <__sprintf_chk@plt>
   30e40:	mov	r0, r8
   30e44:	movw	r1, #37404	; 0x921c
   30e48:	movt	r1, #5
   30e4c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30e50:	cmp	r0, #0
   30e54:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30e58:	mov	r0, r8
   30e5c:	add	r1, sp, #8
   30e60:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30e64:	cmp	r0, #0
   30e68:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30e6c:	ldrd	r4, [sl, #-8]
   30e70:	ldr	r3, [fp], #4
   30e74:	adds	r4, r4, #1
   30e78:	adc	r5, r5, #0
   30e7c:	cmp	r3, #0
   30e80:	beq	30ecc <__assert_fail@plt+0x1e6f4>
   30e84:	movw	r1, #10648	; 0x2998
   30e88:	mov	r0, r8
   30e8c:	movt	r1, #5
   30e90:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30e94:	cmp	r0, #0
   30e98:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30e9c:	ldr	r1, [fp, #-4]
   30ea0:	mov	r0, r8
   30ea4:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30ea8:	cmp	r0, #0
   30eac:	bne	30e14 <__assert_fail@plt+0x1e63c>
   30eb0:	b	30d98 <__assert_fail@plt+0x1e5c0>
   30eb4:	movw	r1, #37388	; 0x920c
   30eb8:	mov	r0, r8
   30ebc:	movt	r1, #5
   30ec0:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30ec4:	cmp	r0, #0
   30ec8:	beq	30d98 <__assert_fail@plt+0x1e5c0>
   30ecc:	mov	r0, r8
   30ed0:	movw	r1, #36860	; 0x8ffc
   30ed4:	movt	r1, #5
   30ed8:	bl	2debc <__assert_fail@plt+0x1b6e4>
   30edc:	b	30d9c <__assert_fail@plt+0x1e5c4>
   30ee0:	bl	122b0 <__stack_chk_fail@plt>
   30ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ee8:	movw	sl, #65176	; 0xfe98
   30eec:	movt	sl, #6
   30ef0:	sub	sp, sp, #52	; 0x34
   30ef4:	mov	r8, r0
   30ef8:	mov	r5, r1
   30efc:	ldr	lr, [sl]
   30f00:	mov	r7, r2
   30f04:	str	sl, [sp, #20]
   30f08:	mov	r4, r3
   30f0c:	str	lr, [sp, #44]	; 0x2c
   30f10:	bl	30d3c <__assert_fail@plt+0x1e564>
   30f14:	cmp	r0, #0
   30f18:	beq	30fc8 <__assert_fail@plt+0x1e7f0>
   30f1c:	cmp	r5, #0
   30f20:	beq	30fe4 <__assert_fail@plt+0x1e80c>
   30f24:	ldr	ip, [r8, #16]
   30f28:	movw	r2, #37452	; 0x924c
   30f2c:	ldr	r0, [r8]
   30f30:	movt	r2, #5
   30f34:	mov	r1, #1
   30f38:	mov	r3, r5
   30f3c:	str	ip, [sp]
   30f40:	ldr	ip, [r8, #8]
   30f44:	ldr	ip, [ip, #4]
   30f48:	str	ip, [sp, #4]
   30f4c:	bl	125d4 <__fprintf_chk@plt>
   30f50:	cmp	r7, #0
   30f54:	beq	30fc4 <__assert_fail@plt+0x1e7ec>
   30f58:	ldr	r3, [r7]
   30f5c:	cmp	r3, #0
   30f60:	beq	30fc4 <__assert_fail@plt+0x1e7ec>
   30f64:	sub	r4, r4, #8
   30f68:	add	r6, r7, #4
   30f6c:	add	r9, sp, #24
   30f70:	ldrd	sl, [r4, #8]!
   30f74:	mov	r1, #1
   30f78:	mov	r2, #20
   30f7c:	movw	r3, #37356	; 0x91ec
   30f80:	mov	r0, r9
   30f84:	movt	r3, #5
   30f88:	strd	sl, [sp]
   30f8c:	bl	12568 <__sprintf_chk@plt>
   30f90:	ldr	r1, [r8, #16]
   30f94:	ldr	r3, [r7]
   30f98:	movw	r2, #37416	; 0x9228
   30f9c:	ldr	r0, [r8]
   30fa0:	movt	r2, #5
   30fa4:	stm	sp, {r1, r5, r9}
   30fa8:	mov	r1, #1
   30fac:	bl	125d4 <__fprintf_chk@plt>
   30fb0:	ldr	r3, [r6]
   30fb4:	mov	r7, r6
   30fb8:	add	r6, r6, #4
   30fbc:	cmp	r3, #0
   30fc0:	bne	30f70 <__assert_fail@plt+0x1e798>
   30fc4:	mov	r0, #1
   30fc8:	ldr	fp, [sp, #20]
   30fcc:	ldr	r2, [sp, #44]	; 0x2c
   30fd0:	ldr	r3, [fp]
   30fd4:	cmp	r2, r3
   30fd8:	bne	30ff0 <__assert_fail@plt+0x1e818>
   30fdc:	add	sp, sp, #52	; 0x34
   30fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30fe4:	movw	r5, #37408	; 0x9220
   30fe8:	movt	r5, #5
   30fec:	b	30f50 <__assert_fail@plt+0x1e778>
   30ff0:	bl	122b0 <__stack_chk_fail@plt>
   30ff4:	push	{r4, r5, r6, r7, r8, r9, lr}
   30ff8:	movw	r8, #65176	; 0xfe98
   30ffc:	movt	r8, #6
   31000:	mov	r7, r0
   31004:	ldr	r0, [r0, #4]
   31008:	mov	r5, r3
   3100c:	ldr	r3, [r8]
   31010:	sub	sp, sp, #36	; 0x24
   31014:	cmp	r0, #0
   31018:	mov	r9, r1
   3101c:	mov	r4, r2
   31020:	str	r3, [sp, #28]
   31024:	movne	r6, #0
   31028:	beq	31048 <__assert_fail@plt+0x1e870>
   3102c:	mov	r0, #32
   31030:	ldr	r1, [r7]
   31034:	bl	12334 <_IO_putc@plt>
   31038:	ldr	r2, [r7, #4]
   3103c:	add	r6, r6, #1
   31040:	cmp	r6, r2
   31044:	bcc	3102c <__assert_fail@plt+0x1e854>
   31048:	add	r6, sp, #8
   3104c:	mov	r1, #1
   31050:	mov	r2, #20
   31054:	strd	r4, [sp]
   31058:	movw	r3, #37356	; 0x91ec
   3105c:	mov	r0, r6
   31060:	movt	r3, #5
   31064:	bl	12568 <__sprintf_chk@plt>
   31068:	ldr	r0, [r7]
   3106c:	mov	r3, r9
   31070:	str	r6, [sp]
   31074:	movw	r2, #37480	; 0x9268
   31078:	mov	r1, #1
   3107c:	movt	r2, #5
   31080:	bl	125d4 <__fprintf_chk@plt>
   31084:	ldr	r2, [sp, #28]
   31088:	ldr	r3, [r8]
   3108c:	mov	r0, #1
   31090:	cmp	r2, r3
   31094:	bne	310a0 <__assert_fail@plt+0x1e8c8>
   31098:	add	sp, sp, #36	; 0x24
   3109c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   310a0:	bl	122b0 <__stack_chk_fail@plt>
   310a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   310a8:	movw	r8, #65176	; 0xfe98
   310ac:	movt	r8, #6
   310b0:	mov	r7, r0
   310b4:	ldr	r0, [r0, #4]
   310b8:	mov	r5, r3
   310bc:	ldr	r3, [r8]
   310c0:	sub	sp, sp, #36	; 0x24
   310c4:	cmp	r0, #0
   310c8:	mov	r9, r1
   310cc:	mov	r4, r2
   310d0:	str	r3, [sp, #28]
   310d4:	movne	r6, #0
   310d8:	beq	310f8 <__assert_fail@plt+0x1e920>
   310dc:	mov	r0, #32
   310e0:	ldr	r1, [r7]
   310e4:	bl	12334 <_IO_putc@plt>
   310e8:	ldr	r2, [r7, #4]
   310ec:	add	r6, r6, #1
   310f0:	cmp	r6, r2
   310f4:	bcc	310dc <__assert_fail@plt+0x1e904>
   310f8:	add	r6, sp, #8
   310fc:	mov	r1, #1
   31100:	mov	r2, #20
   31104:	strd	r4, [sp]
   31108:	movw	r3, #37356	; 0x91ec
   3110c:	mov	r0, r6
   31110:	movt	r3, #5
   31114:	bl	12568 <__sprintf_chk@plt>
   31118:	ldr	r1, [r7, #16]
   3111c:	ldr	r0, [r7]
   31120:	mov	r3, r9
   31124:	str	r6, [sp, #4]
   31128:	movw	r2, #37500	; 0x927c
   3112c:	str	r1, [sp]
   31130:	movt	r2, #5
   31134:	mov	r1, #1
   31138:	bl	125d4 <__fprintf_chk@plt>
   3113c:	ldr	r2, [sp, #28]
   31140:	ldr	r3, [r8]
   31144:	mov	r0, #1
   31148:	cmp	r2, r3
   3114c:	bne	31158 <__assert_fail@plt+0x1e980>
   31150:	add	sp, sp, #36	; 0x24
   31154:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31158:	bl	122b0 <__stack_chk_fail@plt>
   3115c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31160:	movw	r8, #65176	; 0xfe98
   31164:	movt	r8, #6
   31168:	sub	sp, sp, #32
   3116c:	mov	r7, r0
   31170:	add	r0, r0, #8
   31174:	ldr	ip, [r8]
   31178:	mov	sl, r1
   3117c:	mov	r4, r2
   31180:	mov	r5, r3
   31184:	str	ip, [sp, #28]
   31188:	bl	2d81c <__assert_fail@plt+0x1b044>
   3118c:	subs	r9, r0, #0
   31190:	beq	31224 <__assert_fail@plt+0x1ea4c>
   31194:	ldr	r3, [r7, #4]
   31198:	cmp	r3, #0
   3119c:	movne	r6, #0
   311a0:	beq	311c0 <__assert_fail@plt+0x1e9e8>
   311a4:	mov	r0, #32
   311a8:	ldr	r1, [r7]
   311ac:	bl	12334 <_IO_putc@plt>
   311b0:	ldr	r2, [r7, #4]
   311b4:	add	r6, r6, #1
   311b8:	cmp	r6, r2
   311bc:	bcc	311a4 <__assert_fail@plt+0x1e9cc>
   311c0:	add	r6, sp, #8
   311c4:	mov	r1, #1
   311c8:	mov	r2, #20
   311cc:	strd	r4, [sp]
   311d0:	movw	r3, #37356	; 0x91ec
   311d4:	mov	r0, r6
   311d8:	movt	r3, #5
   311dc:	bl	12568 <__sprintf_chk@plt>
   311e0:	ldr	r0, [r7]
   311e4:	mov	r1, #1
   311e8:	mov	r3, r9
   311ec:	str	r6, [sp, #4]
   311f0:	movw	r2, #37544	; 0x92a8
   311f4:	str	sl, [sp]
   311f8:	movt	r2, #5
   311fc:	bl	125d4 <__fprintf_chk@plt>
   31200:	mov	r0, r9
   31204:	bl	121f0 <free@plt>
   31208:	mov	r0, #1
   3120c:	ldr	r2, [sp, #28]
   31210:	ldr	r3, [r8]
   31214:	cmp	r2, r3
   31218:	bne	3122c <__assert_fail@plt+0x1ea54>
   3121c:	add	sp, sp, #32
   31220:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31224:	mov	r0, r9
   31228:	b	3120c <__assert_fail@plt+0x1ea34>
   3122c:	bl	122b0 <__stack_chk_fail@plt>
   31230:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31234:	movw	r8, #65176	; 0xfe98
   31238:	movt	r8, #6
   3123c:	sub	sp, sp, #40	; 0x28
   31240:	mov	r7, r0
   31244:	add	r0, r0, #8
   31248:	ldr	ip, [r8]
   3124c:	mov	sl, r1
   31250:	mov	r4, r2
   31254:	mov	r5, r3
   31258:	str	ip, [sp, #36]	; 0x24
   3125c:	bl	2d81c <__assert_fail@plt+0x1b044>
   31260:	subs	r9, r0, #0
   31264:	beq	31300 <__assert_fail@plt+0x1eb28>
   31268:	ldr	r3, [r7, #4]
   3126c:	cmp	r3, #0
   31270:	movne	r6, #0
   31274:	beq	31294 <__assert_fail@plt+0x1eabc>
   31278:	mov	r0, #32
   3127c:	ldr	r1, [r7]
   31280:	bl	12334 <_IO_putc@plt>
   31284:	ldr	r2, [r7, #4]
   31288:	add	r6, r6, #1
   3128c:	cmp	r6, r2
   31290:	bcc	31278 <__assert_fail@plt+0x1eaa0>
   31294:	add	r6, sp, #16
   31298:	mov	r1, #1
   3129c:	mov	r2, #20
   312a0:	strd	r4, [sp]
   312a4:	movw	r3, #37356	; 0x91ec
   312a8:	mov	r0, r6
   312ac:	movt	r3, #5
   312b0:	bl	12568 <__sprintf_chk@plt>
   312b4:	ldr	r1, [r7, #16]
   312b8:	ldr	r0, [r7]
   312bc:	mov	r3, sl
   312c0:	str	r6, [sp, #8]
   312c4:	movw	r2, #37564	; 0x92bc
   312c8:	str	r1, [sp]
   312cc:	movt	r2, #5
   312d0:	mov	r1, #1
   312d4:	str	r9, [sp, #4]
   312d8:	bl	125d4 <__fprintf_chk@plt>
   312dc:	mov	r0, r9
   312e0:	bl	121f0 <free@plt>
   312e4:	mov	r0, #1
   312e8:	ldr	r2, [sp, #36]	; 0x24
   312ec:	ldr	r3, [r8]
   312f0:	cmp	r2, r3
   312f4:	bne	31308 <__assert_fail@plt+0x1eb30>
   312f8:	add	sp, sp, #40	; 0x28
   312fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31300:	mov	r0, r9
   31304:	b	312e8 <__assert_fail@plt+0x1eb10>
   31308:	bl	122b0 <__stack_chk_fail@plt>
   3130c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31310:	movw	r6, #65176	; 0xfe98
   31314:	movt	r6, #6
   31318:	add	r8, r0, #8
   3131c:	sub	sp, sp, #108	; 0x6c
   31320:	mov	r7, r0
   31324:	ldr	r1, [r6]
   31328:	mov	r0, r8
   3132c:	mov	r4, r2
   31330:	mov	r5, r3
   31334:	str	r1, [sp, #100]	; 0x64
   31338:	bl	2d81c <__assert_fail@plt+0x1b044>
   3133c:	subs	r9, r0, #0
   31340:	beq	313e8 <__assert_fail@plt+0x1ec10>
   31344:	orrs	r0, r4, r5
   31348:	bne	31454 <__assert_fail@plt+0x1ec7c>
   3134c:	ldrd	r0, [sp, #144]	; 0x90
   31350:	mvn	r2, #0
   31354:	mvn	r3, #0
   31358:	cmp	r1, r3
   3135c:	cmpeq	r0, r2
   31360:	beq	314c0 <__assert_fail@plt+0x1ece8>
   31364:	ldrd	r0, [sp, #144]	; 0x90
   31368:	add	r5, sp, #28
   3136c:	add	r4, sp, #48	; 0x30
   31370:	mov	r2, #20
   31374:	adds	r0, r0, #1
   31378:	movw	r3, #37356	; 0x91ec
   3137c:	adc	r1, r1, #0
   31380:	movt	r3, #5
   31384:	strd	r0, [sp]
   31388:	mov	r1, #1
   3138c:	mov	r0, r5
   31390:	bl	12568 <__sprintf_chk@plt>
   31394:	movw	r3, #37608	; 0x92e8
   31398:	str	r5, [sp]
   3139c:	mov	r0, r4
   313a0:	mov	r1, #1
   313a4:	movt	r3, #5
   313a8:	mov	r2, #50	; 0x32
   313ac:	bl	12568 <__sprintf_chk@plt>
   313b0:	mov	r0, r7
   313b4:	mov	r1, r4
   313b8:	bl	2df48 <__assert_fail@plt+0x1b770>
   313bc:	cmp	r0, #0
   313c0:	beq	313e8 <__assert_fail@plt+0x1ec10>
   313c4:	ldrb	r3, [r9]
   313c8:	cmp	r3, #105	; 0x69
   313cc:	beq	31404 <__assert_fail@plt+0x1ec2c>
   313d0:	movw	r1, #10496	; 0x2900
   313d4:	mov	r0, r8
   313d8:	movt	r1, #5
   313dc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   313e0:	cmp	r0, #0
   313e4:	bne	314d4 <__assert_fail@plt+0x1ecfc>
   313e8:	mov	r0, #0
   313ec:	ldr	r2, [sp, #100]	; 0x64
   313f0:	ldr	r3, [r6]
   313f4:	cmp	r2, r3
   313f8:	bne	314ec <__assert_fail@plt+0x1ed14>
   313fc:	add	sp, sp, #108	; 0x6c
   31400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31404:	ldrb	r3, [r9, #1]
   31408:	cmp	r3, #110	; 0x6e
   3140c:	bne	313d0 <__assert_fail@plt+0x1ebf8>
   31410:	ldrb	r3, [r9, #2]
   31414:	cmp	r3, #116	; 0x74
   31418:	bne	313d0 <__assert_fail@plt+0x1ebf8>
   3141c:	ldrb	r3, [r9, #3]
   31420:	cmp	r3, #0
   31424:	bne	313d0 <__assert_fail@plt+0x1ebf8>
   31428:	ldr	r3, [sp, #152]	; 0x98
   3142c:	cmp	r3, #0
   31430:	moveq	r0, #1
   31434:	beq	313ec <__assert_fail@plt+0x1ec14>
   31438:	mov	r0, r8
   3143c:	movw	r1, #37628	; 0x92fc
   31440:	movt	r1, #5
   31444:	bl	2debc <__assert_fail@plt+0x1b6e4>
   31448:	adds	r0, r0, #0
   3144c:	movne	r0, #1
   31450:	b	313ec <__assert_fail@plt+0x1ec14>
   31454:	add	fp, sp, #8
   31458:	strd	r4, [sp]
   3145c:	mov	r1, #1
   31460:	mov	r2, #20
   31464:	mov	r0, fp
   31468:	movw	r3, #37356	; 0x91ec
   3146c:	movt	r3, #5
   31470:	add	sl, sp, #28
   31474:	bl	12568 <__sprintf_chk@plt>
   31478:	ldrd	r2, [sp, #144]	; 0x90
   3147c:	add	r4, sp, #48	; 0x30
   31480:	mov	r0, sl
   31484:	mov	r1, #1
   31488:	strd	r2, [sp]
   3148c:	mov	r2, #20
   31490:	movw	r3, #37356	; 0x91ec
   31494:	movt	r3, #5
   31498:	bl	12568 <__sprintf_chk@plt>
   3149c:	str	fp, [sp]
   314a0:	str	sl, [sp, #4]
   314a4:	mov	r0, r4
   314a8:	movw	r3, #37616	; 0x92f0
   314ac:	mov	r1, #1
   314b0:	movt	r3, #5
   314b4:	mov	r2, #50	; 0x32
   314b8:	bl	12568 <__sprintf_chk@plt>
   314bc:	b	313b0 <__assert_fail@plt+0x1ebd8>
   314c0:	add	r4, sp, #104	; 0x68
   314c4:	movw	r3, #23420	; 0x5b7c
   314c8:	movt	r3, #93	; 0x5d
   314cc:	str	r3, [r4, #-56]!	; 0xffffffc8
   314d0:	b	313b0 <__assert_fail@plt+0x1ebd8>
   314d4:	mov	r1, r9
   314d8:	mov	r0, r8
   314dc:	bl	2debc <__assert_fail@plt+0x1b6e4>
   314e0:	cmp	r0, #0
   314e4:	bne	31428 <__assert_fail@plt+0x1ec50>
   314e8:	b	313e8 <__assert_fail@plt+0x1ec10>
   314ec:	bl	122b0 <__stack_chk_fail@plt>
   314f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   314f4:	movw	r6, #65176	; 0xfe98
   314f8:	movt	r6, #6
   314fc:	ldr	r1, [r0, #8]
   31500:	mov	r5, r3
   31504:	sub	sp, sp, #36	; 0x24
   31508:	ldr	r3, [r6]
   3150c:	cmp	r1, #0
   31510:	mov	r7, r0
   31514:	mov	r4, r2
   31518:	str	r3, [sp, #28]
   3151c:	beq	31774 <__assert_fail@plt+0x1ef9c>
   31520:	ldr	r3, [r1]
   31524:	cmp	r3, #0
   31528:	beq	31774 <__assert_fail@plt+0x1ef9c>
   3152c:	movw	r1, #11856	; 0x2e50
   31530:	movt	r1, #5
   31534:	bl	2df48 <__assert_fail@plt+0x1b770>
   31538:	cmp	r0, #0
   3153c:	bne	31558 <__assert_fail@plt+0x1ed80>
   31540:	ldr	r2, [sp, #28]
   31544:	ldr	r3, [r6]
   31548:	cmp	r2, r3
   3154c:	bne	31790 <__assert_fail@plt+0x1efb8>
   31550:	add	sp, sp, #36	; 0x24
   31554:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31558:	add	r8, r7, #8
   3155c:	mov	r0, r8
   31560:	bl	2d81c <__assert_fail@plt+0x1b044>
   31564:	subs	r9, r0, #0
   31568:	beq	31744 <__assert_fail@plt+0x1ef6c>
   3156c:	mov	r2, #6
   31570:	movw	r1, #36532	; 0x8eb4
   31574:	movt	r1, #5
   31578:	bl	12784 <strncmp@plt>
   3157c:	cmp	r0, #0
   31580:	mov	r0, r8
   31584:	addeq	r9, r9, #6
   31588:	mov	r1, r9
   3158c:	bl	2f774 <__assert_fail@plt+0x1cf9c>
   31590:	cmp	r0, #0
   31594:	beq	31744 <__assert_fail@plt+0x1ef6c>
   31598:	ldr	r2, [sp, #64]	; 0x40
   3159c:	cmp	r2, #0
   315a0:	bne	3174c <__assert_fail@plt+0x1ef74>
   315a4:	ldr	r3, [sp, #68]	; 0x44
   315a8:	cmp	r3, #2
   315ac:	movwhi	r1, #37100	; 0x90ec
   315b0:	movthi	r1, #5
   315b4:	bhi	315cc <__assert_fail@plt+0x1edf4>
   315b8:	ldr	r2, [sp, #68]	; 0x44
   315bc:	movw	r3, #35080	; 0x8908
   315c0:	movt	r3, #5
   315c4:	add	r3, r3, r2, lsl #2
   315c8:	ldr	r1, [r3, #456]	; 0x1c8
   315cc:	mov	r0, r8
   315d0:	bl	2de18 <__assert_fail@plt+0x1b640>
   315d4:	cmp	r0, #0
   315d8:	beq	31744 <__assert_fail@plt+0x1ef6c>
   315dc:	orrs	r3, r4, r5
   315e0:	bne	316e4 <__assert_fail@plt+0x1ef0c>
   315e4:	ldr	r3, [r7, #8]
   315e8:	mov	r1, #123	; 0x7b
   315ec:	ldr	r3, [r3]
   315f0:	ldr	r4, [r3, #4]
   315f4:	mov	r0, r4
   315f8:	bl	124fc <strchr@plt>
   315fc:	cmp	r0, #0
   31600:	beq	31794 <__assert_fail@plt+0x1efbc>
   31604:	sub	r5, r0, #1
   31608:	cmp	r4, r5
   3160c:	beq	3163c <__assert_fail@plt+0x1ee64>
   31610:	ldrb	r3, [r4]
   31614:	cmp	r3, #58	; 0x3a
   31618:	beq	31768 <__assert_fail@plt+0x1ef90>
   3161c:	mov	r3, r4
   31620:	sub	r0, r0, #2
   31624:	b	31634 <__assert_fail@plt+0x1ee5c>
   31628:	ldrb	r2, [r3, #1]!
   3162c:	cmp	r2, #58	; 0x3a
   31630:	beq	31768 <__assert_fail@plt+0x1ef90>
   31634:	cmp	r3, r0
   31638:	bne	31628 <__assert_fail@plt+0x1ee50>
   3163c:	movw	r1, #37644	; 0x930c
   31640:	movt	r1, #5
   31644:	mov	r0, r8
   31648:	bl	2de18 <__assert_fail@plt+0x1b640>
   3164c:	cmp	r0, #0
   31650:	beq	31744 <__assert_fail@plt+0x1ef6c>
   31654:	mov	r0, r8
   31658:	bl	2d81c <__assert_fail@plt+0x1b044>
   3165c:	subs	r4, r0, #0
   31660:	beq	31744 <__assert_fail@plt+0x1ef6c>
   31664:	ldr	r3, [r7, #8]
   31668:	ldr	r0, [r3, #4]
   3166c:	bl	124e4 <strlen@plt>
   31670:	mov	r8, r0
   31674:	mov	r0, r4
   31678:	bl	124e4 <strlen@plt>
   3167c:	add	r0, r8, r0
   31680:	add	r0, r0, #1
   31684:	bl	12358 <xmalloc@plt>
   31688:	ldr	r3, [r7, #8]
   3168c:	ldr	r1, [r3, #4]
   31690:	rsb	r2, r1, r5
   31694:	mov	r8, r0
   31698:	bl	1222c <memcpy@plt>
   3169c:	ldr	r3, [r7, #8]
   316a0:	mov	r1, r4
   316a4:	ldr	r0, [r3, #4]
   316a8:	rsb	r0, r0, r5
   316ac:	add	r0, r8, r0
   316b0:	bl	12388 <strcpy@plt>
   316b4:	mov	r1, r5
   316b8:	mov	r0, r8
   316bc:	bl	1234c <strcat@plt>
   316c0:	ldr	r3, [r7, #8]
   316c4:	ldr	r0, [r3, #4]
   316c8:	bl	121f0 <free@plt>
   316cc:	ldr	r3, [r7, #8]
   316d0:	mov	r0, r4
   316d4:	str	r8, [r3, #4]
   316d8:	bl	121f0 <free@plt>
   316dc:	mov	r0, #1
   316e0:	b	31540 <__assert_fail@plt+0x1ed68>
   316e4:	mov	r1, #1
   316e8:	mov	r2, #20
   316ec:	strd	r4, [sp]
   316f0:	movw	r3, #36692	; 0x8f54
   316f4:	add	r0, sp, #8
   316f8:	movt	r3, #5
   316fc:	bl	12568 <__sprintf_chk@plt>
   31700:	mov	r0, r8
   31704:	movw	r1, #37648	; 0x9310
   31708:	movt	r1, #5
   3170c:	bl	2debc <__assert_fail@plt+0x1b6e4>
   31710:	cmp	r0, #0
   31714:	beq	31744 <__assert_fail@plt+0x1ef6c>
   31718:	add	r1, sp, #8
   3171c:	mov	r0, r8
   31720:	bl	2debc <__assert_fail@plt+0x1b6e4>
   31724:	cmp	r0, #0
   31728:	beq	31744 <__assert_fail@plt+0x1ef6c>
   3172c:	movw	r1, #37400	; 0x9218
   31730:	mov	r0, r8
   31734:	movt	r1, #5
   31738:	bl	2debc <__assert_fail@plt+0x1b6e4>
   3173c:	cmp	r0, #0
   31740:	bne	315e4 <__assert_fail@plt+0x1ee0c>
   31744:	mov	r0, #0
   31748:	b	31540 <__assert_fail@plt+0x1ed68>
   3174c:	movw	r1, #37192	; 0x9148
   31750:	mov	r0, r8
   31754:	movt	r1, #5
   31758:	bl	2de18 <__assert_fail@plt+0x1b640>
   3175c:	cmp	r0, #0
   31760:	bne	315a4 <__assert_fail@plt+0x1edcc>
   31764:	b	31744 <__assert_fail@plt+0x1ef6c>
   31768:	movw	r1, #10648	; 0x2998
   3176c:	movt	r1, #5
   31770:	b	31644 <__assert_fail@plt+0x1ee6c>
   31774:	movw	r0, #37128	; 0x9108
   31778:	movw	r1, #36044	; 0x8ccc
   3177c:	movt	r0, #5
   31780:	movt	r1, #5
   31784:	movw	r2, #1341	; 0x53d
   31788:	ldr	r3, [pc, #32]	; 317b0 <__assert_fail@plt+0x1efd8>
   3178c:	bl	127d8 <__assert_fail@plt>
   31790:	bl	122b0 <__stack_chk_fail@plt>
   31794:	movw	r0, #37660	; 0x931c
   31798:	movw	r1, #36044	; 0x8ccc
   3179c:	movt	r0, #5
   317a0:	movt	r1, #5
   317a4:	movw	r2, #1397	; 0x575
   317a8:	ldr	r3, [pc]	; 317b0 <__assert_fail@plt+0x1efd8>
   317ac:	bl	127d8 <__assert_fail@plt>
   317b0:			; <UNDEFINED> instruction: 0x00058abc
   317b4:	push	{r4, r5, r6, lr}
   317b8:	sub	sp, sp, #40	; 0x28
   317bc:	movw	r4, #65176	; 0xfe98
   317c0:	movt	r4, #6
   317c4:	ldr	ip, [sp, #60]	; 0x3c
   317c8:	mov	r5, r0
   317cc:	mov	r6, r1
   317d0:	ldr	r0, [r4]
   317d4:	ldr	r1, [sp, #56]	; 0x38
   317d8:	cmp	ip, #0
   317dc:	str	r5, [sp, #4]
   317e0:	mov	ip, #0
   317e4:	str	r2, [sp, #24]
   317e8:	str	r3, [sp, #28]
   317ec:	str	r0, [sp, #36]	; 0x24
   317f0:	str	r1, [sp, #32]
   317f4:	str	ip, [sp, #8]
   317f8:	str	ip, [sp, #12]
   317fc:	str	ip, [sp, #16]
   31800:	str	ip, [sp, #20]
   31804:	bne	31830 <__assert_fail@plt+0x1f058>
   31808:	mov	r0, r6
   3180c:	ldr	r1, [pc, #148]	; 318a8 <__assert_fail@plt+0x1f0d0>
   31810:	add	r2, sp, #4
   31814:	bl	35af0 <__assert_fail@plt+0x23318>
   31818:	ldr	r2, [sp, #36]	; 0x24
   3181c:	ldr	r3, [r4]
   31820:	cmp	r2, r3
   31824:	bne	318a4 <__assert_fail@plt+0x1f0cc>
   31828:	add	sp, sp, #40	; 0x28
   3182c:	pop	{r4, r5, r6, pc}
   31830:	mov	r3, r5
   31834:	mov	r1, #1
   31838:	mov	r2, #38	; 0x26
   3183c:	movw	r0, #37680	; 0x9330
   31840:	movt	r0, #5
   31844:	bl	12340 <fwrite@plt>
   31848:	mov	r3, r5
   3184c:	mov	r1, #1
   31850:	mov	r2, #43	; 0x2b
   31854:	movw	r0, #37720	; 0x9358
   31858:	movt	r0, #5
   3185c:	bl	12340 <fwrite@plt>
   31860:	mov	r3, r5
   31864:	mov	r1, #1
   31868:	mov	r2, #72	; 0x48
   3186c:	movw	r0, #37764	; 0x9384
   31870:	movt	r0, #5
   31874:	bl	12340 <fwrite@plt>
   31878:	mov	r3, r5
   3187c:	mov	r1, #1
   31880:	mov	r2, #47	; 0x2f
   31884:	movw	r0, #37840	; 0x93d0
   31888:	movt	r0, #5
   3188c:	bl	12340 <fwrite@plt>
   31890:	mov	r0, r6
   31894:	ldr	r1, [pc, #16]	; 318ac <__assert_fail@plt+0x1f0d4>
   31898:	add	r2, sp, #4
   3189c:	bl	35af0 <__assert_fail@plt+0x23318>
   318a0:	b	31818 <__assert_fail@plt+0x1f040>
   318a4:	bl	122b0 <__stack_chk_fail@plt>
   318a8:	andeq	r8, r5, ip, lsl #23
   318ac:	ldrdeq	r8, [r5], -ip
   318b0:	push	{r3, r4, r5, r6, r7, lr}
   318b4:	movw	r7, #2984	; 0xba8
   318b8:	movt	r7, #7
   318bc:	mov	r6, #0
   318c0:	add	r5, r7, #384	; 0x180
   318c4:	mov	r4, r7
   318c8:	ldr	r0, [r4, #16]
   318cc:	cmp	r0, #0
   318d0:	beq	318dc <__assert_fail@plt+0x1f104>
   318d4:	bl	121f0 <free@plt>
   318d8:	str	r6, [r4, #16]
   318dc:	add	r4, r4, #24
   318e0:	cmp	r4, r5
   318e4:	bne	318c8 <__assert_fail@plt+0x1f0f0>
   318e8:	mov	r3, #0
   318ec:	str	r3, [r7, #384]	; 0x180
   318f0:	pop	{r3, r4, r5, r6, r7, pc}
   318f4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   318f8:	movw	r6, #2984	; 0xba8
   318fc:	movt	r6, #7
   31900:	mov	r5, r3
   31904:	mov	sl, r0
   31908:	mov	fp, r1
   3190c:	ldr	r7, [r6, #384]	; 0x180
   31910:	mov	r4, r2
   31914:	ldr	r9, [sp, #40]	; 0x28
   31918:	lsl	r8, r7, #1
   3191c:	add	r3, r8, r7
   31920:	add	r3, r6, r3, lsl #3
   31924:	ldr	r0, [r3, #16]
   31928:	cmp	r0, #0
   3192c:	beq	31934 <__assert_fail@plt+0x1f15c>
   31930:	bl	121f0 <free@plt>
   31934:	add	r7, r8, r7
   31938:	mov	r0, r9
   3193c:	lsl	r7, r7, #3
   31940:	add	r8, r6, r7
   31944:	str	sl, [r6, r7]
   31948:	str	fp, [r8, #4]
   3194c:	strd	r4, [r8, #8]
   31950:	bl	1237c <xstrdup@plt>
   31954:	ldr	r2, [r6, #384]	; 0x180
   31958:	add	r2, r2, #1
   3195c:	asr	r3, r2, #31
   31960:	lsr	r3, r3, #28
   31964:	add	r2, r2, r3
   31968:	and	r2, r2, #15
   3196c:	rsb	r3, r3, r2
   31970:	str	r3, [r6, #384]	; 0x180
   31974:	str	r0, [r8, #16]
   31978:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3197c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31980:	movw	sl, #168	; 0xa8
   31984:	movt	sl, #7
   31988:	sub	sp, sp, #12
   3198c:	mov	r2, #5
   31990:	movw	r1, #37944	; 0x9438
   31994:	mov	r0, #0
   31998:	movt	r1, #5
   3199c:	ldr	r4, [sl]
   319a0:	bl	12298 <dcgettext@plt>
   319a4:	movw	r7, #2984	; 0xba8
   319a8:	mov	r1, #1
   319ac:	movt	r7, #7
   319b0:	mov	fp, sl
   319b4:	mov	r2, r0
   319b8:	mov	r0, r4
   319bc:	bl	125d4 <__fprintf_chk@plt>
   319c0:	ldr	r3, [sl]
   319c4:	movw	r0, #37980	; 0x945c
   319c8:	mov	r1, #1
   319cc:	movt	r0, #5
   319d0:	mov	r2, #30
   319d4:	bl	12340 <fwrite@plt>
   319d8:	ldr	r6, [r7, #384]	; 0x180
   319dc:	b	31a58 <__assert_fail@plt+0x1f280>
   319e0:	ldr	r0, [sl]
   319e4:	bl	125d4 <__fprintf_chk@plt>
   319e8:	ldr	r3, [r9, #4]
   319ec:	mov	r1, #1
   319f0:	movw	r2, #38012	; 0x947c
   319f4:	ldr	r0, [sl]
   319f8:	movt	r2, #5
   319fc:	bl	125d4 <__fprintf_chk@plt>
   31a00:	ldrd	r4, [r9, #8]
   31a04:	ldr	r0, [sl]
   31a08:	movw	r2, #38020	; 0x9484
   31a0c:	mov	r1, #1
   31a10:	movt	r2, #5
   31a14:	strd	r4, [sp]
   31a18:	bl	125d4 <__fprintf_chk@plt>
   31a1c:	ldr	r3, [r7, r8, lsl #3]
   31a20:	cmp	r3, #0
   31a24:	bne	31ab8 <__assert_fail@plt+0x1f2e0>
   31a28:	mov	r0, #10
   31a2c:	ldr	r1, [sl]
   31a30:	bl	12694 <fputc@plt>
   31a34:	add	r6, r6, #1
   31a38:	ldr	r2, [r7, #384]	; 0x180
   31a3c:	asr	r3, r6, #31
   31a40:	lsr	r3, r3, #28
   31a44:	add	r6, r6, r3
   31a48:	and	r6, r6, #15
   31a4c:	rsb	r6, r3, r6
   31a50:	cmp	r6, r2
   31a54:	beq	31ad4 <__assert_fail@plt+0x1f2fc>
   31a58:	add	r8, r6, r6, lsl #1
   31a5c:	add	r9, r7, r8, lsl #3
   31a60:	ldr	r3, [r9, #16]
   31a64:	cmp	r3, #0
   31a68:	beq	31a34 <__assert_fail@plt+0x1f25c>
   31a6c:	ldr	r0, [r7, r8, lsl #3]
   31a70:	bl	12190 <bfd_get_stab_name@plt>
   31a74:	movw	r2, #11576	; 0x2d38
   31a78:	mov	r1, #1
   31a7c:	movt	r2, #5
   31a80:	subs	r3, r0, #0
   31a84:	bne	319e0 <__assert_fail@plt+0x1f208>
   31a88:	ldr	r3, [r7, r8, lsl #3]
   31a8c:	movw	r2, #11612	; 0x2d5c
   31a90:	movw	r0, #11604	; 0x2d54
   31a94:	mov	r1, #1
   31a98:	cmp	r3, #0
   31a9c:	movt	r2, #5
   31aa0:	movt	r0, #5
   31aa4:	bne	319e0 <__assert_fail@plt+0x1f208>
   31aa8:	ldr	r3, [sl]
   31aac:	mov	r2, #6
   31ab0:	bl	12340 <fwrite@plt>
   31ab4:	b	319e8 <__assert_fail@plt+0x1f210>
   31ab8:	movw	r2, #18540	; 0x486c
   31abc:	mov	r1, #1
   31ac0:	ldr	r3, [r9, #16]
   31ac4:	movt	r2, #5
   31ac8:	ldr	r0, [fp]
   31acc:	bl	125d4 <__fprintf_chk@plt>
   31ad0:	b	31a28 <__assert_fail@plt+0x1f250>
   31ad4:	add	sp, sp, #12
   31ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ae0:	movw	r4, #65176	; 0xfe98
   31ae4:	sub	sp, sp, #164	; 0xa4
   31ae8:	movt	r4, #6
   31aec:	mov	r5, r0
   31af0:	str	r1, [sp, #120]	; 0x78
   31af4:	ldr	r1, [r4]
   31af8:	str	r4, [sp, #108]	; 0x6c
   31afc:	str	r2, [sp, #124]	; 0x7c
   31b00:	str	r3, [sp, #116]	; 0x74
   31b04:	str	r1, [sp, #156]	; 0x9c
   31b08:	bl	341e0 <__assert_fail@plt+0x21a08>
   31b0c:	cmp	r0, #0
   31b10:	str	r0, [sp, #88]	; 0x58
   31b14:	beq	31bfc <__assert_fail@plt+0x1f424>
   31b18:	mov	r6, #0
   31b1c:	movw	r7, #37920	; 0x9420
   31b20:	mov	r9, r6
   31b24:	movw	ip, #168	; 0xa8
   31b28:	movt	r7, #5
   31b2c:	movt	ip, #7
   31b30:	movw	r4, #43691	; 0xaaab
   31b34:	str	r6, [sp, #80]	; 0x50
   31b38:	movt	r4, #10922	; 0x2aaa
   31b3c:	str	r7, [sp, #104]	; 0x68
   31b40:	str	ip, [sp, #100]	; 0x64
   31b44:	str	r4, [sp, #112]	; 0x70
   31b48:	str	r6, [sp, #92]	; 0x5c
   31b4c:	ldr	r4, [sp, #104]	; 0x68
   31b50:	mov	r0, r5
   31b54:	ldr	r6, [sp, #80]	; 0x50
   31b58:	ldr	r7, [r4, r6]!
   31b5c:	mov	r1, r7
   31b60:	str	r7, [sp, #84]	; 0x54
   31b64:	bl	123a0 <bfd_get_section_by_name@plt>
   31b68:	ldr	r8, [r4, #4]
   31b6c:	mov	r1, r8
   31b70:	mov	r7, r0
   31b74:	mov	r0, r5
   31b78:	bl	123a0 <bfd_get_section_by_name@plt>
   31b7c:	cmp	r0, #0
   31b80:	cmpne	r7, #0
   31b84:	mov	r4, r0
   31b88:	bne	31c1c <__assert_fail@plt+0x1f444>
   31b8c:	ldr	ip, [sp, #80]	; 0x50
   31b90:	add	ip, ip, #8
   31b94:	str	ip, [sp, #80]	; 0x50
   31b98:	cmp	ip, #24
   31b9c:	bne	31b4c <__assert_fail@plt+0x1f374>
   31ba0:	ldr	r4, [sp, #92]	; 0x5c
   31ba4:	cmp	r4, #0
   31ba8:	beq	31bc0 <__assert_fail@plt+0x1f3e8>
   31bac:	mov	r1, r4
   31bb0:	ldr	r0, [sp, #88]	; 0x58
   31bb4:	bl	3ba84 <__assert_fail@plt+0x292ac>
   31bb8:	cmp	r0, #0
   31bbc:	beq	31bfc <__assert_fail@plt+0x1f424>
   31bc0:	ldr	r3, [r5, #4]
   31bc4:	ldr	r2, [r3, #4]
   31bc8:	cmp	r2, #1
   31bcc:	beq	32020 <__assert_fail@plt+0x1f848>
   31bd0:	cmp	r2, #6
   31bd4:	beq	31f74 <__assert_fail@plt+0x1f79c>
   31bd8:	cmp	r9, #0
   31bdc:	bne	31ff4 <__assert_fail@plt+0x1f81c>
   31be0:	ldr	r3, [r5, #4]
   31be4:	ldr	r3, [r3, #4]
   31be8:	cmp	r3, #2
   31bec:	beq	3214c <__assert_fail@plt+0x1f974>
   31bf0:	ldr	r4, [sp, #116]	; 0x74
   31bf4:	cmp	r4, #0
   31bf8:	beq	31ffc <__assert_fail@plt+0x1f824>
   31bfc:	mov	r0, #0
   31c00:	ldr	ip, [sp, #108]	; 0x6c
   31c04:	ldr	r2, [sp, #156]	; 0x9c
   31c08:	ldr	r3, [ip]
   31c0c:	cmp	r2, r3
   31c10:	bne	32284 <__assert_fail@plt+0x1faac>
   31c14:	add	sp, sp, #164	; 0xa4
   31c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31c1c:	ldr	ip, [r7, #48]	; 0x30
   31c20:	ldr	r6, [r7, #52]	; 0x34
   31c24:	mov	r0, ip
   31c28:	str	ip, [sp, #96]	; 0x60
   31c2c:	bl	12358 <xmalloc@plt>
   31c30:	ldr	ip, [sp, #96]	; 0x60
   31c34:	mov	r1, r7
   31c38:	str	r6, [sp, #12]
   31c3c:	mov	r7, #0
   31c40:	mov	r6, #0
   31c44:	str	ip, [sp, #8]
   31c48:	strd	r6, [sp]
   31c4c:	str	r0, [sp, #76]	; 0x4c
   31c50:	mov	r2, r0
   31c54:	mov	r0, r5
   31c58:	bl	1228c <bfd_get_section_contents@plt>
   31c5c:	cmp	r0, #0
   31c60:	beq	3223c <__assert_fail@plt+0x1fa64>
   31c64:	ldrd	r6, [r4, #48]	; 0x30
   31c68:	add	r0, r6, #1
   31c6c:	strd	r6, [sp, #32]
   31c70:	bl	12358 <xmalloc@plt>
   31c74:	mov	r2, #0
   31c78:	mov	r3, #0
   31c7c:	strd	r6, [sp, #8]
   31c80:	mov	r1, r4
   31c84:	strd	r2, [sp]
   31c88:	mov	fp, r0
   31c8c:	mov	r2, r0
   31c90:	mov	r0, r5
   31c94:	bl	1228c <bfd_get_section_contents@plt>
   31c98:	cmp	r0, #0
   31c9c:	beq	32200 <__assert_fail@plt+0x1fa28>
   31ca0:	ldr	r4, [sp, #92]	; 0x5c
   31ca4:	mov	r7, #0
   31ca8:	ldr	r6, [sp, #32]
   31cac:	cmp	r4, #0
   31cb0:	add	r3, fp, r6
   31cb4:	strb	r7, [r3]
   31cb8:	beq	321d4 <__assert_fail@plt+0x1f9fc>
   31cbc:	ldr	r4, [sp, #96]	; 0x60
   31cc0:	ldr	r6, [sp, #76]	; 0x4c
   31cc4:	sub	r3, r4, #12
   31cc8:	adds	r3, r6, r3
   31ccc:	str	r3, [sp, #72]	; 0x48
   31cd0:	bcs	31f00 <__assert_fail@plt+0x1f728>
   31cd4:	mov	r6, #0
   31cd8:	mov	r7, #0
   31cdc:	ldr	r4, [sp, #76]	; 0x4c
   31ce0:	strd	r6, [sp, #24]
   31ce4:	strd	r6, [sp, #64]	; 0x40
   31ce8:	str	fp, [sp, #44]	; 0x2c
   31cec:	b	31d14 <__assert_fail@plt+0x1f53c>
   31cf0:	ldrd	r6, [sp, #64]	; 0x40
   31cf4:	strd	r6, [sp, #24]
   31cf8:	adds	r6, r6, r0
   31cfc:	adc	r7, r7, r1
   31d00:	strd	r6, [sp, #64]	; 0x40
   31d04:	ldr	r7, [sp, #72]	; 0x48
   31d08:	add	r4, r4, #12
   31d0c:	cmp	r4, r7
   31d10:	bhi	31f00 <__assert_fail@plt+0x1f728>
   31d14:	ldr	r3, [r5, #4]
   31d18:	mov	r0, r4
   31d1c:	ldr	r3, [r3, #40]	; 0x28
   31d20:	blx	r3
   31d24:	ldr	r3, [r5, #4]
   31d28:	ldrb	r7, [r4, #4]
   31d2c:	ldr	r3, [r3, #52]	; 0x34
   31d30:	str	r7, [sp, #56]	; 0x38
   31d34:	mov	r6, r0
   31d38:	add	r0, r4, #6
   31d3c:	blx	r3
   31d40:	ldr	r3, [r5, #4]
   31d44:	ldr	r3, [r3, #40]	; 0x28
   31d48:	str	r0, [sp, #60]	; 0x3c
   31d4c:	add	r0, r4, #8
   31d50:	blx	r3
   31d54:	cmp	r7, #0
   31d58:	strd	r0, [sp, #48]	; 0x30
   31d5c:	beq	31cf0 <__assert_fail@plt+0x1f518>
   31d60:	ldrd	r2, [sp, #24]
   31d64:	ldrd	r0, [sp, #32]
   31d68:	adds	r2, r2, r6
   31d6c:	adc	r3, r3, #0
   31d70:	cmp	r1, r3
   31d74:	cmpeq	r0, r2
   31d78:	bls	31e90 <__assert_fail@plt+0x1f6b8>
   31d7c:	ldr	r7, [sp, #24]
   31d80:	mov	r9, #0
   31d84:	str	r5, [sp, #40]	; 0x28
   31d88:	add	ip, r6, r7
   31d8c:	ldr	r6, [sp, #44]	; 0x2c
   31d90:	ldr	r7, [sp, #76]	; 0x4c
   31d94:	add	fp, r6, ip
   31d98:	ldr	ip, [sp, #96]	; 0x60
   31d9c:	add	sl, r7, ip
   31da0:	b	31e34 <__assert_fail@plt+0x1f65c>
   31da4:	sub	r0, r0, #1
   31da8:	add	r8, fp, r0
   31dac:	ldrb	r7, [fp, r0]
   31db0:	cmp	r7, #92	; 0x5c
   31db4:	bne	31e44 <__assert_fail@plt+0x1f66c>
   31db8:	add	r6, r4, #12
   31dbc:	cmp	r6, sl
   31dc0:	bcs	31e44 <__assert_fail@plt+0x1f66c>
   31dc4:	ldr	r4, [sp, #40]	; 0x28
   31dc8:	mov	r0, #0
   31dcc:	strb	r0, [r8]
   31dd0:	mov	r0, r6
   31dd4:	ldr	r3, [r4, #4]
   31dd8:	ldr	r3, [r3, #40]	; 0x28
   31ddc:	blx	r3
   31de0:	ldr	r5, [sp, #24]
   31de4:	mov	r3, #0
   31de8:	add	r1, r0, r5
   31dec:	ldrd	r4, [sp, #32]
   31df0:	mov	r2, r1
   31df4:	cmp	r5, r3
   31df8:	cmpeq	r4, r2
   31dfc:	bls	31f14 <__assert_fail@plt+0x1f73c>
   31e00:	ldr	r4, [sp, #44]	; 0x2c
   31e04:	mov	r0, fp
   31e08:	mov	r2, #0
   31e0c:	add	r1, r4, r1
   31e10:	bl	122ec <concat@plt>
   31e14:	cmp	r9, #0
   31e18:	strb	r7, [r8]
   31e1c:	mov	fp, r0
   31e20:	beq	31e2c <__assert_fail@plt+0x1f654>
   31e24:	mov	r0, r9
   31e28:	bl	121f0 <free@plt>
   31e2c:	mov	r4, r6
   31e30:	mov	r9, fp
   31e34:	mov	r0, fp
   31e38:	bl	124e4 <strlen@plt>
   31e3c:	cmp	r0, #0
   31e40:	bne	31da4 <__assert_fail@plt+0x1f5cc>
   31e44:	ldr	r5, [sp, #40]	; 0x28
   31e48:	ldrd	r2, [sp, #48]	; 0x30
   31e4c:	ldr	r0, [sp, #56]	; 0x38
   31e50:	ldr	r1, [sp, #60]	; 0x3c
   31e54:	str	fp, [sp]
   31e58:	bl	318f4 <__assert_fail@plt+0x1f11c>
   31e5c:	ldrd	r6, [sp, #48]	; 0x30
   31e60:	str	fp, [sp, #8]
   31e64:	ldr	r2, [sp, #56]	; 0x38
   31e68:	strd	r6, [sp]
   31e6c:	ldr	r3, [sp, #60]	; 0x3c
   31e70:	ldr	r0, [sp, #88]	; 0x58
   31e74:	ldr	r1, [sp, #92]	; 0x5c
   31e78:	bl	3bb28 <__assert_fail@plt+0x29350>
   31e7c:	cmp	r0, #0
   31e80:	bne	31d04 <__assert_fail@plt+0x1f52c>
   31e84:	bl	3197c <__assert_fail@plt+0x1f1a4>
   31e88:	bl	318b0 <__assert_fail@plt+0x1f0d8>
   31e8c:	b	31bfc <__assert_fail@plt+0x1f424>
   31e90:	ldr	ip, [sp, #100]	; 0x64
   31e94:	mov	r2, #5
   31e98:	movw	r1, #38040	; 0x9498
   31e9c:	mov	r0, #0
   31ea0:	movt	r1, #5
   31ea4:	ldr	r7, [ip]
   31ea8:	bl	12298 <dcgettext@plt>
   31eac:	ldr	ip, [sp, #76]	; 0x4c
   31eb0:	ldr	r3, [r5]
   31eb4:	rsb	r1, ip, r4
   31eb8:	str	r6, [sp, #8]
   31ebc:	ldr	r6, [sp, #56]	; 0x38
   31ec0:	add	r4, r4, #12
   31ec4:	asr	ip, r1, #31
   31ec8:	str	r6, [sp, #12]
   31ecc:	mov	r2, r0
   31ed0:	mov	r0, r7
   31ed4:	ldr	r7, [sp, #112]	; 0x70
   31ed8:	smull	r7, lr, r7, r1
   31edc:	ldr	r7, [sp, #84]	; 0x54
   31ee0:	mov	r1, #1
   31ee4:	str	r7, [sp]
   31ee8:	rsb	ip, ip, lr, asr r1
   31eec:	str	ip, [sp, #4]
   31ef0:	bl	125d4 <__fprintf_chk@plt>
   31ef4:	ldr	r7, [sp, #72]	; 0x48
   31ef8:	cmp	r4, r7
   31efc:	bls	31d14 <__assert_fail@plt+0x1f53c>
   31f00:	bl	318b0 <__assert_fail@plt+0x1f0d8>
   31f04:	ldr	r0, [sp, #76]	; 0x4c
   31f08:	bl	121f0 <free@plt>
   31f0c:	mov	r9, #1
   31f10:	b	31b8c <__assert_fail@plt+0x1f3b4>
   31f14:	ldr	r7, [sp, #100]	; 0x64
   31f18:	mov	r2, #5
   31f1c:	movw	r1, #38100	; 0x94d4
   31f20:	mov	r0, #0
   31f24:	movt	r1, #5
   31f28:	ldr	r5, [sp, #40]	; 0x28
   31f2c:	ldr	r4, [r7]
   31f30:	bl	12298 <dcgettext@plt>
   31f34:	ldr	ip, [sp, #76]	; 0x4c
   31f38:	mov	r1, #1
   31f3c:	rsb	lr, ip, r6
   31f40:	ldr	ip, [sp, #112]	; 0x70
   31f44:	smull	ip, r7, ip, lr
   31f48:	asr	lr, lr, #31
   31f4c:	rsb	lr, lr, r7, asr r1
   31f50:	mov	r2, r0
   31f54:	mov	r0, r4
   31f58:	ldr	r4, [sp, #84]	; 0x54
   31f5c:	str	r4, [sp]
   31f60:	mov	r4, r6
   31f64:	ldr	r3, [r5]
   31f68:	str	lr, [sp, #4]
   31f6c:	bl	125d4 <__fprintf_chk@plt>
   31f70:	b	31e48 <__assert_fail@plt+0x1f670>
   31f74:	movw	r1, #38136	; 0x94f8
   31f78:	mov	r0, r5
   31f7c:	movt	r1, #5
   31f80:	bl	123a0 <bfd_get_section_by_name@plt>
   31f84:	subs	r4, r0, #0
   31f88:	beq	31bd8 <__assert_fail@plt+0x1f400>
   31f8c:	ldr	r6, [r4, #48]	; 0x30
   31f90:	mov	sl, #0
   31f94:	ldr	r7, [r4, #52]	; 0x34
   31f98:	mov	fp, #0
   31f9c:	mov	r0, r6
   31fa0:	bl	12358 <xmalloc@plt>
   31fa4:	str	r6, [sp, #8]
   31fa8:	mov	r1, r4
   31fac:	str	r7, [sp, #12]
   31fb0:	strd	sl, [sp]
   31fb4:	mov	r2, r0
   31fb8:	mov	r8, r0
   31fbc:	mov	r0, r5
   31fc0:	bl	1228c <bfd_get_section_contents@plt>
   31fc4:	cmp	r0, #0
   31fc8:	beq	31bfc <__assert_fail@plt+0x1f424>
   31fcc:	str	r6, [sp]
   31fd0:	mov	r1, r5
   31fd4:	str	r7, [sp, #4]
   31fd8:	mov	r2, r8
   31fdc:	ldr	r0, [sp, #88]	; 0x58
   31fe0:	bl	43e48 <__assert_fail@plt+0x31670>
   31fe4:	cmp	r0, #0
   31fe8:	beq	31bfc <__assert_fail@plt+0x1f424>
   31fec:	mov	r0, r8
   31ff0:	bl	121f0 <free@plt>
   31ff4:	ldr	r0, [sp, #88]	; 0x58
   31ff8:	b	31c00 <__assert_fail@plt+0x1f428>
   31ffc:	mov	r2, #5
   32000:	movw	r1, #38144	; 0x9500
   32004:	ldr	r0, [sp, #116]	; 0x74
   32008:	movt	r1, #5
   3200c:	bl	12298 <dcgettext@plt>
   32010:	ldr	r1, [r5]
   32014:	bl	485b4 <__assert_fail@plt+0x35ddc>
   32018:	ldr	r0, [sp, #116]	; 0x74
   3201c:	b	31c00 <__assert_fail@plt+0x1f428>
   32020:	ldr	ip, [sp, #124]	; 0x7c
   32024:	ldr	r6, [sp, #120]	; 0x78
   32028:	add	r7, r6, ip, lsl #2
   3202c:	cmp	r6, r7
   32030:	bcs	3227c <__assert_fail@plt+0x1faa4>
   32034:	mov	r4, #0
   32038:	str	r4, [sp, #24]
   3203c:	mov	r8, r4
   32040:	b	32054 <__assert_fail@plt+0x1f87c>
   32044:	add	r6, r6, #4
   32048:	cmp	r7, r6
   3204c:	bls	32178 <__assert_fail@plt+0x1f9a0>
   32050:	ldr	r3, [r5, #4]
   32054:	ldr	r3, [r3, #276]	; 0x114
   32058:	mov	r0, r5
   3205c:	ldr	r1, [r6]
   32060:	add	r2, sp, #128	; 0x80
   32064:	blx	r3
   32068:	ldrb	r3, [sp, #136]	; 0x88
   3206c:	cmp	r3, #45	; 0x2d
   32070:	bne	32044 <__assert_fail@plt+0x1f86c>
   32074:	ldr	ip, [sp, #24]
   32078:	cmp	ip, #0
   3207c:	beq	321a8 <__assert_fail@plt+0x1f9d0>
   32080:	mov	fp, r6
   32084:	ldr	r4, [sp, #140]	; 0x8c
   32088:	mov	sl, #0
   3208c:	b	320ec <__assert_fail@plt+0x1f914>
   32090:	add	r9, fp, #4
   32094:	cmp	r7, r9
   32098:	bls	32108 <__assert_fail@plt+0x1f930>
   3209c:	mov	r0, r4
   320a0:	bl	1237c <xstrdup@plt>
   320a4:	mov	r6, r0
   320a8:	bl	124e4 <strlen@plt>
   320ac:	mov	r2, #0
   320b0:	add	r3, r6, r0
   320b4:	mov	r0, r6
   320b8:	strb	r8, [r3, #-1]
   320bc:	ldr	r3, [fp, #4]
   320c0:	ldr	r1, [r3, #4]
   320c4:	bl	122ec <concat@plt>
   320c8:	mov	r4, r0
   320cc:	mov	r0, r6
   320d0:	bl	121f0 <free@plt>
   320d4:	cmp	sl, #0
   320d8:	beq	320e4 <__assert_fail@plt+0x1f90c>
   320dc:	mov	r0, sl
   320e0:	bl	121f0 <free@plt>
   320e4:	mov	fp, r9
   320e8:	mov	sl, r4
   320ec:	mov	r0, r4
   320f0:	mov	r6, fp
   320f4:	bl	124e4 <strlen@plt>
   320f8:	add	r0, r4, r0
   320fc:	ldrb	r3, [r0, #-1]
   32100:	cmp	r3, #92	; 0x5c
   32104:	beq	32090 <__assert_fail@plt+0x1f8b8>
   32108:	ldrd	r2, [sp, #128]	; 0x80
   3210c:	ldrb	r0, [sp, #144]	; 0x90
   32110:	ldrsh	r1, [sp, #146]	; 0x92
   32114:	str	r4, [sp]
   32118:	bl	318f4 <__assert_fail@plt+0x1f11c>
   3211c:	ldrd	sl, [sp, #128]	; 0x80
   32120:	ldrb	r2, [sp, #144]	; 0x90
   32124:	ldrsh	r3, [sp, #146]	; 0x92
   32128:	ldr	r0, [sp, #88]	; 0x58
   3212c:	str	r4, [sp, #8]
   32130:	ldr	r1, [sp, #24]
   32134:	strd	sl, [sp]
   32138:	bl	3bb28 <__assert_fail@plt+0x29350>
   3213c:	cmp	r0, #0
   32140:	beq	31e84 <__assert_fail@plt+0x1f6ac>
   32144:	mov	r9, #1
   32148:	b	32044 <__assert_fail@plt+0x1f86c>
   3214c:	ldr	r7, [sp, #124]	; 0x7c
   32150:	cmp	r7, #0
   32154:	ble	31bf0 <__assert_fail@plt+0x1f418>
   32158:	mov	r0, r5
   3215c:	ldr	r1, [sp, #120]	; 0x78
   32160:	mov	r2, r7
   32164:	ldr	r3, [sp, #88]	; 0x58
   32168:	bl	47d58 <__assert_fail@plt+0x35580>
   3216c:	cmp	r0, #0
   32170:	bne	31ff4 <__assert_fail@plt+0x1f81c>
   32174:	b	31bfc <__assert_fail@plt+0x1f424>
   32178:	bl	318b0 <__assert_fail@plt+0x1f0d8>
   3217c:	ldr	r6, [sp, #24]
   32180:	cmp	r6, #0
   32184:	beq	3219c <__assert_fail@plt+0x1f9c4>
   32188:	mov	r1, r6
   3218c:	ldr	r0, [sp, #88]	; 0x58
   32190:	bl	3ba84 <__assert_fail@plt+0x292ac>
   32194:	cmp	r0, #0
   32198:	beq	31bfc <__assert_fail@plt+0x1f424>
   3219c:	ldr	r3, [r5, #4]
   321a0:	ldr	r2, [r3, #4]
   321a4:	b	31bd0 <__assert_fail@plt+0x1f3f8>
   321a8:	ldr	r4, [sp, #124]	; 0x7c
   321ac:	mov	r2, ip
   321b0:	ldr	r0, [sp, #88]	; 0x58
   321b4:	mov	r1, r5
   321b8:	ldr	r3, [sp, #120]	; 0x78
   321bc:	str	r4, [sp]
   321c0:	bl	3ba18 <__assert_fail@plt+0x29240>
   321c4:	cmp	r0, #0
   321c8:	str	r0, [sp, #24]
   321cc:	bne	32080 <__assert_fail@plt+0x1f8a8>
   321d0:	b	31bfc <__assert_fail@plt+0x1f424>
   321d4:	ldr	ip, [sp, #124]	; 0x7c
   321d8:	mov	r1, r5
   321dc:	ldr	r0, [sp, #88]	; 0x58
   321e0:	mov	r2, #1
   321e4:	ldr	r3, [sp, #120]	; 0x78
   321e8:	str	ip, [sp]
   321ec:	bl	3ba18 <__assert_fail@plt+0x29240>
   321f0:	cmp	r0, #0
   321f4:	str	r0, [sp, #92]	; 0x5c
   321f8:	bne	31cbc <__assert_fail@plt+0x1f4e4>
   321fc:	b	31bfc <__assert_fail@plt+0x1f424>
   32200:	movw	r2, #168	; 0xa8
   32204:	movt	r2, #7
   32208:	ldr	r6, [r5]
   3220c:	ldr	r5, [r2]
   32210:	bl	12310 <bfd_get_error@plt>
   32214:	bl	126e8 <bfd_errmsg@plt>
   32218:	str	r8, [sp]
   3221c:	mov	r3, r6
   32220:	movw	r2, #38028	; 0x948c
   32224:	mov	r1, #1
   32228:	movt	r2, #5
   3222c:	str	r0, [sp, #4]
   32230:	mov	r0, r5
   32234:	bl	125d4 <__fprintf_chk@plt>
   32238:	b	31bfc <__assert_fail@plt+0x1f424>
   3223c:	movw	r2, #168	; 0xa8
   32240:	movt	r2, #7
   32244:	ldr	r5, [r5]
   32248:	ldr	r4, [r2]
   3224c:	bl	12310 <bfd_get_error@plt>
   32250:	bl	126e8 <bfd_errmsg@plt>
   32254:	ldr	r7, [sp, #84]	; 0x54
   32258:	mov	r3, r5
   3225c:	movw	r2, #38028	; 0x948c
   32260:	mov	r1, #1
   32264:	movt	r2, #5
   32268:	str	r7, [sp]
   3226c:	str	r0, [sp, #4]
   32270:	mov	r0, r4
   32274:	bl	125d4 <__fprintf_chk@plt>
   32278:	b	31bfc <__assert_fail@plt+0x1f424>
   3227c:	bl	318b0 <__assert_fail@plt+0x1f0d8>
   32280:	b	3219c <__assert_fail@plt+0x1f9c4>
   32284:	bl	122b0 <__stack_chk_fail@plt>
   32288:	push	{r4, r5, r6, lr}
   3228c:	movw	r5, #65176	; 0xfe98
   32290:	ldr	ip, [r1]
   32294:	movt	r5, #6
   32298:	mov	r4, r1
   3229c:	sub	sp, sp, #16
   322a0:	sub	r1, ip, #1
   322a4:	ldr	r3, [r5]
   322a8:	cmp	r1, #22
   322ac:	str	r3, [sp, #12]
   322b0:	bhi	3234c <__assert_fail@plt+0x1fb74>
   322b4:	mov	r6, #1
   322b8:	mov	r3, r6
   322bc:	lsl	r1, r6, r1
   322c0:	movt	r3, #96	; 0x60
   322c4:	and	r3, r1, r3
   322c8:	cmp	r3, #0
   322cc:	beq	3234c <__assert_fail@plt+0x1fb74>
   322d0:	cmp	r2, #0
   322d4:	beq	32318 <__assert_fail@plt+0x1fb40>
   322d8:	ldr	r3, [r2, #4]
   322dc:	cmp	r3, r4
   322e0:	beq	32368 <__assert_fail@plt+0x1fb90>
   322e4:	ldr	r3, [r2]
   322e8:	cmp	r2, r3
   322ec:	bne	32310 <__assert_fail@plt+0x1fb38>
   322f0:	b	32368 <__assert_fail@plt+0x1fb90>
   322f4:	ldr	r1, [r3, #4]
   322f8:	cmp	r1, r4
   322fc:	beq	32368 <__assert_fail@plt+0x1fb90>
   32300:	ldr	r1, [r3]
   32304:	cmp	r1, r3
   32308:	beq	32368 <__assert_fail@plt+0x1fb90>
   3230c:	mov	r3, r1
   32310:	cmp	r3, #0
   32314:	bne	322f4 <__assert_fail@plt+0x1fb1c>
   32318:	sub	ip, ip, #22
   3231c:	str	r2, [sp, #4]
   32320:	cmp	ip, #1
   32324:	str	r4, [sp, #8]
   32328:	ldr	r3, [r4, #12]
   3232c:	bls	323e4 <__assert_fail@plt+0x1fc0c>
   32330:	ldr	r3, [r3]
   32334:	ldr	r1, [r3]
   32338:	cmp	r1, #0
   3233c:	beq	3234c <__assert_fail@plt+0x1fb74>
   32340:	add	r2, sp, #4
   32344:	bl	32288 <__assert_fail@plt+0x1fab0>
   32348:	b	32350 <__assert_fail@plt+0x1fb78>
   3234c:	mov	r0, r4
   32350:	ldr	r2, [sp, #12]
   32354:	ldr	r3, [r5]
   32358:	cmp	r2, r3
   3235c:	bne	323f4 <__assert_fail@plt+0x1fc1c>
   32360:	add	sp, sp, #16
   32364:	pop	{r4, r5, r6, pc}
   32368:	movw	r3, #168	; 0xa8
   3236c:	movt	r3, #7
   32370:	mov	r2, #5
   32374:	movw	r1, #38268	; 0x957c
   32378:	mov	r0, #0
   3237c:	movt	r1, #5
   32380:	ldr	r6, [r3]
   32384:	bl	12298 <dcgettext@plt>
   32388:	mov	r2, r0
   3238c:	b	323a4 <__assert_fail@plt+0x1fbcc>
   32390:	ldr	r3, [r4, #12]
   32394:	ldr	r1, [r3]
   32398:	ldr	r4, [r1]
   3239c:	cmp	r4, #0
   323a0:	beq	323dc <__assert_fail@plt+0x1fc04>
   323a4:	ldr	r3, [r4]
   323a8:	cmp	r3, #1
   323ac:	beq	32390 <__assert_fail@plt+0x1fbb8>
   323b0:	sub	r3, r3, #22
   323b4:	cmp	r3, #1
   323b8:	movhi	r3, #0
   323bc:	bls	323d4 <__assert_fail@plt+0x1fbfc>
   323c0:	mov	r0, r6
   323c4:	mov	r1, #1
   323c8:	bl	125d4 <__fprintf_chk@plt>
   323cc:	mov	r0, #0
   323d0:	b	32350 <__assert_fail@plt+0x1fb78>
   323d4:	ldr	r3, [r4, #12]
   323d8:	ldr	r3, [r3]
   323dc:	ldr	r3, [r3, #4]
   323e0:	b	323c0 <__assert_fail@plt+0x1fbe8>
   323e4:	add	r2, sp, #4
   323e8:	ldr	r1, [r3, #4]
   323ec:	bl	32288 <__assert_fail@plt+0x1fab0>
   323f0:	b	32350 <__assert_fail@plt+0x1fb78>
   323f4:	bl	122b0 <__stack_chk_fail@plt>
   323f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323fc:	sub	sp, sp, #20
   32400:	ldr	r8, [r0]
   32404:	mov	fp, r1
   32408:	str	r0, [sp, #12]
   3240c:	mov	r9, r2
   32410:	cmp	r8, #0
   32414:	mov	sl, r3
   32418:	ldrd	r6, [sp, #56]	; 0x38
   3241c:	beq	324d4 <__assert_fail@plt+0x1fcfc>
   32420:	ldr	r3, [r1]
   32424:	cmp	r3, #9
   32428:	bhi	324b4 <__assert_fail@plt+0x1fcdc>
   3242c:	add	r2, r3, #2
   32430:	ldr	r2, [r8, r2, lsl #2]
   32434:	cmn	r2, #1
   32438:	beq	324b4 <__assert_fail@plt+0x1fcdc>
   3243c:	add	r3, r8, r3, lsl #3
   32440:	ldrd	r4, [r3, #48]	; 0x30
   32444:	cmp	r7, r5
   32448:	cmpeq	r6, r4
   3244c:	bhi	3248c <__assert_fail@plt+0x1fcb4>
   32450:	b	324d4 <__assert_fail@plt+0x1fcfc>
   32454:	ldr	r3, [fp]
   32458:	add	r2, r3, #1
   3245c:	add	r1, r3, #3
   32460:	cmp	r2, #9
   32464:	add	r3, r8, r3, lsl #3
   32468:	str	r2, [fp]
   3246c:	bhi	324b4 <__assert_fail@plt+0x1fcdc>
   32470:	ldr	r2, [r8, r1, lsl #2]
   32474:	cmn	r2, #1
   32478:	beq	324b4 <__assert_fail@plt+0x1fcdc>
   3247c:	ldrd	r4, [r3, #56]	; 0x38
   32480:	cmp	r5, r7
   32484:	cmpeq	r4, r6
   32488:	bcs	324d4 <__assert_fail@plt+0x1fcfc>
   3248c:	ldr	r1, [r8, #4]
   32490:	mov	r0, sl
   32494:	ldr	r3, [r9]
   32498:	ldr	r1, [r1, #4]
   3249c:	strd	r4, [sp]
   324a0:	blx	r3
   324a4:	cmp	r0, #0
   324a8:	bne	32454 <__assert_fail@plt+0x1fc7c>
   324ac:	add	sp, sp, #20
   324b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324b4:	ldr	r8, [r8]
   324b8:	mov	r3, #0
   324bc:	ldr	r1, [sp, #12]
   324c0:	cmp	r8, #0
   324c4:	str	r8, [r1]
   324c8:	str	r3, [fp]
   324cc:	movne	r3, #0
   324d0:	bne	3242c <__assert_fail@plt+0x1fc54>
   324d4:	mov	r0, #1
   324d8:	add	sp, sp, #20
   324dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324e0:	push	{r4, r5, r6, r7, r8, lr}
   324e4:	mov	r5, r0
   324e8:	mov	r0, #32
   324ec:	mov	r7, r1
   324f0:	mov	r6, r2
   324f4:	mov	r8, r3
   324f8:	bl	12358 <xmalloc@plt>
   324fc:	mov	r1, #0
   32500:	mov	r2, #32
   32504:	mov	r4, r0
   32508:	bl	12580 <memset@plt>
   3250c:	ldr	ip, [r5]
   32510:	str	r7, [r4, #4]
   32514:	cmp	ip, #0
   32518:	str	r6, [r4, #12]
   3251c:	str	r8, [r4, #16]
   32520:	beq	32538 <__assert_fail@plt+0x1fd60>
   32524:	ldr	r3, [ip, #4]
   32528:	mov	r0, r4
   3252c:	str	r4, [r3]
   32530:	str	r4, [ip, #4]
   32534:	pop	{r4, r5, r6, r7, r8, pc}
   32538:	mov	r0, #8
   3253c:	bl	12358 <xmalloc@plt>
   32540:	mov	r2, #0
   32544:	mov	r3, r0
   32548:	mov	ip, r0
   3254c:	strb	r2, [r3], #1
   32550:	add	r3, r3, #1
   32554:	strb	r2, [r0, #1]
   32558:	strb	r2, [r3], #1
   3255c:	strb	r2, [r3], #1
   32560:	strb	r2, [r3], #1
   32564:	strb	r2, [r3], #1
   32568:	strb	r2, [r3], #1
   3256c:	strb	r2, [r3]
   32570:	str	r0, [ip, #4]
   32574:	str	r0, [r5]
   32578:	b	32524 <__assert_fail@plt+0x1fd4c>
   3257c:	push	{r4, r5, r6, lr}
   32580:	mov	r6, r0
   32584:	mov	r0, #16
   32588:	mov	r5, r1
   3258c:	bl	12358 <xmalloc@plt>
   32590:	mov	r1, #0
   32594:	mov	r2, #16
   32598:	mov	r4, r0
   3259c:	bl	12580 <memset@plt>
   325a0:	str	r6, [r4]
   325a4:	mov	r0, r4
   325a8:	str	r5, [r4, #4]
   325ac:	pop	{r4, r5, r6, pc}
   325b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   325b4:	movw	r4, #65176	; 0xfe98
   325b8:	movt	r4, #6
   325bc:	sub	sp, sp, #36	; 0x24
   325c0:	subs	r6, r1, #0
   325c4:	mov	r5, r0
   325c8:	ldr	r3, [r4]
   325cc:	mov	r9, r2
   325d0:	str	r3, [sp, #28]
   325d4:	beq	32674 <__assert_fail@plt+0x1fe9c>
   325d8:	cmp	r2, #0
   325dc:	bne	325f8 <__assert_fail@plt+0x1fe20>
   325e0:	b	3266c <__assert_fail@plt+0x1fe94>
   325e4:	ldr	r3, [r6, #12]
   325e8:	ldr	r3, [r3]
   325ec:	ldr	r6, [r3]
   325f0:	cmp	r6, #0
   325f4:	beq	32650 <__assert_fail@plt+0x1fe78>
   325f8:	ldr	r3, [r6]
   325fc:	cmp	r3, #1
   32600:	beq	325e4 <__assert_fail@plt+0x1fe0c>
   32604:	b	3261c <__assert_fail@plt+0x1fe44>
   32608:	ldr	r2, [r9, #12]
   3260c:	ldr	r2, [r2]
   32610:	ldr	r9, [r2]
   32614:	cmp	r9, #0
   32618:	beq	3266c <__assert_fail@plt+0x1fe94>
   3261c:	ldr	r2, [r9]
   32620:	cmp	r2, #1
   32624:	beq	32608 <__assert_fail@plt+0x1fe30>
   32628:	cmp	r6, r9
   3262c:	beq	3272c <__assert_fail@plt+0x1ff54>
   32630:	cmp	r3, #22
   32634:	beq	326b4 <__assert_fail@plt+0x1fedc>
   32638:	cmp	r3, #23
   3263c:	beq	326d4 <__assert_fail@plt+0x1fefc>
   32640:	cmp	r3, r2
   32644:	beq	32680 <__assert_fail@plt+0x1fea8>
   32648:	mov	r0, #0
   3264c:	b	32654 <__assert_fail@plt+0x1fe7c>
   32650:	mov	r0, r6
   32654:	ldr	r2, [sp, #28]
   32658:	ldr	r3, [r4]
   3265c:	cmp	r2, r3
   32660:	bne	32bf4 <__assert_fail@plt+0x2041c>
   32664:	add	sp, sp, #36	; 0x24
   32668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3266c:	mov	r0, r9
   32670:	b	32654 <__assert_fail@plt+0x1fe7c>
   32674:	rsbs	r0, r2, #1
   32678:	movcc	r0, #0
   3267c:	b	32654 <__assert_fail@plt+0x1fe7c>
   32680:	ldr	r1, [r6, #4]
   32684:	ldr	r2, [r9, #4]
   32688:	cmp	r1, r2
   3268c:	bne	32648 <__assert_fail@plt+0x1fe70>
   32690:	sub	r2, r3, #2
   32694:	cmp	r2, #4
   32698:	ldrls	pc, [pc, r2, lsl #2]
   3269c:	b	326f4 <__assert_fail@plt+0x1ff1c>
   326a0:	andeq	r2, r3, ip, lsr #14
   326a4:	andeq	r2, r3, r4, lsr r7
   326a8:	andeq	r2, r3, ip, lsr #14
   326ac:	andeq	r2, r3, ip, lsr #14
   326b0:	andeq	r2, r3, ip, lsr #14
   326b4:	cmp	r2, #23
   326b8:	bne	32640 <__assert_fail@plt+0x1fe68>
   326bc:	ldr	r3, [r6, #12]
   326c0:	mov	r0, r5
   326c4:	mov	r2, r9
   326c8:	ldr	r1, [r3, #4]
   326cc:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   326d0:	b	32654 <__assert_fail@plt+0x1fe7c>
   326d4:	cmp	r2, #22
   326d8:	bne	32640 <__assert_fail@plt+0x1fe68>
   326dc:	ldr	r3, [r9, #12]
   326e0:	mov	r0, r5
   326e4:	mov	r1, r6
   326e8:	ldr	r2, [r3, #4]
   326ec:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   326f0:	b	32654 <__assert_fail@plt+0x1fe7c>
   326f4:	ldr	r8, [r5, #48]	; 0x30
   326f8:	cmp	r8, #0
   326fc:	beq	3274c <__assert_fail@plt+0x1ff74>
   32700:	mov	r2, r8
   32704:	b	32714 <__assert_fail@plt+0x1ff3c>
   32708:	ldr	r2, [r2]
   3270c:	cmp	r2, #0
   32710:	beq	3274c <__assert_fail@plt+0x1ff74>
   32714:	ldr	r1, [r2, #4]
   32718:	cmp	r6, r1
   3271c:	bne	32708 <__assert_fail@plt+0x1ff30>
   32720:	ldr	r1, [r2, #8]
   32724:	cmp	r9, r1
   32728:	bne	32708 <__assert_fail@plt+0x1ff30>
   3272c:	mov	r0, #1
   32730:	b	32654 <__assert_fail@plt+0x1fe7c>
   32734:	ldr	r0, [r6, #12]
   32738:	ldr	r3, [r9, #12]
   3273c:	subs	r3, r0, r3
   32740:	rsbs	r0, r3, #0
   32744:	adcs	r0, r0, r3
   32748:	b	32654 <__assert_fail@plt+0x1fe7c>
   3274c:	add	r2, sp, #32
   32750:	sub	r3, r3, #7
   32754:	str	r6, [sp, #20]
   32758:	str	r8, [r2, #-16]!
   3275c:	str	r9, [sp, #24]
   32760:	str	r2, [r5, #48]	; 0x30
   32764:	cmp	r3, #16
   32768:	ldrls	pc, [pc, r3, lsl #2]
   3276c:	b	32bf8 <__assert_fail@plt+0x20420>
   32770:	andeq	r2, r3, r4, lsl #18
   32774:	andeq	r2, r3, r4, lsl #18
   32778:	andeq	r2, r3, r4, lsl #18
   3277c:	andeq	r2, r3, r4, lsl #18
   32780:	andeq	r2, r3, r4, lsr r8
   32784:			; <UNDEFINED> instruction: 0x000327b4
   32788:	ldrdeq	r2, [r3], -r0
   3278c:			; <UNDEFINED> instruction: 0x000327b4
   32790:	andeq	r2, r3, r8, lsl #23
   32794:	andeq	r2, r3, r8, lsr #22
   32798:			; <UNDEFINED> instruction: 0x00032bbc
   3279c:	andeq	r2, r3, r0, ror #21
   327a0:	andeq	r2, r3, r4, lsr #21
   327a4:			; <UNDEFINED> instruction: 0x000327b4
   327a8:			; <UNDEFINED> instruction: 0x000327b4
   327ac:	strdeq	r2, [r3], -r0
   327b0:	strdeq	r2, [r3], -r0
   327b4:	ldr	r1, [r6, #12]
   327b8:	mov	r0, r5
   327bc:	ldr	r2, [r9, #12]
   327c0:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   327c4:	ldr	r8, [sp, #16]
   327c8:	str	r8, [r5, #48]	; 0x30
   327cc:	b	32654 <__assert_fail@plt+0x1fe7c>
   327d0:	ldr	r2, [r6, #12]
   327d4:	ldr	r3, [r9, #12]
   327d8:	ldr	r0, [r2, #8]
   327dc:	ldr	r1, [r3, #8]
   327e0:	cmp	r0, r1
   327e4:	beq	32f2c <__assert_fail@plt+0x20754>
   327e8:	mov	r0, #0
   327ec:	b	327c8 <__assert_fail@plt+0x1fff0>
   327f0:	ldr	r7, [r6, #12]
   327f4:	ldr	r6, [r9, #12]
   327f8:	ldr	r2, [r7]
   327fc:	ldr	r3, [r6]
   32800:	ldr	r0, [r2, #4]
   32804:	ldr	r1, [r3, #4]
   32808:	bl	12178 <strcmp@plt>
   3280c:	cmp	r0, #0
   32810:	bne	327e8 <__assert_fail@plt+0x20010>
   32814:	ldr	r1, [r7, #4]
   32818:	mov	r0, r5
   3281c:	ldr	r2, [r6, #4]
   32820:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32824:	ldr	r8, [sp, #16]
   32828:	adds	r0, r0, #0
   3282c:	movne	r0, #1
   32830:	b	327c8 <__assert_fail@plt+0x1fff0>
   32834:	ldr	r2, [r6, #12]
   32838:	cmp	r2, #0
   3283c:	beq	32f1c <__assert_fail@plt+0x20744>
   32840:	ldr	r3, [r9, #12]
   32844:	cmp	r3, #0
   32848:	moveq	r0, r3
   3284c:	beq	327c8 <__assert_fail@plt+0x1fff0>
   32850:	ldr	ip, [r2]
   32854:	ldr	sl, [r2, #4]
   32858:	ldr	r9, [r3]
   3285c:	ldr	r0, [ip]
   32860:	ldr	fp, [r3, #4]
   32864:	cmp	r0, #0
   32868:	beq	32f04 <__assert_fail@plt+0x2072c>
   3286c:	ldr	r1, [r9]
   32870:	cmp	r1, #0
   32874:	beq	32f14 <__assert_fail@plt+0x2073c>
   32878:	ldrb	r2, [r0]
   3287c:	ldrb	r3, [r1]
   32880:	cmp	r2, r3
   32884:	bne	327e8 <__assert_fail@plt+0x20010>
   32888:	ldrd	r6, [sl]
   3288c:	ldrd	r2, [fp]
   32890:	cmp	r7, r3
   32894:	cmpeq	r6, r2
   32898:	bne	327e8 <__assert_fail@plt+0x20010>
   3289c:	mov	r6, ip
   328a0:	mov	r7, r9
   328a4:	str	r8, [sp, #12]
   328a8:	b	328ec <__assert_fail@plt+0x20114>
   328ac:	ldr	r0, [r6, #4]!
   328b0:	add	r7, r7, #4
   328b4:	cmp	r0, #0
   328b8:	beq	32efc <__assert_fail@plt+0x20724>
   328bc:	ldr	r1, [r7]
   328c0:	cmp	r1, #0
   328c4:	beq	32ef0 <__assert_fail@plt+0x20718>
   328c8:	ldrb	r2, [r0]
   328cc:	ldrb	r3, [r1]
   328d0:	cmp	r2, r3
   328d4:	bne	32bfc <__assert_fail@plt+0x20424>
   328d8:	ldrd	r8, [sl, #8]!
   328dc:	ldrd	r2, [fp, #8]!
   328e0:	cmp	r9, r3
   328e4:	cmpeq	r8, r2
   328e8:	bne	32bfc <__assert_fail@plt+0x20424>
   328ec:	bl	12178 <strcmp@plt>
   328f0:	subs	ip, r0, #0
   328f4:	beq	328ac <__assert_fail@plt+0x200d4>
   328f8:	ldr	r8, [sp, #12]
   328fc:	mov	r0, #0
   32900:	b	327c8 <__assert_fail@plt+0x1fff0>
   32904:	ldr	r7, [r6, #12]
   32908:	cmp	r7, #0
   3290c:	beq	32f1c <__assert_fail@plt+0x20744>
   32910:	ldr	r6, [r9, #12]
   32914:	cmp	r6, #0
   32918:	moveq	r0, r6
   3291c:	beq	327c8 <__assert_fail@plt+0x1fff0>
   32920:	ldr	r3, [r7, #8]
   32924:	ldr	r2, [r5, #32]
   32928:	cmp	r3, r2
   3292c:	bls	32940 <__assert_fail@plt+0x20168>
   32930:	ldr	r2, [r6, #8]
   32934:	cmp	r3, r2
   32938:	moveq	r0, #1
   3293c:	beq	327c8 <__assert_fail@plt+0x1fff0>
   32940:	ldr	r3, [r7]
   32944:	ldr	sl, [r6]
   32948:	rsbs	r2, r3, #1
   3294c:	movcc	r2, #0
   32950:	cmp	sl, #0
   32954:	eoreq	r2, r2, #1
   32958:	cmp	r2, #0
   3295c:	bne	32c20 <__assert_fail@plt+0x20448>
   32960:	ldr	r2, [r7, #12]
   32964:	ldr	r1, [r6, #12]
   32968:	rsbs	r2, r2, #1
   3296c:	movcc	r2, #0
   32970:	cmp	r1, #0
   32974:	eoreq	r2, r2, #1
   32978:	cmp	r2, #0
   3297c:	bne	32c20 <__assert_fail@plt+0x20448>
   32980:	ldr	r2, [r7, #16]
   32984:	ldr	r1, [r6, #16]
   32988:	rsbs	r2, r2, #1
   3298c:	movcc	r2, #0
   32990:	cmp	r1, #0
   32994:	eoreq	r2, r2, #1
   32998:	cmp	r2, #0
   3299c:	bne	32c20 <__assert_fail@plt+0x20448>
   329a0:	ldr	r1, [r7, #20]
   329a4:	ldr	r0, [r6, #20]
   329a8:	rsbs	r2, r1, #1
   329ac:	movcc	r2, #0
   329b0:	cmp	r0, #0
   329b4:	eoreq	r2, r2, #1
   329b8:	cmp	r2, #0
   329bc:	bne	32c20 <__assert_fail@plt+0x20448>
   329c0:	cmp	r3, #0
   329c4:	beq	32c38 <__assert_fail@plt+0x20460>
   329c8:	sub	fp, r3, #4
   329cc:	ldr	r9, [fp, #4]!
   329d0:	cmp	r9, #0
   329d4:	beq	32c28 <__assert_fail@plt+0x20450>
   329d8:	ldr	r8, [sl], #4
   329dc:	cmp	r8, #0
   329e0:	beq	32c20 <__assert_fail@plt+0x20448>
   329e4:	ldr	r2, [r9]
   329e8:	ldr	r3, [r8]
   329ec:	ldrb	r0, [r2]
   329f0:	ldrb	r1, [r3]
   329f4:	cmp	r0, r1
   329f8:	bne	32c20 <__assert_fail@plt+0x20448>
   329fc:	ldr	r0, [r9, #8]
   32a00:	ldr	r1, [r8, #8]
   32a04:	cmp	r0, r1
   32a08:	bne	32c20 <__assert_fail@plt+0x20448>
   32a0c:	ldr	r1, [r9, #12]
   32a10:	ldr	r0, [r8, #12]
   32a14:	cmp	r1, r0
   32a18:	bne	32c20 <__assert_fail@plt+0x20448>
   32a1c:	cmp	r1, #0
   32a20:	ldr	r0, [r9, #16]
   32a24:	ldr	r1, [r8, #16]
   32a28:	beq	32c08 <__assert_fail@plt+0x20430>
   32a2c:	str	r2, [sp, #8]
   32a30:	str	r3, [sp, #4]
   32a34:	bl	12178 <strcmp@plt>
   32a38:	ldr	r2, [sp, #8]
   32a3c:	ldr	r3, [sp, #4]
   32a40:	cmp	r0, #0
   32a44:	bne	32c20 <__assert_fail@plt+0x20448>
   32a48:	mov	r1, r3
   32a4c:	mov	r0, r2
   32a50:	bl	12178 <strcmp@plt>
   32a54:	subs	r3, r0, #0
   32a58:	bne	32c20 <__assert_fail@plt+0x20448>
   32a5c:	ldr	r1, [r9, #4]
   32a60:	mov	r2, r3
   32a64:	mov	r0, r5
   32a68:	str	r3, [sp, #4]
   32a6c:	bl	32288 <__assert_fail@plt+0x1fab0>
   32a70:	ldr	r3, [sp, #4]
   32a74:	ldr	r1, [r8, #4]
   32a78:	mov	r2, r3
   32a7c:	mov	r9, r0
   32a80:	mov	r0, r5
   32a84:	bl	32288 <__assert_fail@plt+0x1fab0>
   32a88:	mov	r1, r9
   32a8c:	mov	r2, r0
   32a90:	mov	r0, r5
   32a94:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32a98:	cmp	r0, #0
   32a9c:	bne	329cc <__assert_fail@plt+0x201f4>
   32aa0:	b	32c20 <__assert_fail@plt+0x20448>
   32aa4:	ldr	r2, [r6, #12]
   32aa8:	ldr	r3, [r9, #12]
   32aac:	ldr	r0, [r2, #12]
   32ab0:	ldr	r1, [r3, #12]
   32ab4:	cmp	r0, r1
   32ab8:	bne	327e8 <__assert_fail@plt+0x20010>
   32abc:	ldr	r1, [r2]
   32ac0:	mov	r0, r5
   32ac4:	ldr	r2, [r3]
   32ac8:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32acc:	cmp	r0, #0
   32ad0:	bne	32e44 <__assert_fail@plt+0x2066c>
   32ad4:	ldr	r8, [sp, #16]
   32ad8:	mov	r0, #0
   32adc:	b	327c8 <__assert_fail@plt+0x1fff0>
   32ae0:	ldr	r2, [r6, #12]
   32ae4:	mov	r0, r5
   32ae8:	ldr	r3, [r9, #12]
   32aec:	ldr	r1, [r2]
   32af0:	ldr	r2, [r3]
   32af4:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32af8:	cmp	r0, #0
   32afc:	beq	32ad4 <__assert_fail@plt+0x202fc>
   32b00:	ldr	r2, [r6, #12]
   32b04:	mov	r0, r5
   32b08:	ldr	r3, [r9, #12]
   32b0c:	ldr	r1, [r2, #4]
   32b10:	ldr	r2, [r3, #4]
   32b14:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32b18:	ldr	r8, [sp, #16]
   32b1c:	adds	r0, r0, #0
   32b20:	movne	r0, #1
   32b24:	b	327c8 <__assert_fail@plt+0x1fff0>
   32b28:	ldr	r7, [r6, #12]
   32b2c:	ldr	ip, [r9, #12]
   32b30:	ldrd	r0, [r7, #8]
   32b34:	ldrd	r2, [ip, #8]
   32b38:	cmp	r1, r3
   32b3c:	cmpeq	r0, r2
   32b40:	bne	327e8 <__assert_fail@plt+0x20010>
   32b44:	ldrd	r0, [r7, #16]
   32b48:	ldrd	r2, [ip, #16]
   32b4c:	cmp	r1, r3
   32b50:	cmpeq	r0, r2
   32b54:	bne	327e8 <__assert_fail@plt+0x20010>
   32b58:	ldr	r2, [r7, #24]
   32b5c:	ldr	r3, [ip, #24]
   32b60:	cmp	r2, r3
   32b64:	bne	327e8 <__assert_fail@plt+0x20010>
   32b68:	ldr	r1, [r7]
   32b6c:	mov	r0, r5
   32b70:	ldr	r2, [ip]
   32b74:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32b78:	ldr	r8, [sp, #16]
   32b7c:	adds	r0, r0, #0
   32b80:	movne	r0, #1
   32b84:	b	327c8 <__assert_fail@plt+0x1fff0>
   32b88:	ldr	r7, [r6, #12]
   32b8c:	ldr	ip, [r9, #12]
   32b90:	ldrd	r0, [r7, #8]
   32b94:	ldrd	r2, [ip, #8]
   32b98:	cmp	r1, r3
   32b9c:	cmpeq	r0, r2
   32ba0:	bne	327e8 <__assert_fail@plt+0x20010>
   32ba4:	ldrd	r0, [r7, #16]
   32ba8:	ldrd	r2, [ip, #16]
   32bac:	cmp	r1, r3
   32bb0:	cmpeq	r0, r2
   32bb4:	bne	327e8 <__assert_fail@plt+0x20010>
   32bb8:	b	32b68 <__assert_fail@plt+0x20390>
   32bbc:	ldr	r2, [r6, #12]
   32bc0:	ldr	r3, [r9, #12]
   32bc4:	ldr	r0, [r2, #4]
   32bc8:	ldr	r1, [r3, #4]
   32bcc:	cmp	r0, r1
   32bd0:	bne	327e8 <__assert_fail@plt+0x20010>
   32bd4:	ldr	r1, [r2]
   32bd8:	mov	r0, r5
   32bdc:	ldr	r2, [r3]
   32be0:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32be4:	ldr	r8, [sp, #16]
   32be8:	adds	r0, r0, #0
   32bec:	movne	r0, #1
   32bf0:	b	327c8 <__assert_fail@plt+0x1fff0>
   32bf4:	bl	122b0 <__stack_chk_fail@plt>
   32bf8:	bl	12790 <abort@plt>
   32bfc:	ldr	r8, [sp, #12]
   32c00:	mov	r0, ip
   32c04:	b	327c8 <__assert_fail@plt+0x1fff0>
   32c08:	cmp	r0, r1
   32c0c:	bne	32c20 <__assert_fail@plt+0x20448>
   32c10:	ldr	r0, [r9, #20]
   32c14:	ldr	r1, [r8, #20]
   32c18:	cmp	r0, r1
   32c1c:	beq	32a48 <__assert_fail@plt+0x20270>
   32c20:	mov	r0, #0
   32c24:	b	327c4 <__assert_fail@plt+0x1ffec>
   32c28:	ldr	r3, [sl]
   32c2c:	cmp	r3, #0
   32c30:	ldreq	r1, [r7, #20]
   32c34:	bne	32c20 <__assert_fail@plt+0x20448>
   32c38:	cmp	r1, #0
   32c3c:	beq	32c54 <__assert_fail@plt+0x2047c>
   32c40:	mov	r0, r5
   32c44:	ldr	r2, [r6, #20]
   32c48:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32c4c:	cmp	r0, #0
   32c50:	beq	32c20 <__assert_fail@plt+0x20448>
   32c54:	ldr	r9, [r7, #12]
   32c58:	cmp	r9, #0
   32c5c:	subne	r9, r9, #4
   32c60:	ldrne	r8, [r6, #12]
   32c64:	beq	32cd8 <__assert_fail@plt+0x20500>
   32c68:	ldr	r2, [r9, #4]!
   32c6c:	cmp	r2, #0
   32c70:	beq	32ccc <__assert_fail@plt+0x204f4>
   32c74:	ldr	r3, [r8], #4
   32c78:	cmp	r3, #0
   32c7c:	beq	32c20 <__assert_fail@plt+0x20448>
   32c80:	ldr	r0, [r2, #4]
   32c84:	ldr	r1, [r3, #4]
   32c88:	cmp	r0, r1
   32c8c:	bne	32c20 <__assert_fail@plt+0x20448>
   32c90:	ldr	r0, [r2, #8]
   32c94:	ldr	r1, [r3, #8]
   32c98:	cmp	r0, r1
   32c9c:	bne	32c20 <__assert_fail@plt+0x20448>
   32ca0:	ldr	ip, [r2, #12]
   32ca4:	ldr	r1, [r3, #12]
   32ca8:	cmp	ip, r1
   32cac:	bne	32c20 <__assert_fail@plt+0x20448>
   32cb0:	ldr	r1, [r2]
   32cb4:	mov	r0, r5
   32cb8:	ldr	r2, [r3]
   32cbc:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32cc0:	cmp	r0, #0
   32cc4:	bne	32c68 <__assert_fail@plt+0x20490>
   32cc8:	b	32c20 <__assert_fail@plt+0x20448>
   32ccc:	ldr	r3, [r8]
   32cd0:	cmp	r3, #0
   32cd4:	bne	32c20 <__assert_fail@plt+0x20448>
   32cd8:	ldr	r3, [r7, #16]
   32cdc:	cmp	r3, #0
   32ce0:	beq	32fc0 <__assert_fail@plt+0x207e8>
   32ce4:	ldr	r9, [r6, #16]
   32ce8:	sub	r3, r3, #4
   32cec:	str	r3, [sp, #12]
   32cf0:	ldr	r3, [sp, #12]
   32cf4:	ldr	r7, [r3, #4]!
   32cf8:	cmp	r7, #0
   32cfc:	str	r3, [sp, #12]
   32d00:	beq	32fb0 <__assert_fail@plt+0x207d8>
   32d04:	ldr	r6, [r9], #4
   32d08:	cmp	r6, #0
   32d0c:	beq	32c20 <__assert_fail@plt+0x20448>
   32d10:	ldr	r0, [r7]
   32d14:	ldr	r1, [r6]
   32d18:	ldrb	r2, [r0]
   32d1c:	ldrb	r3, [r1]
   32d20:	cmp	r2, r3
   32d24:	bne	32c20 <__assert_fail@plt+0x20448>
   32d28:	bl	12178 <strcmp@plt>
   32d2c:	cmp	r0, #0
   32d30:	bne	32c20 <__assert_fail@plt+0x20448>
   32d34:	ldr	r3, [r7, #4]
   32d38:	ldr	fp, [r6, #4]
   32d3c:	rsbs	r3, r3, #1
   32d40:	movcc	r3, #0
   32d44:	cmp	fp, #0
   32d48:	movne	r2, r3
   32d4c:	eoreq	r2, r3, #1
   32d50:	cmp	r2, #0
   32d54:	bne	32c20 <__assert_fail@plt+0x20448>
   32d58:	cmp	r3, #0
   32d5c:	strne	r9, [sp]
   32d60:	rsbne	r6, fp, #0
   32d64:	beq	32cf0 <__assert_fail@plt+0x20518>
   32d68:	ldr	sl, [fp, r6]
   32d6c:	cmp	sl, #0
   32d70:	beq	32fc8 <__assert_fail@plt+0x207f0>
   32d74:	ldr	r7, [fp], #4
   32d78:	cmp	r7, #0
   32d7c:	beq	32c20 <__assert_fail@plt+0x20448>
   32d80:	ldr	r0, [sl]
   32d84:	ldr	r1, [r7]
   32d88:	ldrb	r2, [r0]
   32d8c:	ldrb	r3, [r1]
   32d90:	cmp	r2, r3
   32d94:	bne	32c20 <__assert_fail@plt+0x20448>
   32d98:	ldr	r2, [sl, #8]
   32d9c:	ldr	r3, [r7, #8]
   32da0:	cmp	r2, r3
   32da4:	bne	32c20 <__assert_fail@plt+0x20448>
   32da8:	ldr	r2, [sl, #12]
   32dac:	ldr	r3, [r7, #12]
   32db0:	cmp	r2, r3
   32db4:	bne	32c20 <__assert_fail@plt+0x20448>
   32db8:	ldr	r2, [sl, #16]
   32dbc:	ldr	r3, [r7, #16]
   32dc0:	cmp	r2, r3
   32dc4:	bne	32c20 <__assert_fail@plt+0x20448>
   32dc8:	ldrd	r2, [sl, #24]
   32dcc:	ldrd	r8, [r7, #24]
   32dd0:	cmp	r3, r9
   32dd4:	cmpeq	r2, r8
   32dd8:	bne	32c20 <__assert_fail@plt+0x20448>
   32ddc:	ldr	r3, [sl, #32]
   32de0:	ldr	r2, [r7, #32]
   32de4:	rsbs	r3, r3, #1
   32de8:	movcc	r3, #0
   32dec:	cmp	r2, #0
   32df0:	eoreq	r3, r3, #1
   32df4:	cmp	r3, #0
   32df8:	bne	32c20 <__assert_fail@plt+0x20448>
   32dfc:	bl	12178 <strcmp@plt>
   32e00:	cmp	r0, #0
   32e04:	bne	32c20 <__assert_fail@plt+0x20448>
   32e08:	mov	r0, r5
   32e0c:	ldr	r1, [sl, #4]
   32e10:	ldr	r2, [r7, #4]
   32e14:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32e18:	cmp	r0, #0
   32e1c:	beq	32c20 <__assert_fail@plt+0x20448>
   32e20:	ldr	r1, [sl, #32]
   32e24:	cmp	r1, #0
   32e28:	beq	32d68 <__assert_fail@plt+0x20590>
   32e2c:	ldr	r2, [r7, #32]
   32e30:	mov	r0, r5
   32e34:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32e38:	cmp	r0, #0
   32e3c:	bne	32d68 <__assert_fail@plt+0x20590>
   32e40:	b	32c20 <__assert_fail@plt+0x20448>
   32e44:	ldr	r2, [r6, #12]
   32e48:	mov	r0, r5
   32e4c:	ldr	r3, [r9, #12]
   32e50:	ldr	r1, [r2, #4]
   32e54:	ldr	r2, [r3, #4]
   32e58:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32e5c:	cmp	r0, #0
   32e60:	beq	32ad4 <__assert_fail@plt+0x202fc>
   32e64:	ldr	r2, [r6, #12]
   32e68:	ldr	r3, [r9, #12]
   32e6c:	ldr	r7, [r2, #8]
   32e70:	ldr	r6, [r3, #8]
   32e74:	rsbs	r3, r7, #1
   32e78:	movcc	r3, #0
   32e7c:	cmp	r6, #0
   32e80:	movne	r2, r3
   32e84:	eoreq	r2, r3, #1
   32e88:	cmp	r2, #0
   32e8c:	bne	32ad4 <__assert_fail@plt+0x202fc>
   32e90:	cmp	r3, #0
   32e94:	bne	32ee4 <__assert_fail@plt+0x2070c>
   32e98:	mov	r9, r7
   32e9c:	ldr	r1, [r7], #4
   32ea0:	mov	r8, r6
   32ea4:	cmp	r1, #0
   32ea8:	beq	32ed8 <__assert_fail@plt+0x20700>
   32eac:	ldr	r2, [r6]
   32eb0:	add	r6, r6, #4
   32eb4:	cmp	r2, #0
   32eb8:	beq	32ad4 <__assert_fail@plt+0x202fc>
   32ebc:	mov	r0, r5
   32ec0:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32ec4:	cmp	r0, #0
   32ec8:	bne	32e98 <__assert_fail@plt+0x206c0>
   32ecc:	ldr	r3, [r9]
   32ed0:	cmp	r3, #0
   32ed4:	bne	32ad4 <__assert_fail@plt+0x202fc>
   32ed8:	ldr	r3, [r8]
   32edc:	cmp	r3, #0
   32ee0:	bne	32ad4 <__assert_fail@plt+0x202fc>
   32ee4:	ldr	r8, [sp, #16]
   32ee8:	mov	r0, #1
   32eec:	b	327c8 <__assert_fail@plt+0x1fff0>
   32ef0:	ldr	r8, [sp, #12]
   32ef4:	mov	r0, r1
   32ef8:	b	327c8 <__assert_fail@plt+0x1fff0>
   32efc:	ldr	r8, [sp, #12]
   32f00:	mov	r9, r7
   32f04:	ldr	r0, [r9]
   32f08:	rsbs	r0, r0, #1
   32f0c:	movcc	r0, #0
   32f10:	b	327c8 <__assert_fail@plt+0x1fff0>
   32f14:	mov	r0, r1
   32f18:	b	327c8 <__assert_fail@plt+0x1fff0>
   32f1c:	ldr	r0, [r9, #12]
   32f20:	rsbs	r0, r0, #1
   32f24:	movcc	r0, #0
   32f28:	b	327c8 <__assert_fail@plt+0x1fff0>
   32f2c:	ldr	r1, [r2]
   32f30:	mov	r0, r5
   32f34:	ldr	r2, [r3]
   32f38:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32f3c:	cmp	r0, #0
   32f40:	beq	32ad4 <__assert_fail@plt+0x202fc>
   32f44:	ldr	r2, [r6, #12]
   32f48:	ldr	r3, [r9, #12]
   32f4c:	ldr	r7, [r2, #4]
   32f50:	ldr	r6, [r3, #4]
   32f54:	rsbs	r3, r7, #1
   32f58:	movcc	r3, #0
   32f5c:	cmp	r6, #0
   32f60:	movne	r2, r3
   32f64:	eoreq	r2, r3, #1
   32f68:	cmp	r2, #0
   32f6c:	bne	32ad4 <__assert_fail@plt+0x202fc>
   32f70:	cmp	r3, #0
   32f74:	bne	32ee4 <__assert_fail@plt+0x2070c>
   32f78:	mov	r9, r7
   32f7c:	ldr	r1, [r7], #4
   32f80:	mov	r8, r6
   32f84:	cmp	r1, #0
   32f88:	beq	32ed8 <__assert_fail@plt+0x20700>
   32f8c:	ldr	r2, [r6]
   32f90:	add	r6, r6, #4
   32f94:	cmp	r2, #0
   32f98:	beq	32ad4 <__assert_fail@plt+0x202fc>
   32f9c:	mov	r0, r5
   32fa0:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   32fa4:	cmp	r0, #0
   32fa8:	bne	32f78 <__assert_fail@plt+0x207a0>
   32fac:	b	32ecc <__assert_fail@plt+0x206f4>
   32fb0:	ldr	r0, [r9]
   32fb4:	rsbs	r0, r0, #1
   32fb8:	movcc	r0, #0
   32fbc:	b	327c4 <__assert_fail@plt+0x1ffec>
   32fc0:	mov	r0, #1
   32fc4:	b	327c4 <__assert_fail@plt+0x1ffec>
   32fc8:	ldr	r3, [fp]
   32fcc:	ldr	r9, [sp]
   32fd0:	cmp	r3, #0
   32fd4:	beq	32cf0 <__assert_fail@plt+0x20518>
   32fd8:	b	32c20 <__assert_fail@plt+0x20448>
   32fdc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   32fe0:	mov	r6, r2
   32fe4:	ldr	r3, [r2]
   32fe8:	mov	r8, r0
   32fec:	mov	r7, r1
   32ff0:	sub	r2, r3, #7
   32ff4:	cmp	r2, #3
   32ff8:	bhi	3311c <__assert_fail@plt+0x20944>
   32ffc:	ldr	r9, [r6, #12]
   33000:	ldr	r2, [r0, #32]
   33004:	ldr	r1, [r9, #8]
   33008:	cmp	r1, r2
   3300c:	bhi	3309c <__assert_fail@plt+0x208c4>
   33010:	ldr	r4, [r0, #44]	; 0x2c
   33014:	cmp	r4, #0
   33018:	bne	33030 <__assert_fail@plt+0x20858>
   3301c:	b	330a4 <__assert_fail@plt+0x208cc>
   33020:	ldr	r4, [r4]
   33024:	cmp	r4, #0
   33028:	beq	330a4 <__assert_fail@plt+0x208cc>
   3302c:	ldr	r3, [r6]
   33030:	ldr	r5, [r4, #4]
   33034:	ldr	ip, [r5]
   33038:	cmp	ip, r3
   3303c:	bne	33020 <__assert_fail@plt+0x20848>
   33040:	cmp	r7, #0
   33044:	beq	3310c <__assert_fail@plt+0x20934>
   33048:	ldr	r0, [r4, #8]
   3304c:	cmp	r0, #0
   33050:	beq	33020 <__assert_fail@plt+0x20848>
   33054:	ldrb	r1, [r0]
   33058:	ldrb	r2, [r7]
   3305c:	cmp	r1, r2
   33060:	bne	33020 <__assert_fail@plt+0x20848>
   33064:	mov	r1, r7
   33068:	bl	12178 <strcmp@plt>
   3306c:	cmp	r0, #0
   33070:	bne	33020 <__assert_fail@plt+0x20848>
   33074:	mov	r1, r5
   33078:	mov	r0, r8
   3307c:	mov	r2, r6
   33080:	bl	325b0 <__assert_fail@plt+0x1fdd8>
   33084:	cmp	r0, #0
   33088:	beq	33020 <__assert_fail@plt+0x20848>
   3308c:	ldr	r3, [r4, #4]
   33090:	ldr	r3, [r3, #12]
   33094:	ldr	r3, [r3, #8]
   33098:	str	r3, [r9, #8]
   3309c:	mov	r0, #1
   330a0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   330a4:	ldr	r3, [r8, #28]
   330a8:	mov	r0, #12
   330ac:	add	r3, r3, #1
   330b0:	str	r3, [r8, #28]
   330b4:	str	r3, [r9, #8]
   330b8:	bl	12358 <xmalloc@plt>
   330bc:	mov	r2, #0
   330c0:	mov	r3, r0
   330c4:	strb	r2, [r3], #1
   330c8:	add	r3, r3, #1
   330cc:	strb	r2, [r0, #1]
   330d0:	strb	r2, [r3], #1
   330d4:	strb	r2, [r3], #1
   330d8:	strb	r2, [r3], #1
   330dc:	strb	r2, [r3], #1
   330e0:	strb	r2, [r3], #1
   330e4:	strb	r2, [r3], #1
   330e8:	strb	r2, [r3], #1
   330ec:	strb	r2, [r3], #1
   330f0:	strb	r2, [r3], #1
   330f4:	strb	r2, [r3]
   330f8:	ldr	r3, [r8, #44]	; 0x2c
   330fc:	stm	r0, {r3, r6, r7}
   33100:	str	r0, [r8, #44]	; 0x2c
   33104:	mov	r0, #1
   33108:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3310c:	ldr	r3, [r4, #8]
   33110:	cmp	r3, #0
   33114:	bne	33020 <__assert_fail@plt+0x20848>
   33118:	b	33074 <__assert_fail@plt+0x2089c>
   3311c:	movw	r0, #38324	; 0x95b4
   33120:	movw	r1, #38464	; 0x9640
   33124:	movw	r3, #38184	; 0x9528
   33128:	movt	r0, #5
   3312c:	movt	r1, #5
   33130:	mov	r2, #2944	; 0xb80
   33134:	movt	r3, #5
   33138:	bl	127d8 <__assert_fail@plt>
   3313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33140:	sub	sp, sp, #36	; 0x24
   33144:	mov	r5, r0
   33148:	mov	r6, r1
   3314c:	ldr	ip, [sp, #72]	; 0x48
   33150:	mov	r7, r2
   33154:	mov	r4, r3
   33158:	ldr	r0, [r4]
   3315c:	sub	r3, r0, #22
   33160:	cmp	r3, #1
   33164:	bls	33204 <__assert_fail@plt+0x20a2c>
   33168:	cmp	ip, #0
   3316c:	beq	3324c <__assert_fail@plt+0x20a74>
   33170:	ldr	r3, [r5, #24]
   33174:	cmp	r0, #22
   33178:	str	r3, [ip, #8]
   3317c:	beq	33948 <__assert_fail@plt+0x21170>
   33180:	cmp	r0, #23
   33184:	beq	33240 <__assert_fail@plt+0x20a68>
   33188:	ldr	r3, [ip, #12]
   3318c:	cmp	r3, #1
   33190:	bne	33d24 <__assert_fail@plt+0x2154c>
   33194:	ldr	r8, [ip, #4]
   33198:	cmp	r0, #23
   3319c:	ldrls	pc, [pc, r0, lsl #2]
   331a0:	b	33944 <__assert_fail@plt+0x2116c>
   331a4:	andeq	r3, r3, r4, asr r2
   331a8:			; <UNDEFINED> instruction: 0x000337b0
   331ac:	andeq	r3, r3, r0, lsr #15
   331b0:	andeq	r3, r3, r8, lsl #15
   331b4:	andeq	r3, r3, r4, ror r7
   331b8:	andeq	r3, r3, r0, ror #14
   331bc:	andeq	r3, r3, ip, asr #14
   331c0:	andeq	r3, r3, r0, asr #12
   331c4:	andeq	r3, r3, r0, asr #12
   331c8:	andeq	r3, r3, r0, ror #9
   331cc:	andeq	r3, r3, r0, ror #9
   331d0:	ldrdeq	r3, [r3], -r4
   331d4:	andeq	r3, r3, r0, lsr #17
   331d8:	andeq	r3, r3, r8, lsl #16
   331dc:	ldrdeq	r3, [r3], -r4
   331e0:	muleq	r3, r8, r4
   331e4:	andeq	r3, r3, r4, lsr #8
   331e8:	andeq	r3, r3, r4, lsl #18
   331ec:	andeq	r3, r3, r8, asr #7
   331f0:	strdeq	r3, [r3], -r8
   331f4:	andeq	r3, r3, r4, asr #5
   331f8:	muleq	r3, r4, r2
   331fc:	andeq	r3, r3, r8, asr #18
   33200:	andeq	r3, r3, r0, asr #26
   33204:	ldr	r3, [r4, #12]
   33208:	ldr	r1, [r5, #24]
   3320c:	ldr	r2, [r3]
   33210:	ldr	lr, [r2, #8]
   33214:	cmp	lr, r1
   33218:	beq	33c50 <__assert_fail@plt+0x21478>
   3321c:	cmp	r0, #23
   33220:	bne	33168 <__assert_fail@plt+0x20990>
   33224:	cmp	r2, ip
   33228:	bne	33bf0 <__assert_fail@plt+0x21418>
   3322c:	mov	r2, ip
   33230:	str	r1, [ip, #8]
   33234:	mov	ip, r2
   33238:	ldr	r4, [r3, #4]
   3323c:	b	33158 <__assert_fail@plt+0x20980>
   33240:	ldr	r3, [r4, #12]
   33244:	ldr	r2, [r3]
   33248:	b	33234 <__assert_fail@plt+0x20a5c>
   3324c:	mov	r8, ip
   33250:	b	33198 <__assert_fail@plt+0x209c0>
   33254:	mov	r2, #5
   33258:	movw	r1, #38504	; 0x9668
   3325c:	mov	r0, #0
   33260:	movt	r1, #5
   33264:	bl	12298 <dcgettext@plt>
   33268:	movw	r1, #168	; 0xa8
   3326c:	movt	r1, #7
   33270:	movw	r2, #17728	; 0x4540
   33274:	movt	r2, #5
   33278:	mov	r3, r0
   3327c:	ldr	r0, [r1]
   33280:	mov	r1, #1
   33284:	bl	125d4 <__fprintf_chk@plt>
   33288:	mov	r0, #0
   3328c:	add	sp, sp, #36	; 0x24
   33290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33294:	ldr	r3, [r4, #12]
   33298:	mov	r2, #0
   3329c:	mov	r0, r5
   332a0:	str	r2, [sp]
   332a4:	mov	r1, r6
   332a8:	mov	r2, r7
   332ac:	bl	3313c <__assert_fail@plt+0x20964>
   332b0:	cmp	r0, #0
   332b4:	bne	33958 <__assert_fail@plt+0x21180>
   332b8:	mov	r0, #0
   332bc:	add	sp, sp, #36	; 0x24
   332c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   332c4:	ldr	r3, [r4, #12]
   332c8:	mov	r2, #0
   332cc:	mov	r0, r5
   332d0:	str	r2, [sp]
   332d4:	mov	r1, r6
   332d8:	mov	r2, r7
   332dc:	bl	3313c <__assert_fail@plt+0x20964>
   332e0:	cmp	r0, #0
   332e4:	beq	332b8 <__assert_fail@plt+0x20ae0>
   332e8:	ldr	r3, [r6, #68]	; 0x44
   332ec:	mov	r0, r7
   332f0:	blx	r3
   332f4:	b	3328c <__assert_fail@plt+0x20ab4>
   332f8:	ldr	r3, [r4, #12]
   332fc:	mov	r8, #0
   33300:	mov	r0, r5
   33304:	mov	r1, r6
   33308:	mov	r2, r7
   3330c:	ldr	r3, [r3]
   33310:	str	r8, [sp]
   33314:	bl	3313c <__assert_fail@plt+0x20964>
   33318:	cmp	r0, r8
   3331c:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33320:	ldr	ip, [r4, #12]
   33324:	ldr	r3, [ip, #8]
   33328:	cmp	r3, r8
   3332c:	beq	33c6c <__assert_fail@plt+0x21494>
   33330:	ldr	r3, [r3]
   33334:	cmp	r3, r8
   33338:	beq	33d1c <__assert_fail@plt+0x21544>
   3333c:	mov	r9, r8
   33340:	str	r9, [sp]
   33344:	mov	r0, r5
   33348:	mov	r1, r6
   3334c:	mov	r2, r7
   33350:	bl	3313c <__assert_fail@plt+0x20964>
   33354:	cmp	r0, #0
   33358:	beq	332b8 <__assert_fail@plt+0x20ae0>
   3335c:	ldr	ip, [r4, #12]
   33360:	add	r8, r8, #1
   33364:	ldr	r3, [ip, #8]
   33368:	ldr	r3, [r3, r8, lsl #2]
   3336c:	cmp	r3, #0
   33370:	bne	33340 <__assert_fail@plt+0x20b68>
   33374:	ldr	r3, [ip, #4]
   33378:	cmp	r3, #0
   3337c:	beq	33c84 <__assert_fail@plt+0x214ac>
   33380:	mov	r2, #0
   33384:	mov	r0, r5
   33388:	str	r2, [sp]
   3338c:	mov	r1, r6
   33390:	mov	r2, r7
   33394:	bl	3313c <__assert_fail@plt+0x20964>
   33398:	cmp	r0, #0
   3339c:	beq	332b8 <__assert_fail@plt+0x20ae0>
   333a0:	ldr	ip, [r4, #12]
   333a4:	ldr	r1, [ip, #4]
   333a8:	adds	r1, r1, #0
   333ac:	ldr	r4, [r6, #64]	; 0x40
   333b0:	mov	r0, r7
   333b4:	mov	r2, r8
   333b8:	movne	r1, #1
   333bc:	ldr	r3, [ip, #12]
   333c0:	blx	r4
   333c4:	b	3328c <__assert_fail@plt+0x20ab4>
   333c8:	ldr	r3, [r4, #12]
   333cc:	mov	r8, #0
   333d0:	mov	r0, r5
   333d4:	mov	r1, r6
   333d8:	mov	r2, r7
   333dc:	ldr	r3, [r3]
   333e0:	str	r8, [sp]
   333e4:	bl	3313c <__assert_fail@plt+0x20964>
   333e8:	cmp	r0, r8
   333ec:	beq	332b8 <__assert_fail@plt+0x20ae0>
   333f0:	ldr	r3, [r4, #12]
   333f4:	mov	r0, r5
   333f8:	mov	r1, r6
   333fc:	mov	r2, r7
   33400:	ldr	r3, [r3, #4]
   33404:	str	r8, [sp]
   33408:	bl	3313c <__assert_fail@plt+0x20964>
   3340c:	cmp	r0, r8
   33410:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33414:	ldr	r3, [r6, #60]	; 0x3c
   33418:	mov	r0, r7
   3341c:	blx	r3
   33420:	b	3328c <__assert_fail@plt+0x20ab4>
   33424:	ldr	r3, [r4, #12]
   33428:	mov	r8, #0
   3342c:	mov	r0, r5
   33430:	mov	r1, r6
   33434:	mov	r2, r7
   33438:	ldr	r3, [r3]
   3343c:	str	r8, [sp]
   33440:	bl	3313c <__assert_fail@plt+0x20964>
   33444:	cmp	r0, r8
   33448:	beq	332b8 <__assert_fail@plt+0x20ae0>
   3344c:	ldr	r3, [r4, #12]
   33450:	mov	r0, r5
   33454:	mov	r1, r6
   33458:	mov	r2, r7
   3345c:	ldr	r3, [r3, #4]
   33460:	str	r8, [sp]
   33464:	bl	3313c <__assert_fail@plt+0x20964>
   33468:	cmp	r0, r8
   3346c:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33470:	ldr	r1, [r4, #12]
   33474:	mov	r0, r7
   33478:	ldrd	r4, [r1, #16]
   3347c:	ldrd	r2, [r1, #8]
   33480:	strd	r4, [sp]
   33484:	ldr	r1, [r1, #24]
   33488:	str	r1, [sp, #8]
   3348c:	ldr	r1, [r6, #52]	; 0x34
   33490:	blx	r1
   33494:	b	3328c <__assert_fail@plt+0x20ab4>
   33498:	ldr	r3, [r4, #12]
   3349c:	mov	ip, #0
   334a0:	mov	r0, r5
   334a4:	mov	r1, r6
   334a8:	mov	r2, r7
   334ac:	ldr	r3, [r3]
   334b0:	str	ip, [sp]
   334b4:	bl	3313c <__assert_fail@plt+0x20964>
   334b8:	cmp	r0, #0
   334bc:	beq	332b8 <__assert_fail@plt+0x20ae0>
   334c0:	ldr	r3, [r4, #12]
   334c4:	mov	r0, r7
   334c8:	ldrd	r4, [r3, #16]
   334cc:	ldrd	r2, [r3, #8]
   334d0:	strd	r4, [sp]
   334d4:	ldr	r1, [r6, #48]	; 0x30
   334d8:	blx	r1
   334dc:	b	3328c <__assert_fail@plt+0x20ab4>
   334e0:	ldr	r1, [r4, #12]
   334e4:	cmp	r1, #0
   334e8:	beq	33c74 <__assert_fail@plt+0x2149c>
   334ec:	ldr	r2, [r1, #8]
   334f0:	ldr	r3, [r5, #32]
   334f4:	cmp	r2, r3
   334f8:	movhi	sl, r2
   334fc:	bls	33968 <__assert_fail@plt+0x21190>
   33500:	ldr	r3, [r5, #24]
   33504:	ldr	r2, [r1, #4]
   33508:	cmp	r3, r2
   3350c:	beq	339ac <__assert_fail@plt+0x211d4>
   33510:	ldr	r9, [r1, #20]
   33514:	str	r3, [r1, #4]
   33518:	adds	ip, r9, #0
   3351c:	movne	ip, #1
   33520:	cmp	r4, r9
   33524:	cmpne	r9, #0
   33528:	bne	339f8 <__assert_fail@plt+0x21220>
   3352c:	ldr	r0, [r4]
   33530:	subs	r2, r4, r9
   33534:	ldr	lr, [r4, #4]
   33538:	rsbs	r9, r2, #0
   3353c:	str	ip, [sp, #4]
   33540:	adcs	r9, r9, r2
   33544:	subs	r0, r0, #9
   33548:	rsbs	r3, r0, #0
   3354c:	str	r9, [sp, #8]
   33550:	adcs	r3, r3, r0
   33554:	str	lr, [sp]
   33558:	mov	r1, r8
   3355c:	mov	r2, sl
   33560:	mov	r0, r7
   33564:	ldr	ip, [r6, #88]	; 0x58
   33568:	blx	ip
   3356c:	cmp	r0, #0
   33570:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33574:	ldr	r3, [r4, #12]
   33578:	cmp	r3, #0
   3357c:	beq	33cc4 <__assert_fail@plt+0x214ec>
   33580:	ldr	r2, [r3]
   33584:	cmp	r2, #0
   33588:	beq	33a34 <__assert_fail@plt+0x2125c>
   3358c:	ldr	r8, [r2]
   33590:	cmp	r8, #0
   33594:	beq	33a34 <__assert_fail@plt+0x2125c>
   33598:	mov	r9, #4
   3359c:	mov	sl, #0
   335a0:	b	335dc <__assert_fail@plt+0x20e04>
   335a4:	ldr	ip, [r6, #92]	; 0x5c
   335a8:	mov	r0, r7
   335ac:	ldr	r1, [r8]
   335b0:	ldr	r2, [r8, #16]
   335b4:	ldr	r3, [r8, #8]
   335b8:	blx	ip
   335bc:	cmp	r0, #0
   335c0:	beq	332b8 <__assert_fail@plt+0x20ae0>
   335c4:	ldr	r3, [r4, #12]
   335c8:	ldr	r2, [r3]
   335cc:	ldr	r8, [r2, r9]
   335d0:	add	r9, r9, #4
   335d4:	cmp	r8, #0
   335d8:	beq	33a34 <__assert_fail@plt+0x2125c>
   335dc:	ldr	r3, [r8, #4]
   335e0:	mov	r0, r5
   335e4:	str	sl, [sp]
   335e8:	mov	r1, r6
   335ec:	mov	r2, r7
   335f0:	bl	3313c <__assert_fail@plt+0x20964>
   335f4:	cmp	r0, #0
   335f8:	beq	332b8 <__assert_fail@plt+0x20ae0>
   335fc:	ldr	ip, [r8, #12]
   33600:	cmp	ip, #0
   33604:	bne	335a4 <__assert_fail@plt+0x20dcc>
   33608:	ldr	lr, [r8, #20]
   3360c:	mov	r3, ip
   33610:	ldr	r1, [r8]
   33614:	mov	r0, r7
   33618:	ldr	r2, [r8, #16]
   3361c:	str	lr, [sp]
   33620:	str	ip, [sp, #4]
   33624:	ldr	ip, [r8, #8]
   33628:	str	ip, [sp, #8]
   3362c:	ldr	ip, [r6, #80]	; 0x50
   33630:	blx	ip
   33634:	cmp	r0, #0
   33638:	bne	335c4 <__assert_fail@plt+0x20dec>
   3363c:	b	332b8 <__assert_fail@plt+0x20ae0>
   33640:	ldr	r3, [r4, #12]
   33644:	cmp	r3, #0
   33648:	beq	33a28 <__assert_fail@plt+0x21250>
   3364c:	ldr	r1, [r3, #8]
   33650:	ldr	r2, [r5, #32]
   33654:	cmp	r1, r2
   33658:	bls	3398c <__assert_fail@plt+0x211b4>
   3365c:	ldr	r2, [r3, #4]
   33660:	ldr	r1, [r5, #24]
   33664:	cmp	r1, r2
   33668:	ldr	r2, [r3, #8]
   3366c:	beq	339d4 <__assert_fail@plt+0x211fc>
   33670:	ldr	r0, [r4]
   33674:	ldr	ip, [r6, #76]	; 0x4c
   33678:	str	r1, [r3, #4]
   3367c:	ldr	lr, [r4, #4]
   33680:	mov	r1, r8
   33684:	subs	r8, r0, #7
   33688:	mov	r0, r7
   3368c:	rsbs	r3, r8, #0
   33690:	adcs	r3, r3, r8
   33694:	str	lr, [sp]
   33698:	blx	ip
   3369c:	cmp	r0, #0
   336a0:	beq	332b8 <__assert_fail@plt+0x20ae0>
   336a4:	ldr	r3, [r4, #12]
   336a8:	cmp	r3, #0
   336ac:	beq	3373c <__assert_fail@plt+0x20f64>
   336b0:	ldr	r3, [r3]
   336b4:	cmp	r3, #0
   336b8:	beq	3373c <__assert_fail@plt+0x20f64>
   336bc:	ldr	r8, [r3]
   336c0:	cmp	r8, #0
   336c4:	beq	3373c <__assert_fail@plt+0x20f64>
   336c8:	mov	r9, #4
   336cc:	mov	sl, #0
   336d0:	ldr	r3, [r8, #4]
   336d4:	mov	r0, r5
   336d8:	str	sl, [sp]
   336dc:	mov	r1, r6
   336e0:	mov	r2, r7
   336e4:	bl	3313c <__assert_fail@plt+0x20964>
   336e8:	cmp	r0, #0
   336ec:	beq	332b8 <__assert_fail@plt+0x20ae0>
   336f0:	ldr	ip, [r8, #20]
   336f4:	mov	r0, r7
   336f8:	ldr	r1, [r8]
   336fc:	mov	r3, #0
   33700:	ldr	r2, [r8, #16]
   33704:	str	ip, [sp]
   33708:	str	sl, [sp, #4]
   3370c:	ldr	ip, [r8, #8]
   33710:	str	ip, [sp, #8]
   33714:	ldr	ip, [r6, #80]	; 0x50
   33718:	blx	ip
   3371c:	cmp	r0, #0
   33720:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33724:	ldr	r3, [r4, #12]
   33728:	ldr	r3, [r3]
   3372c:	ldr	r8, [r3, r9]
   33730:	add	r9, r9, #4
   33734:	cmp	r8, #0
   33738:	bne	336d0 <__assert_fail@plt+0x20ef8>
   3373c:	ldr	r3, [r6, #84]	; 0x54
   33740:	mov	r0, r7
   33744:	blx	r3
   33748:	b	3328c <__assert_fail@plt+0x20ab4>
   3374c:	ldr	r3, [r6, #28]
   33750:	mov	r0, r7
   33754:	ldr	r1, [r4, #4]
   33758:	blx	r3
   3375c:	b	3328c <__assert_fail@plt+0x20ab4>
   33760:	ldr	r3, [r6, #24]
   33764:	mov	r0, r7
   33768:	ldr	r1, [r4, #4]
   3376c:	blx	r3
   33770:	b	3328c <__assert_fail@plt+0x20ab4>
   33774:	ldr	r3, [r6, #20]
   33778:	mov	r0, r7
   3377c:	ldr	r1, [r4, #4]
   33780:	blx	r3
   33784:	b	3328c <__assert_fail@plt+0x20ab4>
   33788:	ldr	r3, [r6, #16]
   3378c:	mov	r0, r7
   33790:	ldr	r1, [r4, #4]
   33794:	ldr	r2, [r4, #12]
   33798:	blx	r3
   3379c:	b	3328c <__assert_fail@plt+0x20ab4>
   337a0:	ldr	r3, [r6, #12]
   337a4:	mov	r0, r7
   337a8:	blx	r3
   337ac:	b	3328c <__assert_fail@plt+0x20ab4>
   337b0:	ldr	r3, [r4, #12]
   337b4:	ldr	r3, [r3]
   337b8:	ldr	r4, [r3]
   337bc:	cmp	r4, #0
   337c0:	bne	33158 <__assert_fail@plt+0x20980>
   337c4:	ldr	r3, [r6, #8]
   337c8:	mov	r0, r7
   337cc:	blx	r3
   337d0:	b	3328c <__assert_fail@plt+0x20ab4>
   337d4:	ldr	r3, [r4, #12]
   337d8:	mov	r2, #0
   337dc:	mov	r0, r5
   337e0:	str	r2, [sp]
   337e4:	mov	r1, r6
   337e8:	mov	r2, r7
   337ec:	bl	3313c <__assert_fail@plt+0x20964>
   337f0:	cmp	r0, #0
   337f4:	beq	332b8 <__assert_fail@plt+0x20ae0>
   337f8:	ldr	r3, [r6, #44]	; 0x2c
   337fc:	mov	r0, r7
   33800:	blx	r3
   33804:	b	3328c <__assert_fail@plt+0x20ab4>
   33808:	ldr	r3, [r4, #12]
   3380c:	mov	r8, #0
   33810:	mov	r0, r5
   33814:	mov	r1, r6
   33818:	mov	r2, r7
   3381c:	ldr	r3, [r3]
   33820:	str	r8, [sp]
   33824:	bl	3313c <__assert_fail@plt+0x20964>
   33828:	cmp	r0, r8
   3382c:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33830:	ldr	r2, [r4, #12]
   33834:	ldr	r3, [r2, #4]
   33838:	cmp	r3, r8
   3383c:	beq	33cd4 <__assert_fail@plt+0x214fc>
   33840:	ldr	r3, [r3]
   33844:	cmp	r3, r8
   33848:	beq	33d14 <__assert_fail@plt+0x2153c>
   3384c:	mov	r9, r8
   33850:	str	r9, [sp]
   33854:	mov	r0, r5
   33858:	mov	r1, r6
   3385c:	mov	r2, r7
   33860:	bl	3313c <__assert_fail@plt+0x20964>
   33864:	cmp	r0, #0
   33868:	beq	332b8 <__assert_fail@plt+0x20ae0>
   3386c:	ldr	ip, [r4, #12]
   33870:	add	r8, r8, #1
   33874:	ldr	r3, [ip, #4]
   33878:	ldr	r3, [r3, r8, lsl #2]
   3387c:	cmp	r3, #0
   33880:	bne	33850 <__assert_fail@plt+0x21078>
   33884:	mov	r2, ip
   33888:	ldr	r3, [r6, #40]	; 0x28
   3388c:	mov	r0, r7
   33890:	mov	r1, r8
   33894:	ldr	r2, [r2, #8]
   33898:	blx	r3
   3389c:	b	3328c <__assert_fail@plt+0x20ab4>
   338a0:	ldr	r3, [r4, #12]
   338a4:	mov	r2, #0
   338a8:	mov	r0, r5
   338ac:	str	r2, [sp]
   338b0:	mov	r1, r6
   338b4:	mov	r2, r7
   338b8:	bl	3313c <__assert_fail@plt+0x20964>
   338bc:	cmp	r0, #0
   338c0:	beq	332b8 <__assert_fail@plt+0x20ae0>
   338c4:	ldr	r3, [r6, #36]	; 0x24
   338c8:	mov	r0, r7
   338cc:	blx	r3
   338d0:	b	3328c <__assert_fail@plt+0x20ab4>
   338d4:	ldr	r3, [r4, #12]
   338d8:	cmp	r3, #0
   338dc:	moveq	r2, r3
   338e0:	ldreq	ip, [r6, #32]
   338e4:	moveq	r0, r7
   338e8:	moveq	r1, r8
   338ec:	ldrne	ip, [r6, #32]
   338f0:	movne	r0, r7
   338f4:	movne	r1, r8
   338f8:	ldmne	r3, {r2, r3}
   338fc:	blx	ip
   33900:	b	3328c <__assert_fail@plt+0x20ab4>
   33904:	ldr	r3, [r4, #12]
   33908:	mov	ip, #0
   3390c:	mov	r0, r5
   33910:	mov	r1, r6
   33914:	mov	r2, r7
   33918:	ldr	r3, [r3]
   3391c:	str	ip, [sp]
   33920:	bl	3313c <__assert_fail@plt+0x20964>
   33924:	cmp	r0, #0
   33928:	beq	332b8 <__assert_fail@plt+0x20ae0>
   3392c:	ldr	r2, [r4, #12]
   33930:	mov	r0, r7
   33934:	ldr	r3, [r6, #56]	; 0x38
   33938:	ldr	r1, [r2, #4]
   3393c:	blx	r3
   33940:	b	3328c <__assert_fail@plt+0x20ab4>
   33944:	bl	12790 <abort@plt>
   33948:	ldr	r3, [r4, #12]
   3394c:	mov	ip, #0
   33950:	ldr	r4, [r3, #4]
   33954:	b	33158 <__assert_fail@plt+0x20980>
   33958:	ldr	r3, [r6, #72]	; 0x48
   3395c:	mov	r0, r7
   33960:	blx	r3
   33964:	b	3328c <__assert_fail@plt+0x20ab4>
   33968:	mov	r0, r5
   3396c:	mov	r1, r8
   33970:	mov	r2, r4
   33974:	bl	32fdc <__assert_fail@plt+0x20804>
   33978:	cmp	r0, #0
   3397c:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33980:	ldr	r1, [r4, #12]
   33984:	ldr	sl, [r1, #8]
   33988:	b	33500 <__assert_fail@plt+0x20d28>
   3398c:	mov	r0, r5
   33990:	mov	r1, r8
   33994:	mov	r2, r4
   33998:	bl	32fdc <__assert_fail@plt+0x20804>
   3399c:	cmp	r0, #0
   339a0:	beq	332b8 <__assert_fail@plt+0x20ae0>
   339a4:	ldr	r3, [r4, #12]
   339a8:	b	3365c <__assert_fail@plt+0x20e84>
   339ac:	ldr	r3, [r5, #32]
   339b0:	cmp	r3, sl
   339b4:	bcs	33d68 <__assert_fail@plt+0x21590>
   339b8:	ldr	ip, [r6, #124]	; 0x7c
   339bc:	mov	r0, r7
   339c0:	mov	r1, r8
   339c4:	mov	r2, sl
   339c8:	ldr	r3, [r4]
   339cc:	blx	ip
   339d0:	b	3328c <__assert_fail@plt+0x20ab4>
   339d4:	ldr	r3, [r5, #32]
   339d8:	cmp	r2, r3
   339dc:	bls	33d4c <__assert_fail@plt+0x21574>
   339e0:	ldr	ip, [r6, #124]	; 0x7c
   339e4:	mov	r0, r7
   339e8:	mov	r1, r8
   339ec:	ldr	r3, [r4]
   339f0:	blx	ip
   339f4:	b	3328c <__assert_fail@plt+0x20ab4>
   339f8:	mov	r3, #0
   339fc:	mov	r0, r5
   33a00:	str	r3, [sp]
   33a04:	mov	r1, r6
   33a08:	mov	r2, r7
   33a0c:	mov	r3, r9
   33a10:	bl	3313c <__assert_fail@plt+0x20964>
   33a14:	cmp	r0, #0
   33a18:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33a1c:	ldr	r0, [r4]
   33a20:	mov	ip, #1
   33a24:	b	33530 <__assert_fail@plt+0x20d58>
   33a28:	mov	r2, r3
   33a2c:	ldr	ip, [r6, #76]	; 0x4c
   33a30:	b	3367c <__assert_fail@plt+0x20ea4>
   33a34:	ldr	r2, [r3, #12]
   33a38:	cmp	r2, #0
   33a3c:	beq	33ab8 <__assert_fail@plt+0x212e0>
   33a40:	ldr	r8, [r2]
   33a44:	cmp	r8, #0
   33a48:	beq	33ab8 <__assert_fail@plt+0x212e0>
   33a4c:	mov	r9, #4
   33a50:	mov	sl, #0
   33a54:	ldr	r3, [r8]
   33a58:	mov	r0, r5
   33a5c:	str	sl, [sp]
   33a60:	mov	r1, r6
   33a64:	mov	r2, r7
   33a68:	bl	3313c <__assert_fail@plt+0x20964>
   33a6c:	cmp	r0, #0
   33a70:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33a74:	ldr	r1, [r8, #8]
   33a78:	mov	r0, r7
   33a7c:	ldr	r2, [r8, #4]
   33a80:	mov	r3, #0
   33a84:	str	r1, [sp]
   33a88:	ldr	r1, [r8, #12]
   33a8c:	str	r1, [sp, #4]
   33a90:	ldr	r1, [r6, #96]	; 0x60
   33a94:	blx	r1
   33a98:	cmp	r0, #0
   33a9c:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33aa0:	ldr	r3, [r4, #12]
   33aa4:	ldr	r2, [r3, #12]
   33aa8:	ldr	r8, [r2, r9]
   33aac:	add	r9, r9, #4
   33ab0:	cmp	r8, #0
   33ab4:	bne	33a54 <__assert_fail@plt+0x2127c>
   33ab8:	ldr	r3, [r3, #16]
   33abc:	cmp	r3, #0
   33ac0:	beq	33cc4 <__assert_fail@plt+0x214ec>
   33ac4:	ldr	fp, [r3]
   33ac8:	cmp	fp, #0
   33acc:	beq	33cc4 <__assert_fail@plt+0x214ec>
   33ad0:	mov	sl, #0
   33ad4:	mov	r0, #4
   33ad8:	str	r0, [sp, #28]
   33adc:	ldr	r3, [r6, #100]	; 0x64
   33ae0:	mov	r0, r7
   33ae4:	ldr	r1, [fp]
   33ae8:	blx	r3
   33aec:	cmp	r0, #0
   33af0:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33af4:	ldr	r3, [fp, #4]
   33af8:	ldr	r8, [r3]
   33afc:	cmp	r8, #0
   33b00:	strne	r4, [sp, #24]
   33b04:	movne	r9, #4
   33b08:	bne	33b68 <__assert_fail@plt+0x21390>
   33b0c:	b	33c90 <__assert_fail@plt+0x214b8>
   33b10:	ldr	lr, [r8, #8]
   33b14:	mov	r0, r7
   33b18:	ldr	r4, [r8, #16]
   33b1c:	ldr	ip, [r8, #12]
   33b20:	ldr	r1, [r8]
   33b24:	strd	r2, [sp, #8]
   33b28:	mov	r2, lr
   33b2c:	str	r4, [sp]
   33b30:	mov	r3, ip
   33b34:	ldr	lr, [r8, #32]
   33b38:	adds	ip, lr, #0
   33b3c:	movne	ip, #1
   33b40:	str	ip, [sp, #16]
   33b44:	ldr	ip, [r6, #104]	; 0x68
   33b48:	blx	ip
   33b4c:	cmp	r0, #0
   33b50:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33b54:	ldr	r3, [fp, #4]
   33b58:	ldr	r8, [r3, r9]
   33b5c:	add	r9, r9, #4
   33b60:	cmp	r8, #0
   33b64:	beq	33c8c <__assert_fail@plt+0x214b4>
   33b68:	ldr	r3, [r8, #32]
   33b6c:	cmp	r3, #0
   33b70:	beq	33b90 <__assert_fail@plt+0x213b8>
   33b74:	str	sl, [sp]
   33b78:	mov	r0, r5
   33b7c:	mov	r1, r6
   33b80:	mov	r2, r7
   33b84:	bl	3313c <__assert_fail@plt+0x20964>
   33b88:	cmp	r0, #0
   33b8c:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33b90:	ldr	r3, [r8, #4]
   33b94:	mov	r0, r5
   33b98:	str	sl, [sp]
   33b9c:	mov	r1, r6
   33ba0:	mov	r2, r7
   33ba4:	bl	3313c <__assert_fail@plt+0x20964>
   33ba8:	cmp	r0, #0
   33bac:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33bb0:	ldrd	r2, [r8, #24]
   33bb4:	mvn	r0, #0
   33bb8:	mvn	r1, #0
   33bbc:	cmp	r3, r1
   33bc0:	cmpeq	r2, r0
   33bc4:	bne	33b10 <__assert_fail@plt+0x21338>
   33bc8:	add	r2, r8, #8
   33bcc:	ldr	r1, [r8]
   33bd0:	mov	r0, r7
   33bd4:	ldm	r2, {r2, r3, ip}
   33bd8:	str	ip, [sp]
   33bdc:	ldr	ip, [r6, #108]	; 0x6c
   33be0:	blx	ip
   33be4:	cmp	r0, #0
   33be8:	bne	33b54 <__assert_fail@plt+0x2137c>
   33bec:	b	332b8 <__assert_fail@plt+0x20ae0>
   33bf0:	mov	r0, r5
   33bf4:	mov	r1, r4
   33bf8:	mov	r2, #0
   33bfc:	bl	32288 <__assert_fail@plt+0x1fab0>
   33c00:	subs	r8, r0, #0
   33c04:	beq	337c4 <__assert_fail@plt+0x20fec>
   33c08:	ldr	r3, [r8]
   33c0c:	sub	r2, r3, #7
   33c10:	cmp	r2, #3
   33c14:	bhi	33cdc <__assert_fail@plt+0x21504>
   33c18:	ldr	r2, [r8, #12]
   33c1c:	cmp	r2, #0
   33c20:	beq	33c34 <__assert_fail@plt+0x2145c>
   33c24:	ldr	r2, [r2, #8]
   33c28:	ldr	r1, [r5, #32]
   33c2c:	cmp	r2, r1
   33c30:	bls	33ce4 <__assert_fail@plt+0x2150c>
   33c34:	ldr	r1, [r4, #12]
   33c38:	mov	r0, r7
   33c3c:	ldr	ip, [r6, #124]	; 0x7c
   33c40:	ldr	r1, [r1]
   33c44:	ldr	r1, [r1, #4]
   33c48:	blx	ip
   33c4c:	b	3328c <__assert_fail@plt+0x20ab4>
   33c50:	cmp	r0, #22
   33c54:	bne	33bf0 <__assert_fail@plt+0x21418>
   33c58:	ldr	r3, [r6, #120]	; 0x78
   33c5c:	mov	r0, r7
   33c60:	ldr	r1, [r2, #4]
   33c64:	blx	r3
   33c68:	b	3328c <__assert_fail@plt+0x20ab4>
   33c6c:	mvn	r8, #0
   33c70:	b	33374 <__assert_fail@plt+0x20b9c>
   33c74:	mov	ip, r1
   33c78:	mov	r9, r1
   33c7c:	mov	sl, r1
   33c80:	b	33530 <__assert_fail@plt+0x20d58>
   33c84:	mov	r1, r3
   33c88:	b	333a8 <__assert_fail@plt+0x20bd0>
   33c8c:	ldr	r4, [sp, #24]
   33c90:	ldr	r3, [r6, #112]	; 0x70
   33c94:	mov	r0, r7
   33c98:	blx	r3
   33c9c:	cmp	r0, #0
   33ca0:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33ca4:	ldr	r3, [r4, #12]
   33ca8:	ldr	r0, [sp, #28]
   33cac:	ldr	r3, [r3, #16]
   33cb0:	ldr	fp, [r3, r0]
   33cb4:	add	r0, r0, #4
   33cb8:	str	r0, [sp, #28]
   33cbc:	cmp	fp, #0
   33cc0:	bne	33adc <__assert_fail@plt+0x21304>
   33cc4:	ldr	r3, [r6, #116]	; 0x74
   33cc8:	mov	r0, r7
   33ccc:	blx	r3
   33cd0:	b	3328c <__assert_fail@plt+0x20ab4>
   33cd4:	mvn	r8, #0
   33cd8:	b	33888 <__assert_fail@plt+0x210b0>
   33cdc:	mov	r2, #0
   33ce0:	b	33c34 <__assert_fail@plt+0x2145c>
   33ce4:	ldr	r3, [r4, #12]
   33ce8:	mov	r0, r5
   33cec:	mov	r2, r8
   33cf0:	ldr	r3, [r3]
   33cf4:	ldr	r1, [r3, #4]
   33cf8:	bl	32fdc <__assert_fail@plt+0x20804>
   33cfc:	cmp	r0, #0
   33d00:	beq	332b8 <__assert_fail@plt+0x20ae0>
   33d04:	ldr	r2, [r8, #12]
   33d08:	ldr	r3, [r8]
   33d0c:	ldr	r2, [r2, #8]
   33d10:	b	33c34 <__assert_fail@plt+0x2145c>
   33d14:	mov	r8, r3
   33d18:	b	33888 <__assert_fail@plt+0x210b0>
   33d1c:	mov	r8, r3
   33d20:	b	33374 <__assert_fail@plt+0x20b9c>
   33d24:	movw	r0, #38472	; 0x9648
   33d28:	movw	r1, #38464	; 0x9640
   33d2c:	movt	r0, #5
   33d30:	movt	r1, #5
   33d34:	movw	r2, #2474	; 0x9aa
   33d38:	ldr	r3, [pc, #68]	; 33d84 <__assert_fail@plt+0x215ac>
   33d3c:	bl	127d8 <__assert_fail@plt>
   33d40:	ldr	r3, [r4, #12]
   33d44:	ldr	ip, [r3]
   33d48:	b	33238 <__assert_fail@plt+0x20a60>
   33d4c:	movw	r0, #38548	; 0x9694
   33d50:	movw	r1, #38464	; 0x9640
   33d54:	movt	r0, #5
   33d58:	movt	r1, #5
   33d5c:	movw	r2, #2513	; 0x9d1
   33d60:	ldr	r3, [pc, #28]	; 33d84 <__assert_fail@plt+0x215ac>
   33d64:	bl	127d8 <__assert_fail@plt>
   33d68:	movw	r0, #38548	; 0x9694
   33d6c:	movw	r1, #38464	; 0x9640
   33d70:	movt	r0, #5
   33d74:	movt	r1, #5
   33d78:	movw	r2, #2685	; 0xa7d
   33d7c:	ldr	r3, [pc, #4]	; 33d88 <__assert_fail@plt+0x215b0>
   33d80:	bl	127d8 <__assert_fail@plt>
   33d84:	andeq	r9, r5, ip, lsr r5
   33d88:	andeq	r9, r5, r0, asr r5
   33d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d90:	mov	r4, r3
   33d94:	ldr	r3, [r3, #12]
   33d98:	sub	sp, sp, #12
   33d9c:	mov	r9, r0
   33da0:	mov	r6, r1
   33da4:	mov	r7, r2
   33da8:	cmp	r3, #6
   33dac:	ldrls	pc, [pc, r3, lsl #2]
   33db0:	b	33fe8 <__assert_fail@plt+0x21810>
   33db4:	strdeq	r3, [r3], -r8
   33db8:	andeq	r3, r3, r8, lsr #28
   33dbc:	andeq	r3, r3, r0, asr lr
   33dc0:	muleq	r3, r0, lr
   33dc4:			; <UNDEFINED> instruction: 0x00033fb0
   33dc8:	andeq	r3, r3, ip, asr #31
   33dcc:	ldrdeq	r3, [r3], -r0
   33dd0:	ldr	r3, [r4, #24]
   33dd4:	mov	ip, #0
   33dd8:	ldr	r3, [r3]
   33ddc:	str	ip, [sp]
   33de0:	bl	3313c <__assert_fail@plt+0x20964>
   33de4:	cmp	r0, #0
   33de8:	bne	33fec <__assert_fail@plt+0x21814>
   33dec:	mov	r0, #0
   33df0:	add	sp, sp, #12
   33df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33df8:	ldr	r3, [r4, #24]
   33dfc:	str	r4, [sp]
   33e00:	bl	3313c <__assert_fail@plt+0x20964>
   33e04:	cmp	r0, #0
   33e08:	beq	33dec <__assert_fail@plt+0x21614>
   33e0c:	ldr	r3, [r6, #128]	; 0x80
   33e10:	mov	r0, r7
   33e14:	ldr	r1, [r4, #4]
   33e18:	blx	r3
   33e1c:	adds	r0, r0, #0
   33e20:	movne	r0, #1
   33e24:	b	33df0 <__assert_fail@plt+0x21618>
   33e28:	ldr	r3, [r4, #24]
   33e2c:	str	r4, [sp]
   33e30:	bl	3313c <__assert_fail@plt+0x20964>
   33e34:	cmp	r0, #0
   33e38:	beq	33dec <__assert_fail@plt+0x21614>
   33e3c:	ldr	r3, [r6, #132]	; 0x84
   33e40:	mov	r0, r7
   33e44:	ldr	r1, [r4, #4]
   33e48:	blx	r3
   33e4c:	b	33df0 <__assert_fail@plt+0x21618>
   33e50:	ldr	r3, [r4, #24]
   33e54:	mov	ip, #0
   33e58:	ldr	r3, [r3, #4]
   33e5c:	str	ip, [sp]
   33e60:	bl	3313c <__assert_fail@plt+0x20964>
   33e64:	cmp	r0, #0
   33e68:	beq	33dec <__assert_fail@plt+0x21614>
   33e6c:	ldr	r3, [r4, #24]
   33e70:	mov	r0, r7
   33e74:	ldr	r1, [r4, #4]
   33e78:	ldrd	r4, [r3, #8]
   33e7c:	ldr	r2, [r3]
   33e80:	strd	r4, [sp]
   33e84:	ldr	r3, [r6, #148]	; 0x94
   33e88:	blx	r3
   33e8c:	b	33df0 <__assert_fail@plt+0x21618>
   33e90:	ldr	r8, [r4, #24]
   33e94:	add	r0, r0, #36	; 0x24
   33e98:	ldr	sl, [r4, #4]
   33e9c:	add	r1, r9, #40	; 0x28
   33ea0:	ldr	fp, [r4, #16]
   33ea4:	add	r2, r6, #172	; 0xac
   33ea8:	ldr	ip, [r8, #8]
   33eac:	mov	r3, r7
   33eb0:	ldrd	r4, [ip, #16]
   33eb4:	strd	r4, [sp]
   33eb8:	bl	323f8 <__assert_fail@plt+0x1fc20>
   33ebc:	cmp	r0, #0
   33ec0:	beq	33dec <__assert_fail@plt+0x21614>
   33ec4:	ldr	r3, [r8]
   33ec8:	mov	r4, #0
   33ecc:	mov	r0, r9
   33ed0:	str	r4, [sp]
   33ed4:	mov	r1, r6
   33ed8:	mov	r2, r7
   33edc:	bl	3313c <__assert_fail@plt+0x20964>
   33ee0:	cmp	r0, r4
   33ee4:	beq	33dec <__assert_fail@plt+0x21614>
   33ee8:	subs	r3, fp, #2
   33eec:	mov	r1, sl
   33ef0:	rsbs	r2, r3, #0
   33ef4:	mov	r0, r7
   33ef8:	adcs	r2, r2, r3
   33efc:	ldr	r3, [r6, #152]	; 0x98
   33f00:	blx	r3
   33f04:	cmp	r0, r4
   33f08:	beq	33dec <__assert_fail@plt+0x21614>
   33f0c:	ldr	sl, [r8, #4]
   33f10:	cmp	sl, r4
   33f14:	movne	fp, r4
   33f18:	beq	33f6c <__assert_fail@plt+0x21794>
   33f1c:	ldr	r3, [sl, #8]
   33f20:	mov	r0, r9
   33f24:	str	fp, [sp]
   33f28:	mov	r1, r6
   33f2c:	mov	r2, r7
   33f30:	bl	3313c <__assert_fail@plt+0x20964>
   33f34:	cmp	r0, #0
   33f38:	beq	33dec <__assert_fail@plt+0x21614>
   33f3c:	ldrd	r4, [sl, #16]
   33f40:	mov	r0, r7
   33f44:	ldr	r1, [sl, #4]
   33f48:	ldr	r2, [sl, #12]
   33f4c:	strd	r4, [sp]
   33f50:	ldr	r3, [r6, #156]	; 0x9c
   33f54:	blx	r3
   33f58:	cmp	r0, #0
   33f5c:	beq	33dec <__assert_fail@plt+0x21614>
   33f60:	ldr	sl, [sl]
   33f64:	cmp	sl, #0
   33f68:	bne	33f1c <__assert_fail@plt+0x21744>
   33f6c:	ldr	r4, [r8, #8]
   33f70:	cmp	r4, #0
   33f74:	beq	33fa0 <__assert_fail@plt+0x217c8>
   33f78:	mov	r0, r9
   33f7c:	mov	r1, r6
   33f80:	mov	r2, r7
   33f84:	mov	r3, r4
   33f88:	bl	34008 <__assert_fail@plt+0x21830>
   33f8c:	cmp	r0, #0
   33f90:	beq	33dec <__assert_fail@plt+0x21614>
   33f94:	ldr	r4, [r4]
   33f98:	cmp	r4, #0
   33f9c:	bne	33f78 <__assert_fail@plt+0x217a0>
   33fa0:	ldr	r3, [r6, #168]	; 0xa8
   33fa4:	mov	r0, r7
   33fa8:	blx	r3
   33fac:	b	33df0 <__assert_fail@plt+0x21618>
   33fb0:	ldr	ip, [r1, #136]	; 0x88
   33fb4:	mov	r0, r2
   33fb8:	ldr	r1, [r4, #4]
   33fbc:	ldrd	r2, [r4, #24]
   33fc0:	blx	ip
   33fc4:	add	sp, sp, #12
   33fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33fcc:	ldr	r3, [r1, #140]	; 0x8c
   33fd0:	mov	r0, r2
   33fd4:	ldr	r1, [r4, #4]
   33fd8:	vldr	d0, [r4, #24]
   33fdc:	blx	r3
   33fe0:	add	sp, sp, #12
   33fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33fe8:	bl	12790 <abort@plt>
   33fec:	ldr	r3, [r4, #24]
   33ff0:	mov	r0, r7
   33ff4:	ldr	ip, [r6, #144]	; 0x90
   33ff8:	ldr	r1, [r4, #4]
   33ffc:	ldrd	r2, [r3, #8]
   34000:	blx	ip
   34004:	b	33df0 <__assert_fail@plt+0x21618>
   34008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3400c:	mov	r5, r2
   34010:	mov	r7, r3
   34014:	ldrd	r2, [r3, #16]
   34018:	sub	sp, sp, #12
   3401c:	add	r9, r0, #40	; 0x28
   34020:	add	sl, r1, #172	; 0xac
   34024:	add	r8, r0, #36	; 0x24
   34028:	strd	r2, [sp]
   3402c:	mov	r4, r0
   34030:	mov	r6, r1
   34034:	mov	r0, r8
   34038:	mov	r1, r9
   3403c:	mov	r2, sl
   34040:	mov	r3, r5
   34044:	bl	323f8 <__assert_fail@plt+0x1fc20>
   34048:	cmp	r0, #0
   3404c:	beq	340b8 <__assert_fail@plt+0x218e0>
   34050:	ldr	r3, [r7, #32]
   34054:	cmp	r3, #0
   34058:	beq	340c4 <__assert_fail@plt+0x218ec>
   3405c:	ldr	r1, [r6, #160]	; 0xa0
   34060:	mov	r0, r5
   34064:	ldrd	r2, [r7, #16]
   34068:	blx	r1
   3406c:	cmp	r0, #0
   34070:	beq	340b8 <__assert_fail@plt+0x218e0>
   34074:	ldr	r3, [r7, #32]
   34078:	cmp	r3, #0
   3407c:	beq	340d0 <__assert_fail@plt+0x218f8>
   34080:	ldr	fp, [r3]
   34084:	cmp	fp, #0
   34088:	bne	3409c <__assert_fail@plt+0x218c4>
   3408c:	b	340d0 <__assert_fail@plt+0x218f8>
   34090:	ldr	fp, [fp]
   34094:	cmp	fp, #0
   34098:	beq	340d0 <__assert_fail@plt+0x218f8>
   3409c:	mov	r0, r4
   340a0:	mov	r1, r6
   340a4:	mov	r2, r5
   340a8:	mov	r3, fp
   340ac:	bl	33d8c <__assert_fail@plt+0x215b4>
   340b0:	cmp	r0, #0
   340b4:	bne	34090 <__assert_fail@plt+0x218b8>
   340b8:	mov	r0, #0
   340bc:	add	sp, sp, #12
   340c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   340c4:	ldr	r3, [r7, #4]
   340c8:	cmp	r3, #0
   340cc:	beq	3405c <__assert_fail@plt+0x21884>
   340d0:	ldr	fp, [r7, #8]
   340d4:	cmp	fp, #0
   340d8:	bne	340ec <__assert_fail@plt+0x21914>
   340dc:	b	3410c <__assert_fail@plt+0x21934>
   340e0:	ldr	fp, [fp]
   340e4:	cmp	fp, #0
   340e8:	beq	3410c <__assert_fail@plt+0x21934>
   340ec:	mov	r0, r4
   340f0:	mov	r1, r6
   340f4:	mov	r2, r5
   340f8:	mov	r3, fp
   340fc:	bl	34008 <__assert_fail@plt+0x21830>
   34100:	cmp	r0, #0
   34104:	bne	340e0 <__assert_fail@plt+0x21908>
   34108:	b	340b8 <__assert_fail@plt+0x218e0>
   3410c:	mov	r0, r8
   34110:	mov	r1, r9
   34114:	ldrd	r8, [r7, #24]
   34118:	mov	r2, sl
   3411c:	mov	r3, r5
   34120:	strd	r8, [sp]
   34124:	bl	323f8 <__assert_fail@plt+0x1fc20>
   34128:	cmp	r0, #0
   3412c:	beq	340b8 <__assert_fail@plt+0x218e0>
   34130:	ldr	r3, [r7, #32]
   34134:	cmp	r3, #0
   34138:	beq	34158 <__assert_fail@plt+0x21980>
   3413c:	ldr	r1, [r6, #164]	; 0xa4
   34140:	mov	r0, r5
   34144:	ldrd	r2, [r7, #24]
   34148:	blx	r1
   3414c:	adds	r0, r0, #0
   34150:	movne	r0, #1
   34154:	b	340bc <__assert_fail@plt+0x218e4>
   34158:	ldr	r3, [r7, #4]
   3415c:	cmp	r3, #0
   34160:	movne	r0, #1
   34164:	bne	340bc <__assert_fail@plt+0x218e4>
   34168:	b	3413c <__assert_fail@plt+0x21964>
   3416c:	ldr	r3, [r0, #4]
   34170:	push	{r4, lr}
   34174:	cmp	r3, #0
   34178:	beq	341a4 <__assert_fail@plt+0x219cc>
   3417c:	ldr	r3, [r0, #8]
   34180:	cmp	r3, #0
   34184:	beq	341a4 <__assert_fail@plt+0x219cc>
   34188:	ldr	r0, [r0, #16]
   3418c:	pop	{r4, lr}
   34190:	cmp	r0, #0
   34194:	addeq	r0, r3, #8
   34198:	addne	r0, r0, #32
   3419c:	mov	r3, #3
   341a0:	b	324e0 <__assert_fail@plt+0x1fd08>
   341a4:	mov	r2, #5
   341a8:	movw	r1, #38584	; 0x96b8
   341ac:	mov	r0, #0
   341b0:	movt	r1, #5
   341b4:	bl	12298 <dcgettext@plt>
   341b8:	movw	r1, #168	; 0xa8
   341bc:	movt	r1, #7
   341c0:	movw	r2, #17728	; 0x4540
   341c4:	movt	r2, #5
   341c8:	mov	r3, r0
   341cc:	ldr	r0, [r1]
   341d0:	mov	r1, #1
   341d4:	bl	125d4 <__fprintf_chk@plt>
   341d8:	mov	r0, #0
   341dc:	pop	{r4, pc}
   341e0:	push	{r4, lr}
   341e4:	mov	r0, #52	; 0x34
   341e8:	bl	12358 <xmalloc@plt>
   341ec:	mov	r1, #0
   341f0:	mov	r2, #52	; 0x34
   341f4:	mov	r4, r0
   341f8:	bl	12580 <memset@plt>
   341fc:	mov	r0, r4
   34200:	pop	{r4, pc}
   34204:	push	{r3, r4, r5, r6, r7, lr}
   34208:	cmp	r1, #0
   3420c:	movw	r3, #11856	; 0x2e50
   34210:	movt	r3, #5
   34214:	mov	r5, r0
   34218:	mov	r0, #12
   3421c:	moveq	r7, r3
   34220:	movne	r7, r1
   34224:	bl	12358 <xmalloc@plt>
   34228:	mov	r4, #0
   3422c:	mov	r6, r0
   34230:	mov	r0, #12
   34234:	mov	r3, r6
   34238:	strb	r4, [r3], #1
   3423c:	add	r3, r3, #1
   34240:	strb	r4, [r6, #1]
   34244:	strb	r4, [r3], #1
   34248:	strb	r4, [r3], #1
   3424c:	strb	r4, [r3], #1
   34250:	strb	r4, [r3], #1
   34254:	strb	r4, [r3], #1
   34258:	strb	r4, [r3], #1
   3425c:	strb	r4, [r3], #1
   34260:	strb	r4, [r3], #1
   34264:	strb	r4, [r3], #1
   34268:	strb	r4, [r3]
   3426c:	str	r7, [r6, #4]
   34270:	bl	12358 <xmalloc@plt>
   34274:	mov	r3, r0
   34278:	strb	r4, [r3], #1
   3427c:	add	r3, r3, #1
   34280:	strb	r4, [r0, #1]
   34284:	strb	r4, [r3], #1
   34288:	strb	r4, [r3], #1
   3428c:	strb	r4, [r3], #1
   34290:	strb	r4, [r3], #1
   34294:	strb	r4, [r3], #1
   34298:	strb	r4, [r3], #1
   3429c:	strb	r4, [r3], #1
   342a0:	strb	r4, [r3], #1
   342a4:	strb	r4, [r3], #1
   342a8:	strb	r4, [r3]
   342ac:	ldr	r3, [r5, #4]
   342b0:	str	r6, [r0, #4]
   342b4:	cmp	r3, r4
   342b8:	str	r6, [r5, #8]
   342bc:	strne	r0, [r3]
   342c0:	beq	342e0 <__assert_fail@plt+0x21b08>
   342c4:	mov	r3, #0
   342c8:	str	r0, [r5, #4]
   342cc:	str	r3, [r5, #12]
   342d0:	mov	r0, #1
   342d4:	str	r3, [r5, #16]
   342d8:	str	r3, [r5, #20]
   342dc:	pop	{r3, r4, r5, r6, r7, pc}
   342e0:	ldr	r3, [r5]
   342e4:	cmp	r3, #0
   342e8:	streq	r0, [r5]
   342ec:	beq	342c4 <__assert_fail@plt+0x21aec>
   342f0:	movw	r0, #38632	; 0x96e8
   342f4:	movw	r1, #38464	; 0x9640
   342f8:	movt	r0, #5
   342fc:	movt	r1, #5
   34300:	movw	r2, #699	; 0x2bb
   34304:	ldr	r3, [pc]	; 3430c <__assert_fail@plt+0x21b34>
   34308:	bl	127d8 <__assert_fail@plt>
   3430c:	andeq	r9, r5, r8, ror #10
   34310:	push	{r4, r5, r6, lr}
   34314:	cmp	r1, #0
   34318:	ldr	r4, [r0, #4]
   3431c:	movw	r5, #11856	; 0x2e50
   34320:	movt	r5, #5
   34324:	movne	r5, r1
   34328:	cmp	r4, #0
   3432c:	mov	r6, r0
   34330:	beq	343f8 <__assert_fail@plt+0x21c20>
   34334:	ldr	r4, [r4, #4]
   34338:	cmp	r4, #0
   3433c:	bne	34350 <__assert_fail@plt+0x21b78>
   34340:	b	34370 <__assert_fail@plt+0x21b98>
   34344:	ldr	r4, [r4]
   34348:	cmp	r4, #0
   3434c:	beq	34370 <__assert_fail@plt+0x21b98>
   34350:	ldr	r0, [r4, #4]
   34354:	mov	r1, r5
   34358:	bl	12208 <filename_cmp@plt>
   3435c:	cmp	r0, #0
   34360:	bne	34344 <__assert_fail@plt+0x21b6c>
   34364:	str	r4, [r6, #8]
   34368:	mov	r0, #1
   3436c:	pop	{r4, r5, r6, pc}
   34370:	mov	r0, #12
   34374:	bl	12358 <xmalloc@plt>
   34378:	mov	r2, #0
   3437c:	mov	r3, r0
   34380:	mov	r1, r0
   34384:	strb	r2, [r3], #1
   34388:	add	r3, r3, #1
   3438c:	strb	r2, [r0, #1]
   34390:	strb	r2, [r3], #1
   34394:	strb	r2, [r3], #1
   34398:	strb	r2, [r3], #1
   3439c:	strb	r2, [r3], #1
   343a0:	strb	r2, [r3], #1
   343a4:	strb	r2, [r3], #1
   343a8:	strb	r2, [r3], #1
   343ac:	strb	r2, [r3], #1
   343b0:	strb	r2, [r3], #1
   343b4:	strb	r2, [r3]
   343b8:	ldr	r3, [r6, #8]
   343bc:	str	r5, [r0, #4]
   343c0:	ldr	r2, [r3]
   343c4:	cmp	r2, #0
   343c8:	bne	343d4 <__assert_fail@plt+0x21bfc>
   343cc:	b	343f0 <__assert_fail@plt+0x21c18>
   343d0:	mov	r2, r3
   343d4:	ldr	r3, [r2]
   343d8:	cmp	r3, #0
   343dc:	bne	343d0 <__assert_fail@plt+0x21bf8>
   343e0:	str	r1, [r2]
   343e4:	mov	r0, #1
   343e8:	str	r1, [r6, #8]
   343ec:	pop	{r4, r5, r6, pc}
   343f0:	mov	r2, r3
   343f4:	b	343e0 <__assert_fail@plt+0x21c08>
   343f8:	mov	r0, r4
   343fc:	mov	r2, #5
   34400:	movw	r1, #38660	; 0x9704
   34404:	movt	r1, #5
   34408:	bl	12298 <dcgettext@plt>
   3440c:	movw	r1, #168	; 0xa8
   34410:	movt	r1, #7
   34414:	movw	r2, #17728	; 0x4540
   34418:	movt	r2, #5
   3441c:	mov	r3, r0
   34420:	ldr	r0, [r1]
   34424:	mov	r1, #1
   34428:	bl	125d4 <__fprintf_chk@plt>
   3442c:	mov	r0, r4
   34430:	pop	{r4, r5, r6, pc}
   34434:	cmp	r1, #0
   34438:	movw	ip, #11856	; 0x2e50
   3443c:	movt	ip, #5
   34440:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   34444:	movne	r5, r1
   34448:	moveq	r5, ip
   3444c:	subs	r8, r2, #0
   34450:	mov	r7, r0
   34454:	mov	r9, r3
   34458:	beq	34510 <__assert_fail@plt+0x21d38>
   3445c:	ldr	r4, [r0, #4]
   34460:	cmp	r4, #0
   34464:	beq	34518 <__assert_fail@plt+0x21d40>
   34468:	mov	r0, #12
   3446c:	mov	r4, #0
   34470:	bl	12358 <xmalloc@plt>
   34474:	add	ip, r0, #3
   34478:	mov	r6, r0
   3447c:	mov	r0, #40	; 0x28
   34480:	strb	r4, [ip], #1
   34484:	strb	r4, [ip], #1
   34488:	strb	r4, [ip], #1
   3448c:	strb	r4, [ip], #1
   34490:	strb	r4, [ip], #1
   34494:	strb	r4, [ip], #1
   34498:	strb	r4, [ip], #1
   3449c:	strb	r4, [ip], #1
   344a0:	strb	r4, [ip]
   344a4:	str	r8, [r6]
   344a8:	bl	12358 <xmalloc@plt>
   344ac:	mov	r1, r4
   344b0:	mov	r2, #40	; 0x28
   344b4:	mov	r8, r0
   344b8:	bl	12580 <memset@plt>
   344bc:	ldrd	r2, [sp, #32]
   344c0:	cmp	r9, r4
   344c4:	ldr	r0, [r7, #8]
   344c8:	mov	r1, r5
   344cc:	str	r8, [r6, #8]
   344d0:	mvn	r4, #0
   344d4:	strd	r2, [r8, #16]
   344d8:	mvn	r5, #0
   344dc:	moveq	r3, #1
   344e0:	strd	r4, [r8, #24]
   344e4:	movne	r3, #2
   344e8:	add	r0, r0, #8
   344ec:	mov	r2, #3
   344f0:	str	r6, [r7, #12]
   344f4:	str	r8, [r7, #16]
   344f8:	bl	324e0 <__assert_fail@plt+0x1fd08>
   344fc:	subs	r3, r0, #0
   34500:	beq	34510 <__assert_fail@plt+0x21d38>
   34504:	mov	r0, #1
   34508:	str	r6, [r3, #24]
   3450c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   34510:	mov	r0, #0
   34514:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   34518:	mov	r0, r4
   3451c:	mov	r2, #5
   34520:	movw	r1, #38708	; 0x9734
   34524:	movt	r1, #5
   34528:	bl	12298 <dcgettext@plt>
   3452c:	movw	r1, #168	; 0xa8
   34530:	movt	r1, #7
   34534:	movw	r2, #17728	; 0x4540
   34538:	movt	r2, #5
   3453c:	mov	r3, r0
   34540:	ldr	r0, [r1]
   34544:	mov	r1, #1
   34548:	bl	125d4 <__fprintf_chk@plt>
   3454c:	mov	r0, r4
   34550:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   34554:	cmp	r2, #0
   34558:	cmpne	r1, #0
   3455c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   34560:	mov	r5, r1
   34564:	mov	r4, r2
   34568:	movne	r9, #0
   3456c:	moveq	r9, #1
   34570:	mov	r7, r0
   34574:	mov	r8, r3
   34578:	beq	345f4 <__assert_fail@plt+0x21e1c>
   3457c:	ldr	r3, [r0, #4]
   34580:	cmp	r3, #0
   34584:	beq	345fc <__assert_fail@plt+0x21e24>
   34588:	ldr	r3, [r0, #12]
   3458c:	cmp	r3, #0
   34590:	beq	345fc <__assert_fail@plt+0x21e24>
   34594:	mov	r0, #24
   34598:	bl	12358 <xmalloc@plt>
   3459c:	mov	r1, r9
   345a0:	mov	r2, #24
   345a4:	mov	r6, r0
   345a8:	bl	12580 <memset@plt>
   345ac:	ldr	r3, [r7, #12]
   345b0:	str	r5, [r6, #4]
   345b4:	str	r4, [r6, #8]
   345b8:	ldr	r2, [r3, #4]
   345bc:	ldrd	r0, [sp, #32]
   345c0:	cmp	r2, #0
   345c4:	str	r8, [r6, #12]
   345c8:	addeq	r2, r3, #4
   345cc:	strd	r0, [r6, #16]
   345d0:	bne	345dc <__assert_fail@plt+0x21e04>
   345d4:	b	345e8 <__assert_fail@plt+0x21e10>
   345d8:	mov	r2, r3
   345dc:	ldr	r3, [r2]
   345e0:	cmp	r3, #0
   345e4:	bne	345d8 <__assert_fail@plt+0x21e00>
   345e8:	str	r6, [r2]
   345ec:	mov	r0, #1
   345f0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   345f4:	mov	r0, #0
   345f8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   345fc:	mov	r2, #5
   34600:	movw	r1, #38760	; 0x9768
   34604:	mov	r0, #0
   34608:	movt	r1, #5
   3460c:	bl	12298 <dcgettext@plt>
   34610:	movw	r1, #168	; 0xa8
   34614:	movt	r1, #7
   34618:	movw	r2, #17728	; 0x4540
   3461c:	movt	r2, #5
   34620:	mov	r3, r0
   34624:	ldr	r0, [r1]
   34628:	mov	r1, #1
   3462c:	bl	125d4 <__fprintf_chk@plt>
   34630:	mov	r0, #0
   34634:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   34638:	mov	r1, r0
   3463c:	ldr	r0, [r0, #4]
   34640:	push	{r4, lr}
   34644:	cmp	r0, #0
   34648:	beq	346c0 <__assert_fail@plt+0x21ee8>
   3464c:	ldr	ip, [r1, #16]
   34650:	cmp	ip, #0
   34654:	beq	346c0 <__assert_fail@plt+0x21ee8>
   34658:	ldr	r0, [r1, #12]
   3465c:	cmp	r0, #0
   34660:	beq	346c0 <__assert_fail@plt+0x21ee8>
   34664:	ldr	r4, [ip, #4]
   34668:	cmp	r4, #0
   3466c:	beq	346ac <__assert_fail@plt+0x21ed4>
   34670:	movw	r1, #38844	; 0x97bc
   34674:	movt	r1, #5
   34678:	mov	r0, #0
   3467c:	mov	r2, #5
   34680:	bl	12298 <dcgettext@plt>
   34684:	movw	r1, #168	; 0xa8
   34688:	movt	r1, #7
   3468c:	movw	r2, #17728	; 0x4540
   34690:	movt	r2, #5
   34694:	mov	r3, r0
   34698:	ldr	r0, [r1]
   3469c:	mov	r1, #1
   346a0:	bl	125d4 <__fprintf_chk@plt>
   346a4:	mov	r0, #0
   346a8:	pop	{r4, pc}
   346ac:	strd	r2, [ip, #24]
   346b0:	mov	r0, #1
   346b4:	str	r4, [r1, #12]
   346b8:	str	r4, [r1, #16]
   346bc:	pop	{r4, pc}
   346c0:	movw	r1, #38804	; 0x9794
   346c4:	mov	r0, #0
   346c8:	movt	r1, #5
   346cc:	b	3467c <__assert_fail@plt+0x21ea4>
   346d0:	push	{r3, r4, r5, r6, r7, lr}
   346d4:	mov	r5, r3
   346d8:	ldr	r3, [r0, #4]
   346dc:	mov	r7, r0
   346e0:	mov	r4, r2
   346e4:	cmp	r3, #0
   346e8:	beq	3475c <__assert_fail@plt+0x21f84>
   346ec:	ldr	r3, [r0, #16]
   346f0:	cmp	r3, #0
   346f4:	beq	3475c <__assert_fail@plt+0x21f84>
   346f8:	mov	r0, #40	; 0x28
   346fc:	bl	12358 <xmalloc@plt>
   34700:	mov	r1, #0
   34704:	mov	r2, #40	; 0x28
   34708:	mov	r6, r0
   3470c:	bl	12580 <memset@plt>
   34710:	ldr	r1, [r7, #16]
   34714:	mvn	r2, #0
   34718:	mvn	r3, #0
   3471c:	strd	r2, [r6, #24]
   34720:	strd	r4, [r6, #16]
   34724:	str	r1, [r6, #4]
   34728:	ldr	r2, [r1, #8]
   3472c:	cmp	r2, #0
   34730:	addeq	r2, r1, #8
   34734:	bne	34740 <__assert_fail@plt+0x21f68>
   34738:	b	3474c <__assert_fail@plt+0x21f74>
   3473c:	mov	r2, r3
   34740:	ldr	r3, [r2]
   34744:	cmp	r3, #0
   34748:	bne	3473c <__assert_fail@plt+0x21f64>
   3474c:	str	r6, [r2]
   34750:	mov	r0, #1
   34754:	str	r6, [r7, #16]
   34758:	pop	{r3, r4, r5, r6, r7, pc}
   3475c:	mov	r2, #5
   34760:	movw	r1, #38892	; 0x97ec
   34764:	mov	r0, #0
   34768:	movt	r1, #5
   3476c:	bl	12298 <dcgettext@plt>
   34770:	movw	r1, #168	; 0xa8
   34774:	movt	r1, #7
   34778:	movw	r2, #17728	; 0x4540
   3477c:	movt	r2, #5
   34780:	mov	r3, r0
   34784:	ldr	r0, [r1]
   34788:	mov	r1, #1
   3478c:	bl	125d4 <__fprintf_chk@plt>
   34790:	mov	r0, #0
   34794:	pop	{r3, r4, r5, r6, r7, pc}
   34798:	mov	r1, r0
   3479c:	ldr	r0, [r0, #4]
   347a0:	push	{r4, lr}
   347a4:	cmp	r0, #0
   347a8:	beq	347e0 <__assert_fail@plt+0x22008>
   347ac:	ldr	ip, [r1, #16]
   347b0:	cmp	ip, #0
   347b4:	beq	347e0 <__assert_fail@plt+0x22008>
   347b8:	ldr	r4, [ip, #4]
   347bc:	cmp	r4, #0
   347c0:	movweq	r1, #38964	; 0x9834
   347c4:	moveq	r0, r4
   347c8:	movteq	r1, #5
   347cc:	beq	347ec <__assert_fail@plt+0x22014>
   347d0:	strd	r2, [ip, #24]
   347d4:	mov	r0, #1
   347d8:	str	r4, [r1, #16]
   347dc:	pop	{r4, pc}
   347e0:	movw	r1, #38928	; 0x9810
   347e4:	movt	r1, #5
   347e8:	mov	r0, #0
   347ec:	mov	r2, #5
   347f0:	bl	12298 <dcgettext@plt>
   347f4:	movw	r1, #168	; 0xa8
   347f8:	movt	r1, #7
   347fc:	movw	r2, #17728	; 0x4540
   34800:	movt	r2, #5
   34804:	mov	r3, r0
   34808:	ldr	r0, [r1]
   3480c:	mov	r1, #1
   34810:	bl	125d4 <__fprintf_chk@plt>
   34814:	mov	r0, #0
   34818:	pop	{r4, pc}
   3481c:	push	{r4, r5, r6, r7, r8, lr}
   34820:	mov	r6, r0
   34824:	ldr	r7, [r0, #4]
   34828:	mov	r8, r1
   3482c:	mov	r4, r2
   34830:	mov	r5, r3
   34834:	cmp	r7, #0
   34838:	beq	348fc <__assert_fail@plt+0x22124>
   3483c:	ldr	r3, [r0, #20]
   34840:	cmp	r3, #0
   34844:	beq	34858 <__assert_fail@plt+0x22080>
   34848:	ldr	r1, [r3, #4]
   3484c:	ldr	r2, [r0, #8]
   34850:	cmp	r1, r2
   34854:	beq	348bc <__assert_fail@plt+0x220e4>
   34858:	mov	r0, #128	; 0x80
   3485c:	bl	12358 <xmalloc@plt>
   34860:	mov	r1, #0
   34864:	mov	r2, #128	; 0x80
   34868:	mov	r7, r0
   3486c:	bl	12580 <memset@plt>
   34870:	ldr	r1, [r6, #8]
   34874:	mov	r2, r7
   34878:	mov	r3, #1
   3487c:	mvn	ip, #0
   34880:	strd	r4, [r7, #48]	; 0x30
   34884:	stmib	r7, {r1, r8}
   34888:	add	r3, r3, #1
   3488c:	str	ip, [r2, #12]
   34890:	cmp	r3, #10
   34894:	add	r2, r2, #4
   34898:	bne	34888 <__assert_fail@plt+0x220b0>
   3489c:	ldr	r3, [r6, #20]
   348a0:	mov	r0, #1
   348a4:	cmp	r3, #0
   348a8:	strne	r7, [r3]
   348ac:	ldreq	r3, [r6, #4]
   348b0:	streq	r7, [r3, #8]
   348b4:	str	r7, [r6, #20]
   348b8:	pop	{r4, r5, r6, r7, r8, pc}
   348bc:	mov	r2, r3
   348c0:	mov	r1, #0
   348c4:	b	348d4 <__assert_fail@plt+0x220fc>
   348c8:	add	r1, r1, #1
   348cc:	cmp	r1, #10
   348d0:	beq	34858 <__assert_fail@plt+0x22080>
   348d4:	ldr	r0, [r2, #8]
   348d8:	add	r2, r2, #4
   348dc:	cmn	r0, #1
   348e0:	bne	348c8 <__assert_fail@plt+0x220f0>
   348e4:	add	r2, r1, #2
   348e8:	add	r1, r3, r1, lsl #3
   348ec:	mov	r0, #1
   348f0:	str	r8, [r3, r2, lsl #2]
   348f4:	strd	r4, [r1, #48]	; 0x30
   348f8:	pop	{r4, r5, r6, r7, r8, pc}
   348fc:	mov	r0, r7
   34900:	mov	r2, #5
   34904:	movw	r1, #39016	; 0x9868
   34908:	movt	r1, #5
   3490c:	bl	12298 <dcgettext@plt>
   34910:	movw	r1, #168	; 0xa8
   34914:	movt	r1, #7
   34918:	movw	r2, #17728	; 0x4540
   3491c:	movt	r2, #5
   34920:	mov	r3, r0
   34924:	ldr	r0, [r1]
   34928:	mov	r1, #1
   3492c:	bl	125d4 <__fprintf_chk@plt>
   34930:	mov	r0, r7
   34934:	pop	{r4, r5, r6, r7, r8, pc}
   34938:	push	{r3, lr}
   3493c:	mov	r2, #5
   34940:	movw	r1, #39052	; 0x988c
   34944:	mov	r0, #0
   34948:	movt	r1, #5
   3494c:	bl	12298 <dcgettext@plt>
   34950:	movw	r1, #168	; 0xa8
   34954:	movt	r1, #7
   34958:	movw	r2, #17728	; 0x4540
   3495c:	movt	r2, #5
   34960:	mov	r3, r0
   34964:	ldr	r0, [r1]
   34968:	mov	r1, #1
   3496c:	bl	125d4 <__fprintf_chk@plt>
   34970:	mov	r0, #0
   34974:	pop	{r3, pc}
   34978:	push	{r3, lr}
   3497c:	mov	r2, #5
   34980:	movw	r1, #39096	; 0x98b8
   34984:	mov	r0, #0
   34988:	movt	r1, #5
   3498c:	bl	12298 <dcgettext@plt>
   34990:	movw	r1, #168	; 0xa8
   34994:	movt	r1, #7
   34998:	movw	r2, #17728	; 0x4540
   3499c:	movt	r2, #5
   349a0:	mov	r3, r0
   349a4:	ldr	r0, [r1]
   349a8:	mov	r1, #1
   349ac:	bl	125d4 <__fprintf_chk@plt>
   349b0:	mov	r0, #0
   349b4:	pop	{r3, pc}
   349b8:	cmp	r1, #0
   349bc:	push	{r3, r4, r5, lr}
   349c0:	mov	r4, r2
   349c4:	mov	r5, r3
   349c8:	beq	349e8 <__assert_fail@plt+0x22210>
   349cc:	mov	r2, #4
   349d0:	bl	3416c <__assert_fail@plt+0x21994>
   349d4:	subs	r3, r0, #0
   349d8:	beq	349e8 <__assert_fail@plt+0x22210>
   349dc:	mov	r0, #1
   349e0:	strd	r4, [r3, #24]
   349e4:	pop	{r3, r4, r5, pc}
   349e8:	mov	r0, #0
   349ec:	pop	{r3, r4, r5, pc}
   349f0:	cmp	r1, #0
   349f4:	push	{r3, lr}
   349f8:	vpush	{d8}
   349fc:	vmov.f64	d8, d0
   34a00:	beq	34a24 <__assert_fail@plt+0x2224c>
   34a04:	mov	r2, #5
   34a08:	bl	3416c <__assert_fail@plt+0x21994>
   34a0c:	subs	r3, r0, #0
   34a10:	beq	34a24 <__assert_fail@plt+0x2224c>
   34a14:	vstr	d8, [r3, #24]
   34a18:	vpop	{d8}
   34a1c:	mov	r0, #1
   34a20:	pop	{r3, pc}
   34a24:	vpop	{d8}
   34a28:	mov	r0, #0
   34a2c:	pop	{r3, pc}
   34a30:	cmp	r2, #0
   34a34:	cmpne	r1, #0
   34a38:	push	{r3, r4, r5, r6, r7, lr}
   34a3c:	mov	r4, r2
   34a40:	movne	r5, #0
   34a44:	moveq	r5, #1
   34a48:	bne	34a54 <__assert_fail@plt+0x2227c>
   34a4c:	mov	r0, #0
   34a50:	pop	{r3, r4, r5, r6, r7, pc}
   34a54:	mov	r2, #6
   34a58:	bl	3416c <__assert_fail@plt+0x21994>
   34a5c:	subs	r7, r0, #0
   34a60:	beq	34a4c <__assert_fail@plt+0x22274>
   34a64:	mov	r0, #16
   34a68:	bl	12358 <xmalloc@plt>
   34a6c:	mov	r1, r5
   34a70:	mov	r2, #16
   34a74:	mov	r6, r0
   34a78:	bl	12580 <memset@plt>
   34a7c:	ldrd	r2, [sp, #24]
   34a80:	mov	r0, #1
   34a84:	str	r4, [r6]
   34a88:	strd	r2, [r6, #8]
   34a8c:	str	r6, [r7, #24]
   34a90:	pop	{r3, r4, r5, r6, r7, pc}
   34a94:	push	{r3, lr}
   34a98:	mov	r2, #5
   34a9c:	movw	r1, #39136	; 0x98e0
   34aa0:	mov	r0, #0
   34aa4:	movt	r1, #5
   34aa8:	bl	12298 <dcgettext@plt>
   34aac:	movw	r1, #168	; 0xa8
   34ab0:	movt	r1, #7
   34ab4:	movw	r2, #17728	; 0x4540
   34ab8:	movt	r2, #5
   34abc:	mov	r3, r0
   34ac0:	ldr	r0, [r1]
   34ac4:	mov	r1, #1
   34ac8:	bl	125d4 <__fprintf_chk@plt>
   34acc:	mov	r0, #0
   34ad0:	pop	{r3, pc}
   34ad4:	cmp	r2, #0
   34ad8:	cmpne	r1, #0
   34adc:	push	{r3, r4, r5, r6, r7, lr}
   34ae0:	movne	ip, #0
   34ae4:	moveq	ip, #1
   34ae8:	mov	r4, r2
   34aec:	mov	r5, r3
   34af0:	beq	34ba4 <__assert_fail@plt+0x223cc>
   34af4:	ldr	r3, [r0, #4]
   34af8:	cmp	r3, #0
   34afc:	beq	34b70 <__assert_fail@plt+0x22398>
   34b00:	ldr	r2, [r0, #8]
   34b04:	cmp	r2, #0
   34b08:	beq	34b70 <__assert_fail@plt+0x22398>
   34b0c:	sub	r3, r5, #1
   34b10:	cmp	r3, #1
   34b14:	bls	34bac <__assert_fail@plt+0x223d4>
   34b18:	ldr	r3, [r0, #16]
   34b1c:	cmp	r3, #0
   34b20:	addeq	r0, r2, #8
   34b24:	addne	r0, r3, #32
   34b28:	movne	r3, ip
   34b2c:	mov	r2, #2
   34b30:	bl	324e0 <__assert_fail@plt+0x1fd08>
   34b34:	subs	r7, r0, #0
   34b38:	beq	34ba4 <__assert_fail@plt+0x223cc>
   34b3c:	mov	r0, #16
   34b40:	bl	12358 <xmalloc@plt>
   34b44:	mov	r1, #0
   34b48:	mov	r2, #16
   34b4c:	mov	r6, r0
   34b50:	bl	12580 <memset@plt>
   34b54:	ldrd	r2, [sp, #24]
   34b58:	mov	r0, #1
   34b5c:	str	r5, [r6]
   34b60:	str	r4, [r6, #4]
   34b64:	strd	r2, [r6, #8]
   34b68:	str	r6, [r7, #24]
   34b6c:	pop	{r3, r4, r5, r6, r7, pc}
   34b70:	mov	r2, #5
   34b74:	movw	r1, #39172	; 0x9904
   34b78:	mov	r0, #0
   34b7c:	movt	r1, #5
   34b80:	bl	12298 <dcgettext@plt>
   34b84:	movw	r1, #168	; 0xa8
   34b88:	movt	r1, #7
   34b8c:	movw	r2, #17728	; 0x4540
   34b90:	movt	r2, #5
   34b94:	mov	r3, r0
   34b98:	ldr	r0, [r1]
   34b9c:	mov	r1, #1
   34ba0:	bl	125d4 <__fprintf_chk@plt>
   34ba4:	mov	r0, #0
   34ba8:	pop	{r3, r4, r5, r6, r7, pc}
   34bac:	cmp	r5, #1
   34bb0:	add	r0, r2, #8
   34bb4:	movne	r3, #1
   34bb8:	moveq	r3, #2
   34bbc:	b	34b2c <__assert_fail@plt+0x22354>
   34bc0:	push	{r5, r6, r7, lr}
   34bc4:	mov	r0, #1
   34bc8:	mov	r7, r1
   34bcc:	mov	r1, #0
   34bd0:	mov	r6, r2
   34bd4:	bl	3257c <__assert_fail@plt+0x1fda4>
   34bd8:	subs	r5, r0, #0
   34bdc:	beq	34c10 <__assert_fail@plt+0x22438>
   34be0:	mov	r0, #8
   34be4:	bl	12358 <xmalloc@plt>
   34be8:	mov	ip, #0
   34bec:	add	r3, r0, #3
   34bf0:	strb	ip, [r3], #1
   34bf4:	strb	ip, [r3], #1
   34bf8:	strb	ip, [r3], #1
   34bfc:	strb	ip, [r3], #1
   34c00:	strb	ip, [r3]
   34c04:	str	r7, [r0]
   34c08:	str	r6, [r0, #4]
   34c0c:	str	r0, [r5, #12]
   34c10:	mov	r0, r5
   34c14:	pop	{r5, r6, r7, pc}
   34c18:	mov	r0, #2
   34c1c:	mov	r1, #0
   34c20:	b	3257c <__assert_fail@plt+0x1fda4>
   34c24:	push	{r4, lr}
   34c28:	mov	r0, #3
   34c2c:	mov	r4, r2
   34c30:	bl	3257c <__assert_fail@plt+0x1fda4>
   34c34:	cmp	r0, #0
   34c38:	strne	r4, [r0, #12]
   34c3c:	pop	{r4, pc}
   34c40:	mov	r0, #4
   34c44:	b	3257c <__assert_fail@plt+0x1fda4>
   34c48:	mov	r0, #6
   34c4c:	b	3257c <__assert_fail@plt+0x1fda4>
   34c50:	mov	r0, #5
   34c54:	b	3257c <__assert_fail@plt+0x1fda4>
   34c58:	cmp	r1, #0
   34c5c:	mov	r1, r2
   34c60:	push	{r3, r4, r5, lr}
   34c64:	moveq	r0, #8
   34c68:	movne	r0, #7
   34c6c:	bl	3257c <__assert_fail@plt+0x1fda4>
   34c70:	subs	r4, r0, #0
   34c74:	beq	34c9c <__assert_fail@plt+0x224c4>
   34c78:	mov	r0, #24
   34c7c:	bl	12358 <xmalloc@plt>
   34c80:	mov	r1, #0
   34c84:	mov	r2, #24
   34c88:	mov	r5, r0
   34c8c:	bl	12580 <memset@plt>
   34c90:	ldr	r3, [sp, #16]
   34c94:	str	r3, [r5]
   34c98:	str	r5, [r4, #12]
   34c9c:	mov	r0, r4
   34ca0:	pop	{r3, r4, r5, pc}
   34ca4:	cmp	r1, #0
   34ca8:	mov	r1, r2
   34cac:	push	{r3, r4, r5, lr}
   34cb0:	moveq	r0, #10
   34cb4:	movne	r0, #9
   34cb8:	bl	3257c <__assert_fail@plt+0x1fda4>
   34cbc:	subs	r5, r0, #0
   34cc0:	beq	34d0c <__assert_fail@plt+0x22534>
   34cc4:	mov	r0, #24
   34cc8:	bl	12358 <xmalloc@plt>
   34ccc:	mov	r2, #24
   34cd0:	mov	r1, #0
   34cd4:	mov	r4, r0
   34cd8:	bl	12580 <memset@plt>
   34cdc:	ldr	r2, [sp, #16]
   34ce0:	ldr	r3, [sp, #20]
   34ce4:	str	r2, [r4]
   34ce8:	ldr	r2, [sp, #32]
   34cec:	str	r3, [r4, #12]
   34cf0:	cmp	r2, #0
   34cf4:	ldr	r3, [sp, #28]
   34cf8:	ldr	r2, [sp, #24]
   34cfc:	movne	r3, r5
   34d00:	str	r3, [r4, #20]
   34d04:	str	r2, [r4, #16]
   34d08:	str	r4, [r5, #12]
   34d0c:	mov	r0, r5
   34d10:	pop	{r3, r4, r5, pc}
   34d14:	push	{r5, r6, r7, lr}
   34d18:	mov	r0, #11
   34d1c:	mov	r7, r1
   34d20:	mov	r1, #0
   34d24:	mov	r6, r2
   34d28:	bl	3257c <__assert_fail@plt+0x1fda4>
   34d2c:	subs	r5, r0, #0
   34d30:	beq	34d64 <__assert_fail@plt+0x2258c>
   34d34:	mov	r0, #8
   34d38:	bl	12358 <xmalloc@plt>
   34d3c:	mov	ip, #0
   34d40:	add	r3, r0, #3
   34d44:	strb	ip, [r3], #1
   34d48:	strb	ip, [r3], #1
   34d4c:	strb	ip, [r3], #1
   34d50:	strb	ip, [r3], #1
   34d54:	strb	ip, [r3]
   34d58:	str	r7, [r0]
   34d5c:	str	r6, [r0, #4]
   34d60:	str	r0, [r5, #12]
   34d64:	mov	r0, r5
   34d68:	pop	{r5, r6, r7, pc}
   34d6c:	push	{r4, lr}
   34d70:	subs	r4, r1, #0
   34d74:	beq	34dac <__assert_fail@plt+0x225d4>
   34d78:	ldr	r1, [r4, #8]
   34d7c:	cmp	r1, #0
   34d80:	beq	34d8c <__assert_fail@plt+0x225b4>
   34d84:	mov	r0, r1
   34d88:	pop	{r4, pc}
   34d8c:	mov	r0, #12
   34d90:	bl	3257c <__assert_fail@plt+0x1fda4>
   34d94:	subs	r3, r0, #0
   34d98:	beq	34db4 <__assert_fail@plt+0x225dc>
   34d9c:	str	r4, [r3, #12]
   34da0:	mov	r0, r3
   34da4:	str	r3, [r4, #8]
   34da8:	pop	{r4, pc}
   34dac:	mov	r0, r4
   34db0:	pop	{r4, pc}
   34db4:	mov	r0, r3
   34db8:	pop	{r4, pc}
   34dbc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   34dc0:	subs	r7, r1, #0
   34dc4:	mov	r9, r2
   34dc8:	mov	r8, r3
   34dcc:	beq	34e30 <__assert_fail@plt+0x22658>
   34dd0:	mov	r0, #13
   34dd4:	mov	r1, #0
   34dd8:	bl	3257c <__assert_fail@plt+0x1fda4>
   34ddc:	subs	r6, r0, #0
   34de0:	beq	34e38 <__assert_fail@plt+0x22660>
   34de4:	mov	r0, #12
   34de8:	mov	r4, #0
   34dec:	bl	12358 <xmalloc@plt>
   34df0:	add	ip, r0, #3
   34df4:	mov	r5, r0
   34df8:	mov	r0, r6
   34dfc:	strb	r4, [ip], #1
   34e00:	strb	r4, [ip], #1
   34e04:	strb	r4, [ip], #1
   34e08:	strb	r4, [ip], #1
   34e0c:	strb	r4, [ip], #1
   34e10:	strb	r4, [ip], #1
   34e14:	strb	r4, [ip], #1
   34e18:	strb	r4, [ip], #1
   34e1c:	strb	r4, [ip]
   34e20:	stm	r5, {r7, r9}
   34e24:	str	r8, [r5, #8]
   34e28:	str	r5, [r6, #12]
   34e2c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   34e30:	mov	r0, r7
   34e34:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   34e38:	mov	r0, r6
   34e3c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   34e40:	push	{r4, lr}
   34e44:	subs	r4, r1, #0
   34e48:	beq	34e64 <__assert_fail@plt+0x2268c>
   34e4c:	mov	r1, #0
   34e50:	mov	r0, #14
   34e54:	bl	3257c <__assert_fail@plt+0x1fda4>
   34e58:	cmp	r0, #0
   34e5c:	strne	r4, [r0, #12]
   34e60:	pop	{r4, pc}
   34e64:	mov	r0, r4
   34e68:	pop	{r4, pc}
   34e6c:	push	{r4, r5, r6, r7, r8, lr}
   34e70:	subs	r8, r1, #0
   34e74:	mov	r4, r2
   34e78:	mov	r5, r3
   34e7c:	beq	34ec8 <__assert_fail@plt+0x226f0>
   34e80:	mov	r0, #15
   34e84:	mov	r1, #0
   34e88:	bl	3257c <__assert_fail@plt+0x1fda4>
   34e8c:	subs	r7, r0, #0
   34e90:	beq	34ed0 <__assert_fail@plt+0x226f8>
   34e94:	mov	r0, #24
   34e98:	bl	12358 <xmalloc@plt>
   34e9c:	mov	r1, #0
   34ea0:	mov	r2, #24
   34ea4:	mov	r6, r0
   34ea8:	bl	12580 <memset@plt>
   34eac:	ldrd	r2, [sp, #24]
   34eb0:	mov	r0, r7
   34eb4:	str	r8, [r6]
   34eb8:	strd	r4, [r6, #8]
   34ebc:	strd	r2, [r6, #16]
   34ec0:	str	r6, [r7, #12]
   34ec4:	pop	{r4, r5, r6, r7, r8, pc}
   34ec8:	mov	r0, r8
   34ecc:	pop	{r4, r5, r6, r7, r8, pc}
   34ed0:	mov	r0, r7
   34ed4:	pop	{r4, r5, r6, r7, r8, pc}
   34ed8:	cmp	r2, #0
   34edc:	cmpne	r1, #0
   34ee0:	push	{r4, r5, r6, r7, r8, lr}
   34ee4:	mov	r6, r1
   34ee8:	mov	r5, r2
   34eec:	movne	r7, #0
   34ef0:	moveq	r7, #1
   34ef4:	beq	34f50 <__assert_fail@plt+0x22778>
   34ef8:	mov	r0, #16
   34efc:	mov	r1, r7
   34f00:	bl	3257c <__assert_fail@plt+0x1fda4>
   34f04:	subs	r8, r0, #0
   34f08:	beq	34f58 <__assert_fail@plt+0x22780>
   34f0c:	mov	r0, #32
   34f10:	bl	12358 <xmalloc@plt>
   34f14:	mov	r1, r7
   34f18:	mov	r2, #32
   34f1c:	mov	r4, r0
   34f20:	bl	12580 <memset@plt>
   34f24:	ldrd	r2, [sp, #24]
   34f28:	mov	r0, r8
   34f2c:	str	r6, [r4]
   34f30:	str	r5, [r4, #4]
   34f34:	strd	r2, [r4, #8]
   34f38:	ldrd	r2, [sp, #32]
   34f3c:	strd	r2, [r4, #16]
   34f40:	ldr	r3, [sp, #40]	; 0x28
   34f44:	str	r3, [r4, #24]
   34f48:	str	r4, [r8, #12]
   34f4c:	pop	{r4, r5, r6, r7, r8, pc}
   34f50:	mov	r0, #0
   34f54:	pop	{r4, r5, r6, r7, r8, pc}
   34f58:	mov	r0, r8
   34f5c:	pop	{r4, r5, r6, r7, r8, pc}
   34f60:	push	{r3, r4, r5, r6, r7, lr}
   34f64:	subs	r6, r1, #0
   34f68:	mov	r7, r2
   34f6c:	beq	34fbc <__assert_fail@plt+0x227e4>
   34f70:	mov	r0, #17
   34f74:	mov	r1, #0
   34f78:	bl	3257c <__assert_fail@plt+0x1fda4>
   34f7c:	subs	r5, r0, #0
   34f80:	beq	34fc4 <__assert_fail@plt+0x227ec>
   34f84:	mov	r0, #8
   34f88:	bl	12358 <xmalloc@plt>
   34f8c:	mov	ip, #0
   34f90:	add	r3, r0, #3
   34f94:	mov	r4, r0
   34f98:	mov	r0, r5
   34f9c:	strb	ip, [r3], #1
   34fa0:	strb	ip, [r3], #1
   34fa4:	strb	ip, [r3], #1
   34fa8:	strb	ip, [r3], #1
   34fac:	strb	ip, [r3]
   34fb0:	stm	r4, {r6, r7}
   34fb4:	str	r4, [r5, #12]
   34fb8:	pop	{r3, r4, r5, r6, r7, pc}
   34fbc:	mov	r0, r6
   34fc0:	pop	{r3, r4, r5, r6, r7, pc}
   34fc4:	mov	r0, r5
   34fc8:	pop	{r3, r4, r5, r6, r7, pc}
   34fcc:	cmp	r2, #0
   34fd0:	cmpne	r1, #0
   34fd4:	push	{r3, r4, r5, r6, r7, lr}
   34fd8:	mov	r5, r1
   34fdc:	mov	r6, r2
   34fe0:	movne	r4, #0
   34fe4:	moveq	r4, #1
   34fe8:	beq	35034 <__assert_fail@plt+0x2285c>
   34fec:	mov	r0, #18
   34ff0:	mov	r1, r4
   34ff4:	bl	3257c <__assert_fail@plt+0x1fda4>
   34ff8:	subs	r7, r0, #0
   34ffc:	beq	3503c <__assert_fail@plt+0x22864>
   35000:	mov	r0, #8
   35004:	bl	12358 <xmalloc@plt>
   35008:	add	r3, r0, #3
   3500c:	mov	r2, r0
   35010:	mov	r0, r7
   35014:	strb	r4, [r3], #1
   35018:	strb	r4, [r3], #1
   3501c:	strb	r4, [r3], #1
   35020:	strb	r4, [r3], #1
   35024:	strb	r4, [r3]
   35028:	stm	r2, {r5, r6}
   3502c:	str	r2, [r7, #12]
   35030:	pop	{r3, r4, r5, r6, r7, pc}
   35034:	mov	r0, #0
   35038:	pop	{r3, r4, r5, r6, r7, pc}
   3503c:	mov	r0, r7
   35040:	pop	{r3, r4, r5, r6, r7, pc}
   35044:	push	{r4, r5, r6, r7, r8, lr}
   35048:	subs	r6, r1, #0
   3504c:	mov	r8, r2
   35050:	mov	r7, r3
   35054:	beq	350a0 <__assert_fail@plt+0x228c8>
   35058:	mov	r0, #19
   3505c:	mov	r1, #0
   35060:	bl	3257c <__assert_fail@plt+0x1fda4>
   35064:	subs	r5, r0, #0
   35068:	beq	350a8 <__assert_fail@plt+0x228d0>
   3506c:	mov	r0, #16
   35070:	bl	12358 <xmalloc@plt>
   35074:	mov	r1, #0
   35078:	mov	r2, #16
   3507c:	mov	r4, r0
   35080:	bl	12580 <memset@plt>
   35084:	ldr	r3, [sp, #24]
   35088:	mov	r0, r5
   3508c:	stm	r4, {r6, r8}
   35090:	str	r7, [r4, #8]
   35094:	str	r3, [r4, #12]
   35098:	str	r4, [r5, #12]
   3509c:	pop	{r4, r5, r6, r7, r8, pc}
   350a0:	mov	r0, r6
   350a4:	pop	{r4, r5, r6, r7, r8, pc}
   350a8:	mov	r0, r5
   350ac:	pop	{r4, r5, r6, r7, r8, pc}
   350b0:	push	{r4, lr}
   350b4:	subs	r4, r1, #0
   350b8:	beq	350d4 <__assert_fail@plt+0x228fc>
   350bc:	mov	r1, #0
   350c0:	mov	r0, #20
   350c4:	bl	3257c <__assert_fail@plt+0x1fda4>
   350c8:	cmp	r0, #0
   350cc:	strne	r4, [r0, #12]
   350d0:	pop	{r4, pc}
   350d4:	mov	r0, r4
   350d8:	pop	{r4, pc}
   350dc:	push	{r4, lr}
   350e0:	subs	r4, r1, #0
   350e4:	beq	35100 <__assert_fail@plt+0x22928>
   350e8:	mov	r1, #0
   350ec:	mov	r0, #21
   350f0:	bl	3257c <__assert_fail@plt+0x1fda4>
   350f4:	cmp	r0, #0
   350f8:	strne	r4, [r0, #12]
   350fc:	pop	{r4, pc}
   35100:	mov	r0, r4
   35104:	pop	{r4, pc}
   35108:	push	{r4, r5, r6, r7, r8, lr}
   3510c:	mov	r0, #16
   35110:	mov	r8, r1
   35114:	mov	r7, r2
   35118:	ldr	r6, [sp, #24]
   3511c:	ldr	r5, [sp, #28]
   35120:	bl	12358 <xmalloc@plt>
   35124:	mov	r1, #0
   35128:	mov	r2, #16
   3512c:	mov	r4, r0
   35130:	bl	12580 <memset@plt>
   35134:	str	r8, [r4]
   35138:	mov	r0, r4
   3513c:	str	r7, [r4, #4]
   35140:	str	r6, [r4, #8]
   35144:	str	r5, [r4, #12]
   35148:	pop	{r4, r5, r6, r7, r8, pc}
   3514c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   35150:	mov	r0, #24
   35154:	mov	r9, r1
   35158:	mov	r8, r2
   3515c:	ldr	r7, [sp, #32]
   35160:	ldr	r6, [sp, #40]	; 0x28
   35164:	ldr	r5, [sp, #48]	; 0x30
   35168:	bl	12358 <xmalloc@plt>
   3516c:	mov	r1, #0
   35170:	mov	r2, #24
   35174:	mov	r4, r0
   35178:	bl	12580 <memset@plt>
   3517c:	str	r9, [r4]
   35180:	mov	r0, r4
   35184:	str	r8, [r4, #4]
   35188:	str	r7, [r4, #16]
   3518c:	str	r6, [r4, #20]
   35190:	str	r5, [r4, #8]
   35194:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   35198:	push	{r4, r5, r6, r7, r8, lr}
   3519c:	mov	r0, #24
   351a0:	mov	r8, r3
   351a4:	mov	r7, r1
   351a8:	mov	r6, r2
   351ac:	ldr	r5, [sp, #24]
   351b0:	bl	12358 <xmalloc@plt>
   351b4:	mov	r1, #0
   351b8:	mov	r2, #24
   351bc:	mov	r4, r0
   351c0:	bl	12580 <memset@plt>
   351c4:	mov	r3, #1
   351c8:	str	r7, [r4]
   351cc:	str	r6, [r4, #4]
   351d0:	mov	r0, r4
   351d4:	str	r8, [r4, #16]
   351d8:	str	r5, [r4, #8]
   351dc:	str	r3, [r4, #12]
   351e0:	pop	{r4, r5, r6, r7, r8, pc}
   351e4:	push	{r4, r5, r6, lr}
   351e8:	mov	r0, #8
   351ec:	mov	r5, r1
   351f0:	mov	r6, r2
   351f4:	bl	12358 <xmalloc@plt>
   351f8:	mov	ip, #0
   351fc:	add	r3, r0, #3
   35200:	mov	r4, r0
   35204:	strb	ip, [r3], #1
   35208:	strb	ip, [r3], #1
   3520c:	strb	ip, [r3], #1
   35210:	strb	ip, [r3], #1
   35214:	strb	ip, [r3]
   35218:	stm	r0, {r5, r6}
   3521c:	pop	{r4, r5, r6, pc}
   35220:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35224:	mov	r0, #40	; 0x28
   35228:	mov	r4, r3
   3522c:	mov	fp, r1
   35230:	mov	sl, r2
   35234:	ldr	r9, [sp, #40]	; 0x28
   35238:	ldr	r8, [sp, #44]	; 0x2c
   3523c:	ldr	r7, [sp, #56]	; 0x38
   35240:	bl	12358 <xmalloc@plt>
   35244:	mov	r1, #0
   35248:	mov	r2, #40	; 0x28
   3524c:	mov	r6, r0
   35250:	bl	12580 <memset@plt>
   35254:	str	r4, [r6, #8]
   35258:	mov	r0, r6
   3525c:	ldrd	r4, [sp, #48]	; 0x30
   35260:	str	fp, [r6]
   35264:	str	sl, [r6, #4]
   35268:	str	r9, [r6, #12]
   3526c:	str	r8, [r6, #16]
   35270:	strd	r4, [r6, #24]
   35274:	str	r7, [r6, #32]
   35278:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3527c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   35280:	mov	r0, #40	; 0x28
   35284:	mov	r9, r3
   35288:	mov	r8, r1
   3528c:	mov	r7, r2
   35290:	ldr	r6, [sp, #32]
   35294:	ldr	r5, [sp, #36]	; 0x24
   35298:	bl	12358 <xmalloc@plt>
   3529c:	mov	r1, #0
   352a0:	mov	r2, #40	; 0x28
   352a4:	mov	r4, r0
   352a8:	bl	12580 <memset@plt>
   352ac:	mvn	r2, #0
   352b0:	mvn	r3, #0
   352b4:	str	r8, [r4]
   352b8:	mov	r0, r4
   352bc:	str	r7, [r4, #4]
   352c0:	str	r9, [r4, #8]
   352c4:	str	r6, [r4, #12]
   352c8:	str	r5, [r4, #16]
   352cc:	strd	r2, [r4, #24]
   352d0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   352d4:	cmp	r2, #0
   352d8:	cmpne	r1, #0
   352dc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   352e0:	mov	r7, r1
   352e4:	mov	r6, r2
   352e8:	movne	r4, #0
   352ec:	moveq	r4, #1
   352f0:	mov	r8, r0
   352f4:	beq	353c4 <__assert_fail@plt+0x22bec>
   352f8:	ldr	r3, [r0, #4]
   352fc:	cmp	r3, #0
   35300:	beq	35390 <__assert_fail@plt+0x22bb8>
   35304:	ldr	r3, [r0, #8]
   35308:	cmp	r3, #0
   3530c:	beq	35390 <__assert_fail@plt+0x22bb8>
   35310:	mov	r0, #22
   35314:	mov	r1, r4
   35318:	bl	3257c <__assert_fail@plt+0x1fda4>
   3531c:	subs	r9, r0, #0
   35320:	beq	353c4 <__assert_fail@plt+0x22bec>
   35324:	mov	r0, #8
   35328:	bl	12358 <xmalloc@plt>
   3532c:	mov	r3, #3
   35330:	mov	r1, r7
   35334:	mov	r2, r4
   35338:	mov	ip, r0
   3533c:	mov	r5, r0
   35340:	strb	r4, [ip], #1
   35344:	add	ip, ip, #1
   35348:	strb	r4, [r0, #1]
   3534c:	strb	r4, [ip], #1
   35350:	strb	r4, [ip], #1
   35354:	strb	r4, [ip], #1
   35358:	strb	r4, [ip], #1
   3535c:	strb	r4, [ip], #1
   35360:	strb	r4, [ip]
   35364:	str	r6, [r0, #4]
   35368:	str	r0, [r9, #12]
   3536c:	ldr	r0, [r8, #8]
   35370:	add	r0, r0, #8
   35374:	bl	324e0 <__assert_fail@plt+0x1fd08>
   35378:	subs	r3, r0, #0
   3537c:	beq	353c4 <__assert_fail@plt+0x22bec>
   35380:	str	r9, [r3, #24]
   35384:	mov	r0, r9
   35388:	str	r3, [r5]
   3538c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   35390:	mov	r2, #5
   35394:	movw	r1, #39212	; 0x992c
   35398:	mov	r0, #0
   3539c:	movt	r1, #5
   353a0:	bl	12298 <dcgettext@plt>
   353a4:	movw	r1, #168	; 0xa8
   353a8:	movt	r1, #7
   353ac:	movw	r2, #17728	; 0x4540
   353b0:	movt	r2, #5
   353b4:	mov	r3, r0
   353b8:	ldr	r0, [r1]
   353bc:	mov	r1, #1
   353c0:	bl	125d4 <__fprintf_chk@plt>
   353c4:	mov	r0, #0
   353c8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   353cc:	cmp	r2, #0
   353d0:	cmpne	r1, #0
   353d4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   353d8:	mov	r4, r2
   353dc:	movne	r5, #0
   353e0:	moveq	r5, #1
   353e4:	mov	r7, r0
   353e8:	mov	r8, r1
   353ec:	beq	354a8 <__assert_fail@plt+0x22cd0>
   353f0:	ldr	r6, [r0, #8]
   353f4:	cmp	r6, #0
   353f8:	beq	354ec <__assert_fail@plt+0x22d14>
   353fc:	ldr	r3, [r2]
   35400:	cmp	r3, #23
   35404:	beq	35488 <__assert_fail@plt+0x22cb0>
   35408:	mov	r0, #23
   3540c:	mov	r1, r5
   35410:	bl	3257c <__assert_fail@plt+0x1fda4>
   35414:	subs	r9, r0, #0
   35418:	beq	354a8 <__assert_fail@plt+0x22cd0>
   3541c:	mov	r0, #8
   35420:	bl	12358 <xmalloc@plt>
   35424:	mov	r3, #3
   35428:	mov	r1, r8
   3542c:	mov	r2, #1
   35430:	mov	ip, r0
   35434:	mov	r6, r0
   35438:	strb	r5, [ip], #1
   3543c:	add	ip, ip, #1
   35440:	strb	r5, [r0, #1]
   35444:	strb	r5, [ip], #1
   35448:	strb	r5, [ip], #1
   3544c:	strb	r5, [ip], #1
   35450:	strb	r5, [ip], #1
   35454:	strb	r5, [ip], #1
   35458:	strb	r5, [ip]
   3545c:	str	r4, [r0, #4]
   35460:	str	r0, [r9, #12]
   35464:	ldr	r0, [r7, #8]
   35468:	add	r0, r0, #8
   3546c:	bl	324e0 <__assert_fail@plt+0x1fd08>
   35470:	subs	r3, r0, #0
   35474:	beq	354a8 <__assert_fail@plt+0x22cd0>
   35478:	str	r9, [r3, #24]
   3547c:	mov	r0, r9
   35480:	str	r3, [r6]
   35484:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   35488:	ldr	r3, [r2, #12]
   3548c:	ldr	r3, [r3]
   35490:	ldr	r0, [r3, #4]
   35494:	bl	12178 <strcmp@plt>
   35498:	cmp	r0, #0
   3549c:	bne	354b0 <__assert_fail@plt+0x22cd8>
   354a0:	mov	r0, r4
   354a4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   354a8:	mov	r0, #0
   354ac:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   354b0:	mov	r0, r5
   354b4:	mov	r2, #5
   354b8:	movw	r1, #39280	; 0x9970
   354bc:	movt	r1, #5
   354c0:	bl	12298 <dcgettext@plt>
   354c4:	movw	r1, #168	; 0xa8
   354c8:	movt	r1, #7
   354cc:	movw	r2, #17728	; 0x4540
   354d0:	movt	r2, #5
   354d4:	mov	r3, r0
   354d8:	ldr	r0, [r1]
   354dc:	mov	r1, #1
   354e0:	bl	125d4 <__fprintf_chk@plt>
   354e4:	mov	r0, r5
   354e8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   354ec:	mov	r0, r6
   354f0:	mov	r2, #5
   354f4:	movw	r1, #39248	; 0x9950
   354f8:	movt	r1, #5
   354fc:	bl	12298 <dcgettext@plt>
   35500:	movw	r1, #168	; 0xa8
   35504:	movt	r1, #7
   35508:	movw	r2, #17728	; 0x4540
   3550c:	movt	r2, #5
   35510:	mov	r3, r0
   35514:	ldr	r0, [r1]
   35518:	mov	r1, #1
   3551c:	bl	125d4 <__fprintf_chk@plt>
   35520:	mov	r0, r6
   35524:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   35528:	push	{r3, r4, r5, lr}
   3552c:	subs	r4, r1, #0
   35530:	mov	r5, r0
   35534:	beq	3559c <__assert_fail@plt+0x22dc4>
   35538:	sub	r3, r2, #7
   3553c:	cmp	r3, #4
   35540:	bhi	35568 <__assert_fail@plt+0x22d90>
   35544:	mov	r0, r2
   35548:	mov	r1, #0
   3554c:	bl	3257c <__assert_fail@plt+0x1fda4>
   35550:	subs	r2, r0, #0
   35554:	beq	3559c <__assert_fail@plt+0x22dc4>
   35558:	mov	r0, r5
   3555c:	mov	r1, r4
   35560:	pop	{r3, r4, r5, lr}
   35564:	b	353cc <__assert_fail@plt+0x22bf4>
   35568:	mov	r2, #5
   3556c:	movw	r1, #39316	; 0x9994
   35570:	mov	r0, #0
   35574:	movt	r1, #5
   35578:	bl	12298 <dcgettext@plt>
   3557c:	movw	r1, #168	; 0xa8
   35580:	movt	r1, #7
   35584:	movw	r2, #17728	; 0x4540
   35588:	movt	r2, #5
   3558c:	mov	r3, r0
   35590:	ldr	r0, [r1]
   35594:	mov	r1, #1
   35598:	bl	125d4 <__fprintf_chk@plt>
   3559c:	mov	r0, #0
   355a0:	pop	{r3, r4, r5, pc}
   355a4:	ldr	r3, [r1, #4]
   355a8:	push	{r4, r5, r6, lr}
   355ac:	cmp	r3, #0
   355b0:	sub	sp, sp, #8
   355b4:	mov	r4, r1
   355b8:	mov	r5, r2
   355bc:	beq	35600 <__assert_fail@plt+0x22e28>
   355c0:	cmp	r3, r2
   355c4:	beq	35600 <__assert_fail@plt+0x22e28>
   355c8:	movw	r3, #168	; 0xa8
   355cc:	movt	r3, #7
   355d0:	mov	r2, #5
   355d4:	movw	r1, #39360	; 0x99c0
   355d8:	mov	r0, #0
   355dc:	movt	r1, #5
   355e0:	ldr	r6, [r3]
   355e4:	bl	12298 <dcgettext@plt>
   355e8:	ldr	r3, [r4, #4]
   355ec:	mov	r1, #1
   355f0:	str	r5, [sp]
   355f4:	mov	r2, r0
   355f8:	mov	r0, r6
   355fc:	bl	125d4 <__fprintf_chk@plt>
   35600:	mov	r0, #1
   35604:	str	r5, [r4, #4]
   35608:	add	sp, sp, #8
   3560c:	pop	{r4, r5, r6, pc}
   35610:	push	{r3, r4, r5, r6, r7, lr}
   35614:	mov	r5, r1
   35618:	ldr	r7, [r0, #4]
   3561c:	cmp	r7, #0
   35620:	beq	35720 <__assert_fail@plt+0x22f48>
   35624:	ldr	r6, [r0, #16]
   35628:	cmp	r6, #0
   3562c:	beq	3569c <__assert_fail@plt+0x22ec4>
   35630:	ldr	r3, [r6, #32]
   35634:	cmp	r3, #0
   35638:	beq	35690 <__assert_fail@plt+0x22eb8>
   3563c:	ldr	r4, [r3]
   35640:	cmp	r4, #0
   35644:	bne	35658 <__assert_fail@plt+0x22e80>
   35648:	b	35690 <__assert_fail@plt+0x22eb8>
   3564c:	ldr	r4, [r4]
   35650:	cmp	r4, #0
   35654:	beq	35690 <__assert_fail@plt+0x22eb8>
   35658:	ldr	r3, [r4, #12]
   3565c:	cmp	r3, #0
   35660:	bne	3564c <__assert_fail@plt+0x22e74>
   35664:	ldr	r0, [r4, #4]
   35668:	ldrb	r3, [r5]
   3566c:	ldrb	r2, [r0]
   35670:	cmp	r2, r3
   35674:	bne	3564c <__assert_fail@plt+0x22e74>
   35678:	mov	r1, r5
   3567c:	bl	12178 <strcmp@plt>
   35680:	cmp	r0, #0
   35684:	bne	3564c <__assert_fail@plt+0x22e74>
   35688:	ldr	r0, [r4, #24]
   3568c:	pop	{r3, r4, r5, r6, r7, pc}
   35690:	ldr	r6, [r6, #4]
   35694:	cmp	r6, #0
   35698:	bne	35630 <__assert_fail@plt+0x22e58>
   3569c:	ldr	r6, [r7, #4]
   356a0:	cmp	r6, #0
   356a4:	beq	35718 <__assert_fail@plt+0x22f40>
   356a8:	ldr	r3, [r6, #8]
   356ac:	cmp	r3, #0
   356b0:	beq	3570c <__assert_fail@plt+0x22f34>
   356b4:	ldr	r4, [r3]
   356b8:	cmp	r4, #0
   356bc:	bne	356d0 <__assert_fail@plt+0x22ef8>
   356c0:	b	3570c <__assert_fail@plt+0x22f34>
   356c4:	ldr	r4, [r4]
   356c8:	cmp	r4, #0
   356cc:	beq	3570c <__assert_fail@plt+0x22f34>
   356d0:	ldr	r3, [r4, #12]
   356d4:	cmp	r3, #0
   356d8:	bne	356c4 <__assert_fail@plt+0x22eec>
   356dc:	ldr	r0, [r4, #4]
   356e0:	ldrb	r3, [r5]
   356e4:	ldrb	r2, [r0]
   356e8:	cmp	r2, r3
   356ec:	bne	356c4 <__assert_fail@plt+0x22eec>
   356f0:	mov	r1, r5
   356f4:	bl	12178 <strcmp@plt>
   356f8:	cmp	r0, #0
   356fc:	beq	35688 <__assert_fail@plt+0x22eb0>
   35700:	ldr	r4, [r4]
   35704:	cmp	r4, #0
   35708:	bne	356d0 <__assert_fail@plt+0x22ef8>
   3570c:	ldr	r6, [r6]
   35710:	cmp	r6, #0
   35714:	bne	356a8 <__assert_fail@plt+0x22ed0>
   35718:	mov	r0, r6
   3571c:	pop	{r3, r4, r5, r6, r7, pc}
   35720:	mov	r0, r7
   35724:	mov	r2, #5
   35728:	movw	r1, #39404	; 0x99ec
   3572c:	movt	r1, #5
   35730:	bl	12298 <dcgettext@plt>
   35734:	movw	r1, #168	; 0xa8
   35738:	movt	r1, #7
   3573c:	movw	r2, #17728	; 0x4540
   35740:	movt	r2, #5
   35744:	mov	r3, r0
   35748:	ldr	r0, [r1]
   3574c:	mov	r1, #1
   35750:	bl	125d4 <__fprintf_chk@plt>
   35754:	mov	r0, r7
   35758:	pop	{r3, r4, r5, r6, r7, pc}
   3575c:	push	{r4, r5, r6, r7, r8, lr}
   35760:	mov	r7, r1
   35764:	ldr	r6, [r0]
   35768:	mov	r5, r2
   3576c:	cmp	r6, #0
   35770:	beq	35810 <__assert_fail@plt+0x23038>
   35774:	ldr	r8, [r6, #4]
   35778:	cmp	r8, #0
   3577c:	beq	35804 <__assert_fail@plt+0x2302c>
   35780:	ldr	r3, [r8, #8]
   35784:	cmp	r3, #0
   35788:	beq	357f8 <__assert_fail@plt+0x23020>
   3578c:	ldr	r4, [r3]
   35790:	cmp	r4, #0
   35794:	bne	357a8 <__assert_fail@plt+0x22fd0>
   35798:	b	357f8 <__assert_fail@plt+0x23020>
   3579c:	ldr	r4, [r4]
   357a0:	cmp	r4, #0
   357a4:	beq	357f8 <__assert_fail@plt+0x23020>
   357a8:	ldr	r3, [r4, #12]
   357ac:	cmp	r3, #1
   357b0:	bne	3579c <__assert_fail@plt+0x22fc4>
   357b4:	cmp	r5, #0
   357b8:	beq	357cc <__assert_fail@plt+0x22ff4>
   357bc:	ldr	r3, [r4, #24]
   357c0:	ldr	r3, [r3]
   357c4:	cmp	r3, r5
   357c8:	bne	3579c <__assert_fail@plt+0x22fc4>
   357cc:	ldr	r0, [r4, #4]
   357d0:	ldrb	r3, [r7]
   357d4:	ldrb	r2, [r0]
   357d8:	cmp	r2, r3
   357dc:	bne	3579c <__assert_fail@plt+0x22fc4>
   357e0:	mov	r1, r7
   357e4:	bl	12178 <strcmp@plt>
   357e8:	cmp	r0, #0
   357ec:	bne	3579c <__assert_fail@plt+0x22fc4>
   357f0:	ldr	r0, [r4, #24]
   357f4:	pop	{r4, r5, r6, r7, r8, pc}
   357f8:	ldr	r8, [r8]
   357fc:	cmp	r8, #0
   35800:	bne	35780 <__assert_fail@plt+0x22fa8>
   35804:	ldr	r6, [r6]
   35808:	cmp	r6, #0
   3580c:	bne	35774 <__assert_fail@plt+0x22f9c>
   35810:	mov	r0, r6
   35814:	pop	{r4, r5, r6, r7, r8, pc}
   35818:	cmp	r1, #0
   3581c:	push	{r3, lr}
   35820:	beq	3583c <__assert_fail@plt+0x23064>
   35824:	mov	r2, #0
   35828:	bl	32288 <__assert_fail@plt+0x1fab0>
   3582c:	cmp	r0, #0
   35830:	beq	3583c <__assert_fail@plt+0x23064>
   35834:	ldr	r0, [r0]
   35838:	pop	{r3, pc}
   3583c:	mov	r0, #0
   35840:	pop	{r3, pc}
   35844:	ldr	r3, [r1]
   35848:	cmp	r3, #1
   3584c:	bne	3586c <__assert_fail@plt+0x23094>
   35850:	ldr	r3, [r1, #12]
   35854:	ldr	r2, [r3]
   35858:	ldr	r1, [r2]
   3585c:	cmp	r1, #0
   35860:	bne	35844 <__assert_fail@plt+0x2306c>
   35864:	ldr	r0, [r3, #4]
   35868:	bx	lr
   3586c:	sub	r3, r3, #22
   35870:	cmp	r3, #1
   35874:	ldrls	r3, [r1, #12]
   35878:	ldrls	r3, [r3]
   3587c:	bls	35864 <__assert_fail@plt+0x2308c>
   35880:	mov	r0, #0
   35884:	bx	lr
   35888:	cmp	r1, #0
   3588c:	beq	358c8 <__assert_fail@plt+0x230f0>
   35890:	ldr	r0, [r1, #4]
   35894:	cmp	r0, #0
   35898:	bne	358cc <__assert_fail@plt+0x230f4>
   3589c:	ldr	r3, [r1]
   358a0:	cmp	r3, #1
   358a4:	sub	r2, r3, #22
   358a8:	beq	358e0 <__assert_fail@plt+0x23108>
   358ac:	bcc	358d4 <__assert_fail@plt+0x230fc>
   358b0:	cmp	r2, #1
   358b4:	bhi	358d4 <__assert_fail@plt+0x230fc>
   358b8:	ldr	r3, [r1, #12]
   358bc:	ldr	r1, [r3, #4]
   358c0:	cmp	r1, #0
   358c4:	bne	35890 <__assert_fail@plt+0x230b8>
   358c8:	mov	r0, r1
   358cc:	mov	r1, #0
   358d0:	bx	lr
   358d4:	mov	r0, #0
   358d8:	mov	r1, #0
   358dc:	bx	lr
   358e0:	ldr	r3, [r1, #12]
   358e4:	ldr	r3, [r3]
   358e8:	ldr	r1, [r3]
   358ec:	cmp	r1, #0
   358f0:	bne	35890 <__assert_fail@plt+0x230b8>
   358f4:	b	358c8 <__assert_fail@plt+0x230f0>
   358f8:	cmp	r1, #0
   358fc:	push	{r3, lr}
   35900:	beq	35934 <__assert_fail@plt+0x2315c>
   35904:	mov	r2, #0
   35908:	bl	32288 <__assert_fail@plt+0x1fab0>
   3590c:	cmp	r0, #0
   35910:	beq	35934 <__assert_fail@plt+0x2315c>
   35914:	ldr	r3, [r0]
   35918:	cmp	r3, #13
   3591c:	beq	35928 <__assert_fail@plt+0x23150>
   35920:	cmp	r3, #19
   35924:	bne	35934 <__assert_fail@plt+0x2315c>
   35928:	ldr	r3, [r0, #12]
   3592c:	ldr	r0, [r3]
   35930:	pop	{r3, pc}
   35934:	mov	r0, #0
   35938:	pop	{r3, pc}
   3593c:	cmp	r1, #0
   35940:	push	{r4, lr}
   35944:	mov	r4, r2
   35948:	beq	35988 <__assert_fail@plt+0x231b0>
   3594c:	mov	r2, #0
   35950:	bl	32288 <__assert_fail@plt+0x1fab0>
   35954:	cmp	r0, #0
   35958:	beq	35988 <__assert_fail@plt+0x231b0>
   3595c:	ldr	r3, [r0]
   35960:	cmp	r3, #13
   35964:	beq	35990 <__assert_fail@plt+0x231b8>
   35968:	cmp	r3, #19
   3596c:	bne	35988 <__assert_fail@plt+0x231b0>
   35970:	ldr	r3, [r0, #12]
   35974:	ldr	r3, [r3, #12]
   35978:	str	r3, [r4]
   3597c:	ldr	r3, [r0, #12]
   35980:	ldr	r0, [r3, #8]
   35984:	pop	{r4, pc}
   35988:	mov	r0, #0
   3598c:	pop	{r4, pc}
   35990:	ldr	r3, [r0, #12]
   35994:	ldr	r3, [r3, #8]
   35998:	str	r3, [r4]
   3599c:	ldr	r3, [r0, #12]
   359a0:	ldr	r0, [r3, #4]
   359a4:	pop	{r4, pc}
   359a8:	cmp	r1, #0
   359ac:	push	{r3, lr}
   359b0:	beq	35a08 <__assert_fail@plt+0x23230>
   359b4:	mov	r2, #0
   359b8:	bl	32288 <__assert_fail@plt+0x1fab0>
   359bc:	cmp	r0, #0
   359c0:	beq	35a08 <__assert_fail@plt+0x23230>
   359c4:	ldr	r3, [r0]
   359c8:	sub	r3, r3, #12
   359cc:	cmp	r3, #9
   359d0:	ldrls	pc, [pc, r3, lsl #2]
   359d4:	b	35a08 <__assert_fail@plt+0x23230>
   359d8:	andeq	r5, r3, r0, lsl #20
   359dc:	andeq	r5, r3, r8, lsl #20
   359e0:	andeq	r5, r3, r0, lsl #20
   359e4:	andeq	r5, r3, r8, lsl #20
   359e8:	andeq	r5, r3, r8, lsl #20
   359ec:	andeq	r5, r3, r8, lsl #20
   359f0:	andeq	r5, r3, r8, lsl #20
   359f4:	andeq	r5, r3, r8, lsl #20
   359f8:	andeq	r5, r3, r0, lsl #20
   359fc:	andeq	r5, r3, r0, lsl #20
   35a00:	ldr	r0, [r0, #12]
   35a04:	pop	{r3, pc}
   35a08:	mov	r0, #0
   35a0c:	pop	{r3, pc}
   35a10:	cmp	r1, #0
   35a14:	push	{r3, lr}
   35a18:	beq	35a48 <__assert_fail@plt+0x23270>
   35a1c:	mov	r2, #0
   35a20:	bl	32288 <__assert_fail@plt+0x1fab0>
   35a24:	cmp	r0, #0
   35a28:	beq	35a48 <__assert_fail@plt+0x23270>
   35a2c:	ldr	r3, [r0]
   35a30:	sub	r3, r3, #7
   35a34:	cmp	r3, #3
   35a38:	bhi	35a48 <__assert_fail@plt+0x23270>
   35a3c:	ldr	r3, [r0, #12]
   35a40:	ldr	r0, [r3]
   35a44:	pop	{r3, pc}
   35a48:	mov	r0, #0
   35a4c:	pop	{r3, pc}
   35a50:	cmp	r1, #0
   35a54:	ldrne	r0, [r1, #4]
   35a58:	moveq	r0, r1
   35a5c:	bx	lr
   35a60:	cmp	r1, #0
   35a64:	ldrne	r0, [r1]
   35a68:	moveq	r0, r1
   35a6c:	bx	lr
   35a70:	subs	r3, r1, #0
   35a74:	beq	35a84 <__assert_fail@plt+0x232ac>
   35a78:	ldr	r1, [r3, #12]
   35a7c:	cmp	r1, #0
   35a80:	beq	35a90 <__assert_fail@plt+0x232b8>
   35a84:	mvn	r0, #0
   35a88:	mov	r1, r0
   35a8c:	bx	lr
   35a90:	ldr	r0, [r3, #16]
   35a94:	bx	lr
   35a98:	subs	r3, r1, #0
   35a9c:	beq	35aac <__assert_fail@plt+0x232d4>
   35aa0:	ldr	r1, [r3, #12]
   35aa4:	cmp	r1, #0
   35aa8:	beq	35ab8 <__assert_fail@plt+0x232e0>
   35aac:	mvn	r0, #0
   35ab0:	mov	r1, r0
   35ab4:	bx	lr
   35ab8:	ldr	r0, [r3, #20]
   35abc:	bx	lr
   35ac0:	cmp	r1, #0
   35ac4:	ldrne	r0, [r1, #8]
   35ac8:	moveq	r0, #3
   35acc:	bx	lr
   35ad0:	cmp	r1, #0
   35ad4:	beq	35ae8 <__assert_fail@plt+0x23310>
   35ad8:	ldr	r0, [r1, #12]
   35adc:	cmp	r0, #0
   35ae0:	ldrne	r0, [r1, #16]
   35ae4:	bx	lr
   35ae8:	mov	r0, r1
   35aec:	bx	lr
   35af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35af4:	mov	r6, r2
   35af8:	ldr	r8, [r0]
   35afc:	mov	r9, #0
   35b00:	ldr	r2, [r0, #28]
   35b04:	sub	sp, sp, #20
   35b08:	ldr	r3, [r0, #24]
   35b0c:	cmp	r8, r9
   35b10:	mov	r4, r0
   35b14:	mov	r5, r1
   35b18:	add	r3, r3, #1
   35b1c:	str	r9, [r0, #44]	; 0x2c
   35b20:	str	r2, [r0, #32]
   35b24:	str	r3, [r0, #24]
   35b28:	beq	35c20 <__assert_fail@plt+0x23448>
   35b2c:	add	fp, r0, #36	; 0x24
   35b30:	add	r2, r0, #40	; 0x28
   35b34:	add	r3, r1, #172	; 0xac
   35b38:	str	r2, [sp, #8]
   35b3c:	str	r3, [sp, #12]
   35b40:	ldr	r3, [r8, #4]
   35b44:	mov	r0, r6
   35b48:	ldr	r2, [r8, #8]
   35b4c:	str	r9, [r4, #40]	; 0x28
   35b50:	ldr	r1, [r3, #4]
   35b54:	str	r2, [r4, #36]	; 0x24
   35b58:	ldr	r3, [r5]
   35b5c:	blx	r3
   35b60:	cmp	r0, #0
   35b64:	beq	35bb8 <__assert_fail@plt+0x233e0>
   35b68:	ldr	sl, [r8, #4]
   35b6c:	cmp	sl, #0
   35b70:	beq	35bec <__assert_fail@plt+0x23414>
   35b74:	ldr	r3, [sl, #8]
   35b78:	cmp	r3, #0
   35b7c:	beq	35bc4 <__assert_fail@plt+0x233ec>
   35b80:	ldr	r7, [r3]
   35b84:	cmp	r7, #0
   35b88:	bne	35b9c <__assert_fail@plt+0x233c4>
   35b8c:	b	35bc4 <__assert_fail@plt+0x233ec>
   35b90:	ldr	r7, [r7]
   35b94:	cmp	r7, #0
   35b98:	beq	35bc4 <__assert_fail@plt+0x233ec>
   35b9c:	mov	r0, r4
   35ba0:	mov	r1, r5
   35ba4:	mov	r2, r6
   35ba8:	mov	r3, r7
   35bac:	bl	33d8c <__assert_fail@plt+0x215b4>
   35bb0:	cmp	r0, #0
   35bb4:	bne	35b90 <__assert_fail@plt+0x233b8>
   35bb8:	mov	r0, #0
   35bbc:	add	sp, sp, #20
   35bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35bc4:	ldr	sl, [sl]
   35bc8:	cmp	sl, #0
   35bcc:	beq	35bec <__assert_fail@plt+0x23414>
   35bd0:	ldr	r3, [r5, #4]
   35bd4:	mov	r0, r6
   35bd8:	ldr	r1, [sl, #4]
   35bdc:	blx	r3
   35be0:	cmp	r0, #0
   35be4:	bne	35b74 <__assert_fail@plt+0x2339c>
   35be8:	b	35bb8 <__assert_fail@plt+0x233e0>
   35bec:	mvn	r2, #0
   35bf0:	mvn	r3, #0
   35bf4:	mov	r0, fp
   35bf8:	strd	r2, [sp]
   35bfc:	ldr	r1, [sp, #8]
   35c00:	mov	r3, r6
   35c04:	ldr	r2, [sp, #12]
   35c08:	bl	323f8 <__assert_fail@plt+0x1fc20>
   35c0c:	cmp	r0, #0
   35c10:	beq	35bb8 <__assert_fail@plt+0x233e0>
   35c14:	ldr	r8, [r8]
   35c18:	cmp	r8, #0
   35c1c:	bne	35b40 <__assert_fail@plt+0x23368>
   35c20:	mov	r0, #1
   35c24:	b	35bbc <__assert_fail@plt+0x233e4>
   35c28:	ldr	ip, [r0]
   35c2c:	push	{r4, r5, r6, r7, r8}
   35c30:	movw	r4, #65192	; 0xfea8
   35c34:	ldrb	r3, [ip]
   35c38:	movt	r4, #6
   35c3c:	mov	r8, r0
   35c40:	lsl	r2, r3, #1
   35c44:	ldrh	r0, [r4, r2]
   35c48:	and	r0, r0, #4
   35c4c:	uxth	r0, r0
   35c50:	cmp	r0, #0
   35c54:	beq	35cb0 <__assert_fail@plt+0x234d8>
   35c58:	add	r2, ip, #1
   35c5c:	sub	r3, r3, #48	; 0x30
   35c60:	str	r3, [r1]
   35c64:	str	r2, [r8]
   35c68:	ldrb	r5, [ip, #1]
   35c6c:	lsl	r2, r5, #1
   35c70:	ldrh	r2, [r4, r2]
   35c74:	tst	r2, #4
   35c78:	beq	35cac <__assert_fail@plt+0x234d4>
   35c7c:	add	ip, ip, #2
   35c80:	ldrb	r2, [ip], #1
   35c84:	add	r3, r3, r3, lsl #2
   35c88:	add	r3, r5, r3, lsl #1
   35c8c:	lsl	r6, r2, #1
   35c90:	mov	r5, r2
   35c94:	sub	r3, r3, #48	; 0x30
   35c98:	ldrh	r6, [r4, r6]
   35c9c:	tst	r6, #4
   35ca0:	bne	35c80 <__assert_fail@plt+0x234a8>
   35ca4:	cmp	r2, #95	; 0x5f
   35ca8:	beq	35cb8 <__assert_fail@plt+0x234e0>
   35cac:	mov	r0, #1
   35cb0:	pop	{r4, r5, r6, r7, r8}
   35cb4:	bx	lr
   35cb8:	str	ip, [r8]
   35cbc:	mov	r0, #1
   35cc0:	str	r3, [r1]
   35cc4:	pop	{r4, r5, r6, r7, r8}
   35cc8:	bx	lr
   35ccc:	movw	r2, #168	; 0xa8
   35cd0:	movt	r2, #7
   35cd4:	push	{r4, r5, r6, lr}
   35cd8:	mov	r5, r1
   35cdc:	sub	sp, sp, #8
   35ce0:	ldr	r4, [r2]
   35ce4:	mov	r6, r0
   35ce8:	mov	r2, #5
   35cec:	movw	r1, #39456	; 0x9a20
   35cf0:	mov	r0, #0
   35cf4:	movt	r1, #5
   35cf8:	bl	12298 <dcgettext@plt>
   35cfc:	str	r6, [sp]
   35d00:	mov	r3, r5
   35d04:	mov	r1, #1
   35d08:	mov	r2, r0
   35d0c:	mov	r0, r4
   35d10:	bl	125d4 <__fprintf_chk@plt>
   35d14:	add	sp, sp, #8
   35d18:	pop	{r4, r5, r6, pc}
   35d1c:	movw	r2, #168	; 0xa8
   35d20:	movt	r2, #7
   35d24:	push	{r4, r5, r6, lr}
   35d28:	movw	r1, #39476	; 0x9a34
   35d2c:	ldr	r5, [r2]
   35d30:	mov	r4, r0
   35d34:	movt	r1, #5
   35d38:	mov	r2, #5
   35d3c:	mov	r0, #0
   35d40:	bl	12298 <dcgettext@plt>
   35d44:	mov	r3, r4
   35d48:	mov	r1, #1
   35d4c:	mov	r2, r0
   35d50:	mov	r0, r5
   35d54:	pop	{r4, r5, r6, lr}
   35d58:	b	125d4 <__fprintf_chk@plt>
   35d5c:	movw	r2, #168	; 0xa8
   35d60:	movt	r2, #7
   35d64:	push	{r4, r5, r6, lr}
   35d68:	movw	r1, #39500	; 0x9a4c
   35d6c:	ldr	r5, [r2]
   35d70:	mov	r4, r0
   35d74:	movt	r1, #5
   35d78:	mov	r2, #5
   35d7c:	mov	r0, #0
   35d80:	bl	12298 <dcgettext@plt>
   35d84:	mov	r3, r4
   35d88:	mov	r1, #1
   35d8c:	mov	r2, r0
   35d90:	mov	r0, r5
   35d94:	pop	{r4, r5, r6, lr}
   35d98:	b	125d4 <__fprintf_chk@plt>
   35d9c:	push	{r4, r5, r6, lr}
   35da0:	mov	r4, r0
   35da4:	ldr	r3, [r0, #20]
   35da8:	mov	r5, r1
   35dac:	ldr	r0, [r0, #24]
   35db0:	mov	r6, r2
   35db4:	cmp	r3, r0
   35db8:	bcs	35ddc <__assert_fail@plt+0x23604>
   35dbc:	ldr	ip, [r4, #16]
   35dc0:	add	r2, ip, r3, lsl #3
   35dc4:	str	r5, [ip, r3, lsl #3]
   35dc8:	mov	r0, #1
   35dcc:	add	r3, r3, #1
   35dd0:	str	r6, [r2, #4]
   35dd4:	str	r3, [r4, #20]
   35dd8:	pop	{r4, r5, r6, pc}
   35ddc:	add	r1, r0, #10
   35de0:	ldr	r0, [r4, #16]
   35de4:	str	r1, [r4, #24]
   35de8:	lsl	r1, r1, #3
   35dec:	bl	122c8 <xrealloc@plt>
   35df0:	ldr	r3, [r4, #20]
   35df4:	mov	ip, r0
   35df8:	str	r0, [r4, #16]
   35dfc:	b	35dc0 <__assert_fail@plt+0x235e8>
   35e00:	push	{r3, r4, r5, lr}
   35e04:	mov	r4, r1
   35e08:	mov	r5, r0
   35e0c:	add	r0, r1, #1
   35e10:	bl	12358 <xmalloc@plt>
   35e14:	mov	r2, r4
   35e18:	mov	r1, r5
   35e1c:	bl	1222c <memcpy@plt>
   35e20:	mov	r2, #0
   35e24:	mov	r3, r0
   35e28:	strb	r2, [r3, r4]
   35e2c:	pop	{r3, r4, r5, pc}
   35e30:	push	{r4, r5, r6, lr}
   35e34:	cmp	r1, #0
   35e38:	ldr	r4, [r0]
   35e3c:	mov	r5, r0
   35e40:	movne	r3, #0
   35e44:	strne	r3, [r1]
   35e48:	ldrb	r3, [r4]
   35e4c:	cmp	r3, #0
   35e50:	bne	35e60 <__assert_fail@plt+0x23688>
   35e54:	mov	r0, #0
   35e58:	mov	r1, #0
   35e5c:	pop	{r4, r5, r6, pc}
   35e60:	bl	1255c <__errno_location@plt>
   35e64:	mov	r2, #0
   35e68:	mov	r1, r5
   35e6c:	str	r2, [r0]
   35e70:	mov	r6, r0
   35e74:	mov	r0, r4
   35e78:	bl	124d8 <strtoul@plt>
   35e7c:	cmn	r0, #1
   35e80:	beq	35e98 <__assert_fail@plt+0x236c0>
   35e84:	ldrb	r3, [r4]
   35e88:	cmp	r3, #45	; 0x2d
   35e8c:	asreq	r1, r0, #31
   35e90:	movne	r1, #0
   35e94:	pop	{r4, r5, r6, pc}
   35e98:	ldr	r3, [r6]
   35e9c:	cmp	r3, #0
   35ea0:	beq	35e84 <__assert_fail@plt+0x236ac>
   35ea4:	ldrb	r3, [r4]
   35ea8:	cmp	r3, #43	; 0x2b
   35eac:	beq	35f0c <__assert_fail@plt+0x23734>
   35eb0:	cmp	r3, #45	; 0x2d
   35eb4:	beq	35f0c <__assert_fail@plt+0x23734>
   35eb8:	cmp	r3, #48	; 0x30
   35ebc:	movne	ip, #10
   35ec0:	beq	35f18 <__assert_fail@plt+0x23740>
   35ec4:	movw	r0, #65192	; 0xfea8
   35ec8:	movt	r0, #6
   35ecc:	b	35ed4 <__assert_fail@plt+0x236fc>
   35ed0:	ldrb	r3, [r4, #1]!
   35ed4:	lsl	r2, r3, #1
   35ed8:	sub	r1, r3, #48	; 0x30
   35edc:	ldrh	r2, [r0, r2]
   35ee0:	tst	r2, #4
   35ee4:	bne	35f00 <__assert_fail@plt+0x23728>
   35ee8:	tst	r2, #128	; 0x80
   35eec:	sub	r1, r3, #65	; 0x41
   35ef0:	bne	35f00 <__assert_fail@plt+0x23728>
   35ef4:	tst	r2, #8
   35ef8:	sub	r1, r3, #97	; 0x61
   35efc:	beq	35e54 <__assert_fail@plt+0x2367c>
   35f00:	cmp	ip, r1
   35f04:	bgt	35ed0 <__assert_fail@plt+0x236f8>
   35f08:	b	35e54 <__assert_fail@plt+0x2367c>
   35f0c:	ldrb	r3, [r4, #1]
   35f10:	add	r4, r4, #1
   35f14:	b	35eb8 <__assert_fail@plt+0x236e0>
   35f18:	ldrb	r3, [r4, #1]
   35f1c:	and	r2, r3, #223	; 0xdf
   35f20:	cmp	r2, #88	; 0x58
   35f24:	addne	r4, r4, #1
   35f28:	ldrbeq	r3, [r4, #2]
   35f2c:	moveq	ip, #16
   35f30:	addeq	r4, r4, #2
   35f34:	movne	ip, #8
   35f38:	b	35ec4 <__assert_fail@plt+0x236ec>
   35f3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35f40:	mov	r6, r1
   35f44:	ldr	r7, [sp, #32]
   35f48:	mov	r9, r2
   35f4c:	mov	sl, r3
   35f50:	ldrd	r4, [sp, #40]	; 0x28
   35f54:	sub	ip, r7, #1
   35f58:	cmp	ip, #1
   35f5c:	bls	35fb8 <__assert_fail@plt+0x237e0>
   35f60:	ldr	r3, [r1, #68]	; 0x44
   35f64:	cmp	r3, #0
   35f68:	beq	35fb8 <__assert_fail@plt+0x237e0>
   35f6c:	ldr	r3, [r1, #48]	; 0x30
   35f70:	cmp	r3, #0
   35f74:	bne	35f84 <__assert_fail@plt+0x237ac>
   35f78:	ldr	r3, [r1, #52]	; 0x34
   35f7c:	cmp	r3, #0
   35f80:	bne	35fb8 <__assert_fail@plt+0x237e0>
   35f84:	mov	r0, #24
   35f88:	bl	12358 <xmalloc@plt>
   35f8c:	mov	r1, #0
   35f90:	mov	r2, #24
   35f94:	mov	r8, r0
   35f98:	bl	12580 <memset@plt>
   35f9c:	ldr	r3, [r6, #84]	; 0x54
   35fa0:	mov	r0, #1
   35fa4:	str	r7, [r8, #12]
   35fa8:	strd	r4, [r8, #16]
   35fac:	stm	r8, {r3, r9, sl}
   35fb0:	str	r8, [r6, #84]	; 0x54
   35fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35fb8:	strd	r4, [sp, #32]
   35fbc:	mov	r1, r9
   35fc0:	mov	r2, sl
   35fc4:	mov	r3, r7
   35fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   35fcc:	b	34ad4 <__assert_fail@plt+0x222fc>
   35fd0:	push	{r4, r5, r6, r7, r8, lr}
   35fd4:	mov	r8, r1
   35fd8:	ldr	r6, [r1]
   35fdc:	sub	sp, sp, #8
   35fe0:	mov	r7, r0
   35fe4:	cmp	r6, #0
   35fe8:	bne	36000 <__assert_fail@plt+0x23828>
   35fec:	b	36034 <__assert_fail@plt+0x2385c>
   35ff0:	ldr	r6, [r6]
   35ff4:	bl	121f0 <free@plt>
   35ff8:	cmp	r6, #0
   35ffc:	beq	36034 <__assert_fail@plt+0x2385c>
   36000:	ldrd	r4, [r6, #16]
   36004:	mov	r0, r7
   36008:	ldr	r3, [r6, #12]
   3600c:	ldr	r1, [r6, #4]
   36010:	ldr	r2, [r6, #8]
   36014:	strd	r4, [sp]
   36018:	bl	34ad4 <__assert_fail@plt+0x222fc>
   3601c:	subs	r3, r0, #0
   36020:	mov	r0, r6
   36024:	bne	35ff0 <__assert_fail@plt+0x23818>
   36028:	mov	r0, r3
   3602c:	add	sp, sp, #8
   36030:	pop	{r4, r5, r6, r7, r8, pc}
   36034:	mov	r3, #0
   36038:	mov	r0, #1
   3603c:	str	r3, [r8]
   36040:	add	sp, sp, #8
   36044:	pop	{r4, r5, r6, r7, r8, pc}
   36048:	push	{r3, r4, r5, r6, r7, lr}
   3604c:	ldm	r2, {r4, r7}
   36050:	cmp	r4, #0
   36054:	blt	360d8 <__assert_fail@plt+0x23900>
   36058:	ldr	r3, [r0]
   3605c:	cmp	r4, r3
   36060:	bcs	360d8 <__assert_fail@plt+0x23900>
   36064:	cmp	r7, #0
   36068:	blt	36134 <__assert_fail@plt+0x2395c>
   3606c:	ldr	r6, [r1]
   36070:	cmp	r7, #15
   36074:	add	r6, r6, r4, lsl #2
   36078:	ble	360a0 <__assert_fail@plt+0x238c8>
   3607c:	mov	r5, r7
   36080:	ldr	r4, [r6]
   36084:	sub	r5, r5, #16
   36088:	cmp	r4, #0
   3608c:	beq	360b8 <__assert_fail@plt+0x238e0>
   36090:	cmp	r5, #15
   36094:	mov	r6, r4
   36098:	bgt	36080 <__assert_fail@plt+0x238a8>
   3609c:	and	r7, r7, #15
   360a0:	ldr	r4, [r6]
   360a4:	cmp	r4, #0
   360a8:	beq	36114 <__assert_fail@plt+0x2393c>
   360ac:	add	r7, r4, r7, lsl #2
   360b0:	add	r0, r7, #4
   360b4:	pop	{r3, r4, r5, r6, r7, pc}
   360b8:	mov	r0, #68	; 0x44
   360bc:	bl	12358 <xmalloc@plt>
   360c0:	mov	r1, r4
   360c4:	mov	r2, #68	; 0x44
   360c8:	str	r0, [r6]
   360cc:	bl	12580 <memset@plt>
   360d0:	ldr	r4, [r6]
   360d4:	b	36090 <__assert_fail@plt+0x238b8>
   360d8:	movw	r3, #168	; 0xa8
   360dc:	movt	r3, #7
   360e0:	mov	r2, #5
   360e4:	movw	r1, #39516	; 0x9a5c
   360e8:	mov	r0, #0
   360ec:	movt	r1, #5
   360f0:	ldr	r5, [r3]
   360f4:	bl	12298 <dcgettext@plt>
   360f8:	mov	r3, r4
   360fc:	mov	r1, #1
   36100:	mov	r2, r0
   36104:	mov	r0, r5
   36108:	bl	125d4 <__fprintf_chk@plt>
   3610c:	mov	r0, #0
   36110:	pop	{r3, r4, r5, r6, r7, pc}
   36114:	mov	r0, #68	; 0x44
   36118:	bl	12358 <xmalloc@plt>
   3611c:	mov	r1, r4
   36120:	mov	r2, #68	; 0x44
   36124:	str	r0, [r6]
   36128:	bl	12580 <memset@plt>
   3612c:	ldr	r4, [r6]
   36130:	b	360ac <__assert_fail@plt+0x238d4>
   36134:	movw	r3, #168	; 0xa8
   36138:	movt	r3, #7
   3613c:	mov	r2, #5
   36140:	movw	r1, #39552	; 0x9a80
   36144:	mov	r0, #0
   36148:	movt	r1, #5
   3614c:	ldr	r4, [r3]
   36150:	bl	12298 <dcgettext@plt>
   36154:	mov	r3, r7
   36158:	mov	r1, #1
   3615c:	mov	r2, r0
   36160:	mov	r0, r4
   36164:	bl	125d4 <__fprintf_chk@plt>
   36168:	mov	r0, #0
   3616c:	pop	{r3, r4, r5, r6, r7, pc}
   36170:	push	{r4, r5, r6, lr}
   36174:	mov	r6, r0
   36178:	ldr	r4, [r2]
   3617c:	cmp	r4, #0
   36180:	bne	36190 <__assert_fail@plt+0x239b8>
   36184:	ldr	r5, [r2, #4]
   36188:	cmp	r5, #0
   3618c:	blt	361c4 <__assert_fail@plt+0x239ec>
   36190:	add	r0, r1, #88	; 0x58
   36194:	add	r1, r1, #92	; 0x5c
   36198:	bl	36048 <__assert_fail@plt+0x23870>
   3619c:	subs	r1, r0, #0
   361a0:	beq	3664c <__assert_fail@plt+0x23e74>
   361a4:	ldr	r2, [r1]
   361a8:	cmp	r2, #0
   361ac:	beq	361b8 <__assert_fail@plt+0x239e0>
   361b0:	mov	r0, r2
   361b4:	pop	{r4, r5, r6, pc}
   361b8:	mov	r0, r6
   361bc:	pop	{r4, r5, r6, lr}
   361c0:	b	34bc0 <__assert_fail@plt+0x223e8>
   361c4:	add	r3, r5, #34	; 0x22
   361c8:	cmp	r3, #33	; 0x21
   361cc:	bhi	36654 <__assert_fail@plt+0x23e7c>
   361d0:	rsb	r5, r5, #0
   361d4:	add	r4, r1, r5, lsl #2
   361d8:	ldr	r0, [r4, #96]	; 0x60
   361dc:	cmp	r0, #0
   361e0:	popne	{r4, r5, r6, pc}
   361e4:	sub	r5, r5, #2
   361e8:	cmp	r5, #32
   361ec:	ldrls	pc, [pc, r5, lsl #2]
   361f0:	b	36398 <__assert_fail@plt+0x23bc0>
   361f4:	andeq	r6, r3, r8, ror r3
   361f8:	andeq	r6, r3, r8, asr r3
   361fc:	andeq	r6, r3, r8, lsr r3
   36200:	andeq	r6, r3, r8, lsl r3
   36204:	strdeq	r6, [r3], -r8
   36208:	ldrdeq	r6, [r3], -r8
   3620c:			; <UNDEFINED> instruction: 0x000362b8
   36210:	andeq	r6, r3, r8, ror r2
   36214:	andeq	r6, r3, r8, lsl #5
   36218:	andeq	r6, r3, r4, lsr r6
   3621c:	andeq	r6, r3, r8, lsl r6
   36220:	strdeq	r6, [r3], -ip
   36224:	andeq	r6, r3, r0, ror #11
   36228:	andeq	r6, r3, r0, asr #11
   3622c:	andeq	r6, r3, r4, lsr #11
   36230:	andeq	r6, r3, r8, lsl #11
   36234:	andeq	r6, r3, ip, ror #10
   36238:	andeq	r6, r3, ip, asr r5
   3623c:	andeq	r6, r3, ip, lsr r5
   36240:	andeq	r6, r3, r0, lsr #10
   36244:	andeq	r6, r3, r4, lsl #10
   36248:	andeq	r6, r3, r8, ror #9
   3624c:	andeq	r6, r3, ip, asr #9
   36250:			; <UNDEFINED> instruction: 0x000364b0
   36254:	muleq	r3, r4, r4
   36258:	andeq	r6, r3, r4, ror r4
   3625c:	andeq	r6, r3, r4, asr r4
   36260:	andeq	r6, r3, r4, lsr r4
   36264:	andeq	r6, r3, r4, lsl r4
   36268:	strdeq	r6, [r3], -r4
   3626c:	ldrdeq	r6, [r3], -r4
   36270:			; <UNDEFINED> instruction: 0x000363b8
   36274:	muleq	r3, r0, r6
   36278:	mov	r0, r6
   3627c:	mov	r1, #4
   36280:	mov	r2, #1
   36284:	bl	34c24 <__assert_fail@plt+0x2244c>
   36288:	mov	r1, #4
   3628c:	mov	r2, #1
   36290:	mov	r0, r6
   36294:	bl	34c24 <__assert_fail@plt+0x2244c>
   36298:	movw	r1, #39672	; 0x9af8
   3629c:	movt	r1, #5
   362a0:	mov	r2, r0
   362a4:	mov	r0, r6
   362a8:	bl	352d4 <__assert_fail@plt+0x22afc>
   362ac:	mov	r3, r0
   362b0:	str	r3, [r4, #96]	; 0x60
   362b4:	pop	{r4, r5, r6, pc}
   362b8:	mov	r1, #4
   362bc:	mov	r2, #1
   362c0:	mov	r0, r6
   362c4:	bl	34c24 <__assert_fail@plt+0x2244c>
   362c8:	movw	r1, #39656	; 0x9ae8
   362cc:	movt	r1, #5
   362d0:	mov	r2, r0
   362d4:	b	362a4 <__assert_fail@plt+0x23acc>
   362d8:	mov	r1, #2
   362dc:	mov	r2, #1
   362e0:	mov	r0, r6
   362e4:	bl	34c24 <__assert_fail@plt+0x2244c>
   362e8:	movw	r1, #39640	; 0x9ad8
   362ec:	movt	r1, #5
   362f0:	mov	r2, r0
   362f4:	b	362a4 <__assert_fail@plt+0x23acc>
   362f8:	mov	r1, #1
   362fc:	mov	r2, #0
   36300:	mov	r0, r6
   36304:	bl	34c24 <__assert_fail@plt+0x2244c>
   36308:	movw	r1, #39628	; 0x9acc
   3630c:	movt	r1, #5
   36310:	mov	r2, r0
   36314:	b	362a4 <__assert_fail@plt+0x23acc>
   36318:	mov	r1, #1
   3631c:	mov	r0, r6
   36320:	mov	r2, r1
   36324:	bl	34c24 <__assert_fail@plt+0x2244c>
   36328:	movw	r1, #39612	; 0x9abc
   3632c:	movt	r1, #5
   36330:	mov	r2, r0
   36334:	b	362a4 <__assert_fail@plt+0x23acc>
   36338:	mov	r1, #4
   3633c:	mov	r2, #0
   36340:	mov	r0, r6
   36344:	bl	34c24 <__assert_fail@plt+0x2244c>
   36348:	movw	r1, #42228	; 0xa4f4
   3634c:	movt	r1, #5
   36350:	mov	r2, r0
   36354:	b	362a4 <__assert_fail@plt+0x23acc>
   36358:	mov	r1, #2
   3635c:	mov	r2, #0
   36360:	mov	r0, r6
   36364:	bl	34c24 <__assert_fail@plt+0x2244c>
   36368:	movw	r1, #39604	; 0x9ab4
   3636c:	movt	r1, #5
   36370:	mov	r2, r0
   36374:	b	362a4 <__assert_fail@plt+0x23acc>
   36378:	mov	r1, #1
   3637c:	mov	r2, #0
   36380:	mov	r0, r6
   36384:	bl	34c24 <__assert_fail@plt+0x2244c>
   36388:	movw	r1, #55848	; 0xda28
   3638c:	movt	r1, #5
   36390:	mov	r2, r0
   36394:	b	362a4 <__assert_fail@plt+0x23acc>
   36398:	mov	r1, #4
   3639c:	mov	r2, #0
   363a0:	mov	r0, r6
   363a4:	bl	34c24 <__assert_fail@plt+0x2244c>
   363a8:	movw	r1, #39600	; 0x9ab0
   363ac:	movt	r1, #5
   363b0:	mov	r2, r0
   363b4:	b	362a4 <__assert_fail@plt+0x23acc>
   363b8:	mov	r1, #8
   363bc:	mov	r0, r6
   363c0:	bl	34c48 <__assert_fail@plt+0x22470>
   363c4:	movw	r1, #39892	; 0x9bd4
   363c8:	movt	r1, #5
   363cc:	mov	r2, r0
   363d0:	b	362a4 <__assert_fail@plt+0x23acc>
   363d4:	mov	r1, #8
   363d8:	mov	r2, #1
   363dc:	mov	r0, r6
   363e0:	bl	34c24 <__assert_fail@plt+0x2244c>
   363e4:	movw	r1, #39872	; 0x9bc0
   363e8:	movt	r1, #5
   363ec:	mov	r2, r0
   363f0:	b	362a4 <__assert_fail@plt+0x23acc>
   363f4:	mov	r1, #8
   363f8:	mov	r2, #0
   363fc:	mov	r0, r6
   36400:	bl	34c24 <__assert_fail@plt+0x2244c>
   36404:	movw	r1, #39860	; 0x9bb4
   36408:	movt	r1, #5
   3640c:	mov	r2, r0
   36410:	b	362a4 <__assert_fail@plt+0x23acc>
   36414:	mov	r1, #2
   36418:	mov	r2, #0
   3641c:	mov	r0, r6
   36420:	bl	34c24 <__assert_fail@plt+0x2244c>
   36424:	movw	r1, #39852	; 0x9bac
   36428:	movt	r1, #5
   3642c:	mov	r2, r0
   36430:	b	362a4 <__assert_fail@plt+0x23acc>
   36434:	mov	r1, #4
   36438:	mov	r2, #0
   3643c:	mov	r0, r6
   36440:	bl	34c24 <__assert_fail@plt+0x2244c>
   36444:	movw	r1, #39840	; 0x9ba0
   36448:	movt	r1, #5
   3644c:	mov	r2, r0
   36450:	b	362a4 <__assert_fail@plt+0x23acc>
   36454:	mov	r1, #2
   36458:	mov	r2, #0
   3645c:	mov	r0, r6
   36460:	bl	34c24 <__assert_fail@plt+0x2244c>
   36464:	movw	r1, #39828	; 0x9b94
   36468:	movt	r1, #5
   3646c:	mov	r2, r0
   36470:	b	362a4 <__assert_fail@plt+0x23acc>
   36474:	mov	r1, #1
   36478:	mov	r2, #0
   3647c:	mov	r0, r6
   36480:	bl	34c24 <__assert_fail@plt+0x2244c>
   36484:	movw	r1, #39816	; 0x9b88
   36488:	movt	r1, #5
   3648c:	mov	r2, r0
   36490:	b	362a4 <__assert_fail@plt+0x23acc>
   36494:	mov	r1, #16
   36498:	mov	r0, r6
   3649c:	bl	34c50 <__assert_fail@plt+0x22478>
   364a0:	movw	r1, #39800	; 0x9b78
   364a4:	movt	r1, #5
   364a8:	mov	r2, r0
   364ac:	b	362a4 <__assert_fail@plt+0x23acc>
   364b0:	mov	r1, #8
   364b4:	mov	r0, r6
   364b8:	bl	34c50 <__assert_fail@plt+0x22478>
   364bc:	movw	r1, #39792	; 0x9b70
   364c0:	movt	r1, #5
   364c4:	mov	r2, r0
   364c8:	b	362a4 <__assert_fail@plt+0x23acc>
   364cc:	mov	r1, #4
   364d0:	mov	r0, r6
   364d4:	bl	34c48 <__assert_fail@plt+0x22470>
   364d8:	movw	r1, #39784	; 0x9b68
   364dc:	movt	r1, #5
   364e0:	mov	r2, r0
   364e4:	b	362a4 <__assert_fail@plt+0x23acc>
   364e8:	mov	r1, #4
   364ec:	mov	r0, r6
   364f0:	bl	34c48 <__assert_fail@plt+0x22470>
   364f4:	movw	r1, #39772	; 0x9b5c
   364f8:	movt	r1, #5
   364fc:	mov	r2, r0
   36500:	b	362a4 <__assert_fail@plt+0x23acc>
   36504:	mov	r1, #2
   36508:	mov	r0, r6
   3650c:	bl	34c48 <__assert_fail@plt+0x22470>
   36510:	movw	r1, #39760	; 0x9b50
   36514:	movt	r1, #5
   36518:	mov	r2, r0
   3651c:	b	362a4 <__assert_fail@plt+0x23acc>
   36520:	mov	r1, #1
   36524:	mov	r0, r6
   36528:	bl	34c48 <__assert_fail@plt+0x22470>
   3652c:	movw	r1, #39748	; 0x9b44
   36530:	movt	r1, #5
   36534:	mov	r2, r0
   36538:	b	362a4 <__assert_fail@plt+0x23acc>
   3653c:	mov	r1, #1
   36540:	mov	r0, r6
   36544:	mov	r2, r1
   36548:	bl	34c24 <__assert_fail@plt+0x2244c>
   3654c:	movw	r1, #39736	; 0x9b38
   36550:	movt	r1, #5
   36554:	mov	r2, r0
   36558:	b	362a4 <__assert_fail@plt+0x23acc>
   3655c:	movw	r1, #39588	; 0x9aa4
   36560:	mov	r2, #0
   36564:	movt	r1, #5
   36568:	b	362a4 <__assert_fail@plt+0x23acc>
   3656c:	mov	r1, #8
   36570:	mov	r0, r6
   36574:	bl	34c40 <__assert_fail@plt+0x22468>
   36578:	movw	r1, #39728	; 0x9b30
   3657c:	movt	r1, #5
   36580:	mov	r2, r0
   36584:	b	362a4 <__assert_fail@plt+0x23acc>
   36588:	mov	r1, #4
   3658c:	mov	r0, r6
   36590:	bl	34c40 <__assert_fail@plt+0x22468>
   36594:	movw	r1, #39716	; 0x9b24
   36598:	movt	r1, #5
   3659c:	mov	r2, r0
   365a0:	b	362a4 <__assert_fail@plt+0x23acc>
   365a4:	mov	r1, #4
   365a8:	mov	r0, r6
   365ac:	bl	34c48 <__assert_fail@plt+0x22470>
   365b0:	movw	r1, #39708	; 0x9b1c
   365b4:	movt	r1, #5
   365b8:	mov	r2, r0
   365bc:	b	362a4 <__assert_fail@plt+0x23acc>
   365c0:	mov	r1, #4
   365c4:	mov	r2, #0
   365c8:	mov	r0, r6
   365cc:	bl	34c24 <__assert_fail@plt+0x2244c>
   365d0:	movw	r1, #39700	; 0x9b14
   365d4:	movt	r1, #5
   365d8:	mov	r2, r0
   365dc:	b	362a4 <__assert_fail@plt+0x23acc>
   365e0:	mov	r1, #8
   365e4:	mov	r0, r6
   365e8:	bl	34c40 <__assert_fail@plt+0x22468>
   365ec:	movw	r1, #39688	; 0x9b08
   365f0:	movt	r1, #5
   365f4:	mov	r2, r0
   365f8:	b	362a4 <__assert_fail@plt+0x23acc>
   365fc:	mov	r1, #8
   36600:	mov	r0, r6
   36604:	bl	34c40 <__assert_fail@plt+0x22468>
   36608:	movw	r1, #37212	; 0x915c
   3660c:	movt	r1, #5
   36610:	mov	r2, r0
   36614:	b	362a4 <__assert_fail@plt+0x23acc>
   36618:	mov	r1, #4
   3661c:	mov	r0, r6
   36620:	bl	34c40 <__assert_fail@plt+0x22468>
   36624:	movw	r1, #37204	; 0x9154
   36628:	movt	r1, #5
   3662c:	mov	r2, r0
   36630:	b	362a4 <__assert_fail@plt+0x23acc>
   36634:	mov	r0, r6
   36638:	bl	34c18 <__assert_fail@plt+0x22440>
   3663c:	movw	r1, #37032	; 0x90a8
   36640:	movt	r1, #5
   36644:	mov	r2, r0
   36648:	b	362a4 <__assert_fail@plt+0x23acc>
   3664c:	mov	r0, r1
   36650:	pop	{r4, r5, r6, pc}
   36654:	movw	r3, #168	; 0xa8
   36658:	movt	r3, #7
   3665c:	mov	r0, r4
   36660:	mov	r2, #5
   36664:	movw	r1, #39916	; 0x9bec
   36668:	movt	r1, #5
   3666c:	ldr	r6, [r3]
   36670:	bl	12298 <dcgettext@plt>
   36674:	mov	r3, r5
   36678:	mov	r1, #1
   3667c:	mov	r2, r0
   36680:	mov	r0, r6
   36684:	bl	125d4 <__fprintf_chk@plt>
   36688:	mov	r0, r4
   3668c:	pop	{r4, r5, r6, pc}
   36690:	mov	r1, #8
   36694:	mov	r2, #0
   36698:	mov	r0, r6
   3669c:	bl	34c24 <__assert_fail@plt+0x2244c>
   366a0:	movw	r1, #39904	; 0x9be0
   366a4:	movt	r1, #5
   366a8:	mov	r2, r0
   366ac:	b	362a4 <__assert_fail@plt+0x23acc>
   366b0:	push	{r4, r5, r6, r7, r8, lr}
   366b4:	mov	r7, r0
   366b8:	mov	r8, r1
   366bc:	mov	r0, r2
   366c0:	mov	r1, r3
   366c4:	bl	35e00 <__assert_fail@plt+0x23628>
   366c8:	mov	r2, #0
   366cc:	mov	r6, r0
   366d0:	mov	r0, r7
   366d4:	mov	r1, r6
   366d8:	bl	3575c <__assert_fail@plt+0x22f84>
   366dc:	subs	r4, r0, #0
   366e0:	beq	366f4 <__assert_fail@plt+0x23f1c>
   366e4:	mov	r0, r6
   366e8:	bl	121f0 <free@plt>
   366ec:	mov	r0, r4
   366f0:	pop	{r4, r5, r6, r7, r8, pc}
   366f4:	ldr	r4, [r8]
   366f8:	cmp	r4, #0
   366fc:	beq	36750 <__assert_fail@plt+0x23f78>
   36700:	ldrb	r5, [r6]
   36704:	b	36714 <__assert_fail@plt+0x23f3c>
   36708:	ldr	r4, [r4]
   3670c:	cmp	r4, #0
   36710:	beq	36750 <__assert_fail@plt+0x23f78>
   36714:	ldr	r0, [r4, #4]
   36718:	ldrb	ip, [r0]
   3671c:	cmp	ip, r5
   36720:	bne	36708 <__assert_fail@plt+0x23f30>
   36724:	mov	r1, r6
   36728:	bl	12178 <strcmp@plt>
   3672c:	cmp	r0, #0
   36730:	bne	36708 <__assert_fail@plt+0x23f30>
   36734:	ldr	r3, [r4, #8]
   36738:	mov	r0, r6
   3673c:	cmp	r3, #0
   36740:	ldreq	r3, [sp, #24]
   36744:	streq	r3, [r4, #8]
   36748:	bl	121f0 <free@plt>
   3674c:	b	3679c <__assert_fail@plt+0x23fc4>
   36750:	mov	r0, #20
   36754:	bl	12358 <xmalloc@plt>
   36758:	mov	r1, #0
   3675c:	mov	r2, #20
   36760:	mov	r4, r0
   36764:	bl	12580 <memset@plt>
   36768:	ldr	r3, [r8]
   3676c:	mov	r1, r4
   36770:	ldr	ip, [sp, #24]
   36774:	mov	r0, r7
   36778:	str	r6, [r4, #4]
   3677c:	mov	r2, r6
   36780:	str	r3, [r4]
   36784:	mov	r3, #0
   36788:	str	ip, [r4, #8]
   3678c:	str	r3, [r1, #12]!
   36790:	bl	34bc0 <__assert_fail@plt+0x223e8>
   36794:	str	r0, [r4, #16]
   36798:	str	r4, [r8]
   3679c:	ldr	r0, [r4, #16]
   367a0:	pop	{r4, r5, r6, r7, r8, pc}
   367a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   367a8:	sub	sp, sp, #16
   367ac:	movw	r6, #65176	; 0xfe98
   367b0:	movt	r6, #6
   367b4:	ldr	r7, [sp, #48]	; 0x30
   367b8:	mov	r5, r2
   367bc:	mov	r4, r0
   367c0:	ldr	r0, [r6]
   367c4:	cmp	r7, #0
   367c8:	mov	r9, r1
   367cc:	movne	r2, #0
   367d0:	strne	r2, [r7]
   367d4:	ldr	r2, [r5]
   367d8:	str	r0, [sp, #12]
   367dc:	cmp	r2, #41	; 0x29
   367e0:	ldrls	pc, [pc, r2, lsl #2]
   367e4:	b	36bac <__assert_fail@plt+0x243d4>
   367e8:	andeq	r6, r3, ip, lsl fp
   367ec:	muleq	r3, r8, sl
   367f0:	andeq	r6, r3, ip, lsr #23
   367f4:	andeq	r6, r3, ip, lsr #23
   367f8:	andeq	r6, r3, ip, asr #21
   367fc:	andeq	r6, r3, ip, lsr #23
   36800:	andeq	r6, r3, ip, lsr #23
   36804:	andeq	r6, r3, ip, lsr #23
   36808:	andeq	r6, r3, ip, lsr #23
   3680c:	andeq	r6, r3, ip, lsr #23
   36810:	andeq	r6, r3, ip, lsr #23
   36814:	andeq	r6, r3, ip, lsr #23
   36818:	andeq	r6, r3, ip, lsr #23
   3681c:	andeq	r6, r3, ip, lsr #23
   36820:	andeq	r6, r3, ip, lsr #23
   36824:	andeq	r6, r3, ip, lsr #23
   36828:	andeq	r6, r3, ip, lsr #23
   3682c:	andeq	r6, r3, ip, lsr #23
   36830:	andeq	r6, r3, ip, lsr #23
   36834:	andeq	r6, r3, ip, lsr #23
   36838:	andeq	r6, r3, ip, lsr #23
   3683c:	andeq	r6, r3, ip, lsr #23
   36840:	andeq	r6, r3, ip, lsr #23
   36844:	andeq	r6, r3, ip, lsr #23
   36848:	muleq	r3, r0, r8
   3684c:	andeq	r6, r3, r4, asr #17
   36850:	andeq	r6, r3, r4, asr #17
   36854:	andeq	r6, r3, r4, asr #17
   36858:	andeq	r6, r3, ip, lsr #23
   3685c:	andeq	r6, r3, ip, lsr #23
   36860:	andeq	r6, r3, ip, lsr #23
   36864:	andeq	r6, r3, ip, lsr #23
   36868:	andeq	r6, r3, ip, lsr #23
   3686c:	andeq	r6, r3, ip, lsr #23
   36870:	andeq	r6, r3, r4, asr #17
   36874:	andeq	r6, r3, r4, asr #17
   36878:	andeq	r6, r3, ip, lsr #23
   3687c:	andeq	r6, r3, ip, lsr #23
   36880:	andeq	r6, r3, ip, lsr #23
   36884:	andeq	r6, r3, r0, lsr #18
   36888:	andeq	r6, r3, ip, lsr #23
   3688c:	andeq	r6, r3, r0, asr #20
   36890:	ldr	r2, [r5, #4]
   36894:	mov	ip, #0
   36898:	ldr	r3, [r5, #8]
   3689c:	mov	r0, r4
   368a0:	add	r1, r9, #232	; 0xe8
   368a4:	str	ip, [sp]
   368a8:	bl	366b0 <__assert_fail@plt+0x23ed8>
   368ac:	ldr	ip, [sp, #12]
   368b0:	ldr	r3, [r6]
   368b4:	cmp	ip, r3
   368b8:	bne	36eac <__assert_fail@plt+0x246d4>
   368bc:	add	sp, sp, #16
   368c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   368c4:	ldr	r2, [r5, #4]
   368c8:	mov	r3, #0
   368cc:	mov	r0, r4
   368d0:	str	r3, [sp]
   368d4:	bl	367a4 <__assert_fail@plt+0x23fcc>
   368d8:	subs	r1, r0, #0
   368dc:	beq	36c0c <__assert_fail@plt+0x24434>
   368e0:	ldr	r3, [r5]
   368e4:	sub	r3, r3, #25
   368e8:	cmp	r3, #10
   368ec:	ldrls	pc, [pc, r3, lsl #2]
   368f0:	b	36c4c <__assert_fail@plt+0x24474>
   368f4:	andeq	r6, r3, r4, lsl ip
   368f8:	andeq	r6, r3, r0, asr #24
   368fc:	andeq	r6, r3, r4, lsr ip
   36900:	andeq	r6, r3, ip, asr #24
   36904:	andeq	r6, r3, ip, asr #24
   36908:	andeq	r6, r3, ip, asr #24
   3690c:	andeq	r6, r3, ip, asr #24
   36910:	andeq	r6, r3, ip, asr #24
   36914:	andeq	r6, r3, ip, asr #24
   36918:	andeq	r6, r3, r8, lsr #24
   3691c:	andeq	r6, r3, ip, lsl ip
   36920:	mov	r1, r5
   36924:	mov	r0, #3
   36928:	mov	r2, #20
   3692c:	add	r3, sp, #8
   36930:	bl	12148 <cplus_demangle_print@plt>
   36934:	subs	r5, r0, #0
   36938:	beq	36cbc <__assert_fail@plt+0x244e4>
   3693c:	movw	r1, #39628	; 0x9acc
   36940:	movt	r1, #5
   36944:	bl	12178 <strcmp@plt>
   36948:	cmp	r0, #0
   3694c:	beq	36be8 <__assert_fail@plt+0x24410>
   36950:	movw	r1, #40056	; 0x9c78
   36954:	mov	r0, r5
   36958:	movt	r1, #5
   3695c:	bl	12178 <strcmp@plt>
   36960:	cmp	r0, #0
   36964:	beq	36c50 <__assert_fail@plt+0x24478>
   36968:	movw	r1, #55848	; 0xda28
   3696c:	mov	r0, r5
   36970:	movt	r1, #5
   36974:	bl	12178 <strcmp@plt>
   36978:	cmp	r0, #0
   3697c:	beq	36be8 <__assert_fail@plt+0x24410>
   36980:	movw	r1, #37212	; 0x915c
   36984:	mov	r0, r5
   36988:	movt	r1, #5
   3698c:	bl	12178 <strcmp@plt>
   36990:	cmp	r0, #0
   36994:	beq	36c64 <__assert_fail@plt+0x2448c>
   36998:	movw	r1, #39688	; 0x9b08
   3699c:	mov	r0, r5
   369a0:	movt	r1, #5
   369a4:	bl	12178 <strcmp@plt>
   369a8:	cmp	r0, #0
   369ac:	beq	36c64 <__assert_fail@plt+0x2448c>
   369b0:	movw	r1, #37204	; 0x9154
   369b4:	mov	r0, r5
   369b8:	movt	r1, #5
   369bc:	bl	12178 <strcmp@plt>
   369c0:	cmp	r0, #0
   369c4:	beq	36cd8 <__assert_fail@plt+0x24500>
   369c8:	movw	r1, #40064	; 0x9c80
   369cc:	mov	r0, r5
   369d0:	movt	r1, #5
   369d4:	bl	12178 <strcmp@plt>
   369d8:	cmp	r0, #0
   369dc:	beq	36e68 <__assert_fail@plt+0x24690>
   369e0:	movw	r1, #39612	; 0x9abc
   369e4:	mov	r0, r5
   369e8:	movt	r1, #5
   369ec:	bl	12178 <strcmp@plt>
   369f0:	cmp	r0, #0
   369f4:	beq	36e7c <__assert_fail@plt+0x246a4>
   369f8:	ldrb	r8, [r5]
   369fc:	cmp	r8, #105	; 0x69
   36a00:	bne	36cec <__assert_fail@plt+0x24514>
   36a04:	ldrb	r3, [r5, #1]
   36a08:	cmp	r3, #110	; 0x6e
   36a0c:	bne	36cec <__assert_fail@plt+0x24514>
   36a10:	ldrb	r3, [r5, #2]
   36a14:	cmp	r3, #116	; 0x74
   36a18:	bne	36cec <__assert_fail@plt+0x24514>
   36a1c:	ldrb	r3, [r5, #3]
   36a20:	cmp	r3, #0
   36a24:	bne	36cec <__assert_fail@plt+0x24514>
   36a28:	mov	r0, r4
   36a2c:	mov	r1, #4
   36a30:	mov	r2, #0
   36a34:	bl	34c24 <__assert_fail@plt+0x2244c>
   36a38:	mov	r8, r0
   36a3c:	b	36bfc <__assert_fail@plt+0x24424>
   36a40:	ldr	r2, [r5, #4]
   36a44:	cmp	r2, #0
   36a48:	beq	36cac <__assert_fail@plt+0x244d4>
   36a4c:	mov	r3, #0
   36a50:	mov	r0, r4
   36a54:	str	r3, [sp]
   36a58:	bl	367a4 <__assert_fail@plt+0x23fcc>
   36a5c:	mov	r7, r0
   36a60:	cmp	r7, #0
   36a64:	beq	36c0c <__assert_fail@plt+0x24434>
   36a68:	ldr	r2, [r5, #8]
   36a6c:	mov	r1, r9
   36a70:	mov	r0, r4
   36a74:	add	r3, sp, #8
   36a78:	bl	36f6c <__assert_fail@plt+0x24794>
   36a7c:	subs	r2, r0, #0
   36a80:	beq	36c0c <__assert_fail@plt+0x24434>
   36a84:	mov	r0, r4
   36a88:	mov	r1, r7
   36a8c:	ldr	r3, [sp, #8]
   36a90:	bl	34dbc <__assert_fail@plt+0x225e4>
   36a94:	b	368ac <__assert_fail@plt+0x240d4>
   36a98:	ldr	r2, [r5, #4]
   36a9c:	mov	r7, #0
   36aa0:	mov	r0, r4
   36aa4:	str	r7, [sp]
   36aa8:	bl	367a4 <__assert_fail@plt+0x23fcc>
   36aac:	subs	r3, r0, #0
   36ab0:	beq	36c0c <__assert_fail@plt+0x24434>
   36ab4:	ldr	r2, [r5, #8]
   36ab8:	mov	r0, r4
   36abc:	str	r7, [sp]
   36ac0:	mov	r1, r9
   36ac4:	bl	367a4 <__assert_fail@plt+0x23fcc>
   36ac8:	b	368ac <__assert_fail@plt+0x240d4>
   36acc:	mov	r1, r5
   36ad0:	mov	r0, #3
   36ad4:	mov	r2, #20
   36ad8:	add	r3, sp, #8
   36adc:	bl	12148 <cplus_demangle_print@plt>
   36ae0:	subs	r5, r0, #0
   36ae4:	beq	36c78 <__assert_fail@plt+0x244a0>
   36ae8:	bl	124e4 <strlen@plt>
   36aec:	mov	ip, #9
   36af0:	add	r1, r9, #232	; 0xe8
   36af4:	mov	r2, r5
   36af8:	str	ip, [sp]
   36afc:	mov	r3, r0
   36b00:	mov	r0, r4
   36b04:	bl	366b0 <__assert_fail@plt+0x23ed8>
   36b08:	mov	r8, r0
   36b0c:	mov	r0, r5
   36b10:	bl	121f0 <free@plt>
   36b14:	mov	r0, r8
   36b18:	b	368ac <__assert_fail@plt+0x240d4>
   36b1c:	cmp	r3, #0
   36b20:	beq	36890 <__assert_fail@plt+0x240b8>
   36b24:	mov	r1, r3
   36b28:	mov	r0, r4
   36b2c:	bl	35a10 <__assert_fail@plt+0x23238>
   36b30:	cmp	r0, #0
   36b34:	beq	36890 <__assert_fail@plt+0x240b8>
   36b38:	ldr	r1, [r0]
   36b3c:	cmp	r1, #0
   36b40:	beq	36890 <__assert_fail@plt+0x240b8>
   36b44:	mov	r7, r0
   36b48:	b	36b58 <__assert_fail@plt+0x24380>
   36b4c:	ldr	r1, [r7, #4]!
   36b50:	cmp	r1, #0
   36b54:	beq	36890 <__assert_fail@plt+0x240b8>
   36b58:	mov	r0, r4
   36b5c:	bl	35a50 <__assert_fail@plt+0x23278>
   36b60:	subs	r8, r0, #0
   36b64:	beq	36c0c <__assert_fail@plt+0x24434>
   36b68:	mov	r0, r4
   36b6c:	mov	r1, r8
   36b70:	bl	35844 <__assert_fail@plt+0x2306c>
   36b74:	subs	sl, r0, #0
   36b78:	beq	36b4c <__assert_fail@plt+0x24374>
   36b7c:	bl	124e4 <strlen@plt>
   36b80:	ldr	r3, [r5, #8]
   36b84:	cmp	r0, r3
   36b88:	mov	r2, r0
   36b8c:	bne	36b4c <__assert_fail@plt+0x24374>
   36b90:	mov	r0, sl
   36b94:	ldr	r1, [r5, #4]
   36b98:	bl	12784 <strncmp@plt>
   36b9c:	cmp	r0, #0
   36ba0:	bne	36b4c <__assert_fail@plt+0x24374>
   36ba4:	mov	r0, r8
   36ba8:	b	368ac <__assert_fail@plt+0x240d4>
   36bac:	movw	r3, #168	; 0xa8
   36bb0:	movt	r3, #7
   36bb4:	mov	r2, #5
   36bb8:	movw	r1, #39944	; 0x9c08
   36bbc:	mov	r0, #0
   36bc0:	movt	r1, #5
   36bc4:	ldr	r4, [r3]
   36bc8:	bl	12298 <dcgettext@plt>
   36bcc:	ldr	r3, [r5]
   36bd0:	mov	r1, #1
   36bd4:	mov	r2, r0
   36bd8:	mov	r0, r4
   36bdc:	bl	125d4 <__fprintf_chk@plt>
   36be0:	mov	r0, #0
   36be4:	b	368ac <__assert_fail@plt+0x240d4>
   36be8:	mov	r0, r4
   36bec:	mov	r1, #1
   36bf0:	mov	r2, #0
   36bf4:	bl	34c24 <__assert_fail@plt+0x2244c>
   36bf8:	mov	r8, r0
   36bfc:	mov	r0, r5
   36c00:	bl	121f0 <free@plt>
   36c04:	mov	r0, r8
   36c08:	b	368ac <__assert_fail@plt+0x240d4>
   36c0c:	mov	r0, #0
   36c10:	b	368ac <__assert_fail@plt+0x240d4>
   36c14:	mov	r0, r1
   36c18:	b	368ac <__assert_fail@plt+0x240d4>
   36c1c:	mov	r0, r4
   36c20:	bl	34e40 <__assert_fail@plt+0x22668>
   36c24:	b	368ac <__assert_fail@plt+0x240d4>
   36c28:	mov	r0, r4
   36c2c:	bl	34d6c <__assert_fail@plt+0x22594>
   36c30:	b	368ac <__assert_fail@plt+0x240d4>
   36c34:	mov	r0, r4
   36c38:	bl	350b0 <__assert_fail@plt+0x228d8>
   36c3c:	b	368ac <__assert_fail@plt+0x240d4>
   36c40:	mov	r0, r4
   36c44:	bl	350dc <__assert_fail@plt+0x22904>
   36c48:	b	368ac <__assert_fail@plt+0x240d4>
   36c4c:	bl	12790 <abort@plt>
   36c50:	mov	r0, r4
   36c54:	mov	r1, #1
   36c58:	bl	34c48 <__assert_fail@plt+0x22470>
   36c5c:	mov	r8, r0
   36c60:	b	36bfc <__assert_fail@plt+0x24424>
   36c64:	mov	r0, r4
   36c68:	mov	r1, #8
   36c6c:	bl	34c40 <__assert_fail@plt+0x22468>
   36c70:	mov	r8, r0
   36c74:	b	36bfc <__assert_fail@plt+0x24424>
   36c78:	movw	r3, #168	; 0xa8
   36c7c:	movt	r3, #7
   36c80:	movw	r1, #39980	; 0x9c2c
   36c84:	movt	r1, #5
   36c88:	ldr	r4, [r3]
   36c8c:	mov	r2, #5
   36c90:	bl	12298 <dcgettext@plt>
   36c94:	mov	r1, #1
   36c98:	mov	r2, r0
   36c9c:	mov	r0, r4
   36ca0:	bl	125d4 <__fprintf_chk@plt>
   36ca4:	mov	r0, r5
   36ca8:	b	368ac <__assert_fail@plt+0x240d4>
   36cac:	mov	r0, r4
   36cb0:	bl	34c18 <__assert_fail@plt+0x22440>
   36cb4:	mov	r7, r0
   36cb8:	b	36a60 <__assert_fail@plt+0x24288>
   36cbc:	movw	r3, #168	; 0xa8
   36cc0:	movt	r3, #7
   36cc4:	movw	r1, #40016	; 0x9c50
   36cc8:	mov	r2, #5
   36ccc:	ldr	r4, [r3]
   36cd0:	movt	r1, #5
   36cd4:	b	36c90 <__assert_fail@plt+0x244b8>
   36cd8:	mov	r0, r4
   36cdc:	mov	r1, #4
   36ce0:	bl	34c40 <__assert_fail@plt+0x22468>
   36ce4:	mov	r8, r0
   36ce8:	b	36bfc <__assert_fail@plt+0x24424>
   36cec:	movw	r1, #39656	; 0x9ae8
   36cf0:	mov	r0, r5
   36cf4:	movt	r1, #5
   36cf8:	bl	12178 <strcmp@plt>
   36cfc:	cmp	r0, #0
   36d00:	beq	36e94 <__assert_fail@plt+0x246bc>
   36d04:	movw	r1, #42228	; 0xa4f4
   36d08:	mov	r0, r5
   36d0c:	movt	r1, #5
   36d10:	bl	12178 <strcmp@plt>
   36d14:	cmp	r0, #0
   36d18:	beq	36a28 <__assert_fail@plt+0x24250>
   36d1c:	movw	r1, #39672	; 0x9af8
   36d20:	mov	r0, r5
   36d24:	movt	r1, #5
   36d28:	bl	12178 <strcmp@plt>
   36d2c:	cmp	r0, #0
   36d30:	beq	36e94 <__assert_fail@plt+0x246bc>
   36d34:	movw	r1, #40076	; 0x9c8c
   36d38:	mov	r0, r5
   36d3c:	movt	r1, #5
   36d40:	bl	12178 <strcmp@plt>
   36d44:	subs	r2, r0, #0
   36d48:	beq	36eb0 <__assert_fail@plt+0x246d8>
   36d4c:	movw	r1, #40088	; 0x9c98
   36d50:	mov	r0, r5
   36d54:	movt	r1, #5
   36d58:	bl	12178 <strcmp@plt>
   36d5c:	cmp	r0, #0
   36d60:	beq	36ec4 <__assert_fail@plt+0x246ec>
   36d64:	movw	r1, #39604	; 0x9ab4
   36d68:	mov	r0, r5
   36d6c:	movt	r1, #5
   36d70:	bl	12178 <strcmp@plt>
   36d74:	subs	r2, r0, #0
   36d78:	beq	36edc <__assert_fail@plt+0x24704>
   36d7c:	movw	r1, #39640	; 0x9ad8
   36d80:	mov	r0, r5
   36d84:	movt	r1, #5
   36d88:	bl	12178 <strcmp@plt>
   36d8c:	cmp	r0, #0
   36d90:	beq	36f00 <__assert_fail@plt+0x24728>
   36d94:	movw	r1, #37032	; 0x90a8
   36d98:	mov	r0, r5
   36d9c:	movt	r1, #5
   36da0:	bl	12178 <strcmp@plt>
   36da4:	cmp	r0, #0
   36da8:	beq	36ef0 <__assert_fail@plt+0x24718>
   36dac:	movw	r1, #40108	; 0x9cac
   36db0:	mov	r0, r5
   36db4:	movt	r1, #5
   36db8:	bl	12178 <strcmp@plt>
   36dbc:	cmp	r0, #0
   36dc0:	beq	36e94 <__assert_fail@plt+0x246bc>
   36dc4:	movw	r1, #39860	; 0x9bb4
   36dc8:	mov	r0, r5
   36dcc:	movt	r1, #5
   36dd0:	bl	12178 <strcmp@plt>
   36dd4:	cmp	r0, #0
   36dd8:	beq	36f54 <__assert_fail@plt+0x2477c>
   36ddc:	movw	r1, #39872	; 0x9bc0
   36de0:	mov	r0, r5
   36de4:	movt	r1, #5
   36de8:	bl	12178 <strcmp@plt>
   36dec:	cmp	r0, #0
   36df0:	beq	36f3c <__assert_fail@plt+0x24764>
   36df4:	cmp	r8, #46	; 0x2e
   36df8:	bne	36f18 <__assert_fail@plt+0x24740>
   36dfc:	ldrb	r3, [r5, #1]
   36e00:	cmp	r3, #46	; 0x2e
   36e04:	bne	36f18 <__assert_fail@plt+0x24740>
   36e08:	ldrb	r3, [r5, #2]
   36e0c:	cmp	r3, #46	; 0x2e
   36e10:	bne	36f18 <__assert_fail@plt+0x24740>
   36e14:	ldrb	r8, [r5, #3]
   36e18:	cmp	r8, #0
   36e1c:	bne	36f18 <__assert_fail@plt+0x24740>
   36e20:	cmp	r7, #0
   36e24:	movne	r3, #1
   36e28:	strne	r3, [r7]
   36e2c:	bne	36bfc <__assert_fail@plt+0x24424>
   36e30:	movw	r3, #168	; 0xa8
   36e34:	movt	r3, #7
   36e38:	movw	r1, #40116	; 0x9cb4
   36e3c:	movt	r1, #5
   36e40:	ldr	r4, [r3]
   36e44:	mov	r0, r7
   36e48:	mov	r2, #5
   36e4c:	mov	r8, r7
   36e50:	bl	12298 <dcgettext@plt>
   36e54:	mov	r1, #1
   36e58:	mov	r2, r0
   36e5c:	mov	r0, r4
   36e60:	bl	125d4 <__fprintf_chk@plt>
   36e64:	b	36bfc <__assert_fail@plt+0x24424>
   36e68:	mov	r0, r4
   36e6c:	mov	r1, #16
   36e70:	bl	34c40 <__assert_fail@plt+0x22468>
   36e74:	mov	r8, r0
   36e78:	b	36bfc <__assert_fail@plt+0x24424>
   36e7c:	mov	r1, #1
   36e80:	mov	r0, r4
   36e84:	mov	r2, r1
   36e88:	bl	34c24 <__assert_fail@plt+0x2244c>
   36e8c:	mov	r8, r0
   36e90:	b	36bfc <__assert_fail@plt+0x24424>
   36e94:	mov	r0, r4
   36e98:	mov	r1, #4
   36e9c:	mov	r2, #1
   36ea0:	bl	34c24 <__assert_fail@plt+0x2244c>
   36ea4:	mov	r8, r0
   36ea8:	b	36bfc <__assert_fail@plt+0x24424>
   36eac:	bl	122b0 <__stack_chk_fail@plt>
   36eb0:	mov	r0, r4
   36eb4:	mov	r1, #16
   36eb8:	bl	34c24 <__assert_fail@plt+0x2244c>
   36ebc:	mov	r8, r0
   36ec0:	b	36bfc <__assert_fail@plt+0x24424>
   36ec4:	mov	r0, r4
   36ec8:	mov	r1, #16
   36ecc:	mov	r2, #1
   36ed0:	bl	34c24 <__assert_fail@plt+0x2244c>
   36ed4:	mov	r8, r0
   36ed8:	b	36bfc <__assert_fail@plt+0x24424>
   36edc:	mov	r0, r4
   36ee0:	mov	r1, #2
   36ee4:	bl	34c24 <__assert_fail@plt+0x2244c>
   36ee8:	mov	r8, r0
   36eec:	b	36bfc <__assert_fail@plt+0x24424>
   36ef0:	mov	r0, r4
   36ef4:	bl	34c18 <__assert_fail@plt+0x22440>
   36ef8:	mov	r8, r0
   36efc:	b	36bfc <__assert_fail@plt+0x24424>
   36f00:	mov	r0, r4
   36f04:	mov	r1, #2
   36f08:	mov	r2, #1
   36f0c:	bl	34c24 <__assert_fail@plt+0x2244c>
   36f10:	mov	r8, r0
   36f14:	b	36bfc <__assert_fail@plt+0x24424>
   36f18:	movw	r3, #168	; 0xa8
   36f1c:	movt	r3, #7
   36f20:	mov	r0, #0
   36f24:	movw	r1, #40148	; 0x9cd4
   36f28:	ldr	r4, [r3]
   36f2c:	movt	r1, #5
   36f30:	mov	r2, #5
   36f34:	mov	r8, r0
   36f38:	b	36e50 <__assert_fail@plt+0x24678>
   36f3c:	mov	r0, r4
   36f40:	mov	r1, #8
   36f44:	mov	r2, #1
   36f48:	bl	34c24 <__assert_fail@plt+0x2244c>
   36f4c:	mov	r8, r0
   36f50:	b	36bfc <__assert_fail@plt+0x24424>
   36f54:	mov	r0, r4
   36f58:	mov	r1, #8
   36f5c:	mov	r2, #0
   36f60:	bl	34c24 <__assert_fail@plt+0x2244c>
   36f64:	mov	r8, r0
   36f68:	b	36bfc <__assert_fail@plt+0x24424>
   36f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36f70:	movw	ip, #65176	; 0xfe98
   36f74:	sub	sp, sp, #36	; 0x24
   36f78:	movt	ip, #6
   36f7c:	mov	r7, r0
   36f80:	mov	r0, #40	; 0x28
   36f84:	str	ip, [sp, #16]
   36f88:	mov	r8, r1
   36f8c:	ldr	ip, [ip]
   36f90:	mov	r4, r2
   36f94:	str	r3, [sp, #20]
   36f98:	str	ip, [sp, #28]
   36f9c:	bl	12358 <xmalloc@plt>
   36fa0:	ldr	r1, [sp, #20]
   36fa4:	cmp	r4, #0
   36fa8:	mov	ip, #0
   36fac:	str	ip, [r1]
   36fb0:	mov	r6, r0
   36fb4:	beq	370f0 <__assert_fail@plt+0x24918>
   36fb8:	ldr	r3, [r4]
   36fbc:	cmp	r3, #46	; 0x2e
   36fc0:	bne	370a4 <__assert_fail@plt+0x248cc>
   36fc4:	ldr	r2, [r4, #4]
   36fc8:	cmp	r2, ip
   36fcc:	beq	370f8 <__assert_fail@plt+0x24920>
   36fd0:	mov	fp, ip
   36fd4:	mov	r5, #10
   36fd8:	add	r9, sp, #24
   36fdc:	b	3700c <__assert_fail@plt+0x24834>
   36fe0:	str	r2, [r6, fp, lsl #2]
   36fe4:	mov	fp, sl
   36fe8:	ldr	r4, [r4, #8]
   36fec:	cmp	r4, #0
   36ff0:	beq	37078 <__assert_fail@plt+0x248a0>
   36ff4:	ldr	r3, [r4]
   36ff8:	cmp	r3, #46	; 0x2e
   36ffc:	bne	370a4 <__assert_fail@plt+0x248cc>
   37000:	ldr	r2, [r4, #4]
   37004:	cmp	r2, #0
   37008:	beq	37078 <__assert_fail@plt+0x248a0>
   3700c:	str	r9, [sp]
   37010:	mov	r0, r7
   37014:	mov	r1, r8
   37018:	mov	r3, #0
   3701c:	bl	367a4 <__assert_fail@plt+0x23fcc>
   37020:	subs	r2, r0, #0
   37024:	beq	37054 <__assert_fail@plt+0x2487c>
   37028:	add	sl, fp, #1
   3702c:	cmp	sl, r5
   37030:	bcc	36fe0 <__assert_fail@plt+0x24808>
   37034:	add	r5, r5, #10
   37038:	mov	r0, r6
   3703c:	str	r2, [sp, #12]
   37040:	lsl	r1, r5, #2
   37044:	bl	122c8 <xrealloc@plt>
   37048:	ldr	r2, [sp, #12]
   3704c:	mov	r6, r0
   37050:	b	36fe0 <__assert_fail@plt+0x24808>
   37054:	ldr	r3, [sp, #24]
   37058:	cmp	r3, #0
   3705c:	beq	370e4 <__assert_fail@plt+0x2490c>
   37060:	ldr	ip, [sp, #20]
   37064:	mov	r1, #1
   37068:	str	r1, [ip]
   3706c:	ldr	r4, [r4, #8]
   37070:	cmp	r4, #0
   37074:	bne	36ff4 <__assert_fail@plt+0x2481c>
   37078:	lsl	ip, fp, #2
   3707c:	mov	r0, r6
   37080:	mov	r3, #0
   37084:	str	r3, [r6, ip]
   37088:	ldr	ip, [sp, #16]
   3708c:	ldr	r2, [sp, #28]
   37090:	ldr	r3, [ip]
   37094:	cmp	r2, r3
   37098:	bne	37100 <__assert_fail@plt+0x24928>
   3709c:	add	sp, sp, #36	; 0x24
   370a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   370a4:	movw	r3, #168	; 0xa8
   370a8:	movt	r3, #7
   370ac:	mov	r2, #5
   370b0:	movw	r1, #40188	; 0x9cfc
   370b4:	mov	r0, #0
   370b8:	movt	r1, #5
   370bc:	ldr	r4, [r3]
   370c0:	bl	12298 <dcgettext@plt>
   370c4:	mov	r1, #1
   370c8:	mov	r2, r0
   370cc:	mov	r0, r4
   370d0:	bl	125d4 <__fprintf_chk@plt>
   370d4:	mov	r0, r6
   370d8:	bl	121f0 <free@plt>
   370dc:	mov	r0, #0
   370e0:	b	37088 <__assert_fail@plt+0x248b0>
   370e4:	mov	r0, r6
   370e8:	bl	121f0 <free@plt>
   370ec:	b	370dc <__assert_fail@plt+0x24904>
   370f0:	mov	ip, r4
   370f4:	b	3707c <__assert_fail@plt+0x248a4>
   370f8:	mov	ip, r2
   370fc:	b	3707c <__assert_fail@plt+0x248a4>
   37100:	bl	122b0 <__stack_chk_fail@plt>
   37104:	push	{r4, r5, r6, lr}
   37108:	mov	r4, r0
   3710c:	ldr	r6, [r0]
   37110:	mov	r5, r1
   37114:	ldrb	r3, [r6]
   37118:	cmp	r3, #40	; 0x28
   3711c:	beq	3713c <__assert_fail@plt+0x24964>
   37120:	mov	r1, #0
   37124:	str	r1, [r5]
   37128:	bl	35e30 <__assert_fail@plt+0x23658>
   3712c:	mov	r3, #1
   37130:	str	r0, [r5, #4]
   37134:	mov	r0, r3
   37138:	pop	{r4, r5, r6, pc}
   3713c:	add	r3, r6, #1
   37140:	mov	r1, #0
   37144:	str	r3, [r0]
   37148:	bl	35e30 <__assert_fail@plt+0x23658>
   3714c:	ldr	r3, [r4]
   37150:	str	r0, [r5]
   37154:	ldrb	r2, [r3]
   37158:	cmp	r2, #44	; 0x2c
   3715c:	beq	37174 <__assert_fail@plt+0x2499c>
   37160:	mov	r0, r6
   37164:	bl	35d5c <__assert_fail@plt+0x23584>
   37168:	mov	r3, #0
   3716c:	mov	r0, r3
   37170:	pop	{r4, r5, r6, pc}
   37174:	add	r3, r3, #1
   37178:	mov	r0, r4
   3717c:	str	r3, [r4]
   37180:	mov	r1, #0
   37184:	bl	35e30 <__assert_fail@plt+0x23658>
   37188:	ldr	r2, [r4]
   3718c:	str	r0, [r5, #4]
   37190:	ldrb	r3, [r2]
   37194:	cmp	r3, #41	; 0x29
   37198:	bne	37160 <__assert_fail@plt+0x24988>
   3719c:	mov	r3, #1
   371a0:	add	r2, r2, r3
   371a4:	str	r2, [r4]
   371a8:	b	37134 <__assert_fail@plt+0x2495c>
   371ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   371b0:	movw	r6, #65192	; 0xfea8
   371b4:	ldr	r9, [r0]
   371b8:	movt	r6, #6
   371bc:	mov	r7, r0
   371c0:	mov	sl, r1
   371c4:	ldrb	r2, [r9]
   371c8:	lsl	r3, r2, #1
   371cc:	ldrh	r4, [r6, r3]
   371d0:	and	r4, r4, #4
   371d4:	uxth	r4, r4
   371d8:	cmp	r4, #0
   371dc:	beq	37254 <__assert_fail@plt+0x24a7c>
   371e0:	add	r3, r9, #1
   371e4:	mov	r4, #0
   371e8:	add	r4, r4, r4, lsl #2
   371ec:	str	r3, [r7]
   371f0:	mov	r8, r3
   371f4:	add	r4, r2, r4, lsl #1
   371f8:	ldrb	r2, [r3], #1
   371fc:	sub	r4, r4, #48	; 0x30
   37200:	lsl	ip, r2, #1
   37204:	ldrh	r5, [r6, ip]
   37208:	and	r5, r5, #4
   3720c:	uxth	r5, r5
   37210:	cmp	r5, #0
   37214:	bne	371e8 <__assert_fail@plt+0x24a10>
   37218:	mov	r0, r8
   3721c:	bl	124e4 <strlen@plt>
   37220:	cmp	r0, r4
   37224:	bcc	37244 <__assert_fail@plt+0x24a6c>
   37228:	cmp	sl, #0
   3722c:	strne	r8, [sl]
   37230:	ldr	r3, [r7]
   37234:	mov	r0, #1
   37238:	add	r4, r3, r4
   3723c:	str	r4, [r7]
   37240:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37244:	mov	r0, r9
   37248:	bl	35d1c <__assert_fail@plt+0x23544>
   3724c:	mov	r0, r5
   37250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37254:	mov	r8, r9
   37258:	b	37228 <__assert_fail@plt+0x24a50>
   3725c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37260:	movw	r6, #65176	; 0xfe98
   37264:	ldr	r5, [r1]
   37268:	movt	r6, #6
   3726c:	mov	r8, r0
   37270:	mov	r7, r2
   37274:	ldr	r2, [r6]
   37278:	sub	sp, sp, #44	; 0x2c
   3727c:	ldrb	r0, [r5]
   37280:	mov	r4, r1
   37284:	sub	r3, r0, #65	; 0x41
   37288:	str	r2, [sp, #36]	; 0x24
   3728c:	cmp	r3, #47	; 0x2f
   37290:	ldrls	pc, [pc, r3, lsl #2]
   37294:	b	37718 <__assert_fail@plt+0x24f40>
   37298:	muleq	r3, r4, r3
   3729c:	andeq	r7, r3, r8, lsl r7
   372a0:	ldrdeq	r7, [r3], -ip
   372a4:	andeq	r7, r3, r8, lsl r7
   372a8:	andeq	r7, r3, r8, lsl r7
   372ac:	ldrdeq	r7, [r3], -r0
   372b0:	andeq	r7, r3, r0, asr r6
   372b4:	andeq	r7, r3, r8, lsl r7
   372b8:	andeq	r7, r3, r8, lsl r7
   372bc:	andeq	r7, r3, r8, lsl r7
   372c0:	andeq	r7, r3, r8, lsl r7
   372c4:	andeq	r7, r3, r8, lsl r7
   372c8:	andeq	r7, r3, r4, lsr #8
   372cc:	andeq	r7, r3, r8, lsl r7
   372d0:	andeq	r7, r3, r4, lsr #8
   372d4:	muleq	r3, r4, r5
   372d8:	andeq	r7, r3, r8, lsl #13
   372dc:	andeq	r7, r3, r0, lsr #13
   372e0:	andeq	r7, r3, r8, lsl r7
   372e4:	andeq	r7, r3, r8, asr r3
   372e8:	andeq	r7, r3, r8, lsl r7
   372ec:	andeq	r7, r3, r8, lsl r7
   372f0:	andeq	r7, r3, r8, lsl r7
   372f4:	andeq	r7, r3, r8, lsl r7
   372f8:	andeq	r7, r3, r8, lsl r7
   372fc:	andeq	r7, r3, r8, lsl r7
   37300:	andeq	r7, r3, r8, lsl r7
   37304:	andeq	r7, r3, r8, lsl r7
   37308:	andeq	r7, r3, r8, lsl r7
   3730c:	andeq	r7, r3, r8, lsl r7
   37310:	andeq	r7, r3, r8, lsl r7
   37314:	andeq	r7, r3, r8, lsl r7
   37318:	andeq	r7, r3, r8, lsl r7
   3731c:	andeq	r7, r3, r8, lsl r7
   37320:	andeq	r7, r3, r8, lsl r7
   37324:	andeq	r7, r3, r8, lsl r7
   37328:	andeq	r7, r3, r8, lsl r7
   3732c:	andeq	r7, r3, r8, lsl r7
   37330:	andeq	r7, r3, r8, lsl r7
   37334:	andeq	r7, r3, r8, lsl r7
   37338:	andeq	r7, r3, r8, lsl r7
   3733c:	andeq	r7, r3, r8, lsl r7
   37340:	andeq	r7, r3, r8, lsl r7
   37344:	andeq	r7, r3, r8, lsl r7
   37348:	andeq	r7, r3, r8, lsl r7
   3734c:	andeq	r7, r3, r8, lsl r7
   37350:	andeq	r7, r3, r8, lsl r7
   37354:	muleq	r3, r4, r5
   37358:	add	r3, r5, #1
   3735c:	mov	r0, r1
   37360:	str	r3, [r1]
   37364:	add	r1, sp, #28
   37368:	bl	35c28 <__assert_fail@plt+0x23450>
   3736c:	cmp	r0, #0
   37370:	beq	37384 <__assert_fail@plt+0x24bac>
   37374:	ldr	r3, [sp, #28]
   37378:	ldr	r2, [r8, #20]
   3737c:	cmp	r2, r3
   37380:	bhi	37d9c <__assert_fail@plt+0x255c4>
   37384:	mov	r0, r5
   37388:	bl	35d1c <__assert_fail@plt+0x23544>
   3738c:	mov	r3, #0
   37390:	b	3766c <__assert_fail@plt+0x24e94>
   37394:	add	r0, r5, #1
   37398:	str	r0, [r1]
   3739c:	ldrb	r3, [r5, #1]
   373a0:	cmp	r3, #0
   373a4:	cmpne	r3, #95	; 0x5f
   373a8:	moveq	r9, #0
   373ac:	movne	r9, #1
   373b0:	beq	3740c <__assert_fail@plt+0x24c34>
   373b4:	movw	r1, #65192	; 0xfea8
   373b8:	lsl	r2, r3, #1
   373bc:	movt	r1, #6
   373c0:	ldrh	r2, [r1, r2]
   373c4:	tst	r2, #4
   373c8:	addne	r2, r5, #2
   373cc:	movne	r9, #0
   373d0:	bne	373e8 <__assert_fail@plt+0x24c10>
   373d4:	b	37414 <__assert_fail@plt+0x24c3c>
   373d8:	lsl	r0, r3, #1
   373dc:	ldrh	r0, [r1, r0]
   373e0:	tst	r0, #4
   373e4:	beq	37414 <__assert_fail@plt+0x24c3c>
   373e8:	add	r9, r9, r9, lsl #2
   373ec:	str	r2, [r4]
   373f0:	mov	r0, r2
   373f4:	add	r9, r3, r9, lsl #1
   373f8:	ldrb	r3, [r2], #1
   373fc:	sub	r9, r9, #48	; 0x30
   37400:	cmp	r3, #95	; 0x5f
   37404:	cmpne	r3, #0
   37408:	bne	373d8 <__assert_fail@plt+0x24c00>
   3740c:	cmp	r3, #95	; 0x5f
   37410:	beq	37dc4 <__assert_fail@plt+0x255ec>
   37414:	mov	r0, r5
   37418:	bl	35d1c <__assert_fail@plt+0x23544>
   3741c:	mov	r3, #0
   37420:	b	3766c <__assert_fail@plt+0x24e94>
   37424:	mov	r3, r5
   37428:	mov	sl, #0
   3742c:	str	sl, [sp, #24]
   37430:	movw	r1, #65192	; 0xfea8
   37434:	ldrb	r9, [r3], #1
   37438:	movt	r1, #6
   3743c:	str	sl, [sp, #28]
   37440:	str	sl, [sp, #32]
   37444:	str	r3, [r4]
   37448:	ldrb	lr, [r5, #1]
   3744c:	lsl	r3, lr, #1
   37450:	ldrh	r3, [r1, r3]
   37454:	tst	r3, #4
   37458:	beq	379c4 <__assert_fail@plt+0x251ec>
   3745c:	add	ip, r5, #2
   37460:	add	sl, sl, sl, lsl #2
   37464:	str	ip, [r4]
   37468:	mov	fp, ip
   3746c:	add	sl, lr, sl, lsl #1
   37470:	ldrb	lr, [ip], #1
   37474:	sub	sl, sl, #48	; 0x30
   37478:	lsl	r3, lr, #1
   3747c:	ldrh	r3, [r1, r3]
   37480:	tst	r3, #4
   37484:	bne	37460 <__assert_fail@plt+0x24c88>
   37488:	mov	r0, fp
   3748c:	bl	124e4 <strlen@plt>
   37490:	cmp	r0, sl
   37494:	bcc	37384 <__assert_fail@plt+0x24bac>
   37498:	cmp	r7, #0
   3749c:	add	r3, fp, sl
   374a0:	str	r3, [r4]
   374a4:	beq	374d8 <__assert_fail@plt+0x24d00>
   374a8:	ldr	r1, [r8, #4]
   374ac:	mov	ip, #9
   374b0:	ldr	r0, [r8]
   374b4:	mov	r2, fp
   374b8:	mov	r3, sl
   374bc:	str	ip, [sp]
   374c0:	add	r1, r1, #232	; 0xe8
   374c4:	bl	366b0 <__assert_fail@plt+0x23ed8>
   374c8:	cmp	r0, #0
   374cc:	str	r0, [sp, #24]
   374d0:	beq	3738c <__assert_fail@plt+0x24bb4>
   374d4:	ldr	r3, [r4]
   374d8:	subs	r2, r9, #77	; 0x4d
   374dc:	rsbs	r9, r2, #0
   374e0:	adcs	r9, r9, r2
   374e4:	cmp	r9, #0
   374e8:	beq	3753c <__assert_fail@plt+0x24d64>
   374ec:	ldrb	r2, [r3]
   374f0:	cmp	r2, #67	; 0x43
   374f4:	beq	37e4c <__assert_fail@plt+0x25674>
   374f8:	cmp	r2, #86	; 0x56
   374fc:	beq	37e4c <__assert_fail@plt+0x25674>
   37500:	cmp	r2, #70	; 0x46
   37504:	bne	37384 <__assert_fail@plt+0x24bac>
   37508:	cmp	r7, #0
   3750c:	add	r3, r3, #1
   37510:	addne	r2, sp, #28
   37514:	str	r3, [r4]
   37518:	moveq	r2, r7
   3751c:	addne	r3, sp, #32
   37520:	moveq	r3, r7
   37524:	mov	r0, r8
   37528:	mov	r1, r4
   3752c:	bl	389c4 <__assert_fail@plt+0x261ec>
   37530:	cmp	r0, #0
   37534:	beq	3738c <__assert_fail@plt+0x24bb4>
   37538:	ldr	r3, [r4]
   3753c:	ldrb	r2, [r3]
   37540:	cmp	r2, #95	; 0x5f
   37544:	bne	37384 <__assert_fail@plt+0x24bac>
   37548:	add	r3, r3, #1
   3754c:	mov	r1, r4
   37550:	str	r3, [r4]
   37554:	mov	r0, r8
   37558:	mov	r2, r7
   3755c:	bl	3725c <__assert_fail@plt+0x24a84>
   37560:	cmp	r0, #0
   37564:	beq	3738c <__assert_fail@plt+0x24bb4>
   37568:	cmp	r7, #0
   3756c:	beq	3758c <__assert_fail@plt+0x24db4>
   37570:	cmp	r9, #0
   37574:	ldr	r0, [r8]
   37578:	bne	37e60 <__assert_fail@plt+0x25688>
   3757c:	ldr	r1, [sp, #24]
   37580:	ldr	r2, [r7]
   37584:	bl	34fcc <__assert_fail@plt+0x227f4>
   37588:	str	r0, [r7]
   3758c:	mov	r3, #1
   37590:	b	3766c <__assert_fail@plt+0x24e94>
   37594:	add	r5, r5, #1
   37598:	mov	r0, r8
   3759c:	str	r5, [r4]
   375a0:	mov	r2, r7
   375a4:	bl	3725c <__assert_fail@plt+0x24a84>
   375a8:	cmp	r0, #0
   375ac:	beq	3738c <__assert_fail@plt+0x24bb4>
   375b0:	cmp	r7, #0
   375b4:	beq	3758c <__assert_fail@plt+0x24db4>
   375b8:	ldr	r0, [r8]
   375bc:	ldr	r1, [r7]
   375c0:	bl	34d6c <__assert_fail@plt+0x22594>
   375c4:	mov	r3, #1
   375c8:	str	r0, [r7]
   375cc:	b	3766c <__assert_fail@plt+0x24e94>
   375d0:	cmp	r7, #0
   375d4:	add	r3, r5, #1
   375d8:	addne	r2, sp, #28
   375dc:	str	r3, [r1]
   375e0:	moveq	r2, r7
   375e4:	moveq	r3, r7
   375e8:	addne	r3, sp, #32
   375ec:	mov	r0, r8
   375f0:	bl	389c4 <__assert_fail@plt+0x261ec>
   375f4:	cmp	r0, #0
   375f8:	beq	3738c <__assert_fail@plt+0x24bb4>
   375fc:	ldr	r3, [r4]
   37600:	ldrb	r2, [r3]
   37604:	cmp	r2, #95	; 0x5f
   37608:	bne	37384 <__assert_fail@plt+0x24bac>
   3760c:	add	r3, r3, #1
   37610:	mov	r1, r4
   37614:	str	r3, [r4]
   37618:	mov	r0, r8
   3761c:	mov	r2, r7
   37620:	bl	3725c <__assert_fail@plt+0x24a84>
   37624:	cmp	r0, #0
   37628:	beq	3738c <__assert_fail@plt+0x24bb4>
   3762c:	cmp	r7, #0
   37630:	beq	3758c <__assert_fail@plt+0x24db4>
   37634:	ldr	r0, [r8]
   37638:	ldr	r1, [r7]
   3763c:	ldr	r2, [sp, #28]
   37640:	ldr	r3, [sp, #32]
   37644:	bl	34dbc <__assert_fail@plt+0x225e4>
   37648:	str	r0, [r7]
   3764c:	b	3758c <__assert_fail@plt+0x24db4>
   37650:	add	r5, r5, #1
   37654:	mov	r0, r8
   37658:	str	r5, [r1]
   3765c:	mov	r2, r7
   37660:	bl	3725c <__assert_fail@plt+0x24a84>
   37664:	adds	r3, r0, #0
   37668:	movne	r3, #1
   3766c:	ldr	r2, [sp, #36]	; 0x24
   37670:	mov	r0, r3
   37674:	ldr	r3, [r6]
   37678:	cmp	r2, r3
   3767c:	bne	37e7c <__assert_fail@plt+0x256a4>
   37680:	add	sp, sp, #44	; 0x2c
   37684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37688:	mov	r0, r8
   3768c:	mov	r2, r7
   37690:	bl	38550 <__assert_fail@plt+0x25d78>
   37694:	adds	r3, r0, #0
   37698:	movne	r3, #1
   3769c:	b	3766c <__assert_fail@plt+0x24e94>
   376a0:	add	r5, r5, #1
   376a4:	mov	r0, r8
   376a8:	str	r5, [r4]
   376ac:	mov	r2, r7
   376b0:	bl	3725c <__assert_fail@plt+0x24a84>
   376b4:	cmp	r0, #0
   376b8:	beq	3738c <__assert_fail@plt+0x24bb4>
   376bc:	cmp	r7, #0
   376c0:	beq	3758c <__assert_fail@plt+0x24db4>
   376c4:	ldr	r0, [r8]
   376c8:	ldr	r1, [r7]
   376cc:	bl	34e40 <__assert_fail@plt+0x22668>
   376d0:	mov	r3, #1
   376d4:	str	r0, [r7]
   376d8:	b	3766c <__assert_fail@plt+0x24e94>
   376dc:	add	r5, r5, #1
   376e0:	mov	r0, r8
   376e4:	str	r5, [r4]
   376e8:	mov	r2, r7
   376ec:	bl	3725c <__assert_fail@plt+0x24a84>
   376f0:	cmp	r0, #0
   376f4:	beq	3738c <__assert_fail@plt+0x24bb4>
   376f8:	cmp	r7, #0
   376fc:	beq	3758c <__assert_fail@plt+0x24db4>
   37700:	ldr	r0, [r8]
   37704:	ldr	r1, [r7]
   37708:	bl	350b0 <__assert_fail@plt+0x228d8>
   3770c:	mov	r3, #1
   37710:	str	r0, [r7]
   37714:	b	3766c <__assert_fail@plt+0x24e94>
   37718:	mov	r2, #0
   3771c:	mov	r1, r5
   37720:	mov	fp, r2
   37724:	mov	r9, r2
   37728:	mov	sl, r2
   3772c:	sub	r3, r0, #67	; 0x43
   37730:	cmp	r3, #19
   37734:	ldrls	pc, [pc, r3, lsl #2]
   37738:	b	377d4 <__assert_fail@plt+0x24ffc>
   3773c:	andeq	r7, r3, r4, asr #15
   37740:	ldrdeq	r7, [r3], -r4
   37744:	ldrdeq	r7, [r3], -r4
   37748:	ldrdeq	r7, [r3], -r4
   3774c:	ldrdeq	r7, [r3], -r4
   37750:	ldrdeq	r7, [r3], -r4
   37754:	ldrdeq	r7, [r3], -r4
   37758:	ldrdeq	r7, [r3], -r4
   3775c:	ldrdeq	r7, [r3], -r4
   37760:	ldrdeq	r7, [r3], -r4
   37764:	ldrdeq	r7, [r3], -r4
   37768:	ldrdeq	r7, [r3], -r4
   3776c:	ldrdeq	r7, [r3], -r4
   37770:	ldrdeq	r7, [r3], -r4
   37774:	ldrdeq	r7, [r3], -r4
   37778:	ldrdeq	r7, [r3], -r4
   3777c:			; <UNDEFINED> instruction: 0x000377b4
   37780:	ldrdeq	r7, [r3], -r4
   37784:	andeq	r7, r3, r4, lsr #15
   37788:	andeq	r7, r3, ip, lsl #15
   3778c:	mov	r9, #1
   37790:	add	r3, r1, r9
   37794:	str	r3, [r4]
   37798:	ldrb	r0, [r1, #1]
   3779c:	ldr	r1, [r4]
   377a0:	b	3772c <__assert_fail@plt+0x24f54>
   377a4:	add	r3, r1, #1
   377a8:	mov	fp, #1
   377ac:	str	r3, [r4]
   377b0:	b	37798 <__assert_fail@plt+0x24fc0>
   377b4:	add	r3, r1, #1
   377b8:	mov	r2, #1
   377bc:	str	r3, [r4]
   377c0:	b	37798 <__assert_fail@plt+0x24fc0>
   377c4:	add	r3, r1, #1
   377c8:	mov	sl, #1
   377cc:	str	r3, [r4]
   377d0:	b	37798 <__assert_fail@plt+0x24fc0>
   377d4:	cmp	r0, #120	; 0x78
   377d8:	ldrls	pc, [pc, r0, lsl #2]
   377dc:	b	37384 <__assert_fail@plt+0x24bac>
   377e0:	muleq	r3, r4, sl
   377e4:	andeq	r7, r3, r4, lsl #7
   377e8:	andeq	r7, r3, r4, lsl #7
   377ec:	andeq	r7, r3, r4, lsl #7
   377f0:	andeq	r7, r3, r4, lsl #7
   377f4:	andeq	r7, r3, r4, lsl #7
   377f8:	andeq	r7, r3, r4, lsl #7
   377fc:	andeq	r7, r3, r4, lsl #7
   37800:	andeq	r7, r3, r4, lsl #7
   37804:	andeq	r7, r3, r4, lsl #7
   37808:	andeq	r7, r3, r4, lsl #7
   3780c:	andeq	r7, r3, r4, lsl #7
   37810:	andeq	r7, r3, r4, lsl #7
   37814:	andeq	r7, r3, r4, lsl #7
   37818:	andeq	r7, r3, r4, lsl #7
   3781c:	andeq	r7, r3, r4, lsl #7
   37820:	andeq	r7, r3, r4, lsl #7
   37824:	andeq	r7, r3, r4, lsl #7
   37828:	andeq	r7, r3, r4, lsl #7
   3782c:	andeq	r7, r3, r4, lsl #7
   37830:	andeq	r7, r3, r4, lsl #7
   37834:	andeq	r7, r3, r4, lsl #7
   37838:	andeq	r7, r3, r4, lsl #7
   3783c:	andeq	r7, r3, r4, lsl #7
   37840:	andeq	r7, r3, r4, lsl #7
   37844:	andeq	r7, r3, r4, lsl #7
   37848:	andeq	r7, r3, r4, lsl #7
   3784c:	andeq	r7, r3, r4, lsl #7
   37850:	andeq	r7, r3, r4, lsl #7
   37854:	andeq	r7, r3, r4, lsl #7
   37858:	andeq	r7, r3, r4, lsl #7
   3785c:	andeq	r7, r3, r4, lsl #7
   37860:	andeq	r7, r3, r4, lsl #7
   37864:	andeq	r7, r3, r4, lsl #7
   37868:	andeq	r7, r3, r4, lsl #7
   3786c:	andeq	r7, r3, r4, lsl #7
   37870:	andeq	r7, r3, r4, lsl #7
   37874:	andeq	r7, r3, r4, lsl #7
   37878:	andeq	r7, r3, r4, lsl #7
   3787c:	andeq	r7, r3, r4, lsl #7
   37880:	andeq	r7, r3, r4, lsl #7
   37884:	andeq	r7, r3, r4, lsl #7
   37888:	andeq	r7, r3, r4, lsl #7
   3788c:	andeq	r7, r3, r4, lsl #7
   37890:	andeq	r7, r3, r4, lsl #7
   37894:	andeq	r7, r3, r4, lsl #7
   37898:	andeq	r7, r3, r4, lsl #7
   3789c:	andeq	r7, r3, r4, lsl #7
   378a0:	andeq	r7, r3, r4, lsl sl
   378a4:	andeq	r7, r3, r4, lsl sl
   378a8:	andeq	r7, r3, r4, lsl sl
   378ac:	andeq	r7, r3, r4, lsl sl
   378b0:	andeq	r7, r3, r4, lsl sl
   378b4:	andeq	r7, r3, r4, lsl sl
   378b8:	andeq	r7, r3, r4, lsl sl
   378bc:	andeq	r7, r3, r4, lsl sl
   378c0:	andeq	r7, r3, r4, lsl sl
   378c4:	andeq	r7, r3, r4, lsl sl
   378c8:	andeq	r7, r3, r4, lsl #7
   378cc:	andeq	r7, r3, r4, lsl #7
   378d0:	andeq	r7, r3, r4, lsl #7
   378d4:	andeq	r7, r3, r4, lsl #7
   378d8:	andeq	r7, r3, r4, lsl #7
   378dc:	andeq	r7, r3, r4, lsl #7
   378e0:	andeq	r7, r3, r4, lsl #7
   378e4:	andeq	r7, r3, r4, lsl #7
   378e8:	andeq	r7, r3, r4, lsl #7
   378ec:	andeq	r7, r3, r4, lsl #7
   378f0:	andeq	r7, r3, r4, lsl #7
   378f4:	andeq	r7, r3, r4, lsl #7
   378f8:	andeq	r7, r3, r4, lsl #7
   378fc:	strdeq	r7, [r3], -r0
   37900:	andeq	r7, r3, r4, lsl #7
   37904:	andeq	r7, r3, r4, lsl #7
   37908:	andeq	r7, r3, r4, lsl #7
   3790c:	andeq	r7, r3, r4, lsl #7
   37910:	andeq	r7, r3, r4, lsl #7
   37914:	andeq	r7, r3, r4, lsl #7
   37918:	andeq	r7, r3, r4, lsl #7
   3791c:	andeq	r7, r3, r4, lsl #7
   37920:	andeq	r7, r3, r4, lsl #7
   37924:	andeq	r7, r3, r4, lsl #7
   37928:	andeq	r7, r3, r4, lsl #7
   3792c:	andeq	r7, r3, r4, lsl #7
   37930:	andeq	r7, r3, r4, lsl #7
   37934:	andeq	r7, r3, r4, lsl #7
   37938:	andeq	r7, r3, r4, lsl #7
   3793c:	andeq	r7, r3, r4, lsl #7
   37940:	andeq	r7, r3, r4, lsl #7
   37944:	andeq	r7, r3, r4, lsl #7
   37948:	andeq	r7, r3, r4, lsl #7
   3794c:	andeq	r7, r3, r4, lsl #7
   37950:	andeq	r7, r3, r4, lsl #7
   37954:	andeq	r7, r3, r4, lsl #7
   37958:	andeq	r7, r3, r4, lsl #7
   3795c:	muleq	r3, r4, sl
   37960:	andeq	r7, r3, r4, lsl #7
   37964:	andeq	r7, r3, r4, lsl #7
   37968:	andeq	r7, r3, r4, ror #26
   3796c:	andeq	r7, r3, r8, lsl #26
   37970:	andeq	r7, r3, r0, ror #25
   37974:	andeq	r7, r3, r4, lsl #7
   37978:	andeq	r7, r3, r8, lsr #25
   3797c:	andeq	r7, r3, r4, lsl #7
   37980:	andeq	r7, r3, r4, lsl #7
   37984:	andeq	r7, r3, ip, lsl #25
   37988:	andeq	r7, r3, r4, lsl #7
   3798c:	andeq	r7, r3, r4, lsl #7
   37990:	andeq	r7, r3, r0, asr #24
   37994:	andeq	r7, r3, r4, lsl #7
   37998:	andeq	r7, r3, r4, lsl #7
   3799c:	andeq	r7, r3, r4, lsl #7
   379a0:	andeq	r7, r3, r4, lsl #7
   379a4:	andeq	r7, r3, r4, lsl #7
   379a8:	andeq	r7, r3, r8, lsl #24
   379ac:			; <UNDEFINED> instruction: 0x00037bbc
   379b0:	andeq	r7, r3, r4, asr fp
   379b4:	andeq	r7, r3, r4, lsl #7
   379b8:	andeq	r7, r3, r0, lsr #22
   379bc:	andeq	r7, r3, r4, ror #21
   379c0:	andeq	r7, r3, r0, lsr #21
   379c4:	cmp	lr, #81	; 0x51
   379c8:	bne	37384 <__assert_fail@plt+0x24bac>
   379cc:	cmp	r7, #0
   379d0:	mov	r0, r8
   379d4:	addne	r2, sp, #24
   379d8:	mov	r1, r4
   379dc:	moveq	r2, r7
   379e0:	bl	38550 <__assert_fail@plt+0x25d78>
   379e4:	cmp	r0, #0
   379e8:	bne	374d4 <__assert_fail@plt+0x24cfc>
   379ec:	b	3738c <__assert_fail@plt+0x24bb4>
   379f0:	add	r3, r1, #1
   379f4:	str	r3, [r4]
   379f8:	ldrb	r2, [r1, #1]
   379fc:	movw	r3, #65192	; 0xfea8
   37a00:	movt	r3, #6
   37a04:	lsl	r2, r2, #1
   37a08:	ldrh	r3, [r3, r2]
   37a0c:	tst	r3, #4
   37a10:	beq	37384 <__assert_fail@plt+0x24bac>
   37a14:	mov	r0, r4
   37a18:	add	r1, sp, #32
   37a1c:	bl	371ac <__assert_fail@plt+0x249d4>
   37a20:	cmp	r0, #0
   37a24:	beq	3738c <__assert_fail@plt+0x24bb4>
   37a28:	cmp	r7, #0
   37a2c:	beq	3758c <__assert_fail@plt+0x24db4>
   37a30:	ldr	r0, [sp, #32]
   37a34:	ldr	r1, [r4]
   37a38:	rsb	r1, r0, r1
   37a3c:	bl	35e00 <__assert_fail@plt+0x23628>
   37a40:	mov	r1, r0
   37a44:	mov	r5, r0
   37a48:	ldr	r0, [r8]
   37a4c:	bl	35610 <__assert_fail@plt+0x22e38>
   37a50:	str	r0, [r7]
   37a54:	mov	r0, r5
   37a58:	bl	121f0 <free@plt>
   37a5c:	ldr	r0, [r7]
   37a60:	cmp	r0, #0
   37a64:	beq	37e94 <__assert_fail@plt+0x256bc>
   37a68:	cmp	r7, #0
   37a6c:	beq	3758c <__assert_fail@plt+0x24db4>
   37a70:	cmp	sl, #0
   37a74:	bne	37e38 <__assert_fail@plt+0x25660>
   37a78:	cmp	r9, #0
   37a7c:	beq	3758c <__assert_fail@plt+0x24db4>
   37a80:	ldr	r0, [r8]
   37a84:	ldr	r1, [r7]
   37a88:	bl	350dc <__assert_fail@plt+0x22904>
   37a8c:	str	r0, [r7]
   37a90:	b	3758c <__assert_fail@plt+0x24db4>
   37a94:	mov	r0, r5
   37a98:	bl	35d1c <__assert_fail@plt+0x23544>
   37a9c:	b	37a68 <__assert_fail@plt+0x25290>
   37aa0:	cmp	r7, #0
   37aa4:	beq	37ad8 <__assert_fail@plt+0x25300>
   37aa8:	cmp	fp, #0
   37aac:	movw	r3, #40232	; 0x9d28
   37ab0:	movt	r3, #5
   37ab4:	movw	r1, #40256	; 0x9d40
   37ab8:	ldr	r0, [r8]
   37abc:	movt	r1, #5
   37ac0:	movne	r1, r3
   37ac4:	bl	35610 <__assert_fail@plt+0x22e38>
   37ac8:	cmp	r0, #0
   37acc:	str	r0, [r7]
   37ad0:	beq	37ec4 <__assert_fail@plt+0x256ec>
   37ad4:	ldr	r1, [r4]
   37ad8:	add	r1, r1, #1
   37adc:	str	r1, [r4]
   37ae0:	b	37a68 <__assert_fail@plt+0x25290>
   37ae4:	cmp	r7, #0
   37ae8:	beq	37ad8 <__assert_fail@plt+0x25300>
   37aec:	movw	r1, #40336	; 0x9d90
   37af0:	ldr	r0, [r8]
   37af4:	movt	r1, #5
   37af8:	bl	35610 <__assert_fail@plt+0x22e38>
   37afc:	cmp	r0, #0
   37b00:	str	r0, [r7]
   37b04:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37b08:	ldr	r0, [r8]
   37b0c:	mov	r1, #2
   37b10:	mov	r2, #1
   37b14:	bl	34c24 <__assert_fail@plt+0x2244c>
   37b18:	str	r0, [r7]
   37b1c:	b	37ad4 <__assert_fail@plt+0x252fc>
   37b20:	cmp	r7, #0
   37b24:	beq	37ad8 <__assert_fail@plt+0x25300>
   37b28:	movw	r1, #37032	; 0x90a8
   37b2c:	ldr	r0, [r8]
   37b30:	movt	r1, #5
   37b34:	bl	35610 <__assert_fail@plt+0x22e38>
   37b38:	cmp	r0, #0
   37b3c:	str	r0, [r7]
   37b40:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37b44:	ldr	r0, [r8]
   37b48:	bl	34c18 <__assert_fail@plt+0x22440>
   37b4c:	str	r0, [r7]
   37b50:	b	37ad4 <__assert_fail@plt+0x252fc>
   37b54:	cmp	r7, #0
   37b58:	beq	37edc <__assert_fail@plt+0x25704>
   37b5c:	mov	r1, r4
   37b60:	mov	r0, r8
   37b64:	add	r2, sp, #32
   37b68:	bl	37ef8 <__assert_fail@plt+0x25720>
   37b6c:	cmp	r0, #0
   37b70:	beq	3738c <__assert_fail@plt+0x24bb4>
   37b74:	ldr	r4, [sp, #32]
   37b78:	mov	r0, r4
   37b7c:	bl	124e4 <strlen@plt>
   37b80:	ldr	r1, [r8, #4]
   37b84:	mov	ip, #9
   37b88:	mov	r2, r4
   37b8c:	add	r1, r1, #232	; 0xe8
   37b90:	mov	r3, r0
   37b94:	ldr	r0, [r8]
   37b98:	str	ip, [sp]
   37b9c:	bl	366b0 <__assert_fail@plt+0x23ed8>
   37ba0:	str	r0, [r7]
   37ba4:	ldr	r0, [sp, #32]
   37ba8:	bl	121f0 <free@plt>
   37bac:	ldr	r3, [r7]
   37bb0:	cmp	r3, #0
   37bb4:	bne	37a68 <__assert_fail@plt+0x25290>
   37bb8:	b	3738c <__assert_fail@plt+0x24bb4>
   37bbc:	cmp	r7, #0
   37bc0:	beq	37ad8 <__assert_fail@plt+0x25300>
   37bc4:	cmp	fp, #0
   37bc8:	movw	r3, #40304	; 0x9d70
   37bcc:	movt	r3, #5
   37bd0:	movw	r1, #40324	; 0x9d84
   37bd4:	ldr	r0, [r8]
   37bd8:	movt	r1, #5
   37bdc:	movne	r1, r3
   37be0:	bl	35610 <__assert_fail@plt+0x22e38>
   37be4:	cmp	r0, #0
   37be8:	str	r0, [r7]
   37bec:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37bf0:	mov	r2, fp
   37bf4:	ldr	r0, [r8]
   37bf8:	mov	r1, #2
   37bfc:	bl	34c24 <__assert_fail@plt+0x2244c>
   37c00:	str	r0, [r7]
   37c04:	b	37ad4 <__assert_fail@plt+0x252fc>
   37c08:	cmp	r7, #0
   37c0c:	beq	37ad8 <__assert_fail@plt+0x25300>
   37c10:	movw	r1, #39688	; 0x9b08
   37c14:	ldr	r0, [r8]
   37c18:	movt	r1, #5
   37c1c:	bl	35610 <__assert_fail@plt+0x22e38>
   37c20:	cmp	r0, #0
   37c24:	str	r0, [r7]
   37c28:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37c2c:	ldr	r0, [r8]
   37c30:	mov	r1, #8
   37c34:	bl	34c40 <__assert_fail@plt+0x22468>
   37c38:	str	r0, [r7]
   37c3c:	b	37ad4 <__assert_fail@plt+0x252fc>
   37c40:	cmp	r7, #0
   37c44:	beq	37ad8 <__assert_fail@plt+0x25300>
   37c48:	movw	r1, #40292	; 0x9d64
   37c4c:	movw	r3, #40272	; 0x9d50
   37c50:	movt	r1, #5
   37c54:	movt	r3, #5
   37c58:	cmp	fp, #0
   37c5c:	ldr	r0, [r8]
   37c60:	movne	r1, r3
   37c64:	bl	35610 <__assert_fail@plt+0x22e38>
   37c68:	cmp	r0, #0
   37c6c:	str	r0, [r7]
   37c70:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37c74:	mov	r2, fp
   37c78:	ldr	r0, [r8]
   37c7c:	mov	r1, #4
   37c80:	bl	34c24 <__assert_fail@plt+0x2244c>
   37c84:	str	r0, [r7]
   37c88:	b	37ad4 <__assert_fail@plt+0x252fc>
   37c8c:	cmp	r7, #0
   37c90:	beq	37ad8 <__assert_fail@plt+0x25300>
   37c94:	movw	r1, #39600	; 0x9ab0
   37c98:	movw	r3, #39656	; 0x9ae8
   37c9c:	movt	r1, #5
   37ca0:	movt	r3, #5
   37ca4:	b	37c58 <__assert_fail@plt+0x25480>
   37ca8:	cmp	r7, #0
   37cac:	beq	37ad8 <__assert_fail@plt+0x25300>
   37cb0:	movw	r1, #37204	; 0x9154
   37cb4:	ldr	r0, [r8]
   37cb8:	movt	r1, #5
   37cbc:	bl	35610 <__assert_fail@plt+0x22e38>
   37cc0:	cmp	r0, #0
   37cc4:	str	r0, [r7]
   37cc8:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37ccc:	ldr	r0, [r8]
   37cd0:	mov	r1, #4
   37cd4:	bl	34c40 <__assert_fail@plt+0x22468>
   37cd8:	str	r0, [r7]
   37cdc:	b	37ad4 <__assert_fail@plt+0x252fc>
   37ce0:	cmp	r7, #0
   37ce4:	beq	37ad8 <__assert_fail@plt+0x25300>
   37ce8:	movw	r1, #37212	; 0x915c
   37cec:	ldr	r0, [r8]
   37cf0:	movt	r1, #5
   37cf4:	bl	35610 <__assert_fail@plt+0x22e38>
   37cf8:	cmp	r0, #0
   37cfc:	str	r0, [r7]
   37d00:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37d04:	b	37c2c <__assert_fail@plt+0x25454>
   37d08:	cmp	r7, #0
   37d0c:	beq	37ad8 <__assert_fail@plt+0x25300>
   37d10:	cmp	fp, #0
   37d14:	ldr	r0, [r8]
   37d18:	movwne	r1, #39612	; 0x9abc
   37d1c:	movtne	r1, #5
   37d20:	bne	37d3c <__assert_fail@plt+0x25564>
   37d24:	movw	r3, #39628	; 0x9acc
   37d28:	cmp	r2, #0
   37d2c:	movt	r3, #5
   37d30:	movw	r1, #55848	; 0xda28
   37d34:	movt	r1, #5
   37d38:	movne	r1, r3
   37d3c:	bl	35610 <__assert_fail@plt+0x22e38>
   37d40:	cmp	r0, #0
   37d44:	str	r0, [r7]
   37d48:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37d4c:	mov	r2, fp
   37d50:	ldr	r0, [r8]
   37d54:	mov	r1, #1
   37d58:	bl	34c24 <__assert_fail@plt+0x2244c>
   37d5c:	str	r0, [r7]
   37d60:	b	37ad4 <__assert_fail@plt+0x252fc>
   37d64:	cmp	r7, #0
   37d68:	beq	37ad8 <__assert_fail@plt+0x25300>
   37d6c:	movw	r1, #40056	; 0x9c78
   37d70:	ldr	r0, [r8]
   37d74:	movt	r1, #5
   37d78:	bl	35610 <__assert_fail@plt+0x22e38>
   37d7c:	cmp	r0, #0
   37d80:	str	r0, [r7]
   37d84:	bne	37ad4 <__assert_fail@plt+0x252fc>
   37d88:	ldr	r0, [r8]
   37d8c:	mov	r1, #4
   37d90:	bl	34c48 <__assert_fail@plt+0x22470>
   37d94:	str	r0, [r7]
   37d98:	b	37ad4 <__assert_fail@plt+0x252fc>
   37d9c:	ldr	ip, [r8, #16]
   37da0:	add	r1, sp, #40	; 0x28
   37da4:	mov	r2, r7
   37da8:	mov	r0, r8
   37dac:	ldr	r3, [ip, r3, lsl #3]
   37db0:	str	r3, [r1, #-8]!
   37db4:	bl	3725c <__assert_fail@plt+0x24a84>
   37db8:	cmp	r0, #0
   37dbc:	beq	3738c <__assert_fail@plt+0x24bb4>
   37dc0:	b	3758c <__assert_fail@plt+0x24db4>
   37dc4:	add	r0, r0, #1
   37dc8:	mov	r1, r4
   37dcc:	str	r0, [r4]
   37dd0:	mov	r2, r7
   37dd4:	mov	r0, r8
   37dd8:	bl	3725c <__assert_fail@plt+0x24a84>
   37ddc:	cmp	r0, #0
   37de0:	beq	3738c <__assert_fail@plt+0x24bb4>
   37de4:	cmp	r7, #0
   37de8:	beq	3758c <__assert_fail@plt+0x24db4>
   37dec:	movw	r1, #39600	; 0x9ab0
   37df0:	ldr	r0, [r8]
   37df4:	movt	r1, #5
   37df8:	bl	35610 <__assert_fail@plt+0x22e38>
   37dfc:	subs	r2, r0, #0
   37e00:	beq	37e80 <__assert_fail@plt+0x256a8>
   37e04:	ldr	r0, [r8]
   37e08:	mov	r3, #0
   37e0c:	ldr	r1, [r7]
   37e10:	mov	r4, #0
   37e14:	str	r3, [sp, #12]
   37e18:	mov	r5, #0
   37e1c:	str	r3, [sp, #16]
   37e20:	str	r9, [sp, #8]
   37e24:	strd	r4, [sp]
   37e28:	bl	34ed8 <__assert_fail@plt+0x22700>
   37e2c:	mov	r3, #1
   37e30:	str	r0, [r7]
   37e34:	b	3766c <__assert_fail@plt+0x24e94>
   37e38:	ldr	r0, [r8]
   37e3c:	ldr	r1, [r7]
   37e40:	bl	350b0 <__assert_fail@plt+0x228d8>
   37e44:	str	r0, [r7]
   37e48:	b	37a78 <__assert_fail@plt+0x252a0>
   37e4c:	add	r1, r3, #1
   37e50:	str	r1, [r4]
   37e54:	ldrb	r2, [r3, #1]
   37e58:	mov	r3, r1
   37e5c:	b	37500 <__assert_fail@plt+0x24d28>
   37e60:	add	r2, sp, #24
   37e64:	ldr	r1, [r7]
   37e68:	ldm	r2, {r2, r3, ip}
   37e6c:	str	ip, [sp]
   37e70:	bl	35044 <__assert_fail@plt+0x2286c>
   37e74:	str	r0, [r7]
   37e78:	b	3758c <__assert_fail@plt+0x24db4>
   37e7c:	bl	122b0 <__stack_chk_fail@plt>
   37e80:	ldr	r0, [r8]
   37e84:	mov	r1, #4
   37e88:	bl	34c24 <__assert_fail@plt+0x2244c>
   37e8c:	mov	r2, r0
   37e90:	b	37e04 <__assert_fail@plt+0x2562c>
   37e94:	ldr	r3, [r4]
   37e98:	ldr	r1, [r8, #4]
   37e9c:	ldr	r2, [sp, #32]
   37ea0:	str	r0, [sp]
   37ea4:	add	r1, r1, #232	; 0xe8
   37ea8:	rsb	r3, r2, r3
   37eac:	ldr	r0, [r8]
   37eb0:	bl	366b0 <__assert_fail@plt+0x23ed8>
   37eb4:	cmp	r0, #0
   37eb8:	str	r0, [r7]
   37ebc:	bne	37a68 <__assert_fail@plt+0x25290>
   37ec0:	b	3738c <__assert_fail@plt+0x24bb4>
   37ec4:	mov	r2, fp
   37ec8:	ldr	r0, [r8]
   37ecc:	mov	r1, #8
   37ed0:	bl	34c24 <__assert_fail@plt+0x2244c>
   37ed4:	str	r0, [r7]
   37ed8:	b	37ad4 <__assert_fail@plt+0x252fc>
   37edc:	mov	r0, r8
   37ee0:	mov	r1, r4
   37ee4:	mov	r2, r7
   37ee8:	bl	37ef8 <__assert_fail@plt+0x25720>
   37eec:	cmp	r0, #0
   37ef0:	bne	3758c <__assert_fail@plt+0x24db4>
   37ef4:	b	3738c <__assert_fail@plt+0x24bb4>
   37ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37efc:	movw	r6, #65176	; 0xfe98
   37f00:	ldr	r7, [r1]
   37f04:	movt	r6, #6
   37f08:	mov	r4, r1
   37f0c:	sub	sp, sp, #28
   37f10:	ldr	r3, [r6]
   37f14:	add	r1, r7, #1
   37f18:	str	r1, [r4]
   37f1c:	movw	r5, #65192	; 0xfea8
   37f20:	ldrb	r1, [r7, #1]
   37f24:	movt	r5, #6
   37f28:	str	r3, [sp, #20]
   37f2c:	mov	fp, r0
   37f30:	str	r2, [sp, #4]
   37f34:	lsl	r3, r1, #1
   37f38:	ldrh	r3, [r5, r3]
   37f3c:	and	r3, r3, #4
   37f40:	uxth	r3, r3
   37f44:	cmp	r3, #0
   37f48:	beq	382f0 <__assert_fail@plt+0x25b18>
   37f4c:	add	r3, r7, #2
   37f50:	mov	r8, #0
   37f54:	add	r8, r8, r8, lsl #2
   37f58:	str	r3, [r4]
   37f5c:	mov	sl, r3
   37f60:	add	r8, r1, r8, lsl #1
   37f64:	ldrb	r1, [r3], #1
   37f68:	sub	r8, r8, #48	; 0x30
   37f6c:	lsl	r2, r1, #1
   37f70:	ldrh	r9, [r5, r2]
   37f74:	and	r9, r9, #4
   37f78:	uxth	r9, r9
   37f7c:	cmp	r9, #0
   37f80:	bne	37f54 <__assert_fail@plt+0x2577c>
   37f84:	cmp	r8, #0
   37f88:	str	r8, [sp, #16]
   37f8c:	beq	37fa0 <__assert_fail@plt+0x257c8>
   37f90:	mov	r0, sl
   37f94:	bl	124e4 <strlen@plt>
   37f98:	cmp	r0, r8
   37f9c:	bcs	37fc4 <__assert_fail@plt+0x257ec>
   37fa0:	mov	r0, r7
   37fa4:	bl	35d1c <__assert_fail@plt+0x23544>
   37fa8:	mov	r0, #0
   37fac:	ldr	r2, [sp, #20]
   37fb0:	ldr	r3, [r6]
   37fb4:	cmp	r2, r3
   37fb8:	bne	384f8 <__assert_fail@plt+0x25d20>
   37fbc:	add	sp, sp, #28
   37fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37fc4:	add	r8, sl, r8
   37fc8:	mov	r0, r4
   37fcc:	str	r8, [r4]
   37fd0:	add	r1, sp, #16
   37fd4:	bl	35c28 <__assert_fail@plt+0x23450>
   37fd8:	subs	r8, r0, #0
   37fdc:	beq	37fa0 <__assert_fail@plt+0x257c8>
   37fe0:	ldr	r3, [sp, #16]
   37fe4:	cmp	r3, #0
   37fe8:	strne	r7, [sp, #12]
   37fec:	strne	r6, [sp, #8]
   37ff0:	beq	38220 <__assert_fail@plt+0x25a48>
   37ff4:	ldr	r8, [r4]
   37ff8:	ldrb	r3, [r8]
   37ffc:	cmp	r3, #90	; 0x5a
   38000:	beq	381e8 <__assert_fail@plt+0x25a10>
   38004:	mov	r0, fp
   38008:	mov	r1, r4
   3800c:	mov	r2, #0
   38010:	bl	3725c <__assert_fail@plt+0x24a84>
   38014:	cmp	r0, #0
   38018:	beq	383a4 <__assert_fail@plt+0x25bcc>
   3801c:	ldrb	ip, [r8]
   38020:	mov	r3, #0
   38024:	mov	r7, r3
   38028:	mov	sl, r3
   3802c:	mov	r0, r3
   38030:	mov	r1, r3
   38034:	mov	r6, r3
   38038:	cmp	ip, #0
   3803c:	beq	3813c <__assert_fail@plt+0x25964>
   38040:	cmp	r3, #0
   38044:	bne	3813c <__assert_fail@plt+0x25964>
   38048:	sub	r2, ip, #67	; 0x43
   3804c:	cmp	r2, #51	; 0x33
   38050:	ldrls	pc, [pc, r2, lsl #2]
   38054:	b	381b8 <__assert_fail@plt+0x259e0>
   38058:	andeq	r8, r3, r4, asr #3
   3805c:			; <UNDEFINED> instruction: 0x000381b8
   38060:			; <UNDEFINED> instruction: 0x000381b8
   38064:	andeq	r8, r3, r4, asr #3
   38068:			; <UNDEFINED> instruction: 0x000381b8
   3806c:			; <UNDEFINED> instruction: 0x000381b8
   38070:			; <UNDEFINED> instruction: 0x000381b8
   38074:			; <UNDEFINED> instruction: 0x000381b8
   38078:			; <UNDEFINED> instruction: 0x000381b8
   3807c:			; <UNDEFINED> instruction: 0x000381b8
   38080:	andeq	r8, r3, r4, asr #3
   38084:			; <UNDEFINED> instruction: 0x000381b8
   38088:	andeq	r8, r3, r4, asr #3
   3808c:	andeq	r8, r3, r8, lsr r1
   38090:			; <UNDEFINED> instruction: 0x000381b8
   38094:	andeq	r8, r3, r8, lsr r1
   38098:	andeq	r8, r3, r4, asr #3
   3809c:	andeq	r8, r3, r8, lsr #2
   380a0:	andeq	r8, r3, r4, asr #3
   380a4:	andeq	r8, r3, r4, asr #3
   380a8:			; <UNDEFINED> instruction: 0x000381b8
   380ac:			; <UNDEFINED> instruction: 0x000381b8
   380b0:			; <UNDEFINED> instruction: 0x000381b8
   380b4:			; <UNDEFINED> instruction: 0x000381b8
   380b8:			; <UNDEFINED> instruction: 0x000381b8
   380bc:			; <UNDEFINED> instruction: 0x000381b8
   380c0:			; <UNDEFINED> instruction: 0x000381b8
   380c4:			; <UNDEFINED> instruction: 0x000381b8
   380c8:			; <UNDEFINED> instruction: 0x000381b8
   380cc:			; <UNDEFINED> instruction: 0x000381b8
   380d0:			; <UNDEFINED> instruction: 0x000381b8
   380d4:	ldrdeq	r8, [r3], -ip
   380d8:	ldrdeq	r8, [r3], -r0
   380dc:	andeq	r8, r3, ip, lsr #2
   380e0:			; <UNDEFINED> instruction: 0x000381b8
   380e4:	andeq	r8, r3, ip, lsr #2
   380e8:			; <UNDEFINED> instruction: 0x000381b8
   380ec:			; <UNDEFINED> instruction: 0x000381b8
   380f0:			; <UNDEFINED> instruction: 0x000381b8
   380f4:			; <UNDEFINED> instruction: 0x000381b8
   380f8:			; <UNDEFINED> instruction: 0x000381b8
   380fc:			; <UNDEFINED> instruction: 0x000381b8
   38100:			; <UNDEFINED> instruction: 0x000381b8
   38104:			; <UNDEFINED> instruction: 0x000381b8
   38108:			; <UNDEFINED> instruction: 0x000381b8
   3810c:	andeq	r8, r3, r8, lsr r1
   38110:			; <UNDEFINED> instruction: 0x000381b8
   38114:	andeq	r8, r3, ip, lsr #2
   38118:			; <UNDEFINED> instruction: 0x000381b8
   3811c:			; <UNDEFINED> instruction: 0x000381b8
   38120:			; <UNDEFINED> instruction: 0x000381b8
   38124:	andeq	r8, r3, r8, lsr #2
   38128:	bl	12790 <abort@plt>
   3812c:	mov	r3, #1
   38130:	mov	r1, r3
   38134:	b	38038 <__assert_fail@plt+0x25860>
   38138:	mov	r6, #1
   3813c:	cmp	r0, #0
   38140:	bne	382f8 <__assert_fail@plt+0x25b20>
   38144:	cmp	sl, #0
   38148:	beq	38348 <__assert_fail@plt+0x25b70>
   3814c:	ldr	r1, [r4]
   38150:	ldrb	r2, [r1]
   38154:	cmp	r2, #109	; 0x6d
   38158:	addeq	r3, r1, #1
   3815c:	streq	r3, [r4]
   38160:	ldrbeq	r2, [r1, #1]
   38164:	moveq	r1, r3
   38168:	lsl	r3, r2, #1
   3816c:	ldrh	r3, [r5, r3]
   38170:	tst	r3, #4
   38174:	beq	381ac <__assert_fail@plt+0x259d4>
   38178:	add	r1, r1, #1
   3817c:	mov	r3, #0
   38180:	add	r3, r3, r3, lsl #2
   38184:	str	r1, [r4]
   38188:	add	r3, r2, r3, lsl #1
   3818c:	ldrb	r2, [r1], #1
   38190:	sub	r3, r3, #48	; 0x30
   38194:	lsl	r0, r2, #1
   38198:	ldrh	r0, [r5, r0]
   3819c:	tst	r0, #4
   381a0:	bne	38180 <__assert_fail@plt+0x259a8>
   381a4:	cmp	r3, #0
   381a8:	bne	38208 <__assert_fail@plt+0x25a30>
   381ac:	ldr	r7, [sp, #12]
   381b0:	ldr	r6, [sp, #8]
   381b4:	b	37fa0 <__assert_fail@plt+0x257c8>
   381b8:	mov	r3, #1
   381bc:	mov	r0, r3
   381c0:	b	38038 <__assert_fail@plt+0x25860>
   381c4:	ldrb	ip, [r8, #1]
   381c8:	add	r8, r8, #1
   381cc:	b	38038 <__assert_fail@plt+0x25860>
   381d0:	mov	r3, #1
   381d4:	mov	sl, r3
   381d8:	b	38038 <__assert_fail@plt+0x25860>
   381dc:	mov	r3, #1
   381e0:	mov	r7, r3
   381e4:	b	38038 <__assert_fail@plt+0x25860>
   381e8:	add	r8, r8, #1
   381ec:	mov	r0, fp
   381f0:	str	r8, [r4]
   381f4:	mov	r1, r4
   381f8:	mov	r2, #0
   381fc:	bl	3725c <__assert_fail@plt+0x24a84>
   38200:	cmp	r0, #0
   38204:	beq	383a4 <__assert_fail@plt+0x25bcc>
   38208:	ldr	r3, [sp, #16]
   3820c:	add	r9, r9, #1
   38210:	cmp	r3, r9
   38214:	bhi	37ff4 <__assert_fail@plt+0x2581c>
   38218:	ldr	r7, [sp, #12]
   3821c:	ldr	r6, [sp, #8]
   38220:	ldr	r3, [sp, #4]
   38224:	cmp	r3, #0
   38228:	beq	383cc <__assert_fail@plt+0x25bf4>
   3822c:	ldr	r1, [r4]
   38230:	mov	r0, r7
   38234:	rsb	r1, r7, r1
   38238:	bl	35e00 <__assert_fail@plt+0x23628>
   3823c:	mov	r2, #0
   38240:	mov	r1, r0
   38244:	mov	r4, r0
   38248:	movw	r0, #40348	; 0x9d9c
   3824c:	movt	r0, #5
   38250:	bl	122ec <concat@plt>
   38254:	mov	r5, r0
   38258:	mov	r0, r4
   3825c:	bl	121f0 <free@plt>
   38260:	mov	r1, #2
   38264:	mov	r0, r5
   38268:	bl	1261c <cplus_demangle@plt>
   3826c:	mov	r4, r0
   38270:	mov	r0, r5
   38274:	bl	121f0 <free@plt>
   38278:	cmp	r4, #0
   3827c:	beq	37fa0 <__assert_fail@plt+0x257c8>
   38280:	movw	r1, #40364	; 0x9dac
   38284:	mov	r0, r4
   38288:	movt	r1, #5
   3828c:	bl	1213c <strstr@plt>
   38290:	subs	r5, r0, #0
   38294:	beq	384e0 <__assert_fail@plt+0x25d08>
   38298:	cmp	r4, r5
   3829c:	beq	38540 <__assert_fail@plt+0x25d68>
   382a0:	sub	r5, r5, #1
   382a4:	sub	r3, r4, #1
   382a8:	mov	r2, r4
   382ac:	b	382c0 <__assert_fail@plt+0x25ae8>
   382b0:	strb	r1, [r2]
   382b4:	add	r2, r2, #1
   382b8:	cmp	r3, r5
   382bc:	beq	383b0 <__assert_fail@plt+0x25bd8>
   382c0:	ldrb	r1, [r3, #1]!
   382c4:	cmp	r1, #32
   382c8:	bne	382b0 <__assert_fail@plt+0x25ad8>
   382cc:	ldrb	r0, [r3, #1]
   382d0:	cmp	r0, #62	; 0x3e
   382d4:	bne	382b8 <__assert_fail@plt+0x25ae0>
   382d8:	cmp	r4, r3
   382dc:	bcs	382b8 <__assert_fail@plt+0x25ae0>
   382e0:	ldrb	r0, [r3, #-1]
   382e4:	cmp	r0, #62	; 0x3e
   382e8:	bne	382b8 <__assert_fail@plt+0x25ae0>
   382ec:	b	382b0 <__assert_fail@plt+0x25ad8>
   382f0:	str	r3, [sp, #16]
   382f4:	b	37fa0 <__assert_fail@plt+0x257c8>
   382f8:	ldr	r3, [r4]
   382fc:	ldrb	r2, [r3]
   38300:	cmp	r2, #109	; 0x6d
   38304:	addeq	r1, r3, #1
   38308:	streq	r1, [r4]
   3830c:	ldrbeq	r2, [r3, #1]
   38310:	moveq	r3, r1
   38314:	lsl	r2, r2, #1
   38318:	ldrh	r2, [r5, r2]
   3831c:	tst	r2, #4
   38320:	beq	38208 <__assert_fail@plt+0x25a30>
   38324:	add	r3, r3, #1
   38328:	str	r3, [r4]
   3832c:	add	r3, r3, #1
   38330:	ldrb	r2, [r3, #-1]
   38334:	lsl	r2, r2, #1
   38338:	ldrh	r2, [r5, r2]
   3833c:	tst	r2, #4
   38340:	bne	38328 <__assert_fail@plt+0x25b50>
   38344:	b	38208 <__assert_fail@plt+0x25a30>
   38348:	cmp	r7, #0
   3834c:	beq	383d4 <__assert_fail@plt+0x25bfc>
   38350:	ldr	r2, [r4]
   38354:	ldrb	r3, [r2]
   38358:	lsl	r1, r3, #1
   3835c:	ldrh	r1, [r5, r1]
   38360:	tst	r1, #4
   38364:	beq	38208 <__assert_fail@plt+0x25a30>
   38368:	add	r2, r2, #1
   3836c:	add	sl, sl, sl, lsl #2
   38370:	str	r2, [r4]
   38374:	add	sl, r3, sl, lsl #1
   38378:	ldrb	r3, [r2], #1
   3837c:	sub	sl, sl, #48	; 0x30
   38380:	lsl	r1, r3, #1
   38384:	ldrh	r8, [r5, r1]
   38388:	and	r8, r8, #4
   3838c:	uxth	r8, r8
   38390:	cmp	r8, #0
   38394:	bne	3836c <__assert_fail@plt+0x25b94>
   38398:	cmp	sl, #1
   3839c:	bls	38208 <__assert_fail@plt+0x25a30>
   383a0:	b	381ac <__assert_fail@plt+0x259d4>
   383a4:	ldr	r6, [sp, #8]
   383a8:	mov	r0, #0
   383ac:	b	37fac <__assert_fail@plt+0x257d4>
   383b0:	rsb	r1, r4, r2
   383b4:	mov	r0, r4
   383b8:	bl	35e00 <__assert_fail@plt+0x23628>
   383bc:	ldr	r3, [sp, #4]
   383c0:	str	r0, [r3]
   383c4:	mov	r0, r4
   383c8:	bl	121f0 <free@plt>
   383cc:	mov	r0, #1
   383d0:	b	37fac <__assert_fail@plt+0x257d4>
   383d4:	cmp	r1, #0
   383d8:	beq	38480 <__assert_fail@plt+0x25ca8>
   383dc:	ldr	r2, [r4]
   383e0:	ldrb	r1, [r2]
   383e4:	cmp	r1, #109	; 0x6d
   383e8:	addeq	r3, r2, #1
   383ec:	streq	r3, [r4]
   383f0:	ldrbeq	r1, [r2, #1]
   383f4:	moveq	r2, r3
   383f8:	lsl	r3, r1, #1
   383fc:	ldrh	r3, [r5, r3]
   38400:	tst	r3, #4
   38404:	beq	38428 <__assert_fail@plt+0x25c50>
   38408:	add	r3, r2, #1
   3840c:	str	r3, [r4]
   38410:	mov	r2, r3
   38414:	ldrb	r1, [r3], #1
   38418:	lsl	r0, r1, #1
   3841c:	ldrh	r0, [r5, r0]
   38420:	tst	r0, #4
   38424:	bne	3840c <__assert_fail@plt+0x25c34>
   38428:	cmp	r1, #46	; 0x2e
   3842c:	beq	384fc <__assert_fail@plt+0x25d24>
   38430:	ldr	r3, [r4]
   38434:	ldrb	r2, [r3]
   38438:	cmp	r2, #101	; 0x65
   3843c:	bne	38208 <__assert_fail@plt+0x25a30>
   38440:	add	r2, r3, #1
   38444:	str	r2, [r4]
   38448:	ldrb	r2, [r3, #1]
   3844c:	lsl	r2, r2, #1
   38450:	ldrh	r2, [r5, r2]
   38454:	tst	r2, #4
   38458:	beq	38208 <__assert_fail@plt+0x25a30>
   3845c:	add	r3, r3, #2
   38460:	str	r3, [r4]
   38464:	add	r3, r3, #1
   38468:	ldrb	r2, [r3, #-1]
   3846c:	lsl	r2, r2, #1
   38470:	ldrh	r2, [r5, r2]
   38474:	tst	r2, #4
   38478:	bne	38460 <__assert_fail@plt+0x25c88>
   3847c:	b	38208 <__assert_fail@plt+0x25a30>
   38480:	cmp	r6, #0
   38484:	beq	38208 <__assert_fail@plt+0x25a30>
   38488:	ldr	r3, [r4]
   3848c:	ldrb	r2, [r3]
   38490:	lsl	r0, r2, #1
   38494:	ldrh	r0, [r5, r0]
   38498:	tst	r0, #4
   3849c:	beq	381ac <__assert_fail@plt+0x259d4>
   384a0:	add	r3, r3, #1
   384a4:	add	r1, r1, r1, lsl #2
   384a8:	str	r3, [r4]
   384ac:	mov	r0, r3
   384b0:	add	r1, r2, r1, lsl #1
   384b4:	ldrb	r2, [r3], #1
   384b8:	sub	r1, r1, #48	; 0x30
   384bc:	lsl	ip, r2, #1
   384c0:	ldrh	ip, [r5, ip]
   384c4:	tst	ip, #4
   384c8:	bne	384a4 <__assert_fail@plt+0x25ccc>
   384cc:	cmp	r1, #0
   384d0:	beq	381ac <__assert_fail@plt+0x259d4>
   384d4:	add	r1, r0, r1
   384d8:	str	r1, [r4]
   384dc:	b	38208 <__assert_fail@plt+0x25a30>
   384e0:	mov	r0, r7
   384e4:	bl	35d1c <__assert_fail@plt+0x23544>
   384e8:	mov	r0, r4
   384ec:	bl	121f0 <free@plt>
   384f0:	mov	r0, r5
   384f4:	b	37fac <__assert_fail@plt+0x257d4>
   384f8:	bl	122b0 <__stack_chk_fail@plt>
   384fc:	add	r3, r2, #1
   38500:	str	r3, [r4]
   38504:	ldrb	r1, [r2, #1]
   38508:	lsl	r0, r1, #1
   3850c:	ldrh	r0, [r5, r0]
   38510:	tst	r0, #4
   38514:	beq	38548 <__assert_fail@plt+0x25d70>
   38518:	add	r1, r2, #2
   3851c:	str	r1, [r4]
   38520:	mov	r3, r1
   38524:	ldrb	r2, [r1]
   38528:	add	r1, r1, #1
   3852c:	lsl	r0, r2, #1
   38530:	ldrh	r0, [r5, r0]
   38534:	tst	r0, #4
   38538:	bne	3851c <__assert_fail@plt+0x25d44>
   3853c:	b	38438 <__assert_fail@plt+0x25c60>
   38540:	mov	r1, #0
   38544:	b	383b4 <__assert_fail@plt+0x25bdc>
   38548:	mov	r2, r1
   3854c:	b	38438 <__assert_fail@plt+0x25c60>
   38550:	ldr	ip, [r1]
   38554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38558:	sub	sp, sp, #36	; 0x24
   3855c:	mov	r6, r1
   38560:	mov	r7, r0
   38564:	str	ip, [sp, #16]
   38568:	movw	ip, #65176	; 0xfe98
   3856c:	movt	ip, #6
   38570:	str	ip, [sp, #12]
   38574:	str	r2, [sp, #20]
   38578:	ldr	r3, [ip]
   3857c:	ldr	ip, [sp, #16]
   38580:	str	r3, [sp, #28]
   38584:	ldrb	fp, [ip, #1]
   38588:	cmp	fp, #49	; 0x31
   3858c:	bcc	38624 <__assert_fail@plt+0x25e4c>
   38590:	cmp	fp, #57	; 0x39
   38594:	bls	3864c <__assert_fail@plt+0x25e74>
   38598:	cmp	fp, #95	; 0x5f
   3859c:	bne	38624 <__assert_fail@plt+0x25e4c>
   385a0:	ldrb	r3, [ip, #2]
   385a4:	movw	r4, #65192	; 0xfea8
   385a8:	movt	r4, #6
   385ac:	lsl	r2, r3, #1
   385b0:	ldrh	r2, [r4, r2]
   385b4:	tst	r2, #4
   385b8:	beq	38624 <__assert_fail@plt+0x25e4c>
   385bc:	cmp	r3, #48	; 0x30
   385c0:	beq	38624 <__assert_fail@plt+0x25e4c>
   385c4:	ldr	ip, [sp, #16]
   385c8:	mov	r2, #10
   385cc:	mov	r1, #0
   385d0:	add	r5, ip, #2
   385d4:	mov	r0, r5
   385d8:	bl	12184 <strtol@plt>
   385dc:	ldr	ip, [sp, #16]
   385e0:	ldrb	r2, [ip, #2]
   385e4:	lsl	r3, r2, #1
   385e8:	ldrh	r3, [r4, r3]
   385ec:	tst	r3, #4
   385f0:	beq	38610 <__assert_fail@plt+0x25e38>
   385f4:	add	r3, ip, #3
   385f8:	mov	r5, r3
   385fc:	ldrb	r2, [r3], #1
   38600:	lsl	r1, r2, #1
   38604:	ldrh	r1, [r4, r1]
   38608:	tst	r1, #4
   3860c:	bne	385f8 <__assert_fail@plt+0x25e20>
   38610:	cmp	r2, #95	; 0x5f
   38614:	addeq	r5, r5, #1
   38618:	moveq	fp, r0
   3861c:	streq	r5, [r6]
   38620:	beq	3866c <__assert_fail@plt+0x25e94>
   38624:	ldr	r0, [sp, #16]
   38628:	bl	35d1c <__assert_fail@plt+0x23544>
   3862c:	mov	r0, #0
   38630:	ldr	ip, [sp, #12]
   38634:	ldr	r2, [sp, #28]
   38638:	ldr	r3, [ip]
   3863c:	cmp	r2, r3
   38640:	bne	388b4 <__assert_fail@plt+0x260dc>
   38644:	add	sp, sp, #36	; 0x24
   38648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3864c:	ldr	ip, [sp, #16]
   38650:	sub	fp, fp, #48	; 0x30
   38654:	ldrb	r3, [ip, #2]
   38658:	cmp	r3, #95	; 0x5f
   3865c:	addeq	r3, ip, #1
   38660:	ldrne	r3, [sp, #16]
   38664:	add	r3, r3, #2
   38668:	str	r3, [r1]
   3866c:	movw	r9, #65192	; 0xfea8
   38670:	sub	fp, fp, #1
   38674:	movt	r9, #6
   38678:	mov	r5, #0
   3867c:	cmn	fp, #1
   38680:	beq	3885c <__assert_fail@plt+0x26084>
   38684:	ldr	r3, [r6]
   38688:	ldrb	r2, [r3]
   3868c:	cmp	r2, #95	; 0x5f
   38690:	addeq	r1, r3, #1
   38694:	streq	r1, [r6]
   38698:	ldrbeq	r2, [r3, #1]
   3869c:	moveq	r3, r1
   386a0:	cmp	r2, #116	; 0x74
   386a4:	beq	387b8 <__assert_fail@plt+0x25fe0>
   386a8:	lsl	r1, r2, #1
   386ac:	ldrh	r4, [r9, r1]
   386b0:	and	r4, r4, #4
   386b4:	uxth	r4, r4
   386b8:	cmp	r4, #0
   386bc:	addne	r3, r3, #1
   386c0:	movne	r4, #0
   386c4:	beq	38704 <__assert_fail@plt+0x25f2c>
   386c8:	add	r4, r4, r4, lsl #2
   386cc:	str	r3, [r6]
   386d0:	mov	r0, r3
   386d4:	add	r4, r2, r4, lsl #1
   386d8:	ldrb	r2, [r3], #1
   386dc:	sub	r4, r4, #48	; 0x30
   386e0:	lsl	r1, r2, #1
   386e4:	ldrh	r8, [r9, r1]
   386e8:	and	r8, r8, #4
   386ec:	uxth	r8, r8
   386f0:	cmp	r8, #0
   386f4:	bne	386c8 <__assert_fail@plt+0x25ef0>
   386f8:	bl	124e4 <strlen@plt>
   386fc:	cmp	r0, r4
   38700:	bcc	38624 <__assert_fail@plt+0x25e4c>
   38704:	ldr	ip, [sp, #20]
   38708:	cmp	ip, #0
   3870c:	beq	387a4 <__assert_fail@plt+0x25fcc>
   38710:	cmp	r5, #0
   38714:	beq	38828 <__assert_fail@plt+0x26050>
   38718:	mov	r1, r5
   3871c:	ldr	r0, [r7]
   38720:	bl	35a10 <__assert_fail@plt+0x23238>
   38724:	subs	r8, r0, #0
   38728:	beq	38828 <__assert_fail@plt+0x26050>
   3872c:	mov	r1, r4
   38730:	ldr	r0, [r6]
   38734:	bl	35e00 <__assert_fail@plt+0x23628>
   38738:	ldr	r1, [r8]
   3873c:	cmp	r1, #0
   38740:	mov	sl, r0
   38744:	bne	3877c <__assert_fail@plt+0x25fa4>
   38748:	b	38820 <__assert_fail@plt+0x26048>
   3874c:	ldr	r0, [r7]
   38750:	mov	r1, r5
   38754:	bl	35844 <__assert_fail@plt+0x2306c>
   38758:	cmp	r0, #0
   3875c:	beq	38770 <__assert_fail@plt+0x25f98>
   38760:	mov	r1, sl
   38764:	bl	12178 <strcmp@plt>
   38768:	cmp	r0, #0
   3876c:	beq	3879c <__assert_fail@plt+0x25fc4>
   38770:	ldr	r1, [r8, #4]!
   38774:	cmp	r1, #0
   38778:	beq	38820 <__assert_fail@plt+0x26048>
   3877c:	ldr	r0, [r7]
   38780:	bl	35a50 <__assert_fail@plt+0x23278>
   38784:	subs	r5, r0, #0
   38788:	bne	3874c <__assert_fail@plt+0x25f74>
   3878c:	mov	r0, sl
   38790:	bl	121f0 <free@plt>
   38794:	mov	r0, r5
   38798:	b	38630 <__assert_fail@plt+0x25e58>
   3879c:	mov	r0, sl
   387a0:	bl	121f0 <free@plt>
   387a4:	ldr	r3, [r6]
   387a8:	add	r4, r3, r4
   387ac:	str	r4, [r6]
   387b0:	sub	fp, fp, #1
   387b4:	b	3867c <__assert_fail@plt+0x25ea4>
   387b8:	ldr	ip, [sp, #20]
   387bc:	cmp	ip, #0
   387c0:	beq	388b8 <__assert_fail@plt+0x260e0>
   387c4:	mov	r0, r7
   387c8:	mov	r1, r6
   387cc:	add	r2, sp, #24
   387d0:	bl	37ef8 <__assert_fail@plt+0x25720>
   387d4:	cmp	r0, #0
   387d8:	beq	3862c <__assert_fail@plt+0x25e54>
   387dc:	ldr	r4, [sp, #24]
   387e0:	mov	r0, r4
   387e4:	bl	124e4 <strlen@plt>
   387e8:	ldr	r1, [r7, #4]
   387ec:	mov	ip, #9
   387f0:	mov	r2, r4
   387f4:	add	r1, r1, #232	; 0xe8
   387f8:	mov	r3, r0
   387fc:	ldr	r0, [r7]
   38800:	str	ip, [sp]
   38804:	bl	366b0 <__assert_fail@plt+0x23ed8>
   38808:	mov	r5, r0
   3880c:	ldr	r0, [sp, #24]
   38810:	bl	121f0 <free@plt>
   38814:	cmp	r5, #0
   38818:	bne	387b0 <__assert_fail@plt+0x25fd8>
   3881c:	b	3862c <__assert_fail@plt+0x25e54>
   38820:	mov	r0, sl
   38824:	bl	121f0 <free@plt>
   38828:	cmp	fp, #0
   3882c:	beq	38870 <__assert_fail@plt+0x26098>
   38830:	ldr	r0, [r7]
   38834:	mov	r3, #9
   38838:	ldr	r1, [r7, #4]
   3883c:	ldr	r2, [r6]
   38840:	str	r3, [sp]
   38844:	add	r1, r1, #232	; 0xe8
   38848:	mov	r3, r4
   3884c:	bl	366b0 <__assert_fail@plt+0x23ed8>
   38850:	subs	r5, r0, #0
   38854:	bne	387a4 <__assert_fail@plt+0x25fcc>
   38858:	b	3862c <__assert_fail@plt+0x25e54>
   3885c:	ldr	ip, [sp, #20]
   38860:	mov	r0, #1
   38864:	cmp	ip, #0
   38868:	strne	r5, [ip]
   3886c:	b	38630 <__assert_fail@plt+0x25e58>
   38870:	mov	r1, r4
   38874:	ldr	r0, [r6]
   38878:	bl	35e00 <__assert_fail@plt+0x23628>
   3887c:	mov	r1, r0
   38880:	mov	r8, r0
   38884:	ldr	r0, [r7]
   38888:	bl	35610 <__assert_fail@plt+0x22e38>
   3888c:	mov	r5, r0
   38890:	mov	r0, r8
   38894:	bl	121f0 <free@plt>
   38898:	cmp	r5, #0
   3889c:	bne	387a4 <__assert_fail@plt+0x25fcc>
   388a0:	ldr	r0, [r7]
   388a4:	mov	r3, fp
   388a8:	ldr	r1, [r7, #4]
   388ac:	ldr	r2, [r6]
   388b0:	b	38840 <__assert_fail@plt+0x26068>
   388b4:	bl	122b0 <__stack_chk_fail@plt>
   388b8:	mov	r0, r7
   388bc:	mov	r1, r6
   388c0:	ldr	r2, [sp, #20]
   388c4:	bl	37ef8 <__assert_fail@plt+0x25720>
   388c8:	cmp	r0, #0
   388cc:	bne	387b0 <__assert_fail@plt+0x25fd8>
   388d0:	b	3862c <__assert_fail@plt+0x25e54>
   388d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   388d8:	movw	r4, #65176	; 0xfe98
   388dc:	movt	r4, #6
   388e0:	sub	sp, sp, #8
   388e4:	subs	r7, r2, #0
   388e8:	mov	r5, r1
   388ec:	ldr	ip, [r4]
   388f0:	mov	r6, r0
   388f4:	movne	r2, sp
   388f8:	moveq	r2, r7
   388fc:	mov	r8, r3
   38900:	ldr	r9, [r1]
   38904:	ldr	sl, [sp, #40]	; 0x28
   38908:	str	ip, [sp, #4]
   3890c:	bl	3725c <__assert_fail@plt+0x24a84>
   38910:	cmp	r0, #0
   38914:	bne	38934 <__assert_fail@plt+0x2615c>
   38918:	mov	r0, #0
   3891c:	ldr	r2, [sp, #4]
   38920:	ldr	r3, [r4]
   38924:	cmp	r2, r3
   38928:	bne	389c0 <__assert_fail@plt+0x261e8>
   3892c:	add	sp, sp, #8
   38930:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38934:	ldr	r2, [r5]
   38938:	mov	r1, r9
   3893c:	mov	r0, r6
   38940:	rsb	r2, r9, r2
   38944:	bl	35d9c <__assert_fail@plt+0x235c4>
   38948:	cmp	r0, #0
   3894c:	beq	38918 <__assert_fail@plt+0x26140>
   38950:	cmp	r7, #0
   38954:	beq	389b8 <__assert_fail@plt+0x261e0>
   38958:	ldr	r1, [sp]
   3895c:	cmp	r1, #0
   38960:	beq	38918 <__assert_fail@plt+0x26140>
   38964:	ldr	r3, [r8]
   38968:	ldr	r0, [sl]
   3896c:	add	r2, r3, #1
   38970:	cmp	r2, r0
   38974:	bcs	3898c <__assert_fail@plt+0x261b4>
   38978:	ldr	ip, [r7]
   3897c:	str	r1, [ip, r3, lsl #2]
   38980:	mov	r0, #1
   38984:	str	r2, [r8]
   38988:	b	3891c <__assert_fail@plt+0x26144>
   3898c:	add	r1, r0, #10
   38990:	ldr	r0, [r7]
   38994:	str	r1, [sl]
   38998:	lsl	r1, r1, #2
   3899c:	bl	122c8 <xrealloc@plt>
   389a0:	ldr	r3, [r8]
   389a4:	ldr	r1, [sp]
   389a8:	add	r2, r3, #1
   389ac:	mov	ip, r0
   389b0:	str	r0, [r7]
   389b4:	b	3897c <__assert_fail@plt+0x261a4>
   389b8:	mov	r0, #1
   389bc:	b	3891c <__assert_fail@plt+0x26144>
   389c0:	bl	122b0 <__stack_chk_fail@plt>
   389c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   389c8:	movw	r8, #65176	; 0xfe98
   389cc:	movt	r8, #6
   389d0:	subs	r5, r2, #0
   389d4:	mov	sl, r3
   389d8:	ldr	r3, [r1]
   389dc:	ldr	r2, [r8]
   389e0:	sub	sp, sp, #44	; 0x2c
   389e4:	mov	r7, r1
   389e8:	mov	fp, r0
   389ec:	str	r3, [sp, #12]
   389f0:	mov	r3, #10
   389f4:	str	r2, [sp, #36]	; 0x24
   389f8:	str	r3, [sp, #16]
   389fc:	beq	38b48 <__assert_fail@plt+0x26370>
   38a00:	mov	r0, #40	; 0x28
   38a04:	bl	12358 <xmalloc@plt>
   38a08:	mov	r3, #0
   38a0c:	str	r0, [r5]
   38a10:	ldr	r2, [r7]
   38a14:	str	r3, [sl]
   38a18:	add	r4, sp, #40	; 0x28
   38a1c:	add	r6, sp, #16
   38a20:	mov	r9, #1
   38a24:	mov	r3, #0
   38a28:	str	r3, [r4, #-20]!	; 0xffffffec
   38a2c:	ldrb	r3, [r2]
   38a30:	cmp	r3, #0
   38a34:	cmpne	r3, #95	; 0x5f
   38a38:	beq	38b5c <__assert_fail@plt+0x26384>
   38a3c:	cmp	r3, #101	; 0x65
   38a40:	beq	38b8c <__assert_fail@plt+0x263b4>
   38a44:	subs	r0, r3, #84	; 0x54
   38a48:	rsbs	r1, r0, #0
   38a4c:	adcs	r1, r1, r0
   38a50:	cmp	r3, #84	; 0x54
   38a54:	cmpne	r3, #78	; 0x4e
   38a58:	bne	38b20 <__assert_fail@plt+0x26348>
   38a5c:	cmp	r1, #0
   38a60:	add	r2, r2, #1
   38a64:	strne	r9, [sp, #24]
   38a68:	str	r2, [r7]
   38a6c:	bne	38a84 <__assert_fail@plt+0x262ac>
   38a70:	mov	r0, r7
   38a74:	add	r1, sp, #24
   38a78:	bl	35c28 <__assert_fail@plt+0x23450>
   38a7c:	cmp	r0, #0
   38a80:	beq	38b50 <__assert_fail@plt+0x26378>
   38a84:	mov	r0, r7
   38a88:	add	r1, sp, #28
   38a8c:	bl	35c28 <__assert_fail@plt+0x23450>
   38a90:	cmp	r0, #0
   38a94:	beq	38b50 <__assert_fail@plt+0x26378>
   38a98:	ldr	r3, [sp, #28]
   38a9c:	ldr	r2, [fp, #20]
   38aa0:	cmp	r2, r3
   38aa4:	bls	38b50 <__assert_fail@plt+0x26378>
   38aa8:	ldr	r2, [sp, #24]
   38aac:	cmp	r2, #0
   38ab0:	sub	r2, r2, #1
   38ab4:	str	r2, [sp, #24]
   38ab8:	bne	38ad8 <__assert_fail@plt+0x26300>
   38abc:	b	38b40 <__assert_fail@plt+0x26368>
   38ac0:	ldr	r3, [sp, #24]
   38ac4:	cmp	r3, #0
   38ac8:	sub	r3, r3, #1
   38acc:	str	r3, [sp, #24]
   38ad0:	beq	38b40 <__assert_fail@plt+0x26368>
   38ad4:	ldr	r3, [sp, #28]
   38ad8:	ldr	lr, [fp, #16]
   38adc:	mov	r0, fp
   38ae0:	add	r1, sp, #32
   38ae4:	mov	r2, r5
   38ae8:	ldr	lr, [lr, r3, lsl #3]
   38aec:	mov	r3, r4
   38af0:	str	r6, [sp]
   38af4:	str	lr, [sp, #32]
   38af8:	bl	388d4 <__assert_fail@plt+0x260fc>
   38afc:	cmp	r0, #0
   38b00:	bne	38ac0 <__assert_fail@plt+0x262e8>
   38b04:	mov	r0, #0
   38b08:	ldr	r2, [sp, #36]	; 0x24
   38b0c:	ldr	r3, [r8]
   38b10:	cmp	r2, r3
   38b14:	bne	38bbc <__assert_fail@plt+0x263e4>
   38b18:	add	sp, sp, #44	; 0x2c
   38b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b20:	str	r6, [sp]
   38b24:	mov	r0, fp
   38b28:	mov	r1, r7
   38b2c:	mov	r2, r5
   38b30:	mov	r3, r4
   38b34:	bl	388d4 <__assert_fail@plt+0x260fc>
   38b38:	cmp	r0, #0
   38b3c:	beq	38b08 <__assert_fail@plt+0x26330>
   38b40:	ldr	r2, [r7]
   38b44:	b	38a2c <__assert_fail@plt+0x26254>
   38b48:	ldr	r2, [sp, #12]
   38b4c:	b	38a18 <__assert_fail@plt+0x26240>
   38b50:	ldr	r0, [sp, #12]
   38b54:	bl	35d1c <__assert_fail@plt+0x23544>
   38b58:	b	38b04 <__assert_fail@plt+0x2632c>
   38b5c:	cmp	r5, #0
   38b60:	beq	38ba4 <__assert_fail@plt+0x263cc>
   38b64:	ldr	r3, [r5]
   38b68:	mov	r1, #0
   38b6c:	ldr	r2, [sp, #20]
   38b70:	str	r1, [r3, r2, lsl #2]
   38b74:	ldr	r2, [r7]
   38b78:	ldrb	r3, [r2]
   38b7c:	cmp	r3, #101	; 0x65
   38b80:	beq	38bb0 <__assert_fail@plt+0x263d8>
   38b84:	mov	r0, #1
   38b88:	b	38b08 <__assert_fail@plt+0x26330>
   38b8c:	cmp	r5, #0
   38b90:	bne	38b64 <__assert_fail@plt+0x2638c>
   38b94:	add	r2, r2, #1
   38b98:	mov	r0, #1
   38b9c:	str	r2, [r7]
   38ba0:	b	38b08 <__assert_fail@plt+0x26330>
   38ba4:	cmp	r3, #101	; 0x65
   38ba8:	bne	38b84 <__assert_fail@plt+0x263ac>
   38bac:	b	38b94 <__assert_fail@plt+0x263bc>
   38bb0:	mov	r3, #1
   38bb4:	str	r3, [sl]
   38bb8:	b	38b94 <__assert_fail@plt+0x263bc>
   38bbc:	bl	122b0 <__stack_chk_fail@plt>
   38bc0:	push	{r4, r5, r6, lr}
   38bc4:	movw	r4, #65176	; 0xfe98
   38bc8:	ldr	r5, [r1]
   38bcc:	movt	r4, #6
   38bd0:	add	r2, r2, #2
   38bd4:	sub	sp, sp, #8
   38bd8:	ldr	r3, [r4]
   38bdc:	rsb	ip, r5, r2
   38be0:	cmp	ip, #4
   38be4:	mov	r6, r0
   38be8:	str	r2, [r1]
   38bec:	str	r3, [sp, #4]
   38bf0:	ble	38c10 <__assert_fail@plt+0x26438>
   38bf4:	mov	r2, #4
   38bf8:	movw	r1, #44588	; 0xae2c
   38bfc:	mov	r0, r5
   38c00:	movt	r1, #5
   38c04:	bl	12784 <strncmp@plt>
   38c08:	subs	r2, r0, #0
   38c0c:	beq	38c38 <__assert_fail@plt+0x26460>
   38c10:	ldrb	r3, [r5]
   38c14:	cmp	r3, #95	; 0x5f
   38c18:	beq	38c6c <__assert_fail@plt+0x26494>
   38c1c:	mov	r0, #1
   38c20:	ldr	r2, [sp, #4]
   38c24:	ldr	r3, [r4]
   38c28:	cmp	r2, r3
   38c2c:	bne	38cb8 <__assert_fail@plt+0x264e0>
   38c30:	add	sp, sp, #8
   38c34:	pop	{r4, r5, r6, pc}
   38c38:	ldrb	r3, [r5, #4]
   38c3c:	cmp	r3, #36	; 0x24
   38c40:	cmpne	r3, #46	; 0x2e
   38c44:	bne	38c10 <__assert_fail@plt+0x26438>
   38c48:	add	r1, sp, #8
   38c4c:	add	r5, r5, #5
   38c50:	mov	r0, r6
   38c54:	str	r5, [r1, #-8]!
   38c58:	mov	r1, sp
   38c5c:	bl	3725c <__assert_fail@plt+0x24a84>
   38c60:	adds	r0, r0, #0
   38c64:	movne	r0, #1
   38c68:	b	38c20 <__assert_fail@plt+0x26448>
   38c6c:	ldrb	r3, [r5, #1]
   38c70:	cmp	r3, #95	; 0x5f
   38c74:	bne	38c1c <__assert_fail@plt+0x26444>
   38c78:	ldrb	r3, [r5, #2]
   38c7c:	cmp	r3, #111	; 0x6f
   38c80:	bne	38c1c <__assert_fail@plt+0x26444>
   38c84:	ldrb	r3, [r5, #3]
   38c88:	cmp	r3, #112	; 0x70
   38c8c:	bne	38c1c <__assert_fail@plt+0x26444>
   38c90:	add	r1, sp, #8
   38c94:	add	r5, r5, #4
   38c98:	mov	r0, r6
   38c9c:	mov	r2, #0
   38ca0:	str	r5, [r1, #-8]!
   38ca4:	mov	r1, sp
   38ca8:	bl	3725c <__assert_fail@plt+0x24a84>
   38cac:	adds	r0, r0, #0
   38cb0:	movne	r0, #1
   38cb4:	b	38c20 <__assert_fail@plt+0x26448>
   38cb8:	bl	122b0 <__stack_chk_fail@plt>
   38cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38cc0:	sub	sp, sp, #260	; 0x104
   38cc4:	movw	r9, #65176	; 0xfe98
   38cc8:	movt	r9, #6
   38ccc:	ldr	r6, [sp, #296]	; 0x128
   38cd0:	mov	fp, r3
   38cd4:	str	r0, [sp, #32]
   38cd8:	movw	sl, #65192	; 0xfea8
   38cdc:	cmp	r6, #0
   38ce0:	ldr	r0, [r9]
   38ce4:	str	r2, [sp, #48]	; 0x30
   38ce8:	movt	sl, #6
   38cec:	movne	r3, #0
   38cf0:	strne	r3, [r6]
   38cf4:	ldr	r7, [fp]
   38cf8:	mov	r3, #0
   38cfc:	str	r3, [r1, #236]	; 0xec
   38d00:	mov	r8, r1
   38d04:	str	r0, [sp, #252]	; 0xfc
   38d08:	ldrb	r3, [r7]
   38d0c:	lsl	r2, r3, #1
   38d10:	ldrh	r4, [sl, r2]
   38d14:	and	r4, r4, #4
   38d18:	uxth	r4, r4
   38d1c:	cmp	r4, #0
   38d20:	bne	38ec4 <__assert_fail@plt+0x266ec>
   38d24:	cmp	r3, #40	; 0x28
   38d28:	beq	38ec4 <__assert_fail@plt+0x266ec>
   38d2c:	cmp	r3, #45	; 0x2d
   38d30:	beq	38ec4 <__assert_fail@plt+0x266ec>
   38d34:	mvn	r3, #0
   38d38:	str	r3, [sp, #192]	; 0xc0
   38d3c:	str	r3, [sp, #188]	; 0xbc
   38d40:	mov	r5, r7
   38d44:	ldrb	r6, [r7]
   38d48:	str	r3, [sp, #36]	; 0x24
   38d4c:	str	r6, [sp, #40]	; 0x28
   38d50:	ldr	ip, [sp, #40]	; 0x28
   38d54:	add	r6, r5, #1
   38d58:	str	r6, [fp]
   38d5c:	sub	r3, ip, #35	; 0x23
   38d60:	cmp	r3, #85	; 0x55
   38d64:	ldrls	pc, [pc, r3, lsl #2]
   38d68:	b	39020 <__assert_fail@plt+0x26848>
   38d6c:	andeq	r9, r3, r8, lsl r4
   38d70:	andeq	r9, r3, r0, lsr #32
   38d74:	andeq	r9, r3, r0, lsr #32
   38d78:	andeq	r9, r3, r4, lsr #10
   38d7c:	andeq	r9, r3, r0, lsr #32
   38d80:	andeq	r9, r3, r0, asr r5
   38d84:	andeq	r9, r3, r0, lsr #32
   38d88:	ldrdeq	r9, [r3], -r8
   38d8c:	andeq	r9, r3, r0, lsr #32
   38d90:	andeq	r9, r3, r0, lsr #32
   38d94:	andeq	r9, r3, r0, asr r5
   38d98:	andeq	r9, r3, r0, lsr #32
   38d9c:	andeq	r9, r3, r0, lsr #32
   38da0:	andeq	r9, r3, r0, asr r5
   38da4:	andeq	r9, r3, r0, asr r5
   38da8:	andeq	r9, r3, r0, asr r5
   38dac:	andeq	r9, r3, r0, asr r5
   38db0:	andeq	r9, r3, r0, asr r5
   38db4:	andeq	r9, r3, r0, asr r5
   38db8:	andeq	r9, r3, r0, asr r5
   38dbc:	andeq	r9, r3, r0, asr r5
   38dc0:	andeq	r9, r3, r0, asr r5
   38dc4:	andeq	r9, r3, r0, asr r5
   38dc8:	andeq	r9, r3, r0, lsr #32
   38dcc:	andeq	r9, r3, r0, lsr #32
   38dd0:	andeq	r9, r3, r0, lsr #32
   38dd4:	andeq	r9, r3, r0, lsr #32
   38dd8:	andeq	r9, r3, r0, lsr #32
   38ddc:	andeq	r9, r3, r0, lsr #32
   38de0:	strdeq	r9, [r3], -r4
   38de4:	andeq	r9, r3, r0, lsr #32
   38de8:	andeq	r9, r3, ip, ror r1
   38dec:	andeq	r9, r3, r0, lsr #32
   38df0:	andeq	r9, r3, r0, lsr #32
   38df4:	andeq	r9, r3, r0, lsr #32
   38df8:	andeq	r9, r3, r0, lsr #32
   38dfc:	andeq	r9, r3, r0, lsr #32
   38e00:	andeq	r9, r3, r0, lsr #32
   38e04:	andeq	r9, r3, r0, lsr #32
   38e08:	andeq	r9, r3, r0, lsr #32
   38e0c:	andeq	r9, r3, r0, lsr #32
   38e10:	andeq	r9, r3, r0, lsr #32
   38e14:	andeq	r9, r3, r0, lsr #32
   38e18:	andeq	r9, r3, r0, lsr #32
   38e1c:	andeq	r9, r3, r0, lsr #32
   38e20:	andeq	r9, r3, r0, lsr #32
   38e24:	andeq	r9, r3, r0, lsr #32
   38e28:	andeq	r9, r3, r8, lsr #3
   38e2c:	andeq	r9, r3, r0, lsl r2
   38e30:	andeq	r9, r3, r0, lsr #32
   38e34:	andeq	r9, r3, r0, lsr #32
   38e38:	andeq	r9, r3, r0, lsr #32
   38e3c:	andeq	r9, r3, r0, lsr #32
   38e40:	andeq	r9, r3, r0, lsr #32
   38e44:	andeq	r9, r3, r0, lsr #32
   38e48:	andeq	r9, r3, r0, lsr #32
   38e4c:	andeq	r9, r3, r0, lsr #32
   38e50:	andeq	r9, r3, r0, lsr #32
   38e54:	andeq	r9, r3, r0, lsr #32
   38e58:	andeq	r9, r3, r0, lsr #32
   38e5c:	andeq	r9, r3, r0, lsr #32
   38e60:	andeq	r9, r3, r0, lsr #32
   38e64:	andeq	r9, r3, r0, asr #4
   38e68:	andeq	r9, r3, ip, lsr r8
   38e6c:	andeq	r9, r3, r0, lsr #32
   38e70:	andeq	r9, r3, r0, lsr #32
   38e74:	andeq	r9, r3, r0, lsl #18
   38e78:	andeq	r9, r3, r0, ror #7
   38e7c:	andeq	r9, r3, r0, lsr #32
   38e80:	andeq	r9, r3, r0, lsr #32
   38e84:	andeq	r9, r3, r0, lsr #32
   38e88:	andeq	r9, r3, r0, lsr #32
   38e8c:	andeq	r9, r3, r4, lsl #12
   38e90:	andeq	r9, r3, r0, lsr #32
   38e94:	andeq	r9, r3, r0, lsr #32
   38e98:	andeq	r9, r3, r0, lsr #32
   38e9c:	andeq	r9, r3, r0, lsr #32
   38ea0:	andeq	r9, r3, r0, lsr #32
   38ea4:	andeq	r9, r3, r0, lsr #32
   38ea8:	andeq	r9, r3, r0, lsr r6
   38eac:	andeq	r9, r3, r4, ror r7
   38eb0:	andeq	r9, r3, r0, lsr #32
   38eb4:	andeq	r9, r3, r4, ror r7
   38eb8:	andeq	r9, r3, r0, lsr #32
   38ebc:	andeq	r9, r3, r0, lsr #32
   38ec0:	andeq	r9, r3, r0, lsr r0
   38ec4:	mov	r0, fp
   38ec8:	add	r1, sp, #188	; 0xbc
   38ecc:	bl	37104 <__assert_fail@plt+0x2492c>
   38ed0:	cmp	r0, #0
   38ed4:	beq	39028 <__assert_fail@plt+0x26850>
   38ed8:	ldr	r5, [fp]
   38edc:	ldrb	r3, [r5]
   38ee0:	cmp	r3, #61	; 0x3d
   38ee4:	bne	38ff8 <__assert_fail@plt+0x26820>
   38ee8:	cmp	r6, #0
   38eec:	beq	38f20 <__assert_fail@plt+0x26748>
   38ef0:	ldr	r3, [sp, #188]	; 0xbc
   38ef4:	cmp	r3, #0
   38ef8:	blt	38f20 <__assert_fail@plt+0x26748>
   38efc:	ldr	r3, [sp, #192]	; 0xc0
   38f00:	cmp	r3, #0
   38f04:	blt	38f20 <__assert_fail@plt+0x26748>
   38f08:	add	r2, sp, #188	; 0xbc
   38f0c:	add	r0, r8, #88	; 0x58
   38f10:	add	r1, r8, #92	; 0x5c
   38f14:	bl	36048 <__assert_fail@plt+0x23870>
   38f18:	str	r0, [r6]
   38f1c:	ldr	r5, [fp]
   38f20:	add	r5, r5, #1
   38f24:	mov	r4, #0
   38f28:	mvn	ip, #0
   38f2c:	str	r5, [fp]
   38f30:	mov	r0, r5
   38f34:	str	ip, [sp, #36]	; 0x24
   38f38:	ldrb	r3, [r0]
   38f3c:	cmp	r3, #64	; 0x40
   38f40:	bne	39bbc <__assert_fail@plt+0x273e4>
   38f44:	ldrb	r3, [r0, #1]
   38f48:	add	r1, r0, #1
   38f4c:	lsl	r2, r3, #1
   38f50:	ldrh	r2, [sl, r2]
   38f54:	tst	r2, #4
   38f58:	bne	39af0 <__assert_fail@plt+0x27318>
   38f5c:	cmp	r3, #40	; 0x28
   38f60:	beq	39af0 <__assert_fail@plt+0x27318>
   38f64:	cmp	r3, #45	; 0x2d
   38f68:	beq	39af0 <__assert_fail@plt+0x27318>
   38f6c:	cmp	r3, #59	; 0x3b
   38f70:	beq	38f9c <__assert_fail@plt+0x267c4>
   38f74:	cmp	r3, #0
   38f78:	beq	39020 <__assert_fail@plt+0x26848>
   38f7c:	add	r3, r0, #2
   38f80:	b	38f8c <__assert_fail@plt+0x267b4>
   38f84:	cmp	r2, #0
   38f88:	beq	39020 <__assert_fail@plt+0x26848>
   38f8c:	mov	r1, r3
   38f90:	ldrb	r2, [r3], #1
   38f94:	cmp	r2, #59	; 0x3b
   38f98:	bne	38f84 <__assert_fail@plt+0x267ac>
   38f9c:	add	r1, r1, #1
   38fa0:	str	r1, [fp]
   38fa4:	ldrb	r3, [r0, #1]
   38fa8:	cmp	r3, #83	; 0x53
   38fac:	moveq	r4, #1
   38fb0:	beq	38ff0 <__assert_fail@plt+0x26818>
   38fb4:	cmp	r3, #115	; 0x73
   38fb8:	bne	38ff0 <__assert_fail@plt+0x26818>
   38fbc:	mov	r1, #0
   38fc0:	add	r0, r0, #2
   38fc4:	mov	r2, #10
   38fc8:	bl	12184 <strtol@plt>
   38fcc:	ldr	r1, [fp]
   38fd0:	cmp	r0, #0
   38fd4:	add	r3, r0, #7
   38fd8:	movlt	r0, r3
   38fdc:	asr	r0, r0, #3
   38fe0:	str	r0, [sp, #36]	; 0x24
   38fe4:	cmp	r0, #0
   38fe8:	mvnle	r6, #0
   38fec:	strle	r6, [sp, #36]	; 0x24
   38ff0:	mov	r0, r1
   38ff4:	b	38f38 <__assert_fail@plt+0x26760>
   38ff8:	ldr	r0, [sp, #32]
   38ffc:	mov	r1, r8
   39000:	add	r2, sp, #188	; 0xbc
   39004:	bl	36170 <__assert_fail@plt+0x23998>
   39008:	ldr	r2, [sp, #252]	; 0xfc
   3900c:	ldr	r3, [r9]
   39010:	cmp	r2, r3
   39014:	bne	3b044 <__assert_fail@plt+0x2886c>
   39018:	add	sp, sp, #260	; 0x104
   3901c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39020:	mov	r0, r7
   39024:	bl	35d5c <__assert_fail@plt+0x23584>
   39028:	mov	r0, #0
   3902c:	b	39008 <__assert_fail@plt+0x26830>
   39030:	ldrb	r3, [r5, #1]
   39034:	cmp	r3, #115	; 0x73
   39038:	moveq	r4, #7
   3903c:	beq	3907c <__assert_fail@plt+0x268a4>
   39040:	cmp	r3, #117	; 0x75
   39044:	moveq	r4, #8
   39048:	beq	3907c <__assert_fail@plt+0x268a4>
   3904c:	cmp	r3, #101	; 0x65
   39050:	beq	39eac <__assert_fail@plt+0x276d4>
   39054:	mov	r2, #5
   39058:	movw	r1, #40424	; 0x9de8
   3905c:	mov	r0, #0
   39060:	movt	r1, #5
   39064:	bl	12298 <dcgettext@plt>
   39068:	mov	r4, #7
   3906c:	mov	r1, r0
   39070:	mov	r0, r7
   39074:	bl	35ccc <__assert_fail@plt+0x234f4>
   39078:	ldr	r6, [fp]
   3907c:	add	r6, r6, #1
   39080:	mov	r1, #60	; 0x3c
   39084:	str	r6, [fp]
   39088:	mov	r0, r6
   3908c:	bl	124fc <strchr@plt>
   39090:	mov	r1, #58	; 0x3a
   39094:	mov	sl, r0
   39098:	mov	r0, r6
   3909c:	bl	124fc <strchr@plt>
   390a0:	subs	r5, r0, #0
   390a4:	beq	3b6dc <__assert_fail@plt+0x28f04>
   390a8:	cmp	sl, #0
   390ac:	cmpne	r5, sl
   390b0:	bls	390c0 <__assert_fail@plt+0x268e8>
   390b4:	ldrb	r3, [r5, #1]
   390b8:	cmp	r3, #58	; 0x3a
   390bc:	beq	3a12c <__assert_fail@plt+0x27954>
   390c0:	ldr	r7, [sp, #48]	; 0x30
   390c4:	cmp	r7, #0
   390c8:	rsb	r7, r6, r5
   390cc:	beq	390fc <__assert_fail@plt+0x26924>
   390d0:	ldr	r0, [sp, #48]	; 0x30
   390d4:	mov	r1, r6
   390d8:	mov	r2, r7
   390dc:	bl	12784 <strncmp@plt>
   390e0:	cmp	r0, #0
   390e4:	bne	390fc <__assert_fail@plt+0x26924>
   390e8:	ldr	sl, [sp, #48]	; 0x30
   390ec:	ldrb	r3, [sl, r7]
   390f0:	cmp	r3, #0
   390f4:	moveq	r3, #1
   390f8:	streq	r3, [r8, #236]	; 0xec
   390fc:	str	r4, [sp]
   39100:	mov	r2, r6
   39104:	mov	r3, r7
   39108:	ldr	r0, [sp, #32]
   3910c:	add	r1, r8, #232	; 0xe8
   39110:	add	r5, r5, #1
   39114:	bl	366b0 <__assert_fail@plt+0x23ed8>
   39118:	str	r5, [fp]
   3911c:	mov	r4, r0
   39120:	cmp	r4, #0
   39124:	beq	39028 <__assert_fail@plt+0x26850>
   39128:	ldr	r3, [sp, #188]	; 0xbc
   3912c:	cmn	r3, #1
   39130:	beq	39150 <__assert_fail@plt+0x26978>
   39134:	add	r0, r8, #88	; 0x58
   39138:	add	r1, r8, #92	; 0x5c
   3913c:	add	r2, sp, #188	; 0xbc
   39140:	bl	36048 <__assert_fail@plt+0x23870>
   39144:	cmp	r0, #0
   39148:	beq	39028 <__assert_fail@plt+0x26850>
   3914c:	str	r4, [r0]
   39150:	ldr	sl, [sp, #36]	; 0x24
   39154:	cmn	sl, #1
   39158:	beq	39174 <__assert_fail@plt+0x2699c>
   3915c:	ldr	r0, [sp, #32]
   39160:	mov	r2, sl
   39164:	mov	r1, r4
   39168:	bl	355a4 <__assert_fail@plt+0x22dcc>
   3916c:	cmp	r0, #0
   39170:	beq	39028 <__assert_fail@plt+0x26850>
   39174:	mov	r0, r4
   39178:	b	39008 <__assert_fail@plt+0x26830>
   3917c:	mov	r2, #0
   39180:	mov	r3, fp
   39184:	str	r2, [sp]
   39188:	mov	r1, r8
   3918c:	ldr	r0, [sp, #32]
   39190:	bl	38cbc <__assert_fail@plt+0x264e4>
   39194:	mov	r1, r0
   39198:	ldr	r0, [sp, #32]
   3919c:	bl	350dc <__assert_fail@plt+0x22904>
   391a0:	mov	r4, r0
   391a4:	b	39120 <__assert_fail@plt+0x26948>
   391a8:	mov	r0, fp
   391ac:	mov	r1, #0
   391b0:	bl	35e30 <__assert_fail@plt+0x23658>
   391b4:	ldr	r3, [fp]
   391b8:	ldrb	r3, [r3]
   391bc:	cmp	r3, #59	; 0x3b
   391c0:	mov	r4, r0
   391c4:	mov	r5, r1
   391c8:	bne	39b64 <__assert_fail@plt+0x2738c>
   391cc:	mov	r0, fp
   391d0:	mov	r1, #0
   391d4:	bl	35e30 <__assert_fail@plt+0x23658>
   391d8:	ldr	r3, [fp]
   391dc:	ldrb	r3, [r3]
   391e0:	cmp	r3, #59	; 0x3b
   391e4:	mov	r1, r0
   391e8:	bne	39b64 <__assert_fail@plt+0x2738c>
   391ec:	subs	r4, r4, #3
   391f0:	ldr	r0, [sp, #32]
   391f4:	sbc	r5, r5, #0
   391f8:	cmp	r5, #0
   391fc:	cmpeq	r4, #2
   39200:	bls	39dc8 <__assert_fail@plt+0x275f0>
   39204:	bl	34c40 <__assert_fail@plt+0x22468>
   39208:	mov	r4, r0
   3920c:	b	39120 <__assert_fail@plt+0x26948>
   39210:	mov	r2, #0
   39214:	mov	r3, fp
   39218:	str	r2, [sp]
   3921c:	mov	r1, r8
   39220:	ldr	r0, [sp, #32]
   39224:	bl	38cbc <__assert_fail@plt+0x264e4>
   39228:	mov	r2, r4
   3922c:	mov	r1, r0
   39230:	ldr	r0, [sp, #32]
   39234:	bl	34f60 <__assert_fail@plt+0x22788>
   39238:	mov	r4, r0
   3923c:	b	39120 <__assert_fail@plt+0x26948>
   39240:	ldrb	r3, [r5, #1]
   39244:	cmp	r3, #114	; 0x72
   39248:	bne	39020 <__assert_fail@plt+0x26848>
   3924c:	add	r0, sp, #256	; 0x100
   39250:	add	r5, r5, #2
   39254:	add	r1, sp, #196	; 0xc4
   39258:	str	r5, [fp]
   3925c:	str	r5, [r0, #-52]!	; 0xffffffcc
   39260:	bl	37104 <__assert_fail@plt+0x2492c>
   39264:	cmp	r0, #0
   39268:	beq	39028 <__assert_fail@plt+0x26850>
   3926c:	ldr	r3, [sp, #196]	; 0xc4
   39270:	cmp	r3, #0
   39274:	bne	39b98 <__assert_fail@plt+0x273c0>
   39278:	ldr	r3, [sp, #200]	; 0xc8
   3927c:	cmp	r3, #0
   39280:	bne	39b98 <__assert_fail@plt+0x273c0>
   39284:	ldr	r3, [fp]
   39288:	ldrb	r3, [r3]
   3928c:	cmp	r3, #61	; 0x3d
   39290:	beq	39b98 <__assert_fail@plt+0x273c0>
   39294:	movw	r1, #39600	; 0x9ab0
   39298:	ldr	r0, [sp, #32]
   3929c:	movt	r1, #5
   392a0:	bl	35610 <__assert_fail@plt+0x22e38>
   392a4:	subs	r6, r0, #0
   392a8:	beq	3b9b8 <__assert_fail@plt+0x291e0>
   392ac:	ldr	r3, [sp, #204]	; 0xcc
   392b0:	str	r3, [fp]
   392b4:	ldrb	r2, [r3]
   392b8:	cmp	r2, #59	; 0x3b
   392bc:	bne	39e30 <__assert_fail@plt+0x27658>
   392c0:	add	r2, r3, #1
   392c4:	str	r2, [fp]
   392c8:	ldrb	r2, [r3, #1]
   392cc:	lsl	r1, r2, #1
   392d0:	ldrh	r7, [sl, r1]
   392d4:	and	r7, r7, #4
   392d8:	uxth	r7, r7
   392dc:	cmp	r7, #0
   392e0:	movne	r7, #0
   392e4:	bne	392f8 <__assert_fail@plt+0x26b20>
   392e8:	cmp	r2, #45	; 0x2d
   392ec:	addne	r3, r3, #2
   392f0:	strne	r3, [fp]
   392f4:	movne	r7, #1
   392f8:	mov	r0, fp
   392fc:	mov	r1, #0
   39300:	bl	35e30 <__assert_fail@plt+0x23658>
   39304:	ldr	r3, [fp]
   39308:	ldrb	r2, [r3]
   3930c:	cmp	r2, #59	; 0x3b
   39310:	str	r0, [sp, #48]	; 0x30
   39314:	str	r1, [sp, #40]	; 0x28
   39318:	bne	39e30 <__assert_fail@plt+0x27658>
   3931c:	add	r2, r3, #1
   39320:	str	r2, [fp]
   39324:	ldrb	r2, [r3, #1]
   39328:	lsl	r1, r2, #1
   3932c:	ldrh	r1, [sl, r1]
   39330:	tst	r1, #4
   39334:	bne	39348 <__assert_fail@plt+0x26b70>
   39338:	cmp	r2, #45	; 0x2d
   3933c:	addne	r3, r3, #2
   39340:	strne	r3, [fp]
   39344:	movne	r7, #1
   39348:	mov	r0, fp
   3934c:	mov	r1, #0
   39350:	bl	35e30 <__assert_fail@plt+0x23658>
   39354:	ldr	r3, [fp]
   39358:	ldrb	r2, [r3]
   3935c:	cmp	r2, #59	; 0x3b
   39360:	mov	ip, r0
   39364:	mov	sl, r1
   39368:	bne	39e30 <__assert_fail@plt+0x27658>
   3936c:	add	r1, r3, #1
   39370:	mov	r2, #0
   39374:	str	r1, [fp]
   39378:	mov	r3, fp
   3937c:	mov	r1, r8
   39380:	str	r2, [sp]
   39384:	ldr	r0, [sp, #32]
   39388:	str	ip, [sp, #28]
   3938c:	bl	38cbc <__assert_fail@plt+0x264e4>
   39390:	ldr	ip, [sp, #28]
   39394:	subs	r1, r0, #0
   39398:	beq	39028 <__assert_fail@plt+0x26850>
   3939c:	cmp	r7, #0
   393a0:	str	r4, [sp, #16]
   393a4:	ldreq	r0, [sp, #48]	; 0x30
   393a8:	movne	r0, #0
   393ac:	ldreq	r2, [sp, #40]	; 0x28
   393b0:	mvnne	r3, #0
   393b4:	movne	r2, r0
   393b8:	moveq	r3, ip
   393bc:	movne	sl, r3
   393c0:	str	r3, [sp, #8]
   393c4:	stm	sp, {r0, r2}
   393c8:	mov	r2, r6
   393cc:	ldr	r0, [sp, #32]
   393d0:	str	sl, [sp, #12]
   393d4:	bl	34ed8 <__assert_fail@plt+0x22700>
   393d8:	mov	r4, r0
   393dc:	b	39120 <__assert_fail@plt+0x26948>
   393e0:	mov	r4, #0
   393e4:	mov	r3, fp
   393e8:	mov	r2, r4
   393ec:	str	r4, [sp]
   393f0:	mov	r1, r8
   393f4:	ldr	r0, [sp, #32]
   393f8:	bl	38cbc <__assert_fail@plt+0x264e4>
   393fc:	mov	r2, r4
   39400:	mov	r3, r4
   39404:	mov	r1, r0
   39408:	ldr	r0, [sp, #32]
   3940c:	bl	34dbc <__assert_fail@plt+0x225e4>
   39410:	mov	r4, r0
   39414:	b	39120 <__assert_fail@plt+0x26948>
   39418:	ldrb	r3, [r5, #1]
   3941c:	mov	r4, #0
   39420:	cmp	r3, #35	; 0x23
   39424:	beq	39dd4 <__assert_fail@plt+0x275fc>
   39428:	ldr	r0, [sp, #32]
   3942c:	mov	r2, r4
   39430:	str	r4, [sp]
   39434:	mov	r1, r8
   39438:	mov	r3, fp
   3943c:	bl	38cbc <__assert_fail@plt+0x264e4>
   39440:	cmp	r0, #0
   39444:	str	r0, [sp, #48]	; 0x30
   39448:	beq	39028 <__assert_fail@plt+0x26850>
   3944c:	ldr	r3, [fp]
   39450:	ldrb	r2, [r3]
   39454:	cmp	r2, #44	; 0x2c
   39458:	bne	39db0 <__assert_fail@plt+0x275d8>
   3945c:	add	r3, r3, #1
   39460:	str	r4, [sp]
   39464:	ldr	r0, [sp, #32]
   39468:	mov	r1, r8
   3946c:	str	r3, [fp]
   39470:	mov	r2, r4
   39474:	mov	r3, fp
   39478:	bl	38cbc <__assert_fail@plt+0x264e4>
   3947c:	cmp	r0, #0
   39480:	str	r0, [sp, #40]	; 0x28
   39484:	beq	39028 <__assert_fail@plt+0x26850>
   39488:	mov	r0, #40	; 0x28
   3948c:	mov	sl, r4
   39490:	bl	12358 <xmalloc@plt>
   39494:	mov	r3, r9
   39498:	str	r7, [sp, #52]	; 0x34
   3949c:	mov	r9, sl
   394a0:	mov	r5, #10
   394a4:	ldr	r7, [sp, #32]
   394a8:	mov	sl, r3
   394ac:	mov	r6, r0
   394b0:	b	394e0 <__assert_fail@plt+0x26d08>
   394b4:	mov	ip, #0
   394b8:	mov	r0, r7
   394bc:	str	ip, [sp]
   394c0:	mov	r1, r8
   394c4:	mov	r2, ip
   394c8:	mov	r3, fp
   394cc:	bl	38cbc <__assert_fail@plt+0x264e4>
   394d0:	cmp	r0, #0
   394d4:	str	r0, [r6, r9]
   394d8:	add	r9, r9, #4
   394dc:	beq	3a080 <__assert_fail@plt+0x278a8>
   394e0:	ldr	r3, [fp]
   394e4:	ldrb	r2, [r3]
   394e8:	cmp	r2, #59	; 0x3b
   394ec:	beq	3a030 <__assert_fail@plt+0x27858>
   394f0:	cmp	r2, #44	; 0x2c
   394f4:	bne	3a088 <__assert_fail@plt+0x278b0>
   394f8:	add	r4, r4, #1
   394fc:	add	r3, r3, #1
   39500:	cmp	r5, r4
   39504:	str	r3, [fp]
   39508:	bhi	394b4 <__assert_fail@plt+0x26cdc>
   3950c:	add	r5, r5, #10
   39510:	mov	r0, r6
   39514:	lsl	r1, r5, #2
   39518:	bl	122c8 <xrealloc@plt>
   3951c:	mov	r6, r0
   39520:	b	394b4 <__assert_fail@plt+0x26cdc>
   39524:	mov	r2, #0
   39528:	mov	r3, fp
   3952c:	str	r2, [sp]
   39530:	mov	r1, r8
   39534:	ldr	r0, [sp, #32]
   39538:	bl	38cbc <__assert_fail@plt+0x264e4>
   3953c:	mov	r1, r0
   39540:	ldr	r0, [sp, #32]
   39544:	bl	34e40 <__assert_fail@plt+0x22668>
   39548:	mov	r4, r0
   3954c:	b	39120 <__assert_fail@plt+0x26948>
   39550:	str	r5, [fp]
   39554:	mov	r0, fp
   39558:	add	r1, sp, #196	; 0xc4
   3955c:	bl	37104 <__assert_fail@plt+0x2492c>
   39560:	cmp	r0, #0
   39564:	beq	39028 <__assert_fail@plt+0x26850>
   39568:	ldr	r2, [sp, #188]	; 0xbc
   3956c:	ldr	r3, [sp, #196]	; 0xc4
   39570:	cmp	r2, r3
   39574:	bne	39588 <__assert_fail@plt+0x26db0>
   39578:	ldr	r2, [sp, #192]	; 0xc0
   3957c:	ldr	r3, [sp, #200]	; 0xc8
   39580:	cmp	r2, r3
   39584:	beq	3ad80 <__assert_fail@plt+0x285a8>
   39588:	mov	r2, #0
   3958c:	str	r5, [fp]
   39590:	mov	r3, fp
   39594:	str	r2, [sp]
   39598:	ldr	r0, [sp, #32]
   3959c:	mov	r1, r8
   395a0:	bl	38cbc <__assert_fail@plt+0x264e4>
   395a4:	subs	r4, r0, #0
   395a8:	beq	39028 <__assert_fail@plt+0x26850>
   395ac:	ldr	r3, [sp, #188]	; 0xbc
   395b0:	cmn	r3, #1
   395b4:	beq	39120 <__assert_fail@plt+0x26948>
   395b8:	add	r0, r8, #88	; 0x58
   395bc:	add	r1, r8, #92	; 0x5c
   395c0:	add	r2, sp, #188	; 0xbc
   395c4:	bl	36048 <__assert_fail@plt+0x23870>
   395c8:	cmp	r0, #0
   395cc:	strne	r4, [r0]
   395d0:	bne	39120 <__assert_fail@plt+0x26948>
   395d4:	b	39028 <__assert_fail@plt+0x26850>
   395d8:	mov	r2, #0
   395dc:	mov	r3, fp
   395e0:	str	r2, [sp]
   395e4:	mov	r1, r8
   395e8:	ldr	r0, [sp, #32]
   395ec:	bl	38cbc <__assert_fail@plt+0x264e4>
   395f0:	mov	r1, r0
   395f4:	ldr	r0, [sp, #32]
   395f8:	bl	34d6c <__assert_fail@plt+0x22594>
   395fc:	mov	r4, r0
   39600:	b	39120 <__assert_fail@plt+0x26948>
   39604:	mov	r2, #0
   39608:	mov	r3, fp
   3960c:	str	r2, [sp]
   39610:	mov	r1, r8
   39614:	ldr	r0, [sp, #32]
   39618:	bl	38cbc <__assert_fail@plt+0x264e4>
   3961c:	mov	r1, r0
   39620:	ldr	r0, [sp, #32]
   39624:	bl	350b0 <__assert_fail@plt+0x228d8>
   39628:	mov	r4, r0
   3962c:	b	39120 <__assert_fail@plt+0x26948>
   39630:	mov	r0, fp
   39634:	add	r1, sp, #196	; 0xc4
   39638:	bl	37104 <__assert_fail@plt+0x2492c>
   3963c:	cmp	r0, #0
   39640:	beq	39028 <__assert_fail@plt+0x26850>
   39644:	ldr	r2, [sp, #196]	; 0xc4
   39648:	ldr	r3, [sp, #188]	; 0xbc
   3964c:	cmp	r2, r3
   39650:	movne	r7, #0
   39654:	strne	r7, [sp, #60]	; 0x3c
   39658:	beq	39e90 <__assert_fail@plt+0x276b8>
   3965c:	ldr	r7, [fp]
   39660:	ldrb	r3, [r7]
   39664:	cmp	r3, #61	; 0x3d
   39668:	movne	sl, #0
   3966c:	beq	3a180 <__assert_fail@plt+0x279a8>
   39670:	cmp	r3, #59	; 0x3b
   39674:	mov	r0, fp
   39678:	addeq	r7, r7, #1
   3967c:	add	r1, sp, #184	; 0xb8
   39680:	streq	r7, [fp]
   39684:	bl	35e30 <__assert_fail@plt+0x23658>
   39688:	ldr	r3, [fp]
   3968c:	ldrb	r2, [r3]
   39690:	cmp	r2, #59	; 0x3b
   39694:	str	r0, [sp, #52]	; 0x34
   39698:	mov	ip, r1
   3969c:	bne	39b64 <__assert_fail@plt+0x2738c>
   396a0:	add	r3, r3, #1
   396a4:	mov	r0, fp
   396a8:	str	r3, [fp]
   396ac:	add	r1, sp, #204	; 0xcc
   396b0:	str	r3, [sp, #56]	; 0x38
   396b4:	str	ip, [sp, #28]
   396b8:	bl	35e30 <__assert_fail@plt+0x23658>
   396bc:	ldr	r2, [fp]
   396c0:	ldr	ip, [sp, #28]
   396c4:	ldrb	r3, [r2]
   396c8:	cmp	r3, #59	; 0x3b
   396cc:	str	r0, [sp, #64]	; 0x40
   396d0:	mov	r4, r0
   396d4:	mov	r5, r1
   396d8:	bne	39b64 <__assert_fail@plt+0x2738c>
   396dc:	ldr	r3, [sp, #184]	; 0xb8
   396e0:	add	r2, r2, #1
   396e4:	ldr	r0, [sp, #52]	; 0x34
   396e8:	cmp	r3, #0
   396ec:	str	ip, [sp, #44]	; 0x2c
   396f0:	str	r2, [fp]
   396f4:	str	r0, [sp, #40]	; 0x28
   396f8:	bne	39708 <__assert_fail@plt+0x26f30>
   396fc:	ldr	r2, [sp, #204]	; 0xcc
   39700:	cmp	r2, #0
   39704:	beq	39730 <__assert_fail@plt+0x26f58>
   39708:	cmp	sl, #0
   3970c:	beq	3a0a0 <__assert_fail@plt+0x278c8>
   39710:	movw	r1, #40540	; 0x9e5c
   39714:	mov	r0, #0
   39718:	movt	r1, #5
   3971c:	mov	r2, #5
   39720:	bl	12298 <dcgettext@plt>
   39724:	mov	r1, r0
   39728:	mov	r0, r6
   3972c:	bl	35ccc <__assert_fail@plt+0x234f4>
   39730:	cmp	sl, #0
   39734:	beq	3ab00 <__assert_fail@plt+0x28328>
   39738:	ldr	fp, [sp, #60]	; 0x3c
   3973c:	cmp	fp, #0
   39740:	bne	39b64 <__assert_fail@plt+0x2738c>
   39744:	mov	r1, r8
   39748:	add	r2, sp, #196	; 0xc4
   3974c:	ldr	r0, [sp, #32]
   39750:	bl	36170 <__assert_fail@plt+0x23998>
   39754:	subs	r1, r0, #0
   39758:	beq	3afe4 <__assert_fail@plt+0x2880c>
   3975c:	strd	r4, [sp]
   39760:	ldrd	r2, [sp, #40]	; 0x28
   39764:	ldr	r0, [sp, #32]
   39768:	bl	34e6c <__assert_fail@plt+0x22694>
   3976c:	mov	r4, r0
   39770:	b	39120 <__assert_fail@plt+0x26948>
   39774:	mov	r0, fp
   39778:	mov	r1, #0
   3977c:	bl	35e30 <__assert_fail@plt+0x23658>
   39780:	ldr	r4, [fp]
   39784:	ldrb	r3, [r4]
   39788:	cmp	r3, #33	; 0x21
   3978c:	strne	r4, [sp, #64]	; 0x40
   39790:	movne	ip, #0
   39794:	strd	r0, [sp, #136]	; 0x88
   39798:	strne	ip, [sp, #112]	; 0x70
   3979c:	beq	39ffc <__assert_fail@plt+0x27824>
   397a0:	mov	r0, #40	; 0x28
   397a4:	mov	r6, #0
   397a8:	bl	12358 <xmalloc@plt>
   397ac:	mov	ip, #10
   397b0:	str	sl, [sp, #68]	; 0x44
   397b4:	mov	sl, ip
   397b8:	str	r6, [sp, #144]	; 0x90
   397bc:	str	r0, [sp, #56]	; 0x38
   397c0:	ldr	r5, [fp]
   397c4:	ldrb	r3, [r5]
   397c8:	cmp	r3, #59	; 0x3b
   397cc:	beq	3a1d8 <__assert_fail@plt+0x27a00>
   397d0:	add	r4, r6, #1
   397d4:	cmp	sl, r4
   397d8:	bls	39b7c <__assert_fail@plt+0x273a4>
   397dc:	cmp	r3, #36	; 0x24
   397e0:	cmpne	r3, #46	; 0x2e
   397e4:	bne	39a48 <__assert_fail@plt+0x27270>
   397e8:	ldrb	r3, [r5, #1]
   397ec:	cmp	r3, #95	; 0x5f
   397f0:	beq	39a48 <__assert_fail@plt+0x27270>
   397f4:	ldr	ip, [sp, #56]	; 0x38
   397f8:	mov	r5, #0
   397fc:	ldr	r3, [fp]
   39800:	ldr	r7, [sp, #56]	; 0x38
   39804:	add	r3, r3, #1
   39808:	str	r3, [fp]
   3980c:	str	r5, [ip, r6, lsl #2]
   39810:	add	r7, r7, r6, lsl #2
   39814:	str	r7, [sp, #52]	; 0x34
   39818:	ldr	r7, [fp]
   3981c:	ldrb	r3, [r7]
   39820:	cmp	r3, #118	; 0x76
   39824:	beq	39ed4 <__assert_fail@plt+0x276fc>
   39828:	mov	r0, r7
   3982c:	bl	35d5c <__assert_fail@plt+0x23584>
   39830:	ldr	r0, [sp, #56]	; 0x38
   39834:	bl	121f0 <free@plt>
   39838:	b	39028 <__assert_fail@plt+0x26850>
   3983c:	ldrb	r3, [r5, #1]
   39840:	cmp	r3, #115	; 0x73
   39844:	beq	39dc0 <__assert_fail@plt+0x275e8>
   39848:	cmp	r3, #117	; 0x75
   3984c:	bne	39b64 <__assert_fail@plt+0x2738c>
   39850:	mov	r4, #1
   39854:	add	r3, r5, #2
   39858:	str	r3, [fp]
   3985c:	ldrb	r3, [r5, #2]
   39860:	mov	r0, fp
   39864:	mov	r1, #0
   39868:	sub	r2, r3, #98	; 0x62
   3986c:	cmp	r3, #118	; 0x76
   39870:	cmpne	r2, #1
   39874:	addls	r5, r5, #3
   39878:	strls	r5, [fp]
   3987c:	bl	35e30 <__assert_fail@plt+0x23658>
   39880:	ldr	r3, [fp]
   39884:	ldrb	r2, [r3]
   39888:	cmp	r2, #59	; 0x3b
   3988c:	bne	39b64 <__assert_fail@plt+0x2738c>
   39890:	add	r3, r3, #1
   39894:	mov	r0, fp
   39898:	str	r3, [fp]
   3989c:	mov	r1, #0
   398a0:	bl	35e30 <__assert_fail@plt+0x23658>
   398a4:	ldr	r3, [fp]
   398a8:	ldrb	r2, [r3]
   398ac:	cmp	r2, #59	; 0x3b
   398b0:	bne	39b64 <__assert_fail@plt+0x2738c>
   398b4:	add	r3, r3, #1
   398b8:	mov	r0, fp
   398bc:	str	r3, [fp]
   398c0:	mov	r1, #0
   398c4:	bl	35e30 <__assert_fail@plt+0x23658>
   398c8:	ldr	r3, [fp]
   398cc:	ldrb	r2, [r3]
   398d0:	cmp	r2, #59	; 0x3b
   398d4:	addeq	r3, r3, #1
   398d8:	streq	r3, [fp]
   398dc:	orrs	ip, r0, r1
   398e0:	beq	3a070 <__assert_fail@plt+0x27898>
   398e4:	lsr	r3, r0, #3
   398e8:	mov	r2, r4
   398ec:	orr	r1, r3, r1, lsl #29
   398f0:	ldr	r0, [sp, #32]
   398f4:	bl	34c24 <__assert_fail@plt+0x2244c>
   398f8:	mov	r4, r0
   398fc:	b	39120 <__assert_fail@plt+0x26948>
   39900:	ldrb	r3, [r5, #1]
   39904:	cmp	r3, #45	; 0x2d
   39908:	beq	39eb4 <__assert_fail@plt+0x276dc>
   3990c:	mov	r0, #40	; 0x28
   39910:	bl	12358 <xmalloc@plt>
   39914:	str	r0, [sp, #48]	; 0x30
   39918:	mov	r0, #80	; 0x50
   3991c:	bl	12358 <xmalloc@plt>
   39920:	mov	ip, r0
   39924:	ldr	r0, [fp]
   39928:	ldrb	r2, [r0]
   3992c:	cmp	r2, #0
   39930:	cmpne	r2, #59	; 0x3b
   39934:	moveq	r1, #0
   39938:	movne	r1, #1
   3993c:	beq	3ad94 <__assert_fail@plt+0x285bc>
   39940:	cmp	r2, #44	; 0x2c
   39944:	beq	3ad90 <__assert_fail@plt+0x285b8>
   39948:	ldr	sl, [sp, #48]	; 0x30
   3994c:	mov	r7, #0
   39950:	str	r8, [sp, #56]	; 0x38
   39954:	mov	r4, #10
   39958:	str	r9, [sp, #40]	; 0x28
   3995c:	mov	r1, r2
   39960:	mov	r9, fp
   39964:	mov	r8, ip
   39968:	mov	fp, r7
   3996c:	str	r6, [sp, #52]	; 0x34
   39970:	cmp	r1, #58	; 0x3a
   39974:	cmpne	r1, #0
   39978:	beq	39b70 <__assert_fail@plt+0x27398>
   3997c:	add	r1, r0, #1
   39980:	mov	r6, r1
   39984:	ldrb	r2, [r1], #1
   39988:	cmp	r2, #0
   3998c:	cmpne	r2, #58	; 0x3a
   39990:	bne	39980 <__assert_fail@plt+0x271a8>
   39994:	cmp	r2, #0
   39998:	beq	39e74 <__assert_fail@plt+0x2769c>
   3999c:	rsb	r1, r0, r6
   399a0:	add	r6, r6, #1
   399a4:	bl	35e00 <__assert_fail@plt+0x23628>
   399a8:	str	r6, [r9]
   399ac:	mov	r1, #0
   399b0:	mov	r5, r0
   399b4:	mov	r0, r9
   399b8:	bl	35e30 <__assert_fail@plt+0x23658>
   399bc:	mov	r7, r1
   399c0:	ldr	r1, [r9]
   399c4:	mov	r6, r0
   399c8:	ldrb	r2, [r1]
   399cc:	cmp	r2, #44	; 0x2c
   399d0:	bne	39e3c <__assert_fail@plt+0x27664>
   399d4:	add	r2, fp, #1
   399d8:	add	r1, r1, #1
   399dc:	cmp	r4, r2
   399e0:	str	r1, [r9]
   399e4:	bls	39a18 <__assert_fail@plt+0x27240>
   399e8:	str	r5, [sl, fp, lsl #2]
   399ec:	lsl	ip, fp, #3
   399f0:	ldr	r0, [r9]
   399f4:	strd	r6, [r8, ip]
   399f8:	ldrb	r1, [r0]
   399fc:	cmp	r1, #59	; 0x3b
   39a00:	cmpne	r1, #0
   39a04:	beq	39d4c <__assert_fail@plt+0x27574>
   39a08:	cmp	r1, #44	; 0x2c
   39a0c:	beq	39d4c <__assert_fail@plt+0x27574>
   39a10:	mov	fp, r2
   39a14:	b	39970 <__assert_fail@plt+0x27198>
   39a18:	add	r4, r4, #10
   39a1c:	mov	r0, sl
   39a20:	str	r2, [sp, #24]
   39a24:	lsl	r1, r4, #2
   39a28:	bl	122c8 <xrealloc@plt>
   39a2c:	lsl	r1, r4, #3
   39a30:	mov	sl, r0
   39a34:	mov	r0, r8
   39a38:	bl	122c8 <xrealloc@plt>
   39a3c:	ldr	r2, [sp, #24]
   39a40:	mov	r8, r0
   39a44:	b	399e8 <__assert_fail@plt+0x27210>
   39a48:	mov	r0, r5
   39a4c:	mov	r1, #58	; 0x3a
   39a50:	bl	124fc <strchr@plt>
   39a54:	subs	r5, r0, #0
   39a58:	beq	3b048 <__assert_fail@plt+0x28870>
   39a5c:	ldrb	r3, [r5, #1]
   39a60:	cmp	r3, #58	; 0x3a
   39a64:	beq	3a1d8 <__assert_fail@plt+0x27a00>
   39a68:	ldr	r7, [fp]
   39a6c:	ldr	ip, [sp, #56]	; 0x38
   39a70:	rsb	r1, r7, r5
   39a74:	mov	r0, r7
   39a78:	add	r6, ip, r6, lsl #2
   39a7c:	str	r6, [sp, #60]	; 0x3c
   39a80:	bl	35e00 <__assert_fail@plt+0x23628>
   39a84:	add	r3, r5, #1
   39a88:	str	r3, [fp]
   39a8c:	ldrb	r3, [r5, #1]
   39a90:	cmp	r3, #47	; 0x2f
   39a94:	movne	r5, #0
   39a98:	str	r0, [sp, #52]	; 0x34
   39a9c:	beq	39bc8 <__assert_fail@plt+0x273f0>
   39aa0:	mov	r6, #0
   39aa4:	ldr	r0, [sp, #32]
   39aa8:	mov	r2, r6
   39aac:	str	r6, [sp]
   39ab0:	mov	r1, r8
   39ab4:	mov	r3, fp
   39ab8:	bl	38cbc <__assert_fail@plt+0x264e4>
   39abc:	subs	r2, r0, #0
   39ac0:	beq	39ae4 <__assert_fail@plt+0x2730c>
   39ac4:	ldr	r1, [fp]
   39ac8:	ldrb	r3, [r1]
   39acc:	cmp	r3, #58	; 0x3a
   39ad0:	beq	39cdc <__assert_fail@plt+0x27504>
   39ad4:	cmp	r3, #44	; 0x2c
   39ad8:	beq	39c2c <__assert_fail@plt+0x27454>
   39adc:	mov	r0, r7
   39ae0:	bl	35d5c <__assert_fail@plt+0x23584>
   39ae4:	ldr	r0, [sp, #52]	; 0x34
   39ae8:	bl	121f0 <free@plt>
   39aec:	b	39028 <__assert_fail@plt+0x26850>
   39af0:	str	r1, [fp]
   39af4:	mov	r4, #0
   39af8:	ldr	r0, [sp, #32]
   39afc:	str	r4, [sp]
   39b00:	mov	r2, r4
   39b04:	mov	r1, r8
   39b08:	mov	r3, fp
   39b0c:	bl	38cbc <__assert_fail@plt+0x264e4>
   39b10:	subs	r5, r0, #0
   39b14:	beq	39028 <__assert_fail@plt+0x26850>
   39b18:	ldr	r3, [fp]
   39b1c:	ldrb	r2, [r3]
   39b20:	cmp	r2, #44	; 0x2c
   39b24:	bne	39db0 <__assert_fail@plt+0x275d8>
   39b28:	add	r3, r3, #1
   39b2c:	str	r4, [sp]
   39b30:	mov	r2, r4
   39b34:	str	r3, [fp]
   39b38:	ldr	r0, [sp, #32]
   39b3c:	mov	r3, fp
   39b40:	mov	r1, r8
   39b44:	bl	38cbc <__assert_fail@plt+0x264e4>
   39b48:	subs	r2, r0, #0
   39b4c:	beq	39028 <__assert_fail@plt+0x26850>
   39b50:	mov	r1, r5
   39b54:	ldr	r0, [sp, #32]
   39b58:	bl	34fcc <__assert_fail@plt+0x227f4>
   39b5c:	mov	r4, r0
   39b60:	b	39120 <__assert_fail@plt+0x26948>
   39b64:	mov	r0, r6
   39b68:	bl	35d5c <__assert_fail@plt+0x23584>
   39b6c:	b	39028 <__assert_fail@plt+0x26850>
   39b70:	mov	r2, r1
   39b74:	mov	r6, r0
   39b78:	b	39994 <__assert_fail@plt+0x271bc>
   39b7c:	add	sl, sl, #10
   39b80:	ldr	r0, [sp, #56]	; 0x38
   39b84:	lsl	r1, sl, #2
   39b88:	bl	122c8 <xrealloc@plt>
   39b8c:	ldrb	r3, [r5]
   39b90:	str	r0, [sp, #56]	; 0x38
   39b94:	b	397dc <__assert_fail@plt+0x27004>
   39b98:	mov	r2, #0
   39b9c:	mov	r3, fp
   39ba0:	ldr	r0, [sp, #32]
   39ba4:	mov	r1, r8
   39ba8:	str	r2, [sp]
   39bac:	bl	38cbc <__assert_fail@plt+0x264e4>
   39bb0:	ldr	r3, [fp]
   39bb4:	mov	r6, r0
   39bb8:	b	392b4 <__assert_fail@plt+0x26adc>
   39bbc:	mov	r5, r0
   39bc0:	str	r3, [sp, #40]	; 0x28
   39bc4:	b	38d50 <__assert_fail@plt+0x26578>
   39bc8:	add	r3, r5, #2
   39bcc:	str	r3, [fp]
   39bd0:	ldrb	r2, [r5, #2]
   39bd4:	cmp	r2, #49	; 0x31
   39bd8:	moveq	r5, #1
   39bdc:	beq	39c20 <__assert_fail@plt+0x27448>
   39be0:	cmp	r2, #50	; 0x32
   39be4:	moveq	r5, #0
   39be8:	beq	39c20 <__assert_fail@plt+0x27448>
   39bec:	cmp	r2, #48	; 0x30
   39bf0:	moveq	r5, #2
   39bf4:	beq	39c20 <__assert_fail@plt+0x27448>
   39bf8:	mov	r2, #5
   39bfc:	movw	r1, #40724	; 0x9f14
   39c00:	mov	r0, #0
   39c04:	movt	r1, #5
   39c08:	bl	12298 <dcgettext@plt>
   39c0c:	mov	r5, #0
   39c10:	mov	r1, r0
   39c14:	mov	r0, r7
   39c18:	bl	35ccc <__assert_fail@plt+0x234f4>
   39c1c:	ldr	r3, [fp]
   39c20:	add	r3, r3, #1
   39c24:	str	r3, [fp]
   39c28:	b	39aa0 <__assert_fail@plt+0x272c8>
   39c2c:	add	r1, r1, #1
   39c30:	mov	r0, fp
   39c34:	str	r1, [fp]
   39c38:	mov	r1, r6
   39c3c:	str	r2, [sp, #24]
   39c40:	bl	35e30 <__assert_fail@plt+0x23658>
   39c44:	ldr	r3, [fp]
   39c48:	ldr	r2, [sp, #24]
   39c4c:	strd	r0, [sp, #72]	; 0x48
   39c50:	ldrb	r1, [r3]
   39c54:	cmp	r1, #44	; 0x2c
   39c58:	bne	39adc <__assert_fail@plt+0x27304>
   39c5c:	add	r3, r3, #1
   39c60:	mov	r1, r6
   39c64:	str	r3, [fp]
   39c68:	mov	r0, fp
   39c6c:	str	r2, [sp, #24]
   39c70:	bl	35e30 <__assert_fail@plt+0x23658>
   39c74:	ldr	r3, [fp]
   39c78:	ldr	r2, [sp, #24]
   39c7c:	strd	r0, [sp, #80]	; 0x50
   39c80:	ldrb	r1, [r3]
   39c84:	cmp	r1, #59	; 0x3b
   39c88:	bne	39adc <__assert_fail@plt+0x27304>
   39c8c:	ldrd	r6, [sp, #72]	; 0x48
   39c90:	add	r3, r3, #1
   39c94:	ldrd	r0, [sp, #80]	; 0x50
   39c98:	str	r3, [fp]
   39c9c:	orr	r0, r0, r6
   39ca0:	orr	r1, r1, r7
   39ca4:	orrs	r7, r0, r1
   39ca8:	ldrd	r6, [sp, #72]	; 0x48
   39cac:	ldr	r1, [sp, #52]	; 0x34
   39cb0:	moveq	r5, #3
   39cb4:	ldr	r0, [sp, #32]
   39cb8:	strd	r6, [sp]
   39cbc:	ldrd	r6, [sp, #80]	; 0x50
   39cc0:	str	r5, [sp, #16]
   39cc4:	strd	r6, [sp, #8]
   39cc8:	bl	3514c <__assert_fail@plt+0x22974>
   39ccc:	ldr	r7, [sp, #60]	; 0x3c
   39cd0:	str	r0, [r7]
   39cd4:	mov	r6, r4
   39cd8:	b	397c0 <__assert_fail@plt+0x26fe8>
   39cdc:	add	r3, r1, #1
   39ce0:	mov	r1, #59	; 0x3b
   39ce4:	str	r3, [fp]
   39ce8:	mov	r0, r3
   39cec:	str	r2, [sp, #24]
   39cf0:	str	r3, [sp, #28]
   39cf4:	bl	124fc <strchr@plt>
   39cf8:	ldr	r2, [sp, #24]
   39cfc:	ldr	r3, [sp, #28]
   39d00:	subs	r6, r0, #0
   39d04:	beq	39adc <__assert_fail@plt+0x27304>
   39d08:	rsb	r1, r3, r6
   39d0c:	mov	r0, r3
   39d10:	str	r2, [sp, #24]
   39d14:	bl	35e00 <__assert_fail@plt+0x23628>
   39d18:	add	ip, r6, #1
   39d1c:	str	r5, [sp]
   39d20:	ldr	r1, [sp, #52]	; 0x34
   39d24:	mov	r6, #1
   39d28:	str	ip, [fp]
   39d2c:	ldr	r2, [sp, #24]
   39d30:	str	r6, [sp, #144]	; 0x90
   39d34:	mov	r3, r0
   39d38:	ldr	r0, [sp, #32]
   39d3c:	bl	35198 <__assert_fail@plt+0x229c0>
   39d40:	ldr	r7, [sp, #60]	; 0x3c
   39d44:	str	r0, [r7]
   39d48:	b	39cd4 <__assert_fail@plt+0x274fc>
   39d4c:	str	sl, [sp, #48]	; 0x30
   39d50:	mov	ip, r8
   39d54:	mov	sl, r2
   39d58:	mov	fp, r9
   39d5c:	ldr	r8, [sp, #56]	; 0x38
   39d60:	lsl	r2, r2, #2
   39d64:	ldr	r9, [sp, #40]	; 0x28
   39d68:	lsl	r1, sl, #3
   39d6c:	ldr	r6, [sp, #48]	; 0x30
   39d70:	mov	r3, #0
   39d74:	str	r3, [r6, r2]
   39d78:	mov	r2, #0
   39d7c:	ldr	r0, [fp]
   39d80:	mov	r3, #0
   39d84:	strd	r2, [ip, r1]
   39d88:	mov	r2, ip
   39d8c:	ldr	r1, [sp, #48]	; 0x30
   39d90:	ldrb	r3, [r0]
   39d94:	cmp	r3, #59	; 0x3b
   39d98:	addeq	r0, r0, #1
   39d9c:	streq	r0, [fp]
   39da0:	ldr	r0, [sp, #32]
   39da4:	bl	34d14 <__assert_fail@plt+0x2253c>
   39da8:	mov	r4, r0
   39dac:	b	39120 <__assert_fail@plt+0x26948>
   39db0:	mov	r0, r7
   39db4:	bl	35d5c <__assert_fail@plt+0x23584>
   39db8:	mov	r0, r4
   39dbc:	b	39008 <__assert_fail@plt+0x26830>
   39dc0:	mov	r4, #0
   39dc4:	b	39854 <__assert_fail@plt+0x2707c>
   39dc8:	bl	34c50 <__assert_fail@plt+0x22478>
   39dcc:	mov	r4, r0
   39dd0:	b	39120 <__assert_fail@plt+0x26948>
   39dd4:	str	r4, [sp]
   39dd8:	mov	r1, r8
   39ddc:	add	r5, r5, #2
   39de0:	mov	r2, r4
   39de4:	str	r5, [fp]
   39de8:	mov	r3, fp
   39dec:	ldr	r0, [sp, #32]
   39df0:	bl	38cbc <__assert_fail@plt+0x264e4>
   39df4:	subs	r1, r0, #0
   39df8:	beq	39028 <__assert_fail@plt+0x26850>
   39dfc:	ldr	r3, [fp]
   39e00:	ldrb	r2, [r3]
   39e04:	cmp	r2, #59	; 0x3b
   39e08:	bne	39db0 <__assert_fail@plt+0x275d8>
   39e0c:	str	r4, [sp]
   39e10:	mov	r2, r4
   39e14:	add	r3, r3, #1
   39e18:	ldr	r0, [sp, #32]
   39e1c:	str	r3, [fp]
   39e20:	mov	r3, r4
   39e24:	bl	35044 <__assert_fail@plt+0x2286c>
   39e28:	mov	r4, r0
   39e2c:	b	39120 <__assert_fail@plt+0x26948>
   39e30:	mov	r0, r5
   39e34:	bl	35d5c <__assert_fail@plt+0x23584>
   39e38:	b	39028 <__assert_fail@plt+0x26850>
   39e3c:	ldr	r6, [sp, #52]	; 0x34
   39e40:	str	sl, [sp, #48]	; 0x30
   39e44:	ldr	r9, [sp, #40]	; 0x28
   39e48:	mov	r0, r6
   39e4c:	str	r8, [sp, #28]
   39e50:	bl	35d5c <__assert_fail@plt+0x23584>
   39e54:	mov	r0, r5
   39e58:	bl	121f0 <free@plt>
   39e5c:	ldr	r0, [sp, #48]	; 0x30
   39e60:	bl	121f0 <free@plt>
   39e64:	ldr	ip, [sp, #28]
   39e68:	mov	r0, ip
   39e6c:	bl	121f0 <free@plt>
   39e70:	b	39028 <__assert_fail@plt+0x26850>
   39e74:	ldr	r6, [sp, #52]	; 0x34
   39e78:	str	sl, [sp, #48]	; 0x30
   39e7c:	ldr	r9, [sp, #40]	; 0x28
   39e80:	mov	r0, r6
   39e84:	str	r8, [sp, #28]
   39e88:	bl	35d5c <__assert_fail@plt+0x23584>
   39e8c:	b	39e5c <__assert_fail@plt+0x27684>
   39e90:	ldr	r3, [sp, #192]	; 0xc0
   39e94:	ldr	r2, [sp, #200]	; 0xc8
   39e98:	subs	r0, r2, r3
   39e9c:	rsbs	r3, r0, #0
   39ea0:	adcs	r3, r3, r0
   39ea4:	str	r3, [sp, #60]	; 0x3c
   39ea8:	b	3965c <__assert_fail@plt+0x26e84>
   39eac:	mov	r4, #11
   39eb0:	b	3907c <__assert_fail@plt+0x268a4>
   39eb4:	add	r5, r5, #2
   39eb8:	str	r5, [fp]
   39ebc:	add	r5, r5, #1
   39ec0:	ldrb	r2, [r5, #-1]
   39ec4:	cmp	r2, #58	; 0x3a
   39ec8:	bne	39eb8 <__assert_fail@plt+0x276e0>
   39ecc:	str	r5, [fp]
   39ed0:	b	3990c <__assert_fail@plt+0x27134>
   39ed4:	add	r2, r7, #1
   39ed8:	add	r3, r7, #2
   39edc:	str	r2, [fp]
   39ee0:	mov	r1, r8
   39ee4:	ldrb	r6, [r7, #1]
   39ee8:	mov	r2, r5
   39eec:	str	r5, [sp]
   39ef0:	ldr	r0, [sp, #32]
   39ef4:	str	r3, [fp]
   39ef8:	mov	r3, fp
   39efc:	bl	38cbc <__assert_fail@plt+0x264e4>
   39f00:	subs	r1, r0, #0
   39f04:	beq	39830 <__assert_fail@plt+0x27058>
   39f08:	cmp	r6, #98	; 0x62
   39f0c:	beq	3a1b0 <__assert_fail@plt+0x279d8>
   39f10:	cmp	r6, #102	; 0x66
   39f14:	movweq	r5, #40384	; 0x9dc0
   39f18:	movteq	r5, #5
   39f1c:	beq	39f48 <__assert_fail@plt+0x27770>
   39f20:	mov	r0, r5
   39f24:	mov	r2, #5
   39f28:	movw	r1, #40692	; 0x9ef4
   39f2c:	movt	r1, #5
   39f30:	bl	12298 <dcgettext@plt>
   39f34:	movw	r5, #40392	; 0x9dc8
   39f38:	movt	r5, #5
   39f3c:	mov	r1, r0
   39f40:	mov	r0, r7
   39f44:	bl	35ccc <__assert_fail@plt+0x234f4>
   39f48:	ldr	r3, [fp]
   39f4c:	ldrb	r2, [r3]
   39f50:	cmp	r2, #58	; 0x3a
   39f54:	bne	39828 <__assert_fail@plt+0x27050>
   39f58:	mov	r6, #0
   39f5c:	add	r3, r3, #1
   39f60:	str	r6, [sp]
   39f64:	mov	r2, r6
   39f68:	str	r3, [fp]
   39f6c:	mov	r1, r8
   39f70:	mov	r3, fp
   39f74:	ldr	r0, [sp, #32]
   39f78:	bl	38cbc <__assert_fail@plt+0x264e4>
   39f7c:	ldr	r3, [fp]
   39f80:	ldrb	r1, [r3]
   39f84:	cmp	r1, #44	; 0x2c
   39f88:	mov	r2, r0
   39f8c:	bne	39828 <__assert_fail@plt+0x27050>
   39f90:	add	r3, r3, #1
   39f94:	mov	r1, r6
   39f98:	str	r3, [fp]
   39f9c:	mov	r0, fp
   39fa0:	str	r2, [sp, #24]
   39fa4:	bl	35e30 <__assert_fail@plt+0x23658>
   39fa8:	ldr	r3, [fp]
   39fac:	ldr	r2, [sp, #24]
   39fb0:	ldrb	ip, [r3]
   39fb4:	cmp	ip, #59	; 0x3b
   39fb8:	bne	39828 <__assert_fail@plt+0x27050>
   39fbc:	strd	r0, [sp]
   39fc0:	add	r3, r3, #1
   39fc4:	mov	r7, #0
   39fc8:	str	r3, [fp]
   39fcc:	mov	r1, r5
   39fd0:	mov	r3, #2
   39fd4:	mov	r6, #0
   39fd8:	ldr	r0, [sp, #32]
   39fdc:	strd	r6, [sp, #8]
   39fe0:	str	r3, [sp, #16]
   39fe4:	bl	3514c <__assert_fail@plt+0x22974>
   39fe8:	ldr	r7, [sp, #52]	; 0x34
   39fec:	cmp	r0, #0
   39ff0:	str	r0, [r7]
   39ff4:	bne	39cd4 <__assert_fail@plt+0x274fc>
   39ff8:	b	39830 <__assert_fail@plt+0x27058>
   39ffc:	add	r3, r4, #1
   3a000:	mov	r0, fp
   3a004:	str	r3, [fp]
   3a008:	mov	r1, #0
   3a00c:	bl	35e30 <__assert_fail@plt+0x23658>
   3a010:	ldr	r3, [fp]
   3a014:	ldrb	r2, [r3]
   3a018:	cmp	r2, #44	; 0x2c
   3a01c:	mov	r5, r0
   3a020:	beq	3abb4 <__assert_fail@plt+0x283dc>
   3a024:	mov	r0, r4
   3a028:	bl	35d5c <__assert_fail@plt+0x23584>
   3a02c:	b	39028 <__assert_fail@plt+0x26850>
   3a030:	cmp	r4, #0
   3a034:	add	r3, r3, #1
   3a038:	mov	r9, sl
   3a03c:	str	r3, [fp]
   3a040:	moveq	ip, #1
   3a044:	bne	3ad9c <__assert_fail@plt+0x285c4>
   3a048:	mov	r0, #0
   3a04c:	ldr	r1, [sp, #40]	; 0x28
   3a050:	str	r0, [r6, r4]
   3a054:	mov	r3, r6
   3a058:	ldr	r2, [sp, #48]	; 0x30
   3a05c:	ldr	r0, [sp, #32]
   3a060:	str	ip, [sp]
   3a064:	bl	35044 <__assert_fail@plt+0x2286c>
   3a068:	mov	r4, r0
   3a06c:	b	39120 <__assert_fail@plt+0x26948>
   3a070:	ldr	r0, [sp, #32]
   3a074:	bl	34c18 <__assert_fail@plt+0x22440>
   3a078:	mov	r4, r0
   3a07c:	b	39120 <__assert_fail@plt+0x26948>
   3a080:	mov	r9, sl
   3a084:	b	39028 <__assert_fail@plt+0x26850>
   3a088:	ldr	r7, [sp, #52]	; 0x34
   3a08c:	mov	r9, sl
   3a090:	mov	r0, r7
   3a094:	bl	35d5c <__assert_fail@plt+0x23584>
   3a098:	mov	r0, #0
   3a09c:	b	39008 <__assert_fail@plt+0x26830>
   3a0a0:	mov	r0, r7
   3a0a4:	movw	r1, #40460	; 0x9e0c
   3a0a8:	mov	r2, #24
   3a0ac:	movt	r1, #5
   3a0b0:	str	r3, [sp, #28]
   3a0b4:	bl	12784 <strncmp@plt>
   3a0b8:	ldr	r3, [sp, #28]
   3a0bc:	cmp	r0, #0
   3a0c0:	bne	3a0e4 <__assert_fail@plt+0x2790c>
   3a0c4:	movw	r1, #40488	; 0x9e28
   3a0c8:	ldr	r0, [sp, #56]	; 0x38
   3a0cc:	movt	r1, #5
   3a0d0:	mov	r2, #23
   3a0d4:	bl	12784 <strncmp@plt>
   3a0d8:	ldr	r3, [sp, #28]
   3a0dc:	cmp	r0, #0
   3a0e0:	beq	3b02c <__assert_fail@plt+0x28854>
   3a0e4:	cmp	r3, #0
   3a0e8:	bne	39710 <__assert_fail@plt+0x26f38>
   3a0ec:	ldrd	r2, [sp, #40]	; 0x28
   3a0f0:	orrs	r3, r2, r3
   3a0f4:	bne	39710 <__assert_fail@plt+0x26f38>
   3a0f8:	ldr	r0, [sp, #56]	; 0x38
   3a0fc:	movw	r1, #40512	; 0x9e40
   3a100:	mov	r2, #24
   3a104:	movt	r1, #5
   3a108:	bl	12784 <strncmp@plt>
   3a10c:	cmp	r0, #0
   3a110:	bne	39710 <__assert_fail@plt+0x26f38>
   3a114:	ldr	r0, [sp, #32]
   3a118:	mov	r1, #8
   3a11c:	mov	r2, #1
   3a120:	bl	34c24 <__assert_fail@plt+0x2244c>
   3a124:	mov	r4, r0
   3a128:	b	39120 <__assert_fail@plt+0x26948>
   3a12c:	ldrb	r3, [sl]
   3a130:	cmp	r3, #0
   3a134:	beq	39020 <__assert_fail@plt+0x26848>
   3a138:	mov	r1, sl
   3a13c:	mov	r2, #0
   3a140:	b	3a150 <__assert_fail@plt+0x27978>
   3a144:	ldrb	r3, [r1, #1]!
   3a148:	cmp	r3, #0
   3a14c:	beq	39020 <__assert_fail@plt+0x26848>
   3a150:	cmp	r3, #60	; 0x3c
   3a154:	mov	r5, r1
   3a158:	addeq	r2, r2, #1
   3a15c:	beq	3a144 <__assert_fail@plt+0x2796c>
   3a160:	cmp	r3, #62	; 0x3e
   3a164:	subeq	r2, r2, #1
   3a168:	beq	3a144 <__assert_fail@plt+0x2796c>
   3a16c:	cmp	r3, #58	; 0x3a
   3a170:	bne	3a144 <__assert_fail@plt+0x2796c>
   3a174:	cmp	r2, #0
   3a178:	bne	3a144 <__assert_fail@plt+0x2796c>
   3a17c:	b	390c0 <__assert_fail@plt+0x268e8>
   3a180:	mov	r2, #0
   3a184:	str	r6, [fp]
   3a188:	ldr	r0, [sp, #32]
   3a18c:	mov	r1, r8
   3a190:	str	r2, [sp]
   3a194:	mov	r3, fp
   3a198:	bl	38cbc <__assert_fail@plt+0x264e4>
   3a19c:	subs	sl, r0, #0
   3a1a0:	beq	39028 <__assert_fail@plt+0x26850>
   3a1a4:	ldr	r7, [fp]
   3a1a8:	ldrb	r3, [r7]
   3a1ac:	b	39670 <__assert_fail@plt+0x26e98>
   3a1b0:	ldr	r0, [sp, #32]
   3a1b4:	bl	35844 <__assert_fail@plt+0x2306c>
   3a1b8:	subs	r1, r0, #0
   3a1bc:	beq	3b7f0 <__assert_fail@plt+0x29018>
   3a1c0:	movw	r0, #40684	; 0x9eec
   3a1c4:	mov	r2, #0
   3a1c8:	movt	r0, #5
   3a1cc:	bl	122ec <concat@plt>
   3a1d0:	mov	r5, r0
   3a1d4:	b	39f48 <__assert_fail@plt+0x27770>
   3a1d8:	ldr	ip, [sp, #56]	; 0x38
   3a1dc:	mov	r3, #0
   3a1e0:	ldr	sl, [sp, #68]	; 0x44
   3a1e4:	str	r3, [ip, r6, lsl #2]
   3a1e8:	ldr	r5, [fp]
   3a1ec:	ldrb	r6, [r5]
   3a1f0:	str	r5, [sp, #96]	; 0x60
   3a1f4:	cmp	r6, #59	; 0x3b
   3a1f8:	beq	3b6bc <__assert_fail@plt+0x28ee4>
   3a1fc:	str	r8, [sp, #104]	; 0x68
   3a200:	mov	r8, fp
   3a204:	str	sl, [sp, #168]	; 0xa8
   3a208:	mov	sl, r3
   3a20c:	movw	r7, #168	; 0xa8
   3a210:	str	r3, [sp, #64]	; 0x40
   3a214:	movt	r7, #7
   3a218:	str	r3, [sp, #60]	; 0x3c
   3a21c:	str	r7, [sp, #156]	; 0x9c
   3a220:	str	r3, [sp, #100]	; 0x64
   3a224:	str	r3, [sp, #148]	; 0x94
   3a228:	str	r3, [sp, #132]	; 0x84
   3a22c:	str	r9, [sp, #52]	; 0x34
   3a230:	mov	r0, r5
   3a234:	mov	r1, #58	; 0x3a
   3a238:	bl	124fc <strchr@plt>
   3a23c:	subs	r4, r0, #0
   3a240:	beq	3b7e0 <__assert_fail@plt+0x29008>
   3a244:	ldrb	r3, [r4, #1]
   3a248:	cmp	r3, #58	; 0x3a
   3a24c:	bne	3b7e0 <__assert_fail@plt+0x29008>
   3a250:	cmp	r6, #111	; 0x6f
   3a254:	bne	3a264 <__assert_fail@plt+0x27a8c>
   3a258:	ldrb	r3, [r5, #1]
   3a25c:	cmp	r3, #112	; 0x70
   3a260:	beq	3b818 <__assert_fail@plt+0x29040>
   3a264:	rsb	r1, r5, r4
   3a268:	mov	r0, r5
   3a26c:	bl	35e00 <__assert_fail@plt+0x23628>
   3a270:	add	r4, r4, #2
   3a274:	str	r4, [r8]
   3a278:	str	r0, [sp, #60]	; 0x3c
   3a27c:	mov	r0, #40	; 0x28
   3a280:	add	ip, sp, #212	; 0xd4
   3a284:	mov	fp, #0
   3a288:	str	ip, [sp, #172]	; 0xac
   3a28c:	str	fp, [sp, #68]	; 0x44
   3a290:	bl	12358 <xmalloc@plt>
   3a294:	ldr	r9, [sp, #68]	; 0x44
   3a298:	mov	r6, #10
   3a29c:	ldr	r5, [sp, #32]
   3a2a0:	str	r6, [sp, #108]	; 0x6c
   3a2a4:	str	r0, [sp, #64]	; 0x40
   3a2a8:	cmp	r9, #0
   3a2ac:	ldrne	r0, [r8]
   3a2b0:	beq	3aa4c <__assert_fail@plt+0x28274>
   3a2b4:	add	r0, r0, #1
   3a2b8:	mov	r1, #59	; 0x3b
   3a2bc:	str	r0, [r8]
   3a2c0:	bl	124fc <strchr@plt>
   3a2c4:	subs	r4, r0, #0
   3a2c8:	beq	3aa7c <__assert_fail@plt+0x282a4>
   3a2cc:	mov	r0, r5
   3a2d0:	mov	r1, r9
   3a2d4:	bl	35818 <__assert_fail@plt+0x23040>
   3a2d8:	cmp	r0, #19
   3a2dc:	movne	fp, #0
   3a2e0:	beq	3a948 <__assert_fail@plt+0x28170>
   3a2e4:	ldr	r0, [r8]
   3a2e8:	rsb	r1, r0, r4
   3a2ec:	bl	35e00 <__assert_fail@plt+0x23628>
   3a2f0:	add	r3, r4, #1
   3a2f4:	str	r3, [r8]
   3a2f8:	ldrb	r3, [r4, #1]
   3a2fc:	cmp	r3, #48	; 0x30
   3a300:	mov	sl, r0
   3a304:	beq	3a548 <__assert_fail@plt+0x27d70>
   3a308:	subs	r1, r3, #49	; 0x31
   3a30c:	rsbs	r3, r1, #0
   3a310:	adcs	r3, r3, r1
   3a314:	str	r3, [sp, #116]	; 0x74
   3a318:	add	r3, r4, #2
   3a31c:	str	r3, [r8]
   3a320:	ldrb	r2, [r4, #2]
   3a324:	sub	r1, r2, #42	; 0x2a
   3a328:	cmp	r1, #26
   3a32c:	ldrls	pc, [pc, r1, lsl #2]
   3a330:	b	3a4ec <__assert_fail@plt+0x27d14>
   3a334:	andeq	sl, r3, r0, lsr #7
   3a338:	andeq	sl, r3, ip, ror #9
   3a33c:	andeq	sl, r3, ip, ror #9
   3a340:	andeq	sl, r3, ip, ror #9
   3a344:	andeq	sl, r3, r0, lsr #7
   3a348:	andeq	sl, r3, ip, ror #9
   3a34c:	andeq	sl, r3, ip, ror #9
   3a350:	andeq	sl, r3, ip, ror #9
   3a354:	andeq	sl, r3, ip, ror #9
   3a358:	andeq	sl, r3, ip, ror #9
   3a35c:	andeq	sl, r3, ip, ror #9
   3a360:	andeq	sl, r3, ip, ror #9
   3a364:	andeq	sl, r3, ip, ror #9
   3a368:	andeq	sl, r3, ip, ror #9
   3a36c:	andeq	sl, r3, ip, ror #9
   3a370:	andeq	sl, r3, ip, ror #9
   3a374:	andeq	sl, r3, ip, ror #9
   3a378:	andeq	sl, r3, ip, ror #9
   3a37c:	andeq	sl, r3, ip, ror #9
   3a380:	andeq	sl, r3, ip, ror #9
   3a384:	andeq	sl, r3, ip, ror #9
   3a388:	andeq	sl, r3, r0, lsr #7
   3a38c:	andeq	sl, r3, ip, ror #9
   3a390:	ldrdeq	sl, [r3], -r4
   3a394:			; <UNDEFINED> instruction: 0x0003a4b8
   3a398:	muleq	r3, ip, r4
   3a39c:	andeq	sl, r3, r4, lsl #9
   3a3a0:	mov	r6, #0
   3a3a4:	str	r6, [sp, #80]	; 0x50
   3a3a8:	cmp	r2, #46	; 0x2e
   3a3ac:	beq	3a924 <__assert_fail@plt+0x2814c>
   3a3b0:	cmp	r2, #63	; 0x3f
   3a3b4:	beq	3a8e0 <__assert_fail@plt+0x28108>
   3a3b8:	cmp	r2, #42	; 0x2a
   3a3bc:	beq	3a844 <__assert_fail@plt+0x2806c>
   3a3c0:	mov	r4, #0
   3a3c4:	movw	r1, #40800	; 0x9f60
   3a3c8:	ldr	r0, [sp, #96]	; 0x60
   3a3cc:	movt	r1, #5
   3a3d0:	mov	r7, r4
   3a3d4:	bl	35ccc <__assert_fail@plt+0x234f4>
   3a3d8:	mov	r2, #0
   3a3dc:	mov	r3, #0
   3a3e0:	str	r4, [sp, #72]	; 0x48
   3a3e4:	strd	r2, [sp, #120]	; 0x78
   3a3e8:	cmp	fp, #0
   3a3ec:	moveq	fp, sl
   3a3f0:	bne	3a594 <__assert_fail@plt+0x27dbc>
   3a3f4:	ldr	r0, [sp, #68]	; 0x44
   3a3f8:	ldr	r1, [sp, #108]	; 0x6c
   3a3fc:	add	ip, r0, #1
   3a400:	cmp	ip, r1
   3a404:	bcs	3a554 <__assert_fail@plt+0x27d7c>
   3a408:	cmp	r7, #0
   3a40c:	ldr	r7, [sp, #80]	; 0x50
   3a410:	mov	r1, fp
   3a414:	str	r6, [sp, #4]
   3a418:	mov	r2, r9
   3a41c:	str	r7, [sp]
   3a420:	bne	3a520 <__assert_fail@plt+0x27d48>
   3a424:	ldrd	r6, [sp, #120]	; 0x78
   3a428:	mov	r0, r5
   3a42c:	ldr	r3, [sp, #116]	; 0x74
   3a430:	str	r4, [sp, #16]
   3a434:	strd	r6, [sp, #8]
   3a438:	str	ip, [sp, #28]
   3a43c:	bl	35220 <__assert_fail@plt+0x22a48>
   3a440:	ldr	r7, [sp, #68]	; 0x44
   3a444:	ldr	fp, [sp, #64]	; 0x40
   3a448:	ldr	ip, [sp, #28]
   3a44c:	mov	r3, r0
   3a450:	str	r0, [fp, r7, lsl #2]
   3a454:	cmp	r3, #0
   3a458:	beq	3a7ec <__assert_fail@plt+0x28014>
   3a45c:	ldr	r3, [r8]
   3a460:	ldrb	r3, [r3]
   3a464:	cmp	r3, #0
   3a468:	cmpne	r3, #59	; 0x3b
   3a46c:	moveq	r3, #0
   3a470:	movne	r3, #1
   3a474:	beq	3aed4 <__assert_fail@plt+0x286fc>
   3a478:	str	ip, [sp, #68]	; 0x44
   3a47c:	ldr	r9, [sp, #72]	; 0x48
   3a480:	b	3a2a8 <__assert_fail@plt+0x27ad0>
   3a484:	mov	r6, #1
   3a488:	add	r3, r4, #3
   3a48c:	str	r6, [sp, #80]	; 0x50
   3a490:	str	r3, [r8]
   3a494:	ldrb	r2, [r4, #3]
   3a498:	b	3a3a8 <__assert_fail@plt+0x27bd0>
   3a49c:	add	r3, r4, #3
   3a4a0:	mov	r7, #0
   3a4a4:	str	r3, [r8]
   3a4a8:	mov	r6, #1
   3a4ac:	str	r7, [sp, #80]	; 0x50
   3a4b0:	ldrb	r2, [r4, #3]
   3a4b4:	b	3a3a8 <__assert_fail@plt+0x27bd0>
   3a4b8:	add	r3, r4, #3
   3a4bc:	mov	ip, #1
   3a4c0:	str	r3, [r8]
   3a4c4:	mov	r6, #0
   3a4c8:	str	ip, [sp, #80]	; 0x50
   3a4cc:	ldrb	r2, [r4, #3]
   3a4d0:	b	3a3a8 <__assert_fail@plt+0x27bd0>
   3a4d4:	mov	r6, #0
   3a4d8:	add	r3, r4, #3
   3a4dc:	str	r6, [sp, #80]	; 0x50
   3a4e0:	str	r3, [r8]
   3a4e4:	ldrb	r2, [r4, #3]
   3a4e8:	b	3a3a8 <__assert_fail@plt+0x27bd0>
   3a4ec:	mov	r2, #5
   3a4f0:	movw	r1, #40764	; 0x9f3c
   3a4f4:	mov	r0, #0
   3a4f8:	movt	r1, #5
   3a4fc:	bl	12298 <dcgettext@plt>
   3a500:	mov	r6, #0
   3a504:	mov	r1, r0
   3a508:	ldr	r0, [sp, #96]	; 0x60
   3a50c:	bl	35ccc <__assert_fail@plt+0x234f4>
   3a510:	ldr	r3, [r8]
   3a514:	str	r6, [sp, #80]	; 0x50
   3a518:	ldrb	r2, [r3]
   3a51c:	b	3a3a8 <__assert_fail@plt+0x27bd0>
   3a520:	ldr	r3, [sp, #116]	; 0x74
   3a524:	mov	r0, r5
   3a528:	str	ip, [sp, #28]
   3a52c:	bl	3527c <__assert_fail@plt+0x22aa4>
   3a530:	ldr	fp, [sp, #68]	; 0x44
   3a534:	ldr	r6, [sp, #64]	; 0x40
   3a538:	ldr	ip, [sp, #28]
   3a53c:	mov	r3, r0
   3a540:	str	r0, [r6, fp, lsl #2]
   3a544:	b	3a454 <__assert_fail@plt+0x27c7c>
   3a548:	mov	r7, #2
   3a54c:	str	r7, [sp, #116]	; 0x74
   3a550:	b	3a318 <__assert_fail@plt+0x27b40>
   3a554:	add	r1, r1, #10
   3a558:	ldr	r0, [sp, #64]	; 0x40
   3a55c:	str	r1, [sp, #108]	; 0x6c
   3a560:	lsl	r1, r1, #2
   3a564:	str	ip, [sp, #28]
   3a568:	bl	122c8 <xrealloc@plt>
   3a56c:	ldr	ip, [sp, #28]
   3a570:	str	r0, [sp, #64]	; 0x40
   3a574:	b	3a408 <__assert_fail@plt+0x27c30>
   3a578:	mov	r7, #0
   3a57c:	str	r7, [sp, #72]	; 0x48
   3a580:	mov	r4, r7
   3a584:	mov	r7, #1
   3a588:	mov	r0, #0
   3a58c:	mov	r1, #0
   3a590:	strd	r0, [sp, #120]	; 0x78
   3a594:	mov	r0, r5
   3a598:	ldr	r1, [sp, #104]	; 0x68
   3a59c:	add	r2, sp, #188	; 0xbc
   3a5a0:	bl	36170 <__assert_fail@plt+0x23998>
   3a5a4:	cmp	r0, #0
   3a5a8:	str	r0, [sp, #160]	; 0xa0
   3a5ac:	beq	3a7ec <__assert_fail@plt+0x28014>
   3a5b0:	mov	r1, r9
   3a5b4:	mov	r0, r5
   3a5b8:	bl	358f8 <__assert_fail@plt+0x23120>
   3a5bc:	cmp	r0, #0
   3a5c0:	str	r0, [sp, #164]	; 0xa4
   3a5c4:	beq	3aa7c <__assert_fail@plt+0x282a4>
   3a5c8:	ldrb	r3, [sl]
   3a5cc:	cmp	r3, #95	; 0x5f
   3a5d0:	str	r3, [sp, #88]	; 0x58
   3a5d4:	beq	3aa90 <__assert_fail@plt+0x282b8>
   3a5d8:	movw	r1, #40832	; 0x9f80
   3a5dc:	mov	r0, sl
   3a5e0:	movt	r1, #5
   3a5e4:	mov	r2, #4
   3a5e8:	bl	12784 <strncmp@plt>
   3a5ec:	cmp	r0, #0
   3a5f0:	bne	3a974 <__assert_fail@plt+0x2819c>
   3a5f4:	mov	fp, #1
   3a5f8:	str	fp, [sp, #92]	; 0x5c
   3a5fc:	ldr	r3, [sp, #88]	; 0x58
   3a600:	cmp	r3, #95	; 0x5f
   3a604:	beq	3ad58 <__assert_fail@plt+0x28580>
   3a608:	movw	r1, #40960	; 0xa000
   3a60c:	mov	r0, sl
   3a610:	movt	r1, #5
   3a614:	mov	r2, #4
   3a618:	bl	12784 <strncmp@plt>
   3a61c:	rsbs	r0, r0, #1
   3a620:	movcc	r0, #0
   3a624:	str	r0, [sp, #152]	; 0x98
   3a628:	mov	r3, #0
   3a62c:	ldr	ip, [sp, #152]	; 0x98
   3a630:	orr	r3, r3, ip
   3a634:	orrs	r3, r3, fp
   3a638:	bne	3a964 <__assert_fail@plt+0x2818c>
   3a63c:	ldr	fp, [sp, #48]	; 0x30
   3a640:	cmp	fp, #0
   3a644:	beq	3af48 <__assert_fail@plt+0x28770>
   3a648:	mov	r0, fp
   3a64c:	bl	124e4 <strlen@plt>
   3a650:	mov	r9, r0
   3a654:	ldr	ip, [sp, #80]	; 0x50
   3a658:	movw	r3, #11856	; 0x2e50
   3a65c:	movt	r3, #5
   3a660:	movw	fp, #10676	; 0x29b4
   3a664:	cmp	ip, #0
   3a668:	movt	fp, #5
   3a66c:	movw	r2, #40420	; 0x9de4
   3a670:	movt	r2, #5
   3a674:	moveq	fp, r3
   3a678:	cmp	r6, #0
   3a67c:	movne	r3, r2
   3a680:	cmp	r9, #0
   3a684:	beq	3ae9c <__assert_fail@plt+0x286c4>
   3a688:	ldr	ip, [sp, #48]	; 0x30
   3a68c:	cmp	ip, #0
   3a690:	beq	3af50 <__assert_fail@plt+0x28778>
   3a694:	mov	r0, ip
   3a698:	mov	r1, #60	; 0x3c
   3a69c:	str	r3, [sp, #28]
   3a6a0:	bl	124fc <strchr@plt>
   3a6a4:	ldr	r3, [sp, #28]
   3a6a8:	cmp	r0, #0
   3a6ac:	beq	3af50 <__assert_fail@plt+0x28778>
   3a6b0:	add	ip, sp, #232	; 0xe8
   3a6b4:	str	r3, [sp, #4]
   3a6b8:	str	fp, [sp]
   3a6bc:	movw	r3, #40840	; 0x9f88
   3a6c0:	mov	r0, ip
   3a6c4:	movt	r3, #5
   3a6c8:	mov	r1, #1
   3a6cc:	mov	r2, #20
   3a6d0:	mov	r9, #1
   3a6d4:	str	ip, [sp, #88]	; 0x58
   3a6d8:	bl	12568 <__sprintf_chk@plt>
   3a6dc:	mov	r3, #0
   3a6e0:	str	r3, [sp, #128]	; 0x80
   3a6e4:	ldr	ip, [sp, #92]	; 0x5c
   3a6e8:	cmp	ip, #0
   3a6ec:	movne	fp, #0
   3a6f0:	bne	3a700 <__assert_fail@plt+0x27f28>
   3a6f4:	ldr	r0, [sp, #60]	; 0x3c
   3a6f8:	bl	124e4 <strlen@plt>
   3a6fc:	mov	fp, r0
   3a700:	ldr	r0, [sp, #88]	; 0x58
   3a704:	bl	124e4 <strlen@plt>
   3a708:	mov	r3, r0
   3a70c:	mov	r0, sl
   3a710:	str	r3, [sp, #28]
   3a714:	bl	124e4 <strlen@plt>
   3a718:	ldr	ip, [sp, #60]	; 0x3c
   3a71c:	ldr	r3, [sp, #28]
   3a720:	ldrb	r2, [ip]
   3a724:	add	r3, r3, fp
   3a728:	add	r9, r3, r9
   3a72c:	cmp	r2, #111	; 0x6f
   3a730:	add	r9, r9, r0
   3a734:	bne	3a744 <__assert_fail@plt+0x27f6c>
   3a738:	ldrb	r3, [ip, #1]
   3a73c:	cmp	r3, #112	; 0x70
   3a740:	beq	3af8c <__assert_fail@plt+0x287b4>
   3a744:	mov	r0, r9
   3a748:	bl	12358 <xmalloc@plt>
   3a74c:	ldr	ip, [sp, #92]	; 0x5c
   3a750:	cmp	ip, #0
   3a754:	mov	fp, r0
   3a758:	beq	3ae90 <__assert_fail@plt+0x286b8>
   3a75c:	mov	r3, #0
   3a760:	strb	r3, [r0]
   3a764:	mov	r0, fp
   3a768:	bl	124e4 <strlen@plt>
   3a76c:	ldr	r1, [sp, #88]	; 0x58
   3a770:	mov	r9, r0
   3a774:	add	r0, fp, r0
   3a778:	bl	12274 <stpcpy@plt>
   3a77c:	ldr	r3, [sp, #128]	; 0x80
   3a780:	cmp	r3, #0
   3a784:	beq	3a790 <__assert_fail@plt+0x27fb8>
   3a788:	mov	r1, r3
   3a78c:	bl	12388 <strcpy@plt>
   3a790:	mov	r0, fp
   3a794:	mov	r1, sl
   3a798:	bl	1234c <strcat@plt>
   3a79c:	ldrb	r3, [sl]
   3a7a0:	cmp	r3, #0
   3a7a4:	beq	3a7b4 <__assert_fail@plt+0x27fdc>
   3a7a8:	ldr	ip, [sp, #152]	; 0x98
   3a7ac:	cmp	ip, #0
   3a7b0:	beq	3a9a4 <__assert_fail@plt+0x281cc>
   3a7b4:	mov	r0, #4
   3a7b8:	bl	12358 <xmalloc@plt>
   3a7bc:	mov	lr, #0
   3a7c0:	ldr	r1, [sp, #164]	; 0xa4
   3a7c4:	str	lr, [sp]
   3a7c8:	ldr	r2, [sp, #160]	; 0xa0
   3a7cc:	mov	ip, r0
   3a7d0:	mov	r3, r0
   3a7d4:	str	lr, [ip]
   3a7d8:	mov	r0, r5
   3a7dc:	bl	35044 <__assert_fail@plt+0x2286c>
   3a7e0:	mov	r9, r0
   3a7e4:	cmp	r9, #0
   3a7e8:	bne	3a3f4 <__assert_fail@plt+0x27c1c>
   3a7ec:	ldr	r9, [sp, #52]	; 0x34
   3a7f0:	mov	r7, sl
   3a7f4:	ldr	r6, [sp, #60]	; 0x3c
   3a7f8:	cmp	r6, #0
   3a7fc:	beq	3a808 <__assert_fail@plt+0x28030>
   3a800:	mov	r0, r6
   3a804:	bl	121f0 <free@plt>
   3a808:	ldr	sl, [sp, #64]	; 0x40
   3a80c:	cmp	sl, #0
   3a810:	beq	3a81c <__assert_fail@plt+0x28044>
   3a814:	mov	r0, sl
   3a818:	bl	121f0 <free@plt>
   3a81c:	cmp	r7, #0
   3a820:	beq	3a82c <__assert_fail@plt+0x28054>
   3a824:	mov	r0, r7
   3a828:	bl	121f0 <free@plt>
   3a82c:	ldr	fp, [sp, #56]	; 0x38
   3a830:	cmp	fp, #0
   3a834:	beq	39028 <__assert_fail@plt+0x26850>
   3a838:	mov	r0, fp
   3a83c:	bl	121f0 <free@plt>
   3a840:	b	39028 <__assert_fail@plt+0x26850>
   3a844:	add	r3, r3, #1
   3a848:	mov	r0, r8
   3a84c:	str	r3, [r8]
   3a850:	mov	r1, #0
   3a854:	bl	35e30 <__assert_fail@plt+0x23658>
   3a858:	ldr	r3, [r8]
   3a85c:	ldrb	r2, [r3]
   3a860:	cmp	r2, #59	; 0x3b
   3a864:	bne	3aa7c <__assert_fail@plt+0x282a4>
   3a868:	add	r4, r3, #1
   3a86c:	str	r4, [r8]
   3a870:	ldrb	ip, [r3, #1]
   3a874:	mvn	r2, #-2147483648	; 0x80000000
   3a878:	mov	r3, #0
   3a87c:	and	r2, r2, r0
   3a880:	cmp	ip, #59	; 0x3b
   3a884:	and	r3, r3, r1
   3a888:	strd	r2, [sp, #120]	; 0x78
   3a88c:	beq	3aa3c <__assert_fail@plt+0x28264>
   3a890:	cmp	r4, #0
   3a894:	beq	3ae34 <__assert_fail@plt+0x2865c>
   3a898:	mov	r7, #0
   3a89c:	mov	r3, r8
   3a8a0:	mov	r2, r7
   3a8a4:	mov	r0, r5
   3a8a8:	str	r7, [sp]
   3a8ac:	ldr	r1, [sp, #104]	; 0x68
   3a8b0:	bl	38cbc <__assert_fail@plt+0x264e4>
   3a8b4:	ldr	r3, [r8]
   3a8b8:	ldrb	r2, [r3]
   3a8bc:	cmp	r2, #58	; 0x3a
   3a8c0:	mov	r4, r0
   3a8c4:	beq	3af3c <__assert_fail@plt+0x28764>
   3a8c8:	cmp	r2, #59	; 0x3b
   3a8cc:	bne	3aa7c <__assert_fail@plt+0x282a4>
   3a8d0:	add	r3, r3, #1
   3a8d4:	str	r7, [sp, #72]	; 0x48
   3a8d8:	str	r3, [r8]
   3a8dc:	b	3a3e8 <__assert_fail@plt+0x27c10>
   3a8e0:	add	r3, r3, #1
   3a8e4:	ldr	r0, [sp, #60]	; 0x3c
   3a8e8:	str	r3, [r8]
   3a8ec:	bl	124e4 <strlen@plt>
   3a8f0:	ldr	r1, [sp, #60]	; 0x3c
   3a8f4:	mov	r2, r0
   3a8f8:	mov	r0, sl
   3a8fc:	bl	12784 <strncmp@plt>
   3a900:	cmp	r0, #0
   3a904:	bne	3a578 <__assert_fail@plt+0x27da0>
   3a908:	mov	r4, r0
   3a90c:	mov	r1, #0
   3a910:	mov	r0, #0
   3a914:	str	r4, [sp, #72]	; 0x48
   3a918:	strd	r0, [sp, #120]	; 0x78
   3a91c:	mov	r7, #1
   3a920:	b	3a3e8 <__assert_fail@plt+0x27c10>
   3a924:	mov	r4, #0
   3a928:	add	r3, r3, #1
   3a92c:	mov	r0, #0
   3a930:	mov	r1, #0
   3a934:	mov	r7, r4
   3a938:	str	r3, [r8]
   3a93c:	str	r4, [sp, #72]	; 0x48
   3a940:	strd	r0, [sp, #120]	; 0x78
   3a944:	b	3a3e8 <__assert_fail@plt+0x27c10>
   3a948:	mov	r0, r5
   3a94c:	mov	r1, r9
   3a950:	add	r2, sp, #176	; 0xb0
   3a954:	bl	3593c <__assert_fail@plt+0x23164>
   3a958:	rsbs	fp, r0, #1
   3a95c:	movcc	fp, #0
   3a960:	b	3a2e4 <__assert_fail@plt+0x27b0c>
   3a964:	ldr	r3, [sp, #88]	; 0x58
   3a968:	mov	fp, sl
   3a96c:	mov	r9, #0
   3a970:	b	3a7a0 <__assert_fail@plt+0x27fc8>
   3a974:	ldr	fp, [sp, #48]	; 0x30
   3a978:	cmp	fp, #0
   3a97c:	beq	3a5f8 <__assert_fail@plt+0x27e20>
   3a980:	ldr	r0, [sp, #60]	; 0x3c
   3a984:	mov	fp, #0
   3a988:	ldr	r1, [sp, #48]	; 0x30
   3a98c:	bl	12178 <strcmp@plt>
   3a990:	subs	r2, r0, fp
   3a994:	rsbs	r0, r2, #0
   3a998:	adcs	r0, r0, r2
   3a99c:	str	r0, [sp, #92]	; 0x5c
   3a9a0:	b	3a5fc <__assert_fail@plt+0x27e24>
   3a9a4:	str	fp, [sp, #184]	; 0xb8
   3a9a8:	ldrb	r3, [fp]
   3a9ac:	cmp	r3, #95	; 0x5f
   3a9b0:	bne	3a9c0 <__assert_fail@plt+0x281e8>
   3a9b4:	ldrb	r3, [fp, #1]
   3a9b8:	cmp	r3, #90	; 0x5a
   3a9bc:	beq	3b874 <__assert_fail@plt+0x2909c>
   3a9c0:	ldr	ip, [sp, #104]	; 0x68
   3a9c4:	mov	r0, #80	; 0x50
   3a9c8:	mov	r3, #0
   3a9cc:	mov	r2, #10
   3a9d0:	str	r3, [sp, #212]	; 0xd4
   3a9d4:	str	r3, [sp, #216]	; 0xd8
   3a9d8:	str	r3, [sp, #28]
   3a9dc:	str	r5, [sp, #204]	; 0xcc
   3a9e0:	str	ip, [sp, #208]	; 0xd0
   3a9e4:	str	r2, [sp, #228]	; 0xe4
   3a9e8:	bl	12358 <xmalloc@plt>
   3a9ec:	ldr	r3, [sp, #28]
   3a9f0:	cmp	r9, #0
   3a9f4:	str	r3, [sp, #224]	; 0xe0
   3a9f8:	str	r0, [sp, #220]	; 0xdc
   3a9fc:	beq	3ae40 <__assert_fail@plt+0x28668>
   3aa00:	ldr	r0, [sp, #184]	; 0xb8
   3aa04:	add	r9, r0, r9
   3aa08:	cmp	r9, r0
   3aa0c:	ldrb	r3, [r9, #2]
   3aa10:	beq	3b440 <__assert_fail@plt+0x28c68>
   3aa14:	cmp	r3, #0
   3aa18:	bne	3b140 <__assert_fail@plt+0x28968>
   3aa1c:	mov	r7, sl
   3aa20:	ldr	r9, [sp, #52]	; 0x34
   3aa24:	bl	35d1c <__assert_fail@plt+0x23544>
   3aa28:	ldr	r0, [sp, #220]	; 0xdc
   3aa2c:	cmp	r0, #0
   3aa30:	beq	3a7f4 <__assert_fail@plt+0x2801c>
   3aa34:	bl	121f0 <free@plt>
   3aa38:	b	3a7f4 <__assert_fail@plt+0x2801c>
   3aa3c:	mov	r4, #0
   3aa40:	str	r4, [sp, #72]	; 0x48
   3aa44:	mov	r7, r4
   3aa48:	b	3a3e8 <__assert_fail@plt+0x27c10>
   3aa4c:	str	r9, [sp]
   3aa50:	mov	r2, r9
   3aa54:	mov	r0, r5
   3aa58:	ldr	r1, [sp, #104]	; 0x68
   3aa5c:	mov	r3, r8
   3aa60:	bl	38cbc <__assert_fail@plt+0x264e4>
   3aa64:	subs	r9, r0, #0
   3aa68:	beq	3a7ec <__assert_fail@plt+0x28014>
   3aa6c:	ldr	r0, [r8]
   3aa70:	ldrb	r3, [r0]
   3aa74:	cmp	r3, #58	; 0x3a
   3aa78:	beq	3a2b4 <__assert_fail@plt+0x27adc>
   3aa7c:	ldr	r0, [sp, #96]	; 0x60
   3aa80:	mov	r7, sl
   3aa84:	ldr	r9, [sp, #52]	; 0x34
   3aa88:	bl	35d5c <__assert_fail@plt+0x23584>
   3aa8c:	b	3a7f4 <__assert_fail@plt+0x2801c>
   3aa90:	ldrb	r3, [sl, #1]
   3aa94:	cmp	r3, #95	; 0x5f
   3aa98:	bne	3a5d8 <__assert_fail@plt+0x27e00>
   3aa9c:	ldrb	r3, [sl, #2]
   3aaa0:	ldr	ip, [sp, #168]	; 0xa8
   3aaa4:	lsl	r2, r3, #1
   3aaa8:	ldrh	r2, [ip, r2]
   3aaac:	tst	r2, #4
   3aab0:	bne	3aac4 <__assert_fail@plt+0x282ec>
   3aab4:	cmp	r3, #81	; 0x51
   3aab8:	beq	3aac4 <__assert_fail@plt+0x282ec>
   3aabc:	cmp	r3, #116	; 0x74
   3aac0:	bne	3a5d8 <__assert_fail@plt+0x27e00>
   3aac4:	mov	r9, #95	; 0x5f
   3aac8:	mov	fp, #1
   3aacc:	str	fp, [sp, #92]	; 0x5c
   3aad0:	movw	r1, #40960	; 0xa000
   3aad4:	mov	r0, sl
   3aad8:	movt	r1, #5
   3aadc:	mov	r2, #4
   3aae0:	bl	12784 <strncmp@plt>
   3aae4:	rsbs	r0, r0, #1
   3aae8:	movcc	r0, #0
   3aaec:	str	r0, [sp, #152]	; 0x98
   3aaf0:	cmp	r9, #90	; 0x5a
   3aaf4:	moveq	r3, #1
   3aaf8:	bne	3a628 <__assert_fail@plt+0x27e50>
   3aafc:	b	3a62c <__assert_fail@plt+0x27e54>
   3ab00:	ldr	r7, [sp, #40]	; 0x28
   3ab04:	ldr	sl, [sp, #44]	; 0x2c
   3ab08:	ldr	r1, [sp, #60]	; 0x3c
   3ab0c:	orrs	r7, r7, sl
   3ab10:	movne	r2, #0
   3ab14:	moveq	r2, #1
   3ab18:	tst	r2, r1
   3ab1c:	bne	3adc4 <__assert_fail@plt+0x285ec>
   3ab20:	orrs	ip, r4, r5
   3ab24:	ldrd	sl, [sp, #40]	; 0x28
   3ab28:	movne	r3, #0
   3ab2c:	moveq	r3, #1
   3ab30:	ands	r0, r3, r1
   3ab34:	beq	3b8d0 <__assert_fail@plt+0x290f8>
   3ab38:	cmp	sl, #1
   3ab3c:	sbcs	fp, fp, #0
   3ab40:	movlt	r3, r0
   3ab44:	bge	3b018 <__assert_fail@plt+0x28840>
   3ab48:	and	r0, r4, r5
   3ab4c:	cmn	r0, #1
   3ab50:	movne	r0, #0
   3ab54:	moveq	r0, #1
   3ab58:	tst	r2, r0
   3ab5c:	beq	3b080 <__assert_fail@plt+0x288a8>
   3ab60:	ldr	ip, [sp, #48]	; 0x30
   3ab64:	cmp	ip, #0
   3ab68:	beq	3ab9c <__assert_fail@plt+0x283c4>
   3ab6c:	movw	r1, #40256	; 0x9d40
   3ab70:	mov	r0, ip
   3ab74:	movt	r1, #5
   3ab78:	bl	12178 <strcmp@plt>
   3ab7c:	cmp	r0, #0
   3ab80:	beq	3b128 <__assert_fail@plt+0x28950>
   3ab84:	ldr	r0, [sp, #48]	; 0x30
   3ab88:	movw	r1, #40232	; 0x9d28
   3ab8c:	movt	r1, #5
   3ab90:	bl	12178 <strcmp@plt>
   3ab94:	cmp	r0, #0
   3ab98:	beq	3a114 <__assert_fail@plt+0x2793c>
   3ab9c:	ldr	r0, [sp, #32]
   3aba0:	mov	r1, #4
   3aba4:	mov	r2, #1
   3aba8:	bl	34c24 <__assert_fail@plt+0x2244c>
   3abac:	mov	r4, r0
   3abb0:	b	39120 <__assert_fail@plt+0x26948>
   3abb4:	add	r7, r0, #1
   3abb8:	add	r3, r3, #1
   3abbc:	str	r3, [fp]
   3abc0:	lsl	r0, r7, #2
   3abc4:	str	r7, [sp, #60]	; 0x3c
   3abc8:	bl	12358 <xmalloc@plt>
   3abcc:	cmp	r5, #0
   3abd0:	str	r0, [sp, #112]	; 0x70
   3abd4:	beq	3b068 <__assert_fail@plt+0x28890>
   3abd8:	sub	ip, r0, #4
   3abdc:	str	r9, [sp, #52]	; 0x34
   3abe0:	ldr	r3, [fp]
   3abe4:	mov	r9, r8
   3abe8:	str	ip, [sp, #56]	; 0x38
   3abec:	mov	r5, #1
   3abf0:	str	sl, [sp, #64]	; 0x40
   3abf4:	mov	r8, r4
   3abf8:	b	3ac7c <__assert_fail@plt+0x284a4>
   3abfc:	add	r3, r3, #1
   3ac00:	mov	r0, #0
   3ac04:	mov	r1, r9
   3ac08:	str	r0, [sp]
   3ac0c:	mov	r2, #0
   3ac10:	str	r3, [fp]
   3ac14:	ldr	r0, [sp, #32]
   3ac18:	mov	r3, fp
   3ac1c:	bl	38cbc <__assert_fail@plt+0x264e4>
   3ac20:	subs	r1, r0, #0
   3ac24:	beq	3ad50 <__assert_fail@plt+0x28578>
   3ac28:	mov	r2, r6
   3ac2c:	stm	sp, {r4, sl}
   3ac30:	mov	r3, r7
   3ac34:	ldr	r0, [sp, #32]
   3ac38:	bl	35108 <__assert_fail@plt+0x22930>
   3ac3c:	ldr	r6, [sp, #56]	; 0x38
   3ac40:	cmp	r0, #0
   3ac44:	str	r0, [r6, #4]!
   3ac48:	str	r6, [sp, #56]	; 0x38
   3ac4c:	beq	3ad50 <__assert_fail@plt+0x28578>
   3ac50:	ldr	r3, [fp]
   3ac54:	ldrb	r2, [r3]
   3ac58:	cmp	r2, #59	; 0x3b
   3ac5c:	bne	3ad50 <__assert_fail@plt+0x28578>
   3ac60:	ldr	r7, [sp, #60]	; 0x3c
   3ac64:	add	r2, r5, #1
   3ac68:	add	r3, r3, #1
   3ac6c:	str	r3, [fp]
   3ac70:	cmp	r7, r2
   3ac74:	beq	3b05c <__assert_fail@plt+0x28884>
   3ac78:	mov	r5, r2
   3ac7c:	ldrb	r2, [r3]
   3ac80:	cmp	r2, #48	; 0x30
   3ac84:	moveq	r4, #0
   3ac88:	beq	3acc0 <__assert_fail@plt+0x284e8>
   3ac8c:	cmp	r2, #49	; 0x31
   3ac90:	moveq	r4, #1
   3ac94:	beq	3acc0 <__assert_fail@plt+0x284e8>
   3ac98:	mov	r2, #5
   3ac9c:	movw	r1, #40580	; 0x9e84
   3aca0:	mov	r0, #0
   3aca4:	movt	r1, #5
   3aca8:	bl	12298 <dcgettext@plt>
   3acac:	mov	r4, #0
   3acb0:	mov	r1, r0
   3acb4:	mov	r0, r8
   3acb8:	bl	35ccc <__assert_fail@plt+0x234f4>
   3acbc:	ldr	r3, [fp]
   3acc0:	add	r2, r3, #1
   3acc4:	str	r2, [fp]
   3acc8:	ldrb	r3, [r3, #1]
   3accc:	cmp	r3, #49	; 0x31
   3acd0:	moveq	sl, #1
   3acd4:	beq	3ad18 <__assert_fail@plt+0x28540>
   3acd8:	cmp	r3, #50	; 0x32
   3acdc:	moveq	sl, #0
   3ace0:	beq	3ad18 <__assert_fail@plt+0x28540>
   3ace4:	cmp	r3, #48	; 0x30
   3ace8:	moveq	sl, #2
   3acec:	beq	3ad18 <__assert_fail@plt+0x28540>
   3acf0:	mov	r2, #5
   3acf4:	movw	r1, #40620	; 0x9eac
   3acf8:	mov	r0, #0
   3acfc:	movt	r1, #5
   3ad00:	bl	12298 <dcgettext@plt>
   3ad04:	mov	sl, #0
   3ad08:	mov	r1, r0
   3ad0c:	mov	r0, r8
   3ad10:	bl	35ccc <__assert_fail@plt+0x234f4>
   3ad14:	ldr	r2, [fp]
   3ad18:	add	r2, r2, #1
   3ad1c:	mov	r0, fp
   3ad20:	str	r2, [fp]
   3ad24:	mov	r1, #0
   3ad28:	bl	35e30 <__assert_fail@plt+0x23658>
   3ad2c:	ldr	r3, [fp]
   3ad30:	ldrb	r2, [r3]
   3ad34:	cmp	r2, #44	; 0x2c
   3ad38:	mov	r6, r0
   3ad3c:	mov	r7, r1
   3ad40:	beq	3abfc <__assert_fail@plt+0x28424>
   3ad44:	mov	r4, r8
   3ad48:	ldr	r9, [sp, #52]	; 0x34
   3ad4c:	b	3a024 <__assert_fail@plt+0x2784c>
   3ad50:	ldr	r9, [sp, #52]	; 0x34
   3ad54:	b	39028 <__assert_fail@plt+0x26850>
   3ad58:	ldrb	r9, [sl, #1]
   3ad5c:	cmp	r9, #36	; 0x24
   3ad60:	cmpne	r9, #46	; 0x2e
   3ad64:	bne	3aad0 <__assert_fail@plt+0x282f8>
   3ad68:	ldrb	r3, [sl, #2]
   3ad6c:	cmp	r3, #95	; 0x5f
   3ad70:	bne	3aad0 <__assert_fail@plt+0x282f8>
   3ad74:	mov	ip, #1
   3ad78:	str	ip, [sp, #152]	; 0x98
   3ad7c:	b	3aaf0 <__assert_fail@plt+0x28318>
   3ad80:	ldr	r0, [sp, #32]
   3ad84:	bl	34c18 <__assert_fail@plt+0x22440>
   3ad88:	mov	r4, r0
   3ad8c:	b	395ac <__assert_fail@plt+0x26dd4>
   3ad90:	mov	r1, #0
   3ad94:	mov	r2, r1
   3ad98:	b	39d6c <__assert_fail@plt+0x27594>
   3ad9c:	sub	r4, r4, #-1073741823	; 0xc0000001
   3ada0:	ldr	r0, [sp, #32]
   3ada4:	ldr	r1, [r6, r4, lsl #2]
   3ada8:	lsl	r4, r4, #2
   3adac:	bl	35818 <__assert_fail@plt+0x23040>
   3adb0:	cmp	r0, #2
   3adb4:	addne	r4, r4, #4
   3adb8:	movne	ip, #1
   3adbc:	moveq	ip, #0
   3adc0:	b	3a048 <__assert_fail@plt+0x27870>
   3adc4:	orrs	fp, r4, r5
   3adc8:	beq	3a070 <__assert_fail@plt+0x27898>
   3adcc:	and	r3, r4, r5
   3add0:	cmn	r3, #1
   3add4:	movne	r3, #0
   3add8:	moveq	r3, #1
   3addc:	tst	r2, r3
   3ade0:	bne	3ab60 <__assert_fail@plt+0x28388>
   3ade4:	cmp	r5, #0
   3ade8:	cmpeq	r4, #127	; 0x7f
   3adec:	beq	3b9a0 <__assert_fail@plt+0x291c8>
   3adf0:	cmp	r4, #0
   3adf4:	sbcs	r0, r5, #0
   3adf8:	blt	3b984 <__assert_fail@plt+0x291ac>
   3adfc:	cmp	r5, #0
   3ae00:	cmpeq	r4, #255	; 0xff
   3ae04:	beq	3b96c <__assert_fail@plt+0x29194>
   3ae08:	movw	r2, #65535	; 0xffff
   3ae0c:	mov	r3, #0
   3ae10:	cmp	r5, r3
   3ae14:	cmpeq	r4, r2
   3ae18:	beq	3b954 <__assert_fail@plt+0x2917c>
   3ae1c:	mvn	r2, #0
   3ae20:	mov	r3, #0
   3ae24:	cmp	r5, r3
   3ae28:	cmpeq	r4, r2
   3ae2c:	bne	39738 <__assert_fail@plt+0x26f60>
   3ae30:	b	3ab9c <__assert_fail@plt+0x283c4>
   3ae34:	mov	r7, r4
   3ae38:	str	r4, [sp, #72]	; 0x48
   3ae3c:	b	3a3e8 <__assert_fail@plt+0x27c10>
   3ae40:	ldr	r3, [sp, #184]	; 0xb8
   3ae44:	mov	r9, r8
   3ae48:	mov	r8, r5
   3ae4c:	mov	r0, r3
   3ae50:	mov	r5, r3
   3ae54:	b	3ae68 <__assert_fail@plt+0x28690>
   3ae58:	ldrb	r2, [r3, #1]
   3ae5c:	add	r0, r3, #1
   3ae60:	cmp	r2, #95	; 0x5f
   3ae64:	beq	3b4c0 <__assert_fail@plt+0x28ce8>
   3ae68:	mov	r1, #95	; 0x5f
   3ae6c:	bl	124fc <strchr@plt>
   3ae70:	subs	r3, r0, #0
   3ae74:	bne	3ae58 <__assert_fail@plt+0x28680>
   3ae78:	ldr	r9, [sp, #52]	; 0x34
   3ae7c:	mov	r7, sl
   3ae80:	mov	r3, r5
   3ae84:	mov	r0, r3
   3ae88:	bl	35d1c <__assert_fail@plt+0x23544>
   3ae8c:	b	3aa28 <__assert_fail@plt+0x28250>
   3ae90:	ldr	r1, [sp, #60]	; 0x3c
   3ae94:	bl	12388 <strcpy@plt>
   3ae98:	b	3a764 <__assert_fail@plt+0x27f8c>
   3ae9c:	add	ip, sp, #232	; 0xe8
   3aea0:	str	fp, [sp]
   3aea4:	str	r3, [sp, #4]
   3aea8:	mov	r1, #1
   3aeac:	movw	r3, #40840	; 0x9f88
   3aeb0:	mov	r0, ip
   3aeb4:	movt	r3, #5
   3aeb8:	mov	r2, #20
   3aebc:	str	ip, [sp, #88]	; 0x58
   3aec0:	bl	12568 <__sprintf_chk@plt>
   3aec4:	ldr	fp, [sp, #48]	; 0x30
   3aec8:	mov	r9, #1
   3aecc:	str	fp, [sp, #128]	; 0x80
   3aed0:	b	3a6e4 <__assert_fail@plt+0x27f0c>
   3aed4:	ldr	r7, [sp, #64]	; 0x40
   3aed8:	ldr	fp, [sp, #132]	; 0x84
   3aedc:	str	r3, [r7, ip, lsl #2]
   3aee0:	add	r4, fp, #1
   3aee4:	ldr	r3, [r8]
   3aee8:	ldr	ip, [sp, #148]	; 0x94
   3aeec:	ldrb	r2, [r3]
   3aef0:	cmp	r2, #0
   3aef4:	addne	r3, r3, #1
   3aef8:	strne	r3, [r8]
   3aefc:	cmp	r4, ip
   3af00:	bcs	3b708 <__assert_fail@plt+0x28f30>
   3af04:	ldr	r0, [sp, #32]
   3af08:	ldr	r1, [sp, #60]	; 0x3c
   3af0c:	ldr	r2, [sp, #64]	; 0x40
   3af10:	ldr	r6, [sp, #132]	; 0x84
   3af14:	bl	351e4 <__assert_fail@plt+0x22a0c>
   3af18:	ldr	r7, [sp, #100]	; 0x64
   3af1c:	add	r5, r6, #1073741824	; 0x40000000
   3af20:	str	r0, [r7, r5, lsl #2]
   3af24:	ldr	r5, [r8]
   3af28:	ldrb	r6, [r5]
   3af2c:	cmp	r6, #59	; 0x3b
   3af30:	beq	3b540 <__assert_fail@plt+0x28d68>
   3af34:	str	r4, [sp, #132]	; 0x84
   3af38:	b	3a230 <__assert_fail@plt+0x27a58>
   3af3c:	str	r0, [sp, #72]	; 0x48
   3af40:	mov	r4, r7
   3af44:	b	3a3e8 <__assert_fail@plt+0x27c10>
   3af48:	ldr	r9, [sp, #48]	; 0x30
   3af4c:	b	3a654 <__assert_fail@plt+0x27e7c>
   3af50:	add	ip, sp, #232	; 0xe8
   3af54:	str	fp, [sp]
   3af58:	str	r3, [sp, #4]
   3af5c:	mov	r1, #1
   3af60:	str	r9, [sp, #8]
   3af64:	movw	r3, #40848	; 0x9f90
   3af68:	mov	r0, ip
   3af6c:	movt	r3, #5
   3af70:	mov	r2, #20
   3af74:	str	ip, [sp, #88]	; 0x58
   3af78:	add	r9, r9, r1
   3af7c:	bl	12568 <__sprintf_chk@plt>
   3af80:	ldr	fp, [sp, #48]	; 0x30
   3af84:	str	fp, [sp, #128]	; 0x80
   3af88:	b	3a6e4 <__assert_fail@plt+0x27f0c>
   3af8c:	ldrb	r3, [ip, #2]
   3af90:	cmp	r3, #36	; 0x24
   3af94:	cmpne	r3, #46	; 0x2e
   3af98:	bne	3a744 <__assert_fail@plt+0x27f6c>
   3af9c:	add	r0, ip, #3
   3afa0:	mov	r1, #0
   3afa4:	bl	12544 <cplus_mangle_opname@plt>
   3afa8:	subs	r3, r0, #0
   3afac:	beq	3b9d4 <__assert_fail@plt+0x291fc>
   3afb0:	str	r3, [sp, #28]
   3afb4:	bl	124e4 <strlen@plt>
   3afb8:	add	r0, r0, r9
   3afbc:	bl	12358 <xmalloc@plt>
   3afc0:	ldr	r1, [sp, #60]	; 0x3c
   3afc4:	mov	r2, #3
   3afc8:	mov	fp, r0
   3afcc:	bl	12598 <strncpy@plt>
   3afd0:	ldr	r3, [sp, #28]
   3afd4:	add	r0, fp, #3
   3afd8:	mov	r1, r3
   3afdc:	bl	12388 <strcpy@plt>
   3afe0:	b	3a764 <__assert_fail@plt+0x27f8c>
   3afe4:	mov	r2, #5
   3afe8:	movw	r1, #40560	; 0x9e70
   3afec:	movt	r1, #5
   3aff0:	bl	12298 <dcgettext@plt>
   3aff4:	mov	r1, r0
   3aff8:	mov	r0, r6
   3affc:	bl	35ccc <__assert_fail@plt+0x234f4>
   3b000:	mov	r1, #4
   3b004:	ldr	r0, [sp, #32]
   3b008:	ldr	r2, [sp, #60]	; 0x3c
   3b00c:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b010:	mov	r1, r0
   3b014:	b	3975c <__assert_fail@plt+0x26f84>
   3b018:	ldr	r1, [sp, #52]	; 0x34
   3b01c:	ldr	r0, [sp, #32]
   3b020:	bl	34c50 <__assert_fail@plt+0x22478>
   3b024:	mov	r4, r0
   3b028:	b	39120 <__assert_fail@plt+0x26948>
   3b02c:	mov	r2, sl
   3b030:	ldr	r0, [sp, #32]
   3b034:	mov	r1, #8
   3b038:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b03c:	mov	r4, r0
   3b040:	b	39120 <__assert_fail@plt+0x26948>
   3b044:	bl	122b0 <__stack_chk_fail@plt>
   3b048:	ldr	r0, [sp, #64]	; 0x40
   3b04c:	bl	35d5c <__assert_fail@plt+0x23584>
   3b050:	ldr	r0, [sp, #56]	; 0x38
   3b054:	bl	121f0 <free@plt>
   3b058:	b	39028 <__assert_fail@plt+0x26850>
   3b05c:	mov	r8, r9
   3b060:	ldr	sl, [sp, #64]	; 0x40
   3b064:	ldr	r9, [sp, #52]	; 0x34
   3b068:	ldr	ip, [sp, #112]	; 0x70
   3b06c:	mov	r3, #0
   3b070:	str	r3, [ip, r5, lsl #2]
   3b074:	ldr	r6, [fp]
   3b078:	str	r6, [sp, #64]	; 0x40
   3b07c:	b	397a0 <__assert_fail@plt+0x26fc8>
   3b080:	cmp	r2, #0
   3b084:	bne	3adf0 <__assert_fail@plt+0x28618>
   3b088:	ldr	r7, [sp, #44]	; 0x2c
   3b08c:	ands	r3, r3, r7, lsr #31
   3b090:	beq	3b0b4 <__assert_fail@plt+0x288dc>
   3b094:	ldrd	sl, [sp, #40]	; 0x28
   3b098:	mvn	r2, #7
   3b09c:	mvn	r3, #0
   3b0a0:	cmp	fp, r3
   3b0a4:	cmpeq	sl, r2
   3b0a8:	orreq	r1, r1, #1
   3b0ac:	cmp	r1, #0
   3b0b0:	bne	3b6ec <__assert_fail@plt+0x28f14>
   3b0b4:	ldrd	sl, [sp, #40]	; 0x28
   3b0b8:	mvn	r2, r4
   3b0bc:	mvn	r3, r5
   3b0c0:	cmp	fp, r3
   3b0c4:	cmpeq	sl, r2
   3b0c8:	beq	3b0e0 <__assert_fail@plt+0x28908>
   3b0cc:	adds	r2, r4, #1
   3b0d0:	adc	r3, r5, #0
   3b0d4:	cmp	fp, r3
   3b0d8:	cmpeq	sl, r2
   3b0dc:	bne	39738 <__assert_fail@plt+0x26f60>
   3b0e0:	cmp	r5, #0
   3b0e4:	cmpeq	r4, #127	; 0x7f
   3b0e8:	beq	3b9a0 <__assert_fail@plt+0x291c8>
   3b0ec:	movw	r2, #32767	; 0x7fff
   3b0f0:	mov	r3, #0
   3b0f4:	cmp	r5, r3
   3b0f8:	cmpeq	r4, r2
   3b0fc:	beq	3b7c8 <__assert_fail@plt+0x28ff0>
   3b100:	mvn	r2, #-2147483648	; 0x80000000
   3b104:	mov	r3, #0
   3b108:	cmp	r5, r3
   3b10c:	cmpeq	r4, r2
   3b110:	beq	3b7b0 <__assert_fail@plt+0x28fd8>
   3b114:	mvn	r2, #0
   3b118:	mvn	r3, #-2147483648	; 0x80000000
   3b11c:	cmp	r5, r3
   3b120:	cmpeq	r4, r2
   3b124:	bne	39738 <__assert_fail@plt+0x26f60>
   3b128:	ldr	r0, [sp, #32]
   3b12c:	mov	r1, #8
   3b130:	mov	r2, #0
   3b134:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b138:	mov	r4, r0
   3b13c:	b	39120 <__assert_fail@plt+0x26948>
   3b140:	mov	r2, r9
   3b144:	add	r0, sp, #204	; 0xcc
   3b148:	add	r1, sp, #184	; 0xb8
   3b14c:	bl	38bc0 <__assert_fail@plt+0x263e8>
   3b150:	cmp	r0, #0
   3b154:	beq	3b3c4 <__assert_fail@plt+0x28bec>
   3b158:	ldr	ip, [sp, #184]	; 0xb8
   3b15c:	ldrb	r2, [ip]
   3b160:	str	ip, [sp, #92]	; 0x5c
   3b164:	cmp	r2, #0
   3b168:	beq	3b2e0 <__assert_fail@plt+0x28b08>
   3b16c:	ldr	r9, [sp, #92]	; 0x5c
   3b170:	mov	ip, #0
   3b174:	str	r4, [sp, #128]	; 0x80
   3b178:	mov	r3, ip
   3b17c:	mov	r4, ip
   3b180:	str	ip, [sp, #88]	; 0x58
   3b184:	sub	r2, r2, #48	; 0x30
   3b188:	cmp	r2, #68	; 0x44
   3b18c:	ldrls	pc, [pc, r2, lsl #2]
   3b190:	b	3b41c <__assert_fail@plt+0x28c44>
   3b194:	andeq	fp, r3, ip, lsr #6
   3b198:	andeq	fp, r3, ip, lsr #6
   3b19c:	andeq	fp, r3, ip, lsr #6
   3b1a0:	andeq	fp, r3, ip, lsr #6
   3b1a4:	andeq	fp, r3, ip, lsr #6
   3b1a8:	andeq	fp, r3, ip, lsr #6
   3b1ac:	andeq	fp, r3, ip, lsr #6
   3b1b0:	andeq	fp, r3, ip, lsr #6
   3b1b4:	andeq	fp, r3, ip, lsr #6
   3b1b8:	andeq	fp, r3, ip, lsr #6
   3b1bc:	andeq	fp, r3, ip, lsl r4
   3b1c0:	andeq	fp, r3, ip, lsl r4
   3b1c4:	andeq	fp, r3, ip, lsl r4
   3b1c8:	andeq	fp, r3, ip, lsl r4
   3b1cc:	andeq	fp, r3, ip, lsl r4
   3b1d0:	andeq	fp, r3, ip, lsl r4
   3b1d4:	andeq	fp, r3, ip, lsl r4
   3b1d8:	andeq	fp, r3, ip, lsl r4
   3b1dc:	andeq	fp, r3, ip, lsl r4
   3b1e0:	andeq	fp, r3, r8, lsr #5
   3b1e4:	andeq	fp, r3, ip, lsl r4
   3b1e8:	andeq	fp, r3, ip, lsl r4
   3b1ec:	andeq	fp, r3, ip, ror #7
   3b1f0:	andeq	fp, r3, ip, lsl r4
   3b1f4:	andeq	fp, r3, ip, lsl r4
   3b1f8:	andeq	fp, r3, ip, lsl r4
   3b1fc:	andeq	fp, r3, ip, lsl r4
   3b200:	andeq	fp, r3, ip, lsl r4
   3b204:	andeq	fp, r3, ip, lsl r4
   3b208:	andeq	fp, r3, ip, lsl r4
   3b20c:	andeq	fp, r3, ip, lsl r4
   3b210:	andeq	fp, r3, ip, lsl r4
   3b214:	andeq	fp, r3, ip, lsl r4
   3b218:	ldrdeq	fp, [r3], -r0
   3b21c:	andeq	fp, r3, ip, lsl r4
   3b220:	andeq	fp, r3, r8, lsr #5
   3b224:	andeq	fp, r3, ip, lsl r4
   3b228:	andeq	fp, r3, ip, lsl r4
   3b22c:	andeq	fp, r3, ip, lsl r4
   3b230:	andeq	fp, r3, ip, lsl r4
   3b234:	andeq	fp, r3, ip, lsl r4
   3b238:	andeq	fp, r3, ip, lsl r4
   3b23c:	andeq	fp, r3, ip, lsl r4
   3b240:	andeq	fp, r3, ip, lsl r4
   3b244:	andeq	fp, r3, ip, lsl r4
   3b248:	andeq	fp, r3, ip, lsl r4
   3b24c:	andeq	fp, r3, ip, lsl r4
   3b250:	muleq	r3, r0, r3
   3b254:	andeq	fp, r3, ip, lsl r4
   3b258:	andeq	fp, r3, ip, lsl r4
   3b25c:	andeq	fp, r3, ip, lsl r4
   3b260:	andeq	fp, r3, ip, lsl r4
   3b264:	andeq	fp, r3, ip, lsl r4
   3b268:	andeq	fp, r3, ip, lsl r4
   3b26c:	andeq	fp, r3, ip, lsl r4
   3b270:	andeq	fp, r3, ip, lsl r4
   3b274:	andeq	fp, r3, ip, lsl r4
   3b278:	andeq	fp, r3, ip, lsl r4
   3b27c:	andeq	fp, r3, ip, lsl r4
   3b280:	andeq	fp, r3, ip, lsl r4
   3b284:	andeq	fp, r3, ip, lsl r4
   3b288:	andeq	fp, r3, ip, lsl r4
   3b28c:	andeq	fp, r3, ip, lsl r4
   3b290:	andeq	fp, r3, ip, lsl r4
   3b294:	andeq	fp, r3, ip, lsl r4
   3b298:	andeq	fp, r3, ip, lsl r4
   3b29c:	andeq	fp, r3, ip, lsl r4
   3b2a0:	andeq	fp, r3, ip, lsl r4
   3b2a4:	andeq	fp, r3, r4, lsr #7
   3b2a8:	cmp	r4, #0
   3b2ac:	moveq	r4, r9
   3b2b0:	add	r9, r9, #1
   3b2b4:	str	r9, [sp, #184]	; 0xb8
   3b2b8:	ldr	ip, [sp, #88]	; 0x58
   3b2bc:	cmp	ip, #0
   3b2c0:	bne	3b368 <__assert_fail@plt+0x28b90>
   3b2c4:	ldr	r9, [sp, #184]	; 0xb8
   3b2c8:	ldrb	r2, [r9]
   3b2cc:	cmp	r2, #0
   3b2d0:	bne	3b184 <__assert_fail@plt+0x289ac>
   3b2d4:	cmp	r3, #0
   3b2d8:	ldr	r4, [sp, #128]	; 0x80
   3b2dc:	beq	3b75c <__assert_fail@plt+0x28f84>
   3b2e0:	ldr	r0, [sp, #220]	; 0xdc
   3b2e4:	bl	121f0 <free@plt>
   3b2e8:	ldr	r3, [sp, #212]	; 0xd4
   3b2ec:	mov	r2, #0
   3b2f0:	str	r2, [sp, #220]	; 0xdc
   3b2f4:	cmp	r3, r2
   3b2f8:	beq	3b77c <__assert_fail@plt+0x28fa4>
   3b2fc:	ldr	r2, [sp, #216]	; 0xd8
   3b300:	str	r2, [sp, #180]	; 0xb4
   3b304:	cmp	r3, #0
   3b308:	beq	3a7ec <__assert_fail@plt+0x28014>
   3b30c:	ldr	ip, [sp, #180]	; 0xb4
   3b310:	mov	r0, r5
   3b314:	ldr	r1, [sp, #164]	; 0xa4
   3b318:	ldr	r2, [sp, #160]	; 0xa0
   3b31c:	str	ip, [sp]
   3b320:	bl	35044 <__assert_fail@plt+0x2286c>
   3b324:	mov	r9, r0
   3b328:	b	3a7e4 <__assert_fail@plt+0x2800c>
   3b32c:	add	r0, sp, #184	; 0xb8
   3b330:	mov	r1, #0
   3b334:	bl	371ac <__assert_fail@plt+0x249d4>
   3b338:	cmp	r4, #0
   3b33c:	movne	r9, r4
   3b340:	cmp	r0, #0
   3b344:	beq	3b3c4 <__assert_fail@plt+0x28bec>
   3b348:	ldr	r2, [sp, #184]	; 0xb8
   3b34c:	mov	r1, r9
   3b350:	add	r0, sp, #204	; 0xcc
   3b354:	rsb	r2, r9, r2
   3b358:	bl	35d9c <__assert_fail@plt+0x235c4>
   3b35c:	cmp	r0, #0
   3b360:	beq	3b3c4 <__assert_fail@plt+0x28bec>
   3b364:	mov	r4, #0
   3b368:	add	r0, sp, #204	; 0xcc
   3b36c:	add	r1, sp, #184	; 0xb8
   3b370:	add	r2, sp, #212	; 0xd4
   3b374:	add	r3, sp, #216	; 0xd8
   3b378:	bl	389c4 <__assert_fail@plt+0x261ec>
   3b37c:	cmp	r0, #0
   3b380:	beq	3b3c4 <__assert_fail@plt+0x28bec>
   3b384:	mov	r3, #1
   3b388:	str	r3, [sp, #88]	; 0x58
   3b38c:	b	3b2c4 <__assert_fail@plt+0x28aec>
   3b390:	ldr	r0, [sp, #92]	; 0x5c
   3b394:	mov	r7, sl
   3b398:	ldr	r9, [sp, #52]	; 0x34
   3b39c:	bl	35d1c <__assert_fail@plt+0x23544>
   3b3a0:	b	3aa28 <__assert_fail@plt+0x28250>
   3b3a4:	mov	r2, #0
   3b3a8:	cmp	r4, r2
   3b3ac:	add	r0, sp, #204	; 0xcc
   3b3b0:	add	r1, sp, #184	; 0xb8
   3b3b4:	movne	r9, r4
   3b3b8:	bl	37ef8 <__assert_fail@plt+0x25720>
   3b3bc:	cmp	r0, #0
   3b3c0:	bne	3b348 <__assert_fail@plt+0x28b70>
   3b3c4:	mov	r7, sl
   3b3c8:	ldr	r9, [sp, #52]	; 0x34
   3b3cc:	b	3aa28 <__assert_fail@plt+0x28250>
   3b3d0:	add	r0, sp, #204	; 0xcc
   3b3d4:	add	r1, sp, #184	; 0xb8
   3b3d8:	mov	r2, #0
   3b3dc:	bl	38550 <__assert_fail@plt+0x25d78>
   3b3e0:	cmp	r0, #0
   3b3e4:	bne	3b348 <__assert_fail@plt+0x28b70>
   3b3e8:	b	3b3c4 <__assert_fail@plt+0x28bec>
   3b3ec:	add	r0, sp, #204	; 0xcc
   3b3f0:	add	r1, sp, #184	; 0xb8
   3b3f4:	add	r2, sp, #212	; 0xd4
   3b3f8:	add	r3, sp, #216	; 0xd8
   3b3fc:	add	r9, r9, #1
   3b400:	str	r9, [sp, #184]	; 0xb8
   3b404:	bl	389c4 <__assert_fail@plt+0x261ec>
   3b408:	cmp	r0, #0
   3b40c:	beq	3b3c4 <__assert_fail@plt+0x28bec>
   3b410:	mov	r4, #0
   3b414:	mov	r3, #1
   3b418:	b	3b2b8 <__assert_fail@plt+0x28ae0>
   3b41c:	add	r0, sp, #204	; 0xcc
   3b420:	add	r1, sp, #184	; 0xb8
   3b424:	add	r2, sp, #212	; 0xd4
   3b428:	add	r3, sp, #216	; 0xd8
   3b42c:	bl	389c4 <__assert_fail@plt+0x261ec>
   3b430:	cmp	r0, #0
   3b434:	beq	3b3c4 <__assert_fail@plt+0x28bec>
   3b438:	mov	r3, #1
   3b43c:	b	3b2b8 <__assert_fail@plt+0x28ae0>
   3b440:	ldr	ip, [sp, #168]	; 0xa8
   3b444:	lsl	r2, r3, #1
   3b448:	ldrh	r2, [ip, r2]
   3b44c:	tst	r2, #4
   3b450:	bne	3b534 <__assert_fail@plt+0x28d5c>
   3b454:	cmp	r3, #81	; 0x51
   3b458:	beq	3b534 <__assert_fail@plt+0x28d5c>
   3b45c:	cmp	r3, #116	; 0x74
   3b460:	beq	3b534 <__assert_fail@plt+0x28d5c>
   3b464:	ldrb	r3, [r9]
   3b468:	cmp	r3, #95	; 0x5f
   3b46c:	bne	3b52c <__assert_fail@plt+0x28d54>
   3b470:	add	r3, r9, #1
   3b474:	mov	r0, r3
   3b478:	add	r3, r3, #1
   3b47c:	ldrb	r2, [r0]
   3b480:	cmp	r2, #95	; 0x5f
   3b484:	beq	3b474 <__assert_fail@plt+0x28c9c>
   3b488:	movw	r1, #40360	; 0x9da8
   3b48c:	movt	r1, #5
   3b490:	bl	1213c <strstr@plt>
   3b494:	subs	r2, r0, #0
   3b498:	beq	3b4a8 <__assert_fail@plt+0x28cd0>
   3b49c:	ldrb	r3, [r2, #2]
   3b4a0:	cmp	r3, #0
   3b4a4:	bne	3b144 <__assert_fail@plt+0x2896c>
   3b4a8:	mov	r5, r9
   3b4ac:	mov	r7, sl
   3b4b0:	mov	r0, r5
   3b4b4:	ldr	r9, [sp, #52]	; 0x34
   3b4b8:	bl	35d1c <__assert_fail@plt+0x23544>
   3b4bc:	b	3aa28 <__assert_fail@plt+0x28250>
   3b4c0:	cmp	r0, #0
   3b4c4:	mov	r2, r9
   3b4c8:	mov	r9, r3
   3b4cc:	mov	r3, r5
   3b4d0:	mov	r5, r8
   3b4d4:	mov	r8, r2
   3b4d8:	beq	3b520 <__assert_fail@plt+0x28d48>
   3b4dc:	ldrb	r1, [r9]
   3b4e0:	cmp	r1, #95	; 0x5f
   3b4e4:	bne	3b518 <__assert_fail@plt+0x28d40>
   3b4e8:	mov	r2, #0
   3b4ec:	b	3b4f8 <__assert_fail@plt+0x28d20>
   3b4f0:	mov	r2, r1
   3b4f4:	ldrb	r1, [r0, #1]!
   3b4f8:	cmp	r1, #95	; 0x5f
   3b4fc:	add	r1, r2, #1
   3b500:	beq	3b4f0 <__assert_fail@plt+0x28d18>
   3b504:	cmp	r1, #2
   3b508:	subhi	r2, r2, #1
   3b50c:	movhi	r0, r3
   3b510:	addhi	r9, r9, r2
   3b514:	bhi	3aa08 <__assert_fail@plt+0x28230>
   3b518:	mov	r0, r3
   3b51c:	b	3aa08 <__assert_fail@plt+0x28230>
   3b520:	mov	r7, sl
   3b524:	ldr	r9, [sp, #52]	; 0x34
   3b528:	b	3ae84 <__assert_fail@plt+0x286ac>
   3b52c:	mov	r0, r9
   3b530:	b	3b488 <__assert_fail@plt+0x28cb0>
   3b534:	add	r9, r9, #2
   3b538:	str	r9, [sp, #184]	; 0xb8
   3b53c:	b	3b158 <__assert_fail@plt+0x28980>
   3b540:	mov	fp, r8
   3b544:	ldr	r9, [sp, #52]	; 0x34
   3b548:	ldr	r8, [sp, #104]	; 0x68
   3b54c:	str	r4, [sp, #132]	; 0x84
   3b550:	ldr	sl, [sp, #100]	; 0x64
   3b554:	cmp	sl, #0
   3b558:	ldrne	ip, [sp, #132]	; 0x84
   3b55c:	movne	r3, #0
   3b560:	strne	r3, [sl, ip, lsl #2]
   3b564:	ldrne	r5, [fp]
   3b568:	ldrb	r3, [r5]
   3b56c:	mov	r4, r5
   3b570:	cmp	r3, #59	; 0x3b
   3b574:	beq	3b6c4 <__assert_fail@plt+0x28eec>
   3b578:	ldrb	r3, [r5]
   3b57c:	cmp	r3, #126	; 0x7e
   3b580:	beq	3b5e8 <__assert_fail@plt+0x28e10>
   3b584:	mov	ip, #0
   3b588:	mov	lr, ip
   3b58c:	ldr	r6, [sp, #40]	; 0x28
   3b590:	ldr	r7, [sp, #144]	; 0x90
   3b594:	subs	r3, r6, #115	; 0x73
   3b598:	rsbs	r1, r3, #0
   3b59c:	adcs	r1, r1, r3
   3b5a0:	cmp	r7, #0
   3b5a4:	bne	3b5b4 <__assert_fail@plt+0x28ddc>
   3b5a8:	ldr	r6, [sp, #112]	; 0x70
   3b5ac:	cmp	r6, #0
   3b5b0:	beq	3b724 <__assert_fail@plt+0x28f4c>
   3b5b4:	ldr	fp, [sp, #56]	; 0x38
   3b5b8:	ldr	r6, [sp, #112]	; 0x70
   3b5bc:	ldr	r7, [sp, #100]	; 0x64
   3b5c0:	str	fp, [sp]
   3b5c4:	str	r6, [sp, #4]
   3b5c8:	ldrd	r2, [sp, #136]	; 0x88
   3b5cc:	str	r7, [sp, #8]
   3b5d0:	ldr	r0, [sp, #32]
   3b5d4:	str	lr, [sp, #12]
   3b5d8:	str	ip, [sp, #16]
   3b5dc:	bl	34ca4 <__assert_fail@plt+0x224cc>
   3b5e0:	mov	r4, r0
   3b5e4:	b	39120 <__assert_fail@plt+0x26948>
   3b5e8:	add	r3, r5, #1
   3b5ec:	str	r3, [fp]
   3b5f0:	ldrb	r3, [r5, #1]
   3b5f4:	cmp	r3, #43	; 0x2b
   3b5f8:	beq	3b6b0 <__assert_fail@plt+0x28ed8>
   3b5fc:	and	r3, r3, #239	; 0xef
   3b600:	cmp	r3, #45	; 0x2d
   3b604:	beq	3b6b0 <__assert_fail@plt+0x28ed8>
   3b608:	ldr	r5, [fp]
   3b60c:	ldrb	r3, [r5]
   3b610:	cmp	r3, #37	; 0x25
   3b614:	bne	3b584 <__assert_fail@plt+0x28dac>
   3b618:	add	r5, r5, #1
   3b61c:	mov	r0, fp
   3b620:	str	r5, [fp]
   3b624:	add	r1, sp, #196	; 0xc4
   3b628:	bl	37104 <__assert_fail@plt+0x2492c>
   3b62c:	cmp	r0, #0
   3b630:	beq	3a82c <__assert_fail@plt+0x28054>
   3b634:	ldr	r2, [sp, #196]	; 0xc4
   3b638:	ldr	r3, [sp, #188]	; 0xbc
   3b63c:	cmp	r2, r3
   3b640:	bne	3b654 <__assert_fail@plt+0x28e7c>
   3b644:	ldr	r2, [sp, #200]	; 0xc8
   3b648:	ldr	r3, [sp, #192]	; 0xc0
   3b64c:	cmp	r2, r3
   3b650:	beq	3b6d0 <__assert_fail@plt+0x28ef8>
   3b654:	mov	r2, #0
   3b658:	str	r5, [fp]
   3b65c:	ldr	r0, [sp, #32]
   3b660:	mov	r1, r8
   3b664:	str	r2, [sp]
   3b668:	mov	r3, fp
   3b66c:	bl	38cbc <__assert_fail@plt+0x264e4>
   3b670:	ldr	r2, [fp]
   3b674:	mov	lr, r0
   3b678:	mov	r1, r2
   3b67c:	ldrb	r3, [r2], #1
   3b680:	cmp	r3, #0
   3b684:	cmpne	r3, #59	; 0x3b
   3b688:	moveq	ip, #0
   3b68c:	movne	ip, #1
   3b690:	bne	3b678 <__assert_fail@plt+0x28ea0>
   3b694:	cmp	r3, #59	; 0x3b
   3b698:	addeq	r3, r1, #1
   3b69c:	streq	r3, [fp]
   3b6a0:	beq	3b58c <__assert_fail@plt+0x28db4>
   3b6a4:	mov	r0, r4
   3b6a8:	bl	35d5c <__assert_fail@plt+0x23584>
   3b6ac:	b	3a82c <__assert_fail@plt+0x28054>
   3b6b0:	add	r5, r5, #2
   3b6b4:	str	r5, [fp]
   3b6b8:	b	3b608 <__assert_fail@plt+0x28e30>
   3b6bc:	mov	r4, r5
   3b6c0:	str	r3, [sp, #100]	; 0x64
   3b6c4:	add	r5, r5, #1
   3b6c8:	str	r5, [fp]
   3b6cc:	b	3b578 <__assert_fail@plt+0x28da0>
   3b6d0:	mov	ip, #1
   3b6d4:	mov	lr, #0
   3b6d8:	b	3b58c <__assert_fail@plt+0x28db4>
   3b6dc:	mov	r0, r7
   3b6e0:	bl	35d5c <__assert_fail@plt+0x23584>
   3b6e4:	mov	r0, r5
   3b6e8:	b	39008 <__assert_fail@plt+0x26830>
   3b6ec:	ldr	fp, [sp, #52]	; 0x34
   3b6f0:	mov	r2, #1
   3b6f4:	ldr	r0, [sp, #32]
   3b6f8:	rsb	r1, fp, #0
   3b6fc:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b700:	mov	r4, r0
   3b704:	b	39120 <__assert_fail@plt+0x26948>
   3b708:	add	ip, ip, #10
   3b70c:	ldr	r0, [sp, #100]	; 0x64
   3b710:	str	ip, [sp, #148]	; 0x94
   3b714:	lsl	r1, ip, #2
   3b718:	bl	122c8 <xrealloc@plt>
   3b71c:	str	r0, [sp, #100]	; 0x64
   3b720:	b	3af04 <__assert_fail@plt+0x2872c>
   3b724:	ldr	r7, [sp, #100]	; 0x64
   3b728:	cmp	r7, #0
   3b72c:	bne	3b5b4 <__assert_fail@plt+0x28ddc>
   3b730:	cmp	lr, #0
   3b734:	bne	3b5b4 <__assert_fail@plt+0x28ddc>
   3b738:	cmp	ip, #0
   3b73c:	bne	3b5b4 <__assert_fail@plt+0x28ddc>
   3b740:	ldr	sl, [sp, #56]	; 0x38
   3b744:	ldrd	r2, [sp, #136]	; 0x88
   3b748:	ldr	r0, [sp, #32]
   3b74c:	str	sl, [sp]
   3b750:	bl	34c58 <__assert_fail@plt+0x22480>
   3b754:	mov	r4, r0
   3b758:	b	39120 <__assert_fail@plt+0x26948>
   3b75c:	add	r0, sp, #204	; 0xcc
   3b760:	add	r1, sp, #184	; 0xb8
   3b764:	ldr	r2, [sp, #172]	; 0xac
   3b768:	add	r3, sp, #216	; 0xd8
   3b76c:	bl	389c4 <__assert_fail@plt+0x261ec>
   3b770:	cmp	r0, #0
   3b774:	bne	3b2e0 <__assert_fail@plt+0x28b08>
   3b778:	b	3b3c4 <__assert_fail@plt+0x28bec>
   3b77c:	ldr	ip, [sp, #156]	; 0x9c
   3b780:	mov	r0, r3
   3b784:	mov	r2, #5
   3b788:	movw	r1, #40920	; 0x9fd8
   3b78c:	movt	r1, #5
   3b790:	ldr	r9, [ip]
   3b794:	bl	12298 <dcgettext@plt>
   3b798:	mov	r1, #1
   3b79c:	mov	r2, r0
   3b7a0:	mov	r0, r9
   3b7a4:	bl	125d4 <__fprintf_chk@plt>
   3b7a8:	ldr	r3, [sp, #212]	; 0xd4
   3b7ac:	b	3b2fc <__assert_fail@plt+0x28b24>
   3b7b0:	ldr	r0, [sp, #32]
   3b7b4:	mov	r1, #4
   3b7b8:	mov	r2, #0
   3b7bc:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b7c0:	mov	r4, r0
   3b7c4:	b	39120 <__assert_fail@plt+0x26948>
   3b7c8:	ldr	r0, [sp, #32]
   3b7cc:	mov	r1, #2
   3b7d0:	mov	r2, #0
   3b7d4:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b7d8:	mov	r4, r0
   3b7dc:	b	39120 <__assert_fail@plt+0x26948>
   3b7e0:	mov	fp, r8
   3b7e4:	ldr	r9, [sp, #52]	; 0x34
   3b7e8:	ldr	r8, [sp, #104]	; 0x68
   3b7ec:	b	3b550 <__assert_fail@plt+0x28d78>
   3b7f0:	mov	r2, #5
   3b7f4:	movw	r1, #40664	; 0x9ed8
   3b7f8:	movt	r1, #5
   3b7fc:	bl	12298 <dcgettext@plt>
   3b800:	mov	r1, r0
   3b804:	mov	r0, r7
   3b808:	bl	35ccc <__assert_fail@plt+0x234f4>
   3b80c:	movw	r1, #40380	; 0x9dbc
   3b810:	movt	r1, #5
   3b814:	b	3a1c0 <__assert_fail@plt+0x279e8>
   3b818:	ldrb	r3, [r5, #2]
   3b81c:	cmp	r3, #36	; 0x24
   3b820:	bne	3a264 <__assert_fail@plt+0x27a8c>
   3b824:	add	r0, r4, #2
   3b828:	str	r0, [r8]
   3b82c:	ldrb	r3, [r4, #2]
   3b830:	cmp	r3, #46	; 0x2e
   3b834:	cmpne	r3, #0
   3b838:	beq	3ba10 <__assert_fail@plt+0x29238>
   3b83c:	add	r4, r4, #3
   3b840:	mov	r5, r4
   3b844:	ldrb	r3, [r4], #1
   3b848:	cmp	r3, #0
   3b84c:	cmpne	r3, #46	; 0x2e
   3b850:	bne	3b840 <__assert_fail@plt+0x29068>
   3b854:	cmp	r3, #46	; 0x2e
   3b858:	bne	3aa7c <__assert_fail@plt+0x282a4>
   3b85c:	rsb	r1, r0, r5
   3b860:	add	r5, r5, #1
   3b864:	bl	35e00 <__assert_fail@plt+0x23628>
   3b868:	str	r5, [r8]
   3b86c:	str	r0, [sp, #60]	; 0x3c
   3b870:	b	3a27c <__assert_fail@plt+0x27aa4>
   3b874:	mov	r0, fp
   3b878:	mov	r1, #3
   3b87c:	add	r2, sp, #204	; 0xcc
   3b880:	bl	4b520 <warn@@Base+0x1928>
   3b884:	cmp	r0, #0
   3b888:	beq	3b940 <__assert_fail@plt+0x29168>
   3b88c:	ldr	r3, [r0]
   3b890:	cmp	r3, #3
   3b894:	bne	3b8fc <__assert_fail@plt+0x29124>
   3b898:	ldr	r3, [r0, #8]
   3b89c:	ldr	r2, [r3]
   3b8a0:	cmp	r2, #41	; 0x29
   3b8a4:	bne	3b8fc <__assert_fail@plt+0x29124>
   3b8a8:	ldr	r2, [r3, #8]
   3b8ac:	mov	r0, r5
   3b8b0:	add	r3, sp, #180	; 0xb4
   3b8b4:	ldr	r1, [sp, #104]	; 0x68
   3b8b8:	bl	36f6c <__assert_fail@plt+0x24794>
   3b8bc:	mov	r9, r0
   3b8c0:	ldr	r0, [sp, #204]	; 0xcc
   3b8c4:	bl	121f0 <free@plt>
   3b8c8:	mov	r3, r9
   3b8cc:	b	3b304 <__assert_fail@plt+0x28b2c>
   3b8d0:	cmp	sl, #1
   3b8d4:	sbcs	fp, fp, #0
   3b8d8:	movlt	r0, #0
   3b8dc:	andge	r0, r3, #1
   3b8e0:	cmp	r0, #0
   3b8e4:	beq	3ab48 <__assert_fail@plt+0x28370>
   3b8e8:	ldr	r1, [sp, #52]	; 0x34
   3b8ec:	ldr	r0, [sp, #32]
   3b8f0:	bl	34c40 <__assert_fail@plt+0x22468>
   3b8f4:	mov	r4, r0
   3b8f8:	b	39120 <__assert_fail@plt+0x26948>
   3b8fc:	movw	r3, #168	; 0xa8
   3b900:	movt	r3, #7
   3b904:	mov	r2, #5
   3b908:	movw	r1, #40884	; 0x9fb4
   3b90c:	mov	r0, #0
   3b910:	movt	r1, #5
   3b914:	ldr	r4, [r3]
   3b918:	mov	r7, sl
   3b91c:	ldr	r9, [sp, #52]	; 0x34
   3b920:	bl	12298 <dcgettext@plt>
   3b924:	mov	r1, #1
   3b928:	mov	r2, r0
   3b92c:	mov	r0, r4
   3b930:	bl	125d4 <__fprintf_chk@plt>
   3b934:	ldr	r0, [sp, #204]	; 0xcc
   3b938:	bl	121f0 <free@plt>
   3b93c:	b	3a7f4 <__assert_fail@plt+0x2801c>
   3b940:	mov	r0, fp
   3b944:	mov	r7, sl
   3b948:	ldr	r9, [sp, #52]	; 0x34
   3b94c:	bl	35d1c <__assert_fail@plt+0x23544>
   3b950:	b	3a7f4 <__assert_fail@plt+0x2801c>
   3b954:	ldr	r0, [sp, #32]
   3b958:	mov	r1, #2
   3b95c:	mov	r2, #1
   3b960:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b964:	mov	r4, r0
   3b968:	b	39120 <__assert_fail@plt+0x26948>
   3b96c:	mov	r1, #1
   3b970:	ldr	r0, [sp, #32]
   3b974:	mov	r2, r1
   3b978:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b97c:	mov	r4, r0
   3b980:	b	39120 <__assert_fail@plt+0x26948>
   3b984:	ldr	r3, [sp, #64]	; 0x40
   3b988:	mov	r2, #1
   3b98c:	ldr	r0, [sp, #32]
   3b990:	rsb	r1, r3, #0
   3b994:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b998:	mov	r4, r0
   3b99c:	b	39120 <__assert_fail@plt+0x26948>
   3b9a0:	ldr	r0, [sp, #32]
   3b9a4:	mov	r1, #1
   3b9a8:	mov	r2, #0
   3b9ac:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b9b0:	mov	r4, r0
   3b9b4:	b	39120 <__assert_fail@plt+0x26948>
   3b9b8:	mov	r2, r6
   3b9bc:	ldr	r0, [sp, #32]
   3b9c0:	mov	r1, #4
   3b9c4:	bl	34c24 <__assert_fail@plt+0x2244c>
   3b9c8:	subs	r6, r0, #0
   3b9cc:	bne	392ac <__assert_fail@plt+0x26ad4>
   3b9d0:	b	39028 <__assert_fail@plt+0x26850>
   3b9d4:	movw	r3, #168	; 0xa8
   3b9d8:	movt	r3, #7
   3b9dc:	mov	r2, #5
   3b9e0:	movw	r1, #40860	; 0x9f9c
   3b9e4:	movt	r1, #5
   3b9e8:	ldr	r4, [r3]
   3b9ec:	ldr	r9, [sp, #52]	; 0x34
   3b9f0:	bl	12298 <dcgettext@plt>
   3b9f4:	mov	r1, #1
   3b9f8:	ldr	r3, [sp, #60]	; 0x3c
   3b9fc:	mov	r7, sl
   3ba00:	mov	r2, r0
   3ba04:	mov	r0, r4
   3ba08:	bl	125d4 <__fprintf_chk@plt>
   3ba0c:	b	3a7f4 <__assert_fail@plt+0x2801c>
   3ba10:	mov	r5, r0
   3ba14:	b	3b854 <__assert_fail@plt+0x2907c>
   3ba18:	push	{r4, r5, r6, r7, r8, lr}
   3ba1c:	mov	r0, #240	; 0xf0
   3ba20:	mov	r8, r3
   3ba24:	mov	r7, r1
   3ba28:	mov	r6, r2
   3ba2c:	ldr	r5, [sp, #24]
   3ba30:	bl	12358 <xmalloc@plt>
   3ba34:	mov	r1, #0
   3ba38:	mov	r2, #240	; 0xf0
   3ba3c:	mov	r4, r0
   3ba40:	bl	12580 <memset@plt>
   3ba44:	mov	r0, #4
   3ba48:	mov	r3, #1
   3ba4c:	str	r7, [r4]
   3ba50:	str	r3, [r4, #88]	; 0x58
   3ba54:	stmib	r4, {r6, r8}
   3ba58:	str	r5, [r4, #12]
   3ba5c:	bl	12358 <xmalloc@plt>
   3ba60:	mvn	r2, #0
   3ba64:	mvn	r3, #0
   3ba68:	mov	ip, #0
   3ba6c:	strd	r2, [r4, #72]	; 0x48
   3ba70:	mov	r1, r0
   3ba74:	mov	r0, r4
   3ba78:	str	r1, [r4, #92]	; 0x5c
   3ba7c:	str	ip, [r1]
   3ba80:	pop	{r4, r5, r6, r7, r8, pc}
   3ba84:	push	{r3, r4, r5, lr}
   3ba88:	mov	r4, r1
   3ba8c:	ldr	r3, [r1, #68]	; 0x44
   3ba90:	mov	r5, r0
   3ba94:	cmp	r3, #0
   3ba98:	bne	3baec <__assert_fail@plt+0x29314>
   3ba9c:	ldr	r4, [r4, #232]	; 0xe8
   3baa0:	cmp	r4, #0
   3baa4:	bne	3bab8 <__assert_fail@plt+0x292e0>
   3baa8:	b	3bae4 <__assert_fail@plt+0x2930c>
   3baac:	ldr	r4, [r4]
   3bab0:	cmp	r4, #0
   3bab4:	beq	3bae4 <__assert_fail@plt+0x2930c>
   3bab8:	ldr	r2, [r4, #8]
   3babc:	mov	r0, r5
   3bac0:	ldr	r1, [r4, #4]
   3bac4:	cmp	r2, #0
   3bac8:	moveq	r2, #7
   3bacc:	bl	35528 <__assert_fail@plt+0x22d50>
   3bad0:	cmp	r0, #0
   3bad4:	str	r0, [r4, #12]
   3bad8:	bne	3baac <__assert_fail@plt+0x292d4>
   3badc:	mov	r0, #0
   3bae0:	pop	{r3, r4, r5, pc}
   3bae4:	mov	r0, #1
   3bae8:	pop	{r3, r4, r5, pc}
   3baec:	add	r1, r1, #84	; 0x54
   3baf0:	bl	35fd0 <__assert_fail@plt+0x237f8>
   3baf4:	cmp	r0, #0
   3baf8:	beq	3badc <__assert_fail@plt+0x29304>
   3bafc:	mov	r0, r5
   3bb00:	ldrd	r2, [r4, #72]	; 0x48
   3bb04:	bl	34638 <__assert_fail@plt+0x21e60>
   3bb08:	cmp	r0, #0
   3bb0c:	beq	3badc <__assert_fail@plt+0x29304>
   3bb10:	mov	r1, #0
   3bb14:	mvn	r2, #0
   3bb18:	mvn	r3, #0
   3bb1c:	str	r1, [r4, #68]	; 0x44
   3bb20:	strd	r2, [r4, #72]	; 0x48
   3bb24:	b	3ba9c <__assert_fail@plt+0x292c4>
   3bb28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bb2c:	movw	sl, #65176	; 0xfe98
   3bb30:	movt	sl, #6
   3bb34:	ldr	r6, [r1, #16]
   3bb38:	mov	r7, r2
   3bb3c:	sub	sp, sp, #44	; 0x2c
   3bb40:	ldr	r2, [sl]
   3bb44:	cmp	r6, #0
   3bb48:	mov	r8, r1
   3bb4c:	mov	fp, r0
   3bb50:	mov	r5, r3
   3bb54:	ldr	r4, [sp, #88]	; 0x58
   3bb58:	str	r2, [sp, #36]	; 0x24
   3bb5c:	beq	3bbc0 <__assert_fail@plt+0x293e8>
   3bb60:	cmp	r7, #100	; 0x64
   3bb64:	beq	3bc0c <__assert_fail@plt+0x29434>
   3bb68:	mov	r1, r6
   3bb6c:	mov	r0, fp
   3bb70:	bl	34204 <__assert_fail@plt+0x21a2c>
   3bb74:	cmp	r0, #0
   3bb78:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3bb7c:	ldr	r1, [r8, #4]
   3bb80:	mov	r3, #0
   3bb84:	ldr	r2, [r8, #16]
   3bb88:	mov	r0, #4
   3bb8c:	cmp	r1, r3
   3bb90:	str	r3, [r8, #48]	; 0x30
   3bb94:	str	r3, [r8, #52]	; 0x34
   3bb98:	str	r2, [r8, #56]	; 0x38
   3bb9c:	ldrdeq	r2, [r8, #24]
   3bba0:	strdeq	r2, [r8, #32]
   3bba4:	mov	r3, #1
   3bba8:	str	r3, [r8, #88]	; 0x58
   3bbac:	bl	12358 <xmalloc@plt>
   3bbb0:	mov	r3, #0
   3bbb4:	str	r0, [r8, #92]	; 0x5c
   3bbb8:	str	r3, [r0]
   3bbbc:	str	r3, [r8, #16]
   3bbc0:	cmp	r7, #98	; 0x62
   3bbc4:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3bbc8:	ble	3bdb0 <__assert_fail@plt+0x295d8>
   3bbcc:	cmp	r7, #192	; 0xc0
   3bbd0:	beq	3c1d8 <__assert_fail@plt+0x29a00>
   3bbd4:	ble	3bf1c <__assert_fail@plt+0x29744>
   3bbd8:	cmp	r7, #224	; 0xe0
   3bbdc:	beq	3bcfc <__assert_fail@plt+0x29524>
   3bbe0:	ble	3bf7c <__assert_fail@plt+0x297a4>
   3bbe4:	cmp	r7, #226	; 0xe2
   3bbe8:	beq	3c174 <__assert_fail@plt+0x2999c>
   3bbec:	cmp	r7, #228	; 0xe4
   3bbf0:	bne	3be48 <__assert_fail@plt+0x29670>
   3bbf4:	mov	r0, fp
   3bbf8:	mov	r1, r4
   3bbfc:	bl	34978 <__assert_fail@plt+0x221a0>
   3bc00:	adds	r0, r0, #0
   3bc04:	movne	r0, #1
   3bc08:	b	3bd98 <__assert_fail@plt+0x295c0>
   3bc0c:	ldrb	ip, [r4]
   3bc10:	cmp	ip, #0
   3bc14:	beq	3bb68 <__assert_fail@plt+0x29390>
   3bc18:	ldrd	r0, [r1, #24]
   3bc1c:	ldrd	r2, [sp, #80]	; 0x50
   3bc20:	cmp	r1, r3
   3bc24:	cmpeq	r0, r2
   3bc28:	bne	3bb68 <__assert_fail@plt+0x29390>
   3bc2c:	ldr	r3, [r8, #68]	; 0x44
   3bc30:	cmp	r3, #0
   3bc34:	moveq	r1, ip
   3bc38:	beq	3bcc0 <__assert_fail@plt+0x294e8>
   3bc3c:	ldrd	r2, [r8, #72]	; 0x48
   3bc40:	mvn	r0, #0
   3bc44:	mvn	r1, #0
   3bc48:	cmp	r3, r1
   3bc4c:	cmpeq	r2, r0
   3bc50:	beq	3c3a0 <__assert_fail@plt+0x29bc8>
   3bc54:	ldrd	r6, [sp, #80]	; 0x50
   3bc58:	ldr	r5, [sp, #84]	; 0x54
   3bc5c:	cmp	r7, r3
   3bc60:	cmpeq	r6, r2
   3bc64:	ldr	r6, [sp, #80]	; 0x50
   3bc68:	movhi	r5, r3
   3bc6c:	movhi	r6, r2
   3bc70:	mov	r0, fp
   3bc74:	add	r1, r8, #84	; 0x54
   3bc78:	bl	35fd0 <__assert_fail@plt+0x237f8>
   3bc7c:	cmp	r0, #0
   3bc80:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3bc84:	mov	r0, fp
   3bc88:	mov	r2, r6
   3bc8c:	mov	r3, r5
   3bc90:	bl	34638 <__assert_fail@plt+0x21e60>
   3bc94:	cmp	r0, #0
   3bc98:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3bc9c:	mov	r1, #0
   3bca0:	mvn	r2, #0
   3bca4:	mvn	r3, #0
   3bca8:	str	r1, [r8, #68]	; 0x44
   3bcac:	strd	r2, [r8, #72]	; 0x48
   3bcb0:	ldrb	r1, [r4]
   3bcb4:	cmp	r1, #0
   3bcb8:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3bcbc:	ldr	r6, [r8, #16]
   3bcc0:	cmp	r6, #0
   3bcc4:	beq	3cbc8 <__assert_fail@plt+0x2a3f0>
   3bcc8:	cmp	r1, #47	; 0x2f
   3bccc:	beq	3cba4 <__assert_fail@plt+0x2a3cc>
   3bcd0:	mov	r1, r4
   3bcd4:	mov	r0, r6
   3bcd8:	mov	r2, #0
   3bcdc:	bl	122ec <concat@plt>
   3bce0:	str	r0, [r8, #16]
   3bce4:	mov	r0, r6
   3bce8:	bl	121f0 <free@plt>
   3bcec:	ldrd	r4, [sp, #80]	; 0x50
   3bcf0:	mov	r0, #1
   3bcf4:	strd	r4, [r8, #24]
   3bcf8:	b	3bd98 <__assert_fail@plt+0x295c0>
   3bcfc:	ldr	r3, [r8, #52]	; 0x34
   3bd00:	cmp	r3, #0
   3bd04:	beq	3bd10 <__assert_fail@plt+0x29538>
   3bd08:	cmp	r5, #1
   3bd0c:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3bd10:	mov	r0, fp
   3bd14:	add	r1, r8, #84	; 0x54
   3bd18:	bl	35fd0 <__assert_fail@plt+0x237f8>
   3bd1c:	cmp	r0, #0
   3bd20:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3bd24:	ldrd	r4, [r8, #40]	; 0x28
   3bd28:	mov	r0, fp
   3bd2c:	ldrd	r2, [r8, #32]
   3bd30:	ldrd	r6, [sp, #80]	; 0x50
   3bd34:	adds	r2, r2, r4
   3bd38:	adc	r3, r3, r5
   3bd3c:	adds	r2, r2, r6
   3bd40:	adc	r3, r3, r7
   3bd44:	bl	34798 <__assert_fail@plt+0x21fc0>
   3bd48:	cmp	r0, #0
   3bd4c:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3bd50:	ldr	r3, [r8, #80]	; 0x50
   3bd54:	sub	r3, r3, #1
   3bd58:	str	r3, [r8, #80]	; 0x50
   3bd5c:	cmp	r3, #0
   3bd60:	bge	3bf14 <__assert_fail@plt+0x2973c>
   3bd64:	movw	r3, #168	; 0xa8
   3bd68:	movt	r3, #7
   3bd6c:	mov	r2, #5
   3bd70:	movw	r1, #41020	; 0xa03c
   3bd74:	mov	r0, #0
   3bd78:	movt	r1, #5
   3bd7c:	ldr	r4, [r3]
   3bd80:	bl	12298 <dcgettext@plt>
   3bd84:	mov	r1, #1
   3bd88:	mov	r2, r0
   3bd8c:	mov	r0, r4
   3bd90:	bl	125d4 <__fprintf_chk@plt>
   3bd94:	mov	r0, #0
   3bd98:	ldr	r2, [sp, #36]	; 0x24
   3bd9c:	ldr	r3, [sl]
   3bda0:	cmp	r2, r3
   3bda4:	bne	3cbe0 <__assert_fail@plt+0x2a408>
   3bda8:	add	sp, sp, #44	; 0x2c
   3bdac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bdb0:	cmp	r7, #36	; 0x24
   3bdb4:	beq	3c004 <__assert_fail@plt+0x2982c>
   3bdb8:	ble	3c304 <__assert_fail@plt+0x29b2c>
   3bdbc:	cmp	r7, #56	; 0x38
   3bdc0:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3bdc4:	ble	3c374 <__assert_fail@plt+0x29b9c>
   3bdc8:	cmp	r7, #60	; 0x3c
   3bdcc:	beq	3c18c <__assert_fail@plt+0x299b4>
   3bdd0:	cmp	r7, #68	; 0x44
   3bdd4:	bne	3be48 <__assert_fail@plt+0x29670>
   3bdd8:	ldr	r3, [r8, #68]	; 0x44
   3bddc:	mov	r1, r5
   3bde0:	ldrd	r4, [sp, #80]	; 0x50
   3bde4:	mov	r0, fp
   3bde8:	cmp	r3, #0
   3bdec:	ldrdne	r2, [r8, #40]	; 0x28
   3bdf0:	moveq	r3, #0
   3bdf4:	moveq	r2, #0
   3bdf8:	adds	r2, r2, r4
   3bdfc:	adc	r3, r3, r5
   3be00:	bl	3481c <__assert_fail@plt+0x22044>
   3be04:	adds	r0, r0, #0
   3be08:	movne	r0, #1
   3be0c:	b	3bd98 <__assert_fail@plt+0x295c0>
   3be10:	cmp	r3, #0
   3be14:	beq	3be48 <__assert_fail@plt+0x29670>
   3be18:	ldrd	r2, [r8, #72]	; 0x48
   3be1c:	mvn	r0, #0
   3be20:	mvn	r1, #0
   3be24:	cmp	r3, r1
   3be28:	cmpeq	r2, r0
   3be2c:	beq	3be40 <__assert_fail@plt+0x29668>
   3be30:	ldrd	r0, [sp, #80]	; 0x50
   3be34:	cmp	r1, r3
   3be38:	cmpeq	r0, r2
   3be3c:	bcs	3be48 <__assert_fail@plt+0x29670>
   3be40:	ldrd	r2, [sp, #80]	; 0x50
   3be44:	strd	r2, [r8, #72]	; 0x48
   3be48:	mov	r0, r4
   3be4c:	mov	r1, #58	; 0x3a
   3be50:	bl	124fc <strchr@plt>
   3be54:	cmp	r0, #0
   3be58:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3be5c:	ldrb	r3, [r0, #1]
   3be60:	and	r3, r3, #223	; 0xdf
   3be64:	cmp	r3, #70	; 0x46
   3be68:	bne	3c080 <__assert_fail@plt+0x298a8>
   3be6c:	ldr	r3, [r8, #68]	; 0x44
   3be70:	cmp	r3, #0
   3be74:	beq	3bee4 <__assert_fail@plt+0x2970c>
   3be78:	ldrd	r2, [r8, #72]	; 0x48
   3be7c:	mvn	r0, #0
   3be80:	mvn	r1, #0
   3be84:	cmp	r3, r1
   3be88:	cmpeq	r2, r0
   3be8c:	beq	3cbb4 <__assert_fail@plt+0x2a3dc>
   3be90:	ldrd	r0, [sp, #80]	; 0x50
   3be94:	ldr	r6, [sp, #80]	; 0x50
   3be98:	cmp	r1, r3
   3be9c:	cmpeq	r0, r2
   3bea0:	ldr	r5, [sp, #84]	; 0x54
   3bea4:	movhi	r6, r2
   3bea8:	movhi	r5, r3
   3beac:	mov	r0, fp
   3beb0:	add	r1, r8, #84	; 0x54
   3beb4:	bl	35fd0 <__assert_fail@plt+0x237f8>
   3beb8:	cmp	r0, #0
   3bebc:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3bec0:	mov	r2, r6
   3bec4:	mov	r3, r5
   3bec8:	mov	r0, fp
   3becc:	bl	34638 <__assert_fail@plt+0x21e60>
   3bed0:	cmp	r0, #0
   3bed4:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3bed8:	mvn	r2, #0
   3bedc:	mvn	r3, #0
   3bee0:	strd	r2, [r8, #72]	; 0x48
   3bee4:	ldr	r3, [r8, #4]
   3bee8:	mov	r0, r4
   3beec:	mov	r1, #58	; 0x3a
   3bef0:	cmp	r3, #0
   3bef4:	ldrdne	r2, [sp, #80]	; 0x50
   3bef8:	strdne	r2, [r8, #40]	; 0x28
   3befc:	mov	r3, #1
   3bf00:	str	r3, [r8, #68]	; 0x44
   3bf04:	bl	124fc <strchr@plt>
   3bf08:	cmp	r0, #0
   3bf0c:	str	r0, [sp, #28]
   3bf10:	bne	3c0a0 <__assert_fail@plt+0x298c8>
   3bf14:	mov	r0, #1
   3bf18:	b	3bd98 <__assert_fail@plt+0x295c0>
   3bf1c:	cmp	r7, #130	; 0x82
   3bf20:	beq	3c24c <__assert_fail@plt+0x29a74>
   3bf24:	ble	3c380 <__assert_fail@plt+0x29ba8>
   3bf28:	cmp	r7, #132	; 0x84
   3bf2c:	beq	3c15c <__assert_fail@plt+0x29984>
   3bf30:	cmp	r7, #162	; 0xa2
   3bf34:	bne	3be48 <__assert_fail@plt+0x29670>
   3bf38:	ldr	r3, [r8, #60]	; 0x3c
   3bf3c:	cmp	r3, #0
   3bf40:	beq	3cacc <__assert_fail@plt+0x2a2f4>
   3bf44:	ldr	r2, [r3, #4]
   3bf48:	ldr	r0, [r3, #24]
   3bf4c:	ldr	r1, [r8, #92]	; 0x5c
   3bf50:	cmp	r2, #0
   3bf54:	str	r2, [r8, #60]	; 0x3c
   3bf58:	ldr	r1, [r1, r0, lsl #2]
   3bf5c:	str	r1, [r3, #28]
   3bf60:	ldrne	r1, [r2, #8]
   3bf64:	beq	3cacc <__assert_fail@plt+0x2a2f4>
   3bf68:	mov	r0, fp
   3bf6c:	bl	34310 <__assert_fail@plt+0x21b38>
   3bf70:	adds	r0, r0, #0
   3bf74:	movne	r0, #1
   3bf78:	b	3bd98 <__assert_fail@plt+0x295c0>
   3bf7c:	cmp	r7, #194	; 0xc2
   3bf80:	bne	3be48 <__assert_fail@plt+0x29670>
   3bf84:	ldr	r1, [r8, #88]	; 0x58
   3bf88:	ldr	r0, [r8, #92]	; 0x5c
   3bf8c:	add	r1, r1, #1
   3bf90:	str	r1, [r8, #88]	; 0x58
   3bf94:	lsl	r1, r1, #2
   3bf98:	bl	122c8 <xrealloc@plt>
   3bf9c:	ldr	r6, [r8, #64]	; 0x40
   3bfa0:	cmp	r6, #0
   3bfa4:	mov	r5, r0
   3bfa8:	str	r0, [r8, #92]	; 0x5c
   3bfac:	beq	3c2c8 <__assert_fail@plt+0x29af0>
   3bfb0:	mov	r9, r6
   3bfb4:	ldrd	r6, [sp, #80]	; 0x50
   3bfb8:	b	3bfc8 <__assert_fail@plt+0x297f0>
   3bfbc:	ldr	r9, [r9]
   3bfc0:	cmp	r9, #0
   3bfc4:	beq	3c2c8 <__assert_fail@plt+0x29af0>
   3bfc8:	ldrd	r2, [r9, #16]
   3bfcc:	cmp	r7, r3
   3bfd0:	cmpeq	r6, r2
   3bfd4:	bne	3bfbc <__assert_fail@plt+0x297e4>
   3bfd8:	ldr	r0, [r9, #8]
   3bfdc:	mov	r1, r4
   3bfe0:	bl	12178 <strcmp@plt>
   3bfe4:	cmp	r0, #0
   3bfe8:	bne	3bfbc <__assert_fail@plt+0x297e4>
   3bfec:	ldr	r3, [r8, #88]	; 0x58
   3bff0:	mov	r0, #1
   3bff4:	ldr	r2, [r9, #28]
   3bff8:	sub	r3, r3, #-1073741823	; 0xc0000001
   3bffc:	str	r2, [r5, r3, lsl #2]
   3c000:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c004:	ldrb	r3, [r4]
   3c008:	cmp	r3, #0
   3c00c:	ldr	r3, [r8, #68]	; 0x44
   3c010:	bne	3be10 <__assert_fail@plt+0x29638>
   3c014:	cmp	r3, #0
   3c018:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3c01c:	ldr	r3, [r8, #4]
   3c020:	cmp	r3, #0
   3c024:	beq	3c03c <__assert_fail@plt+0x29864>
   3c028:	ldrd	r6, [sp, #80]	; 0x50
   3c02c:	ldrd	r2, [r8, #40]	; 0x28
   3c030:	adds	r6, r6, r2
   3c034:	adc	r7, r7, r3
   3c038:	strd	r6, [sp, #80]	; 0x50
   3c03c:	mov	r0, fp
   3c040:	add	r1, r8, #84	; 0x54
   3c044:	bl	35fd0 <__assert_fail@plt+0x237f8>
   3c048:	cmp	r0, #0
   3c04c:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c050:	mov	r0, fp
   3c054:	ldrd	r2, [sp, #80]	; 0x50
   3c058:	bl	34638 <__assert_fail@plt+0x21e60>
   3c05c:	cmp	r0, #0
   3c060:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c064:	mov	r1, #0
   3c068:	mvn	r2, #0
   3c06c:	mvn	r3, #0
   3c070:	str	r1, [r8, #68]	; 0x44
   3c074:	mov	r0, #1
   3c078:	strd	r2, [r8, #72]	; 0x48
   3c07c:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c080:	str	r0, [sp, #28]
   3c084:	b	3c0a0 <__assert_fail@plt+0x298c8>
   3c088:	add	r0, r0, #2
   3c08c:	str	r0, [sp, #28]
   3c090:	bl	124fc <strchr@plt>
   3c094:	cmp	r0, #0
   3c098:	str	r0, [sp, #28]
   3c09c:	beq	3c320 <__assert_fail@plt+0x29b48>
   3c0a0:	ldrb	r1, [r0, #1]
   3c0a4:	cmp	r1, #58	; 0x3a
   3c0a8:	beq	3c088 <__assert_fail@plt+0x298b0>
   3c0ac:	ldrb	r3, [r4]
   3c0b0:	cmp	r3, #36	; 0x24
   3c0b4:	beq	3cad4 <__assert_fail@plt+0x2a2fc>
   3c0b8:	cmp	r0, r4
   3c0bc:	beq	3cbc0 <__assert_fail@plt+0x2a3e8>
   3c0c0:	ldrb	r3, [r4]
   3c0c4:	cmp	r3, #32
   3c0c8:	bne	3c0d8 <__assert_fail@plt+0x29900>
   3c0cc:	add	r3, r4, #1
   3c0d0:	cmp	r0, r3
   3c0d4:	beq	3cbc0 <__assert_fail@plt+0x2a3e8>
   3c0d8:	rsb	r1, r4, r0
   3c0dc:	mov	r0, r4
   3c0e0:	bl	35e00 <__assert_fail@plt+0x23628>
   3c0e4:	mov	r5, r0
   3c0e8:	ldr	r0, [sp, #28]
   3c0ec:	add	r3, r0, #1
   3c0f0:	str	r3, [sp, #28]
   3c0f4:	ldrb	r2, [r0, #1]
   3c0f8:	movw	r3, #65192	; 0xfea8
   3c0fc:	movt	r3, #6
   3c100:	lsl	r1, r2, #1
   3c104:	ldrh	r3, [r3, r1]
   3c108:	tst	r3, #4
   3c10c:	beq	3c3ac <__assert_fail@plt+0x29bd4>
   3c110:	mov	r2, #0
   3c114:	add	r3, sp, #28
   3c118:	mov	r0, fp
   3c11c:	str	r2, [sp]
   3c120:	mov	r1, r8
   3c124:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c128:	subs	r3, r0, #0
   3c12c:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c130:	ldrd	r6, [sp, #80]	; 0x50
   3c134:	mov	ip, #4
   3c138:	mov	r0, fp
   3c13c:	mov	r1, r8
   3c140:	mov	r2, r5
   3c144:	str	ip, [sp]
   3c148:	strd	r6, [sp, #8]
   3c14c:	bl	35f3c <__assert_fail@plt+0x23764>
   3c150:	cmp	r0, #0
   3c154:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c158:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c15c:	mov	r0, fp
   3c160:	mov	r1, r4
   3c164:	bl	34310 <__assert_fail@plt+0x21b38>
   3c168:	adds	r0, r0, #0
   3c16c:	movne	r0, #1
   3c170:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c174:	mov	r0, fp
   3c178:	mov	r1, r4
   3c17c:	bl	34938 <__assert_fail@plt+0x22160>
   3c180:	adds	r0, r0, #0
   3c184:	movne	r0, #1
   3c188:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c18c:	cmp	r4, #0
   3c190:	beq	3c1cc <__assert_fail@plt+0x299f4>
   3c194:	movw	r1, #41068	; 0xa06c
   3c198:	mov	r0, r4
   3c19c:	movt	r1, #5
   3c1a0:	bl	12178 <strcmp@plt>
   3c1a4:	cmp	r0, #0
   3c1a8:	beq	3c364 <__assert_fail@plt+0x29b8c>
   3c1ac:	mov	r0, r4
   3c1b0:	movw	r1, #41084	; 0xa07c
   3c1b4:	movt	r1, #5
   3c1b8:	bl	12178 <strcmp@plt>
   3c1bc:	cmp	r0, #0
   3c1c0:	moveq	r0, #1
   3c1c4:	streq	r0, [r8, #48]	; 0x30
   3c1c8:	beq	3bd98 <__assert_fail@plt+0x295c0>
   3c1cc:	mov	r0, #1
   3c1d0:	str	r0, [r8, #52]	; 0x34
   3c1d4:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c1d8:	ldr	r3, [r8, #52]	; 0x34
   3c1dc:	cmp	r3, #0
   3c1e0:	beq	3c1ec <__assert_fail@plt+0x29a14>
   3c1e4:	cmp	r5, #1
   3c1e8:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3c1ec:	ldr	r4, [r8, #68]	; 0x44
   3c1f0:	cmp	r4, #0
   3c1f4:	beq	3c32c <__assert_fail@plt+0x29b54>
   3c1f8:	ldrd	r4, [r8, #32]
   3c1fc:	mov	r0, fp
   3c200:	ldrd	r6, [r8, #40]	; 0x28
   3c204:	adds	r2, r6, r4
   3c208:	adc	r3, r7, r5
   3c20c:	ldrd	r4, [sp, #80]	; 0x50
   3c210:	adds	r2, r2, r4
   3c214:	adc	r3, r3, r5
   3c218:	bl	346d0 <__assert_fail@plt+0x21ef8>
   3c21c:	cmp	r0, #0
   3c220:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c224:	mov	r0, fp
   3c228:	add	r1, r8, #84	; 0x54
   3c22c:	bl	35fd0 <__assert_fail@plt+0x237f8>
   3c230:	cmp	r0, #0
   3c234:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c238:	ldr	r3, [r8, #80]	; 0x50
   3c23c:	mov	r0, #1
   3c240:	add	r3, r3, r0
   3c244:	str	r3, [r8, #80]	; 0x50
   3c248:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c24c:	mov	r0, #32
   3c250:	mov	r9, #0
   3c254:	bl	12358 <xmalloc@plt>
   3c258:	ldr	r2, [r8, #88]	; 0x58
   3c25c:	ldr	r1, [r8, #64]	; 0x40
   3c260:	ldrd	r6, [sp, #80]	; 0x50
   3c264:	add	r3, r2, #1
   3c268:	mov	r5, r0
   3c26c:	ldr	r0, [r8, #60]	; 0x3c
   3c270:	str	r1, [r5]
   3c274:	lsl	r1, r3, #2
   3c278:	str	r2, [r5, #24]
   3c27c:	str	r0, [r5, #4]
   3c280:	str	r4, [r5, #8]
   3c284:	strd	r6, [r5, #16]
   3c288:	str	r9, [r5, #28]
   3c28c:	ldr	r0, [r8, #92]	; 0x5c
   3c290:	str	r3, [r8, #88]	; 0x58
   3c294:	str	r5, [r8, #64]	; 0x40
   3c298:	str	r5, [r8, #60]	; 0x3c
   3c29c:	bl	122c8 <xrealloc@plt>
   3c2a0:	ldr	r2, [r5, #24]
   3c2a4:	mov	r1, r4
   3c2a8:	mov	r3, r0
   3c2ac:	mov	r0, fp
   3c2b0:	str	r3, [r8, #92]	; 0x5c
   3c2b4:	str	r9, [r3, r2, lsl #2]
   3c2b8:	bl	34310 <__assert_fail@plt+0x21b38>
   3c2bc:	subs	r0, r0, r9
   3c2c0:	movne	r0, #1
   3c2c4:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c2c8:	mov	r2, #5
   3c2cc:	movw	r1, #41100	; 0xa08c
   3c2d0:	mov	r0, #0
   3c2d4:	movt	r1, #5
   3c2d8:	bl	12298 <dcgettext@plt>
   3c2dc:	mov	r1, r0
   3c2e0:	mov	r0, r4
   3c2e4:	bl	35ccc <__assert_fail@plt+0x234f4>
   3c2e8:	ldr	r2, [r8, #88]	; 0x58
   3c2ec:	ldr	r3, [r8, #92]	; 0x5c
   3c2f0:	mov	r1, #0
   3c2f4:	sub	r2, r2, #-1073741823	; 0xc0000001
   3c2f8:	mov	r0, #1
   3c2fc:	str	r1, [r3, r2, lsl #2]
   3c300:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c304:	cmp	r7, #12
   3c308:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3c30c:	blt	3be48 <__assert_fail@plt+0x29670>
   3c310:	sub	r3, r7, #30
   3c314:	cmp	r3, #1
   3c318:	bls	3bf14 <__assert_fail@plt+0x2973c>
   3c31c:	b	3be48 <__assert_fail@plt+0x29670>
   3c320:	mov	r0, r4
   3c324:	bl	35d5c <__assert_fail@plt+0x23584>
   3c328:	b	3bd94 <__assert_fail@plt+0x295bc>
   3c32c:	movw	r3, #168	; 0xa8
   3c330:	movt	r3, #7
   3c334:	mov	r2, #5
   3c338:	movw	r1, #40988	; 0xa01c
   3c33c:	mov	r0, r4
   3c340:	movt	r1, #5
   3c344:	ldr	r5, [r3]
   3c348:	bl	12298 <dcgettext@plt>
   3c34c:	mov	r1, #1
   3c350:	mov	r2, r0
   3c354:	mov	r0, r5
   3c358:	bl	125d4 <__fprintf_chk@plt>
   3c35c:	mov	r0, r4
   3c360:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c364:	mov	r3, #2
   3c368:	mov	r0, #1
   3c36c:	str	r3, [r8, #48]	; 0x30
   3c370:	b	3bd98 <__assert_fail@plt+0x295c0>
   3c374:	cmp	r7, #42	; 0x2a
   3c378:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3c37c:	b	3be48 <__assert_fail@plt+0x29670>
   3c380:	cmp	r7, #100	; 0x64
   3c384:	bne	3be48 <__assert_fail@plt+0x29670>
   3c388:	ldr	r3, [r8, #68]	; 0x44
   3c38c:	ldrb	r1, [r4]
   3c390:	cmp	r3, #0
   3c394:	beq	3bcb4 <__assert_fail@plt+0x294dc>
   3c398:	cmp	r1, #0
   3c39c:	bne	3bc3c <__assert_fail@plt+0x29464>
   3c3a0:	ldr	r6, [sp, #80]	; 0x50
   3c3a4:	ldr	r5, [sp, #84]	; 0x54
   3c3a8:	b	3bc70 <__assert_fail@plt+0x29498>
   3c3ac:	cmp	r2, #40	; 0x28
   3c3b0:	beq	3c110 <__assert_fail@plt+0x29938>
   3c3b4:	cmp	r2, #45	; 0x2d
   3c3b8:	beq	3c110 <__assert_fail@plt+0x29938>
   3c3bc:	add	r3, r0, #2
   3c3c0:	str	r3, [sp, #28]
   3c3c4:	ldrb	r6, [r0, #1]
   3c3c8:	sub	r3, r6, #67	; 0x43
   3c3cc:	cmp	r3, #51	; 0x33
   3c3d0:	ldrls	pc, [pc, r3, lsl #2]
   3c3d4:	b	3c320 <__assert_fail@plt+0x29b48>
   3c3d8:			; <UNDEFINED> instruction: 0x0003c6b4
   3c3dc:	andeq	ip, r3, r0, lsr #6
   3c3e0:	andeq	ip, r3, r0, lsr #6
   3c3e4:	andeq	ip, r3, r4, lsr #12
   3c3e8:	andeq	ip, r3, r8, lsr r5
   3c3ec:	andeq	ip, r3, r0, lsr #6
   3c3f0:	andeq	ip, r3, r0, lsr #6
   3c3f4:	andeq	ip, r3, r0, lsr #6
   3c3f8:	andeq	ip, r3, r0, lsr #6
   3c3fc:	andeq	ip, r3, r0, lsr #6
   3c400:	andeq	ip, r3, r0, lsr #6
   3c404:	andeq	ip, r3, r0, lsr #6
   3c408:	andeq	ip, r3, r0, lsr #6
   3c40c:	andeq	ip, r3, ip, ror #9
   3c410:	andeq	ip, r3, r0, lsr #6
   3c414:	andeq	ip, r3, r8, lsr #9
   3c418:	andeq	ip, r3, r4, lsr #19
   3c41c:			; <UNDEFINED> instruction: 0x0003c8b8
   3c420:	andeq	ip, r3, r0, lsr #6
   3c424:	andeq	ip, r3, ip, ror #16
   3c428:	andeq	ip, r3, r0, lsr #6
   3c42c:	andeq	ip, r3, r0, lsl r1
   3c430:	andeq	ip, r3, r8, lsr #16
   3c434:	andeq	ip, r3, r0, lsr #6
   3c438:	andeq	ip, r3, r0, lsr #6
   3c43c:	andeq	ip, r3, r0, lsr #6
   3c440:	andeq	ip, r3, r0, lsr #6
   3c444:	andeq	ip, r3, r0, lsr #6
   3c448:	andeq	ip, r3, r0, lsr #6
   3c44c:	andeq	ip, r3, r0, lsr #6
   3c450:	andeq	ip, r3, r8, lsl #21
   3c454:	andeq	ip, r3, r0, lsr #6
   3c458:	strdeq	ip, [r3], -r0
   3c45c:	andeq	ip, r3, r0, lsr #6
   3c460:	andeq	ip, r3, r0, lsr #6
   3c464:	andeq	ip, r3, r4, lsr #12
   3c468:	andeq	ip, r3, r0, lsr #6
   3c46c:	andeq	ip, r3, r0, lsr #6
   3c470:	andeq	ip, r3, r0, lsr #6
   3c474:	andeq	ip, r3, r0, lsr #6
   3c478:	andeq	ip, r3, r0, lsr #6
   3c47c:	andeq	ip, r3, r0, lsl r1
   3c480:	andeq	ip, r3, r0, lsr #6
   3c484:	andeq	ip, r3, r0, lsr #6
   3c488:	andeq	ip, r3, r0, lsr #6
   3c48c:	muleq	r3, r0, r7
   3c490:	andeq	ip, r3, r0, lsr #6
   3c494:	andeq	ip, r3, r4, asr #14
   3c498:	andeq	ip, r3, r0, lsl r1
   3c49c:	strdeq	ip, [r3], -r4
   3c4a0:	andeq	ip, r3, r0, lsr #6
   3c4a4:	andeq	ip, r3, r4, ror #15
   3c4a8:	mov	r2, #0
   3c4ac:	mov	r1, r8
   3c4b0:	str	r2, [sp]
   3c4b4:	mov	r0, fp
   3c4b8:	add	r3, sp, #28
   3c4bc:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c4c0:	subs	r2, r0, #0
   3c4c4:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c4c8:	ldrd	r6, [sp, #80]	; 0x50
   3c4cc:	mov	r0, fp
   3c4d0:	mov	r1, r5
   3c4d4:	mov	r3, #2
   3c4d8:	strd	r6, [sp]
   3c4dc:	bl	34554 <__assert_fail@plt+0x21d7c>
   3c4e0:	cmp	r0, #0
   3c4e4:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c4e8:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c4ec:	cmp	r7, #36	; 0x24
   3c4f0:	bne	3c4a8 <__assert_fail@plt+0x29cd0>
   3c4f4:	mov	r5, #0
   3c4f8:	b	3c524 <__assert_fail@plt+0x29d4c>
   3c4fc:	str	r5, [sp]
   3c500:	mov	r0, fp
   3c504:	mov	r1, r8
   3c508:	mov	r2, #0
   3c50c:	add	r3, sp, #28
   3c510:	add	ip, ip, #1
   3c514:	str	ip, [sp, #28]
   3c518:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c51c:	cmp	r0, #0
   3c520:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c524:	ldr	ip, [sp, #28]
   3c528:	ldrb	r3, [ip]
   3c52c:	cmp	r3, #59	; 0x3b
   3c530:	beq	3c4fc <__assert_fail@plt+0x29d24>
   3c534:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c538:	mov	r2, #0
   3c53c:	mov	r0, fp
   3c540:	str	r2, [sp]
   3c544:	mov	r1, r8
   3c548:	add	r3, sp, #28
   3c54c:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c550:	cmp	r0, #0
   3c554:	str	r0, [sp, #20]
   3c558:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c55c:	cmp	r5, #0
   3c560:	beq	3c5f4 <__assert_fail@plt+0x29e1c>
   3c564:	ldr	r3, [r8]
   3c568:	ldr	r4, [r8, #12]
   3c56c:	ldr	r7, [r8, #8]
   3c570:	ldr	r3, [r3, #4]
   3c574:	cmp	r4, #0
   3c578:	ldrb	r3, [r3, #24]
   3c57c:	ble	3c5f4 <__assert_fail@plt+0x29e1c>
   3c580:	ldrb	r9, [r5]
   3c584:	sub	r7, r7, #4
   3c588:	str	r8, [sp, #16]
   3c58c:	mov	r8, r9
   3c590:	mov	r9, r3
   3c594:	b	3c5a0 <__assert_fail@plt+0x29dc8>
   3c598:	subs	r4, r4, #1
   3c59c:	beq	3cbd8 <__assert_fail@plt+0x2a400>
   3c5a0:	ldr	r6, [r7, #4]!
   3c5a4:	cmp	r9, #0
   3c5a8:	ldr	r0, [r6, #4]
   3c5ac:	ldrb	r2, [r0]
   3c5b0:	beq	3c5c0 <__assert_fail@plt+0x29de8>
   3c5b4:	cmp	r9, r2
   3c5b8:	ldrbeq	r2, [r0, #1]
   3c5bc:	addeq	r0, r0, #1
   3c5c0:	cmp	r8, r2
   3c5c4:	bne	3c598 <__assert_fail@plt+0x29dc0>
   3c5c8:	mov	r1, r5
   3c5cc:	bl	12178 <strcmp@plt>
   3c5d0:	cmp	r0, #0
   3c5d4:	bne	3c598 <__assert_fail@plt+0x29dc0>
   3c5d8:	ldr	r3, [r6, #20]
   3c5dc:	ldrd	r0, [r6, #8]
   3c5e0:	ldr	r8, [sp, #16]
   3c5e4:	ldrd	r2, [r3, #32]
   3c5e8:	adds	r6, r0, r2
   3c5ec:	adc	r7, r1, r3
   3c5f0:	strd	r6, [sp, #80]	; 0x50
   3c5f4:	ldrd	r6, [sp, #80]	; 0x50
   3c5f8:	mov	ip, #1
   3c5fc:	mov	r0, fp
   3c600:	mov	r1, r8
   3c604:	mov	r2, r5
   3c608:	ldr	r3, [sp, #20]
   3c60c:	strd	r6, [sp, #8]
   3c610:	str	ip, [sp]
   3c614:	bl	35f3c <__assert_fail@plt+0x23764>
   3c618:	cmp	r0, #0
   3c61c:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c620:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c624:	mov	r4, #0
   3c628:	add	r3, sp, #28
   3c62c:	mov	r2, r4
   3c630:	str	r4, [sp]
   3c634:	mov	r0, fp
   3c638:	mov	r1, r8
   3c63c:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c640:	subs	r2, r0, #0
   3c644:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c648:	ldrd	r0, [sp, #80]	; 0x50
   3c64c:	strd	r0, [sp]
   3c650:	subs	r0, r6, #70	; 0x46
   3c654:	rsbs	r3, r0, #0
   3c658:	mov	r1, r5
   3c65c:	adcs	r3, r3, r0
   3c660:	mov	r0, fp
   3c664:	bl	34434 <__assert_fail@plt+0x21c5c>
   3c668:	cmp	r0, r4
   3c66c:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c670:	mov	r5, r4
   3c674:	b	3c6a0 <__assert_fail@plt+0x29ec8>
   3c678:	str	r5, [sp]
   3c67c:	mov	r0, fp
   3c680:	mov	r1, r8
   3c684:	mov	r2, #0
   3c688:	add	r3, sp, #28
   3c68c:	add	ip, ip, #1
   3c690:	str	ip, [sp, #28]
   3c694:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c698:	cmp	r0, #0
   3c69c:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c6a0:	ldr	ip, [sp, #28]
   3c6a4:	ldrb	r3, [ip]
   3c6a8:	cmp	r3, #59	; 0x3b
   3c6ac:	beq	3c678 <__assert_fail@plt+0x29ea0>
   3c6b0:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c6b4:	mov	r2, #0
   3c6b8:	mov	r1, r8
   3c6bc:	str	r2, [sp]
   3c6c0:	mov	r0, fp
   3c6c4:	add	r3, sp, #28
   3c6c8:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c6cc:	subs	r2, r0, #0
   3c6d0:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c6d4:	ldrd	r6, [sp, #80]	; 0x50
   3c6d8:	mov	r0, fp
   3c6dc:	mov	r1, r5
   3c6e0:	strd	r6, [sp]
   3c6e4:	bl	34a94 <__assert_fail@plt+0x222bc>
   3c6e8:	cmp	r0, #0
   3c6ec:	bne	3bf14 <__assert_fail@plt+0x2973c>
   3c6f0:	b	3bd94 <__assert_fail@plt+0x295bc>
   3c6f4:	add	r3, sp, #32
   3c6f8:	mov	r2, r5
   3c6fc:	str	r3, [sp]
   3c700:	mov	r1, r8
   3c704:	mov	r0, fp
   3c708:	add	r3, sp, #28
   3c70c:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c710:	subs	r2, r0, #0
   3c714:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c718:	cmp	r5, #0
   3c71c:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3c720:	mov	r0, fp
   3c724:	mov	r1, r5
   3c728:	bl	352d4 <__assert_fail@plt+0x22afc>
   3c72c:	cmp	r0, #0
   3c730:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c734:	ldr	r3, [sp, #32]
   3c738:	cmp	r3, #0
   3c73c:	strne	r0, [r3]
   3c740:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c744:	mov	r2, #0
   3c748:	add	r3, sp, #28
   3c74c:	mov	r0, fp
   3c750:	str	r2, [sp]
   3c754:	mov	r1, r8
   3c758:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c75c:	subs	r3, r0, #0
   3c760:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c764:	ldrd	r6, [sp, #80]	; 0x50
   3c768:	mov	ip, #5
   3c76c:	mov	r0, fp
   3c770:	mov	r1, r8
   3c774:	mov	r2, r5
   3c778:	str	ip, [sp]
   3c77c:	strd	r6, [sp, #8]
   3c780:	bl	35f3c <__assert_fail@plt+0x23764>
   3c784:	cmp	r0, #0
   3c788:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c78c:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c790:	ldrb	r3, [r0, #2]
   3c794:	cmp	r3, #70	; 0x46
   3c798:	beq	3cbe4 <__assert_fail@plt+0x2a40c>
   3c79c:	mov	r2, #0
   3c7a0:	mov	r1, r8
   3c7a4:	str	r2, [sp]
   3c7a8:	mov	r0, fp
   3c7ac:	add	r3, sp, #28
   3c7b0:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c7b4:	mov	r2, r0
   3c7b8:	cmp	r2, #0
   3c7bc:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c7c0:	ldrd	r6, [sp, #80]	; 0x50
   3c7c4:	mov	r0, fp
   3c7c8:	mov	r1, r5
   3c7cc:	mov	r3, #1
   3c7d0:	strd	r6, [sp]
   3c7d4:	bl	34554 <__assert_fail@plt+0x21d7c>
   3c7d8:	cmp	r0, #0
   3c7dc:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c7e0:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c7e4:	mov	r2, #0
   3c7e8:	mov	r1, r8
   3c7ec:	str	r2, [sp]
   3c7f0:	mov	r0, fp
   3c7f4:	add	r3, sp, #28
   3c7f8:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c7fc:	subs	r2, r0, #0
   3c800:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c804:	ldrd	r6, [sp, #80]	; 0x50
   3c808:	mov	r0, fp
   3c80c:	mov	r1, r5
   3c810:	mov	r3, #3
   3c814:	strd	r6, [sp]
   3c818:	bl	34554 <__assert_fail@plt+0x21d7c>
   3c81c:	cmp	r0, #0
   3c820:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c824:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c828:	add	r3, r0, #3
   3c82c:	str	r3, [sp, #28]
   3c830:	ldrb	r3, [r0, #3]
   3c834:	cmp	r3, #110	; 0x6e
   3c838:	bne	3c320 <__assert_fail@plt+0x29b48>
   3c83c:	ldrb	r3, [r0, #4]
   3c840:	add	r2, r0, #4
   3c844:	str	r2, [sp, #28]
   3c848:	cmp	r3, #48	; 0x30
   3c84c:	bne	3c320 <__assert_fail@plt+0x29b48>
   3c850:	add	r0, r0, #5
   3c854:	str	r0, [sp, #28]
   3c858:	add	r0, r0, #1
   3c85c:	ldrb	r3, [r0, #-1]
   3c860:	cmp	r3, #59	; 0x3b
   3c864:	bne	3c854 <__assert_fail@plt+0x2a07c>
   3c868:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c86c:	mov	r2, #0
   3c870:	add	r3, sp, #28
   3c874:	mov	r0, fp
   3c878:	str	r2, [sp]
   3c87c:	mov	r1, r8
   3c880:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c884:	subs	r3, r0, #0
   3c888:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c88c:	ldrd	r6, [sp, #80]	; 0x50
   3c890:	mov	ip, #3
   3c894:	mov	r0, fp
   3c898:	mov	r1, r8
   3c89c:	mov	r2, r5
   3c8a0:	str	ip, [sp]
   3c8a4:	strd	r6, [sp, #8]
   3c8a8:	bl	35f3c <__assert_fail@plt+0x23764>
   3c8ac:	cmp	r0, #0
   3c8b0:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c8b4:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c8b8:	ldrb	r3, [r0, #2]
   3c8bc:	mov	r2, r5
   3c8c0:	mov	r1, r8
   3c8c4:	cmp	r3, #116	; 0x74
   3c8c8:	add	r3, sp, #32
   3c8cc:	addeq	r0, r0, #3
   3c8d0:	str	r3, [sp]
   3c8d4:	streq	r0, [sp, #28]
   3c8d8:	add	r3, sp, #28
   3c8dc:	mov	r0, fp
   3c8e0:	moveq	r6, #1
   3c8e4:	movne	r6, #0
   3c8e8:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c8ec:	subs	r2, r0, #0
   3c8f0:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c8f4:	cmp	r5, #0
   3c8f8:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3c8fc:	mov	r0, fp
   3c900:	mov	r1, r5
   3c904:	ldr	r4, [r8, #236]	; 0xec
   3c908:	bl	353cc <__assert_fail@plt+0x22bf4>
   3c90c:	subs	r9, r0, #0
   3c910:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c914:	ldr	r3, [sp, #32]
   3c918:	cmp	r3, #0
   3c91c:	strne	r9, [r3]
   3c920:	cmp	r4, #0
   3c924:	bne	3c980 <__assert_fail@plt+0x2a1a8>
   3c928:	ldr	r4, [r8, #232]	; 0xe8
   3c92c:	add	r7, r8, #232	; 0xe8
   3c930:	cmp	r4, #0
   3c934:	beq	3c980 <__assert_fail@plt+0x2a1a8>
   3c938:	ldrb	r8, [r5]
   3c93c:	b	3c950 <__assert_fail@plt+0x2a178>
   3c940:	mov	r7, r4
   3c944:	ldr	r4, [r4]
   3c948:	cmp	r4, #0
   3c94c:	beq	3c980 <__assert_fail@plt+0x2a1a8>
   3c950:	ldr	r0, [r4, #4]
   3c954:	ldrb	r3, [r0]
   3c958:	cmp	r3, r8
   3c95c:	bne	3c940 <__assert_fail@plt+0x2a168>
   3c960:	mov	r1, r5
   3c964:	bl	12178 <strcmp@plt>
   3c968:	cmp	r0, #0
   3c96c:	bne	3c940 <__assert_fail@plt+0x2a168>
   3c970:	str	r9, [r4, #12]
   3c974:	ldr	r3, [r7]
   3c978:	ldr	r3, [r3]
   3c97c:	str	r3, [r7]
   3c980:	cmp	r6, #0
   3c984:	beq	3bf14 <__assert_fail@plt+0x2973c>
   3c988:	mov	r0, fp
   3c98c:	mov	r1, r5
   3c990:	mov	r2, r9
   3c994:	bl	352d4 <__assert_fail@plt+0x22afc>
   3c998:	cmp	r0, #0
   3c99c:	bne	3c734 <__assert_fail@plt+0x29f5c>
   3c9a0:	b	3bd94 <__assert_fail@plt+0x295bc>
   3c9a4:	mov	r2, #0
   3c9a8:	add	r3, sp, #28
   3c9ac:	mov	r0, fp
   3c9b0:	str	r2, [sp]
   3c9b4:	mov	r1, r8
   3c9b8:	bl	38cbc <__assert_fail@plt+0x264e4>
   3c9bc:	subs	r3, r0, #0
   3c9c0:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c9c4:	ldrd	r6, [sp, #80]	; 0x50
   3c9c8:	mov	ip, #2
   3c9cc:	mov	r0, fp
   3c9d0:	mov	r1, r8
   3c9d4:	mov	r2, r5
   3c9d8:	str	ip, [sp]
   3c9dc:	strd	r6, [sp, #8]
   3c9e0:	bl	35f3c <__assert_fail@plt+0x23764>
   3c9e4:	cmp	r0, #0
   3c9e8:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3c9ec:	b	3bf14 <__assert_fail@plt+0x2973c>
   3c9f0:	ldrb	r3, [r0, #2]
   3c9f4:	cmp	r3, #61	; 0x3d
   3c9f8:	bne	3c320 <__assert_fail@plt+0x29b48>
   3c9fc:	add	r3, r0, #4
   3ca00:	str	r3, [sp, #28]
   3ca04:	ldrb	r2, [r0, #3]
   3ca08:	cmp	r2, #105	; 0x69
   3ca0c:	beq	3cc58 <__assert_fail@plt+0x2a480>
   3ca10:	cmp	r2, #114	; 0x72
   3ca14:	beq	3cc34 <__assert_fail@plt+0x2a45c>
   3ca18:	cmp	r2, #101	; 0x65
   3ca1c:	bne	3c320 <__assert_fail@plt+0x29b48>
   3ca20:	mov	r6, #0
   3ca24:	mov	r1, r8
   3ca28:	str	r6, [sp]
   3ca2c:	mov	r2, r6
   3ca30:	mov	r0, fp
   3ca34:	add	r3, sp, #28
   3ca38:	bl	38cbc <__assert_fail@plt+0x264e4>
   3ca3c:	subs	r7, r0, #0
   3ca40:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3ca44:	ldr	r0, [sp, #28]
   3ca48:	ldrb	r3, [r0]
   3ca4c:	cmp	r3, #44	; 0x2c
   3ca50:	bne	3c320 <__assert_fail@plt+0x29b48>
   3ca54:	mov	r1, r6
   3ca58:	mov	r2, #10
   3ca5c:	bl	12184 <strtol@plt>
   3ca60:	mov	r1, r5
   3ca64:	mov	r2, r7
   3ca68:	mov	r4, r0
   3ca6c:	asr	r5, r0, #31
   3ca70:	mov	r0, fp
   3ca74:	strd	r4, [sp]
   3ca78:	bl	34a30 <__assert_fail@plt+0x22258>
   3ca7c:	cmp	r0, r6
   3ca80:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3ca84:	b	3bf14 <__assert_fail@plt+0x2973c>
   3ca88:	mov	r2, #0
   3ca8c:	mov	r1, r8
   3ca90:	str	r2, [sp]
   3ca94:	mov	r0, fp
   3ca98:	add	r3, sp, #28
   3ca9c:	bl	38cbc <__assert_fail@plt+0x264e4>
   3caa0:	subs	r2, r0, #0
   3caa4:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3caa8:	ldrd	r6, [sp, #80]	; 0x50
   3caac:	mov	r0, fp
   3cab0:	mov	r1, r5
   3cab4:	mov	r3, #4
   3cab8:	strd	r6, [sp]
   3cabc:	bl	34554 <__assert_fail@plt+0x21d7c>
   3cac0:	cmp	r0, #0
   3cac4:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3cac8:	b	3bf14 <__assert_fail@plt+0x2973c>
   3cacc:	ldr	r1, [r8, #56]	; 0x38
   3cad0:	b	3bf68 <__assert_fail@plt+0x29790>
   3cad4:	ldrb	r3, [r4, #1]
   3cad8:	sub	r3, r3, #88	; 0x58
   3cadc:	cmp	r3, #30
   3cae0:	ldrls	pc, [pc, r3, lsl #2]
   3cae4:	b	3cb7c <__assert_fail@plt+0x2a3a4>
   3cae8:	strheq	ip, [r3], -r8
   3caec:	andeq	ip, r3, ip, ror fp
   3caf0:	andeq	ip, r3, ip, ror fp
   3caf4:	andeq	ip, r3, ip, ror fp
   3caf8:	andeq	ip, r3, ip, ror fp
   3cafc:	andeq	ip, r3, ip, ror fp
   3cb00:	andeq	ip, r3, ip, ror fp
   3cb04:	strheq	ip, [r3], -r8
   3cb08:	andeq	ip, r3, ip, ror fp
   3cb0c:	andeq	ip, r3, ip, ror fp
   3cb10:	andeq	ip, r3, ip, ror fp
   3cb14:	andeq	ip, r3, ip, ror fp
   3cb18:	andeq	ip, r3, ip, ror fp
   3cb1c:	andeq	ip, r3, r4, ror #22
   3cb20:	andeq	ip, r3, ip, ror fp
   3cb24:	andeq	ip, r3, ip, ror fp
   3cb28:	andeq	ip, r3, ip, ror fp
   3cb2c:	andeq	ip, r3, ip, ror fp
   3cb30:	andeq	ip, r3, ip, ror fp
   3cb34:	andeq	ip, r3, ip, ror fp
   3cb38:	andeq	ip, r3, ip, ror fp
   3cb3c:	andeq	ip, r3, ip, ror fp
   3cb40:	andeq	ip, r3, ip, ror fp
   3cb44:	andeq	ip, r3, ip, ror fp
   3cb48:	andeq	ip, r3, ip, ror fp
   3cb4c:	andeq	ip, r3, ip, ror fp
   3cb50:	andeq	ip, r3, ip, ror fp
   3cb54:	andeq	ip, r3, ip, ror fp
   3cb58:	andeq	ip, r3, r0, ror fp
   3cb5c:	andeq	ip, r3, ip, ror fp
   3cb60:	strheq	ip, [r3], -r8
   3cb64:	movw	r5, #40968	; 0xa008
   3cb68:	movt	r5, #5
   3cb6c:	b	3c0ec <__assert_fail@plt+0x29914>
   3cb70:	movw	r5, #40980	; 0xa014
   3cb74:	movt	r5, #5
   3cb78:	b	3c0ec <__assert_fail@plt+0x29914>
   3cb7c:	mov	r2, #5
   3cb80:	movw	r1, #41040	; 0xa050
   3cb84:	mov	r0, #0
   3cb88:	movt	r1, #5
   3cb8c:	bl	12298 <dcgettext@plt>
   3cb90:	mov	r1, r0
   3cb94:	mov	r0, r4
   3cb98:	bl	35ccc <__assert_fail@plt+0x234f4>
   3cb9c:	ldr	r0, [sp, #28]
   3cba0:	b	3c0b8 <__assert_fail@plt+0x298e0>
   3cba4:	mov	r0, r4
   3cba8:	bl	1237c <xstrdup@plt>
   3cbac:	str	r0, [r8, #16]
   3cbb0:	b	3bce4 <__assert_fail@plt+0x2950c>
   3cbb4:	ldr	r6, [sp, #80]	; 0x50
   3cbb8:	ldr	r5, [sp, #84]	; 0x54
   3cbbc:	b	3beac <__assert_fail@plt+0x296d4>
   3cbc0:	mov	r5, #0
   3cbc4:	b	3c0ec <__assert_fail@plt+0x29914>
   3cbc8:	mov	r0, r4
   3cbcc:	bl	1237c <xstrdup@plt>
   3cbd0:	str	r0, [r8, #16]
   3cbd4:	b	3bcec <__assert_fail@plt+0x29514>
   3cbd8:	ldr	r8, [sp, #16]
   3cbdc:	b	3c5f4 <__assert_fail@plt+0x29e1c>
   3cbe0:	bl	122b0 <__stack_chk_fail@plt>
   3cbe4:	add	r3, sp, #40	; 0x28
   3cbe8:	mov	r4, #0
   3cbec:	add	r0, r0, #3
   3cbf0:	mov	r1, r8
   3cbf4:	str	r0, [r3, #-12]!
   3cbf8:	mov	r2, r4
   3cbfc:	str	r4, [sp]
   3cc00:	mov	r0, fp
   3cc04:	bl	38cbc <__assert_fail@plt+0x264e4>
   3cc08:	subs	r1, r0, #0
   3cc0c:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3cc10:	mov	r2, r4
   3cc14:	mov	r3, r4
   3cc18:	mov	r0, fp
   3cc1c:	bl	34dbc <__assert_fail@plt+0x225e4>
   3cc20:	mov	r1, r0
   3cc24:	mov	r0, fp
   3cc28:	bl	34d6c <__assert_fail@plt+0x22594>
   3cc2c:	mov	r2, r0
   3cc30:	b	3c7b8 <__assert_fail@plt+0x29fe0>
   3cc34:	mov	r0, r3
   3cc38:	mov	r1, #0
   3cc3c:	bl	125c8 <strtod@plt>
   3cc40:	mov	r0, fp
   3cc44:	mov	r1, r5
   3cc48:	bl	349f0 <__assert_fail@plt+0x22218>
   3cc4c:	cmp	r0, #0
   3cc50:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3cc54:	b	3bf14 <__assert_fail@plt+0x2973c>
   3cc58:	mov	r0, r3
   3cc5c:	mov	r1, #0
   3cc60:	mov	r2, #10
   3cc64:	bl	12184 <strtol@plt>
   3cc68:	mov	r1, r5
   3cc6c:	mov	r2, r0
   3cc70:	asr	r3, r0, #31
   3cc74:	mov	r0, fp
   3cc78:	bl	349b8 <__assert_fail@plt+0x221e0>
   3cc7c:	cmp	r0, #0
   3cc80:	beq	3bd94 <__assert_fail@plt+0x295bc>
   3cc84:	b	3bf14 <__assert_fail@plt+0x2973c>
   3cc88:	mov	r0, #1
   3cc8c:	bx	lr
   3cc90:	mov	r0, #1
   3cc94:	bx	lr
   3cc98:	mov	r0, #1
   3cc9c:	bx	lr
   3cca0:	push	{r3, r4, r5, lr}
   3cca4:	mov	r4, r1
   3cca8:	mov	r5, r0
   3ccac:	add	r0, r1, #1
   3ccb0:	bl	12358 <xmalloc@plt>
   3ccb4:	mov	r2, r4
   3ccb8:	mov	r1, r5
   3ccbc:	bl	1222c <memcpy@plt>
   3ccc0:	mov	r2, #0
   3ccc4:	mov	r3, r0
   3ccc8:	strb	r2, [r3, r4]
   3cccc:	pop	{r3, r4, r5, pc}
   3ccd0:	push	{r4, r5, r6, r7, r8, lr}
   3ccd4:	mov	r6, r0
   3ccd8:	ldr	r4, [r0, #292]	; 0x124
   3ccdc:	mov	r5, r1
   3cce0:	mov	r7, r2
   3cce4:	cmp	r4, r1
   3cce8:	bhi	3cd6c <__assert_fail@plt+0x2a594>
   3ccec:	cmp	r4, #0
   3ccf0:	bne	3cd08 <__assert_fail@plt+0x2a530>
   3ccf4:	cmp	r1, #3
   3ccf8:	movls	r8, #64	; 0x40
   3ccfc:	movls	r4, #4
   3cd00:	bls	3cd18 <__assert_fail@plt+0x2a540>
   3cd04:	mov	r4, #4
   3cd08:	lsl	r4, r4, #1
   3cd0c:	cmp	r5, r4
   3cd10:	bcs	3cd08 <__assert_fail@plt+0x2a530>
   3cd14:	lsl	r8, r4, #4
   3cd18:	mov	r1, r8
   3cd1c:	ldr	r0, [r6, #296]	; 0x128
   3cd20:	bl	122c8 <xrealloc@plt>
   3cd24:	ldr	r3, [r6, #292]	; 0x124
   3cd28:	mov	r1, #0
   3cd2c:	rsb	r2, r3, r4
   3cd30:	lsl	r2, r2, #4
   3cd34:	str	r0, [r6, #296]	; 0x128
   3cd38:	add	r0, r0, r3, lsl #4
   3cd3c:	bl	12580 <memset@plt>
   3cd40:	ldr	r3, [r6, #292]	; 0x124
   3cd44:	ldr	r2, [r6, #296]	; 0x128
   3cd48:	add	r3, r2, r3, lsl #4
   3cd4c:	add	r1, r2, r8
   3cd50:	cmp	r1, r3
   3cd54:	movhi	r0, #0
   3cd58:	bls	3cd68 <__assert_fail@plt+0x2a590>
   3cd5c:	str	r0, [r3], #16
   3cd60:	cmp	r1, r3
   3cd64:	bhi	3cd5c <__assert_fail@plt+0x2a584>
   3cd68:	str	r4, [r6, #292]	; 0x124
   3cd6c:	cmp	r7, #0
   3cd70:	beq	3cd88 <__assert_fail@plt+0x2a5b0>
   3cd74:	ldr	r4, [r6, #296]	; 0x128
   3cd78:	add	r8, r4, r5, lsl #4
   3cd7c:	ldr	r7, [r4, r5, lsl #4]
   3cd80:	cmp	r7, #0
   3cd84:	beq	3cd90 <__assert_fail@plt+0x2a5b8>
   3cd88:	mov	r0, #1
   3cd8c:	pop	{r4, r5, r6, r7, r8, pc}
   3cd90:	mov	r0, #4
   3cd94:	bl	12358 <xmalloc@plt>
   3cd98:	mov	r2, r7
   3cd9c:	mov	r3, r0
   3cda0:	str	r0, [r8, #4]
   3cda4:	ldr	r0, [r6]
   3cda8:	str	r7, [r3]
   3cdac:	ldr	r1, [r8, #4]
   3cdb0:	bl	34bc0 <__assert_fail@plt+0x223e8>
   3cdb4:	str	r0, [r4, r5, lsl #4]
   3cdb8:	adds	r0, r0, #0
   3cdbc:	movne	r0, #1
   3cdc0:	pop	{r4, r5, r6, r7, r8, pc}
   3cdc4:	cmp	r0, #1
   3cdc8:	push	{r3, lr}
   3cdcc:	beq	3cdf0 <__assert_fail@plt+0x2a618>
   3cdd0:	bcc	3cde8 <__assert_fail@plt+0x2a610>
   3cdd4:	cmp	r0, #2
   3cdd8:	bne	3cde4 <__assert_fail@plt+0x2a60c>
   3cddc:	mov	r0, #1
   3cde0:	pop	{r3, pc}
   3cde4:	bl	12790 <abort@plt>
   3cde8:	mov	r0, #0
   3cdec:	pop	{r3, pc}
   3cdf0:	mov	r0, #2
   3cdf4:	pop	{r3, pc}
   3cdf8:	cmp	r0, #0
   3cdfc:	push	{r4, lr}
   3ce00:	mov	r4, r1
   3ce04:	sub	sp, sp, #8
   3ce08:	beq	3ce30 <__assert_fail@plt+0x2a658>
   3ce0c:	mov	r1, r4
   3ce10:	bl	12244 <bfd_hash_newfunc@plt>
   3ce14:	subs	r3, r0, #0
   3ce18:	movne	r0, r3
   3ce1c:	moveq	r0, r3
   3ce20:	movne	r2, #0
   3ce24:	strne	r2, [r3, #12]
   3ce28:	add	sp, sp, #8
   3ce2c:	pop	{r4, pc}
   3ce30:	mov	r0, r1
   3ce34:	mov	r1, #16
   3ce38:	str	r2, [sp, #4]
   3ce3c:	bl	12424 <bfd_hash_allocate@plt>
   3ce40:	ldr	r2, [sp, #4]
   3ce44:	cmp	r0, #0
   3ce48:	beq	3ce28 <__assert_fail@plt+0x2a650>
   3ce4c:	b	3ce0c <__assert_fail@plt+0x2a634>
   3ce50:	push	{lr}		; (str lr, [sp, #-4]!)
   3ce54:	movw	ip, #168	; 0xa8
   3ce58:	sub	sp, sp, #12
   3ce5c:	movt	ip, #7
   3ce60:	ldr	r3, [r0]
   3ce64:	movw	r2, #38032	; 0x9490
   3ce68:	str	r1, [sp]
   3ce6c:	movt	r2, #5
   3ce70:	ldr	r0, [ip]
   3ce74:	mov	r1, #1
   3ce78:	bl	125d4 <__fprintf_chk@plt>
   3ce7c:	add	sp, sp, #12
   3ce80:	pop	{pc}		; (ldr pc, [sp], #4)
   3ce84:	push	{r4, lr}
   3ce88:	subs	r4, r2, #0
   3ce8c:	sub	sp, sp, #16
   3ce90:	beq	3ced4 <__assert_fail@plt+0x2a6fc>
   3ce94:	ldr	r1, [r1]
   3ce98:	movw	ip, #168	; 0xa8
   3ce9c:	str	r3, [sp, #4]
   3cea0:	movt	ip, #7
   3cea4:	ldr	r3, [r0]
   3cea8:	rsb	r1, r1, r4
   3ceac:	str	r1, [sp]
   3ceb0:	movw	r2, #41732	; 0xa304
   3ceb4:	ldrb	lr, [r4]
   3ceb8:	movt	r2, #5
   3cebc:	ldr	r0, [ip]
   3cec0:	mov	r1, #1
   3cec4:	str	lr, [sp, #8]
   3cec8:	bl	125d4 <__fprintf_chk@plt>
   3cecc:	add	sp, sp, #16
   3ced0:	pop	{r4, pc}
   3ced4:	mov	r1, r3
   3ced8:	add	sp, sp, #16
   3cedc:	pop	{r4, lr}
   3cee0:	b	3ce50 <__assert_fail@plt+0x2a678>
   3cee4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cee8:	mov	r8, r2
   3ceec:	ldrd	r4, [sp, #40]	; 0x28
   3cef0:	mov	r9, r3
   3cef4:	and	r3, r2, r3
   3cef8:	and	r2, r4, r5
   3cefc:	cmn	r3, #1
   3cf00:	cmnne	r2, #1
   3cf04:	beq	3cfb0 <__assert_fail@plt+0x2a7d8>
   3cf08:	cmp	r9, r5
   3cf0c:	cmpeq	r8, r4
   3cf10:	beq	3cfb0 <__assert_fail@plt+0x2a7d8>
   3cf14:	cmp	r1, #0
   3cf18:	addne	sl, r0, #76	; 0x4c
   3cf1c:	addeq	sl, r0, #72	; 0x48
   3cf20:	ldr	fp, [sl]
   3cf24:	cmp	fp, #0
   3cf28:	beq	3cf58 <__assert_fail@plt+0x2a780>
   3cf2c:	ldrd	r6, [fp, #8]
   3cf30:	cmp	r5, r7
   3cf34:	cmpeq	r4, r6
   3cf38:	bcc	3cf4c <__assert_fail@plt+0x2a774>
   3cf3c:	ldrd	r2, [fp, #16]
   3cf40:	cmp	r9, r3
   3cf44:	cmpeq	r8, r2
   3cf48:	bls	3cfb8 <__assert_fail@plt+0x2a7e0>
   3cf4c:	ldr	fp, [fp]
   3cf50:	cmp	fp, #0
   3cf54:	bne	3cf2c <__assert_fail@plt+0x2a754>
   3cf58:	mov	r0, #24
   3cf5c:	bl	12358 <xmalloc@plt>
   3cf60:	mov	r1, #0
   3cf64:	mov	r2, #24
   3cf68:	mov	r6, r0
   3cf6c:	bl	12580 <memset@plt>
   3cf70:	ldr	r1, [sl]
   3cf74:	strd	r8, [r6, #8]
   3cf78:	cmp	r1, #0
   3cf7c:	strd	r4, [r6, #16]
   3cf80:	bne	3cf98 <__assert_fail@plt+0x2a7c0>
   3cf84:	b	3cfa8 <__assert_fail@plt+0x2a7d0>
   3cf88:	mov	sl, r1
   3cf8c:	ldr	r1, [r1]
   3cf90:	cmp	r1, #0
   3cf94:	beq	3cfa8 <__assert_fail@plt+0x2a7d0>
   3cf98:	ldrd	r2, [r1, #8]
   3cf9c:	cmp	r5, r3
   3cfa0:	cmpeq	r4, r2
   3cfa4:	bcs	3cf88 <__assert_fail@plt+0x2a7b0>
   3cfa8:	str	r1, [r6]
   3cfac:	str	r6, [sl]
   3cfb0:	mov	r0, #1
   3cfb4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cfb8:	ldr	r1, [fp]
   3cfbc:	cmp	r9, r7
   3cfc0:	cmpeq	r8, r6
   3cfc4:	strdcc	r8, [fp, #8]
   3cfc8:	cmp	r5, r3
   3cfcc:	cmpeq	r4, r2
   3cfd0:	strdhi	r4, [fp, #16]
   3cfd4:	cmp	r1, #0
   3cfd8:	beq	3cfb0 <__assert_fail@plt+0x2a7d8>
   3cfdc:	ldrd	r2, [fp, #16]
   3cfe0:	ldrd	r4, [r1, #8]
   3cfe4:	cmp	r3, r5
   3cfe8:	cmpeq	r2, r4
   3cfec:	bcs	3d008 <__assert_fail@plt+0x2a830>
   3cff0:	b	3cfb0 <__assert_fail@plt+0x2a7d8>
   3cff4:	ldrd	r2, [fp, #16]
   3cff8:	ldrd	r4, [r4, #8]
   3cffc:	cmp	r3, r5
   3d000:	cmpeq	r2, r4
   3d004:	bcc	3cfb0 <__assert_fail@plt+0x2a7d8>
   3d008:	ldrd	r4, [r1, #16]
   3d00c:	mov	r0, r1
   3d010:	cmp	r5, r3
   3d014:	cmpeq	r4, r2
   3d018:	strdhi	r4, [fp, #16]
   3d01c:	ldr	r4, [r1]
   3d020:	bl	121f0 <free@plt>
   3d024:	cmp	r4, #0
   3d028:	mov	r1, r4
   3d02c:	str	r4, [fp]
   3d030:	bne	3cff4 <__assert_fail@plt+0x2a81c>
   3d034:	b	3cfb0 <__assert_fail@plt+0x2a7d8>
   3d038:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   3d03c:	mov	r5, r0
   3d040:	mov	r0, #40	; 0x28
   3d044:	mov	r8, r1
   3d048:	mov	r7, r2
   3d04c:	mov	r9, r3
   3d050:	ldr	r6, [sp, #32]
   3d054:	bl	12358 <xmalloc@plt>
   3d058:	mov	r1, #0
   3d05c:	mov	r2, #40	; 0x28
   3d060:	mov	r4, r0
   3d064:	bl	12580 <memset@plt>
   3d068:	ldr	r2, [r5]
   3d06c:	and	r3, r9, #1
   3d070:	str	r8, [r4, #4]
   3d074:	bfi	r3, r6, #2, #1
   3d078:	str	r7, [r4, #8]
   3d07c:	mov	r0, #1
   3d080:	strb	r3, [r4, #36]	; 0x24
   3d084:	str	r2, [r4]
   3d088:	str	r4, [r5]
   3d08c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3d090:	push	{lr}		; (str lr, [sp, #-4]!)
   3d094:	sub	sp, sp, #12
   3d098:	mov	r3, #0
   3d09c:	mov	r1, #1
   3d0a0:	mov	r2, r3
   3d0a4:	str	r3, [sp]
   3d0a8:	add	r0, r0, #84	; 0x54
   3d0ac:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d0b0:	add	sp, sp, #12
   3d0b4:	pop	{pc}		; (ldr pc, [sp], #4)
   3d0b8:	push	{lr}		; (str lr, [sp, #-4]!)
   3d0bc:	sub	sp, sp, #12
   3d0c0:	mov	r3, #0
   3d0c4:	add	r0, r0, #84	; 0x54
   3d0c8:	mov	r1, r3
   3d0cc:	str	r3, [sp]
   3d0d0:	mov	r2, r3
   3d0d4:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d0d8:	add	sp, sp, #12
   3d0dc:	pop	{pc}		; (ldr pc, [sp], #4)
   3d0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d0e4:	movw	r6, #65176	; 0xfe98
   3d0e8:	movt	r6, #6
   3d0ec:	mov	sl, r3
   3d0f0:	cmp	r3, #11
   3d0f4:	sub	sp, sp, #36	; 0x24
   3d0f8:	ldr	r3, [r6]
   3d0fc:	mov	r7, r0
   3d100:	mov	r8, r1
   3d104:	mov	r5, r2
   3d108:	str	r3, [sp, #28]
   3d10c:	beq	3d244 <__assert_fail@plt+0x2aa6c>
   3d110:	cmp	r1, #0
   3d114:	movne	r3, #0
   3d118:	beq	3d324 <__assert_fail@plt+0x2ab4c>
   3d11c:	mov	r1, r8
   3d120:	add	r0, r7, #124	; 0x7c
   3d124:	mov	r2, #1
   3d128:	bl	124cc <bfd_hash_lookup@plt>
   3d12c:	subs	r9, r0, #0
   3d130:	beq	3d23c <__assert_fail@plt+0x2aa64>
   3d134:	ldr	fp, [r9, #12]
   3d138:	cmp	fp, #0
   3d13c:	beq	3d34c <__assert_fail@plt+0x2ab74>
   3d140:	ldr	r3, [fp, #4]
   3d144:	cmp	r3, r5
   3d148:	movne	r4, #0
   3d14c:	bne	3d160 <__assert_fail@plt+0x2a988>
   3d150:	b	3d214 <__assert_fail@plt+0x2aa3c>
   3d154:	ldr	r3, [fp, #4]
   3d158:	cmp	r3, r5
   3d15c:	beq	3d214 <__assert_fail@plt+0x2aa3c>
   3d160:	ldrb	r3, [fp, #40]	; 0x28
   3d164:	ldr	fp, [fp]
   3d168:	tst	r3, #4
   3d16c:	moveq	r4, #1
   3d170:	cmp	fp, #0
   3d174:	bne	3d154 <__assert_fail@plt+0x2a97c>
   3d178:	and	fp, r4, #1
   3d17c:	mov	r0, #48	; 0x30
   3d180:	bl	12358 <xmalloc@plt>
   3d184:	mov	r1, #0
   3d188:	mov	r2, #48	; 0x30
   3d18c:	mov	r8, r0
   3d190:	bl	12580 <memset@plt>
   3d194:	ldr	r3, [r9, #4]
   3d198:	mov	r2, #0
   3d19c:	ldr	r1, [r7, #88]	; 0x58
   3d1a0:	ldr	ip, [r9, #12]
   3d1a4:	ldrb	r0, [r8, #40]	; 0x28
   3d1a8:	add	lr, r1, #1
   3d1ac:	str	r3, [r8, #16]
   3d1b0:	mov	r3, r2
   3d1b4:	str	r5, [r8, #4]
   3d1b8:	bfi	r0, fp, #2, #1
   3d1bc:	str	r1, [r8, #8]
   3d1c0:	strb	r0, [r8, #40]	; 0x28
   3d1c4:	add	r0, r7, #84	; 0x54
   3d1c8:	str	lr, [r7, #88]	; 0x58
   3d1cc:	str	sl, [r8, #44]	; 0x2c
   3d1d0:	str	ip, [r8]
   3d1d4:	str	r8, [r9, #12]
   3d1d8:	str	r4, [sp]
   3d1dc:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d1e0:	cmp	r0, #0
   3d1e4:	beq	3d23c <__assert_fail@plt+0x2aa64>
   3d1e8:	ldr	r3, [r7, #84]	; 0x54
   3d1ec:	mov	r4, #1
   3d1f0:	ldr	r2, [r9, #4]
   3d1f4:	str	r2, [r3, #12]
   3d1f8:	ldr	r2, [sp, #28]
   3d1fc:	mov	r0, r4
   3d200:	ldr	r3, [r6]
   3d204:	cmp	r2, r3
   3d208:	bne	3d354 <__assert_fail@plt+0x2ab7c>
   3d20c:	add	sp, sp, #36	; 0x24
   3d210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d214:	ldrb	r3, [fp, #40]	; 0x28
   3d218:	add	r0, r7, #84	; 0x54
   3d21c:	ldr	r1, [fp, #8]
   3d220:	ubfx	ip, r3, #2, #1
   3d224:	ldr	r2, [fp, #12]
   3d228:	and	r3, r3, #1
   3d22c:	str	ip, [sp]
   3d230:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d234:	cmp	r0, #0
   3d238:	bne	3d2dc <__assert_fail@plt+0x2ab04>
   3d23c:	mov	r4, #0
   3d240:	b	3d1f8 <__assert_fail@plt+0x2aa20>
   3d244:	cmp	r1, #0
   3d248:	beq	3d358 <__assert_fail@plt+0x2ab80>
   3d24c:	ldr	r4, [r0, #152]	; 0x98
   3d250:	cmp	r4, #0
   3d254:	beq	3d280 <__assert_fail@plt+0x2aaa8>
   3d258:	ldr	r0, [r4, #12]
   3d25c:	cmp	r0, #0
   3d260:	beq	3d274 <__assert_fail@plt+0x2aa9c>
   3d264:	mov	r1, r8
   3d268:	bl	12178 <strcmp@plt>
   3d26c:	subs	r2, r0, #0
   3d270:	beq	3d308 <__assert_fail@plt+0x2ab30>
   3d274:	ldr	r4, [r4]
   3d278:	cmp	r4, #0
   3d27c:	bne	3d258 <__assert_fail@plt+0x2aa80>
   3d280:	mov	r0, #24
   3d284:	bl	12358 <xmalloc@plt>
   3d288:	mov	r1, #0
   3d28c:	mov	r2, #24
   3d290:	mov	r4, r0
   3d294:	bl	12580 <memset@plt>
   3d298:	ldr	r1, [r7, #88]	; 0x58
   3d29c:	mov	ip, #0
   3d2a0:	ldr	lr, [r7, #152]	; 0x98
   3d2a4:	mov	r2, ip
   3d2a8:	add	r3, r1, #1
   3d2ac:	add	r0, r7, #84	; 0x54
   3d2b0:	str	r1, [r4, #4]
   3d2b4:	str	r3, [r7, #88]	; 0x58
   3d2b8:	mov	r3, #1
   3d2bc:	str	r8, [r4, #12]
   3d2c0:	str	lr, [r4]
   3d2c4:	str	ip, [r4, #8]
   3d2c8:	str	r4, [r7, #152]	; 0x98
   3d2cc:	str	ip, [sp]
   3d2d0:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d2d4:	mov	r4, r0
   3d2d8:	b	3d1f8 <__assert_fail@plt+0x2aa20>
   3d2dc:	add	fp, fp, #8
   3d2e0:	ldr	ip, [r7, #84]	; 0x54
   3d2e4:	mov	r4, #1
   3d2e8:	ldm	fp!, {r0, r1, r2, r3}
   3d2ec:	add	ip, ip, #4
   3d2f0:	stmia	ip!, {r0, r1, r2, r3}
   3d2f4:	ldm	fp!, {r0, r1, r2, r3}
   3d2f8:	ldr	r5, [fp]
   3d2fc:	stmia	ip!, {r0, r1, r2, r3}
   3d300:	str	r5, [ip]
   3d304:	b	3d1f8 <__assert_fail@plt+0x2aa20>
   3d308:	ldr	r1, [r4, #4]
   3d30c:	add	r0, r7, #84	; 0x54
   3d310:	str	r2, [sp]
   3d314:	mov	r3, #1
   3d318:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d31c:	mov	r4, r0
   3d320:	b	3d1f8 <__assert_fail@plt+0x2aa20>
   3d324:	add	r0, sp, #8
   3d328:	str	r2, [sp]
   3d32c:	movw	r3, #41756	; 0xa31c
   3d330:	mov	r1, #1
   3d334:	movt	r3, #5
   3d338:	mov	r2, #20
   3d33c:	mov	r8, r0
   3d340:	bl	12568 <__sprintf_chk@plt>
   3d344:	mov	r3, #1
   3d348:	b	3d11c <__assert_fail@plt+0x2a944>
   3d34c:	mov	r4, fp
   3d350:	b	3d17c <__assert_fail@plt+0x2a9a4>
   3d354:	bl	122b0 <__stack_chk_fail@plt>
   3d358:	bl	12790 <abort@plt>
   3d35c:	sub	r3, r1, #4
   3d360:	push	{r4, r5, lr}
   3d364:	mov	r4, r1
   3d368:	sub	sp, sp, #12
   3d36c:	cmp	r3, #12
   3d370:	ldrls	pc, [pc, r3, lsl #2]
   3d374:	b	3d3e4 <__assert_fail@plt+0x2ac0c>
   3d378:	andeq	sp, r3, ip, asr #7
   3d37c:	andeq	sp, r3, r4, ror #7
   3d380:	andeq	sp, r3, r4, ror #7
   3d384:	andeq	sp, r3, r4, ror #7
   3d388:	andeq	sp, r3, ip, lsr #7
   3d38c:	andeq	sp, r3, r4, ror #7
   3d390:	andeq	sp, r3, r4, ror #7
   3d394:	andeq	sp, r3, r4, ror #7
   3d398:	ldrdeq	sp, [r3], -ip
   3d39c:	andeq	sp, r3, r4, ror #7
   3d3a0:	andeq	sp, r3, r4, ror #7
   3d3a4:	andeq	sp, r3, r4, ror #7
   3d3a8:	ldrdeq	sp, [r3], -r4
   3d3ac:	mov	r1, #11
   3d3b0:	mov	r3, #0
   3d3b4:	mov	r2, r4
   3d3b8:	str	r3, [sp]
   3d3bc:	add	r0, r0, #84	; 0x54
   3d3c0:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d3c4:	add	sp, sp, #12
   3d3c8:	pop	{r4, r5, pc}
   3d3cc:	mov	r1, #10
   3d3d0:	b	3d3b0 <__assert_fail@plt+0x2abd8>
   3d3d4:	mov	r1, #13
   3d3d8:	b	3d3b0 <__assert_fail@plt+0x2abd8>
   3d3dc:	mov	r1, #12
   3d3e0:	b	3d3b0 <__assert_fail@plt+0x2abd8>
   3d3e4:	movw	r3, #168	; 0xa8
   3d3e8:	movt	r3, #7
   3d3ec:	mov	r2, #5
   3d3f0:	movw	r1, #41768	; 0xa328
   3d3f4:	mov	r0, #0
   3d3f8:	movt	r1, #5
   3d3fc:	ldr	r5, [r3]
   3d400:	bl	12298 <dcgettext@plt>
   3d404:	mov	r3, r4
   3d408:	mov	r1, #1
   3d40c:	mov	r2, r0
   3d410:	mov	r0, r5
   3d414:	bl	125d4 <__fprintf_chk@plt>
   3d418:	mov	r0, #0
   3d41c:	add	sp, sp, #12
   3d420:	pop	{r4, r5, pc}
   3d424:	push	{r4, r5, lr}
   3d428:	mov	r4, r1
   3d42c:	sub	r1, r1, #1
   3d430:	sub	sp, sp, #12
   3d434:	mov	r3, r2
   3d438:	cmp	r1, #7
   3d43c:	ldrls	pc, [pc, r1, lsl #2]
   3d440:	b	3d4a4 <__assert_fail@plt+0x2accc>
   3d444:	andeq	sp, r3, ip, lsl #9
   3d448:	andeq	sp, r3, r4, ror #8
   3d44c:	andeq	sp, r3, r4, lsr #9
   3d450:	muleq	r3, ip, r4
   3d454:	andeq	sp, r3, r4, lsr #9
   3d458:	andeq	sp, r3, r4, lsr #9
   3d45c:	andeq	sp, r3, r4, lsr #9
   3d460:	muleq	r3, r4, r4
   3d464:	mov	r1, #4
   3d468:	cmp	r3, #0
   3d46c:	mov	ip, #0
   3d470:	addne	r1, r1, #1
   3d474:	mov	r2, r4
   3d478:	str	ip, [sp]
   3d47c:	add	r0, r0, #84	; 0x54
   3d480:	bl	3d038 <__assert_fail@plt+0x2a860>
   3d484:	add	sp, sp, #12
   3d488:	pop	{r4, r5, pc}
   3d48c:	mov	r1, #2
   3d490:	b	3d468 <__assert_fail@plt+0x2ac90>
   3d494:	mov	r1, #8
   3d498:	b	3d468 <__assert_fail@plt+0x2ac90>
   3d49c:	mov	r1, #6
   3d4a0:	b	3d468 <__assert_fail@plt+0x2ac90>
   3d4a4:	movw	r3, #168	; 0xa8
   3d4a8:	movt	r3, #7
   3d4ac:	mov	r2, #5
   3d4b0:	movw	r1, #41808	; 0xa350
   3d4b4:	mov	r0, #0
   3d4b8:	movt	r1, #5
   3d4bc:	ldr	r5, [r3]
   3d4c0:	bl	12298 <dcgettext@plt>
   3d4c4:	mov	r3, r4
   3d4c8:	mov	r1, #1
   3d4cc:	mov	r2, r0
   3d4d0:	mov	r0, r5
   3d4d4:	bl	125d4 <__fprintf_chk@plt>
   3d4d8:	mov	r0, #0
   3d4dc:	add	sp, sp, #12
   3d4e0:	pop	{r4, r5, pc}
   3d4e4:	mov	r1, #4
   3d4e8:	mov	r2, #1
   3d4ec:	b	3d424 <__assert_fail@plt+0x2ac4c>
   3d4f0:	mov	r2, #1
   3d4f4:	b	3d424 <__assert_fail@plt+0x2ac4c>
   3d4f8:	ldr	r3, [r1]
   3d4fc:	movw	ip, #489	; 0x1e9
   3d500:	push	{r4, r5, r6, lr}
   3d504:	mov	r4, r1
   3d508:	ldr	r1, [r3, #4]
   3d50c:	mov	r6, r0
   3d510:	mov	r5, r2
   3d514:	cmp	r1, ip
   3d518:	bls	3d558 <__assert_fail@plt+0x2ad80>
   3d51c:	mov	r0, #500	; 0x1f4
   3d520:	bl	12358 <xmalloc@plt>
   3d524:	ldr	r2, [r6]
   3d528:	mov	r3, #0
   3d52c:	mov	r1, #0
   3d530:	str	r3, [r0]
   3d534:	str	r3, [r0, #4]
   3d538:	ldr	r3, [r2]
   3d53c:	cmp	r3, #0
   3d540:	streq	r0, [r2]
   3d544:	ldrne	r3, [r2, #4]
   3d548:	strne	r0, [r3]
   3d54c:	mov	r3, r0
   3d550:	str	r0, [r2, #4]
   3d554:	str	r0, [r4]
   3d558:	add	r3, r3, r1
   3d55c:	mov	r0, #1
   3d560:	strb	r5, [r3, #8]
   3d564:	ldr	r3, [r4]
   3d568:	ldr	r2, [r3, #4]
   3d56c:	add	r2, r2, r0
   3d570:	str	r2, [r3, #4]
   3d574:	pop	{r4, r5, r6, pc}
   3d578:	push	{r3, r4, r5, lr}
   3d57c:	mov	r4, r0
   3d580:	ldr	r3, [r0, #12]
   3d584:	movw	r2, #489	; 0x1e9
   3d588:	mov	r5, r1
   3d58c:	ldr	r0, [r3, #4]
   3d590:	cmp	r0, r2
   3d594:	bhi	3d5f4 <__assert_fail@plt+0x2ae1c>
   3d598:	add	r2, r3, r0
   3d59c:	asr	r1, r1, #8
   3d5a0:	add	r0, r0, #1
   3d5a4:	str	r0, [r3, #4]
   3d5a8:	strb	r1, [r2, #8]
   3d5ac:	ldr	r3, [r4, #12]
   3d5b0:	movw	r1, #489	; 0x1e9
   3d5b4:	ldr	r2, [r3, #4]
   3d5b8:	cmp	r2, r1
   3d5bc:	bhi	3d5d8 <__assert_fail@plt+0x2ae00>
   3d5c0:	add	r1, r3, r2
   3d5c4:	mov	r0, #1
   3d5c8:	add	r2, r2, #1
   3d5cc:	str	r2, [r3, #4]
   3d5d0:	strb	r5, [r1, #8]
   3d5d4:	pop	{r3, r4, r5, pc}
   3d5d8:	uxtb	r2, r5
   3d5dc:	add	r0, r4, #8
   3d5e0:	add	r1, r4, #12
   3d5e4:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d5e8:	adds	r0, r0, #0
   3d5ec:	movne	r0, #1
   3d5f0:	pop	{r3, r4, r5, pc}
   3d5f4:	add	r0, r4, #8
   3d5f8:	add	r1, r4, #12
   3d5fc:	asr	r2, r5, #8
   3d600:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d604:	cmp	r0, #0
   3d608:	bne	3d5ac <__assert_fail@plt+0x2add4>
   3d60c:	pop	{r3, r4, r5, pc}
   3d610:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d614:	mov	r9, r0
   3d618:	mov	r0, r1
   3d61c:	mov	r4, r1
   3d620:	bl	124e4 <strlen@plt>
   3d624:	cmp	r0, #127	; 0x7f
   3d628:	mov	r5, r0
   3d62c:	bhi	3d6c0 <__assert_fail@plt+0x2aee8>
   3d630:	ldr	r3, [r9, #12]
   3d634:	movw	r1, #489	; 0x1e9
   3d638:	ldr	r2, [r3, #4]
   3d63c:	cmp	r2, r1
   3d640:	bhi	3d770 <__assert_fail@plt+0x2af98>
   3d644:	add	r1, r3, r2
   3d648:	add	r2, r2, #1
   3d64c:	str	r2, [r3, #4]
   3d650:	strb	r5, [r1, #8]
   3d654:	ldrb	r2, [r4]
   3d658:	cmp	r2, #0
   3d65c:	addne	r4, r4, #1
   3d660:	addne	r8, r9, #8
   3d664:	addne	r7, r9, #12
   3d668:	movwne	sl, #489	; 0x1e9
   3d66c:	bne	3d68c <__assert_fail@plt+0x2aeb4>
   3d670:	b	3d768 <__assert_fail@plt+0x2af90>
   3d674:	str	r6, [ip, #4]
   3d678:	ldrb	r3, [r4, #-1]
   3d67c:	strb	r3, [r5, #8]
   3d680:	ldrb	r2, [r4], #1
   3d684:	cmp	r2, #0
   3d688:	beq	3d768 <__assert_fail@plt+0x2af90>
   3d68c:	ldr	ip, [r9, #12]
   3d690:	ldr	r3, [ip, #4]
   3d694:	cmp	r3, sl
   3d698:	add	r6, r3, #1
   3d69c:	add	r5, ip, r3
   3d6a0:	bls	3d674 <__assert_fail@plt+0x2ae9c>
   3d6a4:	mov	r0, r8
   3d6a8:	mov	r1, r7
   3d6ac:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d6b0:	cmp	r0, #0
   3d6b4:	bne	3d680 <__assert_fail@plt+0x2aea8>
   3d6b8:	mov	r0, #0
   3d6bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d6c0:	cmp	r0, #255	; 0xff
   3d6c4:	bhi	3d720 <__assert_fail@plt+0x2af48>
   3d6c8:	ldr	r3, [r9, #12]
   3d6cc:	movw	r1, #489	; 0x1e9
   3d6d0:	ldr	r2, [r3, #4]
   3d6d4:	cmp	r2, r1
   3d6d8:	bhi	3d790 <__assert_fail@plt+0x2afb8>
   3d6dc:	add	r1, r3, r2
   3d6e0:	mvn	r0, #33	; 0x21
   3d6e4:	add	r2, r2, #1
   3d6e8:	str	r2, [r3, #4]
   3d6ec:	strb	r0, [r1, #8]
   3d6f0:	ldr	r3, [r9, #12]
   3d6f4:	movw	r1, #489	; 0x1e9
   3d6f8:	ldr	r2, [r3, #4]
   3d6fc:	cmp	r2, r1
   3d700:	bls	3d644 <__assert_fail@plt+0x2ae6c>
   3d704:	mov	r2, r5
   3d708:	add	r0, r9, #8
   3d70c:	add	r1, r9, #12
   3d710:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d714:	cmp	r0, #0
   3d718:	bne	3d654 <__assert_fail@plt+0x2ae7c>
   3d71c:	b	3d6b8 <__assert_fail@plt+0x2aee0>
   3d720:	cmp	r0, #65536	; 0x10000
   3d724:	bcs	3d7ac <__assert_fail@plt+0x2afd4>
   3d728:	ldr	r3, [r9, #12]
   3d72c:	movw	r1, #489	; 0x1e9
   3d730:	ldr	r2, [r3, #4]
   3d734:	cmp	r2, r1
   3d738:	bhi	3d7e4 <__assert_fail@plt+0x2b00c>
   3d73c:	add	r1, r3, r2
   3d740:	mvn	r0, #32
   3d744:	add	r2, r2, #1
   3d748:	str	r2, [r3, #4]
   3d74c:	strb	r0, [r1, #8]
   3d750:	mov	r1, r5
   3d754:	mov	r0, r9
   3d758:	bl	3d578 <__assert_fail@plt+0x2ada0>
   3d75c:	cmp	r0, #0
   3d760:	bne	3d654 <__assert_fail@plt+0x2ae7c>
   3d764:	b	3d6b8 <__assert_fail@plt+0x2aee0>
   3d768:	mov	r0, #1
   3d76c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d770:	mov	r2, r0
   3d774:	add	r1, r9, #12
   3d778:	add	r0, r9, #8
   3d77c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d780:	cmp	r0, #0
   3d784:	bne	3d654 <__assert_fail@plt+0x2ae7c>
   3d788:	mov	r0, #0
   3d78c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d790:	add	r0, r9, #8
   3d794:	add	r1, r9, #12
   3d798:	mov	r2, #222	; 0xde
   3d79c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d7a0:	cmp	r0, #0
   3d7a4:	bne	3d6f0 <__assert_fail@plt+0x2af18>
   3d7a8:	b	3d6b8 <__assert_fail@plt+0x2aee0>
   3d7ac:	movw	r3, #168	; 0xa8
   3d7b0:	movt	r3, #7
   3d7b4:	mov	r2, #5
   3d7b8:	movw	r1, #41848	; 0xa378
   3d7bc:	mov	r0, #0
   3d7c0:	movt	r1, #5
   3d7c4:	ldr	r4, [r3]
   3d7c8:	bl	12298 <dcgettext@plt>
   3d7cc:	mov	r3, r5
   3d7d0:	mov	r1, #1
   3d7d4:	mov	r2, r0
   3d7d8:	mov	r0, r4
   3d7dc:	bl	125d4 <__fprintf_chk@plt>
   3d7e0:	b	3d6b8 <__assert_fail@plt+0x2aee0>
   3d7e4:	add	r0, r9, #8
   3d7e8:	add	r1, r9, #12
   3d7ec:	mov	r2, #223	; 0xdf
   3d7f0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d7f4:	cmp	r0, #0
   3d7f8:	bne	3d750 <__assert_fail@plt+0x2af78>
   3d7fc:	b	3d6b8 <__assert_fail@plt+0x2aee0>
   3d800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d804:	movw	r9, #65176	; 0xfe98
   3d808:	movt	r9, #6
   3d80c:	mov	r7, r3
   3d810:	sub	sp, sp, #32
   3d814:	mov	r6, r2
   3d818:	ldr	r3, [r9]
   3d81c:	cmp	r7, #0
   3d820:	cmpeq	r6, #127	; 0x7f
   3d824:	mov	sl, r0
   3d828:	str	r3, [sp, #28]
   3d82c:	bls	3d904 <__assert_fail@plt+0x2b12c>
   3d830:	add	r2, sp, #27
   3d834:	mov	r4, r6
   3d838:	mov	r5, r7
   3d83c:	lsr	r3, r4, #8
   3d840:	lsr	ip, r5, #8
   3d844:	orr	r3, r3, r5, lsl #24
   3d848:	mov	r8, r2
   3d84c:	mov	r5, ip
   3d850:	strb	r4, [r2], #-1
   3d854:	mov	r4, r3
   3d858:	orrs	r3, r4, r5
   3d85c:	bne	3d83c <__assert_fail@plt+0x2b064>
   3d860:	add	r4, sp, #28
   3d864:	rsb	r4, r8, r4
   3d868:	cmp	r4, #8
   3d86c:	bhi	3d958 <__assert_fail@plt+0x2b180>
   3d870:	ldr	r3, [sl, #12]
   3d874:	movw	r1, #489	; 0x1e9
   3d878:	ldr	r2, [r3, #4]
   3d87c:	cmp	r2, r1
   3d880:	bhi	3d9bc <__assert_fail@plt+0x2b1e4>
   3d884:	add	r1, r3, r2
   3d888:	sub	r0, r4, #128	; 0x80
   3d88c:	add	r2, r2, #1
   3d890:	str	r2, [r3, #4]
   3d894:	strb	r0, [r1, #8]
   3d898:	cmp	r4, #0
   3d89c:	addne	r8, r8, #1
   3d8a0:	addne	r6, sl, #8
   3d8a4:	addne	r5, sl, #12
   3d8a8:	movwne	r7, #489	; 0x1e9
   3d8ac:	bne	3d8d4 <__assert_fail@plt+0x2b0fc>
   3d8b0:	b	3d9b4 <__assert_fail@plt+0x2b1dc>
   3d8b4:	add	r1, r3, #1
   3d8b8:	str	r1, [r2, #4]
   3d8bc:	ldrb	r1, [r8, #-1]
   3d8c0:	add	r3, r2, r3
   3d8c4:	strb	r1, [r3, #8]
   3d8c8:	subs	r4, r4, #1
   3d8cc:	add	r8, r8, #1
   3d8d0:	beq	3d9b4 <__assert_fail@plt+0x2b1dc>
   3d8d4:	ldr	r2, [sl, #12]
   3d8d8:	ldr	r3, [r2, #4]
   3d8dc:	cmp	r3, r7
   3d8e0:	bls	3d8b4 <__assert_fail@plt+0x2b0dc>
   3d8e4:	mov	r0, r6
   3d8e8:	mov	r1, r5
   3d8ec:	ldrb	r2, [r8, #-1]
   3d8f0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d8f4:	cmp	r0, #0
   3d8f8:	bne	3d8c8 <__assert_fail@plt+0x2b0f0>
   3d8fc:	mov	r0, #0
   3d900:	b	3d92c <__assert_fail@plt+0x2b154>
   3d904:	ldr	r3, [r0, #12]
   3d908:	movw	r1, #489	; 0x1e9
   3d90c:	ldr	r2, [r3, #4]
   3d910:	cmp	r2, r1
   3d914:	bhi	3d944 <__assert_fail@plt+0x2b16c>
   3d918:	add	r1, r3, r2
   3d91c:	mov	r0, #1
   3d920:	add	r2, r2, #1
   3d924:	str	r2, [r3, #4]
   3d928:	strb	r6, [r1, #8]
   3d92c:	ldr	r2, [sp, #28]
   3d930:	ldr	r3, [r9]
   3d934:	cmp	r2, r3
   3d938:	bne	3d9dc <__assert_fail@plt+0x2b204>
   3d93c:	add	sp, sp, #32
   3d940:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d944:	mov	r2, r6
   3d948:	add	r1, sl, #12
   3d94c:	add	r0, r0, #8
   3d950:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d954:	b	3d92c <__assert_fail@plt+0x2b154>
   3d958:	movw	r4, #168	; 0xa8
   3d95c:	movt	r4, #7
   3d960:	mov	r2, #5
   3d964:	movw	r1, #41884	; 0xa39c
   3d968:	mov	r0, #0
   3d96c:	movt	r1, #5
   3d970:	ldr	r5, [r4]
   3d974:	bl	12298 <dcgettext@plt>
   3d978:	mov	r1, #1
   3d97c:	mov	r2, r0
   3d980:	mov	r0, r5
   3d984:	bl	125d4 <__fprintf_chk@plt>
   3d988:	ldr	r0, [r4]
   3d98c:	mov	r1, #1
   3d990:	strd	r6, [sp]
   3d994:	movw	r2, #38020	; 0x9484
   3d998:	movt	r2, #5
   3d99c:	bl	125d4 <__fprintf_chk@plt>
   3d9a0:	ldr	r1, [r4]
   3d9a4:	mov	r0, #10
   3d9a8:	bl	12694 <fputc@plt>
   3d9ac:	mov	r0, #0
   3d9b0:	b	3d92c <__assert_fail@plt+0x2b154>
   3d9b4:	mov	r0, #1
   3d9b8:	b	3d92c <__assert_fail@plt+0x2b154>
   3d9bc:	add	r0, sl, #8
   3d9c0:	add	r1, sl, #12
   3d9c4:	add	r2, r4, #128	; 0x80
   3d9c8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3d9cc:	cmp	r0, #0
   3d9d0:	bne	3d898 <__assert_fail@plt+0x2b0c0>
   3d9d4:	mov	r0, #0
   3d9d8:	b	3d92c <__assert_fail@plt+0x2b154>
   3d9dc:	bl	122b0 <__stack_chk_fail@plt>
   3d9e0:	push	{r4, r5, r6, r7, r8, lr}
   3d9e4:	mov	r8, r0
   3d9e8:	ldr	r6, [r0, #48]	; 0x30
   3d9ec:	sub	sp, sp, #8
   3d9f0:	mov	r4, r2
   3d9f4:	mov	r5, r3
   3d9f8:	cmp	r6, #0
   3d9fc:	add	r7, r0, #48	; 0x30
   3da00:	beq	3dadc <__assert_fail@plt+0x2b304>
   3da04:	ldr	r3, [r0, #52]	; 0x34
   3da08:	movw	r1, #489	; 0x1e9
   3da0c:	ldr	r2, [r3, #4]
   3da10:	str	r3, [r0, #12]
   3da14:	cmp	r2, r1
   3da18:	str	r7, [r0, #8]
   3da1c:	bhi	3dac0 <__assert_fail@plt+0x2b2e8>
   3da20:	add	r1, r3, r2
   3da24:	mvn	r0, #6
   3da28:	add	r2, r2, #1
   3da2c:	str	r2, [r3, #4]
   3da30:	strb	r0, [r1, #8]
   3da34:	subs	r2, r4, #1
   3da38:	mov	r0, r8
   3da3c:	sbc	r3, r5, #0
   3da40:	bl	3d800 <__assert_fail@plt+0x2b028>
   3da44:	cmp	r0, #0
   3da48:	bne	3da58 <__assert_fail@plt+0x2b280>
   3da4c:	mov	r0, #0
   3da50:	add	sp, sp, #8
   3da54:	pop	{r4, r5, r6, r7, r8, pc}
   3da58:	ldr	r3, [r8, #80]	; 0x50
   3da5c:	cmp	r3, #0
   3da60:	beq	3db08 <__assert_fail@plt+0x2b330>
   3da64:	ldr	r2, [r3]
   3da68:	mov	r0, r3
   3da6c:	ldrd	r6, [r3, #8]
   3da70:	str	r2, [r8, #80]	; 0x50
   3da74:	bl	121f0 <free@plt>
   3da78:	mov	r2, r6
   3da7c:	mov	r3, r7
   3da80:	strd	r4, [sp]
   3da84:	mov	r0, r8
   3da88:	mov	r1, #0
   3da8c:	bl	3cee4 <__assert_fail@plt+0x2a70c>
   3da90:	cmp	r0, #0
   3da94:	beq	3da4c <__assert_fail@plt+0x2b274>
   3da98:	ldrd	r2, [r8, #232]	; 0xe8
   3da9c:	mov	r0, #1
   3daa0:	ldr	r1, [r8, #172]	; 0xac
   3daa4:	cmp	r5, r3
   3daa8:	cmpeq	r4, r2
   3daac:	strdhi	r4, [r8, #232]	; 0xe8
   3dab0:	sub	r3, r1, #1
   3dab4:	str	r3, [r8, #172]	; 0xac
   3dab8:	add	sp, sp, #8
   3dabc:	pop	{r4, r5, r6, r7, r8, pc}
   3dac0:	add	r0, r0, #8
   3dac4:	add	r1, r8, #12
   3dac8:	mov	r2, #249	; 0xf9
   3dacc:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3dad0:	cmp	r0, #0
   3dad4:	bne	3da34 <__assert_fail@plt+0x2b25c>
   3dad8:	b	3da4c <__assert_fail@plt+0x2b274>
   3dadc:	mov	r0, #500	; 0x1f4
   3dae0:	bl	12358 <xmalloc@plt>
   3dae4:	mov	r2, r6
   3dae8:	str	r6, [r0]
   3daec:	mov	r3, r0
   3daf0:	str	r6, [r0, #4]
   3daf4:	str	r0, [r8, #48]	; 0x30
   3daf8:	str	r0, [r8, #52]	; 0x34
   3dafc:	str	r0, [r8, #12]
   3db00:	str	r7, [r8, #8]
   3db04:	b	3da20 <__assert_fail@plt+0x2b248>
   3db08:	movw	r0, #41912	; 0xa3b8
   3db0c:	movw	r1, #41948	; 0xa3dc
   3db10:	movw	r3, #41120	; 0xa0a0
   3db14:	movt	r0, #5
   3db18:	movt	r1, #5
   3db1c:	movw	r2, #4420	; 0x1144
   3db20:	movt	r3, #5
   3db24:	bl	127d8 <__assert_fail@plt>
   3db28:	push	{r3, r4, r5, r6, r7, lr}
   3db2c:	mov	r5, r0
   3db30:	ldr	r4, [r0, #84]	; 0x54
   3db34:	cmp	r4, #0
   3db38:	beq	3dd18 <__assert_fail@plt+0x2b540>
   3db3c:	cmp	r1, #0
   3db40:	beq	3db90 <__assert_fail@plt+0x2b3b8>
   3db44:	ldr	r3, [r4, #16]
   3db48:	cmp	r3, #0
   3db4c:	beq	3db90 <__assert_fail@plt+0x2b3b8>
   3db50:	ldrb	r2, [r4, #36]	; 0x24
   3db54:	tst	r2, #4
   3db58:	bne	3dbac <__assert_fail@plt+0x2b3d4>
   3db5c:	ldr	r6, [r0, #24]
   3db60:	cmp	r6, #0
   3db64:	addne	r2, r0, #24
   3db68:	beq	3dc30 <__assert_fail@plt+0x2b458>
   3db6c:	cmp	r3, #0
   3db70:	beq	3db90 <__assert_fail@plt+0x2b3b8>
   3db74:	ldr	r1, [r2]
   3db78:	cmp	r1, #0
   3db7c:	streq	r3, [r2]
   3db80:	ldrne	r1, [r2, #4]
   3db84:	strne	r3, [r1]
   3db88:	ldr	r3, [r4, #20]
   3db8c:	str	r3, [r2, #4]
   3db90:	ldr	r3, [r4]
   3db94:	mov	r0, r4
   3db98:	ldr	r4, [r4, #4]
   3db9c:	str	r3, [r5, #84]	; 0x54
   3dba0:	bl	121f0 <free@plt>
   3dba4:	mov	r0, r4
   3dba8:	pop	{r3, r4, r5, r6, r7, pc}
   3dbac:	ldr	r6, [r0, #40]	; 0x28
   3dbb0:	cmp	r6, #0
   3dbb4:	addne	r2, r0, #40	; 0x28
   3dbb8:	bne	3db6c <__assert_fail@plt+0x2b394>
   3dbbc:	mov	r0, #500	; 0x1f4
   3dbc0:	add	r7, r5, #40	; 0x28
   3dbc4:	bl	12358 <xmalloc@plt>
   3dbc8:	mvn	r3, #7
   3dbcc:	mov	r2, #1
   3dbd0:	movw	ip, #489	; 0x1e9
   3dbd4:	str	r6, [r0]
   3dbd8:	str	r0, [r5, #12]
   3dbdc:	str	r0, [r5, #40]	; 0x28
   3dbe0:	str	r0, [r5, #44]	; 0x2c
   3dbe4:	str	r7, [r5, #8]
   3dbe8:	strb	r3, [r0, #8]
   3dbec:	ldr	r3, [r5, #12]
   3dbf0:	str	r2, [r0, #4]
   3dbf4:	ldr	r1, [r3, #4]
   3dbf8:	cmp	r1, ip
   3dbfc:	bhi	3dce4 <__assert_fail@plt+0x2b50c>
   3dc00:	add	r0, r3, r1
   3dc04:	add	r1, r1, #1
   3dc08:	str	r1, [r3, #4]
   3dc0c:	strb	r2, [r0, #8]
   3dc10:	mov	r0, r5
   3dc14:	mov	r2, #0
   3dc18:	mov	r3, #0
   3dc1c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3dc20:	cmp	r0, #0
   3dc24:	bne	3dcc4 <__assert_fail@plt+0x2b4ec>
   3dc28:	mov	r0, #0
   3dc2c:	pop	{r3, r4, r5, r6, r7, pc}
   3dc30:	mov	r0, #500	; 0x1f4
   3dc34:	add	r7, r5, #24
   3dc38:	bl	12358 <xmalloc@plt>
   3dc3c:	mvn	r3, #7
   3dc40:	mov	r1, #1
   3dc44:	movw	r2, #489	; 0x1e9
   3dc48:	str	r6, [r0]
   3dc4c:	str	r0, [r5, #12]
   3dc50:	str	r0, [r5, #24]
   3dc54:	str	r0, [r5, #28]
   3dc58:	str	r7, [r5, #8]
   3dc5c:	strb	r3, [r0, #8]
   3dc60:	ldr	r3, [r5, #12]
   3dc64:	str	r1, [r0, #4]
   3dc68:	ldr	r1, [r3, #4]
   3dc6c:	cmp	r1, r2
   3dc70:	bhi	3dcfc <__assert_fail@plt+0x2b524>
   3dc74:	add	r2, r3, r1
   3dc78:	mov	r0, #2
   3dc7c:	add	r1, r1, #1
   3dc80:	str	r1, [r3, #4]
   3dc84:	strb	r0, [r2, #8]
   3dc88:	mov	r0, r5
   3dc8c:	mov	r2, #0
   3dc90:	mov	r3, #0
   3dc94:	bl	3d800 <__assert_fail@plt+0x2b028>
   3dc98:	cmp	r0, #0
   3dc9c:	beq	3dc28 <__assert_fail@plt+0x2b450>
   3dca0:	movw	r1, #11856	; 0x2e50
   3dca4:	mov	r0, r5
   3dca8:	movt	r1, #5
   3dcac:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3dcb0:	cmp	r0, #0
   3dcb4:	beq	3dc28 <__assert_fail@plt+0x2b450>
   3dcb8:	ldr	r3, [r4, #16]
   3dcbc:	mov	r2, r7
   3dcc0:	b	3db6c <__assert_fail@plt+0x2b394>
   3dcc4:	mov	r0, r5
   3dcc8:	ldr	r1, [r5, #20]
   3dccc:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3dcd0:	cmp	r0, #0
   3dcd4:	beq	3dc28 <__assert_fail@plt+0x2b450>
   3dcd8:	mov	r2, r7
   3dcdc:	ldr	r3, [r4, #16]
   3dce0:	b	3db6c <__assert_fail@plt+0x2b394>
   3dce4:	add	r0, r5, #8
   3dce8:	add	r1, r5, #12
   3dcec:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3dcf0:	cmp	r0, #0
   3dcf4:	bne	3dc10 <__assert_fail@plt+0x2b438>
   3dcf8:	b	3dc28 <__assert_fail@plt+0x2b450>
   3dcfc:	add	r0, r5, #8
   3dd00:	add	r1, r5, #12
   3dd04:	mov	r2, #2
   3dd08:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3dd0c:	cmp	r0, #0
   3dd10:	bne	3dc88 <__assert_fail@plt+0x2b4b0>
   3dd14:	b	3dc28 <__assert_fail@plt+0x2b450>
   3dd18:	movw	r0, #41956	; 0xa3e4
   3dd1c:	movw	r1, #41948	; 0xa3dc
   3dd20:	movt	r0, #5
   3dd24:	movt	r1, #5
   3dd28:	movw	r2, #4294	; 0x10c6
   3dd2c:	ldr	r3, [pc]	; 3dd34 <__assert_fail@plt+0x2b55c>
   3dd30:	bl	127d8 <__assert_fail@plt>
   3dd34:	strheq	sl, [r5], -r0
   3dd38:	push	{r3, lr}
   3dd3c:	mov	r1, #1
   3dd40:	bl	3db28 <__assert_fail@plt+0x2b350>
   3dd44:	mov	r0, #1
   3dd48:	pop	{r3, pc}
   3dd4c:	push	{r3, lr}
   3dd50:	mov	r1, #0
   3dd54:	bl	3db28 <__assert_fail@plt+0x2b350>
   3dd58:	mov	r0, #1
   3dd5c:	pop	{r3, pc}
   3dd60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3dd64:	mov	r6, r0
   3dd68:	ldr	r8, [r0, #172]	; 0xac
   3dd6c:	mov	sl, r1
   3dd70:	mov	r9, r2
   3dd74:	ldrd	r4, [sp, #32]
   3dd78:	cmp	r8, #1
   3dd7c:	bne	3de58 <__assert_fail@plt+0x2b680>
   3dd80:	mov	r0, #32
   3dd84:	bl	12358 <xmalloc@plt>
   3dd88:	mov	r1, #0
   3dd8c:	mov	r2, #32
   3dd90:	mov	r7, r0
   3dd94:	bl	12580 <memset@plt>
   3dd98:	ldr	r3, [r6, #84]	; 0x54
   3dd9c:	mov	r1, r8
   3dda0:	mov	r0, r6
   3dda4:	str	sl, [r7, #4]
   3dda8:	ldrb	r3, [r3, #36]	; 0x24
   3ddac:	ubfx	r3, r3, #1, #1
   3ddb0:	str	r3, [r7, #12]
   3ddb4:	bl	3db28 <__assert_fail@plt+0x2b350>
   3ddb8:	ldr	r1, [r6, #200]	; 0xc8
   3ddbc:	str	r9, [r7, #16]
   3ddc0:	cmp	r1, #0
   3ddc4:	strd	r4, [r7, #24]
   3ddc8:	addeq	r1, r6, #200	; 0xc8
   3ddcc:	str	r0, [r7, #8]
   3ddd0:	bne	3dddc <__assert_fail@plt+0x2b604>
   3ddd4:	b	3dde8 <__assert_fail@plt+0x2b610>
   3ddd8:	mov	r1, r3
   3dddc:	ldr	r3, [r1]
   3dde0:	cmp	r3, #0
   3dde4:	bne	3ddd8 <__assert_fail@plt+0x2b600>
   3dde8:	str	r7, [r1]
   3ddec:	add	r5, r6, #188	; 0xbc
   3ddf0:	ldr	r4, [r6, #188]	; 0xbc
   3ddf4:	cmp	r4, #0
   3ddf8:	beq	3de30 <__assert_fail@plt+0x2b658>
   3ddfc:	ldr	r3, [r6, #192]	; 0xc0
   3de00:	mov	r2, r0
   3de04:	str	r3, [r6, #12]
   3de08:	str	r5, [r6, #8]
   3de0c:	mov	r3, #0
   3de10:	mov	r0, r6
   3de14:	bl	3d800 <__assert_fail@plt+0x2b028>
   3de18:	cmp	r0, #0
   3de1c:	ldrne	r3, [r6, #196]	; 0xc4
   3de20:	movne	r0, #1
   3de24:	addne	r3, r3, r0
   3de28:	strne	r3, [r6, #196]	; 0xc4
   3de2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3de30:	mov	r0, #500	; 0x1f4
   3de34:	bl	12358 <xmalloc@plt>
   3de38:	mov	r2, r0
   3de3c:	ldr	r0, [r7, #8]
   3de40:	str	r4, [r2]
   3de44:	mov	r3, r2
   3de48:	str	r4, [r2, #4]
   3de4c:	str	r2, [r6, #188]	; 0xbc
   3de50:	str	r2, [r6, #192]	; 0xc0
   3de54:	b	3de00 <__assert_fail@plt+0x2b628>
   3de58:	movw	r0, #41976	; 0xa3f8
   3de5c:	movw	r1, #41948	; 0xa3dc
   3de60:	movt	r0, #5
   3de64:	movt	r1, #5
   3de68:	movw	r2, #7092	; 0x1bb4
   3de6c:	ldr	r3, [pc]	; 3de74 <__assert_fail@plt+0x2b69c>
   3de70:	bl	127d8 <__assert_fail@plt>
   3de74:	andeq	sl, r5, r4, asr #1
   3de78:	cmn	r2, #1
   3de7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3de80:	mov	r7, r2
   3de84:	sub	sp, sp, #12
   3de88:	ldreq	r7, [r0, #88]	; 0x58
   3de8c:	mov	r4, r0
   3de90:	mov	sl, r3
   3de94:	ldr	r5, [sp, #56]	; 0x38
   3de98:	addeq	r3, r7, #1
   3de9c:	streq	r3, [r0, #88]	; 0x58
   3dea0:	cmp	r1, #0
   3dea4:	movw	r0, #11856	; 0x2e50
   3dea8:	movt	r0, #5
   3deac:	mov	r6, r1
   3deb0:	ldr	r8, [r4, #92]	; 0x5c
   3deb4:	moveq	r6, r0
   3deb8:	cmp	r5, #0
   3debc:	add	r1, r8, #1
   3dec0:	ldr	r9, [sp, #52]	; 0x34
   3dec4:	str	r1, [r4, #92]	; 0x5c
   3dec8:	beq	3e004 <__assert_fail@plt+0x2b82c>
   3decc:	ldr	fp, [r5]
   3ded0:	cmp	fp, #0
   3ded4:	beq	3e04c <__assert_fail@plt+0x2b874>
   3ded8:	str	r5, [r4, #8]
   3dedc:	ldr	r3, [r5, #4]
   3dee0:	str	r3, [r4, #12]
   3dee4:	str	r9, [sp]
   3dee8:	mov	r2, sl
   3deec:	add	r0, r4, #84	; 0x54
   3def0:	mov	r1, r7
   3def4:	ldr	r3, [sp, #48]	; 0x30
   3def8:	bl	3d038 <__assert_fail@plt+0x2a860>
   3defc:	cmp	r0, #0
   3df00:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3df04:	ldr	r3, [r4, #12]
   3df08:	movw	r1, #489	; 0x1e9
   3df0c:	ldr	r2, [r3, #4]
   3df10:	cmp	r2, r1
   3df14:	bhi	3df50 <__assert_fail@plt+0x2b778>
   3df18:	add	r1, r3, r2
   3df1c:	mvn	r0, #15
   3df20:	add	r2, r2, #1
   3df24:	str	r2, [r3, #4]
   3df28:	strb	r0, [r1, #8]
   3df2c:	mov	r0, r4
   3df30:	mov	r2, r8
   3df34:	mov	r3, #0
   3df38:	bl	3d800 <__assert_fail@plt+0x2b028>
   3df3c:	cmp	r0, #0
   3df40:	bne	3df6c <__assert_fail@plt+0x2b794>
   3df44:	mov	r0, #0
   3df48:	add	sp, sp, #12
   3df4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df50:	add	r0, r4, #8
   3df54:	add	r1, r4, #12
   3df58:	mov	r2, #240	; 0xf0
   3df5c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3df60:	cmp	r0, #0
   3df64:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3df68:	b	3df2c <__assert_fail@plt+0x2b754>
   3df6c:	mov	r1, r6
   3df70:	mov	r0, r4
   3df74:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3df78:	cmp	r0, #0
   3df7c:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3df80:	ldr	r3, [r4, #12]
   3df84:	movw	r1, #489	; 0x1e9
   3df88:	ldr	r2, [r3, #4]
   3df8c:	cmp	r2, r1
   3df90:	bhi	3e068 <__assert_fail@plt+0x2b890>
   3df94:	add	r1, r3, r2
   3df98:	mvn	r0, #13
   3df9c:	add	r2, r2, #1
   3dfa0:	str	r2, [r3, #4]
   3dfa4:	strb	r0, [r1, #8]
   3dfa8:	mov	r2, r7
   3dfac:	mov	r0, r4
   3dfb0:	mov	r3, #0
   3dfb4:	bl	3d800 <__assert_fail@plt+0x2b028>
   3dfb8:	cmp	r0, #0
   3dfbc:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3dfc0:	ldr	r3, [r4, #12]
   3dfc4:	movw	r1, #489	; 0x1e9
   3dfc8:	ldr	r2, [r3, #4]
   3dfcc:	cmp	r2, r1
   3dfd0:	bhi	3e194 <__assert_fail@plt+0x2b9bc>
   3dfd4:	add	r1, r3, r2
   3dfd8:	mvn	r0, #49	; 0x31
   3dfdc:	add	r2, r2, #1
   3dfe0:	str	r2, [r3, #4]
   3dfe4:	strb	r0, [r1, #8]
   3dfe8:	mov	r0, r4
   3dfec:	mov	r2, r8
   3dff0:	mov	r3, #0
   3dff4:	bl	3d800 <__assert_fail@plt+0x2b028>
   3dff8:	adds	r0, r0, #0
   3dffc:	movne	r0, #1
   3e000:	b	3df48 <__assert_fail@plt+0x2b770>
   3e004:	cmp	r9, #0
   3e008:	beq	3e02c <__assert_fail@plt+0x2b854>
   3e00c:	ldr	r3, [r4, #40]	; 0x28
   3e010:	cmp	r3, #0
   3e014:	beq	3e110 <__assert_fail@plt+0x2b938>
   3e018:	ldr	r3, [r4, #44]	; 0x2c
   3e01c:	add	r2, r4, #40	; 0x28
   3e020:	str	r2, [r4, #8]
   3e024:	str	r3, [r4, #12]
   3e028:	b	3dee4 <__assert_fail@plt+0x2b70c>
   3e02c:	ldr	r3, [r4, #24]
   3e030:	cmp	r3, #0
   3e034:	beq	3e084 <__assert_fail@plt+0x2b8ac>
   3e038:	ldr	r3, [r4, #28]
   3e03c:	add	r2, r4, #24
   3e040:	str	r2, [r4, #8]
   3e044:	str	r3, [r4, #12]
   3e048:	b	3dee4 <__assert_fail@plt+0x2b70c>
   3e04c:	mov	r0, #500	; 0x1f4
   3e050:	bl	12358 <xmalloc@plt>
   3e054:	str	fp, [r0]
   3e058:	str	fp, [r0, #4]
   3e05c:	str	r0, [r5]
   3e060:	str	r0, [r5, #4]
   3e064:	b	3ded8 <__assert_fail@plt+0x2b700>
   3e068:	add	r0, r4, #8
   3e06c:	add	r1, r4, #12
   3e070:	mov	r2, #242	; 0xf2
   3e074:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3e078:	cmp	r0, #0
   3e07c:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3e080:	b	3dfa8 <__assert_fail@plt+0x2b7d0>
   3e084:	mov	r0, #500	; 0x1f4
   3e088:	bl	12358 <xmalloc@plt>
   3e08c:	mvn	r3, #7
   3e090:	add	ip, r4, #24
   3e094:	mov	r2, #1
   3e098:	movw	r1, #489	; 0x1e9
   3e09c:	str	r9, [r0]
   3e0a0:	str	r0, [r4, #12]
   3e0a4:	str	r0, [r4, #24]
   3e0a8:	str	r0, [r4, #28]
   3e0ac:	str	ip, [r4, #8]
   3e0b0:	strb	r3, [r0, #8]
   3e0b4:	ldr	r3, [r4, #12]
   3e0b8:	str	r2, [r0, #4]
   3e0bc:	ldr	r2, [r3, #4]
   3e0c0:	cmp	r2, r1
   3e0c4:	bhi	3e1b0 <__assert_fail@plt+0x2b9d8>
   3e0c8:	add	r1, r3, r2
   3e0cc:	mov	r0, #2
   3e0d0:	add	r2, r2, #1
   3e0d4:	str	r2, [r3, #4]
   3e0d8:	strb	r0, [r1, #8]
   3e0dc:	mov	r0, r4
   3e0e0:	mov	r2, #0
   3e0e4:	mov	r3, #0
   3e0e8:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e0ec:	cmp	r0, #0
   3e0f0:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3e0f4:	movw	r1, #11856	; 0x2e50
   3e0f8:	mov	r0, r4
   3e0fc:	movt	r1, #5
   3e100:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3e104:	cmp	r0, #0
   3e108:	bne	3dee4 <__assert_fail@plt+0x2b70c>
   3e10c:	b	3df44 <__assert_fail@plt+0x2b76c>
   3e110:	mov	r0, #500	; 0x1f4
   3e114:	bl	12358 <xmalloc@plt>
   3e118:	add	r1, r4, #40	; 0x28
   3e11c:	mvn	r3, #7
   3e120:	mov	r2, #1
   3e124:	movw	ip, #489	; 0x1e9
   3e128:	str	r5, [r0]
   3e12c:	str	r0, [r4, #12]
   3e130:	str	r1, [r4, #8]
   3e134:	str	r0, [r4, #40]	; 0x28
   3e138:	str	r0, [r4, #44]	; 0x2c
   3e13c:	strb	r3, [r0, #8]
   3e140:	ldr	r3, [r4, #12]
   3e144:	str	r2, [r0, #4]
   3e148:	ldr	r1, [r3, #4]
   3e14c:	cmp	r1, ip
   3e150:	bhi	3e1cc <__assert_fail@plt+0x2b9f4>
   3e154:	add	r0, r3, r1
   3e158:	add	r1, r1, #1
   3e15c:	str	r1, [r3, #4]
   3e160:	strb	r2, [r0, #8]
   3e164:	mov	r0, r4
   3e168:	mov	r2, #0
   3e16c:	mov	r3, #0
   3e170:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e174:	cmp	r0, #0
   3e178:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3e17c:	mov	r0, r4
   3e180:	ldr	r1, [r4, #20]
   3e184:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3e188:	cmp	r0, #0
   3e18c:	bne	3dee4 <__assert_fail@plt+0x2b70c>
   3e190:	b	3df44 <__assert_fail@plt+0x2b76c>
   3e194:	add	r0, r4, #8
   3e198:	add	r1, r4, #12
   3e19c:	mov	r2, #206	; 0xce
   3e1a0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3e1a4:	cmp	r0, #0
   3e1a8:	beq	3df44 <__assert_fail@plt+0x2b76c>
   3e1ac:	b	3dfe8 <__assert_fail@plt+0x2b810>
   3e1b0:	add	r0, r4, #8
   3e1b4:	add	r1, r4, #12
   3e1b8:	mov	r2, #2
   3e1bc:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3e1c0:	cmp	r0, #0
   3e1c4:	bne	3e0dc <__assert_fail@plt+0x2b904>
   3e1c8:	b	3df44 <__assert_fail@plt+0x2b76c>
   3e1cc:	add	r0, r4, #8
   3e1d0:	add	r1, r4, #12
   3e1d4:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3e1d8:	cmp	r0, #0
   3e1dc:	bne	3e164 <__assert_fail@plt+0x2b98c>
   3e1e0:	b	3df44 <__assert_fail@plt+0x2b76c>
   3e1e4:	ldr	r3, [r0, #84]	; 0x54
   3e1e8:	mov	r1, #1
   3e1ec:	push	{r4, r5, r6, r7, lr}
   3e1f0:	sub	sp, sp, #20
   3e1f4:	ldrb	r6, [r3, #36]	; 0x24
   3e1f8:	mov	r5, r0
   3e1fc:	bl	3db28 <__assert_fail@plt+0x2b350>
   3e200:	mov	r4, #0
   3e204:	mov	ip, #1
   3e208:	ubfx	r6, r6, #2, #1
   3e20c:	mov	r1, r4
   3e210:	str	r6, [sp, #4]
   3e214:	str	r4, [sp, #8]
   3e218:	mov	r3, r4
   3e21c:	mvn	r2, #0
   3e220:	str	ip, [sp]
   3e224:	mov	r7, r0
   3e228:	mov	r0, r5
   3e22c:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   3e230:	cmp	r0, r4
   3e234:	bne	3e244 <__assert_fail@plt+0x2ba6c>
   3e238:	mov	r0, #0
   3e23c:	add	sp, sp, #20
   3e240:	pop	{r4, r5, r6, r7, pc}
   3e244:	mov	r0, r5
   3e248:	mov	r2, #115	; 0x73
   3e24c:	mov	r3, #0
   3e250:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e254:	cmp	r0, #0
   3e258:	beq	3e238 <__assert_fail@plt+0x2ba60>
   3e25c:	mov	r0, r5
   3e260:	mov	r2, #4
   3e264:	mov	r3, #0
   3e268:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e26c:	cmp	r0, #0
   3e270:	beq	3e238 <__assert_fail@plt+0x2ba60>
   3e274:	mov	r0, r5
   3e278:	mov	r2, r7
   3e27c:	mov	r3, r4
   3e280:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e284:	adds	r0, r0, #0
   3e288:	movne	r0, #1
   3e28c:	b	3e23c <__assert_fail@plt+0x2ba64>
   3e290:	ldr	ip, [r0, #84]	; 0x54
   3e294:	mov	r1, #0
   3e298:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e29c:	sub	sp, sp, #16
   3e2a0:	ldr	r9, [ip, #8]
   3e2a4:	mov	r7, r1
   3e2a8:	ldrb	ip, [ip, #36]	; 0x24
   3e2ac:	mov	r6, r0
   3e2b0:	mov	r4, r2
   3e2b4:	mov	r5, r3
   3e2b8:	and	r8, ip, #1
   3e2bc:	ubfx	sl, ip, #2, #1
   3e2c0:	bl	3db28 <__assert_fail@plt+0x2b350>
   3e2c4:	stm	sp, {r8, sl}
   3e2c8:	mov	r3, r9
   3e2cc:	mov	r0, r6
   3e2d0:	str	r7, [sp, #8]
   3e2d4:	mov	r1, r7
   3e2d8:	mvn	r2, #0
   3e2dc:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   3e2e0:	cmp	r0, r7
   3e2e4:	bne	3e2f4 <__assert_fail@plt+0x2bb1c>
   3e2e8:	mov	r0, #0
   3e2ec:	add	sp, sp, #16
   3e2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e2f4:	mov	r0, r6
   3e2f8:	mov	r2, #82	; 0x52
   3e2fc:	mov	r3, #0
   3e300:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e304:	cmp	r0, #0
   3e308:	beq	3e2e8 <__assert_fail@plt+0x2bb10>
   3e30c:	mov	r2, r4
   3e310:	mov	r3, r5
   3e314:	mov	r0, r6
   3e318:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e31c:	cmp	r0, #0
   3e320:	beq	3e2e8 <__assert_fail@plt+0x2bb10>
   3e324:	mov	r0, r6
   3e328:	ldrd	r2, [sp, #48]	; 0x30
   3e32c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e330:	cmp	r0, #0
   3e334:	beq	3e2e8 <__assert_fail@plt+0x2bb10>
   3e338:	eor	r2, r8, #1
   3e33c:	mov	r0, r6
   3e340:	mov	r3, #0
   3e344:	uxtb	r2, r2
   3e348:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e34c:	cmp	r0, #0
   3e350:	beq	3e2e8 <__assert_fail@plt+0x2bb10>
   3e354:	mov	r0, r6
   3e358:	mov	r2, r9
   3e35c:	mov	r3, r7
   3e360:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e364:	adds	r0, r0, #0
   3e368:	movne	r0, #1
   3e36c:	b	3e2ec <__assert_fail@plt+0x2bb14>
   3e370:	ldr	r3, [r0, #84]	; 0x54
   3e374:	push	{r4, r5, r6, lr}
   3e378:	cmp	r3, #0
   3e37c:	mov	r4, r0
   3e380:	beq	3e55c <__assert_fail@plt+0x2bd84>
   3e384:	ldr	r2, [r3, #24]
   3e388:	cmp	r2, #0
   3e38c:	beq	3e55c <__assert_fail@plt+0x2bd84>
   3e390:	ldrb	r1, [r3, #36]	; 0x24
   3e394:	tst	r1, #8
   3e398:	bne	3e474 <__assert_fail@plt+0x2bc9c>
   3e39c:	tst	r1, #4
   3e3a0:	beq	3e3ec <__assert_fail@plt+0x2bc14>
   3e3a4:	ldr	r5, [r0, #40]	; 0x28
   3e3a8:	cmp	r5, #0
   3e3ac:	addne	r4, r0, #40	; 0x28
   3e3b0:	beq	3e47c <__assert_fail@plt+0x2bca4>
   3e3b4:	cmp	r2, #0
   3e3b8:	beq	3e3d8 <__assert_fail@plt+0x2bc00>
   3e3bc:	ldr	r1, [r4]
   3e3c0:	cmp	r1, #0
   3e3c4:	streq	r2, [r4]
   3e3c8:	ldrne	r1, [r4, #4]
   3e3cc:	strne	r2, [r1]
   3e3d0:	ldr	r2, [r3, #28]
   3e3d4:	str	r2, [r4, #4]
   3e3d8:	mov	r2, #0
   3e3dc:	mov	r0, #1
   3e3e0:	str	r2, [r3, #24]
   3e3e4:	str	r2, [r3, #28]
   3e3e8:	pop	{r4, r5, r6, pc}
   3e3ec:	ldr	r5, [r0, #24]
   3e3f0:	cmp	r5, #0
   3e3f4:	addne	r4, r0, #24
   3e3f8:	bne	3e3b4 <__assert_fail@plt+0x2bbdc>
   3e3fc:	mov	r0, #500	; 0x1f4
   3e400:	add	r6, r4, #24
   3e404:	bl	12358 <xmalloc@plt>
   3e408:	mvn	r3, #7
   3e40c:	mov	r2, #1
   3e410:	movw	r1, #489	; 0x1e9
   3e414:	str	r5, [r0]
   3e418:	str	r0, [r4, #12]
   3e41c:	str	r0, [r4, #24]
   3e420:	str	r0, [r4, #28]
   3e424:	str	r6, [r4, #8]
   3e428:	strb	r3, [r0, #8]
   3e42c:	ldr	r3, [r4, #12]
   3e430:	str	r2, [r0, #4]
   3e434:	ldr	r2, [r3, #4]
   3e438:	cmp	r2, r1
   3e43c:	bhi	3e528 <__assert_fail@plt+0x2bd50>
   3e440:	add	r1, r3, r2
   3e444:	mov	r0, #2
   3e448:	add	r2, r2, #1
   3e44c:	str	r2, [r3, #4]
   3e450:	strb	r0, [r1, #8]
   3e454:	mov	r0, r4
   3e458:	mov	r2, #0
   3e45c:	mov	r3, #0
   3e460:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e464:	cmp	r0, #0
   3e468:	bne	3e50c <__assert_fail@plt+0x2bd34>
   3e46c:	mov	r0, #0
   3e470:	pop	{r4, r5, r6, pc}
   3e474:	mov	r0, #1
   3e478:	pop	{r4, r5, r6, pc}
   3e47c:	mov	r0, #500	; 0x1f4
   3e480:	add	r6, r4, #40	; 0x28
   3e484:	bl	12358 <xmalloc@plt>
   3e488:	mvn	r3, #7
   3e48c:	mov	r2, #1
   3e490:	movw	ip, #489	; 0x1e9
   3e494:	str	r5, [r0]
   3e498:	str	r0, [r4, #12]
   3e49c:	str	r0, [r4, #40]	; 0x28
   3e4a0:	str	r0, [r4, #44]	; 0x2c
   3e4a4:	str	r6, [r4, #8]
   3e4a8:	strb	r3, [r0, #8]
   3e4ac:	ldr	r3, [r4, #12]
   3e4b0:	str	r2, [r0, #4]
   3e4b4:	ldr	r1, [r3, #4]
   3e4b8:	cmp	r1, ip
   3e4bc:	bhi	3e544 <__assert_fail@plt+0x2bd6c>
   3e4c0:	add	r0, r3, r1
   3e4c4:	add	r1, r1, r2
   3e4c8:	str	r1, [r3, #4]
   3e4cc:	strb	r2, [r0, #8]
   3e4d0:	mov	r0, r4
   3e4d4:	mov	r2, #0
   3e4d8:	mov	r3, #0
   3e4dc:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e4e0:	cmp	r0, #0
   3e4e4:	beq	3e46c <__assert_fail@plt+0x2bc94>
   3e4e8:	mov	r0, r4
   3e4ec:	ldr	r1, [r4, #20]
   3e4f0:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3e4f4:	cmp	r0, #0
   3e4f8:	beq	3e46c <__assert_fail@plt+0x2bc94>
   3e4fc:	ldr	r3, [r4, #84]	; 0x54
   3e500:	mov	r4, r6
   3e504:	ldr	r2, [r3, #24]
   3e508:	b	3e3b4 <__assert_fail@plt+0x2bbdc>
   3e50c:	movw	r1, #11856	; 0x2e50
   3e510:	mov	r0, r4
   3e514:	movt	r1, #5
   3e518:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3e51c:	cmp	r0, #0
   3e520:	bne	3e4fc <__assert_fail@plt+0x2bd24>
   3e524:	b	3e46c <__assert_fail@plt+0x2bc94>
   3e528:	add	r0, r4, #8
   3e52c:	add	r1, r4, #12
   3e530:	mov	r2, #2
   3e534:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3e538:	cmp	r0, #0
   3e53c:	bne	3e454 <__assert_fail@plt+0x2bc7c>
   3e540:	b	3e46c <__assert_fail@plt+0x2bc94>
   3e544:	add	r0, r4, #8
   3e548:	add	r1, r4, #12
   3e54c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3e550:	cmp	r0, #0
   3e554:	bne	3e4d0 <__assert_fail@plt+0x2bcf8>
   3e558:	b	3e46c <__assert_fail@plt+0x2bc94>
   3e55c:	movw	r0, #42000	; 0xa410
   3e560:	movw	r1, #41948	; 0xa3dc
   3e564:	movt	r0, #5
   3e568:	movt	r1, #5
   3e56c:	movw	r2, #6041	; 0x1799
   3e570:	ldr	r3, [pc]	; 3e578 <__assert_fail@plt+0x2bda0>
   3e574:	bl	127d8 <__assert_fail@plt>
   3e578:	ldrdeq	sl, [r5], -ip
   3e57c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e580:	sub	sp, sp, #44	; 0x2c
   3e584:	ldr	r6, [r0, #152]	; 0x98
   3e588:	mov	r7, r1
   3e58c:	str	r0, [sp, #36]	; 0x24
   3e590:	mov	r9, r3
   3e594:	cmp	r6, #0
   3e598:	str	r2, [sp, #20]
   3e59c:	beq	3e8f0 <__assert_fail@plt+0x2c118>
   3e5a0:	str	r3, [sp, #32]
   3e5a4:	b	3e5b4 <__assert_fail@plt+0x2bddc>
   3e5a8:	ldr	r6, [r6]
   3e5ac:	cmp	r6, #0
   3e5b0:	beq	3e700 <__assert_fail@plt+0x2bf28>
   3e5b4:	cmp	r7, #0
   3e5b8:	beq	3e6e8 <__assert_fail@plt+0x2bf10>
   3e5bc:	ldr	r1, [r6, #12]
   3e5c0:	cmp	r1, #0
   3e5c4:	beq	3e5a8 <__assert_fail@plt+0x2bdd0>
   3e5c8:	ldrb	r2, [r7]
   3e5cc:	ldrb	r3, [r1]
   3e5d0:	cmp	r2, r3
   3e5d4:	bne	3e5a8 <__assert_fail@plt+0x2bdd0>
   3e5d8:	mov	r0, r7
   3e5dc:	bl	12178 <strcmp@plt>
   3e5e0:	cmp	r0, #0
   3e5e4:	bne	3e5a8 <__assert_fail@plt+0x2bdd0>
   3e5e8:	ldr	sl, [r6, #8]
   3e5ec:	cmp	sl, #0
   3e5f0:	beq	3e89c <__assert_fail@plt+0x2c0c4>
   3e5f4:	ldr	r2, [sp, #20]
   3e5f8:	ldr	r3, [r6, #16]
   3e5fc:	cmp	r2, #0
   3e600:	beq	3e874 <__assert_fail@plt+0x2c09c>
   3e604:	cmp	r3, #0
   3e608:	str	r3, [sp, #24]
   3e60c:	beq	3e6cc <__assert_fail@plt+0x2bef4>
   3e610:	ldr	r0, [r2]
   3e614:	cmp	r0, #0
   3e618:	beq	3e8ac <__assert_fail@plt+0x2c0d4>
   3e61c:	ldr	r1, [r3]
   3e620:	cmp	r1, #0
   3e624:	beq	3e6cc <__assert_fail@plt+0x2bef4>
   3e628:	ldrb	r2, [r0]
   3e62c:	ldrb	r3, [r1]
   3e630:	cmp	r2, r3
   3e634:	bne	3e6cc <__assert_fail@plt+0x2bef4>
   3e638:	ldr	r9, [sp, #24]
   3e63c:	mov	r3, #0
   3e640:	ldr	sl, [r6, #20]
   3e644:	mov	r8, r3
   3e648:	str	r6, [sp, #28]
   3e64c:	ldr	fp, [sp, #20]
   3e650:	mov	r6, r9
   3e654:	ldr	r9, [sp, #32]
   3e658:	b	3e69c <__assert_fail@plt+0x2bec4>
   3e65c:	bl	12178 <strcmp@plt>
   3e660:	cmp	r0, #0
   3e664:	bne	3e6b4 <__assert_fail@plt+0x2bedc>
   3e668:	ldr	r0, [fp, #4]!
   3e66c:	add	r8, r8, #1
   3e670:	cmp	r0, #0
   3e674:	mov	r3, r8
   3e678:	lsl	r2, r8, #2
   3e67c:	beq	3e868 <__assert_fail@plt+0x2c090>
   3e680:	ldr	r1, [r6, #4]!
   3e684:	cmp	r1, #0
   3e688:	beq	3e860 <__assert_fail@plt+0x2c088>
   3e68c:	ldrb	lr, [r0]
   3e690:	ldrb	r2, [r1]
   3e694:	cmp	lr, r2
   3e698:	bne	3e860 <__assert_fail@plt+0x2c088>
   3e69c:	lsl	r3, r3, #3
   3e6a0:	ldrd	r4, [r9, r3]
   3e6a4:	ldrd	r2, [r3, sl]
   3e6a8:	cmp	r5, r3
   3e6ac:	cmpeq	r4, r2
   3e6b0:	beq	3e65c <__assert_fail@plt+0x2be84>
   3e6b4:	ldr	r1, [sp, #20]
   3e6b8:	lsl	r2, r8, #2
   3e6bc:	ldr	r6, [sp, #28]
   3e6c0:	ldr	r3, [r1, r8, lsl #2]
   3e6c4:	cmp	r3, #0
   3e6c8:	beq	3e86c <__assert_fail@plt+0x2c094>
   3e6cc:	cmp	r7, #0
   3e6d0:	beq	3e5a8 <__assert_fail@plt+0x2bdd0>
   3e6d4:	mvn	r2, #0
   3e6d8:	ldr	r9, [sp, #32]
   3e6dc:	str	r2, [sp, #24]
   3e6e0:	mov	sl, #1
   3e6e4:	b	3e710 <__assert_fail@plt+0x2bf38>
   3e6e8:	ldr	r3, [r6, #12]
   3e6ec:	cmp	r3, #0
   3e6f0:	beq	3e5e8 <__assert_fail@plt+0x2be10>
   3e6f4:	ldr	r6, [r6]
   3e6f8:	cmp	r6, #0
   3e6fc:	bne	3e5b4 <__assert_fail@plt+0x2bddc>
   3e700:	ldr	r9, [sp, #32]
   3e704:	mov	sl, r6
   3e708:	mvn	r3, #0
   3e70c:	str	r3, [sp, #24]
   3e710:	ldr	r1, [sp, #20]
   3e714:	cmp	r1, #0
   3e718:	beq	3e778 <__assert_fail@plt+0x2bfa0>
   3e71c:	ldr	r3, [r1]
   3e720:	cmp	r3, #0
   3e724:	beq	3e778 <__assert_fail@plt+0x2bfa0>
   3e728:	ldrd	r2, [r9]
   3e72c:	orrs	r1, r2, r3
   3e730:	bne	3e93c <__assert_fail@plt+0x2c164>
   3e734:	mov	ip, r9
   3e738:	mov	r2, #1
   3e73c:	mov	r3, #0
   3e740:	ldr	r8, [sp, #20]
   3e744:	b	3e760 <__assert_fail@plt+0x2bf88>
   3e748:	ldrd	r4, [ip, #8]!
   3e74c:	adds	r2, r2, #1
   3e750:	adc	r3, r3, #0
   3e754:	cmp	r5, r1
   3e758:	cmpeq	r4, r0
   3e75c:	bne	3e93c <__assert_fail@plt+0x2c164>
   3e760:	lsl	lr, r2, #2
   3e764:	mov	r0, r2
   3e768:	mov	r1, r3
   3e76c:	ldr	lr, [r8, lr]
   3e770:	cmp	lr, #0
   3e774:	bne	3e748 <__assert_fail@plt+0x2bf70>
   3e778:	mov	r3, #0
   3e77c:	str	sl, [sp, #4]
   3e780:	str	r3, [sp, #8]
   3e784:	mov	r8, #1
   3e788:	ldr	r0, [sp, #36]	; 0x24
   3e78c:	mov	r1, r7
   3e790:	str	r8, [sp]
   3e794:	ldr	r2, [sp, #24]
   3e798:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   3e79c:	cmp	r0, #0
   3e7a0:	beq	3e854 <__assert_fail@plt+0x2c07c>
   3e7a4:	ldr	r0, [sp, #36]	; 0x24
   3e7a8:	mov	r2, #69	; 0x45
   3e7ac:	mov	r3, #0
   3e7b0:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e7b4:	cmp	r0, #0
   3e7b8:	beq	3e854 <__assert_fail@plt+0x2c07c>
   3e7bc:	ldr	r0, [sp, #36]	; 0x24
   3e7c0:	mov	r2, #4
   3e7c4:	mov	r3, #0
   3e7c8:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e7cc:	cmp	r0, #0
   3e7d0:	beq	3e854 <__assert_fail@plt+0x2c07c>
   3e7d4:	ldr	r2, [sp, #20]
   3e7d8:	cmp	r2, #0
   3e7dc:	beq	3e8b8 <__assert_fail@plt+0x2c0e0>
   3e7e0:	ldr	r3, [sp, #20]
   3e7e4:	ldr	r1, [r3]
   3e7e8:	cmp	r1, #0
   3e7ec:	beq	3e8b8 <__assert_fail@plt+0x2c0e0>
   3e7f0:	mov	r5, #0
   3e7f4:	str	r6, [sp, #28]
   3e7f8:	mov	fp, r8
   3e7fc:	mov	r6, r5
   3e800:	mov	r8, r5
   3e804:	mov	r4, r3
   3e808:	ldr	r5, [sp, #36]	; 0x24
   3e80c:	b	3e820 <__assert_fail@plt+0x2c048>
   3e810:	ldr	r1, [r4, #4]!
   3e814:	mov	r8, r6
   3e818:	cmp	r1, #0
   3e81c:	beq	3e8b4 <__assert_fail@plt+0x2c0dc>
   3e820:	mov	r0, r5
   3e824:	add	r6, r6, #1
   3e828:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3e82c:	cmp	r0, #0
   3e830:	beq	3e854 <__assert_fail@plt+0x2c07c>
   3e834:	cmp	fp, #0
   3e838:	bne	3e810 <__assert_fail@plt+0x2c038>
   3e83c:	lsl	r8, r8, #3
   3e840:	mov	r0, r5
   3e844:	ldrd	r2, [r9, r8]
   3e848:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e84c:	cmp	r0, #0
   3e850:	bne	3e810 <__assert_fail@plt+0x2c038>
   3e854:	mov	r0, #0
   3e858:	add	sp, sp, #44	; 0x2c
   3e85c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e860:	ldr	r6, [sp, #28]
   3e864:	b	3e6cc <__assert_fail@plt+0x2bef4>
   3e868:	ldr	r6, [sp, #28]
   3e86c:	ldr	r1, [sp, #24]
   3e870:	ldr	r3, [r1, r2]
   3e874:	cmp	r3, #0
   3e878:	bne	3e6cc <__assert_fail@plt+0x2bef4>
   3e87c:	ldr	r3, [sp, #36]	; 0x24
   3e880:	mov	r2, #0
   3e884:	ldr	r1, [r6, #4]
   3e888:	add	r0, r3, #84	; 0x54
   3e88c:	str	r2, [sp]
   3e890:	mov	r3, #1
   3e894:	bl	3d038 <__assert_fail@plt+0x2a860>
   3e898:	b	3e858 <__assert_fail@plt+0x2c080>
   3e89c:	ldr	r1, [r6, #4]
   3e8a0:	ldr	r9, [sp, #32]
   3e8a4:	str	r1, [sp, #24]
   3e8a8:	b	3e710 <__assert_fail@plt+0x2bf38>
   3e8ac:	mov	r2, r0
   3e8b0:	b	3e86c <__assert_fail@plt+0x2c094>
   3e8b4:	ldr	r6, [sp, #28]
   3e8b8:	cmp	sl, #0
   3e8bc:	movne	r0, #1
   3e8c0:	bne	3e858 <__assert_fail@plt+0x2c080>
   3e8c4:	ldr	r1, [sp, #24]
   3e8c8:	cmn	r1, #1
   3e8cc:	beq	3e900 <__assert_fail@plt+0x2c128>
   3e8d0:	ldr	r1, [sp, #20]
   3e8d4:	mov	r3, #1
   3e8d8:	mov	r0, r3
   3e8dc:	str	r9, [r6, #20]
   3e8e0:	str	r3, [r6, #8]
   3e8e4:	str	r1, [r6, #16]
   3e8e8:	add	sp, sp, #44	; 0x2c
   3e8ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e8f0:	mvn	r1, #0
   3e8f4:	mov	sl, r6
   3e8f8:	str	r1, [sp, #24]
   3e8fc:	b	3e710 <__assert_fail@plt+0x2bf38>
   3e900:	mov	r0, #24
   3e904:	bl	12358 <xmalloc@plt>
   3e908:	mov	r2, #24
   3e90c:	mov	r1, sl
   3e910:	mov	r6, r0
   3e914:	bl	12580 <memset@plt>
   3e918:	ldr	r2, [sp, #36]	; 0x24
   3e91c:	ldr	r3, [r2, #84]	; 0x54
   3e920:	ldr	r2, [r2, #152]	; 0x98
   3e924:	ldr	r3, [r3, #4]
   3e928:	str	r7, [r6, #12]
   3e92c:	stm	r6, {r2, r3}
   3e930:	ldr	r3, [sp, #36]	; 0x24
   3e934:	str	r6, [r3, #152]	; 0x98
   3e938:	b	3e8d0 <__assert_fail@plt+0x2c0f8>
   3e93c:	mov	r8, #0
   3e940:	mov	r2, #1
   3e944:	str	sl, [sp, #4]
   3e948:	mov	r3, r8
   3e94c:	str	r2, [sp]
   3e950:	mov	r1, r7
   3e954:	str	r8, [sp, #8]
   3e958:	ldr	r0, [sp, #36]	; 0x24
   3e95c:	ldr	r2, [sp, #24]
   3e960:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   3e964:	cmp	r0, r8
   3e968:	beq	3e854 <__assert_fail@plt+0x2c07c>
   3e96c:	ldr	r0, [sp, #36]	; 0x24
   3e970:	mov	r2, #78	; 0x4e
   3e974:	mov	r3, #0
   3e978:	bl	3d800 <__assert_fail@plt+0x2b028>
   3e97c:	cmp	r0, #0
   3e980:	bne	3e7e0 <__assert_fail@plt+0x2c008>
   3e984:	b	3e854 <__assert_fail@plt+0x2c07c>
   3e988:	sub	ip, r1, #4
   3e98c:	push	{r4, r5, r6, lr}
   3e990:	mov	r4, r1
   3e994:	sub	sp, sp, #16
   3e998:	mov	r5, r0
   3e99c:	cmp	ip, #12
   3e9a0:	ldrls	pc, [pc, ip, lsl #2]
   3e9a4:	b	3ea4c <__assert_fail@plt+0x2c274>
   3e9a8:	andeq	lr, r3, r4, lsr #20
   3e9ac:	andeq	lr, r3, ip, asr #20
   3e9b0:	andeq	lr, r3, ip, asr #20
   3e9b4:	andeq	lr, r3, ip, asr #20
   3e9b8:	ldrdeq	lr, [r3], -ip
   3e9bc:	andeq	lr, r3, ip, asr #20
   3e9c0:	andeq	lr, r3, ip, asr #20
   3e9c4:	andeq	lr, r3, ip, asr #20
   3e9c8:	ldrdeq	lr, [r3], -ip
   3e9cc:	andeq	lr, r3, ip, asr #20
   3e9d0:	andeq	lr, r3, ip, asr #20
   3e9d4:	andeq	lr, r3, ip, asr #20
   3e9d8:	ldrdeq	lr, [r3], -ip
   3e9dc:	ldr	r1, [r0, #168]	; 0xa8
   3e9e0:	cmp	r1, #0
   3e9e4:	moveq	r6, #100	; 0x64
   3e9e8:	bne	3ead8 <__assert_fail@plt+0x2c300>
   3e9ec:	mov	r3, #0
   3e9f0:	mov	r0, r5
   3e9f4:	str	r3, [sp]
   3e9f8:	mov	r1, r3
   3e9fc:	str	r3, [sp, #4]
   3ea00:	mvn	r2, #0
   3ea04:	str	r3, [sp, #8]
   3ea08:	lsl	r3, r4, #1
   3ea0c:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   3ea10:	cmp	r0, #0
   3ea14:	bne	3ea8c <__assert_fail@plt+0x2c2b4>
   3ea18:	mov	r0, #0
   3ea1c:	add	sp, sp, #16
   3ea20:	pop	{r4, r5, r6, pc}
   3ea24:	ldr	r1, [r0, #164]	; 0xa4
   3ea28:	cmp	r1, #0
   3ea2c:	moveq	r6, #99	; 0x63
   3ea30:	beq	3e9ec <__assert_fail@plt+0x2c214>
   3ea34:	mov	r3, #0
   3ea38:	mov	r2, #8
   3ea3c:	str	r3, [sp]
   3ea40:	add	r0, r0, #84	; 0x54
   3ea44:	bl	3d038 <__assert_fail@plt+0x2a860>
   3ea48:	b	3ea1c <__assert_fail@plt+0x2c244>
   3ea4c:	movw	r3, #168	; 0xa8
   3ea50:	movt	r3, #7
   3ea54:	mov	r2, #5
   3ea58:	movw	r1, #42096	; 0xa470
   3ea5c:	mov	r0, #0
   3ea60:	movt	r1, #5
   3ea64:	ldr	r5, [r3]
   3ea68:	bl	12298 <dcgettext@plt>
   3ea6c:	mov	r3, r4
   3ea70:	mov	r1, #1
   3ea74:	mov	r2, r0
   3ea78:	mov	r0, r5
   3ea7c:	bl	125d4 <__fprintf_chk@plt>
   3ea80:	mov	r0, #0
   3ea84:	add	sp, sp, #16
   3ea88:	pop	{r4, r5, r6, pc}
   3ea8c:	mov	r0, r5
   3ea90:	uxtb	r2, r6
   3ea94:	mov	r3, #0
   3ea98:	bl	3d800 <__assert_fail@plt+0x2b028>
   3ea9c:	cmp	r0, #0
   3eaa0:	beq	3ea18 <__assert_fail@plt+0x2c240>
   3eaa4:	movw	r1, #11856	; 0x2e50
   3eaa8:	mov	r0, r5
   3eaac:	movt	r1, #5
   3eab0:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3eab4:	cmp	r0, #0
   3eab8:	beq	3ea18 <__assert_fail@plt+0x2c240>
   3eabc:	ldr	r3, [r5, #84]	; 0x54
   3eac0:	cmp	r4, #4
   3eac4:	mov	r0, #1
   3eac8:	ldr	r3, [r3, #4]
   3eacc:	streq	r3, [r5, #164]	; 0xa4
   3ead0:	strne	r3, [r5, #168]	; 0xa8
   3ead4:	b	3ea1c <__assert_fail@plt+0x2c244>
   3ead8:	mov	r3, #0
   3eadc:	lsl	r2, r4, #1
   3eae0:	str	r3, [sp]
   3eae4:	add	r0, r0, #84	; 0x54
   3eae8:	bl	3d038 <__assert_fail@plt+0x2a860>
   3eaec:	b	3ea1c <__assert_fail@plt+0x2c244>
   3eaf0:	push	{r3, r4, r5, r6, r7, lr}
   3eaf4:	mov	r4, r1
   3eaf8:	ldr	r5, [r0, #12]
   3eafc:	cmp	r5, #0
   3eb00:	movwne	r7, #489	; 0x1e9
   3eb04:	beq	3ec64 <__assert_fail@plt+0x2c48c>
   3eb08:	ldr	r3, [r5, #44]	; 0x2c
   3eb0c:	cmp	r3, #0
   3eb10:	beq	3ec58 <__assert_fail@plt+0x2c480>
   3eb14:	ldr	r6, [r4, #24]
   3eb18:	cmp	r6, #0
   3eb1c:	beq	3ece8 <__assert_fail@plt+0x2c510>
   3eb20:	ldr	r3, [r4, #28]
   3eb24:	add	r2, r4, #24
   3eb28:	str	r2, [r4, #8]
   3eb2c:	str	r3, [r4, #12]
   3eb30:	ldr	r2, [r3, #4]
   3eb34:	ldr	r6, [r4, #92]	; 0x5c
   3eb38:	cmp	r2, r7
   3eb3c:	add	r1, r6, #1
   3eb40:	str	r1, [r4, #92]	; 0x5c
   3eb44:	bhi	3ec84 <__assert_fail@plt+0x2c4ac>
   3eb48:	add	r1, r3, r2
   3eb4c:	mvn	r0, #15
   3eb50:	add	r2, r2, #1
   3eb54:	str	r2, [r3, #4]
   3eb58:	strb	r0, [r1, #8]
   3eb5c:	mov	r0, r4
   3eb60:	mov	r2, r6
   3eb64:	mov	r3, #0
   3eb68:	bl	3d800 <__assert_fail@plt+0x2b028>
   3eb6c:	cmp	r0, #0
   3eb70:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3eb74:	mov	r0, r4
   3eb78:	ldr	r1, [r5, #16]
   3eb7c:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3eb80:	cmp	r0, #0
   3eb84:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3eb88:	ldr	r3, [r4, #12]
   3eb8c:	ldr	r2, [r3, #4]
   3eb90:	cmp	r2, r7
   3eb94:	bhi	3ecac <__assert_fail@plt+0x2c4d4>
   3eb98:	add	r1, r3, r2
   3eb9c:	mvn	r0, #13
   3eba0:	add	r2, r2, #1
   3eba4:	str	r2, [r3, #4]
   3eba8:	strb	r0, [r1, #8]
   3ebac:	mov	r0, r4
   3ebb0:	ldr	r2, [r5, #8]
   3ebb4:	mov	r3, #0
   3ebb8:	bl	3d800 <__assert_fail@plt+0x2b028>
   3ebbc:	cmp	r0, #0
   3ebc0:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3ebc4:	ldr	r3, [r4, #12]
   3ebc8:	ldr	r2, [r3, #4]
   3ebcc:	cmp	r2, r7
   3ebd0:	bhi	3ecc8 <__assert_fail@plt+0x2c4f0>
   3ebd4:	add	r1, r3, r2
   3ebd8:	mvn	r0, #49	; 0x31
   3ebdc:	add	r2, r2, #1
   3ebe0:	str	r2, [r3, #4]
   3ebe4:	strb	r0, [r1, #8]
   3ebe8:	mov	r2, r6
   3ebec:	mov	r0, r4
   3ebf0:	mov	r3, #0
   3ebf4:	bl	3d800 <__assert_fail@plt+0x2b028>
   3ebf8:	cmp	r0, #0
   3ebfc:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3ec00:	ldr	r3, [r5, #44]	; 0x2c
   3ec04:	sub	r3, r3, #7
   3ec08:	cmp	r3, #4
   3ec0c:	ldrls	pc, [pc, r3, lsl #2]
   3ec10:	b	3ece4 <__assert_fail@plt+0x2c50c>
   3ec14:	andeq	lr, r3, r8, lsr #24
   3ec18:	andeq	lr, r3, r8, ror ip
   3ec1c:	andeq	lr, r3, r8, lsr #24
   3ec20:	andeq	lr, r3, r8, ror ip
   3ec24:	andeq	lr, r3, ip, ror #24
   3ec28:	mov	r2, #83	; 0x53
   3ec2c:	mov	r3, #0
   3ec30:	mov	r0, r4
   3ec34:	bl	3d800 <__assert_fail@plt+0x2b028>
   3ec38:	cmp	r0, #0
   3ec3c:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3ec40:	mov	r0, r4
   3ec44:	mov	r2, #0
   3ec48:	mov	r3, #0
   3ec4c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3ec50:	cmp	r0, #0
   3ec54:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3ec58:	ldr	r5, [r5]
   3ec5c:	cmp	r5, #0
   3ec60:	bne	3eb08 <__assert_fail@plt+0x2c330>
   3ec64:	mov	r0, #1
   3ec68:	pop	{r3, r4, r5, r6, r7, pc}
   3ec6c:	mov	r2, #69	; 0x45
   3ec70:	mov	r3, #0
   3ec74:	b	3ec30 <__assert_fail@plt+0x2c458>
   3ec78:	mov	r2, #85	; 0x55
   3ec7c:	mov	r3, #0
   3ec80:	b	3ec30 <__assert_fail@plt+0x2c458>
   3ec84:	add	r0, r4, #8
   3ec88:	add	r1, r4, #12
   3ec8c:	mov	r2, #240	; 0xf0
   3ec90:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ec94:	cmp	r0, #0
   3ec98:	bne	3eb5c <__assert_fail@plt+0x2c384>
   3ec9c:	mov	r3, #1
   3eca0:	mov	r0, #0
   3eca4:	str	r3, [r4, #4]
   3eca8:	pop	{r3, r4, r5, r6, r7, pc}
   3ecac:	add	r0, r4, #8
   3ecb0:	add	r1, r4, #12
   3ecb4:	mov	r2, #242	; 0xf2
   3ecb8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ecbc:	cmp	r0, #0
   3ecc0:	bne	3ebac <__assert_fail@plt+0x2c3d4>
   3ecc4:	b	3ec9c <__assert_fail@plt+0x2c4c4>
   3ecc8:	add	r0, r4, #8
   3eccc:	add	r1, r4, #12
   3ecd0:	mov	r2, #206	; 0xce
   3ecd4:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ecd8:	cmp	r0, #0
   3ecdc:	bne	3ebe8 <__assert_fail@plt+0x2c410>
   3ece0:	b	3ec9c <__assert_fail@plt+0x2c4c4>
   3ece4:	bl	12790 <abort@plt>
   3ece8:	mov	r0, #500	; 0x1f4
   3ecec:	bl	12358 <xmalloc@plt>
   3ecf0:	mvn	r3, #7
   3ecf4:	add	r1, r4, #24
   3ecf8:	mov	r2, #1
   3ecfc:	str	r6, [r0]
   3ed00:	str	r0, [r4, #12]
   3ed04:	str	r0, [r4, #24]
   3ed08:	str	r0, [r4, #28]
   3ed0c:	str	r1, [r4, #8]
   3ed10:	strb	r3, [r0, #8]
   3ed14:	ldr	r3, [r4, #12]
   3ed18:	str	r2, [r0, #4]
   3ed1c:	ldr	r2, [r3, #4]
   3ed20:	cmp	r2, r7
   3ed24:	bhi	3ed74 <__assert_fail@plt+0x2c59c>
   3ed28:	add	r1, r3, r2
   3ed2c:	mov	r0, #2
   3ed30:	add	r2, r2, #1
   3ed34:	str	r2, [r3, #4]
   3ed38:	strb	r0, [r1, #8]
   3ed3c:	mov	r0, r4
   3ed40:	mov	r2, #0
   3ed44:	mov	r3, #0
   3ed48:	bl	3d800 <__assert_fail@plt+0x2b028>
   3ed4c:	cmp	r0, #0
   3ed50:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3ed54:	movw	r1, #11856	; 0x2e50
   3ed58:	mov	r0, r4
   3ed5c:	movt	r1, #5
   3ed60:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3ed64:	cmp	r0, #0
   3ed68:	beq	3ec9c <__assert_fail@plt+0x2c4c4>
   3ed6c:	ldr	r3, [r4, #12]
   3ed70:	b	3eb30 <__assert_fail@plt+0x2c358>
   3ed74:	add	r0, r4, #8
   3ed78:	add	r1, r4, #12
   3ed7c:	mov	r2, #2
   3ed80:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ed84:	cmp	r0, #0
   3ed88:	bne	3ed3c <__assert_fail@plt+0x2c564>
   3ed8c:	b	3ec9c <__assert_fail@plt+0x2c4c4>
   3ed90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ed94:	mov	r7, r0
   3ed98:	ldr	r5, [r0, #84]	; 0x54
   3ed9c:	mov	r8, r1
   3eda0:	sub	sp, sp, #68	; 0x44
   3eda4:	add	lr, r5, #4
   3eda8:	add	ip, sp, #28
   3edac:	ldr	r4, [r5, #4]
   3edb0:	ldm	lr!, {r0, r1, r2, r3}
   3edb4:	cmp	r4, #25
   3edb8:	ldrb	r9, [r5, #36]	; 0x24
   3edbc:	ldr	r5, [r5, #8]
   3edc0:	stmia	ip!, {r0, r1, r2, r3}
   3edc4:	ldm	lr!, {r0, r1, r2, r3}
   3edc8:	str	r5, [sp, #16]
   3edcc:	and	r5, r9, #1
   3edd0:	ubfx	r9, r9, #2, #1
   3edd4:	str	r5, [sp, #20]
   3edd8:	ldr	lr, [lr]
   3eddc:	stmia	ip!, {r0, r1, r2, r3}
   3ede0:	str	lr, [ip]
   3ede4:	bhi	3ee88 <__assert_fail@plt+0x2c6b0>
   3ede8:	sub	r3, r4, #1
   3edec:	cmp	r3, #23
   3edf0:	ldrls	pc, [pc, r3, lsl #2]
   3edf4:	b	3ee88 <__assert_fail@plt+0x2c6b0>
   3edf8:	andeq	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
   3edfc:	muleq	r3, r4, r2
   3ee00:	andeq	pc, r3, r8, ror r2	; <UNPREDICTABLE>
   3ee04:	andeq	pc, r3, r0, lsl r2	; <UNPREDICTABLE>
   3ee08:	andeq	pc, r3, r0, asr #3
   3ee0c:	andeq	pc, r3, ip, lsr r1	; <UNPREDICTABLE>
   3ee10:	ldrdeq	pc, [r3], -r4
   3ee14:	andeq	lr, r3, r8, asr lr
   3ee18:	andeq	pc, r3, r0, lsr #1
   3ee1c:	andeq	pc, r3, r4, lsl #1
   3ee20:	andeq	pc, r3, r8, rrx
   3ee24:	andeq	pc, r3, ip, asr #32
   3ee28:	andeq	pc, r3, r0, lsr r0	; <UNPREDICTABLE>
   3ee2c:	andeq	lr, r3, r8, lsl #29
   3ee30:	andeq	lr, r3, r8, lsl #29
   3ee34:	andeq	pc, r3, ip, lsr r1	; <UNPREDICTABLE>
   3ee38:	ldrdeq	pc, [r3], -r4
   3ee3c:	ldrdeq	pc, [r3], -r4
   3ee40:	muleq	r3, r4, r2
   3ee44:	andeq	pc, r3, ip, lsr r1	; <UNPREDICTABLE>
   3ee48:	andeq	pc, r3, r0, lsl r2	; <UNPREDICTABLE>
   3ee4c:	andeq	pc, r3, r0, asr #3
   3ee50:	andeq	pc, r3, r0, lsl r2	; <UNPREDICTABLE>
   3ee54:	andeq	pc, r3, r0, lsl r2	; <UNPREDICTABLE>
   3ee58:	movw	r1, #42216	; 0xa4e8
   3ee5c:	mov	r0, r8
   3ee60:	movt	r1, #5
   3ee64:	bl	12178 <strcmp@plt>
   3ee68:	cmp	r0, #0
   3ee6c:	beq	3f028 <__assert_fail@plt+0x2c850>
   3ee70:	movw	r1, #40256	; 0x9d40
   3ee74:	mov	r0, r8
   3ee78:	movt	r1, #5
   3ee7c:	bl	12178 <strcmp@plt>
   3ee80:	cmp	r0, #0
   3ee84:	beq	3f028 <__assert_fail@plt+0x2c850>
   3ee88:	mov	sl, #0
   3ee8c:	add	r0, r7, #96	; 0x60
   3ee90:	mov	r1, r8
   3ee94:	mov	r2, #1
   3ee98:	mov	r3, #0
   3ee9c:	bl	124cc <bfd_hash_lookup@plt>
   3eea0:	subs	fp, r0, #0
   3eea4:	beq	3efc0 <__assert_fail@plt+0x2c7e8>
   3eea8:	ldr	r3, [fp, #12]
   3eeac:	mov	r5, r9
   3eeb0:	cmp	r3, #0
   3eeb4:	bne	3eec8 <__assert_fail@plt+0x2c6f0>
   3eeb8:	b	3eefc <__assert_fail@plt+0x2c724>
   3eebc:	ldr	r3, [r3]
   3eec0:	cmp	r3, #0
   3eec4:	beq	3eefc <__assert_fail@plt+0x2c724>
   3eec8:	ldr	r2, [r3, #4]
   3eecc:	cmp	r2, r4
   3eed0:	movne	r5, #1
   3eed4:	bne	3eebc <__assert_fail@plt+0x2c6e4>
   3eed8:	ldrb	r2, [r3, #40]	; 0x28
   3eedc:	tst	r2, #4
   3eee0:	bne	3eebc <__assert_fail@plt+0x2c6e4>
   3eee4:	mov	r0, r7
   3eee8:	mov	r1, #0
   3eeec:	bl	3db28 <__assert_fail@plt+0x2b350>
   3eef0:	mov	r0, #1
   3eef4:	add	sp, sp, #68	; 0x44
   3eef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eefc:	mov	r0, #48	; 0x30
   3ef00:	bl	12358 <xmalloc@plt>
   3ef04:	mov	r1, #0
   3ef08:	mov	r2, #48	; 0x30
   3ef0c:	mov	r6, r0
   3ef10:	bl	12580 <memset@plt>
   3ef14:	ldr	r3, [sp, #16]
   3ef18:	add	lr, sp, #28
   3ef1c:	str	r4, [sp, #28]
   3ef20:	add	ip, r6, #8
   3ef24:	str	r4, [r6, #4]
   3ef28:	cmp	sl, #0
   3ef2c:	str	r3, [sp, #32]
   3ef30:	ldm	lr!, {r0, r1, r2, r3}
   3ef34:	ldrb	r4, [sp, #60]	; 0x3c
   3ef38:	stmia	ip!, {r0, r1, r2, r3}
   3ef3c:	ldr	r3, [sp, #20]
   3ef40:	bfi	r4, r3, #0, #1
   3ef44:	ldm	lr!, {r0, r1, r2, r3}
   3ef48:	bfi	r4, r9, #2, #1
   3ef4c:	strb	r4, [sp, #60]	; 0x3c
   3ef50:	mov	r9, #0
   3ef54:	ldr	r4, [fp, #12]
   3ef58:	ldr	lr, [lr]
   3ef5c:	stmia	ip!, {r0, r1, r2, r3}
   3ef60:	str	lr, [ip]
   3ef64:	ldrb	r3, [r6, #40]	; 0x28
   3ef68:	str	r8, [r6, #16]
   3ef6c:	bfi	r3, r5, #2, #1
   3ef70:	str	r9, [r6, #44]	; 0x2c
   3ef74:	strb	r3, [r6, #40]	; 0x28
   3ef78:	str	r4, [r6]
   3ef7c:	str	r6, [fp, #12]
   3ef80:	bne	3eee4 <__assert_fail@plt+0x2c70c>
   3ef84:	mov	r1, #1
   3ef88:	mov	r0, r7
   3ef8c:	bl	3db28 <__assert_fail@plt+0x2b350>
   3ef90:	ldr	r3, [sp, #20]
   3ef94:	mov	r1, r8
   3ef98:	str	r5, [sp, #4]
   3ef9c:	str	sl, [sp, #8]
   3efa0:	mvn	r2, #0
   3efa4:	str	r3, [sp]
   3efa8:	ldr	r3, [sp, #16]
   3efac:	mov	r4, r0
   3efb0:	mov	r0, r7
   3efb4:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   3efb8:	cmp	r0, r9
   3efbc:	bne	3efcc <__assert_fail@plt+0x2c7f4>
   3efc0:	mov	r0, #0
   3efc4:	add	sp, sp, #68	; 0x44
   3efc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3efcc:	mov	r0, r7
   3efd0:	mov	r2, #84	; 0x54
   3efd4:	mov	r3, #0
   3efd8:	bl	3d800 <__assert_fail@plt+0x2b028>
   3efdc:	cmp	r0, r9
   3efe0:	beq	3efc0 <__assert_fail@plt+0x2c7e8>
   3efe4:	mov	r2, r4
   3efe8:	mov	r3, sl
   3efec:	mov	r0, r7
   3eff0:	bl	3d800 <__assert_fail@plt+0x2b028>
   3eff4:	cmp	r0, r9
   3eff8:	beq	3efc0 <__assert_fail@plt+0x2c7e8>
   3effc:	mov	r0, r7
   3f000:	mov	r1, #1
   3f004:	bl	3db28 <__assert_fail@plt+0x2b350>
   3f008:	mov	r0, #1
   3f00c:	b	3efc4 <__assert_fail@plt+0x2c7ec>
   3f010:	movw	r1, #37032	; 0x90a8
   3f014:	mov	r0, r8
   3f018:	movt	r1, #5
   3f01c:	bl	12178 <strcmp@plt>
   3f020:	cmp	r0, #0
   3f024:	bne	3ee88 <__assert_fail@plt+0x2c6b0>
   3f028:	mov	sl, #1
   3f02c:	b	3ee8c <__assert_fail@plt+0x2c6b4>
   3f030:	movw	r1, #42236	; 0xa4fc
   3f034:	mov	r0, r8
   3f038:	movt	r1, #5
   3f03c:	bl	12178 <strcmp@plt>
   3f040:	cmp	r0, #0
   3f044:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f048:	b	3ee88 <__assert_fail@plt+0x2c6b0>
   3f04c:	movw	r1, #39688	; 0x9b08
   3f050:	mov	r0, r8
   3f054:	movt	r1, #5
   3f058:	bl	12178 <strcmp@plt>
   3f05c:	cmp	r0, #0
   3f060:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f064:	b	3ee88 <__assert_fail@plt+0x2c6b0>
   3f068:	movw	r1, #37212	; 0x915c
   3f06c:	mov	r0, r8
   3f070:	movt	r1, #5
   3f074:	bl	12178 <strcmp@plt>
   3f078:	cmp	r0, #0
   3f07c:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f080:	b	3ee88 <__assert_fail@plt+0x2c6b0>
   3f084:	movw	r1, #37204	; 0x9154
   3f088:	mov	r0, r8
   3f08c:	movt	r1, #5
   3f090:	bl	12178 <strcmp@plt>
   3f094:	cmp	r0, #0
   3f098:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f09c:	b	3ee88 <__assert_fail@plt+0x2c6b0>
   3f0a0:	movw	r1, #39872	; 0x9bc0
   3f0a4:	mov	r0, r8
   3f0a8:	movt	r1, #5
   3f0ac:	bl	12178 <strcmp@plt>
   3f0b0:	cmp	r0, #0
   3f0b4:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f0b8:	movw	r1, #40232	; 0x9d28
   3f0bc:	mov	r0, r8
   3f0c0:	movt	r1, #5
   3f0c4:	bl	12178 <strcmp@plt>
   3f0c8:	cmp	r0, #0
   3f0cc:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f0d0:	b	3ee88 <__assert_fail@plt+0x2c6b0>
   3f0d4:	movw	r1, #39672	; 0x9af8
   3f0d8:	mov	r0, r8
   3f0dc:	movt	r1, #5
   3f0e0:	bl	12178 <strcmp@plt>
   3f0e4:	cmp	r0, #0
   3f0e8:	beq	3f2d4 <__assert_fail@plt+0x2cafc>
   3f0ec:	movw	r1, #40272	; 0x9d50
   3f0f0:	mov	r0, r8
   3f0f4:	movt	r1, #5
   3f0f8:	bl	12178 <strcmp@plt>
   3f0fc:	cmp	r0, #0
   3f100:	beq	3f2d4 <__assert_fail@plt+0x2cafc>
   3f104:	movw	r1, #42204	; 0xa4dc
   3f108:	mov	r0, r8
   3f10c:	movt	r1, #5
   3f110:	bl	12178 <strcmp@plt>
   3f114:	cmp	r0, #0
   3f118:	beq	3f304 <__assert_fail@plt+0x2cb2c>
   3f11c:	movw	r1, #39656	; 0x9ae8
   3f120:	mov	r0, r8
   3f124:	movt	r1, #5
   3f128:	bl	12178 <strcmp@plt>
   3f12c:	cmp	r0, #0
   3f130:	bne	3ee88 <__assert_fail@plt+0x2c6b0>
   3f134:	mov	r4, #18
   3f138:	b	3f028 <__assert_fail@plt+0x2c850>
   3f13c:	movw	r1, #42192	; 0xa4d0
   3f140:	mov	r0, r8
   3f144:	movt	r1, #5
   3f148:	bl	12178 <strcmp@plt>
   3f14c:	cmp	r0, #0
   3f150:	beq	3f2e4 <__assert_fail@plt+0x2cb0c>
   3f154:	ldrb	r3, [r8]
   3f158:	cmp	r3, #105	; 0x69
   3f15c:	bne	3f188 <__assert_fail@plt+0x2c9b0>
   3f160:	ldrb	r3, [r8, #1]
   3f164:	cmp	r3, #110	; 0x6e
   3f168:	bne	3f188 <__assert_fail@plt+0x2c9b0>
   3f16c:	ldrb	r3, [r8, #2]
   3f170:	cmp	r3, #116	; 0x74
   3f174:	bne	3f188 <__assert_fail@plt+0x2c9b0>
   3f178:	ldrb	r3, [r8, #3]
   3f17c:	cmp	r3, #0
   3f180:	moveq	r4, #16
   3f184:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f188:	movw	r1, #42228	; 0xa4f4
   3f18c:	mov	r0, r8
   3f190:	movt	r1, #5
   3f194:	bl	12178 <strcmp@plt>
   3f198:	cmp	r0, #0
   3f19c:	beq	3f1b8 <__assert_fail@plt+0x2c9e0>
   3f1a0:	movw	r1, #40292	; 0x9d64
   3f1a4:	mov	r0, r8
   3f1a8:	movt	r1, #5
   3f1ac:	bl	12178 <strcmp@plt>
   3f1b0:	cmp	r0, #0
   3f1b4:	bne	3ee88 <__assert_fail@plt+0x2c6b0>
   3f1b8:	mov	r4, #20
   3f1bc:	b	3f028 <__assert_fail@plt+0x2c850>
   3f1c0:	movw	r1, #42172	; 0xa4bc
   3f1c4:	mov	r0, r8
   3f1c8:	movt	r1, #5
   3f1cc:	bl	12178 <strcmp@plt>
   3f1d0:	cmp	r0, #0
   3f1d4:	beq	3f2cc <__assert_fail@plt+0x2caf4>
   3f1d8:	movw	r1, #40304	; 0x9d70
   3f1dc:	mov	r0, r8
   3f1e0:	movt	r1, #5
   3f1e4:	bl	12178 <strcmp@plt>
   3f1e8:	cmp	r0, #0
   3f1ec:	beq	3f2cc <__assert_fail@plt+0x2caf4>
   3f1f0:	movw	r1, #39640	; 0x9ad8
   3f1f4:	mov	r0, r8
   3f1f8:	movt	r1, #5
   3f1fc:	bl	12178 <strcmp@plt>
   3f200:	cmp	r0, #0
   3f204:	bne	3ee88 <__assert_fail@plt+0x2c6b0>
   3f208:	mov	r4, #22
   3f20c:	b	3f028 <__assert_fail@plt+0x2c850>
   3f210:	movw	r1, #42136	; 0xa498
   3f214:	mov	r0, r8
   3f218:	movt	r1, #5
   3f21c:	bl	12178 <strcmp@plt>
   3f220:	cmp	r0, #0
   3f224:	beq	3f2dc <__assert_fail@plt+0x2cb04>
   3f228:	movw	r1, #39604	; 0x9ab4
   3f22c:	mov	r0, r8
   3f230:	movt	r1, #5
   3f234:	bl	12178 <strcmp@plt>
   3f238:	cmp	r0, #0
   3f23c:	beq	3f2f4 <__assert_fail@plt+0x2cb1c>
   3f240:	movw	r1, #40324	; 0x9d84
   3f244:	mov	r0, r8
   3f248:	movt	r1, #5
   3f24c:	bl	12178 <strcmp@plt>
   3f250:	cmp	r0, #0
   3f254:	beq	3f2fc <__assert_fail@plt+0x2cb24>
   3f258:	movw	r1, #42156	; 0xa4ac
   3f25c:	mov	r0, r8
   3f260:	movt	r1, #5
   3f264:	bl	12178 <strcmp@plt>
   3f268:	cmp	r0, #0
   3f26c:	bne	3ee88 <__assert_fail@plt+0x2c6b0>
   3f270:	mov	r4, #24
   3f274:	b	3f028 <__assert_fail@plt+0x2c850>
   3f278:	movw	r1, #39612	; 0x9abc
   3f27c:	mov	r0, r8
   3f280:	movt	r1, #5
   3f284:	bl	12178 <strcmp@plt>
   3f288:	cmp	r0, #0
   3f28c:	beq	3f028 <__assert_fail@plt+0x2c850>
   3f290:	b	3ee88 <__assert_fail@plt+0x2c6b0>
   3f294:	movw	r1, #39628	; 0x9acc
   3f298:	mov	r0, r8
   3f29c:	movt	r1, #5
   3f2a0:	bl	12178 <strcmp@plt>
   3f2a4:	cmp	r0, #0
   3f2a8:	beq	3f2ec <__assert_fail@plt+0x2cb14>
   3f2ac:	movw	r1, #55848	; 0xda28
   3f2b0:	mov	r0, r8
   3f2b4:	movt	r1, #5
   3f2b8:	bl	12178 <strcmp@plt>
   3f2bc:	cmp	r0, #0
   3f2c0:	bne	3ee88 <__assert_fail@plt+0x2c6b0>
   3f2c4:	mov	r4, #19
   3f2c8:	b	3f028 <__assert_fail@plt+0x2c850>
   3f2cc:	mov	r4, #5
   3f2d0:	b	3f028 <__assert_fail@plt+0x2c850>
   3f2d4:	mov	r4, #7
   3f2d8:	b	3f028 <__assert_fail@plt+0x2c850>
   3f2dc:	mov	r4, #4
   3f2e0:	b	3f028 <__assert_fail@plt+0x2c850>
   3f2e4:	mov	r4, #6
   3f2e8:	b	3f028 <__assert_fail@plt+0x2c850>
   3f2ec:	mov	r4, #2
   3f2f0:	b	3f028 <__assert_fail@plt+0x2c850>
   3f2f4:	mov	r4, #21
   3f2f8:	b	3f028 <__assert_fail@plt+0x2c850>
   3f2fc:	mov	r4, #23
   3f300:	b	3f028 <__assert_fail@plt+0x2c850>
   3f304:	mov	r4, #17
   3f308:	b	3f028 <__assert_fail@plt+0x2c850>
   3f30c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f310:	movw	r4, #65176	; 0xfe98
   3f314:	movt	r4, #6
   3f318:	subs	r6, r1, #0
   3f31c:	sub	sp, sp, #60	; 0x3c
   3f320:	mov	fp, r3
   3f324:	ldr	r1, [r4]
   3f328:	mov	r5, r0
   3f32c:	mov	r8, r2
   3f330:	movne	r3, #0
   3f334:	str	r1, [sp, #52]	; 0x34
   3f338:	movne	r1, r6
   3f33c:	beq	3f4f8 <__assert_fail@plt+0x2cd20>
   3f340:	add	r0, r5, #124	; 0x7c
   3f344:	mov	r2, #1
   3f348:	bl	124cc <bfd_hash_lookup@plt>
   3f34c:	subs	ip, r0, #0
   3f350:	beq	3f418 <__assert_fail@plt+0x2cc40>
   3f354:	ldr	r9, [ip, #12]
   3f358:	cmp	r9, #0
   3f35c:	beq	3f4a4 <__assert_fail@plt+0x2cccc>
   3f360:	mov	sl, #0
   3f364:	mov	r7, sl
   3f368:	ldr	r2, [r9, #4]
   3f36c:	cmp	r2, r8
   3f370:	moveq	sl, r9
   3f374:	beq	3f384 <__assert_fail@plt+0x2cbac>
   3f378:	ldrb	r2, [r9, #40]	; 0x28
   3f37c:	tst	r2, #4
   3f380:	moveq	r7, #1
   3f384:	ldr	r9, [r9]
   3f388:	cmp	r9, #0
   3f38c:	bne	3f368 <__assert_fail@plt+0x2cb90>
   3f390:	cmp	sl, #0
   3f394:	beq	3f4a8 <__assert_fail@plt+0x2ccd0>
   3f398:	ldrb	r2, [sl, #40]	; 0x28
   3f39c:	ubfx	r2, r2, #2, #1
   3f3a0:	cmp	r7, r2
   3f3a4:	bne	3f524 <__assert_fail@plt+0x2cd4c>
   3f3a8:	ldr	r2, [sl, #44]	; 0x2c
   3f3ac:	cmp	r2, #0
   3f3b0:	eoreq	r9, r7, #1
   3f3b4:	ldrne	r2, [sl, #8]
   3f3b8:	andeq	r9, r9, #1
   3f3bc:	ldreq	r2, [sl, #8]
   3f3c0:	mov	ip, #0
   3f3c4:	mov	r1, #1
   3f3c8:	str	ip, [sl, #44]	; 0x2c
   3f3cc:	add	r8, sp, #24
   3f3d0:	stm	sp, {r1, r7}
   3f3d4:	mov	r0, r5
   3f3d8:	str	r8, [sp, #8]
   3f3dc:	mov	r1, r6
   3f3e0:	ldr	r3, [sp, #96]	; 0x60
   3f3e4:	str	ip, [sp, #24]
   3f3e8:	str	ip, [sp, #28]
   3f3ec:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   3f3f0:	cmp	r0, #0
   3f3f4:	beq	3f418 <__assert_fail@plt+0x2cc40>
   3f3f8:	cmp	fp, #0
   3f3fc:	mov	r3, #0
   3f400:	mov	r0, r5
   3f404:	movne	r2, #83	; 0x53
   3f408:	moveq	r2, #85	; 0x55
   3f40c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f410:	cmp	r0, #0
   3f414:	bne	3f438 <__assert_fail@plt+0x2cc60>
   3f418:	mov	r3, #0
   3f41c:	ldr	r2, [sp, #52]	; 0x34
   3f420:	mov	r0, r3
   3f424:	ldr	r3, [r4]
   3f428:	cmp	r2, r3
   3f42c:	bne	3f520 <__assert_fail@plt+0x2cd48>
   3f430:	add	sp, sp, #60	; 0x3c
   3f434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f438:	ldr	r2, [sp, #96]	; 0x60
   3f43c:	mov	r0, r5
   3f440:	mov	r3, #0
   3f444:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f448:	cmp	r0, #0
   3f44c:	beq	3f418 <__assert_fail@plt+0x2cc40>
   3f450:	ldr	r7, [r5, #84]	; 0x54
   3f454:	cmp	r9, #0
   3f458:	addeq	ip, sl, #8
   3f45c:	addeq	r5, r7, #4
   3f460:	ldreq	fp, [sl, #16]
   3f464:	ldmeq	r5!, {r0, r1, r2, r3}
   3f468:	stmiaeq	ip!, {r0, r1, r2, r3}
   3f46c:	ldmeq	r5!, {r0, r1, r2, r3}
   3f470:	ldreq	r5, [r5]
   3f474:	stmiaeq	ip!, {r0, r1, r2, r3}
   3f478:	mov	r3, #1
   3f47c:	ldm	r8, {r0, r1}
   3f480:	streq	r5, [ip]
   3f484:	add	ip, r7, #24
   3f488:	ldrb	r2, [r7, #36]	; 0x24
   3f48c:	streq	fp, [sl, #16]
   3f490:	bfi	r2, r9, #3, #1
   3f494:	str	r6, [r7, #12]
   3f498:	stm	ip, {r0, r1}
   3f49c:	strb	r2, [r7, #36]	; 0x24
   3f4a0:	b	3f41c <__assert_fail@plt+0x2cc44>
   3f4a4:	mov	r7, r9
   3f4a8:	mov	r0, #48	; 0x30
   3f4ac:	str	ip, [sp, #20]
   3f4b0:	bl	12358 <xmalloc@plt>
   3f4b4:	mov	r9, #0
   3f4b8:	mov	r1, r9
   3f4bc:	mov	r2, #48	; 0x30
   3f4c0:	mov	sl, r0
   3f4c4:	bl	12580 <memset@plt>
   3f4c8:	ldr	ip, [sp, #20]
   3f4cc:	ldr	r2, [r5, #88]	; 0x58
   3f4d0:	ldr	r1, [ip, #4]
   3f4d4:	ldr	r0, [ip, #12]
   3f4d8:	str	r8, [sl, #4]
   3f4dc:	str	r1, [sl, #16]
   3f4e0:	add	r1, r2, #1
   3f4e4:	str	r0, [sl]
   3f4e8:	str	sl, [ip, #12]
   3f4ec:	str	r2, [sl, #8]
   3f4f0:	str	r1, [r5, #88]	; 0x58
   3f4f4:	b	3f3c0 <__assert_fail@plt+0x2cbe8>
   3f4f8:	str	r2, [sp]
   3f4fc:	mov	r1, #1
   3f500:	movw	r3, #41756	; 0xa31c
   3f504:	add	r0, sp, #32
   3f508:	movt	r3, #5
   3f50c:	mov	r2, #20
   3f510:	bl	12568 <__sprintf_chk@plt>
   3f514:	add	r1, sp, #32
   3f518:	mov	r3, #1
   3f51c:	b	3f340 <__assert_fail@plt+0x2cb68>
   3f520:	bl	122b0 <__stack_chk_fail@plt>
   3f524:	movw	r0, #42256	; 0xa510
   3f528:	movw	r1, #41948	; 0xa3dc
   3f52c:	movt	r0, #5
   3f530:	movt	r1, #5
   3f534:	movw	r2, #5876	; 0x16f4
   3f538:	ldr	r3, [pc]	; 3f540 <__assert_fail@plt+0x2cd68>
   3f53c:	bl	127d8 <__assert_fail@plt>
   3f540:	strdeq	sl, [r5], -r4
   3f544:	push	{r3, r4, r5, r6, r7, lr}
   3f548:	mov	r7, r1
   3f54c:	movw	r1, #58062	; 0xe2ce
   3f550:	mov	r4, r2
   3f554:	mov	r5, r3
   3f558:	mov	r6, r0
   3f55c:	bl	3d578 <__assert_fail@plt+0x2ada0>
   3f560:	cmp	r0, #0
   3f564:	bne	3f570 <__assert_fail@plt+0x2cd98>
   3f568:	mov	r0, #0
   3f56c:	pop	{r3, r4, r5, r6, r7, pc}
   3f570:	mov	r2, r7
   3f574:	mov	r0, r6
   3f578:	mov	r3, #0
   3f57c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f580:	cmp	r0, #0
   3f584:	beq	3f568 <__assert_fail@plt+0x2cd90>
   3f588:	mov	r0, r6
   3f58c:	mov	r2, r4
   3f590:	mov	r3, r5
   3f594:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f598:	adds	r0, r0, #0
   3f59c:	movne	r0, #1
   3f5a0:	pop	{r3, r4, r5, r6, r7, pc}
   3f5a4:	ldr	r3, [r0, #16]
   3f5a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3f5ac:	cmp	r3, #0
   3f5b0:	mov	r8, r0
   3f5b4:	mov	r9, r1
   3f5b8:	mov	sl, r2
   3f5bc:	ldrd	r4, [sp, #32]
   3f5c0:	beq	3fa44 <__assert_fail@plt+0x2d26c>
   3f5c4:	ldr	r0, [r0, #212]	; 0xd4
   3f5c8:	cmp	r0, #0
   3f5cc:	beq	3f870 <__assert_fail@plt+0x2d098>
   3f5d0:	ldrd	r6, [r8, #224]	; 0xe0
   3f5d4:	cmp	r7, r5
   3f5d8:	cmpeq	r6, r4
   3f5dc:	beq	3f870 <__assert_fail@plt+0x2d098>
   3f5e0:	ldr	r6, [r8, #64]	; 0x40
   3f5e4:	cmp	r6, #0
   3f5e8:	beq	3f884 <__assert_fail@plt+0x2d0ac>
   3f5ec:	ldr	r3, [r8, #68]	; 0x44
   3f5f0:	add	r2, r8, #64	; 0x40
   3f5f4:	ldr	r1, [r8, #204]	; 0xcc
   3f5f8:	str	r2, [r8, #8]
   3f5fc:	str	r3, [r8, #12]
   3f600:	bl	12208 <filename_cmp@plt>
   3f604:	cmp	r0, #0
   3f608:	beq	3f7c4 <__assert_fail@plt+0x2cfec>
   3f60c:	ldr	r0, [r8, #16]
   3f610:	ldr	r1, [r8, #204]	; 0xcc
   3f614:	bl	12208 <filename_cmp@plt>
   3f618:	cmp	r0, #0
   3f61c:	beq	3f6c4 <__assert_fail@plt+0x2ceec>
   3f620:	ldr	r3, [r8, #12]
   3f624:	movw	r1, #489	; 0x1e9
   3f628:	ldr	r2, [r3, #4]
   3f62c:	cmp	r2, r1
   3f630:	bhi	3f980 <__assert_fail@plt+0x2d1a8>
   3f634:	add	r1, r3, r2
   3f638:	mvn	r0, #6
   3f63c:	add	r2, r2, #1
   3f640:	str	r2, [r3, #4]
   3f644:	strb	r0, [r1, #8]
   3f648:	ldr	r0, [r8, #16]
   3f64c:	ldr	r1, [r8, #212]	; 0xd4
   3f650:	bl	12208 <filename_cmp@plt>
   3f654:	cmp	r0, #0
   3f658:	bne	3f6c4 <__assert_fail@plt+0x2ceec>
   3f65c:	ldr	r3, [r8, #12]
   3f660:	movw	ip, #489	; 0x1e9
   3f664:	ldr	r1, [r8, #92]	; 0x5c
   3f668:	ldr	r2, [r3, #4]
   3f66c:	add	r0, r1, #1
   3f670:	str	r1, [r8, #208]	; 0xd0
   3f674:	cmp	r2, ip
   3f678:	str	r0, [r8, #92]	; 0x5c
   3f67c:	bhi	3f9f0 <__assert_fail@plt+0x2d218>
   3f680:	add	r1, r3, r2
   3f684:	mvn	r0, #15
   3f688:	add	r2, r2, #1
   3f68c:	str	r2, [r3, #4]
   3f690:	strb	r0, [r1, #8]
   3f694:	mov	r0, r8
   3f698:	ldr	r2, [r8, #208]	; 0xd0
   3f69c:	mov	r3, #0
   3f6a0:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f6a4:	cmp	r0, #0
   3f6a8:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f6ac:	movw	r1, #11856	; 0x2e50
   3f6b0:	mov	r0, r8
   3f6b4:	movt	r1, #5
   3f6b8:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3f6bc:	cmp	r0, #0
   3f6c0:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f6c4:	ldr	r0, [r8, #16]
   3f6c8:	ldr	r1, [r8, #212]	; 0xd4
   3f6cc:	bl	12208 <filename_cmp@plt>
   3f6d0:	cmp	r0, #0
   3f6d4:	beq	3f7bc <__assert_fail@plt+0x2cfe4>
   3f6d8:	ldr	r3, [r8, #12]
   3f6dc:	movw	ip, #489	; 0x1e9
   3f6e0:	ldr	r1, [r8, #92]	; 0x5c
   3f6e4:	ldr	r2, [r3, #4]
   3f6e8:	add	r0, r1, #1
   3f6ec:	str	r1, [r8, #208]	; 0xd0
   3f6f0:	cmp	r2, ip
   3f6f4:	str	r0, [r8, #92]	; 0x5c
   3f6f8:	bhi	3f99c <__assert_fail@plt+0x2d1c4>
   3f6fc:	add	r1, r3, r2
   3f700:	mvn	r0, #7
   3f704:	add	r2, r2, #1
   3f708:	str	r2, [r3, #4]
   3f70c:	strb	r0, [r1, #8]
   3f710:	ldr	r3, [r8, #12]
   3f714:	movw	r1, #489	; 0x1e9
   3f718:	ldr	r2, [r3, #4]
   3f71c:	cmp	r2, r1
   3f720:	bhi	3f9d4 <__assert_fail@plt+0x2d1fc>
   3f724:	add	r1, r3, r2
   3f728:	mov	r0, #5
   3f72c:	add	r2, r2, #1
   3f730:	str	r2, [r3, #4]
   3f734:	strb	r0, [r1, #8]
   3f738:	mov	r0, r8
   3f73c:	mov	r2, #0
   3f740:	mov	r3, #0
   3f744:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f748:	cmp	r0, #0
   3f74c:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f750:	mov	r0, r8
   3f754:	ldr	r1, [r8, #212]	; 0xd4
   3f758:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3f75c:	cmp	r0, #0
   3f760:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f764:	ldr	r3, [r8, #12]
   3f768:	movw	r1, #489	; 0x1e9
   3f76c:	ldr	r2, [r3, #4]
   3f770:	cmp	r2, r1
   3f774:	bhi	3fa28 <__assert_fail@plt+0x2d250>
   3f778:	add	r1, r3, r2
   3f77c:	mvn	r0, #15
   3f780:	add	r2, r2, #1
   3f784:	str	r2, [r3, #4]
   3f788:	strb	r0, [r1, #8]
   3f78c:	mov	r0, r8
   3f790:	ldr	r2, [r8, #208]	; 0xd0
   3f794:	mov	r3, #0
   3f798:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f79c:	cmp	r0, #0
   3f7a0:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f7a4:	movw	r1, #11856	; 0x2e50
   3f7a8:	mov	r0, r8
   3f7ac:	movt	r1, #5
   3f7b0:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3f7b4:	cmp	r0, #0
   3f7b8:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f7bc:	ldr	r3, [r8, #212]	; 0xd4
   3f7c0:	str	r3, [r8, #204]	; 0xcc
   3f7c4:	mov	r0, r8
   3f7c8:	movw	r1, #61902	; 0xf1ce
   3f7cc:	bl	3d578 <__assert_fail@plt+0x2ada0>
   3f7d0:	cmp	r0, #0
   3f7d4:	bne	3f7e0 <__assert_fail@plt+0x2d008>
   3f7d8:	mov	r0, #0
   3f7dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f7e0:	mov	r0, r8
   3f7e4:	ldr	r2, [r8, #208]	; 0xd0
   3f7e8:	mov	r3, #0
   3f7ec:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f7f0:	cmp	r0, #0
   3f7f4:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f7f8:	mov	r0, r8
   3f7fc:	mov	r2, #0
   3f800:	mov	r3, #0
   3f804:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f808:	cmp	r0, #0
   3f80c:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f810:	mov	r0, r8
   3f814:	mov	r2, #7
   3f818:	mov	r3, #0
   3f81c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f820:	cmp	r0, #0
   3f824:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f828:	mov	r0, r8
   3f82c:	ldr	r2, [r8, #216]	; 0xd8
   3f830:	mov	r3, #0
   3f834:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f838:	cmp	r0, #0
   3f83c:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f840:	mov	r0, r8
   3f844:	mov	r2, #0
   3f848:	mov	r3, #0
   3f84c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f850:	cmp	r0, #0
   3f854:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f858:	mov	r0, r8
   3f85c:	ldr	r1, [r8, #208]	; 0xd0
   3f860:	ldrd	r2, [r8, #224]	; 0xe0
   3f864:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   3f868:	cmp	r0, #0
   3f86c:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f870:	str	r9, [r8, #212]	; 0xd4
   3f874:	mov	r0, #1
   3f878:	str	sl, [r8, #216]	; 0xd8
   3f87c:	strd	r4, [r8, #224]	; 0xe0
   3f880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f884:	ldr	r3, [r8, #92]	; 0x5c
   3f888:	mov	r0, #500	; 0x1f4
   3f88c:	add	r2, r3, #1
   3f890:	str	r2, [r8, #92]	; 0x5c
   3f894:	str	r3, [r8, #208]	; 0xd0
   3f898:	bl	12358 <xmalloc@plt>
   3f89c:	mvn	r3, #7
   3f8a0:	add	ip, r8, #64	; 0x40
   3f8a4:	mov	r2, #1
   3f8a8:	movw	r1, #489	; 0x1e9
   3f8ac:	str	r6, [r0]
   3f8b0:	str	r0, [r8, #12]
   3f8b4:	str	r0, [r8, #64]	; 0x40
   3f8b8:	str	r0, [r8, #68]	; 0x44
   3f8bc:	str	ip, [r8, #8]
   3f8c0:	strb	r3, [r0, #8]
   3f8c4:	ldr	r3, [r8, #12]
   3f8c8:	str	r2, [r0, #4]
   3f8cc:	ldr	r2, [r3, #4]
   3f8d0:	cmp	r2, r1
   3f8d4:	bhi	3f9b8 <__assert_fail@plt+0x2d1e0>
   3f8d8:	add	r1, r3, r2
   3f8dc:	mov	r0, #5
   3f8e0:	add	r2, r2, #1
   3f8e4:	str	r2, [r3, #4]
   3f8e8:	strb	r0, [r1, #8]
   3f8ec:	mov	r0, r8
   3f8f0:	mov	r2, #0
   3f8f4:	mov	r3, #0
   3f8f8:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f8fc:	cmp	r0, #0
   3f900:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f904:	mov	r0, r8
   3f908:	ldr	r1, [r8, #16]
   3f90c:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3f910:	cmp	r0, #0
   3f914:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f918:	ldr	r3, [r8, #12]
   3f91c:	movw	r1, #489	; 0x1e9
   3f920:	ldr	r2, [r3, #4]
   3f924:	cmp	r2, r1
   3f928:	bhi	3fa0c <__assert_fail@plt+0x2d234>
   3f92c:	add	r1, r3, r2
   3f930:	mvn	r0, #15
   3f934:	add	r2, r2, #1
   3f938:	str	r2, [r3, #4]
   3f93c:	strb	r0, [r1, #8]
   3f940:	mov	r0, r8
   3f944:	ldr	r2, [r8, #208]	; 0xd0
   3f948:	mov	r3, #0
   3f94c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3f950:	cmp	r0, #0
   3f954:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f958:	movw	r1, #11856	; 0x2e50
   3f95c:	mov	r0, r8
   3f960:	movt	r1, #5
   3f964:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3f968:	cmp	r0, #0
   3f96c:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f970:	ldr	r1, [r8, #16]
   3f974:	ldr	r0, [r8, #212]	; 0xd4
   3f978:	str	r1, [r8, #204]	; 0xcc
   3f97c:	b	3f600 <__assert_fail@plt+0x2ce28>
   3f980:	add	r0, r8, #8
   3f984:	add	r1, r8, #12
   3f988:	mov	r2, #249	; 0xf9
   3f98c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3f990:	cmp	r0, #0
   3f994:	beq	3f7d8 <__assert_fail@plt+0x2d000>
   3f998:	b	3f648 <__assert_fail@plt+0x2ce70>
   3f99c:	add	r0, r8, #8
   3f9a0:	add	r1, r8, #12
   3f9a4:	mov	r2, #248	; 0xf8
   3f9a8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3f9ac:	cmp	r0, #0
   3f9b0:	bne	3f710 <__assert_fail@plt+0x2cf38>
   3f9b4:	b	3f7d8 <__assert_fail@plt+0x2d000>
   3f9b8:	add	r0, r8, #8
   3f9bc:	add	r1, r8, #12
   3f9c0:	mov	r2, #5
   3f9c4:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3f9c8:	cmp	r0, #0
   3f9cc:	bne	3f8ec <__assert_fail@plt+0x2d114>
   3f9d0:	b	3f7d8 <__assert_fail@plt+0x2d000>
   3f9d4:	add	r0, r8, #8
   3f9d8:	add	r1, r8, #12
   3f9dc:	mov	r2, #5
   3f9e0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3f9e4:	cmp	r0, #0
   3f9e8:	bne	3f738 <__assert_fail@plt+0x2cf60>
   3f9ec:	b	3f7d8 <__assert_fail@plt+0x2d000>
   3f9f0:	add	r0, r8, #8
   3f9f4:	add	r1, r8, #12
   3f9f8:	mov	r2, #240	; 0xf0
   3f9fc:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3fa00:	cmp	r0, #0
   3fa04:	bne	3f694 <__assert_fail@plt+0x2cebc>
   3fa08:	b	3f7d8 <__assert_fail@plt+0x2d000>
   3fa0c:	add	r0, r8, #8
   3fa10:	add	r1, r8, #12
   3fa14:	mov	r2, #240	; 0xf0
   3fa18:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3fa1c:	cmp	r0, #0
   3fa20:	bne	3f940 <__assert_fail@plt+0x2d168>
   3fa24:	b	3f7d8 <__assert_fail@plt+0x2d000>
   3fa28:	add	r0, r8, #8
   3fa2c:	add	r1, r8, #12
   3fa30:	mov	r2, #240	; 0xf0
   3fa34:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3fa38:	cmp	r0, #0
   3fa3c:	bne	3f78c <__assert_fail@plt+0x2cfb4>
   3fa40:	b	3f7d8 <__assert_fail@plt+0x2d000>
   3fa44:	movw	r0, #42284	; 0xa52c
   3fa48:	movw	r1, #41948	; 0xa3dc
   3fa4c:	movt	r0, #5
   3fa50:	movt	r1, #5
   3fa54:	movw	r2, #7322	; 0x1c9a
   3fa58:	ldr	r3, [pc]	; 3fa60 <__assert_fail@plt+0x2d288>
   3fa5c:	bl	127d8 <__assert_fail@plt>
   3fa60:	andeq	sl, r5, ip, lsl #2
   3fa64:	ldr	r3, [r0, #40]	; 0x28
   3fa68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fa6c:	cmp	r3, #0
   3fa70:	sub	sp, sp, #20
   3fa74:	mov	r8, r0
   3fa78:	beq	3fab0 <__assert_fail@plt+0x2d2d8>
   3fa7c:	ldr	r3, [r0, #44]	; 0x2c
   3fa80:	add	r2, r0, #40	; 0x28
   3fa84:	str	r2, [r0, #8]
   3fa88:	movw	r1, #489	; 0x1e9
   3fa8c:	ldr	r2, [r3, #4]
   3fa90:	str	r3, [r0, #12]
   3fa94:	cmp	r2, r1
   3fa98:	bhi	3fb48 <__assert_fail@plt+0x2d370>
   3fa9c:	add	r1, r3, r2
   3faa0:	mvn	r0, #6
   3faa4:	add	r2, r2, #1
   3faa8:	str	r2, [r3, #4]
   3faac:	strb	r0, [r1, #8]
   3fab0:	ldr	r3, [r8, #56]	; 0x38
   3fab4:	cmp	r3, #0
   3fab8:	beq	3fb6c <__assert_fail@plt+0x2d394>
   3fabc:	ldr	r3, [r8, #48]	; 0x30
   3fac0:	cmp	r3, #0
   3fac4:	beq	40278 <__assert_fail@plt+0x2daa0>
   3fac8:	ldr	r3, [r8, #52]	; 0x34
   3facc:	movw	r1, #489	; 0x1e9
   3fad0:	add	r4, r8, #48	; 0x30
   3fad4:	str	r4, [r8, #8]
   3fad8:	ldr	r2, [r3, #4]
   3fadc:	str	r3, [r8, #12]
   3fae0:	cmp	r2, r1
   3fae4:	bhi	3ff5c <__assert_fail@plt+0x2d784>
   3fae8:	add	r1, r3, r2
   3faec:	mvn	r0, #7
   3faf0:	add	r2, r2, #1
   3faf4:	str	r2, [r3, #4]
   3faf8:	strb	r0, [r1, #8]
   3fafc:	ldr	r3, [r8, #12]
   3fb00:	movw	r1, #489	; 0x1e9
   3fb04:	ldr	r2, [r3, #4]
   3fb08:	cmp	r2, r1
   3fb0c:	bhi	3ff78 <__assert_fail@plt+0x2d7a0>
   3fb10:	add	r1, r3, r2
   3fb14:	mov	r0, #6
   3fb18:	add	r2, r2, #1
   3fb1c:	str	r2, [r3, #4]
   3fb20:	strb	r0, [r1, #8]
   3fb24:	mov	r0, r8
   3fb28:	mov	r2, #0
   3fb2c:	mov	r3, #0
   3fb30:	bl	3d800 <__assert_fail@plt+0x2b028>
   3fb34:	cmp	r0, #0
   3fb38:	bne	3fe70 <__assert_fail@plt+0x2d698>
   3fb3c:	mov	r0, #0
   3fb40:	add	sp, sp, #20
   3fb44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fb48:	add	r0, r0, #8
   3fb4c:	add	r1, r8, #12
   3fb50:	mov	r2, #249	; 0xf9
   3fb54:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3fb58:	cmp	r0, #0
   3fb5c:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fb60:	ldr	r3, [r8, #56]	; 0x38
   3fb64:	cmp	r3, #0
   3fb68:	bne	3fabc <__assert_fail@plt+0x2d2e4>
   3fb6c:	ldr	r3, [r8, #48]	; 0x30
   3fb70:	cmp	r3, #0
   3fb74:	beq	3fbac <__assert_fail@plt+0x2d3d4>
   3fb78:	ldr	r3, [r8, #52]	; 0x34
   3fb7c:	add	r2, r8, #48	; 0x30
   3fb80:	str	r2, [r8, #8]
   3fb84:	movw	r1, #489	; 0x1e9
   3fb88:	ldr	r2, [r3, #4]
   3fb8c:	str	r3, [r8, #12]
   3fb90:	cmp	r2, r1
   3fb94:	bhi	3ffd0 <__assert_fail@plt+0x2d7f8>
   3fb98:	add	r1, r3, r2
   3fb9c:	mvn	r0, #6
   3fba0:	add	r2, r2, #1
   3fba4:	str	r2, [r3, #4]
   3fba8:	strb	r0, [r1, #8]
   3fbac:	ldr	r3, [r8, #212]	; 0xd4
   3fbb0:	cmp	r3, #0
   3fbb4:	beq	3fbdc <__assert_fail@plt+0x2d404>
   3fbb8:	mov	r1, #0
   3fbbc:	mvn	r4, #0
   3fbc0:	mvn	r5, #0
   3fbc4:	mov	r2, r1
   3fbc8:	strd	r4, [sp]
   3fbcc:	mov	r0, r8
   3fbd0:	bl	3f5a4 <__assert_fail@plt+0x2cdcc>
   3fbd4:	cmp	r0, #0
   3fbd8:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fbdc:	ldr	r3, [r8, #64]	; 0x40
   3fbe0:	cmp	r3, #0
   3fbe4:	beq	3fc5c <__assert_fail@plt+0x2d484>
   3fbe8:	ldr	r3, [r8, #68]	; 0x44
   3fbec:	add	r2, r8, #64	; 0x40
   3fbf0:	str	r2, [r8, #8]
   3fbf4:	movw	r1, #489	; 0x1e9
   3fbf8:	ldr	r2, [r3, #4]
   3fbfc:	str	r3, [r8, #12]
   3fc00:	cmp	r2, r1
   3fc04:	bhi	3ffec <__assert_fail@plt+0x2d814>
   3fc08:	add	r1, r3, r2
   3fc0c:	mvn	r0, #6
   3fc10:	add	r2, r2, #1
   3fc14:	str	r2, [r3, #4]
   3fc18:	strb	r0, [r1, #8]
   3fc1c:	ldr	r0, [r8, #16]
   3fc20:	ldr	r1, [r8, #204]	; 0xcc
   3fc24:	bl	12208 <filename_cmp@plt>
   3fc28:	cmp	r0, #0
   3fc2c:	beq	3ffac <__assert_fail@plt+0x2d7d4>
   3fc30:	ldr	r3, [r8, #12]
   3fc34:	movw	r1, #489	; 0x1e9
   3fc38:	ldr	r2, [r3, #4]
   3fc3c:	cmp	r2, r1
   3fc40:	bhi	3ff94 <__assert_fail@plt+0x2d7bc>
   3fc44:	add	r1, r3, r2
   3fc48:	mvn	r0, #6
   3fc4c:	add	r2, r2, #1
   3fc50:	str	r2, [r3, #4]
   3fc54:	strb	r0, [r1, #8]
   3fc58:	ldr	r3, [r8, #64]	; 0x40
   3fc5c:	ldr	r4, [r8, #40]	; 0x28
   3fc60:	cmp	r4, #0
   3fc64:	ldreq	r4, [r8, #32]
   3fc68:	beq	3fc8c <__assert_fail@plt+0x2d4b4>
   3fc6c:	ldr	r2, [r8, #32]
   3fc70:	cmp	r2, #0
   3fc74:	streq	r4, [r8, #32]
   3fc78:	ldrne	r1, [r8, #36]	; 0x24
   3fc7c:	strne	r4, [r1]
   3fc80:	movne	r4, r2
   3fc84:	ldr	r2, [r8, #44]	; 0x2c
   3fc88:	str	r2, [r8, #36]	; 0x24
   3fc8c:	ldr	r2, [r8, #48]	; 0x30
   3fc90:	cmp	r2, #0
   3fc94:	beq	3fcb8 <__assert_fail@plt+0x2d4e0>
   3fc98:	cmp	r4, #0
   3fc9c:	streq	r2, [r8, #32]
   3fca0:	ldrne	r1, [r8, #36]	; 0x24
   3fca4:	moveq	r4, r2
   3fca8:	ldrne	r4, [r8, #32]
   3fcac:	strne	r2, [r1]
   3fcb0:	ldr	r2, [r8, #52]	; 0x34
   3fcb4:	str	r2, [r8, #36]	; 0x24
   3fcb8:	cmp	r3, #0
   3fcbc:	beq	3fce0 <__assert_fail@plt+0x2d508>
   3fcc0:	cmp	r4, #0
   3fcc4:	streq	r3, [r8, #32]
   3fcc8:	ldrne	r2, [r8, #36]	; 0x24
   3fccc:	moveq	r4, r3
   3fcd0:	ldrne	r4, [r8, #32]
   3fcd4:	strne	r3, [r2]
   3fcd8:	ldr	r3, [r8, #68]	; 0x44
   3fcdc:	str	r3, [r8, #36]	; 0x24
   3fce0:	cmp	r4, #0
   3fce4:	add	r5, r8, #32
   3fce8:	beq	40024 <__assert_fail@plt+0x2d84c>
   3fcec:	ldr	r3, [r8, #36]	; 0x24
   3fcf0:	movw	r1, #489	; 0x1e9
   3fcf4:	ldr	r2, [r3, #4]
   3fcf8:	str	r3, [r8, #12]
   3fcfc:	cmp	r2, r1
   3fd00:	str	r5, [r8, #8]
   3fd04:	bhi	3ffb4 <__assert_fail@plt+0x2d7dc>
   3fd08:	add	r1, r3, r2
   3fd0c:	mvn	r0, #7
   3fd10:	add	r2, r2, #1
   3fd14:	str	r2, [r3, #4]
   3fd18:	strb	r0, [r1, #8]
   3fd1c:	ldr	r3, [r8, #12]
   3fd20:	movw	r1, #489	; 0x1e9
   3fd24:	ldr	r2, [r3, #4]
   3fd28:	cmp	r2, r1
   3fd2c:	bhi	40008 <__assert_fail@plt+0x2d830>
   3fd30:	add	r1, r3, r2
   3fd34:	mov	r0, #10
   3fd38:	add	r2, r2, #1
   3fd3c:	str	r2, [r3, #4]
   3fd40:	strb	r0, [r1, #8]
   3fd44:	mov	r0, r8
   3fd48:	mov	r2, #0
   3fd4c:	mov	r3, #0
   3fd50:	bl	3d800 <__assert_fail@plt+0x2b028>
   3fd54:	cmp	r0, #0
   3fd58:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fd5c:	mov	r0, r8
   3fd60:	ldr	r1, [r8, #20]
   3fd64:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3fd68:	cmp	r0, #0
   3fd6c:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fd70:	movw	r1, #11856	; 0x2e50
   3fd74:	mov	r0, r8
   3fd78:	movt	r1, #5
   3fd7c:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3fd80:	cmp	r0, #0
   3fd84:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fd88:	mov	r0, r8
   3fd8c:	mov	r2, #0
   3fd90:	mov	r3, #0
   3fd94:	bl	3d800 <__assert_fail@plt+0x2b028>
   3fd98:	cmp	r0, #0
   3fd9c:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fda0:	movw	r1, #42368	; 0xa580
   3fda4:	mov	r0, r8
   3fda8:	movt	r1, #5
   3fdac:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3fdb0:	cmp	r0, #0
   3fdb4:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fdb8:	ldr	sl, [r8, #72]	; 0x48
   3fdbc:	cmp	sl, #0
   3fdc0:	addne	ip, r8, #8
   3fdc4:	movne	fp, ip
   3fdc8:	beq	3fe40 <__assert_fail@plt+0x2d668>
   3fdcc:	ldr	r3, [r8]
   3fdd0:	ldrd	r0, [sl, #8]
   3fdd4:	ldrd	r6, [sl, #16]
   3fdd8:	ldr	r9, [r3, #100]	; 0x64
   3fddc:	strd	r0, [sp, #8]
   3fde0:	cmp	r9, #0
   3fde4:	beq	3fe34 <__assert_fail@plt+0x2d65c>
   3fde8:	mov	r4, sl
   3fdec:	mov	ip, fp
   3fdf0:	mov	sl, r0
   3fdf4:	mov	fp, r1
   3fdf8:	ldrd	r2, [r9, #32]
   3fdfc:	cmp	fp, r3
   3fe00:	cmpeq	sl, r2
   3fe04:	bcc	3fe20 <__assert_fail@plt+0x2d648>
   3fe08:	ldrd	r0, [r9, #48]	; 0x30
   3fe0c:	adds	r2, r2, r0
   3fe10:	adc	r3, r3, r1
   3fe14:	cmp	r7, r3
   3fe18:	cmpeq	r6, r2
   3fe1c:	bls	4006c <__assert_fail@plt+0x2d894>
   3fe20:	ldr	r9, [r9, #12]
   3fe24:	cmp	r9, #0
   3fe28:	bne	3fdf8 <__assert_fail@plt+0x2d620>
   3fe2c:	mov	sl, r4
   3fe30:	mov	fp, ip
   3fe34:	ldr	sl, [sl]
   3fe38:	cmp	sl, #0
   3fe3c:	bne	3fdcc <__assert_fail@plt+0x2d5f4>
   3fe40:	ldr	r3, [r8, #12]
   3fe44:	movw	r1, #489	; 0x1e9
   3fe48:	ldr	r2, [r3, #4]
   3fe4c:	cmp	r2, r1
   3fe50:	bhi	40294 <__assert_fail@plt+0x2dabc>
   3fe54:	add	r1, r3, r2
   3fe58:	mvn	r0, #6
   3fe5c:	add	r2, r2, #1
   3fe60:	str	r2, [r3, #4]
   3fe64:	strb	r0, [r1, #8]
   3fe68:	mov	r0, #1
   3fe6c:	b	3fb40 <__assert_fail@plt+0x2d368>
   3fe70:	movw	r1, #42356	; 0xa574
   3fe74:	mov	r0, r8
   3fe78:	movt	r1, #5
   3fe7c:	bl	3d610 <__assert_fail@plt+0x2ae38>
   3fe80:	cmp	r0, #0
   3fe84:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fe88:	mov	r0, r8
   3fe8c:	mov	r2, #0
   3fe90:	mov	r3, #0
   3fe94:	bl	3d800 <__assert_fail@plt+0x2b028>
   3fe98:	cmp	r0, #0
   3fe9c:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fea0:	mov	r0, r8
   3fea4:	mov	r2, #0
   3fea8:	mov	r3, #0
   3feac:	bl	3d800 <__assert_fail@plt+0x2b028>
   3feb0:	cmp	r0, #0
   3feb4:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3feb8:	ldrd	r2, [r8, #232]	; 0xe8
   3febc:	mov	r0, r8
   3fec0:	subs	r2, r2, #1
   3fec4:	sbc	r3, r3, #0
   3fec8:	bl	3d800 <__assert_fail@plt+0x2b028>
   3fecc:	cmp	r0, #0
   3fed0:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3fed4:	ldr	r5, [r8, #56]	; 0x38
   3fed8:	cmp	r5, #0
   3fedc:	ldreq	r5, [r8, #48]	; 0x30
   3fee0:	beq	3ff04 <__assert_fail@plt+0x2d72c>
   3fee4:	ldr	r3, [r8, #48]	; 0x30
   3fee8:	cmp	r3, #0
   3feec:	streq	r5, [r8, #48]	; 0x30
   3fef0:	ldrne	r2, [r8, #52]	; 0x34
   3fef4:	strne	r5, [r2]
   3fef8:	movne	r5, r3
   3fefc:	ldr	r3, [r8, #60]	; 0x3c
   3ff00:	str	r3, [r8, #52]	; 0x34
   3ff04:	cmp	r5, #0
   3ff08:	beq	4025c <__assert_fail@plt+0x2da84>
   3ff0c:	ldr	r3, [r8, #52]	; 0x34
   3ff10:	movw	r1, #489	; 0x1e9
   3ff14:	str	r4, [r8, #8]
   3ff18:	ldr	r2, [r3, #4]
   3ff1c:	str	r3, [r8, #12]
   3ff20:	cmp	r2, r1
   3ff24:	bhi	40050 <__assert_fail@plt+0x2d878>
   3ff28:	add	r1, r3, r2
   3ff2c:	mvn	r0, #6
   3ff30:	add	r2, r2, #1
   3ff34:	str	r2, [r3, #4]
   3ff38:	strb	r0, [r1, #8]
   3ff3c:	ldrd	r2, [r8, #232]	; 0xe8
   3ff40:	mov	r0, r8
   3ff44:	subs	r2, r2, #1
   3ff48:	sbc	r3, r3, #0
   3ff4c:	bl	3d800 <__assert_fail@plt+0x2b028>
   3ff50:	cmp	r0, #0
   3ff54:	bne	3fb6c <__assert_fail@plt+0x2d394>
   3ff58:	b	3fb3c <__assert_fail@plt+0x2d364>
   3ff5c:	add	r0, r8, #8
   3ff60:	add	r1, r8, #12
   3ff64:	mov	r2, #248	; 0xf8
   3ff68:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ff6c:	cmp	r0, #0
   3ff70:	bne	3fafc <__assert_fail@plt+0x2d324>
   3ff74:	b	3fb3c <__assert_fail@plt+0x2d364>
   3ff78:	add	r0, r8, #8
   3ff7c:	add	r1, r8, #12
   3ff80:	mov	r2, #6
   3ff84:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ff88:	cmp	r0, #0
   3ff8c:	bne	3fb24 <__assert_fail@plt+0x2d34c>
   3ff90:	b	3fb3c <__assert_fail@plt+0x2d364>
   3ff94:	add	r0, r8, #8
   3ff98:	add	r1, r8, #12
   3ff9c:	mov	r2, #249	; 0xf9
   3ffa0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ffa4:	cmp	r0, #0
   3ffa8:	beq	3fb3c <__assert_fail@plt+0x2d364>
   3ffac:	ldr	r3, [r8, #64]	; 0x40
   3ffb0:	b	3fc5c <__assert_fail@plt+0x2d484>
   3ffb4:	add	r0, r8, #8
   3ffb8:	add	r1, r8, #12
   3ffbc:	mov	r2, #248	; 0xf8
   3ffc0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ffc4:	cmp	r0, #0
   3ffc8:	bne	3fd1c <__assert_fail@plt+0x2d544>
   3ffcc:	b	3fb3c <__assert_fail@plt+0x2d364>
   3ffd0:	add	r0, r8, #8
   3ffd4:	add	r1, r8, #12
   3ffd8:	mov	r2, #249	; 0xf9
   3ffdc:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3ffe0:	cmp	r0, #0
   3ffe4:	bne	3fbac <__assert_fail@plt+0x2d3d4>
   3ffe8:	b	3fb3c <__assert_fail@plt+0x2d364>
   3ffec:	add	r0, r8, #8
   3fff0:	add	r1, r8, #12
   3fff4:	mov	r2, #249	; 0xf9
   3fff8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   3fffc:	cmp	r0, #0
   40000:	bne	3fc1c <__assert_fail@plt+0x2d444>
   40004:	b	3fb3c <__assert_fail@plt+0x2d364>
   40008:	add	r0, r8, #8
   4000c:	add	r1, r8, #12
   40010:	mov	r2, #10
   40014:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   40018:	cmp	r0, #0
   4001c:	bne	3fd44 <__assert_fail@plt+0x2d56c>
   40020:	b	3fb3c <__assert_fail@plt+0x2d364>
   40024:	mov	r0, #500	; 0x1f4
   40028:	bl	12358 <xmalloc@plt>
   4002c:	mov	r2, r4
   40030:	str	r4, [r0]
   40034:	mov	r3, r0
   40038:	str	r4, [r0, #4]
   4003c:	str	r0, [r8, #32]
   40040:	str	r0, [r8, #36]	; 0x24
   40044:	str	r0, [r8, #12]
   40048:	str	r5, [r8, #8]
   4004c:	b	3fd08 <__assert_fail@plt+0x2d530>
   40050:	add	r0, r8, #8
   40054:	add	r1, r8, #12
   40058:	mov	r2, #249	; 0xf9
   4005c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   40060:	cmp	r0, #0
   40064:	bne	3ff3c <__assert_fail@plt+0x2d764>
   40068:	b	3fb3c <__assert_fail@plt+0x2d364>
   4006c:	mov	sl, r4
   40070:	mov	r5, r3
   40074:	mov	r4, r2
   40078:	mov	fp, ip
   4007c:	b	400b4 <__assert_fail@plt+0x2d8dc>
   40080:	adds	r0, r6, #4096	; 0x1000
   40084:	ldrd	r2, [ip, #8]
   40088:	adc	r1, r7, #0
   4008c:	cmp	r1, r3
   40090:	cmpeq	r0, r2
   40094:	bcc	400c0 <__assert_fail@plt+0x2d8e8>
   40098:	ldrd	r2, [ip, #16]
   4009c:	cmp	r5, r3
   400a0:	cmpeq	r4, r2
   400a4:	bcc	400c0 <__assert_fail@plt+0x2d8e8>
   400a8:	mov	sl, ip
   400ac:	mov	r6, r2
   400b0:	mov	r7, r3
   400b4:	ldr	ip, [sl]
   400b8:	cmp	ip, #0
   400bc:	bne	40080 <__assert_fail@plt+0x2d8a8>
   400c0:	ldr	r3, [r9, #20]
   400c4:	tst	r3, #16
   400c8:	movne	r4, #1
   400cc:	bne	400dc <__assert_fail@plt+0x2d904>
   400d0:	tst	r3, #8
   400d4:	moveq	r4, #2
   400d8:	movne	r4, #3
   400dc:	ldr	r3, [r8, #12]
   400e0:	movw	r1, #489	; 0x1e9
   400e4:	ldr	r2, [r3, #4]
   400e8:	cmp	r2, r1
   400ec:	bhi	40208 <__assert_fail@plt+0x2da30>
   400f0:	add	r1, r3, r2
   400f4:	add	r2, r2, #1
   400f8:	str	r2, [r3, #4]
   400fc:	mvn	r3, #7
   40100:	strb	r3, [r1, #8]
   40104:	ldr	r3, [r8, #12]
   40108:	movw	r0, #489	; 0x1e9
   4010c:	ldr	r2, [r3, #4]
   40110:	cmp	r2, r0
   40114:	bhi	40224 <__assert_fail@plt+0x2da4c>
   40118:	add	r1, r3, r2
   4011c:	add	r2, r2, #1
   40120:	str	r2, [r3, #4]
   40124:	mov	r3, #11
   40128:	strb	r3, [r1, #8]
   4012c:	mov	r0, r8
   40130:	mov	r2, #0
   40134:	mov	r3, #0
   40138:	bl	3d800 <__assert_fail@plt+0x2b028>
   4013c:	cmp	r0, #0
   40140:	beq	3fb3c <__assert_fail@plt+0x2d364>
   40144:	movw	r1, #11856	; 0x2e50
   40148:	mov	r0, r8
   4014c:	movt	r1, #5
   40150:	bl	3d610 <__assert_fail@plt+0x2ae38>
   40154:	cmp	r0, #0
   40158:	beq	3fb3c <__assert_fail@plt+0x2d364>
   4015c:	mov	r0, r8
   40160:	mov	r2, r4
   40164:	asr	r3, r4, #31
   40168:	bl	3d800 <__assert_fail@plt+0x2b028>
   4016c:	cmp	r0, #0
   40170:	beq	3fb3c <__assert_fail@plt+0x2d364>
   40174:	ldr	r2, [r9, #8]
   40178:	mov	r0, r8
   4017c:	mov	r3, #0
   40180:	add	r2, r2, #1
   40184:	bl	3d800 <__assert_fail@plt+0x2b028>
   40188:	cmp	r0, #0
   4018c:	beq	3fb3c <__assert_fail@plt+0x2d364>
   40190:	mov	r0, r8
   40194:	ldrd	r2, [sp, #8]
   40198:	bl	3d800 <__assert_fail@plt+0x2b028>
   4019c:	cmp	r0, #0
   401a0:	beq	3fb3c <__assert_fail@plt+0x2d364>
   401a4:	ldr	r3, [r8, #12]
   401a8:	movw	r1, #489	; 0x1e9
   401ac:	ldr	r2, [r3, #4]
   401b0:	cmp	r2, r1
   401b4:	bhi	40240 <__assert_fail@plt+0x2da68>
   401b8:	add	r1, r3, r2
   401bc:	mvn	r0, #6
   401c0:	add	r2, r2, #1
   401c4:	str	r2, [r3, #4]
   401c8:	strb	r0, [r1, #8]
   401cc:	ldrd	r2, [sp, #8]
   401d0:	mov	r0, r8
   401d4:	subs	r2, r6, r2
   401d8:	sbc	r3, r7, r3
   401dc:	bl	3d800 <__assert_fail@plt+0x2b028>
   401e0:	cmp	r0, #0
   401e4:	beq	3fb3c <__assert_fail@plt+0x2d364>
   401e8:	strd	r6, [sp]
   401ec:	mov	r0, r8
   401f0:	ldrd	r2, [sp, #8]
   401f4:	mov	r1, #1
   401f8:	bl	3cee4 <__assert_fail@plt+0x2a70c>
   401fc:	cmp	r0, #0
   40200:	bne	3fe34 <__assert_fail@plt+0x2d65c>
   40204:	b	3fb3c <__assert_fail@plt+0x2d364>
   40208:	mov	r0, fp
   4020c:	add	r1, r8, #12
   40210:	mov	r2, #248	; 0xf8
   40214:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   40218:	cmp	r0, #0
   4021c:	bne	40104 <__assert_fail@plt+0x2d92c>
   40220:	b	3fb3c <__assert_fail@plt+0x2d364>
   40224:	mov	r0, fp
   40228:	add	r1, r8, #12
   4022c:	mov	r2, #11
   40230:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   40234:	cmp	r0, #0
   40238:	bne	4012c <__assert_fail@plt+0x2d954>
   4023c:	b	3fb3c <__assert_fail@plt+0x2d364>
   40240:	mov	r0, fp
   40244:	add	r1, r8, #12
   40248:	mov	r2, #249	; 0xf9
   4024c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   40250:	cmp	r0, #0
   40254:	bne	401cc <__assert_fail@plt+0x2d9f4>
   40258:	b	3fb3c <__assert_fail@plt+0x2d364>
   4025c:	mov	r0, #500	; 0x1f4
   40260:	bl	12358 <xmalloc@plt>
   40264:	str	r5, [r0]
   40268:	str	r5, [r0, #4]
   4026c:	str	r0, [r8, #48]	; 0x30
   40270:	str	r0, [r8, #52]	; 0x34
   40274:	b	3ff0c <__assert_fail@plt+0x2d734>
   40278:	movw	r0, #42316	; 0xa54c
   4027c:	movw	r1, #41948	; 0xa3dc
   40280:	movt	r0, #5
   40284:	movt	r1, #5
   40288:	movw	r2, #4902	; 0x1326
   4028c:	ldr	r3, [pc, #28]	; 402b0 <__assert_fail@plt+0x2dad8>
   40290:	bl	127d8 <__assert_fail@plt>
   40294:	add	r0, r8, #8
   40298:	add	r1, r8, #12
   4029c:	mov	r2, #249	; 0xf9
   402a0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   402a4:	cmp	r0, #0
   402a8:	beq	3fb3c <__assert_fail@plt+0x2d364>
   402ac:	b	3fe68 <__assert_fail@plt+0x2d690>
   402b0:	andeq	sl, r5, r8, lsl r1
   402b4:	ldr	r3, [r0, #16]
   402b8:	push	{r4, r5, r6, lr}
   402bc:	cmp	r3, #0
   402c0:	mov	r4, r0
   402c4:	mov	r5, r1
   402c8:	beq	402d8 <__assert_fail@plt+0x2db00>
   402cc:	bl	3fa64 <__assert_fail@plt+0x2d28c>
   402d0:	cmp	r0, #0
   402d4:	beq	403a8 <__assert_fail@plt+0x2dbd0>
   402d8:	str	r5, [r4, #16]
   402dc:	mov	r0, r5
   402e0:	mov	r1, #47	; 0x2f
   402e4:	bl	1267c <strrchr@plt>
   402e8:	cmp	r0, #0
   402ec:	addne	r5, r0, #1
   402f0:	mov	r0, r5
   402f4:	bl	1237c <xstrdup@plt>
   402f8:	mov	r1, #46	; 0x2e
   402fc:	mov	r5, r0
   40300:	bl	1267c <strrchr@plt>
   40304:	cmp	r0, #0
   40308:	movne	r3, #0
   4030c:	strbne	r3, [r0]
   40310:	str	r5, [r4, #20]
   40314:	mov	r0, #500	; 0x1f4
   40318:	mov	r5, #0
   4031c:	str	r5, [r4, #40]	; 0x28
   40320:	str	r5, [r4, #44]	; 0x2c
   40324:	str	r5, [r4, #48]	; 0x30
   40328:	str	r5, [r4, #52]	; 0x34
   4032c:	str	r5, [r4, #56]	; 0x38
   40330:	str	r5, [r4, #60]	; 0x3c
   40334:	str	r5, [r4, #64]	; 0x40
   40338:	str	r5, [r4, #68]	; 0x44
   4033c:	str	r5, [r4, #72]	; 0x48
   40340:	bl	12358 <xmalloc@plt>
   40344:	add	r1, r4, #40	; 0x28
   40348:	mvn	r3, #7
   4034c:	mov	r2, #1
   40350:	movw	ip, #489	; 0x1e9
   40354:	str	r5, [r0]
   40358:	str	r0, [r4, #12]
   4035c:	str	r1, [r4, #8]
   40360:	str	r0, [r4, #40]	; 0x28
   40364:	str	r0, [r4, #44]	; 0x2c
   40368:	strb	r3, [r0, #8]
   4036c:	ldr	r3, [r4, #12]
   40370:	str	r2, [r0, #4]
   40374:	ldr	r1, [r3, #4]
   40378:	cmp	r1, ip
   4037c:	bhi	40468 <__assert_fail@plt+0x2dc90>
   40380:	add	r0, r3, r1
   40384:	add	r1, r1, r2
   40388:	str	r1, [r3, #4]
   4038c:	strb	r2, [r0, #8]
   40390:	mov	r0, r4
   40394:	mov	r2, #0
   40398:	mov	r3, #0
   4039c:	bl	3d800 <__assert_fail@plt+0x2b028>
   403a0:	cmp	r0, #0
   403a4:	bne	403b0 <__assert_fail@plt+0x2dbd8>
   403a8:	mov	r0, #0
   403ac:	pop	{r4, r5, r6, pc}
   403b0:	mov	r0, r4
   403b4:	ldr	r1, [r4, #20]
   403b8:	bl	3d610 <__assert_fail@plt+0x2ae38>
   403bc:	cmp	r0, #0
   403c0:	beq	403a8 <__assert_fail@plt+0x2dbd0>
   403c4:	ldr	r5, [r4, #48]	; 0x30
   403c8:	add	r6, r4, #48	; 0x30
   403cc:	ldr	r3, [r4, #92]	; 0x5c
   403d0:	cmp	r5, #0
   403d4:	add	r3, r3, #1
   403d8:	str	r3, [r4, #92]	; 0x5c
   403dc:	beq	404b8 <__assert_fail@plt+0x2dce0>
   403e0:	ldr	r3, [r4, #52]	; 0x34
   403e4:	movw	r1, #489	; 0x1e9
   403e8:	ldr	r2, [r3, #4]
   403ec:	str	r3, [r4, #12]
   403f0:	cmp	r2, r1
   403f4:	str	r6, [r4, #8]
   403f8:	bhi	40480 <__assert_fail@plt+0x2dca8>
   403fc:	add	r1, r3, r2
   40400:	mvn	r0, #7
   40404:	add	r2, r2, #1
   40408:	str	r2, [r3, #4]
   4040c:	strb	r0, [r1, #8]
   40410:	ldr	r3, [r4, #12]
   40414:	movw	r1, #489	; 0x1e9
   40418:	ldr	r2, [r3, #4]
   4041c:	cmp	r2, r1
   40420:	bhi	4049c <__assert_fail@plt+0x2dcc4>
   40424:	add	r1, r3, r2
   40428:	mov	r0, #3
   4042c:	add	r2, r2, #1
   40430:	str	r2, [r3, #4]
   40434:	strb	r0, [r1, #8]
   40438:	mov	r0, r4
   4043c:	mov	r2, #0
   40440:	mov	r3, #0
   40444:	bl	3d800 <__assert_fail@plt+0x2b028>
   40448:	cmp	r0, #0
   4044c:	beq	403a8 <__assert_fail@plt+0x2dbd0>
   40450:	mov	r0, r4
   40454:	ldr	r1, [r4, #20]
   40458:	bl	3d610 <__assert_fail@plt+0x2ae38>
   4045c:	adds	r0, r0, #0
   40460:	movne	r0, #1
   40464:	pop	{r4, r5, r6, pc}
   40468:	add	r0, r4, #8
   4046c:	add	r1, r4, #12
   40470:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   40474:	cmp	r0, #0
   40478:	bne	40390 <__assert_fail@plt+0x2dbb8>
   4047c:	b	403a8 <__assert_fail@plt+0x2dbd0>
   40480:	add	r0, r4, #8
   40484:	add	r1, r4, #12
   40488:	mov	r2, #248	; 0xf8
   4048c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   40490:	cmp	r0, #0
   40494:	bne	40410 <__assert_fail@plt+0x2dc38>
   40498:	b	403a8 <__assert_fail@plt+0x2dbd0>
   4049c:	add	r0, r4, #8
   404a0:	add	r1, r4, #12
   404a4:	mov	r2, #3
   404a8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   404ac:	cmp	r0, #0
   404b0:	bne	40438 <__assert_fail@plt+0x2dc60>
   404b4:	b	403a8 <__assert_fail@plt+0x2dbd0>
   404b8:	mov	r0, #500	; 0x1f4
   404bc:	bl	12358 <xmalloc@plt>
   404c0:	mov	r2, r5
   404c4:	str	r5, [r0]
   404c8:	mov	r3, r0
   404cc:	str	r5, [r0, #4]
   404d0:	str	r0, [r4, #48]	; 0x30
   404d4:	str	r0, [r4, #52]	; 0x34
   404d8:	str	r0, [r4, #12]
   404dc:	str	r6, [r4, #8]
   404e0:	b	403fc <__assert_fail@plt+0x2dc24>
   404e4:	push	{r3, lr}
   404e8:	ldr	r3, [r0, #84]	; 0x54
   404ec:	cmp	r3, #0
   404f0:	beq	4051c <__assert_fail@plt+0x2dd44>
   404f4:	ldr	r3, [r3, #32]
   404f8:	cmp	r3, #0
   404fc:	beq	4051c <__assert_fail@plt+0x2dd44>
   40500:	ldr	r2, [r3, #32]
   40504:	cmp	r2, #0
   40508:	beq	4051c <__assert_fail@plt+0x2dd44>
   4050c:	mov	r2, #0
   40510:	mov	r0, #1
   40514:	str	r2, [r3, #32]
   40518:	pop	{r3, pc}
   4051c:	movw	r0, #42380	; 0xa58c
   40520:	movw	r1, #41948	; 0xa3dc
   40524:	movt	r0, #5
   40528:	movt	r1, #5
   4052c:	movw	r2, #6393	; 0x18f9
   40530:	ldr	r3, [pc]	; 40538 <__assert_fail@plt+0x2dd60>
   40534:	bl	127d8 <__assert_fail@plt>
   40538:	andeq	sl, r5, r8, lsr r1
   4053c:	push	{r3, lr}
   40540:	ldr	r3, [r0, #84]	; 0x54
   40544:	cmp	r3, #0
   40548:	beq	40570 <__assert_fail@plt+0x2dd98>
   4054c:	ldr	r3, [r3, #32]
   40550:	cmp	r3, #0
   40554:	beq	40570 <__assert_fail@plt+0x2dd98>
   40558:	ldr	r2, [r3, #32]
   4055c:	cmp	r2, #0
   40560:	bne	40570 <__assert_fail@plt+0x2dd98>
   40564:	str	r1, [r3, #32]
   40568:	mov	r0, #1
   4056c:	pop	{r3, pc}
   40570:	movw	r0, #42520	; 0xa618
   40574:	movw	r1, #41948	; 0xa3dc
   40578:	movt	r0, #5
   4057c:	movt	r1, #5
   40580:	movw	r2, #6281	; 0x1889
   40584:	ldr	r3, [pc]	; 4058c <__assert_fail@plt+0x2ddb4>
   40588:	bl	127d8 <__assert_fail@plt>
   4058c:	andeq	sl, r5, r0, asr r1
   40590:	push	{r3, r4, r5, r6, r7, lr}
   40594:	mov	r7, r1
   40598:	ldr	r4, [r1]
   4059c:	mov	r5, r2
   405a0:	mov	r6, r0
   405a4:	cmp	r4, r2
   405a8:	bhi	4060c <__assert_fail@plt+0x2de34>
   405ac:	cmp	r4, #0
   405b0:	bne	405c8 <__assert_fail@plt+0x2ddf0>
   405b4:	cmp	r2, #15
   405b8:	movls	r1, #320	; 0x140
   405bc:	movls	r4, #16
   405c0:	bls	405dc <__assert_fail@plt+0x2de04>
   405c4:	mov	r4, #16
   405c8:	lsl	r4, r4, #1
   405cc:	cmp	r5, r4
   405d0:	bcs	405c8 <__assert_fail@plt+0x2ddf0>
   405d4:	add	r1, r4, r4, lsl #2
   405d8:	lsl	r1, r1, #2
   405dc:	ldr	r0, [r6]
   405e0:	bl	122c8 <xrealloc@plt>
   405e4:	ldr	r3, [r7]
   405e8:	mov	r1, #0
   405ec:	rsb	r2, r3, r4
   405f0:	add	r3, r3, r3, lsl #2
   405f4:	add	r2, r2, r2, lsl #2
   405f8:	lsl	r2, r2, #2
   405fc:	str	r0, [r6]
   40600:	add	r0, r0, r3, lsl #2
   40604:	bl	12580 <memset@plt>
   40608:	str	r4, [r7]
   4060c:	add	r5, r5, r5, lsl #2
   40610:	ldr	r0, [r6]
   40614:	add	r0, r0, r5, lsl #2
   40618:	pop	{r3, r4, r5, r6, r7, pc}
   4061c:	ldr	r3, [r0, #84]	; 0x54
   40620:	mov	r1, #1
   40624:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   40628:	sub	sp, sp, #16
   4062c:	ldrb	ip, [r3, #36]	; 0x24
   40630:	mov	r4, r0
   40634:	ldr	r7, [r3, #8]
   40638:	ubfx	r5, ip, #2, #1
   4063c:	and	r8, ip, r1
   40640:	bl	3db28 <__assert_fail@plt+0x2b350>
   40644:	cmp	r5, #0
   40648:	mov	r9, r0
   4064c:	bne	4068c <__assert_fail@plt+0x2deb4>
   40650:	add	r0, r4, #156	; 0x9c
   40654:	add	r1, r4, #160	; 0xa0
   40658:	mov	r2, r9
   4065c:	bl	40590 <__assert_fail@plt+0x2ddb8>
   40660:	subs	sl, r0, #0
   40664:	beq	406bc <__assert_fail@plt+0x2dee4>
   40668:	ldr	r1, [sl, #12]
   4066c:	cmp	r1, #0
   40670:	beq	40690 <__assert_fail@plt+0x2deb8>
   40674:	str	r5, [sp]
   40678:	add	r0, r4, #84	; 0x54
   4067c:	mov	r2, r7
   40680:	mov	r3, r8
   40684:	bl	3d038 <__assert_fail@plt+0x2a860>
   40688:	b	406c0 <__assert_fail@plt+0x2dee8>
   4068c:	mov	sl, #0
   40690:	mov	r6, #0
   40694:	str	r8, [sp]
   40698:	str	r5, [sp, #4]
   4069c:	mov	r3, r7
   406a0:	str	r6, [sp, #8]
   406a4:	mov	r1, r6
   406a8:	mov	r0, r4
   406ac:	mvn	r2, #0
   406b0:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   406b4:	cmp	r0, r6
   406b8:	bne	406c8 <__assert_fail@plt+0x2def0>
   406bc:	mov	r0, #0
   406c0:	add	sp, sp, #16
   406c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   406c8:	mov	r0, r4
   406cc:	mov	r2, #110	; 0x6e
   406d0:	mov	r3, #0
   406d4:	bl	3d800 <__assert_fail@plt+0x2b028>
   406d8:	cmp	r0, r6
   406dc:	beq	406bc <__assert_fail@plt+0x2dee4>
   406e0:	mov	r0, r4
   406e4:	mov	r2, #2
   406e8:	mov	r3, #0
   406ec:	bl	3d800 <__assert_fail@plt+0x2b028>
   406f0:	cmp	r0, r6
   406f4:	beq	406bc <__assert_fail@plt+0x2dee4>
   406f8:	mov	r2, r9
   406fc:	mov	r3, r6
   40700:	mov	r0, r4
   40704:	bl	3d800 <__assert_fail@plt+0x2b028>
   40708:	cmp	r0, r6
   4070c:	beq	406bc <__assert_fail@plt+0x2dee4>
   40710:	cmp	r5, r6
   40714:	ldreq	r3, [r4, #84]	; 0x54
   40718:	moveq	r0, #1
   4071c:	movne	r0, #1
   40720:	ldreq	r3, [r3, #4]
   40724:	streq	r3, [sl, #12]
   40728:	b	406c0 <__assert_fail@plt+0x2dee8>
   4072c:	ldr	r3, [r0, #84]	; 0x54
   40730:	mov	r1, #1
   40734:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   40738:	sub	sp, sp, #16
   4073c:	ldrb	ip, [r3, #36]	; 0x24
   40740:	mov	r4, r0
   40744:	ldr	r7, [r3, #8]
   40748:	ubfx	r5, ip, #2, #1
   4074c:	and	r8, ip, r1
   40750:	bl	3db28 <__assert_fail@plt+0x2b350>
   40754:	cmp	r5, #0
   40758:	mov	r9, r0
   4075c:	bne	4079c <__assert_fail@plt+0x2dfc4>
   40760:	add	r0, r4, #156	; 0x9c
   40764:	add	r1, r4, #160	; 0xa0
   40768:	mov	r2, r9
   4076c:	bl	40590 <__assert_fail@plt+0x2ddb8>
   40770:	subs	sl, r0, #0
   40774:	beq	407cc <__assert_fail@plt+0x2dff4>
   40778:	ldr	r1, [sl, #8]
   4077c:	cmp	r1, #0
   40780:	beq	407a0 <__assert_fail@plt+0x2dfc8>
   40784:	str	r5, [sp]
   40788:	add	r0, r4, #84	; 0x54
   4078c:	mov	r2, r7
   40790:	mov	r3, r8
   40794:	bl	3d038 <__assert_fail@plt+0x2a860>
   40798:	b	407d0 <__assert_fail@plt+0x2dff8>
   4079c:	mov	sl, #0
   407a0:	mov	r6, #0
   407a4:	str	r8, [sp]
   407a8:	str	r5, [sp, #4]
   407ac:	mov	r3, r7
   407b0:	str	r6, [sp, #8]
   407b4:	mov	r1, r6
   407b8:	mov	r0, r4
   407bc:	mvn	r2, #0
   407c0:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   407c4:	cmp	r0, r6
   407c8:	bne	407d8 <__assert_fail@plt+0x2e000>
   407cc:	mov	r0, #0
   407d0:	add	sp, sp, #16
   407d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   407d8:	mov	r0, r4
   407dc:	mov	r2, #110	; 0x6e
   407e0:	mov	r3, #0
   407e4:	bl	3d800 <__assert_fail@plt+0x2b028>
   407e8:	cmp	r0, r6
   407ec:	beq	407cc <__assert_fail@plt+0x2dff4>
   407f0:	mov	r0, r4
   407f4:	mov	r2, #1
   407f8:	mov	r3, #0
   407fc:	bl	3d800 <__assert_fail@plt+0x2b028>
   40800:	cmp	r0, r6
   40804:	beq	407cc <__assert_fail@plt+0x2dff4>
   40808:	mov	r2, r9
   4080c:	mov	r3, r6
   40810:	mov	r0, r4
   40814:	bl	3d800 <__assert_fail@plt+0x2b028>
   40818:	cmp	r0, r6
   4081c:	beq	407cc <__assert_fail@plt+0x2dff4>
   40820:	cmp	r5, r6
   40824:	ldreq	r3, [r4, #84]	; 0x54
   40828:	moveq	r0, #1
   4082c:	movne	r0, #1
   40830:	ldreq	r3, [r3, #4]
   40834:	streq	r3, [sl, #8]
   40838:	b	407d0 <__assert_fail@plt+0x2dff8>
   4083c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40840:	sub	sp, sp, #28
   40844:	mov	r8, r0
   40848:	mov	r1, #0
   4084c:	mov	r4, r2
   40850:	mov	r5, r3
   40854:	ldrd	r6, [sp, #64]	; 0x40
   40858:	bl	3db28 <__assert_fail@plt+0x2b350>
   4085c:	ldr	r3, [r8, #84]	; 0x54
   40860:	mov	r1, #1
   40864:	mov	r0, r8
   40868:	ldrb	r9, [r3, #36]	; 0x24
   4086c:	ldr	fp, [r3, #8]
   40870:	bl	3db28 <__assert_fail@plt+0x2b350>
   40874:	cmp	r4, r6
   40878:	sbcs	r1, r5, r7
   4087c:	ubfx	r9, r9, #2, #1
   40880:	mov	sl, r0
   40884:	bge	4089c <__assert_fail@plt+0x2e0c4>
   40888:	mov	r2, r6
   4088c:	mov	r3, r7
   40890:	subs	r2, r2, r4
   40894:	sbc	r3, r3, r5
   40898:	mla	fp, fp, r2, fp
   4089c:	cmp	r9, #0
   408a0:	bne	40920 <__assert_fail@plt+0x2e148>
   408a4:	add	r0, r8, #156	; 0x9c
   408a8:	add	r1, r8, #160	; 0xa0
   408ac:	mov	r2, sl
   408b0:	bl	40590 <__assert_fail@plt+0x2ddb8>
   408b4:	cmp	r0, #0
   408b8:	str	r0, [sp, #20]
   408bc:	beq	40970 <__assert_fail@plt+0x2e198>
   408c0:	ldr	r2, [sp, #20]
   408c4:	ldr	r3, [r2, #16]
   408c8:	cmp	r3, #0
   408cc:	bne	408e0 <__assert_fail@plt+0x2e108>
   408d0:	b	40928 <__assert_fail@plt+0x2e150>
   408d4:	ldr	r3, [r3]
   408d8:	cmp	r3, #0
   408dc:	beq	40928 <__assert_fail@plt+0x2e150>
   408e0:	ldrd	r0, [r3, #8]
   408e4:	cmp	r1, r5
   408e8:	cmpeq	r0, r4
   408ec:	bne	408d4 <__assert_fail@plt+0x2e0fc>
   408f0:	ldrd	r0, [r3, #16]
   408f4:	cmp	r1, r7
   408f8:	cmpeq	r0, r6
   408fc:	bne	408d4 <__assert_fail@plt+0x2e0fc>
   40900:	ldr	r1, [r3, #4]
   40904:	add	r0, r8, #84	; 0x54
   40908:	mov	r3, #0
   4090c:	mov	r2, fp
   40910:	str	r3, [sp, #64]	; 0x40
   40914:	add	sp, sp, #28
   40918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4091c:	b	3d038 <__assert_fail@plt+0x2a860>
   40920:	mov	r3, #0
   40924:	str	r3, [sp, #20]
   40928:	mov	r1, #0
   4092c:	str	r9, [sp, #4]
   40930:	mov	r3, fp
   40934:	str	r1, [sp]
   40938:	str	r1, [sp, #8]
   4093c:	mov	r0, r8
   40940:	mvn	r2, #0
   40944:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   40948:	cmp	r0, #0
   4094c:	beq	40970 <__assert_fail@plt+0x2e198>
   40950:	orrs	r1, r4, r5
   40954:	mov	r3, #0
   40958:	mov	r0, r8
   4095c:	moveq	r2, #90	; 0x5a
   40960:	movne	r2, #67	; 0x43
   40964:	bl	3d800 <__assert_fail@plt+0x2b028>
   40968:	cmp	r0, #0
   4096c:	bne	4097c <__assert_fail@plt+0x2e1a4>
   40970:	mov	r0, #0
   40974:	add	sp, sp, #28
   40978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4097c:	mov	r2, sl
   40980:	mov	r0, r8
   40984:	mov	r3, #0
   40988:	bl	3d800 <__assert_fail@plt+0x2b028>
   4098c:	cmp	r0, #0
   40990:	beq	40970 <__assert_fail@plt+0x2e198>
   40994:	orrs	r2, r4, r5
   40998:	beq	409b4 <__assert_fail@plt+0x2e1dc>
   4099c:	mov	r0, r8
   409a0:	mov	r2, r4
   409a4:	mov	r3, r5
   409a8:	bl	3d800 <__assert_fail@plt+0x2b028>
   409ac:	cmp	r0, #0
   409b0:	beq	40970 <__assert_fail@plt+0x2e198>
   409b4:	adds	r2, r6, #1
   409b8:	mov	r0, r8
   409bc:	adc	r3, r7, #0
   409c0:	bl	3d800 <__assert_fail@plt+0x2b028>
   409c4:	cmp	r0, #0
   409c8:	beq	40970 <__assert_fail@plt+0x2e198>
   409cc:	cmp	r9, #0
   409d0:	movne	r0, #1
   409d4:	bne	40974 <__assert_fail@plt+0x2e19c>
   409d8:	mov	r0, #24
   409dc:	bl	12358 <xmalloc@plt>
   409e0:	mov	r1, r9
   409e4:	mov	r2, #24
   409e8:	mov	sl, r0
   409ec:	bl	12580 <memset@plt>
   409f0:	ldr	r2, [r8, #84]	; 0x54
   409f4:	mov	r0, #1
   409f8:	ldr	r1, [sp, #20]
   409fc:	ldr	r2, [r2, #4]
   40a00:	ldr	r3, [r1, #16]
   40a04:	strd	r4, [sl, #8]
   40a08:	strd	r6, [sl, #16]
   40a0c:	str	r2, [sl, #4]
   40a10:	str	r3, [sl]
   40a14:	str	sl, [r1, #16]
   40a18:	b	40974 <__assert_fail@plt+0x2e19c>
   40a1c:	ldr	r3, [r0, #84]	; 0x54
   40a20:	mov	r1, #1
   40a24:	push	{r4, r5, r6, r7, r8, r9, lr}
   40a28:	sub	sp, sp, #20
   40a2c:	ldrb	r6, [r3, #36]	; 0x24
   40a30:	mov	r4, r0
   40a34:	bl	3db28 <__assert_fail@plt+0x2b350>
   40a38:	ubfx	r6, r6, #2, #1
   40a3c:	cmp	r0, #31
   40a40:	mov	r5, r0
   40a44:	bls	40b14 <__assert_fail@plt+0x2e33c>
   40a48:	cmp	r6, #0
   40a4c:	beq	40a8c <__assert_fail@plt+0x2e2b4>
   40a50:	mov	r9, #0
   40a54:	mov	r7, #0
   40a58:	mov	r8, #1
   40a5c:	stmib	sp, {r6, r7}
   40a60:	mov	r1, r7
   40a64:	mov	r0, r4
   40a68:	str	r8, [sp]
   40a6c:	mvn	r2, #0
   40a70:	mov	r3, #4
   40a74:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   40a78:	cmp	r0, r7
   40a7c:	bne	40ac8 <__assert_fail@plt+0x2e2f0>
   40a80:	mov	r0, #0
   40a84:	add	sp, sp, #20
   40a88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   40a8c:	add	r0, r4, #156	; 0x9c
   40a90:	add	r1, r4, #160	; 0xa0
   40a94:	mov	r2, r5
   40a98:	bl	40590 <__assert_fail@plt+0x2ddb8>
   40a9c:	subs	r9, r0, #0
   40aa0:	beq	40a80 <__assert_fail@plt+0x2e2a8>
   40aa4:	ldr	r1, [r9]
   40aa8:	cmp	r1, #0
   40aac:	beq	40a54 <__assert_fail@plt+0x2e27c>
   40ab0:	str	r6, [sp]
   40ab4:	add	r0, r4, #84	; 0x54
   40ab8:	mov	r2, #4
   40abc:	mov	r3, #1
   40ac0:	bl	3d038 <__assert_fail@plt+0x2a860>
   40ac4:	b	40a84 <__assert_fail@plt+0x2e2ac>
   40ac8:	mov	r0, r4
   40acc:	mov	r2, #80	; 0x50
   40ad0:	mov	r3, #0
   40ad4:	bl	3d800 <__assert_fail@plt+0x2b028>
   40ad8:	cmp	r0, r7
   40adc:	beq	40a80 <__assert_fail@plt+0x2e2a8>
   40ae0:	mov	r2, r5
   40ae4:	mov	r3, r7
   40ae8:	mov	r0, r4
   40aec:	bl	3d800 <__assert_fail@plt+0x2b028>
   40af0:	cmp	r0, r7
   40af4:	beq	40a80 <__assert_fail@plt+0x2e2a8>
   40af8:	cmp	r6, r7
   40afc:	ldreq	r3, [r4, #84]	; 0x54
   40b00:	moveq	r0, r8
   40b04:	movne	r0, r8
   40b08:	ldreq	r3, [r3, #4]
   40b0c:	streq	r3, [r9]
   40b10:	b	40a84 <__assert_fail@plt+0x2e2ac>
   40b14:	mov	r2, #0
   40b18:	add	r0, r4, #84	; 0x54
   40b1c:	add	r1, r5, #32
   40b20:	str	r2, [sp]
   40b24:	mov	r3, #1
   40b28:	bl	3d038 <__assert_fail@plt+0x2a860>
   40b2c:	add	sp, sp, #20
   40b30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   40b34:	push	{r4, lr}
   40b38:	mov	r4, r0
   40b3c:	bl	40a1c <__assert_fail@plt+0x2e244>
   40b40:	cmp	r0, #0
   40b44:	ldrne	r3, [r4, #84]	; 0x54
   40b48:	movne	r0, #1
   40b4c:	ldrbne	r2, [r3, #36]	; 0x24
   40b50:	orrne	r2, r2, #2
   40b54:	strbne	r2, [r3, #36]	; 0x24
   40b58:	pop	{r4, pc}
   40b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40b60:	movw	r6, #65176	; 0xfe98
   40b64:	movt	r6, #6
   40b68:	sub	sp, sp, #52	; 0x34
   40b6c:	subs	r8, r1, #0
   40b70:	mov	r4, r0
   40b74:	ldr	r3, [r6]
   40b78:	str	r2, [sp, #28]
   40b7c:	str	r3, [sp, #44]	; 0x2c
   40b80:	ble	40d8c <__assert_fail@plt+0x2e5b4>
   40b84:	lsl	sl, r8, #2
   40b88:	sub	r7, r8, #1
   40b8c:	mov	r5, #0
   40b90:	mov	r0, sl
   40b94:	bl	12358 <xmalloc@plt>
   40b98:	add	sl, r0, sl
   40b9c:	mov	r9, r0
   40ba0:	ldr	r3, [r4, #84]	; 0x54
   40ba4:	mov	r1, #1
   40ba8:	mov	r0, r4
   40bac:	sub	r7, r7, #1
   40bb0:	ldrb	r3, [r3, #36]	; 0x24
   40bb4:	tst	r3, #4
   40bb8:	movne	r5, r1
   40bbc:	bl	3db28 <__assert_fail@plt+0x2b350>
   40bc0:	cmn	r7, #1
   40bc4:	str	r0, [sl, #-4]!
   40bc8:	bne	40ba0 <__assert_fail@plt+0x2e3c8>
   40bcc:	ldr	r3, [r4, #84]	; 0x54
   40bd0:	mov	r0, r4
   40bd4:	mov	r1, #1
   40bd8:	ldrb	r7, [r3, #36]	; 0x24
   40bdc:	ubfx	r7, r7, #2, #1
   40be0:	cmp	r7, #0
   40be4:	bne	40c38 <__assert_fail@plt+0x2e460>
   40be8:	bl	3db28 <__assert_fail@plt+0x2b350>
   40bec:	eor	r3, r5, #1
   40bf0:	ands	r3, r3, r8, lsr #31
   40bf4:	mov	sl, r0
   40bf8:	beq	40e14 <__assert_fail@plt+0x2e63c>
   40bfc:	add	r0, r4, #156	; 0x9c
   40c00:	add	r1, r4, #160	; 0xa0
   40c04:	mov	r2, sl
   40c08:	bl	40590 <__assert_fail@plt+0x2ddb8>
   40c0c:	subs	fp, r0, #0
   40c10:	beq	40ca4 <__assert_fail@plt+0x2e4cc>
   40c14:	ldr	r1, [fp, #4]
   40c18:	cmp	r1, #0
   40c1c:	beq	40c48 <__assert_fail@plt+0x2e470>
   40c20:	str	r7, [sp]
   40c24:	add	r0, r4, #84	; 0x54
   40c28:	mov	r2, r7
   40c2c:	mov	r3, #1
   40c30:	bl	3d038 <__assert_fail@plt+0x2a860>
   40c34:	b	40ca8 <__assert_fail@plt+0x2e4d0>
   40c38:	bl	3db28 <__assert_fail@plt+0x2b350>
   40c3c:	mov	r5, #1
   40c40:	mov	fp, #0
   40c44:	mov	sl, r0
   40c48:	mov	r7, #0
   40c4c:	str	r5, [sp, #4]
   40c50:	mov	r2, #1
   40c54:	mov	r1, r7
   40c58:	str	r2, [sp]
   40c5c:	mov	r3, r7
   40c60:	add	r5, sp, #36	; 0x24
   40c64:	mov	r0, r4
   40c68:	str	r5, [sp, #8]
   40c6c:	mvn	r2, #0
   40c70:	str	r7, [sp, #36]	; 0x24
   40c74:	str	r7, [sp, #40]	; 0x28
   40c78:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   40c7c:	cmp	r0, r7
   40c80:	beq	40c9c <__assert_fail@plt+0x2e4c4>
   40c84:	mov	r0, r4
   40c88:	mov	r2, #120	; 0x78
   40c8c:	mov	r3, #0
   40c90:	bl	3d800 <__assert_fail@plt+0x2b028>
   40c94:	cmp	r0, #0
   40c98:	bne	40cc0 <__assert_fail@plt+0x2e4e8>
   40c9c:	mov	r0, r9
   40ca0:	bl	121f0 <free@plt>
   40ca4:	mov	r0, #0
   40ca8:	ldr	r2, [sp, #44]	; 0x2c
   40cac:	ldr	r3, [r6]
   40cb0:	cmp	r2, r3
   40cb4:	bne	40e10 <__assert_fail@plt+0x2e638>
   40cb8:	add	sp, sp, #52	; 0x34
   40cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40cc0:	mov	r0, r4
   40cc4:	mov	r2, #65	; 0x41
   40cc8:	mov	r3, #0
   40ccc:	bl	3d800 <__assert_fail@plt+0x2b028>
   40cd0:	cmp	r0, #0
   40cd4:	beq	40c9c <__assert_fail@plt+0x2e4c4>
   40cd8:	mov	r0, r4
   40cdc:	mov	r2, #0
   40ce0:	mov	r3, #0
   40ce4:	bl	3d800 <__assert_fail@plt+0x2b028>
   40ce8:	cmp	r0, #0
   40cec:	beq	40c9c <__assert_fail@plt+0x2e4c4>
   40cf0:	mov	r0, r4
   40cf4:	mov	r2, #0
   40cf8:	mov	r3, #0
   40cfc:	bl	3d800 <__assert_fail@plt+0x2b028>
   40d00:	cmp	r0, #0
   40d04:	beq	40c9c <__assert_fail@plt+0x2e4c4>
   40d08:	mov	r2, sl
   40d0c:	mov	r0, r4
   40d10:	mov	r3, r7
   40d14:	bl	3d800 <__assert_fail@plt+0x2b028>
   40d18:	cmp	r0, #0
   40d1c:	beq	40c9c <__assert_fail@plt+0x2e4c4>
   40d20:	ldr	r2, [sp, #28]
   40d24:	mov	r3, #0
   40d28:	mov	r0, r4
   40d2c:	adds	r2, r2, #0
   40d30:	movne	r2, #1
   40d34:	str	r2, [sp, #28]
   40d38:	uxtb	r2, r2
   40d3c:	strd	r2, [sp, #16]
   40d40:	adds	r2, r2, r8
   40d44:	adc	r3, r3, r8, asr #31
   40d48:	bl	3d800 <__assert_fail@plt+0x2b028>
   40d4c:	cmp	r0, #0
   40d50:	beq	40c9c <__assert_fail@plt+0x2e4c4>
   40d54:	cmp	r8, #0
   40d58:	ble	40dac <__assert_fail@plt+0x2e5d4>
   40d5c:	sub	sl, r9, #4
   40d60:	b	40d70 <__assert_fail@plt+0x2e598>
   40d64:	add	r7, r7, #1
   40d68:	cmp	r7, r8
   40d6c:	beq	40da4 <__assert_fail@plt+0x2e5cc>
   40d70:	mov	r0, r4
   40d74:	ldr	r2, [sl, #4]!
   40d78:	mov	r3, #0
   40d7c:	bl	3d800 <__assert_fail@plt+0x2b028>
   40d80:	cmp	r0, #0
   40d84:	bne	40d64 <__assert_fail@plt+0x2e58c>
   40d88:	b	40ca4 <__assert_fail@plt+0x2e4cc>
   40d8c:	movne	r9, #0
   40d90:	moveq	r9, r8
   40d94:	moveq	r5, r8
   40d98:	movne	r5, r9
   40d9c:	strne	r9, [sp, #28]
   40da0:	b	40bcc <__assert_fail@plt+0x2e3f4>
   40da4:	mov	r0, r9
   40da8:	bl	121f0 <free@plt>
   40dac:	ldr	r3, [sp, #28]
   40db0:	cmp	r3, #0
   40db4:	beq	40dd0 <__assert_fail@plt+0x2e5f8>
   40db8:	mov	r0, r4
   40dbc:	mov	r2, #33	; 0x21
   40dc0:	mov	r3, #0
   40dc4:	bl	3d800 <__assert_fail@plt+0x2b028>
   40dc8:	cmp	r0, #0
   40dcc:	beq	40ca4 <__assert_fail@plt+0x2e4cc>
   40dd0:	mov	r0, r4
   40dd4:	mov	r2, #0
   40dd8:	mov	r3, #0
   40ddc:	bl	3d800 <__assert_fail@plt+0x2b028>
   40de0:	cmp	r0, #0
   40de4:	beq	40ca4 <__assert_fail@plt+0x2e4cc>
   40de8:	ldr	r3, [r4, #84]	; 0x54
   40dec:	cmp	fp, #0
   40df0:	ldm	r5, {r0, r1}
   40df4:	add	r2, r3, #16
   40df8:	ldrne	r3, [r3, #4]
   40dfc:	stm	r2, {r0, r1}
   40e00:	movne	r0, #1
   40e04:	moveq	r0, #1
   40e08:	strne	r3, [fp, #4]
   40e0c:	b	40ca8 <__assert_fail@plt+0x2e4d0>
   40e10:	bl	122b0 <__stack_chk_fail@plt>
   40e14:	mov	fp, r3
   40e18:	b	40c48 <__assert_fail@plt+0x2e470>
   40e1c:	cmp	r1, #0
   40e20:	push	{r4, r5, r6, lr}
   40e24:	mov	r4, r2
   40e28:	mov	r5, r3
   40e2c:	mov	r6, r0
   40e30:	beq	40e3c <__assert_fail@plt+0x2e664>
   40e34:	mov	r1, #0
   40e38:	bl	3db28 <__assert_fail@plt+0x2b350>
   40e3c:	mov	r0, r6
   40e40:	mov	r1, r4
   40e44:	mov	r2, r5
   40e48:	pop	{r4, r5, r6, lr}
   40e4c:	b	40b5c <__assert_fail@plt+0x2e384>
   40e50:	ldr	r3, [r0, #172]	; 0xac
   40e54:	push	{r4, r5, r6, lr}
   40e58:	cmp	r3, #1
   40e5c:	mov	r4, r0
   40e60:	bne	41034 <__assert_fail@plt+0x2e85c>
   40e64:	ldr	r5, [r0, #180]	; 0xb4
   40e68:	mov	r3, #0
   40e6c:	add	r6, r0, #180	; 0xb4
   40e70:	str	r3, [r0, #172]	; 0xac
   40e74:	cmp	r5, r3
   40e78:	beq	40fdc <__assert_fail@plt+0x2e804>
   40e7c:	ldr	r3, [r0, #184]	; 0xb8
   40e80:	str	r3, [r4, #12]
   40e84:	mov	r0, r4
   40e88:	str	r6, [r4, #8]
   40e8c:	mov	r3, #0
   40e90:	ldr	r2, [r4, #196]	; 0xc4
   40e94:	bl	3d800 <__assert_fail@plt+0x2b028>
   40e98:	cmp	r0, #0
   40e9c:	popeq	{r4, r5, r6, pc}
   40ea0:	ldr	r5, [r4, #188]	; 0xbc
   40ea4:	add	r6, r4, #188	; 0xbc
   40ea8:	cmp	r5, #0
   40eac:	beq	41014 <__assert_fail@plt+0x2e83c>
   40eb0:	ldr	r3, [r4, #192]	; 0xc0
   40eb4:	str	r3, [r4, #12]
   40eb8:	mov	r0, r4
   40ebc:	str	r6, [r4, #8]
   40ec0:	mov	r2, #0
   40ec4:	mov	r3, #0
   40ec8:	bl	3d800 <__assert_fail@plt+0x2b028>
   40ecc:	cmp	r0, #0
   40ed0:	beq	40fd4 <__assert_fail@plt+0x2e7fc>
   40ed4:	ldr	r5, [r4, #40]	; 0x28
   40ed8:	cmp	r5, #0
   40edc:	beq	40f54 <__assert_fail@plt+0x2e77c>
   40ee0:	ldr	r3, [r4, #180]	; 0xb4
   40ee4:	cmp	r3, #0
   40ee8:	beq	40f08 <__assert_fail@plt+0x2e730>
   40eec:	ldr	r2, [r4, #40]	; 0x28
   40ef0:	cmp	r2, #0
   40ef4:	streq	r3, [r4, #40]	; 0x28
   40ef8:	ldrne	r2, [r4, #44]	; 0x2c
   40efc:	strne	r3, [r2]
   40f00:	ldr	r3, [r4, #184]	; 0xb8
   40f04:	str	r3, [r4, #44]	; 0x2c
   40f08:	ldr	r3, [r4, #188]	; 0xbc
   40f0c:	cmp	r3, #0
   40f10:	beq	40f30 <__assert_fail@plt+0x2e758>
   40f14:	ldr	r2, [r4, #40]	; 0x28
   40f18:	cmp	r2, #0
   40f1c:	streq	r3, [r4, #40]	; 0x28
   40f20:	ldrne	r2, [r4, #44]	; 0x2c
   40f24:	strne	r3, [r2]
   40f28:	ldr	r3, [r4, #192]	; 0xc0
   40f2c:	str	r3, [r4, #44]	; 0x2c
   40f30:	mov	r3, #0
   40f34:	mov	r0, #1
   40f38:	str	r3, [r4, #176]	; 0xb0
   40f3c:	str	r3, [r4, #180]	; 0xb4
   40f40:	str	r3, [r4, #184]	; 0xb8
   40f44:	str	r3, [r4, #188]	; 0xbc
   40f48:	str	r3, [r4, #192]	; 0xc0
   40f4c:	str	r3, [r4, #196]	; 0xc4
   40f50:	pop	{r4, r5, r6, pc}
   40f54:	mov	r0, #500	; 0x1f4
   40f58:	bl	12358 <xmalloc@plt>
   40f5c:	add	r1, r4, #40	; 0x28
   40f60:	mvn	r3, #7
   40f64:	mov	r2, #1
   40f68:	movw	ip, #489	; 0x1e9
   40f6c:	str	r5, [r0]
   40f70:	str	r0, [r4, #12]
   40f74:	str	r1, [r4, #8]
   40f78:	str	r0, [r4, #40]	; 0x28
   40f7c:	str	r0, [r4, #44]	; 0x2c
   40f80:	strb	r3, [r0, #8]
   40f84:	ldr	r3, [r4, #12]
   40f88:	str	r2, [r0, #4]
   40f8c:	ldr	r1, [r3, #4]
   40f90:	cmp	r1, ip
   40f94:	bhi	40ffc <__assert_fail@plt+0x2e824>
   40f98:	add	r0, r3, r1
   40f9c:	add	r1, r1, r2
   40fa0:	str	r1, [r3, #4]
   40fa4:	strb	r2, [r0, #8]
   40fa8:	mov	r0, r4
   40fac:	mov	r2, #0
   40fb0:	mov	r3, #0
   40fb4:	bl	3d800 <__assert_fail@plt+0x2b028>
   40fb8:	cmp	r0, #0
   40fbc:	beq	40fd4 <__assert_fail@plt+0x2e7fc>
   40fc0:	mov	r0, r4
   40fc4:	ldr	r1, [r4, #20]
   40fc8:	bl	3d610 <__assert_fail@plt+0x2ae38>
   40fcc:	cmp	r0, #0
   40fd0:	bne	40ee0 <__assert_fail@plt+0x2e708>
   40fd4:	mov	r0, #0
   40fd8:	pop	{r4, r5, r6, pc}
   40fdc:	mov	r0, #500	; 0x1f4
   40fe0:	bl	12358 <xmalloc@plt>
   40fe4:	str	r5, [r0]
   40fe8:	mov	r3, r0
   40fec:	str	r5, [r0, #4]
   40ff0:	str	r0, [r4, #180]	; 0xb4
   40ff4:	str	r0, [r4, #184]	; 0xb8
   40ff8:	b	40e80 <__assert_fail@plt+0x2e6a8>
   40ffc:	add	r0, r4, #8
   41000:	add	r1, r4, #12
   41004:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   41008:	cmp	r0, #0
   4100c:	bne	40fa8 <__assert_fail@plt+0x2e7d0>
   41010:	b	40fd4 <__assert_fail@plt+0x2e7fc>
   41014:	mov	r0, #500	; 0x1f4
   41018:	bl	12358 <xmalloc@plt>
   4101c:	str	r5, [r0]
   41020:	mov	r3, r0
   41024:	str	r5, [r0, #4]
   41028:	str	r0, [r4, #188]	; 0xbc
   4102c:	str	r0, [r4, #192]	; 0xc0
   41030:	b	40eb4 <__assert_fail@plt+0x2e6dc>
   41034:	movw	r0, #41976	; 0xa3f8
   41038:	movw	r1, #41948	; 0xa3dc
   4103c:	movt	r0, #5
   41040:	movt	r1, #5
   41044:	movw	r2, #7275	; 0x1c6b
   41048:	ldr	r3, [pc]	; 41050 <__assert_fail@plt+0x2e878>
   4104c:	bl	127d8 <__assert_fail@plt>
   41050:	andeq	sl, r5, r8, ror #2
   41054:	push	{r4, r5, r6, lr}
   41058:	mov	r5, r1
   4105c:	movw	r1, #61902	; 0xf1ce
   41060:	mov	r6, r2
   41064:	mov	r4, r0
   41068:	bl	3d578 <__assert_fail@plt+0x2ada0>
   4106c:	cmp	r0, #0
   41070:	bne	4107c <__assert_fail@plt+0x2e8a4>
   41074:	mov	r0, #0
   41078:	pop	{r4, r5, r6, pc}
   4107c:	mov	r2, r5
   41080:	mov	r0, r4
   41084:	mov	r3, #0
   41088:	bl	3d800 <__assert_fail@plt+0x2b028>
   4108c:	cmp	r0, #0
   41090:	beq	41074 <__assert_fail@plt+0x2e89c>
   41094:	mov	r0, r4
   41098:	mov	r2, #0
   4109c:	mov	r3, #0
   410a0:	bl	3d800 <__assert_fail@plt+0x2b028>
   410a4:	cmp	r0, #0
   410a8:	beq	41074 <__assert_fail@plt+0x2e89c>
   410ac:	mov	r0, r4
   410b0:	mov	r2, #65	; 0x41
   410b4:	mov	r3, #0
   410b8:	bl	3d800 <__assert_fail@plt+0x2b028>
   410bc:	cmp	r0, #0
   410c0:	beq	41074 <__assert_fail@plt+0x2e89c>
   410c4:	mov	r0, r4
   410c8:	mov	r1, r6
   410cc:	bl	3d610 <__assert_fail@plt+0x2ae38>
   410d0:	adds	r0, r0, #0
   410d4:	movne	r0, #1
   410d8:	pop	{r4, r5, r6, pc}
   410dc:	ldr	r1, [r0, #84]	; 0x54
   410e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   410e4:	cmp	r1, #0
   410e8:	sub	sp, sp, #20
   410ec:	mov	r4, r0
   410f0:	mov	r9, r2
   410f4:	mov	r8, r3
   410f8:	beq	4135c <__assert_fail@plt+0x2eb84>
   410fc:	ldr	r5, [r1, #12]
   41100:	cmp	r5, #0
   41104:	beq	4135c <__assert_fail@plt+0x2eb84>
   41108:	ldr	ip, [r1]
   4110c:	cmp	ip, #0
   41110:	beq	4135c <__assert_fail@plt+0x2eb84>
   41114:	ldr	r3, [ip, #32]
   41118:	cmp	r3, #0
   4111c:	beq	4135c <__assert_fail@plt+0x2eb84>
   41120:	ldr	r3, [ip, #24]
   41124:	cmp	r3, #0
   41128:	beq	4135c <__assert_fail@plt+0x2eb84>
   4112c:	ldrb	r3, [r1, #36]	; 0x24
   41130:	mov	r1, #1
   41134:	ubfx	r6, r3, #2, #1
   41138:	bl	3db28 <__assert_fail@plt+0x2b350>
   4113c:	ldr	r3, [sp, #56]	; 0x38
   41140:	cmp	r3, #0
   41144:	mov	sl, r0
   41148:	bne	411ec <__assert_fail@plt+0x2ea14>
   4114c:	cmp	r6, #0
   41150:	mov	r0, r5
   41154:	ldrne	r3, [r4, #84]	; 0x54
   41158:	ldrbne	r2, [r3, #36]	; 0x24
   4115c:	orrne	r2, r2, #4
   41160:	strbne	r2, [r3, #36]	; 0x24
   41164:	bl	124e4 <strlen@plt>
   41168:	add	r0, r0, #4
   4116c:	bl	12358 <xmalloc@plt>
   41170:	str	r5, [sp]
   41174:	movw	r3, #42912	; 0xa7a0
   41178:	mov	r1, #1
   4117c:	movt	r3, #5
   41180:	mvn	r2, #0
   41184:	mov	r7, r0
   41188:	bl	12568 <__sprintf_chk@plt>
   4118c:	ldr	r6, [r4, #84]	; 0x54
   41190:	add	r3, r6, #24
   41194:	ldr	fp, [r6, #24]
   41198:	cmp	fp, #0
   4119c:	beq	4131c <__assert_fail@plt+0x2eb44>
   411a0:	str	r3, [r4, #8]
   411a4:	mov	r0, r4
   411a8:	ldr	r3, [r6, #28]
   411ac:	mov	r1, r7
   411b0:	str	r3, [r4, #12]
   411b4:	bl	3d610 <__assert_fail@plt+0x2ae38>
   411b8:	cmp	r0, #0
   411bc:	beq	411d8 <__assert_fail@plt+0x2ea00>
   411c0:	mov	r2, sl
   411c4:	mov	r0, r4
   411c8:	mov	r3, #0
   411cc:	bl	3d800 <__assert_fail@plt+0x2b028>
   411d0:	cmp	r0, #0
   411d4:	bne	412f8 <__assert_fail@plt+0x2eb20>
   411d8:	mov	r0, r7
   411dc:	bl	121f0 <free@plt>
   411e0:	mov	r0, #0
   411e4:	add	sp, sp, #20
   411e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   411ec:	mov	r0, r5
   411f0:	mov	sl, #2
   411f4:	bl	124e4 <strlen@plt>
   411f8:	add	r0, r0, #5
   411fc:	bl	12358 <xmalloc@plt>
   41200:	movw	r3, #42904	; 0xa798
   41204:	str	r5, [sp]
   41208:	mov	r1, #1
   4120c:	movt	r3, #5
   41210:	mvn	r2, #0
   41214:	mov	r7, r0
   41218:	bl	12568 <__sprintf_chk@plt>
   4121c:	ldr	r3, [sp, #60]	; 0x3c
   41220:	cmp	r3, #2
   41224:	ldr	r3, [r4, #84]	; 0x54
   41228:	orreq	sl, sl, #1
   4122c:	ldr	r6, [r3, #32]
   41230:	ldr	fp, [r6, #4]
   41234:	mov	r8, r6
   41238:	ldr	r9, [r8], #4
   4123c:	cmp	fp, #0
   41240:	beq	41340 <__assert_fail@plt+0x2eb68>
   41244:	str	r8, [r4, #8]
   41248:	mov	r0, r4
   4124c:	ldr	ip, [r6, #8]
   41250:	mov	r1, r9
   41254:	mov	r2, #98	; 0x62
   41258:	mov	r3, #0
   4125c:	str	ip, [r4, #12]
   41260:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   41264:	cmp	r0, #0
   41268:	beq	411d8 <__assert_fail@plt+0x2ea00>
   4126c:	mov	r2, sl
   41270:	mov	r0, r4
   41274:	mov	r1, r9
   41278:	mov	r3, #0
   4127c:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   41280:	cmp	r0, #0
   41284:	beq	411d8 <__assert_fail@plt+0x2ea00>
   41288:	mov	r2, r5
   4128c:	mov	r0, r4
   41290:	mov	r1, r9
   41294:	bl	41054 <__assert_fail@plt+0x2e87c>
   41298:	cmp	r0, #0
   4129c:	beq	411d8 <__assert_fail@plt+0x2ea00>
   412a0:	mov	r0, r4
   412a4:	mov	r1, r9
   412a8:	mov	r2, #0
   412ac:	mov	r3, #0
   412b0:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   412b4:	cmp	r0, #0
   412b8:	beq	411d8 <__assert_fail@plt+0x2ea00>
   412bc:	mov	r1, r9
   412c0:	mov	r0, r4
   412c4:	mov	r2, r7
   412c8:	bl	41054 <__assert_fail@plt+0x2e87c>
   412cc:	cmp	r0, #0
   412d0:	beq	411d8 <__assert_fail@plt+0x2ea00>
   412d4:	ldr	r3, [r4, #84]	; 0x54
   412d8:	mov	r0, r7
   412dc:	ldr	r3, [r3, #32]
   412e0:	ldr	r2, [r3, #12]
   412e4:	add	r2, r2, #5
   412e8:	str	r2, [r3, #12]
   412ec:	bl	121f0 <free@plt>
   412f0:	mov	r0, #1
   412f4:	b	411e4 <__assert_fail@plt+0x2ea0c>
   412f8:	lsr	r2, r9, #3
   412fc:	lsr	r3, r8, #3
   41300:	orr	r2, r2, r8, lsl #29
   41304:	mov	r0, r4
   41308:	bl	3d800 <__assert_fail@plt+0x2b028>
   4130c:	cmp	r0, #0
   41310:	beq	411d8 <__assert_fail@plt+0x2ea00>
   41314:	mov	sl, #0
   41318:	b	4121c <__assert_fail@plt+0x2ea44>
   4131c:	mov	r0, #500	; 0x1f4
   41320:	str	r3, [sp, #12]
   41324:	bl	12358 <xmalloc@plt>
   41328:	ldr	r3, [sp, #12]
   4132c:	str	fp, [r0]
   41330:	str	fp, [r0, #4]
   41334:	str	r0, [r6, #24]
   41338:	str	r0, [r6, #28]
   4133c:	b	411a0 <__assert_fail@plt+0x2e9c8>
   41340:	mov	r0, #500	; 0x1f4
   41344:	bl	12358 <xmalloc@plt>
   41348:	str	fp, [r0]
   4134c:	str	fp, [r0, #4]
   41350:	str	r0, [r6, #4]
   41354:	str	r0, [r6, #8]
   41358:	b	41244 <__assert_fail@plt+0x2ea6c>
   4135c:	movw	r0, #42660	; 0xa6a4
   41360:	movw	r1, #41948	; 0xa3dc
   41364:	movt	r0, #5
   41368:	movt	r1, #5
   4136c:	movw	r2, #6214	; 0x1846
   41370:	ldr	r3, [pc]	; 41378 <__assert_fail@plt+0x2eba0>
   41374:	bl	127d8 <__assert_fail@plt>
   41378:	andeq	sl, r5, ip, ror r1
   4137c:	ldr	r3, [r0, #84]	; 0x54
   41380:	push	{r4, r5, r6, r7, r8, lr}
   41384:	cmp	r3, #0
   41388:	mov	r5, r0
   4138c:	beq	41694 <__assert_fail@plt+0x2eebc>
   41390:	ldr	r4, [r3, #32]
   41394:	cmp	r4, #0
   41398:	beq	41694 <__assert_fail@plt+0x2eebc>
   4139c:	ldrb	r3, [r3, #36]	; 0x24
   413a0:	tst	r3, #8
   413a4:	bne	415f8 <__assert_fail@plt+0x2ee20>
   413a8:	ldr	r3, [r4, #16]
   413ac:	ldr	r6, [r4]
   413b0:	cmp	r3, #0
   413b4:	beq	41600 <__assert_fail@plt+0x2ee28>
   413b8:	ldr	r7, [r4, #4]
   413bc:	add	r8, r4, #4
   413c0:	cmp	r7, #0
   413c4:	beq	4164c <__assert_fail@plt+0x2ee74>
   413c8:	str	r8, [r5, #8]
   413cc:	mov	r0, r5
   413d0:	ldr	ip, [r4, #8]
   413d4:	mov	r1, r6
   413d8:	mov	r2, #122	; 0x7a
   413dc:	mov	r3, #0
   413e0:	str	ip, [r5, #12]
   413e4:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   413e8:	cmp	r0, #0
   413ec:	bne	413f8 <__assert_fail@plt+0x2ec20>
   413f0:	mov	r0, #0
   413f4:	pop	{r4, r5, r6, r7, r8, pc}
   413f8:	movw	r2, #11856	; 0x2e50
   413fc:	mov	r0, r5
   41400:	movt	r2, #5
   41404:	mov	r1, r6
   41408:	bl	41054 <__assert_fail@plt+0x2e87c>
   4140c:	cmp	r0, #0
   41410:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41414:	ldr	r3, [r5, #84]	; 0x54
   41418:	mov	r0, r5
   4141c:	mov	r1, r6
   41420:	ldr	r3, [r3, #32]
   41424:	ldrd	r2, [r3, #24]
   41428:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   4142c:	cmp	r0, #0
   41430:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41434:	ldr	r3, [r5, #84]	; 0x54
   41438:	ldr	r3, [r3, #32]
   4143c:	ldr	r2, [r3, #20]
   41440:	cmp	r2, #0
   41444:	bne	41610 <__assert_fail@plt+0x2ee38>
   41448:	ldr	r2, [r3, #16]
   4144c:	mov	r0, r5
   41450:	mov	r1, r6
   41454:	bl	41054 <__assert_fail@plt+0x2e87c>
   41458:	cmp	r0, #0
   4145c:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41460:	mov	r0, r5
   41464:	mov	r1, r6
   41468:	mov	r2, #0
   4146c:	mov	r3, #0
   41470:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   41474:	cmp	r0, #0
   41478:	beq	413f0 <__assert_fail@plt+0x2ec18>
   4147c:	ldr	r3, [r5, #84]	; 0x54
   41480:	ldr	r3, [r3, #32]
   41484:	ldr	r2, [r3, #12]
   41488:	add	r2, r2, #5
   4148c:	str	r2, [r3, #12]
   41490:	ldr	r4, [r5, #56]	; 0x38
   41494:	add	r7, r5, #56	; 0x38
   41498:	cmp	r4, #0
   4149c:	beq	41668 <__assert_fail@plt+0x2ee90>
   414a0:	ldr	r3, [r5, #60]	; 0x3c
   414a4:	movw	r1, #489	; 0x1e9
   414a8:	ldr	r2, [r3, #4]
   414ac:	str	r3, [r5, #12]
   414b0:	cmp	r2, r1
   414b4:	str	r7, [r5, #8]
   414b8:	bhi	41630 <__assert_fail@plt+0x2ee58>
   414bc:	add	r1, r3, r2
   414c0:	mvn	r0, #15
   414c4:	add	r2, r2, #1
   414c8:	str	r2, [r3, #4]
   414cc:	strb	r0, [r1, #8]
   414d0:	mov	r0, r5
   414d4:	mov	r2, r6
   414d8:	mov	r3, #0
   414dc:	bl	3d800 <__assert_fail@plt+0x2b028>
   414e0:	cmp	r0, #0
   414e4:	beq	413f0 <__assert_fail@plt+0x2ec18>
   414e8:	movw	r1, #11856	; 0x2e50
   414ec:	mov	r0, r5
   414f0:	movt	r1, #5
   414f4:	bl	3d610 <__assert_fail@plt+0x2ae38>
   414f8:	cmp	r0, #0
   414fc:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41500:	mov	r0, r5
   41504:	movw	r1, #61902	; 0xf1ce
   41508:	bl	3d578 <__assert_fail@plt+0x2ada0>
   4150c:	cmp	r0, #0
   41510:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41514:	mov	r2, r6
   41518:	mov	r0, r5
   4151c:	mov	r3, #0
   41520:	bl	3d800 <__assert_fail@plt+0x2b028>
   41524:	cmp	r0, #0
   41528:	beq	413f0 <__assert_fail@plt+0x2ec18>
   4152c:	mov	r0, r5
   41530:	mov	r2, #0
   41534:	mov	r3, #0
   41538:	bl	3d800 <__assert_fail@plt+0x2b028>
   4153c:	cmp	r0, #0
   41540:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41544:	mov	r0, r5
   41548:	mov	r2, #62	; 0x3e
   4154c:	mov	r3, #0
   41550:	bl	3d800 <__assert_fail@plt+0x2b028>
   41554:	cmp	r0, #0
   41558:	beq	413f0 <__assert_fail@plt+0x2ec18>
   4155c:	mov	r0, r5
   41560:	mov	r2, #80	; 0x50
   41564:	mov	r3, #0
   41568:	bl	3d800 <__assert_fail@plt+0x2b028>
   4156c:	cmp	r0, #0
   41570:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41574:	ldr	r2, [r5, #84]	; 0x54
   41578:	mov	r0, r5
   4157c:	mov	r3, #0
   41580:	ldr	r2, [r2, #32]
   41584:	ldr	r2, [r2, #12]
   41588:	bl	3d800 <__assert_fail@plt+0x2b028>
   4158c:	cmp	r0, #0
   41590:	beq	413f0 <__assert_fail@plt+0x2ec18>
   41594:	ldr	r3, [r5, #84]	; 0x54
   41598:	ldr	r3, [r3, #32]
   4159c:	ldr	r2, [r3, #4]
   415a0:	cmp	r2, #0
   415a4:	beq	415c4 <__assert_fail@plt+0x2edec>
   415a8:	ldr	r1, [r5, #56]	; 0x38
   415ac:	cmp	r1, #0
   415b0:	streq	r2, [r5, #56]	; 0x38
   415b4:	ldrne	r1, [r5, #60]	; 0x3c
   415b8:	strne	r2, [r1]
   415bc:	ldr	r2, [r3, #8]
   415c0:	str	r2, [r5, #60]	; 0x3c
   415c4:	ldr	r2, [r3, #36]	; 0x24
   415c8:	cmp	r2, #0
   415cc:	beq	415ec <__assert_fail@plt+0x2ee14>
   415d0:	ldr	r1, [r5, #56]	; 0x38
   415d4:	ldr	r3, [r3, #40]	; 0x28
   415d8:	cmp	r1, #0
   415dc:	streq	r2, [r5, #56]	; 0x38
   415e0:	ldrne	r1, [r5, #60]	; 0x3c
   415e4:	strne	r2, [r1]
   415e8:	str	r3, [r5, #60]	; 0x3c
   415ec:	mov	r0, r5
   415f0:	pop	{r4, r5, r6, r7, r8, lr}
   415f4:	b	3e370 <__assert_fail@plt+0x2bb98>
   415f8:	mov	r0, #1
   415fc:	pop	{r4, r5, r6, r7, r8, pc}
   41600:	ldr	r3, [r4, #20]
   41604:	cmp	r3, #0
   41608:	beq	41490 <__assert_fail@plt+0x2ecb8>
   4160c:	b	413b8 <__assert_fail@plt+0x2ebe0>
   41610:	movw	r2, #11856	; 0x2e50
   41614:	mov	r0, r5
   41618:	movt	r2, #5
   4161c:	mov	r1, r6
   41620:	bl	41054 <__assert_fail@plt+0x2e87c>
   41624:	cmp	r0, #0
   41628:	bne	41460 <__assert_fail@plt+0x2ec88>
   4162c:	b	413f0 <__assert_fail@plt+0x2ec18>
   41630:	add	r0, r5, #8
   41634:	add	r1, r5, #12
   41638:	mov	r2, #240	; 0xf0
   4163c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   41640:	cmp	r0, #0
   41644:	bne	414d0 <__assert_fail@plt+0x2ecf8>
   41648:	b	413f0 <__assert_fail@plt+0x2ec18>
   4164c:	mov	r0, #500	; 0x1f4
   41650:	bl	12358 <xmalloc@plt>
   41654:	str	r7, [r0]
   41658:	str	r7, [r0, #4]
   4165c:	str	r0, [r4, #4]
   41660:	str	r0, [r4, #8]
   41664:	b	413c8 <__assert_fail@plt+0x2ebf0>
   41668:	mov	r0, #500	; 0x1f4
   4166c:	bl	12358 <xmalloc@plt>
   41670:	mov	r2, r4
   41674:	str	r4, [r0]
   41678:	mov	r3, r0
   4167c:	str	r4, [r0, #4]
   41680:	str	r0, [r5, #56]	; 0x38
   41684:	str	r0, [r5, #60]	; 0x3c
   41688:	str	r0, [r5, #12]
   4168c:	str	r7, [r5, #8]
   41690:	b	414bc <__assert_fail@plt+0x2ece4>
   41694:	movw	r0, #42920	; 0xa7a8
   41698:	movw	r1, #41948	; 0xa3dc
   4169c:	movt	r0, #5
   416a0:	movt	r1, #5
   416a4:	movw	r2, #6409	; 0x1909
   416a8:	ldr	r3, [pc]	; 416b0 <__assert_fail@plt+0x2eed8>
   416ac:	bl	127d8 <__assert_fail@plt>
   416b0:	muleq	r5, r4, r1
   416b4:	ldr	r3, [r0, #84]	; 0x54
   416b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   416bc:	mov	r6, r1
   416c0:	ldrb	r3, [r3, #36]	; 0x24
   416c4:	sub	sp, sp, #16
   416c8:	mov	r1, #1
   416cc:	mov	r4, r0
   416d0:	mov	r8, r2
   416d4:	ubfx	sl, r3, #1, #1
   416d8:	bl	3db28 <__assert_fail@plt+0x2b350>
   416dc:	ldr	r5, [r4, #180]	; 0xb4
   416e0:	cmp	r5, #0
   416e4:	mov	r9, r0
   416e8:	bne	41a60 <__assert_fail@plt+0x2f288>
   416ec:	str	r6, [r4, #176]	; 0xb0
   416f0:	add	r1, r4, #180	; 0xb4
   416f4:	mov	r7, #1
   416f8:	str	r1, [sp, #8]
   416fc:	str	r5, [sp]
   41700:	mov	r0, r4
   41704:	str	r7, [sp, #4]
   41708:	mov	r1, r6
   4170c:	mvn	r2, #0
   41710:	mov	r3, r5
   41714:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   41718:	cmp	r0, #0
   4171c:	bne	4172c <__assert_fail@plt+0x2ef54>
   41720:	mov	r0, #0
   41724:	add	sp, sp, #16
   41728:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4172c:	mov	r0, r4
   41730:	mov	r2, #120	; 0x78
   41734:	mov	r3, #0
   41738:	bl	3d800 <__assert_fail@plt+0x2b028>
   4173c:	cmp	r0, #0
   41740:	beq	41720 <__assert_fail@plt+0x2ef48>
   41744:	mov	r0, r4
   41748:	mov	r2, #64	; 0x40
   4174c:	mov	r3, #0
   41750:	bl	3d800 <__assert_fail@plt+0x2b028>
   41754:	cmp	r0, #0
   41758:	beq	41720 <__assert_fail@plt+0x2ef48>
   4175c:	mov	r0, r4
   41760:	mov	r2, #0
   41764:	mov	r3, #0
   41768:	bl	3d800 <__assert_fail@plt+0x2b028>
   4176c:	cmp	r0, #0
   41770:	beq	41720 <__assert_fail@plt+0x2ef48>
   41774:	mov	r0, r4
   41778:	mov	r2, #0
   4177c:	mov	r3, #0
   41780:	bl	3d800 <__assert_fail@plt+0x2b028>
   41784:	cmp	r0, #0
   41788:	beq	41720 <__assert_fail@plt+0x2ef48>
   4178c:	mov	r2, r9
   41790:	mov	r0, r4
   41794:	mov	r3, r5
   41798:	bl	3d800 <__assert_fail@plt+0x2b028>
   4179c:	cmp	r0, #0
   417a0:	beq	41720 <__assert_fail@plt+0x2ef48>
   417a4:	mov	r1, r7
   417a8:	mov	r0, r4
   417ac:	bl	3db28 <__assert_fail@plt+0x2b350>
   417b0:	cmp	sl, #0
   417b4:	str	r5, [r4, #188]	; 0xbc
   417b8:	str	r5, [r4, #192]	; 0xc0
   417bc:	str	r5, [r4, #196]	; 0xc4
   417c0:	mov	r7, r0
   417c4:	bne	418a4 <__assert_fail@plt+0x2f0cc>
   417c8:	ldr	r3, [r4, #48]	; 0x30
   417cc:	cmp	r3, #0
   417d0:	beq	41a80 <__assert_fail@plt+0x2f2a8>
   417d4:	ldr	r3, [r4, #52]	; 0x34
   417d8:	add	r2, r4, #48	; 0x30
   417dc:	str	r2, [r4, #8]
   417e0:	movw	r0, #489	; 0x1e9
   417e4:	ldr	r1, [r4, #172]	; 0xac
   417e8:	ldr	r2, [r3, #4]
   417ec:	add	r1, r1, #1
   417f0:	str	r3, [r4, #12]
   417f4:	cmp	r2, r0
   417f8:	str	r1, [r4, #172]	; 0xac
   417fc:	bhi	41a28 <__assert_fail@plt+0x2f250>
   41800:	add	r1, r3, r2
   41804:	mvn	r0, #7
   41808:	add	r2, r2, #1
   4180c:	str	r2, [r3, #4]
   41810:	strb	r0, [r1, #8]
   41814:	ldr	r3, [r4, #12]
   41818:	movw	r1, #489	; 0x1e9
   4181c:	ldr	r2, [r3, #4]
   41820:	cmp	r2, r1
   41824:	bhi	41a04 <__assert_fail@plt+0x2f22c>
   41828:	add	r1, r3, r2
   4182c:	cmp	r8, #0
   41830:	add	r2, r2, #1
   41834:	str	r2, [r3, #4]
   41838:	moveq	r8, #6
   4183c:	movne	r8, #4
   41840:	strb	r8, [r1, #8]
   41844:	mov	r0, r4
   41848:	mov	r2, #0
   4184c:	mov	r3, #0
   41850:	bl	3d800 <__assert_fail@plt+0x2b028>
   41854:	cmp	r0, #0
   41858:	beq	41720 <__assert_fail@plt+0x2ef48>
   4185c:	mov	r1, r6
   41860:	mov	r0, r4
   41864:	bl	3d610 <__assert_fail@plt+0x2ae38>
   41868:	cmp	r0, #0
   4186c:	beq	41720 <__assert_fail@plt+0x2ef48>
   41870:	mov	r0, r4
   41874:	mov	r2, #0
   41878:	mov	r3, #0
   4187c:	bl	3d800 <__assert_fail@plt+0x2b028>
   41880:	cmp	r0, #0
   41884:	beq	41720 <__assert_fail@plt+0x2ef48>
   41888:	mov	r0, r4
   4188c:	mov	r2, r7
   41890:	mov	r3, #0
   41894:	bl	3d800 <__assert_fail@plt+0x2b028>
   41898:	adds	r0, r0, #0
   4189c:	movne	r0, #1
   418a0:	b	41724 <__assert_fail@plt+0x2ef4c>
   418a4:	ldr	r9, [r4, #56]	; 0x38
   418a8:	add	sl, r4, #56	; 0x38
   418ac:	ldr	r5, [r4, #92]	; 0x5c
   418b0:	cmp	r9, #0
   418b4:	add	r3, r5, #1
   418b8:	str	r3, [r4, #92]	; 0x5c
   418bc:	beq	41a64 <__assert_fail@plt+0x2f28c>
   418c0:	ldr	r3, [r4, #60]	; 0x3c
   418c4:	movw	r1, #489	; 0x1e9
   418c8:	str	sl, [r4, #8]
   418cc:	ldr	r2, [r3, #4]
   418d0:	str	r3, [r4, #12]
   418d4:	cmp	r2, r1
   418d8:	bhi	41a44 <__assert_fail@plt+0x2f26c>
   418dc:	add	r1, r3, r2
   418e0:	mvn	r0, #15
   418e4:	add	r2, r2, #1
   418e8:	str	r2, [r3, #4]
   418ec:	strb	r0, [r1, #8]
   418f0:	mov	r0, r4
   418f4:	mov	r2, r5
   418f8:	mov	r3, #0
   418fc:	bl	3d800 <__assert_fail@plt+0x2b028>
   41900:	cmp	r0, #0
   41904:	beq	41720 <__assert_fail@plt+0x2ef48>
   41908:	movw	r1, #11856	; 0x2e50
   4190c:	mov	r0, r4
   41910:	movt	r1, #5
   41914:	bl	3d610 <__assert_fail@plt+0x2ae38>
   41918:	cmp	r0, #0
   4191c:	beq	41720 <__assert_fail@plt+0x2ef48>
   41920:	mov	r0, r4
   41924:	movw	r1, #61902	; 0xf1ce
   41928:	bl	3d578 <__assert_fail@plt+0x2ada0>
   4192c:	cmp	r0, #0
   41930:	beq	41720 <__assert_fail@plt+0x2ef48>
   41934:	mov	r0, r4
   41938:	mov	r2, r5
   4193c:	mov	r3, #0
   41940:	bl	3d800 <__assert_fail@plt+0x2b028>
   41944:	cmp	r0, #0
   41948:	beq	41720 <__assert_fail@plt+0x2ef48>
   4194c:	mov	r0, r4
   41950:	mov	r2, #0
   41954:	mov	r3, #0
   41958:	bl	3d800 <__assert_fail@plt+0x2b028>
   4195c:	cmp	r0, #0
   41960:	beq	41720 <__assert_fail@plt+0x2ef48>
   41964:	mov	r0, r4
   41968:	mov	r2, #62	; 0x3e
   4196c:	mov	r3, #0
   41970:	bl	3d800 <__assert_fail@plt+0x2b028>
   41974:	cmp	r0, #0
   41978:	beq	41720 <__assert_fail@plt+0x2ef48>
   4197c:	mov	r0, r4
   41980:	mov	r2, #80	; 0x50
   41984:	mov	r3, #0
   41988:	bl	3d800 <__assert_fail@plt+0x2b028>
   4198c:	cmp	r0, #0
   41990:	beq	41720 <__assert_fail@plt+0x2ef48>
   41994:	mov	r0, r4
   41998:	mov	r2, #3
   4199c:	mov	r3, #0
   419a0:	bl	3d800 <__assert_fail@plt+0x2b028>
   419a4:	cmp	r0, #0
   419a8:	beq	41720 <__assert_fail@plt+0x2ef48>
   419ac:	mov	r0, r4
   419b0:	mov	r1, r5
   419b4:	mov	r2, #82	; 0x52
   419b8:	mov	r3, #0
   419bc:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   419c0:	cmp	r0, #0
   419c4:	beq	41720 <__assert_fail@plt+0x2ef48>
   419c8:	rsbs	r2, r8, #1
   419cc:	mov	r0, r4
   419d0:	mov	r1, r5
   419d4:	mov	r3, #0
   419d8:	movcc	r2, #0
   419dc:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   419e0:	cmp	r0, #0
   419e4:	beq	41720 <__assert_fail@plt+0x2ef48>
   419e8:	mov	r1, r5
   419ec:	mov	r0, r4
   419f0:	mov	r2, r6
   419f4:	bl	41054 <__assert_fail@plt+0x2e87c>
   419f8:	cmp	r0, #0
   419fc:	bne	417c8 <__assert_fail@plt+0x2eff0>
   41a00:	b	41720 <__assert_fail@plt+0x2ef48>
   41a04:	cmp	r8, #0
   41a08:	add	r0, r4, #8
   41a0c:	add	r1, r4, #12
   41a10:	moveq	r2, #6
   41a14:	movne	r2, #4
   41a18:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   41a1c:	cmp	r0, #0
   41a20:	beq	41720 <__assert_fail@plt+0x2ef48>
   41a24:	b	41844 <__assert_fail@plt+0x2f06c>
   41a28:	add	r0, r4, #8
   41a2c:	add	r1, r4, #12
   41a30:	mov	r2, #248	; 0xf8
   41a34:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   41a38:	cmp	r0, #0
   41a3c:	beq	41720 <__assert_fail@plt+0x2ef48>
   41a40:	b	41814 <__assert_fail@plt+0x2f03c>
   41a44:	add	r0, r4, #8
   41a48:	add	r1, r4, #12
   41a4c:	mov	r2, #240	; 0xf0
   41a50:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   41a54:	cmp	r0, #0
   41a58:	bne	418f0 <__assert_fail@plt+0x2f118>
   41a5c:	b	41720 <__assert_fail@plt+0x2ef48>
   41a60:	bl	12790 <abort@plt>
   41a64:	mov	r0, #500	; 0x1f4
   41a68:	bl	12358 <xmalloc@plt>
   41a6c:	str	r9, [r0]
   41a70:	str	r9, [r0, #4]
   41a74:	str	r0, [r4, #56]	; 0x38
   41a78:	str	r0, [r4, #60]	; 0x3c
   41a7c:	b	418c0 <__assert_fail@plt+0x2f0e8>
   41a80:	movw	r0, #42316	; 0xa54c
   41a84:	movw	r1, #41948	; 0xa3dc
   41a88:	movt	r0, #5
   41a8c:	movt	r1, #5
   41a90:	movw	r2, #7066	; 0x1b9a
   41a94:	ldr	r3, [pc]	; 41a9c <__assert_fail@plt+0x2f2c4>
   41a98:	bl	127d8 <__assert_fail@plt>
   41a9c:	andeq	sl, r5, r8, lsr #3
   41aa0:	ldr	r3, [r0, #84]	; 0x54
   41aa4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   41aa8:	mov	r7, r1
   41aac:	sub	sp, sp, #8
   41ab0:	mov	r1, #1
   41ab4:	ldrb	r9, [r3, #36]	; 0x24
   41ab8:	mov	sl, r0
   41abc:	ldr	r8, [r3, #8]
   41ac0:	mov	r5, r2
   41ac4:	bl	3db28 <__assert_fail@plt+0x2b350>
   41ac8:	ldr	r3, [sl, #48]	; 0x30
   41acc:	ubfx	r9, r9, #1, #1
   41ad0:	cmp	r3, #0
   41ad4:	mov	r4, r0
   41ad8:	beq	41ee0 <__assert_fail@plt+0x2f708>
   41adc:	ldr	r3, [sl, #52]	; 0x34
   41ae0:	add	r2, sl, #48	; 0x30
   41ae4:	str	r2, [sl, #8]
   41ae8:	movw	r0, #489	; 0x1e9
   41aec:	ldr	r6, [sl, #92]	; 0x5c
   41af0:	ldr	r2, [r3, #4]
   41af4:	add	r1, r6, #1
   41af8:	str	r3, [sl, #12]
   41afc:	cmp	r2, r0
   41b00:	str	r1, [sl, #92]	; 0x5c
   41b04:	bhi	41bbc <__assert_fail@plt+0x2f3e4>
   41b08:	add	r1, r3, r2
   41b0c:	mvn	r0, #15
   41b10:	add	r2, r2, #1
   41b14:	str	r2, [r3, #4]
   41b18:	strb	r0, [r1, #8]
   41b1c:	mov	r0, sl
   41b20:	mov	r2, r6
   41b24:	mov	r3, #0
   41b28:	bl	3d800 <__assert_fail@plt+0x2b028>
   41b2c:	cmp	r0, #0
   41b30:	bne	41b40 <__assert_fail@plt+0x2f368>
   41b34:	mov	r0, #0
   41b38:	add	sp, sp, #8
   41b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41b40:	mov	r0, sl
   41b44:	mov	r1, r7
   41b48:	bl	3d610 <__assert_fail@plt+0x2ae38>
   41b4c:	cmp	r0, #0
   41b50:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41b54:	mov	r0, sl
   41b58:	movw	r1, #61902	; 0xf1ce
   41b5c:	bl	3d578 <__assert_fail@plt+0x2ada0>
   41b60:	cmp	r0, #0
   41b64:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41b68:	mov	r0, sl
   41b6c:	mov	r2, r6
   41b70:	mov	r3, #0
   41b74:	bl	3d800 <__assert_fail@plt+0x2b028>
   41b78:	cmp	r0, #0
   41b7c:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41b80:	mov	r2, r4
   41b84:	mov	r0, sl
   41b88:	mov	r3, #0
   41b8c:	bl	3d800 <__assert_fail@plt+0x2b028>
   41b90:	cmp	r0, #0
   41b94:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41b98:	sub	r5, r5, #1
   41b9c:	cmp	r5, #4
   41ba0:	ldrls	pc, [pc, r5, lsl #2]
   41ba4:	b	41ec0 <__assert_fail@plt+0x2f6e8>
   41ba8:	andeq	r1, r4, r0, lsr lr
   41bac:	ldrdeq	r1, [r4], -r0
   41bb0:	andeq	r1, r4, r8, ror lr
   41bb4:	andeq	r1, r4, r0, lsr #27
   41bb8:	ldrdeq	r1, [r4], -r8
   41bbc:	add	r0, sl, #8
   41bc0:	add	r1, sl, #12
   41bc4:	mov	r2, #240	; 0xf0
   41bc8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   41bcc:	cmp	r0, #0
   41bd0:	bne	41b1c <__assert_fail@plt+0x2f344>
   41bd4:	b	41b34 <__assert_fail@plt+0x2f35c>
   41bd8:	mov	r0, sl
   41bdc:	mov	r2, #2
   41be0:	mov	r3, #0
   41be4:	bl	3d800 <__assert_fail@plt+0x2b028>
   41be8:	cmp	r0, #0
   41bec:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41bf0:	ldr	r0, [sl]
   41bf4:	ldr	r4, [sp, #40]	; 0x28
   41bf8:	bl	12508 <bfd_get_arch@plt>
   41bfc:	cmp	r0, #2
   41c00:	beq	41efc <__assert_fail@plt+0x2f724>
   41c04:	cmp	r0, #4
   41c08:	ldreq	r8, [sp, #40]	; 0x28
   41c0c:	addeq	r4, r8, #1
   41c10:	mov	r0, sl
   41c14:	mov	r2, r4
   41c18:	asr	r3, r4, #31
   41c1c:	bl	3d800 <__assert_fail@plt+0x2b028>
   41c20:	cmp	r0, #0
   41c24:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41c28:	mov	r5, #2
   41c2c:	cmp	r9, #0
   41c30:	moveq	r0, #1
   41c34:	beq	41b38 <__assert_fail@plt+0x2f360>
   41c38:	ldr	r4, [sl, #92]	; 0x5c
   41c3c:	cmp	r5, #2
   41c40:	add	r3, r4, #1
   41c44:	str	r3, [sl, #92]	; 0x5c
   41c48:	ldreq	r3, [sl, #12]
   41c4c:	beq	41c6c <__assert_fail@plt+0x2f494>
   41c50:	ldr	r6, [sl, #56]	; 0x38
   41c54:	add	r8, sl, #56	; 0x38
   41c58:	cmp	r6, #0
   41c5c:	beq	41f0c <__assert_fail@plt+0x2f734>
   41c60:	ldr	r3, [sl, #60]	; 0x3c
   41c64:	str	r8, [sl, #8]
   41c68:	str	r3, [sl, #12]
   41c6c:	ldr	r2, [r3, #4]
   41c70:	movw	r1, #489	; 0x1e9
   41c74:	cmp	r2, r1
   41c78:	bhi	41ec4 <__assert_fail@plt+0x2f6ec>
   41c7c:	add	r1, r3, r2
   41c80:	mvn	r0, #15
   41c84:	add	r2, r2, #1
   41c88:	str	r2, [r3, #4]
   41c8c:	strb	r0, [r1, #8]
   41c90:	mov	r0, sl
   41c94:	mov	r2, r4
   41c98:	mov	r3, #0
   41c9c:	bl	3d800 <__assert_fail@plt+0x2b028>
   41ca0:	cmp	r0, #0
   41ca4:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41ca8:	movw	r1, #11856	; 0x2e50
   41cac:	mov	r0, sl
   41cb0:	movt	r1, #5
   41cb4:	bl	3d610 <__assert_fail@plt+0x2ae38>
   41cb8:	cmp	r0, #0
   41cbc:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41cc0:	mov	r0, sl
   41cc4:	movw	r1, #61902	; 0xf1ce
   41cc8:	bl	3d578 <__assert_fail@plt+0x2ada0>
   41ccc:	cmp	r0, #0
   41cd0:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41cd4:	mov	r0, sl
   41cd8:	mov	r2, r4
   41cdc:	mov	r3, #0
   41ce0:	bl	3d800 <__assert_fail@plt+0x2b028>
   41ce4:	cmp	r0, #0
   41ce8:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41cec:	mov	r0, sl
   41cf0:	mov	r2, #0
   41cf4:	mov	r3, #0
   41cf8:	bl	3d800 <__assert_fail@plt+0x2b028>
   41cfc:	cmp	r0, #0
   41d00:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41d04:	mov	r0, sl
   41d08:	mov	r2, #62	; 0x3e
   41d0c:	mov	r3, #0
   41d10:	bl	3d800 <__assert_fail@plt+0x2b028>
   41d14:	cmp	r0, #0
   41d18:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41d1c:	mov	r0, sl
   41d20:	mov	r2, #80	; 0x50
   41d24:	mov	r3, #0
   41d28:	bl	3d800 <__assert_fail@plt+0x2b028>
   41d2c:	cmp	r0, #0
   41d30:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41d34:	mov	r0, sl
   41d38:	mov	r2, #3
   41d3c:	mov	r3, #0
   41d40:	bl	3d800 <__assert_fail@plt+0x2b028>
   41d44:	cmp	r0, #0
   41d48:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41d4c:	mov	r0, sl
   41d50:	mov	r1, r4
   41d54:	mov	r2, #82	; 0x52
   41d58:	mov	r3, #0
   41d5c:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   41d60:	cmp	r0, #0
   41d64:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41d68:	mov	r0, sl
   41d6c:	mov	r1, r4
   41d70:	mov	r2, r5
   41d74:	asr	r3, r5, #31
   41d78:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   41d7c:	cmp	r0, #0
   41d80:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41d84:	mov	r0, sl
   41d88:	mov	r1, r4
   41d8c:	mov	r2, r7
   41d90:	bl	41054 <__assert_fail@plt+0x2e87c>
   41d94:	adds	r0, r0, #0
   41d98:	movne	r0, #1
   41d9c:	b	41b38 <__assert_fail@plt+0x2f360>
   41da0:	mov	r0, sl
   41da4:	mov	r2, #1
   41da8:	mov	r3, #0
   41dac:	bl	3d800 <__assert_fail@plt+0x2b028>
   41db0:	cmp	r0, #0
   41db4:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41db8:	mov	r0, sl
   41dbc:	ldrd	r2, [sp, #40]	; 0x28
   41dc0:	bl	3d800 <__assert_fail@plt+0x2b028>
   41dc4:	cmp	r0, #0
   41dc8:	bne	41c28 <__assert_fail@plt+0x2f450>
   41dcc:	b	41b34 <__assert_fail@plt+0x2f35c>
   41dd0:	mov	r0, sl
   41dd4:	mov	r2, #3
   41dd8:	mov	r3, #0
   41ddc:	bl	3d800 <__assert_fail@plt+0x2b028>
   41de0:	cmp	r0, #0
   41de4:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41de8:	ldrd	r4, [sp, #40]	; 0x28
   41dec:	mov	r0, sl
   41df0:	mov	r1, #0
   41df4:	ldrd	r2, [sp, #40]	; 0x28
   41df8:	adds	r4, r4, r8
   41dfc:	adc	r5, r5, #0
   41e00:	strd	r4, [sp]
   41e04:	bl	3cee4 <__assert_fail@plt+0x2a70c>
   41e08:	cmp	r0, #0
   41e0c:	movne	r5, #1
   41e10:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41e14:	mov	r1, r6
   41e18:	mov	r0, sl
   41e1c:	ldrd	r2, [sp, #40]	; 0x28
   41e20:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   41e24:	cmp	r0, #0
   41e28:	bne	41c2c <__assert_fail@plt+0x2f454>
   41e2c:	b	41b34 <__assert_fail@plt+0x2f35c>
   41e30:	mov	r0, sl
   41e34:	mov	r2, #8
   41e38:	mov	r3, #0
   41e3c:	bl	3d800 <__assert_fail@plt+0x2b028>
   41e40:	cmp	r0, #0
   41e44:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41e48:	ldrd	r2, [sp, #40]	; 0x28
   41e4c:	mov	r0, sl
   41e50:	mov	r1, #0
   41e54:	adds	r2, r2, r8
   41e58:	adc	r3, r3, #0
   41e5c:	strd	r2, [sp]
   41e60:	ldrd	r2, [sp, #40]	; 0x28
   41e64:	bl	3cee4 <__assert_fail@plt+0x2a70c>
   41e68:	cmp	r0, #0
   41e6c:	movne	r5, #0
   41e70:	bne	41e14 <__assert_fail@plt+0x2f63c>
   41e74:	b	41b34 <__assert_fail@plt+0x2f35c>
   41e78:	mov	r0, sl
   41e7c:	mov	r2, #3
   41e80:	mov	r3, #0
   41e84:	bl	3d800 <__assert_fail@plt+0x2b028>
   41e88:	cmp	r0, #0
   41e8c:	beq	41b34 <__assert_fail@plt+0x2f35c>
   41e90:	ldrd	r4, [sp, #40]	; 0x28
   41e94:	mov	r0, sl
   41e98:	mov	r1, #0
   41e9c:	ldrd	r2, [sp, #40]	; 0x28
   41ea0:	adds	r4, r4, r8
   41ea4:	adc	r5, r5, #0
   41ea8:	strd	r4, [sp]
   41eac:	bl	3cee4 <__assert_fail@plt+0x2a70c>
   41eb0:	cmp	r0, #0
   41eb4:	movne	r5, #2
   41eb8:	bne	41e14 <__assert_fail@plt+0x2f63c>
   41ebc:	b	41b34 <__assert_fail@plt+0x2f35c>
   41ec0:	bl	12790 <abort@plt>
   41ec4:	add	r0, sl, #8
   41ec8:	add	r1, sl, #12
   41ecc:	mov	r2, #240	; 0xf0
   41ed0:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   41ed4:	cmp	r0, #0
   41ed8:	bne	41c90 <__assert_fail@plt+0x2f4b8>
   41edc:	b	41b34 <__assert_fail@plt+0x2f35c>
   41ee0:	movw	r0, #42316	; 0xa54c
   41ee4:	movw	r1, #41948	; 0xa3dc
   41ee8:	movt	r0, #5
   41eec:	movt	r1, #5
   41ef0:	movw	r2, #6899	; 0x1af3
   41ef4:	ldr	r3, [pc, #44]	; 41f28 <__assert_fail@plt+0x2f750>
   41ef8:	bl	127d8 <__assert_fail@plt>
   41efc:	ldr	r3, [sp, #40]	; 0x28
   41f00:	cmp	r3, #17
   41f04:	subgt	r4, r3, #2
   41f08:	b	41c10 <__assert_fail@plt+0x2f438>
   41f0c:	mov	r0, #500	; 0x1f4
   41f10:	bl	12358 <xmalloc@plt>
   41f14:	str	r6, [r0]
   41f18:	str	r6, [r0, #4]
   41f1c:	str	r0, [sl, #56]	; 0x38
   41f20:	str	r0, [sl, #60]	; 0x3c
   41f24:	b	41c60 <__assert_fail@plt+0x2f488>
   41f28:			; <UNDEFINED> instruction: 0x0005a1bc
   41f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41f30:	mov	r6, r0
   41f34:	ldr	r8, [r0, #48]	; 0x30
   41f38:	sub	sp, sp, #20
   41f3c:	mov	r4, r2
   41f40:	mov	r5, r3
   41f44:	cmp	r8, #0
   41f48:	add	r7, r0, #48	; 0x30
   41f4c:	beq	422f4 <__assert_fail@plt+0x2fb1c>
   41f50:	ldr	r3, [r0, #52]	; 0x34
   41f54:	ldr	r2, [r6, #172]	; 0xac
   41f58:	str	r7, [r6, #8]
   41f5c:	cmp	r2, #1
   41f60:	str	r3, [r6, #12]
   41f64:	beq	420ac <__assert_fail@plt+0x2f8d4>
   41f68:	ldr	r2, [r3, #4]
   41f6c:	movw	r1, #489	; 0x1e9
   41f70:	cmp	r2, r1
   41f74:	bhi	42074 <__assert_fail@plt+0x2f89c>
   41f78:	add	r1, r3, r2
   41f7c:	mvn	r0, #7
   41f80:	add	r2, r2, #1
   41f84:	str	r2, [r3, #4]
   41f88:	strb	r0, [r1, #8]
   41f8c:	ldr	r3, [r6, #12]
   41f90:	movw	r1, #489	; 0x1e9
   41f94:	ldr	r2, [r3, #4]
   41f98:	cmp	r2, r1
   41f9c:	bhi	42090 <__assert_fail@plt+0x2f8b8>
   41fa0:	add	r1, r3, r2
   41fa4:	mov	r0, #6
   41fa8:	add	r2, r2, #1
   41fac:	str	r2, [r3, #4]
   41fb0:	strb	r0, [r1, #8]
   41fb4:	mov	r0, r6
   41fb8:	mov	r2, #0
   41fbc:	mov	r3, #0
   41fc0:	bl	3d800 <__assert_fail@plt+0x2b028>
   41fc4:	cmp	r0, #0
   41fc8:	bne	41fd8 <__assert_fail@plt+0x2f800>
   41fcc:	mov	r0, #0
   41fd0:	add	sp, sp, #20
   41fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41fd8:	movw	r1, #11856	; 0x2e50
   41fdc:	mov	r0, r6
   41fe0:	movt	r1, #5
   41fe4:	bl	3d610 <__assert_fail@plt+0x2ae38>
   41fe8:	cmp	r0, #0
   41fec:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   41ff0:	mov	r0, r6
   41ff4:	mov	r2, #0
   41ff8:	mov	r3, #0
   41ffc:	bl	3d800 <__assert_fail@plt+0x2b028>
   42000:	cmp	r0, #0
   42004:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42008:	mov	r0, r6
   4200c:	mov	r2, #0
   42010:	mov	r3, #0
   42014:	bl	3d800 <__assert_fail@plt+0x2b028>
   42018:	cmp	r0, #0
   4201c:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42020:	mov	r0, r6
   42024:	mov	r2, r4
   42028:	mov	r3, r5
   4202c:	bl	3d800 <__assert_fail@plt+0x2b028>
   42030:	cmp	r0, #0
   42034:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42038:	mov	r0, #24
   4203c:	bl	12358 <xmalloc@plt>
   42040:	mov	r2, #24
   42044:	mov	r1, #0
   42048:	mov	r7, r0
   4204c:	bl	12580 <memset@plt>
   42050:	ldr	r2, [r6, #80]	; 0x50
   42054:	mov	r0, #1
   42058:	ldr	r3, [r6, #172]	; 0xac
   4205c:	strd	r4, [r7, #8]
   42060:	str	r2, [r7]
   42064:	add	r3, r3, r0
   42068:	str	r7, [r6, #80]	; 0x50
   4206c:	str	r3, [r6, #172]	; 0xac
   42070:	b	41fd0 <__assert_fail@plt+0x2f7f8>
   42074:	add	r0, r6, #8
   42078:	add	r1, r6, #12
   4207c:	mov	r2, #248	; 0xf8
   42080:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   42084:	cmp	r0, #0
   42088:	bne	41f8c <__assert_fail@plt+0x2f7b4>
   4208c:	b	41fcc <__assert_fail@plt+0x2f7f4>
   42090:	add	r0, r6, #8
   42094:	add	r1, r6, #12
   42098:	mov	r2, #6
   4209c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   420a0:	cmp	r0, #0
   420a4:	bne	41fb4 <__assert_fail@plt+0x2f7dc>
   420a8:	b	41fcc <__assert_fail@plt+0x2f7f4>
   420ac:	mov	r0, r6
   420b0:	mov	r2, r4
   420b4:	mov	r3, r5
   420b8:	bl	3d800 <__assert_fail@plt+0x2b028>
   420bc:	cmp	r0, #0
   420c0:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   420c4:	ldr	r8, [r6, #200]	; 0xc8
   420c8:	cmp	r8, #0
   420cc:	beq	42344 <__assert_fail@plt+0x2fb6c>
   420d0:	mov	r9, #0
   420d4:	add	sl, r6, #84	; 0x54
   420d8:	str	sl, [sp, #12]
   420dc:	ldr	r3, [r8, #16]
   420e0:	sub	r3, r3, #1
   420e4:	cmp	r3, #3
   420e8:	ldrls	pc, [pc, r3, lsl #2]
   420ec:	b	4231c <__assert_fail@plt+0x2fb44>
   420f0:	andeq	r2, r4, r4, lsl r3
   420f4:	andeq	r2, r4, r0, lsl #2
   420f8:	andeq	r2, r4, r4, lsl r3
   420fc:	andeq	r2, r4, r0, lsl #2
   42100:	mov	sl, #5
   42104:	mov	r2, #0
   42108:	ldr	r1, [r8, #8]
   4210c:	mov	r3, r2
   42110:	str	r2, [sp]
   42114:	ldr	r0, [sp, #12]
   42118:	bl	3d038 <__assert_fail@plt+0x2a860>
   4211c:	cmp	r0, #0
   42120:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42124:	ldr	r3, [r6, #84]	; 0x54
   42128:	mov	r0, r6
   4212c:	ldr	r1, [r8, #12]
   42130:	ldrb	r2, [r3, #36]	; 0x24
   42134:	cmp	r1, #0
   42138:	addne	r9, r9, #1
   4213c:	bfi	r2, r1, #1, #1
   42140:	strb	r2, [r3, #36]	; 0x24
   42144:	ldr	r3, [r8, #4]
   42148:	mov	r2, sl
   4214c:	ldrd	sl, [r8, #24]
   42150:	mov	r1, r3
   42154:	strd	sl, [sp]
   42158:	bl	41aa0 <__assert_fail@plt+0x2f2c8>
   4215c:	cmp	r0, #0
   42160:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42164:	ldr	r8, [r8]
   42168:	cmp	r8, #0
   4216c:	bne	420dc <__assert_fail@plt+0x2f904>
   42170:	cmp	r9, #0
   42174:	beq	42320 <__assert_fail@plt+0x2fb48>
   42178:	ldr	r3, [r6, #48]	; 0x30
   4217c:	ldr	sl, [r6, #92]	; 0x5c
   42180:	cmp	r3, #0
   42184:	add	r3, sl, #1
   42188:	str	r3, [r6, #92]	; 0x5c
   4218c:	beq	4236c <__assert_fail@plt+0x2fb94>
   42190:	ldr	r3, [r6, #52]	; 0x34
   42194:	movw	r1, #489	; 0x1e9
   42198:	str	r7, [r6, #8]
   4219c:	ldr	r2, [r3, #4]
   421a0:	str	r3, [r6, #12]
   421a4:	cmp	r2, r1
   421a8:	bhi	42350 <__assert_fail@plt+0x2fb78>
   421ac:	add	r1, r3, r2
   421b0:	mvn	r0, #15
   421b4:	add	r2, r2, #1
   421b8:	str	r2, [r3, #4]
   421bc:	strb	r0, [r1, #8]
   421c0:	mov	r0, r6
   421c4:	mov	r2, sl
   421c8:	mov	r3, #0
   421cc:	bl	3d800 <__assert_fail@plt+0x2b028>
   421d0:	cmp	r0, #0
   421d4:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   421d8:	movw	r1, #11856	; 0x2e50
   421dc:	mov	r0, r6
   421e0:	movt	r1, #5
   421e4:	bl	3d610 <__assert_fail@plt+0x2ae38>
   421e8:	cmp	r0, #0
   421ec:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   421f0:	mov	r0, r6
   421f4:	movw	r1, #61902	; 0xf1ce
   421f8:	bl	3d578 <__assert_fail@plt+0x2ada0>
   421fc:	cmp	r0, #0
   42200:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42204:	mov	r0, r6
   42208:	mov	r2, sl
   4220c:	mov	r3, #0
   42210:	bl	3d800 <__assert_fail@plt+0x2b028>
   42214:	cmp	r0, #0
   42218:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   4221c:	mov	r0, r6
   42220:	mov	r2, #0
   42224:	mov	r3, #0
   42228:	bl	3d800 <__assert_fail@plt+0x2b028>
   4222c:	cmp	r0, #0
   42230:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42234:	mov	r0, r6
   42238:	mov	r2, #62	; 0x3e
   4223c:	mov	r3, #0
   42240:	bl	3d800 <__assert_fail@plt+0x2b028>
   42244:	cmp	r0, #0
   42248:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   4224c:	mov	r0, r6
   42250:	mov	r2, #80	; 0x50
   42254:	mov	r3, #0
   42258:	bl	3d800 <__assert_fail@plt+0x2b028>
   4225c:	cmp	r0, #0
   42260:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42264:	add	r2, r9, #3
   42268:	mov	r0, r6
   4226c:	mov	r3, #0
   42270:	bl	3d800 <__assert_fail@plt+0x2b028>
   42274:	cmp	r0, #0
   42278:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   4227c:	mov	r0, r6
   42280:	mov	r1, sl
   42284:	mov	r2, #66	; 0x42
   42288:	mov	r3, #0
   4228c:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42290:	cmp	r0, #0
   42294:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   42298:	mov	r0, r6
   4229c:	mov	r1, sl
   422a0:	ldr	r2, [r6, #176]	; 0xb0
   422a4:	bl	41054 <__assert_fail@plt+0x2e87c>
   422a8:	cmp	r0, #0
   422ac:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   422b0:	mov	r0, r6
   422b4:	mov	r1, sl
   422b8:	mov	r2, #0
   422bc:	mov	r3, #0
   422c0:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   422c4:	cmp	r0, #0
   422c8:	ldrne	r7, [r6, #200]	; 0xc8
   422cc:	movne	r8, #1
   422d0:	beq	41fcc <__assert_fail@plt+0x2f7f4>
   422d4:	cmp	r7, #0
   422d8:	beq	42320 <__assert_fail@plt+0x2fb48>
   422dc:	ldr	r3, [r7, #12]
   422e0:	cmp	r3, #0
   422e4:	bne	42388 <__assert_fail@plt+0x2fbb0>
   422e8:	ldr	r7, [r7]
   422ec:	add	r8, r8, #1
   422f0:	b	422d4 <__assert_fail@plt+0x2fafc>
   422f4:	mov	r0, #500	; 0x1f4
   422f8:	bl	12358 <xmalloc@plt>
   422fc:	str	r8, [r0]
   42300:	mov	r3, r0
   42304:	str	r8, [r0, #4]
   42308:	str	r0, [r6, #48]	; 0x30
   4230c:	str	r0, [r6, #52]	; 0x34
   42310:	b	41f54 <__assert_fail@plt+0x2f77c>
   42314:	mov	sl, #4
   42318:	b	42104 <__assert_fail@plt+0x2f92c>
   4231c:	bl	12790 <abort@plt>
   42320:	ldr	r0, [r6, #200]	; 0xc8
   42324:	cmp	r0, #0
   42328:	bne	42334 <__assert_fail@plt+0x2fb5c>
   4232c:	b	42344 <__assert_fail@plt+0x2fb6c>
   42330:	mov	r0, r7
   42334:	ldr	r7, [r0]
   42338:	bl	121f0 <free@plt>
   4233c:	cmp	r7, #0
   42340:	bne	42330 <__assert_fail@plt+0x2fb58>
   42344:	mov	r3, #0
   42348:	str	r3, [r6, #200]	; 0xc8
   4234c:	b	42038 <__assert_fail@plt+0x2f860>
   42350:	add	r0, r6, #8
   42354:	add	r1, r6, #12
   42358:	mov	r2, #240	; 0xf0
   4235c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   42360:	cmp	r0, #0
   42364:	bne	421c0 <__assert_fail@plt+0x2f9e8>
   42368:	b	41fcc <__assert_fail@plt+0x2f7f4>
   4236c:	mov	r0, #500	; 0x1f4
   42370:	bl	12358 <xmalloc@plt>
   42374:	str	r8, [r0]
   42378:	str	r8, [r0, #4]
   4237c:	str	r0, [r6, #48]	; 0x30
   42380:	str	r0, [r6, #52]	; 0x34
   42384:	b	42190 <__assert_fail@plt+0x2f9b8>
   42388:	mov	r0, r6
   4238c:	mov	r1, sl
   42390:	mov	r2, r8
   42394:	mov	r3, #0
   42398:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   4239c:	cmp	r0, #0
   423a0:	bne	422e8 <__assert_fail@plt+0x2fb10>
   423a4:	b	41fcc <__assert_fail@plt+0x2f7f4>
   423a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   423ac:	sub	sp, sp, #12
   423b0:	mov	r9, r1
   423b4:	mov	r1, #0
   423b8:	ldr	r7, [sp, #64]	; 0x40
   423bc:	mov	sl, r2
   423c0:	mov	r8, r3
   423c4:	mov	r6, r0
   423c8:	ldrd	r4, [sp, #56]	; 0x38
   423cc:	bl	3db28 <__assert_fail@plt+0x2b350>
   423d0:	cmp	r7, #0
   423d4:	bne	42568 <__assert_fail@plt+0x2fd90>
   423d8:	ldr	r3, [r6, #84]	; 0x54
   423dc:	cmp	r3, #0
   423e0:	beq	425a0 <__assert_fail@plt+0x2fdc8>
   423e4:	ldr	fp, [r3, #32]
   423e8:	cmp	fp, #0
   423ec:	beq	425a0 <__assert_fail@plt+0x2fdc8>
   423f0:	ldr	r3, [fp, #32]
   423f4:	cmp	r3, #0
   423f8:	beq	425a0 <__assert_fail@plt+0x2fdc8>
   423fc:	mov	r0, sl
   42400:	bl	3cdc4 <__assert_fail@plt+0x2a5ec>
   42404:	ldr	r3, [sp, #48]	; 0x30
   42408:	cmp	r8, #0
   4240c:	ldr	r2, [fp, #4]
   42410:	mov	sl, r0
   42414:	orrne	sl, r0, #4
   42418:	cmp	r3, #0
   4241c:	ldr	r3, [sp, #52]	; 0x34
   42420:	orrne	sl, sl, #32
   42424:	cmp	r3, #0
   42428:	orrne	sl, sl, #64	; 0x40
   4242c:	orrs	r3, r4, r5
   42430:	mov	r3, fp
   42434:	moveq	r8, #0
   42438:	movne	r8, #1
   4243c:	cmp	r7, #0
   42440:	orrne	r8, r8, #1
   42444:	cmp	r2, #0
   42448:	ldr	r7, [r3], #4
   4244c:	beq	42578 <__assert_fail@plt+0x2fda0>
   42450:	str	r3, [r6, #8]
   42454:	cmp	r8, #0
   42458:	ldr	r3, [fp, #8]
   4245c:	mov	r0, r6
   42460:	movne	r2, #118	; 0x76
   42464:	moveq	r2, #109	; 0x6d
   42468:	mov	r1, r7
   4246c:	str	r3, [r6, #12]
   42470:	mov	r3, #0
   42474:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42478:	cmp	r0, #0
   4247c:	bne	4248c <__assert_fail@plt+0x2fcb4>
   42480:	mov	r0, #0
   42484:	add	sp, sp, #12
   42488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4248c:	mov	r2, sl
   42490:	mov	r0, r6
   42494:	mov	r1, r7
   42498:	mov	r3, #0
   4249c:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   424a0:	cmp	r0, #0
   424a4:	beq	42480 <__assert_fail@plt+0x2fca8>
   424a8:	ldr	r3, [r6, #84]	; 0x54
   424ac:	mov	r0, r6
   424b0:	mov	r1, r7
   424b4:	ldr	r3, [r3, #32]
   424b8:	ldr	r2, [r3, #32]
   424bc:	bl	41054 <__assert_fail@plt+0x2e87c>
   424c0:	cmp	r0, #0
   424c4:	beq	42480 <__assert_fail@plt+0x2fca8>
   424c8:	mov	r2, r9
   424cc:	mov	r0, r6
   424d0:	mov	r1, r7
   424d4:	bl	41054 <__assert_fail@plt+0x2e87c>
   424d8:	cmp	r0, #0
   424dc:	beq	42480 <__assert_fail@plt+0x2fca8>
   424e0:	cmp	r8, #0
   424e4:	beq	42530 <__assert_fail@plt+0x2fd58>
   424e8:	ldr	r3, [r6, #84]	; 0x54
   424ec:	mov	r0, r6
   424f0:	ldr	r1, [r3, #32]
   424f4:	ldrd	r2, [r1, #24]
   424f8:	cmp	r5, r3
   424fc:	cmpeq	r4, r2
   42500:	mov	r2, r4
   42504:	strdhi	r4, [r1, #24]
   42508:	mov	r3, r5
   4250c:	mov	r1, r7
   42510:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42514:	cmp	r0, #0
   42518:	beq	42480 <__assert_fail@plt+0x2fca8>
   4251c:	ldr	r3, [r6, #84]	; 0x54
   42520:	ldr	r3, [r3, #32]
   42524:	ldr	r2, [r3, #12]
   42528:	add	r2, r2, #1
   4252c:	str	r2, [r3, #12]
   42530:	mov	r1, r7
   42534:	mov	r0, r6
   42538:	mov	r2, #0
   4253c:	mov	r3, #0
   42540:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42544:	cmp	r0, #0
   42548:	beq	42480 <__assert_fail@plt+0x2fca8>
   4254c:	ldr	r3, [r6, #84]	; 0x54
   42550:	mov	r0, #1
   42554:	ldr	r3, [r3, #32]
   42558:	ldr	r2, [r3, #12]
   4255c:	add	r2, r2, #5
   42560:	str	r2, [r3, #12]
   42564:	b	42484 <__assert_fail@plt+0x2fcac>
   42568:	mov	r0, r6
   4256c:	mov	r1, #0
   42570:	bl	3db28 <__assert_fail@plt+0x2b350>
   42574:	b	423d8 <__assert_fail@plt+0x2fc00>
   42578:	mov	r0, #500	; 0x1f4
   4257c:	stm	sp, {r2, r3}
   42580:	bl	12358 <xmalloc@plt>
   42584:	ldr	r2, [sp]
   42588:	ldr	r3, [sp, #4]
   4258c:	str	r2, [r0]
   42590:	str	r2, [r0, #4]
   42594:	str	r0, [fp, #4]
   42598:	str	r0, [fp, #8]
   4259c:	b	42450 <__assert_fail@plt+0x2fc78>
   425a0:	movw	r0, #42380	; 0xa58c
   425a4:	movw	r1, #41948	; 0xa3dc
   425a8:	movt	r0, #5
   425ac:	movt	r1, #5
   425b0:	movw	r2, #6313	; 0x18a9
   425b4:	ldr	r3, [pc]	; 425bc <__assert_fail@plt+0x2fde4>
   425b8:	bl	127d8 <__assert_fail@plt>
   425bc:	andeq	sl, r5, ip, asr #3
   425c0:	push	{r4, r5, lr}
   425c4:	sub	sp, sp, #28
   425c8:	mov	ip, #0
   425cc:	mov	r4, #0
   425d0:	ldr	lr, [sp, #40]	; 0x28
   425d4:	mov	r5, #0
   425d8:	str	r3, [sp]
   425dc:	mov	r3, #1
   425e0:	strd	r4, [sp, #8]
   425e4:	str	lr, [sp, #4]
   425e8:	str	ip, [sp, #16]
   425ec:	bl	423a8 <__assert_fail@plt+0x2fbd0>
   425f0:	add	sp, sp, #28
   425f4:	pop	{r4, r5, pc}
   425f8:	push	{r4, r5, r6}
   425fc:	ldr	r6, [sp, #12]
   42600:	str	r3, [sp, #12]
   42604:	mov	r3, #0
   42608:	str	r6, [sp, #16]
   4260c:	pop	{r4, r5, r6}
   42610:	b	423a8 <__assert_fail@plt+0x2fbd0>
   42614:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42618:	mov	r4, r0
   4261c:	mov	r9, r1
   42620:	mov	r1, #0
   42624:	mov	sl, r2
   42628:	mov	r6, r3
   4262c:	bl	3db28 <__assert_fail@plt+0x2b350>
   42630:	ldr	ip, [r4, #84]	; 0x54
   42634:	cmp	ip, #0
   42638:	beq	4271c <__assert_fail@plt+0x2ff44>
   4263c:	ldr	r5, [ip, #32]
   42640:	cmp	r5, #0
   42644:	beq	4271c <__assert_fail@plt+0x2ff44>
   42648:	mov	r0, r6
   4264c:	mov	r6, r5
   42650:	bl	3cdc4 <__assert_fail@plt+0x2a5ec>
   42654:	ldr	r8, [r5, #4]
   42658:	ldr	r7, [r6], #4
   4265c:	cmp	r8, #0
   42660:	mov	fp, r0
   42664:	beq	42700 <__assert_fail@plt+0x2ff28>
   42668:	str	r6, [r4, #8]
   4266c:	mov	r0, r4
   42670:	ldr	ip, [r5, #8]
   42674:	mov	r1, r7
   42678:	mov	r2, #100	; 0x64
   4267c:	mov	r3, #0
   42680:	str	ip, [r4, #12]
   42684:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42688:	cmp	r0, #0
   4268c:	bne	42698 <__assert_fail@plt+0x2fec0>
   42690:	mov	r0, #0
   42694:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42698:	orr	r2, fp, #4
   4269c:	mov	r0, r4
   426a0:	mov	r1, r7
   426a4:	mov	r3, #0
   426a8:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   426ac:	cmp	r0, #0
   426b0:	beq	42690 <__assert_fail@plt+0x2feb8>
   426b4:	mov	r2, r9
   426b8:	mov	r0, r4
   426bc:	mov	r1, r7
   426c0:	bl	41054 <__assert_fail@plt+0x2e87c>
   426c4:	cmp	r0, #0
   426c8:	beq	42690 <__assert_fail@plt+0x2feb8>
   426cc:	mov	r1, r7
   426d0:	mov	r2, sl
   426d4:	mov	r0, r4
   426d8:	bl	41054 <__assert_fail@plt+0x2e87c>
   426dc:	cmp	r0, #0
   426e0:	beq	42690 <__assert_fail@plt+0x2feb8>
   426e4:	ldr	r3, [r4, #84]	; 0x54
   426e8:	mov	r0, #1
   426ec:	ldr	r3, [r3, #32]
   426f0:	ldr	r2, [r3, #12]
   426f4:	add	r2, r2, #4
   426f8:	str	r2, [r3, #12]
   426fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42700:	mov	r0, #500	; 0x1f4
   42704:	bl	12358 <xmalloc@plt>
   42708:	str	r8, [r0]
   4270c:	str	r8, [r0, #4]
   42710:	str	r0, [r5, #4]
   42714:	str	r0, [r5, #8]
   42718:	b	42668 <__assert_fail@plt+0x2fe90>
   4271c:	movw	r0, #42920	; 0xa7a8
   42720:	movw	r1, #41948	; 0xa3dc
   42724:	movt	r0, #5
   42728:	movt	r1, #5
   4272c:	movw	r2, #6178	; 0x1822
   42730:	ldr	r3, [pc]	; 42738 <__assert_fail@plt+0x2ff60>
   42734:	bl	127d8 <__assert_fail@plt>
   42738:	andeq	sl, r5, r4, ror #3
   4273c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42740:	mov	sl, r0
   42744:	ldr	lr, [r0, #84]	; 0x54
   42748:	sub	sp, sp, #44	; 0x2c
   4274c:	mov	r6, r1
   42750:	mov	r5, r2
   42754:	cmp	lr, #0
   42758:	mov	r4, r3
   4275c:	beq	42bd4 <__assert_fail@plt+0x303fc>
   42760:	ldr	r3, [lr]
   42764:	cmp	r3, #0
   42768:	beq	42bd4 <__assert_fail@plt+0x303fc>
   4276c:	ldr	r2, [r3, #24]
   42770:	cmp	r2, #0
   42774:	beq	42bd4 <__assert_fail@plt+0x303fc>
   42778:	ldrb	r3, [r3, #36]	; 0x24
   4277c:	tst	r3, #8
   42780:	bne	42820 <__assert_fail@plt+0x30048>
   42784:	ldrb	r3, [lr, #36]	; 0x24
   42788:	mov	r1, #1
   4278c:	ldr	r8, [lr, #8]
   42790:	ubfx	r7, r3, #2, #1
   42794:	and	r2, r3, r1
   42798:	ubfx	r3, r3, #1, #1
   4279c:	str	r2, [sp, #28]
   427a0:	str	r3, [sp, #36]	; 0x24
   427a4:	bl	3db28 <__assert_fail@plt+0x2b350>
   427a8:	cmp	r7, #0
   427ac:	ldr	r7, [sl, #84]	; 0x54
   427b0:	ldrbne	r3, [r7, #36]	; 0x24
   427b4:	ldr	fp, [r7, #32]
   427b8:	orrne	r3, r3, #4
   427bc:	strbne	r3, [r7, #36]	; 0x24
   427c0:	cmp	fp, #0
   427c4:	str	r0, [sp, #32]
   427c8:	beq	42a18 <__assert_fail@plt+0x30240>
   427cc:	ldr	r0, [sp, #88]	; 0x58
   427d0:	mov	r9, fp
   427d4:	bl	3cdc4 <__assert_fail@plt+0x2a5ec>
   427d8:	ldr	r1, [fp, #4]
   427dc:	ldr	r7, [r9], #4
   427e0:	cmp	r1, #0
   427e4:	str	r0, [sp, #24]
   427e8:	beq	42b78 <__assert_fail@plt+0x303a0>
   427ec:	str	r9, [sl, #8]
   427f0:	mov	r0, sl
   427f4:	ldr	lr, [fp, #8]
   427f8:	mov	r1, r7
   427fc:	mov	r2, #100	; 0x64
   42800:	mov	r3, #0
   42804:	str	lr, [sl, #12]
   42808:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   4280c:	cmp	r0, #0
   42810:	bne	42834 <__assert_fail@plt+0x3005c>
   42814:	mov	r0, #0
   42818:	add	sp, sp, #44	; 0x2c
   4281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42820:	mov	r1, #0
   42824:	bl	3db28 <__assert_fail@plt+0x2b350>
   42828:	mov	r0, #1
   4282c:	add	sp, sp, #44	; 0x2c
   42830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42834:	ldr	r2, [sp, #24]
   42838:	mov	r0, sl
   4283c:	mov	r1, r7
   42840:	mov	r3, #0
   42844:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42848:	cmp	r0, #0
   4284c:	beq	42814 <__assert_fail@plt+0x3003c>
   42850:	mov	r0, sl
   42854:	mov	r1, r7
   42858:	mov	r2, r6
   4285c:	bl	41054 <__assert_fail@plt+0x2e87c>
   42860:	cmp	r0, #0
   42864:	beq	42814 <__assert_fail@plt+0x3003c>
   42868:	mov	r1, r7
   4286c:	mov	r0, sl
   42870:	mov	r2, r6
   42874:	bl	41054 <__assert_fail@plt+0x2e87c>
   42878:	cmp	r0, #0
   4287c:	beq	42814 <__assert_fail@plt+0x3003c>
   42880:	ldr	r7, [sl, #84]	; 0x54
   42884:	ldr	r3, [sp, #36]	; 0x24
   42888:	ldr	fp, [r7, #32]
   4288c:	cmp	r3, #0
   42890:	ldr	r3, [fp, #12]
   42894:	add	r3, r3, #4
   42898:	str	r3, [fp, #12]
   4289c:	beq	42a18 <__assert_fail@plt+0x30240>
   428a0:	ldr	r3, [fp, #36]	; 0x24
   428a4:	add	r2, fp, #36	; 0x24
   428a8:	ldr	r7, [sl, #92]	; 0x5c
   428ac:	cmp	r3, #0
   428b0:	add	r1, r7, #1
   428b4:	str	r1, [sl, #92]	; 0x5c
   428b8:	beq	42bf0 <__assert_fail@plt+0x30418>
   428bc:	str	r2, [sl, #8]
   428c0:	movw	r1, #489	; 0x1e9
   428c4:	ldr	r3, [fp, #40]	; 0x28
   428c8:	ldr	r2, [r3, #4]
   428cc:	str	r3, [sl, #12]
   428d0:	cmp	r2, r1
   428d4:	bhi	42bb8 <__assert_fail@plt+0x303e0>
   428d8:	add	r1, r3, r2
   428dc:	mvn	r0, #15
   428e0:	add	r2, r2, #1
   428e4:	str	r2, [r3, #4]
   428e8:	strb	r0, [r1, #8]
   428ec:	mov	r0, sl
   428f0:	mov	r2, r7
   428f4:	mov	r3, #0
   428f8:	bl	3d800 <__assert_fail@plt+0x2b028>
   428fc:	cmp	r0, #0
   42900:	beq	42814 <__assert_fail@plt+0x3003c>
   42904:	movw	r1, #11856	; 0x2e50
   42908:	mov	r0, sl
   4290c:	movt	r1, #5
   42910:	bl	3d610 <__assert_fail@plt+0x2ae38>
   42914:	cmp	r0, #0
   42918:	beq	42814 <__assert_fail@plt+0x3003c>
   4291c:	mov	r0, sl
   42920:	movw	r1, #61902	; 0xf1ce
   42924:	bl	3d578 <__assert_fail@plt+0x2ada0>
   42928:	cmp	r0, #0
   4292c:	beq	42814 <__assert_fail@plt+0x3003c>
   42930:	mov	r0, sl
   42934:	mov	r2, r7
   42938:	mov	r3, #0
   4293c:	bl	3d800 <__assert_fail@plt+0x2b028>
   42940:	cmp	r0, #0
   42944:	beq	42814 <__assert_fail@plt+0x3003c>
   42948:	mov	r0, sl
   4294c:	mov	r2, #0
   42950:	mov	r3, #0
   42954:	bl	3d800 <__assert_fail@plt+0x2b028>
   42958:	cmp	r0, #0
   4295c:	beq	42814 <__assert_fail@plt+0x3003c>
   42960:	mov	r0, sl
   42964:	mov	r2, #62	; 0x3e
   42968:	mov	r3, #0
   4296c:	bl	3d800 <__assert_fail@plt+0x2b028>
   42970:	cmp	r0, #0
   42974:	beq	42814 <__assert_fail@plt+0x3003c>
   42978:	mov	r0, sl
   4297c:	mov	r2, #80	; 0x50
   42980:	mov	r3, #0
   42984:	bl	3d800 <__assert_fail@plt+0x2b028>
   42988:	cmp	r0, #0
   4298c:	beq	42814 <__assert_fail@plt+0x3003c>
   42990:	mov	r0, sl
   42994:	mov	r2, #4
   42998:	mov	r3, #0
   4299c:	bl	3d800 <__assert_fail@plt+0x2b028>
   429a0:	cmp	r0, #0
   429a4:	beq	42814 <__assert_fail@plt+0x3003c>
   429a8:	mov	r0, sl
   429ac:	mov	r1, r7
   429b0:	mov	r2, #82	; 0x52
   429b4:	mov	r3, #0
   429b8:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   429bc:	cmp	r0, #0
   429c0:	beq	42814 <__assert_fail@plt+0x3003c>
   429c4:	mov	r0, sl
   429c8:	mov	r1, r7
   429cc:	mov	r2, #3
   429d0:	mov	r3, #0
   429d4:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   429d8:	cmp	r0, #0
   429dc:	beq	42814 <__assert_fail@plt+0x3003c>
   429e0:	ldr	r3, [sl, #84]	; 0x54
   429e4:	mov	r0, sl
   429e8:	mov	r1, r7
   429ec:	ldr	r2, [r3, #12]
   429f0:	bl	41054 <__assert_fail@plt+0x2e87c>
   429f4:	cmp	r0, #0
   429f8:	beq	42814 <__assert_fail@plt+0x3003c>
   429fc:	mov	r1, r7
   42a00:	mov	r0, sl
   42a04:	mov	r2, r6
   42a08:	bl	41054 <__assert_fail@plt+0x2e87c>
   42a0c:	cmp	r0, #0
   42a10:	beq	42814 <__assert_fail@plt+0x3003c>
   42a14:	ldr	r7, [sl, #84]	; 0x54
   42a18:	ldr	r0, [sp, #80]	; 0x50
   42a1c:	ldr	r1, [sp, #84]	; 0x54
   42a20:	orrs	r0, r0, r1
   42a24:	movne	fp, #0
   42a28:	moveq	fp, #1
   42a2c:	cmp	r8, #0
   42a30:	orreq	fp, fp, #1
   42a34:	cmp	fp, #0
   42a38:	bne	42b08 <__assert_fail@plt+0x30330>
   42a3c:	lsl	r8, r8, #3
   42a40:	ldrd	r0, [sp, #80]	; 0x50
   42a44:	mov	r3, #0
   42a48:	mov	r2, r8
   42a4c:	cmp	r3, r1
   42a50:	cmpeq	r2, r0
   42a54:	beq	42b08 <__assert_fail@plt+0x30330>
   42a58:	ldr	r1, [sp, #28]
   42a5c:	mov	r0, sl
   42a60:	mvn	r2, #0
   42a64:	mov	r3, fp
   42a68:	str	r1, [sp]
   42a6c:	mov	r1, fp
   42a70:	ldrb	lr, [r7, #36]	; 0x24
   42a74:	str	fp, [sp, #8]
   42a78:	ubfx	lr, lr, #2, #1
   42a7c:	str	lr, [sp, #4]
   42a80:	bl	3de78 <__assert_fail@plt+0x2b6a0>
   42a84:	cmp	r0, #0
   42a88:	beq	42814 <__assert_fail@plt+0x3003c>
   42a8c:	mov	r0, sl
   42a90:	mov	r2, #103	; 0x67
   42a94:	mov	r3, #0
   42a98:	bl	3d800 <__assert_fail@plt+0x2b028>
   42a9c:	cmp	r0, #0
   42aa0:	beq	42814 <__assert_fail@plt+0x3003c>
   42aa4:	ldr	r3, [sp, #28]
   42aa8:	mov	r0, sl
   42aac:	eor	r2, r3, #1
   42ab0:	mov	r3, #0
   42ab4:	uxtb	r2, r2
   42ab8:	bl	3d800 <__assert_fail@plt+0x2b028>
   42abc:	cmp	r0, #0
   42ac0:	beq	42814 <__assert_fail@plt+0x3003c>
   42ac4:	mov	r0, sl
   42ac8:	ldrd	r2, [sp, #80]	; 0x50
   42acc:	bl	3d800 <__assert_fail@plt+0x2b028>
   42ad0:	cmp	r0, #0
   42ad4:	beq	42814 <__assert_fail@plt+0x3003c>
   42ad8:	ldr	r2, [sp, #32]
   42adc:	mov	r3, fp
   42ae0:	mov	r0, sl
   42ae4:	bl	3d800 <__assert_fail@plt+0x2b028>
   42ae8:	cmp	r0, #0
   42aec:	beq	42814 <__assert_fail@plt+0x3003c>
   42af0:	mov	r0, sl
   42af4:	mov	r1, #1
   42af8:	bl	3db28 <__assert_fail@plt+0x2b350>
   42afc:	ldr	r7, [sl, #84]	; 0x54
   42b00:	str	r0, [sp, #32]
   42b04:	b	42b14 <__assert_fail@plt+0x3033c>
   42b08:	lsr	r5, r5, #3
   42b0c:	orr	r5, r5, r4, lsl #29
   42b10:	lsr	r4, r4, #3
   42b14:	ldr	r8, [r7, #24]
   42b18:	add	r9, r7, #24
   42b1c:	cmp	r8, #0
   42b20:	beq	42b9c <__assert_fail@plt+0x303c4>
   42b24:	str	r9, [sl, #8]
   42b28:	mov	r1, r6
   42b2c:	ldr	r3, [r7, #28]
   42b30:	mov	r0, sl
   42b34:	str	r3, [sl, #12]
   42b38:	bl	3d610 <__assert_fail@plt+0x2ae38>
   42b3c:	cmp	r0, #0
   42b40:	beq	42814 <__assert_fail@plt+0x3003c>
   42b44:	ldr	r2, [sp, #32]
   42b48:	mov	r0, sl
   42b4c:	mov	r3, #0
   42b50:	bl	3d800 <__assert_fail@plt+0x2b028>
   42b54:	cmp	r0, #0
   42b58:	beq	42814 <__assert_fail@plt+0x3003c>
   42b5c:	mov	r0, sl
   42b60:	mov	r2, r5
   42b64:	mov	r3, r4
   42b68:	bl	3d800 <__assert_fail@plt+0x2b028>
   42b6c:	adds	r0, r0, #0
   42b70:	movne	r0, #1
   42b74:	b	42818 <__assert_fail@plt+0x30040>
   42b78:	mov	r0, #500	; 0x1f4
   42b7c:	str	r1, [sp, #20]
   42b80:	bl	12358 <xmalloc@plt>
   42b84:	ldr	r1, [sp, #20]
   42b88:	str	r1, [r0]
   42b8c:	str	r1, [r0, #4]
   42b90:	str	r0, [fp, #4]
   42b94:	str	r0, [fp, #8]
   42b98:	b	427ec <__assert_fail@plt+0x30014>
   42b9c:	mov	r0, #500	; 0x1f4
   42ba0:	bl	12358 <xmalloc@plt>
   42ba4:	str	r8, [r0]
   42ba8:	str	r8, [r0, #4]
   42bac:	str	r0, [r7, #24]
   42bb0:	str	r0, [r7, #28]
   42bb4:	b	42b24 <__assert_fail@plt+0x3034c>
   42bb8:	add	r0, sl, #8
   42bbc:	add	r1, sl, #12
   42bc0:	mov	r2, #240	; 0xf0
   42bc4:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   42bc8:	cmp	r0, #0
   42bcc:	bne	428ec <__assert_fail@plt+0x30114>
   42bd0:	b	42814 <__assert_fail@plt+0x3003c>
   42bd4:	movw	r0, #43004	; 0xa7fc
   42bd8:	movw	r1, #41948	; 0xa3dc
   42bdc:	movt	r0, #5
   42be0:	movt	r1, #5
   42be4:	movw	r2, #5940	; 0x1734
   42be8:	ldr	r3, [pc, #44]	; 42c1c <__assert_fail@plt+0x30444>
   42bec:	bl	127d8 <__assert_fail@plt>
   42bf0:	mov	r0, #500	; 0x1f4
   42bf4:	str	r2, [sp, #20]
   42bf8:	str	r3, [sp, #16]
   42bfc:	bl	12358 <xmalloc@plt>
   42c00:	ldr	r3, [sp, #16]
   42c04:	ldr	r2, [sp, #20]
   42c08:	str	r3, [r0]
   42c0c:	str	r3, [r0, #4]
   42c10:	str	r0, [fp, #36]	; 0x24
   42c14:	str	r0, [fp, #40]	; 0x28
   42c18:	b	428bc <__assert_fail@plt+0x300e4>
   42c1c:	andeq	sl, r5, r0, lsl #4
   42c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42c24:	movw	r4, #65176	; 0xfe98
   42c28:	movt	r4, #6
   42c2c:	subs	r5, r1, #0
   42c30:	sub	sp, sp, #28
   42c34:	mov	sl, r0
   42c38:	ldr	r1, [r4]
   42c3c:	mov	r8, r2
   42c40:	mov	fp, r3
   42c44:	ldr	r7, [sp, #68]	; 0x44
   42c48:	ldr	r6, [sp, #72]	; 0x48
   42c4c:	str	r1, [sp, #20]
   42c50:	beq	42dac <__assert_fail@plt+0x305d4>
   42c54:	adds	r7, r7, #0
   42c58:	movne	r7, #1
   42c5c:	cmp	r6, #0
   42c60:	movne	r7, #0
   42c64:	cmp	r7, #0
   42c68:	beq	42c88 <__assert_fail@plt+0x304b0>
   42c6c:	ldr	r3, [sl, #84]	; 0x54
   42c70:	ldr	r7, [r3, #12]
   42c74:	cmp	r7, #0
   42c78:	beq	42dd8 <__assert_fail@plt+0x30600>
   42c7c:	mov	r0, sl
   42c80:	mov	r1, #1
   42c84:	bl	3db28 <__assert_fail@plt+0x2b350>
   42c88:	ldr	r3, [sp, #64]	; 0x40
   42c8c:	mov	r2, r8
   42c90:	mov	r0, sl
   42c94:	mov	r1, r5
   42c98:	str	r3, [sp]
   42c9c:	mov	r3, fp
   42ca0:	bl	3f30c <__assert_fail@plt+0x2cb34>
   42ca4:	cmp	r0, #0
   42ca8:	bne	42ccc <__assert_fail@plt+0x304f4>
   42cac:	mov	r3, #0
   42cb0:	ldr	r2, [sp, #20]
   42cb4:	mov	r0, r3
   42cb8:	ldr	r3, [r4]
   42cbc:	cmp	r2, r3
   42cc0:	bne	42dd4 <__assert_fail@plt+0x305fc>
   42cc4:	add	sp, sp, #28
   42cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42ccc:	ldr	r8, [sl, #92]	; 0x5c
   42cd0:	mov	r0, #500	; 0x1f4
   42cd4:	mov	r9, #0
   42cd8:	str	r9, [sp, #12]
   42cdc:	add	r3, r8, #1
   42ce0:	str	r3, [sl, #92]	; 0x5c
   42ce4:	str	r9, [sp, #16]
   42ce8:	bl	12358 <xmalloc@plt>
   42cec:	mov	r1, r8
   42cf0:	mov	r2, #84	; 0x54
   42cf4:	mov	r3, #0
   42cf8:	mov	ip, r0
   42cfc:	mov	r0, sl
   42d00:	str	r9, [ip]
   42d04:	str	r9, [ip, #4]
   42d08:	add	r9, sp, #12
   42d0c:	str	ip, [sl, #12]
   42d10:	str	r9, [sl, #8]
   42d14:	str	ip, [sp, #12]
   42d18:	str	ip, [sp, #16]
   42d1c:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42d20:	cmp	r0, #0
   42d24:	beq	42cac <__assert_fail@plt+0x304d4>
   42d28:	cmp	fp, #0
   42d2c:	mov	r3, #0
   42d30:	mov	r0, sl
   42d34:	mov	r1, r8
   42d38:	movne	r2, #111	; 0x6f
   42d3c:	moveq	r2, #117	; 0x75
   42d40:	bl	3f544 <__assert_fail@plt+0x2cd6c>
   42d44:	cmp	r0, #0
   42d48:	beq	42cac <__assert_fail@plt+0x304d4>
   42d4c:	mov	r2, r5
   42d50:	mov	r0, sl
   42d54:	mov	r1, r8
   42d58:	bl	41054 <__assert_fail@plt+0x2e87c>
   42d5c:	cmp	r0, #0
   42d60:	beq	42cac <__assert_fail@plt+0x304d4>
   42d64:	mov	r0, #48	; 0x30
   42d68:	bl	12358 <xmalloc@plt>
   42d6c:	mov	r1, #0
   42d70:	mov	r2, #48	; 0x30
   42d74:	mov	r5, r0
   42d78:	bl	12580 <memset@plt>
   42d7c:	ldr	ip, [sl, #84]	; 0x54
   42d80:	mov	r2, r5
   42d84:	ldm	r9, {r0, r1}
   42d88:	mov	r3, #1
   42d8c:	str	r8, [r2], #4
   42d90:	mov	r8, #3
   42d94:	stm	r2, {r0, r1}
   42d98:	str	r7, [r5, #16]
   42d9c:	str	r6, [r5, #20]
   42da0:	str	r8, [r5, #12]
   42da4:	str	r5, [ip, #32]
   42da8:	b	42cb0 <__assert_fail@plt+0x304d8>
   42dac:	mov	r0, #20
   42db0:	bl	12358 <xmalloc@plt>
   42db4:	str	r8, [sp]
   42db8:	movw	r3, #41756	; 0xa31c
   42dbc:	mov	r1, #1
   42dc0:	movt	r3, #5
   42dc4:	mvn	r2, #0
   42dc8:	mov	r5, r0
   42dcc:	bl	12568 <__sprintf_chk@plt>
   42dd0:	b	42c54 <__assert_fail@plt+0x3047c>
   42dd4:	bl	122b0 <__stack_chk_fail@plt>
   42dd8:	movw	r0, #43144	; 0xa888
   42ddc:	movw	r1, #41948	; 0xa3dc
   42de0:	movt	r0, #5
   42de4:	movt	r1, #5
   42de8:	movw	r2, #6126	; 0x17ee
   42dec:	ldr	r3, [pc]	; 42df4 <__assert_fail@plt+0x3061c>
   42df0:	bl	127d8 <__assert_fail@plt>
   42df4:	andeq	sl, r5, r4, lsl r2
   42df8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   42dfc:	mov	r4, r0
   42e00:	ldr	r3, [r0, #48]	; 0x30
   42e04:	mov	r5, r1
   42e08:	mov	r6, r2
   42e0c:	cmp	r3, #0
   42e10:	beq	42fa0 <__assert_fail@plt+0x307c8>
   42e14:	ldr	r3, [r0, #52]	; 0x34
   42e18:	add	r2, r0, #48	; 0x30
   42e1c:	str	r2, [r0, #8]
   42e20:	str	r3, [r0, #12]
   42e24:	ldr	r2, [r6]
   42e28:	tst	r2, #16
   42e2c:	movne	r6, #1
   42e30:	beq	42ea0 <__assert_fail@plt+0x306c8>
   42e34:	ldr	r0, [r3, #4]
   42e38:	movw	r1, #489	; 0x1e9
   42e3c:	cmp	r0, r1
   42e40:	bhi	42ebc <__assert_fail@plt+0x306e4>
   42e44:	add	r2, r3, r0
   42e48:	mvn	r1, #7
   42e4c:	add	r0, r0, #1
   42e50:	str	r0, [r3, #4]
   42e54:	strb	r1, [r2, #8]
   42e58:	ldr	r3, [r4, #12]
   42e5c:	movw	r2, #489	; 0x1e9
   42e60:	ldr	r0, [r3, #4]
   42e64:	cmp	r0, r2
   42e68:	bhi	42f84 <__assert_fail@plt+0x307ac>
   42e6c:	add	r2, r3, r0
   42e70:	mov	r1, #11
   42e74:	add	r0, r0, #1
   42e78:	str	r0, [r3, #4]
   42e7c:	strb	r1, [r2, #8]
   42e80:	mov	r0, r4
   42e84:	mov	r2, #0
   42e88:	mov	r3, #0
   42e8c:	bl	3d800 <__assert_fail@plt+0x2b028>
   42e90:	cmp	r0, #0
   42e94:	bne	42ed8 <__assert_fail@plt+0x30700>
   42e98:	mov	r0, #0
   42e9c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   42ea0:	tst	r2, #8
   42ea4:	ldr	r0, [r3, #4]
   42ea8:	movw	r1, #489	; 0x1e9
   42eac:	moveq	r6, #2
   42eb0:	movne	r6, #3
   42eb4:	cmp	r0, r1
   42eb8:	bls	42e44 <__assert_fail@plt+0x3066c>
   42ebc:	add	r0, r4, #8
   42ec0:	add	r1, r4, #12
   42ec4:	mov	r2, #248	; 0xf8
   42ec8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   42ecc:	cmp	r0, #0
   42ed0:	bne	42e58 <__assert_fail@plt+0x30680>
   42ed4:	b	42e98 <__assert_fail@plt+0x306c0>
   42ed8:	movw	r1, #11856	; 0x2e50
   42edc:	mov	r0, r4
   42ee0:	movt	r1, #5
   42ee4:	bl	3d610 <__assert_fail@plt+0x2ae38>
   42ee8:	cmp	r0, #0
   42eec:	beq	42e98 <__assert_fail@plt+0x306c0>
   42ef0:	mov	r0, r4
   42ef4:	mov	r2, r6
   42ef8:	asr	r3, r6, #31
   42efc:	bl	3d800 <__assert_fail@plt+0x2b028>
   42f00:	cmp	r0, #0
   42f04:	beq	42e98 <__assert_fail@plt+0x306c0>
   42f08:	ldr	r2, [r5]
   42f0c:	mov	r0, r4
   42f10:	mov	r3, #0
   42f14:	add	r2, r2, #1
   42f18:	bl	3d800 <__assert_fail@plt+0x2b028>
   42f1c:	cmp	r0, #0
   42f20:	beq	42e98 <__assert_fail@plt+0x306c0>
   42f24:	mov	r0, r4
   42f28:	ldrd	r2, [sp, #32]
   42f2c:	bl	3d800 <__assert_fail@plt+0x2b028>
   42f30:	cmp	r0, #0
   42f34:	beq	42e98 <__assert_fail@plt+0x306c0>
   42f38:	ldr	r3, [r4, #12]
   42f3c:	movw	r1, #489	; 0x1e9
   42f40:	ldr	r2, [r3, #4]
   42f44:	cmp	r2, r1
   42f48:	bhi	4313c <__assert_fail@plt+0x30964>
   42f4c:	add	r1, r3, r2
   42f50:	mvn	r0, #6
   42f54:	add	r2, r2, #1
   42f58:	str	r2, [r3, #4]
   42f5c:	strb	r0, [r1, #8]
   42f60:	ldrd	r2, [sp, #40]	; 0x28
   42f64:	mov	r0, r4
   42f68:	ldrd	r4, [sp, #32]
   42f6c:	subs	r2, r2, r4
   42f70:	sbc	r3, r3, r5
   42f74:	bl	3d800 <__assert_fail@plt+0x2b028>
   42f78:	adds	r0, r0, #0
   42f7c:	movne	r0, #1
   42f80:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   42f84:	add	r0, r4, #8
   42f88:	add	r1, r4, #12
   42f8c:	mov	r2, #11
   42f90:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   42f94:	cmp	r0, #0
   42f98:	bne	42e80 <__assert_fail@plt+0x306a8>
   42f9c:	b	42e98 <__assert_fail@plt+0x306c0>
   42fa0:	ldr	r3, [r0]
   42fa4:	mov	r1, #47	; 0x2f
   42fa8:	add	r9, r4, #48	; 0x30
   42fac:	ldr	r7, [r3]
   42fb0:	mov	r0, r7
   42fb4:	bl	1267c <strrchr@plt>
   42fb8:	cmp	r0, #0
   42fbc:	addne	r7, r0, #1
   42fc0:	mov	r0, r7
   42fc4:	bl	1237c <xstrdup@plt>
   42fc8:	mov	r1, #46	; 0x2e
   42fcc:	mov	r7, r0
   42fd0:	bl	1267c <strrchr@plt>
   42fd4:	cmp	r0, #0
   42fd8:	movne	r3, #0
   42fdc:	strbne	r3, [r0]
   42fe0:	ldr	r8, [r4, #48]	; 0x30
   42fe4:	cmp	r8, #0
   42fe8:	beq	43110 <__assert_fail@plt+0x30938>
   42fec:	ldr	r3, [r4, #52]	; 0x34
   42ff0:	movw	r1, #489	; 0x1e9
   42ff4:	ldr	r2, [r3, #4]
   42ff8:	str	r3, [r4, #12]
   42ffc:	cmp	r2, r1
   43000:	str	r9, [r4, #8]
   43004:	bhi	430d8 <__assert_fail@plt+0x30900>
   43008:	add	r1, r3, r2
   4300c:	mvn	r0, #7
   43010:	add	r2, r2, #1
   43014:	str	r2, [r3, #4]
   43018:	strb	r0, [r1, #8]
   4301c:	ldr	r3, [r4, #12]
   43020:	movw	r1, #489	; 0x1e9
   43024:	ldr	r2, [r3, #4]
   43028:	cmp	r2, r1
   4302c:	bhi	430f4 <__assert_fail@plt+0x3091c>
   43030:	add	r1, r3, r2
   43034:	mov	r0, #10
   43038:	add	r2, r2, #1
   4303c:	str	r2, [r3, #4]
   43040:	strb	r0, [r1, #8]
   43044:	mov	r0, r4
   43048:	mov	r2, #0
   4304c:	mov	r3, #0
   43050:	bl	3d800 <__assert_fail@plt+0x2b028>
   43054:	cmp	r0, #0
   43058:	bne	4306c <__assert_fail@plt+0x30894>
   4305c:	mov	r0, r7
   43060:	bl	121f0 <free@plt>
   43064:	mov	r0, #0
   43068:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   4306c:	mov	r0, r4
   43070:	mov	r1, r7
   43074:	bl	3d610 <__assert_fail@plt+0x2ae38>
   43078:	cmp	r0, #0
   4307c:	beq	4305c <__assert_fail@plt+0x30884>
   43080:	movw	r1, #11856	; 0x2e50
   43084:	mov	r0, r4
   43088:	movt	r1, #5
   4308c:	bl	3d610 <__assert_fail@plt+0x2ae38>
   43090:	cmp	r0, #0
   43094:	beq	4305c <__assert_fail@plt+0x30884>
   43098:	mov	r0, r4
   4309c:	mov	r2, #0
   430a0:	mov	r3, #0
   430a4:	bl	3d800 <__assert_fail@plt+0x2b028>
   430a8:	cmp	r0, #0
   430ac:	beq	4305c <__assert_fail@plt+0x30884>
   430b0:	movw	r1, #42368	; 0xa580
   430b4:	mov	r0, r4
   430b8:	movt	r1, #5
   430bc:	bl	3d610 <__assert_fail@plt+0x2ae38>
   430c0:	cmp	r0, #0
   430c4:	beq	4305c <__assert_fail@plt+0x30884>
   430c8:	mov	r0, r7
   430cc:	bl	121f0 <free@plt>
   430d0:	ldr	r3, [r4, #12]
   430d4:	b	42e24 <__assert_fail@plt+0x3064c>
   430d8:	add	r0, r4, #8
   430dc:	add	r1, r4, #12
   430e0:	mov	r2, #248	; 0xf8
   430e4:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   430e8:	cmp	r0, #0
   430ec:	bne	4301c <__assert_fail@plt+0x30844>
   430f0:	b	4305c <__assert_fail@plt+0x30884>
   430f4:	add	r0, r4, #8
   430f8:	add	r1, r4, #12
   430fc:	mov	r2, #10
   43100:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   43104:	cmp	r0, #0
   43108:	bne	43044 <__assert_fail@plt+0x3086c>
   4310c:	b	4305c <__assert_fail@plt+0x30884>
   43110:	mov	r0, #500	; 0x1f4
   43114:	bl	12358 <xmalloc@plt>
   43118:	mov	r2, r8
   4311c:	str	r8, [r0]
   43120:	mov	r3, r0
   43124:	str	r8, [r0, #4]
   43128:	str	r0, [r4, #48]	; 0x30
   4312c:	str	r0, [r4, #52]	; 0x34
   43130:	str	r0, [r4, #12]
   43134:	str	r9, [r4, #8]
   43138:	b	43008 <__assert_fail@plt+0x30830>
   4313c:	add	r0, r4, #8
   43140:	add	r1, r4, #12
   43144:	mov	r2, #249	; 0xf9
   43148:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   4314c:	cmp	r0, #0
   43150:	bne	42f60 <__assert_fail@plt+0x30788>
   43154:	b	42e98 <__assert_fail@plt+0x306c0>
   43158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4315c:	mov	r7, r1
   43160:	ldrd	r4, [r7, #48]	; 0x30
   43164:	sub	sp, sp, #28
   43168:	ldrd	r0, [r1, #32]
   4316c:	mov	sl, r2
   43170:	ldr	r6, [r2, #76]	; 0x4c
   43174:	adds	r4, r4, r0
   43178:	adc	r5, r5, r1
   4317c:	cmp	r6, #0
   43180:	bne	43194 <__assert_fail@plt+0x309bc>
   43184:	b	43254 <__assert_fail@plt+0x30a7c>
   43188:	ldr	r6, [r6]
   4318c:	cmp	r6, #0
   43190:	beq	43254 <__assert_fail@plt+0x30a7c>
   43194:	ldrd	r2, [r6, #16]
   43198:	cmp	r1, r3
   4319c:	cmpeq	r0, r2
   431a0:	bcs	43188 <__assert_fail@plt+0x309b0>
   431a4:	cmp	r1, r5
   431a8:	cmpeq	r0, r4
   431ac:	bcs	4324c <__assert_fail@plt+0x30a74>
   431b0:	ldrd	r2, [r6, #8]
   431b4:	cmp	r5, r3
   431b8:	cmpeq	r4, r2
   431bc:	addhi	ip, r7, #20
   431c0:	addhi	fp, r7, #8
   431c4:	strhi	ip, [sp, #20]
   431c8:	bhi	431fc <__assert_fail@plt+0x30a24>
   431cc:	b	43260 <__assert_fail@plt+0x30a88>
   431d0:	ldrd	r0, [r6, #16]
   431d4:	ldr	r6, [r6]
   431d8:	cmp	r5, r1
   431dc:	cmpeq	r4, r0
   431e0:	bls	4324c <__assert_fail@plt+0x30a74>
   431e4:	cmp	r6, #0
   431e8:	beq	43260 <__assert_fail@plt+0x30a88>
   431ec:	ldrd	r2, [r6, #8]
   431f0:	cmp	r5, r3
   431f4:	cmpeq	r4, r2
   431f8:	bls	43260 <__assert_fail@plt+0x30a88>
   431fc:	cmp	r3, r1
   43200:	cmpeq	r2, r0
   43204:	bls	431d0 <__assert_fail@plt+0x309f8>
   43208:	mov	r8, r2
   4320c:	mov	r9, r3
   43210:	subs	r8, r8, r0
   43214:	sbc	r9, r9, r1
   43218:	cmp	r9, #0
   4321c:	cmpeq	r8, #256	; 0x100
   43220:	bls	431d0 <__assert_fail@plt+0x309f8>
   43224:	strd	r0, [sp]
   43228:	mov	r0, sl
   4322c:	strd	r2, [sp, #8]
   43230:	mov	r1, fp
   43234:	ldr	r2, [sp, #20]
   43238:	bl	42df8 <__assert_fail@plt+0x30620>
   4323c:	cmp	r0, #0
   43240:	bne	431d0 <__assert_fail@plt+0x309f8>
   43244:	mov	r3, #1
   43248:	str	r3, [sl, #4]
   4324c:	add	sp, sp, #28
   43250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43254:	cmp	r1, r5
   43258:	cmpeq	r0, r4
   4325c:	bcs	4324c <__assert_fail@plt+0x30a74>
   43260:	strd	r0, [sp]
   43264:	add	r2, r7, #20
   43268:	mov	r0, sl
   4326c:	strd	r4, [sp, #8]
   43270:	add	r1, r7, #8
   43274:	bl	42df8 <__assert_fail@plt+0x30620>
   43278:	cmp	r0, #0
   4327c:	beq	43244 <__assert_fail@plt+0x30a6c>
   43280:	add	sp, sp, #28
   43284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43288:	mov	r2, #0
   4328c:	push	{r4, r5, lr}
   43290:	mov	r3, r2
   43294:	sub	sp, sp, #12
   43298:	mov	r5, r0
   4329c:	add	r0, r0, #96	; 0x60
   432a0:	bl	124cc <bfd_hash_lookup@plt>
   432a4:	cmp	r0, #0
   432a8:	beq	43310 <__assert_fail@plt+0x30b38>
   432ac:	ldr	r4, [r0, #12]
   432b0:	add	r0, r5, #84	; 0x54
   432b4:	ldrb	r3, [r4, #40]	; 0x28
   432b8:	ldr	r1, [r4, #8]
   432bc:	ubfx	ip, r3, #2, #1
   432c0:	ldr	r2, [r4, #12]
   432c4:	and	r3, r3, #1
   432c8:	str	ip, [sp]
   432cc:	bl	3d038 <__assert_fail@plt+0x2a860>
   432d0:	cmp	r0, #0
   432d4:	moveq	r5, r0
   432d8:	beq	43304 <__assert_fail@plt+0x30b2c>
   432dc:	add	r4, r4, #8
   432e0:	ldr	ip, [r5, #84]	; 0x54
   432e4:	mov	r5, #1
   432e8:	ldm	r4!, {r0, r1, r2, r3}
   432ec:	add	ip, ip, #4
   432f0:	stmia	ip!, {r0, r1, r2, r3}
   432f4:	ldm	r4!, {r0, r1, r2, r3}
   432f8:	ldr	r4, [r4]
   432fc:	stmia	ip!, {r0, r1, r2, r3}
   43300:	str	r4, [ip]
   43304:	mov	r0, r5
   43308:	add	sp, sp, #12
   4330c:	pop	{r4, r5, pc}
   43310:	movw	r0, #43168	; 0xa8a0
   43314:	movw	r1, #41948	; 0xa3dc
   43318:	movt	r0, #5
   4331c:	movt	r1, #5
   43320:	movw	r2, #6490	; 0x195a
   43324:	ldr	r3, [pc]	; 4332c <__assert_fail@plt+0x30b54>
   43328:	bl	127d8 <__assert_fail@plt>
   4332c:	andeq	sl, r5, ip, lsr #4
   43330:	push	{r4, lr}
   43334:	movw	r1, #43188	; 0xa8b4
   43338:	mov	r4, r0
   4333c:	movt	r1, #5
   43340:	mov	r0, #0
   43344:	mov	r2, #5
   43348:	bl	12298 <dcgettext@plt>
   4334c:	mov	r1, r0
   43350:	ldr	r0, [r4, #4]
   43354:	pop	{r4, lr}
   43358:	b	3ce50 <__assert_fail@plt+0x2a678>
   4335c:	push	{r3, r4, r5, r6, r7, lr}
   43360:	mov	r5, r0
   43364:	ldr	r4, [r1]
   43368:	ldr	r0, [r0, #12]
   4336c:	ldr	r7, [sp, #24]
   43370:	cmp	r4, r0
   43374:	bcs	433c0 <__assert_fail@plt+0x30be8>
   43378:	mov	ip, r4
   4337c:	ldrb	r6, [ip], #1
   43380:	tst	r6, #128	; 0x80
   43384:	str	ip, [r1]
   43388:	bne	433d0 <__assert_fail@plt+0x30bf8>
   4338c:	ldr	r0, [r5, #12]
   43390:	rsb	r0, ip, r0
   43394:	cmp	r6, r0
   43398:	bhi	433c0 <__assert_fail@plt+0x30be8>
   4339c:	str	ip, [r2]
   433a0:	mov	r0, #1
   433a4:	ldr	r2, [r1]
   433a8:	cmp	r7, #0
   433ac:	str	r6, [r3]
   433b0:	add	r6, r2, r6
   433b4:	str	r6, [r1]
   433b8:	strne	r0, [r7]
   433bc:	pop	{r3, r4, r5, r6, r7, pc}
   433c0:	mov	r0, r5
   433c4:	bl	43330 <__assert_fail@plt+0x30b58>
   433c8:	mov	r0, #0
   433cc:	pop	{r3, r4, r5, r6, r7, pc}
   433d0:	cmp	r6, #222	; 0xde
   433d4:	beq	433fc <__assert_fail@plt+0x30c24>
   433d8:	cmp	r6, #223	; 0xdf
   433dc:	beq	4340c <__assert_fail@plt+0x30c34>
   433e0:	cmp	r7, #0
   433e4:	beq	43424 <__assert_fail@plt+0x30c4c>
   433e8:	str	r4, [r1]
   433ec:	mov	r3, #0
   433f0:	mov	r0, #1
   433f4:	str	r3, [r7]
   433f8:	pop	{r3, r4, r5, r6, r7, pc}
   433fc:	ldrb	r6, [r4, #1]
   43400:	add	ip, r4, #2
   43404:	str	ip, [r1]
   43408:	b	4338c <__assert_fail@plt+0x30bb4>
   4340c:	ldrb	r6, [r4, #1]
   43410:	add	ip, r4, #3
   43414:	ldrb	r0, [r4, #2]
   43418:	str	ip, [r1]
   4341c:	add	r6, r0, r6, lsl #8
   43420:	b	4338c <__assert_fail@plt+0x30bb4>
   43424:	mov	r0, r7
   43428:	mov	r2, #5
   4342c:	movw	r1, #43228	; 0xa8dc
   43430:	movt	r1, #5
   43434:	bl	12298 <dcgettext@plt>
   43438:	mov	r2, r4
   4343c:	add	r1, r5, #8
   43440:	mov	r3, r0
   43444:	ldr	r0, [r5, #4]
   43448:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   4344c:	mov	r0, r7
   43450:	pop	{r3, r4, r5, r6, r7, pc}
   43454:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   43458:	mov	ip, r1
   4345c:	ldr	r6, [r1]
   43460:	mov	r7, r0
   43464:	ldr	r1, [r0, #12]
   43468:	mov	r8, r3
   4346c:	cmp	r6, r1
   43470:	bcc	4348c <__assert_fail@plt+0x30cb4>
   43474:	cmp	r3, #0
   43478:	beq	43560 <__assert_fail@plt+0x30d88>
   4347c:	mov	r3, #0
   43480:	mov	r0, #1
   43484:	str	r3, [r8]
   43488:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   4348c:	mov	r3, r6
   43490:	ldrb	r1, [r3], #1
   43494:	cmp	r1, #127	; 0x7f
   43498:	str	r3, [ip]
   4349c:	bhi	434c0 <__assert_fail@plt+0x30ce8>
   434a0:	cmp	r8, #0
   434a4:	uxtb	r4, r1
   434a8:	mov	r5, #0
   434ac:	strd	r4, [r2]
   434b0:	beq	43548 <__assert_fail@plt+0x30d70>
   434b4:	mov	r0, #1
   434b8:	str	r0, [r8]
   434bc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   434c0:	sub	r9, r1, #128	; 0x80
   434c4:	cmp	r9, #8
   434c8:	bhi	43550 <__assert_fail@plt+0x30d78>
   434cc:	sub	r1, r1, #129	; 0x81
   434d0:	ldr	r0, [r0, #12]
   434d4:	add	r1, r3, r1
   434d8:	cmp	r0, r1
   434dc:	bls	43560 <__assert_fail@plt+0x30d88>
   434e0:	cmp	r9, #0
   434e4:	mov	r0, #0
   434e8:	mov	r1, #0
   434ec:	strd	r0, [r2]
   434f0:	beq	43540 <__assert_fail@plt+0x30d68>
   434f4:	ldr	r0, [ip]
   434f8:	mov	r1, #0
   434fc:	mov	r6, r1
   43500:	lsl	r5, r6, #8
   43504:	lsl	r4, r1, #8
   43508:	orr	r5, r5, r1, lsr #24
   4350c:	strd	r4, [r2]
   43510:	ldrb	r6, [r3]
   43514:	mov	r7, #0
   43518:	add	r3, r0, #1
   4351c:	adds	r6, r6, r4
   43520:	adc	r7, r7, r5
   43524:	subs	r9, r9, #1
   43528:	strd	r6, [r2]
   4352c:	mov	r1, r6
   43530:	mov	r0, r3
   43534:	mov	r6, r7
   43538:	str	r3, [ip]
   4353c:	bne	43500 <__assert_fail@plt+0x30d28>
   43540:	cmp	r8, #0
   43544:	bne	434b4 <__assert_fail@plt+0x30cdc>
   43548:	mov	r0, #1
   4354c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   43550:	cmp	r8, #0
   43554:	beq	43570 <__assert_fail@plt+0x30d98>
   43558:	str	r6, [ip]
   4355c:	b	4347c <__assert_fail@plt+0x30ca4>
   43560:	mov	r0, r7
   43564:	bl	43330 <__assert_fail@plt+0x30b58>
   43568:	mov	r0, #0
   4356c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   43570:	mov	r0, r8
   43574:	mov	r2, #5
   43578:	movw	r1, #43252	; 0xa8f4
   4357c:	movt	r1, #5
   43580:	bl	12298 <dcgettext@plt>
   43584:	mov	r2, r6
   43588:	add	r1, r7, #8
   4358c:	mov	r3, r0
   43590:	ldr	r0, [r7, #4]
   43594:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   43598:	mov	r0, r8
   4359c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   435a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   435a4:	movw	r9, #65176	; 0xfe98
   435a8:	movt	r9, #6
   435ac:	sub	sp, sp, #124	; 0x7c
   435b0:	ldr	fp, [r1]
   435b4:	add	r8, sp, #32
   435b8:	ldr	r3, [r9]
   435bc:	add	r4, r0, #8
   435c0:	mov	sl, r1
   435c4:	str	r4, [sp]
   435c8:	mov	r7, r0
   435cc:	str	r2, [sp, #4]
   435d0:	mov	r6, r8
   435d4:	str	r3, [sp, #116]	; 0x74
   435d8:	mov	r4, fp
   435dc:	b	43600 <__assert_fail@plt+0x30e28>
   435e0:	rsb	r3, r8, r6
   435e4:	cmp	r3, #79	; 0x4f
   435e8:	bgt	43780 <__assert_fail@plt+0x30fa8>
   435ec:	ldrd	r2, [sp, #16]
   435f0:	add	r6, r6, #8
   435f4:	ldr	r1, [sl]
   435f8:	strd	r2, [r6, #-8]
   435fc:	mov	r4, r1
   43600:	mov	r0, r7
   43604:	mov	r1, sl
   43608:	add	r2, sp, #16
   4360c:	add	r3, sp, #12
   43610:	bl	43454 <__assert_fail@plt+0x30c7c>
   43614:	cmp	r0, #0
   43618:	beq	4370c <__assert_fail@plt+0x30f34>
   4361c:	ldr	r3, [sp, #12]
   43620:	cmp	r3, #0
   43624:	bne	435e0 <__assert_fail@plt+0x30e08>
   43628:	ldr	r1, [sl]
   4362c:	ldrb	r2, [r1]
   43630:	cmp	r2, #223	; 0xdf
   43634:	bhi	436d8 <__assert_fail@plt+0x30f00>
   43638:	cmp	r2, #144	; 0x90
   4363c:	add	r1, r1, #1
   43640:	str	r1, [sl]
   43644:	beq	436d8 <__assert_fail@plt+0x30f00>
   43648:	cmp	r2, #165	; 0xa5
   4364c:	bcc	43750 <__assert_fail@plt+0x30f78>
   43650:	cmp	r2, #166	; 0xa6
   43654:	bls	43728 <__assert_fail@plt+0x30f50>
   43658:	cmp	r2, #210	; 0xd2
   4365c:	bne	43750 <__assert_fail@plt+0x30f78>
   43660:	mov	r0, r7
   43664:	mov	r1, sl
   43668:	add	r2, sp, #24
   4366c:	bl	43454 <__assert_fail@plt+0x30c7c>
   43670:	cmp	r0, #0
   43674:	beq	4370c <__assert_fail@plt+0x30f34>
   43678:	ldr	r3, [r7, #4]
   4367c:	ldr	ip, [r3, #100]	; 0x64
   43680:	cmp	ip, #0
   43684:	beq	436c4 <__assert_fail@plt+0x30eec>
   43688:	ldr	r2, [ip, #168]	; 0xa8
   4368c:	ldrd	r0, [sp, #24]
   43690:	asr	r3, r2, #31
   43694:	cmp	r3, r1
   43698:	cmpeq	r2, r0
   4369c:	bne	436b8 <__assert_fail@plt+0x30ee0>
   436a0:	b	437ac <__assert_fail@plt+0x30fd4>
   436a4:	ldr	r2, [ip, #168]	; 0xa8
   436a8:	asr	r3, r2, #31
   436ac:	cmp	r3, r1
   436b0:	cmpeq	r2, r0
   436b4:	beq	437ac <__assert_fail@plt+0x30fd4>
   436b8:	ldr	ip, [ip, #12]
   436bc:	cmp	ip, #0
   436c0:	bne	436a4 <__assert_fail@plt+0x30ecc>
   436c4:	movw	r1, #43392	; 0xa980
   436c8:	mov	r0, #0
   436cc:	movt	r1, #5
   436d0:	mov	r2, #5
   436d4:	b	43790 <__assert_fail@plt+0x30fb8>
   436d8:	sub	r3, r6, #8
   436dc:	cmp	r3, r8
   436e0:	beq	437cc <__assert_fail@plt+0x30ff4>
   436e4:	mov	r2, #5
   436e8:	movw	r1, #43364	; 0xa964
   436ec:	mov	r0, #0
   436f0:	movt	r1, #5
   436f4:	bl	12298 <dcgettext@plt>
   436f8:	mov	r2, fp
   436fc:	add	r1, r7, #8
   43700:	mov	r3, r0
   43704:	ldr	r0, [r7, #4]
   43708:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   4370c:	mov	r0, #0
   43710:	ldr	r2, [sp, #116]	; 0x74
   43714:	ldr	r3, [r9]
   43718:	cmp	r2, r3
   4371c:	bne	437f4 <__assert_fail@plt+0x3101c>
   43720:	add	sp, sp, #124	; 0x7c
   43724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43728:	rsb	r2, r8, r6
   4372c:	cmp	r2, #15
   43730:	ble	437e0 <__assert_fail@plt+0x31008>
   43734:	ldrd	r4, [r6, #-16]
   43738:	sub	r6, r6, #8
   4373c:	ldrd	r2, [r6]
   43740:	adds	r2, r2, r4
   43744:	adc	r3, r3, r5
   43748:	strd	r2, [r6, #-8]
   4374c:	b	435fc <__assert_fail@plt+0x30e24>
   43750:	mov	r2, #5
   43754:	movw	r1, #43296	; 0xa920
   43758:	mov	r0, #0
   4375c:	movt	r1, #5
   43760:	bl	12298 <dcgettext@plt>
   43764:	ldr	r1, [sp]
   43768:	mov	r2, r4
   4376c:	mov	r3, r0
   43770:	ldr	r0, [r7, #4]
   43774:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   43778:	ldr	r1, [sl]
   4377c:	b	435fc <__assert_fail@plt+0x30e24>
   43780:	movw	r1, #43268	; 0xa904
   43784:	movt	r1, #5
   43788:	mov	r0, #0
   4378c:	mov	r2, #5
   43790:	bl	12298 <dcgettext@plt>
   43794:	mov	r2, r4
   43798:	add	r1, r7, #8
   4379c:	mov	r3, r0
   437a0:	ldr	r0, [r7, #4]
   437a4:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   437a8:	b	4370c <__assert_fail@plt+0x30f34>
   437ac:	rsb	r3, r8, r6
   437b0:	cmp	r3, #79	; 0x4f
   437b4:	bgt	43780 <__assert_fail@plt+0x30fa8>
   437b8:	ldrd	r2, [ip, #32]
   437bc:	add	r6, r6, #8
   437c0:	ldr	r1, [sl]
   437c4:	strd	r2, [r6, #-8]
   437c8:	b	435fc <__assert_fail@plt+0x30e24>
   437cc:	ldrd	r2, [r6, #-8]
   437d0:	mov	r0, #1
   437d4:	ldr	r5, [sp, #4]
   437d8:	strd	r2, [r5]
   437dc:	b	43710 <__assert_fail@plt+0x30f38>
   437e0:	movw	r1, #43336	; 0xa948
   437e4:	mov	r0, r3
   437e8:	mov	r2, #5
   437ec:	movt	r1, #5
   437f0:	b	43790 <__assert_fail@plt+0x30fb8>
   437f4:	bl	122b0 <__stack_chk_fail@plt>
   437f8:	push	{r4, r5, r6, r7, r8, lr}
   437fc:	movw	r4, #65176	; 0xfe98
   43800:	ldr	r5, [r1]
   43804:	movt	r4, #6
   43808:	sub	sp, sp, #16
   4380c:	mov	r6, r1
   43810:	ldr	r3, [r4]
   43814:	mov	r8, r2
   43818:	ldrb	ip, [r5]
   4381c:	mov	r7, r0
   43820:	cmp	ip, #226	; 0xe2
   43824:	str	r3, [sp, #12]
   43828:	bne	43848 <__assert_fail@plt+0x31070>
   4382c:	add	r3, r5, #1
   43830:	str	r3, [r1]
   43834:	ldrb	r2, [r5, #1]
   43838:	movw	r3, #58062	; 0xe2ce
   4383c:	orr	r2, r2, #57856	; 0xe200
   43840:	cmp	r2, r3
   43844:	beq	4388c <__assert_fail@plt+0x310b4>
   43848:	mov	r2, #5
   4384c:	movw	r1, #43452	; 0xa9bc
   43850:	mov	r0, #0
   43854:	movt	r1, #5
   43858:	bl	12298 <dcgettext@plt>
   4385c:	mov	r2, r5
   43860:	add	r1, r7, #8
   43864:	mov	r3, r0
   43868:	ldr	r0, [r7, #4]
   4386c:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   43870:	mov	r0, #0
   43874:	ldr	r2, [sp, #12]
   43878:	ldr	r3, [r4]
   4387c:	cmp	r2, r3
   43880:	bne	438bc <__assert_fail@plt+0x310e4>
   43884:	add	sp, sp, #16
   43888:	pop	{r4, r5, r6, r7, r8, pc}
   4388c:	add	r5, r5, #2
   43890:	mov	r2, sp
   43894:	str	r5, [r1]
   43898:	mov	r3, #0
   4389c:	bl	43454 <__assert_fail@plt+0x30c7c>
   438a0:	cmp	r0, #0
   438a4:	beq	43874 <__assert_fail@plt+0x3109c>
   438a8:	mov	r0, r7
   438ac:	mov	r1, r6
   438b0:	mov	r2, r8
   438b4:	bl	435a0 <__assert_fail@plt+0x30dc8>
   438b8:	b	43874 <__assert_fail@plt+0x3109c>
   438bc:	bl	122b0 <__stack_chk_fail@plt>
   438c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   438c4:	mov	r8, r2
   438c8:	sub	r2, r2, #32
   438cc:	sub	sp, sp, #24
   438d0:	cmp	r2, #31
   438d4:	mov	r9, r0
   438d8:	ldr	sl, [r0]
   438dc:	mov	r4, r1
   438e0:	bls	43958 <__assert_fail@plt+0x31180>
   438e4:	cmp	r8, #25
   438e8:	ldrls	pc, [pc, r8, lsl #2]
   438ec:	b	43d08 <__assert_fail@plt+0x31530>
   438f0:	andeq	r3, r4, r0, lsl #25
   438f4:	andeq	r3, r4, r8, ror #24
   438f8:	andeq	r3, r4, r8, asr #24
   438fc:	andeq	r3, r4, r8, lsr #24
   43900:	andeq	r3, r4, r8, lsl #24
   43904:	andeq	r3, r4, r8, ror #23
   43908:	andeq	r3, r4, r8, asr #23
   4390c:	andeq	r3, r4, r8, lsr #23
   43910:	andeq	r3, r4, r8, ror #25
   43914:	andeq	r3, r4, r8, asr #25
   43918:	andeq	r3, r4, ip, lsr #25
   4391c:	muleq	r4, r0, ip
   43920:	andeq	r3, r4, ip, lsl #23
   43924:	andeq	r3, r4, r0, ror fp
   43928:	andeq	r3, r4, r8, lsl fp
   4392c:	strdeq	r3, [r4], -r8
   43930:	ldrdeq	r3, [r4], -r8
   43934:			; <UNDEFINED> instruction: 0x00043ab8
   43938:	muleq	r4, r8, sl
   4393c:	andeq	r3, r4, r8, ror sl
   43940:	andeq	r3, r4, r8, asr sl
   43944:	andeq	r3, r4, r8, lsr sl
   43948:	andeq	r3, r4, r8, lsl sl
   4394c:	strdeq	r3, [r4], -r8
   43950:	andeq	r3, r4, ip, asr #19
   43954:	muleq	r4, ip, r9
   43958:	add	r3, r0, r8, lsl #2
   4395c:	ldr	r3, [r3, #172]	; 0xac
   43960:	cmp	r3, #0
   43964:	movne	r1, r3
   43968:	bne	43974 <__assert_fail@plt+0x3119c>
   4396c:	bl	438c0 <__assert_fail@plt+0x310e8>
   43970:	mov	r1, r0
   43974:	mov	r0, sl
   43978:	bl	34d6c <__assert_fail@plt+0x22594>
   4397c:	cmp	r8, #59	; 0x3b
   43980:	mov	r3, r0
   43984:	bhi	43d44 <__assert_fail@plt+0x3156c>
   43988:	add	r8, r9, r8, lsl #2
   4398c:	mov	r0, r3
   43990:	str	r3, [r8, #300]	; 0x12c
   43994:	add	sp, sp, #24
   43998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4399c:	movw	r1, #43548	; 0xaa1c
   439a0:	movt	r1, #5
   439a4:	mov	r0, #0
   439a8:	mov	r2, #5
   439ac:	bl	12298 <dcgettext@plt>
   439b0:	mov	r2, r4
   439b4:	add	r1, r9, #8
   439b8:	mov	r3, r0
   439bc:	ldr	r0, [r9, #4]
   439c0:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   439c4:	mov	r0, #0
   439c8:	b	43994 <__assert_fail@plt+0x311bc>
   439cc:	mov	r1, #2
   439d0:	mov	r2, #0
   439d4:	mov	r0, sl
   439d8:	bl	34c24 <__assert_fail@plt+0x2244c>
   439dc:	movw	r1, #42156	; 0xa4ac
   439e0:	movt	r1, #5
   439e4:	mov	r2, r0
   439e8:	mov	r0, sl
   439ec:	bl	352d4 <__assert_fail@plt+0x22afc>
   439f0:	mov	r3, r0
   439f4:	b	43988 <__assert_fail@plt+0x311b0>
   439f8:	mov	r1, #2
   439fc:	mov	r2, #0
   43a00:	mov	r0, sl
   43a04:	bl	34c24 <__assert_fail@plt+0x2244c>
   43a08:	movw	r1, #40324	; 0x9d84
   43a0c:	movt	r1, #5
   43a10:	mov	r2, r0
   43a14:	b	439e8 <__assert_fail@plt+0x31210>
   43a18:	mov	r1, #2
   43a1c:	mov	r2, #1
   43a20:	mov	r0, sl
   43a24:	bl	34c24 <__assert_fail@plt+0x2244c>
   43a28:	movw	r1, #39640	; 0x9ad8
   43a2c:	movt	r1, #5
   43a30:	mov	r2, r0
   43a34:	b	439e8 <__assert_fail@plt+0x31210>
   43a38:	mov	r1, #2
   43a3c:	mov	r2, #0
   43a40:	mov	r0, sl
   43a44:	bl	34c24 <__assert_fail@plt+0x2244c>
   43a48:	movw	r1, #39604	; 0x9ab4
   43a4c:	movt	r1, #5
   43a50:	mov	r2, r0
   43a54:	b	439e8 <__assert_fail@plt+0x31210>
   43a58:	mov	r1, #4
   43a5c:	mov	r2, #0
   43a60:	mov	r0, sl
   43a64:	bl	34c24 <__assert_fail@plt+0x2244c>
   43a68:	movw	r1, #42228	; 0xa4f4
   43a6c:	movt	r1, #5
   43a70:	mov	r2, r0
   43a74:	b	439e8 <__assert_fail@plt+0x31210>
   43a78:	mov	r1, #1
   43a7c:	mov	r2, #0
   43a80:	mov	r0, sl
   43a84:	bl	34c24 <__assert_fail@plt+0x2244c>
   43a88:	movw	r1, #55848	; 0xda28
   43a8c:	movt	r1, #5
   43a90:	mov	r2, r0
   43a94:	b	439e8 <__assert_fail@plt+0x31210>
   43a98:	mov	r1, #4
   43a9c:	mov	r2, #1
   43aa0:	mov	r0, sl
   43aa4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43aa8:	movw	r1, #39656	; 0x9ae8
   43aac:	movt	r1, #5
   43ab0:	mov	r2, r0
   43ab4:	b	439e8 <__assert_fail@plt+0x31210>
   43ab8:	mov	r1, #4
   43abc:	mov	r2, #1
   43ac0:	mov	r0, sl
   43ac4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43ac8:	movw	r1, #42204	; 0xa4dc
   43acc:	movt	r1, #5
   43ad0:	mov	r2, r0
   43ad4:	b	439e8 <__assert_fail@plt+0x31210>
   43ad8:	mov	r1, #4
   43adc:	mov	r2, #0
   43ae0:	mov	r0, sl
   43ae4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43ae8:	movw	r1, #39600	; 0x9ab0
   43aec:	movt	r1, #5
   43af0:	mov	r2, r0
   43af4:	b	439e8 <__assert_fail@plt+0x31210>
   43af8:	mov	r1, #4
   43afc:	mov	r2, #1
   43b00:	mov	r0, sl
   43b04:	bl	34c24 <__assert_fail@plt+0x2244c>
   43b08:	movw	r1, #43492	; 0xa9e4
   43b0c:	movt	r1, #5
   43b10:	mov	r2, r0
   43b14:	b	439e8 <__assert_fail@plt+0x31210>
   43b18:	ldr	r1, [r0, #376]	; 0x178
   43b1c:	cmp	r1, #0
   43b20:	movne	r5, r1
   43b24:	beq	43d30 <__assert_fail@plt+0x31558>
   43b28:	ldr	r2, [r9, #364]	; 0x16c
   43b2c:	cmp	r2, #0
   43b30:	beq	43d18 <__assert_fail@plt+0x31540>
   43b34:	mov	r1, r5
   43b38:	mov	r3, #1
   43b3c:	mov	r6, #0
   43b40:	mov	r7, #0
   43b44:	mvn	r4, #0
   43b48:	mvn	r5, #0
   43b4c:	strd	r6, [sp]
   43b50:	mov	r0, sl
   43b54:	strd	r4, [sp, #8]
   43b58:	str	r3, [sp, #16]
   43b5c:	bl	34ed8 <__assert_fail@plt+0x22700>
   43b60:	movw	r1, #43476	; 0xa9d4
   43b64:	movt	r1, #5
   43b68:	mov	r2, r0
   43b6c:	b	439e8 <__assert_fail@plt+0x31210>
   43b70:	mov	r1, #16
   43b74:	mov	r0, sl
   43b78:	bl	34c40 <__assert_fail@plt+0x22468>
   43b7c:	movw	r1, #42236	; 0xa4fc
   43b80:	movt	r1, #5
   43b84:	mov	r2, r0
   43b88:	b	439e8 <__assert_fail@plt+0x31210>
   43b8c:	mov	r1, #12
   43b90:	mov	r0, sl
   43b94:	bl	34c40 <__assert_fail@plt+0x22468>
   43b98:	movw	r1, #39688	; 0x9b08
   43b9c:	movt	r1, #5
   43ba0:	mov	r2, r0
   43ba4:	b	439e8 <__assert_fail@plt+0x31210>
   43ba8:	mov	r1, #4
   43bac:	mov	r2, #1
   43bb0:	mov	r0, sl
   43bb4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43bb8:	movw	r1, #39672	; 0x9af8
   43bbc:	movt	r1, #5
   43bc0:	mov	r2, r0
   43bc4:	b	439e8 <__assert_fail@plt+0x31210>
   43bc8:	mov	r1, #4
   43bcc:	mov	r2, #0
   43bd0:	mov	r0, sl
   43bd4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43bd8:	movw	r1, #42192	; 0xa4d0
   43bdc:	movt	r1, #5
   43be0:	mov	r2, r0
   43be4:	b	439e8 <__assert_fail@plt+0x31210>
   43be8:	mov	r1, #2
   43bec:	mov	r2, #1
   43bf0:	mov	r0, sl
   43bf4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43bf8:	movw	r1, #42172	; 0xa4bc
   43bfc:	movt	r1, #5
   43c00:	mov	r2, r0
   43c04:	b	439e8 <__assert_fail@plt+0x31210>
   43c08:	mov	r1, #2
   43c0c:	mov	r2, #0
   43c10:	mov	r0, sl
   43c14:	bl	34c24 <__assert_fail@plt+0x2244c>
   43c18:	movw	r1, #42136	; 0xa498
   43c1c:	movt	r1, #5
   43c20:	mov	r2, r0
   43c24:	b	439e8 <__assert_fail@plt+0x31210>
   43c28:	mov	r1, #1
   43c2c:	mov	r0, sl
   43c30:	mov	r2, r1
   43c34:	bl	34c24 <__assert_fail@plt+0x2244c>
   43c38:	movw	r1, #39612	; 0x9abc
   43c3c:	movt	r1, #5
   43c40:	mov	r2, r0
   43c44:	b	439e8 <__assert_fail@plt+0x31210>
   43c48:	mov	r1, #1
   43c4c:	mov	r2, #0
   43c50:	mov	r0, sl
   43c54:	bl	34c24 <__assert_fail@plt+0x2244c>
   43c58:	movw	r1, #39628	; 0x9acc
   43c5c:	movt	r1, #5
   43c60:	mov	r2, r0
   43c64:	b	439e8 <__assert_fail@plt+0x31210>
   43c68:	mov	r0, sl
   43c6c:	bl	34c18 <__assert_fail@plt+0x22440>
   43c70:	movw	r1, #37032	; 0x90a8
   43c74:	movt	r1, #5
   43c78:	mov	r2, r0
   43c7c:	b	439e8 <__assert_fail@plt+0x31210>
   43c80:	mov	r0, sl
   43c84:	bl	34c18 <__assert_fail@plt+0x22440>
   43c88:	mov	r3, r0
   43c8c:	b	43988 <__assert_fail@plt+0x311b0>
   43c90:	mov	r1, #8
   43c94:	mov	r0, sl
   43c98:	bl	34c40 <__assert_fail@plt+0x22468>
   43c9c:	movw	r1, #37212	; 0x915c
   43ca0:	movt	r1, #5
   43ca4:	mov	r2, r0
   43ca8:	b	439e8 <__assert_fail@plt+0x31210>
   43cac:	mov	r1, #4
   43cb0:	mov	r0, sl
   43cb4:	bl	34c40 <__assert_fail@plt+0x22468>
   43cb8:	movw	r1, #37204	; 0x9154
   43cbc:	movt	r1, #5
   43cc0:	mov	r2, r0
   43cc4:	b	439e8 <__assert_fail@plt+0x31210>
   43cc8:	mov	r1, #8
   43ccc:	mov	r2, #1
   43cd0:	mov	r0, sl
   43cd4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43cd8:	movw	r1, #39872	; 0x9bc0
   43cdc:	movt	r1, #5
   43ce0:	mov	r2, r0
   43ce4:	b	439e8 <__assert_fail@plt+0x31210>
   43ce8:	mov	r1, #8
   43cec:	mov	r2, #0
   43cf0:	mov	r0, sl
   43cf4:	bl	34c24 <__assert_fail@plt+0x2244c>
   43cf8:	movw	r1, #42216	; 0xa4e8
   43cfc:	movt	r1, #5
   43d00:	mov	r2, r0
   43d04:	b	439e8 <__assert_fail@plt+0x31210>
   43d08:	movw	r1, #43524	; 0xaa04
   43d0c:	mov	r0, #0
   43d10:	movt	r1, #5
   43d14:	b	439a8 <__assert_fail@plt+0x311d0>
   43d18:	mov	r2, #16
   43d1c:	mov	r1, r4
   43d20:	mov	r0, r9
   43d24:	bl	438c0 <__assert_fail@plt+0x310e8>
   43d28:	mov	r2, r0
   43d2c:	b	43b34 <__assert_fail@plt+0x3135c>
   43d30:	mov	r1, r4
   43d34:	mov	r2, #19
   43d38:	bl	438c0 <__assert_fail@plt+0x310e8>
   43d3c:	mov	r5, r0
   43d40:	b	43b28 <__assert_fail@plt+0x31350>
   43d44:	movw	r0, #43512	; 0xa9f8
   43d48:	movw	r1, #41948	; 0xa3dc
   43d4c:	movt	r0, #5
   43d50:	movt	r1, #5
   43d54:	mov	r2, #604	; 0x25c
   43d58:	ldr	r3, [pc]	; 43d60 <__assert_fail@plt+0x31588>
   43d5c:	bl	127d8 <__assert_fail@plt>
   43d60:	andeq	sl, r5, r0, asr #4
   43d64:	push	{r4, r5, r6, r7, r8, r9, lr}
   43d68:	movw	r6, #65176	; 0xfe98
   43d6c:	movt	r6, #6
   43d70:	sub	sp, sp, #20
   43d74:	mov	r7, r2
   43d78:	mov	r3, #0
   43d7c:	ldr	ip, [r6]
   43d80:	mov	r2, sp
   43d84:	mov	r8, r0
   43d88:	ldr	r9, [r1]
   43d8c:	str	ip, [sp, #12]
   43d90:	bl	43454 <__assert_fail@plt+0x30c7c>
   43d94:	cmp	r0, #0
   43d98:	beq	43dec <__assert_fail@plt+0x31614>
   43d9c:	ldrd	r4, [sp]
   43da0:	cmp	r5, #0
   43da4:	cmpeq	r4, #255	; 0xff
   43da8:	bhi	43e08 <__assert_fail@plt+0x31630>
   43dac:	cmp	r4, #59	; 0x3b
   43db0:	bhi	43dd0 <__assert_fail@plt+0x315f8>
   43db4:	add	r3, r8, r4, lsl #2
   43db8:	ldr	r3, [r3, #300]	; 0x12c
   43dbc:	cmp	r3, #0
   43dc0:	strne	r3, [r7]
   43dc4:	beq	43dd0 <__assert_fail@plt+0x315f8>
   43dc8:	mov	r0, #1
   43dcc:	b	43df0 <__assert_fail@plt+0x31618>
   43dd0:	mov	r0, r8
   43dd4:	mov	r1, r9
   43dd8:	mov	r2, r4
   43ddc:	bl	438c0 <__assert_fail@plt+0x310e8>
   43de0:	cmp	r0, #0
   43de4:	str	r0, [r7]
   43de8:	bne	43dc8 <__assert_fail@plt+0x315f0>
   43dec:	mov	r0, #0
   43df0:	ldr	r2, [sp, #12]
   43df4:	ldr	r3, [r6]
   43df8:	cmp	r2, r3
   43dfc:	bne	43e44 <__assert_fail@plt+0x3166c>
   43e00:	add	sp, sp, #20
   43e04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   43e08:	subs	r4, r4, #256	; 0x100
   43e0c:	mov	r0, r8
   43e10:	mov	r2, #1
   43e14:	sbc	r5, r5, #0
   43e18:	mov	r1, r4
   43e1c:	strd	r4, [sp]
   43e20:	bl	3ccd0 <__assert_fail@plt+0x2a4f8>
   43e24:	cmp	r0, #0
   43e28:	beq	43dec <__assert_fail@plt+0x31614>
   43e2c:	ldr	r3, [r8, #296]	; 0x128
   43e30:	mov	r0, #1
   43e34:	ldr	r2, [sp]
   43e38:	ldr	r3, [r3, r2, lsl #4]
   43e3c:	str	r3, [r7]
   43e40:	b	43df0 <__assert_fail@plt+0x31618>
   43e44:	bl	122b0 <__stack_chk_fail@plt>
   43e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43e4c:	movw	r4, #65176	; 0xfe98
   43e50:	movt	r4, #6
   43e54:	sub	sp, sp, #756	; 0x2f4
   43e58:	mov	r5, #0
   43e5c:	add	r3, sp, #496	; 0x1f0
   43e60:	ldr	r6, [r4]
   43e64:	mov	ip, r5
   43e68:	str	r4, [sp, #60]	; 0x3c
   43e6c:	add	r4, sp, #736	; 0x2e0
   43e70:	ldr	r7, [sp, #792]	; 0x318
   43e74:	add	r8, sp, #220	; 0xdc
   43e78:	str	r0, [sp, #200]	; 0xc8
   43e7c:	add	fp, r2, r7
   43e80:	str	r2, [sp, #208]	; 0xd0
   43e84:	str	r1, [sp, #204]	; 0xcc
   43e88:	str	r8, [sp, #56]	; 0x38
   43e8c:	str	r6, [sp, #748]	; 0x2ec
   43e90:	str	fp, [sp, #212]	; 0xd4
   43e94:	str	r5, [sp, #476]	; 0x1dc
   43e98:	str	r5, [sp, #480]	; 0x1e0
   43e9c:	str	r5, [sp, #484]	; 0x1e4
   43ea0:	str	r5, [sp, #488]	; 0x1e8
   43ea4:	str	r5, [sp, #492]	; 0x1ec
   43ea8:	str	r5, [sp, #496]	; 0x1f0
   43eac:	str	r5, [sp, #740]	; 0x2e4
   43eb0:	str	r5, [sp, #744]	; 0x2e8
   43eb4:	str	r8, [sp, #216]	; 0xd8
   43eb8:	str	ip, [r3, #4]!
   43ebc:	cmp	r3, r4
   43ec0:	bne	43eb8 <__assert_fail@plt+0x316e0>
   43ec4:	movw	sl, #64968	; 0xfdc8
   43ec8:	movt	sl, #65535	; 0xffff
   43ecc:	mov	r6, r2
   43ed0:	movw	r9, #11856	; 0x2e50
   43ed4:	mov	r7, sl
   43ed8:	movt	r9, #5
   43edc:	str	r2, [sp, #112]	; 0x70
   43ee0:	str	r9, [sp, #72]	; 0x48
   43ee4:	cmp	fp, r6
   43ee8:	bls	44520 <__assert_fail@plt+0x31d48>
   43eec:	add	r3, r6, #1
   43ef0:	str	r3, [sp, #112]	; 0x70
   43ef4:	ldrb	r3, [r6]
   43ef8:	cmp	r3, #241	; 0xf1
   43efc:	beq	440d0 <__assert_fail@plt+0x318f8>
   43f00:	cmp	r3, #136	; 0x88
   43f04:	bls	44510 <__assert_fail@plt+0x31d38>
   43f08:	cmp	r3, #248	; 0xf8
   43f0c:	beq	440e8 <__assert_fail@plt+0x31910>
   43f10:	bhi	43fec <__assert_fail@plt+0x31814>
   43f14:	cmp	r3, #240	; 0xf0
   43f18:	beq	441a8 <__assert_fail@plt+0x319d0>
   43f1c:	cmp	r3, #242	; 0xf2
   43f20:	bne	4417c <__assert_fail@plt+0x319a4>
   43f24:	add	r9, sp, #200	; 0xc8
   43f28:	add	sl, sp, #112	; 0x70
   43f2c:	add	r2, sp, #128	; 0x80
   43f30:	mov	r3, #0
   43f34:	mov	r0, r9
   43f38:	mov	r1, sl
   43f3c:	ldr	r8, [sp, #112]	; 0x70
   43f40:	bl	43454 <__assert_fail@plt+0x30c7c>
   43f44:	cmp	r0, #0
   43f48:	beq	43fcc <__assert_fail@plt+0x317f4>
   43f4c:	movw	r1, #64912	; 0xfd90
   43f50:	add	r4, sp, #752	; 0x2f0
   43f54:	movt	r1, #65535	; 0xffff
   43f58:	ldrd	r2, [r4, r1]
   43f5c:	cmp	r3, #0
   43f60:	cmpeq	r2, #255	; 0xff
   43f64:	bls	44494 <__assert_fail@plt+0x31cbc>
   43f68:	subs	r4, r2, #256	; 0x100
   43f6c:	add	ip, sp, #752	; 0x2f0
   43f70:	sbc	r5, r3, #0
   43f74:	strd	r4, [sp, #64]	; 0x40
   43f78:	strd	r4, [ip, r1]
   43f7c:	mov	r0, r9
   43f80:	mov	r2, #0
   43f84:	ldr	r1, [sp, #64]	; 0x40
   43f88:	bl	3ccd0 <__assert_fail@plt+0x2a4f8>
   43f8c:	cmp	r0, #0
   43f90:	beq	43fcc <__assert_fail@plt+0x317f4>
   43f94:	ldr	r6, [sp, #112]	; 0x70
   43f98:	ldrb	r3, [r6]
   43f9c:	cmp	r3, #206	; 0xce
   43fa0:	beq	4455c <__assert_fail@plt+0x31d84>
   43fa4:	movw	r1, #44448	; 0xada0
   43fa8:	movt	r1, #5
   43fac:	mov	r0, #0
   43fb0:	mov	r2, #5
   43fb4:	bl	12298 <dcgettext@plt>
   43fb8:	mov	r2, r6
   43fbc:	add	r1, sp, #208	; 0xd0
   43fc0:	mov	r3, r0
   43fc4:	ldr	r0, [sp, #204]	; 0xcc
   43fc8:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   43fcc:	mov	r0, #0
   43fd0:	ldr	r5, [sp, #60]	; 0x3c
   43fd4:	ldr	r2, [sp, #748]	; 0x2ec
   43fd8:	ldr	r3, [r5]
   43fdc:	cmp	r2, r3
   43fe0:	bne	45770 <__assert_fail@plt+0x32f98>
   43fe4:	add	sp, sp, #756	; 0x2f4
   43fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43fec:	cmp	r3, #249	; 0xf9
   43ff0:	beq	442c8 <__assert_fail@plt+0x31af0>
   43ff4:	movw	r2, #61902	; 0xf1ce
   43ff8:	cmp	r3, r2
   43ffc:	bne	4417c <__assert_fail@plt+0x319a4>
   44000:	add	r9, sp, #200	; 0xc8
   44004:	add	sl, sp, #112	; 0x70
   44008:	add	r2, sp, #144	; 0x90
   4400c:	mov	r3, #0
   44010:	mov	r0, r9
   44014:	mov	r1, sl
   44018:	ldr	r8, [sp, #112]	; 0x70
   4401c:	bl	43454 <__assert_fail@plt+0x30c7c>
   44020:	cmp	r0, #0
   44024:	beq	43fcc <__assert_fail@plt+0x317f4>
   44028:	mov	r0, r9
   4402c:	mov	r1, sl
   44030:	add	r2, sp, #120	; 0x78
   44034:	bl	43d64 <__assert_fail@plt+0x3158c>
   44038:	cmp	r0, #0
   4403c:	beq	43fcc <__assert_fail@plt+0x317f4>
   44040:	ldr	r4, [sp, #112]	; 0x70
   44044:	mov	r0, r9
   44048:	mov	r1, sl
   4404c:	add	r2, sp, #152	; 0x98
   44050:	mov	r3, #0
   44054:	str	r4, [sp, #64]	; 0x40
   44058:	bl	43454 <__assert_fail@plt+0x30c7c>
   4405c:	cmp	r0, #0
   44060:	beq	43fcc <__assert_fail@plt+0x317f4>
   44064:	movw	r1, #64928	; 0xfda0
   44068:	add	r5, sp, #752	; 0x2f0
   4406c:	movt	r1, #65535	; 0xffff
   44070:	ldrd	r2, [r5, r1]
   44074:	orrs	ip, r2, r3
   44078:	beq	44798 <__assert_fail@plt+0x31fc0>
   4407c:	cmp	r3, #0
   44080:	cmpeq	r2, #31
   44084:	bhi	44e38 <__assert_fail@plt+0x32660>
   44088:	movw	r3, #64936	; 0xfda8
   4408c:	add	ip, sp, #752	; 0x2f0
   44090:	movt	r3, #65535	; 0xffff
   44094:	ldrd	r2, [r3, ip]
   44098:	cmp	r3, #0
   4409c:	cmpeq	r2, #9
   440a0:	beq	45464 <__assert_fail@plt+0x32c8c>
   440a4:	movw	r1, #44404	; 0xad74
   440a8:	movt	r1, #5
   440ac:	mov	r0, #0
   440b0:	mov	r2, #5
   440b4:	bl	12298 <dcgettext@plt>
   440b8:	mov	r2, r8
   440bc:	add	r1, sp, #208	; 0xd0
   440c0:	mov	r3, r0
   440c4:	ldr	r0, [sp, #204]	; 0xcc
   440c8:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   440cc:	b	43fcc <__assert_fail@plt+0x317f4>
   440d0:	add	r3, r6, #2
   440d4:	str	r3, [sp, #112]	; 0x70
   440d8:	ldrb	r3, [r6, #1]
   440dc:	orr	r3, r3, #61696	; 0xf100
   440e0:	cmp	r3, #248	; 0xf8
   440e4:	bne	43f10 <__assert_fail@plt+0x31738>
   440e8:	ldr	r4, [sp, #112]	; 0x70
   440ec:	add	r9, sp, #200	; 0xc8
   440f0:	add	sl, sp, #112	; 0x70
   440f4:	add	r2, sp, #160	; 0xa0
   440f8:	mov	r0, r9
   440fc:	mov	r3, #0
   44100:	mov	ip, r4
   44104:	mov	r1, sl
   44108:	ldrb	r5, [ip], #1
   4410c:	str	ip, [sp, #112]	; 0x70
   44110:	bl	43454 <__assert_fail@plt+0x30c7c>
   44114:	cmp	r0, #0
   44118:	beq	43fcc <__assert_fail@plt+0x317f4>
   4411c:	mov	r3, #0
   44120:	mov	r0, r9
   44124:	str	r3, [sp]
   44128:	mov	r1, sl
   4412c:	add	r2, sp, #124	; 0x7c
   44130:	add	r3, sp, #128	; 0x80
   44134:	bl	4335c <__assert_fail@plt+0x30b84>
   44138:	cmp	r0, #0
   4413c:	beq	43fcc <__assert_fail@plt+0x317f4>
   44140:	sub	r3, r5, #1
   44144:	cmp	r3, #10
   44148:	ldrls	pc, [pc, r3, lsl #2]
   4414c:	b	44dc8 <__assert_fail@plt+0x325f0>
   44150:	andeq	r4, r4, r8, lsl #21
   44154:	andeq	r4, r4, r8, asr sl
   44158:	andeq	r4, r4, r8, asr #20
   4415c:	andeq	r4, r4, r0, ror #17
   44160:	andeq	r4, r4, ip, lsl sp
   44164:	andeq	r4, r4, r8, lsr #24
   44168:	andeq	r4, r4, r8, asr #27
   4416c:	andeq	r4, r4, r8, asr #27
   44170:	andeq	r4, r4, r8, asr #27
   44174:	andeq	r4, r4, r4, lsr fp
   44178:	ldrdeq	r4, [r4], -ip
   4417c:	movw	r1, #44320	; 0xad20
   44180:	movt	r1, #5
   44184:	mov	r0, #0
   44188:	mov	r2, #5
   4418c:	bl	12298 <dcgettext@plt>
   44190:	mov	r2, r6
   44194:	add	r1, sp, #208	; 0xd0
   44198:	mov	r3, r0
   4419c:	ldr	r0, [sp, #204]	; 0xcc
   441a0:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   441a4:	b	43fcc <__assert_fail@plt+0x317f4>
   441a8:	add	r2, sp, #192	; 0xc0
   441ac:	mov	r3, #0
   441b0:	add	r0, sp, #200	; 0xc8
   441b4:	add	r1, sp, #112	; 0x70
   441b8:	ldr	r4, [sp, #112]	; 0x70
   441bc:	bl	43454 <__assert_fail@plt+0x30c7c>
   441c0:	cmp	r0, #0
   441c4:	beq	43fcc <__assert_fail@plt+0x317f4>
   441c8:	mov	r5, #0
   441cc:	add	r0, sp, #200	; 0xc8
   441d0:	add	r1, sp, #112	; 0x70
   441d4:	add	r2, sp, #176	; 0xb0
   441d8:	str	r5, [sp]
   441dc:	add	r3, sp, #184	; 0xb8
   441e0:	bl	4335c <__assert_fail@plt+0x30b84>
   441e4:	cmp	r0, r5
   441e8:	beq	43fcc <__assert_fail@plt+0x317f4>
   441ec:	movw	r3, #64976	; 0xfdd0
   441f0:	add	ip, sp, #752	; 0x2f0
   441f4:	movt	r3, #65535	; 0xffff
   441f8:	ldrd	r0, [ip, r3]
   441fc:	cmp	r1, #0
   44200:	cmpeq	r0, #31
   44204:	bls	44e0c <__assert_fail@plt+0x32634>
   44208:	ldr	r4, [sp, #480]	; 0x1e0
   4420c:	subs	r0, r0, #32
   44210:	add	r2, sp, #752	; 0x2f0
   44214:	sbc	r1, r1, #0
   44218:	strd	r0, [r2, r3]
   4421c:	mov	r2, r4
   44220:	mov	r3, #0
   44224:	cmp	r1, r3
   44228:	cmpeq	r0, r2
   4422c:	bcc	442a4 <__assert_fail@plt+0x31acc>
   44230:	cmp	r4, #0
   44234:	bne	44250 <__assert_fail@plt+0x31a78>
   44238:	cmp	r1, #0
   4423c:	cmpeq	r0, #3
   44240:	movls	r1, #80	; 0x50
   44244:	movls	r4, #4
   44248:	bls	44270 <__assert_fail@plt+0x31a98>
   4424c:	mov	r4, #4
   44250:	lsl	r4, r4, #1
   44254:	mov	r3, #0
   44258:	mov	r2, r4
   4425c:	cmp	r1, r3
   44260:	cmpeq	r0, r2
   44264:	bcs	44250 <__assert_fail@plt+0x31a78>
   44268:	add	r1, r4, r4, lsl #2
   4426c:	lsl	r1, r1, #2
   44270:	ldr	r0, [sp, #484]	; 0x1e4
   44274:	bl	122c8 <xrealloc@plt>
   44278:	ldr	r3, [sp, #480]	; 0x1e0
   4427c:	mov	r1, #0
   44280:	rsb	r2, r3, r4
   44284:	add	r3, r3, r3, lsl #2
   44288:	add	r2, r2, r2, lsl #2
   4428c:	lsl	r2, r2, #2
   44290:	str	r0, [sp, #484]	; 0x1e4
   44294:	add	r0, r0, r3, lsl #2
   44298:	bl	12580 <memset@plt>
   4429c:	ldr	r0, [sp, #192]	; 0xc0
   442a0:	str	r4, [sp, #480]	; 0x1e0
   442a4:	ldr	r3, [sp, #484]	; 0x1e4
   442a8:	add	r0, r0, r0, lsl #2
   442ac:	ldr	ip, [sp, #176]	; 0xb0
   442b0:	ldr	r1, [sp, #184]	; 0xb8
   442b4:	add	r2, r3, r0, lsl #2
   442b8:	ldr	r6, [sp, #112]	; 0x70
   442bc:	str	ip, [r3, r0, lsl #2]
   442c0:	str	r1, [r2, #4]
   442c4:	b	43ee4 <__assert_fail@plt+0x3170c>
   442c8:	ldr	r3, [sp, #216]	; 0xd8
   442cc:	add	r9, sp, #200	; 0xc8
   442d0:	ldr	r4, [sp, #56]	; 0x38
   442d4:	cmp	r3, r4
   442d8:	bls	444c4 <__assert_fail@plt+0x31cec>
   442dc:	ldr	r2, [r3, #-16]
   442e0:	sub	r3, r3, #16
   442e4:	str	r3, [sp, #216]	; 0xd8
   442e8:	cmp	r2, #5
   442ec:	beq	44454 <__assert_fail@plt+0x31c7c>
   442f0:	ble	44348 <__assert_fail@plt+0x31b70>
   442f4:	cmp	r2, #11
   442f8:	beq	444f4 <__assert_fail@plt+0x31d1c>
   442fc:	cmp	r2, #134	; 0x86
   44300:	bne	443e8 <__assert_fail@plt+0x31c10>
   44304:	mov	r0, r9
   44308:	add	r1, sp, #112	; 0x70
   4430c:	add	r2, sp, #192	; 0xc0
   44310:	bl	435a0 <__assert_fail@plt+0x30dc8>
   44314:	cmp	r0, #0
   44318:	beq	43fcc <__assert_fail@plt+0x317f4>
   4431c:	movw	r3, #64976	; 0xfdd0
   44320:	add	r8, sp, #752	; 0x2f0
   44324:	movt	r3, #65535	; 0xffff
   44328:	ldr	r0, [sp, #200]	; 0xc8
   4432c:	ldrd	r2, [r3, r8]
   44330:	adds	r2, r2, #1
   44334:	adc	r3, r3, #0
   44338:	bl	34798 <__assert_fail@plt+0x21fc0>
   4433c:	cmp	r0, #0
   44340:	beq	43fcc <__assert_fail@plt+0x317f4>
   44344:	b	443f0 <__assert_fail@plt+0x31c18>
   44348:	cmp	r2, #2
   4434c:	bne	443f8 <__assert_fail@plt+0x31c20>
   44350:	mov	r0, #8
   44354:	bl	12358 <xmalloc@plt>
   44358:	ldr	r3, [sp, #480]	; 0x1e0
   4435c:	mov	r4, r0
   44360:	str	r0, [sp, #488]	; 0x1e8
   44364:	add	r0, r3, r3, lsl #2
   44368:	str	r3, [r4]
   4436c:	lsl	r0, r0, #2
   44370:	bl	12358 <xmalloc@plt>
   44374:	ldr	r3, [sp, #480]	; 0x1e0
   44378:	ldr	ip, [sp, #488]	; 0x1e8
   4437c:	ldr	r1, [sp, #484]	; 0x1e4
   44380:	add	r2, r3, r3, lsl #2
   44384:	lsl	r2, r2, #2
   44388:	str	r0, [r4, #4]
   4438c:	ldr	r0, [ip, #4]
   44390:	bl	1222c <memcpy@plt>
   44394:	mov	r0, #248	; 0xf8
   44398:	bl	12358 <xmalloc@plt>
   4439c:	ldr	r3, [sp, #492]	; 0x1ec
   443a0:	mov	r4, r0
   443a4:	str	r0, [sp, #740]	; 0x2e4
   443a8:	str	r3, [r4]
   443ac:	lsl	r0, r3, #4
   443b0:	bl	12358 <xmalloc@plt>
   443b4:	ldr	r3, [sp, #740]	; 0x2e4
   443b8:	ldr	r2, [sp, #492]	; 0x1ec
   443bc:	ldr	r1, [sp, #496]	; 0x1f0
   443c0:	lsl	r2, r2, #4
   443c4:	str	r0, [r4, #4]
   443c8:	ldr	r0, [r3, #4]
   443cc:	bl	1222c <memcpy@plt>
   443d0:	ldr	r0, [sp, #740]	; 0x2e4
   443d4:	mov	r1, #0
   443d8:	mov	r2, #240	; 0xf0
   443dc:	add	r0, r0, #8
   443e0:	bl	12580 <memset@plt>
   443e4:	b	443f0 <__assert_fail@plt+0x31c18>
   443e8:	cmp	r2, #6
   443ec:	beq	44400 <__assert_fail@plt+0x31c28>
   443f0:	ldr	r6, [sp, #112]	; 0x70
   443f4:	b	43ee4 <__assert_fail@plt+0x3170c>
   443f8:	cmp	r2, #4
   443fc:	bne	443f0 <__assert_fail@plt+0x31c18>
   44400:	mov	r0, r9
   44404:	add	r1, sp, #112	; 0x70
   44408:	add	r2, sp, #192	; 0xc0
   4440c:	bl	435a0 <__assert_fail@plt+0x30dc8>
   44410:	cmp	r0, #0
   44414:	beq	43fcc <__assert_fail@plt+0x317f4>
   44418:	ldr	r3, [sp, #216]	; 0xd8
   4441c:	ldr	r3, [r3, #12]
   44420:	cmp	r3, #0
   44424:	bne	443f0 <__assert_fail@plt+0x31c18>
   44428:	movw	r3, #64976	; 0xfdd0
   4442c:	add	r5, sp, #752	; 0x2f0
   44430:	movt	r3, #65535	; 0xffff
   44434:	ldr	r0, [sp, #200]	; 0xc8
   44438:	ldrd	r2, [r3, r5]
   4443c:	adds	r2, r2, #1
   44440:	adc	r3, r3, #0
   44444:	bl	34638 <__assert_fail@plt+0x21e60>
   44448:	cmp	r0, #0
   4444c:	bne	443f0 <__assert_fail@plt+0x31c18>
   44450:	b	43fcc <__assert_fail@plt+0x317f4>
   44454:	ldr	r9, [sp, #56]	; 0x38
   44458:	cmp	r3, r9
   4445c:	bhi	44470 <__assert_fail@plt+0x31c98>
   44460:	b	443f0 <__assert_fail@plt+0x31c18>
   44464:	ldr	sl, [sp, #56]	; 0x38
   44468:	cmp	r3, sl
   4446c:	beq	443f0 <__assert_fail@plt+0x31c18>
   44470:	ldr	r2, [r3, #-16]!
   44474:	cmp	r2, #5
   44478:	bne	44464 <__assert_fail@plt+0x31c8c>
   4447c:	ldr	r1, [r3, #4]
   44480:	ldr	r0, [sp, #200]	; 0xc8
   44484:	bl	34310 <__assert_fail@plt+0x21b38>
   44488:	cmp	r0, #0
   4448c:	beq	43fcc <__assert_fail@plt+0x317f4>
   44490:	b	443f0 <__assert_fail@plt+0x31c18>
   44494:	movw	r1, #44428	; 0xad8c
   44498:	movt	r1, #5
   4449c:	mov	r7, r8
   444a0:	mov	r0, #0
   444a4:	mov	r2, #5
   444a8:	bl	12298 <dcgettext@plt>
   444ac:	mov	r2, r7
   444b0:	add	r1, sp, #208	; 0xd0
   444b4:	mov	r3, r0
   444b8:	ldr	r0, [sp, #204]	; 0xcc
   444bc:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   444c0:	b	43fcc <__assert_fail@plt+0x317f4>
   444c4:	mov	r2, #5
   444c8:	movw	r1, #44388	; 0xad64
   444cc:	mov	r0, #0
   444d0:	movt	r1, #5
   444d4:	ldr	r4, [sp, #112]	; 0x70
   444d8:	bl	12298 <dcgettext@plt>
   444dc:	add	r1, sp, #208	; 0xd0
   444e0:	mov	r2, r4
   444e4:	mov	r3, r0
   444e8:	ldr	r0, [sp, #204]	; 0xcc
   444ec:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   444f0:	b	43fcc <__assert_fail@plt+0x317f4>
   444f4:	mov	r0, r9
   444f8:	add	r1, sp, #112	; 0x70
   444fc:	add	r2, sp, #192	; 0xc0
   44500:	bl	435a0 <__assert_fail@plt+0x30dc8>
   44504:	cmp	r0, #0
   44508:	beq	43fcc <__assert_fail@plt+0x317f4>
   4450c:	b	443f0 <__assert_fail@plt+0x31c18>
   44510:	movw	r1, #44300	; 0xad0c
   44514:	mov	r0, #0
   44518:	movt	r1, #5
   4451c:	b	44188 <__assert_fail@plt+0x319b0>
   44520:	ldr	r3, [sp, #216]	; 0xd8
   44524:	ldr	r4, [sp, #56]	; 0x38
   44528:	cmp	r3, r4
   4452c:	moveq	r0, #1
   44530:	beq	43fd0 <__assert_fail@plt+0x317f8>
   44534:	mov	r2, #5
   44538:	movw	r1, #44684	; 0xae8c
   4453c:	mov	r0, #0
   44540:	movt	r1, #5
   44544:	bl	12298 <dcgettext@plt>
   44548:	mov	r1, r0
   4454c:	ldr	r0, [sp, #204]	; 0xcc
   44550:	bl	3ce50 <__assert_fail@plt+0x2a678>
   44554:	mov	r0, #0
   44558:	b	43fd0 <__assert_fail@plt+0x317f8>
   4455c:	mov	r0, r9
   44560:	mov	r1, sl
   44564:	add	r2, sp, #136	; 0x88
   44568:	mov	r3, #0
   4456c:	add	r6, r6, #1
   44570:	str	r6, [sp, #112]	; 0x70
   44574:	bl	43454 <__assert_fail@plt+0x30c7c>
   44578:	cmp	r0, #0
   4457c:	beq	43fcc <__assert_fail@plt+0x317f4>
   44580:	movw	r3, #64920	; 0xfd98
   44584:	add	lr, sp, #752	; 0x2f0
   44588:	movt	r3, #65535	; 0xffff
   4458c:	ldrd	r2, [r3, lr]
   44590:	cmp	r3, #0
   44594:	cmpeq	r2, #31
   44598:	bls	44f3c <__assert_fail@plt+0x32764>
   4459c:	subs	r2, r2, #32
   445a0:	ldr	r0, [sp, #480]	; 0x1e0
   445a4:	sbc	r3, r3, #0
   445a8:	movw	ip, #64920	; 0xfd98
   445ac:	mov	r1, #0
   445b0:	movt	ip, #65535	; 0xffff
   445b4:	cmp	r3, r1
   445b8:	cmpeq	r2, r0
   445bc:	add	r0, sp, #752	; 0x2f0
   445c0:	strd	r2, [r0, ip]
   445c4:	bcs	44f24 <__assert_fail@plt+0x3274c>
   445c8:	ldr	r3, [sp, #484]	; 0x1e4
   445cc:	add	r2, r2, r2, lsl #2
   445d0:	ldr	r3, [r3, r2, lsl #2]
   445d4:	cmp	r3, #0
   445d8:	beq	44f24 <__assert_fail@plt+0x3274c>
   445dc:	ldr	r4, [sp, #112]	; 0x70
   445e0:	mov	r0, r9
   445e4:	mov	r1, sl
   445e8:	add	r2, sp, #144	; 0x90
   445ec:	mov	r3, #0
   445f0:	str	r4, [sp, #76]	; 0x4c
   445f4:	bl	43454 <__assert_fail@plt+0x30c7c>
   445f8:	cmp	r0, #0
   445fc:	beq	43fcc <__assert_fail@plt+0x317f4>
   44600:	movw	r3, #64928	; 0xfda0
   44604:	add	ip, sp, #752	; 0x2f0
   44608:	movt	r3, #65535	; 0xffff
   4460c:	ldr	r5, [sp, #200]	; 0xc8
   44610:	ldrd	r2, [r3, ip]
   44614:	str	r5, [sp, #64]	; 0x40
   44618:	subs	r2, r2, #33	; 0x21
   4461c:	sbc	r3, r3, #0
   44620:	cmp	r3, #0
   44624:	cmpeq	r2, #87	; 0x57
   44628:	bhi	469b8 <__assert_fail@plt+0x341e0>
   4462c:	cmp	r2, #87	; 0x57
   44630:	ldrls	pc, [pc, r2, lsl #2]
   44634:	b	469b8 <__assert_fail@plt+0x341e0>
   44638:	andeq	r6, r4, r4, lsl #19
   4463c:			; <UNDEFINED> instruction: 0x000469b8
   44640:			; <UNDEFINED> instruction: 0x000469b8
   44644:			; <UNDEFINED> instruction: 0x000469b8
   44648:			; <UNDEFINED> instruction: 0x000469b8
   4464c:			; <UNDEFINED> instruction: 0x000469b8
   44650:			; <UNDEFINED> instruction: 0x000469b8
   44654:			; <UNDEFINED> instruction: 0x000469b8
   44658:			; <UNDEFINED> instruction: 0x000469b8
   4465c:			; <UNDEFINED> instruction: 0x000469b8
   44660:			; <UNDEFINED> instruction: 0x000469b8
   44664:			; <UNDEFINED> instruction: 0x000469b8
   44668:			; <UNDEFINED> instruction: 0x000469b8
   4466c:			; <UNDEFINED> instruction: 0x000469b8
   44670:			; <UNDEFINED> instruction: 0x000469b8
   44674:			; <UNDEFINED> instruction: 0x000469b8
   44678:			; <UNDEFINED> instruction: 0x000469b8
   4467c:			; <UNDEFINED> instruction: 0x000469b8
   44680:			; <UNDEFINED> instruction: 0x000469b8
   44684:			; <UNDEFINED> instruction: 0x000469b8
   44688:			; <UNDEFINED> instruction: 0x000469b8
   4468c:			; <UNDEFINED> instruction: 0x000469b8
   44690:			; <UNDEFINED> instruction: 0x000469b8
   44694:			; <UNDEFINED> instruction: 0x000469b8
   44698:			; <UNDEFINED> instruction: 0x000469b8
   4469c:			; <UNDEFINED> instruction: 0x000469b8
   446a0:			; <UNDEFINED> instruction: 0x000469b8
   446a4:			; <UNDEFINED> instruction: 0x000469b8
   446a8:			; <UNDEFINED> instruction: 0x000469b8
   446ac:			; <UNDEFINED> instruction: 0x000469b8
   446b0:			; <UNDEFINED> instruction: 0x000469b8
   446b4:			; <UNDEFINED> instruction: 0x000469b8
   446b8:	andeq	r6, r4, r4, lsl #16
   446bc:			; <UNDEFINED> instruction: 0x000469b8
   446c0:			; <UNDEFINED> instruction: 0x000469b8
   446c4:			; <UNDEFINED> instruction: 0x000469b8
   446c8:	ldrdeq	r6, [r4], -r0
   446cc:			; <UNDEFINED> instruction: 0x000469b8
   446d0:			; <UNDEFINED> instruction: 0x000464b4
   446d4:			; <UNDEFINED> instruction: 0x000469b8
   446d8:			; <UNDEFINED> instruction: 0x000469b8
   446dc:			; <UNDEFINED> instruction: 0x000469b8
   446e0:			; <UNDEFINED> instruction: 0x000469b8
   446e4:			; <UNDEFINED> instruction: 0x000469b8
   446e8:			; <UNDEFINED> instruction: 0x000469b8
   446ec:	andeq	r6, r4, ip, asr #7
   446f0:	andeq	r6, r4, ip, asr #1
   446f4:	andeq	r6, r4, ip, asr #1
   446f8:			; <UNDEFINED> instruction: 0x000469b8
   446fc:	strdeq	r5, [r4], -r4
   44700:	strdeq	r6, [r4], -r4
   44704:	andeq	r5, r4, r4, asr #31
   44708:	strdeq	r6, [r4], -r4
   4470c:			; <UNDEFINED> instruction: 0x00045fb4
   44710:			; <UNDEFINED> instruction: 0x000469b8
   44714:	ldrdeq	r5, [r4], -r8
   44718:			; <UNDEFINED> instruction: 0x000469b8
   4471c:	andeq	r5, r4, r0, lsr lr
   44720:			; <UNDEFINED> instruction: 0x000469b8
   44724:			; <UNDEFINED> instruction: 0x000469b8
   44728:			; <UNDEFINED> instruction: 0x000469b8
   4472c:			; <UNDEFINED> instruction: 0x000469b8
   44730:			; <UNDEFINED> instruction: 0x000469b8
   44734:			; <UNDEFINED> instruction: 0x000469b8
   44738:	andeq	r6, r4, r4, lsl #16
   4473c:			; <UNDEFINED> instruction: 0x000469b8
   44740:	andeq	r5, r4, ip, asr #27
   44744:	andeq	r5, r4, ip, asr #27
   44748:			; <UNDEFINED> instruction: 0x000469b8
   4474c:			; <UNDEFINED> instruction: 0x00046bbc
   44750:	andeq	r6, r4, ip, lsl fp
   44754:			; <UNDEFINED> instruction: 0x000469b8
   44758:			; <UNDEFINED> instruction: 0x000469b8
   4475c:			; <UNDEFINED> instruction: 0x000469b8
   44760:			; <UNDEFINED> instruction: 0x000469b8
   44764:			; <UNDEFINED> instruction: 0x000469b8
   44768:			; <UNDEFINED> instruction: 0x000469b8
   4476c:	andeq	r6, r4, ip, lsr #21
   44770:			; <UNDEFINED> instruction: 0x000469b8
   44774:			; <UNDEFINED> instruction: 0x000469b8
   44778:			; <UNDEFINED> instruction: 0x000469b8
   4477c:			; <UNDEFINED> instruction: 0x000469b8
   44780:	andeq	r6, r4, r0, ror #20
   44784:			; <UNDEFINED> instruction: 0x000469b8
   44788:			; <UNDEFINED> instruction: 0x000469b8
   4478c:			; <UNDEFINED> instruction: 0x00045fb4
   44790:			; <UNDEFINED> instruction: 0x000469b8
   44794:	andeq	r5, r4, r8, lsl r8
   44798:	movw	r3, #64936	; 0xfda8
   4479c:	movt	r3, #65535	; 0xffff
   447a0:	ldr	r4, [sp, #72]	; 0x48
   447a4:	mov	r1, #0
   447a8:	ldrd	r2, [r3, r5]
   447ac:	ldr	r5, [sp, #200]	; 0xc8
   447b0:	str	r4, [sp, #124]	; 0x7c
   447b4:	mov	r4, r1
   447b8:	str	r1, [sp, #128]	; 0x80
   447bc:	str	r5, [sp, #76]	; 0x4c
   447c0:	subs	r2, r2, #1
   447c4:	sbc	r3, r3, #0
   447c8:	cmp	r3, #0
   447cc:	cmpeq	r2, #63	; 0x3f
   447d0:	bhi	454f8 <__assert_fail@plt+0x32d20>
   447d4:	cmp	r2, #63	; 0x3f
   447d8:	ldrls	pc, [pc, r2, lsl #2]
   447dc:	b	454f8 <__assert_fail@plt+0x32d20>
   447e0:	andeq	r5, r4, ip, ror r4
   447e4:	andeq	r5, r4, r4, lsr #10
   447e8:	ldrdeq	r5, [r4], -r8
   447ec:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   447f0:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   447f4:	strdeq	r5, [r4], -r8
   447f8:	andeq	r4, r4, ip, asr #31
   447fc:	andeq	r4, r4, ip, asr #30
   44800:	muleq	r4, r4, r6
   44804:	strdeq	r5, [r4], -ip
   44808:			; <UNDEFINED> instruction: 0x000456b4
   4480c:	andeq	r5, r4, ip, ror r3
   44810:	strdeq	r5, [r4], -r8
   44814:	strdeq	r5, [r4], -r8
   44818:	strdeq	r5, [r4], -r8
   4481c:	andeq	r5, r4, r0, ror #4
   44820:	strdeq	r5, [r4], -r8
   44824:	strdeq	r5, [r4], -r8
   44828:	andeq	r5, r4, r8, lsr #3
   4482c:	strdeq	r5, [r4], -r8
   44830:	strdeq	r5, [r4], -r8
   44834:	strdeq	r5, [r4], -r8
   44838:	strdeq	r5, [r4], -r8
   4483c:	strdeq	r5, [r4], -r8
   44840:	strdeq	r5, [r4], -r8
   44844:	strdeq	r5, [r4], -r8
   44848:	strdeq	r5, [r4], -r8
   4484c:	strdeq	r5, [r4], -r8
   44850:	strdeq	r5, [r4], -r8
   44854:	strdeq	r5, [r4], -r8
   44858:	strdeq	r5, [r4], -r8
   4485c:	strdeq	r5, [r4], -r8
   44860:	strdeq	r5, [r4], -r8
   44864:	strdeq	r5, [r4], -r8
   44868:	strdeq	r5, [r4], -r8
   4486c:	strdeq	r5, [r4], -r8
   44870:	strdeq	r5, [r4], -r8
   44874:	strdeq	r5, [r4], -r8
   44878:	strdeq	r5, [r4], -r8
   4487c:	strdeq	r5, [r4], -r8
   44880:	strdeq	r5, [r4], -r8
   44884:	strdeq	r5, [r4], -r8
   44888:	strdeq	r5, [r4], -r8
   4488c:	strdeq	r5, [r4], -r8
   44890:	strdeq	r5, [r4], -r8
   44894:	strdeq	r5, [r4], -r8
   44898:	strdeq	r5, [r4], -r8
   4489c:	strdeq	r5, [r4], -r8
   448a0:	strdeq	r5, [r4], -r8
   448a4:	strdeq	r5, [r4], -r8
   448a8:	strdeq	r5, [r4], -r8
   448ac:	strdeq	r5, [r4], -r8
   448b0:	strdeq	r5, [r4], -r8
   448b4:	strdeq	r5, [r4], -r8
   448b8:	strdeq	r5, [r4], -r8
   448bc:	strdeq	r5, [r4], -r8
   448c0:	strdeq	r5, [r4], -r8
   448c4:	strdeq	r5, [r4], -r8
   448c8:	strdeq	r5, [r4], -r8
   448cc:	strdeq	r5, [r4], -r8
   448d0:	strdeq	r5, [r4], -r8
   448d4:	andeq	r5, r4, ip, asr #1
   448d8:	andeq	r5, r4, ip, asr #1
   448dc:	andeq	r5, r4, ip, asr #1
   448e0:	mov	r0, r9
   448e4:	mov	r1, sl
   448e8:	add	r2, sp, #176	; 0xb0
   448ec:	mov	r3, #0
   448f0:	bl	43454 <__assert_fail@plt+0x30c7c>
   448f4:	cmp	r0, #0
   448f8:	beq	43fcc <__assert_fail@plt+0x317f4>
   448fc:	mov	r0, r9
   44900:	mov	r1, sl
   44904:	add	r2, sp, #184	; 0xb8
   44908:	mov	r3, #0
   4490c:	bl	43454 <__assert_fail@plt+0x30c7c>
   44910:	cmp	r0, #0
   44914:	beq	43fcc <__assert_fail@plt+0x317f4>
   44918:	mov	r1, sl
   4491c:	mov	r0, r9
   44920:	add	r2, sp, #192	; 0xc0
   44924:	bl	435a0 <__assert_fail@plt+0x30dc8>
   44928:	cmp	r0, #0
   4492c:	beq	43fcc <__assert_fail@plt+0x317f4>
   44930:	add	sl, sp, #752	; 0x2f0
   44934:	ldrd	r2, [sl, r7]
   44938:	cmp	r3, #0
   4493c:	cmpeq	r2, #255	; 0xff
   44940:	bhi	469fc <__assert_fail@plt+0x34224>
   44944:	cmp	r2, #59	; 0x3b
   44948:	bhi	469e4 <__assert_fail@plt+0x3420c>
   4494c:	add	r1, sl, r2, lsl #2
   44950:	ldr	r8, [r1, #-252]	; 0xffffff04
   44954:	cmp	r8, #0
   44958:	beq	469e4 <__assert_fail@plt+0x3420c>
   4495c:	mvn	r4, #0
   44960:	ldr	r0, [sp, #124]	; 0x7c
   44964:	ldr	r1, [sp, #128]	; 0x80
   44968:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   4496c:	subs	r6, r0, #0
   44970:	beq	43fcc <__assert_fail@plt+0x317f4>
   44974:	add	ip, sp, #752	; 0x2f0
   44978:	movw	r3, #64976	; 0xfdd0
   4497c:	movt	r3, #65535	; 0xffff
   44980:	mov	r2, r8
   44984:	ldr	r0, [sp, #200]	; 0xc8
   44988:	mov	r1, r6
   4498c:	ldrd	r8, [ip, r3]
   44990:	mov	r3, #1
   44994:	strd	r8, [sp]
   44998:	bl	34434 <__assert_fail@plt+0x21c5c>
   4499c:	cmp	r0, #0
   449a0:	beq	43fcc <__assert_fail@plt+0x317f4>
   449a4:	mov	r3, #0
   449a8:	ldr	r2, [sp, #216]	; 0xd8
   449ac:	add	r1, sp, #476	; 0x1dc
   449b0:	cmp	r2, r1
   449b4:	bcs	44f00 <__assert_fail@plt+0x32728>
   449b8:	cmp	r5, #5
   449bc:	str	r5, [r2]
   449c0:	streq	r6, [r2, #4]
   449c4:	add	r1, r2, #16
   449c8:	str	r4, [r2, #8]
   449cc:	str	r3, [r2, #12]
   449d0:	ldr	r6, [sp, #112]	; 0x70
   449d4:	str	r1, [sp, #216]	; 0xd8
   449d8:	b	43ee4 <__assert_fail@plt+0x3170c>
   449dc:	mov	r0, r9
   449e0:	mov	r1, sl
   449e4:	add	r2, sp, #168	; 0xa8
   449e8:	mov	r3, #0
   449ec:	bl	43454 <__assert_fail@plt+0x30c7c>
   449f0:	cmp	r0, #0
   449f4:	beq	43fcc <__assert_fail@plt+0x317f4>
   449f8:	mov	r0, r9
   449fc:	mov	r1, sl
   44a00:	add	r2, sp, #176	; 0xb0
   44a04:	mov	r3, #0
   44a08:	bl	43454 <__assert_fail@plt+0x30c7c>
   44a0c:	cmp	r0, #0
   44a10:	beq	43fcc <__assert_fail@plt+0x317f4>
   44a14:	mov	r0, r9
   44a18:	mov	r1, sl
   44a1c:	add	r2, sp, #184	; 0xb8
   44a20:	bl	435a0 <__assert_fail@plt+0x30dc8>
   44a24:	cmp	r0, #0
   44a28:	beq	43fcc <__assert_fail@plt+0x317f4>
   44a2c:	mov	r0, r9
   44a30:	mov	r1, sl
   44a34:	add	r2, sp, #192	; 0xc0
   44a38:	add	r3, sp, #152	; 0x98
   44a3c:	bl	43454 <__assert_fail@plt+0x30c7c>
   44a40:	cmp	r0, #0
   44a44:	beq	43fcc <__assert_fail@plt+0x317f4>
   44a48:	mov	r3, #0
   44a4c:	mvn	r4, #0
   44a50:	mov	r6, r3
   44a54:	b	449a8 <__assert_fail@plt+0x321d0>
   44a58:	movw	r1, #44344	; 0xad38
   44a5c:	ldr	r0, [sp, #200]	; 0xc8
   44a60:	movt	r1, #5
   44a64:	bl	34204 <__assert_fail@plt+0x21a2c>
   44a68:	cmp	r0, #0
   44a6c:	beq	43fcc <__assert_fail@plt+0x317f4>
   44a70:	mov	r3, #0
   44a74:	mov	r2, #1
   44a78:	mov	r6, r3
   44a7c:	str	r2, [sp, #476]	; 0x1dc
   44a80:	mvn	r4, #0
   44a84:	b	449a8 <__assert_fail@plt+0x321d0>
   44a88:	ldr	r0, [sp, #124]	; 0x7c
   44a8c:	ldr	r1, [sp, #128]	; 0x80
   44a90:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   44a94:	subs	r6, r0, #0
   44a98:	beq	43fcc <__assert_fail@plt+0x317f4>
   44a9c:	ldr	r0, [sp, #200]	; 0xc8
   44aa0:	mov	r1, r6
   44aa4:	bl	34204 <__assert_fail@plt+0x21a2c>
   44aa8:	cmp	r0, #0
   44aac:	beq	43fcc <__assert_fail@plt+0x317f4>
   44ab0:	ldr	r0, [sp, #484]	; 0x1e4
   44ab4:	mov	r3, #1
   44ab8:	str	r3, [sp, #476]	; 0x1dc
   44abc:	cmp	r0, #0
   44ac0:	beq	44ac8 <__assert_fail@plt+0x322f0>
   44ac4:	bl	121f0 <free@plt>
   44ac8:	ldr	r0, [sp, #496]	; 0x1f0
   44acc:	mov	r3, #0
   44ad0:	str	r3, [sp, #484]	; 0x1e4
   44ad4:	cmp	r0, r3
   44ad8:	str	r3, [sp, #480]	; 0x1e0
   44adc:	beq	44ae4 <__assert_fail@plt+0x3230c>
   44ae0:	bl	121f0 <free@plt>
   44ae4:	ldr	r3, [sp, #740]	; 0x2e4
   44ae8:	mov	r8, #0
   44aec:	str	r8, [sp, #496]	; 0x1f0
   44af0:	cmp	r3, r8
   44af4:	str	r8, [sp, #492]	; 0x1ec
   44af8:	mvneq	r4, #0
   44afc:	beq	449a8 <__assert_fail@plt+0x321d0>
   44b00:	ldr	r3, [r3]
   44b04:	mvn	r4, #0
   44b08:	lsl	r0, r3, #4
   44b0c:	str	r3, [sp, #492]	; 0x1ec
   44b10:	bl	12358 <xmalloc@plt>
   44b14:	ldr	r3, [sp, #740]	; 0x2e4
   44b18:	ldr	r2, [sp, #492]	; 0x1ec
   44b1c:	lsl	r2, r2, #4
   44b20:	str	r0, [sp, #496]	; 0x1f0
   44b24:	ldr	r1, [r3, #4]
   44b28:	bl	1222c <memcpy@plt>
   44b2c:	mov	r3, r8
   44b30:	b	449a8 <__assert_fail@plt+0x321d0>
   44b34:	ldr	r3, [sp, #476]	; 0x1dc
   44b38:	cmp	r3, #0
   44b3c:	bne	44f34 <__assert_fail@plt+0x3275c>
   44b40:	ldr	r0, [sp, #124]	; 0x7c
   44b44:	ldr	r1, [sp, #128]	; 0x80
   44b48:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   44b4c:	subs	r6, r0, #0
   44b50:	beq	43fcc <__assert_fail@plt+0x317f4>
   44b54:	ldr	r0, [sp, #200]	; 0xc8
   44b58:	mov	r1, r6
   44b5c:	bl	34204 <__assert_fail@plt+0x21a2c>
   44b60:	cmp	r0, #0
   44b64:	beq	43fcc <__assert_fail@plt+0x317f4>
   44b68:	mov	r3, #1
   44b6c:	str	r3, [sp, #476]	; 0x1dc
   44b70:	mov	r4, #0
   44b74:	mov	r0, r9
   44b78:	str	r4, [sp]
   44b7c:	mov	r1, sl
   44b80:	add	r2, sp, #136	; 0x88
   44b84:	add	r3, sp, #152	; 0x98
   44b88:	bl	4335c <__assert_fail@plt+0x30b84>
   44b8c:	cmp	r0, r4
   44b90:	beq	43fcc <__assert_fail@plt+0x317f4>
   44b94:	mov	r3, r4
   44b98:	mov	r0, r9
   44b9c:	mov	r1, sl
   44ba0:	add	r2, sp, #184	; 0xb8
   44ba4:	bl	43454 <__assert_fail@plt+0x30c7c>
   44ba8:	cmp	r0, r4
   44bac:	beq	43fcc <__assert_fail@plt+0x317f4>
   44bb0:	add	r4, sp, #176	; 0xb0
   44bb4:	mov	r0, r9
   44bb8:	str	r4, [sp]
   44bbc:	mov	r1, sl
   44bc0:	add	r2, sp, #144	; 0x90
   44bc4:	add	r3, sp, #168	; 0xa8
   44bc8:	bl	4335c <__assert_fail@plt+0x30b84>
   44bcc:	cmp	r0, #0
   44bd0:	beq	43fcc <__assert_fail@plt+0x317f4>
   44bd4:	mov	ip, #6
   44bd8:	str	r7, [sp, #64]	; 0x40
   44bdc:	add	r8, sp, #192	; 0xc0
   44be0:	mov	r7, r6
   44be4:	mov	r6, r5
   44be8:	mov	r5, r4
   44bec:	mov	r4, ip
   44bf0:	b	44c08 <__assert_fail@plt+0x32430>
   44bf4:	ldr	r3, [sp, #176]	; 0xb0
   44bf8:	cmp	r3, #0
   44bfc:	beq	45cf8 <__assert_fail@plt+0x33520>
   44c00:	subs	r4, r4, #1
   44c04:	beq	45cf8 <__assert_fail@plt+0x33520>
   44c08:	mov	r0, r9
   44c0c:	mov	r1, sl
   44c10:	mov	r2, r8
   44c14:	mov	r3, r5
   44c18:	bl	43454 <__assert_fail@plt+0x30c7c>
   44c1c:	cmp	r0, #0
   44c20:	bne	44bf4 <__assert_fail@plt+0x3241c>
   44c24:	b	43fcc <__assert_fail@plt+0x317f4>
   44c28:	mov	r0, r9
   44c2c:	mov	r1, sl
   44c30:	add	r2, sp, #176	; 0xb0
   44c34:	mov	r3, #0
   44c38:	bl	43454 <__assert_fail@plt+0x30c7c>
   44c3c:	cmp	r0, #0
   44c40:	beq	43fcc <__assert_fail@plt+0x317f4>
   44c44:	mov	r0, r9
   44c48:	mov	r1, sl
   44c4c:	add	r2, sp, #184	; 0xb8
   44c50:	mov	r3, #0
   44c54:	bl	43454 <__assert_fail@plt+0x30c7c>
   44c58:	cmp	r0, #0
   44c5c:	beq	43fcc <__assert_fail@plt+0x317f4>
   44c60:	mov	r1, sl
   44c64:	mov	r0, r9
   44c68:	add	r2, sp, #192	; 0xc0
   44c6c:	bl	435a0 <__assert_fail@plt+0x30dc8>
   44c70:	cmp	r0, #0
   44c74:	beq	43fcc <__assert_fail@plt+0x317f4>
   44c78:	ldr	sl, [sp, #128]	; 0x80
   44c7c:	cmp	sl, #0
   44c80:	beq	46950 <__assert_fail@plt+0x34178>
   44c84:	ldr	r6, [sp, #124]	; 0x7c
   44c88:	movw	r1, #42356	; 0xa574
   44c8c:	mov	r2, sl
   44c90:	movt	r1, #5
   44c94:	mov	r0, r6
   44c98:	bl	12784 <strncmp@plt>
   44c9c:	cmp	r0, #0
   44ca0:	beq	46940 <__assert_fail@plt+0x34168>
   44ca4:	add	r8, sp, #752	; 0x2f0
   44ca8:	ldrd	r2, [r8, r7]
   44cac:	cmp	r3, #0
   44cb0:	cmpeq	r2, #255	; 0xff
   44cb4:	bhi	468d4 <__assert_fail@plt+0x340fc>
   44cb8:	cmp	r2, #59	; 0x3b
   44cbc:	bhi	468b0 <__assert_fail@plt+0x340d8>
   44cc0:	add	r1, r8, r2, lsl #2
   44cc4:	ldr	r8, [r1, #-252]	; 0xffffff04
   44cc8:	cmp	r8, #0
   44ccc:	movne	r1, sl
   44cd0:	movne	r0, r6
   44cd4:	mvnne	r4, #0
   44cd8:	beq	468b0 <__assert_fail@plt+0x340d8>
   44cdc:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   44ce0:	subs	r6, r0, #0
   44ce4:	beq	43fcc <__assert_fail@plt+0x317f4>
   44ce8:	add	ip, sp, #752	; 0x2f0
   44cec:	movw	r3, #64976	; 0xfdd0
   44cf0:	movt	r3, #65535	; 0xffff
   44cf4:	mov	r2, r8
   44cf8:	ldr	r0, [sp, #200]	; 0xc8
   44cfc:	mov	r1, r6
   44d00:	ldrd	r8, [ip, r3]
   44d04:	mov	r3, #0
   44d08:	strd	r8, [sp]
   44d0c:	bl	34434 <__assert_fail@plt+0x21c5c>
   44d10:	cmp	r0, #0
   44d14:	bne	449a4 <__assert_fail@plt+0x321cc>
   44d18:	b	43fcc <__assert_fail@plt+0x317f4>
   44d1c:	add	r8, sp, #192	; 0xc0
   44d20:	add	r4, sp, #184	; 0xb8
   44d24:	str	r4, [sp, #80]	; 0x50
   44d28:	mov	r4, #6
   44d2c:	mov	r0, r9
   44d30:	mov	r1, sl
   44d34:	mov	r2, r8
   44d38:	ldr	r3, [sp, #80]	; 0x50
   44d3c:	bl	43454 <__assert_fail@plt+0x30c7c>
   44d40:	cmp	r0, #0
   44d44:	beq	43fcc <__assert_fail@plt+0x317f4>
   44d48:	ldr	r3, [sp, #184]	; 0xb8
   44d4c:	cmp	r3, #0
   44d50:	beq	44d5c <__assert_fail@plt+0x32584>
   44d54:	subs	r4, r4, #1
   44d58:	bne	44d2c <__assert_fail@plt+0x32554>
   44d5c:	ldr	r3, [sp, #476]	; 0x1dc
   44d60:	cmp	r3, #0
   44d64:	bne	44d94 <__assert_fail@plt+0x325bc>
   44d68:	ldr	r1, [sp, #128]	; 0x80
   44d6c:	ldr	r0, [sp, #124]	; 0x7c
   44d70:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   44d74:	subs	r1, r0, #0
   44d78:	beq	43fcc <__assert_fail@plt+0x317f4>
   44d7c:	ldr	r0, [sp, #200]	; 0xc8
   44d80:	bl	34204 <__assert_fail@plt+0x21a2c>
   44d84:	cmp	r0, #0
   44d88:	beq	43fcc <__assert_fail@plt+0x317f4>
   44d8c:	mov	r3, #1
   44d90:	str	r3, [sp, #476]	; 0x1dc
   44d94:	ldr	r0, [sp, #124]	; 0x7c
   44d98:	ldr	r1, [sp, #128]	; 0x80
   44d9c:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   44da0:	subs	r6, r0, #0
   44da4:	beq	43fcc <__assert_fail@plt+0x317f4>
   44da8:	ldr	r0, [sp, #200]	; 0xc8
   44dac:	mov	r1, r6
   44db0:	bl	34310 <__assert_fail@plt+0x21b38>
   44db4:	cmp	r0, #0
   44db8:	beq	43fcc <__assert_fail@plt+0x317f4>
   44dbc:	mov	r3, #0
   44dc0:	mvn	r4, #0
   44dc4:	b	449a8 <__assert_fail@plt+0x321d0>
   44dc8:	mov	r2, #5
   44dcc:	movw	r1, #44356	; 0xad44
   44dd0:	mov	r0, #0
   44dd4:	movt	r1, #5
   44dd8:	bl	12298 <dcgettext@plt>
   44ddc:	mov	r2, r4
   44de0:	add	r1, sp, #208	; 0xd0
   44de4:	mov	r3, r0
   44de8:	ldr	r0, [sp, #204]	; 0xcc
   44dec:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   44df0:	b	43fcc <__assert_fail@plt+0x317f4>
   44df4:	cmp	r4, #0
   44df8:	beq	443f0 <__assert_fail@plt+0x31c18>
   44dfc:	mov	r3, #1
   44e00:	ldr	r6, [sp, #112]	; 0x70
   44e04:	str	r3, [r4, #16]
   44e08:	b	43ee4 <__assert_fail@plt+0x3170c>
   44e0c:	mov	r0, r5
   44e10:	mov	r2, #5
   44e14:	movw	r1, #44404	; 0xad74
   44e18:	movt	r1, #5
   44e1c:	bl	12298 <dcgettext@plt>
   44e20:	mov	r2, r4
   44e24:	add	r1, sp, #208	; 0xd0
   44e28:	mov	r3, r0
   44e2c:	ldr	r0, [sp, #204]	; 0xcc
   44e30:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   44e34:	b	43fcc <__assert_fail@plt+0x317f4>
   44e38:	ldr	r6, [sp, #480]	; 0x1e0
   44e3c:	subs	r2, r2, #32
   44e40:	sbc	r3, r3, #0
   44e44:	add	r0, sp, #752	; 0x2f0
   44e48:	mov	r5, #0
   44e4c:	mov	r4, r6
   44e50:	cmp	r3, r5
   44e54:	cmpeq	r2, r4
   44e58:	strd	r2, [r0, r1]
   44e5c:	bcc	45068 <__assert_fail@plt+0x32890>
   44e60:	movw	r1, #64936	; 0xfda8
   44e64:	add	lr, sp, #752	; 0x2f0
   44e68:	movt	r1, #65535	; 0xffff
   44e6c:	ldrd	r0, [r1, lr]
   44e70:	cmp	r1, #0
   44e74:	cmpeq	r0, #62	; 0x3e
   44e78:	bne	457cc <__assert_fail@plt+0x32ff4>
   44e7c:	cmp	r6, #0
   44e80:	bne	44e9c <__assert_fail@plt+0x326c4>
   44e84:	cmp	r3, #0
   44e88:	cmpeq	r2, #3
   44e8c:	movls	r1, #80	; 0x50
   44e90:	movls	r6, #4
   44e94:	bls	44ebc <__assert_fail@plt+0x326e4>
   44e98:	mov	r6, #4
   44e9c:	lsl	r6, r6, #1
   44ea0:	mov	r1, #0
   44ea4:	mov	r0, r6
   44ea8:	cmp	r3, r1
   44eac:	cmpeq	r2, r0
   44eb0:	bcs	44e9c <__assert_fail@plt+0x326c4>
   44eb4:	add	r1, r6, r6, lsl #2
   44eb8:	lsl	r1, r1, #2
   44ebc:	ldr	r0, [sp, #484]	; 0x1e4
   44ec0:	bl	122c8 <xrealloc@plt>
   44ec4:	ldr	r3, [sp, #480]	; 0x1e0
   44ec8:	mov	r1, #0
   44ecc:	rsb	r2, r3, r6
   44ed0:	add	r3, r3, r3, lsl #2
   44ed4:	add	r2, r2, r2, lsl #2
   44ed8:	lsl	r2, r2, #2
   44edc:	str	r0, [sp, #484]	; 0x1e4
   44ee0:	add	r0, r0, r3, lsl #2
   44ee4:	bl	12580 <memset@plt>
   44ee8:	ldr	r3, [sp, #144]	; 0x90
   44eec:	ldr	r2, [sp, #484]	; 0x1e4
   44ef0:	str	r6, [sp, #480]	; 0x1e0
   44ef4:	add	r3, r3, r3, lsl #2
   44ef8:	add	r6, r2, r3, lsl #2
   44efc:	b	456f4 <__assert_fail@plt+0x32f1c>
   44f00:	mov	r2, #5
   44f04:	movw	r1, #44372	; 0xad54
   44f08:	mov	r0, #0
   44f0c:	movt	r1, #5
   44f10:	bl	12298 <dcgettext@plt>
   44f14:	mov	r1, r0
   44f18:	ldr	r0, [sp, #204]	; 0xcc
   44f1c:	bl	3ce50 <__assert_fail@plt+0x2a678>
   44f20:	b	43fcc <__assert_fail@plt+0x317f4>
   44f24:	movw	r1, #44464	; 0xadb0
   44f28:	mov	r0, #0
   44f2c:	movt	r1, #5
   44f30:	b	43fb0 <__assert_fail@plt+0x317d8>
   44f34:	mov	r6, #0
   44f38:	b	44b70 <__assert_fail@plt+0x32398>
   44f3c:	movw	r1, #44404	; 0xad74
   44f40:	mov	r0, #0
   44f44:	movt	r1, #5
   44f48:	b	43fb0 <__assert_fail@plt+0x317d8>
   44f4c:	mov	r0, r9
   44f50:	mov	r1, sl
   44f54:	add	r2, sp, #160	; 0xa0
   44f58:	bl	437f8 <__assert_fail@plt+0x31020>
   44f5c:	cmp	r0, #0
   44f60:	beq	43fcc <__assert_fail@plt+0x317f4>
   44f64:	ldr	r0, [sp, #124]	; 0x7c
   44f68:	ldr	r1, [sp, #128]	; 0x80
   44f6c:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   44f70:	ldr	r2, [sp, #120]	; 0x78
   44f74:	cmp	r2, #0
   44f78:	mov	r6, r0
   44f7c:	bne	44f90 <__assert_fail@plt+0x327b8>
   44f80:	ldr	r0, [sp, #76]	; 0x4c
   44f84:	bl	34c18 <__assert_fail@plt+0x22440>
   44f88:	mov	r2, r0
   44f8c:	str	r0, [sp, #120]	; 0x78
   44f90:	cmp	r4, #0
   44f94:	add	lr, sp, #752	; 0x2f0
   44f98:	ldr	r0, [sp, #76]	; 0x4c
   44f9c:	mov	r1, r6
   44fa0:	movne	r3, #2
   44fa4:	strne	r3, [r4, #16]
   44fa8:	movw	r3, #64944	; 0xfdb0
   44fac:	movt	r3, #65535	; 0xffff
   44fb0:	ldrd	r4, [lr, r3]
   44fb4:	mov	r3, #1
   44fb8:	strd	r4, [sp]
   44fbc:	bl	34ad4 <__assert_fail@plt+0x222fc>
   44fc0:	cmp	r0, #0
   44fc4:	beq	43fd0 <__assert_fail@plt+0x317f8>
   44fc8:	b	443f0 <__assert_fail@plt+0x31c18>
   44fcc:	mov	r0, r9
   44fd0:	mov	r1, sl
   44fd4:	add	r2, sp, #160	; 0xa0
   44fd8:	mov	r3, #0
   44fdc:	bl	43454 <__assert_fail@plt+0x30c7c>
   44fe0:	cmp	r0, #0
   44fe4:	beq	43fcc <__assert_fail@plt+0x317f4>
   44fe8:	mov	r0, r9
   44fec:	mov	r1, sl
   44ff0:	add	r2, sp, #168	; 0xa8
   44ff4:	mov	r3, #0
   44ff8:	bl	43454 <__assert_fail@plt+0x30c7c>
   44ffc:	cmp	r0, #0
   45000:	beq	43fcc <__assert_fail@plt+0x317f4>
   45004:	add	r4, sp, #176	; 0xb0
   45008:	mov	r0, r9
   4500c:	mov	r1, sl
   45010:	add	r3, sp, #136	; 0x88
   45014:	mov	r2, r4
   45018:	bl	43454 <__assert_fail@plt+0x30c7c>
   4501c:	cmp	r0, #0
   45020:	beq	43fcc <__assert_fail@plt+0x317f4>
   45024:	ldr	r3, [sp, #136]	; 0x88
   45028:	cmp	r3, #0
   4502c:	bne	457dc <__assert_fail@plt+0x33004>
   45030:	mov	r0, r9
   45034:	mov	r1, sl
   45038:	mov	r2, r4
   4503c:	bl	437f8 <__assert_fail@plt+0x31020>
   45040:	cmp	r0, #0
   45044:	beq	43fcc <__assert_fail@plt+0x317f4>
   45048:	add	ip, sp, #752	; 0x2f0
   4504c:	movw	r3, #64960	; 0xfdc0
   45050:	movt	r3, #65535	; 0xffff
   45054:	ldr	r0, [sp, #76]	; 0x4c
   45058:	ldr	r1, [sp, #160]	; 0xa0
   4505c:	ldrd	r2, [r3, ip]
   45060:	bl	3481c <__assert_fail@plt+0x22044>
   45064:	b	44fc0 <__assert_fail@plt+0x327e8>
   45068:	ldr	r3, [sp, #484]	; 0x1e4
   4506c:	add	r2, r2, r2, lsl #2
   45070:	add	r6, r3, r2, lsl #2
   45074:	ldr	r3, [r3, r2, lsl #2]
   45078:	cmp	r3, #0
   4507c:	beq	456d8 <__assert_fail@plt+0x32f00>
   45080:	ldr	r2, [r6, #4]
   45084:	mov	r4, r6
   45088:	ldr	r1, [sp, #120]	; 0x78
   4508c:	ldr	r5, [sp, #200]	; 0xc8
   45090:	cmp	r1, #0
   45094:	str	r1, [r6, #8]
   45098:	str	r5, [sp, #76]	; 0x4c
   4509c:	str	r3, [sp, #124]	; 0x7c
   450a0:	str	r2, [sp, #128]	; 0x80
   450a4:	beq	456c4 <__assert_fail@plt+0x32eec>
   450a8:	ldr	r0, [sp, #76]	; 0x4c
   450ac:	bl	35818 <__assert_fail@plt+0x23040>
   450b0:	cmp	r0, #12
   450b4:	beq	455b4 <__assert_fail@plt+0x32ddc>
   450b8:	movw	r3, #64936	; 0xfda8
   450bc:	add	ip, sp, #752	; 0x2f0
   450c0:	movt	r3, #65535	; 0xffff
   450c4:	ldrd	r2, [r3, ip]
   450c8:	b	447c0 <__assert_fail@plt+0x31fe8>
   450cc:	mov	r0, r9
   450d0:	mov	r1, sl
   450d4:	add	r2, sp, #160	; 0xa0
   450d8:	mov	r3, #0
   450dc:	bl	43454 <__assert_fail@plt+0x30c7c>
   450e0:	cmp	r0, #0
   450e4:	beq	43fcc <__assert_fail@plt+0x317f4>
   450e8:	mov	r0, r9
   450ec:	mov	r1, sl
   450f0:	add	r2, sp, #168	; 0xa8
   450f4:	mov	r3, #0
   450f8:	bl	43454 <__assert_fail@plt+0x30c7c>
   450fc:	cmp	r0, #0
   45100:	beq	43fcc <__assert_fail@plt+0x317f4>
   45104:	add	ip, sp, #124	; 0x7c
   45108:	add	r1, sp, #136	; 0x88
   4510c:	mov	r0, r9
   45110:	str	r1, [sp]
   45114:	mov	r2, ip
   45118:	add	r3, sp, #128	; 0x80
   4511c:	mov	r1, sl
   45120:	str	ip, [sp, #88]	; 0x58
   45124:	bl	4335c <__assert_fail@plt+0x30b84>
   45128:	cmp	r0, #0
   4512c:	beq	43fcc <__assert_fail@plt+0x317f4>
   45130:	movw	r3, #64936	; 0xfda8
   45134:	add	r0, sp, #752	; 0x2f0
   45138:	movt	r3, #65535	; 0xffff
   4513c:	ldrd	r2, [r3, r0]
   45140:	cmp	r3, #0
   45144:	cmpeq	r2, #62	; 0x3e
   45148:	beq	45d40 <__assert_fail@plt+0x33568>
   4514c:	movw	r4, #64952	; 0xfdb8
   45150:	add	r1, sp, #752	; 0x2f0
   45154:	movt	r4, #65535	; 0xffff
   45158:	ldrd	r2, [r1, r4]
   4515c:	orrs	r5, r2, r3
   45160:	beq	443f0 <__assert_fail@plt+0x31c18>
   45164:	ldr	r6, [sp, #112]	; 0x70
   45168:	ldrb	r3, [r6]
   4516c:	cmp	r3, #226	; 0xe2
   45170:	beq	45d08 <__assert_fail@plt+0x33530>
   45174:	cmp	r3, #241	; 0xf1
   45178:	beq	45d74 <__assert_fail@plt+0x3359c>
   4517c:	mov	r2, #5
   45180:	movw	r1, #44668	; 0xae7c
   45184:	mov	r0, #0
   45188:	movt	r1, #5
   4518c:	bl	12298 <dcgettext@plt>
   45190:	mov	r2, r6
   45194:	add	r1, sp, #208	; 0xd0
   45198:	mov	r3, r0
   4519c:	ldr	r0, [sp, #204]	; 0xcc
   451a0:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   451a4:	b	43fcc <__assert_fail@plt+0x317f4>
   451a8:	add	ip, sp, #752	; 0x2f0
   451ac:	movw	r8, #64952	; 0xfdb8
   451b0:	movt	r8, #65535	; 0xffff
   451b4:	mov	r0, r9
   451b8:	mov	r1, sl
   451bc:	add	r2, sp, #160	; 0xa0
   451c0:	mov	r3, #0
   451c4:	mov	r4, #0
   451c8:	mov	r5, #0
   451cc:	strd	r4, [ip, r8]
   451d0:	bl	43454 <__assert_fail@plt+0x30c7c>
   451d4:	cmp	r0, #0
   451d8:	beq	43fcc <__assert_fail@plt+0x317f4>
   451dc:	mov	r0, r9
   451e0:	mov	r1, sl
   451e4:	add	r2, sp, #168	; 0xa8
   451e8:	add	r3, sp, #136	; 0x88
   451ec:	bl	43454 <__assert_fail@plt+0x30c7c>
   451f0:	cmp	r0, #0
   451f4:	beq	43fcc <__assert_fail@plt+0x317f4>
   451f8:	mov	r0, r9
   451fc:	mov	r1, sl
   45200:	add	r2, sp, #176	; 0xb0
   45204:	bl	437f8 <__assert_fail@plt+0x31020>
   45208:	cmp	r0, #0
   4520c:	beq	43fcc <__assert_fail@plt+0x317f4>
   45210:	ldr	r1, [sp, #128]	; 0x80
   45214:	ldr	r0, [sp, #124]	; 0x7c
   45218:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   4521c:	mov	r6, r0
   45220:	ldr	r0, [sp, #76]	; 0x4c
   45224:	bl	34c18 <__assert_fail@plt+0x22440>
   45228:	add	lr, sp, #752	; 0x2f0
   4522c:	movw	r3, #64960	; 0xfdc0
   45230:	movt	r3, #65535	; 0xffff
   45234:	ldrd	r8, [r8, lr]
   45238:	mov	r1, r6
   4523c:	ldrd	r4, [lr, r3]
   45240:	orrs	sl, r8, r9
   45244:	strd	r4, [sp]
   45248:	moveq	r3, #2
   4524c:	movne	r3, #1
   45250:	mov	r2, r0
   45254:	ldr	r0, [sp, #76]	; 0x4c
   45258:	bl	34ad4 <__assert_fail@plt+0x222fc>
   4525c:	b	44fc0 <__assert_fail@plt+0x327e8>
   45260:	mov	r0, r9
   45264:	mov	r1, sl
   45268:	add	r2, sp, #160	; 0xa0
   4526c:	mov	r3, #0
   45270:	bl	43454 <__assert_fail@plt+0x30c7c>
   45274:	cmp	r0, #0
   45278:	beq	43fcc <__assert_fail@plt+0x317f4>
   4527c:	add	r5, sp, #168	; 0xa8
   45280:	add	r4, sp, #136	; 0x88
   45284:	mov	r0, r9
   45288:	mov	r1, sl
   4528c:	mov	r2, r5
   45290:	mov	r3, r4
   45294:	bl	43454 <__assert_fail@plt+0x30c7c>
   45298:	cmp	r0, #0
   4529c:	beq	43fcc <__assert_fail@plt+0x317f4>
   452a0:	ldr	r3, [sp, #136]	; 0x88
   452a4:	cmp	r3, #0
   452a8:	bne	45780 <__assert_fail@plt+0x32fa8>
   452ac:	ldr	r6, [sp, #112]	; 0x70
   452b0:	ldrb	r3, [r6]
   452b4:	cmp	r3, #226	; 0xe2
   452b8:	bne	43ee4 <__assert_fail@plt+0x3170c>
   452bc:	mov	r0, r9
   452c0:	mov	r1, sl
   452c4:	add	r2, sp, #176	; 0xb0
   452c8:	bl	437f8 <__assert_fail@plt+0x31020>
   452cc:	cmp	r0, #0
   452d0:	beq	43fcc <__assert_fail@plt+0x317f4>
   452d4:	b	443f0 <__assert_fail@plt+0x31c18>
   452d8:	mov	r0, r9
   452dc:	mov	r1, sl
   452e0:	add	r2, sp, #160	; 0xa0
   452e4:	bl	437f8 <__assert_fail@plt+0x31020>
   452e8:	cmp	r0, #0
   452ec:	beq	43fcc <__assert_fail@plt+0x317f4>
   452f0:	ldr	r0, [sp, #124]	; 0x7c
   452f4:	ldr	r1, [sp, #128]	; 0x80
   452f8:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   452fc:	ldr	r2, [sp, #120]	; 0x78
   45300:	cmp	r2, #0
   45304:	mov	r6, r0
   45308:	bne	4531c <__assert_fail@plt+0x32b44>
   4530c:	ldr	r0, [sp, #76]	; 0x4c
   45310:	bl	34c18 <__assert_fail@plt+0x22440>
   45314:	mov	r2, r0
   45318:	str	r0, [sp, #120]	; 0x78
   4531c:	ldr	r3, [sp, #216]	; 0xd8
   45320:	ldr	r9, [sp, #56]	; 0x38
   45324:	cmp	r3, r9
   45328:	bls	4580c <__assert_fail@plt+0x33034>
   4532c:	ldr	r3, [r3, #-16]
   45330:	cmp	r4, #0
   45334:	bic	r3, r3, #2
   45338:	beq	457fc <__assert_fail@plt+0x33024>
   4533c:	cmp	r3, #4
   45340:	streq	r3, [r4, #16]
   45344:	moveq	r3, #3
   45348:	beq	45358 <__assert_fail@plt+0x32b80>
   4534c:	mov	r3, #3
   45350:	str	r3, [r4, #16]
   45354:	mov	r3, #2
   45358:	add	sl, sp, #752	; 0x2f0
   4535c:	movw	ip, #64944	; 0xfdb0
   45360:	movt	ip, #65535	; 0xffff
   45364:	ldr	r0, [sp, #76]	; 0x4c
   45368:	mov	r1, r6
   4536c:	ldrd	r4, [sl, ip]
   45370:	strd	r4, [sp]
   45374:	bl	34ad4 <__assert_fail@plt+0x222fc>
   45378:	b	44fc0 <__assert_fail@plt+0x327e8>
   4537c:	add	ip, sp, #752	; 0x2f0
   45380:	movw	r2, #64960	; 0xfdc0
   45384:	movw	r3, #64976	; 0xfdd0
   45388:	movt	r2, #65535	; 0xffff
   4538c:	movt	r3, #65535	; 0xffff
   45390:	mov	r4, #0
   45394:	mov	r5, #0
   45398:	mov	r0, r9
   4539c:	strd	r4, [ip, r2]
   453a0:	mov	r1, sl
   453a4:	strd	r4, [ip, r3]
   453a8:	add	r2, sp, #160	; 0xa0
   453ac:	mov	r3, #0
   453b0:	mov	r4, #128	; 0x80
   453b4:	mov	r5, #0
   453b8:	strd	r4, [ip, r7]
   453bc:	bl	43454 <__assert_fail@plt+0x30c7c>
   453c0:	cmp	r0, #0
   453c4:	beq	43fcc <__assert_fail@plt+0x317f4>
   453c8:	mov	r0, r9
   453cc:	mov	r1, sl
   453d0:	add	r2, sp, #168	; 0xa8
   453d4:	mov	r3, #0
   453d8:	bl	43454 <__assert_fail@plt+0x30c7c>
   453dc:	cmp	r0, #0
   453e0:	beq	43fcc <__assert_fail@plt+0x317f4>
   453e4:	mov	r0, r9
   453e8:	mov	r1, sl
   453ec:	add	r2, sp, #176	; 0xb0
   453f0:	add	r3, sp, #136	; 0x88
   453f4:	bl	43454 <__assert_fail@plt+0x30c7c>
   453f8:	cmp	r0, #0
   453fc:	beq	43fcc <__assert_fail@plt+0x317f4>
   45400:	ldr	r3, [sp, #136]	; 0x88
   45404:	cmp	r3, #0
   45408:	beq	45434 <__assert_fail@plt+0x32c5c>
   4540c:	mov	r0, r9
   45410:	mov	r1, sl
   45414:	add	r2, sp, #184	; 0xb8
   45418:	add	r3, sp, #136	; 0x88
   4541c:	bl	43454 <__assert_fail@plt+0x30c7c>
   45420:	cmp	r0, #0
   45424:	beq	43fcc <__assert_fail@plt+0x317f4>
   45428:	ldr	r3, [sp, #136]	; 0x88
   4542c:	cmp	r3, #0
   45430:	bne	45750 <__assert_fail@plt+0x32f78>
   45434:	movw	r1, #44616	; 0xae48
   45438:	movt	r1, #5
   4543c:	mov	r0, #0
   45440:	mov	r2, #5
   45444:	bl	12298 <dcgettext@plt>
   45448:	ldr	r2, [sp, #64]	; 0x40
   4544c:	add	r1, sp, #208	; 0xd0
   45450:	mov	r3, r0
   45454:	ldr	r0, [sp, #204]	; 0xcc
   45458:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   4545c:	ldr	r6, [sp, #112]	; 0x70
   45460:	b	43ee4 <__assert_fail@plt+0x3170c>
   45464:	mov	r0, r9
   45468:	mov	r1, sl
   4546c:	add	r2, sp, #160	; 0xa0
   45470:	mov	r3, #0
   45474:	bl	43454 <__assert_fail@plt+0x30c7c>
   45478:	b	44fc0 <__assert_fail@plt+0x327e8>
   4547c:	mov	r0, r9
   45480:	mov	r1, sl
   45484:	add	r2, sp, #160	; 0xa0
   45488:	mov	r3, #0
   4548c:	bl	43454 <__assert_fail@plt+0x30c7c>
   45490:	cmp	r0, #0
   45494:	beq	43fcc <__assert_fail@plt+0x317f4>
   45498:	ldr	r0, [sp, #124]	; 0x7c
   4549c:	ldr	r1, [sp, #128]	; 0x80
   454a0:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   454a4:	ldr	r2, [sp, #120]	; 0x78
   454a8:	cmp	r2, #0
   454ac:	mov	r6, r0
   454b0:	bne	454c4 <__assert_fail@plt+0x32cec>
   454b4:	ldr	r0, [sp, #76]	; 0x4c
   454b8:	bl	34c18 <__assert_fail@plt+0x22440>
   454bc:	mov	r2, r0
   454c0:	str	r0, [sp, #120]	; 0x78
   454c4:	cmp	r4, #0
   454c8:	add	r8, sp, #752	; 0x2f0
   454cc:	ldr	r0, [sp, #76]	; 0x4c
   454d0:	mov	r1, r6
   454d4:	movne	r3, #4
   454d8:	strne	r3, [r4, #16]
   454dc:	movw	r3, #64944	; 0xfdb0
   454e0:	movt	r3, #65535	; 0xffff
   454e4:	ldrd	r4, [r8, r3]
   454e8:	mov	r3, #4
   454ec:	strd	r4, [sp]
   454f0:	bl	34ad4 <__assert_fail@plt+0x222fc>
   454f4:	b	44fc0 <__assert_fail@plt+0x327e8>
   454f8:	movw	r1, #44576	; 0xae20
   454fc:	movt	r1, #5
   45500:	mov	r0, #0
   45504:	mov	r2, #5
   45508:	bl	12298 <dcgettext@plt>
   4550c:	ldr	r2, [sp, #64]	; 0x40
   45510:	add	r1, sp, #208	; 0xd0
   45514:	mov	r3, r0
   45518:	ldr	r0, [sp, #204]	; 0xcc
   4551c:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   45520:	b	43fcc <__assert_fail@plt+0x317f4>
   45524:	mov	r0, r9
   45528:	mov	r1, sl
   4552c:	add	r2, sp, #160	; 0xa0
   45530:	mov	r3, #0
   45534:	bl	43454 <__assert_fail@plt+0x30c7c>
   45538:	cmp	r0, #0
   4553c:	beq	43fcc <__assert_fail@plt+0x317f4>
   45540:	ldr	r0, [sp, #124]	; 0x7c
   45544:	ldr	r1, [sp, #128]	; 0x80
   45548:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   4554c:	ldr	r6, [sp, #120]	; 0x78
   45550:	cmp	r6, #0
   45554:	mov	r8, r0
   45558:	bne	4556c <__assert_fail@plt+0x32d94>
   4555c:	ldr	r0, [sp, #76]	; 0x4c
   45560:	bl	34c18 <__assert_fail@plt+0x22440>
   45564:	mov	r6, r0
   45568:	str	r0, [sp, #120]	; 0x78
   4556c:	cmp	r4, #0
   45570:	ldr	r0, [sp, #204]	; 0xcc
   45574:	movne	r3, #4
   45578:	strne	r3, [r4, #16]
   4557c:	ldr	r4, [sp, #160]	; 0xa0
   45580:	bl	12508 <bfd_get_arch@plt>
   45584:	cmp	r0, #2
   45588:	beq	45774 <__assert_fail@plt+0x32f9c>
   4558c:	cmp	r0, #4
   45590:	subeq	r4, r4, #1
   45594:	asr	r5, r4, #31
   45598:	ldr	r0, [sp, #76]	; 0x4c
   4559c:	mov	r1, r8
   455a0:	mov	r2, r6
   455a4:	mov	r3, #5
   455a8:	strd	r4, [sp]
   455ac:	bl	34ad4 <__assert_fail@plt+0x222fc>
   455b0:	b	44fc0 <__assert_fail@plt+0x327e8>
   455b4:	add	r2, sp, #752	; 0x2f0
   455b8:	movw	r8, #64936	; 0xfda8
   455bc:	movt	r8, #65535	; 0xffff
   455c0:	ldrd	r0, [r2, r8]
   455c4:	subs	r2, r0, #1
   455c8:	sbc	r3, r1, #0
   455cc:	cmp	r3, #0
   455d0:	cmpeq	r2, #9
   455d4:	bhi	455f0 <__assert_fail@plt+0x32e18>
   455d8:	mov	ip, #1
   455dc:	movw	r3, #663	; 0x297
   455e0:	lsl	r2, ip, r2
   455e4:	and	r3, r2, r3
   455e8:	cmp	r3, #0
   455ec:	bne	45714 <__assert_fail@plt+0x32f3c>
   455f0:	mov	r2, r0
   455f4:	mov	r3, r1
   455f8:	b	447c0 <__assert_fail@plt+0x31fe8>
   455fc:	mov	r0, r9
   45600:	mov	r1, sl
   45604:	add	r2, sp, #160	; 0xa0
   45608:	mov	r3, #0
   4560c:	bl	43454 <__assert_fail@plt+0x30c7c>
   45610:	cmp	r0, #0
   45614:	beq	43fcc <__assert_fail@plt+0x317f4>
   45618:	mov	r0, r9
   4561c:	mov	r1, sl
   45620:	add	r2, sp, #168	; 0xa8
   45624:	add	r3, sp, #136	; 0x88
   45628:	bl	43454 <__assert_fail@plt+0x30c7c>
   4562c:	cmp	r0, #0
   45630:	beq	43fcc <__assert_fail@plt+0x317f4>
   45634:	ldr	r0, [sp, #124]	; 0x7c
   45638:	ldr	r1, [sp, #128]	; 0x80
   4563c:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   45640:	ldr	r2, [sp, #120]	; 0x78
   45644:	cmp	r2, #0
   45648:	mov	r6, r0
   4564c:	bne	45660 <__assert_fail@plt+0x32e88>
   45650:	ldr	r0, [sp, #76]	; 0x4c
   45654:	bl	34c18 <__assert_fail@plt+0x22440>
   45658:	mov	r2, r0
   4565c:	str	r0, [sp, #120]	; 0x78
   45660:	cmp	r4, #0
   45664:	add	r8, sp, #752	; 0x2f0
   45668:	ldr	r0, [sp, #76]	; 0x4c
   4566c:	mov	r1, r6
   45670:	movne	r3, #4
   45674:	strne	r3, [r4, #16]
   45678:	movw	r3, #64944	; 0xfdb0
   4567c:	movt	r3, #65535	; 0xffff
   45680:	ldrd	r4, [r8, r3]
   45684:	mov	r3, #5
   45688:	strd	r4, [sp]
   4568c:	bl	34ad4 <__assert_fail@plt+0x222fc>
   45690:	b	44fc0 <__assert_fail@plt+0x327e8>
   45694:	mov	r0, r9
   45698:	mov	r1, sl
   4569c:	add	r2, sp, #160	; 0xa0
   456a0:	mov	r3, #0
   456a4:	bl	43454 <__assert_fail@plt+0x30c7c>
   456a8:	cmp	r0, #0
   456ac:	beq	43fcc <__assert_fail@plt+0x317f4>
   456b0:	b	443f0 <__assert_fail@plt+0x31c18>
   456b4:	movw	r1, #44596	; 0xae34
   456b8:	mov	r0, #0
   456bc:	movt	r1, #5
   456c0:	b	45440 <__assert_fail@plt+0x32c68>
   456c4:	movw	r3, #64936	; 0xfda8
   456c8:	add	r8, sp, #752	; 0x2f0
   456cc:	movt	r3, #65535	; 0xffff
   456d0:	ldrd	r2, [r3, r8]
   456d4:	b	447c0 <__assert_fail@plt+0x31fe8>
   456d8:	movw	r3, #64936	; 0xfda8
   456dc:	add	ip, sp, #752	; 0x2f0
   456e0:	movt	r3, #65535	; 0xffff
   456e4:	ldrd	r2, [r3, ip]
   456e8:	cmp	r3, #0
   456ec:	cmpeq	r2, #62	; 0x3e
   456f0:	bne	457cc <__assert_fail@plt+0x32ff4>
   456f4:	ldr	r4, [sp, #72]	; 0x48
   456f8:	mov	r2, #0
   456fc:	movw	r3, #11856	; 0x2e50
   45700:	str	r2, [r6, #4]
   45704:	movt	r3, #5
   45708:	str	r4, [r6]
   4570c:	mov	r4, r6
   45710:	b	45088 <__assert_fail@plt+0x328b0>
   45714:	mov	r0, #4
   45718:	add	r5, sp, #752	; 0x2f0
   4571c:	bl	12358 <xmalloc@plt>
   45720:	mov	r2, #0
   45724:	str	r0, [r6, #12]
   45728:	mov	r3, r0
   4572c:	ldr	r1, [sp, #120]	; 0x78
   45730:	ldr	r0, [sp, #76]	; 0x4c
   45734:	str	r1, [r3]
   45738:	ldr	r1, [r6, #12]
   4573c:	bl	34bc0 <__assert_fail@plt+0x223e8>
   45740:	ldrd	r2, [r5, r8]
   45744:	str	r0, [sp, #120]	; 0x78
   45748:	str	r0, [r6, #8]
   4574c:	b	447c0 <__assert_fail@plt+0x31fe8>
   45750:	mov	r0, r9
   45754:	mov	r1, sl
   45758:	add	r3, sp, #136	; 0x88
   4575c:	add	r2, sp, #192	; 0xc0
   45760:	bl	43454 <__assert_fail@plt+0x30c7c>
   45764:	cmp	r0, #0
   45768:	beq	43fcc <__assert_fail@plt+0x317f4>
   4576c:	b	45434 <__assert_fail@plt+0x32c5c>
   45770:	bl	122b0 <__stack_chk_fail@plt>
   45774:	cmp	r4, #15
   45778:	addgt	r4, r4, #2
   4577c:	b	45594 <__assert_fail@plt+0x32dbc>
   45780:	mov	r2, r5
   45784:	mov	r0, r9
   45788:	mov	r1, sl
   4578c:	mov	r3, r4
   45790:	bl	43454 <__assert_fail@plt+0x30c7c>
   45794:	cmp	r0, #0
   45798:	beq	43fcc <__assert_fail@plt+0x317f4>
   4579c:	ldr	r3, [sp, #136]	; 0x88
   457a0:	cmp	r3, #0
   457a4:	beq	452ac <__assert_fail@plt+0x32ad4>
   457a8:	str	r4, [sp]
   457ac:	mov	r0, r9
   457b0:	mov	r1, sl
   457b4:	add	r2, sp, #124	; 0x7c
   457b8:	add	r3, sp, #128	; 0x80
   457bc:	bl	4335c <__assert_fail@plt+0x30b84>
   457c0:	cmp	r0, #0
   457c4:	bne	452ac <__assert_fail@plt+0x32ad4>
   457c8:	b	43fcc <__assert_fail@plt+0x317f4>
   457cc:	movw	r1, #44548	; 0xae04
   457d0:	mov	r0, #0
   457d4:	movt	r1, #5
   457d8:	b	440b0 <__assert_fail@plt+0x318d8>
   457dc:	add	r3, sp, #136	; 0x88
   457e0:	mov	r0, r9
   457e4:	mov	r1, sl
   457e8:	add	r2, sp, #184	; 0xb8
   457ec:	bl	43454 <__assert_fail@plt+0x30c7c>
   457f0:	cmp	r0, #0
   457f4:	bne	45030 <__assert_fail@plt+0x32858>
   457f8:	b	43fcc <__assert_fail@plt+0x317f4>
   457fc:	cmp	r3, #4
   45800:	moveq	r3, #3
   45804:	bne	45354 <__assert_fail@plt+0x32b7c>
   45808:	b	45358 <__assert_fail@plt+0x32b80>
   4580c:	cmp	r4, #0
   45810:	bne	4534c <__assert_fail@plt+0x32b74>
   45814:	b	45354 <__assert_fail@plt+0x32b7c>
   45818:	ldr	ip, [sp, #136]	; 0x88
   4581c:	mov	r0, r9
   45820:	ldr	lr, [sp, #484]	; 0x1e4
   45824:	mov	r1, sl
   45828:	add	r2, sp, #152	; 0x98
   4582c:	mov	r3, #0
   45830:	add	ip, ip, ip, lsl #2
   45834:	add	lr, lr, ip, lsl #2
   45838:	str	lr, [sp, #76]	; 0x4c
   4583c:	bl	43454 <__assert_fail@plt+0x30c7c>
   45840:	cmp	r0, #0
   45844:	beq	43fcc <__assert_fail@plt+0x317f4>
   45848:	mov	r0, r9
   4584c:	mov	r1, sl
   45850:	add	r2, sp, #160	; 0xa0
   45854:	mov	r3, #0
   45858:	bl	43454 <__assert_fail@plt+0x30c7c>
   4585c:	cmp	r0, #0
   45860:	beq	43fcc <__assert_fail@plt+0x317f4>
   45864:	mov	r0, r9
   45868:	mov	r1, sl
   4586c:	add	r2, sp, #168	; 0xa8
   45870:	mov	r3, #0
   45874:	bl	43454 <__assert_fail@plt+0x30c7c>
   45878:	cmp	r0, #0
   4587c:	beq	43fcc <__assert_fail@plt+0x317f4>
   45880:	mov	r0, r9
   45884:	mov	r1, sl
   45888:	add	r2, sp, #120	; 0x78
   4588c:	bl	43d64 <__assert_fail@plt+0x3158c>
   45890:	cmp	r0, #0
   45894:	beq	43fcc <__assert_fail@plt+0x317f4>
   45898:	mov	r0, r9
   4589c:	mov	r1, sl
   458a0:	add	r2, sp, #176	; 0xb0
   458a4:	mov	r3, #0
   458a8:	bl	43454 <__assert_fail@plt+0x30c7c>
   458ac:	cmp	r0, #0
   458b0:	beq	43fcc <__assert_fail@plt+0x317f4>
   458b4:	movw	r4, #64960	; 0xfdc0
   458b8:	add	ip, sp, #752	; 0x2f0
   458bc:	movt	r4, #65535	; 0xffff
   458c0:	mvn	r0, #0
   458c4:	mvn	r1, #0
   458c8:	ldrd	r2, [ip, r4]
   458cc:	cmp	r3, r1
   458d0:	cmpeq	r2, r0
   458d4:	beq	45b2c <__assert_fail@plt+0x33354>
   458d8:	adds	r0, r2, #1
   458dc:	lsl	r0, r0, #2
   458e0:	bl	12358 <xmalloc@plt>
   458e4:	add	lr, sp, #752	; 0x2f0
   458e8:	ldrd	r2, [lr, r4]
   458ec:	mov	r6, r0
   458f0:	orrs	r0, r2, r3
   458f4:	beq	45990 <__assert_fail@plt+0x331b8>
   458f8:	mov	r2, #1
   458fc:	mov	r3, #0
   45900:	strd	r2, [sp, #80]	; 0x50
   45904:	mov	r2, r7
   45908:	mov	r8, r6
   4590c:	mov	r7, r6
   45910:	mov	r3, r4
   45914:	mov	r6, fp
   45918:	mov	fp, r2
   4591c:	mov	r0, r9
   45920:	mov	r1, sl
   45924:	mov	r2, r8
   45928:	str	r3, [sp, #28]
   4592c:	bl	43d64 <__assert_fail@plt+0x3158c>
   45930:	ldr	r3, [sp, #28]
   45934:	cmp	r0, #0
   45938:	beq	43fcc <__assert_fail@plt+0x317f4>
   4593c:	ldrd	r0, [sp, #80]	; 0x50
   45940:	add	ip, sp, #752	; 0x2f0
   45944:	movw	r2, #64960	; 0xfdc0
   45948:	add	r8, r8, #4
   4594c:	adds	r0, r0, #1
   45950:	ldrd	r4, [ip, r3]
   45954:	adc	r1, r1, #0
   45958:	strd	r0, [sp, #96]	; 0x60
   4595c:	ldrd	r0, [sp, #80]	; 0x50
   45960:	movt	r2, #65535	; 0xffff
   45964:	cmp	r5, r1
   45968:	cmpeq	r4, r0
   4596c:	ldrdhi	r4, [sp, #96]	; 0x60
   45970:	strdhi	r4, [sp, #80]	; 0x50
   45974:	bhi	4591c <__assert_fail@plt+0x33144>
   45978:	orrs	r8, r4, r5
   4597c:	mov	r3, fp
   45980:	mov	fp, r6
   45984:	mov	r6, r7
   45988:	mov	r7, r3
   4598c:	bne	45b3c <__assert_fail@plt+0x33364>
   45990:	mov	r4, #0
   45994:	mov	r2, #0
   45998:	mov	r5, r4
   4599c:	mov	r3, #0
   459a0:	str	r3, [r6, r2, lsl #2]
   459a4:	mov	r0, r9
   459a8:	mov	r1, sl
   459ac:	add	r2, sp, #184	; 0xb8
   459b0:	mov	r3, #0
   459b4:	bl	43454 <__assert_fail@plt+0x30c7c>
   459b8:	cmp	r0, #0
   459bc:	beq	43fcc <__assert_fail@plt+0x317f4>
   459c0:	mov	r0, r9
   459c4:	mov	r1, sl
   459c8:	add	r2, sp, #192	; 0xc0
   459cc:	add	r3, sp, #124	; 0x7c
   459d0:	bl	43454 <__assert_fail@plt+0x30c7c>
   459d4:	cmp	r0, #0
   459d8:	beq	43fcc <__assert_fail@plt+0x317f4>
   459dc:	ldr	r8, [sp, #76]	; 0x4c
   459e0:	mov	r2, #5
   459e4:	ldr	r3, [r8, #4]
   459e8:	str	r2, [r8, #16]
   459ec:	cmp	r3, #0
   459f0:	bne	45a74 <__assert_fail@plt+0x3329c>
   459f4:	ldr	r1, [sp, #120]	; 0x78
   459f8:	mov	r2, r6
   459fc:	mov	r3, r4
   45a00:	ldr	r0, [sp, #64]	; 0x40
   45a04:	mov	r4, #0
   45a08:	bl	34dbc <__assert_fail@plt+0x225e4>
   45a0c:	mov	r6, r4
   45a10:	mov	r2, r4
   45a14:	mov	r3, r0
   45a18:	str	r0, [sp, #116]	; 0x74
   45a1c:	cmp	r3, #0
   45a20:	beq	43fcc <__assert_fail@plt+0x317f4>
   45a24:	ldr	r0, [sp, #136]	; 0x88
   45a28:	orrs	r2, r6, r2
   45a2c:	ldr	r2, [sp, #484]	; 0x1e4
   45a30:	add	r0, r0, r0, lsl #2
   45a34:	add	r1, r2, r0, lsl #2
   45a38:	str	r3, [r1, #8]
   45a3c:	beq	45a4c <__assert_fail@plt+0x33274>
   45a40:	ldr	r1, [r1, #4]
   45a44:	cmp	r1, #0
   45a48:	bne	45ac0 <__assert_fail@plt+0x332e8>
   45a4c:	ldr	r0, [sp, #128]	; 0x80
   45a50:	ldr	r1, [sp, #496]	; 0x1f0
   45a54:	add	r2, r1, r0, lsl #4
   45a58:	str	r3, [r1, r0, lsl #4]
   45a5c:	ldr	r1, [r2, #4]
   45a60:	str	r5, [r2, #8]
   45a64:	cmp	r1, #0
   45a68:	str	r4, [r2, #12]
   45a6c:	strne	r3, [r1]
   45a70:	b	443f0 <__assert_fail@plt+0x31c18>
   45a74:	ldr	r0, [sp, #64]	; 0x40
   45a78:	ldr	r1, [sp, #120]	; 0x78
   45a7c:	bl	35818 <__assert_fail@plt+0x23040>
   45a80:	cmp	r0, #12
   45a84:	bne	459f4 <__assert_fail@plt+0x3321c>
   45a88:	mov	r0, #4
   45a8c:	bl	12358 <xmalloc@plt>
   45a90:	ldr	r9, [sp, #76]	; 0x4c
   45a94:	mov	r2, #0
   45a98:	str	r0, [r9, #12]
   45a9c:	mov	r3, r0
   45aa0:	ldr	r1, [sp, #120]	; 0x78
   45aa4:	ldr	r0, [sp, #64]	; 0x40
   45aa8:	str	r1, [r3]
   45aac:	ldr	r1, [r9, #12]
   45ab0:	bl	34bc0 <__assert_fail@plt+0x223e8>
   45ab4:	mov	r1, r0
   45ab8:	str	r0, [sp, #120]	; 0x78
   45abc:	b	459f8 <__assert_fail@plt+0x33220>
   45ac0:	ldr	r0, [r2, r0, lsl #2]
   45ac4:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   45ac8:	cmp	r6, #0
   45acc:	mov	sl, r0
   45ad0:	bne	45c44 <__assert_fail@plt+0x3346c>
   45ad4:	movw	r3, #64928	; 0xfda0
   45ad8:	add	ip, sp, #752	; 0x2f0
   45adc:	movt	r3, #65535	; 0xffff
   45ae0:	ldrd	r8, [ip, r3]
   45ae4:	cmp	r9, #0
   45ae8:	cmpeq	r8, #78	; 0x4e
   45aec:	movne	r3, #0
   45af0:	moveq	r3, #1
   45af4:	cmp	r9, #0
   45af8:	cmpeq	r8, #69	; 0x45
   45afc:	orreq	r3, r3, #1
   45b00:	cmp	r3, #0
   45b04:	beq	45bdc <__assert_fail@plt+0x33404>
   45b08:	ldr	r0, [sp, #64]	; 0x40
   45b0c:	mov	r1, sl
   45b10:	ldr	r2, [sp, #116]	; 0x74
   45b14:	bl	353cc <__assert_fail@plt+0x22bf4>
   45b18:	mov	r3, r0
   45b1c:	str	r0, [sp, #116]	; 0x74
   45b20:	cmp	r3, #0
   45b24:	bne	45a4c <__assert_fail@plt+0x33274>
   45b28:	b	43fcc <__assert_fail@plt+0x317f4>
   45b2c:	mov	r4, #0
   45b30:	mov	r6, r4
   45b34:	mov	r5, r4
   45b38:	b	459a4 <__assert_fail@plt+0x331cc>
   45b3c:	sub	r4, r4, #-1073741823	; 0xc0000001
   45b40:	ldr	r0, [sp, #64]	; 0x40
   45b44:	ldr	r4, [r6, r4, lsl #2]
   45b48:	str	r2, [sp, #28]
   45b4c:	mov	r1, r4
   45b50:	bl	35818 <__assert_fail@plt+0x23040>
   45b54:	ldr	r2, [sp, #28]
   45b58:	cmp	r0, #12
   45b5c:	beq	45cc0 <__assert_fail@plt+0x334e8>
   45b60:	add	ip, sp, #752	; 0x2f0
   45b64:	mov	r4, #0
   45b68:	ldrd	r2, [r2, ip]
   45b6c:	orrs	r5, r2, r3
   45b70:	beq	45cb8 <__assert_fail@plt+0x334e0>
   45b74:	movw	r8, #64960	; 0xfdc0
   45b78:	mov	r5, #0
   45b7c:	movt	r8, #65535	; 0xffff
   45b80:	str	fp, [sp, #88]	; 0x58
   45b84:	mov	fp, r5
   45b88:	mov	r0, #0
   45b8c:	mov	r1, #0
   45b90:	str	r4, [sp, #92]	; 0x5c
   45b94:	strd	r0, [sp, #80]	; 0x50
   45b98:	ldr	r1, [sp, #80]	; 0x50
   45b9c:	ldr	r0, [sp, #64]	; 0x40
   45ba0:	lsl	r4, r1, #2
   45ba4:	ldr	r1, [r6, r4]
   45ba8:	bl	35818 <__assert_fail@plt+0x23040>
   45bac:	cmp	r0, #12
   45bb0:	beq	45c70 <__assert_fail@plt+0x33498>
   45bb4:	add	r4, sp, #752	; 0x2f0
   45bb8:	ldrd	r2, [r4, r8]
   45bbc:	ldrd	r4, [sp, #80]	; 0x50
   45bc0:	adds	r4, r4, #1
   45bc4:	adc	r5, r5, #0
   45bc8:	cmp	r3, r5
   45bcc:	cmpeq	r2, r4
   45bd0:	bls	45c60 <__assert_fail@plt+0x33488>
   45bd4:	strd	r4, [sp, #80]	; 0x50
   45bd8:	b	45b98 <__assert_fail@plt+0x333c0>
   45bdc:	mov	r0, #20
   45be0:	bl	12358 <xmalloc@plt>
   45be4:	mov	r1, r6
   45be8:	mov	r2, #20
   45bec:	mov	r8, r0
   45bf0:	bl	12580 <memset@plt>
   45bf4:	ldr	r2, [sp, #744]	; 0x2e8
   45bf8:	mov	r1, r8
   45bfc:	ldr	r3, [sp, #116]	; 0x74
   45c00:	str	sl, [r8, #4]
   45c04:	str	r2, [r8]
   45c08:	mov	r2, sl
   45c0c:	str	r3, [r1, #12]!
   45c10:	ldr	r0, [sp, #64]	; 0x40
   45c14:	str	r8, [sp, #744]	; 0x2e8
   45c18:	bl	34bc0 <__assert_fail@plt+0x223e8>
   45c1c:	mov	r1, sl
   45c20:	mov	r3, r0
   45c24:	ldr	r0, [sp, #64]	; 0x40
   45c28:	mov	r2, r3
   45c2c:	str	r3, [sp, #116]	; 0x74
   45c30:	bl	353cc <__assert_fail@plt+0x22bf4>
   45c34:	str	r0, [sp, #116]	; 0x74
   45c38:	mov	r3, r0
   45c3c:	str	r0, [r8, #8]
   45c40:	b	45b20 <__assert_fail@plt+0x33348>
   45c44:	ldr	r0, [sp, #64]	; 0x40
   45c48:	mov	r1, sl
   45c4c:	ldr	r2, [sp, #116]	; 0x74
   45c50:	bl	352d4 <__assert_fail@plt+0x22afc>
   45c54:	mov	r3, r0
   45c58:	str	r0, [sp, #116]	; 0x74
   45c5c:	b	45b20 <__assert_fail@plt+0x33348>
   45c60:	mov	r5, fp
   45c64:	ldr	r4, [sp, #92]	; 0x5c
   45c68:	ldr	fp, [sp, #88]	; 0x58
   45c6c:	b	4599c <__assert_fail@plt+0x331c4>
   45c70:	cmp	fp, #0
   45c74:	bne	45c98 <__assert_fail@plt+0x334c0>
   45c78:	ldr	r0, [sp, #176]	; 0xb0
   45c7c:	lsl	r0, r0, #2
   45c80:	bl	12358 <xmalloc@plt>
   45c84:	ldr	r2, [sp, #176]	; 0xb0
   45c88:	mov	r1, #0
   45c8c:	lsl	r2, r2, #2
   45c90:	mov	fp, r0
   45c94:	bl	12580 <memset@plt>
   45c98:	ldr	r3, [r6, r4]
   45c9c:	add	r1, fp, r4
   45ca0:	ldr	r0, [sp, #64]	; 0x40
   45ca4:	mov	r2, #0
   45ca8:	str	r3, [fp, r4]
   45cac:	bl	34bc0 <__assert_fail@plt+0x223e8>
   45cb0:	str	r0, [r6, r4]
   45cb4:	b	45bb4 <__assert_fail@plt+0x333dc>
   45cb8:	mov	r5, #0
   45cbc:	b	4599c <__assert_fail@plt+0x331c4>
   45cc0:	mov	r1, r4
   45cc4:	ldr	r0, [sp, #64]	; 0x40
   45cc8:	str	r2, [sp, #28]
   45ccc:	bl	359a8 <__assert_fail@plt+0x231d0>
   45cd0:	mov	r1, r0
   45cd4:	ldr	r0, [sp, #64]	; 0x40
   45cd8:	bl	35818 <__assert_fail@plt+0x23040>
   45cdc:	ldr	r2, [sp, #28]
   45ce0:	cmp	r0, #2
   45ce4:	beq	45d94 <__assert_fail@plt+0x335bc>
   45ce8:	add	lr, sp, #752	; 0x2f0
   45cec:	mov	r4, #0
   45cf0:	ldrd	r2, [r2, lr]
   45cf4:	b	45b6c <__assert_fail@plt+0x33394>
   45cf8:	mov	r5, r6
   45cfc:	mov	r6, r7
   45d00:	ldr	r7, [sp, #64]	; 0x40
   45d04:	b	44dbc <__assert_fail@plt+0x325e4>
   45d08:	mov	r0, r9
   45d0c:	mov	r1, sl
   45d10:	add	r2, sp, #176	; 0xb0
   45d14:	bl	437f8 <__assert_fail@plt+0x31020>
   45d18:	cmp	r0, #0
   45d1c:	beq	43fcc <__assert_fail@plt+0x317f4>
   45d20:	add	r8, sp, #752	; 0x2f0
   45d24:	ldrd	r2, [r8, r4]
   45d28:	subs	r2, r2, #1
   45d2c:	sbc	r3, r3, #0
   45d30:	strd	r2, [r8, r4]
   45d34:	orrs	ip, r2, r3
   45d38:	bne	45164 <__assert_fail@plt+0x3298c>
   45d3c:	b	443f0 <__assert_fail@plt+0x31c18>
   45d40:	movw	r3, #64944	; 0xfdb0
   45d44:	movt	r3, #65535	; 0xffff
   45d48:	ldrd	r2, [r3, r0]
   45d4c:	cmp	r3, #0
   45d50:	cmpeq	r2, #80	; 0x50
   45d54:	bne	4514c <__assert_fail@plt+0x32974>
   45d58:	ldr	r3, [sp, #136]	; 0x88
   45d5c:	cmp	r3, #0
   45d60:	beq	45db8 <__assert_fail@plt+0x335e0>
   45d64:	movw	r1, #44636	; 0xae5c
   45d68:	mov	r0, #0
   45d6c:	movt	r1, #5
   45d70:	b	45504 <__assert_fail@plt+0x32d2c>
   45d74:	mov	r0, r9
   45d78:	mov	r1, sl
   45d7c:	ldr	r2, [sp, #88]	; 0x58
   45d80:	add	r3, sp, #128	; 0x80
   45d84:	bl	12808 <__assert_fail@plt+0x30>
   45d88:	cmp	r0, #0
   45d8c:	bne	45d20 <__assert_fail@plt+0x33548>
   45d90:	b	43fcc <__assert_fail@plt+0x317f4>
   45d94:	add	r3, sp, #752	; 0x2f0
   45d98:	mov	r4, #1
   45d9c:	ldrd	r0, [r3, r2]
   45da0:	subs	r0, r0, #1
   45da4:	sbc	r1, r1, #0
   45da8:	strd	r0, [r3, r2]
   45dac:	mov	r2, r0
   45db0:	mov	r3, r1
   45db4:	b	45b6c <__assert_fail@plt+0x33394>
   45db8:	mov	r0, r9
   45dbc:	mov	r1, sl
   45dc0:	ldr	r2, [sp, #168]	; 0xa8
   45dc4:	bl	12944 <__assert_fail@plt+0x16c>
   45dc8:	b	44fc0 <__assert_fail@plt+0x327e8>
   45dcc:	mov	r4, #0
   45dd0:	mov	r0, r9
   45dd4:	mov	r1, sl
   45dd8:	add	r2, sp, #184	; 0xb8
   45ddc:	str	r4, [sp]
   45de0:	add	r3, sp, #192	; 0xc0
   45de4:	bl	4335c <__assert_fail@plt+0x30b84>
   45de8:	cmp	r0, r4
   45dec:	beq	43fcc <__assert_fail@plt+0x317f4>
   45df0:	movw	r3, #64928	; 0xfda0
   45df4:	add	r8, sp, #752	; 0x2f0
   45df8:	movt	r3, #65535	; 0xffff
   45dfc:	ldr	r0, [sp, #64]	; 0x40
   45e00:	mov	r5, r4
   45e04:	mov	r6, r4
   45e08:	ldrd	r2, [r3, r8]
   45e0c:	cmp	r3, #0
   45e10:	cmpeq	r2, #99	; 0x63
   45e14:	movne	r1, #8
   45e18:	moveq	r1, #4
   45e1c:	bl	34c50 <__assert_fail@plt+0x22478>
   45e20:	mov	r2, r4
   45e24:	mov	r3, r0
   45e28:	str	r0, [sp, #116]	; 0x74
   45e2c:	b	45a1c <__assert_fail@plt+0x33244>
   45e30:	mov	r0, r9
   45e34:	mov	r1, sl
   45e38:	add	r2, sp, #184	; 0xb8
   45e3c:	bl	43d64 <__assert_fail@plt+0x3158c>
   45e40:	cmp	r0, #0
   45e44:	beq	43fcc <__assert_fail@plt+0x317f4>
   45e48:	mov	r1, sl
   45e4c:	mov	r0, r9
   45e50:	add	r2, sp, #192	; 0xc0
   45e54:	mov	r3, #0
   45e58:	bl	43454 <__assert_fail@plt+0x30c7c>
   45e5c:	cmp	r0, #0
   45e60:	beq	43fcc <__assert_fail@plt+0x317f4>
   45e64:	ldr	r2, [sp, #564]	; 0x234
   45e68:	ldr	r4, [sp, #184]	; 0xb8
   45e6c:	cmp	r2, #0
   45e70:	bne	45e88 <__assert_fail@plt+0x336b0>
   45e74:	mov	r2, #16
   45e78:	mov	r0, r9
   45e7c:	ldr	r1, [sp, #76]	; 0x4c
   45e80:	bl	438c0 <__assert_fail@plt+0x310e8>
   45e84:	mov	r2, r0
   45e88:	add	r5, sp, #752	; 0x2f0
   45e8c:	movw	r3, #64976	; 0xfdd0
   45e90:	movt	r3, #65535	; 0xffff
   45e94:	mov	r1, r4
   45e98:	ldr	r0, [sp, #64]	; 0x40
   45e9c:	mov	r4, #0
   45ea0:	ldrd	r8, [r5, r3]
   45ea4:	mov	r3, #0
   45ea8:	mov	r5, #0
   45eac:	str	r3, [sp, #16]
   45eb0:	strd	r4, [sp]
   45eb4:	mov	r4, r3
   45eb8:	strd	r8, [sp, #8]
   45ebc:	bl	34ed8 <__assert_fail@plt+0x22700>
   45ec0:	mov	r3, r0
   45ec4:	str	r0, [sp, #116]	; 0x74
   45ec8:	mov	r5, r4
   45ecc:	mov	r6, r4
   45ed0:	mov	r2, r4
   45ed4:	b	45a1c <__assert_fail@plt+0x33244>
   45ed8:	mov	r0, r9
   45edc:	mov	r1, sl
   45ee0:	add	r2, sp, #184	; 0xb8
   45ee4:	mov	r3, #0
   45ee8:	bl	43454 <__assert_fail@plt+0x30c7c>
   45eec:	cmp	r0, #0
   45ef0:	beq	43fcc <__assert_fail@plt+0x317f4>
   45ef4:	mov	r0, r9
   45ef8:	mov	r1, sl
   45efc:	add	r2, sp, #152	; 0x98
   45f00:	bl	43d64 <__assert_fail@plt+0x3158c>
   45f04:	cmp	r0, #0
   45f08:	beq	43fcc <__assert_fail@plt+0x317f4>
   45f0c:	mov	r0, r9
   45f10:	mov	r1, sl
   45f14:	add	r2, sp, #192	; 0xc0
   45f18:	mov	r3, #0
   45f1c:	bl	43454 <__assert_fail@plt+0x30c7c>
   45f20:	cmp	r0, #0
   45f24:	beq	43fcc <__assert_fail@plt+0x317f4>
   45f28:	add	r8, sp, #160	; 0xa0
   45f2c:	add	r4, sp, #176	; 0xb0
   45f30:	add	r5, sp, #168	; 0xa8
   45f34:	str	r8, [sp]
   45f38:	mov	r0, r9
   45f3c:	mov	r1, sl
   45f40:	mov	r2, r5
   45f44:	mov	r3, r4
   45f48:	bl	4335c <__assert_fail@plt+0x30b84>
   45f4c:	cmp	r0, #0
   45f50:	beq	43fcc <__assert_fail@plt+0x317f4>
   45f54:	ldr	r6, [sp, #160]	; 0xa0
   45f58:	cmp	r6, #0
   45f5c:	bne	45f34 <__assert_fail@plt+0x3375c>
   45f60:	ldr	r3, [sp, #136]	; 0x88
   45f64:	mov	r2, #1
   45f68:	ldr	r1, [sp, #484]	; 0x1e4
   45f6c:	add	r3, r3, r3, lsl #2
   45f70:	add	r4, r1, r3, lsl #2
   45f74:	ldr	r3, [r4, #4]
   45f78:	str	r2, [r4, #16]
   45f7c:	cmp	r3, #0
   45f80:	bne	46384 <__assert_fail@plt+0x33bac>
   45f84:	ldr	r1, [sp, #152]	; 0x98
   45f88:	mov	r2, #0
   45f8c:	ldr	r0, [sp, #64]	; 0x40
   45f90:	mov	r3, r2
   45f94:	bl	34dbc <__assert_fail@plt+0x225e4>
   45f98:	mov	r4, #0
   45f9c:	str	r0, [sp, #116]	; 0x74
   45fa0:	mov	r3, r0
   45fa4:	mov	r5, r4
   45fa8:	mov	r6, r4
   45fac:	mov	r2, r4
   45fb0:	b	45a1c <__assert_fail@plt+0x33244>
   45fb4:	ldr	r0, [sp, #64]	; 0x40
   45fb8:	mov	r4, #0
   45fbc:	bl	34c18 <__assert_fail@plt+0x22440>
   45fc0:	b	45ec0 <__assert_fail@plt+0x336e8>
   45fc4:	mov	r0, r9
   45fc8:	mov	r1, sl
   45fcc:	add	r2, sp, #116	; 0x74
   45fd0:	bl	43d64 <__assert_fail@plt+0x3158c>
   45fd4:	cmp	r0, #0
   45fd8:	beq	43fcc <__assert_fail@plt+0x317f4>
   45fdc:	mov	r4, #0
   45fe0:	ldr	r3, [sp, #116]	; 0x74
   45fe4:	mov	r5, r4
   45fe8:	mov	r2, r4
   45fec:	mov	r6, #1
   45ff0:	b	45a1c <__assert_fail@plt+0x33244>
   45ff4:	mov	r0, r9
   45ff8:	mov	r1, sl
   45ffc:	add	r2, sp, #168	; 0xa8
   46000:	mov	r3, #0
   46004:	bl	43454 <__assert_fail@plt+0x30c7c>
   46008:	cmp	r0, #0
   4600c:	beq	43fcc <__assert_fail@plt+0x317f4>
   46010:	mov	r0, r9
   46014:	mov	r1, sl
   46018:	add	r2, sp, #176	; 0xb0
   4601c:	mov	r3, #0
   46020:	bl	43454 <__assert_fail@plt+0x30c7c>
   46024:	cmp	r0, #0
   46028:	beq	43fcc <__assert_fail@plt+0x317f4>
   4602c:	mov	r0, r9
   46030:	mov	r1, sl
   46034:	add	r2, sp, #184	; 0xb8
   46038:	mov	r3, #0
   4603c:	bl	43454 <__assert_fail@plt+0x30c7c>
   46040:	cmp	r0, #0
   46044:	beq	43fcc <__assert_fail@plt+0x317f4>
   46048:	mov	r0, r9
   4604c:	mov	r1, sl
   46050:	add	r2, sp, #192	; 0xc0
   46054:	mov	r3, #0
   46058:	bl	43454 <__assert_fail@plt+0x30c7c>
   4605c:	cmp	r0, #0
   46060:	beq	43fcc <__assert_fail@plt+0x317f4>
   46064:	ldr	r2, [sp, #184]	; 0xb8
   46068:	mov	r4, #0
   4606c:	ldr	r3, [sp, #188]	; 0xbc
   46070:	mov	r5, r4
   46074:	ldr	r1, [sp, #192]	; 0xc0
   46078:	mov	r6, r4
   4607c:	orrs	r3, r2, r3
   46080:	ldr	r0, [sp, #64]	; 0x40
   46084:	movne	r2, #0
   46088:	moveq	r2, #1
   4608c:	bl	34c24 <__assert_fail@plt+0x2244c>
   46090:	add	lr, sp, #752	; 0x2f0
   46094:	movw	r2, #64960	; 0xfdc0
   46098:	movt	r2, #65535	; 0xffff
   4609c:	movw	r3, #64952	; 0xfdb8
   460a0:	movt	r3, #65535	; 0xffff
   460a4:	ldrd	r8, [lr, r2]
   460a8:	ldrd	r2, [r3, lr]
   460ac:	strd	r8, [sp]
   460b0:	mov	r1, r0
   460b4:	ldr	r0, [sp, #64]	; 0x40
   460b8:	bl	34e6c <__assert_fail@plt+0x22694>
   460bc:	mov	r2, r4
   460c0:	mov	r3, r0
   460c4:	str	r0, [sp, #116]	; 0x74
   460c8:	b	45a1c <__assert_fail@plt+0x33244>
   460cc:	mov	r0, r9
   460d0:	mov	r1, sl
   460d4:	add	r2, sp, #192	; 0xc0
   460d8:	bl	43d64 <__assert_fail@plt+0x3158c>
   460dc:	cmp	r0, #0
   460e0:	beq	43fcc <__assert_fail@plt+0x317f4>
   460e4:	ldr	r0, [sp, #64]	; 0x40
   460e8:	ldr	r1, [sp, #192]	; 0xc0
   460ec:	bl	34d6c <__assert_fail@plt+0x22594>
   460f0:	b	45f98 <__assert_fail@plt+0x337c0>
   460f4:	mov	r0, r9
   460f8:	mov	r1, sl
   460fc:	add	r2, sp, #176	; 0xb0
   46100:	mov	r3, #0
   46104:	bl	43454 <__assert_fail@plt+0x30c7c>
   46108:	cmp	r0, #0
   4610c:	beq	43fcc <__assert_fail@plt+0x317f4>
   46110:	mov	r0, #40	; 0x28
   46114:	mov	r4, #0
   46118:	add	r5, sp, #152	; 0x98
   4611c:	str	r4, [sp, #80]	; 0x50
   46120:	str	r5, [sp, #104]	; 0x68
   46124:	bl	12358 <xmalloc@plt>
   46128:	ldr	ip, [sp, #80]	; 0x50
   4612c:	movw	r4, #64976	; 0xfdd0
   46130:	add	r8, sp, #160	; 0xa0
   46134:	movt	r4, #65535	; 0xffff
   46138:	add	r5, sp, #168	; 0xa8
   4613c:	str	fp, [sp, #108]	; 0x6c
   46140:	str	ip, [sp, #88]	; 0x58
   46144:	mov	ip, #10
   46148:	str	sl, [sp, #24]
   4614c:	str	ip, [sp, #92]	; 0x5c
   46150:	mov	r6, r0
   46154:	str	r5, [sp]
   46158:	mov	r0, r9
   4615c:	ldr	r1, [sp, #24]
   46160:	mov	r3, r8
   46164:	ldr	r2, [sp, #104]	; 0x68
   46168:	bl	4335c <__assert_fail@plt+0x30b84>
   4616c:	cmp	r0, #0
   46170:	beq	43fcc <__assert_fail@plt+0x317f4>
   46174:	ldr	ip, [sp, #168]	; 0xa8
   46178:	cmp	ip, #0
   4617c:	beq	46324 <__assert_fail@plt+0x33b4c>
   46180:	mov	r0, r9
   46184:	ldr	r1, [sp, #24]
   46188:	add	r2, sp, #184	; 0xb8
   4618c:	mov	r3, #0
   46190:	bl	43454 <__assert_fail@plt+0x30c7c>
   46194:	cmp	r0, #0
   46198:	beq	43fcc <__assert_fail@plt+0x317f4>
   4619c:	mov	r0, r9
   461a0:	ldr	r1, [sp, #24]
   461a4:	add	r2, sp, #192	; 0xc0
   461a8:	mov	r3, #0
   461ac:	bl	43454 <__assert_fail@plt+0x30c7c>
   461b0:	cmp	r0, #0
   461b4:	beq	43fcc <__assert_fail@plt+0x317f4>
   461b8:	add	lr, sp, #752	; 0x2f0
   461bc:	ldrd	r0, [lr, r7]
   461c0:	cmp	r1, #0
   461c4:	cmpeq	r0, #255	; 0xff
   461c8:	bhi	462b0 <__assert_fail@plt+0x33ad8>
   461cc:	cmp	r0, #59	; 0x3b
   461d0:	bhi	46298 <__assert_fail@plt+0x33ac0>
   461d4:	add	r3, lr, r0, lsl #2
   461d8:	ldr	fp, [r3, #-252]	; 0xffffff04
   461dc:	cmp	fp, #0
   461e0:	beq	46298 <__assert_fail@plt+0x33ac0>
   461e4:	ldr	r0, [sp, #196]	; 0xc4
   461e8:	mov	r3, #0
   461ec:	ldr	r1, [sp, #192]	; 0xc0
   461f0:	mov	r2, #0
   461f4:	strd	r2, [sp, #96]	; 0x60
   461f8:	lsl	r3, r0, #3
   461fc:	orr	r3, r3, r1, lsr #29
   46200:	lsl	r1, r1, #3
   46204:	str	r3, [sp, #196]	; 0xc4
   46208:	str	r1, [sp, #192]	; 0xc0
   4620c:	ldr	sl, [sp, #88]	; 0x58
   46210:	ldr	ip, [sp, #92]	; 0x5c
   46214:	add	sl, sl, #1
   46218:	str	sl, [sp, #88]	; 0x58
   4621c:	cmp	sl, ip
   46220:	bcc	4623c <__assert_fail@plt+0x33a64>
   46224:	add	ip, ip, #10
   46228:	mov	r0, r6
   4622c:	str	ip, [sp, #92]	; 0x5c
   46230:	lsl	r1, ip, #2
   46234:	bl	122c8 <xrealloc@plt>
   46238:	mov	r6, r0
   4623c:	ldr	r1, [sp, #160]	; 0xa0
   46240:	ldr	r0, [sp, #152]	; 0x98
   46244:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   46248:	add	r3, sp, #752	; 0x2f0
   4624c:	ldrd	r2, [r3, r4]
   46250:	strd	r2, [sp, #32]
   46254:	ldrd	r2, [sp, #96]	; 0x60
   46258:	strd	r2, [sp, #8]
   4625c:	mov	r2, fp
   46260:	ldrd	sl, [sp, #32]
   46264:	mov	r3, #0
   46268:	str	r3, [sp, #16]
   4626c:	strd	sl, [sp]
   46270:	mov	r1, r0
   46274:	ldr	r0, [sp, #64]	; 0x40
   46278:	bl	3514c <__assert_fail@plt+0x22974>
   4627c:	ldr	fp, [sp, #80]	; 0x50
   46280:	cmp	r0, #0
   46284:	str	r0, [r6, fp]
   46288:	add	fp, fp, #4
   4628c:	str	fp, [sp, #80]	; 0x50
   46290:	bne	46154 <__assert_fail@plt+0x3397c>
   46294:	b	43fcc <__assert_fail@plt+0x317f4>
   46298:	mov	r2, r0
   4629c:	ldr	r1, [sp, #76]	; 0x4c
   462a0:	mov	r0, r9
   462a4:	bl	438c0 <__assert_fail@plt+0x310e8>
   462a8:	mov	fp, r0
   462ac:	b	461e4 <__assert_fail@plt+0x33a0c>
   462b0:	subs	sl, r0, #256	; 0x100
   462b4:	add	ip, sp, #752	; 0x2f0
   462b8:	sbc	fp, r1, #0
   462bc:	strd	sl, [sp, #96]	; 0x60
   462c0:	mov	r0, r9
   462c4:	mov	r2, #1
   462c8:	ldr	r1, [sp, #96]	; 0x60
   462cc:	strd	sl, [ip, r7]
   462d0:	bl	3ccd0 <__assert_fail@plt+0x2a4f8>
   462d4:	cmp	r0, #0
   462d8:	beq	43fcc <__assert_fail@plt+0x317f4>
   462dc:	ldr	r2, [sp, #184]	; 0xb8
   462e0:	ldr	r3, [sp, #496]	; 0x1f0
   462e4:	add	r1, r3, r2, lsl #4
   462e8:	ldr	fp, [r3, r2, lsl #4]
   462ec:	ldr	r3, [r1, #12]
   462f0:	mov	r1, #0
   462f4:	mov	r0, r3
   462f8:	strd	r0, [sp, #96]	; 0x60
   462fc:	orrs	r1, r0, r1
   46300:	bne	4620c <__assert_fail@plt+0x33a34>
   46304:	ldr	r3, [sp, #196]	; 0xc4
   46308:	ldr	r1, [sp, #192]	; 0xc0
   4630c:	lsl	r3, r3, #3
   46310:	orr	r3, r3, r1, lsr #29
   46314:	lsl	r1, r1, #3
   46318:	str	r3, [sp, #196]	; 0xc4
   4631c:	str	r1, [sp, #192]	; 0xc0
   46320:	b	4620c <__assert_fail@plt+0x33a34>
   46324:	add	lr, sp, #752	; 0x2f0
   46328:	movw	r2, #64928	; 0xfda0
   4632c:	movt	r2, #65535	; 0xffff
   46330:	movw	r3, #64960	; 0xfdc0
   46334:	movt	r3, #65535	; 0xffff
   46338:	ldr	r0, [sp, #64]	; 0x40
   4633c:	ldrd	r4, [lr, r2]
   46340:	ldrd	r2, [r3, lr]
   46344:	cmp	r5, #0
   46348:	cmpeq	r4, #83	; 0x53
   4634c:	ldr	r4, [sp, #88]	; 0x58
   46350:	ldr	fp, [sp, #108]	; 0x6c
   46354:	movne	r1, #0
   46358:	moveq	r1, #1
   4635c:	str	ip, [r6, r4, lsl #2]
   46360:	mov	r4, ip
   46364:	str	r6, [sp]
   46368:	bl	34c58 <__assert_fail@plt+0x22480>
   4636c:	mov	r3, r0
   46370:	str	r0, [sp, #116]	; 0x74
   46374:	mov	r5, r4
   46378:	mov	r6, r4
   4637c:	mov	r2, #1
   46380:	b	45a1c <__assert_fail@plt+0x33244>
   46384:	ldr	r0, [sp, #64]	; 0x40
   46388:	ldr	r1, [sp, #152]	; 0x98
   4638c:	bl	35818 <__assert_fail@plt+0x23040>
   46390:	cmp	r0, #12
   46394:	bne	45f84 <__assert_fail@plt+0x337ac>
   46398:	mov	r0, #4
   4639c:	bl	12358 <xmalloc@plt>
   463a0:	mov	r2, r6
   463a4:	str	r0, [r4, #12]
   463a8:	mov	r3, r0
   463ac:	ldr	r1, [sp, #152]	; 0x98
   463b0:	ldr	r0, [sp, #64]	; 0x40
   463b4:	str	r1, [r3]
   463b8:	ldr	r1, [r4, #12]
   463bc:	bl	34bc0 <__assert_fail@plt+0x223e8>
   463c0:	mov	r1, r0
   463c4:	str	r0, [sp, #152]	; 0x98
   463c8:	b	45f88 <__assert_fail@plt+0x337b0>
   463cc:	mov	r0, #40	; 0x28
   463d0:	movw	r6, #64976	; 0xfdd0
   463d4:	bl	12358 <xmalloc@plt>
   463d8:	add	ip, sp, #184	; 0xb8
   463dc:	str	ip, [sp, #80]	; 0x50
   463e0:	movt	r6, #65535	; 0xffff
   463e4:	add	r4, sp, #176	; 0xb0
   463e8:	add	r5, sp, #168	; 0xa8
   463ec:	mov	r8, r0
   463f0:	mov	r0, #40	; 0x28
   463f4:	bl	12358 <xmalloc@plt>
   463f8:	mov	ip, #0
   463fc:	str	ip, [sp, #76]	; 0x4c
   46400:	mov	ip, #10
   46404:	str	r7, [sp, #96]	; 0x60
   46408:	mov	r7, ip
   4640c:	str	fp, [sp, #92]	; 0x5c
   46410:	str	r0, [sp, #88]	; 0x58
   46414:	b	4648c <__assert_fail@plt+0x33cb4>
   46418:	ldr	r3, [sp, #184]	; 0xb8
   4641c:	cmp	r3, #0
   46420:	beq	46694 <__assert_fail@plt+0x33ebc>
   46424:	mov	r0, r9
   46428:	mov	r1, sl
   4642c:	add	r2, sp, #192	; 0xc0
   46430:	mov	r3, #0
   46434:	bl	43454 <__assert_fail@plt+0x30c7c>
   46438:	cmp	r0, #0
   4643c:	beq	43fcc <__assert_fail@plt+0x317f4>
   46440:	ldr	r1, [sp, #176]	; 0xb0
   46444:	cmp	r1, #0
   46448:	beq	4648c <__assert_fail@plt+0x33cb4>
   4644c:	ldr	ip, [sp, #76]	; 0x4c
   46450:	add	fp, ip, #1
   46454:	cmp	fp, r7
   46458:	bcs	46668 <__assert_fail@plt+0x33e90>
   4645c:	ldr	r0, [sp, #168]	; 0xa8
   46460:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   46464:	ldr	ip, [sp, #76]	; 0x4c
   46468:	cmp	r0, #0
   4646c:	str	r0, [r8, ip, lsl #2]
   46470:	beq	43fcc <__assert_fail@plt+0x317f4>
   46474:	add	lr, sp, #752	; 0x2f0
   46478:	str	fp, [sp, #76]	; 0x4c
   4647c:	ldr	fp, [sp, #88]	; 0x58
   46480:	lsl	r1, ip, #3
   46484:	ldrd	r2, [lr, r6]
   46488:	strd	r2, [fp, r1]
   4648c:	ldr	fp, [sp, #80]	; 0x50
   46490:	mov	r0, r9
   46494:	mov	r1, sl
   46498:	mov	r2, r5
   4649c:	mov	r3, r4
   464a0:	str	fp, [sp]
   464a4:	bl	4335c <__assert_fail@plt+0x30b84>
   464a8:	cmp	r0, #0
   464ac:	bne	46418 <__assert_fail@plt+0x33c40>
   464b0:	b	43fcc <__assert_fail@plt+0x317f4>
   464b4:	mov	r0, r9
   464b8:	mov	r1, sl
   464bc:	add	r2, sp, #176	; 0xb0
   464c0:	mov	r3, #0
   464c4:	bl	43454 <__assert_fail@plt+0x30c7c>
   464c8:	cmp	r0, #0
   464cc:	beq	43fcc <__assert_fail@plt+0x317f4>
   464d0:	mov	r0, #40	; 0x28
   464d4:	add	ip, sp, #152	; 0x98
   464d8:	add	r4, sp, #124	; 0x7c
   464dc:	str	ip, [sp, #104]	; 0x68
   464e0:	str	r4, [sp, #88]	; 0x58
   464e4:	bl	12358 <xmalloc@plt>
   464e8:	movw	r5, #64976	; 0xfdd0
   464ec:	movt	r5, #65535	; 0xffff
   464f0:	mov	r6, #0
   464f4:	add	r8, sp, #160	; 0xa0
   464f8:	mov	ip, #10
   464fc:	str	r6, [sp, #76]	; 0x4c
   46500:	str	ip, [sp, #80]	; 0x50
   46504:	str	r8, [sp, #92]	; 0x5c
   46508:	str	r9, [sp, #96]	; 0x60
   4650c:	mov	r4, r0
   46510:	ldr	r8, [sp, #92]	; 0x5c
   46514:	mov	r1, sl
   46518:	ldr	r0, [sp, #96]	; 0x60
   4651c:	ldr	r2, [sp, #88]	; 0x58
   46520:	str	r8, [sp]
   46524:	ldr	r3, [sp, #104]	; 0x68
   46528:	bl	4335c <__assert_fail@plt+0x30b84>
   4652c:	cmp	r0, #0
   46530:	beq	43fcc <__assert_fail@plt+0x317f4>
   46534:	ldr	ip, [sp, #160]	; 0xa0
   46538:	cmp	ip, #0
   4653c:	beq	46624 <__assert_fail@plt+0x33e4c>
   46540:	ldr	r0, [sp, #96]	; 0x60
   46544:	mov	r1, sl
   46548:	add	r2, sp, #168	; 0xa8
   4654c:	bl	43d64 <__assert_fail@plt+0x3158c>
   46550:	cmp	r0, #0
   46554:	beq	43fcc <__assert_fail@plt+0x317f4>
   46558:	ldr	r0, [sp, #96]	; 0x60
   4655c:	mov	r1, sl
   46560:	add	r2, sp, #184	; 0xb8
   46564:	mov	r3, #0
   46568:	bl	43454 <__assert_fail@plt+0x30c7c>
   4656c:	cmp	r0, #0
   46570:	beq	43fcc <__assert_fail@plt+0x317f4>
   46574:	ldr	r0, [sp, #96]	; 0x60
   46578:	mov	r1, sl
   4657c:	add	r2, sp, #192	; 0xc0
   46580:	mov	r3, #0
   46584:	bl	43454 <__assert_fail@plt+0x30c7c>
   46588:	cmp	r0, #0
   4658c:	beq	43fcc <__assert_fail@plt+0x317f4>
   46590:	ldr	r9, [sp, #76]	; 0x4c
   46594:	ldr	ip, [sp, #80]	; 0x50
   46598:	add	r9, r9, #1
   4659c:	str	r9, [sp, #76]	; 0x4c
   465a0:	cmp	r9, ip
   465a4:	bcc	465c0 <__assert_fail@plt+0x33de8>
   465a8:	add	ip, ip, #10
   465ac:	mov	r0, r4
   465b0:	str	ip, [sp, #80]	; 0x50
   465b4:	lsl	r1, ip, #2
   465b8:	bl	122c8 <xrealloc@plt>
   465bc:	mov	r4, r0
   465c0:	ldr	r1, [sp, #152]	; 0x98
   465c4:	add	r9, sp, #752	; 0x2f0
   465c8:	ldr	r0, [sp, #124]	; 0x7c
   465cc:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   465d0:	ldrd	r8, [r9, r7]
   465d4:	ldr	ip, [sp, #168]	; 0xa8
   465d8:	mov	lr, #0
   465dc:	strd	r8, [sp, #48]	; 0x30
   465e0:	add	r9, sp, #752	; 0x2f0
   465e4:	mov	r2, ip
   465e8:	ldrd	r8, [r9, r5]
   465ec:	str	lr, [sp, #16]
   465f0:	strd	r8, [sp, #40]	; 0x28
   465f4:	ldrd	r8, [sp, #48]	; 0x30
   465f8:	strd	r8, [sp]
   465fc:	ldrd	r8, [sp, #40]	; 0x28
   46600:	strd	r8, [sp, #8]
   46604:	mov	r1, r0
   46608:	ldr	r0, [sp, #64]	; 0x40
   4660c:	bl	3514c <__assert_fail@plt+0x22974>
   46610:	cmp	r0, #0
   46614:	str	r0, [r4, r6]
   46618:	add	r6, r6, #4
   4661c:	bne	46510 <__assert_fail@plt+0x33d38>
   46620:	b	43fcc <__assert_fail@plt+0x317f4>
   46624:	ldr	r9, [sp, #76]	; 0x4c
   46628:	movw	r3, #64960	; 0xfdc0
   4662c:	add	sl, sp, #752	; 0x2f0
   46630:	movt	r3, #65535	; 0xffff
   46634:	ldr	r0, [sp, #64]	; 0x40
   46638:	mov	r1, #1
   4663c:	ldrd	r2, [r3, sl]
   46640:	mov	r5, ip
   46644:	str	ip, [r4, r9, lsl #2]
   46648:	str	r4, [sp]
   4664c:	mov	r4, ip
   46650:	bl	34c58 <__assert_fail@plt+0x22480>
   46654:	mov	r6, r4
   46658:	mov	r2, #1
   4665c:	mov	r3, r0
   46660:	str	r0, [sp, #116]	; 0x74
   46664:	b	45a1c <__assert_fail@plt+0x33244>
   46668:	add	r7, r7, #10
   4666c:	mov	r0, r8
   46670:	lsl	r1, r7, #2
   46674:	bl	122c8 <xrealloc@plt>
   46678:	lsl	r1, r7, #3
   4667c:	mov	r8, r0
   46680:	ldr	r0, [sp, #88]	; 0x58
   46684:	bl	122c8 <xrealloc@plt>
   46688:	ldr	r1, [sp, #176]	; 0xb0
   4668c:	str	r0, [sp, #88]	; 0x58
   46690:	b	4645c <__assert_fail@plt+0x33c84>
   46694:	ldr	ip, [sp, #76]	; 0x4c
   46698:	mov	r1, r8
   4669c:	ldr	r2, [sp, #88]	; 0x58
   466a0:	mov	r4, r3
   466a4:	ldr	r0, [sp, #64]	; 0x40
   466a8:	mov	r5, r4
   466ac:	str	r3, [r8, ip, lsl #2]
   466b0:	mov	r6, r4
   466b4:	ldr	fp, [sp, #92]	; 0x5c
   466b8:	ldr	r7, [sp, #96]	; 0x60
   466bc:	bl	34d14 <__assert_fail@plt+0x2253c>
   466c0:	mov	r2, #1
   466c4:	str	r0, [sp, #116]	; 0x74
   466c8:	mov	r3, r0
   466cc:	b	45a1c <__assert_fail@plt+0x33244>
   466d0:	mov	r0, r9
   466d4:	mov	r1, sl
   466d8:	add	r2, sp, #192	; 0xc0
   466dc:	mov	r3, #0
   466e0:	bl	43454 <__assert_fail@plt+0x30c7c>
   466e4:	cmp	r0, #0
   466e8:	beq	43fcc <__assert_fail@plt+0x317f4>
   466ec:	mov	r0, #40	; 0x28
   466f0:	mov	r4, #0
   466f4:	str	r4, [sp, #88]	; 0x58
   466f8:	bl	12358 <xmalloc@plt>
   466fc:	mov	r1, r4
   46700:	mov	r2, #40	; 0x28
   46704:	add	r4, sp, #176	; 0xb0
   46708:	add	r5, sp, #184	; 0xb8
   4670c:	mov	r6, r0
   46710:	bl	12580 <memset@plt>
   46714:	ldr	r8, [sp, #88]	; 0x58
   46718:	mov	r3, r4
   4671c:	str	r5, [sp, #80]	; 0x50
   46720:	add	r5, sp, #168	; 0xa8
   46724:	mov	r4, r6
   46728:	mov	r6, r3
   4672c:	mov	ip, #10
   46730:	str	ip, [sp, #76]	; 0x4c
   46734:	ldr	ip, [sp, #80]	; 0x50
   46738:	mov	r0, r9
   4673c:	mov	r1, sl
   46740:	mov	r2, r5
   46744:	mov	r3, r6
   46748:	str	ip, [sp]
   4674c:	bl	4335c <__assert_fail@plt+0x30b84>
   46750:	cmp	r0, #0
   46754:	beq	43fcc <__assert_fail@plt+0x317f4>
   46758:	ldr	r3, [sp, #184]	; 0xb8
   4675c:	cmp	r3, #0
   46760:	beq	467b4 <__assert_fail@plt+0x33fdc>
   46764:	ldr	ip, [sp, #76]	; 0x4c
   46768:	add	r8, r8, #1
   4676c:	cmp	r8, ip
   46770:	bcc	4678c <__assert_fail@plt+0x33fb4>
   46774:	add	ip, ip, #10
   46778:	mov	r0, r4
   4677c:	str	ip, [sp, #76]	; 0x4c
   46780:	lsl	r1, ip, #2
   46784:	bl	122c8 <xrealloc@plt>
   46788:	mov	r4, r0
   4678c:	ldr	r0, [sp, #168]	; 0xa8
   46790:	ldr	r1, [sp, #176]	; 0xb0
   46794:	bl	3cca0 <__assert_fail@plt+0x2a4c8>
   46798:	ldr	ip, [sp, #88]	; 0x58
   4679c:	cmp	r0, #0
   467a0:	str	r0, [r4, ip]
   467a4:	add	ip, ip, #4
   467a8:	str	ip, [sp, #88]	; 0x58
   467ac:	bne	46734 <__assert_fail@plt+0x33f5c>
   467b0:	b	43fcc <__assert_fail@plt+0x317f4>
   467b4:	str	r3, [r4, r8, lsl #2]
   467b8:	lsl	r0, r8, #3
   467bc:	bl	12358 <xmalloc@plt>
   467c0:	cmp	r8, #0
   467c4:	mov	r6, r4
   467c8:	movne	r5, #0
   467cc:	movne	r4, #0
   467d0:	mov	r2, r0
   467d4:	subne	r3, r0, #8
   467d8:	beq	467f0 <__assert_fail@plt+0x34018>
   467dc:	strd	r4, [r3, #8]!
   467e0:	adds	r4, r4, #1
   467e4:	adc	r5, r5, #0
   467e8:	cmp	r8, r4
   467ec:	bhi	467dc <__assert_fail@plt+0x34004>
   467f0:	mov	r1, r6
   467f4:	ldr	r0, [sp, #64]	; 0x40
   467f8:	mov	r4, #0
   467fc:	bl	34d14 <__assert_fail@plt+0x2253c>
   46800:	b	4636c <__assert_fail@plt+0x33b94>
   46804:	mov	r0, r9
   46808:	mov	r1, sl
   4680c:	add	r2, sp, #176	; 0xb0
   46810:	bl	43d64 <__assert_fail@plt+0x3158c>
   46814:	cmp	r0, #0
   46818:	beq	43fcc <__assert_fail@plt+0x317f4>
   4681c:	mov	r0, r9
   46820:	mov	r1, sl
   46824:	add	r2, sp, #184	; 0xb8
   46828:	mov	r3, #0
   4682c:	bl	43454 <__assert_fail@plt+0x30c7c>
   46830:	cmp	r0, #0
   46834:	beq	43fcc <__assert_fail@plt+0x317f4>
   46838:	mov	r1, sl
   4683c:	mov	r0, r9
   46840:	add	r2, sp, #192	; 0xc0
   46844:	mov	r3, #0
   46848:	bl	43454 <__assert_fail@plt+0x30c7c>
   4684c:	cmp	r0, #0
   46850:	beq	43fcc <__assert_fail@plt+0x317f4>
   46854:	ldr	r2, [sp, #564]	; 0x234
   46858:	ldr	r6, [sp, #176]	; 0xb0
   4685c:	cmp	r2, #0
   46860:	bne	46878 <__assert_fail@plt+0x340a0>
   46864:	mov	r2, #16
   46868:	mov	r0, r9
   4686c:	ldr	r1, [sp, #76]	; 0x4c
   46870:	bl	438c0 <__assert_fail@plt+0x310e8>
   46874:	mov	r2, r0
   46878:	add	lr, sp, #752	; 0x2f0
   4687c:	movw	r3, #64976	; 0xfdd0
   46880:	movt	r3, #65535	; 0xffff
   46884:	mov	r1, r6
   46888:	ldrd	r4, [lr, r7]
   4688c:	ldrd	r8, [lr, r3]
   46890:	mov	r3, #0
   46894:	ldr	r0, [sp, #64]	; 0x40
   46898:	strd	r4, [sp]
   4689c:	mov	r4, r3
   468a0:	str	r3, [sp, #16]
   468a4:	strd	r8, [sp, #8]
   468a8:	bl	34ed8 <__assert_fail@plt+0x22700>
   468ac:	b	45ec0 <__assert_fail@plt+0x336e8>
   468b0:	mov	r0, r9
   468b4:	mov	r1, r4
   468b8:	bl	438c0 <__assert_fail@plt+0x310e8>
   468bc:	subs	r8, r0, #0
   468c0:	beq	43fcc <__assert_fail@plt+0x317f4>
   468c4:	ldr	r0, [sp, #124]	; 0x7c
   468c8:	mvn	r4, #0
   468cc:	ldr	r1, [sp, #128]	; 0x80
   468d0:	b	44cdc <__assert_fail@plt+0x32504>
   468d4:	subs	r0, r2, #256	; 0x100
   468d8:	add	sl, sp, #752	; 0x2f0
   468dc:	sbc	r1, r3, #0
   468e0:	strd	r0, [sp, #64]	; 0x40
   468e4:	mov	r0, r9
   468e8:	ldrd	r8, [sp, #64]	; 0x40
   468ec:	mov	r2, #1
   468f0:	ldr	r1, [sp, #64]	; 0x40
   468f4:	strd	r8, [sl, r7]
   468f8:	bl	3ccd0 <__assert_fail@plt+0x2a4f8>
   468fc:	cmp	r0, #0
   46900:	beq	43fcc <__assert_fail@plt+0x317f4>
   46904:	ldr	r4, [sp, #184]	; 0xb8
   46908:	ldr	r3, [sp, #496]	; 0x1f0
   4690c:	ldr	r0, [sp, #200]	; 0xc8
   46910:	ldr	r8, [r3, r4, lsl #4]
   46914:	mov	r1, r8
   46918:	bl	35818 <__assert_fail@plt+0x23040>
   4691c:	cmp	r0, #13
   46920:	bne	46934 <__assert_fail@plt+0x3415c>
   46924:	mov	r1, r8
   46928:	ldr	r0, [sp, #200]	; 0xc8
   4692c:	bl	358f8 <__assert_fail@plt+0x23120>
   46930:	mov	r8, r0
   46934:	ldr	r0, [sp, #124]	; 0x7c
   46938:	ldr	r1, [sp, #128]	; 0x80
   4693c:	b	44cdc <__assert_fail@plt+0x32504>
   46940:	mov	r6, r0
   46944:	mov	r3, #1
   46948:	mvn	r4, #0
   4694c:	b	449a8 <__assert_fail@plt+0x321d0>
   46950:	movw	r3, #64976	; 0xfdd0
   46954:	add	r5, sp, #752	; 0x2f0
   46958:	movt	r3, #65535	; 0xffff
   4695c:	ldr	r0, [sp, #200]	; 0xc8
   46960:	ldrd	r2, [r3, r5]
   46964:	bl	346d0 <__assert_fail@plt+0x21ef8>
   46968:	cmp	r0, #0
   4696c:	beq	43fcc <__assert_fail@plt+0x317f4>
   46970:	mov	r3, sl
   46974:	mvn	r4, #0
   46978:	mov	r6, sl
   4697c:	mov	r5, #134	; 0x86
   46980:	b	449a8 <__assert_fail@plt+0x321d0>
   46984:	mov	r0, r9
   46988:	mov	r1, sl
   4698c:	add	r2, sp, #192	; 0xc0
   46990:	mov	r3, #0
   46994:	bl	43454 <__assert_fail@plt+0x30c7c>
   46998:	cmp	r0, #0
   4699c:	beq	43fcc <__assert_fail@plt+0x317f4>
   469a0:	mov	r2, #0
   469a4:	ldr	r0, [sp, #64]	; 0x40
   469a8:	ldr	r1, [sp, #192]	; 0xc0
   469ac:	mov	r4, r2
   469b0:	bl	34c24 <__assert_fail@plt+0x2244c>
   469b4:	b	45ec0 <__assert_fail@plt+0x336e8>
   469b8:	movw	r1, #44448	; 0xada0
   469bc:	movt	r1, #5
   469c0:	mov	r0, #0
   469c4:	mov	r2, #5
   469c8:	bl	12298 <dcgettext@plt>
   469cc:	ldr	r2, [sp, #76]	; 0x4c
   469d0:	add	r1, sp, #208	; 0xd0
   469d4:	mov	r3, r0
   469d8:	ldr	r0, [sp, #204]	; 0xcc
   469dc:	bl	3ce84 <__assert_fail@plt+0x2a6ac>
   469e0:	b	43fcc <__assert_fail@plt+0x317f4>
   469e4:	mov	r0, r9
   469e8:	mov	r1, r4
   469ec:	bl	438c0 <__assert_fail@plt+0x310e8>
   469f0:	subs	r8, r0, #0
   469f4:	bne	4495c <__assert_fail@plt+0x32184>
   469f8:	b	43fcc <__assert_fail@plt+0x317f4>
   469fc:	subs	r0, r2, #256	; 0x100
   46a00:	add	sl, sp, #752	; 0x2f0
   46a04:	sbc	r1, r3, #0
   46a08:	strd	r0, [sp, #64]	; 0x40
   46a0c:	mov	r0, r9
   46a10:	ldrd	r8, [sp, #64]	; 0x40
   46a14:	mov	r2, #1
   46a18:	ldr	r1, [sp, #64]	; 0x40
   46a1c:	strd	r8, [sl, r7]
   46a20:	bl	3ccd0 <__assert_fail@plt+0x2a4f8>
   46a24:	cmp	r0, #0
   46a28:	beq	43fcc <__assert_fail@plt+0x317f4>
   46a2c:	ldr	r4, [sp, #184]	; 0xb8
   46a30:	ldr	r3, [sp, #496]	; 0x1f0
   46a34:	ldr	r0, [sp, #200]	; 0xc8
   46a38:	ldr	r8, [r3, r4, lsl #4]
   46a3c:	mov	r1, r8
   46a40:	bl	35818 <__assert_fail@plt+0x23040>
   46a44:	cmp	r0, #13
   46a48:	bne	44960 <__assert_fail@plt+0x32188>
   46a4c:	mov	r1, r8
   46a50:	ldr	r0, [sp, #200]	; 0xc8
   46a54:	bl	358f8 <__assert_fail@plt+0x23120>
   46a58:	mov	r8, r0
   46a5c:	b	44960 <__assert_fail@plt+0x32188>
   46a60:	mov	r0, r9
   46a64:	mov	r1, sl
   46a68:	add	r2, sp, #192	; 0xc0
   46a6c:	mov	r3, #0
   46a70:	bl	43454 <__assert_fail@plt+0x30c7c>
   46a74:	cmp	r0, #0
   46a78:	beq	43fcc <__assert_fail@plt+0x317f4>
   46a7c:	mov	r0, r9
   46a80:	mov	r1, sl
   46a84:	add	r2, sp, #184	; 0xb8
   46a88:	bl	43d64 <__assert_fail@plt+0x3158c>
   46a8c:	cmp	r0, #0
   46a90:	beq	43fcc <__assert_fail@plt+0x317f4>
   46a94:	mov	r2, #0
   46a98:	ldr	r0, [sp, #64]	; 0x40
   46a9c:	ldr	r1, [sp, #184]	; 0xb8
   46aa0:	mov	r4, r2
   46aa4:	bl	34f60 <__assert_fail@plt+0x22788>
   46aa8:	b	45ec0 <__assert_fail@plt+0x336e8>
   46aac:	mov	r0, r9
   46ab0:	mov	r1, sl
   46ab4:	add	r2, sp, #192	; 0xc0
   46ab8:	mov	r3, #0
   46abc:	bl	43454 <__assert_fail@plt+0x30c7c>
   46ac0:	cmp	r0, #0
   46ac4:	beq	43fcc <__assert_fail@plt+0x317f4>
   46ac8:	mov	r0, r9
   46acc:	mov	r1, sl
   46ad0:	add	r2, sp, #184	; 0xb8
   46ad4:	bl	43d64 <__assert_fail@plt+0x3158c>
   46ad8:	cmp	r0, #0
   46adc:	beq	43fcc <__assert_fail@plt+0x317f4>
   46ae0:	movw	r3, #64976	; 0xfdd0
   46ae4:	add	r9, sp, #752	; 0x2f0
   46ae8:	movt	r3, #65535	; 0xffff
   46aec:	ldrd	r2, [r3, r9]
   46af0:	cmp	r3, #0
   46af4:	cmpeq	r2, #1
   46af8:	beq	46c18 <__assert_fail@plt+0x34440>
   46afc:	cmp	r3, #0
   46b00:	cmpeq	r2, #2
   46b04:	beq	46bf0 <__assert_fail@plt+0x34418>
   46b08:	movw	r1, #44524	; 0xadec
   46b0c:	mov	r7, r8
   46b10:	mov	r0, #0
   46b14:	movt	r1, #5
   46b18:	b	444a4 <__assert_fail@plt+0x31ccc>
   46b1c:	mov	r0, r9
   46b20:	mov	r1, sl
   46b24:	add	r2, sp, #176	; 0xb0
   46b28:	mov	r3, #0
   46b2c:	bl	43454 <__assert_fail@plt+0x30c7c>
   46b30:	cmp	r0, #0
   46b34:	beq	43fcc <__assert_fail@plt+0x317f4>
   46b38:	mov	r0, r9
   46b3c:	mov	r1, sl
   46b40:	add	r2, sp, #184	; 0xb8
   46b44:	mov	r3, #0
   46b48:	bl	43454 <__assert_fail@plt+0x30c7c>
   46b4c:	cmp	r0, #0
   46b50:	beq	43fcc <__assert_fail@plt+0x317f4>
   46b54:	mov	r0, r9
   46b58:	mov	r1, sl
   46b5c:	add	r2, sp, #192	; 0xc0
   46b60:	add	r3, sp, #168	; 0xa8
   46b64:	ldr	r4, [sp, #112]	; 0x70
   46b68:	bl	43454 <__assert_fail@plt+0x30c7c>
   46b6c:	cmp	r0, #0
   46b70:	beq	43fcc <__assert_fail@plt+0x317f4>
   46b74:	ldr	r3, [sp, #168]	; 0xa8
   46b78:	cmp	r3, #0
   46b7c:	bne	46bcc <__assert_fail@plt+0x343f4>
   46b80:	ldr	r2, [sp, #176]	; 0xb0
   46b84:	mov	r1, #4
   46b88:	ldr	r3, [sp, #180]	; 0xb4
   46b8c:	ldr	r0, [sp, #64]	; 0x40
   46b90:	orrs	r3, r2, r3
   46b94:	movne	r2, #0
   46b98:	moveq	r2, #1
   46b9c:	bl	34c24 <__assert_fail@plt+0x2244c>
   46ba0:	mov	r3, r0
   46ba4:	str	r0, [sp, #116]	; 0x74
   46ba8:	mov	r5, #0
   46bac:	ldr	r4, [sp, #184]	; 0xb8
   46bb0:	mov	r6, r5
   46bb4:	mov	r2, r5
   46bb8:	b	45a1c <__assert_fail@plt+0x33244>
   46bbc:	movw	r1, #44492	; 0xadcc
   46bc0:	mov	r0, #0
   46bc4:	movt	r1, #5
   46bc8:	b	469c4 <__assert_fail@plt+0x341ec>
   46bcc:	mov	r0, r9
   46bd0:	mov	r1, sl
   46bd4:	add	r2, sp, #116	; 0x74
   46bd8:	str	r4, [sp, #112]	; 0x70
   46bdc:	bl	43d64 <__assert_fail@plt+0x3158c>
   46be0:	cmp	r0, #0
   46be4:	beq	43fcc <__assert_fail@plt+0x317f4>
   46be8:	ldr	r3, [sp, #116]	; 0x74
   46bec:	b	46ba8 <__assert_fail@plt+0x343d0>
   46bf0:	ldr	r0, [sp, #64]	; 0x40
   46bf4:	ldr	r1, [sp, #184]	; 0xb8
   46bf8:	bl	350dc <__assert_fail@plt+0x22904>
   46bfc:	mov	r3, r0
   46c00:	str	r0, [sp, #116]	; 0x74
   46c04:	mov	r4, #0
   46c08:	mov	r5, r4
   46c0c:	mov	r6, r4
   46c10:	mov	r2, r4
   46c14:	b	45a1c <__assert_fail@plt+0x33244>
   46c18:	ldr	r0, [sp, #64]	; 0x40
   46c1c:	ldr	r1, [sp, #184]	; 0xb8
   46c20:	bl	350b0 <__assert_fail@plt+0x228d8>
   46c24:	mov	r3, r0
   46c28:	str	r0, [sp, #116]	; 0x74
   46c2c:	b	46c04 <__assert_fail@plt+0x3442c>
   46c30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   46c34:	movw	r6, #65176	; 0xfe98
   46c38:	movt	r6, #6
   46c3c:	sub	sp, sp, #264	; 0x108
   46c40:	mov	r7, r0
   46c44:	mov	r2, #240	; 0xf0
   46c48:	ldr	r3, [r6]
   46c4c:	mov	r4, r1
   46c50:	add	r0, sp, #16
   46c54:	mov	r1, #0
   46c58:	str	r3, [sp, #260]	; 0x104
   46c5c:	bl	12580 <memset@plt>
   46c60:	movw	r1, #52728	; 0xcdf8
   46c64:	add	r0, sp, #112	; 0x70
   46c68:	movt	r1, #3
   46c6c:	mov	r2, #16
   46c70:	mov	ip, #256	; 0x100
   46c74:	mov	r3, #32
   46c78:	str	r7, [sp, #16]
   46c7c:	str	ip, [sp, #104]	; 0x68
   46c80:	str	r3, [sp, #108]	; 0x6c
   46c84:	bl	12730 <bfd_hash_table_init@plt>
   46c88:	cmp	r0, #0
   46c8c:	bne	46cac <__assert_fail@plt+0x344d4>
   46c90:	mov	r0, #0
   46c94:	ldr	r2, [sp, #260]	; 0x104
   46c98:	ldr	r3, [r6]
   46c9c:	cmp	r2, r3
   46ca0:	bne	47074 <__assert_fail@plt+0x3489c>
   46ca4:	add	sp, sp, #264	; 0x108
   46ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   46cac:	movw	r1, #52728	; 0xcdf8
   46cb0:	mov	r2, #16
   46cb4:	movt	r1, #3
   46cb8:	add	r0, sp, #140	; 0x8c
   46cbc:	bl	12730 <bfd_hash_table_init@plt>
   46cc0:	cmp	r0, #0
   46cc4:	beq	46c90 <__assert_fail@plt+0x344b8>
   46cc8:	mov	r0, r4
   46ccc:	ldr	r1, [pc, #1140]	; 47148 <__assert_fail@plt+0x34970>
   46cd0:	add	r2, sp, #16
   46cd4:	mov	r3, #0
   46cd8:	str	r3, [sp, #40]	; 0x28
   46cdc:	str	r3, [sp, #44]	; 0x2c
   46ce0:	str	r3, [sp, #48]	; 0x30
   46ce4:	str	r3, [sp, #52]	; 0x34
   46ce8:	str	r3, [sp, #56]	; 0x38
   46cec:	str	r3, [sp, #60]	; 0x3c
   46cf0:	str	r3, [sp, #64]	; 0x40
   46cf4:	str	r3, [sp, #68]	; 0x44
   46cf8:	str	r3, [sp, #72]	; 0x48
   46cfc:	str	r3, [sp, #76]	; 0x4c
   46d00:	str	r3, [sp, #80]	; 0x50
   46d04:	str	r3, [sp, #84]	; 0x54
   46d08:	str	r3, [sp, #196]	; 0xc4
   46d0c:	str	r3, [sp, #200]	; 0xc8
   46d10:	str	r3, [sp, #204]	; 0xcc
   46d14:	str	r3, [sp, #208]	; 0xd0
   46d18:	bl	35af0 <__assert_fail@plt+0x23318>
   46d1c:	cmp	r0, #0
   46d20:	beq	46c90 <__assert_fail@plt+0x344b8>
   46d24:	ldr	r3, [sp, #32]
   46d28:	cmp	r3, #0
   46d2c:	beq	46d40 <__assert_fail@plt+0x34568>
   46d30:	add	r0, sp, #16
   46d34:	bl	3fa64 <__assert_fail@plt+0x2d28c>
   46d38:	cmp	r0, #0
   46d3c:	beq	46c90 <__assert_fail@plt+0x344b8>
   46d40:	add	r0, sp, #140	; 0x8c
   46d44:	movw	r1, #60144	; 0xeaf0
   46d48:	add	r2, sp, #16
   46d4c:	movt	r1, #3
   46d50:	mov	r3, #0
   46d54:	str	r3, [sp, #20]
   46d58:	bl	121d8 <bfd_hash_traverse@plt>
   46d5c:	ldr	r3, [sp, #20]
   46d60:	cmp	r3, #0
   46d64:	bne	46c90 <__assert_fail@plt+0x344b8>
   46d68:	ldr	r3, [sp, #40]	; 0x28
   46d6c:	cmp	r3, #0
   46d70:	beq	46ee4 <__assert_fail@plt+0x3470c>
   46d74:	ldr	r3, [sp, #44]	; 0x2c
   46d78:	movw	r1, #489	; 0x1e9
   46d7c:	add	r4, sp, #40	; 0x28
   46d80:	str	r4, [sp, #24]
   46d84:	ldr	r2, [r3, #4]
   46d88:	str	r3, [sp, #28]
   46d8c:	cmp	r2, r1
   46d90:	bhi	47020 <__assert_fail@plt+0x34848>
   46d94:	add	r1, r3, r2
   46d98:	mvn	r0, #15
   46d9c:	add	r2, r2, #1
   46da0:	str	r2, [r3, #4]
   46da4:	strb	r0, [r1, #8]
   46da8:	add	r0, sp, #16
   46dac:	ldr	r2, [sp, #108]	; 0x6c
   46db0:	mov	r3, #0
   46db4:	bl	3d800 <__assert_fail@plt+0x2b028>
   46db8:	cmp	r0, #0
   46dbc:	beq	46c90 <__assert_fail@plt+0x344b8>
   46dc0:	movw	r1, #11856	; 0x2e50
   46dc4:	add	r0, sp, #16
   46dc8:	movt	r1, #5
   46dcc:	bl	3d610 <__assert_fail@plt+0x2ae38>
   46dd0:	cmp	r0, #0
   46dd4:	beq	46c90 <__assert_fail@plt+0x344b8>
   46dd8:	ldr	r3, [sp, #28]
   46ddc:	movw	r1, #489	; 0x1e9
   46de0:	ldr	r2, [r3, #4]
   46de4:	cmp	r2, r1
   46de8:	bhi	4703c <__assert_fail@plt+0x34864>
   46dec:	add	r1, r3, r2
   46df0:	mvn	r0, #13
   46df4:	add	r2, r2, #1
   46df8:	str	r2, [r3, #4]
   46dfc:	strb	r0, [r1, #8]
   46e00:	add	r0, sp, #16
   46e04:	ldr	r2, [sp, #104]	; 0x68
   46e08:	mov	r3, #0
   46e0c:	bl	3d800 <__assert_fail@plt+0x2b028>
   46e10:	cmp	r0, #0
   46e14:	beq	46c90 <__assert_fail@plt+0x344b8>
   46e18:	ldr	r3, [sp, #28]
   46e1c:	movw	r1, #489	; 0x1e9
   46e20:	ldr	r2, [r3, #4]
   46e24:	cmp	r2, r1
   46e28:	bhi	47058 <__assert_fail@plt+0x34880>
   46e2c:	add	r1, r3, r2
   46e30:	mvn	r0, #49	; 0x31
   46e34:	add	r2, r2, #1
   46e38:	str	r2, [r3, #4]
   46e3c:	strb	r0, [r1, #8]
   46e40:	add	r0, sp, #16
   46e44:	ldr	r2, [sp, #108]	; 0x6c
   46e48:	mov	r3, #0
   46e4c:	bl	3d800 <__assert_fail@plt+0x2b028>
   46e50:	cmp	r0, #0
   46e54:	beq	46c90 <__assert_fail@plt+0x344b8>
   46e58:	add	r0, sp, #16
   46e5c:	mov	r2, #80	; 0x50
   46e60:	mov	r3, #0
   46e64:	bl	3d800 <__assert_fail@plt+0x2b028>
   46e68:	cmp	r0, #0
   46e6c:	beq	46c90 <__assert_fail@plt+0x344b8>
   46e70:	add	r0, sp, #16
   46e74:	mov	r2, #33	; 0x21
   46e78:	mov	r3, #0
   46e7c:	bl	3d800 <__assert_fail@plt+0x2b028>
   46e80:	cmp	r0, #0
   46e84:	beq	46c90 <__assert_fail@plt+0x344b8>
   46e88:	ldr	r3, [sp, #28]
   46e8c:	movw	r1, #489	; 0x1e9
   46e90:	ldr	r2, [r3, #4]
   46e94:	cmp	r2, r1
   46e98:	bhi	470ac <__assert_fail@plt+0x348d4>
   46e9c:	add	r1, r3, r2
   46ea0:	mvn	r0, #6
   46ea4:	add	r2, r2, #1
   46ea8:	str	r2, [r3, #4]
   46eac:	strb	r0, [r1, #8]
   46eb0:	ldr	r3, [sp, #48]	; 0x30
   46eb4:	cmp	r3, #0
   46eb8:	beq	46ed8 <__assert_fail@plt+0x34700>
   46ebc:	ldr	r2, [sp, #40]	; 0x28
   46ec0:	cmp	r2, #0
   46ec4:	streq	r3, [sp, #40]	; 0x28
   46ec8:	ldrne	r2, [sp, #44]	; 0x2c
   46ecc:	strne	r3, [r2]
   46ed0:	ldr	r3, [sp, #52]	; 0x34
   46ed4:	str	r3, [sp, #44]	; 0x2c
   46ed8:	ldm	r4, {r0, r1}
   46edc:	add	r3, sp, #48	; 0x30
   46ee0:	stm	r3, {r0, r1}
   46ee4:	movw	r1, #12632	; 0x3158
   46ee8:	mov	r0, r7
   46eec:	movt	r1, #4
   46ef0:	add	r2, sp, #16
   46ef4:	mov	r3, #0
   46ef8:	str	r3, [sp, #20]
   46efc:	str	r3, [sp, #64]	; 0x40
   46f00:	str	r3, [sp, #68]	; 0x44
   46f04:	bl	12754 <bfd_map_over_sections@plt>
   46f08:	ldr	r3, [sp, #20]
   46f0c:	cmp	r3, #0
   46f10:	bne	46c90 <__assert_fail@plt+0x344b8>
   46f14:	ldr	r3, [sp, #64]	; 0x40
   46f18:	cmp	r3, #0
   46f1c:	beq	46f70 <__assert_fail@plt+0x34798>
   46f20:	ldr	r2, [sp, #68]	; 0x44
   46f24:	add	r1, sp, #64	; 0x40
   46f28:	str	r1, [sp, #24]
   46f2c:	movw	r0, #489	; 0x1e9
   46f30:	ldr	r1, [r2, #4]
   46f34:	str	r2, [sp, #28]
   46f38:	cmp	r1, r0
   46f3c:	bhi	47078 <__assert_fail@plt+0x348a0>
   46f40:	add	r0, r2, r1
   46f44:	mvn	ip, #6
   46f48:	add	r1, r1, #1
   46f4c:	str	r1, [r2, #4]
   46f50:	strb	ip, [r0, #8]
   46f54:	ldr	r2, [sp, #48]	; 0x30
   46f58:	cmp	r2, #0
   46f5c:	streq	r3, [sp, #48]	; 0x30
   46f60:	ldrne	r2, [sp, #52]	; 0x34
   46f64:	strne	r3, [r2]
   46f68:	ldr	r3, [sp, #68]	; 0x44
   46f6c:	str	r3, [sp, #52]	; 0x34
   46f70:	ldr	r3, [sp, #48]	; 0x30
   46f74:	cmp	r3, #0
   46f78:	moveq	r0, #1
   46f7c:	beq	46c94 <__assert_fail@plt+0x344bc>
   46f80:	movw	r1, #38136	; 0x94f8
   46f84:	mov	r0, r7
   46f88:	movt	r1, #5
   46f8c:	mov	r2, #8448	; 0x2100
   46f90:	bl	1219c <bfd_make_section_with_flags@plt>
   46f94:	subs	r9, r0, #0
   46f98:	beq	470a0 <__assert_fail@plt+0x348c8>
   46f9c:	ldr	r1, [sp, #48]	; 0x30
   46fa0:	mov	r2, #0
   46fa4:	mov	r3, #0
   46fa8:	cmp	r1, #0
   46fac:	beq	46fc8 <__assert_fail@plt+0x347f0>
   46fb0:	ldr	r0, [r1, #4]
   46fb4:	ldr	r1, [r1]
   46fb8:	adds	r2, r2, r0
   46fbc:	adc	r3, r3, #0
   46fc0:	cmp	r1, #0
   46fc4:	bne	46fb0 <__assert_fail@plt+0x347d8>
   46fc8:	mov	r0, r7
   46fcc:	mov	r1, r9
   46fd0:	bl	12550 <bfd_set_section_size@plt>
   46fd4:	cmp	r0, #0
   46fd8:	bne	470c8 <__assert_fail@plt+0x348f0>
   46fdc:	movw	r4, #44712	; 0xaea8
   46fe0:	movt	r4, #5
   46fe4:	movw	r2, #168	; 0xa8
   46fe8:	movt	r2, #7
   46fec:	ldr	r7, [r7]
   46ff0:	ldr	r5, [r2]
   46ff4:	bl	12310 <bfd_get_error@plt>
   46ff8:	bl	126e8 <bfd_errmsg@plt>
   46ffc:	str	r4, [sp]
   47000:	mov	r3, r7
   47004:	movw	r2, #38028	; 0x948c
   47008:	mov	r1, #1
   4700c:	movt	r2, #5
   47010:	str	r0, [sp, #4]
   47014:	mov	r0, r5
   47018:	bl	125d4 <__fprintf_chk@plt>
   4701c:	b	46c90 <__assert_fail@plt+0x344b8>
   47020:	add	r0, sp, #24
   47024:	add	r1, sp, #28
   47028:	mov	r2, #240	; 0xf0
   4702c:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   47030:	cmp	r0, #0
   47034:	bne	46da8 <__assert_fail@plt+0x345d0>
   47038:	b	46c90 <__assert_fail@plt+0x344b8>
   4703c:	add	r0, sp, #24
   47040:	add	r1, sp, #28
   47044:	mov	r2, #242	; 0xf2
   47048:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   4704c:	cmp	r0, #0
   47050:	bne	46e00 <__assert_fail@plt+0x34628>
   47054:	b	46c90 <__assert_fail@plt+0x344b8>
   47058:	add	r0, sp, #24
   4705c:	add	r1, sp, #28
   47060:	mov	r2, #206	; 0xce
   47064:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   47068:	cmp	r0, #0
   4706c:	bne	46e40 <__assert_fail@plt+0x34668>
   47070:	b	46c90 <__assert_fail@plt+0x344b8>
   47074:	bl	122b0 <__stack_chk_fail@plt>
   47078:	add	r0, sp, #24
   4707c:	add	r1, sp, #28
   47080:	mov	r2, #249	; 0xf9
   47084:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   47088:	cmp	r0, #0
   4708c:	beq	46c90 <__assert_fail@plt+0x344b8>
   47090:	ldr	r3, [sp, #64]	; 0x40
   47094:	cmp	r3, #0
   47098:	beq	46f70 <__assert_fail@plt+0x34798>
   4709c:	b	46f54 <__assert_fail@plt+0x3477c>
   470a0:	movw	r4, #44736	; 0xaec0
   470a4:	movt	r4, #5
   470a8:	b	46fe4 <__assert_fail@plt+0x3480c>
   470ac:	add	r0, sp, #24
   470b0:	add	r1, sp, #28
   470b4:	mov	r2, #249	; 0xf9
   470b8:	bl	3d4f8 <__assert_fail@plt+0x2ad20>
   470bc:	cmp	r0, #0
   470c0:	bne	46eb0 <__assert_fail@plt+0x346d8>
   470c4:	b	46c90 <__assert_fail@plt+0x344b8>
   470c8:	ldr	r8, [sp, #48]	; 0x30
   470cc:	cmp	r8, #0
   470d0:	beq	47130 <__assert_fail@plt+0x34958>
   470d4:	mov	r4, #0
   470d8:	mov	r5, #0
   470dc:	mov	sl, #0
   470e0:	b	470fc <__assert_fail@plt+0x34924>
   470e4:	ldr	r3, [r8, #4]
   470e8:	ldr	r8, [r8]
   470ec:	adds	r4, r4, r3
   470f0:	adc	r5, r5, #0
   470f4:	cmp	r8, #0
   470f8:	beq	47130 <__assert_fail@plt+0x34958>
   470fc:	strd	r4, [sp]
   47100:	mov	r0, r7
   47104:	ldr	r3, [r8, #4]
   47108:	mov	r1, r9
   4710c:	str	sl, [sp, #12]
   47110:	add	r2, r8, #8
   47114:	str	r3, [sp, #8]
   47118:	bl	122f8 <bfd_set_section_contents@plt>
   4711c:	cmp	r0, #0
   47120:	bne	470e4 <__assert_fail@plt+0x3490c>
   47124:	movw	r4, #44756	; 0xaed4
   47128:	movt	r4, #5
   4712c:	b	46fe4 <__assert_fail@plt+0x3480c>
   47130:	add	r0, sp, #112	; 0x70
   47134:	bl	122d4 <bfd_hash_table_free@plt>
   47138:	add	r0, sp, #140	; 0x8c
   4713c:	bl	122d4 <bfd_hash_table_free@plt>
   47140:	mov	r0, #1
   47144:	b	46c94 <__assert_fail@plt+0x344bc>
   47148:	andeq	sl, r5, r4, asr r2
   4714c:	push	{r3, r4, r5, r6, r7, lr}
   47150:	movw	r3, #16015	; 0x3e8f
   47154:	cmp	r1, r3
   47158:	mov	r7, r1
   4715c:	mov	r6, r0
   47160:	bgt	471e8 <__assert_fail@plt+0x34a10>
   47164:	cmp	r1, #15
   47168:	movgt	r5, r1
   4716c:	ble	47190 <__assert_fail@plt+0x349b8>
   47170:	ldr	r4, [r6]
   47174:	cmp	r4, #0
   47178:	beq	471a8 <__assert_fail@plt+0x349d0>
   4717c:	sub	r5, r5, #16
   47180:	mov	r6, r4
   47184:	cmp	r5, #15
   47188:	bgt	47170 <__assert_fail@plt+0x34998>
   4718c:	and	r7, r7, #15
   47190:	ldr	r4, [r6]
   47194:	cmp	r4, #0
   47198:	beq	471c8 <__assert_fail@plt+0x349f0>
   4719c:	add	r0, r4, r7, lsl #2
   471a0:	add	r0, r0, #4
   471a4:	pop	{r3, r4, r5, r6, r7, pc}
   471a8:	mov	r0, #68	; 0x44
   471ac:	bl	12358 <xmalloc@plt>
   471b0:	mov	r1, r4
   471b4:	mov	r2, #68	; 0x44
   471b8:	str	r0, [r6]
   471bc:	bl	12580 <memset@plt>
   471c0:	ldr	r4, [r6]
   471c4:	b	4717c <__assert_fail@plt+0x349a4>
   471c8:	mov	r0, #68	; 0x44
   471cc:	bl	12358 <xmalloc@plt>
   471d0:	mov	r1, r4
   471d4:	mov	r2, #68	; 0x44
   471d8:	str	r0, [r6]
   471dc:	bl	12580 <memset@plt>
   471e0:	ldr	r4, [r6]
   471e4:	b	4719c <__assert_fail@plt+0x349c4>
   471e8:	movw	r1, #44784	; 0xaef0
   471ec:	mov	r0, #0
   471f0:	movt	r1, #5
   471f4:	mov	r2, #5
   471f8:	bl	12298 <dcgettext@plt>
   471fc:	mov	r1, r7
   47200:	bl	4857c <__assert_fail@plt+0x35da4>
   47204:	cmp	r3, #10
   47208:	push	{r4, r5, r6, r7, lr}
   4720c:	mov	r5, r0
   47210:	sub	sp, sp, #12
   47214:	mov	r4, r2
   47218:	beq	4738c <__assert_fail@plt+0x34bb4>
   4721c:	bhi	47258 <__assert_fail@plt+0x34a80>
   47220:	cmp	r3, #3
   47224:	beq	47328 <__assert_fail@plt+0x34b50>
   47228:	bls	47350 <__assert_fail@plt+0x34b78>
   4722c:	cmp	r3, #4
   47230:	beq	472e4 <__assert_fail@plt+0x34b0c>
   47234:	cmp	r3, #9
   47238:	bne	4737c <__assert_fail@plt+0x34ba4>
   4723c:	ldr	lr, [r1, #20]
   47240:	mov	r3, #1
   47244:	ldr	r0, [sp, #32]
   47248:	ldr	ip, [r1, #4]
   4724c:	ldr	r2, [sp, #36]	; 0x24
   47250:	ldrd	r6, [r1, #8]
   47254:	b	47284 <__assert_fail@plt+0x34aac>
   47258:	cmp	r3, #15
   4725c:	beq	4738c <__assert_fail@plt+0x34bb4>
   47260:	bls	472b0 <__assert_fail@plt+0x34ad8>
   47264:	cmp	r3, #17
   47268:	bne	47374 <__assert_fail@plt+0x34b9c>
   4726c:	ldr	lr, [r1, #20]
   47270:	mov	r3, #2
   47274:	ldr	r0, [sp, #32]
   47278:	ldr	ip, [r1, #4]
   4727c:	ldr	r2, [sp, #36]	; 0x24
   47280:	ldrd	r6, [r1, #8]
   47284:	ldrd	r4, [lr, #32]
   47288:	mov	r1, ip
   4728c:	adds	r4, r4, r6
   47290:	adc	r5, r5, r7
   47294:	strd	r4, [sp]
   47298:	bl	34554 <__assert_fail@plt+0x21d7c>
   4729c:	adds	r3, r0, #0
   472a0:	movne	r3, #1
   472a4:	mov	r0, r3
   472a8:	add	sp, sp, #12
   472ac:	pop	{r4, r5, r6, r7, pc}
   472b0:	cmp	r3, #12
   472b4:	beq	4738c <__assert_fail@plt+0x34bb4>
   472b8:	cmp	r3, #13
   472bc:	bne	4737c <__assert_fail@plt+0x34ba4>
   472c0:	ldr	r1, [r1, #4]
   472c4:	ldr	r0, [sp, #32]
   472c8:	ldr	r2, [sp, #36]	; 0x24
   472cc:	bl	352d4 <__assert_fail@plt+0x22afc>
   472d0:	adds	r3, r0, #0
   472d4:	movne	r3, #1
   472d8:	mov	r0, r3
   472dc:	add	sp, sp, #12
   472e0:	pop	{r4, r5, r6, r7, pc}
   472e4:	ldr	lr, [r1, #20]
   472e8:	mov	r3, #5
   472ec:	ldr	r0, [sp, #32]
   472f0:	ldr	ip, [r1, #4]
   472f4:	ldr	r2, [sp, #36]	; 0x24
   472f8:	ldrd	r6, [r1, #8]
   472fc:	ldrd	r4, [lr, #32]
   47300:	mov	r1, ip
   47304:	adds	r4, r4, r6
   47308:	adc	r5, r5, r7
   4730c:	strd	r4, [sp]
   47310:	bl	34ad4 <__assert_fail@plt+0x222fc>
   47314:	adds	r3, r0, #0
   47318:	movne	r3, #1
   4731c:	mov	r0, r3
   47320:	add	sp, sp, #12
   47324:	pop	{r4, r5, r6, r7, pc}
   47328:	ldr	lr, [r1, #20]
   4732c:	ldr	ip, [r1, #4]
   47330:	ldrd	r6, [r1, #8]
   47334:	ldr	r1, [sp, #40]	; 0x28
   47338:	ldr	r0, [sp, #32]
   4733c:	cmp	r1, #0
   47340:	ldr	r2, [sp, #36]	; 0x24
   47344:	moveq	r3, #2
   47348:	movne	r3, #3
   4734c:	b	472fc <__assert_fail@plt+0x34b24>
   47350:	cmp	r3, #1
   47354:	bne	473c0 <__assert_fail@plt+0x34be8>
   47358:	ldr	lr, [r1, #20]
   4735c:	mov	r3, #4
   47360:	ldr	r0, [sp, #32]
   47364:	ldr	ip, [r1, #4]
   47368:	ldr	r2, [sp, #36]	; 0x24
   4736c:	ldrd	r6, [r1, #8]
   47370:	b	472fc <__assert_fail@plt+0x34b24>
   47374:	cmp	r3, #127	; 0x7f
   47378:	beq	473c8 <__assert_fail@plt+0x34bf0>
   4737c:	mov	r3, #1
   47380:	mov	r0, r3
   47384:	add	sp, sp, #12
   47388:	pop	{r4, r5, r6, r7, pc}
   4738c:	ldr	r1, [r1, #4]
   47390:	ldr	r0, [sp, #32]
   47394:	ldr	r2, [sp, #36]	; 0x24
   47398:	bl	353cc <__assert_fail@plt+0x22bf4>
   4739c:	subs	r6, r0, #0
   473a0:	moveq	r3, r6
   473a4:	beq	472a4 <__assert_fail@plt+0x34acc>
   473a8:	mov	r0, r5
   473ac:	mov	r1, r4
   473b0:	bl	4714c <__assert_fail@plt+0x34974>
   473b4:	mov	r3, #1
   473b8:	str	r6, [r0]
   473bc:	b	472a4 <__assert_fail@plt+0x34acc>
   473c0:	cmp	r3, #2
   473c4:	bne	4737c <__assert_fail@plt+0x34ba4>
   473c8:	ldr	lr, [r1, #20]
   473cc:	mov	r3, #1
   473d0:	ldr	r0, [sp, #32]
   473d4:	ldr	ip, [r1, #4]
   473d8:	ldr	r2, [sp, #36]	; 0x24
   473dc:	ldrd	r6, [r1, #8]
   473e0:	b	472fc <__assert_fail@plt+0x34b24>
   473e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   473e8:	sub	sp, sp, #100	; 0x64
   473ec:	ldr	r5, [r0, #168]	; 0xa8
   473f0:	movw	r6, #65176	; 0xfe98
   473f4:	movt	r6, #6
   473f8:	ldr	r4, [sp, #136]	; 0x88
   473fc:	mov	r8, r0
   47400:	str	r1, [sp, #32]
   47404:	ldr	sl, [r5, #36]	; 0x24
   47408:	mov	fp, r2
   4740c:	ldr	ip, [r6]
   47410:	str	r3, [sp, #44]	; 0x2c
   47414:	mvn	r7, sl
   47418:	tst	r4, r7
   4741c:	str	ip, [sp, #92]	; 0x5c
   47420:	ldr	r9, [sp, #148]	; 0x94
   47424:	ldr	ip, [sp, #140]	; 0x8c
   47428:	beq	47540 <__assert_fail@plt+0x34d68>
   4742c:	ldr	lr, [r5, #44]	; 0x2c
   47430:	and	sl, r4, sl
   47434:	str	sl, [sp, #40]	; 0x28
   47438:	ldr	sl, [r5, #48]	; 0x30
   4743c:	and	lr, r4, lr
   47440:	ldr	r5, [r5, #40]	; 0x28
   47444:	and	r7, r7, r4, asr sl
   47448:	str	r7, [sp, #48]	; 0x30
   4744c:	mov	r7, #1
   47450:	ldr	sl, [sp, #40]	; 0x28
   47454:	cmp	lr, r7, lsl r5
   47458:	ldr	r7, [sp, #48]	; 0x30
   4745c:	orr	r7, r7, sl
   47460:	str	r7, [sp, #40]	; 0x28
   47464:	beq	475fc <__assert_fail@plt+0x34e24>
   47468:	mov	r7, #2
   4746c:	cmp	lr, r7, lsl r5
   47470:	beq	47620 <__assert_fail@plt+0x34e48>
   47474:	mov	r3, #3
   47478:	cmp	lr, r3, lsl r5
   4747c:	bne	4793c <__assert_fail@plt+0x35164>
   47480:	cmp	ip, #0
   47484:	beq	47654 <__assert_fail@plt+0x34e7c>
   47488:	ldrh	r4, [ip, #8]
   4748c:	add	r1, ip, #8
   47490:	cmp	r4, #0
   47494:	beq	474cc <__assert_fail@plt+0x34cf4>
   47498:	ldr	sl, [sp, #40]	; 0x28
   4749c:	add	lr, ip, #14
   474a0:	mov	r3, r1
   474a4:	mov	r2, r1
   474a8:	ldrh	r1, [r3, #2]
   474ac:	strh	r1, [r3], #2
   474b0:	mov	r1, r3
   474b4:	ldrh	r0, [r2, #2]!
   474b8:	cmp	r0, #0
   474bc:	beq	474c8 <__assert_fail@plt+0x34cf0>
   474c0:	cmp	r3, lr
   474c4:	bne	474a8 <__assert_fail@plt+0x34cd0>
   474c8:	str	sl, [sp, #40]	; 0x28
   474cc:	sub	r4, r4, #1
   474d0:	mov	r3, #0
   474d4:	strh	r3, [r1]
   474d8:	asr	r5, r4, #31
   474dc:	ldr	sl, [sp, #40]	; 0x28
   474e0:	mov	r2, fp
   474e4:	str	ip, [sp, #4]
   474e8:	mov	r0, r8
   474ec:	mov	ip, #0
   474f0:	ldr	r1, [sp, #32]
   474f4:	str	sl, [sp]
   474f8:	str	r9, [sp, #12]
   474fc:	ldr	r3, [sp, #44]	; 0x2c
   47500:	str	ip, [sp, #8]
   47504:	bl	473e4 <__assert_fail@plt+0x34c0c>
   47508:	ldr	r2, [fp, #20]
   4750c:	cmp	r2, #0
   47510:	mov	r7, r0
   47514:	beq	47960 <__assert_fail@plt+0x35188>
   47518:	strd	r4, [sp, #8]
   4751c:	mov	r3, #0
   47520:	mov	r4, #0
   47524:	mov	r5, #0
   47528:	mov	r0, r9
   4752c:	mov	r1, r7
   47530:	strd	r4, [sp]
   47534:	str	r3, [sp, #16]
   47538:	bl	34ed8 <__assert_fail@plt+0x22700>
   4753c:	b	47570 <__assert_fail@plt+0x34d98>
   47540:	cmp	ip, #0
   47544:	beq	47588 <__assert_fail@plt+0x34db0>
   47548:	ldr	r1, [ip]
   4754c:	cmp	r1, #0
   47550:	ble	47588 <__assert_fail@plt+0x34db0>
   47554:	mov	r0, r2
   47558:	bl	4714c <__assert_fail@plt+0x34974>
   4755c:	ldr	r2, [r0]
   47560:	mov	r1, r0
   47564:	cmp	r2, #0
   47568:	movne	r0, r2
   4756c:	beq	479d8 <__assert_fail@plt+0x35200>
   47570:	ldr	r1, [sp, #92]	; 0x5c
   47574:	ldr	r3, [r6]
   47578:	cmp	r1, r3
   4757c:	bne	47aa8 <__assert_fail@plt+0x352d0>
   47580:	add	sp, sp, #100	; 0x64
   47584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47588:	ldr	r0, [sp, #144]	; 0x90
   4758c:	cmp	r0, #0
   47590:	moveq	ip, #0
   47594:	cmp	r4, #16
   47598:	bhi	475ac <__assert_fail@plt+0x34dd4>
   4759c:	add	r3, fp, r4, lsl #2
   475a0:	ldr	r0, [r3, #4]
   475a4:	cmp	r0, #0
   475a8:	bne	47570 <__assert_fail@plt+0x34d98>
   475ac:	cmp	r4, #16
   475b0:	ldrls	pc, [pc, r4, lsl #2]
   475b4:	b	4792c <__assert_fail@plt+0x35154>
   475b8:	andeq	r7, r4, ip, lsr #16
   475bc:	andeq	r7, r4, ip, lsr #16
   475c0:	andeq	r7, r4, ip, lsl #16
   475c4:	andeq	r7, r4, ip, ror #15
   475c8:	muleq	r4, ip, r8
   475cc:	andeq	r7, r4, ip, ror r8
   475d0:	andeq	r7, r4, r0, ror #16
   475d4:	andeq	r7, r4, r4, asr #16
   475d8:	strdeq	r7, [r4], -r4
   475dc:			; <UNDEFINED> instruction: 0x000478bc
   475e0:	andeq	r7, r4, r8, lsl r7
   475e4:	andeq	r7, r4, ip, lsr #18
   475e8:	strdeq	r7, [r4], -r8
   475ec:	ldrdeq	r7, [r4], -r8
   475f0:			; <UNDEFINED> instruction: 0x000476b8
   475f4:	muleq	r4, r8, r6
   475f8:	andeq	r7, r4, r0, ror #12
   475fc:	stm	sp, {r7, ip}
   47600:	ldr	ip, [sp, #144]	; 0x90
   47604:	str	r9, [sp, #12]
   47608:	str	ip, [sp, #8]
   4760c:	bl	473e4 <__assert_fail@plt+0x34c0c>
   47610:	mov	r1, r0
   47614:	mov	r0, r9
   47618:	bl	34d6c <__assert_fail@plt+0x22594>
   4761c:	b	47570 <__assert_fail@plt+0x34d98>
   47620:	ldr	lr, [sp, #40]	; 0x28
   47624:	ldr	r7, [sp, #144]	; 0x90
   47628:	str	ip, [sp, #4]
   4762c:	str	lr, [sp]
   47630:	str	r7, [sp, #8]
   47634:	str	r9, [sp, #12]
   47638:	bl	473e4 <__assert_fail@plt+0x34c0c>
   4763c:	mov	r2, #0
   47640:	mov	r3, r2
   47644:	mov	r1, r0
   47648:	mov	r0, r9
   4764c:	bl	34dbc <__assert_fail@plt+0x225e4>
   47650:	b	47570 <__assert_fail@plt+0x34d98>
   47654:	mvn	r4, #0
   47658:	mvn	r5, #0
   4765c:	b	474dc <__assert_fail@plt+0x34d04>
   47660:	mov	r1, #12
   47664:	mov	r0, r9
   47668:	bl	34c40 <__assert_fail@plt+0x22468>
   4766c:	movw	r1, #39688	; 0x9b08
   47670:	movt	r1, #5
   47674:	mov	r2, r0
   47678:	mov	r0, r9
   4767c:	bl	352d4 <__assert_fail@plt+0x22afc>
   47680:	mov	r5, r0
   47684:	cmp	r4, #16
   47688:	addls	r4, fp, r4, lsl #2
   4768c:	strls	r5, [r4, #4]
   47690:	mov	r0, r5
   47694:	b	47570 <__assert_fail@plt+0x34d98>
   47698:	mov	r1, #4
   4769c:	mov	r2, #1
   476a0:	mov	r0, r9
   476a4:	bl	34c24 <__assert_fail@plt+0x2244c>
   476a8:	movw	r1, #39672	; 0x9af8
   476ac:	movt	r1, #5
   476b0:	mov	r2, r0
   476b4:	b	47678 <__assert_fail@plt+0x34ea0>
   476b8:	mov	r1, #4
   476bc:	mov	r2, #1
   476c0:	mov	r0, r9
   476c4:	bl	34c24 <__assert_fail@plt+0x2244c>
   476c8:	movw	r1, #39656	; 0x9ae8
   476cc:	movt	r1, #5
   476d0:	mov	r2, r0
   476d4:	b	47678 <__assert_fail@plt+0x34ea0>
   476d8:	mov	r1, #2
   476dc:	mov	r2, #1
   476e0:	mov	r0, r9
   476e4:	bl	34c24 <__assert_fail@plt+0x2244c>
   476e8:	movw	r1, #39640	; 0x9ad8
   476ec:	movt	r1, #5
   476f0:	mov	r2, r0
   476f4:	b	47678 <__assert_fail@plt+0x34ea0>
   476f8:	mov	r1, #1
   476fc:	mov	r0, r9
   47700:	mov	r2, r1
   47704:	bl	34c24 <__assert_fail@plt+0x2244c>
   47708:	movw	r1, #39612	; 0x9abc
   4770c:	movt	r1, #5
   47710:	mov	r2, r0
   47714:	b	47678 <__assert_fail@plt+0x34ea0>
   47718:	cmp	ip, #0
   4771c:	beq	47a70 <__assert_fail@plt+0x35298>
   47720:	mov	r0, #40	; 0x28
   47724:	ldr	sl, [ip, #16]
   47728:	bl	12358 <xmalloc@plt>
   4772c:	mov	r3, #10
   47730:	str	r3, [sp, #40]	; 0x28
   47734:	str	r0, [sp, #48]	; 0x30
   47738:	mov	r0, #80	; 0x50
   4773c:	bl	12358 <xmalloc@plt>
   47740:	ldr	r7, [sp, #32]
   47744:	ldr	r4, [sp, #32]
   47748:	ldr	lr, [r7, #12]
   4774c:	mov	r7, #0
   47750:	str	r0, [sp, #52]	; 0x34
   47754:	cmp	lr, sl
   47758:	bge	477bc <__assert_fail@plt+0x34fe4>
   4775c:	ldmib	r4, {r2, r3}
   47760:	cmp	r3, r2
   47764:	bge	477bc <__assert_fail@plt+0x34fe4>
   47768:	ldr	r1, [r4]
   4776c:	mov	r0, r8
   47770:	add	r2, sp, #56	; 0x38
   47774:	ldr	r5, [r1, r3, lsl #2]
   47778:	mov	r1, r5
   4777c:	bl	12610 <bfd_coff_get_syment@plt>
   47780:	subs	r3, r0, #0
   47784:	beq	47a20 <__assert_fail@plt+0x35248>
   47788:	ldrb	r3, [sp, #80]	; 0x50
   4778c:	ldrb	lr, [sp, #81]	; 0x51
   47790:	ldr	r1, [r4, #12]
   47794:	cmp	r3, #16
   47798:	ldr	r2, [r4, #8]
   4779c:	add	lr, lr, #1
   477a0:	add	lr, lr, r1
   477a4:	str	lr, [r4, #12]
   477a8:	add	r2, r2, #1
   477ac:	str	r2, [r4, #8]
   477b0:	beq	4798c <__assert_fail@plt+0x351b4>
   477b4:	cmp	r3, #102	; 0x66
   477b8:	bne	47754 <__assert_fail@plt+0x34f7c>
   477bc:	ldr	r1, [sp, #48]	; 0x30
   477c0:	mov	r3, #0
   477c4:	mov	r0, r9
   477c8:	ldr	r2, [sp, #52]	; 0x34
   477cc:	str	r3, [r1, r7, lsl #2]
   477d0:	bl	34d14 <__assert_fail@plt+0x2253c>
   477d4:	mov	r5, r0
   477d8:	mov	r0, fp
   477dc:	ldr	r1, [sp, #44]	; 0x2c
   477e0:	bl	4714c <__assert_fail@plt+0x34974>
   477e4:	str	r5, [r0]
   477e8:	b	47690 <__assert_fail@plt+0x34eb8>
   477ec:	mov	r1, #2
   477f0:	mov	r2, #0
   477f4:	mov	r0, r9
   477f8:	bl	34c24 <__assert_fail@plt+0x2244c>
   477fc:	movw	r1, #39604	; 0x9ab4
   47800:	movt	r1, #5
   47804:	mov	r2, r0
   47808:	b	47678 <__assert_fail@plt+0x34ea0>
   4780c:	mov	r1, #1
   47810:	mov	r2, #0
   47814:	mov	r0, r9
   47818:	bl	34c24 <__assert_fail@plt+0x2244c>
   4781c:	movw	r1, #55848	; 0xda28
   47820:	movt	r1, #5
   47824:	mov	r2, r0
   47828:	b	47678 <__assert_fail@plt+0x34ea0>
   4782c:	mov	r0, r9
   47830:	bl	34c18 <__assert_fail@plt+0x22440>
   47834:	movw	r1, #37032	; 0x90a8
   47838:	movt	r1, #5
   4783c:	mov	r2, r0
   47840:	b	47678 <__assert_fail@plt+0x34ea0>
   47844:	mov	r1, #8
   47848:	mov	r0, r9
   4784c:	bl	34c40 <__assert_fail@plt+0x22468>
   47850:	movw	r1, #37212	; 0x915c
   47854:	movt	r1, #5
   47858:	mov	r2, r0
   4785c:	b	47678 <__assert_fail@plt+0x34ea0>
   47860:	mov	r1, #4
   47864:	mov	r0, r9
   47868:	bl	34c40 <__assert_fail@plt+0x22468>
   4786c:	movw	r1, #37204	; 0x9154
   47870:	movt	r1, #5
   47874:	mov	r2, r0
   47878:	b	47678 <__assert_fail@plt+0x34ea0>
   4787c:	mov	r1, #4
   47880:	mov	r2, #0
   47884:	mov	r0, r9
   47888:	bl	34c24 <__assert_fail@plt+0x2244c>
   4788c:	movw	r1, #42228	; 0xa4f4
   47890:	movt	r1, #5
   47894:	mov	r2, r0
   47898:	b	47678 <__assert_fail@plt+0x34ea0>
   4789c:	mov	r1, #4
   478a0:	mov	r2, #0
   478a4:	mov	r0, r9
   478a8:	bl	34c24 <__assert_fail@plt+0x2244c>
   478ac:	movw	r1, #39600	; 0x9ab0
   478b0:	movt	r1, #5
   478b4:	mov	r2, r0
   478b8:	b	47678 <__assert_fail@plt+0x34ea0>
   478bc:	cmp	ip, #0
   478c0:	beq	47a50 <__assert_fail@plt+0x35278>
   478c4:	add	r3, ip, #6
   478c8:	str	r3, [sp]
   478cc:	ldr	ip, [ip, #16]
   478d0:	mov	r0, r8
   478d4:	ldr	r1, [sp, #32]
   478d8:	mov	r2, fp
   478dc:	str	r9, [sp, #8]
   478e0:	mov	r3, #9
   478e4:	str	ip, [sp, #4]
   478e8:	bl	47aac <__assert_fail@plt+0x352d4>
   478ec:	mov	r5, r0
   478f0:	b	477d8 <__assert_fail@plt+0x35000>
   478f4:	cmp	ip, #0
   478f8:	beq	47a88 <__assert_fail@plt+0x352b0>
   478fc:	add	r3, ip, #6
   47900:	str	r3, [sp]
   47904:	ldr	ip, [ip, #16]
   47908:	mov	r0, r8
   4790c:	ldr	r1, [sp, #32]
   47910:	mov	r2, fp
   47914:	str	r9, [sp, #8]
   47918:	mov	r3, #8
   4791c:	str	ip, [sp, #4]
   47920:	bl	47aac <__assert_fail@plt+0x352d4>
   47924:	mov	r5, r0
   47928:	b	477d8 <__assert_fail@plt+0x35000>
   4792c:	mov	r0, r9
   47930:	bl	34c18 <__assert_fail@plt+0x22440>
   47934:	mov	r5, r0
   47938:	b	47684 <__assert_fail@plt+0x34eac>
   4793c:	mov	r2, #5
   47940:	movw	r1, #44820	; 0xaf14
   47944:	mov	r0, #0
   47948:	movt	r1, #5
   4794c:	bl	12298 <dcgettext@plt>
   47950:	mov	r1, r4
   47954:	bl	485b4 <__assert_fail@plt+0x35ddc>
   47958:	mov	r0, #0
   4795c:	b	47570 <__assert_fail@plt+0x34d98>
   47960:	mov	r1, #4
   47964:	mov	r0, r9
   47968:	bl	34c24 <__assert_fail@plt+0x2244c>
   4796c:	movw	r1, #39600	; 0x9ab0
   47970:	movt	r1, #5
   47974:	mov	r2, r0
   47978:	mov	r0, r9
   4797c:	bl	352d4 <__assert_fail@plt+0x22afc>
   47980:	mov	r2, r0
   47984:	str	r0, [fp, #20]
   47988:	b	47518 <__assert_fail@plt+0x34d40>
   4798c:	ldr	ip, [sp, #40]	; 0x28
   47990:	add	r3, r7, #1
   47994:	cmp	ip, r3
   47998:	ble	479e4 <__assert_fail@plt+0x3520c>
   4799c:	ldrd	r0, [r5, #8]
   479a0:	lsl	ip, r7, #3
   479a4:	ldr	r2, [r5, #4]
   479a8:	strd	r0, [sp, #32]
   479ac:	ldr	r1, [sp, #48]	; 0x30
   479b0:	str	r2, [r1, r7, lsl #2]
   479b4:	mov	r7, r3
   479b8:	ldr	r3, [r5, #20]
   479bc:	ldrd	r0, [sp, #32]
   479c0:	ldrd	r2, [r3, #32]
   479c4:	adds	r2, r2, r0
   479c8:	adc	r3, r3, r1
   479cc:	ldr	r1, [sp, #52]	; 0x34
   479d0:	strd	r2, [r1, ip]
   479d4:	b	47754 <__assert_fail@plt+0x34f7c>
   479d8:	mov	r0, r9
   479dc:	bl	34bc0 <__assert_fail@plt+0x223e8>
   479e0:	b	47570 <__assert_fail@plt+0x34d98>
   479e4:	add	ip, ip, #10
   479e8:	ldr	r0, [sp, #48]	; 0x30
   479ec:	str	r3, [sp, #28]
   479f0:	lsl	r1, ip, #2
   479f4:	str	ip, [sp, #40]	; 0x28
   479f8:	bl	122c8 <xrealloc@plt>
   479fc:	ldr	ip, [sp, #40]	; 0x28
   47a00:	lsl	r1, ip, #3
   47a04:	str	r0, [sp, #48]	; 0x30
   47a08:	ldr	r0, [sp, #52]	; 0x34
   47a0c:	bl	122c8 <xrealloc@plt>
   47a10:	ldr	lr, [r4, #12]
   47a14:	ldr	r3, [sp, #28]
   47a18:	str	r0, [sp, #52]	; 0x34
   47a1c:	b	4799c <__assert_fail@plt+0x351c4>
   47a20:	mov	r2, #5
   47a24:	movw	r1, #44856	; 0xaf38
   47a28:	movt	r1, #5
   47a2c:	mov	r5, r3
   47a30:	bl	12298 <dcgettext@plt>
   47a34:	mov	r4, r0
   47a38:	bl	12310 <bfd_get_error@plt>
   47a3c:	bl	126e8 <bfd_errmsg@plt>
   47a40:	mov	r1, r0
   47a44:	mov	r0, r4
   47a48:	bl	485b4 <__assert_fail@plt+0x35ddc>
   47a4c:	b	477d8 <__assert_fail@plt+0x35000>
   47a50:	str	ip, [sp]
   47a54:	mov	r0, r9
   47a58:	mov	r1, ip
   47a5c:	mov	r2, #0
   47a60:	mov	r3, #0
   47a64:	bl	34c58 <__assert_fail@plt+0x22480>
   47a68:	mov	r5, r0
   47a6c:	b	477d8 <__assert_fail@plt+0x35000>
   47a70:	mov	r1, ip
   47a74:	mov	r0, r9
   47a78:	mov	r2, ip
   47a7c:	bl	34d14 <__assert_fail@plt+0x2253c>
   47a80:	mov	r5, r0
   47a84:	b	477d8 <__assert_fail@plt+0x35000>
   47a88:	str	ip, [sp]
   47a8c:	mov	r0, r9
   47a90:	mov	r1, #1
   47a94:	mov	r2, #0
   47a98:	mov	r3, #0
   47a9c:	bl	34c58 <__assert_fail@plt+0x22480>
   47aa0:	mov	r5, r0
   47aa4:	b	477d8 <__assert_fail@plt+0x35000>
   47aa8:	bl	122b0 <__stack_chk_fail@plt>
   47aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47ab0:	movw	r4, #65176	; 0xfe98
   47ab4:	sub	sp, sp, #148	; 0x94
   47ab8:	movt	r4, #6
   47abc:	mov	r8, r0
   47ac0:	mov	r0, #40	; 0x28
   47ac4:	ldr	ip, [r4]
   47ac8:	mov	r6, r1
   47acc:	ldr	r5, [sp, #184]	; 0xb8
   47ad0:	mov	sl, #0
   47ad4:	str	r4, [sp, #60]	; 0x3c
   47ad8:	str	ip, [sp, #140]	; 0x8c
   47adc:	mov	ip, #10
   47ae0:	str	r2, [sp, #48]	; 0x30
   47ae4:	str	r3, [sp, #64]	; 0x40
   47ae8:	str	r5, [sp, #68]	; 0x44
   47aec:	ldr	fp, [sp, #188]	; 0xbc
   47af0:	str	ip, [sp, #56]	; 0x38
   47af4:	ldr	r9, [sp, #192]	; 0xc0
   47af8:	bl	12358 <xmalloc@plt>
   47afc:	str	r0, [sp, #52]	; 0x34
   47b00:	ldr	r3, [r6, #12]
   47b04:	cmp	r3, fp
   47b08:	bge	47b80 <__assert_fail@plt+0x353a8>
   47b0c:	ldmib	r6, {r2, r3}
   47b10:	cmp	r3, r2
   47b14:	bge	47b80 <__assert_fail@plt+0x353a8>
   47b18:	ldr	r1, [r6]
   47b1c:	mov	r0, r8
   47b20:	add	r2, sp, #72	; 0x48
   47b24:	ldr	r7, [r1, r3, lsl #2]
   47b28:	mov	r1, r7
   47b2c:	bl	12610 <bfd_coff_get_syment@plt>
   47b30:	cmp	r0, #0
   47b34:	beq	47d14 <__assert_fail@plt+0x3553c>
   47b38:	ldrb	r1, [sp, #97]	; 0x61
   47b3c:	ldr	ip, [r6, #12]
   47b40:	ldr	r3, [r6, #8]
   47b44:	cmp	r1, #0
   47b48:	add	r2, r1, #1
   47b4c:	add	r2, ip, r2
   47b50:	add	r3, r3, #1
   47b54:	str	r2, [r6, #12]
   47b58:	str	r3, [r6, #8]
   47b5c:	bne	47bd0 <__assert_fail@plt+0x353f8>
   47b60:	ldrb	r3, [sp, #96]	; 0x60
   47b64:	cmp	r3, #11
   47b68:	beq	47c04 <__assert_fail@plt+0x3542c>
   47b6c:	bls	47c3c <__assert_fail@plt+0x35464>
   47b70:	cmp	r3, #18
   47b74:	beq	47cd0 <__assert_fail@plt+0x354f8>
   47b78:	cmp	r3, #102	; 0x66
   47b7c:	bne	47c44 <__assert_fail@plt+0x3546c>
   47b80:	ldr	r4, [sp, #68]	; 0x44
   47b84:	mov	r3, #0
   47b88:	ldr	r5, [sp, #64]	; 0x40
   47b8c:	mov	r0, r9
   47b90:	ldrh	r2, [r4]
   47b94:	subs	ip, r5, #8
   47b98:	ldr	r4, [sp, #52]	; 0x34
   47b9c:	rsbs	r1, ip, #0
   47ba0:	adcs	r1, r1, ip
   47ba4:	mov	ip, #0
   47ba8:	str	ip, [r4, sl, lsl #2]
   47bac:	str	r4, [sp]
   47bb0:	bl	34c58 <__assert_fail@plt+0x22480>
   47bb4:	ldr	r5, [sp, #60]	; 0x3c
   47bb8:	ldr	r2, [sp, #140]	; 0x8c
   47bbc:	ldr	r3, [r5]
   47bc0:	cmp	r2, r3
   47bc4:	bne	47d54 <__assert_fail@plt+0x3557c>
   47bc8:	add	sp, sp, #148	; 0x94
   47bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47bd0:	mov	r0, r8
   47bd4:	mov	r1, r7
   47bd8:	mov	r2, #0
   47bdc:	add	r3, sp, #104	; 0x68
   47be0:	str	ip, [sp, #36]	; 0x24
   47be4:	bl	12538 <bfd_coff_get_auxent@plt>
   47be8:	ldr	ip, [sp, #36]	; 0x24
   47bec:	cmp	r0, #0
   47bf0:	beq	47d44 <__assert_fail@plt+0x3556c>
   47bf4:	ldrb	r3, [sp, #96]	; 0x60
   47bf8:	add	r1, sp, #104	; 0x68
   47bfc:	cmp	r3, #11
   47c00:	bne	47b6c <__assert_fail@plt+0x35394>
   47c04:	ldr	r3, [r7, #20]
   47c08:	mov	r4, #0
   47c0c:	mov	r5, #0
   47c10:	strd	r4, [sp, #24]
   47c14:	ldrd	r4, [r3, #32]
   47c18:	ldrd	r2, [r7, #8]
   47c1c:	adds	r4, r4, r2
   47c20:	adc	r5, r5, r3
   47c24:	lsl	r0, r4, #3
   47c28:	str	r0, [sp, #40]	; 0x28
   47c2c:	lsl	r3, r5, #3
   47c30:	orr	lr, r3, r4, lsr #29
   47c34:	str	lr, [sp, #44]	; 0x2c
   47c38:	b	47c54 <__assert_fail@plt+0x3547c>
   47c3c:	cmp	r3, #8
   47c40:	beq	47c04 <__assert_fail@plt+0x3542c>
   47c44:	mov	r4, #0
   47c48:	mov	r5, #0
   47c4c:	strd	r4, [sp, #24]
   47c50:	strd	r4, [sp, #40]	; 0x28
   47c54:	ldrh	lr, [sp, #94]	; 0x5e
   47c58:	mov	r3, ip
   47c5c:	str	r1, [sp, #4]
   47c60:	mov	r5, #1
   47c64:	mov	r1, r6
   47c68:	str	r5, [sp, #8]
   47c6c:	ldr	r2, [sp, #48]	; 0x30
   47c70:	mov	r0, r8
   47c74:	str	lr, [sp]
   47c78:	str	r9, [sp, #12]
   47c7c:	bl	473e4 <__assert_fail@plt+0x34c0c>
   47c80:	ldrd	r4, [sp, #40]	; 0x28
   47c84:	ldr	r1, [r7, #4]
   47c88:	strd	r4, [sp]
   47c8c:	ldrd	r4, [sp, #24]
   47c90:	strd	r4, [sp, #8]
   47c94:	mov	r5, #0
   47c98:	str	r5, [sp, #16]
   47c9c:	mov	r2, r0
   47ca0:	mov	r0, r9
   47ca4:	bl	3514c <__assert_fail@plt+0x22974>
   47ca8:	subs	r4, r0, #0
   47cac:	beq	47d3c <__assert_fail@plt+0x35564>
   47cb0:	ldr	r5, [sp, #56]	; 0x38
   47cb4:	add	sl, sl, #1
   47cb8:	cmp	sl, r5
   47cbc:	bge	47cf8 <__assert_fail@plt+0x35520>
   47cc0:	ldr	ip, [sp, #52]	; 0x34
   47cc4:	sub	r3, sl, #-1073741823	; 0xc0000001
   47cc8:	str	r4, [ip, r3, lsl #2]
   47ccc:	b	47b00 <__assert_fail@plt+0x35328>
   47cd0:	ldr	r3, [r7, #20]
   47cd4:	mov	r5, #0
   47cd8:	ldrh	r4, [sp, #110]	; 0x6e
   47cdc:	strd	r4, [sp, #24]
   47ce0:	ldrd	r4, [r3, #32]
   47ce4:	ldrd	r2, [r7, #8]
   47ce8:	adds	r2, r2, r4
   47cec:	adc	r3, r3, r5
   47cf0:	strd	r2, [sp, #40]	; 0x28
   47cf4:	b	47c54 <__assert_fail@plt+0x3547c>
   47cf8:	add	r5, r5, #10
   47cfc:	ldr	r0, [sp, #52]	; 0x34
   47d00:	str	r5, [sp, #56]	; 0x38
   47d04:	lsl	r1, r5, #2
   47d08:	bl	122c8 <xrealloc@plt>
   47d0c:	str	r0, [sp, #52]	; 0x34
   47d10:	b	47cc0 <__assert_fail@plt+0x354e8>
   47d14:	movw	r1, #44856	; 0xaf38
   47d18:	movt	r1, #5
   47d1c:	mov	r2, #5
   47d20:	bl	12298 <dcgettext@plt>
   47d24:	mov	r4, r0
   47d28:	bl	12310 <bfd_get_error@plt>
   47d2c:	bl	126e8 <bfd_errmsg@plt>
   47d30:	mov	r1, r0
   47d34:	mov	r0, r4
   47d38:	bl	485b4 <__assert_fail@plt+0x35ddc>
   47d3c:	mov	r0, #0
   47d40:	b	47bb4 <__assert_fail@plt+0x353dc>
   47d44:	movw	r1, #44888	; 0xaf58
   47d48:	mov	r2, #5
   47d4c:	movt	r1, #5
   47d50:	b	47d20 <__assert_fail@plt+0x35548>
   47d54:	bl	122b0 <__stack_chk_fail@plt>
   47d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47d5c:	sub	sp, sp, #236	; 0xec
   47d60:	movw	r4, #65176	; 0xfe98
   47d64:	movt	r4, #6
   47d68:	str	r4, [sp, #52]	; 0x34
   47d6c:	add	r5, sp, #232	; 0xe8
   47d70:	ldr	sl, [sp, #52]	; 0x34
   47d74:	mov	r4, #0
   47d78:	str	r5, [sp, #40]	; 0x28
   47d7c:	add	ip, sp, #224	; 0xe0
   47d80:	ldr	fp, [sp, #40]	; 0x28
   47d84:	mov	r6, r0
   47d88:	ldr	r5, [sl]
   47d8c:	mov	r7, r3
   47d90:	mov	r0, r4
   47d94:	mov	r8, r2
   47d98:	str	r4, [fp, #-76]!	; 0xffffffb4
   47d9c:	mov	r3, fp
   47da0:	str	fp, [sp, #40]	; 0x28
   47da4:	str	r1, [sp, #36]	; 0x24
   47da8:	str	r1, [sp, #72]	; 0x48
   47dac:	str	r2, [sp, #76]	; 0x4c
   47db0:	str	r5, [sp, #228]	; 0xe4
   47db4:	str	r4, [sp, #80]	; 0x50
   47db8:	str	r4, [sp, #84]	; 0x54
   47dbc:	str	r0, [r3, #4]!
   47dc0:	cmp	r3, ip
   47dc4:	bne	47dbc <__assert_fail@plt+0x355e4>
   47dc8:	cmp	r8, #0
   47dcc:	ble	47fb8 <__assert_fail@plt+0x357e0>
   47dd0:	mov	r3, #0
   47dd4:	mov	r4, #0
   47dd8:	mov	r5, #0
   47ddc:	mvn	sl, #0
   47de0:	strd	r4, [sp, #64]	; 0x40
   47de4:	mov	fp, r3
   47de8:	str	r3, [sp, #44]	; 0x2c
   47dec:	str	r3, [sp, #56]	; 0x38
   47df0:	str	r3, [sp, #60]	; 0x3c
   47df4:	str	r3, [sp, #48]	; 0x30
   47df8:	str	sl, [sp, #20]
   47dfc:	b	47ea4 <__assert_fail@plt+0x356cc>
   47e00:	cmp	r3, #5
   47e04:	beq	47e98 <__assert_fail@plt+0x356c0>
   47e08:	bhi	4816c <__assert_fail@plt+0x35994>
   47e0c:	cmp	r3, #2
   47e10:	beq	48130 <__assert_fail@plt+0x35958>
   47e14:	cmp	r3, #3
   47e18:	bne	480d0 <__assert_fail@plt+0x358f8>
   47e1c:	ldrh	r1, [sp, #110]	; 0x6e
   47e20:	cmp	r1, #0
   47e24:	beq	47e98 <__assert_fail@plt+0x356c0>
   47e28:	ldr	r0, [r6, #168]	; 0xa8
   47e2c:	mov	lr, #2
   47e30:	ldr	ip, [r0, #44]	; 0x2c
   47e34:	ldr	r0, [r0, #40]	; 0x28
   47e38:	and	ip, r1, ip
   47e3c:	cmp	ip, lr, lsl r0
   47e40:	bne	48138 <__assert_fail@plt+0x35960>
   47e44:	ldrb	r2, [sp, #113]	; 0x71
   47e48:	str	r3, [sp, #60]	; 0x3c
   47e4c:	cmp	r2, #0
   47e50:	str	r1, [sp, #56]	; 0x38
   47e54:	beq	48180 <__assert_fail@plt+0x359a8>
   47e58:	ldr	r1, [r9, #20]
   47e5c:	ldrd	r2, [r9, #8]
   47e60:	ldr	ip, [sp, #124]	; 0x7c
   47e64:	ldrd	r0, [r1, #32]
   47e68:	adds	r2, r2, r0
   47e6c:	adc	r3, r3, r1
   47e70:	adds	r0, r2, ip
   47e74:	adc	r1, r3, ip, asr #31
   47e78:	strd	r0, [sp, #64]	; 0x40
   47e7c:	ldr	r3, [r6, #4]
   47e80:	mov	r1, r9
   47e84:	mov	r0, r6
   47e88:	str	r5, [sp, #48]	; 0x30
   47e8c:	ldr	r3, [r3, #292]	; 0x124
   47e90:	blx	r3
   47e94:	str	r0, [sp, #44]	; 0x2c
   47e98:	ldr	r3, [sp, #80]	; 0x50
   47e9c:	cmp	r8, r3
   47ea0:	ble	47fb8 <__assert_fail@plt+0x357e0>
   47ea4:	ldr	r5, [sp, #36]	; 0x24
   47ea8:	mov	r0, r6
   47eac:	add	r2, sp, #88	; 0x58
   47eb0:	ldr	r9, [r5, r3, lsl #2]
   47eb4:	mov	r1, r9
   47eb8:	bl	12610 <bfd_coff_get_syment@plt>
   47ebc:	cmp	r0, #0
   47ec0:	beq	482fc <__assert_fail@plt+0x35b24>
   47ec4:	ldrb	r2, [sp, #113]	; 0x71
   47ec8:	ldr	r4, [sp, #84]	; 0x54
   47ecc:	ldr	r3, [sp, #80]	; 0x50
   47ed0:	cmp	r2, #0
   47ed4:	add	r1, r2, #1
   47ed8:	ldr	r5, [r9, #4]
   47edc:	add	r1, r4, r1
   47ee0:	add	r3, r3, #1
   47ee4:	str	r1, [sp, #84]	; 0x54
   47ee8:	str	r3, [sp, #80]	; 0x50
   47eec:	bne	47fc0 <__assert_fail@plt+0x357e8>
   47ef0:	ldr	sl, [sp, #20]
   47ef4:	cmp	r4, sl
   47ef8:	beq	47fec <__assert_fail@plt+0x35814>
   47efc:	ldrb	r3, [sp, #112]	; 0x70
   47f00:	cmp	r3, #100	; 0x64
   47f04:	beq	48060 <__assert_fail@plt+0x35888>
   47f08:	bls	47e00 <__assert_fail@plt+0x35628>
   47f0c:	cmp	r3, #106	; 0x6a
   47f10:	bhi	480c0 <__assert_fail@plt+0x358e8>
   47f14:	cmp	r3, #104	; 0x68
   47f18:	bcs	47e98 <__assert_fail@plt+0x356c0>
   47f1c:	cmp	r3, #101	; 0x65
   47f20:	bne	48038 <__assert_fail@plt+0x35860>
   47f24:	ldrb	r3, [r5]
   47f28:	cmp	r3, #46	; 0x2e
   47f2c:	bne	47e98 <__assert_fail@plt+0x356c0>
   47f30:	ldrb	r3, [r5, #1]
   47f34:	cmp	r3, #98	; 0x62
   47f38:	beq	481d0 <__assert_fail@plt+0x359f8>
   47f3c:	cmp	r3, #101	; 0x65
   47f40:	bne	47e98 <__assert_fail@plt+0x356c0>
   47f44:	ldrb	r3, [r5, #2]
   47f48:	cmp	r3, #102	; 0x66
   47f4c:	bne	47e98 <__assert_fail@plt+0x356c0>
   47f50:	ldrb	r3, [r5, #3]
   47f54:	cmp	r3, #0
   47f58:	bne	47e98 <__assert_fail@plt+0x356c0>
   47f5c:	cmp	fp, #0
   47f60:	beq	48394 <__assert_fail@plt+0x35bbc>
   47f64:	ldr	r1, [r9, #20]
   47f68:	ldrd	r4, [r9, #8]
   47f6c:	ldrd	r2, [sp, #64]	; 0x40
   47f70:	ldrd	r0, [r1, #32]
   47f74:	adds	r0, r0, r4
   47f78:	adc	r1, r1, r5
   47f7c:	cmp	r3, r1
   47f80:	cmpeq	r2, r0
   47f84:	movcc	r2, r0
   47f88:	movcc	r3, r1
   47f8c:	mov	r0, r7
   47f90:	bl	34638 <__assert_fail@plt+0x21e60>
   47f94:	cmp	r0, #0
   47f98:	beq	48018 <__assert_fail@plt+0x35840>
   47f9c:	ldr	r3, [sp, #80]	; 0x50
   47fa0:	mov	r4, #0
   47fa4:	mov	r5, #0
   47fa8:	mov	fp, #0
   47fac:	cmp	r8, r3
   47fb0:	strd	r4, [sp, #64]	; 0x40
   47fb4:	bgt	47ea4 <__assert_fail@plt+0x356cc>
   47fb8:	mov	r0, #1
   47fbc:	b	4801c <__assert_fail@plt+0x35844>
   47fc0:	mov	r0, r6
   47fc4:	mov	r1, r9
   47fc8:	mov	r2, #0
   47fcc:	add	r3, sp, #120	; 0x78
   47fd0:	bl	12538 <bfd_coff_get_auxent@plt>
   47fd4:	cmp	r0, #0
   47fd8:	beq	48364 <__assert_fail@plt+0x35b8c>
   47fdc:	ldr	sl, [sp, #20]
   47fe0:	add	r2, sp, #120	; 0x78
   47fe4:	cmp	r4, sl
   47fe8:	bne	47efc <__assert_fail@plt+0x35724>
   47fec:	ldrb	r3, [sp, #112]	; 0x70
   47ff0:	cmp	r3, #103	; 0x67
   47ff4:	beq	48040 <__assert_fail@plt+0x35868>
   47ff8:	movw	r1, #44920	; 0xaf78
   47ffc:	mov	r0, r7
   48000:	movt	r1, #5
   48004:	str	r2, [sp, #32]
   48008:	bl	34204 <__assert_fail@plt+0x21a2c>
   4800c:	ldr	r2, [sp, #32]
   48010:	cmp	r0, #0
   48014:	bne	47efc <__assert_fail@plt+0x35724>
   48018:	mov	r0, #0
   4801c:	ldr	fp, [sp, #52]	; 0x34
   48020:	ldr	r2, [sp, #228]	; 0xe4
   48024:	ldr	r3, [fp]
   48028:	cmp	r2, r3
   4802c:	bne	483b4 <__assert_fail@plt+0x35bdc>
   48030:	add	sp, sp, #236	; 0xec
   48034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48038:	cmp	r3, #103	; 0x67
   4803c:	bne	480d0 <__assert_fail@plt+0x358f8>
   48040:	ldr	ip, [sp, #96]	; 0x60
   48044:	mov	r1, r5
   48048:	mov	r0, r7
   4804c:	str	ip, [sp, #20]
   48050:	bl	34204 <__assert_fail@plt+0x21a2c>
   48054:	cmp	r0, #0
   48058:	bne	47e98 <__assert_fail@plt+0x356c0>
   4805c:	b	48018 <__assert_fail@plt+0x35840>
   48060:	ldrb	r3, [r5]
   48064:	cmp	r3, #46	; 0x2e
   48068:	bne	47e98 <__assert_fail@plt+0x356c0>
   4806c:	ldrb	r3, [r5, #1]
   48070:	cmp	r3, #98	; 0x62
   48074:	beq	48190 <__assert_fail@plt+0x359b8>
   48078:	cmp	r3, #101	; 0x65
   4807c:	bne	47e98 <__assert_fail@plt+0x356c0>
   48080:	ldrb	r3, [r5, #2]
   48084:	cmp	r3, #98	; 0x62
   48088:	bne	47e98 <__assert_fail@plt+0x356c0>
   4808c:	ldrb	r3, [r5, #3]
   48090:	cmp	r3, #0
   48094:	bne	47e98 <__assert_fail@plt+0x356c0>
   48098:	ldr	r3, [r9, #20]
   4809c:	mov	r0, r7
   480a0:	ldrd	r4, [r9, #8]
   480a4:	ldrd	r2, [r3, #32]
   480a8:	adds	r2, r2, r4
   480ac:	adc	r3, r3, r5
   480b0:	bl	34798 <__assert_fail@plt+0x21fc0>
   480b4:	cmp	r0, #0
   480b8:	bne	47e98 <__assert_fail@plt+0x356c0>
   480bc:	b	48018 <__assert_fail@plt+0x35840>
   480c0:	cmp	r3, #127	; 0x7f
   480c4:	beq	48130 <__assert_fail@plt+0x35958>
   480c8:	cmp	r3, #255	; 0xff
   480cc:	beq	47e98 <__assert_fail@plt+0x356c0>
   480d0:	ldrh	ip, [sp, #110]	; 0x6e
   480d4:	mov	r0, r6
   480d8:	str	r2, [sp, #4]
   480dc:	add	r1, sp, #72	; 0x48
   480e0:	mov	r5, #1
   480e4:	ldr	r2, [sp, #40]	; 0x28
   480e8:	str	r5, [sp, #8]
   480ec:	mov	r3, r4
   480f0:	str	r7, [sp, #12]
   480f4:	str	ip, [sp]
   480f8:	bl	473e4 <__assert_fail@plt+0x34c0c>
   480fc:	cmp	r0, #0
   48100:	beq	48018 <__assert_fail@plt+0x35840>
   48104:	str	r0, [sp, #4]
   48108:	mov	r1, r9
   4810c:	ldrb	r3, [sp, #112]	; 0x70
   48110:	mov	r2, r4
   48114:	str	r7, [sp]
   48118:	ldr	r0, [sp, #40]	; 0x28
   4811c:	str	fp, [sp, #8]
   48120:	bl	47204 <__assert_fail@plt+0x34a2c>
   48124:	cmp	r0, #0
   48128:	bne	47e98 <__assert_fail@plt+0x356c0>
   4812c:	b	48018 <__assert_fail@plt+0x35840>
   48130:	ldrh	r1, [sp, #110]	; 0x6e
   48134:	b	47e28 <__assert_fail@plt+0x35650>
   48138:	str	r1, [sp]
   4813c:	mov	r3, #1
   48140:	str	r2, [sp, #4]
   48144:	mov	r0, r6
   48148:	str	r3, [sp, #8]
   4814c:	add	r1, sp, #72	; 0x48
   48150:	ldr	r2, [sp, #40]	; 0x28
   48154:	mov	r3, r4
   48158:	str	r7, [sp, #12]
   4815c:	bl	473e4 <__assert_fail@plt+0x34c0c>
   48160:	cmp	r0, #0
   48164:	bne	48104 <__assert_fail@plt+0x3592c>
   48168:	b	48018 <__assert_fail@plt+0x35840>
   4816c:	cmp	r3, #7
   48170:	beq	47e98 <__assert_fail@plt+0x356c0>
   48174:	cmp	r3, #14
   48178:	bne	480d0 <__assert_fail@plt+0x358f8>
   4817c:	b	47e98 <__assert_fail@plt+0x356c0>
   48180:	mov	r2, #0
   48184:	mov	r3, #0
   48188:	strd	r2, [sp, #64]	; 0x40
   4818c:	b	47e7c <__assert_fail@plt+0x356a4>
   48190:	ldrb	r3, [r5, #2]
   48194:	cmp	r3, #98	; 0x62
   48198:	bne	47e98 <__assert_fail@plt+0x356c0>
   4819c:	ldrb	r3, [r5, #3]
   481a0:	cmp	r3, #0
   481a4:	bne	47e98 <__assert_fail@plt+0x356c0>
   481a8:	ldr	r3, [r9, #20]
   481ac:	mov	r0, r7
   481b0:	ldrd	r4, [r9, #8]
   481b4:	ldrd	r2, [r3, #32]
   481b8:	adds	r2, r2, r4
   481bc:	adc	r3, r3, r5
   481c0:	bl	346d0 <__assert_fail@plt+0x21ef8>
   481c4:	cmp	r0, #0
   481c8:	bne	47e98 <__assert_fail@plt+0x356c0>
   481cc:	b	48018 <__assert_fail@plt+0x35840>
   481d0:	ldrb	r3, [r5, #2]
   481d4:	cmp	r3, #102	; 0x66
   481d8:	bne	47e98 <__assert_fail@plt+0x356c0>
   481dc:	ldrb	r3, [r5, #3]
   481e0:	cmp	r3, #0
   481e4:	bne	47e98 <__assert_fail@plt+0x356c0>
   481e8:	ldr	r5, [sp, #48]	; 0x30
   481ec:	cmp	r5, #0
   481f0:	beq	48374 <__assert_fail@plt+0x35b9c>
   481f4:	ldr	ip, [r6, #168]	; 0xa8
   481f8:	mov	r3, r4
   481fc:	ldr	sl, [sp, #56]	; 0x38
   48200:	mov	r0, r6
   48204:	add	r1, sp, #72	; 0x48
   48208:	mov	fp, #0
   4820c:	ldr	lr, [ip, #36]	; 0x24
   48210:	ldr	ip, [ip, #48]	; 0x30
   48214:	str	r2, [sp, #4]
   48218:	mvn	r2, lr
   4821c:	and	lr, sl, lr
   48220:	and	r2, r2, sl, asr ip
   48224:	str	fp, [sp, #8]
   48228:	orr	lr, r2, lr
   4822c:	str	r7, [sp, #12]
   48230:	ldr	r2, [sp, #40]	; 0x28
   48234:	str	lr, [sp]
   48238:	bl	473e4 <__assert_fail@plt+0x34c0c>
   4823c:	subs	r2, r0, #0
   48240:	beq	48018 <__assert_fail@plt+0x35840>
   48244:	ldr	ip, [sp, #60]	; 0x3c
   48248:	cmp	ip, #2
   4824c:	beq	48328 <__assert_fail@plt+0x35b50>
   48250:	cmp	ip, #127	; 0x7f
   48254:	movne	r3, #0
   48258:	beq	48328 <__assert_fail@plt+0x35b50>
   4825c:	ldr	ip, [r9, #20]
   48260:	mov	r0, r7
   48264:	ldrd	sl, [r9, #8]
   48268:	ldr	r1, [sp, #48]	; 0x30
   4826c:	ldrd	r4, [ip, #32]
   48270:	adds	r4, r4, sl
   48274:	adc	r5, r5, fp
   48278:	strd	r4, [sp]
   4827c:	bl	34434 <__assert_fail@plt+0x21c5c>
   48280:	cmp	r0, #0
   48284:	beq	48018 <__assert_fail@plt+0x35840>
   48288:	ldr	fp, [sp, #44]	; 0x2c
   4828c:	cmp	fp, #0
   48290:	beq	4834c <__assert_fail@plt+0x35b74>
   48294:	ldrb	fp, [sp, #113]	; 0x71
   48298:	ldr	ip, [sp, #44]	; 0x2c
   4829c:	cmp	fp, #0
   482a0:	ldr	r3, [r9, #20]
   482a4:	add	r2, ip, #16
   482a8:	ldrhne	fp, [sp, #124]	; 0x7c
   482ac:	ldr	r1, [ip, #16]
   482b0:	subne	fp, fp, #1
   482b4:	ldrd	r4, [r3, #32]
   482b8:	cmp	r1, #0
   482bc:	beq	48334 <__assert_fail@plt+0x35b5c>
   482c0:	mov	r9, r2
   482c4:	ldr	sl, [sp, #20]
   482c8:	b	482d8 <__assert_fail@plt+0x35b00>
   482cc:	ldr	r1, [r9, #16]!
   482d0:	cmp	r1, #0
   482d4:	beq	48330 <__assert_fail@plt+0x35b58>
   482d8:	ldrd	r2, [r9, #8]
   482dc:	add	r1, r1, fp
   482e0:	mov	r0, r7
   482e4:	adds	r2, r2, r4
   482e8:	adc	r3, r3, r5
   482ec:	bl	3481c <__assert_fail@plt+0x22044>
   482f0:	cmp	r0, #0
   482f4:	bne	482cc <__assert_fail@plt+0x35af4>
   482f8:	b	48018 <__assert_fail@plt+0x35840>
   482fc:	movw	r1, #44856	; 0xaf38
   48300:	movt	r1, #5
   48304:	mov	r2, #5
   48308:	bl	12298 <dcgettext@plt>
   4830c:	mov	r4, r0
   48310:	bl	12310 <bfd_get_error@plt>
   48314:	bl	126e8 <bfd_errmsg@plt>
   48318:	mov	r1, r0
   4831c:	mov	r0, r4
   48320:	bl	485b4 <__assert_fail@plt+0x35ddc>
   48324:	b	48018 <__assert_fail@plt+0x35840>
   48328:	mov	r3, #1
   4832c:	b	4825c <__assert_fail@plt+0x35a84>
   48330:	str	sl, [sp, #20]
   48334:	str	r1, [sp, #44]	; 0x2c
   48338:	mov	fp, #1
   4833c:	str	r1, [sp, #56]	; 0x38
   48340:	str	r1, [sp, #60]	; 0x3c
   48344:	str	r1, [sp, #48]	; 0x30
   48348:	b	47e98 <__assert_fail@plt+0x356c0>
   4834c:	ldr	sl, [sp, #44]	; 0x2c
   48350:	mov	fp, #1
   48354:	str	sl, [sp, #56]	; 0x38
   48358:	str	sl, [sp, #60]	; 0x3c
   4835c:	str	sl, [sp, #48]	; 0x30
   48360:	b	47e98 <__assert_fail@plt+0x356c0>
   48364:	movw	r1, #44888	; 0xaf58
   48368:	mov	r2, #5
   4836c:	movt	r1, #5
   48370:	b	48308 <__assert_fail@plt+0x35b30>
   48374:	mov	r2, #5
   48378:	movw	r1, #44932	; 0xaf84
   4837c:	mov	r0, #0
   48380:	movt	r1, #5
   48384:	bl	12298 <dcgettext@plt>
   48388:	mov	r1, r4
   4838c:	bl	485b4 <__assert_fail@plt+0x35ddc>
   48390:	b	48018 <__assert_fail@plt+0x35840>
   48394:	mov	r0, fp
   48398:	mov	r2, #5
   4839c:	movw	r1, #44968	; 0xafa8
   483a0:	movt	r1, #5
   483a4:	bl	12298 <dcgettext@plt>
   483a8:	mov	r1, r4
   483ac:	bl	485b4 <__assert_fail@plt+0x35ddc>
   483b0:	b	48018 <__assert_fail@plt+0x35840>
   483b4:	bl	122b0 <__stack_chk_fail@plt>
   483b8:	push	{r4, r5, r6, lr}
   483bc:	mov	r1, #47	; 0x2f
   483c0:	mov	r6, r0
   483c4:	bl	1267c <strrchr@plt>
   483c8:	subs	r5, r0, #0
   483cc:	beq	48420 <__assert_fail@plt+0x35c48>
   483d0:	rsb	r4, r6, r5
   483d4:	add	r0, r4, #11
   483d8:	add	r5, r4, #1
   483dc:	bl	12358 <xmalloc@plt>
   483e0:	mov	r1, r6
   483e4:	mov	r2, r4
   483e8:	bl	1222c <memcpy@plt>
   483ec:	mov	r3, #47	; 0x2f
   483f0:	mov	ip, r0
   483f4:	strb	r3, [r0, r4]
   483f8:	movw	r3, #45020	; 0xafdc
   483fc:	movt	r3, #5
   48400:	add	r2, ip, r5
   48404:	ldm	r3!, {r0, r1}
   48408:	ldrb	r3, [r3]
   4840c:	str	r0, [ip, r5]
   48410:	mov	r0, ip
   48414:	str	r1, [r2, #4]
   48418:	strb	r3, [r2, #8]
   4841c:	pop	{r4, r5, r6, pc}
   48420:	mov	r0, #9
   48424:	bl	12358 <xmalloc@plt>
   48428:	mov	ip, r0
   4842c:	b	483f8 <__assert_fail@plt+0x35c20>
   48430:	subs	r3, r0, #0
   48434:	beq	48468 <__assert_fail@plt+0x35c90>
   48438:	cmp	r3, #1
   4843c:	bne	48454 <__assert_fail@plt+0x35c7c>
   48440:	movw	r1, #45044	; 0xaff4
   48444:	mov	r0, #0
   48448:	movt	r1, #5
   4844c:	mov	r2, #5
   48450:	b	12298 <dcgettext@plt>
   48454:	movw	r1, #45060	; 0xb004
   48458:	mov	r0, #0
   4845c:	movt	r1, #5
   48460:	mov	r2, #5
   48464:	b	12298 <dcgettext@plt>
   48468:	movw	r1, #45032	; 0xafe8
   4846c:	mov	r2, #5
   48470:	movt	r1, #5
   48474:	b	12298 <dcgettext@plt>
   48478:	push	{r4, r5, lr}
   4847c:	sub	sp, sp, #12
   48480:	mov	r4, r0
   48484:	bl	12310 <bfd_get_error@plt>
   48488:	bl	126e8 <bfd_errmsg@plt>
   4848c:	movw	r3, #976	; 0x3d0
   48490:	movt	r3, #7
   48494:	mov	r5, r0
   48498:	ldr	r0, [r3]
   4849c:	bl	121b4 <fflush@plt>
   484a0:	cmp	r4, #0
   484a4:	movw	r1, #168	; 0xa8
   484a8:	movw	r3, #3468	; 0xd8c
   484ac:	movt	r1, #7
   484b0:	movt	r3, #7
   484b4:	beq	484e0 <__assert_fail@plt+0x35d08>
   484b8:	str	r4, [sp]
   484bc:	movw	r2, #38028	; 0x948c
   484c0:	ldr	r0, [r1]
   484c4:	movt	r2, #5
   484c8:	ldr	r3, [r3]
   484cc:	mov	r1, #1
   484d0:	str	r5, [sp, #4]
   484d4:	bl	125d4 <__fprintf_chk@plt>
   484d8:	add	sp, sp, #12
   484dc:	pop	{r4, r5, pc}
   484e0:	str	r5, [sp]
   484e4:	movw	r2, #38032	; 0x9490
   484e8:	ldr	r0, [r1]
   484ec:	movt	r2, #5
   484f0:	ldr	r3, [r3]
   484f4:	mov	r1, #1
   484f8:	bl	125d4 <__fprintf_chk@plt>
   484fc:	add	sp, sp, #12
   48500:	pop	{r4, r5, pc}
   48504:	push	{r3, lr}
   48508:	bl	48478 <__assert_fail@plt+0x35ca0>
   4850c:	mov	r0, #1
   48510:	bl	126a0 <xexit@plt>
   48514:	movw	ip, #976	; 0x3d0
   48518:	movt	ip, #7
   4851c:	push	{r4, r5, r6, lr}
   48520:	mov	r6, r0
   48524:	ldr	r0, [ip]
   48528:	mov	r5, r1
   4852c:	movw	r4, #168	; 0xa8
   48530:	bl	121b4 <fflush@plt>
   48534:	movt	r4, #7
   48538:	movw	ip, #3468	; 0xd8c
   4853c:	movt	ip, #7
   48540:	mov	r1, #1
   48544:	ldr	r0, [r4]
   48548:	movw	r2, #45080	; 0xb018
   4854c:	ldr	r3, [ip]
   48550:	movt	r2, #5
   48554:	bl	125d4 <__fprintf_chk@plt>
   48558:	mov	r2, r6
   4855c:	mov	r3, r5
   48560:	ldr	r0, [r4]
   48564:	mov	r1, #1
   48568:	bl	1246c <__vfprintf_chk@plt>
   4856c:	ldr	r1, [r4]
   48570:	mov	r0, #10
   48574:	pop	{r4, r5, r6, lr}
   48578:	b	12334 <_IO_putc@plt>
   4857c:	push	{r0, r1, r2, r3}
   48580:	movw	r3, #65176	; 0xfe98
   48584:	movt	r3, #6
   48588:	push	{lr}		; (str lr, [sp, #-4]!)
   4858c:	sub	sp, sp, #12
   48590:	add	r2, sp, #20
   48594:	ldr	r3, [r3]
   48598:	ldr	r0, [sp, #16]
   4859c:	mov	r1, r2
   485a0:	str	r2, [sp]
   485a4:	str	r3, [sp, #4]
   485a8:	bl	48514 <__assert_fail@plt+0x35d3c>
   485ac:	mov	r0, #1
   485b0:	bl	126a0 <xexit@plt>
   485b4:	push	{r0, r1, r2, r3}
   485b8:	push	{r4, lr}
   485bc:	movw	r4, #65176	; 0xfe98
   485c0:	movt	r4, #6
   485c4:	sub	sp, sp, #8
   485c8:	add	r3, sp, #20
   485cc:	ldr	r2, [r4]
   485d0:	mov	r1, r3
   485d4:	ldr	r0, [sp, #16]
   485d8:	str	r3, [sp]
   485dc:	str	r2, [sp, #4]
   485e0:	bl	48514 <__assert_fail@plt+0x35d3c>
   485e4:	ldr	r2, [sp, #4]
   485e8:	ldr	r3, [r4]
   485ec:	cmp	r2, r3
   485f0:	bne	48604 <__assert_fail@plt+0x35e2c>
   485f4:	add	sp, sp, #8
   485f8:	pop	{r4, lr}
   485fc:	add	sp, sp, #16
   48600:	bx	lr
   48604:	bl	122b0 <__stack_chk_fail@plt>
   48608:	push	{r4, lr}
   4860c:	movw	r0, #45088	; 0xb020
   48610:	movt	r0, #5
   48614:	bl	121e4 <bfd_set_default_target@plt>
   48618:	cmp	r0, #0
   4861c:	popne	{r4, pc}
   48620:	mov	r2, #5
   48624:	movw	r1, #45120	; 0xb040
   48628:	movt	r1, #5
   4862c:	bl	12298 <dcgettext@plt>
   48630:	mov	r4, r0
   48634:	bl	12310 <bfd_get_error@plt>
   48638:	bl	126e8 <bfd_errmsg@plt>
   4863c:	movw	r1, #45088	; 0xb020
   48640:	movt	r1, #5
   48644:	mov	r2, r0
   48648:	mov	r0, r4
   4864c:	bl	4857c <__assert_fail@plt+0x35da4>
   48650:	movw	r3, #976	; 0x3d0
   48654:	movt	r3, #7
   48658:	push	{r4, r5, r6, lr}
   4865c:	mov	r4, r0
   48660:	movw	r5, #168	; 0xa8
   48664:	ldr	r0, [r3]
   48668:	movt	r5, #7
   4866c:	bl	121b4 <fflush@plt>
   48670:	mov	r2, #5
   48674:	movw	r1, #45164	; 0xb06c
   48678:	mov	r0, #0
   4867c:	movt	r1, #5
   48680:	ldr	r6, [r5]
   48684:	bl	12298 <dcgettext@plt>
   48688:	movw	r3, #3468	; 0xd8c
   4868c:	movt	r3, #7
   48690:	mov	r1, #1
   48694:	ldr	r3, [r3]
   48698:	mov	r2, r0
   4869c:	mov	r0, r6
   486a0:	bl	125d4 <__fprintf_chk@plt>
   486a4:	ldr	r3, [r4]
   486a8:	cmp	r3, #0
   486ac:	beq	486d0 <__assert_fail@plt+0x35ef8>
   486b0:	movw	r2, #18540	; 0x486c
   486b4:	ldr	r0, [r5]
   486b8:	movt	r2, #5
   486bc:	mov	r1, #1
   486c0:	bl	125d4 <__fprintf_chk@plt>
   486c4:	ldr	r3, [r4, #4]!
   486c8:	cmp	r3, #0
   486cc:	bne	486b0 <__assert_fail@plt+0x35ed8>
   486d0:	ldr	r1, [r5]
   486d4:	mov	r0, #10
   486d8:	pop	{r4, r5, r6, lr}
   486dc:	b	12694 <fputc@plt>
   486e0:	push	{r4, r5, r6, lr}
   486e4:	subs	r4, r0, #0
   486e8:	mov	r5, r1
   486ec:	beq	48768 <__assert_fail@plt+0x35f90>
   486f0:	mov	r2, #5
   486f4:	movw	r1, #45208	; 0xb098
   486f8:	mov	r0, #0
   486fc:	movt	r1, #5
   48700:	bl	12298 <dcgettext@plt>
   48704:	mov	r3, r4
   48708:	mov	r1, #1
   4870c:	mov	r2, r0
   48710:	mov	r0, r5
   48714:	bl	125d4 <__fprintf_chk@plt>
   48718:	bl	12304 <bfd_target_list@plt>
   4871c:	ldr	r3, [r0]
   48720:	mov	r6, r0
   48724:	cmp	r3, #0
   48728:	movne	r4, r0
   4872c:	beq	48750 <__assert_fail@plt+0x35f78>
   48730:	movw	r2, #18540	; 0x486c
   48734:	mov	r0, r5
   48738:	movt	r2, #5
   4873c:	mov	r1, #1
   48740:	bl	125d4 <__fprintf_chk@plt>
   48744:	ldr	r3, [r4, #4]!
   48748:	cmp	r3, #0
   4874c:	bne	48730 <__assert_fail@plt+0x35f58>
   48750:	mov	r1, r5
   48754:	mov	r0, #10
   48758:	bl	12694 <fputc@plt>
   4875c:	mov	r0, r6
   48760:	pop	{r4, r5, r6, lr}
   48764:	b	121f0 <free@plt>
   48768:	mov	r2, #5
   4876c:	movw	r1, #45188	; 0xb084
   48770:	movt	r1, #5
   48774:	bl	12298 <dcgettext@plt>
   48778:	mov	r1, #1
   4877c:	mov	r2, r0
   48780:	mov	r0, r5
   48784:	bl	125d4 <__fprintf_chk@plt>
   48788:	b	48718 <__assert_fail@plt+0x35f40>
   4878c:	push	{r4, r5, r6, lr}
   48790:	subs	r4, r0, #0
   48794:	mov	r5, r1
   48798:	beq	48814 <__assert_fail@plt+0x3603c>
   4879c:	mov	r2, #5
   487a0:	movw	r1, #45260	; 0xb0cc
   487a4:	mov	r0, #0
   487a8:	movt	r1, #5
   487ac:	bl	12298 <dcgettext@plt>
   487b0:	mov	r3, r4
   487b4:	mov	r1, #1
   487b8:	mov	r2, r0
   487bc:	mov	r0, r5
   487c0:	bl	125d4 <__fprintf_chk@plt>
   487c4:	bl	121c0 <bfd_arch_list@plt>
   487c8:	ldr	r3, [r0]
   487cc:	mov	r6, r0
   487d0:	cmp	r3, #0
   487d4:	movne	r4, r0
   487d8:	beq	487fc <__assert_fail@plt+0x36024>
   487dc:	movw	r2, #18540	; 0x486c
   487e0:	mov	r0, r5
   487e4:	movt	r2, #5
   487e8:	mov	r1, #1
   487ec:	bl	125d4 <__fprintf_chk@plt>
   487f0:	ldr	r3, [r4, #4]!
   487f4:	cmp	r3, #0
   487f8:	bne	487dc <__assert_fail@plt+0x36004>
   487fc:	mov	r1, r5
   48800:	mov	r0, #10
   48804:	bl	12694 <fputc@plt>
   48808:	mov	r0, r6
   4880c:	pop	{r4, r5, r6, lr}
   48810:	b	121f0 <free@plt>
   48814:	mov	r2, #5
   48818:	movw	r1, #45232	; 0xb0b0
   4881c:	movt	r1, #5
   48820:	bl	12298 <dcgettext@plt>
   48824:	mov	r1, #1
   48828:	mov	r2, r0
   4882c:	mov	r0, r5
   48830:	bl	125d4 <__fprintf_chk@plt>
   48834:	b	487c4 <__assert_fail@plt+0x35fec>
   48838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4883c:	mov	r2, #5
   48840:	sub	sp, sp, #44	; 0x2c
   48844:	movw	r1, #45292	; 0xb0ec
   48848:	mov	r0, #0
   4884c:	movt	r1, #5
   48850:	bl	12298 <dcgettext@plt>
   48854:	movw	r2, #45320	; 0xb108
   48858:	movt	r2, #5
   4885c:	movw	fp, #172	; 0xac
   48860:	movt	fp, #7
   48864:	mov	r1, r0
   48868:	mov	r0, #1
   4886c:	bl	125bc <__printf_chk@plt>
   48870:	mov	r0, #0
   48874:	bl	4ef28 <warn@@Base+0x5330>
   48878:	ldr	r3, [fp]
   4887c:	ldr	r4, [r3]
   48880:	cmp	r4, #0
   48884:	mov	r6, r0
   48888:	beq	489d8 <__assert_fail@plt+0x36200>
   4888c:	mov	r8, #4
   48890:	mov	r7, #1
   48894:	ldr	r1, [r4]
   48898:	mov	r0, r6
   4889c:	bl	125f8 <bfd_openw@plt>
   488a0:	mov	r2, #5
   488a4:	movw	r1, #45348	; 0xb124
   488a8:	movt	r1, #5
   488ac:	mov	r5, r0
   488b0:	mov	r0, #0
   488b4:	bl	12298 <dcgettext@plt>
   488b8:	ldr	sl, [r4]
   488bc:	mov	r1, r0
   488c0:	ldr	r0, [r4, #12]
   488c4:	str	r1, [sp, #8]
   488c8:	bl	48430 <__assert_fail@plt+0x35c58>
   488cc:	mov	r9, r0
   488d0:	ldr	r0, [r4, #8]
   488d4:	bl	48430 <__assert_fail@plt+0x35c58>
   488d8:	ldr	r1, [sp, #8]
   488dc:	mov	r2, sl
   488e0:	mov	r3, r9
   488e4:	str	r0, [sp]
   488e8:	mov	r0, #1
   488ec:	bl	125bc <__printf_chk@plt>
   488f0:	cmp	r5, #0
   488f4:	beq	489c8 <__assert_fail@plt+0x361f0>
   488f8:	mov	r0, r5
   488fc:	mov	r1, #1
   48900:	bl	12484 <bfd_set_format@plt>
   48904:	subs	r9, r0, #0
   48908:	movne	r4, #2
   4890c:	bne	48920 <__assert_fail@plt+0x36148>
   48910:	b	489ac <__assert_fail@plt+0x361d4>
   48914:	add	r4, r4, #1
   48918:	cmp	r4, #92	; 0x5c
   4891c:	beq	4896c <__assert_fail@plt+0x36194>
   48920:	ldr	r3, [r5, #4]
   48924:	mov	r0, r5
   48928:	mov	r1, r4
   4892c:	mov	r2, #0
   48930:	ldr	r3, [r3, #336]	; 0x150
   48934:	blx	r3
   48938:	cmp	r0, #0
   4893c:	beq	48914 <__assert_fail@plt+0x3613c>
   48940:	mov	r0, r4
   48944:	mov	r1, #0
   48948:	bl	1252c <bfd_printable_arch_mach@plt>
   4894c:	add	r4, r4, #1
   48950:	movw	r1, #45376	; 0xb140
   48954:	movt	r1, #5
   48958:	mov	r2, r0
   4895c:	mov	r0, #1
   48960:	bl	125bc <__printf_chk@plt>
   48964:	cmp	r4, #92	; 0x5c
   48968:	bne	48920 <__assert_fail@plt+0x36148>
   4896c:	mov	r0, r5
   48970:	bl	124f0 <bfd_close_all_done@plt>
   48974:	ldr	r3, [fp]
   48978:	ldr	r4, [r3, r8]
   4897c:	add	r8, r8, #4
   48980:	cmp	r4, #0
   48984:	bne	48894 <__assert_fail@plt+0x360bc>
   48988:	mov	r0, r6
   4898c:	bl	122bc <unlink@plt>
   48990:	mov	r0, r6
   48994:	bl	121f0 <free@plt>
   48998:	cmp	r7, #0
   4899c:	moveq	r0, #1
   489a0:	bne	489e4 <__assert_fail@plt+0x3620c>
   489a4:	add	sp, sp, #44	; 0x2c
   489a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   489ac:	bl	12310 <bfd_get_error@plt>
   489b0:	cmp	r0, #5
   489b4:	beq	4896c <__assert_fail@plt+0x36194>
   489b8:	ldr	r0, [r4]
   489bc:	mov	r7, r9
   489c0:	bl	48478 <__assert_fail@plt+0x35ca0>
   489c4:	b	4896c <__assert_fail@plt+0x36194>
   489c8:	mov	r0, r6
   489cc:	mov	r7, r5
   489d0:	bl	48478 <__assert_fail@plt+0x35ca0>
   489d4:	b	48974 <__assert_fail@plt+0x3619c>
   489d8:	bl	122bc <unlink@plt>
   489dc:	mov	r0, r6
   489e0:	bl	121f0 <free@plt>
   489e4:	movw	r0, #45384	; 0xb148
   489e8:	movt	r0, #5
   489ec:	bl	123f4 <getenv@plt>
   489f0:	cmp	r0, #0
   489f4:	beq	48d38 <__assert_fail@plt+0x36560>
   489f8:	mov	r1, #0
   489fc:	mov	r2, #10
   48a00:	bl	12184 <strtol@plt>
   48a04:	cmp	r0, #0
   48a08:	str	r0, [sp, #32]
   48a0c:	beq	48d38 <__assert_fail@plt+0x36560>
   48a10:	movw	sl, #976	; 0x3d0
   48a14:	movt	sl, #7
   48a18:	mov	r3, #1
   48a1c:	mov	r2, #0
   48a20:	str	r3, [sp, #36]	; 0x24
   48a24:	str	r2, [sp, #16]
   48a28:	ldr	r6, [fp]
   48a2c:	ldr	r3, [sp, #16]
   48a30:	ldr	r2, [sp, #16]
   48a34:	lsl	r3, r3, #2
   48a38:	str	r3, [sp, #24]
   48a3c:	ldr	r3, [r6, r2, lsl #2]
   48a40:	cmp	r3, #0
   48a44:	beq	48d24 <__assert_fail@plt+0x3654c>
   48a48:	ldr	r0, [r3]
   48a4c:	ldr	r3, [sp, #16]
   48a50:	add	r9, r3, #1
   48a54:	bl	124e4 <strlen@plt>
   48a58:	ldr	r2, [sp, #32]
   48a5c:	add	r5, r0, #16
   48a60:	cmp	r5, r2
   48a64:	bge	48d14 <__assert_fail@plt+0x3653c>
   48a68:	ldr	r2, [sp, #24]
   48a6c:	add	r2, r2, #4
   48a70:	str	r2, [sp, #20]
   48a74:	add	r4, r6, r2
   48a78:	ldr	r3, [r6, r2]
   48a7c:	cmp	r3, #0
   48a80:	beq	48ab4 <__assert_fail@plt+0x362dc>
   48a84:	ldr	r6, [sp, #32]
   48a88:	b	48a9c <__assert_fail@plt+0x362c4>
   48a8c:	ldr	r3, [r4, #4]!
   48a90:	add	r9, r9, #1
   48a94:	cmp	r3, #0
   48a98:	beq	48ab4 <__assert_fail@plt+0x362dc>
   48a9c:	ldr	r0, [r3]
   48aa0:	add	r5, r5, #1
   48aa4:	bl	124e4 <strlen@plt>
   48aa8:	add	r5, r5, r0
   48aac:	cmp	r5, r6
   48ab0:	blt	48a8c <__assert_fail@plt+0x362b4>
   48ab4:	movw	r1, #45392	; 0xb150
   48ab8:	movw	r3, #10140	; 0x279c
   48abc:	movt	r1, #5
   48ac0:	movt	r3, #5
   48ac4:	mov	r0, #1
   48ac8:	mov	r2, #15
   48acc:	bl	125bc <__printf_chk@plt>
   48ad0:	ldr	r3, [sp, #16]
   48ad4:	cmp	r9, r3
   48ad8:	ble	48b30 <__assert_fail@plt+0x36358>
   48adc:	ldr	r3, [fp]
   48ae0:	ldr	r2, [sp, #24]
   48ae4:	ldr	r3, [r3, r2]
   48ae8:	cmp	r3, #0
   48aec:	beq	48b30 <__assert_fail@plt+0x36358>
   48af0:	ldr	r5, [sp, #20]
   48af4:	ldr	r4, [sp, #16]
   48af8:	b	48b10 <__assert_fail@plt+0x36338>
   48afc:	ldr	r3, [fp]
   48b00:	ldr	r3, [r3, r5]
   48b04:	add	r5, r5, #4
   48b08:	cmp	r3, #0
   48b0c:	beq	48b30 <__assert_fail@plt+0x36358>
   48b10:	ldr	r2, [r3]
   48b14:	add	r4, r4, #1
   48b18:	movw	r1, #18832	; 0x4990
   48b1c:	mov	r0, #1
   48b20:	movt	r1, #5
   48b24:	bl	125bc <__printf_chk@plt>
   48b28:	cmp	r4, r9
   48b2c:	bne	48afc <__assert_fail@plt+0x36324>
   48b30:	ldr	r1, [sl]
   48b34:	mov	r0, #10
   48b38:	bl	12334 <_IO_putc@plt>
   48b3c:	mov	r0, #0
   48b40:	bl	4ef28 <warn@@Base+0x5330>
   48b44:	mov	r8, #2
   48b48:	mov	r2, #1
   48b4c:	str	r2, [sp, #28]
   48b50:	str	r0, [sp, #12]
   48b54:	b	48b64 <__assert_fail@plt+0x3638c>
   48b58:	add	r8, r8, #1
   48b5c:	cmp	r8, #92	; 0x5c
   48b60:	beq	48cb4 <__assert_fail@plt+0x364dc>
   48b64:	mov	r1, #0
   48b68:	mov	r0, r8
   48b6c:	bl	1252c <bfd_printable_arch_mach@plt>
   48b70:	movw	r1, #45400	; 0xb158
   48b74:	movt	r1, #5
   48b78:	bl	12178 <strcmp@plt>
   48b7c:	cmp	r0, #0
   48b80:	beq	48b58 <__assert_fail@plt+0x36380>
   48b84:	mov	r1, #0
   48b88:	mov	r0, r8
   48b8c:	bl	1252c <bfd_printable_arch_mach@plt>
   48b90:	movw	r1, #17352	; 0x43c8
   48b94:	mov	r2, #14
   48b98:	movt	r1, #5
   48b9c:	mov	r3, r0
   48ba0:	mov	r0, #1
   48ba4:	bl	125bc <__printf_chk@plt>
   48ba8:	ldr	r3, [sp, #16]
   48bac:	cmp	r9, r3
   48bb0:	ble	48c9c <__assert_fail@plt+0x364c4>
   48bb4:	ldr	r3, [fp]
   48bb8:	ldr	r2, [sp, #24]
   48bbc:	ldr	r4, [r3, r2]
   48bc0:	cmp	r4, #0
   48bc4:	beq	48c9c <__assert_fail@plt+0x364c4>
   48bc8:	ldr	r7, [sp, #20]
   48bcc:	ldr	r6, [sp, #16]
   48bd0:	b	48c10 <__assert_fail@plt+0x36438>
   48bd4:	movw	r1, #18832	; 0x4990
   48bd8:	ldr	r2, [r4]
   48bdc:	mov	r0, #1
   48be0:	movt	r1, #5
   48be4:	bl	125bc <__printf_chk@plt>
   48be8:	mov	r0, r5
   48bec:	add	r6, r6, #1
   48bf0:	bl	124f0 <bfd_close_all_done@plt>
   48bf4:	cmp	r6, r9
   48bf8:	beq	48c9c <__assert_fail@plt+0x364c4>
   48bfc:	ldr	r3, [fp]
   48c00:	ldr	r4, [r3, r7]
   48c04:	add	r7, r7, #4
   48c08:	cmp	r4, #0
   48c0c:	beq	48c9c <__assert_fail@plt+0x364c4>
   48c10:	ldr	r0, [sp, #12]
   48c14:	ldr	r1, [r4]
   48c18:	bl	125f8 <bfd_openw@plt>
   48c1c:	subs	r5, r0, #0
   48c20:	beq	48d04 <__assert_fail@plt+0x3652c>
   48c24:	mov	r1, #1
   48c28:	bl	12484 <bfd_set_format@plt>
   48c2c:	subs	r3, r0, #0
   48c30:	beq	48ce0 <__assert_fail@plt+0x36508>
   48c34:	ldr	r3, [r5, #4]
   48c38:	mov	r0, r5
   48c3c:	mov	r1, r8
   48c40:	mov	r2, #0
   48c44:	ldr	r3, [r3, #336]	; 0x150
   48c48:	blx	r3
   48c4c:	cmp	r0, #0
   48c50:	bne	48bd4 <__assert_fail@plt+0x363fc>
   48c54:	ldr	r0, [r4]
   48c58:	bl	124e4 <strlen@plt>
   48c5c:	cmp	r0, #0
   48c60:	beq	48c7c <__assert_fail@plt+0x364a4>
   48c64:	mov	r4, r0
   48c68:	mov	r0, #45	; 0x2d
   48c6c:	ldr	r1, [sl]
   48c70:	bl	12334 <_IO_putc@plt>
   48c74:	subs	r4, r4, #1
   48c78:	bne	48c68 <__assert_fail@plt+0x36490>
   48c7c:	mov	r0, #32
   48c80:	ldr	r1, [sl]
   48c84:	bl	12334 <_IO_putc@plt>
   48c88:	cmp	r5, #0
   48c8c:	bne	48be8 <__assert_fail@plt+0x36410>
   48c90:	add	r6, r6, #1
   48c94:	cmp	r6, r9
   48c98:	bne	48bfc <__assert_fail@plt+0x36424>
   48c9c:	mov	r0, #10
   48ca0:	ldr	r1, [sl]
   48ca4:	add	r8, r8, #1
   48ca8:	bl	12334 <_IO_putc@plt>
   48cac:	cmp	r8, #92	; 0x5c
   48cb0:	bne	48b64 <__assert_fail@plt+0x3638c>
   48cb4:	ldr	r2, [sp, #28]
   48cb8:	ldr	r3, [sp, #36]	; 0x24
   48cbc:	cmp	r2, #0
   48cc0:	ldr	r0, [sp, #12]
   48cc4:	moveq	r3, #0
   48cc8:	str	r3, [sp, #36]	; 0x24
   48ccc:	bl	122bc <unlink@plt>
   48cd0:	ldr	r0, [sp, #12]
   48cd4:	bl	121f0 <free@plt>
   48cd8:	str	r9, [sp, #16]
   48cdc:	b	48a28 <__assert_fail@plt+0x36250>
   48ce0:	str	r3, [sp, #8]
   48ce4:	bl	12310 <bfd_get_error@plt>
   48ce8:	ldr	r3, [sp, #8]
   48cec:	cmp	r0, #5
   48cf0:	beq	48c54 <__assert_fail@plt+0x3647c>
   48cf4:	ldr	r0, [r4]
   48cf8:	str	r3, [sp, #28]
   48cfc:	bl	48478 <__assert_fail@plt+0x35ca0>
   48d00:	b	48c54 <__assert_fail@plt+0x3647c>
   48d04:	ldr	r0, [r4]
   48d08:	str	r5, [sp, #28]
   48d0c:	bl	48478 <__assert_fail@plt+0x35ca0>
   48d10:	b	48c54 <__assert_fail@plt+0x3647c>
   48d14:	ldr	r3, [sp, #24]
   48d18:	add	r3, r3, #4
   48d1c:	str	r3, [sp, #20]
   48d20:	b	48ab4 <__assert_fail@plt+0x362dc>
   48d24:	ldr	r3, [sp, #36]	; 0x24
   48d28:	rsbs	r0, r3, #1
   48d2c:	movcc	r0, #0
   48d30:	add	sp, sp, #44	; 0x2c
   48d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48d38:	mov	r2, #80	; 0x50
   48d3c:	str	r2, [sp, #32]
   48d40:	b	48a10 <__assert_fail@plt+0x36238>
   48d44:	push	{r4, r5, r6, r7, r8, r9, lr}
   48d48:	movw	r6, #65176	; 0xfe98
   48d4c:	movt	r6, #6
   48d50:	sub	sp, sp, #196	; 0xc4
   48d54:	cmp	r2, #0
   48d58:	mov	r8, r0
   48d5c:	ldr	r3, [r6]
   48d60:	mov	r7, r1
   48d64:	str	r3, [sp, #188]	; 0xbc
   48d68:	bne	48d9c <__assert_fail@plt+0x365c4>
   48d6c:	ldr	r3, [r7]
   48d70:	mov	r0, r8
   48d74:	movw	r2, #17728	; 0x4540
   48d78:	mov	r1, #1
   48d7c:	movt	r2, #5
   48d80:	bl	125d4 <__fprintf_chk@plt>
   48d84:	ldr	r2, [sp, #188]	; 0xbc
   48d88:	ldr	r3, [r6]
   48d8c:	cmp	r2, r3
   48d90:	bne	48e74 <__assert_fail@plt+0x3669c>
   48d94:	add	sp, sp, #196	; 0xc4
   48d98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   48d9c:	ldr	r3, [r1, #4]
   48da0:	mov	r0, r1
   48da4:	add	r1, sp, #32
   48da8:	ldr	r3, [r3, #252]	; 0xfc
   48dac:	blx	r3
   48db0:	cmp	r0, #0
   48db4:	bne	48d6c <__assert_fail@plt+0x36594>
   48db8:	ldr	r3, [sp, #112]	; 0x70
   48dbc:	add	r0, sp, #192	; 0xc0
   48dc0:	str	r3, [r0, #-164]!	; 0xffffff5c
   48dc4:	bl	12280 <ctime@plt>
   48dc8:	subs	r3, r0, #0
   48dcc:	beq	48e48 <__assert_fail@plt+0x36670>
   48dd0:	add	r9, sp, #148	; 0x94
   48dd4:	add	r2, r3, #4
   48dd8:	mov	r1, #1
   48ddc:	add	r3, r3, #20
   48de0:	str	r2, [sp]
   48de4:	mov	r0, r9
   48de8:	str	r3, [sp, #4]
   48dec:	mov	r2, #40	; 0x28
   48df0:	movw	r3, #45432	; 0xb178
   48df4:	movt	r3, #5
   48df8:	bl	12568 <__sprintf_chk@plt>
   48dfc:	ldr	r0, [sp, #48]	; 0x30
   48e00:	add	r1, sp, #136	; 0x88
   48e04:	bl	49390 <__assert_fail@plt+0x36bb8>
   48e08:	ldr	r1, [sp, #56]	; 0x38
   48e0c:	ldr	r3, [sp, #60]	; 0x3c
   48e10:	movw	r2, #45444	; 0xb184
   48e14:	ldrd	r4, [sp, #80]	; 0x50
   48e18:	movt	r2, #5
   48e1c:	str	r1, [sp]
   48e20:	mov	r0, r8
   48e24:	str	r3, [sp, #4]
   48e28:	mov	r1, #1
   48e2c:	str	r9, [sp, #16]
   48e30:	add	r3, sp, #137	; 0x89
   48e34:	strd	r4, [sp, #8]
   48e38:	mov	ip, #0
   48e3c:	strb	ip, [sp, #146]	; 0x92
   48e40:	bl	125d4 <__fprintf_chk@plt>
   48e44:	b	48d6c <__assert_fail@plt+0x36594>
   48e48:	mov	r2, #5
   48e4c:	movw	r1, #45412	; 0xb164
   48e50:	movt	r1, #5
   48e54:	add	r9, sp, #148	; 0x94
   48e58:	bl	12298 <dcgettext@plt>
   48e5c:	mov	r1, #1
   48e60:	mov	r2, #40	; 0x28
   48e64:	mov	r3, r0
   48e68:	mov	r0, r9
   48e6c:	bl	12568 <__sprintf_chk@plt>
   48e70:	b	48dfc <__assert_fail@plt+0x36624>
   48e74:	bl	122b0 <__stack_chk_fail@plt>
   48e78:	push	{r4, lr}
   48e7c:	bl	483b8 <__assert_fail@plt+0x35be0>
   48e80:	mov	r4, r0
   48e84:	bl	12400 <mkstemp64@plt>
   48e88:	cmn	r0, #1
   48e8c:	beq	48e9c <__assert_fail@plt+0x366c4>
   48e90:	bl	127a8 <close@plt>
   48e94:	mov	r0, r4
   48e98:	pop	{r4, pc}
   48e9c:	mov	r0, r4
   48ea0:	bl	121f0 <free@plt>
   48ea4:	mov	r0, #0
   48ea8:	pop	{r4, pc}
   48eac:	push	{r3, lr}
   48eb0:	bl	483b8 <__assert_fail@plt+0x35be0>
   48eb4:	pop	{r3, lr}
   48eb8:	b	126c4 <mkdtemp@plt>
   48ebc:	push	{r4, r5, r6, lr}
   48ec0:	movw	r4, #65176	; 0xfe98
   48ec4:	movt	r4, #6
   48ec8:	sub	sp, sp, #8
   48ecc:	mov	r6, r1
   48ed0:	mov	r2, #0
   48ed4:	ldr	r3, [r4]
   48ed8:	mov	r1, sp
   48edc:	mov	r5, r0
   48ee0:	str	r3, [sp, #4]
   48ee4:	bl	1216c <bfd_scan_vma@plt>
   48ee8:	ldr	r3, [sp]
   48eec:	ldrb	r3, [r3]
   48ef0:	cmp	r3, #0
   48ef4:	bne	48f14 <__assert_fail@plt+0x3673c>
   48ef8:	ldr	r2, [sp, #4]
   48efc:	ldr	r3, [r4]
   48f00:	cmp	r2, r3
   48f04:	bne	48f10 <__assert_fail@plt+0x36738>
   48f08:	add	sp, sp, #8
   48f0c:	pop	{r4, r5, r6, pc}
   48f10:	bl	122b0 <__stack_chk_fail@plt>
   48f14:	mov	r2, #5
   48f18:	movw	r1, #45468	; 0xb19c
   48f1c:	mov	r0, #0
   48f20:	movt	r1, #5
   48f24:	bl	12298 <dcgettext@plt>
   48f28:	mov	r1, r6
   48f2c:	mov	r2, r5
   48f30:	bl	4857c <__assert_fail@plt+0x35da4>
   48f34:	push	{r4, r5, r6, r7, lr}
   48f38:	movw	r4, #65176	; 0xfe98
   48f3c:	movt	r4, #6
   48f40:	sub	sp, sp, #116	; 0x74
   48f44:	mov	r1, r0
   48f48:	mov	r5, r0
   48f4c:	ldr	r3, [r4]
   48f50:	mov	r2, sp
   48f54:	mov	r0, #3
   48f58:	str	r3, [sp, #108]	; 0x6c
   48f5c:	bl	1276c <__xstat64@plt>
   48f60:	cmp	r0, #0
   48f64:	blt	48fb4 <__assert_fail@plt+0x367dc>
   48f68:	ldr	r3, [sp, #16]
   48f6c:	and	r3, r3, #61440	; 0xf000
   48f70:	cmp	r3, #32768	; 0x8000
   48f74:	bne	49010 <__assert_fail@plt+0x36838>
   48f78:	ldrd	r2, [sp, #48]	; 0x30
   48f7c:	cmp	r2, #0
   48f80:	sbcs	r1, r3, #0
   48f84:	movwlt	r1, #45592	; 0xb218
   48f88:	movlt	r0, #0
   48f8c:	movtlt	r1, #5
   48f90:	blt	4901c <__assert_fail@plt+0x36844>
   48f94:	mov	r0, r2
   48f98:	mov	r1, r3
   48f9c:	ldr	r2, [sp, #108]	; 0x6c
   48fa0:	ldr	r3, [r4]
   48fa4:	cmp	r2, r3
   48fa8:	bne	49038 <__assert_fail@plt+0x36860>
   48fac:	add	sp, sp, #116	; 0x74
   48fb0:	pop	{r4, r5, r6, r7, pc}
   48fb4:	bl	1255c <__errno_location@plt>
   48fb8:	ldr	r3, [r0]
   48fbc:	mov	r6, r0
   48fc0:	cmp	r3, #2
   48fc4:	movweq	r1, #45488	; 0xb1b0
   48fc8:	moveq	r0, #0
   48fcc:	movteq	r1, #5
   48fd0:	beq	4901c <__assert_fail@plt+0x36844>
   48fd4:	mov	r2, #5
   48fd8:	movw	r1, #45508	; 0xb1c4
   48fdc:	mov	r0, #0
   48fe0:	movt	r1, #5
   48fe4:	bl	12298 <dcgettext@plt>
   48fe8:	mov	r7, r0
   48fec:	ldr	r0, [r6]
   48ff0:	bl	12460 <strerror@plt>
   48ff4:	mov	r1, r5
   48ff8:	mov	r2, r0
   48ffc:	mov	r0, r7
   49000:	bl	485b4 <__assert_fail@plt+0x35ddc>
   49004:	mvn	r0, #0
   49008:	mov	r1, r0
   4900c:	b	48f9c <__assert_fail@plt+0x367c4>
   49010:	movw	r1, #45552	; 0xb1f0
   49014:	movt	r1, #5
   49018:	mov	r0, #0
   4901c:	mov	r2, #5
   49020:	bl	12298 <dcgettext@plt>
   49024:	mov	r1, r5
   49028:	bl	485b4 <__assert_fail@plt+0x35ddc>
   4902c:	mvn	r0, #0
   49030:	mov	r1, r0
   49034:	b	48f9c <__assert_fail@plt+0x367c4>
   49038:	bl	122b0 <__stack_chk_fail@plt>
   4903c:	push	{r4, r5, r6, r7, r8, lr}
   49040:	subs	r5, r0, #0
   49044:	sub	sp, sp, #8
   49048:	beq	4911c <__assert_fail@plt+0x36944>
   4904c:	ldr	r3, [r5, #148]	; 0x94
   49050:	cmp	r3, #0
   49054:	beq	490fc <__assert_fail@plt+0x36924>
   49058:	ldrb	r2, [r3, #44]	; 0x2c
   4905c:	tst	r2, #1
   49060:	bne	490fc <__assert_fail@plt+0x36924>
   49064:	ldr	r6, [r3]
   49068:	movw	r4, #3372	; 0xd2c
   4906c:	movt	r4, #7
   49070:	mov	r0, r6
   49074:	bl	124e4 <strlen@plt>
   49078:	ldr	r8, [r5]
   4907c:	mov	r7, r0
   49080:	mov	r0, r8
   49084:	bl	124e4 <strlen@plt>
   49088:	ldr	r3, [r4]
   4908c:	add	r0, r7, r0
   49090:	add	r7, r0, #3
   49094:	cmp	r7, r3
   49098:	bls	49108 <__assert_fail@plt+0x36930>
   4909c:	cmp	r3, #0
   490a0:	bne	49110 <__assert_fail@plt+0x36938>
   490a4:	add	r0, r7, r7, lsr #1
   490a8:	mov	r1, #0
   490ac:	str	r0, [r4]
   490b0:	bl	122a4 <bfd_malloc@plt>
   490b4:	movw	r6, #3372	; 0xd2c
   490b8:	movt	r6, #7
   490bc:	cmp	r0, #0
   490c0:	str	r0, [r4, #4]
   490c4:	beq	490f8 <__assert_fail@plt+0x36920>
   490c8:	ldr	r3, [r5, #148]	; 0x94
   490cc:	ldr	r8, [r5]
   490d0:	ldr	r6, [r3]
   490d4:	stm	sp, {r6, r8}
   490d8:	mov	r1, #1
   490dc:	mvn	r2, #0
   490e0:	movw	r3, #45684	; 0xb274
   490e4:	movt	r3, #5
   490e8:	bl	12568 <__sprintf_chk@plt>
   490ec:	ldr	r0, [r4, #4]
   490f0:	add	sp, sp, #8
   490f4:	pop	{r4, r5, r6, r7, r8, pc}
   490f8:	str	r0, [r6]
   490fc:	ldr	r0, [r5]
   49100:	add	sp, sp, #8
   49104:	pop	{r4, r5, r6, r7, r8, pc}
   49108:	ldr	r0, [r4, #4]
   4910c:	b	490d4 <__assert_fail@plt+0x368fc>
   49110:	ldr	r0, [r4, #4]
   49114:	bl	121f0 <free@plt>
   49118:	b	490a4 <__assert_fail@plt+0x368cc>
   4911c:	movw	r0, #45652	; 0xb254
   49120:	movw	r1, #45672	; 0xb268
   49124:	movw	r3, #44992	; 0xafc0
   49128:	movt	r0, #5
   4912c:	movt	r1, #5
   49130:	movw	r2, #606	; 0x25e
   49134:	movt	r3, #5
   49138:	bl	127d8 <__assert_fail@plt>
   4913c:	push	{r3}		; (str r3, [sp, #-4]!)
   49140:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   49144:	movw	r5, #65176	; 0xfe98
   49148:	movt	r5, #6
   4914c:	sub	sp, sp, #20
   49150:	mov	sl, r1
   49154:	mov	r8, r2
   49158:	ldr	r3, [r5]
   4915c:	mov	r6, r0
   49160:	ldr	r7, [sp, #52]	; 0x34
   49164:	movw	r4, #168	; 0xa8
   49168:	movt	r4, #7
   4916c:	str	r3, [sp, #12]
   49170:	bl	12310 <bfd_get_error@plt>
   49174:	bl	126e8 <bfd_errmsg@plt>
   49178:	movw	ip, #976	; 0x3d0
   4917c:	movt	ip, #7
   49180:	mov	r9, r0
   49184:	ldr	r0, [ip]
   49188:	bl	121b4 <fflush@plt>
   4918c:	movw	ip, #3468	; 0xd8c
   49190:	movt	ip, #7
   49194:	ldr	r1, [r4]
   49198:	add	r3, sp, #56	; 0x38
   4919c:	str	r3, [sp, #8]
   491a0:	ldr	r0, [ip]
   491a4:	bl	12778 <fputs@plt>
   491a8:	cmp	sl, #0
   491ac:	beq	49254 <__assert_fail@plt+0x36a7c>
   491b0:	cmp	r6, #0
   491b4:	beq	49270 <__assert_fail@plt+0x36a98>
   491b8:	cmp	r8, #0
   491bc:	beq	49254 <__assert_fail@plt+0x36a7c>
   491c0:	ldr	r2, [r8]
   491c4:	cmp	r2, #0
   491c8:	beq	49254 <__assert_fail@plt+0x36a7c>
   491cc:	str	r2, [sp]
   491d0:	mov	r3, r6
   491d4:	movw	r2, #45692	; 0xb27c
   491d8:	ldr	r0, [r4]
   491dc:	mov	r1, #1
   491e0:	movt	r2, #5
   491e4:	bl	125d4 <__fprintf_chk@plt>
   491e8:	cmp	r7, #0
   491ec:	beq	4921c <__assert_fail@plt+0x36a44>
   491f0:	mov	r1, #1
   491f4:	mov	r2, #2
   491f8:	ldr	r3, [r4]
   491fc:	movw	r0, #20728	; 0x50f8
   49200:	movt	r0, #5
   49204:	bl	12340 <fwrite@plt>
   49208:	mov	r2, r7
   4920c:	ldr	r0, [r4]
   49210:	mov	r1, #1
   49214:	ldr	r3, [sp, #8]
   49218:	bl	1246c <__vfprintf_chk@plt>
   4921c:	mov	r3, r9
   49220:	ldr	r0, [r4]
   49224:	movw	r2, #26956	; 0x694c
   49228:	mov	r1, #1
   4922c:	movt	r2, #5
   49230:	bl	125d4 <__fprintf_chk@plt>
   49234:	ldr	r2, [sp, #12]
   49238:	ldr	r3, [r5]
   4923c:	cmp	r2, r3
   49240:	bne	49280 <__assert_fail@plt+0x36aa8>
   49244:	add	sp, sp, #20
   49248:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   4924c:	add	sp, sp, #4
   49250:	bx	lr
   49254:	mov	r3, r6
   49258:	movw	r2, #45700	; 0xb284
   4925c:	ldr	r0, [r4]
   49260:	movt	r2, #5
   49264:	mov	r1, #1
   49268:	bl	125d4 <__fprintf_chk@plt>
   4926c:	b	491e8 <__assert_fail@plt+0x36a10>
   49270:	mov	r0, sl
   49274:	bl	4903c <__assert_fail@plt+0x36864>
   49278:	mov	r6, r0
   4927c:	b	491b8 <__assert_fail@plt+0x369e0>
   49280:	bl	122b0 <__stack_chk_fail@plt>
   49284:	ldrb	r3, [r0]
   49288:	cmp	r3, #47	; 0x2f
   4928c:	beq	49320 <__assert_fail@plt+0x36b48>
   49290:	cmp	r3, #0
   49294:	beq	492f0 <__assert_fail@plt+0x36b18>
   49298:	cmp	r3, #46	; 0x2e
   4929c:	beq	492f8 <__assert_fail@plt+0x36b20>
   492a0:	cmp	r3, #0
   492a4:	cmpne	r3, #47	; 0x2f
   492a8:	beq	492c8 <__assert_fail@plt+0x36af0>
   492ac:	add	r2, r0, #1
   492b0:	mov	r0, r2
   492b4:	add	r2, r2, #1
   492b8:	ldrb	r3, [r0]
   492bc:	cmp	r3, #47	; 0x2f
   492c0:	cmpne	r3, #0
   492c4:	bne	492b0 <__assert_fail@plt+0x36ad8>
   492c8:	cmp	r3, #47	; 0x2f
   492cc:	bne	49290 <__assert_fail@plt+0x36ab8>
   492d0:	add	r2, r0, #1
   492d4:	mov	r0, r2
   492d8:	add	r2, r2, #1
   492dc:	ldrb	r3, [r0]
   492e0:	cmp	r3, #47	; 0x2f
   492e4:	beq	492d4 <__assert_fail@plt+0x36afc>
   492e8:	cmp	r3, #0
   492ec:	bne	49298 <__assert_fail@plt+0x36ac0>
   492f0:	mov	r0, #1
   492f4:	bx	lr
   492f8:	ldrb	r3, [r0, #1]
   492fc:	cmp	r3, #46	; 0x2e
   49300:	addne	r0, r0, #1
   49304:	bne	492a0 <__assert_fail@plt+0x36ac8>
   49308:	ldrb	r3, [r0, #2]
   4930c:	add	r0, r0, #2
   49310:	cmp	r3, #0
   49314:	beq	49320 <__assert_fail@plt+0x36b48>
   49318:	cmp	r3, #47	; 0x2f
   4931c:	bne	492ac <__assert_fail@plt+0x36ad4>
   49320:	mov	r0, #0
   49324:	bx	lr
   49328:	push	{r3, lr}
   4932c:	mov	r2, r0
   49330:	movw	r1, #45704	; 0xb288
   49334:	movw	r3, #45320	; 0xb108
   49338:	movt	r1, #5
   4933c:	movt	r3, #5
   49340:	mov	r0, #1
   49344:	bl	125bc <__printf_chk@plt>
   49348:	mov	r2, #5
   4934c:	movw	r1, #45716	; 0xb294
   49350:	mov	r0, #0
   49354:	movt	r1, #5
   49358:	bl	12298 <dcgettext@plt>
   4935c:	mov	r1, r0
   49360:	mov	r0, #1
   49364:	bl	125bc <__printf_chk@plt>
   49368:	mov	r2, #5
   4936c:	movw	r1, #45768	; 0xb2c8
   49370:	mov	r0, #0
   49374:	movt	r1, #5
   49378:	bl	12298 <dcgettext@plt>
   4937c:	mov	r1, r0
   49380:	mov	r0, #1
   49384:	bl	125bc <__printf_chk@plt>
   49388:	mov	r0, #0
   4938c:	bl	124a8 <exit@plt>
   49390:	and	r3, r0, #61440	; 0xf000
   49394:	cmp	r3, #16384	; 0x4000
   49398:	moveq	r3, #100	; 0x64
   4939c:	beq	493dc <__assert_fail@plt+0x36c04>
   493a0:	cmp	r3, #40960	; 0xa000
   493a4:	moveq	r3, #108	; 0x6c
   493a8:	beq	493dc <__assert_fail@plt+0x36c04>
   493ac:	cmp	r3, #24576	; 0x6000
   493b0:	moveq	r3, #98	; 0x62
   493b4:	beq	493dc <__assert_fail@plt+0x36c04>
   493b8:	cmp	r3, #8192	; 0x2000
   493bc:	moveq	r3, #99	; 0x63
   493c0:	beq	493dc <__assert_fail@plt+0x36c04>
   493c4:	cmp	r3, #49152	; 0xc000
   493c8:	moveq	r3, #115	; 0x73
   493cc:	beq	493dc <__assert_fail@plt+0x36c04>
   493d0:	cmp	r3, #4096	; 0x1000
   493d4:	movne	r3, #45	; 0x2d
   493d8:	moveq	r3, #112	; 0x70
   493dc:	tst	r0, #256	; 0x100
   493e0:	strb	r3, [r1]
   493e4:	moveq	r3, #45	; 0x2d
   493e8:	movne	r3, #114	; 0x72
   493ec:	tst	r0, #128	; 0x80
   493f0:	strb	r3, [r1, #1]
   493f4:	moveq	r3, #45	; 0x2d
   493f8:	movne	r3, #119	; 0x77
   493fc:	tst	r0, #64	; 0x40
   49400:	strb	r3, [r1, #2]
   49404:	moveq	ip, #45	; 0x2d
   49408:	movne	ip, #120	; 0x78
   4940c:	tst	r0, #32
   49410:	strb	ip, [r1, #3]
   49414:	moveq	r3, #45	; 0x2d
   49418:	movne	r3, #114	; 0x72
   4941c:	tst	r0, #16
   49420:	strb	r3, [r1, #4]
   49424:	moveq	r3, #45	; 0x2d
   49428:	movne	r3, #119	; 0x77
   4942c:	tst	r0, #8
   49430:	strb	r3, [r1, #5]
   49434:	moveq	r2, #45	; 0x2d
   49438:	movne	r2, #120	; 0x78
   4943c:	tst	r0, #4
   49440:	strb	r2, [r1, #6]
   49444:	moveq	r3, #45	; 0x2d
   49448:	movne	r3, #114	; 0x72
   4944c:	tst	r0, #2
   49450:	strb	r3, [r1, #7]
   49454:	moveq	r3, #45	; 0x2d
   49458:	movne	r3, #119	; 0x77
   4945c:	tst	r0, #1
   49460:	strb	r3, [r1, #8]
   49464:	moveq	r3, #45	; 0x2d
   49468:	movne	r3, #120	; 0x78
   4946c:	tst	r0, #2048	; 0x800
   49470:	strb	r3, [r1, #9]
   49474:	beq	49488 <__assert_fail@plt+0x36cb0>
   49478:	cmp	ip, #120	; 0x78
   4947c:	movne	ip, #83	; 0x53
   49480:	moveq	ip, #115	; 0x73
   49484:	strb	ip, [r1, #3]
   49488:	tst	r0, #1024	; 0x400
   4948c:	beq	494a0 <__assert_fail@plt+0x36cc8>
   49490:	cmp	r2, #120	; 0x78
   49494:	movne	r2, #83	; 0x53
   49498:	moveq	r2, #115	; 0x73
   4949c:	strb	r2, [r1, #6]
   494a0:	tst	r0, #512	; 0x200
   494a4:	bxeq	lr
   494a8:	cmp	r3, #120	; 0x78
   494ac:	movne	r3, #84	; 0x54
   494b0:	moveq	r3, #116	; 0x74
   494b4:	strb	r3, [r1, #9]
   494b8:	bx	lr

000494bc <error@@Base>:
   494bc:	push	{r0, r1, r2, r3}
   494c0:	movw	r3, #976	; 0x3d0
   494c4:	push	{r4, r5, r6, r7, lr}
   494c8:	movw	r4, #65176	; 0xfe98
   494cc:	movt	r4, #6
   494d0:	movt	r3, #7
   494d4:	sub	sp, sp, #12
   494d8:	movw	r5, #168	; 0xa8
   494dc:	ldr	r2, [r4]
   494e0:	movt	r5, #7
   494e4:	ldr	r0, [r3]
   494e8:	ldr	r6, [sp, #32]
   494ec:	str	r2, [sp, #4]
   494f0:	bl	121b4 <fflush@plt>
   494f4:	mov	r2, #5
   494f8:	movw	r1, #46000	; 0xb3b0
   494fc:	mov	r0, #0
   49500:	movt	r1, #5
   49504:	add	r3, sp, #36	; 0x24
   49508:	ldr	r7, [r5]
   4950c:	str	r3, [sp]
   49510:	bl	12298 <dcgettext@plt>
   49514:	movw	r3, #3468	; 0xd8c
   49518:	movt	r3, #7
   4951c:	mov	r1, #1
   49520:	ldr	r3, [r3]
   49524:	mov	r2, r0
   49528:	mov	r0, r7
   4952c:	bl	125d4 <__fprintf_chk@plt>
   49530:	mov	r2, r6
   49534:	ldr	r3, [sp]
   49538:	mov	r1, #1
   4953c:	ldr	r0, [r5]
   49540:	bl	1246c <__vfprintf_chk@plt>
   49544:	ldr	r2, [sp, #4]
   49548:	ldr	r3, [r4]
   4954c:	cmp	r2, r3
   49550:	bne	49564 <error@@Base+0xa8>
   49554:	add	sp, sp, #12
   49558:	pop	{r4, r5, r6, r7, lr}
   4955c:	add	sp, sp, #16
   49560:	bx	lr
   49564:	bl	122b0 <__stack_chk_fail@plt>
   49568:	sub	r3, r1, #1
   4956c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49570:	mov	r4, r1
   49574:	sub	sp, sp, #20
   49578:	cmp	r3, #7
   4957c:	ldrls	pc, [pc, r3, lsl #2]
   49580:	b	49844 <error@@Base+0x388>
   49584:	andeq	r9, r4, ip, asr #12
   49588:	andeq	r9, r4, ip, asr r6
   4958c:	andeq	r9, r4, r4, ror r6
   49590:	muleq	r4, r8, r6
   49594:	andeq	r9, r4, r4, asr #13
   49598:	andeq	r9, r4, r0, lsr r7
   4959c:	andeq	r9, r4, ip, lsr #15
   495a0:	andeq	r9, r4, r4, lsr #11
   495a4:	ldrb	sl, [r0, #6]
   495a8:	mov	r7, #0
   495ac:	ldrb	r2, [r0, #5]
   495b0:	ldrb	r6, [r0, #4]
   495b4:	lsl	r8, sl, #8
   495b8:	lsr	r9, sl, #24
   495bc:	lsl	r4, r2, #16
   495c0:	lsr	r5, r2, #16
   495c4:	orr	r4, r4, r8
   495c8:	ldrb	r8, [r0, #7]
   495cc:	strd	r6, [sp]
   495d0:	orr	r5, r5, r9
   495d4:	orr	r4, r4, r8
   495d8:	ldr	r8, [sp]
   495dc:	ldr	r7, [sp]
   495e0:	mov	r9, #0
   495e4:	ldrb	sl, [r0, #2]
   495e8:	orr	r5, r5, r9
   495ec:	lsl	r2, r8, #24
   495f0:	ldrb	r8, [r0, #1]
   495f4:	mov	r9, #0
   495f8:	lsr	r3, r7, #8
   495fc:	ldrb	r7, [r0, #3]
   49600:	orr	r4, r4, r2
   49604:	strd	r8, [sp]
   49608:	orr	r5, r5, r3
   4960c:	ldr	ip, [sp]
   49610:	mov	r6, #0
   49614:	ldrb	r2, [r0]
   49618:	lsl	r9, sl, #8
   4961c:	orr	r4, r4, r6
   49620:	orr	r5, r5, r7
   49624:	lsl	fp, ip, #16
   49628:	orr	r4, r4, r6
   4962c:	orr	r5, r5, r9
   49630:	lsl	r1, r2, #24
   49634:	orr	sl, r6, r4
   49638:	orr	fp, fp, r5
   4963c:	orr	r0, r6, sl
   49640:	orr	r1, r1, fp
   49644:	add	sp, sp, #20
   49648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4964c:	ldrb	r0, [r0]
   49650:	mov	r1, #0
   49654:	add	sp, sp, #20
   49658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4965c:	ldrb	r2, [r0]
   49660:	mov	r1, #0
   49664:	ldrb	r3, [r0, #1]
   49668:	orr	r0, r3, r2, lsl #8
   4966c:	add	sp, sp, #20
   49670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49674:	ldrb	r1, [r0]
   49678:	ldrb	r2, [r0, #1]
   4967c:	ldrb	r3, [r0, #2]
   49680:	lsl	r0, r1, #16
   49684:	mov	r1, #0
   49688:	orr	r0, r0, r2, lsl #8
   4968c:	orr	r0, r0, r3
   49690:	add	sp, sp, #20
   49694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49698:	ldrb	r1, [r0, #1]
   4969c:	ldrb	ip, [r0, #2]
   496a0:	ldrb	r3, [r0, #3]
   496a4:	ldrb	r2, [r0]
   496a8:	lsl	r1, r1, #16
   496ac:	orr	r0, r1, ip, lsl #8
   496b0:	mov	r1, #0
   496b4:	orr	r0, r0, r3
   496b8:	orr	r0, r0, r2, lsl #24
   496bc:	add	sp, sp, #20
   496c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   496c4:	ldrb	r2, [r0, #1]
   496c8:	mov	r3, #0
   496cc:	ldrb	sl, [r0, #3]
   496d0:	mov	fp, #0
   496d4:	ldrb	r4, [r0, #2]
   496d8:	strd	r2, [sp]
   496dc:	mov	r2, #0
   496e0:	ldr	r3, [sp]
   496e4:	lsr	r9, sl, #24
   496e8:	lsl	r8, sl, #8
   496ec:	lsl	r6, r4, #16
   496f0:	ldrb	sl, [r0, #4]
   496f4:	orr	r6, r6, r8
   496f8:	lsr	r5, r3, #8
   496fc:	ldrb	r3, [r0]
   49700:	orr	r0, r6, sl
   49704:	ldr	r6, [sp]
   49708:	lsr	r7, r4, #16
   4970c:	orr	r7, r7, r9
   49710:	orr	r1, r7, fp
   49714:	lsl	r4, r6, #24
   49718:	orr	r0, r0, r4
   4971c:	orr	r1, r1, r5
   49720:	orr	r0, r0, r2
   49724:	orr	r1, r1, r3
   49728:	add	sp, sp, #20
   4972c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49730:	ldrb	r6, [r0, #2]
   49734:	mov	r7, #0
   49738:	ldrb	sl, [r0, #4]
   4973c:	ldrb	r8, [r0, #3]
   49740:	strd	r6, [sp]
   49744:	mov	r6, #0
   49748:	lsl	r4, sl, #8
   4974c:	ldr	r7, [sp]
   49750:	lsl	r2, r8, #16
   49754:	ldr	ip, [sp]
   49758:	lsr	r5, sl, #24
   4975c:	orr	r2, r2, r4
   49760:	lsr	r3, r8, #16
   49764:	ldrb	r4, [r0, #5]
   49768:	orr	r3, r3, r5
   4976c:	ldrb	sl, [r0]
   49770:	lsr	r9, r7, #8
   49774:	orr	r4, r4, r2
   49778:	ldrb	r7, [r0, #1]
   4977c:	lsl	r8, ip, #24
   49780:	mov	r5, #0
   49784:	orr	r5, r5, r3
   49788:	orr	r4, r4, r8
   4978c:	orr	r5, r5, r9
   49790:	lsl	r1, sl, #8
   49794:	orr	r4, r4, r6
   49798:	orr	r5, r5, r7
   4979c:	orr	r0, r6, r4
   497a0:	orr	r1, r1, r5
   497a4:	add	sp, sp, #20
   497a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   497ac:	ldrb	sl, [r0, #5]
   497b0:	mov	r7, #0
   497b4:	ldrb	r6, [r0, #3]
   497b8:	mov	fp, #0
   497bc:	ldrb	r4, [r0, #4]
   497c0:	lsr	r9, sl, #24
   497c4:	lsl	r8, sl, #8
   497c8:	ldrb	sl, [r0, #1]
   497cc:	strd	r6, [sp]
   497d0:	lsl	r2, r4, #16
   497d4:	ldr	r7, [sp]
   497d8:	lsr	r3, r4, #16
   497dc:	strd	sl, [sp, #8]
   497e0:	orr	r2, r2, r8
   497e4:	ldr	fp, [sp]
   497e8:	orr	r3, r3, r9
   497ec:	ldrb	r8, [r0, #6]
   497f0:	lsr	r5, r7, #8
   497f4:	ldr	ip, [sp, #8]
   497f8:	mov	r9, #0
   497fc:	ldrb	r7, [r0, #2]
   49800:	lsl	r4, fp, #24
   49804:	ldrb	r0, [r0]
   49808:	orr	r2, r2, r8
   4980c:	orr	r3, r3, r9
   49810:	orr	r2, r2, r4
   49814:	orr	r3, r3, r5
   49818:	mov	r6, #0
   4981c:	lsl	fp, ip, #8
   49820:	orr	r2, r2, r6
   49824:	orr	r3, r3, r7
   49828:	lsl	r9, r0, #16
   4982c:	orr	r1, r3, fp
   49830:	orr	r0, r2, r6
   49834:	orr	r0, r0, r6
   49838:	orr	r1, r1, r9
   4983c:	add	sp, sp, #20
   49840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49844:	mov	r2, #5
   49848:	movw	r1, #46012	; 0xb3bc
   4984c:	mov	r0, #0
   49850:	movt	r1, #5
   49854:	bl	12298 <dcgettext@plt>
   49858:	mov	r1, r4
   4985c:	bl	494bc <error@@Base>
   49860:	bl	12790 <abort@plt>
   49864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49868:	movw	r9, #65176	; 0xfe98
   4986c:	movt	r9, #6
   49870:	sub	sp, sp, #36	; 0x24
   49874:	mov	r8, r0
   49878:	mov	sl, r1
   4987c:	ldr	r3, [r9]
   49880:	mov	r5, r2
   49884:	add	r0, r0, #100	; 0x64
   49888:	mov	r1, #0
   4988c:	mov	r2, #10
   49890:	str	r3, [sp, #28]
   49894:	bl	124d8 <strtoul@plt>
   49898:	subs	r4, r0, #0
   4989c:	blt	49a24 <error@@Base+0x568>
   498a0:	ldr	r3, [r8, #40]	; 0x28
   498a4:	and	fp, r4, #1
   498a8:	cmp	r5, #0
   498ac:	add	fp, fp, r4
   498b0:	add	r3, r3, #60	; 0x3c
   498b4:	add	r3, r3, fp
   498b8:	str	r3, [r8, #40]	; 0x28
   498bc:	beq	4992c <error@@Base+0x470>
   498c0:	cmp	sl, #8
   498c4:	bhi	49bc0 <error@@Base+0x704>
   498c8:	cmp	fp, sl
   498cc:	bcc	49994 <error@@Base+0x4d8>
   498d0:	ldr	ip, [r8, #4]
   498d4:	mov	r1, #8
   498d8:	mov	r2, #1
   498dc:	add	r0, sp, #20
   498e0:	mov	r3, sl
   498e4:	str	ip, [sp]
   498e8:	bl	12640 <__fread_chk@plt>
   498ec:	cmp	sl, r0
   498f0:	beq	499b4 <error@@Base+0x4f8>
   498f4:	movw	r1, #46212	; 0xb484
   498f8:	mov	r0, #0
   498fc:	movt	r1, #5
   49900:	mov	r2, #5
   49904:	bl	12298 <dcgettext@plt>
   49908:	ldr	r1, [r8]
   4990c:	bl	494bc <error@@Base>
   49910:	mov	r0, #0
   49914:	ldr	r2, [sp, #28]
   49918:	ldr	r3, [r9]
   4991c:	cmp	r2, r3
   49920:	bne	49b98 <error@@Base+0x6dc>
   49924:	add	sp, sp, #36	; 0x24
   49928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4992c:	mov	r1, fp
   49930:	ldr	r0, [r8, #4]
   49934:	mov	r2, #1
   49938:	bl	12760 <fseek@plt>
   4993c:	cmp	r0, #0
   49940:	movwne	r1, #46080	; 0xb400
   49944:	movne	r0, r5
   49948:	movtne	r1, #5
   4994c:	bne	49980 <error@@Base+0x4c4>
   49950:	add	r0, r8, #52	; 0x34
   49954:	mov	r1, #1
   49958:	mov	r2, #60	; 0x3c
   4995c:	ldr	r3, [r8, #4]
   49960:	bl	12394 <fread@plt>
   49964:	cmp	r0, #0
   49968:	cmpne	r0, #60	; 0x3c
   4996c:	moveq	r0, #1
   49970:	beq	49914 <error@@Base+0x458>
   49974:	movw	r1, #46636	; 0xb62c
   49978:	movt	r1, #5
   4997c:	mov	r0, #0
   49980:	mov	r2, #5
   49984:	bl	12298 <dcgettext@plt>
   49988:	ldr	r1, [r8]
   4998c:	bl	494bc <error@@Base>
   49990:	b	49910 <error@@Base+0x454>
   49994:	mov	r2, #5
   49998:	movw	r1, #46180	; 0xb464
   4999c:	mov	r0, #0
   499a0:	movt	r1, #5
   499a4:	bl	12298 <dcgettext@plt>
   499a8:	ldr	r1, [r8]
   499ac:	bl	494bc <error@@Base>
   499b0:	b	49910 <error@@Base+0x454>
   499b4:	add	r0, sp, #20
   499b8:	mov	r1, sl
   499bc:	bl	49568 <error@@Base+0xac>
   499c0:	rsb	fp, sl, fp
   499c4:	mov	r7, #0
   499c8:	mov	r6, fp
   499cc:	umull	r2, r3, r0, sl
   499d0:	mov	r4, r0
   499d4:	mov	r5, r1
   499d8:	strd	r4, [r8, #8]
   499dc:	mla	r3, sl, r1, r3
   499e0:	cmp	r7, r3
   499e4:	cmpeq	r6, r2
   499e8:	bcc	499f8 <error@@Base+0x53c>
   499ec:	cmp	r5, r7
   499f0:	cmpeq	r4, r6
   499f4:	bls	49a4c <error@@Base+0x590>
   499f8:	mov	r2, #5
   499fc:	movw	r1, #46248	; 0xb4a8
   49a00:	mov	r0, #0
   49a04:	movt	r1, #5
   49a08:	bl	12298 <dcgettext@plt>
   49a0c:	ldr	r1, [r8]
   49a10:	ldr	r2, [r8, #8]
   49a14:	mov	r3, sl
   49a18:	str	fp, [sp]
   49a1c:	bl	494bc <error@@Base>
   49a20:	b	49910 <error@@Base+0x454>
   49a24:	mov	r2, #5
   49a28:	movw	r1, #46040	; 0xb3d8
   49a2c:	mov	r0, #0
   49a30:	movt	r1, #5
   49a34:	bl	12298 <dcgettext@plt>
   49a38:	ldr	r1, [r8]
   49a3c:	mov	r2, r4
   49a40:	bl	494bc <error@@Base>
   49a44:	mov	r0, #0
   49a48:	b	49914 <error@@Base+0x458>
   49a4c:	mul	r0, sl, r0
   49a50:	bl	1243c <malloc@plt>
   49a54:	subs	r3, r0, #0
   49a58:	str	r3, [sp, #8]
   49a5c:	beq	49b80 <error@@Base+0x6c4>
   49a60:	mov	r2, r4
   49a64:	mov	r1, sl
   49a68:	ldr	r3, [r8, #4]
   49a6c:	mov	r5, #0
   49a70:	bl	12394 <fread@plt>
   49a74:	ldrd	r2, [r8, #8]
   49a78:	mov	r4, r0
   49a7c:	cmp	r5, r3
   49a80:	cmpeq	r4, r2
   49a84:	mov	r1, r0
   49a88:	beq	49a98 <error@@Base+0x5dc>
   49a8c:	ldr	r0, [sp, #8]
   49a90:	bl	121f0 <free@plt>
   49a94:	b	498f4 <error@@Base+0x438>
   49a98:	mls	r1, sl, r1, fp
   49a9c:	lsl	r0, r0, #3
   49aa0:	str	r1, [sp, #12]
   49aa4:	bl	1243c <malloc@plt>
   49aa8:	cmp	r0, #0
   49aac:	str	r0, [r8, #16]
   49ab0:	beq	49b9c <error@@Base+0x6e0>
   49ab4:	orrs	r3, r4, r5
   49ab8:	beq	49b04 <error@@Base+0x648>
   49abc:	mov	fp, r0
   49ac0:	ldr	r6, [sp, #8]
   49ac4:	mov	r7, #0
   49ac8:	b	49ad0 <error@@Base+0x614>
   49acc:	ldr	fp, [r8, #16]
   49ad0:	mov	r0, r6
   49ad4:	mov	r1, sl
   49ad8:	bl	49568 <error@@Base+0xac>
   49adc:	lsl	r3, r7, #3
   49ae0:	add	r7, r7, #1
   49ae4:	mov	r5, #0
   49ae8:	add	r6, r6, sl
   49aec:	mov	r4, r7
   49af0:	strd	r0, [fp, r3]
   49af4:	ldrd	r2, [r8, #8]
   49af8:	cmp	r5, r3
   49afc:	cmpeq	r4, r2
   49b00:	bcc	49acc <error@@Base+0x610>
   49b04:	ldr	r0, [sp, #8]
   49b08:	bl	121f0 <free@plt>
   49b0c:	ldr	r3, [sp, #12]
   49b10:	cmp	r3, #0
   49b14:	bne	49b38 <error@@Base+0x67c>
   49b18:	ldr	r0, [sp, #12]
   49b1c:	mov	r2, #5
   49b20:	movw	r1, #46476	; 0xb58c
   49b24:	movt	r1, #5
   49b28:	bl	12298 <dcgettext@plt>
   49b2c:	ldr	r1, [r8]
   49b30:	bl	494bc <error@@Base>
   49b34:	b	49910 <error@@Base+0x454>
   49b38:	ldr	r0, [sp, #12]
   49b3c:	bl	1243c <malloc@plt>
   49b40:	cmp	r0, #0
   49b44:	str	r0, [r8, #20]
   49b48:	beq	49be0 <error@@Base+0x724>
   49b4c:	ldr	r3, [sp, #12]
   49b50:	mov	r1, #1
   49b54:	str	r3, [r8, #24]
   49b58:	mov	r2, r3
   49b5c:	ldr	r3, [r8, #4]
   49b60:	bl	12394 <fread@plt>
   49b64:	ldr	r3, [sp, #12]
   49b68:	cmp	r3, r0
   49b6c:	beq	49950 <error@@Base+0x494>
   49b70:	movw	r1, #46588	; 0xb5fc
   49b74:	mov	r0, #0
   49b78:	movt	r1, #5
   49b7c:	b	49980 <error@@Base+0x4c4>
   49b80:	mov	r2, #5
   49b84:	movw	r1, #46348	; 0xb50c
   49b88:	movt	r1, #5
   49b8c:	bl	12298 <dcgettext@plt>
   49b90:	bl	494bc <error@@Base>
   49b94:	b	49910 <error@@Base+0x454>
   49b98:	bl	122b0 <__stack_chk_fail@plt>
   49b9c:	ldr	r0, [sp, #8]
   49ba0:	bl	121f0 <free@plt>
   49ba4:	mov	r2, #5
   49ba8:	movw	r1, #46408	; 0xb548
   49bac:	mov	r0, #0
   49bb0:	movt	r1, #5
   49bb4:	bl	12298 <dcgettext@plt>
   49bb8:	bl	494bc <error@@Base>
   49bbc:	b	49910 <error@@Base+0x454>
   49bc0:	movw	r0, #46124	; 0xb42c
   49bc4:	movw	r1, #46168	; 0xb458
   49bc8:	movw	r3, #45964	; 0xb38c
   49bcc:	movt	r0, #5
   49bd0:	movt	r1, #5
   49bd4:	movw	r2, #493	; 0x1ed
   49bd8:	movt	r3, #5
   49bdc:	bl	127d8 <__assert_fail@plt>
   49be0:	mov	r2, #5
   49be4:	movw	r1, #46524	; 0xb5bc
   49be8:	movt	r1, #5
   49bec:	bl	12298 <dcgettext@plt>
   49bf0:	bl	494bc <error@@Base>
   49bf4:	b	49910 <error@@Base+0x454>

00049bf8 <warn@@Base>:
   49bf8:	push	{r0, r1, r2, r3}
   49bfc:	movw	r3, #976	; 0x3d0
   49c00:	push	{r4, r5, r6, r7, lr}
   49c04:	movw	r4, #65176	; 0xfe98
   49c08:	movt	r4, #6
   49c0c:	movt	r3, #7
   49c10:	sub	sp, sp, #12
   49c14:	movw	r5, #168	; 0xa8
   49c18:	ldr	r2, [r4]
   49c1c:	movt	r5, #7
   49c20:	ldr	r0, [r3]
   49c24:	ldr	r6, [sp, #32]
   49c28:	str	r2, [sp, #4]
   49c2c:	bl	121b4 <fflush@plt>
   49c30:	mov	r2, #5
   49c34:	movw	r1, #46696	; 0xb668
   49c38:	mov	r0, #0
   49c3c:	movt	r1, #5
   49c40:	add	r3, sp, #36	; 0x24
   49c44:	ldr	r7, [r5]
   49c48:	str	r3, [sp]
   49c4c:	bl	12298 <dcgettext@plt>
   49c50:	movw	r3, #3468	; 0xd8c
   49c54:	movt	r3, #7
   49c58:	mov	r1, #1
   49c5c:	ldr	r3, [r3]
   49c60:	mov	r2, r0
   49c64:	mov	r0, r7
   49c68:	bl	125d4 <__fprintf_chk@plt>
   49c6c:	mov	r2, r6
   49c70:	ldr	r3, [sp]
   49c74:	mov	r1, #1
   49c78:	ldr	r0, [r5]
   49c7c:	bl	1246c <__vfprintf_chk@plt>
   49c80:	ldr	r2, [sp, #4]
   49c84:	ldr	r3, [r4]
   49c88:	cmp	r2, r3
   49c8c:	bne	49ca0 <warn@@Base+0xa8>
   49c90:	add	sp, sp, #12
   49c94:	pop	{r4, r5, r6, r7, lr}
   49c98:	add	sp, sp, #16
   49c9c:	bx	lr
   49ca0:	bl	122b0 <__stack_chk_fail@plt>
   49ca4:	push	{r4, lr}
   49ca8:	ldr	r4, [sp, #8]
   49cac:	sub	ip, r4, #1
   49cb0:	cmp	ip, #7
   49cb4:	ldrls	pc, [pc, ip, lsl #2]
   49cb8:	b	49d18 <warn@@Base+0x120>
   49cbc:	andeq	r9, r4, r0, lsl sp
   49cc0:	andeq	r9, r4, r8, lsl #26
   49cc4:	andeq	r9, r4, r0, lsl #26
   49cc8:	strdeq	r9, [r4], -r8
   49ccc:	andeq	r9, r4, r8, lsl sp
   49cd0:	andeq	r9, r4, r8, lsl sp
   49cd4:	andeq	r9, r4, r8, lsl sp
   49cd8:	ldrdeq	r9, [r4], -ip
   49cdc:	lsr	ip, r3, #24
   49ce0:	lsr	r1, r3, #16
   49ce4:	strb	r3, [r0, #4]
   49ce8:	lsr	r3, r3, #8
   49cec:	strb	ip, [r0, #7]
   49cf0:	strb	r1, [r0, #6]
   49cf4:	strb	r3, [r0, #5]
   49cf8:	lsr	r3, r2, #24
   49cfc:	strb	r3, [r0, #3]
   49d00:	lsr	r3, r2, #16
   49d04:	strb	r3, [r0, #2]
   49d08:	lsr	r3, r2, #8
   49d0c:	strb	r3, [r0, #1]
   49d10:	strb	r2, [r0]
   49d14:	pop	{r4, pc}
   49d18:	mov	r2, #5
   49d1c:	movw	r1, #46012	; 0xb3bc
   49d20:	mov	r0, #0
   49d24:	movt	r1, #5
   49d28:	bl	12298 <dcgettext@plt>
   49d2c:	mov	r1, r4
   49d30:	bl	494bc <error@@Base>
   49d34:	bl	12790 <abort@plt>
   49d38:	push	{r3, r4, r5, lr}
   49d3c:	ldr	r4, [sp, #16]
   49d40:	sub	ip, r4, #1
   49d44:	cmp	ip, #7
   49d48:	ldrls	pc, [pc, ip, lsl #2]
   49d4c:	b	49dd4 <warn@@Base+0x1dc>
   49d50:	andeq	r9, r4, ip, asr #27
   49d54:	andeq	r9, r4, r0, asr #27
   49d58:			; <UNDEFINED> instruction: 0x00049db0
   49d5c:	andeq	r9, r4, r0, lsr #27
   49d60:	ldrdeq	r9, [r4], -r4
   49d64:	ldrdeq	r9, [r4], -r4
   49d68:	ldrdeq	r9, [r4], -r4
   49d6c:	andeq	r9, r4, r0, ror sp
   49d70:	lsr	r1, r2, #16
   49d74:	lsr	r5, r3, #16
   49d78:	orr	r1, r1, r3, lsl #16
   49d7c:	lsr	r4, r2, #8
   49d80:	lsr	ip, r2, #24
   49d84:	strb	r2, [r0, #7]
   49d88:	lsr	r2, r1, #16
   49d8c:	mov	r3, #0
   49d90:	orr	r2, r2, r5, lsl #16
   49d94:	strb	r1, [r0, #5]
   49d98:	strb	r4, [r0, #6]
   49d9c:	strb	ip, [r0, #4]
   49da0:	lsr	r1, r2, #8
   49da4:	strb	r2, [r0, #3]
   49da8:	orr	r2, r1, r3, lsl #24
   49dac:	lsr	r3, r3, #8
   49db0:	lsr	r1, r2, #8
   49db4:	strb	r2, [r0, #2]
   49db8:	orr	r2, r1, r3, lsl #24
   49dbc:	lsr	r3, r3, #8
   49dc0:	lsr	r1, r2, #8
   49dc4:	strb	r2, [r0, #1]
   49dc8:	orr	r2, r1, r3, lsl #24
   49dcc:	strb	r2, [r0]
   49dd0:	pop	{r3, r4, r5, pc}
   49dd4:	mov	r2, #5
   49dd8:	movw	r1, #46012	; 0xb3bc
   49ddc:	mov	r0, #0
   49de0:	movt	r1, #5
   49de4:	bl	12298 <dcgettext@plt>
   49de8:	mov	r1, r4
   49dec:	bl	494bc <error@@Base>
   49df0:	bl	12790 <abort@plt>
   49df4:	sub	r3, r1, #1
   49df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49dfc:	mov	r4, r1
   49e00:	sub	sp, sp, #20
   49e04:	cmp	r3, #7
   49e08:	ldrls	pc, [pc, r3, lsl #2]
   49e0c:	b	4a0d0 <warn@@Base+0x4d8>
   49e10:	ldrdeq	r9, [r4], -r8
   49e14:	andeq	r9, r4, r8, ror #29
   49e18:	andeq	r9, r4, r0, lsl #30
   49e1c:	andeq	r9, r4, r4, lsr #30
   49e20:	andeq	r9, r4, r0, asr pc
   49e24:			; <UNDEFINED> instruction: 0x00049fbc
   49e28:	andeq	sl, r4, r8, lsr r0
   49e2c:	andeq	r9, r4, r0, lsr lr
   49e30:	ldrb	sl, [r0, #1]
   49e34:	mov	r7, #0
   49e38:	ldrb	r2, [r0, #2]
   49e3c:	ldrb	r6, [r0, #3]
   49e40:	lsl	r8, sl, #8
   49e44:	lsr	r9, sl, #24
   49e48:	lsl	r4, r2, #16
   49e4c:	lsr	r5, r2, #16
   49e50:	orr	r4, r4, r8
   49e54:	ldrb	r8, [r0]
   49e58:	strd	r6, [sp]
   49e5c:	orr	r5, r5, r9
   49e60:	orr	r4, r4, r8
   49e64:	ldr	r8, [sp]
   49e68:	ldr	r7, [sp]
   49e6c:	mov	r9, #0
   49e70:	ldrb	sl, [r0, #5]
   49e74:	orr	r5, r5, r9
   49e78:	lsl	r2, r8, #24
   49e7c:	ldrb	r8, [r0, #6]
   49e80:	mov	r9, #0
   49e84:	lsr	r3, r7, #8
   49e88:	ldrb	r7, [r0, #4]
   49e8c:	orr	r4, r4, r2
   49e90:	strd	r8, [sp]
   49e94:	orr	r5, r5, r3
   49e98:	ldr	ip, [sp]
   49e9c:	mov	r6, #0
   49ea0:	ldrb	r2, [r0, #7]
   49ea4:	lsl	r9, sl, #8
   49ea8:	orr	r4, r4, r6
   49eac:	orr	r5, r5, r7
   49eb0:	lsl	fp, ip, #16
   49eb4:	orr	r4, r4, r6
   49eb8:	orr	r5, r5, r9
   49ebc:	lsl	r1, r2, #24
   49ec0:	orr	sl, r6, r4
   49ec4:	orr	fp, fp, r5
   49ec8:	orr	r0, r6, sl
   49ecc:	orr	r1, r1, fp
   49ed0:	add	sp, sp, #20
   49ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49ed8:	ldrb	r0, [r0]
   49edc:	mov	r1, #0
   49ee0:	add	sp, sp, #20
   49ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49ee8:	ldrb	r2, [r0, #1]
   49eec:	mov	r1, #0
   49ef0:	ldrb	r3, [r0]
   49ef4:	orr	r0, r3, r2, lsl #8
   49ef8:	add	sp, sp, #20
   49efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49f00:	ldrb	r1, [r0, #2]
   49f04:	ldrb	r2, [r0, #1]
   49f08:	ldrb	r3, [r0]
   49f0c:	lsl	r0, r1, #16
   49f10:	mov	r1, #0
   49f14:	orr	r0, r0, r2, lsl #8
   49f18:	orr	r0, r0, r3
   49f1c:	add	sp, sp, #20
   49f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49f24:	ldrb	r1, [r0, #2]
   49f28:	ldrb	ip, [r0, #1]
   49f2c:	ldrb	r3, [r0]
   49f30:	ldrb	r2, [r0, #3]
   49f34:	lsl	r1, r1, #16
   49f38:	orr	r0, r1, ip, lsl #8
   49f3c:	mov	r1, #0
   49f40:	orr	r0, r0, r3
   49f44:	orr	r0, r0, r2, lsl #24
   49f48:	add	sp, sp, #20
   49f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49f50:	ldrb	r2, [r0, #3]
   49f54:	mov	r3, #0
   49f58:	ldrb	sl, [r0, #1]
   49f5c:	mov	fp, #0
   49f60:	ldrb	r4, [r0, #2]
   49f64:	strd	r2, [sp]
   49f68:	mov	r2, #0
   49f6c:	ldr	r3, [sp]
   49f70:	lsr	r9, sl, #24
   49f74:	lsl	r8, sl, #8
   49f78:	lsl	r6, r4, #16
   49f7c:	ldrb	sl, [r0]
   49f80:	orr	r6, r6, r8
   49f84:	lsr	r5, r3, #8
   49f88:	ldrb	r3, [r0, #4]
   49f8c:	orr	r0, r6, sl
   49f90:	ldr	r6, [sp]
   49f94:	lsr	r7, r4, #16
   49f98:	orr	r7, r7, r9
   49f9c:	orr	r1, r7, fp
   49fa0:	lsl	r4, r6, #24
   49fa4:	orr	r0, r0, r4
   49fa8:	orr	r1, r1, r5
   49fac:	orr	r0, r0, r2
   49fb0:	orr	r1, r1, r3
   49fb4:	add	sp, sp, #20
   49fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49fbc:	ldrb	r6, [r0, #3]
   49fc0:	mov	r7, #0
   49fc4:	ldrb	sl, [r0, #1]
   49fc8:	ldrb	r8, [r0, #2]
   49fcc:	strd	r6, [sp]
   49fd0:	mov	r6, #0
   49fd4:	lsl	r4, sl, #8
   49fd8:	ldr	r7, [sp]
   49fdc:	lsl	r2, r8, #16
   49fe0:	ldr	ip, [sp]
   49fe4:	lsr	r5, sl, #24
   49fe8:	orr	r2, r2, r4
   49fec:	lsr	r3, r8, #16
   49ff0:	ldrb	r4, [r0]
   49ff4:	orr	r3, r3, r5
   49ff8:	ldrb	sl, [r0, #5]
   49ffc:	lsr	r9, r7, #8
   4a000:	orr	r4, r4, r2
   4a004:	ldrb	r7, [r0, #4]
   4a008:	lsl	r8, ip, #24
   4a00c:	mov	r5, #0
   4a010:	orr	r5, r5, r3
   4a014:	orr	r4, r4, r8
   4a018:	orr	r5, r5, r9
   4a01c:	lsl	r1, sl, #8
   4a020:	orr	r4, r4, r6
   4a024:	orr	r5, r5, r7
   4a028:	orr	r0, r6, r4
   4a02c:	orr	r1, r1, r5
   4a030:	add	sp, sp, #20
   4a034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a038:	ldrb	sl, [r0, #1]
   4a03c:	mov	r7, #0
   4a040:	ldrb	r6, [r0, #3]
   4a044:	mov	fp, #0
   4a048:	ldrb	r4, [r0, #2]
   4a04c:	lsr	r9, sl, #24
   4a050:	lsl	r8, sl, #8
   4a054:	ldrb	sl, [r0, #5]
   4a058:	strd	r6, [sp]
   4a05c:	lsl	r2, r4, #16
   4a060:	ldr	r7, [sp]
   4a064:	lsr	r3, r4, #16
   4a068:	strd	sl, [sp, #8]
   4a06c:	orr	r2, r2, r8
   4a070:	ldr	fp, [sp]
   4a074:	orr	r3, r3, r9
   4a078:	ldrb	r8, [r0]
   4a07c:	lsr	r5, r7, #8
   4a080:	ldr	ip, [sp, #8]
   4a084:	mov	r9, #0
   4a088:	ldrb	r7, [r0, #4]
   4a08c:	lsl	r4, fp, #24
   4a090:	ldrb	r0, [r0, #6]
   4a094:	orr	r2, r2, r8
   4a098:	orr	r3, r3, r9
   4a09c:	orr	r2, r2, r4
   4a0a0:	orr	r3, r3, r5
   4a0a4:	mov	r6, #0
   4a0a8:	lsl	fp, ip, #8
   4a0ac:	orr	r2, r2, r6
   4a0b0:	orr	r3, r3, r7
   4a0b4:	lsl	r9, r0, #16
   4a0b8:	orr	r1, r3, fp
   4a0bc:	orr	r0, r2, r6
   4a0c0:	orr	r0, r0, r6
   4a0c4:	orr	r1, r1, r9
   4a0c8:	add	sp, sp, #20
   4a0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a0d0:	mov	r2, #5
   4a0d4:	movw	r1, #46012	; 0xb3bc
   4a0d8:	mov	r0, #0
   4a0dc:	movt	r1, #5
   4a0e0:	bl	12298 <dcgettext@plt>
   4a0e4:	mov	r1, r4
   4a0e8:	bl	494bc <error@@Base>
   4a0ec:	bl	12790 <abort@plt>
   4a0f0:	movw	r3, #3472	; 0xd90
   4a0f4:	movt	r3, #7
   4a0f8:	push	{r4, lr}
   4a0fc:	mov	r4, r1
   4a100:	ldr	r3, [r3]
   4a104:	blx	r3
   4a108:	sub	r3, r4, #1
   4a10c:	cmp	r3, #7
   4a110:	ldrls	pc, [pc, r3, lsl #2]
   4a114:	b	4a1ac <warn@@Base+0x5b4>
   4a118:	andeq	sl, r4, r8, asr r1
   4a11c:	andeq	sl, r4, r4, ror r1
   4a120:	muleq	r4, r0, r1
   4a124:	andeq	sl, r4, ip, lsr r1
   4a128:	andeq	sl, r4, r8, lsr r1
   4a12c:	andeq	sl, r4, r8, lsr r1
   4a130:	andeq	sl, r4, r8, lsr r1
   4a134:	andeq	sl, r4, r8, lsr r1
   4a138:	pop	{r4, pc}
   4a13c:	mov	r2, #-2147483648	; 0x80000000
   4a140:	eor	r0, r0, r2
   4a144:	mov	r3, #0
   4a148:	adds	r0, r0, #-2147483648	; 0x80000000
   4a14c:	eor	r1, r1, r3
   4a150:	sbc	r1, r1, #0
   4a154:	pop	{r4, pc}
   4a158:	mov	r2, #128	; 0x80
   4a15c:	eor	r0, r0, r2
   4a160:	mov	r3, #0
   4a164:	subs	r0, r0, #128	; 0x80
   4a168:	eor	r1, r1, r3
   4a16c:	sbc	r1, r1, #0
   4a170:	pop	{r4, pc}
   4a174:	mov	r2, #32768	; 0x8000
   4a178:	eor	r0, r0, r2
   4a17c:	mov	r3, #0
   4a180:	subs	r0, r0, #32768	; 0x8000
   4a184:	eor	r1, r1, r3
   4a188:	sbc	r1, r1, #0
   4a18c:	pop	{r4, pc}
   4a190:	mov	r2, #8388608	; 0x800000
   4a194:	eor	r0, r0, r2
   4a198:	mov	r3, #0
   4a19c:	subs	r0, r0, #8388608	; 0x800000
   4a1a0:	eor	r1, r1, r3
   4a1a4:	sbc	r1, r1, #0
   4a1a8:	pop	{r4, pc}
   4a1ac:	bl	12790 <abort@plt>
   4a1b0:	movw	ip, #3472	; 0xd90
   4a1b4:	movt	ip, #7
   4a1b8:	movw	r3, #38248	; 0x9568
   4a1bc:	movt	r3, #4
   4a1c0:	ldr	ip, [ip]
   4a1c4:	push	{r4, r5, r6, lr}
   4a1c8:	cmp	ip, r3
   4a1cc:	mov	r5, r1
   4a1d0:	mov	r6, r2
   4a1d4:	mov	r4, r0
   4a1d8:	beq	4a200 <warn@@Base+0x608>
   4a1dc:	add	r0, r0, #4
   4a1e0:	mov	r1, #4
   4a1e4:	bl	49df4 <warn@@Base+0x1fc>
   4a1e8:	strd	r0, [r5]
   4a1ec:	mov	r0, r4
   4a1f0:	mov	r1, #4
   4a1f4:	bl	49df4 <warn@@Base+0x1fc>
   4a1f8:	strd	r0, [r6]
   4a1fc:	pop	{r4, r5, r6, pc}
   4a200:	mov	r1, #4
   4a204:	bl	49568 <error@@Base+0xac>
   4a208:	strd	r0, [r5]
   4a20c:	add	r0, r4, #4
   4a210:	mov	r1, #4
   4a214:	bl	49568 <error@@Base+0xac>
   4a218:	strd	r0, [r6]
   4a21c:	pop	{r4, r5, r6, pc}
   4a220:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4a224:	mov	r7, r1
   4a228:	mov	r4, r2
   4a22c:	mov	r6, r0
   4a230:	bl	123d0 <lbasename@plt>
   4a234:	ldrb	r3, [r7]
   4a238:	cmp	r3, #47	; 0x2f
   4a23c:	beq	4a29c <warn@@Base+0x6a4>
   4a240:	cmp	r6, r0
   4a244:	beq	4a29c <warn@@Base+0x6a4>
   4a248:	rsb	r5, r6, r0
   4a24c:	add	r9, r5, r4
   4a250:	add	r0, r9, #1
   4a254:	cmp	r0, r5
   4a258:	cmpcs	r0, r4
   4a25c:	movcs	sl, #0
   4a260:	movcc	sl, #1
   4a264:	bcc	4a2cc <warn@@Base+0x6d4>
   4a268:	bl	1243c <malloc@plt>
   4a26c:	subs	r8, r0, #0
   4a270:	beq	4a2f0 <warn@@Base+0x6f8>
   4a274:	mov	r1, r6
   4a278:	mov	r2, r5
   4a27c:	bl	1222c <memcpy@plt>
   4a280:	add	r0, r8, r5
   4a284:	mov	r1, r7
   4a288:	mov	r2, r4
   4a28c:	bl	1222c <memcpy@plt>
   4a290:	strb	sl, [r8, r9]
   4a294:	mov	r0, r8
   4a298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a29c:	adds	r0, r4, #1
   4a2a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a2a4:	bl	1243c <malloc@plt>
   4a2a8:	subs	r5, r0, #0
   4a2ac:	beq	4a30c <warn@@Base+0x714>
   4a2b0:	mov	r1, r7
   4a2b4:	mov	r2, r4
   4a2b8:	bl	1222c <memcpy@plt>
   4a2bc:	mov	r3, #0
   4a2c0:	mov	r0, r5
   4a2c4:	strb	r3, [r5, r4]
   4a2c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a2cc:	mov	r2, #5
   4a2d0:	movw	r1, #46728	; 0xb688
   4a2d4:	mov	r0, #0
   4a2d8:	movt	r1, #5
   4a2dc:	bl	12298 <dcgettext@plt>
   4a2e0:	mov	r1, r4
   4a2e4:	bl	494bc <error@@Base>
   4a2e8:	mov	r0, #0
   4a2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a2f0:	mov	r2, #5
   4a2f4:	movw	r1, #46712	; 0xb678
   4a2f8:	movt	r1, #5
   4a2fc:	bl	12298 <dcgettext@plt>
   4a300:	bl	494bc <error@@Base>
   4a304:	mov	r0, r8
   4a308:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a30c:	mov	r2, #5
   4a310:	movw	r1, #46712	; 0xb678
   4a314:	movt	r1, #5
   4a318:	bl	12298 <dcgettext@plt>
   4a31c:	bl	494bc <error@@Base>
   4a320:	mov	r0, r5
   4a324:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a328:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4a32c:	mov	r6, r0
   4a330:	mov	r0, r1
   4a334:	mov	r8, r2
   4a338:	mov	r4, r3
   4a33c:	mov	sl, r1
   4a340:	bl	12574 <__strdup@plt>
   4a344:	mov	r7, #0
   4a348:	mov	r9, #8
   4a34c:	str	r4, [r6, #44]	; 0x2c
   4a350:	str	r8, [r6, #4]
   4a354:	mov	r4, #0
   4a358:	mov	r5, #0
   4a35c:	str	r7, [r6, #16]
   4a360:	strd	r4, [r6, #8]
   4a364:	mov	r1, r9
   4a368:	mov	r2, r7
   4a36c:	str	r7, [r6, #20]
   4a370:	str	r7, [r6, #24]
   4a374:	str	r7, [r6, #28]
   4a378:	str	r7, [r6, #32]
   4a37c:	str	r7, [r6, #36]	; 0x24
   4a380:	str	r7, [r6, #48]	; 0x30
   4a384:	str	r9, [r6, #40]	; 0x28
   4a388:	str	r0, [r6]
   4a38c:	mov	r0, r8
   4a390:	bl	12760 <fseek@plt>
   4a394:	subs	r4, r0, #0
   4a398:	bne	4a4b0 <warn@@Base+0x8b8>
   4a39c:	add	r5, r6, #52	; 0x34
   4a3a0:	mov	r1, #1
   4a3a4:	mov	r2, #60	; 0x3c
   4a3a8:	mov	r3, r8
   4a3ac:	mov	r0, r5
   4a3b0:	bl	12394 <fread@plt>
   4a3b4:	cmp	r0, #60	; 0x3c
   4a3b8:	beq	4a3cc <warn@@Base+0x7d4>
   4a3bc:	cmp	r0, #0
   4a3c0:	bne	4a4d8 <warn@@Base+0x8e0>
   4a3c4:	mov	r0, r4
   4a3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a3cc:	movw	r1, #46860	; 0xb70c
   4a3d0:	mov	r0, r5
   4a3d4:	movt	r1, #5
   4a3d8:	mov	r2, #16
   4a3dc:	bl	12784 <strncmp@plt>
   4a3e0:	cmp	r0, #0
   4a3e4:	beq	4a500 <warn@@Base+0x908>
   4a3e8:	movw	r1, #46880	; 0xb720
   4a3ec:	mov	r0, r5
   4a3f0:	movt	r1, #5
   4a3f4:	mov	r2, #16
   4a3f8:	bl	12784 <strncmp@plt>
   4a3fc:	cmp	r0, #0
   4a400:	beq	4a548 <warn@@Base+0x950>
   4a404:	ldr	r3, [sp, #32]
   4a408:	cmp	r3, #0
   4a40c:	bne	4a56c <warn@@Base+0x974>
   4a410:	mov	r0, r5
   4a414:	movw	r1, #46928	; 0xb750
   4a418:	mov	r2, #16
   4a41c:	movt	r1, #5
   4a420:	bl	12784 <strncmp@plt>
   4a424:	subs	r5, r0, #0
   4a428:	bne	4a3c4 <warn@@Base+0x7cc>
   4a42c:	add	r0, r6, #100	; 0x64
   4a430:	mov	r1, r5
   4a434:	mov	r2, #10
   4a438:	bl	124d8 <strtoul@plt>
   4a43c:	cmp	r0, #7
   4a440:	mov	r4, r0
   4a444:	str	r0, [r6, #32]
   4a448:	bls	4a5c4 <warn@@Base+0x9cc>
   4a44c:	cmp	r0, #0
   4a450:	blt	4a520 <warn@@Base+0x928>
   4a454:	ldr	r3, [r6, #40]	; 0x28
   4a458:	add	r0, r0, #1
   4a45c:	add	r3, r3, #60	; 0x3c
   4a460:	add	r3, r3, r4
   4a464:	str	r3, [r6, #40]	; 0x28
   4a468:	bl	1243c <malloc@plt>
   4a46c:	cmp	r0, #0
   4a470:	str	r0, [r6, #28]
   4a474:	beq	4a5e8 <warn@@Base+0x9f0>
   4a478:	mov	r1, r4
   4a47c:	mov	r2, #1
   4a480:	mov	r3, r8
   4a484:	bl	12394 <fread@plt>
   4a488:	cmp	r0, #1
   4a48c:	bne	4a594 <warn@@Base+0x99c>
   4a490:	ldr	r3, [r6, #32]
   4a494:	tst	r3, #1
   4a498:	bne	4a5d8 <warn@@Base+0x9e0>
   4a49c:	ldr	r1, [r6, #28]
   4a4a0:	mov	r2, #0
   4a4a4:	mov	r4, r2
   4a4a8:	strb	r2, [r1, r3]
   4a4ac:	b	4a3c4 <warn@@Base+0x7cc>
   4a4b0:	mov	r2, #5
   4a4b4:	mov	r0, r7
   4a4b8:	movw	r1, #46780	; 0xb6bc
   4a4bc:	movt	r1, #5
   4a4c0:	bl	12298 <dcgettext@plt>
   4a4c4:	mov	r4, #1
   4a4c8:	mov	r1, sl
   4a4cc:	bl	494bc <error@@Base>
   4a4d0:	mov	r0, r4
   4a4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a4d8:	mov	r2, #5
   4a4dc:	mov	r0, r4
   4a4e0:	movw	r1, #46824	; 0xb6e8
   4a4e4:	movt	r1, #5
   4a4e8:	bl	12298 <dcgettext@plt>
   4a4ec:	mov	r4, #1
   4a4f0:	mov	r1, sl
   4a4f4:	bl	494bc <error@@Base>
   4a4f8:	mov	r0, r4
   4a4fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4a500:	mov	r0, r6
   4a504:	mov	r1, #4
   4a508:	ldr	r2, [sp, #32]
   4a50c:	bl	49864 <error@@Base+0x3a8>
   4a510:	cmp	r0, #0
   4a514:	bne	4a410 <warn@@Base+0x818>
   4a518:	mov	r4, #1
   4a51c:	b	4a3c4 <warn@@Base+0x7cc>
   4a520:	movw	r1, #46996	; 0xb794
   4a524:	movt	r1, #5
   4a528:	mov	r0, r5
   4a52c:	mov	r2, #5
   4a530:	bl	12298 <dcgettext@plt>
   4a534:	mov	r1, sl
   4a538:	ldr	r2, [r6, #32]
   4a53c:	mov	r4, #1
   4a540:	bl	494bc <error@@Base>
   4a544:	b	4a3c4 <warn@@Base+0x7cc>
   4a548:	mov	r3, #1
   4a54c:	mov	r1, r9
   4a550:	mov	r0, r6
   4a554:	str	r3, [r6, #48]	; 0x30
   4a558:	ldr	r2, [sp, #32]
   4a55c:	bl	49864 <error@@Base+0x3a8>
   4a560:	cmp	r0, #0
   4a564:	bne	4a410 <warn@@Base+0x818>
   4a568:	b	4a518 <warn@@Base+0x920>
   4a56c:	mov	r0, r4
   4a570:	mov	r2, #5
   4a574:	movw	r1, #46900	; 0xb734
   4a578:	movt	r1, #5
   4a57c:	bl	12298 <dcgettext@plt>
   4a580:	mov	r2, sl
   4a584:	mov	r1, r0
   4a588:	mov	r0, #1
   4a58c:	bl	125bc <__printf_chk@plt>
   4a590:	b	4a410 <warn@@Base+0x818>
   4a594:	ldr	r0, [r6, #28]
   4a598:	mov	r4, #1
   4a59c:	bl	121f0 <free@plt>
   4a5a0:	str	r5, [r6, #28]
   4a5a4:	mov	r0, r5
   4a5a8:	mov	r2, #5
   4a5ac:	movw	r1, #47096	; 0xb7f8
   4a5b0:	movt	r1, #5
   4a5b4:	bl	12298 <dcgettext@plt>
   4a5b8:	mov	r1, sl
   4a5bc:	bl	494bc <error@@Base>
   4a5c0:	b	4a3c4 <warn@@Base+0x7cc>
   4a5c4:	movw	r1, #46948	; 0xb764
   4a5c8:	mov	r0, r5
   4a5cc:	mov	r2, #5
   4a5d0:	movt	r1, #5
   4a5d4:	b	4a530 <warn@@Base+0x938>
   4a5d8:	mov	r0, r8
   4a5dc:	bl	12250 <_IO_getc@plt>
   4a5e0:	ldr	r3, [r6, #32]
   4a5e4:	b	4a49c <warn@@Base+0x8a4>
   4a5e8:	mov	r2, #5
   4a5ec:	movw	r1, #47044	; 0xb7c4
   4a5f0:	movt	r1, #5
   4a5f4:	mov	r4, #1
   4a5f8:	bl	12298 <dcgettext@plt>
   4a5fc:	bl	494bc <error@@Base>
   4a600:	b	4a3c4 <warn@@Base+0x7cc>
   4a604:	push	{r4, lr}
   4a608:	mov	r4, r0
   4a60c:	ldr	r0, [r0]
   4a610:	cmp	r0, #0
   4a614:	beq	4a61c <warn@@Base+0xa24>
   4a618:	bl	121f0 <free@plt>
   4a61c:	ldr	r0, [r4, #16]
   4a620:	cmp	r0, #0
   4a624:	beq	4a62c <warn@@Base+0xa34>
   4a628:	bl	121f0 <free@plt>
   4a62c:	ldr	r0, [r4, #20]
   4a630:	cmp	r0, #0
   4a634:	beq	4a63c <warn@@Base+0xa44>
   4a638:	bl	121f0 <free@plt>
   4a63c:	ldr	r0, [r4, #28]
   4a640:	cmp	r0, #0
   4a644:	popeq	{r4, pc}
   4a648:	pop	{r4, lr}
   4a64c:	b	121f0 <free@plt>
   4a650:	push	{r4, r5, lr}
   4a654:	mov	r4, r0
   4a658:	ldr	r0, [r0]
   4a65c:	sub	sp, sp, #12
   4a660:	mov	r5, r1
   4a664:	cmp	r0, #0
   4a668:	beq	4a678 <warn@@Base+0xa80>
   4a66c:	bl	12178 <strcmp@plt>
   4a670:	cmp	r0, #0
   4a674:	beq	4a6c0 <warn@@Base+0xac8>
   4a678:	ldr	r0, [r4, #4]
   4a67c:	cmp	r0, #0
   4a680:	beq	4a688 <warn@@Base+0xa90>
   4a684:	bl	125ec <fclose@plt>
   4a688:	mov	r0, r4
   4a68c:	bl	4a604 <warn@@Base+0xa0c>
   4a690:	mov	r0, r5
   4a694:	movw	r1, #47148	; 0xb82c
   4a698:	movt	r1, #5
   4a69c:	bl	126dc <fopen64@plt>
   4a6a0:	subs	r2, r0, #0
   4a6a4:	moveq	r0, #1
   4a6a8:	beq	4a6c0 <warn@@Base+0xac8>
   4a6ac:	mov	r3, #0
   4a6b0:	mov	r0, r4
   4a6b4:	mov	r1, r5
   4a6b8:	str	r3, [sp]
   4a6bc:	bl	4a328 <warn@@Base+0x730>
   4a6c0:	add	sp, sp, #12
   4a6c4:	pop	{r4, r5, pc}
   4a6c8:	push	{r4, r5, r6, lr}
   4a6cc:	mov	r4, r0
   4a6d0:	mov	r5, r2
   4a6d4:	ldr	r0, [r0, #4]
   4a6d8:	mov	r2, #0
   4a6dc:	bl	12760 <fseek@plt>
   4a6e0:	subs	r6, r0, #0
   4a6e4:	bne	4a774 <warn@@Base+0xb7c>
   4a6e8:	add	r0, r4, #52	; 0x34
   4a6ec:	mov	r1, #1
   4a6f0:	mov	r2, #60	; 0x3c
   4a6f4:	ldr	r3, [r4, #4]
   4a6f8:	bl	12394 <fread@plt>
   4a6fc:	cmp	r0, #60	; 0x3c
   4a700:	bne	4a730 <warn@@Base+0xb38>
   4a704:	movw	r1, #47192	; 0xb858
   4a708:	add	r0, r4, #110	; 0x6e
   4a70c:	movt	r1, #5
   4a710:	mov	r2, #2
   4a714:	bl	12268 <memcmp@plt>
   4a718:	cmp	r0, #0
   4a71c:	bne	4a754 <warn@@Base+0xb5c>
   4a720:	mov	r0, r4
   4a724:	mov	r1, r5
   4a728:	pop	{r4, r5, r6, lr}
   4a72c:	b	4a794 <warn@@Base+0xb9c>
   4a730:	mov	r0, r6
   4a734:	movw	r1, #46824	; 0xb6e8
   4a738:	mov	r2, #5
   4a73c:	movt	r1, #5
   4a740:	bl	12298 <dcgettext@plt>
   4a744:	ldr	r1, [r4]
   4a748:	bl	494bc <error@@Base>
   4a74c:	mov	r0, #0
   4a750:	pop	{r4, r5, r6, pc}
   4a754:	mov	r0, r6
   4a758:	mov	r2, #5
   4a75c:	movw	r1, #47196	; 0xb85c
   4a760:	movt	r1, #5
   4a764:	bl	12298 <dcgettext@plt>
   4a768:	ldr	r1, [r4]
   4a76c:	bl	494bc <error@@Base>
   4a770:	b	4a74c <warn@@Base+0xb54>
   4a774:	mov	r2, #5
   4a778:	movw	r1, #47152	; 0xb830
   4a77c:	mov	r0, #0
   4a780:	movt	r1, #5
   4a784:	bl	12298 <dcgettext@plt>
   4a788:	ldr	r1, [r4]
   4a78c:	bl	494bc <error@@Base>
   4a790:	b	4a74c <warn@@Base+0xb54>
   4a794:	push	{r4, r5, r6, r7, r8, lr}
   4a798:	movw	r4, #65176	; 0xfe98
   4a79c:	movt	r4, #6
   4a7a0:	ldrb	r3, [r0, #52]	; 0x34
   4a7a4:	sub	sp, sp, #8
   4a7a8:	mov	r5, r0
   4a7ac:	ldr	r2, [r4]
   4a7b0:	cmp	r3, #47	; 0x2f
   4a7b4:	mov	r7, r1
   4a7b8:	movne	r3, #0
   4a7bc:	str	r2, [sp, #4]
   4a7c0:	movne	r2, r0
   4a7c4:	bne	4a7dc <warn@@Base+0xbe4>
   4a7c8:	b	4a848 <warn@@Base+0xc50>
   4a7cc:	add	r2, r2, #1
   4a7d0:	ldrb	r1, [r2, #52]	; 0x34
   4a7d4:	cmp	r1, #47	; 0x2f
   4a7d8:	beq	4a834 <warn@@Base+0xc3c>
   4a7dc:	add	r3, r3, #1
   4a7e0:	cmp	r3, #16
   4a7e4:	bne	4a7cc <warn@@Base+0xbd4>
   4a7e8:	mov	r0, #17
   4a7ec:	bl	12358 <xmalloc@plt>
   4a7f0:	ldr	r7, [r5, #52]!	; 0x34
   4a7f4:	mov	r2, #0
   4a7f8:	ldr	r6, [r5, #4]
   4a7fc:	ldr	ip, [r5, #8]
   4a800:	ldr	r1, [r5, #12]
   4a804:	mov	r3, r0
   4a808:	str	r7, [r3]
   4a80c:	str	r6, [r3, #4]
   4a810:	str	ip, [r3, #8]
   4a814:	str	r1, [r3, #12]
   4a818:	strb	r2, [r3, #16]
   4a81c:	ldr	r2, [sp, #4]
   4a820:	ldr	r3, [r4]
   4a824:	cmp	r2, r3
   4a828:	bne	4aa30 <warn@@Base+0xe38>
   4a82c:	add	sp, sp, #8
   4a830:	pop	{r4, r5, r6, r7, r8, pc}
   4a834:	add	r3, r5, r3
   4a838:	mov	r2, #0
   4a83c:	add	r0, r5, #52	; 0x34
   4a840:	strb	r2, [r3, #52]	; 0x34
   4a844:	b	4a81c <warn@@Base+0xc24>
   4a848:	ldr	r3, [r0, #28]
   4a84c:	cmp	r3, #0
   4a850:	beq	4a860 <warn@@Base+0xc68>
   4a854:	ldr	r3, [r0, #32]
   4a858:	cmp	r3, #0
   4a85c:	bne	4a880 <warn@@Base+0xc88>
   4a860:	mov	r2, #5
   4a864:	movw	r1, #47240	; 0xb888
   4a868:	mov	r0, #0
   4a86c:	movt	r1, #5
   4a870:	bl	12298 <dcgettext@plt>
   4a874:	bl	494bc <error@@Base>
   4a878:	mov	r0, #0
   4a87c:	b	4a81c <warn@@Base+0xc24>
   4a880:	mov	r6, #0
   4a884:	add	r0, r0, #53	; 0x35
   4a888:	str	r6, [r5, #36]	; 0x24
   4a88c:	mov	r1, sp
   4a890:	mov	r2, #10
   4a894:	bl	124d8 <strtoul@plt>
   4a898:	ldr	r3, [r5, #44]	; 0x2c
   4a89c:	cmp	r3, r6
   4a8a0:	mov	r8, r0
   4a8a4:	bne	4a950 <warn@@Base+0xd58>
   4a8a8:	ldr	r2, [r5, #32]
   4a8ac:	cmp	r8, r2
   4a8b0:	bhi	4a9e0 <warn@@Base+0xde8>
   4a8b4:	ldr	r1, [r5, #28]
   4a8b8:	bcs	4aa04 <warn@@Base+0xe0c>
   4a8bc:	ldrb	r3, [r1, r8]
   4a8c0:	add	r6, r1, r8
   4a8c4:	cmp	r3, #10
   4a8c8:	beq	4aa04 <warn@@Base+0xe0c>
   4a8cc:	cmp	r3, #0
   4a8d0:	mov	r3, r8
   4a8d4:	bne	4a940 <warn@@Base+0xd48>
   4a8d8:	cmp	r3, #0
   4a8dc:	bne	4a980 <warn@@Base+0xd88>
   4a8e0:	mov	r2, r3
   4a8e4:	mov	r6, #0
   4a8e8:	strb	r6, [r1, r2]
   4a8ec:	ldr	r3, [r5, #44]	; 0x2c
   4a8f0:	cmp	r3, r6
   4a8f4:	beq	4a9d4 <warn@@Base+0xddc>
   4a8f8:	ldr	r3, [r5, #36]	; 0x24
   4a8fc:	cmp	r3, r6
   4a900:	beq	4a9d4 <warn@@Base+0xddc>
   4a904:	cmp	r2, r8
   4a908:	bhi	4a99c <warn@@Base+0xda4>
   4a90c:	mov	r2, #5
   4a910:	movw	r1, #47364	; 0xb904
   4a914:	mov	r0, r6
   4a918:	movt	r1, #5
   4a91c:	bl	12298 <dcgettext@plt>
   4a920:	bl	494bc <error@@Base>
   4a924:	mov	r0, r6
   4a928:	b	4a81c <warn@@Base+0xc24>
   4a92c:	ldrb	ip, [r6, #1]!
   4a930:	cmp	ip, #10
   4a934:	beq	4a8d8 <warn@@Base+0xce0>
   4a938:	cmp	ip, #0
   4a93c:	beq	4a8d8 <warn@@Base+0xce0>
   4a940:	add	r3, r3, #1
   4a944:	cmp	r2, r3
   4a948:	bhi	4a92c <warn@@Base+0xd34>
   4a94c:	b	4a8d8 <warn@@Base+0xce0>
   4a950:	ldr	r0, [sp]
   4a954:	cmp	r0, r6
   4a958:	beq	4a8a8 <warn@@Base+0xcb0>
   4a95c:	ldrb	r3, [r0]
   4a960:	cmp	r3, #58	; 0x3a
   4a964:	bne	4a8a8 <warn@@Base+0xcb0>
   4a968:	add	r0, r0, #1
   4a96c:	mov	r1, r6
   4a970:	mov	r2, #10
   4a974:	bl	124d8 <strtoul@plt>
   4a978:	str	r0, [r5, #36]	; 0x24
   4a97c:	b	4a8a8 <warn@@Base+0xcb0>
   4a980:	sub	r0, r3, #1
   4a984:	ldrb	ip, [r1, r0]
   4a988:	cmp	ip, #47	; 0x2f
   4a98c:	moveq	r3, r0
   4a990:	cmp	r3, r2
   4a994:	bhi	4a8e4 <warn@@Base+0xcec>
   4a998:	b	4a8e0 <warn@@Base+0xce8>
   4a99c:	ldr	r1, [r5, #28]
   4a9a0:	rsb	r2, r8, r2
   4a9a4:	ldr	r0, [r5]
   4a9a8:	add	r1, r1, r8
   4a9ac:	bl	4a220 <warn@@Base+0x628>
   4a9b0:	subs	r6, r0, #0
   4a9b4:	beq	4a9cc <warn@@Base+0xdd4>
   4a9b8:	mov	r0, r7
   4a9bc:	mov	r1, r6
   4a9c0:	bl	4a650 <warn@@Base+0xa58>
   4a9c4:	subs	r2, r0, #0
   4a9c8:	beq	4aa0c <warn@@Base+0xe14>
   4a9cc:	mov	r0, r6
   4a9d0:	bl	121f0 <free@plt>
   4a9d4:	ldr	r0, [r5, #28]
   4a9d8:	add	r0, r0, r8
   4a9dc:	b	4a81c <warn@@Base+0xc24>
   4a9e0:	mov	r2, #5
   4a9e4:	movw	r1, #47304	; 0xb8c8
   4a9e8:	mov	r0, #0
   4a9ec:	movt	r1, #5
   4a9f0:	bl	12298 <dcgettext@plt>
   4a9f4:	mov	r1, r8
   4a9f8:	bl	494bc <error@@Base>
   4a9fc:	mov	r0, #0
   4aa00:	b	4a81c <warn@@Base+0xc24>
   4aa04:	mov	r3, r8
   4aa08:	b	4a8d8 <warn@@Base+0xce0>
   4aa0c:	mov	r0, r7
   4aa10:	ldr	r1, [r5, #36]	; 0x24
   4aa14:	bl	4a6c8 <warn@@Base+0xad0>
   4aa18:	subs	r7, r0, #0
   4aa1c:	beq	4a9cc <warn@@Base+0xdd4>
   4aa20:	mov	r0, r6
   4aa24:	bl	121f0 <free@plt>
   4aa28:	mov	r0, r7
   4aa2c:	b	4a81c <warn@@Base+0xc24>
   4aa30:	bl	122b0 <__stack_chk_fail@plt>
   4aa34:	push	{r4, r5, r6, r7, r8, r9, lr}
   4aa38:	mov	r4, r0
   4aa3c:	sub	sp, sp, #28
   4aa40:	mov	r5, r2
   4aa44:	mov	r8, r1
   4aa48:	mov	r2, #5
   4aa4c:	movw	r1, #47400	; 0xb928
   4aa50:	mov	r0, #0
   4aa54:	movt	r1, #5
   4aa58:	bl	12298 <dcgettext@plt>
   4aa5c:	ldr	r6, [r4]
   4aa60:	mov	r9, r0
   4aa64:	mov	r0, r6
   4aa68:	bl	124e4 <strlen@plt>
   4aa6c:	mov	r7, r0
   4aa70:	mov	r0, r5
   4aa74:	bl	124e4 <strlen@plt>
   4aa78:	ldr	r3, [r4, #44]	; 0x2c
   4aa7c:	cmp	r3, #0
   4aa80:	add	r7, r0, r7
   4aa84:	add	r1, r7, #3
   4aa88:	bne	4aad0 <warn@@Base+0xed8>
   4aa8c:	mov	r0, r1
   4aa90:	str	r1, [sp, #20]
   4aa94:	bl	1243c <malloc@plt>
   4aa98:	ldr	r1, [sp, #20]
   4aa9c:	subs	r4, r0, #0
   4aaa0:	beq	4aba0 <warn@@Base+0xfa8>
   4aaa4:	str	r6, [sp, #4]
   4aaa8:	movw	ip, #45684	; 0xb274
   4aaac:	str	r5, [sp, #8]
   4aab0:	movt	ip, #5
   4aab4:	mov	r2, #1
   4aab8:	mvn	r3, #0
   4aabc:	str	ip, [sp]
   4aac0:	bl	127cc <__snprintf_chk@plt>
   4aac4:	mov	r0, r4
   4aac8:	add	sp, sp, #28
   4aacc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   4aad0:	ldr	r3, [r4, #36]	; 0x24
   4aad4:	cmp	r3, #0
   4aad8:	beq	4ab48 <warn@@Base+0xf50>
   4aadc:	ldr	r0, [r8]
   4aae0:	cmp	r0, #0
   4aae4:	beq	4ab8c <warn@@Base+0xf94>
   4aae8:	bl	124e4 <strlen@plt>
   4aaec:	add	r7, r7, #5
   4aaf0:	add	r1, r7, r0
   4aaf4:	mov	r0, r1
   4aaf8:	str	r1, [sp, #20]
   4aafc:	bl	1243c <malloc@plt>
   4ab00:	ldr	r1, [sp, #20]
   4ab04:	subs	r4, r0, #0
   4ab08:	beq	4aba0 <warn@@Base+0xfa8>
   4ab0c:	ldr	r3, [r8]
   4ab10:	mov	r2, #1
   4ab14:	str	r6, [sp, #4]
   4ab18:	cmp	r3, #0
   4ab1c:	str	r5, [sp, #12]
   4ab20:	strne	r3, [sp, #8]
   4ab24:	movw	r3, #47412	; 0xb934
   4ab28:	streq	r9, [sp, #8]
   4ab2c:	movt	r3, #5
   4ab30:	str	r3, [sp]
   4ab34:	mvn	r3, #0
   4ab38:	bl	127cc <__snprintf_chk@plt>
   4ab3c:	mov	r0, r4
   4ab40:	add	sp, sp, #28
   4ab44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   4ab48:	mov	r0, r1
   4ab4c:	str	r1, [sp, #20]
   4ab50:	bl	1243c <malloc@plt>
   4ab54:	ldr	r1, [sp, #20]
   4ab58:	subs	r4, r0, #0
   4ab5c:	beq	4aba0 <warn@@Base+0xfa8>
   4ab60:	str	r6, [sp, #4]
   4ab64:	mov	r2, #1
   4ab68:	str	r5, [sp, #8]
   4ab6c:	mvn	r3, #0
   4ab70:	movw	ip, #47424	; 0xb940
   4ab74:	movt	ip, #5
   4ab78:	str	ip, [sp]
   4ab7c:	bl	127cc <__snprintf_chk@plt>
   4ab80:	mov	r0, r4
   4ab84:	add	sp, sp, #28
   4ab88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   4ab8c:	mov	r0, r9
   4ab90:	bl	124e4 <strlen@plt>
   4ab94:	add	r1, r7, #5
   4ab98:	add	r1, r1, r0
   4ab9c:	b	4aaf4 <warn@@Base+0xefc>
   4aba0:	mov	r2, #5
   4aba4:	movw	r1, #46712	; 0xb678
   4aba8:	mov	r0, #0
   4abac:	movt	r1, #5
   4abb0:	bl	12298 <dcgettext@plt>
   4abb4:	bl	494bc <error@@Base>
   4abb8:	mov	r0, #0
   4abbc:	b	4aac8 <warn@@Base+0xed0>
   4abc0:	push	{r3, r4, r5, r6, r7, lr}
   4abc4:	subs	r4, r0, #0
   4abc8:	beq	4ac4c <warn@@Base+0x1054>
   4abcc:	ldr	r3, [r4]
   4abd0:	cmp	r3, #0
   4abd4:	beq	4ac3c <warn@@Base+0x1044>
   4abd8:	mov	r2, r4
   4abdc:	mov	r3, #0
   4abe0:	ldr	r1, [r2, #4]!
   4abe4:	add	r3, r3, #1
   4abe8:	cmp	r1, #0
   4abec:	bne	4abe0 <warn@@Base+0xfe8>
   4abf0:	add	r3, r3, #1
   4abf4:	lsl	r0, r3, #2
   4abf8:	bl	12358 <xmalloc@plt>
   4abfc:	mov	r6, r0
   4ac00:	ldr	r0, [r4]
   4ac04:	cmp	r0, #0
   4ac08:	beq	4ac44 <warn@@Base+0x104c>
   4ac0c:	rsb	r7, r4, #4
   4ac10:	mov	r5, #0
   4ac14:	bl	1237c <xstrdup@plt>
   4ac18:	str	r0, [r6, r5]
   4ac1c:	add	r5, r7, r4
   4ac20:	ldr	r0, [r4, #4]!
   4ac24:	cmp	r0, #0
   4ac28:	bne	4ac14 <warn@@Base+0x101c>
   4ac2c:	mov	r3, #0
   4ac30:	mov	r0, r6
   4ac34:	str	r3, [r6, r5]
   4ac38:	pop	{r3, r4, r5, r6, r7, pc}
   4ac3c:	mov	r0, #4
   4ac40:	b	4abf8 <warn@@Base+0x1000>
   4ac44:	mov	r5, r0
   4ac48:	b	4ac2c <warn@@Base+0x1034>
   4ac4c:	mov	r0, r4
   4ac50:	pop	{r3, r4, r5, r6, r7, pc}
   4ac54:	push	{r3, r4, r5, lr}
   4ac58:	subs	r5, r0, #0
   4ac5c:	popeq	{r3, r4, r5, pc}
   4ac60:	ldr	r0, [r5]
   4ac64:	cmp	r0, #0
   4ac68:	movne	r4, r5
   4ac6c:	beq	4ac80 <warn@@Base+0x1088>
   4ac70:	bl	121f0 <free@plt>
   4ac74:	ldr	r0, [r4, #4]!
   4ac78:	cmp	r0, #0
   4ac7c:	bne	4ac70 <warn@@Base+0x1078>
   4ac80:	mov	r0, r5
   4ac84:	pop	{r3, r4, r5, lr}
   4ac88:	b	121f0 <free@plt>
   4ac8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ac90:	subs	r4, r0, #0
   4ac94:	ldr	r5, [pc, #536]	; 4aeb4 <warn@@Base+0x12bc>
   4ac98:	sub	sp, sp, #12
   4ac9c:	add	r5, pc, r5
   4aca0:	beq	4aeac <warn@@Base+0x12b4>
   4aca4:	bl	124e4 <strlen@plt>
   4aca8:	mov	r9, #0
   4acac:	mov	r7, r9
   4acb0:	mov	r8, r9
   4acb4:	mov	r6, r9
   4acb8:	mov	fp, r9
   4acbc:	mov	sl, r9
   4acc0:	add	r0, r0, #1
   4acc4:	bl	12358 <xmalloc@plt>
   4acc8:	ldr	r3, [pc, #488]	; 4aeb8 <warn@@Base+0x12c0>
   4accc:	str	r0, [sp]
   4acd0:	ldr	r5, [r5, r3]
   4acd4:	ldrb	r3, [r4]
   4acd8:	lsl	r3, r3, #1
   4acdc:	ldrh	r3, [r5, r3]
   4ace0:	tst	r3, #64	; 0x40
   4ace4:	beq	4ad08 <warn@@Base+0x1110>
   4ace8:	mov	r3, r4
   4acec:	ldrb	r2, [r3, #1]
   4acf0:	add	r4, r3, #1
   4acf4:	mov	r3, r4
   4acf8:	lsl	r2, r2, #1
   4acfc:	ldrh	r2, [r5, r2]
   4ad00:	tst	r2, #64	; 0x40
   4ad04:	bne	4acec <warn@@Base+0x10f4>
   4ad08:	cmp	r7, #0
   4ad0c:	beq	4ad24 <warn@@Base+0x112c>
   4ad10:	sub	r3, r7, #1
   4ad14:	cmp	r9, r3
   4ad18:	addlt	r3, r8, r9, lsl #2
   4ad1c:	strlt	r3, [sp, #4]
   4ad20:	blt	4ad50 <warn@@Base+0x1158>
   4ad24:	cmp	r8, #0
   4ad28:	beq	4ae98 <warn@@Base+0x12a0>
   4ad2c:	lsl	r7, r7, #1
   4ad30:	mov	r0, r8
   4ad34:	lsl	r1, r7, #2
   4ad38:	bl	122c8 <xrealloc@plt>
   4ad3c:	mov	r8, r0
   4ad40:	add	r3, r8, r9, lsl #2
   4ad44:	str	r3, [sp, #4]
   4ad48:	mov	r3, #0
   4ad4c:	str	r3, [r8, r9, lsl #2]
   4ad50:	ldrb	r3, [r4]
   4ad54:	cmp	r3, #0
   4ad58:	beq	4ae10 <warn@@Base+0x1218>
   4ad5c:	mov	r2, r4
   4ad60:	ldr	lr, [sp]
   4ad64:	b	4ad88 <warn@@Base+0x1190>
   4ad68:	strb	r3, [lr]
   4ad6c:	add	lr, lr, #1
   4ad70:	mov	r6, #0
   4ad74:	ldrb	r3, [r2, #1]
   4ad78:	add	r2, r2, #1
   4ad7c:	cmp	r3, #0
   4ad80:	mov	r4, r2
   4ad84:	beq	4ae14 <warn@@Base+0x121c>
   4ad88:	lsl	r1, r3, #1
   4ad8c:	mov	r4, r2
   4ad90:	ldrh	r1, [r5, r1]
   4ad94:	tst	r1, #64	; 0x40
   4ad98:	beq	4ada8 <warn@@Base+0x11b0>
   4ad9c:	orr	r0, r6, fp
   4ada0:	orrs	r0, r0, sl
   4ada4:	beq	4ae8c <warn@@Base+0x1294>
   4ada8:	cmp	r6, #0
   4adac:	bne	4ad68 <warn@@Base+0x1170>
   4adb0:	cmp	r3, #92	; 0x5c
   4adb4:	moveq	r6, #1
   4adb8:	beq	4ad74 <warn@@Base+0x117c>
   4adbc:	cmp	sl, #0
   4adc0:	beq	4addc <warn@@Base+0x11e4>
   4adc4:	cmp	r3, #39	; 0x27
   4adc8:	moveq	sl, r6
   4adcc:	beq	4ad74 <warn@@Base+0x117c>
   4add0:	strb	r3, [lr]
   4add4:	add	lr, lr, #1
   4add8:	b	4ad74 <warn@@Base+0x117c>
   4addc:	cmp	fp, #0
   4ade0:	beq	4adf4 <warn@@Base+0x11fc>
   4ade4:	cmp	r3, #34	; 0x22
   4ade8:	moveq	fp, sl
   4adec:	bne	4add0 <warn@@Base+0x11d8>
   4adf0:	b	4ad74 <warn@@Base+0x117c>
   4adf4:	cmp	r3, #39	; 0x27
   4adf8:	moveq	sl, #1
   4adfc:	beq	4ad74 <warn@@Base+0x117c>
   4ae00:	cmp	r3, #34	; 0x22
   4ae04:	moveq	fp, #1
   4ae08:	bne	4add0 <warn@@Base+0x11d8>
   4ae0c:	b	4ad74 <warn@@Base+0x117c>
   4ae10:	ldr	lr, [sp]
   4ae14:	mov	r3, #0
   4ae18:	ldr	r0, [sp]
   4ae1c:	strb	r3, [lr]
   4ae20:	add	r9, r9, #1
   4ae24:	bl	1237c <xstrdup@plt>
   4ae28:	ldr	r3, [sp, #4]
   4ae2c:	str	r0, [r3]
   4ae30:	mov	r3, #0
   4ae34:	str	r3, [r8, r9, lsl #2]
   4ae38:	ldrb	r2, [r4]
   4ae3c:	lsl	r3, r2, #1
   4ae40:	ldrh	r3, [r5, r3]
   4ae44:	tst	r3, #64	; 0x40
   4ae48:	beq	4ae6c <warn@@Base+0x1274>
   4ae4c:	mov	r3, r4
   4ae50:	ldrb	r2, [r3, #1]
   4ae54:	add	r4, r3, #1
   4ae58:	mov	r3, r4
   4ae5c:	lsl	r1, r2, #1
   4ae60:	ldrh	r1, [r5, r1]
   4ae64:	tst	r1, #64	; 0x40
   4ae68:	bne	4ae50 <warn@@Base+0x1258>
   4ae6c:	cmp	r2, #0
   4ae70:	bne	4acd4 <warn@@Base+0x10dc>
   4ae74:	ldr	r0, [sp]
   4ae78:	mov	r9, r8
   4ae7c:	bl	121f0 <free@plt>
   4ae80:	mov	r0, r9
   4ae84:	add	sp, sp, #12
   4ae88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ae8c:	mov	r6, r0
   4ae90:	mov	sl, r0
   4ae94:	b	4ae14 <warn@@Base+0x121c>
   4ae98:	mov	r0, #32
   4ae9c:	mov	r7, #8
   4aea0:	bl	12358 <xmalloc@plt>
   4aea4:	mov	r8, r0
   4aea8:	b	4ad40 <warn@@Base+0x1148>
   4aeac:	mov	r9, r4
   4aeb0:	b	4ae80 <warn@@Base+0x1288>
   4aeb4:	andeq	r4, r2, ip, asr r3
   4aeb8:	andeq	r0, r0, r8, asr #4
   4aebc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   4aec0:	subs	r5, r1, #0
   4aec4:	ldr	r8, [pc, #180]	; 4af80 <warn@@Base+0x1388>
   4aec8:	add	r8, pc, r8
   4aecc:	beq	4af50 <warn@@Base+0x1358>
   4aed0:	ldr	r6, [r0]
   4aed4:	cmp	r6, #0
   4aed8:	movne	r9, r0
   4aedc:	beq	4af78 <warn@@Base+0x1380>
   4aee0:	ldrb	r4, [r6]
   4aee4:	cmp	r4, #0
   4aee8:	beq	4af58 <warn@@Base+0x1360>
   4aeec:	ldr	r3, [pc, #144]	; 4af84 <warn@@Base+0x138c>
   4aef0:	ldr	r7, [r8, r3]
   4aef4:	b	4af20 <warn@@Base+0x1328>
   4aef8:	cmp	r4, #34	; 0x22
   4aefc:	beq	4af44 <warn@@Base+0x134c>
   4af00:	mov	r0, r4
   4af04:	mov	r1, r5
   4af08:	bl	12694 <fputc@plt>
   4af0c:	cmn	r0, #1
   4af10:	beq	4af50 <warn@@Base+0x1358>
   4af14:	ldrb	r4, [r6, #1]!
   4af18:	cmp	r4, #0
   4af1c:	beq	4af58 <warn@@Base+0x1360>
   4af20:	lsl	r3, r4, #1
   4af24:	mov	r1, r5
   4af28:	mov	r0, #92	; 0x5c
   4af2c:	ldrh	r3, [r7, r3]
   4af30:	tst	r3, #64	; 0x40
   4af34:	bne	4af44 <warn@@Base+0x134c>
   4af38:	cmp	r4, #39	; 0x27
   4af3c:	cmpne	r4, r0
   4af40:	bne	4aef8 <warn@@Base+0x1300>
   4af44:	bl	12694 <fputc@plt>
   4af48:	cmn	r0, #1
   4af4c:	bne	4af00 <warn@@Base+0x1308>
   4af50:	mov	r0, #1
   4af54:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   4af58:	mov	r0, #10
   4af5c:	mov	r1, r5
   4af60:	bl	12694 <fputc@plt>
   4af64:	cmn	r0, #1
   4af68:	beq	4af50 <warn@@Base+0x1358>
   4af6c:	ldr	r6, [r9, #4]!
   4af70:	cmp	r6, #0
   4af74:	bne	4aee0 <warn@@Base+0x12e8>
   4af78:	mov	r0, #0
   4af7c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   4af80:	andeq	r4, r2, r0, lsr r1
   4af84:	andeq	r0, r0, r8, asr #4
   4af88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4af8c:	sub	sp, sp, #28
   4af90:	ldr	ip, [pc, #684]	; 4b244 <warn@@Base+0x164c>
   4af94:	mov	r6, r1
   4af98:	mov	sl, r0
   4af9c:	mov	r5, #0
   4afa0:	add	ip, pc, ip
   4afa4:	str	ip, [sp, #12]
   4afa8:	ldr	ip, [pc, #664]	; 4b248 <warn@@Base+0x1650>
   4afac:	mov	r8, #2000	; 0x7d0
   4afb0:	ldr	r1, [r0]
   4afb4:	add	ip, pc, ip
   4afb8:	mov	fp, ip
   4afbc:	b	4afc4 <warn@@Base+0x13cc>
   4afc0:	mov	r5, r4
   4afc4:	add	r4, r5, #1
   4afc8:	cmp	r4, r1
   4afcc:	bge	4b1c0 <warn@@Base+0x15c8>
   4afd0:	ldr	r3, [r6]
   4afd4:	lsl	r7, r4, #2
   4afd8:	ldr	r0, [r3, r4, lsl #2]
   4afdc:	ldrb	r2, [r0]
   4afe0:	cmp	r2, #64	; 0x40
   4afe4:	bne	4afc0 <warn@@Base+0x13c8>
   4afe8:	subs	r8, r8, #1
   4afec:	beq	4b218 <warn@@Base+0x1620>
   4aff0:	add	r0, r0, #1
   4aff4:	mov	r1, fp
   4aff8:	bl	126dc <fopen64@plt>
   4affc:	subs	r9, r0, #0
   4b000:	beq	4b1b8 <warn@@Base+0x15c0>
   4b004:	mov	r1, #0
   4b008:	mov	r2, #2
   4b00c:	bl	12760 <fseek@plt>
   4b010:	cmn	r0, #1
   4b014:	beq	4b1b0 <warn@@Base+0x15b8>
   4b018:	mov	r0, r9
   4b01c:	bl	1225c <ftell@plt>
   4b020:	cmn	r0, #1
   4b024:	mov	ip, r0
   4b028:	beq	4b1b0 <warn@@Base+0x15b8>
   4b02c:	mov	r1, #0
   4b030:	mov	r0, r9
   4b034:	mov	r2, r1
   4b038:	str	ip, [sp, #4]
   4b03c:	bl	12760 <fseek@plt>
   4b040:	ldr	ip, [sp, #4]
   4b044:	cmn	r0, #1
   4b048:	beq	4b1b0 <warn@@Base+0x15b8>
   4b04c:	add	r0, ip, #1
   4b050:	bl	12358 <xmalloc@plt>
   4b054:	ldr	ip, [sp, #4]
   4b058:	mov	r3, r9
   4b05c:	mov	r1, #1
   4b060:	mov	r2, ip
   4b064:	str	r0, [sp, #16]
   4b068:	bl	12394 <fread@plt>
   4b06c:	ldr	ip, [sp, #4]
   4b070:	cmp	ip, r0
   4b074:	mov	r3, r0
   4b078:	beq	4b094 <warn@@Base+0x149c>
   4b07c:	mov	r0, r9
   4b080:	str	r3, [sp, #8]
   4b084:	bl	121fc <ferror@plt>
   4b088:	ldr	r3, [sp, #8]
   4b08c:	cmp	r0, #0
   4b090:	bne	4b1b0 <warn@@Base+0x15b8>
   4b094:	ldr	ip, [sp, #16]
   4b098:	mov	r0, #0
   4b09c:	strb	r0, [ip, r3]
   4b0a0:	ldrb	r3, [ip]
   4b0a4:	cmp	r3, #0
   4b0a8:	beq	4b0ec <warn@@Base+0x14f4>
   4b0ac:	ldr	r2, [pc, #408]	; 4b24c <warn@@Base+0x1654>
   4b0b0:	lsl	r3, r3, #1
   4b0b4:	ldr	ip, [sp, #12]
   4b0b8:	ldr	r1, [ip, r2]
   4b0bc:	ldrh	r3, [r1, r3]
   4b0c0:	tst	r3, #64	; 0x40
   4b0c4:	beq	4b1c8 <warn@@Base+0x15d0>
   4b0c8:	ldr	r2, [sp, #16]
   4b0cc:	b	4b0e0 <warn@@Base+0x14e8>
   4b0d0:	lsl	r3, r3, #1
   4b0d4:	ldrh	r3, [r1, r3]
   4b0d8:	tst	r3, #64	; 0x40
   4b0dc:	beq	4b1c8 <warn@@Base+0x15d0>
   4b0e0:	ldrb	r3, [r2, #1]!
   4b0e4:	cmp	r3, #0
   4b0e8:	bne	4b0d0 <warn@@Base+0x14d8>
   4b0ec:	mov	r0, #4
   4b0f0:	mov	ip, #0
   4b0f4:	str	ip, [sp, #4]
   4b0f8:	bl	12358 <xmalloc@plt>
   4b0fc:	ldr	ip, [sp, #4]
   4b100:	mov	r1, #0
   4b104:	str	r0, [sp, #20]
   4b108:	str	r1, [r0]
   4b10c:	ldr	r0, [r6]
   4b110:	str	ip, [sp, #8]
   4b114:	bl	4abc0 <warn@@Base+0xfc8>
   4b118:	ldr	r3, [sp, #8]
   4b11c:	ldr	ip, [sp, #4]
   4b120:	str	r0, [r6]
   4b124:	ldr	r1, [sl]
   4b128:	str	ip, [sp, #4]
   4b12c:	add	r1, r1, #1
   4b130:	str	r3, [sp, #8]
   4b134:	add	r1, r1, r3
   4b138:	lsl	r1, r1, #2
   4b13c:	bl	122c8 <xrealloc@plt>
   4b140:	ldr	r3, [sp, #8]
   4b144:	ldr	r2, [sl]
   4b148:	add	lr, r7, #4
   4b14c:	rsb	r2, r4, r2
   4b150:	lsl	r2, r2, #2
   4b154:	mov	r1, r0
   4b158:	add	r0, r3, r4
   4b15c:	str	r1, [r6]
   4b160:	mov	r4, r5
   4b164:	add	r0, r1, r0, lsl #2
   4b168:	add	r1, r1, lr
   4b16c:	str	r3, [sp, #8]
   4b170:	bl	121cc <memmove@plt>
   4b174:	ldr	ip, [sp, #4]
   4b178:	ldr	r0, [r6]
   4b17c:	ldr	r1, [sp, #20]
   4b180:	mov	r2, ip
   4b184:	add	r0, r0, r7
   4b188:	bl	1222c <memcpy@plt>
   4b18c:	ldr	r2, [sl]
   4b190:	ldr	r3, [sp, #8]
   4b194:	sub	r2, r2, #1
   4b198:	ldr	r0, [sp, #20]
   4b19c:	add	r3, r2, r3
   4b1a0:	str	r3, [sl]
   4b1a4:	bl	121f0 <free@plt>
   4b1a8:	ldr	r0, [sp, #16]
   4b1ac:	bl	121f0 <free@plt>
   4b1b0:	mov	r0, r9
   4b1b4:	bl	125ec <fclose@plt>
   4b1b8:	ldr	r1, [sl]
   4b1bc:	b	4afc0 <warn@@Base+0x13c8>
   4b1c0:	add	sp, sp, #28
   4b1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b1c8:	ldr	r0, [sp, #16]
   4b1cc:	bl	4ac8c <warn@@Base+0x1094>
   4b1d0:	ldr	ip, [r0]
   4b1d4:	str	r0, [sp, #20]
   4b1d8:	ldr	r0, [r6]
   4b1dc:	str	ip, [sp, #4]
   4b1e0:	bl	4abc0 <warn@@Base+0xfc8>
   4b1e4:	ldr	ip, [sp, #4]
   4b1e8:	cmp	ip, #0
   4b1ec:	moveq	r3, ip
   4b1f0:	str	r0, [r6]
   4b1f4:	beq	4b124 <warn@@Base+0x152c>
   4b1f8:	ldr	r2, [sp, #20]
   4b1fc:	mov	r3, #0
   4b200:	ldr	r1, [r2, #4]!
   4b204:	add	r3, r3, #1
   4b208:	cmp	r1, #0
   4b20c:	lsl	ip, r3, #2
   4b210:	bne	4b200 <warn@@Base+0x1608>
   4b214:	b	4b124 <warn@@Base+0x152c>
   4b218:	ldr	ip, [sp, #12]
   4b21c:	mov	r1, #1
   4b220:	ldr	r0, [pc, #40]	; 4b250 <warn@@Base+0x1658>
   4b224:	ldr	r2, [pc, #40]	; 4b254 <warn@@Base+0x165c>
   4b228:	ldr	r3, [r3]
   4b22c:	ldr	r0, [ip, r0]
   4b230:	add	r2, pc, r2
   4b234:	ldr	r0, [r0]
   4b238:	bl	125d4 <__fprintf_chk@plt>
   4b23c:	mov	r0, #1
   4b240:	bl	126a0 <xexit@plt>
   4b244:	andeq	r4, r2, r8, asr r0
   4b248:	andeq	lr, r0, ip, lsl #22
   4b24c:	andeq	r0, r0, r8, asr #4
   4b250:	andeq	r0, r0, ip, asr #4
   4b254:	andeq	r0, r1, r0, lsl r7
   4b258:	subs	r3, r0, #0
   4b25c:	beq	4b284 <warn@@Base+0x168c>
   4b260:	ldr	r0, [r3]
   4b264:	cmp	r0, #0
   4b268:	bxeq	lr
   4b26c:	mov	r0, #0
   4b270:	ldr	r2, [r3, #4]!
   4b274:	add	r0, r0, #1
   4b278:	cmp	r2, #0
   4b27c:	bne	4b270 <warn@@Base+0x1678>
   4b280:	bx	lr
   4b284:	mov	r0, r3
   4b288:	bx	lr
   4b28c:	push	{r4}		; (str r4, [sp, #-4]!)
   4b290:	subs	r4, r0, #0
   4b294:	beq	4b3a4 <warn@@Base+0x17ac>
   4b298:	sub	ip, r1, #1
   4b29c:	cmp	ip, #60	; 0x3c
   4b2a0:	addls	pc, pc, ip, lsl #2
   4b2a4:	b	4b3a4 <warn@@Base+0x17ac>
   4b2a8:	b	4b3b0 <warn@@Base+0x17b8>
   4b2ac:	b	4b3b0 <warn@@Base+0x17b8>
   4b2b0:	b	4b3b0 <warn@@Base+0x17b8>
   4b2b4:	b	4b3b0 <warn@@Base+0x17b8>
   4b2b8:	b	4b3a4 <warn@@Base+0x17ac>
   4b2bc:	b	4b3a4 <warn@@Base+0x17ac>
   4b2c0:	b	4b3a4 <warn@@Base+0x17ac>
   4b2c4:	b	4b3a4 <warn@@Base+0x17ac>
   4b2c8:	b	4b39c <warn@@Base+0x17a4>
   4b2cc:	b	4b39c <warn@@Base+0x17a4>
   4b2d0:	b	4b3b0 <warn@@Base+0x17b8>
   4b2d4:	b	4b39c <warn@@Base+0x17a4>
   4b2d8:	b	4b39c <warn@@Base+0x17a4>
   4b2dc:	b	4b39c <warn@@Base+0x17a4>
   4b2e0:	b	4b39c <warn@@Base+0x17a4>
   4b2e4:	b	4b39c <warn@@Base+0x17a4>
   4b2e8:	b	4b39c <warn@@Base+0x17a4>
   4b2ec:	b	4b39c <warn@@Base+0x17a4>
   4b2f0:	b	4b39c <warn@@Base+0x17a4>
   4b2f4:	b	4b3a4 <warn@@Base+0x17ac>
   4b2f8:	b	4b3a4 <warn@@Base+0x17ac>
   4b2fc:	b	4b39c <warn@@Base+0x17a4>
   4b300:	b	4b3a4 <warn@@Base+0x17ac>
   4b304:	b	4b3a4 <warn@@Base+0x17ac>
   4b308:	b	4b39c <warn@@Base+0x17a4>
   4b30c:	b	4b39c <warn@@Base+0x17a4>
   4b310:	b	4b39c <warn@@Base+0x17a4>
   4b314:	b	4b39c <warn@@Base+0x17a4>
   4b318:	b	4b39c <warn@@Base+0x17a4>
   4b31c:	b	4b39c <warn@@Base+0x17a4>
   4b320:	b	4b3a4 <warn@@Base+0x17ac>
   4b324:	b	4b3a4 <warn@@Base+0x17ac>
   4b328:	b	4b3b0 <warn@@Base+0x17b8>
   4b32c:	b	4b39c <warn@@Base+0x17a4>
   4b330:	b	4b39c <warn@@Base+0x17a4>
   4b334:	b	4b3a4 <warn@@Base+0x17ac>
   4b338:	b	4b39c <warn@@Base+0x17a4>
   4b33c:	b	4b39c <warn@@Base+0x17a4>
   4b340:	b	4b3a4 <warn@@Base+0x17ac>
   4b344:	b	4b39c <warn@@Base+0x17a4>
   4b348:	b	4b3b0 <warn@@Base+0x17b8>
   4b34c:	b	4b3b0 <warn@@Base+0x17b8>
   4b350:	b	4b3b0 <warn@@Base+0x17b8>
   4b354:	b	4b3a4 <warn@@Base+0x17ac>
   4b358:	b	4b3a4 <warn@@Base+0x17ac>
   4b35c:	b	4b3b0 <warn@@Base+0x17b8>
   4b360:	b	4b3b0 <warn@@Base+0x17b8>
   4b364:	b	4b3a4 <warn@@Base+0x17ac>
   4b368:	b	4b3a4 <warn@@Base+0x17ac>
   4b36c:	b	4b3a4 <warn@@Base+0x17ac>
   4b370:	b	4b39c <warn@@Base+0x17a4>
   4b374:	b	4b39c <warn@@Base+0x17a4>
   4b378:	b	4b3a4 <warn@@Base+0x17ac>
   4b37c:	b	4b3b0 <warn@@Base+0x17b8>
   4b380:	b	4b3b0 <warn@@Base+0x17b8>
   4b384:	b	4b3b0 <warn@@Base+0x17b8>
   4b388:	b	4b3b0 <warn@@Base+0x17b8>
   4b38c:	b	4b3b0 <warn@@Base+0x17b8>
   4b390:	b	4b3b0 <warn@@Base+0x17b8>
   4b394:	b	4b3b0 <warn@@Base+0x17b8>
   4b398:	b	4b3b0 <warn@@Base+0x17b8>
   4b39c:	cmp	r3, #0
   4b3a0:	beq	4b3b0 <warn@@Base+0x17b8>
   4b3a4:	mov	r0, #0
   4b3a8:	pop	{r4}		; (ldr r4, [sp], #4)
   4b3ac:	bx	lr
   4b3b0:	str	r1, [r4]
   4b3b4:	mov	r0, #1
   4b3b8:	stmib	r4, {r2, r3}
   4b3bc:	pop	{r4}		; (ldr r4, [sp], #4)
   4b3c0:	bx	lr
   4b3c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   4b3c8:	cmp	r1, #0
   4b3cc:	cmpne	r0, #0
   4b3d0:	ldr	r6, [pc, #136]	; 4b460 <warn@@Base+0x1868>
   4b3d4:	mov	r9, r0
   4b3d8:	mov	r8, r1
   4b3dc:	movne	r4, #0
   4b3e0:	moveq	r4, #1
   4b3e4:	add	r6, pc, r6
   4b3e8:	beq	4b458 <warn@@Base+0x1860>
   4b3ec:	mov	r0, r1
   4b3f0:	mov	r5, r4
   4b3f4:	bl	124e4 <strlen@plt>
   4b3f8:	ldr	r3, [pc, #100]	; 4b464 <warn@@Base+0x186c>
   4b3fc:	ldr	r6, [r6, r3]
   4b400:	mov	r7, r0
   4b404:	b	4b418 <warn@@Base+0x1820>
   4b408:	add	r4, r4, #20
   4b40c:	add	r5, r5, #1
   4b410:	cmp	r4, #660	; 0x294
   4b414:	beq	4b458 <warn@@Base+0x1860>
   4b418:	add	r3, r6, r4
   4b41c:	ldr	r3, [r3, #4]
   4b420:	cmp	r3, r7
   4b424:	bne	4b408 <warn@@Base+0x1810>
   4b428:	mov	r0, r8
   4b42c:	ldr	r1, [r6, r4]
   4b430:	bl	12178 <strcmp@plt>
   4b434:	cmp	r0, #0
   4b438:	bne	4b408 <warn@@Base+0x1810>
   4b43c:	add	r5, r5, r5, lsl #2
   4b440:	mov	r3, #39	; 0x27
   4b444:	mov	r0, #1
   4b448:	str	r3, [r9]
   4b44c:	add	r6, r6, r5, lsl #2
   4b450:	str	r6, [r9, #4]
   4b454:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   4b458:	mov	r0, #0
   4b45c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   4b460:	andeq	r3, r2, r4, lsl ip
   4b464:	andeq	r0, r0, r0, ror #4
   4b468:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4b46c:	cmp	r1, #0
   4b470:	cmpne	r0, #0
   4b474:	ldr	r4, [pc, #156]	; 4b518 <warn@@Base+0x1920>
   4b478:	mov	r7, r0
   4b47c:	mov	r9, r1
   4b480:	movne	r5, #0
   4b484:	moveq	r5, #1
   4b488:	mov	sl, r2
   4b48c:	add	r4, pc, r4
   4b490:	beq	4b510 <warn@@Base+0x1918>
   4b494:	mov	r0, r1
   4b498:	bl	124e4 <strlen@plt>
   4b49c:	ldr	r3, [pc, #120]	; 4b51c <warn@@Base+0x1924>
   4b4a0:	ldr	r8, [r4, r3]
   4b4a4:	ldr	r1, [r8, #4]
   4b4a8:	cmp	r1, #0
   4b4ac:	mov	r6, r0
   4b4b0:	beq	4b510 <warn@@Base+0x1918>
   4b4b4:	mov	r4, r8
   4b4b8:	b	4b4d0 <warn@@Base+0x18d8>
   4b4bc:	add	r4, r4, #16
   4b4c0:	ldr	r1, [r4, #4]
   4b4c4:	add	r5, r5, #1
   4b4c8:	cmp	r1, #0
   4b4cc:	beq	4b510 <warn@@Base+0x1918>
   4b4d0:	ldr	ip, [r4, #8]
   4b4d4:	cmp	ip, r6
   4b4d8:	bne	4b4bc <warn@@Base+0x18c4>
   4b4dc:	ldr	ip, [r4, #12]
   4b4e0:	cmp	ip, sl
   4b4e4:	bne	4b4bc <warn@@Base+0x18c4>
   4b4e8:	mov	r0, r9
   4b4ec:	bl	12178 <strcmp@plt>
   4b4f0:	cmp	r0, #0
   4b4f4:	bne	4b4bc <warn@@Base+0x18c4>
   4b4f8:	add	r5, r8, r5, lsl #4
   4b4fc:	mov	r3, #49	; 0x31
   4b500:	str	r5, [r7, #4]
   4b504:	mov	r0, #1
   4b508:	str	r3, [r7]
   4b50c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4b510:	mov	r0, #0
   4b514:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4b518:	andeq	r3, r2, ip, ror #22
   4b51c:	andeq	r0, r0, ip, asr r2
   4b520:	ldr	r3, [pc, #336]	; 4b678 <warn@@Base+0x1a80>
   4b524:	ldr	ip, [pc, #336]	; 4b67c <warn@@Base+0x1a84>
   4b528:	add	r3, pc, r3
   4b52c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4b530:	sub	sp, sp, #72	; 0x48
   4b534:	ldr	r6, [r3, ip]
   4b538:	mov	r5, r0
   4b53c:	mov	r8, r2
   4b540:	mov	r4, r1
   4b544:	ldr	r3, [r6]
   4b548:	str	r3, [sp, #68]	; 0x44
   4b54c:	bl	124e4 <strlen@plt>
   4b550:	ldrb	r3, [r5]
   4b554:	cmp	r3, #95	; 0x5f
   4b558:	mov	r2, r0
   4b55c:	beq	4b648 <warn@@Base+0x1a50>
   4b560:	ands	r0, r4, #16
   4b564:	beq	4b5fc <warn@@Base+0x1a04>
   4b568:	mov	r9, #1
   4b56c:	add	sl, sp, #4
   4b570:	mov	r0, r5
   4b574:	mov	r1, r4
   4b578:	mov	r3, sl
   4b57c:	bl	124b4 <cplus_demangle_init_info@plt>
   4b580:	ldr	r1, [sp, #28]
   4b584:	add	r0, r1, r1, lsl #1
   4b588:	lsl	r0, r0, #2
   4b58c:	bl	1243c <malloc@plt>
   4b590:	mov	r5, r0
   4b594:	ldr	r0, [sp, #40]	; 0x28
   4b598:	str	r5, [sp, #20]
   4b59c:	lsl	r0, r0, #2
   4b5a0:	bl	1243c <malloc@plt>
   4b5a4:	cmp	r5, #0
   4b5a8:	mov	r7, r0
   4b5ac:	str	r0, [sp, #32]
   4b5b0:	beq	4b65c <warn@@Base+0x1a64>
   4b5b4:	cmp	r0, #0
   4b5b8:	beq	4b65c <warn@@Base+0x1a64>
   4b5bc:	cmp	r9, #0
   4b5c0:	mov	r0, sl
   4b5c4:	beq	4b614 <warn@@Base+0x1a1c>
   4b5c8:	bl	12628 <cplus_demangle_type@plt>
   4b5cc:	tst	r4, #1
   4b5d0:	mov	r5, r0
   4b5d4:	ldr	r0, [sp, #32]
   4b5d8:	beq	4b62c <warn@@Base+0x1a34>
   4b5dc:	ldr	r3, [sp, #16]
   4b5e0:	ldrb	r3, [r3]
   4b5e4:	cmp	r3, #0
   4b5e8:	beq	4b62c <warn@@Base+0x1a34>
   4b5ec:	bl	121f0 <free@plt>
   4b5f0:	ldr	r0, [sp, #20]
   4b5f4:	bl	121f0 <free@plt>
   4b5f8:	mov	r0, #0
   4b5fc:	ldr	r2, [sp, #68]	; 0x44
   4b600:	ldr	r3, [r6]
   4b604:	cmp	r2, r3
   4b608:	bne	4b674 <warn@@Base+0x1a7c>
   4b60c:	add	sp, sp, #72	; 0x48
   4b610:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4b614:	mov	r1, #1
   4b618:	bl	12664 <cplus_demangle_mangled_name@plt>
   4b61c:	tst	r4, #1
   4b620:	mov	r5, r0
   4b624:	ldr	r0, [sp, #32]
   4b628:	bne	4b5dc <warn@@Base+0x19e4>
   4b62c:	bl	121f0 <free@plt>
   4b630:	cmp	r5, #0
   4b634:	beq	4b5f0 <warn@@Base+0x19f8>
   4b638:	ldr	r3, [sp, #20]
   4b63c:	mov	r0, r5
   4b640:	str	r3, [r8]
   4b644:	b	4b5fc <warn@@Base+0x1a04>
   4b648:	ldrb	r3, [r5, #1]
   4b64c:	cmp	r3, #90	; 0x5a
   4b650:	bne	4b560 <warn@@Base+0x1968>
   4b654:	mov	r9, #0
   4b658:	b	4b56c <warn@@Base+0x1974>
   4b65c:	mov	r0, r5
   4b660:	bl	121f0 <free@plt>
   4b664:	mov	r0, r7
   4b668:	bl	121f0 <free@plt>
   4b66c:	mov	r0, #0
   4b670:	b	4b5fc <warn@@Base+0x1a04>
   4b674:	bl	122b0 <__stack_chk_fail@plt>
   4b678:	ldrdeq	r3, [r2], -r0
   4b67c:	andeq	r0, r0, r4, asr #4
   4b680:	cmp	r0, #46	; 0x2e
   4b684:	beq	4bb5c <warn@@Base+0x1f64>
   4b688:	bls	4b6d8 <warn@@Base+0x1ae0>
   4b68c:	cmp	r0, #67	; 0x43
   4b690:	beq	4bd38 <warn@@Base+0x2140>
   4b694:	bhi	4b764 <warn@@Base+0x1b6c>
   4b698:	cmp	r0, #56	; 0x38
   4b69c:	beq	4bcfc <warn@@Base+0x2104>
   4b6a0:	bls	4b7b8 <warn@@Base+0x1bc0>
   4b6a4:	cmp	r0, #61	; 0x3d
   4b6a8:	beq	4bbc8 <warn@@Base+0x1fd0>
   4b6ac:	bhi	4b8c0 <warn@@Base+0x1cc8>
   4b6b0:	cmp	r0, #58	; 0x3a
   4b6b4:	beq	4bafc <warn@@Base+0x1f04>
   4b6b8:	bcc	4baf0 <warn@@Base+0x1ef8>
   4b6bc:	cmp	r0, #59	; 0x3b
   4b6c0:	beq	4bb98 <warn@@Base+0x1fa0>
   4b6c4:	cmp	r0, #60	; 0x3c
   4b6c8:	bne	4bc58 <warn@@Base+0x2060>
   4b6cc:	ldr	r0, [pc, #1672]	; 4bd5c <warn@@Base+0x2164>
   4b6d0:	add	r0, pc, r0
   4b6d4:	bx	lr
   4b6d8:	cmp	r0, #25
   4b6dc:	beq	4bd20 <warn@@Base+0x2128>
   4b6e0:	bhi	4b724 <warn@@Base+0x1b2c>
   4b6e4:	cmp	r0, #13
   4b6e8:	beq	4bb50 <warn@@Base+0x1f58>
   4b6ec:	bls	4b7ec <warn@@Base+0x1bf4>
   4b6f0:	cmp	r0, #19
   4b6f4:	beq	4bc40 <warn@@Base+0x2048>
   4b6f8:	bhi	4b8e8 <warn@@Base+0x1cf0>
   4b6fc:	cmp	r0, #16
   4b700:	beq	4bbe0 <warn@@Base+0x1fe8>
   4b704:	bls	4ba98 <warn@@Base+0x1ea0>
   4b708:	cmp	r0, #17
   4b70c:	beq	4bc60 <warn@@Base+0x2068>
   4b710:	cmp	r0, #18
   4b714:	bne	4bc58 <warn@@Base+0x2060>
   4b718:	ldr	r0, [pc, #1600]	; 4bd60 <warn@@Base+0x2168>
   4b71c:	add	r0, pc, r0
   4b720:	bx	lr
   4b724:	cmp	r0, #35	; 0x23
   4b728:	beq	4bd14 <warn@@Base+0x211c>
   4b72c:	bls	4b820 <warn@@Base+0x1c28>
   4b730:	cmp	r0, #40	; 0x28
   4b734:	beq	4bba4 <warn@@Base+0x1fac>
   4b738:	bls	4b9e0 <warn@@Base+0x1de8>
   4b73c:	cmp	r0, #43	; 0x2b
   4b740:	beq	4b9a0 <warn@@Base+0x1da8>
   4b744:	bhi	4ba08 <warn@@Base+0x1e10>
   4b748:	cmp	r0, #41	; 0x29
   4b74c:	beq	4bc10 <warn@@Base+0x2018>
   4b750:	cmp	r0, #42	; 0x2a
   4b754:	bne	4bc58 <warn@@Base+0x2060>
   4b758:	ldr	r0, [pc, #1540]	; 4bd64 <warn@@Base+0x216c>
   4b75c:	add	r0, pc, r0
   4b760:	bx	lr
   4b764:	movw	r3, #16645	; 0x4105
   4b768:	cmp	r0, r3
   4b76c:	beq	4bd08 <warn@@Base+0x2110>
   4b770:	bls	4b854 <warn@@Base+0x1c5c>
   4b774:	movw	r3, #16650	; 0x410a
   4b778:	cmp	r0, r3
   4b77c:	beq	4bd2c <warn@@Base+0x2134>
   4b780:	bls	4b9ac <warn@@Base+0x1db4>
   4b784:	movw	r3, #34663	; 0x8767
   4b788:	cmp	r0, r3
   4b78c:	beq	4b994 <warn@@Base+0x1d9c>
   4b790:	bhi	4ba24 <warn@@Base+0x1e2c>
   4b794:	movw	r3, #34661	; 0x8765
   4b798:	cmp	r0, r3
   4b79c:	beq	4bd44 <warn@@Base+0x214c>
   4b7a0:	add	r3, r3, #1
   4b7a4:	cmp	r0, r3
   4b7a8:	bne	4bc58 <warn@@Base+0x2060>
   4b7ac:	ldr	r0, [pc, #1460]	; 4bd68 <warn@@Base+0x2170>
   4b7b0:	add	r0, pc, r0
   4b7b4:	bx	lr
   4b7b8:	cmp	r0, #51	; 0x33
   4b7bc:	beq	4bb38 <warn@@Base+0x1f40>
   4b7c0:	bhi	4b910 <warn@@Base+0x1d18>
   4b7c4:	cmp	r0, #48	; 0x30
   4b7c8:	beq	4bc90 <warn@@Base+0x2098>
   4b7cc:	bcc	4bc84 <warn@@Base+0x208c>
   4b7d0:	cmp	r0, #49	; 0x31
   4b7d4:	beq	4bc78 <warn@@Base+0x2080>
   4b7d8:	cmp	r0, #50	; 0x32
   4b7dc:	bne	4bc58 <warn@@Base+0x2060>
   4b7e0:	ldr	r0, [pc, #1412]	; 4bd6c <warn@@Base+0x2174>
   4b7e4:	add	r0, pc, r0
   4b7e8:	bx	lr
   4b7ec:	cmp	r0, #4
   4b7f0:	beq	4bc6c <warn@@Base+0x2074>
   4b7f4:	bhi	4b898 <warn@@Base+0x1ca0>
   4b7f8:	cmp	r0, #1
   4b7fc:	beq	4bb74 <warn@@Base+0x1f7c>
   4b800:	bcc	4bb68 <warn@@Base+0x1f70>
   4b804:	cmp	r0, #2
   4b808:	beq	4bbf8 <warn@@Base+0x2000>
   4b80c:	cmp	r0, #3
   4b810:	bne	4bc58 <warn@@Base+0x2060>
   4b814:	ldr	r0, [pc, #1364]	; 4bd70 <warn@@Base+0x2178>
   4b818:	add	r0, pc, r0
   4b81c:	bx	lr
   4b820:	cmp	r0, #30
   4b824:	beq	4bac0 <warn@@Base+0x1ec8>
   4b828:	bhi	4b938 <warn@@Base+0x1d40>
   4b82c:	cmp	r0, #27
   4b830:	beq	4bae4 <warn@@Base+0x1eec>
   4b834:	bcc	4bad8 <warn@@Base+0x1ee0>
   4b838:	cmp	r0, #28
   4b83c:	beq	4bacc <warn@@Base+0x1ed4>
   4b840:	cmp	r0, #29
   4b844:	bne	4bc58 <warn@@Base+0x2060>
   4b848:	ldr	r0, [pc, #1316]	; 4bd74 <warn@@Base+0x217c>
   4b84c:	add	r0, pc, r0
   4b850:	bx	lr
   4b854:	movw	r3, #16530	; 0x4092
   4b858:	cmp	r0, r3
   4b85c:	beq	4bc9c <warn@@Base+0x20a4>
   4b860:	bhi	4b960 <warn@@Base+0x1d68>
   4b864:	movw	r3, #16513	; 0x4081
   4b868:	cmp	r0, r3
   4b86c:	beq	4bbec <warn@@Base+0x1ff4>
   4b870:	bls	4baac <warn@@Base+0x1eb4>
   4b874:	movw	r3, #16528	; 0x4090
   4b878:	cmp	r0, r3
   4b87c:	beq	4bc04 <warn@@Base+0x200c>
   4b880:	add	r3, r3, #1
   4b884:	cmp	r0, r3
   4b888:	bne	4bc58 <warn@@Base+0x2060>
   4b88c:	ldr	r0, [pc, #1252]	; 4bd78 <warn@@Base+0x2180>
   4b890:	add	r0, pc, r0
   4b894:	bx	lr
   4b898:	cmp	r0, #8
   4b89c:	beq	4bbbc <warn@@Base+0x1fc4>
   4b8a0:	bls	4ba58 <warn@@Base+0x1e60>
   4b8a4:	cmp	r0, #10
   4b8a8:	beq	4bbd4 <warn@@Base+0x1fdc>
   4b8ac:	cmp	r0, #11
   4b8b0:	bne	4bc58 <warn@@Base+0x2060>
   4b8b4:	ldr	r0, [pc, #1216]	; 4bd7c <warn@@Base+0x2184>
   4b8b8:	add	r0, pc, r0
   4b8bc:	bx	lr
   4b8c0:	cmp	r0, #64	; 0x40
   4b8c4:	beq	4bb20 <warn@@Base+0x1f28>
   4b8c8:	bls	4ba6c <warn@@Base+0x1e74>
   4b8cc:	cmp	r0, #65	; 0x41
   4b8d0:	beq	4bc4c <warn@@Base+0x2054>
   4b8d4:	cmp	r0, #66	; 0x42
   4b8d8:	bne	4bc58 <warn@@Base+0x2060>
   4b8dc:	ldr	r0, [pc, #1180]	; 4bd80 <warn@@Base+0x2188>
   4b8e0:	add	r0, pc, r0
   4b8e4:	bx	lr
   4b8e8:	cmp	r0, #22
   4b8ec:	beq	4bb08 <warn@@Base+0x1f10>
   4b8f0:	bls	4ba44 <warn@@Base+0x1e4c>
   4b8f4:	cmp	r0, #23
   4b8f8:	beq	4bccc <warn@@Base+0x20d4>
   4b8fc:	cmp	r0, #24
   4b900:	bne	4bc58 <warn@@Base+0x2060>
   4b904:	ldr	r0, [pc, #1144]	; 4bd84 <warn@@Base+0x218c>
   4b908:	add	r0, pc, r0
   4b90c:	bx	lr
   4b910:	cmp	r0, #53	; 0x35
   4b914:	beq	4bcc0 <warn@@Base+0x20c8>
   4b918:	bcc	4bcb4 <warn@@Base+0x20bc>
   4b91c:	cmp	r0, #54	; 0x36
   4b920:	beq	4bca8 <warn@@Base+0x20b0>
   4b924:	cmp	r0, #55	; 0x37
   4b928:	bne	4bc58 <warn@@Base+0x2060>
   4b92c:	ldr	r0, [pc, #1108]	; 4bd88 <warn@@Base+0x2190>
   4b930:	add	r0, pc, r0
   4b934:	bx	lr
   4b938:	cmp	r0, #32
   4b93c:	beq	4bcf0 <warn@@Base+0x20f8>
   4b940:	bcc	4bce4 <warn@@Base+0x20ec>
   4b944:	cmp	r0, #33	; 0x21
   4b948:	beq	4bcd8 <warn@@Base+0x20e0>
   4b94c:	cmp	r0, #34	; 0x22
   4b950:	bne	4bc58 <warn@@Base+0x2060>
   4b954:	ldr	r0, [pc, #1072]	; 4bd8c <warn@@Base+0x2194>
   4b958:	add	r0, pc, r0
   4b95c:	bx	lr
   4b960:	movw	r3, #16642	; 0x4102
   4b964:	cmp	r0, r3
   4b968:	beq	4bb2c <warn@@Base+0x1f34>
   4b96c:	bls	4ba80 <warn@@Base+0x1e88>
   4b970:	movw	r3, #16643	; 0x4103
   4b974:	cmp	r0, r3
   4b978:	beq	4bb44 <warn@@Base+0x1f4c>
   4b97c:	add	r3, r3, #1
   4b980:	cmp	r0, r3
   4b984:	bne	4bc58 <warn@@Base+0x2060>
   4b988:	ldr	r0, [pc, #1024]	; 4bd90 <warn@@Base+0x2198>
   4b98c:	add	r0, pc, r0
   4b990:	bx	lr
   4b994:	ldr	r0, [pc, #1016]	; 4bd94 <warn@@Base+0x219c>
   4b998:	add	r0, pc, r0
   4b99c:	bx	lr
   4b9a0:	ldr	r0, [pc, #1008]	; 4bd98 <warn@@Base+0x21a0>
   4b9a4:	add	r0, pc, r0
   4b9a8:	bx	lr
   4b9ac:	movw	r3, #16647	; 0x4107
   4b9b0:	cmp	r0, r3
   4b9b4:	beq	4bb8c <warn@@Base+0x1f94>
   4b9b8:	bcc	4bb80 <warn@@Base+0x1f88>
   4b9bc:	add	r3, r3, #1
   4b9c0:	cmp	r0, r3
   4b9c4:	beq	4bbb0 <warn@@Base+0x1fb8>
   4b9c8:	add	r3, r3, #1
   4b9cc:	cmp	r0, r3
   4b9d0:	bne	4bc58 <warn@@Base+0x2060>
   4b9d4:	ldr	r0, [pc, #960]	; 4bd9c <warn@@Base+0x21a4>
   4b9d8:	add	r0, pc, r0
   4b9dc:	bx	lr
   4b9e0:	cmp	r0, #37	; 0x25
   4b9e4:	beq	4bc34 <warn@@Base+0x203c>
   4b9e8:	bcc	4bc28 <warn@@Base+0x2030>
   4b9ec:	cmp	r0, #38	; 0x26
   4b9f0:	beq	4bc1c <warn@@Base+0x2024>
   4b9f4:	cmp	r0, #39	; 0x27
   4b9f8:	bne	4bc58 <warn@@Base+0x2060>
   4b9fc:	ldr	r0, [pc, #924]	; 4bda0 <warn@@Base+0x21a8>
   4ba00:	add	r0, pc, r0
   4ba04:	bx	lr
   4ba08:	cmp	r0, #44	; 0x2c
   4ba0c:	beq	4bd50 <warn@@Base+0x2158>
   4ba10:	cmp	r0, #45	; 0x2d
   4ba14:	bne	4bc58 <warn@@Base+0x2060>
   4ba18:	ldr	r0, [pc, #900]	; 4bda4 <warn@@Base+0x21ac>
   4ba1c:	add	r0, pc, r0
   4ba20:	bx	lr
   4ba24:	cmp	r0, #40960	; 0xa000
   4ba28:	beq	4bb14 <warn@@Base+0x1f1c>
   4ba2c:	movw	r3, #40992	; 0xa020
   4ba30:	cmp	r0, r3
   4ba34:	bne	4bc58 <warn@@Base+0x2060>
   4ba38:	ldr	r0, [pc, #872]	; 4bda8 <warn@@Base+0x21b0>
   4ba3c:	add	r0, pc, r0
   4ba40:	bx	lr
   4ba44:	cmp	r0, #21
   4ba48:	bne	4bc58 <warn@@Base+0x2060>
   4ba4c:	ldr	r0, [pc, #856]	; 4bdac <warn@@Base+0x21b4>
   4ba50:	add	r0, pc, r0
   4ba54:	bx	lr
   4ba58:	cmp	r0, #5
   4ba5c:	bne	4bc58 <warn@@Base+0x2060>
   4ba60:	ldr	r0, [pc, #840]	; 4bdb0 <warn@@Base+0x21b8>
   4ba64:	add	r0, pc, r0
   4ba68:	bx	lr
   4ba6c:	cmp	r0, #63	; 0x3f
   4ba70:	bne	4bc58 <warn@@Base+0x2060>
   4ba74:	ldr	r0, [pc, #824]	; 4bdb4 <warn@@Base+0x21bc>
   4ba78:	add	r0, pc, r0
   4ba7c:	bx	lr
   4ba80:	movw	r3, #16641	; 0x4101
   4ba84:	cmp	r0, r3
   4ba88:	bne	4bc58 <warn@@Base+0x2060>
   4ba8c:	ldr	r0, [pc, #804]	; 4bdb8 <warn@@Base+0x21c0>
   4ba90:	add	r0, pc, r0
   4ba94:	bx	lr
   4ba98:	cmp	r0, #15
   4ba9c:	bne	4bc58 <warn@@Base+0x2060>
   4baa0:	ldr	r0, [pc, #788]	; 4bdbc <warn@@Base+0x21c4>
   4baa4:	add	r0, pc, r0
   4baa8:	bx	lr
   4baac:	cmp	r0, #71	; 0x47
   4bab0:	bne	4bc58 <warn@@Base+0x2060>
   4bab4:	ldr	r0, [pc, #772]	; 4bdc0 <warn@@Base+0x21c8>
   4bab8:	add	r0, pc, r0
   4babc:	bx	lr
   4bac0:	ldr	r0, [pc, #764]	; 4bdc4 <warn@@Base+0x21cc>
   4bac4:	add	r0, pc, r0
   4bac8:	bx	lr
   4bacc:	ldr	r0, [pc, #756]	; 4bdc8 <warn@@Base+0x21d0>
   4bad0:	add	r0, pc, r0
   4bad4:	bx	lr
   4bad8:	ldr	r0, [pc, #748]	; 4bdcc <warn@@Base+0x21d4>
   4badc:	add	r0, pc, r0
   4bae0:	bx	lr
   4bae4:	ldr	r0, [pc, #740]	; 4bdd0 <warn@@Base+0x21d8>
   4bae8:	add	r0, pc, r0
   4baec:	bx	lr
   4baf0:	ldr	r0, [pc, #732]	; 4bdd4 <warn@@Base+0x21dc>
   4baf4:	add	r0, pc, r0
   4baf8:	bx	lr
   4bafc:	ldr	r0, [pc, #724]	; 4bdd8 <warn@@Base+0x21e0>
   4bb00:	add	r0, pc, r0
   4bb04:	bx	lr
   4bb08:	ldr	r0, [pc, #716]	; 4bddc <warn@@Base+0x21e4>
   4bb0c:	add	r0, pc, r0
   4bb10:	bx	lr
   4bb14:	ldr	r0, [pc, #708]	; 4bde0 <warn@@Base+0x21e8>
   4bb18:	add	r0, pc, r0
   4bb1c:	bx	lr
   4bb20:	ldr	r0, [pc, #700]	; 4bde4 <warn@@Base+0x21ec>
   4bb24:	add	r0, pc, r0
   4bb28:	bx	lr
   4bb2c:	ldr	r0, [pc, #692]	; 4bde8 <warn@@Base+0x21f0>
   4bb30:	add	r0, pc, r0
   4bb34:	bx	lr
   4bb38:	ldr	r0, [pc, #684]	; 4bdec <warn@@Base+0x21f4>
   4bb3c:	add	r0, pc, r0
   4bb40:	bx	lr
   4bb44:	ldr	r0, [pc, #676]	; 4bdf0 <warn@@Base+0x21f8>
   4bb48:	add	r0, pc, r0
   4bb4c:	bx	lr
   4bb50:	ldr	r0, [pc, #668]	; 4bdf4 <warn@@Base+0x21fc>
   4bb54:	add	r0, pc, r0
   4bb58:	bx	lr
   4bb5c:	ldr	r0, [pc, #660]	; 4bdf8 <warn@@Base+0x2200>
   4bb60:	add	r0, pc, r0
   4bb64:	bx	lr
   4bb68:	ldr	r0, [pc, #652]	; 4bdfc <warn@@Base+0x2204>
   4bb6c:	add	r0, pc, r0
   4bb70:	bx	lr
   4bb74:	ldr	r0, [pc, #644]	; 4be00 <warn@@Base+0x2208>
   4bb78:	add	r0, pc, r0
   4bb7c:	bx	lr
   4bb80:	ldr	r0, [pc, #636]	; 4be04 <warn@@Base+0x220c>
   4bb84:	add	r0, pc, r0
   4bb88:	bx	lr
   4bb8c:	ldr	r0, [pc, #628]	; 4be08 <warn@@Base+0x2210>
   4bb90:	add	r0, pc, r0
   4bb94:	bx	lr
   4bb98:	ldr	r0, [pc, #620]	; 4be0c <warn@@Base+0x2214>
   4bb9c:	add	r0, pc, r0
   4bba0:	bx	lr
   4bba4:	ldr	r0, [pc, #612]	; 4be10 <warn@@Base+0x2218>
   4bba8:	add	r0, pc, r0
   4bbac:	bx	lr
   4bbb0:	ldr	r0, [pc, #604]	; 4be14 <warn@@Base+0x221c>
   4bbb4:	add	r0, pc, r0
   4bbb8:	bx	lr
   4bbbc:	ldr	r0, [pc, #596]	; 4be18 <warn@@Base+0x2220>
   4bbc0:	add	r0, pc, r0
   4bbc4:	bx	lr
   4bbc8:	ldr	r0, [pc, #588]	; 4be1c <warn@@Base+0x2224>
   4bbcc:	add	r0, pc, r0
   4bbd0:	bx	lr
   4bbd4:	ldr	r0, [pc, #580]	; 4be20 <warn@@Base+0x2228>
   4bbd8:	add	r0, pc, r0
   4bbdc:	bx	lr
   4bbe0:	ldr	r0, [pc, #572]	; 4be24 <warn@@Base+0x222c>
   4bbe4:	add	r0, pc, r0
   4bbe8:	bx	lr
   4bbec:	ldr	r0, [pc, #564]	; 4be28 <warn@@Base+0x2230>
   4bbf0:	add	r0, pc, r0
   4bbf4:	bx	lr
   4bbf8:	ldr	r0, [pc, #556]	; 4be2c <warn@@Base+0x2234>
   4bbfc:	add	r0, pc, r0
   4bc00:	bx	lr
   4bc04:	ldr	r0, [pc, #548]	; 4be30 <warn@@Base+0x2238>
   4bc08:	add	r0, pc, r0
   4bc0c:	bx	lr
   4bc10:	ldr	r0, [pc, #540]	; 4be34 <warn@@Base+0x223c>
   4bc14:	add	r0, pc, r0
   4bc18:	bx	lr
   4bc1c:	ldr	r0, [pc, #532]	; 4be38 <warn@@Base+0x2240>
   4bc20:	add	r0, pc, r0
   4bc24:	bx	lr
   4bc28:	ldr	r0, [pc, #524]	; 4be3c <warn@@Base+0x2244>
   4bc2c:	add	r0, pc, r0
   4bc30:	bx	lr
   4bc34:	ldr	r0, [pc, #516]	; 4be40 <warn@@Base+0x2248>
   4bc38:	add	r0, pc, r0
   4bc3c:	bx	lr
   4bc40:	ldr	r0, [pc, #508]	; 4be44 <warn@@Base+0x224c>
   4bc44:	add	r0, pc, r0
   4bc48:	bx	lr
   4bc4c:	ldr	r0, [pc, #500]	; 4be48 <warn@@Base+0x2250>
   4bc50:	add	r0, pc, r0
   4bc54:	bx	lr
   4bc58:	mov	r0, #0
   4bc5c:	bx	lr
   4bc60:	ldr	r0, [pc, #484]	; 4be4c <warn@@Base+0x2254>
   4bc64:	add	r0, pc, r0
   4bc68:	bx	lr
   4bc6c:	ldr	r0, [pc, #476]	; 4be50 <warn@@Base+0x2258>
   4bc70:	add	r0, pc, r0
   4bc74:	bx	lr
   4bc78:	ldr	r0, [pc, #468]	; 4be54 <warn@@Base+0x225c>
   4bc7c:	add	r0, pc, r0
   4bc80:	bx	lr
   4bc84:	ldr	r0, [pc, #460]	; 4be58 <warn@@Base+0x2260>
   4bc88:	add	r0, pc, r0
   4bc8c:	bx	lr
   4bc90:	ldr	r0, [pc, #452]	; 4be5c <warn@@Base+0x2264>
   4bc94:	add	r0, pc, r0
   4bc98:	bx	lr
   4bc9c:	ldr	r0, [pc, #444]	; 4be60 <warn@@Base+0x2268>
   4bca0:	add	r0, pc, r0
   4bca4:	bx	lr
   4bca8:	ldr	r0, [pc, #436]	; 4be64 <warn@@Base+0x226c>
   4bcac:	add	r0, pc, r0
   4bcb0:	bx	lr
   4bcb4:	ldr	r0, [pc, #428]	; 4be68 <warn@@Base+0x2270>
   4bcb8:	add	r0, pc, r0
   4bcbc:	bx	lr
   4bcc0:	ldr	r0, [pc, #420]	; 4be6c <warn@@Base+0x2274>
   4bcc4:	add	r0, pc, r0
   4bcc8:	bx	lr
   4bccc:	ldr	r0, [pc, #412]	; 4be70 <warn@@Base+0x2278>
   4bcd0:	add	r0, pc, r0
   4bcd4:	bx	lr
   4bcd8:	ldr	r0, [pc, #404]	; 4be74 <warn@@Base+0x227c>
   4bcdc:	add	r0, pc, r0
   4bce0:	bx	lr
   4bce4:	ldr	r0, [pc, #396]	; 4be78 <warn@@Base+0x2280>
   4bce8:	add	r0, pc, r0
   4bcec:	bx	lr
   4bcf0:	ldr	r0, [pc, #388]	; 4be7c <warn@@Base+0x2284>
   4bcf4:	add	r0, pc, r0
   4bcf8:	bx	lr
   4bcfc:	ldr	r0, [pc, #380]	; 4be80 <warn@@Base+0x2288>
   4bd00:	add	r0, pc, r0
   4bd04:	bx	lr
   4bd08:	ldr	r0, [pc, #372]	; 4be84 <warn@@Base+0x228c>
   4bd0c:	add	r0, pc, r0
   4bd10:	bx	lr
   4bd14:	ldr	r0, [pc, #364]	; 4be88 <warn@@Base+0x2290>
   4bd18:	add	r0, pc, r0
   4bd1c:	bx	lr
   4bd20:	ldr	r0, [pc, #356]	; 4be8c <warn@@Base+0x2294>
   4bd24:	add	r0, pc, r0
   4bd28:	bx	lr
   4bd2c:	ldr	r0, [pc, #348]	; 4be90 <warn@@Base+0x2298>
   4bd30:	add	r0, pc, r0
   4bd34:	bx	lr
   4bd38:	ldr	r0, [pc, #340]	; 4be94 <warn@@Base+0x229c>
   4bd3c:	add	r0, pc, r0
   4bd40:	bx	lr
   4bd44:	ldr	r0, [pc, #332]	; 4be98 <warn@@Base+0x22a0>
   4bd48:	add	r0, pc, r0
   4bd4c:	bx	lr
   4bd50:	ldr	r0, [pc, #324]	; 4be9c <warn@@Base+0x22a4>
   4bd54:	add	r0, pc, r0
   4bd58:	bx	lr
   4bd5c:	andeq	r0, r1, r0, lsr #14
   4bd60:	andeq	r0, r1, r0, ror #6
   4bd64:	andeq	r0, r1, ip, lsl #10
   4bd68:	andeq	r0, r1, r4, lsl #17
   4bd6c:	andeq	r0, r1, r0, lsr r5
   4bd70:	andeq	r0, r1, ip, lsl #3
   4bd74:	andeq	r0, r1, r8, lsl #6
   4bd78:	andeq	r0, r1, r4, asr #12
   4bd7c:	andeq	r0, r1, ip, asr r1
   4bd80:	andeq	r0, r1, r8, ror r5
   4bd84:	ldrdeq	r0, [r1], -ip
   4bd88:	andeq	r0, r1, ip, asr #8
   4bd8c:	andeq	r0, r1, ip, ror #4
   4bd90:	andeq	r0, r1, r4, asr #11
   4bd94:			; <UNDEFINED> instruction: 0x000106b4
   4bd98:	ldrdeq	r0, [r1], -r4
   4bd9c:	andeq	r0, r1, ip, lsl #12
   4bda0:	andeq	r0, r1, r0, lsr r2
   4bda4:	andeq	r0, r1, r4, lsl #5
   4bda8:	andeq	r0, r1, r0, asr #12
   4bdac:	andeq	r0, r1, r8, asr r0
   4bdb0:	andeq	pc, r0, ip, ror #30
   4bdb4:	andeq	r0, r1, r4, lsr #7
   4bdb8:	andeq	r0, r1, r8, ror r4
   4bdbc:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   4bdc0:	ldrdeq	r0, [r1], -r8
   4bdc4:	andeq	r0, r1, ip, lsr #1
   4bdc8:	andeq	r0, r1, r0, ror r0
   4bdcc:	andeq	r0, r1, r8, lsr r0
   4bdd0:	andeq	r0, r1, r0, asr #32
   4bdd4:			; <UNDEFINED> instruction: 0x000102b8
   4bdd8:	andeq	r0, r1, r0, asr #5
   4bddc:			; <UNDEFINED> instruction: 0x0000ffb4
   4bde0:	andeq	r0, r1, ip, asr #10
   4bde4:	andeq	r0, r1, ip, lsl #6
   4bde8:	andeq	r0, r1, ip, ror #7
   4bdec:	andeq	r0, r1, ip, ror #3
   4bdf0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   4bdf4:	ldrdeq	pc, [r0], -r8
   4bdf8:	andeq	r0, r1, r4, asr r1
   4bdfc:	andeq	pc, r0, r0, lsl #28
   4be00:	andeq	pc, r0, r4, lsl #28
   4be04:	strdeq	r0, [r1], -r4
   4be08:	andeq	r0, r1, ip, lsl #8
   4be0c:	andeq	r0, r1, ip, lsr r2
   4be10:	muleq	r1, r8, r0
   4be14:	andeq	r0, r1, ip, lsl #8
   4be18:	andeq	pc, r0, r8, lsr #28
   4be1c:	andeq	r0, r1, r8, lsr r2
   4be20:	andeq	pc, r0, ip, lsr #28
   4be24:	andeq	pc, r0, ip, ror #28
   4be28:			; <UNDEFINED> instruction: 0x000102b4
   4be2c:	muleq	r0, r4, sp
   4be30:			; <UNDEFINED> instruction: 0x000102b0
   4be34:	andeq	r0, r1, r0, asr #32
   4be38:	strdeq	pc, [r0], -ip
   4be3c:	andeq	pc, r0, r8, asr #31
   4be40:	ldrdeq	pc, [r0], -r0
   4be44:	andeq	pc, r0, ip, asr #28
   4be48:	strdeq	r0, [r1], -r4
   4be4c:	andeq	pc, r0, r4, lsl #28
   4be50:	andeq	pc, r0, r8, asr #26
   4be54:	andeq	r0, r1, r4, lsl #1
   4be58:	andeq	r0, r1, r0, asr #32
   4be5c:	andeq	r0, r1, r0, asr r0
   4be60:	andeq	r0, r1, ip, asr #4
   4be64:	strheq	r0, [r1], -r8
   4be68:	andeq	r0, r1, r4, lsl #1
   4be6c:	andeq	r0, r1, r8, lsl #1
   4be70:	andeq	pc, r0, r0, lsl #28
   4be74:	ldrdeq	pc, [r0], -r0
   4be78:	muleq	r0, r8, lr
   4be7c:	andeq	pc, r0, r8, lsr #29
   4be80:	muleq	r1, r4, r0
   4be84:	andeq	r0, r1, r8, asr r2
   4be88:	andeq	pc, r0, r0, asr #29
   4be8c:	andeq	pc, r0, r0, ror #27
   4be90:	andeq	r0, r1, ip, asr #5
   4be94:	andeq	r0, r1, ip, lsr r1
   4be98:	ldrdeq	r0, [r1], -r4
   4be9c:	andeq	pc, r0, r4, lsr pc	; <UNPREDICTABLE>
   4bea0:	cmp	r0, #16
   4bea4:	beq	4c0c0 <warn@@Base+0x24c8>
   4bea8:	bhi	4bedc <warn@@Base+0x22e4>
   4beac:	cmp	r0, #8
   4beb0:	beq	4c054 <warn@@Base+0x245c>
   4beb4:	bls	4bf18 <warn@@Base+0x2320>
   4beb8:	cmp	r0, #12
   4bebc:	beq	4c078 <warn@@Base+0x2480>
   4bec0:	bhi	4bf8c <warn@@Base+0x2394>
   4bec4:	cmp	r0, #10
   4bec8:	beq	4c0a8 <warn@@Base+0x24b0>
   4becc:	bhi	4c030 <warn@@Base+0x2438>
   4bed0:	ldr	r0, [pc, #524]	; 4c0e4 <warn@@Base+0x24ec>
   4bed4:	add	r0, pc, r0
   4bed8:	bx	lr
   4bedc:	cmp	r0, #23
   4bee0:	beq	4c060 <warn@@Base+0x2468>
   4bee4:	bls	4bf3c <warn@@Base+0x2344>
   4bee8:	movw	r3, #7937	; 0x1f01
   4beec:	cmp	r0, r3
   4bef0:	beq	4c06c <warn@@Base+0x2474>
   4bef4:	bhi	4bf60 <warn@@Base+0x2368>
   4bef8:	cmp	r0, #25
   4befc:	beq	4c0d8 <warn@@Base+0x24e0>
   4bf00:	bcc	4c00c <warn@@Base+0x2414>
   4bf04:	cmp	r0, #32
   4bf08:	bne	4bf84 <warn@@Base+0x238c>
   4bf0c:	ldr	r0, [pc, #468]	; 4c0e8 <warn@@Base+0x24f0>
   4bf10:	add	r0, pc, r0
   4bf14:	bx	lr
   4bf18:	cmp	r0, #4
   4bf1c:	beq	4c000 <warn@@Base+0x2408>
   4bf20:	bls	4bfa4 <warn@@Base+0x23ac>
   4bf24:	cmp	r0, #6
   4bf28:	beq	4c084 <warn@@Base+0x248c>
   4bf2c:	bhi	4c03c <warn@@Base+0x2444>
   4bf30:	ldr	r0, [pc, #436]	; 4c0ec <warn@@Base+0x24f4>
   4bf34:	add	r0, pc, r0
   4bf38:	bx	lr
   4bf3c:	cmp	r0, #19
   4bf40:	beq	4c018 <warn@@Base+0x2420>
   4bf44:	bls	4bfc0 <warn@@Base+0x23c8>
   4bf48:	cmp	r0, #21
   4bf4c:	beq	4c0b4 <warn@@Base+0x24bc>
   4bf50:	bhi	4bff4 <warn@@Base+0x23fc>
   4bf54:	ldr	r0, [pc, #404]	; 4c0f0 <warn@@Base+0x24f8>
   4bf58:	add	r0, pc, r0
   4bf5c:	bx	lr
   4bf60:	movw	r3, #7968	; 0x1f20
   4bf64:	cmp	r0, r3
   4bf68:	beq	4c090 <warn@@Base+0x2498>
   4bf6c:	add	r3, r3, #1
   4bf70:	cmp	r0, r3
   4bf74:	beq	4c048 <warn@@Base+0x2450>
   4bf78:	movw	r3, #7938	; 0x1f02
   4bf7c:	cmp	r0, r3
   4bf80:	beq	4c09c <warn@@Base+0x24a4>
   4bf84:	mov	r0, #0
   4bf88:	bx	lr
   4bf8c:	cmp	r0, #14
   4bf90:	beq	4c0cc <warn@@Base+0x24d4>
   4bf94:	bhi	4c024 <warn@@Base+0x242c>
   4bf98:	ldr	r0, [pc, #340]	; 4c0f4 <warn@@Base+0x24fc>
   4bf9c:	add	r0, pc, r0
   4bfa0:	bx	lr
   4bfa4:	cmp	r0, #1
   4bfa8:	beq	4bfdc <warn@@Base+0x23e4>
   4bfac:	cmp	r0, #3
   4bfb0:	bne	4bf84 <warn@@Base+0x238c>
   4bfb4:	ldr	r0, [pc, #316]	; 4c0f8 <warn@@Base+0x2500>
   4bfb8:	add	r0, pc, r0
   4bfbc:	bx	lr
   4bfc0:	cmp	r0, #17
   4bfc4:	beq	4bfe8 <warn@@Base+0x23f0>
   4bfc8:	cmp	r0, #18
   4bfcc:	bne	4bf84 <warn@@Base+0x238c>
   4bfd0:	ldr	r0, [pc, #292]	; 4c0fc <warn@@Base+0x2504>
   4bfd4:	add	r0, pc, r0
   4bfd8:	bx	lr
   4bfdc:	ldr	r0, [pc, #284]	; 4c100 <warn@@Base+0x2508>
   4bfe0:	add	r0, pc, r0
   4bfe4:	bx	lr
   4bfe8:	ldr	r0, [pc, #276]	; 4c104 <warn@@Base+0x250c>
   4bfec:	add	r0, pc, r0
   4bff0:	bx	lr
   4bff4:	ldr	r0, [pc, #268]	; 4c108 <warn@@Base+0x2510>
   4bff8:	add	r0, pc, r0
   4bffc:	bx	lr
   4c000:	ldr	r0, [pc, #260]	; 4c10c <warn@@Base+0x2514>
   4c004:	add	r0, pc, r0
   4c008:	bx	lr
   4c00c:	ldr	r0, [pc, #252]	; 4c110 <warn@@Base+0x2518>
   4c010:	add	r0, pc, r0
   4c014:	bx	lr
   4c018:	ldr	r0, [pc, #244]	; 4c114 <warn@@Base+0x251c>
   4c01c:	add	r0, pc, r0
   4c020:	bx	lr
   4c024:	ldr	r0, [pc, #236]	; 4c118 <warn@@Base+0x2520>
   4c028:	add	r0, pc, r0
   4c02c:	bx	lr
   4c030:	ldr	r0, [pc, #228]	; 4c11c <warn@@Base+0x2524>
   4c034:	add	r0, pc, r0
   4c038:	bx	lr
   4c03c:	ldr	r0, [pc, #220]	; 4c120 <warn@@Base+0x2528>
   4c040:	add	r0, pc, r0
   4c044:	bx	lr
   4c048:	ldr	r0, [pc, #212]	; 4c124 <warn@@Base+0x252c>
   4c04c:	add	r0, pc, r0
   4c050:	bx	lr
   4c054:	ldr	r0, [pc, #204]	; 4c128 <warn@@Base+0x2530>
   4c058:	add	r0, pc, r0
   4c05c:	bx	lr
   4c060:	ldr	r0, [pc, #196]	; 4c12c <warn@@Base+0x2534>
   4c064:	add	r0, pc, r0
   4c068:	bx	lr
   4c06c:	ldr	r0, [pc, #188]	; 4c130 <warn@@Base+0x2538>
   4c070:	add	r0, pc, r0
   4c074:	bx	lr
   4c078:	ldr	r0, [pc, #180]	; 4c134 <warn@@Base+0x253c>
   4c07c:	add	r0, pc, r0
   4c080:	bx	lr
   4c084:	ldr	r0, [pc, #172]	; 4c138 <warn@@Base+0x2540>
   4c088:	add	r0, pc, r0
   4c08c:	bx	lr
   4c090:	ldr	r0, [pc, #164]	; 4c13c <warn@@Base+0x2544>
   4c094:	add	r0, pc, r0
   4c098:	bx	lr
   4c09c:	ldr	r0, [pc, #156]	; 4c140 <warn@@Base+0x2548>
   4c0a0:	add	r0, pc, r0
   4c0a4:	bx	lr
   4c0a8:	ldr	r0, [pc, #148]	; 4c144 <warn@@Base+0x254c>
   4c0ac:	add	r0, pc, r0
   4c0b0:	bx	lr
   4c0b4:	ldr	r0, [pc, #140]	; 4c148 <warn@@Base+0x2550>
   4c0b8:	add	r0, pc, r0
   4c0bc:	bx	lr
   4c0c0:	ldr	r0, [pc, #132]	; 4c14c <warn@@Base+0x2554>
   4c0c4:	add	r0, pc, r0
   4c0c8:	bx	lr
   4c0cc:	ldr	r0, [pc, #124]	; 4c150 <warn@@Base+0x2558>
   4c0d0:	add	r0, pc, r0
   4c0d4:	bx	lr
   4c0d8:	ldr	r0, [pc, #116]	; 4c154 <warn@@Base+0x255c>
   4c0dc:	add	r0, pc, r0
   4c0e0:	bx	lr
   4c0e4:	andeq	r0, r1, r4, lsr r2
   4c0e8:	andeq	r0, r1, r0, lsr #6
   4c0ec:	muleq	r1, r4, r1
   4c0f0:	andeq	r0, r1, r4, ror #4
   4c0f4:	andeq	r0, r1, ip, lsr #3
   4c0f8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   4c0fc:	andeq	r0, r1, r8, asr #3
   4c100:	strheq	r0, [r1], -r8
   4c104:	andeq	r0, r1, r0, lsr #3
   4c108:	andeq	r0, r1, r8, ror #3
   4c10c:	strheq	r0, [r1], -r4
   4c110:	strdeq	r0, [r1], -r8
   4c114:	muleq	r1, r0, r1
   4c118:	andeq	r0, r1, r0, asr #2
   4c11c:	strdeq	r0, [r1], -r4
   4c120:	andeq	r0, r1, r8, lsr #1
   4c124:	andeq	r0, r1, ip, lsr r2
   4c128:	andeq	r0, r1, r0, lsr #1
   4c12c:	muleq	r1, r0, r1
   4c130:	ldrdeq	r0, [r1], -r4
   4c134:	strheq	r0, [r1], -ip
   4c138:	andeq	r0, r1, r0, asr r0
   4c13c:	andeq	r0, r1, r0, ror #3
   4c140:			; <UNDEFINED> instruction: 0x000101bc
   4c144:	andeq	r0, r1, ip, rrx
   4c148:	andeq	r0, r1, r4, lsl r1
   4c14c:	strheq	r0, [r1], -r4
   4c150:	andeq	r0, r1, r8, lsl #1
   4c154:	andeq	r0, r1, ip, lsr r1
   4c158:	cmp	r0, #107	; 0x6b
   4c15c:	beq	4d348 <warn@@Base+0x3750>
   4c160:	bls	4c1d0 <warn@@Base+0x25d8>
   4c164:	movw	r3, #8459	; 0x210b
   4c168:	cmp	r0, r3
   4c16c:	beq	4d36c <warn@@Base+0x3774>
   4c170:	bhi	4c274 <warn@@Base+0x267c>
   4c174:	movw	r3, #8213	; 0x2015
   4c178:	cmp	r0, r3
   4c17c:	beq	4d330 <warn@@Base+0x3738>
   4c180:	bhi	4c2d8 <warn@@Base+0x26e0>
   4c184:	movw	r3, #8197	; 0x2005
   4c188:	cmp	r0, r3
   4c18c:	beq	4cc8c <warn@@Base+0x3094>
   4c190:	bhi	4c4ec <warn@@Base+0x28f4>
   4c194:	cmp	r0, #137	; 0x89
   4c198:	beq	4c764 <warn@@Base+0x2b6c>
   4c19c:	bls	4c7ac <warn@@Base+0x2bb4>
   4c1a0:	movw	r3, #8194	; 0x2002
   4c1a4:	cmp	r0, r3
   4c1a8:	beq	4d268 <warn@@Base+0x3670>
   4c1ac:	bhi	4c950 <warn@@Base+0x2d58>
   4c1b0:	cmp	r0, #8192	; 0x2000
   4c1b4:	beq	4ccbc <warn@@Base+0x30c4>
   4c1b8:	movw	r3, #8193	; 0x2001
   4c1bc:	cmp	r0, r3
   4c1c0:	bne	4d2ec <warn@@Base+0x36f4>
   4c1c4:	ldr	r0, [pc, #3196]	; 4ce48 <warn@@Base+0x3250>
   4c1c8:	add	r0, pc, r0
   4c1cc:	bx	lr
   4c1d0:	cmp	r0, #61	; 0x3d
   4c1d4:	beq	4d354 <warn@@Base+0x375c>
   4c1d8:	bhi	4c228 <warn@@Base+0x2630>
   4c1dc:	cmp	r0, #29
   4c1e0:	beq	4d33c <warn@@Base+0x3744>
   4c1e4:	bhi	4c32c <warn@@Base+0x2734>
   4c1e8:	cmp	r0, #17
   4c1ec:	beq	4d2d4 <warn@@Base+0x36dc>
   4c1f0:	bhi	4c3fc <warn@@Base+0x2804>
   4c1f4:	cmp	r0, #10
   4c1f8:	beq	4c7a0 <warn@@Base+0x2ba8>
   4c1fc:	bls	4c830 <warn@@Base+0x2c38>
   4c200:	cmp	r0, #13
   4c204:	beq	4d208 <warn@@Base+0x3610>
   4c208:	bhi	4c9d8 <warn@@Base+0x2de0>
   4c20c:	cmp	r0, #11
   4c210:	beq	4cd04 <warn@@Base+0x310c>
   4c214:	cmp	r0, #12
   4c218:	bne	4d2ec <warn@@Base+0x36f4>
   4c21c:	ldr	r0, [pc, #3112]	; 4ce4c <warn@@Base+0x3254>
   4c220:	add	r0, pc, r0
   4c224:	bx	lr
   4c228:	cmp	r0, #84	; 0x54
   4c22c:	beq	4d360 <warn@@Base+0x3768>
   4c230:	bhi	4c3bc <warn@@Base+0x27c4>
   4c234:	cmp	r0, #72	; 0x48
   4c238:	beq	4ccb0 <warn@@Base+0x30b8>
   4c23c:	bhi	4c430 <warn@@Base+0x2838>
   4c240:	cmp	r0, #66	; 0x42
   4c244:	beq	4c758 <warn@@Base+0x2b60>
   4c248:	bls	4c8b4 <warn@@Base+0x2cbc>
   4c24c:	cmp	r0, #69	; 0x45
   4c250:	beq	4d238 <warn@@Base+0x3640>
   4c254:	bhi	4c910 <warn@@Base+0x2d18>
   4c258:	cmp	r0, #67	; 0x43
   4c25c:	beq	4cc5c <warn@@Base+0x3064>
   4c260:	cmp	r0, #68	; 0x44
   4c264:	bne	4d2ec <warn@@Base+0x36f4>
   4c268:	ldr	r0, [pc, #3040]	; 4ce50 <warn@@Base+0x3258>
   4c26c:	add	r0, pc, r0
   4c270:	bx	lr
   4c274:	movw	r3, #8705	; 0x2201
   4c278:	cmp	r0, r3
   4c27c:	beq	4d378 <warn@@Base+0x3780>
   4c280:	bhi	4c36c <warn@@Base+0x2774>
   4c284:	movw	r3, #8470	; 0x2116
   4c288:	cmp	r0, r3
   4c28c:	beq	4d324 <warn@@Base+0x372c>
   4c290:	bhi	4c464 <warn@@Base+0x286c>
   4c294:	movw	r3, #8464	; 0x2110
   4c298:	cmp	r0, r3
   4c29c:	beq	4c74c <warn@@Base+0x2b54>
   4c2a0:	bls	4c7fc <warn@@Base+0x2c04>
   4c2a4:	movw	r3, #8467	; 0x2113
   4c2a8:	cmp	r0, r3
   4c2ac:	beq	4d384 <warn@@Base+0x378c>
   4c2b0:	bhi	4c974 <warn@@Base+0x2d7c>
   4c2b4:	movw	r3, #8465	; 0x2111
   4c2b8:	cmp	r0, r3
   4c2bc:	beq	4ccec <warn@@Base+0x30f4>
   4c2c0:	add	r3, r3, #1
   4c2c4:	cmp	r0, r3
   4c2c8:	bne	4d2ec <warn@@Base+0x36f4>
   4c2cc:	ldr	r0, [pc, #2944]	; 4ce54 <warn@@Base+0x325c>
   4c2d0:	add	r0, pc, r0
   4c2d4:	bx	lr
   4c2d8:	movw	r3, #8227	; 0x2023
   4c2dc:	cmp	r0, r3
   4c2e0:	beq	4cc98 <warn@@Base+0x30a0>
   4c2e4:	bhi	4c4a8 <warn@@Base+0x28b0>
   4c2e8:	movw	r3, #8218	; 0x201a
   4c2ec:	cmp	r0, r3
   4c2f0:	beq	4c770 <warn@@Base+0x2b78>
   4c2f4:	bls	4c8dc <warn@@Base+0x2ce4>
   4c2f8:	movw	r3, #8224	; 0x2020
   4c2fc:	cmp	r0, r3
   4c300:	beq	4d1d8 <warn@@Base+0x35e0>
   4c304:	bhi	4c92c <warn@@Base+0x2d34>
   4c308:	movw	r3, #8219	; 0x201b
   4c30c:	cmp	r0, r3
   4c310:	beq	4d1a8 <warn@@Base+0x35b0>
   4c314:	add	r3, r3, #4
   4c318:	cmp	r0, r3
   4c31c:	bne	4d2ec <warn@@Base+0x36f4>
   4c320:	ldr	r0, [pc, #2864]	; 4ce58 <warn@@Base+0x3260>
   4c324:	add	r0, pc, r0
   4c328:	bx	lr
   4c32c:	cmp	r0, #49	; 0x31
   4c330:	beq	4ce3c <warn@@Base+0x3244>
   4c334:	bhi	4c530 <warn@@Base+0x2938>
   4c338:	cmp	r0, #37	; 0x25
   4c33c:	beq	4c794 <warn@@Base+0x2b9c>
   4c340:	bls	4c88c <warn@@Base+0x2c94>
   4c344:	cmp	r0, #44	; 0x2c
   4c348:	beq	4d1c0 <warn@@Base+0x35c8>
   4c34c:	bhi	4c9f4 <warn@@Base+0x2dfc>
   4c350:	cmp	r0, #39	; 0x27
   4c354:	beq	4cd34 <warn@@Base+0x313c>
   4c358:	cmp	r0, #42	; 0x2a
   4c35c:	bne	4d2ec <warn@@Base+0x36f4>
   4c360:	ldr	r0, [pc, #2804]	; 4ce5c <warn@@Base+0x3264>
   4c364:	add	r0, pc, r0
   4c368:	bx	lr
   4c36c:	movw	r3, #16354	; 0x3fe2
   4c370:	cmp	r0, r3
   4c374:	beq	4d2c8 <warn@@Base+0x36d0>
   4c378:	bhi	4c564 <warn@@Base+0x296c>
   4c37c:	movw	r3, #8965	; 0x2305
   4c380:	cmp	r0, r3
   4c384:	beq	4c788 <warn@@Base+0x2b90>
   4c388:	bls	4c858 <warn@@Base+0x2c60>
   4c38c:	movw	r3, #14849	; 0x3a01
   4c390:	cmp	r0, r3
   4c394:	beq	4d280 <warn@@Base+0x3688>
   4c398:	bhi	4c9b4 <warn@@Base+0x2dbc>
   4c39c:	movw	r3, #12816	; 0x3210
   4c3a0:	cmp	r0, r3
   4c3a4:	beq	4cd1c <warn@@Base+0x3124>
   4c3a8:	cmp	r0, #14848	; 0x3a00
   4c3ac:	bne	4d2ec <warn@@Base+0x36f4>
   4c3b0:	ldr	r0, [pc, #2728]	; 4ce60 <warn@@Base+0x3268>
   4c3b4:	add	r0, pc, r0
   4c3b8:	bx	lr
   4c3bc:	cmp	r0, #95	; 0x5f
   4c3c0:	beq	4d2e0 <warn@@Base+0x36e8>
   4c3c4:	bhi	4c5a8 <warn@@Base+0x29b0>
   4c3c8:	cmp	r0, #89	; 0x59
   4c3cc:	beq	4c77c <warn@@Base+0x2b84>
   4c3d0:	bls	4c7d4 <warn@@Base+0x2bdc>
   4c3d4:	cmp	r0, #92	; 0x5c
   4c3d8:	beq	4d298 <warn@@Base+0x36a0>
   4c3dc:	bhi	4c998 <warn@@Base+0x2da0>
   4c3e0:	cmp	r0, #90	; 0x5a
   4c3e4:	beq	4ccd4 <warn@@Base+0x30dc>
   4c3e8:	cmp	r0, #91	; 0x5b
   4c3ec:	bne	4d2ec <warn@@Base+0x36f4>
   4c3f0:	ldr	r0, [pc, #2668]	; 4ce64 <warn@@Base+0x326c>
   4c3f4:	add	r0, pc, r0
   4c3f8:	bx	lr
   4c3fc:	cmp	r0, #23
   4c400:	beq	4d148 <warn@@Base+0x3550>
   4c404:	bhi	4c694 <warn@@Base+0x2a9c>
   4c408:	cmp	r0, #20
   4c40c:	beq	4d160 <warn@@Base+0x3568>
   4c410:	bhi	4ca10 <warn@@Base+0x2e18>
   4c414:	cmp	r0, #18
   4c418:	beq	4d154 <warn@@Base+0x355c>
   4c41c:	cmp	r0, #19
   4c420:	bne	4d2ec <warn@@Base+0x36f4>
   4c424:	ldr	r0, [pc, #2620]	; 4ce68 <warn@@Base+0x3270>
   4c428:	add	r0, pc, r0
   4c42c:	bx	lr
   4c430:	cmp	r0, #78	; 0x4e
   4c434:	beq	4d414 <warn@@Base+0x381c>
   4c438:	bhi	4c644 <warn@@Base+0x2a4c>
   4c43c:	cmp	r0, #75	; 0x4b
   4c440:	beq	4cd94 <warn@@Base+0x319c>
   4c444:	bhi	4cab4 <warn@@Base+0x2ebc>
   4c448:	cmp	r0, #73	; 0x49
   4c44c:	beq	4cd88 <warn@@Base+0x3190>
   4c450:	cmp	r0, #74	; 0x4a
   4c454:	bne	4d2ec <warn@@Base+0x36f4>
   4c458:	ldr	r0, [pc, #2572]	; 4ce6c <warn@@Base+0x3274>
   4c45c:	add	r0, pc, r0
   4c460:	bx	lr
   4c464:	movw	r3, #8497	; 0x2131
   4c468:	cmp	r0, r3
   4c46c:	beq	4d3e4 <warn@@Base+0x37ec>
   4c470:	bhi	4c610 <warn@@Base+0x2a18>
   4c474:	movw	r3, #8473	; 0x2119
   4c478:	cmp	r0, r3
   4c47c:	beq	4d42c <warn@@Base+0x3834>
   4c480:	bhi	4cbd0 <warn@@Base+0x2fd8>
   4c484:	movw	r3, #8471	; 0x2117
   4c488:	cmp	r0, r3
   4c48c:	beq	4d420 <warn@@Base+0x3828>
   4c490:	add	r3, r3, #1
   4c494:	cmp	r0, r3
   4c498:	bne	4d2ec <warn@@Base+0x36f4>
   4c49c:	ldr	r0, [pc, #2508]	; 4ce70 <warn@@Base+0x3278>
   4c4a0:	add	r0, pc, r0
   4c4a4:	bx	lr
   4c4a8:	movw	r3, #8453	; 0x2105
   4c4ac:	cmp	r0, r3
   4c4b0:	beq	4cdac <warn@@Base+0x31b4>
   4c4b4:	bhi	4c6bc <warn@@Base+0x2ac4>
   4c4b8:	movw	r3, #8450	; 0x2102
   4c4bc:	cmp	r0, r3
   4c4c0:	beq	4cdc4 <warn@@Base+0x31cc>
   4c4c4:	bhi	4ca6c <warn@@Base+0x2e74>
   4c4c8:	movw	r3, #8233	; 0x2029
   4c4cc:	cmp	r0, r3
   4c4d0:	beq	4cdb8 <warn@@Base+0x31c0>
   4c4d4:	add	r3, r3, #216	; 0xd8
   4c4d8:	cmp	r0, r3
   4c4dc:	bne	4d2ec <warn@@Base+0x36f4>
   4c4e0:	ldr	r0, [pc, #2444]	; 4ce74 <warn@@Base+0x327c>
   4c4e4:	add	r0, pc, r0
   4c4e8:	bx	lr
   4c4ec:	movw	r3, #8203	; 0x200b
   4c4f0:	cmp	r0, r3
   4c4f4:	beq	4cd4c <warn@@Base+0x3154>
   4c4f8:	bhi	4c5dc <warn@@Base+0x29e4>
   4c4fc:	movw	r3, #8200	; 0x2008
   4c500:	cmp	r0, r3
   4c504:	beq	4cd64 <warn@@Base+0x316c>
   4c508:	bhi	4ca2c <warn@@Base+0x2e34>
   4c50c:	movw	r3, #8198	; 0x2006
   4c510:	cmp	r0, r3
   4c514:	beq	4cd58 <warn@@Base+0x3160>
   4c518:	add	r3, r3, #1
   4c51c:	cmp	r0, r3
   4c520:	bne	4d2ec <warn@@Base+0x36f4>
   4c524:	ldr	r0, [pc, #2380]	; 4ce78 <warn@@Base+0x3280>
   4c528:	add	r0, pc, r0
   4c52c:	bx	lr
   4c530:	cmp	r0, #55	; 0x37
   4c534:	beq	4d444 <warn@@Base+0x384c>
   4c538:	bhi	4c66c <warn@@Base+0x2a74>
   4c53c:	cmp	r0, #52	; 0x34
   4c540:	beq	4d3fc <warn@@Base+0x3804>
   4c544:	bhi	4cb2c <warn@@Base+0x2f34>
   4c548:	cmp	r0, #50	; 0x32
   4c54c:	beq	4d3f0 <warn@@Base+0x37f8>
   4c550:	cmp	r0, #51	; 0x33
   4c554:	bne	4d2ec <warn@@Base+0x36f4>
   4c558:	ldr	r0, [pc, #2332]	; 4ce7c <warn@@Base+0x3284>
   4c55c:	add	r0, pc, r0
   4c560:	bx	lr
   4c564:	movw	r3, #16360	; 0x3fe8
   4c568:	cmp	r0, r3
   4c56c:	beq	4cddc <warn@@Base+0x31e4>
   4c570:	bhi	4c718 <warn@@Base+0x2b20>
   4c574:	movw	r3, #16357	; 0x3fe5
   4c578:	cmp	r0, r3
   4c57c:	beq	4d45c <warn@@Base+0x3864>
   4c580:	bhi	4cbac <warn@@Base+0x2fb4>
   4c584:	movw	r3, #16355	; 0x3fe3
   4c588:	cmp	r0, r3
   4c58c:	beq	4d450 <warn@@Base+0x3858>
   4c590:	add	r3, r3, #1
   4c594:	cmp	r0, r3
   4c598:	bne	4d2ec <warn@@Base+0x36f4>
   4c59c:	ldr	r0, [pc, #2268]	; 4ce80 <warn@@Base+0x3288>
   4c5a0:	add	r0, pc, r0
   4c5a4:	bx	lr
   4c5a8:	cmp	r0, #101	; 0x65
   4c5ac:	beq	4ce0c <warn@@Base+0x3214>
   4c5b0:	bhi	4c6f0 <warn@@Base+0x2af8>
   4c5b4:	cmp	r0, #98	; 0x62
   4c5b8:	beq	4ce24 <warn@@Base+0x322c>
   4c5bc:	bhi	4ca50 <warn@@Base+0x2e58>
   4c5c0:	cmp	r0, #96	; 0x60
   4c5c4:	beq	4ce18 <warn@@Base+0x3220>
   4c5c8:	cmp	r0, #97	; 0x61
   4c5cc:	bne	4d2ec <warn@@Base+0x36f4>
   4c5d0:	ldr	r0, [pc, #2220]	; 4ce84 <warn@@Base+0x328c>
   4c5d4:	add	r0, pc, r0
   4c5d8:	bx	lr
   4c5dc:	movw	r3, #8210	; 0x2012
   4c5e0:	cmp	r0, r3
   4c5e4:	beq	4d178 <warn@@Base+0x3580>
   4c5e8:	bhi	4ca90 <warn@@Base+0x2e98>
   4c5ec:	movw	r3, #8208	; 0x2010
   4c5f0:	cmp	r0, r3
   4c5f4:	beq	4d3b4 <warn@@Base+0x37bc>
   4c5f8:	add	r3, r3, #1
   4c5fc:	cmp	r0, r3
   4c600:	bne	4d2ec <warn@@Base+0x36f4>
   4c604:	ldr	r0, [pc, #2172]	; 4ce88 <warn@@Base+0x3290>
   4c608:	add	r0, pc, r0
   4c60c:	bx	lr
   4c610:	movw	r3, #8500	; 0x2134
   4c614:	cmp	r0, r3
   4c618:	beq	4d30c <warn@@Base+0x3714>
   4c61c:	bhi	4cb88 <warn@@Base+0x2f90>
   4c620:	movw	r3, #8498	; 0x2132
   4c624:	cmp	r0, r3
   4c628:	beq	4cd7c <warn@@Base+0x3184>
   4c62c:	add	r3, r3, #1
   4c630:	cmp	r0, r3
   4c634:	bne	4d2ec <warn@@Base+0x36f4>
   4c638:	ldr	r0, [pc, #2124]	; 4ce8c <warn@@Base+0x3294>
   4c63c:	add	r0, pc, r0
   4c640:	bx	lr
   4c644:	cmp	r0, #81	; 0x51
   4c648:	beq	4d3cc <warn@@Base+0x37d4>
   4c64c:	bhi	4cb6c <warn@@Base+0x2f74>
   4c650:	cmp	r0, #79	; 0x4f
   4c654:	beq	4d3c0 <warn@@Base+0x37c8>
   4c658:	cmp	r0, #80	; 0x50
   4c65c:	bne	4d2ec <warn@@Base+0x36f4>
   4c660:	ldr	r0, [pc, #2088]	; 4ce90 <warn@@Base+0x3298>
   4c664:	add	r0, pc, r0
   4c668:	bx	lr
   4c66c:	cmp	r0, #58	; 0x3a
   4c670:	beq	4d190 <warn@@Base+0x3598>
   4c674:	bhi	4cb10 <warn@@Base+0x2f18>
   4c678:	cmp	r0, #56	; 0x38
   4c67c:	beq	4d474 <warn@@Base+0x387c>
   4c680:	cmp	r0, #57	; 0x39
   4c684:	bne	4d2ec <warn@@Base+0x36f4>
   4c688:	ldr	r0, [pc, #2052]	; 4ce94 <warn@@Base+0x329c>
   4c68c:	add	r0, pc, r0
   4c690:	bx	lr
   4c694:	cmp	r0, #26
   4c698:	beq	4d48c <warn@@Base+0x3894>
   4c69c:	bhi	4cbf4 <warn@@Base+0x2ffc>
   4c6a0:	cmp	r0, #24
   4c6a4:	beq	4d480 <warn@@Base+0x3888>
   4c6a8:	cmp	r0, #25
   4c6ac:	bne	4d2ec <warn@@Base+0x36f4>
   4c6b0:	ldr	r0, [pc, #2016]	; 4ce98 <warn@@Base+0x32a0>
   4c6b4:	add	r0, pc, r0
   4c6b8:	bx	lr
   4c6bc:	movw	r3, #8456	; 0x2108
   4c6c0:	cmp	r0, r3
   4c6c4:	beq	4d2f4 <warn@@Base+0x36fc>
   4c6c8:	bhi	4cb48 <warn@@Base+0x2f50>
   4c6cc:	movw	r3, #8454	; 0x2106
   4c6d0:	cmp	r0, r3
   4c6d4:	beq	4cca4 <warn@@Base+0x30ac>
   4c6d8:	add	r3, r3, #1
   4c6dc:	cmp	r0, r3
   4c6e0:	bne	4d2ec <warn@@Base+0x36f4>
   4c6e4:	ldr	r0, [pc, #1968]	; 4ce9c <warn@@Base+0x32a4>
   4c6e8:	add	r0, pc, r0
   4c6ec:	bx	lr
   4c6f0:	cmp	r0, #104	; 0x68
   4c6f4:	beq	4cdf4 <warn@@Base+0x31fc>
   4c6f8:	bhi	4caf4 <warn@@Base+0x2efc>
   4c6fc:	cmp	r0, #102	; 0x66
   4c700:	beq	4cde8 <warn@@Base+0x31f0>
   4c704:	cmp	r0, #103	; 0x67
   4c708:	bne	4d2ec <warn@@Base+0x36f4>
   4c70c:	ldr	r0, [pc, #1932]	; 4cea0 <warn@@Base+0x32a8>
   4c710:	add	r0, pc, r0
   4c714:	bx	lr
   4c718:	movw	r3, #16363	; 0x3feb
   4c71c:	cmp	r0, r3
   4c720:	beq	4d130 <warn@@Base+0x3538>
   4c724:	bhi	4cad0 <warn@@Base+0x2ed8>
   4c728:	movw	r3, #16361	; 0x3fe9
   4c72c:	cmp	r0, r3
   4c730:	beq	4d124 <warn@@Base+0x352c>
   4c734:	add	r3, r3, #1
   4c738:	cmp	r0, r3
   4c73c:	bne	4d2ec <warn@@Base+0x36f4>
   4c740:	ldr	r0, [pc, #1884]	; 4cea4 <warn@@Base+0x32ac>
   4c744:	add	r0, pc, r0
   4c748:	bx	lr
   4c74c:	ldr	r0, [pc, #1876]	; 4cea8 <warn@@Base+0x32b0>
   4c750:	add	r0, pc, r0
   4c754:	bx	lr
   4c758:	ldr	r0, [pc, #1868]	; 4ceac <warn@@Base+0x32b4>
   4c75c:	add	r0, pc, r0
   4c760:	bx	lr
   4c764:	ldr	r0, [pc, #1860]	; 4ceb0 <warn@@Base+0x32b8>
   4c768:	add	r0, pc, r0
   4c76c:	bx	lr
   4c770:	ldr	r0, [pc, #1852]	; 4ceb4 <warn@@Base+0x32bc>
   4c774:	add	r0, pc, r0
   4c778:	bx	lr
   4c77c:	ldr	r0, [pc, #1844]	; 4ceb8 <warn@@Base+0x32c0>
   4c780:	add	r0, pc, r0
   4c784:	bx	lr
   4c788:	ldr	r0, [pc, #1836]	; 4cebc <warn@@Base+0x32c4>
   4c78c:	add	r0, pc, r0
   4c790:	bx	lr
   4c794:	ldr	r0, [pc, #1828]	; 4cec0 <warn@@Base+0x32c8>
   4c798:	add	r0, pc, r0
   4c79c:	bx	lr
   4c7a0:	ldr	r0, [pc, #1820]	; 4cec4 <warn@@Base+0x32cc>
   4c7a4:	add	r0, pc, r0
   4c7a8:	bx	lr
   4c7ac:	cmp	r0, #109	; 0x6d
   4c7b0:	beq	4d2bc <warn@@Base+0x36c4>
   4c7b4:	bcc	4d2b0 <warn@@Base+0x36b8>
   4c7b8:	cmp	r0, #110	; 0x6e
   4c7bc:	beq	4d2a4 <warn@@Base+0x36ac>
   4c7c0:	cmp	r0, #135	; 0x87
   4c7c4:	bne	4d2ec <warn@@Base+0x36f4>
   4c7c8:	ldr	r0, [pc, #1784]	; 4cec8 <warn@@Base+0x32d0>
   4c7cc:	add	r0, pc, r0
   4c7d0:	bx	lr
   4c7d4:	cmp	r0, #86	; 0x56
   4c7d8:	beq	4d3a8 <warn@@Base+0x37b0>
   4c7dc:	bcc	4d39c <warn@@Base+0x37a4>
   4c7e0:	cmp	r0, #87	; 0x57
   4c7e4:	beq	4d390 <warn@@Base+0x3798>
   4c7e8:	cmp	r0, #88	; 0x58
   4c7ec:	bne	4d2ec <warn@@Base+0x36f4>
   4c7f0:	ldr	r0, [pc, #1748]	; 4cecc <warn@@Base+0x32d4>
   4c7f4:	add	r0, pc, r0
   4c7f8:	bx	lr
   4c7fc:	movw	r3, #8461	; 0x210d
   4c800:	cmp	r0, r3
   4c804:	beq	4d22c <warn@@Base+0x3634>
   4c808:	bcc	4d220 <warn@@Base+0x3628>
   4c80c:	add	r3, r3, #1
   4c810:	cmp	r0, r3
   4c814:	beq	4d214 <warn@@Base+0x361c>
   4c818:	add	r3, r3, #1
   4c81c:	cmp	r0, r3
   4c820:	bne	4d2ec <warn@@Base+0x36f4>
   4c824:	ldr	r0, [pc, #1700]	; 4ced0 <warn@@Base+0x32d8>
   4c828:	add	r0, pc, r0
   4c82c:	bx	lr
   4c830:	cmp	r0, #2
   4c834:	beq	4d274 <warn@@Base+0x367c>
   4c838:	bls	4cc24 <warn@@Base+0x302c>
   4c83c:	cmp	r0, #3
   4c840:	beq	4d28c <warn@@Base+0x3694>
   4c844:	cmp	r0, #9
   4c848:	bne	4d2ec <warn@@Base+0x36f4>
   4c84c:	ldr	r0, [pc, #1664]	; 4ced4 <warn@@Base+0x32dc>
   4c850:	add	r0, pc, r0
   4c854:	bx	lr
   4c858:	movw	r3, #8962	; 0x2302
   4c85c:	cmp	r0, r3
   4c860:	beq	4cc50 <warn@@Base+0x3058>
   4c864:	bls	4cc38 <warn@@Base+0x3040>
   4c868:	movw	r3, #8963	; 0x2303
   4c86c:	cmp	r0, r3
   4c870:	beq	4d1cc <warn@@Base+0x35d4>
   4c874:	add	r3, r3, #1
   4c878:	cmp	r0, r3
   4c87c:	bne	4d2ec <warn@@Base+0x36f4>
   4c880:	ldr	r0, [pc, #1616]	; 4ced8 <warn@@Base+0x32e0>
   4c884:	add	r0, pc, r0
   4c888:	bx	lr
   4c88c:	cmp	r0, #32
   4c890:	beq	4d250 <warn@@Base+0x3658>
   4c894:	bls	4cc10 <warn@@Base+0x3018>
   4c898:	cmp	r0, #33	; 0x21
   4c89c:	beq	4d244 <warn@@Base+0x364c>
   4c8a0:	cmp	r0, #34	; 0x22
   4c8a4:	bne	4d2ec <warn@@Base+0x36f4>
   4c8a8:	ldr	r0, [pc, #1580]	; 4cedc <warn@@Base+0x32e4>
   4c8ac:	add	r0, pc, r0
   4c8b0:	bx	lr
   4c8b4:	cmp	r0, #63	; 0x3f
   4c8b8:	beq	4d1fc <warn@@Base+0x3604>
   4c8bc:	bcc	4d1f0 <warn@@Base+0x35f8>
   4c8c0:	cmp	r0, #64	; 0x40
   4c8c4:	beq	4d1e4 <warn@@Base+0x35ec>
   4c8c8:	cmp	r0, #65	; 0x41
   4c8cc:	bne	4d2ec <warn@@Base+0x36f4>
   4c8d0:	ldr	r0, [pc, #1544]	; 4cee0 <warn@@Base+0x32e8>
   4c8d4:	add	r0, pc, r0
   4c8d8:	bx	lr
   4c8dc:	movw	r3, #8215	; 0x2017
   4c8e0:	cmp	r0, r3
   4c8e4:	beq	4cc80 <warn@@Base+0x3088>
   4c8e8:	bcc	4cc74 <warn@@Base+0x307c>
   4c8ec:	add	r3, r3, #1
   4c8f0:	cmp	r0, r3
   4c8f4:	beq	4cc68 <warn@@Base+0x3070>
   4c8f8:	add	r3, r3, #1
   4c8fc:	cmp	r0, r3
   4c900:	bne	4d2ec <warn@@Base+0x36f4>
   4c904:	ldr	r0, [pc, #1496]	; 4cee4 <warn@@Base+0x32ec>
   4c908:	add	r0, pc, r0
   4c90c:	bx	lr
   4c910:	cmp	r0, #70	; 0x46
   4c914:	beq	4d1b4 <warn@@Base+0x35bc>
   4c918:	cmp	r0, #71	; 0x47
   4c91c:	bne	4d2ec <warn@@Base+0x36f4>
   4c920:	ldr	r0, [pc, #1472]	; 4cee8 <warn@@Base+0x32f0>
   4c924:	add	r0, pc, r0
   4c928:	bx	lr
   4c92c:	movw	r3, #8225	; 0x2021
   4c930:	cmp	r0, r3
   4c934:	beq	4ccc8 <warn@@Base+0x30d0>
   4c938:	add	r3, r3, #1
   4c93c:	cmp	r0, r3
   4c940:	bne	4d2ec <warn@@Base+0x36f4>
   4c944:	ldr	r0, [pc, #1440]	; 4ceec <warn@@Base+0x32f4>
   4c948:	add	r0, pc, r0
   4c94c:	bx	lr
   4c950:	movw	r3, #8195	; 0x2003
   4c954:	cmp	r0, r3
   4c958:	beq	4ccf8 <warn@@Base+0x3100>
   4c95c:	add	r3, r3, #1
   4c960:	cmp	r0, r3
   4c964:	bne	4d2ec <warn@@Base+0x36f4>
   4c968:	ldr	r0, [pc, #1408]	; 4cef0 <warn@@Base+0x32f8>
   4c96c:	add	r0, pc, r0
   4c970:	bx	lr
   4c974:	movw	r3, #8468	; 0x2114
   4c978:	cmp	r0, r3
   4c97c:	beq	4cce0 <warn@@Base+0x30e8>
   4c980:	add	r3, r3, #1
   4c984:	cmp	r0, r3
   4c988:	bne	4d2ec <warn@@Base+0x36f4>
   4c98c:	ldr	r0, [pc, #1376]	; 4cef4 <warn@@Base+0x32fc>
   4c990:	add	r0, pc, r0
   4c994:	bx	lr
   4c998:	cmp	r0, #93	; 0x5d
   4c99c:	beq	4cd28 <warn@@Base+0x3130>
   4c9a0:	cmp	r0, #94	; 0x5e
   4c9a4:	bne	4d2ec <warn@@Base+0x36f4>
   4c9a8:	ldr	r0, [pc, #1352]	; 4cef8 <warn@@Base+0x3300>
   4c9ac:	add	r0, pc, r0
   4c9b0:	bx	lr
   4c9b4:	movw	r3, #14850	; 0x3a02
   4c9b8:	cmp	r0, r3
   4c9bc:	beq	4cd10 <warn@@Base+0x3118>
   4c9c0:	movw	r3, #16353	; 0x3fe1
   4c9c4:	cmp	r0, r3
   4c9c8:	bne	4d2ec <warn@@Base+0x36f4>
   4c9cc:	ldr	r0, [pc, #1320]	; 4cefc <warn@@Base+0x3304>
   4c9d0:	add	r0, pc, r0
   4c9d4:	bx	lr
   4c9d8:	cmp	r0, #15
   4c9dc:	beq	4cd40 <warn@@Base+0x3148>
   4c9e0:	cmp	r0, #16
   4c9e4:	bne	4d2ec <warn@@Base+0x36f4>
   4c9e8:	ldr	r0, [pc, #1296]	; 4cf00 <warn@@Base+0x3308>
   4c9ec:	add	r0, pc, r0
   4c9f0:	bx	lr
   4c9f4:	cmp	r0, #46	; 0x2e
   4c9f8:	beq	4d16c <warn@@Base+0x3574>
   4c9fc:	cmp	r0, #47	; 0x2f
   4ca00:	bne	4d2ec <warn@@Base+0x36f4>
   4ca04:	ldr	r0, [pc, #1272]	; 4cf04 <warn@@Base+0x330c>
   4ca08:	add	r0, pc, r0
   4ca0c:	bx	lr
   4ca10:	cmp	r0, #21
   4ca14:	beq	4cd70 <warn@@Base+0x3178>
   4ca18:	cmp	r0, #22
   4ca1c:	bne	4d2ec <warn@@Base+0x36f4>
   4ca20:	ldr	r0, [pc, #1248]	; 4cf08 <warn@@Base+0x3310>
   4ca24:	add	r0, pc, r0
   4ca28:	bx	lr
   4ca2c:	movw	r3, #8201	; 0x2009
   4ca30:	cmp	r0, r3
   4ca34:	beq	4ce30 <warn@@Base+0x3238>
   4ca38:	add	r3, r3, #1
   4ca3c:	cmp	r0, r3
   4ca40:	bne	4d2ec <warn@@Base+0x36f4>
   4ca44:	ldr	r0, [pc, #1216]	; 4cf0c <warn@@Base+0x3314>
   4ca48:	add	r0, pc, r0
   4ca4c:	bx	lr
   4ca50:	cmp	r0, #99	; 0x63
   4ca54:	beq	4cdd0 <warn@@Base+0x31d8>
   4ca58:	cmp	r0, #100	; 0x64
   4ca5c:	bne	4d2ec <warn@@Base+0x36f4>
   4ca60:	ldr	r0, [pc, #1192]	; 4cf10 <warn@@Base+0x3318>
   4ca64:	add	r0, pc, r0
   4ca68:	bx	lr
   4ca6c:	movw	r3, #8451	; 0x2103
   4ca70:	cmp	r0, r3
   4ca74:	beq	4d184 <warn@@Base+0x358c>
   4ca78:	add	r3, r3, #1
   4ca7c:	cmp	r0, r3
   4ca80:	bne	4d2ec <warn@@Base+0x36f4>
   4ca84:	ldr	r0, [pc, #1160]	; 4cf14 <warn@@Base+0x331c>
   4ca88:	add	r0, pc, r0
   4ca8c:	bx	lr
   4ca90:	movw	r3, #8211	; 0x2013
   4ca94:	cmp	r0, r3
   4ca98:	beq	4cda0 <warn@@Base+0x31a8>
   4ca9c:	add	r3, r3, #1
   4caa0:	cmp	r0, r3
   4caa4:	bne	4d2ec <warn@@Base+0x36f4>
   4caa8:	ldr	r0, [pc, #1128]	; 4cf18 <warn@@Base+0x3320>
   4caac:	add	r0, pc, r0
   4cab0:	bx	lr
   4cab4:	cmp	r0, #76	; 0x4c
   4cab8:	beq	4d13c <warn@@Base+0x3544>
   4cabc:	cmp	r0, #77	; 0x4d
   4cac0:	bne	4d2ec <warn@@Base+0x36f4>
   4cac4:	ldr	r0, [pc, #1104]	; 4cf1c <warn@@Base+0x3324>
   4cac8:	add	r0, pc, r0
   4cacc:	bx	lr
   4cad0:	movw	r3, #16364	; 0x3fec
   4cad4:	cmp	r0, r3
   4cad8:	beq	4ce00 <warn@@Base+0x3208>
   4cadc:	add	r3, r3, #1
   4cae0:	cmp	r0, r3
   4cae4:	bne	4d2ec <warn@@Base+0x36f4>
   4cae8:	ldr	r0, [pc, #1072]	; 4cf20 <warn@@Base+0x3328>
   4caec:	add	r0, pc, r0
   4caf0:	bx	lr
   4caf4:	cmp	r0, #105	; 0x69
   4caf8:	beq	4d19c <warn@@Base+0x35a4>
   4cafc:	cmp	r0, #106	; 0x6a
   4cb00:	bne	4d2ec <warn@@Base+0x36f4>
   4cb04:	ldr	r0, [pc, #1048]	; 4cf24 <warn@@Base+0x332c>
   4cb08:	add	r0, pc, r0
   4cb0c:	bx	lr
   4cb10:	cmp	r0, #59	; 0x3b
   4cb14:	beq	4d408 <warn@@Base+0x3810>
   4cb18:	cmp	r0, #60	; 0x3c
   4cb1c:	bne	4d2ec <warn@@Base+0x36f4>
   4cb20:	ldr	r0, [pc, #1024]	; 4cf28 <warn@@Base+0x3330>
   4cb24:	add	r0, pc, r0
   4cb28:	bx	lr
   4cb2c:	cmp	r0, #53	; 0x35
   4cb30:	beq	4d300 <warn@@Base+0x3708>
   4cb34:	cmp	r0, #54	; 0x36
   4cb38:	bne	4d2ec <warn@@Base+0x36f4>
   4cb3c:	ldr	r0, [pc, #1000]	; 4cf2c <warn@@Base+0x3334>
   4cb40:	add	r0, pc, r0
   4cb44:	bx	lr
   4cb48:	movw	r3, #8457	; 0x2109
   4cb4c:	cmp	r0, r3
   4cb50:	beq	4d3d8 <warn@@Base+0x37e0>
   4cb54:	add	r3, r3, #1
   4cb58:	cmp	r0, r3
   4cb5c:	bne	4d2ec <warn@@Base+0x36f4>
   4cb60:	ldr	r0, [pc, #968]	; 4cf30 <warn@@Base+0x3338>
   4cb64:	add	r0, pc, r0
   4cb68:	bx	lr
   4cb6c:	cmp	r0, #82	; 0x52
   4cb70:	beq	4d318 <warn@@Base+0x3720>
   4cb74:	cmp	r0, #83	; 0x53
   4cb78:	bne	4d2ec <warn@@Base+0x36f4>
   4cb7c:	ldr	r0, [pc, #944]	; 4cf34 <warn@@Base+0x333c>
   4cb80:	add	r0, pc, r0
   4cb84:	bx	lr
   4cb88:	movw	r3, #8501	; 0x2135
   4cb8c:	cmp	r0, r3
   4cb90:	beq	4d468 <warn@@Base+0x3870>
   4cb94:	add	r3, r3, #1
   4cb98:	cmp	r0, r3
   4cb9c:	bne	4d2ec <warn@@Base+0x36f4>
   4cba0:	ldr	r0, [pc, #912]	; 4cf38 <warn@@Base+0x3340>
   4cba4:	add	r0, pc, r0
   4cba8:	bx	lr
   4cbac:	movw	r3, #16358	; 0x3fe6
   4cbb0:	cmp	r0, r3
   4cbb4:	beq	4d438 <warn@@Base+0x3840>
   4cbb8:	add	r3, r3, #1
   4cbbc:	cmp	r0, r3
   4cbc0:	bne	4d2ec <warn@@Base+0x36f4>
   4cbc4:	ldr	r0, [pc, #880]	; 4cf3c <warn@@Base+0x3344>
   4cbc8:	add	r0, pc, r0
   4cbcc:	bx	lr
   4cbd0:	movw	r3, #8474	; 0x211a
   4cbd4:	cmp	r0, r3
   4cbd8:	beq	4d498 <warn@@Base+0x38a0>
   4cbdc:	add	r3, r3, #22
   4cbe0:	cmp	r0, r3
   4cbe4:	bne	4d2ec <warn@@Base+0x36f4>
   4cbe8:	ldr	r0, [pc, #848]	; 4cf40 <warn@@Base+0x3348>
   4cbec:	add	r0, pc, r0
   4cbf0:	bx	lr
   4cbf4:	cmp	r0, #27
   4cbf8:	beq	4d25c <warn@@Base+0x3664>
   4cbfc:	cmp	r0, #28
   4cc00:	bne	4d2ec <warn@@Base+0x36f4>
   4cc04:	ldr	r0, [pc, #824]	; 4cf44 <warn@@Base+0x334c>
   4cc08:	add	r0, pc, r0
   4cc0c:	bx	lr
   4cc10:	cmp	r0, #30
   4cc14:	bne	4d2ec <warn@@Base+0x36f4>
   4cc18:	ldr	r0, [pc, #808]	; 4cf48 <warn@@Base+0x3350>
   4cc1c:	add	r0, pc, r0
   4cc20:	bx	lr
   4cc24:	cmp	r0, #1
   4cc28:	bne	4d2ec <warn@@Base+0x36f4>
   4cc2c:	ldr	r0, [pc, #792]	; 4cf4c <warn@@Base+0x3354>
   4cc30:	add	r0, pc, r0
   4cc34:	bx	lr
   4cc38:	movw	r3, #8961	; 0x2301
   4cc3c:	cmp	r0, r3
   4cc40:	bne	4d2ec <warn@@Base+0x36f4>
   4cc44:	ldr	r0, [pc, #772]	; 4cf50 <warn@@Base+0x3358>
   4cc48:	add	r0, pc, r0
   4cc4c:	bx	lr
   4cc50:	ldr	r0, [pc, #764]	; 4cf54 <warn@@Base+0x335c>
   4cc54:	add	r0, pc, r0
   4cc58:	bx	lr
   4cc5c:	ldr	r0, [pc, #756]	; 4cf58 <warn@@Base+0x3360>
   4cc60:	add	r0, pc, r0
   4cc64:	bx	lr
   4cc68:	ldr	r0, [pc, #748]	; 4cf5c <warn@@Base+0x3364>
   4cc6c:	add	r0, pc, r0
   4cc70:	bx	lr
   4cc74:	ldr	r0, [pc, #740]	; 4cf60 <warn@@Base+0x3368>
   4cc78:	add	r0, pc, r0
   4cc7c:	bx	lr
   4cc80:	ldr	r0, [pc, #732]	; 4cf64 <warn@@Base+0x336c>
   4cc84:	add	r0, pc, r0
   4cc88:	bx	lr
   4cc8c:	ldr	r0, [pc, #724]	; 4cf68 <warn@@Base+0x3370>
   4cc90:	add	r0, pc, r0
   4cc94:	bx	lr
   4cc98:	ldr	r0, [pc, #716]	; 4cf6c <warn@@Base+0x3374>
   4cc9c:	add	r0, pc, r0
   4cca0:	bx	lr
   4cca4:	ldr	r0, [pc, #708]	; 4cf70 <warn@@Base+0x3378>
   4cca8:	add	r0, pc, r0
   4ccac:	bx	lr
   4ccb0:	ldr	r0, [pc, #700]	; 4cf74 <warn@@Base+0x337c>
   4ccb4:	add	r0, pc, r0
   4ccb8:	bx	lr
   4ccbc:	ldr	r0, [pc, #692]	; 4cf78 <warn@@Base+0x3380>
   4ccc0:	add	r0, pc, r0
   4ccc4:	bx	lr
   4ccc8:	ldr	r0, [pc, #684]	; 4cf7c <warn@@Base+0x3384>
   4cccc:	add	r0, pc, r0
   4ccd0:	bx	lr
   4ccd4:	ldr	r0, [pc, #676]	; 4cf80 <warn@@Base+0x3388>
   4ccd8:	add	r0, pc, r0
   4ccdc:	bx	lr
   4cce0:	ldr	r0, [pc, #668]	; 4cf84 <warn@@Base+0x338c>
   4cce4:	add	r0, pc, r0
   4cce8:	bx	lr
   4ccec:	ldr	r0, [pc, #660]	; 4cf88 <warn@@Base+0x3390>
   4ccf0:	add	r0, pc, r0
   4ccf4:	bx	lr
   4ccf8:	ldr	r0, [pc, #652]	; 4cf8c <warn@@Base+0x3394>
   4ccfc:	add	r0, pc, r0
   4cd00:	bx	lr
   4cd04:	ldr	r0, [pc, #644]	; 4cf90 <warn@@Base+0x3398>
   4cd08:	add	r0, pc, r0
   4cd0c:	bx	lr
   4cd10:	ldr	r0, [pc, #636]	; 4cf94 <warn@@Base+0x339c>
   4cd14:	add	r0, pc, r0
   4cd18:	bx	lr
   4cd1c:	ldr	r0, [pc, #628]	; 4cf98 <warn@@Base+0x33a0>
   4cd20:	add	r0, pc, r0
   4cd24:	bx	lr
   4cd28:	ldr	r0, [pc, #620]	; 4cf9c <warn@@Base+0x33a4>
   4cd2c:	add	r0, pc, r0
   4cd30:	bx	lr
   4cd34:	ldr	r0, [pc, #612]	; 4cfa0 <warn@@Base+0x33a8>
   4cd38:	add	r0, pc, r0
   4cd3c:	bx	lr
   4cd40:	ldr	r0, [pc, #604]	; 4cfa4 <warn@@Base+0x33ac>
   4cd44:	add	r0, pc, r0
   4cd48:	bx	lr
   4cd4c:	ldr	r0, [pc, #596]	; 4cfa8 <warn@@Base+0x33b0>
   4cd50:	add	r0, pc, r0
   4cd54:	bx	lr
   4cd58:	ldr	r0, [pc, #588]	; 4cfac <warn@@Base+0x33b4>
   4cd5c:	add	r0, pc, r0
   4cd60:	bx	lr
   4cd64:	ldr	r0, [pc, #580]	; 4cfb0 <warn@@Base+0x33b8>
   4cd68:	add	r0, pc, r0
   4cd6c:	bx	lr
   4cd70:	ldr	r0, [pc, #572]	; 4cfb4 <warn@@Base+0x33bc>
   4cd74:	add	r0, pc, r0
   4cd78:	bx	lr
   4cd7c:	ldr	r0, [pc, #564]	; 4cfb8 <warn@@Base+0x33c0>
   4cd80:	add	r0, pc, r0
   4cd84:	bx	lr
   4cd88:	ldr	r0, [pc, #556]	; 4cfbc <warn@@Base+0x33c4>
   4cd8c:	add	r0, pc, r0
   4cd90:	bx	lr
   4cd94:	ldr	r0, [pc, #548]	; 4cfc0 <warn@@Base+0x33c8>
   4cd98:	add	r0, pc, r0
   4cd9c:	bx	lr
   4cda0:	ldr	r0, [pc, #540]	; 4cfc4 <warn@@Base+0x33cc>
   4cda4:	add	r0, pc, r0
   4cda8:	bx	lr
   4cdac:	ldr	r0, [pc, #532]	; 4cfc8 <warn@@Base+0x33d0>
   4cdb0:	add	r0, pc, r0
   4cdb4:	bx	lr
   4cdb8:	ldr	r0, [pc, #524]	; 4cfcc <warn@@Base+0x33d4>
   4cdbc:	add	r0, pc, r0
   4cdc0:	bx	lr
   4cdc4:	ldr	r0, [pc, #516]	; 4cfd0 <warn@@Base+0x33d8>
   4cdc8:	add	r0, pc, r0
   4cdcc:	bx	lr
   4cdd0:	ldr	r0, [pc, #508]	; 4cfd4 <warn@@Base+0x33dc>
   4cdd4:	add	r0, pc, r0
   4cdd8:	bx	lr
   4cddc:	ldr	r0, [pc, #500]	; 4cfd8 <warn@@Base+0x33e0>
   4cde0:	add	r0, pc, r0
   4cde4:	bx	lr
   4cde8:	ldr	r0, [pc, #492]	; 4cfdc <warn@@Base+0x33e4>
   4cdec:	add	r0, pc, r0
   4cdf0:	bx	lr
   4cdf4:	ldr	r0, [pc, #484]	; 4cfe0 <warn@@Base+0x33e8>
   4cdf8:	add	r0, pc, r0
   4cdfc:	bx	lr
   4ce00:	ldr	r0, [pc, #476]	; 4cfe4 <warn@@Base+0x33ec>
   4ce04:	add	r0, pc, r0
   4ce08:	bx	lr
   4ce0c:	ldr	r0, [pc, #468]	; 4cfe8 <warn@@Base+0x33f0>
   4ce10:	add	r0, pc, r0
   4ce14:	bx	lr
   4ce18:	ldr	r0, [pc, #460]	; 4cfec <warn@@Base+0x33f4>
   4ce1c:	add	r0, pc, r0
   4ce20:	bx	lr
   4ce24:	ldr	r0, [pc, #452]	; 4cff0 <warn@@Base+0x33f8>
   4ce28:	add	r0, pc, r0
   4ce2c:	bx	lr
   4ce30:	ldr	r0, [pc, #444]	; 4cff4 <warn@@Base+0x33fc>
   4ce34:	add	r0, pc, r0
   4ce38:	bx	lr
   4ce3c:	ldr	r0, [pc, #436]	; 4cff8 <warn@@Base+0x3400>
   4ce40:	add	r0, pc, r0
   4ce44:	bx	lr
   4ce48:	strdeq	r0, [r1], -ip
   4ce4c:	andeq	r0, r1, r0, ror #1
   4ce50:	andeq	r0, r1, r0, lsl #8
   4ce54:	andeq	r0, r1, ip, ror fp
   4ce58:	andeq	r0, r1, ip, lsl #18
   4ce5c:	andeq	r0, r1, r0, asr #2
   4ce60:	ldrdeq	r0, [r1], -r8
   4ce64:	andeq	r0, r1, ip, lsr #8
   4ce68:	andeq	pc, r0, r0, asr #30
   4ce6c:	andeq	r0, r1, ip, ror r2
   4ce70:	andeq	r0, r1, r0, ror #20
   4ce74:	andeq	r0, r1, r4, ror #15
   4ce78:	andeq	r0, r1, ip, lsr r5
   4ce7c:	andeq	pc, r0, r4, asr #31
   4ce80:	andeq	r0, r1, r0, ror #22
   4ce84:	andeq	r0, r1, r0, asr #5
   4ce88:	andeq	r0, r1, r8, lsl #10
   4ce8c:	andeq	r0, r1, ip, asr #18
   4ce90:	strdeq	r0, [r1], -r8
   4ce94:	andeq	pc, r0, r4, lsl pc	; <UNPREDICTABLE>
   4ce98:	andeq	pc, r0, r8, lsl sp	; <UNPREDICTABLE>
   4ce9c:	andeq	r0, r1, r8, asr #12
   4cea0:	strdeq	r0, [r1], -r4
   4cea4:	andeq	r0, r1, r0, ror #20
   4cea8:	andeq	r0, r1, r8, asr #13
   4ceac:	andeq	pc, r0, r4, ror #29
   4ceb0:	andeq	r0, r1, r4, asr #4
   4ceb4:	muleq	r1, r0, r4
   4ceb8:	andeq	r0, r1, ip, ror r0
   4cebc:	ldrdeq	r0, [r1], -r4
   4cec0:	andeq	pc, r0, r8, ror #25
   4cec4:	andeq	pc, r0, r8, lsr fp	; <UNPREDICTABLE>
   4cec8:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   4cecc:	strdeq	pc, [r0], -r8
   4ced0:	ldrdeq	r0, [r1], -r8
   4ced4:	andeq	pc, r0, ip, ror sl	; <UNPREDICTABLE>
   4ced8:	andeq	r0, r1, r4, asr #15
   4cedc:	andeq	pc, r0, r0, asr #23
   4cee0:	andeq	pc, r0, ip, asr sp	; <UNPREDICTABLE>
   4cee4:	ldrdeq	r0, [r1], -r8
   4cee8:	andeq	pc, r0, r0, lsl #27
   4ceec:	andeq	r0, r1, ip, lsr #6
   4cef0:	muleq	r1, ip, r0
   4cef4:	andeq	r0, r1, r0, lsr #10
   4cef8:	andeq	pc, r0, r8, lsr #29
   4cefc:	strdeq	r0, [r1], -r4
   4cf00:	andeq	pc, r0, ip, asr #18
   4cf04:	ldrdeq	pc, [r0], -r8
   4cf08:	andeq	pc, r0, r0, ror r9	; <UNPREDICTABLE>
   4cf0c:	andeq	r0, r1, r4, rrx
   4cf10:	andeq	pc, r0, r8, ror #28
   4cf14:	andeq	r0, r1, r0, ror r2
   4cf18:	strheq	r0, [r1], -r4
   4cf1c:	andeq	pc, r0, r4, asr ip	; <UNPREDICTABLE>
   4cf20:	andeq	r0, r1, r4, lsl r7
   4cf24:	andeq	pc, r0, r8, lsr #28
   4cf28:			; <UNDEFINED> instruction: 0x0000fab0
   4cf2c:	andeq	pc, r0, ip, lsl sl	; <UNPREDICTABLE>
   4cf30:	andeq	r0, r1, r0, lsl r2
   4cf34:	andeq	pc, r0, r4, lsl ip	; <UNPREDICTABLE>
   4cf38:	andeq	r0, r1, r0, lsr #8
   4cf3c:	andeq	r0, r1, r8, lsl #11
   4cf40:	andeq	r0, r1, ip, asr r3
   4cf44:	andeq	pc, r0, r0, lsl #16
   4cf48:	andeq	pc, r0, r8, lsl r8	; <UNPREDICTABLE>
   4cf4c:	andeq	pc, r0, r0, ror r6	; <UNPREDICTABLE>
   4cf50:			; <UNDEFINED> instruction: 0x000103b0
   4cf54:	andeq	r0, r1, r4, asr #7
   4cf58:	strdeq	pc, [r0], -r8
   4cf5c:	andeq	pc, r0, r4, asr pc	; <UNPREDICTABLE>
   4cf60:	andeq	pc, r0, r8, lsl pc	; <UNPREDICTABLE>
   4cf64:	andeq	pc, r0, r0, lsr #30
   4cf68:	muleq	r0, r0, sp
   4cf6c:	strdeq	pc, [r0], -r4
   4cf70:	andeq	r0, r1, r8, ror r0
   4cf74:	andeq	pc, r0, r4, lsl #20
   4cf78:	andeq	pc, r0, ip, lsl lr	; <UNPREDICTABLE>
   4cf7c:	andeq	pc, r0, ip, lsl #31
   4cf80:	andeq	pc, r0, r4, lsr fp	; <UNPREDICTABLE>
   4cf84:	andeq	r0, r1, r4, lsr #3
   4cf88:	andeq	r0, r1, r0, asr #2
   4cf8c:	strdeq	pc, [r0], -r0
   4cf90:	andeq	pc, r0, r8, ror #11
   4cf94:	muleq	r1, ip, r3
   4cf98:	andeq	r0, r1, r0, asr r3
   4cf9c:	andeq	pc, r0, ip, lsl fp	; <UNPREDICTABLE>
   4cfa0:	andeq	pc, r0, r8, asr r7	; <UNPREDICTABLE>
   4cfa4:	andeq	pc, r0, r0, ror #11
   4cfa8:	andeq	pc, r0, r4, ror sp	; <UNPREDICTABLE>
   4cfac:	andeq	pc, r0, r4, ror #25
   4cfb0:	andeq	pc, r0, r4, lsl sp	; <UNPREDICTABLE>
   4cfb4:	andeq	pc, r0, r4, lsl r6	; <UNPREDICTABLE>
   4cfb8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   4cfbc:	andeq	pc, r0, r0, asr #18
   4cfc0:	andeq	pc, r0, r4, asr r9	; <UNPREDICTABLE>
   4cfc4:	andeq	pc, r0, r0, lsr #27
   4cfc8:	andeq	pc, r0, ip, asr pc	; <UNPREDICTABLE>
   4cfcc:	strdeq	pc, [r0], -r0
   4cfd0:	andeq	pc, r0, r0, lsl pc	; <UNPREDICTABLE>
   4cfd4:	andeq	pc, r0, r8, ror #21
   4cfd8:	andeq	r0, r1, ip, lsl #7
   4cfdc:	andeq	pc, r0, r8, lsl #22
   4cfe0:	andeq	pc, r0, r8, lsl fp	; <UNPREDICTABLE>
   4cfe4:	ldrdeq	r0, [r1], -ip
   4cfe8:	ldrdeq	pc, [r0], -r4
   4cfec:	andeq	pc, r0, r0, ror #20
   4cff0:	andeq	pc, r0, ip, ror sl	; <UNPREDICTABLE>
   4cff4:	andeq	pc, r0, ip, asr ip	; <UNPREDICTABLE>
   4cff8:			; <UNDEFINED> instruction: 0x0000f6b4
   4cffc:	andeq	r0, r1, r0, rrx
   4d000:	andeq	r0, r1, ip, lsl #1
   4d004:	andeq	pc, r0, r8, asr #11
   4d008:	andeq	pc, r0, ip, asr r2	; <UNPREDICTABLE>
   4d00c:	andeq	pc, r0, r0, lsl #4
   4d010:	andeq	pc, r0, r4, lsl r2	; <UNPREDICTABLE>
   4d014:	andeq	pc, r0, ip, asr r3	; <UNPREDICTABLE>
   4d018:			; <UNDEFINED> instruction: 0x0000f9b0
   4d01c:	andeq	pc, r0, r0, ror #22
   4d020:	andeq	pc, r0, r0, lsr #8
   4d024:	andeq	pc, r0, r0, lsl #15
   4d028:	andeq	pc, r0, r0, ror sl	; <UNPREDICTABLE>
   4d02c:	ldrdeq	pc, [r0], -ip
   4d030:	strdeq	pc, [r0], -r4
   4d034:	andeq	pc, r0, r4, ror #28
   4d038:	andeq	pc, r0, r8, ror #20
   4d03c:	andeq	pc, r0, r4, lsr r4	; <UNPREDICTABLE>
   4d040:	andeq	pc, r0, r8, lsl #8
   4d044:	andeq	pc, r0, ip, lsl #8
   4d048:	andeq	pc, r0, r8, lsl #2
   4d04c:	andeq	pc, r0, r8, asr #23
   4d050:	andeq	pc, r0, ip, ror fp	; <UNPREDICTABLE>
   4d054:	andeq	pc, r0, ip, lsl #23
   4d058:	andeq	pc, r0, r8, asr #8
   4d05c:	andeq	pc, r0, r0, lsl r2	; <UNPREDICTABLE>
   4d060:	strdeq	pc, [r0], -r4
   4d064:	muleq	r0, r8, r1
   4d068:	andeq	pc, r0, r8, ror #14
   4d06c:	andeq	pc, r0, r8, lsr r0	; <UNPREDICTABLE>
   4d070:	andeq	pc, r0, r8, lsl lr	; <UNPREDICTABLE>
   4d074:	andeq	pc, r0, r0, lsr r0	; <UNPREDICTABLE>
   4d078:	muleq	r0, r8, r5
   4d07c:	andeq	pc, r0, r0, ror #13
   4d080:	andeq	pc, r0, ip, lsr #13
   4d084:			; <UNDEFINED> instruction: 0x0000f6b4
   4d088:	andeq	pc, r0, r0, lsl lr	; <UNPREDICTABLE>
   4d08c:	andeq	pc, r0, r0, ror r0	; <UNPREDICTABLE>
   4d090:	andeq	pc, r0, r4, lsl #11
   4d094:	andeq	pc, r0, ip, asr #20
   4d098:	andeq	pc, r0, r4, asr #4
   4d09c:	andeq	pc, r0, ip, lsl #25
   4d0a0:	andeq	pc, r0, r8, ror #8
   4d0a4:	muleq	r0, ip, fp
   4d0a8:	andeq	pc, r0, r0, asr #16
   4d0ac:	ldrdeq	pc, [r0], -ip
   4d0b0:	strdeq	pc, [r0], -ip
   4d0b4:	muleq	r0, r0, r2
   4d0b8:	andeq	pc, r0, r0, asr #8
   4d0bc:	andeq	pc, r0, r8, lsl sl	; <UNPREDICTABLE>
   4d0c0:	andeq	pc, r0, r0, ror #24
   4d0c4:	andeq	pc, r0, r4, ror #21
   4d0c8:	andeq	pc, r0, r4, asr #8
   4d0cc:	andeq	pc, r0, r4, lsl r4	; <UNPREDICTABLE>
   4d0d0:	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
   4d0d4:	andeq	pc, r0, ip, lsr r7	; <UNPREDICTABLE>
   4d0d8:	andeq	pc, r0, r4, lsl #7
   4d0dc:	andeq	pc, r0, r0, lsr #7
   4d0e0:	andeq	pc, r0, r0, lsl #19
   4d0e4:	andeq	pc, r0, r4, ror fp	; <UNPREDICTABLE>
   4d0e8:	andeq	pc, r0, r8, lsl r1	; <UNPREDICTABLE>
   4d0ec:	andeq	pc, r0, r4, lsr r1	; <UNPREDICTABLE>
   4d0f0:			; <UNDEFINED> instruction: 0x0000f1b8
   4d0f4:	andeq	pc, r0, r0, lsr #6
   4d0f8:	andeq	pc, r0, r0, asr #21
   4d0fc:	strdeq	pc, [r0], -r0
   4d100:	strdeq	pc, [r0], -r8
   4d104:	andeq	pc, r0, r0, lsr r1	; <UNPREDICTABLE>
   4d108:	muleq	r0, ip, ip
   4d10c:			; <UNDEFINED> instruction: 0x0000fcb4
   4d110:	andeq	pc, r0, r4, asr #22
   4d114:	andeq	pc, r0, ip, lsl #2
   4d118:	andeq	lr, r0, r8, lsr pc
   4d11c:	andeq	lr, r0, r0, asr pc
   4d120:	muleq	r0, r8, sl
   4d124:	ldr	r0, [pc, #-304]	; 4cffc <warn@@Base+0x3404>
   4d128:	add	r0, pc, r0
   4d12c:	bx	lr
   4d130:	ldr	r0, [pc, #-312]	; 4d000 <warn@@Base+0x3408>
   4d134:	add	r0, pc, r0
   4d138:	bx	lr
   4d13c:	ldr	r0, [pc, #-320]	; 4d004 <warn@@Base+0x340c>
   4d140:	add	r0, pc, r0
   4d144:	bx	lr
   4d148:	ldr	r0, [pc, #-328]	; 4d008 <warn@@Base+0x3410>
   4d14c:	add	r0, pc, r0
   4d150:	bx	lr
   4d154:	ldr	r0, [pc, #-336]	; 4d00c <warn@@Base+0x3414>
   4d158:	add	r0, pc, r0
   4d15c:	bx	lr
   4d160:	ldr	r0, [pc, #-344]	; 4d010 <warn@@Base+0x3418>
   4d164:	add	r0, pc, r0
   4d168:	bx	lr
   4d16c:	ldr	r0, [pc, #-352]	; 4d014 <warn@@Base+0x341c>
   4d170:	add	r0, pc, r0
   4d174:	bx	lr
   4d178:	ldr	r0, [pc, #-360]	; 4d018 <warn@@Base+0x3420>
   4d17c:	add	r0, pc, r0
   4d180:	bx	lr
   4d184:	ldr	r0, [pc, #-368]	; 4d01c <warn@@Base+0x3424>
   4d188:	add	r0, pc, r0
   4d18c:	bx	lr
   4d190:	ldr	r0, [pc, #-376]	; 4d020 <warn@@Base+0x3428>
   4d194:	add	r0, pc, r0
   4d198:	bx	lr
   4d19c:	ldr	r0, [pc, #-384]	; 4d024 <warn@@Base+0x342c>
   4d1a0:	add	r0, pc, r0
   4d1a4:	bx	lr
   4d1a8:	ldr	r0, [pc, #-392]	; 4d028 <warn@@Base+0x3430>
   4d1ac:	add	r0, pc, r0
   4d1b0:	bx	lr
   4d1b4:	ldr	r0, [pc, #-400]	; 4d02c <warn@@Base+0x3434>
   4d1b8:	add	r0, pc, r0
   4d1bc:	bx	lr
   4d1c0:	ldr	r0, [pc, #-408]	; 4d030 <warn@@Base+0x3438>
   4d1c4:	add	r0, pc, r0
   4d1c8:	bx	lr
   4d1cc:	ldr	r0, [pc, #-416]	; 4d034 <warn@@Base+0x343c>
   4d1d0:	add	r0, pc, r0
   4d1d4:	bx	lr
   4d1d8:	ldr	r0, [pc, #-424]	; 4d038 <warn@@Base+0x3440>
   4d1dc:	add	r0, pc, r0
   4d1e0:	bx	lr
   4d1e4:	ldr	r0, [pc, #-432]	; 4d03c <warn@@Base+0x3444>
   4d1e8:	add	r0, pc, r0
   4d1ec:	bx	lr
   4d1f0:	ldr	r0, [pc, #-440]	; 4d040 <warn@@Base+0x3448>
   4d1f4:	add	r0, pc, r0
   4d1f8:	bx	lr
   4d1fc:	ldr	r0, [pc, #-448]	; 4d044 <warn@@Base+0x344c>
   4d200:	add	r0, pc, r0
   4d204:	bx	lr
   4d208:	ldr	r0, [pc, #-456]	; 4d048 <warn@@Base+0x3450>
   4d20c:	add	r0, pc, r0
   4d210:	bx	lr
   4d214:	ldr	r0, [pc, #-464]	; 4d04c <warn@@Base+0x3454>
   4d218:	add	r0, pc, r0
   4d21c:	bx	lr
   4d220:	ldr	r0, [pc, #-472]	; 4d050 <warn@@Base+0x3458>
   4d224:	add	r0, pc, r0
   4d228:	bx	lr
   4d22c:	ldr	r0, [pc, #-480]	; 4d054 <warn@@Base+0x345c>
   4d230:	add	r0, pc, r0
   4d234:	bx	lr
   4d238:	ldr	r0, [pc, #-488]	; 4d058 <warn@@Base+0x3460>
   4d23c:	add	r0, pc, r0
   4d240:	bx	lr
   4d244:	ldr	r0, [pc, #-496]	; 4d05c <warn@@Base+0x3464>
   4d248:	add	r0, pc, r0
   4d24c:	bx	lr
   4d250:	ldr	r0, [pc, #-504]	; 4d060 <warn@@Base+0x3468>
   4d254:	add	r0, pc, r0
   4d258:	bx	lr
   4d25c:	ldr	r0, [pc, #-512]	; 4d064 <warn@@Base+0x346c>
   4d260:	add	r0, pc, r0
   4d264:	bx	lr
   4d268:	ldr	r0, [pc, #-520]	; 4d068 <warn@@Base+0x3470>
   4d26c:	add	r0, pc, r0
   4d270:	bx	lr
   4d274:	ldr	r0, [pc, #-528]	; 4d06c <warn@@Base+0x3474>
   4d278:	add	r0, pc, r0
   4d27c:	bx	lr
   4d280:	ldr	r0, [pc, #-536]	; 4d070 <warn@@Base+0x3478>
   4d284:	add	r0, pc, r0
   4d288:	bx	lr
   4d28c:	ldr	r0, [pc, #-544]	; 4d074 <warn@@Base+0x347c>
   4d290:	add	r0, pc, r0
   4d294:	bx	lr
   4d298:	ldr	r0, [pc, #-552]	; 4d078 <warn@@Base+0x3480>
   4d29c:	add	r0, pc, r0
   4d2a0:	bx	lr
   4d2a4:	ldr	r0, [pc, #-560]	; 4d07c <warn@@Base+0x3484>
   4d2a8:	add	r0, pc, r0
   4d2ac:	bx	lr
   4d2b0:	ldr	r0, [pc, #-568]	; 4d080 <warn@@Base+0x3488>
   4d2b4:	add	r0, pc, r0
   4d2b8:	bx	lr
   4d2bc:	ldr	r0, [pc, #-576]	; 4d084 <warn@@Base+0x348c>
   4d2c0:	add	r0, pc, r0
   4d2c4:	bx	lr
   4d2c8:	ldr	r0, [pc, #-584]	; 4d088 <warn@@Base+0x3490>
   4d2cc:	add	r0, pc, r0
   4d2d0:	bx	lr
   4d2d4:	ldr	r0, [pc, #-592]	; 4d08c <warn@@Base+0x3494>
   4d2d8:	add	r0, pc, r0
   4d2dc:	bx	lr
   4d2e0:	ldr	r0, [pc, #-600]	; 4d090 <warn@@Base+0x3498>
   4d2e4:	add	r0, pc, r0
   4d2e8:	bx	lr
   4d2ec:	mov	r0, #0
   4d2f0:	bx	lr
   4d2f4:	ldr	r0, [pc, #-616]	; 4d094 <warn@@Base+0x349c>
   4d2f8:	add	r0, pc, r0
   4d2fc:	bx	lr
   4d300:	ldr	r0, [pc, #-624]	; 4d098 <warn@@Base+0x34a0>
   4d304:	add	r0, pc, r0
   4d308:	bx	lr
   4d30c:	ldr	r0, [pc, #-632]	; 4d09c <warn@@Base+0x34a4>
   4d310:	add	r0, pc, r0
   4d314:	bx	lr
   4d318:	ldr	r0, [pc, #-640]	; 4d0a0 <warn@@Base+0x34a8>
   4d31c:	add	r0, pc, r0
   4d320:	bx	lr
   4d324:	ldr	r0, [pc, #-648]	; 4d0a4 <warn@@Base+0x34ac>
   4d328:	add	r0, pc, r0
   4d32c:	bx	lr
   4d330:	ldr	r0, [pc, #-656]	; 4d0a8 <warn@@Base+0x34b0>
   4d334:	add	r0, pc, r0
   4d338:	bx	lr
   4d33c:	ldr	r0, [pc, #-664]	; 4d0ac <warn@@Base+0x34b4>
   4d340:	add	r0, pc, r0
   4d344:	bx	lr
   4d348:	ldr	r0, [pc, #-672]	; 4d0b0 <warn@@Base+0x34b8>
   4d34c:	add	r0, pc, r0
   4d350:	bx	lr
   4d354:	ldr	r0, [pc, #-680]	; 4d0b4 <warn@@Base+0x34bc>
   4d358:	add	r0, pc, r0
   4d35c:	bx	lr
   4d360:	ldr	r0, [pc, #-688]	; 4d0b8 <warn@@Base+0x34c0>
   4d364:	add	r0, pc, r0
   4d368:	bx	lr
   4d36c:	ldr	r0, [pc, #-696]	; 4d0bc <warn@@Base+0x34c4>
   4d370:	add	r0, pc, r0
   4d374:	bx	lr
   4d378:	ldr	r0, [pc, #-704]	; 4d0c0 <warn@@Base+0x34c8>
   4d37c:	add	r0, pc, r0
   4d380:	bx	lr
   4d384:	ldr	r0, [pc, #-712]	; 4d0c4 <warn@@Base+0x34cc>
   4d388:	add	r0, pc, r0
   4d38c:	bx	lr
   4d390:	ldr	r0, [pc, #-720]	; 4d0c8 <warn@@Base+0x34d0>
   4d394:	add	r0, pc, r0
   4d398:	bx	lr
   4d39c:	ldr	r0, [pc, #-728]	; 4d0cc <warn@@Base+0x34d4>
   4d3a0:	add	r0, pc, r0
   4d3a4:	bx	lr
   4d3a8:	ldr	r0, [pc, #-736]	; 4d0d0 <warn@@Base+0x34d8>
   4d3ac:	add	r0, pc, r0
   4d3b0:	bx	lr
   4d3b4:	ldr	r0, [pc, #-744]	; 4d0d4 <warn@@Base+0x34dc>
   4d3b8:	add	r0, pc, r0
   4d3bc:	bx	lr
   4d3c0:	ldr	r0, [pc, #-752]	; 4d0d8 <warn@@Base+0x34e0>
   4d3c4:	add	r0, pc, r0
   4d3c8:	bx	lr
   4d3cc:	ldr	r0, [pc, #-760]	; 4d0dc <warn@@Base+0x34e4>
   4d3d0:	add	r0, pc, r0
   4d3d4:	bx	lr
   4d3d8:	ldr	r0, [pc, #-768]	; 4d0e0 <warn@@Base+0x34e8>
   4d3dc:	add	r0, pc, r0
   4d3e0:	bx	lr
   4d3e4:	ldr	r0, [pc, #-776]	; 4d0e4 <warn@@Base+0x34ec>
   4d3e8:	add	r0, pc, r0
   4d3ec:	bx	lr
   4d3f0:	ldr	r0, [pc, #-784]	; 4d0e8 <warn@@Base+0x34f0>
   4d3f4:	add	r0, pc, r0
   4d3f8:	bx	lr
   4d3fc:	ldr	r0, [pc, #-792]	; 4d0ec <warn@@Base+0x34f4>
   4d400:	add	r0, pc, r0
   4d404:	bx	lr
   4d408:	ldr	r0, [pc, #-800]	; 4d0f0 <warn@@Base+0x34f8>
   4d40c:	add	r0, pc, r0
   4d410:	bx	lr
   4d414:	ldr	r0, [pc, #-808]	; 4d0f4 <warn@@Base+0x34fc>
   4d418:	add	r0, pc, r0
   4d41c:	bx	lr
   4d420:	ldr	r0, [pc, #-816]	; 4d0f8 <warn@@Base+0x3500>
   4d424:	add	r0, pc, r0
   4d428:	bx	lr
   4d42c:	ldr	r0, [pc, #-824]	; 4d0fc <warn@@Base+0x3504>
   4d430:	add	r0, pc, r0
   4d434:	bx	lr
   4d438:	ldr	r0, [pc, #-832]	; 4d100 <warn@@Base+0x3508>
   4d43c:	add	r0, pc, r0
   4d440:	bx	lr
   4d444:	ldr	r0, [pc, #-840]	; 4d104 <warn@@Base+0x350c>
   4d448:	add	r0, pc, r0
   4d44c:	bx	lr
   4d450:	ldr	r0, [pc, #-848]	; 4d108 <warn@@Base+0x3510>
   4d454:	add	r0, pc, r0
   4d458:	bx	lr
   4d45c:	ldr	r0, [pc, #-856]	; 4d10c <warn@@Base+0x3514>
   4d460:	add	r0, pc, r0
   4d464:	bx	lr
   4d468:	ldr	r0, [pc, #-864]	; 4d110 <warn@@Base+0x3518>
   4d46c:	add	r0, pc, r0
   4d470:	bx	lr
   4d474:	ldr	r0, [pc, #-872]	; 4d114 <warn@@Base+0x351c>
   4d478:	add	r0, pc, r0
   4d47c:	bx	lr
   4d480:	ldr	r0, [pc, #-880]	; 4d118 <warn@@Base+0x3520>
   4d484:	add	r0, pc, r0
   4d488:	bx	lr
   4d48c:	ldr	r0, [pc, #-888]	; 4d11c <warn@@Base+0x3524>
   4d490:	add	r0, pc, r0
   4d494:	bx	lr
   4d498:	ldr	r0, [pc, #-896]	; 4d120 <warn@@Base+0x3528>
   4d49c:	add	r0, pc, r0
   4d4a0:	bx	lr
   4d4a4:	sub	r0, r0, #3
   4d4a8:	cmp	r0, #249	; 0xf9
   4d4ac:	addls	pc, pc, r0, lsl #2
   4d4b0:	b	4e0c4 <warn@@Base+0x44cc>
   4d4b4:	b	4e0b8 <warn@@Base+0x44c0>
   4d4b8:	b	4e0c4 <warn@@Base+0x44cc>
   4d4bc:	b	4e0c4 <warn@@Base+0x44cc>
   4d4c0:	b	4e0ac <warn@@Base+0x44b4>
   4d4c4:	b	4e0c4 <warn@@Base+0x44cc>
   4d4c8:	b	4e0a0 <warn@@Base+0x44a8>
   4d4cc:	b	4e094 <warn@@Base+0x449c>
   4d4d0:	b	4e088 <warn@@Base+0x4490>
   4d4d4:	b	4e07c <warn@@Base+0x4484>
   4d4d8:	b	4e070 <warn@@Base+0x4478>
   4d4dc:	b	4e064 <warn@@Base+0x446c>
   4d4e0:	b	4e058 <warn@@Base+0x4460>
   4d4e4:	b	4e04c <warn@@Base+0x4454>
   4d4e8:	b	4e040 <warn@@Base+0x4448>
   4d4ec:	b	4e034 <warn@@Base+0x443c>
   4d4f0:	b	4e028 <warn@@Base+0x4430>
   4d4f4:	b	4e01c <warn@@Base+0x4424>
   4d4f8:	b	4e010 <warn@@Base+0x4418>
   4d4fc:	b	4e004 <warn@@Base+0x440c>
   4d500:	b	4dff8 <warn@@Base+0x4400>
   4d504:	b	4dfec <warn@@Base+0x43f4>
   4d508:	b	4dfe0 <warn@@Base+0x43e8>
   4d50c:	b	4dfd4 <warn@@Base+0x43dc>
   4d510:	b	4dfc8 <warn@@Base+0x43d0>
   4d514:	b	4dfbc <warn@@Base+0x43c4>
   4d518:	b	4dfb0 <warn@@Base+0x43b8>
   4d51c:	b	4dfa4 <warn@@Base+0x43ac>
   4d520:	b	4df98 <warn@@Base+0x43a0>
   4d524:	b	4df8c <warn@@Base+0x4394>
   4d528:	b	4df80 <warn@@Base+0x4388>
   4d52c:	b	4df74 <warn@@Base+0x437c>
   4d530:	b	4df68 <warn@@Base+0x4370>
   4d534:	b	4df5c <warn@@Base+0x4364>
   4d538:	b	4df50 <warn@@Base+0x4358>
   4d53c:	b	4df44 <warn@@Base+0x434c>
   4d540:	b	4df38 <warn@@Base+0x4340>
   4d544:	b	4df2c <warn@@Base+0x4334>
   4d548:	b	4df20 <warn@@Base+0x4328>
   4d54c:	b	4df14 <warn@@Base+0x431c>
   4d550:	b	4df08 <warn@@Base+0x4310>
   4d554:	b	4defc <warn@@Base+0x4304>
   4d558:	b	4def0 <warn@@Base+0x42f8>
   4d55c:	b	4dee4 <warn@@Base+0x42ec>
   4d560:	b	4ded8 <warn@@Base+0x42e0>
   4d564:	b	4decc <warn@@Base+0x42d4>
   4d568:	b	4dec0 <warn@@Base+0x42c8>
   4d56c:	b	4deb4 <warn@@Base+0x42bc>
   4d570:	b	4dea8 <warn@@Base+0x42b0>
   4d574:	b	4de9c <warn@@Base+0x42a4>
   4d578:	b	4de90 <warn@@Base+0x4298>
   4d57c:	b	4de84 <warn@@Base+0x428c>
   4d580:	b	4de78 <warn@@Base+0x4280>
   4d584:	b	4de6c <warn@@Base+0x4274>
   4d588:	b	4de60 <warn@@Base+0x4268>
   4d58c:	b	4de54 <warn@@Base+0x425c>
   4d590:	b	4de48 <warn@@Base+0x4250>
   4d594:	b	4de3c <warn@@Base+0x4244>
   4d598:	b	4de30 <warn@@Base+0x4238>
   4d59c:	b	4de24 <warn@@Base+0x422c>
   4d5a0:	b	4de18 <warn@@Base+0x4220>
   4d5a4:	b	4de0c <warn@@Base+0x4214>
   4d5a8:	b	4de00 <warn@@Base+0x4208>
   4d5ac:	b	4ddf4 <warn@@Base+0x41fc>
   4d5b0:	b	4dde8 <warn@@Base+0x41f0>
   4d5b4:	b	4dddc <warn@@Base+0x41e4>
   4d5b8:	b	4ddd0 <warn@@Base+0x41d8>
   4d5bc:	b	4ddc4 <warn@@Base+0x41cc>
   4d5c0:	b	4ddb8 <warn@@Base+0x41c0>
   4d5c4:	b	4ddac <warn@@Base+0x41b4>
   4d5c8:	b	4dda0 <warn@@Base+0x41a8>
   4d5cc:	b	4dd94 <warn@@Base+0x419c>
   4d5d0:	b	4dd88 <warn@@Base+0x4190>
   4d5d4:	b	4dd7c <warn@@Base+0x4184>
   4d5d8:	b	4dd70 <warn@@Base+0x4178>
   4d5dc:	b	4dd64 <warn@@Base+0x416c>
   4d5e0:	b	4dd58 <warn@@Base+0x4160>
   4d5e4:	b	4dd4c <warn@@Base+0x4154>
   4d5e8:	b	4dd40 <warn@@Base+0x4148>
   4d5ec:	b	4dd34 <warn@@Base+0x413c>
   4d5f0:	b	4dd28 <warn@@Base+0x4130>
   4d5f4:	b	4dd1c <warn@@Base+0x4124>
   4d5f8:	b	4dd10 <warn@@Base+0x4118>
   4d5fc:	b	4dd04 <warn@@Base+0x410c>
   4d600:	b	4dcf8 <warn@@Base+0x4100>
   4d604:	b	4dcec <warn@@Base+0x40f4>
   4d608:	b	4dce0 <warn@@Base+0x40e8>
   4d60c:	b	4dcd4 <warn@@Base+0x40dc>
   4d610:	b	4dcc8 <warn@@Base+0x40d0>
   4d614:	b	4dcbc <warn@@Base+0x40c4>
   4d618:	b	4dcb0 <warn@@Base+0x40b8>
   4d61c:	b	4dca4 <warn@@Base+0x40ac>
   4d620:	b	4dc98 <warn@@Base+0x40a0>
   4d624:	b	4dc8c <warn@@Base+0x4094>
   4d628:	b	4dc80 <warn@@Base+0x4088>
   4d62c:	b	4dc74 <warn@@Base+0x407c>
   4d630:	b	4dc68 <warn@@Base+0x4070>
   4d634:	b	4dc5c <warn@@Base+0x4064>
   4d638:	b	4dc50 <warn@@Base+0x4058>
   4d63c:	b	4dc44 <warn@@Base+0x404c>
   4d640:	b	4dc38 <warn@@Base+0x4040>
   4d644:	b	4dc2c <warn@@Base+0x4034>
   4d648:	b	4dc20 <warn@@Base+0x4028>
   4d64c:	b	4dc14 <warn@@Base+0x401c>
   4d650:	b	4dc08 <warn@@Base+0x4010>
   4d654:	b	4dbfc <warn@@Base+0x4004>
   4d658:	b	4dbf0 <warn@@Base+0x3ff8>
   4d65c:	b	4dbe4 <warn@@Base+0x3fec>
   4d660:	b	4dbd8 <warn@@Base+0x3fe0>
   4d664:	b	4dbcc <warn@@Base+0x3fd4>
   4d668:	b	4dbc0 <warn@@Base+0x3fc8>
   4d66c:	b	4dbb4 <warn@@Base+0x3fbc>
   4d670:	b	4dba8 <warn@@Base+0x3fb0>
   4d674:	b	4db9c <warn@@Base+0x3fa4>
   4d678:	b	4db90 <warn@@Base+0x3f98>
   4d67c:	b	4db84 <warn@@Base+0x3f8c>
   4d680:	b	4db78 <warn@@Base+0x3f80>
   4d684:	b	4db6c <warn@@Base+0x3f74>
   4d688:	b	4db60 <warn@@Base+0x3f68>
   4d68c:	b	4db54 <warn@@Base+0x3f5c>
   4d690:	b	4db48 <warn@@Base+0x3f50>
   4d694:	b	4db3c <warn@@Base+0x3f44>
   4d698:	b	4db30 <warn@@Base+0x3f38>
   4d69c:	b	4db24 <warn@@Base+0x3f2c>
   4d6a0:	b	4db18 <warn@@Base+0x3f20>
   4d6a4:	b	4db0c <warn@@Base+0x3f14>
   4d6a8:	b	4db00 <warn@@Base+0x3f08>
   4d6ac:	b	4daf4 <warn@@Base+0x3efc>
   4d6b0:	b	4dae8 <warn@@Base+0x3ef0>
   4d6b4:	b	4dadc <warn@@Base+0x3ee4>
   4d6b8:	b	4dad0 <warn@@Base+0x3ed8>
   4d6bc:	b	4dac4 <warn@@Base+0x3ecc>
   4d6c0:	b	4dab8 <warn@@Base+0x3ec0>
   4d6c4:	b	4daac <warn@@Base+0x3eb4>
   4d6c8:	b	4daa0 <warn@@Base+0x3ea8>
   4d6cc:	b	4da94 <warn@@Base+0x3e9c>
   4d6d0:	b	4da88 <warn@@Base+0x3e90>
   4d6d4:	b	4da7c <warn@@Base+0x3e84>
   4d6d8:	b	4da70 <warn@@Base+0x3e78>
   4d6dc:	b	4da64 <warn@@Base+0x3e6c>
   4d6e0:	b	4da58 <warn@@Base+0x3e60>
   4d6e4:	b	4da4c <warn@@Base+0x3e54>
   4d6e8:	b	4da40 <warn@@Base+0x3e48>
   4d6ec:	b	4da34 <warn@@Base+0x3e3c>
   4d6f0:	b	4da28 <warn@@Base+0x3e30>
   4d6f4:	b	4da1c <warn@@Base+0x3e24>
   4d6f8:	b	4da10 <warn@@Base+0x3e18>
   4d6fc:	b	4da04 <warn@@Base+0x3e0c>
   4d700:	b	4d9f8 <warn@@Base+0x3e00>
   4d704:	b	4d9ec <warn@@Base+0x3df4>
   4d708:	b	4d9e0 <warn@@Base+0x3de8>
   4d70c:	b	4d9d4 <warn@@Base+0x3ddc>
   4d710:	b	4d9c8 <warn@@Base+0x3dd0>
   4d714:	b	4d9bc <warn@@Base+0x3dc4>
   4d718:	b	4d9b0 <warn@@Base+0x3db8>
   4d71c:	b	4d9a4 <warn@@Base+0x3dac>
   4d720:	b	4d998 <warn@@Base+0x3da0>
   4d724:	b	4d98c <warn@@Base+0x3d94>
   4d728:	b	4e0c4 <warn@@Base+0x44cc>
   4d72c:	b	4e0c4 <warn@@Base+0x44cc>
   4d730:	b	4e0c4 <warn@@Base+0x44cc>
   4d734:	b	4e0c4 <warn@@Base+0x44cc>
   4d738:	b	4e0c4 <warn@@Base+0x44cc>
   4d73c:	b	4e0c4 <warn@@Base+0x44cc>
   4d740:	b	4e0c4 <warn@@Base+0x44cc>
   4d744:	b	4e0c4 <warn@@Base+0x44cc>
   4d748:	b	4e0c4 <warn@@Base+0x44cc>
   4d74c:	b	4e0c4 <warn@@Base+0x44cc>
   4d750:	b	4e0c4 <warn@@Base+0x44cc>
   4d754:	b	4e0c4 <warn@@Base+0x44cc>
   4d758:	b	4e0c4 <warn@@Base+0x44cc>
   4d75c:	b	4e0c4 <warn@@Base+0x44cc>
   4d760:	b	4e0c4 <warn@@Base+0x44cc>
   4d764:	b	4e0c4 <warn@@Base+0x44cc>
   4d768:	b	4e0c4 <warn@@Base+0x44cc>
   4d76c:	b	4e0c4 <warn@@Base+0x44cc>
   4d770:	b	4e0c4 <warn@@Base+0x44cc>
   4d774:	b	4e0c4 <warn@@Base+0x44cc>
   4d778:	b	4e0c4 <warn@@Base+0x44cc>
   4d77c:	b	4e0c4 <warn@@Base+0x44cc>
   4d780:	b	4e0c4 <warn@@Base+0x44cc>
   4d784:	b	4e0c4 <warn@@Base+0x44cc>
   4d788:	b	4e0c4 <warn@@Base+0x44cc>
   4d78c:	b	4e0c4 <warn@@Base+0x44cc>
   4d790:	b	4e0c4 <warn@@Base+0x44cc>
   4d794:	b	4e0c4 <warn@@Base+0x44cc>
   4d798:	b	4e0c4 <warn@@Base+0x44cc>
   4d79c:	b	4e0c4 <warn@@Base+0x44cc>
   4d7a0:	b	4e0c4 <warn@@Base+0x44cc>
   4d7a4:	b	4e0c4 <warn@@Base+0x44cc>
   4d7a8:	b	4e0c4 <warn@@Base+0x44cc>
   4d7ac:	b	4e0c4 <warn@@Base+0x44cc>
   4d7b0:	b	4e0c4 <warn@@Base+0x44cc>
   4d7b4:	b	4e0c4 <warn@@Base+0x44cc>
   4d7b8:	b	4e0c4 <warn@@Base+0x44cc>
   4d7bc:	b	4e0c4 <warn@@Base+0x44cc>
   4d7c0:	b	4e0c4 <warn@@Base+0x44cc>
   4d7c4:	b	4e0c4 <warn@@Base+0x44cc>
   4d7c8:	b	4e0c4 <warn@@Base+0x44cc>
   4d7cc:	b	4e0c4 <warn@@Base+0x44cc>
   4d7d0:	b	4e0c4 <warn@@Base+0x44cc>
   4d7d4:	b	4e0c4 <warn@@Base+0x44cc>
   4d7d8:	b	4e0c4 <warn@@Base+0x44cc>
   4d7dc:	b	4e0c4 <warn@@Base+0x44cc>
   4d7e0:	b	4e0c4 <warn@@Base+0x44cc>
   4d7e4:	b	4e0c4 <warn@@Base+0x44cc>
   4d7e8:	b	4e0c4 <warn@@Base+0x44cc>
   4d7ec:	b	4e0c4 <warn@@Base+0x44cc>
   4d7f0:	b	4e0c4 <warn@@Base+0x44cc>
   4d7f4:	b	4e0c4 <warn@@Base+0x44cc>
   4d7f8:	b	4e0c4 <warn@@Base+0x44cc>
   4d7fc:	b	4e0c4 <warn@@Base+0x44cc>
   4d800:	b	4e0c4 <warn@@Base+0x44cc>
   4d804:	b	4e0c4 <warn@@Base+0x44cc>
   4d808:	b	4e0c4 <warn@@Base+0x44cc>
   4d80c:	b	4e0c4 <warn@@Base+0x44cc>
   4d810:	b	4e0c4 <warn@@Base+0x44cc>
   4d814:	b	4e0c4 <warn@@Base+0x44cc>
   4d818:	b	4e0c4 <warn@@Base+0x44cc>
   4d81c:	b	4e0c4 <warn@@Base+0x44cc>
   4d820:	b	4e0c4 <warn@@Base+0x44cc>
   4d824:	b	4e0c4 <warn@@Base+0x44cc>
   4d828:	b	4d980 <warn@@Base+0x3d88>
   4d82c:	b	4d974 <warn@@Base+0x3d7c>
   4d830:	b	4d968 <warn@@Base+0x3d70>
   4d834:	b	4d95c <warn@@Base+0x3d64>
   4d838:	b	4d950 <warn@@Base+0x3d58>
   4d83c:	b	4d944 <warn@@Base+0x3d4c>
   4d840:	b	4d938 <warn@@Base+0x3d40>
   4d844:	b	4e0c4 <warn@@Base+0x44cc>
   4d848:	b	4e0c4 <warn@@Base+0x44cc>
   4d84c:	b	4e0c4 <warn@@Base+0x44cc>
   4d850:	b	4e0c4 <warn@@Base+0x44cc>
   4d854:	b	4e0c4 <warn@@Base+0x44cc>
   4d858:	b	4e0c4 <warn@@Base+0x44cc>
   4d85c:	b	4e0c4 <warn@@Base+0x44cc>
   4d860:	b	4e0c4 <warn@@Base+0x44cc>
   4d864:	b	4e0c4 <warn@@Base+0x44cc>
   4d868:	b	4d92c <warn@@Base+0x3d34>
   4d86c:	b	4d920 <warn@@Base+0x3d28>
   4d870:	b	4d914 <warn@@Base+0x3d1c>
   4d874:	b	4d908 <warn@@Base+0x3d10>
   4d878:	b	4d8fc <warn@@Base+0x3d04>
   4d87c:	b	4d8f0 <warn@@Base+0x3cf8>
   4d880:	b	4d8e4 <warn@@Base+0x3cec>
   4d884:	b	4d8d8 <warn@@Base+0x3ce0>
   4d888:	b	4d8cc <warn@@Base+0x3cd4>
   4d88c:	b	4d8c0 <warn@@Base+0x3cc8>
   4d890:	b	4d8b4 <warn@@Base+0x3cbc>
   4d894:	b	4d8a8 <warn@@Base+0x3cb0>
   4d898:	b	4d89c <warn@@Base+0x3ca4>
   4d89c:	ldr	r0, [pc, #2088]	; 4e0cc <warn@@Base+0x44d4>
   4d8a0:	add	r0, pc, r0
   4d8a4:	bx	lr
   4d8a8:	ldr	r0, [pc, #2080]	; 4e0d0 <warn@@Base+0x44d8>
   4d8ac:	add	r0, pc, r0
   4d8b0:	bx	lr
   4d8b4:	ldr	r0, [pc, #2072]	; 4e0d4 <warn@@Base+0x44dc>
   4d8b8:	add	r0, pc, r0
   4d8bc:	bx	lr
   4d8c0:	ldr	r0, [pc, #2064]	; 4e0d8 <warn@@Base+0x44e0>
   4d8c4:	add	r0, pc, r0
   4d8c8:	bx	lr
   4d8cc:	ldr	r0, [pc, #2056]	; 4e0dc <warn@@Base+0x44e4>
   4d8d0:	add	r0, pc, r0
   4d8d4:	bx	lr
   4d8d8:	ldr	r0, [pc, #2048]	; 4e0e0 <warn@@Base+0x44e8>
   4d8dc:	add	r0, pc, r0
   4d8e0:	bx	lr
   4d8e4:	ldr	r0, [pc, #2040]	; 4e0e4 <warn@@Base+0x44ec>
   4d8e8:	add	r0, pc, r0
   4d8ec:	bx	lr
   4d8f0:	ldr	r0, [pc, #2032]	; 4e0e8 <warn@@Base+0x44f0>
   4d8f4:	add	r0, pc, r0
   4d8f8:	bx	lr
   4d8fc:	ldr	r0, [pc, #2024]	; 4e0ec <warn@@Base+0x44f4>
   4d900:	add	r0, pc, r0
   4d904:	bx	lr
   4d908:	ldr	r0, [pc, #2016]	; 4e0f0 <warn@@Base+0x44f8>
   4d90c:	add	r0, pc, r0
   4d910:	bx	lr
   4d914:	ldr	r0, [pc, #2008]	; 4e0f4 <warn@@Base+0x44fc>
   4d918:	add	r0, pc, r0
   4d91c:	bx	lr
   4d920:	ldr	r0, [pc, #2000]	; 4e0f8 <warn@@Base+0x4500>
   4d924:	add	r0, pc, r0
   4d928:	bx	lr
   4d92c:	ldr	r0, [pc, #1992]	; 4e0fc <warn@@Base+0x4504>
   4d930:	add	r0, pc, r0
   4d934:	bx	lr
   4d938:	ldr	r0, [pc, #1984]	; 4e100 <warn@@Base+0x4508>
   4d93c:	add	r0, pc, r0
   4d940:	bx	lr
   4d944:	ldr	r0, [pc, #1976]	; 4e104 <warn@@Base+0x450c>
   4d948:	add	r0, pc, r0
   4d94c:	bx	lr
   4d950:	ldr	r0, [pc, #1968]	; 4e108 <warn@@Base+0x4510>
   4d954:	add	r0, pc, r0
   4d958:	bx	lr
   4d95c:	ldr	r0, [pc, #1960]	; 4e10c <warn@@Base+0x4514>
   4d960:	add	r0, pc, r0
   4d964:	bx	lr
   4d968:	ldr	r0, [pc, #1952]	; 4e110 <warn@@Base+0x4518>
   4d96c:	add	r0, pc, r0
   4d970:	bx	lr
   4d974:	ldr	r0, [pc, #1944]	; 4e114 <warn@@Base+0x451c>
   4d978:	add	r0, pc, r0
   4d97c:	bx	lr
   4d980:	ldr	r0, [pc, #1936]	; 4e118 <warn@@Base+0x4520>
   4d984:	add	r0, pc, r0
   4d988:	bx	lr
   4d98c:	ldr	r0, [pc, #1928]	; 4e11c <warn@@Base+0x4524>
   4d990:	add	r0, pc, r0
   4d994:	bx	lr
   4d998:	ldr	r0, [pc, #1920]	; 4e120 <warn@@Base+0x4528>
   4d99c:	add	r0, pc, r0
   4d9a0:	bx	lr
   4d9a4:	ldr	r0, [pc, #1912]	; 4e124 <warn@@Base+0x452c>
   4d9a8:	add	r0, pc, r0
   4d9ac:	bx	lr
   4d9b0:	ldr	r0, [pc, #1904]	; 4e128 <warn@@Base+0x4530>
   4d9b4:	add	r0, pc, r0
   4d9b8:	bx	lr
   4d9bc:	ldr	r0, [pc, #1896]	; 4e12c <warn@@Base+0x4534>
   4d9c0:	add	r0, pc, r0
   4d9c4:	bx	lr
   4d9c8:	ldr	r0, [pc, #1888]	; 4e130 <warn@@Base+0x4538>
   4d9cc:	add	r0, pc, r0
   4d9d0:	bx	lr
   4d9d4:	ldr	r0, [pc, #1880]	; 4e134 <warn@@Base+0x453c>
   4d9d8:	add	r0, pc, r0
   4d9dc:	bx	lr
   4d9e0:	ldr	r0, [pc, #1872]	; 4e138 <warn@@Base+0x4540>
   4d9e4:	add	r0, pc, r0
   4d9e8:	bx	lr
   4d9ec:	ldr	r0, [pc, #1864]	; 4e13c <warn@@Base+0x4544>
   4d9f0:	add	r0, pc, r0
   4d9f4:	bx	lr
   4d9f8:	ldr	r0, [pc, #1856]	; 4e140 <warn@@Base+0x4548>
   4d9fc:	add	r0, pc, r0
   4da00:	bx	lr
   4da04:	ldr	r0, [pc, #1848]	; 4e144 <warn@@Base+0x454c>
   4da08:	add	r0, pc, r0
   4da0c:	bx	lr
   4da10:	ldr	r0, [pc, #1840]	; 4e148 <warn@@Base+0x4550>
   4da14:	add	r0, pc, r0
   4da18:	bx	lr
   4da1c:	ldr	r0, [pc, #1832]	; 4e14c <warn@@Base+0x4554>
   4da20:	add	r0, pc, r0
   4da24:	bx	lr
   4da28:	ldr	r0, [pc, #1824]	; 4e150 <warn@@Base+0x4558>
   4da2c:	add	r0, pc, r0
   4da30:	bx	lr
   4da34:	ldr	r0, [pc, #1816]	; 4e154 <warn@@Base+0x455c>
   4da38:	add	r0, pc, r0
   4da3c:	bx	lr
   4da40:	ldr	r0, [pc, #1808]	; 4e158 <warn@@Base+0x4560>
   4da44:	add	r0, pc, r0
   4da48:	bx	lr
   4da4c:	ldr	r0, [pc, #1800]	; 4e15c <warn@@Base+0x4564>
   4da50:	add	r0, pc, r0
   4da54:	bx	lr
   4da58:	ldr	r0, [pc, #1792]	; 4e160 <warn@@Base+0x4568>
   4da5c:	add	r0, pc, r0
   4da60:	bx	lr
   4da64:	ldr	r0, [pc, #1784]	; 4e164 <warn@@Base+0x456c>
   4da68:	add	r0, pc, r0
   4da6c:	bx	lr
   4da70:	ldr	r0, [pc, #1776]	; 4e168 <warn@@Base+0x4570>
   4da74:	add	r0, pc, r0
   4da78:	bx	lr
   4da7c:	ldr	r0, [pc, #1768]	; 4e16c <warn@@Base+0x4574>
   4da80:	add	r0, pc, r0
   4da84:	bx	lr
   4da88:	ldr	r0, [pc, #1760]	; 4e170 <warn@@Base+0x4578>
   4da8c:	add	r0, pc, r0
   4da90:	bx	lr
   4da94:	ldr	r0, [pc, #1752]	; 4e174 <warn@@Base+0x457c>
   4da98:	add	r0, pc, r0
   4da9c:	bx	lr
   4daa0:	ldr	r0, [pc, #1744]	; 4e178 <warn@@Base+0x4580>
   4daa4:	add	r0, pc, r0
   4daa8:	bx	lr
   4daac:	ldr	r0, [pc, #1736]	; 4e17c <warn@@Base+0x4584>
   4dab0:	add	r0, pc, r0
   4dab4:	bx	lr
   4dab8:	ldr	r0, [pc, #1728]	; 4e180 <warn@@Base+0x4588>
   4dabc:	add	r0, pc, r0
   4dac0:	bx	lr
   4dac4:	ldr	r0, [pc, #1720]	; 4e184 <warn@@Base+0x458c>
   4dac8:	add	r0, pc, r0
   4dacc:	bx	lr
   4dad0:	ldr	r0, [pc, #1712]	; 4e188 <warn@@Base+0x4590>
   4dad4:	add	r0, pc, r0
   4dad8:	bx	lr
   4dadc:	ldr	r0, [pc, #1704]	; 4e18c <warn@@Base+0x4594>
   4dae0:	add	r0, pc, r0
   4dae4:	bx	lr
   4dae8:	ldr	r0, [pc, #1696]	; 4e190 <warn@@Base+0x4598>
   4daec:	add	r0, pc, r0
   4daf0:	bx	lr
   4daf4:	ldr	r0, [pc, #1688]	; 4e194 <warn@@Base+0x459c>
   4daf8:	add	r0, pc, r0
   4dafc:	bx	lr
   4db00:	ldr	r0, [pc, #1680]	; 4e198 <warn@@Base+0x45a0>
   4db04:	add	r0, pc, r0
   4db08:	bx	lr
   4db0c:	ldr	r0, [pc, #1672]	; 4e19c <warn@@Base+0x45a4>
   4db10:	add	r0, pc, r0
   4db14:	bx	lr
   4db18:	ldr	r0, [pc, #1664]	; 4e1a0 <warn@@Base+0x45a8>
   4db1c:	add	r0, pc, r0
   4db20:	bx	lr
   4db24:	ldr	r0, [pc, #1656]	; 4e1a4 <warn@@Base+0x45ac>
   4db28:	add	r0, pc, r0
   4db2c:	bx	lr
   4db30:	ldr	r0, [pc, #1648]	; 4e1a8 <warn@@Base+0x45b0>
   4db34:	add	r0, pc, r0
   4db38:	bx	lr
   4db3c:	ldr	r0, [pc, #1640]	; 4e1ac <warn@@Base+0x45b4>
   4db40:	add	r0, pc, r0
   4db44:	bx	lr
   4db48:	ldr	r0, [pc, #1632]	; 4e1b0 <warn@@Base+0x45b8>
   4db4c:	add	r0, pc, r0
   4db50:	bx	lr
   4db54:	ldr	r0, [pc, #1624]	; 4e1b4 <warn@@Base+0x45bc>
   4db58:	add	r0, pc, r0
   4db5c:	bx	lr
   4db60:	ldr	r0, [pc, #1616]	; 4e1b8 <warn@@Base+0x45c0>
   4db64:	add	r0, pc, r0
   4db68:	bx	lr
   4db6c:	ldr	r0, [pc, #1608]	; 4e1bc <warn@@Base+0x45c4>
   4db70:	add	r0, pc, r0
   4db74:	bx	lr
   4db78:	ldr	r0, [pc, #1600]	; 4e1c0 <warn@@Base+0x45c8>
   4db7c:	add	r0, pc, r0
   4db80:	bx	lr
   4db84:	ldr	r0, [pc, #1592]	; 4e1c4 <warn@@Base+0x45cc>
   4db88:	add	r0, pc, r0
   4db8c:	bx	lr
   4db90:	ldr	r0, [pc, #1584]	; 4e1c8 <warn@@Base+0x45d0>
   4db94:	add	r0, pc, r0
   4db98:	bx	lr
   4db9c:	ldr	r0, [pc, #1576]	; 4e1cc <warn@@Base+0x45d4>
   4dba0:	add	r0, pc, r0
   4dba4:	bx	lr
   4dba8:	ldr	r0, [pc, #1568]	; 4e1d0 <warn@@Base+0x45d8>
   4dbac:	add	r0, pc, r0
   4dbb0:	bx	lr
   4dbb4:	ldr	r0, [pc, #1560]	; 4e1d4 <warn@@Base+0x45dc>
   4dbb8:	add	r0, pc, r0
   4dbbc:	bx	lr
   4dbc0:	ldr	r0, [pc, #1552]	; 4e1d8 <warn@@Base+0x45e0>
   4dbc4:	add	r0, pc, r0
   4dbc8:	bx	lr
   4dbcc:	ldr	r0, [pc, #1544]	; 4e1dc <warn@@Base+0x45e4>
   4dbd0:	add	r0, pc, r0
   4dbd4:	bx	lr
   4dbd8:	ldr	r0, [pc, #1536]	; 4e1e0 <warn@@Base+0x45e8>
   4dbdc:	add	r0, pc, r0
   4dbe0:	bx	lr
   4dbe4:	ldr	r0, [pc, #1528]	; 4e1e4 <warn@@Base+0x45ec>
   4dbe8:	add	r0, pc, r0
   4dbec:	bx	lr
   4dbf0:	ldr	r0, [pc, #1520]	; 4e1e8 <warn@@Base+0x45f0>
   4dbf4:	add	r0, pc, r0
   4dbf8:	bx	lr
   4dbfc:	ldr	r0, [pc, #1512]	; 4e1ec <warn@@Base+0x45f4>
   4dc00:	add	r0, pc, r0
   4dc04:	bx	lr
   4dc08:	ldr	r0, [pc, #1504]	; 4e1f0 <warn@@Base+0x45f8>
   4dc0c:	add	r0, pc, r0
   4dc10:	bx	lr
   4dc14:	ldr	r0, [pc, #1496]	; 4e1f4 <warn@@Base+0x45fc>
   4dc18:	add	r0, pc, r0
   4dc1c:	bx	lr
   4dc20:	ldr	r0, [pc, #1488]	; 4e1f8 <warn@@Base+0x4600>
   4dc24:	add	r0, pc, r0
   4dc28:	bx	lr
   4dc2c:	ldr	r0, [pc, #1480]	; 4e1fc <warn@@Base+0x4604>
   4dc30:	add	r0, pc, r0
   4dc34:	bx	lr
   4dc38:	ldr	r0, [pc, #1472]	; 4e200 <warn@@Base+0x4608>
   4dc3c:	add	r0, pc, r0
   4dc40:	bx	lr
   4dc44:	ldr	r0, [pc, #1464]	; 4e204 <warn@@Base+0x460c>
   4dc48:	add	r0, pc, r0
   4dc4c:	bx	lr
   4dc50:	ldr	r0, [pc, #1456]	; 4e208 <warn@@Base+0x4610>
   4dc54:	add	r0, pc, r0
   4dc58:	bx	lr
   4dc5c:	ldr	r0, [pc, #1448]	; 4e20c <warn@@Base+0x4614>
   4dc60:	add	r0, pc, r0
   4dc64:	bx	lr
   4dc68:	ldr	r0, [pc, #1440]	; 4e210 <warn@@Base+0x4618>
   4dc6c:	add	r0, pc, r0
   4dc70:	bx	lr
   4dc74:	ldr	r0, [pc, #1432]	; 4e214 <warn@@Base+0x461c>
   4dc78:	add	r0, pc, r0
   4dc7c:	bx	lr
   4dc80:	ldr	r0, [pc, #1424]	; 4e218 <warn@@Base+0x4620>
   4dc84:	add	r0, pc, r0
   4dc88:	bx	lr
   4dc8c:	ldr	r0, [pc, #1416]	; 4e21c <warn@@Base+0x4624>
   4dc90:	add	r0, pc, r0
   4dc94:	bx	lr
   4dc98:	ldr	r0, [pc, #1408]	; 4e220 <warn@@Base+0x4628>
   4dc9c:	add	r0, pc, r0
   4dca0:	bx	lr
   4dca4:	ldr	r0, [pc, #1400]	; 4e224 <warn@@Base+0x462c>
   4dca8:	add	r0, pc, r0
   4dcac:	bx	lr
   4dcb0:	ldr	r0, [pc, #1392]	; 4e228 <warn@@Base+0x4630>
   4dcb4:	add	r0, pc, r0
   4dcb8:	bx	lr
   4dcbc:	ldr	r0, [pc, #1384]	; 4e22c <warn@@Base+0x4634>
   4dcc0:	add	r0, pc, r0
   4dcc4:	bx	lr
   4dcc8:	ldr	r0, [pc, #1376]	; 4e230 <warn@@Base+0x4638>
   4dccc:	add	r0, pc, r0
   4dcd0:	bx	lr
   4dcd4:	ldr	r0, [pc, #1368]	; 4e234 <warn@@Base+0x463c>
   4dcd8:	add	r0, pc, r0
   4dcdc:	bx	lr
   4dce0:	ldr	r0, [pc, #1360]	; 4e238 <warn@@Base+0x4640>
   4dce4:	add	r0, pc, r0
   4dce8:	bx	lr
   4dcec:	ldr	r0, [pc, #1352]	; 4e23c <warn@@Base+0x4644>
   4dcf0:	add	r0, pc, r0
   4dcf4:	bx	lr
   4dcf8:	ldr	r0, [pc, #1344]	; 4e240 <warn@@Base+0x4648>
   4dcfc:	add	r0, pc, r0
   4dd00:	bx	lr
   4dd04:	ldr	r0, [pc, #1336]	; 4e244 <warn@@Base+0x464c>
   4dd08:	add	r0, pc, r0
   4dd0c:	bx	lr
   4dd10:	ldr	r0, [pc, #1328]	; 4e248 <warn@@Base+0x4650>
   4dd14:	add	r0, pc, r0
   4dd18:	bx	lr
   4dd1c:	ldr	r0, [pc, #1320]	; 4e24c <warn@@Base+0x4654>
   4dd20:	add	r0, pc, r0
   4dd24:	bx	lr
   4dd28:	ldr	r0, [pc, #1312]	; 4e250 <warn@@Base+0x4658>
   4dd2c:	add	r0, pc, r0
   4dd30:	bx	lr
   4dd34:	ldr	r0, [pc, #1304]	; 4e254 <warn@@Base+0x465c>
   4dd38:	add	r0, pc, r0
   4dd3c:	bx	lr
   4dd40:	ldr	r0, [pc, #1296]	; 4e258 <warn@@Base+0x4660>
   4dd44:	add	r0, pc, r0
   4dd48:	bx	lr
   4dd4c:	ldr	r0, [pc, #1288]	; 4e25c <warn@@Base+0x4664>
   4dd50:	add	r0, pc, r0
   4dd54:	bx	lr
   4dd58:	ldr	r0, [pc, #1280]	; 4e260 <warn@@Base+0x4668>
   4dd5c:	add	r0, pc, r0
   4dd60:	bx	lr
   4dd64:	ldr	r0, [pc, #1272]	; 4e264 <warn@@Base+0x466c>
   4dd68:	add	r0, pc, r0
   4dd6c:	bx	lr
   4dd70:	ldr	r0, [pc, #1264]	; 4e268 <warn@@Base+0x4670>
   4dd74:	add	r0, pc, r0
   4dd78:	bx	lr
   4dd7c:	ldr	r0, [pc, #1256]	; 4e26c <warn@@Base+0x4674>
   4dd80:	add	r0, pc, r0
   4dd84:	bx	lr
   4dd88:	ldr	r0, [pc, #1248]	; 4e270 <warn@@Base+0x4678>
   4dd8c:	add	r0, pc, r0
   4dd90:	bx	lr
   4dd94:	ldr	r0, [pc, #1240]	; 4e274 <warn@@Base+0x467c>
   4dd98:	add	r0, pc, r0
   4dd9c:	bx	lr
   4dda0:	ldr	r0, [pc, #1232]	; 4e278 <warn@@Base+0x4680>
   4dda4:	add	r0, pc, r0
   4dda8:	bx	lr
   4ddac:	ldr	r0, [pc, #1224]	; 4e27c <warn@@Base+0x4684>
   4ddb0:	add	r0, pc, r0
   4ddb4:	bx	lr
   4ddb8:	ldr	r0, [pc, #1216]	; 4e280 <warn@@Base+0x4688>
   4ddbc:	add	r0, pc, r0
   4ddc0:	bx	lr
   4ddc4:	ldr	r0, [pc, #1208]	; 4e284 <warn@@Base+0x468c>
   4ddc8:	add	r0, pc, r0
   4ddcc:	bx	lr
   4ddd0:	ldr	r0, [pc, #1200]	; 4e288 <warn@@Base+0x4690>
   4ddd4:	add	r0, pc, r0
   4ddd8:	bx	lr
   4dddc:	ldr	r0, [pc, #1192]	; 4e28c <warn@@Base+0x4694>
   4dde0:	add	r0, pc, r0
   4dde4:	bx	lr
   4dde8:	ldr	r0, [pc, #1184]	; 4e290 <warn@@Base+0x4698>
   4ddec:	add	r0, pc, r0
   4ddf0:	bx	lr
   4ddf4:	ldr	r0, [pc, #1176]	; 4e294 <warn@@Base+0x469c>
   4ddf8:	add	r0, pc, r0
   4ddfc:	bx	lr
   4de00:	ldr	r0, [pc, #1168]	; 4e298 <warn@@Base+0x46a0>
   4de04:	add	r0, pc, r0
   4de08:	bx	lr
   4de0c:	ldr	r0, [pc, #1160]	; 4e29c <warn@@Base+0x46a4>
   4de10:	add	r0, pc, r0
   4de14:	bx	lr
   4de18:	ldr	r0, [pc, #1152]	; 4e2a0 <warn@@Base+0x46a8>
   4de1c:	add	r0, pc, r0
   4de20:	bx	lr
   4de24:	ldr	r0, [pc, #1144]	; 4e2a4 <warn@@Base+0x46ac>
   4de28:	add	r0, pc, r0
   4de2c:	bx	lr
   4de30:	ldr	r0, [pc, #1136]	; 4e2a8 <warn@@Base+0x46b0>
   4de34:	add	r0, pc, r0
   4de38:	bx	lr
   4de3c:	ldr	r0, [pc, #1128]	; 4e2ac <warn@@Base+0x46b4>
   4de40:	add	r0, pc, r0
   4de44:	bx	lr
   4de48:	ldr	r0, [pc, #1120]	; 4e2b0 <warn@@Base+0x46b8>
   4de4c:	add	r0, pc, r0
   4de50:	bx	lr
   4de54:	ldr	r0, [pc, #1112]	; 4e2b4 <warn@@Base+0x46bc>
   4de58:	add	r0, pc, r0
   4de5c:	bx	lr
   4de60:	ldr	r0, [pc, #1104]	; 4e2b8 <warn@@Base+0x46c0>
   4de64:	add	r0, pc, r0
   4de68:	bx	lr
   4de6c:	ldr	r0, [pc, #1096]	; 4e2bc <warn@@Base+0x46c4>
   4de70:	add	r0, pc, r0
   4de74:	bx	lr
   4de78:	ldr	r0, [pc, #1088]	; 4e2c0 <warn@@Base+0x46c8>
   4de7c:	add	r0, pc, r0
   4de80:	bx	lr
   4de84:	ldr	r0, [pc, #1080]	; 4e2c4 <warn@@Base+0x46cc>
   4de88:	add	r0, pc, r0
   4de8c:	bx	lr
   4de90:	ldr	r0, [pc, #1072]	; 4e2c8 <warn@@Base+0x46d0>
   4de94:	add	r0, pc, r0
   4de98:	bx	lr
   4de9c:	ldr	r0, [pc, #1064]	; 4e2cc <warn@@Base+0x46d4>
   4dea0:	add	r0, pc, r0
   4dea4:	bx	lr
   4dea8:	ldr	r0, [pc, #1056]	; 4e2d0 <warn@@Base+0x46d8>
   4deac:	add	r0, pc, r0
   4deb0:	bx	lr
   4deb4:	ldr	r0, [pc, #1048]	; 4e2d4 <warn@@Base+0x46dc>
   4deb8:	add	r0, pc, r0
   4debc:	bx	lr
   4dec0:	ldr	r0, [pc, #1040]	; 4e2d8 <warn@@Base+0x46e0>
   4dec4:	add	r0, pc, r0
   4dec8:	bx	lr
   4decc:	ldr	r0, [pc, #1032]	; 4e2dc <warn@@Base+0x46e4>
   4ded0:	add	r0, pc, r0
   4ded4:	bx	lr
   4ded8:	ldr	r0, [pc, #1024]	; 4e2e0 <warn@@Base+0x46e8>
   4dedc:	add	r0, pc, r0
   4dee0:	bx	lr
   4dee4:	ldr	r0, [pc, #1016]	; 4e2e4 <warn@@Base+0x46ec>
   4dee8:	add	r0, pc, r0
   4deec:	bx	lr
   4def0:	ldr	r0, [pc, #1008]	; 4e2e8 <warn@@Base+0x46f0>
   4def4:	add	r0, pc, r0
   4def8:	bx	lr
   4defc:	ldr	r0, [pc, #1000]	; 4e2ec <warn@@Base+0x46f4>
   4df00:	add	r0, pc, r0
   4df04:	bx	lr
   4df08:	ldr	r0, [pc, #992]	; 4e2f0 <warn@@Base+0x46f8>
   4df0c:	add	r0, pc, r0
   4df10:	bx	lr
   4df14:	ldr	r0, [pc, #984]	; 4e2f4 <warn@@Base+0x46fc>
   4df18:	add	r0, pc, r0
   4df1c:	bx	lr
   4df20:	ldr	r0, [pc, #976]	; 4e2f8 <warn@@Base+0x4700>
   4df24:	add	r0, pc, r0
   4df28:	bx	lr
   4df2c:	ldr	r0, [pc, #968]	; 4e2fc <warn@@Base+0x4704>
   4df30:	add	r0, pc, r0
   4df34:	bx	lr
   4df38:	ldr	r0, [pc, #960]	; 4e300 <warn@@Base+0x4708>
   4df3c:	add	r0, pc, r0
   4df40:	bx	lr
   4df44:	ldr	r0, [pc, #952]	; 4e304 <warn@@Base+0x470c>
   4df48:	add	r0, pc, r0
   4df4c:	bx	lr
   4df50:	ldr	r0, [pc, #944]	; 4e308 <warn@@Base+0x4710>
   4df54:	add	r0, pc, r0
   4df58:	bx	lr
   4df5c:	ldr	r0, [pc, #936]	; 4e30c <warn@@Base+0x4714>
   4df60:	add	r0, pc, r0
   4df64:	bx	lr
   4df68:	ldr	r0, [pc, #928]	; 4e310 <warn@@Base+0x4718>
   4df6c:	add	r0, pc, r0
   4df70:	bx	lr
   4df74:	ldr	r0, [pc, #920]	; 4e314 <warn@@Base+0x471c>
   4df78:	add	r0, pc, r0
   4df7c:	bx	lr
   4df80:	ldr	r0, [pc, #912]	; 4e318 <warn@@Base+0x4720>
   4df84:	add	r0, pc, r0
   4df88:	bx	lr
   4df8c:	ldr	r0, [pc, #904]	; 4e31c <warn@@Base+0x4724>
   4df90:	add	r0, pc, r0
   4df94:	bx	lr
   4df98:	ldr	r0, [pc, #896]	; 4e320 <warn@@Base+0x4728>
   4df9c:	add	r0, pc, r0
   4dfa0:	bx	lr
   4dfa4:	ldr	r0, [pc, #888]	; 4e324 <warn@@Base+0x472c>
   4dfa8:	add	r0, pc, r0
   4dfac:	bx	lr
   4dfb0:	ldr	r0, [pc, #880]	; 4e328 <warn@@Base+0x4730>
   4dfb4:	add	r0, pc, r0
   4dfb8:	bx	lr
   4dfbc:	ldr	r0, [pc, #872]	; 4e32c <warn@@Base+0x4734>
   4dfc0:	add	r0, pc, r0
   4dfc4:	bx	lr
   4dfc8:	ldr	r0, [pc, #864]	; 4e330 <warn@@Base+0x4738>
   4dfcc:	add	r0, pc, r0
   4dfd0:	bx	lr
   4dfd4:	ldr	r0, [pc, #856]	; 4e334 <warn@@Base+0x473c>
   4dfd8:	add	r0, pc, r0
   4dfdc:	bx	lr
   4dfe0:	ldr	r0, [pc, #848]	; 4e338 <warn@@Base+0x4740>
   4dfe4:	add	r0, pc, r0
   4dfe8:	bx	lr
   4dfec:	ldr	r0, [pc, #840]	; 4e33c <warn@@Base+0x4744>
   4dff0:	add	r0, pc, r0
   4dff4:	bx	lr
   4dff8:	ldr	r0, [pc, #832]	; 4e340 <warn@@Base+0x4748>
   4dffc:	add	r0, pc, r0
   4e000:	bx	lr
   4e004:	ldr	r0, [pc, #824]	; 4e344 <warn@@Base+0x474c>
   4e008:	add	r0, pc, r0
   4e00c:	bx	lr
   4e010:	ldr	r0, [pc, #816]	; 4e348 <warn@@Base+0x4750>
   4e014:	add	r0, pc, r0
   4e018:	bx	lr
   4e01c:	ldr	r0, [pc, #808]	; 4e34c <warn@@Base+0x4754>
   4e020:	add	r0, pc, r0
   4e024:	bx	lr
   4e028:	ldr	r0, [pc, #800]	; 4e350 <warn@@Base+0x4758>
   4e02c:	add	r0, pc, r0
   4e030:	bx	lr
   4e034:	ldr	r0, [pc, #792]	; 4e354 <warn@@Base+0x475c>
   4e038:	add	r0, pc, r0
   4e03c:	bx	lr
   4e040:	ldr	r0, [pc, #784]	; 4e358 <warn@@Base+0x4760>
   4e044:	add	r0, pc, r0
   4e048:	bx	lr
   4e04c:	ldr	r0, [pc, #776]	; 4e35c <warn@@Base+0x4764>
   4e050:	add	r0, pc, r0
   4e054:	bx	lr
   4e058:	ldr	r0, [pc, #768]	; 4e360 <warn@@Base+0x4768>
   4e05c:	add	r0, pc, r0
   4e060:	bx	lr
   4e064:	ldr	r0, [pc, #760]	; 4e364 <warn@@Base+0x476c>
   4e068:	add	r0, pc, r0
   4e06c:	bx	lr
   4e070:	ldr	r0, [pc, #752]	; 4e368 <warn@@Base+0x4770>
   4e074:	add	r0, pc, r0
   4e078:	bx	lr
   4e07c:	ldr	r0, [pc, #744]	; 4e36c <warn@@Base+0x4774>
   4e080:	add	r0, pc, r0
   4e084:	bx	lr
   4e088:	ldr	r0, [pc, #736]	; 4e370 <warn@@Base+0x4778>
   4e08c:	add	r0, pc, r0
   4e090:	bx	lr
   4e094:	ldr	r0, [pc, #728]	; 4e374 <warn@@Base+0x477c>
   4e098:	add	r0, pc, r0
   4e09c:	bx	lr
   4e0a0:	ldr	r0, [pc, #720]	; 4e378 <warn@@Base+0x4780>
   4e0a4:	add	r0, pc, r0
   4e0a8:	bx	lr
   4e0ac:	ldr	r0, [pc, #712]	; 4e37c <warn@@Base+0x4784>
   4e0b0:	add	r0, pc, r0
   4e0b4:	bx	lr
   4e0b8:	ldr	r0, [pc, #704]	; 4e380 <warn@@Base+0x4788>
   4e0bc:	add	r0, pc, r0
   4e0c0:	bx	lr
   4e0c4:	mov	r0, #0
   4e0c8:	bx	lr
   4e0cc:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   4e0d0:	andeq	r0, r1, ip, lsr #1
   4e0d4:	andeq	r0, r1, r8, lsl #1
   4e0d8:	andeq	r0, r1, r4, rrx
   4e0dc:	andeq	r7, r0, r0, lsr r3
   4e0e0:	andeq	r0, r1, r8, lsr r0
   4e0e4:	andeq	r0, r1, r4, lsl r0
   4e0e8:	strdeq	pc, [r0], -r0
   4e0ec:	andeq	pc, r0, ip, asr #31
   4e0f0:	andeq	pc, r0, r8, lsr #31
   4e0f4:	andeq	pc, r0, r0, lsl #31
   4e0f8:	andeq	pc, r0, ip, asr pc	; <UNPREDICTABLE>
   4e0fc:	strheq	r7, [r0], -r8
   4e100:			; <UNDEFINED> instruction: 0x000072b4
   4e104:	muleq	r0, r0, r2
   4e108:	andeq	r7, r0, r0, ror r2
   4e10c:	andeq	r7, r0, r0, asr r2
   4e110:	andeq	r7, r0, r0, lsr r2
   4e114:	andeq	r7, r0, r0, lsl r2
   4e118:	andeq	pc, r0, r0, ror #29
   4e11c:	strdeq	r6, [r0], -ip
   4e120:	andeq	r7, r0, r4
   4e124:	andeq	pc, r0, ip, lsr #29
   4e128:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   4e12c:	andeq	r6, r0, r0, ror pc
   4e130:	andeq	pc, r0, r8, ror lr	; <UNPREDICTABLE>
   4e134:	andeq	pc, r0, r0, ror #28
   4e138:	andeq	pc, r0, r8, asr #28
   4e13c:	andeq	r6, r0, r4, asr #29
   4e140:	andeq	r6, r0, ip, lsr #29
   4e144:	andeq	pc, r0, r0, lsl lr	; <UNPREDICTABLE>
   4e148:	strdeq	pc, [r0], -r0
   4e14c:	ldrdeq	pc, [r0], -r8
   4e150:	andeq	pc, r0, r0, asr #27
   4e154:	andeq	pc, r0, r8, lsr #27
   4e158:	muleq	r0, r0, sp
   4e15c:	andeq	pc, r0, r4, ror sp	; <UNPREDICTABLE>
   4e160:	andeq	pc, r0, r8, asr sp	; <UNPREDICTABLE>
   4e164:	andeq	pc, r0, ip, lsr sp	; <UNPREDICTABLE>
   4e168:	andeq	pc, r0, r0, lsr #26
   4e16c:	andeq	pc, r0, r4, lsl #26
   4e170:	andeq	pc, r0, r8, ror #25
   4e174:	andeq	pc, r0, ip, asr #25
   4e178:			; <UNDEFINED> instruction: 0x0000fcb0
   4e17c:	muleq	r0, r4, ip
   4e180:	andeq	pc, r0, r8, ror ip	; <UNPREDICTABLE>
   4e184:	andeq	pc, r0, ip, asr ip	; <UNPREDICTABLE>
   4e188:	andeq	pc, r0, r0, asr #24
   4e18c:	andeq	pc, r0, r4, lsr #24
   4e190:	andeq	pc, r0, r8, lsl #24
   4e194:	andeq	pc, r0, ip, ror #23
   4e198:	ldrdeq	pc, [r0], -r0
   4e19c:			; <UNDEFINED> instruction: 0x0000fbb4
   4e1a0:	muleq	r0, r8, fp
   4e1a4:	andeq	pc, r0, ip, ror fp	; <UNPREDICTABLE>
   4e1a8:	andeq	pc, r0, r0, ror #22
   4e1ac:	andeq	pc, r0, r4, asr #22
   4e1b0:	andeq	pc, r0, r8, lsr #22
   4e1b4:	andeq	pc, r0, r0, lsl fp	; <UNPREDICTABLE>
   4e1b8:	strdeq	pc, [r0], -r8
   4e1bc:	andeq	pc, r0, r0, ror #21
   4e1c0:	andeq	pc, r0, r8, asr #21
   4e1c4:			; <UNDEFINED> instruction: 0x0000fab0
   4e1c8:	muleq	r0, r8, sl
   4e1cc:	andeq	pc, r0, r0, lsl #21
   4e1d0:	andeq	pc, r0, r8, ror #20
   4e1d4:	andeq	pc, r0, r0, asr sl	; <UNPREDICTABLE>
   4e1d8:	andeq	pc, r0, r8, lsr sl	; <UNPREDICTABLE>
   4e1dc:	andeq	pc, r0, r0, lsr #20
   4e1e0:	andeq	pc, r0, r8, lsl #20
   4e1e4:	strdeq	pc, [r0], -r0
   4e1e8:	ldrdeq	pc, [r0], -r8
   4e1ec:	andeq	pc, r0, r0, asr #19
   4e1f0:	andeq	pc, r0, r8, lsr #19
   4e1f4:	muleq	r0, r0, r9
   4e1f8:	andeq	pc, r0, r8, ror r9	; <UNPREDICTABLE>
   4e1fc:	andeq	pc, r0, r0, ror #18
   4e200:	andeq	pc, r0, r8, asr #18
   4e204:	andeq	pc, r0, r0, lsr r9	; <UNPREDICTABLE>
   4e208:	andeq	pc, r0, r8, lsl r9	; <UNPREDICTABLE>
   4e20c:	andeq	pc, r0, r0, lsl #18
   4e210:	andeq	pc, r0, r8, ror #17
   4e214:	ldrdeq	pc, [r0], -r0
   4e218:			; <UNDEFINED> instruction: 0x0000f8b8
   4e21c:	andeq	pc, r0, r0, lsr #17
   4e220:	andeq	pc, r0, r8, lsl #17
   4e224:	andeq	pc, r0, r0, ror r8	; <UNPREDICTABLE>
   4e228:	andeq	pc, r0, r8, asr r8	; <UNPREDICTABLE>
   4e22c:	andeq	pc, r0, r0, asr #16
   4e230:	andeq	pc, r0, r8, lsr #16
   4e234:	andeq	pc, r0, r0, lsl r8	; <UNPREDICTABLE>
   4e238:	strdeq	pc, [r0], -r8
   4e23c:	andeq	pc, r0, r0, ror #15
   4e240:	andeq	pc, r0, r8, asr #15
   4e244:			; <UNDEFINED> instruction: 0x0000f7b0
   4e248:	muleq	r0, r8, r7
   4e24c:	andeq	pc, r0, r0, lsl #15
   4e250:	andeq	pc, r0, r8, ror #14
   4e254:	andeq	pc, r0, r0, asr r7	; <UNPREDICTABLE>
   4e258:	andeq	pc, r0, r8, lsr r7	; <UNPREDICTABLE>
   4e25c:	andeq	pc, r0, r0, lsr #14
   4e260:	andeq	pc, r0, r8, lsl #14
   4e264:	strdeq	pc, [r0], -r0
   4e268:	ldrdeq	pc, [r0], -r8
   4e26c:	andeq	pc, r0, r0, asr #13
   4e270:	andeq	pc, r0, r8, lsr #13
   4e274:	muleq	r0, r0, r6
   4e278:	andeq	pc, r0, r8, ror r6	; <UNPREDICTABLE>
   4e27c:	andeq	pc, r0, r0, ror #12
   4e280:	andeq	pc, r0, r8, asr #12
   4e284:	andeq	pc, r0, r0, lsr r6	; <UNPREDICTABLE>
   4e288:	andeq	pc, r0, r8, lsl r6	; <UNPREDICTABLE>
   4e28c:	andeq	pc, r0, r0, lsl #12
   4e290:	andeq	pc, r0, r8, ror #11
   4e294:	ldrdeq	pc, [r0], -r0
   4e298:			; <UNDEFINED> instruction: 0x0000f5b8
   4e29c:	andeq	pc, r0, r0, lsr #11
   4e2a0:	andeq	pc, r0, r8, lsl #11
   4e2a4:	andeq	pc, r0, r0, ror r5	; <UNPREDICTABLE>
   4e2a8:	andeq	pc, r0, r8, asr r5	; <UNPREDICTABLE>
   4e2ac:	andeq	pc, r0, r0, asr #10
   4e2b0:	andeq	pc, r0, r8, lsr #10
   4e2b4:	andeq	pc, r0, r0, lsl r5	; <UNPREDICTABLE>
   4e2b8:	strdeq	pc, [r0], -r8
   4e2bc:	andeq	pc, r0, r0, ror #9
   4e2c0:	andeq	pc, r0, r8, asr #9
   4e2c4:			; <UNDEFINED> instruction: 0x0000f4b0
   4e2c8:	muleq	r0, r8, r4
   4e2cc:	andeq	pc, r0, r0, lsl #9
   4e2d0:	andeq	pc, r0, r8, ror #8
   4e2d4:	andeq	pc, r0, r0, asr r4	; <UNPREDICTABLE>
   4e2d8:	andeq	pc, r0, r8, lsr r4	; <UNPREDICTABLE>
   4e2dc:	andeq	pc, r0, r0, lsr #8
   4e2e0:	strdeq	r6, [r0], -ip
   4e2e4:	andeq	r6, r0, r4, ror #17
   4e2e8:	andeq	r6, r0, ip, asr #17
   4e2ec:			; <UNDEFINED> instruction: 0x000068b4
   4e2f0:	muleq	r0, ip, r8
   4e2f4:	andeq	r6, r0, r4, lsl #17
   4e2f8:	andeq	pc, r0, r0, asr #7
   4e2fc:	andeq	r6, r0, r0, asr r8
   4e300:	andeq	r6, r0, r8, lsr r8
   4e304:	andeq	r6, r0, r0, lsr #16
   4e308:	andeq	r6, r0, r8, lsl #16
   4e30c:	andeq	pc, r0, r0, ror r3	; <UNPREDICTABLE>
   4e310:	andeq	r6, r0, ip, asr #15
   4e314:			; <UNDEFINED> instruction: 0x000067b4
   4e318:	muleq	r0, ip, r7
   4e31c:	andeq	r6, r0, r4, lsl #15
   4e320:	andeq	r6, r0, ip, ror #14
   4e324:	andeq	r6, r0, r4, asr r7
   4e328:	andeq	r6, r0, ip, lsr r7
   4e32c:	andeq	r6, r0, r4, lsr #14
   4e330:	andeq	r6, r0, ip, lsl #14
   4e334:	strdeq	r6, [r0], -r4
   4e338:	ldrdeq	r6, [r0], -r8
   4e33c:	andeq	r6, r0, r0, asr #13
   4e340:	andeq	r6, r0, r8, lsr #13
   4e344:			; <UNDEFINED> instruction: 0x0000f2bc
   4e348:	andeq	r6, r0, r4, ror r6
   4e34c:	andeq	r6, r0, ip, asr r6
   4e350:	andeq	r6, r0, r4, asr #12
   4e354:	andeq	pc, r0, ip, ror r2	; <UNPREDICTABLE>
   4e358:	andeq	pc, r0, r0, ror #4
   4e35c:	andeq	pc, r0, r4, asr #4
   4e360:	andeq	pc, r0, r8, lsr #4
   4e364:	andeq	pc, r0, ip, lsl #4
   4e368:	strdeq	pc, [r0], -r0
   4e36c:	ldrdeq	pc, [r0], -r4
   4e370:			; <UNDEFINED> instruction: 0x0000f1b8
   4e374:	muleq	r0, ip, r1
   4e378:	andeq	pc, r0, r0, lsl #3
   4e37c:	andeq	r6, r0, r8, ror #9
   4e380:	andeq	pc, r0, ip, asr r1	; <UNPREDICTABLE>
   4e384:	cmp	r0, #144	; 0x90
   4e388:	addls	pc, pc, r0, lsl #2
   4e38c:	b	4e760 <warn@@Base+0x4b68>
   4e390:	b	4e5e0 <warn@@Base+0x49e8>
   4e394:	b	4e5d4 <warn@@Base+0x49dc>
   4e398:	b	4e754 <warn@@Base+0x4b5c>
   4e39c:	b	4e748 <warn@@Base+0x4b50>
   4e3a0:	b	4e73c <warn@@Base+0x4b44>
   4e3a4:	b	4e730 <warn@@Base+0x4b38>
   4e3a8:	b	4e724 <warn@@Base+0x4b2c>
   4e3ac:	b	4e718 <warn@@Base+0x4b20>
   4e3b0:	b	4e70c <warn@@Base+0x4b14>
   4e3b4:	b	4e700 <warn@@Base+0x4b08>
   4e3b8:	b	4e6f4 <warn@@Base+0x4afc>
   4e3bc:	b	4e6e8 <warn@@Base+0x4af0>
   4e3c0:	b	4e6dc <warn@@Base+0x4ae4>
   4e3c4:	b	4e6d0 <warn@@Base+0x4ad8>
   4e3c8:	b	4e6c4 <warn@@Base+0x4acc>
   4e3cc:	b	4e6b8 <warn@@Base+0x4ac0>
   4e3d0:	b	4e6ac <warn@@Base+0x4ab4>
   4e3d4:	b	4e760 <warn@@Base+0x4b68>
   4e3d8:	b	4e760 <warn@@Base+0x4b68>
   4e3dc:	b	4e760 <warn@@Base+0x4b68>
   4e3e0:	b	4e760 <warn@@Base+0x4b68>
   4e3e4:	b	4e760 <warn@@Base+0x4b68>
   4e3e8:	b	4e760 <warn@@Base+0x4b68>
   4e3ec:	b	4e760 <warn@@Base+0x4b68>
   4e3f0:	b	4e760 <warn@@Base+0x4b68>
   4e3f4:	b	4e760 <warn@@Base+0x4b68>
   4e3f8:	b	4e760 <warn@@Base+0x4b68>
   4e3fc:	b	4e760 <warn@@Base+0x4b68>
   4e400:	b	4e760 <warn@@Base+0x4b68>
   4e404:	b	4e760 <warn@@Base+0x4b68>
   4e408:	b	4e760 <warn@@Base+0x4b68>
   4e40c:	b	4e760 <warn@@Base+0x4b68>
   4e410:	b	4e760 <warn@@Base+0x4b68>
   4e414:	b	4e760 <warn@@Base+0x4b68>
   4e418:	b	4e760 <warn@@Base+0x4b68>
   4e41c:	b	4e760 <warn@@Base+0x4b68>
   4e420:	b	4e760 <warn@@Base+0x4b68>
   4e424:	b	4e760 <warn@@Base+0x4b68>
   4e428:	b	4e760 <warn@@Base+0x4b68>
   4e42c:	b	4e760 <warn@@Base+0x4b68>
   4e430:	b	4e760 <warn@@Base+0x4b68>
   4e434:	b	4e760 <warn@@Base+0x4b68>
   4e438:	b	4e760 <warn@@Base+0x4b68>
   4e43c:	b	4e760 <warn@@Base+0x4b68>
   4e440:	b	4e760 <warn@@Base+0x4b68>
   4e444:	b	4e760 <warn@@Base+0x4b68>
   4e448:	b	4e760 <warn@@Base+0x4b68>
   4e44c:	b	4e760 <warn@@Base+0x4b68>
   4e450:	b	4e760 <warn@@Base+0x4b68>
   4e454:	b	4e760 <warn@@Base+0x4b68>
   4e458:	b	4e760 <warn@@Base+0x4b68>
   4e45c:	b	4e760 <warn@@Base+0x4b68>
   4e460:	b	4e760 <warn@@Base+0x4b68>
   4e464:	b	4e760 <warn@@Base+0x4b68>
   4e468:	b	4e760 <warn@@Base+0x4b68>
   4e46c:	b	4e760 <warn@@Base+0x4b68>
   4e470:	b	4e760 <warn@@Base+0x4b68>
   4e474:	b	4e760 <warn@@Base+0x4b68>
   4e478:	b	4e760 <warn@@Base+0x4b68>
   4e47c:	b	4e760 <warn@@Base+0x4b68>
   4e480:	b	4e760 <warn@@Base+0x4b68>
   4e484:	b	4e760 <warn@@Base+0x4b68>
   4e488:	b	4e760 <warn@@Base+0x4b68>
   4e48c:	b	4e760 <warn@@Base+0x4b68>
   4e490:	b	4e760 <warn@@Base+0x4b68>
   4e494:	b	4e760 <warn@@Base+0x4b68>
   4e498:	b	4e760 <warn@@Base+0x4b68>
   4e49c:	b	4e760 <warn@@Base+0x4b68>
   4e4a0:	b	4e760 <warn@@Base+0x4b68>
   4e4a4:	b	4e760 <warn@@Base+0x4b68>
   4e4a8:	b	4e760 <warn@@Base+0x4b68>
   4e4ac:	b	4e760 <warn@@Base+0x4b68>
   4e4b0:	b	4e760 <warn@@Base+0x4b68>
   4e4b4:	b	4e760 <warn@@Base+0x4b68>
   4e4b8:	b	4e760 <warn@@Base+0x4b68>
   4e4bc:	b	4e760 <warn@@Base+0x4b68>
   4e4c0:	b	4e760 <warn@@Base+0x4b68>
   4e4c4:	b	4e760 <warn@@Base+0x4b68>
   4e4c8:	b	4e760 <warn@@Base+0x4b68>
   4e4cc:	b	4e760 <warn@@Base+0x4b68>
   4e4d0:	b	4e760 <warn@@Base+0x4b68>
   4e4d4:	b	4e760 <warn@@Base+0x4b68>
   4e4d8:	b	4e760 <warn@@Base+0x4b68>
   4e4dc:	b	4e760 <warn@@Base+0x4b68>
   4e4e0:	b	4e760 <warn@@Base+0x4b68>
   4e4e4:	b	4e760 <warn@@Base+0x4b68>
   4e4e8:	b	4e760 <warn@@Base+0x4b68>
   4e4ec:	b	4e760 <warn@@Base+0x4b68>
   4e4f0:	b	4e760 <warn@@Base+0x4b68>
   4e4f4:	b	4e760 <warn@@Base+0x4b68>
   4e4f8:	b	4e760 <warn@@Base+0x4b68>
   4e4fc:	b	4e760 <warn@@Base+0x4b68>
   4e500:	b	4e760 <warn@@Base+0x4b68>
   4e504:	b	4e760 <warn@@Base+0x4b68>
   4e508:	b	4e760 <warn@@Base+0x4b68>
   4e50c:	b	4e760 <warn@@Base+0x4b68>
   4e510:	b	4e760 <warn@@Base+0x4b68>
   4e514:	b	4e760 <warn@@Base+0x4b68>
   4e518:	b	4e760 <warn@@Base+0x4b68>
   4e51c:	b	4e760 <warn@@Base+0x4b68>
   4e520:	b	4e760 <warn@@Base+0x4b68>
   4e524:	b	4e760 <warn@@Base+0x4b68>
   4e528:	b	4e760 <warn@@Base+0x4b68>
   4e52c:	b	4e760 <warn@@Base+0x4b68>
   4e530:	b	4e760 <warn@@Base+0x4b68>
   4e534:	b	4e760 <warn@@Base+0x4b68>
   4e538:	b	4e760 <warn@@Base+0x4b68>
   4e53c:	b	4e760 <warn@@Base+0x4b68>
   4e540:	b	4e760 <warn@@Base+0x4b68>
   4e544:	b	4e760 <warn@@Base+0x4b68>
   4e548:	b	4e760 <warn@@Base+0x4b68>
   4e54c:	b	4e760 <warn@@Base+0x4b68>
   4e550:	b	4e760 <warn@@Base+0x4b68>
   4e554:	b	4e760 <warn@@Base+0x4b68>
   4e558:	b	4e760 <warn@@Base+0x4b68>
   4e55c:	b	4e760 <warn@@Base+0x4b68>
   4e560:	b	4e760 <warn@@Base+0x4b68>
   4e564:	b	4e760 <warn@@Base+0x4b68>
   4e568:	b	4e760 <warn@@Base+0x4b68>
   4e56c:	b	4e760 <warn@@Base+0x4b68>
   4e570:	b	4e760 <warn@@Base+0x4b68>
   4e574:	b	4e760 <warn@@Base+0x4b68>
   4e578:	b	4e760 <warn@@Base+0x4b68>
   4e57c:	b	4e760 <warn@@Base+0x4b68>
   4e580:	b	4e760 <warn@@Base+0x4b68>
   4e584:	b	4e760 <warn@@Base+0x4b68>
   4e588:	b	4e760 <warn@@Base+0x4b68>
   4e58c:	b	4e760 <warn@@Base+0x4b68>
   4e590:	b	4e6a0 <warn@@Base+0x4aa8>
   4e594:	b	4e694 <warn@@Base+0x4a9c>
   4e598:	b	4e688 <warn@@Base+0x4a90>
   4e59c:	b	4e67c <warn@@Base+0x4a84>
   4e5a0:	b	4e670 <warn@@Base+0x4a78>
   4e5a4:	b	4e664 <warn@@Base+0x4a6c>
   4e5a8:	b	4e658 <warn@@Base+0x4a60>
   4e5ac:	b	4e760 <warn@@Base+0x4b68>
   4e5b0:	b	4e64c <warn@@Base+0x4a54>
   4e5b4:	b	4e640 <warn@@Base+0x4a48>
   4e5b8:	b	4e634 <warn@@Base+0x4a3c>
   4e5bc:	b	4e628 <warn@@Base+0x4a30>
   4e5c0:	b	4e61c <warn@@Base+0x4a24>
   4e5c4:	b	4e610 <warn@@Base+0x4a18>
   4e5c8:	b	4e604 <warn@@Base+0x4a0c>
   4e5cc:	b	4e5f8 <warn@@Base+0x4a00>
   4e5d0:	b	4e5ec <warn@@Base+0x49f4>
   4e5d4:	ldr	r0, [pc, #396]	; 4e768 <warn@@Base+0x4b70>
   4e5d8:	add	r0, pc, r0
   4e5dc:	bx	lr
   4e5e0:	ldr	r0, [pc, #388]	; 4e76c <warn@@Base+0x4b74>
   4e5e4:	add	r0, pc, r0
   4e5e8:	bx	lr
   4e5ec:	ldr	r0, [pc, #380]	; 4e770 <warn@@Base+0x4b78>
   4e5f0:	add	r0, pc, r0
   4e5f4:	bx	lr
   4e5f8:	ldr	r0, [pc, #372]	; 4e774 <warn@@Base+0x4b7c>
   4e5fc:	add	r0, pc, r0
   4e600:	bx	lr
   4e604:	ldr	r0, [pc, #364]	; 4e778 <warn@@Base+0x4b80>
   4e608:	add	r0, pc, r0
   4e60c:	bx	lr
   4e610:	ldr	r0, [pc, #356]	; 4e77c <warn@@Base+0x4b84>
   4e614:	add	r0, pc, r0
   4e618:	bx	lr
   4e61c:	ldr	r0, [pc, #348]	; 4e780 <warn@@Base+0x4b88>
   4e620:	add	r0, pc, r0
   4e624:	bx	lr
   4e628:	ldr	r0, [pc, #340]	; 4e784 <warn@@Base+0x4b8c>
   4e62c:	add	r0, pc, r0
   4e630:	bx	lr
   4e634:	ldr	r0, [pc, #332]	; 4e788 <warn@@Base+0x4b90>
   4e638:	add	r0, pc, r0
   4e63c:	bx	lr
   4e640:	ldr	r0, [pc, #324]	; 4e78c <warn@@Base+0x4b94>
   4e644:	add	r0, pc, r0
   4e648:	bx	lr
   4e64c:	ldr	r0, [pc, #316]	; 4e790 <warn@@Base+0x4b98>
   4e650:	add	r0, pc, r0
   4e654:	bx	lr
   4e658:	ldr	r0, [pc, #308]	; 4e794 <warn@@Base+0x4b9c>
   4e65c:	add	r0, pc, r0
   4e660:	bx	lr
   4e664:	ldr	r0, [pc, #300]	; 4e798 <warn@@Base+0x4ba0>
   4e668:	add	r0, pc, r0
   4e66c:	bx	lr
   4e670:	ldr	r0, [pc, #292]	; 4e79c <warn@@Base+0x4ba4>
   4e674:	add	r0, pc, r0
   4e678:	bx	lr
   4e67c:	ldr	r0, [pc, #284]	; 4e7a0 <warn@@Base+0x4ba8>
   4e680:	add	r0, pc, r0
   4e684:	bx	lr
   4e688:	ldr	r0, [pc, #276]	; 4e7a4 <warn@@Base+0x4bac>
   4e68c:	add	r0, pc, r0
   4e690:	bx	lr
   4e694:	ldr	r0, [pc, #268]	; 4e7a8 <warn@@Base+0x4bb0>
   4e698:	add	r0, pc, r0
   4e69c:	bx	lr
   4e6a0:	ldr	r0, [pc, #260]	; 4e7ac <warn@@Base+0x4bb4>
   4e6a4:	add	r0, pc, r0
   4e6a8:	bx	lr
   4e6ac:	ldr	r0, [pc, #252]	; 4e7b0 <warn@@Base+0x4bb8>
   4e6b0:	add	r0, pc, r0
   4e6b4:	bx	lr
   4e6b8:	ldr	r0, [pc, #244]	; 4e7b4 <warn@@Base+0x4bbc>
   4e6bc:	add	r0, pc, r0
   4e6c0:	bx	lr
   4e6c4:	ldr	r0, [pc, #236]	; 4e7b8 <warn@@Base+0x4bc0>
   4e6c8:	add	r0, pc, r0
   4e6cc:	bx	lr
   4e6d0:	ldr	r0, [pc, #228]	; 4e7bc <warn@@Base+0x4bc4>
   4e6d4:	add	r0, pc, r0
   4e6d8:	bx	lr
   4e6dc:	ldr	r0, [pc, #220]	; 4e7c0 <warn@@Base+0x4bc8>
   4e6e0:	add	r0, pc, r0
   4e6e4:	bx	lr
   4e6e8:	ldr	r0, [pc, #212]	; 4e7c4 <warn@@Base+0x4bcc>
   4e6ec:	add	r0, pc, r0
   4e6f0:	bx	lr
   4e6f4:	ldr	r0, [pc, #204]	; 4e7c8 <warn@@Base+0x4bd0>
   4e6f8:	add	r0, pc, r0
   4e6fc:	bx	lr
   4e700:	ldr	r0, [pc, #196]	; 4e7cc <warn@@Base+0x4bd4>
   4e704:	add	r0, pc, r0
   4e708:	bx	lr
   4e70c:	ldr	r0, [pc, #188]	; 4e7d0 <warn@@Base+0x4bd8>
   4e710:	add	r0, pc, r0
   4e714:	bx	lr
   4e718:	ldr	r0, [pc, #180]	; 4e7d4 <warn@@Base+0x4bdc>
   4e71c:	add	r0, pc, r0
   4e720:	bx	lr
   4e724:	ldr	r0, [pc, #172]	; 4e7d8 <warn@@Base+0x4be0>
   4e728:	add	r0, pc, r0
   4e72c:	bx	lr
   4e730:	ldr	r0, [pc, #164]	; 4e7dc <warn@@Base+0x4be4>
   4e734:	add	r0, pc, r0
   4e738:	bx	lr
   4e73c:	ldr	r0, [pc, #156]	; 4e7e0 <warn@@Base+0x4be8>
   4e740:	add	r0, pc, r0
   4e744:	bx	lr
   4e748:	ldr	r0, [pc, #148]	; 4e7e4 <warn@@Base+0x4bec>
   4e74c:	add	r0, pc, r0
   4e750:	bx	lr
   4e754:	ldr	r0, [pc, #140]	; 4e7e8 <warn@@Base+0x4bf0>
   4e758:	add	r0, pc, r0
   4e75c:	bx	lr
   4e760:	mov	r0, #0
   4e764:	bx	lr
   4e768:			; <UNDEFINED> instruction: 0x0000f3bc
   4e76c:	andeq	pc, r0, r4, lsr #7
   4e770:	andeq	pc, r0, r8, asr r6	; <UNPREDICTABLE>
   4e774:	andeq	pc, r0, r0, lsr r6	; <UNPREDICTABLE>
   4e778:	andeq	pc, r0, r8, lsl #12
   4e77c:	andeq	pc, r0, r4, ror #11
   4e780:	andeq	pc, r0, r4, asr #11
   4e784:	andeq	pc, r0, r0, lsr #11
   4e788:	andeq	pc, r0, r8, ror r5	; <UNPREDICTABLE>
   4e78c:	andeq	pc, r0, r4, asr r5	; <UNPREDICTABLE>
   4e790:	andeq	pc, r0, r4, lsr r5	; <UNPREDICTABLE>
   4e794:	andeq	pc, r0, r8, lsl #10
   4e798:	andeq	pc, r0, r0, ror #9
   4e79c:			; <UNDEFINED> instruction: 0x0000f4bc
   4e7a0:	muleq	r0, r4, r4
   4e7a4:	andeq	pc, r0, r4, ror r4	; <UNPREDICTABLE>
   4e7a8:	andeq	pc, r0, ip, asr #8
   4e7ac:	andeq	pc, r0, ip, lsr #8
   4e7b0:	andeq	pc, r0, r4, lsl r4	; <UNPREDICTABLE>
   4e7b4:	strdeq	pc, [r0], -r0
   4e7b8:	andeq	pc, r0, ip, asr #7
   4e7bc:	andeq	pc, r0, ip, lsr #7
   4e7c0:	muleq	r0, r0, r3
   4e7c4:	andeq	pc, r0, ip, ror #6
   4e7c8:	andeq	pc, r0, r8, asr #6
   4e7cc:	andeq	pc, r0, r4, lsr #6
   4e7d0:	andeq	pc, r0, r0, lsl #6
   4e7d4:	andeq	pc, r0, r4, ror #5
   4e7d8:	andeq	pc, r0, r4, asr #5
   4e7dc:	andeq	pc, r0, r8, lsr #5
   4e7e0:	andeq	pc, r0, ip, lsl #5
   4e7e4:	andeq	pc, r0, r8, ror #4
   4e7e8:	andeq	pc, r0, ip, asr #4
   4e7ec:	cmp	r0, #192	; 0xc0
   4e7f0:	addls	pc, pc, r0, lsl #2
   4e7f4:	b	4ec7c <warn@@Base+0x5084>
   4e7f8:	b	4ec64 <warn@@Base+0x506c>
   4e7fc:	b	4ec58 <warn@@Base+0x5060>
   4e800:	b	4ec4c <warn@@Base+0x5054>
   4e804:	b	4ec40 <warn@@Base+0x5048>
   4e808:	b	4ec34 <warn@@Base+0x503c>
   4e80c:	b	4ec28 <warn@@Base+0x5030>
   4e810:	b	4ec1c <warn@@Base+0x5024>
   4e814:	b	4ec10 <warn@@Base+0x5018>
   4e818:	b	4ec04 <warn@@Base+0x500c>
   4e81c:	b	4ebf8 <warn@@Base+0x5000>
   4e820:	b	4ebec <warn@@Base+0x4ff4>
   4e824:	b	4ebe0 <warn@@Base+0x4fe8>
   4e828:	b	4ebd4 <warn@@Base+0x4fdc>
   4e82c:	b	4ebc8 <warn@@Base+0x4fd0>
   4e830:	b	4ebbc <warn@@Base+0x4fc4>
   4e834:	b	4ebb0 <warn@@Base+0x4fb8>
   4e838:	b	4eba4 <warn@@Base+0x4fac>
   4e83c:	b	4eb98 <warn@@Base+0x4fa0>
   4e840:	b	4eb8c <warn@@Base+0x4f94>
   4e844:	b	4eb80 <warn@@Base+0x4f88>
   4e848:	b	4eb74 <warn@@Base+0x4f7c>
   4e84c:	b	4eb68 <warn@@Base+0x4f70>
   4e850:	b	4eb5c <warn@@Base+0x4f64>
   4e854:	b	4ec7c <warn@@Base+0x5084>
   4e858:	b	4ec7c <warn@@Base+0x5084>
   4e85c:	b	4ec7c <warn@@Base+0x5084>
   4e860:	b	4ec7c <warn@@Base+0x5084>
   4e864:	b	4ec7c <warn@@Base+0x5084>
   4e868:	b	4eb50 <warn@@Base+0x4f58>
   4e86c:	b	4eb44 <warn@@Base+0x4f4c>
   4e870:	b	4ec7c <warn@@Base+0x5084>
   4e874:	b	4ec7c <warn@@Base+0x5084>
   4e878:	b	4ec7c <warn@@Base+0x5084>
   4e87c:	b	4ec7c <warn@@Base+0x5084>
   4e880:	b	4ec7c <warn@@Base+0x5084>
   4e884:	b	4ec7c <warn@@Base+0x5084>
   4e888:	b	4ec7c <warn@@Base+0x5084>
   4e88c:	b	4ec7c <warn@@Base+0x5084>
   4e890:	b	4ec7c <warn@@Base+0x5084>
   4e894:	b	4ec7c <warn@@Base+0x5084>
   4e898:	b	4ec7c <warn@@Base+0x5084>
   4e89c:	b	4ec7c <warn@@Base+0x5084>
   4e8a0:	b	4ec7c <warn@@Base+0x5084>
   4e8a4:	b	4ec7c <warn@@Base+0x5084>
   4e8a8:	b	4ec7c <warn@@Base+0x5084>
   4e8ac:	b	4eb38 <warn@@Base+0x4f40>
   4e8b0:	b	4eb2c <warn@@Base+0x4f34>
   4e8b4:	b	4eb20 <warn@@Base+0x4f28>
   4e8b8:	b	4ec7c <warn@@Base+0x5084>
   4e8bc:	b	4ec7c <warn@@Base+0x5084>
   4e8c0:	b	4ec7c <warn@@Base+0x5084>
   4e8c4:	b	4ec7c <warn@@Base+0x5084>
   4e8c8:	b	4ec7c <warn@@Base+0x5084>
   4e8cc:	b	4ec7c <warn@@Base+0x5084>
   4e8d0:	b	4ec7c <warn@@Base+0x5084>
   4e8d4:	b	4ec7c <warn@@Base+0x5084>
   4e8d8:	b	4ec7c <warn@@Base+0x5084>
   4e8dc:	b	4ec7c <warn@@Base+0x5084>
   4e8e0:	b	4ec7c <warn@@Base+0x5084>
   4e8e4:	b	4ec7c <warn@@Base+0x5084>
   4e8e8:	b	4ec7c <warn@@Base+0x5084>
   4e8ec:	b	4ec7c <warn@@Base+0x5084>
   4e8f0:	b	4ec7c <warn@@Base+0x5084>
   4e8f4:	b	4eb14 <warn@@Base+0x4f1c>
   4e8f8:	b	4eb08 <warn@@Base+0x4f10>
   4e8fc:	b	4ec7c <warn@@Base+0x5084>
   4e900:	b	4ec7c <warn@@Base+0x5084>
   4e904:	b	4ec7c <warn@@Base+0x5084>
   4e908:	b	4ec7c <warn@@Base+0x5084>
   4e90c:	b	4ec7c <warn@@Base+0x5084>
   4e910:	b	4ec7c <warn@@Base+0x5084>
   4e914:	b	4ec7c <warn@@Base+0x5084>
   4e918:	b	4ec7c <warn@@Base+0x5084>
   4e91c:	b	4ec7c <warn@@Base+0x5084>
   4e920:	b	4ec7c <warn@@Base+0x5084>
   4e924:	b	4ec7c <warn@@Base+0x5084>
   4e928:	b	4ec7c <warn@@Base+0x5084>
   4e92c:	b	4ec7c <warn@@Base+0x5084>
   4e930:	b	4ec7c <warn@@Base+0x5084>
   4e934:	b	4ec7c <warn@@Base+0x5084>
   4e938:	b	4ec7c <warn@@Base+0x5084>
   4e93c:	b	4ec7c <warn@@Base+0x5084>
   4e940:	b	4ec7c <warn@@Base+0x5084>
   4e944:	b	4ec7c <warn@@Base+0x5084>
   4e948:	b	4ec7c <warn@@Base+0x5084>
   4e94c:	b	4ec7c <warn@@Base+0x5084>
   4e950:	b	4ec7c <warn@@Base+0x5084>
   4e954:	b	4ec7c <warn@@Base+0x5084>
   4e958:	b	4ec7c <warn@@Base+0x5084>
   4e95c:	b	4ec7c <warn@@Base+0x5084>
   4e960:	b	4ec7c <warn@@Base+0x5084>
   4e964:	b	4ec7c <warn@@Base+0x5084>
   4e968:	b	4ec7c <warn@@Base+0x5084>
   4e96c:	b	4ec7c <warn@@Base+0x5084>
   4e970:	b	4ec7c <warn@@Base+0x5084>
   4e974:	b	4ec7c <warn@@Base+0x5084>
   4e978:	b	4ec7c <warn@@Base+0x5084>
   4e97c:	b	4ec7c <warn@@Base+0x5084>
   4e980:	b	4ec7c <warn@@Base+0x5084>
   4e984:	b	4ec7c <warn@@Base+0x5084>
   4e988:	b	4ec7c <warn@@Base+0x5084>
   4e98c:	b	4ec7c <warn@@Base+0x5084>
   4e990:	b	4ec7c <warn@@Base+0x5084>
   4e994:	b	4ec7c <warn@@Base+0x5084>
   4e998:	b	4ec7c <warn@@Base+0x5084>
   4e99c:	b	4ec7c <warn@@Base+0x5084>
   4e9a0:	b	4ec7c <warn@@Base+0x5084>
   4e9a4:	b	4ec7c <warn@@Base+0x5084>
   4e9a8:	b	4ec7c <warn@@Base+0x5084>
   4e9ac:	b	4ec7c <warn@@Base+0x5084>
   4e9b0:	b	4ec7c <warn@@Base+0x5084>
   4e9b4:	b	4ec7c <warn@@Base+0x5084>
   4e9b8:	b	4ec7c <warn@@Base+0x5084>
   4e9bc:	b	4ec7c <warn@@Base+0x5084>
   4e9c0:	b	4ec7c <warn@@Base+0x5084>
   4e9c4:	b	4ec7c <warn@@Base+0x5084>
   4e9c8:	b	4ec7c <warn@@Base+0x5084>
   4e9cc:	b	4ec7c <warn@@Base+0x5084>
   4e9d0:	b	4ec7c <warn@@Base+0x5084>
   4e9d4:	b	4ec7c <warn@@Base+0x5084>
   4e9d8:	b	4ec7c <warn@@Base+0x5084>
   4e9dc:	b	4ec7c <warn@@Base+0x5084>
   4e9e0:	b	4ec7c <warn@@Base+0x5084>
   4e9e4:	b	4ec7c <warn@@Base+0x5084>
   4e9e8:	b	4ec7c <warn@@Base+0x5084>
   4e9ec:	b	4ec7c <warn@@Base+0x5084>
   4e9f0:	b	4ec7c <warn@@Base+0x5084>
   4e9f4:	b	4ec7c <warn@@Base+0x5084>
   4e9f8:	b	4eafc <warn@@Base+0x4f04>
   4e9fc:	b	4ec7c <warn@@Base+0x5084>
   4ea00:	b	4ec7c <warn@@Base+0x5084>
   4ea04:	b	4ec7c <warn@@Base+0x5084>
   4ea08:	b	4ec7c <warn@@Base+0x5084>
   4ea0c:	b	4ec7c <warn@@Base+0x5084>
   4ea10:	b	4ec7c <warn@@Base+0x5084>
   4ea14:	b	4ec7c <warn@@Base+0x5084>
   4ea18:	b	4ec7c <warn@@Base+0x5084>
   4ea1c:	b	4ec7c <warn@@Base+0x5084>
   4ea20:	b	4ec7c <warn@@Base+0x5084>
   4ea24:	b	4ec7c <warn@@Base+0x5084>
   4ea28:	b	4ec7c <warn@@Base+0x5084>
   4ea2c:	b	4ec7c <warn@@Base+0x5084>
   4ea30:	b	4ec7c <warn@@Base+0x5084>
   4ea34:	b	4ec7c <warn@@Base+0x5084>
   4ea38:	b	4ec7c <warn@@Base+0x5084>
   4ea3c:	b	4ec7c <warn@@Base+0x5084>
   4ea40:	b	4ec7c <warn@@Base+0x5084>
   4ea44:	b	4ec7c <warn@@Base+0x5084>
   4ea48:	b	4ec7c <warn@@Base+0x5084>
   4ea4c:	b	4ec7c <warn@@Base+0x5084>
   4ea50:	b	4ec7c <warn@@Base+0x5084>
   4ea54:	b	4ec7c <warn@@Base+0x5084>
   4ea58:	b	4ec7c <warn@@Base+0x5084>
   4ea5c:	b	4ec7c <warn@@Base+0x5084>
   4ea60:	b	4ec7c <warn@@Base+0x5084>
   4ea64:	b	4ec7c <warn@@Base+0x5084>
   4ea68:	b	4ec7c <warn@@Base+0x5084>
   4ea6c:	b	4ec7c <warn@@Base+0x5084>
   4ea70:	b	4ec7c <warn@@Base+0x5084>
   4ea74:	b	4ec7c <warn@@Base+0x5084>
   4ea78:	b	4ec7c <warn@@Base+0x5084>
   4ea7c:	b	4ec7c <warn@@Base+0x5084>
   4ea80:	b	4ec7c <warn@@Base+0x5084>
   4ea84:	b	4ec7c <warn@@Base+0x5084>
   4ea88:	b	4ec7c <warn@@Base+0x5084>
   4ea8c:	b	4ec7c <warn@@Base+0x5084>
   4ea90:	b	4ec7c <warn@@Base+0x5084>
   4ea94:	b	4ec7c <warn@@Base+0x5084>
   4ea98:	b	4ec7c <warn@@Base+0x5084>
   4ea9c:	b	4ec7c <warn@@Base+0x5084>
   4eaa0:	b	4ec7c <warn@@Base+0x5084>
   4eaa4:	b	4ec7c <warn@@Base+0x5084>
   4eaa8:	b	4ec7c <warn@@Base+0x5084>
   4eaac:	b	4ec7c <warn@@Base+0x5084>
   4eab0:	b	4ec7c <warn@@Base+0x5084>
   4eab4:	b	4ec7c <warn@@Base+0x5084>
   4eab8:	b	4ec7c <warn@@Base+0x5084>
   4eabc:	b	4ec7c <warn@@Base+0x5084>
   4eac0:	b	4ec7c <warn@@Base+0x5084>
   4eac4:	b	4ec7c <warn@@Base+0x5084>
   4eac8:	b	4ec7c <warn@@Base+0x5084>
   4eacc:	b	4ec7c <warn@@Base+0x5084>
   4ead0:	b	4ec7c <warn@@Base+0x5084>
   4ead4:	b	4ec7c <warn@@Base+0x5084>
   4ead8:	b	4ec7c <warn@@Base+0x5084>
   4eadc:	b	4ec7c <warn@@Base+0x5084>
   4eae0:	b	4ec7c <warn@@Base+0x5084>
   4eae4:	b	4ec7c <warn@@Base+0x5084>
   4eae8:	b	4ec7c <warn@@Base+0x5084>
   4eaec:	b	4ec7c <warn@@Base+0x5084>
   4eaf0:	b	4ec7c <warn@@Base+0x5084>
   4eaf4:	b	4ec7c <warn@@Base+0x5084>
   4eaf8:	b	4ec70 <warn@@Base+0x5078>
   4eafc:	ldr	r0, [pc, #384]	; 4ec84 <warn@@Base+0x508c>
   4eb00:	add	r0, pc, r0
   4eb04:	bx	lr
   4eb08:	ldr	r0, [pc, #376]	; 4ec88 <warn@@Base+0x5090>
   4eb0c:	add	r0, pc, r0
   4eb10:	bx	lr
   4eb14:	ldr	r0, [pc, #368]	; 4ec8c <warn@@Base+0x5094>
   4eb18:	add	r0, pc, r0
   4eb1c:	bx	lr
   4eb20:	ldr	r0, [pc, #360]	; 4ec90 <warn@@Base+0x5098>
   4eb24:	add	r0, pc, r0
   4eb28:	bx	lr
   4eb2c:	ldr	r0, [pc, #352]	; 4ec94 <warn@@Base+0x509c>
   4eb30:	add	r0, pc, r0
   4eb34:	bx	lr
   4eb38:	ldr	r0, [pc, #344]	; 4ec98 <warn@@Base+0x50a0>
   4eb3c:	add	r0, pc, r0
   4eb40:	bx	lr
   4eb44:	ldr	r0, [pc, #336]	; 4ec9c <warn@@Base+0x50a4>
   4eb48:	add	r0, pc, r0
   4eb4c:	bx	lr
   4eb50:	ldr	r0, [pc, #328]	; 4eca0 <warn@@Base+0x50a8>
   4eb54:	add	r0, pc, r0
   4eb58:	bx	lr
   4eb5c:	ldr	r0, [pc, #320]	; 4eca4 <warn@@Base+0x50ac>
   4eb60:	add	r0, pc, r0
   4eb64:	bx	lr
   4eb68:	ldr	r0, [pc, #312]	; 4eca8 <warn@@Base+0x50b0>
   4eb6c:	add	r0, pc, r0
   4eb70:	bx	lr
   4eb74:	ldr	r0, [pc, #304]	; 4ecac <warn@@Base+0x50b4>
   4eb78:	add	r0, pc, r0
   4eb7c:	bx	lr
   4eb80:	ldr	r0, [pc, #296]	; 4ecb0 <warn@@Base+0x50b8>
   4eb84:	add	r0, pc, r0
   4eb88:	bx	lr
   4eb8c:	ldr	r0, [pc, #288]	; 4ecb4 <warn@@Base+0x50bc>
   4eb90:	add	r0, pc, r0
   4eb94:	bx	lr
   4eb98:	ldr	r0, [pc, #280]	; 4ecb8 <warn@@Base+0x50c0>
   4eb9c:	add	r0, pc, r0
   4eba0:	bx	lr
   4eba4:	ldr	r0, [pc, #272]	; 4ecbc <warn@@Base+0x50c4>
   4eba8:	add	r0, pc, r0
   4ebac:	bx	lr
   4ebb0:	ldr	r0, [pc, #264]	; 4ecc0 <warn@@Base+0x50c8>
   4ebb4:	add	r0, pc, r0
   4ebb8:	bx	lr
   4ebbc:	ldr	r0, [pc, #256]	; 4ecc4 <warn@@Base+0x50cc>
   4ebc0:	add	r0, pc, r0
   4ebc4:	bx	lr
   4ebc8:	ldr	r0, [pc, #248]	; 4ecc8 <warn@@Base+0x50d0>
   4ebcc:	add	r0, pc, r0
   4ebd0:	bx	lr
   4ebd4:	ldr	r0, [pc, #240]	; 4eccc <warn@@Base+0x50d4>
   4ebd8:	add	r0, pc, r0
   4ebdc:	bx	lr
   4ebe0:	ldr	r0, [pc, #232]	; 4ecd0 <warn@@Base+0x50d8>
   4ebe4:	add	r0, pc, r0
   4ebe8:	bx	lr
   4ebec:	ldr	r0, [pc, #224]	; 4ecd4 <warn@@Base+0x50dc>
   4ebf0:	add	r0, pc, r0
   4ebf4:	bx	lr
   4ebf8:	ldr	r0, [pc, #216]	; 4ecd8 <warn@@Base+0x50e0>
   4ebfc:	add	r0, pc, r0
   4ec00:	bx	lr
   4ec04:	ldr	r0, [pc, #208]	; 4ecdc <warn@@Base+0x50e4>
   4ec08:	add	r0, pc, r0
   4ec0c:	bx	lr
   4ec10:	ldr	r0, [pc, #200]	; 4ece0 <warn@@Base+0x50e8>
   4ec14:	add	r0, pc, r0
   4ec18:	bx	lr
   4ec1c:	ldr	r0, [pc, #192]	; 4ece4 <warn@@Base+0x50ec>
   4ec20:	add	r0, pc, r0
   4ec24:	bx	lr
   4ec28:	ldr	r0, [pc, #184]	; 4ece8 <warn@@Base+0x50f0>
   4ec2c:	add	r0, pc, r0
   4ec30:	bx	lr
   4ec34:	ldr	r0, [pc, #176]	; 4ecec <warn@@Base+0x50f4>
   4ec38:	add	r0, pc, r0
   4ec3c:	bx	lr
   4ec40:	ldr	r0, [pc, #168]	; 4ecf0 <warn@@Base+0x50f8>
   4ec44:	add	r0, pc, r0
   4ec48:	bx	lr
   4ec4c:	ldr	r0, [pc, #160]	; 4ecf4 <warn@@Base+0x50fc>
   4ec50:	add	r0, pc, r0
   4ec54:	bx	lr
   4ec58:	ldr	r0, [pc, #152]	; 4ecf8 <warn@@Base+0x5100>
   4ec5c:	add	r0, pc, r0
   4ec60:	bx	lr
   4ec64:	ldr	r0, [pc, #144]	; 4ecfc <warn@@Base+0x5104>
   4ec68:	add	r0, pc, r0
   4ec6c:	bx	lr
   4ec70:	ldr	r0, [pc, #136]	; 4ed00 <warn@@Base+0x5108>
   4ec74:	add	r0, pc, r0
   4ec78:	bx	lr
   4ec7c:	mov	r0, #0
   4ec80:	bx	lr
   4ec84:	andeq	pc, r0, ip, ror r1	; <UNPREDICTABLE>
   4ec88:	andeq	pc, r0, ip, asr r1	; <UNPREDICTABLE>
   4ec8c:	andeq	pc, r0, r4, lsl #7
   4ec90:	ldrdeq	pc, [r0], -r4
   4ec94:			; <UNDEFINED> instruction: 0x0000f3b0
   4ec98:	andeq	pc, r0, ip, lsl #7
   4ec9c:	andeq	pc, r0, r4, ror #6
   4eca0:	andeq	pc, r0, r8, lsr r3	; <UNPREDICTABLE>
   4eca4:	andeq	pc, r0, r4, lsl r3	; <UNPREDICTABLE>
   4eca8:	strdeq	pc, [r0], -r0
   4ecac:	ldrdeq	pc, [r0], -r0
   4ecb0:	andeq	pc, r0, r8, lsr #5
   4ecb4:	andeq	pc, r0, r8, lsl #5
   4ecb8:	andeq	pc, r0, r0, ror #4
   4ecbc:	andeq	pc, r0, r0, asr #4
   4ecc0:	andeq	pc, r0, r8, lsl r2	; <UNPREDICTABLE>
   4ecc4:	strdeq	pc, [r0], -r4
   4ecc8:	ldrdeq	pc, [r0], -r0
   4eccc:			; <UNDEFINED> instruction: 0x0000f1b4
   4ecd0:	muleq	r0, r0, r1
   4ecd4:	andeq	pc, r0, ip, ror #2
   4ecd8:	andeq	pc, r0, r0, asr r1	; <UNPREDICTABLE>
   4ecdc:	andeq	pc, r0, r0, lsr r1	; <UNPREDICTABLE>
   4ece0:	andeq	pc, r0, r0, lsl r1	; <UNPREDICTABLE>
   4ece4:	andeq	pc, r0, ip, ror #1
   4ece8:	andeq	pc, r0, r8, asr #1
   4ecec:	andeq	pc, r0, r8, lsr #1
   4ecf0:	andeq	pc, r0, r8, lsl #1
   4ecf4:	andeq	pc, r0, r8, rrx
   4ecf8:	andeq	pc, r0, ip, asr #32
   4ecfc:	andeq	pc, r0, r4, lsr r0	; <UNPREDICTABLE>
   4ed00:	andeq	pc, r0, r8, lsl r0	; <UNPREDICTABLE>
   4ed04:	ldr	r3, [pc, #488]	; 4eef4 <warn@@Base+0x52fc>
   4ed08:	push	{r4, r5, r6, lr}
   4ed0c:	ldr	r0, [pc, r3]
   4ed10:	cmp	r0, #0
   4ed14:	popne	{r4, r5, r6, pc}
   4ed18:	ldr	r0, [pc, #472]	; 4eef8 <warn@@Base+0x5300>
   4ed1c:	add	r0, pc, r0
   4ed20:	bl	123f4 <getenv@plt>
   4ed24:	subs	r4, r0, #0
   4ed28:	beq	4eda0 <warn@@Base+0x51a8>
   4ed2c:	mov	r1, #7
   4ed30:	bl	125e0 <access@plt>
   4ed34:	cmp	r0, #0
   4ed38:	bne	4eddc <warn@@Base+0x51e4>
   4ed3c:	ldr	r0, [pc, #440]	; 4eefc <warn@@Base+0x5304>
   4ed40:	add	r0, pc, r0
   4ed44:	bl	123f4 <getenv@plt>
   4ed48:	ldr	r0, [pc, #432]	; 4ef00 <warn@@Base+0x5308>
   4ed4c:	add	r0, pc, r0
   4ed50:	bl	123f4 <getenv@plt>
   4ed54:	mov	r0, r4
   4ed58:	bl	124e4 <strlen@plt>
   4ed5c:	mov	r3, r0
   4ed60:	mov	r5, r0
   4ed64:	add	r6, r3, #1
   4ed68:	add	r0, r0, #2
   4ed6c:	bl	12358 <xmalloc@plt>
   4ed70:	mov	r1, r4
   4ed74:	bl	12388 <strcpy@plt>
   4ed78:	ldr	r2, [pc, #388]	; 4ef04 <warn@@Base+0x530c>
   4ed7c:	mov	r1, #0
   4ed80:	add	r2, pc, r2
   4ed84:	mov	r3, r0
   4ed88:	mov	r0, #47	; 0x2f
   4ed8c:	str	r3, [r2]
   4ed90:	strb	r0, [r3, r5]
   4ed94:	mov	r0, r3
   4ed98:	strb	r1, [r3, r6]
   4ed9c:	pop	{r4, r5, r6, pc}
   4eda0:	ldr	r0, [pc, #352]	; 4ef08 <warn@@Base+0x5310>
   4eda4:	add	r0, pc, r0
   4eda8:	bl	123f4 <getenv@plt>
   4edac:	mov	r4, r0
   4edb0:	cmp	r4, #0
   4edb4:	beq	4edf0 <warn@@Base+0x51f8>
   4edb8:	mov	r0, r4
   4edbc:	mov	r1, #7
   4edc0:	bl	125e0 <access@plt>
   4edc4:	cmp	r0, #0
   4edc8:	bne	4ee80 <warn@@Base+0x5288>
   4edcc:	ldr	r0, [pc, #312]	; 4ef0c <warn@@Base+0x5314>
   4edd0:	add	r0, pc, r0
   4edd4:	bl	123f4 <getenv@plt>
   4edd8:	b	4ed54 <warn@@Base+0x515c>
   4eddc:	ldr	r0, [pc, #300]	; 4ef10 <warn@@Base+0x5318>
   4ede0:	add	r0, pc, r0
   4ede4:	bl	123f4 <getenv@plt>
   4ede8:	mov	r4, r0
   4edec:	b	4edb0 <warn@@Base+0x51b8>
   4edf0:	ldr	r0, [pc, #284]	; 4ef14 <warn@@Base+0x531c>
   4edf4:	add	r0, pc, r0
   4edf8:	bl	123f4 <getenv@plt>
   4edfc:	mov	r4, r0
   4ee00:	cmp	r4, #0
   4ee04:	beq	4ee1c <warn@@Base+0x5224>
   4ee08:	mov	r0, r4
   4ee0c:	mov	r1, #7
   4ee10:	bl	125e0 <access@plt>
   4ee14:	cmp	r0, #0
   4ee18:	beq	4ed54 <warn@@Base+0x515c>
   4ee1c:	ldr	r4, [pc, #244]	; 4ef18 <warn@@Base+0x5320>
   4ee20:	mov	r1, #7
   4ee24:	add	r4, pc, r4
   4ee28:	mov	r0, r4
   4ee2c:	bl	125e0 <access@plt>
   4ee30:	cmp	r0, #0
   4ee34:	moveq	r6, #5
   4ee38:	moveq	r0, #6
   4ee3c:	moveq	r5, #4
   4ee40:	beq	4ed6c <warn@@Base+0x5174>
   4ee44:	ldr	r5, [pc, #208]	; 4ef1c <warn@@Base+0x5324>
   4ee48:	mov	r1, #7
   4ee4c:	add	r5, pc, r5
   4ee50:	add	r4, r5, #8
   4ee54:	mov	r0, r4
   4ee58:	bl	125e0 <access@plt>
   4ee5c:	cmp	r0, #0
   4ee60:	bne	4ee94 <warn@@Base+0x529c>
   4ee64:	mov	r0, r4
   4ee68:	bl	124e4 <strlen@plt>
   4ee6c:	mov	r6, r0
   4ee70:	mov	r5, r0
   4ee74:	add	r6, r6, #1
   4ee78:	add	r0, r0, #2
   4ee7c:	b	4ed6c <warn@@Base+0x5174>
   4ee80:	ldr	r0, [pc, #152]	; 4ef20 <warn@@Base+0x5328>
   4ee84:	add	r0, pc, r0
   4ee88:	bl	123f4 <getenv@plt>
   4ee8c:	mov	r4, r0
   4ee90:	b	4ee00 <warn@@Base+0x5208>
   4ee94:	add	r4, r5, #20
   4ee98:	mov	r1, #7
   4ee9c:	mov	r0, r4
   4eea0:	bl	125e0 <access@plt>
   4eea4:	cmp	r0, #0
   4eea8:	beq	4ee64 <warn@@Base+0x526c>
   4eeac:	mov	r0, r5
   4eeb0:	mov	r1, #7
   4eeb4:	bl	125e0 <access@plt>
   4eeb8:	cmp	r0, #0
   4eebc:	bne	4eedc <warn@@Base+0x52e4>
   4eec0:	mov	r0, r5
   4eec4:	mov	r4, r5
   4eec8:	bl	124e4 <strlen@plt>
   4eecc:	mov	r5, r0
   4eed0:	add	r0, r0, #2
   4eed4:	add	r6, r5, #1
   4eed8:	b	4ed6c <warn@@Base+0x5174>
   4eedc:	ldr	r4, [pc, #64]	; 4ef24 <warn@@Base+0x532c>
   4eee0:	mov	r6, #2
   4eee4:	mov	r0, #3
   4eee8:	mov	r5, #1
   4eeec:	add	r4, pc, r4
   4eef0:	b	4ed6c <warn@@Base+0x5174>
   4eef4:	andeq	r2, r2, r0, lsr #32
   4eef8:	andeq	pc, r0, r8, lsr #4
   4eefc:	andeq	pc, r0, ip, lsl #4
   4ef00:	andeq	pc, r0, r4, lsl #4
   4ef04:	andeq	r1, r2, ip, lsr #31
   4ef08:	andeq	pc, r0, r8, lsr #3
   4ef0c:	andeq	pc, r0, r0, lsl #3
   4ef10:	andeq	pc, r0, ip, ror #2
   4ef14:	andeq	pc, r0, ip, asr r1	; <UNPREDICTABLE>
   4ef18:	andeq	pc, r0, r8, lsl r1	; <UNPREDICTABLE>
   4ef1c:	ldrdeq	pc, [r0], -r0
   4ef20:	andeq	pc, r0, ip, asr #1
   4ef24:	muleq	r0, r4, r1
   4ef28:	push	{r4, r5, r6, r7, r8, r9, lr}
   4ef2c:	sub	sp, sp, #12
   4ef30:	mov	r6, r0
   4ef34:	bl	4ed04 <warn@@Base+0x510c>
   4ef38:	ldr	r9, [pc, #236]	; 4f02c <warn@@Base+0x5434>
   4ef3c:	cmp	r6, #0
   4ef40:	add	r9, pc, r9
   4ef44:	mov	r7, r0
   4ef48:	beq	4efdc <warn@@Base+0x53e4>
   4ef4c:	mov	r0, r6
   4ef50:	bl	124e4 <strlen@plt>
   4ef54:	mov	r8, r0
   4ef58:	mov	r4, r0
   4ef5c:	mov	r0, r7
   4ef60:	bl	124e4 <strlen@plt>
   4ef64:	mov	r5, r0
   4ef68:	add	r0, r0, r4
   4ef6c:	add	r0, r0, #9
   4ef70:	bl	12358 <xmalloc@plt>
   4ef74:	mov	r1, r7
   4ef78:	mov	r4, r0
   4ef7c:	bl	12388 <strcpy@plt>
   4ef80:	ldr	r2, [pc, #168]	; 4f030 <warn@@Base+0x5438>
   4ef84:	add	r3, r4, r5
   4ef88:	add	ip, r5, #8
   4ef8c:	add	r2, pc, r2
   4ef90:	ldm	r2!, {r0, r1}
   4ef94:	ldrb	r2, [r2]
   4ef98:	str	r0, [r4, r5]
   4ef9c:	add	r0, r4, ip
   4efa0:	str	r1, [r3, #4]
   4efa4:	mov	r1, r6
   4efa8:	strb	r2, [r3, #8]
   4efac:	bl	12388 <strcpy@plt>
   4efb0:	mov	r0, r4
   4efb4:	mov	r1, r8
   4efb8:	bl	123e8 <mkstemps64@plt>
   4efbc:	cmn	r0, #1
   4efc0:	beq	4eff0 <warn@@Base+0x53f8>
   4efc4:	bl	127a8 <close@plt>
   4efc8:	cmp	r0, #0
   4efcc:	bne	4f028 <warn@@Base+0x5430>
   4efd0:	mov	r0, r4
   4efd4:	add	sp, sp, #12
   4efd8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   4efdc:	mov	r8, r6
   4efe0:	ldr	r6, [pc, #76]	; 4f034 <warn@@Base+0x543c>
   4efe4:	mov	r4, r8
   4efe8:	add	r6, pc, r6
   4efec:	b	4ef5c <warn@@Base+0x5364>
   4eff0:	ldr	r3, [pc, #64]	; 4f038 <warn@@Base+0x5440>
   4eff4:	ldr	r3, [r9, r3]
   4eff8:	ldr	r4, [r3]
   4effc:	bl	1255c <__errno_location@plt>
   4f000:	ldr	r0, [r0]
   4f004:	bl	12460 <strerror@plt>
   4f008:	ldr	r2, [pc, #44]	; 4f03c <warn@@Base+0x5444>
   4f00c:	mov	r3, r7
   4f010:	mov	r1, #1
   4f014:	add	r2, pc, r2
   4f018:	str	r0, [sp]
   4f01c:	mov	r0, r4
   4f020:	bl	125d4 <__fprintf_chk@plt>
   4f024:	bl	12790 <abort@plt>
   4f028:	bl	12790 <abort@plt>
   4f02c:	strheq	r0, [r2], -r8
   4f030:	andeq	lr, r0, ip, asr #31
   4f034:	andeq	r3, r0, r0, ror #28
   4f038:	andeq	r0, r0, ip, asr #4
   4f03c:	andeq	lr, r0, r0, asr pc
   4f040:	subs	r2, r1, #1
   4f044:	bxeq	lr
   4f048:	bcc	4f220 <warn@@Base+0x5628>
   4f04c:	cmp	r0, r1
   4f050:	bls	4f204 <warn@@Base+0x560c>
   4f054:	tst	r1, r2
   4f058:	beq	4f210 <warn@@Base+0x5618>
   4f05c:	clz	r3, r0
   4f060:	clz	r2, r1
   4f064:	sub	r3, r2, r3
   4f068:	rsbs	r3, r3, #31
   4f06c:	addne	r3, r3, r3, lsl #1
   4f070:	mov	r2, #0
   4f074:	addne	pc, pc, r3, lsl #2
   4f078:	nop	{0}
   4f07c:	cmp	r0, r1, lsl #31
   4f080:	adc	r2, r2, r2
   4f084:	subcs	r0, r0, r1, lsl #31
   4f088:	cmp	r0, r1, lsl #30
   4f08c:	adc	r2, r2, r2
   4f090:	subcs	r0, r0, r1, lsl #30
   4f094:	cmp	r0, r1, lsl #29
   4f098:	adc	r2, r2, r2
   4f09c:	subcs	r0, r0, r1, lsl #29
   4f0a0:	cmp	r0, r1, lsl #28
   4f0a4:	adc	r2, r2, r2
   4f0a8:	subcs	r0, r0, r1, lsl #28
   4f0ac:	cmp	r0, r1, lsl #27
   4f0b0:	adc	r2, r2, r2
   4f0b4:	subcs	r0, r0, r1, lsl #27
   4f0b8:	cmp	r0, r1, lsl #26
   4f0bc:	adc	r2, r2, r2
   4f0c0:	subcs	r0, r0, r1, lsl #26
   4f0c4:	cmp	r0, r1, lsl #25
   4f0c8:	adc	r2, r2, r2
   4f0cc:	subcs	r0, r0, r1, lsl #25
   4f0d0:	cmp	r0, r1, lsl #24
   4f0d4:	adc	r2, r2, r2
   4f0d8:	subcs	r0, r0, r1, lsl #24
   4f0dc:	cmp	r0, r1, lsl #23
   4f0e0:	adc	r2, r2, r2
   4f0e4:	subcs	r0, r0, r1, lsl #23
   4f0e8:	cmp	r0, r1, lsl #22
   4f0ec:	adc	r2, r2, r2
   4f0f0:	subcs	r0, r0, r1, lsl #22
   4f0f4:	cmp	r0, r1, lsl #21
   4f0f8:	adc	r2, r2, r2
   4f0fc:	subcs	r0, r0, r1, lsl #21
   4f100:	cmp	r0, r1, lsl #20
   4f104:	adc	r2, r2, r2
   4f108:	subcs	r0, r0, r1, lsl #20
   4f10c:	cmp	r0, r1, lsl #19
   4f110:	adc	r2, r2, r2
   4f114:	subcs	r0, r0, r1, lsl #19
   4f118:	cmp	r0, r1, lsl #18
   4f11c:	adc	r2, r2, r2
   4f120:	subcs	r0, r0, r1, lsl #18
   4f124:	cmp	r0, r1, lsl #17
   4f128:	adc	r2, r2, r2
   4f12c:	subcs	r0, r0, r1, lsl #17
   4f130:	cmp	r0, r1, lsl #16
   4f134:	adc	r2, r2, r2
   4f138:	subcs	r0, r0, r1, lsl #16
   4f13c:	cmp	r0, r1, lsl #15
   4f140:	adc	r2, r2, r2
   4f144:	subcs	r0, r0, r1, lsl #15
   4f148:	cmp	r0, r1, lsl #14
   4f14c:	adc	r2, r2, r2
   4f150:	subcs	r0, r0, r1, lsl #14
   4f154:	cmp	r0, r1, lsl #13
   4f158:	adc	r2, r2, r2
   4f15c:	subcs	r0, r0, r1, lsl #13
   4f160:	cmp	r0, r1, lsl #12
   4f164:	adc	r2, r2, r2
   4f168:	subcs	r0, r0, r1, lsl #12
   4f16c:	cmp	r0, r1, lsl #11
   4f170:	adc	r2, r2, r2
   4f174:	subcs	r0, r0, r1, lsl #11
   4f178:	cmp	r0, r1, lsl #10
   4f17c:	adc	r2, r2, r2
   4f180:	subcs	r0, r0, r1, lsl #10
   4f184:	cmp	r0, r1, lsl #9
   4f188:	adc	r2, r2, r2
   4f18c:	subcs	r0, r0, r1, lsl #9
   4f190:	cmp	r0, r1, lsl #8
   4f194:	adc	r2, r2, r2
   4f198:	subcs	r0, r0, r1, lsl #8
   4f19c:	cmp	r0, r1, lsl #7
   4f1a0:	adc	r2, r2, r2
   4f1a4:	subcs	r0, r0, r1, lsl #7
   4f1a8:	cmp	r0, r1, lsl #6
   4f1ac:	adc	r2, r2, r2
   4f1b0:	subcs	r0, r0, r1, lsl #6
   4f1b4:	cmp	r0, r1, lsl #5
   4f1b8:	adc	r2, r2, r2
   4f1bc:	subcs	r0, r0, r1, lsl #5
   4f1c0:	cmp	r0, r1, lsl #4
   4f1c4:	adc	r2, r2, r2
   4f1c8:	subcs	r0, r0, r1, lsl #4
   4f1cc:	cmp	r0, r1, lsl #3
   4f1d0:	adc	r2, r2, r2
   4f1d4:	subcs	r0, r0, r1, lsl #3
   4f1d8:	cmp	r0, r1, lsl #2
   4f1dc:	adc	r2, r2, r2
   4f1e0:	subcs	r0, r0, r1, lsl #2
   4f1e4:	cmp	r0, r1, lsl #1
   4f1e8:	adc	r2, r2, r2
   4f1ec:	subcs	r0, r0, r1, lsl #1
   4f1f0:	cmp	r0, r1
   4f1f4:	adc	r2, r2, r2
   4f1f8:	subcs	r0, r0, r1
   4f1fc:	mov	r0, r2
   4f200:	bx	lr
   4f204:	moveq	r0, #1
   4f208:	movne	r0, #0
   4f20c:	bx	lr
   4f210:	clz	r2, r1
   4f214:	rsb	r2, r2, #31
   4f218:	lsr	r0, r0, r2
   4f21c:	bx	lr
   4f220:	cmp	r0, #0
   4f224:	mvnne	r0, #0
   4f228:	b	4f4c8 <warn@@Base+0x58d0>
   4f22c:	cmp	r1, #0
   4f230:	beq	4f220 <warn@@Base+0x5628>
   4f234:	push	{r0, r1, lr}
   4f238:	bl	4f040 <warn@@Base+0x5448>
   4f23c:	pop	{r1, r2, lr}
   4f240:	mul	r3, r2, r0
   4f244:	sub	r1, r1, r3
   4f248:	bx	lr
   4f24c:	cmp	r1, #0
   4f250:	beq	4f45c <warn@@Base+0x5864>
   4f254:	eor	ip, r0, r1
   4f258:	rsbmi	r1, r1, #0
   4f25c:	subs	r2, r1, #1
   4f260:	beq	4f428 <warn@@Base+0x5830>
   4f264:	movs	r3, r0
   4f268:	rsbmi	r3, r0, #0
   4f26c:	cmp	r3, r1
   4f270:	bls	4f434 <warn@@Base+0x583c>
   4f274:	tst	r1, r2
   4f278:	beq	4f444 <warn@@Base+0x584c>
   4f27c:	clz	r2, r3
   4f280:	clz	r0, r1
   4f284:	sub	r2, r0, r2
   4f288:	rsbs	r2, r2, #31
   4f28c:	addne	r2, r2, r2, lsl #1
   4f290:	mov	r0, #0
   4f294:	addne	pc, pc, r2, lsl #2
   4f298:	nop	{0}
   4f29c:	cmp	r3, r1, lsl #31
   4f2a0:	adc	r0, r0, r0
   4f2a4:	subcs	r3, r3, r1, lsl #31
   4f2a8:	cmp	r3, r1, lsl #30
   4f2ac:	adc	r0, r0, r0
   4f2b0:	subcs	r3, r3, r1, lsl #30
   4f2b4:	cmp	r3, r1, lsl #29
   4f2b8:	adc	r0, r0, r0
   4f2bc:	subcs	r3, r3, r1, lsl #29
   4f2c0:	cmp	r3, r1, lsl #28
   4f2c4:	adc	r0, r0, r0
   4f2c8:	subcs	r3, r3, r1, lsl #28
   4f2cc:	cmp	r3, r1, lsl #27
   4f2d0:	adc	r0, r0, r0
   4f2d4:	subcs	r3, r3, r1, lsl #27
   4f2d8:	cmp	r3, r1, lsl #26
   4f2dc:	adc	r0, r0, r0
   4f2e0:	subcs	r3, r3, r1, lsl #26
   4f2e4:	cmp	r3, r1, lsl #25
   4f2e8:	adc	r0, r0, r0
   4f2ec:	subcs	r3, r3, r1, lsl #25
   4f2f0:	cmp	r3, r1, lsl #24
   4f2f4:	adc	r0, r0, r0
   4f2f8:	subcs	r3, r3, r1, lsl #24
   4f2fc:	cmp	r3, r1, lsl #23
   4f300:	adc	r0, r0, r0
   4f304:	subcs	r3, r3, r1, lsl #23
   4f308:	cmp	r3, r1, lsl #22
   4f30c:	adc	r0, r0, r0
   4f310:	subcs	r3, r3, r1, lsl #22
   4f314:	cmp	r3, r1, lsl #21
   4f318:	adc	r0, r0, r0
   4f31c:	subcs	r3, r3, r1, lsl #21
   4f320:	cmp	r3, r1, lsl #20
   4f324:	adc	r0, r0, r0
   4f328:	subcs	r3, r3, r1, lsl #20
   4f32c:	cmp	r3, r1, lsl #19
   4f330:	adc	r0, r0, r0
   4f334:	subcs	r3, r3, r1, lsl #19
   4f338:	cmp	r3, r1, lsl #18
   4f33c:	adc	r0, r0, r0
   4f340:	subcs	r3, r3, r1, lsl #18
   4f344:	cmp	r3, r1, lsl #17
   4f348:	adc	r0, r0, r0
   4f34c:	subcs	r3, r3, r1, lsl #17
   4f350:	cmp	r3, r1, lsl #16
   4f354:	adc	r0, r0, r0
   4f358:	subcs	r3, r3, r1, lsl #16
   4f35c:	cmp	r3, r1, lsl #15
   4f360:	adc	r0, r0, r0
   4f364:	subcs	r3, r3, r1, lsl #15
   4f368:	cmp	r3, r1, lsl #14
   4f36c:	adc	r0, r0, r0
   4f370:	subcs	r3, r3, r1, lsl #14
   4f374:	cmp	r3, r1, lsl #13
   4f378:	adc	r0, r0, r0
   4f37c:	subcs	r3, r3, r1, lsl #13
   4f380:	cmp	r3, r1, lsl #12
   4f384:	adc	r0, r0, r0
   4f388:	subcs	r3, r3, r1, lsl #12
   4f38c:	cmp	r3, r1, lsl #11
   4f390:	adc	r0, r0, r0
   4f394:	subcs	r3, r3, r1, lsl #11
   4f398:	cmp	r3, r1, lsl #10
   4f39c:	adc	r0, r0, r0
   4f3a0:	subcs	r3, r3, r1, lsl #10
   4f3a4:	cmp	r3, r1, lsl #9
   4f3a8:	adc	r0, r0, r0
   4f3ac:	subcs	r3, r3, r1, lsl #9
   4f3b0:	cmp	r3, r1, lsl #8
   4f3b4:	adc	r0, r0, r0
   4f3b8:	subcs	r3, r3, r1, lsl #8
   4f3bc:	cmp	r3, r1, lsl #7
   4f3c0:	adc	r0, r0, r0
   4f3c4:	subcs	r3, r3, r1, lsl #7
   4f3c8:	cmp	r3, r1, lsl #6
   4f3cc:	adc	r0, r0, r0
   4f3d0:	subcs	r3, r3, r1, lsl #6
   4f3d4:	cmp	r3, r1, lsl #5
   4f3d8:	adc	r0, r0, r0
   4f3dc:	subcs	r3, r3, r1, lsl #5
   4f3e0:	cmp	r3, r1, lsl #4
   4f3e4:	adc	r0, r0, r0
   4f3e8:	subcs	r3, r3, r1, lsl #4
   4f3ec:	cmp	r3, r1, lsl #3
   4f3f0:	adc	r0, r0, r0
   4f3f4:	subcs	r3, r3, r1, lsl #3
   4f3f8:	cmp	r3, r1, lsl #2
   4f3fc:	adc	r0, r0, r0
   4f400:	subcs	r3, r3, r1, lsl #2
   4f404:	cmp	r3, r1, lsl #1
   4f408:	adc	r0, r0, r0
   4f40c:	subcs	r3, r3, r1, lsl #1
   4f410:	cmp	r3, r1
   4f414:	adc	r0, r0, r0
   4f418:	subcs	r3, r3, r1
   4f41c:	cmp	ip, #0
   4f420:	rsbmi	r0, r0, #0
   4f424:	bx	lr
   4f428:	teq	ip, r0
   4f42c:	rsbmi	r0, r0, #0
   4f430:	bx	lr
   4f434:	movcc	r0, #0
   4f438:	asreq	r0, ip, #31
   4f43c:	orreq	r0, r0, #1
   4f440:	bx	lr
   4f444:	clz	r2, r1
   4f448:	rsb	r2, r2, #31
   4f44c:	cmp	ip, #0
   4f450:	lsr	r0, r3, r2
   4f454:	rsbmi	r0, r0, #0
   4f458:	bx	lr
   4f45c:	cmp	r0, #0
   4f460:	mvngt	r0, #-2147483648	; 0x80000000
   4f464:	movlt	r0, #-2147483648	; 0x80000000
   4f468:	b	4f4c8 <warn@@Base+0x58d0>
   4f46c:	cmp	r1, #0
   4f470:	beq	4f45c <warn@@Base+0x5864>
   4f474:	push	{r0, r1, lr}
   4f478:	bl	4f254 <warn@@Base+0x565c>
   4f47c:	pop	{r1, r2, lr}
   4f480:	mul	r3, r2, r0
   4f484:	sub	r1, r1, r3
   4f488:	bx	lr
   4f48c:	cmp	r3, #0
   4f490:	cmpeq	r2, #0
   4f494:	bne	4f4ac <warn@@Base+0x58b4>
   4f498:	cmp	r1, #0
   4f49c:	cmpeq	r0, #0
   4f4a0:	mvnne	r1, #0
   4f4a4:	mvnne	r0, #0
   4f4a8:	b	4f4c8 <warn@@Base+0x58d0>
   4f4ac:	sub	sp, sp, #8
   4f4b0:	push	{sp, lr}
   4f4b4:	bl	4f514 <warn@@Base+0x591c>
   4f4b8:	ldr	lr, [sp, #4]
   4f4bc:	add	sp, sp, #8
   4f4c0:	pop	{r2, r3}
   4f4c4:	bx	lr
   4f4c8:	push	{r1, lr}
   4f4cc:	mov	r0, #8
   4f4d0:	bl	12154 <raise@plt>
   4f4d4:	pop	{r1, pc}
   4f4d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4f4dc:	mov	r8, r2
   4f4e0:	mov	r6, r0
   4f4e4:	mov	r7, r1
   4f4e8:	mov	sl, r3
   4f4ec:	ldr	r9, [sp, #32]
   4f4f0:	bl	4f550 <warn@@Base+0x5958>
   4f4f4:	umull	r4, r5, r8, r0
   4f4f8:	mul	r8, r8, r1
   4f4fc:	mla	r2, r0, sl, r8
   4f500:	add	r5, r2, r5
   4f504:	subs	r4, r6, r4
   4f508:	sbc	r5, r7, r5
   4f50c:	strd	r4, [r9]
   4f510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4f514:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   4f518:	mov	r8, r2
   4f51c:	mov	r6, r0
   4f520:	mov	r7, r1
   4f524:	mov	r5, r3
   4f528:	ldr	r9, [sp, #32]
   4f52c:	bl	4f9dc <warn@@Base+0x5de4>
   4f530:	mul	r3, r0, r5
   4f534:	umull	r4, r5, r0, r8
   4f538:	mla	r8, r8, r1, r3
   4f53c:	add	r5, r8, r5
   4f540:	subs	r4, r6, r4
   4f544:	sbc	r5, r7, r5
   4f548:	strd	r4, [r9]
   4f54c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   4f550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f554:	rsbs	r4, r0, #0
   4f558:	rsc	r5, r1, #0
   4f55c:	cmp	r1, #0
   4f560:	mvn	r6, #0
   4f564:	sub	sp, sp, #12
   4f568:	movge	r4, r0
   4f56c:	movge	r5, r1
   4f570:	movge	r6, #0
   4f574:	cmp	r3, #0
   4f578:	blt	4f7b0 <warn@@Base+0x5bb8>
   4f57c:	cmp	r3, #0
   4f580:	mov	sl, r4
   4f584:	mov	ip, r5
   4f588:	mov	r0, r2
   4f58c:	mov	r1, r3
   4f590:	mov	r8, r2
   4f594:	mov	r7, r4
   4f598:	mov	r9, r5
   4f59c:	bne	4f694 <warn@@Base+0x5a9c>
   4f5a0:	cmp	r2, r5
   4f5a4:	bls	4f6d0 <warn@@Base+0x5ad8>
   4f5a8:	clz	r3, r2
   4f5ac:	cmp	r3, #0
   4f5b0:	rsbne	r2, r3, #32
   4f5b4:	lslne	r8, r0, r3
   4f5b8:	lsrne	r2, r4, r2
   4f5bc:	lslne	r7, r4, r3
   4f5c0:	orrne	r9, r2, r5, lsl r3
   4f5c4:	lsr	r4, r8, #16
   4f5c8:	uxth	sl, r8
   4f5cc:	mov	r1, r4
   4f5d0:	mov	r0, r9
   4f5d4:	bl	4f040 <warn@@Base+0x5448>
   4f5d8:	mov	r1, r4
   4f5dc:	mov	fp, r0
   4f5e0:	mov	r0, r9
   4f5e4:	bl	4f22c <warn@@Base+0x5634>
   4f5e8:	mul	r0, sl, fp
   4f5ec:	lsr	r2, r7, #16
   4f5f0:	orr	r1, r2, r1, lsl #16
   4f5f4:	cmp	r0, r1
   4f5f8:	bls	4f61c <warn@@Base+0x5a24>
   4f5fc:	adds	r1, r1, r8
   4f600:	sub	r3, fp, #1
   4f604:	bcs	4f618 <warn@@Base+0x5a20>
   4f608:	cmp	r0, r1
   4f60c:	subhi	fp, fp, #2
   4f610:	addhi	r1, r1, r8
   4f614:	bhi	4f61c <warn@@Base+0x5a24>
   4f618:	mov	fp, r3
   4f61c:	rsb	r9, r0, r1
   4f620:	mov	r1, r4
   4f624:	uxth	r7, r7
   4f628:	mov	r0, r9
   4f62c:	bl	4f040 <warn@@Base+0x5448>
   4f630:	mov	r1, r4
   4f634:	mov	r5, r0
   4f638:	mov	r0, r9
   4f63c:	bl	4f22c <warn@@Base+0x5634>
   4f640:	mul	sl, sl, r5
   4f644:	orr	r1, r7, r1, lsl #16
   4f648:	cmp	sl, r1
   4f64c:	bls	4f66c <warn@@Base+0x5a74>
   4f650:	adds	r8, r1, r8
   4f654:	sub	r3, r5, #1
   4f658:	bcs	4f668 <warn@@Base+0x5a70>
   4f65c:	cmp	sl, r8
   4f660:	subhi	r5, r5, #2
   4f664:	bhi	4f66c <warn@@Base+0x5a74>
   4f668:	mov	r5, r3
   4f66c:	orr	r3, r5, fp, lsl #16
   4f670:	mov	r4, #0
   4f674:	cmp	r6, #0
   4f678:	mov	r0, r3
   4f67c:	mov	r1, r4
   4f680:	beq	4f68c <warn@@Base+0x5a94>
   4f684:	rsbs	r0, r0, #0
   4f688:	rsc	r1, r1, #0
   4f68c:	add	sp, sp, #12
   4f690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4f694:	cmp	r3, r5
   4f698:	movhi	r4, #0
   4f69c:	movhi	r3, r4
   4f6a0:	bhi	4f674 <warn@@Base+0x5a7c>
   4f6a4:	clz	r5, r1
   4f6a8:	cmp	r5, #0
   4f6ac:	bne	4f89c <warn@@Base+0x5ca4>
   4f6b0:	cmp	r1, ip
   4f6b4:	cmpcs	r2, sl
   4f6b8:	movhi	r4, #0
   4f6bc:	movls	r4, #1
   4f6c0:	movls	r3, #1
   4f6c4:	movls	r4, r5
   4f6c8:	movhi	r3, r4
   4f6cc:	b	4f674 <warn@@Base+0x5a7c>
   4f6d0:	cmp	r2, #0
   4f6d4:	bne	4f6e8 <warn@@Base+0x5af0>
   4f6d8:	mov	r1, r2
   4f6dc:	mov	r0, #1
   4f6e0:	bl	4f040 <warn@@Base+0x5448>
   4f6e4:	mov	r8, r0
   4f6e8:	clz	r3, r8
   4f6ec:	cmp	r3, #0
   4f6f0:	bne	4f7c0 <warn@@Base+0x5bc8>
   4f6f4:	rsb	r9, r8, r9
   4f6f8:	lsr	r5, r8, #16
   4f6fc:	uxth	sl, r8
   4f700:	mov	r4, #1
   4f704:	mov	r1, r5
   4f708:	mov	r0, r9
   4f70c:	bl	4f040 <warn@@Base+0x5448>
   4f710:	mov	r1, r5
   4f714:	mov	fp, r0
   4f718:	mov	r0, r9
   4f71c:	bl	4f22c <warn@@Base+0x5634>
   4f720:	mul	r0, sl, fp
   4f724:	lsr	r2, r7, #16
   4f728:	orr	r1, r2, r1, lsl #16
   4f72c:	cmp	r0, r1
   4f730:	bls	4f750 <warn@@Base+0x5b58>
   4f734:	adds	r1, r1, r8
   4f738:	sub	r3, fp, #1
   4f73c:	bcs	4f9bc <warn@@Base+0x5dc4>
   4f740:	cmp	r0, r1
   4f744:	subhi	fp, fp, #2
   4f748:	addhi	r1, r1, r8
   4f74c:	bls	4f9bc <warn@@Base+0x5dc4>
   4f750:	rsb	r2, r0, r1
   4f754:	mov	r1, r5
   4f758:	str	r2, [sp]
   4f75c:	uxth	r7, r7
   4f760:	mov	r0, r2
   4f764:	bl	4f040 <warn@@Base+0x5448>
   4f768:	ldr	r2, [sp]
   4f76c:	mov	r1, r5
   4f770:	mov	r9, r0
   4f774:	mov	r0, r2
   4f778:	bl	4f22c <warn@@Base+0x5634>
   4f77c:	mul	sl, sl, r9
   4f780:	orr	r1, r7, r1, lsl #16
   4f784:	cmp	sl, r1
   4f788:	bls	4f7a8 <warn@@Base+0x5bb0>
   4f78c:	adds	r8, r1, r8
   4f790:	sub	r3, r9, #1
   4f794:	bcs	4f7a4 <warn@@Base+0x5bac>
   4f798:	cmp	sl, r8
   4f79c:	subhi	r9, r9, #2
   4f7a0:	bhi	4f7a8 <warn@@Base+0x5bb0>
   4f7a4:	mov	r9, r3
   4f7a8:	orr	r3, r9, fp, lsl #16
   4f7ac:	b	4f674 <warn@@Base+0x5a7c>
   4f7b0:	mvn	r6, r6
   4f7b4:	rsbs	r2, r2, #0
   4f7b8:	rsc	r3, r3, #0
   4f7bc:	b	4f57c <warn@@Base+0x5984>
   4f7c0:	lsl	r8, r8, r3
   4f7c4:	rsb	fp, r3, #32
   4f7c8:	lsr	r4, r9, fp
   4f7cc:	lsr	fp, r7, fp
   4f7d0:	lsr	r5, r8, #16
   4f7d4:	orr	fp, fp, r9, lsl r3
   4f7d8:	mov	r0, r4
   4f7dc:	lsl	r7, r7, r3
   4f7e0:	mov	r1, r5
   4f7e4:	uxth	sl, r8
   4f7e8:	bl	4f040 <warn@@Base+0x5448>
   4f7ec:	mov	r1, r5
   4f7f0:	mov	r3, r0
   4f7f4:	mov	r0, r4
   4f7f8:	str	r3, [sp]
   4f7fc:	bl	4f22c <warn@@Base+0x5634>
   4f800:	ldr	r3, [sp]
   4f804:	lsr	r2, fp, #16
   4f808:	mul	r0, sl, r3
   4f80c:	orr	r1, r2, r1, lsl #16
   4f810:	cmp	r0, r1
   4f814:	bls	4f834 <warn@@Base+0x5c3c>
   4f818:	adds	r1, r1, r8
   4f81c:	sub	r2, r3, #1
   4f820:	bcs	4f9d4 <warn@@Base+0x5ddc>
   4f824:	cmp	r0, r1
   4f828:	subhi	r3, r3, #2
   4f82c:	addhi	r1, r1, r8
   4f830:	bls	4f9d4 <warn@@Base+0x5ddc>
   4f834:	rsb	r9, r0, r1
   4f838:	mov	r1, r5
   4f83c:	str	r3, [sp]
   4f840:	uxth	fp, fp
   4f844:	mov	r0, r9
   4f848:	bl	4f040 <warn@@Base+0x5448>
   4f84c:	mov	r1, r5
   4f850:	mov	r4, r0
   4f854:	mov	r0, r9
   4f858:	bl	4f22c <warn@@Base+0x5634>
   4f85c:	mul	r9, sl, r4
   4f860:	ldr	r3, [sp]
   4f864:	orr	r1, fp, r1, lsl #16
   4f868:	cmp	r9, r1
   4f86c:	bls	4f890 <warn@@Base+0x5c98>
   4f870:	adds	r1, r1, r8
   4f874:	sub	r2, r4, #1
   4f878:	bcs	4f88c <warn@@Base+0x5c94>
   4f87c:	cmp	r9, r1
   4f880:	subhi	r4, r4, #2
   4f884:	addhi	r1, r1, r8
   4f888:	bhi	4f890 <warn@@Base+0x5c98>
   4f88c:	mov	r4, r2
   4f890:	rsb	r9, r9, r1
   4f894:	orr	r4, r4, r3, lsl #16
   4f898:	b	4f704 <warn@@Base+0x5b0c>
   4f89c:	rsb	sl, r5, #32
   4f8a0:	lsl	r3, r2, r5
   4f8a4:	lsr	r0, r2, sl
   4f8a8:	lsr	r2, ip, sl
   4f8ac:	orr	r4, r0, r1, lsl r5
   4f8b0:	lsr	sl, r7, sl
   4f8b4:	mov	r0, r2
   4f8b8:	orr	sl, sl, ip, lsl r5
   4f8bc:	lsr	r9, r4, #16
   4f8c0:	str	r3, [sp, #4]
   4f8c4:	str	r2, [sp]
   4f8c8:	uxth	fp, r4
   4f8cc:	mov	r1, r9
   4f8d0:	bl	4f040 <warn@@Base+0x5448>
   4f8d4:	ldr	r2, [sp]
   4f8d8:	mov	r1, r9
   4f8dc:	mov	r8, r0
   4f8e0:	mov	r0, r2
   4f8e4:	bl	4f22c <warn@@Base+0x5634>
   4f8e8:	mul	r0, fp, r8
   4f8ec:	lsr	r2, sl, #16
   4f8f0:	orr	r1, r2, r1, lsl #16
   4f8f4:	cmp	r0, r1
   4f8f8:	bls	4f918 <warn@@Base+0x5d20>
   4f8fc:	adds	r1, r1, r4
   4f900:	sub	r2, r8, #1
   4f904:	bcs	4f9cc <warn@@Base+0x5dd4>
   4f908:	cmp	r0, r1
   4f90c:	subhi	r8, r8, #2
   4f910:	addhi	r1, r1, r4
   4f914:	bls	4f9cc <warn@@Base+0x5dd4>
   4f918:	rsb	ip, r0, r1
   4f91c:	mov	r1, r9
   4f920:	str	ip, [sp]
   4f924:	mov	r0, ip
   4f928:	bl	4f040 <warn@@Base+0x5448>
   4f92c:	ldr	ip, [sp]
   4f930:	mov	r1, r9
   4f934:	mov	r2, r0
   4f938:	mov	r0, ip
   4f93c:	str	r2, [sp]
   4f940:	bl	4f22c <warn@@Base+0x5634>
   4f944:	ldr	r2, [sp]
   4f948:	uxth	ip, sl
   4f94c:	mul	fp, fp, r2
   4f950:	orr	ip, ip, r1, lsl #16
   4f954:	cmp	fp, ip
   4f958:	bls	4f978 <warn@@Base+0x5d80>
   4f95c:	adds	ip, ip, r4
   4f960:	sub	r1, r2, #1
   4f964:	bcs	4f9c4 <warn@@Base+0x5dcc>
   4f968:	cmp	fp, ip
   4f96c:	subhi	r2, r2, #2
   4f970:	addhi	ip, ip, r4
   4f974:	bls	4f9c4 <warn@@Base+0x5dcc>
   4f978:	ldr	r0, [sp, #4]
   4f97c:	orr	r1, r2, r8, lsl #16
   4f980:	rsb	fp, fp, ip
   4f984:	umull	r2, r3, r1, r0
   4f988:	cmp	fp, r3
   4f98c:	bcc	4f9b0 <warn@@Base+0x5db8>
   4f990:	movne	r4, #0
   4f994:	moveq	r4, #1
   4f998:	cmp	r2, r7, lsl r5
   4f99c:	movls	r4, #0
   4f9a0:	andhi	r4, r4, #1
   4f9a4:	cmp	r4, #0
   4f9a8:	moveq	r3, r1
   4f9ac:	beq	4f674 <warn@@Base+0x5a7c>
   4f9b0:	sub	r3, r1, #1
   4f9b4:	mov	r4, #0
   4f9b8:	b	4f674 <warn@@Base+0x5a7c>
   4f9bc:	mov	fp, r3
   4f9c0:	b	4f750 <warn@@Base+0x5b58>
   4f9c4:	mov	r2, r1
   4f9c8:	b	4f978 <warn@@Base+0x5d80>
   4f9cc:	mov	r8, r2
   4f9d0:	b	4f918 <warn@@Base+0x5d20>
   4f9d4:	mov	r3, r2
   4f9d8:	b	4f834 <warn@@Base+0x5c3c>
   4f9dc:	cmp	r3, #0
   4f9e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f9e4:	mov	r6, r0
   4f9e8:	sub	sp, sp, #12
   4f9ec:	mov	r5, r1
   4f9f0:	mov	r7, r0
   4f9f4:	mov	r4, r2
   4f9f8:	mov	r8, r1
   4f9fc:	bne	4fadc <warn@@Base+0x5ee4>
   4fa00:	cmp	r2, r1
   4fa04:	bls	4fb18 <warn@@Base+0x5f20>
   4fa08:	clz	r3, r2
   4fa0c:	cmp	r3, #0
   4fa10:	rsbne	r8, r3, #32
   4fa14:	lslne	r4, r2, r3
   4fa18:	lsrne	r8, r0, r8
   4fa1c:	lslne	r7, r0, r3
   4fa20:	orrne	r8, r8, r1, lsl r3
   4fa24:	lsr	r5, r4, #16
   4fa28:	uxth	sl, r4
   4fa2c:	mov	r1, r5
   4fa30:	mov	r0, r8
   4fa34:	bl	4f040 <warn@@Base+0x5448>
   4fa38:	mov	r1, r5
   4fa3c:	mov	r9, r0
   4fa40:	mov	r0, r8
   4fa44:	bl	4f22c <warn@@Base+0x5634>
   4fa48:	mul	r0, sl, r9
   4fa4c:	lsr	r3, r7, #16
   4fa50:	orr	r1, r3, r1, lsl #16
   4fa54:	cmp	r0, r1
   4fa58:	bls	4fa7c <warn@@Base+0x5e84>
   4fa5c:	adds	r1, r1, r4
   4fa60:	sub	r2, r9, #1
   4fa64:	bcs	4fa78 <warn@@Base+0x5e80>
   4fa68:	cmp	r0, r1
   4fa6c:	subhi	r9, r9, #2
   4fa70:	addhi	r1, r1, r4
   4fa74:	bhi	4fa7c <warn@@Base+0x5e84>
   4fa78:	mov	r9, r2
   4fa7c:	rsb	r8, r0, r1
   4fa80:	mov	r1, r5
   4fa84:	uxth	r7, r7
   4fa88:	mov	r0, r8
   4fa8c:	bl	4f040 <warn@@Base+0x5448>
   4fa90:	mov	r1, r5
   4fa94:	mov	r6, r0
   4fa98:	mov	r0, r8
   4fa9c:	bl	4f22c <warn@@Base+0x5634>
   4faa0:	mul	sl, sl, r6
   4faa4:	orr	r1, r7, r1, lsl #16
   4faa8:	cmp	sl, r1
   4faac:	bls	4fac8 <warn@@Base+0x5ed0>
   4fab0:	adds	r4, r1, r4
   4fab4:	sub	r3, r6, #1
   4fab8:	bcs	4fdc4 <warn@@Base+0x61cc>
   4fabc:	cmp	sl, r4
   4fac0:	subhi	r6, r6, #2
   4fac4:	bls	4fdc4 <warn@@Base+0x61cc>
   4fac8:	orr	r0, r6, r9, lsl #16
   4facc:	mov	r6, #0
   4fad0:	mov	r1, r6
   4fad4:	add	sp, sp, #12
   4fad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4fadc:	cmp	r3, r1
   4fae0:	movhi	r6, #0
   4fae4:	movhi	r0, r6
   4fae8:	bhi	4fad0 <warn@@Base+0x5ed8>
   4faec:	clz	r7, r3
   4faf0:	cmp	r7, #0
   4faf4:	bne	4fbf4 <warn@@Base+0x5ffc>
   4faf8:	cmp	r3, r1
   4fafc:	cmpcs	r2, r6
   4fb00:	movhi	r6, #0
   4fb04:	movls	r6, #1
   4fb08:	movls	r0, #1
   4fb0c:	movls	r6, r7
   4fb10:	movhi	r0, r6
   4fb14:	b	4fad0 <warn@@Base+0x5ed8>
   4fb18:	cmp	r2, #0
   4fb1c:	bne	4fb30 <warn@@Base+0x5f38>
   4fb20:	mov	r1, r2
   4fb24:	mov	r0, #1
   4fb28:	bl	4f040 <warn@@Base+0x5448>
   4fb2c:	mov	r4, r0
   4fb30:	clz	r3, r4
   4fb34:	cmp	r3, #0
   4fb38:	bne	4fcf0 <warn@@Base+0x60f8>
   4fb3c:	rsb	r5, r4, r5
   4fb40:	lsr	r8, r4, #16
   4fb44:	uxth	sl, r4
   4fb48:	mov	r6, #1
   4fb4c:	mov	r1, r8
   4fb50:	mov	r0, r5
   4fb54:	bl	4f040 <warn@@Base+0x5448>
   4fb58:	mov	r1, r8
   4fb5c:	mov	r9, r0
   4fb60:	mov	r0, r5
   4fb64:	bl	4f22c <warn@@Base+0x5634>
   4fb68:	mul	r0, sl, r9
   4fb6c:	lsr	r3, r7, #16
   4fb70:	orr	r1, r3, r1, lsl #16
   4fb74:	cmp	r0, r1
   4fb78:	bls	4fb98 <warn@@Base+0x5fa0>
   4fb7c:	adds	r1, r1, r4
   4fb80:	sub	r2, r9, #1
   4fb84:	bcs	4fdcc <warn@@Base+0x61d4>
   4fb88:	cmp	r0, r1
   4fb8c:	subhi	r9, r9, #2
   4fb90:	addhi	r1, r1, r4
   4fb94:	bls	4fdcc <warn@@Base+0x61d4>
   4fb98:	rsb	fp, r0, r1
   4fb9c:	mov	r1, r8
   4fba0:	uxth	r7, r7
   4fba4:	mov	r0, fp
   4fba8:	bl	4f040 <warn@@Base+0x5448>
   4fbac:	mov	r1, r8
   4fbb0:	mov	r5, r0
   4fbb4:	mov	r0, fp
   4fbb8:	bl	4f22c <warn@@Base+0x5634>
   4fbbc:	mul	sl, sl, r5
   4fbc0:	orr	r1, r7, r1, lsl #16
   4fbc4:	cmp	sl, r1
   4fbc8:	bls	4fbe4 <warn@@Base+0x5fec>
   4fbcc:	adds	r4, r1, r4
   4fbd0:	sub	r3, r5, #1
   4fbd4:	bcs	4fdd4 <warn@@Base+0x61dc>
   4fbd8:	cmp	sl, r4
   4fbdc:	subhi	r5, r5, #2
   4fbe0:	bls	4fdd4 <warn@@Base+0x61dc>
   4fbe4:	orr	r0, r5, r9, lsl #16
   4fbe8:	mov	r1, r6
   4fbec:	add	sp, sp, #12
   4fbf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4fbf4:	rsb	r1, r7, #32
   4fbf8:	lsl	r0, r2, r7
   4fbfc:	lsr	r2, r2, r1
   4fc00:	lsr	fp, r5, r1
   4fc04:	orr	r8, r2, r3, lsl r7
   4fc08:	lsr	r1, r6, r1
   4fc0c:	str	r0, [sp, #4]
   4fc10:	orr	r5, r1, r5, lsl r7
   4fc14:	lsr	r9, r8, #16
   4fc18:	mov	r0, fp
   4fc1c:	uxth	sl, r8
   4fc20:	mov	r1, r9
   4fc24:	bl	4f040 <warn@@Base+0x5448>
   4fc28:	mov	r1, r9
   4fc2c:	mov	r4, r0
   4fc30:	mov	r0, fp
   4fc34:	bl	4f22c <warn@@Base+0x5634>
   4fc38:	mul	r0, sl, r4
   4fc3c:	lsr	ip, r5, #16
   4fc40:	orr	r1, ip, r1, lsl #16
   4fc44:	cmp	r0, r1
   4fc48:	bls	4fc5c <warn@@Base+0x6064>
   4fc4c:	adds	r1, r1, r8
   4fc50:	sub	r2, r4, #1
   4fc54:	bcc	4fdf0 <warn@@Base+0x61f8>
   4fc58:	mov	r4, r2
   4fc5c:	rsb	ip, r0, r1
   4fc60:	mov	r1, r9
   4fc64:	str	ip, [sp]
   4fc68:	uxth	r5, r5
   4fc6c:	mov	r0, ip
   4fc70:	bl	4f040 <warn@@Base+0x5448>
   4fc74:	ldr	ip, [sp]
   4fc78:	mov	r1, r9
   4fc7c:	mov	fp, r0
   4fc80:	mov	r0, ip
   4fc84:	bl	4f22c <warn@@Base+0x5634>
   4fc88:	mul	sl, sl, fp
   4fc8c:	orr	r1, r5, r1, lsl #16
   4fc90:	cmp	sl, r1
   4fc94:	bls	4fca8 <warn@@Base+0x60b0>
   4fc98:	adds	r1, r1, r8
   4fc9c:	sub	r2, fp, #1
   4fca0:	bcc	4fddc <warn@@Base+0x61e4>
   4fca4:	mov	fp, r2
   4fca8:	ldr	r3, [sp, #4]
   4fcac:	orr	r0, fp, r4, lsl #16
   4fcb0:	rsb	sl, sl, r1
   4fcb4:	umull	r4, r5, r0, r3
   4fcb8:	cmp	sl, r5
   4fcbc:	bcc	4fcdc <warn@@Base+0x60e4>
   4fcc0:	movne	r3, #0
   4fcc4:	moveq	r3, #1
   4fcc8:	cmp	r4, r6, lsl r7
   4fccc:	movls	r6, #0
   4fcd0:	andhi	r6, r3, #1
   4fcd4:	cmp	r6, #0
   4fcd8:	beq	4fad0 <warn@@Base+0x5ed8>
   4fcdc:	mov	r6, #0
   4fce0:	sub	r0, r0, #1
   4fce4:	mov	r1, r6
   4fce8:	add	sp, sp, #12
   4fcec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4fcf0:	lsl	r4, r4, r3
   4fcf4:	rsb	r9, r3, #32
   4fcf8:	lsr	r2, r5, r9
   4fcfc:	lsr	r9, r6, r9
   4fd00:	lsr	r8, r4, #16
   4fd04:	orr	r9, r9, r5, lsl r3
   4fd08:	mov	r0, r2
   4fd0c:	lsl	r7, r6, r3
   4fd10:	mov	r1, r8
   4fd14:	str	r2, [sp]
   4fd18:	bl	4f040 <warn@@Base+0x5448>
   4fd1c:	ldr	r2, [sp]
   4fd20:	mov	r1, r8
   4fd24:	uxth	sl, r4
   4fd28:	mov	fp, r0
   4fd2c:	mov	r0, r2
   4fd30:	bl	4f22c <warn@@Base+0x5634>
   4fd34:	mul	r0, sl, fp
   4fd38:	lsr	r3, r9, #16
   4fd3c:	orr	r1, r3, r1, lsl #16
   4fd40:	cmp	r0, r1
   4fd44:	bls	4fd64 <warn@@Base+0x616c>
   4fd48:	adds	r1, r1, r4
   4fd4c:	sub	r3, fp, #1
   4fd50:	bcs	4fe04 <warn@@Base+0x620c>
   4fd54:	cmp	r0, r1
   4fd58:	subhi	fp, fp, #2
   4fd5c:	addhi	r1, r1, r4
   4fd60:	bls	4fe04 <warn@@Base+0x620c>
   4fd64:	rsb	r5, r0, r1
   4fd68:	mov	r1, r8
   4fd6c:	uxth	r9, r9
   4fd70:	mov	r0, r5
   4fd74:	bl	4f040 <warn@@Base+0x5448>
   4fd78:	mov	r1, r8
   4fd7c:	mov	r6, r0
   4fd80:	mov	r0, r5
   4fd84:	bl	4f22c <warn@@Base+0x5634>
   4fd88:	mul	r5, sl, r6
   4fd8c:	orr	r1, r9, r1, lsl #16
   4fd90:	cmp	r5, r1
   4fd94:	bls	4fdb8 <warn@@Base+0x61c0>
   4fd98:	adds	r1, r1, r4
   4fd9c:	sub	r3, r6, #1
   4fda0:	bcs	4fdb4 <warn@@Base+0x61bc>
   4fda4:	cmp	r5, r1
   4fda8:	subhi	r6, r6, #2
   4fdac:	addhi	r1, r1, r4
   4fdb0:	bhi	4fdb8 <warn@@Base+0x61c0>
   4fdb4:	mov	r6, r3
   4fdb8:	rsb	r5, r5, r1
   4fdbc:	orr	r6, r6, fp, lsl #16
   4fdc0:	b	4fb4c <warn@@Base+0x5f54>
   4fdc4:	mov	r6, r3
   4fdc8:	b	4fac8 <warn@@Base+0x5ed0>
   4fdcc:	mov	r9, r2
   4fdd0:	b	4fb98 <warn@@Base+0x5fa0>
   4fdd4:	mov	r5, r3
   4fdd8:	b	4fbe4 <warn@@Base+0x5fec>
   4fddc:	cmp	sl, r1
   4fde0:	subhi	fp, fp, #2
   4fde4:	addhi	r1, r1, r8
   4fde8:	bhi	4fca8 <warn@@Base+0x60b0>
   4fdec:	b	4fca4 <warn@@Base+0x60ac>
   4fdf0:	cmp	r0, r1
   4fdf4:	subhi	r4, r4, #2
   4fdf8:	addhi	r1, r1, r8
   4fdfc:	bhi	4fc5c <warn@@Base+0x6064>
   4fe00:	b	4fc58 <warn@@Base+0x6060>
   4fe04:	mov	fp, r3
   4fe08:	b	4fd64 <warn@@Base+0x616c>
   4fe0c:	ldr	r3, [r0]
   4fe10:	tst	r3, #1073741824	; 0x40000000
   4fe14:	orrne	r3, r3, #-2147483648	; 0x80000000
   4fe18:	biceq	r3, r3, #-2147483648	; 0x80000000
   4fe1c:	add	r0, r0, r3
   4fe20:	bx	lr
   4fe24:	cmp	r1, #0
   4fe28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4fe2c:	mov	r6, r0
   4fe30:	sub	sp, sp, #12
   4fe34:	mov	r9, r2
   4fe38:	beq	4febc <warn@@Base+0x62c4>
   4fe3c:	sub	r1, r1, #1
   4fe40:	mov	r7, #0
   4fe44:	str	r1, [sp, #4]
   4fe48:	mov	r8, r1
   4fe4c:	add	r4, r7, r8
   4fe50:	add	r4, r4, r4, lsr #31
   4fe54:	asr	r4, r4, #1
   4fe58:	lsl	r5, r4, #3
   4fe5c:	add	fp, r6, r5
   4fe60:	mov	r0, fp
   4fe64:	bl	4fe0c <warn@@Base+0x6214>
   4fe68:	ldr	r3, [sp, #4]
   4fe6c:	cmp	r3, r4
   4fe70:	mov	sl, r0
   4fe74:	add	r0, r5, #8
   4fe78:	add	r0, r6, r0
   4fe7c:	beq	4fecc <warn@@Base+0x62d4>
   4fe80:	bl	4fe0c <warn@@Base+0x6214>
   4fe84:	cmp	sl, r9
   4fe88:	sub	r0, r0, #1
   4fe8c:	bls	4feac <warn@@Base+0x62b4>
   4fe90:	cmp	r4, r7
   4fe94:	sub	r8, r4, #1
   4fe98:	bne	4fe4c <warn@@Base+0x6254>
   4fe9c:	mov	fp, #0
   4fea0:	mov	r0, fp
   4fea4:	add	sp, sp, #12
   4fea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4feac:	cmp	r0, r9
   4feb0:	add	r7, r4, #1
   4feb4:	bcc	4fe4c <warn@@Base+0x6254>
   4feb8:	b	4fea0 <warn@@Base+0x62a8>
   4febc:	mov	fp, r1
   4fec0:	mov	r0, fp
   4fec4:	add	sp, sp, #12
   4fec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4fecc:	cmp	sl, r9
   4fed0:	bhi	4fe90 <warn@@Base+0x6298>
   4fed4:	b	4fea0 <warn@@Base+0x62a8>
   4fed8:	cmp	r0, #1
   4fedc:	beq	4ff10 <warn@@Base+0x6318>
   4fee0:	cmp	r0, #2
   4fee4:	beq	4ff04 <warn@@Base+0x630c>
   4fee8:	cmp	r0, #0
   4feec:	beq	4fef8 <warn@@Base+0x6300>
   4fef0:	mov	r0, #0
   4fef4:	bx	lr
   4fef8:	ldr	r0, [pc, #28]	; 4ff1c <warn@@Base+0x6324>
   4fefc:	add	r0, pc, r0
   4ff00:	bx	lr
   4ff04:	ldr	r0, [pc, #20]	; 4ff20 <warn@@Base+0x6328>
   4ff08:	add	r0, pc, r0
   4ff0c:	bx	lr
   4ff10:	ldr	r0, [pc, #12]	; 4ff24 <warn@@Base+0x632c>
   4ff14:	add	r0, pc, r0
   4ff18:	bx	lr
   4ff1c:	andeq	r0, r0, r0, lsl #23
   4ff20:	andeq	r0, r0, r4, lsl #23
   4ff24:	andeq	r0, r0, r0, ror fp
   4ff28:	ldr	r3, [pc, #276]	; 50044 <warn@@Base+0x644c>
   4ff2c:	ldr	r2, [pc, #276]	; 50048 <warn@@Base+0x6450>
   4ff30:	add	r3, pc, r3
   4ff34:	push	{r4, r5, lr}
   4ff38:	mov	r4, r0
   4ff3c:	ldr	r2, [r3, r2]
   4ff40:	sub	sp, sp, #12
   4ff44:	sub	r5, r1, #2
   4ff48:	cmp	r2, #0
   4ff4c:	beq	50024 <warn@@Base+0x642c>
   4ff50:	mov	r0, r5
   4ff54:	add	r1, sp, #4
   4ff58:	bl	1240c <__gnu_Unwind_Find_exidx@plt>
   4ff5c:	cmp	r0, #0
   4ff60:	beq	4fff0 <warn@@Base+0x63f8>
   4ff64:	mov	r2, r5
   4ff68:	ldr	r1, [sp, #4]
   4ff6c:	bl	4fe24 <warn@@Base+0x622c>
   4ff70:	subs	r5, r0, #0
   4ff74:	beq	4fff0 <warn@@Base+0x63f8>
   4ff78:	bl	4fe0c <warn@@Base+0x6214>
   4ff7c:	ldr	r3, [r5, #4]
   4ff80:	cmp	r3, #1
   4ff84:	str	r0, [r4, #72]	; 0x48
   4ff88:	beq	4ffd8 <warn@@Base+0x63e0>
   4ff8c:	cmp	r3, #0
   4ff90:	add	r0, r5, #4
   4ff94:	strlt	r0, [r4, #76]	; 0x4c
   4ff98:	movlt	r3, #1
   4ff9c:	strlt	r3, [r4, #80]	; 0x50
   4ffa0:	blt	4ffb4 <warn@@Base+0x63bc>
   4ffa4:	bl	4fe0c <warn@@Base+0x6214>
   4ffa8:	mov	r3, #0
   4ffac:	str	r3, [r4, #80]	; 0x50
   4ffb0:	str	r0, [r4, #76]	; 0x4c
   4ffb4:	ldr	r3, [r0]
   4ffb8:	cmp	r3, #0
   4ffbc:	blt	50008 <warn@@Base+0x6410>
   4ffc0:	bl	4fe0c <warn@@Base+0x6214>
   4ffc4:	mov	r3, #0
   4ffc8:	str	r0, [r4, #16]
   4ffcc:	mov	r0, r3
   4ffd0:	add	sp, sp, #12
   4ffd4:	pop	{r4, r5, pc}
   4ffd8:	mov	r3, #5
   4ffdc:	mov	r2, #0
   4ffe0:	mov	r0, r3
   4ffe4:	str	r2, [r4, #16]
   4ffe8:	add	sp, sp, #12
   4ffec:	pop	{r4, r5, pc}
   4fff0:	mov	r3, #9
   4fff4:	mov	r2, #0
   4fff8:	mov	r0, r3
   4fffc:	str	r2, [r4, #16]
   50000:	add	sp, sp, #12
   50004:	pop	{r4, r5, pc}
   50008:	ubfx	r0, r3, #24, #4
   5000c:	bl	4fed8 <warn@@Base+0x62e0>
   50010:	cmp	r0, #0
   50014:	str	r0, [r4, #16]
   50018:	moveq	r3, #9
   5001c:	movne	r3, #0
   50020:	b	4ffcc <warn@@Base+0x63d4>
   50024:	ldr	r2, [pc, #32]	; 5004c <warn@@Base+0x6454>
   50028:	ldr	r1, [pc, #32]	; 50050 <warn@@Base+0x6458>
   5002c:	ldr	r2, [r3, r2]
   50030:	ldr	r0, [r3, r1]
   50034:	rsb	r3, r0, r2
   50038:	asr	r3, r3, #3
   5003c:	str	r3, [sp, #4]
   50040:	b	4ff64 <warn@@Base+0x636c>
   50044:	andeq	pc, r1, r8, asr #1
   50048:	andeq	r0, r0, r0, asr r2
   5004c:	andeq	r0, r0, r4, asr r2
   50050:	andeq	r0, r0, r4, ror #4
   50054:	ldr	r3, [r0]
   50058:	push	{r4, lr}
   5005c:	tst	r3, #1
   50060:	mov	r4, r0
   50064:	bne	5007c <warn@@Base+0x6484>
   50068:	tst	r3, #2
   5006c:	add	r0, r0, #72	; 0x48
   50070:	beq	500a0 <warn@@Base+0x64a8>
   50074:	bl	50e4c <warn@@Base+0x7254>
   50078:	ldr	r3, [r4]
   5007c:	tst	r3, #4
   50080:	beq	500b0 <warn@@Base+0x64b8>
   50084:	tst	r3, #8
   50088:	beq	500c4 <warn@@Base+0x64cc>
   5008c:	tst	r3, #16
   50090:	popne	{r4, pc}
   50094:	add	r0, r4, #464	; 0x1d0
   50098:	pop	{r4, lr}
   5009c:	b	50ef4 <warn@@Base+0x72fc>
   500a0:	bl	50e3c <warn@@Base+0x7244>
   500a4:	ldr	r3, [r4]
   500a8:	tst	r3, #4
   500ac:	bne	50084 <warn@@Base+0x648c>
   500b0:	add	r0, r4, #208	; 0xd0
   500b4:	bl	50e5c <warn@@Base+0x7264>
   500b8:	ldr	r3, [r4]
   500bc:	tst	r3, #8
   500c0:	bne	5008c <warn@@Base+0x6494>
   500c4:	add	r0, r4, #336	; 0x150
   500c8:	bl	50e6c <warn@@Base+0x7274>
   500cc:	ldr	r3, [r4]
   500d0:	tst	r3, #16
   500d4:	popne	{r4, pc}
   500d8:	b	50094 <warn@@Base+0x649c>
   500dc:	ldr	r3, [r0]
   500e0:	cmp	r3, #0
   500e4:	ldrne	r0, [r3, r0]
   500e8:	moveq	r0, r3
   500ec:	bx	lr
   500f0:	mov	r0, #9
   500f4:	bx	lr
   500f8:	nop	{0}
   500fc:	bx	lr
   50100:	push	{r4, r5, r6, lr}
   50104:	mov	r4, r0
   50108:	mov	r5, r1
   5010c:	b	50134 <warn@@Base+0x653c>
   50110:	ldr	ip, [r5, #64]	; 0x40
   50114:	mov	r0, #1
   50118:	ldr	r3, [r4, #16]
   5011c:	mov	r1, r4
   50120:	mov	r2, r5
   50124:	str	ip, [r4, #20]
   50128:	blx	r3
   5012c:	cmp	r0, #8
   50130:	bne	5014c <warn@@Base+0x6554>
   50134:	mov	r0, r4
   50138:	ldr	r1, [r5, #64]	; 0x40
   5013c:	bl	4ff28 <warn@@Base+0x6330>
   50140:	subs	r6, r0, #0
   50144:	beq	50110 <warn@@Base+0x6518>
   50148:	bl	12790 <abort@plt>
   5014c:	cmp	r0, #7
   50150:	bne	50148 <warn@@Base+0x6550>
   50154:	mov	r0, r6
   50158:	ldr	r1, [r5, #64]	; 0x40
   5015c:	bl	500f8 <warn@@Base+0x6500>
   50160:	add	r0, r5, #4
   50164:	bl	50e28 <warn@@Base+0x7230>
   50168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5016c:	add	r5, r1, #4
   50170:	sub	sp, sp, #980	; 0x3d4
   50174:	mov	r4, r0
   50178:	mov	ip, r2
   5017c:	add	r3, sp, #20
   50180:	str	r3, [sp, #12]
   50184:	add	lr, sp, #20
   50188:	ldm	r5!, {r0, r1, r2, r3}
   5018c:	cmp	ip, #0
   50190:	ldr	r9, [r4, #12]
   50194:	mov	r8, #0
   50198:	ldr	sl, [r4, #24]
   5019c:	movne	fp, #10
   501a0:	moveq	fp, #9
   501a4:	add	r6, sp, #16
   501a8:	stmia	lr!, {r0, r1, r2, r3}
   501ac:	add	r7, sp, #496	; 0x1f0
   501b0:	ldm	r5!, {r0, r1, r2, r3}
   501b4:	stmia	lr!, {r0, r1, r2, r3}
   501b8:	ldm	r5!, {r0, r1, r2, r3}
   501bc:	stmia	lr!, {r0, r1, r2, r3}
   501c0:	ldm	r5, {r0, r1, r2, r3}
   501c4:	stm	lr, {r0, r1, r2, r3}
   501c8:	mov	r0, r4
   501cc:	ldr	r1, [sp, #80]	; 0x50
   501d0:	str	r8, [sp, #16]
   501d4:	bl	4ff28 <warn@@Base+0x6330>
   501d8:	mov	r5, r0
   501dc:	cmp	r5, #0
   501e0:	beq	5021c <warn@@Base+0x6624>
   501e4:	ldr	r0, [sp, #72]	; 0x48
   501e8:	mov	r2, r4
   501ec:	str	r6, [sp]
   501f0:	orr	r1, fp, #16
   501f4:	str	sl, [sp, #4]
   501f8:	mov	r3, r4
   501fc:	str	r0, [sp, #84]	; 0x54
   50200:	mov	r0, #1
   50204:	blx	r9
   50208:	cmp	r0, #0
   5020c:	bne	502b0 <warn@@Base+0x66b8>
   50210:	mov	r0, r5
   50214:	add	sp, sp, #980	; 0x3d4
   50218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5021c:	ldr	r3, [sp, #80]	; 0x50
   50220:	mov	r1, r6
   50224:	mov	r2, #480	; 0x1e0
   50228:	mov	r0, r7
   5022c:	str	r3, [r4, #20]
   50230:	bl	1222c <memcpy@plt>
   50234:	ldr	r3, [r4, #16]
   50238:	mov	r1, r4
   5023c:	mov	r2, r7
   50240:	mov	r0, fp
   50244:	blx	r3
   50248:	ldr	r3, [sp, #552]	; 0x228
   5024c:	mov	r1, fp
   50250:	str	r6, [sp]
   50254:	str	sl, [sp, #4]
   50258:	mov	r2, r4
   5025c:	str	r3, [sp, #84]	; 0x54
   50260:	mov	r3, r4
   50264:	mov	r8, r0
   50268:	mov	r0, #1
   5026c:	blx	r9
   50270:	cmp	r0, #0
   50274:	bne	502b0 <warn@@Base+0x66b8>
   50278:	mov	r0, r6
   5027c:	mov	r1, r7
   50280:	mov	r2, #480	; 0x1e0
   50284:	bl	1222c <memcpy@plt>
   50288:	cmp	r8, #8
   5028c:	bne	502a8 <warn@@Base+0x66b0>
   50290:	mov	r0, r4
   50294:	ldr	r1, [sp, #80]	; 0x50
   50298:	bl	4ff28 <warn@@Base+0x6330>
   5029c:	mov	fp, #9
   502a0:	mov	r5, r0
   502a4:	b	501dc <warn@@Base+0x65e4>
   502a8:	cmp	r8, #7
   502ac:	beq	502bc <warn@@Base+0x66c4>
   502b0:	mov	r0, #9
   502b4:	add	sp, sp, #980	; 0x3d4
   502b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   502bc:	mov	r0, r5
   502c0:	ldr	r1, [sp, #80]	; 0x50
   502c4:	bl	500f8 <warn@@Base+0x6500>
   502c8:	add	r0, sp, #20
   502cc:	bl	50e28 <warn@@Base+0x7230>
   502d0:	ldr	r0, [r0, #68]	; 0x44
   502d4:	bx	lr
   502d8:	ldr	r3, [r1, #60]	; 0x3c
   502dc:	push	{r4, r5, r6, r7, lr}
   502e0:	add	lr, r1, #4
   502e4:	str	r3, [r1, #64]	; 0x40
   502e8:	mov	r7, r1
   502ec:	mov	r4, r0
   502f0:	sub	sp, sp, #484	; 0x1e4
   502f4:	ldm	lr!, {r0, r1, r2, r3}
   502f8:	add	ip, sp, #4
   502fc:	add	r6, sp, #480	; 0x1e0
   50300:	mvn	r5, #0
   50304:	stmia	ip!, {r0, r1, r2, r3}
   50308:	ldm	lr!, {r0, r1, r2, r3}
   5030c:	stmia	ip!, {r0, r1, r2, r3}
   50310:	ldm	lr!, {r0, r1, r2, r3}
   50314:	stmia	ip!, {r0, r1, r2, r3}
   50318:	ldm	lr, {r0, r1, r2, r3}
   5031c:	stm	ip, {r0, r1, r2, r3}
   50320:	str	r5, [r6, #-480]!	; 0xfffffe20
   50324:	b	50344 <warn@@Base+0x674c>
   50328:	ldr	r3, [r4, #16]
   5032c:	mov	r1, r4
   50330:	mov	r2, sp
   50334:	blx	r3
   50338:	cmp	r0, #8
   5033c:	mov	r5, r0
   50340:	bne	50364 <warn@@Base+0x676c>
   50344:	mov	r0, r4
   50348:	ldr	r1, [sp, #64]	; 0x40
   5034c:	bl	4ff28 <warn@@Base+0x6330>
   50350:	cmp	r0, #0
   50354:	beq	50328 <warn@@Base+0x6730>
   50358:	mov	r0, #9
   5035c:	add	sp, sp, #484	; 0x1e4
   50360:	pop	{r4, r5, r6, r7, pc}
   50364:	mov	r0, sp
   50368:	bl	50054 <warn@@Base+0x645c>
   5036c:	cmp	r5, #6
   50370:	bne	50358 <warn@@Base+0x6760>
   50374:	mov	r0, r4
   50378:	mov	r1, r7
   5037c:	bl	50100 <warn@@Base+0x6508>
   50380:	push	{r4}		; (str r4, [sp, #-4]!)
   50384:	ldr	r4, [r3, #60]	; 0x3c
   50388:	str	r1, [r0, #12]
   5038c:	mov	r1, r3
   50390:	str	r2, [r0, #24]
   50394:	mov	r2, #0
   50398:	str	r4, [r3, #64]	; 0x40
   5039c:	pop	{r4}		; (ldr r4, [sp], #4)
   503a0:	b	50168 <warn@@Base+0x6570>
   503a4:	push	{r4, r5, r6, lr}
   503a8:	mov	r4, r0
   503ac:	ldr	r6, [r0, #12]
   503b0:	mov	r5, r1
   503b4:	ldr	r3, [r0, #20]
   503b8:	cmp	r6, #0
   503bc:	str	r3, [r1, #64]	; 0x40
   503c0:	beq	503d0 <warn@@Base+0x67d8>
   503c4:	mov	r2, #1
   503c8:	bl	50168 <warn@@Base+0x6570>
   503cc:	bl	12790 <abort@plt>
   503d0:	ldr	r3, [r0, #16]
   503d4:	mov	r1, r4
   503d8:	mov	r0, #2
   503dc:	mov	r2, r5
   503e0:	blx	r3
   503e4:	cmp	r0, #7
   503e8:	beq	50404 <warn@@Base+0x680c>
   503ec:	cmp	r0, #8
   503f0:	bne	50400 <warn@@Base+0x6808>
   503f4:	mov	r0, r4
   503f8:	mov	r1, r5
   503fc:	bl	50100 <warn@@Base+0x6508>
   50400:	bl	12790 <abort@plt>
   50404:	mov	r0, r6
   50408:	ldr	r1, [r5, #64]	; 0x40
   5040c:	bl	500f8 <warn@@Base+0x6500>
   50410:	add	r0, r5, #4
   50414:	bl	50e28 <warn@@Base+0x7230>
   50418:	ldr	r2, [r0, #12]
   5041c:	cmp	r2, #0
   50420:	beq	50434 <warn@@Base+0x683c>
   50424:	ldr	ip, [r1, #60]	; 0x3c
   50428:	mov	r2, #0
   5042c:	str	ip, [r1, #64]	; 0x40
   50430:	b	50168 <warn@@Base+0x6570>
   50434:	b	502d8 <warn@@Base+0x66e0>
   50438:	bx	lr
   5043c:	push	{r3, lr}
   50440:	ldr	r3, [r0, #8]
   50444:	cmp	r3, #0
   50448:	popeq	{r3, pc}
   5044c:	mov	r1, r0
   50450:	mov	r0, #1
   50454:	blx	r3
   50458:	pop	{r3, pc}
   5045c:	cmp	r1, #4
   50460:	addls	pc, pc, r1, lsl #2
   50464:	b	50498 <warn@@Base+0x68a0>
   50468:	b	50484 <warn@@Base+0x688c>
   5046c:	b	5047c <warn@@Base+0x6884>
   50470:	b	50498 <warn@@Base+0x68a0>
   50474:	b	5047c <warn@@Base+0x6884>
   50478:	b	5047c <warn@@Base+0x6884>
   5047c:	mov	r0, #1
   50480:	bx	lr
   50484:	cmp	r2, #15
   50488:	cmpls	r3, #0
   5048c:	moveq	r3, #0
   50490:	movne	r3, #1
   50494:	beq	504a0 <warn@@Base+0x68a8>
   50498:	mov	r0, #2
   5049c:	bx	lr
   504a0:	add	r2, r0, r2, lsl #2
   504a4:	mov	r0, r3
   504a8:	ldr	r3, [r2, #4]
   504ac:	ldr	r2, [sp]
   504b0:	str	r3, [r2]
   504b4:	bx	lr
   504b8:	push	{lr}		; (str lr, [sp, #-4]!)
   504bc:	sub	sp, sp, #20
   504c0:	mov	r2, r1
   504c4:	mov	r1, #0
   504c8:	add	ip, sp, #12
   504cc:	mov	r3, r1
   504d0:	str	ip, [sp]
   504d4:	bl	5045c <warn@@Base+0x6864>
   504d8:	ldr	r0, [sp, #12]
   504dc:	add	sp, sp, #20
   504e0:	pop	{pc}		; (ldr pc, [sp], #4)
   504e4:	cmp	r1, #4
   504e8:	addls	pc, pc, r1, lsl #2
   504ec:	b	50520 <warn@@Base+0x6928>
   504f0:	b	5050c <warn@@Base+0x6914>
   504f4:	b	50504 <warn@@Base+0x690c>
   504f8:	b	50520 <warn@@Base+0x6928>
   504fc:	b	50504 <warn@@Base+0x690c>
   50500:	b	50504 <warn@@Base+0x690c>
   50504:	mov	r0, #1
   50508:	bx	lr
   5050c:	cmp	r2, #15
   50510:	cmpls	r3, #0
   50514:	moveq	r3, #0
   50518:	movne	r3, #1
   5051c:	beq	50528 <warn@@Base+0x6930>
   50520:	mov	r0, #2
   50524:	bx	lr
   50528:	ldr	ip, [sp]
   5052c:	add	r2, r0, r2, lsl #2
   50530:	mov	r0, r3
   50534:	ldr	r1, [ip]
   50538:	str	r1, [r2, #4]
   5053c:	bx	lr
   50540:	push	{lr}		; (str lr, [sp, #-4]!)
   50544:	sub	sp, sp, #20
   50548:	add	ip, sp, #16
   5054c:	mov	lr, r1
   50550:	mov	r1, #0
   50554:	str	r2, [ip, #-4]!
   50558:	mov	r3, r1
   5055c:	str	ip, [sp]
   50560:	mov	r2, lr
   50564:	bl	504e4 <warn@@Base+0x68ec>
   50568:	add	sp, sp, #20
   5056c:	pop	{pc}		; (ldr pc, [sp], #4)
   50570:	ldr	r3, [r2, #60]	; 0x3c
   50574:	push	{r4, r5, r6, r7, r8, lr}
   50578:	add	lr, r2, #4
   5057c:	str	r3, [r2, #64]	; 0x40
   50580:	mov	r8, r0
   50584:	mov	r7, r1
   50588:	sub	sp, sp, #568	; 0x238
   5058c:	ldm	lr!, {r0, r1, r2, r3}
   50590:	add	ip, sp, #92	; 0x5c
   50594:	mvn	r6, #0
   50598:	add	r4, sp, #88	; 0x58
   5059c:	stmia	ip!, {r0, r1, r2, r3}
   505a0:	ldm	lr!, {r0, r1, r2, r3}
   505a4:	stmia	ip!, {r0, r1, r2, r3}
   505a8:	ldm	lr!, {r0, r1, r2, r3}
   505ac:	stmia	ip!, {r0, r1, r2, r3}
   505b0:	ldm	lr, {r0, r1, r2, r3}
   505b4:	stm	ip, {r0, r1, r2, r3}
   505b8:	str	r6, [sp, #88]	; 0x58
   505bc:	b	505fc <warn@@Base+0x6a04>
   505c0:	bl	50540 <warn@@Base+0x6948>
   505c4:	mov	r1, r7
   505c8:	mov	r0, r4
   505cc:	blx	r8
   505d0:	mov	r1, sp
   505d4:	mov	r2, r4
   505d8:	cmp	r0, #0
   505dc:	mov	r0, #8
   505e0:	bne	5061c <warn@@Base+0x6a24>
   505e4:	ldr	r3, [sp, #16]
   505e8:	blx	r3
   505ec:	cmp	r0, #9
   505f0:	cmpne	r0, #5
   505f4:	mov	r6, r0
   505f8:	beq	50620 <warn@@Base+0x6a28>
   505fc:	ldr	r1, [sp, #152]	; 0x98
   50600:	mov	r0, sp
   50604:	bl	4ff28 <warn@@Base+0x6330>
   50608:	mov	r2, sp
   5060c:	mov	r1, #12
   50610:	cmp	r0, #0
   50614:	mov	r0, r4
   50618:	beq	505c0 <warn@@Base+0x69c8>
   5061c:	mov	r6, #9
   50620:	mov	r0, r4
   50624:	bl	50054 <warn@@Base+0x645c>
   50628:	mov	r0, r6
   5062c:	add	sp, sp, #568	; 0x238
   50630:	pop	{r4, r5, r6, r7, r8, pc}
   50634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50638:	mov	r4, r1
   5063c:	ldr	r1, [r1, #76]	; 0x4c
   50640:	mov	r8, r2
   50644:	sub	sp, sp, #44	; 0x2c
   50648:	subs	r6, r3, #0
   5064c:	ldr	ip, [pc, #1064]	; 50a7c <warn@@Base+0x6e84>
   50650:	add	r3, r1, #4
   50654:	ldr	r2, [r1]
   50658:	and	r7, r0, #3
   5065c:	add	ip, pc, ip
   50660:	str	r3, [sp, #32]
   50664:	str	ip, [sp, #4]
   50668:	str	r2, [sp, #28]
   5066c:	bne	50818 <warn@@Base+0x6c20>
   50670:	lsl	r2, r2, #8
   50674:	strb	r6, [sp, #37]	; 0x25
   50678:	str	r2, [sp, #28]
   5067c:	mov	r2, #3
   50680:	strb	r2, [sp, #36]	; 0x24
   50684:	cmp	r7, #2
   50688:	ldr	r2, [r4, #80]	; 0x50
   5068c:	ldreq	r3, [r4, #56]	; 0x38
   50690:	ands	r2, r2, #1
   50694:	bne	507ec <warn@@Base+0x6bf4>
   50698:	eor	r0, r0, #8
   5069c:	str	r2, [sp, #8]
   506a0:	ubfx	r0, r0, #3, #1
   506a4:	str	r0, [sp, #12]
   506a8:	ldr	r9, [r3]
   506ac:	cmp	r9, #0
   506b0:	beq	507f4 <warn@@Base+0x6bfc>
   506b4:	cmp	r6, #2
   506b8:	mov	r0, r8
   506bc:	addeq	r5, r3, #8
   506c0:	addne	r5, r3, #4
   506c4:	ldreq	sl, [r3, #4]
   506c8:	mov	r1, #15
   506cc:	ldrhne	sl, [r3, #2]
   506d0:	ldrhne	r9, [r3]
   506d4:	ldr	r3, [r4, #72]	; 0x48
   506d8:	bic	fp, sl, #1
   506dc:	add	fp, fp, r3
   506e0:	bl	504b8 <warn@@Base+0x68c0>
   506e4:	cmp	fp, r0
   506e8:	movhi	r0, #0
   506ec:	bhi	50704 <warn@@Base+0x6b0c>
   506f0:	bic	r3, r9, #1
   506f4:	add	fp, fp, r3
   506f8:	cmp	r0, fp
   506fc:	movcs	r0, #0
   50700:	movcc	r0, #1
   50704:	and	sl, sl, #1
   50708:	and	r9, r9, #1
   5070c:	orr	r9, r9, sl, lsl #1
   50710:	cmp	r9, #1
   50714:	beq	50890 <warn@@Base+0x6c98>
   50718:	bcc	50874 <warn@@Base+0x6c7c>
   5071c:	cmp	r9, #2
   50720:	bne	50808 <warn@@Base+0x6c10>
   50724:	ldr	r3, [r5]
   50728:	cmp	r7, #0
   5072c:	bic	fp, r3, #-2147483648	; 0x80000000
   50730:	bne	50844 <warn@@Base+0x6c4c>
   50734:	cmp	r0, #0
   50738:	beq	50860 <warn@@Base+0x6c68>
   5073c:	ldr	r2, [sp, #12]
   50740:	cmp	fp, #0
   50744:	orreq	r2, r2, #1
   50748:	cmp	r2, #0
   5074c:	beq	50860 <warn@@Base+0x6c68>
   50750:	cmp	fp, #0
   50754:	beq	507c8 <warn@@Base+0x6bd0>
   50758:	add	r2, r4, #88	; 0x58
   5075c:	add	ip, sp, #24
   50760:	mov	sl, r7
   50764:	str	r7, [sp, #20]
   50768:	str	r6, [sp, #16]
   5076c:	add	r9, r5, #4
   50770:	mov	r7, r2
   50774:	mov	r6, ip
   50778:	b	50788 <warn@@Base+0x6b90>
   5077c:	cmp	r3, fp
   50780:	mov	sl, r3
   50784:	beq	507c8 <warn@@Base+0x6bd0>
   50788:	mov	r0, r9
   5078c:	str	r7, [sp, #24]
   50790:	bl	500dc <warn@@Base+0x64e4>
   50794:	mov	r3, r6
   50798:	mov	r2, #0
   5079c:	add	r9, r9, #4
   507a0:	mov	r1, r0
   507a4:	mov	r0, r4
   507a8:	bl	124c0 <__cxa_type_match@plt>
   507ac:	add	r3, sl, #1
   507b0:	cmp	r0, #0
   507b4:	beq	5077c <warn@@Base+0x6b84>
   507b8:	cmp	fp, sl
   507bc:	ldr	r7, [sp, #20]
   507c0:	ldr	r6, [sp, #16]
   507c4:	bne	5085c <warn@@Base+0x6c64>
   507c8:	mov	r0, r8
   507cc:	mov	r1, #13
   507d0:	bl	504b8 <warn@@Base+0x68c0>
   507d4:	ldr	r2, [sp, #24]
   507d8:	str	r5, [r4, #40]	; 0x28
   507dc:	mov	r3, #6
   507e0:	str	r2, [r4, #36]	; 0x24
   507e4:	str	r0, [r4, #32]
   507e8:	b	5080c <warn@@Base+0x6c14>
   507ec:	mov	ip, #0
   507f0:	str	ip, [sp, #8]
   507f4:	cmp	r6, #2
   507f8:	ble	508ec <warn@@Base+0x6cf4>
   507fc:	bl	500f0 <warn@@Base+0x64f8>
   50800:	cmp	r0, #0
   50804:	beq	50900 <warn@@Base+0x6d08>
   50808:	mov	r3, #9
   5080c:	mov	r0, r3
   50810:	add	sp, sp, #44	; 0x2c
   50814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50818:	cmp	r6, #2
   5081c:	bgt	50684 <warn@@Base+0x6a8c>
   50820:	lsr	r1, r2, #16
   50824:	strb	r1, [sp, #37]	; 0x25
   50828:	lsl	r2, r2, #16
   5082c:	mov	ip, #2
   50830:	uxtb	r1, r1
   50834:	str	r2, [sp, #28]
   50838:	strb	ip, [sp, #36]	; 0x24
   5083c:	add	r3, r3, r1, lsl #2
   50840:	b	50684 <warn@@Base+0x6a8c>
   50844:	mov	r0, r8
   50848:	mov	r1, #13
   5084c:	ldr	r9, [r4, #32]
   50850:	bl	504b8 <warn@@Base+0x68c0>
   50854:	cmp	r9, r0
   50858:	beq	509a0 <warn@@Base+0x6da8>
   5085c:	ldr	r3, [r5]
   50860:	cmp	r3, #0
   50864:	addlt	r5, r5, #4
   50868:	add	fp, fp, #1
   5086c:	add	r3, r5, fp, lsl #2
   50870:	b	506a8 <warn@@Base+0x6ab0>
   50874:	cmp	r7, #0
   50878:	moveq	r0, #0
   5087c:	andne	r0, r0, #1
   50880:	cmp	r0, #0
   50884:	bne	50a04 <warn@@Base+0x6e0c>
   50888:	add	r3, r5, #4
   5088c:	b	506a8 <warn@@Base+0x6ab0>
   50890:	cmp	r7, #0
   50894:	bne	5094c <warn@@Base+0x6d54>
   50898:	cmp	r0, #0
   5089c:	beq	508e4 <warn@@Base+0x6cec>
   508a0:	ldm	r5, {r2, r3}
   508a4:	cmn	r3, #2
   508a8:	lsr	r9, r2, #31
   508ac:	beq	50808 <warn@@Base+0x6c10>
   508b0:	cmn	r3, #1
   508b4:	add	r3, r4, #88	; 0x58
   508b8:	str	r3, [sp, #24]
   508bc:	beq	509e0 <warn@@Base+0x6de8>
   508c0:	add	r0, r5, #4
   508c4:	bl	500dc <warn@@Base+0x64e4>
   508c8:	mov	r2, r9
   508cc:	add	r3, sp, #24
   508d0:	mov	r1, r0
   508d4:	mov	r0, r4
   508d8:	bl	124c0 <__cxa_type_match@plt>
   508dc:	cmp	r0, #0
   508e0:	bne	50a4c <warn@@Base+0x6e54>
   508e4:	add	r3, r5, #8
   508e8:	b	506a8 <warn@@Base+0x6ab0>
   508ec:	mov	r0, r8
   508f0:	add	r1, sp, #28
   508f4:	bl	51064 <warn@@Base+0x746c>
   508f8:	cmp	r0, #0
   508fc:	bne	50808 <warn@@Base+0x6c10>
   50900:	ldr	ip, [sp, #8]
   50904:	cmp	ip, #0
   50908:	moveq	r3, #8
   5090c:	beq	5080c <warn@@Base+0x6c14>
   50910:	mov	r1, #15
   50914:	mov	r0, r8
   50918:	bl	504b8 <warn@@Base+0x68c0>
   5091c:	mov	r1, #14
   50920:	mov	r2, r0
   50924:	mov	r0, r8
   50928:	bl	50540 <warn@@Base+0x6948>
   5092c:	ldr	r3, [pc, #332]	; 50a80 <warn@@Base+0x6e88>
   50930:	ldr	ip, [sp, #4]
   50934:	mov	r0, r8
   50938:	mov	r1, #15
   5093c:	ldr	r2, [ip, r3]
   50940:	bl	50540 <warn@@Base+0x6948>
   50944:	mov	r3, #7
   50948:	b	5080c <warn@@Base+0x6c14>
   5094c:	mov	r0, r8
   50950:	mov	r1, #13
   50954:	ldr	r9, [r4, #32]
   50958:	bl	504b8 <warn@@Base+0x68c0>
   5095c:	cmp	r9, r0
   50960:	bne	508e4 <warn@@Base+0x6cec>
   50964:	ldr	r3, [r4, #40]	; 0x28
   50968:	cmp	r5, r3
   5096c:	bne	508e4 <warn@@Base+0x6cec>
   50970:	mov	r0, r5
   50974:	bl	4fe0c <warn@@Base+0x6214>
   50978:	mov	r1, #15
   5097c:	mov	r2, r0
   50980:	mov	r0, r8
   50984:	bl	50540 <warn@@Base+0x6948>
   50988:	mov	r0, r8
   5098c:	mov	r2, r4
   50990:	mov	r1, #0
   50994:	bl	50540 <warn@@Base+0x6948>
   50998:	mov	r3, #7
   5099c:	b	5080c <warn@@Base+0x6c14>
   509a0:	ldr	r3, [r4, #40]	; 0x28
   509a4:	cmp	r5, r3
   509a8:	bne	5085c <warn@@Base+0x6c64>
   509ac:	mov	r2, #4
   509b0:	mov	r3, #0
   509b4:	str	fp, [r4, #40]	; 0x28
   509b8:	str	r3, [r4, #44]	; 0x2c
   509bc:	add	r3, r5, r2
   509c0:	str	r2, [r4, #48]	; 0x30
   509c4:	str	r3, [r4, #52]	; 0x34
   509c8:	ldr	r3, [r5]
   509cc:	cmp	r3, #0
   509d0:	blt	50a40 <warn@@Base+0x6e48>
   509d4:	mov	ip, #1
   509d8:	str	ip, [sp, #8]
   509dc:	b	50868 <warn@@Base+0x6c70>
   509e0:	mov	r0, r8
   509e4:	mov	r1, #13
   509e8:	bl	504b8 <warn@@Base+0x68c0>
   509ec:	str	r0, [r4, #32]
   509f0:	ldr	r3, [sp, #24]
   509f4:	str	r3, [r4, #36]	; 0x24
   509f8:	str	r5, [r4, #40]	; 0x28
   509fc:	mov	r3, #6
   50a00:	b	5080c <warn@@Base+0x6c14>
   50a04:	mov	r0, r5
   50a08:	add	r5, r5, #4
   50a0c:	bl	4fe0c <warn@@Base+0x6214>
   50a10:	str	r5, [r4, #56]	; 0x38
   50a14:	mov	r6, r0
   50a18:	mov	r0, r4
   50a1c:	bl	12448 <__cxa_begin_cleanup@plt>
   50a20:	cmp	r0, #0
   50a24:	beq	50808 <warn@@Base+0x6c10>
   50a28:	mov	r0, r8
   50a2c:	mov	r2, r6
   50a30:	mov	r1, #15
   50a34:	bl	50540 <warn@@Base+0x6948>
   50a38:	mov	r3, #7
   50a3c:	b	5080c <warn@@Base+0x6c14>
   50a40:	add	r0, fp, #1
   50a44:	add	r0, r5, r0, lsl #2
   50a48:	b	50974 <warn@@Base+0x6d7c>
   50a4c:	mov	r9, r0
   50a50:	mov	r1, #13
   50a54:	mov	r0, r8
   50a58:	bl	504b8 <warn@@Base+0x68c0>
   50a5c:	cmp	r9, #2
   50a60:	str	r0, [r4, #32]
   50a64:	bne	509f0 <warn@@Base+0x6df8>
   50a68:	ldr	r2, [sp, #24]
   50a6c:	mov	r3, r4
   50a70:	str	r2, [r3, #44]!	; 0x2c
   50a74:	str	r3, [r4, #36]	; 0x24
   50a78:	b	509f8 <warn@@Base+0x6e00>
   50a7c:	muleq	r1, ip, r9
   50a80:	andeq	r0, r0, r8, ror #4
   50a84:	mov	r3, #0
   50a88:	b	50634 <warn@@Base+0x6a3c>
   50a8c:	mov	r3, #1
   50a90:	b	50634 <warn@@Base+0x6a3c>
   50a94:	mov	r3, #2
   50a98:	b	50634 <warn@@Base+0x6a3c>
   50a9c:	push	{r4, r5, r6, r7, r8, lr}
   50aa0:	mov	r4, r0
   50aa4:	sub	sp, sp, #272	; 0x110
   50aa8:	cmp	r1, #4
   50aac:	addls	pc, pc, r1, lsl #2
   50ab0:	b	50ad0 <warn@@Base+0x6ed8>
   50ab4:	b	50cc4 <warn@@Base+0x70cc>
   50ab8:	b	50b44 <warn@@Base+0x6f4c>
   50abc:	b	50ad0 <warn@@Base+0x6ed8>
   50ac0:	b	50ac8 <warn@@Base+0x6ed0>
   50ac4:	b	50adc <warn@@Base+0x6ee4>
   50ac8:	cmp	r3, #3
   50acc:	beq	50d08 <warn@@Base+0x7110>
   50ad0:	mov	r0, #2
   50ad4:	add	sp, sp, #272	; 0x110
   50ad8:	pop	{r4, r5, r6, r7, r8, pc}
   50adc:	cmp	r2, #16
   50ae0:	cmpls	r3, #0
   50ae4:	bne	50ad0 <warn@@Base+0x6ed8>
   50ae8:	ldr	r3, [r0]
   50aec:	tst	r3, #16
   50af0:	bne	50d84 <warn@@Base+0x718c>
   50af4:	add	r5, sp, #136	; 0x88
   50af8:	str	r2, [sp, #4]
   50afc:	mov	r0, r5
   50b00:	bl	50f08 <warn@@Base+0x7310>
   50b04:	ldr	r1, [r4, #56]	; 0x38
   50b08:	ldr	r2, [sp, #4]
   50b0c:	mov	r3, #0
   50b10:	mov	r0, #1
   50b14:	ands	ip, r2, r0, lsl r3
   50b18:	ldrne	ip, [r1]
   50b1c:	addne	r1, r1, #4
   50b20:	strne	ip, [r5, r3, lsl #2]
   50b24:	add	r3, r3, #1
   50b28:	cmp	r3, #4
   50b2c:	bne	50b14 <warn@@Base+0x6f1c>
   50b30:	mov	r0, r5
   50b34:	str	r1, [r4, #56]	; 0x38
   50b38:	bl	50ef4 <warn@@Base+0x72fc>
   50b3c:	mov	r0, #0
   50b40:	b	50ad4 <warn@@Base+0x6edc>
   50b44:	bic	r1, r3, #4
   50b48:	cmp	r1, #1
   50b4c:	bne	50ad0 <warn@@Base+0x6ed8>
   50b50:	cmp	r3, #1
   50b54:	lsr	r5, r2, #16
   50b58:	uxth	r6, r2
   50b5c:	add	r2, r6, r5
   50b60:	movne	r1, #32
   50b64:	moveq	r1, #16
   50b68:	cmp	r1, r2
   50b6c:	bcc	50ad0 <warn@@Base+0x6ed8>
   50b70:	subs	r0, r3, #1
   50b74:	rsbs	r7, r0, #0
   50b78:	adcs	r7, r7, r0
   50b7c:	cmp	r5, #15
   50b80:	movls	r1, #0
   50b84:	movhi	r1, #1
   50b88:	tst	r7, r1
   50b8c:	bne	50ad0 <warn@@Base+0x6ed8>
   50b90:	cmp	r1, #0
   50b94:	movne	r8, r6
   50b98:	bne	50ba8 <warn@@Base+0x6fb0>
   50b9c:	cmp	r2, #16
   50ba0:	bls	50dac <warn@@Base+0x71b4>
   50ba4:	sub	r8, r2, #16
   50ba8:	cmp	r8, #0
   50bac:	cmpne	r3, #5
   50bb0:	bne	50ad0 <warn@@Base+0x6ed8>
   50bb4:	cmp	r5, #15
   50bb8:	bhi	50be8 <warn@@Base+0x6ff0>
   50bbc:	ldr	r2, [r4]
   50bc0:	tst	r2, #1
   50bc4:	beq	50be8 <warn@@Base+0x6ff0>
   50bc8:	cmp	r3, #5
   50bcc:	mov	r0, r4
   50bd0:	bic	r3, r2, #1
   50bd4:	str	r3, [r4]
   50bd8:	beq	50e18 <warn@@Base+0x7220>
   50bdc:	bic	r2, r2, #3
   50be0:	str	r2, [r0], #72	; 0x48
   50be4:	bl	50e44 <warn@@Base+0x724c>
   50be8:	cmp	r8, #0
   50bec:	beq	50bfc <warn@@Base+0x7004>
   50bf0:	ldr	r3, [r4]
   50bf4:	tst	r3, #4
   50bf8:	bne	50df0 <warn@@Base+0x71f8>
   50bfc:	cmp	r7, #0
   50c00:	bne	50e04 <warn@@Base+0x720c>
   50c04:	cmp	r5, #15
   50c08:	bls	50dd4 <warn@@Base+0x71dc>
   50c0c:	cmp	r8, #0
   50c10:	bne	50de0 <warn@@Base+0x71e8>
   50c14:	ldr	ip, [r4, #56]	; 0x38
   50c18:	cmp	r6, #0
   50c1c:	mov	r2, ip
   50c20:	ble	50c54 <warn@@Base+0x705c>
   50c24:	add	r0, sp, #136	; 0x88
   50c28:	lsl	r6, r6, #1
   50c2c:	add	r0, r0, r5, lsl #3
   50c30:	sub	r1, r6, #1
   50c34:	rsb	r0, ip, r0
   50c38:	sub	r3, ip, #4
   50c3c:	sub	r1, r1, #1
   50c40:	ldr	r2, [r3, #4]!
   50c44:	cmn	r1, #1
   50c48:	str	r2, [r0, r3]
   50c4c:	bne	50c3c <warn@@Base+0x7044>
   50c50:	add	r2, ip, r6, lsl #2
   50c54:	cmp	r8, #0
   50c58:	beq	50c98 <warn@@Base+0x70a0>
   50c5c:	cmp	r5, #16
   50c60:	movcs	r0, r5
   50c64:	movcc	r0, #16
   50c68:	add	r6, sp, #272	; 0x110
   50c6c:	lsl	r1, r8, #1
   50c70:	mov	ip, r2
   50c74:	add	r0, r6, r0, lsl #3
   50c78:	sub	r3, r1, #1
   50c7c:	sub	r0, r0, #392	; 0x188
   50c80:	sub	r3, r3, #1
   50c84:	ldr	r6, [ip], #4
   50c88:	cmn	r3, #1
   50c8c:	str	r6, [r0], #4
   50c90:	bne	50c80 <warn@@Base+0x7088>
   50c94:	add	r2, r2, r1, lsl #2
   50c98:	cmp	r7, #0
   50c9c:	bne	50db4 <warn@@Base+0x71bc>
   50ca0:	cmp	r5, #15
   50ca4:	str	r2, [r4, #56]	; 0x38
   50ca8:	bls	50dc8 <warn@@Base+0x71d0>
   50cac:	cmp	r8, #0
   50cb0:	beq	50cbc <warn@@Base+0x70c4>
   50cb4:	add	r0, sp, #8
   50cb8:	bl	50e5c <warn@@Base+0x7264>
   50cbc:	mov	r0, #0
   50cc0:	b	50ad4 <warn@@Base+0x6edc>
   50cc4:	cmp	r3, #0
   50cc8:	bne	50ad0 <warn@@Base+0x6ed8>
   50ccc:	ldr	r1, [r0, #56]	; 0x38
   50cd0:	uxth	r5, r2
   50cd4:	mov	ip, #1
   50cd8:	ands	r0, r5, ip, lsl r3
   50cdc:	add	r0, r4, r3, lsl #2
   50ce0:	add	r3, r3, #1
   50ce4:	ldrne	r6, [r1]
   50ce8:	addne	r1, r1, #4
   50cec:	strne	r6, [r0, #4]
   50cf0:	cmp	r3, #16
   50cf4:	bne	50cd8 <warn@@Base+0x70e0>
   50cf8:	ands	r0, r2, #8192	; 0x2000
   50cfc:	streq	r1, [r4, #56]	; 0x38
   50d00:	beq	50ad4 <warn@@Base+0x6edc>
   50d04:	b	50cbc <warn@@Base+0x70c4>
   50d08:	lsr	r6, r2, #16
   50d0c:	uxth	r7, r2
   50d10:	add	r3, r7, r6
   50d14:	cmp	r3, #16
   50d18:	bhi	50ad0 <warn@@Base+0x6ed8>
   50d1c:	ldr	r3, [r0]
   50d20:	tst	r3, #8
   50d24:	bne	50d9c <warn@@Base+0x71a4>
   50d28:	add	r5, sp, #136	; 0x88
   50d2c:	lsl	r7, r7, #1
   50d30:	mov	r0, r5
   50d34:	bl	50eb0 <warn@@Base+0x72b8>
   50d38:	ldr	ip, [r4, #56]	; 0x38
   50d3c:	cmp	r7, #0
   50d40:	add	r0, r5, r6, lsl #3
   50d44:	sub	r3, r7, #1
   50d48:	mov	r2, ip
   50d4c:	beq	50d70 <warn@@Base+0x7178>
   50d50:	rsb	r0, ip, r0
   50d54:	sub	r2, ip, #4
   50d58:	sub	r3, r3, #1
   50d5c:	ldr	r1, [r2, #4]!
   50d60:	cmn	r3, #1
   50d64:	str	r1, [r0, r2]
   50d68:	bne	50d58 <warn@@Base+0x7160>
   50d6c:	add	r2, ip, r7, lsl #2
   50d70:	mov	r0, r5
   50d74:	str	r2, [r4, #56]	; 0x38
   50d78:	bl	50e6c <warn@@Base+0x7274>
   50d7c:	mov	r0, #0
   50d80:	b	50ad4 <warn@@Base+0x6edc>
   50d84:	bic	r3, r3, #16
   50d88:	str	r3, [r0], #464	; 0x1d0
   50d8c:	str	r2, [sp, #4]
   50d90:	bl	50f08 <warn@@Base+0x7310>
   50d94:	ldr	r2, [sp, #4]
   50d98:	b	50af4 <warn@@Base+0x6efc>
   50d9c:	bic	r3, r3, #8
   50da0:	str	r3, [r0], #336	; 0x150
   50da4:	bl	50eb0 <warn@@Base+0x72b8>
   50da8:	b	50d28 <warn@@Base+0x7130>
   50dac:	mov	r8, r1
   50db0:	b	50bb4 <warn@@Base+0x6fbc>
   50db4:	add	r2, r2, #4
   50db8:	add	r0, sp, #136	; 0x88
   50dbc:	str	r2, [r4, #56]	; 0x38
   50dc0:	bl	50e3c <warn@@Base+0x7244>
   50dc4:	b	50cbc <warn@@Base+0x70c4>
   50dc8:	add	r0, sp, #136	; 0x88
   50dcc:	bl	50e4c <warn@@Base+0x7254>
   50dd0:	b	50cac <warn@@Base+0x70b4>
   50dd4:	add	r0, sp, #136	; 0x88
   50dd8:	bl	50e54 <warn@@Base+0x725c>
   50ddc:	b	50c0c <warn@@Base+0x7014>
   50de0:	add	r0, sp, #8
   50de4:	bl	50e64 <warn@@Base+0x726c>
   50de8:	rsb	r6, r5, #16
   50dec:	b	50c14 <warn@@Base+0x701c>
   50df0:	mov	r0, r4
   50df4:	bic	r3, r3, #4
   50df8:	str	r3, [r0], #208	; 0xd0
   50dfc:	bl	50e64 <warn@@Base+0x726c>
   50e00:	b	50bfc <warn@@Base+0x7004>
   50e04:	add	r0, sp, #136	; 0x88
   50e08:	bl	50e44 <warn@@Base+0x724c>
   50e0c:	cmp	r8, #0
   50e10:	bne	50de8 <warn@@Base+0x71f0>
   50e14:	b	50c14 <warn@@Base+0x701c>
   50e18:	orr	r3, r3, #2
   50e1c:	str	r3, [r0], #72	; 0x48
   50e20:	bl	50e54 <warn@@Base+0x725c>
   50e24:	b	50be8 <warn@@Base+0x6ff0>
   50e28:	add	r1, r0, #52	; 0x34
   50e2c:	ldm	r1, {r3, r4, r5}
   50e30:	push	{r3, r4, r5}
   50e34:	ldm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   50e38:	ldm	sp, {sp, lr, pc}
   50e3c:	fldmiax	r0, {d0-d15}	;@ Deprecated
   50e40:	bx	lr
   50e44:	fstmiax	r0, {d0-d15}	;@ Deprecated
   50e48:	bx	lr
   50e4c:	vldmia	r0, {d0-d15}
   50e50:	bx	lr
   50e54:	vstmia	r0, {d0-d15}
   50e58:	bx	lr
   50e5c:	vldmia	r0, {d16-d31}
   50e60:	bx	lr
   50e64:	vstmia	r0, {d16-d31}
   50e68:	bx	lr
   50e6c:	ldfe	f0, [r0], #8
   50e70:	ldfe	f1, [r0], #8
   50e74:	ldfe	f2, [r0], #8
   50e78:	ldfe	f3, [r0], #8
   50e7c:	ldfe	f4, [r0], #8
   50e80:	ldfe	f5, [r0], #8
   50e84:	ldfe	f6, [r0], #8
   50e88:	ldfe	f7, [r0], #8
   50e8c:	ldfp	f0, [r0], #8
   50e90:	ldfp	f1, [r0], #8
   50e94:	ldfp	f2, [r0], #8
   50e98:	ldfp	f3, [r0], #8
   50e9c:	ldfp	f4, [r0], #8
   50ea0:	ldfp	f5, [r0], #8
   50ea4:	ldfp	f6, [r0], #8
   50ea8:	ldfp	f7, [r0], #8
   50eac:	bx	lr
   50eb0:	stfe	f0, [r0], #8
   50eb4:	stfe	f1, [r0], #8
   50eb8:	stfe	f2, [r0], #8
   50ebc:	stfe	f3, [r0], #8
   50ec0:	stfe	f4, [r0], #8
   50ec4:	stfe	f5, [r0], #8
   50ec8:	stfe	f6, [r0], #8
   50ecc:	stfe	f7, [r0], #8
   50ed0:	stfp	f0, [r0], #8
   50ed4:	stfp	f1, [r0], #8
   50ed8:	stfp	f2, [r0], #8
   50edc:	stfp	f3, [r0], #8
   50ee0:	stfp	f4, [r0], #8
   50ee4:	stfp	f5, [r0], #8
   50ee8:	stfp	f6, [r0], #8
   50eec:	stfp	f7, [r0], #8
   50ef0:	bx	lr
   50ef4:	ldc2	1, cr8, [r0], #4
   50ef8:	ldc2	1, cr9, [r0], #4
   50efc:	ldc2	1, cr10, [r0], #4
   50f00:	ldc2	1, cr11, [r0], #4
   50f04:	bx	lr
   50f08:	stc2	1, cr8, [r0], #4
   50f0c:	stc2	1, cr9, [r0], #4
   50f10:	stc2	1, cr10, [r0], #4
   50f14:	stc2	1, cr11, [r0], #4
   50f18:	bx	lr
   50f1c:	push	{sp, lr, pc}
   50f20:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   50f24:	mov	r3, #0
   50f28:	push	{r2, r3}
   50f2c:	add	r1, sp, #4
   50f30:	bl	502d8 <warn@@Base+0x66e0>
   50f34:	ldr	lr, [sp, #64]	; 0x40
   50f38:	add	sp, sp, #72	; 0x48
   50f3c:	bx	lr
   50f40:	push	{sp, lr, pc}
   50f44:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   50f48:	mov	r3, #0
   50f4c:	push	{r2, r3}
   50f50:	add	r1, sp, #4
   50f54:	bl	503a4 <warn@@Base+0x67ac>
   50f58:	ldr	lr, [sp, #64]	; 0x40
   50f5c:	add	sp, sp, #72	; 0x48
   50f60:	bx	lr
   50f64:	push	{sp, lr, pc}
   50f68:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   50f6c:	mov	r3, #0
   50f70:	push	{r2, r3}
   50f74:	add	r1, sp, #4
   50f78:	bl	50418 <warn@@Base+0x6820>
   50f7c:	ldr	lr, [sp, #64]	; 0x40
   50f80:	add	sp, sp, #72	; 0x48
   50f84:	bx	lr
   50f88:	push	{sp, lr, pc}
   50f8c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   50f90:	mov	r3, #0
   50f94:	push	{r2, r3}
   50f98:	add	r3, sp, #4
   50f9c:	bl	50380 <warn@@Base+0x6788>
   50fa0:	ldr	lr, [sp, #64]	; 0x40
   50fa4:	add	sp, sp, #72	; 0x48
   50fa8:	bx	lr
   50fac:	push	{sp, lr, pc}
   50fb0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   50fb4:	mov	r3, #0
   50fb8:	push	{r2, r3}
   50fbc:	add	r2, sp, #4
   50fc0:	bl	50570 <warn@@Base+0x6978>
   50fc4:	ldr	lr, [sp, #64]	; 0x40
   50fc8:	add	sp, sp, #72	; 0x48
   50fcc:	bx	lr
   50fd0:	ldrb	r2, [r0, #8]
   50fd4:	mov	r3, r0
   50fd8:	cmp	r2, #0
   50fdc:	bne	50ff4 <warn@@Base+0x73fc>
   50fe0:	ldrb	r2, [r0, #9]
   50fe4:	cmp	r2, #0
   50fe8:	bne	51010 <warn@@Base+0x7418>
   50fec:	mov	r0, #176	; 0xb0
   50ff0:	bx	lr
   50ff4:	ldr	r0, [r0]
   50ff8:	sub	r2, r2, #1
   50ffc:	strb	r2, [r3, #8]
   51000:	lsl	r2, r0, #8
   51004:	lsr	r0, r0, #24
   51008:	str	r2, [r3]
   5100c:	bx	lr
   51010:	ldr	r1, [r0, #4]
   51014:	sub	r2, r2, #1
   51018:	strb	r2, [r0, #9]
   5101c:	mov	r2, #3
   51020:	add	r0, r1, #4
   51024:	str	r0, [r3, #4]
   51028:	ldr	r0, [r1]
   5102c:	strb	r2, [r3, #8]
   51030:	b	51000 <warn@@Base+0x7408>
   51034:	push	{lr}		; (str lr, [sp, #-4]!)
   51038:	sub	sp, sp, #20
   5103c:	mov	r1, #0
   51040:	add	r2, sp, #12
   51044:	mov	r3, r1
   51048:	str	r2, [sp]
   5104c:	mov	r2, #12
   51050:	bl	5045c <warn@@Base+0x6864>
   51054:	ldr	r0, [sp, #12]
   51058:	add	sp, sp, #20
   5105c:	pop	{pc}		; (ldr pc, [sp], #4)
   51060:	b	51034 <warn@@Base+0x743c>
   51064:	push	{r4, r5, r6, r7, r8, r9, lr}
   51068:	sub	sp, sp, #20
   5106c:	add	r7, sp, #12
   51070:	mov	r6, r0
   51074:	mov	r5, r1
   51078:	mov	r8, #0
   5107c:	mov	r0, r5
   51080:	bl	50fd0 <warn@@Base+0x73d8>
   51084:	cmp	r0, #176	; 0xb0
   51088:	mov	r4, r0
   5108c:	beq	512a8 <warn@@Base+0x76b0>
   51090:	bic	r2, r0, #127	; 0x7f
   51094:	ands	r1, r2, #255	; 0xff
   51098:	beq	51104 <warn@@Base+0x750c>
   5109c:	and	r2, r0, #240	; 0xf0
   510a0:	cmp	r2, #128	; 0x80
   510a4:	beq	51200 <warn@@Base+0x7608>
   510a8:	cmp	r2, #144	; 0x90
   510ac:	beq	51154 <warn@@Base+0x755c>
   510b0:	cmp	r2, #160	; 0xa0
   510b4:	beq	5117c <warn@@Base+0x7584>
   510b8:	cmp	r2, #176	; 0xb0
   510bc:	beq	511b4 <warn@@Base+0x75bc>
   510c0:	cmp	r2, #192	; 0xc0
   510c4:	beq	51248 <warn@@Base+0x7650>
   510c8:	and	r3, r0, #248	; 0xf8
   510cc:	cmp	r3, #208	; 0xd0
   510d0:	bne	510f8 <warn@@Base+0x7500>
   510d4:	and	r4, r0, #7
   510d8:	mov	r1, #1
   510dc:	add	r2, r4, #1
   510e0:	mov	r0, r6
   510e4:	orr	r2, r2, #524288	; 0x80000
   510e8:	mov	r3, #5
   510ec:	bl	50a9c <warn@@Base+0x6ea4>
   510f0:	cmp	r0, #0
   510f4:	beq	5107c <warn@@Base+0x7484>
   510f8:	mov	r0, #9
   510fc:	add	sp, sp, #20
   51100:	pop	{r4, r5, r6, r7, r8, r9, pc}
   51104:	lsl	r9, r0, #2
   51108:	mov	r3, r1
   5110c:	str	r7, [sp]
   51110:	mov	r0, r6
   51114:	mov	r2, #13
   51118:	uxtb	r9, r9
   5111c:	bl	5045c <warn@@Base+0x6864>
   51120:	ldr	r3, [sp, #12]
   51124:	add	r9, r9, #4
   51128:	tst	r4, #64	; 0x40
   5112c:	rsbne	r9, r9, r3
   51130:	addeq	r9, r3, r9
   51134:	str	r9, [sp, #12]
   51138:	mov	r1, #0
   5113c:	str	r7, [sp]
   51140:	mov	r3, r1
   51144:	mov	r0, r6
   51148:	mov	r2, #13
   5114c:	bl	504e4 <warn@@Base+0x68ec>
   51150:	b	5107c <warn@@Base+0x7484>
   51154:	and	r3, r0, #13
   51158:	cmp	r3, #13
   5115c:	beq	510f8 <warn@@Base+0x7500>
   51160:	mov	r1, #0
   51164:	and	r2, r0, #15
   51168:	str	r7, [sp]
   5116c:	mov	r3, r1
   51170:	mov	r0, r6
   51174:	bl	5045c <warn@@Base+0x6864>
   51178:	b	51138 <warn@@Base+0x7540>
   5117c:	mvn	r4, r0
   51180:	mov	r2, #4080	; 0xff0
   51184:	and	r4, r4, #7
   51188:	tst	r0, #8
   5118c:	asr	r2, r2, r4
   51190:	mov	r1, #0
   51194:	and	r2, r2, #4080	; 0xff0
   51198:	orrne	r2, r2, #16384	; 0x4000
   5119c:	mov	r3, r1
   511a0:	mov	r0, r6
   511a4:	bl	50a9c <warn@@Base+0x6ea4>
   511a8:	cmp	r0, #0
   511ac:	bne	510f8 <warn@@Base+0x7500>
   511b0:	b	5107c <warn@@Base+0x7484>
   511b4:	cmp	r0, #177	; 0xb1
   511b8:	beq	512f0 <warn@@Base+0x76f8>
   511bc:	cmp	r0, #178	; 0xb2
   511c0:	beq	5130c <warn@@Base+0x7714>
   511c4:	cmp	r0, #179	; 0xb3
   511c8:	beq	5138c <warn@@Base+0x7794>
   511cc:	and	r3, r0, #252	; 0xfc
   511d0:	cmp	r3, #180	; 0xb4
   511d4:	beq	510f8 <warn@@Base+0x7500>
   511d8:	and	r2, r0, #7
   511dc:	mov	r1, #1
   511e0:	add	r2, r2, r1
   511e4:	mov	r3, r1
   511e8:	orr	r2, r2, #524288	; 0x80000
   511ec:	mov	r0, r6
   511f0:	bl	50a9c <warn@@Base+0x6ea4>
   511f4:	cmp	r0, #0
   511f8:	bne	510f8 <warn@@Base+0x7500>
   511fc:	b	5107c <warn@@Base+0x7484>
   51200:	mov	r0, r5
   51204:	lsl	r4, r4, #8
   51208:	bl	50fd0 <warn@@Base+0x73d8>
   5120c:	orr	r0, r0, r4
   51210:	cmp	r0, #32768	; 0x8000
   51214:	beq	510f8 <warn@@Base+0x7500>
   51218:	lsl	r4, r0, #4
   5121c:	mov	r1, #0
   51220:	movw	r2, #65520	; 0xfff0
   51224:	mov	r3, r1
   51228:	and	r2, r4, r2
   5122c:	mov	r0, r6
   51230:	bl	50a9c <warn@@Base+0x6ea4>
   51234:	cmp	r0, #0
   51238:	bne	510f8 <warn@@Base+0x7500>
   5123c:	tst	r4, #32768	; 0x8000
   51240:	movne	r8, #1
   51244:	b	5107c <warn@@Base+0x7484>
   51248:	cmp	r0, #198	; 0xc6
   5124c:	beq	513ac <warn@@Base+0x77b4>
   51250:	cmp	r0, #199	; 0xc7
   51254:	beq	513c8 <warn@@Base+0x77d0>
   51258:	and	r3, r0, #248	; 0xf8
   5125c:	cmp	r3, #192	; 0xc0
   51260:	beq	513f8 <warn@@Base+0x7800>
   51264:	cmp	r0, #200	; 0xc8
   51268:	beq	51420 <warn@@Base+0x7828>
   5126c:	cmp	r0, #201	; 0xc9
   51270:	bne	510f8 <warn@@Base+0x7500>
   51274:	mov	r0, r5
   51278:	bl	50fd0 <warn@@Base+0x73d8>
   5127c:	mov	r1, #1
   51280:	and	r3, r0, #15
   51284:	and	r2, r0, #240	; 0xf0
   51288:	add	r3, r3, #1
   5128c:	mov	r0, r6
   51290:	orr	r2, r3, r2, lsl #12
   51294:	mov	r3, #5
   51298:	bl	50a9c <warn@@Base+0x6ea4>
   5129c:	cmp	r0, #0
   512a0:	bne	510f8 <warn@@Base+0x7500>
   512a4:	b	5107c <warn@@Base+0x7484>
   512a8:	cmp	r8, #0
   512ac:	movne	r0, #0
   512b0:	bne	510fc <warn@@Base+0x7504>
   512b4:	add	r4, sp, #12
   512b8:	mov	r1, r8
   512bc:	mov	r2, #14
   512c0:	mov	r3, r8
   512c4:	mov	r0, r6
   512c8:	str	r4, [sp]
   512cc:	bl	5045c <warn@@Base+0x6864>
   512d0:	str	r4, [sp]
   512d4:	mov	r0, r6
   512d8:	mov	r1, r8
   512dc:	mov	r2, #15
   512e0:	mov	r3, r8
   512e4:	bl	504e4 <warn@@Base+0x68ec>
   512e8:	mov	r0, r8
   512ec:	b	510fc <warn@@Base+0x7504>
   512f0:	mov	r0, r5
   512f4:	bl	50fd0 <warn@@Base+0x73d8>
   512f8:	subs	r2, r0, #0
   512fc:	beq	510f8 <warn@@Base+0x7500>
   51300:	ands	r1, r2, #240	; 0xf0
   51304:	beq	5119c <warn@@Base+0x75a4>
   51308:	b	510f8 <warn@@Base+0x7500>
   5130c:	mov	r1, #0
   51310:	mov	r2, #13
   51314:	mov	r3, r1
   51318:	str	r7, [sp]
   5131c:	mov	r0, r6
   51320:	mov	r4, #2
   51324:	bl	5045c <warn@@Base+0x6864>
   51328:	mov	r0, r5
   5132c:	bl	50fd0 <warn@@Base+0x73d8>
   51330:	tst	r0, #128	; 0x80
   51334:	beq	5135c <warn@@Base+0x7764>
   51338:	and	r2, r0, #127	; 0x7f
   5133c:	ldr	r3, [sp, #12]
   51340:	mov	r0, r5
   51344:	add	r3, r3, r2, lsl r4
   51348:	str	r3, [sp, #12]
   5134c:	bl	50fd0 <warn@@Base+0x73d8>
   51350:	add	r4, r4, #7
   51354:	tst	r0, #128	; 0x80
   51358:	bne	51338 <warn@@Base+0x7740>
   5135c:	ldr	ip, [sp, #12]
   51360:	and	lr, r0, #127	; 0x7f
   51364:	mov	r1, #0
   51368:	str	r7, [sp]
   5136c:	add	ip, ip, #516	; 0x204
   51370:	mov	r3, r1
   51374:	mov	r0, r6
   51378:	mov	r2, #13
   5137c:	add	r4, ip, lr, lsl r4
   51380:	str	r4, [sp, #12]
   51384:	bl	504e4 <warn@@Base+0x68ec>
   51388:	b	5107c <warn@@Base+0x7484>
   5138c:	mov	r0, r5
   51390:	bl	50fd0 <warn@@Base+0x73d8>
   51394:	mov	r1, #1
   51398:	and	r3, r0, #15
   5139c:	and	r2, r0, #240	; 0xf0
   513a0:	add	r3, r3, #1
   513a4:	orr	r2, r3, r2, lsl #12
   513a8:	b	5119c <warn@@Base+0x75a4>
   513ac:	mov	r0, r5
   513b0:	bl	50fd0 <warn@@Base+0x73d8>
   513b4:	mov	r1, #3
   513b8:	and	r3, r0, #15
   513bc:	and	r2, r0, #240	; 0xf0
   513c0:	add	r3, r3, #1
   513c4:	b	513a4 <warn@@Base+0x77ac>
   513c8:	mov	r0, r5
   513cc:	bl	50fd0 <warn@@Base+0x73d8>
   513d0:	subs	r2, r0, #0
   513d4:	beq	510f8 <warn@@Base+0x7500>
   513d8:	ands	r3, r2, #240	; 0xf0
   513dc:	bne	510f8 <warn@@Base+0x7500>
   513e0:	mov	r0, r6
   513e4:	mov	r1, #4
   513e8:	bl	50a9c <warn@@Base+0x6ea4>
   513ec:	cmp	r0, #0
   513f0:	bne	510f8 <warn@@Base+0x7500>
   513f4:	b	5107c <warn@@Base+0x7484>
   513f8:	and	r2, r0, #15
   513fc:	mov	r1, #3
   51400:	add	r2, r2, #1
   51404:	mov	r3, r1
   51408:	orr	r2, r2, #655360	; 0xa0000
   5140c:	mov	r0, r6
   51410:	bl	50a9c <warn@@Base+0x6ea4>
   51414:	cmp	r0, #0
   51418:	bne	510f8 <warn@@Base+0x7500>
   5141c:	b	5107c <warn@@Base+0x7484>
   51420:	mov	r0, r5
   51424:	bl	50fd0 <warn@@Base+0x73d8>
   51428:	mov	r1, #1
   5142c:	and	r2, r0, #240	; 0xf0
   51430:	and	r3, r0, #15
   51434:	add	r2, r2, #16
   51438:	add	r3, r3, #1
   5143c:	mov	r0, r6
   51440:	orr	r2, r3, r2, lsl #12
   51444:	mov	r3, #5
   51448:	bl	50a9c <warn@@Base+0x6ea4>
   5144c:	cmp	r0, #0
   51450:	bne	510f8 <warn@@Base+0x7500>
   51454:	b	5107c <warn@@Base+0x7484>
   51458:	ldr	r3, [r0, #76]	; 0x4c
   5145c:	mov	r0, r1
   51460:	push	{lr}		; (str lr, [sp, #-4]!)
   51464:	sub	sp, sp, #20
   51468:	ldr	r2, [r3, #4]
   5146c:	add	ip, r3, #8
   51470:	mov	lr, #3
   51474:	strb	lr, [sp, #12]
   51478:	ldrb	r3, [r3, #7]
   5147c:	add	r1, sp, #4
   51480:	lsl	r2, r2, #8
   51484:	stmib	sp, {r2, ip}
   51488:	strb	r3, [sp, #13]
   5148c:	bl	51064 <warn@@Base+0x746c>
   51490:	add	sp, sp, #20
   51494:	pop	{pc}		; (ldr pc, [sp], #4)
   51498:	push	{r3, lr}
   5149c:	bl	51060 <warn@@Base+0x7468>
   514a0:	ldr	r0, [r0, #72]	; 0x48
   514a4:	pop	{r3, pc}
   514a8:	push	{r3, lr}
   514ac:	bl	51060 <warn@@Base+0x7468>
   514b0:	ldr	r3, [r0, #76]	; 0x4c
   514b4:	ldrb	r2, [r3, #7]
   514b8:	add	r0, r3, r2, lsl #2
   514bc:	add	r0, r0, #8
   514c0:	pop	{r3, pc}
   514c4:	push	{r3, lr}
   514c8:	bl	12790 <abort@plt>
   514cc:	push	{r3, lr}
   514d0:	bl	12790 <abort@plt>
   514d4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   514d8:	mov	r7, r0
   514dc:	ldr	r6, [pc, #76]	; 51530 <warn@@Base+0x7938>
   514e0:	mov	r8, r1
   514e4:	ldr	r5, [pc, #72]	; 51534 <warn@@Base+0x793c>
   514e8:	mov	r9, r2
   514ec:	add	r6, pc, r6
   514f0:	bl	1211c <_init@@Base>
   514f4:	add	r5, pc, r5
   514f8:	rsb	r6, r5, r6
   514fc:	asrs	r6, r6, #2
   51500:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   51504:	sub	r5, r5, #4
   51508:	mov	r4, #0
   5150c:	add	r4, r4, #1
   51510:	ldr	r3, [r5, #4]!
   51514:	mov	r0, r7
   51518:	mov	r1, r8
   5151c:	mov	r2, r9
   51520:	blx	r3
   51524:	cmp	r4, r6
   51528:	bne	5150c <warn@@Base+0x7914>
   5152c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   51530:	strdeq	sp, [r1], -ip
   51534:	strdeq	sp, [r1], -r0
   51538:	bx	lr

Disassembly of section .fini:

0005153c <_fini@@Base>:
   5153c:	push	{r3, lr}
   51540:	pop	{r3, pc}
