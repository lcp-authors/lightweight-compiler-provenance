
centos-preinstalled/containers_test_bits:     file format elf32-littlearm


Disassembly of section .init:

00010b0c <_init@@Base>:
   10b0c:	push	{r3, lr}
   10b10:	bl	11b48 <_start@@Base+0x3c>
   10b14:	pop	{r3, pc}

Disassembly of section .plt:

00010b18 <vc_container_bits_reduce_bytes@plt-0x14>:
   10b18:	push	{lr}		; (str lr, [sp, #-4]!)
   10b1c:	ldr	lr, [pc, #4]	; 10b28 <_init@@Base+0x1c>
   10b20:	add	lr, pc, lr
   10b24:	ldr	pc, [lr, #8]!
   10b28:	ldrdeq	r2, [r1], -r8

00010b2c <vc_container_bits_reduce_bytes@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #73728	; 0x12000
   10b34:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b38 <vc_container_bits_skip_bytes@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #73728	; 0x12000
   10b40:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b44 <_IO_getc@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #73728	; 0x12000
   10b4c:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b50 <memcmp@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #73728	; 0x12000
   10b58:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b5c <vc_container_bits_copy_bytes@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #73728	; 0x12000
   10b64:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b68 <__stack_chk_fail@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #73728	; 0x12000
   10b70:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b74 <__libc_start_main@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #73728	; 0x12000
   10b7c:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b80 <__gmon_start__@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #73728	; 0x12000
   10b88:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b8c <vc_container_bits_read_u32_exp_golomb@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #73728	; 0x12000
   10b94:	ldr	pc, [ip, #1176]!	; 0x498

00010b98 <vc_container_bits_read_s32_exp_golomb@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #73728	; 0x12000
   10ba0:	ldr	pc, [ip, #1168]!	; 0x490

00010ba4 <vc_container_bits_reset@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #73728	; 0x12000
   10bac:	ldr	pc, [ip, #1160]!	; 0x488

00010bb0 <vc_container_bits_skip_exp_golomb@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #73728	; 0x12000
   10bb8:	ldr	pc, [ip, #1152]!	; 0x480

00010bbc <vc_container_bits_init@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #73728	; 0x12000
   10bc4:	ldr	pc, [ip, #1144]!	; 0x478

00010bc8 <vc_container_bits_bytes_available@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #73728	; 0x12000
   10bd0:	ldr	pc, [ip, #1136]!	; 0x470

00010bd4 <vc_container_bits_current_pointer@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #73728	; 0x12000
   10bdc:	ldr	pc, [ip, #1128]!	; 0x468

00010be0 <vc_container_bits_skip@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #73728	; 0x12000
   10be8:	ldr	pc, [ip, #1120]!	; 0x460

00010bec <vc_container_log@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #73728	; 0x12000
   10bf4:	ldr	pc, [ip, #1112]!	; 0x458

00010bf8 <vc_container_bits_read_u32@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #73728	; 0x12000
   10c00:	ldr	pc, [ip, #1104]!	; 0x450

00010c04 <vc_container_bits_available@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #73728	; 0x12000
   10c0c:	ldr	pc, [ip, #1096]!	; 0x448

00010c10 <vc_container_bits_valid@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #73728	; 0x12000
   10c18:	ldr	pc, [ip, #1088]!	; 0x440

00010c1c <abort@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #73728	; 0x12000
   10c24:	ldr	pc, [ip, #1080]!	; 0x438

Disassembly of section .text:

00010c28 <main@@Base>:
   10c28:	ldr	ip, [pc, #3460]	; 119b4 <main@@Base+0xd8c>
   10c2c:	mov	r2, #7
   10c30:	ldr	r3, [pc, #3456]	; 119b8 <main@@Base+0xd90>
   10c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c38:	add	ip, pc, ip
   10c3c:	sub	sp, sp, #76	; 0x4c
   10c40:	ldr	r1, [pc, #3444]	; 119bc <main@@Base+0xd94>
   10c44:	add	r4, sp, #48	; 0x30
   10c48:	str	ip, [sp, #32]
   10c4c:	add	r1, pc, r1
   10c50:	ldr	r3, [ip, r3]
   10c54:	mov	r0, r4
   10c58:	str	r3, [sp, #40]	; 0x28
   10c5c:	ldr	r3, [r3]
   10c60:	str	r3, [sp, #68]	; 0x44
   10c64:	bl	10bbc <vc_container_bits_init@plt>
   10c68:	mov	r0, r4
   10c6c:	bl	10c04 <vc_container_bits_available@plt>
   10c70:	cmp	r0, #0
   10c74:	movne	r7, #0
   10c78:	beq	11998 <main@@Base+0xd70>
   10c7c:	mov	r0, r4
   10c80:	bl	10ba4 <vc_container_bits_reset@plt>
   10c84:	mov	r0, r4
   10c88:	bl	10c04 <vc_container_bits_available@plt>
   10c8c:	cmp	r0, #0
   10c90:	beq	10cac <main@@Base+0x84>
   10c94:	ldr	r2, [pc, #3364]	; 119c0 <main@@Base+0xd98>
   10c98:	mov	r1, #1
   10c9c:	mov	r0, #0
   10ca0:	add	r7, r7, r1
   10ca4:	add	r2, pc, r2
   10ca8:	bl	10bec <vc_container_log@plt>
   10cac:	ldr	r1, [pc, #3344]	; 119c4 <main@@Base+0xd9c>
   10cb0:	mov	r0, r4
   10cb4:	mov	r2, #7
   10cb8:	ldr	r8, [pc, #3336]	; 119c8 <main@@Base+0xda0>
   10cbc:	add	r1, pc, r1
   10cc0:	mov	r6, #0
   10cc4:	bl	10bbc <vc_container_bits_init@plt>
   10cc8:	add	r8, pc, r8
   10ccc:	mov	r5, r6
   10cd0:	mov	r0, r4
   10cd4:	mov	r1, r5
   10cd8:	bl	10bf8 <vc_container_bits_read_u32@plt>
   10cdc:	cmp	r5, r0
   10ce0:	beq	10d00 <main@@Base+0xd8>
   10ce4:	str	r0, [sp]
   10ce8:	mov	r1, #1
   10cec:	mov	r0, #0
   10cf0:	mov	r2, r8
   10cf4:	mov	r3, r5
   10cf8:	add	r6, r6, r1
   10cfc:	bl	10bec <vc_container_log@plt>
   10d00:	add	r5, r5, #1
   10d04:	cmp	r5, #11
   10d08:	bne	10cd0 <main@@Base+0xa8>
   10d0c:	mov	r1, #1
   10d10:	mov	r0, r4
   10d14:	bl	10bf8 <vc_container_bits_read_u32@plt>
   10d18:	mov	r5, r0
   10d1c:	mov	r0, r4
   10d20:	bl	10c10 <vc_container_bits_valid@plt>
   10d24:	cmp	r0, #0
   10d28:	beq	11038 <main@@Base+0x410>
   10d2c:	cmp	r5, #0
   10d30:	bne	11038 <main@@Base+0x410>
   10d34:	mov	r1, #1
   10d38:	mov	r0, r4
   10d3c:	bl	10bf8 <vc_container_bits_read_u32@plt>
   10d40:	mov	r5, r0
   10d44:	mov	r0, r4
   10d48:	bl	10c10 <vc_container_bits_valid@plt>
   10d4c:	cmp	r0, #0
   10d50:	bne	10d5c <main@@Base+0x134>
   10d54:	cmp	r5, #0
   10d58:	beq	10d74 <main@@Base+0x14c>
   10d5c:	ldr	r2, [pc, #3176]	; 119cc <main@@Base+0xda4>
   10d60:	mov	r1, #1
   10d64:	mov	r0, #0
   10d68:	add	r6, r6, r1
   10d6c:	add	r2, pc, r2
   10d70:	bl	10bec <vc_container_log@plt>
   10d74:	ldr	r1, [pc, #3156]	; 119d0 <main@@Base+0xda8>
   10d78:	mov	r0, r4
   10d7c:	mov	r2, #7
   10d80:	add	r6, r7, r6
   10d84:	add	r1, pc, r1
   10d88:	str	r6, [sp, #28]
   10d8c:	bl	10bbc <vc_container_bits_init@plt>
   10d90:	ldr	ip, [pc, #3132]	; 119d4 <main@@Base+0xdac>
   10d94:	mov	r0, r4
   10d98:	ldr	fp, [pc, #3128]	; 119d8 <main@@Base+0xdb0>
   10d9c:	add	ip, pc, ip
   10da0:	str	ip, [sp, #20]
   10da4:	ldr	ip, [pc, #3120]	; 119dc <main@@Base+0xdb4>
   10da8:	mov	r6, #0
   10dac:	ldr	sl, [pc, #3116]	; 119e0 <main@@Base+0xdb8>
   10db0:	add	fp, pc, fp
   10db4:	add	ip, pc, ip
   10db8:	str	ip, [sp, #24]
   10dbc:	bl	10c04 <vc_container_bits_available@plt>
   10dc0:	ldr	r9, [pc, #3100]	; 119e4 <main@@Base+0xdbc>
   10dc4:	add	sl, pc, sl
   10dc8:	mov	r5, r6
   10dcc:	add	r9, pc, r9
   10dd0:	mov	r7, r0
   10dd4:	b	10ddc <main@@Base+0x1b4>
   10dd8:	mov	r7, r8
   10ddc:	mov	r0, r4
   10de0:	mov	r1, r5
   10de4:	bl	10be0 <vc_container_bits_skip@plt>
   10de8:	mov	r0, r4
   10dec:	bl	10c04 <vc_container_bits_available@plt>
   10df0:	add	r2, r5, r0
   10df4:	mov	r8, r0
   10df8:	cmp	r2, r7
   10dfc:	beq	10e44 <main@@Base+0x21c>
   10e00:	ldr	r2, [sp, #20]
   10e04:	cmp	r5, #1
   10e08:	ldr	ip, [sp, #24]
   10e0c:	rsb	r3, r0, r7
   10e10:	mov	r1, #1
   10e14:	str	r3, [sp, #4]
   10e18:	mov	r0, #0
   10e1c:	add	r6, r6, #1
   10e20:	moveq	r2, ip
   10e24:	cmp	r3, #1
   10e28:	str	r2, [sp]
   10e2c:	mov	r2, fp
   10e30:	movne	r3, sl
   10e34:	moveq	r3, r9
   10e38:	str	r3, [sp, #8]
   10e3c:	mov	r3, r5
   10e40:	bl	10bec <vc_container_log@plt>
   10e44:	add	r5, r5, #1
   10e48:	cmp	r5, #11
   10e4c:	bne	10dd8 <main@@Base+0x1b0>
   10e50:	mov	r0, r4
   10e54:	mov	r1, #1
   10e58:	bl	10be0 <vc_container_bits_skip@plt>
   10e5c:	mov	r0, r4
   10e60:	bl	10c10 <vc_container_bits_valid@plt>
   10e64:	cmp	r0, #0
   10e68:	beq	11980 <main@@Base+0xd58>
   10e6c:	mov	r0, r4
   10e70:	bl	10c04 <vc_container_bits_available@plt>
   10e74:	cmp	r0, #0
   10e78:	bne	11964 <main@@Base+0xd3c>
   10e7c:	mov	r0, r4
   10e80:	mov	r1, #1
   10e84:	bl	10be0 <vc_container_bits_skip@plt>
   10e88:	mov	r0, r4
   10e8c:	bl	10c10 <vc_container_bits_valid@plt>
   10e90:	cmp	r0, #0
   10e94:	beq	10eb0 <main@@Base+0x288>
   10e98:	ldr	r2, [pc, #2888]	; 119e8 <main@@Base+0xdc0>
   10e9c:	mov	r1, #1
   10ea0:	mov	r0, #0
   10ea4:	add	r6, r6, r1
   10ea8:	add	r2, pc, r2
   10eac:	bl	10bec <vc_container_log@plt>
   10eb0:	ldr	r1, [pc, #2868]	; 119ec <main@@Base+0xdc4>
   10eb4:	mov	r0, r4
   10eb8:	ldr	ip, [sp, #28]
   10ebc:	mov	r2, #7
   10ec0:	add	r1, pc, r1
   10ec4:	add	r6, ip, r6
   10ec8:	str	r6, [sp, #36]	; 0x24
   10ecc:	bl	10bbc <vc_container_bits_init@plt>
   10ed0:	mov	r0, r4
   10ed4:	bl	10bc8 <vc_container_bits_bytes_available@plt>
   10ed8:	cmp	r0, #7
   10edc:	mov	r8, r0
   10ee0:	moveq	r6, #0
   10ee4:	beq	10f00 <main@@Base+0x2d8>
   10ee8:	ldr	r2, [pc, #2816]	; 119f0 <main@@Base+0xdc8>
   10eec:	mov	r1, #1
   10ef0:	mov	r0, #0
   10ef4:	mov	r6, r1
   10ef8:	add	r2, pc, r2
   10efc:	bl	10bec <vc_container_log@plt>
   10f00:	mov	r0, r4
   10f04:	bl	10bd4 <vc_container_bits_current_pointer@plt>
   10f08:	ldr	r3, [pc, #2788]	; 119f4 <main@@Base+0xdcc>
   10f0c:	add	r3, pc, r3
   10f10:	cmp	r3, r0
   10f14:	beq	10f30 <main@@Base+0x308>
   10f18:	ldr	r2, [pc, #2776]	; 119f8 <main@@Base+0xdd0>
   10f1c:	mov	r1, #1
   10f20:	mov	r0, #0
   10f24:	add	r6, r6, r1
   10f28:	add	r2, pc, r2
   10f2c:	bl	10bec <vc_container_log@plt>
   10f30:	ldr	ip, [pc, #2756]	; 119fc <main@@Base+0xdd4>
   10f34:	mov	r5, #0
   10f38:	ldr	r7, [pc, #2752]	; 11a00 <main@@Base+0xdd8>
   10f3c:	add	ip, pc, ip
   10f40:	str	ip, [sp, #20]
   10f44:	ldr	ip, [pc, #2744]	; 11a04 <main@@Base+0xddc>
   10f48:	add	r7, pc, r7
   10f4c:	ldr	fp, [pc, #2740]	; 11a08 <main@@Base+0xde0>
   10f50:	add	ip, pc, ip
   10f54:	ldr	sl, [pc, #2736]	; 11a0c <main@@Base+0xde4>
   10f58:	str	ip, [sp, #24]
   10f5c:	add	fp, pc, fp
   10f60:	ldr	ip, [pc, #2728]	; 11a10 <main@@Base+0xde8>
   10f64:	add	sl, pc, sl
   10f68:	add	ip, pc, ip
   10f6c:	str	ip, [sp, #28]
   10f70:	ldr	ip, [pc, #2716]	; 11a14 <main@@Base+0xdec>
   10f74:	add	ip, pc, ip
   10f78:	str	ip, [sp, #44]	; 0x2c
   10f7c:	mov	r0, r4
   10f80:	mov	r1, r5
   10f84:	bl	10b38 <vc_container_bits_skip_bytes@plt>
   10f88:	mov	r0, r4
   10f8c:	bl	10bd4 <vc_container_bits_current_pointer@plt>
   10f90:	add	r7, r7, r5
   10f94:	cmp	r7, r0
   10f98:	beq	10fc4 <main@@Base+0x39c>
   10f9c:	ldr	r3, [sp, #20]
   10fa0:	cmp	r5, #1
   10fa4:	mov	r1, #1
   10fa8:	mov	r0, #0
   10fac:	mov	r2, fp
   10fb0:	add	r6, r6, r1
   10fb4:	movne	r3, sl
   10fb8:	str	r3, [sp]
   10fbc:	mov	r3, r5
   10fc0:	bl	10bec <vc_container_log@plt>
   10fc4:	mov	r0, r4
   10fc8:	bl	10bc8 <vc_container_bits_bytes_available@plt>
   10fcc:	add	r3, r0, r5
   10fd0:	mov	r9, r0
   10fd4:	cmp	r3, r8
   10fd8:	beq	11024 <main@@Base+0x3fc>
   10fdc:	cmp	r5, #1
   10fe0:	rsb	r8, r0, r8
   10fe4:	ldreq	r3, [sp, #44]	; 0x2c
   10fe8:	ldrne	r3, [pc, #2600]	; 11a18 <main@@Base+0xdf0>
   10fec:	addne	r3, pc, r3
   10ff0:	ldr	r2, [pc, #2596]	; 11a1c <main@@Base+0xdf4>
   10ff4:	cmp	r8, #1
   10ff8:	str	r3, [sp]
   10ffc:	mov	r1, #1
   11000:	add	r2, pc, r2
   11004:	ldrne	r2, [sp, #28]
   11008:	mov	r0, #0
   1100c:	str	r8, [sp, #4]
   11010:	mov	r3, r5
   11014:	add	r6, r6, r1
   11018:	str	r2, [sp, #8]
   1101c:	ldr	r2, [sp, #24]
   11020:	bl	10bec <vc_container_log@plt>
   11024:	add	r5, r5, #1
   11028:	cmp	r5, #4
   1102c:	beq	11054 <main@@Base+0x42c>
   11030:	mov	r8, r9
   11034:	b	10f7c <main@@Base+0x354>
   11038:	ldr	r2, [pc, #2528]	; 11a20 <main@@Base+0xdf8>
   1103c:	mov	r1, #1
   11040:	mov	r0, #0
   11044:	add	r6, r6, r1
   11048:	add	r2, pc, r2
   1104c:	bl	10bec <vc_container_log@plt>
   11050:	b	10d34 <main@@Base+0x10c>
   11054:	cmp	r9, #0
   11058:	beq	11948 <main@@Base+0xd20>
   1105c:	mov	r0, r4
   11060:	bl	10c10 <vc_container_bits_valid@plt>
   11064:	cmp	r0, #0
   11068:	beq	11930 <main@@Base+0xd08>
   1106c:	add	r1, r9, #1
   11070:	mov	r0, r4
   11074:	bl	10b38 <vc_container_bits_skip_bytes@plt>
   11078:	mov	r0, r4
   1107c:	bl	10c10 <vc_container_bits_valid@plt>
   11080:	cmp	r0, #0
   11084:	bne	11914 <main@@Base+0xcec>
   11088:	mov	r0, r4
   1108c:	bl	10bc8 <vc_container_bits_bytes_available@plt>
   11090:	cmp	r0, #0
   11094:	beq	110b0 <main@@Base+0x488>
   11098:	ldr	r2, [pc, #2436]	; 11a24 <main@@Base+0xdfc>
   1109c:	mov	r1, #1
   110a0:	mov	r0, #0
   110a4:	add	r6, r6, r1
   110a8:	add	r2, pc, r2
   110ac:	bl	10bec <vc_container_log@plt>
   110b0:	ldr	r1, [pc, #2416]	; 11a28 <main@@Base+0xe00>
   110b4:	mov	r0, r4
   110b8:	ldr	ip, [sp, #36]	; 0x24
   110bc:	mov	r2, #7
   110c0:	add	r1, pc, r1
   110c4:	add	r6, ip, r6
   110c8:	str	r6, [sp, #28]
   110cc:	bl	10bbc <vc_container_bits_init@plt>
   110d0:	mov	r0, r4
   110d4:	bl	10bc8 <vc_container_bits_bytes_available@plt>
   110d8:	cmp	r0, #7
   110dc:	mov	r7, r0
   110e0:	moveq	r6, #0
   110e4:	beq	11100 <main@@Base+0x4d8>
   110e8:	ldr	r2, [pc, #2364]	; 11a2c <main@@Base+0xe04>
   110ec:	mov	r1, #1
   110f0:	mov	r0, #0
   110f4:	mov	r6, r1
   110f8:	add	r2, pc, r2
   110fc:	bl	10bec <vc_container_log@plt>
   11100:	mov	r0, r4
   11104:	bl	10bd4 <vc_container_bits_current_pointer@plt>
   11108:	ldr	r3, [pc, #2336]	; 11a30 <main@@Base+0xe08>
   1110c:	add	r3, pc, r3
   11110:	cmp	r3, r0
   11114:	beq	11130 <main@@Base+0x508>
   11118:	ldr	r2, [pc, #2324]	; 11a34 <main@@Base+0xe0c>
   1111c:	mov	r1, #1
   11120:	mov	r0, #0
   11124:	add	r6, r6, r1
   11128:	add	r2, pc, r2
   1112c:	bl	10bec <vc_container_log@plt>
   11130:	ldr	ip, [pc, #2304]	; 11a38 <main@@Base+0xe10>
   11134:	mov	r5, #0
   11138:	ldr	r8, [pc, #2300]	; 11a3c <main@@Base+0xe14>
   1113c:	add	ip, pc, ip
   11140:	ldr	fp, [pc, #2296]	; 11a40 <main@@Base+0xe18>
   11144:	str	ip, [sp, #24]
   11148:	add	r8, pc, r8
   1114c:	ldr	sl, [pc, #2288]	; 11a44 <main@@Base+0xe1c>
   11150:	add	fp, pc, fp
   11154:	ldr	ip, [pc, #2284]	; 11a48 <main@@Base+0xe20>
   11158:	add	sl, pc, sl
   1115c:	add	ip, pc, ip
   11160:	str	ip, [sp, #20]
   11164:	ldr	ip, [pc, #2272]	; 11a4c <main@@Base+0xe24>
   11168:	add	ip, pc, ip
   1116c:	str	ip, [sp, #36]	; 0x24
   11170:	mov	r0, r4
   11174:	mov	r1, r5
   11178:	bl	10b2c <vc_container_bits_reduce_bytes@plt>
   1117c:	mov	r0, r4
   11180:	bl	10bd4 <vc_container_bits_current_pointer@plt>
   11184:	cmp	r8, r0
   11188:	beq	111a0 <main@@Base+0x578>
   1118c:	mov	r1, #1
   11190:	mov	r0, #0
   11194:	ldr	r2, [sp, #24]
   11198:	add	r6, r6, r1
   1119c:	bl	10bec <vc_container_log@plt>
   111a0:	mov	r0, r4
   111a4:	bl	10bc8 <vc_container_bits_bytes_available@plt>
   111a8:	add	r3, r0, r5
   111ac:	mov	r9, r0
   111b0:	cmp	r3, r7
   111b4:	beq	111f8 <main@@Base+0x5d0>
   111b8:	cmp	r5, #1
   111bc:	rsb	r7, r0, r7
   111c0:	ldreq	r3, [sp, #36]	; 0x24
   111c4:	ldrne	r3, [pc, #2180]	; 11a50 <main@@Base+0xe28>
   111c8:	addne	r3, pc, r3
   111cc:	stm	sp, {r3, r7}
   111d0:	cmp	r7, #1
   111d4:	ldr	r3, [sp, #20]
   111d8:	mov	r1, #1
   111dc:	mov	r0, #0
   111e0:	mov	r2, fp
   111e4:	add	r6, r6, r1
   111e8:	movne	r3, sl
   111ec:	str	r3, [sp, #8]
   111f0:	mov	r3, r5
   111f4:	bl	10bec <vc_container_log@plt>
   111f8:	add	r5, r5, #1
   111fc:	cmp	r5, #4
   11200:	movne	r7, r9
   11204:	bne	11170 <main@@Base+0x548>
   11208:	cmp	r9, #0
   1120c:	beq	118f8 <main@@Base+0xcd0>
   11210:	mov	r0, r4
   11214:	bl	10c10 <vc_container_bits_valid@plt>
   11218:	cmp	r0, #0
   1121c:	beq	118e0 <main@@Base+0xcb8>
   11220:	add	r1, r9, #1
   11224:	mov	r0, r4
   11228:	bl	10b2c <vc_container_bits_reduce_bytes@plt>
   1122c:	mov	r0, r4
   11230:	bl	10c10 <vc_container_bits_valid@plt>
   11234:	cmp	r0, #0
   11238:	bne	118c4 <main@@Base+0xc9c>
   1123c:	mov	r0, r4
   11240:	bl	10c04 <vc_container_bits_available@plt>
   11244:	cmp	r0, #0
   11248:	beq	11264 <main@@Base+0x63c>
   1124c:	ldr	r2, [pc, #2048]	; 11a54 <main@@Base+0xe2c>
   11250:	mov	r1, #1
   11254:	mov	r0, #0
   11258:	add	r6, r6, r1
   1125c:	add	r2, pc, r2
   11260:	bl	10bec <vc_container_log@plt>
   11264:	ldr	r1, [pc, #2028]	; 11a58 <main@@Base+0xe30>
   11268:	mov	r0, r4
   1126c:	mov	r2, #7
   11270:	add	r8, sp, #60	; 0x3c
   11274:	add	r1, pc, r1
   11278:	mov	r9, #0
   1127c:	bl	10bbc <vc_container_bits_init@plt>
   11280:	ldr	ip, [sp, #28]
   11284:	mov	r2, r8
   11288:	mov	r0, r4
   1128c:	mov	r1, #7
   11290:	add	r6, ip, r6
   11294:	str	r9, [sp, #60]	; 0x3c
   11298:	strh	r9, [sp, #64]	; 0x40
   1129c:	strb	r9, [sp, #66]	; 0x42
   112a0:	bl	10b5c <vc_container_bits_copy_bytes@plt>
   112a4:	mov	r0, r4
   112a8:	bl	10c10 <vc_container_bits_valid@plt>
   112ac:	cmp	r0, r9
   112b0:	beq	118ac <main@@Base+0xc84>
   112b4:	ldr	r1, [pc, #1952]	; 11a5c <main@@Base+0xe34>
   112b8:	mov	r0, r8
   112bc:	mov	r2, #7
   112c0:	add	r1, pc, r1
   112c4:	bl	10b50 <memcmp@plt>
   112c8:	cmp	r0, #0
   112cc:	bne	11890 <main@@Base+0xc68>
   112d0:	ldr	r1, [pc, #1928]	; 11a60 <main@@Base+0xe38>
   112d4:	add	r7, sp, #67	; 0x43
   112d8:	mov	r0, r4
   112dc:	mov	r2, #7
   112e0:	add	r1, pc, r1
   112e4:	mov	r5, r8
   112e8:	bl	10bbc <vc_container_bits_init@plt>
   112ec:	mov	r3, #0
   112f0:	str	r3, [sp, #60]	; 0x3c
   112f4:	strh	r3, [sp, #64]	; 0x40
   112f8:	strb	r3, [sp, #66]	; 0x42
   112fc:	mov	r1, #1
   11300:	mov	r2, r5
   11304:	mov	r0, r4
   11308:	add	r5, r5, r1
   1130c:	bl	10b5c <vc_container_bits_copy_bytes@plt>
   11310:	cmp	r5, r7
   11314:	bne	112fc <main@@Base+0x6d4>
   11318:	mov	r0, r4
   1131c:	bl	10c10 <vc_container_bits_valid@plt>
   11320:	cmp	r0, #0
   11324:	beq	11878 <main@@Base+0xc50>
   11328:	ldr	r1, [pc, #1844]	; 11a64 <main@@Base+0xe3c>
   1132c:	mov	r0, r8
   11330:	mov	r2, #7
   11334:	add	r1, pc, r1
   11338:	bl	10b50 <memcmp@plt>
   1133c:	cmp	r0, #0
   11340:	bne	1185c <main@@Base+0xc34>
   11344:	ldr	r1, [pc, #1820]	; 11a68 <main@@Base+0xe40>
   11348:	mov	r2, #7
   1134c:	mov	r0, r4
   11350:	add	r1, pc, r1
   11354:	bl	10bbc <vc_container_bits_init@plt>
   11358:	mov	r0, r4
   1135c:	mov	r1, #1
   11360:	mov	r3, #0
   11364:	str	r3, [sp, #60]	; 0x3c
   11368:	strh	r3, [sp, #64]	; 0x40
   1136c:	strb	r3, [sp, #66]	; 0x42
   11370:	bl	10b38 <vc_container_bits_skip_bytes@plt>
   11374:	mov	r0, r4
   11378:	mov	r1, #1
   1137c:	bl	10b2c <vc_container_bits_reduce_bytes@plt>
   11380:	mov	r0, r4
   11384:	mov	r1, #5
   11388:	mov	r2, r8
   1138c:	bl	10b5c <vc_container_bits_copy_bytes@plt>
   11390:	mov	r0, r4
   11394:	bl	10c10 <vc_container_bits_valid@plt>
   11398:	cmp	r0, #0
   1139c:	beq	11844 <main@@Base+0xc1c>
   113a0:	ldr	r1, [pc, #1732]	; 11a6c <main@@Base+0xe44>
   113a4:	mov	r0, r8
   113a8:	mov	r2, #5
   113ac:	add	r1, pc, r1
   113b0:	add	r1, r1, #1
   113b4:	bl	10b50 <memcmp@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	113d8 <main@@Base+0x7b0>
   113c0:	ldr	r2, [pc, #1704]	; 11a70 <main@@Base+0xe48>
   113c4:	mov	r1, #1
   113c8:	mov	r0, #0
   113cc:	add	r9, r9, r1
   113d0:	add	r2, pc, r2
   113d4:	bl	10bec <vc_container_log@plt>
   113d8:	ldr	r1, [pc, #1684]	; 11a74 <main@@Base+0xe4c>
   113dc:	mov	r0, r4
   113e0:	mov	r2, #7
   113e4:	add	r9, r6, r9
   113e8:	add	r1, pc, r1
   113ec:	mov	r5, #12
   113f0:	add	r1, r1, #8
   113f4:	bl	10bbc <vc_container_bits_init@plt>
   113f8:	mov	r0, r4
   113fc:	bl	10bb0 <vc_container_bits_skip_exp_golomb@plt>
   11400:	subs	r5, r5, #1
   11404:	bne	113f8 <main@@Base+0x7d0>
   11408:	mov	r0, r4
   1140c:	bl	10c10 <vc_container_bits_valid@plt>
   11410:	cmp	r0, #0
   11414:	beq	1182c <main@@Base+0xc04>
   11418:	mov	r0, r4
   1141c:	bl	10bb0 <vc_container_bits_skip_exp_golomb@plt>
   11420:	mov	r0, r4
   11424:	bl	10c10 <vc_container_bits_valid@plt>
   11428:	cmp	r0, #0
   1142c:	beq	11448 <main@@Base+0x820>
   11430:	ldr	r2, [pc, #1600]	; 11a78 <main@@Base+0xe50>
   11434:	mov	r1, #1
   11438:	mov	r0, #0
   1143c:	add	r5, r5, r1
   11440:	add	r2, pc, r2
   11444:	bl	10bec <vc_container_log@plt>
   11448:	ldr	r1, [pc, #1580]	; 11a7c <main@@Base+0xe54>
   1144c:	mov	r0, r4
   11450:	mov	r2, #7
   11454:	ldr	r8, [pc, #1572]	; 11a80 <main@@Base+0xe58>
   11458:	add	r1, pc, r1
   1145c:	mov	r7, #0
   11460:	add	r1, r1, #8
   11464:	add	r8, pc, r8
   11468:	bl	10bbc <vc_container_bits_init@plt>
   1146c:	add	r9, r9, r5
   11470:	mov	r5, r7
   11474:	mov	r0, r4
   11478:	bl	10b8c <vc_container_bits_read_u32_exp_golomb@plt>
   1147c:	cmp	r0, r5
   11480:	beq	114a0 <main@@Base+0x878>
   11484:	str	r0, [sp]
   11488:	mov	r1, #1
   1148c:	mov	r0, #0
   11490:	mov	r2, r8
   11494:	mov	r3, r5
   11498:	add	r7, r7, r1
   1149c:	bl	10bec <vc_container_log@plt>
   114a0:	add	r5, r5, #1
   114a4:	cmp	r5, #11
   114a8:	bne	11474 <main@@Base+0x84c>
   114ac:	mov	r1, #1
   114b0:	mov	r0, r4
   114b4:	bl	10bf8 <vc_container_bits_read_u32@plt>
   114b8:	mov	r5, r0
   114bc:	mov	r0, r4
   114c0:	bl	10c10 <vc_container_bits_valid@plt>
   114c4:	cmp	r0, #0
   114c8:	beq	11810 <main@@Base+0xbe8>
   114cc:	cmp	r5, #0
   114d0:	beq	11810 <main@@Base+0xbe8>
   114d4:	mov	r0, r4
   114d8:	bl	10b8c <vc_container_bits_read_u32_exp_golomb@plt>
   114dc:	mov	r5, r0
   114e0:	mov	r0, r4
   114e4:	bl	10c10 <vc_container_bits_valid@plt>
   114e8:	cmp	r0, #0
   114ec:	bne	117f4 <main@@Base+0xbcc>
   114f0:	cmp	r5, #0
   114f4:	bne	117f4 <main@@Base+0xbcc>
   114f8:	ldr	r1, [pc, #1412]	; 11a84 <main@@Base+0xe5c>
   114fc:	mov	r2, #16
   11500:	mov	r0, r4
   11504:	add	r1, pc, r1
   11508:	add	r1, r1, r2
   1150c:	bl	10bbc <vc_container_bits_init@plt>
   11510:	mov	r0, r4
   11514:	bl	10b8c <vc_container_bits_read_u32_exp_golomb@plt>
   11518:	cmn	r0, #2
   1151c:	beq	11538 <main@@Base+0x910>
   11520:	ldr	r2, [pc, #1376]	; 11a88 <main@@Base+0xe60>
   11524:	mov	r1, #1
   11528:	mov	r0, #0
   1152c:	add	r7, r7, r1
   11530:	add	r2, pc, r2
   11534:	bl	10bec <vc_container_log@plt>
   11538:	mov	r0, r4
   1153c:	bl	10b8c <vc_container_bits_read_u32_exp_golomb@plt>
   11540:	cmn	r0, #1
   11544:	beq	11560 <main@@Base+0x938>
   11548:	ldr	r2, [pc, #1340]	; 11a8c <main@@Base+0xe64>
   1154c:	mov	r1, #1
   11550:	mov	r0, #0
   11554:	add	r7, r7, r1
   11558:	add	r2, pc, r2
   1155c:	bl	10bec <vc_container_log@plt>
   11560:	ldr	r1, [pc, #1320]	; 11a90 <main@@Base+0xe68>
   11564:	mov	r2, #9
   11568:	mov	r0, r4
   1156c:	add	r1, pc, r1
   11570:	add	r1, r1, #32
   11574:	bl	10bbc <vc_container_bits_init@plt>
   11578:	mov	r0, r4
   1157c:	bl	10b8c <vc_container_bits_read_u32_exp_golomb@plt>
   11580:	mov	r5, r0
   11584:	mov	r0, r4
   11588:	bl	10c10 <vc_container_bits_valid@plt>
   1158c:	cmp	r0, #0
   11590:	bne	1159c <main@@Base+0x974>
   11594:	cmp	r5, #0
   11598:	beq	115b8 <main@@Base+0x990>
   1159c:	ldr	r2, [pc, #1264]	; 11a94 <main@@Base+0xe6c>
   115a0:	mov	r3, r5
   115a4:	mov	r0, #0
   115a8:	mov	r1, #1
   115ac:	add	r2, pc, r2
   115b0:	add	r7, r7, #1
   115b4:	bl	10bec <vc_container_log@plt>
   115b8:	ldr	r1, [pc, #1240]	; 11a98 <main@@Base+0xe70>
   115bc:	mov	r0, r4
   115c0:	mov	r2, #7
   115c4:	ldr	r6, [pc, #1232]	; 11a9c <main@@Base+0xe74>
   115c8:	add	r1, pc, r1
   115cc:	ldr	r8, [pc, #1228]	; 11aa0 <main@@Base+0xe78>
   115d0:	add	r1, r1, #8
   115d4:	add	r6, pc, r6
   115d8:	bl	10bbc <vc_container_bits_init@plt>
   115dc:	add	r9, r9, r7
   115e0:	add	r8, pc, r8
   115e4:	mov	r7, #0
   115e8:	sub	r6, r6, #4
   115ec:	mov	r5, r7
   115f0:	mov	r0, r4
   115f4:	bl	10b98 <vc_container_bits_read_s32_exp_golomb@plt>
   115f8:	ldr	r3, [r6, #4]!
   115fc:	cmp	r0, r3
   11600:	beq	11620 <main@@Base+0x9f8>
   11604:	str	r0, [sp]
   11608:	mov	r1, #1
   1160c:	mov	r0, #0
   11610:	mov	r2, r8
   11614:	mov	r3, r5
   11618:	add	r7, r7, r1
   1161c:	bl	10bec <vc_container_log@plt>
   11620:	add	r5, r5, #1
   11624:	cmp	r5, #11
   11628:	bne	115f0 <main@@Base+0x9c8>
   1162c:	mov	r0, r4
   11630:	bl	10b98 <vc_container_bits_read_s32_exp_golomb@plt>
   11634:	mov	r5, r0
   11638:	mov	r0, r4
   1163c:	bl	10c10 <vc_container_bits_valid@plt>
   11640:	cmp	r0, #0
   11644:	beq	117d8 <main@@Base+0xbb0>
   11648:	cmp	r5, #0
   1164c:	bne	117d8 <main@@Base+0xbb0>
   11650:	mov	r0, r4
   11654:	bl	10b98 <vc_container_bits_read_s32_exp_golomb@plt>
   11658:	mov	r5, r0
   1165c:	mov	r0, r4
   11660:	bl	10c10 <vc_container_bits_valid@plt>
   11664:	cmp	r0, #0
   11668:	bne	117bc <main@@Base+0xb94>
   1166c:	cmp	r5, #0
   11670:	bne	117bc <main@@Base+0xb94>
   11674:	ldr	r1, [pc, #1064]	; 11aa4 <main@@Base+0xe7c>
   11678:	mov	r2, #16
   1167c:	mov	r0, r4
   11680:	add	r1, pc, r1
   11684:	add	r1, r1, r2
   11688:	bl	10bbc <vc_container_bits_init@plt>
   1168c:	mov	r0, r4
   11690:	bl	10b98 <vc_container_bits_read_s32_exp_golomb@plt>
   11694:	mov	r5, r0
   11698:	mov	r0, r4
   1169c:	bl	10c10 <vc_container_bits_valid@plt>
   116a0:	cmp	r0, #0
   116a4:	beq	116b0 <main@@Base+0xa88>
   116a8:	cmp	r5, #-2147483647	; 0x80000001
   116ac:	beq	116cc <main@@Base+0xaa4>
   116b0:	ldr	r2, [pc, #1008]	; 11aa8 <main@@Base+0xe80>
   116b4:	mov	r3, r5
   116b8:	mov	r0, #0
   116bc:	mov	r1, #1
   116c0:	add	r2, pc, r2
   116c4:	add	r7, r7, #1
   116c8:	bl	10bec <vc_container_log@plt>
   116cc:	mov	r0, r4
   116d0:	bl	10b98 <vc_container_bits_read_s32_exp_golomb@plt>
   116d4:	mov	r5, r0
   116d8:	mov	r0, r4
   116dc:	bl	10c10 <vc_container_bits_valid@plt>
   116e0:	cmp	r0, #0
   116e4:	bne	1179c <main@@Base+0xb74>
   116e8:	cmp	r5, #0
   116ec:	bne	1179c <main@@Base+0xb74>
   116f0:	ldr	r1, [pc, #948]	; 11aac <main@@Base+0xe84>
   116f4:	mov	r2, #9
   116f8:	mov	r0, r4
   116fc:	add	r1, pc, r1
   11700:	add	r1, r1, #32
   11704:	bl	10bbc <vc_container_bits_init@plt>
   11708:	mov	r0, r4
   1170c:	bl	10b98 <vc_container_bits_read_s32_exp_golomb@plt>
   11710:	mov	r5, r0
   11714:	mov	r0, r4
   11718:	bl	10c10 <vc_container_bits_valid@plt>
   1171c:	cmp	r0, #0
   11720:	bne	1172c <main@@Base+0xb04>
   11724:	cmp	r5, #0
   11728:	beq	11748 <main@@Base+0xb20>
   1172c:	ldr	r2, [pc, #892]	; 11ab0 <main@@Base+0xe88>
   11730:	mov	r3, r5
   11734:	mov	r0, #0
   11738:	mov	r1, #1
   1173c:	add	r2, pc, r2
   11740:	add	r7, r7, #1
   11744:	bl	10bec <vc_container_log@plt>
   11748:	adds	r7, r9, r7
   1174c:	beq	1177c <main@@Base+0xb54>
   11750:	ldr	r2, [pc, #860]	; 11ab4 <main@@Base+0xe8c>
   11754:	mov	r0, #0
   11758:	mov	r3, r7
   1175c:	mov	r1, #1
   11760:	add	r2, pc, r2
   11764:	bl	10bec <vc_container_log@plt>
   11768:	ldr	r3, [pc, #840]	; 11ab8 <main@@Base+0xe90>
   1176c:	ldr	ip, [sp, #32]
   11770:	ldr	r3, [ip, r3]
   11774:	ldr	r0, [r3]
   11778:	bl	10b44 <_IO_getc@plt>
   1177c:	ldr	ip, [sp, #40]	; 0x28
   11780:	mov	r0, r7
   11784:	ldr	r2, [sp, #68]	; 0x44
   11788:	ldr	r3, [ip]
   1178c:	cmp	r2, r3
   11790:	bne	119b0 <main@@Base+0xd88>
   11794:	add	sp, sp, #76	; 0x4c
   11798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1179c:	ldr	r2, [pc, #792]	; 11abc <main@@Base+0xe94>
   117a0:	mov	r3, r5
   117a4:	mov	r0, #0
   117a8:	mov	r1, #1
   117ac:	add	r2, pc, r2
   117b0:	add	r7, r7, #1
   117b4:	bl	10bec <vc_container_log@plt>
   117b8:	b	116f0 <main@@Base+0xac8>
   117bc:	ldr	r2, [pc, #764]	; 11ac0 <main@@Base+0xe98>
   117c0:	mov	r1, #1
   117c4:	mov	r0, #0
   117c8:	add	r7, r7, r1
   117cc:	add	r2, pc, r2
   117d0:	bl	10bec <vc_container_log@plt>
   117d4:	b	11674 <main@@Base+0xa4c>
   117d8:	ldr	r2, [pc, #740]	; 11ac4 <main@@Base+0xe9c>
   117dc:	mov	r1, #1
   117e0:	mov	r0, #0
   117e4:	add	r7, r7, r1
   117e8:	add	r2, pc, r2
   117ec:	bl	10bec <vc_container_log@plt>
   117f0:	b	11650 <main@@Base+0xa28>
   117f4:	ldr	r2, [pc, #716]	; 11ac8 <main@@Base+0xea0>
   117f8:	mov	r1, #1
   117fc:	mov	r0, #0
   11800:	add	r7, r7, r1
   11804:	add	r2, pc, r2
   11808:	bl	10bec <vc_container_log@plt>
   1180c:	b	114f8 <main@@Base+0x8d0>
   11810:	ldr	r2, [pc, #692]	; 11acc <main@@Base+0xea4>
   11814:	mov	r1, #1
   11818:	mov	r0, #0
   1181c:	add	r7, r7, r1
   11820:	add	r2, pc, r2
   11824:	bl	10bec <vc_container_log@plt>
   11828:	b	114d4 <main@@Base+0x8ac>
   1182c:	ldr	r2, [pc, #668]	; 11ad0 <main@@Base+0xea8>
   11830:	mov	r1, #1
   11834:	mov	r5, #1
   11838:	add	r2, pc, r2
   1183c:	bl	10bec <vc_container_log@plt>
   11840:	b	11418 <main@@Base+0x7f0>
   11844:	ldr	r2, [pc, #648]	; 11ad4 <main@@Base+0xeac>
   11848:	mov	r1, #1
   1184c:	add	r9, r9, #1
   11850:	add	r2, pc, r2
   11854:	bl	10bec <vc_container_log@plt>
   11858:	b	113a0 <main@@Base+0x778>
   1185c:	ldr	r2, [pc, #628]	; 11ad8 <main@@Base+0xeb0>
   11860:	mov	r1, #1
   11864:	mov	r0, #0
   11868:	add	r9, r9, r1
   1186c:	add	r2, pc, r2
   11870:	bl	10bec <vc_container_log@plt>
   11874:	b	11344 <main@@Base+0x71c>
   11878:	ldr	r2, [pc, #604]	; 11adc <main@@Base+0xeb4>
   1187c:	mov	r1, #1
   11880:	add	r9, r9, #1
   11884:	add	r2, pc, r2
   11888:	bl	10bec <vc_container_log@plt>
   1188c:	b	11328 <main@@Base+0x700>
   11890:	ldr	r2, [pc, #584]	; 11ae0 <main@@Base+0xeb8>
   11894:	mov	r1, #1
   11898:	mov	r0, #0
   1189c:	add	r9, r9, r1
   118a0:	add	r2, pc, r2
   118a4:	bl	10bec <vc_container_log@plt>
   118a8:	b	112d0 <main@@Base+0x6a8>
   118ac:	ldr	r2, [pc, #560]	; 11ae4 <main@@Base+0xebc>
   118b0:	mov	r1, #1
   118b4:	mov	r9, #1
   118b8:	add	r2, pc, r2
   118bc:	bl	10bec <vc_container_log@plt>
   118c0:	b	112b4 <main@@Base+0x68c>
   118c4:	ldr	r2, [pc, #540]	; 11ae8 <main@@Base+0xec0>
   118c8:	mov	r1, #1
   118cc:	mov	r0, #0
   118d0:	add	r6, r6, r1
   118d4:	add	r2, pc, r2
   118d8:	bl	10bec <vc_container_log@plt>
   118dc:	b	1123c <main@@Base+0x614>
   118e0:	ldr	r2, [pc, #516]	; 11aec <main@@Base+0xec4>
   118e4:	mov	r1, #1
   118e8:	add	r6, r6, #1
   118ec:	add	r2, pc, r2
   118f0:	bl	10bec <vc_container_log@plt>
   118f4:	b	11220 <main@@Base+0x5f8>
   118f8:	ldr	r2, [pc, #496]	; 11af0 <main@@Base+0xec8>
   118fc:	mov	r1, #1
   11900:	mov	r0, r9
   11904:	add	r6, r6, r1
   11908:	add	r2, pc, r2
   1190c:	bl	10bec <vc_container_log@plt>
   11910:	b	11210 <main@@Base+0x5e8>
   11914:	ldr	r2, [pc, #472]	; 11af4 <main@@Base+0xecc>
   11918:	mov	r1, #1
   1191c:	mov	r0, #0
   11920:	add	r6, r6, r1
   11924:	add	r2, pc, r2
   11928:	bl	10bec <vc_container_log@plt>
   1192c:	b	11088 <main@@Base+0x460>
   11930:	ldr	r2, [pc, #448]	; 11af8 <main@@Base+0xed0>
   11934:	mov	r1, #1
   11938:	add	r6, r6, #1
   1193c:	add	r2, pc, r2
   11940:	bl	10bec <vc_container_log@plt>
   11944:	b	1106c <main@@Base+0x444>
   11948:	ldr	r2, [pc, #428]	; 11afc <main@@Base+0xed4>
   1194c:	mov	r1, #1
   11950:	mov	r0, r9
   11954:	add	r6, r6, r1
   11958:	add	r2, pc, r2
   1195c:	bl	10bec <vc_container_log@plt>
   11960:	b	1105c <main@@Base+0x434>
   11964:	ldr	r2, [pc, #404]	; 11b00 <main@@Base+0xed8>
   11968:	mov	r1, #1
   1196c:	mov	r0, #0
   11970:	add	r6, r6, r1
   11974:	add	r2, pc, r2
   11978:	bl	10bec <vc_container_log@plt>
   1197c:	b	10e7c <main@@Base+0x254>
   11980:	ldr	r2, [pc, #380]	; 11b04 <main@@Base+0xedc>
   11984:	mov	r1, #1
   11988:	add	r6, r6, #1
   1198c:	add	r2, pc, r2
   11990:	bl	10bec <vc_container_log@plt>
   11994:	b	10e6c <main@@Base+0x244>
   11998:	ldr	r2, [pc, #360]	; 11b08 <main@@Base+0xee0>
   1199c:	mov	r1, #1
   119a0:	mov	r7, #1
   119a4:	add	r2, pc, r2
   119a8:	bl	10bec <vc_container_log@plt>
   119ac:	b	10c7c <main@@Base+0x54>
   119b0:	bl	10b68 <__stack_chk_fail@plt>
   119b4:	andeq	r2, r1, r0, asr #7
   119b8:	andeq	r0, r0, r0, rrx
   119bc:	andeq	r2, r1, ip, lsl r4
   119c0:	andeq	r1, r0, r4, rrx
   119c4:	andeq	r2, r1, ip, lsr #7
   119c8:	andeq	r1, r0, ip, rrx
   119cc:	strdeq	r0, [r0], -r4
   119d0:	andeq	r2, r1, r4, ror #5
   119d4:	andeq	r1, r0, r4, lsr r0
   119d8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   119dc:	andeq	r1, r0, r8, lsl r5
   119e0:	andeq	r1, r0, ip
   119e4:	andeq	r1, r0, r0, lsl #10
   119e8:	andeq	r0, r0, r0, ror pc
   119ec:	andeq	r2, r1, r8, lsr #3
   119f0:	andeq	r0, r0, r0, ror #30
   119f4:	andeq	r2, r1, ip, asr r1
   119f8:	andeq	r0, r0, r8, ror #30
   119fc:	muleq	r0, r0, r3
   11a00:	andeq	r2, r1, r0, lsr #2
   11a04:			; <UNDEFINED> instruction: 0x00000fb0
   11a08:	andeq	r0, r0, r0, ror pc
   11a0c:	andeq	r0, r0, ip, ror #28
   11a10:	andeq	r0, r0, r8, ror #28
   11a14:	andeq	r1, r0, r8, asr r3
   11a18:	andeq	r0, r0, r4, ror #27
   11a1c:	andeq	r1, r0, ip, asr #5
   11a20:	andeq	r0, r0, r0, lsl #26
   11a24:	andeq	r0, r0, r4, lsl #30
   11a28:	andeq	r1, r1, r8, lsr #31
   11a2c:	andeq	r0, r0, r0, ror #26
   11a30:	andeq	r1, r1, ip, asr pc
   11a34:	andeq	r0, r0, r8, ror #26
   11a38:	muleq	r0, r4, lr
   11a3c:	andeq	r1, r1, r0, lsr #30
   11a40:			; <UNDEFINED> instruction: 0x00000eb0
   11a44:	andeq	r0, r0, r8, ror ip
   11a48:	andeq	r1, r0, r0, ror r1
   11a4c:	andeq	r1, r0, r4, ror #2
   11a50:	andeq	r0, r0, r8, lsl #24
   11a54:	andeq	r0, r0, r0, asr sp
   11a58:	strdeq	r1, [r1], -r4
   11a5c:	andeq	r1, r1, r8, lsr #27
   11a60:	andeq	r1, r1, r8, lsl #27
   11a64:	andeq	r1, r1, r4, lsr sp
   11a68:	andeq	r1, r1, r8, lsl sp
   11a6c:			; <UNDEFINED> instruction: 0x00011cbc
   11a70:	andeq	r0, r0, r0, asr sp
   11a74:	andeq	r1, r1, r0, lsl #25
   11a78:	ldrdeq	r0, [r0], -r8
   11a7c:	andeq	r1, r1, r0, lsl ip
   11a80:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11a84:	andeq	r1, r1, r4, ror #22
   11a88:	andeq	r0, r0, ip, asr ip
   11a8c:	andeq	r0, r0, r0, ror #24
   11a90:	strdeq	r1, [r1], -ip
   11a94:	andeq	r0, r0, r0, lsr ip
   11a98:	andeq	r1, r1, r0, lsr #21
   11a9c:	ldrdeq	r0, [r0], -ip
   11aa0:	andeq	r0, r0, r4, asr r7
   11aa4:	andeq	r1, r1, r8, ror #19
   11aa8:	andeq	r0, r0, r8, ror fp
   11aac:	andeq	r1, r1, ip, ror #18
   11ab0:	andeq	r0, r0, r8, ror #22
   11ab4:	andeq	r0, r0, r0, ror fp
   11ab8:	andeq	r0, r0, r8, rrx
   11abc:			; <UNDEFINED> instruction: 0x00000abc
   11ac0:	muleq	r0, r4, r5
   11ac4:	andeq	r0, r0, r8, lsl sl
   11ac8:	andeq	r0, r0, ip, asr r5
   11acc:	andeq	r0, r0, r4, asr #18
   11ad0:	andeq	r0, r0, ip, lsl #18
   11ad4:			; <UNDEFINED> instruction: 0x000008b0
   11ad8:	andeq	r0, r0, ip, ror #16
   11adc:	andeq	r0, r0, r0, lsr r8
   11ae0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11ae4:			; <UNDEFINED> instruction: 0x000007b8
   11ae8:	andeq	r0, r0, r8, ror #14
   11aec:	andeq	r0, r0, r8, ror #12
   11af0:	andeq	r0, r0, ip, lsr #12
   11af4:	andeq	r0, r0, ip, asr #12
   11af8:	andeq	r0, r0, r8, lsl r6
   11afc:	ldrdeq	r0, [r0], -ip
   11b00:	andeq	r0, r0, ip, ror r4
   11b04:	andeq	r0, r0, r8, asr #8
   11b08:	andeq	r0, r0, r8, lsr r3

00011b0c <_start@@Base>:
   11b0c:	mov	fp, #0
   11b10:	mov	lr, #0
   11b14:	pop	{r1}		; (ldr r1, [sp], #4)
   11b18:	mov	r2, sp
   11b1c:	push	{r2}		; (str r2, [sp, #-4]!)
   11b20:	push	{r0}		; (str r0, [sp, #-4]!)
   11b24:	ldr	ip, [pc, #16]	; 11b3c <_start@@Base+0x30>
   11b28:	push	{ip}		; (str ip, [sp, #-4]!)
   11b2c:	ldr	r0, [pc, #12]	; 11b40 <_start@@Base+0x34>
   11b30:	ldr	r3, [pc, #12]	; 11b44 <_start@@Base+0x38>
   11b34:	bl	10b74 <__libc_start_main@plt>
   11b38:	bl	10c1c <abort@plt>
   11b3c:	andeq	r1, r1, r4, lsr #25
   11b40:	andeq	r0, r1, r8, lsr #24
   11b44:	andeq	r1, r1, r0, asr #24
   11b48:	ldr	r3, [pc, #20]	; 11b64 <_start@@Base+0x58>
   11b4c:	ldr	r2, [pc, #20]	; 11b68 <_start@@Base+0x5c>
   11b50:	add	r3, pc, r3
   11b54:	ldr	r2, [r3, r2]
   11b58:	cmp	r2, #0
   11b5c:	bxeq	lr
   11b60:	b	10b80 <__gmon_start__@plt>
   11b64:	andeq	r1, r1, r8, lsr #9
   11b68:	andeq	r0, r0, r4, rrx
   11b6c:	push	{r3, lr}
   11b70:	movw	r0, #12444	; 0x309c
   11b74:	ldr	r3, [pc, #36]	; 11ba0 <_start@@Base+0x94>
   11b78:	movt	r0, #2
   11b7c:	rsb	r3, r0, r3
   11b80:	cmp	r3, #6
   11b84:	popls	{r3, pc}
   11b88:	movw	r3, #0
   11b8c:	movt	r3, #0
   11b90:	cmp	r3, #0
   11b94:	popeq	{r3, pc}
   11b98:	blx	r3
   11b9c:	pop	{r3, pc}
   11ba0:	muleq	r2, pc, r0	; <UNPREDICTABLE>
   11ba4:	push	{r3, lr}
   11ba8:	movw	r0, #12444	; 0x309c
   11bac:	movw	r3, #12444	; 0x309c
   11bb0:	movt	r0, #2
   11bb4:	movt	r3, #2
   11bb8:	rsb	r3, r0, r3
   11bbc:	asr	r3, r3, #2
   11bc0:	add	r3, r3, r3, lsr #31
   11bc4:	asrs	r1, r3, #1
   11bc8:	popeq	{r3, pc}
   11bcc:	movw	r2, #0
   11bd0:	movt	r2, #0
   11bd4:	cmp	r2, #0
   11bd8:	popeq	{r3, pc}
   11bdc:	blx	r2
   11be0:	pop	{r3, pc}
   11be4:	push	{r4, lr}
   11be8:	movw	r4, #12444	; 0x309c
   11bec:	movt	r4, #2
   11bf0:	ldrb	r3, [r4]
   11bf4:	cmp	r3, #0
   11bf8:	popne	{r4, pc}
   11bfc:	bl	11b6c <_start@@Base+0x60>
   11c00:	mov	r3, #1
   11c04:	strb	r3, [r4]
   11c08:	pop	{r4, pc}
   11c0c:	movw	r0, #11988	; 0x2ed4
   11c10:	movt	r0, #2
   11c14:	push	{r3, lr}
   11c18:	ldr	r3, [r0]
   11c1c:	cmp	r3, #0
   11c20:	beq	11c38 <_start@@Base+0x12c>
   11c24:	movw	r3, #0
   11c28:	movt	r3, #0
   11c2c:	cmp	r3, #0
   11c30:	beq	11c38 <_start@@Base+0x12c>
   11c34:	blx	r3
   11c38:	pop	{r3, lr}
   11c3c:	b	11ba4 <_start@@Base+0x98>

00011c40 <__libc_csu_init@@Base>:
   11c40:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11c44:	mov	r7, r0
   11c48:	ldr	r6, [pc, #76]	; 11c9c <__libc_csu_init@@Base+0x5c>
   11c4c:	mov	r8, r1
   11c50:	ldr	r5, [pc, #72]	; 11ca0 <__libc_csu_init@@Base+0x60>
   11c54:	mov	r9, r2
   11c58:	add	r6, pc, r6
   11c5c:	bl	10b0c <_init@@Base>
   11c60:	add	r5, pc, r5
   11c64:	rsb	r6, r5, r6
   11c68:	asrs	r6, r6, #2
   11c6c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11c70:	sub	r5, r5, #4
   11c74:	mov	r4, #0
   11c78:	add	r4, r4, #1
   11c7c:	ldr	r3, [r5, #4]!
   11c80:	mov	r0, r7
   11c84:	mov	r1, r8
   11c88:	mov	r2, r9
   11c8c:	blx	r3
   11c90:	cmp	r4, r6
   11c94:	bne	11c78 <__libc_csu_init@@Base+0x38>
   11c98:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11c9c:	andeq	r1, r1, r0, ror r2
   11ca0:	andeq	r1, r1, r4, ror #4

00011ca4 <__libc_csu_fini@@Base>:
   11ca4:	bx	lr

Disassembly of section .fini:

00011ca8 <_fini@@Base>:
   11ca8:	push	{r3, lr}
   11cac:	pop	{r3, pc}
