
centos-preinstalled/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00011138 <.init>:
   11138:	push	{r3, lr}
   1113c:	bl	12568 <__assert_fail@plt+0x1104>
   11140:	pop	{r3, pc}

Disassembly of section .plt:

00011144 <fdopen@plt-0x14>:
   11144:	push	{lr}		; (str lr, [sp, #-4]!)
   11148:	ldr	lr, [pc, #4]	; 11154 <fdopen@plt-0x4>
   1114c:	add	lr, pc, lr
   11150:	ldr	pc, [lr, #8]!
   11154:	andeq	ip, r1, ip, lsr #29

00011158 <fdopen@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3756]!	; 0xeac

00011164 <calloc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3748]!	; 0xea4

00011170 <fputs_unlocked@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3740]!	; 0xe9c

0001117c <raise@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3732]!	; 0xe94

00011188 <__getdelim@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3724]!	; 0xe8c

00011194 <__strncat_chk@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3716]!	; 0xe84

000111a0 <strcmp@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111ac <strtol@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3700]!	; 0xe74

000111b8 <fflush@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #28, 20	; 0x1c000
   111c0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111c4 <wcwidth@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #28, 20	; 0x1c000
   111cc:	ldr	pc, [ip, #3684]!	; 0xe64

000111d0 <free@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #28, 20	; 0x1c000
   111d8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #28, 20	; 0x1c000
   111e4:	ldr	pc, [ip, #3668]!	; 0xe54

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #28, 20	; 0x1c000
   111f0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111f4 <__strtoull_internal@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #28, 20	; 0x1c000
   111fc:	ldr	pc, [ip, #3652]!	; 0xe44

00011200 <mbsinit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #28, 20	; 0x1c000
   11208:	ldr	pc, [ip, #3644]!	; 0xe3c

0001120c <memcmp@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #28, 20	; 0x1c000
   11214:	ldr	pc, [ip, #3636]!	; 0xe34

00011218 <dcgettext@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #28, 20	; 0x1c000
   11220:	ldr	pc, [ip, #3628]!	; 0xe2c

00011224 <__stack_chk_fail@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #28, 20	; 0x1c000
   1122c:	ldr	pc, [ip, #3620]!	; 0xe24

00011230 <realloc@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #28, 20	; 0x1c000
   11238:	ldr	pc, [ip, #3612]!	; 0xe1c

0001123c <textdomain@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #28, 20	; 0x1c000
   11244:	ldr	pc, [ip, #3604]!	; 0xe14

00011248 <__strndup@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #28, 20	; 0x1c000
   11250:	ldr	pc, [ip, #3596]!	; 0xe0c

00011254 <iswprint@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #28, 20	; 0x1c000
   1125c:	ldr	pc, [ip, #3588]!	; 0xe04

00011260 <fwrite@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #28, 20	; 0x1c000
   11268:	ldr	pc, [ip, #3580]!	; 0xdfc

0001126c <lseek64@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #28, 20	; 0x1c000
   11274:	ldr	pc, [ip, #3572]!	; 0xdf4

00011278 <__ctype_get_mb_cur_max@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #28, 20	; 0x1c000
   11280:	ldr	pc, [ip, #3564]!	; 0xdec

00011284 <strcpy@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #28, 20	; 0x1c000
   1128c:	ldr	pc, [ip, #3556]!	; 0xde4

00011290 <__fpending@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #28, 20	; 0x1c000
   11298:	ldr	pc, [ip, #3548]!	; 0xddc

0001129c <mbrtowc@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #28, 20	; 0x1c000
   112a4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112a8 <wcstombs@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #28, 20	; 0x1c000
   112b0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112b4 <error@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #28, 20	; 0x1c000
   112bc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112c0 <open64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #28, 20	; 0x1c000
   112c8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112cc <getenv@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #28, 20	; 0x1c000
   112d4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112d8 <malloc@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #28, 20	; 0x1c000
   112e0:	ldr	pc, [ip, #3500]!	; 0xdac

000112e4 <__libc_start_main@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #28, 20	; 0x1c000
   112ec:	ldr	pc, [ip, #3492]!	; 0xda4

000112f0 <__freading@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #28, 20	; 0x1c000
   112f8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112fc <__gmon_start__@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #28, 20	; 0x1c000
   11304:	ldr	pc, [ip, #3476]!	; 0xd94

00011308 <mempcpy@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #28, 20	; 0x1c000
   11310:	ldr	pc, [ip, #3468]!	; 0xd8c

00011314 <getopt_long@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #28, 20	; 0x1c000
   1131c:	ldr	pc, [ip, #3460]!	; 0xd84

00011320 <__ctype_b_loc@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #28, 20	; 0x1c000
   11328:	ldr	pc, [ip, #3452]!	; 0xd7c

0001132c <exit@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #28, 20	; 0x1c000
   11334:	ldr	pc, [ip, #3444]!	; 0xd74

00011338 <strlen@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #28, 20	; 0x1c000
   11340:	ldr	pc, [ip, #3436]!	; 0xd6c

00011344 <strchr@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #28, 20	; 0x1c000
   1134c:	ldr	pc, [ip, #3428]!	; 0xd64

00011350 <ungetc@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #28, 20	; 0x1c000
   11358:	ldr	pc, [ip, #3420]!	; 0xd5c

0001135c <__errno_location@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #28, 20	; 0x1c000
   11364:	ldr	pc, [ip, #3412]!	; 0xd54

00011368 <__cxa_atexit@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #28, 20	; 0x1c000
   11370:	ldr	pc, [ip, #3404]!	; 0xd4c

00011374 <__strdup@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #28, 20	; 0x1c000
   1137c:	ldr	pc, [ip, #3396]!	; 0xd44

00011380 <memset@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #28, 20	; 0x1c000
   11388:	ldr	pc, [ip, #3388]!	; 0xd3c

0001138c <fscanf@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #28, 20	; 0x1c000
   11394:	ldr	pc, [ip, #3380]!	; 0xd34

00011398 <__printf_chk@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #28, 20	; 0x1c000
   113a0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113a4 <fileno@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #28, 20	; 0x1c000
   113ac:	ldr	pc, [ip, #3364]!	; 0xd24

000113b0 <__fprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #28, 20	; 0x1c000
   113b8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113bc <fclose@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #28, 20	; 0x1c000
   113c4:	ldr	pc, [ip, #3348]!	; 0xd14

000113c8 <fseeko64@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #28, 20	; 0x1c000
   113d0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113d4 <__uflow@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #28, 20	; 0x1c000
   113dc:	ldr	pc, [ip, #3332]!	; 0xd04

000113e0 <__overflow@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #28, 20	; 0x1c000
   113e8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113ec <setlocale@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #28, 20	; 0x1c000
   113f4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113f8 <wcswidth@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #28, 20	; 0x1c000
   11400:	ldr	pc, [ip, #3308]!	; 0xcec

00011404 <strrchr@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #28, 20	; 0x1c000
   1140c:	ldr	pc, [ip, #3300]!	; 0xce4

00011410 <nl_langinfo@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #28, 20	; 0x1c000
   11418:	ldr	pc, [ip, #3292]!	; 0xcdc

0001141c <mbstowcs@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #28, 20	; 0x1c000
   11424:	ldr	pc, [ip, #3284]!	; 0xcd4

00011428 <bindtextdomain@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #28, 20	; 0x1c000
   11430:	ldr	pc, [ip, #3276]!	; 0xccc

00011434 <strncmp@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #28, 20	; 0x1c000
   1143c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011440 <abort@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #28, 20	; 0x1c000
   11448:	ldr	pc, [ip, #3260]!	; 0xcbc

0001144c <close@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #28, 20	; 0x1c000
   11454:	ldr	pc, [ip, #3252]!	; 0xcb4

00011458 <__snprintf_chk@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #28, 20	; 0x1c000
   11460:	ldr	pc, [ip, #3244]!	; 0xcac

00011464 <__assert_fail@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #28, 20	; 0x1c000
   1146c:	ldr	pc, [ip, #3236]!	; 0xca4

Disassembly of section .text:

00011470 <close_stdout@@Base-0x336c>:
   11470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11474:	sub	sp, sp, #52	; 0x34
   11478:	ldr	r7, [pc, #3860]	; 12394 <__assert_fail@plt+0xf30>
   1147c:	mov	r9, r1
   11480:	ldr	r3, [pc, #3856]	; 12398 <__assert_fail@plt+0xf34>
   11484:	add	r7, pc, r7
   11488:	str	r0, [sp, #20]
   1148c:	ldr	r0, [r1]
   11490:	ldr	r3, [r7, r3]
   11494:	ldr	r4, [pc, #3840]	; 1239c <__assert_fail@plt+0xf38>
   11498:	ldr	r3, [r3]
   1149c:	add	r4, pc, r4
   114a0:	str	r3, [sp, #44]	; 0x2c
   114a4:	bl	14dc8 <close_stdout@@Base+0x5ec>
   114a8:	ldr	r1, [pc, #3824]	; 123a0 <__assert_fail@plt+0xf3c>
   114ac:	mov	r0, #6
   114b0:	add	r1, pc, r1
   114b4:	bl	113ec <setlocale@plt>
   114b8:	ldr	r1, [pc, #3812]	; 123a4 <__assert_fail@plt+0xf40>
   114bc:	mov	r0, r4
   114c0:	add	r1, pc, r1
   114c4:	bl	11428 <bindtextdomain@plt>
   114c8:	mov	r0, r4
   114cc:	bl	1123c <textdomain@plt>
   114d0:	mov	r0, #65536	; 0x10000
   114d4:	bl	11410 <nl_langinfo@plt>
   114d8:	ldr	r3, [pc, #3784]	; 123a8 <__assert_fail@plt+0xf44>
   114dc:	add	r3, pc, r3
   114e0:	cmp	r0, #0
   114e4:	str	r0, [r3, #28]
   114e8:	beq	1160c <__assert_fail@plt+0x1a8>
   114ec:	ldrb	r3, [r0]
   114f0:	cmp	r3, #0
   114f4:	beq	1160c <__assert_fail@plt+0x1a8>
   114f8:	ldr	r4, [pc, #3756]	; 123ac <__assert_fail@plt+0xf48>
   114fc:	ldr	r8, [pc, #3756]	; 123b0 <__assert_fail@plt+0xf4c>
   11500:	add	r4, pc, r4
   11504:	ldr	r6, [pc, #3752]	; 123b4 <__assert_fail@plt+0xf50>
   11508:	add	r8, pc, r8
   1150c:	ldr	r5, [pc, #3748]	; 123b8 <__assert_fail@plt+0xf54>
   11510:	ldr	r0, [r4, #28]
   11514:	add	ip, r8, #64	; 0x40
   11518:	str	ip, [sp, #28]
   1151c:	bl	11338 <strlen@plt>
   11520:	ldr	r3, [pc, #3732]	; 123bc <__assert_fail@plt+0xf58>
   11524:	add	r6, pc, r6
   11528:	add	r5, pc, r5
   1152c:	add	ip, r6, #20
   11530:	str	ip, [sp, #24]
   11534:	add	sl, r5, #144	; 0x90
   11538:	str	r0, [r4, #32]
   1153c:	ldr	r0, [r7, r3]
   11540:	bl	1b184 <close_stdout@@Base+0x69a8>
   11544:	ldr	fp, [pc, #3700]	; 123c0 <__assert_fail@plt+0xf5c>
   11548:	mov	r4, #0
   1154c:	ldr	r2, [pc, #3696]	; 123c4 <__assert_fail@plt+0xf60>
   11550:	mov	r1, r9
   11554:	add	fp, pc, fp
   11558:	ldr	r0, [sp, #20]
   1155c:	str	r4, [sp]
   11560:	add	r2, pc, r2
   11564:	mov	r3, fp
   11568:	bl	11314 <getopt_long@plt>
   1156c:	cmn	r0, #1
   11570:	beq	11a38 <__assert_fail@plt+0x5d4>
   11574:	movw	r3, #261	; 0x105
   11578:	cmp	r0, r3
   1157c:	beq	118ec <__assert_fail@plt+0x488>
   11580:	bgt	11624 <__assert_fail@plt+0x1c0>
   11584:	cmp	r0, #256	; 0x100
   11588:	beq	11894 <__assert_fail@plt+0x430>
   1158c:	ble	116a8 <__assert_fail@plt+0x244>
   11590:	movw	r3, #258	; 0x102
   11594:	cmp	r0, r3
   11598:	beq	1183c <__assert_fail@plt+0x3d8>
   1159c:	blt	1181c <__assert_fail@plt+0x3b8>
   115a0:	add	r3, r3, #1
   115a4:	cmp	r0, r3
   115a8:	beq	11780 <__assert_fail@plt+0x31c>
   115ac:	cmp	r0, #260	; 0x104
   115b0:	bne	116c0 <__assert_fail@plt+0x25c>
   115b4:	ldr	r0, [pc, #3596]	; 123c8 <__assert_fail@plt+0xf64>
   115b8:	mov	r3, #4
   115bc:	ldr	r1, [pc, #3592]	; 123cc <__assert_fail@plt+0xf68>
   115c0:	add	r2, fp, #332	; 0x14c
   115c4:	ldr	r4, [pc, #3588]	; 123d0 <__assert_fail@plt+0xf6c>
   115c8:	ldr	r1, [r7, r1]
   115cc:	add	r4, pc, r4
   115d0:	str	r3, [sp]
   115d4:	add	r3, r4, #124	; 0x7c
   115d8:	ldr	ip, [r7, r0]
   115dc:	ldr	r0, [pc, #3568]	; 123d4 <__assert_fail@plt+0xf70>
   115e0:	ldr	r1, [r1]
   115e4:	ldr	ip, [ip]
   115e8:	add	r0, pc, r0
   115ec:	str	ip, [sp, #4]
   115f0:	bl	146f8 <__assert_fail@plt+0x3294>
   115f4:	ldr	r3, [pc, #3548]	; 123d8 <__assert_fail@plt+0xf74>
   115f8:	add	r3, pc, r3
   115fc:	add	r0, r4, r0, lsl #2
   11600:	ldr	r2, [r0, #124]	; 0x7c
   11604:	str	r2, [r3, #32]
   11608:	b	11544 <__assert_fail@plt+0xe0>
   1160c:	ldr	r3, [pc, #3528]	; 123dc <__assert_fail@plt+0xf78>
   11610:	ldr	r2, [pc, #3528]	; 123e0 <__assert_fail@plt+0xf7c>
   11614:	add	r3, pc, r3
   11618:	add	r2, pc, r2
   1161c:	str	r2, [r3, #28]
   11620:	b	114f8 <__assert_fail@plt+0x94>
   11624:	movw	r3, #265	; 0x109
   11628:	cmp	r0, r3
   1162c:	beq	11a24 <__assert_fail@plt+0x5c0>
   11630:	ble	116c8 <__assert_fail@plt+0x264>
   11634:	movw	r3, #267	; 0x10b
   11638:	cmp	r0, r3
   1163c:	beq	119a8 <__assert_fail@plt+0x544>
   11640:	blt	117bc <__assert_fail@plt+0x358>
   11644:	cmp	r0, #268	; 0x10c
   11648:	beq	117a0 <__assert_fail@plt+0x33c>
   1164c:	add	r3, r3, #2
   11650:	cmp	r0, r3
   11654:	bne	116c0 <__assert_fail@plt+0x25c>
   11658:	ldr	r1, [pc, #3436]	; 123cc <__assert_fail@plt+0xf68>
   1165c:	mov	r3, #4
   11660:	ldr	ip, [pc, #3424]	; 123c8 <__assert_fail@plt+0xf64>
   11664:	add	r2, fp, #356	; 0x164
   11668:	ldr	r0, [pc, #3444]	; 123e4 <__assert_fail@plt+0xf80>
   1166c:	ldr	r1, [r7, r1]
   11670:	str	r3, [sp]
   11674:	add	r0, pc, r0
   11678:	ldr	ip, [r7, ip]
   1167c:	mov	r3, sl
   11680:	ldr	r1, [r1]
   11684:	ldr	ip, [ip]
   11688:	str	ip, [sp, #4]
   1168c:	bl	146f8 <__assert_fail@plt+0x3294>
   11690:	ldr	r3, [pc, #3408]	; 123e8 <__assert_fail@plt+0xf84>
   11694:	add	r3, pc, r3
   11698:	add	r0, r5, r0, lsl #2
   1169c:	ldr	r2, [r0, #144]	; 0x90
   116a0:	str	r2, [r3, #12]
   116a4:	b	11544 <__assert_fail@plt+0xe0>
   116a8:	cmn	r0, #2
   116ac:	beq	117d4 <__assert_fail@plt+0x370>
   116b0:	cmp	r0, #100	; 0x64
   116b4:	beq	11744 <__assert_fail@plt+0x2e0>
   116b8:	cmn	r0, #3
   116bc:	beq	117dc <__assert_fail@plt+0x378>
   116c0:	mov	r0, #1
   116c4:	bl	13f18 <__assert_fail@plt+0x2ab4>
   116c8:	movw	r3, #263	; 0x107
   116cc:	cmp	r0, r3
   116d0:	beq	11908 <__assert_fail@plt+0x4a4>
   116d4:	cmp	r0, #264	; 0x108
   116d8:	bge	116f0 <__assert_fail@plt+0x28c>
   116dc:	ldr	r3, [pc, #3336]	; 123ec <__assert_fail@plt+0xf88>
   116e0:	mov	r2, #1
   116e4:	add	r3, pc, r3
   116e8:	str	r2, [r3, #56]	; 0x38
   116ec:	b	11544 <__assert_fail@plt+0xe0>
   116f0:	ldr	r3, [pc, #3284]	; 123cc <__assert_fail@plt+0xf68>
   116f4:	mov	r1, r4
   116f8:	ldr	r4, [pc, #3312]	; 123f0 <__assert_fail@plt+0xf8c>
   116fc:	mov	r2, #10
   11700:	ldr	r0, [pc, #3308]	; 123f4 <__assert_fail@plt+0xf90>
   11704:	ldr	fp, [r7, r3]
   11708:	add	r4, pc, r4
   1170c:	add	r0, pc, r0
   11710:	str	r0, [sp]
   11714:	mov	r3, r4
   11718:	ldr	r0, [fp]
   1171c:	bl	16e44 <close_stdout@@Base+0x2668>
   11720:	cmp	r0, #0
   11724:	bne	11734 <__assert_fail@plt+0x2d0>
   11728:	ldr	r3, [r4]
   1172c:	cmp	r3, #0
   11730:	bgt	11544 <__assert_fail@plt+0xe0>
   11734:	ldr	r1, [pc, #3260]	; 123f8 <__assert_fail@plt+0xf94>
   11738:	mov	r0, #0
   1173c:	add	r1, pc, r1
   11740:	b	119f8 <__assert_fail@plt+0x594>
   11744:	ldr	r3, [pc, #3200]	; 123cc <__assert_fail@plt+0xf68>
   11748:	ldr	fp, [r7, r3]
   1174c:	ldr	r3, [fp]
   11750:	ldrb	r2, [r3]
   11754:	cmp	r2, #0
   11758:	beq	11768 <__assert_fail@plt+0x304>
   1175c:	ldrb	r3, [r3, #1]
   11760:	cmp	r3, #0
   11764:	bne	120f4 <__assert_fail@plt+0xc90>
   11768:	ldr	r2, [fp]
   1176c:	ldr	r3, [pc, #3208]	; 123fc <__assert_fail@plt+0xf98>
   11770:	ldrb	r2, [r2]
   11774:	add	r3, pc, r3
   11778:	str	r2, [r3, #4]
   1177c:	b	11544 <__assert_fail@plt+0xe0>
   11780:	ldr	r3, [pc, #3140]	; 123cc <__assert_fail@plt+0xf68>
   11784:	ldr	r3, [r7, r3]
   11788:	ldr	r0, [r3]
   1178c:	bl	12660 <__assert_fail@plt+0x11fc>
   11790:	ldr	r3, [pc, #3176]	; 12400 <__assert_fail@plt+0xf9c>
   11794:	add	r3, pc, r3
   11798:	strd	r0, [r3, #24]
   1179c:	b	11544 <__assert_fail@plt+0xe0>
   117a0:	ldr	r2, [pc, #3108]	; 123cc <__assert_fail@plt+0xf68>
   117a4:	ldr	r3, [pc, #3160]	; 12404 <__assert_fail@plt+0xfa0>
   117a8:	ldr	r2, [r7, r2]
   117ac:	add	r3, pc, r3
   117b0:	ldr	r2, [r2]
   117b4:	str	r2, [r3, #72]	; 0x48
   117b8:	b	11544 <__assert_fail@plt+0xe0>
   117bc:	ldr	r3, [pc, #3140]	; 12408 <__assert_fail@plt+0xfa4>
   117c0:	mov	r2, #1
   117c4:	add	r3, pc, r3
   117c8:	strb	r2, [r3]
   117cc:	strb	r2, [r3, #36]	; 0x24
   117d0:	b	11544 <__assert_fail@plt+0xe0>
   117d4:	mov	r0, r4
   117d8:	bl	13f18 <__assert_fail@plt+0x2ab4>
   117dc:	ldr	r1, [pc, #3112]	; 1240c <__assert_fail@plt+0xfa8>
   117e0:	ldr	r3, [pc, #3112]	; 12410 <__assert_fail@plt+0xfac>
   117e4:	ldr	r2, [pc, #3112]	; 12414 <__assert_fail@plt+0xfb0>
   117e8:	ldr	r0, [r7, r1]
   117ec:	ldr	r3, [r7, r3]
   117f0:	add	r2, pc, r2
   117f4:	ldr	r1, [pc, #3100]	; 12418 <__assert_fail@plt+0xfb4>
   117f8:	ldr	r0, [r0]
   117fc:	ldr	r3, [r3]
   11800:	add	r1, pc, r1
   11804:	stm	sp, {r2, r4}
   11808:	ldr	r2, [pc, #3084]	; 1241c <__assert_fail@plt+0xfb8>
   1180c:	add	r2, pc, r2
   11810:	bl	16ab4 <close_stdout@@Base+0x22d8>
   11814:	mov	r0, r4
   11818:	bl	1132c <exit@plt>
   1181c:	ldr	r3, [pc, #2984]	; 123cc <__assert_fail@plt+0xf68>
   11820:	ldr	r3, [r7, r3]
   11824:	ldr	r0, [r3]
   11828:	bl	12660 <__assert_fail@plt+0x11fc>
   1182c:	ldr	r3, [pc, #3052]	; 12420 <__assert_fail@plt+0xfbc>
   11830:	add	r3, pc, r3
   11834:	strd	r0, [r3, #16]
   11838:	b	11544 <__assert_fail@plt+0xe0>
   1183c:	ldr	r0, [pc, #2948]	; 123c8 <__assert_fail@plt+0xf64>
   11840:	mov	r3, #4
   11844:	ldr	r1, [pc, #2944]	; 123cc <__assert_fail@plt+0xf68>
   11848:	add	r2, fp, #312	; 0x138
   1184c:	ldr	r4, [pc, #3024]	; 12424 <__assert_fail@plt+0xfc0>
   11850:	ldr	r1, [r7, r1]
   11854:	add	r4, pc, r4
   11858:	str	r3, [sp]
   1185c:	add	r3, r4, #108	; 0x6c
   11860:	ldr	ip, [r7, r0]
   11864:	ldr	r0, [pc, #3004]	; 12428 <__assert_fail@plt+0xfc4>
   11868:	ldr	r1, [r1]
   1186c:	ldr	ip, [ip]
   11870:	add	r0, pc, r0
   11874:	str	ip, [sp, #4]
   11878:	bl	146f8 <__assert_fail@plt+0x3294>
   1187c:	ldr	r3, [pc, #2984]	; 1242c <__assert_fail@plt+0xfc8>
   11880:	add	r3, pc, r3
   11884:	add	r0, r4, r0, lsl #2
   11888:	ldr	r2, [r0, #108]	; 0x6c
   1188c:	str	r2, [r3, #40]	; 0x28
   11890:	b	11544 <__assert_fail@plt+0xe0>
   11894:	ldr	r0, [pc, #2860]	; 123c8 <__assert_fail@plt+0xf64>
   11898:	mov	r3, #4
   1189c:	ldr	r1, [pc, #2856]	; 123cc <__assert_fail@plt+0xf68>
   118a0:	add	r2, fp, #288	; 0x120
   118a4:	ldr	r4, [pc, #2948]	; 12430 <__assert_fail@plt+0xfcc>
   118a8:	ldr	r1, [r7, r1]
   118ac:	add	r4, pc, r4
   118b0:	str	r3, [sp]
   118b4:	add	r3, r4, #88	; 0x58
   118b8:	ldr	ip, [r7, r0]
   118bc:	ldr	r0, [pc, #2928]	; 12434 <__assert_fail@plt+0xfd0>
   118c0:	ldr	r1, [r1]
   118c4:	ldr	ip, [ip]
   118c8:	add	r0, pc, r0
   118cc:	str	ip, [sp, #4]
   118d0:	bl	146f8 <__assert_fail@plt+0x3294>
   118d4:	ldr	r3, [pc, #2908]	; 12438 <__assert_fail@plt+0xfd4>
   118d8:	add	r3, pc, r3
   118dc:	add	r0, r4, r0, lsl #2
   118e0:	ldr	r2, [r0, #88]	; 0x58
   118e4:	str	r2, [r3, #24]
   118e8:	b	11544 <__assert_fail@plt+0xe0>
   118ec:	ldr	r2, [pc, #2776]	; 123cc <__assert_fail@plt+0xf68>
   118f0:	ldr	r3, [pc, #2884]	; 1243c <__assert_fail@plt+0xfd8>
   118f4:	ldr	r2, [r7, r2]
   118f8:	add	r3, pc, r3
   118fc:	ldr	r2, [r2]
   11900:	str	r2, [r3, #44]	; 0x2c
   11904:	b	11544 <__assert_fail@plt+0xe0>
   11908:	ldr	r0, [pc, #2748]	; 123cc <__assert_fail@plt+0xf68>
   1190c:	mov	r1, r4
   11910:	ldr	ip, [pc, #2856]	; 12440 <__assert_fail@plt+0xfdc>
   11914:	mov	r2, #10
   11918:	ldr	r3, [sp, #24]
   1191c:	ldr	fp, [r7, r0]
   11920:	add	ip, pc, ip
   11924:	str	ip, [sp]
   11928:	ldr	r0, [fp]
   1192c:	bl	16e44 <close_stdout@@Base+0x2668>
   11930:	cmp	r0, #0
   11934:	bne	11944 <__assert_fail@plt+0x4e0>
   11938:	ldr	r3, [r6, #20]
   1193c:	cmp	r3, #0
   11940:	bne	11978 <__assert_fail@plt+0x514>
   11944:	ldr	r1, [pc, #2808]	; 12444 <__assert_fail@plt+0xfe0>
   11948:	mov	r2, #5
   1194c:	mov	r0, #0
   11950:	add	r1, pc, r1
   11954:	bl	11218 <dcgettext@plt>
   11958:	mov	r4, r0
   1195c:	ldr	r0, [fp]
   11960:	bl	16618 <close_stdout@@Base+0x1e3c>
   11964:	mov	r2, r4
   11968:	mov	r1, #0
   1196c:	mov	r3, r0
   11970:	mov	r0, #1
   11974:	bl	112b4 <error@plt>
   11978:	ldr	r3, [pc, #2760]	; 12448 <__assert_fail@plt+0xfe4>
   1197c:	add	r3, pc, r3
   11980:	ldr	r2, [r3, #20]
   11984:	cmp	r2, #0
   11988:	bge	11544 <__assert_fail@plt+0xe0>
   1198c:	ldr	r0, [pc, #2744]	; 1244c <__assert_fail@plt+0xfe8>
   11990:	rsb	r2, r2, #0
   11994:	mov	r1, #0
   11998:	str	r2, [r3, #20]
   1199c:	add	r0, pc, r0
   119a0:	str	r1, [r0, #36]	; 0x24
   119a4:	b	11544 <__assert_fail@plt+0xe0>
   119a8:	ldr	r3, [pc, #2588]	; 123cc <__assert_fail@plt+0xf68>
   119ac:	ldr	fp, [r7, r3]
   119b0:	ldr	r0, [fp]
   119b4:	cmp	r0, #0
   119b8:	beq	11fa0 <__assert_fail@plt+0xb3c>
   119bc:	ldr	ip, [pc, #2700]	; 12450 <__assert_fail@plt+0xfec>
   119c0:	mov	r1, r4
   119c4:	mov	r2, #10
   119c8:	ldr	r3, [sp, #28]
   119cc:	add	ip, pc, ip
   119d0:	str	ip, [sp]
   119d4:	bl	17490 <close_stdout@@Base+0x2cb4>
   119d8:	cmp	r0, #0
   119dc:	bne	119ec <__assert_fail@plt+0x588>
   119e0:	ldrd	r2, [r8, #64]	; 0x40
   119e4:	orrs	lr, r2, r3
   119e8:	bne	11544 <__assert_fail@plt+0xe0>
   119ec:	ldr	r1, [pc, #2656]	; 12454 <__assert_fail@plt+0xff0>
   119f0:	mov	r0, #0
   119f4:	add	r1, pc, r1
   119f8:	mov	r2, #5
   119fc:	bl	11218 <dcgettext@plt>
   11a00:	mov	r4, r0
   11a04:	ldr	r0, [fp]
   11a08:	bl	16618 <close_stdout@@Base+0x1e3c>
   11a0c:	mov	r2, r4
   11a10:	mov	r1, #0
   11a14:	mov	r3, r0
   11a18:	mov	r0, #1
   11a1c:	bl	112b4 <error@plt>
   11a20:	b	11544 <__assert_fail@plt+0xe0>
   11a24:	ldr	r3, [pc, #2604]	; 12458 <__assert_fail@plt+0xff4>
   11a28:	mov	r2, #1
   11a2c:	add	r3, pc, r3
   11a30:	strb	r2, [r3, #36]	; 0x24
   11a34:	b	11544 <__assert_fail@plt+0xe0>
   11a38:	ldr	r5, [pc, #2588]	; 1245c <__assert_fail@plt+0xff8>
   11a3c:	add	r5, pc, r5
   11a40:	ldr	r3, [r5, #72]	; 0x48
   11a44:	cmp	r3, #0
   11a48:	beq	11a90 <__assert_fail@plt+0x62c>
   11a4c:	ldr	r3, [r5, #56]	; 0x38
   11a50:	cmp	r3, #0
   11a54:	bne	121e8 <__assert_fail@plt+0xd84>
   11a58:	ldr	r3, [pc, #2560]	; 12460 <__assert_fail@plt+0xffc>
   11a5c:	add	r3, pc, r3
   11a60:	ldr	r3, [r3, #20]
   11a64:	cmp	r3, #0
   11a68:	ble	11a90 <__assert_fail@plt+0x62c>
   11a6c:	ldr	r1, [pc, #2544]	; 12464 <__assert_fail@plt+0x1000>
   11a70:	mov	r2, #5
   11a74:	mov	r0, #0
   11a78:	add	r1, pc, r1
   11a7c:	bl	11218 <dcgettext@plt>
   11a80:	mov	r1, #0
   11a84:	mov	r2, r0
   11a88:	mov	r0, #1
   11a8c:	bl	112b4 <error@plt>
   11a90:	ldr	r3, [pc, #2512]	; 12468 <__assert_fail@plt+0x1004>
   11a94:	add	r3, pc, r3
   11a98:	ldrb	r2, [r3, #36]	; 0x24
   11a9c:	cmp	r2, #0
   11aa0:	beq	11ab0 <__assert_fail@plt+0x64c>
   11aa4:	ldr	r2, [r3, #24]
   11aa8:	cmp	r2, #0
   11aac:	beq	1211c <__assert_fail@plt+0xcb8>
   11ab0:	ldr	r3, [pc, #2484]	; 1246c <__assert_fail@plt+0x1008>
   11ab4:	add	r3, pc, r3
   11ab8:	ldr	r5, [r3, #72]	; 0x48
   11abc:	cmp	r5, #0
   11ac0:	beq	11de0 <__assert_fail@plt+0x97c>
   11ac4:	ldr	sl, [pc, #2468]	; 12470 <__assert_fail@plt+0x100c>
   11ac8:	mov	r4, #0
   11acc:	mov	r8, #1
   11ad0:	str	r4, [sp, #40]	; 0x28
   11ad4:	add	sl, pc, sl
   11ad8:	str	r7, [sp, #24]
   11adc:	b	11aec <__assert_fail@plt+0x688>
   11ae0:	mov	r3, #1
   11ae4:	add	r4, r4, r3
   11ae8:	add	r8, r8, #1
   11aec:	ldrb	r6, [r5, r4]
   11af0:	sub	ip, r8, #1
   11af4:	add	fp, r5, r4
   11af8:	cmp	r6, #37	; 0x25
   11afc:	beq	11b4c <__assert_fail@plt+0x6e8>
   11b00:	cmp	r6, #0
   11b04:	bne	11ae0 <__assert_fail@plt+0x67c>
   11b08:	mov	r1, sl
   11b0c:	mov	r2, #5
   11b10:	mov	r0, r6
   11b14:	bl	11218 <dcgettext@plt>
   11b18:	mov	r7, r0
   11b1c:	mov	r0, r5
   11b20:	bl	16618 <close_stdout@@Base+0x1e3c>
   11b24:	mov	r2, r7
   11b28:	mov	r1, r6
   11b2c:	mov	r3, r0
   11b30:	mov	r0, #1
   11b34:	bl	112b4 <error@plt>
   11b38:	ldrb	r3, [fp]
   11b3c:	cmp	r3, #37	; 0x25
   11b40:	bne	11ae0 <__assert_fail@plt+0x67c>
   11b44:	mov	r3, #2
   11b48:	b	11ae4 <__assert_fail@plt+0x680>
   11b4c:	add	r3, r4, #1
   11b50:	add	r1, r5, r3
   11b54:	ldrb	r2, [r5, r3]
   11b58:	cmp	r2, #37	; 0x25
   11b5c:	beq	11b44 <__assert_fail@plt+0x6e0>
   11b60:	cmp	r2, #32
   11b64:	ldr	r7, [sp, #24]
   11b68:	mov	r2, #0
   11b6c:	bne	11b80 <__assert_fail@plt+0x71c>
   11b70:	ldrb	r0, [r1, #1]!
   11b74:	add	r2, r2, #1
   11b78:	cmp	r0, #32
   11b7c:	beq	11b70 <__assert_fail@plt+0x70c>
   11b80:	add	r3, r2, r3
   11b84:	ldrb	r2, [r5, r3]
   11b88:	cmp	r2, #39	; 0x27
   11b8c:	beq	12304 <__assert_fail@plt+0xea0>
   11b90:	ldrb	r2, [r5, r3]
   11b94:	add	r1, r5, r3
   11b98:	cmp	r2, #32
   11b9c:	mov	r2, #0
   11ba0:	bne	11bb4 <__assert_fail@plt+0x750>
   11ba4:	ldrb	r0, [r1, #1]!
   11ba8:	add	r2, r2, #1
   11bac:	cmp	r0, #32
   11bb0:	beq	11ba4 <__assert_fail@plt+0x740>
   11bb4:	add	r6, r2, r3
   11bb8:	str	ip, [sp, #16]
   11bbc:	bl	1135c <__errno_location@plt>
   11bc0:	add	r6, r5, r6
   11bc4:	mov	sl, #0
   11bc8:	add	r1, sp, #40	; 0x28
   11bcc:	mov	r2, #10
   11bd0:	mov	r4, r0
   11bd4:	str	sl, [r0]
   11bd8:	mov	r0, r6
   11bdc:	bl	111ac <strtol@plt>
   11be0:	ldr	r3, [r4]
   11be4:	ldr	ip, [sp, #16]
   11be8:	cmp	r3, #34	; 0x22
   11bec:	mov	r8, r0
   11bf0:	beq	12328 <__assert_fail@plt+0xec4>
   11bf4:	ldr	r4, [sp, #40]	; 0x28
   11bf8:	cmp	r6, r4
   11bfc:	beq	11c18 <__assert_fail@plt+0x7b4>
   11c00:	cmp	r8, #0
   11c04:	beq	11c18 <__assert_fail@plt+0x7b4>
   11c08:	blt	12364 <__assert_fail@plt+0xf00>
   11c0c:	ldr	r3, [pc, #2144]	; 12474 <__assert_fail@plt+0x1010>
   11c10:	add	r3, pc, r3
   11c14:	str	r8, [r3, #20]
   11c18:	rsb	r4, r5, r4
   11c1c:	add	r8, r5, r4
   11c20:	ldrb	r6, [r5, r4]
   11c24:	cmp	r6, #0
   11c28:	beq	1221c <__assert_fail@plt+0xdb8>
   11c2c:	ldrb	r3, [r8]
   11c30:	cmp	r3, #102	; 0x66
   11c34:	beq	11c74 <__assert_fail@plt+0x810>
   11c38:	ldr	r1, [pc, #2104]	; 12478 <__assert_fail@plt+0x1014>
   11c3c:	mov	r2, #5
   11c40:	mov	r0, #0
   11c44:	str	ip, [sp, #16]
   11c48:	add	r1, pc, r1
   11c4c:	bl	11218 <dcgettext@plt>
   11c50:	mov	r6, r0
   11c54:	mov	r0, r5
   11c58:	bl	16618 <close_stdout@@Base+0x1e3c>
   11c5c:	mov	r2, r6
   11c60:	mov	r1, #0
   11c64:	mov	r3, r0
   11c68:	mov	r0, #1
   11c6c:	bl	112b4 <error@plt>
   11c70:	ldr	ip, [sp, #16]
   11c74:	add	r4, r4, #1
   11c78:	add	sl, r5, r4
   11c7c:	ldrb	r3, [r5, r4]
   11c80:	mov	r8, sl
   11c84:	cmp	r3, #0
   11c88:	beq	11d14 <__assert_fail@plt+0x8b0>
   11c8c:	ldr	r6, [pc, #2024]	; 1247c <__assert_fail@plt+0x1018>
   11c90:	mov	fp, ip
   11c94:	str	r7, [sp, #24]
   11c98:	add	r6, pc, r6
   11c9c:	b	11cc4 <__assert_fail@plt+0x860>
   11ca0:	ldrb	r3, [sl]
   11ca4:	cmp	r3, #37	; 0x25
   11ca8:	movne	r3, #1
   11cac:	moveq	r3, #2
   11cb0:	add	r4, r4, r3
   11cb4:	add	sl, r5, r4
   11cb8:	ldrb	r3, [r5, r4]
   11cbc:	cmp	r3, #0
   11cc0:	beq	11d0c <__assert_fail@plt+0x8a8>
   11cc4:	cmp	r3, #37	; 0x25
   11cc8:	bne	11ca0 <__assert_fail@plt+0x83c>
   11ccc:	ldrb	r3, [sl, #1]
   11cd0:	cmp	r3, #37	; 0x25
   11cd4:	beq	11ca0 <__assert_fail@plt+0x83c>
   11cd8:	mov	r1, r6
   11cdc:	mov	r2, #5
   11ce0:	mov	r0, #0
   11ce4:	bl	11218 <dcgettext@plt>
   11ce8:	mov	r7, r0
   11cec:	mov	r0, r5
   11cf0:	bl	16618 <close_stdout@@Base+0x1e3c>
   11cf4:	mov	r2, r7
   11cf8:	mov	r1, #0
   11cfc:	mov	r3, r0
   11d00:	mov	r0, #1
   11d04:	bl	112b4 <error@plt>
   11d08:	b	11ca0 <__assert_fail@plt+0x83c>
   11d0c:	ldr	r7, [sp, #24]
   11d10:	mov	ip, fp
   11d14:	cmp	ip, #0
   11d18:	bne	122b0 <__assert_fail@plt+0xe4c>
   11d1c:	ldrb	r3, [r8]
   11d20:	cmp	r3, #0
   11d24:	bne	1225c <__assert_fail@plt+0xdf8>
   11d28:	mov	r1, r5
   11d2c:	mov	r0, #0
   11d30:	bl	16610 <close_stdout@@Base+0x1e34>
   11d34:	ldr	r3, [pc, #1860]	; 12480 <__assert_fail@plt+0x101c>
   11d38:	add	r3, pc, r3
   11d3c:	ldr	r3, [r3, #56]	; 0x38
   11d40:	cmp	r3, #0
   11d44:	mov	r5, r0
   11d48:	bne	120e8 <__assert_fail@plt+0xc84>
   11d4c:	ldr	r6, [pc, #1840]	; 12484 <__assert_fail@plt+0x1020>
   11d50:	add	r6, pc, r6
   11d54:	ldr	r3, [pc, #1836]	; 12488 <__assert_fail@plt+0x1024>
   11d58:	ldr	r2, [pc, #1836]	; 1248c <__assert_fail@plt+0x1028>
   11d5c:	add	r3, pc, r3
   11d60:	add	r2, pc, r2
   11d64:	ldr	r3, [r3, #36]	; 0x24
   11d68:	ldr	r4, [r2, #20]
   11d6c:	cmp	r3, #0
   11d70:	bne	121dc <__assert_fail@plt+0xd78>
   11d74:	ldr	r8, [pc, #1812]	; 12490 <__assert_fail@plt+0x102c>
   11d78:	add	r8, pc, r8
   11d7c:	ldr	r3, [pc, #1808]	; 12494 <__assert_fail@plt+0x1030>
   11d80:	add	r3, pc, r3
   11d84:	ldr	r1, [r3, #48]	; 0x30
   11d88:	cmp	r1, #0
   11d8c:	beq	1231c <__assert_fail@plt+0xeb8>
   11d90:	mov	r0, #1
   11d94:	bl	16610 <close_stdout@@Base+0x1e34>
   11d98:	ldr	r3, [pc, #1784]	; 12498 <__assert_fail@plt+0x1034>
   11d9c:	ldr	r1, [pc, #1784]	; 1249c <__assert_fail@plt+0x1038>
   11da0:	add	r3, pc, r3
   11da4:	add	r1, pc, r1
   11da8:	ldr	ip, [r3, #52]	; 0x34
   11dac:	cmp	ip, #0
   11db0:	movne	r1, ip
   11db4:	mov	sl, r0
   11db8:	mov	r0, #2
   11dbc:	bl	16610 <close_stdout@@Base+0x1e34>
   11dc0:	stm	sp, {r8, sl}
   11dc4:	mov	r1, r5
   11dc8:	mov	r2, r6
   11dcc:	mov	r3, r4
   11dd0:	str	r0, [sp, #8]
   11dd4:	ldr	r0, [pc, #1732]	; 124a0 <__assert_fail@plt+0x103c>
   11dd8:	add	r0, pc, r0
   11ddc:	bl	12740 <__assert_fail@plt+0x12dc>
   11de0:	ldr	r3, [pc, #1724]	; 124a4 <__assert_fail@plt+0x1040>
   11de4:	add	r3, pc, r3
   11de8:	ldr	r2, [r3, #56]	; 0x38
   11dec:	cmp	r2, #0
   11df0:	beq	11e14 <__assert_fail@plt+0x9b0>
   11df4:	ldr	r3, [r3, #40]	; 0x28
   11df8:	cmp	r3, #0
   11dfc:	bne	121b4 <__assert_fail@plt+0xd50>
   11e00:	ldr	r3, [pc, #1696]	; 124a8 <__assert_fail@plt+0x1044>
   11e04:	add	r3, pc, r3
   11e08:	ldrb	r3, [r3, #36]	; 0x24
   11e0c:	cmp	r3, #0
   11e10:	bne	12174 <__assert_fail@plt+0xd10>
   11e14:	ldr	r4, [pc, #1680]	; 124ac <__assert_fail@plt+0x1048>
   11e18:	add	r4, pc, r4
   11e1c:	ldr	r0, [r4, #20]
   11e20:	bl	128c8 <__assert_fail@plt+0x1464>
   11e24:	ldr	r3, [r4, #20]
   11e28:	cmp	r3, #0
   11e2c:	movne	r1, #0
   11e30:	bne	11e4c <__assert_fail@plt+0x9e8>
   11e34:	ldr	r3, [pc, #1652]	; 124b0 <__assert_fail@plt+0x104c>
   11e38:	add	r3, pc, r3
   11e3c:	ldr	r1, [r3, #4]
   11e40:	subs	ip, r1, #256	; 0x100
   11e44:	rsbs	r1, ip, #0
   11e48:	adcs	r1, r1, ip
   11e4c:	ldr	r3, [pc, #1632]	; 124b4 <__assert_fail@plt+0x1050>
   11e50:	add	r3, pc, r3
   11e54:	ldr	r2, [r3, #12]
   11e58:	str	r1, [r3, #16]
   11e5c:	cmp	r2, #0
   11e60:	ldrne	r3, [pc, #1616]	; 124b8 <__assert_fail@plt+0x1054>
   11e64:	movne	r2, #0
   11e68:	addne	r3, pc, r3
   11e6c:	strne	r2, [r3, #8]
   11e70:	ldr	r3, [pc, #1604]	; 124bc <__assert_fail@plt+0x1058>
   11e74:	ldr	ip, [sp, #20]
   11e78:	ldr	r4, [r7, r3]
   11e7c:	ldr	r1, [r4]
   11e80:	cmp	ip, r1
   11e84:	ble	11fc4 <__assert_fail@plt+0xb60>
   11e88:	ldr	r5, [pc, #1584]	; 124c0 <__assert_fail@plt+0x105c>
   11e8c:	add	r5, pc, r5
   11e90:	ldrb	r3, [r5, #36]	; 0x24
   11e94:	cmp	r3, #0
   11e98:	beq	11efc <__assert_fail@plt+0xa98>
   11e9c:	ldrd	r2, [r5, #64]	; 0x40
   11ea0:	orrs	lr, r2, r3
   11ea4:	beq	11efc <__assert_fail@plt+0xa98>
   11ea8:	ldr	r1, [pc, #1556]	; 124c4 <__assert_fail@plt+0x1060>
   11eac:	mov	r2, #5
   11eb0:	mov	r0, #0
   11eb4:	add	r1, pc, r1
   11eb8:	bl	11218 <dcgettext@plt>
   11ebc:	mov	r2, r0
   11ec0:	mov	r0, #0
   11ec4:	mov	r1, r0
   11ec8:	bl	112b4 <error@plt>
   11ecc:	ldr	r1, [r4]
   11ed0:	ldr	ip, [sp, #20]
   11ed4:	cmp	r1, ip
   11ed8:	blt	11efc <__assert_fail@plt+0xa98>
   11edc:	ldr	r0, [r5, #8]
   11ee0:	bl	111d0 <free@plt>
   11ee4:	ldr	r0, [r5, #48]	; 0x30
   11ee8:	bl	111d0 <free@plt>
   11eec:	ldr	r0, [r5, #52]	; 0x34
   11ef0:	bl	111d0 <free@plt>
   11ef4:	mov	r0, #0
   11ef8:	bl	1132c <exit@plt>
   11efc:	ldr	r5, [sp, #20]
   11f00:	mov	r7, #1
   11f04:	ldr	r0, [r9, r1, lsl #2]
   11f08:	mov	r1, #1
   11f0c:	bl	12934 <__assert_fail@plt+0x14d0>
   11f10:	ldr	r1, [r4]
   11f14:	add	r1, r1, #1
   11f18:	str	r1, [r4]
   11f1c:	cmp	r5, r1
   11f20:	and	r7, r7, r0
   11f24:	bgt	11f04 <__assert_fail@plt+0xaa0>
   11f28:	ldr	r4, [pc, #1432]	; 124c8 <__assert_fail@plt+0x1064>
   11f2c:	add	r4, pc, r4
   11f30:	ldr	r0, [r4, #8]
   11f34:	bl	111d0 <free@plt>
   11f38:	ldr	r0, [r4, #48]	; 0x30
   11f3c:	bl	111d0 <free@plt>
   11f40:	ldr	r0, [r4, #52]	; 0x34
   11f44:	bl	111d0 <free@plt>
   11f48:	ldrb	r3, [r4, #36]	; 0x24
   11f4c:	cmp	r3, #0
   11f50:	beq	11fb8 <__assert_fail@plt+0xb54>
   11f54:	cmp	r7, #0
   11f58:	bne	11ef4 <__assert_fail@plt+0xa90>
   11f5c:	ldr	r1, [pc, #1384]	; 124cc <__assert_fail@plt+0x1068>
   11f60:	mov	r2, #5
   11f64:	mov	r0, r7
   11f68:	add	r1, pc, r1
   11f6c:	bl	11218 <dcgettext@plt>
   11f70:	mov	r1, r7
   11f74:	mov	r2, r0
   11f78:	mov	r0, r7
   11f7c:	bl	112b4 <error@plt>
   11f80:	ldr	r3, [pc, #1352]	; 124d0 <__assert_fail@plt+0x106c>
   11f84:	add	r3, pc, r3
   11f88:	ldr	r3, [r3, #12]
   11f8c:	sub	r3, r3, #2
   11f90:	cmp	r3, #1
   11f94:	bls	11ef4 <__assert_fail@plt+0xa90>
   11f98:	mov	r0, #2
   11f9c:	b	11ef8 <__assert_fail@plt+0xa94>
   11fa0:	ldr	r1, [pc, #1324]	; 124d4 <__assert_fail@plt+0x1070>
   11fa4:	mov	r2, #1
   11fa8:	mov	r3, #0
   11fac:	add	r1, pc, r1
   11fb0:	strd	r2, [r1, #64]	; 0x40
   11fb4:	b	11544 <__assert_fail@plt+0xe0>
   11fb8:	cmp	r7, #0
   11fbc:	beq	11f80 <__assert_fail@plt+0xb1c>
   11fc0:	b	11ef4 <__assert_fail@plt+0xa90>
   11fc4:	ldr	ip, [pc, #1292]	; 124d8 <__assert_fail@plt+0x1074>
   11fc8:	mov	r3, #0
   11fcc:	str	r3, [sp, #36]	; 0x24
   11fd0:	add	r6, sp, #40	; 0x28
   11fd4:	add	ip, pc, ip
   11fd8:	str	r3, [sp, #40]	; 0x28
   11fdc:	ldrd	r2, [ip, #64]	; 0x40
   11fe0:	subs	r0, r2, #1
   11fe4:	sbc	r1, r3, #0
   11fe8:	orrs	lr, r2, r3
   11fec:	strd	r0, [ip, #64]	; 0x40
   11ff0:	ldr	r3, [pc, #1252]	; 124dc <__assert_fail@plt+0x1078>
   11ff4:	beq	12388 <__assert_fail@plt+0xf24>
   11ff8:	ldr	r8, [pc, #1248]	; 124e0 <__assert_fail@plt+0x107c>
   11ffc:	add	r5, sp, #36	; 0x24
   12000:	ldr	r4, [r7, r3]
   12004:	add	r8, pc, r8
   12008:	b	12038 <__assert_fail@plt+0xbd4>
   1200c:	ldr	r3, [pc, #1016]	; 1240c <__assert_fail@plt+0xfa8>
   12010:	ldr	r0, [sp, #36]	; 0x24
   12014:	ldr	r3, [r7, r3]
   12018:	ldr	r1, [r3]
   1201c:	bl	11170 <fputs_unlocked@plt>
   12020:	ldrd	r2, [r8, #64]	; 0x40
   12024:	subs	r0, r2, #1
   12028:	sbc	r1, r3, #0
   1202c:	orrs	ip, r2, r3
   12030:	strd	r0, [r8, #64]	; 0x40
   12034:	beq	12054 <__assert_fail@plt+0xbf0>
   12038:	mov	r0, r5
   1203c:	mov	r1, r6
   12040:	mov	r2, #10
   12044:	ldr	r3, [r4]
   12048:	bl	11188 <__getdelim@plt>
   1204c:	cmp	r0, #0
   12050:	bgt	1200c <__assert_fail@plt+0xba8>
   12054:	mov	r7, #1
   12058:	mov	r8, #0
   1205c:	b	1208c <__assert_fail@plt+0xc28>
   12060:	ldr	r2, [sp, #36]	; 0x24
   12064:	sub	r3, r0, #1
   12068:	ldrb	r1, [r2, r3]
   1206c:	subs	r0, r1, #10
   12070:	rsbs	r1, r0, #0
   12074:	adcs	r1, r1, r0
   12078:	cmp	r1, #0
   1207c:	strbne	r8, [r2, r3]
   12080:	ldr	r0, [sp, #36]	; 0x24
   12084:	bl	12934 <__assert_fail@plt+0x14d0>
   12088:	and	r7, r7, r0
   1208c:	mov	r0, r5
   12090:	mov	r1, r6
   12094:	mov	r2, #10
   12098:	ldr	r3, [r4]
   1209c:	bl	11188 <__getdelim@plt>
   120a0:	cmp	r0, #0
   120a4:	bgt	12060 <__assert_fail@plt+0xbfc>
   120a8:	ldr	r3, [r4]
   120ac:	ldr	r3, [r3]
   120b0:	tst	r3, #32
   120b4:	beq	11f28 <__assert_fail@plt+0xac4>
   120b8:	bl	1135c <__errno_location@plt>
   120bc:	ldr	r1, [pc, #1056]	; 124e4 <__assert_fail@plt+0x1080>
   120c0:	mov	r2, #5
   120c4:	add	r1, pc, r1
   120c8:	ldr	r4, [r0]
   120cc:	mov	r0, #0
   120d0:	bl	11218 <dcgettext@plt>
   120d4:	mov	r1, r4
   120d8:	mov	r2, r0
   120dc:	mov	r0, #0
   120e0:	bl	112b4 <error@plt>
   120e4:	b	11f28 <__assert_fail@plt+0xac4>
   120e8:	ldr	r6, [pc, #1016]	; 124e8 <__assert_fail@plt+0x1084>
   120ec:	add	r6, pc, r6
   120f0:	b	11d54 <__assert_fail@plt+0x8f0>
   120f4:	ldr	r1, [pc, #1008]	; 124ec <__assert_fail@plt+0x1088>
   120f8:	mov	r0, r4
   120fc:	mov	r2, #5
   12100:	add	r1, pc, r1
   12104:	bl	11218 <dcgettext@plt>
   12108:	mov	r1, r4
   1210c:	mov	r2, r0
   12110:	mov	r0, #1
   12114:	bl	112b4 <error@plt>
   12118:	b	11768 <__assert_fail@plt+0x304>
   1211c:	ldr	r2, [r3, #40]	; 0x28
   12120:	cmp	r2, #0
   12124:	bne	11ab0 <__assert_fail@plt+0x64c>
   12128:	ldr	r2, [r3, #56]	; 0x38
   1212c:	cmp	r2, #0
   12130:	bne	11ab0 <__assert_fail@plt+0x64c>
   12134:	ldr	r2, [r3, #20]
   12138:	cmp	r2, #0
   1213c:	bne	11ab0 <__assert_fail@plt+0x64c>
   12140:	ldr	r5, [r3, #72]	; 0x48
   12144:	cmp	r5, #0
   12148:	bne	11ac4 <__assert_fail@plt+0x660>
   1214c:	ldr	r1, [pc, #924]	; 124f0 <__assert_fail@plt+0x108c>
   12150:	mov	r0, r5
   12154:	mov	r2, #5
   12158:	add	r1, pc, r1
   1215c:	bl	11218 <dcgettext@plt>
   12160:	mov	r1, r5
   12164:	mov	r2, r0
   12168:	mov	r0, r5
   1216c:	bl	112b4 <error@plt>
   12170:	b	11ab0 <__assert_fail@plt+0x64c>
   12174:	mov	r0, #1
   12178:	movt	r0, #1
   1217c:	bl	11410 <nl_langinfo@plt>
   12180:	ldrb	r4, [r0]
   12184:	cmp	r4, #0
   12188:	bne	11e14 <__assert_fail@plt+0x9b0>
   1218c:	ldr	r1, [pc, #864]	; 124f4 <__assert_fail@plt+0x1090>
   12190:	mov	r0, r4
   12194:	mov	r2, #5
   12198:	add	r1, pc, r1
   1219c:	bl	11218 <dcgettext@plt>
   121a0:	mov	r1, r4
   121a4:	mov	r2, r0
   121a8:	mov	r0, r4
   121ac:	bl	112b4 <error@plt>
   121b0:	b	11e14 <__assert_fail@plt+0x9b0>
   121b4:	ldr	r1, [pc, #828]	; 124f8 <__assert_fail@plt+0x1094>
   121b8:	mov	r2, #5
   121bc:	mov	r0, #0
   121c0:	add	r1, pc, r1
   121c4:	bl	11218 <dcgettext@plt>
   121c8:	mov	r1, #0
   121cc:	mov	r2, r0
   121d0:	mov	r0, #1
   121d4:	bl	112b4 <error@plt>
   121d8:	b	11e00 <__assert_fail@plt+0x99c>
   121dc:	ldr	r8, [pc, #792]	; 124fc <__assert_fail@plt+0x1098>
   121e0:	add	r8, pc, r8
   121e4:	b	11d7c <__assert_fail@plt+0x918>
   121e8:	ldr	r1, [pc, #784]	; 12500 <__assert_fail@plt+0x109c>
   121ec:	mov	r2, #5
   121f0:	mov	r0, r4
   121f4:	add	r1, pc, r1
   121f8:	bl	11218 <dcgettext@plt>
   121fc:	mov	r1, r4
   12200:	mov	r2, r0
   12204:	mov	r0, #1
   12208:	bl	112b4 <error@plt>
   1220c:	ldr	r3, [r5, #72]	; 0x48
   12210:	cmp	r3, #0
   12214:	bne	11a58 <__assert_fail@plt+0x5f4>
   12218:	b	11a90 <__assert_fail@plt+0x62c>
   1221c:	ldr	r1, [pc, #736]	; 12504 <__assert_fail@plt+0x10a0>
   12220:	mov	r2, #5
   12224:	mov	r0, r6
   12228:	str	ip, [sp, #16]
   1222c:	add	r1, pc, r1
   12230:	bl	11218 <dcgettext@plt>
   12234:	mov	sl, r0
   12238:	mov	r0, r5
   1223c:	bl	16618 <close_stdout@@Base+0x1e3c>
   12240:	mov	r2, sl
   12244:	mov	r1, r6
   12248:	mov	r3, r0
   1224c:	mov	r0, #1
   12250:	bl	112b4 <error@plt>
   12254:	ldr	ip, [sp, #16]
   12258:	b	11c2c <__assert_fail@plt+0x7c8>
   1225c:	mov	r0, r8
   12260:	bl	11374 <__strdup@plt>
   12264:	ldr	r3, [pc, #668]	; 12508 <__assert_fail@plt+0x10a4>
   12268:	add	r3, pc, r3
   1226c:	cmp	r0, #0
   12270:	mov	r4, r0
   12274:	str	r0, [r3, #52]	; 0x34
   12278:	bne	11d28 <__assert_fail@plt+0x8c4>
   1227c:	ldr	r1, [pc, #648]	; 1250c <__assert_fail@plt+0x10a8>
   12280:	mov	r2, #5
   12284:	add	r1, pc, r1
   12288:	bl	11218 <dcgettext@plt>
   1228c:	mov	r6, r0
   12290:	mov	r0, r8
   12294:	bl	11338 <strlen@plt>
   12298:	mov	r2, r6
   1229c:	mov	r1, r4
   122a0:	mov	r3, r0
   122a4:	mov	r0, #1
   122a8:	bl	112b4 <error@plt>
   122ac:	b	11d28 <__assert_fail@plt+0x8c4>
   122b0:	mov	r0, r5
   122b4:	mov	r1, ip
   122b8:	str	ip, [sp, #16]
   122bc:	bl	16e30 <close_stdout@@Base+0x2654>
   122c0:	ldr	r3, [pc, #584]	; 12510 <__assert_fail@plt+0x10ac>
   122c4:	add	r3, pc, r3
   122c8:	cmp	r0, #0
   122cc:	mov	r4, r0
   122d0:	str	r0, [r3, #48]	; 0x30
   122d4:	bne	11d1c <__assert_fail@plt+0x8b8>
   122d8:	ldr	r1, [pc, #564]	; 12514 <__assert_fail@plt+0x10b0>
   122dc:	mov	r2, #5
   122e0:	add	r1, pc, r1
   122e4:	bl	11218 <dcgettext@plt>
   122e8:	ldr	ip, [sp, #16]
   122ec:	mov	r1, r4
   122f0:	add	r3, ip, #1
   122f4:	mov	r2, r0
   122f8:	mov	r0, #1
   122fc:	bl	112b4 <error@plt>
   12300:	b	11d1c <__assert_fail@plt+0x8b8>
   12304:	ldr	r2, [pc, #524]	; 12518 <__assert_fail@plt+0x10b4>
   12308:	mov	r1, #1
   1230c:	add	r3, r3, #1
   12310:	add	r2, pc, r2
   12314:	str	r1, [r2, #56]	; 0x38
   12318:	b	11b90 <__assert_fail@plt+0x72c>
   1231c:	ldr	r1, [pc, #504]	; 1251c <__assert_fail@plt+0x10b8>
   12320:	add	r1, pc, r1
   12324:	b	11d90 <__assert_fail@plt+0x92c>
   12328:	ldr	r1, [pc, #496]	; 12520 <__assert_fail@plt+0x10bc>
   1232c:	mov	r2, #5
   12330:	mov	r0, sl
   12334:	add	r1, pc, r1
   12338:	bl	11218 <dcgettext@plt>
   1233c:	mov	r4, r0
   12340:	mov	r0, r5
   12344:	bl	16618 <close_stdout@@Base+0x1e3c>
   12348:	mov	r2, r4
   1234c:	mov	r1, sl
   12350:	mov	r3, r0
   12354:	mov	r0, #1
   12358:	bl	112b4 <error@plt>
   1235c:	ldr	ip, [sp, #16]
   12360:	b	11bf4 <__assert_fail@plt+0x790>
   12364:	ldr	r1, [pc, #440]	; 12524 <__assert_fail@plt+0x10c0>
   12368:	rsb	r8, r8, #0
   1236c:	ldr	r3, [pc, #436]	; 12528 <__assert_fail@plt+0x10c4>
   12370:	mov	r2, #0
   12374:	add	r1, pc, r1
   12378:	add	r3, pc, r3
   1237c:	str	r8, [r1, #20]
   12380:	str	r2, [r3, #36]	; 0x24
   12384:	b	11c18 <__assert_fail@plt+0x7b4>
   12388:	add	r5, sp, #36	; 0x24
   1238c:	ldr	r4, [r7, r3]
   12390:	b	12054 <__assert_fail@plt+0xbf0>
   12394:	andeq	ip, r1, r4, ror fp
   12398:	andeq	r0, r0, r8, lsl r1
   1239c:	andeq	fp, r0, r8, lsl #4
   123a0:			; <UNDEFINED> instruction: 0x0000b2b4
   123a4:	andeq	fp, r0, r0, asr #5
   123a8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   123ac:	ldrdeq	ip, [r1], -r8
   123b0:	ldrdeq	ip, [r1], -r0
   123b4:			; <UNDEFINED> instruction: 0x0001ccb4
   123b8:	muleq	r0, r0, ip
   123bc:	andeq	r0, r0, ip, lsr #2
   123c0:	andeq	ip, r1, r0, lsl r8
   123c4:	andeq	fp, r0, r8, lsr r2
   123c8:	andeq	r0, r0, r8, lsr #2
   123cc:	andeq	r0, r0, r4, asr r1
   123d0:	andeq	r9, r0, ip, ror #23
   123d4:	andeq	fp, r0, r4, asr #3
   123d8:	andeq	ip, r1, r0, ror #22
   123dc:	andeq	ip, r1, r4, asr #23
   123e0:	andeq	fp, r0, ip, ror r1
   123e4:			; <UNDEFINED> instruction: 0x0000b1b8
   123e8:	andeq	ip, r1, r4, asr #22
   123ec:	strdeq	ip, [r1], -r4
   123f0:	andeq	ip, r1, r0, asr sl
   123f4:	andeq	fp, r0, r8, asr r0
   123f8:	muleq	r0, r4, r0
   123fc:	andeq	ip, r1, r4, ror #19
   12400:	andeq	ip, r1, r4, asr #19
   12404:	andeq	ip, r1, ip, lsr #20
   12408:	andeq	ip, r1, r4, lsl sl
   1240c:	andeq	r0, r0, ip, lsr r1
   12410:	andeq	r0, r0, r0, lsr #2
   12414:	andeq	fp, r0, r0, asr r0
   12418:	andeq	fp, r0, r8, lsr r0
   1241c:	muleq	r0, r4, lr
   12420:	andeq	ip, r1, r8, lsr #18
   12424:	andeq	r9, r0, r4, ror #18
   12428:	andeq	sl, r0, r4, lsr pc
   1242c:	andeq	ip, r1, r8, asr r9
   12430:	andeq	r9, r0, ip, lsl #18
   12434:	ldrdeq	sl, [r0], -r4
   12438:	andeq	ip, r1, r0, lsl #18
   1243c:	andeq	ip, r1, r0, ror #17
   12440:	andeq	sl, r0, r4, asr #28
   12444:	andeq	sl, r0, r4, ror #28
   12448:	andeq	ip, r1, ip, asr r8
   1244c:			; <UNDEFINED> instruction: 0x0001c7bc
   12450:	muleq	r0, r8, sp
   12454:	andeq	sl, r0, r0, lsr #28
   12458:	andeq	ip, r1, ip, lsr #15
   1245c:	muleq	r1, ip, r7
   12460:	andeq	ip, r1, ip, ror r7
   12464:	andeq	sl, r0, r4, lsl #28
   12468:	andeq	ip, r1, r4, asr #14
   1246c:	andeq	ip, r1, r4, lsr #14
   12470:	strdeq	sl, [r0], -r4
   12474:	andeq	ip, r1, r8, asr #11
   12478:	ldrdeq	sl, [r0], -ip
   1247c:	andeq	sl, r0, r0, asr #25
   12480:	andeq	ip, r1, r0, lsr #9
   12484:	andeq	sl, r0, ip, lsl sl
   12488:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1248c:	andeq	ip, r1, r8, ror r4
   12490:	strdeq	sl, [r0], -r8
   12494:	andeq	ip, r1, r8, asr r4
   12498:	andeq	ip, r1, r8, lsr r4
   1249c:	andeq	sl, r0, r0, asr #19
   124a0:	andeq	sl, r0, r8, lsr #23
   124a4:	strdeq	ip, [r1], -r4
   124a8:	ldrdeq	ip, [r1], -r4
   124ac:	andeq	ip, r1, r0, asr #7
   124b0:	andeq	ip, r1, r0, lsr #6
   124b4:	andeq	ip, r1, r8, lsl #7
   124b8:	strdeq	ip, [r1], -r0
   124bc:	andeq	r0, r0, ip, lsl r1
   124c0:	andeq	ip, r1, ip, asr #6
   124c4:	andeq	sl, r0, r8, lsl #23
   124c8:	andeq	ip, r1, ip, lsr #5
   124cc:	andeq	sl, r0, r4, lsl fp
   124d0:	andeq	ip, r1, r4, asr r2
   124d4:	andeq	ip, r1, ip, lsr #4
   124d8:	andeq	ip, r1, r4, lsl #4
   124dc:	andeq	r0, r0, r8, lsr r1
   124e0:	ldrdeq	ip, [r1], -r4
   124e4:	andeq	sl, r0, r4, lsr #19
   124e8:	andeq	sl, r0, ip, ror r6
   124ec:	andeq	sl, r0, r8, ror #13
   124f0:	andeq	sl, r0, r0, asr r7
   124f4:	andeq	sl, r0, ip, ror r8
   124f8:	andeq	sl, r0, ip, lsr #16
   124fc:	muleq	r0, r8, r5
   12500:	andeq	sl, r0, ip, asr r6
   12504:	andeq	sl, r0, r0, ror #13
   12508:	andeq	fp, r1, r0, ror pc
   1250c:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   12510:	andeq	fp, r1, r4, lsl pc
   12514:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   12518:	andeq	fp, r1, r8, asr #29
   1251c:	andeq	sl, r0, r4, asr #8
   12520:			; <UNDEFINED> instruction: 0x0000a5b4
   12524:	andeq	fp, r1, r4, ror #28
   12528:	andeq	fp, r1, r0, ror #27
   1252c:	mov	fp, #0
   12530:	mov	lr, #0
   12534:	pop	{r1}		; (ldr r1, [sp], #4)
   12538:	mov	r2, sp
   1253c:	push	{r2}		; (str r2, [sp, #-4]!)
   12540:	push	{r0}		; (str r0, [sp, #-4]!)
   12544:	ldr	ip, [pc, #16]	; 1255c <__assert_fail@plt+0x10f8>
   12548:	push	{ip}		; (str ip, [sp, #-4]!)
   1254c:	ldr	r0, [pc, #12]	; 12560 <__assert_fail@plt+0x10fc>
   12550:	ldr	r3, [pc, #12]	; 12564 <__assert_fail@plt+0x1100>
   12554:	bl	112e4 <__libc_start_main@plt>
   12558:	bl	11440 <abort@plt>
   1255c:	andeq	fp, r1, r0, lsl #3
   12560:	andeq	r1, r1, r0, ror r4
   12564:	andeq	fp, r1, ip, lsl r1
   12568:	ldr	r3, [pc, #20]	; 12584 <__assert_fail@plt+0x1120>
   1256c:	ldr	r2, [pc, #20]	; 12588 <__assert_fail@plt+0x1124>
   12570:	add	r3, pc, r3
   12574:	ldr	r2, [r3, r2]
   12578:	cmp	r2, #0
   1257c:	bxeq	lr
   12580:	b	112fc <__gmon_start__@plt>
   12584:	andeq	fp, r1, r8, lsl #21
   12588:	andeq	r0, r0, r0, lsr r1
   1258c:	push	{r3, lr}
   12590:	movw	r0, #57812	; 0xe1d4
   12594:	ldr	r3, [pc, #36]	; 125c0 <__assert_fail@plt+0x115c>
   12598:	movt	r0, #2
   1259c:	rsb	r3, r0, r3
   125a0:	cmp	r3, #6
   125a4:	popls	{r3, pc}
   125a8:	movw	r3, #0
   125ac:	movt	r3, #0
   125b0:	cmp	r3, #0
   125b4:	popeq	{r3, pc}
   125b8:	blx	r3
   125bc:	pop	{r3, pc}
   125c0:	ldrdeq	lr, [r2], -r7
   125c4:	push	{r3, lr}
   125c8:	movw	r0, #57812	; 0xe1d4
   125cc:	movw	r3, #57812	; 0xe1d4
   125d0:	movt	r0, #2
   125d4:	movt	r3, #2
   125d8:	rsb	r3, r0, r3
   125dc:	asr	r3, r3, #2
   125e0:	add	r3, r3, r3, lsr #31
   125e4:	asrs	r1, r3, #1
   125e8:	popeq	{r3, pc}
   125ec:	movw	r2, #0
   125f0:	movt	r2, #0
   125f4:	cmp	r2, #0
   125f8:	popeq	{r3, pc}
   125fc:	blx	r2
   12600:	pop	{r3, pc}
   12604:	push	{r4, lr}
   12608:	movw	r4, #57816	; 0xe1d8
   1260c:	movt	r4, #2
   12610:	ldrb	r3, [r4]
   12614:	cmp	r3, #0
   12618:	popne	{r4, pc}
   1261c:	bl	1258c <__assert_fail@plt+0x1128>
   12620:	mov	r3, #1
   12624:	strb	r3, [r4]
   12628:	pop	{r4, pc}
   1262c:	movw	r0, #56680	; 0xdd68
   12630:	movt	r0, #2
   12634:	push	{r3, lr}
   12638:	ldr	r3, [r0]
   1263c:	cmp	r3, #0
   12640:	beq	12658 <__assert_fail@plt+0x11f4>
   12644:	movw	r3, #0
   12648:	movt	r3, #0
   1264c:	cmp	r3, #0
   12650:	beq	12658 <__assert_fail@plt+0x11f4>
   12654:	blx	r3
   12658:	pop	{r3, lr}
   1265c:	b	125c4 <__assert_fail@plt+0x1160>
   12660:	ldr	ip, [pc, #200]	; 12730 <__assert_fail@plt+0x12cc>
   12664:	mov	r2, #10
   12668:	push	{r4, r5, r6, lr}
   1266c:	add	ip, pc, ip
   12670:	ldr	r4, [pc, #188]	; 12734 <__assert_fail@plt+0x12d0>
   12674:	sub	sp, sp, #32
   12678:	add	r1, sp, #32
   1267c:	ldr	lr, [pc, #180]	; 12738 <__assert_fail@plt+0x12d4>
   12680:	mov	r6, #0
   12684:	add	r3, sp, #16
   12688:	ldr	r4, [ip, r4]
   1268c:	add	lr, pc, lr
   12690:	str	r6, [r1, #-20]!	; 0xffffffec
   12694:	mov	r5, r0
   12698:	str	lr, [sp]
   1269c:	ldr	ip, [r4]
   126a0:	str	ip, [sp, #28]
   126a4:	bl	17490 <close_stdout@@Base+0x2cb4>
   126a8:	cmp	r0, r6
   126ac:	bne	126c0 <__assert_fail@plt+0x125c>
   126b0:	ldr	r3, [sp, #12]
   126b4:	ldrb	r3, [r3]
   126b8:	cmp	r3, r6
   126bc:	beq	12714 <__assert_fail@plt+0x12b0>
   126c0:	ldr	r1, [pc, #116]	; 1273c <__assert_fail@plt+0x12d8>
   126c4:	mov	r2, #5
   126c8:	mov	r0, #0
   126cc:	add	r1, pc, r1
   126d0:	bl	11218 <dcgettext@plt>
   126d4:	mov	r6, r0
   126d8:	mov	r0, r5
   126dc:	bl	16618 <close_stdout@@Base+0x1e3c>
   126e0:	mov	r1, #0
   126e4:	mov	r2, r6
   126e8:	mov	r3, r0
   126ec:	mov	r0, #1
   126f0:	bl	112b4 <error@plt>
   126f4:	ldr	r0, [sp, #16]
   126f8:	ldr	r1, [sp, #20]
   126fc:	ldr	r2, [sp, #28]
   12700:	ldr	r3, [r4]
   12704:	cmp	r2, r3
   12708:	bne	1272c <__assert_fail@plt+0x12c8>
   1270c:	add	sp, sp, #32
   12710:	pop	{r4, r5, r6, pc}
   12714:	ldrd	r2, [sp, #16]
   12718:	orrs	r1, r2, r3
   1271c:	movne	r0, r2
   12720:	movne	r1, r3
   12724:	beq	126c0 <__assert_fail@plt+0x125c>
   12728:	b	126fc <__assert_fail@plt+0x1298>
   1272c:	bl	11224 <__stack_chk_fail@plt>
   12730:	andeq	fp, r1, ip, lsl #19
   12734:	andeq	r0, r0, r8, lsl r1
   12738:	andeq	r8, r0, ip, asr #23
   1273c:	muleq	r0, r8, fp
   12740:	push	{r0, r1, r2, r3}
   12744:	ldr	r3, [pc, #108]	; 127b8 <__assert_fail@plt+0x1354>
   12748:	ldr	r0, [pc, #108]	; 127bc <__assert_fail@plt+0x1358>
   1274c:	add	r3, pc, r3
   12750:	ldr	r2, [pc, #104]	; 127c0 <__assert_fail@plt+0x135c>
   12754:	push	{r4, lr}
   12758:	add	r2, pc, r2
   1275c:	ldr	r4, [r3, r0]
   12760:	sub	sp, sp, #8
   12764:	ldrb	r0, [r2]
   12768:	ldr	r1, [sp, #16]
   1276c:	ldr	r2, [r4]
   12770:	cmp	r0, #0
   12774:	str	r2, [sp, #4]
   12778:	beq	12794 <__assert_fail@plt+0x1330>
   1277c:	ldr	r0, [pc, #64]	; 127c4 <__assert_fail@plt+0x1360>
   12780:	add	r2, sp, #20
   12784:	str	r2, [sp]
   12788:	ldr	r3, [r3, r0]
   1278c:	ldr	r0, [r3]
   12790:	bl	17be8 <close_stdout@@Base+0x340c>
   12794:	ldr	r2, [sp, #4]
   12798:	ldr	r3, [r4]
   1279c:	cmp	r2, r3
   127a0:	bne	127b4 <__assert_fail@plt+0x1350>
   127a4:	add	sp, sp, #8
   127a8:	pop	{r4, lr}
   127ac:	add	sp, sp, #16
   127b0:	bx	lr
   127b4:	bl	11224 <__stack_chk_fail@plt>
   127b8:	andeq	fp, r1, ip, lsr #17
   127bc:	andeq	r0, r0, r8, lsl r1
   127c0:	andeq	fp, r1, r0, lsl #21
   127c4:	andeq	r0, r0, r4, lsr #2
   127c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127cc:	mov	r9, r1
   127d0:	ldrb	r1, [r0]
   127d4:	mov	sl, r3
   127d8:	mov	r4, r0
   127dc:	mov	r8, r2
   127e0:	cmp	r1, #45	; 0x2d
   127e4:	movne	r3, #0
   127e8:	strbne	r3, [sl]
   127ec:	strne	r0, [r9]
   127f0:	beq	1287c <__assert_fail@plt+0x1418>
   127f4:	bl	11320 <__ctype_b_loc@plt>
   127f8:	mov	ip, #0
   127fc:	mov	r7, ip
   12800:	vldr	d7, [pc, #184]	; 128c0 <__assert_fail@plt+0x145c>
   12804:	vmov.f64	d5, #36	; 0x41200000  10.0
   12808:	b	1282c <__assert_fail@plt+0x13c8>
   1280c:	vmov	s8, r6
   12810:	cmp	r4, #0
   12814:	str	r4, [r9]
   12818:	vcvt.f64.s32	d6, s8
   1281c:	vmov.f64	d4, d6
   12820:	vmla.f64	d4, d7, d5
   12824:	vmov.f64	d7, d4
   12828:	beq	12898 <__assert_fail@plt+0x1434>
   1282c:	ldrb	r5, [r4], #1
   12830:	ldr	r2, [r0]
   12834:	sub	r6, r5, #48	; 0x30
   12838:	lsl	r5, r5, #1
   1283c:	ldrh	r5, [r2, r5]
   12840:	tst	r5, #2048	; 0x800
   12844:	beq	1286c <__assert_fail@plt+0x1408>
   12848:	cmp	r6, #9
   1284c:	bhi	12874 <__assert_fail@plt+0x1410>
   12850:	cmp	ip, #18
   12854:	add	ip, ip, #1
   12858:	movhi	r7, #1
   1285c:	cmp	ip, #28
   12860:	bne	1280c <__assert_fail@plt+0x13a8>
   12864:	mov	r0, #2
   12868:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1286c:	cmp	ip, #0
   12870:	bne	12898 <__assert_fail@plt+0x1434>
   12874:	mov	r0, #3
   12878:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1287c:	add	r4, r0, #1
   12880:	mov	r3, #1
   12884:	cmp	r4, #0
   12888:	strb	r3, [sl]
   1288c:	str	r4, [r9]
   12890:	bne	127f4 <__assert_fail@plt+0x1390>
   12894:	b	12874 <__assert_fail@plt+0x1410>
   12898:	ldrb	r3, [sl]
   1289c:	cmp	r3, #0
   128a0:	vnegne.f64	d7, d7
   128a4:	cmp	r8, #0
   128a8:	beq	128b8 <__assert_fail@plt+0x1454>
   128ac:	vstr	d7, [r8]
   128b0:	mov	r0, r7
   128b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128b8:	mov	r0, r7
   128bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
	...
   128c8:	push	{r4, r5, r6, lr}
   128cc:	ldr	r4, [pc, #88]	; 1292c <__assert_fail@plt+0x14c8>
   128d0:	add	r4, pc, r4
   128d4:	ldr	r3, [r4, #4]
   128d8:	cmp	r3, r0
   128dc:	pophi	{r4, r5, r6, pc}
   128e0:	add	r5, r0, #1
   128e4:	ldr	r0, [r4, #8]
   128e8:	str	r5, [r4, #4]
   128ec:	mov	r1, r5
   128f0:	bl	11230 <realloc@plt>
   128f4:	cmp	r0, #0
   128f8:	mov	r6, r0
   128fc:	str	r0, [r4, #8]
   12900:	popne	{r4, r5, r6, pc}
   12904:	ldr	r1, [pc, #36]	; 12930 <__assert_fail@plt+0x14cc>
   12908:	mov	r2, #5
   1290c:	add	r1, pc, r1
   12910:	bl	11218 <dcgettext@plt>
   12914:	mov	r1, r6
   12918:	mov	r3, r5
   1291c:	pop	{r4, r5, r6, lr}
   12920:	mov	r2, r0
   12924:	mov	r0, #1
   12928:	b	112b4 <error@plt>
   1292c:	andeq	fp, r1, r8, lsl #18
   12930:	andeq	r8, r0, r0, ror r9
   12934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12938:	vpush	{d8-d11}
   1293c:	sub	sp, sp, #220	; 0xdc
   12940:	ldr	r7, [pc, #1856]	; 13088 <__assert_fail@plt+0x1c24>
   12944:	mov	r8, r0
   12948:	ldr	r3, [pc, #1852]	; 1308c <__assert_fail@plt+0x1c28>
   1294c:	add	r7, pc, r7
   12950:	str	r1, [sp, #36]	; 0x24
   12954:	ldr	r4, [pc, #1844]	; 13090 <__assert_fail@plt+0x1c2c>
   12958:	ldr	r3, [r7, r3]
   1295c:	add	r4, pc, r4
   12960:	str	r3, [sp, #32]
   12964:	ldr	r3, [r3]
   12968:	ldr	r5, [r4]
   1296c:	str	r3, [sp, #212]	; 0xd4
   12970:	bl	16618 <close_stdout@@Base+0x1e3c>
   12974:	mov	r2, r5
   12978:	mov	r1, r0
   1297c:	ldr	r0, [pc, #1808]	; 13094 <__assert_fail@plt+0x1c30>
   12980:	add	r0, pc, r0
   12984:	bl	12740 <__assert_fail@plt+0x12dc>
   12988:	ldr	r2, [r4]
   1298c:	cmp	r2, #1
   12990:	ble	12db0 <__assert_fail@plt+0x194c>
   12994:	ldr	r5, [r4, #4]
   12998:	sub	r9, r2, #1
   1299c:	cmp	r5, #256	; 0x100
   129a0:	beq	12e88 <__assert_fail@plt+0x1a24>
   129a4:	ldrb	r3, [r8]
   129a8:	mov	r6, r8
   129ac:	cmp	r5, r3
   129b0:	subeq	r9, r2, #2
   129b4:	cmp	r3, #0
   129b8:	beq	129f8 <__assert_fail@plt+0x1594>
   129bc:	cmp	r9, #0
   129c0:	beq	12a8c <__assert_fail@plt+0x1628>
   129c4:	cmp	r5, r3
   129c8:	bne	12a64 <__assert_fail@plt+0x1600>
   129cc:	add	r2, r6, #1
   129d0:	b	129dc <__assert_fail@plt+0x1578>
   129d4:	cmp	r5, r3
   129d8:	bne	12a64 <__assert_fail@plt+0x1600>
   129dc:	mov	r6, r2
   129e0:	ldrb	r3, [r2], #1
   129e4:	cmp	r3, #0
   129e8:	bne	129d4 <__assert_fail@plt+0x1570>
   129ec:	sub	r9, r9, #1
   129f0:	cmp	r3, #0
   129f4:	bne	129bc <__assert_fail@plt+0x1558>
   129f8:	mov	r0, r8
   129fc:	mov	r9, #0
   12a00:	bl	16618 <close_stdout@@Base+0x1e3c>
   12a04:	mov	r1, r0
   12a08:	ldr	r0, [pc, #1672]	; 13098 <__assert_fail@plt+0x1c34>
   12a0c:	add	r0, pc, r0
   12a10:	bl	12740 <__assert_fail@plt+0x12dc>
   12a14:	ldr	r3, [pc, #1664]	; 1309c <__assert_fail@plt+0x1c38>
   12a18:	add	r3, pc, r3
   12a1c:	ldr	r3, [r3, #12]
   12a20:	cmp	r3, #3
   12a24:	beq	12a5c <__assert_fail@plt+0x15f8>
   12a28:	ldr	r4, [pc, #1648]	; 130a0 <__assert_fail@plt+0x1c3c>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #1644]	; 130a4 <__assert_fail@plt+0x1c40>
   12a34:	mov	r0, #0
   12a38:	add	r4, pc, r4
   12a3c:	add	r1, pc, r1
   12a40:	ldr	r5, [r4, #8]
   12a44:	bl	11218 <dcgettext@plt>
   12a48:	ldr	r3, [r4]
   12a4c:	mov	r1, #0
   12a50:	mov	r2, r0
   12a54:	mov	r0, r5
   12a58:	bl	112b4 <error@plt>
   12a5c:	mov	r6, #0
   12a60:	b	12fe4 <__assert_fail@plt+0x1b80>
   12a64:	add	r2, r6, #1
   12a68:	b	12a74 <__assert_fail@plt+0x1610>
   12a6c:	cmp	r5, r3
   12a70:	beq	129ec <__assert_fail@plt+0x1588>
   12a74:	mov	r6, r2
   12a78:	ldrb	r3, [r2], #1
   12a7c:	cmp	r3, #0
   12a80:	bne	12a6c <__assert_fail@plt+0x1608>
   12a84:	sub	r9, r9, #1
   12a88:	b	129f0 <__assert_fail@plt+0x158c>
   12a8c:	mov	r1, r5
   12a90:	mov	r3, #0
   12a94:	strb	r3, [r6], #1
   12a98:	cmp	r1, #256	; 0x100
   12a9c:	beq	12b24 <__assert_fail@plt+0x16c0>
   12aa0:	ldrb	r3, [r6]
   12aa4:	mov	r9, r6
   12aa8:	subs	r2, r3, r1
   12aac:	movne	r2, #1
   12ab0:	cmp	r3, #0
   12ab4:	beq	12af4 <__assert_fail@plt+0x1690>
   12ab8:	cmp	r2, #0
   12abc:	beq	12ba0 <__assert_fail@plt+0x173c>
   12ac0:	cmp	r3, r1
   12ac4:	bne	12afc <__assert_fail@plt+0x1698>
   12ac8:	add	r2, r9, #1
   12acc:	b	12ad8 <__assert_fail@plt+0x1674>
   12ad0:	cmp	r3, r1
   12ad4:	bne	12afc <__assert_fail@plt+0x1698>
   12ad8:	mov	r9, r2
   12adc:	ldrb	r3, [r2], #1
   12ae0:	cmp	r3, #0
   12ae4:	bne	12ad0 <__assert_fail@plt+0x166c>
   12ae8:	mov	r2, #0
   12aec:	cmp	r3, #0
   12af0:	bne	12ab8 <__assert_fail@plt+0x1654>
   12af4:	mov	r9, r3
   12af8:	b	12ba8 <__assert_fail@plt+0x1744>
   12afc:	add	r2, r9, #1
   12b00:	b	12b0c <__assert_fail@plt+0x16a8>
   12b04:	cmp	r3, r1
   12b08:	beq	12ae8 <__assert_fail@plt+0x1684>
   12b0c:	mov	r9, r2
   12b10:	ldrb	r3, [r2], #1
   12b14:	cmp	r3, #0
   12b18:	bne	12b04 <__assert_fail@plt+0x16a0>
   12b1c:	mov	r2, #0
   12b20:	b	12aec <__assert_fail@plt+0x1688>
   12b24:	ldrb	r4, [r6]
   12b28:	cmp	r4, #0
   12b2c:	beq	131b0 <__assert_fail@plt+0x1d4c>
   12b30:	bl	11320 <__ctype_b_loc@plt>
   12b34:	mov	r3, r6
   12b38:	ldr	r2, [r0]
   12b3c:	b	12b50 <__assert_fail@plt+0x16ec>
   12b40:	ldrb	r4, [r3, #1]
   12b44:	add	r3, r3, #1
   12b48:	cmp	r4, #0
   12b4c:	beq	131b0 <__assert_fail@plt+0x1d4c>
   12b50:	lsl	r4, r4, #1
   12b54:	ldrh	r1, [r2, r4]
   12b58:	tst	r1, #1
   12b5c:	bne	12b40 <__assert_fail@plt+0x16dc>
   12b60:	ldrb	r4, [r3]
   12b64:	cmp	r4, #0
   12b68:	bne	12b80 <__assert_fail@plt+0x171c>
   12b6c:	b	131b0 <__assert_fail@plt+0x1d4c>
   12b70:	ldrb	r4, [r3, #1]
   12b74:	add	r3, r3, #1
   12b78:	cmp	r4, #0
   12b7c:	beq	131b0 <__assert_fail@plt+0x1d4c>
   12b80:	lsl	r4, r4, #1
   12b84:	ldrh	r1, [r2, r4]
   12b88:	tst	r1, #1
   12b8c:	beq	12b70 <__assert_fail@plt+0x170c>
   12b90:	ldrb	r4, [r3]
   12b94:	mov	r9, r3
   12b98:	cmp	r4, #0
   12b9c:	beq	131b0 <__assert_fail@plt+0x1d4c>
   12ba0:	mov	r3, #0
   12ba4:	strb	r3, [r9], #1
   12ba8:	cmp	r8, #0
   12bac:	ldr	r1, [pc, #1268]	; 130a8 <__assert_fail@plt+0x1c44>
   12bb0:	mov	r0, #0
   12bb4:	add	r1, pc, r1
   12bb8:	movne	r1, r8
   12bbc:	bl	16610 <close_stdout@@Base+0x1e34>
   12bc0:	mov	r1, r6
   12bc4:	mov	r4, r0
   12bc8:	mov	r0, #1
   12bcc:	bl	16610 <close_stdout@@Base+0x1e34>
   12bd0:	cmp	r9, #0
   12bd4:	ldr	r1, [pc, #1232]	; 130ac <__assert_fail@plt+0x1c48>
   12bd8:	add	r1, pc, r1
   12bdc:	movne	r1, r9
   12be0:	mov	r5, r0
   12be4:	mov	r0, #2
   12be8:	bl	16610 <close_stdout@@Base+0x1e34>
   12bec:	mov	r1, r4
   12bf0:	mov	r2, r5
   12bf4:	mov	r3, r0
   12bf8:	ldr	r0, [pc, #1200]	; 130b0 <__assert_fail@plt+0x1c4c>
   12bfc:	add	r0, pc, r0
   12c00:	bl	12740 <__assert_fail@plt+0x12dc>
   12c04:	cmp	r6, #0
   12c08:	beq	12a14 <__assert_fail@plt+0x15b0>
   12c0c:	ldr	r3, [pc, #1184]	; 130b4 <__assert_fail@plt+0x1c50>
   12c10:	add	r3, pc, r3
   12c14:	ldr	r4, [r3, #44]	; 0x2c
   12c18:	cmp	r4, #0
   12c1c:	beq	12c70 <__assert_fail@plt+0x180c>
   12c20:	mov	r0, r6
   12c24:	bl	11338 <strlen@plt>
   12c28:	mov	r5, r0
   12c2c:	mov	r0, r4
   12c30:	bl	11338 <strlen@plt>
   12c34:	cmp	r5, r0
   12c38:	bls	12c70 <__assert_fail@plt+0x180c>
   12c3c:	rsb	r5, r0, r5
   12c40:	mov	r0, r4
   12c44:	add	r1, r6, r5
   12c48:	bl	111a0 <strcmp@plt>
   12c4c:	cmp	r0, #0
   12c50:	bne	12f24 <__assert_fail@plt+0x1ac0>
   12c54:	strb	r0, [r6, r5]
   12c58:	mov	r0, r4
   12c5c:	bl	16618 <close_stdout@@Base+0x1e3c>
   12c60:	mov	r1, r0
   12c64:	ldr	r0, [pc, #1100]	; 130b8 <__assert_fail@plt+0x1c54>
   12c68:	add	r0, pc, r0
   12c6c:	bl	12740 <__assert_fail@plt+0x12dc>
   12c70:	ldrb	r5, [r6]
   12c74:	cmp	r5, #0
   12c78:	beq	1382c <__assert_fail@plt+0x23c8>
   12c7c:	bl	11320 <__ctype_b_loc@plt>
   12c80:	mov	r3, r6
   12c84:	ldr	r1, [r0]
   12c88:	b	12c9c <__assert_fail@plt+0x1838>
   12c8c:	ldrb	r5, [r3, #1]
   12c90:	add	r3, r3, #1
   12c94:	cmp	r5, #0
   12c98:	beq	12da8 <__assert_fail@plt+0x1944>
   12c9c:	lsl	r5, r5, #1
   12ca0:	mov	r4, r3
   12ca4:	ldrh	r2, [r1, r5]
   12ca8:	tst	r2, #1
   12cac:	bne	12c8c <__assert_fail@plt+0x1828>
   12cb0:	ldr	r3, [pc, #1028]	; 130bc <__assert_fail@plt+0x1c58>
   12cb4:	add	r3, pc, r3
   12cb8:	ldr	r2, [r3, #16]
   12cbc:	cmp	r2, #0
   12cc0:	beq	12cf4 <__assert_fail@plt+0x1890>
   12cc4:	cmp	r6, r4
   12cc8:	beq	12f04 <__assert_fail@plt+0x1aa0>
   12ccc:	mov	r0, r6
   12cd0:	ldr	r5, [pc, #1000]	; 130c0 <__assert_fail@plt+0x1c5c>
   12cd4:	bl	11338 <strlen@plt>
   12cd8:	add	r5, pc, r5
   12cdc:	str	r0, [r5, #20]
   12ce0:	bl	128c8 <__assert_fail@plt+0x1464>
   12ce4:	ldr	r1, [r5, #20]
   12ce8:	ldr	r0, [pc, #980]	; 130c4 <__assert_fail@plt+0x1c60>
   12cec:	add	r0, pc, r0
   12cf0:	bl	12740 <__assert_fail@plt+0x12dc>
   12cf4:	ldr	r5, [pc, #972]	; 130c8 <__assert_fail@plt+0x1c64>
   12cf8:	add	sl, sp, #216	; 0xd8
   12cfc:	mov	fp, #0
   12d00:	mov	r1, r4
   12d04:	add	r5, pc, r5
   12d08:	mov	r0, fp
   12d0c:	str	fp, [sl, #-160]!	; 0xffffff60
   12d10:	vldr	d8, [pc, #872]	; 13080 <__assert_fail@plt+0x1c1c>
   12d14:	ldr	r2, [r5, #24]
   12d18:	vstr	d8, [sp, #64]	; 0x40
   12d1c:	sub	r3, r2, #3
   12d20:	cmp	r3, #1
   12d24:	str	r2, [sp, #40]	; 0x28
   12d28:	movhi	r3, #1000	; 0x3e8
   12d2c:	movls	r3, #1024	; 0x400
   12d30:	str	r3, [sp, #44]	; 0x2c
   12d34:	bl	16610 <close_stdout@@Base+0x1e34>
   12d38:	ldr	r1, [r5, #28]
   12d3c:	mov	r3, r0
   12d40:	mov	r0, #1
   12d44:	str	r3, [sp, #24]
   12d48:	bl	16610 <close_stdout@@Base+0x1e34>
   12d4c:	ldr	r3, [sp, #24]
   12d50:	mov	r1, r3
   12d54:	mov	r2, r0
   12d58:	ldr	r0, [pc, #876]	; 130cc <__assert_fail@plt+0x1c68>
   12d5c:	add	r0, pc, r0
   12d60:	bl	12740 <__assert_fail@plt+0x12dc>
   12d64:	mov	r1, sl
   12d68:	mov	r0, r4
   12d6c:	add	r2, sp, #64	; 0x40
   12d70:	add	r3, sp, #54	; 0x36
   12d74:	bl	127c8 <__assert_fail@plt+0x1364>
   12d78:	cmp	r0, #1
   12d7c:	mov	sl, r0
   12d80:	bls	12dc0 <__assert_fail@plt+0x195c>
   12d84:	sub	r3, sl, #2
   12d88:	cmp	r3, #4
   12d8c:	addls	pc, pc, r3, lsl #2
   12d90:	b	135f8 <__assert_fail@plt+0x2194>
   12d94:	b	13010 <__assert_fail@plt+0x1bac>
   12d98:	b	12f34 <__assert_fail@plt+0x1ad0>
   12d9c:	b	13020 <__assert_fail@plt+0x1bbc>
   12da0:	b	13074 <__assert_fail@plt+0x1c10>
   12da4:	b	13034 <__assert_fail@plt+0x1bd0>
   12da8:	mov	r4, r3
   12dac:	b	12cb0 <__assert_fail@plt+0x184c>
   12db0:	mov	r6, r8
   12db4:	ldr	r1, [r4, #4]
   12db8:	mov	r8, #0
   12dbc:	b	12a98 <__assert_fail@plt+0x1634>
   12dc0:	ldr	r3, [r5, #32]
   12dc4:	ldr	ip, [sp, #56]	; 0x38
   12dc8:	ldr	r1, [r5, #28]
   12dcc:	mov	r2, r3
   12dd0:	str	r3, [sp, #24]
   12dd4:	mov	r0, ip
   12dd8:	str	ip, [sp, #28]
   12ddc:	bl	11434 <strncmp@plt>
   12de0:	ldr	r3, [sp, #24]
   12de4:	ldr	ip, [sp, #28]
   12de8:	cmp	r0, fp
   12dec:	beq	13048 <__assert_fail@plt+0x1be4>
   12df0:	mov	r3, fp
   12df4:	vldr	d7, [sp, #64]	; 0x40
   12df8:	ldr	r0, [pc, #720]	; 130d0 <__assert_fail@plt+0x1c6c>
   12dfc:	str	r3, [sp]
   12e00:	add	r0, pc, r0
   12e04:	vmov	r2, r3, d7
   12e08:	bl	12740 <__assert_fail@plt+0x12dc>
   12e0c:	ldr	r5, [sp, #56]	; 0x38
   12e10:	ldrb	r3, [r5]
   12e14:	cmp	r3, #0
   12e18:	beq	131b8 <__assert_fail@plt+0x1d54>
   12e1c:	str	r3, [sp, #24]
   12e20:	bl	11320 <__ctype_b_loc@plt>
   12e24:	ldr	r3, [sp, #24]
   12e28:	ldr	r1, [r0]
   12e2c:	b	12e40 <__assert_fail@plt+0x19dc>
   12e30:	add	r2, r5, #1
   12e34:	str	r2, [sp, #56]	; 0x38
   12e38:	ldrb	r3, [r5, #1]
   12e3c:	mov	r5, r2
   12e40:	lsl	r2, r3, #1
   12e44:	ldrh	r2, [r1, r2]
   12e48:	ands	r2, r2, #1
   12e4c:	bne	12e30 <__assert_fail@plt+0x19cc>
   12e50:	ldr	r0, [pc, #636]	; 130d4 <__assert_fail@plt+0x1c70>
   12e54:	mov	r1, r3
   12e58:	str	r2, [sp, #28]
   12e5c:	add	r0, pc, r0
   12e60:	str	r3, [sp, #24]
   12e64:	bl	11344 <strchr@plt>
   12e68:	ldr	r2, [sp, #28]
   12e6c:	ldr	r3, [sp, #24]
   12e70:	cmp	r0, #0
   12e74:	bne	138a8 <__assert_fail@plt+0x2444>
   12e78:	ldr	r1, [pc, #600]	; 130d8 <__assert_fail@plt+0x1c74>
   12e7c:	mov	sl, #5
   12e80:	add	r1, pc, r1
   12e84:	b	12f40 <__assert_fail@plt+0x1adc>
   12e88:	ldrb	r4, [r8]
   12e8c:	mov	r6, r8
   12e90:	cmp	r4, #0
   12e94:	beq	129f8 <__assert_fail@plt+0x1594>
   12e98:	subs	r9, r9, #1
   12e9c:	bcc	12a8c <__assert_fail@plt+0x1628>
   12ea0:	bl	11320 <__ctype_b_loc@plt>
   12ea4:	ldr	r3, [r0]
   12ea8:	b	12ebc <__assert_fail@plt+0x1a58>
   12eac:	ldrb	r4, [r6, #1]
   12eb0:	add	r6, r6, #1
   12eb4:	cmp	r4, #0
   12eb8:	beq	129f8 <__assert_fail@plt+0x1594>
   12ebc:	lsl	r4, r4, #1
   12ec0:	ldrh	r2, [r3, r4]
   12ec4:	tst	r2, #1
   12ec8:	bne	12eac <__assert_fail@plt+0x1a48>
   12ecc:	ldrb	r4, [r6]
   12ed0:	cmp	r4, #0
   12ed4:	bne	12eec <__assert_fail@plt+0x1a88>
   12ed8:	b	129f8 <__assert_fail@plt+0x1594>
   12edc:	ldrb	r4, [r6, #1]
   12ee0:	add	r6, r6, #1
   12ee4:	cmp	r4, #0
   12ee8:	beq	129f8 <__assert_fail@plt+0x1594>
   12eec:	lsl	r4, r4, #1
   12ef0:	ldrh	r2, [r3, r4]
   12ef4:	tst	r2, #1
   12ef8:	beq	12edc <__assert_fail@plt+0x1a78>
   12efc:	ldrb	r4, [r6]
   12f00:	b	12e90 <__assert_fail@plt+0x1a2c>
   12f04:	ldr	r2, [pc, #464]	; 130dc <__assert_fail@plt+0x1c78>
   12f08:	add	r2, pc, r2
   12f0c:	ldr	r2, [r2]
   12f10:	cmp	r2, #1
   12f14:	bgt	12ccc <__assert_fail@plt+0x1868>
   12f18:	mov	r1, #0
   12f1c:	str	r1, [r3, #20]
   12f20:	b	12ce8 <__assert_fail@plt+0x1884>
   12f24:	ldr	r0, [pc, #436]	; 130e0 <__assert_fail@plt+0x1c7c>
   12f28:	add	r0, pc, r0
   12f2c:	bl	12740 <__assert_fail@plt+0x12dc>
   12f30:	b	12c70 <__assert_fail@plt+0x180c>
   12f34:	ldr	r1, [pc, #424]	; 130e4 <__assert_fail@plt+0x1c80>
   12f38:	mov	fp, #0
   12f3c:	add	r1, pc, r1
   12f40:	ldr	r3, [pc, #416]	; 130e8 <__assert_fail@plt+0x1c84>
   12f44:	add	r3, pc, r3
   12f48:	ldr	r3, [r3, #12]
   12f4c:	cmp	r3, #3
   12f50:	beq	12f90 <__assert_fail@plt+0x1b2c>
   12f54:	ldr	r3, [pc, #400]	; 130ec <__assert_fail@plt+0x1c88>
   12f58:	mov	r2, #5
   12f5c:	mov	r0, #0
   12f60:	add	r3, pc, r3
   12f64:	ldr	r5, [r3, #8]
   12f68:	bl	11218 <dcgettext@plt>
   12f6c:	mov	r2, r0
   12f70:	mov	r0, r4
   12f74:	str	r2, [sp, #28]
   12f78:	bl	16618 <close_stdout@@Base+0x1e3c>
   12f7c:	ldr	r2, [sp, #28]
   12f80:	mov	r1, #0
   12f84:	mov	r3, r0
   12f88:	mov	r0, r5
   12f8c:	bl	112b4 <error@plt>
   12f90:	ldr	r1, [pc, #344]	; 130f0 <__assert_fail@plt+0x1c8c>
   12f94:	add	r1, pc, r1
   12f98:	ldrd	r2, [r1, #16]
   12f9c:	cmp	r3, #0
   12fa0:	cmpeq	r2, #1
   12fa4:	beq	13198 <__assert_fail@plt+0x1d34>
   12fa8:	ldr	r4, [r1, #24]
   12fac:	ldr	r5, [r1, #28]
   12fb0:	mov	r0, r2
   12fb4:	mov	r1, r3
   12fb8:	bl	1a6ac <close_stdout@@Base+0x5ed0>
   12fbc:	vldr	d10, [sp, #64]	; 0x40
   12fc0:	vmov	d6, r0, r1
   12fc4:	mov	r0, r4
   12fc8:	mov	r1, r5
   12fcc:	vmul.f64	d10, d6, d10
   12fd0:	bl	1a6ac <close_stdout@@Base+0x5ed0>
   12fd4:	vmov	d7, r0, r1
   12fd8:	vdiv.f64	d10, d10, d7
   12fdc:	cmp	sl, #1
   12fe0:	bls	13104 <__assert_fail@plt+0x1ca0>
   12fe4:	cmp	r8, #0
   12fe8:	beq	13954 <__assert_fail@plt+0x24f0>
   12fec:	ldr	r3, [pc, #256]	; 130f4 <__assert_fail@plt+0x1c90>
   12ff0:	mov	r0, r8
   12ff4:	ldr	r4, [r7, r3]
   12ff8:	ldr	r1, [r4]
   12ffc:	bl	11170 <fputs_unlocked@plt>
   13000:	cmp	r6, #0
   13004:	beq	1395c <__assert_fail@plt+0x24f8>
   13008:	mov	sl, #0
   1300c:	b	133c4 <__assert_fail@plt+0x1f60>
   13010:	ldr	r1, [pc, #224]	; 130f8 <__assert_fail@plt+0x1c94>
   13014:	mov	fp, #0
   13018:	add	r1, pc, r1
   1301c:	b	12f40 <__assert_fail@plt+0x1adc>
   13020:	mov	fp, #0
   13024:	ldr	r1, [pc, #208]	; 130fc <__assert_fail@plt+0x1c98>
   13028:	mov	sl, #4
   1302c:	add	r1, pc, r1
   13030:	b	12f40 <__assert_fail@plt+0x1adc>
   13034:	mov	fp, #0
   13038:	ldr	r1, [pc, #192]	; 13100 <__assert_fail@plt+0x1c9c>
   1303c:	mov	sl, #6
   13040:	add	r1, pc, r1
   13044:	b	12f40 <__assert_fail@plt+0x1adc>
   13048:	add	r0, ip, r3
   1304c:	add	r1, sp, #60	; 0x3c
   13050:	add	r2, sp, #72	; 0x48
   13054:	add	r3, sp, #55	; 0x37
   13058:	str	r0, [sp, #56]	; 0x38
   1305c:	vstr	d8, [sp, #72]	; 0x48
   13060:	bl	127c8 <__assert_fail@plt+0x1364>
   13064:	cmp	r0, #1
   13068:	bls	13834 <__assert_fail@plt+0x23d0>
   1306c:	mov	sl, r0
   13070:	b	12d84 <__assert_fail@plt+0x1920>
   13074:	mov	fp, #0
   13078:	b	12e78 <__assert_fail@plt+0x1a14>
   1307c:	nop	{0}
	...
   13088:	andeq	fp, r1, ip, lsr #13
   1308c:	andeq	r0, r0, r8, lsl r1
   13090:	strdeq	fp, [r1], -ip
   13094:	andeq	r8, r0, r8, lsl sl
   13098:			; <UNDEFINED> instruction: 0x000089b8
   1309c:	andeq	fp, r1, r0, asr #15
   130a0:	andeq	fp, r1, r0, lsr #14
   130a4:	ldrdeq	r8, [r0], -r0
   130a8:			; <UNDEFINED> instruction: 0x00009bb0
   130ac:	andeq	r9, r0, ip, lsl #23
   130b0:	andeq	r8, r0, r8, ror #15
   130b4:	andeq	fp, r1, r8, asr #11
   130b8:	andeq	r8, r0, r8, ror #15
   130bc:	andeq	fp, r1, r4, lsr #10
   130c0:	andeq	fp, r1, r0, lsl #10
   130c4:	muleq	r0, r0, r7
   130c8:	ldrdeq	fp, [r1], -r4
   130cc:	andeq	r8, r0, r8, asr #14
   130d0:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   130d4:	strdeq	r8, [r0], -ip
   130d8:	muleq	r0, r0, r4
   130dc:	andeq	fp, r1, r0, asr r2
   130e0:	andeq	r8, r0, ip, lsr r5
   130e4:	andeq	r8, r0, r8, lsl #7
   130e8:	muleq	r1, r4, r2
   130ec:	strdeq	fp, [r1], -r8
   130f0:	andeq	fp, r1, r4, asr #3
   130f4:	andeq	r0, r0, ip, lsr r1
   130f8:	andeq	r8, r0, r8, lsl #5
   130fc:	andeq	r8, r0, ip, lsr #5
   13100:	andeq	r8, r0, ip, ror #5
   13104:	vldr	d7, [pc, #820]	; 13440 <__assert_fail@plt+0x1fdc>
   13108:	vcmpe.f64	d10, d7
   1310c:	vmrs	APSR_nzcv, fpscr
   13110:	bge	132fc <__assert_fail@plt+0x1e98>
   13114:	ldr	r3, [pc, #820]	; 13450 <__assert_fail@plt+0x1fec>
   13118:	add	r3, pc, r3
   1311c:	ldr	r5, [r3, #40]	; 0x28
   13120:	cmp	r5, #0
   13124:	bne	13e68 <__assert_fail@plt+0x2a04>
   13128:	ldr	r2, [pc, #804]	; 13454 <__assert_fail@plt+0x1ff0>
   1312c:	ldr	r3, [pc, #804]	; 13458 <__assert_fail@plt+0x1ff4>
   13130:	ldr	r0, [pc, #804]	; 1345c <__assert_fail@plt+0x1ff8>
   13134:	add	r2, pc, r2
   13138:	add	r3, pc, r3
   1313c:	add	r0, pc, r0
   13140:	ldr	r4, [r2, #56]	; 0x38
   13144:	ldr	r5, [r3, #32]
   13148:	bl	12740 <__assert_fail@plt+0x12dc>
   1314c:	cmp	fp, #0
   13150:	vmoveq.f64	d7, #112	; 0x3f800000  1.0
   13154:	beq	13174 <__assert_fail@plt+0x1d10>
   13158:	subs	r3, fp, #1
   1315c:	vmov.f64	d7, #36	; 0x41200000  10.0
   13160:	beq	13174 <__assert_fail@plt+0x1d10>
   13164:	vmov.f64	d6, d7
   13168:	subs	r3, r3, #1
   1316c:	vmul.f64	d7, d7, d6
   13170:	bne	13168 <__assert_fail@plt+0x1d04>
   13174:	vmul.f64	d8, d10, d7
   13178:	cmp	r5, #4
   1317c:	addls	pc, pc, r5, lsl #2
   13180:	b	13dac <__assert_fail@plt+0x2948>
   13184:	b	137a0 <__assert_fail@plt+0x233c>
   13188:	b	137e0 <__assert_fail@plt+0x237c>
   1318c:	b	13794 <__assert_fail@plt+0x2330>
   13190:	b	13780 <__assert_fail@plt+0x231c>
   13194:	b	13624 <__assert_fail@plt+0x21c0>
   13198:	ldrd	r4, [r1, #24]
   1319c:	cmp	r5, #0
   131a0:	cmpeq	r4, #1
   131a4:	bne	12fb0 <__assert_fail@plt+0x1b4c>
   131a8:	vldr	d10, [sp, #64]	; 0x40
   131ac:	b	12fdc <__assert_fail@plt+0x1b78>
   131b0:	mov	r9, #0
   131b4:	b	12ba8 <__assert_fail@plt+0x1744>
   131b8:	mov	r2, r3
   131bc:	ldr	r1, [sp, #40]	; 0x28
   131c0:	cmp	r1, #4
   131c4:	beq	13900 <__assert_fail@plt+0x249c>
   131c8:	vldr	s14, [sp, #44]	; 0x2c
   131cc:	vcvt.f64.s32	d6, s14
   131d0:	cmp	r2, #0
   131d4:	vmoveq.f64	d8, #112	; 0x3f800000  1.0
   131d8:	bne	13604 <__assert_fail@plt+0x21a0>
   131dc:	ldr	r0, [pc, #636]	; 13460 <__assert_fail@plt+0x1ffc>
   131e0:	vstr	d8, [sp]
   131e4:	ldr	r1, [sp, #44]	; 0x2c
   131e8:	add	r0, pc, r0
   131ec:	bl	12740 <__assert_fail@plt+0x12dc>
   131f0:	vldr	d7, [sp, #64]	; 0x40
   131f4:	ldr	r0, [pc, #616]	; 13464 <__assert_fail@plt+0x2000>
   131f8:	add	r0, pc, r0
   131fc:	vmul.f64	d8, d8, d7
   13200:	vmov	r2, r3, d8
   13204:	vstr	d8, [sp]
   13208:	vstr	d8, [sp, #64]	; 0x40
   1320c:	bl	12740 <__assert_fail@plt+0x12dc>
   13210:	ldr	r3, [sp, #56]	; 0x38
   13214:	cmp	r3, #0
   13218:	beq	132a4 <__assert_fail@plt+0x1e40>
   1321c:	ldrb	r3, [r3]
   13220:	cmp	r3, #0
   13224:	beq	132a4 <__assert_fail@plt+0x1e40>
   13228:	ldr	r3, [pc, #568]	; 13468 <__assert_fail@plt+0x2004>
   1322c:	add	r3, pc, r3
   13230:	ldr	r3, [r3, #12]
   13234:	cmp	r3, #3
   13238:	moveq	sl, #5
   1323c:	beq	12f90 <__assert_fail@plt+0x1b2c>
   13240:	ldr	r3, [pc, #548]	; 1346c <__assert_fail@plt+0x2008>
   13244:	mov	r2, #5
   13248:	ldr	r1, [pc, #544]	; 13470 <__assert_fail@plt+0x200c>
   1324c:	mov	r0, #0
   13250:	add	r3, pc, r3
   13254:	mov	sl, r2
   13258:	add	r1, pc, r1
   1325c:	ldr	r5, [r3, #8]
   13260:	bl	11218 <dcgettext@plt>
   13264:	mov	r1, r4
   13268:	mov	r2, r0
   1326c:	mov	r0, #0
   13270:	str	r2, [sp, #28]
   13274:	bl	16610 <close_stdout@@Base+0x1e34>
   13278:	ldr	r1, [sp, #56]	; 0x38
   1327c:	mov	r4, r0
   13280:	mov	r0, #1
   13284:	bl	16610 <close_stdout@@Base+0x1e34>
   13288:	ldr	r2, [sp, #28]
   1328c:	mov	r3, r4
   13290:	mov	r1, #0
   13294:	str	r0, [sp]
   13298:	mov	r0, r5
   1329c:	bl	112b4 <error@plt>
   132a0:	b	12f90 <__assert_fail@plt+0x1b2c>
   132a4:	cmp	sl, #1
   132a8:	movne	sl, #0
   132ac:	bne	12f90 <__assert_fail@plt+0x1b2c>
   132b0:	ldr	r3, [pc, #444]	; 13474 <__assert_fail@plt+0x2010>
   132b4:	add	r3, pc, r3
   132b8:	ldrb	r3, [r3, #36]	; 0x24
   132bc:	cmp	r3, #0
   132c0:	beq	12f90 <__assert_fail@plt+0x1b2c>
   132c4:	ldr	r1, [pc, #428]	; 13478 <__assert_fail@plt+0x2014>
   132c8:	mov	r2, #5
   132cc:	mov	r0, #0
   132d0:	add	r1, pc, r1
   132d4:	bl	11218 <dcgettext@plt>
   132d8:	mov	r5, r0
   132dc:	mov	r0, r4
   132e0:	bl	16618 <close_stdout@@Base+0x1e3c>
   132e4:	mov	r2, r5
   132e8:	mov	r3, r0
   132ec:	mov	r0, #0
   132f0:	mov	r1, r0
   132f4:	bl	112b4 <error@plt>
   132f8:	b	12f90 <__assert_fail@plt+0x1b2c>
   132fc:	vldr	d7, [pc, #324]	; 13448 <__assert_fail@plt+0x1fe4>
   13300:	vcmpe.f64	d10, d7
   13304:	vmrs	APSR_nzcv, fpscr
   13308:	bhi	13114 <__assert_fail@plt+0x1cb0>
   1330c:	vmov.f64	d7, d10
   13310:	mov	r3, #0
   13314:	vmov.f64	d6, #36	; 0x41200000  10.0
   13318:	b	13324 <__assert_fail@plt+0x1ec0>
   1331c:	vdiv.f64	d7, d7, d6
   13320:	add	r3, r3, #1
   13324:	vcmpe.f64	d7, #0.0
   13328:	vmrs	APSR_nzcv, fpscr
   1332c:	vnegmi.f64	d5, d7
   13330:	vmovpl.f64	d5, d7
   13334:	vcmpe.f64	d5, d6
   13338:	vmrs	APSR_nzcv, fpscr
   1333c:	bge	1331c <__assert_fail@plt+0x1eb8>
   13340:	ldr	r2, [pc, #308]	; 1347c <__assert_fail@plt+0x2018>
   13344:	add	r2, pc, r2
   13348:	ldr	r5, [r2, #40]	; 0x28
   1334c:	cmp	r5, #0
   13350:	bne	135a8 <__assert_fail@plt+0x2144>
   13354:	cmp	r3, #18
   13358:	bls	13128 <__assert_fail@plt+0x1cc4>
   1335c:	ldr	r3, [r2, #12]
   13360:	cmp	r3, #3
   13364:	beq	133a4 <__assert_fail@plt+0x1f40>
   13368:	ldr	r3, [pc, #272]	; 13480 <__assert_fail@plt+0x201c>
   1336c:	mov	r0, r5
   13370:	ldr	r1, [pc, #268]	; 13484 <__assert_fail@plt+0x2020>
   13374:	mov	r2, #5
   13378:	add	r3, pc, r3
   1337c:	mov	sl, r5
   13380:	add	r1, pc, r1
   13384:	ldr	r4, [r3, #8]
   13388:	bl	11218 <dcgettext@plt>
   1338c:	vstr	d10, [sp]
   13390:	mov	r1, r5
   13394:	mov	r2, r0
   13398:	mov	r0, r4
   1339c:	bl	112b4 <error@plt>
   133a0:	b	133a8 <__assert_fail@plt+0x1f44>
   133a4:	mov	sl, #0
   133a8:	cmp	r8, #0
   133ac:	beq	134dc <__assert_fail@plt+0x2078>
   133b0:	ldr	r3, [pc, #224]	; 13498 <__assert_fail@plt+0x2034>
   133b4:	mov	r0, r8
   133b8:	ldr	r4, [r7, r3]
   133bc:	ldr	r1, [r4]
   133c0:	bl	11170 <fputs_unlocked@plt>
   133c4:	ldr	r3, [pc, #188]	; 13488 <__assert_fail@plt+0x2024>
   133c8:	ldr	r0, [r4]
   133cc:	add	r3, pc, r3
   133d0:	ldr	r2, [r3, #4]
   133d4:	ldr	r1, [r0, #24]
   133d8:	ldr	r3, [r0, #20]
   133dc:	cmp	r2, #256	; 0x100
   133e0:	moveq	r2, #32
   133e4:	cmp	r3, r1
   133e8:	addcc	r1, r3, #1
   133ec:	strcc	r1, [r0, #20]
   133f0:	strbcc	r2, [r3]
   133f4:	bcs	13d6c <__assert_fail@plt+0x2908>
   133f8:	cmp	sl, #0
   133fc:	beq	134ec <__assert_fail@plt+0x2088>
   13400:	ldr	r3, [pc, #132]	; 1348c <__assert_fail@plt+0x2028>
   13404:	add	r3, pc, r3
   13408:	ldr	r0, [r3, #48]	; 0x30
   1340c:	cmp	r0, #0
   13410:	beq	1341c <__assert_fail@plt+0x1fb8>
   13414:	ldr	r1, [r4]
   13418:	bl	11170 <fputs_unlocked@plt>
   1341c:	ldr	r5, [pc, #108]	; 13490 <__assert_fail@plt+0x202c>
   13420:	ldr	r1, [r4]
   13424:	add	r5, pc, r5
   13428:	ldr	r0, [r5, #8]
   1342c:	bl	11170 <fputs_unlocked@plt>
   13430:	ldr	r0, [r5, #52]	; 0x34
   13434:	cmp	r0, #0
   13438:	bne	134f0 <__assert_fail@plt+0x208c>
   1343c:	b	134f8 <__assert_fail@plt+0x2094>
   13440:			; <UNDEFINED> instruction: 0xffffffff
   13444:			; <UNDEFINED> instruction: 0xffefffff
   13448:			; <UNDEFINED> instruction: 0xffffffff
   1344c:	svcvc	0x00efffff
   13450:	andeq	fp, r1, r0, asr #1
   13454:	andeq	fp, r1, r4, lsr #1
   13458:	andeq	fp, r1, r0, lsr #32
   1345c:	andeq	r8, r0, ip, ror #9
   13460:	andeq	r8, r0, r4, lsr r3
   13464:	andeq	r8, r0, r0, asr #6
   13468:	andeq	sl, r1, ip, lsr #31
   1346c:	andeq	sl, r1, r8, lsl #30
   13470:	andeq	r8, r0, r0, lsl #6
   13474:	andeq	sl, r1, r4, lsr #30
   13478:	andeq	r8, r0, r8, lsr #5
   1347c:	muleq	r1, r4, lr
   13480:	andeq	sl, r1, r0, ror #27
   13484:	andeq	r8, r0, r8, lsr #4
   13488:	andeq	sl, r1, ip, lsl #27
   1348c:	ldrdeq	sl, [r1], -r4
   13490:			; <UNDEFINED> instruction: 0x0001adb4
   13494:	andeq	sl, r1, ip, asr #24
   13498:	andeq	r0, r0, ip, lsr r1
   1349c:	andeq	sl, r1, ip, lsl #23
   134a0:	andeq	r8, r0, r0, lsl r0
   134a4:	andeq	r8, r0, r4, lsr #1
   134a8:	ldrdeq	r7, [r0], -r0
   134ac:	andeq	r7, r0, ip, ror #30
   134b0:	andeq	sl, r1, r8, ror #21
   134b4:	andeq	sl, r1, ip, lsr #21
   134b8:	andeq	r7, r0, r4, ror pc
   134bc:	andeq	sl, r1, r8, ror #20
   134c0:	strdeq	r7, [r0], -r4
   134c4:	andeq	r7, r0, r4, lsl lr
   134c8:	andeq	r7, r0, r0, lsl sl
   134cc:	andeq	sl, r1, r4, ror #15
   134d0:	andeq	r7, r0, r8, lsr sp
   134d4:	muleq	r1, ip, r7
   134d8:	andeq	r7, r0, r8, ror #24
   134dc:	ldr	r3, [pc, #-76]	; 13498 <__assert_fail@plt+0x2034>
   134e0:	cmp	sl, #0
   134e4:	ldr	r4, [r7, r3]
   134e8:	bne	13400 <__assert_fail@plt+0x1f9c>
   134ec:	mov	r0, r6
   134f0:	ldr	r1, [r4]
   134f4:	bl	11170 <fputs_unlocked@plt>
   134f8:	cmp	r9, #0
   134fc:	beq	1354c <__assert_fail@plt+0x20e8>
   13500:	ldr	r2, [pc, #-112]	; 13498 <__assert_fail@plt+0x2034>
   13504:	ldr	r3, [pc, #-120]	; 13494 <__assert_fail@plt+0x2030>
   13508:	ldr	r4, [r7, r2]
   1350c:	add	r3, pc, r3
   13510:	ldr	r3, [r3, #4]
   13514:	ldr	r0, [r4]
   13518:	cmp	r3, #256	; 0x100
   1351c:	ldr	r2, [r0, #24]
   13520:	movne	r1, r3
   13524:	ldr	r3, [r0, #20]
   13528:	moveq	r1, #32
   1352c:	cmp	r3, r2
   13530:	addcc	r2, r3, #1
   13534:	strcc	r2, [r0, #20]
   13538:	strbcc	r1, [r3]
   1353c:	bcs	13ec8 <__assert_fail@plt+0x2a64>
   13540:	mov	r0, r9
   13544:	ldr	r1, [r4]
   13548:	bl	11170 <fputs_unlocked@plt>
   1354c:	ldr	r1, [sp, #36]	; 0x24
   13550:	cmp	r1, #0
   13554:	beq	13584 <__assert_fail@plt+0x2120>
   13558:	ldr	r3, [pc, #-200]	; 13498 <__assert_fail@plt+0x2034>
   1355c:	ldr	r3, [r7, r3]
   13560:	ldr	r0, [r3]
   13564:	ldr	r3, [r0, #20]
   13568:	ldr	r2, [r0, #24]
   1356c:	cmp	r3, r2
   13570:	addcc	r1, r3, #1
   13574:	strcc	r1, [r0, #20]
   13578:	movcc	r2, #10
   1357c:	strbcc	r2, [r3]
   13580:	bcs	13ebc <__assert_fail@plt+0x2a58>
   13584:	ldr	r1, [sp, #32]
   13588:	mov	r0, sl
   1358c:	ldr	r2, [sp, #212]	; 0xd4
   13590:	ldr	r3, [r1]
   13594:	cmp	r2, r3
   13598:	bne	13e94 <__assert_fail@plt+0x2a30>
   1359c:	add	sp, sp, #220	; 0xdc
   135a0:	vpop	{d8-d11}
   135a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a8:	cmp	r3, #26
   135ac:	bls	139b4 <__assert_fail@plt+0x2550>
   135b0:	ldr	r3, [r2, #12]
   135b4:	cmp	r3, #3
   135b8:	beq	133a4 <__assert_fail@plt+0x1f40>
   135bc:	ldr	r3, [pc, #-296]	; 1349c <__assert_fail@plt+0x2038>
   135c0:	mov	r0, #0
   135c4:	ldr	r1, [pc, #-300]	; 134a0 <__assert_fail@plt+0x203c>
   135c8:	mov	r2, #5
   135cc:	add	r3, pc, r3
   135d0:	mov	sl, r0
   135d4:	add	r1, pc, r1
   135d8:	ldr	r4, [r3, #8]
   135dc:	bl	11218 <dcgettext@plt>
   135e0:	vstr	d10, [sp]
   135e4:	mov	r1, sl
   135e8:	mov	r2, r0
   135ec:	mov	r0, r4
   135f0:	bl	112b4 <error@plt>
   135f4:	b	133a8 <__assert_fail@plt+0x1f44>
   135f8:	mov	fp, #0
   135fc:	mov	r1, fp
   13600:	b	12f40 <__assert_fail@plt+0x1adc>
   13604:	subs	r3, r2, #1
   13608:	beq	13d78 <__assert_fail@plt+0x2914>
   1360c:	vmov.f64	d7, d6
   13610:	subs	r3, r3, #1
   13614:	vmul.f64	d7, d7, d6
   13618:	bne	13610 <__assert_fail@plt+0x21ac>
   1361c:	vmov.f64	d8, d7
   13620:	b	131dc <__assert_fail@plt+0x1d78>
   13624:	vmov.f64	d7, #96	; 0x3f000000  0.5
   13628:	vcmpe.f64	d8, #0.0
   1362c:	vmrs	APSR_nzcv, fpscr
   13630:	vsubmi.f64	d6, d8, d7
   13634:	vaddpl.f64	d6, d8, d7
   13638:	vmov	r0, r1, d6
   1363c:	bl	1a76c <close_stdout@@Base+0x5f90>
   13640:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13644:	vmov	d7, r0, r1
   13648:	cmp	fp, #0
   1364c:	vmoveq.f64	d6, #112	; 0x3f800000  1.0
   13650:	beq	13670 <__assert_fail@plt+0x220c>
   13654:	subs	r3, fp, #1
   13658:	vmov.f64	d6, #36	; 0x41200000  10.0
   1365c:	beq	13670 <__assert_fail@plt+0x220c>
   13660:	vmov.f64	d5, d6
   13664:	subs	r3, r3, #1
   13668:	vmul.f64	d6, d6, d5
   1366c:	bne	13664 <__assert_fail@plt+0x2200>
   13670:	cmp	r4, #0
   13674:	vdiv.f64	d8, d7, d6
   13678:	bne	13934 <__assert_fail@plt+0x24d0>
   1367c:	ldr	r0, [pc, #-480]	; 134a4 <__assert_fail@plt+0x2040>
   13680:	mov	r1, fp
   13684:	vmov	r2, r3, d8
   13688:	add	r0, pc, r0
   1368c:	bl	12740 <__assert_fail@plt+0x12dc>
   13690:	ldr	r3, [pc, #-496]	; 134a8 <__assert_fail@plt+0x2044>
   13694:	add	r3, pc, r3
   13698:	add	r4, sp, #84	; 0x54
   1369c:	mov	r1, #128	; 0x80
   136a0:	str	r3, [sp]
   136a4:	vstr	d8, [sp, #8]
   136a8:	str	fp, [sp, #4]
   136ac:	mov	r0, r4
   136b0:	mov	r3, r1
   136b4:	mov	r2, #1
   136b8:	bl	11458 <__snprintf_chk@plt>
   136bc:	cmp	r0, #127	; 0x7f
   136c0:	bls	136ec <__assert_fail@plt+0x2288>
   136c4:	ldr	r1, [pc, #-544]	; 134ac <__assert_fail@plt+0x2048>
   136c8:	mov	r2, #5
   136cc:	mov	r0, #0
   136d0:	add	r1, pc, r1
   136d4:	bl	11218 <dcgettext@plt>
   136d8:	vstr	d8, [sp]
   136dc:	mov	r1, #0
   136e0:	mov	r2, r0
   136e4:	mov	r0, #1
   136e8:	bl	112b4 <error@plt>
   136ec:	ldr	r3, [pc, #-580]	; 134b0 <__assert_fail@plt+0x204c>
   136f0:	add	r3, pc, r3
   136f4:	ldr	r5, [r3, #44]	; 0x2c
   136f8:	cmp	r5, #0
   136fc:	beq	1371c <__assert_fail@plt+0x22b8>
   13700:	mov	r0, r4
   13704:	bl	11338 <strlen@plt>
   13708:	mov	r1, r5
   1370c:	mov	r3, #128	; 0x80
   13710:	rsb	r2, r0, #127	; 0x7f
   13714:	mov	r0, r4
   13718:	bl	11194 <__strncat_chk@plt>
   1371c:	mov	r0, r4
   13720:	ldr	r5, [pc, #-628]	; 134b4 <__assert_fail@plt+0x2050>
   13724:	bl	16618 <close_stdout@@Base+0x1e3c>
   13728:	vmov	r2, r3, d10
   1372c:	add	r5, pc, r5
   13730:	str	r0, [sp]
   13734:	ldr	r0, [pc, #-644]	; 134b8 <__assert_fail@plt+0x2054>
   13738:	add	r0, pc, r0
   1373c:	bl	12740 <__assert_fail@plt+0x12dc>
   13740:	ldr	sl, [r5, #20]
   13744:	mov	r0, r4
   13748:	cmp	sl, #0
   1374c:	beq	1392c <__assert_fail@plt+0x24c8>
   13750:	bl	11338 <strlen@plt>
   13754:	cmp	r0, sl
   13758:	bcc	13964 <__assert_fail@plt+0x2500>
   1375c:	add	r0, r0, #1
   13760:	mov	sl, #1
   13764:	bl	128c8 <__assert_fail@plt+0x1464>
   13768:	ldr	r3, [pc, #-692]	; 134bc <__assert_fail@plt+0x2058>
   1376c:	mov	r1, r4
   13770:	add	r3, pc, r3
   13774:	ldr	r0, [r3, #8]
   13778:	bl	11284 <strcpy@plt>
   1377c:	b	133a8 <__assert_fail@plt+0x1f44>
   13780:	vmov	r0, r1, d8
   13784:	bl	1a76c <close_stdout@@Base+0x5f90>
   13788:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   1378c:	vmov	d7, r0, r1
   13790:	b	13648 <__assert_fail@plt+0x21e4>
   13794:	vcmpe.f64	d8, #0.0
   13798:	vmrs	APSR_nzcv, fpscr
   1379c:	bmi	13e34 <__assert_fail@plt+0x29d0>
   137a0:	vmov	r0, r1, d8
   137a4:	bl	1a76c <close_stdout@@Base+0x5f90>
   137a8:	str	r0, [sp, #28]
   137ac:	str	r1, [sp, #24]
   137b0:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   137b4:	ldr	r2, [sp, #28]
   137b8:	ldr	r3, [sp, #24]
   137bc:	vmov	d7, r0, r1
   137c0:	vcmpe.f64	d8, d7
   137c4:	vmrs	APSR_nzcv, fpscr
   137c8:	ble	13648 <__assert_fail@plt+0x21e4>
   137cc:	adds	r0, r2, #1
   137d0:	adc	r1, r3, #0
   137d4:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   137d8:	vmov	d7, r0, r1
   137dc:	b	13648 <__assert_fail@plt+0x21e4>
   137e0:	vneg.f64	d8, d8
   137e4:	vmov	r0, r1, d8
   137e8:	bl	1a76c <close_stdout@@Base+0x5f90>
   137ec:	str	r0, [sp, #28]
   137f0:	str	r1, [sp, #24]
   137f4:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   137f8:	ldr	r2, [sp, #28]
   137fc:	ldr	r3, [sp, #24]
   13800:	vmov	d6, r0, r1
   13804:	vcmpe.f64	d8, d6
   13808:	vmrs	APSR_nzcv, fpscr
   1380c:	ble	13818 <__assert_fail@plt+0x23b4>
   13810:	adds	r2, r2, #1
   13814:	adc	r3, r3, #0
   13818:	rsbs	r0, r2, #0
   1381c:	rsc	r1, r3, #0
   13820:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13824:	vmov	d7, r0, r1
   13828:	b	13648 <__assert_fail@plt+0x21e4>
   1382c:	mov	r4, r6
   13830:	b	12cb0 <__assert_fail@plt+0x184c>
   13834:	ldrb	r3, [sp, #55]	; 0x37
   13838:	moveq	sl, r0
   1383c:	cmp	r3, #0
   13840:	bne	13924 <__assert_fail@plt+0x24c0>
   13844:	ldr	r1, [sp, #60]	; 0x3c
   13848:	vldr	d6, [sp, #72]	; 0x48
   1384c:	ldr	r3, [sp, #56]	; 0x38
   13850:	rsb	r3, r3, r1
   13854:	cmp	r3, #0
   13858:	mov	fp, r3
   1385c:	vmoveq.f64	d7, #112	; 0x3f800000  1.0
   13860:	beq	13880 <__assert_fail@plt+0x241c>
   13864:	subs	r2, r3, #1
   13868:	vmov.f64	d7, #36	; 0x41200000  10.0
   1386c:	beq	13880 <__assert_fail@plt+0x241c>
   13870:	vmov.f64	d5, d7
   13874:	subs	r2, r2, #1
   13878:	vmul.f64	d7, d7, d5
   1387c:	bne	13874 <__assert_fail@plt+0x2410>
   13880:	vdiv.f64	d7, d6, d7
   13884:	ldrb	r2, [sp, #54]	; 0x36
   13888:	vldr	d6, [sp, #64]	; 0x40
   1388c:	str	r1, [sp, #56]	; 0x38
   13890:	cmp	r2, #0
   13894:	vstr	d7, [sp, #72]	; 0x48
   13898:	vsubne.f64	d7, d6, d7
   1389c:	vaddeq.f64	d7, d7, d6
   138a0:	vstr	d7, [sp, #64]	; 0x40
   138a4:	b	12df8 <__assert_fail@plt+0x1994>
   138a8:	ldr	r1, [sp, #40]	; 0x28
   138ac:	cmp	r1, #0
   138b0:	beq	13024 <__assert_fail@plt+0x1bc0>
   138b4:	sub	r3, r3, #69	; 0x45
   138b8:	uxtb	r3, r3
   138bc:	cmp	r3, #21
   138c0:	ldrls	r2, [pc, #-1032]	; 134c0 <__assert_fail@plt+0x205c>
   138c4:	addls	r2, pc, r2
   138c8:	ldrls	r2, [r2, r3, lsl #2]
   138cc:	ldr	r3, [sp, #40]	; 0x28
   138d0:	cmp	r3, #1
   138d4:	add	r3, r5, #1
   138d8:	str	r3, [sp, #56]	; 0x38
   138dc:	movne	fp, #0
   138e0:	bne	131bc <__assert_fail@plt+0x1d58>
   138e4:	ldrb	r3, [r5, #1]
   138e8:	cmp	r3, #105	; 0x69
   138ec:	beq	13d80 <__assert_fail@plt+0x291c>
   138f0:	vldr	s14, [sp, #44]	; 0x2c
   138f4:	vcvt.f64.s32	d6, s14
   138f8:	mov	fp, #0
   138fc:	b	131d0 <__assert_fail@plt+0x1d6c>
   13900:	ldr	r3, [sp, #56]	; 0x38
   13904:	ldrb	r1, [r3]
   13908:	cmp	r1, #105	; 0x69
   1390c:	bne	13038 <__assert_fail@plt+0x1bd4>
   13910:	vldr	s15, [sp, #44]	; 0x2c
   13914:	add	r3, r3, #1
   13918:	vcvt.f64.s32	d6, s15
   1391c:	str	r3, [sp, #56]	; 0x38
   13920:	b	131d0 <__assert_fail@plt+0x1d6c>
   13924:	mov	r0, #3
   13928:	b	1306c <__assert_fail@plt+0x1c08>
   1392c:	bl	11338 <strlen@plt>
   13930:	b	1375c <__assert_fail@plt+0x22f8>
   13934:	ldr	r0, [pc, #-1144]	; 134c4 <__assert_fail@plt+0x2060>
   13938:	mov	r1, fp
   1393c:	vmov	r2, r3, d8
   13940:	add	r0, pc, r0
   13944:	bl	12740 <__assert_fail@plt+0x12dc>
   13948:	ldr	r3, [pc, #-1160]	; 134c8 <__assert_fail@plt+0x2064>
   1394c:	add	r3, pc, r3
   13950:	b	13698 <__assert_fail@plt+0x2234>
   13954:	cmp	r6, #0
   13958:	bne	13e84 <__assert_fail@plt+0x2a20>
   1395c:	mov	sl, r6
   13960:	b	134f8 <__assert_fail@plt+0x2094>
   13964:	ldr	lr, [pc, #-1184]	; 134cc <__assert_fail@plt+0x2068>
   13968:	add	r3, sp, #216	; 0xd8
   1396c:	ldr	r1, [r5, #8]
   13970:	mov	ip, #2
   13974:	add	lr, pc, lr
   13978:	str	sl, [r3, #-144]!	; 0xffffff70
   1397c:	ldr	r2, [r5, #4]
   13980:	mov	r0, r4
   13984:	ldr	lr, [lr, #36]	; 0x24
   13988:	mov	sl, #1
   1398c:	str	ip, [sp, #4]
   13990:	str	lr, [sp]
   13994:	bl	14998 <close_stdout@@Base+0x1bc>
   13998:	ldr	r0, [r5, #8]
   1399c:	bl	16618 <close_stdout@@Base+0x1e3c>
   139a0:	mov	r1, r0
   139a4:	ldr	r0, [pc, #-1244]	; 134d0 <__assert_fail@plt+0x206c>
   139a8:	add	r0, pc, r0
   139ac:	bl	12740 <__assert_fail@plt+0x12dc>
   139b0:	b	133a8 <__assert_fail@plt+0x1f44>
   139b4:	ldr	r3, [pc, #-1256]	; 134d4 <__assert_fail@plt+0x2070>
   139b8:	ldr	r0, [pc, #-1256]	; 134d8 <__assert_fail@plt+0x2074>
   139bc:	add	r3, pc, r3
   139c0:	add	r0, pc, r0
   139c4:	ldr	r4, [r3, #32]
   139c8:	bl	12740 <__assert_fail@plt+0x12dc>
   139cc:	vldr	d7, [pc, #996]	; 13db8 <__assert_fail@plt+0x2954>
   139d0:	vcmpe.f64	d10, d7
   139d4:	sub	r3, r5, #3
   139d8:	vldr	d11, [pc, #992]	; 13dc0 <__assert_fail@plt+0x295c>
   139dc:	cmp	r3, #1
   139e0:	vldr	d7, [pc, #992]	; 13dc8 <__assert_fail@plt+0x2964>
   139e4:	vmovls.f64	d11, d7
   139e8:	vmrs	APSR_nzcv, fpscr
   139ec:	movlt	sl, #0
   139f0:	vmovlt.f64	d9, d10
   139f4:	blt	13a10 <__assert_fail@plt+0x25ac>
   139f8:	vldr	d7, [pc, #976]	; 13dd0 <__assert_fail@plt+0x296c>
   139fc:	mov	sl, #0
   13a00:	vcmpe.f64	d10, d7
   13a04:	vmov.f64	d9, d10
   13a08:	vmrs	APSR_nzcv, fpscr
   13a0c:	bls	13a78 <__assert_fail@plt+0x2614>
   13a10:	ldr	r0, [pc, #968]	; 13de0 <__assert_fail@plt+0x297c>
   13a14:	vstr	d11, [sp]
   13a18:	vmov	r2, r3, d9
   13a1c:	str	sl, [sp, #8]
   13a20:	add	r0, pc, r0
   13a24:	bl	12740 <__assert_fail@plt+0x12dc>
   13a28:	vmov.f64	d7, #36	; 0x41200000  10.0
   13a2c:	vcmpe.f64	d9, #0.0
   13a30:	vmrs	APSR_nzcv, fpscr
   13a34:	vnegmi.f64	d6, d9
   13a38:	vmovpl.f64	d6, d9
   13a3c:	vcmpe.f64	d6, d7
   13a40:	vmrs	APSR_nzcv, fpscr
   13a44:	vmulmi.f64	d9, d9, d7
   13a48:	movmi	fp, #1
   13a4c:	movpl	fp, #0
   13a50:	cmp	r4, #4
   13a54:	addls	pc, pc, r4, lsl #2
   13a58:	b	13ed4 <__assert_fail@plt+0x2a70>
   13a5c:	b	13b90 <__assert_fail@plt+0x272c>
   13a60:	b	13bd0 <__assert_fail@plt+0x276c>
   13a64:	b	13b84 <__assert_fail@plt+0x2720>
   13a68:	b	13b70 <__assert_fail@plt+0x270c>
   13a6c:	b	13a98 <__assert_fail@plt+0x2634>
   13a70:	vdiv.f64	d9, d9, d11
   13a74:	add	sl, sl, #1
   13a78:	vcmpe.f64	d9, #0.0
   13a7c:	vmrs	APSR_nzcv, fpscr
   13a80:	vnegmi.f64	d7, d9
   13a84:	vmovpl.f64	d7, d9
   13a88:	vcmpe.f64	d11, d7
   13a8c:	vmrs	APSR_nzcv, fpscr
   13a90:	bls	13a70 <__assert_fail@plt+0x260c>
   13a94:	b	13a10 <__assert_fail@plt+0x25ac>
   13a98:	vmov.f64	d7, #96	; 0x3f000000  0.5
   13a9c:	vcmpe.f64	d9, #0.0
   13aa0:	vmrs	APSR_nzcv, fpscr
   13aa4:	vsubmi.f64	d6, d9, d7
   13aa8:	vaddpl.f64	d6, d9, d7
   13aac:	vmov	r0, r1, d6
   13ab0:	bl	1a76c <close_stdout@@Base+0x5f90>
   13ab4:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13ab8:	vmov	d8, r0, r1
   13abc:	vcmpe.f64	d8, #0.0
   13ac0:	vmrs	APSR_nzcv, fpscr
   13ac4:	vnegmi.f64	d7, d8
   13ac8:	bmi	13ad0 <__assert_fail@plt+0x266c>
   13acc:	vmov.f64	d7, d8
   13ad0:	vcmpe.f64	d11, d7
   13ad4:	vmrs	APSR_nzcv, fpscr
   13ad8:	vdivls.f64	d8, d8, d11
   13adc:	addls	sl, sl, #1
   13ae0:	cmp	fp, #0
   13ae4:	vmovne.f64	d7, #36	; 0x41200000  10.0
   13ae8:	vdivne.f64	d8, d8, d7
   13aec:	vcmp.f64	d8, #0.0
   13af0:	vmrs	APSR_nzcv, fpscr
   13af4:	beq	13c6c <__assert_fail@plt+0x2808>
   13af8:	vmov.f64	d6, #36	; 0x41200000  10.0
   13afc:	vcmpe.f64	d8, #0.0
   13b00:	vmrs	APSR_nzcv, fpscr
   13b04:	vnegmi.f64	d7, d8
   13b08:	vmovpl.f64	d7, d8
   13b0c:	vcmpe.f64	d7, d6
   13b10:	vmrs	APSR_nzcv, fpscr
   13b14:	bpl	13c6c <__assert_fail@plt+0x2808>
   13b18:	cmp	sl, #0
   13b1c:	beq	13c6c <__assert_fail@plt+0x2808>
   13b20:	ldr	r0, [pc, #700]	; 13de4 <__assert_fail@plt+0x2980>
   13b24:	vstr	d11, [sp]
   13b28:	vmov	r2, r3, d8
   13b2c:	str	sl, [sp, #8]
   13b30:	add	r0, pc, r0
   13b34:	bl	12740 <__assert_fail@plt+0x12dc>
   13b38:	ldr	r2, [pc, #680]	; 13de8 <__assert_fail@plt+0x2984>
   13b3c:	add	r2, pc, r2
   13b40:	cmp	sl, #8
   13b44:	addls	pc, pc, sl, lsl #2
   13b48:	b	13c1c <__assert_fail@plt+0x27b8>
   13b4c:	b	13cf4 <__assert_fail@plt+0x2890>
   13b50:	b	13cbc <__assert_fail@plt+0x2858>
   13b54:	b	13d60 <__assert_fail@plt+0x28fc>
   13b58:	b	13d54 <__assert_fail@plt+0x28f0>
   13b5c:	b	13d48 <__assert_fail@plt+0x28e4>
   13b60:	b	13d24 <__assert_fail@plt+0x28c0>
   13b64:	b	13eb0 <__assert_fail@plt+0x2a4c>
   13b68:	b	13ea4 <__assert_fail@plt+0x2a40>
   13b6c:	b	13e98 <__assert_fail@plt+0x2a34>
   13b70:	vmov	r0, r1, d9
   13b74:	bl	1a76c <close_stdout@@Base+0x5f90>
   13b78:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13b7c:	vmov	d8, r0, r1
   13b80:	b	13abc <__assert_fail@plt+0x2658>
   13b84:	vcmpe.f64	d9, #0.0
   13b88:	vmrs	APSR_nzcv, fpscr
   13b8c:	bmi	13edc <__assert_fail@plt+0x2a78>
   13b90:	vmov	r0, r1, d9
   13b94:	bl	1a76c <close_stdout@@Base+0x5f90>
   13b98:	str	r0, [sp, #28]
   13b9c:	str	r1, [sp, #24]
   13ba0:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13ba4:	ldr	r2, [sp, #28]
   13ba8:	ldr	r3, [sp, #24]
   13bac:	vmov	d8, r0, r1
   13bb0:	vcmpe.f64	d9, d8
   13bb4:	vmrs	APSR_nzcv, fpscr
   13bb8:	ble	13abc <__assert_fail@plt+0x2658>
   13bbc:	adds	r0, r2, #1
   13bc0:	adc	r1, r3, #0
   13bc4:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13bc8:	vmov	d8, r0, r1
   13bcc:	b	13abc <__assert_fail@plt+0x2658>
   13bd0:	vneg.f64	d9, d9
   13bd4:	vmov	r0, r1, d9
   13bd8:	bl	1a76c <close_stdout@@Base+0x5f90>
   13bdc:	str	r0, [sp, #28]
   13be0:	str	r1, [sp, #24]
   13be4:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13be8:	ldr	r2, [sp, #28]
   13bec:	ldr	r3, [sp, #24]
   13bf0:	vmov	d7, r0, r1
   13bf4:	vcmpe.f64	d9, d7
   13bf8:	vmrs	APSR_nzcv, fpscr
   13bfc:	ble	13c08 <__assert_fail@plt+0x27a4>
   13c00:	adds	r2, r2, #1
   13c04:	adc	r3, r3, #0
   13c08:	rsbs	r0, r2, #0
   13c0c:	rsc	r1, r3, #0
   13c10:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13c14:	vmov	d8, r0, r1
   13c18:	b	13abc <__assert_fail@plt+0x2658>
   13c1c:	ldr	r3, [pc, #456]	; 13dec <__assert_fail@plt+0x2988>
   13c20:	add	r4, sp, #84	; 0x54
   13c24:	mov	r1, #128	; 0x80
   13c28:	str	r2, [sp]
   13c2c:	add	r3, pc, r3
   13c30:	vstr	d8, [sp, #8]
   13c34:	str	r3, [sp, #16]
   13c38:	mov	r0, r4
   13c3c:	mov	r3, r1
   13c40:	mov	r2, #1
   13c44:	bl	11458 <__snprintf_chk@plt>
   13c48:	cmp	r5, #4
   13c4c:	beq	13c90 <__assert_fail@plt+0x282c>
   13c50:	mov	r0, r4
   13c54:	bl	16618 <close_stdout@@Base+0x1e3c>
   13c58:	mov	r1, r0
   13c5c:	ldr	r0, [pc, #396]	; 13df0 <__assert_fail@plt+0x298c>
   13c60:	add	r0, pc, r0
   13c64:	bl	12740 <__assert_fail@plt+0x12dc>
   13c68:	b	136ec <__assert_fail@plt+0x2288>
   13c6c:	ldr	r0, [pc, #384]	; 13df4 <__assert_fail@plt+0x2990>
   13c70:	vstr	d11, [sp]
   13c74:	vmov	r2, r3, d8
   13c78:	str	sl, [sp, #8]
   13c7c:	add	r0, pc, r0
   13c80:	bl	12740 <__assert_fail@plt+0x12dc>
   13c84:	ldr	r2, [pc, #364]	; 13df8 <__assert_fail@plt+0x2994>
   13c88:	add	r2, pc, r2
   13c8c:	b	13b40 <__assert_fail@plt+0x26dc>
   13c90:	cmp	sl, #0
   13c94:	beq	13c50 <__assert_fail@plt+0x27ec>
   13c98:	mov	r0, r4
   13c9c:	bl	11338 <strlen@plt>
   13ca0:	ldr	r1, [pc, #340]	; 13dfc <__assert_fail@plt+0x2998>
   13ca4:	mov	r3, #128	; 0x80
   13ca8:	add	r1, pc, r1
   13cac:	rsb	r2, r0, #127	; 0x7f
   13cb0:	mov	r0, r4
   13cb4:	bl	11194 <__strncat_chk@plt>
   13cb8:	b	13c50 <__assert_fail@plt+0x27ec>
   13cbc:	add	r4, sp, #84	; 0x54
   13cc0:	ldr	r3, [pc, #312]	; 13e00 <__assert_fail@plt+0x299c>
   13cc4:	mov	r1, #128	; 0x80
   13cc8:	str	r2, [sp]
   13ccc:	mov	r0, r4
   13cd0:	add	r3, pc, r3
   13cd4:	vstr	d8, [sp, #8]
   13cd8:	str	r3, [sp, #16]
   13cdc:	mov	r3, r1
   13ce0:	mov	r2, #1
   13ce4:	bl	11458 <__snprintf_chk@plt>
   13ce8:	cmp	r5, #4
   13cec:	bne	13c50 <__assert_fail@plt+0x27ec>
   13cf0:	b	13c98 <__assert_fail@plt+0x2834>
   13cf4:	add	r4, sp, #84	; 0x54
   13cf8:	ldr	r3, [pc, #260]	; 13e04 <__assert_fail@plt+0x29a0>
   13cfc:	mov	r1, #128	; 0x80
   13d00:	str	r2, [sp]
   13d04:	add	r3, pc, r3
   13d08:	vstr	d8, [sp, #8]
   13d0c:	str	r3, [sp, #16]
   13d10:	mov	r0, r4
   13d14:	mov	r3, r1
   13d18:	mov	r2, #1
   13d1c:	bl	11458 <__snprintf_chk@plt>
   13d20:	b	13c50 <__assert_fail@plt+0x27ec>
   13d24:	ldr	r3, [pc, #220]	; 13e08 <__assert_fail@plt+0x29a4>
   13d28:	add	r3, pc, r3
   13d2c:	add	r4, sp, #84	; 0x54
   13d30:	mov	r1, #128	; 0x80
   13d34:	str	r2, [sp]
   13d38:	vstr	d8, [sp, #8]
   13d3c:	str	r3, [sp, #16]
   13d40:	mov	r0, r4
   13d44:	b	13cdc <__assert_fail@plt+0x2878>
   13d48:	ldr	r3, [pc, #188]	; 13e0c <__assert_fail@plt+0x29a8>
   13d4c:	add	r3, pc, r3
   13d50:	b	13d2c <__assert_fail@plt+0x28c8>
   13d54:	ldr	r3, [pc, #180]	; 13e10 <__assert_fail@plt+0x29ac>
   13d58:	add	r3, pc, r3
   13d5c:	b	13d2c <__assert_fail@plt+0x28c8>
   13d60:	ldr	r3, [pc, #172]	; 13e14 <__assert_fail@plt+0x29b0>
   13d64:	add	r3, pc, r3
   13d68:	b	13d2c <__assert_fail@plt+0x28c8>
   13d6c:	uxtb	r1, r2
   13d70:	bl	113e0 <__overflow@plt>
   13d74:	b	133f8 <__assert_fail@plt+0x1f94>
   13d78:	vmov.f64	d8, d6
   13d7c:	b	131dc <__assert_fail@plt+0x1d78>
   13d80:	ldr	r0, [pc, #144]	; 13e18 <__assert_fail@plt+0x29b4>
   13d84:	mov	r1, #1024	; 0x400
   13d88:	str	r2, [sp, #28]
   13d8c:	add	r5, r5, #2
   13d90:	add	r0, pc, r0
   13d94:	str	r1, [sp, #44]	; 0x2c
   13d98:	str	r5, [sp, #56]	; 0x38
   13d9c:	bl	12740 <__assert_fail@plt+0x12dc>
   13da0:	vldr	d6, [pc, #32]	; 13dc8 <__assert_fail@plt+0x2964>
   13da4:	ldr	r2, [sp, #28]
   13da8:	b	138f8 <__assert_fail@plt+0x2494>
   13dac:	vldr	d7, [pc, #36]	; 13dd8 <__assert_fail@plt+0x2974>
   13db0:	b	13648 <__assert_fail@plt+0x21e4>
   13db4:	nop	{0}
   13db8:			; <UNDEFINED> instruction: 0xffffffff
   13dbc:			; <UNDEFINED> instruction: 0xffefffff
   13dc0:	andeq	r0, r0, r0
   13dc4:	addmi	r4, pc, r0
   13dc8:	andeq	r0, r0, r0
   13dcc:	addsmi	r0, r0, r0
   13dd0:			; <UNDEFINED> instruction: 0xffffffff
   13dd4:	svcvc	0x00efffff
	...
   13de0:	andeq	r7, r0, r8, asr #24
   13de4:	andeq	r7, r0, r8, asr ip
   13de8:	andeq	r7, r0, r0, lsr r8
   13dec:	andeq	r7, r0, r0, ror #20
   13df0:	andeq	r7, r0, r4, lsr sl
   13df4:	andeq	r7, r0, ip, lsl #22
   13df8:	andeq	r7, r0, ip, ror #13
   13dfc:	andeq	r8, r0, ip, ror #29
   13e00:	andeq	r7, r0, r4, ror #21
   13e04:	andeq	r8, r0, r0, ror #20
   13e08:	andeq	r7, r0, r0, ror #12
   13e0c:	andeq	r7, r0, r0, asr #12
   13e10:	andeq	r7, r0, r8, lsr r6
   13e14:	andeq	r7, r0, r0, lsr r6
   13e18:	andeq	r7, r0, r8, asr r7
   13e1c:	andeq	sl, r1, r8, ror #5
   13e20:			; <UNDEFINED> instruction: 0x000077b4
   13e24:	andeq	r0, r0, ip, lsr r1
   13e28:	andeq	r7, r0, r0, ror #9
   13e2c:	ldrdeq	r7, [r0], -r8
   13e30:	ldrdeq	r7, [r0], -r0
   13e34:	vneg.f64	d8, d8
   13e38:	vmov	r0, r1, d8
   13e3c:	bl	1a76c <close_stdout@@Base+0x5f90>
   13e40:	str	r0, [sp, #28]
   13e44:	str	r1, [sp, #24]
   13e48:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13e4c:	ldr	r2, [sp, #28]
   13e50:	ldr	r3, [sp, #24]
   13e54:	vmov	d7, r0, r1
   13e58:	vcmpe.f64	d8, d7
   13e5c:	vmrs	APSR_nzcv, fpscr
   13e60:	ble	13818 <__assert_fail@plt+0x23b4>
   13e64:	b	13810 <__assert_fail@plt+0x23ac>
   13e68:	ldr	r3, [pc, #-84]	; 13e1c <__assert_fail@plt+0x29b8>
   13e6c:	ldr	r0, [pc, #-84]	; 13e20 <__assert_fail@plt+0x29bc>
   13e70:	add	r3, pc, r3
   13e74:	add	r0, pc, r0
   13e78:	ldr	r4, [r3, #32]
   13e7c:	bl	12740 <__assert_fail@plt+0x12dc>
   13e80:	b	139cc <__assert_fail@plt+0x2568>
   13e84:	ldr	r3, [pc, #-104]	; 13e24 <__assert_fail@plt+0x29c0>
   13e88:	mov	sl, r8
   13e8c:	ldr	r4, [r7, r3]
   13e90:	b	134ec <__assert_fail@plt+0x2088>
   13e94:	bl	11224 <__stack_chk_fail@plt>
   13e98:	ldr	r3, [pc, #-120]	; 13e28 <__assert_fail@plt+0x29c4>
   13e9c:	add	r3, pc, r3
   13ea0:	b	13d2c <__assert_fail@plt+0x28c8>
   13ea4:	ldr	r3, [pc, #-128]	; 13e2c <__assert_fail@plt+0x29c8>
   13ea8:	add	r3, pc, r3
   13eac:	b	13d2c <__assert_fail@plt+0x28c8>
   13eb0:	ldr	r3, [pc, #-136]	; 13e30 <__assert_fail@plt+0x29cc>
   13eb4:	add	r3, pc, r3
   13eb8:	b	13d2c <__assert_fail@plt+0x28c8>
   13ebc:	mov	r1, #10
   13ec0:	bl	113e0 <__overflow@plt>
   13ec4:	b	13584 <__assert_fail@plt+0x2120>
   13ec8:	uxtb	r1, r1
   13ecc:	bl	113e0 <__overflow@plt>
   13ed0:	b	13540 <__assert_fail@plt+0x20dc>
   13ed4:	vldr	d8, [pc, #52]	; 13f10 <__assert_fail@plt+0x2aac>
   13ed8:	b	13acc <__assert_fail@plt+0x2668>
   13edc:	vneg.f64	d9, d9
   13ee0:	vmov	r0, r1, d9
   13ee4:	bl	1a76c <close_stdout@@Base+0x5f90>
   13ee8:	str	r0, [sp, #28]
   13eec:	str	r1, [sp, #24]
   13ef0:	bl	1a6c0 <close_stdout@@Base+0x5ee4>
   13ef4:	ldr	r2, [sp, #28]
   13ef8:	ldr	r3, [sp, #24]
   13efc:	vmov	d6, r0, r1
   13f00:	vcmpe.f64	d9, d6
   13f04:	vmrs	APSR_nzcv, fpscr
   13f08:	ble	13c08 <__assert_fail@plt+0x27a4>
   13f0c:	b	13c00 <__assert_fail@plt+0x279c>
	...
   13f18:	push	{r4, r5, r6, lr}
   13f1c:	subs	r4, r0, #0
   13f20:	ldr	r5, [pc, #1128]	; 14390 <__assert_fail@plt+0x2f2c>
   13f24:	sub	sp, sp, #32
   13f28:	add	r5, pc, r5
   13f2c:	beq	13f74 <__assert_fail@plt+0x2b10>
   13f30:	ldr	r3, [pc, #1116]	; 14394 <__assert_fail@plt+0x2f30>
   13f34:	mov	r2, #5
   13f38:	ldr	r1, [pc, #1112]	; 14398 <__assert_fail@plt+0x2f34>
   13f3c:	mov	r0, #0
   13f40:	ldr	r3, [r5, r3]
   13f44:	add	r1, pc, r1
   13f48:	ldr	r6, [r3]
   13f4c:	bl	11218 <dcgettext@plt>
   13f50:	ldr	r3, [pc, #1092]	; 1439c <__assert_fail@plt+0x2f38>
   13f54:	mov	r1, #1
   13f58:	ldr	r3, [r5, r3]
   13f5c:	ldr	r3, [r3]
   13f60:	mov	r2, r0
   13f64:	mov	r0, r6
   13f68:	bl	113b0 <__fprintf_chk@plt>
   13f6c:	mov	r0, r4
   13f70:	bl	1132c <exit@plt>
   13f74:	ldr	r1, [pc, #1060]	; 143a0 <__assert_fail@plt+0x2f3c>
   13f78:	mov	r2, #5
   13f7c:	add	r1, pc, r1
   13f80:	bl	11218 <dcgettext@plt>
   13f84:	ldr	r3, [pc, #1040]	; 1439c <__assert_fail@plt+0x2f38>
   13f88:	ldr	r6, [r5, r3]
   13f8c:	ldr	r2, [r6]
   13f90:	mov	r1, r0
   13f94:	mov	r0, #1
   13f98:	bl	11398 <__printf_chk@plt>
   13f9c:	ldr	r1, [pc, #1024]	; 143a4 <__assert_fail@plt+0x2f40>
   13fa0:	mov	r2, #5
   13fa4:	mov	r0, r4
   13fa8:	add	r1, pc, r1
   13fac:	bl	11218 <dcgettext@plt>
   13fb0:	ldr	r3, [pc, #1008]	; 143a8 <__assert_fail@plt+0x2f44>
   13fb4:	ldr	r5, [r5, r3]
   13fb8:	ldr	r1, [r5]
   13fbc:	bl	11170 <fputs_unlocked@plt>
   13fc0:	ldr	r1, [pc, #996]	; 143ac <__assert_fail@plt+0x2f48>
   13fc4:	mov	r2, #5
   13fc8:	mov	r0, r4
   13fcc:	add	r1, pc, r1
   13fd0:	bl	11218 <dcgettext@plt>
   13fd4:	ldr	r1, [r5]
   13fd8:	bl	11170 <fputs_unlocked@plt>
   13fdc:	ldr	r1, [pc, #972]	; 143b0 <__assert_fail@plt+0x2f4c>
   13fe0:	mov	r2, #5
   13fe4:	mov	r0, r4
   13fe8:	add	r1, pc, r1
   13fec:	bl	11218 <dcgettext@plt>
   13ff0:	ldr	r1, [r5]
   13ff4:	bl	11170 <fputs_unlocked@plt>
   13ff8:	ldr	r1, [pc, #948]	; 143b4 <__assert_fail@plt+0x2f50>
   13ffc:	mov	r2, #5
   14000:	mov	r0, r4
   14004:	add	r1, pc, r1
   14008:	bl	11218 <dcgettext@plt>
   1400c:	ldr	r1, [r5]
   14010:	bl	11170 <fputs_unlocked@plt>
   14014:	ldr	r1, [pc, #924]	; 143b8 <__assert_fail@plt+0x2f54>
   14018:	mov	r2, #5
   1401c:	mov	r0, r4
   14020:	add	r1, pc, r1
   14024:	bl	11218 <dcgettext@plt>
   14028:	ldr	r1, [r5]
   1402c:	bl	11170 <fputs_unlocked@plt>
   14030:	ldr	r1, [pc, #900]	; 143bc <__assert_fail@plt+0x2f58>
   14034:	mov	r2, #5
   14038:	mov	r0, r4
   1403c:	add	r1, pc, r1
   14040:	bl	11218 <dcgettext@plt>
   14044:	ldr	r1, [r5]
   14048:	bl	11170 <fputs_unlocked@plt>
   1404c:	ldr	r1, [pc, #876]	; 143c0 <__assert_fail@plt+0x2f5c>
   14050:	mov	r2, #5
   14054:	mov	r0, r4
   14058:	add	r1, pc, r1
   1405c:	bl	11218 <dcgettext@plt>
   14060:	ldr	r1, [r5]
   14064:	bl	11170 <fputs_unlocked@plt>
   14068:	ldr	r1, [pc, #852]	; 143c4 <__assert_fail@plt+0x2f60>
   1406c:	mov	r2, #5
   14070:	mov	r0, r4
   14074:	add	r1, pc, r1
   14078:	bl	11218 <dcgettext@plt>
   1407c:	ldr	r1, [r5]
   14080:	bl	11170 <fputs_unlocked@plt>
   14084:	ldr	r1, [pc, #828]	; 143c8 <__assert_fail@plt+0x2f64>
   14088:	mov	r2, #5
   1408c:	mov	r0, r4
   14090:	add	r1, pc, r1
   14094:	bl	11218 <dcgettext@plt>
   14098:	ldr	r1, [r5]
   1409c:	bl	11170 <fputs_unlocked@plt>
   140a0:	ldr	r1, [pc, #804]	; 143cc <__assert_fail@plt+0x2f68>
   140a4:	mov	r2, #5
   140a8:	mov	r0, r4
   140ac:	add	r1, pc, r1
   140b0:	bl	11218 <dcgettext@plt>
   140b4:	ldr	r1, [r5]
   140b8:	bl	11170 <fputs_unlocked@plt>
   140bc:	ldr	r1, [pc, #780]	; 143d0 <__assert_fail@plt+0x2f6c>
   140c0:	mov	r2, #5
   140c4:	mov	r0, r4
   140c8:	add	r1, pc, r1
   140cc:	bl	11218 <dcgettext@plt>
   140d0:	ldr	r1, [r5]
   140d4:	bl	11170 <fputs_unlocked@plt>
   140d8:	ldr	r1, [pc, #756]	; 143d4 <__assert_fail@plt+0x2f70>
   140dc:	mov	r2, #5
   140e0:	mov	r0, r4
   140e4:	add	r1, pc, r1
   140e8:	bl	11218 <dcgettext@plt>
   140ec:	ldr	r1, [r5]
   140f0:	bl	11170 <fputs_unlocked@plt>
   140f4:	ldr	r1, [pc, #732]	; 143d8 <__assert_fail@plt+0x2f74>
   140f8:	mov	r2, #5
   140fc:	mov	r0, r4
   14100:	add	r1, pc, r1
   14104:	bl	11218 <dcgettext@plt>
   14108:	ldr	r1, [r5]
   1410c:	bl	11170 <fputs_unlocked@plt>
   14110:	ldr	r1, [pc, #708]	; 143dc <__assert_fail@plt+0x2f78>
   14114:	mov	r2, #5
   14118:	mov	r0, r4
   1411c:	add	r1, pc, r1
   14120:	bl	11218 <dcgettext@plt>
   14124:	ldr	r1, [r5]
   14128:	bl	11170 <fputs_unlocked@plt>
   1412c:	ldr	r1, [pc, #684]	; 143e0 <__assert_fail@plt+0x2f7c>
   14130:	mov	r2, #5
   14134:	mov	r0, r4
   14138:	add	r1, pc, r1
   1413c:	bl	11218 <dcgettext@plt>
   14140:	ldr	r1, [r5]
   14144:	bl	11170 <fputs_unlocked@plt>
   14148:	ldr	r1, [pc, #660]	; 143e4 <__assert_fail@plt+0x2f80>
   1414c:	mov	r2, #5
   14150:	mov	r0, r4
   14154:	add	r1, pc, r1
   14158:	bl	11218 <dcgettext@plt>
   1415c:	ldr	r1, [r5]
   14160:	bl	11170 <fputs_unlocked@plt>
   14164:	ldr	r1, [pc, #636]	; 143e8 <__assert_fail@plt+0x2f84>
   14168:	mov	r2, #5
   1416c:	mov	r0, r4
   14170:	add	r1, pc, r1
   14174:	bl	11218 <dcgettext@plt>
   14178:	ldr	r1, [r5]
   1417c:	bl	11170 <fputs_unlocked@plt>
   14180:	ldr	r1, [pc, #612]	; 143ec <__assert_fail@plt+0x2f88>
   14184:	mov	r2, #5
   14188:	mov	r0, r4
   1418c:	add	r1, pc, r1
   14190:	bl	11218 <dcgettext@plt>
   14194:	ldr	r1, [r5]
   14198:	bl	11170 <fputs_unlocked@plt>
   1419c:	ldr	r1, [pc, #588]	; 143f0 <__assert_fail@plt+0x2f8c>
   141a0:	mov	r2, #5
   141a4:	mov	r0, r4
   141a8:	add	r1, pc, r1
   141ac:	bl	11218 <dcgettext@plt>
   141b0:	ldr	r1, [r5]
   141b4:	bl	11170 <fputs_unlocked@plt>
   141b8:	ldr	r1, [pc, #564]	; 143f4 <__assert_fail@plt+0x2f90>
   141bc:	mov	r2, #5
   141c0:	mov	r0, r4
   141c4:	add	r1, pc, r1
   141c8:	bl	11218 <dcgettext@plt>
   141cc:	ldr	r1, [r5]
   141d0:	bl	11170 <fputs_unlocked@plt>
   141d4:	ldr	r1, [pc, #540]	; 143f8 <__assert_fail@plt+0x2f94>
   141d8:	mov	r2, #5
   141dc:	mov	r0, r4
   141e0:	add	r1, pc, r1
   141e4:	bl	11218 <dcgettext@plt>
   141e8:	ldr	r1, [r5]
   141ec:	bl	11170 <fputs_unlocked@plt>
   141f0:	ldr	r1, [pc, #516]	; 143fc <__assert_fail@plt+0x2f98>
   141f4:	mov	r2, #5
   141f8:	mov	r0, r4
   141fc:	add	r1, pc, r1
   14200:	bl	11218 <dcgettext@plt>
   14204:	ldr	r1, [r5]
   14208:	bl	11170 <fputs_unlocked@plt>
   1420c:	ldr	r1, [pc, #492]	; 14400 <__assert_fail@plt+0x2f9c>
   14210:	mov	r2, #5
   14214:	mov	r0, r4
   14218:	add	r1, pc, r1
   1421c:	bl	11218 <dcgettext@plt>
   14220:	ldr	r1, [r5]
   14224:	bl	11170 <fputs_unlocked@plt>
   14228:	ldr	r1, [pc, #468]	; 14404 <__assert_fail@plt+0x2fa0>
   1422c:	mov	r2, #5
   14230:	mov	r0, r4
   14234:	add	r1, pc, r1
   14238:	bl	11218 <dcgettext@plt>
   1423c:	ldr	r1, [r5]
   14240:	bl	11170 <fputs_unlocked@plt>
   14244:	ldr	r1, [pc, #444]	; 14408 <__assert_fail@plt+0x2fa4>
   14248:	mov	r2, #5
   1424c:	mov	r0, r4
   14250:	add	r1, pc, r1
   14254:	bl	11218 <dcgettext@plt>
   14258:	ldr	r1, [r5]
   1425c:	bl	11170 <fputs_unlocked@plt>
   14260:	ldr	r1, [pc, #420]	; 1440c <__assert_fail@plt+0x2fa8>
   14264:	mov	r2, #5
   14268:	mov	r0, r4
   1426c:	add	r1, pc, r1
   14270:	bl	11218 <dcgettext@plt>
   14274:	ldr	r2, [r6]
   14278:	mov	r1, r0
   1427c:	mov	r0, #1
   14280:	bl	11398 <__printf_chk@plt>
   14284:	ldr	r1, [pc, #388]	; 14410 <__assert_fail@plt+0x2fac>
   14288:	mov	r2, #5
   1428c:	mov	r0, r4
   14290:	add	r1, pc, r1
   14294:	bl	11218 <dcgettext@plt>
   14298:	ldr	ip, [r6]
   1429c:	mov	r2, ip
   142a0:	mov	r3, ip
   142a4:	str	ip, [sp]
   142a8:	str	ip, [sp, #4]
   142ac:	str	ip, [sp, #8]
   142b0:	str	ip, [sp, #12]
   142b4:	str	ip, [sp, #16]
   142b8:	str	ip, [sp, #20]
   142bc:	str	ip, [sp, #24]
   142c0:	mov	r1, r0
   142c4:	mov	r0, #1
   142c8:	bl	11398 <__printf_chk@plt>
   142cc:	ldr	r1, [pc, #320]	; 14414 <__assert_fail@plt+0x2fb0>
   142d0:	mov	r2, #5
   142d4:	mov	r0, r4
   142d8:	add	r1, pc, r1
   142dc:	bl	11218 <dcgettext@plt>
   142e0:	ldr	r2, [pc, #304]	; 14418 <__assert_fail@plt+0x2fb4>
   142e4:	ldr	r3, [pc, #304]	; 1441c <__assert_fail@plt+0x2fb8>
   142e8:	add	r2, pc, r2
   142ec:	add	r3, pc, r3
   142f0:	mov	r1, r0
   142f4:	mov	r0, #1
   142f8:	bl	11398 <__printf_chk@plt>
   142fc:	mov	r0, #5
   14300:	mov	r1, r4
   14304:	bl	113ec <setlocale@plt>
   14308:	cmp	r0, #0
   1430c:	beq	14328 <__assert_fail@plt+0x2ec4>
   14310:	ldr	r1, [pc, #264]	; 14420 <__assert_fail@plt+0x2fbc>
   14314:	mov	r2, #3
   14318:	add	r1, pc, r1
   1431c:	bl	11434 <strncmp@plt>
   14320:	cmp	r0, #0
   14324:	bne	1435c <__assert_fail@plt+0x2ef8>
   14328:	ldr	r1, [pc, #244]	; 14424 <__assert_fail@plt+0x2fc0>
   1432c:	mov	r2, #5
   14330:	mov	r0, #0
   14334:	add	r1, pc, r1
   14338:	bl	11218 <dcgettext@plt>
   1433c:	mov	r5, r0
   14340:	ldr	r0, [r6]
   14344:	bl	148f4 <close_stdout@@Base+0x118>
   14348:	mov	r1, r5
   1434c:	mov	r2, r0
   14350:	mov	r0, #1
   14354:	bl	11398 <__printf_chk@plt>
   14358:	b	13f6c <__assert_fail@plt+0x2b08>
   1435c:	ldr	r1, [pc, #196]	; 14428 <__assert_fail@plt+0x2fc4>
   14360:	mov	r2, #5
   14364:	mov	r0, r4
   14368:	add	r1, pc, r1
   1436c:	bl	11218 <dcgettext@plt>
   14370:	mov	r5, r0
   14374:	ldr	r0, [r6]
   14378:	bl	148f4 <close_stdout@@Base+0x118>
   1437c:	mov	r1, r5
   14380:	mov	r2, r0
   14384:	mov	r0, #1
   14388:	bl	11398 <__printf_chk@plt>
   1438c:	b	14328 <__assert_fail@plt+0x2ec4>
   14390:	ldrdeq	sl, [r1], -r0
   14394:	andeq	r0, r0, r4, lsr #2
   14398:	andeq	r7, r0, r4, ror r8
   1439c:	andeq	r0, r0, r8, asr #2
   143a0:	andeq	r7, r0, r4, ror #16
   143a4:	andeq	r7, r0, ip, asr r8
   143a8:	andeq	r0, r0, ip, lsr r1
   143ac:	andeq	r7, r0, r8, lsl #17
   143b0:			; <UNDEFINED> instruction: 0x000078b8
   143b4:	ldrdeq	r7, [r0], -r8
   143b8:	andeq	r7, r0, r4, lsl #18
   143bc:	andeq	r7, r0, r4, lsr r9
   143c0:	muleq	r0, r0, r9
   143c4:	andeq	r7, r0, ip, ror #19
   143c8:	andeq	r7, r0, r0, lsr #20
   143cc:	andeq	r7, r0, r0, lsr #21
   143d0:	andeq	r7, r0, ip, lsl #22
   143d4:	andeq	r7, r0, r4, ror fp
   143d8:	muleq	r0, ip, ip
   143dc:	andeq	r7, r0, ip, lsl sp
   143e0:	andeq	r7, r0, ip, ror sp
   143e4:	andeq	r7, r0, ip, lsr #27
   143e8:	ldrdeq	r7, [r0], -r8
   143ec:	andeq	r7, r0, ip, ror #27
   143f0:	andeq	r7, r0, r8, lsl #28
   143f4:	strdeq	r7, [r0], -ip
   143f8:	andeq	r7, r0, r8, lsr #28
   143fc:			; <UNDEFINED> instruction: 0x00007eb4
   14400:	andeq	r7, r0, r8, lsl pc
   14404:	andeq	r7, r0, ip, ror pc
   14408:	andeq	r7, r0, r0, ror #31
   1440c:	andeq	r8, r0, r8, asr #1
   14410:	andeq	r8, r0, r0, asr #4
   14414:			; <UNDEFINED> instruction: 0x000083b0
   14418:			; <UNDEFINED> instruction: 0x000083b8
   1441c:	andeq	r8, r0, r4, asr #7
   14420:	andeq	r8, r0, r0, asr #7
   14424:	strdeq	r8, [r0], -r0
   14428:	andeq	r8, r0, r4, ror r3
   1442c:	mov	r0, #1
   14430:	b	13f18 <__assert_fail@plt+0x2ab4>
   14434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14438:	sub	sp, sp, #12
   1443c:	mov	r7, r1
   14440:	mov	r6, r3
   14444:	str	r2, [sp]
   14448:	mov	sl, r0
   1444c:	bl	11338 <strlen@plt>
   14450:	ldr	fp, [r7]
   14454:	cmp	fp, #0
   14458:	mov	r8, r0
   1445c:	beq	14520 <__assert_fail@plt+0x30bc>
   14460:	mov	r3, #0
   14464:	ldr	r4, [sp]
   14468:	str	r3, [sp, #4]
   1446c:	mov	r5, r3
   14470:	mvn	r9, #0
   14474:	b	144a0 <__assert_fail@plt+0x303c>
   14478:	bl	1120c <memcmp@plt>
   1447c:	ldr	r3, [sp, #4]
   14480:	cmp	r0, #0
   14484:	movne	r3, #1
   14488:	str	r3, [sp, #4]
   1448c:	ldr	fp, [r7, #4]!
   14490:	add	r5, r5, #1
   14494:	add	r4, r4, r6
   14498:	cmp	fp, #0
   1449c:	beq	144fc <__assert_fail@plt+0x3098>
   144a0:	mov	r0, fp
   144a4:	mov	r1, sl
   144a8:	mov	r2, r8
   144ac:	bl	11434 <strncmp@plt>
   144b0:	cmp	r0, #0
   144b4:	mov	r0, fp
   144b8:	bne	1448c <__assert_fail@plt+0x3028>
   144bc:	bl	11338 <strlen@plt>
   144c0:	ldr	r3, [sp]
   144c4:	mov	r1, r4
   144c8:	mov	r2, r6
   144cc:	cmp	r0, r8
   144d0:	mla	r0, r6, r9, r3
   144d4:	beq	14514 <__assert_fail@plt+0x30b0>
   144d8:	cmn	r9, #1
   144dc:	moveq	r9, r5
   144e0:	beq	1448c <__assert_fail@plt+0x3028>
   144e4:	ldr	r3, [sp]
   144e8:	cmp	r3, #0
   144ec:	bne	14478 <__assert_fail@plt+0x3014>
   144f0:	mov	r3, #1
   144f4:	str	r3, [sp, #4]
   144f8:	b	1448c <__assert_fail@plt+0x3028>
   144fc:	ldr	r3, [sp, #4]
   14500:	cmp	r3, #0
   14504:	bne	14528 <__assert_fail@plt+0x30c4>
   14508:	mov	r0, r9
   1450c:	add	sp, sp, #12
   14510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14514:	mov	r0, r5
   14518:	add	sp, sp, #12
   1451c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14520:	mvn	r9, #0
   14524:	b	14508 <__assert_fail@plt+0x30a4>
   14528:	mvn	r0, #1
   1452c:	b	1450c <__assert_fail@plt+0x30a8>
   14530:	cmn	r2, #1
   14534:	push	{r4, r5, r6, lr}
   14538:	mov	r4, r0
   1453c:	sub	sp, sp, #8
   14540:	mov	r5, r1
   14544:	mov	r0, #0
   14548:	beq	145a0 <__assert_fail@plt+0x313c>
   1454c:	ldr	r1, [pc, #100]	; 145b8 <__assert_fail@plt+0x3154>
   14550:	mov	r2, #5
   14554:	add	r1, pc, r1
   14558:	bl	11218 <dcgettext@plt>
   1455c:	mov	r6, r0
   14560:	mov	r2, r5
   14564:	mov	r1, #6
   14568:	mov	r0, #0
   1456c:	bl	16310 <close_stdout@@Base+0x1b34>
   14570:	mov	r1, r4
   14574:	mov	r5, r0
   14578:	mov	r0, #1
   1457c:	bl	16610 <close_stdout@@Base+0x1e34>
   14580:	mov	r3, r5
   14584:	mov	r2, r6
   14588:	str	r0, [sp]
   1458c:	mov	r0, #0
   14590:	mov	r1, r0
   14594:	bl	112b4 <error@plt>
   14598:	add	sp, sp, #8
   1459c:	pop	{r4, r5, r6, pc}
   145a0:	ldr	r1, [pc, #20]	; 145bc <__assert_fail@plt+0x3158>
   145a4:	mov	r2, #5
   145a8:	add	r1, pc, r1
   145ac:	bl	11218 <dcgettext@plt>
   145b0:	mov	r6, r0
   145b4:	b	14560 <__assert_fail@plt+0x30fc>
   145b8:	andeq	r8, r0, r0, ror r6
   145bc:	andeq	r8, r0, r0, lsl #12
   145c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145c4:	mov	r4, r1
   145c8:	ldr	r1, [pc, #276]	; 146e4 <__assert_fail@plt+0x3280>
   145cc:	sub	sp, sp, #12
   145d0:	mov	r7, r0
   145d4:	mov	r6, r2
   145d8:	add	r1, pc, r1
   145dc:	mov	r2, #5
   145e0:	mov	r0, #0
   145e4:	bl	11218 <dcgettext@plt>
   145e8:	ldr	r3, [pc, #248]	; 146e8 <__assert_fail@plt+0x3284>
   145ec:	ldr	r2, [pc, #248]	; 146ec <__assert_fail@plt+0x3288>
   145f0:	add	r3, pc, r3
   145f4:	ldr	r9, [r3, r2]
   145f8:	ldr	r1, [r9]
   145fc:	bl	11170 <fputs_unlocked@plt>
   14600:	ldr	fp, [r7]
   14604:	cmp	fp, #0
   14608:	beq	146a8 <__assert_fail@plt+0x3244>
   1460c:	ldr	sl, [pc, #220]	; 146f0 <__assert_fail@plt+0x328c>
   14610:	mov	r8, #0
   14614:	ldr	r3, [pc, #216]	; 146f4 <__assert_fail@plt+0x3290>
   14618:	mov	r5, r8
   1461c:	add	sl, pc, sl
   14620:	add	r3, pc, r3
   14624:	str	r3, [sp, #4]
   14628:	b	14664 <__assert_fail@plt+0x3200>
   1462c:	mov	r0, fp
   14630:	ldr	fp, [r9]
   14634:	bl	16618 <close_stdout@@Base+0x1e3c>
   14638:	mov	r1, #1
   1463c:	mov	r2, sl
   14640:	mov	r8, r4
   14644:	mov	r3, r0
   14648:	mov	r0, fp
   1464c:	bl	113b0 <__fprintf_chk@plt>
   14650:	ldr	fp, [r7, #4]!
   14654:	add	r5, r5, #1
   14658:	add	r4, r4, r6
   1465c:	cmp	fp, #0
   14660:	beq	146a8 <__assert_fail@plt+0x3244>
   14664:	cmp	r5, #0
   14668:	mov	r1, r4
   1466c:	mov	r2, r6
   14670:	mov	r0, r8
   14674:	beq	1462c <__assert_fail@plt+0x31c8>
   14678:	bl	1120c <memcmp@plt>
   1467c:	cmp	r0, #0
   14680:	bne	1462c <__assert_fail@plt+0x31c8>
   14684:	mov	r0, fp
   14688:	ldr	fp, [r9]
   1468c:	bl	16618 <close_stdout@@Base+0x1e3c>
   14690:	mov	r1, #1
   14694:	ldr	r2, [sp, #4]
   14698:	mov	r3, r0
   1469c:	mov	r0, fp
   146a0:	bl	113b0 <__fprintf_chk@plt>
   146a4:	b	14650 <__assert_fail@plt+0x31ec>
   146a8:	ldr	r0, [r9]
   146ac:	ldr	r3, [r0, #20]
   146b0:	ldr	r2, [r0, #24]
   146b4:	cmp	r3, r2
   146b8:	bcs	146d4 <__assert_fail@plt+0x3270>
   146bc:	add	r1, r3, #1
   146c0:	mov	r2, #10
   146c4:	str	r1, [r0, #20]
   146c8:	strb	r2, [r3]
   146cc:	add	sp, sp, #12
   146d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d4:	mov	r1, #10
   146d8:	add	sp, sp, #12
   146dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146e0:	b	113e0 <__overflow@plt>
   146e4:	andeq	r8, r0, ip, lsl #12
   146e8:	andeq	r9, r1, r8, lsl #20
   146ec:	andeq	r0, r0, r4, lsr #2
   146f0:	andeq	r8, r0, r0, ror #11
   146f4:	andeq	r8, r0, r4, ror #11
   146f8:	push	{r4, r5, r6, r7, r8, lr}
   146fc:	mov	r7, r1
   14700:	ldr	r4, [sp, #24]
   14704:	mov	r1, r2
   14708:	mov	r6, r2
   1470c:	mov	r5, r3
   14710:	mov	r2, r3
   14714:	mov	r8, r0
   14718:	mov	r3, r4
   1471c:	mov	r0, r7
   14720:	bl	14434 <__assert_fail@plt+0x2fd0>
   14724:	subs	r2, r0, #0
   14728:	blt	14734 <__assert_fail@plt+0x32d0>
   1472c:	mov	r0, r2
   14730:	pop	{r4, r5, r6, r7, r8, pc}
   14734:	mov	r0, r8
   14738:	mov	r1, r7
   1473c:	bl	14530 <__assert_fail@plt+0x30cc>
   14740:	mov	r0, r6
   14744:	mov	r1, r5
   14748:	mov	r2, r4
   1474c:	bl	145c0 <__assert_fail@plt+0x315c>
   14750:	ldr	r3, [sp, #28]
   14754:	blx	r3
   14758:	mvn	r0, #0
   1475c:	pop	{r4, r5, r6, r7, r8, pc}
   14760:	push	{r4, r5, r6, r7, r8, lr}
   14764:	mov	r8, r0
   14768:	ldr	r5, [r1]
   1476c:	mov	r6, r3
   14770:	cmp	r5, #0
   14774:	beq	147ac <__assert_fail@plt+0x3348>
   14778:	mov	r4, r2
   1477c:	mov	r7, r1
   14780:	b	14790 <__assert_fail@plt+0x332c>
   14784:	ldr	r5, [r7, #4]!
   14788:	cmp	r5, #0
   1478c:	beq	147ac <__assert_fail@plt+0x3348>
   14790:	mov	r1, r4
   14794:	mov	r0, r8
   14798:	mov	r2, r6
   1479c:	add	r4, r4, r6
   147a0:	bl	1120c <memcmp@plt>
   147a4:	cmp	r0, #0
   147a8:	bne	14784 <__assert_fail@plt+0x3320>
   147ac:	mov	r0, r5
   147b0:	pop	{r4, r5, r6, r7, r8, pc}
   147b4:	ldr	r3, [pc, #8]	; 147c4 <__assert_fail@plt+0x3360>
   147b8:	add	r3, pc, r3
   147bc:	str	r0, [r3]
   147c0:	bx	lr
   147c4:	andeq	r9, r1, ip, ror #20
   147c8:	ldr	r3, [pc, #8]	; 147d8 <__assert_fail@plt+0x3374>
   147cc:	add	r3, pc, r3
   147d0:	strb	r0, [r3, #4]
   147d4:	bx	lr
   147d8:	andeq	r9, r1, r8, asr sl

000147dc <close_stdout@@Base>:
   147dc:	push	{r4, r5, r6, r7, lr}
   147e0:	sub	sp, sp, #12
   147e4:	ldr	r4, [pc, #228]	; 148d0 <close_stdout@@Base+0xf4>
   147e8:	ldr	r3, [pc, #228]	; 148d4 <close_stdout@@Base+0xf8>
   147ec:	add	r4, pc, r4
   147f0:	ldr	r3, [r4, r3]
   147f4:	ldr	r0, [r3]
   147f8:	bl	17cdc <close_stdout@@Base+0x3500>
   147fc:	cmp	r0, #0
   14800:	beq	14828 <close_stdout@@Base+0x4c>
   14804:	ldr	r3, [pc, #204]	; 148d8 <close_stdout@@Base+0xfc>
   14808:	add	r3, pc, r3
   1480c:	ldrb	r3, [r3, #4]
   14810:	cmp	r3, #0
   14814:	beq	14848 <close_stdout@@Base+0x6c>
   14818:	bl	1135c <__errno_location@plt>
   1481c:	ldr	r3, [r0]
   14820:	cmp	r3, #32
   14824:	bne	14848 <close_stdout@@Base+0x6c>
   14828:	ldr	r3, [pc, #172]	; 148dc <close_stdout@@Base+0x100>
   1482c:	ldr	r3, [r4, r3]
   14830:	ldr	r0, [r3]
   14834:	bl	17cdc <close_stdout@@Base+0x3500>
   14838:	cmp	r0, #0
   1483c:	bne	1489c <close_stdout@@Base+0xc0>
   14840:	add	sp, sp, #12
   14844:	pop	{r4, r5, r6, r7, pc}
   14848:	ldr	r1, [pc, #144]	; 148e0 <close_stdout@@Base+0x104>
   1484c:	mov	r0, #0
   14850:	mov	r2, #5
   14854:	add	r1, pc, r1
   14858:	bl	11218 <dcgettext@plt>
   1485c:	ldr	r3, [pc, #128]	; 148e4 <close_stdout@@Base+0x108>
   14860:	ldr	r5, [pc, r3]
   14864:	cmp	r5, #0
   14868:	mov	r6, r0
   1486c:	beq	148ac <close_stdout@@Base+0xd0>
   14870:	bl	1135c <__errno_location@plt>
   14874:	ldr	r7, [r0]
   14878:	mov	r0, r5
   1487c:	bl	164c4 <close_stdout@@Base+0x1ce8>
   14880:	ldr	r2, [pc, #96]	; 148e8 <close_stdout@@Base+0x10c>
   14884:	str	r6, [sp]
   14888:	mov	r1, r7
   1488c:	add	r2, pc, r2
   14890:	mov	r3, r0
   14894:	mov	r0, #0
   14898:	bl	112b4 <error@plt>
   1489c:	ldr	r3, [pc, #72]	; 148ec <close_stdout@@Base+0x110>
   148a0:	ldr	r3, [r4, r3]
   148a4:	ldr	r0, [r3]
   148a8:	bl	111dc <_exit@plt>
   148ac:	bl	1135c <__errno_location@plt>
   148b0:	ldr	r2, [pc, #56]	; 148f0 <close_stdout@@Base+0x114>
   148b4:	add	r2, pc, r2
   148b8:	mov	r3, r0
   148bc:	mov	r0, r5
   148c0:	ldr	r1, [r3]
   148c4:	mov	r3, r6
   148c8:	bl	112b4 <error@plt>
   148cc:	b	1489c <close_stdout@@Base+0xc0>
   148d0:	andeq	r9, r1, ip, lsl #16
   148d4:	andeq	r0, r0, ip, lsr r1
   148d8:	andeq	r9, r1, ip, lsl sl
   148dc:	andeq	r0, r0, r4, lsr #2
   148e0:			; <UNDEFINED> instruction: 0x000083b8
   148e4:	andeq	r9, r1, r4, asr #19
   148e8:	andeq	r6, r0, r4, ror #25
   148ec:	andeq	r0, r0, r0, asr #2
   148f0:	andeq	r6, r0, r0, lsr #20
   148f4:	ldrb	r3, [r0]
   148f8:	cmp	r3, #47	; 0x2f
   148fc:	bne	14918 <close_stdout@@Base+0x13c>
   14900:	add	r2, r0, #1
   14904:	mov	r0, r2
   14908:	add	r2, r2, #1
   1490c:	ldrb	r3, [r0]
   14910:	cmp	r3, #47	; 0x2f
   14914:	beq	14904 <close_stdout@@Base+0x128>
   14918:	cmp	r3, #0
   1491c:	bxeq	lr
   14920:	mov	r2, r0
   14924:	mov	r1, #0
   14928:	cmp	r3, #47	; 0x2f
   1492c:	moveq	r1, #1
   14930:	beq	14940 <close_stdout@@Base+0x164>
   14934:	cmp	r1, #0
   14938:	movne	r0, r2
   1493c:	movne	r1, #0
   14940:	ldrb	r3, [r2, #1]!
   14944:	cmp	r3, #0
   14948:	bne	14928 <close_stdout@@Base+0x14c>
   1494c:	bx	lr
   14950:	push	{r4, lr}
   14954:	mov	r4, r0
   14958:	bl	11338 <strlen@plt>
   1495c:	cmp	r0, #1
   14960:	popls	{r4, pc}
   14964:	sub	r3, r0, #1
   14968:	ldrb	r2, [r4, r3]
   1496c:	cmp	r2, #47	; 0x2f
   14970:	popne	{r4, pc}
   14974:	mov	r0, r3
   14978:	cmp	r0, #1
   1497c:	sub	r3, r3, #1
   14980:	beq	14994 <close_stdout@@Base+0x1b8>
   14984:	ldrb	r2, [r4, r3]
   14988:	cmp	r2, #47	; 0x2f
   1498c:	popne	{r4, pc}
   14990:	b	14974 <close_stdout@@Base+0x198>
   14994:	pop	{r4, pc}
   14998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1499c:	sub	sp, sp, #20
   149a0:	mov	r4, r1
   149a4:	mov	r7, r3
   149a8:	str	r2, [sp, #8]
   149ac:	str	r0, [sp, #4]
   149b0:	bl	11338 <strlen@plt>
   149b4:	ldr	ip, [sp, #60]	; 0x3c
   149b8:	ands	sl, ip, #2
   149bc:	mov	r9, r0
   149c0:	beq	14b4c <close_stdout@@Base+0x370>
   149c4:	mov	r6, #0
   149c8:	mov	r5, r9
   149cc:	mov	sl, #0
   149d0:	ldr	r2, [r7]
   149d4:	cmp	r5, r2
   149d8:	movhi	r9, r2
   149dc:	movhi	fp, #0
   149e0:	bls	14b0c <close_stdout@@Base+0x330>
   149e4:	ldr	ip, [sp, #56]	; 0x38
   149e8:	str	r2, [r7]
   149ec:	cmp	ip, #0
   149f0:	beq	14b30 <close_stdout@@Base+0x354>
   149f4:	cmp	ip, #1
   149f8:	moveq	r5, #0
   149fc:	bne	14b3c <close_stdout@@Base+0x360>
   14a00:	ldr	ip, [sp, #60]	; 0x3c
   14a04:	tst	ip, #4
   14a08:	movne	fp, #0
   14a0c:	tst	ip, #8
   14a10:	ldr	ip, [sp, #8]
   14a14:	movne	r5, #0
   14a18:	cmp	ip, #0
   14a1c:	beq	14ac0 <close_stdout@@Base+0x2e4>
   14a20:	cmp	fp, #0
   14a24:	sub	r8, ip, #1
   14a28:	add	r8, r4, r8
   14a2c:	sub	r1, fp, #1
   14a30:	beq	14a60 <close_stdout@@Base+0x284>
   14a34:	cmp	r4, r8
   14a38:	bcs	14a60 <close_stdout@@Base+0x284>
   14a3c:	mov	r2, #0
   14a40:	mov	r0, #32
   14a44:	b	14a50 <close_stdout@@Base+0x274>
   14a48:	cmp	r4, r8
   14a4c:	beq	14a60 <close_stdout@@Base+0x284>
   14a50:	cmp	r1, r2
   14a54:	strb	r0, [r4], #1
   14a58:	add	r2, r2, #1
   14a5c:	bne	14a48 <close_stdout@@Base+0x26c>
   14a60:	rsb	r2, r4, r8
   14a64:	ldr	r1, [sp, #4]
   14a68:	cmp	r2, r9
   14a6c:	movcs	r2, r9
   14a70:	mov	r7, #0
   14a74:	mov	r0, r4
   14a78:	strb	r7, [r4]
   14a7c:	bl	11308 <mempcpy@plt>
   14a80:	cmp	r5, r7
   14a84:	sub	r1, r5, #1
   14a88:	beq	14ab8 <close_stdout@@Base+0x2dc>
   14a8c:	cmp	r8, r0
   14a90:	bls	14ab8 <close_stdout@@Base+0x2dc>
   14a94:	mov	r2, r7
   14a98:	mov	ip, #32
   14a9c:	b	14aa8 <close_stdout@@Base+0x2cc>
   14aa0:	cmp	r0, r8
   14aa4:	beq	14ab8 <close_stdout@@Base+0x2dc>
   14aa8:	cmp	r1, r2
   14aac:	strb	ip, [r0], #1
   14ab0:	add	r2, r2, #1
   14ab4:	bne	14aa0 <close_stdout@@Base+0x2c4>
   14ab8:	mov	r2, #0
   14abc:	strb	r2, [r0]
   14ac0:	add	r3, fp, r9
   14ac4:	add	r5, r3, r5
   14ac8:	mov	r0, r6
   14acc:	bl	111d0 <free@plt>
   14ad0:	mov	r0, sl
   14ad4:	bl	111d0 <free@plt>
   14ad8:	mov	r0, r5
   14adc:	add	sp, sp, #20
   14ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae4:	mov	r1, r5
   14ae8:	mov	r0, r6
   14aec:	bl	113f8 <wcswidth@plt>
   14af0:	mov	r5, r0
   14af4:	ldr	r2, [r7]
   14af8:	cmp	r5, r2
   14afc:	addhi	ip, r9, #1
   14b00:	strhi	ip, [sp, #12]
   14b04:	bhi	14c28 <close_stdout@@Base+0x44c>
   14b08:	mov	sl, #0
   14b0c:	cmp	r5, r2
   14b10:	ldr	ip, [sp, #56]	; 0x38
   14b14:	rsbcc	fp, r5, r2
   14b18:	movcs	r2, r5
   14b1c:	movcc	r2, r5
   14b20:	movcs	fp, #0
   14b24:	cmp	ip, #0
   14b28:	str	r2, [r7]
   14b2c:	bne	149f4 <close_stdout@@Base+0x218>
   14b30:	mov	r5, fp
   14b34:	ldr	fp, [sp, #56]	; 0x38
   14b38:	b	14a00 <close_stdout@@Base+0x224>
   14b3c:	lsr	r5, fp, #1
   14b40:	and	fp, fp, #1
   14b44:	add	fp, fp, r5
   14b48:	b	14a00 <close_stdout@@Base+0x224>
   14b4c:	bl	11278 <__ctype_get_mb_cur_max@plt>
   14b50:	cmp	r0, #1
   14b54:	bls	149c4 <close_stdout@@Base+0x1e8>
   14b58:	mov	r0, sl
   14b5c:	ldr	r1, [sp, #4]
   14b60:	mov	r2, sl
   14b64:	bl	1141c <mbstowcs@plt>
   14b68:	cmn	r0, #1
   14b6c:	bne	14b8c <close_stdout@@Base+0x3b0>
   14b70:	ldr	ip, [sp, #60]	; 0x3c
   14b74:	tst	ip, #1
   14b78:	bne	14cf0 <close_stdout@@Base+0x514>
   14b7c:	mov	r6, #0
   14b80:	mvn	r5, #0
   14b84:	mov	sl, r6
   14b88:	b	14ac8 <close_stdout@@Base+0x2ec>
   14b8c:	add	r5, r0, #1
   14b90:	lsl	fp, r5, #2
   14b94:	mov	r0, fp
   14b98:	bl	112d8 <malloc@plt>
   14b9c:	subs	r6, r0, #0
   14ba0:	beq	14cfc <close_stdout@@Base+0x520>
   14ba4:	ldr	r1, [sp, #4]
   14ba8:	mov	r2, r5
   14bac:	bl	1141c <mbstowcs@plt>
   14bb0:	cmp	r0, #0
   14bb4:	beq	149c8 <close_stdout@@Base+0x1ec>
   14bb8:	add	fp, r6, fp
   14bbc:	str	sl, [fp, #-4]
   14bc0:	ldr	r8, [r6]
   14bc4:	cmp	r8, #0
   14bc8:	beq	14ae4 <close_stdout@@Base+0x308>
   14bcc:	add	fp, r6, #4
   14bd0:	mov	r0, r8
   14bd4:	bl	11254 <iswprint@plt>
   14bd8:	cmp	r0, #0
   14bdc:	movweq	r3, #65533	; 0xfffd
   14be0:	streq	r3, [fp, #-4]
   14be4:	ldr	r0, [fp], #4
   14be8:	moveq	sl, #1
   14bec:	cmp	r0, #0
   14bf0:	bne	14bd4 <close_stdout@@Base+0x3f8>
   14bf4:	mov	r1, r5
   14bf8:	mov	r8, r0
   14bfc:	mov	r0, r6
   14c00:	bl	113f8 <wcswidth@plt>
   14c04:	cmp	sl, #0
   14c08:	mov	r5, r0
   14c0c:	beq	14af4 <close_stdout@@Base+0x318>
   14c10:	mov	r0, r8
   14c14:	mov	r1, r6
   14c18:	mov	r2, r8
   14c1c:	bl	112a8 <wcstombs@plt>
   14c20:	add	r0, r0, #1
   14c24:	str	r0, [sp, #12]
   14c28:	ldr	r0, [sp, #12]
   14c2c:	bl	112d8 <malloc@plt>
   14c30:	subs	sl, r0, #0
   14c34:	beq	14cdc <close_stdout@@Base+0x500>
   14c38:	ldr	r0, [r6]
   14c3c:	ldr	r9, [r7]
   14c40:	cmp	r0, #0
   14c44:	beq	14d14 <close_stdout@@Base+0x538>
   14c48:	mov	r5, #0
   14c4c:	str	r4, [sp, #4]
   14c50:	add	fp, r6, #4
   14c54:	mov	r4, r5
   14c58:	mov	r5, r6
   14c5c:	b	14c70 <close_stdout@@Base+0x494>
   14c60:	ldr	r0, [r5, #4]!
   14c64:	mov	r4, r1
   14c68:	cmp	r0, #0
   14c6c:	beq	14ccc <close_stdout@@Base+0x4f0>
   14c70:	bl	111c4 <wcwidth@plt>
   14c74:	mov	r8, r5
   14c78:	mov	ip, fp
   14c7c:	add	fp, fp, #4
   14c80:	cmn	r0, #1
   14c84:	moveq	r0, #1
   14c88:	add	r1, r0, r4
   14c8c:	movweq	r3, #65533	; 0xfffd
   14c90:	streq	r3, [fp, #-8]
   14c94:	cmp	r9, r1
   14c98:	bcs	14c60 <close_stdout@@Base+0x484>
   14c9c:	mov	r5, r4
   14ca0:	ldr	r4, [sp, #4]
   14ca4:	mov	r9, r8
   14ca8:	mov	r3, #0
   14cac:	ldr	r2, [sp, #12]
   14cb0:	str	r3, [r9]
   14cb4:	mov	r0, sl
   14cb8:	mov	r1, r6
   14cbc:	str	sl, [sp, #4]
   14cc0:	bl	112a8 <wcstombs@plt>
   14cc4:	mov	r9, r0
   14cc8:	b	149d0 <close_stdout@@Base+0x1f4>
   14ccc:	ldr	r4, [sp, #4]
   14cd0:	mov	r5, r1
   14cd4:	mov	r9, ip
   14cd8:	b	14ca8 <close_stdout@@Base+0x4cc>
   14cdc:	ldr	ip, [sp, #60]	; 0x3c
   14ce0:	tst	ip, #1
   14ce4:	mvneq	r5, #0
   14ce8:	beq	14ac8 <close_stdout@@Base+0x2ec>
   14cec:	b	149d0 <close_stdout@@Base+0x1f4>
   14cf0:	mov	r6, sl
   14cf4:	mov	r5, r9
   14cf8:	b	149d0 <close_stdout@@Base+0x1f4>
   14cfc:	ldr	ip, [sp, #60]	; 0x3c
   14d00:	tst	ip, #1
   14d04:	beq	14b7c <close_stdout@@Base+0x3a0>
   14d08:	mov	r5, r9
   14d0c:	mov	sl, r6
   14d10:	b	149d0 <close_stdout@@Base+0x1f4>
   14d14:	mov	r5, r0
   14d18:	mov	r9, r6
   14d1c:	b	14ca8 <close_stdout@@Base+0x4cc>
   14d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d24:	sub	sp, sp, #12
   14d28:	ldr	r7, [r1]
   14d2c:	mov	r8, r0
   14d30:	mov	r5, r1
   14d34:	mov	sl, r2
   14d38:	mov	r9, r3
   14d3c:	mov	r6, #0
   14d40:	mov	r0, r7
   14d44:	add	r4, r0, #1
   14d48:	mov	r0, r6
   14d4c:	mov	r1, r4
   14d50:	bl	11230 <realloc@plt>
   14d54:	mov	r2, r4
   14d58:	mov	r3, r5
   14d5c:	subs	fp, r0, #0
   14d60:	mov	r0, r8
   14d64:	mov	r1, fp
   14d68:	beq	14d9c <close_stdout@@Base+0x5c0>
   14d6c:	str	r7, [r5]
   14d70:	mov	r6, fp
   14d74:	str	sl, [sp]
   14d78:	str	r9, [sp, #4]
   14d7c:	bl	14998 <close_stdout@@Base+0x1bc>
   14d80:	cmn	r0, #1
   14d84:	beq	14db0 <close_stdout@@Base+0x5d4>
   14d88:	cmp	r4, r0
   14d8c:	bls	14d44 <close_stdout@@Base+0x568>
   14d90:	mov	r0, fp
   14d94:	add	sp, sp, #12
   14d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d9c:	mov	r0, r6
   14da0:	bl	111d0 <free@plt>
   14da4:	mov	r0, fp
   14da8:	add	sp, sp, #12
   14dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db0:	mov	r0, fp
   14db4:	mov	fp, #0
   14db8:	bl	111d0 <free@plt>
   14dbc:	mov	r0, fp
   14dc0:	add	sp, sp, #12
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dc8:	push	{r3, r4, r5, r6, r7, lr}
   14dcc:	subs	r4, r0, #0
   14dd0:	ldr	r5, [pc, #172]	; 14e84 <close_stdout@@Base+0x6a8>
   14dd4:	add	r5, pc, r5
   14dd8:	beq	14e60 <close_stdout@@Base+0x684>
   14ddc:	mov	r1, #47	; 0x2f
   14de0:	bl	11404 <strrchr@plt>
   14de4:	subs	r6, r0, #0
   14de8:	beq	14e44 <close_stdout@@Base+0x668>
   14dec:	add	r7, r6, #1
   14df0:	rsb	r3, r4, r7
   14df4:	cmp	r3, #6
   14df8:	ble	14e44 <close_stdout@@Base+0x668>
   14dfc:	ldr	r1, [pc, #132]	; 14e88 <close_stdout@@Base+0x6ac>
   14e00:	sub	r0, r6, #6
   14e04:	mov	r2, #7
   14e08:	add	r1, pc, r1
   14e0c:	bl	11434 <strncmp@plt>
   14e10:	cmp	r0, #0
   14e14:	bne	14e44 <close_stdout@@Base+0x668>
   14e18:	ldr	r1, [pc, #108]	; 14e8c <close_stdout@@Base+0x6b0>
   14e1c:	mov	r0, r7
   14e20:	mov	r2, #3
   14e24:	add	r1, pc, r1
   14e28:	bl	11434 <strncmp@plt>
   14e2c:	cmp	r0, #0
   14e30:	movne	r4, r7
   14e34:	ldreq	r3, [pc, #84]	; 14e90 <close_stdout@@Base+0x6b4>
   14e38:	addeq	r4, r6, #4
   14e3c:	ldreq	r3, [r5, r3]
   14e40:	streq	r4, [r3]
   14e44:	ldr	r2, [pc, #72]	; 14e94 <close_stdout@@Base+0x6b8>
   14e48:	ldr	r3, [pc, #72]	; 14e98 <close_stdout@@Base+0x6bc>
   14e4c:	ldr	r2, [r5, r2]
   14e50:	str	r4, [r2]
   14e54:	ldr	r3, [r5, r3]
   14e58:	str	r4, [r3]
   14e5c:	pop	{r3, r4, r5, r6, r7, pc}
   14e60:	ldr	r3, [pc, #52]	; 14e9c <close_stdout@@Base+0x6c0>
   14e64:	mov	r1, #1
   14e68:	ldr	r0, [pc, #48]	; 14ea0 <close_stdout@@Base+0x6c4>
   14e6c:	mov	r2, #55	; 0x37
   14e70:	ldr	r3, [r5, r3]
   14e74:	add	r0, pc, r0
   14e78:	ldr	r3, [r3]
   14e7c:	bl	11260 <fwrite@plt>
   14e80:	bl	11440 <abort@plt>
   14e84:	andeq	r9, r1, r4, lsr #4
   14e88:	andeq	r7, r0, r8, asr #28
   14e8c:	andeq	r7, r0, r4, lsr lr
   14e90:	andeq	r0, r0, r0, asr r1
   14e94:	andeq	r0, r0, r8, asr #2
   14e98:	andeq	r0, r0, r4, asr #2
   14e9c:	andeq	r0, r0, r4, lsr #2
   14ea0:	andeq	r7, r0, r4, lsr #27
   14ea4:	push	{r3, lr}
   14ea8:	mov	r3, r0
   14eac:	mov	r2, #0
   14eb0:	cmp	r1, #8
   14eb4:	str	r2, [r3], #4
   14eb8:	add	r3, r3, #4
   14ebc:	str	r2, [r0, #4]
   14ec0:	str	r2, [r3], #4
   14ec4:	str	r2, [r3], #4
   14ec8:	str	r2, [r3], #4
   14ecc:	str	r2, [r3], #4
   14ed0:	str	r2, [r3], #4
   14ed4:	str	r2, [r3], #4
   14ed8:	str	r2, [r3], #4
   14edc:	str	r2, [r3], #4
   14ee0:	str	r2, [r3], #4
   14ee4:	str	r2, [r3]
   14ee8:	beq	14ef4 <close_stdout@@Base+0x718>
   14eec:	str	r1, [r0]
   14ef0:	pop	{r3, pc}
   14ef4:	bl	11440 <abort@plt>
   14ef8:	push	{r4, r5, r6, lr}
   14efc:	mov	r4, r0
   14f00:	mov	r6, r1
   14f04:	mov	r0, #0
   14f08:	mov	r1, r4
   14f0c:	mov	r2, #5
   14f10:	bl	11218 <dcgettext@plt>
   14f14:	cmp	r0, r4
   14f18:	mov	r5, r0
   14f1c:	beq	14f24 <close_stdout@@Base+0x748>
   14f20:	pop	{r4, r5, r6, pc}
   14f24:	bl	17d5c <close_stdout@@Base+0x3580>
   14f28:	ldrb	r3, [r0]
   14f2c:	bic	r3, r3, #32
   14f30:	cmp	r3, #85	; 0x55
   14f34:	bne	14fa8 <close_stdout@@Base+0x7cc>
   14f38:	ldrb	r3, [r0, #1]
   14f3c:	bic	r3, r3, #32
   14f40:	cmp	r3, #84	; 0x54
   14f44:	bne	14f94 <close_stdout@@Base+0x7b8>
   14f48:	ldrb	r3, [r0, #2]
   14f4c:	bic	r3, r3, #32
   14f50:	cmp	r3, #70	; 0x46
   14f54:	bne	14f94 <close_stdout@@Base+0x7b8>
   14f58:	ldrb	r3, [r0, #3]
   14f5c:	cmp	r3, #45	; 0x2d
   14f60:	bne	14f94 <close_stdout@@Base+0x7b8>
   14f64:	ldrb	r3, [r0, #4]
   14f68:	cmp	r3, #56	; 0x38
   14f6c:	bne	14f94 <close_stdout@@Base+0x7b8>
   14f70:	ldrb	r3, [r0, #5]
   14f74:	cmp	r3, #0
   14f78:	bne	14f94 <close_stdout@@Base+0x7b8>
   14f7c:	ldrb	r3, [r5]
   14f80:	cmp	r3, #96	; 0x60
   14f84:	beq	15020 <close_stdout@@Base+0x844>
   14f88:	ldr	r0, [pc, #180]	; 15044 <close_stdout@@Base+0x868>
   14f8c:	add	r0, pc, r0
   14f90:	pop	{r4, r5, r6, pc}
   14f94:	cmp	r6, #7
   14f98:	beq	1502c <close_stdout@@Base+0x850>
   14f9c:	ldr	r0, [pc, #164]	; 15048 <close_stdout@@Base+0x86c>
   14fa0:	add	r0, pc, r0
   14fa4:	pop	{r4, r5, r6, pc}
   14fa8:	cmp	r3, #71	; 0x47
   14fac:	bne	14f94 <close_stdout@@Base+0x7b8>
   14fb0:	ldrb	r3, [r0, #1]
   14fb4:	bic	r3, r3, #32
   14fb8:	cmp	r3, #66	; 0x42
   14fbc:	bne	14f94 <close_stdout@@Base+0x7b8>
   14fc0:	ldrb	r3, [r0, #2]
   14fc4:	cmp	r3, #49	; 0x31
   14fc8:	bne	14f94 <close_stdout@@Base+0x7b8>
   14fcc:	ldrb	r3, [r0, #3]
   14fd0:	cmp	r3, #56	; 0x38
   14fd4:	bne	14f94 <close_stdout@@Base+0x7b8>
   14fd8:	ldrb	r3, [r0, #4]
   14fdc:	cmp	r3, #48	; 0x30
   14fe0:	bne	14f94 <close_stdout@@Base+0x7b8>
   14fe4:	ldrb	r3, [r0, #5]
   14fe8:	cmp	r3, #51	; 0x33
   14fec:	bne	14f94 <close_stdout@@Base+0x7b8>
   14ff0:	ldrb	r3, [r0, #6]
   14ff4:	cmp	r3, #48	; 0x30
   14ff8:	bne	14f94 <close_stdout@@Base+0x7b8>
   14ffc:	ldrb	r3, [r0, #7]
   15000:	cmp	r3, #0
   15004:	bne	14f94 <close_stdout@@Base+0x7b8>
   15008:	ldrb	r3, [r5]
   1500c:	cmp	r3, #96	; 0x60
   15010:	beq	15038 <close_stdout@@Base+0x85c>
   15014:	ldr	r0, [pc, #48]	; 1504c <close_stdout@@Base+0x870>
   15018:	add	r0, pc, r0
   1501c:	pop	{r4, r5, r6, pc}
   15020:	ldr	r0, [pc, #40]	; 15050 <close_stdout@@Base+0x874>
   15024:	add	r0, pc, r0
   15028:	pop	{r4, r5, r6, pc}
   1502c:	ldr	r0, [pc, #32]	; 15054 <close_stdout@@Base+0x878>
   15030:	add	r0, pc, r0
   15034:	pop	{r4, r5, r6, pc}
   15038:	ldr	r0, [pc, #24]	; 15058 <close_stdout@@Base+0x87c>
   1503c:	add	r0, pc, r0
   15040:	pop	{r4, r5, r6, pc}
   15044:	strdeq	r7, [r0], -r0
   15048:	andeq	r7, r0, r4, ror #25
   1504c:	andeq	r7, r0, r8, ror #24
   15050:	andeq	r7, r0, ip, ror #24
   15054:	andeq	r7, r0, r8, asr ip
   15058:	andeq	r7, r0, r0, asr ip
   1505c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15060:	sub	sp, sp, #124	; 0x7c
   15064:	ldr	ip, [pc, #3304]	; 15d54 <close_stdout@@Base+0x1578>
   15068:	mov	sl, r1
   1506c:	str	r0, [sp, #40]	; 0x28
   15070:	mov	r8, r3
   15074:	ldr	r0, [pc, #3292]	; 15d58 <close_stdout@@Base+0x157c>
   15078:	add	ip, pc, ip
   1507c:	str	r2, [sp, #32]
   15080:	ldr	r1, [sp, #164]	; 0xa4
   15084:	mov	r3, ip
   15088:	ldr	r0, [ip, r0]
   1508c:	ldr	r2, [sp, #172]	; 0xac
   15090:	ubfx	r1, r1, #1, #1
   15094:	str	r1, [sp, #36]	; 0x24
   15098:	str	r0, [sp, #56]	; 0x38
   1509c:	ldr	r0, [sp, #168]	; 0xa8
   150a0:	ldr	r1, [sp, #176]	; 0xb0
   150a4:	str	r2, [sp, #72]	; 0x48
   150a8:	str	r0, [sp, #48]	; 0x30
   150ac:	ldr	r0, [sp, #56]	; 0x38
   150b0:	str	r1, [sp, #68]	; 0x44
   150b4:	ldr	r3, [r0]
   150b8:	str	r3, [sp, #116]	; 0x74
   150bc:	bl	11278 <__ctype_get_mb_cur_max@plt>
   150c0:	ldr	r2, [sp, #160]	; 0xa0
   150c4:	str	r0, [sp, #64]	; 0x40
   150c8:	cmp	r2, #8
   150cc:	addls	pc, pc, r2, lsl #2
   150d0:	b	15c30 <close_stdout@@Base+0x1454>
   150d4:	b	150f8 <close_stdout@@Base+0x91c>
   150d8:	b	15948 <close_stdout@@Base+0x116c>
   150dc:	b	15978 <close_stdout@@Base+0x119c>
   150e0:	b	15828 <close_stdout@@Base+0x104c>
   150e4:	b	15868 <close_stdout@@Base+0x108c>
   150e8:	b	15894 <close_stdout@@Base+0x10b8>
   150ec:	b	158b4 <close_stdout@@Base+0x10d8>
   150f0:	b	158b4 <close_stdout@@Base+0x10d8>
   150f4:	b	158b4 <close_stdout@@Base+0x10d8>
   150f8:	mov	r2, #0
   150fc:	str	r2, [sp, #36]	; 0x24
   15100:	mov	r9, r2
   15104:	str	r2, [sp, #24]
   15108:	str	r2, [sp, #28]
   1510c:	str	r2, [sp, #52]	; 0x34
   15110:	ldr	r0, [sp, #36]	; 0x24
   15114:	mov	fp, #0
   15118:	ldr	r1, [sp, #24]
   1511c:	eor	r2, r0, #1
   15120:	eor	r3, r1, #1
   15124:	and	r3, r2, r3
   15128:	and	r2, r1, r0
   1512c:	str	r3, [sp, #44]	; 0x2c
   15130:	str	r2, [sp, #76]	; 0x4c
   15134:	cmn	r8, #1
   15138:	beq	154b8 <close_stdout@@Base+0xcdc>
   1513c:	subs	r3, fp, r8
   15140:	movne	r3, #1
   15144:	cmp	r3, #0
   15148:	beq	154d0 <close_stdout@@Base+0xcf4>
   1514c:	ldr	r3, [sp, #28]
   15150:	ldr	r0, [sp, #24]
   15154:	adds	r7, r3, #0
   15158:	movne	r7, #1
   1515c:	ands	r6, r7, r0
   15160:	bne	159bc <close_stdout@@Base+0x11e0>
   15164:	ldr	r1, [sp, #32]
   15168:	add	r5, r1, fp
   1516c:	ldrb	r4, [r5]
   15170:	cmp	r4, #126	; 0x7e
   15174:	addls	pc, pc, r4, lsl #2
   15178:	b	1573c <close_stdout@@Base+0xf60>
   1517c:	b	15648 <close_stdout@@Base+0xe6c>
   15180:	b	1573c <close_stdout@@Base+0xf60>
   15184:	b	1573c <close_stdout@@Base+0xf60>
   15188:	b	1573c <close_stdout@@Base+0xf60>
   1518c:	b	1573c <close_stdout@@Base+0xf60>
   15190:	b	1573c <close_stdout@@Base+0xf60>
   15194:	b	1573c <close_stdout@@Base+0xf60>
   15198:	b	15630 <close_stdout@@Base+0xe54>
   1519c:	b	15618 <close_stdout@@Base+0xe3c>
   151a0:	b	15640 <close_stdout@@Base+0xe64>
   151a4:	b	15638 <close_stdout@@Base+0xe5c>
   151a8:	b	15628 <close_stdout@@Base+0xe4c>
   151ac:	b	15620 <close_stdout@@Base+0xe44>
   151b0:	b	155e4 <close_stdout@@Base+0xe08>
   151b4:	b	1573c <close_stdout@@Base+0xf60>
   151b8:	b	1573c <close_stdout@@Base+0xf60>
   151bc:	b	1573c <close_stdout@@Base+0xf60>
   151c0:	b	1573c <close_stdout@@Base+0xf60>
   151c4:	b	1573c <close_stdout@@Base+0xf60>
   151c8:	b	1573c <close_stdout@@Base+0xf60>
   151cc:	b	1573c <close_stdout@@Base+0xf60>
   151d0:	b	1573c <close_stdout@@Base+0xf60>
   151d4:	b	1573c <close_stdout@@Base+0xf60>
   151d8:	b	1573c <close_stdout@@Base+0xf60>
   151dc:	b	1573c <close_stdout@@Base+0xf60>
   151e0:	b	1573c <close_stdout@@Base+0xf60>
   151e4:	b	1573c <close_stdout@@Base+0xf60>
   151e8:	b	1573c <close_stdout@@Base+0xf60>
   151ec:	b	1573c <close_stdout@@Base+0xf60>
   151f0:	b	1573c <close_stdout@@Base+0xf60>
   151f4:	b	1573c <close_stdout@@Base+0xf60>
   151f8:	b	1573c <close_stdout@@Base+0xf60>
   151fc:	b	15570 <close_stdout@@Base+0xd94>
   15200:	b	15570 <close_stdout@@Base+0xd94>
   15204:	b	15570 <close_stdout@@Base+0xd94>
   15208:	b	15568 <close_stdout@@Base+0xd8c>
   1520c:	b	15570 <close_stdout@@Base+0xd94>
   15210:	b	15444 <close_stdout@@Base+0xc68>
   15214:	b	15570 <close_stdout@@Base+0xd94>
   15218:	b	156e4 <close_stdout@@Base+0xf08>
   1521c:	b	15570 <close_stdout@@Base+0xd94>
   15220:	b	15570 <close_stdout@@Base+0xd94>
   15224:	b	15570 <close_stdout@@Base+0xd94>
   15228:	b	15444 <close_stdout@@Base+0xc68>
   1522c:	b	15444 <close_stdout@@Base+0xc68>
   15230:	b	15444 <close_stdout@@Base+0xc68>
   15234:	b	15444 <close_stdout@@Base+0xc68>
   15238:	b	15444 <close_stdout@@Base+0xc68>
   1523c:	b	15444 <close_stdout@@Base+0xc68>
   15240:	b	15444 <close_stdout@@Base+0xc68>
   15244:	b	15444 <close_stdout@@Base+0xc68>
   15248:	b	15444 <close_stdout@@Base+0xc68>
   1524c:	b	15444 <close_stdout@@Base+0xc68>
   15250:	b	15444 <close_stdout@@Base+0xc68>
   15254:	b	15444 <close_stdout@@Base+0xc68>
   15258:	b	15444 <close_stdout@@Base+0xc68>
   1525c:	b	15444 <close_stdout@@Base+0xc68>
   15260:	b	15444 <close_stdout@@Base+0xc68>
   15264:	b	15444 <close_stdout@@Base+0xc68>
   15268:	b	15570 <close_stdout@@Base+0xd94>
   1526c:	b	15570 <close_stdout@@Base+0xd94>
   15270:	b	15570 <close_stdout@@Base+0xd94>
   15274:	b	15570 <close_stdout@@Base+0xd94>
   15278:	b	15378 <close_stdout@@Base+0xb9c>
   1527c:	b	1573c <close_stdout@@Base+0xf60>
   15280:	b	15444 <close_stdout@@Base+0xc68>
   15284:	b	15444 <close_stdout@@Base+0xc68>
   15288:	b	15444 <close_stdout@@Base+0xc68>
   1528c:	b	15444 <close_stdout@@Base+0xc68>
   15290:	b	15444 <close_stdout@@Base+0xc68>
   15294:	b	15444 <close_stdout@@Base+0xc68>
   15298:	b	15444 <close_stdout@@Base+0xc68>
   1529c:	b	15444 <close_stdout@@Base+0xc68>
   152a0:	b	15444 <close_stdout@@Base+0xc68>
   152a4:	b	15444 <close_stdout@@Base+0xc68>
   152a8:	b	15444 <close_stdout@@Base+0xc68>
   152ac:	b	15444 <close_stdout@@Base+0xc68>
   152b0:	b	15444 <close_stdout@@Base+0xc68>
   152b4:	b	15444 <close_stdout@@Base+0xc68>
   152b8:	b	15444 <close_stdout@@Base+0xc68>
   152bc:	b	15444 <close_stdout@@Base+0xc68>
   152c0:	b	15444 <close_stdout@@Base+0xc68>
   152c4:	b	15444 <close_stdout@@Base+0xc68>
   152c8:	b	15444 <close_stdout@@Base+0xc68>
   152cc:	b	15444 <close_stdout@@Base+0xc68>
   152d0:	b	15444 <close_stdout@@Base+0xc68>
   152d4:	b	15444 <close_stdout@@Base+0xc68>
   152d8:	b	15444 <close_stdout@@Base+0xc68>
   152dc:	b	15444 <close_stdout@@Base+0xc68>
   152e0:	b	15444 <close_stdout@@Base+0xc68>
   152e4:	b	15444 <close_stdout@@Base+0xc68>
   152e8:	b	15570 <close_stdout@@Base+0xd94>
   152ec:	b	156c8 <close_stdout@@Base+0xeec>
   152f0:	b	15444 <close_stdout@@Base+0xc68>
   152f4:	b	15570 <close_stdout@@Base+0xd94>
   152f8:	b	15444 <close_stdout@@Base+0xc68>
   152fc:	b	15570 <close_stdout@@Base+0xd94>
   15300:	b	15444 <close_stdout@@Base+0xc68>
   15304:	b	15444 <close_stdout@@Base+0xc68>
   15308:	b	15444 <close_stdout@@Base+0xc68>
   1530c:	b	15444 <close_stdout@@Base+0xc68>
   15310:	b	15444 <close_stdout@@Base+0xc68>
   15314:	b	15444 <close_stdout@@Base+0xc68>
   15318:	b	15444 <close_stdout@@Base+0xc68>
   1531c:	b	15444 <close_stdout@@Base+0xc68>
   15320:	b	15444 <close_stdout@@Base+0xc68>
   15324:	b	15444 <close_stdout@@Base+0xc68>
   15328:	b	15444 <close_stdout@@Base+0xc68>
   1532c:	b	15444 <close_stdout@@Base+0xc68>
   15330:	b	15444 <close_stdout@@Base+0xc68>
   15334:	b	15444 <close_stdout@@Base+0xc68>
   15338:	b	15444 <close_stdout@@Base+0xc68>
   1533c:	b	15444 <close_stdout@@Base+0xc68>
   15340:	b	15444 <close_stdout@@Base+0xc68>
   15344:	b	15444 <close_stdout@@Base+0xc68>
   15348:	b	15444 <close_stdout@@Base+0xc68>
   1534c:	b	15444 <close_stdout@@Base+0xc68>
   15350:	b	15444 <close_stdout@@Base+0xc68>
   15354:	b	15444 <close_stdout@@Base+0xc68>
   15358:	b	15444 <close_stdout@@Base+0xc68>
   1535c:	b	15444 <close_stdout@@Base+0xc68>
   15360:	b	15444 <close_stdout@@Base+0xc68>
   15364:	b	15444 <close_stdout@@Base+0xc68>
   15368:	b	15550 <close_stdout@@Base+0xd74>
   1536c:	b	15570 <close_stdout@@Base+0xd94>
   15370:	b	15550 <close_stdout@@Base+0xd74>
   15374:	b	15568 <close_stdout@@Base+0xd8c>
   15378:	ldr	r3, [sp, #160]	; 0xa0
   1537c:	cmp	r3, #2
   15380:	beq	15c0c <close_stdout@@Base+0x1430>
   15384:	cmp	r3, #3
   15388:	bne	15444 <close_stdout@@Base+0xc68>
   1538c:	ldr	r1, [sp, #164]	; 0xa4
   15390:	tst	r1, #4
   15394:	beq	15444 <close_stdout@@Base+0xc68>
   15398:	add	r3, fp, #2
   1539c:	cmp	r8, r3
   153a0:	bls	15444 <close_stdout@@Base+0xc68>
   153a4:	ldrb	r2, [r5, #1]
   153a8:	mov	r1, #1
   153ac:	cmp	r2, #63	; 0x3f
   153b0:	bne	15444 <close_stdout@@Base+0xc68>
   153b4:	ldr	r0, [sp, #32]
   153b8:	ldrb	ip, [r0, r3]
   153bc:	sub	r0, ip, #33	; 0x21
   153c0:	uxtb	r0, r0
   153c4:	cmp	r0, #29
   153c8:	bhi	15444 <close_stdout@@Base+0xc68>
   153cc:	lsl	r1, r1, r0
   153d0:	movw	r0, #20929	; 0x51c1
   153d4:	movt	r0, #14336	; 0x3800
   153d8:	and	r0, r1, r0
   153dc:	cmp	r0, #0
   153e0:	beq	15444 <close_stdout@@Base+0xc68>
   153e4:	ldr	r1, [sp, #36]	; 0x24
   153e8:	cmp	r1, #0
   153ec:	bne	1558c <close_stdout@@Base+0xdb0>
   153f0:	cmp	r9, sl
   153f4:	mov	r4, ip
   153f8:	mov	fp, r3
   153fc:	ldrcc	r0, [sp, #40]	; 0x28
   15400:	strbcc	r2, [r0, r9]
   15404:	add	r2, r9, #1
   15408:	cmp	sl, r2
   1540c:	ldrhi	r0, [sp, #40]	; 0x28
   15410:	movhi	r1, #34	; 0x22
   15414:	strbhi	r1, [r0, r2]
   15418:	add	r2, r9, #2
   1541c:	cmp	sl, r2
   15420:	ldrhi	r0, [sp, #40]	; 0x28
   15424:	movhi	r1, #34	; 0x22
   15428:	strbhi	r1, [r0, r2]
   1542c:	add	r2, r9, #3
   15430:	cmp	sl, r2
   15434:	add	r9, r9, #4
   15438:	ldrhi	r0, [sp, #40]	; 0x28
   1543c:	movhi	r1, #63	; 0x3f
   15440:	strbhi	r1, [r0, r2]
   15444:	ldr	r0, [sp, #44]	; 0x2c
   15448:	cmp	r0, #0
   1544c:	bne	15474 <close_stdout@@Base+0xc98>
   15450:	ldr	r1, [sp, #48]	; 0x30
   15454:	cmp	r1, #0
   15458:	beq	15474 <close_stdout@@Base+0xc98>
   1545c:	ubfx	r2, r4, #5, #8
   15460:	and	r3, r4, #31
   15464:	ldr	r2, [r1, r2, lsl #2]
   15468:	lsr	r3, r2, r3
   1546c:	tst	r3, #1
   15470:	bne	1547c <close_stdout@@Base+0xca0>
   15474:	cmp	r6, #0
   15478:	beq	1549c <close_stdout@@Base+0xcc0>
   1547c:	ldr	r2, [sp, #36]	; 0x24
   15480:	cmp	r2, #0
   15484:	bne	1558c <close_stdout@@Base+0xdb0>
   15488:	cmp	r9, sl
   1548c:	ldrcc	r0, [sp, #40]	; 0x28
   15490:	movcc	r3, #92	; 0x5c
   15494:	strbcc	r3, [r0, r9]
   15498:	add	r9, r9, #1
   1549c:	add	fp, fp, #1
   154a0:	cmp	r9, sl
   154a4:	ldrcc	r1, [sp, #40]	; 0x28
   154a8:	strbcc	r4, [r1, r9]
   154ac:	cmn	r8, #1
   154b0:	add	r9, r9, #1
   154b4:	bne	1513c <close_stdout@@Base+0x960>
   154b8:	ldr	r2, [sp, #32]
   154bc:	ldrb	r3, [r2, fp]
   154c0:	adds	r3, r3, #0
   154c4:	movne	r3, #1
   154c8:	cmp	r3, #0
   154cc:	bne	1514c <close_stdout@@Base+0x970>
   154d0:	ldr	r3, [sp, #160]	; 0xa0
   154d4:	cmp	r9, #0
   154d8:	cmpeq	r3, #2
   154dc:	bne	154ec <close_stdout@@Base+0xd10>
   154e0:	ldr	r0, [sp, #36]	; 0x24
   154e4:	cmp	r0, #0
   154e8:	bne	1558c <close_stdout@@Base+0xdb0>
   154ec:	ldr	r1, [sp, #36]	; 0x24
   154f0:	ldr	r2, [sp, #52]	; 0x34
   154f4:	eor	r3, r1, #1
   154f8:	cmp	r2, #0
   154fc:	moveq	r3, #0
   15500:	andne	r3, r3, #1
   15504:	cmp	r3, #0
   15508:	beq	15534 <close_stdout@@Base+0xd58>
   1550c:	ldrb	r3, [r2]
   15510:	cmp	r3, #0
   15514:	beq	15534 <close_stdout@@Base+0xd58>
   15518:	ldr	r1, [sp, #40]	; 0x28
   1551c:	cmp	sl, r9
   15520:	strbhi	r3, [r1, r9]
   15524:	ldrb	r3, [r2, #1]!
   15528:	add	r9, r9, #1
   1552c:	cmp	r3, #0
   15530:	bne	1551c <close_stdout@@Base+0xd40>
   15534:	cmp	r9, sl
   15538:	movcs	r0, r9
   1553c:	ldrcc	r1, [sp, #40]	; 0x28
   15540:	movcc	r3, #0
   15544:	movcc	r0, r9
   15548:	strbcc	r3, [r1, r9]
   1554c:	b	155c8 <close_stdout@@Base+0xdec>
   15550:	cmn	r8, #1
   15554:	beq	15c1c <close_stdout@@Base+0x1440>
   15558:	subs	r3, r8, #1
   1555c:	movne	r3, #1
   15560:	cmp	r3, #0
   15564:	bne	15444 <close_stdout@@Base+0xc68>
   15568:	cmp	fp, #0
   1556c:	bne	15444 <close_stdout@@Base+0xc68>
   15570:	ldr	r3, [sp, #36]	; 0x24
   15574:	ldr	r0, [sp, #160]	; 0xa0
   15578:	cmp	r0, #2
   1557c:	movne	r3, #0
   15580:	andeq	r3, r3, #1
   15584:	cmp	r3, #0
   15588:	beq	15444 <close_stdout@@Base+0xc68>
   1558c:	ldr	r2, [sp, #164]	; 0xa4
   15590:	mov	ip, #0
   15594:	ldr	r0, [sp, #160]	; 0xa0
   15598:	bic	r3, r2, #2
   1559c:	ldr	r1, [sp, #72]	; 0x48
   155a0:	ldr	r2, [sp, #68]	; 0x44
   155a4:	stm	sp, {r0, r3}
   155a8:	mov	r3, r8
   155ac:	str	r1, [sp, #12]
   155b0:	mov	r1, sl
   155b4:	str	r2, [sp, #16]
   155b8:	ldr	r0, [sp, #40]	; 0x28
   155bc:	ldr	r2, [sp, #32]
   155c0:	str	ip, [sp, #8]
   155c4:	bl	1505c <close_stdout@@Base+0x880>
   155c8:	ldr	r1, [sp, #56]	; 0x38
   155cc:	ldr	r2, [sp, #116]	; 0x74
   155d0:	ldr	r3, [r1]
   155d4:	cmp	r2, r3
   155d8:	bne	15d0c <close_stdout@@Base+0x1530>
   155dc:	add	sp, sp, #124	; 0x7c
   155e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155e4:	mov	r3, #114	; 0x72
   155e8:	ldr	r2, [sp, #36]	; 0x24
   155ec:	ldr	r0, [sp, #160]	; 0xa0
   155f0:	cmp	r0, #2
   155f4:	movne	r2, #0
   155f8:	andeq	r2, r2, #1
   155fc:	cmp	r2, #0
   15600:	bne	1558c <close_stdout@@Base+0xdb0>
   15604:	ldr	r1, [sp, #24]
   15608:	cmp	r1, #0
   1560c:	beq	15444 <close_stdout@@Base+0xc68>
   15610:	mov	r4, r3
   15614:	b	1547c <close_stdout@@Base+0xca0>
   15618:	mov	r3, #98	; 0x62
   1561c:	b	15604 <close_stdout@@Base+0xe28>
   15620:	mov	r3, #102	; 0x66
   15624:	b	15604 <close_stdout@@Base+0xe28>
   15628:	mov	r3, #118	; 0x76
   1562c:	b	15604 <close_stdout@@Base+0xe28>
   15630:	mov	r3, #97	; 0x61
   15634:	b	15604 <close_stdout@@Base+0xe28>
   15638:	mov	r3, #110	; 0x6e
   1563c:	b	155e8 <close_stdout@@Base+0xe0c>
   15640:	mov	r3, #116	; 0x74
   15644:	b	155e8 <close_stdout@@Base+0xe0c>
   15648:	ldr	r2, [sp, #24]
   1564c:	cmp	r2, #0
   15650:	beq	15bf8 <close_stdout@@Base+0x141c>
   15654:	ldr	r3, [sp, #36]	; 0x24
   15658:	cmp	r3, #0
   1565c:	bne	1558c <close_stdout@@Base+0xdb0>
   15660:	cmp	r9, sl
   15664:	add	r2, r9, #1
   15668:	ldrcc	r0, [sp, #40]	; 0x28
   1566c:	movcc	r3, #92	; 0x5c
   15670:	strbcc	r3, [r0, r9]
   15674:	add	r3, fp, #1
   15678:	cmp	r8, r3
   1567c:	bls	156bc <close_stdout@@Base+0xee0>
   15680:	ldr	r1, [sp, #32]
   15684:	ldrb	r3, [r1, r3]
   15688:	sub	r3, r3, #48	; 0x30
   1568c:	cmp	r3, #9
   15690:	bhi	156bc <close_stdout@@Base+0xee0>
   15694:	cmp	sl, r2
   15698:	ldrhi	r0, [sp, #40]	; 0x28
   1569c:	movhi	r3, #48	; 0x30
   156a0:	strbhi	r3, [r0, r2]
   156a4:	add	r3, r9, #2
   156a8:	cmp	sl, r3
   156ac:	ldrhi	r1, [sp, #40]	; 0x28
   156b0:	movhi	r2, #48	; 0x30
   156b4:	strbhi	r2, [r1, r3]
   156b8:	add	r2, r9, #3
   156bc:	mov	r9, r2
   156c0:	mov	r4, #48	; 0x30
   156c4:	b	15450 <close_stdout@@Base+0xc74>
   156c8:	ldr	r1, [sp, #76]	; 0x4c
   156cc:	cmp	r1, #0
   156d0:	beq	156dc <close_stdout@@Base+0xf00>
   156d4:	cmp	r7, #0
   156d8:	bne	1549c <close_stdout@@Base+0xcc0>
   156dc:	mov	r3, r4
   156e0:	b	155e8 <close_stdout@@Base+0xe0c>
   156e4:	ldr	r1, [sp, #160]	; 0xa0
   156e8:	cmp	r1, #2
   156ec:	bne	15444 <close_stdout@@Base+0xc68>
   156f0:	ldr	r2, [sp, #36]	; 0x24
   156f4:	cmp	r2, #0
   156f8:	bne	1558c <close_stdout@@Base+0xdb0>
   156fc:	cmp	r9, sl
   15700:	ldrcc	r0, [sp, #40]	; 0x28
   15704:	movcc	r3, #39	; 0x27
   15708:	strbcc	r3, [r0, r9]
   1570c:	add	r3, r9, #1
   15710:	cmp	sl, r3
   15714:	ldrhi	r1, [sp, #40]	; 0x28
   15718:	movhi	r2, #92	; 0x5c
   1571c:	strbhi	r2, [r1, r3]
   15720:	add	r3, r9, #2
   15724:	cmp	sl, r3
   15728:	add	r9, r9, #3
   1572c:	ldrhi	r0, [sp, #40]	; 0x28
   15730:	movhi	r2, #39	; 0x27
   15734:	strbhi	r2, [r0, r3]
   15738:	b	15444 <close_stdout@@Base+0xc68>
   1573c:	ldr	r1, [sp, #64]	; 0x40
   15740:	cmp	r1, #1
   15744:	bne	15a3c <close_stdout@@Base+0x1260>
   15748:	bl	11320 <__ctype_b_loc@plt>
   1574c:	ldr	r2, [sp, #64]	; 0x40
   15750:	sxth	r3, r4
   15754:	str	r2, [sp, #60]	; 0x3c
   15758:	lsl	r3, r3, #1
   1575c:	ldr	r2, [r0]
   15760:	ldrh	r2, [r2, r3]
   15764:	eor	r2, r2, #16384	; 0x4000
   15768:	ubfx	r2, r2, #14, #1
   1576c:	ldr	r1, [sp, #24]
   15770:	ands	r2, r2, r1
   15774:	beq	15444 <close_stdout@@Base+0xc68>
   15778:	ldr	r3, [sp, #60]	; 0x3c
   1577c:	mov	r0, #92	; 0x5c
   15780:	ldr	r7, [sp, #36]	; 0x24
   15784:	add	r1, r3, fp
   15788:	str	r8, [sp, #60]	; 0x3c
   1578c:	ldr	r3, [sp, #40]	; 0x28
   15790:	b	157f4 <close_stdout@@Base+0x1018>
   15794:	cmp	r7, #0
   15798:	bne	15c34 <close_stdout@@Base+0x1458>
   1579c:	add	ip, r9, #1
   157a0:	cmp	r9, sl
   157a4:	strbcc	r0, [r3, r9]
   157a8:	cmp	sl, ip
   157ac:	lsrhi	r8, r4, #6
   157b0:	addhi	r8, r8, #48	; 0x30
   157b4:	strbhi	r8, [r3, ip]
   157b8:	add	ip, r9, #2
   157bc:	add	r9, r9, #3
   157c0:	cmp	sl, ip
   157c4:	ubfxhi	r8, r4, #3, #3
   157c8:	and	r4, r4, #7
   157cc:	add	r4, r4, #48	; 0x30
   157d0:	addhi	r8, r8, #48	; 0x30
   157d4:	strbhi	r8, [r3, ip]
   157d8:	add	fp, fp, #1
   157dc:	cmp	r1, fp
   157e0:	bls	15820 <close_stdout@@Base+0x1044>
   157e4:	cmp	r9, sl
   157e8:	strbcc	r4, [r3, r9]
   157ec:	ldrb	r4, [r5, #1]!
   157f0:	add	r9, r9, #1
   157f4:	cmp	r2, #0
   157f8:	bne	15794 <close_stdout@@Base+0xfb8>
   157fc:	cmp	r6, #0
   15800:	beq	157d8 <close_stdout@@Base+0xffc>
   15804:	add	fp, fp, #1
   15808:	cmp	r9, sl
   1580c:	strbcc	r0, [r3, r9]
   15810:	cmp	r1, fp
   15814:	add	r9, r9, #1
   15818:	mov	r6, #0
   1581c:	bhi	157e4 <close_stdout@@Base+0x1008>
   15820:	ldr	r8, [sp, #60]	; 0x3c
   15824:	b	154a0 <close_stdout@@Base+0xcc4>
   15828:	ldr	r3, [sp, #36]	; 0x24
   1582c:	cmp	r3, #0
   15830:	bne	15d34 <close_stdout@@Base+0x1558>
   15834:	cmp	sl, #0
   15838:	beq	15c4c <close_stdout@@Base+0x1470>
   1583c:	ldr	r1, [sp, #40]	; 0x28
   15840:	mov	r0, #1
   15844:	ldr	r2, [pc, #1296]	; 15d5c <close_stdout@@Base+0x1580>
   15848:	mov	r3, #34	; 0x22
   1584c:	str	r0, [sp, #24]
   15850:	mov	r9, r0
   15854:	add	r2, pc, r2
   15858:	str	r0, [sp, #28]
   1585c:	strb	r3, [r1]
   15860:	str	r2, [sp, #52]	; 0x34
   15864:	b	15110 <close_stdout@@Base+0x934>
   15868:	ldr	r3, [pc, #1264]	; 15d60 <close_stdout@@Base+0x1584>
   1586c:	mov	r2, #1
   15870:	mov	r0, #3
   15874:	str	r2, [sp, #36]	; 0x24
   15878:	add	r3, pc, r3
   1587c:	str	r2, [sp, #24]
   15880:	str	r3, [sp, #52]	; 0x34
   15884:	mov	r9, #0
   15888:	str	r2, [sp, #28]
   1588c:	str	r0, [sp, #160]	; 0xa0
   15890:	b	15110 <close_stdout@@Base+0x934>
   15894:	mov	r0, #0
   15898:	mov	r1, #1
   1589c:	str	r0, [sp, #36]	; 0x24
   158a0:	mov	r9, r0
   158a4:	str	r1, [sp, #24]
   158a8:	str	r0, [sp, #28]
   158ac:	str	r0, [sp, #52]	; 0x34
   158b0:	b	15110 <close_stdout@@Base+0x934>
   158b4:	ldr	r3, [sp, #160]	; 0xa0
   158b8:	cmp	r3, #8
   158bc:	beq	158e8 <close_stdout@@Base+0x110c>
   158c0:	ldr	r0, [pc, #1180]	; 15d64 <close_stdout@@Base+0x1588>
   158c4:	mov	r1, r3
   158c8:	add	r0, pc, r0
   158cc:	bl	14ef8 <close_stdout@@Base+0x71c>
   158d0:	ldr	r1, [sp, #160]	; 0xa0
   158d4:	str	r0, [sp, #72]	; 0x48
   158d8:	ldr	r0, [pc, #1160]	; 15d68 <close_stdout@@Base+0x158c>
   158dc:	add	r0, pc, r0
   158e0:	bl	14ef8 <close_stdout@@Base+0x71c>
   158e4:	str	r0, [sp, #68]	; 0x44
   158e8:	ldr	r0, [sp, #36]	; 0x24
   158ec:	cmp	r0, #0
   158f0:	movne	r9, #0
   158f4:	bne	1592c <close_stdout@@Base+0x1150>
   158f8:	ldr	r1, [sp, #72]	; 0x48
   158fc:	ldrb	r3, [r1]
   15900:	cmp	r3, #0
   15904:	beq	15d04 <close_stdout@@Base+0x1528>
   15908:	mov	r2, r1
   1590c:	ldr	r1, [sp, #40]	; 0x28
   15910:	mov	r9, r0
   15914:	cmp	r9, sl
   15918:	strbcc	r3, [r1, r9]
   1591c:	ldrb	r3, [r2, #1]!
   15920:	add	r9, r9, #1
   15924:	cmp	r3, #0
   15928:	bne	15914 <close_stdout@@Base+0x1138>
   1592c:	ldr	r0, [sp, #68]	; 0x44
   15930:	str	r0, [sp, #52]	; 0x34
   15934:	bl	11338 <strlen@plt>
   15938:	mov	r2, #1
   1593c:	str	r2, [sp, #24]
   15940:	str	r0, [sp, #28]
   15944:	b	15110 <close_stdout@@Base+0x934>
   15948:	ldr	r3, [pc, #1052]	; 15d6c <close_stdout@@Base+0x1590>
   1594c:	mov	r2, #0
   15950:	mov	r1, #1
   15954:	mov	r0, #2
   15958:	add	r3, pc, r3
   1595c:	str	r1, [sp, #36]	; 0x24
   15960:	str	r2, [sp, #24]
   15964:	mov	r9, r2
   15968:	str	r1, [sp, #28]
   1596c:	str	r3, [sp, #52]	; 0x34
   15970:	str	r0, [sp, #160]	; 0xa0
   15974:	b	15110 <close_stdout@@Base+0x934>
   15978:	ldr	r3, [sp, #36]	; 0x24
   1597c:	cmp	r3, #0
   15980:	bne	15d10 <close_stdout@@Base+0x1534>
   15984:	cmp	sl, #0
   15988:	beq	15c6c <close_stdout@@Base+0x1490>
   1598c:	ldr	r1, [sp, #40]	; 0x28
   15990:	mov	r3, #39	; 0x27
   15994:	ldr	r2, [sp, #36]	; 0x24
   15998:	mov	r0, #1
   1599c:	mov	r9, r0
   159a0:	str	r0, [sp, #28]
   159a4:	strb	r3, [r1]
   159a8:	ldr	r3, [pc, #960]	; 15d70 <close_stdout@@Base+0x1594>
   159ac:	str	r2, [sp, #24]
   159b0:	add	r3, pc, r3
   159b4:	str	r3, [sp, #52]	; 0x34
   159b8:	b	15110 <close_stdout@@Base+0x934>
   159bc:	ldr	r2, [sp, #28]
   159c0:	cmp	r2, #1
   159c4:	add	r4, fp, r2
   159c8:	movls	r3, #0
   159cc:	movhi	r3, #1
   159d0:	cmn	r8, #1
   159d4:	movne	r3, #0
   159d8:	cmp	r3, #0
   159dc:	beq	159ec <close_stdout@@Base+0x1210>
   159e0:	ldr	r0, [sp, #32]
   159e4:	bl	11338 <strlen@plt>
   159e8:	mov	r8, r0
   159ec:	cmp	r8, r4
   159f0:	ldrcc	r3, [sp, #32]
   159f4:	movcc	r6, #0
   159f8:	addcc	r5, r3, fp
   159fc:	bcc	1516c <close_stdout@@Base+0x990>
   15a00:	ldr	r0, [sp, #32]
   15a04:	ldr	r1, [sp, #52]	; 0x34
   15a08:	add	r5, r0, fp
   15a0c:	ldr	r2, [sp, #28]
   15a10:	mov	r0, r5
   15a14:	bl	1120c <memcmp@plt>
   15a18:	cmp	r0, #0
   15a1c:	bne	15a34 <close_stdout@@Base+0x1258>
   15a20:	ldr	r1, [sp, #36]	; 0x24
   15a24:	cmp	r1, #0
   15a28:	bne	1558c <close_stdout@@Base+0xdb0>
   15a2c:	mov	r6, #1
   15a30:	b	1516c <close_stdout@@Base+0x990>
   15a34:	mov	r6, #0
   15a38:	b	1516c <close_stdout@@Base+0x990>
   15a3c:	add	r7, sp, #108	; 0x6c
   15a40:	cmn	r8, #1
   15a44:	mov	r3, #0
   15a48:	str	r3, [sp, #108]	; 0x6c
   15a4c:	str	r3, [r7, #4]
   15a50:	beq	15c3c <close_stdout@@Base+0x1460>
   15a54:	mov	r1, #0
   15a58:	ldr	r0, [sp, #32]
   15a5c:	mov	ip, #1
   15a60:	str	r9, [sp, #88]	; 0x58
   15a64:	str	r6, [sp, #96]	; 0x60
   15a68:	mov	r9, r1
   15a6c:	str	r5, [sp, #100]	; 0x64
   15a70:	mov	r6, ip
   15a74:	mov	r5, r7
   15a78:	add	r3, sp, #104	; 0x68
   15a7c:	sub	r0, r0, #1
   15a80:	str	r3, [sp, #80]	; 0x50
   15a84:	str	r0, [sp, #84]	; 0x54
   15a88:	str	r1, [sp, #60]	; 0x3c
   15a8c:	str	r4, [sp, #92]	; 0x5c
   15a90:	ldr	r2, [sp, #32]
   15a94:	add	r7, r9, fp
   15a98:	add	r0, sp, #104	; 0x68
   15a9c:	mov	r3, r5
   15aa0:	add	r4, r2, r7
   15aa4:	rsb	r2, r7, r8
   15aa8:	mov	r1, r4
   15aac:	bl	1129c <mbrtowc@plt>
   15ab0:	subs	r2, r0, #0
   15ab4:	beq	15bc0 <close_stdout@@Base+0x13e4>
   15ab8:	cmn	r2, #1
   15abc:	beq	15ce8 <close_stdout@@Base+0x150c>
   15ac0:	cmn	r2, #2
   15ac4:	beq	15c8c <close_stdout@@Base+0x14b0>
   15ac8:	ldr	r3, [sp, #36]	; 0x24
   15acc:	ldr	r0, [sp, #160]	; 0xa0
   15ad0:	cmp	r0, #2
   15ad4:	movne	r3, #0
   15ad8:	andeq	r3, r3, #1
   15adc:	cmp	r3, #0
   15ae0:	beq	15b9c <close_stdout@@Base+0x13c0>
   15ae4:	cmp	r2, #1
   15ae8:	beq	15b9c <close_stdout@@Base+0x13c0>
   15aec:	ldr	r1, [sp, #84]	; 0x54
   15af0:	add	r3, r1, r2
   15af4:	add	r7, r3, r7
   15af8:	ldrb	r3, [r4, #1]!
   15afc:	sub	r3, r3, #91	; 0x5b
   15b00:	cmp	r3, #33	; 0x21
   15b04:	addls	pc, pc, r3, lsl #2
   15b08:	b	15b94 <close_stdout@@Base+0x13b8>
   15b0c:	b	1558c <close_stdout@@Base+0xdb0>
   15b10:	b	1558c <close_stdout@@Base+0xdb0>
   15b14:	b	15b94 <close_stdout@@Base+0x13b8>
   15b18:	b	1558c <close_stdout@@Base+0xdb0>
   15b1c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b20:	b	1558c <close_stdout@@Base+0xdb0>
   15b24:	b	15b94 <close_stdout@@Base+0x13b8>
   15b28:	b	15b94 <close_stdout@@Base+0x13b8>
   15b2c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b30:	b	15b94 <close_stdout@@Base+0x13b8>
   15b34:	b	15b94 <close_stdout@@Base+0x13b8>
   15b38:	b	15b94 <close_stdout@@Base+0x13b8>
   15b3c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b40:	b	15b94 <close_stdout@@Base+0x13b8>
   15b44:	b	15b94 <close_stdout@@Base+0x13b8>
   15b48:	b	15b94 <close_stdout@@Base+0x13b8>
   15b4c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b50:	b	15b94 <close_stdout@@Base+0x13b8>
   15b54:	b	15b94 <close_stdout@@Base+0x13b8>
   15b58:	b	15b94 <close_stdout@@Base+0x13b8>
   15b5c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b60:	b	15b94 <close_stdout@@Base+0x13b8>
   15b64:	b	15b94 <close_stdout@@Base+0x13b8>
   15b68:	b	15b94 <close_stdout@@Base+0x13b8>
   15b6c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b70:	b	15b94 <close_stdout@@Base+0x13b8>
   15b74:	b	15b94 <close_stdout@@Base+0x13b8>
   15b78:	b	15b94 <close_stdout@@Base+0x13b8>
   15b7c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b80:	b	15b94 <close_stdout@@Base+0x13b8>
   15b84:	b	15b94 <close_stdout@@Base+0x13b8>
   15b88:	b	15b94 <close_stdout@@Base+0x13b8>
   15b8c:	b	15b94 <close_stdout@@Base+0x13b8>
   15b90:	b	1558c <close_stdout@@Base+0xdb0>
   15b94:	cmp	r4, r7
   15b98:	bne	15af8 <close_stdout@@Base+0x131c>
   15b9c:	ldr	r0, [sp, #104]	; 0x68
   15ba0:	add	r9, r9, r2
   15ba4:	bl	11254 <iswprint@plt>
   15ba8:	cmp	r0, #0
   15bac:	mov	r0, r5
   15bb0:	moveq	r6, #0
   15bb4:	bl	11200 <mbsinit@plt>
   15bb8:	cmp	r0, #0
   15bbc:	beq	15a90 <close_stdout@@Base+0x12b4>
   15bc0:	mov	ip, r6
   15bc4:	eor	r2, ip, #1
   15bc8:	str	r9, [sp, #60]	; 0x3c
   15bcc:	ldr	r4, [sp, #92]	; 0x5c
   15bd0:	uxtb	r2, r2
   15bd4:	ldr	r9, [sp, #88]	; 0x58
   15bd8:	ldr	r6, [sp, #96]	; 0x60
   15bdc:	ldr	r5, [sp, #100]	; 0x64
   15be0:	ldr	r3, [sp, #60]	; 0x3c
   15be4:	cmp	r3, #1
   15be8:	bls	1576c <close_stdout@@Base+0xf90>
   15bec:	ldr	r0, [sp, #24]
   15bf0:	and	r2, r2, r0
   15bf4:	b	15778 <close_stdout@@Base+0xf9c>
   15bf8:	ldr	r2, [sp, #164]	; 0xa4
   15bfc:	tst	r2, #1
   15c00:	addne	fp, fp, #1
   15c04:	bne	15134 <close_stdout@@Base+0x958>
   15c08:	b	15444 <close_stdout@@Base+0xc68>
   15c0c:	ldr	r0, [sp, #36]	; 0x24
   15c10:	cmp	r0, #0
   15c14:	beq	15444 <close_stdout@@Base+0xc68>
   15c18:	b	1558c <close_stdout@@Base+0xdb0>
   15c1c:	ldr	r2, [sp, #32]
   15c20:	ldrb	r3, [r2, #1]
   15c24:	adds	r3, r3, #0
   15c28:	movne	r3, #1
   15c2c:	b	15560 <close_stdout@@Base+0xd84>
   15c30:	bl	11440 <abort@plt>
   15c34:	ldr	r8, [sp, #60]	; 0x3c
   15c38:	b	1558c <close_stdout@@Base+0xdb0>
   15c3c:	ldr	r0, [sp, #32]
   15c40:	bl	11338 <strlen@plt>
   15c44:	mov	r8, r0
   15c48:	b	15a54 <close_stdout@@Base+0x1278>
   15c4c:	ldr	r2, [pc, #288]	; 15d74 <close_stdout@@Base+0x1598>
   15c50:	mov	r1, #1
   15c54:	mov	r9, r1
   15c58:	str	r1, [sp, #24]
   15c5c:	add	r2, pc, r2
   15c60:	str	r1, [sp, #28]
   15c64:	str	r2, [sp, #52]	; 0x34
   15c68:	b	15110 <close_stdout@@Base+0x934>
   15c6c:	ldr	r2, [pc, #260]	; 15d78 <close_stdout@@Base+0x159c>
   15c70:	mov	r3, #1
   15c74:	mov	r9, r3
   15c78:	str	r3, [sp, #28]
   15c7c:	add	r2, pc, r2
   15c80:	str	sl, [sp, #24]
   15c84:	str	r2, [sp, #52]	; 0x34
   15c88:	b	15110 <close_stdout@@Base+0x934>
   15c8c:	cmp	r8, r7
   15c90:	str	r9, [sp, #60]	; 0x3c
   15c94:	mov	ip, r4
   15c98:	ldr	r6, [sp, #96]	; 0x60
   15c9c:	ldr	r9, [sp, #88]	; 0x58
   15ca0:	ldr	r4, [sp, #92]	; 0x5c
   15ca4:	ldr	r5, [sp, #100]	; 0x64
   15ca8:	bls	15ce0 <close_stdout@@Base+0x1504>
   15cac:	ldrb	r3, [ip]
   15cb0:	cmp	r3, #0
   15cb4:	beq	15ce0 <close_stdout@@Base+0x1504>
   15cb8:	ldr	r3, [sp, #60]	; 0x3c
   15cbc:	b	15ccc <close_stdout@@Base+0x14f0>
   15cc0:	ldrb	r2, [r5, r3]
   15cc4:	cmp	r2, #0
   15cc8:	beq	15cdc <close_stdout@@Base+0x1500>
   15ccc:	add	r3, r3, #1
   15cd0:	add	r2, fp, r3
   15cd4:	cmp	r8, r2
   15cd8:	bhi	15cc0 <close_stdout@@Base+0x14e4>
   15cdc:	str	r3, [sp, #60]	; 0x3c
   15ce0:	mov	r2, #1
   15ce4:	b	15be0 <close_stdout@@Base+0x1404>
   15ce8:	str	r9, [sp, #60]	; 0x3c
   15cec:	mov	r2, #1
   15cf0:	ldr	r4, [sp, #92]	; 0x5c
   15cf4:	ldr	r6, [sp, #96]	; 0x60
   15cf8:	ldr	r9, [sp, #88]	; 0x58
   15cfc:	ldr	r5, [sp, #100]	; 0x64
   15d00:	b	15be0 <close_stdout@@Base+0x1404>
   15d04:	ldr	r9, [sp, #36]	; 0x24
   15d08:	b	1592c <close_stdout@@Base+0x1150>
   15d0c:	bl	11224 <__stack_chk_fail@plt>
   15d10:	ldr	r1, [pc, #100]	; 15d7c <close_stdout@@Base+0x15a0>
   15d14:	mov	r3, #0
   15d18:	mov	r0, #1
   15d1c:	str	r3, [sp, #24]
   15d20:	add	r1, pc, r1
   15d24:	str	r0, [sp, #28]
   15d28:	mov	r9, r3
   15d2c:	str	r1, [sp, #52]	; 0x34
   15d30:	b	15110 <close_stdout@@Base+0x934>
   15d34:	ldr	r0, [pc, #68]	; 15d80 <close_stdout@@Base+0x15a4>
   15d38:	mov	r3, #1
   15d3c:	mov	r9, #0
   15d40:	str	r3, [sp, #24]
   15d44:	add	r0, pc, r0
   15d48:	str	r3, [sp, #28]
   15d4c:	str	r0, [sp, #52]	; 0x34
   15d50:	b	15110 <close_stdout@@Base+0x934>
   15d54:	andeq	r8, r1, r0, lsl #31
   15d58:	andeq	r0, r0, r8, lsl r1
   15d5c:	andeq	r7, r0, r4, lsr r4
   15d60:	andeq	r7, r0, r0, lsl r4
   15d64:	andeq	r7, r0, ip, asr #7
   15d68:	andeq	r7, r0, r8, lsr #7
   15d6c:	andeq	r7, r0, ip, lsr #6
   15d70:	ldrdeq	r7, [r0], -r4
   15d74:	andeq	r7, r0, ip, lsr #32
   15d78:	andeq	r7, r0, r8
   15d7c:	andeq	r6, r0, r4, ror #30
   15d80:	andeq	r6, r0, r4, asr #30
   15d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d88:	sub	sp, sp, #44	; 0x2c
   15d8c:	mov	r6, r0
   15d90:	mov	r9, r1
   15d94:	mov	sl, r2
   15d98:	mov	r4, r3
   15d9c:	bl	1135c <__errno_location@plt>
   15da0:	ldr	fp, [pc, #412]	; 15f44 <close_stdout@@Base+0x1768>
   15da4:	cmp	r6, #0
   15da8:	add	fp, pc, fp
   15dac:	ldr	r5, [fp]
   15db0:	ldr	r1, [r0]
   15db4:	mov	r8, r0
   15db8:	str	r1, [sp, #36]	; 0x24
   15dbc:	blt	15f3c <close_stdout@@Base+0x1760>
   15dc0:	ldr	r3, [pc, #384]	; 15f48 <close_stdout@@Base+0x176c>
   15dc4:	add	r3, pc, r3
   15dc8:	ldr	r3, [r3]
   15dcc:	cmp	r6, r3
   15dd0:	bcc	15e24 <close_stdout@@Base+0x1648>
   15dd4:	add	r7, r6, #1
   15dd8:	cmn	r7, #-536870911	; 0xe0000001
   15ddc:	bhi	15f40 <close_stdout@@Base+0x1764>
   15de0:	add	r3, fp, #4
   15de4:	cmp	r5, r3
   15de8:	beq	15f14 <close_stdout@@Base+0x1738>
   15dec:	mov	r0, r5
   15df0:	lsl	r1, r7, #3
   15df4:	bl	16c1c <close_stdout@@Base+0x2440>
   15df8:	mov	r5, r0
   15dfc:	str	r0, [fp]
   15e00:	ldr	fp, [pc, #324]	; 15f4c <close_stdout@@Base+0x1770>
   15e04:	mov	r1, #0
   15e08:	add	fp, pc, fp
   15e0c:	ldr	r0, [fp]
   15e10:	rsb	r2, r0, r7
   15e14:	add	r0, r5, r0, lsl #3
   15e18:	lsl	r2, r2, #3
   15e1c:	bl	11380 <memset@plt>
   15e20:	str	r7, [fp]
   15e24:	add	r2, r4, #8
   15e28:	str	r2, [sp, #32]
   15e2c:	ldr	r1, [r4]
   15e30:	add	fp, r5, r6, lsl #3
   15e34:	ldr	lr, [sp, #32]
   15e38:	mov	r2, r9
   15e3c:	ldr	r3, [r4, #4]
   15e40:	ldr	ip, [r5, r6, lsl #3]
   15e44:	ldr	r7, [fp, #4]
   15e48:	orr	r3, r3, #1
   15e4c:	str	r1, [sp]
   15e50:	str	r3, [sp, #4]
   15e54:	mov	r1, ip
   15e58:	str	lr, [sp, #8]
   15e5c:	mov	r0, r7
   15e60:	ldr	lr, [r4, #40]	; 0x28
   15e64:	str	r3, [sp, #28]
   15e68:	mov	r3, sl
   15e6c:	str	lr, [sp, #12]
   15e70:	ldr	lr, [r4, #44]	; 0x2c
   15e74:	str	ip, [sp, #24]
   15e78:	str	lr, [sp, #16]
   15e7c:	bl	1505c <close_stdout@@Base+0x880>
   15e80:	ldr	ip, [sp, #24]
   15e84:	cmp	ip, r0
   15e88:	bhi	15f00 <close_stdout@@Base+0x1724>
   15e8c:	ldr	r3, [pc, #188]	; 15f50 <close_stdout@@Base+0x1774>
   15e90:	add	r1, r0, #1
   15e94:	str	r1, [r5, r6, lsl #3]
   15e98:	add	r3, pc, r3
   15e9c:	cmp	r7, r3
   15ea0:	beq	15eb4 <close_stdout@@Base+0x16d8>
   15ea4:	mov	r0, r7
   15ea8:	str	r1, [sp, #24]
   15eac:	bl	111d0 <free@plt>
   15eb0:	ldr	r1, [sp, #24]
   15eb4:	mov	r0, r1
   15eb8:	str	r1, [sp, #24]
   15ebc:	bl	16bc4 <close_stdout@@Base+0x23e8>
   15ec0:	ldr	r3, [sp, #28]
   15ec4:	ldr	lr, [sp, #32]
   15ec8:	mov	r2, r9
   15ecc:	str	r0, [fp, #4]
   15ed0:	mov	r7, r0
   15ed4:	ldr	ip, [r4]
   15ed8:	str	r3, [sp, #4]
   15edc:	mov	r3, sl
   15ee0:	str	lr, [sp, #8]
   15ee4:	str	ip, [sp]
   15ee8:	ldr	ip, [r4, #40]	; 0x28
   15eec:	ldr	r1, [sp, #24]
   15ef0:	str	ip, [sp, #12]
   15ef4:	ldr	ip, [r4, #44]	; 0x2c
   15ef8:	str	ip, [sp, #16]
   15efc:	bl	1505c <close_stdout@@Base+0x880>
   15f00:	ldr	r1, [sp, #36]	; 0x24
   15f04:	mov	r0, r7
   15f08:	str	r1, [r8]
   15f0c:	add	sp, sp, #44	; 0x2c
   15f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f14:	lsl	r1, r7, #3
   15f18:	mov	r0, #0
   15f1c:	str	r3, [sp, #24]
   15f20:	bl	16c1c <close_stdout@@Base+0x2440>
   15f24:	ldr	r3, [sp, #24]
   15f28:	mov	r5, r0
   15f2c:	ldm	r3, {r0, r1}
   15f30:	str	r5, [fp]
   15f34:	stm	r5, {r0, r1}
   15f38:	b	15e00 <close_stdout@@Base+0x1624>
   15f3c:	bl	11440 <abort@plt>
   15f40:	bl	16dd8 <close_stdout@@Base+0x25fc>
   15f44:	andeq	r8, r1, r8, lsl r4
   15f48:	andeq	r8, r1, r8, asr #7
   15f4c:	andeq	r8, r1, r4, lsl #7
   15f50:	muleq	r1, r8, r3
   15f54:	push	{r4, r5, r6, lr}
   15f58:	mov	r5, r0
   15f5c:	bl	1135c <__errno_location@plt>
   15f60:	cmp	r5, #0
   15f64:	mov	r1, #48	; 0x30
   15f68:	mov	r4, r0
   15f6c:	ldr	r0, [pc, #24]	; 15f8c <close_stdout@@Base+0x17b0>
   15f70:	ldr	r6, [r4]
   15f74:	add	r0, pc, r0
   15f78:	add	r0, r0, #256	; 0x100
   15f7c:	movne	r0, r5
   15f80:	bl	16d98 <close_stdout@@Base+0x25bc>
   15f84:	str	r6, [r4]
   15f88:	pop	{r4, r5, r6, pc}
   15f8c:			; <UNDEFINED> instruction: 0x000182bc
   15f90:	cmp	r0, #0
   15f94:	beq	15fa0 <close_stdout@@Base+0x17c4>
   15f98:	ldr	r0, [r0]
   15f9c:	bx	lr
   15fa0:	ldr	r0, [pc, #12]	; 15fb4 <close_stdout@@Base+0x17d8>
   15fa4:	add	r0, pc, r0
   15fa8:	add	r0, r0, #256	; 0x100
   15fac:	ldr	r0, [r0]
   15fb0:	bx	lr
   15fb4:	andeq	r8, r1, ip, lsl #5
   15fb8:	cmp	r0, #0
   15fbc:	beq	15fc8 <close_stdout@@Base+0x17ec>
   15fc0:	str	r1, [r0]
   15fc4:	bx	lr
   15fc8:	ldr	r0, [pc, #12]	; 15fdc <close_stdout@@Base+0x1800>
   15fcc:	add	r0, pc, r0
   15fd0:	add	r0, r0, #256	; 0x100
   15fd4:	str	r1, [r0]
   15fd8:	bx	lr
   15fdc:	andeq	r8, r1, r4, ror #4
   15fe0:	cmp	r0, #0
   15fe4:	movne	r3, r0
   15fe8:	beq	16018 <close_stdout@@Base+0x183c>
   15fec:	lsr	ip, r1, #5
   15ff0:	and	r1, r1, #31
   15ff4:	add	r3, r3, ip, lsl #2
   15ff8:	ldr	ip, [r3, #8]
   15ffc:	lsr	r0, ip, r1
   16000:	eor	r2, r0, r2
   16004:	and	r0, r0, #1
   16008:	and	r2, r2, #1
   1600c:	eor	ip, ip, r2, lsl r1
   16010:	str	ip, [r3, #8]
   16014:	bx	lr
   16018:	ldr	r3, [pc, #8]	; 16028 <close_stdout@@Base+0x184c>
   1601c:	add	r3, pc, r3
   16020:	add	r3, r3, #256	; 0x100
   16024:	b	15fec <close_stdout@@Base+0x1810>
   16028:	andeq	r8, r1, r4, lsl r2
   1602c:	subs	r3, r0, #0
   16030:	beq	16040 <close_stdout@@Base+0x1864>
   16034:	ldr	r0, [r3, #4]
   16038:	str	r1, [r3, #4]
   1603c:	bx	lr
   16040:	ldr	r3, [pc, #8]	; 16050 <close_stdout@@Base+0x1874>
   16044:	add	r3, pc, r3
   16048:	add	r3, r3, #256	; 0x100
   1604c:	b	16034 <close_stdout@@Base+0x1858>
   16050:	andeq	r8, r1, ip, ror #3
   16054:	cmp	r0, #0
   16058:	push	{r3, lr}
   1605c:	beq	16080 <close_stdout@@Base+0x18a4>
   16060:	cmp	r2, #0
   16064:	cmpne	r1, #0
   16068:	mov	r3, #8
   1606c:	strne	r1, [r0, #40]	; 0x28
   16070:	str	r3, [r0]
   16074:	strne	r2, [r0, #44]	; 0x2c
   16078:	popne	{r3, pc}
   1607c:	bl	11440 <abort@plt>
   16080:	ldr	r0, [pc, #8]	; 16090 <close_stdout@@Base+0x18b4>
   16084:	add	r0, pc, r0
   16088:	add	r0, r0, #256	; 0x100
   1608c:	b	16060 <close_stdout@@Base+0x1884>
   16090:	andeq	r8, r1, ip, lsr #3
   16094:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16098:	sub	sp, sp, #24
   1609c:	mov	r7, r0
   160a0:	mov	sl, r1
   160a4:	ldr	r4, [sp, #56]	; 0x38
   160a8:	mov	r9, r2
   160ac:	mov	r8, r3
   160b0:	cmp	r4, #0
   160b4:	beq	16108 <close_stdout@@Base+0x192c>
   160b8:	bl	1135c <__errno_location@plt>
   160bc:	ldr	r3, [r4]
   160c0:	add	lr, r4, #8
   160c4:	mov	r1, sl
   160c8:	mov	r2, r9
   160cc:	ldr	r6, [r0]
   160d0:	mov	r5, r0
   160d4:	str	r3, [sp]
   160d8:	mov	r0, r7
   160dc:	ldr	ip, [r4, #4]
   160e0:	mov	r3, r8
   160e4:	stmib	sp, {ip, lr}
   160e8:	ldr	ip, [r4, #40]	; 0x28
   160ec:	str	ip, [sp, #12]
   160f0:	ldr	ip, [r4, #44]	; 0x2c
   160f4:	str	ip, [sp, #16]
   160f8:	bl	1505c <close_stdout@@Base+0x880>
   160fc:	str	r6, [r5]
   16100:	add	sp, sp, #24
   16104:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16108:	ldr	r4, [pc, #8]	; 16118 <close_stdout@@Base+0x193c>
   1610c:	add	r4, pc, r4
   16110:	add	r4, r4, #256	; 0x100
   16114:	b	160b8 <close_stdout@@Base+0x18dc>
   16118:	andeq	r8, r1, r4, lsr #2
   1611c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16120:	subs	r4, r3, #0
   16124:	sub	sp, sp, #36	; 0x24
   16128:	mov	r7, r0
   1612c:	mov	r6, r1
   16130:	mov	r5, r2
   16134:	beq	161f0 <close_stdout@@Base+0x1a14>
   16138:	bl	1135c <__errno_location@plt>
   1613c:	ldr	r3, [r4]
   16140:	ldr	sl, [r4, #4]
   16144:	add	r9, r4, #8
   16148:	mov	r8, r0
   1614c:	mov	r0, #0
   16150:	ldr	r2, [r8]
   16154:	cmp	r5, r0
   16158:	orreq	sl, sl, #1
   1615c:	str	r9, [sp, #8]
   16160:	mov	r1, r0
   16164:	stm	sp, {r3, sl}
   16168:	mov	r3, r6
   1616c:	ldr	ip, [r4, #40]	; 0x28
   16170:	str	r2, [sp, #28]
   16174:	mov	r2, r7
   16178:	str	ip, [sp, #12]
   1617c:	ldr	ip, [r4, #44]	; 0x2c
   16180:	str	ip, [sp, #16]
   16184:	bl	1505c <close_stdout@@Base+0x880>
   16188:	add	r1, r0, #1
   1618c:	mov	fp, r0
   16190:	str	r1, [sp, #24]
   16194:	mov	r0, r1
   16198:	bl	16bc4 <close_stdout@@Base+0x23e8>
   1619c:	ldr	lr, [r4]
   161a0:	str	sl, [sp, #4]
   161a4:	mov	r3, r6
   161a8:	str	r9, [sp, #8]
   161ac:	mov	r2, r7
   161b0:	str	lr, [sp]
   161b4:	ldr	lr, [r4, #40]	; 0x28
   161b8:	ldr	r1, [sp, #24]
   161bc:	str	lr, [sp, #12]
   161c0:	ldr	lr, [r4, #44]	; 0x2c
   161c4:	str	lr, [sp, #16]
   161c8:	str	r0, [sp, #24]
   161cc:	bl	1505c <close_stdout@@Base+0x880>
   161d0:	ldr	r3, [sp, #28]
   161d4:	cmp	r5, #0
   161d8:	str	r3, [r8]
   161dc:	ldr	ip, [sp, #24]
   161e0:	strne	fp, [r5]
   161e4:	mov	r0, ip
   161e8:	add	sp, sp, #36	; 0x24
   161ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161f0:	ldr	r4, [pc, #8]	; 16200 <close_stdout@@Base+0x1a24>
   161f4:	add	r4, pc, r4
   161f8:	add	r4, r4, #256	; 0x100
   161fc:	b	16138 <close_stdout@@Base+0x195c>
   16200:	andeq	r8, r1, ip, lsr r0
   16204:	mov	r3, r2
   16208:	mov	r2, #0
   1620c:	b	1611c <close_stdout@@Base+0x1940>
   16210:	ldr	r2, [pc, #152]	; 162b0 <close_stdout@@Base+0x1ad4>
   16214:	push	{r3, r4, r5, r6, r7, lr}
   16218:	add	r2, pc, r2
   1621c:	ldr	r3, [pc, #144]	; 162b4 <close_stdout@@Base+0x1ad8>
   16220:	ldr	r6, [r2]
   16224:	add	r3, pc, r3
   16228:	cmp	r6, #1
   1622c:	ldr	r7, [r3]
   16230:	movhi	r4, #1
   16234:	movhi	r5, r7
   16238:	bls	16254 <close_stdout@@Base+0x1a78>
   1623c:	ldr	r0, [r5, #12]
   16240:	add	r4, r4, #1
   16244:	bl	111d0 <free@plt>
   16248:	cmp	r4, r6
   1624c:	add	r5, r5, #8
   16250:	bne	1623c <close_stdout@@Base+0x1a60>
   16254:	ldr	r4, [pc, #92]	; 162b8 <close_stdout@@Base+0x1adc>
   16258:	ldr	r0, [r7, #4]
   1625c:	add	r4, pc, r4
   16260:	cmp	r0, r4
   16264:	beq	1627c <close_stdout@@Base+0x1aa0>
   16268:	bl	111d0 <free@plt>
   1626c:	ldr	r3, [pc, #72]	; 162bc <close_stdout@@Base+0x1ae0>
   16270:	mov	r2, #256	; 0x100
   16274:	add	r3, pc, r3
   16278:	stmib	r3, {r2, r4}
   1627c:	ldr	r4, [pc, #60]	; 162c0 <close_stdout@@Base+0x1ae4>
   16280:	add	r4, pc, r4
   16284:	add	r5, r4, #4
   16288:	cmp	r7, r5
   1628c:	beq	1629c <close_stdout@@Base+0x1ac0>
   16290:	mov	r0, r7
   16294:	bl	111d0 <free@plt>
   16298:	str	r5, [r4]
   1629c:	ldr	r3, [pc, #32]	; 162c4 <close_stdout@@Base+0x1ae8>
   162a0:	mov	r2, #1
   162a4:	add	r3, pc, r3
   162a8:	str	r2, [r3]
   162ac:	pop	{r3, r4, r5, r6, r7, pc}
   162b0:	andeq	r7, r1, r4, ror pc
   162b4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   162b8:	ldrdeq	r7, [r1], -r4
   162bc:	andeq	r7, r1, ip, asr #30
   162c0:	andeq	r7, r1, r0, asr #30
   162c4:	andeq	r7, r1, r8, ror #29
   162c8:	ldr	r3, [pc, #12]	; 162dc <close_stdout@@Base+0x1b00>
   162cc:	mvn	r2, #0
   162d0:	add	r3, pc, r3
   162d4:	add	r3, r3, #256	; 0x100
   162d8:	b	15d84 <close_stdout@@Base+0x15a8>
   162dc:	andeq	r7, r1, r0, ror #30
   162e0:	ldr	r3, [pc, #8]	; 162f0 <close_stdout@@Base+0x1b14>
   162e4:	add	r3, pc, r3
   162e8:	add	r3, r3, #256	; 0x100
   162ec:	b	15d84 <close_stdout@@Base+0x15a8>
   162f0:	andeq	r7, r1, ip, asr #30
   162f4:	mov	r1, r0
   162f8:	mov	r0, #0
   162fc:	b	162c8 <close_stdout@@Base+0x1aec>
   16300:	mov	r2, r1
   16304:	mov	r1, r0
   16308:	mov	r0, #0
   1630c:	b	162e0 <close_stdout@@Base+0x1b04>
   16310:	ldr	r3, [pc, #92]	; 16374 <close_stdout@@Base+0x1b98>
   16314:	ldr	ip, [pc, #92]	; 16378 <close_stdout@@Base+0x1b9c>
   16318:	add	r3, pc, r3
   1631c:	push	{r4, r5, r6, r7, lr}
   16320:	sub	sp, sp, #60	; 0x3c
   16324:	ldr	r4, [r3, ip]
   16328:	add	r5, sp, #4
   1632c:	mov	r7, r2
   16330:	mov	r6, r0
   16334:	mov	r0, r5
   16338:	ldr	r3, [r4]
   1633c:	str	r3, [sp, #52]	; 0x34
   16340:	bl	14ea4 <close_stdout@@Base+0x6c8>
   16344:	mov	r3, r5
   16348:	mvn	r2, #0
   1634c:	mov	r0, r6
   16350:	mov	r1, r7
   16354:	bl	15d84 <close_stdout@@Base+0x15a8>
   16358:	ldr	r2, [sp, #52]	; 0x34
   1635c:	ldr	r3, [r4]
   16360:	cmp	r2, r3
   16364:	bne	16370 <close_stdout@@Base+0x1b94>
   16368:	add	sp, sp, #60	; 0x3c
   1636c:	pop	{r4, r5, r6, r7, pc}
   16370:	bl	11224 <__stack_chk_fail@plt>
   16374:	andeq	r7, r1, r0, ror #25
   16378:	andeq	r0, r0, r8, lsl r1
   1637c:	ldr	ip, [pc, #96]	; 163e4 <close_stdout@@Base+0x1c08>
   16380:	push	{r4, r5, r6, r7, r8, lr}
   16384:	add	ip, pc, ip
   16388:	ldr	lr, [pc, #88]	; 163e8 <close_stdout@@Base+0x1c0c>
   1638c:	sub	sp, sp, #56	; 0x38
   16390:	mov	r8, r3
   16394:	add	r5, sp, #4
   16398:	mov	r7, r2
   1639c:	mov	r6, r0
   163a0:	ldr	r4, [ip, lr]
   163a4:	mov	r0, r5
   163a8:	ldr	r3, [r4]
   163ac:	str	r3, [sp, #52]	; 0x34
   163b0:	bl	14ea4 <close_stdout@@Base+0x6c8>
   163b4:	mov	r2, r8
   163b8:	mov	r3, r5
   163bc:	mov	r0, r6
   163c0:	mov	r1, r7
   163c4:	bl	15d84 <close_stdout@@Base+0x15a8>
   163c8:	ldr	r2, [sp, #52]	; 0x34
   163cc:	ldr	r3, [r4]
   163d0:	cmp	r2, r3
   163d4:	bne	163e0 <close_stdout@@Base+0x1c04>
   163d8:	add	sp, sp, #56	; 0x38
   163dc:	pop	{r4, r5, r6, r7, r8, pc}
   163e0:	bl	11224 <__stack_chk_fail@plt>
   163e4:	andeq	r7, r1, r4, ror ip
   163e8:	andeq	r0, r0, r8, lsl r1
   163ec:	mov	r2, r1
   163f0:	mov	r1, r0
   163f4:	mov	r0, #0
   163f8:	b	16310 <close_stdout@@Base+0x1b34>
   163fc:	mov	ip, r1
   16400:	mov	r3, r2
   16404:	mov	r1, r0
   16408:	mov	r2, ip
   1640c:	mov	r0, #0
   16410:	b	1637c <close_stdout@@Base+0x1ba0>
   16414:	push	{r4, r5, r6, r7, r8, lr}
   16418:	mov	r5, r2
   1641c:	ldr	lr, [pc, #136]	; 164ac <close_stdout@@Base+0x1cd0>
   16420:	mov	r7, r0
   16424:	mov	r6, r1
   16428:	ldr	r4, [pc, #128]	; 164b0 <close_stdout@@Base+0x1cd4>
   1642c:	add	lr, pc, lr
   16430:	sub	sp, sp, #56	; 0x38
   16434:	add	lr, lr, #256	; 0x100
   16438:	ldr	r8, [pc, #116]	; 164b4 <close_stdout@@Base+0x1cd8>
   1643c:	add	r4, pc, r4
   16440:	add	ip, sp, #4
   16444:	ldm	lr!, {r0, r1, r2, r3}
   16448:	ldr	r4, [r4, r8]
   1644c:	stmia	ip!, {r0, r1, r2, r3}
   16450:	ldm	lr!, {r0, r1, r2, r3}
   16454:	ldr	r8, [r4]
   16458:	stmia	ip!, {r0, r1, r2, r3}
   1645c:	ldm	lr, {r0, r1, r2, r3}
   16460:	str	r8, [sp, #52]	; 0x34
   16464:	stm	ip, {r0, r1, r2, r3}
   16468:	mov	r1, r5
   1646c:	add	r5, sp, #4
   16470:	mov	r2, #1
   16474:	mov	r0, r5
   16478:	bl	15fe0 <close_stdout@@Base+0x1804>
   1647c:	mov	r2, r6
   16480:	mov	r3, r5
   16484:	mov	r1, r7
   16488:	mov	r0, #0
   1648c:	bl	15d84 <close_stdout@@Base+0x15a8>
   16490:	ldr	r2, [sp, #52]	; 0x34
   16494:	ldr	r3, [r4]
   16498:	cmp	r2, r3
   1649c:	bne	164a8 <close_stdout@@Base+0x1ccc>
   164a0:	add	sp, sp, #56	; 0x38
   164a4:	pop	{r4, r5, r6, r7, r8, pc}
   164a8:	bl	11224 <__stack_chk_fail@plt>
   164ac:	andeq	r7, r1, r4, lsl #28
   164b0:			; <UNDEFINED> instruction: 0x00017bbc
   164b4:	andeq	r0, r0, r8, lsl r1
   164b8:	mov	r2, r1
   164bc:	mvn	r1, #0
   164c0:	b	16414 <close_stdout@@Base+0x1c38>
   164c4:	mov	r1, #58	; 0x3a
   164c8:	b	164b8 <close_stdout@@Base+0x1cdc>
   164cc:	mov	r2, #58	; 0x3a
   164d0:	b	16414 <close_stdout@@Base+0x1c38>
   164d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164d8:	mov	r5, r2
   164dc:	ldr	lr, [pc, #144]	; 16574 <close_stdout@@Base+0x1d98>
   164e0:	mov	r8, r0
   164e4:	mov	r9, r1
   164e8:	mov	r7, r3
   164ec:	add	lr, pc, lr
   164f0:	ldr	r4, [pc, #128]	; 16578 <close_stdout@@Base+0x1d9c>
   164f4:	add	lr, lr, #256	; 0x100
   164f8:	sub	sp, sp, #56	; 0x38
   164fc:	ldr	sl, [pc, #120]	; 1657c <close_stdout@@Base+0x1da0>
   16500:	add	r4, pc, r4
   16504:	ldm	lr!, {r0, r1, r2, r3}
   16508:	add	ip, sp, #4
   1650c:	ldr	r4, [r4, sl]
   16510:	ldr	r6, [sp, #88]	; 0x58
   16514:	stmia	ip!, {r0, r1, r2, r3}
   16518:	ldm	lr!, {r0, r1, r2, r3}
   1651c:	ldr	sl, [r4]
   16520:	stmia	ip!, {r0, r1, r2, r3}
   16524:	ldm	lr, {r0, r1, r2, r3}
   16528:	str	sl, [sp, #52]	; 0x34
   1652c:	stm	ip, {r0, r1, r2, r3}
   16530:	mov	r2, r5
   16534:	add	r5, sp, #4
   16538:	mov	r1, r9
   1653c:	mov	r0, r5
   16540:	bl	16054 <close_stdout@@Base+0x1878>
   16544:	mov	r2, r6
   16548:	mov	r3, r5
   1654c:	mov	r0, r8
   16550:	mov	r1, r7
   16554:	bl	15d84 <close_stdout@@Base+0x15a8>
   16558:	ldr	r2, [sp, #52]	; 0x34
   1655c:	ldr	r3, [r4]
   16560:	cmp	r2, r3
   16564:	bne	16570 <close_stdout@@Base+0x1d94>
   16568:	add	sp, sp, #56	; 0x38
   1656c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16570:	bl	11224 <__stack_chk_fail@plt>
   16574:	andeq	r7, r1, r4, asr #26
   16578:	strdeq	r7, [r1], -r8
   1657c:	andeq	r0, r0, r8, lsl r1
   16580:	push	{lr}		; (str lr, [sp, #-4]!)
   16584:	sub	sp, sp, #12
   16588:	mvn	ip, #0
   1658c:	str	ip, [sp]
   16590:	bl	164d4 <close_stdout@@Base+0x1cf8>
   16594:	add	sp, sp, #12
   16598:	pop	{pc}		; (ldr pc, [sp], #4)
   1659c:	mov	ip, r1
   165a0:	mov	r3, r2
   165a4:	mov	r1, r0
   165a8:	mov	r2, ip
   165ac:	mov	r0, #0
   165b0:	b	16580 <close_stdout@@Base+0x1da4>
   165b4:	push	{lr}		; (str lr, [sp, #-4]!)
   165b8:	sub	sp, sp, #12
   165bc:	mov	lr, r1
   165c0:	mov	ip, r2
   165c4:	mov	r1, r0
   165c8:	str	r3, [sp]
   165cc:	mov	r2, lr
   165d0:	mov	r3, ip
   165d4:	mov	r0, #0
   165d8:	bl	164d4 <close_stdout@@Base+0x1cf8>
   165dc:	add	sp, sp, #12
   165e0:	pop	{pc}		; (ldr pc, [sp], #4)
   165e4:	ldr	r3, [pc, #12]	; 165f8 <close_stdout@@Base+0x1e1c>
   165e8:	ldr	ip, [pc, #12]	; 165fc <close_stdout@@Base+0x1e20>
   165ec:	add	r3, pc, r3
   165f0:	ldr	r3, [r3, ip]
   165f4:	b	15d84 <close_stdout@@Base+0x15a8>
   165f8:	andeq	r7, r1, ip, lsl #20
   165fc:	andeq	r0, r0, r4, lsl r1
   16600:	mov	r2, r1
   16604:	mov	r1, r0
   16608:	mov	r0, #0
   1660c:	b	165e4 <close_stdout@@Base+0x1e08>
   16610:	mvn	r2, #0
   16614:	b	165e4 <close_stdout@@Base+0x1e08>
   16618:	mov	r1, r0
   1661c:	mov	r0, #0
   16620:	b	16610 <close_stdout@@Base+0x1e34>
   16624:	push	{r4, r5, r6, r7, lr}
   16628:	cmp	r1, #0
   1662c:	sub	sp, sp, #36	; 0x24
   16630:	ldr	r7, [pc, #896]	; 169b8 <close_stdout@@Base+0x21dc>
   16634:	mov	ip, r3
   16638:	mov	r5, r0
   1663c:	add	r7, pc, r7
   16640:	ldr	r4, [sp, #56]	; 0x38
   16644:	ldr	r6, [sp, #60]	; 0x3c
   16648:	beq	1698c <close_stdout@@Base+0x21b0>
   1664c:	str	r2, [sp]
   16650:	mov	r3, r1
   16654:	ldr	r2, [pc, #864]	; 169bc <close_stdout@@Base+0x21e0>
   16658:	mov	r1, #1
   1665c:	str	ip, [sp, #4]
   16660:	add	r2, pc, r2
   16664:	bl	113b0 <__fprintf_chk@plt>
   16668:	ldr	r1, [pc, #848]	; 169c0 <close_stdout@@Base+0x21e4>
   1666c:	mov	r2, #5
   16670:	mov	r0, #0
   16674:	add	r1, pc, r1
   16678:	bl	11218 <dcgettext@plt>
   1667c:	ldr	r2, [pc, #832]	; 169c4 <close_stdout@@Base+0x21e8>
   16680:	movw	ip, #2013	; 0x7dd
   16684:	mov	r1, #1
   16688:	ldr	r2, [r7, r2]
   1668c:	str	ip, [sp]
   16690:	mov	r3, r0
   16694:	mov	r0, r5
   16698:	bl	113b0 <__fprintf_chk@plt>
   1669c:	ldr	r1, [pc, #804]	; 169c8 <close_stdout@@Base+0x21ec>
   166a0:	mov	r0, #0
   166a4:	mov	r2, #5
   166a8:	add	r1, pc, r1
   166ac:	bl	11218 <dcgettext@plt>
   166b0:	mov	r1, r5
   166b4:	bl	11170 <fputs_unlocked@plt>
   166b8:	cmp	r6, #9
   166bc:	addls	pc, pc, r6, lsl #2
   166c0:	b	169a8 <close_stdout@@Base+0x21cc>
   166c4:	b	16758 <close_stdout@@Base+0x1f7c>
   166c8:	b	1675c <close_stdout@@Base+0x1f80>
   166cc:	b	1678c <close_stdout@@Base+0x1fb0>
   166d0:	b	167c0 <close_stdout@@Base+0x1fe4>
   166d4:	b	167fc <close_stdout@@Base+0x2020>
   166d8:	b	1683c <close_stdout@@Base+0x2060>
   166dc:	b	16884 <close_stdout@@Base+0x20a8>
   166e0:	b	168d4 <close_stdout@@Base+0x20f8>
   166e4:	b	1692c <close_stdout@@Base+0x2150>
   166e8:	b	166ec <close_stdout@@Base+0x1f10>
   166ec:	ldr	r1, [pc, #728]	; 169cc <close_stdout@@Base+0x21f0>
   166f0:	mov	r0, #0
   166f4:	add	r1, pc, r1
   166f8:	mov	r2, #5
   166fc:	bl	11218 <dcgettext@plt>
   16700:	ldm	r4, {r3, ip}
   16704:	mov	r1, #1
   16708:	str	ip, [sp]
   1670c:	ldr	ip, [r4, #8]
   16710:	str	ip, [sp, #4]
   16714:	ldr	ip, [r4, #12]
   16718:	str	ip, [sp, #8]
   1671c:	ldr	ip, [r4, #16]
   16720:	str	ip, [sp, #12]
   16724:	ldr	ip, [r4, #20]
   16728:	str	ip, [sp, #16]
   1672c:	ldr	ip, [r4, #24]
   16730:	str	ip, [sp, #20]
   16734:	ldr	ip, [r4, #28]
   16738:	str	ip, [sp, #24]
   1673c:	ldr	ip, [r4, #32]
   16740:	str	ip, [sp, #28]
   16744:	mov	r2, r0
   16748:	mov	r0, r5
   1674c:	bl	113b0 <__fprintf_chk@plt>
   16750:	add	sp, sp, #36	; 0x24
   16754:	pop	{r4, r5, r6, r7, pc}
   16758:	bl	11440 <abort@plt>
   1675c:	ldr	r1, [pc, #620]	; 169d0 <close_stdout@@Base+0x21f4>
   16760:	mov	r2, #5
   16764:	mov	r0, #0
   16768:	add	r1, pc, r1
   1676c:	bl	11218 <dcgettext@plt>
   16770:	ldr	r3, [r4]
   16774:	mov	r1, #1
   16778:	mov	r2, r0
   1677c:	mov	r0, r5
   16780:	add	sp, sp, #36	; 0x24
   16784:	pop	{r4, r5, r6, r7, lr}
   16788:	b	113b0 <__fprintf_chk@plt>
   1678c:	ldr	r1, [pc, #576]	; 169d4 <close_stdout@@Base+0x21f8>
   16790:	mov	r2, #5
   16794:	mov	r0, #0
   16798:	add	r1, pc, r1
   1679c:	bl	11218 <dcgettext@plt>
   167a0:	ldm	r4, {r3, ip}
   167a4:	mov	r1, #1
   167a8:	str	ip, [sp, #56]	; 0x38
   167ac:	mov	r2, r0
   167b0:	mov	r0, r5
   167b4:	add	sp, sp, #36	; 0x24
   167b8:	pop	{r4, r5, r6, r7, lr}
   167bc:	b	113b0 <__fprintf_chk@plt>
   167c0:	ldr	r1, [pc, #528]	; 169d8 <close_stdout@@Base+0x21fc>
   167c4:	mov	r2, #5
   167c8:	mov	r0, #0
   167cc:	add	r1, pc, r1
   167d0:	bl	11218 <dcgettext@plt>
   167d4:	ldm	r4, {r3, ip}
   167d8:	mov	r1, #1
   167dc:	str	ip, [sp, #56]	; 0x38
   167e0:	ldr	ip, [r4, #8]
   167e4:	str	ip, [sp, #60]	; 0x3c
   167e8:	mov	r2, r0
   167ec:	mov	r0, r5
   167f0:	add	sp, sp, #36	; 0x24
   167f4:	pop	{r4, r5, r6, r7, lr}
   167f8:	b	113b0 <__fprintf_chk@plt>
   167fc:	ldr	r1, [pc, #472]	; 169dc <close_stdout@@Base+0x2200>
   16800:	mov	r2, #5
   16804:	mov	r0, #0
   16808:	add	r1, pc, r1
   1680c:	bl	11218 <dcgettext@plt>
   16810:	ldm	r4, {r3, ip}
   16814:	mov	r1, #1
   16818:	str	ip, [sp]
   1681c:	ldr	ip, [r4, #8]
   16820:	str	ip, [sp, #4]
   16824:	ldr	ip, [r4, #12]
   16828:	str	ip, [sp, #8]
   1682c:	mov	r2, r0
   16830:	mov	r0, r5
   16834:	bl	113b0 <__fprintf_chk@plt>
   16838:	b	16750 <close_stdout@@Base+0x1f74>
   1683c:	ldr	r1, [pc, #412]	; 169e0 <close_stdout@@Base+0x2204>
   16840:	mov	r2, #5
   16844:	mov	r0, #0
   16848:	add	r1, pc, r1
   1684c:	bl	11218 <dcgettext@plt>
   16850:	ldm	r4, {r3, ip}
   16854:	mov	r1, #1
   16858:	str	ip, [sp]
   1685c:	ldr	ip, [r4, #8]
   16860:	str	ip, [sp, #4]
   16864:	ldr	ip, [r4, #12]
   16868:	str	ip, [sp, #8]
   1686c:	ldr	ip, [r4, #16]
   16870:	str	ip, [sp, #12]
   16874:	mov	r2, r0
   16878:	mov	r0, r5
   1687c:	bl	113b0 <__fprintf_chk@plt>
   16880:	b	16750 <close_stdout@@Base+0x1f74>
   16884:	ldr	r1, [pc, #344]	; 169e4 <close_stdout@@Base+0x2208>
   16888:	mov	r2, #5
   1688c:	mov	r0, #0
   16890:	add	r1, pc, r1
   16894:	bl	11218 <dcgettext@plt>
   16898:	ldm	r4, {r3, ip}
   1689c:	mov	r1, #1
   168a0:	str	ip, [sp]
   168a4:	ldr	ip, [r4, #8]
   168a8:	str	ip, [sp, #4]
   168ac:	ldr	ip, [r4, #12]
   168b0:	str	ip, [sp, #8]
   168b4:	ldr	ip, [r4, #16]
   168b8:	str	ip, [sp, #12]
   168bc:	ldr	ip, [r4, #20]
   168c0:	str	ip, [sp, #16]
   168c4:	mov	r2, r0
   168c8:	mov	r0, r5
   168cc:	bl	113b0 <__fprintf_chk@plt>
   168d0:	b	16750 <close_stdout@@Base+0x1f74>
   168d4:	ldr	r1, [pc, #268]	; 169e8 <close_stdout@@Base+0x220c>
   168d8:	mov	r2, #5
   168dc:	mov	r0, #0
   168e0:	add	r1, pc, r1
   168e4:	bl	11218 <dcgettext@plt>
   168e8:	ldm	r4, {r3, ip}
   168ec:	mov	r1, #1
   168f0:	str	ip, [sp]
   168f4:	ldr	ip, [r4, #8]
   168f8:	str	ip, [sp, #4]
   168fc:	ldr	ip, [r4, #12]
   16900:	str	ip, [sp, #8]
   16904:	ldr	ip, [r4, #16]
   16908:	str	ip, [sp, #12]
   1690c:	ldr	ip, [r4, #20]
   16910:	str	ip, [sp, #16]
   16914:	ldr	ip, [r4, #24]
   16918:	str	ip, [sp, #20]
   1691c:	mov	r2, r0
   16920:	mov	r0, r5
   16924:	bl	113b0 <__fprintf_chk@plt>
   16928:	b	16750 <close_stdout@@Base+0x1f74>
   1692c:	ldr	r1, [pc, #184]	; 169ec <close_stdout@@Base+0x2210>
   16930:	mov	r2, #5
   16934:	mov	r0, #0
   16938:	add	r1, pc, r1
   1693c:	bl	11218 <dcgettext@plt>
   16940:	ldm	r4, {r3, ip}
   16944:	mov	r1, #1
   16948:	str	ip, [sp]
   1694c:	ldr	ip, [r4, #8]
   16950:	str	ip, [sp, #4]
   16954:	ldr	ip, [r4, #12]
   16958:	str	ip, [sp, #8]
   1695c:	ldr	ip, [r4, #16]
   16960:	str	ip, [sp, #12]
   16964:	ldr	ip, [r4, #20]
   16968:	str	ip, [sp, #16]
   1696c:	ldr	ip, [r4, #24]
   16970:	str	ip, [sp, #20]
   16974:	ldr	ip, [r4, #28]
   16978:	str	ip, [sp, #24]
   1697c:	mov	r2, r0
   16980:	mov	r0, r5
   16984:	bl	113b0 <__fprintf_chk@plt>
   16988:	b	16750 <close_stdout@@Base+0x1f74>
   1698c:	str	r3, [sp]
   16990:	mov	r3, r2
   16994:	ldr	r2, [pc, #84]	; 169f0 <close_stdout@@Base+0x2214>
   16998:	mov	r1, #1
   1699c:	add	r2, pc, r2
   169a0:	bl	113b0 <__fprintf_chk@plt>
   169a4:	b	16668 <close_stdout@@Base+0x1e8c>
   169a8:	ldr	r1, [pc, #68]	; 169f4 <close_stdout@@Base+0x2218>
   169ac:	mov	r0, #0
   169b0:	add	r1, pc, r1
   169b4:	b	166f8 <close_stdout@@Base+0x1f1c>
   169b8:			; <UNDEFINED> instruction: 0x000179bc
   169bc:	andeq	r6, r0, r8, ror r6
   169c0:	andeq	r6, r0, r8, ror r6
   169c4:	andeq	r0, r0, ip, asr #2
   169c8:	andeq	r6, r0, r8, asr #12
   169cc:	ldrdeq	r6, [r0], -r4
   169d0:	andeq	r6, r0, r4, asr r6
   169d4:	andeq	r6, r0, r4, lsr r6
   169d8:	andeq	r6, r0, r8, lsl r6
   169dc:	strdeq	r6, [r0], -r8
   169e0:	ldrdeq	r6, [r0], -r8
   169e4:			; <UNDEFINED> instruction: 0x000065b4
   169e8:	andeq	r6, r0, ip, lsl #11
   169ec:	andeq	r6, r0, r0, ror #10
   169f0:	andeq	r6, r0, r8, asr #6
   169f4:	andeq	r6, r0, ip, asr #10
   169f8:	push	{r4, r5, lr}
   169fc:	sub	sp, sp, #12
   16a00:	ldr	r5, [sp, #24]
   16a04:	ldr	ip, [r5]
   16a08:	cmp	ip, #0
   16a0c:	beq	16a28 <close_stdout@@Base+0x224c>
   16a10:	mov	lr, r5
   16a14:	mov	ip, #0
   16a18:	ldr	r4, [lr, #4]!
   16a1c:	add	ip, ip, #1
   16a20:	cmp	r4, #0
   16a24:	bne	16a18 <close_stdout@@Base+0x223c>
   16a28:	stm	sp, {r5, ip}
   16a2c:	bl	16624 <close_stdout@@Base+0x1e48>
   16a30:	add	sp, sp, #12
   16a34:	pop	{r4, r5, pc}
   16a38:	push	{r4, r5, r6, r7, lr}
   16a3c:	sub	sp, sp, #60	; 0x3c
   16a40:	ldr	r4, [pc, #100]	; 16aac <close_stdout@@Base+0x22d0>
   16a44:	mov	ip, #0
   16a48:	ldr	r5, [pc, #96]	; 16ab0 <close_stdout@@Base+0x22d4>
   16a4c:	mov	lr, ip
   16a50:	add	r4, pc, r4
   16a54:	ldr	r6, [sp, #80]	; 0x50
   16a58:	ldr	r7, [r4, r5]
   16a5c:	add	r5, sp, #12
   16a60:	ldr	r4, [r7]
   16a64:	str	r4, [sp, #52]	; 0x34
   16a68:	ldr	r4, [r6, ip]
   16a6c:	cmp	r4, #0
   16a70:	str	r4, [r5, ip]
   16a74:	beq	16a88 <close_stdout@@Base+0x22ac>
   16a78:	add	lr, lr, #1
   16a7c:	add	ip, ip, #4
   16a80:	cmp	lr, #10
   16a84:	bne	16a68 <close_stdout@@Base+0x228c>
   16a88:	stm	sp, {r5, lr}
   16a8c:	bl	16624 <close_stdout@@Base+0x1e48>
   16a90:	ldr	r2, [sp, #52]	; 0x34
   16a94:	ldr	r3, [r7]
   16a98:	cmp	r2, r3
   16a9c:	bne	16aa8 <close_stdout@@Base+0x22cc>
   16aa0:	add	sp, sp, #60	; 0x3c
   16aa4:	pop	{r4, r5, r6, r7, pc}
   16aa8:	bl	11224 <__stack_chk_fail@plt>
   16aac:	andeq	r7, r1, r8, lsr #11
   16ab0:	andeq	r0, r0, r8, lsl r1
   16ab4:	push	{r3}		; (str r3, [sp, #-4]!)
   16ab8:	push	{r4, lr}
   16abc:	sub	sp, sp, #20
   16ac0:	ldr	lr, [pc, #72]	; 16b10 <close_stdout@@Base+0x2334>
   16ac4:	add	ip, sp, #32
   16ac8:	ldr	r4, [pc, #68]	; 16b14 <close_stdout@@Base+0x2338>
   16acc:	add	lr, pc, lr
   16ad0:	ldr	r3, [sp, #28]
   16ad4:	ldr	r4, [lr, r4]
   16ad8:	str	ip, [sp]
   16adc:	str	ip, [sp, #8]
   16ae0:	ldr	ip, [r4]
   16ae4:	str	ip, [sp, #12]
   16ae8:	bl	16a38 <close_stdout@@Base+0x225c>
   16aec:	ldr	r2, [sp, #12]
   16af0:	ldr	r3, [r4]
   16af4:	cmp	r2, r3
   16af8:	bne	16b0c <close_stdout@@Base+0x2330>
   16afc:	add	sp, sp, #20
   16b00:	pop	{r4, lr}
   16b04:	add	sp, sp, #4
   16b08:	bx	lr
   16b0c:	bl	11224 <__stack_chk_fail@plt>
   16b10:	andeq	r7, r1, ip, lsr #10
   16b14:	andeq	r0, r0, r8, lsl r1
   16b18:	ldr	r1, [pc, #132]	; 16ba4 <close_stdout@@Base+0x23c8>
   16b1c:	mov	r2, #5
   16b20:	push	{r4, lr}
   16b24:	add	r1, pc, r1
   16b28:	mov	r0, #0
   16b2c:	ldr	r4, [pc, #116]	; 16ba8 <close_stdout@@Base+0x23cc>
   16b30:	bl	11218 <dcgettext@plt>
   16b34:	ldr	r2, [pc, #112]	; 16bac <close_stdout@@Base+0x23d0>
   16b38:	add	r4, pc, r4
   16b3c:	add	r2, pc, r2
   16b40:	mov	r1, r0
   16b44:	mov	r0, #1
   16b48:	bl	11398 <__printf_chk@plt>
   16b4c:	ldr	r1, [pc, #92]	; 16bb0 <close_stdout@@Base+0x23d4>
   16b50:	mov	r2, #5
   16b54:	mov	r0, #0
   16b58:	add	r1, pc, r1
   16b5c:	bl	11218 <dcgettext@plt>
   16b60:	ldr	r2, [pc, #76]	; 16bb4 <close_stdout@@Base+0x23d8>
   16b64:	ldr	r3, [pc, #76]	; 16bb8 <close_stdout@@Base+0x23dc>
   16b68:	add	r2, pc, r2
   16b6c:	add	r3, pc, r3
   16b70:	mov	r1, r0
   16b74:	mov	r0, #1
   16b78:	bl	11398 <__printf_chk@plt>
   16b7c:	ldr	r1, [pc, #56]	; 16bbc <close_stdout@@Base+0x23e0>
   16b80:	mov	r0, #0
   16b84:	mov	r2, #5
   16b88:	add	r1, pc, r1
   16b8c:	bl	11218 <dcgettext@plt>
   16b90:	ldr	r3, [pc, #40]	; 16bc0 <close_stdout@@Base+0x23e4>
   16b94:	ldr	r3, [r4, r3]
   16b98:	pop	{r4, lr}
   16b9c:	ldr	r1, [r3]
   16ba0:	b	11170 <fputs_unlocked@plt>
   16ba4:	andeq	r6, r0, r4, lsl r4
   16ba8:	andeq	r7, r1, r0, asr #9
   16bac:	andeq	r6, r0, r4, lsl r4
   16bb0:	andeq	r6, r0, r0, lsl r4
   16bb4:	andeq	r5, r0, r8, lsr fp
   16bb8:	andeq	r5, r0, r4, asr #22
   16bbc:	strdeq	r6, [r0], -r4
   16bc0:	andeq	r0, r0, ip, lsr r1
   16bc4:	push	{r4, lr}
   16bc8:	mov	r4, r0
   16bcc:	bl	112d8 <malloc@plt>
   16bd0:	rsbs	r3, r0, #1
   16bd4:	movcc	r3, #0
   16bd8:	cmp	r4, #0
   16bdc:	moveq	r3, #0
   16be0:	cmp	r3, #0
   16be4:	popeq	{r4, pc}
   16be8:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16bec:	push	{r3, r4, r5, lr}
   16bf0:	mov	r4, r0
   16bf4:	mvn	r0, #0
   16bf8:	mov	r5, r1
   16bfc:	bl	19f1c <close_stdout@@Base+0x5740>
   16c00:	cmp	r0, r4
   16c04:	bcc	16c14 <close_stdout@@Base+0x2438>
   16c08:	mul	r0, r4, r5
   16c0c:	pop	{r3, r4, r5, lr}
   16c10:	b	16bc4 <close_stdout@@Base+0x23e8>
   16c14:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16c18:	b	16bc4 <close_stdout@@Base+0x23e8>
   16c1c:	rsbs	r3, r1, #1
   16c20:	push	{r4, lr}
   16c24:	movcc	r3, #0
   16c28:	cmp	r0, #0
   16c2c:	mov	r4, r1
   16c30:	moveq	r3, #0
   16c34:	cmp	r3, #0
   16c38:	bne	16c5c <close_stdout@@Base+0x2480>
   16c3c:	bl	11230 <realloc@plt>
   16c40:	rsbs	r3, r0, #1
   16c44:	movcc	r3, #0
   16c48:	cmp	r4, #0
   16c4c:	moveq	r3, #0
   16c50:	cmp	r3, #0
   16c54:	popeq	{r4, pc}
   16c58:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16c5c:	bl	111d0 <free@plt>
   16c60:	mov	r0, #0
   16c64:	pop	{r4, pc}
   16c68:	push	{r4, r5, r6, lr}
   16c6c:	mov	r5, r1
   16c70:	mov	r6, r0
   16c74:	mov	r1, r2
   16c78:	mvn	r0, #0
   16c7c:	mov	r4, r2
   16c80:	bl	19f1c <close_stdout@@Base+0x5740>
   16c84:	cmp	r0, r5
   16c88:	bcc	16c9c <close_stdout@@Base+0x24c0>
   16c8c:	mov	r0, r6
   16c90:	mul	r1, r5, r4
   16c94:	pop	{r4, r5, r6, lr}
   16c98:	b	16c1c <close_stdout@@Base+0x2440>
   16c9c:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16ca0:	push	{r3, r4, r5, r6, r7, lr}
   16ca4:	subs	r7, r0, #0
   16ca8:	mov	r5, r1
   16cac:	mov	r6, r2
   16cb0:	ldr	r4, [r1]
   16cb4:	beq	16cec <close_stdout@@Base+0x2510>
   16cb8:	movw	r0, #43690	; 0xaaaa
   16cbc:	mov	r1, r2
   16cc0:	bfi	r0, r0, #16, #16
   16cc4:	bl	19f1c <close_stdout@@Base+0x5740>
   16cc8:	cmp	r4, r0
   16ccc:	addcc	r3, r4, #1
   16cd0:	addcc	r4, r4, r3, lsr #1
   16cd4:	bcs	16d10 <close_stdout@@Base+0x2534>
   16cd8:	str	r4, [r5]
   16cdc:	mov	r0, r7
   16ce0:	mul	r1, r6, r4
   16ce4:	pop	{r3, r4, r5, r6, r7, lr}
   16ce8:	b	16c1c <close_stdout@@Base+0x2440>
   16cec:	cmp	r4, #0
   16cf0:	bne	16cd8 <close_stdout@@Base+0x24fc>
   16cf4:	mov	r0, #64	; 0x40
   16cf8:	mov	r1, r2
   16cfc:	bl	19f1c <close_stdout@@Base+0x5740>
   16d00:	cmp	r0, #0
   16d04:	movne	r4, r0
   16d08:	addeq	r4, r0, #1
   16d0c:	b	16cd8 <close_stdout@@Base+0x24fc>
   16d10:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16d14:	cmp	r0, #0
   16d18:	push	{r3, lr}
   16d1c:	ldr	r3, [r1]
   16d20:	beq	16d4c <close_stdout@@Base+0x2570>
   16d24:	movw	r2, #43689	; 0xaaa9
   16d28:	movt	r2, #43690	; 0xaaaa
   16d2c:	cmp	r3, r2
   16d30:	addls	r2, r3, #1
   16d34:	addls	r3, r3, r2, lsr #1
   16d38:	bhi	16d64 <close_stdout@@Base+0x2588>
   16d3c:	str	r3, [r1]
   16d40:	mov	r1, r3
   16d44:	pop	{r3, lr}
   16d48:	b	16c1c <close_stdout@@Base+0x2440>
   16d4c:	cmp	r3, #0
   16d50:	moveq	r3, #64	; 0x40
   16d54:	str	r3, [r1]
   16d58:	mov	r1, r3
   16d5c:	pop	{r3, lr}
   16d60:	b	16c1c <close_stdout@@Base+0x2440>
   16d64:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16d68:	push	{r4, lr}
   16d6c:	mov	r4, r0
   16d70:	bl	16bc4 <close_stdout@@Base+0x23e8>
   16d74:	mov	r2, r4
   16d78:	mov	r1, #0
   16d7c:	pop	{r4, lr}
   16d80:	b	11380 <memset@plt>
   16d84:	push	{r3, lr}
   16d88:	bl	11164 <calloc@plt>
   16d8c:	cmp	r0, #0
   16d90:	popne	{r3, pc}
   16d94:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16d98:	push	{r3, r4, r5, lr}
   16d9c:	mov	r4, r1
   16da0:	mov	r5, r0
   16da4:	mov	r0, r1
   16da8:	bl	16bc4 <close_stdout@@Base+0x23e8>
   16dac:	mov	r1, r5
   16db0:	mov	r2, r4
   16db4:	pop	{r3, r4, r5, lr}
   16db8:	b	111e8 <memcpy@plt>
   16dbc:	push	{r4, lr}
   16dc0:	mov	r4, r0
   16dc4:	bl	11338 <strlen@plt>
   16dc8:	add	r1, r0, #1
   16dcc:	mov	r0, r4
   16dd0:	pop	{r4, lr}
   16dd4:	b	16d98 <close_stdout@@Base+0x25bc>
   16dd8:	ldr	r3, [pc, #64]	; 16e20 <close_stdout@@Base+0x2644>
   16ddc:	mov	r2, #5
   16de0:	ldr	ip, [pc, #60]	; 16e24 <close_stdout@@Base+0x2648>
   16de4:	mov	r0, #0
   16de8:	add	r3, pc, r3
   16dec:	ldr	r1, [pc, #52]	; 16e28 <close_stdout@@Base+0x264c>
   16df0:	push	{r4, lr}
   16df4:	add	r1, pc, r1
   16df8:	ldr	r3, [r3, ip]
   16dfc:	ldr	r4, [r3]
   16e00:	bl	11218 <dcgettext@plt>
   16e04:	ldr	r2, [pc, #32]	; 16e2c <close_stdout@@Base+0x2650>
   16e08:	mov	r1, #0
   16e0c:	add	r2, pc, r2
   16e10:	mov	r3, r0
   16e14:	mov	r0, r4
   16e18:	bl	112b4 <error@plt>
   16e1c:	bl	11440 <abort@plt>
   16e20:	andeq	r7, r1, r0, lsl r2
   16e24:	andeq	r0, r0, r0, asr #2
   16e28:	strdeq	r6, [r0], -r8
   16e2c:	andeq	r4, r0, r8, asr #9
   16e30:	push	{r3, lr}
   16e34:	bl	11248 <__strndup@plt>
   16e38:	cmp	r0, #0
   16e3c:	popne	{r3, pc}
   16e40:	bl	16dd8 <close_stdout@@Base+0x25fc>
   16e44:	ldr	ip, [pc, #1584]	; 1747c <close_stdout@@Base+0x2ca0>
   16e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e4c:	mov	r7, r2
   16e50:	ldr	r2, [pc, #1576]	; 17480 <close_stdout@@Base+0x2ca4>
   16e54:	add	ip, pc, ip
   16e58:	mov	r9, r3
   16e5c:	sub	sp, sp, #28
   16e60:	cmp	r7, #36	; 0x24
   16e64:	mov	r4, r1
   16e68:	ldr	r2, [ip, r2]
   16e6c:	mov	r1, ip
   16e70:	mov	r5, r0
   16e74:	ldr	r8, [sp, #64]	; 0x40
   16e78:	ldr	r3, [r2]
   16e7c:	str	r2, [sp, #12]
   16e80:	str	r3, [sp, #20]
   16e84:	bhi	1745c <close_stdout@@Base+0x2c80>
   16e88:	cmp	r4, #0
   16e8c:	mov	fp, #0
   16e90:	addeq	r4, sp, #16
   16e94:	bl	1135c <__errno_location@plt>
   16e98:	mov	r2, r7
   16e9c:	mov	r1, r4
   16ea0:	mov	sl, r0
   16ea4:	mov	r0, r5
   16ea8:	str	fp, [sl]
   16eac:	bl	111ac <strtol@plt>
   16eb0:	ldr	r7, [r4]
   16eb4:	cmp	r7, r5
   16eb8:	mov	r6, r0
   16ebc:	beq	17054 <close_stdout@@Base+0x2878>
   16ec0:	ldr	fp, [sl]
   16ec4:	cmp	fp, #0
   16ec8:	bne	16f04 <close_stdout@@Base+0x2728>
   16ecc:	cmp	r8, #0
   16ed0:	beq	16ee0 <close_stdout@@Base+0x2704>
   16ed4:	ldrb	r5, [r7]
   16ed8:	cmp	r5, #0
   16edc:	bne	16f14 <close_stdout@@Base+0x2738>
   16ee0:	mov	r0, fp
   16ee4:	str	r6, [r9]
   16ee8:	ldr	r1, [sp, #12]
   16eec:	ldr	r2, [sp, #20]
   16ef0:	ldr	r3, [r1]
   16ef4:	cmp	r2, r3
   16ef8:	bne	17458 <close_stdout@@Base+0x2c7c>
   16efc:	add	sp, sp, #28
   16f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f04:	cmp	fp, #34	; 0x22
   16f08:	beq	17084 <close_stdout@@Base+0x28a8>
   16f0c:	mov	r0, #4
   16f10:	b	16ee8 <close_stdout@@Base+0x270c>
   16f14:	mov	r0, r8
   16f18:	mov	r1, r5
   16f1c:	bl	11344 <strchr@plt>
   16f20:	cmp	r0, #0
   16f24:	beq	17048 <close_stdout@@Base+0x286c>
   16f28:	mov	r0, r8
   16f2c:	mov	r1, #48	; 0x30
   16f30:	bl	11344 <strchr@plt>
   16f34:	cmp	r0, #0
   16f38:	beq	16f58 <close_stdout@@Base+0x277c>
   16f3c:	ldrb	r2, [r7, #1]
   16f40:	cmp	r2, #68	; 0x44
   16f44:	beq	1708c <close_stdout@@Base+0x28b0>
   16f48:	cmp	r2, #105	; 0x69
   16f4c:	beq	17418 <close_stdout@@Base+0x2c3c>
   16f50:	cmp	r2, #66	; 0x42
   16f54:	beq	1708c <close_stdout@@Base+0x28b0>
   16f58:	mov	sl, #1
   16f5c:	mov	r8, #1024	; 0x400
   16f60:	sub	r5, r5, #66	; 0x42
   16f64:	cmp	r5, #53	; 0x35
   16f68:	addls	pc, pc, r5, lsl #2
   16f6c:	b	17048 <close_stdout@@Base+0x286c>
   16f70:	b	171bc <close_stdout@@Base+0x29e0>
   16f74:	b	17048 <close_stdout@@Base+0x286c>
   16f78:	b	17048 <close_stdout@@Base+0x286c>
   16f7c:	b	17154 <close_stdout@@Base+0x2978>
   16f80:	b	17048 <close_stdout@@Base+0x286c>
   16f84:	b	170ec <close_stdout@@Base+0x2910>
   16f88:	b	17048 <close_stdout@@Base+0x286c>
   16f8c:	b	17048 <close_stdout@@Base+0x286c>
   16f90:	b	17048 <close_stdout@@Base+0x286c>
   16f94:	b	170b8 <close_stdout@@Base+0x28dc>
   16f98:	b	17048 <close_stdout@@Base+0x286c>
   16f9c:	b	173b8 <close_stdout@@Base+0x2bdc>
   16fa0:	b	17048 <close_stdout@@Base+0x286c>
   16fa4:	b	17048 <close_stdout@@Base+0x286c>
   16fa8:	b	17350 <close_stdout@@Base+0x2b74>
   16fac:	b	17048 <close_stdout@@Base+0x286c>
   16fb0:	b	17048 <close_stdout@@Base+0x286c>
   16fb4:	b	17048 <close_stdout@@Base+0x286c>
   16fb8:	b	172e8 <close_stdout@@Base+0x2b0c>
   16fbc:	b	17048 <close_stdout@@Base+0x286c>
   16fc0:	b	17048 <close_stdout@@Base+0x286c>
   16fc4:	b	17048 <close_stdout@@Base+0x286c>
   16fc8:	b	17048 <close_stdout@@Base+0x286c>
   16fcc:	b	17280 <close_stdout@@Base+0x2aa4>
   16fd0:	b	17218 <close_stdout@@Base+0x2a3c>
   16fd4:	b	17048 <close_stdout@@Base+0x286c>
   16fd8:	b	17048 <close_stdout@@Base+0x286c>
   16fdc:	b	17048 <close_stdout@@Base+0x286c>
   16fe0:	b	17048 <close_stdout@@Base+0x286c>
   16fe4:	b	17048 <close_stdout@@Base+0x286c>
   16fe8:	b	17048 <close_stdout@@Base+0x286c>
   16fec:	b	17048 <close_stdout@@Base+0x286c>
   16ff0:	b	171fc <close_stdout@@Base+0x2a20>
   16ff4:	b	17098 <close_stdout@@Base+0x28bc>
   16ff8:	b	17048 <close_stdout@@Base+0x286c>
   16ffc:	b	17048 <close_stdout@@Base+0x286c>
   17000:	b	17048 <close_stdout@@Base+0x286c>
   17004:	b	170ec <close_stdout@@Base+0x2910>
   17008:	b	17048 <close_stdout@@Base+0x286c>
   1700c:	b	17048 <close_stdout@@Base+0x286c>
   17010:	b	17048 <close_stdout@@Base+0x286c>
   17014:	b	170b8 <close_stdout@@Base+0x28dc>
   17018:	b	17048 <close_stdout@@Base+0x286c>
   1701c:	b	173b8 <close_stdout@@Base+0x2bdc>
   17020:	b	17048 <close_stdout@@Base+0x286c>
   17024:	b	17048 <close_stdout@@Base+0x286c>
   17028:	b	17048 <close_stdout@@Base+0x286c>
   1702c:	b	17048 <close_stdout@@Base+0x286c>
   17030:	b	17048 <close_stdout@@Base+0x286c>
   17034:	b	17048 <close_stdout@@Base+0x286c>
   17038:	b	172e8 <close_stdout@@Base+0x2b0c>
   1703c:	b	17048 <close_stdout@@Base+0x286c>
   17040:	b	17048 <close_stdout@@Base+0x286c>
   17044:	b	171e0 <close_stdout@@Base+0x2a04>
   17048:	str	r6, [r9]
   1704c:	orr	r0, fp, #2
   17050:	b	16ee8 <close_stdout@@Base+0x270c>
   17054:	cmp	r8, fp
   17058:	beq	16f0c <close_stdout@@Base+0x2730>
   1705c:	ldrb	r5, [r5]
   17060:	cmp	r5, fp
   17064:	beq	16f0c <close_stdout@@Base+0x2730>
   17068:	mov	r0, r8
   1706c:	mov	r1, r5
   17070:	bl	11344 <strchr@plt>
   17074:	cmp	r0, fp
   17078:	movne	r6, #1
   1707c:	bne	16f28 <close_stdout@@Base+0x274c>
   17080:	b	16f0c <close_stdout@@Base+0x2730>
   17084:	mov	fp, #1
   17088:	b	16ecc <close_stdout@@Base+0x26f0>
   1708c:	mov	sl, #2
   17090:	mov	r8, #1000	; 0x3e8
   17094:	b	16f60 <close_stdout@@Base+0x2784>
   17098:	mov	r5, #0
   1709c:	add	r2, r7, sl
   170a0:	str	r2, [r4]
   170a4:	ldrb	r2, [r7, sl]
   170a8:	orr	fp, fp, r5
   170ac:	cmp	r2, #0
   170b0:	orrne	fp, fp, #2
   170b4:	b	16ee0 <close_stdout@@Base+0x2704>
   170b8:	mov	r0, #-2147483648	; 0x80000000
   170bc:	mov	r1, r8
   170c0:	bl	1a128 <close_stdout@@Base+0x594c>
   170c4:	cmp	r6, r0
   170c8:	blt	17430 <close_stdout@@Base+0x2c54>
   170cc:	mvn	r0, #-2147483648	; 0x80000000
   170d0:	mov	r1, r8
   170d4:	bl	1a128 <close_stdout@@Base+0x594c>
   170d8:	cmp	r6, r0
   170dc:	bgt	171d4 <close_stdout@@Base+0x29f8>
   170e0:	mul	r6, r8, r6
   170e4:	mov	r5, #0
   170e8:	b	1709c <close_stdout@@Base+0x28c0>
   170ec:	mov	r0, #-2147483648	; 0x80000000
   170f0:	mov	r1, r8
   170f4:	bl	1a128 <close_stdout@@Base+0x594c>
   170f8:	mov	r5, #0
   170fc:	mov	r2, #3
   17100:	mov	ip, r0
   17104:	cmp	ip, r6
   17108:	movgt	r6, #-2147483648	; 0x80000000
   1710c:	movgt	r1, #1
   17110:	bgt	17144 <close_stdout@@Base+0x2968>
   17114:	mov	r1, r8
   17118:	mvn	r0, #-2147483648	; 0x80000000
   1711c:	str	r2, [sp, #8]
   17120:	str	ip, [sp, #4]
   17124:	bl	1a128 <close_stdout@@Base+0x594c>
   17128:	ldr	r2, [sp, #8]
   1712c:	ldr	ip, [sp, #4]
   17130:	cmp	r0, r6
   17134:	mulge	r6, r8, r6
   17138:	movge	r1, #0
   1713c:	mvnlt	r6, #-2147483648	; 0x80000000
   17140:	movlt	r1, #1
   17144:	subs	r2, r2, #1
   17148:	orr	r5, r5, r1
   1714c:	bne	17104 <close_stdout@@Base+0x2928>
   17150:	b	1709c <close_stdout@@Base+0x28c0>
   17154:	mov	r0, #-2147483648	; 0x80000000
   17158:	mov	r1, r8
   1715c:	bl	1a128 <close_stdout@@Base+0x594c>
   17160:	mov	r5, #0
   17164:	mov	r2, #6
   17168:	mov	ip, r0
   1716c:	cmp	ip, r6
   17170:	movgt	r6, #-2147483648	; 0x80000000
   17174:	movgt	r1, #1
   17178:	bgt	171ac <close_stdout@@Base+0x29d0>
   1717c:	mov	r1, r8
   17180:	mvn	r0, #-2147483648	; 0x80000000
   17184:	str	r2, [sp, #8]
   17188:	str	ip, [sp, #4]
   1718c:	bl	1a128 <close_stdout@@Base+0x594c>
   17190:	ldr	r2, [sp, #8]
   17194:	ldr	ip, [sp, #4]
   17198:	cmp	r0, r6
   1719c:	mulge	r6, r8, r6
   171a0:	movge	r1, #0
   171a4:	mvnlt	r6, #-2147483648	; 0x80000000
   171a8:	movlt	r1, #1
   171ac:	subs	r2, r2, #1
   171b0:	orr	r5, r5, r1
   171b4:	bne	1716c <close_stdout@@Base+0x2990>
   171b8:	b	1709c <close_stdout@@Base+0x28c0>
   171bc:	cmn	r6, #2097152	; 0x200000
   171c0:	blt	17430 <close_stdout@@Base+0x2c54>
   171c4:	cmp	r6, #2097152	; 0x200000
   171c8:	lsllt	r6, r6, #10
   171cc:	movlt	r5, #0
   171d0:	blt	1709c <close_stdout@@Base+0x28c0>
   171d4:	mvn	r6, #-2147483648	; 0x80000000
   171d8:	mov	r5, #1
   171dc:	b	1709c <close_stdout@@Base+0x28c0>
   171e0:	cmp	r6, #-1073741824	; 0xc0000000
   171e4:	blt	17430 <close_stdout@@Base+0x2c54>
   171e8:	cmn	r6, #-1073741823	; 0xc0000001
   171ec:	lslle	r6, r6, #1
   171f0:	movle	r5, #0
   171f4:	ble	1709c <close_stdout@@Base+0x28c0>
   171f8:	b	171d4 <close_stdout@@Base+0x29f8>
   171fc:	cmn	r6, #4194304	; 0x400000
   17200:	blt	17430 <close_stdout@@Base+0x2c54>
   17204:	cmp	r6, #4194304	; 0x400000
   17208:	lsllt	r6, r6, #9
   1720c:	movlt	r5, #0
   17210:	blt	1709c <close_stdout@@Base+0x28c0>
   17214:	b	171d4 <close_stdout@@Base+0x29f8>
   17218:	mov	r0, #-2147483648	; 0x80000000
   1721c:	mov	r1, r8
   17220:	bl	1a128 <close_stdout@@Base+0x594c>
   17224:	mov	r5, #0
   17228:	mov	r2, #7
   1722c:	mov	ip, r0
   17230:	cmp	ip, r6
   17234:	movgt	r6, #-2147483648	; 0x80000000
   17238:	movgt	r1, #1
   1723c:	bgt	17270 <close_stdout@@Base+0x2a94>
   17240:	mov	r1, r8
   17244:	mvn	r0, #-2147483648	; 0x80000000
   17248:	str	r2, [sp, #8]
   1724c:	str	ip, [sp, #4]
   17250:	bl	1a128 <close_stdout@@Base+0x594c>
   17254:	ldr	r2, [sp, #8]
   17258:	ldr	ip, [sp, #4]
   1725c:	cmp	r0, r6
   17260:	mulge	r6, r8, r6
   17264:	movge	r1, #0
   17268:	mvnlt	r6, #-2147483648	; 0x80000000
   1726c:	movlt	r1, #1
   17270:	subs	r2, r2, #1
   17274:	orr	r5, r5, r1
   17278:	bne	17230 <close_stdout@@Base+0x2a54>
   1727c:	b	1709c <close_stdout@@Base+0x28c0>
   17280:	mov	r0, #-2147483648	; 0x80000000
   17284:	mov	r1, r8
   17288:	bl	1a128 <close_stdout@@Base+0x594c>
   1728c:	mov	r5, #0
   17290:	mov	r2, #8
   17294:	mov	ip, r0
   17298:	cmp	ip, r6
   1729c:	movgt	r6, #-2147483648	; 0x80000000
   172a0:	movgt	r1, #1
   172a4:	bgt	172d8 <close_stdout@@Base+0x2afc>
   172a8:	mov	r1, r8
   172ac:	mvn	r0, #-2147483648	; 0x80000000
   172b0:	str	r2, [sp, #8]
   172b4:	str	ip, [sp, #4]
   172b8:	bl	1a128 <close_stdout@@Base+0x594c>
   172bc:	ldr	r2, [sp, #8]
   172c0:	ldr	ip, [sp, #4]
   172c4:	cmp	r0, r6
   172c8:	mulge	r6, r8, r6
   172cc:	movge	r1, #0
   172d0:	mvnlt	r6, #-2147483648	; 0x80000000
   172d4:	movlt	r1, #1
   172d8:	subs	r2, r2, #1
   172dc:	orr	r5, r5, r1
   172e0:	bne	17298 <close_stdout@@Base+0x2abc>
   172e4:	b	1709c <close_stdout@@Base+0x28c0>
   172e8:	mov	r0, #-2147483648	; 0x80000000
   172ec:	mov	r1, r8
   172f0:	bl	1a128 <close_stdout@@Base+0x594c>
   172f4:	mov	r5, #0
   172f8:	mov	r2, #4
   172fc:	mov	ip, r0
   17300:	cmp	ip, r6
   17304:	movgt	r6, #-2147483648	; 0x80000000
   17308:	movgt	r1, #1
   1730c:	bgt	17340 <close_stdout@@Base+0x2b64>
   17310:	mov	r1, r8
   17314:	mvn	r0, #-2147483648	; 0x80000000
   17318:	str	r2, [sp, #8]
   1731c:	str	ip, [sp, #4]
   17320:	bl	1a128 <close_stdout@@Base+0x594c>
   17324:	ldr	r2, [sp, #8]
   17328:	ldr	ip, [sp, #4]
   1732c:	cmp	r0, r6
   17330:	mulge	r6, r8, r6
   17334:	movge	r1, #0
   17338:	mvnlt	r6, #-2147483648	; 0x80000000
   1733c:	movlt	r1, #1
   17340:	subs	r2, r2, #1
   17344:	orr	r5, r5, r1
   17348:	bne	17300 <close_stdout@@Base+0x2b24>
   1734c:	b	1709c <close_stdout@@Base+0x28c0>
   17350:	mov	r0, #-2147483648	; 0x80000000
   17354:	mov	r1, r8
   17358:	bl	1a128 <close_stdout@@Base+0x594c>
   1735c:	mov	r5, #0
   17360:	mov	r2, #5
   17364:	mov	ip, r0
   17368:	cmp	ip, r6
   1736c:	movgt	r6, #-2147483648	; 0x80000000
   17370:	movgt	r1, #1
   17374:	bgt	173a8 <close_stdout@@Base+0x2bcc>
   17378:	mov	r1, r8
   1737c:	mvn	r0, #-2147483648	; 0x80000000
   17380:	str	r2, [sp, #8]
   17384:	str	ip, [sp, #4]
   17388:	bl	1a128 <close_stdout@@Base+0x594c>
   1738c:	ldr	r2, [sp, #8]
   17390:	ldr	ip, [sp, #4]
   17394:	cmp	r0, r6
   17398:	mulge	r6, r8, r6
   1739c:	movge	r1, #0
   173a0:	mvnlt	r6, #-2147483648	; 0x80000000
   173a4:	movlt	r1, #1
   173a8:	subs	r2, r2, #1
   173ac:	orr	r5, r5, r1
   173b0:	bne	17368 <close_stdout@@Base+0x2b8c>
   173b4:	b	1709c <close_stdout@@Base+0x28c0>
   173b8:	mov	r0, #-2147483648	; 0x80000000
   173bc:	mov	r1, r8
   173c0:	bl	1a128 <close_stdout@@Base+0x594c>
   173c4:	cmp	r6, r0
   173c8:	mov	r5, r0
   173cc:	blt	1743c <close_stdout@@Base+0x2c60>
   173d0:	mvn	r0, #-2147483648	; 0x80000000
   173d4:	mov	r1, r8
   173d8:	bl	1a128 <close_stdout@@Base+0x594c>
   173dc:	cmp	r6, r0
   173e0:	bgt	1744c <close_stdout@@Base+0x2c70>
   173e4:	mul	r3, r6, r8
   173e8:	mov	r2, #0
   173ec:	cmp	r3, r5
   173f0:	movlt	r6, #-2147483648	; 0x80000000
   173f4:	movlt	r5, #1
   173f8:	blt	17410 <close_stdout@@Base+0x2c34>
   173fc:	cmp	r0, r3
   17400:	mvnlt	r6, #-2147483648	; 0x80000000
   17404:	movlt	r5, #1
   17408:	mulge	r6, r3, r8
   1740c:	movge	r5, #0
   17410:	orr	r5, r5, r2
   17414:	b	1709c <close_stdout@@Base+0x28c0>
   17418:	ldrb	sl, [r7, #2]
   1741c:	mov	r8, #1024	; 0x400
   17420:	cmp	sl, #66	; 0x42
   17424:	moveq	sl, #3
   17428:	movne	sl, #1
   1742c:	b	16f60 <close_stdout@@Base+0x2784>
   17430:	mov	r6, #-2147483648	; 0x80000000
   17434:	mov	r5, #1
   17438:	b	1709c <close_stdout@@Base+0x28c0>
   1743c:	mov	r2, #1
   17440:	mov	r6, #-2147483648	; 0x80000000
   17444:	mov	r5, r2
   17448:	b	17410 <close_stdout@@Base+0x2c34>
   1744c:	mov	r2, #1
   17450:	mvn	r3, #-2147483648	; 0x80000000
   17454:	b	173fc <close_stdout@@Base+0x2c20>
   17458:	bl	11224 <__stack_chk_fail@plt>
   1745c:	ldr	r0, [pc, #32]	; 17484 <close_stdout@@Base+0x2ca8>
   17460:	mov	r2, #96	; 0x60
   17464:	ldr	r1, [pc, #28]	; 17488 <close_stdout@@Base+0x2cac>
   17468:	ldr	r3, [pc, #28]	; 1748c <close_stdout@@Base+0x2cb0>
   1746c:	add	r0, pc, r0
   17470:	add	r1, pc, r1
   17474:	add	r3, pc, r3
   17478:	bl	11464 <__assert_fail@plt>
   1747c:	andeq	r7, r1, r4, lsr #3
   17480:	andeq	r0, r0, r8, lsl r1
   17484:	muleq	r0, ip, fp
   17488:	andeq	r5, r0, r0, asr #23
   1748c:	andeq	r5, r0, ip, lsl #23
   17490:	ldr	ip, [pc, #1852]	; 17bd4 <close_stdout@@Base+0x33f8>
   17494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17498:	mov	fp, r2
   1749c:	ldr	r2, [pc, #1844]	; 17bd8 <close_stdout@@Base+0x33fc>
   174a0:	add	ip, pc, ip
   174a4:	mov	r9, r3
   174a8:	sub	sp, sp, #36	; 0x24
   174ac:	mov	r3, ip
   174b0:	cmp	fp, #36	; 0x24
   174b4:	ldr	sl, [ip, r2]
   174b8:	mov	r5, r0
   174bc:	mov	r8, r1
   174c0:	ldr	r6, [sp, #72]	; 0x48
   174c4:	ldr	r3, [sl]
   174c8:	str	r3, [sp, #28]
   174cc:	bhi	17bb4 <close_stdout@@Base+0x33d8>
   174d0:	cmp	r1, #0
   174d4:	addeq	r8, sp, #24
   174d8:	bl	11320 <__ctype_b_loc@plt>
   174dc:	ldrb	r3, [r5]
   174e0:	mov	r1, r5
   174e4:	ldr	r0, [r0]
   174e8:	b	174f0 <close_stdout@@Base+0x2d14>
   174ec:	ldrb	r3, [r1, #1]!
   174f0:	lsl	r2, r3, #1
   174f4:	ldrh	r4, [r0, r2]
   174f8:	and	r4, r4, #8192	; 0x2000
   174fc:	uxth	r4, r4
   17500:	cmp	r4, #0
   17504:	bne	174ec <close_stdout@@Base+0x2d10>
   17508:	cmp	r3, #45	; 0x2d
   1750c:	bne	1752c <close_stdout@@Base+0x2d50>
   17510:	mov	r0, #4
   17514:	ldr	r2, [sp, #28]
   17518:	ldr	r3, [sl]
   1751c:	cmp	r2, r3
   17520:	bne	17bb0 <close_stdout@@Base+0x33d4>
   17524:	add	sp, sp, #36	; 0x24
   17528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1752c:	bl	1135c <__errno_location@plt>
   17530:	mov	r2, fp
   17534:	mov	r1, r8
   17538:	mov	r3, r4
   1753c:	str	r4, [r0]
   17540:	mov	r7, r0
   17544:	mov	r0, r5
   17548:	bl	111f4 <__strtoull_internal@plt>
   1754c:	ldr	fp, [r8]
   17550:	cmp	fp, r5
   17554:	strd	r0, [sp]
   17558:	beq	176d4 <close_stdout@@Base+0x2ef8>
   1755c:	ldr	ip, [r7]
   17560:	cmp	ip, #0
   17564:	bne	17590 <close_stdout@@Base+0x2db4>
   17568:	mov	r7, ip
   1756c:	cmp	r6, #0
   17570:	beq	17b40 <close_stdout@@Base+0x3364>
   17574:	ldrb	r5, [fp]
   17578:	cmp	r5, #0
   1757c:	bne	175a0 <close_stdout@@Base+0x2dc4>
   17580:	ldrd	r2, [sp]
   17584:	mov	r0, r7
   17588:	strd	r2, [r9]
   1758c:	b	17514 <close_stdout@@Base+0x2d38>
   17590:	cmp	ip, #34	; 0x22
   17594:	moveq	r7, #1
   17598:	bne	17510 <close_stdout@@Base+0x2d34>
   1759c:	b	1756c <close_stdout@@Base+0x2d90>
   175a0:	mov	r0, r6
   175a4:	mov	r1, r5
   175a8:	bl	11344 <strchr@plt>
   175ac:	cmp	r0, #0
   175b0:	beq	17710 <close_stdout@@Base+0x2f34>
   175b4:	mov	r0, r6
   175b8:	mov	r1, #48	; 0x30
   175bc:	bl	11344 <strchr@plt>
   175c0:	cmp	r0, #0
   175c4:	beq	175e4 <close_stdout@@Base+0x2e08>
   175c8:	ldrb	r3, [fp, #1]
   175cc:	cmp	r3, #68	; 0x44
   175d0:	beq	17b68 <close_stdout@@Base+0x338c>
   175d4:	cmp	r3, #105	; 0x69
   175d8:	beq	17b50 <close_stdout@@Base+0x3374>
   175dc:	cmp	r3, #66	; 0x42
   175e0:	beq	17b68 <close_stdout@@Base+0x338c>
   175e4:	mov	r6, #1
   175e8:	mov	r4, #1024	; 0x400
   175ec:	sub	r5, r5, #66	; 0x42
   175f0:	cmp	r5, #53	; 0x35
   175f4:	addls	pc, pc, r5, lsl #2
   175f8:	b	17710 <close_stdout@@Base+0x2f34>
   175fc:	b	179b8 <close_stdout@@Base+0x31dc>
   17600:	b	17710 <close_stdout@@Base+0x2f34>
   17604:	b	17710 <close_stdout@@Base+0x2f34>
   17608:	b	1794c <close_stdout@@Base+0x3170>
   1760c:	b	17710 <close_stdout@@Base+0x2f34>
   17610:	b	178e0 <close_stdout@@Base+0x3104>
   17614:	b	17710 <close_stdout@@Base+0x2f34>
   17618:	b	17710 <close_stdout@@Base+0x2f34>
   1761c:	b	17710 <close_stdout@@Base+0x2f34>
   17620:	b	17888 <close_stdout@@Base+0x30ac>
   17624:	b	17710 <close_stdout@@Base+0x2f34>
   17628:	b	17a60 <close_stdout@@Base+0x3284>
   1762c:	b	17710 <close_stdout@@Base+0x2f34>
   17630:	b	17710 <close_stdout@@Base+0x2f34>
   17634:	b	179f4 <close_stdout@@Base+0x3218>
   17638:	b	17710 <close_stdout@@Base+0x2f34>
   1763c:	b	17710 <close_stdout@@Base+0x2f34>
   17640:	b	17710 <close_stdout@@Base+0x2f34>
   17644:	b	17ad4 <close_stdout@@Base+0x32f8>
   17648:	b	17710 <close_stdout@@Base+0x2f34>
   1764c:	b	17710 <close_stdout@@Base+0x2f34>
   17650:	b	17710 <close_stdout@@Base+0x2f34>
   17654:	b	17710 <close_stdout@@Base+0x2f34>
   17658:	b	1781c <close_stdout@@Base+0x3040>
   1765c:	b	177a4 <close_stdout@@Base+0x2fc8>
   17660:	b	17710 <close_stdout@@Base+0x2f34>
   17664:	b	17710 <close_stdout@@Base+0x2f34>
   17668:	b	17710 <close_stdout@@Base+0x2f34>
   1766c:	b	17710 <close_stdout@@Base+0x2f34>
   17670:	b	17710 <close_stdout@@Base+0x2f34>
   17674:	b	17710 <close_stdout@@Base+0x2f34>
   17678:	b	17710 <close_stdout@@Base+0x2f34>
   1767c:	b	17768 <close_stdout@@Base+0x2f8c>
   17680:	b	17720 <close_stdout@@Base+0x2f44>
   17684:	b	17710 <close_stdout@@Base+0x2f34>
   17688:	b	17710 <close_stdout@@Base+0x2f34>
   1768c:	b	17710 <close_stdout@@Base+0x2f34>
   17690:	b	178e0 <close_stdout@@Base+0x3104>
   17694:	b	17710 <close_stdout@@Base+0x2f34>
   17698:	b	17710 <close_stdout@@Base+0x2f34>
   1769c:	b	17710 <close_stdout@@Base+0x2f34>
   176a0:	b	17888 <close_stdout@@Base+0x30ac>
   176a4:	b	17710 <close_stdout@@Base+0x2f34>
   176a8:	b	17a60 <close_stdout@@Base+0x3284>
   176ac:	b	17710 <close_stdout@@Base+0x2f34>
   176b0:	b	17710 <close_stdout@@Base+0x2f34>
   176b4:	b	17710 <close_stdout@@Base+0x2f34>
   176b8:	b	17710 <close_stdout@@Base+0x2f34>
   176bc:	b	17710 <close_stdout@@Base+0x2f34>
   176c0:	b	17710 <close_stdout@@Base+0x2f34>
   176c4:	b	17ad4 <close_stdout@@Base+0x32f8>
   176c8:	b	17710 <close_stdout@@Base+0x2f34>
   176cc:	b	17710 <close_stdout@@Base+0x2f34>
   176d0:	b	17740 <close_stdout@@Base+0x2f64>
   176d4:	cmp	r6, #0
   176d8:	beq	17510 <close_stdout@@Base+0x2d34>
   176dc:	ldrb	r5, [r5]
   176e0:	cmp	r5, #0
   176e4:	beq	17510 <close_stdout@@Base+0x2d34>
   176e8:	mov	r0, r6
   176ec:	mov	r1, r5
   176f0:	bl	11344 <strchr@plt>
   176f4:	cmp	r0, #0
   176f8:	beq	17510 <close_stdout@@Base+0x2d34>
   176fc:	mov	r0, #1
   17700:	mov	r1, #0
   17704:	mov	r7, r4
   17708:	strd	r0, [sp]
   1770c:	b	175b4 <close_stdout@@Base+0x2dd8>
   17710:	ldrd	r2, [sp]
   17714:	orr	r0, r7, #2
   17718:	strd	r2, [r9]
   1771c:	b	17514 <close_stdout@@Base+0x2d38>
   17720:	mov	r3, #0
   17724:	add	r2, fp, r6
   17728:	str	r2, [r8]
   1772c:	ldrb	r2, [fp, r6]
   17730:	orr	r7, r7, r3
   17734:	cmp	r2, #0
   17738:	orrne	r7, r7, #2
   1773c:	b	17580 <close_stdout@@Base+0x2da4>
   17740:	ldrd	r2, [sp]
   17744:	cmp	r2, #0
   17748:	sbcs	r3, r3, #0
   1774c:	blt	17b88 <close_stdout@@Base+0x33ac>
   17750:	ldrd	r0, [sp]
   17754:	mov	r3, #0
   17758:	adds	r0, r0, r0
   1775c:	adc	r1, r1, r1
   17760:	strd	r0, [sp]
   17764:	b	17724 <close_stdout@@Base+0x2f48>
   17768:	ldrd	r0, [sp]
   1776c:	movw	r3, #65535	; 0xffff
   17770:	movt	r3, #127	; 0x7f
   17774:	mvn	r2, #0
   17778:	cmp	r1, r3
   1777c:	cmpeq	r0, r2
   17780:	bhi	17b88 <close_stdout@@Base+0x33ac>
   17784:	lsl	r2, r1, #9
   17788:	ldr	r1, [sp]
   1778c:	lsl	r3, r0, #9
   17790:	str	r3, [sp]
   17794:	mov	r3, #0
   17798:	orr	r2, r2, r1, lsr #23
   1779c:	str	r2, [sp, #4]
   177a0:	b	17724 <close_stdout@@Base+0x2f48>
   177a4:	asr	r5, r4, #31
   177a8:	mov	r2, r4
   177ac:	mvn	r0, #0
   177b0:	mvn	r1, #0
   177b4:	mov	r3, r5
   177b8:	bl	1a720 <close_stdout@@Base+0x5f44>
   177bc:	mov	ip, r7
   177c0:	str	r6, [sp, #20]
   177c4:	mov	r2, #7
   177c8:	ldrd	r6, [sp]
   177cc:	mov	r3, #0
   177d0:	strd	r0, [sp, #8]
   177d4:	ldrd	r0, [sp, #8]
   177d8:	cmp	r1, r7
   177dc:	cmpeq	r0, r6
   177e0:	mulcs	r0, r6, r5
   177e4:	movcs	r1, #0
   177e8:	mlacs	r0, r4, r7, r0
   177ec:	movcc	r1, #1
   177f0:	umullcs	r6, r7, r6, r4
   177f4:	mvncc	r6, #0
   177f8:	mvncc	r7, #0
   177fc:	orr	r3, r3, r1
   17800:	addcs	r7, r0, r7
   17804:	subs	r2, r2, #1
   17808:	bne	177d4 <close_stdout@@Base+0x2ff8>
   1780c:	strd	r6, [sp]
   17810:	mov	r7, ip
   17814:	ldr	r6, [sp, #20]
   17818:	b	17724 <close_stdout@@Base+0x2f48>
   1781c:	asr	r5, r4, #31
   17820:	mov	r2, r4
   17824:	mvn	r0, #0
   17828:	mvn	r1, #0
   1782c:	mov	r3, r5
   17830:	bl	1a720 <close_stdout@@Base+0x5f44>
   17834:	mov	ip, r7
   17838:	str	r6, [sp, #20]
   1783c:	mov	r2, #8
   17840:	ldrd	r6, [sp]
   17844:	mov	r3, #0
   17848:	strd	r0, [sp, #8]
   1784c:	ldrd	r0, [sp, #8]
   17850:	cmp	r1, r7
   17854:	cmpeq	r0, r6
   17858:	mulcs	r0, r6, r5
   1785c:	movcs	r1, #0
   17860:	mlacs	r0, r4, r7, r0
   17864:	movcc	r1, #1
   17868:	umullcs	r6, r7, r6, r4
   1786c:	mvncc	r6, #0
   17870:	mvncc	r7, #0
   17874:	orr	r3, r3, r1
   17878:	addcs	r7, r0, r7
   1787c:	subs	r2, r2, #1
   17880:	bne	1784c <close_stdout@@Base+0x3070>
   17884:	b	1780c <close_stdout@@Base+0x3030>
   17888:	mov	r2, r4
   1788c:	asr	r3, r4, #31
   17890:	mvn	r0, #0
   17894:	mvn	r1, #0
   17898:	strd	r2, [sp, #8]
   1789c:	bl	1a720 <close_stdout@@Base+0x5f44>
   178a0:	ldrd	r2, [sp]
   178a4:	cmp	r3, r1
   178a8:	cmpeq	r2, r0
   178ac:	bhi	17b74 <close_stdout@@Base+0x3398>
   178b0:	ldr	r3, [sp]
   178b4:	ldr	ip, [sp, #12]
   178b8:	ldr	r0, [sp, #4]
   178bc:	ldr	r1, [sp]
   178c0:	mul	r2, r3, ip
   178c4:	mov	r3, #0
   178c8:	mla	r2, r4, r0, r2
   178cc:	umull	r0, r1, r1, r4
   178d0:	add	r2, r2, r1
   178d4:	strd	r0, [sp]
   178d8:	str	r2, [sp, #4]
   178dc:	b	17724 <close_stdout@@Base+0x2f48>
   178e0:	asr	r5, r4, #31
   178e4:	mov	r2, r4
   178e8:	mvn	r0, #0
   178ec:	mvn	r1, #0
   178f0:	mov	r3, r5
   178f4:	bl	1a720 <close_stdout@@Base+0x5f44>
   178f8:	mov	ip, r7
   178fc:	str	r6, [sp, #20]
   17900:	mov	r2, #3
   17904:	ldrd	r6, [sp]
   17908:	mov	r3, #0
   1790c:	strd	r0, [sp, #8]
   17910:	ldrd	r0, [sp, #8]
   17914:	cmp	r1, r7
   17918:	cmpeq	r0, r6
   1791c:	mulcs	r0, r6, r5
   17920:	movcs	r1, #0
   17924:	mlacs	r0, r4, r7, r0
   17928:	movcc	r1, #1
   1792c:	umullcs	r6, r7, r6, r4
   17930:	mvncc	r6, #0
   17934:	mvncc	r7, #0
   17938:	orr	r3, r3, r1
   1793c:	addcs	r7, r0, r7
   17940:	subs	r2, r2, #1
   17944:	bne	17910 <close_stdout@@Base+0x3134>
   17948:	b	1780c <close_stdout@@Base+0x3030>
   1794c:	asr	r5, r4, #31
   17950:	mov	r2, r4
   17954:	mvn	r0, #0
   17958:	mvn	r1, #0
   1795c:	mov	r3, r5
   17960:	bl	1a720 <close_stdout@@Base+0x5f44>
   17964:	mov	ip, r7
   17968:	str	r6, [sp, #20]
   1796c:	mov	r2, #6
   17970:	ldrd	r6, [sp]
   17974:	mov	r3, #0
   17978:	strd	r0, [sp, #8]
   1797c:	ldrd	r0, [sp, #8]
   17980:	cmp	r1, r7
   17984:	cmpeq	r0, r6
   17988:	mulcs	r0, r6, r5
   1798c:	movcs	r1, #0
   17990:	mlacs	r0, r4, r7, r0
   17994:	movcc	r1, #1
   17998:	umullcs	r6, r7, r6, r4
   1799c:	mvncc	r6, #0
   179a0:	mvncc	r7, #0
   179a4:	orr	r3, r3, r1
   179a8:	addcs	r7, r0, r7
   179ac:	subs	r2, r2, #1
   179b0:	bne	1797c <close_stdout@@Base+0x31a0>
   179b4:	b	1780c <close_stdout@@Base+0x3030>
   179b8:	ldrd	r0, [sp]
   179bc:	movw	r3, #65535	; 0xffff
   179c0:	movt	r3, #63	; 0x3f
   179c4:	mvn	r2, #0
   179c8:	cmp	r1, r3
   179cc:	cmpeq	r0, r2
   179d0:	bhi	17b74 <close_stdout@@Base+0x3398>
   179d4:	lsl	r2, r1, #10
   179d8:	ldr	r1, [sp]
   179dc:	lsl	r3, r0, #10
   179e0:	str	r3, [sp]
   179e4:	mov	r3, #0
   179e8:	orr	r2, r2, r1, lsr #22
   179ec:	str	r2, [sp, #4]
   179f0:	b	17724 <close_stdout@@Base+0x2f48>
   179f4:	asr	r5, r4, #31
   179f8:	mov	r2, r4
   179fc:	mvn	r0, #0
   17a00:	mvn	r1, #0
   17a04:	mov	r3, r5
   17a08:	bl	1a720 <close_stdout@@Base+0x5f44>
   17a0c:	mov	ip, r7
   17a10:	str	r6, [sp, #20]
   17a14:	mov	r2, #5
   17a18:	ldrd	r6, [sp]
   17a1c:	mov	r3, #0
   17a20:	strd	r0, [sp, #8]
   17a24:	ldrd	r0, [sp, #8]
   17a28:	cmp	r1, r7
   17a2c:	cmpeq	r0, r6
   17a30:	mulcs	r0, r6, r5
   17a34:	movcs	r1, #0
   17a38:	mlacs	r0, r4, r7, r0
   17a3c:	movcc	r1, #1
   17a40:	umullcs	r6, r7, r6, r4
   17a44:	mvncc	r6, #0
   17a48:	mvncc	r7, #0
   17a4c:	orr	r3, r3, r1
   17a50:	addcs	r7, r0, r7
   17a54:	subs	r2, r2, #1
   17a58:	bne	17a24 <close_stdout@@Base+0x3248>
   17a5c:	b	1780c <close_stdout@@Base+0x3030>
   17a60:	mov	r2, r4
   17a64:	asr	r3, r4, #31
   17a68:	mvn	r0, #0
   17a6c:	mvn	r1, #0
   17a70:	strd	r2, [sp, #8]
   17a74:	bl	1a720 <close_stdout@@Base+0x5f44>
   17a78:	ldrd	r2, [sp]
   17a7c:	cmp	r3, r1
   17a80:	cmpeq	r2, r0
   17a84:	bhi	17b9c <close_stdout@@Base+0x33c0>
   17a88:	ldr	ip, [sp, #4]
   17a8c:	mul	r3, r4, ip
   17a90:	ldr	ip, [sp, #12]
   17a94:	mla	r3, r2, ip, r3
   17a98:	ldr	r2, [sp]
   17a9c:	umull	r4, r5, r4, r2
   17aa0:	add	r5, r3, r5
   17aa4:	cmp	r1, r5
   17aa8:	cmpeq	r0, r4
   17aac:	bcc	17b9c <close_stdout@@Base+0x33c0>
   17ab0:	mul	r2, r4, ip
   17ab4:	ldr	ip, [sp, #8]
   17ab8:	mov	r3, #0
   17abc:	umull	r0, r1, r4, ip
   17ac0:	mla	r2, ip, r5, r2
   17ac4:	strd	r0, [sp]
   17ac8:	add	r2, r2, r1
   17acc:	str	r2, [sp, #4]
   17ad0:	b	17724 <close_stdout@@Base+0x2f48>
   17ad4:	asr	r5, r4, #31
   17ad8:	mov	r2, r4
   17adc:	mvn	r0, #0
   17ae0:	mvn	r1, #0
   17ae4:	mov	r3, r5
   17ae8:	bl	1a720 <close_stdout@@Base+0x5f44>
   17aec:	mov	ip, r7
   17af0:	str	r6, [sp, #20]
   17af4:	mov	r2, #4
   17af8:	ldrd	r6, [sp]
   17afc:	mov	r3, #0
   17b00:	strd	r0, [sp, #8]
   17b04:	ldrd	r0, [sp, #8]
   17b08:	cmp	r1, r7
   17b0c:	cmpeq	r0, r6
   17b10:	mulcs	r0, r6, r5
   17b14:	movcs	r1, #0
   17b18:	mlacs	r0, r4, r7, r0
   17b1c:	movcc	r1, #1
   17b20:	umullcs	r6, r7, r6, r4
   17b24:	mvncc	r6, #0
   17b28:	mvncc	r7, #0
   17b2c:	orr	r3, r3, r1
   17b30:	addcs	r7, r0, r7
   17b34:	subs	r2, r2, #1
   17b38:	bne	17b04 <close_stdout@@Base+0x3328>
   17b3c:	b	1780c <close_stdout@@Base+0x3030>
   17b40:	ldrd	r0, [sp]
   17b44:	strd	r0, [r9]
   17b48:	mov	r0, r7
   17b4c:	b	17514 <close_stdout@@Base+0x2d38>
   17b50:	ldrb	r3, [fp, #2]
   17b54:	mov	r4, #1024	; 0x400
   17b58:	cmp	r3, #66	; 0x42
   17b5c:	moveq	r6, #3
   17b60:	movne	r6, #1
   17b64:	b	175ec <close_stdout@@Base+0x2e10>
   17b68:	mov	r6, #2
   17b6c:	mov	r4, #1000	; 0x3e8
   17b70:	b	175ec <close_stdout@@Base+0x2e10>
   17b74:	mvn	r3, #0
   17b78:	mvn	r2, #0
   17b7c:	strd	r2, [sp]
   17b80:	mov	r3, #1
   17b84:	b	17724 <close_stdout@@Base+0x2f48>
   17b88:	mvn	r0, #0
   17b8c:	mvn	r1, #0
   17b90:	mov	r3, #1
   17b94:	strd	r0, [sp]
   17b98:	b	17724 <close_stdout@@Base+0x2f48>
   17b9c:	mvn	r0, #0
   17ba0:	mvn	r1, #0
   17ba4:	mov	r3, #1
   17ba8:	strd	r0, [sp]
   17bac:	b	17724 <close_stdout@@Base+0x2f48>
   17bb0:	bl	11224 <__stack_chk_fail@plt>
   17bb4:	ldr	r0, [pc, #32]	; 17bdc <close_stdout@@Base+0x3400>
   17bb8:	mov	r2, #96	; 0x60
   17bbc:	ldr	r1, [pc, #28]	; 17be0 <close_stdout@@Base+0x3404>
   17bc0:	ldr	r3, [pc, #28]	; 17be4 <close_stdout@@Base+0x3408>
   17bc4:	add	r0, pc, r0
   17bc8:	add	r1, pc, r1
   17bcc:	add	r3, pc, r3
   17bd0:	bl	11464 <__assert_fail@plt>
   17bd4:	andeq	r6, r1, r8, asr fp
   17bd8:	andeq	r0, r0, r8, lsl r1
   17bdc:	andeq	r5, r0, r4, asr #8
   17be0:	andeq	r5, r0, r8, ror #8
   17be4:	andeq	r5, r0, r4, ror r4
   17be8:	ldr	ip, [pc, #228]	; 17cd4 <close_stdout@@Base+0x34f8>
   17bec:	mov	r3, r2
   17bf0:	push	{r4, r5, r6, r7, r8, lr}
   17bf4:	add	ip, pc, ip
   17bf8:	ldr	r4, [pc, #216]	; 17cd8 <close_stdout@@Base+0x34fc>
   17bfc:	sub	sp, sp, #2000	; 0x7d0
   17c00:	sub	sp, sp, #8
   17c04:	mov	r2, r1
   17c08:	add	r6, sp, #4
   17c0c:	mov	r8, r0
   17c10:	ldr	r5, [ip, r4]
   17c14:	mov	ip, #2000	; 0x7d0
   17c18:	str	ip, [sp]
   17c1c:	mov	r1, sp
   17c20:	mov	r0, r6
   17c24:	ldr	ip, [r5]
   17c28:	str	ip, [sp, #2004]	; 0x7d4
   17c2c:	bl	18334 <close_stdout@@Base+0x3b58>
   17c30:	ldr	r4, [sp]
   17c34:	subs	r7, r0, #0
   17c38:	beq	17cc0 <close_stdout@@Base+0x34e4>
   17c3c:	mov	r1, #1
   17c40:	mov	r2, r4
   17c44:	mov	r3, r8
   17c48:	bl	11260 <fwrite@plt>
   17c4c:	cmp	r4, r0
   17c50:	bhi	17c8c <close_stdout@@Base+0x34b0>
   17c54:	cmp	r7, r6
   17c58:	beq	17c64 <close_stdout@@Base+0x3488>
   17c5c:	mov	r0, r7
   17c60:	bl	111d0 <free@plt>
   17c64:	cmp	r4, #0
   17c68:	movge	r0, r4
   17c6c:	blt	17cb4 <close_stdout@@Base+0x34d8>
   17c70:	ldr	r2, [sp, #2004]	; 0x7d4
   17c74:	ldr	r3, [r5]
   17c78:	cmp	r2, r3
   17c7c:	bne	17cd0 <close_stdout@@Base+0x34f4>
   17c80:	add	sp, sp, #2000	; 0x7d0
   17c84:	add	sp, sp, #8
   17c88:	pop	{r4, r5, r6, r7, r8, pc}
   17c8c:	cmp	r7, r6
   17c90:	beq	17cc8 <close_stdout@@Base+0x34ec>
   17c94:	bl	1135c <__errno_location@plt>
   17c98:	ldr	r6, [r0]
   17c9c:	mov	r4, r0
   17ca0:	mov	r0, r7
   17ca4:	bl	111d0 <free@plt>
   17ca8:	mvn	r0, #0
   17cac:	str	r6, [r4]
   17cb0:	b	17c70 <close_stdout@@Base+0x3494>
   17cb4:	bl	1135c <__errno_location@plt>
   17cb8:	mov	r3, #75	; 0x4b
   17cbc:	str	r3, [r0]
   17cc0:	mov	r0, r8
   17cc4:	bl	18324 <close_stdout@@Base+0x3b48>
   17cc8:	mvn	r0, #0
   17ccc:	b	17c70 <close_stdout@@Base+0x3494>
   17cd0:	bl	11224 <__stack_chk_fail@plt>
   17cd4:	andeq	r6, r1, r4, lsl #8
   17cd8:	andeq	r0, r0, r8, lsl r1
   17cdc:	push	{r4, r5, r6, lr}
   17ce0:	mov	r4, r0
   17ce4:	bl	11290 <__fpending@plt>
   17ce8:	mov	r6, r0
   17cec:	mov	r0, r4
   17cf0:	ldr	r4, [r4]
   17cf4:	bl	1817c <close_stdout@@Base+0x39a0>
   17cf8:	and	r4, r4, #32
   17cfc:	adds	r5, r0, #0
   17d00:	movne	r5, #1
   17d04:	cmp	r4, #0
   17d08:	bne	17d28 <close_stdout@@Base+0x354c>
   17d0c:	cmp	r5, #0
   17d10:	beq	17d20 <close_stdout@@Base+0x3544>
   17d14:	cmp	r6, #0
   17d18:	beq	17d44 <close_stdout@@Base+0x3568>
   17d1c:	mvn	r4, #0
   17d20:	mov	r0, r4
   17d24:	pop	{r4, r5, r6, pc}
   17d28:	cmp	r5, #0
   17d2c:	bne	17d1c <close_stdout@@Base+0x3540>
   17d30:	bl	1135c <__errno_location@plt>
   17d34:	mvn	r4, #0
   17d38:	str	r5, [r0]
   17d3c:	mov	r0, r4
   17d40:	pop	{r4, r5, r6, pc}
   17d44:	bl	1135c <__errno_location@plt>
   17d48:	ldr	r4, [r0]
   17d4c:	subs	r4, r4, #9
   17d50:	mvnne	r4, #0
   17d54:	mov	r0, r4
   17d58:	pop	{r4, r5, r6, pc}
   17d5c:	ldr	r3, [pc, #984]	; 1813c <close_stdout@@Base+0x3960>
   17d60:	mov	r0, #14
   17d64:	ldr	r2, [pc, #980]	; 18140 <close_stdout@@Base+0x3964>
   17d68:	add	r3, pc, r3
   17d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d70:	sub	sp, sp, #132	; 0x84
   17d74:	ldr	r6, [r3, r2]
   17d78:	ldr	r3, [r6]
   17d7c:	str	r3, [sp, #124]	; 0x7c
   17d80:	bl	11410 <nl_langinfo@plt>
   17d84:	subs	r5, r0, #0
   17d88:	beq	17e3c <close_stdout@@Base+0x3660>
   17d8c:	ldr	r3, [pc, #944]	; 18144 <close_stdout@@Base+0x3968>
   17d90:	ldr	r4, [pc, r3]
   17d94:	cmp	r4, #0
   17d98:	beq	17e48 <close_stdout@@Base+0x366c>
   17d9c:	ldrb	r7, [r4]
   17da0:	cmp	r7, #0
   17da4:	bne	17dd8 <close_stdout@@Base+0x35fc>
   17da8:	b	17e10 <close_stdout@@Base+0x3634>
   17dac:	mov	r0, r4
   17db0:	bl	11338 <strlen@plt>
   17db4:	add	r0, r0, #1
   17db8:	add	r7, r4, r0
   17dbc:	mov	r0, r7
   17dc0:	bl	11338 <strlen@plt>
   17dc4:	add	r0, r0, #1
   17dc8:	add	r4, r7, r0
   17dcc:	ldrb	r7, [r7, r0]
   17dd0:	cmp	r7, #0
   17dd4:	beq	17e10 <close_stdout@@Base+0x3634>
   17dd8:	mov	r0, r5
   17ddc:	mov	r1, r4
   17de0:	bl	111a0 <strcmp@plt>
   17de4:	cmp	r0, #0
   17de8:	beq	17e00 <close_stdout@@Base+0x3624>
   17dec:	cmp	r7, #42	; 0x2a
   17df0:	bne	17dac <close_stdout@@Base+0x35d0>
   17df4:	ldrb	r3, [r4, #1]
   17df8:	cmp	r3, #0
   17dfc:	bne	17dac <close_stdout@@Base+0x35d0>
   17e00:	mov	r0, r4
   17e04:	bl	11338 <strlen@plt>
   17e08:	add	r0, r0, #1
   17e0c:	add	r5, r4, r0
   17e10:	ldrb	r3, [r5]
   17e14:	cmp	r3, #0
   17e18:	ldreq	r5, [pc, #808]	; 18148 <close_stdout@@Base+0x396c>
   17e1c:	addeq	r5, pc, r5
   17e20:	ldr	r2, [sp, #124]	; 0x7c
   17e24:	mov	r0, r5
   17e28:	ldr	r3, [r6]
   17e2c:	cmp	r2, r3
   17e30:	bne	18110 <close_stdout@@Base+0x3934>
   17e34:	add	sp, sp, #132	; 0x84
   17e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e3c:	ldr	r5, [pc, #776]	; 1814c <close_stdout@@Base+0x3970>
   17e40:	add	r5, pc, r5
   17e44:	b	17d8c <close_stdout@@Base+0x35b0>
   17e48:	ldr	r0, [pc, #768]	; 18150 <close_stdout@@Base+0x3974>
   17e4c:	add	r0, pc, r0
   17e50:	bl	112cc <getenv@plt>
   17e54:	subs	r8, r0, #0
   17e58:	beq	180e8 <close_stdout@@Base+0x390c>
   17e5c:	ldrb	r3, [r8]
   17e60:	cmp	r3, #0
   17e64:	beq	1807c <close_stdout@@Base+0x38a0>
   17e68:	bl	11338 <strlen@plt>
   17e6c:	subs	sl, r0, #0
   17e70:	subne	r3, sl, #1
   17e74:	bne	1808c <close_stdout@@Base+0x38b0>
   17e78:	mov	r9, #0
   17e7c:	mov	fp, r9
   17e80:	add	r9, sl, r9
   17e84:	add	r0, r9, #14
   17e88:	bl	112d8 <malloc@plt>
   17e8c:	subs	r7, r0, #0
   17e90:	beq	180dc <close_stdout@@Base+0x3900>
   17e94:	mov	r1, r8
   17e98:	mov	r2, sl
   17e9c:	bl	111e8 <memcpy@plt>
   17ea0:	cmp	fp, #0
   17ea4:	add	ip, r7, r9
   17ea8:	movne	r3, #47	; 0x2f
   17eac:	strbne	r3, [r7, sl]
   17eb0:	ldr	r3, [pc, #668]	; 18154 <close_stdout@@Base+0x3978>
   17eb4:	add	r3, pc, r3
   17eb8:	ldm	r3!, {r0, r1, r2}
   17ebc:	ldrh	r3, [r3]
   17ec0:	str	r0, [r7, r9]
   17ec4:	mov	r0, r7
   17ec8:	str	r1, [ip, #4]
   17ecc:	mov	r1, #32768	; 0x8000
   17ed0:	strh	r3, [ip, #12]
   17ed4:	str	r2, [ip, #8]
   17ed8:	bl	112c0 <open64@plt>
   17edc:	subs	r8, r0, #0
   17ee0:	blt	180a4 <close_stdout@@Base+0x38c8>
   17ee4:	ldr	r1, [pc, #620]	; 18158 <close_stdout@@Base+0x397c>
   17ee8:	add	r1, pc, r1
   17eec:	bl	11158 <fdopen@plt>
   17ef0:	subs	fp, r0, #0
   17ef4:	beq	180fc <close_stdout@@Base+0x3920>
   17ef8:	ldr	r0, [pc, #604]	; 1815c <close_stdout@@Base+0x3980>
   17efc:	add	sl, sp, #20
   17f00:	add	r9, sp, #72	; 0x48
   17f04:	mov	r8, #0
   17f08:	add	r0, pc, r0
   17f0c:	str	r0, [sp, #12]
   17f10:	ldr	r3, [fp, #4]
   17f14:	ldr	r2, [fp, #8]
   17f18:	cmp	r3, r2
   17f1c:	bcs	18008 <close_stdout@@Base+0x382c>
   17f20:	add	r2, r3, #1
   17f24:	str	r2, [fp, #4]
   17f28:	ldrb	r0, [r3]
   17f2c:	cmp	r0, #32
   17f30:	beq	17f10 <close_stdout@@Base+0x3734>
   17f34:	sub	r3, r0, #9
   17f38:	cmp	r3, #1
   17f3c:	bls	17f10 <close_stdout@@Base+0x3734>
   17f40:	cmp	r0, #35	; 0x23
   17f44:	beq	1801c <close_stdout@@Base+0x3840>
   17f48:	mov	r1, fp
   17f4c:	bl	11350 <ungetc@plt>
   17f50:	mov	r0, fp
   17f54:	ldr	r1, [sp, #12]
   17f58:	mov	r2, sl
   17f5c:	mov	r3, r9
   17f60:	bl	1138c <fscanf@plt>
   17f64:	cmp	r0, #1
   17f68:	ble	1804c <close_stdout@@Base+0x3870>
   17f6c:	mov	r0, sl
   17f70:	bl	11338 <strlen@plt>
   17f74:	str	r0, [sp, #8]
   17f78:	mov	r0, r9
   17f7c:	bl	11338 <strlen@plt>
   17f80:	cmp	r8, #0
   17f84:	mov	r2, r0
   17f88:	bne	180b0 <close_stdout@@Base+0x38d4>
   17f8c:	ldr	r3, [sp, #8]
   17f90:	str	r2, [sp]
   17f94:	add	r8, r0, r3
   17f98:	add	r0, r8, #3
   17f9c:	add	r8, r8, #2
   17fa0:	bl	112d8 <malloc@plt>
   17fa4:	ldr	r2, [sp]
   17fa8:	mov	r3, r0
   17fac:	cmp	r3, #0
   17fb0:	beq	18114 <close_stdout@@Base+0x3938>
   17fb4:	ldr	r0, [sp, #8]
   17fb8:	movw	r1, #65534	; 0xfffe
   17fbc:	movt	r1, #65535	; 0xffff
   17fc0:	rsb	r2, r2, r8
   17fc4:	rsb	r1, r0, r1
   17fc8:	stm	sp, {r2, r3}
   17fcc:	add	r0, r1, r2
   17fd0:	mov	r1, sl
   17fd4:	add	r0, r3, r0
   17fd8:	mov	r4, r3
   17fdc:	bl	11284 <strcpy@plt>
   17fe0:	ldr	r2, [sp]
   17fe4:	ldr	r3, [sp, #4]
   17fe8:	mov	r1, r9
   17fec:	sub	r0, r2, #1
   17ff0:	add	r0, r3, r0
   17ff4:	bl	11284 <strcpy@plt>
   17ff8:	ldr	r3, [fp, #4]
   17ffc:	ldr	r2, [fp, #8]
   18000:	cmp	r3, r2
   18004:	bcc	17f20 <close_stdout@@Base+0x3744>
   18008:	mov	r0, fp
   1800c:	bl	113d4 <__uflow@plt>
   18010:	cmn	r0, #1
   18014:	beq	1804c <close_stdout@@Base+0x3870>
   18018:	b	17f2c <close_stdout@@Base+0x3750>
   1801c:	ldr	r3, [fp, #4]
   18020:	ldr	r2, [fp, #8]
   18024:	cmp	r3, r2
   18028:	bcs	18130 <close_stdout@@Base+0x3954>
   1802c:	add	r2, r3, #1
   18030:	str	r2, [fp, #4]
   18034:	ldrb	r0, [r3]
   18038:	cmp	r0, #10
   1803c:	cmnne	r0, #1
   18040:	bne	1801c <close_stdout@@Base+0x3840>
   18044:	cmn	r0, #1
   18048:	bne	17f10 <close_stdout@@Base+0x3734>
   1804c:	mov	r0, fp
   18050:	bl	1817c <close_stdout@@Base+0x39a0>
   18054:	cmp	r8, #0
   18058:	beq	180a4 <close_stdout@@Base+0x38c8>
   1805c:	mov	r3, #0
   18060:	strb	r3, [r4, r8]
   18064:	mov	r0, r7
   18068:	bl	111d0 <free@plt>
   1806c:	ldr	r3, [pc, #236]	; 18160 <close_stdout@@Base+0x3984>
   18070:	add	r3, pc, r3
   18074:	str	r4, [r3]
   18078:	b	17d9c <close_stdout@@Base+0x35c0>
   1807c:	ldr	r8, [pc, #224]	; 18164 <close_stdout@@Base+0x3988>
   18080:	mov	r3, #7
   18084:	mov	sl, #8
   18088:	add	r8, pc, r8
   1808c:	ldrb	r3, [r8, r3]
   18090:	cmp	r3, #47	; 0x2f
   18094:	movne	r9, #1
   18098:	movne	fp, r9
   1809c:	bne	17e80 <close_stdout@@Base+0x36a4>
   180a0:	b	17e78 <close_stdout@@Base+0x369c>
   180a4:	ldr	r4, [pc, #188]	; 18168 <close_stdout@@Base+0x398c>
   180a8:	add	r4, pc, r4
   180ac:	b	18064 <close_stdout@@Base+0x3888>
   180b0:	ldr	r0, [sp, #8]
   180b4:	str	r2, [sp]
   180b8:	add	r3, r0, r2
   180bc:	mov	r0, r4
   180c0:	add	r8, r3, r8
   180c4:	add	r1, r8, #3
   180c8:	add	r8, r8, #2
   180cc:	bl	11230 <realloc@plt>
   180d0:	ldr	r2, [sp]
   180d4:	mov	r3, r0
   180d8:	b	17fac <close_stdout@@Base+0x37d0>
   180dc:	ldr	r4, [pc, #136]	; 1816c <close_stdout@@Base+0x3990>
   180e0:	add	r4, pc, r4
   180e4:	b	1806c <close_stdout@@Base+0x3890>
   180e8:	ldr	r8, [pc, #128]	; 18170 <close_stdout@@Base+0x3994>
   180ec:	mov	r3, #7
   180f0:	mov	sl, #8
   180f4:	add	r8, pc, r8
   180f8:	b	1808c <close_stdout@@Base+0x38b0>
   180fc:	ldr	r4, [pc, #112]	; 18174 <close_stdout@@Base+0x3998>
   18100:	mov	r0, r8
   18104:	add	r4, pc, r4
   18108:	bl	1144c <close@plt>
   1810c:	b	18064 <close_stdout@@Base+0x3888>
   18110:	bl	11224 <__stack_chk_fail@plt>
   18114:	mov	r0, r4
   18118:	ldr	r4, [pc, #88]	; 18178 <close_stdout@@Base+0x399c>
   1811c:	bl	111d0 <free@plt>
   18120:	mov	r0, fp
   18124:	add	r4, pc, r4
   18128:	bl	1817c <close_stdout@@Base+0x39a0>
   1812c:	b	18064 <close_stdout@@Base+0x3888>
   18130:	mov	r0, fp
   18134:	bl	113d4 <__uflow@plt>
   18138:	b	18038 <close_stdout@@Base+0x385c>
   1813c:	muleq	r1, r0, r2
   18140:	andeq	r0, r0, r8, lsl r1
   18144:	ldrdeq	r6, [r1], -r0
   18148:	andeq	r5, r0, ip, lsr r2
   1814c:	andeq	r4, r0, r4, lsr #18
   18150:	andeq	r5, r0, r4, lsl r2
   18154:			; <UNDEFINED> instruction: 0x000051bc
   18158:	andeq	r4, r0, ip, lsl #24
   1815c:	andeq	r5, r0, r8, ror r1
   18160:	strdeq	r6, [r1], -r0
   18164:	andeq	r4, r0, r4, asr #31
   18168:			; <UNDEFINED> instruction: 0x000046bc
   1816c:	andeq	r4, r0, r4, lsl #13
   18170:	andeq	r4, r0, r8, asr pc
   18174:	andeq	r4, r0, r0, ror #12
   18178:	andeq	r4, r0, r0, asr #12
   1817c:	push	{r4, r5, r6, lr}
   18180:	sub	sp, sp, #8
   18184:	mov	r4, r0
   18188:	bl	113a4 <fileno@plt>
   1818c:	cmp	r0, #0
   18190:	mov	r0, r4
   18194:	blt	18210 <close_stdout@@Base+0x3a34>
   18198:	bl	112f0 <__freading@plt>
   1819c:	cmp	r0, #0
   181a0:	bne	181dc <close_stdout@@Base+0x3a00>
   181a4:	mov	r0, r4
   181a8:	bl	1821c <close_stdout@@Base+0x3a40>
   181ac:	cmp	r0, #0
   181b0:	beq	1820c <close_stdout@@Base+0x3a30>
   181b4:	bl	1135c <__errno_location@plt>
   181b8:	ldr	r6, [r0]
   181bc:	mov	r5, r0
   181c0:	mov	r0, r4
   181c4:	bl	113bc <fclose@plt>
   181c8:	cmp	r6, #0
   181cc:	mvnne	r0, #0
   181d0:	strne	r6, [r5]
   181d4:	add	sp, sp, #8
   181d8:	pop	{r4, r5, r6, pc}
   181dc:	mov	r0, r4
   181e0:	bl	113a4 <fileno@plt>
   181e4:	mov	r1, #1
   181e8:	mov	r2, #0
   181ec:	mov	r3, #0
   181f0:	str	r1, [sp]
   181f4:	bl	1126c <lseek64@plt>
   181f8:	mvn	r2, #0
   181fc:	mvn	r3, #0
   18200:	cmp	r1, r3
   18204:	cmpeq	r0, r2
   18208:	bne	181a4 <close_stdout@@Base+0x39c8>
   1820c:	mov	r0, r4
   18210:	add	sp, sp, #8
   18214:	pop	{r4, r5, r6, lr}
   18218:	b	113bc <fclose@plt>
   1821c:	push	{r4, lr}
   18220:	subs	r4, r0, #0
   18224:	sub	sp, sp, #8
   18228:	beq	18238 <close_stdout@@Base+0x3a5c>
   1822c:	bl	112f0 <__freading@plt>
   18230:	cmp	r0, #0
   18234:	bne	18248 <close_stdout@@Base+0x3a6c>
   18238:	mov	r0, r4
   1823c:	add	sp, sp, #8
   18240:	pop	{r4, lr}
   18244:	b	111b8 <fflush@plt>
   18248:	ldr	r3, [r4]
   1824c:	tst	r3, #256	; 0x100
   18250:	beq	18238 <close_stdout@@Base+0x3a5c>
   18254:	mov	r3, #1
   18258:	mov	r0, r4
   1825c:	str	r3, [sp]
   18260:	mov	r2, #0
   18264:	mov	r3, #0
   18268:	bl	1827c <close_stdout@@Base+0x3aa0>
   1826c:	mov	r0, r4
   18270:	add	sp, sp, #8
   18274:	pop	{r4, lr}
   18278:	b	111b8 <fflush@plt>
   1827c:	push	{r4, r5, r6, r7, lr}
   18280:	sub	sp, sp, #20
   18284:	ldmib	r0, {r1, ip}
   18288:	mov	r6, r0
   1828c:	ldr	r4, [sp, #40]	; 0x28
   18290:	cmp	ip, r1
   18294:	beq	182ac <close_stdout@@Base+0x3ad0>
   18298:	str	r4, [sp, #40]	; 0x28
   1829c:	mov	r0, r6
   182a0:	add	sp, sp, #20
   182a4:	pop	{r4, r5, r6, r7, lr}
   182a8:	b	113c8 <fseeko64@plt>
   182ac:	ldr	ip, [r0, #20]
   182b0:	ldr	r1, [r0, #16]
   182b4:	cmp	ip, r1
   182b8:	bne	18298 <close_stdout@@Base+0x3abc>
   182bc:	ldr	r7, [r0, #36]	; 0x24
   182c0:	cmp	r7, #0
   182c4:	bne	18298 <close_stdout@@Base+0x3abc>
   182c8:	str	r2, [sp, #12]
   182cc:	mvn	r5, #0
   182d0:	str	r3, [sp, #8]
   182d4:	bl	113a4 <fileno@plt>
   182d8:	str	r4, [sp]
   182dc:	mvn	r4, #0
   182e0:	ldr	r2, [sp, #12]
   182e4:	ldr	r3, [sp, #8]
   182e8:	bl	1126c <lseek64@plt>
   182ec:	mov	r2, r0
   182f0:	mov	r3, r1
   182f4:	cmp	r3, r5
   182f8:	cmpeq	r2, r4
   182fc:	beq	1831c <close_stdout@@Base+0x3b40>
   18300:	ldr	r1, [r6]
   18304:	mov	r0, r7
   18308:	strd	r2, [r6, #80]	; 0x50
   1830c:	bic	r3, r1, #16
   18310:	str	r3, [r6]
   18314:	add	sp, sp, #20
   18318:	pop	{r4, r5, r6, r7, pc}
   1831c:	mvn	r0, #0
   18320:	b	18314 <close_stdout@@Base+0x3b38>
   18324:	ldr	r3, [r0]
   18328:	orr	r3, r3, #32
   1832c:	str	r3, [r0]
   18330:	bx	lr
   18334:	ldr	ip, [pc, #3636]	; 19170 <close_stdout@@Base+0x4994>
   18338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1833c:	add	fp, sp, #32
   18340:	ldr	lr, [pc, #3628]	; 19174 <close_stdout@@Base+0x4998>
   18344:	sub	sp, sp, #564	; 0x234
   18348:	add	ip, pc, ip
   1834c:	str	r0, [fp, #-504]	; 0xfffffe08
   18350:	sub	r4, fp, #484	; 0x1e4
   18354:	str	r1, [fp, #-536]	; 0xfffffde8
   18358:	mov	r0, r2
   1835c:	ldr	lr, [ip, lr]
   18360:	mov	r5, r2
   18364:	sub	r1, fp, #364	; 0x16c
   18368:	mov	r2, r4
   1836c:	mov	r6, r3
   18370:	ldr	ip, [lr]
   18374:	str	lr, [fp, #-528]	; 0xfffffdf0
   18378:	str	ip, [fp, #-40]	; 0xffffffd8
   1837c:	bl	192c8 <close_stdout@@Base+0x4aec>
   18380:	cmp	r0, #0
   18384:	blt	18e74 <close_stdout@@Base+0x4698>
   18388:	mov	r0, r6
   1838c:	mov	r1, r4
   18390:	bl	19178 <close_stdout@@Base+0x499c>
   18394:	cmp	r0, #0
   18398:	blt	18f34 <close_stdout@@Base+0x4758>
   1839c:	ldr	r3, [fp, #-356]	; 0xfffffe9c
   183a0:	ldr	r2, [fp, #-352]	; 0xfffffea0
   183a4:	add	r3, r3, #7
   183a8:	cmp	r3, #6
   183ac:	mvnls	r3, #0
   183b0:	adds	r3, r3, r2
   183b4:	bcs	186d0 <close_stdout@@Base+0x3ef4>
   183b8:	adds	r0, r3, #6
   183bc:	bcs	186d0 <close_stdout@@Base+0x3ef4>
   183c0:	cmp	r0, #4000	; 0xfa0
   183c4:	bcs	18e18 <close_stdout@@Base+0x463c>
   183c8:	add	r3, r3, #20
   183cc:	mov	r1, #0
   183d0:	bic	r3, r3, #7
   183d4:	str	r1, [fp, #-548]	; 0xfffffddc
   183d8:	sub	sp, sp, r3
   183dc:	add	r2, sp, #32
   183e0:	str	r2, [fp, #-512]	; 0xfffffe00
   183e4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   183e8:	sub	r2, fp, #496	; 0x1f0
   183ec:	str	r2, [fp, #-532]	; 0xfffffdec
   183f0:	mov	ip, #0
   183f4:	cmp	r3, #0
   183f8:	ldr	r3, [fp, #-360]	; 0xfffffe98
   183fc:	ldr	r2, [fp, #-504]	; 0xfffffe08
   18400:	mov	r6, ip
   18404:	ldrne	r1, [fp, #-536]	; 0xfffffde8
   18408:	add	r7, r3, #44	; 0x2c
   1840c:	ldreq	r4, [fp, #-504]	; 0xfffffe08
   18410:	str	ip, [fp, #-520]	; 0xfffffdf8
   18414:	ldrne	r4, [r1]
   18418:	ldr	sl, [r7, #-44]	; 0xffffffd4
   1841c:	sub	r3, r7, #44	; 0x2c
   18420:	str	r3, [fp, #-540]	; 0xfffffde4
   18424:	cmp	sl, r5
   18428:	beq	18ce4 <close_stdout@@Base+0x4508>
   1842c:	rsb	r3, r5, sl
   18430:	adds	r9, r3, r6
   18434:	mvncs	r9, #0
   18438:	cmp	r4, r9
   1843c:	bcs	18c74 <close_stdout@@Base+0x4498>
   18440:	cmp	r4, #0
   18444:	beq	18b40 <close_stdout@@Base+0x4364>
   18448:	blt	18f70 <close_stdout@@Base+0x4794>
   1844c:	lsl	r4, r4, #1
   18450:	cmp	r4, r9
   18454:	movcc	r4, r9
   18458:	cmn	r4, #1
   1845c:	beq	18f70 <close_stdout@@Base+0x4794>
   18460:	ldr	r1, [fp, #-504]	; 0xfffffe08
   18464:	subs	lr, r2, r1
   18468:	rsbs	r8, lr, #0
   1846c:	adcs	r8, r8, lr
   18470:	cmp	r2, r1
   18474:	cmpne	r2, #0
   18478:	bne	18b48 <close_stdout@@Base+0x436c>
   1847c:	mov	r0, r4
   18480:	str	r2, [fp, #-560]	; 0xfffffdd0
   18484:	str	r3, [fp, #-556]	; 0xfffffdd4
   18488:	bl	112d8 <malloc@plt>
   1848c:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   18490:	ldr	r3, [fp, #-556]	; 0xfffffdd4
   18494:	mov	sl, r0
   18498:	cmp	sl, #0
   1849c:	beq	18f70 <close_stdout@@Base+0x4794>
   184a0:	cmp	r6, #0
   184a4:	moveq	r8, #0
   184a8:	andne	r8, r8, #1
   184ac:	cmp	r8, #0
   184b0:	bne	18cc8 <close_stdout@@Base+0x44ec>
   184b4:	add	r0, sl, r6
   184b8:	mov	r1, r5
   184bc:	mov	r2, r3
   184c0:	bl	111e8 <memcpy@plt>
   184c4:	ldr	r3, [fp, #-364]	; 0xfffffe94
   184c8:	ldr	r2, [fp, #-520]	; 0xfffffdf8
   184cc:	cmp	r3, r2
   184d0:	beq	18f84 <close_stdout@@Base+0x47a8>
   184d4:	ldrb	r3, [r7, #-8]
   184d8:	cmp	r3, #37	; 0x25
   184dc:	beq	18b6c <close_stdout@@Base+0x4390>
   184e0:	ldr	r2, [r7, #-4]
   184e4:	cmn	r2, #1
   184e8:	beq	18e54 <close_stdout@@Base+0x4678>
   184ec:	cmp	r3, #110	; 0x6e
   184f0:	beq	18c98 <close_stdout@@Base+0x44bc>
   184f4:	ldr	r1, [fp, #-480]	; 0xfffffe20
   184f8:	ldr	r3, [r7, #-36]	; 0xffffffdc
   184fc:	ldr	r8, [r1, r2, lsl #4]
   18500:	tst	r3, #1
   18504:	ldr	r1, [fp, #-512]	; 0xfffffe00
   18508:	mov	r2, #37	; 0x25
   1850c:	addeq	r5, r1, #1
   18510:	strb	r2, [r1]
   18514:	ldrne	r2, [fp, #-512]	; 0xfffffe00
   18518:	ldrne	r1, [fp, #-512]	; 0xfffffe00
   1851c:	addne	r5, r2, #2
   18520:	movne	r2, #39	; 0x27
   18524:	strbne	r2, [r1, #1]
   18528:	tst	r3, #2
   1852c:	movne	r2, #45	; 0x2d
   18530:	strbne	r2, [r5]
   18534:	addne	r5, r5, #1
   18538:	tst	r3, #4
   1853c:	movne	r2, #43	; 0x2b
   18540:	strbne	r2, [r5]
   18544:	addne	r5, r5, #1
   18548:	tst	r3, #8
   1854c:	movne	r2, #32
   18550:	strbne	r2, [r5]
   18554:	addne	r5, r5, #1
   18558:	tst	r3, #16
   1855c:	movne	r2, #35	; 0x23
   18560:	strbne	r2, [r5]
   18564:	addne	r5, r5, #1
   18568:	tst	r3, #64	; 0x40
   1856c:	movne	r2, #73	; 0x49
   18570:	strbne	r2, [r5]
   18574:	addne	r5, r5, #1
   18578:	tst	r3, #32
   1857c:	movne	r3, #48	; 0x30
   18580:	strbne	r3, [r5]
   18584:	ldr	r1, [r7, #-32]	; 0xffffffe0
   18588:	addne	r5, r5, #1
   1858c:	ldr	r2, [r7, #-28]	; 0xffffffe4
   18590:	cmp	r1, r2
   18594:	beq	185a8 <close_stdout@@Base+0x3dcc>
   18598:	rsb	r2, r1, r2
   1859c:	mov	r0, r5
   185a0:	add	r5, r5, r2
   185a4:	bl	111e8 <memcpy@plt>
   185a8:	ldr	r1, [r7, #-20]	; 0xffffffec
   185ac:	ldr	r2, [r7, #-16]
   185b0:	cmp	r1, r2
   185b4:	beq	185c8 <close_stdout@@Base+0x3dec>
   185b8:	rsb	r2, r1, r2
   185bc:	mov	r0, r5
   185c0:	add	r5, r5, r2
   185c4:	bl	111e8 <memcpy@plt>
   185c8:	sub	r3, r8, #7
   185cc:	cmp	r3, #9
   185d0:	bhi	185f8 <close_stdout@@Base+0x3e1c>
   185d4:	mov	r2, #1
   185d8:	lsl	r3, r2, r3
   185dc:	movw	r2, #643	; 0x283
   185e0:	and	r2, r3, r2
   185e4:	cmp	r2, #0
   185e8:	beq	18cf0 <close_stdout@@Base+0x4514>
   185ec:	mov	r3, #108	; 0x6c
   185f0:	add	r5, r5, #1
   185f4:	strb	r3, [r5, #-1]
   185f8:	ldrb	r3, [r7, #-8]
   185fc:	mov	r1, #0
   18600:	strb	r1, [r5, #1]
   18604:	strb	r3, [r5]
   18608:	ldr	r3, [r7, #-24]	; 0xffffffe8
   1860c:	cmn	r3, #1
   18610:	beq	18e10 <close_stdout@@Base+0x4634>
   18614:	ldr	r2, [fp, #-480]	; 0xfffffe20
   18618:	add	r1, r2, r3, lsl #4
   1861c:	ldr	r3, [r2, r3, lsl #4]
   18620:	cmp	r3, #5
   18624:	bne	18e54 <close_stdout@@Base+0x4678>
   18628:	ldr	r3, [r1, #8]
   1862c:	mov	r6, #1
   18630:	str	r3, [fp, #-492]	; 0xfffffe14
   18634:	ldr	r3, [r7, #-12]
   18638:	cmn	r3, #1
   1863c:	beq	18668 <close_stdout@@Base+0x3e8c>
   18640:	ldr	r2, [fp, #-480]	; 0xfffffe20
   18644:	add	r1, r2, r3, lsl #4
   18648:	ldr	r3, [r2, r3, lsl #4]
   1864c:	cmp	r3, #5
   18650:	bne	18e54 <close_stdout@@Base+0x4678>
   18654:	ldr	r2, [r1, #8]
   18658:	sub	r1, fp, #36	; 0x24
   1865c:	add	r3, r1, r6, lsl #2
   18660:	add	r6, r6, #1
   18664:	str	r2, [r3, #-456]	; 0xfffffe38
   18668:	adds	r2, r9, #2
   1866c:	str	r2, [fp, #-524]	; 0xfffffdf4
   18670:	mov	r3, r2
   18674:	mvncs	r3, #0
   18678:	cmp	r4, r3
   1867c:	bcs	187b8 <close_stdout@@Base+0x3fdc>
   18680:	cmp	r4, #0
   18684:	beq	18730 <close_stdout@@Base+0x3f54>
   18688:	blt	1915c <close_stdout@@Base+0x4980>
   1868c:	cmp	r9, r2
   18690:	lsl	r4, r4, #1
   18694:	bls	18740 <close_stdout@@Base+0x3f64>
   18698:	str	sl, [fp, #-560]	; 0xfffffdd0
   1869c:	bl	1135c <__errno_location@plt>
   186a0:	str	r0, [fp, #-516]	; 0xfffffdfc
   186a4:	mov	r2, sl
   186a8:	ldr	r3, [fp, #-504]	; 0xfffffe08
   186ac:	cmp	r2, #0
   186b0:	cmpne	r2, r3
   186b4:	bne	190fc <close_stdout@@Base+0x4920>
   186b8:	ldr	r1, [fp, #-548]	; 0xfffffddc
   186bc:	cmp	r1, #0
   186c0:	beq	186d0 <close_stdout@@Base+0x3ef4>
   186c4:	mov	r0, r1
   186c8:	bl	111d0 <free@plt>
   186cc:	b	186d8 <close_stdout@@Base+0x3efc>
   186d0:	bl	1135c <__errno_location@plt>
   186d4:	str	r0, [fp, #-516]	; 0xfffffdfc
   186d8:	ldr	r0, [fp, #-360]	; 0xfffffe98
   186dc:	sub	r3, fp, #348	; 0x15c
   186e0:	cmp	r0, r3
   186e4:	beq	186ec <close_stdout@@Base+0x3f10>
   186e8:	bl	111d0 <free@plt>
   186ec:	ldr	r0, [fp, #-480]	; 0xfffffe20
   186f0:	sub	r3, fp, #476	; 0x1dc
   186f4:	cmp	r0, r3
   186f8:	beq	18700 <close_stdout@@Base+0x3f24>
   186fc:	bl	111d0 <free@plt>
   18700:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   18704:	mov	r3, #0
   18708:	mov	r2, #12
   1870c:	str	r2, [r1]
   18710:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   18714:	mov	r0, r3
   18718:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1871c:	ldr	r3, [r1]
   18720:	cmp	r2, r3
   18724:	bne	19158 <close_stdout@@Base+0x497c>
   18728:	sub	sp, fp, #32
   1872c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18730:	ldr	r3, [fp, #-524]	; 0xfffffdf4
   18734:	cmp	r9, r3
   18738:	bhi	18698 <close_stdout@@Base+0x3ebc>
   1873c:	mov	r4, #12
   18740:	ldr	r3, [fp, #-524]	; 0xfffffdf4
   18744:	cmp	r3, r4
   18748:	movcs	r4, r3
   1874c:	cmn	r4, #1
   18750:	beq	18698 <close_stdout@@Base+0x3ebc>
   18754:	ldr	r1, [fp, #-504]	; 0xfffffe08
   18758:	subs	r0, sl, r1
   1875c:	rsbs	r2, r0, #0
   18760:	adcs	r2, r2, r0
   18764:	cmp	sl, r1
   18768:	cmpne	sl, #0
   1876c:	bne	18e38 <close_stdout@@Base+0x465c>
   18770:	mov	r0, r4
   18774:	str	r2, [fp, #-560]	; 0xfffffdd0
   18778:	bl	112d8 <malloc@plt>
   1877c:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   18780:	mov	r3, r0
   18784:	cmp	r3, #0
   18788:	beq	18698 <close_stdout@@Base+0x3ebc>
   1878c:	cmp	r9, #0
   18790:	moveq	r2, #0
   18794:	andne	r2, r2, #1
   18798:	cmp	r2, #0
   1879c:	moveq	sl, r3
   187a0:	beq	187b8 <close_stdout@@Base+0x3fdc>
   187a4:	mov	r1, sl
   187a8:	mov	r0, r3
   187ac:	mov	r2, r9
   187b0:	mov	sl, r3
   187b4:	bl	111e8 <memcpy@plt>
   187b8:	mov	r2, #0
   187bc:	strb	r2, [sl, r9]
   187c0:	sub	r8, r8, #1
   187c4:	str	r8, [fp, #-508]	; 0xfffffe04
   187c8:	bl	1135c <__errno_location@plt>
   187cc:	rsb	ip, r9, r4
   187d0:	str	r5, [fp, #-544]	; 0xfffffde0
   187d4:	mov	r5, ip
   187d8:	ldr	r3, [r0]
   187dc:	str	r0, [fp, #-516]	; 0xfffffdfc
   187e0:	str	r3, [fp, #-552]	; 0xfffffdd8
   187e4:	ldr	r2, [fp, #-516]	; 0xfffffdfc
   187e8:	mvn	r1, #0
   187ec:	cmp	r5, #0
   187f0:	str	r1, [fp, #-496]	; 0xfffffe10
   187f4:	ldr	r1, [fp, #-508]	; 0xfffffe04
   187f8:	mov	r3, #0
   187fc:	movge	r8, r5
   18800:	mvnlt	r8, #-2147483648	; 0x80000000
   18804:	str	r3, [r2]
   18808:	cmp	r1, #16
   1880c:	addls	pc, pc, r1, lsl #2
   18810:	b	18e54 <close_stdout@@Base+0x4678>
   18814:	b	18d48 <close_stdout@@Base+0x456c>
   18818:	b	18c28 <close_stdout@@Base+0x444c>
   1881c:	b	18d2c <close_stdout@@Base+0x4550>
   18820:	b	18d10 <close_stdout@@Base+0x4534>
   18824:	b	18858 <close_stdout@@Base+0x407c>
   18828:	b	18858 <close_stdout@@Base+0x407c>
   1882c:	b	18858 <close_stdout@@Base+0x407c>
   18830:	b	18858 <close_stdout@@Base+0x407c>
   18834:	b	189b0 <close_stdout@@Base+0x41d4>
   18838:	b	189b0 <close_stdout@@Base+0x41d4>
   1883c:	b	18a0c <close_stdout@@Base+0x4230>
   18840:	b	18a0c <close_stdout@@Base+0x4230>
   18844:	b	18858 <close_stdout@@Base+0x407c>
   18848:	b	18858 <close_stdout@@Base+0x407c>
   1884c:	b	18858 <close_stdout@@Base+0x407c>
   18850:	b	18858 <close_stdout@@Base+0x407c>
   18854:	b	18858 <close_stdout@@Base+0x407c>
   18858:	ldr	r2, [r7, #-4]
   1885c:	cmp	r6, #1
   18860:	ldr	r3, [fp, #-480]	; 0xfffffe20
   18864:	add	r3, r3, r2, lsl #4
   18868:	ldr	r3, [r3, #8]
   1886c:	beq	18c40 <close_stdout@@Base+0x4464>
   18870:	cmp	r6, #2
   18874:	bne	18a68 <close_stdout@@Base+0x428c>
   18878:	ldr	r2, [fp, #-512]	; 0xfffffe00
   1887c:	add	r0, sl, r9
   18880:	ldr	lr, [fp, #-492]	; 0xfffffe14
   18884:	mov	r1, r8
   18888:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1888c:	str	r2, [sp]
   18890:	mov	r2, #1
   18894:	str	r3, [sp, #12]
   18898:	sub	r3, fp, #496	; 0x1f0
   1889c:	str	lr, [sp, #4]
   188a0:	str	r3, [sp, #16]
   188a4:	mvn	r3, #0
   188a8:	str	ip, [sp, #8]
   188ac:	bl	11458 <__snprintf_chk@plt>
   188b0:	ldr	r3, [fp, #-496]	; 0xfffffe10
   188b4:	cmp	r3, #0
   188b8:	blt	18a9c <close_stdout@@Base+0x42c0>
   188bc:	cmp	r8, r3
   188c0:	bls	188d4 <close_stdout@@Base+0x40f8>
   188c4:	add	r2, sl, r3
   188c8:	ldrb	r2, [r2, r9]
   188cc:	cmp	r2, #0
   188d0:	bne	18e54 <close_stdout@@Base+0x4678>
   188d4:	cmp	r0, r3
   188d8:	movle	r0, r3
   188dc:	ble	188e4 <close_stdout@@Base+0x4108>
   188e0:	str	r0, [fp, #-496]	; 0xfffffe10
   188e4:	add	r3, r0, #1
   188e8:	cmp	r8, r3
   188ec:	bhi	19084 <close_stdout@@Base+0x48a8>
   188f0:	cmn	r8, #-2147483647	; 0x80000001
   188f4:	beq	1909c <close_stdout@@Base+0x48c0>
   188f8:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   188fc:	add	r0, r0, r2
   18900:	cmp	r9, r0
   18904:	mvnhi	r0, #0
   18908:	cmp	r4, #0
   1890c:	mvnlt	r0, #0
   18910:	blt	18920 <close_stdout@@Base+0x4144>
   18914:	lsl	r3, r4, #1
   18918:	cmp	r0, r3
   1891c:	movcc	r0, r3
   18920:	cmp	r4, r0
   18924:	bcs	187e4 <close_stdout@@Base+0x4008>
   18928:	cmp	r4, #0
   1892c:	beq	18c7c <close_stdout@@Base+0x44a0>
   18930:	blt	186a4 <close_stdout@@Base+0x3ec8>
   18934:	lsl	r4, r4, #1
   18938:	cmp	r4, r0
   1893c:	movcc	r4, r0
   18940:	cmn	r4, #1
   18944:	beq	186a4 <close_stdout@@Base+0x3ec8>
   18948:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1894c:	subs	r2, sl, r3
   18950:	rsbs	r5, r2, #0
   18954:	adcs	r5, r5, r2
   18958:	cmp	sl, r3
   1895c:	cmpne	sl, #0
   18960:	bne	18c84 <close_stdout@@Base+0x44a8>
   18964:	mov	r0, r4
   18968:	bl	112d8 <malloc@plt>
   1896c:	mov	r3, r0
   18970:	cmp	r3, #0
   18974:	beq	186a4 <close_stdout@@Base+0x3ec8>
   18978:	cmp	r9, #0
   1897c:	moveq	r5, #0
   18980:	andne	r5, r5, #1
   18984:	cmp	r5, #0
   18988:	rsbeq	r5, r9, r4
   1898c:	moveq	sl, r3
   18990:	beq	187e4 <close_stdout@@Base+0x4008>
   18994:	mov	r1, sl
   18998:	mov	r0, r3
   1899c:	mov	r2, r9
   189a0:	mov	sl, r3
   189a4:	rsb	r5, r9, r4
   189a8:	bl	111e8 <memcpy@plt>
   189ac:	b	187e4 <close_stdout@@Base+0x4008>
   189b0:	ldr	r2, [r7, #-4]
   189b4:	cmp	r6, #1
   189b8:	ldr	r3, [fp, #-480]	; 0xfffffe20
   189bc:	add	r3, r3, r2, lsl #4
   189c0:	ldrd	r2, [r3, #8]
   189c4:	beq	18ddc <close_stdout@@Base+0x4600>
   189c8:	cmp	r6, #2
   189cc:	bne	18eb8 <close_stdout@@Base+0x46dc>
   189d0:	ldr	r1, [fp, #-512]	; 0xfffffe00
   189d4:	add	r0, sl, r9
   189d8:	ldr	lr, [fp, #-492]	; 0xfffffe14
   189dc:	ldr	ip, [fp, #-488]	; 0xfffffe18
   189e0:	strd	r2, [sp, #16]
   189e4:	sub	r2, fp, #496	; 0x1f0
   189e8:	str	r1, [sp]
   189ec:	mvn	r3, #0
   189f0:	str	r2, [sp, #24]
   189f4:	mov	r1, r8
   189f8:	mov	r2, #1
   189fc:	str	lr, [sp, #4]
   18a00:	str	ip, [sp, #8]
   18a04:	bl	11458 <__snprintf_chk@plt>
   18a08:	b	188b0 <close_stdout@@Base+0x40d4>
   18a0c:	ldr	r2, [r7, #-4]
   18a10:	cmp	r6, #1
   18a14:	ldr	r3, [fp, #-480]	; 0xfffffe20
   18a18:	add	r3, r3, r2, lsl #4
   18a1c:	ldrd	r0, [r3, #8]
   18a20:	beq	18da8 <close_stdout@@Base+0x45cc>
   18a24:	cmp	r6, #2
   18a28:	bne	18e8c <close_stdout@@Base+0x46b0>
   18a2c:	ldr	r3, [fp, #-492]	; 0xfffffe14
   18a30:	ldr	r2, [fp, #-512]	; 0xfffffe00
   18a34:	ldr	lr, [fp, #-488]	; 0xfffffe18
   18a38:	strd	r0, [sp, #16]
   18a3c:	add	r0, sl, r9
   18a40:	str	r2, [sp]
   18a44:	mov	r1, r8
   18a48:	sub	r2, fp, #496	; 0x1f0
   18a4c:	str	r3, [sp, #4]
   18a50:	str	r2, [sp, #24]
   18a54:	mvn	r3, #0
   18a58:	mov	r2, #1
   18a5c:	str	lr, [sp, #8]
   18a60:	bl	11458 <__snprintf_chk@plt>
   18a64:	b	188b0 <close_stdout@@Base+0x40d4>
   18a68:	ldr	r1, [fp, #-512]	; 0xfffffe00
   18a6c:	sub	r2, fp, #496	; 0x1f0
   18a70:	str	r3, [sp, #4]
   18a74:	add	r0, sl, r9
   18a78:	str	r2, [sp, #8]
   18a7c:	mvn	r3, #0
   18a80:	str	r1, [sp]
   18a84:	mov	r2, #1
   18a88:	mov	r1, r8
   18a8c:	bl	11458 <__snprintf_chk@plt>
   18a90:	ldr	r3, [fp, #-496]	; 0xfffffe10
   18a94:	cmp	r3, #0
   18a98:	bge	188bc <close_stdout@@Base+0x40e0>
   18a9c:	ldr	r1, [fp, #-544]	; 0xfffffde0
   18aa0:	ldrb	r3, [r1, #1]
   18aa4:	cmp	r3, #0
   18aa8:	movne	r2, #0
   18aac:	strbne	r2, [r1, #1]
   18ab0:	bne	187e4 <close_stdout@@Base+0x4008>
   18ab4:	cmp	r0, #0
   18ab8:	bge	188e0 <close_stdout@@Base+0x4104>
   18abc:	ldr	r3, [fp, #-504]	; 0xfffffe08
   18ac0:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   18ac4:	cmp	sl, #0
   18ac8:	cmpne	r3, sl
   18acc:	ldr	r4, [r1]
   18ad0:	bne	18f28 <close_stdout@@Base+0x474c>
   18ad4:	ldr	r2, [fp, #-548]	; 0xfffffddc
   18ad8:	cmp	r2, #0
   18adc:	beq	18ae8 <close_stdout@@Base+0x430c>
   18ae0:	mov	r0, r2
   18ae4:	bl	111d0 <free@plt>
   18ae8:	ldr	r0, [fp, #-360]	; 0xfffffe98
   18aec:	sub	r3, fp, #348	; 0x15c
   18af0:	cmp	r0, r3
   18af4:	beq	18afc <close_stdout@@Base+0x4320>
   18af8:	bl	111d0 <free@plt>
   18afc:	ldr	r0, [fp, #-480]	; 0xfffffe20
   18b00:	sub	r3, fp, #476	; 0x1dc
   18b04:	cmp	r0, r3
   18b08:	beq	18b10 <close_stdout@@Base+0x4334>
   18b0c:	bl	111d0 <free@plt>
   18b10:	cmp	r4, #0
   18b14:	bne	18b30 <close_stdout@@Base+0x4354>
   18b18:	ldr	r3, [fp, #-540]	; 0xfffffde4
   18b1c:	ldrb	r4, [r3, #36]	; 0x24
   18b20:	and	r4, r4, #239	; 0xef
   18b24:	cmp	r4, #99	; 0x63
   18b28:	movne	r4, #22
   18b2c:	moveq	r4, #84	; 0x54
   18b30:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   18b34:	mov	r3, #0
   18b38:	str	r4, [r1]
   18b3c:	b	18710 <close_stdout@@Base+0x3f34>
   18b40:	mov	r4, #12
   18b44:	b	18450 <close_stdout@@Base+0x3c74>
   18b48:	mov	r0, r2
   18b4c:	mov	r1, r4
   18b50:	str	r2, [fp, #-560]	; 0xfffffdd0
   18b54:	str	r3, [fp, #-556]	; 0xfffffdd4
   18b58:	bl	11230 <realloc@plt>
   18b5c:	ldr	r3, [fp, #-556]	; 0xfffffdd4
   18b60:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   18b64:	mov	sl, r0
   18b68:	b	18498 <close_stdout@@Base+0x3cbc>
   18b6c:	ldr	r3, [r7, #-4]
   18b70:	cmn	r3, #1
   18b74:	bne	18e54 <close_stdout@@Base+0x4678>
   18b78:	adds	r6, r9, #1
   18b7c:	mvncs	r6, #0
   18b80:	cmp	r4, r6
   18b84:	bcs	18c04 <close_stdout@@Base+0x4428>
   18b88:	cmp	r4, #0
   18b8c:	beq	18e58 <close_stdout@@Base+0x467c>
   18b90:	blt	18698 <close_stdout@@Base+0x3ebc>
   18b94:	lsl	r4, r4, #1
   18b98:	cmp	r4, r6
   18b9c:	movcc	r4, r6
   18ba0:	cmn	r4, #1
   18ba4:	beq	18698 <close_stdout@@Base+0x3ebc>
   18ba8:	ldr	r3, [fp, #-504]	; 0xfffffe08
   18bac:	subs	ip, sl, r3
   18bb0:	rsbs	r5, ip, #0
   18bb4:	adcs	r5, r5, ip
   18bb8:	cmp	sl, r3
   18bbc:	cmpne	sl, #0
   18bc0:	bne	18e60 <close_stdout@@Base+0x4684>
   18bc4:	mov	r0, r4
   18bc8:	bl	112d8 <malloc@plt>
   18bcc:	mov	r3, r0
   18bd0:	cmp	r3, #0
   18bd4:	beq	18698 <close_stdout@@Base+0x3ebc>
   18bd8:	cmp	r9, #0
   18bdc:	moveq	r5, #0
   18be0:	andne	r5, r5, #1
   18be4:	cmp	r5, #0
   18be8:	moveq	sl, r3
   18bec:	beq	18c04 <close_stdout@@Base+0x4428>
   18bf0:	mov	r1, sl
   18bf4:	mov	r0, r3
   18bf8:	mov	r2, r9
   18bfc:	mov	sl, r3
   18c00:	bl	111e8 <memcpy@plt>
   18c04:	mov	r2, sl
   18c08:	mov	r1, #37	; 0x25
   18c0c:	strb	r1, [sl, r9]
   18c10:	ldr	r1, [fp, #-520]	; 0xfffffdf8
   18c14:	add	r7, r7, #44	; 0x2c
   18c18:	ldr	r5, [r7, #-84]	; 0xffffffac
   18c1c:	add	r1, r1, #1
   18c20:	str	r1, [fp, #-520]	; 0xfffffdf8
   18c24:	b	18418 <close_stdout@@Base+0x3c3c>
   18c28:	ldr	r2, [r7, #-4]
   18c2c:	cmp	r6, #1
   18c30:	ldr	r3, [fp, #-480]	; 0xfffffe20
   18c34:	add	r3, r3, r2, lsl #4
   18c38:	ldrb	r3, [r3, #8]
   18c3c:	bne	18870 <close_stdout@@Base+0x4094>
   18c40:	ldr	r1, [fp, #-512]	; 0xfffffe00
   18c44:	add	r0, sl, r9
   18c48:	ldr	lr, [fp, #-492]	; 0xfffffe14
   18c4c:	mov	r2, r6
   18c50:	str	r3, [sp, #8]
   18c54:	sub	r3, fp, #496	; 0x1f0
   18c58:	str	r1, [sp]
   18c5c:	mov	r1, r8
   18c60:	str	r3, [sp, #12]
   18c64:	mvn	r3, #0
   18c68:	str	lr, [sp, #4]
   18c6c:	bl	11458 <__snprintf_chk@plt>
   18c70:	b	188b0 <close_stdout@@Base+0x40d4>
   18c74:	mov	sl, r2
   18c78:	b	184b4 <close_stdout@@Base+0x3cd8>
   18c7c:	mov	r4, #12
   18c80:	b	18938 <close_stdout@@Base+0x415c>
   18c84:	mov	r0, sl
   18c88:	mov	r1, r4
   18c8c:	bl	11230 <realloc@plt>
   18c90:	mov	r3, r0
   18c94:	b	18970 <close_stdout@@Base+0x4194>
   18c98:	ldr	r3, [fp, #-480]	; 0xfffffe20
   18c9c:	add	r1, r3, r2, lsl #4
   18ca0:	ldr	r3, [r3, r2, lsl #4]
   18ca4:	sub	r3, r3, #18
   18ca8:	cmp	r3, #4
   18cac:	addls	pc, pc, r3, lsl #2
   18cb0:	b	18e54 <close_stdout@@Base+0x4678>
   18cb4:	b	18ee4 <close_stdout@@Base+0x4708>
   18cb8:	b	18ef8 <close_stdout@@Base+0x471c>
   18cbc:	b	18d94 <close_stdout@@Base+0x45b8>
   18cc0:	b	18d94 <close_stdout@@Base+0x45b8>
   18cc4:	b	18f0c <close_stdout@@Base+0x4730>
   18cc8:	mov	r1, r2
   18ccc:	mov	r0, sl
   18cd0:	mov	r2, r6
   18cd4:	str	r3, [fp, #-556]	; 0xfffffdd4
   18cd8:	bl	111e8 <memcpy@plt>
   18cdc:	ldr	r3, [fp, #-556]	; 0xfffffdd4
   18ce0:	b	184b4 <close_stdout@@Base+0x3cd8>
   18ce4:	mov	r9, r6
   18ce8:	mov	sl, r2
   18cec:	b	184c4 <close_stdout@@Base+0x3ce8>
   18cf0:	tst	r3, #32
   18cf4:	bne	18e7c <close_stdout@@Base+0x46a0>
   18cf8:	tst	r3, #12
   18cfc:	beq	185f8 <close_stdout@@Base+0x3e1c>
   18d00:	mov	r3, #108	; 0x6c
   18d04:	add	r5, r5, #1
   18d08:	strb	r3, [r5, #-1]
   18d0c:	b	185ec <close_stdout@@Base+0x3e10>
   18d10:	ldr	r2, [r7, #-4]
   18d14:	cmp	r6, #1
   18d18:	ldr	r3, [fp, #-480]	; 0xfffffe20
   18d1c:	add	r3, r3, r2, lsl #4
   18d20:	ldrh	r3, [r3, #8]
   18d24:	bne	18870 <close_stdout@@Base+0x4094>
   18d28:	b	18c40 <close_stdout@@Base+0x4464>
   18d2c:	ldr	r2, [r7, #-4]
   18d30:	cmp	r6, #1
   18d34:	ldr	r3, [fp, #-480]	; 0xfffffe20
   18d38:	add	r3, r3, r2, lsl #4
   18d3c:	ldrsh	r3, [r3, #8]
   18d40:	bne	18870 <close_stdout@@Base+0x4094>
   18d44:	b	18c40 <close_stdout@@Base+0x4464>
   18d48:	ldr	r2, [r7, #-4]
   18d4c:	cmp	r6, #1
   18d50:	ldr	r3, [fp, #-480]	; 0xfffffe20
   18d54:	add	r3, r3, r2, lsl #4
   18d58:	ldrsb	r3, [r3, #8]
   18d5c:	beq	18c40 <close_stdout@@Base+0x4464>
   18d60:	cmp	r6, #2
   18d64:	beq	18878 <close_stdout@@Base+0x409c>
   18d68:	ldr	r2, [fp, #-512]	; 0xfffffe00
   18d6c:	add	r0, sl, r9
   18d70:	str	r3, [sp, #4]
   18d74:	mov	r1, r8
   18d78:	sub	r3, fp, #496	; 0x1f0
   18d7c:	str	r3, [sp, #8]
   18d80:	str	r2, [sp]
   18d84:	mvn	r3, #0
   18d88:	mov	r2, #1
   18d8c:	bl	11458 <__snprintf_chk@plt>
   18d90:	b	188b0 <close_stdout@@Base+0x40d4>
   18d94:	ldr	r3, [r1, #8]
   18d98:	mov	r2, sl
   18d9c:	mov	r6, r9
   18da0:	str	r9, [r3]
   18da4:	b	18c10 <close_stdout@@Base+0x4434>
   18da8:	ldr	r3, [fp, #-492]	; 0xfffffe14
   18dac:	ldr	r2, [fp, #-512]	; 0xfffffe00
   18db0:	strd	r0, [sp, #8]
   18db4:	sub	r1, fp, #496	; 0x1f0
   18db8:	str	r3, [sp, #4]
   18dbc:	add	r0, sl, r9
   18dc0:	str	r2, [sp]
   18dc4:	mvn	r3, #0
   18dc8:	str	r1, [sp, #16]
   18dcc:	mov	r2, r6
   18dd0:	mov	r1, r8
   18dd4:	bl	11458 <__snprintf_chk@plt>
   18dd8:	b	188b0 <close_stdout@@Base+0x40d4>
   18ddc:	ldr	r1, [fp, #-512]	; 0xfffffe00
   18de0:	add	r0, sl, r9
   18de4:	ldr	lr, [fp, #-492]	; 0xfffffe14
   18de8:	strd	r2, [sp, #8]
   18dec:	sub	r3, fp, #496	; 0x1f0
   18df0:	str	r1, [sp]
   18df4:	mov	r2, r6
   18df8:	str	r3, [sp, #16]
   18dfc:	mov	r1, r8
   18e00:	mvn	r3, #0
   18e04:	str	lr, [sp, #4]
   18e08:	bl	11458 <__snprintf_chk@plt>
   18e0c:	b	188b0 <close_stdout@@Base+0x40d4>
   18e10:	mov	r6, #0
   18e14:	b	18634 <close_stdout@@Base+0x3e58>
   18e18:	cmn	r0, #1
   18e1c:	beq	186d0 <close_stdout@@Base+0x3ef4>
   18e20:	bl	112d8 <malloc@plt>
   18e24:	cmp	r0, #0
   18e28:	str	r0, [fp, #-512]	; 0xfffffe00
   18e2c:	beq	186d0 <close_stdout@@Base+0x3ef4>
   18e30:	str	r0, [fp, #-548]	; 0xfffffddc
   18e34:	b	183e4 <close_stdout@@Base+0x3c08>
   18e38:	mov	r0, sl
   18e3c:	mov	r1, r4
   18e40:	str	r2, [fp, #-560]	; 0xfffffdd0
   18e44:	bl	11230 <realloc@plt>
   18e48:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   18e4c:	mov	r3, r0
   18e50:	b	18784 <close_stdout@@Base+0x3fa8>
   18e54:	bl	11440 <abort@plt>
   18e58:	mov	r4, #12
   18e5c:	b	18b98 <close_stdout@@Base+0x43bc>
   18e60:	mov	r0, sl
   18e64:	mov	r1, r4
   18e68:	bl	11230 <realloc@plt>
   18e6c:	mov	r3, r0
   18e70:	b	18bd0 <close_stdout@@Base+0x43f4>
   18e74:	mov	r3, #0
   18e78:	b	18710 <close_stdout@@Base+0x3f34>
   18e7c:	mov	r3, #76	; 0x4c
   18e80:	add	r5, r5, #1
   18e84:	strb	r3, [r5, #-1]
   18e88:	b	185f8 <close_stdout@@Base+0x3e1c>
   18e8c:	ldr	r3, [fp, #-512]	; 0xfffffe00
   18e90:	mov	r2, #1
   18e94:	strd	r0, [sp, #8]
   18e98:	sub	r1, fp, #496	; 0x1f0
   18e9c:	add	r0, sl, r9
   18ea0:	str	r1, [sp, #16]
   18ea4:	str	r3, [sp]
   18ea8:	mov	r1, r8
   18eac:	mvn	r3, #0
   18eb0:	bl	11458 <__snprintf_chk@plt>
   18eb4:	b	188b0 <close_stdout@@Base+0x40d4>
   18eb8:	ldr	r1, [fp, #-512]	; 0xfffffe00
   18ebc:	add	r0, sl, r9
   18ec0:	strd	r2, [sp, #8]
   18ec4:	sub	r2, fp, #496	; 0x1f0
   18ec8:	mvn	r3, #0
   18ecc:	str	r2, [sp, #16]
   18ed0:	str	r1, [sp]
   18ed4:	mov	r2, #1
   18ed8:	mov	r1, r8
   18edc:	bl	11458 <__snprintf_chk@plt>
   18ee0:	b	188b0 <close_stdout@@Base+0x40d4>
   18ee4:	ldr	r3, [r1, #8]
   18ee8:	mov	r2, sl
   18eec:	mov	r6, r9
   18ef0:	strb	r9, [r3]
   18ef4:	b	18c10 <close_stdout@@Base+0x4434>
   18ef8:	ldr	r3, [r1, #8]
   18efc:	mov	r2, sl
   18f00:	mov	r6, r9
   18f04:	strh	r9, [r3]
   18f08:	b	18c10 <close_stdout@@Base+0x4434>
   18f0c:	ldr	r3, [r1, #8]
   18f10:	mov	r2, sl
   18f14:	mov	r1, #0
   18f18:	mov	r6, r9
   18f1c:	str	r9, [r3]
   18f20:	str	r1, [r3, #4]
   18f24:	b	18c10 <close_stdout@@Base+0x4434>
   18f28:	mov	r0, sl
   18f2c:	bl	111d0 <free@plt>
   18f30:	b	18ad4 <close_stdout@@Base+0x42f8>
   18f34:	ldr	r0, [fp, #-360]	; 0xfffffe98
   18f38:	sub	r3, fp, #348	; 0x15c
   18f3c:	cmp	r0, r3
   18f40:	beq	18f48 <close_stdout@@Base+0x476c>
   18f44:	bl	111d0 <free@plt>
   18f48:	ldr	r0, [fp, #-480]	; 0xfffffe20
   18f4c:	sub	r3, fp, #476	; 0x1dc
   18f50:	cmp	r0, r3
   18f54:	beq	18f5c <close_stdout@@Base+0x4780>
   18f58:	bl	111d0 <free@plt>
   18f5c:	bl	1135c <__errno_location@plt>
   18f60:	mov	r2, #22
   18f64:	mov	r3, #0
   18f68:	str	r2, [r0]
   18f6c:	b	18710 <close_stdout@@Base+0x3f34>
   18f70:	str	r2, [fp, #-560]	; 0xfffffdd0
   18f74:	bl	1135c <__errno_location@plt>
   18f78:	ldr	r2, [fp, #-560]	; 0xfffffdd0
   18f7c:	str	r0, [fp, #-516]	; 0xfffffdfc
   18f80:	b	186a8 <close_stdout@@Base+0x3ecc>
   18f84:	adds	r5, r9, #1
   18f88:	movcc	r3, r5
   18f8c:	mvncs	r3, #0
   18f90:	cmp	r3, r4
   18f94:	bls	1901c <close_stdout@@Base+0x4840>
   18f98:	cmp	r4, #0
   18f9c:	moveq	r4, #12
   18fa0:	beq	18fac <close_stdout@@Base+0x47d0>
   18fa4:	lslge	r4, r4, #1
   18fa8:	mvnlt	r4, #0
   18fac:	cmp	r5, r9
   18fb0:	movcs	r3, r5
   18fb4:	mvncc	r3, #0
   18fb8:	cmp	r4, r3
   18fbc:	bcs	18fcc <close_stdout@@Base+0x47f0>
   18fc0:	cmp	r5, r9
   18fc4:	bcc	18698 <close_stdout@@Base+0x3ebc>
   18fc8:	mov	r4, r5
   18fcc:	cmn	r4, #1
   18fd0:	beq	18698 <close_stdout@@Base+0x3ebc>
   18fd4:	ldr	r2, [fp, #-504]	; 0xfffffe08
   18fd8:	subs	r3, sl, r2
   18fdc:	rsbs	r6, r3, #0
   18fe0:	adcs	r6, r6, r3
   18fe4:	cmp	sl, r2
   18fe8:	cmpne	sl, #0
   18fec:	bne	1912c <close_stdout@@Base+0x4950>
   18ff0:	mov	r0, r4
   18ff4:	bl	112d8 <malloc@plt>
   18ff8:	mov	r3, r0
   18ffc:	cmp	r3, #0
   19000:	beq	18698 <close_stdout@@Base+0x3ebc>
   19004:	cmp	r9, #0
   19008:	moveq	r6, #0
   1900c:	andne	r6, r6, #1
   19010:	cmp	r6, #0
   19014:	moveq	sl, r3
   19018:	bne	19140 <close_stdout@@Base+0x4964>
   1901c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   19020:	cmp	sl, r3
   19024:	mov	r3, #0
   19028:	strb	r3, [sl, r9]
   1902c:	beq	19038 <close_stdout@@Base+0x485c>
   19030:	cmp	r4, r5
   19034:	bhi	19114 <close_stdout@@Base+0x4938>
   19038:	ldr	r1, [fp, #-548]	; 0xfffffddc
   1903c:	cmp	r1, #0
   19040:	beq	1904c <close_stdout@@Base+0x4870>
   19044:	mov	r0, r1
   19048:	bl	111d0 <free@plt>
   1904c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   19050:	sub	r3, fp, #348	; 0x15c
   19054:	cmp	r0, r3
   19058:	beq	19060 <close_stdout@@Base+0x4884>
   1905c:	bl	111d0 <free@plt>
   19060:	ldr	r0, [fp, #-480]	; 0xfffffe20
   19064:	sub	r3, fp, #476	; 0x1dc
   19068:	cmp	r0, r3
   1906c:	beq	19074 <close_stdout@@Base+0x4898>
   19070:	bl	111d0 <free@plt>
   19074:	ldr	r2, [fp, #-536]	; 0xfffffde8
   19078:	mov	r3, sl
   1907c:	str	r9, [r2]
   19080:	b	18710 <close_stdout@@Base+0x3f34>
   19084:	ldr	r2, [fp, #-516]	; 0xfffffdfc
   19088:	add	r6, r0, r9
   1908c:	ldr	r1, [fp, #-552]	; 0xfffffdd8
   19090:	str	r1, [r2]
   19094:	mov	r2, sl
   19098:	b	18c10 <close_stdout@@Base+0x4434>
   1909c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   190a0:	cmp	sl, #0
   190a4:	cmpne	sl, r3
   190a8:	bne	19108 <close_stdout@@Base+0x492c>
   190ac:	ldr	r3, [fp, #-548]	; 0xfffffddc
   190b0:	cmp	r3, #0
   190b4:	beq	190c0 <close_stdout@@Base+0x48e4>
   190b8:	mov	r0, r3
   190bc:	bl	111d0 <free@plt>
   190c0:	ldr	r0, [fp, #-360]	; 0xfffffe98
   190c4:	sub	r3, fp, #348	; 0x15c
   190c8:	cmp	r0, r3
   190cc:	beq	190d4 <close_stdout@@Base+0x48f8>
   190d0:	bl	111d0 <free@plt>
   190d4:	ldr	r0, [fp, #-480]	; 0xfffffe20
   190d8:	sub	r3, fp, #476	; 0x1dc
   190dc:	cmp	r0, r3
   190e0:	beq	190e8 <close_stdout@@Base+0x490c>
   190e4:	bl	111d0 <free@plt>
   190e8:	ldr	r1, [fp, #-516]	; 0xfffffdfc
   190ec:	mov	r2, #75	; 0x4b
   190f0:	mov	r3, #0
   190f4:	str	r2, [r1]
   190f8:	b	18710 <close_stdout@@Base+0x3f34>
   190fc:	mov	r0, r2
   19100:	bl	111d0 <free@plt>
   19104:	b	186b8 <close_stdout@@Base+0x3edc>
   19108:	mov	r0, sl
   1910c:	bl	111d0 <free@plt>
   19110:	b	190ac <close_stdout@@Base+0x48d0>
   19114:	mov	r0, sl
   19118:	mov	r1, r5
   1911c:	bl	11230 <realloc@plt>
   19120:	cmp	r0, #0
   19124:	movne	sl, r0
   19128:	b	19038 <close_stdout@@Base+0x485c>
   1912c:	mov	r0, sl
   19130:	mov	r1, r4
   19134:	bl	11230 <realloc@plt>
   19138:	mov	r3, r0
   1913c:	b	18ffc <close_stdout@@Base+0x4820>
   19140:	mov	r1, sl
   19144:	mov	r0, r3
   19148:	mov	r2, r9
   1914c:	mov	sl, r3
   19150:	bl	111e8 <memcpy@plt>
   19154:	b	1901c <close_stdout@@Base+0x4840>
   19158:	bl	11224 <__stack_chk_fail@plt>
   1915c:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   19160:	cmp	r9, r2
   19164:	bhi	18698 <close_stdout@@Base+0x3ebc>
   19168:	mvn	r4, #0
   1916c:	b	18740 <close_stdout@@Base+0x3f64>
   19170:			; <UNDEFINED> instruction: 0x00015cb0
   19174:	andeq	r0, r0, r8, lsl r1
   19178:	push	{r4, r5, r6}
   1917c:	ldm	r1, {r3, ip}
   19180:	cmp	r3, #0
   19184:	beq	1922c <close_stdout@@Base+0x4a50>
   19188:	ldr	r6, [pc, #304]	; 192c0 <close_stdout@@Base+0x4ae4>
   1918c:	add	ip, ip, #16
   19190:	ldr	r5, [pc, #300]	; 192c4 <close_stdout@@Base+0x4ae8>
   19194:	mov	r4, #0
   19198:	add	r6, pc, r6
   1919c:	add	r5, pc, r5
   191a0:	ldr	r3, [ip, #-16]
   191a4:	sub	r3, r3, #1
   191a8:	cmp	r3, #21
   191ac:	addls	pc, pc, r3, lsl #2
   191b0:	b	192b8 <close_stdout@@Base+0x4adc>
   191b4:	b	19278 <close_stdout@@Base+0x4a9c>
   191b8:	b	19278 <close_stdout@@Base+0x4a9c>
   191bc:	b	19268 <close_stdout@@Base+0x4a8c>
   191c0:	b	19268 <close_stdout@@Base+0x4a8c>
   191c4:	b	1920c <close_stdout@@Base+0x4a30>
   191c8:	b	1920c <close_stdout@@Base+0x4a30>
   191cc:	b	1920c <close_stdout@@Base+0x4a30>
   191d0:	b	1920c <close_stdout@@Base+0x4a30>
   191d4:	b	19238 <close_stdout@@Base+0x4a5c>
   191d8:	b	19238 <close_stdout@@Base+0x4a5c>
   191dc:	b	19250 <close_stdout@@Base+0x4a74>
   191e0:	b	19250 <close_stdout@@Base+0x4a74>
   191e4:	b	1920c <close_stdout@@Base+0x4a30>
   191e8:	b	1920c <close_stdout@@Base+0x4a30>
   191ec:	b	19288 <close_stdout@@Base+0x4aac>
   191f0:	b	192a0 <close_stdout@@Base+0x4ac4>
   191f4:	b	1920c <close_stdout@@Base+0x4a30>
   191f8:	b	1920c <close_stdout@@Base+0x4a30>
   191fc:	b	1920c <close_stdout@@Base+0x4a30>
   19200:	b	1920c <close_stdout@@Base+0x4a30>
   19204:	b	1920c <close_stdout@@Base+0x4a30>
   19208:	b	1920c <close_stdout@@Base+0x4a30>
   1920c:	ldr	r3, [r0]
   19210:	add	r0, r0, #4
   19214:	str	r3, [ip, #-8]
   19218:	ldr	r3, [r1]
   1921c:	add	r4, r4, #1
   19220:	add	ip, ip, #16
   19224:	cmp	r3, r4
   19228:	bhi	191a0 <close_stdout@@Base+0x49c4>
   1922c:	mov	r0, #0
   19230:	pop	{r4, r5, r6}
   19234:	bx	lr
   19238:	add	r3, r0, #7
   1923c:	bic	r3, r3, #7
   19240:	add	r0, r3, #8
   19244:	ldrd	r2, [r3]
   19248:	strd	r2, [ip, #-8]
   1924c:	b	19218 <close_stdout@@Base+0x4a3c>
   19250:	add	r0, r0, #7
   19254:	bic	r0, r0, #7
   19258:	add	r0, r0, #8
   1925c:	ldrd	r2, [r0, #-8]
   19260:	strd	r2, [ip, #-8]
   19264:	b	19218 <close_stdout@@Base+0x4a3c>
   19268:	ldr	r3, [r0]
   1926c:	add	r0, r0, #4
   19270:	strh	r3, [ip, #-8]
   19274:	b	19218 <close_stdout@@Base+0x4a3c>
   19278:	ldr	r3, [r0]
   1927c:	add	r0, r0, #4
   19280:	strb	r3, [ip, #-8]
   19284:	b	19218 <close_stdout@@Base+0x4a3c>
   19288:	ldr	r3, [r0]
   1928c:	add	r0, r0, #4
   19290:	cmp	r3, #0
   19294:	str	r3, [ip, #-8]
   19298:	streq	r5, [ip, #-8]
   1929c:	b	19218 <close_stdout@@Base+0x4a3c>
   192a0:	ldr	r3, [r0]
   192a4:	add	r0, r0, #4
   192a8:	cmp	r3, #0
   192ac:	str	r3, [ip, #-8]
   192b0:	streq	r6, [ip, #-8]
   192b4:	b	19218 <close_stdout@@Base+0x4a3c>
   192b8:	mvn	r0, #0
   192bc:	b	19230 <close_stdout@@Base+0x4a54>
   192c0:	strdeq	r3, [r0], -r4
   192c4:	andeq	r3, r0, ip, lsl #30
   192c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192cc:	mov	r7, r1
   192d0:	sub	sp, sp, #44	; 0x2c
   192d4:	mov	r5, r2
   192d8:	movw	sl, #39321	; 0x9999
   192dc:	mov	r2, r7
   192e0:	movt	sl, #6553	; 0x1999
   192e4:	mov	r3, #0
   192e8:	str	r3, [r2], #16
   192ec:	mov	r1, #7
   192f0:	str	r2, [r7, #4]
   192f4:	mov	r9, r0
   192f8:	str	r2, [sp, #16]
   192fc:	mov	r2, r5
   19300:	str	r3, [r2], #8
   19304:	mov	r6, r3
   19308:	str	r2, [r5, #4]
   1930c:	movw	r0, #29789	; 0x745d
   19310:	str	r3, [sp, #8]
   19314:	movt	r0, #1489	; 0x5d1
   19318:	str	r1, [sp, #20]
   1931c:	mov	ip, sl
   19320:	str	r3, [sp, #24]
   19324:	str	r3, [sp, #36]	; 0x24
   19328:	mov	r3, #7
   1932c:	str	r2, [sp, #12]
   19330:	str	r3, [sp, #28]
   19334:	ldr	r1, [r7]
   19338:	ldr	r3, [r7, #4]
   1933c:	str	r0, [sp, #32]
   19340:	b	1934c <close_stdout@@Base+0x4b70>
   19344:	cmp	r0, #37	; 0x25
   19348:	beq	1938c <close_stdout@@Base+0x4bb0>
   1934c:	mov	r8, r9
   19350:	ldrb	r0, [r9], #1
   19354:	cmp	r0, #0
   19358:	mov	r2, r9
   1935c:	bne	19344 <close_stdout@@Base+0x4b68>
   19360:	mov	r4, #44	; 0x2c
   19364:	mov	r2, r0
   19368:	mul	r1, r4, r1
   1936c:	str	r8, [r3, r1]
   19370:	ldr	r3, [sp, #24]
   19374:	str	r3, [r7, #8]
   19378:	ldr	r3, [sp, #8]
   1937c:	str	r3, [r7, #12]
   19380:	mov	r0, r2
   19384:	add	sp, sp, #44	; 0x2c
   19388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1938c:	mov	r0, #44	; 0x2c
   19390:	mul	r1, r0, r1
   19394:	add	r4, r3, r1
   19398:	str	r8, [r3, r1]
   1939c:	mvn	r1, #0
   193a0:	str	r6, [r4, #8]
   193a4:	str	r1, [r4, #20]
   193a8:	str	r1, [r4, #32]
   193ac:	str	r1, [r4, #40]	; 0x28
   193b0:	str	r6, [r4, #12]
   193b4:	str	r6, [r4, #16]
   193b8:	str	r6, [r4, #24]
   193bc:	str	r6, [r4, #28]
   193c0:	ldrb	r3, [r8, #1]
   193c4:	sub	sl, r3, #48	; 0x30
   193c8:	uxtb	r1, sl
   193cc:	cmp	r1, #9
   193d0:	bls	19764 <close_stdout@@Base+0x4f88>
   193d4:	mvn	r8, #0
   193d8:	b	1941c <close_stdout@@Base+0x4c40>
   193dc:	cmp	r3, #45	; 0x2d
   193e0:	beq	19438 <close_stdout@@Base+0x4c5c>
   193e4:	cmp	r3, #43	; 0x2b
   193e8:	beq	19448 <close_stdout@@Base+0x4c6c>
   193ec:	cmp	r3, #32
   193f0:	beq	19458 <close_stdout@@Base+0x4c7c>
   193f4:	cmp	r3, #35	; 0x23
   193f8:	beq	19468 <close_stdout@@Base+0x4c8c>
   193fc:	cmp	r3, #48	; 0x30
   19400:	beq	19478 <close_stdout@@Base+0x4c9c>
   19404:	cmp	r3, #73	; 0x49
   19408:	bne	19488 <close_stdout@@Base+0x4cac>
   1940c:	ldr	r3, [r4, #8]
   19410:	orr	r3, r3, #64	; 0x40
   19414:	str	r3, [r4, #8]
   19418:	ldrb	r3, [r2, #1]!
   1941c:	cmp	r3, #39	; 0x27
   19420:	mov	r9, r2
   19424:	bne	193dc <close_stdout@@Base+0x4c00>
   19428:	ldr	r3, [r4, #8]
   1942c:	orr	r3, r3, #1
   19430:	str	r3, [r4, #8]
   19434:	b	19418 <close_stdout@@Base+0x4c3c>
   19438:	ldr	r3, [r4, #8]
   1943c:	orr	r3, r3, #2
   19440:	str	r3, [r4, #8]
   19444:	b	19418 <close_stdout@@Base+0x4c3c>
   19448:	ldr	r3, [r4, #8]
   1944c:	orr	r3, r3, #4
   19450:	str	r3, [r4, #8]
   19454:	b	19418 <close_stdout@@Base+0x4c3c>
   19458:	ldr	r3, [r4, #8]
   1945c:	orr	r3, r3, #8
   19460:	str	r3, [r4, #8]
   19464:	b	19418 <close_stdout@@Base+0x4c3c>
   19468:	ldr	r3, [r4, #8]
   1946c:	orr	r3, r3, #16
   19470:	str	r3, [r4, #8]
   19474:	b	19418 <close_stdout@@Base+0x4c3c>
   19478:	ldr	r3, [r4, #8]
   1947c:	orr	r3, r3, #32
   19480:	str	r3, [r4, #8]
   19484:	b	19418 <close_stdout@@Base+0x4c3c>
   19488:	cmp	r3, #42	; 0x2a
   1948c:	beq	19900 <close_stdout@@Base+0x5124>
   19490:	sub	r1, r3, #48	; 0x30
   19494:	uxtb	r1, r1
   19498:	cmp	r1, #9
   1949c:	bls	197dc <close_stdout@@Base+0x5000>
   194a0:	cmp	r3, #46	; 0x2e
   194a4:	beq	19830 <close_stdout@@Base+0x5054>
   194a8:	mov	sl, #0
   194ac:	mov	r0, #1
   194b0:	b	194bc <close_stdout@@Base+0x4ce0>
   194b4:	ldrb	r3, [r2, #1]
   194b8:	add	r9, r9, #1
   194bc:	cmp	r3, #104	; 0x68
   194c0:	mov	r2, r9
   194c4:	andeq	r3, sl, #1
   194c8:	orreq	sl, sl, r0, lsl r3
   194cc:	beq	194b4 <close_stdout@@Base+0x4cd8>
   194d0:	cmp	r3, #76	; 0x4c
   194d4:	orreq	sl, sl, #4
   194d8:	beq	194b4 <close_stdout@@Base+0x4cd8>
   194dc:	cmp	r3, #108	; 0x6c
   194e0:	addeq	sl, sl, #8
   194e4:	beq	194b4 <close_stdout@@Base+0x4cd8>
   194e8:	cmp	r3, #106	; 0x6a
   194ec:	addeq	sl, sl, #16
   194f0:	beq	194b4 <close_stdout@@Base+0x4cd8>
   194f4:	and	r1, r3, #223	; 0xdf
   194f8:	cmp	r1, #90	; 0x5a
   194fc:	beq	194b4 <close_stdout@@Base+0x4cd8>
   19500:	cmp	r3, #116	; 0x74
   19504:	beq	194b4 <close_stdout@@Base+0x4cd8>
   19508:	sub	r2, r3, #37	; 0x25
   1950c:	add	r9, r9, #1
   19510:	mov	fp, r3
   19514:	cmp	r2, #83	; 0x53
   19518:	addls	pc, pc, r2, lsl #2
   1951c:	b	19c40 <close_stdout@@Base+0x5464>
   19520:	b	196d0 <close_stdout@@Base+0x4ef4>
   19524:	b	19c40 <close_stdout@@Base+0x5464>
   19528:	b	19c40 <close_stdout@@Base+0x5464>
   1952c:	b	19c40 <close_stdout@@Base+0x5464>
   19530:	b	19c40 <close_stdout@@Base+0x5464>
   19534:	b	19c40 <close_stdout@@Base+0x5464>
   19538:	b	19c40 <close_stdout@@Base+0x5464>
   1953c:	b	19c40 <close_stdout@@Base+0x5464>
   19540:	b	19c40 <close_stdout@@Base+0x5464>
   19544:	b	19c40 <close_stdout@@Base+0x5464>
   19548:	b	19c40 <close_stdout@@Base+0x5464>
   1954c:	b	19c40 <close_stdout@@Base+0x5464>
   19550:	b	19c40 <close_stdout@@Base+0x5464>
   19554:	b	19c40 <close_stdout@@Base+0x5464>
   19558:	b	19c40 <close_stdout@@Base+0x5464>
   1955c:	b	19c40 <close_stdout@@Base+0x5464>
   19560:	b	19c40 <close_stdout@@Base+0x5464>
   19564:	b	19c40 <close_stdout@@Base+0x5464>
   19568:	b	19c40 <close_stdout@@Base+0x5464>
   1956c:	b	19c40 <close_stdout@@Base+0x5464>
   19570:	b	19c40 <close_stdout@@Base+0x5464>
   19574:	b	19c40 <close_stdout@@Base+0x5464>
   19578:	b	19c40 <close_stdout@@Base+0x5464>
   1957c:	b	19c40 <close_stdout@@Base+0x5464>
   19580:	b	19c40 <close_stdout@@Base+0x5464>
   19584:	b	19c40 <close_stdout@@Base+0x5464>
   19588:	b	19c40 <close_stdout@@Base+0x5464>
   1958c:	b	19c40 <close_stdout@@Base+0x5464>
   19590:	b	19a1c <close_stdout@@Base+0x5240>
   19594:	b	19c40 <close_stdout@@Base+0x5464>
   19598:	b	19a40 <close_stdout@@Base+0x5264>
   1959c:	b	19c40 <close_stdout@@Base+0x5464>
   195a0:	b	19a1c <close_stdout@@Base+0x5240>
   195a4:	b	19a1c <close_stdout@@Base+0x5240>
   195a8:	b	19a1c <close_stdout@@Base+0x5240>
   195ac:	b	19c40 <close_stdout@@Base+0x5464>
   195b0:	b	19c40 <close_stdout@@Base+0x5464>
   195b4:	b	19c40 <close_stdout@@Base+0x5464>
   195b8:	b	19c40 <close_stdout@@Base+0x5464>
   195bc:	b	19c40 <close_stdout@@Base+0x5464>
   195c0:	b	19c40 <close_stdout@@Base+0x5464>
   195c4:	b	19c40 <close_stdout@@Base+0x5464>
   195c8:	b	19c40 <close_stdout@@Base+0x5464>
   195cc:	b	19c40 <close_stdout@@Base+0x5464>
   195d0:	b	19c40 <close_stdout@@Base+0x5464>
   195d4:	b	19c40 <close_stdout@@Base+0x5464>
   195d8:	b	19a4c <close_stdout@@Base+0x5270>
   195dc:	b	19c40 <close_stdout@@Base+0x5464>
   195e0:	b	19c40 <close_stdout@@Base+0x5464>
   195e4:	b	19c40 <close_stdout@@Base+0x5464>
   195e8:	b	19c40 <close_stdout@@Base+0x5464>
   195ec:	b	19a58 <close_stdout@@Base+0x527c>
   195f0:	b	19c40 <close_stdout@@Base+0x5464>
   195f4:	b	19c40 <close_stdout@@Base+0x5464>
   195f8:	b	19c40 <close_stdout@@Base+0x5464>
   195fc:	b	19c40 <close_stdout@@Base+0x5464>
   19600:	b	19c40 <close_stdout@@Base+0x5464>
   19604:	b	19c40 <close_stdout@@Base+0x5464>
   19608:	b	19c40 <close_stdout@@Base+0x5464>
   1960c:	b	19c40 <close_stdout@@Base+0x5464>
   19610:	b	19a1c <close_stdout@@Base+0x5240>
   19614:	b	19c40 <close_stdout@@Base+0x5464>
   19618:	b	19ae0 <close_stdout@@Base+0x5304>
   1961c:	b	19a9c <close_stdout@@Base+0x52c0>
   19620:	b	19a1c <close_stdout@@Base+0x5240>
   19624:	b	19a1c <close_stdout@@Base+0x5240>
   19628:	b	19a1c <close_stdout@@Base+0x5240>
   1962c:	b	19c40 <close_stdout@@Base+0x5464>
   19630:	b	19a9c <close_stdout@@Base+0x52c0>
   19634:	b	19c40 <close_stdout@@Base+0x5464>
   19638:	b	19c40 <close_stdout@@Base+0x5464>
   1963c:	b	19c40 <close_stdout@@Base+0x5464>
   19640:	b	19c40 <close_stdout@@Base+0x5464>
   19644:	b	19af0 <close_stdout@@Base+0x5314>
   19648:	b	19a58 <close_stdout@@Base+0x527c>
   1964c:	b	19670 <close_stdout@@Base+0x4e94>
   19650:	b	19c40 <close_stdout@@Base+0x5464>
   19654:	b	19c40 <close_stdout@@Base+0x5464>
   19658:	b	19a0c <close_stdout@@Base+0x5230>
   1965c:	b	19c40 <close_stdout@@Base+0x5464>
   19660:	b	19a58 <close_stdout@@Base+0x527c>
   19664:	b	19c40 <close_stdout@@Base+0x5464>
   19668:	b	19c40 <close_stdout@@Base+0x5464>
   1966c:	b	19a58 <close_stdout@@Base+0x527c>
   19670:	mov	sl, #17
   19674:	cmn	r8, #1
   19678:	strne	r8, [r4, #40]	; 0x28
   1967c:	beq	19d9c <close_stdout@@Base+0x55c0>
   19680:	ldr	r3, [sp, #20]
   19684:	cmp	r3, r8
   19688:	bls	19cc8 <close_stdout@@Base+0x54ec>
   1968c:	ldr	r0, [r5, #4]
   19690:	ldr	r3, [r5]
   19694:	cmp	r3, r8
   19698:	bhi	196b8 <close_stdout@@Base+0x4edc>
   1969c:	add	r2, r3, #1
   196a0:	str	r2, [r5]
   196a4:	str	r6, [r0, r3, lsl #4]
   196a8:	ldr	r3, [r5]
   196ac:	ldr	r0, [r5, #4]
   196b0:	cmp	r3, r8
   196b4:	bls	1969c <close_stdout@@Base+0x4ec0>
   196b8:	ldr	r3, [r0, r8, lsl #4]
   196bc:	cmp	r3, #0
   196c0:	streq	sl, [r0, r8, lsl #4]
   196c4:	beq	196d0 <close_stdout@@Base+0x4ef4>
   196c8:	cmp	sl, r3
   196cc:	bne	19c44 <close_stdout@@Base+0x5468>
   196d0:	strb	fp, [r4, #36]	; 0x24
   196d4:	str	r9, [r4, #4]
   196d8:	ldr	r1, [r7]
   196dc:	ldr	r3, [sp, #28]
   196e0:	add	r1, r1, #1
   196e4:	str	r1, [r7]
   196e8:	cmp	r3, r1
   196ec:	bhi	197d4 <close_stdout@@Base+0x4ff8>
   196f0:	ldr	r3, [sp, #28]
   196f4:	cmp	r3, #0
   196f8:	blt	198c0 <close_stdout@@Base+0x50e4>
   196fc:	ldr	r3, [sp, #28]
   19700:	ldr	r0, [sp, #32]
   19704:	lsl	r3, r3, #1
   19708:	str	r3, [sp, #28]
   1970c:	cmp	r3, r0
   19710:	bhi	198c0 <close_stdout@@Base+0x50e4>
   19714:	mov	r2, #44	; 0x2c
   19718:	ldr	r0, [r7, #4]
   1971c:	mul	r1, r2, r3
   19720:	ldr	r3, [sp, #16]
   19724:	cmp	r3, r0
   19728:	beq	19dbc <close_stdout@@Base+0x55e0>
   1972c:	str	ip, [sp, #4]
   19730:	bl	11230 <realloc@plt>
   19734:	ldr	ip, [sp, #4]
   19738:	mov	r4, r0
   1973c:	cmp	r4, #0
   19740:	beq	198c0 <close_stdout@@Base+0x50e4>
   19744:	ldr	r3, [r7, #4]
   19748:	ldr	r0, [sp, #16]
   1974c:	cmp	r0, r3
   19750:	beq	19e78 <close_stdout@@Base+0x569c>
   19754:	ldr	r1, [r7]
   19758:	mov	r3, r4
   1975c:	str	r4, [r7, #4]
   19760:	b	1934c <close_stdout@@Base+0x4b70>
   19764:	mov	r0, r9
   19768:	ldrb	r1, [r0, #1]!
   1976c:	sub	r8, r1, #48	; 0x30
   19770:	cmp	r8, #9
   19774:	bls	19768 <close_stdout@@Base+0x4f8c>
   19778:	cmp	r1, #36	; 0x24
   1977c:	bne	193d4 <close_stdout@@Base+0x4bf8>
   19780:	mov	r8, #0
   19784:	b	1978c <close_stdout@@Base+0x4fb0>
   19788:	mov	r9, r2
   1978c:	add	r3, r8, r8, lsl #2
   19790:	cmp	r8, ip
   19794:	mvn	r8, #0
   19798:	add	r2, r9, #1
   1979c:	lslls	r8, r3, #1
   197a0:	adds	r8, r8, sl
   197a4:	ldrb	sl, [r9, #1]
   197a8:	sub	sl, sl, #48	; 0x30
   197ac:	mvncs	r8, #0
   197b0:	uxtb	r3, sl
   197b4:	cmp	r3, #9
   197b8:	bls	19788 <close_stdout@@Base+0x4fac>
   197bc:	sub	r8, r8, #1
   197c0:	cmn	r8, #3
   197c4:	bhi	19c40 <close_stdout@@Base+0x5464>
   197c8:	add	r2, r2, #1
   197cc:	ldrb	r3, [r9, #2]
   197d0:	b	1941c <close_stdout@@Base+0x4c40>
   197d4:	ldr	r3, [r7, #4]
   197d8:	b	1934c <close_stdout@@Base+0x4b70>
   197dc:	str	r2, [r4, #12]
   197e0:	ldrb	r3, [r2]
   197e4:	sub	r3, r3, #48	; 0x30
   197e8:	cmp	r3, #9
   197ec:	bhi	19e70 <close_stdout@@Base+0x5694>
   197f0:	add	r3, r2, #1
   197f4:	mov	r9, r3
   197f8:	add	r3, r3, #1
   197fc:	ldrb	r1, [r9]
   19800:	sub	r1, r1, #48	; 0x30
   19804:	cmp	r1, #9
   19808:	bls	197f4 <close_stdout@@Base+0x5018>
   1980c:	rsb	r2, r2, r9
   19810:	ldr	r3, [sp, #24]
   19814:	str	r9, [r4, #16]
   19818:	cmp	r3, r2
   1981c:	movcc	r3, r2
   19820:	str	r3, [sp, #24]
   19824:	ldrb	r3, [r9]
   19828:	cmp	r3, #46	; 0x2e
   1982c:	bne	194a8 <close_stdout@@Base+0x4ccc>
   19830:	ldrb	r3, [r9, #1]
   19834:	str	r9, [r4, #24]
   19838:	cmp	r3, #42	; 0x2a
   1983c:	beq	19b28 <close_stdout@@Base+0x534c>
   19840:	ldrb	r3, [r9, #1]
   19844:	add	r2, r9, #1
   19848:	sub	r3, r3, #48	; 0x30
   1984c:	cmp	r3, #9
   19850:	bhi	19870 <close_stdout@@Base+0x5094>
   19854:	add	r3, r9, #2
   19858:	mov	r2, r3
   1985c:	add	r3, r3, #1
   19860:	ldrb	r1, [r2]
   19864:	sub	r1, r1, #48	; 0x30
   19868:	cmp	r1, #9
   1986c:	bls	19858 <close_stdout@@Base+0x507c>
   19870:	ldr	r0, [sp, #8]
   19874:	rsb	r9, r9, r2
   19878:	str	r2, [r4, #28]
   1987c:	cmp	r0, r9
   19880:	movcc	r0, r9
   19884:	ldrb	r3, [r2]
   19888:	str	r0, [sp, #8]
   1988c:	mov	r9, r2
   19890:	b	194a8 <close_stdout@@Base+0x4ccc>
   19894:	ldr	r3, [sp, #20]
   19898:	cmp	r3, #0
   1989c:	lslge	r3, r3, #1
   198a0:	mvnlt	r3, #0
   198a4:	str	r3, [sp, #20]
   198a8:	ldr	r3, [sp, #20]
   198ac:	cmp	r3, sl
   198b0:	bhi	19d4c <close_stdout@@Base+0x5570>
   198b4:	adds	r3, sl, #1
   198b8:	str	r3, [sp, #20]
   198bc:	bcc	19d4c <close_stdout@@Base+0x5570>
   198c0:	ldr	r2, [r5, #4]
   198c4:	ldr	r3, [sp, #12]
   198c8:	cmp	r3, r2
   198cc:	beq	198d8 <close_stdout@@Base+0x50fc>
   198d0:	mov	r0, r2
   198d4:	bl	111d0 <free@plt>
   198d8:	ldr	r0, [r7, #4]
   198dc:	ldr	r3, [sp, #16]
   198e0:	cmp	r3, r0
   198e4:	beq	198ec <close_stdout@@Base+0x5110>
   198e8:	bl	111d0 <free@plt>
   198ec:	bl	1135c <__errno_location@plt>
   198f0:	mov	r3, #12
   198f4:	mvn	r2, #0
   198f8:	str	r3, [r0]
   198fc:	b	19380 <close_stdout@@Base+0x4ba4>
   19900:	ldr	r3, [sp, #24]
   19904:	add	r9, r2, #1
   19908:	str	r2, [r4, #12]
   1990c:	str	r9, [r4, #16]
   19910:	cmp	r3, #0
   19914:	ldrb	sl, [r2, #1]
   19918:	moveq	r3, #1
   1991c:	str	r3, [sp, #24]
   19920:	sub	sl, sl, #48	; 0x30
   19924:	uxtb	r3, sl
   19928:	cmp	r3, #9
   1992c:	bls	199a0 <close_stdout@@Base+0x51c4>
   19930:	ldr	r3, [sp, #36]	; 0x24
   19934:	cmn	r3, #1
   19938:	str	r3, [r4, #20]
   1993c:	add	r3, r3, #1
   19940:	beq	19c40 <close_stdout@@Base+0x5464>
   19944:	ldr	sl, [sp, #36]	; 0x24
   19948:	str	r3, [sp, #36]	; 0x24
   1994c:	ldr	r3, [sp, #20]
   19950:	cmp	r3, sl
   19954:	bls	19894 <close_stdout@@Base+0x50b8>
   19958:	ldr	r0, [r5, #4]
   1995c:	ldr	r3, [r5]
   19960:	cmp	r3, sl
   19964:	bhi	19984 <close_stdout@@Base+0x51a8>
   19968:	add	r2, r3, #1
   1996c:	str	r2, [r5]
   19970:	str	r6, [r0, r3, lsl #4]
   19974:	ldr	r3, [r5]
   19978:	ldr	r0, [r5, #4]
   1997c:	cmp	r3, sl
   19980:	bls	19968 <close_stdout@@Base+0x518c>
   19984:	ldr	r3, [r0, sl, lsl #4]
   19988:	cmp	r3, #0
   1998c:	bne	19d40 <close_stdout@@Base+0x5564>
   19990:	mov	r1, #5
   19994:	str	r1, [r0, sl, lsl #4]
   19998:	ldrb	r3, [r9]
   1999c:	b	194a0 <close_stdout@@Base+0x4cc4>
   199a0:	mov	r1, r9
   199a4:	ldrb	r3, [r1, #1]!
   199a8:	sub	r0, r3, #48	; 0x30
   199ac:	cmp	r0, #9
   199b0:	bls	199a4 <close_stdout@@Base+0x51c8>
   199b4:	cmp	r3, #36	; 0x24
   199b8:	bne	19930 <close_stdout@@Base+0x5154>
   199bc:	add	r2, r2, #2
   199c0:	mov	r3, #0
   199c4:	add	r1, r3, r3, lsl #2
   199c8:	cmp	r3, ip
   199cc:	mvn	r3, #0
   199d0:	lslls	r3, r1, #1
   199d4:	adds	r3, r3, sl
   199d8:	ldrb	sl, [r2], #1
   199dc:	sub	sl, sl, #48	; 0x30
   199e0:	mvncs	r3, #0
   199e4:	uxtb	r1, sl
   199e8:	cmp	r1, #9
   199ec:	bls	199c4 <close_stdout@@Base+0x51e8>
   199f0:	sub	r3, r3, #1
   199f4:	cmn	r3, #3
   199f8:	bhi	19c40 <close_stdout@@Base+0x5464>
   199fc:	str	r3, [r4, #20]
   19a00:	mov	r9, r2
   19a04:	mov	sl, r3
   19a08:	b	1994c <close_stdout@@Base+0x5170>
   19a0c:	cmp	sl, #7
   19a10:	movle	sl, #15
   19a14:	movgt	sl, #16
   19a18:	b	19674 <close_stdout@@Base+0x4e98>
   19a1c:	cmp	sl, #15
   19a20:	movgt	fp, r3
   19a24:	movgt	sl, #12
   19a28:	bgt	19674 <close_stdout@@Base+0x4e98>
   19a2c:	tst	sl, #4
   19a30:	mov	fp, r3
   19a34:	moveq	sl, #11
   19a38:	movne	sl, #12
   19a3c:	b	19674 <close_stdout@@Base+0x4e98>
   19a40:	mov	sl, #14
   19a44:	mov	fp, #99	; 0x63
   19a48:	b	19674 <close_stdout@@Base+0x4e98>
   19a4c:	mov	sl, #16
   19a50:	mov	fp, #115	; 0x73
   19a54:	b	19674 <close_stdout@@Base+0x4e98>
   19a58:	cmp	sl, #15
   19a5c:	bgt	19c7c <close_stdout@@Base+0x54a0>
   19a60:	tst	sl, #4
   19a64:	bne	19c7c <close_stdout@@Base+0x54a0>
   19a68:	cmp	sl, #7
   19a6c:	movgt	fp, r3
   19a70:	movgt	sl, #8
   19a74:	bgt	19674 <close_stdout@@Base+0x4e98>
   19a78:	tst	sl, #2
   19a7c:	movne	fp, r3
   19a80:	movne	sl, #2
   19a84:	bne	19674 <close_stdout@@Base+0x4e98>
   19a88:	tst	sl, #1
   19a8c:	mov	fp, r3
   19a90:	moveq	sl, #6
   19a94:	movne	sl, #4
   19a98:	b	19674 <close_stdout@@Base+0x4e98>
   19a9c:	cmp	sl, #15
   19aa0:	bgt	19c88 <close_stdout@@Base+0x54ac>
   19aa4:	tst	sl, #4
   19aa8:	bne	19c88 <close_stdout@@Base+0x54ac>
   19aac:	cmp	sl, #7
   19ab0:	movgt	fp, r3
   19ab4:	movgt	sl, #7
   19ab8:	bgt	19674 <close_stdout@@Base+0x4e98>
   19abc:	tst	sl, #2
   19ac0:	movne	fp, r3
   19ac4:	movne	sl, #1
   19ac8:	bne	19674 <close_stdout@@Base+0x4e98>
   19acc:	tst	sl, #1
   19ad0:	mov	fp, r3
   19ad4:	moveq	sl, #5
   19ad8:	movne	sl, #3
   19adc:	b	19674 <close_stdout@@Base+0x4e98>
   19ae0:	cmp	sl, #7
   19ae4:	movle	sl, #13
   19ae8:	movgt	sl, #14
   19aec:	b	19674 <close_stdout@@Base+0x4e98>
   19af0:	cmp	sl, #15
   19af4:	bgt	19c94 <close_stdout@@Base+0x54b8>
   19af8:	tst	sl, #4
   19afc:	bne	19c94 <close_stdout@@Base+0x54b8>
   19b00:	cmp	sl, #7
   19b04:	movgt	sl, #21
   19b08:	bgt	19674 <close_stdout@@Base+0x4e98>
   19b0c:	tst	sl, #2
   19b10:	movne	sl, #18
   19b14:	bne	19674 <close_stdout@@Base+0x4e98>
   19b18:	tst	sl, #1
   19b1c:	moveq	sl, #20
   19b20:	movne	sl, #19
   19b24:	b	19674 <close_stdout@@Base+0x4e98>
   19b28:	ldr	r3, [sp, #8]
   19b2c:	add	sl, r9, #2
   19b30:	str	sl, [r4, #28]
   19b34:	ldrb	r0, [r9, #2]
   19b38:	cmp	r3, #1
   19b3c:	sub	r0, r0, #48	; 0x30
   19b40:	movls	r3, #2
   19b44:	str	r3, [sp, #8]
   19b48:	uxtb	r3, r0
   19b4c:	cmp	r3, #9
   19b50:	bhi	19c9c <close_stdout@@Base+0x54c0>
   19b54:	mov	r2, sl
   19b58:	ldrb	r3, [r2, #1]!
   19b5c:	sub	r1, r3, #48	; 0x30
   19b60:	cmp	r1, #9
   19b64:	bls	19b58 <close_stdout@@Base+0x537c>
   19b68:	cmp	r3, #36	; 0x24
   19b6c:	bne	19c9c <close_stdout@@Base+0x54c0>
   19b70:	add	r9, r9, #3
   19b74:	mov	r3, #0
   19b78:	add	r2, r3, r3, lsl #2
   19b7c:	cmp	r3, ip
   19b80:	mvn	r3, #0
   19b84:	lslls	r3, r2, #1
   19b88:	adds	r3, r3, r0
   19b8c:	ldrb	r0, [r9], #1
   19b90:	sub	r0, r0, #48	; 0x30
   19b94:	mvncs	r3, #0
   19b98:	uxtb	r2, r0
   19b9c:	cmp	r2, #9
   19ba0:	bls	19b78 <close_stdout@@Base+0x539c>
   19ba4:	sub	r3, r3, #1
   19ba8:	cmn	r3, #3
   19bac:	bhi	19c40 <close_stdout@@Base+0x5464>
   19bb0:	mov	sl, r9
   19bb4:	mov	r9, r3
   19bb8:	str	r3, [r4, #32]
   19bbc:	ldr	r3, [sp, #20]
   19bc0:	cmp	r3, r9
   19bc4:	bhi	19dd4 <close_stdout@@Base+0x55f8>
   19bc8:	ldr	r3, [sp, #20]
   19bcc:	cmp	r3, #0
   19bd0:	blt	198c0 <close_stdout@@Base+0x50e4>
   19bd4:	lsl	r3, r3, #1
   19bd8:	str	r3, [sp, #20]
   19bdc:	cmp	r3, r9
   19be0:	bhi	19bf0 <close_stdout@@Base+0x5414>
   19be4:	adds	r3, r9, #1
   19be8:	str	r3, [sp, #20]
   19bec:	bcs	198c0 <close_stdout@@Base+0x50e4>
   19bf0:	ldr	r3, [sp, #20]
   19bf4:	cmn	r3, #-268435455	; 0xf0000001
   19bf8:	bhi	198c0 <close_stdout@@Base+0x50e4>
   19bfc:	ldr	r0, [r5, #4]
   19c00:	lsl	r1, r3, #4
   19c04:	ldr	r3, [sp, #12]
   19c08:	cmp	r3, r0
   19c0c:	beq	19ed8 <close_stdout@@Base+0x56fc>
   19c10:	str	ip, [sp, #4]
   19c14:	bl	11230 <realloc@plt>
   19c18:	ldr	r2, [r5, #4]
   19c1c:	ldr	ip, [sp, #4]
   19c20:	subs	r3, r0, #0
   19c24:	beq	198c4 <close_stdout@@Base+0x50e8>
   19c28:	ldr	r0, [sp, #12]
   19c2c:	cmp	r0, r2
   19c30:	beq	19ef0 <close_stdout@@Base+0x5714>
   19c34:	mov	r0, r3
   19c38:	str	r3, [r5, #4]
   19c3c:	b	19dd8 <close_stdout@@Base+0x55fc>
   19c40:	ldr	r0, [r5, #4]
   19c44:	ldr	r3, [sp, #12]
   19c48:	cmp	r3, r0
   19c4c:	beq	19c54 <close_stdout@@Base+0x5478>
   19c50:	bl	111d0 <free@plt>
   19c54:	ldr	r0, [r7, #4]
   19c58:	ldr	r3, [sp, #16]
   19c5c:	cmp	r3, r0
   19c60:	beq	19c68 <close_stdout@@Base+0x548c>
   19c64:	bl	111d0 <free@plt>
   19c68:	bl	1135c <__errno_location@plt>
   19c6c:	mov	r3, #22
   19c70:	mvn	r2, #0
   19c74:	str	r3, [r0]
   19c78:	b	19380 <close_stdout@@Base+0x4ba4>
   19c7c:	mov	fp, r3
   19c80:	mov	sl, #10
   19c84:	b	19674 <close_stdout@@Base+0x4e98>
   19c88:	mov	fp, r3
   19c8c:	mov	sl, #9
   19c90:	b	19674 <close_stdout@@Base+0x4e98>
   19c94:	mov	sl, #22
   19c98:	b	19674 <close_stdout@@Base+0x4e98>
   19c9c:	ldr	r9, [r4, #32]
   19ca0:	cmn	r9, #1
   19ca4:	bne	19bbc <close_stdout@@Base+0x53e0>
   19ca8:	ldr	r3, [sp, #36]	; 0x24
   19cac:	cmn	r3, #1
   19cb0:	str	r3, [r4, #32]
   19cb4:	add	r3, r3, #1
   19cb8:	beq	19c40 <close_stdout@@Base+0x5464>
   19cbc:	ldr	r9, [sp, #36]	; 0x24
   19cc0:	str	r3, [sp, #36]	; 0x24
   19cc4:	b	19bbc <close_stdout@@Base+0x53e0>
   19cc8:	ldr	r3, [sp, #20]
   19ccc:	cmp	r3, #0
   19cd0:	blt	198c0 <close_stdout@@Base+0x50e4>
   19cd4:	lsl	r3, r3, #1
   19cd8:	str	r3, [sp, #20]
   19cdc:	cmp	r3, r8
   19ce0:	bhi	19cf0 <close_stdout@@Base+0x5514>
   19ce4:	adds	r3, r8, #1
   19ce8:	str	r3, [sp, #20]
   19cec:	bcs	198c0 <close_stdout@@Base+0x50e4>
   19cf0:	ldr	r3, [sp, #20]
   19cf4:	cmn	r3, #-268435455	; 0xf0000001
   19cf8:	bhi	198c0 <close_stdout@@Base+0x50e4>
   19cfc:	ldr	r0, [r5, #4]
   19d00:	lsl	r1, r3, #4
   19d04:	ldr	r3, [sp, #12]
   19d08:	cmp	r3, r0
   19d0c:	beq	19e34 <close_stdout@@Base+0x5658>
   19d10:	str	ip, [sp, #4]
   19d14:	bl	11230 <realloc@plt>
   19d18:	ldr	r2, [r5, #4]
   19d1c:	ldr	ip, [sp, #4]
   19d20:	subs	r3, r0, #0
   19d24:	beq	198c4 <close_stdout@@Base+0x50e8>
   19d28:	ldr	r0, [sp, #12]
   19d2c:	cmp	r0, r2
   19d30:	beq	19e4c <close_stdout@@Base+0x5670>
   19d34:	mov	r0, r3
   19d38:	str	r3, [r5, #4]
   19d3c:	b	19690 <close_stdout@@Base+0x4eb4>
   19d40:	cmp	r3, #5
   19d44:	beq	19824 <close_stdout@@Base+0x5048>
   19d48:	b	19c44 <close_stdout@@Base+0x5468>
   19d4c:	ldr	r3, [sp, #20]
   19d50:	cmn	r3, #-268435455	; 0xf0000001
   19d54:	bhi	198c0 <close_stdout@@Base+0x50e4>
   19d58:	ldr	r0, [r5, #4]
   19d5c:	lsl	r1, r3, #4
   19d60:	ldr	r3, [sp, #12]
   19d64:	cmp	r3, r0
   19d68:	beq	19e9c <close_stdout@@Base+0x56c0>
   19d6c:	str	ip, [sp, #4]
   19d70:	bl	11230 <realloc@plt>
   19d74:	ldr	r2, [r5, #4]
   19d78:	ldr	ip, [sp, #4]
   19d7c:	subs	r3, r0, #0
   19d80:	beq	198c4 <close_stdout@@Base+0x50e8>
   19d84:	ldr	r0, [sp, #12]
   19d88:	cmp	r0, r2
   19d8c:	beq	19eb4 <close_stdout@@Base+0x56d8>
   19d90:	mov	r0, r3
   19d94:	str	r3, [r5, #4]
   19d98:	b	1995c <close_stdout@@Base+0x5180>
   19d9c:	ldr	r3, [sp, #36]	; 0x24
   19da0:	cmn	r3, #1
   19da4:	str	r3, [r4, #40]	; 0x28
   19da8:	add	r3, r3, #1
   19dac:	beq	19c40 <close_stdout@@Base+0x5464>
   19db0:	ldr	r8, [sp, #36]	; 0x24
   19db4:	str	r3, [sp, #36]	; 0x24
   19db8:	b	19680 <close_stdout@@Base+0x4ea4>
   19dbc:	mov	r0, r1
   19dc0:	str	ip, [sp, #4]
   19dc4:	bl	112d8 <malloc@plt>
   19dc8:	ldr	ip, [sp, #4]
   19dcc:	mov	r4, r0
   19dd0:	b	1973c <close_stdout@@Base+0x4f60>
   19dd4:	ldr	r0, [r5, #4]
   19dd8:	ldr	r3, [r5]
   19ddc:	cmp	r3, r9
   19de0:	bhi	19e00 <close_stdout@@Base+0x5624>
   19de4:	add	r2, r3, #1
   19de8:	str	r2, [r5]
   19dec:	str	r6, [r0, r3, lsl #4]
   19df0:	ldr	r3, [r5]
   19df4:	ldr	r0, [r5, #4]
   19df8:	cmp	r3, r9
   19dfc:	bls	19de4 <close_stdout@@Base+0x5608>
   19e00:	ldr	r3, [r0, r9, lsl #4]
   19e04:	cmp	r3, #0
   19e08:	bne	19e20 <close_stdout@@Base+0x5644>
   19e0c:	mov	r1, #5
   19e10:	str	r1, [r0, r9, lsl #4]
   19e14:	mov	r9, sl
   19e18:	ldrb	r3, [sl]
   19e1c:	b	194a8 <close_stdout@@Base+0x4ccc>
   19e20:	cmp	r3, #5
   19e24:	bne	19c44 <close_stdout@@Base+0x5468>
   19e28:	ldrb	r3, [sl]
   19e2c:	mov	r9, sl
   19e30:	b	194a8 <close_stdout@@Base+0x4ccc>
   19e34:	mov	r0, r1
   19e38:	str	ip, [sp, #4]
   19e3c:	bl	112d8 <malloc@plt>
   19e40:	ldr	ip, [sp, #4]
   19e44:	subs	r3, r0, #0
   19e48:	beq	19f14 <close_stdout@@Base+0x5738>
   19e4c:	ldr	r2, [r5]
   19e50:	mov	r0, r3
   19e54:	ldr	r1, [sp, #12]
   19e58:	str	ip, [sp, #4]
   19e5c:	lsl	r2, r2, #4
   19e60:	bl	111e8 <memcpy@plt>
   19e64:	ldr	ip, [sp, #4]
   19e68:	mov	r3, r0
   19e6c:	b	19d34 <close_stdout@@Base+0x5558>
   19e70:	mov	r2, #0
   19e74:	b	19810 <close_stdout@@Base+0x5034>
   19e78:	ldr	r2, [r7]
   19e7c:	mov	r3, #44	; 0x2c
   19e80:	mov	r0, r4
   19e84:	ldr	r1, [sp, #16]
   19e88:	str	ip, [sp, #4]
   19e8c:	mul	r2, r3, r2
   19e90:	bl	111e8 <memcpy@plt>
   19e94:	ldr	ip, [sp, #4]
   19e98:	b	19754 <close_stdout@@Base+0x4f78>
   19e9c:	mov	r0, r1
   19ea0:	str	ip, [sp, #4]
   19ea4:	bl	112d8 <malloc@plt>
   19ea8:	ldr	ip, [sp, #4]
   19eac:	subs	r3, r0, #0
   19eb0:	beq	19f14 <close_stdout@@Base+0x5738>
   19eb4:	ldr	r2, [r5]
   19eb8:	mov	r0, r3
   19ebc:	ldr	r1, [sp, #12]
   19ec0:	str	ip, [sp, #4]
   19ec4:	lsl	r2, r2, #4
   19ec8:	bl	111e8 <memcpy@plt>
   19ecc:	ldr	ip, [sp, #4]
   19ed0:	mov	r3, r0
   19ed4:	b	19d90 <close_stdout@@Base+0x55b4>
   19ed8:	mov	r0, r1
   19edc:	str	ip, [sp, #4]
   19ee0:	bl	112d8 <malloc@plt>
   19ee4:	ldr	ip, [sp, #4]
   19ee8:	subs	r3, r0, #0
   19eec:	beq	19f14 <close_stdout@@Base+0x5738>
   19ef0:	ldr	r2, [r5]
   19ef4:	mov	r0, r3
   19ef8:	ldr	r1, [sp, #12]
   19efc:	str	ip, [sp, #4]
   19f00:	lsl	r2, r2, #4
   19f04:	bl	111e8 <memcpy@plt>
   19f08:	ldr	ip, [sp, #4]
   19f0c:	mov	r3, r0
   19f10:	b	19c34 <close_stdout@@Base+0x5458>
   19f14:	ldr	r2, [sp, #12]
   19f18:	b	198c4 <close_stdout@@Base+0x50e8>
   19f1c:	subs	r2, r1, #1
   19f20:	bxeq	lr
   19f24:	bcc	1a0fc <close_stdout@@Base+0x5920>
   19f28:	cmp	r0, r1
   19f2c:	bls	1a0e0 <close_stdout@@Base+0x5904>
   19f30:	tst	r1, r2
   19f34:	beq	1a0ec <close_stdout@@Base+0x5910>
   19f38:	clz	r3, r0
   19f3c:	clz	r2, r1
   19f40:	sub	r3, r2, r3
   19f44:	rsbs	r3, r3, #31
   19f48:	addne	r3, r3, r3, lsl #1
   19f4c:	mov	r2, #0
   19f50:	addne	pc, pc, r3, lsl #2
   19f54:	nop	{0}
   19f58:	cmp	r0, r1, lsl #31
   19f5c:	adc	r2, r2, r2
   19f60:	subcs	r0, r0, r1, lsl #31
   19f64:	cmp	r0, r1, lsl #30
   19f68:	adc	r2, r2, r2
   19f6c:	subcs	r0, r0, r1, lsl #30
   19f70:	cmp	r0, r1, lsl #29
   19f74:	adc	r2, r2, r2
   19f78:	subcs	r0, r0, r1, lsl #29
   19f7c:	cmp	r0, r1, lsl #28
   19f80:	adc	r2, r2, r2
   19f84:	subcs	r0, r0, r1, lsl #28
   19f88:	cmp	r0, r1, lsl #27
   19f8c:	adc	r2, r2, r2
   19f90:	subcs	r0, r0, r1, lsl #27
   19f94:	cmp	r0, r1, lsl #26
   19f98:	adc	r2, r2, r2
   19f9c:	subcs	r0, r0, r1, lsl #26
   19fa0:	cmp	r0, r1, lsl #25
   19fa4:	adc	r2, r2, r2
   19fa8:	subcs	r0, r0, r1, lsl #25
   19fac:	cmp	r0, r1, lsl #24
   19fb0:	adc	r2, r2, r2
   19fb4:	subcs	r0, r0, r1, lsl #24
   19fb8:	cmp	r0, r1, lsl #23
   19fbc:	adc	r2, r2, r2
   19fc0:	subcs	r0, r0, r1, lsl #23
   19fc4:	cmp	r0, r1, lsl #22
   19fc8:	adc	r2, r2, r2
   19fcc:	subcs	r0, r0, r1, lsl #22
   19fd0:	cmp	r0, r1, lsl #21
   19fd4:	adc	r2, r2, r2
   19fd8:	subcs	r0, r0, r1, lsl #21
   19fdc:	cmp	r0, r1, lsl #20
   19fe0:	adc	r2, r2, r2
   19fe4:	subcs	r0, r0, r1, lsl #20
   19fe8:	cmp	r0, r1, lsl #19
   19fec:	adc	r2, r2, r2
   19ff0:	subcs	r0, r0, r1, lsl #19
   19ff4:	cmp	r0, r1, lsl #18
   19ff8:	adc	r2, r2, r2
   19ffc:	subcs	r0, r0, r1, lsl #18
   1a000:	cmp	r0, r1, lsl #17
   1a004:	adc	r2, r2, r2
   1a008:	subcs	r0, r0, r1, lsl #17
   1a00c:	cmp	r0, r1, lsl #16
   1a010:	adc	r2, r2, r2
   1a014:	subcs	r0, r0, r1, lsl #16
   1a018:	cmp	r0, r1, lsl #15
   1a01c:	adc	r2, r2, r2
   1a020:	subcs	r0, r0, r1, lsl #15
   1a024:	cmp	r0, r1, lsl #14
   1a028:	adc	r2, r2, r2
   1a02c:	subcs	r0, r0, r1, lsl #14
   1a030:	cmp	r0, r1, lsl #13
   1a034:	adc	r2, r2, r2
   1a038:	subcs	r0, r0, r1, lsl #13
   1a03c:	cmp	r0, r1, lsl #12
   1a040:	adc	r2, r2, r2
   1a044:	subcs	r0, r0, r1, lsl #12
   1a048:	cmp	r0, r1, lsl #11
   1a04c:	adc	r2, r2, r2
   1a050:	subcs	r0, r0, r1, lsl #11
   1a054:	cmp	r0, r1, lsl #10
   1a058:	adc	r2, r2, r2
   1a05c:	subcs	r0, r0, r1, lsl #10
   1a060:	cmp	r0, r1, lsl #9
   1a064:	adc	r2, r2, r2
   1a068:	subcs	r0, r0, r1, lsl #9
   1a06c:	cmp	r0, r1, lsl #8
   1a070:	adc	r2, r2, r2
   1a074:	subcs	r0, r0, r1, lsl #8
   1a078:	cmp	r0, r1, lsl #7
   1a07c:	adc	r2, r2, r2
   1a080:	subcs	r0, r0, r1, lsl #7
   1a084:	cmp	r0, r1, lsl #6
   1a088:	adc	r2, r2, r2
   1a08c:	subcs	r0, r0, r1, lsl #6
   1a090:	cmp	r0, r1, lsl #5
   1a094:	adc	r2, r2, r2
   1a098:	subcs	r0, r0, r1, lsl #5
   1a09c:	cmp	r0, r1, lsl #4
   1a0a0:	adc	r2, r2, r2
   1a0a4:	subcs	r0, r0, r1, lsl #4
   1a0a8:	cmp	r0, r1, lsl #3
   1a0ac:	adc	r2, r2, r2
   1a0b0:	subcs	r0, r0, r1, lsl #3
   1a0b4:	cmp	r0, r1, lsl #2
   1a0b8:	adc	r2, r2, r2
   1a0bc:	subcs	r0, r0, r1, lsl #2
   1a0c0:	cmp	r0, r1, lsl #1
   1a0c4:	adc	r2, r2, r2
   1a0c8:	subcs	r0, r0, r1, lsl #1
   1a0cc:	cmp	r0, r1
   1a0d0:	adc	r2, r2, r2
   1a0d4:	subcs	r0, r0, r1
   1a0d8:	mov	r0, r2
   1a0dc:	bx	lr
   1a0e0:	moveq	r0, #1
   1a0e4:	movne	r0, #0
   1a0e8:	bx	lr
   1a0ec:	clz	r2, r1
   1a0f0:	rsb	r2, r2, #31
   1a0f4:	lsr	r0, r0, r2
   1a0f8:	bx	lr
   1a0fc:	cmp	r0, #0
   1a100:	mvnne	r0, #0
   1a104:	b	1a75c <close_stdout@@Base+0x5f80>
   1a108:	cmp	r1, #0
   1a10c:	beq	1a0fc <close_stdout@@Base+0x5920>
   1a110:	push	{r0, r1, lr}
   1a114:	bl	19f1c <close_stdout@@Base+0x5740>
   1a118:	pop	{r1, r2, lr}
   1a11c:	mul	r3, r2, r0
   1a120:	sub	r1, r1, r3
   1a124:	bx	lr
   1a128:	cmp	r1, #0
   1a12c:	beq	1a338 <close_stdout@@Base+0x5b5c>
   1a130:	eor	ip, r0, r1
   1a134:	rsbmi	r1, r1, #0
   1a138:	subs	r2, r1, #1
   1a13c:	beq	1a304 <close_stdout@@Base+0x5b28>
   1a140:	movs	r3, r0
   1a144:	rsbmi	r3, r0, #0
   1a148:	cmp	r3, r1
   1a14c:	bls	1a310 <close_stdout@@Base+0x5b34>
   1a150:	tst	r1, r2
   1a154:	beq	1a320 <close_stdout@@Base+0x5b44>
   1a158:	clz	r2, r3
   1a15c:	clz	r0, r1
   1a160:	sub	r2, r0, r2
   1a164:	rsbs	r2, r2, #31
   1a168:	addne	r2, r2, r2, lsl #1
   1a16c:	mov	r0, #0
   1a170:	addne	pc, pc, r2, lsl #2
   1a174:	nop	{0}
   1a178:	cmp	r3, r1, lsl #31
   1a17c:	adc	r0, r0, r0
   1a180:	subcs	r3, r3, r1, lsl #31
   1a184:	cmp	r3, r1, lsl #30
   1a188:	adc	r0, r0, r0
   1a18c:	subcs	r3, r3, r1, lsl #30
   1a190:	cmp	r3, r1, lsl #29
   1a194:	adc	r0, r0, r0
   1a198:	subcs	r3, r3, r1, lsl #29
   1a19c:	cmp	r3, r1, lsl #28
   1a1a0:	adc	r0, r0, r0
   1a1a4:	subcs	r3, r3, r1, lsl #28
   1a1a8:	cmp	r3, r1, lsl #27
   1a1ac:	adc	r0, r0, r0
   1a1b0:	subcs	r3, r3, r1, lsl #27
   1a1b4:	cmp	r3, r1, lsl #26
   1a1b8:	adc	r0, r0, r0
   1a1bc:	subcs	r3, r3, r1, lsl #26
   1a1c0:	cmp	r3, r1, lsl #25
   1a1c4:	adc	r0, r0, r0
   1a1c8:	subcs	r3, r3, r1, lsl #25
   1a1cc:	cmp	r3, r1, lsl #24
   1a1d0:	adc	r0, r0, r0
   1a1d4:	subcs	r3, r3, r1, lsl #24
   1a1d8:	cmp	r3, r1, lsl #23
   1a1dc:	adc	r0, r0, r0
   1a1e0:	subcs	r3, r3, r1, lsl #23
   1a1e4:	cmp	r3, r1, lsl #22
   1a1e8:	adc	r0, r0, r0
   1a1ec:	subcs	r3, r3, r1, lsl #22
   1a1f0:	cmp	r3, r1, lsl #21
   1a1f4:	adc	r0, r0, r0
   1a1f8:	subcs	r3, r3, r1, lsl #21
   1a1fc:	cmp	r3, r1, lsl #20
   1a200:	adc	r0, r0, r0
   1a204:	subcs	r3, r3, r1, lsl #20
   1a208:	cmp	r3, r1, lsl #19
   1a20c:	adc	r0, r0, r0
   1a210:	subcs	r3, r3, r1, lsl #19
   1a214:	cmp	r3, r1, lsl #18
   1a218:	adc	r0, r0, r0
   1a21c:	subcs	r3, r3, r1, lsl #18
   1a220:	cmp	r3, r1, lsl #17
   1a224:	adc	r0, r0, r0
   1a228:	subcs	r3, r3, r1, lsl #17
   1a22c:	cmp	r3, r1, lsl #16
   1a230:	adc	r0, r0, r0
   1a234:	subcs	r3, r3, r1, lsl #16
   1a238:	cmp	r3, r1, lsl #15
   1a23c:	adc	r0, r0, r0
   1a240:	subcs	r3, r3, r1, lsl #15
   1a244:	cmp	r3, r1, lsl #14
   1a248:	adc	r0, r0, r0
   1a24c:	subcs	r3, r3, r1, lsl #14
   1a250:	cmp	r3, r1, lsl #13
   1a254:	adc	r0, r0, r0
   1a258:	subcs	r3, r3, r1, lsl #13
   1a25c:	cmp	r3, r1, lsl #12
   1a260:	adc	r0, r0, r0
   1a264:	subcs	r3, r3, r1, lsl #12
   1a268:	cmp	r3, r1, lsl #11
   1a26c:	adc	r0, r0, r0
   1a270:	subcs	r3, r3, r1, lsl #11
   1a274:	cmp	r3, r1, lsl #10
   1a278:	adc	r0, r0, r0
   1a27c:	subcs	r3, r3, r1, lsl #10
   1a280:	cmp	r3, r1, lsl #9
   1a284:	adc	r0, r0, r0
   1a288:	subcs	r3, r3, r1, lsl #9
   1a28c:	cmp	r3, r1, lsl #8
   1a290:	adc	r0, r0, r0
   1a294:	subcs	r3, r3, r1, lsl #8
   1a298:	cmp	r3, r1, lsl #7
   1a29c:	adc	r0, r0, r0
   1a2a0:	subcs	r3, r3, r1, lsl #7
   1a2a4:	cmp	r3, r1, lsl #6
   1a2a8:	adc	r0, r0, r0
   1a2ac:	subcs	r3, r3, r1, lsl #6
   1a2b0:	cmp	r3, r1, lsl #5
   1a2b4:	adc	r0, r0, r0
   1a2b8:	subcs	r3, r3, r1, lsl #5
   1a2bc:	cmp	r3, r1, lsl #4
   1a2c0:	adc	r0, r0, r0
   1a2c4:	subcs	r3, r3, r1, lsl #4
   1a2c8:	cmp	r3, r1, lsl #3
   1a2cc:	adc	r0, r0, r0
   1a2d0:	subcs	r3, r3, r1, lsl #3
   1a2d4:	cmp	r3, r1, lsl #2
   1a2d8:	adc	r0, r0, r0
   1a2dc:	subcs	r3, r3, r1, lsl #2
   1a2e0:	cmp	r3, r1, lsl #1
   1a2e4:	adc	r0, r0, r0
   1a2e8:	subcs	r3, r3, r1, lsl #1
   1a2ec:	cmp	r3, r1
   1a2f0:	adc	r0, r0, r0
   1a2f4:	subcs	r3, r3, r1
   1a2f8:	cmp	ip, #0
   1a2fc:	rsbmi	r0, r0, #0
   1a300:	bx	lr
   1a304:	teq	ip, r0
   1a308:	rsbmi	r0, r0, #0
   1a30c:	bx	lr
   1a310:	movcc	r0, #0
   1a314:	asreq	r0, ip, #31
   1a318:	orreq	r0, r0, #1
   1a31c:	bx	lr
   1a320:	clz	r2, r1
   1a324:	rsb	r2, r2, #31
   1a328:	cmp	ip, #0
   1a32c:	lsr	r0, r3, r2
   1a330:	rsbmi	r0, r0, #0
   1a334:	bx	lr
   1a338:	cmp	r0, #0
   1a33c:	mvngt	r0, #-2147483648	; 0x80000000
   1a340:	movlt	r0, #-2147483648	; 0x80000000
   1a344:	b	1a75c <close_stdout@@Base+0x5f80>
   1a348:	cmp	r1, #0
   1a34c:	beq	1a338 <close_stdout@@Base+0x5b5c>
   1a350:	push	{r0, r1, lr}
   1a354:	bl	1a130 <close_stdout@@Base+0x5954>
   1a358:	pop	{r1, r2, lr}
   1a35c:	mul	r3, r2, r0
   1a360:	sub	r1, r1, r3
   1a364:	bx	lr
   1a368:	eor	r1, r1, #-2147483648	; 0x80000000
   1a36c:	b	1a374 <close_stdout@@Base+0x5b98>
   1a370:	eor	r3, r3, #-2147483648	; 0x80000000
   1a374:	push	{r4, r5, lr}
   1a378:	lsl	r4, r1, #1
   1a37c:	lsl	r5, r3, #1
   1a380:	teq	r4, r5
   1a384:	teqeq	r0, r2
   1a388:	orrsne	ip, r4, r0
   1a38c:	orrsne	ip, r5, r2
   1a390:	mvnsne	ip, r4, asr #21
   1a394:	mvnsne	ip, r5, asr #21
   1a398:	beq	1a584 <close_stdout@@Base+0x5da8>
   1a39c:	lsr	r4, r4, #21
   1a3a0:	rsbs	r5, r4, r5, lsr #21
   1a3a4:	rsblt	r5, r5, #0
   1a3a8:	ble	1a3c8 <close_stdout@@Base+0x5bec>
   1a3ac:	add	r4, r4, r5
   1a3b0:	eor	r2, r0, r2
   1a3b4:	eor	r3, r1, r3
   1a3b8:	eor	r0, r2, r0
   1a3bc:	eor	r1, r3, r1
   1a3c0:	eor	r2, r0, r2
   1a3c4:	eor	r3, r1, r3
   1a3c8:	cmp	r5, #54	; 0x36
   1a3cc:	pophi	{r4, r5, pc}
   1a3d0:	tst	r1, #-2147483648	; 0x80000000
   1a3d4:	lsl	r1, r1, #12
   1a3d8:	mov	ip, #1048576	; 0x100000
   1a3dc:	orr	r1, ip, r1, lsr #12
   1a3e0:	beq	1a3ec <close_stdout@@Base+0x5c10>
   1a3e4:	rsbs	r0, r0, #0
   1a3e8:	rsc	r1, r1, #0
   1a3ec:	tst	r3, #-2147483648	; 0x80000000
   1a3f0:	lsl	r3, r3, #12
   1a3f4:	orr	r3, ip, r3, lsr #12
   1a3f8:	beq	1a404 <close_stdout@@Base+0x5c28>
   1a3fc:	rsbs	r2, r2, #0
   1a400:	rsc	r3, r3, #0
   1a404:	teq	r4, r5
   1a408:	beq	1a56c <close_stdout@@Base+0x5d90>
   1a40c:	sub	r4, r4, #1
   1a410:	rsbs	lr, r5, #32
   1a414:	blt	1a430 <close_stdout@@Base+0x5c54>
   1a418:	lsl	ip, r2, lr
   1a41c:	adds	r0, r0, r2, lsr r5
   1a420:	adc	r1, r1, #0
   1a424:	adds	r0, r0, r3, lsl lr
   1a428:	adcs	r1, r1, r3, asr r5
   1a42c:	b	1a44c <close_stdout@@Base+0x5c70>
   1a430:	sub	r5, r5, #32
   1a434:	add	lr, lr, #32
   1a438:	cmp	r2, #1
   1a43c:	lsl	ip, r3, lr
   1a440:	orrcs	ip, ip, #2
   1a444:	adds	r0, r0, r3, asr r5
   1a448:	adcs	r1, r1, r3, asr #31
   1a44c:	and	r5, r1, #-2147483648	; 0x80000000
   1a450:	bpl	1a460 <close_stdout@@Base+0x5c84>
   1a454:	rsbs	ip, ip, #0
   1a458:	rscs	r0, r0, #0
   1a45c:	rsc	r1, r1, #0
   1a460:	cmp	r1, #1048576	; 0x100000
   1a464:	bcc	1a4a4 <close_stdout@@Base+0x5cc8>
   1a468:	cmp	r1, #2097152	; 0x200000
   1a46c:	bcc	1a48c <close_stdout@@Base+0x5cb0>
   1a470:	lsrs	r1, r1, #1
   1a474:	rrxs	r0, r0
   1a478:	rrx	ip, ip
   1a47c:	add	r4, r4, #1
   1a480:	lsl	r2, r4, #21
   1a484:	cmn	r2, #4194304	; 0x400000
   1a488:	bcs	1a5e4 <close_stdout@@Base+0x5e08>
   1a48c:	cmp	ip, #-2147483648	; 0x80000000
   1a490:	lsrseq	ip, r0, #1
   1a494:	adcs	r0, r0, #0
   1a498:	adc	r1, r1, r4, lsl #20
   1a49c:	orr	r1, r1, r5
   1a4a0:	pop	{r4, r5, pc}
   1a4a4:	lsls	ip, ip, #1
   1a4a8:	adcs	r0, r0, r0
   1a4ac:	adc	r1, r1, r1
   1a4b0:	tst	r1, #1048576	; 0x100000
   1a4b4:	sub	r4, r4, #1
   1a4b8:	bne	1a48c <close_stdout@@Base+0x5cb0>
   1a4bc:	teq	r1, #0
   1a4c0:	moveq	r1, r0
   1a4c4:	moveq	r0, #0
   1a4c8:	clz	r3, r1
   1a4cc:	addeq	r3, r3, #32
   1a4d0:	sub	r3, r3, #11
   1a4d4:	subs	r2, r3, #32
   1a4d8:	bge	1a4fc <close_stdout@@Base+0x5d20>
   1a4dc:	adds	r2, r2, #12
   1a4e0:	ble	1a4f8 <close_stdout@@Base+0x5d1c>
   1a4e4:	add	ip, r2, #20
   1a4e8:	rsb	r2, r2, #12
   1a4ec:	lsl	r0, r1, ip
   1a4f0:	lsr	r1, r1, r2
   1a4f4:	b	1a50c <close_stdout@@Base+0x5d30>
   1a4f8:	add	r2, r2, #20
   1a4fc:	rsble	ip, r2, #32
   1a500:	lsl	r1, r1, r2
   1a504:	orrle	r1, r1, r0, lsr ip
   1a508:	lslle	r0, r0, r2
   1a50c:	subs	r4, r4, r3
   1a510:	addge	r1, r1, r4, lsl #20
   1a514:	orrge	r1, r1, r5
   1a518:	popge	{r4, r5, pc}
   1a51c:	mvn	r4, r4
   1a520:	subs	r4, r4, #31
   1a524:	bge	1a560 <close_stdout@@Base+0x5d84>
   1a528:	adds	r4, r4, #12
   1a52c:	bgt	1a548 <close_stdout@@Base+0x5d6c>
   1a530:	add	r4, r4, #20
   1a534:	rsb	r2, r4, #32
   1a538:	lsr	r0, r0, r4
   1a53c:	orr	r0, r0, r1, lsl r2
   1a540:	orr	r1, r5, r1, lsr r4
   1a544:	pop	{r4, r5, pc}
   1a548:	rsb	r4, r4, #12
   1a54c:	rsb	r2, r4, #32
   1a550:	lsr	r0, r0, r2
   1a554:	orr	r0, r0, r1, lsl r4
   1a558:	mov	r1, r5
   1a55c:	pop	{r4, r5, pc}
   1a560:	lsr	r0, r1, r4
   1a564:	mov	r1, r5
   1a568:	pop	{r4, r5, pc}
   1a56c:	teq	r4, #0
   1a570:	eor	r3, r3, #1048576	; 0x100000
   1a574:	eoreq	r1, r1, #1048576	; 0x100000
   1a578:	addeq	r4, r4, #1
   1a57c:	subne	r5, r5, #1
   1a580:	b	1a40c <close_stdout@@Base+0x5c30>
   1a584:	mvns	ip, r4, asr #21
   1a588:	mvnsne	ip, r5, asr #21
   1a58c:	beq	1a5f4 <close_stdout@@Base+0x5e18>
   1a590:	teq	r4, r5
   1a594:	teqeq	r0, r2
   1a598:	beq	1a5ac <close_stdout@@Base+0x5dd0>
   1a59c:	orrs	ip, r4, r0
   1a5a0:	moveq	r1, r3
   1a5a4:	moveq	r0, r2
   1a5a8:	pop	{r4, r5, pc}
   1a5ac:	teq	r1, r3
   1a5b0:	movne	r1, #0
   1a5b4:	movne	r0, #0
   1a5b8:	popne	{r4, r5, pc}
   1a5bc:	lsrs	ip, r4, #21
   1a5c0:	bne	1a5d4 <close_stdout@@Base+0x5df8>
   1a5c4:	lsls	r0, r0, #1
   1a5c8:	adcs	r1, r1, r1
   1a5cc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1a5d0:	pop	{r4, r5, pc}
   1a5d4:	adds	r4, r4, #4194304	; 0x400000
   1a5d8:	addcc	r1, r1, #1048576	; 0x100000
   1a5dc:	popcc	{r4, r5, pc}
   1a5e0:	and	r5, r1, #-2147483648	; 0x80000000
   1a5e4:	orr	r1, r5, #2130706432	; 0x7f000000
   1a5e8:	orr	r1, r1, #15728640	; 0xf00000
   1a5ec:	mov	r0, #0
   1a5f0:	pop	{r4, r5, pc}
   1a5f4:	mvns	ip, r4, asr #21
   1a5f8:	movne	r1, r3
   1a5fc:	movne	r0, r2
   1a600:	mvnseq	ip, r5, asr #21
   1a604:	movne	r3, r1
   1a608:	movne	r2, r0
   1a60c:	orrs	r4, r0, r1, lsl #12
   1a610:	orrseq	r5, r2, r3, lsl #12
   1a614:	teqeq	r1, r3
   1a618:	orrne	r1, r1, #524288	; 0x80000
   1a61c:	pop	{r4, r5, pc}
   1a620:	teq	r0, #0
   1a624:	moveq	r1, #0
   1a628:	bxeq	lr
   1a62c:	push	{r4, r5, lr}
   1a630:	mov	r4, #1024	; 0x400
   1a634:	add	r4, r4, #50	; 0x32
   1a638:	mov	r5, #0
   1a63c:	mov	r1, #0
   1a640:	b	1a4bc <close_stdout@@Base+0x5ce0>
   1a644:	teq	r0, #0
   1a648:	moveq	r1, #0
   1a64c:	bxeq	lr
   1a650:	push	{r4, r5, lr}
   1a654:	mov	r4, #1024	; 0x400
   1a658:	add	r4, r4, #50	; 0x32
   1a65c:	ands	r5, r0, #-2147483648	; 0x80000000
   1a660:	rsbmi	r0, r0, #0
   1a664:	mov	r1, #0
   1a668:	b	1a4bc <close_stdout@@Base+0x5ce0>
   1a66c:	lsls	r2, r0, #1
   1a670:	asr	r1, r2, #3
   1a674:	rrx	r1, r1
   1a678:	lsl	r0, r2, #28
   1a67c:	andsne	r3, r2, #-16777216	; 0xff000000
   1a680:	teqne	r3, #-16777216	; 0xff000000
   1a684:	eorne	r1, r1, #939524096	; 0x38000000
   1a688:	bxne	lr
   1a68c:	teq	r2, #0
   1a690:	teqne	r3, #-16777216	; 0xff000000
   1a694:	bxeq	lr
   1a698:	push	{r4, r5, lr}
   1a69c:	mov	r4, #896	; 0x380
   1a6a0:	and	r5, r1, #-2147483648	; 0x80000000
   1a6a4:	bic	r1, r1, #-2147483648	; 0x80000000
   1a6a8:	b	1a4bc <close_stdout@@Base+0x5ce0>
   1a6ac:	orrs	r2, r0, r1
   1a6b0:	bxeq	lr
   1a6b4:	push	{r4, r5, lr}
   1a6b8:	mov	r5, #0
   1a6bc:	b	1a6dc <close_stdout@@Base+0x5f00>
   1a6c0:	orrs	r2, r0, r1
   1a6c4:	bxeq	lr
   1a6c8:	push	{r4, r5, lr}
   1a6cc:	ands	r5, r1, #-2147483648	; 0x80000000
   1a6d0:	bpl	1a6dc <close_stdout@@Base+0x5f00>
   1a6d4:	rsbs	r0, r0, #0
   1a6d8:	rsc	r1, r1, #0
   1a6dc:	mov	r4, #1024	; 0x400
   1a6e0:	add	r4, r4, #50	; 0x32
   1a6e4:	lsrs	ip, r1, #22
   1a6e8:	beq	1a460 <close_stdout@@Base+0x5c84>
   1a6ec:	mov	r2, #3
   1a6f0:	lsrs	ip, ip, #3
   1a6f4:	addne	r2, r2, #3
   1a6f8:	lsrs	ip, ip, #3
   1a6fc:	addne	r2, r2, #3
   1a700:	add	r2, r2, ip, lsr #3
   1a704:	rsb	r3, r2, #32
   1a708:	lsl	ip, r0, r3
   1a70c:	lsr	r0, r0, r2
   1a710:	orr	r0, r0, r1, lsl r3
   1a714:	lsr	r1, r1, r2
   1a718:	add	r4, r4, r2
   1a71c:	b	1a460 <close_stdout@@Base+0x5c84>
   1a720:	cmp	r3, #0
   1a724:	cmpeq	r2, #0
   1a728:	bne	1a740 <close_stdout@@Base+0x5f64>
   1a72c:	cmp	r1, #0
   1a730:	cmpeq	r0, #0
   1a734:	mvnne	r1, #0
   1a738:	mvnne	r0, #0
   1a73c:	b	1a75c <close_stdout@@Base+0x5f80>
   1a740:	sub	sp, sp, #8
   1a744:	push	{sp, lr}
   1a748:	bl	1a824 <close_stdout@@Base+0x6048>
   1a74c:	ldr	lr, [sp, #4]
   1a750:	add	sp, sp, #8
   1a754:	pop	{r2, r3}
   1a758:	bx	lr
   1a75c:	push	{r1, lr}
   1a760:	mov	r0, #8
   1a764:	bl	1117c <raise@plt>
   1a768:	pop	{r1, pc}
   1a76c:	vmov	d7, r0, r1
   1a770:	push	{r3, lr}
   1a774:	vcmpe.f64	d7, #0.0
   1a778:	vmrs	APSR_nzcv, fpscr
   1a77c:	bmi	1a788 <close_stdout@@Base+0x5fac>
   1a780:	pop	{r3, lr}
   1a784:	b	1a7a0 <close_stdout@@Base+0x5fc4>
   1a788:	vneg.f64	d6, d7
   1a78c:	vmov	r0, r1, d6
   1a790:	bl	1a7a0 <close_stdout@@Base+0x5fc4>
   1a794:	rsbs	r0, r0, #0
   1a798:	rsc	r1, r1, #0
   1a79c:	pop	{r3, pc}
   1a7a0:	vmov	d7, r0, r1
   1a7a4:	vldr	d5, [pc, #44]	; 1a7d8 <close_stdout@@Base+0x5ffc>
   1a7a8:	vldr	d6, [pc, #48]	; 1a7e0 <close_stdout@@Base+0x6004>
   1a7ac:	mov	r0, #0
   1a7b0:	vmul.f64	d5, d7, d5
   1a7b4:	vcvt.u32.f64	s9, d5
   1a7b8:	vcvt.f64.u32	d5, s9
   1a7bc:	vmov	r1, s9
   1a7c0:	vmls.f64	d7, d5, d6
   1a7c4:	vcvt.u32.f64	s14, d7
   1a7c8:	vmov	r3, s14
   1a7cc:	orr	r0, r0, r3
   1a7d0:	bx	lr
   1a7d4:	nop	{0}
   1a7d8:	andeq	r0, r0, r0
   1a7dc:	ldclcc	0, cr0, [r0]
   1a7e0:	andeq	r0, r0, r0
   1a7e4:	mvnsmi	r0, r0
   1a7e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7ec:	mov	r8, r2
   1a7f0:	mov	r6, r0
   1a7f4:	mov	r7, r1
   1a7f8:	mov	sl, r3
   1a7fc:	ldr	r9, [sp, #32]
   1a800:	bl	1a860 <close_stdout@@Base+0x6084>
   1a804:	umull	r4, r5, r8, r0
   1a808:	mul	r8, r8, r1
   1a80c:	mla	r2, r0, sl, r8
   1a810:	add	r5, r2, r5
   1a814:	subs	r4, r6, r4
   1a818:	sbc	r5, r7, r5
   1a81c:	strd	r4, [r9]
   1a820:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a824:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1a828:	mov	r8, r2
   1a82c:	mov	r6, r0
   1a830:	mov	r7, r1
   1a834:	mov	r5, r3
   1a838:	ldr	r9, [sp, #32]
   1a83c:	bl	1acec <close_stdout@@Base+0x6510>
   1a840:	mul	r3, r0, r5
   1a844:	umull	r4, r5, r0, r8
   1a848:	mla	r8, r8, r1, r3
   1a84c:	add	r5, r8, r5
   1a850:	subs	r4, r6, r4
   1a854:	sbc	r5, r7, r5
   1a858:	strd	r4, [r9]
   1a85c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1a860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a864:	rsbs	r4, r0, #0
   1a868:	rsc	r5, r1, #0
   1a86c:	cmp	r1, #0
   1a870:	mvn	r6, #0
   1a874:	sub	sp, sp, #12
   1a878:	movge	r4, r0
   1a87c:	movge	r5, r1
   1a880:	movge	r6, #0
   1a884:	cmp	r3, #0
   1a888:	blt	1aac0 <close_stdout@@Base+0x62e4>
   1a88c:	cmp	r3, #0
   1a890:	mov	sl, r4
   1a894:	mov	ip, r5
   1a898:	mov	r0, r2
   1a89c:	mov	r1, r3
   1a8a0:	mov	r8, r2
   1a8a4:	mov	r7, r4
   1a8a8:	mov	r9, r5
   1a8ac:	bne	1a9a4 <close_stdout@@Base+0x61c8>
   1a8b0:	cmp	r2, r5
   1a8b4:	bls	1a9e0 <close_stdout@@Base+0x6204>
   1a8b8:	clz	r3, r2
   1a8bc:	cmp	r3, #0
   1a8c0:	rsbne	r2, r3, #32
   1a8c4:	lslne	r8, r0, r3
   1a8c8:	lsrne	r2, r4, r2
   1a8cc:	lslne	r7, r4, r3
   1a8d0:	orrne	r9, r2, r5, lsl r3
   1a8d4:	lsr	r4, r8, #16
   1a8d8:	uxth	sl, r8
   1a8dc:	mov	r1, r4
   1a8e0:	mov	r0, r9
   1a8e4:	bl	19f1c <close_stdout@@Base+0x5740>
   1a8e8:	mov	r1, r4
   1a8ec:	mov	fp, r0
   1a8f0:	mov	r0, r9
   1a8f4:	bl	1a108 <close_stdout@@Base+0x592c>
   1a8f8:	mul	r0, sl, fp
   1a8fc:	lsr	r2, r7, #16
   1a900:	orr	r1, r2, r1, lsl #16
   1a904:	cmp	r0, r1
   1a908:	bls	1a92c <close_stdout@@Base+0x6150>
   1a90c:	adds	r1, r1, r8
   1a910:	sub	r3, fp, #1
   1a914:	bcs	1a928 <close_stdout@@Base+0x614c>
   1a918:	cmp	r0, r1
   1a91c:	subhi	fp, fp, #2
   1a920:	addhi	r1, r1, r8
   1a924:	bhi	1a92c <close_stdout@@Base+0x6150>
   1a928:	mov	fp, r3
   1a92c:	rsb	r9, r0, r1
   1a930:	mov	r1, r4
   1a934:	uxth	r7, r7
   1a938:	mov	r0, r9
   1a93c:	bl	19f1c <close_stdout@@Base+0x5740>
   1a940:	mov	r1, r4
   1a944:	mov	r5, r0
   1a948:	mov	r0, r9
   1a94c:	bl	1a108 <close_stdout@@Base+0x592c>
   1a950:	mul	sl, sl, r5
   1a954:	orr	r1, r7, r1, lsl #16
   1a958:	cmp	sl, r1
   1a95c:	bls	1a97c <close_stdout@@Base+0x61a0>
   1a960:	adds	r8, r1, r8
   1a964:	sub	r3, r5, #1
   1a968:	bcs	1a978 <close_stdout@@Base+0x619c>
   1a96c:	cmp	sl, r8
   1a970:	subhi	r5, r5, #2
   1a974:	bhi	1a97c <close_stdout@@Base+0x61a0>
   1a978:	mov	r5, r3
   1a97c:	orr	r3, r5, fp, lsl #16
   1a980:	mov	r4, #0
   1a984:	cmp	r6, #0
   1a988:	mov	r0, r3
   1a98c:	mov	r1, r4
   1a990:	beq	1a99c <close_stdout@@Base+0x61c0>
   1a994:	rsbs	r0, r0, #0
   1a998:	rsc	r1, r1, #0
   1a99c:	add	sp, sp, #12
   1a9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9a4:	cmp	r3, r5
   1a9a8:	movhi	r4, #0
   1a9ac:	movhi	r3, r4
   1a9b0:	bhi	1a984 <close_stdout@@Base+0x61a8>
   1a9b4:	clz	r5, r1
   1a9b8:	cmp	r5, #0
   1a9bc:	bne	1abac <close_stdout@@Base+0x63d0>
   1a9c0:	cmp	r1, ip
   1a9c4:	cmpcs	r2, sl
   1a9c8:	movhi	r4, #0
   1a9cc:	movls	r4, #1
   1a9d0:	movls	r3, #1
   1a9d4:	movls	r4, r5
   1a9d8:	movhi	r3, r4
   1a9dc:	b	1a984 <close_stdout@@Base+0x61a8>
   1a9e0:	cmp	r2, #0
   1a9e4:	bne	1a9f8 <close_stdout@@Base+0x621c>
   1a9e8:	mov	r1, r2
   1a9ec:	mov	r0, #1
   1a9f0:	bl	19f1c <close_stdout@@Base+0x5740>
   1a9f4:	mov	r8, r0
   1a9f8:	clz	r3, r8
   1a9fc:	cmp	r3, #0
   1aa00:	bne	1aad0 <close_stdout@@Base+0x62f4>
   1aa04:	rsb	r9, r8, r9
   1aa08:	lsr	r5, r8, #16
   1aa0c:	uxth	sl, r8
   1aa10:	mov	r4, #1
   1aa14:	mov	r1, r5
   1aa18:	mov	r0, r9
   1aa1c:	bl	19f1c <close_stdout@@Base+0x5740>
   1aa20:	mov	r1, r5
   1aa24:	mov	fp, r0
   1aa28:	mov	r0, r9
   1aa2c:	bl	1a108 <close_stdout@@Base+0x592c>
   1aa30:	mul	r0, sl, fp
   1aa34:	lsr	r2, r7, #16
   1aa38:	orr	r1, r2, r1, lsl #16
   1aa3c:	cmp	r0, r1
   1aa40:	bls	1aa60 <close_stdout@@Base+0x6284>
   1aa44:	adds	r1, r1, r8
   1aa48:	sub	r3, fp, #1
   1aa4c:	bcs	1accc <close_stdout@@Base+0x64f0>
   1aa50:	cmp	r0, r1
   1aa54:	subhi	fp, fp, #2
   1aa58:	addhi	r1, r1, r8
   1aa5c:	bls	1accc <close_stdout@@Base+0x64f0>
   1aa60:	rsb	r2, r0, r1
   1aa64:	mov	r1, r5
   1aa68:	str	r2, [sp]
   1aa6c:	uxth	r7, r7
   1aa70:	mov	r0, r2
   1aa74:	bl	19f1c <close_stdout@@Base+0x5740>
   1aa78:	ldr	r2, [sp]
   1aa7c:	mov	r1, r5
   1aa80:	mov	r9, r0
   1aa84:	mov	r0, r2
   1aa88:	bl	1a108 <close_stdout@@Base+0x592c>
   1aa8c:	mul	sl, sl, r9
   1aa90:	orr	r1, r7, r1, lsl #16
   1aa94:	cmp	sl, r1
   1aa98:	bls	1aab8 <close_stdout@@Base+0x62dc>
   1aa9c:	adds	r8, r1, r8
   1aaa0:	sub	r3, r9, #1
   1aaa4:	bcs	1aab4 <close_stdout@@Base+0x62d8>
   1aaa8:	cmp	sl, r8
   1aaac:	subhi	r9, r9, #2
   1aab0:	bhi	1aab8 <close_stdout@@Base+0x62dc>
   1aab4:	mov	r9, r3
   1aab8:	orr	r3, r9, fp, lsl #16
   1aabc:	b	1a984 <close_stdout@@Base+0x61a8>
   1aac0:	mvn	r6, r6
   1aac4:	rsbs	r2, r2, #0
   1aac8:	rsc	r3, r3, #0
   1aacc:	b	1a88c <close_stdout@@Base+0x60b0>
   1aad0:	lsl	r8, r8, r3
   1aad4:	rsb	fp, r3, #32
   1aad8:	lsr	r4, r9, fp
   1aadc:	lsr	fp, r7, fp
   1aae0:	lsr	r5, r8, #16
   1aae4:	orr	fp, fp, r9, lsl r3
   1aae8:	mov	r0, r4
   1aaec:	lsl	r7, r7, r3
   1aaf0:	mov	r1, r5
   1aaf4:	uxth	sl, r8
   1aaf8:	bl	19f1c <close_stdout@@Base+0x5740>
   1aafc:	mov	r1, r5
   1ab00:	mov	r3, r0
   1ab04:	mov	r0, r4
   1ab08:	str	r3, [sp]
   1ab0c:	bl	1a108 <close_stdout@@Base+0x592c>
   1ab10:	ldr	r3, [sp]
   1ab14:	lsr	r2, fp, #16
   1ab18:	mul	r0, sl, r3
   1ab1c:	orr	r1, r2, r1, lsl #16
   1ab20:	cmp	r0, r1
   1ab24:	bls	1ab44 <close_stdout@@Base+0x6368>
   1ab28:	adds	r1, r1, r8
   1ab2c:	sub	r2, r3, #1
   1ab30:	bcs	1ace4 <close_stdout@@Base+0x6508>
   1ab34:	cmp	r0, r1
   1ab38:	subhi	r3, r3, #2
   1ab3c:	addhi	r1, r1, r8
   1ab40:	bls	1ace4 <close_stdout@@Base+0x6508>
   1ab44:	rsb	r9, r0, r1
   1ab48:	mov	r1, r5
   1ab4c:	str	r3, [sp]
   1ab50:	uxth	fp, fp
   1ab54:	mov	r0, r9
   1ab58:	bl	19f1c <close_stdout@@Base+0x5740>
   1ab5c:	mov	r1, r5
   1ab60:	mov	r4, r0
   1ab64:	mov	r0, r9
   1ab68:	bl	1a108 <close_stdout@@Base+0x592c>
   1ab6c:	mul	r9, sl, r4
   1ab70:	ldr	r3, [sp]
   1ab74:	orr	r1, fp, r1, lsl #16
   1ab78:	cmp	r9, r1
   1ab7c:	bls	1aba0 <close_stdout@@Base+0x63c4>
   1ab80:	adds	r1, r1, r8
   1ab84:	sub	r2, r4, #1
   1ab88:	bcs	1ab9c <close_stdout@@Base+0x63c0>
   1ab8c:	cmp	r9, r1
   1ab90:	subhi	r4, r4, #2
   1ab94:	addhi	r1, r1, r8
   1ab98:	bhi	1aba0 <close_stdout@@Base+0x63c4>
   1ab9c:	mov	r4, r2
   1aba0:	rsb	r9, r9, r1
   1aba4:	orr	r4, r4, r3, lsl #16
   1aba8:	b	1aa14 <close_stdout@@Base+0x6238>
   1abac:	rsb	sl, r5, #32
   1abb0:	lsl	r3, r2, r5
   1abb4:	lsr	r0, r2, sl
   1abb8:	lsr	r2, ip, sl
   1abbc:	orr	r4, r0, r1, lsl r5
   1abc0:	lsr	sl, r7, sl
   1abc4:	mov	r0, r2
   1abc8:	orr	sl, sl, ip, lsl r5
   1abcc:	lsr	r9, r4, #16
   1abd0:	str	r3, [sp, #4]
   1abd4:	str	r2, [sp]
   1abd8:	uxth	fp, r4
   1abdc:	mov	r1, r9
   1abe0:	bl	19f1c <close_stdout@@Base+0x5740>
   1abe4:	ldr	r2, [sp]
   1abe8:	mov	r1, r9
   1abec:	mov	r8, r0
   1abf0:	mov	r0, r2
   1abf4:	bl	1a108 <close_stdout@@Base+0x592c>
   1abf8:	mul	r0, fp, r8
   1abfc:	lsr	r2, sl, #16
   1ac00:	orr	r1, r2, r1, lsl #16
   1ac04:	cmp	r0, r1
   1ac08:	bls	1ac28 <close_stdout@@Base+0x644c>
   1ac0c:	adds	r1, r1, r4
   1ac10:	sub	r2, r8, #1
   1ac14:	bcs	1acdc <close_stdout@@Base+0x6500>
   1ac18:	cmp	r0, r1
   1ac1c:	subhi	r8, r8, #2
   1ac20:	addhi	r1, r1, r4
   1ac24:	bls	1acdc <close_stdout@@Base+0x6500>
   1ac28:	rsb	ip, r0, r1
   1ac2c:	mov	r1, r9
   1ac30:	str	ip, [sp]
   1ac34:	mov	r0, ip
   1ac38:	bl	19f1c <close_stdout@@Base+0x5740>
   1ac3c:	ldr	ip, [sp]
   1ac40:	mov	r1, r9
   1ac44:	mov	r2, r0
   1ac48:	mov	r0, ip
   1ac4c:	str	r2, [sp]
   1ac50:	bl	1a108 <close_stdout@@Base+0x592c>
   1ac54:	ldr	r2, [sp]
   1ac58:	uxth	ip, sl
   1ac5c:	mul	fp, fp, r2
   1ac60:	orr	ip, ip, r1, lsl #16
   1ac64:	cmp	fp, ip
   1ac68:	bls	1ac88 <close_stdout@@Base+0x64ac>
   1ac6c:	adds	ip, ip, r4
   1ac70:	sub	r1, r2, #1
   1ac74:	bcs	1acd4 <close_stdout@@Base+0x64f8>
   1ac78:	cmp	fp, ip
   1ac7c:	subhi	r2, r2, #2
   1ac80:	addhi	ip, ip, r4
   1ac84:	bls	1acd4 <close_stdout@@Base+0x64f8>
   1ac88:	ldr	r0, [sp, #4]
   1ac8c:	orr	r1, r2, r8, lsl #16
   1ac90:	rsb	fp, fp, ip
   1ac94:	umull	r2, r3, r1, r0
   1ac98:	cmp	fp, r3
   1ac9c:	bcc	1acc0 <close_stdout@@Base+0x64e4>
   1aca0:	movne	r4, #0
   1aca4:	moveq	r4, #1
   1aca8:	cmp	r2, r7, lsl r5
   1acac:	movls	r4, #0
   1acb0:	andhi	r4, r4, #1
   1acb4:	cmp	r4, #0
   1acb8:	moveq	r3, r1
   1acbc:	beq	1a984 <close_stdout@@Base+0x61a8>
   1acc0:	sub	r3, r1, #1
   1acc4:	mov	r4, #0
   1acc8:	b	1a984 <close_stdout@@Base+0x61a8>
   1accc:	mov	fp, r3
   1acd0:	b	1aa60 <close_stdout@@Base+0x6284>
   1acd4:	mov	r2, r1
   1acd8:	b	1ac88 <close_stdout@@Base+0x64ac>
   1acdc:	mov	r8, r2
   1ace0:	b	1ac28 <close_stdout@@Base+0x644c>
   1ace4:	mov	r3, r2
   1ace8:	b	1ab44 <close_stdout@@Base+0x6368>
   1acec:	cmp	r3, #0
   1acf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acf4:	mov	r6, r0
   1acf8:	sub	sp, sp, #12
   1acfc:	mov	r5, r1
   1ad00:	mov	r7, r0
   1ad04:	mov	r4, r2
   1ad08:	mov	r8, r1
   1ad0c:	bne	1adec <close_stdout@@Base+0x6610>
   1ad10:	cmp	r2, r1
   1ad14:	bls	1ae28 <close_stdout@@Base+0x664c>
   1ad18:	clz	r3, r2
   1ad1c:	cmp	r3, #0
   1ad20:	rsbne	r8, r3, #32
   1ad24:	lslne	r4, r2, r3
   1ad28:	lsrne	r8, r0, r8
   1ad2c:	lslne	r7, r0, r3
   1ad30:	orrne	r8, r8, r1, lsl r3
   1ad34:	lsr	r5, r4, #16
   1ad38:	uxth	sl, r4
   1ad3c:	mov	r1, r5
   1ad40:	mov	r0, r8
   1ad44:	bl	19f1c <close_stdout@@Base+0x5740>
   1ad48:	mov	r1, r5
   1ad4c:	mov	r9, r0
   1ad50:	mov	r0, r8
   1ad54:	bl	1a108 <close_stdout@@Base+0x592c>
   1ad58:	mul	r0, sl, r9
   1ad5c:	lsr	r3, r7, #16
   1ad60:	orr	r1, r3, r1, lsl #16
   1ad64:	cmp	r0, r1
   1ad68:	bls	1ad8c <close_stdout@@Base+0x65b0>
   1ad6c:	adds	r1, r1, r4
   1ad70:	sub	r2, r9, #1
   1ad74:	bcs	1ad88 <close_stdout@@Base+0x65ac>
   1ad78:	cmp	r0, r1
   1ad7c:	subhi	r9, r9, #2
   1ad80:	addhi	r1, r1, r4
   1ad84:	bhi	1ad8c <close_stdout@@Base+0x65b0>
   1ad88:	mov	r9, r2
   1ad8c:	rsb	r8, r0, r1
   1ad90:	mov	r1, r5
   1ad94:	uxth	r7, r7
   1ad98:	mov	r0, r8
   1ad9c:	bl	19f1c <close_stdout@@Base+0x5740>
   1ada0:	mov	r1, r5
   1ada4:	mov	r6, r0
   1ada8:	mov	r0, r8
   1adac:	bl	1a108 <close_stdout@@Base+0x592c>
   1adb0:	mul	sl, sl, r6
   1adb4:	orr	r1, r7, r1, lsl #16
   1adb8:	cmp	sl, r1
   1adbc:	bls	1add8 <close_stdout@@Base+0x65fc>
   1adc0:	adds	r4, r1, r4
   1adc4:	sub	r3, r6, #1
   1adc8:	bcs	1b0d4 <close_stdout@@Base+0x68f8>
   1adcc:	cmp	sl, r4
   1add0:	subhi	r6, r6, #2
   1add4:	bls	1b0d4 <close_stdout@@Base+0x68f8>
   1add8:	orr	r0, r6, r9, lsl #16
   1addc:	mov	r6, #0
   1ade0:	mov	r1, r6
   1ade4:	add	sp, sp, #12
   1ade8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adec:	cmp	r3, r1
   1adf0:	movhi	r6, #0
   1adf4:	movhi	r0, r6
   1adf8:	bhi	1ade0 <close_stdout@@Base+0x6604>
   1adfc:	clz	r7, r3
   1ae00:	cmp	r7, #0
   1ae04:	bne	1af04 <close_stdout@@Base+0x6728>
   1ae08:	cmp	r3, r1
   1ae0c:	cmpcs	r2, r6
   1ae10:	movhi	r6, #0
   1ae14:	movls	r6, #1
   1ae18:	movls	r0, #1
   1ae1c:	movls	r6, r7
   1ae20:	movhi	r0, r6
   1ae24:	b	1ade0 <close_stdout@@Base+0x6604>
   1ae28:	cmp	r2, #0
   1ae2c:	bne	1ae40 <close_stdout@@Base+0x6664>
   1ae30:	mov	r1, r2
   1ae34:	mov	r0, #1
   1ae38:	bl	19f1c <close_stdout@@Base+0x5740>
   1ae3c:	mov	r4, r0
   1ae40:	clz	r3, r4
   1ae44:	cmp	r3, #0
   1ae48:	bne	1b000 <close_stdout@@Base+0x6824>
   1ae4c:	rsb	r5, r4, r5
   1ae50:	lsr	r8, r4, #16
   1ae54:	uxth	sl, r4
   1ae58:	mov	r6, #1
   1ae5c:	mov	r1, r8
   1ae60:	mov	r0, r5
   1ae64:	bl	19f1c <close_stdout@@Base+0x5740>
   1ae68:	mov	r1, r8
   1ae6c:	mov	r9, r0
   1ae70:	mov	r0, r5
   1ae74:	bl	1a108 <close_stdout@@Base+0x592c>
   1ae78:	mul	r0, sl, r9
   1ae7c:	lsr	r3, r7, #16
   1ae80:	orr	r1, r3, r1, lsl #16
   1ae84:	cmp	r0, r1
   1ae88:	bls	1aea8 <close_stdout@@Base+0x66cc>
   1ae8c:	adds	r1, r1, r4
   1ae90:	sub	r2, r9, #1
   1ae94:	bcs	1b0dc <close_stdout@@Base+0x6900>
   1ae98:	cmp	r0, r1
   1ae9c:	subhi	r9, r9, #2
   1aea0:	addhi	r1, r1, r4
   1aea4:	bls	1b0dc <close_stdout@@Base+0x6900>
   1aea8:	rsb	fp, r0, r1
   1aeac:	mov	r1, r8
   1aeb0:	uxth	r7, r7
   1aeb4:	mov	r0, fp
   1aeb8:	bl	19f1c <close_stdout@@Base+0x5740>
   1aebc:	mov	r1, r8
   1aec0:	mov	r5, r0
   1aec4:	mov	r0, fp
   1aec8:	bl	1a108 <close_stdout@@Base+0x592c>
   1aecc:	mul	sl, sl, r5
   1aed0:	orr	r1, r7, r1, lsl #16
   1aed4:	cmp	sl, r1
   1aed8:	bls	1aef4 <close_stdout@@Base+0x6718>
   1aedc:	adds	r4, r1, r4
   1aee0:	sub	r3, r5, #1
   1aee4:	bcs	1b0e4 <close_stdout@@Base+0x6908>
   1aee8:	cmp	sl, r4
   1aeec:	subhi	r5, r5, #2
   1aef0:	bls	1b0e4 <close_stdout@@Base+0x6908>
   1aef4:	orr	r0, r5, r9, lsl #16
   1aef8:	mov	r1, r6
   1aefc:	add	sp, sp, #12
   1af00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af04:	rsb	r1, r7, #32
   1af08:	lsl	r0, r2, r7
   1af0c:	lsr	r2, r2, r1
   1af10:	lsr	fp, r5, r1
   1af14:	orr	r8, r2, r3, lsl r7
   1af18:	lsr	r1, r6, r1
   1af1c:	str	r0, [sp, #4]
   1af20:	orr	r5, r1, r5, lsl r7
   1af24:	lsr	r9, r8, #16
   1af28:	mov	r0, fp
   1af2c:	uxth	sl, r8
   1af30:	mov	r1, r9
   1af34:	bl	19f1c <close_stdout@@Base+0x5740>
   1af38:	mov	r1, r9
   1af3c:	mov	r4, r0
   1af40:	mov	r0, fp
   1af44:	bl	1a108 <close_stdout@@Base+0x592c>
   1af48:	mul	r0, sl, r4
   1af4c:	lsr	ip, r5, #16
   1af50:	orr	r1, ip, r1, lsl #16
   1af54:	cmp	r0, r1
   1af58:	bls	1af6c <close_stdout@@Base+0x6790>
   1af5c:	adds	r1, r1, r8
   1af60:	sub	r2, r4, #1
   1af64:	bcc	1b100 <close_stdout@@Base+0x6924>
   1af68:	mov	r4, r2
   1af6c:	rsb	ip, r0, r1
   1af70:	mov	r1, r9
   1af74:	str	ip, [sp]
   1af78:	uxth	r5, r5
   1af7c:	mov	r0, ip
   1af80:	bl	19f1c <close_stdout@@Base+0x5740>
   1af84:	ldr	ip, [sp]
   1af88:	mov	r1, r9
   1af8c:	mov	fp, r0
   1af90:	mov	r0, ip
   1af94:	bl	1a108 <close_stdout@@Base+0x592c>
   1af98:	mul	sl, sl, fp
   1af9c:	orr	r1, r5, r1, lsl #16
   1afa0:	cmp	sl, r1
   1afa4:	bls	1afb8 <close_stdout@@Base+0x67dc>
   1afa8:	adds	r1, r1, r8
   1afac:	sub	r2, fp, #1
   1afb0:	bcc	1b0ec <close_stdout@@Base+0x6910>
   1afb4:	mov	fp, r2
   1afb8:	ldr	r3, [sp, #4]
   1afbc:	orr	r0, fp, r4, lsl #16
   1afc0:	rsb	sl, sl, r1
   1afc4:	umull	r4, r5, r0, r3
   1afc8:	cmp	sl, r5
   1afcc:	bcc	1afec <close_stdout@@Base+0x6810>
   1afd0:	movne	r3, #0
   1afd4:	moveq	r3, #1
   1afd8:	cmp	r4, r6, lsl r7
   1afdc:	movls	r6, #0
   1afe0:	andhi	r6, r3, #1
   1afe4:	cmp	r6, #0
   1afe8:	beq	1ade0 <close_stdout@@Base+0x6604>
   1afec:	mov	r6, #0
   1aff0:	sub	r0, r0, #1
   1aff4:	mov	r1, r6
   1aff8:	add	sp, sp, #12
   1affc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b000:	lsl	r4, r4, r3
   1b004:	rsb	r9, r3, #32
   1b008:	lsr	r2, r5, r9
   1b00c:	lsr	r9, r6, r9
   1b010:	lsr	r8, r4, #16
   1b014:	orr	r9, r9, r5, lsl r3
   1b018:	mov	r0, r2
   1b01c:	lsl	r7, r6, r3
   1b020:	mov	r1, r8
   1b024:	str	r2, [sp]
   1b028:	bl	19f1c <close_stdout@@Base+0x5740>
   1b02c:	ldr	r2, [sp]
   1b030:	mov	r1, r8
   1b034:	uxth	sl, r4
   1b038:	mov	fp, r0
   1b03c:	mov	r0, r2
   1b040:	bl	1a108 <close_stdout@@Base+0x592c>
   1b044:	mul	r0, sl, fp
   1b048:	lsr	r3, r9, #16
   1b04c:	orr	r1, r3, r1, lsl #16
   1b050:	cmp	r0, r1
   1b054:	bls	1b074 <close_stdout@@Base+0x6898>
   1b058:	adds	r1, r1, r4
   1b05c:	sub	r3, fp, #1
   1b060:	bcs	1b114 <close_stdout@@Base+0x6938>
   1b064:	cmp	r0, r1
   1b068:	subhi	fp, fp, #2
   1b06c:	addhi	r1, r1, r4
   1b070:	bls	1b114 <close_stdout@@Base+0x6938>
   1b074:	rsb	r5, r0, r1
   1b078:	mov	r1, r8
   1b07c:	uxth	r9, r9
   1b080:	mov	r0, r5
   1b084:	bl	19f1c <close_stdout@@Base+0x5740>
   1b088:	mov	r1, r8
   1b08c:	mov	r6, r0
   1b090:	mov	r0, r5
   1b094:	bl	1a108 <close_stdout@@Base+0x592c>
   1b098:	mul	r5, sl, r6
   1b09c:	orr	r1, r9, r1, lsl #16
   1b0a0:	cmp	r5, r1
   1b0a4:	bls	1b0c8 <close_stdout@@Base+0x68ec>
   1b0a8:	adds	r1, r1, r4
   1b0ac:	sub	r3, r6, #1
   1b0b0:	bcs	1b0c4 <close_stdout@@Base+0x68e8>
   1b0b4:	cmp	r5, r1
   1b0b8:	subhi	r6, r6, #2
   1b0bc:	addhi	r1, r1, r4
   1b0c0:	bhi	1b0c8 <close_stdout@@Base+0x68ec>
   1b0c4:	mov	r6, r3
   1b0c8:	rsb	r5, r5, r1
   1b0cc:	orr	r6, r6, fp, lsl #16
   1b0d0:	b	1ae5c <close_stdout@@Base+0x6680>
   1b0d4:	mov	r6, r3
   1b0d8:	b	1add8 <close_stdout@@Base+0x65fc>
   1b0dc:	mov	r9, r2
   1b0e0:	b	1aea8 <close_stdout@@Base+0x66cc>
   1b0e4:	mov	r5, r3
   1b0e8:	b	1aef4 <close_stdout@@Base+0x6718>
   1b0ec:	cmp	sl, r1
   1b0f0:	subhi	fp, fp, #2
   1b0f4:	addhi	r1, r1, r8
   1b0f8:	bhi	1afb8 <close_stdout@@Base+0x67dc>
   1b0fc:	b	1afb4 <close_stdout@@Base+0x67d8>
   1b100:	cmp	r0, r1
   1b104:	subhi	r4, r4, #2
   1b108:	addhi	r1, r1, r8
   1b10c:	bhi	1af6c <close_stdout@@Base+0x6790>
   1b110:	b	1af68 <close_stdout@@Base+0x678c>
   1b114:	mov	fp, r3
   1b118:	b	1b074 <close_stdout@@Base+0x6898>
   1b11c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1b120:	mov	r7, r0
   1b124:	ldr	r6, [pc, #76]	; 1b178 <close_stdout@@Base+0x699c>
   1b128:	mov	r8, r1
   1b12c:	ldr	r5, [pc, #72]	; 1b17c <close_stdout@@Base+0x69a0>
   1b130:	mov	r9, r2
   1b134:	add	r6, pc, r6
   1b138:	bl	11138 <fdopen@plt-0x20>
   1b13c:	add	r5, pc, r5
   1b140:	rsb	r6, r5, r6
   1b144:	asrs	r6, r6, #2
   1b148:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1b14c:	sub	r5, r5, #4
   1b150:	mov	r4, #0
   1b154:	add	r4, r4, #1
   1b158:	ldr	r3, [r5, #4]!
   1b15c:	mov	r0, r7
   1b160:	mov	r1, r8
   1b164:	mov	r2, r9
   1b168:	blx	r3
   1b16c:	cmp	r4, r6
   1b170:	bne	1b154 <close_stdout@@Base+0x6978>
   1b174:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1b178:	andeq	r2, r1, r8, lsr #24
   1b17c:	andeq	r2, r1, ip, lsl ip
   1b180:	bx	lr
   1b184:	ldr	r3, [pc, #28]	; 1b1a8 <close_stdout@@Base+0x69cc>
   1b188:	mov	r1, #0
   1b18c:	ldr	r2, [pc, #24]	; 1b1ac <close_stdout@@Base+0x69d0>
   1b190:	add	r3, pc, r3
   1b194:	ldr	r3, [r3, r2]
   1b198:	cmp	r3, #0
   1b19c:	ldrne	r2, [r3]
   1b1a0:	moveq	r2, r3
   1b1a4:	b	11368 <__cxa_atexit@plt>
   1b1a8:	andeq	r2, r1, r8, ror #28
   1b1ac:	andeq	r0, r0, r4, lsr r1

Disassembly of section .fini:

0001b1b0 <.fini>:
   1b1b0:	push	{r3, lr}
   1b1b4:	pop	{r3, pc}
