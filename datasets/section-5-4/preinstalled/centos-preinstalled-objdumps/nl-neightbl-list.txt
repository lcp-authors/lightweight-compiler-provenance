
centos-preinstalled/nl-neightbl-list:     file format elf32-littlearm


Disassembly of section .init:

000107a0 <.init>:
   107a0:	push	{r3, lr}
   107a4:	bl	109f4 <exit@plt+0x18c>
   107a8:	pop	{r3, pc}

Disassembly of section .plt:

000107ac <abort@plt-0x14>:
   107ac:	push	{lr}		; (str lr, [sp, #-4]!)
   107b0:	ldr	lr, [pc, #4]	; 107bc <abort@plt-0x4>
   107b4:	add	lr, pc, lr
   107b8:	ldr	pc, [lr, #8]!
   107bc:	andeq	r0, r1, r4, asr #16

000107c0 <abort@plt>:
   107c0:	add	ip, pc, #0, 12
   107c4:	add	ip, ip, #16, 20	; 0x10000
   107c8:	ldr	pc, [ip, #2116]!	; 0x844

000107cc <__libc_start_main@plt>:
   107cc:	add	ip, pc, #0, 12
   107d0:	add	ip, ip, #16, 20	; 0x10000
   107d4:	ldr	pc, [ip, #2108]!	; 0x83c

000107d8 <__gmon_start__@plt>:
   107d8:	add	ip, pc, #0, 12
   107dc:	add	ip, ip, #16, 20	; 0x10000
   107e0:	ldr	pc, [ip, #2100]!	; 0x834

000107e4 <nl_cli_alloc_cache@plt>:
   107e4:	add	ip, pc, #0, 12
   107e8:	add	ip, ip, #16, 20	; 0x10000
   107ec:	ldr	pc, [ip, #2092]!	; 0x82c

000107f0 <nl_cli_print_version@plt>:
   107f0:	add	ip, pc, #0, 12
   107f4:	add	ip, ip, #16, 20	; 0x10000
   107f8:	ldr	pc, [ip, #2084]!	; 0x824

000107fc <nl_cli_alloc_socket@plt>:
   107fc:	add	ip, pc, #0, 12
   10800:	add	ip, ip, #16, 20	; 0x10000
   10804:	ldr	pc, [ip, #2076]!	; 0x81c

00010808 <nl_cache_dump@plt>:
   10808:	add	ip, pc, #0, 12
   1080c:	add	ip, ip, #16, 20	; 0x10000
   10810:	ldr	pc, [ip, #2068]!	; 0x814

00010814 <getopt_long@plt>:
   10814:	add	ip, pc, #0, 12
   10818:	add	ip, ip, #16, 20	; 0x10000
   1081c:	ldr	pc, [ip, #2060]!	; 0x80c

00010820 <rtnl_neightbl_alloc_cache@plt>:
   10820:	add	ip, pc, #0, 12
   10824:	add	ip, ip, #16, 20	; 0x10000
   10828:	ldr	pc, [ip, #2052]!	; 0x804

0001082c <nl_cli_parse_dumptype@plt>:
   1082c:	add	ip, pc, #0, 12
   10830:	add	ip, ip, #16, 20	; 0x10000
   10834:	ldr	pc, [ip, #2044]!	; 0x7fc

00010838 <nl_cli_link_alloc_cache@plt>:
   10838:	add	ip, pc, #0, 12
   1083c:	add	ip, ip, #16, 20	; 0x10000
   10840:	ldr	pc, [ip, #2036]!	; 0x7f4

00010844 <__stack_chk_fail@plt>:
   10844:	add	ip, pc, #0, 12
   10848:	add	ip, ip, #16, 20	; 0x10000
   1084c:	ldr	pc, [ip, #2028]!	; 0x7ec

00010850 <puts@plt>:
   10850:	add	ip, pc, #0, 12
   10854:	add	ip, ip, #16, 20	; 0x10000
   10858:	ldr	pc, [ip, #2020]!	; 0x7e4

0001085c <nl_cli_connect@plt>:
   1085c:	add	ip, pc, #0, 12
   10860:	add	ip, ip, #16, 20	; 0x10000
   10864:	ldr	pc, [ip, #2012]!	; 0x7dc

00010868 <exit@plt>:
   10868:	add	ip, pc, #0, 12
   1086c:	add	ip, ip, #16, 20	; 0x10000
   10870:	ldr	pc, [ip, #2004]!	; 0x7d4

Disassembly of section .text:

00010874 <.text>:
   10874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10878:	movw	r3, #4244	; 0x1094
   1087c:	movw	r9, #4240	; 0x1090
   10880:	movt	r3, #2
   10884:	movt	r9, #2
   10888:	sub	sp, sp, #76	; 0x4c
   1088c:	ldr	r3, [r3]
   10890:	mov	r4, #0
   10894:	ldr	r2, [r9]
   10898:	mov	r7, r1
   1089c:	str	r4, [sp, #16]
   108a0:	mov	r8, r0
   108a4:	str	r3, [sp, #44]	; 0x2c
   108a8:	movw	sl, #4248	; 0x1098
   108ac:	str	r2, [sp, #68]	; 0x44
   108b0:	movt	sl, #2
   108b4:	str	r4, [sp, #20]
   108b8:	add	r6, sp, #12
   108bc:	str	r4, [sp, #24]
   108c0:	mov	r5, r4
   108c4:	str	r4, [sp, #28]
   108c8:	str	r4, [sp, #32]
   108cc:	str	r4, [sp, #36]	; 0x24
   108d0:	str	r4, [sp, #40]	; 0x28
   108d4:	str	r4, [sp, #48]	; 0x30
   108d8:	str	r4, [sp, #52]	; 0x34
   108dc:	str	r4, [sp, #56]	; 0x38
   108e0:	str	r4, [sp, #60]	; 0x3c
   108e4:	str	r4, [sp, #64]	; 0x40
   108e8:	bl	107fc <nl_cli_alloc_socket@plt>
   108ec:	mov	r1, r4
   108f0:	mov	fp, r0
   108f4:	bl	1085c <nl_cli_connect@plt>
   108f8:	mov	r0, fp
   108fc:	bl	10838 <nl_cli_link_alloc_cache@plt>
   10900:	mov	r0, fp
   10904:	movw	r1, #2916	; 0xb64
   10908:	movw	r2, #2080	; 0x820
   1090c:	movt	r1, #1
   10910:	movt	r2, #1
   10914:	bl	107e4 <nl_cli_alloc_cache@plt>
   10918:	mov	r4, r0
   1091c:	str	r6, [sp]
   10920:	movw	r2, #2932	; 0xb74
   10924:	movw	r3, #4176	; 0x1050
   10928:	movt	r2, #1
   1092c:	movt	r3, #2
   10930:	mov	r0, r8
   10934:	mov	r1, r7
   10938:	str	r5, [sp, #12]
   1093c:	bl	10814 <getopt_long@plt>
   10940:	cmn	r0, #1
   10944:	beq	1098c <exit@plt+0x124>
   10948:	cmp	r0, #104	; 0x68
   1094c:	beq	10978 <exit@plt+0x110>
   10950:	cmp	r0, #118	; 0x76
   10954:	beq	10970 <exit@plt+0x108>
   10958:	cmp	r0, #102	; 0x66
   1095c:	bne	1091c <exit@plt+0xb4>
   10960:	ldr	r0, [sl]
   10964:	bl	1082c <nl_cli_parse_dumptype@plt>
   10968:	str	r0, [sp, #16]
   1096c:	b	1091c <exit@plt+0xb4>
   10970:	bl	107f0 <nl_cli_print_version@plt>
   10974:	b	1091c <exit@plt+0xb4>
   10978:	movw	r0, #2940	; 0xb7c
   1097c:	movt	r0, #1
   10980:	bl	10850 <puts@plt>
   10984:	mov	r0, #0
   10988:	bl	10868 <exit@plt>
   1098c:	mov	r0, r4
   10990:	add	r1, sp, #16
   10994:	bl	10808 <nl_cache_dump@plt>
   10998:	ldr	r2, [sp, #68]	; 0x44
   1099c:	ldr	r3, [r9]
   109a0:	mov	r0, #0
   109a4:	cmp	r2, r3
   109a8:	bne	109b4 <exit@plt+0x14c>
   109ac:	add	sp, sp, #76	; 0x4c
   109b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109b4:	bl	10844 <__stack_chk_fail@plt>
   109b8:	mov	fp, #0
   109bc:	mov	lr, #0
   109c0:	pop	{r1}		; (ldr r1, [sp], #4)
   109c4:	mov	r2, sp
   109c8:	push	{r2}		; (str r2, [sp, #-4]!)
   109cc:	push	{r0}		; (str r0, [sp, #-4]!)
   109d0:	ldr	ip, [pc, #16]	; 109e8 <exit@plt+0x180>
   109d4:	push	{ip}		; (str ip, [sp, #-4]!)
   109d8:	ldr	r0, [pc, #12]	; 109ec <exit@plt+0x184>
   109dc:	ldr	r3, [pc, #12]	; 109f0 <exit@plt+0x188>
   109e0:	bl	107cc <__libc_start_main@plt>
   109e4:	bl	107c0 <abort@plt>
   109e8:	andeq	r0, r1, r0, asr fp
   109ec:	andeq	r0, r1, r4, ror r8
   109f0:	andeq	r0, r1, ip, ror #21
   109f4:	ldr	r3, [pc, #20]	; 10a10 <exit@plt+0x1a8>
   109f8:	ldr	r2, [pc, #20]	; 10a14 <exit@plt+0x1ac>
   109fc:	add	r3, pc, r3
   10a00:	ldr	r2, [r3, r2]
   10a04:	cmp	r2, #0
   10a08:	bxeq	lr
   10a0c:	b	107d8 <__gmon_start__@plt>
   10a10:	strdeq	r0, [r1], -ip
   10a14:	andeq	r0, r0, r8, asr #32
   10a18:	push	{r3, lr}
   10a1c:	movw	r0, #4240	; 0x1090
   10a20:	ldr	r3, [pc, #36]	; 10a4c <exit@plt+0x1e4>
   10a24:	movt	r0, #2
   10a28:	rsb	r3, r0, r3
   10a2c:	cmp	r3, #6
   10a30:	popls	{r3, pc}
   10a34:	movw	r3, #0
   10a38:	movt	r3, #0
   10a3c:	cmp	r3, #0
   10a40:	popeq	{r3, pc}
   10a44:	blx	r3
   10a48:	pop	{r3, pc}
   10a4c:	muleq	r2, r3, r0
   10a50:	push	{r3, lr}
   10a54:	movw	r0, #4240	; 0x1090
   10a58:	movw	r3, #4240	; 0x1090
   10a5c:	movt	r0, #2
   10a60:	movt	r3, #2
   10a64:	rsb	r3, r0, r3
   10a68:	asr	r3, r3, #2
   10a6c:	add	r3, r3, r3, lsr #31
   10a70:	asrs	r1, r3, #1
   10a74:	popeq	{r3, pc}
   10a78:	movw	r2, #0
   10a7c:	movt	r2, #0
   10a80:	cmp	r2, #0
   10a84:	popeq	{r3, pc}
   10a88:	blx	r2
   10a8c:	pop	{r3, pc}
   10a90:	push	{r4, lr}
   10a94:	movw	r4, #4252	; 0x109c
   10a98:	movt	r4, #2
   10a9c:	ldrb	r3, [r4]
   10aa0:	cmp	r3, #0
   10aa4:	popne	{r4, pc}
   10aa8:	bl	10a18 <exit@plt+0x1b0>
   10aac:	mov	r3, #1
   10ab0:	strb	r3, [r4]
   10ab4:	pop	{r4, pc}
   10ab8:	movw	r0, #3772	; 0xebc
   10abc:	movt	r0, #2
   10ac0:	push	{r3, lr}
   10ac4:	ldr	r3, [r0]
   10ac8:	cmp	r3, #0
   10acc:	beq	10ae4 <exit@plt+0x27c>
   10ad0:	movw	r3, #0
   10ad4:	movt	r3, #0
   10ad8:	cmp	r3, #0
   10adc:	beq	10ae4 <exit@plt+0x27c>
   10ae0:	blx	r3
   10ae4:	pop	{r3, lr}
   10ae8:	b	10a50 <exit@plt+0x1e8>
   10aec:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10af0:	mov	r7, r0
   10af4:	ldr	r6, [pc, #76]	; 10b48 <exit@plt+0x2e0>
   10af8:	mov	r8, r1
   10afc:	ldr	r5, [pc, #72]	; 10b4c <exit@plt+0x2e4>
   10b00:	mov	r9, r2
   10b04:	add	r6, pc, r6
   10b08:	bl	107a0 <abort@plt-0x20>
   10b0c:	add	r5, pc, r5
   10b10:	rsb	r6, r5, r6
   10b14:	asrs	r6, r6, #2
   10b18:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10b1c:	sub	r5, r5, #4
   10b20:	mov	r4, #0
   10b24:	add	r4, r4, #1
   10b28:	ldr	r3, [r5, #4]!
   10b2c:	mov	r0, r7
   10b30:	mov	r1, r8
   10b34:	mov	r2, r9
   10b38:	blx	r3
   10b3c:	cmp	r4, r6
   10b40:	bne	10b24 <exit@plt+0x2bc>
   10b44:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10b48:	andeq	r0, r1, ip, lsr #7
   10b4c:	andeq	r0, r1, r0, lsr #7
   10b50:	bx	lr

Disassembly of section .fini:

00010b54 <.fini>:
   10b54:	push	{r3, lr}
   10b58:	pop	{r3, pc}
