
centos-preinstalled/nice:     file format elf32-littlearm


Disassembly of section .init:

00010f08 <.init>:
   10f08:	push	{r3, lr}
   10f0c:	bl	1168c <__assert_fail@plt+0x4c4>
   10f10:	pop	{r3, pc}

Disassembly of section .plt:

00010f14 <fdopen@plt-0x14>:
   10f14:	push	{lr}		; (str lr, [sp, #-4]!)
   10f18:	ldr	lr, [pc, #4]	; 10f24 <fdopen@plt-0x4>
   10f1c:	add	lr, pc, lr
   10f20:	ldr	pc, [lr, #8]!
   10f24:	ldrdeq	r5, [r1], -ip

00010f28 <fdopen@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #220]!	; 0xdc

00010f34 <calloc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #212]!	; 0xd4

00010f40 <fputs_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #204]!	; 0xcc

00010f4c <raise@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #196]!	; 0xc4

00010f58 <strcmp@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #188]!	; 0xbc

00010f64 <strtol@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #180]!	; 0xb4

00010f70 <fflush@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #172]!	; 0xac

00010f7c <free@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #164]!	; 0xa4

00010f88 <_exit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #156]!	; 0x9c

00010f94 <memcpy@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #148]!	; 0x94

00010fa0 <execvp@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #140]!	; 0x8c

00010fac <mbsinit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #132]!	; 0x84

00010fb8 <memcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #124]!	; 0x7c

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #116]!	; 0x74

00010fd0 <__stack_chk_fail@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #108]!	; 0x6c

00010fdc <realloc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #100]!	; 0x64

00010fe8 <getpriority@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #92]!	; 0x5c

00010ff4 <textdomain@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #84]!	; 0x54

00011000 <iswprint@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #76]!	; 0x4c

0001100c <fwrite@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #68]!	; 0x44

00011018 <lseek64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #60]!	; 0x3c

00011024 <__ctype_get_mb_cur_max@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #52]!	; 0x34

00011030 <strcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #44]!	; 0x2c

0001103c <__fpending@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #36]!	; 0x24

00011048 <mbrtowc@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #28]!

00011054 <error@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #20]!

00011060 <open64@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #12]!

0001106c <getenv@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #4]!

00011078 <setpriority@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #20, 20	; 0x14000
   11080:	ldr	pc, [ip, #4092]!	; 0xffc

00011084 <malloc@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #20, 20	; 0x14000
   1108c:	ldr	pc, [ip, #4084]!	; 0xff4

00011090 <__libc_start_main@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #20, 20	; 0x14000
   11098:	ldr	pc, [ip, #4076]!	; 0xfec

0001109c <__freading@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #20, 20	; 0x14000
   110a4:	ldr	pc, [ip, #4068]!	; 0xfe4

000110a8 <__gmon_start__@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #20, 20	; 0x14000
   110b0:	ldr	pc, [ip, #4060]!	; 0xfdc

000110b4 <getopt_long@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #4052]!	; 0xfd4

000110c0 <__ctype_b_loc@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #4044]!	; 0xfcc

000110cc <exit@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #4036]!	; 0xfc4

000110d8 <strlen@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #4028]!	; 0xfbc

000110e4 <strchr@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #4020]!	; 0xfb4

000110f0 <ungetc@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #4012]!	; 0xfac

000110fc <__errno_location@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #4004]!	; 0xfa4

00011108 <__cxa_atexit@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #3996]!	; 0xf9c

00011114 <memset@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #3988]!	; 0xf94

00011120 <fscanf@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #3980]!	; 0xf8c

0001112c <__printf_chk@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #3972]!	; 0xf84

00011138 <fileno@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #3964]!	; 0xf7c

00011144 <__fprintf_chk@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #3956]!	; 0xf74

00011150 <fclose@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3948]!	; 0xf6c

0001115c <fseeko64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3940]!	; 0xf64

00011168 <__uflow@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3932]!	; 0xf5c

00011174 <setlocale@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #20, 20	; 0x14000
   1117c:	ldr	pc, [ip, #3924]!	; 0xf54

00011180 <strrchr@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #20, 20	; 0x14000
   11188:	ldr	pc, [ip, #3916]!	; 0xf4c

0001118c <nl_langinfo@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #20, 20	; 0x14000
   11194:	ldr	pc, [ip, #3908]!	; 0xf44

00011198 <bindtextdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #20, 20	; 0x14000
   111a0:	ldr	pc, [ip, #3900]!	; 0xf3c

000111a4 <strncmp@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #20, 20	; 0x14000
   111ac:	ldr	pc, [ip, #3892]!	; 0xf34

000111b0 <abort@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #20, 20	; 0x14000
   111b8:	ldr	pc, [ip, #3884]!	; 0xf2c

000111bc <close@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #20, 20	; 0x14000
   111c4:	ldr	pc, [ip, #3876]!	; 0xf24

000111c8 <__assert_fail@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #20, 20	; 0x14000
   111d0:	ldr	pc, [ip, #3868]!	; 0xf1c

Disassembly of section .text:

000111d4 <close_stdout@@Base-0x830>:
   111d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111d8:	sub	sp, sp, #28
   111dc:	ldr	r6, [pc, #1032]	; 115ec <__assert_fail@plt+0x424>
   111e0:	mov	r7, r0
   111e4:	ldr	r3, [pc, #1028]	; 115f0 <__assert_fail@plt+0x428>
   111e8:	mov	r5, r1
   111ec:	add	r6, pc, r6
   111f0:	ldr	r0, [r1]
   111f4:	ldr	r4, [pc, #1016]	; 115f4 <__assert_fail@plt+0x42c>
   111f8:	ldr	r3, [r6, r3]
   111fc:	add	r4, pc, r4
   11200:	ldr	r3, [r3]
   11204:	str	r3, [sp, #20]
   11208:	bl	11bc0 <close_stdout@@Base+0x1bc>
   1120c:	ldr	r1, [pc, #996]	; 115f8 <__assert_fail@plt+0x430>
   11210:	mov	r0, #6
   11214:	add	r1, pc, r1
   11218:	bl	11174 <setlocale@plt>
   1121c:	ldr	r1, [pc, #984]	; 115fc <__assert_fail@plt+0x434>
   11220:	mov	r0, r4
   11224:	add	r1, pc, r1
   11228:	bl	11198 <bindtextdomain@plt>
   1122c:	mov	r0, r4
   11230:	bl	10ff4 <textdomain@plt>
   11234:	ldr	r2, [pc, #964]	; 11600 <__assert_fail@plt+0x438>
   11238:	ldr	r3, [pc, #964]	; 11604 <__assert_fail@plt+0x43c>
   1123c:	mov	r1, #125	; 0x7d
   11240:	ldr	r2, [r6, r2]
   11244:	str	r1, [r2]
   11248:	ldr	r0, [r6, r3]
   1124c:	bl	14d80 <close_stdout@@Base+0x337c>
   11250:	cmp	r7, #1
   11254:	ble	11528 <__assert_fail@plt+0x360>
   11258:	ldr	fp, [pc, #936]	; 11608 <__assert_fail@plt+0x440>
   1125c:	mov	r9, #0
   11260:	ldr	sl, [pc, #932]	; 1160c <__assert_fail@plt+0x444>
   11264:	mov	r8, r9
   11268:	add	fp, pc, fp
   1126c:	mov	r4, #1
   11270:	add	sl, pc, sl
   11274:	mov	r3, fp
   11278:	mov	fp, sl
   1127c:	mov	sl, r6
   11280:	mov	r6, r9
   11284:	mov	r9, r3
   11288:	ldr	r3, [r5, r4, lsl #2]
   1128c:	lsl	r1, r4, #2
   11290:	ldrb	r2, [r3]
   11294:	cmp	r2, #45	; 0x2d
   11298:	bne	11430 <__assert_fail@plt+0x268>
   1129c:	ldrb	r2, [r3, #1]
   112a0:	cmp	r2, #45	; 0x2d
   112a4:	cmpne	r2, #43	; 0x2b
   112a8:	movne	r2, #0
   112ac:	moveq	r2, #1
   112b0:	add	r2, r3, r2
   112b4:	ldrb	r2, [r2, #1]
   112b8:	sub	r2, r2, #48	; 0x30
   112bc:	cmp	r2, #9
   112c0:	addls	r6, r3, #1
   112c4:	addls	r4, r4, #1
   112c8:	bhi	11430 <__assert_fail@plt+0x268>
   112cc:	cmp	r7, r4
   112d0:	bgt	11288 <__assert_fail@plt+0xc0>
   112d4:	mov	r9, r6
   112d8:	cmp	r9, #0
   112dc:	mov	r6, sl
   112e0:	beq	1152c <__assert_fail@plt+0x364>
   112e4:	ldr	ip, [pc, #804]	; 11610 <__assert_fail@plt+0x448>
   112e8:	mov	r0, r9
   112ec:	mov	r1, #0
   112f0:	mov	r2, #10
   112f4:	add	ip, pc, ip
   112f8:	add	r3, sp, #16
   112fc:	str	ip, [sp]
   11300:	bl	13c28 <close_stdout@@Base+0x2224>
   11304:	cmp	r0, #1
   11308:	bls	11340 <__assert_fail@plt+0x178>
   1130c:	ldr	r1, [pc, #768]	; 11614 <__assert_fail@plt+0x44c>
   11310:	mov	r2, #5
   11314:	mov	r0, #0
   11318:	add	r1, pc, r1
   1131c:	bl	10fc4 <dcgettext@plt>
   11320:	mov	r8, r0
   11324:	mov	r0, r9
   11328:	bl	13410 <close_stdout@@Base+0x1a0c>
   1132c:	mov	r2, r8
   11330:	mov	r1, #0
   11334:	mov	r3, r0
   11338:	mov	r0, #125	; 0x7d
   1133c:	bl	11054 <error@plt>
   11340:	cmp	r4, r7
   11344:	ldr	r3, [sp, #16]
   11348:	beq	114f4 <__assert_fail@plt+0x32c>
   1134c:	cmp	r3, #39	; 0x27
   11350:	movge	r3, #39	; 0x27
   11354:	mvn	r2, #38	; 0x26
   11358:	cmp	r3, r2
   1135c:	movge	sl, r3
   11360:	movlt	sl, r2
   11364:	bl	110fc <__errno_location@plt>
   11368:	mov	r7, #0
   1136c:	mov	r1, r7
   11370:	str	r7, [r0]
   11374:	mov	r8, r0
   11378:	mov	r0, r7
   1137c:	bl	10fe8 <getpriority@plt>
   11380:	cmn	r0, #1
   11384:	mov	r9, r0
   11388:	beq	1157c <__assert_fail@plt+0x3b4>
   1138c:	mov	r0, #0
   11390:	add	r2, r9, sl
   11394:	mov	r1, r0
   11398:	bl	11078 <setpriority@plt>
   1139c:	cmp	r0, #0
   113a0:	beq	113f4 <__assert_fail@plt+0x22c>
   113a4:	ldr	r7, [r8]
   113a8:	mov	r0, #0
   113ac:	ldr	r1, [pc, #612]	; 11618 <__assert_fail@plt+0x450>
   113b0:	mov	r2, #5
   113b4:	cmp	r7, #13
   113b8:	cmpne	r7, #1
   113bc:	add	r1, pc, r1
   113c0:	moveq	r9, r0
   113c4:	movne	r9, #125	; 0x7d
   113c8:	bl	10fc4 <dcgettext@plt>
   113cc:	mov	r1, r7
   113d0:	mov	r2, r0
   113d4:	mov	r0, r9
   113d8:	bl	11054 <error@plt>
   113dc:	ldr	r3, [pc, #568]	; 1161c <__assert_fail@plt+0x454>
   113e0:	ldr	r3, [r6, r3]
   113e4:	ldr	r3, [r3]
   113e8:	ldr	r3, [r3]
   113ec:	tst	r3, #32
   113f0:	bne	115b0 <__assert_fail@plt+0x3e8>
   113f4:	lsl	r6, r4, #2
   113f8:	ldr	r0, [r5, r4, lsl #2]
   113fc:	add	r1, r5, r6
   11400:	bl	10fa0 <execvp@plt>
   11404:	ldr	r1, [r8]
   11408:	ldr	r2, [pc, #528]	; 11620 <__assert_fail@plt+0x458>
   1140c:	mov	r0, #0
   11410:	cmp	r1, #2
   11414:	ldr	r3, [r5, r6]
   11418:	add	r2, pc, r2
   1141c:	movne	r4, #126	; 0x7e
   11420:	moveq	r4, #127	; 0x7f
   11424:	bl	11054 <error@plt>
   11428:	mov	r0, r4
   1142c:	bl	110cc <exit@plt>
   11430:	ldr	r2, [r5]
   11434:	sub	r3, r1, #4
   11438:	ldr	lr, [pc, #484]	; 11624 <__assert_fail@plt+0x45c>
   1143c:	add	r1, r5, r3
   11440:	rsb	r0, r4, #1
   11444:	str	r2, [r5, r3]
   11448:	add	r0, r0, r7
   1144c:	ldr	r3, [sl, lr]
   11450:	mov	r2, fp
   11454:	str	r8, [sp]
   11458:	str	r3, [sp, #12]
   1145c:	mov	r3, r9
   11460:	ldr	ip, [sp, #12]
   11464:	str	r8, [ip]
   11468:	bl	110b4 <getopt_long@plt>
   1146c:	ldr	ip, [sp, #12]
   11470:	ldr	r3, [ip]
   11474:	sub	r3, r3, #1
   11478:	add	r4, r4, r3
   1147c:	cmn	r0, #2
   11480:	beq	11520 <__assert_fail@plt+0x358>
   11484:	ble	114a8 <__assert_fail@plt+0x2e0>
   11488:	cmn	r0, #1
   1148c:	beq	112d4 <__assert_fail@plt+0x10c>
   11490:	cmp	r0, #110	; 0x6e
   11494:	bne	11518 <__assert_fail@plt+0x350>
   11498:	ldr	r3, [pc, #392]	; 11628 <__assert_fail@plt+0x460>
   1149c:	ldr	r3, [sl, r3]
   114a0:	ldr	r6, [r3]
   114a4:	b	112cc <__assert_fail@plt+0x104>
   114a8:	cmn	r0, #3
   114ac:	bne	11518 <__assert_fail@plt+0x350>
   114b0:	ldr	r1, [pc, #372]	; 1162c <__assert_fail@plt+0x464>
   114b4:	mov	ip, #0
   114b8:	ldr	r3, [pc, #368]	; 11630 <__assert_fail@plt+0x468>
   114bc:	ldr	r2, [pc, #368]	; 11634 <__assert_fail@plt+0x46c>
   114c0:	ldr	r0, [sl, r1]
   114c4:	ldr	r3, [sl, r3]
   114c8:	add	r2, pc, r2
   114cc:	ldr	r1, [pc, #356]	; 11638 <__assert_fail@plt+0x470>
   114d0:	ldr	r0, [r0]
   114d4:	ldr	r3, [r3]
   114d8:	add	r1, pc, r1
   114dc:	stm	sp, {r2, ip}
   114e0:	ldr	r2, [pc, #340]	; 1163c <__assert_fail@plt+0x474>
   114e4:	add	r2, pc, r2
   114e8:	bl	138ac <close_stdout@@Base+0x1ea8>
   114ec:	mov	r0, #0
   114f0:	bl	110cc <exit@plt>
   114f4:	ldr	r1, [pc, #324]	; 11640 <__assert_fail@plt+0x478>
   114f8:	mov	r2, #5
   114fc:	mov	r0, #0
   11500:	add	r1, pc, r1
   11504:	bl	10fc4 <dcgettext@plt>
   11508:	mov	r2, r0
   1150c:	mov	r0, #0
   11510:	mov	r1, r0
   11514:	bl	11054 <error@plt>
   11518:	mov	r0, #125	; 0x7d
   1151c:	bl	11784 <__assert_fail@plt+0x5bc>
   11520:	mov	r0, #0
   11524:	bl	11784 <__assert_fail@plt+0x5bc>
   11528:	mov	r4, #1
   1152c:	cmp	r4, r7
   11530:	movne	sl, #10
   11534:	bne	11364 <__assert_fail@plt+0x19c>
   11538:	bl	110fc <__errno_location@plt>
   1153c:	mov	r4, #0
   11540:	mov	r1, r4
   11544:	str	r4, [r0]
   11548:	mov	r6, r0
   1154c:	mov	r0, r4
   11550:	bl	10fe8 <getpriority@plt>
   11554:	cmn	r0, #1
   11558:	mov	r5, r0
   1155c:	beq	115b8 <__assert_fail@plt+0x3f0>
   11560:	ldr	r1, [pc, #220]	; 11644 <__assert_fail@plt+0x47c>
   11564:	mov	r2, r5
   11568:	mov	r0, #1
   1156c:	add	r1, pc, r1
   11570:	bl	1112c <__printf_chk@plt>
   11574:	mov	r0, #0
   11578:	bl	110cc <exit@plt>
   1157c:	ldr	fp, [r8]
   11580:	cmp	fp, r7
   11584:	beq	1138c <__assert_fail@plt+0x1c4>
   11588:	ldr	r1, [pc, #184]	; 11648 <__assert_fail@plt+0x480>
   1158c:	mov	r0, r7
   11590:	mov	r2, #5
   11594:	add	r1, pc, r1
   11598:	bl	10fc4 <dcgettext@plt>
   1159c:	mov	r1, fp
   115a0:	mov	r2, r0
   115a4:	mov	r0, #125	; 0x7d
   115a8:	bl	11054 <error@plt>
   115ac:	b	1138c <__assert_fail@plt+0x1c4>
   115b0:	mov	r0, #125	; 0x7d
   115b4:	bl	110cc <exit@plt>
   115b8:	ldr	r6, [r6]
   115bc:	cmp	r6, r4
   115c0:	beq	11560 <__assert_fail@plt+0x398>
   115c4:	ldr	r1, [pc, #128]	; 1164c <__assert_fail@plt+0x484>
   115c8:	mov	r0, r4
   115cc:	mov	r2, #5
   115d0:	add	r1, pc, r1
   115d4:	bl	10fc4 <dcgettext@plt>
   115d8:	mov	r1, r6
   115dc:	mov	r2, r0
   115e0:	mov	r0, #125	; 0x7d
   115e4:	bl	11054 <error@plt>
   115e8:	b	11560 <__assert_fail@plt+0x398>
   115ec:	andeq	r4, r1, ip, lsl #28
   115f0:	strdeq	r0, [r0], -r4
   115f4:	andeq	r3, r0, r4, asr #29
   115f8:	andeq	r3, r0, ip, ror #30
   115fc:	andeq	r3, r0, r0, ror #30
   11600:	andeq	r0, r0, r4, lsl r1
   11604:	andeq	r0, r0, r4, lsl #2
   11608:	andeq	r4, r1, r4, lsr ip
   1160c:	andeq	r3, r0, r8, lsr #30
   11610:	andeq	r3, r0, ip, lsl #29
   11614:	muleq	r0, r4, lr
   11618:	andeq	r3, r0, ip, asr #28
   1161c:	andeq	r0, r0, r0, lsl #2
   11620:	andeq	r3, r0, ip, lsr #28
   11624:	strdeq	r0, [r0], -r8
   11628:	andeq	r0, r0, r8, lsr #2
   1162c:	andeq	r0, r0, r0, lsl r1
   11630:	strdeq	r0, [r0], -ip
   11634:	ldrdeq	r3, [r0], -r4
   11638:	andeq	r3, r0, r4, asr #23
   1163c:	ldrdeq	r3, [r0], -r8
   11640:	andeq	r3, r0, r4, asr #25
   11644:	muleq	r0, r8, ip
   11648:	andeq	r3, r0, ip, asr ip
   1164c:	andeq	r3, r0, r0, lsr #24
   11650:	mov	fp, #0
   11654:	mov	lr, #0
   11658:	pop	{r1}		; (ldr r1, [sp], #4)
   1165c:	mov	r2, sp
   11660:	push	{r2}		; (str r2, [sp, #-4]!)
   11664:	push	{r0}		; (str r0, [sp, #-4]!)
   11668:	ldr	ip, [pc, #16]	; 11680 <__assert_fail@plt+0x4b8>
   1166c:	push	{ip}		; (str ip, [sp, #-4]!)
   11670:	ldr	r0, [pc, #12]	; 11684 <__assert_fail@plt+0x4bc>
   11674:	ldr	r3, [pc, #12]	; 11688 <__assert_fail@plt+0x4c0>
   11678:	bl	11090 <__libc_start_main@plt>
   1167c:	bl	111b0 <abort@plt>
   11680:	andeq	r4, r1, ip, ror sp
   11684:	ldrdeq	r1, [r1], -r4
   11688:	andeq	r4, r1, r8, lsl sp
   1168c:	ldr	r3, [pc, #20]	; 116a8 <__assert_fail@plt+0x4e0>
   11690:	ldr	r2, [pc, #20]	; 116ac <__assert_fail@plt+0x4e4>
   11694:	add	r3, pc, r3
   11698:	ldr	r2, [r3, r2]
   1169c:	cmp	r2, #0
   116a0:	bxeq	lr
   116a4:	b	110a8 <__gmon_start__@plt>
   116a8:	andeq	r4, r1, r4, ror #18
   116ac:	andeq	r0, r0, r8, lsl #2
   116b0:	push	{r3, lr}
   116b4:	movw	r0, #24952	; 0x6178
   116b8:	ldr	r3, [pc, #36]	; 116e4 <__assert_fail@plt+0x51c>
   116bc:	movt	r0, #2
   116c0:	rsb	r3, r0, r3
   116c4:	cmp	r3, #6
   116c8:	popls	{r3, pc}
   116cc:	movw	r3, #0
   116d0:	movt	r3, #0
   116d4:	cmp	r3, #0
   116d8:	popeq	{r3, pc}
   116dc:	blx	r3
   116e0:	pop	{r3, pc}
   116e4:	andeq	r6, r2, fp, ror r1
   116e8:	push	{r3, lr}
   116ec:	movw	r0, #24952	; 0x6178
   116f0:	movw	r3, #24952	; 0x6178
   116f4:	movt	r0, #2
   116f8:	movt	r3, #2
   116fc:	rsb	r3, r0, r3
   11700:	asr	r3, r3, #2
   11704:	add	r3, r3, r3, lsr #31
   11708:	asrs	r1, r3, #1
   1170c:	popeq	{r3, pc}
   11710:	movw	r2, #0
   11714:	movt	r2, #0
   11718:	cmp	r2, #0
   1171c:	popeq	{r3, pc}
   11720:	blx	r2
   11724:	pop	{r3, pc}
   11728:	push	{r4, lr}
   1172c:	movw	r4, #24952	; 0x6178
   11730:	movt	r4, #2
   11734:	ldrb	r3, [r4]
   11738:	cmp	r3, #0
   1173c:	popne	{r4, pc}
   11740:	bl	116b0 <__assert_fail@plt+0x4e8>
   11744:	mov	r3, #1
   11748:	strb	r3, [r4]
   1174c:	pop	{r4, pc}
   11750:	movw	r0, #24224	; 0x5ea0
   11754:	movt	r0, #2
   11758:	push	{r3, lr}
   1175c:	ldr	r3, [r0]
   11760:	cmp	r3, #0
   11764:	beq	1177c <__assert_fail@plt+0x5b4>
   11768:	movw	r3, #0
   1176c:	movt	r3, #0
   11770:	cmp	r3, #0
   11774:	beq	1177c <__assert_fail@plt+0x5b4>
   11778:	blx	r3
   1177c:	pop	{r3, lr}
   11780:	b	116e8 <__assert_fail@plt+0x520>
   11784:	push	{r4, r5, r6, lr}
   11788:	subs	r4, r0, #0
   1178c:	ldr	r5, [pc, #508]	; 11990 <__assert_fail@plt+0x7c8>
   11790:	add	r5, pc, r5
   11794:	beq	117dc <__assert_fail@plt+0x614>
   11798:	ldr	r3, [pc, #500]	; 11994 <__assert_fail@plt+0x7cc>
   1179c:	mov	r2, #5
   117a0:	ldr	r1, [pc, #496]	; 11998 <__assert_fail@plt+0x7d0>
   117a4:	mov	r0, #0
   117a8:	ldr	r3, [r5, r3]
   117ac:	add	r1, pc, r1
   117b0:	ldr	r6, [r3]
   117b4:	bl	10fc4 <dcgettext@plt>
   117b8:	ldr	r3, [pc, #476]	; 1199c <__assert_fail@plt+0x7d4>
   117bc:	mov	r1, #1
   117c0:	ldr	r3, [r5, r3]
   117c4:	ldr	r3, [r3]
   117c8:	mov	r2, r0
   117cc:	mov	r0, r6
   117d0:	bl	11144 <__fprintf_chk@plt>
   117d4:	mov	r0, r4
   117d8:	bl	110cc <exit@plt>
   117dc:	ldr	r1, [pc, #444]	; 119a0 <__assert_fail@plt+0x7d8>
   117e0:	mov	r2, #5
   117e4:	add	r1, pc, r1
   117e8:	bl	10fc4 <dcgettext@plt>
   117ec:	ldr	r3, [pc, #424]	; 1199c <__assert_fail@plt+0x7d4>
   117f0:	ldr	r6, [r5, r3]
   117f4:	ldr	r2, [r6]
   117f8:	mov	r1, r0
   117fc:	mov	r0, #1
   11800:	bl	1112c <__printf_chk@plt>
   11804:	ldr	r1, [pc, #408]	; 119a4 <__assert_fail@plt+0x7dc>
   11808:	mov	r2, #5
   1180c:	mov	r0, r4
   11810:	add	r1, pc, r1
   11814:	bl	10fc4 <dcgettext@plt>
   11818:	mov	r3, #19
   1181c:	mvn	r2, #19
   11820:	mov	r1, r0
   11824:	mov	r0, #1
   11828:	bl	1112c <__printf_chk@plt>
   1182c:	ldr	r1, [pc, #372]	; 119a8 <__assert_fail@plt+0x7e0>
   11830:	mov	r2, #5
   11834:	mov	r0, r4
   11838:	add	r1, pc, r1
   1183c:	bl	10fc4 <dcgettext@plt>
   11840:	ldr	r3, [pc, #356]	; 119ac <__assert_fail@plt+0x7e4>
   11844:	ldr	r5, [r5, r3]
   11848:	ldr	r1, [r5]
   1184c:	bl	10f40 <fputs_unlocked@plt>
   11850:	ldr	r1, [pc, #344]	; 119b0 <__assert_fail@plt+0x7e8>
   11854:	mov	r2, #5
   11858:	mov	r0, r4
   1185c:	add	r1, pc, r1
   11860:	bl	10fc4 <dcgettext@plt>
   11864:	ldr	r1, [r5]
   11868:	bl	10f40 <fputs_unlocked@plt>
   1186c:	ldr	r1, [pc, #320]	; 119b4 <__assert_fail@plt+0x7ec>
   11870:	mov	r2, #5
   11874:	mov	r0, r4
   11878:	add	r1, pc, r1
   1187c:	bl	10fc4 <dcgettext@plt>
   11880:	ldr	r1, [r5]
   11884:	bl	10f40 <fputs_unlocked@plt>
   11888:	ldr	r1, [pc, #296]	; 119b8 <__assert_fail@plt+0x7f0>
   1188c:	mov	r2, #5
   11890:	mov	r0, r4
   11894:	add	r1, pc, r1
   11898:	bl	10fc4 <dcgettext@plt>
   1189c:	ldr	r1, [r5]
   118a0:	bl	10f40 <fputs_unlocked@plt>
   118a4:	ldr	r1, [pc, #272]	; 119bc <__assert_fail@plt+0x7f4>
   118a8:	mov	r2, #5
   118ac:	mov	r0, r4
   118b0:	add	r1, pc, r1
   118b4:	bl	10fc4 <dcgettext@plt>
   118b8:	ldr	r2, [pc, #256]	; 119c0 <__assert_fail@plt+0x7f8>
   118bc:	add	r2, pc, r2
   118c0:	mov	r1, r0
   118c4:	mov	r0, #1
   118c8:	bl	1112c <__printf_chk@plt>
   118cc:	ldr	r1, [pc, #240]	; 119c4 <__assert_fail@plt+0x7fc>
   118d0:	mov	r2, #5
   118d4:	mov	r0, r4
   118d8:	add	r1, pc, r1
   118dc:	bl	10fc4 <dcgettext@plt>
   118e0:	ldr	r2, [pc, #224]	; 119c8 <__assert_fail@plt+0x800>
   118e4:	ldr	r3, [pc, #224]	; 119cc <__assert_fail@plt+0x804>
   118e8:	add	r2, pc, r2
   118ec:	add	r3, pc, r3
   118f0:	mov	r1, r0
   118f4:	mov	r0, #1
   118f8:	bl	1112c <__printf_chk@plt>
   118fc:	mov	r0, #5
   11900:	mov	r1, r4
   11904:	bl	11174 <setlocale@plt>
   11908:	cmp	r0, #0
   1190c:	beq	11928 <__assert_fail@plt+0x760>
   11910:	ldr	r1, [pc, #184]	; 119d0 <__assert_fail@plt+0x808>
   11914:	mov	r2, #3
   11918:	add	r1, pc, r1
   1191c:	bl	111a4 <strncmp@plt>
   11920:	cmp	r0, #0
   11924:	bne	1195c <__assert_fail@plt+0x794>
   11928:	ldr	r1, [pc, #164]	; 119d4 <__assert_fail@plt+0x80c>
   1192c:	mov	r2, #5
   11930:	mov	r0, #0
   11934:	add	r1, pc, r1
   11938:	bl	10fc4 <dcgettext@plt>
   1193c:	mov	r5, r0
   11940:	ldr	r0, [r6]
   11944:	bl	11b1c <close_stdout@@Base+0x118>
   11948:	mov	r1, r5
   1194c:	mov	r2, r0
   11950:	mov	r0, #1
   11954:	bl	1112c <__printf_chk@plt>
   11958:	b	117d4 <__assert_fail@plt+0x60c>
   1195c:	ldr	r1, [pc, #116]	; 119d8 <__assert_fail@plt+0x810>
   11960:	mov	r2, #5
   11964:	mov	r0, r4
   11968:	add	r1, pc, r1
   1196c:	bl	10fc4 <dcgettext@plt>
   11970:	mov	r5, r0
   11974:	ldr	r0, [r6]
   11978:	bl	11b1c <close_stdout@@Base+0x118>
   1197c:	mov	r1, r5
   11980:	mov	r2, r0
   11984:	mov	r0, #1
   11988:	bl	1112c <__printf_chk@plt>
   1198c:	b	11928 <__assert_fail@plt+0x760>
   11990:	andeq	r4, r1, r8, ror #16
   11994:	andeq	r0, r0, r0, lsl #2
   11998:	andeq	r3, r0, r8, lsl #12
   1199c:	andeq	r0, r0, ip, lsl r1
   119a0:	strdeq	r3, [r0], -r8
   119a4:	strdeq	r3, [r0], -r4
   119a8:	andeq	r3, r0, ip, lsr #13
   119ac:	andeq	r0, r0, r0, lsl r1
   119b0:	ldrdeq	r3, [r0], -r4
   119b4:	strdeq	r3, [r0], -ip
   119b8:	andeq	r3, r0, r0, lsl r7
   119bc:	andeq	r3, r0, ip, lsr #14
   119c0:	andeq	r3, r0, r0, ror #15
   119c4:	andeq	r3, r0, ip, asr #15
   119c8:	ldrdeq	r3, [r0], -r4
   119cc:	andeq	r3, r0, r0, ror #15
   119d0:	ldrdeq	r3, [r0], -ip
   119d4:	andeq	r3, r0, ip, lsl #16
   119d8:	muleq	r0, r0, r7
   119dc:	ldr	r3, [pc, #8]	; 119ec <__assert_fail@plt+0x824>
   119e0:	add	r3, pc, r3
   119e4:	str	r0, [r3]
   119e8:	bx	lr
   119ec:	muleq	r1, r4, r7
   119f0:	ldr	r3, [pc, #8]	; 11a00 <__assert_fail@plt+0x838>
   119f4:	add	r3, pc, r3
   119f8:	strb	r0, [r3, #4]
   119fc:	bx	lr
   11a00:	andeq	r4, r1, r0, lsl #15

00011a04 <close_stdout@@Base>:
   11a04:	push	{r4, r5, r6, r7, lr}
   11a08:	sub	sp, sp, #12
   11a0c:	ldr	r4, [pc, #228]	; 11af8 <close_stdout@@Base+0xf4>
   11a10:	ldr	r3, [pc, #228]	; 11afc <close_stdout@@Base+0xf8>
   11a14:	add	r4, pc, r4
   11a18:	ldr	r3, [r4, r3]
   11a1c:	ldr	r0, [r3]
   11a20:	bl	14274 <close_stdout@@Base+0x2870>
   11a24:	cmp	r0, #0
   11a28:	beq	11a50 <close_stdout@@Base+0x4c>
   11a2c:	ldr	r3, [pc, #204]	; 11b00 <close_stdout@@Base+0xfc>
   11a30:	add	r3, pc, r3
   11a34:	ldrb	r3, [r3, #4]
   11a38:	cmp	r3, #0
   11a3c:	beq	11a70 <close_stdout@@Base+0x6c>
   11a40:	bl	110fc <__errno_location@plt>
   11a44:	ldr	r3, [r0]
   11a48:	cmp	r3, #32
   11a4c:	bne	11a70 <close_stdout@@Base+0x6c>
   11a50:	ldr	r3, [pc, #172]	; 11b04 <close_stdout@@Base+0x100>
   11a54:	ldr	r3, [r4, r3]
   11a58:	ldr	r0, [r3]
   11a5c:	bl	14274 <close_stdout@@Base+0x2870>
   11a60:	cmp	r0, #0
   11a64:	bne	11ac4 <close_stdout@@Base+0xc0>
   11a68:	add	sp, sp, #12
   11a6c:	pop	{r4, r5, r6, r7, pc}
   11a70:	ldr	r1, [pc, #144]	; 11b08 <close_stdout@@Base+0x104>
   11a74:	mov	r0, #0
   11a78:	mov	r2, #5
   11a7c:	add	r1, pc, r1
   11a80:	bl	10fc4 <dcgettext@plt>
   11a84:	ldr	r3, [pc, #128]	; 11b0c <close_stdout@@Base+0x108>
   11a88:	ldr	r5, [pc, r3]
   11a8c:	cmp	r5, #0
   11a90:	mov	r6, r0
   11a94:	beq	11ad4 <close_stdout@@Base+0xd0>
   11a98:	bl	110fc <__errno_location@plt>
   11a9c:	ldr	r7, [r0]
   11aa0:	mov	r0, r5
   11aa4:	bl	132bc <close_stdout@@Base+0x18b8>
   11aa8:	ldr	r2, [pc, #96]	; 11b10 <close_stdout@@Base+0x10c>
   11aac:	str	r6, [sp]
   11ab0:	mov	r1, r7
   11ab4:	add	r2, pc, r2
   11ab8:	mov	r3, r0
   11abc:	mov	r0, #0
   11ac0:	bl	11054 <error@plt>
   11ac4:	ldr	r3, [pc, #72]	; 11b14 <close_stdout@@Base+0x110>
   11ac8:	ldr	r3, [r4, r3]
   11acc:	ldr	r0, [r3]
   11ad0:	bl	10f88 <_exit@plt>
   11ad4:	bl	110fc <__errno_location@plt>
   11ad8:	ldr	r2, [pc, #56]	; 11b18 <close_stdout@@Base+0x114>
   11adc:	add	r2, pc, r2
   11ae0:	mov	r3, r0
   11ae4:	mov	r0, r5
   11ae8:	ldr	r1, [r3]
   11aec:	mov	r3, r6
   11af0:	bl	11054 <error@plt>
   11af4:	b	11ac4 <close_stdout@@Base+0xc0>
   11af8:	andeq	r4, r1, r4, ror #11
   11afc:	andeq	r0, r0, r0, lsl r1
   11b00:	andeq	r4, r1, r4, asr #14
   11b04:	andeq	r0, r0, r0, lsl #2
   11b08:			; <UNDEFINED> instruction: 0x000037b8
   11b0c:	andeq	r4, r1, ip, ror #13
   11b10:	andeq	r3, r0, ip, lsl #15
   11b14:	andeq	r0, r0, r4, lsl r1
   11b18:	andeq	r3, r0, r8, ror #14
   11b1c:	ldrb	r3, [r0]
   11b20:	cmp	r3, #47	; 0x2f
   11b24:	bne	11b40 <close_stdout@@Base+0x13c>
   11b28:	add	r2, r0, #1
   11b2c:	mov	r0, r2
   11b30:	add	r2, r2, #1
   11b34:	ldrb	r3, [r0]
   11b38:	cmp	r3, #47	; 0x2f
   11b3c:	beq	11b2c <close_stdout@@Base+0x128>
   11b40:	cmp	r3, #0
   11b44:	bxeq	lr
   11b48:	mov	r2, r0
   11b4c:	mov	r1, #0
   11b50:	cmp	r3, #47	; 0x2f
   11b54:	moveq	r1, #1
   11b58:	beq	11b68 <close_stdout@@Base+0x164>
   11b5c:	cmp	r1, #0
   11b60:	movne	r0, r2
   11b64:	movne	r1, #0
   11b68:	ldrb	r3, [r2, #1]!
   11b6c:	cmp	r3, #0
   11b70:	bne	11b50 <close_stdout@@Base+0x14c>
   11b74:	bx	lr
   11b78:	push	{r4, lr}
   11b7c:	mov	r4, r0
   11b80:	bl	110d8 <strlen@plt>
   11b84:	cmp	r0, #1
   11b88:	popls	{r4, pc}
   11b8c:	sub	r3, r0, #1
   11b90:	ldrb	r2, [r4, r3]
   11b94:	cmp	r2, #47	; 0x2f
   11b98:	popne	{r4, pc}
   11b9c:	mov	r0, r3
   11ba0:	cmp	r0, #1
   11ba4:	sub	r3, r3, #1
   11ba8:	beq	11bbc <close_stdout@@Base+0x1b8>
   11bac:	ldrb	r2, [r4, r3]
   11bb0:	cmp	r2, #47	; 0x2f
   11bb4:	popne	{r4, pc}
   11bb8:	b	11b9c <close_stdout@@Base+0x198>
   11bbc:	pop	{r4, pc}
   11bc0:	push	{r3, r4, r5, r6, r7, lr}
   11bc4:	subs	r4, r0, #0
   11bc8:	ldr	r5, [pc, #172]	; 11c7c <close_stdout@@Base+0x278>
   11bcc:	add	r5, pc, r5
   11bd0:	beq	11c58 <close_stdout@@Base+0x254>
   11bd4:	mov	r1, #47	; 0x2f
   11bd8:	bl	11180 <strrchr@plt>
   11bdc:	subs	r6, r0, #0
   11be0:	beq	11c3c <close_stdout@@Base+0x238>
   11be4:	add	r7, r6, #1
   11be8:	rsb	r3, r4, r7
   11bec:	cmp	r3, #6
   11bf0:	ble	11c3c <close_stdout@@Base+0x238>
   11bf4:	ldr	r1, [pc, #132]	; 11c80 <close_stdout@@Base+0x27c>
   11bf8:	sub	r0, r6, #6
   11bfc:	mov	r2, #7
   11c00:	add	r1, pc, r1
   11c04:	bl	111a4 <strncmp@plt>
   11c08:	cmp	r0, #0
   11c0c:	bne	11c3c <close_stdout@@Base+0x238>
   11c10:	ldr	r1, [pc, #108]	; 11c84 <close_stdout@@Base+0x280>
   11c14:	mov	r0, r7
   11c18:	mov	r2, #3
   11c1c:	add	r1, pc, r1
   11c20:	bl	111a4 <strncmp@plt>
   11c24:	cmp	r0, #0
   11c28:	movne	r4, r7
   11c2c:	ldreq	r3, [pc, #84]	; 11c88 <close_stdout@@Base+0x284>
   11c30:	addeq	r4, r6, #4
   11c34:	ldreq	r3, [r5, r3]
   11c38:	streq	r4, [r3]
   11c3c:	ldr	r2, [pc, #72]	; 11c8c <close_stdout@@Base+0x288>
   11c40:	ldr	r3, [pc, #72]	; 11c90 <close_stdout@@Base+0x28c>
   11c44:	ldr	r2, [r5, r2]
   11c48:	str	r4, [r2]
   11c4c:	ldr	r3, [r5, r3]
   11c50:	str	r4, [r3]
   11c54:	pop	{r3, r4, r5, r6, r7, pc}
   11c58:	ldr	r3, [pc, #52]	; 11c94 <close_stdout@@Base+0x290>
   11c5c:	mov	r1, #1
   11c60:	ldr	r0, [pc, #48]	; 11c98 <close_stdout@@Base+0x294>
   11c64:	mov	r2, #55	; 0x37
   11c68:	ldr	r3, [r5, r3]
   11c6c:	add	r0, pc, r0
   11c70:	ldr	r3, [r3]
   11c74:	bl	1100c <fwrite@plt>
   11c78:	bl	111b0 <abort@plt>
   11c7c:	andeq	r4, r1, ip, lsr #8
   11c80:	andeq	r3, r0, r0, lsl #13
   11c84:	andeq	r3, r0, ip, ror #12
   11c88:	andeq	r0, r0, r4, lsr #2
   11c8c:	andeq	r0, r0, ip, lsl r1
   11c90:	andeq	r0, r0, r8, lsl r1
   11c94:	andeq	r0, r0, r0, lsl #2
   11c98:	ldrdeq	r3, [r0], -ip
   11c9c:	push	{r3, lr}
   11ca0:	mov	r3, r0
   11ca4:	mov	r2, #0
   11ca8:	cmp	r1, #8
   11cac:	str	r2, [r3], #4
   11cb0:	add	r3, r3, #4
   11cb4:	str	r2, [r0, #4]
   11cb8:	str	r2, [r3], #4
   11cbc:	str	r2, [r3], #4
   11cc0:	str	r2, [r3], #4
   11cc4:	str	r2, [r3], #4
   11cc8:	str	r2, [r3], #4
   11ccc:	str	r2, [r3], #4
   11cd0:	str	r2, [r3], #4
   11cd4:	str	r2, [r3], #4
   11cd8:	str	r2, [r3], #4
   11cdc:	str	r2, [r3]
   11ce0:	beq	11cec <close_stdout@@Base+0x2e8>
   11ce4:	str	r1, [r0]
   11ce8:	pop	{r3, pc}
   11cec:	bl	111b0 <abort@plt>
   11cf0:	push	{r4, r5, r6, lr}
   11cf4:	mov	r4, r0
   11cf8:	mov	r6, r1
   11cfc:	mov	r0, #0
   11d00:	mov	r1, r4
   11d04:	mov	r2, #5
   11d08:	bl	10fc4 <dcgettext@plt>
   11d0c:	cmp	r0, r4
   11d10:	mov	r5, r0
   11d14:	beq	11d1c <close_stdout@@Base+0x318>
   11d18:	pop	{r4, r5, r6, pc}
   11d1c:	bl	142f4 <close_stdout@@Base+0x28f0>
   11d20:	ldrb	r3, [r0]
   11d24:	bic	r3, r3, #32
   11d28:	cmp	r3, #85	; 0x55
   11d2c:	bne	11da0 <close_stdout@@Base+0x39c>
   11d30:	ldrb	r3, [r0, #1]
   11d34:	bic	r3, r3, #32
   11d38:	cmp	r3, #84	; 0x54
   11d3c:	bne	11d8c <close_stdout@@Base+0x388>
   11d40:	ldrb	r3, [r0, #2]
   11d44:	bic	r3, r3, #32
   11d48:	cmp	r3, #70	; 0x46
   11d4c:	bne	11d8c <close_stdout@@Base+0x388>
   11d50:	ldrb	r3, [r0, #3]
   11d54:	cmp	r3, #45	; 0x2d
   11d58:	bne	11d8c <close_stdout@@Base+0x388>
   11d5c:	ldrb	r3, [r0, #4]
   11d60:	cmp	r3, #56	; 0x38
   11d64:	bne	11d8c <close_stdout@@Base+0x388>
   11d68:	ldrb	r3, [r0, #5]
   11d6c:	cmp	r3, #0
   11d70:	bne	11d8c <close_stdout@@Base+0x388>
   11d74:	ldrb	r3, [r5]
   11d78:	cmp	r3, #96	; 0x60
   11d7c:	beq	11e18 <close_stdout@@Base+0x414>
   11d80:	ldr	r0, [pc, #180]	; 11e3c <close_stdout@@Base+0x438>
   11d84:	add	r0, pc, r0
   11d88:	pop	{r4, r5, r6, pc}
   11d8c:	cmp	r6, #7
   11d90:	beq	11e24 <close_stdout@@Base+0x420>
   11d94:	ldr	r0, [pc, #164]	; 11e40 <close_stdout@@Base+0x43c>
   11d98:	add	r0, pc, r0
   11d9c:	pop	{r4, r5, r6, pc}
   11da0:	cmp	r3, #71	; 0x47
   11da4:	bne	11d8c <close_stdout@@Base+0x388>
   11da8:	ldrb	r3, [r0, #1]
   11dac:	bic	r3, r3, #32
   11db0:	cmp	r3, #66	; 0x42
   11db4:	bne	11d8c <close_stdout@@Base+0x388>
   11db8:	ldrb	r3, [r0, #2]
   11dbc:	cmp	r3, #49	; 0x31
   11dc0:	bne	11d8c <close_stdout@@Base+0x388>
   11dc4:	ldrb	r3, [r0, #3]
   11dc8:	cmp	r3, #56	; 0x38
   11dcc:	bne	11d8c <close_stdout@@Base+0x388>
   11dd0:	ldrb	r3, [r0, #4]
   11dd4:	cmp	r3, #48	; 0x30
   11dd8:	bne	11d8c <close_stdout@@Base+0x388>
   11ddc:	ldrb	r3, [r0, #5]
   11de0:	cmp	r3, #51	; 0x33
   11de4:	bne	11d8c <close_stdout@@Base+0x388>
   11de8:	ldrb	r3, [r0, #6]
   11dec:	cmp	r3, #48	; 0x30
   11df0:	bne	11d8c <close_stdout@@Base+0x388>
   11df4:	ldrb	r3, [r0, #7]
   11df8:	cmp	r3, #0
   11dfc:	bne	11d8c <close_stdout@@Base+0x388>
   11e00:	ldrb	r3, [r5]
   11e04:	cmp	r3, #96	; 0x60
   11e08:	beq	11e30 <close_stdout@@Base+0x42c>
   11e0c:	ldr	r0, [pc, #48]	; 11e44 <close_stdout@@Base+0x440>
   11e10:	add	r0, pc, r0
   11e14:	pop	{r4, r5, r6, pc}
   11e18:	ldr	r0, [pc, #40]	; 11e48 <close_stdout@@Base+0x444>
   11e1c:	add	r0, pc, r0
   11e20:	pop	{r4, r5, r6, pc}
   11e24:	ldr	r0, [pc, #32]	; 11e4c <close_stdout@@Base+0x448>
   11e28:	add	r0, pc, r0
   11e2c:	pop	{r4, r5, r6, pc}
   11e30:	ldr	r0, [pc, #24]	; 11e50 <close_stdout@@Base+0x44c>
   11e34:	add	r0, pc, r0
   11e38:	pop	{r4, r5, r6, pc}
   11e3c:	andeq	r3, r0, r8, lsr #10
   11e40:	andeq	r3, r0, ip, lsl r5
   11e44:	andeq	r3, r0, r0, lsr #9
   11e48:	andeq	r3, r0, r4, lsr #9
   11e4c:	muleq	r0, r0, r4
   11e50:	andeq	r3, r0, r8, lsl #9
   11e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e58:	sub	sp, sp, #124	; 0x7c
   11e5c:	ldr	ip, [pc, #3304]	; 12b4c <close_stdout@@Base+0x1148>
   11e60:	mov	sl, r1
   11e64:	str	r0, [sp, #40]	; 0x28
   11e68:	mov	r8, r3
   11e6c:	ldr	r0, [pc, #3292]	; 12b50 <close_stdout@@Base+0x114c>
   11e70:	add	ip, pc, ip
   11e74:	str	r2, [sp, #32]
   11e78:	ldr	r1, [sp, #164]	; 0xa4
   11e7c:	mov	r3, ip
   11e80:	ldr	r0, [ip, r0]
   11e84:	ldr	r2, [sp, #172]	; 0xac
   11e88:	ubfx	r1, r1, #1, #1
   11e8c:	str	r1, [sp, #36]	; 0x24
   11e90:	str	r0, [sp, #56]	; 0x38
   11e94:	ldr	r0, [sp, #168]	; 0xa8
   11e98:	ldr	r1, [sp, #176]	; 0xb0
   11e9c:	str	r2, [sp, #72]	; 0x48
   11ea0:	str	r0, [sp, #48]	; 0x30
   11ea4:	ldr	r0, [sp, #56]	; 0x38
   11ea8:	str	r1, [sp, #68]	; 0x44
   11eac:	ldr	r3, [r0]
   11eb0:	str	r3, [sp, #116]	; 0x74
   11eb4:	bl	11024 <__ctype_get_mb_cur_max@plt>
   11eb8:	ldr	r2, [sp, #160]	; 0xa0
   11ebc:	str	r0, [sp, #64]	; 0x40
   11ec0:	cmp	r2, #8
   11ec4:	addls	pc, pc, r2, lsl #2
   11ec8:	b	12a28 <close_stdout@@Base+0x1024>
   11ecc:	b	11ef0 <close_stdout@@Base+0x4ec>
   11ed0:	b	12740 <close_stdout@@Base+0xd3c>
   11ed4:	b	12770 <close_stdout@@Base+0xd6c>
   11ed8:	b	12620 <close_stdout@@Base+0xc1c>
   11edc:	b	12660 <close_stdout@@Base+0xc5c>
   11ee0:	b	1268c <close_stdout@@Base+0xc88>
   11ee4:	b	126ac <close_stdout@@Base+0xca8>
   11ee8:	b	126ac <close_stdout@@Base+0xca8>
   11eec:	b	126ac <close_stdout@@Base+0xca8>
   11ef0:	mov	r2, #0
   11ef4:	str	r2, [sp, #36]	; 0x24
   11ef8:	mov	r9, r2
   11efc:	str	r2, [sp, #24]
   11f00:	str	r2, [sp, #28]
   11f04:	str	r2, [sp, #52]	; 0x34
   11f08:	ldr	r0, [sp, #36]	; 0x24
   11f0c:	mov	fp, #0
   11f10:	ldr	r1, [sp, #24]
   11f14:	eor	r2, r0, #1
   11f18:	eor	r3, r1, #1
   11f1c:	and	r3, r2, r3
   11f20:	and	r2, r1, r0
   11f24:	str	r3, [sp, #44]	; 0x2c
   11f28:	str	r2, [sp, #76]	; 0x4c
   11f2c:	cmn	r8, #1
   11f30:	beq	122b0 <close_stdout@@Base+0x8ac>
   11f34:	subs	r3, fp, r8
   11f38:	movne	r3, #1
   11f3c:	cmp	r3, #0
   11f40:	beq	122c8 <close_stdout@@Base+0x8c4>
   11f44:	ldr	r3, [sp, #28]
   11f48:	ldr	r0, [sp, #24]
   11f4c:	adds	r7, r3, #0
   11f50:	movne	r7, #1
   11f54:	ands	r6, r7, r0
   11f58:	bne	127b4 <close_stdout@@Base+0xdb0>
   11f5c:	ldr	r1, [sp, #32]
   11f60:	add	r5, r1, fp
   11f64:	ldrb	r4, [r5]
   11f68:	cmp	r4, #126	; 0x7e
   11f6c:	addls	pc, pc, r4, lsl #2
   11f70:	b	12534 <close_stdout@@Base+0xb30>
   11f74:	b	12440 <close_stdout@@Base+0xa3c>
   11f78:	b	12534 <close_stdout@@Base+0xb30>
   11f7c:	b	12534 <close_stdout@@Base+0xb30>
   11f80:	b	12534 <close_stdout@@Base+0xb30>
   11f84:	b	12534 <close_stdout@@Base+0xb30>
   11f88:	b	12534 <close_stdout@@Base+0xb30>
   11f8c:	b	12534 <close_stdout@@Base+0xb30>
   11f90:	b	12428 <close_stdout@@Base+0xa24>
   11f94:	b	12410 <close_stdout@@Base+0xa0c>
   11f98:	b	12438 <close_stdout@@Base+0xa34>
   11f9c:	b	12430 <close_stdout@@Base+0xa2c>
   11fa0:	b	12420 <close_stdout@@Base+0xa1c>
   11fa4:	b	12418 <close_stdout@@Base+0xa14>
   11fa8:	b	123dc <close_stdout@@Base+0x9d8>
   11fac:	b	12534 <close_stdout@@Base+0xb30>
   11fb0:	b	12534 <close_stdout@@Base+0xb30>
   11fb4:	b	12534 <close_stdout@@Base+0xb30>
   11fb8:	b	12534 <close_stdout@@Base+0xb30>
   11fbc:	b	12534 <close_stdout@@Base+0xb30>
   11fc0:	b	12534 <close_stdout@@Base+0xb30>
   11fc4:	b	12534 <close_stdout@@Base+0xb30>
   11fc8:	b	12534 <close_stdout@@Base+0xb30>
   11fcc:	b	12534 <close_stdout@@Base+0xb30>
   11fd0:	b	12534 <close_stdout@@Base+0xb30>
   11fd4:	b	12534 <close_stdout@@Base+0xb30>
   11fd8:	b	12534 <close_stdout@@Base+0xb30>
   11fdc:	b	12534 <close_stdout@@Base+0xb30>
   11fe0:	b	12534 <close_stdout@@Base+0xb30>
   11fe4:	b	12534 <close_stdout@@Base+0xb30>
   11fe8:	b	12534 <close_stdout@@Base+0xb30>
   11fec:	b	12534 <close_stdout@@Base+0xb30>
   11ff0:	b	12534 <close_stdout@@Base+0xb30>
   11ff4:	b	12368 <close_stdout@@Base+0x964>
   11ff8:	b	12368 <close_stdout@@Base+0x964>
   11ffc:	b	12368 <close_stdout@@Base+0x964>
   12000:	b	12360 <close_stdout@@Base+0x95c>
   12004:	b	12368 <close_stdout@@Base+0x964>
   12008:	b	1223c <close_stdout@@Base+0x838>
   1200c:	b	12368 <close_stdout@@Base+0x964>
   12010:	b	124dc <close_stdout@@Base+0xad8>
   12014:	b	12368 <close_stdout@@Base+0x964>
   12018:	b	12368 <close_stdout@@Base+0x964>
   1201c:	b	12368 <close_stdout@@Base+0x964>
   12020:	b	1223c <close_stdout@@Base+0x838>
   12024:	b	1223c <close_stdout@@Base+0x838>
   12028:	b	1223c <close_stdout@@Base+0x838>
   1202c:	b	1223c <close_stdout@@Base+0x838>
   12030:	b	1223c <close_stdout@@Base+0x838>
   12034:	b	1223c <close_stdout@@Base+0x838>
   12038:	b	1223c <close_stdout@@Base+0x838>
   1203c:	b	1223c <close_stdout@@Base+0x838>
   12040:	b	1223c <close_stdout@@Base+0x838>
   12044:	b	1223c <close_stdout@@Base+0x838>
   12048:	b	1223c <close_stdout@@Base+0x838>
   1204c:	b	1223c <close_stdout@@Base+0x838>
   12050:	b	1223c <close_stdout@@Base+0x838>
   12054:	b	1223c <close_stdout@@Base+0x838>
   12058:	b	1223c <close_stdout@@Base+0x838>
   1205c:	b	1223c <close_stdout@@Base+0x838>
   12060:	b	12368 <close_stdout@@Base+0x964>
   12064:	b	12368 <close_stdout@@Base+0x964>
   12068:	b	12368 <close_stdout@@Base+0x964>
   1206c:	b	12368 <close_stdout@@Base+0x964>
   12070:	b	12170 <close_stdout@@Base+0x76c>
   12074:	b	12534 <close_stdout@@Base+0xb30>
   12078:	b	1223c <close_stdout@@Base+0x838>
   1207c:	b	1223c <close_stdout@@Base+0x838>
   12080:	b	1223c <close_stdout@@Base+0x838>
   12084:	b	1223c <close_stdout@@Base+0x838>
   12088:	b	1223c <close_stdout@@Base+0x838>
   1208c:	b	1223c <close_stdout@@Base+0x838>
   12090:	b	1223c <close_stdout@@Base+0x838>
   12094:	b	1223c <close_stdout@@Base+0x838>
   12098:	b	1223c <close_stdout@@Base+0x838>
   1209c:	b	1223c <close_stdout@@Base+0x838>
   120a0:	b	1223c <close_stdout@@Base+0x838>
   120a4:	b	1223c <close_stdout@@Base+0x838>
   120a8:	b	1223c <close_stdout@@Base+0x838>
   120ac:	b	1223c <close_stdout@@Base+0x838>
   120b0:	b	1223c <close_stdout@@Base+0x838>
   120b4:	b	1223c <close_stdout@@Base+0x838>
   120b8:	b	1223c <close_stdout@@Base+0x838>
   120bc:	b	1223c <close_stdout@@Base+0x838>
   120c0:	b	1223c <close_stdout@@Base+0x838>
   120c4:	b	1223c <close_stdout@@Base+0x838>
   120c8:	b	1223c <close_stdout@@Base+0x838>
   120cc:	b	1223c <close_stdout@@Base+0x838>
   120d0:	b	1223c <close_stdout@@Base+0x838>
   120d4:	b	1223c <close_stdout@@Base+0x838>
   120d8:	b	1223c <close_stdout@@Base+0x838>
   120dc:	b	1223c <close_stdout@@Base+0x838>
   120e0:	b	12368 <close_stdout@@Base+0x964>
   120e4:	b	124c0 <close_stdout@@Base+0xabc>
   120e8:	b	1223c <close_stdout@@Base+0x838>
   120ec:	b	12368 <close_stdout@@Base+0x964>
   120f0:	b	1223c <close_stdout@@Base+0x838>
   120f4:	b	12368 <close_stdout@@Base+0x964>
   120f8:	b	1223c <close_stdout@@Base+0x838>
   120fc:	b	1223c <close_stdout@@Base+0x838>
   12100:	b	1223c <close_stdout@@Base+0x838>
   12104:	b	1223c <close_stdout@@Base+0x838>
   12108:	b	1223c <close_stdout@@Base+0x838>
   1210c:	b	1223c <close_stdout@@Base+0x838>
   12110:	b	1223c <close_stdout@@Base+0x838>
   12114:	b	1223c <close_stdout@@Base+0x838>
   12118:	b	1223c <close_stdout@@Base+0x838>
   1211c:	b	1223c <close_stdout@@Base+0x838>
   12120:	b	1223c <close_stdout@@Base+0x838>
   12124:	b	1223c <close_stdout@@Base+0x838>
   12128:	b	1223c <close_stdout@@Base+0x838>
   1212c:	b	1223c <close_stdout@@Base+0x838>
   12130:	b	1223c <close_stdout@@Base+0x838>
   12134:	b	1223c <close_stdout@@Base+0x838>
   12138:	b	1223c <close_stdout@@Base+0x838>
   1213c:	b	1223c <close_stdout@@Base+0x838>
   12140:	b	1223c <close_stdout@@Base+0x838>
   12144:	b	1223c <close_stdout@@Base+0x838>
   12148:	b	1223c <close_stdout@@Base+0x838>
   1214c:	b	1223c <close_stdout@@Base+0x838>
   12150:	b	1223c <close_stdout@@Base+0x838>
   12154:	b	1223c <close_stdout@@Base+0x838>
   12158:	b	1223c <close_stdout@@Base+0x838>
   1215c:	b	1223c <close_stdout@@Base+0x838>
   12160:	b	12348 <close_stdout@@Base+0x944>
   12164:	b	12368 <close_stdout@@Base+0x964>
   12168:	b	12348 <close_stdout@@Base+0x944>
   1216c:	b	12360 <close_stdout@@Base+0x95c>
   12170:	ldr	r3, [sp, #160]	; 0xa0
   12174:	cmp	r3, #2
   12178:	beq	12a04 <close_stdout@@Base+0x1000>
   1217c:	cmp	r3, #3
   12180:	bne	1223c <close_stdout@@Base+0x838>
   12184:	ldr	r1, [sp, #164]	; 0xa4
   12188:	tst	r1, #4
   1218c:	beq	1223c <close_stdout@@Base+0x838>
   12190:	add	r3, fp, #2
   12194:	cmp	r8, r3
   12198:	bls	1223c <close_stdout@@Base+0x838>
   1219c:	ldrb	r2, [r5, #1]
   121a0:	mov	r1, #1
   121a4:	cmp	r2, #63	; 0x3f
   121a8:	bne	1223c <close_stdout@@Base+0x838>
   121ac:	ldr	r0, [sp, #32]
   121b0:	ldrb	ip, [r0, r3]
   121b4:	sub	r0, ip, #33	; 0x21
   121b8:	uxtb	r0, r0
   121bc:	cmp	r0, #29
   121c0:	bhi	1223c <close_stdout@@Base+0x838>
   121c4:	lsl	r1, r1, r0
   121c8:	movw	r0, #20929	; 0x51c1
   121cc:	movt	r0, #14336	; 0x3800
   121d0:	and	r0, r1, r0
   121d4:	cmp	r0, #0
   121d8:	beq	1223c <close_stdout@@Base+0x838>
   121dc:	ldr	r1, [sp, #36]	; 0x24
   121e0:	cmp	r1, #0
   121e4:	bne	12384 <close_stdout@@Base+0x980>
   121e8:	cmp	r9, sl
   121ec:	mov	r4, ip
   121f0:	mov	fp, r3
   121f4:	ldrcc	r0, [sp, #40]	; 0x28
   121f8:	strbcc	r2, [r0, r9]
   121fc:	add	r2, r9, #1
   12200:	cmp	sl, r2
   12204:	ldrhi	r0, [sp, #40]	; 0x28
   12208:	movhi	r1, #34	; 0x22
   1220c:	strbhi	r1, [r0, r2]
   12210:	add	r2, r9, #2
   12214:	cmp	sl, r2
   12218:	ldrhi	r0, [sp, #40]	; 0x28
   1221c:	movhi	r1, #34	; 0x22
   12220:	strbhi	r1, [r0, r2]
   12224:	add	r2, r9, #3
   12228:	cmp	sl, r2
   1222c:	add	r9, r9, #4
   12230:	ldrhi	r0, [sp, #40]	; 0x28
   12234:	movhi	r1, #63	; 0x3f
   12238:	strbhi	r1, [r0, r2]
   1223c:	ldr	r0, [sp, #44]	; 0x2c
   12240:	cmp	r0, #0
   12244:	bne	1226c <close_stdout@@Base+0x868>
   12248:	ldr	r1, [sp, #48]	; 0x30
   1224c:	cmp	r1, #0
   12250:	beq	1226c <close_stdout@@Base+0x868>
   12254:	ubfx	r2, r4, #5, #8
   12258:	and	r3, r4, #31
   1225c:	ldr	r2, [r1, r2, lsl #2]
   12260:	lsr	r3, r2, r3
   12264:	tst	r3, #1
   12268:	bne	12274 <close_stdout@@Base+0x870>
   1226c:	cmp	r6, #0
   12270:	beq	12294 <close_stdout@@Base+0x890>
   12274:	ldr	r2, [sp, #36]	; 0x24
   12278:	cmp	r2, #0
   1227c:	bne	12384 <close_stdout@@Base+0x980>
   12280:	cmp	r9, sl
   12284:	ldrcc	r0, [sp, #40]	; 0x28
   12288:	movcc	r3, #92	; 0x5c
   1228c:	strbcc	r3, [r0, r9]
   12290:	add	r9, r9, #1
   12294:	add	fp, fp, #1
   12298:	cmp	r9, sl
   1229c:	ldrcc	r1, [sp, #40]	; 0x28
   122a0:	strbcc	r4, [r1, r9]
   122a4:	cmn	r8, #1
   122a8:	add	r9, r9, #1
   122ac:	bne	11f34 <close_stdout@@Base+0x530>
   122b0:	ldr	r2, [sp, #32]
   122b4:	ldrb	r3, [r2, fp]
   122b8:	adds	r3, r3, #0
   122bc:	movne	r3, #1
   122c0:	cmp	r3, #0
   122c4:	bne	11f44 <close_stdout@@Base+0x540>
   122c8:	ldr	r3, [sp, #160]	; 0xa0
   122cc:	cmp	r9, #0
   122d0:	cmpeq	r3, #2
   122d4:	bne	122e4 <close_stdout@@Base+0x8e0>
   122d8:	ldr	r0, [sp, #36]	; 0x24
   122dc:	cmp	r0, #0
   122e0:	bne	12384 <close_stdout@@Base+0x980>
   122e4:	ldr	r1, [sp, #36]	; 0x24
   122e8:	ldr	r2, [sp, #52]	; 0x34
   122ec:	eor	r3, r1, #1
   122f0:	cmp	r2, #0
   122f4:	moveq	r3, #0
   122f8:	andne	r3, r3, #1
   122fc:	cmp	r3, #0
   12300:	beq	1232c <close_stdout@@Base+0x928>
   12304:	ldrb	r3, [r2]
   12308:	cmp	r3, #0
   1230c:	beq	1232c <close_stdout@@Base+0x928>
   12310:	ldr	r1, [sp, #40]	; 0x28
   12314:	cmp	sl, r9
   12318:	strbhi	r3, [r1, r9]
   1231c:	ldrb	r3, [r2, #1]!
   12320:	add	r9, r9, #1
   12324:	cmp	r3, #0
   12328:	bne	12314 <close_stdout@@Base+0x910>
   1232c:	cmp	r9, sl
   12330:	movcs	r0, r9
   12334:	ldrcc	r1, [sp, #40]	; 0x28
   12338:	movcc	r3, #0
   1233c:	movcc	r0, r9
   12340:	strbcc	r3, [r1, r9]
   12344:	b	123c0 <close_stdout@@Base+0x9bc>
   12348:	cmn	r8, #1
   1234c:	beq	12a14 <close_stdout@@Base+0x1010>
   12350:	subs	r3, r8, #1
   12354:	movne	r3, #1
   12358:	cmp	r3, #0
   1235c:	bne	1223c <close_stdout@@Base+0x838>
   12360:	cmp	fp, #0
   12364:	bne	1223c <close_stdout@@Base+0x838>
   12368:	ldr	r3, [sp, #36]	; 0x24
   1236c:	ldr	r0, [sp, #160]	; 0xa0
   12370:	cmp	r0, #2
   12374:	movne	r3, #0
   12378:	andeq	r3, r3, #1
   1237c:	cmp	r3, #0
   12380:	beq	1223c <close_stdout@@Base+0x838>
   12384:	ldr	r2, [sp, #164]	; 0xa4
   12388:	mov	ip, #0
   1238c:	ldr	r0, [sp, #160]	; 0xa0
   12390:	bic	r3, r2, #2
   12394:	ldr	r1, [sp, #72]	; 0x48
   12398:	ldr	r2, [sp, #68]	; 0x44
   1239c:	stm	sp, {r0, r3}
   123a0:	mov	r3, r8
   123a4:	str	r1, [sp, #12]
   123a8:	mov	r1, sl
   123ac:	str	r2, [sp, #16]
   123b0:	ldr	r0, [sp, #40]	; 0x28
   123b4:	ldr	r2, [sp, #32]
   123b8:	str	ip, [sp, #8]
   123bc:	bl	11e54 <close_stdout@@Base+0x450>
   123c0:	ldr	r1, [sp, #56]	; 0x38
   123c4:	ldr	r2, [sp, #116]	; 0x74
   123c8:	ldr	r3, [r1]
   123cc:	cmp	r2, r3
   123d0:	bne	12b04 <close_stdout@@Base+0x1100>
   123d4:	add	sp, sp, #124	; 0x7c
   123d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123dc:	mov	r3, #114	; 0x72
   123e0:	ldr	r2, [sp, #36]	; 0x24
   123e4:	ldr	r0, [sp, #160]	; 0xa0
   123e8:	cmp	r0, #2
   123ec:	movne	r2, #0
   123f0:	andeq	r2, r2, #1
   123f4:	cmp	r2, #0
   123f8:	bne	12384 <close_stdout@@Base+0x980>
   123fc:	ldr	r1, [sp, #24]
   12400:	cmp	r1, #0
   12404:	beq	1223c <close_stdout@@Base+0x838>
   12408:	mov	r4, r3
   1240c:	b	12274 <close_stdout@@Base+0x870>
   12410:	mov	r3, #98	; 0x62
   12414:	b	123fc <close_stdout@@Base+0x9f8>
   12418:	mov	r3, #102	; 0x66
   1241c:	b	123fc <close_stdout@@Base+0x9f8>
   12420:	mov	r3, #118	; 0x76
   12424:	b	123fc <close_stdout@@Base+0x9f8>
   12428:	mov	r3, #97	; 0x61
   1242c:	b	123fc <close_stdout@@Base+0x9f8>
   12430:	mov	r3, #110	; 0x6e
   12434:	b	123e0 <close_stdout@@Base+0x9dc>
   12438:	mov	r3, #116	; 0x74
   1243c:	b	123e0 <close_stdout@@Base+0x9dc>
   12440:	ldr	r2, [sp, #24]
   12444:	cmp	r2, #0
   12448:	beq	129f0 <close_stdout@@Base+0xfec>
   1244c:	ldr	r3, [sp, #36]	; 0x24
   12450:	cmp	r3, #0
   12454:	bne	12384 <close_stdout@@Base+0x980>
   12458:	cmp	r9, sl
   1245c:	add	r2, r9, #1
   12460:	ldrcc	r0, [sp, #40]	; 0x28
   12464:	movcc	r3, #92	; 0x5c
   12468:	strbcc	r3, [r0, r9]
   1246c:	add	r3, fp, #1
   12470:	cmp	r8, r3
   12474:	bls	124b4 <close_stdout@@Base+0xab0>
   12478:	ldr	r1, [sp, #32]
   1247c:	ldrb	r3, [r1, r3]
   12480:	sub	r3, r3, #48	; 0x30
   12484:	cmp	r3, #9
   12488:	bhi	124b4 <close_stdout@@Base+0xab0>
   1248c:	cmp	sl, r2
   12490:	ldrhi	r0, [sp, #40]	; 0x28
   12494:	movhi	r3, #48	; 0x30
   12498:	strbhi	r3, [r0, r2]
   1249c:	add	r3, r9, #2
   124a0:	cmp	sl, r3
   124a4:	ldrhi	r1, [sp, #40]	; 0x28
   124a8:	movhi	r2, #48	; 0x30
   124ac:	strbhi	r2, [r1, r3]
   124b0:	add	r2, r9, #3
   124b4:	mov	r9, r2
   124b8:	mov	r4, #48	; 0x30
   124bc:	b	12248 <close_stdout@@Base+0x844>
   124c0:	ldr	r1, [sp, #76]	; 0x4c
   124c4:	cmp	r1, #0
   124c8:	beq	124d4 <close_stdout@@Base+0xad0>
   124cc:	cmp	r7, #0
   124d0:	bne	12294 <close_stdout@@Base+0x890>
   124d4:	mov	r3, r4
   124d8:	b	123e0 <close_stdout@@Base+0x9dc>
   124dc:	ldr	r1, [sp, #160]	; 0xa0
   124e0:	cmp	r1, #2
   124e4:	bne	1223c <close_stdout@@Base+0x838>
   124e8:	ldr	r2, [sp, #36]	; 0x24
   124ec:	cmp	r2, #0
   124f0:	bne	12384 <close_stdout@@Base+0x980>
   124f4:	cmp	r9, sl
   124f8:	ldrcc	r0, [sp, #40]	; 0x28
   124fc:	movcc	r3, #39	; 0x27
   12500:	strbcc	r3, [r0, r9]
   12504:	add	r3, r9, #1
   12508:	cmp	sl, r3
   1250c:	ldrhi	r1, [sp, #40]	; 0x28
   12510:	movhi	r2, #92	; 0x5c
   12514:	strbhi	r2, [r1, r3]
   12518:	add	r3, r9, #2
   1251c:	cmp	sl, r3
   12520:	add	r9, r9, #3
   12524:	ldrhi	r0, [sp, #40]	; 0x28
   12528:	movhi	r2, #39	; 0x27
   1252c:	strbhi	r2, [r0, r3]
   12530:	b	1223c <close_stdout@@Base+0x838>
   12534:	ldr	r1, [sp, #64]	; 0x40
   12538:	cmp	r1, #1
   1253c:	bne	12834 <close_stdout@@Base+0xe30>
   12540:	bl	110c0 <__ctype_b_loc@plt>
   12544:	ldr	r2, [sp, #64]	; 0x40
   12548:	sxth	r3, r4
   1254c:	str	r2, [sp, #60]	; 0x3c
   12550:	lsl	r3, r3, #1
   12554:	ldr	r2, [r0]
   12558:	ldrh	r2, [r2, r3]
   1255c:	eor	r2, r2, #16384	; 0x4000
   12560:	ubfx	r2, r2, #14, #1
   12564:	ldr	r1, [sp, #24]
   12568:	ands	r2, r2, r1
   1256c:	beq	1223c <close_stdout@@Base+0x838>
   12570:	ldr	r3, [sp, #60]	; 0x3c
   12574:	mov	r0, #92	; 0x5c
   12578:	ldr	r7, [sp, #36]	; 0x24
   1257c:	add	r1, r3, fp
   12580:	str	r8, [sp, #60]	; 0x3c
   12584:	ldr	r3, [sp, #40]	; 0x28
   12588:	b	125ec <close_stdout@@Base+0xbe8>
   1258c:	cmp	r7, #0
   12590:	bne	12a2c <close_stdout@@Base+0x1028>
   12594:	add	ip, r9, #1
   12598:	cmp	r9, sl
   1259c:	strbcc	r0, [r3, r9]
   125a0:	cmp	sl, ip
   125a4:	lsrhi	r8, r4, #6
   125a8:	addhi	r8, r8, #48	; 0x30
   125ac:	strbhi	r8, [r3, ip]
   125b0:	add	ip, r9, #2
   125b4:	add	r9, r9, #3
   125b8:	cmp	sl, ip
   125bc:	ubfxhi	r8, r4, #3, #3
   125c0:	and	r4, r4, #7
   125c4:	add	r4, r4, #48	; 0x30
   125c8:	addhi	r8, r8, #48	; 0x30
   125cc:	strbhi	r8, [r3, ip]
   125d0:	add	fp, fp, #1
   125d4:	cmp	r1, fp
   125d8:	bls	12618 <close_stdout@@Base+0xc14>
   125dc:	cmp	r9, sl
   125e0:	strbcc	r4, [r3, r9]
   125e4:	ldrb	r4, [r5, #1]!
   125e8:	add	r9, r9, #1
   125ec:	cmp	r2, #0
   125f0:	bne	1258c <close_stdout@@Base+0xb88>
   125f4:	cmp	r6, #0
   125f8:	beq	125d0 <close_stdout@@Base+0xbcc>
   125fc:	add	fp, fp, #1
   12600:	cmp	r9, sl
   12604:	strbcc	r0, [r3, r9]
   12608:	cmp	r1, fp
   1260c:	add	r9, r9, #1
   12610:	mov	r6, #0
   12614:	bhi	125dc <close_stdout@@Base+0xbd8>
   12618:	ldr	r8, [sp, #60]	; 0x3c
   1261c:	b	12298 <close_stdout@@Base+0x894>
   12620:	ldr	r3, [sp, #36]	; 0x24
   12624:	cmp	r3, #0
   12628:	bne	12b2c <close_stdout@@Base+0x1128>
   1262c:	cmp	sl, #0
   12630:	beq	12a44 <close_stdout@@Base+0x1040>
   12634:	ldr	r1, [sp, #40]	; 0x28
   12638:	mov	r0, #1
   1263c:	ldr	r2, [pc, #1296]	; 12b54 <close_stdout@@Base+0x1150>
   12640:	mov	r3, #34	; 0x22
   12644:	str	r0, [sp, #24]
   12648:	mov	r9, r0
   1264c:	add	r2, pc, r2
   12650:	str	r0, [sp, #28]
   12654:	strb	r3, [r1]
   12658:	str	r2, [sp, #52]	; 0x34
   1265c:	b	11f08 <close_stdout@@Base+0x504>
   12660:	ldr	r3, [pc, #1264]	; 12b58 <close_stdout@@Base+0x1154>
   12664:	mov	r2, #1
   12668:	mov	r0, #3
   1266c:	str	r2, [sp, #36]	; 0x24
   12670:	add	r3, pc, r3
   12674:	str	r2, [sp, #24]
   12678:	str	r3, [sp, #52]	; 0x34
   1267c:	mov	r9, #0
   12680:	str	r2, [sp, #28]
   12684:	str	r0, [sp, #160]	; 0xa0
   12688:	b	11f08 <close_stdout@@Base+0x504>
   1268c:	mov	r0, #0
   12690:	mov	r1, #1
   12694:	str	r0, [sp, #36]	; 0x24
   12698:	mov	r9, r0
   1269c:	str	r1, [sp, #24]
   126a0:	str	r0, [sp, #28]
   126a4:	str	r0, [sp, #52]	; 0x34
   126a8:	b	11f08 <close_stdout@@Base+0x504>
   126ac:	ldr	r3, [sp, #160]	; 0xa0
   126b0:	cmp	r3, #8
   126b4:	beq	126e0 <close_stdout@@Base+0xcdc>
   126b8:	ldr	r0, [pc, #1180]	; 12b5c <close_stdout@@Base+0x1158>
   126bc:	mov	r1, r3
   126c0:	add	r0, pc, r0
   126c4:	bl	11cf0 <close_stdout@@Base+0x2ec>
   126c8:	ldr	r1, [sp, #160]	; 0xa0
   126cc:	str	r0, [sp, #72]	; 0x48
   126d0:	ldr	r0, [pc, #1160]	; 12b60 <close_stdout@@Base+0x115c>
   126d4:	add	r0, pc, r0
   126d8:	bl	11cf0 <close_stdout@@Base+0x2ec>
   126dc:	str	r0, [sp, #68]	; 0x44
   126e0:	ldr	r0, [sp, #36]	; 0x24
   126e4:	cmp	r0, #0
   126e8:	movne	r9, #0
   126ec:	bne	12724 <close_stdout@@Base+0xd20>
   126f0:	ldr	r1, [sp, #72]	; 0x48
   126f4:	ldrb	r3, [r1]
   126f8:	cmp	r3, #0
   126fc:	beq	12afc <close_stdout@@Base+0x10f8>
   12700:	mov	r2, r1
   12704:	ldr	r1, [sp, #40]	; 0x28
   12708:	mov	r9, r0
   1270c:	cmp	r9, sl
   12710:	strbcc	r3, [r1, r9]
   12714:	ldrb	r3, [r2, #1]!
   12718:	add	r9, r9, #1
   1271c:	cmp	r3, #0
   12720:	bne	1270c <close_stdout@@Base+0xd08>
   12724:	ldr	r0, [sp, #68]	; 0x44
   12728:	str	r0, [sp, #52]	; 0x34
   1272c:	bl	110d8 <strlen@plt>
   12730:	mov	r2, #1
   12734:	str	r2, [sp, #24]
   12738:	str	r0, [sp, #28]
   1273c:	b	11f08 <close_stdout@@Base+0x504>
   12740:	ldr	r3, [pc, #1052]	; 12b64 <close_stdout@@Base+0x1160>
   12744:	mov	r2, #0
   12748:	mov	r1, #1
   1274c:	mov	r0, #2
   12750:	add	r3, pc, r3
   12754:	str	r1, [sp, #36]	; 0x24
   12758:	str	r2, [sp, #24]
   1275c:	mov	r9, r2
   12760:	str	r1, [sp, #28]
   12764:	str	r3, [sp, #52]	; 0x34
   12768:	str	r0, [sp, #160]	; 0xa0
   1276c:	b	11f08 <close_stdout@@Base+0x504>
   12770:	ldr	r3, [sp, #36]	; 0x24
   12774:	cmp	r3, #0
   12778:	bne	12b08 <close_stdout@@Base+0x1104>
   1277c:	cmp	sl, #0
   12780:	beq	12a64 <close_stdout@@Base+0x1060>
   12784:	ldr	r1, [sp, #40]	; 0x28
   12788:	mov	r3, #39	; 0x27
   1278c:	ldr	r2, [sp, #36]	; 0x24
   12790:	mov	r0, #1
   12794:	mov	r9, r0
   12798:	str	r0, [sp, #28]
   1279c:	strb	r3, [r1]
   127a0:	ldr	r3, [pc, #960]	; 12b68 <close_stdout@@Base+0x1164>
   127a4:	str	r2, [sp, #24]
   127a8:	add	r3, pc, r3
   127ac:	str	r3, [sp, #52]	; 0x34
   127b0:	b	11f08 <close_stdout@@Base+0x504>
   127b4:	ldr	r2, [sp, #28]
   127b8:	cmp	r2, #1
   127bc:	add	r4, fp, r2
   127c0:	movls	r3, #0
   127c4:	movhi	r3, #1
   127c8:	cmn	r8, #1
   127cc:	movne	r3, #0
   127d0:	cmp	r3, #0
   127d4:	beq	127e4 <close_stdout@@Base+0xde0>
   127d8:	ldr	r0, [sp, #32]
   127dc:	bl	110d8 <strlen@plt>
   127e0:	mov	r8, r0
   127e4:	cmp	r8, r4
   127e8:	ldrcc	r3, [sp, #32]
   127ec:	movcc	r6, #0
   127f0:	addcc	r5, r3, fp
   127f4:	bcc	11f64 <close_stdout@@Base+0x560>
   127f8:	ldr	r0, [sp, #32]
   127fc:	ldr	r1, [sp, #52]	; 0x34
   12800:	add	r5, r0, fp
   12804:	ldr	r2, [sp, #28]
   12808:	mov	r0, r5
   1280c:	bl	10fb8 <memcmp@plt>
   12810:	cmp	r0, #0
   12814:	bne	1282c <close_stdout@@Base+0xe28>
   12818:	ldr	r1, [sp, #36]	; 0x24
   1281c:	cmp	r1, #0
   12820:	bne	12384 <close_stdout@@Base+0x980>
   12824:	mov	r6, #1
   12828:	b	11f64 <close_stdout@@Base+0x560>
   1282c:	mov	r6, #0
   12830:	b	11f64 <close_stdout@@Base+0x560>
   12834:	add	r7, sp, #108	; 0x6c
   12838:	cmn	r8, #1
   1283c:	mov	r3, #0
   12840:	str	r3, [sp, #108]	; 0x6c
   12844:	str	r3, [r7, #4]
   12848:	beq	12a34 <close_stdout@@Base+0x1030>
   1284c:	mov	r1, #0
   12850:	ldr	r0, [sp, #32]
   12854:	mov	ip, #1
   12858:	str	r9, [sp, #88]	; 0x58
   1285c:	str	r6, [sp, #96]	; 0x60
   12860:	mov	r9, r1
   12864:	str	r5, [sp, #100]	; 0x64
   12868:	mov	r6, ip
   1286c:	mov	r5, r7
   12870:	add	r3, sp, #104	; 0x68
   12874:	sub	r0, r0, #1
   12878:	str	r3, [sp, #80]	; 0x50
   1287c:	str	r0, [sp, #84]	; 0x54
   12880:	str	r1, [sp, #60]	; 0x3c
   12884:	str	r4, [sp, #92]	; 0x5c
   12888:	ldr	r2, [sp, #32]
   1288c:	add	r7, r9, fp
   12890:	add	r0, sp, #104	; 0x68
   12894:	mov	r3, r5
   12898:	add	r4, r2, r7
   1289c:	rsb	r2, r7, r8
   128a0:	mov	r1, r4
   128a4:	bl	11048 <mbrtowc@plt>
   128a8:	subs	r2, r0, #0
   128ac:	beq	129b8 <close_stdout@@Base+0xfb4>
   128b0:	cmn	r2, #1
   128b4:	beq	12ae0 <close_stdout@@Base+0x10dc>
   128b8:	cmn	r2, #2
   128bc:	beq	12a84 <close_stdout@@Base+0x1080>
   128c0:	ldr	r3, [sp, #36]	; 0x24
   128c4:	ldr	r0, [sp, #160]	; 0xa0
   128c8:	cmp	r0, #2
   128cc:	movne	r3, #0
   128d0:	andeq	r3, r3, #1
   128d4:	cmp	r3, #0
   128d8:	beq	12994 <close_stdout@@Base+0xf90>
   128dc:	cmp	r2, #1
   128e0:	beq	12994 <close_stdout@@Base+0xf90>
   128e4:	ldr	r1, [sp, #84]	; 0x54
   128e8:	add	r3, r1, r2
   128ec:	add	r7, r3, r7
   128f0:	ldrb	r3, [r4, #1]!
   128f4:	sub	r3, r3, #91	; 0x5b
   128f8:	cmp	r3, #33	; 0x21
   128fc:	addls	pc, pc, r3, lsl #2
   12900:	b	1298c <close_stdout@@Base+0xf88>
   12904:	b	12384 <close_stdout@@Base+0x980>
   12908:	b	12384 <close_stdout@@Base+0x980>
   1290c:	b	1298c <close_stdout@@Base+0xf88>
   12910:	b	12384 <close_stdout@@Base+0x980>
   12914:	b	1298c <close_stdout@@Base+0xf88>
   12918:	b	12384 <close_stdout@@Base+0x980>
   1291c:	b	1298c <close_stdout@@Base+0xf88>
   12920:	b	1298c <close_stdout@@Base+0xf88>
   12924:	b	1298c <close_stdout@@Base+0xf88>
   12928:	b	1298c <close_stdout@@Base+0xf88>
   1292c:	b	1298c <close_stdout@@Base+0xf88>
   12930:	b	1298c <close_stdout@@Base+0xf88>
   12934:	b	1298c <close_stdout@@Base+0xf88>
   12938:	b	1298c <close_stdout@@Base+0xf88>
   1293c:	b	1298c <close_stdout@@Base+0xf88>
   12940:	b	1298c <close_stdout@@Base+0xf88>
   12944:	b	1298c <close_stdout@@Base+0xf88>
   12948:	b	1298c <close_stdout@@Base+0xf88>
   1294c:	b	1298c <close_stdout@@Base+0xf88>
   12950:	b	1298c <close_stdout@@Base+0xf88>
   12954:	b	1298c <close_stdout@@Base+0xf88>
   12958:	b	1298c <close_stdout@@Base+0xf88>
   1295c:	b	1298c <close_stdout@@Base+0xf88>
   12960:	b	1298c <close_stdout@@Base+0xf88>
   12964:	b	1298c <close_stdout@@Base+0xf88>
   12968:	b	1298c <close_stdout@@Base+0xf88>
   1296c:	b	1298c <close_stdout@@Base+0xf88>
   12970:	b	1298c <close_stdout@@Base+0xf88>
   12974:	b	1298c <close_stdout@@Base+0xf88>
   12978:	b	1298c <close_stdout@@Base+0xf88>
   1297c:	b	1298c <close_stdout@@Base+0xf88>
   12980:	b	1298c <close_stdout@@Base+0xf88>
   12984:	b	1298c <close_stdout@@Base+0xf88>
   12988:	b	12384 <close_stdout@@Base+0x980>
   1298c:	cmp	r4, r7
   12990:	bne	128f0 <close_stdout@@Base+0xeec>
   12994:	ldr	r0, [sp, #104]	; 0x68
   12998:	add	r9, r9, r2
   1299c:	bl	11000 <iswprint@plt>
   129a0:	cmp	r0, #0
   129a4:	mov	r0, r5
   129a8:	moveq	r6, #0
   129ac:	bl	10fac <mbsinit@plt>
   129b0:	cmp	r0, #0
   129b4:	beq	12888 <close_stdout@@Base+0xe84>
   129b8:	mov	ip, r6
   129bc:	eor	r2, ip, #1
   129c0:	str	r9, [sp, #60]	; 0x3c
   129c4:	ldr	r4, [sp, #92]	; 0x5c
   129c8:	uxtb	r2, r2
   129cc:	ldr	r9, [sp, #88]	; 0x58
   129d0:	ldr	r6, [sp, #96]	; 0x60
   129d4:	ldr	r5, [sp, #100]	; 0x64
   129d8:	ldr	r3, [sp, #60]	; 0x3c
   129dc:	cmp	r3, #1
   129e0:	bls	12564 <close_stdout@@Base+0xb60>
   129e4:	ldr	r0, [sp, #24]
   129e8:	and	r2, r2, r0
   129ec:	b	12570 <close_stdout@@Base+0xb6c>
   129f0:	ldr	r2, [sp, #164]	; 0xa4
   129f4:	tst	r2, #1
   129f8:	addne	fp, fp, #1
   129fc:	bne	11f2c <close_stdout@@Base+0x528>
   12a00:	b	1223c <close_stdout@@Base+0x838>
   12a04:	ldr	r0, [sp, #36]	; 0x24
   12a08:	cmp	r0, #0
   12a0c:	beq	1223c <close_stdout@@Base+0x838>
   12a10:	b	12384 <close_stdout@@Base+0x980>
   12a14:	ldr	r2, [sp, #32]
   12a18:	ldrb	r3, [r2, #1]
   12a1c:	adds	r3, r3, #0
   12a20:	movne	r3, #1
   12a24:	b	12358 <close_stdout@@Base+0x954>
   12a28:	bl	111b0 <abort@plt>
   12a2c:	ldr	r8, [sp, #60]	; 0x3c
   12a30:	b	12384 <close_stdout@@Base+0x980>
   12a34:	ldr	r0, [sp, #32]
   12a38:	bl	110d8 <strlen@plt>
   12a3c:	mov	r8, r0
   12a40:	b	1284c <close_stdout@@Base+0xe48>
   12a44:	ldr	r2, [pc, #288]	; 12b6c <close_stdout@@Base+0x1168>
   12a48:	mov	r1, #1
   12a4c:	mov	r9, r1
   12a50:	str	r1, [sp, #24]
   12a54:	add	r2, pc, r2
   12a58:	str	r1, [sp, #28]
   12a5c:	str	r2, [sp, #52]	; 0x34
   12a60:	b	11f08 <close_stdout@@Base+0x504>
   12a64:	ldr	r2, [pc, #260]	; 12b70 <close_stdout@@Base+0x116c>
   12a68:	mov	r3, #1
   12a6c:	mov	r9, r3
   12a70:	str	r3, [sp, #28]
   12a74:	add	r2, pc, r2
   12a78:	str	sl, [sp, #24]
   12a7c:	str	r2, [sp, #52]	; 0x34
   12a80:	b	11f08 <close_stdout@@Base+0x504>
   12a84:	cmp	r8, r7
   12a88:	str	r9, [sp, #60]	; 0x3c
   12a8c:	mov	ip, r4
   12a90:	ldr	r6, [sp, #96]	; 0x60
   12a94:	ldr	r9, [sp, #88]	; 0x58
   12a98:	ldr	r4, [sp, #92]	; 0x5c
   12a9c:	ldr	r5, [sp, #100]	; 0x64
   12aa0:	bls	12ad8 <close_stdout@@Base+0x10d4>
   12aa4:	ldrb	r3, [ip]
   12aa8:	cmp	r3, #0
   12aac:	beq	12ad8 <close_stdout@@Base+0x10d4>
   12ab0:	ldr	r3, [sp, #60]	; 0x3c
   12ab4:	b	12ac4 <close_stdout@@Base+0x10c0>
   12ab8:	ldrb	r2, [r5, r3]
   12abc:	cmp	r2, #0
   12ac0:	beq	12ad4 <close_stdout@@Base+0x10d0>
   12ac4:	add	r3, r3, #1
   12ac8:	add	r2, fp, r3
   12acc:	cmp	r8, r2
   12ad0:	bhi	12ab8 <close_stdout@@Base+0x10b4>
   12ad4:	str	r3, [sp, #60]	; 0x3c
   12ad8:	mov	r2, #1
   12adc:	b	129d8 <close_stdout@@Base+0xfd4>
   12ae0:	str	r9, [sp, #60]	; 0x3c
   12ae4:	mov	r2, #1
   12ae8:	ldr	r4, [sp, #92]	; 0x5c
   12aec:	ldr	r6, [sp, #96]	; 0x60
   12af0:	ldr	r9, [sp, #88]	; 0x58
   12af4:	ldr	r5, [sp, #100]	; 0x64
   12af8:	b	129d8 <close_stdout@@Base+0xfd4>
   12afc:	ldr	r9, [sp, #36]	; 0x24
   12b00:	b	12724 <close_stdout@@Base+0xd20>
   12b04:	bl	10fd0 <__stack_chk_fail@plt>
   12b08:	ldr	r1, [pc, #100]	; 12b74 <close_stdout@@Base+0x1170>
   12b0c:	mov	r3, #0
   12b10:	mov	r0, #1
   12b14:	str	r3, [sp, #24]
   12b18:	add	r1, pc, r1
   12b1c:	str	r0, [sp, #28]
   12b20:	mov	r9, r3
   12b24:	str	r1, [sp, #52]	; 0x34
   12b28:	b	11f08 <close_stdout@@Base+0x504>
   12b2c:	ldr	r0, [pc, #68]	; 12b78 <close_stdout@@Base+0x1174>
   12b30:	mov	r3, #1
   12b34:	mov	r9, #0
   12b38:	str	r3, [sp, #24]
   12b3c:	add	r0, pc, r0
   12b40:	str	r3, [sp, #28]
   12b44:	str	r0, [sp, #52]	; 0x34
   12b48:	b	11f08 <close_stdout@@Base+0x504>
   12b4c:	andeq	r4, r1, r8, lsl #3
   12b50:	strdeq	r0, [r0], -r4
   12b54:	andeq	r2, r0, ip, ror #24
   12b58:	andeq	r2, r0, r8, asr #24
   12b5c:	andeq	r2, r0, r4, lsl #24
   12b60:	andeq	r2, r0, r0, ror #23
   12b64:	andeq	r2, r0, r4, ror #22
   12b68:	andeq	r2, r0, ip, lsl #22
   12b6c:	andeq	r2, r0, r4, ror #16
   12b70:	andeq	r2, r0, r0, asr #16
   12b74:	muleq	r0, ip, r7
   12b78:	andeq	r2, r0, ip, ror r7
   12b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b80:	sub	sp, sp, #44	; 0x2c
   12b84:	mov	r6, r0
   12b88:	mov	r9, r1
   12b8c:	mov	sl, r2
   12b90:	mov	r4, r3
   12b94:	bl	110fc <__errno_location@plt>
   12b98:	ldr	fp, [pc, #412]	; 12d3c <close_stdout@@Base+0x1338>
   12b9c:	cmp	r6, #0
   12ba0:	add	fp, pc, fp
   12ba4:	ldr	r5, [fp]
   12ba8:	ldr	r1, [r0]
   12bac:	mov	r8, r0
   12bb0:	str	r1, [sp, #36]	; 0x24
   12bb4:	blt	12d34 <close_stdout@@Base+0x1330>
   12bb8:	ldr	r3, [pc, #384]	; 12d40 <close_stdout@@Base+0x133c>
   12bbc:	add	r3, pc, r3
   12bc0:	ldr	r3, [r3]
   12bc4:	cmp	r6, r3
   12bc8:	bcc	12c1c <close_stdout@@Base+0x1218>
   12bcc:	add	r7, r6, #1
   12bd0:	cmn	r7, #-536870911	; 0xe0000001
   12bd4:	bhi	12d38 <close_stdout@@Base+0x1334>
   12bd8:	add	r3, fp, #4
   12bdc:	cmp	r5, r3
   12be0:	beq	12d0c <close_stdout@@Base+0x1308>
   12be4:	mov	r0, r5
   12be8:	lsl	r1, r7, #3
   12bec:	bl	13a14 <close_stdout@@Base+0x2010>
   12bf0:	mov	r5, r0
   12bf4:	str	r0, [fp]
   12bf8:	ldr	fp, [pc, #324]	; 12d44 <close_stdout@@Base+0x1340>
   12bfc:	mov	r1, #0
   12c00:	add	fp, pc, fp
   12c04:	ldr	r0, [fp]
   12c08:	rsb	r2, r0, r7
   12c0c:	add	r0, r5, r0, lsl #3
   12c10:	lsl	r2, r2, #3
   12c14:	bl	11114 <memset@plt>
   12c18:	str	r7, [fp]
   12c1c:	add	r2, r4, #8
   12c20:	str	r2, [sp, #32]
   12c24:	ldr	r1, [r4]
   12c28:	add	fp, r5, r6, lsl #3
   12c2c:	ldr	lr, [sp, #32]
   12c30:	mov	r2, r9
   12c34:	ldr	r3, [r4, #4]
   12c38:	ldr	ip, [r5, r6, lsl #3]
   12c3c:	ldr	r7, [fp, #4]
   12c40:	orr	r3, r3, #1
   12c44:	str	r1, [sp]
   12c48:	str	r3, [sp, #4]
   12c4c:	mov	r1, ip
   12c50:	str	lr, [sp, #8]
   12c54:	mov	r0, r7
   12c58:	ldr	lr, [r4, #40]	; 0x28
   12c5c:	str	r3, [sp, #28]
   12c60:	mov	r3, sl
   12c64:	str	lr, [sp, #12]
   12c68:	ldr	lr, [r4, #44]	; 0x2c
   12c6c:	str	ip, [sp, #24]
   12c70:	str	lr, [sp, #16]
   12c74:	bl	11e54 <close_stdout@@Base+0x450>
   12c78:	ldr	ip, [sp, #24]
   12c7c:	cmp	ip, r0
   12c80:	bhi	12cf8 <close_stdout@@Base+0x12f4>
   12c84:	ldr	r3, [pc, #188]	; 12d48 <close_stdout@@Base+0x1344>
   12c88:	add	r1, r0, #1
   12c8c:	str	r1, [r5, r6, lsl #3]
   12c90:	add	r3, pc, r3
   12c94:	cmp	r7, r3
   12c98:	beq	12cac <close_stdout@@Base+0x12a8>
   12c9c:	mov	r0, r7
   12ca0:	str	r1, [sp, #24]
   12ca4:	bl	10f7c <free@plt>
   12ca8:	ldr	r1, [sp, #24]
   12cac:	mov	r0, r1
   12cb0:	str	r1, [sp, #24]
   12cb4:	bl	139bc <close_stdout@@Base+0x1fb8>
   12cb8:	ldr	r3, [sp, #28]
   12cbc:	ldr	lr, [sp, #32]
   12cc0:	mov	r2, r9
   12cc4:	str	r0, [fp, #4]
   12cc8:	mov	r7, r0
   12ccc:	ldr	ip, [r4]
   12cd0:	str	r3, [sp, #4]
   12cd4:	mov	r3, sl
   12cd8:	str	lr, [sp, #8]
   12cdc:	str	ip, [sp]
   12ce0:	ldr	ip, [r4, #40]	; 0x28
   12ce4:	ldr	r1, [sp, #24]
   12ce8:	str	ip, [sp, #12]
   12cec:	ldr	ip, [r4, #44]	; 0x2c
   12cf0:	str	ip, [sp, #16]
   12cf4:	bl	11e54 <close_stdout@@Base+0x450>
   12cf8:	ldr	r1, [sp, #36]	; 0x24
   12cfc:	mov	r0, r7
   12d00:	str	r1, [r8]
   12d04:	add	sp, sp, #44	; 0x2c
   12d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d0c:	lsl	r1, r7, #3
   12d10:	mov	r0, #0
   12d14:	str	r3, [sp, #24]
   12d18:	bl	13a14 <close_stdout@@Base+0x2010>
   12d1c:	ldr	r3, [sp, #24]
   12d20:	mov	r5, r0
   12d24:	ldm	r3, {r0, r1}
   12d28:	str	r5, [fp]
   12d2c:	stm	r5, {r0, r1}
   12d30:	b	12bf8 <close_stdout@@Base+0x11f4>
   12d34:	bl	111b0 <abort@plt>
   12d38:	bl	13bd0 <close_stdout@@Base+0x21cc>
   12d3c:	andeq	r3, r1, r4, asr #11
   12d40:	andeq	r3, r1, r4, ror r5
   12d44:	andeq	r3, r1, r0, lsr r5
   12d48:	strdeq	r3, [r1], -r0
   12d4c:	push	{r4, r5, r6, lr}
   12d50:	mov	r5, r0
   12d54:	bl	110fc <__errno_location@plt>
   12d58:	cmp	r5, #0
   12d5c:	mov	r1, #48	; 0x30
   12d60:	mov	r4, r0
   12d64:	ldr	r0, [pc, #24]	; 12d84 <close_stdout@@Base+0x1380>
   12d68:	ldr	r6, [r4]
   12d6c:	add	r0, pc, r0
   12d70:	add	r0, r0, #256	; 0x100
   12d74:	movne	r0, r5
   12d78:	bl	13b90 <close_stdout@@Base+0x218c>
   12d7c:	str	r6, [r4]
   12d80:	pop	{r4, r5, r6, pc}
   12d84:	andeq	r3, r1, r4, lsl r4
   12d88:	cmp	r0, #0
   12d8c:	beq	12d98 <close_stdout@@Base+0x1394>
   12d90:	ldr	r0, [r0]
   12d94:	bx	lr
   12d98:	ldr	r0, [pc, #12]	; 12dac <close_stdout@@Base+0x13a8>
   12d9c:	add	r0, pc, r0
   12da0:	add	r0, r0, #256	; 0x100
   12da4:	ldr	r0, [r0]
   12da8:	bx	lr
   12dac:	andeq	r3, r1, r4, ror #7
   12db0:	cmp	r0, #0
   12db4:	beq	12dc0 <close_stdout@@Base+0x13bc>
   12db8:	str	r1, [r0]
   12dbc:	bx	lr
   12dc0:	ldr	r0, [pc, #12]	; 12dd4 <close_stdout@@Base+0x13d0>
   12dc4:	add	r0, pc, r0
   12dc8:	add	r0, r0, #256	; 0x100
   12dcc:	str	r1, [r0]
   12dd0:	bx	lr
   12dd4:			; <UNDEFINED> instruction: 0x000133bc
   12dd8:	cmp	r0, #0
   12ddc:	movne	r3, r0
   12de0:	beq	12e10 <close_stdout@@Base+0x140c>
   12de4:	lsr	ip, r1, #5
   12de8:	and	r1, r1, #31
   12dec:	add	r3, r3, ip, lsl #2
   12df0:	ldr	ip, [r3, #8]
   12df4:	lsr	r0, ip, r1
   12df8:	eor	r2, r0, r2
   12dfc:	and	r0, r0, #1
   12e00:	and	r2, r2, #1
   12e04:	eor	ip, ip, r2, lsl r1
   12e08:	str	ip, [r3, #8]
   12e0c:	bx	lr
   12e10:	ldr	r3, [pc, #8]	; 12e20 <close_stdout@@Base+0x141c>
   12e14:	add	r3, pc, r3
   12e18:	add	r3, r3, #256	; 0x100
   12e1c:	b	12de4 <close_stdout@@Base+0x13e0>
   12e20:	andeq	r3, r1, ip, ror #6
   12e24:	subs	r3, r0, #0
   12e28:	beq	12e38 <close_stdout@@Base+0x1434>
   12e2c:	ldr	r0, [r3, #4]
   12e30:	str	r1, [r3, #4]
   12e34:	bx	lr
   12e38:	ldr	r3, [pc, #8]	; 12e48 <close_stdout@@Base+0x1444>
   12e3c:	add	r3, pc, r3
   12e40:	add	r3, r3, #256	; 0x100
   12e44:	b	12e2c <close_stdout@@Base+0x1428>
   12e48:	andeq	r3, r1, r4, asr #6
   12e4c:	cmp	r0, #0
   12e50:	push	{r3, lr}
   12e54:	beq	12e78 <close_stdout@@Base+0x1474>
   12e58:	cmp	r2, #0
   12e5c:	cmpne	r1, #0
   12e60:	mov	r3, #8
   12e64:	strne	r1, [r0, #40]	; 0x28
   12e68:	str	r3, [r0]
   12e6c:	strne	r2, [r0, #44]	; 0x2c
   12e70:	popne	{r3, pc}
   12e74:	bl	111b0 <abort@plt>
   12e78:	ldr	r0, [pc, #8]	; 12e88 <close_stdout@@Base+0x1484>
   12e7c:	add	r0, pc, r0
   12e80:	add	r0, r0, #256	; 0x100
   12e84:	b	12e58 <close_stdout@@Base+0x1454>
   12e88:	andeq	r3, r1, r4, lsl #6
   12e8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e90:	sub	sp, sp, #24
   12e94:	mov	r7, r0
   12e98:	mov	sl, r1
   12e9c:	ldr	r4, [sp, #56]	; 0x38
   12ea0:	mov	r9, r2
   12ea4:	mov	r8, r3
   12ea8:	cmp	r4, #0
   12eac:	beq	12f00 <close_stdout@@Base+0x14fc>
   12eb0:	bl	110fc <__errno_location@plt>
   12eb4:	ldr	r3, [r4]
   12eb8:	add	lr, r4, #8
   12ebc:	mov	r1, sl
   12ec0:	mov	r2, r9
   12ec4:	ldr	r6, [r0]
   12ec8:	mov	r5, r0
   12ecc:	str	r3, [sp]
   12ed0:	mov	r0, r7
   12ed4:	ldr	ip, [r4, #4]
   12ed8:	mov	r3, r8
   12edc:	stmib	sp, {ip, lr}
   12ee0:	ldr	ip, [r4, #40]	; 0x28
   12ee4:	str	ip, [sp, #12]
   12ee8:	ldr	ip, [r4, #44]	; 0x2c
   12eec:	str	ip, [sp, #16]
   12ef0:	bl	11e54 <close_stdout@@Base+0x450>
   12ef4:	str	r6, [r5]
   12ef8:	add	sp, sp, #24
   12efc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f00:	ldr	r4, [pc, #8]	; 12f10 <close_stdout@@Base+0x150c>
   12f04:	add	r4, pc, r4
   12f08:	add	r4, r4, #256	; 0x100
   12f0c:	b	12eb0 <close_stdout@@Base+0x14ac>
   12f10:	andeq	r3, r1, ip, ror r2
   12f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f18:	subs	r4, r3, #0
   12f1c:	sub	sp, sp, #36	; 0x24
   12f20:	mov	r7, r0
   12f24:	mov	r6, r1
   12f28:	mov	r5, r2
   12f2c:	beq	12fe8 <close_stdout@@Base+0x15e4>
   12f30:	bl	110fc <__errno_location@plt>
   12f34:	ldr	r3, [r4]
   12f38:	ldr	sl, [r4, #4]
   12f3c:	add	r9, r4, #8
   12f40:	mov	r8, r0
   12f44:	mov	r0, #0
   12f48:	ldr	r2, [r8]
   12f4c:	cmp	r5, r0
   12f50:	orreq	sl, sl, #1
   12f54:	str	r9, [sp, #8]
   12f58:	mov	r1, r0
   12f5c:	stm	sp, {r3, sl}
   12f60:	mov	r3, r6
   12f64:	ldr	ip, [r4, #40]	; 0x28
   12f68:	str	r2, [sp, #28]
   12f6c:	mov	r2, r7
   12f70:	str	ip, [sp, #12]
   12f74:	ldr	ip, [r4, #44]	; 0x2c
   12f78:	str	ip, [sp, #16]
   12f7c:	bl	11e54 <close_stdout@@Base+0x450>
   12f80:	add	r1, r0, #1
   12f84:	mov	fp, r0
   12f88:	str	r1, [sp, #24]
   12f8c:	mov	r0, r1
   12f90:	bl	139bc <close_stdout@@Base+0x1fb8>
   12f94:	ldr	lr, [r4]
   12f98:	str	sl, [sp, #4]
   12f9c:	mov	r3, r6
   12fa0:	str	r9, [sp, #8]
   12fa4:	mov	r2, r7
   12fa8:	str	lr, [sp]
   12fac:	ldr	lr, [r4, #40]	; 0x28
   12fb0:	ldr	r1, [sp, #24]
   12fb4:	str	lr, [sp, #12]
   12fb8:	ldr	lr, [r4, #44]	; 0x2c
   12fbc:	str	lr, [sp, #16]
   12fc0:	str	r0, [sp, #24]
   12fc4:	bl	11e54 <close_stdout@@Base+0x450>
   12fc8:	ldr	r3, [sp, #28]
   12fcc:	cmp	r5, #0
   12fd0:	str	r3, [r8]
   12fd4:	ldr	ip, [sp, #24]
   12fd8:	strne	fp, [r5]
   12fdc:	mov	r0, ip
   12fe0:	add	sp, sp, #36	; 0x24
   12fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fe8:	ldr	r4, [pc, #8]	; 12ff8 <close_stdout@@Base+0x15f4>
   12fec:	add	r4, pc, r4
   12ff0:	add	r4, r4, #256	; 0x100
   12ff4:	b	12f30 <close_stdout@@Base+0x152c>
   12ff8:	muleq	r1, r4, r1
   12ffc:	mov	r3, r2
   13000:	mov	r2, #0
   13004:	b	12f14 <close_stdout@@Base+0x1510>
   13008:	ldr	r2, [pc, #152]	; 130a8 <close_stdout@@Base+0x16a4>
   1300c:	push	{r3, r4, r5, r6, r7, lr}
   13010:	add	r2, pc, r2
   13014:	ldr	r3, [pc, #144]	; 130ac <close_stdout@@Base+0x16a8>
   13018:	ldr	r6, [r2]
   1301c:	add	r3, pc, r3
   13020:	cmp	r6, #1
   13024:	ldr	r7, [r3]
   13028:	movhi	r4, #1
   1302c:	movhi	r5, r7
   13030:	bls	1304c <close_stdout@@Base+0x1648>
   13034:	ldr	r0, [r5, #12]
   13038:	add	r4, r4, #1
   1303c:	bl	10f7c <free@plt>
   13040:	cmp	r4, r6
   13044:	add	r5, r5, #8
   13048:	bne	13034 <close_stdout@@Base+0x1630>
   1304c:	ldr	r4, [pc, #92]	; 130b0 <close_stdout@@Base+0x16ac>
   13050:	ldr	r0, [r7, #4]
   13054:	add	r4, pc, r4
   13058:	cmp	r0, r4
   1305c:	beq	13074 <close_stdout@@Base+0x1670>
   13060:	bl	10f7c <free@plt>
   13064:	ldr	r3, [pc, #72]	; 130b4 <close_stdout@@Base+0x16b0>
   13068:	mov	r2, #256	; 0x100
   1306c:	add	r3, pc, r3
   13070:	stmib	r3, {r2, r4}
   13074:	ldr	r4, [pc, #60]	; 130b8 <close_stdout@@Base+0x16b4>
   13078:	add	r4, pc, r4
   1307c:	add	r5, r4, #4
   13080:	cmp	r7, r5
   13084:	beq	13094 <close_stdout@@Base+0x1690>
   13088:	mov	r0, r7
   1308c:	bl	10f7c <free@plt>
   13090:	str	r5, [r4]
   13094:	ldr	r3, [pc, #32]	; 130bc <close_stdout@@Base+0x16b8>
   13098:	mov	r2, #1
   1309c:	add	r3, pc, r3
   130a0:	str	r2, [r3]
   130a4:	pop	{r3, r4, r5, r6, r7, pc}
   130a8:	andeq	r3, r1, r0, lsr #2
   130ac:	andeq	r3, r1, r8, asr #2
   130b0:	andeq	r3, r1, ip, lsr #2
   130b4:	strdeq	r3, [r1], -r8
   130b8:	andeq	r3, r1, ip, ror #1
   130bc:	muleq	r1, r4, r0
   130c0:	ldr	r3, [pc, #12]	; 130d4 <close_stdout@@Base+0x16d0>
   130c4:	mvn	r2, #0
   130c8:	add	r3, pc, r3
   130cc:	add	r3, r3, #256	; 0x100
   130d0:	b	12b7c <close_stdout@@Base+0x1178>
   130d4:	strheq	r3, [r1], -r8
   130d8:	ldr	r3, [pc, #8]	; 130e8 <close_stdout@@Base+0x16e4>
   130dc:	add	r3, pc, r3
   130e0:	add	r3, r3, #256	; 0x100
   130e4:	b	12b7c <close_stdout@@Base+0x1178>
   130e8:	andeq	r3, r1, r4, lsr #1
   130ec:	mov	r1, r0
   130f0:	mov	r0, #0
   130f4:	b	130c0 <close_stdout@@Base+0x16bc>
   130f8:	mov	r2, r1
   130fc:	mov	r1, r0
   13100:	mov	r0, #0
   13104:	b	130d8 <close_stdout@@Base+0x16d4>
   13108:	ldr	r3, [pc, #92]	; 1316c <close_stdout@@Base+0x1768>
   1310c:	ldr	ip, [pc, #92]	; 13170 <close_stdout@@Base+0x176c>
   13110:	add	r3, pc, r3
   13114:	push	{r4, r5, r6, r7, lr}
   13118:	sub	sp, sp, #60	; 0x3c
   1311c:	ldr	r4, [r3, ip]
   13120:	add	r5, sp, #4
   13124:	mov	r7, r2
   13128:	mov	r6, r0
   1312c:	mov	r0, r5
   13130:	ldr	r3, [r4]
   13134:	str	r3, [sp, #52]	; 0x34
   13138:	bl	11c9c <close_stdout@@Base+0x298>
   1313c:	mov	r3, r5
   13140:	mvn	r2, #0
   13144:	mov	r0, r6
   13148:	mov	r1, r7
   1314c:	bl	12b7c <close_stdout@@Base+0x1178>
   13150:	ldr	r2, [sp, #52]	; 0x34
   13154:	ldr	r3, [r4]
   13158:	cmp	r2, r3
   1315c:	bne	13168 <close_stdout@@Base+0x1764>
   13160:	add	sp, sp, #60	; 0x3c
   13164:	pop	{r4, r5, r6, r7, pc}
   13168:	bl	10fd0 <__stack_chk_fail@plt>
   1316c:	andeq	r2, r1, r8, ror #29
   13170:	strdeq	r0, [r0], -r4
   13174:	ldr	ip, [pc, #96]	; 131dc <close_stdout@@Base+0x17d8>
   13178:	push	{r4, r5, r6, r7, r8, lr}
   1317c:	add	ip, pc, ip
   13180:	ldr	lr, [pc, #88]	; 131e0 <close_stdout@@Base+0x17dc>
   13184:	sub	sp, sp, #56	; 0x38
   13188:	mov	r8, r3
   1318c:	add	r5, sp, #4
   13190:	mov	r7, r2
   13194:	mov	r6, r0
   13198:	ldr	r4, [ip, lr]
   1319c:	mov	r0, r5
   131a0:	ldr	r3, [r4]
   131a4:	str	r3, [sp, #52]	; 0x34
   131a8:	bl	11c9c <close_stdout@@Base+0x298>
   131ac:	mov	r2, r8
   131b0:	mov	r3, r5
   131b4:	mov	r0, r6
   131b8:	mov	r1, r7
   131bc:	bl	12b7c <close_stdout@@Base+0x1178>
   131c0:	ldr	r2, [sp, #52]	; 0x34
   131c4:	ldr	r3, [r4]
   131c8:	cmp	r2, r3
   131cc:	bne	131d8 <close_stdout@@Base+0x17d4>
   131d0:	add	sp, sp, #56	; 0x38
   131d4:	pop	{r4, r5, r6, r7, r8, pc}
   131d8:	bl	10fd0 <__stack_chk_fail@plt>
   131dc:	andeq	r2, r1, ip, ror lr
   131e0:	strdeq	r0, [r0], -r4
   131e4:	mov	r2, r1
   131e8:	mov	r1, r0
   131ec:	mov	r0, #0
   131f0:	b	13108 <close_stdout@@Base+0x1704>
   131f4:	mov	ip, r1
   131f8:	mov	r3, r2
   131fc:	mov	r1, r0
   13200:	mov	r2, ip
   13204:	mov	r0, #0
   13208:	b	13174 <close_stdout@@Base+0x1770>
   1320c:	push	{r4, r5, r6, r7, r8, lr}
   13210:	mov	r5, r2
   13214:	ldr	lr, [pc, #136]	; 132a4 <close_stdout@@Base+0x18a0>
   13218:	mov	r7, r0
   1321c:	mov	r6, r1
   13220:	ldr	r4, [pc, #128]	; 132a8 <close_stdout@@Base+0x18a4>
   13224:	add	lr, pc, lr
   13228:	sub	sp, sp, #56	; 0x38
   1322c:	add	lr, lr, #256	; 0x100
   13230:	ldr	r8, [pc, #116]	; 132ac <close_stdout@@Base+0x18a8>
   13234:	add	r4, pc, r4
   13238:	add	ip, sp, #4
   1323c:	ldm	lr!, {r0, r1, r2, r3}
   13240:	ldr	r4, [r4, r8]
   13244:	stmia	ip!, {r0, r1, r2, r3}
   13248:	ldm	lr!, {r0, r1, r2, r3}
   1324c:	ldr	r8, [r4]
   13250:	stmia	ip!, {r0, r1, r2, r3}
   13254:	ldm	lr, {r0, r1, r2, r3}
   13258:	str	r8, [sp, #52]	; 0x34
   1325c:	stm	ip, {r0, r1, r2, r3}
   13260:	mov	r1, r5
   13264:	add	r5, sp, #4
   13268:	mov	r2, #1
   1326c:	mov	r0, r5
   13270:	bl	12dd8 <close_stdout@@Base+0x13d4>
   13274:	mov	r2, r6
   13278:	mov	r3, r5
   1327c:	mov	r1, r7
   13280:	mov	r0, #0
   13284:	bl	12b7c <close_stdout@@Base+0x1178>
   13288:	ldr	r2, [sp, #52]	; 0x34
   1328c:	ldr	r3, [r4]
   13290:	cmp	r2, r3
   13294:	bne	132a0 <close_stdout@@Base+0x189c>
   13298:	add	sp, sp, #56	; 0x38
   1329c:	pop	{r4, r5, r6, r7, r8, pc}
   132a0:	bl	10fd0 <__stack_chk_fail@plt>
   132a4:	andeq	r2, r1, ip, asr pc
   132a8:	andeq	r2, r1, r4, asr #27
   132ac:	strdeq	r0, [r0], -r4
   132b0:	mov	r2, r1
   132b4:	mvn	r1, #0
   132b8:	b	1320c <close_stdout@@Base+0x1808>
   132bc:	mov	r1, #58	; 0x3a
   132c0:	b	132b0 <close_stdout@@Base+0x18ac>
   132c4:	mov	r2, #58	; 0x3a
   132c8:	b	1320c <close_stdout@@Base+0x1808>
   132cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132d0:	mov	r5, r2
   132d4:	ldr	lr, [pc, #144]	; 1336c <close_stdout@@Base+0x1968>
   132d8:	mov	r8, r0
   132dc:	mov	r9, r1
   132e0:	mov	r7, r3
   132e4:	add	lr, pc, lr
   132e8:	ldr	r4, [pc, #128]	; 13370 <close_stdout@@Base+0x196c>
   132ec:	add	lr, lr, #256	; 0x100
   132f0:	sub	sp, sp, #56	; 0x38
   132f4:	ldr	sl, [pc, #120]	; 13374 <close_stdout@@Base+0x1970>
   132f8:	add	r4, pc, r4
   132fc:	ldm	lr!, {r0, r1, r2, r3}
   13300:	add	ip, sp, #4
   13304:	ldr	r4, [r4, sl]
   13308:	ldr	r6, [sp, #88]	; 0x58
   1330c:	stmia	ip!, {r0, r1, r2, r3}
   13310:	ldm	lr!, {r0, r1, r2, r3}
   13314:	ldr	sl, [r4]
   13318:	stmia	ip!, {r0, r1, r2, r3}
   1331c:	ldm	lr, {r0, r1, r2, r3}
   13320:	str	sl, [sp, #52]	; 0x34
   13324:	stm	ip, {r0, r1, r2, r3}
   13328:	mov	r2, r5
   1332c:	add	r5, sp, #4
   13330:	mov	r1, r9
   13334:	mov	r0, r5
   13338:	bl	12e4c <close_stdout@@Base+0x1448>
   1333c:	mov	r2, r6
   13340:	mov	r3, r5
   13344:	mov	r0, r8
   13348:	mov	r1, r7
   1334c:	bl	12b7c <close_stdout@@Base+0x1178>
   13350:	ldr	r2, [sp, #52]	; 0x34
   13354:	ldr	r3, [r4]
   13358:	cmp	r2, r3
   1335c:	bne	13368 <close_stdout@@Base+0x1964>
   13360:	add	sp, sp, #56	; 0x38
   13364:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13368:	bl	10fd0 <__stack_chk_fail@plt>
   1336c:	muleq	r1, ip, lr
   13370:	andeq	r2, r1, r0, lsl #26
   13374:	strdeq	r0, [r0], -r4
   13378:	push	{lr}		; (str lr, [sp, #-4]!)
   1337c:	sub	sp, sp, #12
   13380:	mvn	ip, #0
   13384:	str	ip, [sp]
   13388:	bl	132cc <close_stdout@@Base+0x18c8>
   1338c:	add	sp, sp, #12
   13390:	pop	{pc}		; (ldr pc, [sp], #4)
   13394:	mov	ip, r1
   13398:	mov	r3, r2
   1339c:	mov	r1, r0
   133a0:	mov	r2, ip
   133a4:	mov	r0, #0
   133a8:	b	13378 <close_stdout@@Base+0x1974>
   133ac:	push	{lr}		; (str lr, [sp, #-4]!)
   133b0:	sub	sp, sp, #12
   133b4:	mov	lr, r1
   133b8:	mov	ip, r2
   133bc:	mov	r1, r0
   133c0:	str	r3, [sp]
   133c4:	mov	r2, lr
   133c8:	mov	r3, ip
   133cc:	mov	r0, #0
   133d0:	bl	132cc <close_stdout@@Base+0x18c8>
   133d4:	add	sp, sp, #12
   133d8:	pop	{pc}		; (ldr pc, [sp], #4)
   133dc:	ldr	r3, [pc, #12]	; 133f0 <close_stdout@@Base+0x19ec>
   133e0:	ldr	ip, [pc, #12]	; 133f4 <close_stdout@@Base+0x19f0>
   133e4:	add	r3, pc, r3
   133e8:	ldr	r3, [r3, ip]
   133ec:	b	12b7c <close_stdout@@Base+0x1178>
   133f0:	andeq	r2, r1, r4, lsl ip
   133f4:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   133f8:	mov	r2, r1
   133fc:	mov	r1, r0
   13400:	mov	r0, #0
   13404:	b	133dc <close_stdout@@Base+0x19d8>
   13408:	mvn	r2, #0
   1340c:	b	133dc <close_stdout@@Base+0x19d8>
   13410:	mov	r1, r0
   13414:	mov	r0, #0
   13418:	b	13408 <close_stdout@@Base+0x1a04>
   1341c:	push	{r4, r5, r6, r7, lr}
   13420:	cmp	r1, #0
   13424:	sub	sp, sp, #36	; 0x24
   13428:	ldr	r7, [pc, #896]	; 137b0 <close_stdout@@Base+0x1dac>
   1342c:	mov	ip, r3
   13430:	mov	r5, r0
   13434:	add	r7, pc, r7
   13438:	ldr	r4, [sp, #56]	; 0x38
   1343c:	ldr	r6, [sp, #60]	; 0x3c
   13440:	beq	13784 <close_stdout@@Base+0x1d80>
   13444:	str	r2, [sp]
   13448:	mov	r3, r1
   1344c:	ldr	r2, [pc, #864]	; 137b4 <close_stdout@@Base+0x1db0>
   13450:	mov	r1, #1
   13454:	str	ip, [sp, #4]
   13458:	add	r2, pc, r2
   1345c:	bl	11144 <__fprintf_chk@plt>
   13460:	ldr	r1, [pc, #848]	; 137b8 <close_stdout@@Base+0x1db4>
   13464:	mov	r2, #5
   13468:	mov	r0, #0
   1346c:	add	r1, pc, r1
   13470:	bl	10fc4 <dcgettext@plt>
   13474:	ldr	r2, [pc, #832]	; 137bc <close_stdout@@Base+0x1db8>
   13478:	movw	ip, #2013	; 0x7dd
   1347c:	mov	r1, #1
   13480:	ldr	r2, [r7, r2]
   13484:	str	ip, [sp]
   13488:	mov	r3, r0
   1348c:	mov	r0, r5
   13490:	bl	11144 <__fprintf_chk@plt>
   13494:	ldr	r1, [pc, #804]	; 137c0 <close_stdout@@Base+0x1dbc>
   13498:	mov	r0, #0
   1349c:	mov	r2, #5
   134a0:	add	r1, pc, r1
   134a4:	bl	10fc4 <dcgettext@plt>
   134a8:	mov	r1, r5
   134ac:	bl	10f40 <fputs_unlocked@plt>
   134b0:	cmp	r6, #9
   134b4:	addls	pc, pc, r6, lsl #2
   134b8:	b	137a0 <close_stdout@@Base+0x1d9c>
   134bc:	b	13550 <close_stdout@@Base+0x1b4c>
   134c0:	b	13554 <close_stdout@@Base+0x1b50>
   134c4:	b	13584 <close_stdout@@Base+0x1b80>
   134c8:	b	135b8 <close_stdout@@Base+0x1bb4>
   134cc:	b	135f4 <close_stdout@@Base+0x1bf0>
   134d0:	b	13634 <close_stdout@@Base+0x1c30>
   134d4:	b	1367c <close_stdout@@Base+0x1c78>
   134d8:	b	136cc <close_stdout@@Base+0x1cc8>
   134dc:	b	13724 <close_stdout@@Base+0x1d20>
   134e0:	b	134e4 <close_stdout@@Base+0x1ae0>
   134e4:	ldr	r1, [pc, #728]	; 137c4 <close_stdout@@Base+0x1dc0>
   134e8:	mov	r0, #0
   134ec:	add	r1, pc, r1
   134f0:	mov	r2, #5
   134f4:	bl	10fc4 <dcgettext@plt>
   134f8:	ldm	r4, {r3, ip}
   134fc:	mov	r1, #1
   13500:	str	ip, [sp]
   13504:	ldr	ip, [r4, #8]
   13508:	str	ip, [sp, #4]
   1350c:	ldr	ip, [r4, #12]
   13510:	str	ip, [sp, #8]
   13514:	ldr	ip, [r4, #16]
   13518:	str	ip, [sp, #12]
   1351c:	ldr	ip, [r4, #20]
   13520:	str	ip, [sp, #16]
   13524:	ldr	ip, [r4, #24]
   13528:	str	ip, [sp, #20]
   1352c:	ldr	ip, [r4, #28]
   13530:	str	ip, [sp, #24]
   13534:	ldr	ip, [r4, #32]
   13538:	str	ip, [sp, #28]
   1353c:	mov	r2, r0
   13540:	mov	r0, r5
   13544:	bl	11144 <__fprintf_chk@plt>
   13548:	add	sp, sp, #36	; 0x24
   1354c:	pop	{r4, r5, r6, r7, pc}
   13550:	bl	111b0 <abort@plt>
   13554:	ldr	r1, [pc, #620]	; 137c8 <close_stdout@@Base+0x1dc4>
   13558:	mov	r2, #5
   1355c:	mov	r0, #0
   13560:	add	r1, pc, r1
   13564:	bl	10fc4 <dcgettext@plt>
   13568:	ldr	r3, [r4]
   1356c:	mov	r1, #1
   13570:	mov	r2, r0
   13574:	mov	r0, r5
   13578:	add	sp, sp, #36	; 0x24
   1357c:	pop	{r4, r5, r6, r7, lr}
   13580:	b	11144 <__fprintf_chk@plt>
   13584:	ldr	r1, [pc, #576]	; 137cc <close_stdout@@Base+0x1dc8>
   13588:	mov	r2, #5
   1358c:	mov	r0, #0
   13590:	add	r1, pc, r1
   13594:	bl	10fc4 <dcgettext@plt>
   13598:	ldm	r4, {r3, ip}
   1359c:	mov	r1, #1
   135a0:	str	ip, [sp, #56]	; 0x38
   135a4:	mov	r2, r0
   135a8:	mov	r0, r5
   135ac:	add	sp, sp, #36	; 0x24
   135b0:	pop	{r4, r5, r6, r7, lr}
   135b4:	b	11144 <__fprintf_chk@plt>
   135b8:	ldr	r1, [pc, #528]	; 137d0 <close_stdout@@Base+0x1dcc>
   135bc:	mov	r2, #5
   135c0:	mov	r0, #0
   135c4:	add	r1, pc, r1
   135c8:	bl	10fc4 <dcgettext@plt>
   135cc:	ldm	r4, {r3, ip}
   135d0:	mov	r1, #1
   135d4:	str	ip, [sp, #56]	; 0x38
   135d8:	ldr	ip, [r4, #8]
   135dc:	str	ip, [sp, #60]	; 0x3c
   135e0:	mov	r2, r0
   135e4:	mov	r0, r5
   135e8:	add	sp, sp, #36	; 0x24
   135ec:	pop	{r4, r5, r6, r7, lr}
   135f0:	b	11144 <__fprintf_chk@plt>
   135f4:	ldr	r1, [pc, #472]	; 137d4 <close_stdout@@Base+0x1dd0>
   135f8:	mov	r2, #5
   135fc:	mov	r0, #0
   13600:	add	r1, pc, r1
   13604:	bl	10fc4 <dcgettext@plt>
   13608:	ldm	r4, {r3, ip}
   1360c:	mov	r1, #1
   13610:	str	ip, [sp]
   13614:	ldr	ip, [r4, #8]
   13618:	str	ip, [sp, #4]
   1361c:	ldr	ip, [r4, #12]
   13620:	str	ip, [sp, #8]
   13624:	mov	r2, r0
   13628:	mov	r0, r5
   1362c:	bl	11144 <__fprintf_chk@plt>
   13630:	b	13548 <close_stdout@@Base+0x1b44>
   13634:	ldr	r1, [pc, #412]	; 137d8 <close_stdout@@Base+0x1dd4>
   13638:	mov	r2, #5
   1363c:	mov	r0, #0
   13640:	add	r1, pc, r1
   13644:	bl	10fc4 <dcgettext@plt>
   13648:	ldm	r4, {r3, ip}
   1364c:	mov	r1, #1
   13650:	str	ip, [sp]
   13654:	ldr	ip, [r4, #8]
   13658:	str	ip, [sp, #4]
   1365c:	ldr	ip, [r4, #12]
   13660:	str	ip, [sp, #8]
   13664:	ldr	ip, [r4, #16]
   13668:	str	ip, [sp, #12]
   1366c:	mov	r2, r0
   13670:	mov	r0, r5
   13674:	bl	11144 <__fprintf_chk@plt>
   13678:	b	13548 <close_stdout@@Base+0x1b44>
   1367c:	ldr	r1, [pc, #344]	; 137dc <close_stdout@@Base+0x1dd8>
   13680:	mov	r2, #5
   13684:	mov	r0, #0
   13688:	add	r1, pc, r1
   1368c:	bl	10fc4 <dcgettext@plt>
   13690:	ldm	r4, {r3, ip}
   13694:	mov	r1, #1
   13698:	str	ip, [sp]
   1369c:	ldr	ip, [r4, #8]
   136a0:	str	ip, [sp, #4]
   136a4:	ldr	ip, [r4, #12]
   136a8:	str	ip, [sp, #8]
   136ac:	ldr	ip, [r4, #16]
   136b0:	str	ip, [sp, #12]
   136b4:	ldr	ip, [r4, #20]
   136b8:	str	ip, [sp, #16]
   136bc:	mov	r2, r0
   136c0:	mov	r0, r5
   136c4:	bl	11144 <__fprintf_chk@plt>
   136c8:	b	13548 <close_stdout@@Base+0x1b44>
   136cc:	ldr	r1, [pc, #268]	; 137e0 <close_stdout@@Base+0x1ddc>
   136d0:	mov	r2, #5
   136d4:	mov	r0, #0
   136d8:	add	r1, pc, r1
   136dc:	bl	10fc4 <dcgettext@plt>
   136e0:	ldm	r4, {r3, ip}
   136e4:	mov	r1, #1
   136e8:	str	ip, [sp]
   136ec:	ldr	ip, [r4, #8]
   136f0:	str	ip, [sp, #4]
   136f4:	ldr	ip, [r4, #12]
   136f8:	str	ip, [sp, #8]
   136fc:	ldr	ip, [r4, #16]
   13700:	str	ip, [sp, #12]
   13704:	ldr	ip, [r4, #20]
   13708:	str	ip, [sp, #16]
   1370c:	ldr	ip, [r4, #24]
   13710:	str	ip, [sp, #20]
   13714:	mov	r2, r0
   13718:	mov	r0, r5
   1371c:	bl	11144 <__fprintf_chk@plt>
   13720:	b	13548 <close_stdout@@Base+0x1b44>
   13724:	ldr	r1, [pc, #184]	; 137e4 <close_stdout@@Base+0x1de0>
   13728:	mov	r2, #5
   1372c:	mov	r0, #0
   13730:	add	r1, pc, r1
   13734:	bl	10fc4 <dcgettext@plt>
   13738:	ldm	r4, {r3, ip}
   1373c:	mov	r1, #1
   13740:	str	ip, [sp]
   13744:	ldr	ip, [r4, #8]
   13748:	str	ip, [sp, #4]
   1374c:	ldr	ip, [r4, #12]
   13750:	str	ip, [sp, #8]
   13754:	ldr	ip, [r4, #16]
   13758:	str	ip, [sp, #12]
   1375c:	ldr	ip, [r4, #20]
   13760:	str	ip, [sp, #16]
   13764:	ldr	ip, [r4, #24]
   13768:	str	ip, [sp, #20]
   1376c:	ldr	ip, [r4, #28]
   13770:	str	ip, [sp, #24]
   13774:	mov	r2, r0
   13778:	mov	r0, r5
   1377c:	bl	11144 <__fprintf_chk@plt>
   13780:	b	13548 <close_stdout@@Base+0x1b44>
   13784:	str	r3, [sp]
   13788:	mov	r3, r2
   1378c:	ldr	r2, [pc, #84]	; 137e8 <close_stdout@@Base+0x1de4>
   13790:	mov	r1, #1
   13794:	add	r2, pc, r2
   13798:	bl	11144 <__fprintf_chk@plt>
   1379c:	b	13460 <close_stdout@@Base+0x1a5c>
   137a0:	ldr	r1, [pc, #68]	; 137ec <close_stdout@@Base+0x1de8>
   137a4:	mov	r0, #0
   137a8:	add	r1, pc, r1
   137ac:	b	134f0 <close_stdout@@Base+0x1aec>
   137b0:	andeq	r2, r1, r4, asr #23
   137b4:			; <UNDEFINED> instruction: 0x00001eb0
   137b8:			; <UNDEFINED> instruction: 0x00001eb0
   137bc:	andeq	r0, r0, r0, lsr #2
   137c0:	andeq	r1, r0, r0, lsl #29
   137c4:	andeq	r2, r0, ip
   137c8:	andeq	r1, r0, ip, lsl #29
   137cc:	andeq	r1, r0, ip, ror #28
   137d0:	andeq	r1, r0, r0, asr lr
   137d4:	andeq	r1, r0, r0, lsr lr
   137d8:	andeq	r1, r0, r0, lsl lr
   137dc:	andeq	r1, r0, ip, ror #27
   137e0:	andeq	r1, r0, r4, asr #27
   137e4:	muleq	r0, r8, sp
   137e8:	andeq	r1, r0, r0, lsl #23
   137ec:	andeq	r1, r0, r4, lsl #27
   137f0:	push	{r4, r5, lr}
   137f4:	sub	sp, sp, #12
   137f8:	ldr	r5, [sp, #24]
   137fc:	ldr	ip, [r5]
   13800:	cmp	ip, #0
   13804:	beq	13820 <close_stdout@@Base+0x1e1c>
   13808:	mov	lr, r5
   1380c:	mov	ip, #0
   13810:	ldr	r4, [lr, #4]!
   13814:	add	ip, ip, #1
   13818:	cmp	r4, #0
   1381c:	bne	13810 <close_stdout@@Base+0x1e0c>
   13820:	stm	sp, {r5, ip}
   13824:	bl	1341c <close_stdout@@Base+0x1a18>
   13828:	add	sp, sp, #12
   1382c:	pop	{r4, r5, pc}
   13830:	push	{r4, r5, r6, r7, lr}
   13834:	sub	sp, sp, #60	; 0x3c
   13838:	ldr	r4, [pc, #100]	; 138a4 <close_stdout@@Base+0x1ea0>
   1383c:	mov	ip, #0
   13840:	ldr	r5, [pc, #96]	; 138a8 <close_stdout@@Base+0x1ea4>
   13844:	mov	lr, ip
   13848:	add	r4, pc, r4
   1384c:	ldr	r6, [sp, #80]	; 0x50
   13850:	ldr	r7, [r4, r5]
   13854:	add	r5, sp, #12
   13858:	ldr	r4, [r7]
   1385c:	str	r4, [sp, #52]	; 0x34
   13860:	ldr	r4, [r6, ip]
   13864:	cmp	r4, #0
   13868:	str	r4, [r5, ip]
   1386c:	beq	13880 <close_stdout@@Base+0x1e7c>
   13870:	add	lr, lr, #1
   13874:	add	ip, ip, #4
   13878:	cmp	lr, #10
   1387c:	bne	13860 <close_stdout@@Base+0x1e5c>
   13880:	stm	sp, {r5, lr}
   13884:	bl	1341c <close_stdout@@Base+0x1a18>
   13888:	ldr	r2, [sp, #52]	; 0x34
   1388c:	ldr	r3, [r7]
   13890:	cmp	r2, r3
   13894:	bne	138a0 <close_stdout@@Base+0x1e9c>
   13898:	add	sp, sp, #60	; 0x3c
   1389c:	pop	{r4, r5, r6, r7, pc}
   138a0:	bl	10fd0 <__stack_chk_fail@plt>
   138a4:			; <UNDEFINED> instruction: 0x000127b0
   138a8:	strdeq	r0, [r0], -r4
   138ac:	push	{r3}		; (str r3, [sp, #-4]!)
   138b0:	push	{r4, lr}
   138b4:	sub	sp, sp, #20
   138b8:	ldr	lr, [pc, #72]	; 13908 <close_stdout@@Base+0x1f04>
   138bc:	add	ip, sp, #32
   138c0:	ldr	r4, [pc, #68]	; 1390c <close_stdout@@Base+0x1f08>
   138c4:	add	lr, pc, lr
   138c8:	ldr	r3, [sp, #28]
   138cc:	ldr	r4, [lr, r4]
   138d0:	str	ip, [sp]
   138d4:	str	ip, [sp, #8]
   138d8:	ldr	ip, [r4]
   138dc:	str	ip, [sp, #12]
   138e0:	bl	13830 <close_stdout@@Base+0x1e2c>
   138e4:	ldr	r2, [sp, #12]
   138e8:	ldr	r3, [r4]
   138ec:	cmp	r2, r3
   138f0:	bne	13904 <close_stdout@@Base+0x1f00>
   138f4:	add	sp, sp, #20
   138f8:	pop	{r4, lr}
   138fc:	add	sp, sp, #4
   13900:	bx	lr
   13904:	bl	10fd0 <__stack_chk_fail@plt>
   13908:	andeq	r2, r1, r4, lsr r7
   1390c:	strdeq	r0, [r0], -r4
   13910:	ldr	r1, [pc, #132]	; 1399c <close_stdout@@Base+0x1f98>
   13914:	mov	r2, #5
   13918:	push	{r4, lr}
   1391c:	add	r1, pc, r1
   13920:	mov	r0, #0
   13924:	ldr	r4, [pc, #116]	; 139a0 <close_stdout@@Base+0x1f9c>
   13928:	bl	10fc4 <dcgettext@plt>
   1392c:	ldr	r2, [pc, #112]	; 139a4 <close_stdout@@Base+0x1fa0>
   13930:	add	r4, pc, r4
   13934:	add	r2, pc, r2
   13938:	mov	r1, r0
   1393c:	mov	r0, #1
   13940:	bl	1112c <__printf_chk@plt>
   13944:	ldr	r1, [pc, #92]	; 139a8 <close_stdout@@Base+0x1fa4>
   13948:	mov	r2, #5
   1394c:	mov	r0, #0
   13950:	add	r1, pc, r1
   13954:	bl	10fc4 <dcgettext@plt>
   13958:	ldr	r2, [pc, #76]	; 139ac <close_stdout@@Base+0x1fa8>
   1395c:	ldr	r3, [pc, #76]	; 139b0 <close_stdout@@Base+0x1fac>
   13960:	add	r2, pc, r2
   13964:	add	r3, pc, r3
   13968:	mov	r1, r0
   1396c:	mov	r0, #1
   13970:	bl	1112c <__printf_chk@plt>
   13974:	ldr	r1, [pc, #56]	; 139b4 <close_stdout@@Base+0x1fb0>
   13978:	mov	r0, #0
   1397c:	mov	r2, #5
   13980:	add	r1, pc, r1
   13984:	bl	10fc4 <dcgettext@plt>
   13988:	ldr	r3, [pc, #40]	; 139b8 <close_stdout@@Base+0x1fb4>
   1398c:	ldr	r3, [r4, r3]
   13990:	pop	{r4, lr}
   13994:	ldr	r1, [r3]
   13998:	b	10f40 <fputs_unlocked@plt>
   1399c:	andeq	r1, r0, ip, asr #24
   139a0:	andeq	r2, r1, r8, asr #13
   139a4:	andeq	r1, r0, ip, asr #24
   139a8:	andeq	r1, r0, r8, asr #24
   139ac:	andeq	r1, r0, ip, asr r7
   139b0:	andeq	r1, r0, r8, ror #14
   139b4:	andeq	r1, r0, ip, lsr #24
   139b8:	andeq	r0, r0, r0, lsl r1
   139bc:	push	{r4, lr}
   139c0:	mov	r4, r0
   139c4:	bl	11084 <malloc@plt>
   139c8:	rsbs	r3, r0, #1
   139cc:	movcc	r3, #0
   139d0:	cmp	r4, #0
   139d4:	moveq	r3, #0
   139d8:	cmp	r3, #0
   139dc:	popeq	{r4, pc}
   139e0:	bl	13bd0 <close_stdout@@Base+0x21cc>
   139e4:	push	{r3, r4, r5, lr}
   139e8:	mov	r4, r0
   139ec:	mvn	r0, #0
   139f0:	mov	r5, r1
   139f4:	bl	148bc <close_stdout@@Base+0x2eb8>
   139f8:	cmp	r0, r4
   139fc:	bcc	13a0c <close_stdout@@Base+0x2008>
   13a00:	mul	r0, r4, r5
   13a04:	pop	{r3, r4, r5, lr}
   13a08:	b	139bc <close_stdout@@Base+0x1fb8>
   13a0c:	bl	13bd0 <close_stdout@@Base+0x21cc>
   13a10:	b	139bc <close_stdout@@Base+0x1fb8>
   13a14:	rsbs	r3, r1, #1
   13a18:	push	{r4, lr}
   13a1c:	movcc	r3, #0
   13a20:	cmp	r0, #0
   13a24:	mov	r4, r1
   13a28:	moveq	r3, #0
   13a2c:	cmp	r3, #0
   13a30:	bne	13a54 <close_stdout@@Base+0x2050>
   13a34:	bl	10fdc <realloc@plt>
   13a38:	rsbs	r3, r0, #1
   13a3c:	movcc	r3, #0
   13a40:	cmp	r4, #0
   13a44:	moveq	r3, #0
   13a48:	cmp	r3, #0
   13a4c:	popeq	{r4, pc}
   13a50:	bl	13bd0 <close_stdout@@Base+0x21cc>
   13a54:	bl	10f7c <free@plt>
   13a58:	mov	r0, #0
   13a5c:	pop	{r4, pc}
   13a60:	push	{r4, r5, r6, lr}
   13a64:	mov	r5, r1
   13a68:	mov	r6, r0
   13a6c:	mov	r1, r2
   13a70:	mvn	r0, #0
   13a74:	mov	r4, r2
   13a78:	bl	148bc <close_stdout@@Base+0x2eb8>
   13a7c:	cmp	r0, r5
   13a80:	bcc	13a94 <close_stdout@@Base+0x2090>
   13a84:	mov	r0, r6
   13a88:	mul	r1, r5, r4
   13a8c:	pop	{r4, r5, r6, lr}
   13a90:	b	13a14 <close_stdout@@Base+0x2010>
   13a94:	bl	13bd0 <close_stdout@@Base+0x21cc>
   13a98:	push	{r3, r4, r5, r6, r7, lr}
   13a9c:	subs	r7, r0, #0
   13aa0:	mov	r5, r1
   13aa4:	mov	r6, r2
   13aa8:	ldr	r4, [r1]
   13aac:	beq	13ae4 <close_stdout@@Base+0x20e0>
   13ab0:	movw	r0, #43690	; 0xaaaa
   13ab4:	mov	r1, r2
   13ab8:	bfi	r0, r0, #16, #16
   13abc:	bl	148bc <close_stdout@@Base+0x2eb8>
   13ac0:	cmp	r4, r0
   13ac4:	addcc	r3, r4, #1
   13ac8:	addcc	r4, r4, r3, lsr #1
   13acc:	bcs	13b08 <close_stdout@@Base+0x2104>
   13ad0:	str	r4, [r5]
   13ad4:	mov	r0, r7
   13ad8:	mul	r1, r6, r4
   13adc:	pop	{r3, r4, r5, r6, r7, lr}
   13ae0:	b	13a14 <close_stdout@@Base+0x2010>
   13ae4:	cmp	r4, #0
   13ae8:	bne	13ad0 <close_stdout@@Base+0x20cc>
   13aec:	mov	r0, #64	; 0x40
   13af0:	mov	r1, r2
   13af4:	bl	148bc <close_stdout@@Base+0x2eb8>
   13af8:	cmp	r0, #0
   13afc:	movne	r4, r0
   13b00:	addeq	r4, r0, #1
   13b04:	b	13ad0 <close_stdout@@Base+0x20cc>
   13b08:	bl	13bd0 <close_stdout@@Base+0x21cc>
   13b0c:	cmp	r0, #0
   13b10:	push	{r3, lr}
   13b14:	ldr	r3, [r1]
   13b18:	beq	13b44 <close_stdout@@Base+0x2140>
   13b1c:	movw	r2, #43689	; 0xaaa9
   13b20:	movt	r2, #43690	; 0xaaaa
   13b24:	cmp	r3, r2
   13b28:	addls	r2, r3, #1
   13b2c:	addls	r3, r3, r2, lsr #1
   13b30:	bhi	13b5c <close_stdout@@Base+0x2158>
   13b34:	str	r3, [r1]
   13b38:	mov	r1, r3
   13b3c:	pop	{r3, lr}
   13b40:	b	13a14 <close_stdout@@Base+0x2010>
   13b44:	cmp	r3, #0
   13b48:	moveq	r3, #64	; 0x40
   13b4c:	str	r3, [r1]
   13b50:	mov	r1, r3
   13b54:	pop	{r3, lr}
   13b58:	b	13a14 <close_stdout@@Base+0x2010>
   13b5c:	bl	13bd0 <close_stdout@@Base+0x21cc>
   13b60:	push	{r4, lr}
   13b64:	mov	r4, r0
   13b68:	bl	139bc <close_stdout@@Base+0x1fb8>
   13b6c:	mov	r2, r4
   13b70:	mov	r1, #0
   13b74:	pop	{r4, lr}
   13b78:	b	11114 <memset@plt>
   13b7c:	push	{r3, lr}
   13b80:	bl	10f34 <calloc@plt>
   13b84:	cmp	r0, #0
   13b88:	popne	{r3, pc}
   13b8c:	bl	13bd0 <close_stdout@@Base+0x21cc>
   13b90:	push	{r3, r4, r5, lr}
   13b94:	mov	r4, r1
   13b98:	mov	r5, r0
   13b9c:	mov	r0, r1
   13ba0:	bl	139bc <close_stdout@@Base+0x1fb8>
   13ba4:	mov	r1, r5
   13ba8:	mov	r2, r4
   13bac:	pop	{r3, r4, r5, lr}
   13bb0:	b	10f94 <memcpy@plt>
   13bb4:	push	{r4, lr}
   13bb8:	mov	r4, r0
   13bbc:	bl	110d8 <strlen@plt>
   13bc0:	add	r1, r0, #1
   13bc4:	mov	r0, r4
   13bc8:	pop	{r4, lr}
   13bcc:	b	13b90 <close_stdout@@Base+0x218c>
   13bd0:	ldr	r3, [pc, #64]	; 13c18 <close_stdout@@Base+0x2214>
   13bd4:	mov	r2, #5
   13bd8:	ldr	ip, [pc, #60]	; 13c1c <close_stdout@@Base+0x2218>
   13bdc:	mov	r0, #0
   13be0:	add	r3, pc, r3
   13be4:	ldr	r1, [pc, #52]	; 13c20 <close_stdout@@Base+0x221c>
   13be8:	push	{r4, lr}
   13bec:	add	r1, pc, r1
   13bf0:	ldr	r3, [r3, ip]
   13bf4:	ldr	r4, [r3]
   13bf8:	bl	10fc4 <dcgettext@plt>
   13bfc:	ldr	r2, [pc, #32]	; 13c24 <close_stdout@@Base+0x2220>
   13c00:	mov	r1, #0
   13c04:	add	r2, pc, r2
   13c08:	mov	r3, r0
   13c0c:	mov	r0, r4
   13c10:	bl	11054 <error@plt>
   13c14:	bl	111b0 <abort@plt>
   13c18:	andeq	r2, r1, r8, lsl r4
   13c1c:	andeq	r0, r0, r4, lsl r1
   13c20:	andeq	r1, r0, r0, lsr sl
   13c24:	andeq	r1, r0, r0, asr #12
   13c28:	ldr	ip, [pc, #1584]	; 14260 <close_stdout@@Base+0x285c>
   13c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c30:	mov	r7, r2
   13c34:	ldr	r2, [pc, #1576]	; 14264 <close_stdout@@Base+0x2860>
   13c38:	add	ip, pc, ip
   13c3c:	mov	r9, r3
   13c40:	sub	sp, sp, #28
   13c44:	cmp	r7, #36	; 0x24
   13c48:	mov	r4, r1
   13c4c:	ldr	r2, [ip, r2]
   13c50:	mov	r1, ip
   13c54:	mov	r5, r0
   13c58:	ldr	r8, [sp, #64]	; 0x40
   13c5c:	ldr	r3, [r2]
   13c60:	str	r2, [sp, #12]
   13c64:	str	r3, [sp, #20]
   13c68:	bhi	14240 <close_stdout@@Base+0x283c>
   13c6c:	cmp	r4, #0
   13c70:	mov	fp, #0
   13c74:	addeq	r4, sp, #16
   13c78:	bl	110fc <__errno_location@plt>
   13c7c:	mov	r2, r7
   13c80:	mov	r1, r4
   13c84:	mov	sl, r0
   13c88:	mov	r0, r5
   13c8c:	str	fp, [sl]
   13c90:	bl	10f64 <strtol@plt>
   13c94:	ldr	r7, [r4]
   13c98:	cmp	r7, r5
   13c9c:	mov	r6, r0
   13ca0:	beq	13e38 <close_stdout@@Base+0x2434>
   13ca4:	ldr	fp, [sl]
   13ca8:	cmp	fp, #0
   13cac:	bne	13ce8 <close_stdout@@Base+0x22e4>
   13cb0:	cmp	r8, #0
   13cb4:	beq	13cc4 <close_stdout@@Base+0x22c0>
   13cb8:	ldrb	r5, [r7]
   13cbc:	cmp	r5, #0
   13cc0:	bne	13cf8 <close_stdout@@Base+0x22f4>
   13cc4:	mov	r0, fp
   13cc8:	str	r6, [r9]
   13ccc:	ldr	r1, [sp, #12]
   13cd0:	ldr	r2, [sp, #20]
   13cd4:	ldr	r3, [r1]
   13cd8:	cmp	r2, r3
   13cdc:	bne	1423c <close_stdout@@Base+0x2838>
   13ce0:	add	sp, sp, #28
   13ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce8:	cmp	fp, #34	; 0x22
   13cec:	beq	13e68 <close_stdout@@Base+0x2464>
   13cf0:	mov	r0, #4
   13cf4:	b	13ccc <close_stdout@@Base+0x22c8>
   13cf8:	mov	r0, r8
   13cfc:	mov	r1, r5
   13d00:	bl	110e4 <strchr@plt>
   13d04:	cmp	r0, #0
   13d08:	beq	13e2c <close_stdout@@Base+0x2428>
   13d0c:	mov	r0, r8
   13d10:	mov	r1, #48	; 0x30
   13d14:	bl	110e4 <strchr@plt>
   13d18:	cmp	r0, #0
   13d1c:	beq	13d3c <close_stdout@@Base+0x2338>
   13d20:	ldrb	r2, [r7, #1]
   13d24:	cmp	r2, #68	; 0x44
   13d28:	beq	13e70 <close_stdout@@Base+0x246c>
   13d2c:	cmp	r2, #105	; 0x69
   13d30:	beq	141fc <close_stdout@@Base+0x27f8>
   13d34:	cmp	r2, #66	; 0x42
   13d38:	beq	13e70 <close_stdout@@Base+0x246c>
   13d3c:	mov	sl, #1
   13d40:	mov	r8, #1024	; 0x400
   13d44:	sub	r5, r5, #66	; 0x42
   13d48:	cmp	r5, #53	; 0x35
   13d4c:	addls	pc, pc, r5, lsl #2
   13d50:	b	13e2c <close_stdout@@Base+0x2428>
   13d54:	b	13fa0 <close_stdout@@Base+0x259c>
   13d58:	b	13e2c <close_stdout@@Base+0x2428>
   13d5c:	b	13e2c <close_stdout@@Base+0x2428>
   13d60:	b	13f38 <close_stdout@@Base+0x2534>
   13d64:	b	13e2c <close_stdout@@Base+0x2428>
   13d68:	b	13ed0 <close_stdout@@Base+0x24cc>
   13d6c:	b	13e2c <close_stdout@@Base+0x2428>
   13d70:	b	13e2c <close_stdout@@Base+0x2428>
   13d74:	b	13e2c <close_stdout@@Base+0x2428>
   13d78:	b	13e9c <close_stdout@@Base+0x2498>
   13d7c:	b	13e2c <close_stdout@@Base+0x2428>
   13d80:	b	1419c <close_stdout@@Base+0x2798>
   13d84:	b	13e2c <close_stdout@@Base+0x2428>
   13d88:	b	13e2c <close_stdout@@Base+0x2428>
   13d8c:	b	14134 <close_stdout@@Base+0x2730>
   13d90:	b	13e2c <close_stdout@@Base+0x2428>
   13d94:	b	13e2c <close_stdout@@Base+0x2428>
   13d98:	b	13e2c <close_stdout@@Base+0x2428>
   13d9c:	b	140cc <close_stdout@@Base+0x26c8>
   13da0:	b	13e2c <close_stdout@@Base+0x2428>
   13da4:	b	13e2c <close_stdout@@Base+0x2428>
   13da8:	b	13e2c <close_stdout@@Base+0x2428>
   13dac:	b	13e2c <close_stdout@@Base+0x2428>
   13db0:	b	14064 <close_stdout@@Base+0x2660>
   13db4:	b	13ffc <close_stdout@@Base+0x25f8>
   13db8:	b	13e2c <close_stdout@@Base+0x2428>
   13dbc:	b	13e2c <close_stdout@@Base+0x2428>
   13dc0:	b	13e2c <close_stdout@@Base+0x2428>
   13dc4:	b	13e2c <close_stdout@@Base+0x2428>
   13dc8:	b	13e2c <close_stdout@@Base+0x2428>
   13dcc:	b	13e2c <close_stdout@@Base+0x2428>
   13dd0:	b	13e2c <close_stdout@@Base+0x2428>
   13dd4:	b	13fe0 <close_stdout@@Base+0x25dc>
   13dd8:	b	13e7c <close_stdout@@Base+0x2478>
   13ddc:	b	13e2c <close_stdout@@Base+0x2428>
   13de0:	b	13e2c <close_stdout@@Base+0x2428>
   13de4:	b	13e2c <close_stdout@@Base+0x2428>
   13de8:	b	13ed0 <close_stdout@@Base+0x24cc>
   13dec:	b	13e2c <close_stdout@@Base+0x2428>
   13df0:	b	13e2c <close_stdout@@Base+0x2428>
   13df4:	b	13e2c <close_stdout@@Base+0x2428>
   13df8:	b	13e9c <close_stdout@@Base+0x2498>
   13dfc:	b	13e2c <close_stdout@@Base+0x2428>
   13e00:	b	1419c <close_stdout@@Base+0x2798>
   13e04:	b	13e2c <close_stdout@@Base+0x2428>
   13e08:	b	13e2c <close_stdout@@Base+0x2428>
   13e0c:	b	13e2c <close_stdout@@Base+0x2428>
   13e10:	b	13e2c <close_stdout@@Base+0x2428>
   13e14:	b	13e2c <close_stdout@@Base+0x2428>
   13e18:	b	13e2c <close_stdout@@Base+0x2428>
   13e1c:	b	140cc <close_stdout@@Base+0x26c8>
   13e20:	b	13e2c <close_stdout@@Base+0x2428>
   13e24:	b	13e2c <close_stdout@@Base+0x2428>
   13e28:	b	13fc4 <close_stdout@@Base+0x25c0>
   13e2c:	str	r6, [r9]
   13e30:	orr	r0, fp, #2
   13e34:	b	13ccc <close_stdout@@Base+0x22c8>
   13e38:	cmp	r8, fp
   13e3c:	beq	13cf0 <close_stdout@@Base+0x22ec>
   13e40:	ldrb	r5, [r5]
   13e44:	cmp	r5, fp
   13e48:	beq	13cf0 <close_stdout@@Base+0x22ec>
   13e4c:	mov	r0, r8
   13e50:	mov	r1, r5
   13e54:	bl	110e4 <strchr@plt>
   13e58:	cmp	r0, fp
   13e5c:	movne	r6, #1
   13e60:	bne	13d0c <close_stdout@@Base+0x2308>
   13e64:	b	13cf0 <close_stdout@@Base+0x22ec>
   13e68:	mov	fp, #1
   13e6c:	b	13cb0 <close_stdout@@Base+0x22ac>
   13e70:	mov	sl, #2
   13e74:	mov	r8, #1000	; 0x3e8
   13e78:	b	13d44 <close_stdout@@Base+0x2340>
   13e7c:	mov	r5, #0
   13e80:	add	r2, r7, sl
   13e84:	str	r2, [r4]
   13e88:	ldrb	r2, [r7, sl]
   13e8c:	orr	fp, fp, r5
   13e90:	cmp	r2, #0
   13e94:	orrne	fp, fp, #2
   13e98:	b	13cc4 <close_stdout@@Base+0x22c0>
   13e9c:	mov	r0, #-2147483648	; 0x80000000
   13ea0:	mov	r1, r8
   13ea4:	bl	14ac8 <close_stdout@@Base+0x30c4>
   13ea8:	cmp	r6, r0
   13eac:	blt	14214 <close_stdout@@Base+0x2810>
   13eb0:	mvn	r0, #-2147483648	; 0x80000000
   13eb4:	mov	r1, r8
   13eb8:	bl	14ac8 <close_stdout@@Base+0x30c4>
   13ebc:	cmp	r6, r0
   13ec0:	bgt	13fb8 <close_stdout@@Base+0x25b4>
   13ec4:	mul	r6, r8, r6
   13ec8:	mov	r5, #0
   13ecc:	b	13e80 <close_stdout@@Base+0x247c>
   13ed0:	mov	r0, #-2147483648	; 0x80000000
   13ed4:	mov	r1, r8
   13ed8:	bl	14ac8 <close_stdout@@Base+0x30c4>
   13edc:	mov	r5, #0
   13ee0:	mov	r2, #3
   13ee4:	mov	ip, r0
   13ee8:	cmp	ip, r6
   13eec:	movgt	r6, #-2147483648	; 0x80000000
   13ef0:	movgt	r1, #1
   13ef4:	bgt	13f28 <close_stdout@@Base+0x2524>
   13ef8:	mov	r1, r8
   13efc:	mvn	r0, #-2147483648	; 0x80000000
   13f00:	str	r2, [sp, #8]
   13f04:	str	ip, [sp, #4]
   13f08:	bl	14ac8 <close_stdout@@Base+0x30c4>
   13f0c:	ldr	r2, [sp, #8]
   13f10:	ldr	ip, [sp, #4]
   13f14:	cmp	r0, r6
   13f18:	mulge	r6, r8, r6
   13f1c:	movge	r1, #0
   13f20:	mvnlt	r6, #-2147483648	; 0x80000000
   13f24:	movlt	r1, #1
   13f28:	subs	r2, r2, #1
   13f2c:	orr	r5, r5, r1
   13f30:	bne	13ee8 <close_stdout@@Base+0x24e4>
   13f34:	b	13e80 <close_stdout@@Base+0x247c>
   13f38:	mov	r0, #-2147483648	; 0x80000000
   13f3c:	mov	r1, r8
   13f40:	bl	14ac8 <close_stdout@@Base+0x30c4>
   13f44:	mov	r5, #0
   13f48:	mov	r2, #6
   13f4c:	mov	ip, r0
   13f50:	cmp	ip, r6
   13f54:	movgt	r6, #-2147483648	; 0x80000000
   13f58:	movgt	r1, #1
   13f5c:	bgt	13f90 <close_stdout@@Base+0x258c>
   13f60:	mov	r1, r8
   13f64:	mvn	r0, #-2147483648	; 0x80000000
   13f68:	str	r2, [sp, #8]
   13f6c:	str	ip, [sp, #4]
   13f70:	bl	14ac8 <close_stdout@@Base+0x30c4>
   13f74:	ldr	r2, [sp, #8]
   13f78:	ldr	ip, [sp, #4]
   13f7c:	cmp	r0, r6
   13f80:	mulge	r6, r8, r6
   13f84:	movge	r1, #0
   13f88:	mvnlt	r6, #-2147483648	; 0x80000000
   13f8c:	movlt	r1, #1
   13f90:	subs	r2, r2, #1
   13f94:	orr	r5, r5, r1
   13f98:	bne	13f50 <close_stdout@@Base+0x254c>
   13f9c:	b	13e80 <close_stdout@@Base+0x247c>
   13fa0:	cmn	r6, #2097152	; 0x200000
   13fa4:	blt	14214 <close_stdout@@Base+0x2810>
   13fa8:	cmp	r6, #2097152	; 0x200000
   13fac:	lsllt	r6, r6, #10
   13fb0:	movlt	r5, #0
   13fb4:	blt	13e80 <close_stdout@@Base+0x247c>
   13fb8:	mvn	r6, #-2147483648	; 0x80000000
   13fbc:	mov	r5, #1
   13fc0:	b	13e80 <close_stdout@@Base+0x247c>
   13fc4:	cmp	r6, #-1073741824	; 0xc0000000
   13fc8:	blt	14214 <close_stdout@@Base+0x2810>
   13fcc:	cmn	r6, #-1073741823	; 0xc0000001
   13fd0:	lslle	r6, r6, #1
   13fd4:	movle	r5, #0
   13fd8:	ble	13e80 <close_stdout@@Base+0x247c>
   13fdc:	b	13fb8 <close_stdout@@Base+0x25b4>
   13fe0:	cmn	r6, #4194304	; 0x400000
   13fe4:	blt	14214 <close_stdout@@Base+0x2810>
   13fe8:	cmp	r6, #4194304	; 0x400000
   13fec:	lsllt	r6, r6, #9
   13ff0:	movlt	r5, #0
   13ff4:	blt	13e80 <close_stdout@@Base+0x247c>
   13ff8:	b	13fb8 <close_stdout@@Base+0x25b4>
   13ffc:	mov	r0, #-2147483648	; 0x80000000
   14000:	mov	r1, r8
   14004:	bl	14ac8 <close_stdout@@Base+0x30c4>
   14008:	mov	r5, #0
   1400c:	mov	r2, #7
   14010:	mov	ip, r0
   14014:	cmp	ip, r6
   14018:	movgt	r6, #-2147483648	; 0x80000000
   1401c:	movgt	r1, #1
   14020:	bgt	14054 <close_stdout@@Base+0x2650>
   14024:	mov	r1, r8
   14028:	mvn	r0, #-2147483648	; 0x80000000
   1402c:	str	r2, [sp, #8]
   14030:	str	ip, [sp, #4]
   14034:	bl	14ac8 <close_stdout@@Base+0x30c4>
   14038:	ldr	r2, [sp, #8]
   1403c:	ldr	ip, [sp, #4]
   14040:	cmp	r0, r6
   14044:	mulge	r6, r8, r6
   14048:	movge	r1, #0
   1404c:	mvnlt	r6, #-2147483648	; 0x80000000
   14050:	movlt	r1, #1
   14054:	subs	r2, r2, #1
   14058:	orr	r5, r5, r1
   1405c:	bne	14014 <close_stdout@@Base+0x2610>
   14060:	b	13e80 <close_stdout@@Base+0x247c>
   14064:	mov	r0, #-2147483648	; 0x80000000
   14068:	mov	r1, r8
   1406c:	bl	14ac8 <close_stdout@@Base+0x30c4>
   14070:	mov	r5, #0
   14074:	mov	r2, #8
   14078:	mov	ip, r0
   1407c:	cmp	ip, r6
   14080:	movgt	r6, #-2147483648	; 0x80000000
   14084:	movgt	r1, #1
   14088:	bgt	140bc <close_stdout@@Base+0x26b8>
   1408c:	mov	r1, r8
   14090:	mvn	r0, #-2147483648	; 0x80000000
   14094:	str	r2, [sp, #8]
   14098:	str	ip, [sp, #4]
   1409c:	bl	14ac8 <close_stdout@@Base+0x30c4>
   140a0:	ldr	r2, [sp, #8]
   140a4:	ldr	ip, [sp, #4]
   140a8:	cmp	r0, r6
   140ac:	mulge	r6, r8, r6
   140b0:	movge	r1, #0
   140b4:	mvnlt	r6, #-2147483648	; 0x80000000
   140b8:	movlt	r1, #1
   140bc:	subs	r2, r2, #1
   140c0:	orr	r5, r5, r1
   140c4:	bne	1407c <close_stdout@@Base+0x2678>
   140c8:	b	13e80 <close_stdout@@Base+0x247c>
   140cc:	mov	r0, #-2147483648	; 0x80000000
   140d0:	mov	r1, r8
   140d4:	bl	14ac8 <close_stdout@@Base+0x30c4>
   140d8:	mov	r5, #0
   140dc:	mov	r2, #4
   140e0:	mov	ip, r0
   140e4:	cmp	ip, r6
   140e8:	movgt	r6, #-2147483648	; 0x80000000
   140ec:	movgt	r1, #1
   140f0:	bgt	14124 <close_stdout@@Base+0x2720>
   140f4:	mov	r1, r8
   140f8:	mvn	r0, #-2147483648	; 0x80000000
   140fc:	str	r2, [sp, #8]
   14100:	str	ip, [sp, #4]
   14104:	bl	14ac8 <close_stdout@@Base+0x30c4>
   14108:	ldr	r2, [sp, #8]
   1410c:	ldr	ip, [sp, #4]
   14110:	cmp	r0, r6
   14114:	mulge	r6, r8, r6
   14118:	movge	r1, #0
   1411c:	mvnlt	r6, #-2147483648	; 0x80000000
   14120:	movlt	r1, #1
   14124:	subs	r2, r2, #1
   14128:	orr	r5, r5, r1
   1412c:	bne	140e4 <close_stdout@@Base+0x26e0>
   14130:	b	13e80 <close_stdout@@Base+0x247c>
   14134:	mov	r0, #-2147483648	; 0x80000000
   14138:	mov	r1, r8
   1413c:	bl	14ac8 <close_stdout@@Base+0x30c4>
   14140:	mov	r5, #0
   14144:	mov	r2, #5
   14148:	mov	ip, r0
   1414c:	cmp	ip, r6
   14150:	movgt	r6, #-2147483648	; 0x80000000
   14154:	movgt	r1, #1
   14158:	bgt	1418c <close_stdout@@Base+0x2788>
   1415c:	mov	r1, r8
   14160:	mvn	r0, #-2147483648	; 0x80000000
   14164:	str	r2, [sp, #8]
   14168:	str	ip, [sp, #4]
   1416c:	bl	14ac8 <close_stdout@@Base+0x30c4>
   14170:	ldr	r2, [sp, #8]
   14174:	ldr	ip, [sp, #4]
   14178:	cmp	r0, r6
   1417c:	mulge	r6, r8, r6
   14180:	movge	r1, #0
   14184:	mvnlt	r6, #-2147483648	; 0x80000000
   14188:	movlt	r1, #1
   1418c:	subs	r2, r2, #1
   14190:	orr	r5, r5, r1
   14194:	bne	1414c <close_stdout@@Base+0x2748>
   14198:	b	13e80 <close_stdout@@Base+0x247c>
   1419c:	mov	r0, #-2147483648	; 0x80000000
   141a0:	mov	r1, r8
   141a4:	bl	14ac8 <close_stdout@@Base+0x30c4>
   141a8:	cmp	r6, r0
   141ac:	mov	r5, r0
   141b0:	blt	14220 <close_stdout@@Base+0x281c>
   141b4:	mvn	r0, #-2147483648	; 0x80000000
   141b8:	mov	r1, r8
   141bc:	bl	14ac8 <close_stdout@@Base+0x30c4>
   141c0:	cmp	r6, r0
   141c4:	bgt	14230 <close_stdout@@Base+0x282c>
   141c8:	mul	r3, r6, r8
   141cc:	mov	r2, #0
   141d0:	cmp	r3, r5
   141d4:	movlt	r6, #-2147483648	; 0x80000000
   141d8:	movlt	r5, #1
   141dc:	blt	141f4 <close_stdout@@Base+0x27f0>
   141e0:	cmp	r0, r3
   141e4:	mvnlt	r6, #-2147483648	; 0x80000000
   141e8:	movlt	r5, #1
   141ec:	mulge	r6, r3, r8
   141f0:	movge	r5, #0
   141f4:	orr	r5, r5, r2
   141f8:	b	13e80 <close_stdout@@Base+0x247c>
   141fc:	ldrb	sl, [r7, #2]
   14200:	mov	r8, #1024	; 0x400
   14204:	cmp	sl, #66	; 0x42
   14208:	moveq	sl, #3
   1420c:	movne	sl, #1
   14210:	b	13d44 <close_stdout@@Base+0x2340>
   14214:	mov	r6, #-2147483648	; 0x80000000
   14218:	mov	r5, #1
   1421c:	b	13e80 <close_stdout@@Base+0x247c>
   14220:	mov	r2, #1
   14224:	mov	r6, #-2147483648	; 0x80000000
   14228:	mov	r5, r2
   1422c:	b	141f4 <close_stdout@@Base+0x27f0>
   14230:	mov	r2, #1
   14234:	mvn	r3, #-2147483648	; 0x80000000
   14238:	b	141e0 <close_stdout@@Base+0x27dc>
   1423c:	bl	10fd0 <__stack_chk_fail@plt>
   14240:	ldr	r0, [pc, #32]	; 14268 <close_stdout@@Base+0x2864>
   14244:	mov	r2, #96	; 0x60
   14248:	ldr	r1, [pc, #28]	; 1426c <close_stdout@@Base+0x2868>
   1424c:	ldr	r3, [pc, #28]	; 14270 <close_stdout@@Base+0x286c>
   14250:	add	r0, pc, r0
   14254:	add	r1, pc, r1
   14258:	add	r3, pc, r3
   1425c:	bl	111c8 <__assert_fail@plt>
   14260:	andeq	r2, r1, r0, asr #7
   14264:	strdeq	r0, [r0], -r4
   14268:	andeq	r1, r0, r8, ror #7
   1426c:	andeq	r1, r0, ip, lsl #8
   14270:	ldrdeq	r1, [r0], -r8
   14274:	push	{r4, r5, r6, lr}
   14278:	mov	r4, r0
   1427c:	bl	1103c <__fpending@plt>
   14280:	mov	r6, r0
   14284:	mov	r0, r4
   14288:	ldr	r4, [r4]
   1428c:	bl	14714 <close_stdout@@Base+0x2d10>
   14290:	and	r4, r4, #32
   14294:	adds	r5, r0, #0
   14298:	movne	r5, #1
   1429c:	cmp	r4, #0
   142a0:	bne	142c0 <close_stdout@@Base+0x28bc>
   142a4:	cmp	r5, #0
   142a8:	beq	142b8 <close_stdout@@Base+0x28b4>
   142ac:	cmp	r6, #0
   142b0:	beq	142dc <close_stdout@@Base+0x28d8>
   142b4:	mvn	r4, #0
   142b8:	mov	r0, r4
   142bc:	pop	{r4, r5, r6, pc}
   142c0:	cmp	r5, #0
   142c4:	bne	142b4 <close_stdout@@Base+0x28b0>
   142c8:	bl	110fc <__errno_location@plt>
   142cc:	mvn	r4, #0
   142d0:	str	r5, [r0]
   142d4:	mov	r0, r4
   142d8:	pop	{r4, r5, r6, pc}
   142dc:	bl	110fc <__errno_location@plt>
   142e0:	ldr	r4, [r0]
   142e4:	subs	r4, r4, #9
   142e8:	mvnne	r4, #0
   142ec:	mov	r0, r4
   142f0:	pop	{r4, r5, r6, pc}
   142f4:	ldr	r3, [pc, #984]	; 146d4 <close_stdout@@Base+0x2cd0>
   142f8:	mov	r0, #14
   142fc:	ldr	r2, [pc, #980]	; 146d8 <close_stdout@@Base+0x2cd4>
   14300:	add	r3, pc, r3
   14304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14308:	sub	sp, sp, #132	; 0x84
   1430c:	ldr	r6, [r3, r2]
   14310:	ldr	r3, [r6]
   14314:	str	r3, [sp, #124]	; 0x7c
   14318:	bl	1118c <nl_langinfo@plt>
   1431c:	subs	r5, r0, #0
   14320:	beq	143d4 <close_stdout@@Base+0x29d0>
   14324:	ldr	r3, [pc, #944]	; 146dc <close_stdout@@Base+0x2cd8>
   14328:	ldr	r4, [pc, r3]
   1432c:	cmp	r4, #0
   14330:	beq	143e0 <close_stdout@@Base+0x29dc>
   14334:	ldrb	r7, [r4]
   14338:	cmp	r7, #0
   1433c:	bne	14370 <close_stdout@@Base+0x296c>
   14340:	b	143a8 <close_stdout@@Base+0x29a4>
   14344:	mov	r0, r4
   14348:	bl	110d8 <strlen@plt>
   1434c:	add	r0, r0, #1
   14350:	add	r7, r4, r0
   14354:	mov	r0, r7
   14358:	bl	110d8 <strlen@plt>
   1435c:	add	r0, r0, #1
   14360:	add	r4, r7, r0
   14364:	ldrb	r7, [r7, r0]
   14368:	cmp	r7, #0
   1436c:	beq	143a8 <close_stdout@@Base+0x29a4>
   14370:	mov	r0, r5
   14374:	mov	r1, r4
   14378:	bl	10f58 <strcmp@plt>
   1437c:	cmp	r0, #0
   14380:	beq	14398 <close_stdout@@Base+0x2994>
   14384:	cmp	r7, #42	; 0x2a
   14388:	bne	14344 <close_stdout@@Base+0x2940>
   1438c:	ldrb	r3, [r4, #1]
   14390:	cmp	r3, #0
   14394:	bne	14344 <close_stdout@@Base+0x2940>
   14398:	mov	r0, r4
   1439c:	bl	110d8 <strlen@plt>
   143a0:	add	r0, r0, #1
   143a4:	add	r5, r4, r0
   143a8:	ldrb	r3, [r5]
   143ac:	cmp	r3, #0
   143b0:	ldreq	r5, [pc, #808]	; 146e0 <close_stdout@@Base+0x2cdc>
   143b4:	addeq	r5, pc, r5
   143b8:	ldr	r2, [sp, #124]	; 0x7c
   143bc:	mov	r0, r5
   143c0:	ldr	r3, [r6]
   143c4:	cmp	r2, r3
   143c8:	bne	146a8 <close_stdout@@Base+0x2ca4>
   143cc:	add	sp, sp, #132	; 0x84
   143d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d4:	ldr	r5, [pc, #776]	; 146e4 <close_stdout@@Base+0x2ce0>
   143d8:	add	r5, pc, r5
   143dc:	b	14324 <close_stdout@@Base+0x2920>
   143e0:	ldr	r0, [pc, #768]	; 146e8 <close_stdout@@Base+0x2ce4>
   143e4:	add	r0, pc, r0
   143e8:	bl	1106c <getenv@plt>
   143ec:	subs	r8, r0, #0
   143f0:	beq	14680 <close_stdout@@Base+0x2c7c>
   143f4:	ldrb	r3, [r8]
   143f8:	cmp	r3, #0
   143fc:	beq	14614 <close_stdout@@Base+0x2c10>
   14400:	bl	110d8 <strlen@plt>
   14404:	subs	sl, r0, #0
   14408:	subne	r3, sl, #1
   1440c:	bne	14624 <close_stdout@@Base+0x2c20>
   14410:	mov	r9, #0
   14414:	mov	fp, r9
   14418:	add	r9, sl, r9
   1441c:	add	r0, r9, #14
   14420:	bl	11084 <malloc@plt>
   14424:	subs	r7, r0, #0
   14428:	beq	14674 <close_stdout@@Base+0x2c70>
   1442c:	mov	r1, r8
   14430:	mov	r2, sl
   14434:	bl	10f94 <memcpy@plt>
   14438:	cmp	fp, #0
   1443c:	add	ip, r7, r9
   14440:	movne	r3, #47	; 0x2f
   14444:	strbne	r3, [r7, sl]
   14448:	ldr	r3, [pc, #668]	; 146ec <close_stdout@@Base+0x2ce8>
   1444c:	add	r3, pc, r3
   14450:	ldm	r3!, {r0, r1, r2}
   14454:	ldrh	r3, [r3]
   14458:	str	r0, [r7, r9]
   1445c:	mov	r0, r7
   14460:	str	r1, [ip, #4]
   14464:	mov	r1, #32768	; 0x8000
   14468:	strh	r3, [ip, #12]
   1446c:	str	r2, [ip, #8]
   14470:	bl	11060 <open64@plt>
   14474:	subs	r8, r0, #0
   14478:	blt	1463c <close_stdout@@Base+0x2c38>
   1447c:	ldr	r1, [pc, #620]	; 146f0 <close_stdout@@Base+0x2cec>
   14480:	add	r1, pc, r1
   14484:	bl	10f28 <fdopen@plt>
   14488:	subs	fp, r0, #0
   1448c:	beq	14694 <close_stdout@@Base+0x2c90>
   14490:	ldr	r0, [pc, #604]	; 146f4 <close_stdout@@Base+0x2cf0>
   14494:	add	sl, sp, #20
   14498:	add	r9, sp, #72	; 0x48
   1449c:	mov	r8, #0
   144a0:	add	r0, pc, r0
   144a4:	str	r0, [sp, #12]
   144a8:	ldr	r3, [fp, #4]
   144ac:	ldr	r2, [fp, #8]
   144b0:	cmp	r3, r2
   144b4:	bcs	145a0 <close_stdout@@Base+0x2b9c>
   144b8:	add	r2, r3, #1
   144bc:	str	r2, [fp, #4]
   144c0:	ldrb	r0, [r3]
   144c4:	cmp	r0, #32
   144c8:	beq	144a8 <close_stdout@@Base+0x2aa4>
   144cc:	sub	r3, r0, #9
   144d0:	cmp	r3, #1
   144d4:	bls	144a8 <close_stdout@@Base+0x2aa4>
   144d8:	cmp	r0, #35	; 0x23
   144dc:	beq	145b4 <close_stdout@@Base+0x2bb0>
   144e0:	mov	r1, fp
   144e4:	bl	110f0 <ungetc@plt>
   144e8:	mov	r0, fp
   144ec:	ldr	r1, [sp, #12]
   144f0:	mov	r2, sl
   144f4:	mov	r3, r9
   144f8:	bl	11120 <fscanf@plt>
   144fc:	cmp	r0, #1
   14500:	ble	145e4 <close_stdout@@Base+0x2be0>
   14504:	mov	r0, sl
   14508:	bl	110d8 <strlen@plt>
   1450c:	str	r0, [sp, #8]
   14510:	mov	r0, r9
   14514:	bl	110d8 <strlen@plt>
   14518:	cmp	r8, #0
   1451c:	mov	r2, r0
   14520:	bne	14648 <close_stdout@@Base+0x2c44>
   14524:	ldr	r3, [sp, #8]
   14528:	str	r2, [sp]
   1452c:	add	r8, r0, r3
   14530:	add	r0, r8, #3
   14534:	add	r8, r8, #2
   14538:	bl	11084 <malloc@plt>
   1453c:	ldr	r2, [sp]
   14540:	mov	r3, r0
   14544:	cmp	r3, #0
   14548:	beq	146ac <close_stdout@@Base+0x2ca8>
   1454c:	ldr	r0, [sp, #8]
   14550:	movw	r1, #65534	; 0xfffe
   14554:	movt	r1, #65535	; 0xffff
   14558:	rsb	r2, r2, r8
   1455c:	rsb	r1, r0, r1
   14560:	stm	sp, {r2, r3}
   14564:	add	r0, r1, r2
   14568:	mov	r1, sl
   1456c:	add	r0, r3, r0
   14570:	mov	r4, r3
   14574:	bl	11030 <strcpy@plt>
   14578:	ldr	r2, [sp]
   1457c:	ldr	r3, [sp, #4]
   14580:	mov	r1, r9
   14584:	sub	r0, r2, #1
   14588:	add	r0, r3, r0
   1458c:	bl	11030 <strcpy@plt>
   14590:	ldr	r3, [fp, #4]
   14594:	ldr	r2, [fp, #8]
   14598:	cmp	r3, r2
   1459c:	bcc	144b8 <close_stdout@@Base+0x2ab4>
   145a0:	mov	r0, fp
   145a4:	bl	11168 <__uflow@plt>
   145a8:	cmn	r0, #1
   145ac:	beq	145e4 <close_stdout@@Base+0x2be0>
   145b0:	b	144c4 <close_stdout@@Base+0x2ac0>
   145b4:	ldr	r3, [fp, #4]
   145b8:	ldr	r2, [fp, #8]
   145bc:	cmp	r3, r2
   145c0:	bcs	146c8 <close_stdout@@Base+0x2cc4>
   145c4:	add	r2, r3, #1
   145c8:	str	r2, [fp, #4]
   145cc:	ldrb	r0, [r3]
   145d0:	cmp	r0, #10
   145d4:	cmnne	r0, #1
   145d8:	bne	145b4 <close_stdout@@Base+0x2bb0>
   145dc:	cmn	r0, #1
   145e0:	bne	144a8 <close_stdout@@Base+0x2aa4>
   145e4:	mov	r0, fp
   145e8:	bl	14714 <close_stdout@@Base+0x2d10>
   145ec:	cmp	r8, #0
   145f0:	beq	1463c <close_stdout@@Base+0x2c38>
   145f4:	mov	r3, #0
   145f8:	strb	r3, [r4, r8]
   145fc:	mov	r0, r7
   14600:	bl	10f7c <free@plt>
   14604:	ldr	r3, [pc, #236]	; 146f8 <close_stdout@@Base+0x2cf4>
   14608:	add	r3, pc, r3
   1460c:	str	r4, [r3]
   14610:	b	14334 <close_stdout@@Base+0x2930>
   14614:	ldr	r8, [pc, #224]	; 146fc <close_stdout@@Base+0x2cf8>
   14618:	mov	r3, #7
   1461c:	mov	sl, #8
   14620:	add	r8, pc, r8
   14624:	ldrb	r3, [r8, r3]
   14628:	cmp	r3, #47	; 0x2f
   1462c:	movne	r9, #1
   14630:	movne	fp, r9
   14634:	bne	14418 <close_stdout@@Base+0x2a14>
   14638:	b	14410 <close_stdout@@Base+0x2a0c>
   1463c:	ldr	r4, [pc, #188]	; 14700 <close_stdout@@Base+0x2cfc>
   14640:	add	r4, pc, r4
   14644:	b	145fc <close_stdout@@Base+0x2bf8>
   14648:	ldr	r0, [sp, #8]
   1464c:	str	r2, [sp]
   14650:	add	r3, r0, r2
   14654:	mov	r0, r4
   14658:	add	r8, r3, r8
   1465c:	add	r1, r8, #3
   14660:	add	r8, r8, #2
   14664:	bl	10fdc <realloc@plt>
   14668:	ldr	r2, [sp]
   1466c:	mov	r3, r0
   14670:	b	14544 <close_stdout@@Base+0x2b40>
   14674:	ldr	r4, [pc, #136]	; 14704 <close_stdout@@Base+0x2d00>
   14678:	add	r4, pc, r4
   1467c:	b	14604 <close_stdout@@Base+0x2c00>
   14680:	ldr	r8, [pc, #128]	; 14708 <close_stdout@@Base+0x2d04>
   14684:	mov	r3, #7
   14688:	mov	sl, #8
   1468c:	add	r8, pc, r8
   14690:	b	14624 <close_stdout@@Base+0x2c20>
   14694:	ldr	r4, [pc, #112]	; 1470c <close_stdout@@Base+0x2d08>
   14698:	mov	r0, r8
   1469c:	add	r4, pc, r4
   146a0:	bl	111bc <close@plt>
   146a4:	b	145fc <close_stdout@@Base+0x2bf8>
   146a8:	bl	10fd0 <__stack_chk_fail@plt>
   146ac:	mov	r0, r4
   146b0:	ldr	r4, [pc, #88]	; 14710 <close_stdout@@Base+0x2d0c>
   146b4:	bl	10f7c <free@plt>
   146b8:	mov	r0, fp
   146bc:	add	r4, pc, r4
   146c0:	bl	14714 <close_stdout@@Base+0x2d10>
   146c4:	b	145fc <close_stdout@@Base+0x2bf8>
   146c8:	mov	r0, fp
   146cc:	bl	11168 <__uflow@plt>
   146d0:	b	145d0 <close_stdout@@Base+0x2bcc>
   146d4:	strdeq	r1, [r1], -r8
   146d8:	strdeq	r0, [r0], -r4
   146dc:	andeq	r1, r1, r8, lsl #31
   146e0:	andeq	r1, r0, r8, asr #5
   146e4:	andeq	r0, r0, r8, lsr #27
   146e8:	andeq	r1, r0, r0, lsr #5
   146ec:	andeq	r1, r0, r8, asr #4
   146f0:	andeq	r1, r0, r4, lsr #4
   146f4:	andeq	r1, r0, r8, lsl #4
   146f8:	andeq	r1, r1, r8, lsr #25
   146fc:	andeq	r1, r0, r0, asr r0
   14700:	andeq	r0, r0, r0, asr #22
   14704:	andeq	r0, r0, r8, lsl #22
   14708:	andeq	r0, r0, r4, ror #31
   1470c:	andeq	r0, r0, r4, ror #21
   14710:	andeq	r0, r0, r4, asr #21
   14714:	push	{r4, r5, r6, lr}
   14718:	sub	sp, sp, #8
   1471c:	mov	r4, r0
   14720:	bl	11138 <fileno@plt>
   14724:	cmp	r0, #0
   14728:	mov	r0, r4
   1472c:	blt	147a8 <close_stdout@@Base+0x2da4>
   14730:	bl	1109c <__freading@plt>
   14734:	cmp	r0, #0
   14738:	bne	14774 <close_stdout@@Base+0x2d70>
   1473c:	mov	r0, r4
   14740:	bl	147b4 <close_stdout@@Base+0x2db0>
   14744:	cmp	r0, #0
   14748:	beq	147a4 <close_stdout@@Base+0x2da0>
   1474c:	bl	110fc <__errno_location@plt>
   14750:	ldr	r6, [r0]
   14754:	mov	r5, r0
   14758:	mov	r0, r4
   1475c:	bl	11150 <fclose@plt>
   14760:	cmp	r6, #0
   14764:	mvnne	r0, #0
   14768:	strne	r6, [r5]
   1476c:	add	sp, sp, #8
   14770:	pop	{r4, r5, r6, pc}
   14774:	mov	r0, r4
   14778:	bl	11138 <fileno@plt>
   1477c:	mov	r1, #1
   14780:	mov	r2, #0
   14784:	mov	r3, #0
   14788:	str	r1, [sp]
   1478c:	bl	11018 <lseek64@plt>
   14790:	mvn	r2, #0
   14794:	mvn	r3, #0
   14798:	cmp	r1, r3
   1479c:	cmpeq	r0, r2
   147a0:	bne	1473c <close_stdout@@Base+0x2d38>
   147a4:	mov	r0, r4
   147a8:	add	sp, sp, #8
   147ac:	pop	{r4, r5, r6, lr}
   147b0:	b	11150 <fclose@plt>
   147b4:	push	{r4, lr}
   147b8:	subs	r4, r0, #0
   147bc:	sub	sp, sp, #8
   147c0:	beq	147d0 <close_stdout@@Base+0x2dcc>
   147c4:	bl	1109c <__freading@plt>
   147c8:	cmp	r0, #0
   147cc:	bne	147e0 <close_stdout@@Base+0x2ddc>
   147d0:	mov	r0, r4
   147d4:	add	sp, sp, #8
   147d8:	pop	{r4, lr}
   147dc:	b	10f70 <fflush@plt>
   147e0:	ldr	r3, [r4]
   147e4:	tst	r3, #256	; 0x100
   147e8:	beq	147d0 <close_stdout@@Base+0x2dcc>
   147ec:	mov	r3, #1
   147f0:	mov	r0, r4
   147f4:	str	r3, [sp]
   147f8:	mov	r2, #0
   147fc:	mov	r3, #0
   14800:	bl	14814 <close_stdout@@Base+0x2e10>
   14804:	mov	r0, r4
   14808:	add	sp, sp, #8
   1480c:	pop	{r4, lr}
   14810:	b	10f70 <fflush@plt>
   14814:	push	{r4, r5, r6, r7, lr}
   14818:	sub	sp, sp, #20
   1481c:	ldmib	r0, {r1, ip}
   14820:	mov	r6, r0
   14824:	ldr	r4, [sp, #40]	; 0x28
   14828:	cmp	ip, r1
   1482c:	beq	14844 <close_stdout@@Base+0x2e40>
   14830:	str	r4, [sp, #40]	; 0x28
   14834:	mov	r0, r6
   14838:	add	sp, sp, #20
   1483c:	pop	{r4, r5, r6, r7, lr}
   14840:	b	1115c <fseeko64@plt>
   14844:	ldr	ip, [r0, #20]
   14848:	ldr	r1, [r0, #16]
   1484c:	cmp	ip, r1
   14850:	bne	14830 <close_stdout@@Base+0x2e2c>
   14854:	ldr	r7, [r0, #36]	; 0x24
   14858:	cmp	r7, #0
   1485c:	bne	14830 <close_stdout@@Base+0x2e2c>
   14860:	str	r2, [sp, #12]
   14864:	mvn	r5, #0
   14868:	str	r3, [sp, #8]
   1486c:	bl	11138 <fileno@plt>
   14870:	str	r4, [sp]
   14874:	mvn	r4, #0
   14878:	ldr	r2, [sp, #12]
   1487c:	ldr	r3, [sp, #8]
   14880:	bl	11018 <lseek64@plt>
   14884:	mov	r2, r0
   14888:	mov	r3, r1
   1488c:	cmp	r3, r5
   14890:	cmpeq	r2, r4
   14894:	beq	148b4 <close_stdout@@Base+0x2eb0>
   14898:	ldr	r1, [r6]
   1489c:	mov	r0, r7
   148a0:	strd	r2, [r6, #80]	; 0x50
   148a4:	bic	r3, r1, #16
   148a8:	str	r3, [r6]
   148ac:	add	sp, sp, #20
   148b0:	pop	{r4, r5, r6, r7, pc}
   148b4:	mvn	r0, #0
   148b8:	b	148ac <close_stdout@@Base+0x2ea8>
   148bc:	subs	r2, r1, #1
   148c0:	bxeq	lr
   148c4:	bcc	14a9c <close_stdout@@Base+0x3098>
   148c8:	cmp	r0, r1
   148cc:	bls	14a80 <close_stdout@@Base+0x307c>
   148d0:	tst	r1, r2
   148d4:	beq	14a8c <close_stdout@@Base+0x3088>
   148d8:	clz	r3, r0
   148dc:	clz	r2, r1
   148e0:	sub	r3, r2, r3
   148e4:	rsbs	r3, r3, #31
   148e8:	addne	r3, r3, r3, lsl #1
   148ec:	mov	r2, #0
   148f0:	addne	pc, pc, r3, lsl #2
   148f4:	nop	{0}
   148f8:	cmp	r0, r1, lsl #31
   148fc:	adc	r2, r2, r2
   14900:	subcs	r0, r0, r1, lsl #31
   14904:	cmp	r0, r1, lsl #30
   14908:	adc	r2, r2, r2
   1490c:	subcs	r0, r0, r1, lsl #30
   14910:	cmp	r0, r1, lsl #29
   14914:	adc	r2, r2, r2
   14918:	subcs	r0, r0, r1, lsl #29
   1491c:	cmp	r0, r1, lsl #28
   14920:	adc	r2, r2, r2
   14924:	subcs	r0, r0, r1, lsl #28
   14928:	cmp	r0, r1, lsl #27
   1492c:	adc	r2, r2, r2
   14930:	subcs	r0, r0, r1, lsl #27
   14934:	cmp	r0, r1, lsl #26
   14938:	adc	r2, r2, r2
   1493c:	subcs	r0, r0, r1, lsl #26
   14940:	cmp	r0, r1, lsl #25
   14944:	adc	r2, r2, r2
   14948:	subcs	r0, r0, r1, lsl #25
   1494c:	cmp	r0, r1, lsl #24
   14950:	adc	r2, r2, r2
   14954:	subcs	r0, r0, r1, lsl #24
   14958:	cmp	r0, r1, lsl #23
   1495c:	adc	r2, r2, r2
   14960:	subcs	r0, r0, r1, lsl #23
   14964:	cmp	r0, r1, lsl #22
   14968:	adc	r2, r2, r2
   1496c:	subcs	r0, r0, r1, lsl #22
   14970:	cmp	r0, r1, lsl #21
   14974:	adc	r2, r2, r2
   14978:	subcs	r0, r0, r1, lsl #21
   1497c:	cmp	r0, r1, lsl #20
   14980:	adc	r2, r2, r2
   14984:	subcs	r0, r0, r1, lsl #20
   14988:	cmp	r0, r1, lsl #19
   1498c:	adc	r2, r2, r2
   14990:	subcs	r0, r0, r1, lsl #19
   14994:	cmp	r0, r1, lsl #18
   14998:	adc	r2, r2, r2
   1499c:	subcs	r0, r0, r1, lsl #18
   149a0:	cmp	r0, r1, lsl #17
   149a4:	adc	r2, r2, r2
   149a8:	subcs	r0, r0, r1, lsl #17
   149ac:	cmp	r0, r1, lsl #16
   149b0:	adc	r2, r2, r2
   149b4:	subcs	r0, r0, r1, lsl #16
   149b8:	cmp	r0, r1, lsl #15
   149bc:	adc	r2, r2, r2
   149c0:	subcs	r0, r0, r1, lsl #15
   149c4:	cmp	r0, r1, lsl #14
   149c8:	adc	r2, r2, r2
   149cc:	subcs	r0, r0, r1, lsl #14
   149d0:	cmp	r0, r1, lsl #13
   149d4:	adc	r2, r2, r2
   149d8:	subcs	r0, r0, r1, lsl #13
   149dc:	cmp	r0, r1, lsl #12
   149e0:	adc	r2, r2, r2
   149e4:	subcs	r0, r0, r1, lsl #12
   149e8:	cmp	r0, r1, lsl #11
   149ec:	adc	r2, r2, r2
   149f0:	subcs	r0, r0, r1, lsl #11
   149f4:	cmp	r0, r1, lsl #10
   149f8:	adc	r2, r2, r2
   149fc:	subcs	r0, r0, r1, lsl #10
   14a00:	cmp	r0, r1, lsl #9
   14a04:	adc	r2, r2, r2
   14a08:	subcs	r0, r0, r1, lsl #9
   14a0c:	cmp	r0, r1, lsl #8
   14a10:	adc	r2, r2, r2
   14a14:	subcs	r0, r0, r1, lsl #8
   14a18:	cmp	r0, r1, lsl #7
   14a1c:	adc	r2, r2, r2
   14a20:	subcs	r0, r0, r1, lsl #7
   14a24:	cmp	r0, r1, lsl #6
   14a28:	adc	r2, r2, r2
   14a2c:	subcs	r0, r0, r1, lsl #6
   14a30:	cmp	r0, r1, lsl #5
   14a34:	adc	r2, r2, r2
   14a38:	subcs	r0, r0, r1, lsl #5
   14a3c:	cmp	r0, r1, lsl #4
   14a40:	adc	r2, r2, r2
   14a44:	subcs	r0, r0, r1, lsl #4
   14a48:	cmp	r0, r1, lsl #3
   14a4c:	adc	r2, r2, r2
   14a50:	subcs	r0, r0, r1, lsl #3
   14a54:	cmp	r0, r1, lsl #2
   14a58:	adc	r2, r2, r2
   14a5c:	subcs	r0, r0, r1, lsl #2
   14a60:	cmp	r0, r1, lsl #1
   14a64:	adc	r2, r2, r2
   14a68:	subcs	r0, r0, r1, lsl #1
   14a6c:	cmp	r0, r1
   14a70:	adc	r2, r2, r2
   14a74:	subcs	r0, r0, r1
   14a78:	mov	r0, r2
   14a7c:	bx	lr
   14a80:	moveq	r0, #1
   14a84:	movne	r0, #0
   14a88:	bx	lr
   14a8c:	clz	r2, r1
   14a90:	rsb	r2, r2, #31
   14a94:	lsr	r0, r0, r2
   14a98:	bx	lr
   14a9c:	cmp	r0, #0
   14aa0:	mvnne	r0, #0
   14aa4:	b	14d08 <close_stdout@@Base+0x3304>
   14aa8:	cmp	r1, #0
   14aac:	beq	14a9c <close_stdout@@Base+0x3098>
   14ab0:	push	{r0, r1, lr}
   14ab4:	bl	148bc <close_stdout@@Base+0x2eb8>
   14ab8:	pop	{r1, r2, lr}
   14abc:	mul	r3, r2, r0
   14ac0:	sub	r1, r1, r3
   14ac4:	bx	lr
   14ac8:	cmp	r1, #0
   14acc:	beq	14cd8 <close_stdout@@Base+0x32d4>
   14ad0:	eor	ip, r0, r1
   14ad4:	rsbmi	r1, r1, #0
   14ad8:	subs	r2, r1, #1
   14adc:	beq	14ca4 <close_stdout@@Base+0x32a0>
   14ae0:	movs	r3, r0
   14ae4:	rsbmi	r3, r0, #0
   14ae8:	cmp	r3, r1
   14aec:	bls	14cb0 <close_stdout@@Base+0x32ac>
   14af0:	tst	r1, r2
   14af4:	beq	14cc0 <close_stdout@@Base+0x32bc>
   14af8:	clz	r2, r3
   14afc:	clz	r0, r1
   14b00:	sub	r2, r0, r2
   14b04:	rsbs	r2, r2, #31
   14b08:	addne	r2, r2, r2, lsl #1
   14b0c:	mov	r0, #0
   14b10:	addne	pc, pc, r2, lsl #2
   14b14:	nop	{0}
   14b18:	cmp	r3, r1, lsl #31
   14b1c:	adc	r0, r0, r0
   14b20:	subcs	r3, r3, r1, lsl #31
   14b24:	cmp	r3, r1, lsl #30
   14b28:	adc	r0, r0, r0
   14b2c:	subcs	r3, r3, r1, lsl #30
   14b30:	cmp	r3, r1, lsl #29
   14b34:	adc	r0, r0, r0
   14b38:	subcs	r3, r3, r1, lsl #29
   14b3c:	cmp	r3, r1, lsl #28
   14b40:	adc	r0, r0, r0
   14b44:	subcs	r3, r3, r1, lsl #28
   14b48:	cmp	r3, r1, lsl #27
   14b4c:	adc	r0, r0, r0
   14b50:	subcs	r3, r3, r1, lsl #27
   14b54:	cmp	r3, r1, lsl #26
   14b58:	adc	r0, r0, r0
   14b5c:	subcs	r3, r3, r1, lsl #26
   14b60:	cmp	r3, r1, lsl #25
   14b64:	adc	r0, r0, r0
   14b68:	subcs	r3, r3, r1, lsl #25
   14b6c:	cmp	r3, r1, lsl #24
   14b70:	adc	r0, r0, r0
   14b74:	subcs	r3, r3, r1, lsl #24
   14b78:	cmp	r3, r1, lsl #23
   14b7c:	adc	r0, r0, r0
   14b80:	subcs	r3, r3, r1, lsl #23
   14b84:	cmp	r3, r1, lsl #22
   14b88:	adc	r0, r0, r0
   14b8c:	subcs	r3, r3, r1, lsl #22
   14b90:	cmp	r3, r1, lsl #21
   14b94:	adc	r0, r0, r0
   14b98:	subcs	r3, r3, r1, lsl #21
   14b9c:	cmp	r3, r1, lsl #20
   14ba0:	adc	r0, r0, r0
   14ba4:	subcs	r3, r3, r1, lsl #20
   14ba8:	cmp	r3, r1, lsl #19
   14bac:	adc	r0, r0, r0
   14bb0:	subcs	r3, r3, r1, lsl #19
   14bb4:	cmp	r3, r1, lsl #18
   14bb8:	adc	r0, r0, r0
   14bbc:	subcs	r3, r3, r1, lsl #18
   14bc0:	cmp	r3, r1, lsl #17
   14bc4:	adc	r0, r0, r0
   14bc8:	subcs	r3, r3, r1, lsl #17
   14bcc:	cmp	r3, r1, lsl #16
   14bd0:	adc	r0, r0, r0
   14bd4:	subcs	r3, r3, r1, lsl #16
   14bd8:	cmp	r3, r1, lsl #15
   14bdc:	adc	r0, r0, r0
   14be0:	subcs	r3, r3, r1, lsl #15
   14be4:	cmp	r3, r1, lsl #14
   14be8:	adc	r0, r0, r0
   14bec:	subcs	r3, r3, r1, lsl #14
   14bf0:	cmp	r3, r1, lsl #13
   14bf4:	adc	r0, r0, r0
   14bf8:	subcs	r3, r3, r1, lsl #13
   14bfc:	cmp	r3, r1, lsl #12
   14c00:	adc	r0, r0, r0
   14c04:	subcs	r3, r3, r1, lsl #12
   14c08:	cmp	r3, r1, lsl #11
   14c0c:	adc	r0, r0, r0
   14c10:	subcs	r3, r3, r1, lsl #11
   14c14:	cmp	r3, r1, lsl #10
   14c18:	adc	r0, r0, r0
   14c1c:	subcs	r3, r3, r1, lsl #10
   14c20:	cmp	r3, r1, lsl #9
   14c24:	adc	r0, r0, r0
   14c28:	subcs	r3, r3, r1, lsl #9
   14c2c:	cmp	r3, r1, lsl #8
   14c30:	adc	r0, r0, r0
   14c34:	subcs	r3, r3, r1, lsl #8
   14c38:	cmp	r3, r1, lsl #7
   14c3c:	adc	r0, r0, r0
   14c40:	subcs	r3, r3, r1, lsl #7
   14c44:	cmp	r3, r1, lsl #6
   14c48:	adc	r0, r0, r0
   14c4c:	subcs	r3, r3, r1, lsl #6
   14c50:	cmp	r3, r1, lsl #5
   14c54:	adc	r0, r0, r0
   14c58:	subcs	r3, r3, r1, lsl #5
   14c5c:	cmp	r3, r1, lsl #4
   14c60:	adc	r0, r0, r0
   14c64:	subcs	r3, r3, r1, lsl #4
   14c68:	cmp	r3, r1, lsl #3
   14c6c:	adc	r0, r0, r0
   14c70:	subcs	r3, r3, r1, lsl #3
   14c74:	cmp	r3, r1, lsl #2
   14c78:	adc	r0, r0, r0
   14c7c:	subcs	r3, r3, r1, lsl #2
   14c80:	cmp	r3, r1, lsl #1
   14c84:	adc	r0, r0, r0
   14c88:	subcs	r3, r3, r1, lsl #1
   14c8c:	cmp	r3, r1
   14c90:	adc	r0, r0, r0
   14c94:	subcs	r3, r3, r1
   14c98:	cmp	ip, #0
   14c9c:	rsbmi	r0, r0, #0
   14ca0:	bx	lr
   14ca4:	teq	ip, r0
   14ca8:	rsbmi	r0, r0, #0
   14cac:	bx	lr
   14cb0:	movcc	r0, #0
   14cb4:	asreq	r0, ip, #31
   14cb8:	orreq	r0, r0, #1
   14cbc:	bx	lr
   14cc0:	clz	r2, r1
   14cc4:	rsb	r2, r2, #31
   14cc8:	cmp	ip, #0
   14ccc:	lsr	r0, r3, r2
   14cd0:	rsbmi	r0, r0, #0
   14cd4:	bx	lr
   14cd8:	cmp	r0, #0
   14cdc:	mvngt	r0, #-2147483648	; 0x80000000
   14ce0:	movlt	r0, #-2147483648	; 0x80000000
   14ce4:	b	14d08 <close_stdout@@Base+0x3304>
   14ce8:	cmp	r1, #0
   14cec:	beq	14cd8 <close_stdout@@Base+0x32d4>
   14cf0:	push	{r0, r1, lr}
   14cf4:	bl	14ad0 <close_stdout@@Base+0x30cc>
   14cf8:	pop	{r1, r2, lr}
   14cfc:	mul	r3, r2, r0
   14d00:	sub	r1, r1, r3
   14d04:	bx	lr
   14d08:	push	{r1, lr}
   14d0c:	mov	r0, #8
   14d10:	bl	10f4c <raise@plt>
   14d14:	pop	{r1, pc}
   14d18:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14d1c:	mov	r7, r0
   14d20:	ldr	r6, [pc, #76]	; 14d74 <close_stdout@@Base+0x3370>
   14d24:	mov	r8, r1
   14d28:	ldr	r5, [pc, #72]	; 14d78 <close_stdout@@Base+0x3374>
   14d2c:	mov	r9, r2
   14d30:	add	r6, pc, r6
   14d34:	bl	10f08 <fdopen@plt-0x20>
   14d38:	add	r5, pc, r5
   14d3c:	rsb	r6, r5, r6
   14d40:	asrs	r6, r6, #2
   14d44:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14d48:	sub	r5, r5, #4
   14d4c:	mov	r4, #0
   14d50:	add	r4, r4, #1
   14d54:	ldr	r3, [r5, #4]!
   14d58:	mov	r0, r7
   14d5c:	mov	r1, r8
   14d60:	mov	r2, r9
   14d64:	blx	r3
   14d68:	cmp	r4, r6
   14d6c:	bne	14d50 <close_stdout@@Base+0x334c>
   14d70:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14d74:	andeq	r1, r1, r4, ror #2
   14d78:	andeq	r1, r1, r8, asr r1
   14d7c:	bx	lr
   14d80:	ldr	r3, [pc, #28]	; 14da4 <close_stdout@@Base+0x33a0>
   14d84:	mov	r1, #0
   14d88:	ldr	r2, [pc, #24]	; 14da8 <close_stdout@@Base+0x33a4>
   14d8c:	add	r3, pc, r3
   14d90:	ldr	r3, [r3, r2]
   14d94:	cmp	r3, #0
   14d98:	ldrne	r2, [r3]
   14d9c:	moveq	r2, r3
   14da0:	b	11108 <__cxa_atexit@plt>
   14da4:	andeq	r1, r1, ip, ror #4
   14da8:	andeq	r0, r0, ip, lsl #2

Disassembly of section .fini:

00014dac <.fini>:
   14dac:	push	{r3, lr}
   14db0:	pop	{r3, pc}
