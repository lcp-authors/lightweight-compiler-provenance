
centos-preinstalled/oldfind:     file format elf32-littlearm


Disassembly of section .init:

00011f40 <_init@@Base>:
   11f40:	push	{r3, lr}
   11f44:	bl	12900 <__assert_fail@plt+0x2c8>
   11f48:	pop	{r3, pc}

Disassembly of section .plt:

00011f4c <fdopen@plt-0x14>:
   11f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11f50:	ldr	lr, [pc, #4]	; 11f5c <_init@@Base+0x1c>
   11f54:	add	lr, pc, lr
   11f58:	ldr	pc, [lr, #8]!
   11f5c:	andeq	r3, r3, r4, lsr #1

00011f60 <fdopen@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #208896	; 0x33000
   11f68:	ldr	pc, [ip, #164]!	; 0xa4

00011f6c <calloc@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #208896	; 0x33000
   11f74:	ldr	pc, [ip, #156]!	; 0x9c

00011f78 <endgrent@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #208896	; 0x33000
   11f80:	ldr	pc, [ip, #148]!	; 0x94

00011f84 <raise@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #208896	; 0x33000
   11f8c:	ldr	pc, [ip, #140]!	; 0x8c

00011f90 <__getdelim@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #208896	; 0x33000
   11f98:	ldr	pc, [ip, #132]!	; 0x84

00011f9c <getpwnam@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #208896	; 0x33000
   11fa4:	ldr	pc, [ip, #124]!	; 0x7c

00011fa8 <is_selinux_enabled@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #208896	; 0x33000
   11fb0:	ldr	pc, [ip, #116]!	; 0x74

00011fb4 <strcmp@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #208896	; 0x33000
   11fbc:	ldr	pc, [ip, #108]!	; 0x6c

00011fc0 <strtol@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #208896	; 0x33000
   11fc8:	ldr	pc, [ip, #100]!	; 0x64

00011fcc <getpwuid@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #208896	; 0x33000
   11fd4:	ldr	pc, [ip, #92]!	; 0x5c

00011fd8 <mktime@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #208896	; 0x33000
   11fe0:	ldr	pc, [ip, #84]!	; 0x54

00011fe4 <fflush@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #208896	; 0x33000
   11fec:	ldr	pc, [ip, #76]!	; 0x4c

00011ff0 <unlinkat@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #208896	; 0x33000
   11ff8:	ldr	pc, [ip, #68]!	; 0x44

00011ffc <wcwidth@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #208896	; 0x33000
   12004:	ldr	pc, [ip, #60]!	; 0x3c

00012008 <lsetfilecon@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #208896	; 0x33000
   12010:	ldr	pc, [ip, #52]!	; 0x34

00012014 <memmove@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #208896	; 0x33000
   1201c:	ldr	pc, [ip, #44]!	; 0x2c

00012020 <free@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #208896	; 0x33000
   12028:	ldr	pc, [ip, #36]!	; 0x24

0001202c <faccessat@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #208896	; 0x33000
   12034:	ldr	pc, [ip, #28]!

00012038 <ferror@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #208896	; 0x33000
   12040:	ldr	pc, [ip, #20]!

00012044 <clock_gettime@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #208896	; 0x33000
   1204c:	ldr	pc, [ip, #12]!

00012050 <_exit@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #208896	; 0x33000
   12058:	ldr	pc, [ip, #4]!

0001205c <memcpy@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #204800	; 0x32000
   12064:	ldr	pc, [ip, #4092]!	; 0xffc

00012068 <execvp@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #204800	; 0x32000
   12070:	ldr	pc, [ip, #4084]!	; 0xff4

00012074 <__strtoull_internal@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #204800	; 0x32000
   1207c:	ldr	pc, [ip, #4076]!	; 0xfec

00012080 <mbsinit@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #204800	; 0x32000
   12088:	ldr	pc, [ip, #4068]!	; 0xfe4

0001208c <signal@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #204800	; 0x32000
   12094:	ldr	pc, [ip, #4060]!	; 0xfdc

00012098 <time@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #204800	; 0x32000
   120a0:	ldr	pc, [ip, #4052]!	; 0xfd4

000120a4 <__strtok_r@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #204800	; 0x32000
   120ac:	ldr	pc, [ip, #4044]!	; 0xfcc

000120b0 <memcmp@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #204800	; 0x32000
   120b8:	ldr	pc, [ip, #4036]!	; 0xfc4

000120bc <uname@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #204800	; 0x32000
   120c4:	ldr	pc, [ip, #4028]!	; 0xfbc

000120c8 <ctime@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #204800	; 0x32000
   120d0:	ldr	pc, [ip, #4020]!	; 0xfb4

000120d4 <dcgettext@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #204800	; 0x32000
   120dc:	ldr	pc, [ip, #4012]!	; 0xfac

000120e0 <__stack_chk_fail@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #204800	; 0x32000
   120e8:	ldr	pc, [ip, #4004]!	; 0xfa4

000120ec <sysconf@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #204800	; 0x32000
   120f4:	ldr	pc, [ip, #3996]!	; 0xf9c

000120f8 <getrlimit64@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #204800	; 0x32000
   12100:	ldr	pc, [ip, #3988]!	; 0xf94

00012104 <realloc@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #204800	; 0x32000
   1210c:	ldr	pc, [ip, #3980]!	; 0xf8c

00012110 <fgetfilecon@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #204800	; 0x32000
   12118:	ldr	pc, [ip, #3972]!	; 0xf84

0001211c <textdomain@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #204800	; 0x32000
   12124:	ldr	pc, [ip, #3964]!	; 0xf7c

00012128 <iswcntrl@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #204800	; 0x32000
   12130:	ldr	pc, [ip, #3956]!	; 0xf74

00012134 <chdir@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #204800	; 0x32000
   1213c:	ldr	pc, [ip, #3948]!	; 0xf6c

00012140 <__strndup@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #204800	; 0x32000
   12148:	ldr	pc, [ip, #3940]!	; 0xf64

0001214c <__fxstatat64@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #204800	; 0x32000
   12154:	ldr	pc, [ip, #3932]!	; 0xf5c

00012158 <iswprint@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #204800	; 0x32000
   12160:	ldr	pc, [ip, #3924]!	; 0xf54

00012164 <__fxstat64@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #204800	; 0x32000
   1216c:	ldr	pc, [ip, #3916]!	; 0xf4c

00012170 <__poll_chk@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #204800	; 0x32000
   12178:	ldr	pc, [ip, #3908]!	; 0xf44

0001217c <readlink@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #204800	; 0x32000
   12184:	ldr	pc, [ip, #3900]!	; 0xf3c

00012188 <__memcpy_chk@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #204800	; 0x32000
   12190:	ldr	pc, [ip, #3892]!	; 0xf34

00012194 <_IO_putc@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #204800	; 0x32000
   1219c:	ldr	pc, [ip, #3884]!	; 0xf2c

000121a0 <fwrite@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #204800	; 0x32000
   121a8:	ldr	pc, [ip, #3876]!	; 0xf24

000121ac <strcat@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #204800	; 0x32000
   121b4:	ldr	pc, [ip, #3868]!	; 0xf1c

000121b8 <lseek64@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #204800	; 0x32000
   121c0:	ldr	pc, [ip, #3860]!	; 0xf14

000121c4 <__stpcpy_chk@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #204800	; 0x32000
   121cc:	ldr	pc, [ip, #3852]!	; 0xf0c

000121d0 <waitpid@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #204800	; 0x32000
   121d8:	ldr	pc, [ip, #3844]!	; 0xf04

000121dc <__ctype_get_mb_cur_max@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #204800	; 0x32000
   121e4:	ldr	pc, [ip, #3836]!	; 0xefc

000121e8 <hasmntopt@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #204800	; 0x32000
   121f0:	ldr	pc, [ip, #3828]!	; 0xef4

000121f4 <strcpy@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #204800	; 0x32000
   121fc:	ldr	pc, [ip, #3820]!	; 0xeec

00012200 <gettimeofday@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #204800	; 0x32000
   12208:	ldr	pc, [ip, #3812]!	; 0xee4

0001220c <__fpending@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #204800	; 0x32000
   12214:	ldr	pc, [ip, #3804]!	; 0xedc

00012218 <mbrtowc@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #204800	; 0x32000
   12220:	ldr	pc, [ip, #3796]!	; 0xed4

00012224 <error@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #204800	; 0x32000
   1222c:	ldr	pc, [ip, #3788]!	; 0xecc

00012230 <getmntent@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #204800	; 0x32000
   12238:	ldr	pc, [ip, #3780]!	; 0xec4

0001223c <opendir@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #204800	; 0x32000
   12244:	ldr	pc, [ip, #3772]!	; 0xebc

00012248 <fnmatch@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #204800	; 0x32000
   12250:	ldr	pc, [ip, #3764]!	; 0xeb4

00012254 <open64@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #204800	; 0x32000
   1225c:	ldr	pc, [ip, #3756]!	; 0xeac

00012260 <getenv@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #204800	; 0x32000
   12268:	ldr	pc, [ip, #3748]!	; 0xea4

0001226c <lgetfilecon@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #204800	; 0x32000
   12274:	ldr	pc, [ip, #3740]!	; 0xe9c

00012278 <puts@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #204800	; 0x32000
   12280:	ldr	pc, [ip, #3732]!	; 0xe94

00012284 <malloc@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #204800	; 0x32000
   1228c:	ldr	pc, [ip, #3724]!	; 0xe8c

00012290 <__libc_start_main@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #204800	; 0x32000
   12298:	ldr	pc, [ip, #3716]!	; 0xe84

0001229c <readlinkat@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #204800	; 0x32000
   122a4:	ldr	pc, [ip, #3708]!	; 0xe7c

000122a8 <strftime@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #204800	; 0x32000
   122b0:	ldr	pc, [ip, #3700]!	; 0xe74

000122b4 <__vfprintf_chk@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #204800	; 0x32000
   122bc:	ldr	pc, [ip, #3692]!	; 0xe6c

000122c0 <__freading@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #204800	; 0x32000
   122c8:	ldr	pc, [ip, #3684]!	; 0xe64

000122cc <localtime@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #204800	; 0x32000
   122d4:	ldr	pc, [ip, #3676]!	; 0xe5c

000122d8 <modf@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #204800	; 0x32000
   122e0:	ldr	pc, [ip, #3668]!	; 0xe54

000122e4 <__gmon_start__@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #204800	; 0x32000
   122ec:	ldr	pc, [ip, #3660]!	; 0xe4c

000122f0 <__ctype_b_loc@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #204800	; 0x32000
   122f8:	ldr	pc, [ip, #3652]!	; 0xe44

000122fc <getcwd@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #204800	; 0x32000
   12304:	ldr	pc, [ip, #3644]!	; 0xe3c

00012308 <exit@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #204800	; 0x32000
   12310:	ldr	pc, [ip, #3636]!	; 0xe34

00012314 <getfilecon@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #204800	; 0x32000
   1231c:	ldr	pc, [ip, #3628]!	; 0xe2c

00012320 <strtoul@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #204800	; 0x32000
   12328:	ldr	pc, [ip, #3620]!	; 0xe24

0001232c <strlen@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #204800	; 0x32000
   12334:	ldr	pc, [ip, #3612]!	; 0xe1c

00012338 <strchr@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #204800	; 0x32000
   12340:	ldr	pc, [ip, #3604]!	; 0xe14

00012344 <setenv@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #204800	; 0x32000
   1234c:	ldr	pc, [ip, #3596]!	; 0xe0c

00012350 <openat64@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #204800	; 0x32000
   12358:	ldr	pc, [ip, #3588]!	; 0xe04

0001235c <memrchr@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #204800	; 0x32000
   12364:	ldr	pc, [ip, #3580]!	; 0xdfc

00012368 <re_match@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #204800	; 0x32000
   12370:	ldr	pc, [ip, #3572]!	; 0xdf4

00012374 <ungetc@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #204800	; 0x32000
   1237c:	ldr	pc, [ip, #3564]!	; 0xdec

00012380 <fcntl@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #204800	; 0x32000
   12388:	ldr	pc, [ip, #3556]!	; 0xde4

0001238c <__errno_location@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #204800	; 0x32000
   12394:	ldr	pc, [ip, #3548]!	; 0xddc

00012398 <__sprintf_chk@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #204800	; 0x32000
   123a0:	ldr	pc, [ip, #3540]!	; 0xdd4

000123a4 <__cxa_atexit@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #204800	; 0x32000
   123ac:	ldr	pc, [ip, #3532]!	; 0xdcc

000123b0 <__strdup@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #204800	; 0x32000
   123b8:	ldr	pc, [ip, #3524]!	; 0xdc4

000123bc <memset@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #204800	; 0x32000
   123c4:	ldr	pc, [ip, #3516]!	; 0xdbc

000123c8 <bsearch@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #204800	; 0x32000
   123d0:	ldr	pc, [ip, #3508]!	; 0xdb4

000123d4 <putchar@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #204800	; 0x32000
   123dc:	ldr	pc, [ip, #3500]!	; 0xdac

000123e0 <strncpy@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #204800	; 0x32000
   123e8:	ldr	pc, [ip, #3492]!	; 0xda4

000123ec <fscanf@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #204800	; 0x32000
   123f4:	ldr	pc, [ip, #3484]!	; 0xd9c

000123f8 <__printf_chk@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #204800	; 0x32000
   12400:	ldr	pc, [ip, #3476]!	; 0xd94

00012404 <strtod@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #204800	; 0x32000
   1240c:	ldr	pc, [ip, #3468]!	; 0xd8c

00012410 <fileno@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #204800	; 0x32000
   12418:	ldr	pc, [ip, #3460]!	; 0xd84

0001241c <difftime@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #204800	; 0x32000
   12424:	ldr	pc, [ip, #3452]!	; 0xd7c

00012428 <__fprintf_chk@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #204800	; 0x32000
   12430:	ldr	pc, [ip, #3444]!	; 0xd74

00012434 <memchr@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #204800	; 0x32000
   1243c:	ldr	pc, [ip, #3436]!	; 0xd6c

00012440 <setfilecon@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #204800	; 0x32000
   12448:	ldr	pc, [ip, #3428]!	; 0xd64

0001244c <access@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #204800	; 0x32000
   12454:	ldr	pc, [ip, #3420]!	; 0xd5c

00012458 <fclose@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #204800	; 0x32000
   12460:	ldr	pc, [ip, #3412]!	; 0xd54

00012464 <strnlen@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #204800	; 0x32000
   1246c:	ldr	pc, [ip, #3404]!	; 0xd4c

00012470 <fseeko64@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #204800	; 0x32000
   12478:	ldr	pc, [ip, #3396]!	; 0xd44

0001247c <endmntent@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #204800	; 0x32000
   12484:	ldr	pc, [ip, #3388]!	; 0xd3c

00012488 <rpmatch@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #204800	; 0x32000
   12490:	ldr	pc, [ip, #3380]!	; 0xd34

00012494 <__uflow@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #204800	; 0x32000
   1249c:	ldr	pc, [ip, #3372]!	; 0xd2c

000124a0 <setlocale@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #204800	; 0x32000
   124a8:	ldr	pc, [ip, #3364]!	; 0xd24

000124ac <fork@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #204800	; 0x32000
   124b4:	ldr	pc, [ip, #3356]!	; 0xd1c

000124b8 <endpwent@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #204800	; 0x32000
   124c0:	ldr	pc, [ip, #3348]!	; 0xd14

000124c4 <strrchr@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #204800	; 0x32000
   124cc:	ldr	pc, [ip, #3340]!	; 0xd0c

000124d0 <nl_langinfo@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #204800	; 0x32000
   124d8:	ldr	pc, [ip, #3332]!	; 0xd04

000124dc <fputc@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #204800	; 0x32000
   124e4:	ldr	pc, [ip, #3324]!	; 0xcfc

000124e8 <localeconv@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #204800	; 0x32000
   124f0:	ldr	pc, [ip, #3316]!	; 0xcf4

000124f4 <sprintf@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #204800	; 0x32000
   124fc:	ldr	pc, [ip, #3308]!	; 0xcec

00012500 <readdir64@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #204800	; 0x32000
   12508:	ldr	pc, [ip, #3300]!	; 0xce4

0001250c <fdopendir@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #204800	; 0x32000
   12514:	ldr	pc, [ip, #3292]!	; 0xcdc

00012518 <dirfd@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #204800	; 0x32000
   12520:	ldr	pc, [ip, #3284]!	; 0xcd4

00012524 <fchdir@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #204800	; 0x32000
   1252c:	ldr	pc, [ip, #3276]!	; 0xccc

00012530 <fopen64@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #204800	; 0x32000
   12538:	ldr	pc, [ip, #3268]!	; 0xcc4

0001253c <qsort@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #204800	; 0x32000
   12544:	ldr	pc, [ip, #3260]!	; 0xcbc

00012548 <freecon@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #204800	; 0x32000
   12550:	ldr	pc, [ip, #3252]!	; 0xcb4

00012554 <strpbrk@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #204800	; 0x32000
   1255c:	ldr	pc, [ip, #3244]!	; 0xcac

00012560 <setmntent@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #204800	; 0x32000
   12568:	ldr	pc, [ip, #3236]!	; 0xca4

0001256c <bindtextdomain@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #204800	; 0x32000
   12574:	ldr	pc, [ip, #3228]!	; 0xc9c

00012578 <__xstat64@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #204800	; 0x32000
   12580:	ldr	pc, [ip, #3220]!	; 0xc94

00012584 <isatty@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #204800	; 0x32000
   1258c:	ldr	pc, [ip, #3212]!	; 0xc8c

00012590 <re_compile_pattern@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #204800	; 0x32000
   12598:	ldr	pc, [ip, #3204]!	; 0xc84

0001259c <unsetenv@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #204800	; 0x32000
   125a4:	ldr	pc, [ip, #3196]!	; 0xc7c

000125a8 <fputs@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #204800	; 0x32000
   125b0:	ldr	pc, [ip, #3188]!	; 0xc74

000125b4 <strncmp@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #204800	; 0x32000
   125bc:	ldr	pc, [ip, #3180]!	; 0xc6c

000125c0 <re_set_syntax@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #204800	; 0x32000
   125c8:	ldr	pc, [ip, #3172]!	; 0xc64

000125cc <abort@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #204800	; 0x32000
   125d4:	ldr	pc, [ip, #3164]!	; 0xc5c

000125d8 <close@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #204800	; 0x32000
   125e0:	ldr	pc, [ip, #3156]!	; 0xc54

000125e4 <__lxstat64@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #204800	; 0x32000
   125ec:	ldr	pc, [ip, #3148]!	; 0xc4c

000125f0 <dcngettext@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #204800	; 0x32000
   125f8:	ldr	pc, [ip, #3140]!	; 0xc44

000125fc <closedir@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #204800	; 0x32000
   12604:	ldr	pc, [ip, #3132]!	; 0xc3c

00012608 <getgrgid@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #204800	; 0x32000
   12610:	ldr	pc, [ip, #3124]!	; 0xc34

00012614 <getgrnam@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #204800	; 0x32000
   1261c:	ldr	pc, [ip, #3116]!	; 0xc2c

00012620 <__snprintf_chk@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #204800	; 0x32000
   12628:	ldr	pc, [ip, #3108]!	; 0xc24

0001262c <strspn@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #204800	; 0x32000
   12634:	ldr	pc, [ip, #3100]!	; 0xc1c

00012638 <__assert_fail@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #204800	; 0x32000
   12640:	ldr	pc, [ip, #3092]!	; 0xc14

Disassembly of section .text:

00012648 <.text>:
   12648:	push	{r3, lr}
   1264c:	movw	r0, #13400	; 0x3458
   12650:	movw	r1, #13416	; 0x3468
   12654:	movw	r3, #13376	; 0x3440
   12658:	movt	r0, #3
   1265c:	movt	r1, #3
   12660:	mov	r2, #63	; 0x3f
   12664:	movt	r3, #3
   12668:	bl	12638 <__assert_fail@plt>
   1266c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12670:	movw	fp, #21904	; 0x5590
   12674:	ldr	r3, [r1]
   12678:	movt	fp, #4
   1267c:	sub	sp, sp, #28
   12680:	movw	r9, #25340	; 0x62fc
   12684:	cmp	r3, #0
   12688:	ldr	r2, [fp]
   1268c:	movt	r9, #4
   12690:	mov	r6, r0
   12694:	movne	r0, r3
   12698:	movweq	r0, #55368	; 0xd848
   1269c:	movteq	r0, #2
   126a0:	mov	r4, r1
   126a4:	str	r2, [sp, #20]
   126a8:	bl	27914 <__assert_fail@plt+0x152dc>
   126ac:	mov	r3, #0
   126b0:	str	r3, [r9, #28]
   126b4:	bl	18b68 <__assert_fail@plt+0x6530>
   126b8:	cmp	r0, #0
   126bc:	bne	12854 <__assert_fail@plt+0x21c>
   126c0:	bl	18b14 <__assert_fail@plt+0x64dc>
   126c4:	movw	r0, #55376	; 0xd850
   126c8:	movt	r0, #2
   126cc:	mov	r3, #0
   126d0:	strb	r3, [r9, #40]	; 0x28
   126d4:	bl	198d0 <__assert_fail@plt+0x7298>
   126d8:	cmp	r0, #0
   126dc:	mov	r5, r0
   126e0:	str	r0, [r9, #36]	; 0x24
   126e4:	beq	1288c <__assert_fail@plt+0x254>
   126e8:	movw	r5, #25384	; 0x6328
   126ec:	movt	r5, #4
   126f0:	mov	r0, r5
   126f4:	bl	19518 <__assert_fail@plt+0x6ee0>
   126f8:	movw	r1, #54180	; 0xd3a4
   126fc:	mov	r0, #6
   12700:	movt	r1, #2
   12704:	bl	124a0 <setlocale@plt>
   12708:	movw	r0, #6984	; 0x1b48
   1270c:	movw	r1, #55424	; 0xd880
   12710:	movt	r0, #3
   12714:	movt	r1, #2
   12718:	bl	1256c <bindtextdomain@plt>
   1271c:	movw	r0, #6984	; 0x1b48
   12720:	movt	r0, #3
   12724:	bl	1211c <textdomain@plt>
   12728:	movw	r0, #6048	; 0x17a0
   1272c:	movt	r0, #2
   12730:	bl	2d2ec <__assert_fail@plt+0x1acb4>
   12734:	mov	r1, r4
   12738:	mov	r0, r6
   1273c:	bl	1912c <__assert_fail@plt+0x6af4>
   12740:	ldr	r3, [r5, #44]	; 0x2c
   12744:	mov	r1, r4
   12748:	tst	r3, #2
   1274c:	movwne	r3, #36444	; 0x8e5c
   12750:	movtne	r3, #1
   12754:	strne	r3, [r5, #52]	; 0x34
   12758:	mvn	r3, #99	; 0x63
   1275c:	str	r3, [r9, #16]
   12760:	mov	sl, r0
   12764:	mov	r0, r6
   12768:	mov	r2, sl
   1276c:	bl	17c58 <__assert_fail@plt+0x5620>
   12770:	str	r0, [sp, #12]
   12774:	ldr	r0, [pc, #324]	; 128c0 <__assert_fail@plt+0x288>
   12778:	bl	187ec <__assert_fail@plt+0x61b4>
   1277c:	ldr	r3, [r5, #52]	; 0x34
   12780:	movw	r0, #528	; 0x210
   12784:	ldr	r1, [pc, #308]	; 128c0 <__assert_fail@plt+0x288>
   12788:	movt	r0, #3
   1278c:	blx	r3
   12790:	cmp	r0, #0
   12794:	bne	12824 <__assert_fail@plt+0x1ec>
   12798:	cmp	r6, sl
   1279c:	ble	1285c <__assert_fail@plt+0x224>
   127a0:	movw	r8, #21928	; 0x55a8
   127a4:	movw	r7, #15484	; 0x3c7c
   127a8:	add	r4, r4, sl, lsl #2
   127ac:	movt	r8, #4
   127b0:	movt	r7, #1
   127b4:	mov	r5, sl
   127b8:	b	127e0 <__assert_fail@plt+0x1a8>
   127bc:	ldr	r0, [r4, #-4]
   127c0:	add	r5, r5, #1
   127c4:	ldrd	r2, [r8, #112]	; 0x70
   127c8:	mov	r1, ip
   127cc:	str	ip, [sp]
   127d0:	str	r7, [sp, #4]
   127d4:	bl	12fe4 <__assert_fail@plt+0x9ac>
   127d8:	cmp	r5, r6
   127dc:	beq	127fc <__assert_fail@plt+0x1c4>
   127e0:	ldr	r0, [r4], #4
   127e4:	mov	r1, #1
   127e8:	bl	190a8 <__assert_fail@plt+0x6a70>
   127ec:	subs	ip, r0, #0
   127f0:	beq	127bc <__assert_fail@plt+0x184>
   127f4:	cmp	sl, r5
   127f8:	beq	1285c <__assert_fail@plt+0x224>
   127fc:	ldr	r0, [sp, #12]
   12800:	bl	15850 <__assert_fail@plt+0x3218>
   12804:	bl	18b84 <__assert_fail@plt+0x654c>
   12808:	ldr	r2, [sp, #20]
   1280c:	ldr	r3, [fp]
   12810:	ldr	r0, [r9, #28]
   12814:	cmp	r2, r3
   12818:	bne	128bc <__assert_fail@plt+0x284>
   1281c:	add	sp, sp, #28
   12820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12824:	bl	1238c <__errno_location@plt>
   12828:	mov	r2, #5
   1282c:	movw	r1, #55444	; 0xd894
   12830:	movt	r1, #2
   12834:	ldr	r5, [r0]
   12838:	mov	r0, #0
   1283c:	bl	120d4 <dcgettext@plt>
   12840:	mov	r1, r5
   12844:	mov	r2, r0
   12848:	mov	r0, #1
   1284c:	bl	12224 <error@plt>
   12850:	b	12798 <__assert_fail@plt+0x160>
   12854:	bl	20f18 <__assert_fail@plt+0xe8e0>
   12858:	b	126c0 <__assert_fail@plt+0x88>
   1285c:	add	r0, sp, #24
   12860:	movw	r3, #21928	; 0x55a8
   12864:	movt	r3, #4
   12868:	mov	r1, #0
   1286c:	mov	lr, #46	; 0x2e
   12870:	movw	ip, #15484	; 0x3c7c
   12874:	ldrd	r2, [r3, #112]	; 0x70
   12878:	movt	ip, #1
   1287c:	strh	lr, [r0, #-8]!
   12880:	stm	sp, {r1, ip}
   12884:	bl	12fe4 <__assert_fail@plt+0x9ac>
   12888:	b	127fc <__assert_fail@plt+0x1c4>
   1288c:	bl	1238c <__errno_location@plt>
   12890:	mov	r2, #5
   12894:	movw	r1, #55380	; 0xd854
   12898:	movt	r1, #2
   1289c:	ldr	r7, [r0]
   128a0:	mov	r0, r5
   128a4:	bl	120d4 <dcgettext@plt>
   128a8:	mov	r1, r7
   128ac:	mov	r2, r0
   128b0:	mov	r0, #1
   128b4:	bl	12224 <error@plt>
   128b8:	b	126e8 <__assert_fail@plt+0xb0>
   128bc:	bl	120e0 <__stack_chk_fail@plt>
   128c0:			; <UNDEFINED> instruction: 0x000455b8
   128c4:	mov	fp, #0
   128c8:	mov	lr, #0
   128cc:	pop	{r1}		; (ldr r1, [sp], #4)
   128d0:	mov	r2, sp
   128d4:	push	{r2}		; (str r2, [sp, #-4]!)
   128d8:	push	{r0}		; (str r0, [sp, #-4]!)
   128dc:	ldr	ip, [pc, #16]	; 128f4 <__assert_fail@plt+0x2bc>
   128e0:	push	{ip}		; (str ip, [sp, #-4]!)
   128e4:	ldr	r0, [pc, #12]	; 128f8 <__assert_fail@plt+0x2c0>
   128e8:	ldr	r3, [pc, #12]	; 128fc <__assert_fail@plt+0x2c4>
   128ec:	bl	12290 <__libc_start_main@plt>
   128f0:	bl	125cc <abort@plt>
   128f4:	andeq	sp, r2, r8, ror #5
   128f8:	andeq	r2, r1, ip, ror #12
   128fc:	andeq	sp, r2, r4, lsl #5
   12900:	ldr	r3, [pc, #20]	; 1291c <__assert_fail@plt+0x2e4>
   12904:	ldr	r2, [pc, #20]	; 12920 <__assert_fail@plt+0x2e8>
   12908:	add	r3, pc, r3
   1290c:	ldr	r2, [r3, r2]
   12910:	cmp	r2, #0
   12914:	bxeq	lr
   12918:	b	122e4 <__gmon_start__@plt>
   1291c:	strdeq	r2, [r3], -r0
   12920:	andeq	r0, r0, r8, asr r2
   12924:	push	{r3, lr}
   12928:	movw	r0, #21892	; 0x5584
   1292c:	ldr	r3, [pc, #36]	; 12958 <__assert_fail@plt+0x320>
   12930:	movt	r0, #4
   12934:	rsb	r3, r0, r3
   12938:	cmp	r3, #6
   1293c:	popls	{r3, pc}
   12940:	movw	r3, #0
   12944:	movt	r3, #0
   12948:	cmp	r3, #0
   1294c:	popeq	{r3, pc}
   12950:	blx	r3
   12954:	pop	{r3, pc}
   12958:	andeq	r5, r4, r7, lsl #11
   1295c:	push	{r3, lr}
   12960:	movw	r0, #21892	; 0x5584
   12964:	movw	r3, #21892	; 0x5584
   12968:	movt	r0, #4
   1296c:	movt	r3, #4
   12970:	rsb	r3, r0, r3
   12974:	asr	r3, r3, #2
   12978:	add	r3, r3, r3, lsr #31
   1297c:	asrs	r1, r3, #1
   12980:	popeq	{r3, pc}
   12984:	movw	r2, #0
   12988:	movt	r2, #0
   1298c:	cmp	r2, #0
   12990:	popeq	{r3, pc}
   12994:	blx	r2
   12998:	pop	{r3, pc}
   1299c:	push	{r4, lr}
   129a0:	movw	r4, #21924	; 0x55a4
   129a4:	movt	r4, #4
   129a8:	ldrb	r3, [r4]
   129ac:	cmp	r3, #0
   129b0:	popne	{r4, pc}
   129b4:	bl	12924 <__assert_fail@plt+0x2ec>
   129b8:	mov	r3, #1
   129bc:	strb	r3, [r4]
   129c0:	pop	{r4, pc}
   129c4:	movw	r0, #20212	; 0x4ef4
   129c8:	movt	r0, #4
   129cc:	push	{r3, lr}
   129d0:	ldr	r3, [r0]
   129d4:	cmp	r3, #0
   129d8:	beq	129f0 <__assert_fail@plt+0x3b8>
   129dc:	movw	r3, #0
   129e0:	movt	r3, #0
   129e4:	cmp	r3, #0
   129e8:	beq	129f0 <__assert_fail@plt+0x3b8>
   129ec:	blx	r3
   129f0:	pop	{r3, lr}
   129f4:	b	1295c <__assert_fail@plt+0x324>
   129f8:	push	{r3, r4, r5, lr}
   129fc:	movw	r3, #25340	; 0x62fc
   12a00:	movt	r3, #4
   12a04:	mov	r5, r0
   12a08:	ldr	r4, [sp, #24]
   12a0c:	str	r1, [r3, #12]
   12a10:	bl	16a88 <__assert_fail@plt+0x4450>
   12a14:	mov	r1, r4
   12a18:	mov	r2, r0
   12a1c:	mov	r0, r5
   12a20:	pop	{r3, r4, r5, lr}
   12a24:	b	196b8 <__assert_fail@plt+0x7080>
   12a28:	push	{r3, lr}
   12a2c:	movw	r3, #25384	; 0x6328
   12a30:	movt	r3, #4
   12a34:	ldr	r3, [r3, #44]	; 0x2c
   12a38:	tst	r3, #4
   12a3c:	beq	12a60 <__assert_fail@plt+0x428>
   12a40:	movw	r3, #21912	; 0x5598
   12a44:	movt	r3, #4
   12a48:	movw	r0, #54116	; 0xd364
   12a4c:	mov	r1, #1
   12a50:	ldr	r3, [r3]
   12a54:	movt	r0, #2
   12a58:	mov	r2, #35	; 0x23
   12a5c:	bl	121a0 <fwrite@plt>
   12a60:	movw	r3, #22048	; 0x5620
   12a64:	movt	r3, #4
   12a68:	ldr	r0, [r3]
   12a6c:	pop	{r3, lr}
   12a70:	b	29040 <__assert_fail@plt+0x16a08>
   12a74:	push	{r4, lr}
   12a78:	movw	r4, #21904	; 0x5590
   12a7c:	movt	r4, #4
   12a80:	sub	sp, sp, #1024	; 0x400
   12a84:	sub	sp, sp, #8
   12a88:	mov	r1, #1024	; 0x400
   12a8c:	ldr	r3, [r4]
   12a90:	add	r0, sp, #4
   12a94:	str	r3, [sp, #1028]	; 0x404
   12a98:	bl	122fc <getcwd@plt>
   12a9c:	cmp	r0, #0
   12aa0:	addne	r0, sp, #4
   12aa4:	movweq	r0, #528	; 0x210
   12aa8:	movteq	r0, #3
   12aac:	bl	123b0 <__strdup@plt>
   12ab0:	ldr	r2, [sp, #1028]	; 0x404
   12ab4:	ldr	r3, [r4]
   12ab8:	cmp	r2, r3
   12abc:	bne	12acc <__assert_fail@plt+0x494>
   12ac0:	add	sp, sp, #1024	; 0x400
   12ac4:	add	sp, sp, #8
   12ac8:	pop	{r4, pc}
   12acc:	bl	120e0 <__stack_chk_fail@plt>
   12ad0:	b	12a74 <__assert_fail@plt+0x43c>
   12ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad8:	movw	fp, #21904	; 0x5590
   12adc:	sub	sp, sp, #212	; 0xd4
   12ae0:	movt	fp, #4
   12ae4:	mov	r6, r0
   12ae8:	mov	r9, r2
   12aec:	ldr	sl, [sp, #248]	; 0xf8
   12af0:	movw	r8, #25384	; 0x6328
   12af4:	ldr	r0, [fp]
   12af8:	movt	r8, #4
   12afc:	str	r3, [sp, #60]	; 0x3c
   12b00:	str	sl, [sp, #64]	; 0x40
   12b04:	str	r1, [sp, #68]	; 0x44
   12b08:	str	r0, [sp, #204]	; 0xcc
   12b0c:	bl	18ae8 <__assert_fail@plt+0x64b0>
   12b10:	ldr	ip, [sp, #60]	; 0x3c
   12b14:	mov	r2, #1
   12b18:	mov	r3, #0
   12b1c:	strb	r2, [r8, #56]	; 0x38
   12b20:	cmp	ip, #0
   12b24:	strb	r3, [sl]
   12b28:	movne	r4, #655360	; 0xa0000
   12b2c:	beq	12e3c <__assert_fail@plt+0x804>
   12b30:	bl	1238c <__errno_location@plt>
   12b34:	mov	r1, r4
   12b38:	mov	r4, #0
   12b3c:	mov	r7, r0
   12b40:	mov	r0, r6
   12b44:	str	r4, [r7]
   12b48:	bl	21c38 <__assert_fail@plt+0xf600>
   12b4c:	subs	sl, r0, #0
   12b50:	blt	12ba8 <__assert_fail@plt+0x570>
   12b54:	str	r4, [r7]
   12b58:	bl	12524 <fchdir@plt>
   12b5c:	subs	r5, r0, #0
   12b60:	beq	12b9c <__assert_fail@plt+0x564>
   12b64:	ldr	r4, [r7]
   12b68:	mov	r0, sl
   12b6c:	bl	125d8 <close@plt>
   12b70:	cmp	r4, #20
   12b74:	str	r4, [r7]
   12b78:	moveq	r5, #2
   12b7c:	movne	r5, #5
   12b80:	ldr	r2, [sp, #204]	; 0xcc
   12b84:	mov	r0, r5
   12b88:	ldr	r3, [fp]
   12b8c:	cmp	r2, r3
   12b90:	bne	12fcc <__assert_fail@plt+0x994>
   12b94:	add	sp, sp, #212	; 0xd4
   12b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b9c:	mov	r0, sl
   12ba0:	bl	125d8 <close@plt>
   12ba4:	b	12b80 <__assert_fail@plt+0x548>
   12ba8:	ldr	r3, [r7]
   12bac:	cmp	r3, #2
   12bb0:	beq	12e8c <__assert_fail@plt+0x854>
   12bb4:	cmp	r3, #40	; 0x28
   12bb8:	beq	12e50 <__assert_fail@plt+0x818>
   12bbc:	str	r4, [r7]
   12bc0:	movw	r0, #528	; 0x210
   12bc4:	mov	r1, #131072	; 0x20000
   12bc8:	movt	r0, #3
   12bcc:	bl	20f9c <__assert_fail@plt+0xe964>
   12bd0:	cmp	r0, #0
   12bd4:	str	r0, [sp, #76]	; 0x4c
   12bd8:	blt	12f9c <__assert_fail@plt+0x964>
   12bdc:	movw	sl, #21912	; 0x5598
   12be0:	movw	ip, #23992	; 0x5db8
   12be4:	movt	sl, #4
   12be8:	movt	ip, #4
   12bec:	str	sl, [sp, #84]	; 0x54
   12bf0:	mov	r5, #1
   12bf4:	movw	sl, #54180	; 0xd3a4
   12bf8:	str	ip, [sp, #72]	; 0x48
   12bfc:	movt	sl, #2
   12c00:	str	r7, [sp, #92]	; 0x5c
   12c04:	str	sl, [sp, #80]	; 0x50
   12c08:	str	fp, [sp, #88]	; 0x58
   12c0c:	b	12ce4 <__assert_fail@plt+0x6ac>
   12c10:	bl	12ad0 <__assert_fail@plt+0x498>
   12c14:	movw	r1, #528	; 0x210
   12c18:	movt	r1, #3
   12c1c:	mov	sl, r0
   12c20:	add	r0, sp, #96	; 0x60
   12c24:	bl	13dbc <__assert_fail@plt+0x1784>
   12c28:	ldr	fp, [sp, #68]	; 0x44
   12c2c:	cmp	fp, #1
   12c30:	beq	12cc4 <__assert_fail@plt+0x68c>
   12c34:	cmp	r5, #1
   12c38:	beq	12ccc <__assert_fail@plt+0x694>
   12c3c:	add	r0, sp, #96	; 0x60
   12c40:	movw	r1, #528	; 0x210
   12c44:	movt	r1, #3
   12c48:	bl	13dbc <__assert_fail@plt+0x1784>
   12c4c:	mov	r2, #5
   12c50:	movw	r1, #54184	; 0xd3a8
   12c54:	movt	r1, #2
   12c58:	mov	fp, r0
   12c5c:	mov	r0, r4
   12c60:	bl	120d4 <dcgettext@plt>
   12c64:	mov	r1, sl
   12c68:	mov	r2, r0
   12c6c:	mov	r0, r4
   12c70:	str	r2, [sp, #44]	; 0x2c
   12c74:	bl	19778 <__assert_fail@plt+0x7140>
   12c78:	mov	r1, r7
   12c7c:	mov	sl, r0
   12c80:	mov	r0, #1
   12c84:	bl	19778 <__assert_fail@plt+0x7140>
   12c88:	ldr	ip, [sp, #96]	; 0x60
   12c8c:	str	fp, [sp, #16]
   12c90:	mov	r3, sl
   12c94:	ldr	fp, [sp, #48]	; 0x30
   12c98:	mov	r1, r4
   12c9c:	ldr	sl, [sp, #80]	; 0x50
   12ca0:	str	ip, [sp, #12]
   12ca4:	movw	ip, #722	; 0x2d2
   12ca8:	ldr	r2, [sp, #44]	; 0x2c
   12cac:	str	sl, [sp]
   12cb0:	str	fp, [sp, #8]
   12cb4:	str	ip, [sp, #20]
   12cb8:	str	r0, [sp, #4]
   12cbc:	mov	r0, #1
   12cc0:	bl	12224 <error@plt>
   12cc4:	cmp	r5, #1
   12cc8:	bne	12f80 <__assert_fail@plt+0x948>
   12ccc:	ldr	r0, [sp, #76]	; 0x4c
   12cd0:	bl	12524 <fchdir@plt>
   12cd4:	cmp	r0, #0
   12cd8:	bne	12ec4 <__assert_fail@plt+0x88c>
   12cdc:	mov	r5, r0
   12ce0:	mov	r4, #1
   12ce4:	mov	r0, r9
   12ce8:	bl	187ec <__assert_fail@plt+0x61b4>
   12cec:	ldr	r3, [r8, #52]	; 0x34
   12cf0:	mov	r0, r6
   12cf4:	mov	r1, r9
   12cf8:	blx	r3
   12cfc:	cmp	r0, #0
   12d00:	bne	12ef8 <__assert_fail@plt+0x8c0>
   12d04:	bl	18f10 <__assert_fail@plt+0x68d8>
   12d08:	ldr	r3, [r9, #16]
   12d0c:	and	r3, r3, #61440	; 0xf000
   12d10:	cmp	r0, #0
   12d14:	bne	12d20 <__assert_fail@plt+0x6e8>
   12d18:	cmp	r3, #40960	; 0xa000
   12d1c:	beq	12e94 <__assert_fail@plt+0x85c>
   12d20:	cmp	r3, #16384	; 0x4000
   12d24:	bne	12f48 <__assert_fail@plt+0x910>
   12d28:	ldr	r3, [r8, #44]	; 0x2c
   12d2c:	tst	r3, #4
   12d30:	bne	12e58 <__assert_fail@plt+0x820>
   12d34:	mov	r0, r6
   12d38:	bl	12134 <chdir@plt>
   12d3c:	cmp	r0, #0
   12d40:	bne	12f58 <__assert_fail@plt+0x920>
   12d44:	ldr	ip, [sp, #72]	; 0x48
   12d48:	add	r0, sp, #96	; 0x60
   12d4c:	ldrd	sl, [r9]
   12d50:	ldr	r7, [ip]
   12d54:	strd	sl, [sp, #48]	; 0x30
   12d58:	ldrd	sl, [r9, #96]	; 0x60
   12d5c:	bl	187ec <__assert_fail@plt+0x61b4>
   12d60:	add	r1, sp, #96	; 0x60
   12d64:	movw	r0, #528	; 0x210
   12d68:	ldr	r3, [r8, #52]	; 0x34
   12d6c:	movt	r0, #3
   12d70:	blx	r3
   12d74:	subs	r4, r0, #0
   12d78:	bne	12fd0 <__assert_fail@plt+0x998>
   12d7c:	ldrd	r2, [sp, #96]	; 0x60
   12d80:	ldrd	r0, [sp, #48]	; 0x30
   12d84:	cmp	r1, r3
   12d88:	cmpeq	r0, r2
   12d8c:	bne	12c10 <__assert_fail@plt+0x5d8>
   12d90:	ldrd	r2, [sp, #192]	; 0xc0
   12d94:	cmp	fp, r3
   12d98:	cmpeq	sl, r2
   12d9c:	beq	12e78 <__assert_fail@plt+0x840>
   12da0:	bl	12ad0 <__assert_fail@plt+0x498>
   12da4:	movw	r1, #528	; 0x210
   12da8:	movt	r1, #3
   12dac:	str	r0, [sp, #48]	; 0x30
   12db0:	add	r0, sp, #96	; 0x60
   12db4:	bl	13dbc <__assert_fail@plt+0x1784>
   12db8:	mov	r2, #5
   12dbc:	movw	r1, #54304	; 0xd420
   12dc0:	movt	r1, #2
   12dc4:	mov	ip, r0
   12dc8:	mov	r0, r4
   12dcc:	str	ip, [sp, #44]	; 0x2c
   12dd0:	bl	120d4 <dcgettext@plt>
   12dd4:	ldr	r1, [sp, #48]	; 0x30
   12dd8:	str	r0, [sp, #32]
   12ddc:	mov	r0, r4
   12de0:	bl	19778 <__assert_fail@plt+0x7140>
   12de4:	mov	r1, r7
   12de8:	str	r0, [sp, #56]	; 0x38
   12dec:	mov	r0, #1
   12df0:	bl	19778 <__assert_fail@plt+0x7140>
   12df4:	ldr	ip, [sp, #44]	; 0x2c
   12df8:	strd	sl, [sp, #8]
   12dfc:	mov	r1, r4
   12e00:	ldrd	sl, [sp, #192]	; 0xc0
   12e04:	str	ip, [sp, #24]
   12e08:	ldr	ip, [sp, #80]	; 0x50
   12e0c:	ldr	r2, [sp, #32]
   12e10:	ldr	r3, [sp, #56]	; 0x38
   12e14:	str	ip, [sp]
   12e18:	movw	ip, #722	; 0x2d2
   12e1c:	strd	sl, [sp, #16]
   12e20:	str	ip, [sp, #28]
   12e24:	str	r0, [sp, #4]
   12e28:	eor	r0, r5, #1
   12e2c:	bl	12224 <error@plt>
   12e30:	ldr	r0, [sp, #48]	; 0x30
   12e34:	bl	12020 <free@plt>
   12e38:	b	12cc4 <__assert_fail@plt+0x68c>
   12e3c:	bl	18f10 <__assert_fail@plt+0x68d8>
   12e40:	cmp	r0, #0
   12e44:	moveq	r4, #688128	; 0xa8000
   12e48:	movne	r4, #655360	; 0xa0000
   12e4c:	b	12b30 <__assert_fail@plt+0x4f8>
   12e50:	mov	r5, #1
   12e54:	b	12b80 <__assert_fail@plt+0x548>
   12e58:	ldr	fp, [sp, #84]	; 0x54
   12e5c:	movw	r2, #54152	; 0xd388
   12e60:	mov	r1, #1
   12e64:	movt	r2, #2
   12e68:	mov	r3, r6
   12e6c:	ldr	r0, [fp]
   12e70:	bl	12428 <__fprintf_chk@plt>
   12e74:	b	12d34 <__assert_fail@plt+0x6fc>
   12e78:	ldr	fp, [sp, #88]	; 0x58
   12e7c:	ldr	r0, [sp, #76]	; 0x4c
   12e80:	mov	r5, #0
   12e84:	bl	125d8 <close@plt>
   12e88:	b	12b80 <__assert_fail@plt+0x548>
   12e8c:	mov	r5, #6
   12e90:	b	12b80 <__assert_fail@plt+0x548>
   12e94:	ldr	sl, [sp, #60]	; 0x3c
   12e98:	cmp	sl, #1
   12e9c:	bne	12fa4 <__assert_fail@plt+0x96c>
   12ea0:	mov	r0, #3
   12ea4:	mov	r1, r6
   12ea8:	mov	r2, r9
   12eac:	bl	12578 <__xstat64@plt>
   12eb0:	cmp	r0, #0
   12eb4:	bne	12fb4 <__assert_fail@plt+0x97c>
   12eb8:	ldr	r3, [r9, #16]
   12ebc:	and	r3, r3, #61440	; 0xf000
   12ec0:	b	12d20 <__assert_fail@plt+0x6e8>
   12ec4:	ldr	r7, [sp, #92]	; 0x5c
   12ec8:	mov	r2, #5
   12ecc:	movw	r1, #54424	; 0xd498
   12ed0:	mov	r0, #0
   12ed4:	movt	r1, #2
   12ed8:	ldr	fp, [sp, #88]	; 0x58
   12edc:	ldr	r4, [r7]
   12ee0:	bl	120d4 <dcgettext@plt>
   12ee4:	mov	r1, r4
   12ee8:	mov	r2, r0
   12eec:	mov	r0, #1
   12ef0:	bl	12224 <error@plt>
   12ef4:	b	12e7c <__assert_fail@plt+0x844>
   12ef8:	ldr	r7, [sp, #92]	; 0x5c
   12efc:	ldr	fp, [sp, #88]	; 0x58
   12f00:	ldr	r3, [r7]
   12f04:	cmp	r3, #2
   12f08:	moveq	r5, #3
   12f0c:	beq	12f34 <__assert_fail@plt+0x8fc>
   12f10:	movw	r2, #25340	; 0x62fc
   12f14:	movt	r2, #4
   12f18:	mov	r5, #3
   12f1c:	ldr	r2, [r2]
   12f20:	cmp	r2, #0
   12f24:	beq	12f34 <__assert_fail@plt+0x8fc>
   12f28:	cmp	r3, #0
   12f2c:	beq	12f34 <__assert_fail@plt+0x8fc>
   12f30:	str	r3, [r7]
   12f34:	ldr	r0, [sp, #76]	; 0x4c
   12f38:	bl	125d8 <close@plt>
   12f3c:	ldr	ip, [sp, #64]	; 0x40
   12f40:	strb	r4, [ip]
   12f44:	b	12b80 <__assert_fail@plt+0x548>
   12f48:	ldr	fp, [sp, #88]	; 0x58
   12f4c:	mov	r5, #2
   12f50:	mov	r4, #1
   12f54:	b	12f34 <__assert_fail@plt+0x8fc>
   12f58:	ldr	r7, [sp, #92]	; 0x5c
   12f5c:	ldr	fp, [sp, #88]	; 0x58
   12f60:	ldr	r3, [r7]
   12f64:	cmp	r3, #2
   12f68:	beq	12f90 <__assert_fail@plt+0x958>
   12f6c:	cmp	r3, #20
   12f70:	beq	12f4c <__assert_fail@plt+0x914>
   12f74:	mov	r5, #5
   12f78:	mov	r4, #1
   12f7c:	b	12f28 <__assert_fail@plt+0x8f0>
   12f80:	ldr	fp, [sp, #88]	; 0x58
   12f84:	mov	r5, #6
   12f88:	mov	r4, #1
   12f8c:	b	12f34 <__assert_fail@plt+0x8fc>
   12f90:	mov	r5, #6
   12f94:	mov	r4, #1
   12f98:	b	12f30 <__assert_fail@plt+0x8f8>
   12f9c:	mov	r5, #4
   12fa0:	b	12f3c <__assert_fail@plt+0x904>
   12fa4:	mov	r4, #1
   12fa8:	ldr	fp, [sp, #88]	; 0x58
   12fac:	mov	r5, r4
   12fb0:	b	12f34 <__assert_fail@plt+0x8fc>
   12fb4:	ldr	r7, [sp, #92]	; 0x5c
   12fb8:	mov	r5, #6
   12fbc:	ldr	fp, [sp, #88]	; 0x58
   12fc0:	ldr	r4, [sp, #60]	; 0x3c
   12fc4:	ldr	r3, [r7]
   12fc8:	b	12f28 <__assert_fail@plt+0x8f0>
   12fcc:	bl	120e0 <__stack_chk_fail@plt>
   12fd0:	ldr	r7, [sp, #92]	; 0x5c
   12fd4:	movw	r1, #528	; 0x210
   12fd8:	movt	r1, #3
   12fdc:	ldr	r0, [r7]
   12fe0:	bl	197b8 <__assert_fail@plt+0x7180>
   12fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fe8:	movw	r5, #21904	; 0x5590
   12fec:	movt	r5, #4
   12ff0:	mov	fp, r1
   12ff4:	sub	sp, sp, #148	; 0x94
   12ff8:	mov	r6, r0
   12ffc:	ldr	r1, [r5]
   13000:	movw	r4, #25340	; 0x62fc
   13004:	strd	r2, [sp, #16]
   13008:	movt	r4, #4
   1300c:	ldr	sl, [sp, #184]	; 0xb8
   13010:	str	r1, [sp, #140]	; 0x8c
   13014:	ldr	r9, [sp, #188]	; 0xbc
   13018:	bl	21a38 <__assert_fail@plt+0xf400>
   1301c:	mov	r7, r0
   13020:	mov	r0, r6
   13024:	bl	21b5c <__assert_fail@plt+0xf524>
   13028:	mov	r3, #0
   1302c:	str	r3, [r4]
   13030:	mov	r8, r0
   13034:	mov	r0, r6
   13038:	bl	1232c <strlen@plt>
   1303c:	str	r0, [r4, #20]
   13040:	ldrb	r3, [r8]
   13044:	cmp	r3, #0
   13048:	beq	13064 <__assert_fail@plt+0xa2c>
   1304c:	ldrb	r3, [r7]
   13050:	cmp	r3, #46	; 0x2e
   13054:	bne	130a0 <__assert_fail@plt+0xa68>
   13058:	ldrb	r3, [r7, #1]
   1305c:	cmp	r3, #0
   13060:	bne	130a0 <__assert_fail@plt+0xa68>
   13064:	mov	r0, r7
   13068:	bl	12020 <free@plt>
   1306c:	ldrd	r2, [sp, #16]
   13070:	mov	r0, r6
   13074:	str	sl, [sp, #8]
   13078:	mov	r1, r6
   1307c:	strd	r2, [sp]
   13080:	mov	r2, fp
   13084:	blx	r9
   13088:	ldr	r2, [sp, #140]	; 0x8c
   1308c:	ldr	r3, [r5]
   13090:	cmp	r2, r3
   13094:	bne	131a4 <__assert_fail@plt+0xb6c>
   13098:	add	sp, sp, #148	; 0x94
   1309c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a0:	mov	r3, #0
   130a4:	strb	r3, [sp, #31]
   130a8:	ldrb	r3, [r8]
   130ac:	subs	r1, r3, #46	; 0x2e
   130b0:	bne	130c0 <__assert_fail@plt+0xa88>
   130b4:	ldrb	r3, [r8, #1]
   130b8:	subs	r1, r3, #46	; 0x2e
   130bc:	ldrbeq	r1, [r8, #2]
   130c0:	adds	r1, r1, #0
   130c4:	add	r3, sp, #31
   130c8:	mov	r0, r7
   130cc:	str	r3, [sp]
   130d0:	movne	r1, #1
   130d4:	add	r2, sp, #32
   130d8:	mov	r3, #1
   130dc:	bl	12ad4 <__assert_fail@plt+0x49c>
   130e0:	cmp	r0, #0
   130e4:	beq	1313c <__assert_fail@plt+0xb04>
   130e8:	cmp	r0, #4
   130ec:	movw	r3, #528	; 0x210
   130f0:	movt	r3, #3
   130f4:	movne	r8, r7
   130f8:	moveq	r8, r3
   130fc:	bl	1238c <__errno_location@plt>
   13100:	ldr	r6, [r0]
   13104:	cmp	r6, #0
   13108:	beq	13168 <__assert_fail@plt+0xb30>
   1310c:	mov	r1, r8
   13110:	mov	r0, #0
   13114:	bl	19778 <__assert_fail@plt+0x7140>
   13118:	movw	r2, #8288	; 0x2060
   1311c:	mov	r1, r6
   13120:	movt	r2, #3
   13124:	mov	r3, r0
   13128:	mov	r0, #0
   1312c:	bl	12224 <error@plt>
   13130:	mov	r3, #1
   13134:	str	r3, [r4, #28]
   13138:	b	13088 <__assert_fail@plt+0xa50>
   1313c:	mov	r0, r7
   13140:	bl	12020 <free@plt>
   13144:	ldrd	r2, [sp, #16]
   13148:	mov	r0, r6
   1314c:	mov	r1, r8
   13150:	str	sl, [sp, #8]
   13154:	strd	r2, [sp]
   13158:	mov	r2, fp
   1315c:	blx	r9
   13160:	bl	12a28 <__assert_fail@plt+0x3f0>
   13164:	b	13088 <__assert_fail@plt+0xa50>
   13168:	mov	r2, #5
   1316c:	mov	r0, r6
   13170:	movw	r1, #54464	; 0xd4c0
   13174:	movt	r1, #2
   13178:	bl	120d4 <dcgettext@plt>
   1317c:	mov	r1, r7
   13180:	mov	r8, r0
   13184:	mov	r0, r6
   13188:	bl	19778 <__assert_fail@plt+0x7140>
   1318c:	mov	r1, r6
   13190:	mov	r2, r8
   13194:	mov	r3, r0
   13198:	mov	r0, r6
   1319c:	bl	12224 <error@plt>
   131a0:	b	13130 <__assert_fail@plt+0xaf8>
   131a4:	bl	120e0 <__stack_chk_fail@plt>
   131a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ac:	movw	r7, #21904	; 0x5590
   131b0:	movt	r7, #4
   131b4:	sub	sp, sp, #308	; 0x134
   131b8:	add	r6, sp, #512	; 0x200
   131bc:	mov	r8, r1
   131c0:	ldr	ip, [r7]
   131c4:	mov	sl, r2
   131c8:	ldrd	r4, [r6, #-160]	; 0xffffff60
   131cc:	mov	r9, r0
   131d0:	str	r3, [sp, #28]
   131d4:	movw	r6, #25340	; 0x62fc
   131d8:	str	ip, [sp, #300]	; 0x12c
   131dc:	bl	16a88 <__assert_fail@plt+0x4450>
   131e0:	movt	r6, #4
   131e4:	str	sl, [sp]
   131e8:	strd	r4, [sp, #184]	; 0xb8
   131ec:	mov	r1, r9
   131f0:	mov	r4, #0
   131f4:	mov	r2, r8
   131f8:	add	r3, sp, #88	; 0x58
   131fc:	str	r8, [r6, #12]
   13200:	str	r4, [r6, #8]
   13204:	strb	r4, [r6, #4]
   13208:	strb	r4, [r6, #5]
   1320c:	strb	r4, [r6, #40]	; 0x28
   13210:	str	r4, [sp, #104]	; 0x68
   13214:	mov	fp, r0
   13218:	add	r0, sp, #344	; 0x158
   1321c:	bl	18f4c <__assert_fail@plt+0x6914>
   13220:	cmp	r0, r4
   13224:	beq	13250 <__assert_fail@plt+0xc18>
   13228:	ldr	r3, [r6, #8]
   1322c:	and	r3, r3, #61440	; 0xf000
   13230:	cmp	r3, #16384	; 0x4000
   13234:	beq	13284 <__assert_fail@plt+0xc4c>
   13238:	movw	r3, #25384	; 0x6328
   1323c:	movt	r3, #4
   13240:	ldr	r2, [r6]
   13244:	ldr	r3, [r3, #8]
   13248:	cmp	r2, r3
   1324c:	bge	1326c <__assert_fail@plt+0xc34>
   13250:	mov	r0, #0
   13254:	ldr	r2, [sp, #300]	; 0x12c
   13258:	ldr	r3, [r7]
   1325c:	cmp	r2, r3
   13260:	bne	13c00 <__assert_fail@plt+0x15c8>
   13264:	add	sp, sp, #308	; 0x134
   13268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1326c:	mov	r0, r9
   13270:	add	r1, sp, #88	; 0x58
   13274:	mov	r2, fp
   13278:	bl	196b8 <__assert_fail@plt+0x7080>
   1327c:	mov	r0, r4
   13280:	b	13254 <__assert_fail@plt+0xc1c>
   13284:	mov	r0, r9
   13288:	mov	r1, r8
   1328c:	add	r2, sp, #88	; 0x58
   13290:	bl	187f0 <__assert_fail@plt+0x61b8>
   13294:	cmp	r0, #0
   13298:	bne	13250 <__assert_fail@plt+0xc18>
   1329c:	movw	ip, #25384	; 0x6328
   132a0:	movt	ip, #4
   132a4:	ldr	r3, [sp, #104]	; 0x68
   132a8:	mov	r1, #1
   132ac:	ldr	r2, [ip, #4]
   132b0:	str	ip, [sp, #32]
   132b4:	cmp	r2, #0
   132b8:	strb	r1, [r6, #4]
   132bc:	str	r3, [r6, #8]
   132c0:	str	r3, [sp, #344]	; 0x158
   132c4:	movlt	r2, r0
   132c8:	blt	132dc <__assert_fail@plt+0xca4>
   132cc:	ldr	r3, [r6]
   132d0:	cmp	r2, r3
   132d4:	movgt	r2, #0
   132d8:	movle	r2, #1
   132dc:	movw	r4, #21092	; 0x5264
   132e0:	movt	r4, #4
   132e4:	strb	r2, [r6, #24]
   132e8:	ldr	r3, [r4]
   132ec:	str	r4, [sp, #40]	; 0x28
   132f0:	cmp	r3, #0
   132f4:	blt	13414 <__assert_fail@plt+0xddc>
   132f8:	movw	r4, #21928	; 0x55a8
   132fc:	movt	r4, #4
   13300:	mov	ip, #0
   13304:	str	r4, [sp, #36]	; 0x24
   13308:	ldr	r2, [r4]
   1330c:	mov	r4, ip
   13310:	str	fp, [sp, #44]	; 0x2c
   13314:	mov	ip, r6
   13318:	mov	fp, r3
   1331c:	ldr	r5, [sp, #40]	; 0x28
   13320:	str	r7, [sp, #24]
   13324:	b	13338 <__assert_fail@plt+0xd00>
   13328:	ldr	fp, [r5]
   1332c:	add	r4, r4, #1
   13330:	cmp	fp, r4
   13334:	blt	13534 <__assert_fail@plt+0xefc>
   13338:	lsl	r1, r4, #4
   1333c:	ldrd	r6, [sp, #184]	; 0xb8
   13340:	add	r3, r2, r1
   13344:	ldrd	r0, [r1, r2]
   13348:	cmp	r7, r1
   1334c:	cmpeq	r6, r0
   13350:	bne	13328 <__assert_fail@plt+0xcf0>
   13354:	ldrd	r0, [r3, #8]
   13358:	ldrd	r6, [sp, #88]	; 0x58
   1335c:	cmp	r7, r1
   13360:	cmpeq	r6, r0
   13364:	bne	13328 <__assert_fail@plt+0xcf0>
   13368:	mov	r0, #3
   1336c:	mov	r1, r8
   13370:	add	r2, sp, #192	; 0xc0
   13374:	mov	r7, #1
   13378:	strb	r7, [ip, #24]
   1337c:	str	ip, [sp, #16]
   13380:	bl	125e4 <__lxstat64@plt>
   13384:	ldr	ip, [sp, #16]
   13388:	subs	r3, r0, #0
   1338c:	movne	r3, #32768	; 0x8000
   13390:	strne	r3, [sp, #208]	; 0xd0
   13394:	bne	133a8 <__assert_fail@plt+0xd70>
   13398:	ldr	r2, [sp, #208]	; 0xd0
   1339c:	and	r2, r2, #61440	; 0xf000
   133a0:	cmp	r2, #40960	; 0xa000
   133a4:	beq	13ac0 <__assert_fail@plt+0x1488>
   133a8:	rsb	fp, r4, fp
   133ac:	mov	r3, #5
   133b0:	add	fp, fp, #1
   133b4:	str	r3, [sp]
   133b8:	movw	r1, #54636	; 0xd56c
   133bc:	movw	r2, #54772	; 0xd5f4
   133c0:	mov	r3, fp
   133c4:	movt	r1, #2
   133c8:	movt	r2, #2
   133cc:	mov	r0, #0
   133d0:	str	ip, [sp, #16]
   133d4:	bl	125f0 <dcngettext@plt>
   133d8:	mov	r1, r9
   133dc:	mov	r2, r0
   133e0:	mov	r0, #0
   133e4:	str	r2, [sp, #20]
   133e8:	bl	19778 <__assert_fail@plt+0x7140>
   133ec:	str	fp, [sp]
   133f0:	ldr	r2, [sp, #20]
   133f4:	mov	r3, r0
   133f8:	mov	r0, #0
   133fc:	mov	r1, r0
   13400:	bl	12224 <error@plt>
   13404:	ldr	ip, [sp, #16]
   13408:	ldr	r6, [sp, #36]	; 0x24
   1340c:	ldr	r2, [r6]
   13410:	b	13328 <__assert_fail@plt+0xcf0>
   13414:	movw	ip, #21928	; 0x55a8
   13418:	movt	ip, #4
   1341c:	str	ip, [sp, #36]	; 0x24
   13420:	ldr	r2, [ip]
   13424:	ldr	ip, [sp, #36]	; 0x24
   13428:	add	r3, r3, #1
   1342c:	ldr	r4, [sp, #40]	; 0x28
   13430:	movw	r5, #21092	; 0x5264
   13434:	movt	r5, #4
   13438:	ldr	r1, [ip, #4]
   1343c:	str	r3, [r4]
   13440:	movw	r4, #21928	; 0x55a8
   13444:	cmp	r3, r1
   13448:	movt	r4, #4
   1344c:	bge	13548 <__assert_fail@plt+0xf10>
   13450:	ldr	ip, [sp, #32]
   13454:	lsl	r3, r3, #4
   13458:	ldrd	r4, [sp, #184]	; 0xb8
   1345c:	ldrb	r1, [ip, #13]
   13460:	cmp	r1, #0
   13464:	ldrd	r0, [sp, #88]	; 0x58
   13468:	strd	r4, [r2, r3]
   1346c:	add	r3, r2, r3
   13470:	strd	r0, [r3, #8]
   13474:	beq	134a8 <__assert_fail@plt+0xe70>
   13478:	ldr	r3, [r6]
   1347c:	movw	ip, #25340	; 0x62fc
   13480:	ldr	r4, [sp, #36]	; 0x24
   13484:	movt	ip, #4
   13488:	cmp	r3, #0
   1348c:	strdeq	r0, [r4, #8]
   13490:	beq	134a8 <__assert_fail@plt+0xe70>
   13494:	ldrd	r2, [r4, #8]
   13498:	cmp	r1, r3
   1349c:	cmpeq	r0, r2
   134a0:	movne	r3, #1
   134a4:	strbne	r3, [ip, #24]
   134a8:	ldr	ip, [sp, #32]
   134ac:	movw	r3, #25384	; 0x6328
   134b0:	movt	r3, #4
   134b4:	ldrb	r2, [ip]
   134b8:	cmp	r2, #0
   134bc:	beq	134d0 <__assert_fail@plt+0xe98>
   134c0:	ldr	r3, [r3, #8]
   134c4:	ldr	r2, [r6]
   134c8:	cmp	r2, r3
   134cc:	bge	13998 <__assert_fail@plt+0x1360>
   134d0:	ldr	r4, [sp, #32]
   134d4:	ldr	r3, [r4, #44]	; 0x2c
   134d8:	tst	r3, #4
   134dc:	bne	13958 <__assert_fail@plt+0x1320>
   134e0:	ldrb	r4, [r6, #24]
   134e4:	cmp	r4, #0
   134e8:	beq	1356c <__assert_fail@plt+0xf34>
   134ec:	ldr	ip, [sp, #32]
   134f0:	movw	r3, #25384	; 0x6328
   134f4:	movt	r3, #4
   134f8:	ldrb	r2, [ip]
   134fc:	cmp	r2, #0
   13500:	bne	1351c <__assert_fail@plt+0xee4>
   13504:	ldr	r2, [r6]
   13508:	movw	r4, #25340	; 0x62fc
   1350c:	ldr	r3, [r3, #8]
   13510:	movt	r4, #4
   13514:	cmp	r2, r3
   13518:	bge	139ac <__assert_fail@plt+0x1374>
   1351c:	ldr	r4, [sp, #40]	; 0x28
   13520:	mov	r0, #1
   13524:	ldr	r3, [r4]
   13528:	sub	r3, r3, #1
   1352c:	str	r3, [r4]
   13530:	b	13254 <__assert_fail@plt+0xc1c>
   13534:	mov	r3, fp
   13538:	mov	r6, ip
   1353c:	ldr	fp, [sp, #44]	; 0x2c
   13540:	ldr	r7, [sp, #24]
   13544:	b	13424 <__assert_fail@plt+0xdec>
   13548:	add	r1, r1, #32
   1354c:	mov	r0, r2
   13550:	str	r1, [r4, #4]
   13554:	lsl	r1, r1, #4
   13558:	bl	2962c <__assert_fail@plt+0x16ff4>
   1355c:	ldr	r3, [r5]
   13560:	mov	r2, r0
   13564:	str	r0, [r4]
   13568:	b	13450 <__assert_fail@plt+0xe18>
   1356c:	mov	r0, r9
   13570:	bl	1232c <strlen@plt>
   13574:	ldr	r3, [sp, #108]	; 0x6c
   13578:	cmp	r3, #1
   1357c:	strhi	r4, [sp, #60]	; 0x3c
   13580:	subhi	r3, r3, #2
   13584:	strls	r4, [sp, #56]	; 0x38
   13588:	movls	ip, #1
   1358c:	strhi	r3, [sp, #56]	; 0x38
   13590:	mov	r4, #0
   13594:	strls	ip, [sp, #60]	; 0x3c
   13598:	mov	r5, r0
   1359c:	bl	1238c <__errno_location@plt>
   135a0:	str	r0, [sp, #24]
   135a4:	mov	r0, r8
   135a8:	ldr	ip, [sp, #24]
   135ac:	str	r4, [ip]
   135b0:	bl	219b4 <__assert_fail@plt+0xf37c>
   135b4:	subs	ip, r0, #0
   135b8:	str	ip, [sp, #44]	; 0x2c
   135bc:	beq	13b34 <__assert_fail@plt+0x14fc>
   135c0:	add	r3, r9, r5
   135c4:	strb	r4, [sp, #87]	; 0x57
   135c8:	ldrb	r3, [r3, #-1]
   135cc:	cmp	r3, #47	; 0x2f
   135d0:	addeq	r5, r5, #1
   135d4:	addne	r5, r5, #2
   135d8:	str	r5, [sp, #48]	; 0x30
   135dc:	bl	18ae8 <__assert_fail@plt+0x64b0>
   135e0:	ldrb	r3, [r8]
   135e4:	cmp	r3, #46	; 0x2e
   135e8:	beq	13a04 <__assert_fail@plt+0x13cc>
   135ec:	add	r3, sp, #87	; 0x57
   135f0:	mov	r0, r8
   135f4:	str	r3, [sp]
   135f8:	add	r2, sp, #192	; 0xc0
   135fc:	mov	r1, #1
   13600:	mov	r3, #0
   13604:	bl	12ad4 <__assert_fail@plt+0x49c>
   13608:	cmp	r0, #7
   1360c:	ldrls	pc, [pc, r0, lsl #2]
   13610:	b	13654 <__assert_fail@plt+0x101c>
   13614:	andeq	r3, r1, r8, lsr r8
   13618:	strdeq	r3, [r1], -r4
   1361c:	andeq	r3, r1, r4, ror r8
   13620:	andeq	r3, r1, r4, ror r8
   13624:	andeq	r3, r1, r4, lsr r6
   13628:	andeq	r3, r1, r4, ror r8
   1362c:	andeq	r3, r1, r4, ror r8
   13630:	andeq	r3, r1, r4, ror r8
   13634:	ldr	r4, [sp, #24]
   13638:	movw	r2, #528	; 0x210
   1363c:	mov	r0, #0
   13640:	movt	r2, #3
   13644:	ldr	r1, [r4]
   13648:	bl	12224 <error@plt>
   1364c:	mov	r3, #1
   13650:	str	r3, [r6, #28]
   13654:	mov	fp, #0
   13658:	movw	ip, #25340	; 0x62fc
   1365c:	movw	r4, #25384	; 0x6328
   13660:	movt	ip, #4
   13664:	movt	r4, #4
   13668:	str	ip, [sp, #72]	; 0x48
   1366c:	str	fp, [sp, #36]	; 0x24
   13670:	movw	ip, #54056	; 0xd328
   13674:	str	fp, [sp, #68]	; 0x44
   13678:	movt	ip, #2
   1367c:	str	r4, [sp, #76]	; 0x4c
   13680:	str	ip, [sp, #64]	; 0x40
   13684:	ldr	r4, [sp, #24]
   13688:	mov	r3, #0
   1368c:	ldr	r0, [sp, #44]	; 0x2c
   13690:	str	r3, [r4]
   13694:	bl	12500 <readdir64@plt>
   13698:	subs	r4, r0, #0
   1369c:	beq	138d4 <__assert_fail@plt+0x129c>
   136a0:	ldrb	r3, [r4, #19]
   136a4:	cmp	r3, #0
   136a8:	beq	13684 <__assert_fail@plt+0x104c>
   136ac:	cmp	r3, #46	; 0x2e
   136b0:	beq	13984 <__assert_fail@plt+0x134c>
   136b4:	ldrb	r5, [r4, #18]
   136b8:	cmp	r5, #0
   136bc:	streq	r5, [sp, #52]	; 0x34
   136c0:	beq	136e4 <__assert_fail@plt+0x10ac>
   136c4:	sub	r5, r5, #1
   136c8:	cmp	r5, #11
   136cc:	ldrls	ip, [sp, #64]	; 0x40
   136d0:	movhi	ip, #0
   136d4:	strhi	ip, [sp, #52]	; 0x34
   136d8:	addls	r5, ip, r5, lsl #2
   136dc:	ldrls	r5, [r5, #12]
   136e0:	strls	r5, [sp, #52]	; 0x34
   136e4:	add	r5, r4, #19
   136e8:	mov	r0, r5
   136ec:	bl	1232c <strlen@plt>
   136f0:	ldr	ip, [sp, #48]	; 0x30
   136f4:	add	r0, r0, ip
   136f8:	cmp	r0, fp
   136fc:	bhi	137b4 <__assert_fail@plt+0x117c>
   13700:	ldr	r0, [sp, #48]	; 0x30
   13704:	mov	r1, r5
   13708:	ldr	r2, [sp, #36]	; 0x24
   1370c:	sub	ip, r0, #1
   13710:	add	ip, r2, ip
   13714:	mov	r0, ip
   13718:	bl	121f4 <strcpy@plt>
   1371c:	ldr	r3, [sp, #32]
   13720:	ldrb	r2, [r3, #12]
   13724:	ldr	r3, [r6]
   13728:	cmp	r2, #0
   1372c:	add	r3, r3, #1
   13730:	str	r3, [r6]
   13734:	mov	ip, r0
   13738:	bne	138ac <__assert_fail@plt+0x1274>
   1373c:	ldr	lr, [sp, #60]	; 0x3c
   13740:	cmp	lr, #0
   13744:	bne	138ac <__assert_fail@plt+0x1274>
   13748:	ldr	r0, [sp, #52]	; 0x34
   1374c:	cmp	r0, #0
   13750:	beq	13760 <__assert_fail@plt+0x1128>
   13754:	and	r3, r0, #61440	; 0xf000
   13758:	cmp	r3, #16384	; 0x4000
   1375c:	beq	13b70 <__assert_fail@plt+0x1538>
   13760:	ldr	r3, [sp, #52]	; 0x34
   13764:	mov	r1, ip
   13768:	ldr	ip, [sp, #56]	; 0x38
   1376c:	ldr	r0, [sp, #36]	; 0x24
   13770:	str	r3, [sp]
   13774:	rsbs	r2, ip, #1
   13778:	ldrd	r4, [r4]
   1377c:	mov	r3, r9
   13780:	movcc	r2, #0
   13784:	strd	r4, [sp, #8]
   13788:	bl	131a8 <__assert_fail@plt+0xb70>
   1378c:	ldr	r4, [sp, #56]	; 0x38
   13790:	ldr	ip, [sp, #68]	; 0x44
   13794:	rsb	r4, r0, r4
   13798:	add	ip, ip, r0
   1379c:	str	r4, [sp, #56]	; 0x38
   137a0:	str	ip, [sp, #68]	; 0x44
   137a4:	ldr	r3, [r6]
   137a8:	sub	r3, r3, #1
   137ac:	str	r3, [r6]
   137b0:	b	13684 <__assert_fail@plt+0x104c>
   137b4:	add	fp, fp, #1024	; 0x400
   137b8:	cmp	r0, fp
   137bc:	bhi	137b4 <__assert_fail@plt+0x117c>
   137c0:	ldr	r0, [sp, #36]	; 0x24
   137c4:	bl	12020 <free@plt>
   137c8:	mov	r0, fp
   137cc:	bl	29604 <__assert_fail@plt+0x16fcc>
   137d0:	mov	r1, r9
   137d4:	str	r0, [sp, #36]	; 0x24
   137d8:	bl	121f4 <strcpy@plt>
   137dc:	ldr	ip, [sp, #36]	; 0x24
   137e0:	mov	r1, #47	; 0x2f
   137e4:	ldr	lr, [sp, #48]	; 0x30
   137e8:	add	r3, ip, lr
   137ec:	strb	r1, [r3, #-2]
   137f0:	b	13700 <__assert_fail@plt+0x10c8>
   137f4:	mov	r2, #5
   137f8:	movw	r1, #54988	; 0xd6cc
   137fc:	mov	r0, #0
   13800:	movt	r1, #2
   13804:	bl	120d4 <dcgettext@plt>
   13808:	mov	r1, r9
   1380c:	mov	r4, r0
   13810:	mov	r0, #0
   13814:	bl	19778 <__assert_fail@plt+0x7140>
   13818:	mov	r2, r4
   1381c:	mov	r3, r0
   13820:	mov	r0, #0
   13824:	mov	r1, r0
   13828:	bl	12224 <error@plt>
   1382c:	mov	r3, #1
   13830:	str	r3, [r6, #28]
   13834:	b	134ec <__assert_fail@plt+0xeb4>
   13838:	ldrb	r3, [sp, #87]	; 0x57
   1383c:	cmp	r3, #0
   13840:	beq	13c34 <__assert_fail@plt+0x15fc>
   13844:	ldr	r4, [sp, #40]	; 0x28
   13848:	add	lr, sp, #512	; 0x200
   1384c:	ldr	ip, [sp, #36]	; 0x24
   13850:	ldrd	r2, [sp, #192]	; 0xc0
   13854:	ldr	r1, [r4]
   13858:	ldr	r0, [ip]
   1385c:	lsl	r1, r1, #4
   13860:	add	ip, r0, r1
   13864:	strd	r2, [ip, #8]
   13868:	ldrd	r2, [lr, #-224]	; 0xffffff20
   1386c:	strd	r2, [r0, r1]
   13870:	b	13654 <__assert_fail@plt+0x101c>
   13874:	ldr	ip, [sp, #24]
   13878:	mov	r1, r9
   1387c:	mov	r0, #0
   13880:	ldr	r4, [ip]
   13884:	bl	19778 <__assert_fail@plt+0x7140>
   13888:	movw	r2, #8288	; 0x2060
   1388c:	movt	r2, #3
   13890:	mov	r1, r4
   13894:	mov	r3, r0
   13898:	mov	r0, #0
   1389c:	bl	12224 <error@plt>
   138a0:	mov	r3, #1
   138a4:	str	r3, [r6, #28]
   138a8:	b	134ec <__assert_fail@plt+0xeb4>
   138ac:	ldr	lr, [sp, #52]	; 0x34
   138b0:	mov	r1, ip
   138b4:	ldr	r0, [sp, #36]	; 0x24
   138b8:	mov	r2, #0
   138bc:	mov	r3, r9
   138c0:	str	lr, [sp]
   138c4:	ldrd	r4, [r4]
   138c8:	strd	r4, [sp, #8]
   138cc:	bl	131a8 <__assert_fail@plt+0xb70>
   138d0:	b	137a4 <__assert_fail@plt+0x116c>
   138d4:	ldr	ip, [sp, #24]
   138d8:	ldr	r5, [ip]
   138dc:	cmp	r5, #0
   138e0:	bne	13a9c <__assert_fail@plt+0x1464>
   138e4:	bl	18ae8 <__assert_fail@plt+0x64b0>
   138e8:	ldrb	r3, [r8]
   138ec:	cmp	r3, #46	; 0x2e
   138f0:	bne	13a14 <__assert_fail@plt+0x13dc>
   138f4:	ldrb	r3, [r8, #1]
   138f8:	cmp	r3, #0
   138fc:	bne	13a14 <__assert_fail@plt+0x13dc>
   13900:	ldr	r0, [sp, #36]	; 0x24
   13904:	bl	12020 <free@plt>
   13908:	ldr	r0, [sp, #44]	; 0x2c
   1390c:	bl	125fc <closedir@plt>
   13910:	ldr	r4, [sp, #60]	; 0x3c
   13914:	cmp	r4, #0
   13918:	beq	134ec <__assert_fail@plt+0xeb4>
   1391c:	ldr	ip, [sp, #56]	; 0x38
   13920:	cmp	ip, #0
   13924:	beq	134ec <__assert_fail@plt+0xeb4>
   13928:	ldr	r4, [sp, #32]
   1392c:	ldrb	r3, [r4, #12]
   13930:	cmp	r3, #0
   13934:	bne	134ec <__assert_fail@plt+0xeb4>
   13938:	movw	r0, #55324	; 0xd81c
   1393c:	movw	r1, #54980	; 0xd6c4
   13940:	movw	r3, #54056	; 0xd328
   13944:	movt	r0, #2
   13948:	movt	r1, #2
   1394c:	mov	r2, #1568	; 0x620
   13950:	movt	r3, #2
   13954:	bl	12638 <__assert_fail@plt>
   13958:	ldrb	ip, [r6, #24]
   1395c:	movw	r3, #21912	; 0x5598
   13960:	movt	r3, #4
   13964:	movw	r2, #54908	; 0xd67c
   13968:	mov	r1, #1
   1396c:	movt	r2, #2
   13970:	ldr	r0, [r3]
   13974:	mov	r3, r9
   13978:	str	ip, [sp]
   1397c:	bl	12428 <__fprintf_chk@plt>
   13980:	b	134e0 <__assert_fail@plt+0xea8>
   13984:	ldrb	r3, [r4, #20]
   13988:	cmp	r3, #46	; 0x2e
   1398c:	cmpne	r3, #0
   13990:	beq	13684 <__assert_fail@plt+0x104c>
   13994:	b	136b4 <__assert_fail@plt+0x107c>
   13998:	mov	r2, fp
   1399c:	mov	r0, r9
   139a0:	add	r1, sp, #88	; 0x58
   139a4:	bl	196b8 <__assert_fail@plt+0x7080>
   139a8:	b	134d0 <__assert_fail@plt+0xe98>
   139ac:	str	sl, [sp]
   139b0:	add	r0, sp, #344	; 0x158
   139b4:	mov	r1, r9
   139b8:	mov	r2, r8
   139bc:	add	r3, sp, #88	; 0x58
   139c0:	bl	18f4c <__assert_fail@plt+0x6914>
   139c4:	cmp	r0, #0
   139c8:	beq	13250 <__assert_fail@plt+0xc18>
   139cc:	ldr	r6, [sp, #40]	; 0x28
   139d0:	ldr	r3, [r6]
   139d4:	cmp	r3, #0
   139d8:	bne	13b18 <__assert_fail@plt+0x14e0>
   139dc:	add	lr, sp, #88	; 0x58
   139e0:	ldr	r1, [sp, #344]	; 0x158
   139e4:	mov	r0, r9
   139e8:	ldrd	r2, [sp, #184]	; 0xb8
   139ec:	movw	ip, #10744	; 0x29f8
   139f0:	str	lr, [sp]
   139f4:	movt	ip, #1
   139f8:	str	ip, [sp, #4]
   139fc:	bl	12fe4 <__assert_fail@plt+0x9ac>
   13a00:	b	1351c <__assert_fail@plt+0xee4>
   13a04:	ldrb	r3, [r8, #1]
   13a08:	cmp	r3, #0
   13a0c:	beq	13654 <__assert_fail@plt+0x101c>
   13a10:	b	135ec <__assert_fail@plt+0xfb4>
   13a14:	bl	18f10 <__assert_fail@plt+0x68d8>
   13a18:	ldr	r3, [r6]
   13a1c:	cmp	r3, #0
   13a20:	ble	13b10 <__assert_fail@plt+0x14d8>
   13a24:	cmp	r0, #0
   13a28:	bne	13b10 <__assert_fail@plt+0x14d8>
   13a2c:	movw	r4, #54508	; 0xd4ec
   13a30:	movt	r4, #2
   13a34:	str	r4, [sp, #28]
   13a38:	mov	r4, #0
   13a3c:	add	r2, sp, #87	; 0x57
   13a40:	ldr	r0, [sp, #28]
   13a44:	mov	r1, r4
   13a48:	str	r2, [sp]
   13a4c:	mov	r3, r4
   13a50:	add	r2, sp, #192	; 0xc0
   13a54:	strb	r4, [sp, #87]	; 0x57
   13a58:	bl	12ad4 <__assert_fail@plt+0x49c>
   13a5c:	sub	r0, r0, #1
   13a60:	cmp	r0, #6
   13a64:	bhi	13900 <__assert_fail@plt+0x12c8>
   13a68:	mov	r5, #1
   13a6c:	lsl	r3, r5, r0
   13a70:	tst	r3, #119	; 0x77
   13a74:	bne	13c04 <__assert_fail@plt+0x15cc>
   13a78:	tst	r3, #8
   13a7c:	beq	13900 <__assert_fail@plt+0x12c8>
   13a80:	ldr	ip, [sp, #24]
   13a84:	mov	r0, r5
   13a88:	movw	r2, #528	; 0x210
   13a8c:	movt	r2, #3
   13a90:	ldr	r1, [ip]
   13a94:	bl	12224 <error@plt>
   13a98:	b	134ec <__assert_fail@plt+0xeb4>
   13a9c:	mov	r1, r9
   13aa0:	bl	19778 <__assert_fail@plt+0x7140>
   13aa4:	mov	r1, r5
   13aa8:	movw	r2, #8288	; 0x2060
   13aac:	movt	r2, #3
   13ab0:	mov	r3, r0
   13ab4:	mov	r0, r4
   13ab8:	bl	12224 <error@plt>
   13abc:	b	13684 <__assert_fail@plt+0x104c>
   13ac0:	mov	r2, #5
   13ac4:	movw	r1, #54512	; 0xd4f0
   13ac8:	movt	r1, #2
   13acc:	str	ip, [sp, #16]
   13ad0:	str	r3, [sp, #20]
   13ad4:	bl	120d4 <dcgettext@plt>
   13ad8:	ldr	r3, [sp, #20]
   13adc:	mov	r1, r9
   13ae0:	mov	fp, r0
   13ae4:	mov	r0, r3
   13ae8:	bl	19778 <__assert_fail@plt+0x7140>
   13aec:	ldr	r3, [sp, #20]
   13af0:	mov	r2, fp
   13af4:	mov	r1, r3
   13af8:	mov	lr, r0
   13afc:	mov	r0, r3
   13b00:	mov	r3, lr
   13b04:	bl	12224 <error@plt>
   13b08:	ldr	ip, [sp, #16]
   13b0c:	b	13408 <__assert_fail@plt+0xdd0>
   13b10:	bl	12a28 <__assert_fail@plt+0x3f0>
   13b14:	b	13a38 <__assert_fail@plt+0x1400>
   13b18:	str	r8, [r4, #12]
   13b1c:	bl	16a88 <__assert_fail@plt+0x4450>
   13b20:	add	r1, sp, #88	; 0x58
   13b24:	mov	r2, r0
   13b28:	mov	r0, r9
   13b2c:	bl	196b8 <__assert_fail@plt+0x7080>
   13b30:	b	1351c <__assert_fail@plt+0xee4>
   13b34:	ldr	ip, [sp, #24]
   13b38:	ldr	r4, [ip]
   13b3c:	cmp	r4, #0
   13b40:	beq	13c5c <__assert_fail@plt+0x1624>
   13b44:	mov	r1, r9
   13b48:	bl	19778 <__assert_fail@plt+0x7140>
   13b4c:	mov	r1, r4
   13b50:	movw	r2, #8288	; 0x2060
   13b54:	movt	r2, #3
   13b58:	mov	r3, r0
   13b5c:	ldr	r0, [sp, #44]	; 0x2c
   13b60:	bl	12224 <error@plt>
   13b64:	mov	r3, #1
   13b68:	str	r3, [r6, #28]
   13b6c:	b	13910 <__assert_fail@plt+0x12d8>
   13b70:	ldr	r1, [sp, #56]	; 0x38
   13b74:	cmp	r1, #0
   13b78:	bne	13760 <__assert_fail@plt+0x1128>
   13b7c:	mov	r2, #5
   13b80:	movw	r1, #55032	; 0xd6f8
   13b84:	ldr	r0, [sp, #56]	; 0x38
   13b88:	movt	r1, #2
   13b8c:	str	ip, [sp, #16]
   13b90:	bl	120d4 <dcgettext@plt>
   13b94:	mov	r1, r9
   13b98:	mov	r2, r0
   13b9c:	ldr	r0, [sp, #56]	; 0x38
   13ba0:	str	r2, [sp, #20]
   13ba4:	bl	19778 <__assert_fail@plt+0x7140>
   13ba8:	ldr	lr, [sp, #108]	; 0x6c
   13bac:	mov	r1, #1
   13bb0:	ldr	r2, [sp, #20]
   13bb4:	str	lr, [sp]
   13bb8:	mov	lr, #1
   13bbc:	str	lr, [sp, #60]	; 0x3c
   13bc0:	mov	r3, r0
   13bc4:	ldr	r0, [sp, #56]	; 0x38
   13bc8:	str	r1, [sp, #56]	; 0x38
   13bcc:	ldr	r1, [sp, #68]	; 0x44
   13bd0:	str	r0, [sp, #4]
   13bd4:	str	r0, [sp, #12]
   13bd8:	str	r1, [sp, #8]
   13bdc:	mov	r1, r0
   13be0:	bl	12224 <error@plt>
   13be4:	ldr	r0, [sp, #72]	; 0x48
   13be8:	ldr	r2, [sp, #76]	; 0x4c
   13bec:	mov	r1, #1
   13bf0:	ldr	ip, [sp, #16]
   13bf4:	str	r1, [r0, #28]
   13bf8:	strb	r1, [r2, #12]
   13bfc:	b	13760 <__assert_fail@plt+0x1128>
   13c00:	bl	120e0 <__stack_chk_fail@plt>
   13c04:	ldr	ip, [sp, #24]
   13c08:	mov	r1, r9
   13c0c:	mov	r0, r4
   13c10:	ldr	fp, [ip]
   13c14:	bl	19778 <__assert_fail@plt+0x7140>
   13c18:	movw	r2, #8288	; 0x2060
   13c1c:	movt	r2, #3
   13c20:	mov	r1, fp
   13c24:	mov	r3, r0
   13c28:	mov	r0, r5
   13c2c:	bl	12224 <error@plt>
   13c30:	b	134ec <__assert_fail@plt+0xeb4>
   13c34:	add	r0, sp, #192	; 0xc0
   13c38:	bl	187ec <__assert_fail@plt+0x61b4>
   13c3c:	add	r2, sp, #192	; 0xc0
   13c40:	movw	r1, #528	; 0x210
   13c44:	mov	r0, #3
   13c48:	movt	r1, #3
   13c4c:	bl	12578 <__xstat64@plt>
   13c50:	cmp	r0, #0
   13c54:	bne	13654 <__assert_fail@plt+0x101c>
   13c58:	b	13844 <__assert_fail@plt+0x120c>
   13c5c:	movw	r0, #54952	; 0xd6a8
   13c60:	movw	r1, #54980	; 0xd6c4
   13c64:	movw	r3, #54056	; 0xd328
   13c68:	movt	r0, #2
   13c6c:	movt	r1, #2
   13c70:	movw	r2, #1326	; 0x52e
   13c74:	movt	r3, #2
   13c78:	bl	12638 <__assert_fail@plt>
   13c7c:	push	{r4, r5, lr}
   13c80:	sub	sp, sp, #20
   13c84:	movw	r3, #528	; 0x210
   13c88:	movt	r3, #3
   13c8c:	ldrd	r4, [sp, #32]
   13c90:	str	r2, [sp]
   13c94:	mov	r2, #0
   13c98:	strd	r4, [sp, #8]
   13c9c:	bl	131a8 <__assert_fail@plt+0xb70>
   13ca0:	add	sp, sp, #20
   13ca4:	pop	{r4, r5, lr}
   13ca8:	b	18ae8 <__assert_fail@plt+0x64b0>
   13cac:	mvn	r0, #99	; 0x63
   13cb0:	bx	lr
   13cb4:	mov	r2, r0
   13cb8:	mov	r3, #0
   13cbc:	mov	r0, r3
   13cc0:	str	r3, [r2]
   13cc4:	bx	lr
   13cc8:	push	{r4, r5, r6, lr}
   13ccc:	subs	r4, r0, #0
   13cd0:	popeq	{r4, r5, r6, pc}
   13cd4:	mov	r6, #0
   13cd8:	b	13cf4 <__assert_fail@plt+0x16bc>
   13cdc:	str	r6, [r4, #28]
   13ce0:	mov	r0, r4
   13ce4:	bl	12020 <free@plt>
   13ce8:	cmp	r5, #0
   13cec:	mov	r4, r5
   13cf0:	beq	13d20 <__assert_fail@plt+0x16e8>
   13cf4:	ldr	r0, [r4]
   13cf8:	ldr	r5, [r4, #28]
   13cfc:	bl	12020 <free@plt>
   13d00:	ldr	r0, [r4, #4]
   13d04:	bl	12020 <free@plt>
   13d08:	ldrb	r3, [r4, #24]
   13d0c:	tst	r3, #4
   13d10:	beq	13cdc <__assert_fail@plt+0x16a4>
   13d14:	ldr	r0, [r4, #8]
   13d18:	bl	12020 <free@plt>
   13d1c:	b	13cdc <__assert_fail@plt+0x16a4>
   13d20:	pop	{r4, r5, r6, pc}
   13d24:	push	{r3, lr}
   13d28:	mov	r2, #5
   13d2c:	movw	r1, #55476	; 0xd8b4
   13d30:	mov	r0, #0
   13d34:	movt	r1, #2
   13d38:	bl	120d4 <dcgettext@plt>
   13d3c:	mov	r1, #0
   13d40:	mov	r2, r0
   13d44:	mov	r0, #1
   13d48:	bl	12224 <error@plt>
   13d4c:	pop	{r3, pc}
   13d50:	push	{r4, r5, r6, lr}
   13d54:	movw	r4, #21904	; 0x5590
   13d58:	movt	r4, #4
   13d5c:	sub	sp, sp, #112	; 0x70
   13d60:	mov	r5, r0
   13d64:	mov	r6, r1
   13d68:	ldr	r3, [r4]
   13d6c:	mov	r0, sp
   13d70:	str	r3, [sp, #108]	; 0x6c
   13d74:	bl	187ec <__assert_fail@plt+0x61b4>
   13d78:	movw	r3, #25384	; 0x6328
   13d7c:	movt	r3, #4
   13d80:	ldr	r0, [r5]
   13d84:	mov	r1, sp
   13d88:	ldr	r3, [r3, #52]	; 0x34
   13d8c:	blx	r3
   13d90:	cmp	r0, #0
   13d94:	ldrdeq	r2, [sp]
   13d98:	mvnne	r0, #0
   13d9c:	strdeq	r2, [r6]
   13da0:	ldr	r2, [sp, #108]	; 0x6c
   13da4:	ldr	r3, [r4]
   13da8:	cmp	r2, r3
   13dac:	bne	13db8 <__assert_fail@plt+0x1780>
   13db0:	add	sp, sp, #112	; 0x70
   13db4:	pop	{r4, r5, r6, pc}
   13db8:	bl	120e0 <__stack_chk_fail@plt>
   13dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dc0:	movw	r6, #22056	; 0x5628
   13dc4:	movt	r6, #4
   13dc8:	movw	r9, #21904	; 0x5590
   13dcc:	movt	r9, #4
   13dd0:	sub	sp, sp, #44	; 0x2c
   13dd4:	ldr	r1, [r6]
   13dd8:	mov	r7, r0
   13ddc:	ldr	r3, [r9]
   13de0:	cmp	r1, #0
   13de4:	str	r3, [sp, #36]	; 0x24
   13de8:	beq	13e14 <__assert_fail@plt+0x17dc>
   13dec:	ldr	r3, [r6, #4]
   13df0:	mov	r0, r1
   13df4:	cmp	r3, #0
   13df8:	beq	13e10 <__assert_fail@plt+0x17d8>
   13dfc:	ldrd	r4, [r7]
   13e00:	ldrd	r2, [r6, #8]
   13e04:	cmp	r5, r3
   13e08:	cmpeq	r4, r2
   13e0c:	beq	13eb4 <__assert_fail@plt+0x187c>
   13e10:	bl	12020 <free@plt>
   13e14:	ldrd	r2, [r7]
   13e18:	mov	r0, #1
   13e1c:	strd	r2, [r6, #8]
   13e20:	bl	2aaf8 <__assert_fail@plt+0x184c0>
   13e24:	subs	fp, r0, #0
   13e28:	mvnne	r4, #0
   13e2c:	mvnne	r5, #0
   13e30:	movne	sl, fp
   13e34:	movne	r8, #0
   13e38:	beq	13ee8 <__assert_fail@plt+0x18b0>
   13e3c:	movw	r1, #55516	; 0xd8dc
   13e40:	ldr	r0, [sl, #8]
   13e44:	movt	r1, #2
   13e48:	bl	11fb4 <strcmp@plt>
   13e4c:	cmp	r0, #0
   13e50:	beq	13e74 <__assert_fail@plt+0x183c>
   13e54:	ldrd	r0, [sl, #16]
   13e58:	cmp	r1, r5
   13e5c:	cmpeq	r0, r4
   13e60:	beq	13ecc <__assert_fail@plt+0x1894>
   13e64:	ldrd	r2, [r7]
   13e68:	cmp	r3, r1
   13e6c:	cmpeq	r2, r0
   13e70:	moveq	r8, sl
   13e74:	ldr	sl, [sl, #28]
   13e78:	cmp	sl, #0
   13e7c:	bne	13e3c <__assert_fail@plt+0x1804>
   13e80:	cmp	r8, #0
   13e84:	beq	13eec <__assert_fail@plt+0x18b4>
   13e88:	ldr	r0, [r8, #8]
   13e8c:	bl	29720 <__assert_fail@plt+0x170e8>
   13e90:	mov	r4, r0
   13e94:	mov	r0, fp
   13e98:	bl	13cc8 <__assert_fail@plt+0x1690>
   13e9c:	cmp	r4, #0
   13ea0:	movne	r3, #1
   13ea4:	movne	r0, r4
   13ea8:	strne	r3, [r6, #4]
   13eac:	beq	13ef4 <__assert_fail@plt+0x18bc>
   13eb0:	str	r0, [r6]
   13eb4:	ldr	r2, [sp, #36]	; 0x24
   13eb8:	ldr	r3, [r9]
   13ebc:	cmp	r2, r3
   13ec0:	bne	13fc4 <__assert_fail@plt+0x198c>
   13ec4:	add	sp, sp, #44	; 0x2c
   13ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ecc:	add	r0, sl, #4
   13ed0:	add	r1, sl, #16
   13ed4:	bl	13d50 <__assert_fail@plt+0x1718>
   13ed8:	cmp	r0, #0
   13edc:	bne	13e74 <__assert_fail@plt+0x183c>
   13ee0:	ldrd	r0, [sl, #16]
   13ee4:	b	13e64 <__assert_fail@plt+0x182c>
   13ee8:	bl	13d24 <__assert_fail@plt+0x16ec>
   13eec:	mov	r0, fp
   13ef0:	bl	13cc8 <__assert_fail@plt+0x1690>
   13ef4:	movw	r0, #55524	; 0xd8e4
   13ef8:	movw	r1, #65496	; 0xffd8
   13efc:	movt	r0, #2
   13f00:	movt	r1, #2
   13f04:	bl	12560 <setmntent@plt>
   13f08:	subs	r8, r0, #0
   13f0c:	beq	13fb8 <__assert_fail@plt+0x1980>
   13f10:	mvn	sl, #0
   13f14:	mvn	fp, #0
   13f18:	mov	r0, r8
   13f1c:	bl	12230 <getmntent@plt>
   13f20:	subs	r4, r0, #0
   13f24:	beq	13fb0 <__assert_fail@plt+0x1978>
   13f28:	movw	r0, #55540	; 0xd8f4
   13f2c:	ldr	r1, [r4, #8]
   13f30:	movt	r0, #2
   13f34:	bl	11fb4 <strcmp@plt>
   13f38:	cmp	r0, #0
   13f3c:	bne	13f18 <__assert_fail@plt+0x18e0>
   13f40:	ldr	r3, [r4, #4]
   13f44:	add	r0, sp, #4
   13f48:	add	r1, sp, #16
   13f4c:	strd	sl, [sp, #16]
   13f50:	str	r3, [sp, #4]
   13f54:	bl	13d50 <__assert_fail@plt+0x1718>
   13f58:	ldrd	r4, [sp, #16]
   13f5c:	ldrd	r2, [r7]
   13f60:	cmp	r5, r3
   13f64:	cmpeq	r4, r2
   13f68:	bne	13f18 <__assert_fail@plt+0x18e0>
   13f6c:	mov	r0, r8
   13f70:	bl	1247c <endmntent@plt>
   13f74:	movw	r0, #55540	; 0xd8f4
   13f78:	movt	r0, #2
   13f7c:	bl	29720 <__assert_fail@plt+0x170e8>
   13f80:	cmp	r0, #0
   13f84:	moveq	r3, #0
   13f88:	movne	r3, #1
   13f8c:	str	r3, [r6, #4]
   13f90:	bne	13eb0 <__assert_fail@plt+0x1878>
   13f94:	mov	r2, #5
   13f98:	movw	r1, #55548	; 0xd8fc
   13f9c:	mov	r0, #0
   13fa0:	movt	r1, #2
   13fa4:	bl	120d4 <dcgettext@plt>
   13fa8:	bl	29720 <__assert_fail@plt+0x170e8>
   13fac:	b	13eb0 <__assert_fail@plt+0x1878>
   13fb0:	mov	r0, r8
   13fb4:	bl	1247c <endmntent@plt>
   13fb8:	mov	r3, #0
   13fbc:	str	r3, [r6, #4]
   13fc0:	b	13f94 <__assert_fail@plt+0x195c>
   13fc4:	bl	120e0 <__stack_chk_fail@plt>
   13fc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fcc:	movw	r9, #21904	; 0x5590
   13fd0:	movt	r9, #4
   13fd4:	sub	sp, sp, #8
   13fd8:	mov	r5, #0
   13fdc:	ldr	r3, [r9]
   13fe0:	mov	r0, r5
   13fe4:	str	r5, [sp]
   13fe8:	str	r3, [sp, #4]
   13fec:	bl	2aaf8 <__assert_fail@plt+0x184c0>
   13ff0:	subs	sl, r0, #0
   13ff4:	movne	r8, r5
   13ff8:	movne	r4, sl
   13ffc:	bne	14010 <__assert_fail@plt+0x19d8>
   14000:	b	14094 <__assert_fail@plt+0x1a5c>
   14004:	ldr	r4, [r4, #28]
   14008:	cmp	r4, #0
   1400c:	beq	14070 <__assert_fail@plt+0x1a38>
   14010:	movw	r1, #55516	; 0xd8dc
   14014:	ldr	r0, [r4, #8]
   14018:	movt	r1, #2
   1401c:	bl	11fb4 <strcmp@plt>
   14020:	cmp	r0, #0
   14024:	beq	14004 <__assert_fail@plt+0x19cc>
   14028:	ldr	r0, [r4, #4]
   1402c:	add	r6, r5, #1
   14030:	bl	1232c <strlen@plt>
   14034:	mov	r2, sp
   14038:	add	r6, r6, r0
   1403c:	mov	r0, r8
   14040:	mov	r1, r6
   14044:	bl	1fb9c <__assert_fail@plt+0xd564>
   14048:	subs	r7, r0, #0
   1404c:	beq	14070 <__assert_fail@plt+0x1a38>
   14050:	add	r0, r7, r5
   14054:	ldr	r1, [r4, #4]
   14058:	bl	121f4 <strcpy@plt>
   1405c:	ldr	r4, [r4, #28]
   14060:	mov	r5, r6
   14064:	mov	r8, r7
   14068:	cmp	r4, #0
   1406c:	bne	14010 <__assert_fail@plt+0x19d8>
   14070:	mov	r0, sl
   14074:	bl	13cc8 <__assert_fail@plt+0x1690>
   14078:	ldr	r2, [sp, #4]
   1407c:	ldr	r3, [r9]
   14080:	mov	r0, r8
   14084:	cmp	r2, r3
   14088:	bne	140a0 <__assert_fail@plt+0x1a68>
   1408c:	add	sp, sp, #8
   14090:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14094:	bl	13d24 <__assert_fail@plt+0x16ec>
   14098:	mov	r8, sl
   1409c:	b	14070 <__assert_fail@plt+0x1a38>
   140a0:	bl	120e0 <__stack_chk_fail@plt>
   140a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140a8:	movw	r3, #21904	; 0x5590
   140ac:	sub	sp, sp, #28
   140b0:	movt	r3, #4
   140b4:	mov	r7, #0
   140b8:	str	r3, [sp, #4]
   140bc:	ldr	r3, [r3]
   140c0:	str	r0, [sp, #12]
   140c4:	mov	r0, r7
   140c8:	str	r7, [sp, #16]
   140cc:	str	r3, [sp, #20]
   140d0:	bl	2aaf8 <__assert_fail@plt+0x184c0>
   140d4:	subs	r3, r0, #0
   140d8:	str	r3, [sp, #8]
   140dc:	beq	141a8 <__assert_fail@plt+0x1b70>
   140e0:	mvn	r4, #0
   140e4:	mvn	r5, #0
   140e8:	mov	r8, r7
   140ec:	mov	r6, r3
   140f0:	b	14110 <__assert_fail@plt+0x1ad8>
   140f4:	add	ip, fp, r9
   140f8:	mov	r8, sl
   140fc:	mov	r7, fp
   14100:	stmdb	ip, {r0, r1}
   14104:	ldr	r6, [r6, #28]
   14108:	cmp	r6, #0
   1410c:	beq	14164 <__assert_fail@plt+0x1b2c>
   14110:	add	sl, r8, #1
   14114:	mov	r0, r7
   14118:	add	r2, sp, #16
   1411c:	lsl	r9, sl, #3
   14120:	mov	r1, r9
   14124:	bl	1fb9c <__assert_fail@plt+0xd564>
   14128:	subs	fp, r0, #0
   1412c:	beq	14198 <__assert_fail@plt+0x1b60>
   14130:	ldrd	r0, [r6, #16]
   14134:	cmp	r1, r5
   14138:	cmpeq	r0, r4
   1413c:	bne	140f4 <__assert_fail@plt+0x1abc>
   14140:	add	r0, r6, #4
   14144:	add	r1, r6, #16
   14148:	bl	13d50 <__assert_fail@plt+0x1718>
   1414c:	cmp	r0, #0
   14150:	movne	r7, fp
   14154:	bne	14104 <__assert_fail@plt+0x1acc>
   14158:	ldr	r0, [r6, #16]
   1415c:	ldr	r1, [r6, #20]
   14160:	b	140f4 <__assert_fail@plt+0x1abc>
   14164:	ldr	r0, [sp, #8]
   14168:	bl	13cc8 <__assert_fail@plt+0x1690>
   1416c:	cmp	fp, #0
   14170:	ldrne	r3, [sp, #12]
   14174:	strne	r8, [r3]
   14178:	ldr	r1, [sp, #4]
   1417c:	mov	r0, r7
   14180:	ldr	r2, [sp, #20]
   14184:	ldr	r3, [r1]
   14188:	cmp	r2, r3
   1418c:	bne	141b4 <__assert_fail@plt+0x1b7c>
   14190:	add	sp, sp, #28
   14194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14198:	mov	r0, r7
   1419c:	mov	r7, fp
   141a0:	bl	12020 <free@plt>
   141a4:	b	14104 <__assert_fail@plt+0x1acc>
   141a8:	bl	13cc8 <__assert_fail@plt+0x1690>
   141ac:	ldr	r7, [sp, #8]
   141b0:	b	14178 <__assert_fail@plt+0x1b40>
   141b4:	bl	120e0 <__stack_chk_fail@plt>
   141b8:	push	{r4, r5, lr}
   141bc:	sub	sp, sp, #20
   141c0:	add	r4, sp, #16
   141c4:	stm	sp, {r2, r3}
   141c8:	stmdb	r4, {r0, r1}
   141cc:	mov	r1, r2
   141d0:	ldr	r0, [sp, #8]
   141d4:	mov	r4, r3
   141d8:	ldr	r5, [sp, #12]
   141dc:	cmp	r0, r2
   141e0:	beq	14214 <__assert_fail@plt+0x1bdc>
   141e4:	bl	1241c <difftime@plt>
   141e8:	rsb	r4, r4, r5
   141ec:	vldr	d7, [pc, #52]	; 14228 <__assert_fail@plt+0x1bf0>
   141f0:	vmov	s11, r4
   141f4:	vcvt.f64.s32	d6, s11
   141f8:	vmla.f64	d0, d6, d7
   141fc:	vcmpe.f64	d0, #0.0
   14200:	vmrs	APSR_nzcv, fpscr
   14204:	mvnmi	r0, #0
   14208:	movpl	r0, #1
   1420c:	add	sp, sp, #20
   14210:	pop	{r4, r5, pc}
   14214:	cmp	r5, r3
   14218:	moveq	r0, #0
   1421c:	bne	141e4 <__assert_fail@plt+0x1bac>
   14220:	b	1420c <__assert_fail@plt+0x1bd4>
   14224:	nop	{0}
   14228:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1422c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14230:	push	{r4, r5, lr}
   14234:	mov	r4, r2
   14238:	ldr	r2, [r2, #44]	; 0x2c
   1423c:	sub	sp, sp, #12
   14240:	mov	r5, r3
   14244:	cmp	r2, #1
   14248:	stm	sp, {r0, r1}
   1424c:	beq	142f8 <__assert_fail@plt+0x1cc0>
   14250:	bcc	142d4 <__assert_fail@plt+0x1c9c>
   14254:	cmp	r2, #2
   14258:	bne	142b4 <__assert_fail@plt+0x1c7c>
   1425c:	ldr	r0, [sp]
   14260:	ldr	r1, [r4, #48]	; 0x30
   14264:	bl	1241c <difftime@plt>
   14268:	ldr	r2, [sp, #4]
   1426c:	ldr	r3, [r4, #52]	; 0x34
   14270:	vldr	d7, [pc, #160]	; 14318 <__assert_fail@plt+0x1ce0>
   14274:	rsb	r3, r3, r2
   14278:	vmov	s11, r3
   1427c:	vcvt.f64.s32	d6, s11
   14280:	vmla.f64	d0, d6, d7
   14284:	vcmpe.f64	d0, #0.0
   14288:	vmrs	APSR_nzcv, fpscr
   1428c:	movle	r0, #0
   14290:	ble	142ac <__assert_fail@plt+0x1c74>
   14294:	vmov	s13, r5
   14298:	vcvt.f64.s32	d7, s13
   1429c:	vcmpe.f64	d7, d0
   142a0:	vmrs	APSR_nzcv, fpscr
   142a4:	movlt	r0, #0
   142a8:	movge	r0, #1
   142ac:	add	sp, sp, #12
   142b0:	pop	{r4, r5, pc}
   142b4:	movw	r0, #55804	; 0xd9fc
   142b8:	movw	r1, #55680	; 0xd980
   142bc:	movw	r3, #55556	; 0xd904
   142c0:	movt	r0, #2
   142c4:	movt	r1, #2
   142c8:	mov	r2, #222	; 0xde
   142cc:	movt	r3, #2
   142d0:	bl	12638 <__assert_fail@plt>
   142d4:	add	r4, r4, #48	; 0x30
   142d8:	ldm	sp, {r0, r1}
   142dc:	ldm	r4, {r2, r3}
   142e0:	bl	141b8 <__assert_fail@plt+0x1b80>
   142e4:	cmp	r0, #0
   142e8:	movle	r0, #0
   142ec:	movgt	r0, #1
   142f0:	add	sp, sp, #12
   142f4:	pop	{r4, r5, pc}
   142f8:	add	r4, r4, #48	; 0x30
   142fc:	ldm	sp, {r0, r1}
   14300:	ldm	r4, {r2, r3}
   14304:	bl	141b8 <__assert_fail@plt+0x1b80>
   14308:	lsr	r0, r0, #31
   1430c:	add	sp, sp, #12
   14310:	pop	{r4, r5, pc}
   14314:	nop	{0}
   14318:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1431c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14320:	movw	r2, #21920	; 0x55a0
   14324:	movt	r2, #4
   14328:	push	{r4, r5, r6, r7, lr}
   1432c:	mov	r6, r0
   14330:	sub	sp, sp, #12
   14334:	ldr	r0, [r2]
   14338:	movw	r4, #21912	; 0x5598
   1433c:	movt	r4, #4
   14340:	mov	r7, r1
   14344:	bl	2a9b0 <__assert_fail@plt+0x18378>
   14348:	mov	r2, #5
   1434c:	movw	r1, #55688	; 0xd988
   14350:	mov	r0, #0
   14354:	movt	r1, #2
   14358:	ldr	r5, [r4]
   1435c:	bl	120d4 <dcgettext@plt>
   14360:	mov	r3, r6
   14364:	mov	r1, #1
   14368:	str	r7, [sp]
   1436c:	mov	r2, r0
   14370:	mov	r0, r5
   14374:	bl	12428 <__fprintf_chk@plt>
   14378:	ldr	r0, [r4]
   1437c:	bl	2a9b0 <__assert_fail@plt+0x18378>
   14380:	add	sp, sp, #12
   14384:	pop	{r4, r5, r6, r7, lr}
   14388:	b	2a4b0 <__assert_fail@plt+0x17e78>
   1438c:	push	{r3, lr}
   14390:	bl	18b84 <__assert_fail@plt+0x654c>
   14394:	movw	r3, #25340	; 0x62fc
   14398:	movt	r3, #4
   1439c:	ldr	r0, [r3, #28]
   143a0:	bl	12308 <exit@plt>
   143a4:	push	{r3, lr}
   143a8:	movw	r3, #25384	; 0x6328
   143ac:	movt	r3, #4
   143b0:	ldrb	r3, [r3]
   143b4:	cmp	r3, #0
   143b8:	beq	143ec <__assert_fail@plt+0x1db4>
   143bc:	movw	r3, #25340	; 0x62fc
   143c0:	movt	r3, #4
   143c4:	ldrb	r2, [r3, #4]
   143c8:	cmp	r2, #0
   143cc:	beq	143f4 <__assert_fail@plt+0x1dbc>
   143d0:	cmp	r1, #0
   143d4:	beq	143ec <__assert_fail@plt+0x1db4>
   143d8:	ldr	r2, [r1, #16]
   143dc:	and	r2, r2, #61440	; 0xf000
   143e0:	cmp	r2, #16384	; 0x4000
   143e4:	moveq	r2, #1
   143e8:	strbeq	r2, [r3, #24]
   143ec:	mov	r0, #1
   143f0:	pop	{r3, pc}
   143f4:	movw	r0, #55708	; 0xd99c
   143f8:	movw	r1, #55680	; 0xd980
   143fc:	movt	r0, #2
   14400:	movt	r1, #2
   14404:	movw	r2, #934	; 0x3a6
   14408:	ldr	r3, [pc]	; 14410 <__assert_fail@plt+0x1dd8>
   1440c:	bl	12638 <__assert_fail@plt>
   14410:	andeq	sp, r2, r4, lsl r9
   14414:	push	{r4, r5, r6, lr}
   14418:	mov	r4, r2
   1441c:	ldr	r2, [r2, #156]	; 0x9c
   14420:	mov	r5, r0
   14424:	mov	r6, r1
   14428:	cmp	r2, #0
   1442c:	beq	1443c <__assert_fail@plt+0x1e04>
   14430:	bl	196b8 <__assert_fail@plt+0x7080>
   14434:	cmp	r0, #0
   14438:	beq	14450 <__assert_fail@plt+0x1e18>
   1443c:	mov	r0, r5
   14440:	mov	r1, r6
   14444:	ldr	r2, [r4, #160]	; 0xa0
   14448:	pop	{r4, r5, r6, lr}
   1444c:	b	196b8 <__assert_fail@plt+0x7080>
   14450:	pop	{r4, r5, r6, pc}
   14454:	push	{r4, r5, r6, lr}
   14458:	mov	r4, r2
   1445c:	ldr	r2, [r2, #156]	; 0x9c
   14460:	mov	r5, r0
   14464:	mov	r6, r1
   14468:	cmp	r2, #0
   1446c:	beq	1447c <__assert_fail@plt+0x1e44>
   14470:	bl	196b8 <__assert_fail@plt+0x7080>
   14474:	cmp	r0, #0
   14478:	bne	14490 <__assert_fail@plt+0x1e58>
   1447c:	mov	r0, r5
   14480:	mov	r1, r6
   14484:	ldr	r2, [r4, #160]	; 0xa0
   14488:	pop	{r4, r5, r6, lr}
   1448c:	b	196b8 <__assert_fail@plt+0x7080>
   14490:	pop	{r4, r5, r6, pc}
   14494:	push	{r4, r5, r6, r7, r8, lr}
   14498:	movw	r4, #25340	; 0x62fc
   1449c:	movt	r4, #4
   144a0:	mov	r8, r0
   144a4:	mov	r6, r1
   144a8:	mov	r7, r2
   144ac:	ldr	r0, [r4, #16]
   144b0:	ldr	r1, [r4, #12]
   144b4:	bl	214f8 <__assert_fail@plt+0xeec0>
   144b8:	subs	r5, r0, #0
   144bc:	beq	144f0 <__assert_fail@plt+0x1eb8>
   144c0:	cmp	r7, #0
   144c4:	ldr	r0, [r6]
   144c8:	mov	r1, r5
   144cc:	movne	r2, #16
   144d0:	moveq	r2, #0
   144d4:	bl	12248 <fnmatch@plt>
   144d8:	rsbs	r6, r0, #1
   144dc:	movcc	r6, #0
   144e0:	mov	r0, r5
   144e4:	bl	12020 <free@plt>
   144e8:	mov	r0, r6
   144ec:	pop	{r4, r5, r6, r7, r8, pc}
   144f0:	bl	1238c <__errno_location@plt>
   144f4:	mov	r1, r8
   144f8:	mov	r6, r5
   144fc:	ldr	r0, [r0]
   14500:	bl	197a4 <__assert_fail@plt+0x716c>
   14504:	mov	r3, #1
   14508:	str	r3, [r4, #28]
   1450c:	b	144e0 <__assert_fail@plt+0x1ea8>
   14510:	add	r1, r1, #72	; 0x48
   14514:	mov	r3, #60	; 0x3c
   14518:	push	{lr}		; (str lr, [sp, #-4]!)
   1451c:	sub	sp, sp, #12
   14520:	ldm	r1, {r0, r1}
   14524:	stm	sp, {r0, r1}
   14528:	bl	14230 <__assert_fail@plt+0x1bf8>
   1452c:	add	sp, sp, #12
   14530:	pop	{pc}		; (ldr pc, [sp], #4)
   14534:	push	{lr}		; (str lr, [sp, #-4]!)
   14538:	sub	sp, sp, #12
   1453c:	ldr	r3, [r2, #44]	; 0x2c
   14540:	cmp	r3, #0
   14544:	bne	14574 <__assert_fail@plt+0x1f3c>
   14548:	add	r1, r1, #72	; 0x48
   1454c:	add	r2, r2, #48	; 0x30
   14550:	ldm	r1, {r0, r1}
   14554:	ldm	r2, {r2, r3}
   14558:	stm	sp, {r0, r1}
   1455c:	bl	141b8 <__assert_fail@plt+0x1b80>
   14560:	cmp	r0, #0
   14564:	movle	r0, #0
   14568:	movgt	r0, #1
   1456c:	add	sp, sp, #12
   14570:	pop	{pc}		; (ldr pc, [sp], #4)
   14574:	movw	r0, #55724	; 0xd9ac
   14578:	movw	r1, #55680	; 0xd980
   1457c:	movt	r0, #2
   14580:	movt	r1, #2
   14584:	mov	r2, #250	; 0xfa
   14588:	ldr	r3, [pc]	; 14590 <__assert_fail@plt+0x1f58>
   1458c:	bl	12638 <__assert_fail@plt>
   14590:	andeq	sp, r2, r0, lsr #18
   14594:	add	r1, r1, #72	; 0x48
   14598:	movw	r3, #20864	; 0x5180
   1459c:	push	{lr}		; (str lr, [sp, #-4]!)
   145a0:	sub	sp, sp, #12
   145a4:	ldm	r1, {r0, r1}
   145a8:	movt	r3, #1
   145ac:	stm	sp, {r0, r1}
   145b0:	bl	14230 <__assert_fail@plt+0x1bf8>
   145b4:	add	sp, sp, #12
   145b8:	pop	{pc}		; (ldr pc, [sp], #4)
   145bc:	mov	r0, #1
   145c0:	bx	lr
   145c4:	add	r1, r1, #88	; 0x58
   145c8:	mov	r3, #60	; 0x3c
   145cc:	push	{lr}		; (str lr, [sp, #-4]!)
   145d0:	sub	sp, sp, #12
   145d4:	ldm	r1, {r0, r1}
   145d8:	stm	sp, {r0, r1}
   145dc:	bl	14230 <__assert_fail@plt+0x1bf8>
   145e0:	add	sp, sp, #12
   145e4:	pop	{pc}		; (ldr pc, [sp], #4)
   145e8:	push	{lr}		; (str lr, [sp, #-4]!)
   145ec:	sub	sp, sp, #12
   145f0:	ldr	r3, [r2, #44]	; 0x2c
   145f4:	cmp	r3, #0
   145f8:	bne	14628 <__assert_fail@plt+0x1ff0>
   145fc:	add	r1, r1, #88	; 0x58
   14600:	add	r2, r2, #48	; 0x30
   14604:	ldm	r1, {r0, r1}
   14608:	ldm	r2, {r2, r3}
   1460c:	stm	sp, {r0, r1}
   14610:	bl	141b8 <__assert_fail@plt+0x1b80>
   14614:	cmp	r0, #0
   14618:	movle	r0, #0
   1461c:	movgt	r0, #1
   14620:	add	sp, sp, #12
   14624:	pop	{pc}		; (ldr pc, [sp], #4)
   14628:	movw	r0, #55724	; 0xd9ac
   1462c:	movw	r1, #55680	; 0xd980
   14630:	movt	r0, #2
   14634:	movt	r1, #2
   14638:	movw	r2, #283	; 0x11b
   1463c:	ldr	r3, [pc]	; 14644 <__assert_fail@plt+0x200c>
   14640:	bl	12638 <__assert_fail@plt>
   14644:	andeq	sp, r2, ip, lsr #18
   14648:	push	{r4, r5, r6, lr}
   1464c:	mov	r4, r2
   14650:	ldr	r2, [r2, #156]	; 0x9c
   14654:	mov	r6, r0
   14658:	mov	r5, r1
   1465c:	cmp	r2, #0
   14660:	beq	14668 <__assert_fail@plt+0x2030>
   14664:	bl	196b8 <__assert_fail@plt+0x7080>
   14668:	mov	r0, r6
   1466c:	mov	r1, r5
   14670:	ldr	r2, [r4, #160]	; 0xa0
   14674:	pop	{r4, r5, r6, lr}
   14678:	b	196b8 <__assert_fail@plt+0x7080>
   1467c:	add	r1, r1, #88	; 0x58
   14680:	movw	r3, #20864	; 0x5180
   14684:	push	{lr}		; (str lr, [sp, #-4]!)
   14688:	sub	sp, sp, #12
   1468c:	ldm	r1, {r0, r1}
   14690:	movt	r3, #1
   14694:	stm	sp, {r0, r1}
   14698:	bl	14230 <__assert_fail@plt+0x1bf8>
   1469c:	add	sp, sp, #12
   146a0:	pop	{pc}		; (ldr pc, [sp], #4)
   146a4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   146a8:	movw	r4, #25340	; 0x62fc
   146ac:	movt	r4, #4
   146b0:	mov	r7, r0
   146b4:	ldr	r3, [r4, #12]
   146b8:	ldrb	r2, [r3]
   146bc:	cmp	r2, #46	; 0x2e
   146c0:	bne	146d8 <__assert_fail@plt+0x20a0>
   146c4:	ldrb	r2, [r3, #1]
   146c8:	cmp	r2, #0
   146cc:	bne	146d8 <__assert_fail@plt+0x20a0>
   146d0:	mov	r0, #1
   146d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   146d8:	ldrb	r2, [r4, #4]
   146dc:	cmp	r2, #0
   146e0:	moveq	r6, r2
   146e4:	beq	146fc <__assert_fail@plt+0x20c4>
   146e8:	ldr	r6, [r1, #16]
   146ec:	and	r6, r6, #61440	; 0xf000
   146f0:	cmp	r6, #16384	; 0x4000
   146f4:	moveq	r6, #512	; 0x200
   146f8:	movne	r6, #0
   146fc:	mov	r1, r3
   14700:	ldr	r0, [r4, #16]
   14704:	mov	r2, r6
   14708:	movw	r5, #25340	; 0x62fc
   1470c:	bl	11ff0 <unlinkat@plt>
   14710:	movt	r5, #4
   14714:	cmp	r0, #0
   14718:	beq	146d0 <__assert_fail@plt+0x2098>
   1471c:	bl	1238c <__errno_location@plt>
   14720:	ldr	r8, [r0]
   14724:	mov	r9, r0
   14728:	cmp	r8, #21
   1472c:	beq	14778 <__assert_fail@plt+0x2140>
   14730:	mov	r2, #5
   14734:	movw	r1, #55764	; 0xd9d4
   14738:	mov	r0, #0
   1473c:	movt	r1, #2
   14740:	bl	120d4 <dcgettext@plt>
   14744:	mov	r1, r7
   14748:	mov	r5, r0
   1474c:	mov	r0, #0
   14750:	bl	19778 <__assert_fail@plt+0x7140>
   14754:	mov	r2, r5
   14758:	mov	r1, r8
   1475c:	mov	r3, r0
   14760:	mov	r0, #0
   14764:	bl	12224 <error@plt>
   14768:	mov	r3, #1
   1476c:	mov	r0, #0
   14770:	str	r3, [r4, #28]
   14774:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14778:	tst	r6, #512	; 0x200
   1477c:	bne	14730 <__assert_fail@plt+0x20f8>
   14780:	ldr	r0, [r5, #16]
   14784:	mov	r2, #512	; 0x200
   14788:	ldr	r1, [r5, #12]
   1478c:	bl	11ff0 <unlinkat@plt>
   14790:	cmp	r0, #0
   14794:	beq	146d0 <__assert_fail@plt+0x2098>
   14798:	ldr	r8, [r9]
   1479c:	b	14730 <__assert_fail@plt+0x20f8>
   147a0:	ldr	r3, [r1, #16]
   147a4:	push	{r4, r5, r6, r7, r8, lr}
   147a8:	and	r3, r3, #61440	; 0xf000
   147ac:	cmp	r3, #16384	; 0x4000
   147b0:	mov	r4, r0
   147b4:	beq	147e0 <__assert_fail@plt+0x21a8>
   147b8:	cmp	r3, #32768	; 0x8000
   147bc:	beq	147c8 <__assert_fail@plt+0x2190>
   147c0:	mov	r0, #0
   147c4:	pop	{r4, r5, r6, r7, r8, pc}
   147c8:	ldr	r2, [r1, #48]	; 0x30
   147cc:	ldr	r3, [r1, #52]	; 0x34
   147d0:	orrs	r3, r2, r3
   147d4:	movne	r0, #0
   147d8:	moveq	r0, #1
   147dc:	pop	{r4, r5, r6, r7, r8, pc}
   147e0:	bl	1238c <__errno_location@plt>
   147e4:	movw	r6, #25340	; 0x62fc
   147e8:	movt	r6, #4
   147ec:	mov	r5, #0
   147f0:	mov	r2, #131072	; 0x20000
   147f4:	ldr	r1, [r6, #12]
   147f8:	mov	r7, r0
   147fc:	str	r5, [r0]
   14800:	ldr	r0, [r6, #16]
   14804:	bl	12350 <openat64@plt>
   14808:	cmp	r0, r5
   1480c:	blt	148ac <__assert_fail@plt+0x2274>
   14810:	bl	1250c <fdopendir@plt>
   14814:	subs	r5, r0, #0
   14818:	beq	148e4 <__assert_fail@plt+0x22ac>
   1481c:	bl	12500 <readdir64@plt>
   14820:	subs	r3, r0, #0
   14824:	beq	1486c <__assert_fail@plt+0x2234>
   14828:	ldrb	r2, [r3, #19]
   1482c:	cmp	r2, #46	; 0x2e
   14830:	bne	14850 <__assert_fail@plt+0x2218>
   14834:	ldrb	r2, [r3, #20]
   14838:	mov	r0, r5
   1483c:	cmp	r2, #0
   14840:	beq	1481c <__assert_fail@plt+0x21e4>
   14844:	ldrh	r3, [r3, #20]
   14848:	cmp	r3, #46	; 0x2e
   1484c:	beq	1481c <__assert_fail@plt+0x21e4>
   14850:	mov	r8, #0
   14854:	mov	r0, r5
   14858:	bl	125fc <closedir@plt>
   1485c:	cmp	r0, #0
   14860:	bne	14874 <__assert_fail@plt+0x223c>
   14864:	mov	r0, r8
   14868:	pop	{r4, r5, r6, r7, r8, pc}
   1486c:	mov	r8, #1
   14870:	b	14854 <__assert_fail@plt+0x221c>
   14874:	mov	r1, r4
   14878:	mov	r0, #0
   1487c:	ldr	r5, [r7]
   14880:	bl	19778 <__assert_fail@plt+0x7140>
   14884:	movw	r2, #8288	; 0x2060
   14888:	movt	r2, #3
   1488c:	mov	r1, r5
   14890:	mov	r3, r0
   14894:	mov	r0, #0
   14898:	bl	12224 <error@plt>
   1489c:	mov	r3, #1
   148a0:	mov	r0, #0
   148a4:	str	r3, [r6, #28]
   148a8:	pop	{r4, r5, r6, r7, r8, pc}
   148ac:	ldr	r7, [r7]
   148b0:	mov	r1, r4
   148b4:	mov	r0, r5
   148b8:	bl	19778 <__assert_fail@plt+0x7140>
   148bc:	mov	r1, r7
   148c0:	movw	r2, #8288	; 0x2060
   148c4:	movt	r2, #3
   148c8:	mov	r3, r0
   148cc:	mov	r0, r5
   148d0:	bl	12224 <error@plt>
   148d4:	mov	r3, #1
   148d8:	mov	r0, r5
   148dc:	str	r3, [r6, #28]
   148e0:	pop	{r4, r5, r6, r7, r8, pc}
   148e4:	ldr	r7, [r7]
   148e8:	mov	r1, r4
   148ec:	b	148b8 <__assert_fail@plt+0x2280>
   148f0:	b	15afc <__assert_fail@plt+0x34c4>
   148f4:	movw	r3, #25340	; 0x62fc
   148f8:	movt	r3, #4
   148fc:	ldr	r0, [r3, #12]
   14900:	b	15afc <__assert_fail@plt+0x34c4>
   14904:	mov	r0, #0
   14908:	bx	lr
   1490c:	movw	r3, #25384	; 0x6328
   14910:	movt	r3, #4
   14914:	push	{r4, lr}
   14918:	movw	ip, #25340	; 0x62fc
   1491c:	ldr	r4, [r3, #20]
   14920:	sub	sp, sp, #16
   14924:	ldr	lr, [r3, #40]	; 0x28
   14928:	movt	ip, #4
   1492c:	mov	r3, r1
   14930:	ldr	r1, [ip, #16]
   14934:	stm	sp, {r4, lr}
   14938:	ldrb	r4, [r2, #32]
   1493c:	ldr	lr, [ip, #12]
   14940:	str	r4, [sp, #8]
   14944:	ldr	ip, [r2, #44]	; 0x2c
   14948:	mov	r2, lr
   1494c:	str	ip, [sp, #12]
   14950:	bl	1f774 <__assert_fail@plt+0xd13c>
   14954:	mov	r0, #1
   14958:	add	sp, sp, #16
   1495c:	pop	{r4, pc}
   14960:	push	{lr}		; (str lr, [sp, #-4]!)
   14964:	sub	sp, sp, #12
   14968:	ldr	ip, [r2, #44]	; 0x2c
   1496c:	movw	r3, #12460	; 0x30ac
   14970:	ldr	r1, [r2, #56]	; 0x38
   14974:	movt	r3, #3
   14978:	ldrb	r2, [r2, #52]	; 0x34
   1497c:	str	r0, [sp]
   14980:	mov	r0, ip
   14984:	bl	206f4 <__assert_fail@plt+0xe0bc>
   14988:	mov	r0, #1
   1498c:	add	sp, sp, #12
   14990:	pop	{pc}		; (ldr pc, [sp], #4)
   14994:	push	{r4, lr}
   14998:	ldr	r4, [r2, #44]	; 0x2c
   1499c:	mov	r1, r4
   149a0:	bl	125a8 <fputs@plt>
   149a4:	mov	r1, r4
   149a8:	mov	r0, #0
   149ac:	bl	12194 <_IO_putc@plt>
   149b0:	mov	r0, #1
   149b4:	pop	{r4, pc}
   149b8:	mov	r3, r0
   149bc:	mov	r0, r1
   149c0:	push	{r4, lr}
   149c4:	mov	r1, r3
   149c8:	mov	r4, r2
   149cc:	bl	13dbc <__assert_fail@plt+0x1784>
   149d0:	ldr	r1, [r4, #40]	; 0x28
   149d4:	bl	11fb4 <strcmp@plt>
   149d8:	rsbs	r0, r0, #1
   149dc:	movcc	r0, #0
   149e0:	pop	{r4, pc}
   149e4:	ldr	r3, [r2, #40]	; 0x28
   149e8:	cmp	r3, #1
   149ec:	beq	14a44 <__assert_fail@plt+0x240c>
   149f0:	bcc	14a24 <__assert_fail@plt+0x23ec>
   149f4:	cmp	r3, #2
   149f8:	bne	14a1c <__assert_fail@plt+0x23e4>
   149fc:	ldr	r0, [r1, #28]
   14a00:	mov	r1, #0
   14a04:	ldrd	r2, [r2, #48]	; 0x30
   14a08:	cmp	r1, r3
   14a0c:	cmpeq	r0, r2
   14a10:	movne	r0, #0
   14a14:	moveq	r0, #1
   14a18:	bx	lr
   14a1c:	mov	r0, #0
   14a20:	bx	lr
   14a24:	ldr	r0, [r1, #28]
   14a28:	mov	r1, #0
   14a2c:	ldrd	r2, [r2, #48]	; 0x30
   14a30:	cmp	r1, r3
   14a34:	cmpeq	r0, r2
   14a38:	movls	r0, #0
   14a3c:	movhi	r0, #1
   14a40:	bx	lr
   14a44:	ldr	r0, [r1, #28]
   14a48:	mov	r1, #0
   14a4c:	ldrd	r2, [r2, #48]	; 0x30
   14a50:	cmp	r1, r3
   14a54:	cmpeq	r0, r2
   14a58:	movcs	r0, #0
   14a5c:	movcc	r0, #1
   14a60:	bx	lr
   14a64:	ldr	r0, [r1, #28]
   14a68:	ldr	r3, [r2, #40]	; 0x28
   14a6c:	subs	r3, r3, r0
   14a70:	rsbs	r0, r3, #0
   14a74:	adcs	r0, r0, r3
   14a78:	bx	lr
   14a7c:	ldr	r3, [r1, #16]
   14a80:	and	r3, r3, #61440	; 0xf000
   14a84:	cmp	r3, #40960	; 0xa000
   14a88:	beq	14a94 <__assert_fail@plt+0x245c>
   14a8c:	mov	r0, #0
   14a90:	bx	lr
   14a94:	add	r1, r2, #40	; 0x28
   14a98:	mov	r2, #1
   14a9c:	b	14494 <__assert_fail@plt+0x1e5c>
   14aa0:	push	{r3, r4, r5, lr}
   14aa4:	ldr	r5, [r2, #40]	; 0x28
   14aa8:	bl	21a4c <__assert_fail@plt+0xf414>
   14aac:	mov	r4, r0
   14ab0:	bl	21c00 <__assert_fail@plt+0xf5c8>
   14ab4:	mov	r1, r4
   14ab8:	mov	r2, #16
   14abc:	mov	r0, r5
   14ac0:	bl	12248 <fnmatch@plt>
   14ac4:	mov	r5, r0
   14ac8:	mov	r0, r4
   14acc:	bl	12020 <free@plt>
   14ad0:	rsbs	r0, r5, #1
   14ad4:	movcc	r0, #0
   14ad8:	pop	{r3, r4, r5, pc}
   14adc:	ldrd	r0, [r1, #96]	; 0x60
   14ae0:	push	{r3, lr}
   14ae4:	orrs	r3, r0, r1
   14ae8:	beq	14b54 <__assert_fail@plt+0x251c>
   14aec:	ldr	r3, [r2, #40]	; 0x28
   14af0:	cmp	r3, #1
   14af4:	beq	14b3c <__assert_fail@plt+0x2504>
   14af8:	bcc	14b1c <__assert_fail@plt+0x24e4>
   14afc:	cmp	r3, #2
   14b00:	bne	14b34 <__assert_fail@plt+0x24fc>
   14b04:	ldrd	r2, [r2, #48]	; 0x30
   14b08:	cmp	r1, r3
   14b0c:	cmpeq	r0, r2
   14b10:	movne	r0, #0
   14b14:	moveq	r0, #1
   14b18:	pop	{r3, pc}
   14b1c:	ldrd	r2, [r2, #48]	; 0x30
   14b20:	cmp	r1, r3
   14b24:	cmpeq	r0, r2
   14b28:	movls	r0, #0
   14b2c:	movhi	r0, #1
   14b30:	pop	{r3, pc}
   14b34:	mov	r0, #0
   14b38:	pop	{r3, pc}
   14b3c:	ldrd	r2, [r2, #48]	; 0x30
   14b40:	cmp	r1, r3
   14b44:	cmpeq	r0, r2
   14b48:	movcs	r0, #0
   14b4c:	movcc	r0, #1
   14b50:	pop	{r3, pc}
   14b54:	movw	r0, #55784	; 0xd9e8
   14b58:	movw	r1, #55680	; 0xd980
   14b5c:	movt	r0, #2
   14b60:	movt	r1, #2
   14b64:	movw	r2, #567	; 0x237
   14b68:	ldr	r3, [pc]	; 14b70 <__assert_fail@plt+0x2538>
   14b6c:	bl	12638 <__assert_fail@plt>
   14b70:	andeq	sp, r2, r8, lsr r9
   14b74:	push	{r3, lr}
   14b78:	mov	r1, r0
   14b7c:	ldr	r0, [r2, #40]	; 0x28
   14b80:	mov	r2, #16
   14b84:	bl	12248 <fnmatch@plt>
   14b88:	rsbs	r0, r0, #1
   14b8c:	movcc	r0, #0
   14b90:	pop	{r3, pc}
   14b94:	ldr	r3, [r2, #40]	; 0x28
   14b98:	cmp	r3, #1
   14b9c:	beq	14bf4 <__assert_fail@plt+0x25bc>
   14ba0:	bcc	14bd4 <__assert_fail@plt+0x259c>
   14ba4:	cmp	r3, #2
   14ba8:	bne	14bcc <__assert_fail@plt+0x2594>
   14bac:	ldr	r0, [r1, #20]
   14bb0:	mov	r1, #0
   14bb4:	ldrd	r2, [r2, #48]	; 0x30
   14bb8:	cmp	r1, r3
   14bbc:	cmpeq	r0, r2
   14bc0:	movne	r0, #0
   14bc4:	moveq	r0, #1
   14bc8:	bx	lr
   14bcc:	mov	r0, #0
   14bd0:	bx	lr
   14bd4:	ldr	r0, [r1, #20]
   14bd8:	mov	r1, #0
   14bdc:	ldrd	r2, [r2, #48]	; 0x30
   14be0:	cmp	r1, r3
   14be4:	cmpeq	r0, r2
   14be8:	movls	r0, #0
   14bec:	movhi	r0, #1
   14bf0:	bx	lr
   14bf4:	ldr	r0, [r1, #20]
   14bf8:	mov	r1, #0
   14bfc:	ldrd	r2, [r2, #48]	; 0x30
   14c00:	cmp	r1, r3
   14c04:	cmpeq	r0, r2
   14c08:	movcs	r0, #0
   14c0c:	movcc	r0, #1
   14c10:	bx	lr
   14c14:	ldr	r3, [r1, #16]
   14c18:	and	r3, r3, #61440	; 0xf000
   14c1c:	cmp	r3, #40960	; 0xa000
   14c20:	beq	14c2c <__assert_fail@plt+0x25f4>
   14c24:	mov	r0, #0
   14c28:	bx	lr
   14c2c:	add	r1, r2, #40	; 0x28
   14c30:	mov	r2, #0
   14c34:	b	14494 <__assert_fail@plt+0x1e5c>
   14c38:	b	1490c <__assert_fail@plt+0x22d4>
   14c3c:	add	r1, r1, #80	; 0x50
   14c40:	mov	r3, #60	; 0x3c
   14c44:	push	{lr}		; (str lr, [sp, #-4]!)
   14c48:	sub	sp, sp, #12
   14c4c:	ldm	r1, {r0, r1}
   14c50:	stm	sp, {r0, r1}
   14c54:	bl	14230 <__assert_fail@plt+0x1bf8>
   14c58:	add	sp, sp, #12
   14c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c60:	add	r1, r1, #80	; 0x50
   14c64:	movw	r3, #20864	; 0x5180
   14c68:	push	{lr}		; (str lr, [sp, #-4]!)
   14c6c:	sub	sp, sp, #12
   14c70:	ldm	r1, {r0, r1}
   14c74:	movt	r3, #1
   14c78:	stm	sp, {r0, r1}
   14c7c:	bl	14230 <__assert_fail@plt+0x1bf8>
   14c80:	add	sp, sp, #12
   14c84:	pop	{pc}		; (ldr pc, [sp], #4)
   14c88:	push	{r3, r4, r5, lr}
   14c8c:	ldr	r5, [r2, #40]	; 0x28
   14c90:	bl	21a4c <__assert_fail@plt+0xf414>
   14c94:	mov	r4, r0
   14c98:	bl	21c00 <__assert_fail@plt+0xf5c8>
   14c9c:	mov	r1, r4
   14ca0:	mov	r2, #0
   14ca4:	mov	r0, r5
   14ca8:	bl	12248 <fnmatch@plt>
   14cac:	mov	r5, r0
   14cb0:	mov	r0, r4
   14cb4:	bl	12020 <free@plt>
   14cb8:	rsbs	r0, r5, #1
   14cbc:	movcc	r0, #0
   14cc0:	pop	{r3, r4, r5, pc}
   14cc4:	push	{r3, lr}
   14cc8:	ldr	r2, [r2, #160]	; 0xa0
   14ccc:	bl	196b8 <__assert_fail@plt+0x7080>
   14cd0:	eor	r0, r0, #1
   14cd4:	uxtb	r0, r0
   14cd8:	pop	{r3, pc}
   14cdc:	push	{lr}		; (str lr, [sp, #-4]!)
   14ce0:	sub	sp, sp, #12
   14ce4:	ldr	r3, [r2, #44]	; 0x2c
   14ce8:	cmp	r3, #0
   14cec:	bne	14d1c <__assert_fail@plt+0x26e4>
   14cf0:	add	r1, r1, #80	; 0x50
   14cf4:	add	r2, r2, #48	; 0x30
   14cf8:	ldm	r1, {r0, r1}
   14cfc:	ldm	r2, {r2, r3}
   14d00:	stm	sp, {r0, r1}
   14d04:	bl	141b8 <__assert_fail@plt+0x1b80>
   14d08:	cmp	r0, #0
   14d0c:	movle	r0, #0
   14d10:	movgt	r0, #1
   14d14:	add	sp, sp, #12
   14d18:	pop	{pc}		; (ldr pc, [sp], #4)
   14d1c:	movw	r0, #55724	; 0xd9ac
   14d20:	movw	r1, #55680	; 0xd980
   14d24:	movt	r0, #2
   14d28:	movt	r1, #2
   14d2c:	movw	r2, #689	; 0x2b1
   14d30:	ldr	r3, [pc]	; 14d38 <__assert_fail@plt+0x2700>
   14d34:	bl	12638 <__assert_fail@plt>
   14d38:	andeq	sp, r2, r4, asr #18
   14d3c:	push	{r4, r5, lr}
   14d40:	mov	r4, r0
   14d44:	ldr	r3, [r2, #44]	; 0x2c
   14d48:	sub	sp, sp, #12
   14d4c:	cmp	r3, #0
   14d50:	bne	14e58 <__assert_fail@plt+0x2820>
   14d54:	ldr	r3, [r2, #40]	; 0x28
   14d58:	cmp	r3, #4
   14d5c:	ldrls	pc, [pc, r3, lsl #2]
   14d60:	b	14e20 <__assert_fail@plt+0x27e8>
   14d64:			; <UNDEFINED> instruction: 0x00014db0
   14d68:	andeq	r4, r1, r8, asr #27
   14d6c:	andeq	r4, r1, ip, lsl #28
   14d70:	andeq	r4, r1, r8, ror sp
   14d74:	andeq	r4, r1, ip, lsr lr
   14d78:	ldr	r0, [r1, #80]	; 0x50
   14d7c:	add	r3, sp, #8
   14d80:	ldr	ip, [r1, #84]	; 0x54
   14d84:	str	r0, [r3, #-8]!
   14d88:	add	r2, r2, #48	; 0x30
   14d8c:	str	ip, [sp, #4]
   14d90:	ldm	r3, {r0, r1}
   14d94:	ldm	r2, {r2, r3}
   14d98:	bl	141b8 <__assert_fail@plt+0x1b80>
   14d9c:	cmp	r0, #0
   14da0:	movle	r0, #0
   14da4:	movgt	r0, #1
   14da8:	add	sp, sp, #12
   14dac:	pop	{r4, r5, pc}
   14db0:	add	r0, r1, #72	; 0x48
   14db4:	ldr	ip, [r1, #76]	; 0x4c
   14db8:	mov	r3, sp
   14dbc:	ldm	r0, {r0, r1}
   14dc0:	stm	sp, {r0, r1}
   14dc4:	b	14d88 <__assert_fail@plt+0x2750>
   14dc8:	mov	r2, #5
   14dcc:	movw	r1, #55852	; 0xda2c
   14dd0:	mov	r0, #0
   14dd4:	movt	r1, #2
   14dd8:	bl	120d4 <dcgettext@plt>
   14ddc:	mov	r1, r4
   14de0:	mov	r5, r0
   14de4:	mov	r0, #0
   14de8:	bl	19778 <__assert_fail@plt+0x7140>
   14dec:	mov	r2, r5
   14df0:	mov	r3, r0
   14df4:	mov	r0, #0
   14df8:	mov	r1, r0
   14dfc:	bl	12224 <error@plt>
   14e00:	mov	r0, #0
   14e04:	add	sp, sp, #12
   14e08:	pop	{r4, r5, pc}
   14e0c:	ldr	r0, [r1, #88]	; 0x58
   14e10:	add	r3, sp, #8
   14e14:	ldr	ip, [r1, #92]	; 0x5c
   14e18:	str	r0, [r3, #-8]!
   14e1c:	b	14d88 <__assert_fail@plt+0x2750>
   14e20:	movw	r0, #55900	; 0xda5c
   14e24:	movw	r1, #55680	; 0xd980
   14e28:	movt	r0, #2
   14e2c:	movt	r1, #2
   14e30:	movw	r2, #735	; 0x2df
   14e34:	ldr	r3, [pc, #56]	; 14e74 <__assert_fail@plt+0x283c>
   14e38:	bl	12638 <__assert_fail@plt>
   14e3c:	movw	r0, #55808	; 0xda00
   14e40:	movw	r1, #55680	; 0xd980
   14e44:	movt	r0, #2
   14e48:	movt	r1, #2
   14e4c:	mov	r2, #704	; 0x2c0
   14e50:	ldr	r3, [pc, #28]	; 14e74 <__assert_fail@plt+0x283c>
   14e54:	bl	12638 <__assert_fail@plt>
   14e58:	movw	r0, #55724	; 0xd9ac
   14e5c:	movw	r1, #55680	; 0xd980
   14e60:	movt	r0, #2
   14e64:	movt	r1, #2
   14e68:	movw	r2, #699	; 0x2bb
   14e6c:	ldr	r3, [pc]	; 14e74 <__assert_fail@plt+0x283c>
   14e70:	bl	12638 <__assert_fail@plt>
   14e74:	andeq	sp, r2, r0, asr r9
   14e78:	push	{r3, lr}
   14e7c:	ldr	r0, [r1, #28]
   14e80:	bl	12608 <getgrgid@plt>
   14e84:	rsbs	r0, r0, #1
   14e88:	movcc	r0, #0
   14e8c:	pop	{r3, pc}
   14e90:	push	{r3, lr}
   14e94:	ldr	r0, [r1, #24]
   14e98:	bl	11fcc <getpwuid@plt>
   14e9c:	rsbs	r0, r0, #1
   14ea0:	movcc	r0, #0
   14ea4:	pop	{r3, pc}
   14ea8:	push	{r4, r5, r6, lr}
   14eac:	mov	r5, r0
   14eb0:	ldr	r3, [r2, #132]	; 0x84
   14eb4:	mov	r6, r1
   14eb8:	mov	r1, r0
   14ebc:	mov	r4, r2
   14ec0:	ldr	r0, [r3]
   14ec4:	bl	14320 <__assert_fail@plt+0x1ce8>
   14ec8:	cmp	r0, #0
   14ecc:	popeq	{r4, r5, r6, pc}
   14ed0:	mov	r0, r5
   14ed4:	mov	r1, r6
   14ed8:	mov	r2, r4
   14edc:	pop	{r4, r5, r6, lr}
   14ee0:	b	15afc <__assert_fail@plt+0x34c4>
   14ee4:	push	{r3, r4, r5, lr}
   14ee8:	mov	r5, r1
   14eec:	ldr	r3, [r2, #132]	; 0x84
   14ef0:	mov	r1, r0
   14ef4:	mov	r4, r2
   14ef8:	ldr	r0, [r3]
   14efc:	bl	14320 <__assert_fail@plt+0x1ce8>
   14f00:	cmp	r0, #0
   14f04:	popeq	{r3, r4, r5, pc}
   14f08:	movw	r3, #25340	; 0x62fc
   14f0c:	movt	r3, #4
   14f10:	mov	r1, r5
   14f14:	mov	r2, r4
   14f18:	ldr	r0, [r3, #12]
   14f1c:	pop	{r3, r4, r5, lr}
   14f20:	b	15afc <__assert_fail@plt+0x34c4>
   14f24:	mov	r0, #1
   14f28:	bx	lr
   14f2c:	push	{r3, lr}
   14f30:	mov	r1, r0
   14f34:	ldr	r0, [r2, #40]	; 0x28
   14f38:	mov	r2, #0
   14f3c:	bl	12248 <fnmatch@plt>
   14f40:	rsbs	r0, r0, #1
   14f44:	movcc	r0, #0
   14f48:	pop	{r3, pc}
   14f4c:	push	{r3, lr}
   14f50:	ldr	r3, [r1, #16]
   14f54:	ldr	r0, [r2, #40]	; 0x28
   14f58:	and	r1, r3, #61440	; 0xf000
   14f5c:	cmp	r1, #16384	; 0x4000
   14f60:	moveq	r1, #44	; 0x2c
   14f64:	movne	r1, #40	; 0x28
   14f68:	cmp	r0, #1
   14f6c:	add	r2, r2, r1
   14f70:	ldr	r2, [r2, #4]
   14f74:	beq	14fb0 <__assert_fail@plt+0x2978>
   14f78:	bcc	14f9c <__assert_fail@plt+0x2964>
   14f7c:	cmp	r0, #2
   14f80:	bne	14f98 <__assert_fail@plt+0x2960>
   14f84:	ubfx	r0, r3, #0, #12
   14f88:	subs	r3, r0, r2
   14f8c:	rsbs	r0, r3, #0
   14f90:	adcs	r0, r0, r3
   14f94:	pop	{r3, pc}
   14f98:	bl	125cc <abort@plt>
   14f9c:	and	r0, r2, r3
   14fa0:	subs	r2, r0, r2
   14fa4:	rsbs	r0, r2, #0
   14fa8:	adcs	r0, r0, r2
   14fac:	pop	{r3, pc}
   14fb0:	cmp	r2, #0
   14fb4:	popeq	{r3, pc}
   14fb8:	tst	r2, r3
   14fbc:	moveq	r0, #0
   14fc0:	movne	r0, #1
   14fc4:	pop	{r3, pc}
   14fc8:	movw	r1, #25340	; 0x62fc
   14fcc:	movt	r1, #4
   14fd0:	push	{r3, lr}
   14fd4:	mov	r2, #1
   14fd8:	mov	r3, #0
   14fdc:	ldr	r0, [r1, #16]
   14fe0:	ldr	r1, [r1, #12]
   14fe4:	bl	1202c <faccessat@plt>
   14fe8:	rsbs	r0, r0, #1
   14fec:	movcc	r0, #0
   14ff0:	pop	{r3, pc}
   14ff4:	movw	r1, #25340	; 0x62fc
   14ff8:	movt	r1, #4
   14ffc:	push	{r3, lr}
   15000:	mov	r2, #4
   15004:	mov	r3, #0
   15008:	ldr	r0, [r1, #16]
   1500c:	ldr	r1, [r1, #12]
   15010:	bl	1202c <faccessat@plt>
   15014:	rsbs	r0, r0, #1
   15018:	movcc	r0, #0
   1501c:	pop	{r3, pc}
   15020:	movw	r1, #25340	; 0x62fc
   15024:	movt	r1, #4
   15028:	push	{r3, lr}
   1502c:	mov	r2, #2
   15030:	mov	r3, #0
   15034:	ldr	r0, [r1, #16]
   15038:	ldr	r1, [r1, #12]
   1503c:	bl	1202c <faccessat@plt>
   15040:	rsbs	r0, r0, #1
   15044:	movcc	r0, #0
   15048:	pop	{r3, pc}
   1504c:	push	{lr}		; (str lr, [sp, #-4]!)
   15050:	sub	sp, sp, #12
   15054:	ldr	ip, [r2, #44]	; 0x2c
   15058:	movw	r3, #12460	; 0x30ac
   1505c:	ldr	r1, [r2, #56]	; 0x38
   15060:	movt	r3, #3
   15064:	ldrb	r2, [r2, #52]	; 0x34
   15068:	str	r0, [sp]
   1506c:	mov	r0, ip
   15070:	bl	206f4 <__assert_fail@plt+0xe0bc>
   15074:	mov	r0, #1
   15078:	add	sp, sp, #12
   1507c:	pop	{pc}		; (ldr pc, [sp], #4)
   15080:	push	{r4, lr}
   15084:	ldr	r4, [r2, #44]	; 0x2c
   15088:	mov	r1, r4
   1508c:	bl	125a8 <fputs@plt>
   15090:	mov	r1, r4
   15094:	mov	r0, #0
   15098:	bl	12194 <_IO_putc@plt>
   1509c:	mov	r0, #1
   150a0:	pop	{r4, pc}
   150a4:	push	{r4, r5, r6, lr}
   150a8:	sub	sp, sp, #8
   150ac:	mov	r6, r2
   150b0:	mov	r5, r0
   150b4:	bl	1232c <strlen@plt>
   150b8:	mov	r3, #0
   150bc:	mov	r1, r5
   150c0:	mov	r4, r0
   150c4:	ldr	r0, [r6, #40]	; 0x28
   150c8:	mov	r2, r4
   150cc:	str	r3, [sp]
   150d0:	bl	12368 <re_match@plt>
   150d4:	subs	r3, r4, r0
   150d8:	rsbs	r0, r3, #0
   150dc:	adcs	r0, r0, r3
   150e0:	add	sp, sp, #8
   150e4:	pop	{r4, r5, r6, pc}
   150e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150ec:	mov	sl, r2
   150f0:	ldr	r4, [r2, #44]	; 0x2c
   150f4:	ldrd	r6, [r1, #48]	; 0x30
   150f8:	asr	r5, r4, #31
   150fc:	mov	r2, r4
   15100:	mov	r0, r6
   15104:	mov	r1, r7
   15108:	mov	r3, r5
   1510c:	bl	2c870 <__assert_fail@plt+0x1a238>
   15110:	mov	r2, r4
   15114:	mov	r3, r5
   15118:	mov	r8, r0
   1511c:	mov	r9, r1
   15120:	mov	r0, r6
   15124:	mov	r1, r7
   15128:	bl	2c870 <__assert_fail@plt+0x1a238>
   1512c:	ldr	r1, [sl, #40]	; 0x28
   15130:	orrs	r3, r2, r3
   15134:	moveq	r3, #0
   15138:	movne	r3, #1
   1513c:	adds	r8, r8, r3
   15140:	adc	r9, r9, #0
   15144:	cmp	r1, #1
   15148:	beq	15190 <__assert_fail@plt+0x2b58>
   1514c:	bcc	15178 <__assert_fail@plt+0x2b40>
   15150:	cmp	r1, #2
   15154:	bne	15170 <__assert_fail@plt+0x2b38>
   15158:	ldrd	r2, [sl, #48]	; 0x30
   1515c:	cmp	r9, r3
   15160:	cmpeq	r8, r2
   15164:	movne	r0, #0
   15168:	moveq	r0, #1
   1516c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15170:	mov	r0, #0
   15174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15178:	ldrd	r2, [sl, #48]	; 0x30
   1517c:	cmp	r9, r3
   15180:	cmpeq	r8, r2
   15184:	movls	r0, #0
   15188:	movhi	r0, #1
   1518c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15190:	ldrd	r2, [sl, #48]	; 0x30
   15194:	cmp	r9, r3
   15198:	cmpeq	r8, r2
   1519c:	movcs	r0, #0
   151a0:	movcc	r0, #1
   151a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151a8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   151ac:	mov	r9, r1
   151b0:	ldrd	r4, [r1, #96]	; 0x60
   151b4:	mov	r8, r2
   151b8:	orrs	r3, r4, r5
   151bc:	beq	151d8 <__assert_fail@plt+0x2ba0>
   151c0:	ldrd	r6, [r2, #40]	; 0x28
   151c4:	cmp	r5, r7
   151c8:	cmpeq	r4, r6
   151cc:	beq	151d8 <__assert_fail@plt+0x2ba0>
   151d0:	mov	r0, #0
   151d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   151d8:	movw	r3, #25340	; 0x62fc
   151dc:	movt	r3, #4
   151e0:	mov	r2, r9
   151e4:	ldr	r1, [r3, #12]
   151e8:	bl	187f0 <__assert_fail@plt+0x61b8>
   151ec:	cmp	r0, #0
   151f0:	bne	151d0 <__assert_fail@plt+0x2b98>
   151f4:	ldrd	r6, [r9, #96]	; 0x60
   151f8:	ldrd	r4, [r8, #40]	; 0x28
   151fc:	cmp	r7, r5
   15200:	cmpeq	r6, r4
   15204:	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   15208:	ldrd	r0, [r9]
   1520c:	ldrd	r2, [r8, #48]	; 0x30
   15210:	cmp	r1, r3
   15214:	cmpeq	r0, r2
   15218:	movne	r0, #0
   1521c:	moveq	r0, #1
   15220:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15224:	mov	r0, #1
   15228:	bx	lr
   1522c:	push	{r3, lr}
   15230:	movw	r3, #25340	; 0x62fc
   15234:	movt	r3, #4
   15238:	ldr	ip, [r2, #40]	; 0x28
   1523c:	ldrb	r2, [r3, #5]
   15240:	cmp	r2, #0
   15244:	beq	15274 <__assert_fail@plt+0x2c3c>
   15248:	ldr	r0, [r3, #8]
   1524c:	cmp	r0, #0
   15250:	popeq	{r3, pc}
   15254:	ldrb	r3, [r3, #4]
   15258:	cmp	r3, #0
   1525c:	ldrne	r0, [r1, #16]
   15260:	and	r0, r0, #61440	; 0xf000
   15264:	subs	r3, ip, r0
   15268:	rsbs	r0, r3, #0
   1526c:	adcs	r0, r0, r3
   15270:	pop	{r3, pc}
   15274:	movw	r0, #55912	; 0xda68
   15278:	movw	r1, #55680	; 0xd980
   1527c:	movt	r0, #2
   15280:	movt	r1, #2
   15284:	movw	r2, #1058	; 0x422
   15288:	ldr	r3, [pc]	; 15290 <__assert_fail@plt+0x2c58>
   1528c:	bl	12638 <__assert_fail@plt>
   15290:	andeq	sp, r2, r0, ror #18
   15294:	ldr	r3, [r2, #40]	; 0x28
   15298:	cmp	r3, #1
   1529c:	beq	152f4 <__assert_fail@plt+0x2cbc>
   152a0:	bcc	152d4 <__assert_fail@plt+0x2c9c>
   152a4:	cmp	r3, #2
   152a8:	bne	152cc <__assert_fail@plt+0x2c94>
   152ac:	ldr	r0, [r1, #24]
   152b0:	mov	r1, #0
   152b4:	ldrd	r2, [r2, #48]	; 0x30
   152b8:	cmp	r1, r3
   152bc:	cmpeq	r0, r2
   152c0:	movne	r0, #0
   152c4:	moveq	r0, #1
   152c8:	bx	lr
   152cc:	mov	r0, #0
   152d0:	bx	lr
   152d4:	ldr	r0, [r1, #24]
   152d8:	mov	r1, #0
   152dc:	ldrd	r2, [r2, #48]	; 0x30
   152e0:	cmp	r1, r3
   152e4:	cmpeq	r0, r2
   152e8:	movls	r0, #0
   152ec:	movhi	r0, #1
   152f0:	bx	lr
   152f4:	ldr	r0, [r1, #24]
   152f8:	mov	r1, #0
   152fc:	ldrd	r2, [r2, #48]	; 0x30
   15300:	cmp	r1, r3
   15304:	cmpeq	r0, r2
   15308:	movcs	r0, #0
   1530c:	movcc	r0, #1
   15310:	bx	lr
   15314:	ldr	r0, [r1, #76]	; 0x4c
   15318:	ldr	r3, [r1, #92]	; 0x5c
   1531c:	ldr	ip, [r1, #72]	; 0x48
   15320:	ldr	r1, [r1, #88]	; 0x58
   15324:	subs	r3, r0, r3
   15328:	push	{lr}		; (str lr, [sp, #-4]!)
   1532c:	sub	sp, sp, #12
   15330:	addmi	r3, r3, #998244352	; 0x3b800000
   15334:	rsb	r1, r1, ip
   15338:	add	ip, sp, #8
   1533c:	addmi	r3, r3, #1753088	; 0x1ac000
   15340:	submi	r1, r1, #1
   15344:	addmi	r3, r3, #2560	; 0xa00
   15348:	stm	sp, {r1, r3}
   1534c:	movw	r3, #20864	; 0x5180
   15350:	ldmdb	ip, {r0, r1}
   15354:	movt	r3, #1
   15358:	bl	14230 <__assert_fail@plt+0x1bf8>
   1535c:	add	sp, sp, #12
   15360:	pop	{pc}		; (ldr pc, [sp], #4)
   15364:	ldr	r0, [r1, #24]
   15368:	ldr	r3, [r2, #40]	; 0x28
   1536c:	subs	r3, r3, r0
   15370:	rsbs	r0, r3, #0
   15374:	adcs	r0, r0, r3
   15378:	bx	lr
   1537c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15380:	movw	r4, #21904	; 0x5590
   15384:	movt	r4, #4
   15388:	sub	sp, sp, #116	; 0x74
   1538c:	mov	r9, r1
   15390:	mov	r8, r2
   15394:	ldr	r3, [r4]
   15398:	mov	r7, r0
   1539c:	movw	r5, #25340	; 0x62fc
   153a0:	movt	r5, #4
   153a4:	str	r3, [sp, #108]	; 0x6c
   153a8:	bl	18f10 <__assert_fail@plt+0x68d8>
   153ac:	movw	ip, #36180	; 0x8d54
   153b0:	movw	r3, #36344	; 0x8df8
   153b4:	movt	ip, #1
   153b8:	movt	r3, #1
   153bc:	cmp	r0, #0
   153c0:	mov	r0, sp
   153c4:	moveq	r6, ip
   153c8:	movne	r6, r3
   153cc:	bl	187ec <__assert_fail@plt+0x61b4>
   153d0:	ldr	r0, [r5, #12]
   153d4:	mov	r1, sp
   153d8:	blx	r6
   153dc:	cmp	r0, #0
   153e0:	beq	15434 <__assert_fail@plt+0x2dfc>
   153e4:	bl	18f10 <__assert_fail@plt+0x68d8>
   153e8:	cmp	r0, #0
   153ec:	beq	1545c <__assert_fail@plt+0x2e24>
   153f0:	bl	1238c <__errno_location@plt>
   153f4:	ldr	r6, [r0]
   153f8:	cmp	r6, #2
   153fc:	beq	15468 <__assert_fail@plt+0x2e30>
   15400:	mov	r1, r7
   15404:	mov	r0, #0
   15408:	bl	19778 <__assert_fail@plt+0x7140>
   1540c:	mov	r1, r6
   15410:	movw	r2, #8288	; 0x2060
   15414:	movt	r2, #3
   15418:	mov	r3, r0
   1541c:	mov	r0, #0
   15420:	bl	12224 <error@plt>
   15424:	mov	r3, #1
   15428:	mov	r0, #0
   1542c:	str	r3, [r5, #28]
   15430:	b	15444 <__assert_fail@plt+0x2e0c>
   15434:	mov	r0, r7
   15438:	mov	r1, sp
   1543c:	mov	r2, r8
   15440:	bl	1522c <__assert_fail@plt+0x2bf4>
   15444:	ldr	r2, [sp, #108]	; 0x6c
   15448:	ldr	r3, [r4]
   1544c:	cmp	r2, r3
   15450:	bne	1547c <__assert_fail@plt+0x2e44>
   15454:	add	sp, sp, #116	; 0x74
   15458:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1545c:	bl	1238c <__errno_location@plt>
   15460:	ldr	r6, [r0]
   15464:	b	15400 <__assert_fail@plt+0x2dc8>
   15468:	mov	r0, r7
   1546c:	mov	r1, r9
   15470:	mov	r2, r8
   15474:	bl	1522c <__assert_fail@plt+0x2bf4>
   15478:	b	15444 <__assert_fail@plt+0x2e0c>
   1547c:	bl	120e0 <__stack_chk_fail@plt>
   15480:	push	{r4, r5, r6, r7, r8, lr}
   15484:	movw	r4, #21904	; 0x5590
   15488:	movt	r4, #4
   1548c:	sub	sp, sp, #8
   15490:	movw	ip, #25384	; 0x6328
   15494:	movw	r3, #25340	; 0x62fc
   15498:	ldr	lr, [r4]
   1549c:	movt	r3, #4
   154a0:	movt	ip, #4
   154a4:	mov	r6, r0
   154a8:	mov	r5, r2
   154ac:	ldr	r0, [r3, #16]
   154b0:	ldr	ip, [ip, #64]	; 0x40
   154b4:	mov	r2, sp
   154b8:	ldr	r1, [r3, #12]
   154bc:	str	lr, [sp, #4]
   154c0:	blx	ip
   154c4:	cmp	r0, #0
   154c8:	blt	15508 <__assert_fail@plt+0x2ed0>
   154cc:	ldr	r0, [r5, #40]	; 0x28
   154d0:	mov	r2, #0
   154d4:	ldr	r1, [sp]
   154d8:	bl	12248 <fnmatch@plt>
   154dc:	rsbs	r5, r0, #1
   154e0:	ldr	r0, [sp]
   154e4:	movcc	r5, #0
   154e8:	bl	12548 <freecon@plt>
   154ec:	ldr	r2, [sp, #4]
   154f0:	mov	r0, r5
   154f4:	ldr	r3, [r4]
   154f8:	cmp	r2, r3
   154fc:	bne	15550 <__assert_fail@plt+0x2f18>
   15500:	add	sp, sp, #8
   15504:	pop	{r4, r5, r6, r7, r8, pc}
   15508:	bl	1238c <__errno_location@plt>
   1550c:	mov	r5, #0
   15510:	mov	r2, #5
   15514:	movw	r1, #55928	; 0xda78
   15518:	movt	r1, #2
   1551c:	ldr	r7, [r0]
   15520:	mov	r0, r5
   15524:	bl	120d4 <dcgettext@plt>
   15528:	mov	r1, r6
   1552c:	mov	r8, r0
   15530:	mov	r0, r5
   15534:	bl	19778 <__assert_fail@plt+0x7140>
   15538:	mov	r1, r7
   1553c:	mov	r2, r8
   15540:	mov	r3, r0
   15544:	mov	r0, r5
   15548:	bl	12224 <error@plt>
   1554c:	b	154ec <__assert_fail@plt+0x2eb4>
   15550:	bl	120e0 <__stack_chk_fail@plt>
   15554:	push	{r4, r5, r6, r7, r8, r9, lr}
   15558:	movw	r9, #21904	; 0x5590
   1555c:	movt	r9, #4
   15560:	subs	r5, r1, #0
   15564:	sub	sp, sp, #268	; 0x10c
   15568:	mov	r7, r0
   1556c:	ldr	r3, [r9]
   15570:	addne	r4, sp, #4
   15574:	movne	r8, #0
   15578:	mvnne	r6, r4
   1557c:	str	r3, [sp, #260]	; 0x104
   15580:	beq	15608 <__assert_fail@plt+0x2fd0>
   15584:	ldr	r1, [r5, #4]
   15588:	cmp	r1, #0
   1558c:	beq	15638 <__assert_fail@plt+0x3000>
   15590:	mov	r2, #256	; 0x100
   15594:	mov	r0, r4
   15598:	bl	121c4 <__stpcpy_chk@plt>
   1559c:	add	r3, sp, #264	; 0x108
   155a0:	adds	r0, r0, r6
   155a4:	add	r2, r3, r0
   155a8:	bmi	155e0 <__assert_fail@plt+0x2fa8>
   155ac:	ldrb	r1, [r2, #-260]	; 0xfffffefc
   155b0:	cmp	r1, #32
   155b4:	cmpne	r1, #9
   155b8:	beq	155d0 <__assert_fail@plt+0x2f98>
   155bc:	b	155e0 <__assert_fail@plt+0x2fa8>
   155c0:	ldrb	r2, [r4, r0]
   155c4:	cmp	r2, #32
   155c8:	cmpne	r2, #9
   155cc:	bne	1562c <__assert_fail@plt+0x2ff4>
   155d0:	subs	r0, r0, #1
   155d4:	bcs	155c0 <__assert_fail@plt+0x2f88>
   155d8:	add	r2, sp, #260	; 0x104
   155dc:	add	r2, r2, #3
   155e0:	mov	r3, r4
   155e4:	strb	r8, [r2, #-259]	; 0xfffffefd
   155e8:	movw	r2, #55952	; 0xda90
   155ec:	mov	r0, r7
   155f0:	movt	r2, #2
   155f4:	mov	r1, #1
   155f8:	bl	12428 <__fprintf_chk@plt>
   155fc:	ldr	r5, [r5, #152]	; 0x98
   15600:	cmp	r5, #0
   15604:	bne	15584 <__assert_fail@plt+0x2f4c>
   15608:	mov	r1, r7
   1560c:	mov	r0, #10
   15610:	bl	124dc <fputc@plt>
   15614:	ldr	r2, [sp, #260]	; 0x104
   15618:	ldr	r3, [r9]
   1561c:	cmp	r2, r3
   15620:	bne	15640 <__assert_fail@plt+0x3008>
   15624:	add	sp, sp, #268	; 0x10c
   15628:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1562c:	add	r3, sp, #264	; 0x108
   15630:	add	r2, r3, r0
   15634:	b	155e0 <__assert_fail@plt+0x2fa8>
   15638:	mov	r3, r1
   1563c:	b	155e8 <__assert_fail@plt+0x2fb0>
   15640:	bl	120e0 <__stack_chk_fail@plt>
   15644:	push	{r4, r5, r6, lr}
   15648:	subs	r4, r1, #0
   1564c:	sub	sp, sp, #8
   15650:	mov	r5, r0
   15654:	beq	15770 <__assert_fail@plt+0x3138>
   15658:	ldr	r1, [r4, #156]	; 0x9c
   1565c:	bl	15794 <__assert_fail@plt+0x315c>
   15660:	ldrb	r6, [r4, #19]
   15664:	ldrb	lr, [r4, #20]
   15668:	movw	r2, #54180	; 0xd3a4
   1566c:	cmp	r6, #0
   15670:	movt	r2, #2
   15674:	ldrb	ip, [r4, #18]
   15678:	movw	r0, #55976	; 0xdaa8
   1567c:	movt	r0, #2
   15680:	moveq	r0, r2
   15684:	cmp	lr, #0
   15688:	movw	r1, #55992	; 0xdab8
   1568c:	movt	r1, #2
   15690:	str	r0, [sp]
   15694:	moveq	r1, r2
   15698:	cmp	ip, #0
   1569c:	str	r1, [sp, #4]
   156a0:	movw	r3, #55960	; 0xda98
   156a4:	mov	r1, #1
   156a8:	movt	r3, #2
   156ac:	mov	r0, r5
   156b0:	moveq	r3, r2
   156b4:	movw	r2, #56008	; 0xdac8
   156b8:	movt	r2, #2
   156bc:	bl	12428 <__fprintf_chk@plt>
   156c0:	mov	r0, r5
   156c4:	mov	r1, r4
   156c8:	bl	16a3c <__assert_fail@plt+0x4404>
   156cc:	vldr	s14, [r4, #28]
   156d0:	vcvt.f64.f32	d7, s14
   156d4:	movw	r2, #56016	; 0xdad0
   156d8:	mov	r0, r5
   156dc:	movt	r2, #2
   156e0:	mov	r1, #1
   156e4:	vstr	d7, [sp]
   156e8:	bl	12428 <__fprintf_chk@plt>
   156ec:	movw	r3, #25384	; 0x6328
   156f0:	movt	r3, #4
   156f4:	ldr	r3, [r3, #44]	; 0x2c
   156f8:	tst	r3, #64	; 0x40
   156fc:	bne	15714 <__assert_fail@plt+0x30dc>
   15700:	mov	r0, r5
   15704:	ldr	r1, [r4, #160]	; 0xa0
   15708:	add	sp, sp, #8
   1570c:	pop	{r4, r5, r6, lr}
   15710:	b	15794 <__assert_fail@plt+0x315c>
   15714:	ldr	ip, [r4, #164]	; 0xa4
   15718:	movw	r2, #56024	; 0xdad8
   1571c:	ldr	r3, [r4, #168]	; 0xa8
   15720:	movt	r2, #2
   15724:	mov	r0, r5
   15728:	mov	r1, #1
   1572c:	str	ip, [sp]
   15730:	bl	12428 <__fprintf_chk@plt>
   15734:	ldr	r3, [r4, #164]	; 0xa4
   15738:	cmp	r3, #0
   1573c:	beq	15778 <__assert_fail@plt+0x3140>
   15740:	vmov	s11, r3
   15744:	movw	r2, #56036	; 0xdae4
   15748:	mov	r0, r5
   1574c:	movt	r2, #2
   15750:	vcvt.f64.u32	d7, s11
   15754:	vldr	s11, [r4, #168]	; 0xa8
   15758:	mov	r1, #1
   1575c:	vcvt.f64.u32	d6, s11
   15760:	vdiv.f64	d7, d6, d7
   15764:	vstr	d7, [sp]
   15768:	bl	12428 <__fprintf_chk@plt>
   1576c:	b	15700 <__assert_fail@plt+0x30c8>
   15770:	add	sp, sp, #8
   15774:	pop	{r4, r5, r6, pc}
   15778:	movw	r0, #56044	; 0xdaec
   1577c:	mov	r1, #1
   15780:	mov	r2, #4
   15784:	mov	r3, r5
   15788:	movt	r0, #2
   1578c:	bl	121a0 <fwrite@plt>
   15790:	b	15700 <__assert_fail@plt+0x30c8>
   15794:	push	{r4, r5, r6, lr}
   15798:	subs	r4, r1, #0
   1579c:	mov	r5, r0
   157a0:	popeq	{r4, r5, r6, pc}
   157a4:	movw	r1, #17492	; 0x4454
   157a8:	movw	ip, #17428	; 0x4414
   157ac:	movt	r1, #1
   157b0:	movt	ip, #1
   157b4:	b	157c4 <__assert_fail@plt+0x318c>
   157b8:	ldr	r4, [r4, #160]	; 0xa0
   157bc:	cmp	r4, #0
   157c0:	beq	15824 <__assert_fail@plt+0x31ec>
   157c4:	ldr	r2, [r4]
   157c8:	cmp	r2, r1
   157cc:	beq	157d8 <__assert_fail@plt+0x31a0>
   157d0:	cmp	r2, ip
   157d4:	bne	15828 <__assert_fail@plt+0x31f0>
   157d8:	ldr	r2, [r4, #156]	; 0x9c
   157dc:	cmp	r2, #0
   157e0:	beq	157b8 <__assert_fail@plt+0x3180>
   157e4:	mov	r3, r5
   157e8:	mov	r2, #3
   157ec:	mov	r1, #1
   157f0:	movw	r0, #56052	; 0xdaf4
   157f4:	movt	r0, #2
   157f8:	bl	121a0 <fwrite@plt>
   157fc:	mov	r0, r5
   15800:	mov	r1, r4
   15804:	bl	15644 <__assert_fail@plt+0x300c>
   15808:	mov	r3, r5
   1580c:	movw	r0, #56056	; 0xdaf8
   15810:	mov	r1, #1
   15814:	movt	r0, #2
   15818:	mov	r2, #3
   1581c:	pop	{r4, r5, r6, lr}
   15820:	b	121a0 <fwrite@plt>
   15824:	pop	{r4, r5, r6, pc}
   15828:	ldr	r3, [r4, #156]	; 0x9c
   1582c:	cmp	r3, #0
   15830:	bne	157e4 <__assert_fail@plt+0x31ac>
   15834:	ldr	r3, [r4, #160]	; 0xa0
   15838:	cmp	r3, #0
   1583c:	bne	157e4 <__assert_fail@plt+0x31ac>
   15840:	mov	r0, r5
   15844:	mov	r1, r4
   15848:	pop	{r4, r5, r6, lr}
   1584c:	b	15644 <__assert_fail@plt+0x300c>
   15850:	push	{r3, r4, r5, lr}
   15854:	movw	r3, #25384	; 0x6328
   15858:	movt	r3, #4
   1585c:	mov	r5, r0
   15860:	ldr	r3, [r3, #44]	; 0x2c
   15864:	tst	r3, #64	; 0x40
   15868:	popeq	{r3, r4, r5, pc}
   1586c:	movw	r4, #21912	; 0x5598
   15870:	movt	r4, #4
   15874:	mov	r1, #1
   15878:	mov	r2, #42	; 0x2a
   1587c:	ldr	r3, [r4]
   15880:	movw	r0, #56060	; 0xdafc
   15884:	movt	r0, #2
   15888:	bl	121a0 <fwrite@plt>
   1588c:	mov	r1, r5
   15890:	ldr	r0, [r4]
   15894:	bl	15644 <__assert_fail@plt+0x300c>
   15898:	ldr	r1, [r4]
   1589c:	mov	r0, #10
   158a0:	pop	{r3, r4, r5, lr}
   158a4:	b	124dc <fputc@plt>
   158a8:	cmp	r0, #0
   158ac:	push	{r3, r4, r5, lr}
   158b0:	popeq	{r3, r4, r5, pc}
   158b4:	ldr	r2, [r0]
   158b8:	cmp	r2, #0
   158bc:	beq	159ec <__assert_fail@plt+0x33b4>
   158c0:	ldr	r3, [r0, #172]	; 0xac
   158c4:	cmp	r3, #0
   158c8:	beq	159d0 <__assert_fail@plt+0x3398>
   158cc:	movw	r4, #17316	; 0x43a4
   158d0:	movw	r5, #17292	; 0x438c
   158d4:	movt	r4, #1
   158d8:	movt	r5, #1
   158dc:	mov	ip, #1
   158e0:	b	15940 <__assert_fail@plt+0x3308>
   158e4:	tst	r1, #5
   158e8:	bne	159a0 <__assert_fail@plt+0x3368>
   158ec:	tst	r1, #64	; 0x40
   158f0:	beq	1591c <__assert_fail@plt+0x32e4>
   158f4:	ldrb	r3, [r0, #16]
   158f8:	cmp	r3, #0
   158fc:	beq	15a40 <__assert_fail@plt+0x3408>
   15900:	cmp	r2, r4
   15904:	beq	1591c <__assert_fail@plt+0x32e4>
   15908:	cmp	r2, r5
   1590c:	beq	1591c <__assert_fail@plt+0x32e4>
   15910:	ldrb	r3, [r0, #17]
   15914:	cmp	r3, #0
   15918:	beq	15a5c <__assert_fail@plt+0x3424>
   1591c:	ldr	r0, [r0, #152]	; 0x98
   15920:	cmp	r0, #0
   15924:	beq	159cc <__assert_fail@plt+0x3394>
   15928:	ldr	r2, [r0]
   1592c:	cmp	r2, #0
   15930:	beq	159ec <__assert_fail@plt+0x33b4>
   15934:	ldr	r3, [r0, #172]	; 0xac
   15938:	cmp	r3, #0
   1593c:	beq	159d0 <__assert_fail@plt+0x3398>
   15940:	ldr	r1, [r3, #12]
   15944:	cmp	r1, #0
   15948:	beq	15954 <__assert_fail@plt+0x331c>
   1594c:	cmp	r2, r1
   15950:	bne	15a08 <__assert_fail@plt+0x33d0>
   15954:	ldr	r3, [r3]
   15958:	cmp	r3, #6
   1595c:	bhi	1591c <__assert_fail@plt+0x32e4>
   15960:	lsl	r1, ip, r3
   15964:	tst	r1, #58	; 0x3a
   15968:	beq	158e4 <__assert_fail@plt+0x32ac>
   1596c:	ldrb	r3, [r0, #17]
   15970:	cmp	r3, #0
   15974:	bne	15a24 <__assert_fail@plt+0x33ec>
   15978:	ldrb	r3, [r0, #16]
   1597c:	cmp	r3, #0
   15980:	beq	1591c <__assert_fail@plt+0x32e4>
   15984:	movw	r0, #56352	; 0xdc20
   15988:	movw	r1, #55680	; 0xd980
   1598c:	movt	r0, #2
   15990:	movt	r1, #2
   15994:	movw	r2, #1396	; 0x574
   15998:	ldr	r3, [pc, #244]	; 15a94 <__assert_fail@plt+0x345c>
   1599c:	bl	12638 <__assert_fail@plt>
   159a0:	cmp	r3, #0
   159a4:	beq	15a78 <__assert_fail@plt+0x3440>
   159a8:	cmp	r3, #2
   159ac:	bne	1591c <__assert_fail@plt+0x32e4>
   159b0:	movw	r0, #56244	; 0xdbb4
   159b4:	movw	r1, #55680	; 0xd980
   159b8:	movt	r0, #2
   159bc:	movt	r1, #2
   159c0:	movw	r2, #1371	; 0x55b
   159c4:	ldr	r3, [pc, #200]	; 15a94 <__assert_fail@plt+0x345c>
   159c8:	bl	12638 <__assert_fail@plt>
   159cc:	pop	{r3, r4, r5, pc}
   159d0:	movw	r0, #56132	; 0xdb44
   159d4:	movw	r1, #55680	; 0xd980
   159d8:	movt	r0, #2
   159dc:	movt	r1, #2
   159e0:	movw	r2, #1345	; 0x541
   159e4:	ldr	r3, [pc, #168]	; 15a94 <__assert_fail@plt+0x345c>
   159e8:	bl	12638 <__assert_fail@plt>
   159ec:	movw	r0, #56104	; 0xdb28
   159f0:	movw	r1, #55680	; 0xd980
   159f4:	movt	r0, #2
   159f8:	movt	r1, #2
   159fc:	movw	r2, #1342	; 0x53e
   15a00:	ldr	r3, [pc, #140]	; 15a94 <__assert_fail@plt+0x345c>
   15a04:	bl	12638 <__assert_fail@plt>
   15a08:	movw	r0, #56164	; 0xdb64
   15a0c:	movw	r1, #55680	; 0xd980
   15a10:	movt	r0, #2
   15a14:	movt	r1, #2
   15a18:	movw	r2, #1354	; 0x54a
   15a1c:	ldr	r3, [pc, #112]	; 15a94 <__assert_fail@plt+0x345c>
   15a20:	bl	12638 <__assert_fail@plt>
   15a24:	movw	r0, #56328	; 0xdc08
   15a28:	movw	r1, #55680	; 0xd980
   15a2c:	movt	r0, #2
   15a30:	movt	r1, #2
   15a34:	movw	r2, #1395	; 0x573
   15a38:	ldr	r3, [pc, #84]	; 15a94 <__assert_fail@plt+0x345c>
   15a3c:	bl	12638 <__assert_fail@plt>
   15a40:	movw	r0, #56292	; 0xdbe4
   15a44:	movw	r1, #55680	; 0xd980
   15a48:	movt	r0, #2
   15a4c:	movt	r1, #2
   15a50:	movw	r2, #1375	; 0x55f
   15a54:	ldr	r3, [pc, #56]	; 15a94 <__assert_fail@plt+0x345c>
   15a58:	bl	12638 <__assert_fail@plt>
   15a5c:	movw	r0, #56308	; 0xdbf4
   15a60:	movw	r1, #55680	; 0xd980
   15a64:	movt	r0, #2
   15a68:	movt	r1, #2
   15a6c:	movw	r2, #1381	; 0x565
   15a70:	ldr	r3, [pc, #28]	; 15a94 <__assert_fail@plt+0x345c>
   15a74:	bl	12638 <__assert_fail@plt>
   15a78:	movw	r0, #56208	; 0xdb90
   15a7c:	movw	r1, #55680	; 0xd980
   15a80:	movt	r0, #2
   15a84:	movt	r1, #2
   15a88:	movw	r2, #1370	; 0x55a
   15a8c:	ldr	r3, [pc]	; 15a94 <__assert_fail@plt+0x345c>
   15a90:	bl	12638 <__assert_fail@plt>
   15a94:	andeq	sp, r2, ip, ror #18
   15a98:	push	{r4, r5, r6, r7, r8, lr}
   15a9c:	mov	r6, r0
   15aa0:	mov	r0, #8
   15aa4:	mov	r7, r1
   15aa8:	mov	r8, r2
   15aac:	bl	29604 <__assert_fail@plt+0x16fcc>
   15ab0:	mov	r5, #0
   15ab4:	mov	r1, r8
   15ab8:	mov	r2, r5
   15abc:	mov	r4, r0
   15ac0:	mov	r0, r7
   15ac4:	str	r4, [r6]
   15ac8:	str	r5, [r4, #4]
   15acc:	bl	12350 <openat64@plt>
   15ad0:	ldr	r3, [r6]
   15ad4:	str	r0, [r4]
   15ad8:	ldr	r0, [r3]
   15adc:	cmp	r0, r5
   15ae0:	blt	15af4 <__assert_fail@plt+0x34bc>
   15ae4:	mov	r1, #1
   15ae8:	bl	21720 <__assert_fail@plt+0xf0e8>
   15aec:	mov	r0, #1
   15af0:	pop	{r4, r5, r6, r7, r8, pc}
   15af4:	mov	r0, r5
   15af8:	pop	{r4, r5, r6, r7, r8, pc}
   15afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b00:	mov	r5, r0
   15b04:	sub	sp, sp, #44	; 0x2c
   15b08:	ldr	r0, [r2]
   15b0c:	mov	fp, r2
   15b10:	bl	19748 <__assert_fail@plt+0x7110>
   15b14:	cmp	r0, #0
   15b18:	str	r0, [sp, #32]
   15b1c:	bne	15cc0 <__assert_fail@plt+0x3688>
   15b20:	movw	r3, #22048	; 0x5620
   15b24:	movt	r3, #4
   15b28:	ldr	r2, [fp, #144]	; 0x90
   15b2c:	ldr	r3, [r3]
   15b30:	cmp	r2, r3
   15b34:	bne	15dcc <__assert_fail@plt+0x3794>
   15b38:	ldr	ip, [sp, #32]
   15b3c:	mov	r6, ip
   15b40:	str	ip, [sp, #28]
   15b44:	str	ip, [sp, #36]	; 0x24
   15b48:	ldrb	r4, [fp, #40]	; 0x28
   15b4c:	cmp	r4, #0
   15b50:	bne	15c18 <__assert_fail@plt+0x35e0>
   15b54:	ldr	r3, [fp, #136]	; 0x88
   15b58:	add	r8, fp, #44	; 0x2c
   15b5c:	add	r7, fp, #88	; 0x58
   15b60:	cmp	r3, #0
   15b64:	ble	15bc4 <__assert_fail@plt+0x358c>
   15b68:	ldr	r3, [fp, #132]	; 0x84
   15b6c:	ldr	r9, [r3, r4, lsl #2]
   15b70:	add	r4, r4, #1
   15b74:	mov	r0, r9
   15b78:	bl	1232c <strlen@plt>
   15b7c:	mov	sl, r0
   15b80:	mov	r0, r5
   15b84:	bl	1232c <strlen@plt>
   15b88:	ldr	ip, [sp, #28]
   15b8c:	mov	r3, sl
   15b90:	mov	r2, r9
   15b94:	str	r6, [sp]
   15b98:	mov	r1, r7
   15b9c:	str	ip, [sp, #4]
   15ba0:	mov	ip, #0
   15ba4:	str	r5, [sp, #8]
   15ba8:	str	ip, [sp, #16]
   15bac:	str	r0, [sp, #12]
   15bb0:	mov	r0, r8
   15bb4:	bl	2000c <__assert_fail@plt+0xd9d4>
   15bb8:	ldr	r3, [fp, #136]	; 0x88
   15bbc:	cmp	r3, r4
   15bc0:	bgt	15b68 <__assert_fail@plt+0x3530>
   15bc4:	mov	r0, r8
   15bc8:	mov	r1, r7
   15bcc:	bl	201b0 <__assert_fail@plt+0xdb78>
   15bd0:	ldr	r4, [fp, #148]	; 0x94
   15bd4:	tst	r4, #127	; 0x7f
   15bd8:	movne	r4, #0
   15bdc:	beq	15c90 <__assert_fail@plt+0x3658>
   15be0:	ldr	ip, [sp, #32]
   15be4:	cmp	ip, #0
   15be8:	bne	15ca8 <__assert_fail@plt+0x3670>
   15bec:	ldr	ip, [sp, #36]	; 0x24
   15bf0:	cmp	ip, #0
   15bf4:	beq	15c84 <__assert_fail@plt+0x364c>
   15bf8:	movw	r0, #56512	; 0xdcc0
   15bfc:	movw	r1, #56504	; 0xdcb8
   15c00:	movw	r3, #56372	; 0xdc34
   15c04:	movt	r0, #2
   15c08:	movt	r1, #2
   15c0c:	mov	r2, #221	; 0xdd
   15c10:	movt	r3, #2
   15c14:	bl	12638 <__assert_fail@plt>
   15c18:	mov	r0, r5
   15c1c:	bl	1232c <strlen@plt>
   15c20:	ldr	ip, [sp, #28]
   15c24:	mov	r3, #0
   15c28:	str	r6, [sp]
   15c2c:	str	r3, [sp, #8]
   15c30:	mov	r2, r5
   15c34:	str	ip, [sp, #4]
   15c38:	add	r1, fp, #88	; 0x58
   15c3c:	add	r3, r0, #1
   15c40:	add	r0, fp, #44	; 0x2c
   15c44:	bl	1fd7c <__assert_fail@plt+0xd744>
   15c48:	ldr	r3, [fp, #116]	; 0x74
   15c4c:	cmp	r3, #0
   15c50:	movwne	r3, #25340	; 0x62fc
   15c54:	movtne	r3, #4
   15c58:	movne	r2, #1
   15c5c:	strbne	r2, [r3, #32]
   15c60:	ldr	ip, [sp, #36]	; 0x24
   15c64:	cmp	ip, #0
   15c68:	beq	15d8c <__assert_fail@plt+0x3754>
   15c6c:	ldr	ip, [sp, #32]
   15c70:	cmp	ip, #0
   15c74:	movne	r4, #1
   15c78:	beq	15bf8 <__assert_fail@plt+0x35c0>
   15c7c:	ldr	r0, [sp, #36]	; 0x24
   15c80:	bl	12020 <free@plt>
   15c84:	mov	r0, r4
   15c88:	add	sp, sp, #44	; 0x2c
   15c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c90:	ubfx	r4, r4, #8, #8
   15c94:	ldr	ip, [sp, #32]
   15c98:	rsbs	r4, r4, #1
   15c9c:	movcc	r4, #0
   15ca0:	cmp	ip, #0
   15ca4:	beq	15bec <__assert_fail@plt+0x35b4>
   15ca8:	ldr	r0, [fp, #144]	; 0x90
   15cac:	bl	2905c <__assert_fail@plt+0x16a24>
   15cb0:	ldr	ip, [sp, #36]	; 0x24
   15cb4:	cmp	ip, #0
   15cb8:	bne	15c7c <__assert_fail@plt+0x3644>
   15cbc:	b	15c84 <__assert_fail@plt+0x364c>
   15cc0:	ldr	r3, [fp, #116]	; 0x74
   15cc4:	movw	r4, #25340	; 0x62fc
   15cc8:	movt	r4, #4
   15ccc:	cmp	r3, #0
   15cd0:	bne	15d5c <__assert_fail@plt+0x3724>
   15cd4:	ldr	r6, [r4, #12]
   15cd8:	mov	r1, #47	; 0x2f
   15cdc:	mov	r0, r6
   15ce0:	bl	12338 <strchr@plt>
   15ce4:	cmp	r0, #0
   15ce8:	beq	15db0 <__assert_fail@plt+0x3778>
   15cec:	mov	r0, r6
   15cf0:	bl	21b04 <__assert_fail@plt+0xf4cc>
   15cf4:	ldr	r1, [r4, #16]
   15cf8:	mov	r7, r0
   15cfc:	mov	r2, r0
   15d00:	add	r0, fp, #144	; 0x90
   15d04:	bl	15a98 <__assert_fail@plt+0x3460>
   15d08:	mov	r6, r0
   15d0c:	mov	r0, r7
   15d10:	bl	12020 <free@plt>
   15d14:	cmp	r6, #0
   15d18:	bne	15d5c <__assert_fail@plt+0x3724>
   15d1c:	bl	1238c <__errno_location@plt>
   15d20:	mov	r2, #5
   15d24:	movw	r1, #56400	; 0xdc50
   15d28:	movt	r1, #2
   15d2c:	ldr	r7, [r0]
   15d30:	mov	r0, r6
   15d34:	bl	120d4 <dcgettext@plt>
   15d38:	mov	r1, r5
   15d3c:	mov	r8, r0
   15d40:	mov	r0, r6
   15d44:	bl	19778 <__assert_fail@plt+0x7140>
   15d48:	mov	r1, r7
   15d4c:	mov	r2, r8
   15d50:	mov	r3, r0
   15d54:	mov	r0, #1
   15d58:	bl	12224 <error@plt>
   15d5c:	ldr	r0, [r4, #12]
   15d60:	bl	21a4c <__assert_fail@plt+0xf414>
   15d64:	ldrb	r3, [r0]
   15d68:	str	r0, [sp, #36]	; 0x24
   15d6c:	cmp	r3, #47	; 0x2f
   15d70:	beq	15d9c <__assert_fail@plt+0x3764>
   15d74:	movw	r6, #56396	; 0xdc4c
   15d78:	mov	ip, #2
   15d7c:	mov	r5, r0
   15d80:	movt	r6, #2
   15d84:	str	ip, [sp, #28]
   15d88:	b	15b48 <__assert_fail@plt+0x3510>
   15d8c:	mov	r4, #1
   15d90:	mov	r0, r4
   15d94:	add	sp, sp, #44	; 0x2c
   15d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d9c:	mov	ip, #0
   15da0:	ldr	r5, [sp, #36]	; 0x24
   15da4:	str	ip, [sp, #28]
   15da8:	mov	r6, ip
   15dac:	b	15b48 <__assert_fail@plt+0x3510>
   15db0:	movw	r2, #528	; 0x210
   15db4:	add	r0, fp, #144	; 0x90
   15db8:	movt	r2, #3
   15dbc:	ldr	r1, [r4, #16]
   15dc0:	bl	15a98 <__assert_fail@plt+0x3460>
   15dc4:	mov	r6, r0
   15dc8:	b	15d14 <__assert_fail@plt+0x36dc>
   15dcc:	movw	r0, #56468	; 0xdc94
   15dd0:	movw	r1, #56504	; 0xdcb8
   15dd4:	movw	r3, #56372	; 0xdc34
   15dd8:	movt	r0, #2
   15ddc:	movt	r1, #2
   15de0:	mov	r2, #161	; 0xa1
   15de4:	movt	r3, #2
   15de8:	bl	12638 <__assert_fail@plt>
   15dec:	push	{r4, r5, r6, r7, r8, r9, lr}
   15df0:	movw	r7, #21904	; 0x5590
   15df4:	movt	r7, #4
   15df8:	movw	r2, #21920	; 0x55a0
   15dfc:	movt	r2, #4
   15e00:	sub	sp, sp, #28
   15e04:	ldr	ip, [r7]
   15e08:	mov	r9, r3
   15e0c:	ldr	r0, [r2]
   15e10:	mov	r8, r1
   15e14:	str	ip, [sp, #20]
   15e18:	bl	2a9b0 <__assert_fail@plt+0x18378>
   15e1c:	movw	r2, #21912	; 0x5598
   15e20:	movt	r2, #4
   15e24:	ldr	r0, [r2]
   15e28:	bl	2a9b0 <__assert_fail@plt+0x18378>
   15e2c:	movw	r2, #21096	; 0x5268
   15e30:	movt	r2, #4
   15e34:	ldr	r3, [r2]
   15e38:	cmp	r3, #0
   15e3c:	bne	15f98 <__assert_fail@plt+0x3960>
   15e40:	bl	124ac <fork@plt>
   15e44:	cmn	r0, #1
   15e48:	mov	r5, r0
   15e4c:	beq	15eb0 <__assert_fail@plt+0x3878>
   15e50:	cmp	r0, #0
   15e54:	bne	15edc <__assert_fail@plt+0x38a4>
   15e58:	ldr	r4, [r8, #104]	; 0x68
   15e5c:	cmp	r4, #0
   15e60:	beq	16164 <__assert_fail@plt+0x3b2c>
   15e64:	ldrb	r3, [r8, #100]	; 0x64
   15e68:	cmp	r3, #0
   15e6c:	bne	16014 <__assert_fail@plt+0x39dc>
   15e70:	mov	r0, r4
   15e74:	bl	29040 <__assert_fail@plt+0x16a08>
   15e78:	cmp	r0, #0
   15e7c:	beq	1606c <__assert_fail@plt+0x3a34>
   15e80:	bl	1238c <__errno_location@plt>
   15e84:	mov	r2, #5
   15e88:	movw	r1, #56596	; 0xdd14
   15e8c:	movt	r1, #2
   15e90:	ldr	r4, [r0]
   15e94:	mov	r0, #0
   15e98:	bl	120d4 <dcgettext@plt>
   15e9c:	mov	r1, r4
   15ea0:	mov	r2, r0
   15ea4:	mov	r0, #0
   15ea8:	bl	12224 <error@plt>
   15eac:	b	160bc <__assert_fail@plt+0x3a84>
   15eb0:	bl	1238c <__errno_location@plt>
   15eb4:	mov	r2, #5
   15eb8:	movw	r1, #56520	; 0xdcc8
   15ebc:	movt	r1, #2
   15ec0:	ldr	r4, [r0]
   15ec4:	mov	r0, #0
   15ec8:	bl	120d4 <dcgettext@plt>
   15ecc:	mov	r1, r4
   15ed0:	mov	r2, r0
   15ed4:	mov	r0, #1
   15ed8:	bl	12224 <error@plt>
   15edc:	add	r6, r8, #108	; 0x6c
   15ee0:	b	15ef4 <__assert_fail@plt+0x38bc>
   15ee4:	bl	1238c <__errno_location@plt>
   15ee8:	ldr	r4, [r0]
   15eec:	cmp	r4, #4
   15ef0:	bne	15fb0 <__assert_fail@plt+0x3978>
   15ef4:	mov	r0, r5
   15ef8:	mov	r1, r6
   15efc:	mov	r2, #0
   15f00:	bl	121d0 <waitpid@plt>
   15f04:	cmn	r0, #1
   15f08:	beq	15ee4 <__assert_fail@plt+0x38ac>
   15f0c:	ldr	r3, [r8, #108]	; 0x6c
   15f10:	and	r2, r3, #127	; 0x7f
   15f14:	add	r2, r2, #1
   15f18:	sbfx	r2, r2, #1, #7
   15f1c:	cmp	r2, #0
   15f20:	ble	160c4 <__assert_fail@plt+0x3a8c>
   15f24:	mov	r2, #5
   15f28:	movw	r1, #56648	; 0xdd48
   15f2c:	mov	r0, #0
   15f30:	movt	r1, #2
   15f34:	bl	120d4 <dcgettext@plt>
   15f38:	movw	r3, #25384	; 0x6328
   15f3c:	movt	r3, #4
   15f40:	ldr	r2, [r9]
   15f44:	ldr	r1, [r3, #72]	; 0x48
   15f48:	mov	r4, r0
   15f4c:	mov	r0, #0
   15f50:	bl	28cec <__assert_fail@plt+0x166b4>
   15f54:	ldr	ip, [r8, #108]	; 0x6c
   15f58:	mov	r2, r4
   15f5c:	and	ip, ip, #127	; 0x7f
   15f60:	str	ip, [sp]
   15f64:	mov	r3, r0
   15f68:	mov	r0, #0
   15f6c:	mov	r1, r0
   15f70:	bl	12224 <error@plt>
   15f74:	ldrb	r3, [r8]
   15f78:	cmp	r3, #0
   15f7c:	beq	160d0 <__assert_fail@plt+0x3a98>
   15f80:	movw	r3, #25340	; 0x62fc
   15f84:	movt	r3, #4
   15f88:	mov	r2, #1
   15f8c:	mov	r0, r2
   15f90:	str	r2, [r3, #28]
   15f94:	b	15ffc <__assert_fail@plt+0x39c4>
   15f98:	mov	r3, #0
   15f9c:	mov	r0, #17
   15fa0:	mov	r1, r3
   15fa4:	str	r3, [r2]
   15fa8:	bl	1208c <signal@plt>
   15fac:	b	15e40 <__assert_fail@plt+0x3808>
   15fb0:	mov	r2, #5
   15fb4:	movw	r1, #56624	; 0xdd30
   15fb8:	mov	r0, #0
   15fbc:	movt	r1, #2
   15fc0:	bl	120d4 <dcgettext@plt>
   15fc4:	ldr	r1, [r9]
   15fc8:	mov	r5, r0
   15fcc:	mov	r0, #0
   15fd0:	bl	19778 <__assert_fail@plt+0x7140>
   15fd4:	mov	r2, r5
   15fd8:	mov	r1, r4
   15fdc:	mov	r3, r0
   15fe0:	mov	r0, #0
   15fe4:	bl	12224 <error@plt>
   15fe8:	movw	r3, #25340	; 0x62fc
   15fec:	movt	r3, #4
   15ff0:	mov	r0, #0
   15ff4:	mov	r2, #1
   15ff8:	str	r2, [r3, #28]
   15ffc:	ldr	r2, [sp, #20]
   16000:	ldr	r3, [r7]
   16004:	cmp	r2, r3
   16008:	bne	16160 <__assert_fail@plt+0x3b28>
   1600c:	add	sp, sp, #28
   16010:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16014:	movw	r3, #56676	; 0xdd64
   16018:	movt	r3, #2
   1601c:	ldm	r3, {r0, r1, r2}
   16020:	add	r3, sp, #8
   16024:	stmia	r3!, {r0, r1}
   16028:	mov	r0, r5
   1602c:	strh	r2, [r3]
   16030:	bl	125d8 <close@plt>
   16034:	cmp	r0, #0
   16038:	blt	160f8 <__assert_fail@plt+0x3ac0>
   1603c:	add	r0, sp, #8
   16040:	mov	r1, #131072	; 0x20000
   16044:	bl	12254 <open64@plt>
   16048:	cmp	r0, #0
   1604c:	movge	r6, #1
   16050:	blt	1612c <__assert_fail@plt+0x3af4>
   16054:	mov	r0, r4
   16058:	bl	29040 <__assert_fail@plt+0x16a08>
   1605c:	cmp	r0, #0
   16060:	bne	15e80 <__assert_fail@plt+0x3848>
   16064:	cmp	r6, #0
   16068:	beq	160bc <__assert_fail@plt+0x3a84>
   1606c:	bl	18b68 <__assert_fail@plt+0x6530>
   16070:	cmp	r0, #0
   16074:	bne	160f0 <__assert_fail@plt+0x3ab8>
   16078:	mov	r0, r9
   1607c:	bl	20674 <__assert_fail@plt+0xe03c>
   16080:	cmp	r0, #0
   16084:	beq	160d8 <__assert_fail@plt+0x3aa0>
   16088:	bl	1238c <__errno_location@plt>
   1608c:	mov	r3, #7
   16090:	mov	r4, r3
   16094:	str	r3, [r0]
   16098:	ldr	r1, [r9]
   1609c:	mov	r0, #0
   160a0:	bl	19778 <__assert_fail@plt+0x7140>
   160a4:	movw	r2, #8288	; 0x2060
   160a8:	mov	r1, r4
   160ac:	movt	r2, #3
   160b0:	mov	r3, r0
   160b4:	mov	r0, #0
   160b8:	bl	12224 <error@plt>
   160bc:	mov	r0, #1
   160c0:	bl	12050 <_exit@plt>
   160c4:	ubfx	r3, r3, #8, #8
   160c8:	cmp	r3, #0
   160cc:	bne	15f74 <__assert_fail@plt+0x393c>
   160d0:	mov	r0, #1
   160d4:	b	15ffc <__assert_fail@plt+0x39c4>
   160d8:	mov	r1, r9
   160dc:	ldr	r0, [r9]
   160e0:	bl	12068 <execvp@plt>
   160e4:	bl	1238c <__errno_location@plt>
   160e8:	ldr	r4, [r0]
   160ec:	b	16098 <__assert_fail@plt+0x3a60>
   160f0:	bl	2109c <__assert_fail@plt+0xea64>
   160f4:	b	16078 <__assert_fail@plt+0x3a40>
   160f8:	bl	1238c <__errno_location@plt>
   160fc:	mov	r2, #5
   16100:	movw	r1, #56568	; 0xdcf8
   16104:	movt	r1, #2
   16108:	mov	r6, r5
   1610c:	ldr	r7, [r0]
   16110:	mov	r0, r5
   16114:	bl	120d4 <dcgettext@plt>
   16118:	mov	r1, r7
   1611c:	mov	r2, r0
   16120:	mov	r0, r5
   16124:	bl	12224 <error@plt>
   16128:	b	16054 <__assert_fail@plt+0x3a1c>
   1612c:	bl	1238c <__errno_location@plt>
   16130:	add	r1, sp, #8
   16134:	mov	r6, #1
   16138:	ldr	r7, [r0]
   1613c:	mov	r0, r5
   16140:	bl	19778 <__assert_fail@plt+0x7140>
   16144:	movw	r2, #8288	; 0x2060
   16148:	movt	r2, #3
   1614c:	mov	r1, r7
   16150:	mov	r3, r0
   16154:	mov	r0, r5
   16158:	bl	12224 <error@plt>
   1615c:	b	16054 <__assert_fail@plt+0x3a1c>
   16160:	bl	120e0 <__stack_chk_fail@plt>
   16164:	movw	r0, #56532	; 0xdcd4
   16168:	movw	r1, #56504	; 0xdcb8
   1616c:	movt	r0, #2
   16170:	movt	r1, #2
   16174:	mov	r2, #316	; 0x13c
   16178:	ldr	r3, [pc]	; 16180 <__assert_fail@plt+0x3b48>
   1617c:	bl	12638 <__assert_fail@plt>
   16180:	andeq	sp, r2, r4, asr #24
   16184:	push	{r4, lr}
   16188:	mov	r4, r0
   1618c:	cmp	r4, #0
   16190:	beq	161b8 <__assert_fail@plt+0x3b80>
   16194:	ldrb	r0, [r4, #16]
   16198:	cmp	r0, #0
   1619c:	popne	{r4, pc}
   161a0:	ldr	r0, [r4, #156]	; 0x9c
   161a4:	bl	16184 <__assert_fail@plt+0x3b4c>
   161a8:	cmp	r0, #0
   161ac:	popne	{r4, pc}
   161b0:	ldr	r4, [r4, #160]	; 0xa0
   161b4:	b	1618c <__assert_fail@plt+0x3b54>
   161b8:	mov	r0, r4
   161bc:	pop	{r4, pc}
   161c0:	push	{r3, r4, r5, lr}
   161c4:	subs	r4, r0, #0
   161c8:	beq	161f8 <__assert_fail@plt+0x3bc0>
   161cc:	ldr	r0, [r4, #156]	; 0x9c
   161d0:	bl	161c0 <__assert_fail@plt+0x3b88>
   161d4:	mov	r5, r0
   161d8:	ldr	r0, [r4, #160]	; 0xa0
   161dc:	bl	161c0 <__assert_fail@plt+0x3b88>
   161e0:	ldr	r3, [r4, #24]
   161e4:	cmp	r5, r0
   161e8:	movcs	r0, r5
   161ec:	cmp	r0, r3
   161f0:	movcc	r0, r3
   161f4:	pop	{r3, r4, r5, pc}
   161f8:	mov	r0, r4
   161fc:	pop	{r3, r4, r5, pc}
   16200:	push	{r4, lr}
   16204:	movw	r4, #21904	; 0x5590
   16208:	movt	r4, #4
   1620c:	ldr	lr, [r0]
   16210:	ldr	ip, [r1]
   16214:	sub	sp, sp, #16
   16218:	ldr	r3, [r4]
   1621c:	mov	r2, #4
   16220:	add	r1, sp, #8
   16224:	add	r0, sp, r2
   16228:	str	lr, [sp, #4]
   1622c:	str	r3, [sp, #12]
   16230:	str	ip, [sp, #8]
   16234:	bl	120b0 <memcmp@plt>
   16238:	ldr	r2, [sp, #12]
   1623c:	ldr	r3, [r4]
   16240:	cmp	r2, r3
   16244:	bne	16250 <__assert_fail@plt+0x3c18>
   16248:	add	sp, sp, #16
   1624c:	pop	{r4, pc}
   16250:	bl	120e0 <__stack_chk_fail@plt>
   16254:	push	{r4, r5, r6, lr}
   16258:	mov	r5, r0
   1625c:	mov	r0, #176	; 0xb0
   16260:	mov	r4, r1
   16264:	mov	r6, r2
   16268:	bl	29604 <__assert_fail@plt+0x16fcc>
   1626c:	cmp	r4, #2
   16270:	mov	ip, #0
   16274:	mov	r2, #3
   16278:	mov	r3, r0
   1627c:	str	r4, [r0, #12]
   16280:	str	r2, [r0, #8]
   16284:	strb	ip, [r0, #18]
   16288:	strb	ip, [r0, #19]
   1628c:	strb	ip, [r0, #20]
   16290:	str	ip, [r0, #24]
   16294:	str	ip, [r0, #36]	; 0x24
   16298:	beq	16328 <__assert_fail@plt+0x3cf0>
   1629c:	cmp	r4, r2
   162a0:	beq	162f4 <__assert_fail@plt+0x3cbc>
   162a4:	cmp	r4, #1
   162a8:	beq	162d4 <__assert_fail@plt+0x3c9c>
   162ac:	mov	r1, #0
   162b0:	str	r5, [r3, #160]	; 0xa0
   162b4:	mov	r0, r3
   162b8:	str	r3, [r6]
   162bc:	strb	r1, [r3, #16]
   162c0:	strb	r1, [r3, #17]
   162c4:	str	r1, [r3, #40]	; 0x28
   162c8:	str	r1, [r3, #152]	; 0x98
   162cc:	str	r1, [r3, #156]	; 0x9c
   162d0:	pop	{r4, r5, r6, pc}
   162d4:	mov	r0, #1065353216	; 0x3f800000
   162d8:	movw	r1, #17992	; 0x4648
   162dc:	movw	r2, #56920	; 0xde58
   162e0:	movt	r1, #1
   162e4:	movt	r2, #2
   162e8:	str	r0, [r3, #28]
   162ec:	stm	r3, {r1, r2}
   162f0:	b	162ac <__assert_fail@plt+0x3c74>
   162f4:	vmov.f32	s14, #112	; 0x3f800000  1.0
   162f8:	movw	r1, #17428	; 0x4414
   162fc:	movw	r2, #56928	; 0xde60
   16300:	movt	r1, #1
   16304:	movt	r2, #2
   16308:	vldr	s15, [r5, #28]
   1630c:	stm	r3, {r1, r2}
   16310:	vcmpe.f32	s15, s14
   16314:	vmrs	APSR_nzcv, fpscr
   16318:	vmovgt.f32	s15, s14
   1631c:	ble	16344 <__assert_fail@plt+0x3d0c>
   16320:	vstr	s15, [r3, #28]
   16324:	b	162ac <__assert_fail@plt+0x3c74>
   16328:	movw	r1, #17492	; 0x4454
   1632c:	movw	r2, #56924	; 0xde5c
   16330:	vmov.f32	s14, #112	; 0x3f800000  1.0
   16334:	vldr	s15, [r5, #28]
   16338:	movt	r1, #1
   1633c:	movt	r2, #2
   16340:	b	1630c <__assert_fail@plt+0x3cd4>
   16344:	vcmp.f32	s15, #0.0
   16348:	vldr	s14, [pc, #8]	; 16358 <__assert_fail@plt+0x3d20>
   1634c:	vmrs	APSR_nzcv, fpscr
   16350:	vmovmi.f32	s15, s14
   16354:	b	16320 <__assert_fail@plt+0x3ce8>
   16358:	andeq	r0, r0, r0
   1635c:	cmp	r1, #0
   16360:	push	{r4, lr}
   16364:	mov	r4, r0
   16368:	beq	16378 <__assert_fail@plt+0x3d40>
   1636c:	ldr	r3, [r0, #8]
   16370:	cmp	r3, #3
   16374:	bne	163c8 <__assert_fail@plt+0x3d90>
   16378:	ldr	r0, [r4, #156]	; 0x9c
   1637c:	cmp	r0, #0
   16380:	beq	16398 <__assert_fail@plt+0x3d60>
   16384:	ldr	r3, [r0, #8]
   16388:	cmp	r3, #3
   1638c:	bne	163a8 <__assert_fail@plt+0x3d70>
   16390:	mov	r1, #0
   16394:	bl	1635c <__assert_fail@plt+0x3d24>
   16398:	ldr	r4, [r4, #160]	; 0xa0
   1639c:	cmp	r4, #0
   163a0:	bne	16378 <__assert_fail@plt+0x3d40>
   163a4:	pop	{r4, pc}
   163a8:	movw	r0, #56960	; 0xde80
   163ac:	movw	r1, #56952	; 0xde78
   163b0:	movw	r3, #56688	; 0xdd70
   163b4:	movt	r0, #2
   163b8:	movt	r1, #2
   163bc:	movw	r2, #1243	; 0x4db
   163c0:	movt	r3, #2
   163c4:	bl	12638 <__assert_fail@plt>
   163c8:	movw	r0, #56932	; 0xde64
   163cc:	movw	r1, #56952	; 0xde78
   163d0:	movw	r3, #56688	; 0xdd70
   163d4:	movt	r0, #2
   163d8:	movt	r1, #2
   163dc:	movw	r2, #1238	; 0x4d6
   163e0:	movt	r3, #2
   163e4:	bl	12638 <__assert_fail@plt>
   163e8:	push	{r4, r5, r6, r7, r8, lr}
   163ec:	mov	r5, r0
   163f0:	ldr	r6, [r0]
   163f4:	sub	sp, sp, #8
   163f8:	mov	r7, r1
   163fc:	mov	r8, r2
   16400:	cmp	r6, #0
   16404:	movne	r4, r6
   16408:	beq	166f4 <__assert_fail@plt+0x40bc>
   1640c:	ldr	r0, [r4, #8]
   16410:	cmp	r0, #5
   16414:	ldrls	pc, [pc, r0, lsl #2]
   16418:	b	166e4 <__assert_fail@plt+0x40ac>
   1641c:			; <UNDEFINED> instruction: 0x000165b0
   16420:	andeq	r6, r1, r0, lsr #9
   16424:	andeq	r6, r1, ip, lsr #9
   16428:	ldrdeq	r6, [r1], -r4
   1642c:	strdeq	r6, [r1], -r4
   16430:	andeq	r6, r1, r4, lsr r4
   16434:	ldr	r3, [r3]
   16438:	sub	r3, r3, #2
   1643c:	cmp	r3, #1
   16440:	bls	16754 <__assert_fail@plt+0x411c>
   16444:	ldrb	r4, [r4, #33]	; 0x21
   16448:	cmp	r4, #0
   1644c:	beq	16728 <__assert_fail@plt+0x40f0>
   16450:	mov	r2, #5
   16454:	movw	r1, #57140	; 0xdf34
   16458:	mov	r0, #0
   1645c:	movt	r1, #2
   16460:	bl	120d4 <dcgettext@plt>
   16464:	ldr	r3, [r8]
   16468:	mov	r2, r0
   1646c:	mov	r0, #1
   16470:	mov	r1, #0
   16474:	bl	12224 <error@plt>
   16478:	ldr	r3, [r5]
   1647c:	mov	r4, #0
   16480:	cmp	r3, #0
   16484:	beq	16494 <__assert_fail@plt+0x3e5c>
   16488:	ldr	r2, [r3, #12]
   1648c:	cmp	r2, r7
   16490:	bgt	165e0 <__assert_fail@plt+0x3fa8>
   16494:	mov	r0, r4
   16498:	add	sp, sp, #8
   1649c:	pop	{r4, r5, r6, r7, r8, pc}
   164a0:	ldr	r3, [r4, #152]	; 0x98
   164a4:	str	r3, [r5]
   164a8:	b	16480 <__assert_fail@plt+0x3e48>
   164ac:	ldr	ip, [r4, #152]	; 0x98
   164b0:	mov	r1, #4
   164b4:	add	r3, r4, #8
   164b8:	mov	r0, r5
   164bc:	add	r2, r4, r1
   164c0:	str	ip, [r5]
   164c4:	bl	163e8 <__assert_fail@plt+0x3db0>
   164c8:	str	r0, [r4, #160]	; 0xa0
   164cc:	ldr	r3, [r5]
   164d0:	b	16480 <__assert_fail@plt+0x3e48>
   164d4:	mov	r2, #5
   164d8:	movw	r1, #57012	; 0xdeb4
   164dc:	mov	r0, #0
   164e0:	movt	r1, #2
   164e4:	bl	120d4 <dcgettext@plt>
   164e8:	ldr	r3, [r6, #4]
   164ec:	mov	r2, r0
   164f0:	b	1646c <__assert_fail@plt+0x3e34>
   164f4:	ldr	r1, [r4, #152]	; 0x98
   164f8:	cmp	r1, #0
   164fc:	beq	1650c <__assert_fail@plt+0x3ed4>
   16500:	ldrb	r3, [r1, #33]	; 0x21
   16504:	cmp	r3, #0
   16508:	beq	1653c <__assert_fail@plt+0x3f04>
   1650c:	mov	r2, #5
   16510:	movw	r1, #57220	; 0xdf84
   16514:	mov	r0, #0
   16518:	movt	r1, #2
   1651c:	bl	120d4 <dcgettext@plt>
   16520:	mov	r1, #0
   16524:	ldr	r3, [r6, #4]
   16528:	mov	r2, r0
   1652c:	mov	r0, #1
   16530:	bl	12224 <error@plt>
   16534:	ldr	r4, [r5]
   16538:	ldr	r1, [r4, #152]	; 0x98
   1653c:	ldr	r2, [r1, #8]
   16540:	str	r1, [r5]
   16544:	cmp	r2, #5
   16548:	beq	16794 <__assert_fail@plt+0x415c>
   1654c:	add	r3, r4, #8
   16550:	add	r2, r4, #4
   16554:	mov	r0, r5
   16558:	mov	r1, #0
   1655c:	bl	163e8 <__assert_fail@plt+0x3db0>
   16560:	ldr	r3, [r5]
   16564:	cmp	r3, #0
   16568:	mov	r4, r0
   1656c:	beq	1657c <__assert_fail@plt+0x3f44>
   16570:	ldr	r2, [r3, #8]
   16574:	cmp	r2, #5
   16578:	beq	165a4 <__assert_fail@plt+0x3f6c>
   1657c:	mov	r2, #5
   16580:	movw	r1, #57388	; 0xe02c
   16584:	mov	r0, #0
   16588:	movt	r1, #2
   1658c:	bl	120d4 <dcgettext@plt>
   16590:	mov	r1, #0
   16594:	mov	r2, r0
   16598:	mov	r0, #1
   1659c:	bl	12224 <error@plt>
   165a0:	ldr	r3, [r5]
   165a4:	ldr	r3, [r3, #152]	; 0x98
   165a8:	str	r3, [r5]
   165ac:	b	16480 <__assert_fail@plt+0x3e48>
   165b0:	movw	r1, #56992	; 0xdea0
   165b4:	movt	r1, #2
   165b8:	mov	r0, #0
   165bc:	mov	r2, #5
   165c0:	bl	120d4 <dcgettext@plt>
   165c4:	mov	r1, #0
   165c8:	mov	r4, r1
   165cc:	mov	r2, r0
   165d0:	mov	r0, #1
   165d4:	bl	12224 <error@plt>
   165d8:	ldr	r3, [r5]
   165dc:	b	16480 <__assert_fail@plt+0x3e48>
   165e0:	ldr	r1, [r3, #8]
   165e4:	cmp	r1, #5
   165e8:	beq	16624 <__assert_fail@plt+0x3fec>
   165ec:	cmp	r7, r2
   165f0:	bge	1661c <__assert_fail@plt+0x3fe4>
   165f4:	ldr	r2, [r3, #8]
   165f8:	cmp	r2, #5
   165fc:	ldrls	pc, [pc, r2, lsl #2]
   16600:	b	166b4 <__assert_fail@plt+0x407c>
   16604:	andeq	r6, r1, ip, lsl #13
   16608:	andeq	r6, r1, ip, lsl #13
   1660c:	andeq	r6, r1, ip, lsl #13
   16610:	andeq	r6, r1, r0, asr r6
   16614:	andeq	r6, r1, ip, lsl #13
   16618:	andeq	r6, r1, ip, lsl r6
   1661c:	cmp	r4, #0
   16620:	bne	16494 <__assert_fail@plt+0x3e5c>
   16624:	mov	r2, #5
   16628:	movw	r1, #56992	; 0xdea0
   1662c:	mov	r0, #0
   16630:	movt	r1, #2
   16634:	bl	120d4 <dcgettext@plt>
   16638:	mov	r1, #0
   1663c:	mov	r4, r1
   16640:	mov	r2, r0
   16644:	mov	r0, #1
   16648:	bl	12224 <error@plt>
   1664c:	b	16494 <__assert_fail@plt+0x3e5c>
   16650:	str	r4, [r3, #156]	; 0x9c
   16654:	add	r2, r3, #4
   16658:	ldr	r4, [r5]
   1665c:	mov	r0, r5
   16660:	add	r3, r3, #8
   16664:	ldr	ip, [r4, #152]	; 0x98
   16668:	ldrsh	r1, [r4, #12]
   1666c:	str	ip, [r5]
   16670:	bl	163e8 <__assert_fail@plt+0x3db0>
   16674:	str	r0, [r4, #160]	; 0xa0
   16678:	ldr	r3, [r5]
   1667c:	cmp	r3, #0
   16680:	beq	1661c <__assert_fail@plt+0x3fe4>
   16684:	ldr	r2, [r3, #12]
   16688:	b	165ec <__assert_fail@plt+0x3fb4>
   1668c:	mov	r2, #5
   16690:	movw	r1, #56992	; 0xdea0
   16694:	mov	r0, #0
   16698:	movt	r1, #2
   1669c:	bl	120d4 <dcgettext@plt>
   166a0:	mov	r1, #0
   166a4:	mov	r2, r0
   166a8:	mov	r0, #1
   166ac:	bl	12224 <error@plt>
   166b0:	b	16678 <__assert_fail@plt+0x4040>
   166b4:	mov	r2, #5
   166b8:	movw	r1, #57508	; 0xe0a4
   166bc:	mov	r0, #0
   166c0:	movt	r1, #2
   166c4:	bl	120d4 <dcgettext@plt>
   166c8:	ldr	r3, [r5]
   166cc:	mov	r1, #0
   166d0:	ldr	r3, [r3, #8]
   166d4:	mov	r2, r0
   166d8:	mov	r0, #1
   166dc:	bl	12224 <error@plt>
   166e0:	b	16678 <__assert_fail@plt+0x4040>
   166e4:	movw	r1, #57472	; 0xe080
   166e8:	mov	r0, #0
   166ec:	movt	r1, #2
   166f0:	b	165bc <__assert_fail@plt+0x3f84>
   166f4:	mov	r2, #5
   166f8:	movw	r1, #56992	; 0xdea0
   166fc:	mov	r0, r6
   16700:	movt	r1, #2
   16704:	str	r3, [sp, #4]
   16708:	bl	120d4 <dcgettext@plt>
   1670c:	mov	r1, r6
   16710:	mov	r2, r0
   16714:	mov	r0, #1
   16718:	bl	12224 <error@plt>
   1671c:	ldr	r4, [r5]
   16720:	ldr	r3, [sp, #4]
   16724:	b	1640c <__assert_fail@plt+0x3dd4>
   16728:	mov	r2, #5
   1672c:	movw	r1, #57176	; 0xdf58
   16730:	mov	r0, r4
   16734:	movt	r1, #2
   16738:	bl	120d4 <dcgettext@plt>
   1673c:	mov	r1, r4
   16740:	mov	r2, r0
   16744:	mov	r0, #1
   16748:	bl	12224 <error@plt>
   1674c:	ldr	r3, [r5]
   16750:	b	16480 <__assert_fail@plt+0x3e48>
   16754:	ldrb	r6, [r6, #33]	; 0x21
   16758:	cmp	r6, #0
   1675c:	bne	16444 <__assert_fail@plt+0x3e0c>
   16760:	mov	r2, #5
   16764:	movw	r1, #57096	; 0xdf08
   16768:	mov	r0, r6
   1676c:	movt	r1, #2
   16770:	bl	120d4 <dcgettext@plt>
   16774:	ldr	r3, [r8]
   16778:	mov	r1, r6
   1677c:	mov	r4, r6
   16780:	mov	r2, r0
   16784:	mov	r0, #1
   16788:	bl	12224 <error@plt>
   1678c:	ldr	r3, [r5]
   16790:	b	16480 <__assert_fail@plt+0x3e48>
   16794:	movw	r1, #57332	; 0xdff4
   16798:	mov	r0, #0
   1679c:	movt	r1, #2
   167a0:	bl	120d4 <dcgettext@plt>
   167a4:	mov	r1, #0
   167a8:	mov	r2, r0
   167ac:	mov	r0, #1
   167b0:	bl	12224 <error@plt>
   167b4:	b	1654c <__assert_fail@plt+0x3f14>
   167b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167bc:	movw	r7, #21904	; 0x5590
   167c0:	movt	r7, #4
   167c4:	sub	sp, sp, #24
   167c8:	subs	r6, r0, #0
   167cc:	ldr	r3, [r7]
   167d0:	str	r3, [sp, #20]
   167d4:	beq	16884 <__assert_fail@plt+0x424c>
   167d8:	ldr	r0, [r6, #160]	; 0xa0
   167dc:	bl	167b8 <__assert_fail@plt+0x4180>
   167e0:	ldr	r0, [r6, #156]	; 0x9c
   167e4:	bl	167b8 <__assert_fail@plt+0x4180>
   167e8:	ldrb	r3, [r6, #18]
   167ec:	cmp	r3, #0
   167f0:	movne	r8, #3
   167f4:	beq	1689c <__assert_fail@plt+0x4264>
   167f8:	ldr	r3, [r6]
   167fc:	movw	r2, #18672	; 0x48f0
   16800:	movt	r2, #1
   16804:	cmp	r3, r2
   16808:	beq	168c0 <__assert_fail@plt+0x4288>
   1680c:	movw	r2, #18676	; 0x48f4
   16810:	movt	r2, #1
   16814:	cmp	r3, r2
   16818:	beq	168c0 <__assert_fail@plt+0x4288>
   1681c:	movw	r2, #44120	; 0xac58
   16820:	movt	r2, #1
   16824:	cmp	r3, r2
   16828:	ldreq	r3, [r6, #24]
   1682c:	beq	16878 <__assert_fail@plt+0x4240>
   16830:	movw	sl, #22072	; 0x5638
   16834:	movt	sl, #4
   16838:	ldr	r2, [sl]
   1683c:	cmp	r2, #0
   16840:	beq	168d8 <__assert_fail@plt+0x42a0>
   16844:	add	r0, sp, #24
   16848:	movw	r2, #25088	; 0x6200
   1684c:	movw	r1, #21100	; 0x526c
   16850:	movt	r2, #1
   16854:	str	r3, [r0, #-12]!
   16858:	movt	r1, #4
   1685c:	str	r2, [sp]
   16860:	mov	r3, #8
   16864:	mov	r2, #59	; 0x3b
   16868:	bl	123c8 <bsearch@plt>
   1686c:	subs	r4, r0, #0
   16870:	beq	1695c <__assert_fail@plt+0x4324>
   16874:	ldr	r3, [r4, #4]
   16878:	cmp	r3, r8
   1687c:	bhi	168d0 <__assert_fail@plt+0x4298>
   16880:	str	r8, [r6, #24]
   16884:	ldr	r2, [sp, #20]
   16888:	ldr	r3, [r7]
   1688c:	cmp	r2, r3
   16890:	bne	169a4 <__assert_fail@plt+0x436c>
   16894:	add	sp, sp, #24
   16898:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1689c:	ldrb	r3, [r6, #20]
   168a0:	cmp	r3, #0
   168a4:	movne	r8, #1
   168a8:	bne	167f8 <__assert_fail@plt+0x41c0>
   168ac:	ldrb	r8, [r6, #19]
   168b0:	cmp	r8, #0
   168b4:	movne	r8, #2
   168b8:	moveq	r8, #0
   168bc:	b	167f8 <__assert_fail@plt+0x41c0>
   168c0:	ldrb	r3, [r6, #40]	; 0x28
   168c4:	cmp	r3, #0
   168c8:	movne	r3, #7
   168cc:	moveq	r3, #8
   168d0:	mov	r8, r3
   168d4:	b	16880 <__assert_fail@plt+0x4248>
   168d8:	movw	r0, #21100	; 0x526c
   168dc:	movw	r3, #25088	; 0x6200
   168e0:	movt	r0, #4
   168e4:	movt	r3, #1
   168e8:	mov	r1, #59	; 0x3b
   168ec:	mov	r2, #8
   168f0:	bl	1253c <qsort@plt>
   168f4:	ldr	r4, [pc, #172]	; 169a8 <__assert_fail@plt+0x4370>
   168f8:	add	r9, r4, #464	; 0x1d0
   168fc:	sub	r5, r4, #8
   16900:	mov	r0, r4
   16904:	mov	r1, r5
   16908:	bl	16200 <__assert_fail@plt+0x3bc8>
   1690c:	cmp	r0, #0
   16910:	blt	16944 <__assert_fail@plt+0x430c>
   16914:	mov	r0, r5
   16918:	mov	r1, r4
   1691c:	bl	16200 <__assert_fail@plt+0x3bc8>
   16920:	cmp	r0, #0
   16924:	bgt	16988 <__assert_fail@plt+0x4350>
   16928:	add	r4, r4, #8
   1692c:	cmp	r4, r9
   16930:	bne	168fc <__assert_fail@plt+0x42c4>
   16934:	mov	r2, #1
   16938:	ldr	r3, [r6]
   1693c:	str	r2, [sl]
   16940:	b	16844 <__assert_fail@plt+0x420c>
   16944:	movw	r2, #57672	; 0xe148
   16948:	mov	r0, #1
   1694c:	movt	r2, #2
   16950:	mov	r1, #0
   16954:	bl	12224 <error@plt>
   16958:	b	16934 <__assert_fail@plt+0x42fc>
   1695c:	mov	r2, #5
   16960:	movw	r1, #57560	; 0xe0d8
   16964:	movt	r1, #2
   16968:	bl	120d4 <dcgettext@plt>
   1696c:	ldr	r3, [r6, #4]
   16970:	mov	r1, r4
   16974:	mov	r2, r0
   16978:	mov	r0, r4
   1697c:	bl	12224 <error@plt>
   16980:	mov	r3, #10
   16984:	b	16878 <__assert_fail@plt+0x4240>
   16988:	movw	r0, #57548	; 0xe0cc
   1698c:	movw	r1, #56952	; 0xde78
   16990:	movt	r0, #2
   16994:	movt	r1, #2
   16998:	mov	r2, #1020	; 0x3fc
   1699c:	ldr	r3, [pc, #8]	; 169ac <__assert_fail@plt+0x4374>
   169a0:	bl	12638 <__assert_fail@plt>
   169a4:	bl	120e0 <__stack_chk_fail@plt>
   169a8:	andeq	r5, r4, r4, ror r2
   169ac:	andeq	sp, r2, r4, lsl #27
   169b0:	push	{r4, r5, r6, r7, r8, lr}
   169b4:	movw	r5, #22072	; 0x5638
   169b8:	movt	r5, #4
   169bc:	cmp	r1, #0
   169c0:	mov	r7, r0
   169c4:	ldr	r3, [r5, #4]
   169c8:	movne	r6, #16
   169cc:	moveq	r6, #0
   169d0:	cmp	r3, #0
   169d4:	beq	16a20 <__assert_fail@plt+0x43e8>
   169d8:	mov	r4, #0
   169dc:	mov	r8, r5
   169e0:	b	169f0 <__assert_fail@plt+0x43b8>
   169e4:	ldr	r3, [r8, #4]
   169e8:	cmp	r3, r4
   169ec:	bls	16a18 <__assert_fail@plt+0x43e0>
   169f0:	ldr	r3, [r5, #8]
   169f4:	mov	r0, r7
   169f8:	mov	r2, r6
   169fc:	ldr	r1, [r3, r4, lsl #2]
   16a00:	add	r4, r4, #1
   16a04:	bl	12248 <fnmatch@plt>
   16a08:	cmp	r0, #0
   16a0c:	bne	169e4 <__assert_fail@plt+0x43ac>
   16a10:	mov	r0, #1
   16a14:	pop	{r4, r5, r6, r7, r8, pc}
   16a18:	mov	r0, #0
   16a1c:	pop	{r4, r5, r6, r7, r8, pc}
   16a20:	mov	r2, r6
   16a24:	movw	r1, #528	; 0x210
   16a28:	movt	r1, #3
   16a2c:	bl	12248 <fnmatch@plt>
   16a30:	rsbs	r0, r0, #1
   16a34:	movcc	r0, #0
   16a38:	pop	{r4, r5, r6, r7, r8, pc}
   16a3c:	ldr	ip, [r1, #36]	; 0x24
   16a40:	mov	r3, r0
   16a44:	push	{lr}		; (str lr, [sp, #-4]!)
   16a48:	cmp	ip, #0
   16a4c:	sub	sp, sp, #12
   16a50:	beq	16a74 <__assert_fail@plt+0x443c>
   16a54:	ldr	r3, [r1, #4]
   16a58:	movw	r2, #57708	; 0xe16c
   16a5c:	str	ip, [sp]
   16a60:	movt	r2, #2
   16a64:	mov	r1, #1
   16a68:	bl	12428 <__fprintf_chk@plt>
   16a6c:	add	sp, sp, #12
   16a70:	pop	{pc}		; (ldr pc, [sp], #4)
   16a74:	ldr	r0, [r1, #4]
   16a78:	mov	r1, r3
   16a7c:	add	sp, sp, #12
   16a80:	pop	{lr}		; (ldr lr, [sp], #4)
   16a84:	b	125a8 <fputs@plt>
   16a88:	movw	r3, #22072	; 0x5638
   16a8c:	movt	r3, #4
   16a90:	ldr	r0, [r3, #12]
   16a94:	bx	lr
   16a98:	push	{r4, lr}
   16a9c:	subs	r4, r0, #0
   16aa0:	beq	16c90 <__assert_fail@plt+0x4658>
   16aa4:	ldr	r0, [r4, #160]	; 0xa0
   16aa8:	cmp	r0, #0
   16aac:	beq	16ab4 <__assert_fail@plt+0x447c>
   16ab0:	bl	16a98 <__assert_fail@plt+0x4460>
   16ab4:	ldr	r0, [r4, #156]	; 0x9c
   16ab8:	cmp	r0, #0
   16abc:	beq	16ac4 <__assert_fail@plt+0x448c>
   16ac0:	bl	16a98 <__assert_fail@plt+0x4460>
   16ac4:	ldr	r3, [r4, #8]
   16ac8:	cmp	r3, #5
   16acc:	beq	16c74 <__assert_fail@plt+0x463c>
   16ad0:	cmp	r3, #4
   16ad4:	beq	16c58 <__assert_fail@plt+0x4620>
   16ad8:	cmp	r3, #3
   16adc:	ldrls	pc, [pc, r3, lsl #2]
   16ae0:	b	16bf0 <__assert_fail@plt+0x45b8>
   16ae4:	andeq	r6, r1, r4, ror #22
   16ae8:	andeq	r6, r1, r4, lsl #23
   16aec:			; <UNDEFINED> instruction: 0x00016bb8
   16af0:	strdeq	r6, [r1], -r4
   16af4:	ldr	r2, [r4]
   16af8:	movw	r3, #17428	; 0x4414
   16afc:	movt	r3, #1
   16b00:	cmp	r2, r3
   16b04:	beq	16c28 <__assert_fail@plt+0x45f0>
   16b08:	movw	r3, #17992	; 0x4648
   16b0c:	movt	r3, #1
   16b10:	cmp	r2, r3
   16b14:	beq	16c50 <__assert_fail@plt+0x4618>
   16b18:	movw	r3, #17492	; 0x4454
   16b1c:	movt	r3, #1
   16b20:	cmp	r2, r3
   16b24:	bne	16d38 <__assert_fail@plt+0x4700>
   16b28:	ldr	r3, [r4, #160]	; 0xa0
   16b2c:	cmp	r3, #0
   16b30:	vldrne	s0, [r3, #28]
   16b34:	ldr	r3, [r4, #156]	; 0x9c
   16b38:	vmoveq.f32	s0, #112	; 0x3f800000  1.0
   16b3c:	cmp	r3, #0
   16b40:	vldrne	s15, [r3, #28]
   16b44:	vmoveq.f32	s15, #112	; 0x3f800000  1.0
   16b48:	vadd.f32	s15, s0, s15
   16b4c:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16b50:	vcmpe.f32	s15, s0
   16b54:	vmrs	APSR_nzcv, fpscr
   16b58:	ble	16c0c <__assert_fail@plt+0x45d4>
   16b5c:	vstr	s0, [r4, #28]
   16b60:	pop	{r4, pc}
   16b64:	ldr	r3, [r4, #160]	; 0xa0
   16b68:	cmp	r3, #0
   16b6c:	bne	16d1c <__assert_fail@plt+0x46e4>
   16b70:	ldr	r3, [r4, #156]	; 0x9c
   16b74:	cmp	r3, #0
   16b78:	bne	16d00 <__assert_fail@plt+0x46c8>
   16b7c:	vldr	s0, [r4, #28]
   16b80:	pop	{r4, pc}
   16b84:	ldr	r3, [r4, #160]	; 0xa0
   16b88:	cmp	r3, #0
   16b8c:	bne	16cac <__assert_fail@plt+0x4674>
   16b90:	ldr	r3, [r4, #156]	; 0x9c
   16b94:	cmp	r3, #0
   16b98:	beq	16b7c <__assert_fail@plt+0x4544>
   16b9c:	movw	r0, #57820	; 0xe1dc
   16ba0:	movw	r1, #56952	; 0xde78
   16ba4:	movt	r0, #2
   16ba8:	movt	r1, #2
   16bac:	movw	r2, #1183	; 0x49f
   16bb0:	ldr	r3, [pc, #416]	; 16d58 <__assert_fail@plt+0x4720>
   16bb4:	bl	12638 <__assert_fail@plt>
   16bb8:	ldr	r2, [r4]
   16bbc:	movw	r3, #19652	; 0x4cc4
   16bc0:	movt	r3, #1
   16bc4:	cmp	r2, r3
   16bc8:	bne	16ce4 <__assert_fail@plt+0x46ac>
   16bcc:	ldr	r3, [r4, #156]	; 0x9c
   16bd0:	cmp	r3, #0
   16bd4:	bne	16cc8 <__assert_fail@plt+0x4690>
   16bd8:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16bdc:	ldr	r3, [r4, #160]	; 0xa0
   16be0:	vldr	s15, [r3, #28]
   16be4:	vsub.f32	s0, s0, s15
   16be8:	vstr	s0, [r4, #28]
   16bec:	pop	{r4, pc}
   16bf0:	movw	r0, #55804	; 0xd9fc
   16bf4:	movw	r1, #56952	; 0xde78
   16bf8:	movt	r0, #2
   16bfc:	movt	r1, #2
   16c00:	movw	r2, #1224	; 0x4c8
   16c04:	ldr	r3, [pc, #332]	; 16d58 <__assert_fail@plt+0x4720>
   16c08:	bl	12638 <__assert_fail@plt>
   16c0c:	vcmpe.f32	s15, #0.0
   16c10:	vmrs	APSR_nzcv, fpscr
   16c14:	bmi	16c20 <__assert_fail@plt+0x45e8>
   16c18:	vmov.f32	s0, s15
   16c1c:	b	16b5c <__assert_fail@plt+0x4524>
   16c20:	vldr	s0, [pc, #300]	; 16d54 <__assert_fail@plt+0x471c>
   16c24:	b	16b5c <__assert_fail@plt+0x4524>
   16c28:	ldr	r3, [r4, #160]	; 0xa0
   16c2c:	cmp	r3, #0
   16c30:	vldrne	s0, [r3, #28]
   16c34:	ldr	r3, [r4, #156]	; 0x9c
   16c38:	vmoveq.f32	s0, #112	; 0x3f800000  1.0
   16c3c:	cmp	r3, #0
   16c40:	vldrne	s15, [r3, #28]
   16c44:	vmoveq.f32	s15, #112	; 0x3f800000  1.0
   16c48:	vmul.f32	s15, s0, s15
   16c4c:	b	16b4c <__assert_fail@plt+0x4514>
   16c50:	vmov.f32	s15, #112	; 0x3f800000  1.0
   16c54:	b	16c18 <__assert_fail@plt+0x45e0>
   16c58:	movw	r0, #57764	; 0xe1a4
   16c5c:	movw	r1, #56952	; 0xde78
   16c60:	movt	r0, #2
   16c64:	movt	r1, #2
   16c68:	movw	r2, #1172	; 0x494
   16c6c:	ldr	r3, [pc, #228]	; 16d58 <__assert_fail@plt+0x4720>
   16c70:	bl	12638 <__assert_fail@plt>
   16c74:	movw	r0, #57736	; 0xe188
   16c78:	movw	r1, #56952	; 0xde78
   16c7c:	movt	r0, #2
   16c80:	movt	r1, #2
   16c84:	movw	r2, #1171	; 0x493
   16c88:	ldr	r3, [pc, #200]	; 16d58 <__assert_fail@plt+0x4720>
   16c8c:	bl	12638 <__assert_fail@plt>
   16c90:	movw	r0, #57716	; 0xe174
   16c94:	movw	r1, #56952	; 0xde78
   16c98:	movt	r0, #2
   16c9c:	movt	r1, #2
   16ca0:	movw	r2, #1164	; 0x48c
   16ca4:	ldr	r3, [pc, #172]	; 16d58 <__assert_fail@plt+0x4720>
   16ca8:	bl	12638 <__assert_fail@plt>
   16cac:	movw	r0, #57788	; 0xe1bc
   16cb0:	movw	r1, #56952	; 0xde78
   16cb4:	movt	r0, #2
   16cb8:	movt	r1, #2
   16cbc:	movw	r2, #1182	; 0x49e
   16cc0:	ldr	r3, [pc, #144]	; 16d58 <__assert_fail@plt+0x4720>
   16cc4:	bl	12638 <__assert_fail@plt>
   16cc8:	movw	r0, #57820	; 0xe1dc
   16ccc:	movw	r1, #56952	; 0xde78
   16cd0:	movt	r0, #2
   16cd4:	movt	r1, #2
   16cd8:	movw	r2, #1189	; 0x4a5
   16cdc:	ldr	r3, [pc, #116]	; 16d58 <__assert_fail@plt+0x4720>
   16ce0:	bl	12638 <__assert_fail@plt>
   16ce4:	movw	r0, #57848	; 0xe1f8
   16ce8:	movw	r1, #56952	; 0xde78
   16cec:	movt	r0, #2
   16cf0:	movt	r1, #2
   16cf4:	movw	r2, #1188	; 0x4a4
   16cf8:	ldr	r3, [pc, #88]	; 16d58 <__assert_fail@plt+0x4720>
   16cfc:	bl	12638 <__assert_fail@plt>
   16d00:	movw	r0, #57820	; 0xe1dc
   16d04:	movw	r1, #56952	; 0xde78
   16d08:	movt	r0, #2
   16d0c:	movt	r1, #2
   16d10:	movw	r2, #1178	; 0x49a
   16d14:	ldr	r3, [pc, #60]	; 16d58 <__assert_fail@plt+0x4720>
   16d18:	bl	12638 <__assert_fail@plt>
   16d1c:	movw	r0, #57788	; 0xe1bc
   16d20:	movw	r1, #56952	; 0xde78
   16d24:	movt	r0, #2
   16d28:	movt	r1, #2
   16d2c:	movw	r2, #1177	; 0x499
   16d30:	ldr	r3, [pc, #32]	; 16d58 <__assert_fail@plt+0x4720>
   16d34:	bl	12638 <__assert_fail@plt>
   16d38:	movw	r0, #55804	; 0xd9fc
   16d3c:	movw	r1, #56952	; 0xde78
   16d40:	movt	r0, #2
   16d44:	movt	r1, #2
   16d48:	movw	r2, #1212	; 0x4bc
   16d4c:	ldr	r3, [pc, #4]	; 16d58 <__assert_fail@plt+0x4720>
   16d50:	bl	12638 <__assert_fail@plt>
   16d54:	andeq	r0, r0, r0
   16d58:	muleq	r2, r4, sp
   16d5c:	push	{r3, r4, r5, lr}
   16d60:	mov	r5, r0
   16d64:	ldr	r3, [r0]
   16d68:	cmp	r3, #0
   16d6c:	beq	16e38 <__assert_fail@plt+0x4800>
   16d70:	cmp	r3, #2
   16d74:	beq	16e54 <__assert_fail@plt+0x481c>
   16d78:	movw	r4, #22072	; 0x5638
   16d7c:	movt	r4, #4
   16d80:	mov	r0, #176	; 0xb0
   16d84:	ldr	r3, [r4, #16]
   16d88:	cmp	r3, #0
   16d8c:	beq	16e24 <__assert_fail@plt+0x47ec>
   16d90:	bl	29604 <__assert_fail@plt+0x16fcc>
   16d94:	ldr	r1, [r4, #20]
   16d98:	mov	r3, r0
   16d9c:	str	r0, [r4, #20]
   16da0:	str	r0, [r1, #152]	; 0x98
   16da4:	movw	ip, #25384	; 0x6328
   16da8:	movt	ip, #4
   16dac:	mov	r2, #0
   16db0:	mov	r4, #1065353216	; 0x3f800000
   16db4:	ldrb	r0, [ip, #16]
   16db8:	movw	r1, #57956	; 0xe264
   16dbc:	mov	ip, #1
   16dc0:	movt	r1, #2
   16dc4:	str	r5, [r3, #172]	; 0xac
   16dc8:	str	r1, [r3, #36]	; 0x24
   16dcc:	mov	r1, #10
   16dd0:	strb	r0, [r3, #32]
   16dd4:	mov	r0, r3
   16dd8:	str	r2, [r3]
   16ddc:	str	r2, [r3, #4]
   16de0:	str	r2, [r3, #8]
   16de4:	str	r2, [r3, #12]
   16de8:	str	r4, [r3, #28]
   16dec:	strb	r2, [r3, #16]
   16df0:	strb	r2, [r3, #17]
   16df4:	strb	r2, [r3, #20]
   16df8:	str	r2, [r3, #40]	; 0x28
   16dfc:	str	r2, [r3, #152]	; 0x98
   16e00:	str	r2, [r3, #156]	; 0x9c
   16e04:	str	r2, [r3, #160]	; 0xa0
   16e08:	strb	r2, [r3, #33]	; 0x21
   16e0c:	str	r2, [r3, #168]	; 0xa8
   16e10:	str	r2, [r3, #164]	; 0xa4
   16e14:	strb	ip, [r3, #18]
   16e18:	strb	ip, [r3, #19]
   16e1c:	str	r1, [r3, #24]
   16e20:	pop	{r3, r4, r5, pc}
   16e24:	bl	29604 <__assert_fail@plt+0x16fcc>
   16e28:	mov	r3, r0
   16e2c:	str	r0, [r4, #16]
   16e30:	str	r0, [r4, #20]
   16e34:	b	16da4 <__assert_fail@plt+0x476c>
   16e38:	movw	r0, #57888	; 0xe220
   16e3c:	movw	r1, #56952	; 0xde78
   16e40:	movt	r0, #2
   16e44:	movt	r1, #2
   16e48:	movw	r2, #1492	; 0x5d4
   16e4c:	ldr	r3, [pc, #28]	; 16e70 <__assert_fail@plt+0x4838>
   16e50:	bl	12638 <__assert_fail@plt>
   16e54:	movw	r0, #57916	; 0xe23c
   16e58:	movw	r1, #56952	; 0xde78
   16e5c:	movt	r0, #2
   16e60:	movt	r1, #2
   16e64:	movw	r2, #1493	; 0x5d5
   16e68:	ldr	r3, [pc]	; 16e70 <__assert_fail@plt+0x4838>
   16e6c:	bl	12638 <__assert_fail@plt>
   16e70:	andeq	sp, r2, ip, lsr #27
   16e74:	push	{r3, lr}
   16e78:	bl	16d5c <__assert_fail@plt+0x4724>
   16e7c:	cmp	r0, #0
   16e80:	movne	r3, #0
   16e84:	strne	r3, [r0, #36]	; 0x24
   16e88:	pop	{r3, pc}
   16e8c:	push	{r4, r5, r6, lr}
   16e90:	movw	r4, #22072	; 0x5638
   16e94:	movt	r4, #4
   16e98:	mov	r5, r0
   16e9c:	mov	r6, r1
   16ea0:	ldr	r0, [r4, #24]
   16ea4:	cmp	r0, #0
   16ea8:	beq	16f58 <__assert_fail@plt+0x4920>
   16eac:	ldr	r3, [r4, #20]
   16eb0:	cmp	r3, #0
   16eb4:	beq	16ed0 <__assert_fail@plt+0x4898>
   16eb8:	ldr	r3, [r3, #8]
   16ebc:	cmp	r3, #1
   16ec0:	beq	16f0c <__assert_fail@plt+0x48d4>
   16ec4:	bcc	16ee4 <__assert_fail@plt+0x48ac>
   16ec8:	cmp	r3, #5
   16ecc:	beq	16f0c <__assert_fail@plt+0x48d4>
   16ed0:	mov	r0, r5
   16ed4:	bl	16d5c <__assert_fail@plt+0x4724>
   16ed8:	str	r6, [r0, #36]	; 0x24
   16edc:	str	r5, [r0, #172]	; 0xac
   16ee0:	pop	{r4, r5, r6, pc}
   16ee4:	mov	r2, #5
   16ee8:	movw	r1, #58020	; 0xe2a4
   16eec:	mov	r0, #0
   16ef0:	movt	r1, #2
   16ef4:	bl	120d4 <dcgettext@plt>
   16ef8:	mov	r1, #0
   16efc:	mov	r2, r0
   16f00:	mov	r0, #1
   16f04:	bl	12224 <error@plt>
   16f08:	b	16ed0 <__assert_fail@plt+0x4898>
   16f0c:	bl	16d5c <__assert_fail@plt+0x4724>
   16f10:	movw	r1, #17428	; 0x4414
   16f14:	movw	r2, #56928	; 0xde60
   16f18:	movt	r1, #1
   16f1c:	movt	r2, #2
   16f20:	str	r1, [r0]
   16f24:	mov	r1, #3
   16f28:	str	r2, [r0, #4]
   16f2c:	mov	r2, #0
   16f30:	str	r1, [r0, #8]
   16f34:	str	r1, [r0, #12]
   16f38:	strb	r2, [r0, #18]
   16f3c:	strb	r2, [r0, #19]
   16f40:	strb	r2, [r0, #20]
   16f44:	str	r2, [r0, #36]	; 0x24
   16f48:	str	r2, [r0, #40]	; 0x28
   16f4c:	strb	r2, [r0, #16]
   16f50:	strb	r2, [r0, #17]
   16f54:	b	16ed0 <__assert_fail@plt+0x4898>
   16f58:	movw	r0, #57988	; 0xe284
   16f5c:	movt	r0, #2
   16f60:	bl	1f2dc <__assert_fail@plt+0xcca4>
   16f64:	cmp	r0, #0
   16f68:	str	r0, [r4, #24]
   16f6c:	bne	16eac <__assert_fail@plt+0x4874>
   16f70:	movw	r0, #57992	; 0xe288
   16f74:	movw	r1, #56952	; 0xde78
   16f78:	movt	r0, #2
   16f7c:	movt	r1, #2
   16f80:	movw	r2, #1547	; 0x60b
   16f84:	ldr	r3, [pc]	; 16f8c <__assert_fail@plt+0x4954>
   16f88:	bl	12638 <__assert_fail@plt>
   16f8c:			; <UNDEFINED> instruction: 0x0002ddbc
   16f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f94:	subs	r6, r1, #0
   16f98:	sub	sp, sp, #20
   16f9c:	mov	r4, r0
   16fa0:	mov	r5, r2
   16fa4:	beq	172a8 <__assert_fail@plt+0x4c70>
   16fa8:	movw	sl, #56688	; 0xdd70
   16fac:	ldr	r9, [pc, #920]	; 1734c <__assert_fail@plt+0x4d14>
   16fb0:	movt	sl, #2
   16fb4:	add	r8, sl, #96	; 0x60
   16fb8:	add	r7, sl, #152	; 0x98
   16fbc:	cmp	r5, #0
   16fc0:	ble	16fec <__assert_fail@plt+0x49b4>
   16fc4:	mov	fp, #0
   16fc8:	add	fp, fp, #1
   16fcc:	movw	r0, #58068	; 0xe2d4
   16fd0:	mov	r1, #1
   16fd4:	movt	r0, #2
   16fd8:	mov	r2, #4
   16fdc:	mov	r3, r4
   16fe0:	bl	121a0 <fwrite@plt>
   16fe4:	cmp	fp, r5
   16fe8:	bne	16fc8 <__assert_fail@plt+0x4990>
   16fec:	mov	r1, #1
   16ff0:	mov	r2, #6
   16ff4:	mov	r3, r4
   16ff8:	movw	r0, #58224	; 0xe370
   16ffc:	movt	r0, #2
   17000:	bl	121a0 <fwrite@plt>
   17004:	mov	r0, r4
   17008:	mov	r1, r6
   1700c:	bl	16a3c <__assert_fail@plt+0x4404>
   17010:	ldrh	r0, [r6, #8]
   17014:	cmp	r0, #0
   17018:	beq	17304 <__assert_fail@plt+0x4ccc>
   1701c:	sxth	r0, r0
   17020:	mov	r3, #0
   17024:	b	17030 <__assert_fail@plt+0x49f8>
   17028:	cmp	r0, r2
   1702c:	beq	17044 <__assert_fail@plt+0x4a0c>
   17030:	add	r3, r3, #1
   17034:	lsl	r1, r3, #3
   17038:	ldrsh	r2, [r8, r1]
   1703c:	cmn	r2, #1
   17040:	bne	17028 <__assert_fail@plt+0x49f0>
   17044:	ldrh	ip, [r6, #12]
   17048:	add	r1, sl, r1
   1704c:	cmp	ip, #0
   17050:	ldr	r3, [r1, #100]	; 0x64
   17054:	beq	1730c <__assert_fail@plt+0x4cd4>
   17058:	sxth	ip, ip
   1705c:	mov	r2, #0
   17060:	b	1706c <__assert_fail@plt+0x4a34>
   17064:	cmp	ip, r1
   17068:	beq	17080 <__assert_fail@plt+0x4a48>
   1706c:	add	r2, r2, #1
   17070:	lsl	r0, r2, #3
   17074:	ldrsh	r1, [r7, r0]
   17078:	cmn	r1, #1
   1707c:	bne	17064 <__assert_fail@plt+0x4a2c>
   17080:	add	r1, sl, r0
   17084:	movw	r2, #58076	; 0xe2dc
   17088:	mov	r0, r4
   1708c:	movt	r2, #2
   17090:	ldr	ip, [r1, #156]	; 0x9c
   17094:	mov	r1, #1
   17098:	str	ip, [sp]
   1709c:	bl	12428 <__fprintf_chk@plt>
   170a0:	ldr	r0, [r6, #24]
   170a4:	mov	r3, #0
   170a8:	ldr	r1, [r9, r3, lsl #3]
   170ac:	movw	r2, #21100	; 0x526c
   170b0:	lsl	ip, r3, #3
   170b4:	movt	r2, #4
   170b8:	cmp	r0, r1
   170bc:	add	r3, r3, #1
   170c0:	beq	172b0 <__assert_fail@plt+0x4c78>
   170c4:	cmp	r3, #11
   170c8:	bne	170a8 <__assert_fail@plt+0x4a70>
   170cc:	movw	r3, #55548	; 0xd8fc
   170d0:	movt	r3, #2
   170d4:	vldr	s14, [r6, #28]
   170d8:	vcvt.f64.f32	d7, s14
   170dc:	ldrb	r0, [r6, #16]
   170e0:	movw	r2, #54180	; 0xd3a4
   170e4:	movt	r2, #2
   170e8:	movw	r1, #58064	; 0xe2d0
   170ec:	cmp	r0, #0
   170f0:	movt	r1, #2
   170f4:	mov	r0, r4
   170f8:	movne	r1, r2
   170fc:	movw	r2, #58096	; 0xe2f0
   17100:	str	r1, [sp, #8]
   17104:	movt	r2, #2
   17108:	mov	r1, #1
   1710c:	vstr	d7, [sp]
   17110:	bl	12428 <__fprintf_chk@plt>
   17114:	ldrb	r3, [r6, #18]
   17118:	cmp	r3, #0
   1711c:	bne	17138 <__assert_fail@plt+0x4b00>
   17120:	ldrb	r3, [r6, #19]
   17124:	cmp	r3, #0
   17128:	bne	17138 <__assert_fail@plt+0x4b00>
   1712c:	ldrb	r3, [r6, #20]
   17130:	cmp	r3, #0
   17134:	beq	171d4 <__assert_fail@plt+0x4b9c>
   17138:	mov	r3, r4
   1713c:	movw	r0, #58136	; 0xe318
   17140:	mov	r1, #1
   17144:	movt	r0, #2
   17148:	mov	r2, #6
   1714c:	bl	121a0 <fwrite@plt>
   17150:	ldrb	r3, [r6, #18]
   17154:	cmp	r3, #0
   17158:	bne	17180 <__assert_fail@plt+0x4b48>
   1715c:	ldrb	r3, [r6, #20]
   17160:	cmp	r3, #0
   17164:	bne	172bc <__assert_fail@plt+0x4c84>
   17168:	ldrb	r3, [r6, #19]
   1716c:	cmp	r3, #0
   17170:	beq	171d4 <__assert_fail@plt+0x4b9c>
   17174:	movw	r3, #54180	; 0xd3a4
   17178:	movt	r3, #2
   1717c:	b	171c0 <__assert_fail@plt+0x4b88>
   17180:	mov	r3, r4
   17184:	movw	r0, #58144	; 0xe320
   17188:	mov	r1, #1
   1718c:	movt	r0, #2
   17190:	mov	r2, #4
   17194:	bl	121a0 <fwrite@plt>
   17198:	ldrb	r3, [r6, #20]
   1719c:	cmp	r3, #0
   171a0:	movwne	r3, #56920	; 0xde58
   171a4:	movtne	r3, #2
   171a8:	bne	172c4 <__assert_fail@plt+0x4c8c>
   171ac:	ldrb	r3, [r6, #19]
   171b0:	cmp	r3, #0
   171b4:	movwne	r3, #56920	; 0xde58
   171b8:	movtne	r3, #2
   171bc:	beq	171d4 <__assert_fail@plt+0x4b9c>
   171c0:	movw	r2, #58160	; 0xe330
   171c4:	mov	r0, r4
   171c8:	movt	r2, #2
   171cc:	mov	r1, #1
   171d0:	bl	12428 <__fprintf_chk@plt>
   171d4:	mov	r0, #10
   171d8:	mov	r1, r4
   171dc:	bl	124dc <fputc@plt>
   171e0:	cmp	r5, #0
   171e4:	movgt	fp, #0
   171e8:	ble	17210 <__assert_fail@plt+0x4bd8>
   171ec:	add	fp, fp, #1
   171f0:	movw	r0, #58068	; 0xe2d4
   171f4:	mov	r1, #1
   171f8:	movt	r0, #2
   171fc:	mov	r2, #4
   17200:	mov	r3, r4
   17204:	bl	121a0 <fwrite@plt>
   17208:	cmp	fp, r5
   1720c:	bne	171ec <__assert_fail@plt+0x4bb4>
   17210:	ldr	r3, [r6, #156]	; 0x9c
   17214:	cmp	r3, #0
   17218:	beq	172dc <__assert_fail@plt+0x4ca4>
   1721c:	mov	r1, #1
   17220:	mov	r2, #6
   17224:	movw	r0, #58184	; 0xe348
   17228:	mov	r3, r4
   1722c:	movt	r0, #2
   17230:	bl	121a0 <fwrite@plt>
   17234:	mov	r0, r4
   17238:	ldr	r1, [r6, #156]	; 0x9c
   1723c:	add	r2, r5, #1
   17240:	bl	16f90 <__assert_fail@plt+0x4958>
   17244:	cmp	r5, #0
   17248:	movgt	fp, #0
   1724c:	ble	17274 <__assert_fail@plt+0x4c3c>
   17250:	add	fp, fp, #1
   17254:	movw	r0, #58068	; 0xe2d4
   17258:	mov	r1, #1
   1725c:	movt	r0, #2
   17260:	mov	r2, #4
   17264:	mov	r3, r4
   17268:	bl	121a0 <fwrite@plt>
   1726c:	cmp	fp, r5
   17270:	bne	17250 <__assert_fail@plt+0x4c18>
   17274:	ldr	r3, [r6, #160]	; 0xa0
   17278:	cmp	r3, #0
   1727c:	beq	17314 <__assert_fail@plt+0x4cdc>
   17280:	mov	r1, #1
   17284:	movw	r0, #58204	; 0xe35c
   17288:	mov	r2, #7
   1728c:	movt	r0, #2
   17290:	mov	r3, r4
   17294:	add	r5, r5, r1
   17298:	bl	121a0 <fwrite@plt>
   1729c:	ldr	r6, [r6, #160]	; 0xa0
   172a0:	cmp	r6, #0
   172a4:	bne	16fbc <__assert_fail@plt+0x4984>
   172a8:	add	sp, sp, #20
   172ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172b0:	add	r2, r2, ip
   172b4:	ldr	r3, [r2, #476]	; 0x1dc
   172b8:	b	170d4 <__assert_fail@plt+0x4a9c>
   172bc:	movw	r3, #54180	; 0xd3a4
   172c0:	movt	r3, #2
   172c4:	movw	r2, #58152	; 0xe328
   172c8:	mov	r0, r4
   172cc:	movt	r2, #2
   172d0:	mov	r1, #1
   172d4:	bl	12428 <__fprintf_chk@plt>
   172d8:	b	171ac <__assert_fail@plt+0x4b74>
   172dc:	ldr	r3, [r6, #160]	; 0xa0
   172e0:	cmp	r3, #0
   172e4:	beq	17334 <__assert_fail@plt+0x4cfc>
   172e8:	movw	r0, #58192	; 0xe350
   172ec:	mov	r1, #1
   172f0:	mov	r2, #9
   172f4:	mov	r3, r4
   172f8:	movt	r0, #2
   172fc:	bl	121a0 <fwrite@plt>
   17300:	b	17244 <__assert_fail@plt+0x4c0c>
   17304:	mov	r1, r0
   17308:	b	17044 <__assert_fail@plt+0x4a0c>
   1730c:	mov	r0, ip
   17310:	b	17080 <__assert_fail@plt+0x4a48>
   17314:	movw	r0, #58212	; 0xe364
   17318:	movt	r0, #2
   1731c:	mov	r3, r4
   17320:	mov	r1, #1
   17324:	mov	r2, #10
   17328:	add	sp, sp, #20
   1732c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17330:	b	121a0 <fwrite@plt>
   17334:	movw	r0, #58168	; 0xe338
   17338:	mov	r3, r4
   1733c:	mov	r1, #1
   17340:	movt	r0, #2
   17344:	mov	r2, #13
   17348:	b	17328 <__assert_fail@plt+0x4cf0>
   1734c:	andeq	r5, r4, r4, asr #8
   17350:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17354:	mov	r6, r0
   17358:	ldr	r0, [r0]
   1735c:	mov	r7, r1
   17360:	cmp	r0, #0
   17364:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17368:	movw	r8, #25384	; 0x6328
   1736c:	movt	r8, #4
   17370:	ldr	r3, [r8, #44]	; 0x2c
   17374:	tst	r3, #8
   17378:	bne	174b4 <__assert_fail@plt+0x4e7c>
   1737c:	bl	16a98 <__assert_fail@plt+0x4460>
   17380:	ldr	ip, [r6]
   17384:	mov	r4, #0
   17388:	cmp	ip, #0
   1738c:	mov	r5, r4
   17390:	mov	sl, r4
   17394:	beq	1741c <__assert_fail@plt+0x4de4>
   17398:	ldr	r9, [ip, #156]	; 0x9c
   1739c:	cmp	r5, #0
   173a0:	str	r9, [r6]
   173a4:	str	sl, [ip, #156]	; 0x9c
   173a8:	beq	17400 <__assert_fail@plt+0x4dc8>
   173ac:	ldr	fp, [ip, #160]	; 0xa0
   173b0:	mov	r3, r5
   173b4:	ldr	r0, [fp, #24]
   173b8:	ldr	r2, [r3, #160]	; 0xa0
   173bc:	ldr	r1, [r3, #12]
   173c0:	ldr	lr, [r2, #24]
   173c4:	cmp	lr, r0
   173c8:	bne	174a0 <__assert_fail@plt+0x4e68>
   173cc:	vldr	s14, [r2, #28]
   173d0:	vldr	s15, [fp, #28]
   173d4:	vcmp.f32	s14, s15
   173d8:	vmrs	APSR_nzcv, fpscr
   173dc:	beq	17488 <__assert_fail@plt+0x4e50>
   173e0:	cmp	r1, #2
   173e4:	vcmpe.f32	s14, s15
   173e8:	bne	17480 <__assert_fail@plt+0x4e48>
   173ec:	vmrs	APSR_nzcv, fpscr
   173f0:	bmi	17488 <__assert_fail@plt+0x4e50>
   173f4:	ldr	r3, [r3, #156]	; 0x9c
   173f8:	cmp	r3, #0
   173fc:	bne	173b8 <__assert_fail@plt+0x4d80>
   17400:	cmp	r4, #0
   17404:	str	r5, [ip, #156]	; 0x9c
   17408:	movne	r5, ip
   1740c:	beq	174a8 <__assert_fail@plt+0x4e70>
   17410:	mov	ip, r9
   17414:	cmp	ip, #0
   17418:	bne	17398 <__assert_fail@plt+0x4d60>
   1741c:	ldr	r3, [r8, #44]	; 0x2c
   17420:	tst	r3, #8
   17424:	beq	1745c <__assert_fail@plt+0x4e24>
   17428:	movw	r8, #21912	; 0x5598
   1742c:	movt	r8, #4
   17430:	mov	r1, #1
   17434:	movw	r2, #58232	; 0xe378
   17438:	movw	r3, #58268	; 0xe39c
   1743c:	movt	r2, #2
   17440:	ldr	r0, [r8]
   17444:	movt	r3, #2
   17448:	bl	12428 <__fprintf_chk@plt>
   1744c:	ldr	r0, [r8]
   17450:	mov	r1, r5
   17454:	mov	r2, #2
   17458:	bl	16f90 <__assert_fail@plt+0x4958>
   1745c:	mov	r0, r5
   17460:	bl	16a98 <__assert_fail@plt+0x4460>
   17464:	ldr	r2, [r7]
   17468:	mov	r3, #0
   1746c:	str	r2, [r4, #156]	; 0x9c
   17470:	str	r5, [r7]
   17474:	str	r3, [r6, #4]
   17478:	str	r3, [r6]
   1747c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17480:	vmrs	APSR_nzcv, fpscr
   17484:	bmi	173f4 <__assert_fail@plt+0x4dbc>
   17488:	ldr	r2, [r3, #156]	; 0x9c
   1748c:	cmp	r2, #0
   17490:	str	r2, [ip, #156]	; 0x9c
   17494:	moveq	r4, ip
   17498:	str	ip, [r3, #156]	; 0x9c
   1749c:	b	17410 <__assert_fail@plt+0x4dd8>
   174a0:	bcc	173f4 <__assert_fail@plt+0x4dbc>
   174a4:	b	17488 <__assert_fail@plt+0x4e50>
   174a8:	mov	r4, ip
   174ac:	mov	r5, ip
   174b0:	b	17410 <__assert_fail@plt+0x4dd8>
   174b4:	movw	r4, #21912	; 0x5598
   174b8:	movt	r4, #4
   174bc:	mov	r1, #1
   174c0:	movw	r2, #58232	; 0xe378
   174c4:	movw	r3, #58240	; 0xe380
   174c8:	movt	r2, #2
   174cc:	movt	r3, #2
   174d0:	ldr	r0, [r4]
   174d4:	bl	12428 <__fprintf_chk@plt>
   174d8:	ldr	r0, [r4]
   174dc:	ldr	r1, [r6]
   174e0:	mov	r2, #2
   174e4:	bl	16f90 <__assert_fail@plt+0x4958>
   174e8:	ldr	r0, [r6]
   174ec:	b	1737c <__assert_fail@plt+0x4d44>
   174f0:	push	{r3, r4, r5, r6, r7, lr}
   174f4:	movw	r5, #22072	; 0x5638
   174f8:	movt	r5, #4
   174fc:	mov	r4, r2
   17500:	mov	r6, r3
   17504:	mov	r7, r0
   17508:	mov	r0, r1
   1750c:	mov	r1, r3
   17510:	movw	r3, #29520	; 0x7350
   17514:	movt	r3, #1
   17518:	str	r3, [r5, #28]
   1751c:	bl	17350 <__assert_fail@plt+0x4d18>
   17520:	mov	r0, r4
   17524:	ldr	r3, [r5, #28]
   17528:	mov	r1, r6
   1752c:	mov	r4, #0
   17530:	blx	r3
   17534:	add	r0, r7, r4
   17538:	ldr	r2, [r5, #28]
   1753c:	mov	r1, r6
   17540:	add	r4, r4, #8
   17544:	blx	r2
   17548:	cmp	r4, #88	; 0x58
   1754c:	bne	17534 <__assert_fail@plt+0x4efc>
   17550:	pop	{r3, r4, r5, r6, r7, pc}
   17554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17558:	movw	r8, #21904	; 0x5590
   1755c:	movt	r8, #4
   17560:	sub	sp, sp, #132	; 0x84
   17564:	subs	r5, r0, #0
   17568:	mov	r3, #0
   1756c:	ldr	r2, [r8]
   17570:	str	r3, [sp, #20]
   17574:	str	r3, [sp, #24]
   17578:	str	r2, [sp, #124]	; 0x7c
   1757c:	str	r3, [sp, #28]
   17580:	str	r3, [sp, #32]
   17584:	beq	1793c <__assert_fail@plt+0x5304>
   17588:	ldr	sl, [r5]
   1758c:	cmp	sl, r3
   17590:	beq	17944 <__assert_fail@plt+0x530c>
   17594:	add	r6, sp, #36	; 0x24
   17598:	mov	r2, r3
   1759c:	add	r1, r6, r3
   175a0:	str	r2, [r1, #4]
   175a4:	str	r2, [r6, r3]
   175a8:	add	r3, r3, #8
   175ac:	cmp	r3, #88	; 0x58
   175b0:	bne	1759c <__assert_fail@plt+0x4f64>
   175b4:	ldr	r0, [sl, #156]	; 0x9c
   175b8:	cmp	r0, #0
   175bc:	bne	175cc <__assert_fail@plt+0x4f94>
   175c0:	b	1794c <__assert_fail@plt+0x5314>
   175c4:	mov	sl, r0
   175c8:	mov	r0, r3
   175cc:	ldr	r3, [r0, #156]	; 0x9c
   175d0:	ldr	r1, [sl, #12]
   175d4:	cmp	r3, #0
   175d8:	bne	175c4 <__assert_fail@plt+0x4f8c>
   175dc:	add	r2, sl, #156	; 0x9c
   175e0:	ldr	r3, [r0, #8]
   175e4:	cmp	r3, #3
   175e8:	beq	175f0 <__assert_fail@plt+0x4fb8>
   175ec:	bl	16254 <__assert_fail@plt+0x3c1c>
   175f0:	movw	r9, #25384	; 0x6328
   175f4:	movt	r9, #4
   175f8:	ldr	r3, [r9, #44]	; 0x2c
   175fc:	tst	r3, #9
   17600:	bne	178a8 <__assert_fail@plt+0x5270>
   17604:	ldr	r4, [r5]
   17608:	cmp	r4, #0
   1760c:	moveq	r7, r4
   17610:	beq	17624 <__assert_fail@plt+0x4fec>
   17614:	ldr	r3, [r4, #8]
   17618:	cmp	r3, #3
   1761c:	ldreq	r7, [r4, #12]
   17620:	movne	r7, #0
   17624:	cmp	r4, #0
   17628:	movw	ip, #19592	; 0x4c88
   1762c:	mov	sl, #0
   17630:	movt	ip, #1
   17634:	str	ip, [sp, #4]
   17638:	movw	ip, #25384	; 0x6328
   1763c:	movt	ip, #4
   17640:	str	ip, [sp, #12]
   17644:	movw	ip, #21912	; 0x5598
   17648:	movt	ip, #4
   1764c:	str	ip, [sp, #8]
   17650:	beq	176b4 <__assert_fail@plt+0x507c>
   17654:	ldr	r3, [r4, #8]
   17658:	cmp	r3, #3
   1765c:	beq	177f4 <__assert_fail@plt+0x51bc>
   17660:	ldr	fp, [r4, #160]	; 0xa0
   17664:	ldr	r0, [fp, #8]
   17668:	ldr	r2, [fp]
   1766c:	cmp	r0, #3
   17670:	ldrls	pc, [pc, r0, lsl #2]
   17674:	b	17818 <__assert_fail@plt+0x51e0>
   17678:	andeq	r7, r1, ip, lsl r7
   1767c:	andeq	r7, r1, ip, lsl r7
   17680:	andeq	r7, r1, r4, ror #13
   17684:	andeq	r7, r1, r8, lsl #13
   17688:	add	r0, r4, #160	; 0xa0
   1768c:	bl	17554 <__assert_fail@plt+0x4f1c>
   17690:	strb	r0, [fp, #16]
   17694:	ldr	fp, [r4, #160]	; 0xa0
   17698:	ldrb	r3, [fp, #16]
   1769c:	cmp	r3, #0
   176a0:	bne	17700 <__assert_fail@plt+0x50c8>
   176a4:	add	r5, r4, #156	; 0x9c
   176a8:	ldr	r4, [r5]
   176ac:	cmp	r4, #0
   176b0:	bne	17654 <__assert_fail@plt+0x501c>
   176b4:	mov	r0, r6
   176b8:	add	r1, sp, #28
   176bc:	add	r2, sp, #20
   176c0:	mov	r3, r5
   176c4:	bl	174f0 <__assert_fail@plt+0x4eb8>
   176c8:	mov	r0, sl
   176cc:	ldr	r2, [sp, #124]	; 0x7c
   176d0:	ldr	r3, [r8]
   176d4:	cmp	r2, r3
   176d8:	bne	17a24 <__assert_fail@plt+0x53ec>
   176dc:	add	sp, sp, #132	; 0x84
   176e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e4:	add	r0, fp, #160	; 0xa0
   176e8:	bl	17554 <__assert_fail@plt+0x4f1c>
   176ec:	strb	r0, [fp, #16]
   176f0:	ldr	fp, [r4, #160]	; 0xa0
   176f4:	ldrb	r3, [fp, #16]
   176f8:	cmp	r3, #0
   176fc:	beq	176a4 <__assert_fail@plt+0x506c>
   17700:	mov	r3, r5
   17704:	mov	r0, r6
   17708:	add	r1, sp, #28
   1770c:	add	r2, sp, #20
   17710:	bl	174f0 <__assert_fail@plt+0x4eb8>
   17714:	mov	sl, #1
   17718:	b	176a4 <__assert_fail@plt+0x506c>
   1771c:	cmp	r7, #1
   17720:	beq	17698 <__assert_fail@plt+0x5060>
   17724:	ldrb	r3, [fp, #16]
   17728:	cmp	r3, #0
   1772c:	bne	17700 <__assert_fail@plt+0x50c8>
   17730:	ldr	ip, [sp, #4]
   17734:	cmp	r2, ip
   17738:	beq	177c4 <__assert_fail@plt+0x518c>
   1773c:	movw	r3, #20268	; 0x4f2c
   17740:	movt	r3, #1
   17744:	cmp	r2, r3
   17748:	beq	177c4 <__assert_fail@plt+0x518c>
   1774c:	movw	r3, #19104	; 0x4aa0
   17750:	movt	r3, #1
   17754:	cmp	r2, r3
   17758:	beq	177c4 <__assert_fail@plt+0x518c>
   1775c:	movw	r3, #19316	; 0x4b74
   17760:	movt	r3, #1
   17764:	cmp	r2, r3
   17768:	beq	177c4 <__assert_fail@plt+0x518c>
   1776c:	ldrh	r3, [r9, #68]	; 0x44
   17770:	cmp	r3, #0
   17774:	beq	1795c <__assert_fail@plt+0x5324>
   17778:	movw	r1, #17428	; 0x4414
   1777c:	movt	r1, #1
   17780:	cmp	r2, r1
   17784:	beq	17844 <__assert_fail@plt+0x520c>
   17788:	movw	r1, #19652	; 0x4cc4
   1778c:	movt	r1, #1
   17790:	cmp	r2, r1
   17794:	beq	17844 <__assert_fail@plt+0x520c>
   17798:	movw	r1, #17992	; 0x4648
   1779c:	movt	r1, #1
   177a0:	cmp	r2, r1
   177a4:	beq	17844 <__assert_fail@plt+0x520c>
   177a8:	movw	r1, #17492	; 0x4454
   177ac:	movt	r1, #1
   177b0:	cmp	r2, r1
   177b4:	beq	17844 <__assert_fail@plt+0x520c>
   177b8:	ldr	r1, [fp, #24]
   177bc:	cmp	r1, #0
   177c0:	bne	17844 <__assert_fail@plt+0x520c>
   177c4:	ldr	r3, [r9, #44]	; 0x2c
   177c8:	tst	r3, #8
   177cc:	bne	178ec <__assert_fail@plt+0x52b4>
   177d0:	ldr	r3, [r4, #156]	; 0x9c
   177d4:	str	r3, [r5]
   177d8:	ldr	r3, [sp, #28]
   177dc:	ldr	r2, [sp, #32]
   177e0:	str	r4, [sp, #28]
   177e4:	cmp	r2, #0
   177e8:	str	r3, [r4, #156]	; 0x9c
   177ec:	streq	r4, [sp, #32]
   177f0:	b	176a8 <__assert_fail@plt+0x5070>
   177f4:	ldr	r3, [r4, #12]
   177f8:	cmp	r3, r7
   177fc:	beq	17660 <__assert_fail@plt+0x5028>
   17800:	mov	r0, r4
   17804:	mov	r1, r7
   17808:	mov	r2, r5
   1780c:	bl	16254 <__assert_fail@plt+0x3c1c>
   17810:	mov	r4, r0
   17814:	b	17660 <__assert_fail@plt+0x5028>
   17818:	mov	r2, #5
   1781c:	movw	r1, #57472	; 0xe080
   17820:	mov	r0, #0
   17824:	movt	r1, #2
   17828:	bl	120d4 <dcgettext@plt>
   1782c:	mov	r1, #0
   17830:	mov	r2, r0
   17834:	mov	r0, #1
   17838:	bl	12224 <error@plt>
   1783c:	ldr	fp, [r4, #160]	; 0xa0
   17840:	b	17698 <__assert_fail@plt+0x5060>
   17844:	movw	r1, #20644	; 0x50a4
   17848:	movt	r1, #1
   1784c:	cmp	r2, r1
   17850:	beq	1796c <__assert_fail@plt+0x5334>
   17854:	cmp	r3, #1
   17858:	bls	176a4 <__assert_fail@plt+0x506c>
   1785c:	ldr	r2, [fp, #24]
   17860:	sub	r1, r2, #1
   17864:	cmp	r1, #1
   17868:	bls	178dc <__assert_fail@plt+0x52a4>
   1786c:	cmp	r3, #2
   17870:	beq	176a4 <__assert_fail@plt+0x506c>
   17874:	ldr	r1, [r9, #44]	; 0x2c
   17878:	tst	r1, #8
   1787c:	bne	17990 <__assert_fail@plt+0x5358>
   17880:	ldr	r1, [r4, #156]	; 0x9c
   17884:	add	r3, r6, r2, lsl #3
   17888:	str	r1, [r5]
   1788c:	ldr	r1, [r6, r2, lsl #3]
   17890:	str	r1, [r4, #156]	; 0x9c
   17894:	str	r4, [r6, r2, lsl #3]
   17898:	ldr	r2, [r3, #4]
   1789c:	cmp	r2, #0
   178a0:	streq	r4, [r3, #4]
   178a4:	b	176a8 <__assert_fail@plt+0x5070>
   178a8:	movw	r4, #21912	; 0x5598
   178ac:	movt	r4, #4
   178b0:	mov	r1, #1
   178b4:	mov	r2, #22
   178b8:	ldr	r3, [r4]
   178bc:	movw	r0, #58296	; 0xe3b8
   178c0:	movt	r0, #2
   178c4:	bl	121a0 <fwrite@plt>
   178c8:	ldr	r0, [r4]
   178cc:	ldr	r1, [r5]
   178d0:	mov	r2, #0
   178d4:	bl	16f90 <__assert_fail@plt+0x4958>
   178d8:	b	17604 <__assert_fail@plt+0x4fcc>
   178dc:	ldrb	r1, [fp, #18]
   178e0:	cmp	r1, #0
   178e4:	beq	17874 <__assert_fail@plt+0x523c>
   178e8:	b	1786c <__assert_fail@plt+0x5234>
   178ec:	ldr	ip, [sp, #8]
   178f0:	mov	r1, #1
   178f4:	movw	r2, #58320	; 0xe3d0
   178f8:	movt	r2, #2
   178fc:	ldr	r0, [ip]
   17900:	ldr	ip, [sp, #12]
   17904:	ldrh	r3, [ip, #68]	; 0x44
   17908:	bl	12428 <__fprintf_chk@plt>
   1790c:	ldr	ip, [sp, #8]
   17910:	ldr	r1, [r4, #160]	; 0xa0
   17914:	ldr	r0, [ip]
   17918:	bl	16a3c <__assert_fail@plt+0x4404>
   1791c:	ldr	ip, [sp, #8]
   17920:	movw	r0, #58356	; 0xe3f4
   17924:	mov	r1, #1
   17928:	mov	r2, #16
   1792c:	movt	r0, #2
   17930:	ldr	r3, [ip]
   17934:	bl	121a0 <fwrite@plt>
   17938:	b	177d0 <__assert_fail@plt+0x5198>
   1793c:	mov	r0, r5
   17940:	b	176cc <__assert_fail@plt+0x5094>
   17944:	mov	r0, sl
   17948:	b	176cc <__assert_fail@plt+0x5094>
   1794c:	mov	r0, sl
   17950:	mov	r2, r5
   17954:	mov	r1, #3
   17958:	b	175e0 <__assert_fail@plt+0x4fa8>
   1795c:	movw	r3, #20644	; 0x50a4
   17960:	movt	r3, #1
   17964:	cmp	r2, r3
   17968:	bne	176a4 <__assert_fail@plt+0x506c>
   1796c:	ldr	r3, [r4, #156]	; 0x9c
   17970:	str	r3, [r5]
   17974:	ldr	r3, [sp, #20]
   17978:	ldr	r2, [sp, #24]
   1797c:	str	r4, [sp, #20]
   17980:	cmp	r2, #0
   17984:	str	r3, [r4, #156]	; 0x9c
   17988:	streq	r4, [sp, #24]
   1798c:	b	176a8 <__assert_fail@plt+0x5070>
   17990:	ldr	ip, [sp, #8]
   17994:	mov	r1, #1
   17998:	movw	r2, #58376	; 0xe408
   1799c:	movt	r2, #2
   179a0:	ldr	r0, [ip]
   179a4:	bl	12428 <__fprintf_chk@plt>
   179a8:	ldr	ip, [sp, #8]
   179ac:	ldr	r1, [r4, #160]	; 0xa0
   179b0:	ldr	r0, [ip]
   179b4:	bl	16a3c <__assert_fail@plt+0x4404>
   179b8:	ldr	ip, [sp, #8]
   179bc:	ldr	r2, [r4, #160]	; 0xa0
   179c0:	mov	r3, #0
   179c4:	ldr	lr, [pc, #92]	; 17a28 <__assert_fail@plt+0x53f0>
   179c8:	ldr	r0, [ip]
   179cc:	ldr	ip, [r2, #24]
   179d0:	ldr	r1, [lr, r3, lsl #3]
   179d4:	movw	r2, #21100	; 0x526c
   179d8:	lsl	fp, r3, #3
   179dc:	movt	r2, #4
   179e0:	cmp	ip, r1
   179e4:	beq	17a18 <__assert_fail@plt+0x53e0>
   179e8:	add	r3, r3, #1
   179ec:	cmp	r3, #11
   179f0:	bne	179d0 <__assert_fail@plt+0x5398>
   179f4:	movw	r3, #55548	; 0xd8fc
   179f8:	movt	r3, #2
   179fc:	movw	r2, #58408	; 0xe428
   17a00:	mov	r1, #1
   17a04:	movt	r2, #2
   17a08:	bl	12428 <__fprintf_chk@plt>
   17a0c:	ldr	r3, [r4, #160]	; 0xa0
   17a10:	ldr	r2, [r3, #24]
   17a14:	b	17880 <__assert_fail@plt+0x5248>
   17a18:	add	r2, r2, fp
   17a1c:	ldr	r3, [r2, #476]	; 0x1dc
   17a20:	b	179fc <__assert_fail@plt+0x53c4>
   17a24:	bl	120e0 <__stack_chk_fail@plt>
   17a28:	andeq	r5, r4, r4, asr #8
   17a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a30:	vpush	{d8}
   17a34:	subs	r4, r0, #0
   17a38:	sub	sp, sp, #20
   17a3c:	beq	17b68 <__assert_fail@plt+0x5530>
   17a40:	movw	r6, #25384	; 0x6328
   17a44:	movt	r6, #4
   17a48:	movw	r7, #21912	; 0x5598
   17a4c:	movw	r8, #17492	; 0x4454
   17a50:	ldr	r5, [r6, #44]	; 0x2c
   17a54:	movt	r7, #4
   17a58:	movt	r8, #1
   17a5c:	and	r5, r5, #8
   17a60:	ldr	r3, [r4, #8]
   17a64:	cmp	r3, #3
   17a68:	movwne	r3, #58448	; 0xe450
   17a6c:	movtne	r3, #2
   17a70:	beq	17abc <__assert_fail@plt+0x5484>
   17a74:	cmp	r5, #0
   17a78:	beq	17aa0 <__assert_fail@plt+0x5468>
   17a7c:	mov	r1, #1
   17a80:	movw	r2, #58752	; 0xe580
   17a84:	ldr	r0, [r7]
   17a88:	movt	r2, #2
   17a8c:	bl	12428 <__fprintf_chk@plt>
   17a90:	ldr	r0, [r7]
   17a94:	mov	r1, r4
   17a98:	mov	r2, #0
   17a9c:	bl	16f90 <__assert_fail@plt+0x4958>
   17aa0:	ldr	r0, [r4, #156]	; 0x9c
   17aa4:	bl	17a2c <__assert_fail@plt+0x53f4>
   17aa8:	cmp	r0, #0
   17aac:	beq	17b58 <__assert_fail@plt+0x5520>
   17ab0:	ldr	r5, [r6, #44]	; 0x2c
   17ab4:	and	r5, r5, #8
   17ab8:	b	17a60 <__assert_fail@plt+0x5428>
   17abc:	ldr	r3, [r4, #156]	; 0x9c
   17ac0:	cmp	r3, #0
   17ac4:	beq	17b78 <__assert_fail@plt+0x5540>
   17ac8:	ldr	sl, [r4, #160]	; 0xa0
   17acc:	cmp	sl, #0
   17ad0:	beq	17b78 <__assert_fail@plt+0x5540>
   17ad4:	ldr	r9, [r3, #160]	; 0xa0
   17ad8:	cmp	r9, #0
   17adc:	beq	17c04 <__assert_fail@plt+0x55cc>
   17ae0:	mov	r0, r9
   17ae4:	bl	16184 <__assert_fail@plt+0x3b4c>
   17ae8:	cmp	r0, #0
   17aec:	movwne	r3, #58504	; 0xe488
   17af0:	movtne	r3, #2
   17af4:	bne	17a74 <__assert_fail@plt+0x543c>
   17af8:	mov	r0, sl
   17afc:	bl	16184 <__assert_fail@plt+0x3b4c>
   17b00:	cmp	r0, #0
   17b04:	movwne	r3, #58536	; 0xe4a8
   17b08:	movtne	r3, #2
   17b0c:	bne	17a74 <__assert_fail@plt+0x543c>
   17b10:	mov	r0, r9
   17b14:	bl	161c0 <__assert_fail@plt+0x3b88>
   17b18:	mov	fp, r0
   17b1c:	mov	r0, sl
   17b20:	bl	161c0 <__assert_fail@plt+0x3b88>
   17b24:	cmp	fp, r0
   17b28:	movwlt	r3, #58568	; 0xe4c8
   17b2c:	movtlt	r3, #2
   17b30:	blt	17a74 <__assert_fail@plt+0x543c>
   17b34:	beq	17b84 <__assert_fail@plt+0x554c>
   17b38:	cmp	r5, #0
   17b3c:	bne	17bd0 <__assert_fail@plt+0x5598>
   17b40:	ldr	r3, [r4, #156]	; 0x9c
   17b44:	ldr	r1, [r4, #160]	; 0xa0
   17b48:	ldr	r2, [r3, #160]	; 0xa0
   17b4c:	str	r1, [r3, #160]	; 0xa0
   17b50:	str	r2, [r4, #160]	; 0xa0
   17b54:	b	17a60 <__assert_fail@plt+0x5428>
   17b58:	ldr	r0, [r4, #160]	; 0xa0
   17b5c:	bl	17a2c <__assert_fail@plt+0x53f4>
   17b60:	cmp	r0, #0
   17b64:	bne	17ab0 <__assert_fail@plt+0x5478>
   17b68:	mov	r0, #0
   17b6c:	add	sp, sp, #20
   17b70:	vpop	{d8}
   17b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b78:	movw	r3, #58424	; 0xe438
   17b7c:	movt	r3, #2
   17b80:	b	17a74 <__assert_fail@plt+0x543c>
   17b84:	cmp	r5, #0
   17b88:	vldr	s17, [r9, #28]
   17b8c:	vldr	s16, [sl, #28]
   17b90:	bne	17c10 <__assert_fail@plt+0x55d8>
   17b94:	ldr	r2, [r4]
   17b98:	cmp	r2, r8
   17b9c:	beq	17c40 <__assert_fail@plt+0x5608>
   17ba0:	movw	r3, #17428	; 0x4414
   17ba4:	movt	r3, #1
   17ba8:	cmp	r2, r3
   17bac:	movwne	r3, #58632	; 0xe508
   17bb0:	movtne	r3, #2
   17bb4:	bne	17a74 <__assert_fail@plt+0x543c>
   17bb8:	vcmpe.f32	s17, s16
   17bbc:	vmrs	APSR_nzcv, fpscr
   17bc0:	movwpl	r3, #58584	; 0xe4d8
   17bc4:	movtpl	r3, #2
   17bc8:	bpl	17a74 <__assert_fail@plt+0x543c>
   17bcc:	b	17b38 <__assert_fail@plt+0x5500>
   17bd0:	mov	r1, #1
   17bd4:	mov	r2, #24
   17bd8:	ldr	r3, [r7]
   17bdc:	movw	r0, #58724	; 0xe564
   17be0:	movt	r0, #2
   17be4:	bl	121a0 <fwrite@plt>
   17be8:	ldr	r0, [r7]
   17bec:	mov	r1, r4
   17bf0:	mov	r2, #0
   17bf4:	bl	16f90 <__assert_fail@plt+0x4958>
   17bf8:	ldr	r5, [r6, #44]	; 0x2c
   17bfc:	and	r5, r5, #8
   17c00:	b	17b40 <__assert_fail@plt+0x5508>
   17c04:	movw	r3, #58472	; 0xe468
   17c08:	movt	r3, #2
   17c0c:	b	17a74 <__assert_fail@plt+0x543c>
   17c10:	vcvt.f64.f32	d6, s17
   17c14:	ldr	r0, [r7]
   17c18:	movw	r2, #58696	; 0xe548
   17c1c:	mov	r1, #1
   17c20:	movt	r2, #2
   17c24:	vcvt.f64.f32	d7, s16
   17c28:	vstr	d6, [sp]
   17c2c:	vstr	d7, [sp, #8]
   17c30:	bl	12428 <__fprintf_chk@plt>
   17c34:	ldr	r5, [r6, #44]	; 0x2c
   17c38:	and	r5, r5, #8
   17c3c:	b	17b94 <__assert_fail@plt+0x555c>
   17c40:	vcmpe.f32	s17, s16
   17c44:	vmrs	APSR_nzcv, fpscr
   17c48:	movwle	r3, #58652	; 0xe51c
   17c4c:	movtle	r3, #2
   17c50:	ble	17a74 <__assert_fail@plt+0x543c>
   17c54:	b	17b38 <__assert_fail@plt+0x5500>
   17c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c5c:	movw	fp, #21904	; 0x5590
   17c60:	movt	fp, #4
   17c64:	sub	sp, sp, #44	; 0x2c
   17c68:	movw	r5, #22072	; 0x5638
   17c6c:	cmp	r2, r0
   17c70:	ldr	r3, [fp]
   17c74:	movt	r5, #4
   17c78:	mov	r4, r1
   17c7c:	str	r0, [sp, #20]
   17c80:	add	r1, r1, r2, lsl #2
   17c84:	mov	r0, #0
   17c88:	str	r2, [sp, #32]
   17c8c:	str	r3, [sp, #36]	; 0x24
   17c90:	str	r1, [r5, #8]
   17c94:	str	r0, [r5, #16]
   17c98:	blt	17cc4 <__assert_fail@plt+0x568c>
   17c9c:	b	17cd8 <__assert_fail@plt+0x56a0>
   17ca0:	ldr	r2, [sp, #32]
   17ca4:	ldr	r1, [sp, #20]
   17ca8:	add	r2, r2, #1
   17cac:	ldr	r3, [r5, #4]
   17cb0:	cmp	r1, r2
   17cb4:	str	r2, [sp, #32]
   17cb8:	add	r3, r3, #1
   17cbc:	str	r3, [r5, #4]
   17cc0:	ble	17cd8 <__assert_fail@plt+0x56a0>
   17cc4:	ldr	r0, [r4, r2, lsl #2]
   17cc8:	mov	r1, #1
   17ccc:	bl	190a8 <__assert_fail@plt+0x6a70>
   17cd0:	cmp	r0, #0
   17cd4:	beq	17ca0 <__assert_fail@plt+0x5668>
   17cd8:	movw	r6, #58788	; 0xe5a4
   17cdc:	movt	r6, #2
   17ce0:	mov	r0, r6
   17ce4:	bl	1f2dc <__assert_fail@plt+0xcca4>
   17ce8:	mov	r7, r0
   17cec:	movw	r0, #57884	; 0xe21c
   17cf0:	movt	r0, #2
   17cf4:	bl	1f2dc <__assert_fail@plt+0xcca4>
   17cf8:	str	r0, [sp, #16]
   17cfc:	movw	r0, #58792	; 0xe5a8
   17d00:	movt	r0, #2
   17d04:	bl	1f2dc <__assert_fail@plt+0xcca4>
   17d08:	cmp	r7, #0
   17d0c:	str	r0, [sp, #12]
   17d10:	beq	182c8 <__assert_fail@plt+0x5c90>
   17d14:	ldr	r3, [sp, #16]
   17d18:	cmp	r3, #0
   17d1c:	beq	182ac <__assert_fail@plt+0x5c74>
   17d20:	ldr	r3, [sp, #12]
   17d24:	cmp	r3, #0
   17d28:	beq	18290 <__assert_fail@plt+0x5c58>
   17d2c:	mov	r1, r4
   17d30:	add	r2, sp, #20
   17d34:	mov	r0, r7
   17d38:	bl	1d8f4 <__assert_fail@plt+0xb2bc>
   17d3c:	ldr	r3, [r5, #16]
   17d40:	ldr	r2, [r5, #20]
   17d44:	mov	ip, #1
   17d48:	ldr	r1, [sp, #20]
   17d4c:	mov	r0, r4
   17d50:	str	r6, [r2, #4]
   17d54:	strb	ip, [r3, #33]	; 0x21
   17d58:	bl	1f2c4 <__assert_fail@plt+0xcc8c>
   17d5c:	ldr	r0, [r5, #20]
   17d60:	bl	158a8 <__assert_fail@plt+0x3270>
   17d64:	ldr	r3, [sp, #32]
   17d68:	ldr	r1, [sp, #20]
   17d6c:	cmp	r1, r3
   17d70:	ble	17ec8 <__assert_fail@plt+0x5890>
   17d74:	movw	r9, #25340	; 0x62fc
   17d78:	movw	sl, #21912	; 0x5598
   17d7c:	movt	r9, #4
   17d80:	movt	sl, #4
   17d84:	b	17df8 <__assert_fail@plt+0x57c0>
   17d88:	ldr	r3, [r4, r2, lsl #2]
   17d8c:	cmp	r3, #0
   17d90:	beq	18128 <__assert_fail@plt+0x5af0>
   17d94:	ldr	r3, [r6]
   17d98:	cmp	r3, #4
   17d9c:	bne	17da8 <__assert_fail@plt+0x5770>
   17da0:	cmp	r2, r8
   17da4:	beq	1815c <__assert_fail@plt+0x5b24>
   17da8:	mov	r2, #5
   17dac:	movw	r1, #58968	; 0xe658
   17db0:	mov	r0, #0
   17db4:	movt	r1, #2
   17db8:	bl	120d4 <dcgettext@plt>
   17dbc:	ldr	r3, [sp, #32]
   17dc0:	mov	r1, #0
   17dc4:	ldr	r3, [r4, r3, lsl #2]
   17dc8:	str	r7, [sp]
   17dcc:	mov	r2, r0
   17dd0:	mov	r0, #1
   17dd4:	bl	12224 <error@plt>
   17dd8:	ldr	r0, [r5, #20]
   17ddc:	bl	158a8 <__assert_fail@plt+0x3270>
   17de0:	ldr	r0, [r5, #16]
   17de4:	bl	158a8 <__assert_fail@plt+0x3270>
   17de8:	ldr	r3, [sp, #32]
   17dec:	ldr	r1, [sp, #20]
   17df0:	cmp	r3, r1
   17df4:	bge	17ec8 <__assert_fail@plt+0x5890>
   17df8:	mov	r2, #0
   17dfc:	ldr	r0, [r4, r3, lsl #2]
   17e00:	mov	r1, r2
   17e04:	strb	r2, [r9, #40]	; 0x28
   17e08:	bl	190a8 <__assert_fail@plt+0x6a70>
   17e0c:	subs	r6, r0, #0
   17e10:	beq	17e8c <__assert_fail@plt+0x5854>
   17e14:	ldr	r3, [sp, #32]
   17e18:	ldr	r7, [r4, r3, lsl #2]
   17e1c:	mov	r0, r7
   17e20:	bl	1f2dc <__assert_fail@plt+0xcca4>
   17e24:	subs	r6, r0, #0
   17e28:	beq	180dc <__assert_fail@plt+0x5aa4>
   17e2c:	ldr	r3, [r6]
   17e30:	add	r2, sp, #32
   17e34:	mov	r0, r6
   17e38:	mov	r1, r4
   17e3c:	cmp	r3, #4
   17e40:	ldrne	r3, [sp, #32]
   17e44:	ldreq	r8, [sp, #32]
   17e48:	addne	r3, r3, #1
   17e4c:	strne	r3, [sp, #32]
   17e50:	movne	r8, r3
   17e54:	ldr	r3, [r6, #8]
   17e58:	blx	r3
   17e5c:	ldr	r2, [sp, #32]
   17e60:	subs	ip, r0, #0
   17e64:	beq	17d88 <__assert_fail@plt+0x5750>
   17e68:	ldr	r3, [r5, #20]
   17e6c:	cmp	r2, r8
   17e70:	moveq	r2, #0
   17e74:	str	r7, [r3, #4]
   17e78:	movne	r0, r3
   17e7c:	ldrne	r2, [r4, r8, lsl #2]
   17e80:	moveq	r0, r3
   17e84:	str	r2, [r3, #36]	; 0x24
   17e88:	b	17ddc <__assert_fail@plt+0x57a4>
   17e8c:	mov	r2, #5
   17e90:	movw	r1, #58884	; 0xe604
   17e94:	movt	r1, #2
   17e98:	bl	120d4 <dcgettext@plt>
   17e9c:	ldr	r3, [sp, #32]
   17ea0:	mov	r1, r6
   17ea4:	ldr	r3, [r4, r3, lsl #2]
   17ea8:	mov	r2, r0
   17eac:	mov	r0, r6
   17eb0:	bl	12224 <error@plt>
   17eb4:	mov	r2, r6
   17eb8:	ldr	r0, [sl]
   17ebc:	mov	r1, #1
   17ec0:	bl	186d8 <__assert_fail@plt+0x60a0>
   17ec4:	b	17e14 <__assert_fail@plt+0x57dc>
   17ec8:	ldr	r2, [r5, #20]
   17ecc:	mov	r0, r4
   17ed0:	ldr	r3, [r5, #16]
   17ed4:	movw	r6, #22072	; 0x5638
   17ed8:	bl	1f2d8 <__assert_fail@plt+0xcca0>
   17edc:	ldr	r2, [r5, #16]
   17ee0:	movt	r6, #4
   17ee4:	ldr	r3, [r2, #152]	; 0x98
   17ee8:	cmp	r3, #0
   17eec:	beq	181f4 <__assert_fail@plt+0x5bbc>
   17ef0:	mov	r0, r3
   17ef4:	bl	19068 <__assert_fail@plt+0x6a30>
   17ef8:	cmp	r0, #0
   17efc:	beq	18104 <__assert_fail@plt+0x5acc>
   17f00:	mov	r1, r4
   17f04:	add	r2, sp, #20
   17f08:	ldr	r0, [sp, #16]
   17f0c:	mov	r7, #1
   17f10:	bl	1d6bc <__assert_fail@plt+0xb084>
   17f14:	ldr	r3, [r6, #20]
   17f18:	movw	r2, #57884	; 0xe21c
   17f1c:	movt	r2, #2
   17f20:	mov	r0, r3
   17f24:	str	r2, [r3, #4]
   17f28:	strb	r7, [r3, #33]	; 0x21
   17f2c:	bl	158a8 <__assert_fail@plt+0x3270>
   17f30:	mov	r1, r4
   17f34:	add	r2, sp, #20
   17f38:	ldr	r0, [sp, #12]
   17f3c:	bl	1c998 <__assert_fail@plt+0xa360>
   17f40:	ldr	r3, [r6, #20]
   17f44:	movw	r2, #59028	; 0xe694
   17f48:	movt	r2, #2
   17f4c:	mov	r0, r3
   17f50:	strb	r7, [r3, #33]	; 0x21
   17f54:	str	r2, [r3, #4]
   17f58:	bl	158a8 <__assert_fail@plt+0x3270>
   17f5c:	ldr	r0, [r6, #16]
   17f60:	bl	158a8 <__assert_fail@plt+0x3270>
   17f64:	movw	r4, #25384	; 0x6328
   17f68:	movt	r4, #4
   17f6c:	ldr	r3, [r4, #44]	; 0x2c
   17f70:	tst	r3, #9
   17f74:	bne	181c4 <__assert_fail@plt+0x5b8c>
   17f78:	ldr	r0, [r5, #16]
   17f7c:	bl	1f17c <__assert_fail@plt+0xcb44>
   17f80:	ldr	r0, [r5, #16]
   17f84:	bl	158a8 <__assert_fail@plt+0x3270>
   17f88:	ldr	ip, [r5, #16]
   17f8c:	add	r0, sp, #40	; 0x28
   17f90:	mov	r3, #8
   17f94:	mov	r1, #0
   17f98:	mov	r2, #4
   17f9c:	str	ip, [r0, #-12]!
   17fa0:	bl	163e8 <__assert_fail@plt+0x3db0>
   17fa4:	str	r0, [r5, #12]
   17fa8:	bl	16a98 <__assert_fail@plt+0x4460>
   17fac:	ldr	r3, [sp, #28]
   17fb0:	cmp	r3, #0
   17fb4:	beq	18004 <__assert_fail@plt+0x59cc>
   17fb8:	ldr	r1, [r3]
   17fbc:	movw	r2, #17852	; 0x45bc
   17fc0:	movt	r2, #1
   17fc4:	cmp	r1, r2
   17fc8:	beq	18264 <__assert_fail@plt+0x5c2c>
   17fcc:	ldr	r6, [r3, #4]
   17fd0:	cmp	r6, #0
   17fd4:	beq	1823c <__assert_fail@plt+0x5c04>
   17fd8:	mov	r2, #5
   17fdc:	movw	r1, #59056	; 0xe6b0
   17fe0:	mov	r0, #0
   17fe4:	movt	r1, #2
   17fe8:	bl	120d4 <dcgettext@plt>
   17fec:	ldr	r3, [sp, #28]
   17ff0:	mov	r1, #0
   17ff4:	ldr	r3, [r3, #4]
   17ff8:	mov	r2, r0
   17ffc:	mov	r0, #1
   18000:	bl	12224 <error@plt>
   18004:	ldr	r3, [r4, #44]	; 0x2c
   18008:	tst	r3, #9
   1800c:	bne	18190 <__assert_fail@plt+0x5b58>
   18010:	ldr	r0, [r5, #12]
   18014:	movw	r6, #22072	; 0x5638
   18018:	movt	r6, #4
   1801c:	bl	167b8 <__assert_fail@plt+0x4180>
   18020:	add	r0, r6, #12
   18024:	bl	17554 <__assert_fail@plt+0x4f1c>
   18028:	ldr	r7, [r5, #12]
   1802c:	mov	r1, #1
   18030:	mov	r0, r7
   18034:	bl	1635c <__assert_fail@plt+0x3d24>
   18038:	mov	r0, r7
   1803c:	bl	17a2c <__assert_fail@plt+0x53f4>
   18040:	ldr	r5, [r5, #12]
   18044:	mov	r1, #1
   18048:	mov	r0, r5
   1804c:	bl	1635c <__assert_fail@plt+0x3d24>
   18050:	ldr	r3, [r4, #44]	; 0x2c
   18054:	tst	r3, #9
   18058:	moveq	r0, r5
   1805c:	beq	180c4 <__assert_fail@plt+0x5a8c>
   18060:	movw	r4, #21912	; 0x5598
   18064:	movt	r4, #4
   18068:	mov	r1, #1
   1806c:	mov	r2, #21
   18070:	ldr	r3, [r4]
   18074:	movw	r0, #59128	; 0xe6f8
   18078:	movt	r0, #2
   1807c:	bl	121a0 <fwrite@plt>
   18080:	ldr	r0, [r4]
   18084:	ldr	r1, [r6, #12]
   18088:	mov	r2, #0
   1808c:	bl	16f90 <__assert_fail@plt+0x4958>
   18090:	ldr	r3, [r4]
   18094:	mov	r2, #24
   18098:	mov	r1, #1
   1809c:	movw	r0, #59152	; 0xe710
   180a0:	movt	r0, #2
   180a4:	bl	121a0 <fwrite@plt>
   180a8:	ldr	r0, [r4]
   180ac:	ldr	r1, [r6, #12]
   180b0:	bl	15644 <__assert_fail@plt+0x300c>
   180b4:	ldr	r1, [r4]
   180b8:	mov	r0, #10
   180bc:	bl	124dc <fputc@plt>
   180c0:	ldr	r0, [r6, #12]
   180c4:	ldr	r2, [sp, #36]	; 0x24
   180c8:	ldr	r3, [fp]
   180cc:	cmp	r2, r3
   180d0:	bne	1828c <__assert_fail@plt+0x5c54>
   180d4:	add	sp, sp, #44	; 0x2c
   180d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180dc:	mov	r2, #5
   180e0:	movw	r1, #58920	; 0xe628
   180e4:	movt	r1, #2
   180e8:	bl	120d4 <dcgettext@plt>
   180ec:	mov	r1, r6
   180f0:	mov	r3, r7
   180f4:	mov	r2, r0
   180f8:	mov	r0, #1
   180fc:	bl	12224 <error@plt>
   18100:	b	17e2c <__assert_fail@plt+0x57f4>
   18104:	ldr	r2, [r6, #16]
   18108:	ldr	r3, [r2, #152]	; 0x98
   1810c:	str	r2, [sp, #28]
   18110:	mov	r0, r3
   18114:	str	r3, [r6, #16]
   18118:	bl	158a8 <__assert_fail@plt+0x3270>
   1811c:	ldr	r0, [sp, #28]
   18120:	bl	12020 <free@plt>
   18124:	b	17f64 <__assert_fail@plt+0x592c>
   18128:	mov	r2, #5
   1812c:	movw	r1, #59000	; 0xe678
   18130:	movt	r1, #2
   18134:	str	r3, [sp, #8]
   18138:	bl	120d4 <dcgettext@plt>
   1813c:	ldr	r3, [sp, #8]
   18140:	mov	r1, r3
   18144:	mov	r3, r7
   18148:	mov	r2, r0
   1814c:	mov	r0, #1
   18150:	bl	12224 <error@plt>
   18154:	ldr	r0, [r5, #20]
   18158:	b	17ddc <__assert_fail@plt+0x57a4>
   1815c:	mov	r2, #5
   18160:	movw	r1, #58944	; 0xe640
   18164:	movt	r1, #2
   18168:	str	ip, [sp, #8]
   1816c:	bl	120d4 <dcgettext@plt>
   18170:	ldr	ip, [sp, #8]
   18174:	mov	r3, r7
   18178:	mov	r1, ip
   1817c:	mov	r2, r0
   18180:	mov	r0, #1
   18184:	bl	12224 <error@plt>
   18188:	ldr	r0, [r5, #20]
   1818c:	b	17ddc <__assert_fail@plt+0x57a4>
   18190:	movw	r6, #21912	; 0x5598
   18194:	movt	r6, #4
   18198:	mov	r1, #1
   1819c:	mov	r2, #11
   181a0:	ldr	r3, [r6]
   181a4:	movw	r0, #59116	; 0xe6ec
   181a8:	movt	r0, #2
   181ac:	bl	121a0 <fwrite@plt>
   181b0:	ldr	r0, [r6]
   181b4:	ldr	r1, [r5, #12]
   181b8:	mov	r2, #0
   181bc:	bl	16f90 <__assert_fail@plt+0x4958>
   181c0:	b	18010 <__assert_fail@plt+0x59d8>
   181c4:	movw	r6, #21912	; 0x5598
   181c8:	movt	r6, #4
   181cc:	mov	r1, #1
   181d0:	mov	r2, #16
   181d4:	ldr	r3, [r6]
   181d8:	movw	r0, #59036	; 0xe69c
   181dc:	movt	r0, #2
   181e0:	bl	121a0 <fwrite@plt>
   181e4:	ldr	r0, [r6]
   181e8:	ldr	r1, [r5, #16]
   181ec:	bl	15554 <__assert_fail@plt+0x2f1c>
   181f0:	b	17f78 <__assert_fail@plt+0x5940>
   181f4:	mov	r0, r2
   181f8:	str	r3, [r6, #20]
   181fc:	str	r3, [r6, #16]
   18200:	str	r2, [sp, #28]
   18204:	bl	12020 <free@plt>
   18208:	mov	r1, r4
   1820c:	add	r2, sp, #20
   18210:	ldr	r0, [sp, #12]
   18214:	bl	1c998 <__assert_fail@plt+0xa360>
   18218:	ldr	r2, [r6, #20]
   1821c:	movw	r3, #59028	; 0xe694
   18220:	movt	r3, #2
   18224:	mov	r0, r2
   18228:	str	r3, [r2, #4]
   1822c:	bl	158a8 <__assert_fail@plt+0x3270>
   18230:	ldr	r0, [r6, #16]
   18234:	bl	158a8 <__assert_fail@plt+0x3270>
   18238:	b	17f64 <__assert_fail@plt+0x592c>
   1823c:	mov	r0, r6
   18240:	mov	r2, #5
   18244:	movw	r1, #59088	; 0xe6d0
   18248:	movt	r1, #2
   1824c:	bl	120d4 <dcgettext@plt>
   18250:	mov	r1, r6
   18254:	mov	r2, r0
   18258:	mov	r0, #1
   1825c:	bl	12224 <error@plt>
   18260:	b	18004 <__assert_fail@plt+0x59cc>
   18264:	mov	r2, #5
   18268:	movw	r1, #57196	; 0xdf6c
   1826c:	mov	r0, #0
   18270:	movt	r1, #2
   18274:	bl	120d4 <dcgettext@plt>
   18278:	mov	r1, #0
   1827c:	mov	r2, r0
   18280:	mov	r0, #1
   18284:	bl	12224 <error@plt>
   18288:	b	18004 <__assert_fail@plt+0x59cc>
   1828c:	bl	120e0 <__stack_chk_fail@plt>
   18290:	movw	r0, #58856	; 0xe5e8
   18294:	movw	r1, #56952	; 0xde78
   18298:	movt	r0, #2
   1829c:	movt	r1, #2
   182a0:	mov	r2, #1280	; 0x500
   182a4:	ldr	r3, [pc, #56]	; 182e4 <__assert_fail@plt+0x5cac>
   182a8:	bl	12638 <__assert_fail@plt>
   182ac:	movw	r0, #58828	; 0xe5cc
   182b0:	movw	r1, #56952	; 0xde78
   182b4:	movt	r0, #2
   182b8:	movt	r1, #2
   182bc:	movw	r2, #1279	; 0x4ff
   182c0:	ldr	r3, [pc, #28]	; 182e4 <__assert_fail@plt+0x5cac>
   182c4:	bl	12638 <__assert_fail@plt>
   182c8:	movw	r0, #58800	; 0xe5b0
   182cc:	movw	r1, #56952	; 0xde78
   182d0:	movt	r0, #2
   182d4:	movt	r1, #2
   182d8:	movw	r2, #1278	; 0x4fe
   182dc:	ldr	r3, [pc]	; 182e4 <__assert_fail@plt+0x5cac>
   182e0:	bl	12638 <__assert_fail@plt>
   182e4:	andeq	sp, r2, r0, asr #28
   182e8:	push	{r3, r4, r5, lr}
   182ec:	mov	r4, r0
   182f0:	mov	r5, r1
   182f4:	ldr	r0, [r4, #156]	; 0x9c
   182f8:	mov	r1, r5
   182fc:	cmp	r0, #0
   18300:	beq	18308 <__assert_fail@plt+0x5cd0>
   18304:	bl	182e8 <__assert_fail@plt+0x5cb0>
   18308:	mov	r0, r4
   1830c:	blx	r5
   18310:	ldr	r4, [r4, #160]	; 0xa0
   18314:	cmp	r4, #0
   18318:	bne	182f4 <__assert_fail@plt+0x5cbc>
   1831c:	pop	{r3, r4, r5, pc}
   18320:	ldr	r3, [r0]
   18324:	movw	r2, #18784	; 0x4960
   18328:	movt	r2, #1
   1832c:	cmp	r3, r2
   18330:	beq	18364 <__assert_fail@plt+0x5d2c>
   18334:	movw	r2, #44120	; 0xac58
   18338:	movt	r2, #1
   1833c:	cmp	r3, r2
   18340:	beq	18364 <__assert_fail@plt+0x5d2c>
   18344:	movw	r2, #18700	; 0x490c
   18348:	movt	r2, #1
   1834c:	cmp	r3, r2
   18350:	beq	18364 <__assert_fail@plt+0x5d2c>
   18354:	movw	r2, #18836	; 0x4994
   18358:	movt	r2, #1
   1835c:	cmp	r3, r2
   18360:	bxne	lr
   18364:	mov	r3, #0
   18368:	str	r3, [r0, #44]	; 0x2c
   1836c:	bx	lr
   18370:	push	{r3, r4, r5, r6, r7, lr}
   18374:	subs	r5, r2, #0
   18378:	movw	r4, #25340	; 0x62fc
   1837c:	mov	r7, r0
   18380:	movt	r4, #4
   18384:	mov	r6, r1
   18388:	beq	18398 <__assert_fail@plt+0x5d60>
   1838c:	ldrb	r2, [r4, #40]	; 0x28
   18390:	cmp	r2, #0
   18394:	bne	183e8 <__assert_fail@plt+0x5db0>
   18398:	movw	ip, #25384	; 0x6328
   1839c:	movt	ip, #4
   183a0:	mov	r2, r3
   183a4:	mov	r0, #0
   183a8:	ldr	r1, [ip, #72]	; 0x48
   183ac:	bl	28cec <__assert_fail@plt+0x166b4>
   183b0:	mov	r1, r6
   183b4:	movw	r2, #8288	; 0x2060
   183b8:	movt	r2, #3
   183bc:	mov	r3, r0
   183c0:	mov	r0, r7
   183c4:	bl	12224 <error@plt>
   183c8:	ldr	r2, [r4, #28]
   183cc:	movw	r3, #25340	; 0x62fc
   183d0:	movt	r3, #4
   183d4:	cmp	r2, #0
   183d8:	movle	r2, #1
   183dc:	strle	r2, [r3, #28]
   183e0:	cmp	r5, #0
   183e4:	popeq	{r3, r4, r5, r6, r7, pc}
   183e8:	mov	r3, #1
   183ec:	strb	r3, [r4, #40]	; 0x28
   183f0:	pop	{r3, r4, r5, r6, r7, pc}
   183f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   183f8:	subs	r4, r0, #0
   183fc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   18400:	movw	r5, #25340	; 0x62fc
   18404:	movt	r5, #4
   18408:	ldrb	r3, [r5, #32]
   1840c:	cmp	r3, #0
   18410:	beq	184c4 <__assert_fail@plt+0x5e8c>
   18414:	movw	r6, #18676	; 0x48f4
   18418:	movw	r8, #22048	; 0x5620
   1841c:	movw	r7, #20196	; 0x4ee4
   18420:	movt	r6, #1
   18424:	movt	r8, #4
   18428:	movt	r7, #1
   1842c:	mov	r9, #0
   18430:	b	18454 <__assert_fail@plt+0x5e1c>
   18434:	cmp	r3, r7
   18438:	beq	18468 <__assert_fail@plt+0x5e30>
   1843c:	ldr	r4, [r4, #160]	; 0xa0
   18440:	cmp	r4, #0
   18444:	beq	184c0 <__assert_fail@plt+0x5e88>
   18448:	ldrb	r3, [r5, #32]
   1844c:	cmp	r3, #0
   18450:	beq	184c4 <__assert_fail@plt+0x5e8c>
   18454:	ldr	r0, [r4, #156]	; 0x9c
   18458:	bl	183f4 <__assert_fail@plt+0x5dbc>
   1845c:	ldr	r3, [r4]
   18460:	cmp	r3, r6
   18464:	bne	18434 <__assert_fail@plt+0x5dfc>
   18468:	ldrb	r3, [r4, #40]	; 0x28
   1846c:	cmp	r3, #0
   18470:	beq	1843c <__assert_fail@plt+0x5e04>
   18474:	ldr	r3, [r4, #116]	; 0x74
   18478:	cmp	r3, #0
   1847c:	beq	1843c <__assert_fail@plt+0x5e04>
   18480:	movw	r1, #34020	; 0x84e4
   18484:	ldr	r0, [r4, #144]	; 0x90
   18488:	movt	r1, #1
   1848c:	add	r2, r4, #40	; 0x28
   18490:	bl	20a30 <__assert_fail@plt+0xe3f8>
   18494:	ldr	r0, [r4, #144]	; 0x90
   18498:	ldr	r3, [r8]
   1849c:	cmp	r0, r3
   184a0:	beq	1843c <__assert_fail@plt+0x5e04>
   184a4:	bl	2905c <__assert_fail@plt+0x16a24>
   184a8:	ldr	r0, [r4, #144]	; 0x90
   184ac:	bl	12020 <free@plt>
   184b0:	str	r9, [r4, #144]	; 0x90
   184b4:	ldr	r4, [r4, #160]	; 0xa0
   184b8:	cmp	r4, #0
   184bc:	bne	18448 <__assert_fail@plt+0x5e10>
   184c0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   184c4:	movw	r0, #59612	; 0xe8dc
   184c8:	movw	r1, #59640	; 0xe8f8
   184cc:	movw	r3, #59404	; 0xe80c
   184d0:	movt	r0, #2
   184d4:	movt	r1, #2
   184d8:	mov	r2, #376	; 0x178
   184dc:	movt	r3, #2
   184e0:	bl	12638 <__assert_fail@plt>
   184e4:	push	{r3, lr}
   184e8:	mov	r1, r0
   184ec:	add	r0, r0, #4
   184f0:	add	r1, r1, #48	; 0x30
   184f4:	bl	201b0 <__assert_fail@plt+0xdb78>
   184f8:	mov	r0, #0
   184fc:	pop	{r3, pc}
   18500:	push	{r3, r4, r5, lr}
   18504:	subs	r4, r0, #0
   18508:	popeq	{r3, r4, r5, pc}
   1850c:	movw	r5, #18672	; 0x48f0
   18510:	movt	r5, #1
   18514:	b	18524 <__assert_fail@plt+0x5eec>
   18518:	ldr	r4, [r4, #160]	; 0xa0
   1851c:	cmp	r4, #0
   18520:	beq	18568 <__assert_fail@plt+0x5f30>
   18524:	ldr	r0, [r4, #156]	; 0x9c
   18528:	bl	18500 <__assert_fail@plt+0x5ec8>
   1852c:	ldr	r3, [r4]
   18530:	cmp	r3, r5
   18534:	bne	18518 <__assert_fail@plt+0x5ee0>
   18538:	ldrb	r3, [r4, #40]	; 0x28
   1853c:	cmp	r3, #0
   18540:	beq	18518 <__assert_fail@plt+0x5ee0>
   18544:	ldr	r3, [r4, #116]	; 0x74
   18548:	cmp	r3, #0
   1854c:	beq	18518 <__assert_fail@plt+0x5ee0>
   18550:	add	r0, r4, #44	; 0x2c
   18554:	add	r1, r4, #88	; 0x58
   18558:	bl	201b0 <__assert_fail@plt+0xdb78>
   1855c:	ldr	r4, [r4, #160]	; 0xa0
   18560:	cmp	r4, #0
   18564:	bne	18524 <__assert_fail@plt+0x5eec>
   18568:	pop	{r3, r4, r5, pc}
   1856c:	push	{r4, r5, r6, lr}
   18570:	mov	r3, r0
   18574:	sub	sp, sp, #8
   18578:	mov	r5, r0
   1857c:	mov	r1, #1
   18580:	movw	r0, #59648	; 0xe900
   18584:	mov	r2, #24
   18588:	movt	r0, #2
   1858c:	bl	121a0 <fwrite@plt>
   18590:	ldr	r4, [pc, #52]	; 185cc <__assert_fail@plt+0x5f94>
   18594:	add	r6, r4, #84	; 0x54
   18598:	ldr	ip, [r4, #8]
   1859c:	movw	r2, #59676	; 0xe91c
   185a0:	ldr	r3, [r4]
   185a4:	movt	r2, #2
   185a8:	add	r4, r4, #12
   185ac:	mov	r0, r5
   185b0:	mov	r1, #1
   185b4:	str	ip, [sp]
   185b8:	bl	12428 <__fprintf_chk@plt>
   185bc:	cmp	r4, r6
   185c0:	bne	18598 <__assert_fail@plt+0x5f60>
   185c4:	add	sp, sp, #8
   185c8:	pop	{r4, r5, r6, pc}
   185cc:	andeq	lr, r2, ip, lsr #16
   185d0:	movw	ip, #25384	; 0x6328
   185d4:	movt	ip, #4
   185d8:	push	{r4, r5, lr}
   185dc:	mov	r4, r0
   185e0:	ldr	r3, [ip, #44]	; 0x2c
   185e4:	sub	sp, sp, #12
   185e8:	mov	r5, r1
   185ec:	tst	r3, #2
   185f0:	bne	18620 <__assert_fail@plt+0x5fe8>
   185f4:	movw	ip, #25340	; 0x62fc
   185f8:	movt	ip, #4
   185fc:	mov	r2, r4
   18600:	mov	r3, r5
   18604:	ldr	r1, [ip, #16]
   18608:	mov	r0, #3
   1860c:	mov	ip, #256	; 0x100
   18610:	str	ip, [sp]
   18614:	bl	1214c <__fxstatat64@plt>
   18618:	add	sp, sp, #12
   1861c:	pop	{r4, r5, pc}
   18620:	movw	r3, #21912	; 0x5598
   18624:	movt	r3, #4
   18628:	movw	r2, #59688	; 0xe928
   1862c:	mov	r1, #1
   18630:	ldr	r0, [r3]
   18634:	movt	r2, #2
   18638:	mov	r3, r4
   1863c:	bl	12428 <__fprintf_chk@plt>
   18640:	b	185f4 <__assert_fail@plt+0x5fbc>
   18644:	push	{r3, r4, r5, lr}
   18648:	mov	r4, r1
   1864c:	mov	r1, r2
   18650:	mov	r5, r0
   18654:	bl	16e8c <__assert_fail@plt+0x4854>
   18658:	ldr	r1, [r5, #4]
   1865c:	mov	r2, #0
   18660:	mov	ip, #1
   18664:	str	r4, [r0]
   18668:	stmib	r0, {r1, ip}
   1866c:	str	r2, [r0, #40]	; 0x28
   18670:	str	r2, [r0, #12]
   18674:	pop	{r3, r4, r5, pc}
   18678:	push	{r3, r4, r5, lr}
   1867c:	mov	r5, r0
   18680:	ldr	r4, [r0, #12]
   18684:	cmp	r4, #0
   18688:	beq	186b0 <__assert_fail@plt+0x6078>
   1868c:	bl	16e8c <__assert_fail@plt+0x4854>
   18690:	ldr	r1, [r5, #4]
   18694:	mov	r2, #0
   18698:	mov	ip, #1
   1869c:	str	r4, [r0]
   186a0:	stmib	r0, {r1, ip}
   186a4:	str	r2, [r0, #40]	; 0x28
   186a8:	str	r2, [r0, #12]
   186ac:	pop	{r3, r4, r5, pc}
   186b0:	movw	r0, #59748	; 0xe964
   186b4:	movw	r1, #59640	; 0xe8f8
   186b8:	movt	r0, #2
   186bc:	movt	r1, #2
   186c0:	mov	r2, #134	; 0x86
   186c4:	ldr	r3, [pc]	; 186cc <__assert_fail@plt+0x6094>
   186c8:	bl	12638 <__assert_fail@plt>
   186cc:	andeq	lr, r2, r0, lsl #17
   186d0:	mov	r1, #0
   186d4:	b	18678 <__assert_fail@plt+0x6040>
   186d8:	cmp	r2, #0
   186dc:	push	{r4, r5, r6, r7, r8, lr}
   186e0:	movw	r4, #23992	; 0x5db8
   186e4:	sub	sp, sp, #8
   186e8:	movt	r4, #4
   186ec:	mov	r8, r1
   186f0:	mov	r6, r0
   186f4:	beq	18710 <__assert_fail@plt+0x60d8>
   186f8:	str	r2, [sp]
   186fc:	mov	r1, #1
   18700:	movw	r2, #59780	; 0xe984
   18704:	ldr	r3, [r4]
   18708:	movt	r2, #2
   1870c:	bl	12428 <__fprintf_chk@plt>
   18710:	mov	r2, #5
   18714:	movw	r1, #59828	; 0xe9b4
   18718:	mov	r0, #0
   1871c:	movt	r1, #2
   18720:	bl	120d4 <dcgettext@plt>
   18724:	ldr	r3, [r4]
   18728:	mov	r1, #1
   1872c:	mov	r5, #0
   18730:	mov	r4, #1
   18734:	ldr	r7, [pc, #172]	; 187e8 <__assert_fail@plt+0x61b0>
   18738:	mov	r2, r0
   1873c:	mov	r0, r6
   18740:	bl	12428 <__fprintf_chk@plt>
   18744:	b	18750 <__assert_fail@plt+0x6118>
   18748:	add	r4, r4, #1
   1874c:	add	r5, r5, #12
   18750:	cmp	r4, #1
   18754:	beq	187b8 <__assert_fail@plt+0x6180>
   18758:	ldr	ip, [r7, r5]
   1875c:	movw	r2, #59788	; 0xe98c
   18760:	movw	r3, #59796	; 0xe994
   18764:	movt	r2, #2
   18768:	movt	r3, #2
   1876c:	mov	r0, r6
   18770:	str	ip, [sp]
   18774:	mov	r1, #1
   18778:	bl	12428 <__fprintf_chk@plt>
   1877c:	cmp	r4, #7
   18780:	bne	18748 <__assert_fail@plt+0x6110>
   18784:	mov	r2, #5
   18788:	movw	r1, #59800	; 0xe998
   1878c:	mov	r0, #0
   18790:	movt	r1, #2
   18794:	bl	120d4 <dcgettext@plt>
   18798:	mov	r1, #1
   1879c:	mov	r2, r0
   187a0:	mov	r0, r6
   187a4:	bl	12428 <__fprintf_chk@plt>
   187a8:	cmp	r8, #0
   187ac:	bne	187e0 <__assert_fail@plt+0x61a8>
   187b0:	add	sp, sp, #8
   187b4:	pop	{r4, r5, r6, r7, r8, pc}
   187b8:	ldr	r1, [r7, r5]
   187bc:	movw	r2, #59788	; 0xe98c
   187c0:	movw	r3, #54180	; 0xd3a4
   187c4:	movt	r2, #2
   187c8:	movt	r3, #2
   187cc:	mov	r0, r6
   187d0:	str	r1, [sp]
   187d4:	mov	r1, r4
   187d8:	bl	12428 <__fprintf_chk@plt>
   187dc:	b	18748 <__assert_fail@plt+0x6110>
   187e0:	mov	r0, r8
   187e4:	bl	12308 <exit@plt>
   187e8:	andeq	lr, r2, ip, lsr #16
   187ec:	bx	lr
   187f0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   187f4:	movw	r4, #25340	; 0x62fc
   187f8:	movt	r4, #4
   187fc:	mov	r8, r0
   18800:	mov	r7, r1
   18804:	mov	r5, r2
   18808:	ldrb	ip, [r4, #4]
   1880c:	cmp	ip, #0
   18810:	ldrne	r0, [r2, #16]
   18814:	beq	18830 <__assert_fail@plt+0x61f8>
   18818:	mov	r3, #1
   1881c:	str	r0, [r4, #8]
   18820:	strb	r3, [r4, #4]
   18824:	mov	r0, #0
   18828:	strb	r3, [r4, #5]
   1882c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18830:	movw	r6, #25384	; 0x6328
   18834:	movt	r6, #4
   18838:	mov	r0, r1
   1883c:	mov	r1, r2
   18840:	ldr	r3, [r6, #52]	; 0x34
   18844:	blx	r3
   18848:	cmp	r0, #0
   1884c:	beq	18884 <__assert_fail@plt+0x624c>
   18850:	ldrb	r3, [r6, #15]
   18854:	cmp	r3, #0
   18858:	beq	188ec <__assert_fail@plt+0x62b4>
   1885c:	bl	1238c <__errno_location@plt>
   18860:	ldr	r1, [r0]
   18864:	cmp	r1, #2
   18868:	beq	188e4 <__assert_fail@plt+0x62ac>
   1886c:	mov	r3, r8
   18870:	mov	r0, #0
   18874:	mov	r2, #1
   18878:	bl	18370 <__assert_fail@plt+0x5d38>
   1887c:	mvn	r0, #0
   18880:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18884:	ldr	r8, [r5, #16]
   18888:	cmp	r8, #0
   1888c:	movne	r0, r8
   18890:	bne	18818 <__assert_fail@plt+0x61e0>
   18894:	mov	r2, #5
   18898:	movw	r1, #59868	; 0xe9dc
   1889c:	movt	r1, #2
   188a0:	bl	120d4 <dcgettext@plt>
   188a4:	ldr	r1, [r6, #72]	; 0x48
   188a8:	mov	r2, r7
   188ac:	mov	r9, r0
   188b0:	mov	r0, r8
   188b4:	bl	28cec <__assert_fail@plt+0x166b4>
   188b8:	mov	r1, r8
   188bc:	mov	r2, r9
   188c0:	mov	r3, r0
   188c4:	mov	r0, r8
   188c8:	bl	12224 <error@plt>
   188cc:	ldr	r3, [r4, #28]
   188d0:	ldr	r0, [r5, #16]
   188d4:	cmp	r3, #0
   188d8:	movle	r3, #1
   188dc:	strle	r3, [r4, #28]
   188e0:	b	18818 <__assert_fail@plt+0x61e0>
   188e4:	mvn	r0, #0
   188e8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   188ec:	bl	1238c <__errno_location@plt>
   188f0:	ldr	r1, [r0]
   188f4:	b	1886c <__assert_fail@plt+0x6234>
   188f8:	push	{r3, r4, r5, r6, r7, lr}
   188fc:	mov	r6, r2
   18900:	ldrb	r3, [r2, #18]
   18904:	mov	r7, r1
   18908:	cmp	r3, #0
   1890c:	movwne	r3, #25340	; 0x62fc
   18910:	movtne	r3, #4
   18914:	bne	18938 <__assert_fail@plt+0x6300>
   18918:	ldrb	r3, [r2, #19]
   1891c:	cmp	r3, #0
   18920:	beq	18980 <__assert_fail@plt+0x6348>
   18924:	movw	r3, #25340	; 0x62fc
   18928:	movt	r3, #4
   1892c:	ldrb	r2, [r3, #5]
   18930:	cmp	r2, #0
   18934:	bne	18980 <__assert_fail@plt+0x6348>
   18938:	ldr	r1, [r3, #12]
   1893c:	mov	r2, r7
   18940:	bl	187f0 <__assert_fail@plt+0x61b8>
   18944:	movw	r4, #25340	; 0x62fc
   18948:	movt	r4, #4
   1894c:	cmp	r0, #0
   18950:	bne	18a04 <__assert_fail@plt+0x63cc>
   18954:	ldrb	r3, [r6, #19]
   18958:	cmp	r3, #0
   1895c:	bne	189c0 <__assert_fail@plt+0x6388>
   18960:	ldrb	r3, [r6, #20]
   18964:	cmp	r3, #0
   18968:	beq	18978 <__assert_fail@plt+0x6340>
   1896c:	ldrd	r2, [r7, #96]	; 0x60
   18970:	orrs	r1, r2, r3
   18974:	beq	189e8 <__assert_fail@plt+0x63b0>
   18978:	mov	r0, #0
   1897c:	pop	{r3, r4, r5, r6, r7, pc}
   18980:	ldrb	r3, [r6, #20]
   18984:	cmp	r3, #0
   18988:	beq	18978 <__assert_fail@plt+0x6340>
   1898c:	ldrd	r4, [r7, #96]	; 0x60
   18990:	movw	r3, #25340	; 0x62fc
   18994:	movt	r3, #4
   18998:	orrs	r1, r4, r5
   1899c:	beq	18938 <__assert_fail@plt+0x6300>
   189a0:	ldrb	r2, [r3, #5]
   189a4:	cmp	r2, #0
   189a8:	beq	18938 <__assert_fail@plt+0x6300>
   189ac:	ldr	r2, [r7, #16]
   189b0:	and	r2, r2, #61440	; 0xf000
   189b4:	cmp	r2, #16384	; 0x4000
   189b8:	bne	18978 <__assert_fail@plt+0x6340>
   189bc:	b	18938 <__assert_fail@plt+0x6300>
   189c0:	ldrb	r3, [r4, #5]
   189c4:	cmp	r3, #0
   189c8:	bne	18960 <__assert_fail@plt+0x6328>
   189cc:	movw	r0, #55912	; 0xda68
   189d0:	movw	r1, #59640	; 0xe8f8
   189d4:	movt	r0, #2
   189d8:	movt	r1, #2
   189dc:	movw	r2, #290	; 0x122
   189e0:	ldr	r3, [pc, #36]	; 18a0c <__assert_fail@plt+0x63d4>
   189e4:	bl	12638 <__assert_fail@plt>
   189e8:	movw	r0, #59912	; 0xea08
   189ec:	movw	r1, #59640	; 0xe8f8
   189f0:	movt	r0, #2
   189f4:	movt	r1, #2
   189f8:	movw	r2, #294	; 0x126
   189fc:	ldr	r3, [pc, #8]	; 18a0c <__assert_fail@plt+0x63d4>
   18a00:	bl	12638 <__assert_fail@plt>
   18a04:	mvn	r0, #0
   18a08:	pop	{r3, r4, r5, r6, r7, pc}
   18a0c:	muleq	r2, r0, r8
   18a10:	push	{r4, lr}
   18a14:	vpush	{d8}
   18a18:	movw	r4, #21904	; 0x5590
   18a1c:	movt	r4, #4
   18a20:	sub	sp, sp, #400	; 0x190
   18a24:	add	r0, sp, #4
   18a28:	ldr	r3, [r4]
   18a2c:	str	r3, [sp, #396]	; 0x18c
   18a30:	bl	120bc <uname@plt>
   18a34:	subs	r1, r0, #0
   18a38:	bne	18a94 <__assert_fail@plt+0x645c>
   18a3c:	add	r0, sp, #134	; 0x86
   18a40:	bl	12404 <strtod@plt>
   18a44:	movw	r0, #59924	; 0xea14
   18a48:	add	r1, sp, #4
   18a4c:	movt	r0, #2
   18a50:	vcvt.f32.f64	s16, d0
   18a54:	bl	11fb4 <strcmp@plt>
   18a58:	cmp	r0, #0
   18a5c:	beq	18ab4 <__assert_fail@plt+0x647c>
   18a60:	add	r1, sp, #4
   18a64:	movw	r0, #59932	; 0xea1c
   18a68:	movt	r0, #2
   18a6c:	bl	11fb4 <strcmp@plt>
   18a70:	cmp	r0, #0
   18a74:	bne	18a94 <__assert_fail@plt+0x645c>
   18a78:	vcvt.f64.f32	d0, s16
   18a7c:	vldr	d7, [pc, #84]	; 18ad8 <__assert_fail@plt+0x64a0>
   18a80:	vcmpe.f64	d0, d7
   18a84:	vmrs	APSR_nzcv, fpscr
   18a88:	movlt	r0, #0
   18a8c:	movge	r0, #1
   18a90:	b	18a98 <__assert_fail@plt+0x6460>
   18a94:	mov	r0, #1
   18a98:	ldr	r2, [sp, #396]	; 0x18c
   18a9c:	ldr	r3, [r4]
   18aa0:	cmp	r2, r3
   18aa4:	bne	18ad0 <__assert_fail@plt+0x6498>
   18aa8:	add	sp, sp, #400	; 0x190
   18aac:	vpop	{d8}
   18ab0:	pop	{r4, pc}
   18ab4:	vcvt.f64.f32	d0, s16
   18ab8:	vldr	d7, [pc, #32]	; 18ae0 <__assert_fail@plt+0x64a8>
   18abc:	vcmpe.f64	d0, d7
   18ac0:	vmrs	APSR_nzcv, fpscr
   18ac4:	movlt	r0, #0
   18ac8:	movge	r0, #1
   18acc:	b	18a98 <__assert_fail@plt+0x6460>
   18ad0:	bl	120e0 <__stack_chk_fail@plt>
   18ad4:	nop	{0}
   18ad8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   18adc:	andmi	ip, r8, ip, asr #25
   18ae0:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   18ae4:	mulmi	r1, r9, r9
   18ae8:	push	{r4, lr}
   18aec:	movw	r4, #25340	; 0x62fc
   18af0:	movt	r4, #4
   18af4:	ldrb	r3, [r4, #32]
   18af8:	cmp	r3, #0
   18afc:	popeq	{r4, pc}
   18b00:	bl	16a88 <__assert_fail@plt+0x4450>
   18b04:	bl	183f4 <__assert_fail@plt+0x5dbc>
   18b08:	mov	r3, #0
   18b0c:	strb	r3, [r4, #32]
   18b10:	pop	{r4, pc}
   18b14:	push	{r4, lr}
   18b18:	mov	r0, #8
   18b1c:	bl	29604 <__assert_fail@plt+0x16fcc>
   18b20:	movw	r3, #22048	; 0x5620
   18b24:	movt	r3, #4
   18b28:	str	r0, [r3]
   18b2c:	bl	28fe4 <__assert_fail@plt+0x169ac>
   18b30:	cmp	r0, #0
   18b34:	popeq	{r4, pc}
   18b38:	bl	1238c <__errno_location@plt>
   18b3c:	mov	r2, #5
   18b40:	movw	r1, #59940	; 0xea24
   18b44:	movt	r1, #2
   18b48:	ldr	r4, [r0]
   18b4c:	mov	r0, #0
   18b50:	bl	120d4 <dcgettext@plt>
   18b54:	mov	r1, r4
   18b58:	pop	{r4, lr}
   18b5c:	mov	r2, r0
   18b60:	mov	r0, #1
   18b64:	b	12224 <error@plt>
   18b68:	push	{r3, lr}
   18b6c:	movw	r0, #59984	; 0xea50
   18b70:	movt	r0, #2
   18b74:	bl	12260 <getenv@plt>
   18b78:	adds	r0, r0, #0
   18b7c:	movne	r0, #1
   18b80:	pop	{r3, pc}
   18b84:	push	{r4, r5, r6, lr}
   18b88:	bl	16a88 <__assert_fail@plt+0x4450>
   18b8c:	subs	r4, r0, #0
   18b90:	beq	18c44 <__assert_fail@plt+0x660c>
   18b94:	movw	r1, #34048	; 0x8500
   18b98:	movt	r1, #1
   18b9c:	bl	182e8 <__assert_fail@plt+0x5cb0>
   18ba0:	bl	18ae8 <__assert_fail@plt+0x64b0>
   18ba4:	movw	r3, #25340	; 0x62fc
   18ba8:	movt	r3, #4
   18bac:	ldr	r0, [r3, #36]	; 0x24
   18bb0:	bl	19970 <__assert_fail@plt+0x7338>
   18bb4:	movw	r1, #33568	; 0x8320
   18bb8:	mov	r0, r4
   18bbc:	movt	r1, #1
   18bc0:	bl	182e8 <__assert_fail@plt+0x5cb0>
   18bc4:	movw	r4, #22048	; 0x5620
   18bc8:	movt	r4, #4
   18bcc:	ldr	r0, [r4]
   18bd0:	bl	29040 <__assert_fail@plt+0x16a08>
   18bd4:	subs	r5, r0, #0
   18bd8:	bne	18c58 <__assert_fail@plt+0x6620>
   18bdc:	ldr	r0, [r4]
   18be0:	bl	2905c <__assert_fail@plt+0x16a24>
   18be4:	ldr	r0, [r4]
   18be8:	bl	12020 <free@plt>
   18bec:	movw	r0, #59984	; 0xea50
   18bf0:	movt	r0, #2
   18bf4:	str	r5, [r4]
   18bf8:	bl	12260 <getenv@plt>
   18bfc:	cmp	r0, #0
   18c00:	beq	18c0c <__assert_fail@plt+0x65d4>
   18c04:	bl	2109c <__assert_fail@plt+0xea64>
   18c08:	bl	21078 <__assert_fail@plt+0xea40>
   18c0c:	movw	r3, #21920	; 0x55a0
   18c10:	movt	r3, #4
   18c14:	ldr	r0, [r3]
   18c18:	bl	2a9b0 <__assert_fail@plt+0x18378>
   18c1c:	cmn	r0, #1
   18c20:	popne	{r4, r5, r6, pc}
   18c24:	bl	1238c <__errno_location@plt>
   18c28:	movw	r3, #60056	; 0xea98
   18c2c:	pop	{r4, r5, r6, lr}
   18c30:	movt	r3, #2
   18c34:	ldr	r1, [r0]
   18c38:	mov	r0, #0
   18c3c:	mov	r2, r0
   18c40:	b	18370 <__assert_fail@plt+0x5d38>
   18c44:	movw	r3, #25340	; 0x62fc
   18c48:	movt	r3, #4
   18c4c:	ldr	r0, [r3, #36]	; 0x24
   18c50:	bl	19970 <__assert_fail@plt+0x7338>
   18c54:	b	18bc4 <__assert_fail@plt+0x658c>
   18c58:	bl	1238c <__errno_location@plt>
   18c5c:	mov	r2, #5
   18c60:	movw	r1, #60012	; 0xea6c
   18c64:	movt	r1, #2
   18c68:	ldr	r4, [r0]
   18c6c:	mov	r0, #0
   18c70:	bl	120d4 <dcgettext@plt>
   18c74:	mov	r1, r4
   18c78:	mov	r2, r0
   18c7c:	mov	r0, #0
   18c80:	bl	12224 <error@plt>
   18c84:	mov	r0, #1
   18c88:	bl	12050 <_exit@plt>
   18c8c:	movw	ip, #25340	; 0x62fc
   18c90:	movt	ip, #4
   18c94:	push	{r4, r5, r6, lr}
   18c98:	mov	r4, r1
   18c9c:	ldr	r1, [ip, #16]
   18ca0:	sub	sp, sp, #8
   18ca4:	mov	r5, r0
   18ca8:	cmn	r1, #100	; 0x64
   18cac:	beq	18cb8 <__assert_fail@plt+0x6680>
   18cb0:	cmp	r1, #0
   18cb4:	blt	18d34 <__assert_fail@plt+0x66fc>
   18cb8:	ldr	ip, [ip]
   18cbc:	cmp	ip, #0
   18cc0:	beq	18cec <__assert_fail@plt+0x66b4>
   18cc4:	mov	ip, #256	; 0x100
   18cc8:	mov	r2, r5
   18ccc:	mov	r3, r4
   18cd0:	mov	r0, #3
   18cd4:	str	ip, [sp]
   18cd8:	bl	1214c <__fxstatat64@plt>
   18cdc:	mov	r6, r0
   18ce0:	mov	r0, r6
   18ce4:	add	sp, sp, #8
   18ce8:	pop	{r4, r5, r6, pc}
   18cec:	str	ip, [sp]
   18cf0:	mov	r0, #3
   18cf4:	mov	r2, r5
   18cf8:	mov	r3, r4
   18cfc:	bl	1214c <__fxstatat64@plt>
   18d00:	subs	r6, r0, #0
   18d04:	beq	18ce0 <__assert_fail@plt+0x66a8>
   18d08:	bl	1238c <__errno_location@plt>
   18d0c:	ldr	r3, [r0]
   18d10:	cmp	r3, #2
   18d14:	beq	18d20 <__assert_fail@plt+0x66e8>
   18d18:	cmp	r3, #20
   18d1c:	bne	18ce0 <__assert_fail@plt+0x66a8>
   18d20:	mov	r0, r5
   18d24:	mov	r1, r4
   18d28:	add	sp, sp, #8
   18d2c:	pop	{r4, r5, r6, lr}
   18d30:	b	185d0 <__assert_fail@plt+0x5f98>
   18d34:	movw	r0, #60072	; 0xeaa8
   18d38:	movw	r1, #59640	; 0xe8f8
   18d3c:	movt	r0, #2
   18d40:	movt	r1, #2
   18d44:	movw	r2, #593	; 0x251
   18d48:	ldr	r3, [pc]	; 18d50 <__assert_fail@plt+0x6718>
   18d4c:	bl	12638 <__assert_fail@plt>
   18d50:	muleq	r2, ip, r8
   18d54:	movw	ip, #25340	; 0x62fc
   18d58:	movt	ip, #4
   18d5c:	push	{r4, r5, r6, lr}
   18d60:	mov	r4, r1
   18d64:	ldr	r1, [ip, #16]
   18d68:	sub	sp, sp, #8
   18d6c:	mov	r5, r0
   18d70:	cmn	r1, #100	; 0x64
   18d74:	beq	18d80 <__assert_fail@plt+0x6748>
   18d78:	cmp	r1, #0
   18d7c:	blt	18dd8 <__assert_fail@plt+0x67a0>
   18d80:	mov	r3, #0
   18d84:	mov	r0, #3
   18d88:	str	r3, [sp]
   18d8c:	mov	r2, r5
   18d90:	mov	r3, r4
   18d94:	bl	1214c <__fxstatat64@plt>
   18d98:	subs	r6, r0, #0
   18d9c:	bne	18dac <__assert_fail@plt+0x6774>
   18da0:	mov	r0, r6
   18da4:	add	sp, sp, #8
   18da8:	pop	{r4, r5, r6, pc}
   18dac:	bl	1238c <__errno_location@plt>
   18db0:	ldr	r3, [r0]
   18db4:	cmp	r3, #2
   18db8:	beq	18dc4 <__assert_fail@plt+0x678c>
   18dbc:	cmp	r3, #20
   18dc0:	bne	18da0 <__assert_fail@plt+0x6768>
   18dc4:	mov	r0, r5
   18dc8:	mov	r1, r4
   18dcc:	add	sp, sp, #8
   18dd0:	pop	{r4, r5, r6, lr}
   18dd4:	b	185d0 <__assert_fail@plt+0x5f98>
   18dd8:	movw	r0, #60072	; 0xeaa8
   18ddc:	movw	r1, #59640	; 0xe8f8
   18de0:	movt	r0, #2
   18de4:	movt	r1, #2
   18de8:	mov	r2, #624	; 0x270
   18dec:	ldr	r3, [pc]	; 18df4 <__assert_fail@plt+0x67bc>
   18df0:	bl	12638 <__assert_fail@plt>
   18df4:	andeq	lr, r2, ip, lsr #17
   18df8:	movw	ip, #25340	; 0x62fc
   18dfc:	movt	ip, #4
   18e00:	mov	r3, r1
   18e04:	ldr	r1, [ip, #16]
   18e08:	push	{lr}		; (str lr, [sp, #-4]!)
   18e0c:	adds	lr, r1, #100	; 0x64
   18e10:	sub	sp, sp, #12
   18e14:	movne	lr, #1
   18e18:	ands	lr, lr, r1, lsr #31
   18e1c:	bne	18e3c <__assert_fail@plt+0x6804>
   18e20:	mov	r2, r0
   18e24:	mov	ip, #256	; 0x100
   18e28:	mov	r0, #3
   18e2c:	str	ip, [sp]
   18e30:	bl	1214c <__fxstatat64@plt>
   18e34:	add	sp, sp, #12
   18e38:	pop	{pc}		; (ldr pc, [sp], #4)
   18e3c:	movw	r0, #60096	; 0xeac0
   18e40:	movw	r1, #59640	; 0xe8f8
   18e44:	movt	r0, #2
   18e48:	movt	r1, #2
   18e4c:	movw	r2, #641	; 0x281
   18e50:	ldr	r3, [pc]	; 18e58 <__assert_fail@plt+0x6820>
   18e54:	bl	12638 <__assert_fail@plt>
   18e58:			; <UNDEFINED> instruction: 0x0002e8bc
   18e5c:	movw	ip, #22104	; 0x5658
   18e60:	movt	ip, #4
   18e64:	push	{r3, r4, r5, r6, r7, lr}
   18e68:	movw	r2, #21912	; 0x5598
   18e6c:	ldrd	r4, [ip]
   18e70:	movt	r2, #4
   18e74:	mov	r7, r0
   18e78:	mov	r6, r1
   18e7c:	adds	r4, r4, #1
   18e80:	ldr	r0, [r2]
   18e84:	mov	r3, r7
   18e88:	movw	r2, #60148	; 0xeaf4
   18e8c:	mov	r1, #1
   18e90:	movt	r2, #2
   18e94:	adc	r5, r5, #0
   18e98:	strd	r4, [ip]
   18e9c:	bl	12428 <__fprintf_chk@plt>
   18ea0:	movw	r2, #25384	; 0x6328
   18ea4:	movt	r2, #4
   18ea8:	ldr	r3, [r2, #48]	; 0x30
   18eac:	cmp	r3, #1
   18eb0:	beq	18efc <__assert_fail@plt+0x68c4>
   18eb4:	bcc	18eec <__assert_fail@plt+0x68b4>
   18eb8:	cmp	r3, #2
   18ebc:	bne	18ed0 <__assert_fail@plt+0x6898>
   18ec0:	mov	r0, r7
   18ec4:	mov	r1, r6
   18ec8:	pop	{r3, r4, r5, r6, r7, lr}
   18ecc:	b	18c8c <__assert_fail@plt+0x6654>
   18ed0:	movw	r0, #55804	; 0xd9fc
   18ed4:	movw	r1, #59640	; 0xe8f8
   18ed8:	movt	r0, #2
   18edc:	movt	r1, #2
   18ee0:	movw	r2, #665	; 0x299
   18ee4:	ldr	r3, [pc, #32]	; 18f0c <__assert_fail@plt+0x68d4>
   18ee8:	bl	12638 <__assert_fail@plt>
   18eec:	mov	r0, r7
   18ef0:	mov	r1, r6
   18ef4:	pop	{r3, r4, r5, r6, r7, lr}
   18ef8:	b	18df8 <__assert_fail@plt+0x67c0>
   18efc:	mov	r0, r7
   18f00:	mov	r1, r6
   18f04:	pop	{r3, r4, r5, r6, r7, lr}
   18f08:	b	18d54 <__assert_fail@plt+0x671c>
   18f0c:	andeq	lr, r2, ip, asr #17
   18f10:	movw	r3, #25384	; 0x6328
   18f14:	movt	r3, #4
   18f18:	ldr	r0, [r3, #48]	; 0x30
   18f1c:	cmp	r0, #1
   18f20:	bxeq	lr
   18f24:	cmp	r0, #2
   18f28:	bne	18f44 <__assert_fail@plt+0x690c>
   18f2c:	movw	r3, #25340	; 0x62fc
   18f30:	movt	r3, #4
   18f34:	ldr	r0, [r3]
   18f38:	rsbs	r0, r0, #1
   18f3c:	movcc	r0, #0
   18f40:	bx	lr
   18f44:	mov	r0, #0
   18f48:	bx	lr
   18f4c:	ldr	ip, [r0]
   18f50:	push	{r4, r5, r6, lr}
   18f54:	cmp	ip, #0
   18f58:	mov	r6, r3
   18f5c:	mov	r5, r0
   18f60:	ldrb	r3, [sp, #16]
   18f64:	beq	18f94 <__assert_fail@plt+0x695c>
   18f68:	and	r3, ip, #61440	; 0xf000
   18f6c:	cmp	r3, #40960	; 0xa000
   18f70:	movwne	r4, #25340	; 0x62fc
   18f74:	movtne	r4, #4
   18f78:	beq	18ff4 <__assert_fail@plt+0x69bc>
   18f7c:	mov	r3, #1
   18f80:	str	ip, [r4, #8]
   18f84:	str	ip, [r6, #16]
   18f88:	mov	r0, r3
   18f8c:	strb	r3, [r4, #5]
   18f90:	pop	{r4, r5, r6, pc}
   18f94:	cmp	r3, #0
   18f98:	beq	18fb8 <__assert_fail@plt+0x6980>
   18f9c:	movw	r3, #25340	; 0x62fc
   18fa0:	movt	r3, #4
   18fa4:	mov	r0, #1
   18fa8:	strb	ip, [r3, #4]
   18fac:	strb	ip, [r3, #5]
   18fb0:	str	ip, [r3, #8]
   18fb4:	pop	{r4, r5, r6, pc}
   18fb8:	mov	r0, r1
   18fbc:	mov	r1, r2
   18fc0:	mov	r2, r6
   18fc4:	bl	187f0 <__assert_fail@plt+0x61b8>
   18fc8:	cmp	r0, #0
   18fcc:	bne	1903c <__assert_fail@plt+0x6a04>
   18fd0:	ldr	r1, [r6, #16]
   18fd4:	movw	r3, #25340	; 0x62fc
   18fd8:	movt	r3, #4
   18fdc:	mov	r2, #1
   18fe0:	mov	r0, r2
   18fe4:	str	r1, [r5]
   18fe8:	str	r1, [r3, #8]
   18fec:	strb	r2, [r3, #5]
   18ff0:	pop	{r4, r5, r6, pc}
   18ff4:	movw	r3, #25384	; 0x6328
   18ff8:	movt	r3, #4
   18ffc:	ldr	r3, [r3, #48]	; 0x30
   19000:	cmp	r3, #1
   19004:	beq	19024 <__assert_fail@plt+0x69ec>
   19008:	cmp	r3, #2
   1900c:	movw	r4, #25340	; 0x62fc
   19010:	movt	r4, #4
   19014:	bne	18f7c <__assert_fail@plt+0x6944>
   19018:	ldr	r3, [r4]
   1901c:	cmp	r3, #0
   19020:	bne	18f7c <__assert_fail@plt+0x6944>
   19024:	mov	r0, r1
   19028:	mov	r1, r2
   1902c:	mov	r2, r6
   19030:	bl	187f0 <__assert_fail@plt+0x61b8>
   19034:	cmp	r0, #0
   19038:	beq	19044 <__assert_fail@plt+0x6a0c>
   1903c:	mov	r0, #0
   19040:	pop	{r4, r5, r6, pc}
   19044:	ldr	r1, [r6, #16]
   19048:	movw	r3, #25340	; 0x62fc
   1904c:	movt	r3, #4
   19050:	mov	r2, #1
   19054:	mov	r0, r2
   19058:	str	r1, [r3, #8]
   1905c:	str	r1, [r5]
   19060:	strb	r2, [r3, #5]
   19064:	pop	{r4, r5, r6, pc}
   19068:	subs	r3, r0, #0
   1906c:	beq	19098 <__assert_fail@plt+0x6a60>
   19070:	ldrb	r0, [r3, #17]
   19074:	cmp	r0, #0
   19078:	beq	1908c <__assert_fail@plt+0x6a54>
   1907c:	b	190a0 <__assert_fail@plt+0x6a68>
   19080:	ldrb	r2, [r3, #17]
   19084:	cmp	r2, #0
   19088:	bxne	lr
   1908c:	ldr	r3, [r3, #152]	; 0x98
   19090:	cmp	r3, #0
   19094:	bne	19080 <__assert_fail@plt+0x6a48>
   19098:	mov	r0, #1
   1909c:	bx	lr
   190a0:	mov	r0, #0
   190a4:	bx	lr
   190a8:	ldrb	r3, [r0]
   190ac:	sub	r3, r3, #33	; 0x21
   190b0:	cmp	r3, #12
   190b4:	ldrls	pc, [pc, r3, lsl #2]
   190b8:	b	1910c <__assert_fail@plt+0x6ad4>
   190bc:	andeq	r9, r1, r4, lsl r1
   190c0:	andeq	r9, r1, ip, lsl #2
   190c4:	andeq	r9, r1, ip, lsl #2
   190c8:	andeq	r9, r1, ip, lsl #2
   190cc:	andeq	r9, r1, ip, lsl #2
   190d0:	andeq	r9, r1, ip, lsl #2
   190d4:	andeq	r9, r1, ip, lsl #2
   190d8:	andeq	r9, r1, r4, lsl r1
   190dc:	andeq	r9, r1, r0, lsl #2
   190e0:	andeq	r9, r1, ip, lsl #2
   190e4:	andeq	r9, r1, ip, lsl #2
   190e8:	andeq	r9, r1, r0, lsl #2
   190ec:	strdeq	r9, [r1], -r0
   190f0:	ldrb	r0, [r0, #1]
   190f4:	adds	r0, r0, #0
   190f8:	movne	r0, #1
   190fc:	bx	lr
   19100:	ldrb	r3, [r0, #1]
   19104:	cmp	r3, #0
   19108:	beq	19124 <__assert_fail@plt+0x6aec>
   1910c:	mov	r0, #0
   19110:	bx	lr
   19114:	ldrb	r0, [r0, #1]
   19118:	rsbs	r0, r0, #1
   1911c:	movcc	r0, #0
   19120:	bx	lr
   19124:	eor	r0, r1, #1
   19128:	bx	lr
   1912c:	movw	r2, #21904	; 0x5590
   19130:	movt	r2, #4
   19134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19138:	cmp	r0, #1
   1913c:	ldr	r3, [r2]
   19140:	sub	sp, sp, #36	; 0x24
   19144:	mov	r9, r1
   19148:	str	r2, [sp, #12]
   1914c:	str	r0, [sp, #4]
   19150:	str	r3, [sp, #28]
   19154:	ble	19390 <__assert_fail@plt+0x6d58>
   19158:	movw	r7, #25384	; 0x6328
   1915c:	mov	r6, #1
   19160:	movt	r7, #4
   19164:	b	191f0 <__assert_fail@plt+0x6bb8>
   19168:	movw	r0, #60168	; 0xeb08
   1916c:	mov	r1, r4
   19170:	movt	r0, #2
   19174:	mov	r2, #2
   19178:	bl	125b4 <strncmp@plt>
   1917c:	subs	r8, r0, #0
   19180:	bne	1923c <__assert_fail@plt+0x6c04>
   19184:	ldrb	r5, [r4, #2]
   19188:	cmp	r5, #0
   1918c:	movweq	r1, #60172	; 0xeb0c
   19190:	moveq	r2, #5
   19194:	movteq	r1, #2
   19198:	beq	191cc <__assert_fail@plt+0x6b94>
   1919c:	bl	122f0 <__ctype_b_loc@plt>
   191a0:	lsl	r5, r5, #1
   191a4:	ldr	r3, [r0]
   191a8:	ldrh	r5, [r3, r5]
   191ac:	and	r5, r5, #2048	; 0x800
   191b0:	uxth	r5, r5
   191b4:	cmp	r5, #0
   191b8:	bne	19274 <__assert_fail@plt+0x6c3c>
   191bc:	movw	r1, #60236	; 0xeb4c
   191c0:	movt	r1, #2
   191c4:	mov	r0, r5
   191c8:	mov	r2, #5
   191cc:	bl	120d4 <dcgettext@plt>
   191d0:	mov	r1, r5
   191d4:	mov	r2, r0
   191d8:	mov	r0, #1
   191dc:	bl	12224 <error@plt>
   191e0:	ldr	r3, [sp, #4]
   191e4:	add	r6, r6, #1
   191e8:	cmp	r3, r6
   191ec:	ble	1923c <__assert_fail@plt+0x6c04>
   191f0:	ldr	r4, [r9, r6, lsl #2]
   191f4:	lsl	r2, r6, #2
   191f8:	ldrb	r3, [r4]
   191fc:	cmp	r3, #45	; 0x2d
   19200:	bne	19168 <__assert_fail@plt+0x6b30>
   19204:	ldrb	r3, [r4, #1]
   19208:	cmp	r3, #72	; 0x48
   1920c:	beq	1925c <__assert_fail@plt+0x6c24>
   19210:	cmp	r3, #76	; 0x4c
   19214:	bne	1939c <__assert_fail@plt+0x6d64>
   19218:	ldrb	r3, [r4, #2]
   1921c:	cmp	r3, #0
   19220:	bne	19168 <__assert_fail@plt+0x6b30>
   19224:	mov	r0, #1
   19228:	add	r6, r6, #1
   1922c:	bl	1f208 <__assert_fail@plt+0xcbd0>
   19230:	ldr	r3, [sp, #4]
   19234:	cmp	r3, r6
   19238:	bgt	191f0 <__assert_fail@plt+0x6bb8>
   1923c:	ldr	r1, [sp, #12]
   19240:	mov	r0, r6
   19244:	ldr	r2, [sp, #28]
   19248:	ldr	r3, [r1]
   1924c:	cmp	r2, r3
   19250:	bne	19398 <__assert_fail@plt+0x6d60>
   19254:	add	sp, sp, #36	; 0x24
   19258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1925c:	ldrb	r3, [r4, #2]
   19260:	cmp	r3, #0
   19264:	bne	19168 <__assert_fail@plt+0x6b30>
   19268:	mov	r0, #2
   1926c:	bl	1f208 <__assert_fail@plt+0xcbd0>
   19270:	b	191e0 <__assert_fail@plt+0x6ba8>
   19274:	bl	1238c <__errno_location@plt>
   19278:	add	r4, r4, #2
   1927c:	add	r1, sp, #20
   19280:	mov	r2, #10
   19284:	mov	fp, r0
   19288:	ldr	r5, [r0]
   1928c:	str	r8, [fp]
   19290:	mov	r0, r4
   19294:	bl	12320 <strtoul@plt>
   19298:	ldr	r3, [sp, #20]
   1929c:	subs	r8, r0, #0
   192a0:	bne	192e4 <__assert_fail@plt+0x6cac>
   192a4:	cmp	r4, r3
   192a8:	beq	1936c <__assert_fail@plt+0x6d34>
   192ac:	ldrb	r3, [r3]
   192b0:	cmp	r3, #0
   192b4:	beq	19300 <__assert_fail@plt+0x6cc8>
   192b8:	mov	r2, #5
   192bc:	movw	r1, #60292	; 0xeb84
   192c0:	mov	r0, #0
   192c4:	movt	r1, #2
   192c8:	bl	120d4 <dcgettext@plt>
   192cc:	mov	r3, r4
   192d0:	mov	r1, #0
   192d4:	mov	r2, r0
   192d8:	mov	r0, #1
   192dc:	bl	12224 <error@plt>
   192e0:	b	191e0 <__assert_fail@plt+0x6ba8>
   192e4:	ldrb	r0, [r3]
   192e8:	cmp	r0, #0
   192ec:	bne	192b8 <__assert_fail@plt+0x6c80>
   192f0:	cmn	r8, #1
   192f4:	beq	1930c <__assert_fail@plt+0x6cd4>
   192f8:	cmp	r8, #65536	; 0x10000
   192fc:	bcs	19318 <__assert_fail@plt+0x6ce0>
   19300:	strh	r8, [r7, #68]	; 0x44
   19304:	str	r5, [fp]
   19308:	b	191e0 <__assert_fail@plt+0x6ba8>
   1930c:	ldr	r5, [fp]
   19310:	cmp	r5, #0
   19314:	bne	19344 <__assert_fail@plt+0x6d0c>
   19318:	mov	r2, #5
   1931c:	movw	r1, #60324	; 0xeba4
   19320:	mov	r0, #0
   19324:	movt	r1, #2
   19328:	bl	120d4 <dcgettext@plt>
   1932c:	mov	r3, r8
   19330:	mov	r1, #0
   19334:	mov	r2, r0
   19338:	mov	r0, #1
   1933c:	bl	12224 <error@plt>
   19340:	b	191e0 <__assert_fail@plt+0x6ba8>
   19344:	mov	r2, #5
   19348:	movw	r1, #60292	; 0xeb84
   1934c:	movt	r1, #2
   19350:	bl	120d4 <dcgettext@plt>
   19354:	mov	r1, r5
   19358:	mov	r3, r4
   1935c:	mov	r2, r0
   19360:	mov	r0, #1
   19364:	bl	12224 <error@plt>
   19368:	b	191e0 <__assert_fail@plt+0x6ba8>
   1936c:	mov	r2, #5
   19370:	movw	r1, #60236	; 0xeb4c
   19374:	movt	r1, #2
   19378:	bl	120d4 <dcgettext@plt>
   1937c:	mov	r1, r8
   19380:	mov	r2, r0
   19384:	mov	r0, #1
   19388:	bl	12224 <error@plt>
   1938c:	b	191e0 <__assert_fail@plt+0x6ba8>
   19390:	mov	r6, #1
   19394:	b	1923c <__assert_fail@plt+0x6c04>
   19398:	bl	120e0 <__stack_chk_fail@plt>
   1939c:	cmp	r3, #80	; 0x50
   193a0:	bne	193b8 <__assert_fail@plt+0x6d80>
   193a4:	ldrb	r0, [r4, #2]
   193a8:	cmp	r0, #0
   193ac:	bne	19168 <__assert_fail@plt+0x6b30>
   193b0:	bl	1f208 <__assert_fail@plt+0xcbd0>
   193b4:	b	191e0 <__assert_fail@plt+0x6ba8>
   193b8:	cmp	r3, #45	; 0x2d
   193bc:	bne	193d4 <__assert_fail@plt+0x6d9c>
   193c0:	ldrb	r3, [r4, #2]
   193c4:	cmp	r3, #0
   193c8:	bne	19168 <__assert_fail@plt+0x6b30>
   193cc:	add	r6, r6, #1
   193d0:	b	1923c <__assert_fail@plt+0x6c04>
   193d4:	cmp	r3, #68	; 0x44
   193d8:	bne	19168 <__assert_fail@plt+0x6b30>
   193dc:	ldrb	r3, [r4, #2]
   193e0:	cmp	r3, #0
   193e4:	bne	19168 <__assert_fail@plt+0x6b30>
   193e8:	add	r2, r9, r2
   193ec:	add	r8, sp, #32
   193f0:	mov	r1, #44	; 0x2c
   193f4:	str	r3, [sp, #20]
   193f8:	ldr	r2, [r2, #4]
   193fc:	strh	r1, [r8, #-8]!
   19400:	mov	r1, r8
   19404:	str	r2, [sp, #8]
   19408:	add	r2, sp, #20
   1940c:	ldr	r0, [sp, #8]
   19410:	bl	120a4 <__strtok_r@plt>
   19414:	subs	r4, r0, #0
   19418:	ldrne	r5, [pc, #244]	; 19514 <__assert_fail@plt+0x6edc>
   1941c:	beq	194d8 <__assert_fail@plt+0x6ea0>
   19420:	mov	sl, #0
   19424:	mov	fp, sl
   19428:	mov	r1, r4
   1942c:	ldr	r0, [r5, sl]
   19430:	bl	11fb4 <strcmp@plt>
   19434:	movw	r1, #59404	; 0xe80c
   19438:	movt	r1, #2
   1943c:	cmp	r0, #0
   19440:	beq	194bc <__assert_fail@plt+0x6e84>
   19444:	add	fp, fp, #1
   19448:	add	sl, sl, #12
   1944c:	cmp	fp, #7
   19450:	bne	19428 <__assert_fail@plt+0x6df0>
   19454:	mov	r2, #5
   19458:	movw	r1, #60428	; 0xec0c
   1945c:	mov	r0, #0
   19460:	movt	r1, #2
   19464:	bl	120d4 <dcgettext@plt>
   19468:	ldr	r1, [r7, #72]	; 0x48
   1946c:	ldr	r2, [sp, #8]
   19470:	mov	r4, r0
   19474:	mov	r0, #0
   19478:	bl	28cec <__assert_fail@plt+0x166b4>
   1947c:	mov	r2, r4
   19480:	mov	r3, r0
   19484:	mov	r0, #0
   19488:	mov	r1, r0
   1948c:	bl	12224 <error@plt>
   19490:	mov	r0, #0
   19494:	mov	r1, r8
   19498:	add	r2, sp, #20
   1949c:	bl	120a4 <__strtok_r@plt>
   194a0:	subs	r4, r0, #0
   194a4:	bne	19420 <__assert_fail@plt+0x6de8>
   194a8:	ldr	r3, [r7, #44]	; 0x2c
   194ac:	tst	r3, #16
   194b0:	bne	194fc <__assert_fail@plt+0x6ec4>
   194b4:	add	r6, r6, #1
   194b8:	b	191e0 <__assert_fail@plt+0x6ba8>
   194bc:	add	r2, fp, fp, lsl #1
   194c0:	ldr	r3, [r7, #44]	; 0x2c
   194c4:	add	r1, r1, r2, lsl #2
   194c8:	ldr	r2, [r1, #36]	; 0x24
   194cc:	orr	r3, r2, r3
   194d0:	str	r3, [r7, #44]	; 0x2c
   194d4:	b	19490 <__assert_fail@plt+0x6e58>
   194d8:	mov	r2, #5
   194dc:	movw	r1, #60464	; 0xec30
   194e0:	movt	r1, #2
   194e4:	bl	120d4 <dcgettext@plt>
   194e8:	mov	r1, r4
   194ec:	mov	r2, r0
   194f0:	mov	r0, #1
   194f4:	bl	12224 <error@plt>
   194f8:	b	194b4 <__assert_fail@plt+0x6e7c>
   194fc:	movw	r3, #21920	; 0x55a0
   19500:	movt	r3, #4
   19504:	ldr	r0, [r3]
   19508:	bl	1856c <__assert_fail@plt+0x5f34>
   1950c:	mov	r0, r4
   19510:	bl	12308 <exit@plt>
   19514:	andeq	lr, r2, ip, lsr #16
   19518:	push	{r4, r5, r6, lr}
   1951c:	movw	r5, #21904	; 0x5590
   19520:	movt	r5, #4
   19524:	sub	sp, sp, #16
   19528:	mov	r4, r0
   1952c:	movw	r0, #60500	; 0xec54
   19530:	ldr	r3, [r5]
   19534:	movt	r0, #2
   19538:	mov	r6, #0
   1953c:	str	r3, [sp, #12]
   19540:	bl	12260 <getenv@plt>
   19544:	cmp	r0, #0
   19548:	strbeq	r0, [r4, #18]
   1954c:	movne	r3, #1
   19550:	strbne	r3, [r4, #18]
   19554:	bl	18a10 <__assert_fail@plt+0x63d8>
   19558:	str	r6, [r4, #60]	; 0x3c
   1955c:	strb	r0, [r4, #56]	; 0x38
   19560:	mov	r0, r6
   19564:	bl	12584 <isatty@plt>
   19568:	cmp	r0, #0
   1956c:	strbne	r6, [r4, #16]
   19570:	strbeq	r0, [r4, #17]
   19574:	mov	r6, #0
   19578:	movne	r3, #1
   1957c:	strbne	r3, [r4, #17]
   19580:	ldrb	r3, [r4, #18]
   19584:	mov	r1, r6
   19588:	strbeq	r0, [r4, #16]
   1958c:	add	r0, sp, #4
   19590:	cmp	r3, #0
   19594:	strb	r6, [r4, #1]
   19598:	movne	r3, #0
   1959c:	strbne	r3, [r4, #17]
   195a0:	mov	r3, #1
   195a4:	strb	r3, [r4]
   195a8:	mvn	r3, #0
   195ac:	str	r3, [r4, #8]
   195b0:	str	r3, [r4, #4]
   195b4:	bl	12200 <gettimeofday@plt>
   195b8:	cmp	r0, r6
   195bc:	bne	19684 <__assert_fail@plt+0x704c>
   195c0:	ldr	r3, [sp, #8]
   195c4:	mov	r6, #1000	; 0x3e8
   195c8:	ldr	r0, [sp, #4]
   195cc:	mul	r6, r6, r3
   195d0:	ldrb	r2, [r4, #18]
   195d4:	sub	r3, r0, #86016	; 0x15000
   195d8:	str	r0, [r4, #20]
   195dc:	cmp	r2, #0
   195e0:	sub	r3, r3, #384	; 0x180
   195e4:	str	r6, [r4, #24]
   195e8:	movw	r0, #60532	; 0xec74
   195ec:	str	r3, [r4, #28]
   195f0:	movt	r0, #2
   195f4:	mov	r3, #0
   195f8:	str	r6, [r4, #32]
   195fc:	strb	r3, [r4, #36]	; 0x24
   19600:	mov	r6, #0
   19604:	strb	r3, [r4, #13]
   19608:	strb	r3, [r4, #14]
   1960c:	strb	r3, [r4, #15]
   19610:	movne	r3, #512	; 0x200
   19614:	moveq	r3, #1024	; 0x400
   19618:	str	r6, [r4, #44]	; 0x2c
   1961c:	str	r3, [r4, #40]	; 0x28
   19620:	mov	r3, #2
   19624:	strh	r3, [r4, #68]	; 0x44
   19628:	bl	12260 <getenv@plt>
   1962c:	cmp	r0, r6
   19630:	beq	19658 <__assert_fail@plt+0x7020>
   19634:	mov	r2, #5
   19638:	movw	r1, #60548	; 0xec84
   1963c:	mov	r0, r6
   19640:	movt	r1, #2
   19644:	bl	120d4 <dcgettext@plt>
   19648:	mov	r1, r6
   1964c:	mov	r2, r0
   19650:	mov	r0, #1
   19654:	bl	12224 <error@plt>
   19658:	mov	r0, #0
   1965c:	strb	r0, [r4, #12]
   19660:	bl	1f208 <__assert_fail@plt+0xcbd0>
   19664:	ldr	r2, [sp, #12]
   19668:	ldr	r3, [r5]
   1966c:	mov	r1, #6
   19670:	str	r1, [r4, #72]	; 0x48
   19674:	cmp	r2, r3
   19678:	bne	196b0 <__assert_fail@plt+0x7078>
   1967c:	add	sp, sp, #16
   19680:	pop	{r4, r5, r6, pc}
   19684:	mov	r0, r6
   19688:	bl	12098 <time@plt>
   1968c:	cmn	r0, #1
   19690:	bne	195d0 <__assert_fail@plt+0x6f98>
   19694:	movw	r0, #60516	; 0xec64
   19698:	movw	r1, #59640	; 0xe8f8
   1969c:	movt	r0, #2
   196a0:	movt	r1, #2
   196a4:	mov	r2, #960	; 0x3c0
   196a8:	ldr	r3, [pc, #4]	; 196b4 <__assert_fail@plt+0x707c>
   196ac:	bl	12638 <__assert_fail@plt>
   196b0:	bl	120e0 <__stack_chk_fail@plt>
   196b4:	ldrdeq	lr, [r2], -r8
   196b8:	ldrb	r3, [r2, #18]
   196bc:	push	{r4, r5, r6, lr}
   196c0:	cmp	r3, #0
   196c4:	mov	r4, r2
   196c8:	ldr	r2, [r2, #164]	; 0xa4
   196cc:	mov	r6, r0
   196d0:	mov	r5, r1
   196d4:	add	r3, r2, #1
   196d8:	str	r3, [r4, #164]	; 0xa4
   196dc:	bne	196ec <__assert_fail@plt+0x70b4>
   196e0:	ldrb	r3, [r4, #19]
   196e4:	cmp	r3, #0
   196e8:	beq	19738 <__assert_fail@plt+0x7100>
   196ec:	mov	r0, r6
   196f0:	mov	r1, r5
   196f4:	mov	r2, r4
   196f8:	bl	188f8 <__assert_fail@plt+0x62c0>
   196fc:	cmp	r0, #0
   19700:	bne	19730 <__assert_fail@plt+0x70f8>
   19704:	mov	r0, r6
   19708:	mov	r1, r5
   1970c:	ldr	r3, [r4]
   19710:	mov	r2, r4
   19714:	blx	r3
   19718:	cmp	r0, #0
   1971c:	beq	19730 <__assert_fail@plt+0x70f8>
   19720:	ldr	r3, [r4, #168]	; 0xa8
   19724:	add	r3, r3, #1
   19728:	str	r3, [r4, #168]	; 0xa8
   1972c:	pop	{r4, r5, r6, pc}
   19730:	mov	r0, #0
   19734:	pop	{r4, r5, r6, pc}
   19738:	ldrb	r3, [r4, #20]
   1973c:	cmp	r3, #0
   19740:	bne	196ec <__assert_fail@plt+0x70b4>
   19744:	b	19704 <__assert_fail@plt+0x70cc>
   19748:	movw	r3, #18676	; 0x48f4
   1974c:	movt	r3, #1
   19750:	cmp	r0, r3
   19754:	beq	19770 <__assert_fail@plt+0x7138>
   19758:	movw	r3, #20196	; 0x4ee4
   1975c:	movt	r3, #1
   19760:	subs	r3, r0, r3
   19764:	rsbs	r0, r3, #0
   19768:	adcs	r0, r0, r3
   1976c:	bx	lr
   19770:	mov	r0, #1
   19774:	bx	lr
   19778:	movw	r3, #25384	; 0x6328
   1977c:	movt	r3, #4
   19780:	mov	r2, r1
   19784:	ldr	r1, [r3, #72]	; 0x48
   19788:	b	28cec <__assert_fail@plt+0x166b4>
   1978c:	movw	r3, #25340	; 0x62fc
   19790:	movt	r3, #4
   19794:	ldr	r2, [r3, #28]
   19798:	cmp	r2, r0
   1979c:	strlt	r0, [r3, #28]
   197a0:	bx	lr
   197a4:	mov	r3, r1
   197a8:	mov	r2, #1
   197ac:	mov	r1, r0
   197b0:	mov	r0, #0
   197b4:	b	18370 <__assert_fail@plt+0x5d38>
   197b8:	mov	r2, r0
   197bc:	mov	r0, #1
   197c0:	push	{r3, lr}
   197c4:	mov	r3, r1
   197c8:	mov	r1, r2
   197cc:	mov	r2, r0
   197d0:	bl	18370 <__assert_fail@plt+0x5d38>
   197d4:	bl	125cc <abort@plt>
   197d8:	mov	r2, r0
   197dc:	mov	r0, #0
   197e0:	mov	r3, r1
   197e4:	mov	r1, r2
   197e8:	mov	r2, r0
   197ec:	b	18370 <__assert_fail@plt+0x5d38>
   197f0:	push	{r3, lr}
   197f4:	movw	ip, #25340	; 0x62fc
   197f8:	mov	lr, #0
   197fc:	movt	ip, #4
   19800:	mov	r3, r1
   19804:	mov	r2, lr
   19808:	mov	r1, r0
   1980c:	mov	r0, #1
   19810:	strb	lr, [ip, #40]	; 0x28
   19814:	bl	18370 <__assert_fail@plt+0x5d38>
   19818:	bl	125cc <abort@plt>
   1981c:	push	{r4, r5}
   19820:	mov	ip, r1
   19824:	ldrd	r4, [r0, #8]
   19828:	ldrd	r2, [r1, #8]
   1982c:	cmp	r5, r3
   19830:	cmpeq	r4, r2
   19834:	movne	r0, #0
   19838:	beq	19844 <__assert_fail@plt+0x720c>
   1983c:	pop	{r4, r5}
   19840:	bx	lr
   19844:	ldrd	r0, [r0]
   19848:	ldrd	r2, [ip]
   1984c:	pop	{r4, r5}
   19850:	cmp	r1, r3
   19854:	cmpeq	r0, r2
   19858:	movne	r0, #0
   1985c:	moveq	r0, #1
   19860:	bx	lr
   19864:	push	{r3, r4, r5, lr}
   19868:	mov	r2, r1
   1986c:	ldrd	r4, [r0, #8]
   19870:	mov	r3, #0
   19874:	ldrd	r0, [r0]
   19878:	eor	r0, r0, r4
   1987c:	eor	r1, r1, r5
   19880:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   19884:	mov	r0, r2
   19888:	pop	{r3, r4, r5, pc}
   1988c:	push	{r4, lr}
   19890:	mov	r4, r0
   19894:	ldr	r0, [r0, #20]
   19898:	cmp	r0, #0
   1989c:	beq	198ac <__assert_fail@plt+0x7274>
   198a0:	bl	12458 <fclose@plt>
   198a4:	cmp	r0, #0
   198a8:	bne	198c0 <__assert_fail@plt+0x7288>
   198ac:	ldr	r0, [r4, #16]
   198b0:	bl	12020 <free@plt>
   198b4:	mov	r0, r4
   198b8:	pop	{r4, lr}
   198bc:	b	12020 <free@plt>
   198c0:	bl	1238c <__errno_location@plt>
   198c4:	ldr	r1, [r4, #16]
   198c8:	ldr	r0, [r0]
   198cc:	bl	197f0 <__assert_fail@plt+0x71b8>
   198d0:	push	{r4, r5, lr}
   198d4:	mov	r5, r0
   198d8:	sub	sp, sp, #12
   198dc:	mov	r0, #8
   198e0:	bl	12284 <malloc@plt>
   198e4:	subs	r4, r0, #0
   198e8:	beq	1993c <__assert_fail@plt+0x7304>
   198ec:	mov	r0, r5
   198f0:	bl	123b0 <__strdup@plt>
   198f4:	cmp	r0, #0
   198f8:	mov	r5, r0
   198fc:	str	r0, [r4]
   19900:	beq	19948 <__assert_fail@plt+0x7310>
   19904:	movw	r3, #39052	; 0x988c
   19908:	movw	r2, #39012	; 0x9864
   1990c:	movt	r3, #1
   19910:	movt	r2, #1
   19914:	str	r3, [sp]
   19918:	mov	r0, #11
   1991c:	movw	r3, #38940	; 0x981c
   19920:	mov	r1, #0
   19924:	movt	r3, #1
   19928:	bl	22798 <__assert_fail@plt+0x10160>
   1992c:	cmp	r0, #0
   19930:	mov	r5, r0
   19934:	str	r0, [r4, #4]
   19938:	beq	19958 <__assert_fail@plt+0x7320>
   1993c:	mov	r0, r4
   19940:	add	sp, sp, #12
   19944:	pop	{r4, r5, pc}
   19948:	mov	r0, r4
   1994c:	bl	12020 <free@plt>
   19950:	mov	r0, r5
   19954:	b	19940 <__assert_fail@plt+0x7308>
   19958:	ldr	r0, [r4]
   1995c:	bl	12020 <free@plt>
   19960:	mov	r0, r4
   19964:	bl	12020 <free@plt>
   19968:	mov	r0, r5
   1996c:	b	19940 <__assert_fail@plt+0x7308>
   19970:	push	{r4, lr}
   19974:	mov	r4, r0
   19978:	ldr	r0, [r0]
   1997c:	bl	12020 <free@plt>
   19980:	ldr	r0, [r4, #4]
   19984:	pop	{r4, lr}
   19988:	b	22968 <__assert_fail@plt+0x10330>
   1998c:	push	{r4, r5, r6, r7, r8, lr}
   19990:	movw	r7, #21904	; 0x5590
   19994:	movt	r7, #4
   19998:	sub	sp, sp, #112	; 0x70
   1999c:	mov	r8, r0
   199a0:	mov	r0, #24
   199a4:	ldr	r3, [r7]
   199a8:	mov	r5, r1
   199ac:	str	r3, [sp, #108]	; 0x6c
   199b0:	bl	12284 <malloc@plt>
   199b4:	subs	r6, r0, #0
   199b8:	beq	19a94 <__assert_fail@plt+0x745c>
   199bc:	mov	r0, r5
   199c0:	bl	123b0 <__strdup@plt>
   199c4:	cmp	r0, #0
   199c8:	mov	r4, r0
   199cc:	str	r0, [r6, #16]
   199d0:	beq	19a9c <__assert_fail@plt+0x7464>
   199d4:	mov	r0, r5
   199d8:	ldr	r1, [r8]
   199dc:	bl	21de4 <__assert_fail@plt+0xf7ac>
   199e0:	cmp	r0, #0
   199e4:	mov	r4, r0
   199e8:	str	r0, [r6, #20]
   199ec:	beq	19a9c <__assert_fail@plt+0x7464>
   199f0:	bl	12410 <fileno@plt>
   199f4:	subs	r4, r0, #0
   199f8:	blt	19ac8 <__assert_fail@plt+0x7490>
   199fc:	mov	r1, #1
   19a00:	bl	21720 <__assert_fail@plt+0xf0e8>
   19a04:	mov	r1, r4
   19a08:	mov	r0, #3
   19a0c:	mov	r2, sp
   19a10:	bl	12164 <__fxstat64@plt>
   19a14:	cmp	r0, #0
   19a18:	blt	19a68 <__assert_fail@plt+0x7430>
   19a1c:	ldrd	r4, [sp]
   19a20:	mov	r1, r6
   19a24:	ldrd	r2, [sp, #96]	; 0x60
   19a28:	ldr	r0, [r8, #4]
   19a2c:	strd	r4, [r6]
   19a30:	strd	r2, [r6, #8]
   19a34:	bl	224e8 <__assert_fail@plt+0xfeb0>
   19a38:	subs	r4, r0, #0
   19a3c:	beq	19a78 <__assert_fail@plt+0x7440>
   19a40:	mov	r0, r6
   19a44:	bl	1988c <__assert_fail@plt+0x7254>
   19a48:	ldr	r4, [r4, #20]
   19a4c:	ldr	r2, [sp, #108]	; 0x6c
   19a50:	mov	r0, r4
   19a54:	ldr	r3, [r7]
   19a58:	cmp	r2, r3
   19a5c:	bne	19ac4 <__assert_fail@plt+0x748c>
   19a60:	add	sp, sp, #112	; 0x70
   19a64:	pop	{r4, r5, r6, r7, r8, pc}
   19a68:	mov	r0, r6
   19a6c:	mov	r4, #0
   19a70:	bl	1988c <__assert_fail@plt+0x7254>
   19a74:	b	19a4c <__assert_fail@plt+0x7414>
   19a78:	ldr	r0, [r8, #4]
   19a7c:	mov	r1, r6
   19a80:	bl	22d84 <__assert_fail@plt+0x1074c>
   19a84:	subs	r4, r0, #0
   19a88:	beq	19aa8 <__assert_fail@plt+0x7470>
   19a8c:	ldr	r4, [r6, #20]
   19a90:	b	19a4c <__assert_fail@plt+0x7414>
   19a94:	mov	r4, r6
   19a98:	b	19a4c <__assert_fail@plt+0x7414>
   19a9c:	mov	r0, r6
   19aa0:	bl	12020 <free@plt>
   19aa4:	b	19a4c <__assert_fail@plt+0x7414>
   19aa8:	bl	1238c <__errno_location@plt>
   19aac:	ldr	r8, [r0]
   19ab0:	mov	r5, r0
   19ab4:	mov	r0, r6
   19ab8:	bl	1988c <__assert_fail@plt+0x7254>
   19abc:	str	r8, [r5]
   19ac0:	b	19a4c <__assert_fail@plt+0x7414>
   19ac4:	bl	120e0 <__stack_chk_fail@plt>
   19ac8:	movw	r0, #61064	; 0xee88
   19acc:	movw	r1, #61072	; 0xee90
   19ad0:	movw	r3, #61048	; 0xee78
   19ad4:	movt	r0, #2
   19ad8:	movt	r1, #2
   19adc:	mov	r2, #166	; 0xa6
   19ae0:	movt	r3, #2
   19ae4:	bl	12638 <__assert_fail@plt>
   19ae8:	push	{r1, r2, r3}
   19aec:	mov	r1, #1
   19af0:	push	{r4, r5, lr}
   19af4:	movw	r4, #21904	; 0x5590
   19af8:	movt	r4, #4
   19afc:	sub	sp, sp, #8
   19b00:	add	ip, sp, #24
   19b04:	mov	r5, r0
   19b08:	ldr	lr, [r4]
   19b0c:	ldr	r2, [sp, #20]
   19b10:	mov	r3, ip
   19b14:	ldr	r0, [r0, #4]
   19b18:	str	lr, [sp, #4]
   19b1c:	str	ip, [sp]
   19b20:	bl	122b4 <__vfprintf_chk@plt>
   19b24:	cmp	r0, #0
   19b28:	blt	19b4c <__assert_fail@plt+0x7514>
   19b2c:	ldr	r2, [sp, #4]
   19b30:	ldr	r3, [r4]
   19b34:	cmp	r2, r3
   19b38:	bne	19b60 <__assert_fail@plt+0x7528>
   19b3c:	add	sp, sp, #8
   19b40:	pop	{r4, r5, lr}
   19b44:	add	sp, sp, #12
   19b48:	bx	lr
   19b4c:	bl	1238c <__errno_location@plt>
   19b50:	ldr	r1, [r5, #8]
   19b54:	ldr	r0, [r0]
   19b58:	bl	197d8 <__assert_fail@plt+0x71a0>
   19b5c:	b	19b2c <__assert_fail@plt+0x74f4>
   19b60:	bl	120e0 <__stack_chk_fail@plt>
   19b64:	cmp	r0, #32768	; 0x8000
   19b68:	beq	19bc0 <__assert_fail@plt+0x7588>
   19b6c:	cmp	r0, #16384	; 0x4000
   19b70:	beq	19bcc <__assert_fail@plt+0x7594>
   19b74:	cmp	r0, #40960	; 0xa000
   19b78:	beq	19bd8 <__assert_fail@plt+0x75a0>
   19b7c:	cmp	r0, #49152	; 0xc000
   19b80:	beq	19bb4 <__assert_fail@plt+0x757c>
   19b84:	cmp	r0, #24576	; 0x6000
   19b88:	beq	19be4 <__assert_fail@plt+0x75ac>
   19b8c:	cmp	r0, #8192	; 0x2000
   19b90:	beq	19bf0 <__assert_fail@plt+0x75b8>
   19b94:	cmp	r0, #4096	; 0x1000
   19b98:	movw	r2, #61264	; 0xef50
   19b9c:	movw	r3, #7888	; 0x1ed0
   19ba0:	movt	r2, #2
   19ba4:	movt	r3, #3
   19ba8:	movne	r0, r2
   19bac:	moveq	r0, r3
   19bb0:	bx	lr
   19bb4:	movw	r0, #55948	; 0xda8c
   19bb8:	movt	r0, #2
   19bbc:	bx	lr
   19bc0:	movw	r0, #8468	; 0x2114
   19bc4:	movt	r0, #3
   19bc8:	bx	lr
   19bcc:	movw	r0, #11480	; 0x2cd8
   19bd0:	movt	r0, #3
   19bd4:	bx	lr
   19bd8:	movw	r0, #56516	; 0xdcc4
   19bdc:	movt	r0, #2
   19be0:	bx	lr
   19be4:	movw	r0, #13508	; 0x34c4
   19be8:	movt	r0, #3
   19bec:	bx	lr
   19bf0:	movw	r0, #65528	; 0xfff8
   19bf4:	movt	r0, #2
   19bf8:	bx	lr
   19bfc:	push	{r4, lr}
   19c00:	mov	r4, r0
   19c04:	ldrb	ip, [r4, #12]
   19c08:	sub	sp, sp, #8
   19c0c:	mov	r3, r1
   19c10:	ldr	r0, [r0, #4]
   19c14:	ldr	r1, [r4, #16]
   19c18:	str	r2, [sp]
   19c1c:	mov	r2, ip
   19c20:	bl	206f4 <__assert_fail@plt+0xe0bc>
   19c24:	cmp	r0, #0
   19c28:	blt	19c34 <__assert_fail@plt+0x75fc>
   19c2c:	add	sp, sp, #8
   19c30:	pop	{r4, pc}
   19c34:	bl	1238c <__errno_location@plt>
   19c38:	ldr	r1, [r4, #8]
   19c3c:	ldr	r0, [r0]
   19c40:	add	sp, sp, #8
   19c44:	pop	{r4, lr}
   19c48:	b	197d8 <__assert_fail@plt+0x71a0>
   19c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c50:	movw	r3, #21904	; 0x5590
   19c54:	sub	sp, sp, #148	; 0x94
   19c58:	movt	r3, #4
   19c5c:	add	r5, sp, #48	; 0x30
   19c60:	cmp	r2, #43	; 0x2b
   19c64:	str	r3, [sp, #24]
   19c68:	mov	r4, r2
   19c6c:	ldr	r3, [r3]
   19c70:	stm	r5, {r0, r1}
   19c74:	str	r3, [sp, #140]	; 0x8c
   19c78:	beq	1a01c <__assert_fail@plt+0x79e4>
   19c7c:	sub	r3, r2, #64	; 0x40
   19c80:	strb	r2, [sp, #101]	; 0x65
   19c84:	cmp	r3, #24
   19c88:	mov	r1, #37	; 0x25
   19c8c:	mov	r2, #0
   19c90:	strb	r1, [sp, #100]	; 0x64
   19c94:	strb	r2, [sp, #102]	; 0x66
   19c98:	bls	19e88 <__assert_fail@plt+0x7850>
   19c9c:	mov	r6, #0
   19ca0:	strb	r6, [sp, #108]	; 0x6c
   19ca4:	str	r6, [sp, #28]
   19ca8:	cmp	r4, #64	; 0x40
   19cac:	beq	19dc0 <__assert_fail@plt+0x7788>
   19cb0:	mov	r0, r5
   19cb4:	bl	122cc <localtime@plt>
   19cb8:	subs	r9, r0, #0
   19cbc:	beq	19dc0 <__assert_fail@plt+0x7788>
   19cc0:	add	r0, sp, #100	; 0x64
   19cc4:	movw	r6, #22112	; 0x5660
   19cc8:	bl	1232c <strlen@plt>
   19ccc:	movt	r6, #4
   19cd0:	add	r0, r0, #2
   19cd4:	bl	29604 <__assert_fail@plt+0x16fcc>
   19cd8:	mov	r3, #95	; 0x5f
   19cdc:	mov	r4, r0
   19ce0:	mov	r7, r0
   19ce4:	strb	r3, [r4], #1
   19ce8:	add	r0, sp, #100	; 0x64
   19cec:	bl	1232c <strlen@plt>
   19cf0:	add	r1, sp, #100	; 0x64
   19cf4:	add	r2, r0, #1
   19cf8:	mov	r0, r4
   19cfc:	bl	1205c <memcpy@plt>
   19d00:	mov	lr, r9
   19d04:	ldm	lr!, {r0, r1, r2, r3}
   19d08:	add	ip, sp, #56	; 0x38
   19d0c:	stmia	ip!, {r0, r1, r2, r3}
   19d10:	ldm	lr!, {r0, r1, r2, r3}
   19d14:	ldr	r4, [sp, #56]	; 0x38
   19d18:	cmp	r4, #10
   19d1c:	stmia	ip!, {r0, r1, r2, r3}
   19d20:	subgt	r4, r4, #11
   19d24:	ldm	lr, {r0, r1, r2}
   19d28:	addle	r4, r4, #11
   19d2c:	str	r4, [sp, #56]	; 0x38
   19d30:	ldr	r4, [r6]
   19d34:	cmp	r4, #0
   19d38:	stm	ip, {r0, r1, r2}
   19d3c:	beq	1a108 <__assert_fail@plt+0x7ad0>
   19d40:	movw	r8, #22112	; 0x5660
   19d44:	movw	sl, #43689	; 0xaaa9
   19d48:	movt	r8, #4
   19d4c:	movt	sl, #43690	; 0xaaaa
   19d50:	b	19d7c <__assert_fail@plt+0x7744>
   19d54:	cmp	ip, sl
   19d58:	bhi	1a120 <__assert_fail@plt+0x7ae8>
   19d5c:	add	r3, ip, #1
   19d60:	add	ip, ip, r3, lsr #1
   19d64:	mov	r0, r4
   19d68:	mov	r1, ip
   19d6c:	str	ip, [r6, #4]
   19d70:	bl	2962c <__assert_fail@plt+0x16ff4>
   19d74:	mov	r4, r0
   19d78:	str	r0, [r6]
   19d7c:	mov	r0, r4
   19d80:	ldr	r1, [r6, #4]
   19d84:	mov	r2, r7
   19d88:	mov	r3, r9
   19d8c:	bl	122a8 <strftime@plt>
   19d90:	movw	r5, #22112	; 0x5660
   19d94:	ldr	ip, [r8, #4]
   19d98:	movt	r5, #4
   19d9c:	cmp	r0, #0
   19da0:	beq	19dac <__assert_fail@plt+0x7774>
   19da4:	cmp	r0, ip
   19da8:	bcc	19ee0 <__assert_fail@plt+0x78a8>
   19dac:	cmp	r4, #0
   19db0:	bne	19d54 <__assert_fail@plt+0x771c>
   19db4:	cmp	ip, #0
   19db8:	moveq	ip, #64	; 0x40
   19dbc:	b	19d64 <__assert_fail@plt+0x772c>
   19dc0:	ldr	r0, [sp, #48]	; 0x30
   19dc4:	cmp	r0, #0
   19dc8:	asr	r1, r0, #31
   19dcc:	blt	1a034 <__assert_fail@plt+0x79fc>
   19dd0:	ldr	r7, [pc, #1004]	; 1a1c4 <__assert_fail@plt+0x7b8c>
   19dd4:	mov	r4, #1
   19dd8:	mov	r5, #0
   19ddc:	mov	r3, #0
   19de0:	strd	r4, [sp]
   19de4:	add	r2, r7, #1
   19de8:	strd	r4, [sp, #8]
   19dec:	bl	22f18 <__assert_fail@plt+0x108e0>
   19df0:	cmp	r0, r7
   19df4:	mov	r4, r0
   19df8:	bls	1a124 <__assert_fail@plt+0x7aec>
   19dfc:	add	r3, r7, #788	; 0x314
   19e00:	add	r3, r3, #3
   19e04:	cmp	r0, r3
   19e08:	bcs	1a148 <__assert_fail@plt+0x7b10>
   19e0c:	ldr	r3, [sp, #48]	; 0x30
   19e10:	cmp	r3, #0
   19e14:	sublt	r4, r0, #1
   19e18:	movlt	r3, #45	; 0x2d
   19e1c:	strblt	r3, [r0, #-1]
   19e20:	cmp	r6, #0
   19e24:	mov	r0, r4
   19e28:	beq	19e6c <__assert_fail@plt+0x7834>
   19e2c:	bl	1232c <strlen@plt>
   19e30:	rsb	r7, r7, r4
   19e34:	movw	r3, #790	; 0x316
   19e38:	add	r0, r7, r0
   19e3c:	cmp	r0, r3
   19e40:	bhi	1a184 <__assert_fail@plt+0x7b4c>
   19e44:	rsb	r0, r0, #788	; 0x314
   19e48:	add	r5, r0, #2
   19e4c:	add	r0, sp, #108	; 0x6c
   19e50:	bl	1232c <strlen@plt>
   19e54:	cmp	r5, r0
   19e58:	bls	1a0b4 <__assert_fail@plt+0x7a7c>
   19e5c:	add	r1, sp, #108	; 0x6c
   19e60:	mov	r0, r4
   19e64:	bl	121ac <strcat@plt>
   19e68:	mov	r0, r4
   19e6c:	ldr	r1, [sp, #24]
   19e70:	ldr	r2, [sp, #140]	; 0x8c
   19e74:	ldr	r3, [r1]
   19e78:	cmp	r2, r3
   19e7c:	bne	1a144 <__assert_fail@plt+0x7b0c>
   19e80:	add	sp, sp, #148	; 0x94
   19e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e88:	mov	r1, #1
   19e8c:	mov	r2, r1
   19e90:	lsl	r3, r1, r3
   19e94:	movt	r2, #280	; 0x118
   19e98:	and	r2, r3, r2
   19e9c:	cmp	r2, #0
   19ea0:	beq	19c9c <__assert_fail@plt+0x7664>
   19ea4:	ldr	ip, [sp, #52]	; 0x34
   19ea8:	mov	r1, #32
   19eac:	movw	r2, #61488	; 0xf030
   19eb0:	mov	r3, r1
   19eb4:	movt	r2, #2
   19eb8:	add	r0, sp, #108	; 0x6c
   19ebc:	str	r2, [sp]
   19ec0:	mov	r2, #1
   19ec4:	str	ip, [sp, #4]
   19ec8:	bl	12620 <__snprintf_chk@plt>
   19ecc:	cmp	r0, #31
   19ed0:	str	r0, [sp, #28]
   19ed4:	bgt	1a1a4 <__assert_fail@plt+0x7b6c>
   19ed8:	mov	r6, #1
   19edc:	b	19ca8 <__assert_fail@plt+0x7670>
   19ee0:	ldr	r1, [sp, #28]
   19ee4:	mov	fp, r0
   19ee8:	mov	r0, r4
   19eec:	add	r3, r1, #1
   19ef0:	add	r3, r3, fp
   19ef4:	str	r3, [sp, #40]	; 0x28
   19ef8:	mov	r1, r3
   19efc:	bl	2962c <__assert_fail@plt+0x16ff4>
   19f00:	ldr	r2, [sp, #40]	; 0x28
   19f04:	stm	r5, {r0, r2}
   19f08:	mov	r0, r2
   19f0c:	bl	29604 <__assert_fail@plt+0x16fcc>
   19f10:	ldr	r1, [r5, #4]
   19f14:	add	r3, sp, #56	; 0x38
   19f18:	mov	r2, r7
   19f1c:	str	r0, [sp, #36]	; 0x24
   19f20:	bl	122a8 <strftime@plt>
   19f24:	ldr	r5, [r5]
   19f28:	ldrb	r1, [r5]
   19f2c:	str	r5, [sp, #32]
   19f30:	cmp	r1, #0
   19f34:	beq	1a000 <__assert_fail@plt+0x79c8>
   19f38:	ldr	r3, [sp, #36]	; 0x24
   19f3c:	ldrb	r4, [r3]
   19f40:	cmp	r4, #0
   19f44:	beq	1a000 <__assert_fail@plt+0x79c8>
   19f48:	mov	r2, #0
   19f4c:	str	fp, [sp, #44]	; 0x2c
   19f50:	mov	r9, r2
   19f54:	mov	r5, r2
   19f58:	ldr	sl, [sp, #32]
   19f5c:	mov	fp, r2
   19f60:	mov	r6, r3
   19f64:	mov	r8, r2
   19f68:	b	19f98 <__assert_fail@plt+0x7960>
   19f6c:	rsb	r2, r8, r9
   19f70:	cmp	r2, fp
   19f74:	bne	1a000 <__assert_fail@plt+0x79c8>
   19f78:	add	fp, fp, #1
   19f7c:	ldrb	r1, [sl, #1]!
   19f80:	add	r9, r9, #1
   19f84:	cmp	r1, #0
   19f88:	beq	19fdc <__assert_fail@plt+0x79a4>
   19f8c:	ldrb	r4, [r6, #1]!
   19f90:	cmp	r4, #0
   19f94:	beq	1a000 <__assert_fail@plt+0x79c8>
   19f98:	cmp	r1, r4
   19f9c:	beq	19f7c <__assert_fail@plt+0x7944>
   19fa0:	bl	122f0 <__ctype_b_loc@plt>
   19fa4:	lsl	r4, r4, #1
   19fa8:	ldr	r2, [r0]
   19fac:	ldrh	r2, [r2, r4]
   19fb0:	tst	r2, #2048	; 0x800
   19fb4:	beq	1a000 <__assert_fail@plt+0x79c8>
   19fb8:	cmp	r5, #0
   19fbc:	bne	19f6c <__assert_fail@plt+0x7934>
   19fc0:	ldrb	r1, [sl, #1]!
   19fc4:	mov	fp, #1
   19fc8:	mov	r8, r9
   19fcc:	mov	r5, fp
   19fd0:	cmp	r1, #0
   19fd4:	add	r9, r9, #1
   19fd8:	bne	19f8c <__assert_fail@plt+0x7954>
   19fdc:	ldr	r1, [sp, #36]	; 0x24
   19fe0:	mov	r6, fp
   19fe4:	mov	r2, r8
   19fe8:	ldr	fp, [sp, #44]	; 0x2c
   19fec:	ldrb	r3, [r1, r9]
   19ff0:	cmp	r3, #0
   19ff4:	bne	1a000 <__assert_fail@plt+0x79c8>
   19ff8:	cmp	r6, #2
   19ffc:	beq	1a040 <__assert_fail@plt+0x7a08>
   1a000:	mov	r0, r7
   1a004:	bl	12020 <free@plt>
   1a008:	ldr	r0, [sp, #36]	; 0x24
   1a00c:	bl	12020 <free@plt>
   1a010:	ldr	r3, [sp, #32]
   1a014:	add	r0, r3, #1
   1a018:	b	19e6c <__assert_fail@plt+0x7834>
   1a01c:	movw	r3, #61496	; 0xf038
   1a020:	movt	r3, #2
   1a024:	ldm	r3, {r0, r1}
   1a028:	str	r0, [sp, #100]	; 0x64
   1a02c:	strh	r1, [sp, #104]	; 0x68
   1a030:	b	19ea4 <__assert_fail@plt+0x786c>
   1a034:	rsbs	r0, r0, #0
   1a038:	rsc	r1, r1, #0
   1a03c:	b	19dd0 <__assert_fail@plt+0x7798>
   1a040:	str	r2, [sp, #20]
   1a044:	bl	122f0 <__ctype_b_loc@plt>
   1a048:	ldr	r2, [sp, #20]
   1a04c:	ldr	r3, [sp, #32]
   1a050:	add	r8, r2, #2
   1a054:	add	r4, r3, r8
   1a058:	ldrb	r3, [r3, r8]
   1a05c:	lsl	r3, r3, #1
   1a060:	ldr	r2, [r0]
   1a064:	ldrh	r3, [r2, r3]
   1a068:	tst	r3, #2048	; 0x800
   1a06c:	bne	1a000 <__assert_fail@plt+0x79c8>
   1a070:	ldr	r1, [sp, #28]
   1a074:	add	r2, fp, #1
   1a078:	rsb	r2, r8, r2
   1a07c:	add	r0, r8, r1
   1a080:	ldr	r1, [sp, #40]	; 0x28
   1a084:	add	r3, r2, r0
   1a088:	cmp	r1, r3
   1a08c:	bne	1a168 <__assert_fail@plt+0x7b30>
   1a090:	ldr	r3, [sp, #32]
   1a094:	mov	r1, r4
   1a098:	add	r0, r3, r0
   1a09c:	bl	12014 <memmove@plt>
   1a0a0:	mov	r0, r4
   1a0a4:	ldr	r2, [sp, #28]
   1a0a8:	add	r1, sp, #108	; 0x6c
   1a0ac:	bl	1205c <memcpy@plt>
   1a0b0:	b	1a000 <__assert_fail@plt+0x79c8>
   1a0b4:	mov	r0, #0
   1a0b8:	add	r1, sp, #108	; 0x6c
   1a0bc:	ldr	r3, [sp, #28]
   1a0c0:	movw	r2, #61412	; 0xefe4
   1a0c4:	str	r1, [sp, #4]
   1a0c8:	movt	r2, #2
   1a0cc:	mov	r1, r0
   1a0d0:	str	r5, [sp]
   1a0d4:	bl	12224 <error@plt>
   1a0d8:	add	r0, sp, #108	; 0x6c
   1a0dc:	bl	1232c <strlen@plt>
   1a0e0:	cmp	r5, r0
   1a0e4:	bhi	19e5c <__assert_fail@plt+0x7824>
   1a0e8:	movw	r0, #61460	; 0xf014
   1a0ec:	movw	r1, #61296	; 0xef70
   1a0f0:	movw	r3, #61084	; 0xee9c
   1a0f4:	movt	r0, #2
   1a0f8:	movt	r1, #2
   1a0fc:	movw	r2, #721	; 0x2d1
   1a100:	movt	r3, #2
   1a104:	bl	12638 <__assert_fail@plt>
   1a108:	mov	r0, #1
   1a10c:	str	r0, [r6, #4]
   1a110:	bl	29604 <__assert_fail@plt+0x16fcc>
   1a114:	mov	r4, r0
   1a118:	str	r0, [r6]
   1a11c:	b	19d40 <__assert_fail@plt+0x7708>
   1a120:	bl	2973c <__assert_fail@plt+0x17104>
   1a124:	movw	r0, #61356	; 0xefac
   1a128:	movw	r1, #61296	; 0xef70
   1a12c:	movw	r3, #61084	; 0xee9c
   1a130:	movt	r0, #2
   1a134:	movt	r1, #2
   1a138:	movw	r2, #698	; 0x2ba
   1a13c:	movt	r3, #2
   1a140:	bl	12638 <__assert_fail@plt>
   1a144:	bl	120e0 <__stack_chk_fail@plt>
   1a148:	movw	r0, #61364	; 0xefb4
   1a14c:	movw	r1, #61296	; 0xef70
   1a150:	movw	r3, #61084	; 0xee9c
   1a154:	movt	r0, #2
   1a158:	movt	r1, #2
   1a15c:	movw	r2, #699	; 0x2bb
   1a160:	movt	r3, #2
   1a164:	bl	12638 <__assert_fail@plt>
   1a168:	movw	r0, #61304	; 0xef78
   1a16c:	movw	r1, #61296	; 0xef70
   1a170:	movt	r0, #2
   1a174:	movt	r1, #2
   1a178:	movw	r2, #554	; 0x22a
   1a17c:	ldr	r3, [pc, #68]	; 1a1c8 <__assert_fail@plt+0x7b90>
   1a180:	bl	12638 <__assert_fail@plt>
   1a184:	movw	r0, #61392	; 0xefd0
   1a188:	movw	r1, #61296	; 0xef70
   1a18c:	movw	r3, #61084	; 0xee9c
   1a190:	movt	r0, #2
   1a194:	movt	r1, #2
   1a198:	mov	r2, #712	; 0x2c8
   1a19c:	movt	r3, #2
   1a1a0:	bl	12638 <__assert_fail@plt>
   1a1a4:	movw	r0, #61268	; 0xef54
   1a1a8:	movw	r1, #61296	; 0xef70
   1a1ac:	movw	r3, #61084	; 0xee9c
   1a1b0:	movt	r0, #2
   1a1b4:	movt	r1, #2
   1a1b8:	movw	r2, #666	; 0x29a
   1a1bc:	movt	r3, #2
   1a1c0:	bl	12638 <__assert_fail@plt>
   1a1c4:	andeq	r5, r4, r8, ror #12
   1a1c8:	andeq	lr, r2, r8, lsr #29
   1a1cc:	push	{r4, r5, r6, r7, lr}
   1a1d0:	sub	sp, sp, #52	; 0x34
   1a1d4:	add	r4, sp, #40	; 0x28
   1a1d8:	stm	r4, {r0, r1}
   1a1dc:	mov	r0, r4
   1a1e0:	bl	122cc <localtime@plt>
   1a1e4:	subs	ip, r0, #0
   1a1e8:	beq	1a2c0 <__assert_fail@plt+0x7c88>
   1a1ec:	ldr	r2, [ip, #24]
   1a1f0:	cmp	r2, #0
   1a1f4:	blt	1a2d0 <__assert_fail@plt+0x7c98>
   1a1f8:	cmp	r2, #6
   1a1fc:	bgt	1a3b0 <__assert_fail@plt+0x7d78>
   1a200:	ldr	r1, [ip, #16]
   1a204:	cmp	r1, #0
   1a208:	blt	1a394 <__assert_fail@plt+0x7d5c>
   1a20c:	cmp	r1, #11
   1a210:	bgt	1a378 <__assert_fail@plt+0x7d40>
   1a214:	ldr	r0, [ip, #8]
   1a218:	cmp	r0, #0
   1a21c:	blt	1a35c <__assert_fail@plt+0x7d24>
   1a220:	cmp	r0, #23
   1a224:	bgt	1a340 <__assert_fail@plt+0x7d08>
   1a228:	ldr	r5, [ip, #4]
   1a22c:	cmp	r5, #59	; 0x3b
   1a230:	bgt	1a324 <__assert_fail@plt+0x7cec>
   1a234:	ldr	r4, [ip]
   1a238:	cmp	r4, #61	; 0x3d
   1a23c:	bgt	1a308 <__assert_fail@plt+0x7cd0>
   1a240:	movw	r3, #61084	; 0xee9c
   1a244:	movt	r3, #2
   1a248:	add	r2, r3, r2, lsl #2
   1a24c:	add	r3, r3, r1, lsl #2
   1a250:	ldr	r6, [sp, #44]	; 0x2c
   1a254:	movw	lr, #61664	; 0xf0e0
   1a258:	ldr	r2, [r2, #44]	; 0x2c
   1a25c:	movt	lr, #2
   1a260:	ldr	r7, [r3, #72]	; 0x48
   1a264:	mov	r1, #1024	; 0x400
   1a268:	str	lr, [sp]
   1a26c:	mov	r3, r1
   1a270:	str	r2, [sp, #4]
   1a274:	mov	r2, #1
   1a278:	str	r7, [sp, #8]
   1a27c:	ldr	lr, [ip, #12]
   1a280:	str	r0, [sp, #16]
   1a284:	str	r5, [sp, #20]
   1a288:	str	lr, [sp, #12]
   1a28c:	str	r4, [sp, #24]
   1a290:	str	r6, [sp, #28]
   1a294:	ldr	ip, [ip, #20]
   1a298:	ldr	r0, [pc, #300]	; 1a3cc <__assert_fail@plt+0x7d94>
   1a29c:	add	ip, ip, #1888	; 0x760
   1a2a0:	add	ip, ip, #12
   1a2a4:	str	ip, [sp, #32]
   1a2a8:	bl	12620 <__snprintf_chk@plt>
   1a2ac:	cmp	r0, #1024	; 0x400
   1a2b0:	ldrlt	r0, [pc, #276]	; 1a3cc <__assert_fail@plt+0x7d94>
   1a2b4:	bge	1a2ec <__assert_fail@plt+0x7cb4>
   1a2b8:	add	sp, sp, #52	; 0x34
   1a2bc:	pop	{r4, r5, r6, r7, pc}
   1a2c0:	ldm	r4, {r0, r1}
   1a2c4:	mov	r2, #64	; 0x40
   1a2c8:	bl	19c4c <__assert_fail@plt+0x7614>
   1a2cc:	b	1a2b8 <__assert_fail@plt+0x7c80>
   1a2d0:	movw	r0, #61504	; 0xf040
   1a2d4:	movw	r1, #61296	; 0xef70
   1a2d8:	movt	r0, #2
   1a2dc:	movt	r1, #2
   1a2e0:	movw	r2, #750	; 0x2ee
   1a2e4:	ldr	r3, [pc, #228]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a2e8:	bl	12638 <__assert_fail@plt>
   1a2ec:	movw	r0, #61704	; 0xf108
   1a2f0:	movw	r1, #61296	; 0xef70
   1a2f4:	movt	r0, #2
   1a2f8:	movt	r1, #2
   1a2fc:	movw	r2, #771	; 0x303
   1a300:	ldr	r3, [pc, #200]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a304:	bl	12638 <__assert_fail@plt>
   1a308:	movw	r0, #61644	; 0xf0cc
   1a30c:	movw	r1, #61296	; 0xef70
   1a310:	movt	r0, #2
   1a314:	movt	r1, #2
   1a318:	movw	r2, #757	; 0x2f5
   1a31c:	ldr	r3, [pc, #172]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a320:	bl	12638 <__assert_fail@plt>
   1a324:	movw	r0, #61624	; 0xf0b8
   1a328:	movw	r1, #61296	; 0xef70
   1a32c:	movt	r0, #2
   1a330:	movt	r1, #2
   1a334:	mov	r2, #756	; 0x2f4
   1a338:	ldr	r3, [pc, #144]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a33c:	bl	12638 <__assert_fail@plt>
   1a340:	movw	r0, #61604	; 0xf0a4
   1a344:	movw	r1, #61296	; 0xef70
   1a348:	movt	r0, #2
   1a34c:	movt	r1, #2
   1a350:	movw	r2, #755	; 0x2f3
   1a354:	ldr	r3, [pc, #116]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a358:	bl	12638 <__assert_fail@plt>
   1a35c:	movw	r0, #61584	; 0xf090
   1a360:	movw	r1, #61296	; 0xef70
   1a364:	movt	r0, #2
   1a368:	movt	r1, #2
   1a36c:	movw	r2, #754	; 0x2f2
   1a370:	ldr	r3, [pc, #88]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a374:	bl	12638 <__assert_fail@plt>
   1a378:	movw	r0, #61564	; 0xf07c
   1a37c:	movw	r1, #61296	; 0xef70
   1a380:	movt	r0, #2
   1a384:	movt	r1, #2
   1a388:	movw	r2, #753	; 0x2f1
   1a38c:	ldr	r3, [pc, #60]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a390:	bl	12638 <__assert_fail@plt>
   1a394:	movw	r0, #61544	; 0xf068
   1a398:	movw	r1, #61296	; 0xef70
   1a39c:	movt	r0, #2
   1a3a0:	movt	r1, #2
   1a3a4:	mov	r2, #752	; 0x2f0
   1a3a8:	ldr	r3, [pc, #32]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a3ac:	bl	12638 <__assert_fail@plt>
   1a3b0:	movw	r0, #61524	; 0xf054
   1a3b4:	movw	r1, #61296	; 0xef70
   1a3b8:	movt	r0, #2
   1a3bc:	movt	r1, #2
   1a3c0:	movw	r2, #751	; 0x2ef
   1a3c4:	ldr	r3, [pc, #4]	; 1a3d0 <__assert_fail@plt+0x7d98>
   1a3c8:	bl	12638 <__assert_fail@plt>
   1a3cc:	andeq	r5, r4, r0, lsl #19
   1a3d0:			; <UNDEFINED> instruction: 0x0002eeb8
   1a3d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a3d8:	vpush	{d8}
   1a3dc:	movw	r6, #21904	; 0x5590
   1a3e0:	movt	r6, #4
   1a3e4:	mov	r8, r1
   1a3e8:	ldr	r1, [r1]
   1a3ec:	sub	sp, sp, #804	; 0x324
   1a3f0:	ldr	ip, [r6]
   1a3f4:	mov	r7, r0
   1a3f8:	cmp	r1, #1
   1a3fc:	mov	r4, r2
   1a400:	str	ip, [sp, #796]	; 0x31c
   1a404:	beq	1a65c <__assert_fail@plt+0x8024>
   1a408:	bcc	1a628 <__assert_fail@plt+0x7ff0>
   1a40c:	cmp	r1, #2
   1a410:	beq	1a430 <__assert_fail@plt+0x7df8>
   1a414:	ldr	r2, [sp, #796]	; 0x31c
   1a418:	ldr	r3, [r6]
   1a41c:	cmp	r2, r3
   1a420:	bne	1aa8c <__assert_fail@plt+0x8454>
   1a424:	add	sp, sp, #804	; 0x324
   1a428:	vpop	{d8}
   1a42c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a430:	ldrb	r2, [r8, #4]
   1a434:	cmp	r2, #121	; 0x79
   1a438:	ldrls	pc, [pc, r2, lsl #2]
   1a43c:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a440:	andeq	sl, r1, r4, lsl #18
   1a444:	andeq	sl, r1, r4, lsl r4
   1a448:	andeq	sl, r1, r4, lsl r4
   1a44c:	andeq	sl, r1, r4, lsl r4
   1a450:	andeq	sl, r1, r4, lsl r4
   1a454:	andeq	sl, r1, r4, lsl r4
   1a458:	andeq	sl, r1, r4, lsl r4
   1a45c:	andeq	sl, r1, r4, lsl r4
   1a460:	andeq	sl, r1, r4, lsl r4
   1a464:	andeq	sl, r1, r4, lsl r4
   1a468:	andeq	sl, r1, r4, lsl r4
   1a46c:	andeq	sl, r1, r4, lsl r4
   1a470:	andeq	sl, r1, r4, lsl r4
   1a474:	andeq	sl, r1, r4, lsl r4
   1a478:	andeq	sl, r1, r4, lsl r4
   1a47c:	andeq	sl, r1, r4, lsl r4
   1a480:	andeq	sl, r1, r4, lsl r4
   1a484:	andeq	sl, r1, r4, lsl r4
   1a488:	andeq	sl, r1, r4, lsl r4
   1a48c:	andeq	sl, r1, r4, lsl r4
   1a490:	andeq	sl, r1, r4, lsl r4
   1a494:	andeq	sl, r1, r4, lsl r4
   1a498:	andeq	sl, r1, r4, lsl r4
   1a49c:	andeq	sl, r1, r4, lsl r4
   1a4a0:	andeq	sl, r1, r4, lsl r4
   1a4a4:	andeq	sl, r1, r4, lsl r4
   1a4a8:	andeq	sl, r1, r4, lsl r4
   1a4ac:	andeq	sl, r1, r4, lsl r4
   1a4b0:	andeq	sl, r1, r4, lsl r4
   1a4b4:	andeq	sl, r1, r4, lsl r4
   1a4b8:	andeq	sl, r1, r4, lsl r4
   1a4bc:	andeq	sl, r1, r4, lsl r4
   1a4c0:	andeq	sl, r1, r4, lsl r4
   1a4c4:	andeq	sl, r1, r4, lsl r4
   1a4c8:	andeq	sl, r1, r4, lsl r4
   1a4cc:	andeq	sl, r1, r4, lsl r4
   1a4d0:	andeq	sl, r1, r4, lsl r4
   1a4d4:	andeq	sl, r1, r4, lsl #18
   1a4d8:	andeq	sl, r1, r4, lsl r4
   1a4dc:	andeq	sl, r1, r4, lsl r4
   1a4e0:	andeq	sl, r1, r4, lsl r4
   1a4e4:	andeq	sl, r1, r4, lsl r4
   1a4e8:	andeq	sl, r1, r4, lsl r4
   1a4ec:	andeq	sl, r1, r4, lsl r4
   1a4f0:	andeq	sl, r1, r4, lsl r4
   1a4f4:	andeq	sl, r1, r4, lsl r4
   1a4f8:	andeq	sl, r1, r4, lsl r4
   1a4fc:	andeq	sl, r1, r4, lsl r4
   1a500:	andeq	sl, r1, r4, lsl r4
   1a504:	andeq	sl, r1, r4, lsl r4
   1a508:	andeq	sl, r1, r4, lsl r4
   1a50c:	andeq	sl, r1, r4, lsl r4
   1a510:	andeq	sl, r1, r4, lsl r4
   1a514:	andeq	sl, r1, r4, lsl r4
   1a518:	andeq	sl, r1, r4, lsl r4
   1a51c:	andeq	sl, r1, r4, lsl r4
   1a520:	andeq	sl, r1, r4, lsl r4
   1a524:	andeq	sl, r1, r4, lsl r4
   1a528:	andeq	sl, r1, r4, lsl r4
   1a52c:	andeq	sl, r1, r4, lsl r4
   1a530:	andeq	sl, r1, r4, lsl r4
   1a534:	andeq	sl, r1, r4, lsl r4
   1a538:	andeq	sl, r1, r4, lsl r4
   1a53c:	andeq	sl, r1, r4, lsl r4
   1a540:	andeq	sl, r1, r4, lsl r4
   1a544:	andeq	sl, r1, r4, lsl r4
   1a548:	andeq	sl, r1, r4, lsl r4
   1a54c:	andeq	sl, r1, r4, lsl r4
   1a550:	andeq	sl, r1, r0, lsl r9
   1a554:	andeq	sl, r1, r4, lsl r4
   1a558:	andeq	sl, r1, ip, lsr r8
   1a55c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a560:			; <UNDEFINED> instruction: 0x0001a7b0
   1a564:	andeq	sl, r1, r4, lsl r4
   1a568:	andeq	sl, r1, r4, lsl r4
   1a56c:	andeq	sl, r1, r4, lsl r4
   1a570:	andeq	sl, r1, r4, lsl r4
   1a574:	andeq	sl, r1, r4, lsl r8
   1a578:	andeq	sl, r1, r4, lsl r4
   1a57c:	andeq	sl, r1, r4, lsl r4
   1a580:	andeq	sl, r1, r4, lsr #14
   1a584:	andeq	sl, r1, r4, lsl r4
   1a588:	andeq	sl, r1, r4, lsl r4
   1a58c:	andeq	sl, r1, ip, asr r7
   1a590:	andeq	sl, r1, r4, lsl r4
   1a594:	strdeq	sl, [r1], -r4
   1a598:	andeq	sl, r1, r4, lsl r4
   1a59c:	andeq	sl, r1, r4, lsl r4
   1a5a0:	andeq	sl, r1, r4, lsl r4
   1a5a4:	strdeq	sl, [r1], -ip
   1a5a8:	andeq	sl, r1, r0, ror #16
   1a5ac:	andeq	sl, r1, r4, lsl r4
   1a5b0:	andeq	sl, r1, r4, lsl r4
   1a5b4:	andeq	sl, r1, r4, lsl r4
   1a5b8:	andeq	sl, r1, r4, lsl r4
   1a5bc:	andeq	sl, r1, r4, lsl r4
   1a5c0:	andeq	sl, r1, r4, lsl r4
   1a5c4:	andeq	sl, r1, r8, lsr #17
   1a5c8:	ldrdeq	sl, [r1], -r4
   1a5cc:	strdeq	sl, [r1], -r8
   1a5d0:	strdeq	sl, [r1], -ip
   1a5d4:	andeq	sl, r1, r4, lsl r4
   1a5d8:	andeq	sl, r1, r4, lsl sl
   1a5dc:	andeq	sl, r1, r0, lsr #13
   1a5e0:	andeq	sl, r1, ip, lsr sl
   1a5e4:	andeq	sl, r1, r8, asr r9
   1a5e8:	andeq	sl, r1, r4, lsl r4
   1a5ec:	andeq	sl, r1, r0, ror #18
   1a5f0:	andeq	sl, r1, r8, lsl #19
   1a5f4:			; <UNDEFINED> instruction: 0x0001a9bc
   1a5f8:	ldrdeq	sl, [r1], -r0
   1a5fc:	andeq	sl, r1, r4, lsl r4
   1a600:	ldrdeq	sl, [r1], -r8
   1a604:	andeq	sl, r1, r4, lsl r4
   1a608:	andeq	sl, r1, r4, lsl r4
   1a60c:	andeq	sl, r1, r8, ror #19
   1a610:	strdeq	sl, [r1], -r0
   1a614:	andeq	sl, r1, ip, lsl r9
   1a618:	andeq	sl, r1, r4, lsl r4
   1a61c:	andeq	sl, r1, r4, lsl r4
   1a620:	andeq	sl, r1, r4, lsl r4
   1a624:	andeq	sl, r1, r4, lsr #15
   1a628:	ldr	r4, [r8, #12]
   1a62c:	mov	r1, #1
   1a630:	ldr	r0, [r8, #8]
   1a634:	ldr	r3, [r7, #4]
   1a638:	mov	r2, r4
   1a63c:	bl	121a0 <fwrite@plt>
   1a640:	cmp	r4, r0
   1a644:	bls	1a414 <__assert_fail@plt+0x7ddc>
   1a648:	bl	1238c <__errno_location@plt>
   1a64c:	ldr	r1, [r7, #8]
   1a650:	ldr	r0, [r0]
   1a654:	bl	197d8 <__assert_fail@plt+0x71a0>
   1a658:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a65c:	ldr	r4, [r8, #12]
   1a660:	ldr	r0, [r8, #8]
   1a664:	ldr	r3, [r7, #4]
   1a668:	mov	r2, r4
   1a66c:	bl	121a0 <fwrite@plt>
   1a670:	cmp	r4, r0
   1a674:	bhi	1a68c <__assert_fail@plt+0x8054>
   1a678:	ldr	r0, [r7, #4]
   1a67c:	bl	2a9b0 <__assert_fail@plt+0x18378>
   1a680:	cmp	r0, #0
   1a684:	beq	1a414 <__assert_fail@plt+0x7ddc>
   1a688:	b	1a648 <__assert_fail@plt+0x8010>
   1a68c:	bl	1238c <__errno_location@plt>
   1a690:	ldr	r1, [r7, #8]
   1a694:	ldr	r0, [r0]
   1a698:	bl	197d8 <__assert_fail@plt+0x71a0>
   1a69c:	b	1a678 <__assert_fail@plt+0x8040>
   1a6a0:	ldr	r0, [r3, #28]
   1a6a4:	str	r3, [sp, #20]
   1a6a8:	bl	12608 <getgrgid@plt>
   1a6ac:	ldr	r3, [sp, #20]
   1a6b0:	subs	r2, r0, #0
   1a6b4:	bne	1a934 <__assert_fail@plt+0x82fc>
   1a6b8:	ldr	r0, [r3, #28]
   1a6bc:	mov	r1, #0
   1a6c0:	add	r2, sp, #144	; 0x90
   1a6c4:	mov	r3, r1
   1a6c8:	ldr	r8, [r8, #8]
   1a6cc:	mov	r4, #1
   1a6d0:	mov	r5, #0
   1a6d4:	strd	r4, [sp]
   1a6d8:	strd	r4, [sp, #8]
   1a6dc:	bl	22f18 <__assert_fail@plt+0x108e0>
   1a6e0:	mov	r1, r8
   1a6e4:	mov	r2, r0
   1a6e8:	mov	r0, r7
   1a6ec:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a6f0:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a6f4:	ldr	r0, [r3, #24]
   1a6f8:	b	1a6bc <__assert_fail@plt+0x8084>
   1a6fc:	ldr	r0, [r3, #16]
   1a700:	and	r0, r0, #61440	; 0xf000
   1a704:	cmp	r0, #40960	; 0xa000
   1a708:	beq	1aabc <__assert_fail@plt+0x8484>
   1a70c:	bl	19b64 <__assert_fail@plt+0x752c>
   1a710:	ldr	r1, [r8, #8]
   1a714:	mov	r2, r0
   1a718:	mov	r0, r7
   1a71c:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a720:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a724:	movw	r3, #25340	; 0x62fc
   1a728:	movt	r3, #4
   1a72c:	ldr	r2, [r3]
   1a730:	cmp	r2, #0
   1a734:	ble	1abc0 <__assert_fail@plt+0x8588>
   1a738:	ldr	r3, [r3, #20]
   1a73c:	add	r2, r4, r3
   1a740:	ldrb	r3, [r4, r3]
   1a744:	cmp	r3, #47	; 0x2f
   1a748:	addeq	r2, r2, #1
   1a74c:	mov	r0, r7
   1a750:	ldr	r1, [r8, #8]
   1a754:	bl	19bfc <__assert_fail@plt+0x75c4>
   1a758:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a75c:	ldrd	r4, [r3, #48]	; 0x30
   1a760:	ldr	r8, [r8, #8]
   1a764:	orrs	r1, r4, r5
   1a768:	bne	1aa90 <__assert_fail@plt+0x8458>
   1a76c:	ldrd	r2, [r3, #64]	; 0x40
   1a770:	orrs	r1, r2, r3
   1a774:	vmoveq.f64	d7, #112	; 0x3f800000  1.0
   1a778:	beq	1a790 <__assert_fail@plt+0x8158>
   1a77c:	cmp	r2, #0
   1a780:	sbcs	r1, r3, #0
   1a784:	vldr	d6, [pc, #964]	; 1ab50 <__assert_fail@plt+0x8518>
   1a788:	vldr	d7, [pc, #968]	; 1ab58 <__assert_fail@plt+0x8520>
   1a78c:	vmovge.f64	d7, d6
   1a790:	mov	r0, r7
   1a794:	mov	r1, r8
   1a798:	vmov	r2, r3, d7
   1a79c:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a7a0:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a7a4:	ldr	r0, [r3, #16]
   1a7a8:	and	r0, r0, #61440	; 0xf000
   1a7ac:	b	1a70c <__assert_fail@plt+0x80d4>
   1a7b0:	movw	r5, #25340	; 0x62fc
   1a7b4:	movt	r5, #4
   1a7b8:	ldr	r0, [r5, #20]
   1a7bc:	add	r0, r0, #1
   1a7c0:	bl	29604 <__assert_fail@plt+0x16fcc>
   1a7c4:	ldr	r5, [r5, #20]
   1a7c8:	mov	r1, r4
   1a7cc:	mov	r2, r5
   1a7d0:	mov	r9, r0
   1a7d4:	bl	1205c <memcpy@plt>
   1a7d8:	mov	r3, #0
   1a7dc:	mov	r0, r7
   1a7e0:	strb	r3, [r9, r5]
   1a7e4:	mov	r2, r9
   1a7e8:	ldr	r1, [r8, #8]
   1a7ec:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a7f0:	ldr	r2, [sp, #796]	; 0x31c
   1a7f4:	ldr	r3, [r6]
   1a7f8:	cmp	r2, r3
   1a7fc:	moveq	r0, r9
   1a800:	bne	1aa8c <__assert_fail@plt+0x8454>
   1a804:	add	sp, sp, #804	; 0x324
   1a808:	vpop	{d8}
   1a80c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1a810:	b	12020 <free@plt>
   1a814:	mov	r0, r3
   1a818:	add	r1, sp, #144	; 0x90
   1a81c:	bl	21ddc <__assert_fail@plt+0xf7a4>
   1a820:	add	r2, sp, #144	; 0x90
   1a824:	mov	r0, r7
   1a828:	ldr	r1, [r8, #8]
   1a82c:	mov	r3, #0
   1a830:	strb	r3, [sp, #154]	; 0x9a
   1a834:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a838:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a83c:	mov	r1, r4
   1a840:	mov	r0, r3
   1a844:	ldr	r5, [r8, #8]
   1a848:	bl	13dbc <__assert_fail@plt+0x1784>
   1a84c:	mov	r1, r5
   1a850:	mov	r2, r0
   1a854:	mov	r0, r7
   1a858:	bl	19bfc <__assert_fail@plt+0x75c4>
   1a85c:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a860:	movw	r3, #25384	; 0x6328
   1a864:	movw	r5, #25340	; 0x62fc
   1a868:	movt	r3, #4
   1a86c:	movt	r5, #4
   1a870:	add	r2, sp, #40	; 0x28
   1a874:	ldr	r1, [r5, #12]
   1a878:	ldr	r3, [r3, #64]	; 0x40
   1a87c:	ldr	r0, [r5, #16]
   1a880:	blx	r3
   1a884:	ldr	r1, [r8, #8]
   1a888:	cmp	r0, #0
   1a88c:	mov	r0, r7
   1a890:	blt	1ab68 <__assert_fail@plt+0x8530>
   1a894:	ldr	r2, [sp, #40]	; 0x28
   1a898:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a89c:	ldr	r0, [sp, #40]	; 0x28
   1a8a0:	bl	12548 <freecon@plt>
   1a8a4:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a8a8:	add	r3, r3, #72	; 0x48
   1a8ac:	add	r2, sp, #24
   1a8b0:	ldm	r3, {r0, r1}
   1a8b4:	ldr	r4, [r8, #8]
   1a8b8:	stm	r2, {r0, r1}
   1a8bc:	bl	1a1cc <__assert_fail@plt+0x7b94>
   1a8c0:	mov	r1, r4
   1a8c4:	mov	r2, r0
   1a8c8:	mov	r0, r7
   1a8cc:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a8d0:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a8d4:	ldrd	r0, [r3, #64]	; 0x40
   1a8d8:	mov	r4, #512	; 0x200
   1a8dc:	add	r2, sp, #144	; 0x90
   1a8e0:	mov	r5, #0
   1a8e4:	ldr	r8, [r8, #8]
   1a8e8:	strd	r4, [sp]
   1a8ec:	strd	r4, [sp, #8]
   1a8f0:	mov	r3, #0
   1a8f4:	b	1a6dc <__assert_fail@plt+0x80a4>
   1a8f8:	add	r3, r3, #88	; 0x58
   1a8fc:	add	r2, sp, #32
   1a900:	b	1a8b0 <__assert_fail@plt+0x8278>
   1a904:	ldr	r1, [r8, #8]
   1a908:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a90c:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a910:	ldrd	r0, [r3]
   1a914:	mov	r4, #1
   1a918:	b	1a8dc <__assert_fail@plt+0x82a4>
   1a91c:	ldr	r0, [r3, #24]
   1a920:	str	r3, [sp, #20]
   1a924:	bl	11fcc <getpwuid@plt>
   1a928:	ldr	r3, [sp, #20]
   1a92c:	subs	r2, r0, #0
   1a930:	beq	1a6f4 <__assert_fail@plt+0x80bc>
   1a934:	ldr	r1, [r8, #8]
   1a938:	mov	ip, #115	; 0x73
   1a93c:	ldr	r3, [r8, #12]
   1a940:	mov	r0, r7
   1a944:	strb	ip, [r1, r3]
   1a948:	ldr	r1, [r8, #8]
   1a94c:	ldr	r2, [r2]
   1a950:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a954:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a958:	ldrd	r0, [r3, #96]	; 0x60
   1a95c:	b	1a914 <__assert_fail@plt+0x82dc>
   1a960:	ldrd	r0, [r3, #64]	; 0x40
   1a964:	mov	r2, #1024	; 0x400
   1a968:	ldr	r8, [r8, #8]
   1a96c:	mov	r4, #512	; 0x200
   1a970:	mov	r5, #0
   1a974:	mov	r3, #0
   1a978:	strd	r4, [sp]
   1a97c:	strd	r2, [sp, #8]
   1a980:	add	r2, sp, #144	; 0x90
   1a984:	b	1a8f0 <__assert_fail@plt+0x82b8>
   1a988:	ldr	r3, [r3, #16]
   1a98c:	and	r3, r3, #61440	; 0xf000
   1a990:	cmp	r3, #40960	; 0xa000
   1a994:	beq	1abe4 <__assert_fail@plt+0x85ac>
   1a998:	mov	r0, r7
   1a99c:	ldr	r1, [r8, #8]
   1a9a0:	movw	r2, #54180	; 0xd3a4
   1a9a4:	movt	r2, #2
   1a9a8:	bl	19bfc <__assert_fail@plt+0x75c4>
   1a9ac:	mov	r5, #0
   1a9b0:	mov	r0, r5
   1a9b4:	bl	12020 <free@plt>
   1a9b8:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a9bc:	ldr	r2, [r3, #16]
   1a9c0:	ldr	r1, [r8, #8]
   1a9c4:	ubfx	r2, r2, #0, #12
   1a9c8:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1a9cc:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a9d0:	ldr	r0, [r3, #20]
   1a9d4:	b	1a6bc <__assert_fail@plt+0x8084>
   1a9d8:	ldr	r1, [r8, #8]
   1a9dc:	mov	r2, r4
   1a9e0:	bl	19bfc <__assert_fail@plt+0x75c4>
   1a9e4:	b	1a414 <__assert_fail@plt+0x7ddc>
   1a9e8:	ldrd	r0, [r3, #48]	; 0x30
   1a9ec:	b	1a914 <__assert_fail@plt+0x82dc>
   1a9f0:	add	r3, r3, #80	; 0x50
   1a9f4:	add	r2, sp, #40	; 0x28
   1a9f8:	b	1a8b0 <__assert_fail@plt+0x8278>
   1a9fc:	movw	r3, #25340	; 0x62fc
   1aa00:	movt	r3, #4
   1aa04:	ldr	r1, [r8, #8]
   1aa08:	ldr	r2, [r3]
   1aa0c:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1aa10:	b	1a414 <__assert_fail@plt+0x7ddc>
   1aa14:	mov	r0, r4
   1aa18:	bl	21a4c <__assert_fail@plt+0xf414>
   1aa1c:	ldr	r1, [r8, #8]
   1aa20:	mov	r4, r0
   1aa24:	mov	r0, r7
   1aa28:	mov	r2, r4
   1aa2c:	bl	19bfc <__assert_fail@plt+0x75c4>
   1aa30:	mov	r0, r4
   1aa34:	bl	12020 <free@plt>
   1aa38:	b	1a414 <__assert_fail@plt+0x7ddc>
   1aa3c:	mov	r0, r4
   1aa40:	mov	r1, #47	; 0x2f
   1aa44:	bl	124c4 <strrchr@plt>
   1aa48:	subs	r9, r0, #0
   1aa4c:	beq	1abcc <__assert_fail@plt+0x8594>
   1aa50:	mov	r0, r4
   1aa54:	rsb	r4, r4, r9
   1aa58:	bl	123b0 <__strdup@plt>
   1aa5c:	mov	r3, #0
   1aa60:	mov	r5, r0
   1aa64:	mov	r0, r7
   1aa68:	strb	r3, [r5, r4]
   1aa6c:	mov	r2, r5
   1aa70:	ldr	r1, [r8, #8]
   1aa74:	bl	19bfc <__assert_fail@plt+0x75c4>
   1aa78:	ldr	r2, [sp, #796]	; 0x31c
   1aa7c:	ldr	r3, [r6]
   1aa80:	cmp	r2, r3
   1aa84:	moveq	r0, r5
   1aa88:	beq	1a804 <__assert_fail@plt+0x81cc>
   1aa8c:	bl	120e0 <__stack_chk_fail@plt>
   1aa90:	ldrd	r0, [r3, #64]	; 0x40
   1aa94:	vldr	d8, [pc, #196]	; 1ab60 <__assert_fail@plt+0x8528>
   1aa98:	bl	2c810 <__assert_fail@plt+0x1a1d8>
   1aa9c:	vmov	d6, r0, r1
   1aaa0:	mov	r0, r4
   1aaa4:	mov	r1, r5
   1aaa8:	vmul.f64	d8, d6, d8
   1aaac:	bl	2c810 <__assert_fail@plt+0x1a1d8>
   1aab0:	vmov	d6, r0, r1
   1aab4:	vdiv.f64	d7, d8, d6
   1aab8:	b	1a790 <__assert_fail@plt+0x8158>
   1aabc:	bl	18f10 <__assert_fail@plt+0x68d8>
   1aac0:	movw	r3, #25340	; 0x62fc
   1aac4:	movw	ip, #36180	; 0x8d54
   1aac8:	movt	r3, #4
   1aacc:	movt	ip, #1
   1aad0:	movw	r2, #36344	; 0x8df8
   1aad4:	add	r1, sp, #40	; 0x28
   1aad8:	movt	r2, #1
   1aadc:	cmp	r0, #0
   1aae0:	ldr	r0, [r3, #12]
   1aae4:	moveq	r2, ip
   1aae8:	blx	r2
   1aaec:	cmp	r0, #0
   1aaf0:	beq	1ac14 <__assert_fail@plt+0x85dc>
   1aaf4:	bl	1238c <__errno_location@plt>
   1aaf8:	ldr	r1, [r8, #8]
   1aafc:	ldr	r3, [r0]
   1ab00:	mov	r5, r0
   1ab04:	mov	r0, r7
   1ab08:	cmp	r3, #2
   1ab0c:	beq	1ac2c <__assert_fail@plt+0x85f4>
   1ab10:	cmp	r3, #40	; 0x28
   1ab14:	beq	1ac1c <__assert_fail@plt+0x85e4>
   1ab18:	movw	r2, #61716	; 0xf114
   1ab1c:	movt	r2, #2
   1ab20:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1ab24:	mov	r1, r4
   1ab28:	mov	r0, #0
   1ab2c:	ldr	r5, [r5]
   1ab30:	bl	19778 <__assert_fail@plt+0x7140>
   1ab34:	movw	r2, #8288	; 0x2060
   1ab38:	movt	r2, #3
   1ab3c:	mov	r1, r5
   1ab40:	mov	r3, r0
   1ab44:	mov	r0, #0
   1ab48:	bl	12224 <error@plt>
   1ab4c:	b	1a414 <__assert_fail@plt+0x7ddc>
   1ab50:	andeq	r0, r0, r0
   1ab54:	svcvc	0x00f00000	; IMB
   1ab58:	andeq	r0, r0, r0
   1ab5c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1ab60:	andeq	r0, r0, r0
   1ab64:	addmi	r0, r0, r0
   1ab68:	movw	r2, #54180	; 0xd3a4
   1ab6c:	movt	r2, #2
   1ab70:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1ab74:	bl	1238c <__errno_location@plt>
   1ab78:	mov	r2, #5
   1ab7c:	movw	r1, #55928	; 0xda78
   1ab80:	movt	r1, #2
   1ab84:	ldr	r7, [r0]
   1ab88:	mov	r0, #0
   1ab8c:	bl	120d4 <dcgettext@plt>
   1ab90:	mov	r1, r4
   1ab94:	mov	r8, r0
   1ab98:	mov	r0, #0
   1ab9c:	bl	19778 <__assert_fail@plt+0x7140>
   1aba0:	mov	r1, r7
   1aba4:	mov	r2, r8
   1aba8:	mov	r3, r0
   1abac:	mov	r0, #0
   1abb0:	bl	12224 <error@plt>
   1abb4:	mov	r3, #1
   1abb8:	str	r3, [r5, #28]
   1abbc:	b	1a414 <__assert_fail@plt+0x7ddc>
   1abc0:	movw	r2, #54180	; 0xd3a4
   1abc4:	movt	r2, #2
   1abc8:	b	1a74c <__assert_fail@plt+0x8114>
   1abcc:	mov	r0, r7
   1abd0:	ldr	r1, [r8, #8]
   1abd4:	movw	r2, #528	; 0x210
   1abd8:	movt	r2, #3
   1abdc:	bl	19bfc <__assert_fail@plt+0x75c4>
   1abe0:	b	1a414 <__assert_fail@plt+0x7ddc>
   1abe4:	movw	r9, #25340	; 0x62fc
   1abe8:	movt	r9, #4
   1abec:	ldr	r0, [r9, #16]
   1abf0:	ldr	r1, [r9, #12]
   1abf4:	bl	214f8 <__assert_fail@plt+0xeec0>
   1abf8:	subs	r5, r0, #0
   1abfc:	beq	1ac3c <__assert_fail@plt+0x8604>
   1ac00:	mov	r0, r7
   1ac04:	ldr	r1, [r8, #8]
   1ac08:	mov	r2, r5
   1ac0c:	bl	19bfc <__assert_fail@plt+0x75c4>
   1ac10:	b	1a9b0 <__assert_fail@plt+0x8378>
   1ac14:	ldr	r0, [sp, #56]	; 0x38
   1ac18:	b	1a7a8 <__assert_fail@plt+0x8170>
   1ac1c:	movw	r2, #12024	; 0x2ef8
   1ac20:	movt	r2, #3
   1ac24:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1ac28:	b	1a414 <__assert_fail@plt+0x7ddc>
   1ac2c:	movw	r2, #61292	; 0xef6c
   1ac30:	movt	r2, #2
   1ac34:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1ac38:	b	1a414 <__assert_fail@plt+0x7ddc>
   1ac3c:	bl	1238c <__errno_location@plt>
   1ac40:	mov	r1, r4
   1ac44:	ldr	r0, [r0]
   1ac48:	bl	197a4 <__assert_fail@plt+0x716c>
   1ac4c:	mov	r3, #1
   1ac50:	str	r3, [r9, #28]
   1ac54:	b	1a998 <__assert_fail@plt+0x8360>
   1ac58:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ac5c:	mov	r7, r0
   1ac60:	ldr	r4, [r2, #40]	; 0x28
   1ac64:	sub	sp, sp, #12
   1ac68:	mov	r5, r1
   1ac6c:	add	r6, r2, #40	; 0x28
   1ac70:	cmp	r4, #0
   1ac74:	beq	1ad38 <__assert_fail@plt+0x8700>
   1ac78:	mvn	r8, #0
   1ac7c:	ldr	ip, [r4]
   1ac80:	cmp	ip, #2
   1ac84:	bne	1adb4 <__assert_fail@plt+0x877c>
   1ac88:	ldrb	ip, [r4, #5]
   1ac8c:	cmp	ip, #0
   1ac90:	beq	1adb4 <__assert_fail@plt+0x877c>
   1ac94:	ldrb	r3, [r4, #4]
   1ac98:	sub	r3, r3, #65	; 0x41
   1ac9c:	cmp	r3, #19
   1aca0:	ldrls	pc, [pc, r3, lsl #2]
   1aca4:	b	1ad98 <__assert_fail@plt+0x8760>
   1aca8:	andeq	sl, r1, r0, lsl #27
   1acac:	andeq	sl, r1, r8, asr sp
   1acb0:	andeq	sl, r1, r4, asr #26
   1acb4:	muleq	r1, r8, sp
   1acb8:	muleq	r1, r8, sp
   1acbc:	muleq	r1, r8, sp
   1acc0:	muleq	r1, r8, sp
   1acc4:	muleq	r1, r8, sp
   1acc8:	muleq	r1, r8, sp
   1accc:	muleq	r1, r8, sp
   1acd0:	muleq	r1, r8, sp
   1acd4:	muleq	r1, r8, sp
   1acd8:	muleq	r1, r8, sp
   1acdc:	muleq	r1, r8, sp
   1ace0:	muleq	r1, r8, sp
   1ace4:	muleq	r1, r8, sp
   1ace8:	muleq	r1, r8, sp
   1acec:	muleq	r1, r8, sp
   1acf0:	muleq	r1, r8, sp
   1acf4:	strdeq	sl, [r1], -r8
   1acf8:	ldr	r1, [r5, #80]	; 0x50
   1acfc:	add	r3, sp, #8
   1ad00:	ldr	r2, [r5, #84]	; 0x54
   1ad04:	str	r1, [r3, #-8]!
   1ad08:	str	r2, [sp, #4]
   1ad0c:	mov	r2, ip
   1ad10:	ldm	r3, {r0, r1}
   1ad14:	ldr	r9, [r4, #8]
   1ad18:	bl	19c4c <__assert_fail@plt+0x7614>
   1ad1c:	mov	r1, r9
   1ad20:	mov	r2, r0
   1ad24:	mov	r0, r6
   1ad28:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1ad2c:	ldr	r4, [r4, #16]
   1ad30:	cmp	r4, #0
   1ad34:	bne	1ac7c <__assert_fail@plt+0x8644>
   1ad38:	mov	r0, #1
   1ad3c:	add	sp, sp, #12
   1ad40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ad44:	ldr	r1, [r5, #88]	; 0x58
   1ad48:	add	r3, sp, #8
   1ad4c:	ldr	r2, [r5, #92]	; 0x5c
   1ad50:	str	r1, [r3, #-8]!
   1ad54:	b	1ad08 <__assert_fail@plt+0x86d0>
   1ad58:	cmp	ip, #64	; 0x40
   1ad5c:	str	r8, [sp]
   1ad60:	str	r8, [sp, #4]
   1ad64:	beq	1adcc <__assert_fail@plt+0x8794>
   1ad68:	movw	r2, #54180	; 0xd3a4
   1ad6c:	mov	r0, r6
   1ad70:	movt	r2, #2
   1ad74:	ldr	r1, [r4, #8]
   1ad78:	bl	19ae8 <__assert_fail@plt+0x74b0>
   1ad7c:	b	1ad2c <__assert_fail@plt+0x86f4>
   1ad80:	add	r1, r5, #72	; 0x48
   1ad84:	mov	r3, sp
   1ad88:	ldr	r2, [r5, #76]	; 0x4c
   1ad8c:	ldm	r1, {r0, r1}
   1ad90:	stm	sp, {r0, r1}
   1ad94:	b	1ad08 <__assert_fail@plt+0x86d0>
   1ad98:	movw	r0, #55804	; 0xd9fc
   1ad9c:	movw	r1, #61296	; 0xef70
   1ada0:	movt	r0, #2
   1ada4:	movt	r1, #2
   1ada8:	movw	r2, #1285	; 0x505
   1adac:	ldr	r3, [pc, #36]	; 1add8 <__assert_fail@plt+0x87a0>
   1adb0:	bl	12638 <__assert_fail@plt>
   1adb4:	mov	r0, r6
   1adb8:	mov	r1, r4
   1adbc:	mov	r2, r7
   1adc0:	mov	r3, r5
   1adc4:	bl	1a3d4 <__assert_fail@plt+0x7d9c>
   1adc8:	b	1ad2c <__assert_fail@plt+0x86f4>
   1adcc:	mov	r3, sp
   1add0:	mvn	r2, #0
   1add4:	b	1ad08 <__assert_fail@plt+0x86d0>
   1add8:	andeq	lr, r2, r4, lsl pc
   1addc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ade0:	mov	r9, r0
   1ade4:	ldrb	r5, [sp, #40]	; 0x28
   1ade8:	mov	fp, r1
   1adec:	mov	r6, r2
   1adf0:	mov	r8, r3
   1adf4:	cmp	r5, #123	; 0x7b
   1adf8:	ldrb	sl, [sp, #44]	; 0x2c
   1adfc:	beq	1b150 <__assert_fail@plt+0x8b18>
   1ae00:	cmp	r5, #91	; 0x5b
   1ae04:	beq	1b134 <__assert_fail@plt+0x8afc>
   1ae08:	cmp	r5, #40	; 0x28
   1ae0c:	beq	1b16c <__assert_fail@plt+0x8b34>
   1ae10:	mov	r0, #20
   1ae14:	bl	29604 <__assert_fail@plt+0x16fcc>
   1ae18:	mov	r3, #0
   1ae1c:	mov	r4, r0
   1ae20:	add	r0, r6, #2
   1ae24:	str	r4, [r9]
   1ae28:	str	r3, [r4, #16]
   1ae2c:	str	r8, [r4]
   1ae30:	strb	r5, [r4, #4]
   1ae34:	strb	sl, [r4, #5]
   1ae38:	str	r6, [r4, #12]
   1ae3c:	bl	29604 <__assert_fail@plt+0x16fcc>
   1ae40:	mov	r1, fp
   1ae44:	mov	r2, r6
   1ae48:	mov	r7, r0
   1ae4c:	str	r0, [r4, #8]
   1ae50:	bl	123e0 <strncpy@plt>
   1ae54:	cmp	r8, #1
   1ae58:	add	r3, r7, r6
   1ae5c:	bls	1afec <__assert_fail@plt+0x89b4>
   1ae60:	cmp	r8, #2
   1ae64:	bne	1b188 <__assert_fail@plt+0x8b50>
   1ae68:	sub	r5, r5, #37	; 0x25
   1ae6c:	cmp	r5, #84	; 0x54
   1ae70:	ldrls	pc, [pc, r5, lsl #2]
   1ae74:	b	1afd8 <__assert_fail@plt+0x89a0>
   1ae78:	andeq	fp, r1, r4, lsl #1
   1ae7c:	ldrdeq	sl, [r1], -r8
   1ae80:	ldrdeq	sl, [r1], -r8
   1ae84:	ldrdeq	sl, [r1], -r8
   1ae88:	ldrdeq	sl, [r1], -r8
   1ae8c:	ldrdeq	sl, [r1], -r8
   1ae90:	ldrdeq	sl, [r1], -r8
   1ae94:	ldrdeq	sl, [r1], -r8
   1ae98:	ldrdeq	sl, [r1], -r8
   1ae9c:	ldrdeq	sl, [r1], -r8
   1aea0:	ldrdeq	sl, [r1], -r8
   1aea4:	ldrdeq	sl, [r1], -r8
   1aea8:	ldrdeq	sl, [r1], -r8
   1aeac:	ldrdeq	sl, [r1], -r8
   1aeb0:	ldrdeq	sl, [r1], -r8
   1aeb4:	ldrdeq	sl, [r1], -r8
   1aeb8:	ldrdeq	sl, [r1], -r8
   1aebc:	ldrdeq	sl, [r1], -r8
   1aec0:	ldrdeq	sl, [r1], -r8
   1aec4:	ldrdeq	sl, [r1], -r8
   1aec8:	ldrdeq	sl, [r1], -r8
   1aecc:	ldrdeq	sl, [r1], -r8
   1aed0:	ldrdeq	sl, [r1], -r8
   1aed4:	ldrdeq	sl, [r1], -r8
   1aed8:	ldrdeq	sl, [r1], -r8
   1aedc:	ldrdeq	sl, [r1], -r8
   1aee0:	ldrdeq	sl, [r1], -r8
   1aee4:	ldrdeq	sl, [r1], -r8
   1aee8:	andeq	fp, r1, ip
   1aeec:	andeq	fp, r1, ip
   1aef0:	andeq	fp, r1, ip
   1aef4:	andeq	fp, r1, ip
   1aef8:	ldrdeq	sl, [r1], -r8
   1aefc:	andeq	fp, r1, ip
   1af00:	andeq	fp, r1, ip
   1af04:	andeq	sl, r1, ip, asr #31
   1af08:	ldrdeq	sl, [r1], -r8
   1af0c:	ldrdeq	sl, [r1], -r8
   1af10:	ldrdeq	sl, [r1], -r8
   1af14:	ldrdeq	sl, [r1], -r8
   1af18:	andeq	fp, r1, ip
   1af1c:	ldrdeq	sl, [r1], -r8
   1af20:	ldrdeq	sl, [r1], -r8
   1af24:	andeq	sl, r1, ip, asr #31
   1af28:	ldrdeq	sl, [r1], -r8
   1af2c:	ldrdeq	sl, [r1], -r8
   1af30:	andeq	fp, r1, r4, lsl r1
   1af34:	andeq	fp, r1, ip
   1af38:	andeq	fp, r1, ip
   1af3c:	ldrdeq	sl, [r1], -r8
   1af40:	ldrdeq	sl, [r1], -r8
   1af44:	ldrdeq	sl, [r1], -r8
   1af48:	muleq	r1, r4, r0
   1af4c:	strheq	fp, [r1], -r4
   1af50:	ldrdeq	sl, [r1], -r8
   1af54:	ldrdeq	sl, [r1], -r8
   1af58:	ldrdeq	sl, [r1], -r8
   1af5c:	ldrdeq	sl, [r1], -r8
   1af60:	ldrdeq	sl, [r1], -r8
   1af64:	ldrdeq	sl, [r1], -r8
   1af68:	andeq	fp, r1, ip
   1af6c:	andeq	fp, r1, ip
   1af70:	andeq	fp, r1, ip
   1af74:	andeq	fp, r1, r8, asr #1
   1af78:	ldrdeq	sl, [r1], -r8
   1af7c:	andeq	sl, r1, ip, asr #31
   1af80:	andeq	fp, r1, ip
   1af84:	andeq	sl, r1, ip, asr #31
   1af88:	ldrdeq	fp, [r1], -r8
   1af8c:	ldrdeq	sl, [r1], -r8
   1af90:	andeq	fp, r1, ip
   1af94:	andeq	fp, r1, r4, rrx
   1af98:	strdeq	fp, [r1], -r4
   1af9c:	andeq	fp, r1, ip
   1afa0:	ldrdeq	sl, [r1], -r8
   1afa4:	andeq	sl, r1, ip, asr #31
   1afa8:	ldrdeq	sl, [r1], -r8
   1afac:	ldrdeq	sl, [r1], -r8
   1afb0:	andeq	fp, r1, ip
   1afb4:	andeq	fp, r1, ip
   1afb8:	andeq	fp, r1, ip
   1afbc:	ldrdeq	sl, [r1], -r8
   1afc0:	ldrdeq	sl, [r1], -r8
   1afc4:	ldrdeq	sl, [r1], -r8
   1afc8:	andeq	fp, r1, r4, asr #32
   1afcc:	add	r3, r3, #1
   1afd0:	mov	r2, #115	; 0x73
   1afd4:	strb	r2, [r7, r6]
   1afd8:	mov	r2, #0
   1afdc:	strb	r2, [r3]
   1afe0:	ldr	r0, [r9]
   1afe4:	add	r0, r0, #16
   1afe8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afec:	cmp	r5, #0
   1aff0:	bne	1b1a4 <__assert_fail@plt+0x8b6c>
   1aff4:	cmp	sl, #0
   1aff8:	bne	1b1c0 <__assert_fail@plt+0x8b88>
   1affc:	ldr	r0, [r9]
   1b000:	strb	sl, [r7, r6]
   1b004:	add	r0, r0, #16
   1b008:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b00c:	ldr	r0, [sp, #48]	; 0x30
   1b010:	add	r3, r3, #1
   1b014:	mov	r2, #1
   1b018:	mov	r1, #115	; 0x73
   1b01c:	strb	r2, [r0, #18]
   1b020:	mov	r2, #3
   1b024:	strb	r1, [r7, r6]
   1b028:	mov	r1, #0
   1b02c:	strb	r1, [r3]
   1b030:	ldr	r1, [sp, #48]	; 0x30
   1b034:	ldr	r3, [r1, #24]
   1b038:	cmp	r2, r3
   1b03c:	strhi	r2, [r1, #24]
   1b040:	b	1afe0 <__assert_fail@plt+0x89a8>
   1b044:	ldr	r0, [sp, #48]	; 0x30
   1b048:	mov	r2, #1
   1b04c:	mov	r1, #115	; 0x73
   1b050:	add	r3, r3, #1
   1b054:	strb	r2, [r0, #19]
   1b058:	mov	r2, #2
   1b05c:	strb	r1, [r7, r6]
   1b060:	b	1b028 <__assert_fail@plt+0x89f0>
   1b064:	ldr	r0, [sp, #48]	; 0x30
   1b068:	mov	r2, #1
   1b06c:	mov	r1, #115	; 0x73
   1b070:	add	r3, r3, #1
   1b074:	strb	r2, [r0, #18]
   1b078:	mov	r2, #4
   1b07c:	strb	r1, [r7, r6]
   1b080:	b	1b028 <__assert_fail@plt+0x89f0>
   1b084:	mov	r2, #37	; 0x25
   1b088:	add	r3, r3, #1
   1b08c:	strb	r2, [r7, r6]
   1b090:	b	1afd8 <__assert_fail@plt+0x89a0>
   1b094:	ldr	r0, [sp, #48]	; 0x30
   1b098:	mov	r2, #1
   1b09c:	mov	r1, #115	; 0x73
   1b0a0:	add	r3, r3, #1
   1b0a4:	strb	r2, [r0, #18]
   1b0a8:	mov	r2, #2
   1b0ac:	strb	r1, [r7, r6]
   1b0b0:	b	1b028 <__assert_fail@plt+0x89f0>
   1b0b4:	mov	r1, #115	; 0x73
   1b0b8:	add	r3, r3, #1
   1b0bc:	mov	r2, #5
   1b0c0:	strb	r1, [r7, r6]
   1b0c4:	b	1b028 <__assert_fail@plt+0x89f0>
   1b0c8:	mov	r2, #100	; 0x64
   1b0cc:	add	r3, r3, #1
   1b0d0:	strb	r2, [r7, r6]
   1b0d4:	b	1afd8 <__assert_fail@plt+0x89a0>
   1b0d8:	ldr	r1, [sp, #48]	; 0x30
   1b0dc:	mov	r2, #1
   1b0e0:	add	r3, r3, r2
   1b0e4:	strb	r2, [r1, #20]
   1b0e8:	mov	r1, #115	; 0x73
   1b0ec:	strb	r1, [r7, r6]
   1b0f0:	b	1b028 <__assert_fail@plt+0x89f0>
   1b0f4:	mov	r0, #111	; 0x6f
   1b0f8:	strb	r0, [r7, r6]
   1b0fc:	ldr	r0, [sp, #48]	; 0x30
   1b100:	mov	r1, #1
   1b104:	add	r3, r3, #1
   1b108:	mov	r2, #3
   1b10c:	strb	r1, [r0, #18]
   1b110:	b	1b028 <__assert_fail@plt+0x89f0>
   1b114:	ldr	r0, [sp, #48]	; 0x30
   1b118:	mov	r2, #1
   1b11c:	mov	r1, #103	; 0x67
   1b120:	add	r3, r3, #1
   1b124:	strb	r2, [r0, #18]
   1b128:	mov	r2, #3
   1b12c:	strb	r1, [r7, r6]
   1b130:	b	1b028 <__assert_fail@plt+0x89f0>
   1b134:	movw	r0, #61740	; 0xf12c
   1b138:	movw	r1, #61296	; 0xef70
   1b13c:	movt	r0, #2
   1b140:	movt	r1, #2
   1b144:	mov	r2, #90	; 0x5a
   1b148:	ldr	r3, [pc, #140]	; 1b1dc <__assert_fail@plt+0x8ba4>
   1b14c:	bl	12638 <__assert_fail@plt>
   1b150:	movw	r0, #61720	; 0xf118
   1b154:	movw	r1, #61296	; 0xef70
   1b158:	movt	r0, #2
   1b15c:	movt	r1, #2
   1b160:	mov	r2, #89	; 0x59
   1b164:	ldr	r3, [pc, #112]	; 1b1dc <__assert_fail@plt+0x8ba4>
   1b168:	bl	12638 <__assert_fail@plt>
   1b16c:	movw	r0, #61760	; 0xf140
   1b170:	movw	r1, #61296	; 0xef70
   1b174:	movt	r0, #2
   1b178:	movt	r1, #2
   1b17c:	mov	r2, #91	; 0x5b
   1b180:	ldr	r3, [pc, #84]	; 1b1dc <__assert_fail@plt+0x8ba4>
   1b184:	bl	12638 <__assert_fail@plt>
   1b188:	movw	r0, #61824	; 0xf180
   1b18c:	movw	r1, #61296	; 0xef70
   1b190:	movt	r0, #2
   1b194:	movt	r1, #2
   1b198:	mov	r2, #116	; 0x74
   1b19c:	ldr	r3, [pc, #56]	; 1b1dc <__assert_fail@plt+0x8ba4>
   1b1a0:	bl	12638 <__assert_fail@plt>
   1b1a4:	movw	r0, #61780	; 0xf154
   1b1a8:	movw	r1, #61296	; 0xef70
   1b1ac:	movt	r0, #2
   1b1b0:	movt	r1, #2
   1b1b4:	mov	r2, #108	; 0x6c
   1b1b8:	ldr	r3, [pc, #28]	; 1b1dc <__assert_fail@plt+0x8ba4>
   1b1bc:	bl	12638 <__assert_fail@plt>
   1b1c0:	movw	r0, #61800	; 0xf168
   1b1c4:	movw	r1, #61296	; 0xef70
   1b1c8:	movt	r0, #2
   1b1cc:	movt	r1, #2
   1b1d0:	mov	r2, #109	; 0x6d
   1b1d4:	ldr	r3, [pc]	; 1b1dc <__assert_fail@plt+0x8ba4>
   1b1d8:	bl	12638 <__assert_fail@plt>
   1b1dc:	andeq	lr, r2, r4, lsr #30
   1b1e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b1e4:	mov	r4, r0
   1b1e8:	sub	sp, sp, #16
   1b1ec:	mov	r0, r1
   1b1f0:	movw	r1, #44120	; 0xac58
   1b1f4:	movt	r1, #1
   1b1f8:	mov	r6, r2
   1b1fc:	bl	18644 <__assert_fail@plt+0x600c>
   1b200:	mov	r7, #1
   1b204:	mov	r5, #0
   1b208:	mov	r8, r0
   1b20c:	add	ip, r0, #40	; 0x28
   1b210:	ldm	r4!, {r0, r1, r2, r3}
   1b214:	mov	r9, ip
   1b218:	strb	r7, [r8, #17]
   1b21c:	strb	r7, [r8, #16]
   1b220:	stmia	ip!, {r0, r1, r2, r3}
   1b224:	ldr	r3, [r4]
   1b228:	str	r3, [ip]
   1b22c:	strb	r5, [r8, #19]
   1b230:	strb	r5, [r8, #18]
   1b234:	str	r5, [r8, #24]
   1b238:	str	r5, [r8, #40]	; 0x28
   1b23c:	ldrb	r3, [r6]
   1b240:	cmp	r3, r5
   1b244:	beq	1b314 <__assert_fail@plt+0x8cdc>
   1b248:	mov	r7, r6
   1b24c:	b	1b26c <__assert_fail@plt+0x8c34>
   1b250:	cmp	r3, #37	; 0x25
   1b254:	beq	1b320 <__assert_fail@plt+0x8ce8>
   1b258:	mov	r5, r6
   1b25c:	add	r6, r6, #1
   1b260:	ldrb	r3, [r5, #1]
   1b264:	cmp	r3, #0
   1b268:	beq	1b30c <__assert_fail@plt+0x8cd4>
   1b26c:	cmp	r3, #92	; 0x5c
   1b270:	bne	1b250 <__assert_fail@plt+0x8c18>
   1b274:	ldrb	r3, [r6, #1]
   1b278:	cmp	r3, #99	; 0x63
   1b27c:	beq	1b614 <__assert_fail@plt+0x8fdc>
   1b280:	sub	r2, r3, #48	; 0x30
   1b284:	cmp	r2, #7
   1b288:	bhi	1b480 <__assert_fail@plt+0x8e48>
   1b28c:	mov	r3, #0
   1b290:	mov	r0, r6
   1b294:	mov	r1, r3
   1b298:	ldrb	r2, [r0, #1]!
   1b29c:	mov	r5, r3
   1b2a0:	sub	ip, r2, #48	; 0x30
   1b2a4:	add	r2, r2, r1, lsl #3
   1b2a8:	cmp	ip, #7
   1b2ac:	bhi	1b2c4 <__assert_fail@plt+0x8c8c>
   1b2b0:	add	r3, r3, #1
   1b2b4:	sub	r1, r2, #48	; 0x30
   1b2b8:	cmp	r3, #3
   1b2bc:	mov	r5, r3
   1b2c0:	bne	1b298 <__assert_fail@plt+0x8c60>
   1b2c4:	add	ip, r3, #1
   1b2c8:	strb	r1, [r6]
   1b2cc:	rsb	r2, r7, r6
   1b2d0:	mov	r3, #0
   1b2d4:	mov	r0, r9
   1b2d8:	mov	r1, r7
   1b2dc:	str	r3, [sp]
   1b2e0:	add	r2, r2, #1
   1b2e4:	str	r3, [sp, #4]
   1b2e8:	add	r7, r6, ip
   1b2ec:	str	r8, [sp, #8]
   1b2f0:	add	r5, r6, r5
   1b2f4:	bl	1addc <__assert_fail@plt+0x87a4>
   1b2f8:	add	r6, r5, #1
   1b2fc:	ldrb	r3, [r5, #1]
   1b300:	cmp	r3, #0
   1b304:	mov	r9, r0
   1b308:	bne	1b26c <__assert_fail@plt+0x8c34>
   1b30c:	cmp	r6, r7
   1b310:	bhi	1b5c4 <__assert_fail@plt+0x8f8c>
   1b314:	mov	r0, #1
   1b318:	add	sp, sp, #16
   1b31c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b320:	ldrb	r4, [r6, #1]
   1b324:	cmp	r4, #0
   1b328:	beq	1b4ec <__assert_fail@plt+0x8eb4>
   1b32c:	cmp	r4, #37	; 0x25
   1b330:	addeq	r2, r6, #1
   1b334:	moveq	r3, #0
   1b338:	moveq	r5, r2
   1b33c:	beq	1b564 <__assert_fail@plt+0x8f2c>
   1b340:	mov	r5, #1
   1b344:	b	1b360 <__assert_fail@plt+0x8d28>
   1b348:	bl	12338 <strchr@plt>
   1b34c:	add	r3, r5, #1
   1b350:	cmp	r0, #0
   1b354:	beq	1b374 <__assert_fail@plt+0x8d3c>
   1b358:	ldrb	r4, [r6, r3]
   1b35c:	mov	r5, r3
   1b360:	cmp	r4, #0
   1b364:	movw	r0, #61916	; 0xf1dc
   1b368:	mov	r1, r4
   1b36c:	movt	r0, #2
   1b370:	bne	1b348 <__assert_fail@plt+0x8d10>
   1b374:	bl	122f0 <__ctype_b_loc@plt>
   1b378:	add	r2, r6, r5
   1b37c:	ldr	r1, [r0]
   1b380:	b	1b38c <__assert_fail@plt+0x8d54>
   1b384:	ldrb	r4, [r2, #1]!
   1b388:	add	r5, r5, #1
   1b38c:	sxth	r3, r4
   1b390:	lsl	r3, r3, #1
   1b394:	ldrh	r3, [r1, r3]
   1b398:	tst	r3, #2048	; 0x800
   1b39c:	bne	1b384 <__assert_fail@plt+0x8d4c>
   1b3a0:	cmp	r4, #46	; 0x2e
   1b3a4:	addne	r5, r6, r5
   1b3a8:	beq	1b51c <__assert_fail@plt+0x8ee4>
   1b3ac:	movw	r0, #61924	; 0xf1e4
   1b3b0:	mov	r1, r4
   1b3b4:	movt	r0, #2
   1b3b8:	bl	12338 <strchr@plt>
   1b3bc:	cmp	r0, #0
   1b3c0:	beq	1b58c <__assert_fail@plt+0x8f54>
   1b3c4:	cmp	r4, #0
   1b3c8:	addeq	r6, r5, #1
   1b3cc:	moveq	sl, #1
   1b3d0:	bne	1b55c <__assert_fail@plt+0x8f24>
   1b3d4:	mov	r1, r4
   1b3d8:	movw	r0, #61964	; 0xf20c
   1b3dc:	movt	r0, #2
   1b3e0:	bl	12338 <strchr@plt>
   1b3e4:	cmp	r0, #0
   1b3e8:	beq	1b414 <__assert_fail@plt+0x8ddc>
   1b3ec:	mov	r2, #5
   1b3f0:	movw	r1, #61968	; 0xf210
   1b3f4:	mov	r0, #0
   1b3f8:	movt	r1, #2
   1b3fc:	bl	120d4 <dcgettext@plt>
   1b400:	mov	r1, #0
   1b404:	ldrb	r3, [r5]
   1b408:	mov	r2, r0
   1b40c:	mov	r0, #1
   1b410:	bl	12224 <error@plt>
   1b414:	cmp	sl, #2
   1b418:	bne	1b428 <__assert_fail@plt+0x8df0>
   1b41c:	ldrb	r4, [r5, #1]
   1b420:	cmp	r4, #0
   1b424:	beq	1b5e8 <__assert_fail@plt+0x8fb0>
   1b428:	mov	r2, #5
   1b42c:	movw	r1, #62108	; 0xf29c
   1b430:	mov	r0, #0
   1b434:	movt	r1, #2
   1b438:	bl	120d4 <dcgettext@plt>
   1b43c:	ldrb	r3, [r5]
   1b440:	mov	r2, r0
   1b444:	mov	r0, #0
   1b448:	mov	r1, r0
   1b44c:	bl	12224 <error@plt>
   1b450:	mov	r3, #0
   1b454:	mov	r1, r7
   1b458:	mov	r0, r9
   1b45c:	rsb	r2, r7, r6
   1b460:	str	r8, [sp, #8]
   1b464:	mov	r7, r6
   1b468:	str	r3, [sp]
   1b46c:	str	r3, [sp, #4]
   1b470:	bl	1addc <__assert_fail@plt+0x87a4>
   1b474:	mov	r9, r0
   1b478:	mov	r6, r7
   1b47c:	b	1b260 <__assert_fail@plt+0x8c28>
   1b480:	sub	r3, r3, #92	; 0x5c
   1b484:	uxtb	r3, r3
   1b488:	cmp	r3, #26
   1b48c:	bls	1b4c4 <__assert_fail@plt+0x8e8c>
   1b490:	mov	r2, #5
   1b494:	movw	r1, #61844	; 0xf194
   1b498:	mov	r0, #0
   1b49c:	movt	r1, #2
   1b4a0:	bl	120d4 <dcgettext@plt>
   1b4a4:	mov	r5, r6
   1b4a8:	ldrb	r3, [r5, #1]!
   1b4ac:	add	r6, r6, #2
   1b4b0:	mov	r2, r0
   1b4b4:	mov	r0, #0
   1b4b8:	mov	r1, r0
   1b4bc:	bl	12224 <error@plt>
   1b4c0:	b	1b260 <__assert_fail@plt+0x8c28>
   1b4c4:	movw	r2, #61084	; 0xee9c
   1b4c8:	movt	r2, #2
   1b4cc:	add	r3, r2, r3
   1b4d0:	ldrb	r3, [r3, #152]	; 0x98
   1b4d4:	cmp	r3, #0
   1b4d8:	beq	1b490 <__assert_fail@plt+0x8e58>
   1b4dc:	strb	r3, [r6]
   1b4e0:	mov	ip, #2
   1b4e4:	mov	r5, #1
   1b4e8:	b	1b2cc <__assert_fail@plt+0x8c94>
   1b4ec:	mov	r0, r4
   1b4f0:	mov	r2, #5
   1b4f4:	movw	r1, #61880	; 0xf1b8
   1b4f8:	movt	r1, #2
   1b4fc:	bl	120d4 <dcgettext@plt>
   1b500:	mov	r1, r4
   1b504:	mov	r3, r6
   1b508:	mov	r2, r0
   1b50c:	mov	r0, #1
   1b510:	bl	12224 <error@plt>
   1b514:	ldrb	r4, [r6, #1]
   1b518:	b	1b32c <__assert_fail@plt+0x8cf4>
   1b51c:	add	r3, r5, #1
   1b520:	add	r2, r6, r3
   1b524:	ldrb	r4, [r6, r3]
   1b528:	lsl	r3, r4, #1
   1b52c:	ldrh	r3, [r1, r3]
   1b530:	tst	r3, #2048	; 0x800
   1b534:	beq	1b660 <__assert_fail@plt+0x9028>
   1b538:	add	r5, r5, #2
   1b53c:	add	r6, r6, r5
   1b540:	mov	r5, r6
   1b544:	ldrb	r4, [r6], #1
   1b548:	lsl	r3, r4, #1
   1b54c:	ldrh	r3, [r1, r3]
   1b550:	tst	r3, #2048	; 0x800
   1b554:	bne	1b540 <__assert_fail@plt+0x8f08>
   1b558:	b	1b3ac <__assert_fail@plt+0x8d74>
   1b55c:	mov	r2, r5
   1b560:	mov	r3, #0
   1b564:	mov	r1, r7
   1b568:	rsb	r2, r7, r2
   1b56c:	stmib	sp, {r3, r8}
   1b570:	mov	r0, r9
   1b574:	str	r4, [sp]
   1b578:	mov	r3, #2
   1b57c:	bl	1addc <__assert_fail@plt+0x87a4>
   1b580:	add	r7, r5, #1
   1b584:	mov	r9, r0
   1b588:	b	1b478 <__assert_fail@plt+0x8e40>
   1b58c:	movw	r0, #61956	; 0xf204
   1b590:	mov	r1, r4
   1b594:	movt	r0, #2
   1b598:	bl	12338 <strchr@plt>
   1b59c:	cmp	r0, #0
   1b5a0:	beq	1b668 <__assert_fail@plt+0x9030>
   1b5a4:	ldrb	r3, [r5, #1]
   1b5a8:	add	r6, r5, #1
   1b5ac:	cmp	r3, #0
   1b5b0:	moveq	sl, #2
   1b5b4:	beq	1b3d4 <__assert_fail@plt+0x8d9c>
   1b5b8:	mov	r2, r5
   1b5bc:	mov	r5, r6
   1b5c0:	b	1b564 <__assert_fail@plt+0x8f2c>
   1b5c4:	mov	r1, r7
   1b5c8:	str	r3, [sp]
   1b5cc:	rsb	r2, r7, r6
   1b5d0:	stmib	sp, {r3, r8}
   1b5d4:	mov	r0, r9
   1b5d8:	bl	1addc <__assert_fail@plt+0x87a4>
   1b5dc:	mov	r0, #1
   1b5e0:	add	sp, sp, #16
   1b5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b5e8:	mov	r0, r4
   1b5ec:	mov	r2, #5
   1b5f0:	movw	r1, #62032	; 0xf250
   1b5f4:	movt	r1, #2
   1b5f8:	bl	120d4 <dcgettext@plt>
   1b5fc:	mov	r1, r4
   1b600:	ldrb	r3, [r5]
   1b604:	mov	r2, r0
   1b608:	mov	r0, r4
   1b60c:	bl	12224 <error@plt>
   1b610:	b	1b450 <__assert_fail@plt+0x8e18>
   1b614:	mov	ip, #0
   1b618:	mov	r3, #1
   1b61c:	mov	r1, r7
   1b620:	str	r8, [sp, #8]
   1b624:	rsb	r2, r7, r6
   1b628:	mov	r0, r9
   1b62c:	str	ip, [sp]
   1b630:	str	ip, [sp, #4]
   1b634:	bl	1addc <__assert_fail@plt+0x87a4>
   1b638:	ldrb	r3, [r8, #18]
   1b63c:	cmp	r3, #0
   1b640:	beq	1b314 <__assert_fail@plt+0x8cdc>
   1b644:	ldr	r3, [r8, #24]
   1b648:	mov	r0, #1
   1b64c:	cmp	r3, #2
   1b650:	movls	r3, #3
   1b654:	strls	r3, [r8, #24]
   1b658:	add	sp, sp, #16
   1b65c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b660:	mov	r5, r2
   1b664:	b	1b3ac <__assert_fail@plt+0x8d74>
   1b668:	add	r6, r5, #1
   1b66c:	mov	sl, r0
   1b670:	b	1b3d4 <__assert_fail@plt+0x8d9c>
   1b674:	andeq	r0, r0, r0
   1b678:	b	2af54 <__assert_fail@plt+0x1891c>
   1b67c:	movw	r3, #21904	; 0x5590
   1b680:	movt	r3, #4
   1b684:	push	{r4, lr}
   1b688:	sub	sp, sp, #8
   1b68c:	ldr	r3, [r3]
   1b690:	movw	r0, #55368	; 0xd848
   1b694:	movt	r0, #2
   1b698:	movw	r4, #25384	; 0x6328
   1b69c:	movt	r4, #4
   1b6a0:	str	r3, [sp, #4]
   1b6a4:	bl	1f548 <__assert_fail@plt+0xcf10>
   1b6a8:	mov	r2, #5
   1b6ac:	movw	r1, #63732	; 0xf8f4
   1b6b0:	mov	r0, #0
   1b6b4:	movt	r1, #2
   1b6b8:	bl	120d4 <dcgettext@plt>
   1b6bc:	mov	r1, r0
   1b6c0:	mov	r0, #1
   1b6c4:	bl	123f8 <__printf_chk@plt>
   1b6c8:	movw	r1, #63752	; 0xf908
   1b6cc:	mov	r0, #1
   1b6d0:	movt	r1, #2
   1b6d4:	bl	123f8 <__printf_chk@plt>
   1b6d8:	ldrb	r1, [r4, #56]	; 0x38
   1b6dc:	movw	r3, #63712	; 0xf8e0
   1b6e0:	movt	r3, #2
   1b6e4:	cmp	r1, #0
   1b6e8:	movw	r2, #63720	; 0xf8e8
   1b6ec:	movw	r1, #63760	; 0xf910
   1b6f0:	movt	r2, #2
   1b6f4:	movt	r1, #2
   1b6f8:	movne	r2, r3
   1b6fc:	mov	r0, #1
   1b700:	bl	123f8 <__printf_chk@plt>
   1b704:	movw	r1, #63776	; 0xf920
   1b708:	mov	r0, #1
   1b70c:	movt	r1, #2
   1b710:	bl	123f8 <__printf_chk@plt>
   1b714:	bl	11fa8 <is_selinux_enabled@plt>
   1b718:	cmp	r0, #0
   1b71c:	ble	1b730 <__assert_fail@plt+0x90f8>
   1b720:	movw	r1, #63796	; 0xf934
   1b724:	mov	r0, #1
   1b728:	movt	r1, #2
   1b72c:	bl	123f8 <__printf_chk@plt>
   1b730:	add	r0, sp, #8
   1b734:	mov	r3, #0
   1b738:	str	r3, [r0, #-8]!
   1b73c:	mov	r0, sp
   1b740:	bl	13cb4 <__assert_fail@plt+0x167c>
   1b744:	cmp	r0, #0
   1b748:	bne	1b770 <__assert_fail@plt+0x9138>
   1b74c:	ldrh	r2, [r4, #68]	; 0x44
   1b750:	movw	r1, #63828	; 0xf954
   1b754:	mov	r0, #1
   1b758:	movt	r1, #2
   1b75c:	bl	123f8 <__printf_chk@plt>
   1b760:	mov	r0, #10
   1b764:	bl	123d4 <putchar@plt>
   1b768:	mov	r0, #0
   1b76c:	bl	12308 <exit@plt>
   1b770:	movw	r1, #63808	; 0xf940
   1b774:	mov	r0, #1
   1b778:	movt	r1, #2
   1b77c:	bl	123f8 <__printf_chk@plt>
   1b780:	ldr	r3, [sp]
   1b784:	tst	r3, #512	; 0x200
   1b788:	bne	1b7a0 <__assert_fail@plt+0x9168>
   1b78c:	movw	r1, #63840	; 0xf960
   1b790:	mov	r0, #1
   1b794:	movt	r1, #2
   1b798:	bl	123f8 <__printf_chk@plt>
   1b79c:	b	1b74c <__assert_fail@plt+0x9114>
   1b7a0:	movw	r1, #63816	; 0xf948
   1b7a4:	mov	r0, #1
   1b7a8:	movt	r1, #2
   1b7ac:	bl	123f8 <__printf_chk@plt>
   1b7b0:	b	1b78c <__assert_fail@plt+0x9154>
   1b7b4:	push	{r3, lr}
   1b7b8:	movw	r3, #21920	; 0x55a0
   1b7bc:	movt	r3, #4
   1b7c0:	mov	r1, #0
   1b7c4:	mov	r2, r1
   1b7c8:	ldr	r0, [r3]
   1b7cc:	bl	186d8 <__assert_fail@plt+0x60a0>
   1b7d0:	mov	r2, #5
   1b7d4:	movw	r1, #63844	; 0xf964
   1b7d8:	mov	r0, #0
   1b7dc:	movt	r1, #2
   1b7e0:	bl	120d4 <dcgettext@plt>
   1b7e4:	bl	12278 <puts@plt>
   1b7e8:	mov	r2, #5
   1b7ec:	movw	r1, #63984	; 0xf9f0
   1b7f0:	mov	r0, #0
   1b7f4:	movt	r1, #2
   1b7f8:	bl	120d4 <dcgettext@plt>
   1b7fc:	bl	12278 <puts@plt>
   1b800:	mov	r2, #5
   1b804:	movw	r1, #64192	; 0xfac0
   1b808:	mov	r0, #0
   1b80c:	movt	r1, #2
   1b810:	bl	120d4 <dcgettext@plt>
   1b814:	bl	12278 <puts@plt>
   1b818:	mov	r2, #5
   1b81c:	movw	r1, #64468	; 0xfbd4
   1b820:	mov	r0, #0
   1b824:	movt	r1, #2
   1b828:	bl	120d4 <dcgettext@plt>
   1b82c:	bl	12278 <puts@plt>
   1b830:	mov	r2, #5
   1b834:	movw	r1, #64768	; 0xfd00
   1b838:	mov	r0, #0
   1b83c:	movt	r1, #2
   1b840:	bl	120d4 <dcgettext@plt>
   1b844:	bl	12278 <puts@plt>
   1b848:	mov	r2, #5
   1b84c:	movw	r1, #64988	; 0xfddc
   1b850:	mov	r0, #0
   1b854:	movt	r1, #2
   1b858:	bl	120d4 <dcgettext@plt>
   1b85c:	bl	12278 <puts@plt>
   1b860:	mov	r2, #5
   1b864:	movw	r1, #65012	; 0xfdf4
   1b868:	mov	r0, #0
   1b86c:	movt	r1, #2
   1b870:	bl	120d4 <dcgettext@plt>
   1b874:	bl	12278 <puts@plt>
   1b878:	mov	r2, #5
   1b87c:	movw	r1, #65264	; 0xfef0
   1b880:	mov	r0, #0
   1b884:	movt	r1, #2
   1b888:	bl	120d4 <dcgettext@plt>
   1b88c:	bl	12278 <puts@plt>
   1b890:	mov	r0, #0
   1b894:	bl	12308 <exit@plt>
   1b898:	push	{r3, lr}
   1b89c:	bl	186d0 <__assert_fail@plt+0x6098>
   1b8a0:	mov	r2, #0
   1b8a4:	mov	r1, #1065353216	; 0x3f800000
   1b8a8:	mov	r3, r0
   1b8ac:	mov	r0, #1
   1b8b0:	strb	r2, [r3, #19]
   1b8b4:	strb	r2, [r3, #18]
   1b8b8:	str	r1, [r3, #28]
   1b8bc:	pop	{r3, pc}
   1b8c0:	push	{r3, lr}
   1b8c4:	bl	186d0 <__assert_fail@plt+0x6098>
   1b8c8:	mov	r2, #0
   1b8cc:	mov	r1, #1065353216	; 0x3f800000
   1b8d0:	mov	r3, r0
   1b8d4:	mov	r0, #1
   1b8d8:	strb	r2, [r3, #19]
   1b8dc:	strb	r0, [r3, #16]
   1b8e0:	strb	r2, [r3, #18]
   1b8e4:	strb	r2, [r3, #17]
   1b8e8:	str	r1, [r3, #28]
   1b8ec:	pop	{r3, pc}
   1b8f0:	push	{r3, lr}
   1b8f4:	bl	186d0 <__assert_fail@plt+0x6098>
   1b8f8:	movw	r2, #25384	; 0x6328
   1b8fc:	movt	r2, #4
   1b900:	ldrb	r2, [r2]
   1b904:	cmp	r2, #0
   1b908:	mov	r3, r0
   1b90c:	strbeq	r2, [r0, #19]
   1b910:	strbeq	r2, [r0, #18]
   1b914:	mov	r0, #1
   1b918:	mov	r2, #0
   1b91c:	strb	r0, [r3, #16]
   1b920:	strb	r2, [r3, #17]
   1b924:	pop	{r3, pc}
   1b928:	push	{r3, lr}
   1b92c:	bl	186d0 <__assert_fail@plt+0x6098>
   1b930:	movw	r3, #4719	; 0x126f
   1b934:	movt	r3, #14979	; 0x3a83
   1b938:	str	r3, [r0, #28]
   1b93c:	mov	r0, #1
   1b940:	pop	{r3, pc}
   1b944:	push	{r3, lr}
   1b948:	bl	186d0 <__assert_fail@plt+0x6098>
   1b94c:	movw	r2, #20424	; 0x4fc8
   1b950:	movt	r2, #1
   1b954:	mov	r3, #0
   1b958:	ldr	r1, [r0]
   1b95c:	strb	r3, [r0, #19]
   1b960:	cmp	r1, r2
   1b964:	strb	r3, [r0, #18]
   1b968:	strb	r3, [r0, #17]
   1b96c:	strb	r3, [r0, #16]
   1b970:	movweq	r3, #52429	; 0xcccd
   1b974:	movwne	r3, #26214	; 0x6666
   1b978:	movteq	r3, #15948	; 0x3e4c
   1b97c:	movtne	r3, #16230	; 0x3f66
   1b980:	str	r3, [r0, #28]
   1b984:	mov	r0, #1
   1b988:	pop	{r3, pc}
   1b98c:	push	{r3, lr}
   1b990:	bl	186d0 <__assert_fail@plt+0x6098>
   1b994:	movw	r3, #55050	; 0xd70a
   1b998:	movt	r3, #15395	; 0x3c23
   1b99c:	str	r3, [r0, #28]
   1b9a0:	mov	r0, #1
   1b9a4:	pop	{r3, pc}
   1b9a8:	push	{r3, lr}
   1b9ac:	bl	186d0 <__assert_fail@plt+0x6098>
   1b9b0:	mov	r2, #1
   1b9b4:	mov	r1, #0
   1b9b8:	mov	ip, #1065353216	; 0x3f800000
   1b9bc:	mov	r3, r0
   1b9c0:	movw	r0, #25384	; 0x6328
   1b9c4:	movt	r0, #4
   1b9c8:	strb	r2, [r3, #17]
   1b9cc:	strb	r1, [r3, #19]
   1b9d0:	strb	r1, [r0]
   1b9d4:	mov	r0, r2
   1b9d8:	strb	r1, [r3, #18]
   1b9dc:	strb	r2, [r3, #16]
   1b9e0:	str	ip, [r3, #28]
   1b9e4:	pop	{r3, pc}
   1b9e8:	cmp	r0, #0
   1b9ec:	push	{r4, r5, r6, r7, r8, lr}
   1b9f0:	mov	r6, r2
   1b9f4:	mov	r5, r3
   1b9f8:	popeq	{r4, r5, r6, r7, r8, pc}
   1b9fc:	ldr	ip, [r1]
   1ba00:	ldr	r4, [r0, ip, lsl #2]
   1ba04:	cmp	r4, #0
   1ba08:	beq	1baa4 <__assert_fail@plt+0x946c>
   1ba0c:	add	ip, ip, #1
   1ba10:	mov	r0, r4
   1ba14:	str	ip, [r1]
   1ba18:	bl	1232c <strlen@plt>
   1ba1c:	cmp	r0, #1
   1ba20:	bne	1ba80 <__assert_fail@plt+0x9448>
   1ba24:	ldrb	r3, [r4]
   1ba28:	sub	r3, r3, #98	; 0x62
   1ba2c:	cmp	r3, #17
   1ba30:	ldrls	pc, [pc, r3, lsl #2]
   1ba34:	b	1bb5c <__assert_fail@plt+0x9524>
   1ba38:	andeq	fp, r1, ip, asr #22
   1ba3c:	andeq	fp, r1, ip, lsr #21
   1ba40:	strdeq	fp, [r1], -ip
   1ba44:	andeq	fp, r1, ip, asr fp
   1ba48:	andeq	fp, r1, ip, lsl #22
   1ba4c:	andeq	fp, r1, ip, asr fp
   1ba50:	andeq	fp, r1, ip, asr fp
   1ba54:	andeq	fp, r1, ip, asr fp
   1ba58:	andeq	fp, r1, ip, asr fp
   1ba5c:	andeq	fp, r1, ip, asr fp
   1ba60:	andeq	fp, r1, ip, lsl fp
   1ba64:	andeq	fp, r1, ip, asr fp
   1ba68:	andeq	fp, r1, ip, asr fp
   1ba6c:	andeq	fp, r1, ip, asr fp
   1ba70:	andeq	fp, r1, ip, lsr #22
   1ba74:	andeq	fp, r1, ip, asr fp
   1ba78:	andeq	fp, r1, ip, asr fp
   1ba7c:	andeq	fp, r1, ip, lsr fp
   1ba80:	mov	r2, #5
   1ba84:	movw	r1, #65448	; 0xffa8
   1ba88:	mov	r0, #0
   1ba8c:	movt	r1, #2
   1ba90:	bl	120d4 <dcgettext@plt>
   1ba94:	mov	r1, #0
   1ba98:	mov	r2, r0
   1ba9c:	mov	r0, #1
   1baa0:	bl	12224 <error@plt>
   1baa4:	mov	r0, #0
   1baa8:	pop	{r4, r5, r6, r7, r8, pc}
   1baac:	movw	r8, #55050	; 0xd70a
   1bab0:	movt	r8, #15395	; 0x3c23
   1bab4:	mov	r7, #8192	; 0x2000
   1bab8:	mov	r2, r4
   1babc:	mov	r0, r6
   1bac0:	mov	r1, r5
   1bac4:	bl	18644 <__assert_fail@plt+0x600c>
   1bac8:	movw	r3, #21372	; 0x537c
   1bacc:	movt	r3, #1
   1bad0:	cmp	r5, r3
   1bad4:	moveq	r2, #1
   1bad8:	moveq	r3, #0
   1badc:	movne	r2, #0
   1bae0:	movne	r3, #1
   1bae4:	str	r8, [r0, #28]
   1bae8:	strb	r2, [r0, #18]
   1baec:	strb	r3, [r0, #19]
   1baf0:	str	r7, [r0, #40]	; 0x28
   1baf4:	mov	r0, #1
   1baf8:	pop	{r4, r5, r6, r7, r8, pc}
   1bafc:	movw	r8, #52429	; 0xcccd
   1bb00:	mov	r7, #16384	; 0x4000
   1bb04:	movt	r8, #16076	; 0x3ecc
   1bb08:	b	1bab8 <__assert_fail@plt+0x9480>
   1bb0c:	movw	r8, #13107	; 0x3333
   1bb10:	mov	r7, #32768	; 0x8000
   1bb14:	movt	r8, #16243	; 0x3f73
   1bb18:	b	1bab8 <__assert_fail@plt+0x9480>
   1bb1c:	movw	r8, #52429	; 0xcccd
   1bb20:	mov	r7, #40960	; 0xa000
   1bb24:	movt	r8, #15820	; 0x3dcc
   1bb28:	b	1bab8 <__assert_fail@plt+0x9480>
   1bb2c:	movw	r8, #55050	; 0xd70a
   1bb30:	mov	r7, #4096	; 0x1000
   1bb34:	movt	r8, #15395	; 0x3c23
   1bb38:	b	1bab8 <__assert_fail@plt+0x9480>
   1bb3c:	movw	r8, #55050	; 0xd70a
   1bb40:	mov	r7, #49152	; 0xc000
   1bb44:	movt	r8, #15395	; 0x3c23
   1bb48:	b	1bab8 <__assert_fail@plt+0x9480>
   1bb4c:	movw	r8, #55050	; 0xd70a
   1bb50:	mov	r7, #24576	; 0x6000
   1bb54:	movt	r8, #15395	; 0x3c23
   1bb58:	b	1bab8 <__assert_fail@plt+0x9480>
   1bb5c:	mov	r2, #5
   1bb60:	movw	r1, #65500	; 0xffdc
   1bb64:	mov	r0, #0
   1bb68:	movt	r1, #2
   1bb6c:	bl	120d4 <dcgettext@plt>
   1bb70:	ldrb	r3, [r4]
   1bb74:	mov	r1, #0
   1bb78:	mov	r2, r0
   1bb7c:	mov	r0, #1
   1bb80:	bl	12224 <error@plt>
   1bb84:	mov	r0, #0
   1bb88:	pop	{r4, r5, r6, r7, r8, pc}
   1bb8c:	mov	ip, r0
   1bb90:	movw	r3, #21372	; 0x537c
   1bb94:	mov	r0, r1
   1bb98:	movt	r3, #1
   1bb9c:	mov	r1, r2
   1bba0:	mov	r2, ip
   1bba4:	b	1b9e8 <__assert_fail@plt+0x93b0>
   1bba8:	mov	ip, r0
   1bbac:	movw	r3, #21036	; 0x522c
   1bbb0:	mov	r0, r1
   1bbb4:	movt	r3, #1
   1bbb8:	mov	r1, r2
   1bbbc:	mov	r2, ip
   1bbc0:	b	1b9e8 <__assert_fail@plt+0x93b0>
   1bbc4:	cmp	r1, #0
   1bbc8:	push	{r4, r5, r6, lr}
   1bbcc:	mov	r6, r0
   1bbd0:	beq	1bca0 <__assert_fail@plt+0x9668>
   1bbd4:	ldr	r3, [r2]
   1bbd8:	ldr	r4, [r1, r3, lsl #2]
   1bbdc:	cmp	r4, #0
   1bbe0:	beq	1bca0 <__assert_fail@plt+0x9668>
   1bbe4:	add	r3, r3, #1
   1bbe8:	mov	r0, r4
   1bbec:	str	r3, [r2]
   1bbf0:	bl	11f9c <getpwnam@plt>
   1bbf4:	mov	r5, r0
   1bbf8:	bl	124b8 <endpwent@plt>
   1bbfc:	cmp	r5, #0
   1bc00:	beq	1bc38 <__assert_fail@plt+0x9600>
   1bc04:	ldr	r5, [r5, #8]
   1bc08:	mov	r0, r6
   1bc0c:	mov	r1, r4
   1bc10:	bl	18678 <__assert_fail@plt+0x6040>
   1bc14:	cmp	r5, #99	; 0x63
   1bc18:	vldr	s14, [pc, #220]	; 1bcfc <__assert_fail@plt+0x96c4>
   1bc1c:	vldr	s15, [pc, #220]	; 1bd00 <__assert_fail@plt+0x96c8>
   1bc20:	vmovhi.f32	s15, s14
   1bc24:	mov	r3, r0
   1bc28:	str	r5, [r0, #40]	; 0x28
   1bc2c:	mov	r0, #1
   1bc30:	vstr	s15, [r3, #28]
   1bc34:	pop	{r4, r5, r6, pc}
   1bc38:	movw	r1, #65532	; 0xfffc
   1bc3c:	mov	r0, r4
   1bc40:	movt	r1, #2
   1bc44:	bl	1262c <strspn@plt>
   1bc48:	cmp	r0, #0
   1bc4c:	bne	1bca8 <__assert_fail@plt+0x9670>
   1bc50:	ldrb	r5, [r4]
   1bc54:	cmp	r5, #0
   1bc58:	beq	1bcd0 <__assert_fail@plt+0x9698>
   1bc5c:	mov	r2, #5
   1bc60:	movw	r1, #8
   1bc64:	mov	r0, #0
   1bc68:	movt	r1, #3
   1bc6c:	bl	120d4 <dcgettext@plt>
   1bc70:	movw	r3, #25384	; 0x6328
   1bc74:	movt	r3, #4
   1bc78:	mov	r2, r4
   1bc7c:	ldr	r1, [r3, #72]	; 0x48
   1bc80:	mov	r5, r0
   1bc84:	mov	r0, #0
   1bc88:	bl	28cec <__assert_fail@plt+0x166b4>
   1bc8c:	mov	r2, r5
   1bc90:	mov	r1, #0
   1bc94:	mov	r3, r0
   1bc98:	mov	r0, #1
   1bc9c:	bl	12224 <error@plt>
   1bca0:	mov	r0, #0
   1bca4:	pop	{r4, r5, r6, pc}
   1bca8:	ldrb	r3, [r4, r0]
   1bcac:	cmp	r3, #0
   1bcb0:	bne	1bc50 <__assert_fail@plt+0x9618>
   1bcb4:	movw	r3, #25384	; 0x6328
   1bcb8:	movt	r3, #4
   1bcbc:	mov	r0, r4
   1bcc0:	ldr	r1, [r3, #72]	; 0x48
   1bcc4:	bl	21174 <__assert_fail@plt+0xeb3c>
   1bcc8:	mov	r5, r0
   1bccc:	b	1bc08 <__assert_fail@plt+0x95d0>
   1bcd0:	mov	r0, r5
   1bcd4:	mov	r2, #5
   1bcd8:	movw	r1, #44	; 0x2c
   1bcdc:	movt	r1, #3
   1bce0:	bl	120d4 <dcgettext@plt>
   1bce4:	mov	r1, r5
   1bce8:	mov	r2, r0
   1bcec:	mov	r0, #1
   1bcf0:	bl	12224 <error@plt>
   1bcf4:	mov	r0, r5
   1bcf8:	pop	{r4, r5, r6, pc}
   1bcfc:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1bd00:	svccc	0x007d70a4
   1bd04:	push	{r3, lr}
   1bd08:	mov	r1, #0
   1bd0c:	bl	18678 <__assert_fail@plt+0x6040>
   1bd10:	movw	r3, #46871	; 0xb717
   1bd14:	movt	r3, #14545	; 0x38d1
   1bd18:	str	r3, [r0, #28]
   1bd1c:	mov	r0, #1
   1bd20:	pop	{r3, pc}
   1bd24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bd28:	vpush	{d8}
   1bd2c:	movw	r4, #21904	; 0x5590
   1bd30:	movt	r4, #4
   1bd34:	ldrb	ip, [r0]
   1bd38:	mov	r6, r1
   1bd3c:	sub	sp, sp, #32
   1bd40:	ldr	r1, [r4]
   1bd44:	cmp	ip, #43	; 0x2b
   1bd48:	mov	r5, r0
   1bd4c:	vmov.f64	d8, d0
   1bd50:	stm	sp, {r2, r3}
   1bd54:	mov	r8, r2
   1bd58:	str	r1, [sp, #28]
   1bd5c:	mov	r9, r3
   1bd60:	ldr	sl, [sp, #72]	; 0x48
   1bd64:	beq	1be6c <__assert_fail@plt+0x9834>
   1bd68:	cmp	ip, #45	; 0x2d
   1bd6c:	beq	1bdb8 <__assert_fail@plt+0x9780>
   1bd70:	mov	r3, #2
   1bd74:	str	r3, [r6, #4]
   1bd78:	movw	r3, #9220	; 0x2404
   1bd7c:	mov	r0, r5
   1bd80:	movt	r3, #1
   1bd84:	mov	r1, #0
   1bd88:	add	r2, sp, #8
   1bd8c:	bl	29790 <__assert_fail@plt+0x17158>
   1bd90:	subs	r7, r0, #0
   1bd94:	bne	1bdc8 <__assert_fail@plt+0x9790>
   1bd98:	ldr	r2, [sp, #28]
   1bd9c:	mov	r0, r7
   1bda0:	ldr	r3, [r4]
   1bda4:	cmp	r2, r3
   1bda8:	bne	1be94 <__assert_fail@plt+0x985c>
   1bdac:	add	sp, sp, #32
   1bdb0:	vpop	{d8}
   1bdb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bdb8:	mov	r3, #0
   1bdbc:	add	r5, r5, #1
   1bdc0:	str	r3, [r6, #4]
   1bdc4:	b	1bd78 <__assert_fail@plt+0x9740>
   1bdc8:	vldr	d0, [sp, #8]
   1bdcc:	add	r0, sp, #16
   1bdd0:	vmul.f64	d0, d8, d0
   1bdd4:	bl	122d8 <modf@plt>
   1bdd8:	vldr	d7, [pc, #216]	; 1beb8 <__assert_fail@plt+0x9880>
   1bddc:	vmul.f64	d8, d0, d7
   1bde0:	vcmpe.f64	d8, d7
   1bde4:	vmrs	APSR_nzcv, fpscr
   1bde8:	bpl	1be98 <__assert_fail@plt+0x9860>
   1bdec:	vmov	s11, r8
   1bdf0:	vldr	d7, [sp, #16]
   1bdf4:	vcmpe.f64	d7, #0.0
   1bdf8:	vcvt.f64.s32	d6, s11
   1bdfc:	vmrs	APSR_nzcv, fpscr
   1be00:	movpl	r2, #0
   1be04:	movmi	r2, #1
   1be08:	vsub.f64	d6, d6, d7
   1be0c:	vcvt.s32.f64	s11, d6
   1be10:	vmov	r3, s11
   1be14:	vstr	s11, [r6, #8]
   1be18:	cmp	r3, r8
   1be1c:	movle	r8, r2
   1be20:	eorgt	r8, r2, #1
   1be24:	cmp	r8, #0
   1be28:	bne	1be7c <__assert_fail@plt+0x9844>
   1be2c:	vmov	s13, r9
   1be30:	vcvt.f64.s32	d7, s13
   1be34:	vsub.f64	d6, d7, d8
   1be38:	vcvt.s32.f64	s12, d6
   1be3c:	vcmpe.f64	d8, d7
   1be40:	vmrs	APSR_nzcv, fpscr
   1be44:	vmovgt	r1, s12
   1be48:	ldrgt	r2, [r6, #8]
   1be4c:	movgt	r3, #51712	; 0xca00
   1be50:	movtgt	r3, #15258	; 0x3b9a
   1be54:	vstrle	s12, [r6, #12]
   1be58:	subgt	r2, r2, #1
   1be5c:	strgt	r2, [r6, #8]
   1be60:	addgt	r3, r1, r3
   1be64:	strgt	r3, [r6, #12]
   1be68:	b	1bd98 <__assert_fail@plt+0x9760>
   1be6c:	mov	r3, #1
   1be70:	add	r5, r5, #1
   1be74:	str	r3, [r6, #4]
   1be78:	b	1bd78 <__assert_fail@plt+0x9740>
   1be7c:	mov	r2, sl
   1be80:	mov	r3, r5
   1be84:	mov	r0, #1
   1be88:	mov	r1, #0
   1be8c:	bl	12224 <error@plt>
   1be90:	b	1be2c <__assert_fail@plt+0x97f4>
   1be94:	bl	120e0 <__stack_chk_fail@plt>
   1be98:	movw	r0, #88	; 0x58
   1be9c:	movw	r1, #116	; 0x74
   1bea0:	movw	r3, #62232	; 0xf318
   1bea4:	movt	r0, #3
   1bea8:	movt	r1, #3
   1beac:	movw	r2, #3272	; 0xcc8
   1beb0:	movt	r3, #2
   1beb4:	bl	12638 <__assert_fail@plt>
   1beb8:	andeq	r0, r0, r0
   1bebc:	bicmi	ip, sp, r5, ror #26
   1bec0:	push	{r4, lr}
   1bec4:	movw	r4, #21904	; 0x5590
   1bec8:	movt	r4, #4
   1becc:	sub	sp, sp, #16
   1bed0:	cmp	r0, #0
   1bed4:	ldr	ip, [r4]
   1bed8:	str	ip, [sp, #12]
   1bedc:	beq	1bf2c <__assert_fail@plt+0x98f4>
   1bee0:	cmp	r2, #0
   1bee4:	beq	1bf08 <__assert_fail@plt+0x98d0>
   1bee8:	ldrb	ip, [r0]
   1beec:	cmp	ip, #43	; 0x2b
   1bef0:	beq	1bf50 <__assert_fail@plt+0x9918>
   1bef4:	cmp	ip, #45	; 0x2d
   1bef8:	bne	1bf44 <__assert_fail@plt+0x990c>
   1befc:	add	r0, r0, #1
   1bf00:	mov	r3, #1
   1bf04:	str	r3, [r2]
   1bf08:	mov	r3, r1
   1bf0c:	movw	ip, #54180	; 0xd3a4
   1bf10:	add	r1, sp, #8
   1bf14:	movt	ip, #2
   1bf18:	mov	r2, #10
   1bf1c:	str	ip, [sp]
   1bf20:	bl	29d64 <__assert_fail@plt+0x1772c>
   1bf24:	rsbs	r0, r0, #1
   1bf28:	movcc	r0, #0
   1bf2c:	ldr	r2, [sp, #12]
   1bf30:	ldr	r3, [r4]
   1bf34:	cmp	r2, r3
   1bf38:	bne	1bf60 <__assert_fail@plt+0x9928>
   1bf3c:	add	sp, sp, #16
   1bf40:	pop	{r4, pc}
   1bf44:	mov	r3, #2
   1bf48:	str	r3, [r2]
   1bf4c:	b	1bf08 <__assert_fail@plt+0x98d0>
   1bf50:	mov	r3, #0
   1bf54:	add	r0, r0, #1
   1bf58:	str	r3, [r2]
   1bf5c:	b	1bf08 <__assert_fail@plt+0x98d0>
   1bf60:	bl	120e0 <__stack_chk_fail@plt>
   1bf64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf68:	movw	r8, #21904	; 0x5590
   1bf6c:	movt	r8, #4
   1bf70:	sub	sp, sp, #36	; 0x24
   1bf74:	subs	sl, r1, #0
   1bf78:	mov	r6, r0
   1bf7c:	ldr	r3, [r8]
   1bf80:	mov	r9, r2
   1bf84:	str	r3, [sp, #28]
   1bf88:	beq	1c17c <__assert_fail@plt+0x9b44>
   1bf8c:	ldr	r3, [r2]
   1bf90:	ldr	r5, [sl, r3, lsl #2]
   1bf94:	cmp	r5, #0
   1bf98:	beq	1c2b8 <__assert_fail@plt+0x9c80>
   1bf9c:	mov	r0, r5
   1bfa0:	bl	1232c <strlen@plt>
   1bfa4:	subs	fp, r0, #0
   1bfa8:	beq	1c198 <__assert_fail@plt+0x9b60>
   1bfac:	sub	fp, fp, #1
   1bfb0:	ldrb	r7, [r5, fp]
   1bfb4:	sub	r3, r7, #48	; 0x30
   1bfb8:	cmp	r3, #71	; 0x47
   1bfbc:	ldrls	pc, [pc, r3, lsl #2]
   1bfc0:	b	1c21c <__assert_fail@plt+0x9be4>
   1bfc4:	andeq	ip, r1, r4, ror #1
   1bfc8:	andeq	ip, r1, r4, ror #1
   1bfcc:	andeq	ip, r1, r4, ror #1
   1bfd0:	andeq	ip, r1, r4, ror #1
   1bfd4:	andeq	ip, r1, r4, ror #1
   1bfd8:	andeq	ip, r1, r4, ror #1
   1bfdc:	andeq	ip, r1, r4, ror #1
   1bfe0:	andeq	ip, r1, r4, ror #1
   1bfe4:	andeq	ip, r1, r4, ror #1
   1bfe8:	andeq	ip, r1, r4, ror #1
   1bfec:	andeq	ip, r1, ip, lsl r2
   1bff0:	andeq	ip, r1, ip, lsl r2
   1bff4:	andeq	ip, r1, ip, lsl r2
   1bff8:	andeq	ip, r1, ip, lsl r2
   1bffc:	andeq	ip, r1, ip, lsl r2
   1c000:	andeq	ip, r1, ip, lsl r2
   1c004:	andeq	ip, r1, ip, lsl r2
   1c008:	andeq	ip, r1, ip, lsl r2
   1c00c:	andeq	ip, r1, ip, lsl r2
   1c010:	andeq	ip, r1, ip, lsl r2
   1c014:	andeq	ip, r1, ip, lsl r2
   1c018:	andeq	ip, r1, ip, lsl r2
   1c01c:	andeq	ip, r1, ip, lsl r2
   1c020:			; <UNDEFINED> instruction: 0x0001c1bc
   1c024:	andeq	ip, r1, ip, lsl r2
   1c028:	andeq	ip, r1, ip, lsl r2
   1c02c:	andeq	ip, r1, ip, lsl r2
   1c030:	andeq	ip, r1, ip, lsl r2
   1c034:	andeq	ip, r1, ip, lsl r2
   1c038:	andeq	ip, r1, ip, asr #3
   1c03c:	andeq	ip, r1, ip, lsl r2
   1c040:	andeq	ip, r1, ip, lsl r2
   1c044:	andeq	ip, r1, ip, lsl r2
   1c048:	andeq	ip, r1, ip, lsl r2
   1c04c:	andeq	ip, r1, ip, lsl r2
   1c050:	andeq	ip, r1, ip, lsl r2
   1c054:	andeq	ip, r1, ip, lsl r2
   1c058:	andeq	ip, r1, ip, lsl r2
   1c05c:	andeq	ip, r1, ip, lsl r2
   1c060:	andeq	ip, r1, ip, lsl r2
   1c064:	andeq	ip, r1, ip, lsl r2
   1c068:	andeq	ip, r1, ip, lsl r2
   1c06c:	andeq	ip, r1, ip, lsl r2
   1c070:	andeq	ip, r1, ip, lsl r2
   1c074:	andeq	ip, r1, ip, lsl r2
   1c078:	andeq	ip, r1, ip, lsl r2
   1c07c:	andeq	ip, r1, ip, lsl r2
   1c080:	andeq	ip, r1, ip, lsl r2
   1c084:	andeq	ip, r1, ip, lsl r2
   1c088:	andeq	ip, r1, ip, lsl r2
   1c08c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c090:	andeq	ip, r1, ip, ror #3
   1c094:	andeq	ip, r1, ip, lsl r2
   1c098:	andeq	ip, r1, ip, lsl r2
   1c09c:	andeq	ip, r1, ip, lsl r2
   1c0a0:	andeq	ip, r1, ip, lsl r2
   1c0a4:	andeq	ip, r1, ip, lsl r2
   1c0a8:	andeq	ip, r1, ip, lsl r2
   1c0ac:	andeq	ip, r1, ip, lsl r2
   1c0b0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c0b4:	andeq	ip, r1, ip, lsl r2
   1c0b8:	andeq	ip, r1, ip, lsl r2
   1c0bc:	andeq	ip, r1, ip, lsl r2
   1c0c0:	andeq	ip, r1, ip, lsl r2
   1c0c4:	andeq	ip, r1, ip, lsl r2
   1c0c8:	andeq	ip, r1, ip, lsl r2
   1c0cc:	andeq	ip, r1, ip, lsl r2
   1c0d0:	andeq	ip, r1, ip, lsl r2
   1c0d4:	andeq	ip, r1, ip, lsl r2
   1c0d8:	andeq	ip, r1, ip, lsl r2
   1c0dc:	andeq	ip, r1, ip, lsl r2
   1c0e0:	andeq	ip, r1, ip, lsl #4
   1c0e4:	mov	r4, #512	; 0x200
   1c0e8:	mov	r7, #0
   1c0ec:	mov	r0, r5
   1c0f0:	add	r1, sp, #16
   1c0f4:	add	r2, sp, #12
   1c0f8:	bl	1bec0 <__assert_fail@plt+0x9888>
   1c0fc:	subs	sl, r0, #0
   1c100:	beq	1c254 <__assert_fail@plt+0x9c1c>
   1c104:	mov	r1, r5
   1c108:	mov	r0, r6
   1c10c:	bl	18678 <__assert_fail@plt+0x6040>
   1c110:	ldr	r3, [sp, #12]
   1c114:	ldr	r1, [sp, #16]
   1c118:	mov	r2, #0
   1c11c:	ldr	ip, [sp, #20]
   1c120:	cmp	r3, r2
   1c124:	mov	r5, #1
   1c128:	str	r4, [r0, #44]	; 0x2c
   1c12c:	strb	r5, [r0, #18]
   1c130:	strb	r2, [r0, #19]
   1c134:	str	r3, [r0, #40]	; 0x28
   1c138:	str	r1, [r0, #48]	; 0x30
   1c13c:	str	ip, [r0, #52]	; 0x34
   1c140:	bne	1c28c <__assert_fail@plt+0x9c54>
   1c144:	asr	r7, r4, #31
   1c148:	vldr	s14, [pc, #372]	; 1c2c4 <__assert_fail@plt+0x9c8c>
   1c14c:	mul	ip, r4, ip
   1c150:	vldr	s15, [pc, #368]	; 1c2c8 <__assert_fail@plt+0x9c90>
   1c154:	mla	ip, r1, r7, ip
   1c158:	umull	r4, r5, r4, r1
   1c15c:	add	r5, ip, r5
   1c160:	cmp	r5, #0
   1c164:	cmpeq	r4, #20480	; 0x5000
   1c168:	vmovls.f32	s15, s14
   1c16c:	vstr	s15, [r0, #28]
   1c170:	ldr	r3, [r9]
   1c174:	add	r3, r3, #1
   1c178:	str	r3, [r9]
   1c17c:	ldr	r2, [sp, #28]
   1c180:	mov	r0, sl
   1c184:	ldr	r3, [r8]
   1c188:	cmp	r2, r3
   1c18c:	bne	1c2c0 <__assert_fail@plt+0x9c88>
   1c190:	add	sp, sp, #36	; 0x24
   1c194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c198:	mov	r2, #5
   1c19c:	movw	r1, #128	; 0x80
   1c1a0:	movt	r1, #3
   1c1a4:	bl	120d4 <dcgettext@plt>
   1c1a8:	mov	r1, fp
   1c1ac:	mov	r2, r0
   1c1b0:	mov	r0, #1
   1c1b4:	bl	12224 <error@plt>
   1c1b8:	b	1bfac <__assert_fail@plt+0x9974>
   1c1bc:	mov	r3, #0
   1c1c0:	mov	r4, #1073741824	; 0x40000000
   1c1c4:	strb	r3, [r5, fp]
   1c1c8:	b	1c0ec <__assert_fail@plt+0x9ab4>
   1c1cc:	mov	r3, #0
   1c1d0:	mov	r4, #1048576	; 0x100000
   1c1d4:	strb	r3, [r5, fp]
   1c1d8:	b	1c0ec <__assert_fail@plt+0x9ab4>
   1c1dc:	mov	r3, #0
   1c1e0:	mov	r4, #512	; 0x200
   1c1e4:	strb	r3, [r5, fp]
   1c1e8:	b	1c0ec <__assert_fail@plt+0x9ab4>
   1c1ec:	mov	r3, #0
   1c1f0:	mov	r4, #1
   1c1f4:	strb	r3, [r5, fp]
   1c1f8:	b	1c0ec <__assert_fail@plt+0x9ab4>
   1c1fc:	mov	r3, #0
   1c200:	mov	r4, #1024	; 0x400
   1c204:	strb	r3, [r5, fp]
   1c208:	b	1c0ec <__assert_fail@plt+0x9ab4>
   1c20c:	mov	r3, #0
   1c210:	mov	r4, #2
   1c214:	strb	r3, [r5, fp]
   1c218:	b	1c0ec <__assert_fail@plt+0x9ab4>
   1c21c:	mov	r2, #5
   1c220:	movw	r1, #160	; 0xa0
   1c224:	mov	r0, #0
   1c228:	movt	r1, #3
   1c22c:	bl	120d4 <dcgettext@plt>
   1c230:	ldr	r3, [r9]
   1c234:	mov	r1, #0
   1c238:	mov	r4, #512	; 0x200
   1c23c:	ldr	r3, [sl, r3, lsl #2]
   1c240:	ldrb	r3, [r3, fp]
   1c244:	mov	r2, r0
   1c248:	mov	r0, #1
   1c24c:	bl	12224 <error@plt>
   1c250:	b	1c0ec <__assert_fail@plt+0x9ab4>
   1c254:	mov	r2, #5
   1c258:	movw	r1, #184	; 0xb8
   1c25c:	movt	r1, #3
   1c260:	strb	r7, [sp, #24]
   1c264:	strb	sl, [sp, #25]
   1c268:	bl	120d4 <dcgettext@plt>
   1c26c:	add	ip, sp, #24
   1c270:	mov	r3, r5
   1c274:	mov	r1, sl
   1c278:	str	ip, [sp]
   1c27c:	mov	r2, r0
   1c280:	mov	r0, #1
   1c284:	bl	12224 <error@plt>
   1c288:	b	1c17c <__assert_fail@plt+0x9b44>
   1c28c:	cmp	r3, #1
   1c290:	movwne	r3, #55050	; 0xd70a
   1c294:	movtne	r3, #15395	; 0x3c23
   1c298:	strne	r3, [r0, #28]
   1c29c:	bne	1c170 <__assert_fail@plt+0x9b38>
   1c2a0:	asr	r3, r4, #31
   1c2a4:	vldr	s14, [pc, #28]	; 1c2c8 <__assert_fail@plt+0x9c90>
   1c2a8:	mul	ip, r4, ip
   1c2ac:	vldr	s15, [pc, #16]	; 1c2c4 <__assert_fail@plt+0x9c8c>
   1c2b0:	mla	ip, r1, r3, ip
   1c2b4:	b	1c158 <__assert_fail@plt+0x9b20>
   1c2b8:	mov	sl, r5
   1c2bc:	b	1c17c <__assert_fail@plt+0x9b44>
   1c2c0:	bl	120e0 <__stack_chk_fail@plt>
   1c2c4:	svccc	0x00666666
   1c2c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c2cc:	push	{r4, r5, r6, r7, lr}
   1c2d0:	movw	r6, #21904	; 0x5590
   1c2d4:	movt	r6, #4
   1c2d8:	sub	sp, sp, #36	; 0x24
   1c2dc:	cmp	r0, #0
   1c2e0:	mov	r5, r2
   1c2e4:	ldr	r3, [r6]
   1c2e8:	str	r3, [sp, #28]
   1c2ec:	beq	1c35c <__assert_fail@plt+0x9d24>
   1c2f0:	ldr	r3, [r1]
   1c2f4:	ldr	r4, [r0, r3, lsl #2]
   1c2f8:	cmp	r4, #0
   1c2fc:	moveq	r0, r4
   1c300:	beq	1c35c <__assert_fail@plt+0x9d24>
   1c304:	add	r3, r3, #1
   1c308:	mov	r0, r4
   1c30c:	str	r3, [r1]
   1c310:	add	r2, sp, #12
   1c314:	add	r1, sp, #16
   1c318:	bl	1bec0 <__assert_fail@plt+0x9888>
   1c31c:	cmp	r0, #0
   1c320:	beq	1c35c <__assert_fail@plt+0x9d24>
   1c324:	mov	r1, r4
   1c328:	mov	r0, r5
   1c32c:	bl	18678 <__assert_fail@plt+0x6040>
   1c330:	movw	r1, #25384	; 0x6328
   1c334:	movt	r1, #4
   1c338:	ldrd	r2, [sp, #16]
   1c33c:	mov	r7, r0
   1c340:	ldr	r0, [sp, #12]
   1c344:	strd	r2, [r7, #48]	; 0x30
   1c348:	str	r0, [r7, #40]	; 0x28
   1c34c:	ldr	r1, [r1, #44]	; 0x2c
   1c350:	tst	r1, #1
   1c354:	bne	1c374 <__assert_fail@plt+0x9d3c>
   1c358:	mov	r0, r7
   1c35c:	ldr	r2, [sp, #28]
   1c360:	ldr	r3, [r6]
   1c364:	cmp	r2, r3
   1c368:	bne	1c434 <__assert_fail@plt+0x9dfc>
   1c36c:	add	sp, sp, #36	; 0x24
   1c370:	pop	{r4, r5, r6, r7, pc}
   1c374:	movw	r4, #21912	; 0x5598
   1c378:	movt	r4, #4
   1c37c:	ldr	r3, [r7, #4]
   1c380:	movw	r2, #248	; 0xf8
   1c384:	mov	r1, #1
   1c388:	ldr	r0, [r4]
   1c38c:	movt	r2, #3
   1c390:	bl	12428 <__fprintf_chk@plt>
   1c394:	ldr	r3, [sp, #12]
   1c398:	ldr	r0, [r4]
   1c39c:	cmp	r3, #0
   1c3a0:	beq	1c3dc <__assert_fail@plt+0x9da4>
   1c3a4:	cmp	r3, #1
   1c3a8:	beq	1c420 <__assert_fail@plt+0x9de8>
   1c3ac:	cmp	r3, #2
   1c3b0:	movw	ip, #240	; 0xf0
   1c3b4:	movw	r3, #61716	; 0xf114
   1c3b8:	movt	ip, #3
   1c3bc:	movt	r3, #2
   1c3c0:	movw	r1, #244	; 0xf4
   1c3c4:	movw	r2, #236	; 0xec
   1c3c8:	movt	r1, #3
   1c3cc:	movt	r2, #3
   1c3d0:	moveq	r3, ip
   1c3d4:	moveq	r2, r1
   1c3d8:	b	1c3ec <__assert_fail@plt+0x9db4>
   1c3dc:	movw	r3, #228	; 0xe4
   1c3e0:	movw	r2, #232	; 0xe8
   1c3e4:	movt	r3, #3
   1c3e8:	movt	r2, #3
   1c3ec:	str	r2, [sp]
   1c3f0:	mov	r1, #1
   1c3f4:	movw	r2, #264	; 0x108
   1c3f8:	movt	r2, #3
   1c3fc:	bl	12428 <__fprintf_chk@plt>
   1c400:	ldr	r0, [r4]
   1c404:	ldrd	r4, [r7, #48]	; 0x30
   1c408:	movw	r2, #288	; 0x120
   1c40c:	mov	r1, #1
   1c410:	movt	r2, #3
   1c414:	strd	r4, [sp]
   1c418:	bl	12428 <__fprintf_chk@plt>
   1c41c:	b	1c358 <__assert_fail@plt+0x9d20>
   1c420:	movw	r3, #220	; 0xdc
   1c424:	movw	r2, #224	; 0xe0
   1c428:	movt	r3, #3
   1c42c:	movt	r2, #3
   1c430:	b	1c3ec <__assert_fail@plt+0x9db4>
   1c434:	bl	120e0 <__stack_chk_fail@plt>
   1c438:	mov	r3, r0
   1c43c:	mov	r0, r1
   1c440:	push	{r4, lr}
   1c444:	mov	r4, r2
   1c448:	mov	r1, r4
   1c44c:	mov	r2, r3
   1c450:	bl	1c2cc <__assert_fail@plt+0x9c94>
   1c454:	subs	ip, r0, #0
   1c458:	beq	1c480 <__assert_fail@plt+0x9e48>
   1c45c:	ldrd	r2, [ip, #48]	; 0x30
   1c460:	vldr	s14, [pc, #44]	; 1c494 <__assert_fail@plt+0x9e5c>
   1c464:	vldr	s15, [pc, #44]	; 1c498 <__assert_fail@plt+0x9e60>
   1c468:	mov	r0, #1
   1c46c:	cmp	r3, #0
   1c470:	cmpeq	r2, #99	; 0x63
   1c474:	vmovhi.f32	s15, s14
   1c478:	vstr	s15, [ip, #28]
   1c47c:	pop	{r4, pc}
   1c480:	ldr	r3, [r4]
   1c484:	mov	r0, ip
   1c488:	sub	r3, r3, #1
   1c48c:	str	r3, [r4]
   1c490:	pop	{r4, pc}
   1c494:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c498:	svccc	0x007d70a4
   1c49c:	mov	r3, r0
   1c4a0:	mov	r0, r1
   1c4a4:	push	{r4, lr}
   1c4a8:	mov	r4, r2
   1c4ac:	mov	r1, r4
   1c4b0:	mov	r2, r3
   1c4b4:	bl	1c2cc <__assert_fail@plt+0x9c94>
   1c4b8:	subs	ip, r0, #0
   1c4bc:	beq	1c508 <__assert_fail@plt+0x9ed0>
   1c4c0:	ldrd	r2, [ip, #48]	; 0x30
   1c4c4:	cmp	r3, #0
   1c4c8:	cmpeq	r2, #1
   1c4cc:	beq	1c4f4 <__assert_fail@plt+0x9ebc>
   1c4d0:	cmp	r3, #0
   1c4d4:	cmpeq	r2, #2
   1c4d8:	mov	r0, #1
   1c4dc:	movweq	r3, #55050	; 0xd70a
   1c4e0:	movwne	r3, #4719	; 0x126f
   1c4e4:	movteq	r3, #15395	; 0x3c23
   1c4e8:	movtne	r3, #14979	; 0x3a83
   1c4ec:	str	r3, [ip, #28]
   1c4f0:	pop	{r4, pc}
   1c4f4:	movw	r3, #28836	; 0x70a4
   1c4f8:	mov	r0, #1
   1c4fc:	movt	r3, #16253	; 0x3f7d
   1c500:	str	r3, [ip, #28]
   1c504:	pop	{r4, pc}
   1c508:	ldr	r3, [r4]
   1c50c:	mov	r0, ip
   1c510:	sub	r3, r3, #1
   1c514:	str	r3, [r4]
   1c518:	pop	{r4, pc}
   1c51c:	mov	r3, r0
   1c520:	mov	r0, r1
   1c524:	push	{r4, lr}
   1c528:	mov	r4, r2
   1c52c:	mov	r1, r4
   1c530:	mov	r2, r3
   1c534:	bl	1c2cc <__assert_fail@plt+0x9c94>
   1c538:	subs	r3, r0, #0
   1c53c:	beq	1c564 <__assert_fail@plt+0x9f2c>
   1c540:	mov	r0, #1
   1c544:	movw	r2, #14269	; 0x37bd
   1c548:	strb	r0, [r3, #20]
   1c54c:	movt	r2, #13702	; 0x3586
   1c550:	str	r2, [r3, #28]
   1c554:	mov	r2, #0
   1c558:	strb	r2, [r3, #18]
   1c55c:	strb	r2, [r3, #19]
   1c560:	pop	{r4, pc}
   1c564:	ldr	r2, [r4]
   1c568:	mov	r0, r3
   1c56c:	sub	r3, r2, #1
   1c570:	str	r3, [r4]
   1c574:	pop	{r4, pc}
   1c578:	mov	r3, r0
   1c57c:	mov	r0, r1
   1c580:	push	{r4, lr}
   1c584:	mov	r4, r2
   1c588:	mov	r1, r4
   1c58c:	mov	r2, r3
   1c590:	bl	1c2cc <__assert_fail@plt+0x9c94>
   1c594:	subs	ip, r0, #0
   1c598:	beq	1c5c0 <__assert_fail@plt+0x9f88>
   1c59c:	ldrd	r2, [ip, #48]	; 0x30
   1c5a0:	vldr	s14, [pc, #44]	; 1c5d4 <__assert_fail@plt+0x9f9c>
   1c5a4:	vldr	s15, [pc, #44]	; 1c5d8 <__assert_fail@plt+0x9fa0>
   1c5a8:	mov	r0, #1
   1c5ac:	cmp	r3, #0
   1c5b0:	cmpeq	r2, #99	; 0x63
   1c5b4:	vmovhi.f32	s15, s14
   1c5b8:	vstr	s15, [ip, #28]
   1c5bc:	pop	{r4, pc}
   1c5c0:	ldr	r3, [r4]
   1c5c4:	mov	r0, ip
   1c5c8:	sub	r3, r3, #1
   1c5cc:	str	r3, [r4]
   1c5d0:	pop	{r4, pc}
   1c5d4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c5d8:	svccc	0x007d70a4
   1c5dc:	cmp	r0, #0
   1c5e0:	push	{r4, r5, r6, lr}
   1c5e4:	mov	r5, r1
   1c5e8:	beq	1c630 <__assert_fail@plt+0x9ff8>
   1c5ec:	ldr	r6, [r1]
   1c5f0:	ldr	r4, [r0, r6, lsl #2]
   1c5f4:	cmp	r4, #0
   1c5f8:	beq	1c630 <__assert_fail@plt+0x9ff8>
   1c5fc:	movw	ip, #25384	; 0x6328
   1c600:	movt	ip, #4
   1c604:	add	r6, r6, #1
   1c608:	mov	r1, r2
   1c60c:	str	r6, [r5]
   1c610:	mov	r0, r4
   1c614:	str	r4, [r3]
   1c618:	ldr	r3, [ip, #52]	; 0x34
   1c61c:	blx	r3
   1c620:	cmp	r0, #0
   1c624:	bne	1c63c <__assert_fail@plt+0xa004>
   1c628:	mov	r0, #1
   1c62c:	pop	{r4, r5, r6, pc}
   1c630:	mov	r0, #0
   1c634:	str	r0, [r3]
   1c638:	pop	{r4, r5, r6, pc}
   1c63c:	bl	1238c <__errno_location@plt>
   1c640:	mov	r1, r4
   1c644:	ldr	r0, [r0]
   1c648:	bl	197b8 <__assert_fail@plt+0x7180>
   1c64c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c650:	movw	r4, #21904	; 0x5590
   1c654:	movt	r4, #4
   1c658:	sub	sp, sp, #228	; 0xe4
   1c65c:	mov	r5, r1
   1c660:	mov	r7, r2
   1c664:	ldr	r3, [r4]
   1c668:	mov	r6, r0
   1c66c:	add	r0, sp, #8
   1c670:	str	r3, [sp, #220]	; 0xdc
   1c674:	bl	187ec <__assert_fail@plt+0x61b4>
   1c678:	mov	r0, r5
   1c67c:	mov	r1, r7
   1c680:	add	r2, sp, #8
   1c684:	add	r3, sp, #4
   1c688:	bl	1c5dc <__assert_fail@plt+0x9fa4>
   1c68c:	subs	r5, r0, #0
   1c690:	bne	1c6b0 <__assert_fail@plt+0xa078>
   1c694:	ldr	r2, [sp, #220]	; 0xdc
   1c698:	mov	r0, r5
   1c69c:	ldr	r3, [r4]
   1c6a0:	cmp	r2, r3
   1c6a4:	bne	1c7f4 <__assert_fail@plt+0xa1bc>
   1c6a8:	add	sp, sp, #228	; 0xe4
   1c6ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c6b0:	movw	r8, #25384	; 0x6328
   1c6b4:	movt	r8, #4
   1c6b8:	add	r0, sp, #112	; 0x70
   1c6bc:	bl	187ec <__assert_fail@plt+0x61b4>
   1c6c0:	ldr	r3, [r8, #48]	; 0x30
   1c6c4:	cmp	r3, #0
   1c6c8:	beq	1c7b4 <__assert_fail@plt+0xa17c>
   1c6cc:	mov	r1, #0
   1c6d0:	ldr	r0, [sp, #4]
   1c6d4:	bl	20f9c <__assert_fail@plt+0xe964>
   1c6d8:	subs	r7, r0, #0
   1c6dc:	blt	1c774 <__assert_fail@plt+0xa13c>
   1c6e0:	mov	r0, #3
   1c6e4:	mov	r1, r7
   1c6e8:	add	r2, sp, #112	; 0x70
   1c6ec:	bl	12164 <__fxstat64@plt>
   1c6f0:	cmp	r0, #0
   1c6f4:	bne	1c7f8 <__assert_fail@plt+0xa1c0>
   1c6f8:	ldr	r3, [r8, #52]	; 0x34
   1c6fc:	add	r1, sp, #8
   1c700:	ldr	r0, [sp, #4]
   1c704:	movw	r8, #25384	; 0x6328
   1c708:	blx	r3
   1c70c:	movt	r8, #4
   1c710:	cmp	r0, #0
   1c714:	bne	1c7f8 <__assert_fail@plt+0xa1c0>
   1c718:	ldr	r3, [r8, #48]	; 0x30
   1c71c:	cmp	r3, #0
   1c720:	bne	1c7e0 <__assert_fail@plt+0xa1a8>
   1c724:	ldrb	r3, [r8, #56]	; 0x38
   1c728:	cmp	r3, #0
   1c72c:	bne	1c7e0 <__assert_fail@plt+0xa1a8>
   1c730:	ldr	r3, [sp, #24]
   1c734:	and	r3, r3, #61440	; 0xf000
   1c738:	cmp	r3, #40960	; 0xa000
   1c73c:	beq	1c768 <__assert_fail@plt+0xa130>
   1c740:	ldrd	r0, [sp, #8]
   1c744:	ldrd	r2, [sp, #112]	; 0x70
   1c748:	cmp	r1, r3
   1c74c:	cmpeq	r0, r2
   1c750:	bne	1c768 <__assert_fail@plt+0xa130>
   1c754:	ldrd	r0, [sp, #104]	; 0x68
   1c758:	ldrd	r2, [sp, #208]	; 0xd0
   1c75c:	cmp	r1, r3
   1c760:	cmpeq	r0, r2
   1c764:	beq	1c774 <__assert_fail@plt+0xa13c>
   1c768:	mov	r0, r7
   1c76c:	mvn	r7, #0
   1c770:	bl	125d8 <close@plt>
   1c774:	mov	r0, r6
   1c778:	ldr	r1, [sp, #4]
   1c77c:	bl	18678 <__assert_fail@plt+0x6040>
   1c780:	ldrd	r2, [sp, #104]	; 0x68
   1c784:	ldrd	r8, [sp, #8]
   1c788:	mov	ip, #0
   1c78c:	mov	r1, #1
   1c790:	movw	r6, #55050	; 0xd70a
   1c794:	movt	r6, #15395	; 0x3c23
   1c798:	str	r7, [r0, #56]	; 0x38
   1c79c:	strd	r2, [r0, #40]	; 0x28
   1c7a0:	str	r6, [r0, #28]
   1c7a4:	strd	r8, [r0, #48]	; 0x30
   1c7a8:	strb	ip, [r0, #19]
   1c7ac:	strb	r1, [r0, #18]
   1c7b0:	b	1c694 <__assert_fail@plt+0xa05c>
   1c7b4:	ldrb	r1, [r8, #56]	; 0x38
   1c7b8:	cmp	r1, #0
   1c7bc:	bne	1c7d8 <__assert_fail@plt+0xa1a0>
   1c7c0:	ldr	r3, [sp, #24]
   1c7c4:	and	r3, r3, #61440	; 0xf000
   1c7c8:	cmp	r3, #40960	; 0xa000
   1c7cc:	bne	1c6d0 <__assert_fail@plt+0xa098>
   1c7d0:	mvn	r7, #1
   1c7d4:	b	1c774 <__assert_fail@plt+0xa13c>
   1c7d8:	mov	r1, #32768	; 0x8000
   1c7dc:	b	1c6d0 <__assert_fail@plt+0xa098>
   1c7e0:	add	r0, sp, #8
   1c7e4:	add	r1, sp, #112	; 0x70
   1c7e8:	mov	r2, #104	; 0x68
   1c7ec:	bl	1205c <memcpy@plt>
   1c7f0:	b	1c774 <__assert_fail@plt+0xa13c>
   1c7f4:	bl	120e0 <__stack_chk_fail@plt>
   1c7f8:	bl	1238c <__errno_location@plt>
   1c7fc:	ldr	r1, [sp, #4]
   1c800:	ldr	r0, [r0]
   1c804:	bl	197b8 <__assert_fail@plt+0x7180>
   1c808:	push	{r3, r4, r5, lr}
   1c80c:	mov	r3, #0
   1c810:	mov	r5, r0
   1c814:	str	r3, [r1]
   1c818:	mov	r0, r3
   1c81c:	mov	r4, r1
   1c820:	bl	289c0 <__assert_fail@plt+0x16388>
   1c824:	movw	r1, #296	; 0x128
   1c828:	movt	r1, #3
   1c82c:	str	r0, [r4, #16]
   1c830:	mov	r0, r5
   1c834:	bl	11fb4 <strcmp@plt>
   1c838:	cmp	r0, #0
   1c83c:	beq	1c8d0 <__assert_fail@plt+0xa298>
   1c840:	movw	r1, #324	; 0x144
   1c844:	mov	r0, r5
   1c848:	movt	r1, #3
   1c84c:	bl	11fb4 <strcmp@plt>
   1c850:	cmp	r0, #0
   1c854:	beq	1c8a4 <__assert_fail@plt+0xa26c>
   1c858:	movw	r3, #25340	; 0x62fc
   1c85c:	movt	r3, #4
   1c860:	mov	r1, r5
   1c864:	ldr	r0, [r3, #36]	; 0x24
   1c868:	bl	1998c <__assert_fail@plt+0x7354>
   1c86c:	cmp	r0, #0
   1c870:	mov	r3, r0
   1c874:	stmib	r4, {r3, r5}
   1c878:	beq	1c8fc <__assert_fail@plt+0xa2c4>
   1c87c:	mov	r0, r3
   1c880:	bl	12410 <fileno@plt>
   1c884:	cmn	r0, #1
   1c888:	moveq	r0, #0
   1c88c:	beq	1c89c <__assert_fail@plt+0xa264>
   1c890:	bl	12584 <isatty@plt>
   1c894:	adds	r0, r0, #0
   1c898:	movne	r0, #1
   1c89c:	strb	r0, [r4, #12]
   1c8a0:	pop	{r3, r4, r5, pc}
   1c8a4:	movw	r3, #21920	; 0x55a0
   1c8a8:	movt	r3, #4
   1c8ac:	movw	r1, #60056	; 0xea98
   1c8b0:	mov	r2, #5
   1c8b4:	ldr	r3, [r3]
   1c8b8:	movt	r1, #2
   1c8bc:	str	r3, [r4, #4]
   1c8c0:	bl	120d4 <dcgettext@plt>
   1c8c4:	ldr	r3, [r4, #4]
   1c8c8:	str	r0, [r4, #8]
   1c8cc:	b	1c87c <__assert_fail@plt+0xa244>
   1c8d0:	movw	r3, #21912	; 0x5598
   1c8d4:	movt	r3, #4
   1c8d8:	movw	r1, #308	; 0x134
   1c8dc:	mov	r2, #5
   1c8e0:	ldr	r3, [r3]
   1c8e4:	movt	r1, #3
   1c8e8:	str	r3, [r4, #4]
   1c8ec:	bl	120d4 <dcgettext@plt>
   1c8f0:	ldr	r3, [r4, #4]
   1c8f4:	str	r0, [r4, #8]
   1c8f8:	b	1c87c <__assert_fail@plt+0xa244>
   1c8fc:	bl	1238c <__errno_location@plt>
   1c900:	mov	r1, r5
   1c904:	ldr	r0, [r0]
   1c908:	bl	197f0 <__assert_fail@plt+0x71b8>
   1c90c:	push	{r4, r5, r6, r7, r8, lr}
   1c910:	movw	r4, #21904	; 0x5590
   1c914:	movt	r4, #4
   1c918:	sub	sp, sp, #24
   1c91c:	cmp	r1, #0
   1c920:	mov	r8, r0
   1c924:	ldr	r3, [r4]
   1c928:	mov	r5, r2
   1c92c:	ldr	r6, [r2]
   1c930:	moveq	r0, r1
   1c934:	str	r3, [sp, #20]
   1c938:	beq	1c97c <__assert_fail@plt+0xa344>
   1c93c:	ldr	r7, [r1, r6, lsl #2]
   1c940:	cmp	r7, #0
   1c944:	moveq	r0, r7
   1c948:	beq	1c97c <__assert_fail@plt+0xa344>
   1c94c:	add	r3, r6, #1
   1c950:	mov	r1, sp
   1c954:	str	r3, [r2]
   1c958:	movw	r0, #324	; 0x144
   1c95c:	movt	r0, #3
   1c960:	bl	1c808 <__assert_fail@plt+0xa1d0>
   1c964:	mov	r0, sp
   1c968:	mov	r1, r8
   1c96c:	mov	r2, r7
   1c970:	bl	1b1e0 <__assert_fail@plt+0x8ba8>
   1c974:	cmp	r0, #0
   1c978:	streq	r6, [r5]
   1c97c:	ldr	r2, [sp, #20]
   1c980:	ldr	r3, [r4]
   1c984:	cmp	r2, r3
   1c988:	bne	1c994 <__assert_fail@plt+0xa35c>
   1c98c:	add	sp, sp, #24
   1c990:	pop	{r4, r5, r6, r7, r8, pc}
   1c994:	bl	120e0 <__stack_chk_fail@plt>
   1c998:	push	{r4, lr}
   1c99c:	bl	186d0 <__assert_fail@plt+0x6098>
   1c9a0:	mov	r4, #1
   1c9a4:	mov	r2, #0
   1c9a8:	mov	r3, r0
   1c9ac:	strb	r4, [r0, #17]
   1c9b0:	strb	r4, [r0, #16]
   1c9b4:	add	r1, r0, #40	; 0x28
   1c9b8:	strb	r2, [r3, #19]
   1c9bc:	movw	r0, #324	; 0x144
   1c9c0:	strb	r2, [r3, #18]
   1c9c4:	movt	r0, #3
   1c9c8:	bl	1c808 <__assert_fail@plt+0xa1d0>
   1c9cc:	mov	r0, r4
   1c9d0:	pop	{r4, pc}
   1c9d4:	push	{r3, r4, r5, lr}
   1c9d8:	mov	r5, r1
   1c9dc:	bl	18678 <__assert_fail@plt+0x6040>
   1c9e0:	cmp	r5, #0
   1c9e4:	mov	r4, r0
   1c9e8:	movweq	r0, #324	; 0x144
   1c9ec:	movne	r0, r5
   1c9f0:	movteq	r0, #3
   1c9f4:	addne	r1, r4, #40	; 0x28
   1c9f8:	addeq	r1, r4, #40	; 0x28
   1c9fc:	bl	1c808 <__assert_fail@plt+0xa1d0>
   1ca00:	mov	r3, #1
   1ca04:	mov	r2, #1065353216	; 0x3f800000
   1ca08:	mov	r0, r3
   1ca0c:	strb	r3, [r4, #17]
   1ca10:	strb	r3, [r4, #16]
   1ca14:	mov	r3, #0
   1ca18:	str	r2, [r4, #28]
   1ca1c:	strb	r3, [r4, #19]
   1ca20:	strb	r3, [r4, #18]
   1ca24:	pop	{r3, r4, r5, pc}
   1ca28:	mov	r1, #0
   1ca2c:	b	1c9d4 <__assert_fail@plt+0xa39c>
   1ca30:	cmp	r1, #0
   1ca34:	push	{r4, lr}
   1ca38:	mov	r4, r2
   1ca3c:	beq	1ca70 <__assert_fail@plt+0xa438>
   1ca40:	ldr	r3, [r2]
   1ca44:	ldr	r1, [r1, r3, lsl #2]
   1ca48:	cmp	r1, #0
   1ca4c:	beq	1ca70 <__assert_fail@plt+0xa438>
   1ca50:	add	r3, r3, #1
   1ca54:	str	r3, [r2]
   1ca58:	bl	1c9d4 <__assert_fail@plt+0xa39c>
   1ca5c:	cmp	r0, #0
   1ca60:	ldreq	r3, [r4]
   1ca64:	subeq	r3, r3, #1
   1ca68:	streq	r3, [r4]
   1ca6c:	pop	{r4, pc}
   1ca70:	mov	r0, r1
   1ca74:	pop	{r4, pc}
   1ca78:	cmp	r1, #0
   1ca7c:	push	{r3, r4, r5, lr}
   1ca80:	beq	1cac8 <__assert_fail@plt+0xa490>
   1ca84:	ldr	r3, [r2]
   1ca88:	ldr	r5, [r1, r3, lsl #2]
   1ca8c:	cmp	r5, #0
   1ca90:	beq	1cad0 <__assert_fail@plt+0xa498>
   1ca94:	add	r3, r3, #1
   1ca98:	str	r3, [r2]
   1ca9c:	bl	186d0 <__assert_fail@plt+0x6098>
   1caa0:	mov	r4, r0
   1caa4:	mov	r0, r5
   1caa8:	add	r1, r4, #40	; 0x28
   1caac:	bl	1c808 <__assert_fail@plt+0xa1d0>
   1cab0:	mov	r0, #1
   1cab4:	mov	r3, #1065353216	; 0x3f800000
   1cab8:	strb	r0, [r4, #17]
   1cabc:	strb	r0, [r4, #16]
   1cac0:	str	r3, [r4, #28]
   1cac4:	pop	{r3, r4, r5, pc}
   1cac8:	mov	r0, r1
   1cacc:	pop	{r3, r4, r5, pc}
   1cad0:	mov	r0, r5
   1cad4:	pop	{r3, r4, r5, pc}
   1cad8:	push	{r4, r5, r6, r7, r8, lr}
   1cadc:	movw	r5, #21904	; 0x5590
   1cae0:	movt	r5, #4
   1cae4:	mov	r6, r2
   1cae8:	sub	sp, sp, #24
   1caec:	cmp	r1, #0
   1caf0:	ldr	r2, [r5]
   1caf4:	mov	r8, r0
   1caf8:	ldr	r4, [r6]
   1cafc:	str	r2, [sp, #20]
   1cb00:	beq	1cb58 <__assert_fail@plt+0xa520>
   1cb04:	ldr	r0, [r1, r4, lsl #2]
   1cb08:	lsl	r2, r4, #2
   1cb0c:	cmp	r0, #0
   1cb10:	beq	1cb58 <__assert_fail@plt+0xa520>
   1cb14:	add	r3, r1, r2
   1cb18:	add	r2, r4, #1
   1cb1c:	str	r2, [r6]
   1cb20:	ldr	r7, [r3, #4]
   1cb24:	cmp	r7, #0
   1cb28:	beq	1cb58 <__assert_fail@plt+0xa520>
   1cb2c:	add	r4, r4, #2
   1cb30:	mov	r1, sp
   1cb34:	str	r4, [r6]
   1cb38:	bl	1c808 <__assert_fail@plt+0xa1d0>
   1cb3c:	mov	r0, sp
   1cb40:	mov	r1, r8
   1cb44:	mov	r2, r7
   1cb48:	ldr	r4, [r6]
   1cb4c:	bl	1b1e0 <__assert_fail@plt+0x8ba8>
   1cb50:	cmp	r0, #0
   1cb54:	bne	1cb60 <__assert_fail@plt+0xa528>
   1cb58:	mov	r0, #0
   1cb5c:	str	r4, [r6]
   1cb60:	ldr	r2, [sp, #20]
   1cb64:	ldr	r3, [r5]
   1cb68:	cmp	r2, r3
   1cb6c:	bne	1cb78 <__assert_fail@plt+0xa540>
   1cb70:	add	sp, sp, #24
   1cb74:	pop	{r4, r5, r6, r7, r8, pc}
   1cb78:	bl	120e0 <__stack_chk_fail@plt>
   1cb7c:	cmp	r1, #0
   1cb80:	push	{r3, r4, r5, lr}
   1cb84:	beq	1cbe0 <__assert_fail@plt+0xa5a8>
   1cb88:	ldr	r3, [r2]
   1cb8c:	ldr	r5, [r1, r3, lsl #2]
   1cb90:	cmp	r5, #0
   1cb94:	beq	1cbe8 <__assert_fail@plt+0xa5b0>
   1cb98:	add	r3, r3, #1
   1cb9c:	mov	r1, r5
   1cba0:	str	r3, [r2]
   1cba4:	bl	18678 <__assert_fail@plt+0x6040>
   1cba8:	mov	r4, r0
   1cbac:	mov	r0, r5
   1cbb0:	add	r1, r4, #40	; 0x28
   1cbb4:	bl	1c808 <__assert_fail@plt+0xa1d0>
   1cbb8:	mov	r3, #1
   1cbbc:	mov	r2, #0
   1cbc0:	mov	r1, #1065353216	; 0x3f800000
   1cbc4:	strb	r3, [r4, #17]
   1cbc8:	mov	r0, r3
   1cbcc:	strb	r3, [r4, #16]
   1cbd0:	strb	r2, [r4, #19]
   1cbd4:	strb	r2, [r4, #18]
   1cbd8:	str	r1, [r4, #28]
   1cbdc:	pop	{r3, r4, r5, pc}
   1cbe0:	mov	r0, r1
   1cbe4:	pop	{r3, r4, r5, pc}
   1cbe8:	mov	r0, r5
   1cbec:	pop	{r3, r4, r5, pc}
   1cbf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbf4:	movw	r4, #21904	; 0x5590
   1cbf8:	movt	r4, #4
   1cbfc:	sub	sp, sp, #28
   1cc00:	cmp	r1, #0
   1cc04:	mov	r8, r0
   1cc08:	ldr	r3, [r4]
   1cc0c:	moveq	r5, r1
   1cc10:	str	r3, [sp, #20]
   1cc14:	beq	1ccf0 <__assert_fail@plt+0xa6b8>
   1cc18:	ldr	r3, [r2]
   1cc1c:	ldr	r5, [r1, r3, lsl #2]
   1cc20:	cmp	r5, #0
   1cc24:	beq	1ccf0 <__assert_fail@plt+0xa6b8>
   1cc28:	add	r3, r3, #1
   1cc2c:	str	r3, [r2]
   1cc30:	ldrb	r3, [r5]
   1cc34:	cmp	r3, #45	; 0x2d
   1cc38:	beq	1cd20 <__assert_fail@plt+0xa6e8>
   1cc3c:	cmp	r3, #47	; 0x2f
   1cc40:	beq	1cd0c <__assert_fail@plt+0xa6d4>
   1cc44:	cmp	r3, #43	; 0x2b
   1cc48:	beq	1cd7c <__assert_fail@plt+0xa744>
   1cc4c:	movw	fp, #55050	; 0xd70a
   1cc50:	movt	fp, #15395	; 0x3c23
   1cc54:	mov	r0, #0
   1cc58:	mov	r9, #2
   1cc5c:	add	r0, r5, r0
   1cc60:	bl	253e8 <__assert_fail@plt+0x12db0>
   1cc64:	subs	r7, r0, #0
   1cc68:	beq	1ce20 <__assert_fail@plt+0xa7e8>
   1cc6c:	mov	r6, #0
   1cc70:	mov	r3, r7
   1cc74:	mov	r1, r6
   1cc78:	mov	r2, r6
   1cc7c:	str	r6, [sp]
   1cc80:	mov	r0, r6
   1cc84:	bl	257f8 <__assert_fail@plt+0x131c0>
   1cc88:	mov	r2, r6
   1cc8c:	mov	r3, r7
   1cc90:	str	r6, [sp]
   1cc94:	mov	r1, #1
   1cc98:	mov	sl, r0
   1cc9c:	mov	r0, r6
   1cca0:	str	sl, [sp, #12]
   1cca4:	bl	257f8 <__assert_fail@plt+0x131c0>
   1cca8:	mov	r6, r0
   1ccac:	mov	r0, r7
   1ccb0:	str	r6, [sp, #16]
   1ccb4:	bl	12020 <free@plt>
   1ccb8:	ldrb	r3, [r5]
   1ccbc:	cmp	r3, #47	; 0x2f
   1ccc0:	beq	1cd34 <__assert_fail@plt+0xa6fc>
   1ccc4:	mov	r1, r5
   1ccc8:	mov	r0, r8
   1cccc:	bl	18678 <__assert_fail@plt+0x6040>
   1ccd0:	add	r2, sp, #12
   1ccd4:	mov	r5, #1
   1ccd8:	mov	r3, r0
   1ccdc:	str	fp, [r0, #28]
   1cce0:	str	r9, [r0, #40]	; 0x28
   1cce4:	ldm	r2!, {r0, r1}
   1cce8:	str	r0, [r3, #44]	; 0x2c
   1ccec:	str	r1, [r3, #48]	; 0x30
   1ccf0:	ldr	r2, [sp, #20]
   1ccf4:	mov	r0, r5
   1ccf8:	ldr	r3, [r4]
   1ccfc:	cmp	r2, r3
   1cd00:	bne	1ce64 <__assert_fail@plt+0xa82c>
   1cd04:	add	sp, sp, #28
   1cd08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd0c:	mov	r0, #1
   1cd10:	movw	fp, #39322	; 0x999a
   1cd14:	mov	r9, r0
   1cd18:	movt	fp, #16025	; 0x3e99
   1cd1c:	b	1cc5c <__assert_fail@plt+0xa624>
   1cd20:	movw	fp, #52429	; 0xcccd
   1cd24:	mov	r0, #1
   1cd28:	mov	r9, #0
   1cd2c:	movt	fp, #15948	; 0x3e4c
   1cd30:	b	1cc5c <__assert_fail@plt+0xa624>
   1cd34:	cmp	sl, #0
   1cd38:	bne	1ccc4 <__assert_fail@plt+0xa68c>
   1cd3c:	cmp	r6, #0
   1cd40:	bne	1ccc4 <__assert_fail@plt+0xa68c>
   1cd44:	mov	r2, #5
   1cd48:	movw	r1, #600	; 0x258
   1cd4c:	mov	r0, r6
   1cd50:	movt	r1, #3
   1cd54:	bl	120d4 <dcgettext@plt>
   1cd58:	mov	r1, r6
   1cd5c:	mov	r3, r5
   1cd60:	movw	fp, #42048	; 0xa440
   1cd64:	mov	r9, r6
   1cd68:	movt	fp, #16255	; 0x3f7f
   1cd6c:	mov	r2, r0
   1cd70:	mov	r0, r6
   1cd74:	bl	12224 <error@plt>
   1cd78:	b	1ccc4 <__assert_fail@plt+0xa68c>
   1cd7c:	ldrb	r3, [r5, #1]
   1cd80:	sub	r3, r3, #48	; 0x30
   1cd84:	cmp	r3, #7
   1cd88:	bls	1ce08 <__assert_fail@plt+0xa7d0>
   1cd8c:	mov	r0, r5
   1cd90:	bl	253e8 <__assert_fail@plt+0x12db0>
   1cd94:	subs	r7, r0, #0
   1cd98:	movwne	fp, #52429	; 0xcccd
   1cd9c:	movne	r9, #2
   1cda0:	movtne	fp, #15820	; 0x3dcc
   1cda4:	bne	1cc6c <__assert_fail@plt+0xa634>
   1cda8:	movw	r6, #25384	; 0x6328
   1cdac:	movt	r6, #4
   1cdb0:	ldrb	r3, [r6, #18]
   1cdb4:	cmp	r3, #0
   1cdb8:	beq	1cd0c <__assert_fail@plt+0xa6d4>
   1cdbc:	mov	r2, #5
   1cdc0:	movw	r1, #532	; 0x214
   1cdc4:	movt	r1, #3
   1cdc8:	movw	fp, #39322	; 0x999a
   1cdcc:	bl	120d4 <dcgettext@plt>
   1cdd0:	ldr	r1, [r6, #72]	; 0x48
   1cdd4:	mov	r2, r5
   1cdd8:	movt	fp, #16025	; 0x3e99
   1cddc:	mov	r9, r0
   1cde0:	mov	r0, r7
   1cde4:	bl	28cec <__assert_fail@plt+0x166b4>
   1cde8:	mov	r2, r9
   1cdec:	mov	r1, r7
   1cdf0:	mov	r3, r0
   1cdf4:	mov	r0, #1
   1cdf8:	bl	12224 <error@plt>
   1cdfc:	mov	r0, #1
   1ce00:	mov	r9, r0
   1ce04:	b	1cc5c <__assert_fail@plt+0xa624>
   1ce08:	mov	r0, #0
   1ce0c:	movw	r2, #336	; 0x150
   1ce10:	mov	r1, r0
   1ce14:	movt	r2, #3
   1ce18:	bl	12224 <error@plt>
   1ce1c:	b	1cd8c <__assert_fail@plt+0xa754>
   1ce20:	mov	r2, #5
   1ce24:	movw	r1, #584	; 0x248
   1ce28:	movt	r1, #3
   1ce2c:	bl	120d4 <dcgettext@plt>
   1ce30:	movw	r3, #25384	; 0x6328
   1ce34:	movt	r3, #4
   1ce38:	mov	r2, r5
   1ce3c:	ldr	r1, [r3, #72]	; 0x48
   1ce40:	mov	r6, r0
   1ce44:	mov	r0, r7
   1ce48:	bl	28cec <__assert_fail@plt+0x166b4>
   1ce4c:	mov	r2, r6
   1ce50:	mov	r1, r7
   1ce54:	mov	r3, r0
   1ce58:	mov	r0, #1
   1ce5c:	bl	12224 <error@plt>
   1ce60:	b	1cc6c <__assert_fail@plt+0xa634>
   1ce64:	bl	120e0 <__stack_chk_fail@plt>
   1ce68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce6c:	movw	ip, #21904	; 0x5590
   1ce70:	sub	sp, sp, #92	; 0x5c
   1ce74:	movt	ip, #4
   1ce78:	cmp	r2, #0
   1ce7c:	mov	r5, r0
   1ce80:	str	r2, [sp, #32]
   1ce84:	ldr	r2, [ip]
   1ce88:	str	ip, [sp, #28]
   1ce8c:	str	r3, [sp, #36]	; 0x24
   1ce90:	ldr	r8, [r1, #12]
   1ce94:	str	r2, [sp, #84]	; 0x54
   1ce98:	beq	1d53c <__assert_fail@plt+0xaf04>
   1ce9c:	ldr	r3, [r3]
   1cea0:	ldr	ip, [sp, #32]
   1cea4:	ldr	r0, [ip, r3, lsl #2]
   1cea8:	cmp	r0, #0
   1ceac:	beq	1d2a8 <__assert_fail@plt+0xac70>
   1ceb0:	mov	r0, r1
   1ceb4:	movw	r2, #828	; 0x33c
   1ceb8:	mov	r1, r8
   1cebc:	movt	r2, #3
   1cec0:	movw	ip, #20196	; 0x4ee4
   1cec4:	movt	ip, #1
   1cec8:	str	ip, [sp, #20]
   1cecc:	bl	18644 <__assert_fail@plt+0x600c>
   1ced0:	ldr	ip, [sp, #20]
   1ced4:	mov	r9, #0
   1ced8:	mov	r3, #1
   1cedc:	cmp	r8, ip
   1cee0:	mov	sl, r0
   1cee4:	add	ip, r0, #40	; 0x28
   1cee8:	strb	r3, [r0, #17]
   1ceec:	strb	r3, [r0, #16]
   1cef0:	str	ip, [sp, #52]	; 0x34
   1cef4:	strb	r9, [r0, #18]
   1cef8:	strb	r9, [r0, #19]
   1cefc:	str	r9, [r0, #144]	; 0x90
   1cf00:	beq	1d3d4 <__assert_fail@plt+0xad9c>
   1cf04:	movw	r2, #20136	; 0x4ea8
   1cf08:	movt	r2, #1
   1cf0c:	cmp	r8, r2
   1cf10:	movw	r2, #18676	; 0x48f4
   1cf14:	movt	r2, #1
   1cf18:	beq	1d504 <__assert_fail@plt+0xaecc>
   1cf1c:	cmp	r8, r2
   1cf20:	strb	r9, [r0, #140]	; 0x8c
   1cf24:	mov	r9, r3
   1cf28:	beq	1d3d8 <__assert_fail@plt+0xada0>
   1cf2c:	movw	r3, #22048	; 0x5620
   1cf30:	movt	r3, #4
   1cf34:	ldr	r3, [r3]
   1cf38:	cmp	r3, #0
   1cf3c:	strne	r3, [sl, #144]	; 0x90
   1cf40:	beq	1d554 <__assert_fail@plt+0xaf1c>
   1cf44:	ldr	ip, [sp, #36]	; 0x24
   1cf48:	mov	r7, #0
   1cf4c:	ldr	r1, [sp, #32]
   1cf50:	strb	r7, [sl, #40]	; 0x28
   1cf54:	ldr	ip, [ip]
   1cf58:	ldr	r4, [r1, ip, lsl #2]
   1cf5c:	str	ip, [sp, #24]
   1cf60:	lsl	ip, ip, #2
   1cf64:	cmp	r4, r7
   1cf68:	str	ip, [sp, #44]	; 0x2c
   1cf6c:	add	ip, r1, ip
   1cf70:	str	ip, [sp, #40]	; 0x28
   1cf74:	beq	1d520 <__assert_fail@plt+0xaee8>
   1cf78:	ldr	r5, [sp, #24]
   1cf7c:	movw	r3, #18676	; 0x48f4
   1cf80:	movt	r3, #1
   1cf84:	str	sl, [sp, #48]	; 0x30
   1cf88:	mov	r6, r7
   1cf8c:	mov	r0, r7
   1cf90:	mov	sl, r5
   1cf94:	mov	r1, ip
   1cf98:	mov	r5, ip
   1cf9c:	mov	fp, r3
   1cfa0:	b	1d014 <__assert_fail@plt+0xa9dc>
   1cfa4:	cmp	r9, #0
   1cfa8:	beq	1cfb4 <__assert_fail@plt+0xa97c>
   1cfac:	cmp	r2, #43	; 0x2b
   1cfb0:	beq	1d040 <__assert_fail@plt+0xaa08>
   1cfb4:	mov	r0, r4
   1cfb8:	movw	r1, #1304	; 0x518
   1cfbc:	movt	r1, #3
   1cfc0:	bl	247d0 <__assert_fail@plt+0x12198>
   1cfc4:	cmp	r0, #0
   1cfc8:	moveq	r4, r7
   1cfcc:	beq	1cff4 <__assert_fail@plt+0xa9bc>
   1cfd0:	cmp	sl, #0
   1cfd4:	add	r6, r6, #1
   1cfd8:	bne	1cff0 <__assert_fail@plt+0xa9b8>
   1cfdc:	cmp	r8, fp
   1cfe0:	beq	1d070 <__assert_fail@plt+0xaa38>
   1cfe4:	ldr	ip, [sp, #20]
   1cfe8:	cmp	r8, ip
   1cfec:	beq	1d070 <__assert_fail@plt+0xaa38>
   1cff0:	mov	r0, #1
   1cff4:	ldr	r2, [r5, #4]
   1cff8:	add	sl, sl, #1
   1cffc:	add	r1, r5, #4
   1d000:	cmp	r2, #0
   1d004:	beq	1d2c4 <__assert_fail@plt+0xac8c>
   1d008:	mov	r7, r4
   1d00c:	mov	r5, r1
   1d010:	mov	r4, r2
   1d014:	ldrb	r2, [r4]
   1d018:	cmp	r2, #59	; 0x3b
   1d01c:	bne	1cfa4 <__assert_fail@plt+0xa96c>
   1d020:	ldrb	r2, [r4, #1]
   1d024:	cmp	r2, #0
   1d028:	bne	1cfb4 <__assert_fail@plt+0xa97c>
   1d02c:	mov	r5, sl
   1d030:	mov	ip, r1
   1d034:	ldr	sl, [sp, #48]	; 0x30
   1d038:	mov	r4, r7
   1d03c:	b	1d2d0 <__assert_fail@plt+0xac98>
   1d040:	ldrb	r2, [r4, #1]
   1d044:	cmp	r2, #0
   1d048:	bne	1cfb4 <__assert_fail@plt+0xa97c>
   1d04c:	cmp	r0, #0
   1d050:	beq	1cfb4 <__assert_fail@plt+0xa97c>
   1d054:	mov	r5, sl
   1d058:	ldr	sl, [sp, #48]	; 0x30
   1d05c:	mov	r3, #1
   1d060:	mov	ip, r1
   1d064:	mov	r4, r7
   1d068:	strb	r3, [sl, #40]	; 0x28
   1d06c:	b	1d2d0 <__assert_fail@plt+0xac98>
   1d070:	mov	r2, #5
   1d074:	movw	r1, #1308	; 0x51c
   1d078:	mov	r0, #0
   1d07c:	movt	r1, #3
   1d080:	bl	120d4 <dcgettext@plt>
   1d084:	mov	r1, #0
   1d088:	mov	r2, r0
   1d08c:	mov	r0, #1
   1d090:	bl	12224 <error@plt>
   1d094:	mov	r0, #1
   1d098:	b	1cff4 <__assert_fail@plt+0xa9bc>
   1d09c:	mov	r0, r4
   1d0a0:	str	ip, [sp, #16]
   1d0a4:	bl	1232c <strlen@plt>
   1d0a8:	ldr	ip, [sp, #16]
   1d0ac:	cmp	r0, #2
   1d0b0:	beq	1d164 <__assert_fail@plt+0xab2c>
   1d0b4:	mov	r1, #19
   1d0b8:	str	r8, [sp, #4]
   1d0bc:	movw	r2, #1480	; 0x5c8
   1d0c0:	add	r0, sp, #64	; 0x40
   1d0c4:	movt	r2, #3
   1d0c8:	mov	r3, r1
   1d0cc:	str	r2, [sp]
   1d0d0:	mov	r2, #1
   1d0d4:	bl	12620 <__snprintf_chk@plt>
   1d0d8:	ldr	ip, [sp, #16]
   1d0dc:	cmp	r0, #19
   1d0e0:	bhi	1d570 <__assert_fail@plt+0xaf38>
   1d0e4:	mov	r2, #5
   1d0e8:	movw	r1, #1524	; 0x5f4
   1d0ec:	mov	r0, #0
   1d0f0:	movt	r1, #3
   1d0f4:	str	ip, [sp, #16]
   1d0f8:	bl	120d4 <dcgettext@plt>
   1d0fc:	movw	r6, #25384	; 0x6328
   1d100:	movt	r6, #4
   1d104:	add	r2, sp, #64	; 0x40
   1d108:	ldr	r1, [r6, #72]	; 0x48
   1d10c:	mov	r9, r0
   1d110:	mov	r0, #0
   1d114:	bl	28cec <__assert_fail@plt+0x166b4>
   1d118:	ldr	r1, [r6, #72]	; 0x48
   1d11c:	movw	r2, #1304	; 0x518
   1d120:	movt	r2, #3
   1d124:	mov	r8, r0
   1d128:	mov	r0, #1
   1d12c:	bl	28cec <__assert_fail@plt+0x166b4>
   1d130:	ldr	r1, [r6, #72]	; 0x48
   1d134:	mov	r2, r4
   1d138:	mov	r7, r0
   1d13c:	mov	r0, #2
   1d140:	bl	28cec <__assert_fail@plt+0x166b4>
   1d144:	str	r7, [sp]
   1d148:	mov	r2, r9
   1d14c:	mov	r3, r8
   1d150:	mov	r1, #0
   1d154:	str	r0, [sp, #4]
   1d158:	mov	r0, #1
   1d15c:	bl	12224 <error@plt>
   1d160:	ldr	ip, [sp, #16]
   1d164:	add	r6, sl, #44	; 0x2c
   1d168:	mov	r1, #2048	; 0x800
   1d16c:	str	ip, [sp, #16]
   1d170:	mov	r0, r6
   1d174:	bl	204e0 <__assert_fail@plt+0xdea8>
   1d178:	ldr	ip, [sp, #16]
   1d17c:	sub	r0, r0, #1
   1d180:	cmp	r0, #1
   1d184:	bhi	1d1b0 <__assert_fail@plt+0xab78>
   1d188:	mov	r2, #5
   1d18c:	movw	r1, #1584	; 0x630
   1d190:	mov	r0, #0
   1d194:	movt	r1, #3
   1d198:	bl	120d4 <dcgettext@plt>
   1d19c:	mov	r1, #0
   1d1a0:	mov	r2, r0
   1d1a4:	mov	r0, #1
   1d1a8:	bl	12224 <error@plt>
   1d1ac:	ldr	ip, [sp, #16]
   1d1b0:	mov	r0, r6
   1d1b4:	str	ip, [sp, #16]
   1d1b8:	bl	205ac <__assert_fail@plt+0xdf74>
   1d1bc:	ldrb	r4, [sl, #40]	; 0x28
   1d1c0:	movw	r3, #24044	; 0x5dec
   1d1c4:	ldr	ip, [sp, #16]
   1d1c8:	cmp	r4, #0
   1d1cc:	movt	r3, #1
   1d1d0:	str	r3, [sl, #76]	; 0x4c
   1d1d4:	beq	1d354 <__assert_fail@plt+0xad1c>
   1d1d8:	ldr	r1, [sp, #24]
   1d1dc:	add	r7, sl, #88	; 0x58
   1d1e0:	mov	r4, #0
   1d1e4:	ldr	r2, [sp, #52]	; 0x34
   1d1e8:	rsb	r3, r1, r5
   1d1ec:	str	r4, [sl, #132]	; 0x84
   1d1f0:	sub	r3, r3, #1
   1d1f4:	str	r4, [sl, #68]	; 0x44
   1d1f8:	str	r3, [sl, #72]	; 0x48
   1d1fc:	mov	r1, r7
   1d200:	str	r4, [sl, #64]	; 0x40
   1d204:	mov	r0, r6
   1d208:	str	r4, [sl, #80]	; 0x50
   1d20c:	sub	r8, r5, #1
   1d210:	str	r4, [sl, #84]	; 0x54
   1d214:	str	ip, [sp, #16]
   1d218:	bl	205cc <__assert_fail@plt+0xdf94>
   1d21c:	ldr	r2, [sp, #24]
   1d220:	ldr	ip, [sp, #16]
   1d224:	cmp	r2, r8
   1d228:	bge	1d28c <__assert_fail@plt+0xac54>
   1d22c:	ldr	r3, [sp, #44]	; 0x2c
   1d230:	mov	r9, #1
   1d234:	ldr	r1, [sp, #32]
   1d238:	sub	sl, r3, #4
   1d23c:	str	r5, [sp, #20]
   1d240:	add	sl, r1, sl
   1d244:	ldr	fp, [sp, #24]
   1d248:	str	ip, [sp, #24]
   1d24c:	mov	r5, sl
   1d250:	ldr	sl, [r5, #4]!
   1d254:	add	fp, fp, #1
   1d258:	mov	r0, sl
   1d25c:	bl	1232c <strlen@plt>
   1d260:	mov	r2, sl
   1d264:	str	r4, [sp]
   1d268:	mov	r1, r7
   1d26c:	stmib	sp, {r4, r9}
   1d270:	add	r3, r0, #1
   1d274:	mov	r0, r6
   1d278:	bl	1fd7c <__assert_fail@plt+0xd744>
   1d27c:	cmp	fp, r8
   1d280:	bne	1d250 <__assert_fail@plt+0xac18>
   1d284:	ldr	r5, [sp, #20]
   1d288:	ldr	ip, [sp, #24]
   1d28c:	ldr	r3, [ip]
   1d290:	cmp	r3, #0
   1d294:	beq	1d544 <__assert_fail@plt+0xaf0c>
   1d298:	ldr	ip, [sp, #36]	; 0x24
   1d29c:	mov	r0, #1
   1d2a0:	add	r5, r5, #1
   1d2a4:	str	r5, [ip]
   1d2a8:	ldr	ip, [sp, #28]
   1d2ac:	ldr	r2, [sp, #84]	; 0x54
   1d2b0:	ldr	r3, [ip]
   1d2b4:	cmp	r2, r3
   1d2b8:	bne	1d58c <__assert_fail@plt+0xaf54>
   1d2bc:	add	sp, sp, #92	; 0x5c
   1d2c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c4:	mov	r5, sl
   1d2c8:	ldr	sl, [sp, #48]	; 0x30
   1d2cc:	mov	ip, r1
   1d2d0:	ldr	r1, [sp, #24]
   1d2d4:	cmp	r5, r1
   1d2d8:	beq	1d524 <__assert_fail@plt+0xaeec>
   1d2dc:	ldr	r3, [ip]
   1d2e0:	cmp	r3, #0
   1d2e4:	beq	1d524 <__assert_fail@plt+0xaeec>
   1d2e8:	ldrb	r3, [sl, #40]	; 0x28
   1d2ec:	cmp	r3, #0
   1d2f0:	beq	1d164 <__assert_fail@plt+0xab2c>
   1d2f4:	movw	r1, #18676	; 0x48f4
   1d2f8:	movt	r1, #1
   1d2fc:	cmp	r8, r1
   1d300:	movw	r2, #54180	; 0xd3a4
   1d304:	movw	r3, #6484	; 0x1954
   1d308:	movt	r2, #2
   1d30c:	movt	r3, #3
   1d310:	movne	r8, r2
   1d314:	moveq	r8, r3
   1d318:	cmp	r6, #1
   1d31c:	ble	1d09c <__assert_fail@plt+0xaa64>
   1d320:	mov	r2, #5
   1d324:	movw	r1, #1424	; 0x590
   1d328:	mov	r0, #0
   1d32c:	movt	r1, #3
   1d330:	str	ip, [sp, #16]
   1d334:	bl	120d4 <dcgettext@plt>
   1d338:	mov	r3, r8
   1d33c:	mov	r1, #0
   1d340:	mov	r2, r0
   1d344:	mov	r0, #1
   1d348:	bl	12224 <error@plt>
   1d34c:	ldr	ip, [sp, #16]
   1d350:	b	1d164 <__assert_fail@plt+0xab2c>
   1d354:	ldr	r2, [sp, #24]
   1d358:	movw	r3, #1304	; 0x518
   1d35c:	str	r4, [sl, #80]	; 0x50
   1d360:	movt	r3, #3
   1d364:	rsb	r0, r2, r5
   1d368:	str	r3, [sl, #68]	; 0x44
   1d36c:	str	r0, [sl, #136]	; 0x88
   1d370:	mov	r2, #2
   1d374:	str	r4, [sl, #84]	; 0x54
   1d378:	lsl	r0, r0, #2
   1d37c:	str	r2, [sl, #64]	; 0x40
   1d380:	str	ip, [sp, #16]
   1d384:	bl	29604 <__assert_fail@plt+0x16fcc>
   1d388:	ldr	r2, [sp, #52]	; 0x34
   1d38c:	add	r1, sl, #88	; 0x58
   1d390:	str	r0, [sl, #132]	; 0x84
   1d394:	mov	r0, r6
   1d398:	bl	205cc <__assert_fail@plt+0xdf94>
   1d39c:	ldr	r0, [sl, #136]	; 0x88
   1d3a0:	ldr	ip, [sp, #16]
   1d3a4:	cmp	r0, #0
   1d3a8:	ble	1d28c <__assert_fail@plt+0xac54>
   1d3ac:	mov	r3, r4
   1d3b0:	ldr	r4, [sp, #40]	; 0x28
   1d3b4:	lsl	r0, r0, #2
   1d3b8:	ldr	r1, [r4, r3]
   1d3bc:	ldr	r2, [sl, #132]	; 0x84
   1d3c0:	str	r1, [r2, r3]
   1d3c4:	add	r3, r3, #4
   1d3c8:	cmp	r3, r0
   1d3cc:	bne	1d3b8 <__assert_fail@plt+0xad80>
   1d3d0:	b	1d28c <__assert_fail@plt+0xac54>
   1d3d4:	strb	r3, [r0, #140]	; 0x8c
   1d3d8:	movw	r3, #25384	; 0x6328
   1d3dc:	movt	r3, #4
   1d3e0:	movw	r0, #1268	; 0x4f4
   1d3e4:	movt	r0, #3
   1d3e8:	mov	r2, #0
   1d3ec:	strb	r2, [r3, #15]
   1d3f0:	bl	12260 <getenv@plt>
   1d3f4:	subs	r4, r0, #0
   1d3f8:	beq	1cf44 <__assert_fail@plt+0xa90c>
   1d3fc:	add	r7, sp, #60	; 0x3c
   1d400:	movw	r1, #852	; 0x354
   1d404:	str	r7, [sp]
   1d408:	add	r3, sp, #56	; 0x38
   1d40c:	movt	r1, #3
   1d410:	mov	r2, #1
   1d414:	bl	212b4 <__assert_fail@plt+0xec7c>
   1d418:	b	1d4b4 <__assert_fail@plt+0xae7c>
   1d41c:	cmp	r1, #1
   1d420:	beq	1d4ec <__assert_fail@plt+0xaeb4>
   1d424:	ldr	r2, [sp, #56]	; 0x38
   1d428:	add	r0, r4, r2
   1d42c:	ldrb	r3, [r4, r2]
   1d430:	cmp	r3, #47	; 0x2f
   1d434:	beq	1d490 <__assert_fail@plt+0xae58>
   1d438:	bl	12140 <__strndup@plt>
   1d43c:	mov	r2, #5
   1d440:	movw	r1, #1108	; 0x454
   1d444:	movt	r1, #3
   1d448:	mov	r6, r0
   1d44c:	mov	r0, #0
   1d450:	bl	120d4 <dcgettext@plt>
   1d454:	cmp	r6, #0
   1d458:	ldreq	r1, [sp, #56]	; 0x38
   1d45c:	movne	r1, r6
   1d460:	addeq	r1, r4, r1
   1d464:	mov	fp, r0
   1d468:	mov	r0, #0
   1d46c:	bl	19778 <__assert_fail@plt+0x7140>
   1d470:	str	r5, [sp]
   1d474:	mov	r2, fp
   1d478:	mov	r1, #0
   1d47c:	mov	r3, r0
   1d480:	mov	r0, #1
   1d484:	bl	12224 <error@plt>
   1d488:	mov	r0, r6
   1d48c:	bl	12020 <free@plt>
   1d490:	str	r7, [sp]
   1d494:	movw	r1, #852	; 0x354
   1d498:	mov	r0, r4
   1d49c:	movt	r1, #3
   1d4a0:	mov	r2, #0
   1d4a4:	add	r3, sp, #56	; 0x38
   1d4a8:	bl	212b4 <__assert_fail@plt+0xec7c>
   1d4ac:	cmp	r0, #0
   1d4b0:	beq	1cf44 <__assert_fail@plt+0xa90c>
   1d4b4:	ldr	r1, [sp, #60]	; 0x3c
   1d4b8:	cmp	r1, #0
   1d4bc:	bne	1d41c <__assert_fail@plt+0xade4>
   1d4c0:	mov	r2, #5
   1d4c4:	movw	r1, #856	; 0x358
   1d4c8:	mov	r0, #0
   1d4cc:	movt	r1, #3
   1d4d0:	bl	120d4 <dcgettext@plt>
   1d4d4:	mov	r1, #0
   1d4d8:	mov	r3, r5
   1d4dc:	mov	r2, r0
   1d4e0:	mov	r0, #1
   1d4e4:	bl	12224 <error@plt>
   1d4e8:	b	1d490 <__assert_fail@plt+0xae58>
   1d4ec:	ldr	r3, [sp, #56]	; 0x38
   1d4f0:	add	r0, r4, r3
   1d4f4:	ldrb	r3, [r4, r3]
   1d4f8:	cmp	r3, #46	; 0x2e
   1d4fc:	bne	1d430 <__assert_fail@plt+0xadf8>
   1d500:	b	1d4c0 <__assert_fail@plt+0xae88>
   1d504:	cmp	r8, r2
   1d508:	strb	r3, [r0, #140]	; 0x8c
   1d50c:	beq	1d3d8 <__assert_fail@plt+0xada0>
   1d510:	ldr	ip, [sp, #20]
   1d514:	cmp	r8, ip
   1d518:	bne	1cf2c <__assert_fail@plt+0xa8f4>
   1d51c:	b	1d3d8 <__assert_fail@plt+0xada0>
   1d520:	ldr	r5, [sp, #24]
   1d524:	ldr	ip, [sp, #36]	; 0x24
   1d528:	mov	r0, sl
   1d52c:	str	r5, [ip]
   1d530:	bl	12020 <free@plt>
   1d534:	mov	r0, #0
   1d538:	b	1d2a8 <__assert_fail@plt+0xac70>
   1d53c:	ldr	r0, [sp, #32]
   1d540:	b	1d2a8 <__assert_fail@plt+0xac70>
   1d544:	ldr	ip, [sp, #36]	; 0x24
   1d548:	mov	r0, #1
   1d54c:	str	r5, [ip]
   1d550:	b	1d2a8 <__assert_fail@plt+0xac70>
   1d554:	movw	r0, #1276	; 0x4fc
   1d558:	movw	r1, #116	; 0x74
   1d55c:	movt	r0, #3
   1d560:	movt	r1, #3
   1d564:	movw	r2, #3059	; 0xbf3
   1d568:	ldr	r3, [pc, #32]	; 1d590 <__assert_fail@plt+0xaf58>
   1d56c:	bl	12638 <__assert_fail@plt>
   1d570:	movw	r0, #1500	; 0x5dc
   1d574:	movw	r1, #116	; 0x74
   1d578:	movt	r0, #3
   1d57c:	movt	r1, #3
   1d580:	mov	r2, #3136	; 0xc40
   1d584:	ldr	r3, [pc, #4]	; 1d590 <__assert_fail@plt+0xaf58>
   1d588:	bl	12638 <__assert_fail@plt>
   1d58c:	bl	120e0 <__stack_chk_fail@plt>
   1d590:	andeq	pc, r2, r0, lsr r3	; <UNPREDICTABLE>
   1d594:	mov	ip, r1
   1d598:	mov	r3, r2
   1d59c:	mov	r1, r0
   1d5a0:	mov	r2, ip
   1d5a4:	movw	r0, #1628	; 0x65c
   1d5a8:	movt	r0, #3
   1d5ac:	b	1ce68 <__assert_fail@plt+0xa830>
   1d5b0:	mov	ip, r1
   1d5b4:	mov	r3, r2
   1d5b8:	mov	r1, r0
   1d5bc:	mov	r2, ip
   1d5c0:	movw	r0, #1636	; 0x664
   1d5c4:	movt	r0, #3
   1d5c8:	b	1ce68 <__assert_fail@plt+0xa830>
   1d5cc:	mov	ip, r1
   1d5d0:	mov	r3, r2
   1d5d4:	mov	r1, r0
   1d5d8:	mov	r2, ip
   1d5dc:	movw	r0, #1640	; 0x668
   1d5e0:	movt	r0, #3
   1d5e4:	b	1ce68 <__assert_fail@plt+0xa830>
   1d5e8:	mov	ip, r1
   1d5ec:	mov	r3, r2
   1d5f0:	mov	r1, r0
   1d5f4:	mov	r2, ip
   1d5f8:	movw	r0, #1652	; 0x674
   1d5fc:	movt	r0, #3
   1d600:	b	1ce68 <__assert_fail@plt+0xa830>
   1d604:	push	{r3, lr}
   1d608:	bl	16e74 <__assert_fail@plt+0x483c>
   1d60c:	mov	r1, #3
   1d610:	movw	r2, #17492	; 0x4454
   1d614:	movt	r2, #1
   1d618:	mov	r3, r0
   1d61c:	str	r1, [r0, #8]
   1d620:	str	r2, [r0]
   1d624:	mov	r1, #2
   1d628:	mov	r2, #0
   1d62c:	str	r1, [r0, #12]
   1d630:	strb	r2, [r0, #19]
   1d634:	mov	r0, #1
   1d638:	strb	r2, [r3, #18]
   1d63c:	pop	{r3, pc}
   1d640:	push	{r3, lr}
   1d644:	bl	16e74 <__assert_fail@plt+0x483c>
   1d648:	mov	r1, #3
   1d64c:	movw	r2, #17428	; 0x4414
   1d650:	movt	r2, #1
   1d654:	mov	r3, r0
   1d658:	str	r2, [r0]
   1d65c:	str	r1, [r0, #8]
   1d660:	mov	r2, #0
   1d664:	str	r1, [r0, #12]
   1d668:	mov	r0, #1
   1d66c:	strb	r2, [r3, #19]
   1d670:	strb	r2, [r3, #18]
   1d674:	pop	{r3, pc}
   1d678:	push	{r3, lr}
   1d67c:	bl	16e74 <__assert_fail@plt+0x483c>
   1d680:	mov	r1, #1
   1d684:	mov	ip, #1065353216	; 0x3f800000
   1d688:	movw	r2, #17992	; 0x4648
   1d68c:	movt	r2, #1
   1d690:	mov	r3, r0
   1d694:	mov	r0, #3
   1d698:	str	r2, [r3]
   1d69c:	mov	r2, #0
   1d6a0:	str	r0, [r3, #8]
   1d6a4:	mov	r0, r1
   1d6a8:	str	r1, [r3, #12]
   1d6ac:	strb	r2, [r3, #19]
   1d6b0:	strb	r2, [r3, #18]
   1d6b4:	str	ip, [r3, #28]
   1d6b8:	pop	{r3, pc}
   1d6bc:	push	{r3, lr}
   1d6c0:	bl	16e74 <__assert_fail@plt+0x483c>
   1d6c4:	mov	r1, #5
   1d6c8:	movw	r2, #17852	; 0x45bc
   1d6cc:	movt	r2, #1
   1d6d0:	mov	r3, r0
   1d6d4:	str	r2, [r0]
   1d6d8:	str	r1, [r0, #8]
   1d6dc:	mov	r2, #0
   1d6e0:	mov	r0, #1
   1d6e4:	str	r2, [r3, #12]
   1d6e8:	strb	r2, [r3, #19]
   1d6ec:	strb	r2, [r3, #18]
   1d6f0:	pop	{r3, pc}
   1d6f4:	cmp	r1, #0
   1d6f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d6fc:	mov	r5, r2
   1d700:	sub	sp, sp, #8
   1d704:	mov	r8, r0
   1d708:	ldr	r6, [r2]
   1d70c:	beq	1d7e8 <__assert_fail@plt+0xb1b0>
   1d710:	ldr	r4, [r1, r6, lsl #2]
   1d714:	cmp	r4, #0
   1d718:	moveq	r0, r4
   1d71c:	beq	1d778 <__assert_fail@plt+0xb140>
   1d720:	add	r3, r6, #1
   1d724:	mov	r0, r4
   1d728:	str	r3, [r2]
   1d72c:	bl	12614 <getgrnam@plt>
   1d730:	mov	r7, r0
   1d734:	bl	11f78 <endgrent@plt>
   1d738:	cmp	r7, #0
   1d73c:	beq	1d780 <__assert_fail@plt+0xb148>
   1d740:	ldr	r5, [r7, #8]
   1d744:	mov	r1, r4
   1d748:	mov	r0, r8
   1d74c:	bl	18678 <__assert_fail@plt+0x6040>
   1d750:	vldr	s14, [pc, #340]	; 1d8ac <__assert_fail@plt+0xb274>
   1d754:	vldr	s15, [pc, #340]	; 1d8b0 <__assert_fail@plt+0xb278>
   1d758:	ldrd	r2, [r0, #48]	; 0x30
   1d75c:	mov	r1, r0
   1d760:	str	r5, [r0, #40]	; 0x28
   1d764:	mov	r0, #1
   1d768:	cmp	r3, #0
   1d76c:	cmpeq	r2, #99	; 0x63
   1d770:	vmovhi.f32	s15, s14
   1d774:	vstr	s15, [r1, #28]
   1d778:	add	sp, sp, #8
   1d77c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d780:	movw	r1, #65532	; 0xfffc
   1d784:	mov	r0, r4
   1d788:	movt	r1, #2
   1d78c:	bl	1262c <strspn@plt>
   1d790:	subs	r9, r0, #0
   1d794:	bne	1d7f4 <__assert_fail@plt+0xb1bc>
   1d798:	ldrb	r7, [r4]
   1d79c:	cmp	r7, #0
   1d7a0:	beq	1d820 <__assert_fail@plt+0xb1e8>
   1d7a4:	mov	r2, #5
   1d7a8:	movw	r1, #1788	; 0x6fc
   1d7ac:	movt	r1, #3
   1d7b0:	bl	120d4 <dcgettext@plt>
   1d7b4:	movw	r3, #25384	; 0x6328
   1d7b8:	movt	r3, #4
   1d7bc:	mov	r2, r4
   1d7c0:	ldr	r1, [r3, #72]	; 0x48
   1d7c4:	mov	r7, r0
   1d7c8:	mov	r0, r9
   1d7cc:	bl	28cec <__assert_fail@plt+0x166b4>
   1d7d0:	mov	r2, r7
   1d7d4:	mov	r1, r9
   1d7d8:	mov	r3, r0
   1d7dc:	mov	r0, #1
   1d7e0:	bl	12224 <error@plt>
   1d7e4:	str	r6, [r5]
   1d7e8:	mov	r0, #0
   1d7ec:	add	sp, sp, #8
   1d7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d7f4:	ldrb	r3, [r4, r9]
   1d7f8:	add	r9, r4, r9
   1d7fc:	cmp	r3, #0
   1d800:	bne	1d844 <__assert_fail@plt+0xb20c>
   1d804:	movw	r3, #25384	; 0x6328
   1d808:	movt	r3, #4
   1d80c:	mov	r0, r4
   1d810:	ldr	r1, [r3, #72]	; 0x48
   1d814:	bl	21174 <__assert_fail@plt+0xeb3c>
   1d818:	mov	r5, r0
   1d81c:	b	1d744 <__assert_fail@plt+0xb10c>
   1d820:	mov	r2, #5
   1d824:	movw	r1, #1828	; 0x724
   1d828:	movt	r1, #3
   1d82c:	bl	120d4 <dcgettext@plt>
   1d830:	mov	r1, r7
   1d834:	mov	r2, r0
   1d838:	mov	r0, #1
   1d83c:	bl	12224 <error@plt>
   1d840:	b	1d7e4 <__assert_fail@plt+0xb1ac>
   1d844:	mov	r2, #5
   1d848:	movw	r1, #1660	; 0x67c
   1d84c:	mov	r0, r7
   1d850:	movt	r1, #3
   1d854:	bl	120d4 <dcgettext@plt>
   1d858:	movw	r8, #25384	; 0x6328
   1d85c:	movt	r8, #4
   1d860:	mov	r2, r4
   1d864:	ldr	r1, [r8, #72]	; 0x48
   1d868:	mov	sl, r0
   1d86c:	mov	r0, r7
   1d870:	bl	28cec <__assert_fail@plt+0x166b4>
   1d874:	ldr	r1, [r8, #72]	; 0x48
   1d878:	mov	r2, r9
   1d87c:	mov	r4, r0
   1d880:	mov	r0, #1
   1d884:	bl	28cec <__assert_fail@plt+0x166b4>
   1d888:	mov	r2, sl
   1d88c:	mov	r3, r4
   1d890:	mov	r1, r7
   1d894:	str	r0, [sp]
   1d898:	mov	r0, #1
   1d89c:	bl	12224 <error@plt>
   1d8a0:	str	r6, [r5]
   1d8a4:	mov	r0, r7
   1d8a8:	b	1d778 <__assert_fail@plt+0xb140>
   1d8ac:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d8b0:	svccc	0x007d70a4
   1d8b4:	push	{r3, lr}
   1d8b8:	mov	r1, #0
   1d8bc:	bl	16e8c <__assert_fail@plt+0x4854>
   1d8c0:	mov	r1, #2
   1d8c4:	movw	r2, #19652	; 0x4cc4
   1d8c8:	movt	r2, #1
   1d8cc:	mov	r3, r0
   1d8d0:	str	r1, [r0, #8]
   1d8d4:	str	r2, [r0]
   1d8d8:	mov	r1, #4
   1d8dc:	mov	r2, #0
   1d8e0:	str	r1, [r0, #12]
   1d8e4:	strb	r2, [r0, #19]
   1d8e8:	mov	r0, #1
   1d8ec:	strb	r2, [r3, #18]
   1d8f0:	pop	{r3, pc}
   1d8f4:	push	{r3, lr}
   1d8f8:	mov	r1, #0
   1d8fc:	bl	16e8c <__assert_fail@plt+0x4854>
   1d900:	mov	r1, #4
   1d904:	movw	r2, #20260	; 0x4f24
   1d908:	movt	r2, #1
   1d90c:	mov	r3, r0
   1d910:	str	r2, [r0]
   1d914:	str	r1, [r0, #8]
   1d918:	mov	r2, #0
   1d91c:	mov	r0, #1
   1d920:	str	r2, [r3, #12]
   1d924:	strb	r2, [r3, #19]
   1d928:	strb	r2, [r3, #18]
   1d92c:	pop	{r3, pc}
   1d930:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d934:	movw	r4, #21904	; 0x5590
   1d938:	movt	r4, #4
   1d93c:	sub	sp, sp, #40	; 0x28
   1d940:	cmp	r1, #0
   1d944:	mov	r8, r0
   1d948:	ldr	r3, [r4]
   1d94c:	moveq	r7, r1
   1d950:	str	r3, [sp, #36]	; 0x24
   1d954:	beq	1da30 <__assert_fail@plt+0xb3f8>
   1d958:	ldr	r3, [r2]
   1d95c:	ldr	r5, [r1, r3, lsl #2]
   1d960:	cmp	r5, #0
   1d964:	moveq	r7, r5
   1d968:	beq	1da30 <__assert_fail@plt+0xb3f8>
   1d96c:	add	r0, sp, #12
   1d970:	add	r6, sp, #20
   1d974:	mov	r1, #0
   1d978:	add	r3, r3, #1
   1d97c:	str	r1, [sp, #12]
   1d980:	movw	ip, #1884	; 0x75c
   1d984:	str	r3, [r2]
   1d988:	movt	ip, #3
   1d98c:	str	r1, [sp, #16]
   1d990:	vldr	d0, [pc, #240]	; 1da88 <__assert_fail@plt+0xb450>
   1d994:	ldm	r0, {r2, r3}
   1d998:	mov	r1, r6
   1d99c:	mov	r0, r5
   1d9a0:	str	ip, [sp]
   1d9a4:	bl	1bd24 <__assert_fail@plt+0x96ec>
   1d9a8:	subs	r7, r0, #0
   1d9ac:	beq	1da4c <__assert_fail@plt+0xb414>
   1d9b0:	mov	r1, r5
   1d9b4:	mov	r0, r8
   1d9b8:	bl	18678 <__assert_fail@plt+0x6040>
   1d9bc:	ldr	r5, [sp, #28]
   1d9c0:	movw	ip, #17671	; 0x4507
   1d9c4:	movt	ip, #49710	; 0xc22e
   1d9c8:	vldr	d7, [pc, #192]	; 1da90 <__assert_fail@plt+0xb458>
   1d9cc:	smull	sl, r9, ip, r5
   1d9d0:	mov	r8, r0
   1d9d4:	add	ip, r8, #40	; 0x28
   1d9d8:	ldm	r6, {r0, r1, r2, r3}
   1d9dc:	asr	r6, r5, #31
   1d9e0:	add	r5, r9, r5
   1d9e4:	rsb	r5, r6, r5, asr #16
   1d9e8:	stm	ip, {r0, r1, r2, r3}
   1d9ec:	vmov	s13, r5
   1d9f0:	vcvt.f32.s32	s11, s13
   1d9f4:	vcvt.f64.f32	d6, s11
   1d9f8:	vcmpe.f64	d6, d7
   1d9fc:	vmrs	APSR_nzcv, fpscr
   1da00:	bmi	1da74 <__assert_fail@plt+0xb43c>
   1da04:	vmov.f32	s15, #112	; 0x3f800000  1.0
   1da08:	vcmpe.f32	s11, s15
   1da0c:	vmrs	APSR_nzcv, fpscr
   1da10:	bmi	1da7c <__assert_fail@plt+0xb444>
   1da14:	vldr	s15, [pc, #124]	; 1da98 <__assert_fail@plt+0xb460>
   1da18:	vcmpe.f32	s11, s15
   1da1c:	vldr	s14, [pc, #120]	; 1da9c <__assert_fail@plt+0xb464>
   1da20:	vldr	s15, [pc, #120]	; 1daa0 <__assert_fail@plt+0xb468>
   1da24:	vmrs	APSR_nzcv, fpscr
   1da28:	vmovgt.f32	s15, s14
   1da2c:	vstr	s15, [r8, #28]
   1da30:	ldr	r2, [sp, #36]	; 0x24
   1da34:	mov	r0, r7
   1da38:	ldr	r3, [r4]
   1da3c:	cmp	r2, r3
   1da40:	bne	1da84 <__assert_fail@plt+0xb44c>
   1da44:	add	sp, sp, #40	; 0x28
   1da48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da4c:	mov	r2, #5
   1da50:	movw	r1, #1952	; 0x7a0
   1da54:	movt	r1, #3
   1da58:	bl	120d4 <dcgettext@plt>
   1da5c:	mov	r3, r5
   1da60:	mov	r1, r7
   1da64:	mov	r2, r0
   1da68:	mov	r0, #1
   1da6c:	bl	12224 <error@plt>
   1da70:	b	1da30 <__assert_fail@plt+0xb3f8>
   1da74:	vldr	s15, [pc, #40]	; 1daa4 <__assert_fail@plt+0xb46c>
   1da78:	b	1da2c <__assert_fail@plt+0xb3f4>
   1da7c:	vldr	s15, [pc, #24]	; 1da9c <__assert_fail@plt+0xb464>
   1da80:	b	1da2c <__assert_fail@plt+0xb3f4>
   1da84:	bl	120e0 <__stack_chk_fail@plt>
   1da88:	andeq	r0, r0, r0
   1da8c:	rscsmi	r1, r5, r0, lsl #16
   1da90:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1da94:	svccc	0x00b99999
   1da98:	sbcmi	r0, r8, #0
   1da9c:			; <UNDEFINED> instruction: 0x3e99999a
   1daa0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1daa4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1daa8:	push	{r4, r5, r6, r7, lr}
   1daac:	mov	r5, r1
   1dab0:	ldr	r4, [r1]
   1dab4:	sub	sp, sp, #12
   1dab8:	mov	r7, r0
   1dabc:	cmp	r4, #2
   1dac0:	beq	1daf4 <__assert_fail@plt+0xb4bc>
   1dac4:	cmp	r4, #0
   1dac8:	bne	1db00 <__assert_fail@plt+0xb4c8>
   1dacc:	movw	r6, #23936	; 0x5d80
   1dad0:	movt	r6, #4
   1dad4:	ldr	r3, [r6]
   1dad8:	cmp	r3, #0
   1dadc:	beq	1daf4 <__assert_fail@plt+0xb4bc>
   1dae0:	movw	r2, #25384	; 0x6328
   1dae4:	movt	r2, #4
   1dae8:	ldrb	r3, [r2, #17]
   1daec:	cmp	r3, #0
   1daf0:	bne	1db20 <__assert_fail@plt+0xb4e8>
   1daf4:	mov	r0, r5
   1daf8:	add	sp, sp, #12
   1dafc:	pop	{r4, r5, r6, r7, pc}
   1db00:	movw	r2, #23936	; 0x5d80
   1db04:	movt	r2, #4
   1db08:	ldr	r3, [r2]
   1db0c:	cmp	r3, #0
   1db10:	streq	r0, [r2]
   1db14:	mov	r0, r5
   1db18:	add	sp, sp, #12
   1db1c:	pop	{r4, r5, r6, r7, pc}
   1db20:	mov	r0, r4
   1db24:	mov	r2, #5
   1db28:	movw	r1, #1984	; 0x7c0
   1db2c:	movt	r1, #3
   1db30:	bl	120d4 <dcgettext@plt>
   1db34:	ldr	ip, [r6]
   1db38:	str	r7, [sp, #4]
   1db3c:	mov	r3, r7
   1db40:	mov	r1, r4
   1db44:	str	ip, [sp]
   1db48:	mov	r2, r0
   1db4c:	mov	r0, r4
   1db50:	bl	12224 <error@plt>
   1db54:	mov	r0, r5
   1db58:	add	sp, sp, #12
   1db5c:	pop	{r4, r5, r6, r7, pc}
   1db60:	movw	r3, #25340	; 0x62fc
   1db64:	movt	r3, #4
   1db68:	push	{r4, r5, r6, r7, r8, lr}
   1db6c:	mov	r7, r0
   1db70:	ldr	r4, [r3]
   1db74:	mov	r6, r1
   1db78:	mov	r5, r2
   1db7c:	cmp	r4, #0
   1db80:	bne	1db98 <__assert_fail@plt+0xb560>
   1db84:	bl	2ad84 <__assert_fail@plt+0x1874c>
   1db88:	subs	r8, r0, #0
   1db8c:	bne	1dba0 <__assert_fail@plt+0xb568>
   1db90:	mov	r0, r4
   1db94:	pop	{r4, r5, r6, r7, r8, pc}
   1db98:	pop	{r4, r5, r6, r7, r8, lr}
   1db9c:	b	2af54 <__assert_fail@plt+0x1891c>
   1dba0:	bl	1238c <__errno_location@plt>
   1dba4:	ldr	r3, [r0]
   1dba8:	cmp	r3, #2
   1dbac:	beq	1dbbc <__assert_fail@plt+0xb584>
   1dbb0:	cmp	r3, #20
   1dbb4:	movne	r4, r8
   1dbb8:	bne	1db90 <__assert_fail@plt+0xb558>
   1dbbc:	mov	r0, r7
   1dbc0:	mov	r1, r6
   1dbc4:	mov	r2, r5
   1dbc8:	pop	{r4, r5, r6, r7, r8, lr}
   1dbcc:	b	2af54 <__assert_fail@plt+0x1891c>
   1dbd0:	movw	r1, #23936	; 0x5d80
   1dbd4:	movt	r1, #4
   1dbd8:	push	{r3, lr}
   1dbdc:	ldr	r0, [r1, #4]
   1dbe0:	cmp	r0, #0
   1dbe4:	beq	1dc0c <__assert_fail@plt+0xb5d4>
   1dbe8:	bl	186d0 <__assert_fail@plt+0x6098>
   1dbec:	mov	r2, #0
   1dbf0:	mov	r1, #1065353216	; 0x3f800000
   1dbf4:	mov	r3, r0
   1dbf8:	mov	r0, #1
   1dbfc:	strb	r2, [r3, #19]
   1dc00:	strb	r2, [r3, #18]
   1dc04:	str	r1, [r3, #28]
   1dc08:	pop	{r3, pc}
   1dc0c:	ldr	ip, [pc, #52]	; 1dc48 <__assert_fail@plt+0xb610>
   1dc10:	mov	r3, ip
   1dc14:	b	1dc24 <__assert_fail@plt+0xb5ec>
   1dc18:	ldr	r2, [r3, #16]!
   1dc1c:	cmp	r2, #1
   1dc20:	beq	1dc3c <__assert_fail@plt+0xb604>
   1dc24:	ldr	r2, [r3, #20]
   1dc28:	add	r0, r0, #1
   1dc2c:	cmp	r2, #0
   1dc30:	bne	1dc18 <__assert_fail@plt+0xb5e0>
   1dc34:	mov	r0, r2
   1dc38:	b	1dbe8 <__assert_fail@plt+0xb5b0>
   1dc3c:	add	r0, ip, r0, lsl #4
   1dc40:	str	r0, [r1, #4]
   1dc44:	b	1dbe8 <__assert_fail@plt+0xb5b0>
   1dc48:	andeq	pc, r2, r0, asr #6
   1dc4c:	movw	r3, #25384	; 0x6328
   1dc50:	movt	r3, #4
   1dc54:	mov	r2, #1
   1dc58:	strb	r2, [r3, #14]
   1dc5c:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dc60:	movw	r3, #25384	; 0x6328
   1dc64:	movt	r3, #4
   1dc68:	mov	r2, #1
   1dc6c:	strb	r2, [r3, #17]
   1dc70:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dc74:	movw	r3, #25384	; 0x6328
   1dc78:	movt	r3, #4
   1dc7c:	mov	r2, #0
   1dc80:	strb	r2, [r3, #17]
   1dc84:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dc88:	movw	r3, #25384	; 0x6328
   1dc8c:	movt	r3, #4
   1dc90:	mov	r2, #0
   1dc94:	strb	r2, [r3, #15]
   1dc98:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dc9c:	movw	r3, #25384	; 0x6328
   1dca0:	movt	r3, #4
   1dca4:	mov	r2, #1
   1dca8:	strb	r2, [r3, #12]
   1dcac:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dcb0:	movw	r3, #25384	; 0x6328
   1dcb4:	movt	r3, #4
   1dcb8:	mov	r2, #1
   1dcbc:	strb	r2, [r3, #13]
   1dcc0:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dcc4:	movw	r3, #25384	; 0x6328
   1dcc8:	movt	r3, #4
   1dccc:	mov	r2, #1
   1dcd0:	strb	r2, [r3, #15]
   1dcd4:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dcd8:	movw	r3, #25384	; 0x6328
   1dcdc:	movt	r3, #4
   1dce0:	mov	r1, #0
   1dce4:	mov	r2, #1
   1dce8:	strb	r1, [r3]
   1dcec:	strb	r2, [r3, #1]
   1dcf0:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dcf4:	push	{r4, lr}
   1dcf8:	movw	r4, #25384	; 0x6328
   1dcfc:	movt	r4, #4
   1dd00:	ldrb	r3, [r4, #17]
   1dd04:	cmp	r3, #0
   1dd08:	beq	1dd30 <__assert_fail@plt+0xb6f8>
   1dd0c:	mov	r2, #5
   1dd10:	movw	r1, #2216	; 0x8a8
   1dd14:	mov	r0, #0
   1dd18:	movt	r1, #3
   1dd1c:	bl	120d4 <dcgettext@plt>
   1dd20:	mov	r2, r0
   1dd24:	mov	r0, #0
   1dd28:	mov	r1, r0
   1dd2c:	bl	12224 <error@plt>
   1dd30:	mov	r2, #0
   1dd34:	mov	r3, #1
   1dd38:	strb	r2, [r4]
   1dd3c:	strb	r3, [r4, #1]
   1dd40:	pop	{r4, lr}
   1dd44:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dd48:	cmp	r1, #0
   1dd4c:	push	{r3, lr}
   1dd50:	beq	1dd84 <__assert_fail@plt+0xb74c>
   1dd54:	ldr	r3, [r2]
   1dd58:	ldr	r0, [r1, r3, lsl #2]
   1dd5c:	cmp	r0, #0
   1dd60:	beq	1dd84 <__assert_fail@plt+0xb74c>
   1dd64:	add	r3, r3, #1
   1dd68:	str	r3, [r2]
   1dd6c:	bl	20818 <__assert_fail@plt+0xe1e0>
   1dd70:	movw	r3, #25384	; 0x6328
   1dd74:	movt	r3, #4
   1dd78:	str	r0, [r3, #60]	; 0x3c
   1dd7c:	pop	{r3, lr}
   1dd80:	b	1dbd0 <__assert_fail@plt+0xb598>
   1dd84:	mov	r0, #0
   1dd88:	pop	{r3, pc}
   1dd8c:	push	{r4, lr}
   1dd90:	movw	r4, #23936	; 0x5d80
   1dd94:	movt	r4, #4
   1dd98:	ldrb	r2, [r4, #8]
   1dd9c:	cmp	r2, #0
   1dda0:	beq	1ddac <__assert_fail@plt+0xb774>
   1dda4:	mov	r0, #1
   1dda8:	pop	{r4, pc}
   1ddac:	movw	r0, #2332	; 0x91c
   1ddb0:	movt	r0, #3
   1ddb4:	mov	r1, r0
   1ddb8:	bl	12248 <fnmatch@plt>
   1ddbc:	subs	r2, r0, #0
   1ddc0:	bne	1de08 <__assert_fail@plt+0xb7d0>
   1ddc4:	movw	r0, #2392	; 0x958
   1ddc8:	movw	r1, #2332	; 0x91c
   1ddcc:	movt	r0, #3
   1ddd0:	movt	r1, #3
   1ddd4:	bl	12248 <fnmatch@plt>
   1ddd8:	cmp	r0, #0
   1dddc:	beq	1de08 <__assert_fail@plt+0xb7d0>
   1dde0:	movw	r0, #2392	; 0x958
   1dde4:	movw	r1, #2332	; 0x91c
   1dde8:	movt	r0, #3
   1ddec:	movt	r1, #3
   1ddf0:	mov	r2, #16
   1ddf4:	bl	12248 <fnmatch@plt>
   1ddf8:	cmp	r0, #0
   1ddfc:	moveq	r3, #1
   1de00:	strbeq	r3, [r4, #8]
   1de04:	beq	1dda4 <__assert_fail@plt+0xb76c>
   1de08:	mov	r2, #5
   1de0c:	movw	r1, #2336	; 0x920
   1de10:	mov	r0, #0
   1de14:	movt	r1, #3
   1de18:	bl	120d4 <dcgettext@plt>
   1de1c:	mov	r1, #0
   1de20:	mov	r2, r0
   1de24:	mov	r0, #1
   1de28:	bl	12224 <error@plt>
   1de2c:	mov	r0, #0
   1de30:	pop	{r4, pc}
   1de34:	push	{r3, lr}
   1de38:	ldrb	r3, [r0]
   1de3c:	cmp	r3, #0
   1de40:	beq	1de88 <__assert_fail@plt+0xb850>
   1de44:	cmp	r3, #42	; 0x2a
   1de48:	beq	1deac <__assert_fail@plt+0xb874>
   1de4c:	cmp	r3, #63	; 0x3f
   1de50:	beq	1deac <__assert_fail@plt+0xb874>
   1de54:	cmp	r3, #91	; 0x5b
   1de58:	beq	1deac <__assert_fail@plt+0xb874>
   1de5c:	mov	r2, r0
   1de60:	b	1de7c <__assert_fail@plt+0xb844>
   1de64:	cmp	r3, #42	; 0x2a
   1de68:	beq	1deac <__assert_fail@plt+0xb874>
   1de6c:	cmp	r3, #63	; 0x3f
   1de70:	beq	1deac <__assert_fail@plt+0xb874>
   1de74:	cmp	r3, #91	; 0x5b
   1de78:	beq	1deac <__assert_fail@plt+0xb874>
   1de7c:	ldrb	r3, [r2, #1]!
   1de80:	cmp	r3, #0
   1de84:	bne	1de64 <__assert_fail@plt+0xb82c>
   1de88:	cmp	r1, #0
   1de8c:	beq	1deb4 <__assert_fail@plt+0xb87c>
   1de90:	mov	r1, #46	; 0x2e
   1de94:	bl	12338 <strchr@plt>
   1de98:	vldr	s15, [pc, #28]	; 1debc <__assert_fail@plt+0xb884>
   1de9c:	vldr	s0, [pc, #28]	; 1dec0 <__assert_fail@plt+0xb888>
   1dea0:	cmp	r0, #0
   1dea4:	vmoveq.f32	s0, s15
   1dea8:	pop	{r3, pc}
   1deac:	vldr	s0, [pc, #12]	; 1dec0 <__assert_fail@plt+0xb888>
   1deb0:	pop	{r3, pc}
   1deb4:	vldr	s0, [pc]	; 1debc <__assert_fail@plt+0xb884>
   1deb8:	pop	{r3, pc}
   1debc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dec0:	svccc	0x004ccccd
   1dec4:	push	{r4, r5, r6, r7, r8, lr}
   1dec8:	sub	sp, sp, #8
   1decc:	mov	r5, r1
   1ded0:	mov	r8, r0
   1ded4:	mov	r6, r2
   1ded8:	mov	r7, r3
   1dedc:	bl	1dd8c <__assert_fail@plt+0xb754>
   1dee0:	cmp	r5, #0
   1dee4:	beq	1df4c <__assert_fail@plt+0xb914>
   1dee8:	ldr	r3, [r6]
   1deec:	ldr	r4, [r5, r3, lsl #2]
   1def0:	cmp	r4, #0
   1def4:	moveq	r5, r4
   1def8:	beq	1df4c <__assert_fail@plt+0xb914>
   1defc:	add	r3, r3, #1
   1df00:	ldr	r1, [sp, #32]
   1df04:	str	r3, [r6]
   1df08:	mov	r2, r4
   1df0c:	mov	r0, r8
   1df10:	bl	18644 <__assert_fail@plt+0x600c>
   1df14:	mov	r2, #0
   1df18:	mov	r1, r2
   1df1c:	strb	r2, [r0, #19]
   1df20:	mov	r6, r0
   1df24:	strb	r2, [r0, #18]
   1df28:	str	r4, [r0, #40]	; 0x28
   1df2c:	mov	r0, r4
   1df30:	bl	1de34 <__assert_fail@plt+0xb7fc>
   1df34:	movw	r2, #25384	; 0x6328
   1df38:	movt	r2, #4
   1df3c:	ldrb	r5, [r2, #18]
   1df40:	cmp	r5, #0
   1df44:	vstr	s0, [r6, #28]
   1df48:	beq	1df58 <__assert_fail@plt+0xb920>
   1df4c:	mov	r0, r5
   1df50:	add	sp, sp, #8
   1df54:	pop	{r4, r5, r6, r7, r8, pc}
   1df58:	mov	r0, r4
   1df5c:	mov	r1, #47	; 0x2f
   1df60:	bl	124c4 <strrchr@plt>
   1df64:	cmp	r0, #0
   1df68:	beq	1df78 <__assert_fail@plt+0xb940>
   1df6c:	ldrb	r3, [r0, #1]
   1df70:	cmp	r3, #0
   1df74:	beq	1df88 <__assert_fail@plt+0xb950>
   1df78:	mov	r5, #1
   1df7c:	mov	r0, r5
   1df80:	add	sp, sp, #8
   1df84:	pop	{r4, r5, r6, r7, r8, pc}
   1df88:	ldr	r3, [sp, #32]
   1df8c:	movw	r1, #19316	; 0x4b74
   1df90:	movt	r1, #1
   1df94:	mov	r0, r4
   1df98:	subs	r3, r3, r1
   1df9c:	rsbs	r1, r3, #0
   1dfa0:	adcs	r1, r1, r3
   1dfa4:	bl	169b0 <__assert_fail@plt+0x4378>
   1dfa8:	cmp	r0, #0
   1dfac:	bne	1df78 <__assert_fail@plt+0xb940>
   1dfb0:	mov	r2, #5
   1dfb4:	movw	r1, #2396	; 0x95c
   1dfb8:	movt	r1, #3
   1dfbc:	bl	120d4 <dcgettext@plt>
   1dfc0:	mov	r3, r7
   1dfc4:	mov	r1, r5
   1dfc8:	str	r4, [sp]
   1dfcc:	mov	r2, r0
   1dfd0:	mov	r0, r5
   1dfd4:	bl	12224 <error@plt>
   1dfd8:	mov	r5, #1
   1dfdc:	movw	r3, #52343	; 0xcc77
   1dfe0:	movt	r3, #12843	; 0x322b
   1dfe4:	str	r3, [r6, #28]
   1dfe8:	b	1df4c <__assert_fail@plt+0xb914>
   1dfec:	push	{lr}		; (str lr, [sp, #-4]!)
   1dff0:	sub	sp, sp, #12
   1dff4:	movw	ip, #20268	; 0x4f2c
   1dff8:	movw	r3, #2460	; 0x99c
   1dffc:	movt	ip, #1
   1e000:	movt	r3, #3
   1e004:	str	ip, [sp]
   1e008:	bl	1dec4 <__assert_fail@plt+0xb88c>
   1e00c:	add	sp, sp, #12
   1e010:	pop	{pc}		; (ldr pc, [sp], #4)
   1e014:	push	{lr}		; (str lr, [sp, #-4]!)
   1e018:	sub	sp, sp, #12
   1e01c:	movw	ip, #20268	; 0x4f2c
   1e020:	movw	r3, #2472	; 0x9a8
   1e024:	movt	ip, #1
   1e028:	movt	r3, #3
   1e02c:	str	ip, [sp]
   1e030:	bl	1dec4 <__assert_fail@plt+0xb88c>
   1e034:	add	sp, sp, #12
   1e038:	pop	{pc}		; (ldr pc, [sp], #4)
   1e03c:	push	{lr}		; (str lr, [sp, #-4]!)
   1e040:	sub	sp, sp, #12
   1e044:	movw	ip, #19316	; 0x4b74
   1e048:	movw	r3, #2480	; 0x9b0
   1e04c:	movt	ip, #1
   1e050:	movt	r3, #3
   1e054:	str	ip, [sp]
   1e058:	bl	1dec4 <__assert_fail@plt+0xb88c>
   1e05c:	add	sp, sp, #12
   1e060:	pop	{pc}		; (ldr pc, [sp], #4)
   1e064:	push	{lr}		; (str lr, [sp, #-4]!)
   1e068:	sub	sp, sp, #12
   1e06c:	movw	ip, #19316	; 0x4b74
   1e070:	movw	r3, #2492	; 0x9bc
   1e074:	movt	ip, #1
   1e078:	movt	r3, #3
   1e07c:	str	ip, [sp]
   1e080:	bl	1dec4 <__assert_fail@plt+0xb88c>
   1e084:	add	sp, sp, #12
   1e088:	pop	{pc}		; (ldr pc, [sp], #4)
   1e08c:	push	{r4, r5, r6, lr}
   1e090:	mov	r4, r1
   1e094:	mov	r6, r0
   1e098:	mov	r5, r2
   1e09c:	bl	1dd8c <__assert_fail@plt+0xb754>
   1e0a0:	cmp	r4, #0
   1e0a4:	beq	1e0fc <__assert_fail@plt+0xbac4>
   1e0a8:	ldr	r3, [r5]
   1e0ac:	ldr	r4, [r4, r3, lsl #2]
   1e0b0:	cmp	r4, #0
   1e0b4:	beq	1e0fc <__assert_fail@plt+0xbac4>
   1e0b8:	add	r3, r3, #1
   1e0bc:	mov	r1, r4
   1e0c0:	str	r3, [r5]
   1e0c4:	mov	r0, r6
   1e0c8:	bl	18678 <__assert_fail@plt+0x6040>
   1e0cc:	mov	r1, #0
   1e0d0:	mov	r5, r0
   1e0d4:	str	r4, [r0, #40]	; 0x28
   1e0d8:	mov	r0, r4
   1e0dc:	bl	1de34 <__assert_fail@plt+0xb7fc>
   1e0e0:	vldr	d7, [pc, #32]	; 1e108 <__assert_fail@plt+0xbad0>
   1e0e4:	mov	r0, #1
   1e0e8:	vcvt.f64.f32	d0, s0
   1e0ec:	vmul.f64	d7, d0, d7
   1e0f0:	vcvt.f32.f64	s14, d7
   1e0f4:	vstr	s14, [r5, #28]
   1e0f8:	pop	{r4, r5, r6, pc}
   1e0fc:	mov	r0, r4
   1e100:	pop	{r4, r5, r6, pc}
   1e104:	nop	{0}
   1e108:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1e10c:	svccc	0x00b99999
   1e110:	cmp	r1, #0
   1e114:	push	{r3, r4, r5, lr}
   1e118:	beq	1e16c <__assert_fail@plt+0xbb34>
   1e11c:	ldr	r3, [r2]
   1e120:	ldr	r4, [r1, r3, lsl #2]
   1e124:	cmp	r4, #0
   1e128:	beq	1e174 <__assert_fail@plt+0xbb3c>
   1e12c:	add	r3, r3, #1
   1e130:	mov	r1, r4
   1e134:	str	r3, [r2]
   1e138:	bl	18678 <__assert_fail@plt+0x6040>
   1e13c:	mov	r1, #0
   1e140:	mov	r5, r0
   1e144:	str	r4, [r0, #40]	; 0x28
   1e148:	mov	r0, r4
   1e14c:	bl	1de34 <__assert_fail@plt+0xb7fc>
   1e150:	vldr	d7, [pc, #40]	; 1e180 <__assert_fail@plt+0xbb48>
   1e154:	mov	r0, #1
   1e158:	vcvt.f64.f32	d0, s0
   1e15c:	vmul.f64	d7, d0, d7
   1e160:	vcvt.f32.f64	s14, d7
   1e164:	vstr	s14, [r5, #28]
   1e168:	pop	{r3, r4, r5, pc}
   1e16c:	mov	r0, r1
   1e170:	pop	{r3, r4, r5, pc}
   1e174:	mov	r0, r4
   1e178:	pop	{r3, r4, r5, pc}
   1e17c:	nop	{0}
   1e180:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1e184:	svccc	0x00b99999
   1e188:	cmp	r0, #0
   1e18c:	push	{r4, r5, r6, r7, r8, lr}
   1e190:	mov	r8, r3
   1e194:	popeq	{r4, r5, r6, r7, r8, pc}
   1e198:	ldr	r3, [r1]
   1e19c:	ldr	r5, [r0, r3, lsl #2]
   1e1a0:	cmp	r5, #0
   1e1a4:	beq	1e258 <__assert_fail@plt+0xbc20>
   1e1a8:	add	r3, r3, #1
   1e1ac:	mov	r0, r2
   1e1b0:	str	r3, [r1]
   1e1b4:	mov	r2, r5
   1e1b8:	movw	r1, #20644	; 0x50a4
   1e1bc:	movt	r1, #1
   1e1c0:	bl	18644 <__assert_fail@plt+0x600c>
   1e1c4:	mov	r6, #0
   1e1c8:	mov	r7, r0
   1e1cc:	mov	r0, #32
   1e1d0:	strb	r6, [r7, #19]
   1e1d4:	strb	r6, [r7, #18]
   1e1d8:	bl	29604 <__assert_fail@plt+0x16fcc>
   1e1dc:	mov	r3, #100	; 0x64
   1e1e0:	mov	r4, r0
   1e1e4:	str	r0, [r7, #40]	; 0x28
   1e1e8:	mov	r0, r3
   1e1ec:	str	r3, [r4, #4]
   1e1f0:	bl	29604 <__assert_fail@plt+0x16fcc>
   1e1f4:	str	r6, [r4, #16]
   1e1f8:	str	r0, [r4]
   1e1fc:	mov	r0, r8
   1e200:	bl	125c0 <re_set_syntax@plt>
   1e204:	mov	r0, r5
   1e208:	str	r8, [r4, #12]
   1e20c:	str	r6, [r4, #20]
   1e210:	bl	1232c <strlen@plt>
   1e214:	mov	r2, r4
   1e218:	mov	r1, r0
   1e21c:	mov	r0, r5
   1e220:	bl	12590 <re_compile_pattern@plt>
   1e224:	subs	r3, r0, #0
   1e228:	beq	1e240 <__assert_fail@plt+0xbc08>
   1e22c:	movw	r2, #8288	; 0x2060
   1e230:	mov	r1, r6
   1e234:	mov	r0, #1
   1e238:	movt	r2, #3
   1e23c:	bl	12224 <error@plt>
   1e240:	mov	r0, r5
   1e244:	mov	r1, #1
   1e248:	bl	1de34 <__assert_fail@plt+0xb7fc>
   1e24c:	mov	r0, #1
   1e250:	vstr	s0, [r7, #28]
   1e254:	pop	{r4, r5, r6, r7, r8, pc}
   1e258:	mov	r0, r5
   1e25c:	pop	{r4, r5, r6, r7, r8, pc}
   1e260:	movw	r3, #25384	; 0x6328
   1e264:	movt	r3, #4
   1e268:	mov	ip, r0
   1e26c:	mov	r0, r1
   1e270:	ldr	r3, [r3, #60]	; 0x3c
   1e274:	mov	r1, r2
   1e278:	mov	r2, ip
   1e27c:	b	1e188 <__assert_fail@plt+0xbb50>
   1e280:	movw	r3, #25384	; 0x6328
   1e284:	movt	r3, #4
   1e288:	mov	ip, r0
   1e28c:	mov	r0, r1
   1e290:	ldr	r3, [r3, #60]	; 0x3c
   1e294:	mov	r1, r2
   1e298:	mov	r2, ip
   1e29c:	orr	r3, r3, #4194304	; 0x400000
   1e2a0:	b	1e188 <__assert_fail@plt+0xbb50>
   1e2a4:	mov	ip, r1
   1e2a8:	ldr	r1, [r1]
   1e2ac:	cmp	r0, #0
   1e2b0:	sub	r3, r1, #-1073741823	; 0xc0000001
   1e2b4:	push	{r4, r5, r6, r7, lr}
   1e2b8:	mov	r6, r2
   1e2bc:	sub	sp, sp, #12
   1e2c0:	lsl	r4, r3, #2
   1e2c4:	ldr	r7, [r0, r3, lsl #2]
   1e2c8:	beq	1e358 <__assert_fail@plt+0xbd20>
   1e2cc:	add	r0, r0, r4
   1e2d0:	ldr	r4, [r0, #4]
   1e2d4:	cmp	r4, #0
   1e2d8:	beq	1e358 <__assert_fail@plt+0xbd20>
   1e2dc:	add	r3, r1, #1
   1e2e0:	mov	r0, r4
   1e2e4:	movw	r1, #65532	; 0xfffc
   1e2e8:	str	r3, [ip]
   1e2ec:	movt	r1, #2
   1e2f0:	bl	1262c <strspn@plt>
   1e2f4:	cmp	r0, #0
   1e2f8:	movwle	r5, #25384	; 0x6328
   1e2fc:	movtle	r5, #4
   1e300:	ble	1e318 <__assert_fail@plt+0xbce0>
   1e304:	ldrb	r3, [r4, r0]
   1e308:	movw	r5, #25384	; 0x6328
   1e30c:	movt	r5, #4
   1e310:	cmp	r3, #0
   1e314:	beq	1e364 <__assert_fail@plt+0xbd2c>
   1e318:	mov	r2, #5
   1e31c:	movw	r1, #2500	; 0x9c4
   1e320:	mov	r0, #0
   1e324:	movt	r1, #3
   1e328:	bl	120d4 <dcgettext@plt>
   1e32c:	ldr	r1, [r5, #72]	; 0x48
   1e330:	mov	r2, r4
   1e334:	mov	r6, r0
   1e338:	mov	r0, #0
   1e33c:	bl	28cec <__assert_fail@plt+0x166b4>
   1e340:	mov	r2, r6
   1e344:	mov	r3, r7
   1e348:	mov	r1, #0
   1e34c:	str	r0, [sp]
   1e350:	mov	r0, #1
   1e354:	bl	12224 <error@plt>
   1e358:	mov	r0, #0
   1e35c:	add	sp, sp, #12
   1e360:	pop	{r4, r5, r6, r7, pc}
   1e364:	mov	r0, r4
   1e368:	ldr	r1, [r5, #72]	; 0x48
   1e36c:	bl	21174 <__assert_fail@plt+0xeb3c>
   1e370:	cmp	r0, #0
   1e374:	str	r0, [r6]
   1e378:	blt	1e318 <__assert_fail@plt+0xbce0>
   1e37c:	add	sp, sp, #12
   1e380:	pop	{r4, r5, r6, r7, lr}
   1e384:	b	1dbd0 <__assert_fail@plt+0xb598>
   1e388:	mov	r0, r1
   1e38c:	mov	r1, r2
   1e390:	ldr	r2, [pc]	; 1e398 <__assert_fail@plt+0xbd60>
   1e394:	b	1e2a4 <__assert_fail@plt+0xbc6c>
   1e398:	andeq	r6, r4, r0, lsr r3
   1e39c:	mov	r0, r1
   1e3a0:	mov	r1, r2
   1e3a4:	ldr	r2, [pc]	; 1e3ac <__assert_fail@plt+0xbd74>
   1e3a8:	b	1e2a4 <__assert_fail@plt+0xbc6c>
   1e3ac:	andeq	r6, r4, ip, lsr #6
   1e3b0:	push	{r4, r5, r6, lr}
   1e3b4:	subs	r5, r1, #0
   1e3b8:	mov	r6, r0
   1e3bc:	mov	r4, r2
   1e3c0:	beq	1e448 <__assert_fail@plt+0xbe10>
   1e3c4:	ldr	r3, [r2]
   1e3c8:	ldr	r3, [r5, r3, lsl #2]
   1e3cc:	cmp	r3, #0
   1e3d0:	beq	1e448 <__assert_fail@plt+0xbe10>
   1e3d4:	bl	11fa8 <is_selinux_enabled@plt>
   1e3d8:	cmp	r0, #0
   1e3dc:	ble	1e424 <__assert_fail@plt+0xbdec>
   1e3e0:	mov	r0, r6
   1e3e4:	mov	r1, #0
   1e3e8:	bl	18678 <__assert_fail@plt+0x6040>
   1e3ec:	ldr	r2, [r4]
   1e3f0:	mov	r1, #0
   1e3f4:	ldr	r2, [r5, r2, lsl #2]
   1e3f8:	mov	r3, r0
   1e3fc:	movw	r0, #55050	; 0xd70a
   1e400:	strb	r1, [r3, #18]
   1e404:	movt	r0, #15395	; 0x3c23
   1e408:	str	r2, [r3, #40]	; 0x28
   1e40c:	str	r0, [r3, #28]
   1e410:	mov	r0, #1
   1e414:	ldr	r3, [r4]
   1e418:	add	r3, r3, r0
   1e41c:	str	r3, [r4]
   1e420:	pop	{r4, r5, r6, pc}
   1e424:	mov	r2, #5
   1e428:	movw	r1, #2564	; 0xa04
   1e42c:	mov	r0, #0
   1e430:	movt	r1, #3
   1e434:	bl	120d4 <dcgettext@plt>
   1e438:	mov	r1, #0
   1e43c:	mov	r2, r0
   1e440:	mov	r0, #1
   1e444:	bl	12224 <error@plt>
   1e448:	mov	r0, #0
   1e44c:	pop	{r4, r5, r6, pc}
   1e450:	movw	r2, #25384	; 0x6328
   1e454:	movt	r2, #4
   1e458:	push	{r4, r5, r6, r7, lr}
   1e45c:	mov	r5, r0
   1e460:	ldrb	r2, [r2, #17]
   1e464:	sub	sp, sp, #12
   1e468:	mov	r4, r1
   1e46c:	cmp	r2, #0
   1e470:	beq	1e4d8 <__assert_fail@plt+0xbea0>
   1e474:	mov	r0, r1
   1e478:	mov	r1, #47	; 0x2f
   1e47c:	bl	12338 <strchr@plt>
   1e480:	cmp	r0, #0
   1e484:	beq	1e4d8 <__assert_fail@plt+0xbea0>
   1e488:	mov	r2, #5
   1e48c:	movw	r1, #2616	; 0xa38
   1e490:	mov	r0, #0
   1e494:	movt	r1, #3
   1e498:	bl	120d4 <dcgettext@plt>
   1e49c:	mov	r1, r4
   1e4a0:	mov	r6, r0
   1e4a4:	mov	r0, #0
   1e4a8:	bl	19778 <__assert_fail@plt+0x7140>
   1e4ac:	mov	r1, r4
   1e4b0:	mov	r7, r0
   1e4b4:	mov	r0, #1
   1e4b8:	bl	19778 <__assert_fail@plt+0x7140>
   1e4bc:	str	r7, [sp]
   1e4c0:	mov	r2, r6
   1e4c4:	mov	r3, r5
   1e4c8:	str	r0, [sp, #4]
   1e4cc:	mov	r0, #0
   1e4d0:	mov	r1, r0
   1e4d4:	bl	12224 <error@plt>
   1e4d8:	mov	r0, #1
   1e4dc:	add	sp, sp, #12
   1e4e0:	pop	{r4, r5, r6, r7, pc}
   1e4e4:	cmp	r1, #0
   1e4e8:	push	{r4, r5, r6, r7, r8, lr}
   1e4ec:	mov	r4, r2
   1e4f0:	mov	r8, r0
   1e4f4:	ldr	r5, [r2]
   1e4f8:	moveq	r7, r1
   1e4fc:	beq	1e538 <__assert_fail@plt+0xbf00>
   1e500:	ldr	r6, [r1, r5, lsl #2]
   1e504:	cmp	r6, #0
   1e508:	moveq	r7, r6
   1e50c:	beq	1e538 <__assert_fail@plt+0xbf00>
   1e510:	add	r3, r5, #1
   1e514:	str	r3, [r2]
   1e518:	bl	1dd8c <__assert_fail@plt+0xb754>
   1e51c:	movw	r0, #2948	; 0xb84
   1e520:	mov	r1, r6
   1e524:	movt	r0, #3
   1e528:	bl	1e450 <__assert_fail@plt+0xbe18>
   1e52c:	subs	r7, r0, #0
   1e530:	streq	r5, [r4]
   1e534:	bne	1e540 <__assert_fail@plt+0xbf08>
   1e538:	mov	r0, r7
   1e53c:	pop	{r4, r5, r6, r7, r8, pc}
   1e540:	mov	r1, r6
   1e544:	mov	r0, r8
   1e548:	bl	18678 <__assert_fail@plt+0x6040>
   1e54c:	mov	r1, #0
   1e550:	mov	r4, r0
   1e554:	str	r6, [r0, #40]	; 0x28
   1e558:	mov	r0, r6
   1e55c:	strb	r1, [r4, #19]
   1e560:	strb	r1, [r4, #18]
   1e564:	bl	1de34 <__assert_fail@plt+0xb7fc>
   1e568:	vstr	s0, [r4, #28]
   1e56c:	b	1e538 <__assert_fail@plt+0xbf00>
   1e570:	push	{r4, r5, r6, lr}
   1e574:	mov	r4, r1
   1e578:	mov	r6, r0
   1e57c:	mov	r5, r2
   1e580:	bl	1dd8c <__assert_fail@plt+0xb754>
   1e584:	cmp	r4, #0
   1e588:	beq	1e5bc <__assert_fail@plt+0xbf84>
   1e58c:	ldr	r3, [r5]
   1e590:	ldr	r4, [r4, r3, lsl #2]
   1e594:	cmp	r4, #0
   1e598:	beq	1e5bc <__assert_fail@plt+0xbf84>
   1e59c:	add	r3, r3, #1
   1e5a0:	movw	r0, #2956	; 0xb8c
   1e5a4:	str	r3, [r5]
   1e5a8:	movt	r0, #3
   1e5ac:	mov	r1, r4
   1e5b0:	bl	1e450 <__assert_fail@plt+0xbe18>
   1e5b4:	subs	r5, r0, #0
   1e5b8:	bne	1e5c8 <__assert_fail@plt+0xbf90>
   1e5bc:	mov	r5, #0
   1e5c0:	mov	r0, r5
   1e5c4:	pop	{r4, r5, r6, pc}
   1e5c8:	mov	r1, r4
   1e5cc:	mov	r0, r6
   1e5d0:	bl	18678 <__assert_fail@plt+0x6040>
   1e5d4:	mov	r1, #0
   1e5d8:	mov	r6, r0
   1e5dc:	str	r4, [r0, #40]	; 0x28
   1e5e0:	mov	r0, r4
   1e5e4:	strb	r1, [r6, #19]
   1e5e8:	strb	r1, [r6, #18]
   1e5ec:	bl	1de34 <__assert_fail@plt+0xb7fc>
   1e5f0:	mov	r0, r5
   1e5f4:	vstr	s0, [r6, #28]
   1e5f8:	pop	{r4, r5, r6, pc}
   1e5fc:	push	{r4, lr}
   1e600:	movw	r4, #25384	; 0x6328
   1e604:	movt	r4, #4
   1e608:	ldrb	r3, [r4, #36]	; 0x24
   1e60c:	cmp	r3, #0
   1e610:	beq	1e61c <__assert_fail@plt+0xbfe4>
   1e614:	mov	r0, #1
   1e618:	pop	{r4, pc}
   1e61c:	ldr	r2, [r4, #28]
   1e620:	add	r0, r4, #28
   1e624:	str	r3, [r4, #32]
   1e628:	add	r3, r2, #86016	; 0x15000
   1e62c:	add	r3, r3, #384	; 0x180
   1e630:	str	r3, [r4, #28]
   1e634:	bl	122cc <localtime@plt>
   1e638:	ldr	r3, [r4, #28]
   1e63c:	cmp	r0, #0
   1e640:	beq	1e678 <__assert_fail@plt+0xc040>
   1e644:	ldr	r2, [r0, #4]
   1e648:	mov	ip, #3600	; 0xe10
   1e64c:	ldr	r1, [r0]
   1e650:	ldr	r0, [r0, #8]
   1e654:	rsb	r2, r2, r2, lsl #4
   1e658:	add	r1, r1, r2, lsl #2
   1e65c:	mla	r2, ip, r0, r1
   1e660:	rsb	r3, r2, r3
   1e664:	mov	r1, #1
   1e668:	str	r3, [r4, #28]
   1e66c:	strb	r1, [r4, #36]	; 0x24
   1e670:	mov	r0, #1
   1e674:	pop	{r4, pc}
   1e678:	movw	r0, #17671	; 0x4507
   1e67c:	movt	r0, #49710	; 0xc22e
   1e680:	asr	r2, r3, #31
   1e684:	movw	r1, #20864	; 0x5180
   1e688:	smull	ip, r0, r0, r3
   1e68c:	movt	r1, #1
   1e690:	add	r0, r0, r3
   1e694:	rsb	r2, r2, r0, asr #16
   1e698:	mls	r2, r1, r2, r3
   1e69c:	b	1e660 <__assert_fail@plt+0xc028>
   1e6a0:	movw	r3, #25384	; 0x6328
   1e6a4:	movt	r3, #4
   1e6a8:	movw	r2, #17671	; 0x4507
   1e6ac:	movt	r2, #49710	; 0xc22e
   1e6b0:	ldr	r3, [r3, #28]
   1e6b4:	vldr	d7, [pc, #100]	; 1e720 <__assert_fail@plt+0xc0e8>
   1e6b8:	rsb	r0, r0, r3
   1e6bc:	smull	r3, r2, r2, r0
   1e6c0:	asr	r3, r0, #31
   1e6c4:	add	r0, r2, r0
   1e6c8:	rsb	r0, r3, r0, asr #16
   1e6cc:	vmov	s13, r0
   1e6d0:	vcvt.f32.s32	s11, s13
   1e6d4:	vcvt.f64.f32	d6, s11
   1e6d8:	vcmpe.f64	d6, d7
   1e6dc:	vmrs	APSR_nzcv, fpscr
   1e6e0:	bmi	1e710 <__assert_fail@plt+0xc0d8>
   1e6e4:	vmov.f32	s15, #112	; 0x3f800000  1.0
   1e6e8:	vcmpe.f32	s11, s15
   1e6ec:	vmrs	APSR_nzcv, fpscr
   1e6f0:	bmi	1e718 <__assert_fail@plt+0xc0e0>
   1e6f4:	vldr	s15, [pc, #44]	; 1e728 <__assert_fail@plt+0xc0f0>
   1e6f8:	vcmpe.f32	s11, s15
   1e6fc:	vldr	s0, [pc, #40]	; 1e72c <__assert_fail@plt+0xc0f4>
   1e700:	vldr	s15, [pc, #40]	; 1e730 <__assert_fail@plt+0xc0f8>
   1e704:	vmrs	APSR_nzcv, fpscr
   1e708:	vmovle.f32	s0, s15
   1e70c:	bx	lr
   1e710:	vldr	s0, [pc, #28]	; 1e734 <__assert_fail@plt+0xc0fc>
   1e714:	bx	lr
   1e718:	vldr	s0, [pc, #12]	; 1e72c <__assert_fail@plt+0xc0f4>
   1e71c:	bx	lr
   1e720:	ldmibls	r9, {r1, r3, r4, r7, r8, fp, ip, pc}
   1e724:	svccc	0x00b99999
   1e728:	sbcmi	r0, r8, #0
   1e72c:			; <UNDEFINED> instruction: 0x3e99999a
   1e730:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e734:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e738:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e73c:	movw	r4, #21904	; 0x5590
   1e740:	movt	r4, #4
   1e744:	mov	r5, r2
   1e748:	sub	sp, sp, #40	; 0x28
   1e74c:	cmp	r1, #0
   1e750:	ldr	r2, [r4]
   1e754:	mov	sl, r3
   1e758:	mov	r9, r0
   1e75c:	ldr	r6, [r5]
   1e760:	moveq	sl, r1
   1e764:	str	r2, [sp, #36]	; 0x24
   1e768:	beq	1e7dc <__assert_fail@plt+0xc1a4>
   1e76c:	ldr	r7, [r1, r6, lsl #2]
   1e770:	cmp	r7, #0
   1e774:	moveq	sl, r7
   1e778:	beq	1e7dc <__assert_fail@plt+0xc1a4>
   1e77c:	movw	lr, #25384	; 0x6328
   1e780:	movt	lr, #4
   1e784:	add	r3, lr, #28
   1e788:	add	ip, sp, #12
   1e78c:	add	r8, sp, #20
   1e790:	add	r2, r6, #1
   1e794:	ldm	r3, {r0, r1}
   1e798:	vldr	d0, [pc, #136]	; 1e828 <__assert_fail@plt+0xc1f0>
   1e79c:	str	r2, [r5]
   1e7a0:	movw	r3, #2964	; 0xb94
   1e7a4:	add	r2, r0, #86016	; 0x15000
   1e7a8:	movt	r3, #3
   1e7ac:	stm	ip, {r0, r1}
   1e7b0:	add	r2, r2, #384	; 0x180
   1e7b4:	str	r3, [sp]
   1e7b8:	mov	r1, r8
   1e7bc:	str	r2, [sp, #12]
   1e7c0:	mov	r0, r7
   1e7c4:	ldm	ip, {r2, r3}
   1e7c8:	str	sl, [sp, #20]
   1e7cc:	bl	1bd24 <__assert_fail@plt+0x96ec>
   1e7d0:	subs	sl, r0, #0
   1e7d4:	streq	r6, [r5]
   1e7d8:	bne	1e7f8 <__assert_fail@plt+0xc1c0>
   1e7dc:	ldr	r2, [sp, #36]	; 0x24
   1e7e0:	mov	r0, sl
   1e7e4:	ldr	r3, [r4]
   1e7e8:	cmp	r2, r3
   1e7ec:	bne	1e824 <__assert_fail@plt+0xc1ec>
   1e7f0:	add	sp, sp, #40	; 0x28
   1e7f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e7f8:	mov	r1, r7
   1e7fc:	mov	r0, r9
   1e800:	bl	18678 <__assert_fail@plt+0x6040>
   1e804:	mov	r5, r0
   1e808:	add	ip, r5, #40	; 0x28
   1e80c:	ldm	r8, {r0, r1, r2, r3}
   1e810:	stm	ip, {r0, r1, r2, r3}
   1e814:	ldr	r0, [sp, #28]
   1e818:	bl	1e6a0 <__assert_fail@plt+0xc068>
   1e81c:	vstr	s0, [r5, #28]
   1e820:	b	1e7dc <__assert_fail@plt+0xc1a4>
   1e824:	bl	120e0 <__stack_chk_fail@plt>
   1e828:	andeq	r0, r0, r0
   1e82c:	submi	r0, lr, r0
   1e830:	mov	r3, #3
   1e834:	b	1e738 <__assert_fail@plt+0xc100>
   1e838:	mov	r3, #2
   1e83c:	b	1e738 <__assert_fail@plt+0xc100>
   1e840:	mov	r3, #0
   1e844:	b	1e738 <__assert_fail@plt+0xc100>
   1e848:	push	{r4, r5, r6, r7, lr}
   1e84c:	movw	r4, #21904	; 0x5590
   1e850:	movt	r4, #4
   1e854:	sub	sp, sp, #124	; 0x7c
   1e858:	mov	r6, r2
   1e85c:	mov	r5, r1
   1e860:	ldr	r3, [r4]
   1e864:	mov	r7, r0
   1e868:	add	r0, sp, #8
   1e86c:	str	r3, [sp, #116]	; 0x74
   1e870:	bl	187ec <__assert_fail@plt+0x61b4>
   1e874:	mov	r1, r6
   1e878:	mov	r0, r5
   1e87c:	add	r2, sp, #8
   1e880:	add	r3, sp, #4
   1e884:	bl	1c5dc <__assert_fail@plt+0x9fa4>
   1e888:	subs	r6, r0, #0
   1e88c:	beq	1e8c8 <__assert_fail@plt+0xc290>
   1e890:	ldr	r1, [sp, #4]
   1e894:	mov	r0, r7
   1e898:	bl	18678 <__assert_fail@plt+0x6040>
   1e89c:	ldr	r2, [sp, #92]	; 0x5c
   1e8a0:	mov	r1, #3
   1e8a4:	mov	r3, #0
   1e8a8:	mov	r5, r0
   1e8ac:	ldr	r0, [sp, #88]	; 0x58
   1e8b0:	str	r1, [r5, #40]	; 0x28
   1e8b4:	str	r2, [r5, #52]	; 0x34
   1e8b8:	str	r0, [r5, #48]	; 0x30
   1e8bc:	str	r3, [r5, #44]	; 0x2c
   1e8c0:	bl	1e6a0 <__assert_fail@plt+0xc068>
   1e8c4:	vstr	s0, [r5, #28]
   1e8c8:	ldr	r2, [sp, #116]	; 0x74
   1e8cc:	mov	r0, r6
   1e8d0:	ldr	r3, [r4]
   1e8d4:	cmp	r2, r3
   1e8d8:	bne	1e8e4 <__assert_fail@plt+0xc2ac>
   1e8dc:	add	sp, sp, #124	; 0x7c
   1e8e0:	pop	{r4, r5, r6, r7, pc}
   1e8e4:	bl	120e0 <__stack_chk_fail@plt>
   1e8e8:	push	{r4, r5, r6, r7, lr}
   1e8ec:	movw	r4, #21904	; 0x5590
   1e8f0:	movt	r4, #4
   1e8f4:	sub	sp, sp, #124	; 0x7c
   1e8f8:	mov	r6, r2
   1e8fc:	mov	r5, r1
   1e900:	ldr	r3, [r4]
   1e904:	mov	r7, r0
   1e908:	add	r0, sp, #8
   1e90c:	str	r3, [sp, #116]	; 0x74
   1e910:	bl	187ec <__assert_fail@plt+0x61b4>
   1e914:	mov	r1, r6
   1e918:	mov	r0, r5
   1e91c:	add	r2, sp, #8
   1e920:	add	r3, sp, #4
   1e924:	bl	1c5dc <__assert_fail@plt+0x9fa4>
   1e928:	subs	r6, r0, #0
   1e92c:	beq	1e968 <__assert_fail@plt+0xc330>
   1e930:	ldr	r1, [sp, #4]
   1e934:	mov	r0, r7
   1e938:	bl	18678 <__assert_fail@plt+0x6040>
   1e93c:	mov	r3, #2
   1e940:	mov	r2, #0
   1e944:	str	r3, [r0, #40]	; 0x28
   1e948:	mov	r5, r0
   1e94c:	ldr	r3, [sp, #92]	; 0x5c
   1e950:	ldr	r0, [sp, #88]	; 0x58
   1e954:	str	r2, [r5, #44]	; 0x2c
   1e958:	str	r3, [r5, #52]	; 0x34
   1e95c:	str	r0, [r5, #48]	; 0x30
   1e960:	bl	1e6a0 <__assert_fail@plt+0xc068>
   1e964:	vstr	s0, [r5, #28]
   1e968:	ldr	r2, [sp, #116]	; 0x74
   1e96c:	mov	r0, r6
   1e970:	ldr	r3, [r4]
   1e974:	cmp	r2, r3
   1e978:	bne	1e984 <__assert_fail@plt+0xc34c>
   1e97c:	add	sp, sp, #124	; 0x7c
   1e980:	pop	{r4, r5, r6, r7, pc}
   1e984:	bl	120e0 <__stack_chk_fail@plt>
   1e988:	push	{r4, r5, r6, r7, lr}
   1e98c:	movw	r4, #21904	; 0x5590
   1e990:	movt	r4, #4
   1e994:	sub	sp, sp, #124	; 0x7c
   1e998:	mov	r6, r2
   1e99c:	mov	r5, r1
   1e9a0:	ldr	r3, [r4]
   1e9a4:	mov	r7, r0
   1e9a8:	add	r0, sp, #8
   1e9ac:	str	r3, [sp, #116]	; 0x74
   1e9b0:	bl	187ec <__assert_fail@plt+0x61b4>
   1e9b4:	mov	r1, r6
   1e9b8:	mov	r0, r5
   1e9bc:	add	r2, sp, #8
   1e9c0:	add	r3, sp, #4
   1e9c4:	bl	1c5dc <__assert_fail@plt+0x9fa4>
   1e9c8:	subs	r6, r0, #0
   1e9cc:	beq	1ea04 <__assert_fail@plt+0xc3cc>
   1e9d0:	ldr	r1, [sp, #4]
   1e9d4:	mov	r0, r7
   1e9d8:	bl	18678 <__assert_fail@plt+0x6040>
   1e9dc:	mov	r3, #0
   1e9e0:	str	r3, [r0, #40]	; 0x28
   1e9e4:	mov	r5, r0
   1e9e8:	ldr	r2, [sp, #92]	; 0x5c
   1e9ec:	ldr	r0, [sp, #88]	; 0x58
   1e9f0:	str	r3, [r5, #44]	; 0x2c
   1e9f4:	str	r2, [r5, #52]	; 0x34
   1e9f8:	str	r0, [r5, #48]	; 0x30
   1e9fc:	bl	1e6a0 <__assert_fail@plt+0xc068>
   1ea00:	vstr	s0, [r5, #28]
   1ea04:	ldr	r2, [sp, #116]	; 0x74
   1ea08:	mov	r0, r6
   1ea0c:	ldr	r3, [r4]
   1ea10:	cmp	r2, r3
   1ea14:	bne	1ea20 <__assert_fail@plt+0xc3e8>
   1ea18:	add	sp, sp, #124	; 0x7c
   1ea1c:	pop	{r4, r5, r6, r7, pc}
   1ea20:	bl	120e0 <__stack_chk_fail@plt>
   1ea24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea28:	movw	r6, #21904	; 0x5590
   1ea2c:	movt	r6, #4
   1ea30:	sub	sp, sp, #52	; 0x34
   1ea34:	mov	r8, r1
   1ea38:	mov	r7, r2
   1ea3c:	ldr	r3, [r6]
   1ea40:	mov	sl, r0
   1ea44:	movw	r1, #1884	; 0x75c
   1ea48:	mov	r0, #0
   1ea4c:	movt	r1, #3
   1ea50:	mov	r2, #5
   1ea54:	str	r3, [sp, #44]	; 0x2c
   1ea58:	bl	120d4 <dcgettext@plt>
   1ea5c:	cmp	r8, #0
   1ea60:	ldr	fp, [r7]
   1ea64:	mov	ip, r0
   1ea68:	beq	1eae0 <__assert_fail@plt+0xc4a8>
   1ea6c:	ldr	r5, [r8, fp, lsl #2]
   1ea70:	cmp	r5, #0
   1ea74:	moveq	r8, r5
   1ea78:	beq	1eae0 <__assert_fail@plt+0xc4a8>
   1ea7c:	movw	r4, #25384	; 0x6328
   1ea80:	movt	r4, #4
   1ea84:	add	r2, r4, #28
   1ea88:	add	r3, fp, #1
   1ea8c:	str	r3, [r7]
   1ea90:	add	r3, sp, #20
   1ea94:	ldrb	lr, [r5]
   1ea98:	ldm	r2, {r0, r1}
   1ea9c:	cmp	lr, #45	; 0x2d
   1eaa0:	mov	r2, r0
   1eaa4:	stm	r3, {r0, r1}
   1eaa8:	addeq	r2, r0, #86016	; 0x15000
   1eaac:	addeq	r2, r2, #380	; 0x17c
   1eab0:	addeq	r2, r2, #3
   1eab4:	add	r9, sp, #28
   1eab8:	str	r2, [sp, #20]
   1eabc:	str	ip, [sp]
   1eac0:	mov	r0, r5
   1eac4:	ldm	r3, {r2, r3}
   1eac8:	mov	r1, r9
   1eacc:	vldr	d0, [pc, #396]	; 1ec60 <__assert_fail@plt+0xc628>
   1ead0:	bl	1bd24 <__assert_fail@plt+0x96ec>
   1ead4:	subs	r8, r0, #0
   1ead8:	streq	fp, [r7]
   1eadc:	bne	1eafc <__assert_fail@plt+0xc4c4>
   1eae0:	ldr	r2, [sp, #44]	; 0x2c
   1eae4:	mov	r0, r8
   1eae8:	ldr	r3, [r6]
   1eaec:	cmp	r2, r3
   1eaf0:	bne	1ec5c <__assert_fail@plt+0xc624>
   1eaf4:	add	sp, sp, #52	; 0x34
   1eaf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eafc:	mov	r1, r5
   1eb00:	mov	r0, sl
   1eb04:	bl	18678 <__assert_fail@plt+0x6040>
   1eb08:	mov	r7, r0
   1eb0c:	add	ip, r7, #40	; 0x28
   1eb10:	ldm	r9, {r0, r1, r2, r3}
   1eb14:	stm	ip, {r0, r1, r2, r3}
   1eb18:	ldr	r0, [sp, #36]	; 0x24
   1eb1c:	bl	1e6a0 <__assert_fail@plt+0xc068>
   1eb20:	ldr	r3, [r4, #44]	; 0x2c
   1eb24:	tst	r3, #1
   1eb28:	vstr	s0, [r7, #28]
   1eb2c:	beq	1eae0 <__assert_fail@plt+0xc4a8>
   1eb30:	movw	r5, #21912	; 0x5598
   1eb34:	movt	r5, #4
   1eb38:	ldr	r3, [r7, #4]
   1eb3c:	movw	r2, #248	; 0xf8
   1eb40:	mov	r1, #1
   1eb44:	ldr	r0, [r5]
   1eb48:	movt	r2, #3
   1eb4c:	bl	12428 <__fprintf_chk@plt>
   1eb50:	ldr	r3, [sp, #32]
   1eb54:	ldr	r0, [r5]
   1eb58:	cmp	r3, #0
   1eb5c:	bne	1ec10 <__assert_fail@plt+0xc5d8>
   1eb60:	movw	r3, #228	; 0xe4
   1eb64:	movw	r2, #232	; 0xe8
   1eb68:	movt	r3, #3
   1eb6c:	movt	r2, #3
   1eb70:	mov	r1, #1
   1eb74:	str	r2, [sp]
   1eb78:	movw	r2, #264	; 0x108
   1eb7c:	movt	r2, #3
   1eb80:	bl	12428 <__fprintf_chk@plt>
   1eb84:	ldr	r4, [r7, #48]	; 0x30
   1eb88:	add	r9, sp, #48	; 0x30
   1eb8c:	ldr	fp, [r5]
   1eb90:	movw	sl, #21912	; 0x5598
   1eb94:	movt	sl, #4
   1eb98:	str	r4, [r9, #-32]!	; 0xffffffe0
   1eb9c:	mov	r0, r9
   1eba0:	bl	120c8 <ctime@plt>
   1eba4:	asr	r5, r4, #31
   1eba8:	movw	r2, #3060	; 0xbf4
   1ebac:	strd	r4, [sp]
   1ebb0:	movt	r2, #3
   1ebb4:	mov	r1, #1
   1ebb8:	str	r0, [sp, #8]
   1ebbc:	mov	r0, fp
   1ebc0:	bl	12428 <__fprintf_chk@plt>
   1ebc4:	ldr	r3, [sp, #32]
   1ebc8:	cmp	r3, #2
   1ebcc:	bne	1eae0 <__assert_fail@plt+0xc4a8>
   1ebd0:	ldr	r4, [r7, #48]	; 0x30
   1ebd4:	mov	r0, r9
   1ebd8:	ldr	r7, [sl]
   1ebdc:	add	r4, r4, #86016	; 0x15000
   1ebe0:	add	r4, r4, #384	; 0x180
   1ebe4:	str	r4, [sp, #16]
   1ebe8:	bl	120c8 <ctime@plt>
   1ebec:	movw	r2, #3040	; 0xbe0
   1ebf0:	asr	r5, r4, #31
   1ebf4:	movt	r2, #3
   1ebf8:	strd	r4, [sp]
   1ebfc:	mov	r1, #1
   1ec00:	str	r0, [sp, #8]
   1ec04:	mov	r0, r7
   1ec08:	bl	12428 <__fprintf_chk@plt>
   1ec0c:	b	1eae0 <__assert_fail@plt+0xc4a8>
   1ec10:	cmp	r3, #1
   1ec14:	beq	1ec48 <__assert_fail@plt+0xc610>
   1ec18:	cmp	r3, #2
   1ec1c:	movw	ip, #61716	; 0xf114
   1ec20:	movw	r3, #240	; 0xf0
   1ec24:	movt	ip, #2
   1ec28:	movt	r3, #3
   1ec2c:	movw	r1, #236	; 0xec
   1ec30:	movw	r2, #3036	; 0xbdc
   1ec34:	movt	r1, #3
   1ec38:	movt	r2, #3
   1ec3c:	movne	r3, ip
   1ec40:	movne	r2, r1
   1ec44:	b	1eb70 <__assert_fail@plt+0xc538>
   1ec48:	movw	r3, #220	; 0xdc
   1ec4c:	movw	r2, #224	; 0xe0
   1ec50:	movt	r3, #3
   1ec54:	movt	r2, #3
   1ec58:	b	1eb70 <__assert_fail@plt+0xc538>
   1ec5c:	bl	120e0 <__stack_chk_fail@plt>
   1ec60:	andeq	r0, r0, r0
   1ec64:	rscsmi	r1, r5, r0, lsl #16
   1ec68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec6c:	movw	r4, #21904	; 0x5590
   1ec70:	movt	r4, #4
   1ec74:	sub	sp, sp, #132	; 0x84
   1ec78:	subs	r6, r1, #0
   1ec7c:	mov	sl, r0
   1ec80:	ldr	r3, [r4]
   1ec84:	mov	r8, r2
   1ec88:	str	r3, [sp, #124]	; 0x7c
   1ec8c:	beq	1ee68 <__assert_fail@plt+0xc830>
   1ec90:	ldr	r7, [r2]
   1ec94:	ldr	r5, [r6, r7, lsl #2]
   1ec98:	add	fp, r6, r7, lsl #2
   1ec9c:	cmp	r5, #0
   1eca0:	beq	1ee70 <__assert_fail@plt+0xc838>
   1eca4:	mov	r0, r5
   1eca8:	bl	1232c <strlen@plt>
   1ecac:	cmp	r0, #8
   1ecb0:	movne	ip, #0
   1ecb4:	beq	1ecd4 <__assert_fail@plt+0xc69c>
   1ecb8:	ldr	r2, [sp, #124]	; 0x7c
   1ecbc:	mov	r0, ip
   1ecc0:	ldr	r3, [r4]
   1ecc4:	cmp	r2, r3
   1ecc8:	bne	1f07c <__assert_fail@plt+0xca44>
   1eccc:	add	sp, sp, #132	; 0x84
   1ecd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecd4:	movw	r3, #6136	; 0x17f8
   1ecd8:	movt	r3, #3
   1ecdc:	mov	r2, #6
   1ece0:	ldm	r3, {r0, r1}
   1ece4:	str	r0, [sp, #116]	; 0x74
   1ece8:	movw	r0, #3068	; 0xbfc
   1ecec:	strh	r1, [sp, #120]	; 0x78
   1ecf0:	movt	r0, #3
   1ecf4:	mov	r1, r5
   1ecf8:	bl	125b4 <strncmp@plt>
   1ecfc:	subs	r3, r0, #0
   1ed00:	bne	1f080 <__assert_fail@plt+0xca48>
   1ed04:	ldrb	r9, [r5, #6]
   1ed08:	ldrb	r5, [r5, #7]
   1ed0c:	cmp	r9, #66	; 0x42
   1ed10:	cmpne	r5, #66	; 0x42
   1ed14:	movne	ip, #0
   1ed18:	moveq	ip, #1
   1ed1c:	beq	1ee78 <__assert_fail@plt+0xc840>
   1ed20:	cmp	r9, #116	; 0x74
   1ed24:	beq	1ecb8 <__assert_fail@plt+0xc680>
   1ed28:	mov	r1, r9
   1ed2c:	add	r0, sp, #116	; 0x74
   1ed30:	str	ip, [sp]
   1ed34:	bl	12338 <strchr@plt>
   1ed38:	ldr	ip, [sp]
   1ed3c:	cmp	r0, #0
   1ed40:	beq	1ecb8 <__assert_fail@plt+0xc680>
   1ed44:	add	r0, sp, #116	; 0x74
   1ed48:	mov	r1, r5
   1ed4c:	bl	12338 <strchr@plt>
   1ed50:	ldr	ip, [sp]
   1ed54:	cmp	r0, #0
   1ed58:	beq	1ecb8 <__assert_fail@plt+0xc680>
   1ed5c:	ldr	fp, [fp, #4]
   1ed60:	add	r7, r7, #1
   1ed64:	cmp	fp, #0
   1ed68:	strne	r7, [r8]
   1ed6c:	beq	1efe0 <__assert_fail@plt+0xc9a8>
   1ed70:	mov	r0, sl
   1ed74:	mov	r1, fp
   1ed78:	bl	18678 <__assert_fail@plt+0x6040>
   1ed7c:	cmp	r9, #97	; 0x61
   1ed80:	mov	r7, r0
   1ed84:	beq	1ef1c <__assert_fail@plt+0xc8e4>
   1ed88:	bls	1eeb8 <__assert_fail@plt+0xc880>
   1ed8c:	cmp	r9, #99	; 0x63
   1ed90:	beq	1eeac <__assert_fail@plt+0xc874>
   1ed94:	cmp	r9, #109	; 0x6d
   1ed98:	moveq	r3, #3
   1ed9c:	streq	r3, [r0, #40]	; 0x28
   1eda0:	bne	1eec8 <__assert_fail@plt+0xc890>
   1eda4:	cmp	r5, #116	; 0x74
   1eda8:	beq	1eef8 <__assert_fail@plt+0xc8c0>
   1edac:	add	r0, sp, #8
   1edb0:	bl	187ec <__assert_fail@plt+0x61b4>
   1edb4:	ldr	r2, [r8]
   1edb8:	movw	r3, #25384	; 0x6328
   1edbc:	movt	r3, #4
   1edc0:	add	r1, sp, #8
   1edc4:	ldr	r3, [r3, #52]	; 0x34
   1edc8:	ldr	r0, [r6, r2, lsl #2]
   1edcc:	blx	r3
   1edd0:	subs	r9, r0, #0
   1edd4:	bne	1f0d4 <__assert_fail@plt+0xca9c>
   1edd8:	cmp	r5, #97	; 0x61
   1eddc:	beq	1efac <__assert_fail@plt+0xc974>
   1ede0:	bls	1ef28 <__assert_fail@plt+0xc8f0>
   1ede4:	cmp	r5, #99	; 0x63
   1ede8:	beq	1ef78 <__assert_fail@plt+0xc940>
   1edec:	cmp	r5, #109	; 0x6d
   1edf0:	bne	1ef90 <__assert_fail@plt+0xc958>
   1edf4:	ldr	r3, [sp, #88]	; 0x58
   1edf8:	ldr	r2, [sp, #92]	; 0x5c
   1edfc:	mov	r0, r3
   1ee00:	str	r3, [r7, #48]	; 0x30
   1ee04:	str	r2, [r7, #52]	; 0x34
   1ee08:	mov	r3, #0
   1ee0c:	str	r3, [r7, #44]	; 0x2c
   1ee10:	bl	1e6a0 <__assert_fail@plt+0xc068>
   1ee14:	ldr	r2, [r7]
   1ee18:	ldr	r3, [r8]
   1ee1c:	cmp	r2, #0
   1ee20:	add	r3, r3, #1
   1ee24:	vstr	s0, [r7, #28]
   1ee28:	str	r3, [r8]
   1ee2c:	beq	1f0b8 <__assert_fail@plt+0xca80>
   1ee30:	movw	r3, #19772	; 0x4d3c
   1ee34:	movt	r3, #1
   1ee38:	cmp	r2, r3
   1ee3c:	bne	1f09c <__assert_fail@plt+0xca64>
   1ee40:	ldrb	ip, [r7, #18]
   1ee44:	cmp	ip, #0
   1ee48:	bne	1ecb8 <__assert_fail@plt+0xc680>
   1ee4c:	movw	r0, #6116	; 0x17e4
   1ee50:	movw	r1, #116	; 0x74
   1ee54:	movt	r0, #3
   1ee58:	movt	r1, #3
   1ee5c:	movw	r2, #1699	; 0x6a3
   1ee60:	ldr	r3, [pc, #640]	; 1f0e8 <__assert_fail@plt+0xcab0>
   1ee64:	bl	12638 <__assert_fail@plt>
   1ee68:	mov	ip, r6
   1ee6c:	b	1ecb8 <__assert_fail@plt+0xc680>
   1ee70:	mov	ip, r5
   1ee74:	b	1ecb8 <__assert_fail@plt+0xc680>
   1ee78:	mov	r2, #5
   1ee7c:	movw	r1, #5672	; 0x1628
   1ee80:	movt	r1, #3
   1ee84:	str	r3, [sp, #4]
   1ee88:	str	r3, [sp]
   1ee8c:	bl	120d4 <dcgettext@plt>
   1ee90:	ldr	r3, [sp, #4]
   1ee94:	mov	r1, r3
   1ee98:	mov	r2, r0
   1ee9c:	mov	r0, r3
   1eea0:	bl	12224 <error@plt>
   1eea4:	ldr	ip, [sp]
   1eea8:	b	1ecb8 <__assert_fail@plt+0xc680>
   1eeac:	mov	r3, #2
   1eeb0:	str	r3, [r0, #40]	; 0x28
   1eeb4:	b	1eda4 <__assert_fail@plt+0xc76c>
   1eeb8:	cmp	r9, #66	; 0x42
   1eebc:	moveq	r3, #1
   1eec0:	streq	r3, [r0, #40]	; 0x28
   1eec4:	beq	1eda4 <__assert_fail@plt+0xc76c>
   1eec8:	add	r0, sp, #116	; 0x74
   1eecc:	mov	r1, r9
   1eed0:	bl	12338 <strchr@plt>
   1eed4:	cmp	r0, #0
   1eed8:	bne	1efc4 <__assert_fail@plt+0xc98c>
   1eedc:	movw	r0, #5776	; 0x1690
   1eee0:	movw	r1, #116	; 0x74
   1eee4:	movt	r0, #3
   1eee8:	movt	r1, #3
   1eeec:	movw	r2, #1661	; 0x67d
   1eef0:	ldr	r3, [pc, #496]	; 1f0e8 <__assert_fail@plt+0xcab0>
   1eef4:	bl	12638 <__assert_fail@plt>
   1eef8:	ldr	r3, [r8]
   1eefc:	add	r0, r7, #48	; 0x30
   1ef00:	ldr	r2, [pc, #484]	; 1f0ec <__assert_fail@plt+0xcab4>
   1ef04:	ldr	r1, [r6, r3, lsl #2]
   1ef08:	bl	26fd4 <__assert_fail@plt+0x1499c>
   1ef0c:	subs	r5, r0, #0
   1ef10:	beq	1f034 <__assert_fail@plt+0xc9fc>
   1ef14:	ldr	r0, [r7, #48]	; 0x30
   1ef18:	b	1ee08 <__assert_fail@plt+0xc7d0>
   1ef1c:	mov	r3, #0
   1ef20:	str	r3, [r0, #40]	; 0x28
   1ef24:	b	1eda4 <__assert_fail@plt+0xc76c>
   1ef28:	cmp	r5, #66	; 0x42
   1ef2c:	bne	1ef90 <__assert_fail@plt+0xc958>
   1ef30:	mvn	r3, #0
   1ef34:	mov	r2, #5
   1ef38:	str	r3, [r7, #48]	; 0x30
   1ef3c:	movw	r1, #6008	; 0x1778
   1ef40:	str	r3, [r7, #52]	; 0x34
   1ef44:	movt	r1, #3
   1ef48:	bl	120d4 <dcgettext@plt>
   1ef4c:	ldr	r3, [r8]
   1ef50:	ldr	r1, [r6, r3, lsl #2]
   1ef54:	mov	r5, r0
   1ef58:	mov	r0, r9
   1ef5c:	bl	19778 <__assert_fail@plt+0x7140>
   1ef60:	mov	r2, r5
   1ef64:	mov	r1, r9
   1ef68:	mov	r3, r0
   1ef6c:	mov	r0, #1
   1ef70:	bl	12224 <error@plt>
   1ef74:	b	1ef14 <__assert_fail@plt+0xc8dc>
   1ef78:	ldr	r3, [sp, #96]	; 0x60
   1ef7c:	ldr	r2, [sp, #100]	; 0x64
   1ef80:	mov	r0, r3
   1ef84:	str	r3, [r7, #48]	; 0x30
   1ef88:	str	r2, [r7, #52]	; 0x34
   1ef8c:	b	1ee08 <__assert_fail@plt+0xc7d0>
   1ef90:	movw	r0, #55804	; 0xd9fc
   1ef94:	movw	r1, #116	; 0x74
   1ef98:	movt	r0, #2
   1ef9c:	movt	r1, #3
   1efa0:	movw	r2, #501	; 0x1f5
   1efa4:	ldr	r3, [pc, #324]	; 1f0f0 <__assert_fail@plt+0xcab8>
   1efa8:	bl	12638 <__assert_fail@plt>
   1efac:	ldr	r3, [sp, #80]	; 0x50
   1efb0:	ldr	r2, [sp, #84]	; 0x54
   1efb4:	mov	r0, r3
   1efb8:	str	r3, [r7, #48]	; 0x30
   1efbc:	str	r2, [r7, #52]	; 0x34
   1efc0:	b	1ee08 <__assert_fail@plt+0xc7d0>
   1efc4:	movw	r0, #55804	; 0xd9fc
   1efc8:	movw	r1, #116	; 0x74
   1efcc:	movt	r0, #2
   1efd0:	movt	r1, #3
   1efd4:	movw	r2, #1662	; 0x67e
   1efd8:	ldr	r3, [pc, #264]	; 1f0e8 <__assert_fail@plt+0xcab0>
   1efdc:	bl	12638 <__assert_fail@plt>
   1efe0:	mov	r0, fp
   1efe4:	mov	r2, #5
   1efe8:	movw	r1, #5744	; 0x1670
   1efec:	movt	r1, #3
   1eff0:	bl	120d4 <dcgettext@plt>
   1eff4:	ldr	r2, [r8]
   1eff8:	movw	r3, #25384	; 0x6328
   1effc:	movt	r3, #4
   1f000:	ldr	r2, [r6, r2, lsl #2]
   1f004:	ldr	r1, [r3, #72]	; 0x48
   1f008:	mov	r7, r0
   1f00c:	mov	r0, fp
   1f010:	bl	28cec <__assert_fail@plt+0x166b4>
   1f014:	mov	r1, fp
   1f018:	mov	r2, r7
   1f01c:	mov	r3, r0
   1f020:	mov	r0, #1
   1f024:	bl	12224 <error@plt>
   1f028:	ldr	r3, [r8]
   1f02c:	ldr	fp, [r6, r3, lsl #2]
   1f030:	b	1ed70 <__assert_fail@plt+0xc738>
   1f034:	mov	r2, #5
   1f038:	movw	r1, #5948	; 0x173c
   1f03c:	movt	r1, #3
   1f040:	bl	120d4 <dcgettext@plt>
   1f044:	ldr	r3, [r8]
   1f048:	ldr	r2, [pc, #164]	; 1f0f4 <__assert_fail@plt+0xcabc>
   1f04c:	ldr	r1, [r2, #72]	; 0x48
   1f050:	ldr	r2, [r6, r3, lsl #2]
   1f054:	mov	r9, r0
   1f058:	mov	r0, r5
   1f05c:	bl	28cec <__assert_fail@plt+0x166b4>
   1f060:	mov	r2, r9
   1f064:	mov	r1, r5
   1f068:	mov	r3, r0
   1f06c:	mov	r0, #1
   1f070:	bl	12224 <error@plt>
   1f074:	ldr	r0, [r7, #48]	; 0x30
   1f078:	b	1ee08 <__assert_fail@plt+0xc7d0>
   1f07c:	bl	120e0 <__stack_chk_fail@plt>
   1f080:	movw	r0, #3076	; 0xc04
   1f084:	movw	r1, #116	; 0x74
   1f088:	movt	r0, #3
   1f08c:	movt	r1, #3
   1f090:	movw	r2, #1605	; 0x645
   1f094:	ldr	r3, [pc, #76]	; 1f0e8 <__assert_fail@plt+0xcab0>
   1f098:	bl	12638 <__assert_fail@plt>
   1f09c:	movw	r0, #6080	; 0x17c0
   1f0a0:	movw	r1, #116	; 0x74
   1f0a4:	movt	r0, #3
   1f0a8:	movt	r1, #3
   1f0ac:	movw	r2, #1698	; 0x6a2
   1f0b0:	ldr	r3, [pc, #48]	; 1f0e8 <__assert_fail@plt+0xcab0>
   1f0b4:	bl	12638 <__assert_fail@plt>
   1f0b8:	movw	r0, #6044	; 0x179c
   1f0bc:	movw	r1, #116	; 0x74
   1f0c0:	movt	r0, #3
   1f0c4:	movt	r1, #3
   1f0c8:	movw	r2, #1697	; 0x6a1
   1f0cc:	ldr	r3, [pc, #20]	; 1f0e8 <__assert_fail@plt+0xcab0>
   1f0d0:	bl	12638 <__assert_fail@plt>
   1f0d4:	bl	1238c <__errno_location@plt>
   1f0d8:	ldr	r3, [r8]
   1f0dc:	ldr	r1, [r6, r3, lsl #2]
   1f0e0:	ldr	r0, [r0]
   1f0e4:	bl	197b8 <__assert_fail@plt+0x7180>
   1f0e8:			; <UNDEFINED> instruction: 0x0002f8b0
   1f0ec:	andeq	r6, r4, ip, lsr r3
   1f0f0:	andeq	pc, r2, r0, asr #17
   1f0f4:	andeq	r6, r4, r8, lsr #6
   1f0f8:	push	{r4, lr}
   1f0fc:	bl	186d0 <__assert_fail@plt+0x6098>
   1f100:	mov	r4, r0
   1f104:	movw	r0, #324	; 0x144
   1f108:	add	r1, r4, #40	; 0x28
   1f10c:	movt	r0, #3
   1f110:	bl	1c808 <__assert_fail@plt+0xa1d0>
   1f114:	mov	r0, #1
   1f118:	mov	r3, #1065353216	; 0x3f800000
   1f11c:	strb	r0, [r4, #17]
   1f120:	strb	r0, [r4, #16]
   1f124:	str	r3, [r4, #28]
   1f128:	pop	{r4, pc}
   1f12c:	push	{r3, r4, r5, r6, r7, lr}
   1f130:	mov	r7, r0
   1f134:	mov	r6, r1
   1f138:	mov	r5, r2
   1f13c:	bl	2ad84 <__assert_fail@plt+0x1874c>
   1f140:	subs	r4, r0, #0
   1f144:	bne	1f150 <__assert_fail@plt+0xcb18>
   1f148:	mov	r0, r4
   1f14c:	pop	{r3, r4, r5, r6, r7, pc}
   1f150:	bl	1238c <__errno_location@plt>
   1f154:	ldr	r3, [r0]
   1f158:	cmp	r3, #2
   1f15c:	beq	1f168 <__assert_fail@plt+0xcb30>
   1f160:	cmp	r3, #20
   1f164:	bne	1f148 <__assert_fail@plt+0xcb10>
   1f168:	mov	r0, r7
   1f16c:	mov	r1, r6
   1f170:	mov	r2, r5
   1f174:	pop	{r3, r4, r5, r6, r7, lr}
   1f178:	b	2af54 <__assert_fail@plt+0x1891c>
   1f17c:	push	{r4, lr}
   1f180:	subs	r4, r0, #0
   1f184:	popeq	{r4, pc}
   1f188:	movw	r2, #18084	; 0x46a4
   1f18c:	movw	r1, #17316	; 0x43a4
   1f190:	movt	r2, #1
   1f194:	movt	r1, #1
   1f198:	mov	r0, #0
   1f19c:	ldr	r3, [r4]
   1f1a0:	cmp	r3, r2
   1f1a4:	orreq	r0, r0, #1
   1f1a8:	beq	1f1b4 <__assert_fail@plt+0xcb7c>
   1f1ac:	cmp	r3, r1
   1f1b0:	orreq	r0, r0, #2
   1f1b4:	ldr	r4, [r4, #152]	; 0x98
   1f1b8:	cmp	r4, #0
   1f1bc:	bne	1f19c <__assert_fail@plt+0xcb64>
   1f1c0:	and	r0, r0, #3
   1f1c4:	cmp	r0, #3
   1f1c8:	popne	{r4, pc}
   1f1cc:	movw	r3, #25384	; 0x6328
   1f1d0:	movt	r3, #4
   1f1d4:	ldrb	r3, [r3, #1]
   1f1d8:	cmp	r3, #0
   1f1dc:	popne	{r4, pc}
   1f1e0:	mov	r0, r4
   1f1e4:	mov	r2, #5
   1f1e8:	movw	r1, #6144	; 0x1800
   1f1ec:	movt	r1, #3
   1f1f0:	bl	120d4 <dcgettext@plt>
   1f1f4:	mov	r1, r4
   1f1f8:	pop	{r4, lr}
   1f1fc:	mov	r2, r0
   1f200:	mov	r0, #1
   1f204:	b	12224 <error@plt>
   1f208:	movw	r3, #25384	; 0x6328
   1f20c:	movt	r3, #4
   1f210:	ldr	r2, [r3, #44]	; 0x2c
   1f214:	tst	r2, #2
   1f218:	bne	1f258 <__assert_fail@plt+0xcc20>
   1f21c:	cmp	r0, #1
   1f220:	beq	1f26c <__assert_fail@plt+0xcc34>
   1f224:	bcc	1f290 <__assert_fail@plt+0xcc58>
   1f228:	cmp	r0, #2
   1f22c:	bne	1f250 <__assert_fail@plt+0xcc18>
   1f230:	movw	r1, #35980	; 0x8c8c
   1f234:	movw	r2, #56160	; 0xdb60
   1f238:	movt	r1, #1
   1f23c:	movt	r2, #1
   1f240:	str	r1, [r3, #52]	; 0x34
   1f244:	mov	r1, #1
   1f248:	str	r2, [r3, #64]	; 0x40
   1f24c:	strb	r1, [r3, #12]
   1f250:	str	r0, [r3, #48]	; 0x30
   1f254:	bx	lr
   1f258:	movw	r2, #36444	; 0x8e5c
   1f25c:	str	r0, [r3, #48]	; 0x30
   1f260:	movt	r2, #1
   1f264:	str	r2, [r3, #52]	; 0x34
   1f268:	bx	lr
   1f26c:	movw	r1, #36180	; 0x8d54
   1f270:	movw	r2, #61740	; 0xf12c
   1f274:	movt	r1, #1
   1f278:	movt	r2, #1
   1f27c:	strb	r0, [r3, #12]
   1f280:	str	r1, [r3, #52]	; 0x34
   1f284:	str	r2, [r3, #64]	; 0x40
   1f288:	str	r0, [r3, #48]	; 0x30
   1f28c:	bx	lr
   1f290:	movw	r1, #36344	; 0x8df8
   1f294:	movw	r2, #46712	; 0xb678
   1f298:	movt	r1, #1
   1f29c:	movt	r2, #1
   1f2a0:	str	r1, [r3, #52]	; 0x34
   1f2a4:	str	r2, [r3, #64]	; 0x40
   1f2a8:	str	r0, [r3, #48]	; 0x30
   1f2ac:	bx	lr
   1f2b0:	push	{r3, lr}
   1f2b4:	mov	r0, #1
   1f2b8:	bl	1f208 <__assert_fail@plt+0xcbd0>
   1f2bc:	pop	{r3, lr}
   1f2c0:	b	1dbd0 <__assert_fail@plt+0xb598>
   1f2c4:	movw	r3, #23936	; 0x5d80
   1f2c8:	movt	r3, #4
   1f2cc:	mov	r2, #0
   1f2d0:	str	r2, [r3]
   1f2d4:	bx	lr
   1f2d8:	bx	lr
   1f2dc:	push	{r4, r5, r6, r7, r8, lr}
   1f2e0:	mov	r1, r0
   1f2e4:	mov	r7, r0
   1f2e8:	mov	r2, #6
   1f2ec:	movw	r0, #3068	; 0xbfc
   1f2f0:	movt	r0, #3
   1f2f4:	bl	125b4 <strncmp@plt>
   1f2f8:	cmp	r0, #0
   1f2fc:	bne	1f310 <__assert_fail@plt+0xccd8>
   1f300:	mov	r0, r7
   1f304:	bl	1232c <strlen@plt>
   1f308:	cmp	r0, #8
   1f30c:	beq	1f370 <__assert_fail@plt+0xcd38>
   1f310:	ldrb	r3, [r7]
   1f314:	cmp	r3, #45	; 0x2d
   1f318:	addeq	r6, r7, #1
   1f31c:	movne	r6, r7
   1f320:	ldr	r8, [pc, #88]	; 1f380 <__assert_fail@plt+0xcd48>
   1f324:	movw	r0, #57544	; 0xe0c8
   1f328:	mov	r5, #0
   1f32c:	movt	r0, #2
   1f330:	mov	r4, r8
   1f334:	b	1f348 <__assert_fail@plt+0xcd10>
   1f338:	ldr	r0, [r4, #4]
   1f33c:	add	r5, r5, #1
   1f340:	cmp	r0, #0
   1f344:	beq	1f36c <__assert_fail@plt+0xcd34>
   1f348:	mov	r1, r6
   1f34c:	add	r4, r4, #16
   1f350:	bl	11fb4 <strcmp@plt>
   1f354:	cmp	r0, #0
   1f358:	bne	1f338 <__assert_fail@plt+0xcd00>
   1f35c:	mov	r0, r7
   1f360:	add	r1, r8, r5, lsl #4
   1f364:	pop	{r4, r5, r6, r7, r8, lr}
   1f368:	b	1daa8 <__assert_fail@plt+0xb470>
   1f36c:	pop	{r4, r5, r6, r7, r8, pc}
   1f370:	mov	r0, r7
   1f374:	ldr	r1, [pc, #8]	; 1f384 <__assert_fail@plt+0xcd4c>
   1f378:	pop	{r4, r5, r6, r7, r8, lr}
   1f37c:	b	1daa8 <__assert_fail@plt+0xb470>
   1f380:	andeq	pc, r2, r0, asr #6
   1f384:	ldrdeq	pc, [r2], -r0
   1f388:	push	{r3, lr}
   1f38c:	movw	r0, #6316	; 0x18ac
   1f390:	movt	r0, #3
   1f394:	bl	1f2dc <__assert_fail@plt+0xcca4>
   1f398:	bl	186d0 <__assert_fail@plt+0x6098>
   1f39c:	mov	r2, #0
   1f3a0:	mov	r1, #0
   1f3a4:	mov	r3, r0
   1f3a8:	str	r1, [r0, #28]
   1f3ac:	strb	r2, [r0, #19]
   1f3b0:	strb	r2, [r0, #18]
   1f3b4:	mov	r0, #1
   1f3b8:	strb	r2, [r3, #17]
   1f3bc:	strb	r2, [r3, #16]
   1f3c0:	pop	{r3, pc}
   1f3c4:	b	1f388 <__assert_fail@plt+0xcd50>
   1f3c8:	push	{r4, r5, r6, r7, r8, lr}
   1f3cc:	movw	r6, #21904	; 0x5590
   1f3d0:	movt	r6, #4
   1f3d4:	sub	sp, sp, #112	; 0x70
   1f3d8:	cmp	r1, #0
   1f3dc:	mov	r8, r0
   1f3e0:	ldr	r3, [r6]
   1f3e4:	moveq	r0, r1
   1f3e8:	str	r3, [sp, #108]	; 0x6c
   1f3ec:	beq	1f48c <__assert_fail@plt+0xce54>
   1f3f0:	ldr	r3, [r2]
   1f3f4:	ldr	r5, [r1, r3, lsl #2]
   1f3f8:	cmp	r5, #0
   1f3fc:	moveq	r0, r5
   1f400:	beq	1f48c <__assert_fail@plt+0xce54>
   1f404:	movw	r7, #25384	; 0x6328
   1f408:	movt	r7, #4
   1f40c:	add	r3, r3, #1
   1f410:	str	r3, [r2]
   1f414:	ldrh	r3, [r7, #68]	; 0x44
   1f418:	cmp	r3, #1
   1f41c:	bls	1f4c8 <__assert_fail@plt+0xce90>
   1f420:	ldrb	r3, [r5]
   1f424:	cmp	r3, #97	; 0x61
   1f428:	beq	1f4a4 <__assert_fail@plt+0xce6c>
   1f42c:	mov	r0, #0
   1f430:	bl	2aaf8 <__assert_fail@plt+0x184c0>
   1f434:	subs	r4, r0, #0
   1f438:	beq	1f4c8 <__assert_fail@plt+0xce90>
   1f43c:	mov	r0, r5
   1f440:	ldr	r1, [r4, #8]
   1f444:	bl	11fb4 <strcmp@plt>
   1f448:	cmp	r0, #0
   1f44c:	beq	1f4c8 <__assert_fail@plt+0xce90>
   1f450:	ldr	r4, [r4, #28]
   1f454:	cmp	r4, #0
   1f458:	bne	1f43c <__assert_fail@plt+0xce04>
   1f45c:	ldr	r3, [r7, #44]	; 0x2c
   1f460:	tst	r3, #8
   1f464:	beq	1f488 <__assert_fail@plt+0xce50>
   1f468:	movw	r1, #21912	; 0x5598
   1f46c:	movt	r1, #4
   1f470:	movw	r2, #6328	; 0x18b8
   1f474:	mov	r3, r5
   1f478:	ldr	r0, [r1]
   1f47c:	movt	r2, #3
   1f480:	mov	r1, #1
   1f484:	bl	12428 <__fprintf_chk@plt>
   1f488:	bl	1f388 <__assert_fail@plt+0xcd50>
   1f48c:	ldr	r2, [sp, #108]	; 0x6c
   1f490:	ldr	r3, [r6]
   1f494:	cmp	r2, r3
   1f498:	bne	1f53c <__assert_fail@plt+0xcf04>
   1f49c:	add	sp, sp, #112	; 0x70
   1f4a0:	pop	{r4, r5, r6, r7, r8, pc}
   1f4a4:	ldrb	r3, [r5, #1]
   1f4a8:	cmp	r3, #102	; 0x66
   1f4ac:	bne	1f42c <__assert_fail@plt+0xcdf4>
   1f4b0:	ldrb	r3, [r5, #2]
   1f4b4:	cmp	r3, #115	; 0x73
   1f4b8:	bne	1f42c <__assert_fail@plt+0xcdf4>
   1f4bc:	ldrb	r3, [r5, #3]
   1f4c0:	cmp	r3, #0
   1f4c4:	bne	1f42c <__assert_fail@plt+0xcdf4>
   1f4c8:	mov	r1, r5
   1f4cc:	mov	r0, r8
   1f4d0:	bl	18678 <__assert_fail@plt+0x6040>
   1f4d4:	mov	r2, sp
   1f4d8:	movw	r1, #6324	; 0x18b4
   1f4dc:	movt	r1, #3
   1f4e0:	mov	r4, r0
   1f4e4:	mov	r0, #3
   1f4e8:	str	r5, [r4, #40]	; 0x28
   1f4ec:	bl	12578 <__xstat64@plt>
   1f4f0:	cmp	r0, #0
   1f4f4:	vmovne.f32	s15, #112	; 0x3f800000  1.0
   1f4f8:	vstrne	s15, [r4, #28]
   1f4fc:	movne	r0, #1
   1f500:	bne	1f48c <__assert_fail@plt+0xce54>
   1f504:	mov	r0, sp
   1f508:	movw	r1, #6324	; 0x18b4
   1f50c:	movt	r1, #3
   1f510:	bl	13dbc <__assert_fail@plt+0x1784>
   1f514:	mov	r1, r0
   1f518:	mov	r0, r5
   1f51c:	bl	11fb4 <strcmp@plt>
   1f520:	vldr	s14, [pc, #24]	; 1f540 <__assert_fail@plt+0xcf08>
   1f524:	vldr	s15, [pc, #24]	; 1f544 <__assert_fail@plt+0xcf0c>
   1f528:	cmp	r0, #0
   1f52c:	mov	r0, #1
   1f530:	vmovne.f32	s15, s14
   1f534:	vstr	s15, [r4, #28]
   1f538:	b	1f48c <__assert_fail@plt+0xce54>
   1f53c:	bl	120e0 <__stack_chk_fail@plt>
   1f540:			; <UNDEFINED> instruction: 0x3e99999a
   1f544:	svccc	0x00333333
   1f548:	movw	r3, #21912	; 0x5598
   1f54c:	movt	r3, #4
   1f550:	push	{r4, r5, r6, r7, r8, lr}
   1f554:	mov	r5, r0
   1f558:	sub	sp, sp, #16
   1f55c:	ldr	r0, [r3]
   1f560:	bl	2a9b0 <__assert_fail@plt+0x18378>
   1f564:	movw	ip, #21920	; 0x55a0
   1f568:	movw	r3, #21660	; 0x549c
   1f56c:	movt	ip, #4
   1f570:	movt	r3, #4
   1f574:	mov	r2, #5
   1f578:	movw	r1, #6932	; 0x1b14
   1f57c:	mov	r0, #0
   1f580:	movt	r1, #3
   1f584:	ldr	r4, [ip]
   1f588:	ldr	r7, [r3]
   1f58c:	bl	120d4 <dcgettext@plt>
   1f590:	mov	r2, #5
   1f594:	movw	r1, #6948	; 0x1b24
   1f598:	movt	r1, #3
   1f59c:	mov	r8, r0
   1f5a0:	mov	r0, #0
   1f5a4:	bl	120d4 <dcgettext@plt>
   1f5a8:	mov	r2, #5
   1f5ac:	movw	r1, #6964	; 0x1b34
   1f5b0:	movt	r1, #3
   1f5b4:	mov	r6, r0
   1f5b8:	mov	r0, #0
   1f5bc:	bl	120d4 <dcgettext@plt>
   1f5c0:	mov	ip, #0
   1f5c4:	str	r8, [sp]
   1f5c8:	mov	r3, r7
   1f5cc:	str	r6, [sp, #4]
   1f5d0:	mov	r1, r5
   1f5d4:	str	ip, [sp, #12]
   1f5d8:	movw	r2, #6980	; 0x1b44
   1f5dc:	movt	r2, #3
   1f5e0:	str	r0, [sp, #8]
   1f5e4:	mov	r0, r4
   1f5e8:	bl	2952c <__assert_fail@plt+0x16ef4>
   1f5ec:	add	sp, sp, #16
   1f5f0:	pop	{r4, r5, r6, r7, r8, pc}
   1f5f4:	push	{r3, r4, r5, lr}
   1f5f8:	mov	r4, r0
   1f5fc:	mov	r5, r1
   1f600:	ldrb	r0, [r4], #1
   1f604:	cmp	r0, #0
   1f608:	beq	1f658 <__assert_fail@plt+0xd020>
   1f60c:	cmp	r0, #12
   1f610:	beq	1f704 <__assert_fail@plt+0xd0cc>
   1f614:	bls	1f65c <__assert_fail@plt+0xd024>
   1f618:	cmp	r0, #32
   1f61c:	beq	1f73c <__assert_fail@plt+0xd104>
   1f620:	bls	1f68c <__assert_fail@plt+0xd054>
   1f624:	cmp	r0, #34	; 0x22
   1f628:	beq	1f720 <__assert_fail@plt+0xd0e8>
   1f62c:	cmp	r0, #92	; 0x5c
   1f630:	bne	1f674 <__assert_fail@plt+0xd03c>
   1f634:	movw	r0, #7004	; 0x1b5c
   1f638:	mov	r1, #1
   1f63c:	movt	r0, #3
   1f640:	mov	r2, #2
   1f644:	mov	r3, r5
   1f648:	bl	121a0 <fwrite@plt>
   1f64c:	ldrb	r0, [r4], #1
   1f650:	cmp	r0, #0
   1f654:	bne	1f60c <__assert_fail@plt+0xcfd4>
   1f658:	pop	{r3, r4, r5, pc}
   1f65c:	cmp	r0, #9
   1f660:	beq	1f6e8 <__assert_fail@plt+0xd0b0>
   1f664:	cmp	r0, #10
   1f668:	beq	1f6cc <__assert_fail@plt+0xd094>
   1f66c:	cmp	r0, #8
   1f670:	beq	1f6b0 <__assert_fail@plt+0xd078>
   1f674:	sub	r3, r0, #33	; 0x21
   1f678:	cmp	r3, #93	; 0x5d
   1f67c:	bhi	1f758 <__assert_fail@plt+0xd120>
   1f680:	mov	r1, r5
   1f684:	bl	12194 <_IO_putc@plt>
   1f688:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f68c:	cmp	r0, #13
   1f690:	bne	1f674 <__assert_fail@plt+0xd03c>
   1f694:	movw	r0, #7016	; 0x1b68
   1f698:	mov	r1, #1
   1f69c:	mov	r2, #2
   1f6a0:	mov	r3, r5
   1f6a4:	movt	r0, #3
   1f6a8:	bl	121a0 <fwrite@plt>
   1f6ac:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f6b0:	movw	r0, #7012	; 0x1b64
   1f6b4:	mov	r1, #1
   1f6b8:	mov	r2, #2
   1f6bc:	mov	r3, r5
   1f6c0:	movt	r0, #3
   1f6c4:	bl	121a0 <fwrite@plt>
   1f6c8:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f6cc:	movw	r0, #7008	; 0x1b60
   1f6d0:	mov	r1, #1
   1f6d4:	mov	r2, #2
   1f6d8:	mov	r3, r5
   1f6dc:	movt	r0, #3
   1f6e0:	bl	121a0 <fwrite@plt>
   1f6e4:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f6e8:	movw	r0, #7020	; 0x1b6c
   1f6ec:	mov	r1, #1
   1f6f0:	mov	r2, #2
   1f6f4:	mov	r3, r5
   1f6f8:	movt	r0, #3
   1f6fc:	bl	121a0 <fwrite@plt>
   1f700:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f704:	movw	r0, #7024	; 0x1b70
   1f708:	mov	r1, #1
   1f70c:	mov	r2, #2
   1f710:	mov	r3, r5
   1f714:	movt	r0, #3
   1f718:	bl	121a0 <fwrite@plt>
   1f71c:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f720:	movw	r0, #7032	; 0x1b78
   1f724:	mov	r1, #1
   1f728:	mov	r2, #2
   1f72c:	mov	r3, r5
   1f730:	movt	r0, #3
   1f734:	bl	121a0 <fwrite@plt>
   1f738:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f73c:	movw	r0, #7028	; 0x1b74
   1f740:	mov	r1, #1
   1f744:	mov	r2, #2
   1f748:	mov	r3, r5
   1f74c:	movt	r0, #3
   1f750:	bl	121a0 <fwrite@plt>
   1f754:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f758:	mov	r3, r0
   1f75c:	movw	r2, #7036	; 0x1b7c
   1f760:	mov	r0, r5
   1f764:	movt	r2, #3
   1f768:	mov	r1, #1
   1f76c:	bl	12428 <__fprintf_chk@plt>
   1f770:	b	1f600 <__assert_fail@plt+0xcfc8>
   1f774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f778:	add	fp, sp, #32
   1f77c:	sub	sp, sp, #972	; 0x3cc
   1f780:	movw	r8, #21904	; 0x5590
   1f784:	movt	r8, #4
   1f788:	mov	r6, r3
   1f78c:	str	r0, [fp, #-968]	; 0xfffffc38
   1f790:	ldr	r3, [r8]
   1f794:	mov	r4, #1
   1f798:	ldmib	fp, {r9, sl}
   1f79c:	mov	r5, #0
   1f7a0:	str	r1, [fp, #-972]	; 0xfffffc34
   1f7a4:	sub	r1, fp, #960	; 0x3c0
   1f7a8:	ldr	r0, [r6, #16]
   1f7ac:	ldr	r7, [fp, #16]
   1f7b0:	str	r2, [fp, #-976]	; 0xfffffc30
   1f7b4:	str	r3, [fp, #-40]	; 0xffffffd8
   1f7b8:	bl	21c94 <__assert_fail@plt+0xf65c>
   1f7bc:	sub	ip, fp, #1024	; 0x400
   1f7c0:	ldrd	r0, [r6, #96]	; 0x60
   1f7c4:	sub	r2, fp, #692	; 0x2b4
   1f7c8:	strd	r4, [sp]
   1f7cc:	strd	r4, [sp, #8]
   1f7d0:	mov	r3, #0
   1f7d4:	mov	r4, sl
   1f7d8:	asr	r5, sl, #31
   1f7dc:	strd	r4, [ip, #36]	; 0x24
   1f7e0:	bl	22f18 <__assert_fail@plt+0x108e0>
   1f7e4:	mov	r1, #1
   1f7e8:	movw	r2, #7068	; 0x1b9c
   1f7ec:	movt	r2, #3
   1f7f0:	mov	r3, r0
   1f7f4:	mov	r0, r7
   1f7f8:	bl	12428 <__fprintf_chk@plt>
   1f7fc:	ldrd	r0, [r6, #64]	; 0x40
   1f800:	sub	r2, fp, #692	; 0x2b4
   1f804:	strd	r4, [sp, #8]
   1f808:	mov	r3, #0
   1f80c:	mov	r4, #512	; 0x200
   1f810:	mov	r5, #0
   1f814:	strd	r4, [sp]
   1f818:	bl	22f18 <__assert_fail@plt+0x108e0>
   1f81c:	mov	r1, #1
   1f820:	movw	r2, #7076	; 0x1ba4
   1f824:	movt	r2, #3
   1f828:	mov	r3, r0
   1f82c:	mov	r0, r7
   1f830:	bl	12428 <__fprintf_chk@plt>
   1f834:	ldr	ip, [r6, #20]
   1f838:	mov	r1, #1
   1f83c:	sub	r3, fp, #960	; 0x3c0
   1f840:	mov	r0, r7
   1f844:	movw	r2, #7084	; 0x1bac
   1f848:	str	ip, [sp]
   1f84c:	movt	r2, #3
   1f850:	bl	12428 <__fprintf_chk@plt>
   1f854:	ldr	r0, [r6, #24]
   1f858:	bl	23acc <__assert_fail@plt+0x11494>
   1f85c:	subs	r3, r0, #0
   1f860:	movwne	r2, #7092	; 0x1bb4
   1f864:	movweq	r2, #7100	; 0x1bbc
   1f868:	movtne	r2, #3
   1f86c:	movteq	r2, #3
   1f870:	movne	r1, #1
   1f874:	moveq	r1, #1
   1f878:	movne	r0, r7
   1f87c:	moveq	r0, r7
   1f880:	ldreq	r3, [r6, #24]
   1f884:	bl	12428 <__fprintf_chk@plt>
   1f888:	ldr	r0, [r6, #28]
   1f88c:	bl	23c60 <__assert_fail@plt+0x11628>
   1f890:	subs	r3, r0, #0
   1f894:	movwne	r2, #7092	; 0x1bb4
   1f898:	movweq	r2, #7100	; 0x1bbc
   1f89c:	ldreq	r3, [r6, #28]
   1f8a0:	movne	r0, r7
   1f8a4:	movtne	r2, #3
   1f8a8:	movne	r1, #1
   1f8ac:	moveq	r0, r7
   1f8b0:	movteq	r2, #3
   1f8b4:	moveq	r1, #1
   1f8b8:	bl	12428 <__fprintf_chk@plt>
   1f8bc:	ldr	r3, [r6, #16]
   1f8c0:	and	r3, r3, #45056	; 0xb000
   1f8c4:	cmp	r3, #8192	; 0x2000
   1f8c8:	beq	1fa70 <__assert_fail@plt+0xd438>
   1f8cc:	cmp	sl, #0
   1f8d0:	ldrd	r0, [r6, #48]	; 0x30
   1f8d4:	mov	r4, #1
   1f8d8:	mov	r5, #0
   1f8dc:	ldrlt	r2, [fp, #-988]	; 0xfffffc24
   1f8e0:	movge	r2, #1
   1f8e4:	ldrlt	r3, [fp, #-984]	; 0xfffffc28
   1f8e8:	movge	r3, #0
   1f8ec:	strd	r4, [sp]
   1f8f0:	str	r2, [sp, #8]
   1f8f4:	sub	r2, fp, #692	; 0x2b4
   1f8f8:	str	r3, [sp, #12]
   1f8fc:	mov	r3, #0
   1f900:	bl	22f18 <__assert_fail@plt+0x108e0>
   1f904:	mov	r1, #1
   1f908:	movw	r2, #7120	; 0x1bd0
   1f90c:	movt	r2, #3
   1f910:	mov	r3, r0
   1f914:	mov	r0, r7
   1f918:	bl	12428 <__fprintf_chk@plt>
   1f91c:	add	r0, r6, #80	; 0x50
   1f920:	bl	122cc <localtime@plt>
   1f924:	subs	sl, r0, #0
   1f928:	beq	1fac4 <__assert_fail@plt+0xd48c>
   1f92c:	sub	r2, r9, #15532032	; 0xed0000
   1f930:	ldr	r3, [r6, #80]	; 0x50
   1f934:	sub	r2, r2, #19968	; 0x4e00
   1f938:	cmp	r2, r3
   1f93c:	movwgt	r5, #7056	; 0x1b90
   1f940:	movtgt	r5, #3
   1f944:	ble	1f9e8 <__assert_fail@plt+0xd3b0>
   1f948:	mov	r4, #256	; 0x100
   1f94c:	sub	r9, fp, #948	; 0x3b4
   1f950:	b	1f968 <__assert_fail@plt+0xd330>
   1f954:	lsl	r4, r4, #1
   1f958:	add	r3, r4, #14
   1f95c:	bic	r3, r3, #7
   1f960:	sub	sp, sp, r3
   1f964:	add	r9, sp, #16
   1f968:	mov	r0, r9
   1f96c:	mov	r1, r4
   1f970:	mov	r2, r5
   1f974:	mov	r3, sl
   1f978:	bl	122a8 <strftime@plt>
   1f97c:	cmp	r0, #0
   1f980:	beq	1f954 <__assert_fail@plt+0xd31c>
   1f984:	movw	r2, #7128	; 0x1bd8
   1f988:	mov	r3, r9
   1f98c:	mov	r0, r7
   1f990:	movt	r2, #3
   1f994:	mov	r1, #1
   1f998:	bl	12428 <__fprintf_chk@plt>
   1f99c:	ldr	r5, [fp, #12]
   1f9a0:	mov	r1, r7
   1f9a4:	ldr	r0, [fp, #-968]	; 0xfffffc38
   1f9a8:	cmp	r5, #0
   1f9ac:	bne	1fa0c <__assert_fail@plt+0xd3d4>
   1f9b0:	bl	1f5f4 <__assert_fail@plt+0xcfbc>
   1f9b4:	ldr	r3, [r6, #16]
   1f9b8:	and	r3, r3, #61440	; 0xf000
   1f9bc:	cmp	r3, #40960	; 0xa000
   1f9c0:	beq	1fa20 <__assert_fail@plt+0xd3e8>
   1f9c4:	mov	r1, r7
   1f9c8:	mov	r0, #10
   1f9cc:	bl	12194 <_IO_putc@plt>
   1f9d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1f9d4:	ldr	r3, [r8]
   1f9d8:	cmp	r2, r3
   1f9dc:	bne	1fb98 <__assert_fail@plt+0xd560>
   1f9e0:	sub	sp, fp, #32
   1f9e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9e8:	add	r5, r9, #3600	; 0xe10
   1f9ec:	movw	r1, #7044	; 0x1b84
   1f9f0:	cmp	r3, r5
   1f9f4:	movw	r2, #7056	; 0x1b90
   1f9f8:	movt	r1, #3
   1f9fc:	movt	r2, #3
   1fa00:	movle	r5, r1
   1fa04:	movgt	r5, r2
   1fa08:	b	1f948 <__assert_fail@plt+0xd310>
   1fa0c:	bl	125a8 <fputs@plt>
   1fa10:	ldr	r3, [r6, #16]
   1fa14:	and	r3, r3, #61440	; 0xf000
   1fa18:	cmp	r3, #40960	; 0xa000
   1fa1c:	bne	1f9c4 <__assert_fail@plt+0xd38c>
   1fa20:	ldr	r0, [fp, #-972]	; 0xfffffc34
   1fa24:	ldr	r1, [fp, #-976]	; 0xfffffc30
   1fa28:	bl	214f8 <__assert_fail@plt+0xeec0>
   1fa2c:	subs	r4, r0, #0
   1fa30:	beq	1fb18 <__assert_fail@plt+0xd4e0>
   1fa34:	mov	r1, #1
   1fa38:	movw	r0, #7152	; 0x1bf0
   1fa3c:	mov	r2, #4
   1fa40:	movt	r0, #3
   1fa44:	mov	r3, r7
   1fa48:	bl	121a0 <fwrite@plt>
   1fa4c:	ldr	ip, [fp, #12]
   1fa50:	mov	r0, r4
   1fa54:	mov	r1, r7
   1fa58:	cmp	ip, #0
   1fa5c:	bne	1fb10 <__assert_fail@plt+0xd4d8>
   1fa60:	bl	1f5f4 <__assert_fail@plt+0xcfbc>
   1fa64:	mov	r0, r4
   1fa68:	bl	12020 <free@plt>
   1fa6c:	b	1f9c4 <__assert_fail@plt+0xd38c>
   1fa70:	ldr	ip, [r6, #32]
   1fa74:	movw	r2, #7108	; 0x1bc4
   1fa78:	ldr	lr, [r6, #36]	; 0x24
   1fa7c:	movt	r2, #3
   1fa80:	ubfx	r3, ip, #8, #12
   1fa84:	mov	r0, r7
   1fa88:	lsr	r1, ip, #12
   1fa8c:	uxtb	ip, ip
   1fa90:	orr	r1, r1, lr, lsl #20
   1fa94:	bic	lr, lr, #4080	; 0xff0
   1fa98:	bic	lr, lr, #15
   1fa9c:	bic	r1, r1, #255	; 0xff
   1faa0:	orr	r1, r1, ip
   1faa4:	orr	r3, lr, r3
   1faa8:	str	r1, [sp]
   1faac:	mov	r1, #1
   1fab0:	bl	12428 <__fprintf_chk@plt>
   1fab4:	add	r0, r6, #80	; 0x50
   1fab8:	bl	122cc <localtime@plt>
   1fabc:	subs	sl, r0, #0
   1fac0:	bne	1f92c <__assert_fail@plt+0xd2f4>
   1fac4:	ldr	r0, [r6, #80]	; 0x50
   1fac8:	cmp	r0, #0
   1facc:	blt	1fb38 <__assert_fail@plt+0xd500>
   1fad0:	sub	r2, fp, #692	; 0x2b4
   1fad4:	mov	r3, sl
   1fad8:	mov	r4, #1
   1fadc:	mov	r5, #0
   1fae0:	asr	r1, r0, #31
   1fae4:	strd	r4, [sp]
   1fae8:	strd	r4, [sp, #8]
   1faec:	bl	22f18 <__assert_fail@plt+0x108e0>
   1faf0:	movw	r2, #7144	; 0x1be8
   1faf4:	mov	r1, #1
   1faf8:	movt	r2, #3
   1fafc:	mov	r3, #12
   1fb00:	str	r0, [sp]
   1fb04:	mov	r0, r7
   1fb08:	bl	12428 <__fprintf_chk@plt>
   1fb0c:	b	1f99c <__assert_fail@plt+0xd364>
   1fb10:	bl	125a8 <fputs@plt>
   1fb14:	b	1fa64 <__assert_fail@plt+0xd42c>
   1fb18:	bl	1238c <__errno_location@plt>
   1fb1c:	ldr	r3, [fp, #-968]	; 0xfffffc38
   1fb20:	movw	r2, #8288	; 0x2060
   1fb24:	movt	r2, #3
   1fb28:	ldr	r1, [r0]
   1fb2c:	mov	r0, r4
   1fb30:	bl	12224 <error@plt>
   1fb34:	b	1fa64 <__assert_fail@plt+0xd42c>
   1fb38:	asr	r1, r0, #31
   1fb3c:	sub	r2, fp, #692	; 0x2b4
   1fb40:	mov	r3, sl
   1fb44:	rsbs	r0, r0, #0
   1fb48:	rsc	r1, r1, #0
   1fb4c:	mov	r4, #1
   1fb50:	mov	r5, #0
   1fb54:	strd	r4, [sp]
   1fb58:	strd	r4, [sp, #8]
   1fb5c:	bl	22f18 <__assert_fail@plt+0x108e0>
   1fb60:	mov	r4, r0
   1fb64:	bl	1232c <strlen@plt>
   1fb68:	movw	r3, #7140	; 0x1be4
   1fb6c:	movt	r3, #3
   1fb70:	str	r3, [sp]
   1fb74:	movw	r2, #7132	; 0x1bdc
   1fb78:	str	r4, [sp, #4]
   1fb7c:	movt	r2, #3
   1fb80:	mov	r1, #1
   1fb84:	rsb	r3, r0, #12
   1fb88:	mov	r0, r7
   1fb8c:	bic	r3, r3, r3, asr #31
   1fb90:	bl	12428 <__fprintf_chk@plt>
   1fb94:	b	1f99c <__assert_fail@plt+0xd364>
   1fb98:	bl	120e0 <__stack_chk_fail@plt>
   1fb9c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1fba0:	mov	r4, r1
   1fba4:	mov	r6, r0
   1fba8:	mov	r8, r2
   1fbac:	bl	1238c <__errno_location@plt>
   1fbb0:	cmp	r4, #0
   1fbb4:	mov	r7, r0
   1fbb8:	ldr	r9, [r0]
   1fbbc:	beq	1fc80 <__assert_fail@plt+0xd648>
   1fbc0:	ldr	r5, [r8]
   1fbc4:	cmp	r5, #0
   1fbc8:	movne	r1, r5
   1fbcc:	moveq	r1, #16
   1fbd0:	cmp	r4, r1
   1fbd4:	bls	1fc04 <__assert_fail@plt+0xd5cc>
   1fbd8:	lsl	r3, r1, #1
   1fbdc:	cmp	r1, r3
   1fbe0:	bls	1fbf8 <__assert_fail@plt+0xd5c0>
   1fbe4:	b	1fc58 <__assert_fail@plt+0xd620>
   1fbe8:	lsl	ip, r3, #1
   1fbec:	cmp	ip, r3
   1fbf0:	bcc	1fc58 <__assert_fail@plt+0xd620>
   1fbf4:	mov	r3, ip
   1fbf8:	cmp	r4, r3
   1fbfc:	bhi	1fbe8 <__assert_fail@plt+0xd5b0>
   1fc00:	mov	r1, r3
   1fc04:	cmp	r5, #0
   1fc08:	bne	1fc38 <__assert_fail@plt+0xd600>
   1fc0c:	cmp	r6, #0
   1fc10:	bne	1fc60 <__assert_fail@plt+0xd628>
   1fc14:	str	r1, [r8]
   1fc18:	mov	r0, r1
   1fc1c:	bl	12284 <malloc@plt>
   1fc20:	mov	r6, r0
   1fc24:	cmp	r6, #0
   1fc28:	beq	1fc30 <__assert_fail@plt+0xd5f8>
   1fc2c:	str	r9, [r7]
   1fc30:	mov	r0, r6
   1fc34:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1fc38:	cmp	r5, r1
   1fc3c:	beq	1fc24 <__assert_fail@plt+0xd5ec>
   1fc40:	mov	r0, r6
   1fc44:	str	r1, [r8]
   1fc48:	bl	12104 <realloc@plt>
   1fc4c:	subs	r6, r0, #0
   1fc50:	bne	1fc2c <__assert_fail@plt+0xd5f4>
   1fc54:	b	1fc30 <__assert_fail@plt+0xd5f8>
   1fc58:	mov	r1, r4
   1fc5c:	b	1fc04 <__assert_fail@plt+0xd5cc>
   1fc60:	movw	r0, #7196	; 0x1c1c
   1fc64:	movw	r1, #7184	; 0x1c10
   1fc68:	movw	r3, #7160	; 0x1bf8
   1fc6c:	movt	r0, #3
   1fc70:	movt	r1, #3
   1fc74:	mov	r2, #79	; 0x4f
   1fc78:	movt	r3, #3
   1fc7c:	bl	12638 <__assert_fail@plt>
   1fc80:	movw	r0, #7172	; 0x1c04
   1fc84:	movw	r1, #7184	; 0x1c10
   1fc88:	movw	r3, #7160	; 0x1bf8
   1fc8c:	movt	r0, #3
   1fc90:	movt	r1, #3
   1fc94:	mov	r2, #71	; 0x47
   1fc98:	movt	r3, #3
   1fc9c:	bl	12638 <__assert_fail@plt>
   1fca0:	push	{r4, lr}
   1fca4:	mov	r4, r0
   1fca8:	bl	1fb9c <__assert_fail@plt+0xd564>
   1fcac:	cmp	r0, #0
   1fcb0:	popne	{r4, pc}
   1fcb4:	mov	r0, r4
   1fcb8:	bl	12020 <free@plt>
   1fcbc:	bl	2973c <__assert_fail@plt+0x17104>
   1fcc0:	mov	r0, #0
   1fcc4:	bx	lr
   1fcc8:	push	{r4, r5, r6, r7, lr}
   1fccc:	movw	r4, #21904	; 0x5590
   1fcd0:	movt	r4, #4
   1fcd4:	sub	sp, sp, #28
   1fcd8:	mov	r6, r1
   1fcdc:	mov	r7, r0
   1fce0:	ldr	r2, [r4]
   1fce4:	str	r2, [sp, #20]
   1fce8:	bl	12260 <getenv@plt>
   1fcec:	subs	r5, r0, #0
   1fcf0:	moveq	r0, r5
   1fcf4:	beq	1fd28 <__assert_fail@plt+0xd6f0>
   1fcf8:	mov	r5, #0
   1fcfc:	add	r1, sp, #12
   1fd00:	str	r5, [sp]
   1fd04:	mov	r2, #10
   1fd08:	add	r3, sp, #16
   1fd0c:	bl	2984c <__assert_fail@plt+0x17214>
   1fd10:	cmp	r0, r5
   1fd14:	bne	1fd40 <__assert_fail@plt+0xd708>
   1fd18:	ldr	r0, [sp, #16]
   1fd1c:	cmp	r0, r6
   1fd20:	movcs	r0, #0
   1fd24:	movcc	r0, #1
   1fd28:	ldr	r2, [sp, #20]
   1fd2c:	ldr	r3, [r4]
   1fd30:	cmp	r2, r3
   1fd34:	bne	1fd78 <__assert_fail@plt+0xd740>
   1fd38:	add	sp, sp, #28
   1fd3c:	pop	{r4, r5, r6, r7, pc}
   1fd40:	bl	1238c <__errno_location@plt>
   1fd44:	mov	r2, #5
   1fd48:	movw	r1, #7292	; 0x1c7c
   1fd4c:	movt	r1, #3
   1fd50:	ldr	r6, [r0]
   1fd54:	mov	r0, r5
   1fd58:	bl	120d4 <dcgettext@plt>
   1fd5c:	mov	r3, r7
   1fd60:	mov	r1, r6
   1fd64:	mov	r2, r0
   1fd68:	mov	r0, #1
   1fd6c:	bl	12224 <error@plt>
   1fd70:	mov	r0, r5
   1fd74:	b	1fd28 <__assert_fail@plt+0xd6f0>
   1fd78:	bl	120e0 <__stack_chk_fail@plt>
   1fd7c:	movw	ip, #7356	; 0x1cbc
   1fd80:	movt	ip, #3
   1fd84:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1fd88:	mov	r7, r2
   1fd8c:	subs	r2, r2, ip
   1fd90:	mov	r5, r0
   1fd94:	rsbs	r8, r2, #0
   1fd98:	mov	r4, r1
   1fd9c:	adcs	r8, r8, r2
   1fda0:	cmp	r7, #0
   1fda4:	mov	r9, r3
   1fda8:	ldr	r6, [sp, #40]	; 0x28
   1fdac:	beq	1ffec <__assert_fail@plt+0xd9b4>
   1fdb0:	cmp	r6, #0
   1fdb4:	moveq	r3, #1
   1fdb8:	streq	r3, [r1, #28]
   1fdbc:	cmp	r8, #0
   1fdc0:	bne	1fe6c <__assert_fail@plt+0xd834>
   1fdc4:	ldr	r2, [r1, #16]
   1fdc8:	ldr	r3, [r0, #12]
   1fdcc:	add	r2, r9, r2
   1fdd0:	cmp	r2, r3
   1fdd4:	bls	1fe2c <__assert_fail@plt+0xd7f4>
   1fdd8:	cmp	r6, #0
   1fddc:	bne	1ff7c <__assert_fail@plt+0xd944>
   1fde0:	ldr	r2, [r1]
   1fde4:	ldr	r3, [r0, #28]
   1fde8:	cmp	r2, r3
   1fdec:	beq	1ff7c <__assert_fail@plt+0xd944>
   1fdf0:	ldr	r3, [r5, #24]
   1fdf4:	cmp	r3, #0
   1fdf8:	beq	1ffa4 <__assert_fail@plt+0xd96c>
   1fdfc:	mov	r2, #5
   1fe00:	movw	r1, #7460	; 0x1d24
   1fe04:	mov	r0, #0
   1fe08:	movt	r1, #3
   1fe0c:	bl	120d4 <dcgettext@plt>
   1fe10:	mov	r1, #0
   1fe14:	mov	r2, r0
   1fe18:	mov	r0, #1
   1fe1c:	bl	12224 <error@plt>
   1fe20:	mov	r0, r5
   1fe24:	mov	r1, r4
   1fe28:	bl	201b0 <__assert_fail@plt+0xdb78>
   1fe2c:	cmp	r6, #0
   1fe30:	ldr	ip, [r4]
   1fe34:	bne	1fe54 <__assert_fail@plt+0xd81c>
   1fe38:	ldr	r3, [r5, #40]	; 0x28
   1fe3c:	cmp	r3, #0
   1fe40:	beq	1fe54 <__assert_fail@plt+0xd81c>
   1fe44:	ldr	r2, [r5, #28]
   1fe48:	rsb	r2, r2, ip
   1fe4c:	cmp	r3, r2
   1fe50:	beq	1fe60 <__assert_fail@plt+0xd828>
   1fe54:	ldr	r3, [r5, #16]
   1fe58:	cmp	ip, r3
   1fe5c:	bne	1fe70 <__assert_fail@plt+0xd838>
   1fe60:	mov	r0, r5
   1fe64:	mov	r1, r4
   1fe68:	bl	201b0 <__assert_fail@plt+0xdb78>
   1fe6c:	ldr	ip, [r4]
   1fe70:	ldr	r1, [r4, #8]
   1fe74:	cmp	r1, ip
   1fe78:	bls	1fea8 <__assert_fail@plt+0xd870>
   1fe7c:	ldr	r3, [r4, #4]
   1fe80:	cmp	r8, #0
   1fe84:	beq	1fed8 <__assert_fail@plt+0xd8a0>
   1fe88:	add	r1, ip, #1
   1fe8c:	mov	r2, #0
   1fe90:	str	r1, [r4]
   1fe94:	str	r2, [r3, ip, lsl #2]
   1fe98:	cmp	r6, #0
   1fe9c:	ldrne	r3, [r4, #16]
   1fea0:	strne	r3, [r4, #20]
   1fea4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1fea8:	ldr	r0, [r4, #4]
   1feac:	cmp	r0, #0
   1feb0:	beq	1ffcc <__assert_fail@plt+0xd994>
   1feb4:	lsl	r3, r1, #1
   1feb8:	lsl	r1, r1, #3
   1febc:	str	r3, [r4, #8]
   1fec0:	bl	2962c <__assert_fail@plt+0x16ff4>
   1fec4:	cmp	r8, #0
   1fec8:	ldr	ip, [r4]
   1fecc:	mov	r3, r0
   1fed0:	str	r0, [r4, #4]
   1fed4:	bne	1fe88 <__assert_fail@plt+0xd850>
   1fed8:	ldr	r2, [sp, #32]
   1fedc:	add	r1, ip, #1
   1fee0:	ldr	r0, [r4, #16]
   1fee4:	cmp	r2, #0
   1fee8:	ldr	r2, [r4, #12]
   1feec:	str	r1, [r4]
   1fef0:	add	r2, r2, r0
   1fef4:	str	r2, [r3, ip, lsl #2]
   1fef8:	beq	1ff1c <__assert_fail@plt+0xd8e4>
   1fefc:	ldr	r3, [r4, #12]
   1ff00:	ldr	r1, [sp, #32]
   1ff04:	add	r0, r3, r0
   1ff08:	bl	121f4 <strcpy@plt>
   1ff0c:	ldr	r0, [r4, #16]
   1ff10:	ldr	r3, [sp, #36]	; 0x24
   1ff14:	add	r0, r3, r0
   1ff18:	str	r0, [r4, #16]
   1ff1c:	ldr	r3, [r4, #12]
   1ff20:	mov	r1, r7
   1ff24:	add	r0, r3, r0
   1ff28:	bl	121f4 <strcpy@plt>
   1ff2c:	ldr	r2, [r4, #16]
   1ff30:	cmp	r6, #0
   1ff34:	ldr	r3, [r4]
   1ff38:	add	r9, r2, r9
   1ff3c:	str	r9, [r4, #16]
   1ff40:	bne	1ff60 <__assert_fail@plt+0xd928>
   1ff44:	ldr	r2, [r5, #40]	; 0x28
   1ff48:	cmp	r2, #0
   1ff4c:	beq	1ff60 <__assert_fail@plt+0xd928>
   1ff50:	ldr	r1, [r5, #28]
   1ff54:	rsb	r1, r1, r3
   1ff58:	cmp	r2, r1
   1ff5c:	beq	1ff6c <__assert_fail@plt+0xd934>
   1ff60:	ldr	r2, [r5, #16]
   1ff64:	cmp	r3, r2
   1ff68:	bne	1fe98 <__assert_fail@plt+0xd860>
   1ff6c:	mov	r0, r5
   1ff70:	mov	r1, r4
   1ff74:	bl	201b0 <__assert_fail@plt+0xdb78>
   1ff78:	b	1fe98 <__assert_fail@plt+0xd860>
   1ff7c:	mov	r2, #5
   1ff80:	movw	r1, #7400	; 0x1ce8
   1ff84:	mov	r0, #0
   1ff88:	movt	r1, #3
   1ff8c:	bl	120d4 <dcgettext@plt>
   1ff90:	mov	r1, #0
   1ff94:	mov	r2, r0
   1ff98:	mov	r0, #1
   1ff9c:	bl	12224 <error@plt>
   1ffa0:	b	1fdf0 <__assert_fail@plt+0xd7b8>
   1ffa4:	ldr	r3, [r5]
   1ffa8:	cmp	r3, #0
   1ffac:	beq	1fe20 <__assert_fail@plt+0xd7e8>
   1ffb0:	ldr	r3, [r5, #36]	; 0x24
   1ffb4:	cmp	r3, #0
   1ffb8:	bne	1fdfc <__assert_fail@plt+0xd7c4>
   1ffbc:	ldr	r3, [r5, #40]	; 0x28
   1ffc0:	cmp	r3, #0
   1ffc4:	beq	1fe20 <__assert_fail@plt+0xd7e8>
   1ffc8:	b	1fdfc <__assert_fail@plt+0xd7c4>
   1ffcc:	mov	r3, #64	; 0x40
   1ffd0:	mov	r0, #256	; 0x100
   1ffd4:	str	r3, [r4, #8]
   1ffd8:	bl	29604 <__assert_fail@plt+0x16fcc>
   1ffdc:	ldr	ip, [r4]
   1ffe0:	mov	r3, r0
   1ffe4:	str	r0, [r4, #4]
   1ffe8:	b	1fe80 <__assert_fail@plt+0xd848>
   1ffec:	movw	r0, #7368	; 0x1cc8
   1fff0:	movw	r1, #7388	; 0x1cdc
   1fff4:	movw	r3, #7220	; 0x1c34
   1fff8:	movt	r0, #3
   1fffc:	movt	r1, #3
   20000:	movw	r2, #358	; 0x166
   20004:	movt	r3, #3
   20008:	bl	12638 <__assert_fail@plt>
   2000c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20010:	movw	ip, #23948	; 0x5d8c
   20014:	sub	sp, sp, #36	; 0x24
   20018:	movt	ip, #4
   2001c:	mov	r7, r3
   20020:	mov	r8, r0
   20024:	ldr	r3, [sp, #76]	; 0x4c
   20028:	mov	r4, r2
   2002c:	str	ip, [sp, #16]
   20030:	str	r1, [sp, #24]
   20034:	ldr	r1, [ip]
   20038:	ldr	ip, [sp, #80]	; 0x50
   2003c:	str	r3, [sp, #12]
   20040:	cmp	r1, #0
   20044:	ldr	r3, [sp, #84]	; 0x54
   20048:	str	ip, [sp, #8]
   2004c:	ldr	ip, [sp, #88]	; 0x58
   20050:	ldr	r0, [r0, #12]
   20054:	ldr	r9, [sp, #72]	; 0x48
   20058:	sub	r6, r0, #1
   2005c:	str	r3, [sp, #4]
   20060:	str	ip, [sp, #28]
   20064:	strne	r1, [sp, #20]
   20068:	beq	20198 <__assert_fail@plt+0xdb60>
   2006c:	ldr	r3, [sp, #4]
   20070:	ldr	ip, [sp, #12]
   20074:	ldr	r5, [sp, #20]
   20078:	add	r3, r3, ip
   2007c:	str	r3, [sp]
   20080:	b	200f4 <__assert_fail@plt+0xdabc>
   20084:	bl	123e0 <strncpy@plt>
   20088:	cmp	sl, #0
   2008c:	mov	r1, r9
   20090:	rsb	r6, fp, r6
   20094:	add	r5, r5, fp
   20098:	add	r4, r4, fp
   2009c:	beq	200e8 <__assert_fail@plt+0xdab0>
   200a0:	ldr	r3, [sp]
   200a4:	mov	r0, r5
   200a8:	cmp	r6, r3
   200ac:	rsb	r6, r3, r6
   200b0:	bls	20124 <__assert_fail@plt+0xdaec>
   200b4:	cmp	r9, #0
   200b8:	beq	200c8 <__assert_fail@plt+0xda90>
   200bc:	bl	121f4 <strcpy@plt>
   200c0:	ldr	ip, [sp, #12]
   200c4:	add	r5, r5, ip
   200c8:	mov	r0, r5
   200cc:	ldr	r1, [sp, #8]
   200d0:	bl	121f4 <strcpy@plt>
   200d4:	ldr	r3, [r8, #20]
   200d8:	ldr	ip, [sp, #4]
   200dc:	add	r4, r4, r3
   200e0:	rsb	r7, r3, r7
   200e4:	add	r5, r5, ip
   200e8:	ldrb	r3, [r4]
   200ec:	cmp	r3, #0
   200f0:	beq	20160 <__assert_fail@plt+0xdb28>
   200f4:	ldr	r1, [r8, #24]
   200f8:	mov	r0, r4
   200fc:	bl	247d0 <__assert_fail@plt+0x12198>
   20100:	mov	r1, r4
   20104:	subs	sl, r0, #0
   20108:	mov	r0, r5
   2010c:	rsb	fp, r4, sl
   20110:	moveq	fp, r7
   20114:	cmp	r6, fp
   20118:	rsb	r7, fp, r7
   2011c:	mov	r2, fp
   20120:	bhi	20084 <__assert_fail@plt+0xda4c>
   20124:	ldrb	r3, [r4]
   20128:	cmp	r3, #0
   2012c:	beq	20160 <__assert_fail@plt+0xdb28>
   20130:	mov	r2, #5
   20134:	movw	r1, #7484	; 0x1d3c
   20138:	mov	r0, #0
   2013c:	movt	r1, #3
   20140:	bl	120d4 <dcgettext@plt>
   20144:	mov	r1, #0
   20148:	mov	r2, r0
   2014c:	mov	r0, #1
   20150:	bl	12224 <error@plt>
   20154:	ldr	ip, [sp, #16]
   20158:	ldr	r2, [ip]
   2015c:	b	20164 <__assert_fail@plt+0xdb2c>
   20160:	ldr	r2, [sp, #20]
   20164:	mov	r3, r5
   20168:	mov	ip, #0
   2016c:	strb	ip, [r3], #1
   20170:	mov	r0, r8
   20174:	str	ip, [sp, #72]	; 0x48
   20178:	rsb	r3, r2, r3
   2017c:	str	ip, [sp, #76]	; 0x4c
   20180:	ldr	ip, [sp, #28]
   20184:	ldr	r1, [sp, #24]
   20188:	str	ip, [sp, #80]	; 0x50
   2018c:	add	sp, sp, #36	; 0x24
   20190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20194:	b	1fd7c <__assert_fail@plt+0xd744>
   20198:	add	r0, r0, #1
   2019c:	bl	29604 <__assert_fail@plt+0x16fcc>
   201a0:	ldr	ip, [sp, #16]
   201a4:	str	r0, [sp, #20]
   201a8:	str	r0, [ip]
   201ac:	b	2006c <__assert_fail@plt+0xda34>
   201b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201b4:	sub	sp, sp, #20
   201b8:	mov	ip, #0
   201bc:	mov	r5, r1
   201c0:	mov	r3, ip
   201c4:	movw	r2, #7356	; 0x1cbc
   201c8:	str	ip, [sp]
   201cc:	movt	r2, #3
   201d0:	str	ip, [sp, #4]
   201d4:	mov	sl, r0
   201d8:	str	ip, [sp, #8]
   201dc:	bl	1fd7c <__assert_fail@plt+0xd744>
   201e0:	ldr	r3, [r5]
   201e4:	cmp	r3, #0
   201e8:	beq	20420 <__assert_fail@plt+0xdde8>
   201ec:	ldr	r2, [r5, #4]
   201f0:	sub	r3, r3, #-1073741823	; 0xc0000001
   201f4:	lsl	r0, r3, #2
   201f8:	ldr	r8, [r2, r3, lsl #2]
   201fc:	cmp	r8, #0
   20200:	bne	20458 <__assert_fail@plt+0xde20>
   20204:	add	r0, r0, #8
   20208:	mov	r9, r8
   2020c:	bl	29604 <__assert_fail@plt+0x16fcc>
   20210:	ldr	r6, [r5]
   20214:	ldr	ip, [sl, #28]
   20218:	mov	r7, r0
   2021c:	mov	r0, r6
   20220:	cmp	ip, #0
   20224:	beq	20248 <__assert_fail@plt+0xdc10>
   20228:	lsl	r1, ip, #2
   2022c:	mov	r2, #0
   20230:	ldr	r3, [r5, #4]
   20234:	ldr	r3, [r3, r2]
   20238:	str	r3, [r7, r2]
   2023c:	add	r2, r2, #4
   20240:	cmp	r2, r1
   20244:	bne	20230 <__assert_fail@plt+0xdbf8>
   20248:	add	r2, r8, ip
   2024c:	mov	r4, ip
   20250:	cmp	r2, r0
   20254:	bcs	20298 <__assert_fail@plt+0xdc60>
   20258:	cmp	r6, ip
   2025c:	bls	20298 <__assert_fail@plt+0xdc60>
   20260:	rsb	lr, r2, ip
   20264:	lsl	r2, r2, #2
   20268:	add	lr, r7, lr, lsl #2
   2026c:	b	2027c <__assert_fail@plt+0xdc44>
   20270:	cmp	r6, r4
   20274:	add	r2, r2, #4
   20278:	bls	20298 <__assert_fail@plt+0xdc60>
   2027c:	ldr	r3, [r5, #4]
   20280:	add	r4, r4, #1
   20284:	add	r1, r8, r4
   20288:	cmp	r0, r1
   2028c:	ldr	r3, [r3, r2]
   20290:	str	r3, [lr, r2]
   20294:	bhi	20270 <__assert_fail@plt+0xdc38>
   20298:	cmp	r4, ip
   2029c:	bcc	2043c <__assert_fail@plt+0xde04>
   202a0:	str	r9, [r7, r4, lsl #2]
   202a4:	mov	r0, sl
   202a8:	ldr	ip, [sl, #32]
   202ac:	mov	r2, r4
   202b0:	ldr	r1, [r5, #24]
   202b4:	mov	r3, r7
   202b8:	blx	ip
   202bc:	subs	fp, r0, #0
   202c0:	bne	203a0 <__assert_fail@plt+0xdd68>
   202c4:	ldr	r3, [sl, #28]
   202c8:	add	r2, r3, #1
   202cc:	cmp	r6, r2
   202d0:	bhi	2033c <__assert_fail@plt+0xdd04>
   202d4:	mov	r2, #5
   202d8:	movw	r1, #7608	; 0x1db8
   202dc:	movt	r1, #3
   202e0:	bl	120d4 <dcgettext@plt>
   202e4:	mov	r1, fp
   202e8:	mov	r2, r0
   202ec:	mov	r0, #1
   202f0:	bl	12224 <error@plt>
   202f4:	ldr	ip, [sl, #28]
   202f8:	ldr	r0, [r5]
   202fc:	add	r2, r8, #1
   20300:	rsb	r3, ip, r0
   20304:	cmp	r2, r3
   20308:	bcc	20220 <__assert_fail@plt+0xdbe8>
   2030c:	mov	r0, r7
   20310:	bl	12020 <free@plt>
   20314:	ldr	r1, [sl, #28]
   20318:	ldr	r2, [r5, #20]
   2031c:	mov	r0, #0
   20320:	mvn	r3, #0
   20324:	str	r0, [r5, #28]
   20328:	str	r1, [r5]
   2032c:	str	r2, [r5, #16]
   20330:	str	r3, [r5, #32]
   20334:	add	sp, sp, #20
   20338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2033c:	ldr	r1, [r5, #40]	; 0x28
   20340:	cmp	r6, r1
   20344:	bcc	20354 <__assert_fail@plt+0xdd1c>
   20348:	cmp	r1, #0
   2034c:	movne	ip, r3
   20350:	bne	2035c <__assert_fail@plt+0xdd24>
   20354:	str	r6, [r5, #40]	; 0x28
   20358:	ldr	ip, [sl, #28]
   2035c:	ldr	r1, [r5, #36]	; 0x24
   20360:	cmp	r1, #0
   20364:	beq	20418 <__assert_fail@plt+0xdde0>
   20368:	ldr	r0, [r5, #40]	; 0x28
   2036c:	cmp	r1, r0
   20370:	bcs	20418 <__assert_fail@plt+0xdde0>
   20374:	rsb	r1, r1, r0
   20378:	lsrs	r1, r1, #1
   2037c:	rsbne	r6, r1, r6
   20380:	subeq	r6, r6, #1
   20384:	cmp	r3, #0
   20388:	beq	20394 <__assert_fail@plt+0xdd5c>
   2038c:	cmp	r6, r2
   20390:	movcc	r6, r2
   20394:	cmp	r6, #0
   20398:	moveq	r6, #1
   2039c:	b	202f8 <__assert_fail@plt+0xdcc0>
   203a0:	ldr	r2, [r5, #36]	; 0x24
   203a4:	ldr	r3, [sl, #28]
   203a8:	cmp	r6, r2
   203ac:	strhi	r6, [r5, #36]	; 0x24
   203b0:	movhi	r2, r6
   203b4:	ldrhi	ip, [sl, #28]
   203b8:	movls	ip, r3
   203bc:	cmp	r2, #0
   203c0:	beq	20408 <__assert_fail@plt+0xddd0>
   203c4:	ldr	r1, [r5, #40]	; 0x28
   203c8:	cmp	r1, r2
   203cc:	bls	20408 <__assert_fail@plt+0xddd0>
   203d0:	rsb	r2, r2, r1
   203d4:	lsrs	r2, r2, #1
   203d8:	addne	r6, r6, r2
   203dc:	beq	20410 <__assert_fail@plt+0xddd8>
   203e0:	cmp	r3, #0
   203e4:	beq	203f4 <__assert_fail@plt+0xddbc>
   203e8:	add	r3, r3, #1
   203ec:	cmp	r6, r3
   203f0:	movcc	r6, r3
   203f4:	cmp	r6, #0
   203f8:	add	r8, r4, r8
   203fc:	rsb	r8, ip, r8
   20400:	moveq	r6, #1
   20404:	b	202f8 <__assert_fail@plt+0xdcc0>
   20408:	cmn	r6, #1
   2040c:	beq	203e0 <__assert_fail@plt+0xdda8>
   20410:	add	r6, r6, #1
   20414:	b	203e0 <__assert_fail@plt+0xdda8>
   20418:	lsr	r6, r6, #1
   2041c:	b	20384 <__assert_fail@plt+0xdd4c>
   20420:	movw	r0, #7504	; 0x1d50
   20424:	movw	r1, #7388	; 0x1cdc
   20428:	movt	r0, #3
   2042c:	movt	r1, #3
   20430:	movw	r2, #278	; 0x116
   20434:	ldr	r3, [pc, #56]	; 20474 <__assert_fail@plt+0xde3c>
   20438:	bl	12638 <__assert_fail@plt>
   2043c:	movw	r0, #7576	; 0x1d98
   20440:	movw	r1, #7388	; 0x1cdc
   20444:	movt	r0, #3
   20448:	movt	r1, #3
   2044c:	movw	r2, #259	; 0x103
   20450:	ldr	r3, [pc, #32]	; 20478 <__assert_fail@plt+0xde40>
   20454:	bl	12638 <__assert_fail@plt>
   20458:	movw	r0, #7524	; 0x1d64
   2045c:	movw	r1, #7388	; 0x1cdc
   20460:	movt	r0, #3
   20464:	movt	r1, #3
   20468:	movw	r2, #279	; 0x117
   2046c:	ldr	r3, [pc]	; 20474 <__assert_fail@plt+0xde3c>
   20470:	bl	12638 <__assert_fail@plt>
   20474:	andeq	r1, r3, r0, asr #24
   20478:	andeq	r1, r3, ip, asr #24
   2047c:	push	{r3, lr}
   20480:	mov	r0, #0
   20484:	bl	120ec <sysconf@plt>
   20488:	cmp	r0, #0
   2048c:	mvnle	r0, #-2147483648	; 0x80000000
   20490:	pop	{r3, pc}
   20494:	push	{r3, r4, r5, lr}
   20498:	movw	r3, #21900	; 0x558c
   2049c:	movt	r3, #4
   204a0:	ldr	r5, [r3]
   204a4:	ldr	r3, [r5]
   204a8:	cmp	r3, #0
   204ac:	beq	204d8 <__assert_fail@plt+0xdea0>
   204b0:	mov	r4, #0
   204b4:	mov	r0, r3
   204b8:	bl	1232c <strlen@plt>
   204bc:	ldr	r3, [r5, #4]!
   204c0:	cmp	r3, #0
   204c4:	add	r0, r0, #1
   204c8:	add	r4, r4, r0
   204cc:	bne	204b4 <__assert_fail@plt+0xde7c>
   204d0:	mov	r0, r4
   204d4:	pop	{r3, r4, r5, pc}
   204d8:	mov	r4, r3
   204dc:	b	204d0 <__assert_fail@plt+0xde98>
   204e0:	push	{r4, r5, r6, lr}
   204e4:	mov	r4, r0
   204e8:	mov	r6, r1
   204ec:	bl	20494 <__assert_fail@plt+0xde5c>
   204f0:	mov	r2, #4096	; 0x1000
   204f4:	str	r2, [r4, #8]
   204f8:	mov	r5, r0
   204fc:	mov	r0, #0
   20500:	bl	120ec <sysconf@plt>
   20504:	mov	r2, #0
   20508:	str	r2, [r4]
   2050c:	cmp	r0, #0
   20510:	movgt	r3, r0
   20514:	mvnle	r3, #-2147483648	; 0x80000000
   20518:	cmp	r5, r3
   2051c:	str	r3, [r4, #4]
   20520:	bhi	20584 <__assert_fail@plt+0xdf4c>
   20524:	add	r1, r5, r6
   20528:	cmp	r1, r3
   2052c:	bcc	20538 <__assert_fail@plt+0xdf00>
   20530:	mov	r0, #2
   20534:	pop	{r4, r5, r6, pc}
   20538:	rsb	r3, r5, r3
   2053c:	rsb	r6, r6, r3
   20540:	str	r6, [r4, #4]
   20544:	lsr	r3, r6, #2
   20548:	sub	r3, r3, #2
   2054c:	str	r3, [r4, #16]
   20550:	cmp	r3, r2
   20554:	beq	2058c <__assert_fail@plt+0xdf54>
   20558:	str	r2, [r4, #20]
   2055c:	mov	r0, r2
   20560:	str	r2, [r4, #24]
   20564:	movw	r1, #64704	; 0xfcc0
   20568:	str	r2, [r4, #28]
   2056c:	movt	r1, #1
   20570:	str	r2, [r4, #36]	; 0x24
   20574:	str	r2, [r4, #40]	; 0x28
   20578:	str	r6, [r4, #12]
   2057c:	str	r1, [r4, #32]
   20580:	pop	{r4, r5, r6, pc}
   20584:	mov	r0, #1
   20588:	pop	{r4, r5, r6, pc}
   2058c:	movw	r0, #7660	; 0x1dec
   20590:	movw	r1, #7388	; 0x1cdc
   20594:	movt	r0, #3
   20598:	movt	r1, #3
   2059c:	movw	r2, #535	; 0x217
   205a0:	ldr	r3, [pc]	; 205a8 <__assert_fail@plt+0xdf70>
   205a4:	bl	12638 <__assert_fail@plt>
   205a8:	andeq	r1, r3, r8, asr ip
   205ac:	ldr	r3, [r0, #4]
   205b0:	cmp	r3, #131072	; 0x20000
   205b4:	bcc	205c4 <__assert_fail@plt+0xdf8c>
   205b8:	ldr	r3, [r0, #8]
   205bc:	cmp	r3, #131072	; 0x20000
   205c0:	movls	r3, #131072	; 0x20000
   205c4:	str	r3, [r0, #12]
   205c8:	bx	lr
   205cc:	ldr	r0, [r0, #12]
   205d0:	movw	r3, #63487	; 0xf7ff
   205d4:	movt	r3, #32767	; 0x7fff
   205d8:	cmp	r0, r3
   205dc:	push	{r4, r5, r6, lr}
   205e0:	mov	r5, #0
   205e4:	mov	r4, r1
   205e8:	mov	r6, r2
   205ec:	str	r5, [r1]
   205f0:	str	r5, [r1, #16]
   205f4:	str	r5, [r1, #4]
   205f8:	str	r5, [r1, #8]
   205fc:	str	r5, [r1, #36]	; 0x24
   20600:	str	r5, [r1, #40]	; 0x28
   20604:	bhi	20630 <__assert_fail@plt+0xdff8>
   20608:	add	r0, r0, #1
   2060c:	bl	29604 <__assert_fail@plt+0x16fcc>
   20610:	mvn	r3, #0
   20614:	str	r5, [r4, #20]
   20618:	str	r5, [r4, #16]
   2061c:	str	r5, [r4, #28]
   20620:	str	r6, [r4, #24]
   20624:	str	r3, [r4, #32]
   20628:	str	r0, [r4, #12]
   2062c:	pop	{r4, r5, r6, pc}
   20630:	movw	r0, #7684	; 0x1e04
   20634:	movw	r1, #7388	; 0x1cdc
   20638:	movt	r0, #3
   2063c:	movt	r1, #3
   20640:	movw	r2, #589	; 0x24d
   20644:	ldr	r3, [pc]	; 2064c <__assert_fail@plt+0xe014>
   20648:	bl	12638 <__assert_fail@plt>
   2064c:	andeq	r1, r3, ip, ror #24
   20650:	ldr	r0, [r0, #28]
   20654:	mov	ip, #0
   20658:	ldr	r2, [r1, #20]
   2065c:	mvn	r3, #0
   20660:	str	ip, [r1, #28]
   20664:	str	r0, [r1]
   20668:	str	r2, [r1, #16]
   2066c:	str	r3, [r1, #32]
   20670:	bx	lr
   20674:	ldr	r3, [r0]
   20678:	push	{r4, r5, r6, lr}
   2067c:	cmp	r3, #0
   20680:	beq	206e8 <__assert_fail@plt+0xe0b0>
   20684:	mov	r4, #0
   20688:	mov	r6, r0
   2068c:	mov	r5, r4
   20690:	mov	r0, r3
   20694:	add	r4, r4, #1
   20698:	bl	1232c <strlen@plt>
   2069c:	ldr	r3, [r6, #4]!
   206a0:	cmp	r3, #0
   206a4:	add	r5, r5, r0
   206a8:	bne	20690 <__assert_fail@plt+0xe058>
   206ac:	mov	r1, r4
   206b0:	movw	r0, #7724	; 0x1e2c
   206b4:	movt	r0, #3
   206b8:	bl	1fcc8 <__assert_fail@plt+0xd690>
   206bc:	cmp	r0, #0
   206c0:	beq	206cc <__assert_fail@plt+0xe094>
   206c4:	mov	r0, #1
   206c8:	pop	{r4, r5, r6, pc}
   206cc:	mov	r1, r5
   206d0:	movw	r0, #7764	; 0x1e54
   206d4:	movt	r0, #3
   206d8:	bl	1fcc8 <__assert_fail@plt+0xd690>
   206dc:	adds	r0, r0, #0
   206e0:	movne	r0, #1
   206e4:	pop	{r4, r5, r6, pc}
   206e8:	mov	r4, r3
   206ec:	mov	r5, r3
   206f0:	b	206ac <__assert_fail@plt+0xe074>
   206f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206f8:	movw	r4, #21904	; 0x5590
   206fc:	movt	r4, #4
   20700:	sub	sp, sp, #8192	; 0x2000
   20704:	sub	sp, sp, #28
   20708:	cmp	r2, #0
   2070c:	ldr	r2, [r4]
   20710:	mov	r6, r3
   20714:	add	r3, sp, #8192	; 0x2000
   20718:	mov	r9, r1
   2071c:	mov	sl, r0
   20720:	ldr	r5, [r3, #64]	; 0x40
   20724:	str	r2, [r3, #20]
   20728:	beq	2077c <__assert_fail@plt+0xe144>
   2072c:	add	r7, sp, #20
   20730:	str	r1, [sp]
   20734:	mov	r2, r5
   20738:	mov	r1, #8192	; 0x2000
   2073c:	mvn	r3, #0
   20740:	mov	r0, r7
   20744:	bl	28ab0 <__assert_fail@plt+0x16478>
   20748:	cmp	r0, #8192	; 0x2000
   2074c:	mov	r8, r0
   20750:	bcs	207b4 <__assert_fail@plt+0xe17c>
   20754:	mov	r1, r0
   20758:	mov	r0, r7
   2075c:	bl	2134c <__assert_fail@plt+0xed14>
   20760:	mov	r0, sl
   20764:	mov	r2, r6
   20768:	mov	r3, r7
   2076c:	mov	r1, #1
   20770:	bl	12428 <__fprintf_chk@plt>
   20774:	mov	r5, r0
   20778:	b	20790 <__assert_fail@plt+0xe158>
   2077c:	mov	r3, r5
   20780:	mov	r2, r6
   20784:	mov	r1, #1
   20788:	bl	12428 <__fprintf_chk@plt>
   2078c:	mov	r5, r0
   20790:	add	r3, sp, #8192	; 0x2000
   20794:	mov	r0, r5
   20798:	ldr	r2, [r3, #20]
   2079c:	ldr	r3, [r4]
   207a0:	cmp	r2, r3
   207a4:	bne	20814 <__assert_fail@plt+0xe1dc>
   207a8:	add	sp, sp, #8192	; 0x2000
   207ac:	add	sp, sp, #28
   207b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207b4:	add	r1, r0, #1
   207b8:	str	r1, [sp, #12]
   207bc:	mov	r0, r1
   207c0:	bl	29604 <__assert_fail@plt+0x16fcc>
   207c4:	mov	r2, r5
   207c8:	mvn	r3, #0
   207cc:	ldr	r1, [sp, #12]
   207d0:	str	r9, [sp]
   207d4:	mov	fp, r0
   207d8:	bl	28ab0 <__assert_fail@plt+0x16478>
   207dc:	mov	r1, r8
   207e0:	mov	r0, fp
   207e4:	bl	2134c <__assert_fail@plt+0xed14>
   207e8:	mov	r0, sl
   207ec:	mov	r2, r6
   207f0:	mov	r3, fp
   207f4:	mov	r1, #1
   207f8:	bl	12428 <__fprintf_chk@plt>
   207fc:	cmp	fp, r7
   20800:	mov	r5, r0
   20804:	beq	20790 <__assert_fail@plt+0xe158>
   20808:	mov	r0, fp
   2080c:	bl	12020 <free@plt>
   20810:	b	20790 <__assert_fail@plt+0xe158>
   20814:	bl	120e0 <__stack_chk_fail@plt>
   20818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2081c:	mov	r4, #0
   20820:	movw	r7, #21664	; 0x54a0
   20824:	sub	sp, sp, #12
   20828:	movt	r7, #4
   2082c:	mov	r8, r0
   20830:	mov	sl, r4
   20834:	mov	r5, r4
   20838:	ldr	r9, [r7, r4]
   2083c:	mov	r1, r8
   20840:	movw	r6, #21664	; 0x54a0
   20844:	add	r4, r4, #12
   20848:	movt	r6, #4
   2084c:	mov	r0, r9
   20850:	bl	11fb4 <strcmp@plt>
   20854:	cmp	r0, #0
   20858:	mov	r0, r9
   2085c:	beq	20930 <__assert_fail@plt+0xe2f8>
   20860:	bl	28fcc <__assert_fail@plt+0x16994>
   20864:	add	r5, r5, #1
   20868:	bl	1232c <strlen@plt>
   2086c:	cmp	r5, #13
   20870:	add	r0, r0, #2
   20874:	add	sl, sl, r0
   20878:	bne	20838 <__assert_fail@plt+0xe200>
   2087c:	add	r0, sl, #1
   20880:	mov	r9, #0
   20884:	bl	29604 <__assert_fail@plt+0x16fcc>
   20888:	movw	sl, #7804	; 0x1e7c
   2088c:	mov	r5, #1
   20890:	movt	sl, #3
   20894:	mov	fp, r0
   20898:	mov	r6, r0
   2089c:	b	208a8 <__assert_fail@plt+0xe270>
   208a0:	add	r5, r5, #1
   208a4:	add	r9, r9, #12
   208a8:	cmp	r5, #1
   208ac:	mov	r4, r6
   208b0:	beq	20944 <__assert_fail@plt+0xe30c>
   208b4:	ldrh	r2, [sl]
   208b8:	ldrb	r3, [sl, #2]
   208bc:	ldr	r0, [r7, r9]
   208c0:	strh	r2, [r6]
   208c4:	strb	r3, [r4, #2]!
   208c8:	bl	28fcc <__assert_fail@plt+0x16994>
   208cc:	movw	r1, #8288	; 0x2060
   208d0:	movt	r1, #3
   208d4:	mov	r2, r0
   208d8:	mov	r0, r4
   208dc:	bl	124f4 <sprintf@plt>
   208e0:	cmp	r5, #13
   208e4:	add	r6, r4, r0
   208e8:	bne	208a0 <__assert_fail@plt+0xe268>
   208ec:	mov	r2, #5
   208f0:	movw	r1, #7808	; 0x1e80
   208f4:	mov	r0, #0
   208f8:	movt	r1, #3
   208fc:	bl	120d4 <dcgettext@plt>
   20900:	mov	r4, r0
   20904:	mov	r0, r8
   20908:	bl	28fcc <__assert_fail@plt+0x16994>
   2090c:	mov	r2, r4
   20910:	str	fp, [sp]
   20914:	mov	r1, #0
   20918:	mov	r3, r0
   2091c:	mov	r0, #1
   20920:	bl	12224 <error@plt>
   20924:	mvn	r0, #0
   20928:	add	sp, sp, #12
   2092c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20930:	add	r5, r5, r5, lsl #1
   20934:	add	r6, r6, r5, lsl #2
   20938:	ldr	r0, [r6, #8]
   2093c:	add	sp, sp, #12
   20940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20944:	ldr	r0, [r7, r9]
   20948:	bl	28fcc <__assert_fail@plt+0x16994>
   2094c:	movw	r1, #8288	; 0x2060
   20950:	movt	r1, #3
   20954:	mov	r2, r0
   20958:	mov	r0, r6
   2095c:	bl	124f4 <sprintf@plt>
   20960:	add	r6, r6, r0
   20964:	b	208a0 <__assert_fail@plt+0xe268>
   20968:	cmp	r0, #12
   2096c:	addls	r0, r0, r0, lsl #1
   20970:	movwls	r3, #21664	; 0x54a0
   20974:	movtls	r3, #4
   20978:	ldrls	r0, [r3, r0, lsl #2]
   2097c:	movhi	r0, #0
   20980:	bx	lr
   20984:	cmp	r0, #12
   20988:	addls	r0, r0, r0, lsl #1
   2098c:	movwls	r3, #21664	; 0x54a0
   20990:	movtls	r3, #4
   20994:	addls	r3, r3, r0, lsl #2
   20998:	ldrls	r0, [r3, #8]
   2099c:	mvnhi	r0, #0
   209a0:	bx	lr
   209a4:	cmp	r0, #12
   209a8:	addls	r0, r0, r0, lsl #1
   209ac:	movwls	r3, #21664	; 0x54a0
   209b0:	movtls	r3, #4
   209b4:	addls	r3, r3, r0, lsl #2
   209b8:	ldrls	r0, [r3, #4]
   209bc:	movhi	r0, #0
   209c0:	bx	lr
   209c4:	cmp	r0, #12
   209c8:	bhi	20a18 <__assert_fail@plt+0xe3e0>
   209cc:	add	r3, r0, r0, lsl #1
   209d0:	movw	r2, #21664	; 0x54a0
   209d4:	movt	r2, #4
   209d8:	cmp	r0, #0
   209dc:	add	r3, r2, r3, lsl #2
   209e0:	ldr	ip, [r3, #8]
   209e4:	beq	20a18 <__assert_fail@plt+0xe3e0>
   209e8:	ldr	r3, [r2, #8]
   209ec:	cmp	r3, ip
   209f0:	movne	r3, #0
   209f4:	bne	20a08 <__assert_fail@plt+0xe3d0>
   209f8:	b	20a28 <__assert_fail@plt+0xe3f0>
   209fc:	ldr	r1, [r2, #8]
   20a00:	cmp	r1, ip
   20a04:	beq	20a20 <__assert_fail@plt+0xe3e8>
   20a08:	add	r3, r3, #1
   20a0c:	add	r2, r2, #12
   20a10:	cmp	r3, r0
   20a14:	bne	209fc <__assert_fail@plt+0xe3c4>
   20a18:	mvn	r0, #0
   20a1c:	bx	lr
   20a20:	mov	r0, r3
   20a24:	bx	lr
   20a28:	mov	r0, #0
   20a2c:	bx	lr
   20a30:	push	{r4, r5, r6, r7, lr}
   20a34:	movw	r4, #21904	; 0x5590
   20a38:	movt	r4, #4
   20a3c:	sub	sp, sp, #20
   20a40:	mov	r5, r0
   20a44:	add	r0, sp, #4
   20a48:	ldr	r3, [r4]
   20a4c:	mov	r6, r1
   20a50:	mov	r7, r2
   20a54:	str	r3, [sp, #12]
   20a58:	bl	28fe4 <__assert_fail@plt+0x169ac>
   20a5c:	cmp	r0, #0
   20a60:	bne	20ae4 <__assert_fail@plt+0xe4ac>
   20a64:	mov	r0, r5
   20a68:	bl	29040 <__assert_fail@plt+0x16a08>
   20a6c:	subs	r5, r0, #0
   20a70:	bne	20ad4 <__assert_fail@plt+0xe49c>
   20a74:	mov	r0, r7
   20a78:	blx	r6
   20a7c:	subs	r6, r0, #0
   20a80:	blt	20ac8 <__assert_fail@plt+0xe490>
   20a84:	add	r0, sp, #4
   20a88:	bl	29040 <__assert_fail@plt+0x16a08>
   20a8c:	cmp	r0, #0
   20a90:	bne	20ad4 <__assert_fail@plt+0xe49c>
   20a94:	add	r0, sp, #4
   20a98:	bl	2905c <__assert_fail@plt+0x16a24>
   20a9c:	cmp	r5, #0
   20aa0:	beq	20aac <__assert_fail@plt+0xe474>
   20aa4:	bl	1238c <__errno_location@plt>
   20aa8:	str	r5, [r0]
   20aac:	ldr	r2, [sp, #12]
   20ab0:	mov	r0, r6
   20ab4:	ldr	r3, [r4]
   20ab8:	cmp	r2, r3
   20abc:	bne	20ae0 <__assert_fail@plt+0xe4a8>
   20ac0:	add	sp, sp, #20
   20ac4:	pop	{r4, r5, r6, r7, pc}
   20ac8:	bl	1238c <__errno_location@plt>
   20acc:	ldr	r5, [r0]
   20ad0:	b	20a84 <__assert_fail@plt+0xe44c>
   20ad4:	bl	1238c <__errno_location@plt>
   20ad8:	ldr	r0, [r0]
   20adc:	bl	25964 <__assert_fail@plt+0x1332c>
   20ae0:	bl	120e0 <__stack_chk_fail@plt>
   20ae4:	bl	1238c <__errno_location@plt>
   20ae8:	ldr	r0, [r0]
   20aec:	bl	25928 <__assert_fail@plt+0x132f0>
   20af0:	push	{r4, r5, r6, r7, lr}
   20af4:	movw	r4, #21904	; 0x5590
   20af8:	movt	r4, #4
   20afc:	sub	sp, sp, #20
   20b00:	cmn	r0, #100	; 0x64
   20b04:	mov	r5, r0
   20b08:	ldr	r3, [r4]
   20b0c:	mov	r6, r1
   20b10:	mov	r7, r2
   20b14:	str	r3, [sp, #12]
   20b18:	beq	20bb8 <__assert_fail@plt+0xe580>
   20b1c:	add	r0, sp, #4
   20b20:	bl	28fe4 <__assert_fail@plt+0x169ac>
   20b24:	cmp	r0, #0
   20b28:	bne	20bd8 <__assert_fail@plt+0xe5a0>
   20b2c:	mov	r0, r5
   20b30:	bl	12524 <fchdir@plt>
   20b34:	subs	r5, r0, #0
   20b38:	bne	20b98 <__assert_fail@plt+0xe560>
   20b3c:	mov	r0, r7
   20b40:	blx	r6
   20b44:	subs	r6, r0, #0
   20b48:	blt	20bc8 <__assert_fail@plt+0xe590>
   20b4c:	add	r0, sp, #4
   20b50:	bl	29040 <__assert_fail@plt+0x16a08>
   20b54:	cmp	r0, #0
   20b58:	bne	20be4 <__assert_fail@plt+0xe5ac>
   20b5c:	add	r0, sp, #4
   20b60:	bl	2905c <__assert_fail@plt+0x16a24>
   20b64:	cmp	r5, #0
   20b68:	moveq	r3, r6
   20b6c:	beq	20b7c <__assert_fail@plt+0xe544>
   20b70:	bl	1238c <__errno_location@plt>
   20b74:	mov	r3, r6
   20b78:	str	r5, [r0]
   20b7c:	ldr	r2, [sp, #12]
   20b80:	mov	r0, r3
   20b84:	ldr	r3, [r4]
   20b88:	cmp	r2, r3
   20b8c:	bne	20bd4 <__assert_fail@plt+0xe59c>
   20b90:	add	sp, sp, #20
   20b94:	pop	{r4, r5, r6, r7, pc}
   20b98:	bl	1238c <__errno_location@plt>
   20b9c:	ldr	r6, [r0]
   20ba0:	mov	r5, r0
   20ba4:	add	r0, sp, #4
   20ba8:	bl	2905c <__assert_fail@plt+0x16a24>
   20bac:	mvn	r3, #0
   20bb0:	str	r6, [r5]
   20bb4:	b	20b7c <__assert_fail@plt+0xe544>
   20bb8:	mov	r0, r2
   20bbc:	blx	r1
   20bc0:	mov	r3, r0
   20bc4:	b	20b7c <__assert_fail@plt+0xe544>
   20bc8:	bl	1238c <__errno_location@plt>
   20bcc:	ldr	r5, [r0]
   20bd0:	b	20b4c <__assert_fail@plt+0xe514>
   20bd4:	bl	120e0 <__stack_chk_fail@plt>
   20bd8:	bl	1238c <__errno_location@plt>
   20bdc:	ldr	r0, [r0]
   20be0:	bl	25928 <__assert_fail@plt+0x132f0>
   20be4:	bl	1238c <__errno_location@plt>
   20be8:	ldr	r0, [r0]
   20bec:	bl	25964 <__assert_fail@plt+0x1332c>
   20bf0:	push	{r4, r5, r6, lr}
   20bf4:	movw	r0, #8020	; 0x1f54
   20bf8:	movt	r0, #3
   20bfc:	bl	219b4 <__assert_fail@plt+0xf37c>
   20c00:	subs	r5, r0, #0
   20c04:	movne	r6, #0
   20c08:	mvnne	r4, #0
   20c0c:	beq	20c74 <__assert_fail@plt+0xe63c>
   20c10:	mov	r0, r5
   20c14:	bl	12500 <readdir64@plt>
   20c18:	mov	r1, #0
   20c1c:	subs	r3, r0, #0
   20c20:	add	r0, r3, #19
   20c24:	beq	20c5c <__assert_fail@plt+0xe624>
   20c28:	ldrb	r2, [r3, #19]
   20c2c:	cmp	r2, #46	; 0x2e
   20c30:	bne	20c48 <__assert_fail@plt+0xe610>
   20c34:	ldrb	r3, [r3, #20]
   20c38:	cmp	r3, #0
   20c3c:	beq	20c10 <__assert_fail@plt+0xe5d8>
   20c40:	cmp	r3, #46	; 0x2e
   20c44:	beq	20c10 <__assert_fail@plt+0xe5d8>
   20c48:	bl	21174 <__assert_fail@plt+0xeb3c>
   20c4c:	mov	r6, #1
   20c50:	cmp	r4, r0
   20c54:	movlt	r4, r0
   20c58:	b	20c10 <__assert_fail@plt+0xe5d8>
   20c5c:	mov	r0, r5
   20c60:	bl	125fc <closedir@plt>
   20c64:	cmp	r6, #0
   20c68:	beq	20c74 <__assert_fail@plt+0xe63c>
   20c6c:	mov	r0, r4
   20c70:	pop	{r4, r5, r6, pc}
   20c74:	mvn	r0, #0
   20c78:	pop	{r4, r5, r6, pc}
   20c7c:	push	{r4, r5, r6, lr}
   20c80:	mov	r4, r1
   20c84:	mov	r1, #1
   20c88:	mov	r6, r0
   20c8c:	bl	2a868 <__assert_fail@plt+0x18230>
   20c90:	ands	r5, r0, #1
   20c94:	movne	r5, #0
   20c98:	bne	20cd4 <__assert_fail@plt+0xe69c>
   20c9c:	ldr	r1, [r4, #4]
   20ca0:	add	r2, r4, #8
   20ca4:	ldr	r0, [r4]
   20ca8:	add	r1, r1, #1
   20cac:	lsl	r1, r1, #2
   20cb0:	bl	1fb9c <__assert_fail@plt+0xd564>
   20cb4:	cmp	r0, #0
   20cb8:	strne	r0, [r4]
   20cbc:	ldrne	r3, [r4, #4]
   20cc0:	mvneq	r5, #0
   20cc4:	strne	r6, [r0, r3, lsl #2]
   20cc8:	ldrne	r3, [r4, #4]
   20ccc:	addne	r3, r3, #1
   20cd0:	strne	r3, [r4, #4]
   20cd4:	mov	r0, r5
   20cd8:	pop	{r4, r5, r6, pc}
   20cdc:	push	{r3, r4, r5, lr}
   20ce0:	mov	r4, r1
   20ce4:	mov	r1, #1
   20ce8:	mov	r5, r0
   20cec:	bl	2a868 <__assert_fail@plt+0x18230>
   20cf0:	ands	r0, r0, #1
   20cf4:	bne	20d44 <__assert_fail@plt+0xe70c>
   20cf8:	ldmib	r4, {r1, r3}
   20cfc:	cmp	r1, r3
   20d00:	bls	20d38 <__assert_fail@plt+0xe700>
   20d04:	ldr	r2, [r4]
   20d08:	add	ip, r2, r3, lsl #2
   20d0c:	ldr	r2, [r2, r3, lsl #2]
   20d10:	cmp	r5, r2
   20d14:	bgt	20d28 <__assert_fail@plt+0xe6f0>
   20d18:	b	20d4c <__assert_fail@plt+0xe714>
   20d1c:	ldr	r2, [ip, #4]!
   20d20:	cmp	r5, r2
   20d24:	ble	20d4c <__assert_fail@plt+0xe714>
   20d28:	add	r3, r3, #1
   20d2c:	str	r3, [r4, #8]
   20d30:	cmp	r3, r1
   20d34:	bcc	20d1c <__assert_fail@plt+0xe6e4>
   20d38:	str	r5, [r4, #12]
   20d3c:	mvn	r0, #0
   20d40:	pop	{r3, r4, r5, pc}
   20d44:	mov	r0, #0
   20d48:	pop	{r3, r4, r5, pc}
   20d4c:	cmp	r5, r2
   20d50:	popeq	{r3, r4, r5, pc}
   20d54:	b	20d38 <__assert_fail@plt+0xe700>
   20d58:	push	{r4, r5, r6, r7, lr}
   20d5c:	movw	r6, #21904	; 0x5590
   20d60:	movt	r6, #4
   20d64:	sub	sp, sp, #28
   20d68:	mov	r0, #4
   20d6c:	ldr	r3, [r6]
   20d70:	str	r3, [sp, #20]
   20d74:	bl	120ec <sysconf@plt>
   20d78:	mov	r1, sp
   20d7c:	cmn	r0, #1
   20d80:	movne	r7, r0
   20d84:	mov	r0, #7
   20d88:	moveq	r7, #20
   20d8c:	bl	120f8 <getrlimit64@plt>
   20d90:	cmp	r0, #0
   20d94:	movne	r0, r7
   20d98:	bne	20db8 <__assert_fail@plt+0xe780>
   20d9c:	ldrd	r2, [sp]
   20da0:	mvn	r4, #0
   20da4:	mvn	r5, #0
   20da8:	cmp	r3, r5
   20dac:	cmpeq	r2, r4
   20db0:	moveq	r0, r7
   20db4:	movne	r0, r2
   20db8:	ldr	r1, [sp, #20]
   20dbc:	ldr	r3, [r6]
   20dc0:	cmp	r1, r3
   20dc4:	bne	20dd0 <__assert_fail@plt+0xe798>
   20dc8:	add	sp, sp, #28
   20dcc:	pop	{r4, r5, r6, r7, pc}
   20dd0:	bl	120e0 <__stack_chk_fail@plt>
   20dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dd8:	movw	r3, #21904	; 0x5590
   20ddc:	sub	sp, sp, #540	; 0x21c
   20de0:	movt	r3, #4
   20de4:	cmp	r0, #0
   20de8:	mov	r7, r1
   20dec:	str	r3, [sp, #12]
   20df0:	mov	r8, r2
   20df4:	ldr	r3, [r3]
   20df8:	str	r0, [sp, #8]
   20dfc:	str	r3, [sp, #532]	; 0x214
   20e00:	ble	20ed4 <__assert_fail@plt+0xe89c>
   20e04:	mov	r1, #0
   20e08:	add	r4, sp, #20
   20e0c:	mov	r6, r1
   20e10:	mov	r5, #5
   20e14:	str	r1, [sp, #4]
   20e18:	ldr	r2, [sp, #8]
   20e1c:	ldr	r3, [sp, #4]
   20e20:	rsb	ip, r3, r2
   20e24:	cmp	ip, #64	; 0x40
   20e28:	movlt	fp, ip
   20e2c:	movge	fp, #64	; 0x40
   20e30:	cmp	fp, #0
   20e34:	ble	20ef4 <__assert_fail@plt+0xe8bc>
   20e38:	lsl	r0, fp, #3
   20e3c:	mov	r2, r3
   20e40:	mov	r3, #0
   20e44:	add	r1, r4, r3
   20e48:	strh	r5, [r1, #4]
   20e4c:	strh	r6, [r1, #6]
   20e50:	str	r2, [r4, r3]
   20e54:	add	r3, r3, #8
   20e58:	cmp	r3, r0
   20e5c:	add	r2, r2, #1
   20e60:	bne	20e44 <__assert_fail@plt+0xe80c>
   20e64:	mov	r0, r4
   20e68:	mov	r1, fp
   20e6c:	mov	r2, #0
   20e70:	mov	r3, #512	; 0x200
   20e74:	bl	12170 <__poll_chk@plt>
   20e78:	cmn	r0, #1
   20e7c:	beq	20ed8 <__assert_fail@plt+0xe8a0>
   20e80:	mov	r9, #0
   20e84:	mov	sl, r9
   20e88:	add	r1, r4, r9
   20e8c:	ldrsh	r1, [r1, #6]
   20e90:	cmp	r1, #32
   20e94:	beq	20eac <__assert_fail@plt+0xe874>
   20e98:	ldr	r0, [r4, r9]
   20e9c:	mov	r1, r8
   20ea0:	blx	r7
   20ea4:	cmp	r0, #0
   20ea8:	bne	20ed8 <__assert_fail@plt+0xe8a0>
   20eac:	add	sl, sl, #1
   20eb0:	add	r9, r9, #8
   20eb4:	cmp	sl, fp
   20eb8:	bne	20e88 <__assert_fail@plt+0xe850>
   20ebc:	ldr	r1, [sp, #4]
   20ec0:	ldr	r2, [sp, #8]
   20ec4:	add	r1, r1, fp
   20ec8:	str	r1, [sp, #4]
   20ecc:	cmp	r2, r1
   20ed0:	bgt	20e18 <__assert_fail@plt+0xe7e0>
   20ed4:	mov	r0, #0
   20ed8:	ldr	r1, [sp, #12]
   20edc:	ldr	r2, [sp, #532]	; 0x214
   20ee0:	ldr	r3, [r1]
   20ee4:	cmp	r2, r3
   20ee8:	bne	20f14 <__assert_fail@plt+0xe8dc>
   20eec:	add	sp, sp, #540	; 0x21c
   20ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ef4:	mov	r0, r4
   20ef8:	mov	r1, fp
   20efc:	mov	r2, #0
   20f00:	mov	r3, #512	; 0x200
   20f04:	bl	12170 <__poll_chk@plt>
   20f08:	cmn	r0, #1
   20f0c:	bne	20ebc <__assert_fail@plt+0xe884>
   20f10:	b	20ed8 <__assert_fail@plt+0xe8a0>
   20f14:	bl	120e0 <__stack_chk_fail@plt>
   20f18:	push	{r4, lr}
   20f1c:	movw	r4, #21904	; 0x5590
   20f20:	movt	r4, #4
   20f24:	sub	sp, sp, #16
   20f28:	ldr	r3, [r4]
   20f2c:	str	r3, [sp, #12]
   20f30:	bl	20bf0 <__assert_fail@plt+0xe5b8>
   20f34:	cmp	r0, #0
   20f38:	blt	20f90 <__assert_fail@plt+0xe958>
   20f3c:	cmn	r0, #-2147483647	; 0x80000001
   20f40:	mov	r2, sp
   20f44:	addne	r0, r0, #1
   20f48:	movw	r1, #3196	; 0xc7c
   20f4c:	movt	r1, #2
   20f50:	mov	r3, #0
   20f54:	str	r3, [sp]
   20f58:	str	r3, [sp, #8]
   20f5c:	str	r3, [sp, #4]
   20f60:	bl	20dd4 <__assert_fail@plt+0xe79c>
   20f64:	ldr	ip, [sp, #12]
   20f68:	movw	r3, #23952	; 0x5d90
   20f6c:	ldr	r0, [r4]
   20f70:	movt	r3, #4
   20f74:	ldr	r1, [sp]
   20f78:	ldr	r2, [sp, #4]
   20f7c:	cmp	ip, r0
   20f80:	stm	r3, {r1, r2}
   20f84:	bne	20f98 <__assert_fail@plt+0xe960>
   20f88:	add	sp, sp, #16
   20f8c:	pop	{r4, pc}
   20f90:	bl	20d58 <__assert_fail@plt+0xe720>
   20f94:	b	20f3c <__assert_fail@plt+0xe904>
   20f98:	bl	120e0 <__stack_chk_fail@plt>
   20f9c:	push	{r1, r2, r3}
   20fa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20fa4:	sub	sp, sp, #12
   20fa8:	movw	r5, #21904	; 0x5590
   20fac:	movt	r5, #4
   20fb0:	ldr	r6, [sp, #44]	; 0x2c
   20fb4:	movw	r4, #23952	; 0x5d90
   20fb8:	movt	r4, #4
   20fbc:	ldr	r3, [r5]
   20fc0:	ands	r8, r6, #64	; 0x40
   20fc4:	mov	r9, r0
   20fc8:	ldrb	r7, [r4, #8]
   20fcc:	str	r3, [sp, #4]
   20fd0:	addne	r3, sp, #48	; 0x30
   20fd4:	ldrne	r8, [sp, #48]	; 0x30
   20fd8:	strne	r3, [sp]
   20fdc:	cmp	r7, #0
   20fe0:	beq	21038 <__assert_fail@plt+0xea00>
   20fe4:	orr	r1, r6, #524288	; 0x80000
   20fe8:	mov	r0, r9
   20fec:	mov	r2, r8
   20ff0:	bl	21c38 <__assert_fail@plt+0xf600>
   20ff4:	subs	r6, r0, #0
   20ff8:	blt	21008 <__assert_fail@plt+0xe9d0>
   20ffc:	ldrb	r3, [r4, #9]
   21000:	cmp	r3, #0
   21004:	beq	2102c <__assert_fail@plt+0xe9f4>
   21008:	ldr	r2, [sp, #4]
   2100c:	mov	r0, r6
   21010:	ldr	r3, [r5]
   21014:	cmp	r2, r3
   21018:	bne	21074 <__assert_fail@plt+0xea3c>
   2101c:	add	sp, sp, #12
   21020:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   21024:	add	sp, sp, #12
   21028:	bx	lr
   2102c:	mov	r1, #1
   21030:	bl	21720 <__assert_fail@plt+0xf0e8>
   21034:	b	21008 <__assert_fail@plt+0xe9d0>
   21038:	movw	r0, #6324	; 0x18b4
   2103c:	mov	r1, #524288	; 0x80000
   21040:	movt	r0, #3
   21044:	bl	21c38 <__assert_fail@plt+0xf600>
   21048:	subs	sl, r0, #0
   2104c:	blt	21064 <__assert_fail@plt+0xea2c>
   21050:	mov	r1, #1
   21054:	bl	2a868 <__assert_fail@plt+0x18230>
   21058:	and	r7, r0, #1
   2105c:	mov	r0, sl
   21060:	bl	125d8 <close@plt>
   21064:	mov	r3, #1
   21068:	strb	r7, [r4, #9]
   2106c:	strb	r3, [r4, #8]
   21070:	b	20fe4 <__assert_fail@plt+0xe9ac>
   21074:	bl	120e0 <__stack_chk_fail@plt>
   21078:	push	{r4, lr}
   2107c:	movw	r4, #23952	; 0x5d90
   21080:	movt	r4, #4
   21084:	ldr	r0, [r4]
   21088:	bl	12020 <free@plt>
   2108c:	mov	r3, #0
   21090:	str	r3, [r4]
   21094:	str	r3, [r4, #4]
   21098:	pop	{r4, pc}
   2109c:	push	{r4, r5, r6, lr}
   210a0:	movw	r4, #21904	; 0x5590
   210a4:	movt	r4, #4
   210a8:	sub	sp, sp, #24
   210ac:	movw	r3, #23952	; 0x5d90
   210b0:	movt	r3, #4
   210b4:	ldr	r2, [r4]
   210b8:	ldm	r3, {r5, r6}
   210bc:	str	r2, [sp, #20]
   210c0:	bl	20bf0 <__assert_fail@plt+0xe5b8>
   210c4:	cmp	r0, #0
   210c8:	blt	21168 <__assert_fail@plt+0xeb30>
   210cc:	cmn	r0, #-2147483647	; 0x80000001
   210d0:	movw	r1, #3292	; 0xcdc
   210d4:	addne	r0, r0, #1
   210d8:	add	r2, sp, #4
   210dc:	movt	r1, #2
   210e0:	str	r5, [sp, #4]
   210e4:	str	r6, [sp, #8]
   210e8:	mov	r5, #0
   210ec:	mvn	r3, #0
   210f0:	str	r5, [sp, #12]
   210f4:	str	r3, [sp, #16]
   210f8:	bl	20dd4 <__assert_fail@plt+0xe79c>
   210fc:	ldr	r6, [sp, #16]
   21100:	cmp	r6, r5
   21104:	blt	21150 <__assert_fail@plt+0xeb18>
   21108:	mov	r2, #5
   2110c:	movw	r1, #8036	; 0x1f64
   21110:	mov	r0, r5
   21114:	movt	r1, #3
   21118:	bl	120d4 <dcgettext@plt>
   2111c:	mov	r1, r5
   21120:	mov	r3, r6
   21124:	mov	r2, r0
   21128:	mov	r0, r5
   2112c:	bl	12224 <error@plt>
   21130:	movw	r0, #8188	; 0x1ffc
   21134:	movw	r1, #8200	; 0x2008
   21138:	movw	r3, #7992	; 0x1f38
   2113c:	movt	r0, #3
   21140:	movt	r1, #3
   21144:	movw	r2, #382	; 0x17e
   21148:	movt	r3, #3
   2114c:	bl	12638 <__assert_fail@plt>
   21150:	ldr	r2, [sp, #20]
   21154:	ldr	r3, [r4]
   21158:	cmp	r2, r3
   2115c:	bne	21170 <__assert_fail@plt+0xeb38>
   21160:	add	sp, sp, #24
   21164:	pop	{r4, r5, r6, pc}
   21168:	bl	20d58 <__assert_fail@plt+0xe720>
   2116c:	b	210cc <__assert_fail@plt+0xea94>
   21170:	bl	120e0 <__stack_chk_fail@plt>
   21174:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21178:	movw	r4, #21904	; 0x5590
   2117c:	movt	r4, #4
   21180:	sub	sp, sp, #16
   21184:	mov	r5, r0
   21188:	mov	r9, r1
   2118c:	ldr	r3, [r4]
   21190:	str	r3, [sp, #12]
   21194:	bl	1238c <__errno_location@plt>
   21198:	mov	r3, #0
   2119c:	add	r1, sp, #8
   211a0:	mov	r2, #10
   211a4:	mov	r7, r0
   211a8:	mov	r0, r5
   211ac:	str	r3, [r7]
   211b0:	bl	11fc0 <strtol@plt>
   211b4:	sub	r3, r0, #-2147483647	; 0x80000001
   211b8:	mov	r6, r0
   211bc:	cmn	r3, #3
   211c0:	bls	211dc <__assert_fail@plt+0xeba4>
   211c4:	movw	r2, #8288	; 0x2060
   211c8:	ldr	r1, [r7]
   211cc:	mov	r0, #1
   211d0:	movt	r2, #3
   211d4:	mov	r3, r5
   211d8:	bl	12224 <error@plt>
   211dc:	ldr	r3, [sp, #8]
   211e0:	ldrb	r8, [r3]
   211e4:	cmp	r8, #0
   211e8:	bne	21210 <__assert_fail@plt+0xebd8>
   211ec:	cmp	r5, r3
   211f0:	beq	2126c <__assert_fail@plt+0xec34>
   211f4:	ldr	r2, [sp, #12]
   211f8:	mov	r0, r6
   211fc:	ldr	r3, [r4]
   21200:	cmp	r2, r3
   21204:	bne	212b0 <__assert_fail@plt+0xec78>
   21208:	add	sp, sp, #16
   2120c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21210:	mov	r2, #5
   21214:	movw	r1, #8212	; 0x2014
   21218:	mov	r0, #0
   2121c:	movt	r1, #3
   21220:	ldr	sl, [r7]
   21224:	bl	120d4 <dcgettext@plt>
   21228:	mov	r1, r9
   2122c:	ldr	r2, [sp, #8]
   21230:	mov	r8, r0
   21234:	mov	r0, #0
   21238:	bl	28cec <__assert_fail@plt+0x166b4>
   2123c:	mov	r1, r9
   21240:	mov	r2, r5
   21244:	mov	r7, r0
   21248:	mov	r0, #1
   2124c:	bl	28cec <__assert_fail@plt+0x166b4>
   21250:	mov	r1, sl
   21254:	mov	r2, r8
   21258:	mov	r3, r7
   2125c:	str	r0, [sp]
   21260:	mov	r0, #1
   21264:	bl	12224 <error@plt>
   21268:	b	211f4 <__assert_fail@plt+0xebbc>
   2126c:	mov	r0, r8
   21270:	mov	r2, #5
   21274:	movw	r1, #8240	; 0x2030
   21278:	movt	r1, #3
   2127c:	ldr	sl, [r7]
   21280:	bl	120d4 <dcgettext@plt>
   21284:	mov	r1, r9
   21288:	mov	r2, r5
   2128c:	mov	r7, r0
   21290:	mov	r0, r8
   21294:	bl	28cec <__assert_fail@plt+0x166b4>
   21298:	mov	r1, sl
   2129c:	mov	r2, r7
   212a0:	mov	r3, r0
   212a4:	mov	r0, #1
   212a8:	bl	12224 <error@plt>
   212ac:	b	211f4 <__assert_fail@plt+0xebbc>
   212b0:	bl	120e0 <__stack_chk_fail@plt>
   212b4:	cmp	r2, #0
   212b8:	push	{r3, r4, r5, lr}
   212bc:	ldr	r4, [sp, #16]
   212c0:	beq	212fc <__assert_fail@plt+0xecc4>
   212c4:	mov	r2, #0
   212c8:	str	r2, [r3]
   212cc:	str	r2, [r4]
   212d0:	ldr	r5, [r3]
   212d4:	ldrb	r3, [r1]
   212d8:	add	r5, r0, r5
   212dc:	cmp	r3, #0
   212e0:	beq	21330 <__assert_fail@plt+0xecf8>
   212e4:	mov	r0, r5
   212e8:	bl	12554 <strpbrk@plt>
   212ec:	cmp	r0, #0
   212f0:	beq	21330 <__assert_fail@plt+0xecf8>
   212f4:	rsb	r0, r5, r0
   212f8:	b	21338 <__assert_fail@plt+0xed00>
   212fc:	ldr	r2, [r4]
   21300:	ldr	r5, [r3]
   21304:	add	r5, r5, r2
   21308:	str	r5, [r3]
   2130c:	ldrb	r2, [r0, r5]
   21310:	cmp	r2, #0
   21314:	beq	21344 <__assert_fail@plt+0xed0c>
   21318:	add	r5, r5, #1
   2131c:	str	r5, [r3]
   21320:	ldrb	r3, [r1]
   21324:	add	r5, r0, r5
   21328:	cmp	r3, #0
   2132c:	bne	212e4 <__assert_fail@plt+0xecac>
   21330:	mov	r0, r5
   21334:	bl	1232c <strlen@plt>
   21338:	str	r0, [r4]
   2133c:	mov	r0, #1
   21340:	pop	{r3, r4, r5, pc}
   21344:	mov	r0, r2
   21348:	pop	{r3, r4, r5, pc}
   2134c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21350:	movw	sl, #21904	; 0x5590
   21354:	movt	sl, #4
   21358:	sub	sp, sp, #20
   2135c:	mov	r9, r0
   21360:	mov	r6, r1
   21364:	ldr	r3, [sl]
   21368:	str	r3, [sp, #12]
   2136c:	bl	121dc <__ctype_get_mb_cur_max@plt>
   21370:	cmp	r0, #1
   21374:	bls	214b0 <__assert_fail@plt+0xee78>
   21378:	add	r6, r9, r6
   2137c:	cmp	r9, r6
   21380:	bcs	214ec <__assert_fail@plt+0xeeb4>
   21384:	mov	r4, r9
   21388:	mov	r5, r9
   2138c:	mov	r8, #0
   21390:	mov	r7, #63	; 0x3f
   21394:	b	213c0 <__assert_fail@plt+0xed88>
   21398:	cmp	r3, #37	; 0x25
   2139c:	bcs	213ac <__assert_fail@plt+0xed74>
   213a0:	sub	r2, r3, #32
   213a4:	cmp	r2, #3
   213a8:	bhi	213e8 <__assert_fail@plt+0xedb0>
   213ac:	strb	r3, [r4]
   213b0:	add	r5, r5, #1
   213b4:	add	r4, r4, #1
   213b8:	cmp	r6, r5
   213bc:	bls	21484 <__assert_fail@plt+0xee4c>
   213c0:	ldrb	r3, [r5]
   213c4:	cmp	r3, #63	; 0x3f
   213c8:	bls	21398 <__assert_fail@plt+0xed60>
   213cc:	cmp	r3, #65	; 0x41
   213d0:	bcc	213e8 <__assert_fail@plt+0xedb0>
   213d4:	cmp	r3, #95	; 0x5f
   213d8:	bls	213ac <__assert_fail@plt+0xed74>
   213dc:	sub	r2, r3, #97	; 0x61
   213e0:	cmp	r2, #29
   213e4:	bls	213ac <__assert_fail@plt+0xed74>
   213e8:	str	r8, [sp, #4]
   213ec:	str	r8, [sp, #8]
   213f0:	mov	r0, sp
   213f4:	mov	r1, r5
   213f8:	rsb	r2, r5, r6
   213fc:	add	r3, sp, #4
   21400:	bl	12218 <mbrtowc@plt>
   21404:	cmn	r0, #1
   21408:	mov	fp, r0
   2140c:	beq	21470 <__assert_fail@plt+0xee38>
   21410:	cmn	r0, #2
   21414:	beq	214a0 <__assert_fail@plt+0xee68>
   21418:	cmp	fp, #0
   2141c:	ldr	r0, [sp]
   21420:	moveq	fp, #1
   21424:	bl	11ffc <wcwidth@plt>
   21428:	cmp	r0, #0
   2142c:	blt	21460 <__assert_fail@plt+0xee28>
   21430:	add	r1, r4, fp
   21434:	mov	r3, r5
   21438:	ldrb	r2, [r3], #1
   2143c:	strb	r2, [r4], #1
   21440:	cmp	r4, r1
   21444:	bne	21438 <__assert_fail@plt+0xee00>
   21448:	add	r5, r5, fp
   2144c:	add	r0, sp, #4
   21450:	bl	12080 <mbsinit@plt>
   21454:	cmp	r0, #0
   21458:	beq	213f0 <__assert_fail@plt+0xedb8>
   2145c:	b	213b8 <__assert_fail@plt+0xed80>
   21460:	strb	r7, [r4]
   21464:	add	r5, r5, fp
   21468:	add	r4, r4, #1
   2146c:	b	2144c <__assert_fail@plt+0xee14>
   21470:	add	r5, r5, #1
   21474:	strb	r7, [r4]
   21478:	cmp	r6, r5
   2147c:	add	r4, r4, #1
   21480:	bhi	213c0 <__assert_fail@plt+0xed88>
   21484:	rsb	r0, r9, r4
   21488:	ldr	r2, [sp, #12]
   2148c:	ldr	r3, [sl]
   21490:	cmp	r2, r3
   21494:	bne	214f4 <__assert_fail@plt+0xeebc>
   21498:	add	sp, sp, #20
   2149c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214a0:	strb	r7, [r4]
   214a4:	mov	r5, r6
   214a8:	add	r4, r4, #1
   214ac:	b	213b8 <__assert_fail@plt+0xed80>
   214b0:	add	r4, r9, r6
   214b4:	cmp	r9, r4
   214b8:	bcs	214e4 <__assert_fail@plt+0xeeac>
   214bc:	bl	122f0 <__ctype_b_loc@plt>
   214c0:	mov	r1, #63	; 0x3f
   214c4:	ldrb	r3, [r9], #1
   214c8:	ldr	r2, [r0]
   214cc:	lsl	r3, r3, #1
   214d0:	ldrh	r3, [r2, r3]
   214d4:	tst	r3, #16384	; 0x4000
   214d8:	strbeq	r1, [r9, #-1]
   214dc:	cmp	r9, r4
   214e0:	bne	214c4 <__assert_fail@plt+0xee8c>
   214e4:	mov	r0, r6
   214e8:	b	21488 <__assert_fail@plt+0xee50>
   214ec:	mov	r0, #0
   214f0:	b	21488 <__assert_fail@plt+0xee50>
   214f4:	bl	120e0 <__stack_chk_fail@plt>
   214f8:	push	{lr}		; (str lr, [sp, #-4]!)
   214fc:	sub	sp, sp, #12
   21500:	mov	r3, #0
   21504:	movw	ip, #8860	; 0x229c
   21508:	mov	r2, r3
   2150c:	movt	ip, #1
   21510:	str	r3, [sp]
   21514:	str	ip, [sp, #4]
   21518:	bl	21548 <__assert_fail@plt+0xef10>
   2151c:	add	sp, sp, #12
   21520:	pop	{pc}		; (ldr pc, [sp], #4)
   21524:	cmn	r0, #100	; 0x64
   21528:	push	{r3, lr}
   2152c:	bne	21544 <__assert_fail@plt+0xef0c>
   21530:	mov	r0, r1
   21534:	mov	r1, r2
   21538:	mov	r2, r3
   2153c:	pop	{r3, lr}
   21540:	b	1217c <readlink@plt>
   21544:	bl	125cc <abort@plt>
   21548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2154c:	sub	sp, sp, #1040	; 0x410
   21550:	sub	sp, sp, #12
   21554:	movw	r4, #21904	; 0x5590
   21558:	movw	ip, #13568	; 0x3500
   2155c:	movt	r4, #4
   21560:	ldr	r6, [sp, #1088]	; 0x440
   21564:	movt	ip, #3
   21568:	ldr	lr, [r4]
   2156c:	mov	r7, r2
   21570:	cmp	r6, #0
   21574:	str	r4, [sp, #12]
   21578:	mov	r8, r0
   2157c:	mov	r9, r1
   21580:	moveq	r6, ip
   21584:	subs	r4, r3, #0
   21588:	addeq	r7, sp, #20
   2158c:	str	lr, [sp, #1044]	; 0x414
   21590:	ldr	sl, [sp, #1092]	; 0x444
   21594:	moveq	r4, #1024	; 0x400
   21598:	mov	r5, r7
   2159c:	b	215e8 <__assert_fail@plt+0xefb0>
   215a0:	cmp	r4, fp
   215a4:	bhi	2166c <__assert_fail@plt+0xf034>
   215a8:	cmp	r5, r7
   215ac:	beq	215bc <__assert_fail@plt+0xef84>
   215b0:	mov	r0, r5
   215b4:	ldr	r3, [r6, #8]
   215b8:	blx	r3
   215bc:	cmp	r4, #1073741824	; 0x40000000
   215c0:	lslls	r4, r4, #1
   215c4:	bls	215d4 <__assert_fail@plt+0xef9c>
   215c8:	cmp	r4, #-2147483648	; 0x80000000
   215cc:	bcs	216e0 <__assert_fail@plt+0xf0a8>
   215d0:	mov	r4, #-2147483648	; 0x80000000
   215d4:	ldr	r3, [r6]
   215d8:	mov	r0, r4
   215dc:	blx	r3
   215e0:	subs	r5, r0, #0
   215e4:	beq	216b8 <__assert_fail@plt+0xf080>
   215e8:	mov	r0, r8
   215ec:	mov	r1, r9
   215f0:	mov	r2, r5
   215f4:	mov	r3, r4
   215f8:	blx	sl
   215fc:	subs	fp, r0, #0
   21600:	bge	215a0 <__assert_fail@plt+0xef68>
   21604:	bl	1238c <__errno_location@plt>
   21608:	ldr	r1, [r0]
   2160c:	mov	r2, r0
   21610:	cmp	r1, #34	; 0x22
   21614:	beq	215a0 <__assert_fail@plt+0xef68>
   21618:	cmp	r7, r5
   2161c:	moveq	r5, #0
   21620:	beq	21648 <__assert_fail@plt+0xf010>
   21624:	ldr	r3, [r6, #8]
   21628:	mov	r0, r5
   2162c:	str	r1, [sp, #8]
   21630:	mov	r5, #0
   21634:	str	r2, [sp, #4]
   21638:	blx	r3
   2163c:	ldr	r1, [sp, #8]
   21640:	ldr	r2, [sp, #4]
   21644:	str	r1, [r2]
   21648:	ldr	r4, [sp, #12]
   2164c:	mov	r0, r5
   21650:	ldr	r2, [sp, #1044]	; 0x414
   21654:	ldr	r3, [r4]
   21658:	cmp	r2, r3
   2165c:	bne	2171c <__assert_fail@plt+0xf0e4>
   21660:	add	sp, sp, #1040	; 0x410
   21664:	add	sp, sp, #12
   21668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2166c:	add	r2, sp, #20
   21670:	mov	r1, #0
   21674:	cmp	r5, r2
   21678:	strb	r1, [r5, fp]
   2167c:	add	r8, fp, #1
   21680:	beq	216f4 <__assert_fail@plt+0xf0bc>
   21684:	cmp	r7, r5
   21688:	cmpne	r4, r8
   2168c:	bls	21648 <__assert_fail@plt+0xf010>
   21690:	ldr	r3, [r6, #4]
   21694:	cmp	r3, #0
   21698:	beq	21648 <__assert_fail@plt+0xf010>
   2169c:	mov	r0, r5
   216a0:	mov	r1, r8
   216a4:	blx	r3
   216a8:	cmp	r0, #0
   216ac:	movne	r5, r0
   216b0:	b	21648 <__assert_fail@plt+0xf010>
   216b4:	mov	r4, r8
   216b8:	ldr	r3, [r6, #12]
   216bc:	cmp	r3, #0
   216c0:	beq	216cc <__assert_fail@plt+0xf094>
   216c4:	mov	r0, r4
   216c8:	blx	r3
   216cc:	bl	1238c <__errno_location@plt>
   216d0:	mov	r5, #0
   216d4:	mov	r3, #12
   216d8:	str	r3, [r0]
   216dc:	b	21648 <__assert_fail@plt+0xf010>
   216e0:	bl	1238c <__errno_location@plt>
   216e4:	mov	r5, #0
   216e8:	mov	r3, #36	; 0x24
   216ec:	str	r3, [r0]
   216f0:	b	21648 <__assert_fail@plt+0xf010>
   216f4:	ldr	r3, [r6]
   216f8:	mov	r0, r8
   216fc:	blx	r3
   21700:	subs	r4, r0, #0
   21704:	beq	216b4 <__assert_fail@plt+0xf07c>
   21708:	mov	r1, r5
   2170c:	mov	r2, r8
   21710:	bl	1205c <memcpy@plt>
   21714:	mov	r5, r4
   21718:	b	21648 <__assert_fail@plt+0xf010>
   2171c:	bl	120e0 <__stack_chk_fail@plt>
   21720:	push	{r3, r4, r5, lr}
   21724:	mov	r2, #0
   21728:	mov	r4, r1
   2172c:	mov	r1, #1
   21730:	mov	r5, r0
   21734:	bl	2a868 <__assert_fail@plt+0x18230>
   21738:	cmp	r0, #0
   2173c:	blt	2177c <__assert_fail@plt+0xf144>
   21740:	cmp	r4, #0
   21744:	orrne	r2, r0, #1
   21748:	biceq	r2, r0, #1
   2174c:	cmp	r2, r0
   21750:	beq	21774 <__assert_fail@plt+0xf13c>
   21754:	mov	r0, r5
   21758:	mov	r1, #2
   2175c:	bl	2a868 <__assert_fail@plt+0x18230>
   21760:	cmn	r0, #1
   21764:	movne	r0, #0
   21768:	moveq	r0, #1
   2176c:	rsb	r0, r0, #0
   21770:	pop	{r3, r4, r5, pc}
   21774:	mov	r0, #0
   21778:	pop	{r3, r4, r5, pc}
   2177c:	mvn	r0, #0
   21780:	pop	{r3, r4, r5, pc}
   21784:	movw	r1, #1030	; 0x406
   21788:	mov	r2, #0
   2178c:	b	2a868 <__assert_fail@plt+0x18230>
   21790:	movw	r3, #23964	; 0x5d9c
   21794:	movt	r3, #4
   21798:	str	r0, [r3]
   2179c:	bx	lr
   217a0:	push	{r4, r5, r6, lr}
   217a4:	movw	r4, #21916	; 0x559c
   217a8:	movt	r4, #4
   217ac:	sub	sp, sp, #8
   217b0:	ldr	r5, [r4]
   217b4:	mov	r0, r5
   217b8:	bl	2aa10 <__assert_fail@plt+0x183d8>
   217bc:	cmp	r0, #0
   217c0:	mov	r0, r5
   217c4:	bne	21840 <__assert_fail@plt+0xf208>
   217c8:	bl	2b7e8 <__assert_fail@plt+0x191b0>
   217cc:	cmp	r0, #0
   217d0:	beq	21880 <__assert_fail@plt+0xf248>
   217d4:	mov	r2, #5
   217d8:	movw	r1, #8264	; 0x2048
   217dc:	mov	r0, #0
   217e0:	movt	r1, #3
   217e4:	bl	120d4 <dcgettext@plt>
   217e8:	movw	r2, #23964	; 0x5d9c
   217ec:	movt	r2, #4
   217f0:	ldr	r4, [r2]
   217f4:	cmp	r4, #0
   217f8:	mov	r5, r0
   217fc:	beq	2188c <__assert_fail@plt+0xf254>
   21800:	bl	1238c <__errno_location@plt>
   21804:	ldr	r6, [r0]
   21808:	mov	r0, r4
   2180c:	bl	28e78 <__assert_fail@plt+0x16840>
   21810:	movw	r2, #8284	; 0x205c
   21814:	str	r5, [sp]
   21818:	movt	r2, #3
   2181c:	mov	r1, r6
   21820:	mov	r3, r0
   21824:	mov	r0, #0
   21828:	bl	12224 <error@plt>
   2182c:	bl	218cc <__assert_fail@plt+0xf294>
   21830:	movw	r3, #21820	; 0x553c
   21834:	movt	r3, #4
   21838:	ldr	r0, [r3]
   2183c:	bl	12050 <_exit@plt>
   21840:	mov	r1, #1
   21844:	mov	r2, #0
   21848:	mov	r3, #0
   2184c:	str	r1, [sp]
   21850:	bl	2aa50 <__assert_fail@plt+0x18418>
   21854:	cmp	r0, #0
   21858:	ldr	r0, [r4]
   2185c:	bne	217c8 <__assert_fail@plt+0xf190>
   21860:	bl	2a9b0 <__assert_fail@plt+0x18378>
   21864:	mov	r5, r0
   21868:	ldr	r0, [r4]
   2186c:	bl	2b7e8 <__assert_fail@plt+0x191b0>
   21870:	cmp	r0, #0
   21874:	bne	217d4 <__assert_fail@plt+0xf19c>
   21878:	cmp	r5, #0
   2187c:	bne	217d4 <__assert_fail@plt+0xf19c>
   21880:	add	sp, sp, #8
   21884:	pop	{r4, r5, r6, lr}
   21888:	b	218cc <__assert_fail@plt+0xf294>
   2188c:	bl	1238c <__errno_location@plt>
   21890:	mov	r3, r5
   21894:	movw	r2, #8288	; 0x2060
   21898:	movt	r2, #3
   2189c:	ldr	r1, [r0]
   218a0:	mov	r0, r4
   218a4:	bl	12224 <error@plt>
   218a8:	b	2182c <__assert_fail@plt+0xf1f4>
   218ac:	movw	r3, #23968	; 0x5da0
   218b0:	movt	r3, #4
   218b4:	str	r0, [r3]
   218b8:	bx	lr
   218bc:	movw	r3, #23968	; 0x5da0
   218c0:	movt	r3, #4
   218c4:	strb	r0, [r3, #4]
   218c8:	bx	lr
   218cc:	movw	r3, #21920	; 0x55a0
   218d0:	movt	r3, #4
   218d4:	push	{r4, r5, r6, lr}
   218d8:	sub	sp, sp, #8
   218dc:	ldr	r0, [r3]
   218e0:	bl	2b7e8 <__assert_fail@plt+0x191b0>
   218e4:	cmp	r0, #0
   218e8:	beq	21910 <__assert_fail@plt+0xf2d8>
   218ec:	movw	r4, #23968	; 0x5da0
   218f0:	movt	r4, #4
   218f4:	ldrb	r3, [r4, #4]
   218f8:	cmp	r3, #0
   218fc:	beq	21930 <__assert_fail@plt+0xf2f8>
   21900:	bl	1238c <__errno_location@plt>
   21904:	ldr	r3, [r0]
   21908:	cmp	r3, #32
   2190c:	bne	21930 <__assert_fail@plt+0xf2f8>
   21910:	movw	r3, #21912	; 0x5598
   21914:	movt	r3, #4
   21918:	ldr	r0, [r3]
   2191c:	bl	2b7e8 <__assert_fail@plt+0x191b0>
   21920:	cmp	r0, #0
   21924:	bne	21980 <__assert_fail@plt+0xf348>
   21928:	add	sp, sp, #8
   2192c:	pop	{r4, r5, r6, pc}
   21930:	movw	r1, #8292	; 0x2064
   21934:	mov	r0, #0
   21938:	movt	r1, #3
   2193c:	mov	r2, #5
   21940:	bl	120d4 <dcgettext@plt>
   21944:	ldr	r4, [r4]
   21948:	cmp	r4, #0
   2194c:	mov	r5, r0
   21950:	beq	21990 <__assert_fail@plt+0xf358>
   21954:	bl	1238c <__errno_location@plt>
   21958:	ldr	r6, [r0]
   2195c:	mov	r0, r4
   21960:	bl	28e78 <__assert_fail@plt+0x16840>
   21964:	movw	r2, #8284	; 0x205c
   21968:	str	r5, [sp]
   2196c:	movt	r2, #3
   21970:	mov	r1, r6
   21974:	mov	r3, r0
   21978:	mov	r0, #0
   2197c:	bl	12224 <error@plt>
   21980:	movw	r3, #21820	; 0x553c
   21984:	movt	r3, #4
   21988:	ldr	r0, [r3]
   2198c:	bl	12050 <_exit@plt>
   21990:	bl	1238c <__errno_location@plt>
   21994:	movw	r2, #8288	; 0x2060
   21998:	movt	r2, #3
   2199c:	mov	r3, r0
   219a0:	mov	r0, r4
   219a4:	ldr	r1, [r3]
   219a8:	mov	r3, r5
   219ac:	bl	12224 <error@plt>
   219b0:	b	21980 <__assert_fail@plt+0xf348>
   219b4:	push	{r4, r5, r6, r7, r8, lr}
   219b8:	bl	1223c <opendir@plt>
   219bc:	subs	r4, r0, #0
   219c0:	beq	219d0 <__assert_fail@plt+0xf398>
   219c4:	bl	12518 <dirfd@plt>
   219c8:	cmp	r0, #2
   219cc:	bls	219d8 <__assert_fail@plt+0xf3a0>
   219d0:	mov	r0, r4
   219d4:	pop	{r4, r5, r6, r7, r8, pc}
   219d8:	bl	290ac <__assert_fail@plt+0x16a74>
   219dc:	subs	r8, r0, #0
   219e0:	blt	21a18 <__assert_fail@plt+0xf3e0>
   219e4:	bl	1250c <fdopendir@plt>
   219e8:	mov	r6, r0
   219ec:	bl	1238c <__errno_location@plt>
   219f0:	cmp	r6, #0
   219f4:	mov	r5, r0
   219f8:	ldr	r7, [r0]
   219fc:	beq	21a2c <__assert_fail@plt+0xf3f4>
   21a00:	mov	r0, r4
   21a04:	mov	r4, r6
   21a08:	bl	125fc <closedir@plt>
   21a0c:	str	r7, [r5]
   21a10:	mov	r0, r4
   21a14:	pop	{r4, r5, r6, r7, r8, pc}
   21a18:	bl	1238c <__errno_location@plt>
   21a1c:	mov	r6, #0
   21a20:	mov	r5, r0
   21a24:	ldr	r7, [r0]
   21a28:	b	21a00 <__assert_fail@plt+0xf3c8>
   21a2c:	mov	r0, r8
   21a30:	bl	125d8 <close@plt>
   21a34:	b	21a00 <__assert_fail@plt+0xf3c8>
   21a38:	push	{r3, lr}
   21a3c:	bl	21b04 <__assert_fail@plt+0xf4cc>
   21a40:	cmp	r0, #0
   21a44:	popne	{r3, pc}
   21a48:	bl	2973c <__assert_fail@plt+0x17104>
   21a4c:	push	{r3, r4, r5, lr}
   21a50:	mov	r5, r0
   21a54:	bl	21b5c <__assert_fail@plt+0xf524>
   21a58:	ldrb	r3, [r0]
   21a5c:	mov	r4, r0
   21a60:	cmp	r3, #0
   21a64:	beq	21a88 <__assert_fail@plt+0xf450>
   21a68:	bl	21bb8 <__assert_fail@plt+0xf580>
   21a6c:	ldrb	r3, [r4, r0]
   21a70:	mov	r1, r0
   21a74:	cmp	r3, #47	; 0x2f
   21a78:	addeq	r1, r0, #1
   21a7c:	mov	r0, r4
   21a80:	pop	{r3, r4, r5, lr}
   21a84:	b	2977c <__assert_fail@plt+0x17144>
   21a88:	mov	r0, r5
   21a8c:	bl	21bb8 <__assert_fail@plt+0xf580>
   21a90:	mov	r1, r0
   21a94:	mov	r0, r5
   21a98:	pop	{r3, r4, r5, lr}
   21a9c:	b	2977c <__assert_fail@plt+0x17144>
   21aa0:	push	{r3, r4, r5, lr}
   21aa4:	mov	r4, r0
   21aa8:	ldrb	r5, [r0]
   21aac:	subs	r3, r5, #47	; 0x2f
   21ab0:	rsbs	r5, r3, #0
   21ab4:	adcs	r5, r5, r3
   21ab8:	bl	21b5c <__assert_fail@plt+0xf524>
   21abc:	rsb	r3, r4, r0
   21ac0:	cmp	r3, r5
   21ac4:	bls	21afc <__assert_fail@plt+0xf4c4>
   21ac8:	sub	r0, r3, #1
   21acc:	ldrb	r2, [r4, r0]
   21ad0:	cmp	r2, #47	; 0x2f
   21ad4:	beq	21aec <__assert_fail@plt+0xf4b4>
   21ad8:	b	21afc <__assert_fail@plt+0xf4c4>
   21adc:	ldrb	r2, [r4, r3]
   21ae0:	cmp	r2, #47	; 0x2f
   21ae4:	popne	{r3, r4, r5, pc}
   21ae8:	mov	r0, r3
   21aec:	cmp	r5, r0
   21af0:	sub	r3, r0, #1
   21af4:	bcc	21adc <__assert_fail@plt+0xf4a4>
   21af8:	pop	{r3, r4, r5, pc}
   21afc:	mov	r0, r3
   21b00:	pop	{r3, r4, r5, pc}
   21b04:	push	{r4, r5, r6, r7, r8, lr}
   21b08:	mov	r8, r0
   21b0c:	bl	21aa0 <__assert_fail@plt+0xf468>
   21b10:	rsbs	r6, r0, #1
   21b14:	add	r7, r0, #1
   21b18:	mov	r4, r0
   21b1c:	movcc	r6, #0
   21b20:	add	r0, r6, r7
   21b24:	bl	12284 <malloc@plt>
   21b28:	subs	r5, r0, #0
   21b2c:	beq	21b54 <__assert_fail@plt+0xf51c>
   21b30:	mov	r2, r4
   21b34:	mov	r1, r8
   21b38:	bl	1205c <memcpy@plt>
   21b3c:	cmp	r6, #0
   21b40:	movne	r3, #46	; 0x2e
   21b44:	strbne	r3, [r5, r4]
   21b48:	movne	r4, r7
   21b4c:	mov	r3, #0
   21b50:	strb	r3, [r5, r4]
   21b54:	mov	r0, r5
   21b58:	pop	{r4, r5, r6, r7, r8, pc}
   21b5c:	ldrb	r3, [r0]
   21b60:	cmp	r3, #47	; 0x2f
   21b64:	bne	21b80 <__assert_fail@plt+0xf548>
   21b68:	add	r2, r0, #1
   21b6c:	mov	r0, r2
   21b70:	add	r2, r2, #1
   21b74:	ldrb	r3, [r0]
   21b78:	cmp	r3, #47	; 0x2f
   21b7c:	beq	21b6c <__assert_fail@plt+0xf534>
   21b80:	cmp	r3, #0
   21b84:	bxeq	lr
   21b88:	mov	r2, r0
   21b8c:	mov	r1, #0
   21b90:	cmp	r3, #47	; 0x2f
   21b94:	moveq	r1, #1
   21b98:	beq	21ba8 <__assert_fail@plt+0xf570>
   21b9c:	cmp	r1, #0
   21ba0:	movne	r0, r2
   21ba4:	movne	r1, #0
   21ba8:	ldrb	r3, [r2, #1]!
   21bac:	cmp	r3, #0
   21bb0:	bne	21b90 <__assert_fail@plt+0xf558>
   21bb4:	bx	lr
   21bb8:	push	{r4, lr}
   21bbc:	mov	r4, r0
   21bc0:	bl	1232c <strlen@plt>
   21bc4:	cmp	r0, #1
   21bc8:	popls	{r4, pc}
   21bcc:	sub	r3, r0, #1
   21bd0:	ldrb	r2, [r4, r3]
   21bd4:	cmp	r2, #47	; 0x2f
   21bd8:	popne	{r4, pc}
   21bdc:	mov	r0, r3
   21be0:	cmp	r0, #1
   21be4:	sub	r3, r3, #1
   21be8:	beq	21bfc <__assert_fail@plt+0xf5c4>
   21bec:	ldrb	r2, [r4, r3]
   21bf0:	cmp	r2, #47	; 0x2f
   21bf4:	popne	{r4, pc}
   21bf8:	b	21bdc <__assert_fail@plt+0xf5a4>
   21bfc:	pop	{r4, pc}
   21c00:	push	{r4, lr}
   21c04:	mov	r4, r0
   21c08:	bl	21b5c <__assert_fail@plt+0xf524>
   21c0c:	ldrb	r3, [r0]
   21c10:	cmp	r3, #0
   21c14:	movne	r4, r0
   21c18:	mov	r0, r4
   21c1c:	bl	21bb8 <__assert_fail@plt+0xf580>
   21c20:	mov	r2, #0
   21c24:	ldrb	r3, [r4, r0]
   21c28:	strb	r2, [r4, r0]
   21c2c:	subs	r0, r3, r2
   21c30:	movne	r0, #1
   21c34:	pop	{r4, pc}
   21c38:	push	{r1, r2, r3}
   21c3c:	push	{r4, lr}
   21c40:	sub	sp, sp, #12
   21c44:	movw	r4, #21904	; 0x5590
   21c48:	movt	r4, #4
   21c4c:	ldr	r1, [sp, #20]
   21c50:	ldr	r3, [r4]
   21c54:	ands	r2, r1, #64	; 0x40
   21c58:	ldrne	r2, [sp, #24]
   21c5c:	str	r3, [sp, #4]
   21c60:	addne	r3, sp, #24
   21c64:	strne	r3, [sp]
   21c68:	bl	12254 <open64@plt>
   21c6c:	bl	290b8 <__assert_fail@plt+0x16a80>
   21c70:	ldr	r2, [sp, #4]
   21c74:	ldr	r3, [r4]
   21c78:	cmp	r2, r3
   21c7c:	bne	21c90 <__assert_fail@plt+0xf658>
   21c80:	add	sp, sp, #12
   21c84:	pop	{r4, lr}
   21c88:	add	sp, sp, #12
   21c8c:	bx	lr
   21c90:	bl	120e0 <__stack_chk_fail@plt>
   21c94:	and	r3, r0, #61440	; 0xf000
   21c98:	cmp	r3, #32768	; 0x8000
   21c9c:	moveq	r3, #45	; 0x2d
   21ca0:	beq	21cec <__assert_fail@plt+0xf6b4>
   21ca4:	cmp	r3, #16384	; 0x4000
   21ca8:	moveq	r3, #100	; 0x64
   21cac:	beq	21cec <__assert_fail@plt+0xf6b4>
   21cb0:	cmp	r3, #24576	; 0x6000
   21cb4:	moveq	r3, #98	; 0x62
   21cb8:	beq	21cec <__assert_fail@plt+0xf6b4>
   21cbc:	cmp	r3, #8192	; 0x2000
   21cc0:	moveq	r3, #99	; 0x63
   21cc4:	beq	21cec <__assert_fail@plt+0xf6b4>
   21cc8:	cmp	r3, #40960	; 0xa000
   21ccc:	moveq	r3, #108	; 0x6c
   21cd0:	beq	21cec <__assert_fail@plt+0xf6b4>
   21cd4:	cmp	r3, #4096	; 0x1000
   21cd8:	moveq	r3, #112	; 0x70
   21cdc:	beq	21cec <__assert_fail@plt+0xf6b4>
   21ce0:	cmp	r3, #49152	; 0xc000
   21ce4:	movne	r3, #63	; 0x3f
   21ce8:	moveq	r3, #115	; 0x73
   21cec:	tst	r0, #256	; 0x100
   21cf0:	strb	r3, [r1]
   21cf4:	moveq	r3, #45	; 0x2d
   21cf8:	movne	r3, #114	; 0x72
   21cfc:	tst	r0, #128	; 0x80
   21d00:	strb	r3, [r1, #1]
   21d04:	moveq	r3, #45	; 0x2d
   21d08:	movne	r3, #119	; 0x77
   21d0c:	tst	r0, #2048	; 0x800
   21d10:	strb	r3, [r1, #2]
   21d14:	beq	21dac <__assert_fail@plt+0xf774>
   21d18:	tst	r0, #64	; 0x40
   21d1c:	moveq	r3, #83	; 0x53
   21d20:	movne	r3, #115	; 0x73
   21d24:	tst	r0, #32
   21d28:	strb	r3, [r1, #3]
   21d2c:	moveq	r3, #45	; 0x2d
   21d30:	movne	r3, #114	; 0x72
   21d34:	tst	r0, #16
   21d38:	strb	r3, [r1, #4]
   21d3c:	moveq	r3, #45	; 0x2d
   21d40:	movne	r3, #119	; 0x77
   21d44:	tst	r0, #1024	; 0x400
   21d48:	strb	r3, [r1, #5]
   21d4c:	beq	21dcc <__assert_fail@plt+0xf794>
   21d50:	tst	r0, #8
   21d54:	moveq	r3, #83	; 0x53
   21d58:	movne	r3, #115	; 0x73
   21d5c:	tst	r0, #4
   21d60:	strb	r3, [r1, #6]
   21d64:	moveq	r3, #45	; 0x2d
   21d68:	movne	r3, #114	; 0x72
   21d6c:	tst	r0, #2
   21d70:	strb	r3, [r1, #7]
   21d74:	moveq	r3, #45	; 0x2d
   21d78:	movne	r3, #119	; 0x77
   21d7c:	tst	r0, #512	; 0x200
   21d80:	strb	r3, [r1, #8]
   21d84:	beq	21dbc <__assert_fail@plt+0xf784>
   21d88:	tst	r0, #1
   21d8c:	moveq	r3, #84	; 0x54
   21d90:	movne	r3, #116	; 0x74
   21d94:	strb	r3, [r1, #9]
   21d98:	mov	r2, #32
   21d9c:	mov	r3, #0
   21da0:	strb	r2, [r1, #10]
   21da4:	strb	r3, [r1, #11]
   21da8:	bx	lr
   21dac:	tst	r0, #64	; 0x40
   21db0:	moveq	r3, #45	; 0x2d
   21db4:	movne	r3, #120	; 0x78
   21db8:	b	21d24 <__assert_fail@plt+0xf6ec>
   21dbc:	tst	r0, #1
   21dc0:	moveq	r3, #45	; 0x2d
   21dc4:	movne	r3, #120	; 0x78
   21dc8:	b	21d94 <__assert_fail@plt+0xf75c>
   21dcc:	tst	r0, #8
   21dd0:	moveq	r3, #45	; 0x2d
   21dd4:	movne	r3, #120	; 0x78
   21dd8:	b	21d5c <__assert_fail@plt+0xf724>
   21ddc:	ldr	r0, [r0, #16]
   21de0:	b	21c94 <__assert_fail@plt+0xf65c>
   21de4:	push	{r4, r5, r6, lr}
   21de8:	mov	r5, r1
   21dec:	bl	12530 <fopen64@plt>
   21df0:	subs	r4, r0, #0
   21df4:	beq	21e04 <__assert_fail@plt+0xf7cc>
   21df8:	bl	12410 <fileno@plt>
   21dfc:	cmp	r0, #2
   21e00:	bls	21e0c <__assert_fail@plt+0xf7d4>
   21e04:	mov	r0, r4
   21e08:	pop	{r4, r5, r6, pc}
   21e0c:	bl	290ac <__assert_fail@plt+0x16a74>
   21e10:	subs	r6, r0, #0
   21e14:	blt	21e40 <__assert_fail@plt+0xf808>
   21e18:	mov	r0, r4
   21e1c:	bl	12458 <fclose@plt>
   21e20:	cmp	r0, #0
   21e24:	bne	21e60 <__assert_fail@plt+0xf828>
   21e28:	mov	r1, r5
   21e2c:	mov	r0, r6
   21e30:	bl	11f60 <fdopen@plt>
   21e34:	cmp	r0, #0
   21e38:	beq	21e60 <__assert_fail@plt+0xf828>
   21e3c:	pop	{r4, r5, r6, pc}
   21e40:	bl	1238c <__errno_location@plt>
   21e44:	ldr	r6, [r0]
   21e48:	mov	r5, r0
   21e4c:	mov	r0, r4
   21e50:	bl	12458 <fclose@plt>
   21e54:	mov	r0, #0
   21e58:	str	r6, [r5]
   21e5c:	pop	{r4, r5, r6, pc}
   21e60:	bl	1238c <__errno_location@plt>
   21e64:	ldr	r5, [r0]
   21e68:	mov	r4, r0
   21e6c:	mov	r0, r6
   21e70:	bl	125d8 <close@plt>
   21e74:	mov	r0, #0
   21e78:	str	r5, [r4]
   21e7c:	pop	{r4, r5, r6, pc}
   21e80:	cmp	r0, #9
   21e84:	push	{r4, r5, r6, r7, r8, lr}
   21e88:	bhi	21f1c <__assert_fail@plt+0xf8e4>
   21e8c:	mov	r7, #11
   21e90:	movw	r8, #43691	; 0xaaab
   21e94:	movt	r8, #43690	; 0xaaaa
   21e98:	cmp	r7, #9
   21e9c:	bls	21f14 <__assert_fail@plt+0xf8dc>
   21ea0:	umull	r2, r3, r8, r7
   21ea4:	lsr	r3, r3, #1
   21ea8:	add	r3, r3, r3, lsl #1
   21eac:	cmp	r7, r3
   21eb0:	beq	21f00 <__assert_fail@plt+0xf8c8>
   21eb4:	mov	r6, #16
   21eb8:	mov	r5, #9
   21ebc:	mov	r4, #3
   21ec0:	b	21ed0 <__assert_fail@plt+0xf898>
   21ec4:	bl	2c498 <__assert_fail@plt+0x19e60>
   21ec8:	cmp	r1, #0
   21ecc:	beq	21f00 <__assert_fail@plt+0xf8c8>
   21ed0:	add	r5, r5, r6
   21ed4:	add	r4, r4, #2
   21ed8:	cmp	r5, r7
   21edc:	mov	r0, r7
   21ee0:	add	r6, r6, #8
   21ee4:	mov	r1, r4
   21ee8:	bcc	21ec4 <__assert_fail@plt+0xf88c>
   21eec:	mov	r1, r4
   21ef0:	mov	r0, r7
   21ef4:	bl	2c498 <__assert_fail@plt+0x19e60>
   21ef8:	cmp	r1, #0
   21efc:	bne	21f0c <__assert_fail@plt+0xf8d4>
   21f00:	add	r7, r7, #2
   21f04:	cmn	r7, #1
   21f08:	bne	21e98 <__assert_fail@plt+0xf860>
   21f0c:	mov	r0, r7
   21f10:	pop	{r4, r5, r6, r7, r8, pc}
   21f14:	mov	r4, #3
   21f18:	b	21eec <__assert_fail@plt+0xf8b4>
   21f1c:	orr	r7, r0, #1
   21f20:	cmn	r7, #1
   21f24:	bne	21e90 <__assert_fail@plt+0xf858>
   21f28:	b	21f0c <__assert_fail@plt+0xf8d4>
   21f2c:	push	{r3, lr}
   21f30:	ror	r0, r0, #3
   21f34:	bl	2c498 <__assert_fail@plt+0x19e60>
   21f38:	mov	r0, r1
   21f3c:	pop	{r3, pc}
   21f40:	subs	r3, r1, r0
   21f44:	rsbs	r0, r3, #0
   21f48:	adcs	r0, r0, r3
   21f4c:	bx	lr
   21f50:	push	{r4, lr}
   21f54:	mov	r4, r0
   21f58:	ldr	r3, [r4, #24]
   21f5c:	mov	r0, r1
   21f60:	ldr	r1, [r4, #8]
   21f64:	blx	r3
   21f68:	ldr	r3, [r4, #8]
   21f6c:	cmp	r0, r3
   21f70:	bcs	21f80 <__assert_fail@plt+0xf948>
   21f74:	ldr	r3, [r4]
   21f78:	add	r0, r3, r0, lsl #3
   21f7c:	pop	{r4, pc}
   21f80:	bl	125cc <abort@plt>
   21f84:	push	{r4, r5, r6, r7, r8, lr}
   21f88:	mov	r7, r2
   21f8c:	mov	r8, r3
   21f90:	mov	r6, r0
   21f94:	mov	r5, r1
   21f98:	bl	21f50 <__assert_fail@plt+0xf918>
   21f9c:	str	r0, [r7]
   21fa0:	mov	r4, r0
   21fa4:	ldr	r2, [r0]
   21fa8:	cmp	r2, #0
   21fac:	beq	22040 <__assert_fail@plt+0xfa08>
   21fb0:	cmp	r5, r2
   21fb4:	beq	21fd4 <__assert_fail@plt+0xf99c>
   21fb8:	mov	r1, r2
   21fbc:	ldr	r3, [r6, #28]
   21fc0:	mov	r0, r5
   21fc4:	blx	r3
   21fc8:	cmp	r0, #0
   21fcc:	beq	22034 <__assert_fail@plt+0xf9fc>
   21fd0:	ldr	r2, [r4]
   21fd4:	cmp	r8, #0
   21fd8:	beq	22004 <__assert_fail@plt+0xf9cc>
   21fdc:	ldr	r3, [r4, #4]
   21fe0:	cmp	r3, #0
   21fe4:	streq	r3, [r4]
   21fe8:	ldmne	r3, {r0, r1}
   21fec:	movne	ip, #0
   21ff0:	stmne	r4, {r0, r1}
   21ff4:	strne	ip, [r3]
   21ff8:	ldrne	r1, [r6, #36]	; 0x24
   21ffc:	strne	r1, [r3, #4]
   22000:	strne	r3, [r6, #36]	; 0x24
   22004:	mov	r0, r2
   22008:	pop	{r4, r5, r6, r7, r8, pc}
   2200c:	ldr	r2, [ip]
   22010:	cmp	r2, r5
   22014:	beq	22054 <__assert_fail@plt+0xfa1c>
   22018:	mov	r1, r2
   2201c:	mov	r0, r5
   22020:	ldr	r2, [r6, #28]
   22024:	blx	r2
   22028:	cmp	r0, #0
   2202c:	bne	2204c <__assert_fail@plt+0xfa14>
   22030:	ldr	r4, [r4, #4]
   22034:	ldr	ip, [r4, #4]
   22038:	cmp	ip, #0
   2203c:	bne	2200c <__assert_fail@plt+0xf9d4>
   22040:	mov	r2, #0
   22044:	mov	r0, r2
   22048:	pop	{r4, r5, r6, r7, r8, pc}
   2204c:	ldr	ip, [r4, #4]
   22050:	ldr	r2, [ip]
   22054:	cmp	r8, #0
   22058:	beq	22004 <__assert_fail@plt+0xf9cc>
   2205c:	ldr	r1, [ip, #4]
   22060:	mov	r3, #0
   22064:	mov	r0, r2
   22068:	str	r1, [r4, #4]
   2206c:	str	r3, [ip]
   22070:	ldr	r3, [r6, #36]	; 0x24
   22074:	str	r3, [ip, #4]
   22078:	str	ip, [r6, #36]	; 0x24
   2207c:	pop	{r4, r5, r6, r7, r8, pc}
   22080:	ldr	r2, [r0]
   22084:	movw	r3, #8304	; 0x2070
   22088:	movt	r3, #3
   2208c:	cmp	r2, r3
   22090:	beq	22118 <__assert_fail@plt+0xfae0>
   22094:	vldr	s15, [r2, #8]
   22098:	vldr	s14, [pc, #128]	; 22120 <__assert_fail@plt+0xfae8>
   2209c:	vcmpe.f32	s15, s14
   220a0:	vmrs	APSR_nzcv, fpscr
   220a4:	ble	2210c <__assert_fail@plt+0xfad4>
   220a8:	vldr	s13, [pc, #116]	; 22124 <__assert_fail@plt+0xfaec>
   220ac:	vcmpe.f32	s15, s13
   220b0:	vmrs	APSR_nzcv, fpscr
   220b4:	bpl	2210c <__assert_fail@plt+0xfad4>
   220b8:	vldr	s13, [pc, #104]	; 22128 <__assert_fail@plt+0xfaf0>
   220bc:	vldr	s12, [r2, #12]
   220c0:	vcmpe.f32	s12, s13
   220c4:	vmrs	APSR_nzcv, fpscr
   220c8:	ble	2210c <__assert_fail@plt+0xfad4>
   220cc:	vldr	s13, [r2]
   220d0:	vcmpe.f32	s13, #0.0
   220d4:	vmrs	APSR_nzcv, fpscr
   220d8:	blt	2210c <__assert_fail@plt+0xfad4>
   220dc:	vadd.f32	s14, s13, s14
   220e0:	vldr	s12, [r2, #4]
   220e4:	vcmpe.f32	s14, s12
   220e8:	vmrs	APSR_nzcv, fpscr
   220ec:	bpl	2210c <__assert_fail@plt+0xfad4>
   220f0:	vmov.f32	s13, #112	; 0x3f800000  1.0
   220f4:	vcmpe.f32	s12, s13
   220f8:	vmrs	APSR_nzcv, fpscr
   220fc:	bhi	2210c <__assert_fail@plt+0xfad4>
   22100:	vcmpe.f32	s15, s14
   22104:	vmrs	APSR_nzcv, fpscr
   22108:	bgt	22118 <__assert_fail@plt+0xfae0>
   2210c:	str	r3, [r0]
   22110:	mov	r0, #0
   22114:	bx	lr
   22118:	mov	r0, #1
   2211c:	bx	lr
   22120:	stclcc	12, cr12, [ip, #820]	; 0x334
   22124:	svccc	0x00666666
   22128:	svccc	0x008ccccd
   2212c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22130:	mov	r8, r1
   22134:	ldr	r6, [r1]
   22138:	mov	r5, r0
   2213c:	ldr	r3, [r1, #4]
   22140:	mov	sl, r2
   22144:	cmp	r6, r3
   22148:	addcc	r6, r6, #8
   2214c:	movcc	r9, #0
   22150:	bcs	221f8 <__assert_fail@plt+0xfbc0>
   22154:	ldr	fp, [r6, #-8]
   22158:	mov	r7, r6
   2215c:	cmp	fp, #0
   22160:	beq	221ec <__assert_fail@plt+0xfbb4>
   22164:	ldr	r4, [r6, #-4]
   22168:	cmp	r4, #0
   2216c:	bne	2218c <__assert_fail@plt+0xfb54>
   22170:	b	221dc <__assert_fail@plt+0xfba4>
   22174:	ldr	r2, [r0, #4]
   22178:	cmp	r3, #0
   2217c:	str	r2, [r4, #4]
   22180:	str	r4, [r0, #4]
   22184:	mov	r4, r3
   22188:	beq	221d8 <__assert_fail@plt+0xfba0>
   2218c:	ldr	fp, [r4]
   22190:	mov	r0, r5
   22194:	mov	r1, fp
   22198:	bl	21f50 <__assert_fail@plt+0xf918>
   2219c:	ldr	r3, [r4, #4]
   221a0:	ldr	r2, [r0]
   221a4:	cmp	r2, #0
   221a8:	bne	22174 <__assert_fail@plt+0xfb3c>
   221ac:	ldr	r1, [r5, #12]
   221b0:	cmp	r3, #0
   221b4:	str	fp, [r0]
   221b8:	add	r1, r1, #1
   221bc:	str	r1, [r5, #12]
   221c0:	str	r2, [r4]
   221c4:	ldr	r2, [r5, #36]	; 0x24
   221c8:	str	r2, [r4, #4]
   221cc:	str	r4, [r5, #36]	; 0x24
   221d0:	mov	r4, r3
   221d4:	bne	2218c <__assert_fail@plt+0xfb54>
   221d8:	ldr	fp, [r6, #-8]
   221dc:	cmp	sl, #0
   221e0:	str	r9, [r6, #-4]
   221e4:	beq	22200 <__assert_fail@plt+0xfbc8>
   221e8:	ldr	r3, [r8, #4]
   221ec:	cmp	r3, r7
   221f0:	add	r6, r6, #8
   221f4:	bhi	22154 <__assert_fail@plt+0xfb1c>
   221f8:	mov	r0, #1
   221fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22200:	mov	r0, r5
   22204:	mov	r1, fp
   22208:	bl	21f50 <__assert_fail@plt+0xf918>
   2220c:	ldr	r3, [r0]
   22210:	mov	r4, r0
   22214:	cmp	r3, #0
   22218:	beq	22264 <__assert_fail@plt+0xfc2c>
   2221c:	ldr	r0, [r5, #36]	; 0x24
   22220:	cmp	r0, #0
   22224:	beq	22278 <__assert_fail@plt+0xfc40>
   22228:	ldr	r2, [r0, #4]
   2222c:	str	r2, [r5, #36]	; 0x24
   22230:	ldr	r2, [r4, #4]
   22234:	str	fp, [r0]
   22238:	str	r2, [r0, #4]
   2223c:	str	r0, [r4, #4]
   22240:	ldr	r3, [r8, #4]
   22244:	add	r6, r6, #8
   22248:	ldr	r2, [r8, #12]
   2224c:	cmp	r3, r7
   22250:	str	r9, [r6, #-16]
   22254:	sub	r2, r2, #1
   22258:	str	r2, [r8, #12]
   2225c:	bhi	22154 <__assert_fail@plt+0xfb1c>
   22260:	b	221f8 <__assert_fail@plt+0xfbc0>
   22264:	ldr	r3, [r5, #12]
   22268:	str	fp, [r0]
   2226c:	add	r3, r3, #1
   22270:	str	r3, [r5, #12]
   22274:	b	22240 <__assert_fail@plt+0xfc08>
   22278:	mov	r0, #8
   2227c:	bl	12284 <malloc@plt>
   22280:	cmp	r0, #0
   22284:	bne	22230 <__assert_fail@plt+0xfbf8>
   22288:	mov	r0, sl
   2228c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22290:	ldr	r0, [r0, #8]
   22294:	bx	lr
   22298:	ldr	r0, [r0, #12]
   2229c:	bx	lr
   222a0:	ldr	r0, [r0, #16]
   222a4:	bx	lr
   222a8:	ldr	r3, [r0]
   222ac:	ldr	r2, [r0, #4]
   222b0:	cmp	r3, r2
   222b4:	bcs	22318 <__assert_fail@plt+0xfce0>
   222b8:	add	r1, r3, #8
   222bc:	add	r2, r2, #7
   222c0:	rsb	r2, r1, r2
   222c4:	add	r3, r3, #16
   222c8:	bic	r2, r2, #7
   222cc:	mov	r0, #0
   222d0:	add	ip, r3, r2
   222d4:	ldr	r3, [r1, #-8]
   222d8:	cmp	r3, #0
   222dc:	beq	22308 <__assert_fail@plt+0xfcd0>
   222e0:	ldr	r3, [r1, #-4]
   222e4:	mov	r2, #1
   222e8:	cmp	r3, #0
   222ec:	beq	22300 <__assert_fail@plt+0xfcc8>
   222f0:	ldr	r3, [r3, #4]
   222f4:	add	r2, r2, #1
   222f8:	cmp	r3, #0
   222fc:	bne	222f0 <__assert_fail@plt+0xfcb8>
   22300:	cmp	r0, r2
   22304:	movcc	r0, r2
   22308:	add	r1, r1, #8
   2230c:	cmp	r1, ip
   22310:	bne	222d4 <__assert_fail@plt+0xfc9c>
   22314:	bx	lr
   22318:	mov	r0, #0
   2231c:	bx	lr
   22320:	ldr	r3, [r0]
   22324:	ldr	r2, [r0, #4]
   22328:	push	{r4}		; (str r4, [sp, #-4]!)
   2232c:	cmp	r3, r2
   22330:	bcs	223c0 <__assert_fail@plt+0xfd88>
   22334:	add	r2, r2, #7
   22338:	add	r1, r3, #8
   2233c:	rsb	ip, r1, r2
   22340:	add	r3, r3, #16
   22344:	bic	ip, ip, #7
   22348:	mov	r2, #0
   2234c:	add	r4, r3, ip
   22350:	mov	ip, r2
   22354:	ldr	r3, [r1, #-8]
   22358:	cmp	r3, #0
   2235c:	beq	22384 <__assert_fail@plt+0xfd4c>
   22360:	ldr	r3, [r1, #-4]
   22364:	add	ip, ip, #1
   22368:	add	r2, r2, #1
   2236c:	cmp	r3, #0
   22370:	beq	22384 <__assert_fail@plt+0xfd4c>
   22374:	ldr	r3, [r3, #4]
   22378:	add	r2, r2, #1
   2237c:	cmp	r3, #0
   22380:	bne	22374 <__assert_fail@plt+0xfd3c>
   22384:	add	r1, r1, #8
   22388:	cmp	r1, r4
   2238c:	bne	22354 <__assert_fail@plt+0xfd1c>
   22390:	ldr	r3, [r0, #12]
   22394:	cmp	r3, ip
   22398:	movne	r0, #0
   2239c:	beq	223a8 <__assert_fail@plt+0xfd70>
   223a0:	pop	{r4}		; (ldr r4, [sp], #4)
   223a4:	bx	lr
   223a8:	ldr	r0, [r0, #16]
   223ac:	pop	{r4}		; (ldr r4, [sp], #4)
   223b0:	subs	r3, r0, r2
   223b4:	rsbs	r0, r3, #0
   223b8:	adcs	r0, r0, r3
   223bc:	bx	lr
   223c0:	mov	r2, #0
   223c4:	mov	ip, r2
   223c8:	b	22390 <__assert_fail@plt+0xfd58>
   223cc:	push	{r4, r5, r6, r7, r8, lr}
   223d0:	mov	r2, r0
   223d4:	mov	r6, r1
   223d8:	ldr	r1, [r0]
   223dc:	ldr	r0, [r0, #4]
   223e0:	sub	sp, sp, #8
   223e4:	ldr	r3, [r2, #16]
   223e8:	cmp	r1, r0
   223ec:	ldr	r7, [r2, #8]
   223f0:	ldr	r8, [r2, #12]
   223f4:	bcs	224d8 <__assert_fail@plt+0xfea0>
   223f8:	add	lr, r1, #8
   223fc:	add	r2, r0, #7
   22400:	rsb	r2, lr, r2
   22404:	add	r1, r1, #16
   22408:	bic	r2, r2, #7
   2240c:	mov	r4, #0
   22410:	add	r5, r1, r2
   22414:	ldr	r2, [lr, #-8]
   22418:	cmp	r2, #0
   2241c:	beq	22448 <__assert_fail@plt+0xfe10>
   22420:	ldr	r2, [lr, #-4]
   22424:	mov	ip, #1
   22428:	cmp	r2, #0
   2242c:	beq	22440 <__assert_fail@plt+0xfe08>
   22430:	ldr	r2, [r2, #4]
   22434:	add	ip, ip, #1
   22438:	cmp	r2, #0
   2243c:	bne	22430 <__assert_fail@plt+0xfdf8>
   22440:	cmp	r4, ip
   22444:	movcc	r4, ip
   22448:	add	lr, lr, #8
   2244c:	cmp	lr, r5
   22450:	bne	22414 <__assert_fail@plt+0xfddc>
   22454:	mov	r0, r6
   22458:	mov	r1, #1
   2245c:	movw	r2, #8324	; 0x2084
   22460:	movt	r2, #3
   22464:	bl	12428 <__fprintf_chk@plt>
   22468:	mov	r3, r7
   2246c:	mov	r0, r6
   22470:	mov	r1, #1
   22474:	movw	r2, #8348	; 0x209c
   22478:	movt	r2, #3
   2247c:	bl	12428 <__fprintf_chk@plt>
   22480:	vmov	s15, r8
   22484:	vldr	d6, [pc, #84]	; 224e0 <__assert_fail@plt+0xfea8>
   22488:	mov	r3, r8
   2248c:	vcvt.f64.u32	d5, s15
   22490:	mov	r0, r6
   22494:	mov	r1, #1
   22498:	movw	r2, #8372	; 0x20b4
   2249c:	movt	r2, #3
   224a0:	vmul.f64	d6, d5, d6
   224a4:	vmov	s11, r7
   224a8:	vcvt.f64.u32	d7, s11
   224ac:	vdiv.f64	d7, d6, d7
   224b0:	vstr	d7, [sp]
   224b4:	bl	12428 <__fprintf_chk@plt>
   224b8:	mov	r0, r6
   224bc:	mov	r3, r4
   224c0:	movw	r2, #8408	; 0x20d8
   224c4:	mov	r1, #1
   224c8:	movt	r2, #3
   224cc:	add	sp, sp, #8
   224d0:	pop	{r4, r5, r6, r7, r8, lr}
   224d4:	b	12428 <__fprintf_chk@plt>
   224d8:	mov	r4, #0
   224dc:	b	22454 <__assert_fail@plt+0xfe1c>
   224e0:	andeq	r0, r0, r0
   224e4:	subsmi	r0, r9, r0
   224e8:	push	{r4, r5, r6, lr}
   224ec:	mov	r6, r0
   224f0:	mov	r5, r1
   224f4:	bl	21f50 <__assert_fail@plt+0xf918>
   224f8:	ldr	r3, [r0]
   224fc:	mov	r4, r0
   22500:	cmp	r3, #0
   22504:	bne	22510 <__assert_fail@plt+0xfed8>
   22508:	b	2253c <__assert_fail@plt+0xff04>
   2250c:	ldr	r3, [r4]
   22510:	cmp	r5, r3
   22514:	mov	r1, r3
   22518:	mov	r0, r5
   2251c:	beq	22548 <__assert_fail@plt+0xff10>
   22520:	ldr	r3, [r6, #28]
   22524:	blx	r3
   22528:	cmp	r0, #0
   2252c:	bne	22544 <__assert_fail@plt+0xff0c>
   22530:	ldr	r4, [r4, #4]
   22534:	cmp	r4, #0
   22538:	bne	2250c <__assert_fail@plt+0xfed4>
   2253c:	mov	r0, #0
   22540:	pop	{r4, r5, r6, pc}
   22544:	ldr	r3, [r4]
   22548:	mov	r0, r3
   2254c:	pop	{r4, r5, r6, pc}
   22550:	push	{r3, lr}
   22554:	ldr	r3, [r0, #16]
   22558:	cmp	r3, #0
   2255c:	beq	2259c <__assert_fail@plt+0xff64>
   22560:	ldr	r3, [r0]
   22564:	ldr	r2, [r0, #4]
   22568:	cmp	r3, r2
   2256c:	bcs	22598 <__assert_fail@plt+0xff60>
   22570:	ldr	r0, [r3]
   22574:	cmp	r0, #0
   22578:	beq	2258c <__assert_fail@plt+0xff54>
   2257c:	b	225a4 <__assert_fail@plt+0xff6c>
   22580:	ldr	r0, [r3]
   22584:	cmp	r0, #0
   22588:	popne	{r3, pc}
   2258c:	add	r3, r3, #8
   22590:	cmp	r3, r2
   22594:	bcc	22580 <__assert_fail@plt+0xff48>
   22598:	bl	125cc <abort@plt>
   2259c:	mov	r0, r3
   225a0:	pop	{r3, pc}
   225a4:	pop	{r3, pc}
   225a8:	push	{r3, r4, r5, lr}
   225ac:	mov	r5, r0
   225b0:	mov	r4, r1
   225b4:	bl	21f50 <__assert_fail@plt+0xf918>
   225b8:	mov	r2, r0
   225bc:	mov	r3, r0
   225c0:	b	225cc <__assert_fail@plt+0xff94>
   225c4:	cmp	r3, #0
   225c8:	beq	225e4 <__assert_fail@plt+0xffac>
   225cc:	ldr	ip, [r3]
   225d0:	ldr	r3, [r3, #4]
   225d4:	cmp	ip, r4
   225d8:	bne	225c4 <__assert_fail@plt+0xff8c>
   225dc:	cmp	r3, #0
   225e0:	bne	2260c <__assert_fail@plt+0xffd4>
   225e4:	ldr	r3, [r5, #4]
   225e8:	b	225f8 <__assert_fail@plt+0xffc0>
   225ec:	ldr	r0, [r2]
   225f0:	cmp	r0, #0
   225f4:	popne	{r3, r4, r5, pc}
   225f8:	add	r2, r2, #8
   225fc:	cmp	r2, r3
   22600:	bcc	225ec <__assert_fail@plt+0xffb4>
   22604:	mov	r0, #0
   22608:	pop	{r3, r4, r5, pc}
   2260c:	ldr	r0, [r3]
   22610:	pop	{r3, r4, r5, pc}
   22614:	push	{r4, r5, r6, r7}
   22618:	mov	r6, r0
   2261c:	ldm	r0, {r5, ip}
   22620:	cmp	ip, r5
   22624:	bls	226a8 <__assert_fail@plt+0x10070>
   22628:	add	r5, r5, #8
   2262c:	mov	r0, #0
   22630:	ldr	r3, [r5, #-8]
   22634:	mov	r7, r5
   22638:	cmp	r3, #0
   2263c:	beq	22688 <__assert_fail@plt+0x10050>
   22640:	cmp	r2, r0
   22644:	bls	22694 <__assert_fail@plt+0x1005c>
   22648:	str	r3, [r1, r0, lsl #2]
   2264c:	add	r4, r0, #1
   22650:	ldr	r3, [r5, #-4]
   22654:	add	ip, r1, r0, lsl #2
   22658:	cmp	r3, #0
   2265c:	beq	2269c <__assert_fail@plt+0x10064>
   22660:	mov	r0, r4
   22664:	cmp	r0, r2
   22668:	beq	22694 <__assert_fail@plt+0x1005c>
   2266c:	ldr	r4, [r3]
   22670:	add	r0, r0, #1
   22674:	str	r4, [ip, #4]!
   22678:	ldr	r3, [r3, #4]
   2267c:	cmp	r3, #0
   22680:	bne	22664 <__assert_fail@plt+0x1002c>
   22684:	ldr	ip, [r6, #4]
   22688:	cmp	ip, r7
   2268c:	add	r5, r5, #8
   22690:	bhi	22630 <__assert_fail@plt+0xfff8>
   22694:	pop	{r4, r5, r6, r7}
   22698:	bx	lr
   2269c:	ldr	ip, [r6, #4]
   226a0:	mov	r0, r4
   226a4:	b	22688 <__assert_fail@plt+0x10050>
   226a8:	mov	r0, #0
   226ac:	b	22694 <__assert_fail@plt+0x1005c>
   226b0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   226b4:	mov	r7, r2
   226b8:	ldr	r8, [r0]
   226bc:	mov	r9, r0
   226c0:	ldr	r2, [r0, #4]
   226c4:	mov	r6, r1
   226c8:	mov	r5, #0
   226cc:	cmp	r2, r8
   226d0:	bls	22720 <__assert_fail@plt+0x100e8>
   226d4:	ldr	r3, [r8]
   226d8:	cmp	r3, #0
   226dc:	beq	22714 <__assert_fail@plt+0x100dc>
   226e0:	mov	r0, r3
   226e4:	mov	r4, r8
   226e8:	b	226f0 <__assert_fail@plt+0x100b8>
   226ec:	ldr	r0, [r4]
   226f0:	mov	r1, r7
   226f4:	blx	r6
   226f8:	cmp	r0, #0
   226fc:	beq	22720 <__assert_fail@plt+0x100e8>
   22700:	ldr	r4, [r4, #4]
   22704:	add	r5, r5, #1
   22708:	cmp	r4, #0
   2270c:	bne	226ec <__assert_fail@plt+0x100b4>
   22710:	ldr	r2, [r9, #4]
   22714:	add	r8, r8, #8
   22718:	cmp	r2, r8
   2271c:	bhi	226d4 <__assert_fail@plt+0x1009c>
   22720:	mov	r0, r5
   22724:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   22728:	push	{r3, r4, r5, lr}
   2272c:	mov	r5, r1
   22730:	ldrb	r3, [r0]
   22734:	cmp	r3, #0
   22738:	beq	22768 <__assert_fail@plt+0x10130>
   2273c:	mov	r4, r0
   22740:	mov	r1, #0
   22744:	rsb	r0, r1, r1, lsl #5
   22748:	mov	r1, r5
   2274c:	add	r0, r3, r0
   22750:	bl	2c498 <__assert_fail@plt+0x19e60>
   22754:	ldrb	r3, [r4, #1]!
   22758:	cmp	r3, #0
   2275c:	bne	22744 <__assert_fail@plt+0x1010c>
   22760:	mov	r0, r1
   22764:	pop	{r3, r4, r5, pc}
   22768:	mov	r1, r3
   2276c:	b	22760 <__assert_fail@plt+0x10128>
   22770:	movw	ip, #8304	; 0x2070
   22774:	movt	ip, #3
   22778:	push	{r4}		; (str r4, [sp, #-4]!)
   2277c:	mov	r4, r0
   22780:	ldm	ip!, {r0, r1, r2, r3}
   22784:	ldr	ip, [ip]
   22788:	stmia	r4!, {r0, r1, r2, r3}
   2278c:	str	ip, [r4]
   22790:	pop	{r4}		; (ldr r4, [sp], #4)
   22794:	bx	lr
   22798:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2279c:	cmp	r2, #0
   227a0:	movw	lr, #7980	; 0x1f2c
   227a4:	movt	lr, #2
   227a8:	movne	r8, r2
   227ac:	movw	ip, #8000	; 0x1f40
   227b0:	moveq	r8, lr
   227b4:	movt	ip, #2
   227b8:	cmp	r3, #0
   227bc:	mov	r7, r0
   227c0:	mov	r0, #40	; 0x28
   227c4:	mov	r5, r1
   227c8:	movne	r9, r3
   227cc:	moveq	r9, ip
   227d0:	bl	12284 <malloc@plt>
   227d4:	subs	r4, r0, #0
   227d8:	beq	228b0 <__assert_fail@plt+0x10278>
   227dc:	cmp	r5, #0
   227e0:	movw	r6, #8304	; 0x2070
   227e4:	movt	r6, #3
   227e8:	mov	r0, r4
   227ec:	moveq	r5, r6
   227f0:	str	r5, [r0, #20]!
   227f4:	bl	22080 <__assert_fail@plt+0xfa48>
   227f8:	cmp	r0, #0
   227fc:	beq	228a0 <__assert_fail@plt+0x10268>
   22800:	ldrb	r3, [r5, #16]
   22804:	vldr	s15, [r5, #8]
   22808:	cmp	r3, #0
   2280c:	bne	22834 <__assert_fail@plt+0x101fc>
   22810:	vmov	s14, r7
   22814:	vcvt.f32.u32	s13, s14
   22818:	vldr	s14, [pc, #152]	; 228b8 <__assert_fail@plt+0x10280>
   2281c:	vdiv.f32	s15, s13, s15
   22820:	vcmpe.f32	s15, s14
   22824:	vmrs	APSR_nzcv, fpscr
   22828:	bge	22898 <__assert_fail@plt+0x10260>
   2282c:	vcvt.u32.f32	s15, s15
   22830:	vmov	r7, s15
   22834:	mov	r0, r7
   22838:	bl	21e80 <__assert_fail@plt+0xf848>
   2283c:	cmn	r0, #-1073741823	; 0xc0000001
   22840:	mov	r5, r0
   22844:	bhi	22898 <__assert_fail@plt+0x10260>
   22848:	cmp	r0, #0
   2284c:	str	r0, [r4, #8]
   22850:	beq	228a0 <__assert_fail@plt+0x10268>
   22854:	mov	r1, #8
   22858:	bl	11f6c <calloc@plt>
   2285c:	cmp	r0, #0
   22860:	str	r0, [r4]
   22864:	beq	228a0 <__assert_fail@plt+0x10268>
   22868:	ldr	r1, [sp, #32]
   2286c:	mov	r3, #0
   22870:	add	r5, r0, r5, lsl #3
   22874:	str	r8, [r4, #24]
   22878:	str	r5, [r4, #4]
   2287c:	mov	r0, r4
   22880:	str	r9, [r4, #28]
   22884:	str	r1, [r4, #32]
   22888:	str	r3, [r4, #12]
   2288c:	str	r3, [r4, #16]
   22890:	str	r3, [r4, #36]	; 0x24
   22894:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   22898:	mov	r3, #0
   2289c:	str	r3, [r4, #8]
   228a0:	mov	r0, r4
   228a4:	bl	12020 <free@plt>
   228a8:	mov	r0, #0
   228ac:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   228b0:	mov	r0, r4
   228b4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   228b8:	svcmi	0x00800000
   228bc:	push	{r4, r5, r6, r7, r8, lr}
   228c0:	mov	r5, r0
   228c4:	ldr	r7, [r0]
   228c8:	ldr	r3, [r0, #4]
   228cc:	cmp	r7, r3
   228d0:	addcc	r7, r7, #8
   228d4:	movcc	r6, #0
   228d8:	bcs	22958 <__assert_fail@plt+0x10320>
   228dc:	ldr	r2, [r7, #-8]
   228e0:	mov	r8, r7
   228e4:	cmp	r2, #0
   228e8:	beq	2294c <__assert_fail@plt+0x10314>
   228ec:	ldr	r4, [r7, #-4]
   228f0:	ldr	r2, [r5, #32]
   228f4:	cmp	r4, #0
   228f8:	beq	22930 <__assert_fail@plt+0x102f8>
   228fc:	cmp	r2, #0
   22900:	beq	22910 <__assert_fail@plt+0x102d8>
   22904:	ldr	r0, [r4]
   22908:	blx	r2
   2290c:	ldr	r2, [r5, #32]
   22910:	ldr	r3, [r4, #4]
   22914:	ldr	r1, [r5, #36]	; 0x24
   22918:	cmp	r3, #0
   2291c:	str	r6, [r4]
   22920:	str	r1, [r4, #4]
   22924:	str	r4, [r5, #36]	; 0x24
   22928:	mov	r4, r3
   2292c:	bne	228fc <__assert_fail@plt+0x102c4>
   22930:	cmp	r2, #0
   22934:	beq	22940 <__assert_fail@plt+0x10308>
   22938:	ldr	r0, [r7, #-8]
   2293c:	blx	r2
   22940:	ldr	r3, [r5, #4]
   22944:	str	r6, [r7, #-8]
   22948:	str	r6, [r7, #-4]
   2294c:	cmp	r3, r8
   22950:	add	r7, r7, #8
   22954:	bhi	228dc <__assert_fail@plt+0x102a4>
   22958:	mov	r3, #0
   2295c:	str	r3, [r5, #12]
   22960:	str	r3, [r5, #16]
   22964:	pop	{r4, r5, r6, r7, r8, pc}
   22968:	push	{r3, r4, r5, r6, r7, lr}
   2296c:	mov	r5, r0
   22970:	ldr	r3, [r0, #32]
   22974:	cmp	r3, #0
   22978:	beq	22988 <__assert_fail@plt+0x10350>
   2297c:	ldr	r3, [r0, #16]
   22980:	cmp	r3, #0
   22984:	bne	22a04 <__assert_fail@plt+0x103cc>
   22988:	ldr	r3, [r5, #4]
   2298c:	ldr	r6, [r5]
   22990:	cmp	r6, r3
   22994:	bcs	229d0 <__assert_fail@plt+0x10398>
   22998:	add	r6, r6, #8
   2299c:	ldr	r0, [r6, #-4]
   229a0:	mov	r7, r6
   229a4:	cmp	r0, #0
   229a8:	beq	229c4 <__assert_fail@plt+0x1038c>
   229ac:	ldr	r4, [r0, #4]
   229b0:	bl	12020 <free@plt>
   229b4:	cmp	r4, #0
   229b8:	mov	r0, r4
   229bc:	bne	229ac <__assert_fail@plt+0x10374>
   229c0:	ldr	r3, [r5, #4]
   229c4:	cmp	r7, r3
   229c8:	add	r6, r6, #8
   229cc:	bcc	2299c <__assert_fail@plt+0x10364>
   229d0:	ldr	r0, [r5, #36]	; 0x24
   229d4:	cmp	r0, #0
   229d8:	beq	229f0 <__assert_fail@plt+0x103b8>
   229dc:	ldr	r4, [r0, #4]
   229e0:	bl	12020 <free@plt>
   229e4:	cmp	r4, #0
   229e8:	mov	r0, r4
   229ec:	bne	229dc <__assert_fail@plt+0x103a4>
   229f0:	ldr	r0, [r5]
   229f4:	bl	12020 <free@plt>
   229f8:	mov	r0, r5
   229fc:	pop	{r3, r4, r5, r6, r7, lr}
   22a00:	b	12020 <free@plt>
   22a04:	ldr	r6, [r0]
   22a08:	ldr	r3, [r0, #4]
   22a0c:	cmp	r6, r3
   22a10:	bcs	229d0 <__assert_fail@plt+0x10398>
   22a14:	ldr	r0, [r6]
   22a18:	cmp	r0, #0
   22a1c:	movne	r4, r6
   22a20:	bne	22a2c <__assert_fail@plt+0x103f4>
   22a24:	b	22a44 <__assert_fail@plt+0x1040c>
   22a28:	ldr	r0, [r4]
   22a2c:	ldr	r3, [r5, #32]
   22a30:	blx	r3
   22a34:	ldr	r4, [r4, #4]
   22a38:	cmp	r4, #0
   22a3c:	bne	22a28 <__assert_fail@plt+0x103f0>
   22a40:	ldr	r3, [r5, #4]
   22a44:	add	r6, r6, #8
   22a48:	cmp	r3, r6
   22a4c:	bhi	22a14 <__assert_fail@plt+0x103dc>
   22a50:	b	2298c <__assert_fail@plt+0x10354>
   22a54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22a58:	movw	r5, #21904	; 0x5590
   22a5c:	ldr	r6, [r0, #20]
   22a60:	movt	r5, #4
   22a64:	sub	sp, sp, #48	; 0x30
   22a68:	mov	r4, r0
   22a6c:	ldr	r3, [r5]
   22a70:	vldr	s15, [r6, #8]
   22a74:	ldrb	r2, [r6, #16]
   22a78:	cmp	r2, #0
   22a7c:	str	r3, [sp, #44]	; 0x2c
   22a80:	bne	22aa8 <__assert_fail@plt+0x10470>
   22a84:	vmov	s14, r1
   22a88:	vcvt.f32.u32	s13, s14
   22a8c:	vldr	s14, [pc, #320]	; 22bd4 <__assert_fail@plt+0x1059c>
   22a90:	vdiv.f32	s15, s13, s15
   22a94:	vcmpe.f32	s15, s14
   22a98:	vmrs	APSR_nzcv, fpscr
   22a9c:	bge	22b9c <__assert_fail@plt+0x10564>
   22aa0:	vcvt.u32.f32	s15, s15
   22aa4:	vmov	r1, s15
   22aa8:	mov	r0, r1
   22aac:	bl	21e80 <__assert_fail@plt+0xf848>
   22ab0:	sub	r3, r0, #1
   22ab4:	mov	r7, r0
   22ab8:	cmn	r3, #-1073741822	; 0xc0000002
   22abc:	bhi	22b9c <__assert_fail@plt+0x10564>
   22ac0:	ldr	r3, [r4, #8]
   22ac4:	cmp	r3, r0
   22ac8:	beq	22b7c <__assert_fail@plt+0x10544>
   22acc:	mov	r1, #8
   22ad0:	bl	11f6c <calloc@plt>
   22ad4:	cmp	r0, #0
   22ad8:	mov	r3, r0
   22adc:	str	r0, [sp, #4]
   22ae0:	beq	22b9c <__assert_fail@plt+0x10564>
   22ae4:	ldr	sl, [r4, #24]
   22ae8:	mov	ip, #0
   22aec:	ldr	r9, [r4, #28]
   22af0:	add	r0, sp, #4
   22af4:	ldr	r8, [r4, #32]
   22af8:	mov	r2, ip
   22afc:	ldr	lr, [r4, #36]	; 0x24
   22b00:	mov	r1, r4
   22b04:	add	r3, r3, r7, lsl #3
   22b08:	str	r6, [sp, #24]
   22b0c:	str	r7, [sp, #12]
   22b10:	str	r3, [sp, #8]
   22b14:	str	sl, [sp, #28]
   22b18:	str	r9, [sp, #32]
   22b1c:	str	r8, [sp, #36]	; 0x24
   22b20:	str	lr, [sp, #40]	; 0x28
   22b24:	str	ip, [sp, #16]
   22b28:	str	ip, [sp, #20]
   22b2c:	bl	2212c <__assert_fail@plt+0xfaf4>
   22b30:	subs	r6, r0, #0
   22b34:	bne	22ba4 <__assert_fail@plt+0x1056c>
   22b38:	ldr	r3, [sp, #40]	; 0x28
   22b3c:	mov	r0, r4
   22b40:	add	r1, sp, #4
   22b44:	mov	r2, #1
   22b48:	str	r3, [r4, #36]	; 0x24
   22b4c:	bl	2212c <__assert_fail@plt+0xfaf4>
   22b50:	cmp	r0, #0
   22b54:	beq	22bd0 <__assert_fail@plt+0x10598>
   22b58:	mov	r0, r4
   22b5c:	add	r1, sp, #4
   22b60:	mov	r2, r6
   22b64:	bl	2212c <__assert_fail@plt+0xfaf4>
   22b68:	cmp	r0, #0
   22b6c:	beq	22bd0 <__assert_fail@plt+0x10598>
   22b70:	ldr	r0, [sp, #4]
   22b74:	bl	12020 <free@plt>
   22b78:	b	22b80 <__assert_fail@plt+0x10548>
   22b7c:	mov	r6, #1
   22b80:	ldr	r1, [sp, #44]	; 0x2c
   22b84:	mov	r0, r6
   22b88:	ldr	r3, [r5]
   22b8c:	cmp	r1, r3
   22b90:	bne	22bcc <__assert_fail@plt+0x10594>
   22b94:	add	sp, sp, #48	; 0x30
   22b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22b9c:	mov	r6, #0
   22ba0:	b	22b80 <__assert_fail@plt+0x10548>
   22ba4:	ldr	r0, [r4]
   22ba8:	bl	12020 <free@plt>
   22bac:	add	r0, sp, #8
   22bb0:	ldr	ip, [sp, #4]
   22bb4:	ldm	r0, {r0, r1, r2}
   22bb8:	ldr	r3, [sp, #40]	; 0x28
   22bbc:	str	ip, [r4]
   22bc0:	stmib	r4, {r0, r1, r2}
   22bc4:	str	r3, [r4, #36]	; 0x24
   22bc8:	b	22b80 <__assert_fail@plt+0x10548>
   22bcc:	bl	120e0 <__stack_chk_fail@plt>
   22bd0:	bl	125cc <abort@plt>
   22bd4:	svcmi	0x00800000
   22bd8:	push	{r4, r5, r6, r7, lr}
   22bdc:	movw	r4, #21904	; 0x5590
   22be0:	movt	r4, #4
   22be4:	sub	sp, sp, #12
   22be8:	subs	r7, r1, #0
   22bec:	mov	r5, r2
   22bf0:	ldr	r3, [r4]
   22bf4:	mov	r6, r0
   22bf8:	str	r3, [sp, #4]
   22bfc:	beq	22d38 <__assert_fail@plt+0x10700>
   22c00:	mov	r3, #0
   22c04:	mov	r2, sp
   22c08:	bl	21f84 <__assert_fail@plt+0xf94c>
   22c0c:	cmp	r0, #0
   22c10:	beq	22c3c <__assert_fail@plt+0x10604>
   22c14:	cmp	r5, #0
   22c18:	moveq	r0, r5
   22c1c:	strne	r0, [r5]
   22c20:	movne	r0, #0
   22c24:	ldr	r2, [sp, #4]
   22c28:	ldr	r3, [r4]
   22c2c:	cmp	r2, r3
   22c30:	bne	22d78 <__assert_fail@plt+0x10740>
   22c34:	add	sp, sp, #12
   22c38:	pop	{r4, r5, r6, r7, pc}
   22c3c:	vldr	s11, [r6, #8]
   22c40:	vcvt.f32.u32	s14, s11
   22c44:	ldr	r3, [r6, #20]
   22c48:	vldr	s15, [r3, #8]
   22c4c:	vldr	s13, [r6, #12]
   22c50:	vmul.f32	s15, s14, s15
   22c54:	vcvt.f32.u32	s14, s13
   22c58:	vcmpe.f32	s14, s15
   22c5c:	vmrs	APSR_nzcv, fpscr
   22c60:	bgt	22cac <__assert_fail@plt+0x10674>
   22c64:	ldr	r5, [sp]
   22c68:	ldr	r3, [r5]
   22c6c:	cmp	r3, #0
   22c70:	beq	22d3c <__assert_fail@plt+0x10704>
   22c74:	ldr	r3, [r6, #36]	; 0x24
   22c78:	cmp	r3, #0
   22c7c:	beq	22d60 <__assert_fail@plt+0x10728>
   22c80:	ldr	r2, [r3, #4]
   22c84:	str	r2, [r6, #36]	; 0x24
   22c88:	ldr	r1, [r5, #4]
   22c8c:	mov	r0, #1
   22c90:	ldr	r2, [r6, #16]
   22c94:	str	r7, [r3]
   22c98:	str	r1, [r3, #4]
   22c9c:	add	r2, r2, r0
   22ca0:	str	r3, [r5, #4]
   22ca4:	str	r2, [r6, #16]
   22ca8:	b	22c24 <__assert_fail@plt+0x105ec>
   22cac:	add	r0, r6, #20
   22cb0:	bl	22080 <__assert_fail@plt+0xfa48>
   22cb4:	vldr	s11, [r6, #8]
   22cb8:	vcvt.f32.u32	s15, s11
   22cbc:	ldr	r3, [r6, #20]
   22cc0:	vldr	s14, [r3, #8]
   22cc4:	vldr	s11, [r6, #12]
   22cc8:	vmul.f32	s13, s14, s15
   22ccc:	vcvt.f32.u32	s12, s11
   22cd0:	vcmpe.f32	s12, s13
   22cd4:	vmrs	APSR_nzcv, fpscr
   22cd8:	ble	22c64 <__assert_fail@plt+0x1062c>
   22cdc:	ldrb	r2, [r3, #16]
   22ce0:	cmp	r2, #0
   22ce4:	vldreq	s13, [r3, #12]
   22ce8:	vldrne	s14, [r3, #12]
   22cec:	vmuleq.f32	s15, s15, s13
   22cf0:	vmul.f32	s15, s14, s15
   22cf4:	vldr	s14, [pc, #128]	; 22d7c <__assert_fail@plt+0x10744>
   22cf8:	vcmpe.f32	s15, s14
   22cfc:	vmrs	APSR_nzcv, fpscr
   22d00:	bge	22d70 <__assert_fail@plt+0x10738>
   22d04:	vcvt.u32.f32	s15, s15
   22d08:	mov	r0, r6
   22d0c:	vmov	r1, s15
   22d10:	bl	22a54 <__assert_fail@plt+0x1041c>
   22d14:	cmp	r0, #0
   22d18:	beq	22d70 <__assert_fail@plt+0x10738>
   22d1c:	mov	r2, sp
   22d20:	mov	r0, r6
   22d24:	mov	r1, r7
   22d28:	mov	r3, #0
   22d2c:	bl	21f84 <__assert_fail@plt+0xf94c>
   22d30:	cmp	r0, #0
   22d34:	beq	22c64 <__assert_fail@plt+0x1062c>
   22d38:	bl	125cc <abort@plt>
   22d3c:	ldr	r2, [r6, #16]
   22d40:	mov	r0, #1
   22d44:	ldr	r3, [r6, #12]
   22d48:	add	r2, r2, r0
   22d4c:	str	r7, [r5]
   22d50:	add	r3, r3, r0
   22d54:	str	r2, [r6, #16]
   22d58:	str	r3, [r6, #12]
   22d5c:	b	22c24 <__assert_fail@plt+0x105ec>
   22d60:	mov	r0, #8
   22d64:	bl	12284 <malloc@plt>
   22d68:	subs	r3, r0, #0
   22d6c:	bne	22c88 <__assert_fail@plt+0x10650>
   22d70:	mvn	r0, #0
   22d74:	b	22c24 <__assert_fail@plt+0x105ec>
   22d78:	bl	120e0 <__stack_chk_fail@plt>
   22d7c:	svcmi	0x00800000
   22d80:	b	22bd8 <__assert_fail@plt+0x105a0>
   22d84:	push	{r4, r5, lr}
   22d88:	movw	r4, #21904	; 0x5590
   22d8c:	movt	r4, #4
   22d90:	sub	sp, sp, #12
   22d94:	mov	r5, r1
   22d98:	ldr	r3, [r4]
   22d9c:	mov	r2, sp
   22da0:	str	r3, [sp, #4]
   22da4:	bl	22bd8 <__assert_fail@plt+0x105a0>
   22da8:	cmn	r0, #1
   22dac:	beq	22ddc <__assert_fail@plt+0x107a4>
   22db0:	cmp	r0, #0
   22db4:	movne	r0, r5
   22db8:	beq	22dd4 <__assert_fail@plt+0x1079c>
   22dbc:	ldr	r2, [sp, #4]
   22dc0:	ldr	r3, [r4]
   22dc4:	cmp	r2, r3
   22dc8:	bne	22de4 <__assert_fail@plt+0x107ac>
   22dcc:	add	sp, sp, #12
   22dd0:	pop	{r4, r5, pc}
   22dd4:	ldr	r0, [sp]
   22dd8:	b	22dbc <__assert_fail@plt+0x10784>
   22ddc:	mov	r0, #0
   22de0:	b	22dbc <__assert_fail@plt+0x10784>
   22de4:	bl	120e0 <__stack_chk_fail@plt>
   22de8:	push	{r4, r5, r6, r7, lr}
   22dec:	movw	r4, #21904	; 0x5590
   22df0:	movt	r4, #4
   22df4:	sub	sp, sp, #12
   22df8:	mov	r3, #1
   22dfc:	mov	r5, r0
   22e00:	ldr	ip, [r4]
   22e04:	mov	r2, sp
   22e08:	str	ip, [sp, #4]
   22e0c:	bl	21f84 <__assert_fail@plt+0xf94c>
   22e10:	subs	r6, r0, #0
   22e14:	beq	22e34 <__assert_fail@plt+0x107fc>
   22e18:	ldr	r3, [sp]
   22e1c:	ldr	r2, [r5, #16]
   22e20:	ldr	r3, [r3]
   22e24:	sub	r2, r2, #1
   22e28:	str	r2, [r5, #16]
   22e2c:	cmp	r3, #0
   22e30:	beq	22e50 <__assert_fail@plt+0x10818>
   22e34:	ldr	r2, [sp, #4]
   22e38:	mov	r0, r6
   22e3c:	ldr	r3, [r4]
   22e40:	cmp	r2, r3
   22e44:	bne	22f14 <__assert_fail@plt+0x108dc>
   22e48:	add	sp, sp, #12
   22e4c:	pop	{r4, r5, r6, r7, pc}
   22e50:	vldr	s12, [r5, #8]
   22e54:	vcvt.f32.u32	s14, s12
   22e58:	ldr	r3, [r5, #20]
   22e5c:	vldr	s15, [r3]
   22e60:	ldr	r3, [r5, #12]
   22e64:	sub	r3, r3, #1
   22e68:	str	r3, [r5, #12]
   22e6c:	vmov	s13, r3
   22e70:	vmul.f32	s15, s14, s15
   22e74:	vcvt.f32.u32	s14, s13
   22e78:	vcmpe.f32	s14, s15
   22e7c:	vmrs	APSR_nzcv, fpscr
   22e80:	bpl	22e34 <__assert_fail@plt+0x107fc>
   22e84:	add	r0, r5, #20
   22e88:	bl	22080 <__assert_fail@plt+0xfa48>
   22e8c:	vldr	s12, [r5, #8]
   22e90:	vcvt.f32.u32	s15, s12
   22e94:	ldr	r3, [r5, #20]
   22e98:	vldr	s14, [r3]
   22e9c:	vldr	s12, [r5, #12]
   22ea0:	vmul.f32	s14, s15, s14
   22ea4:	vcvt.f32.u32	s13, s12
   22ea8:	vcmpe.f32	s13, s14
   22eac:	vmrs	APSR_nzcv, fpscr
   22eb0:	bpl	22e34 <__assert_fail@plt+0x107fc>
   22eb4:	vldr	s14, [r3, #4]
   22eb8:	vmul.f32	s15, s15, s14
   22ebc:	ldrb	r2, [r3, #16]
   22ec0:	mov	r0, r5
   22ec4:	cmp	r2, #0
   22ec8:	vldreq	s14, [r3, #8]
   22ecc:	vmuleq.f32	s15, s15, s14
   22ed0:	vcvt.u32.f32	s15, s15
   22ed4:	vmov	r1, s15
   22ed8:	bl	22a54 <__assert_fail@plt+0x1041c>
   22edc:	cmp	r0, #0
   22ee0:	bne	22e34 <__assert_fail@plt+0x107fc>
   22ee4:	ldr	r0, [r5, #36]	; 0x24
   22ee8:	cmp	r0, #0
   22eec:	bne	22ef8 <__assert_fail@plt+0x108c0>
   22ef0:	b	22f08 <__assert_fail@plt+0x108d0>
   22ef4:	mov	r0, r7
   22ef8:	ldr	r7, [r0, #4]
   22efc:	bl	12020 <free@plt>
   22f00:	cmp	r7, #0
   22f04:	bne	22ef4 <__assert_fail@plt+0x108bc>
   22f08:	mov	r3, #0
   22f0c:	str	r3, [r5, #36]	; 0x24
   22f10:	b	22e34 <__assert_fail@plt+0x107fc>
   22f14:	bl	120e0 <__stack_chk_fail@plt>
   22f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f1c:	vpush	{d8-d9}
   22f20:	movw	r4, #21904	; 0x5590
   22f24:	sub	sp, sp, #132	; 0x84
   22f28:	movt	r4, #4
   22f2c:	ands	r5, r3, #32
   22f30:	mov	r7, r1
   22f34:	str	r3, [sp, #24]
   22f38:	mov	r6, r0
   22f3c:	ldr	r3, [r4]
   22f40:	moveq	ip, #1000	; 0x3e8
   22f44:	movne	ip, #1024	; 0x400
   22f48:	str	r5, [sp, #52]	; 0x34
   22f4c:	ldr	r5, [sp, #24]
   22f50:	str	r2, [sp, #28]
   22f54:	str	r3, [sp, #124]	; 0x7c
   22f58:	and	r5, r5, #3
   22f5c:	str	r4, [sp, #32]
   22f60:	add	r4, r2, #648	; 0x288
   22f64:	str	ip, [sp, #64]	; 0x40
   22f68:	str	r4, [sp, #40]	; 0x28
   22f6c:	str	r5, [sp, #48]	; 0x30
   22f70:	bl	124e8 <localeconv@plt>
   22f74:	ldr	r5, [sp, #40]	; 0x28
   22f78:	str	r5, [sp, #44]	; 0x2c
   22f7c:	ldr	ip, [r0]
   22f80:	mov	r4, r0
   22f84:	mov	r0, ip
   22f88:	str	ip, [sp, #36]	; 0x24
   22f8c:	bl	1232c <strlen@plt>
   22f90:	ldr	r9, [r4, #4]
   22f94:	ldr	ip, [sp, #36]	; 0x24
   22f98:	ldr	r8, [r4, #8]
   22f9c:	sub	r3, r0, #1
   22fa0:	mov	sl, r0
   22fa4:	cmp	r3, #16
   22fa8:	movw	r3, #528	; 0x210
   22fac:	movt	r3, #3
   22fb0:	mov	r0, r9
   22fb4:	movcs	sl, #1
   22fb8:	movcs	ip, r3
   22fbc:	str	ip, [sp, #36]	; 0x24
   22fc0:	bl	1232c <strlen@plt>
   22fc4:	movw	r3, #54180	; 0xd3a4
   22fc8:	ldrd	r4, [sp, #192]	; 0xc0
   22fcc:	movt	r3, #2
   22fd0:	cmp	r0, #16
   22fd4:	ldrd	r0, [sp, #184]	; 0xb8
   22fd8:	movhi	r9, r3
   22fdc:	cmp	r5, r1
   22fe0:	cmpeq	r4, r0
   22fe4:	bhi	23228 <__assert_fail@plt+0x10bf0>
   22fe8:	mov	r2, r4
   22fec:	mov	r3, r5
   22ff0:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   22ff4:	orrs	r1, r2, r3
   22ff8:	bne	23038 <__assert_fail@plt+0x10a00>
   22ffc:	ldrd	r2, [sp, #192]	; 0xc0
   23000:	ldrd	r0, [sp, #184]	; 0xb8
   23004:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23008:	mul	r2, r0, r7
   2300c:	mov	r3, r1
   23010:	umull	r4, r5, r0, r6
   23014:	mla	r1, r6, r1, r2
   23018:	mov	r2, r0
   2301c:	add	r5, r1, r5
   23020:	mov	r0, r4
   23024:	mov	r1, r5
   23028:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2302c:	cmp	r1, r7
   23030:	cmpeq	r0, r6
   23034:	beq	23628 <__assert_fail@plt+0x10ff0>
   23038:	mov	r0, r6
   2303c:	mov	r1, r7
   23040:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   23044:	vmov	d9, r0, r1
   23048:	ldrd	r0, [sp, #184]	; 0xb8
   2304c:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   23050:	vmov	d8, r0, r1
   23054:	ldrd	r0, [sp, #192]	; 0xc0
   23058:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   2305c:	ldr	r4, [sp, #24]
   23060:	tst	r4, #16
   23064:	vmov	d7, r0, r1
   23068:	vdiv.f64	d8, d8, d7
   2306c:	vmul.f64	d8, d9, d8
   23070:	beq	233d0 <__assert_fail@plt+0x10d98>
   23074:	vldr	s15, [sp, #64]	; 0x40
   23078:	mov	r6, #0
   2307c:	vcvt.f64.s32	d6, s15
   23080:	vmov.f64	d7, d6
   23084:	add	r6, r6, #1
   23088:	vmov.f64	d5, d7
   2308c:	vmul.f64	d7, d7, d6
   23090:	vcmpe.f64	d8, d7
   23094:	vmrs	APSR_nzcv, fpscr
   23098:	blt	230a4 <__assert_fail@plt+0x10a6c>
   2309c:	cmp	r6, #8
   230a0:	bne	23084 <__assert_fail@plt+0x10a4c>
   230a4:	vdiv.f64	d8, d8, d5
   230a8:	ldr	r4, [sp, #48]	; 0x30
   230ac:	cmp	r4, #1
   230b0:	vmoveq	r0, r1, d8
   230b4:	beq	23114 <__assert_fail@plt+0x10adc>
   230b8:	vldr	d7, [pc, #776]	; 233c8 <__assert_fail@plt+0x10d90>
   230bc:	vcmpe.f64	d8, d7
   230c0:	vmov	r0, r1, d8
   230c4:	vmrs	APSR_nzcv, fpscr
   230c8:	bpl	23114 <__assert_fail@plt+0x10adc>
   230cc:	bl	2c908 <__assert_fail@plt+0x1a2d0>
   230d0:	ldr	ip, [sp, #48]	; 0x30
   230d4:	cmp	ip, #0
   230d8:	mov	r4, r0
   230dc:	mov	r5, r1
   230e0:	movne	r0, #0
   230e4:	movne	r1, #0
   230e8:	bne	23108 <__assert_fail@plt+0x10ad0>
   230ec:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   230f0:	vmov	d7, r0, r1
   230f4:	ldr	r1, [sp, #48]	; 0x30
   230f8:	vcmp.f64	d8, d7
   230fc:	vmrs	APSR_nzcv, fpscr
   23100:	moveq	r0, #0
   23104:	movne	r0, #1
   23108:	adds	r0, r0, r4
   2310c:	adc	r1, r1, r5
   23110:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   23114:	strd	r0, [sp]
   23118:	mvn	r2, #0
   2311c:	mov	r1, #1
   23120:	movw	r3, #8472	; 0x2118
   23124:	ldr	r0, [sp, #28]
   23128:	movt	r3, #3
   2312c:	bl	12398 <__sprintf_chk@plt>
   23130:	ldr	r0, [sp, #28]
   23134:	bl	1232c <strlen@plt>
   23138:	ldr	r4, [sp, #52]	; 0x34
   2313c:	add	sl, sl, #1
   23140:	cmp	r4, #0
   23144:	movne	r3, #1
   23148:	moveq	r3, #2
   2314c:	add	r3, r3, sl
   23150:	mov	fp, r0
   23154:	cmp	r0, r3
   23158:	bhi	2317c <__assert_fail@plt+0x10b44>
   2315c:	ldr	r5, [sp, #24]
   23160:	tst	r5, #8
   23164:	beq	2341c <__assert_fail@plt+0x10de4>
   23168:	ldr	ip, [sp, #28]
   2316c:	add	r3, ip, r0
   23170:	ldrb	r3, [r3, #-1]
   23174:	cmp	r3, #48	; 0x30
   23178:	bne	2341c <__assert_fail@plt+0x10de4>
   2317c:	vmov.f64	d5, #36	; 0x41200000  10.0
   23180:	ldr	r4, [sp, #48]	; 0x30
   23184:	cmp	r4, #1
   23188:	vmul.f64	d8, d8, d5
   2318c:	beq	231f0 <__assert_fail@plt+0x10bb8>
   23190:	vldr	d7, [pc, #560]	; 233c8 <__assert_fail@plt+0x10d90>
   23194:	vcmpe.f64	d8, d7
   23198:	vmrs	APSR_nzcv, fpscr
   2319c:	bpl	231f0 <__assert_fail@plt+0x10bb8>
   231a0:	vmov	r0, r1, d8
   231a4:	bl	2c908 <__assert_fail@plt+0x1a2d0>
   231a8:	ldr	ip, [sp, #48]	; 0x30
   231ac:	cmp	ip, #0
   231b0:	mov	r4, r0
   231b4:	mov	r5, r1
   231b8:	movne	r0, #0
   231bc:	movne	r1, #0
   231c0:	bne	231e0 <__assert_fail@plt+0x10ba8>
   231c4:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   231c8:	vmov	d7, r0, r1
   231cc:	ldr	r1, [sp, #48]	; 0x30
   231d0:	vcmp.f64	d8, d7
   231d4:	vmrs	APSR_nzcv, fpscr
   231d8:	moveq	r0, #0
   231dc:	movne	r0, #1
   231e0:	adds	r0, r0, r4
   231e4:	adc	r1, r1, r5
   231e8:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   231ec:	vmov	d8, r0, r1
   231f0:	mov	r1, #1
   231f4:	mvn	r2, #0
   231f8:	vmov.f64	d7, #36	; 0x41200000  10.0
   231fc:	movw	r3, #8464	; 0x2110
   23200:	ldr	r0, [sp, #28]
   23204:	movt	r3, #3
   23208:	mov	sl, #0
   2320c:	vdiv.f64	d8, d8, d7
   23210:	vstr	d8, [sp]
   23214:	bl	12398 <__sprintf_chk@plt>
   23218:	ldr	r0, [sp, #28]
   2321c:	bl	1232c <strlen@plt>
   23220:	mov	fp, r0
   23224:	b	2341c <__assert_fail@plt+0x10de4>
   23228:	ldrd	r4, [sp, #184]	; 0xb8
   2322c:	orrs	r5, r4, r5
   23230:	beq	23038 <__assert_fail@plt+0x10a00>
   23234:	ldrd	r0, [sp, #192]	; 0xc0
   23238:	ldrd	r2, [sp, #184]	; 0xb8
   2323c:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23240:	orrs	ip, r2, r3
   23244:	bne	23038 <__assert_fail@plt+0x10a00>
   23248:	ldrd	r2, [sp, #184]	; 0xb8
   2324c:	ldrd	r0, [sp, #192]	; 0xc0
   23250:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23254:	strd	r0, [sp, #16]
   23258:	mov	r0, r6
   2325c:	mov	r1, r7
   23260:	ldrd	r2, [sp, #16]
   23264:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23268:	mov	r1, #10
   2326c:	umull	r4, r5, r2, r1
   23270:	mla	r1, r1, r3, r5
   23274:	strd	r4, [sp, #56]	; 0x38
   23278:	ldrd	r2, [sp, #16]
   2327c:	str	r1, [sp, #60]	; 0x3c
   23280:	ldrd	r0, [sp, #56]	; 0x38
   23284:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23288:	mov	r0, r6
   2328c:	mov	r1, r7
   23290:	adds	r6, r2, r2
   23294:	adc	r7, r3, r3
   23298:	ldrd	r2, [sp, #16]
   2329c:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   232a0:	ldrd	r2, [sp, #16]
   232a4:	mov	r4, r0
   232a8:	mov	r5, r1
   232ac:	ldrd	r0, [sp, #56]	; 0x38
   232b0:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   232b4:	mov	ip, r0
   232b8:	ldrd	r0, [sp, #16]
   232bc:	cmp	r1, r7
   232c0:	cmpeq	r0, r6
   232c4:	bls	23784 <__assert_fail@plt+0x1114c>
   232c8:	orrs	r1, r6, r7
   232cc:	moveq	r7, #0
   232d0:	movne	r7, #1
   232d4:	ldr	r0, [sp, #24]
   232d8:	ands	r0, r0, #16
   232dc:	str	r0, [sp, #16]
   232e0:	beq	23684 <__assert_fail@plt+0x1104c>
   232e4:	ldr	r2, [sp, #64]	; 0x40
   232e8:	mov	r3, #0
   232ec:	cmp	r5, r3
   232f0:	cmpeq	r4, r2
   232f4:	strd	r2, [sp, #56]	; 0x38
   232f8:	bcc	237c4 <__assert_fail@plt+0x1118c>
   232fc:	mov	r6, #0
   23300:	str	sl, [sp, #68]	; 0x44
   23304:	mov	r3, r6
   23308:	mov	sl, r7
   2330c:	mov	r6, ip
   23310:	str	r9, [sp, #72]	; 0x48
   23314:	str	r8, [sp, #76]	; 0x4c
   23318:	mov	ip, r3
   2331c:	ldr	r7, [sp, #64]	; 0x40
   23320:	ldrd	r8, [sp, #56]	; 0x38
   23324:	b	23348 <__assert_fail@plt+0x10d10>
   23328:	adds	sl, sl, #0
   2332c:	movne	sl, #1
   23330:	cmp	r9, r5
   23334:	cmpeq	r8, r4
   23338:	add	ip, ip, #1
   2333c:	bhi	237f4 <__assert_fail@plt+0x111bc>
   23340:	cmp	ip, #8
   23344:	beq	237d0 <__assert_fail@plt+0x11198>
   23348:	mov	r0, r4
   2334c:	mov	r1, r5
   23350:	mov	r2, r8
   23354:	mov	r3, r9
   23358:	str	ip, [sp, #12]
   2335c:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23360:	mov	r1, r7
   23364:	asr	fp, sl, #1
   23368:	add	r2, r2, r2, lsl #2
   2336c:	add	r6, r6, r2, lsl #1
   23370:	mov	r0, r6
   23374:	bl	2c498 <__assert_fail@plt+0x19e60>
   23378:	mov	r2, r8
   2337c:	mov	r3, r9
   23380:	mov	r0, r4
   23384:	add	fp, fp, r1, lsl #1
   23388:	mov	r1, r5
   2338c:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23390:	add	sl, fp, sl
   23394:	mov	r4, r0
   23398:	mov	r5, r1
   2339c:	mov	r0, r6
   233a0:	mov	r1, r7
   233a4:	bl	2c2ac <__assert_fail@plt+0x19c74>
   233a8:	cmp	r7, fp
   233ac:	ldr	ip, [sp, #12]
   233b0:	mov	r6, r0
   233b4:	bhi	23328 <__assert_fail@plt+0x10cf0>
   233b8:	cmp	r7, sl
   233bc:	movcs	sl, #2
   233c0:	movcc	sl, #3
   233c4:	b	23330 <__assert_fail@plt+0x10cf8>
   233c8:	andeq	r0, r0, r0
   233cc:	mvnsmi	r0, #0
   233d0:	ldr	r4, [sp, #48]	; 0x30
   233d4:	cmp	r4, #1
   233d8:	beq	233ec <__assert_fail@plt+0x10db4>
   233dc:	vldr	d7, [pc, #-28]	; 233c8 <__assert_fail@plt+0x10d90>
   233e0:	vcmpe.f64	d8, d7
   233e4:	vmrs	APSR_nzcv, fpscr
   233e8:	bmi	235d4 <__assert_fail@plt+0x10f9c>
   233ec:	mov	r1, #1
   233f0:	mvn	r2, #0
   233f4:	vstr	d8, [sp]
   233f8:	movw	r3, #8464	; 0x2110
   233fc:	ldr	r0, [sp, #28]
   23400:	movt	r3, #3
   23404:	bl	12398 <__sprintf_chk@plt>
   23408:	ldr	r0, [sp, #28]
   2340c:	bl	1232c <strlen@plt>
   23410:	mov	sl, #0
   23414:	mvn	r6, #0
   23418:	mov	fp, r0
   2341c:	ldr	r4, [sp, #40]	; 0x28
   23420:	mov	r2, fp
   23424:	ldr	r1, [sp, #28]
   23428:	rsb	r7, fp, r4
   2342c:	rsb	fp, sl, fp
   23430:	add	fp, r7, fp
   23434:	mov	r0, r7
   23438:	bl	12014 <memmove@plt>
   2343c:	ldr	r4, [sp, #24]
   23440:	tst	r4, #4
   23444:	bne	23500 <__assert_fail@plt+0x10ec8>
   23448:	ldr	ip, [sp, #24]
   2344c:	tst	ip, #128	; 0x80
   23450:	beq	234d0 <__assert_fail@plt+0x10e98>
   23454:	cmn	r6, #1
   23458:	beq	23634 <__assert_fail@plt+0x10ffc>
   2345c:	ldr	r5, [sp, #24]
   23460:	and	r3, r5, #256	; 0x100
   23464:	orrs	ip, r6, r3
   23468:	beq	234d0 <__assert_fail@plt+0x10e98>
   2346c:	tst	r5, #64	; 0x40
   23470:	bne	235b8 <__assert_fail@plt+0x10f80>
   23474:	cmp	r6, #0
   23478:	ldreq	r2, [sp, #44]	; 0x2c
   2347c:	beq	234a8 <__assert_fail@plt+0x10e70>
   23480:	ldr	ip, [sp, #52]	; 0x34
   23484:	ldr	r4, [sp, #44]	; 0x2c
   23488:	cmp	ip, #0
   2348c:	add	r2, r4, #1
   23490:	beq	235a8 <__assert_fail@plt+0x10f70>
   23494:	movw	r1, #8432	; 0x20f0
   23498:	movt	r1, #3
   2349c:	ldrb	r1, [r1, r6]
   234a0:	ldr	r5, [sp, #44]	; 0x2c
   234a4:	strb	r1, [r5]
   234a8:	cmp	r3, #0
   234ac:	streq	r2, [sp, #44]	; 0x2c
   234b0:	beq	234d0 <__assert_fail@plt+0x10e98>
   234b4:	ldr	ip, [sp, #52]	; 0x34
   234b8:	cmp	ip, #0
   234bc:	bne	23594 <__assert_fail@plt+0x10f5c>
   234c0:	mov	r3, #66	; 0x42
   234c4:	add	r4, r2, #1
   234c8:	strb	r3, [r2]
   234cc:	str	r4, [sp, #44]	; 0x2c
   234d0:	ldr	r5, [sp, #44]	; 0x2c
   234d4:	mov	r3, #0
   234d8:	ldr	ip, [sp, #32]
   234dc:	mov	r0, r7
   234e0:	ldr	r2, [sp, #124]	; 0x7c
   234e4:	strb	r3, [r5]
   234e8:	ldr	r3, [ip]
   234ec:	cmp	r2, r3
   234f0:	bne	238f4 <__assert_fail@plt+0x112bc>
   234f4:	add	sp, sp, #132	; 0x84
   234f8:	vpop	{d8-d9}
   234fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23500:	mov	r0, r9
   23504:	rsb	fp, r7, fp
   23508:	bl	1232c <strlen@plt>
   2350c:	add	r5, r7, fp
   23510:	mov	r1, r7
   23514:	mov	r2, fp
   23518:	mov	r3, #41	; 0x29
   2351c:	mvn	sl, #0
   23520:	mov	r7, r5
   23524:	mov	r4, r0
   23528:	add	r0, sp, #80	; 0x50
   2352c:	bl	12188 <__memcpy_chk@plt>
   23530:	b	23548 <__assert_fail@plt+0x10f10>
   23534:	rsb	r7, r4, r7
   23538:	mov	r1, r9
   2353c:	mov	r2, r4
   23540:	mov	r0, r7
   23544:	bl	1205c <memcpy@plt>
   23548:	ldrb	r3, [r8]
   2354c:	cmp	r3, #0
   23550:	beq	23564 <__assert_fail@plt+0x10f2c>
   23554:	cmp	r3, #255	; 0xff
   23558:	add	r8, r8, #1
   2355c:	movne	sl, r3
   23560:	moveq	sl, fp
   23564:	cmp	sl, fp
   23568:	movcs	sl, fp
   2356c:	add	r5, sp, #80	; 0x50
   23570:	rsb	r7, sl, r7
   23574:	rsb	fp, sl, fp
   23578:	add	r1, r5, fp
   2357c:	mov	r2, sl
   23580:	mov	r0, r7
   23584:	bl	1205c <memcpy@plt>
   23588:	cmp	fp, #0
   2358c:	bne	23534 <__assert_fail@plt+0x10efc>
   23590:	b	23448 <__assert_fail@plt+0x10e10>
   23594:	cmp	r6, #0
   23598:	movne	r3, #105	; 0x69
   2359c:	strbne	r3, [r2]
   235a0:	addne	r2, r2, #1
   235a4:	b	234c0 <__assert_fail@plt+0x10e88>
   235a8:	cmp	r6, #1
   235ac:	moveq	r1, #107	; 0x6b
   235b0:	bne	23494 <__assert_fail@plt+0x10e5c>
   235b4:	b	234a0 <__assert_fail@plt+0x10e68>
   235b8:	ldr	r5, [sp, #28]
   235bc:	mov	r2, #32
   235c0:	ldr	r4, [sp, #40]	; 0x28
   235c4:	strb	r2, [r5, #648]	; 0x288
   235c8:	add	r4, r4, #1
   235cc:	str	r4, [sp, #44]	; 0x2c
   235d0:	b	23474 <__assert_fail@plt+0x10e3c>
   235d4:	vmov	r0, r1, d8
   235d8:	bl	2c908 <__assert_fail@plt+0x1a2d0>
   235dc:	ldr	ip, [sp, #48]	; 0x30
   235e0:	cmp	ip, #0
   235e4:	mov	r4, r0
   235e8:	mov	r5, r1
   235ec:	movne	r0, #0
   235f0:	movne	r1, #0
   235f4:	bne	23614 <__assert_fail@plt+0x10fdc>
   235f8:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   235fc:	vmov	d7, r0, r1
   23600:	ldr	r1, [sp, #48]	; 0x30
   23604:	vcmp.f64	d8, d7
   23608:	vmrs	APSR_nzcv, fpscr
   2360c:	moveq	r0, #0
   23610:	movne	r0, #1
   23614:	adds	r0, r0, r4
   23618:	adc	r1, r1, r5
   2361c:	bl	2c7fc <__assert_fail@plt+0x1a1c4>
   23620:	vmov	d8, r0, r1
   23624:	b	233ec <__assert_fail@plt+0x10db4>
   23628:	mov	r7, #0
   2362c:	mov	ip, r7
   23630:	b	232d4 <__assert_fail@plt+0x10c9c>
   23634:	ldrd	r4, [sp, #192]	; 0xc0
   23638:	cmp	r5, #0
   2363c:	cmpeq	r4, #1
   23640:	bls	238b0 <__assert_fail@plt+0x11278>
   23644:	ldr	ip, [sp, #64]	; 0x40
   23648:	mov	r6, #1
   2364c:	mov	r2, #1
   23650:	mov	r3, #0
   23654:	mov	r0, r4
   23658:	mov	r1, r5
   2365c:	mul	r4, ip, r3
   23660:	umull	r2, r3, r2, ip
   23664:	add	r3, r4, r3
   23668:	cmp	r1, r3
   2366c:	cmpeq	r0, r2
   23670:	bls	2345c <__assert_fail@plt+0x10e24>
   23674:	add	r6, r6, #1
   23678:	cmp	r6, #8
   2367c:	bne	2365c <__assert_fail@plt+0x11024>
   23680:	b	2345c <__assert_fail@plt+0x10e24>
   23684:	ldr	fp, [sp, #40]	; 0x28
   23688:	mvn	r6, #0
   2368c:	ldr	r3, [sp, #48]	; 0x30
   23690:	cmp	r3, #1
   23694:	beq	23790 <__assert_fail@plt+0x11158>
   23698:	ldr	r0, [sp, #48]	; 0x30
   2369c:	cmp	r0, #0
   236a0:	movne	ip, #0
   236a4:	bne	236b8 <__assert_fail@plt+0x11080>
   236a8:	add	ip, ip, r7
   236ac:	cmp	ip, #0
   236b0:	movle	ip, #0
   236b4:	movgt	ip, #1
   236b8:	cmp	ip, #0
   236bc:	beq	23738 <__assert_fail@plt+0x11100>
   236c0:	ldr	ip, [sp, #16]
   236c4:	adds	r4, r4, #1
   236c8:	adc	r5, r5, #0
   236cc:	cmp	ip, #0
   236d0:	beq	23738 <__assert_fail@plt+0x11100>
   236d4:	ldr	r0, [sp, #64]	; 0x40
   236d8:	mov	r1, #0
   236dc:	mov	r3, r1
   236e0:	mov	r2, r0
   236e4:	cmp	r3, r5
   236e8:	cmpeq	r2, r4
   236ec:	bne	23738 <__assert_fail@plt+0x11100>
   236f0:	cmp	r6, #8
   236f4:	beq	23738 <__assert_fail@plt+0x11100>
   236f8:	ldr	r4, [sp, #24]
   236fc:	add	r6, r6, #1
   23700:	tst	r4, #8
   23704:	movne	r4, #1
   23708:	movne	r5, #0
   2370c:	bne	23738 <__assert_fail@plt+0x11100>
   23710:	sub	r3, fp, #1
   23714:	mov	r2, #48	; 0x30
   23718:	strb	r2, [fp, #-1]
   2371c:	rsb	fp, sl, r3
   23720:	ldr	r1, [sp, #36]	; 0x24
   23724:	mov	r2, sl
   23728:	mov	r0, fp
   2372c:	mov	r4, #1
   23730:	mov	r5, #0
   23734:	bl	1205c <memcpy@plt>
   23738:	sub	sl, fp, #1
   2373c:	mov	r0, r4
   23740:	mov	r1, r5
   23744:	mov	r2, #10
   23748:	mov	r3, #0
   2374c:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23750:	mov	r7, sl
   23754:	mov	r0, r4
   23758:	mov	r1, r5
   2375c:	mov	r3, #0
   23760:	add	r2, r2, #48	; 0x30
   23764:	strb	r2, [sl], #-1
   23768:	mov	r2, #10
   2376c:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   23770:	mov	r4, r0
   23774:	mov	r5, r1
   23778:	orrs	ip, r4, r5
   2377c:	bne	2373c <__assert_fail@plt+0x11104>
   23780:	b	2343c <__assert_fail@plt+0x10e04>
   23784:	movcc	r7, #3
   23788:	movcs	r7, #2
   2378c:	b	232d4 <__assert_fail@plt+0x10c9c>
   23790:	mov	r2, #1
   23794:	mov	r3, #0
   23798:	and	r2, r2, r4
   2379c:	and	r3, r3, r5
   237a0:	adds	r2, r2, r7
   237a4:	adc	r3, r3, r7, asr #31
   237a8:	orr	r2, r2, r3
   237ac:	cmp	r2, #0
   237b0:	addne	ip, ip, #1
   237b4:	cmp	ip, #5
   237b8:	movle	ip, #0
   237bc:	movgt	ip, #1
   237c0:	b	236b8 <__assert_fail@plt+0x11080>
   237c4:	ldr	fp, [sp, #40]	; 0x28
   237c8:	mov	r6, #0
   237cc:	b	2368c <__assert_fail@plt+0x11054>
   237d0:	mov	r3, ip
   237d4:	mov	r7, sl
   237d8:	mov	ip, r6
   237dc:	ldr	sl, [sp, #68]	; 0x44
   237e0:	ldr	r9, [sp, #72]	; 0x48
   237e4:	mov	r6, r3
   237e8:	ldr	r8, [sp, #76]	; 0x4c
   237ec:	ldr	fp, [sp, #40]	; 0x28
   237f0:	b	2368c <__assert_fail@plt+0x11054>
   237f4:	cmp	r5, #0
   237f8:	cmpeq	r4, #9
   237fc:	mov	r3, ip
   23800:	mov	r7, sl
   23804:	mov	ip, r6
   23808:	ldr	sl, [sp, #68]	; 0x44
   2380c:	mov	r6, r3
   23810:	ldr	r9, [sp, #72]	; 0x48
   23814:	ldr	r8, [sp, #76]	; 0x4c
   23818:	ldrhi	fp, [sp, #40]	; 0x28
   2381c:	bhi	2368c <__assert_fail@plt+0x11054>
   23820:	ldr	r3, [sp, #48]	; 0x30
   23824:	cmp	r3, #1
   23828:	beq	238b8 <__assert_fail@plt+0x11280>
   2382c:	adds	r3, r7, #0
   23830:	ldr	r0, [sp, #48]	; 0x30
   23834:	movne	r3, #1
   23838:	cmp	r0, #0
   2383c:	movne	r3, #0
   23840:	cmp	r3, #0
   23844:	beq	23890 <__assert_fail@plt+0x11258>
   23848:	add	ip, ip, #1
   2384c:	cmp	ip, #10
   23850:	beq	238d0 <__assert_fail@plt+0x11298>
   23854:	ldr	r2, [sp, #28]
   23858:	add	ip, ip, #48	; 0x30
   2385c:	ldr	r1, [sp, #36]	; 0x24
   23860:	add	fp, r2, #644	; 0x284
   23864:	add	fp, fp, #3
   23868:	strb	ip, [r2, #647]	; 0x287
   2386c:	rsb	fp, sl, fp
   23870:	mov	r2, sl
   23874:	mov	ip, #0
   23878:	str	ip, [sp, #12]
   2387c:	mov	r0, fp
   23880:	bl	1205c <memcpy@plt>
   23884:	ldr	ip, [sp, #12]
   23888:	mov	r7, ip
   2388c:	b	2368c <__assert_fail@plt+0x11054>
   23890:	cmp	ip, #0
   23894:	bne	23854 <__assert_fail@plt+0x1121c>
   23898:	ldr	r1, [sp, #24]
   2389c:	ands	ip, r1, #8
   238a0:	beq	23854 <__assert_fail@plt+0x1121c>
   238a4:	ldr	fp, [sp, #40]	; 0x28
   238a8:	mov	ip, #0
   238ac:	b	2368c <__assert_fail@plt+0x11054>
   238b0:	mov	r6, #0
   238b4:	b	2345c <__assert_fail@plt+0x10e24>
   238b8:	and	r3, ip, #1
   238bc:	add	r3, r7, r3
   238c0:	cmp	r3, #2
   238c4:	movle	r3, #0
   238c8:	movgt	r3, #1
   238cc:	b	23840 <__assert_fail@plt+0x11208>
   238d0:	adds	r4, r4, #1
   238d4:	mov	r7, #0
   238d8:	adc	r5, r5, #0
   238dc:	cmp	r5, #0
   238e0:	cmpeq	r4, #10
   238e4:	ldreq	fp, [sp, #40]	; 0x28
   238e8:	moveq	ip, r7
   238ec:	beq	2368c <__assert_fail@plt+0x11054>
   238f0:	b	23898 <__assert_fail@plt+0x11260>
   238f4:	bl	120e0 <__stack_chk_fail@plt>
   238f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   238fc:	movw	r6, #21904	; 0x5590
   23900:	movt	r6, #4
   23904:	sub	sp, sp, #20
   23908:	subs	r5, r0, #0
   2390c:	mov	r9, r1
   23910:	ldr	r3, [r6]
   23914:	mov	r8, r2
   23918:	str	r3, [sp, #12]
   2391c:	beq	23a30 <__assert_fail@plt+0x113f8>
   23920:	ldrb	r3, [r5]
   23924:	movw	r4, #8432	; 0x20f0
   23928:	movt	r4, #3
   2392c:	cmp	r3, #39	; 0x27
   23930:	add	r1, r4, #12
   23934:	addeq	r5, r5, #1
   23938:	add	r2, r4, #24
   2393c:	mov	r3, #4
   23940:	moveq	r7, #4
   23944:	mov	r0, r5
   23948:	movne	r7, #0
   2394c:	bl	2b4d8 <__assert_fail@plt+0x18ea0>
   23950:	cmp	r0, #0
   23954:	blt	239c8 <__assert_fail@plt+0x11390>
   23958:	add	r0, r4, r0, lsl #2
   2395c:	mov	r2, #1
   23960:	mov	r3, #0
   23964:	mov	r4, r2
   23968:	ldr	r1, [r0, #24]
   2396c:	mov	r5, r3
   23970:	str	r2, [r8]
   23974:	orr	r7, r7, r1
   23978:	str	r3, [r8, #4]
   2397c:	mov	r0, #0
   23980:	str	r7, [r9]
   23984:	orrs	r3, r4, r5
   23988:	bne	239b0 <__assert_fail@plt+0x11378>
   2398c:	movw	r0, #60500	; 0xec54
   23990:	movt	r0, #2
   23994:	bl	12260 <getenv@plt>
   23998:	mov	r5, #0
   2399c:	cmp	r0, #0
   239a0:	mov	r0, #4
   239a4:	movne	r4, #512	; 0x200
   239a8:	moveq	r4, #1024	; 0x400
   239ac:	strd	r4, [r8]
   239b0:	ldr	r2, [sp, #12]
   239b4:	ldr	r3, [r6]
   239b8:	cmp	r2, r3
   239bc:	bne	23ac8 <__assert_fail@plt+0x11490>
   239c0:	add	sp, sp, #20
   239c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   239c8:	movw	r3, #8504	; 0x2138
   239cc:	mov	r0, r5
   239d0:	movt	r3, #3
   239d4:	add	r1, sp, #8
   239d8:	str	r3, [sp]
   239dc:	mov	r2, #0
   239e0:	mov	r3, r8
   239e4:	bl	29d64 <__assert_fail@plt+0x1772c>
   239e8:	cmp	r0, #0
   239ec:	bne	23a8c <__assert_fail@plt+0x11454>
   239f0:	ldrb	r3, [r5]
   239f4:	sub	r3, r3, #48	; 0x30
   239f8:	cmp	r3, #9
   239fc:	bls	23a28 <__assert_fail@plt+0x113f0>
   23a00:	ldr	r2, [sp, #8]
   23a04:	cmp	r5, r2
   23a08:	bne	23a18 <__assert_fail@plt+0x113e0>
   23a0c:	b	23a9c <__assert_fail@plt+0x11464>
   23a10:	cmp	r2, r5
   23a14:	beq	23a9c <__assert_fail@plt+0x11464>
   23a18:	ldrb	r3, [r5, #1]!
   23a1c:	sub	r3, r3, #48	; 0x30
   23a20:	cmp	r3, #9
   23a24:	bhi	23a10 <__assert_fail@plt+0x113d8>
   23a28:	ldrd	r4, [r8]
   23a2c:	b	2397c <__assert_fail@plt+0x11344>
   23a30:	movw	r0, #8480	; 0x2120
   23a34:	movt	r0, #3
   23a38:	bl	12260 <getenv@plt>
   23a3c:	subs	r5, r0, #0
   23a40:	bne	23920 <__assert_fail@plt+0x112e8>
   23a44:	movw	r0, #8492	; 0x212c
   23a48:	movt	r0, #3
   23a4c:	bl	12260 <getenv@plt>
   23a50:	subs	r5, r0, #0
   23a54:	bne	23920 <__assert_fail@plt+0x112e8>
   23a58:	movw	r0, #60500	; 0xec54
   23a5c:	movt	r0, #2
   23a60:	bl	12260 <getenv@plt>
   23a64:	mov	r3, #0
   23a68:	mov	r5, r3
   23a6c:	str	r3, [r8, #4]
   23a70:	mov	r7, #0
   23a74:	cmp	r0, #0
   23a78:	movne	r2, #512	; 0x200
   23a7c:	moveq	r2, #1024	; 0x400
   23a80:	mov	r4, r2
   23a84:	str	r2, [r8]
   23a88:	b	2397c <__assert_fail@plt+0x11344>
   23a8c:	mov	r3, #0
   23a90:	ldrd	r4, [r8]
   23a94:	str	r3, [r9]
   23a98:	b	23984 <__assert_fail@plt+0x1134c>
   23a9c:	ldrb	r3, [r2, #-1]
   23aa0:	cmp	r3, #66	; 0x42
   23aa4:	orrne	r7, r7, #128	; 0x80
   23aa8:	beq	23ab4 <__assert_fail@plt+0x1147c>
   23aac:	orr	r7, r7, #32
   23ab0:	b	23a28 <__assert_fail@plt+0x113f0>
   23ab4:	ldrb	r3, [r2, #-2]
   23ab8:	orr	r7, r7, #384	; 0x180
   23abc:	cmp	r3, #105	; 0x69
   23ac0:	bne	23a28 <__assert_fail@plt+0x113f0>
   23ac4:	b	23aac <__assert_fail@plt+0x11474>
   23ac8:	bl	120e0 <__stack_chk_fail@plt>
   23acc:	push	{r3, r4, r5, r6, r7, lr}
   23ad0:	movw	r6, #23976	; 0x5da8
   23ad4:	movt	r6, #4
   23ad8:	mov	r5, r0
   23adc:	ldr	r4, [r6]
   23ae0:	cmp	r4, #0
   23ae4:	bne	23af8 <__assert_fail@plt+0x114c0>
   23ae8:	b	23b14 <__assert_fail@plt+0x114dc>
   23aec:	ldr	r4, [r4, #4]
   23af0:	cmp	r4, #0
   23af4:	beq	23b14 <__assert_fail@plt+0x114dc>
   23af8:	ldr	r3, [r4]
   23afc:	cmp	r3, r5
   23b00:	bne	23aec <__assert_fail@plt+0x114b4>
   23b04:	ldrb	r0, [r4, #8]
   23b08:	cmp	r0, #0
   23b0c:	addne	r0, r4, #8
   23b10:	pop	{r3, r4, r5, r6, r7, pc}
   23b14:	mov	r0, r5
   23b18:	bl	11fcc <getpwuid@plt>
   23b1c:	cmp	r0, #0
   23b20:	movweq	r7, #54180	; 0xd3a4
   23b24:	moveq	r0, #9
   23b28:	movteq	r7, #2
   23b2c:	beq	23b40 <__assert_fail@plt+0x11508>
   23b30:	ldr	r7, [r0]
   23b34:	mov	r0, r7
   23b38:	bl	1232c <strlen@plt>
   23b3c:	add	r0, r0, #9
   23b40:	bl	29604 <__assert_fail@plt+0x16fcc>
   23b44:	mov	r1, r7
   23b48:	mov	r4, r0
   23b4c:	str	r5, [r0], #8
   23b50:	bl	121f4 <strcpy@plt>
   23b54:	ldr	r3, [r6]
   23b58:	str	r4, [r6]
   23b5c:	str	r3, [r4, #4]
   23b60:	b	23b04 <__assert_fail@plt+0x114cc>
   23b64:	push	{r4, r5, r6, r7, r8, lr}
   23b68:	movw	r8, #23976	; 0x5da8
   23b6c:	movt	r8, #4
   23b70:	mov	r7, r0
   23b74:	ldr	r4, [r8]
   23b78:	cmp	r4, #0
   23b7c:	beq	23bbc <__assert_fail@plt+0x11584>
   23b80:	ldrb	r5, [r0]
   23b84:	b	23b94 <__assert_fail@plt+0x1155c>
   23b88:	ldr	r4, [r4, #4]
   23b8c:	cmp	r4, #0
   23b90:	beq	23bbc <__assert_fail@plt+0x11584>
   23b94:	ldrb	r3, [r4, #8]
   23b98:	cmp	r3, r5
   23b9c:	bne	23b88 <__assert_fail@plt+0x11550>
   23ba0:	add	r0, r4, #8
   23ba4:	mov	r1, r7
   23ba8:	bl	11fb4 <strcmp@plt>
   23bac:	cmp	r0, #0
   23bb0:	bne	23b88 <__assert_fail@plt+0x11550>
   23bb4:	mov	r0, r4
   23bb8:	pop	{r4, r5, r6, r7, r8, pc}
   23bbc:	ldr	r5, [r8, #4]
   23bc0:	cmp	r5, #0
   23bc4:	beq	23c08 <__assert_fail@plt+0x115d0>
   23bc8:	ldrb	r6, [r7]
   23bcc:	b	23bdc <__assert_fail@plt+0x115a4>
   23bd0:	ldr	r5, [r5, #4]
   23bd4:	cmp	r5, #0
   23bd8:	beq	23c08 <__assert_fail@plt+0x115d0>
   23bdc:	ldrb	r3, [r5, #8]
   23be0:	cmp	r3, r6
   23be4:	bne	23bd0 <__assert_fail@plt+0x11598>
   23be8:	add	r0, r5, #8
   23bec:	mov	r1, r7
   23bf0:	bl	11fb4 <strcmp@plt>
   23bf4:	cmp	r0, #0
   23bf8:	popeq	{r4, r5, r6, r7, r8, pc}
   23bfc:	ldr	r5, [r5, #4]
   23c00:	cmp	r5, #0
   23c04:	bne	23bdc <__assert_fail@plt+0x115a4>
   23c08:	mov	r0, r7
   23c0c:	bl	11f9c <getpwnam@plt>
   23c10:	mov	r4, r0
   23c14:	mov	r0, r7
   23c18:	bl	1232c <strlen@plt>
   23c1c:	add	r0, r0, #9
   23c20:	bl	29604 <__assert_fail@plt+0x16fcc>
   23c24:	mov	r1, r7
   23c28:	mov	r5, r0
   23c2c:	add	r0, r0, #8
   23c30:	bl	121f4 <strcpy@plt>
   23c34:	cmp	r4, #0
   23c38:	ldrne	r3, [r8]
   23c3c:	movne	r0, r5
   23c40:	ldreq	r3, [r8, #4]
   23c44:	moveq	r0, r4
   23c48:	ldrne	r2, [r4, #8]
   23c4c:	strne	r5, [r8]
   23c50:	streq	r5, [r8, #4]
   23c54:	stmne	r5, {r2, r3}
   23c58:	streq	r3, [r5, #4]
   23c5c:	pop	{r4, r5, r6, r7, r8, pc}
   23c60:	push	{r3, r4, r5, r6, r7, lr}
   23c64:	movw	r6, #23976	; 0x5da8
   23c68:	movt	r6, #4
   23c6c:	mov	r5, r0
   23c70:	ldr	r4, [r6, #8]
   23c74:	cmp	r4, #0
   23c78:	bne	23c8c <__assert_fail@plt+0x11654>
   23c7c:	b	23ca8 <__assert_fail@plt+0x11670>
   23c80:	ldr	r4, [r4, #4]
   23c84:	cmp	r4, #0
   23c88:	beq	23ca8 <__assert_fail@plt+0x11670>
   23c8c:	ldr	r3, [r4]
   23c90:	cmp	r3, r5
   23c94:	bne	23c80 <__assert_fail@plt+0x11648>
   23c98:	ldrb	r0, [r4, #8]
   23c9c:	cmp	r0, #0
   23ca0:	addne	r0, r4, #8
   23ca4:	pop	{r3, r4, r5, r6, r7, pc}
   23ca8:	mov	r0, r5
   23cac:	bl	12608 <getgrgid@plt>
   23cb0:	cmp	r0, #0
   23cb4:	movweq	r7, #54180	; 0xd3a4
   23cb8:	moveq	r0, #9
   23cbc:	movteq	r7, #2
   23cc0:	beq	23cd4 <__assert_fail@plt+0x1169c>
   23cc4:	ldr	r7, [r0]
   23cc8:	mov	r0, r7
   23ccc:	bl	1232c <strlen@plt>
   23cd0:	add	r0, r0, #9
   23cd4:	bl	29604 <__assert_fail@plt+0x16fcc>
   23cd8:	mov	r1, r7
   23cdc:	mov	r4, r0
   23ce0:	str	r5, [r0], #8
   23ce4:	bl	121f4 <strcpy@plt>
   23ce8:	ldr	r3, [r6, #8]
   23cec:	str	r4, [r6, #8]
   23cf0:	str	r3, [r4, #4]
   23cf4:	b	23c98 <__assert_fail@plt+0x11660>
   23cf8:	push	{r4, r5, r6, r7, r8, lr}
   23cfc:	movw	r8, #23976	; 0x5da8
   23d00:	movt	r8, #4
   23d04:	mov	r7, r0
   23d08:	ldr	r4, [r8, #8]
   23d0c:	cmp	r4, #0
   23d10:	beq	23d50 <__assert_fail@plt+0x11718>
   23d14:	ldrb	r5, [r0]
   23d18:	b	23d28 <__assert_fail@plt+0x116f0>
   23d1c:	ldr	r4, [r4, #4]
   23d20:	cmp	r4, #0
   23d24:	beq	23d50 <__assert_fail@plt+0x11718>
   23d28:	ldrb	r3, [r4, #8]
   23d2c:	cmp	r3, r5
   23d30:	bne	23d1c <__assert_fail@plt+0x116e4>
   23d34:	add	r0, r4, #8
   23d38:	mov	r1, r7
   23d3c:	bl	11fb4 <strcmp@plt>
   23d40:	cmp	r0, #0
   23d44:	bne	23d1c <__assert_fail@plt+0x116e4>
   23d48:	mov	r0, r4
   23d4c:	pop	{r4, r5, r6, r7, r8, pc}
   23d50:	ldr	r5, [r8, #12]
   23d54:	cmp	r5, #0
   23d58:	beq	23d9c <__assert_fail@plt+0x11764>
   23d5c:	ldrb	r6, [r7]
   23d60:	b	23d70 <__assert_fail@plt+0x11738>
   23d64:	ldr	r5, [r5, #4]
   23d68:	cmp	r5, #0
   23d6c:	beq	23d9c <__assert_fail@plt+0x11764>
   23d70:	ldrb	r3, [r5, #8]
   23d74:	cmp	r3, r6
   23d78:	bne	23d64 <__assert_fail@plt+0x1172c>
   23d7c:	add	r0, r5, #8
   23d80:	mov	r1, r7
   23d84:	bl	11fb4 <strcmp@plt>
   23d88:	cmp	r0, #0
   23d8c:	popeq	{r4, r5, r6, r7, r8, pc}
   23d90:	ldr	r5, [r5, #4]
   23d94:	cmp	r5, #0
   23d98:	bne	23d70 <__assert_fail@plt+0x11738>
   23d9c:	mov	r0, r7
   23da0:	bl	12614 <getgrnam@plt>
   23da4:	mov	r4, r0
   23da8:	mov	r0, r7
   23dac:	bl	1232c <strlen@plt>
   23db0:	add	r0, r0, #9
   23db4:	bl	29604 <__assert_fail@plt+0x16fcc>
   23db8:	mov	r1, r7
   23dbc:	mov	r5, r0
   23dc0:	add	r0, r0, #8
   23dc4:	bl	121f4 <strcpy@plt>
   23dc8:	cmp	r4, #0
   23dcc:	ldrne	r3, [r8, #8]
   23dd0:	movne	r0, r5
   23dd4:	ldreq	r3, [r8, #12]
   23dd8:	moveq	r0, r4
   23ddc:	ldrne	r2, [r4, #8]
   23de0:	strne	r5, [r8, #8]
   23de4:	streq	r5, [r8, #12]
   23de8:	stmne	r5, {r2, r3}
   23dec:	streq	r3, [r5, #4]
   23df0:	pop	{r4, r5, r6, r7, r8, pc}
   23df4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23df8:	add	fp, sp, #28
   23dfc:	sub	sp, sp, #8
   23e00:	movw	r6, #21904	; 0x5590
   23e04:	movt	r6, #4
   23e08:	mov	r7, r2
   23e0c:	cmn	r2, #-1073741823	; 0xc0000001
   23e10:	ldr	r2, [r6]
   23e14:	mov	r5, r0
   23e18:	mov	r4, r1
   23e1c:	mov	r8, r3
   23e20:	str	r2, [fp, #-32]	; 0xffffffe0
   23e24:	bls	23e44 <__assert_fail@plt+0x1180c>
   23e28:	mov	r0, #0
   23e2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23e30:	ldr	r3, [r6]
   23e34:	cmp	r2, r3
   23e38:	bne	23f68 <__assert_fail@plt+0x11930>
   23e3c:	sub	sp, fp, #28
   23e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23e44:	lsl	r0, r7, #2
   23e48:	movw	r3, #4023	; 0xfb7
   23e4c:	cmp	r0, r3
   23e50:	bls	23f1c <__assert_fail@plt+0x118e4>
   23e54:	bl	2bc98 <__assert_fail@plt+0x19660>
   23e58:	cmp	r0, #0
   23e5c:	beq	23e28 <__assert_fail@plt+0x117f0>
   23e60:	cmp	r7, #2
   23e64:	mov	r3, #1
   23e68:	str	r3, [r0, #4]
   23e6c:	movhi	r9, r4
   23e70:	movhi	r2, r0
   23e74:	movhi	ip, #0
   23e78:	movhi	r3, #2
   23e7c:	bls	23ec8 <__assert_fail@plt+0x11890>
   23e80:	ldrb	r1, [r9, #1]!
   23e84:	ldrb	lr, [r4, ip]
   23e88:	cmp	lr, r1
   23e8c:	bne	23ea8 <__assert_fail@plt+0x11870>
   23e90:	b	23f30 <__assert_fail@plt+0x118f8>
   23e94:	ldr	lr, [r0, ip, lsl #2]
   23e98:	rsb	ip, lr, ip
   23e9c:	ldrb	lr, [r4, ip]
   23ea0:	cmp	lr, r1
   23ea4:	beq	23f30 <__assert_fail@plt+0x118f8>
   23ea8:	cmp	ip, #0
   23eac:	bne	23e94 <__assert_fail@plt+0x1185c>
   23eb0:	mov	ip, #0
   23eb4:	str	r3, [r2, #8]
   23eb8:	add	r3, r3, #1
   23ebc:	add	r2, r2, #4
   23ec0:	cmp	r3, r7
   23ec4:	bne	23e80 <__assert_fail@plt+0x11848>
   23ec8:	mov	r2, #0
   23ecc:	str	r2, [r8]
   23ed0:	ldrb	r3, [r5]
   23ed4:	mov	ip, r5
   23ed8:	cmp	r3, #0
   23edc:	beq	23f10 <__assert_fail@plt+0x118d8>
   23ee0:	ldrb	r1, [r4, r2]
   23ee4:	cmp	r1, r3
   23ee8:	beq	23f40 <__assert_fail@plt+0x11908>
   23eec:	cmp	r2, #0
   23ef0:	addeq	r5, r5, #1
   23ef4:	ldrne	r1, [r0, r2, lsl #2]
   23ef8:	ldrbeq	r3, [ip, #1]
   23efc:	addeq	ip, ip, #1
   23f00:	addne	r5, r5, r1
   23f04:	rsbne	r2, r1, r2
   23f08:	cmp	r3, #0
   23f0c:	bne	23ee0 <__assert_fail@plt+0x118a8>
   23f10:	bl	2bcfc <__assert_fail@plt+0x196c4>
   23f14:	mov	r0, #1
   23f18:	b	23e2c <__assert_fail@plt+0x117f4>
   23f1c:	add	r3, r0, #22
   23f20:	bic	r3, r3, #7
   23f24:	sub	sp, sp, r3
   23f28:	add	r0, sp, #8
   23f2c:	b	23e58 <__assert_fail@plt+0x11820>
   23f30:	add	ip, ip, #1
   23f34:	rsb	r1, ip, r3
   23f38:	str	r1, [r2, #8]
   23f3c:	b	23eb8 <__assert_fail@plt+0x11880>
   23f40:	add	r2, r2, #1
   23f44:	add	r1, ip, #1
   23f48:	cmp	r7, r2
   23f4c:	ldrbne	r3, [ip, #1]
   23f50:	movne	ip, r1
   23f54:	bne	23ed8 <__assert_fail@plt+0x118a0>
   23f58:	str	r5, [r8]
   23f5c:	bl	2bcfc <__assert_fail@plt+0x196c4>
   23f60:	mov	r0, #1
   23f64:	b	23e2c <__assert_fail@plt+0x117f4>
   23f68:	bl	120e0 <__stack_chk_fail@plt>
   23f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f70:	add	fp, sp, #32
   23f74:	sub	sp, sp, #204	; 0xcc
   23f78:	movw	r3, #21904	; 0x5590
   23f7c:	movt	r3, #4
   23f80:	str	r3, [fp, #-228]	; 0xffffff1c
   23f84:	mov	r4, r1
   23f88:	ldr	r3, [r3]
   23f8c:	str	r0, [fp, #-220]	; 0xffffff24
   23f90:	mov	r0, r1
   23f94:	str	r2, [fp, #-232]	; 0xffffff18
   23f98:	str	r3, [fp, #-40]	; 0xffffffd8
   23f9c:	bl	2be20 <__assert_fail@plt+0x197e8>
   23fa0:	movw	r3, #29789	; 0x745d
   23fa4:	movt	r3, #1489	; 0x5d1
   23fa8:	cmp	r0, r3
   23fac:	str	r0, [fp, #-216]	; 0xffffff28
   23fb0:	bls	23fd4 <__assert_fail@plt+0x1199c>
   23fb4:	mov	r0, #0
   23fb8:	ldr	r1, [fp, #-228]	; 0xffffff1c
   23fbc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   23fc0:	ldr	r3, [r1]
   23fc4:	cmp	r2, r3
   23fc8:	bne	247ac <__assert_fail@plt+0x12174>
   23fcc:	sub	sp, fp, #32
   23fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23fd4:	ldr	r1, [fp, #-216]	; 0xffffff28
   23fd8:	mov	r0, #44	; 0x2c
   23fdc:	movw	r3, #4023	; 0xfb7
   23fe0:	mul	r0, r0, r1
   23fe4:	cmp	r0, r3
   23fe8:	bls	2434c <__assert_fail@plt+0x11d14>
   23fec:	bl	2bc98 <__assert_fail@plt+0x19660>
   23ff0:	str	r0, [fp, #-224]	; 0xffffff20
   23ff4:	ldr	r3, [fp, #-224]	; 0xffffff20
   23ff8:	cmp	r3, #0
   23ffc:	beq	23fb4 <__assert_fail@plt+0x1197c>
   24000:	ldr	r1, [fp, #-216]	; 0xffffff28
   24004:	mov	r2, #0
   24008:	add	sl, r3, #16
   2400c:	strb	r2, [fp, #-208]	; 0xffffff30
   24010:	str	r4, [fp, #-192]	; 0xffffff40
   24014:	mov	r7, r4
   24018:	add	r9, r1, r1, lsl #2
   2401c:	movw	r8, #13748	; 0x35b4
   24020:	str	r2, [fp, #-200]	; 0xffffff38
   24024:	mov	r5, r2
   24028:	add	r9, r3, r9, lsl #3
   2402c:	ldrb	r3, [fp, #-208]	; 0xffffff30
   24030:	str	r2, [fp, #-204]	; 0xffffff34
   24034:	movt	r8, #3
   24038:	cmp	r3, #0
   2403c:	strb	r2, [fp, #-196]	; 0xffffff3c
   24040:	mov	r4, #1
   24044:	sub	r6, fp, #176	; 0xb0
   24048:	bne	243c8 <__assert_fail@plt+0x11d90>
   2404c:	ldrb	r3, [r7]
   24050:	and	r2, r3, #31
   24054:	lsr	r3, r3, #5
   24058:	ldr	r3, [r8, r3, lsl #2]
   2405c:	lsr	r3, r3, r2
   24060:	tst	r3, #1
   24064:	beq	2442c <__assert_fail@plt+0x11df4>
   24068:	str	r4, [fp, #-188]	; 0xffffff44
   2406c:	ldrb	r7, [r7]
   24070:	strb	r4, [fp, #-184]	; 0xffffff48
   24074:	str	r7, [fp, #-180]	; 0xffffff4c
   24078:	cmp	r7, #0
   2407c:	strb	r4, [fp, #-196]	; 0xffffff3c
   24080:	mov	r3, #1
   24084:	bne	2437c <__assert_fail@plt+0x11d44>
   24088:	ldr	r1, [fp, #-216]	; 0xffffff28
   2408c:	str	r3, [r9, #4]
   24090:	cmp	r1, #2
   24094:	bls	24158 <__assert_fail@plt+0x11b20>
   24098:	mov	r4, r7
   2409c:	ldr	r7, [fp, #-224]	; 0xffffff20
   240a0:	mov	r6, r9
   240a4:	mov	sl, r9
   240a8:	mov	r5, #2
   240ac:	mov	r9, r7
   240b0:	ldrb	r8, [r7, #48]	; 0x30
   240b4:	b	240f0 <__assert_fail@plt+0x11ab8>
   240b8:	ldrb	r2, [r3, #8]
   240bc:	cmp	r2, #0
   240c0:	beq	24100 <__assert_fail@plt+0x11ac8>
   240c4:	ldr	r0, [r7, #52]	; 0x34
   240c8:	ldr	r3, [r3, #12]
   240cc:	subs	r1, r0, r3
   240d0:	rsbs	r0, r1, #0
   240d4:	adcs	r0, r0, r1
   240d8:	cmp	r0, #0
   240dc:	bne	24130 <__assert_fail@plt+0x11af8>
   240e0:	cmp	r4, #0
   240e4:	beq	245f0 <__assert_fail@plt+0x11fb8>
   240e8:	ldr	r3, [sl, r4, lsl #2]
   240ec:	rsb	r4, r3, r4
   240f0:	add	r3, r4, r4, lsl #2
   240f4:	cmp	r8, #0
   240f8:	add	r3, r9, r3, lsl #3
   240fc:	bne	240b8 <__assert_fail@plt+0x11a80>
   24100:	ldr	r2, [r7, #44]	; 0x2c
   24104:	ldr	r1, [r3, #4]
   24108:	cmp	r2, r1
   2410c:	movne	r0, #0
   24110:	bne	240d8 <__assert_fail@plt+0x11aa0>
   24114:	ldr	r1, [r3]
   24118:	ldr	r0, [r7, #40]	; 0x28
   2411c:	bl	120b0 <memcmp@plt>
   24120:	rsbs	r0, r0, #1
   24124:	movcc	r0, #0
   24128:	cmp	r0, #0
   2412c:	beq	240e0 <__assert_fail@plt+0x11aa8>
   24130:	add	r4, r4, #1
   24134:	rsb	r3, r4, r5
   24138:	str	r3, [r6, #8]
   2413c:	ldr	r2, [fp, #-216]	; 0xffffff28
   24140:	add	r5, r5, #1
   24144:	add	r7, r7, #40	; 0x28
   24148:	add	r6, r6, #4
   2414c:	cmp	r5, r2
   24150:	bne	240b0 <__assert_fail@plt+0x11a78>
   24154:	mov	r9, sl
   24158:	ldr	r1, [fp, #-220]	; 0xffffff24
   2415c:	mov	r3, #0
   24160:	ldr	r2, [fp, #-232]	; 0xffffff18
   24164:	movw	r7, #13748	; 0x35b4
   24168:	movt	r7, #3
   2416c:	mov	r4, r3
   24170:	mov	r8, r3
   24174:	mov	r6, r3
   24178:	mov	r5, #1
   2417c:	str	r1, [fp, #-136]	; 0xffffff78
   24180:	str	r1, [fp, #-80]	; 0xffffffb0
   24184:	str	r3, [r2]
   24188:	strb	r3, [fp, #-152]	; 0xffffff68
   2418c:	str	r3, [fp, #-148]	; 0xffffff6c
   24190:	strb	r3, [fp, #-140]	; 0xffffff74
   24194:	strb	r3, [fp, #-96]	; 0xffffffa0
   24198:	str	r3, [fp, #-92]	; 0xffffffa4
   2419c:	strb	r3, [fp, #-84]	; 0xffffffac
   241a0:	str	r3, [fp, #-144]	; 0xffffff70
   241a4:	str	r3, [fp, #-88]	; 0xffffffa8
   241a8:	str	r9, [fp, #-220]	; 0xffffff24
   241ac:	cmp	r4, #0
   241b0:	beq	24214 <__assert_fail@plt+0x11bdc>
   241b4:	ldrb	r4, [fp, #-72]	; 0xffffffb8
   241b8:	cmp	r4, #0
   241bc:	bne	24260 <__assert_fail@plt+0x11c28>
   241c0:	add	r1, r8, r8, lsl #2
   241c4:	ldr	r2, [fp, #-224]	; 0xffffff20
   241c8:	add	r1, r2, r1, lsl #3
   241cc:	ldr	r2, [r1, #4]
   241d0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   241d4:	cmp	r2, r3
   241d8:	movne	r0, #0
   241dc:	beq	245d8 <__assert_fail@plt+0x11fa0>
   241e0:	mov	r3, r0
   241e4:	cmp	r3, #0
   241e8:	beq	2429c <__assert_fail@plt+0x11c64>
   241ec:	ldr	r3, [fp, #-216]	; 0xffffff28
   241f0:	add	r8, r8, #1
   241f4:	ldr	sl, [fp, #-80]	; 0xffffffb0
   241f8:	cmp	r3, r8
   241fc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   24200:	strb	r6, [fp, #-84]	; 0xffffffac
   24204:	add	r3, sl, r2
   24208:	str	r3, [fp, #-80]	; 0xffffffb0
   2420c:	beq	2475c <__assert_fail@plt+0x12124>
   24210:	mov	r4, #0
   24214:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   24218:	ldr	sl, [fp, #-80]	; 0xffffffb0
   2421c:	cmp	r3, #0
   24220:	bne	24504 <__assert_fail@plt+0x11ecc>
   24224:	ldrb	r2, [sl]
   24228:	and	r1, r2, #31
   2422c:	lsr	r2, r2, #5
   24230:	ldr	r2, [r7, r2, lsl #2]
   24234:	lsr	r2, r2, r1
   24238:	tst	r2, #1
   2423c:	beq	244f0 <__assert_fail@plt+0x11eb8>
   24240:	str	r5, [fp, #-76]	; 0xffffffb4
   24244:	mov	r4, #1
   24248:	ldrb	r3, [sl]
   2424c:	strb	r5, [fp, #-72]	; 0xffffffb8
   24250:	str	r3, [fp, #-68]	; 0xffffffbc
   24254:	cmp	r4, #0
   24258:	strb	r5, [fp, #-84]	; 0xffffffac
   2425c:	beq	241c0 <__assert_fail@plt+0x11b88>
   24260:	ldr	r2, [fp, #-68]	; 0xffffffbc
   24264:	cmp	r2, #0
   24268:	beq	24768 <__assert_fail@plt+0x12130>
   2426c:	ldr	r3, [fp, #-224]	; 0xffffff20
   24270:	add	r1, r8, r8, lsl #2
   24274:	add	r1, r3, r1, lsl #3
   24278:	ldrb	r3, [r1, #8]
   2427c:	cmp	r3, #0
   24280:	beq	241cc <__assert_fail@plt+0x11b94>
   24284:	ldr	r3, [r1, #12]
   24288:	subs	r2, r2, r3
   2428c:	rsbs	r3, r2, #0
   24290:	adcs	r3, r3, r2
   24294:	cmp	r3, #0
   24298:	bne	241ec <__assert_fail@plt+0x11bb4>
   2429c:	cmp	r8, #0
   242a0:	beq	24588 <__assert_fail@plt+0x11f50>
   242a4:	ldr	r2, [fp, #-220]	; 0xffffff24
   242a8:	ldr	r4, [r2, r8, lsl #2]
   242ac:	cmp	r4, #0
   242b0:	rsb	r8, r4, r8
   242b4:	beq	245d0 <__assert_fail@plt+0x11f98>
   242b8:	ldrb	sl, [fp, #-140]	; 0xffffff74
   242bc:	cmp	sl, #0
   242c0:	beq	242f0 <__assert_fail@plt+0x11cb8>
   242c4:	ldrb	sl, [fp, #-128]	; 0xffffff80
   242c8:	cmp	sl, #0
   242cc:	bne	2433c <__assert_fail@plt+0x11d04>
   242d0:	ldr	r2, [fp, #-136]	; 0xffffff78
   242d4:	subs	r4, r4, #1
   242d8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   242dc:	strb	r6, [fp, #-140]	; 0xffffff74
   242e0:	movne	sl, #0
   242e4:	add	r3, r2, r3
   242e8:	str	r3, [fp, #-136]	; 0xffffff78
   242ec:	beq	245d0 <__assert_fail@plt+0x11f98>
   242f0:	ldrb	r3, [fp, #-152]	; 0xffffff68
   242f4:	ldr	r9, [fp, #-136]	; 0xffffff78
   242f8:	cmp	r3, #0
   242fc:	bne	24458 <__assert_fail@plt+0x11e20>
   24300:	ldrb	r2, [r9]
   24304:	and	r1, r2, #31
   24308:	lsr	r2, r2, #5
   2430c:	ldr	r2, [r7, r2, lsl #2]
   24310:	lsr	r2, r2, r1
   24314:	tst	r2, #1
   24318:	beq	24444 <__assert_fail@plt+0x11e0c>
   2431c:	str	r5, [fp, #-132]	; 0xffffff7c
   24320:	mov	sl, #1
   24324:	ldrb	r3, [r9]
   24328:	strb	r5, [fp, #-128]	; 0xffffff80
   2432c:	str	r3, [fp, #-124]	; 0xffffff84
   24330:	cmp	sl, #0
   24334:	strb	r5, [fp, #-140]	; 0xffffff74
   24338:	beq	242d0 <__assert_fail@plt+0x11c98>
   2433c:	ldr	r3, [fp, #-124]	; 0xffffff84
   24340:	cmp	r3, #0
   24344:	bne	242d0 <__assert_fail@plt+0x11c98>
   24348:	bl	125cc <abort@plt>
   2434c:	add	r3, r0, #22
   24350:	bic	r3, r3, #7
   24354:	sub	sp, sp, r3
   24358:	add	r2, sp, #8
   2435c:	str	r2, [fp, #-224]	; 0xffffff20
   24360:	b	23ff4 <__assert_fail@plt+0x119bc>
   24364:	ldr	r0, [fp, #-192]	; 0xffffff40
   24368:	bl	1232c <strlen@plt>
   2436c:	strb	r5, [fp, #-184]	; 0xffffff48
   24370:	str	r0, [fp, #-188]	; 0xffffff44
   24374:	mov	r3, #0
   24378:	strb	r4, [fp, #-196]	; 0xffffff3c
   2437c:	ldr	r2, [fp, #-192]	; 0xffffff40
   24380:	cmp	r2, r6
   24384:	strne	r2, [sl, #-16]
   24388:	beq	24694 <__assert_fail@plt+0x1205c>
   2438c:	ldr	r2, [fp, #-188]	; 0xffffff44
   24390:	cmp	r3, #0
   24394:	strb	r3, [sl, #-8]
   24398:	add	sl, sl, #40	; 0x28
   2439c:	str	r2, [sl, #-52]	; 0xffffffcc
   243a0:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   243a4:	strne	r3, [sl, #-44]	; 0xffffffd4
   243a8:	ldr	r7, [fp, #-192]	; 0xffffff40
   243ac:	ldr	r3, [fp, #-188]	; 0xffffff44
   243b0:	strb	r5, [fp, #-196]	; 0xffffff3c
   243b4:	add	r7, r7, r3
   243b8:	ldrb	r3, [fp, #-208]	; 0xffffff30
   243bc:	str	r7, [fp, #-192]	; 0xffffff40
   243c0:	cmp	r3, #0
   243c4:	beq	2404c <__assert_fail@plt+0x11a14>
   243c8:	bl	121dc <__ctype_get_mb_cur_max@plt>
   243cc:	mov	r1, r0
   243d0:	mov	r0, r7
   243d4:	bl	29080 <__assert_fail@plt+0x16a48>
   243d8:	mov	r1, r7
   243dc:	sub	r3, fp, #204	; 0xcc
   243e0:	mov	r2, r0
   243e4:	sub	r0, fp, #180	; 0xb4
   243e8:	bl	12218 <mbrtowc@plt>
   243ec:	cmn	r0, #1
   243f0:	str	r0, [fp, #-188]	; 0xffffff44
   243f4:	strbeq	r5, [fp, #-184]	; 0xffffff48
   243f8:	streq	r4, [fp, #-188]	; 0xffffff44
   243fc:	beq	24374 <__assert_fail@plt+0x11d3c>
   24400:	cmn	r0, #2
   24404:	beq	24364 <__assert_fail@plt+0x11d2c>
   24408:	cmp	r0, #0
   2440c:	beq	245f8 <__assert_fail@plt+0x11fc0>
   24410:	ldr	r7, [fp, #-180]	; 0xffffff4c
   24414:	sub	r0, fp, #204	; 0xcc
   24418:	strb	r4, [fp, #-184]	; 0xffffff48
   2441c:	bl	12080 <mbsinit@plt>
   24420:	cmp	r0, #0
   24424:	strbne	r5, [fp, #-208]	; 0xffffff30
   24428:	b	24078 <__assert_fail@plt+0x11a40>
   2442c:	sub	r0, fp, #204	; 0xcc
   24430:	bl	12080 <mbsinit@plt>
   24434:	cmp	r0, #0
   24438:	beq	2478c <__assert_fail@plt+0x12154>
   2443c:	strb	r4, [fp, #-208]	; 0xffffff30
   24440:	b	243c8 <__assert_fail@plt+0x11d90>
   24444:	sub	r0, fp, #148	; 0x94
   24448:	bl	12080 <mbsinit@plt>
   2444c:	cmp	r0, #0
   24450:	beq	2478c <__assert_fail@plt+0x12154>
   24454:	strb	r5, [fp, #-152]	; 0xffffff68
   24458:	bl	121dc <__ctype_get_mb_cur_max@plt>
   2445c:	mov	r1, r0
   24460:	mov	r0, r9
   24464:	bl	29080 <__assert_fail@plt+0x16a48>
   24468:	mov	r1, r9
   2446c:	sub	r3, fp, #148	; 0x94
   24470:	mov	r2, r0
   24474:	sub	r0, fp, #124	; 0x7c
   24478:	bl	12218 <mbrtowc@plt>
   2447c:	cmn	r0, #1
   24480:	str	r0, [fp, #-132]	; 0xffffff7c
   24484:	strbeq	r6, [fp, #-128]	; 0xffffff80
   24488:	streq	r5, [fp, #-132]	; 0xffffff7c
   2448c:	beq	24330 <__assert_fail@plt+0x11cf8>
   24490:	cmn	r0, #2
   24494:	beq	244dc <__assert_fail@plt+0x11ea4>
   24498:	cmp	r0, #0
   2449c:	bne	244c0 <__assert_fail@plt+0x11e88>
   244a0:	ldr	r3, [fp, #-136]	; 0xffffff78
   244a4:	str	r5, [fp, #-132]	; 0xffffff7c
   244a8:	ldrb	r3, [r3]
   244ac:	cmp	r3, #0
   244b0:	bne	247b0 <__assert_fail@plt+0x12178>
   244b4:	ldr	r3, [fp, #-124]	; 0xffffff84
   244b8:	cmp	r3, #0
   244bc:	bne	24618 <__assert_fail@plt+0x11fe0>
   244c0:	sub	r0, fp, #148	; 0x94
   244c4:	strb	r5, [fp, #-128]	; 0xffffff80
   244c8:	bl	12080 <mbsinit@plt>
   244cc:	mov	sl, #1
   244d0:	cmp	r0, #0
   244d4:	strbne	r6, [fp, #-152]	; 0xffffff68
   244d8:	b	24330 <__assert_fail@plt+0x11cf8>
   244dc:	ldr	r0, [fp, #-136]	; 0xffffff78
   244e0:	bl	1232c <strlen@plt>
   244e4:	strb	r6, [fp, #-128]	; 0xffffff80
   244e8:	str	r0, [fp, #-132]	; 0xffffff7c
   244ec:	b	24330 <__assert_fail@plt+0x11cf8>
   244f0:	sub	r0, fp, #92	; 0x5c
   244f4:	bl	12080 <mbsinit@plt>
   244f8:	cmp	r0, #0
   244fc:	beq	2478c <__assert_fail@plt+0x12154>
   24500:	strb	r5, [fp, #-96]	; 0xffffffa0
   24504:	bl	121dc <__ctype_get_mb_cur_max@plt>
   24508:	mov	r1, r0
   2450c:	mov	r0, sl
   24510:	bl	29080 <__assert_fail@plt+0x16a48>
   24514:	mov	r1, sl
   24518:	sub	r3, fp, #92	; 0x5c
   2451c:	mov	r2, r0
   24520:	sub	r0, fp, #68	; 0x44
   24524:	bl	12218 <mbrtowc@plt>
   24528:	cmn	r0, #1
   2452c:	str	r0, [fp, #-76]	; 0xffffffb4
   24530:	strbeq	r6, [fp, #-72]	; 0xffffffb8
   24534:	streq	r5, [fp, #-76]	; 0xffffffb4
   24538:	beq	24254 <__assert_fail@plt+0x11c1c>
   2453c:	cmn	r0, #2
   24540:	beq	24748 <__assert_fail@plt+0x12110>
   24544:	cmp	r0, #0
   24548:	bne	2456c <__assert_fail@plt+0x11f34>
   2454c:	ldr	sl, [fp, #-80]	; 0xffffffb0
   24550:	str	r5, [fp, #-76]	; 0xffffffb4
   24554:	ldrb	r3, [sl]
   24558:	cmp	r3, #0
   2455c:	bne	247b0 <__assert_fail@plt+0x12178>
   24560:	ldr	r3, [fp, #-68]	; 0xffffffbc
   24564:	cmp	r3, #0
   24568:	bne	24618 <__assert_fail@plt+0x11fe0>
   2456c:	sub	r0, fp, #92	; 0x5c
   24570:	strb	r5, [fp, #-72]	; 0xffffffb8
   24574:	bl	12080 <mbsinit@plt>
   24578:	mov	r4, #1
   2457c:	cmp	r0, #0
   24580:	strbne	r6, [fp, #-96]	; 0xffffffa0
   24584:	b	24254 <__assert_fail@plt+0x11c1c>
   24588:	ldrb	r4, [fp, #-140]	; 0xffffff74
   2458c:	cmp	r4, #0
   24590:	beq	24638 <__assert_fail@plt+0x12000>
   24594:	ldrb	r4, [fp, #-128]	; 0xffffff80
   24598:	cmp	r4, #0
   2459c:	bne	24684 <__assert_fail@plt+0x1204c>
   245a0:	ldr	r1, [fp, #-136]	; 0xffffff78
   245a4:	mov	r4, #0
   245a8:	ldr	r2, [fp, #-132]	; 0xffffff7c
   245ac:	ldr	sl, [fp, #-80]	; 0xffffffb0
   245b0:	add	r2, r1, r2
   245b4:	str	r2, [fp, #-136]	; 0xffffff78
   245b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   245bc:	strb	r6, [fp, #-140]	; 0xffffff74
   245c0:	add	r3, sl, r2
   245c4:	strb	r6, [fp, #-84]	; 0xffffffac
   245c8:	str	r3, [fp, #-80]	; 0xffffffb0
   245cc:	b	24214 <__assert_fail@plt+0x11bdc>
   245d0:	ldrb	r4, [fp, #-84]	; 0xffffffac
   245d4:	b	241ac <__assert_fail@plt+0x11b74>
   245d8:	ldr	r0, [r1]
   245dc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   245e0:	bl	120b0 <memcmp@plt>
   245e4:	rsbs	r0, r0, #1
   245e8:	movcc	r0, #0
   245ec:	b	241e0 <__assert_fail@plt+0x11ba8>
   245f0:	str	r5, [r6, #8]
   245f4:	b	2413c <__assert_fail@plt+0x11b04>
   245f8:	ldr	r3, [fp, #-192]	; 0xffffff40
   245fc:	str	r4, [fp, #-188]	; 0xffffff44
   24600:	ldrb	r3, [r3]
   24604:	cmp	r3, #0
   24608:	bne	247b0 <__assert_fail@plt+0x12178>
   2460c:	ldr	r7, [fp, #-180]	; 0xffffff4c
   24610:	cmp	r7, #0
   24614:	beq	24414 <__assert_fail@plt+0x11ddc>
   24618:	movw	r0, #8624	; 0x21b0
   2461c:	movw	r1, #8588	; 0x218c
   24620:	movw	r3, #8544	; 0x2160
   24624:	movt	r0, #3
   24628:	movt	r1, #3
   2462c:	mov	r2, #176	; 0xb0
   24630:	movt	r3, #3
   24634:	bl	12638 <__assert_fail@plt>
   24638:	ldrb	r3, [fp, #-152]	; 0xffffff68
   2463c:	ldr	sl, [fp, #-136]	; 0xffffff78
   24640:	cmp	r3, #0
   24644:	bne	246c4 <__assert_fail@plt+0x1208c>
   24648:	ldrb	r2, [sl]
   2464c:	and	r1, r2, #31
   24650:	lsr	r2, r2, #5
   24654:	ldr	r2, [r7, r2, lsl #2]
   24658:	lsr	r2, r2, r1
   2465c:	tst	r2, #1
   24660:	beq	246b0 <__assert_fail@plt+0x12078>
   24664:	str	r5, [fp, #-132]	; 0xffffff7c
   24668:	mov	r4, #1
   2466c:	ldrb	r3, [sl]
   24670:	strb	r5, [fp, #-128]	; 0xffffff80
   24674:	str	r3, [fp, #-124]	; 0xffffff84
   24678:	cmp	r4, #0
   2467c:	strb	r5, [fp, #-140]	; 0xffffff74
   24680:	beq	245a0 <__assert_fail@plt+0x11f68>
   24684:	ldr	r3, [fp, #-124]	; 0xffffff84
   24688:	cmp	r3, #0
   2468c:	bne	245a0 <__assert_fail@plt+0x11f68>
   24690:	b	24348 <__assert_fail@plt+0x11d10>
   24694:	mov	r0, sl
   24698:	mov	r1, r6
   2469c:	ldr	r2, [fp, #-188]	; 0xffffff44
   246a0:	bl	1205c <memcpy@plt>
   246a4:	str	sl, [sl, #-16]
   246a8:	ldrb	r3, [fp, #-184]	; 0xffffff48
   246ac:	b	2438c <__assert_fail@plt+0x11d54>
   246b0:	sub	r0, fp, #148	; 0x94
   246b4:	bl	12080 <mbsinit@plt>
   246b8:	cmp	r0, #0
   246bc:	beq	2478c <__assert_fail@plt+0x12154>
   246c0:	strb	r5, [fp, #-152]	; 0xffffff68
   246c4:	bl	121dc <__ctype_get_mb_cur_max@plt>
   246c8:	mov	r1, r0
   246cc:	mov	r0, sl
   246d0:	bl	29080 <__assert_fail@plt+0x16a48>
   246d4:	mov	r1, sl
   246d8:	sub	r3, fp, #148	; 0x94
   246dc:	mov	r2, r0
   246e0:	sub	r0, fp, #124	; 0x7c
   246e4:	bl	12218 <mbrtowc@plt>
   246e8:	cmn	r0, #1
   246ec:	str	r0, [fp, #-132]	; 0xffffff7c
   246f0:	strbeq	r6, [fp, #-128]	; 0xffffff80
   246f4:	streq	r5, [fp, #-132]	; 0xffffff7c
   246f8:	beq	24678 <__assert_fail@plt+0x12040>
   246fc:	cmn	r0, #2
   24700:	beq	24778 <__assert_fail@plt+0x12140>
   24704:	cmp	r0, #0
   24708:	bne	2472c <__assert_fail@plt+0x120f4>
   2470c:	ldr	r3, [fp, #-136]	; 0xffffff78
   24710:	str	r5, [fp, #-132]	; 0xffffff7c
   24714:	ldrb	r3, [r3]
   24718:	cmp	r3, #0
   2471c:	bne	247b0 <__assert_fail@plt+0x12178>
   24720:	ldr	r3, [fp, #-124]	; 0xffffff84
   24724:	cmp	r3, #0
   24728:	bne	24618 <__assert_fail@plt+0x11fe0>
   2472c:	sub	r0, fp, #148	; 0x94
   24730:	strb	r5, [fp, #-128]	; 0xffffff80
   24734:	bl	12080 <mbsinit@plt>
   24738:	mov	r4, #1
   2473c:	cmp	r0, #0
   24740:	strbne	r6, [fp, #-152]	; 0xffffff68
   24744:	b	24678 <__assert_fail@plt+0x12040>
   24748:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2474c:	bl	1232c <strlen@plt>
   24750:	strb	r6, [fp, #-72]	; 0xffffffb8
   24754:	str	r0, [fp, #-76]	; 0xffffffb4
   24758:	b	24254 <__assert_fail@plt+0x11c1c>
   2475c:	ldr	r3, [fp, #-136]	; 0xffffff78
   24760:	ldr	r1, [fp, #-232]	; 0xffffff18
   24764:	str	r3, [r1]
   24768:	ldr	r0, [fp, #-224]	; 0xffffff20
   2476c:	bl	2bcfc <__assert_fail@plt+0x196c4>
   24770:	mov	r0, #1
   24774:	b	23fb8 <__assert_fail@plt+0x11980>
   24778:	ldr	r0, [fp, #-136]	; 0xffffff78
   2477c:	bl	1232c <strlen@plt>
   24780:	strb	r6, [fp, #-128]	; 0xffffff80
   24784:	str	r0, [fp, #-132]	; 0xffffff7c
   24788:	b	24678 <__assert_fail@plt+0x12040>
   2478c:	movw	r0, #8564	; 0x2174
   24790:	movw	r1, #8588	; 0x218c
   24794:	movw	r3, #8544	; 0x2160
   24798:	movt	r0, #3
   2479c:	movt	r1, #3
   247a0:	mov	r2, #147	; 0x93
   247a4:	movt	r3, #3
   247a8:	bl	12638 <__assert_fail@plt>
   247ac:	bl	120e0 <__stack_chk_fail@plt>
   247b0:	movw	r0, #8600	; 0x2198
   247b4:	movw	r1, #8588	; 0x218c
   247b8:	movw	r3, #8544	; 0x2160
   247bc:	movt	r0, #3
   247c0:	movt	r1, #3
   247c4:	mov	r2, #175	; 0xaf
   247c8:	movt	r3, #3
   247cc:	bl	12638 <__assert_fail@plt>
   247d0:	movw	r2, #21904	; 0x5590
   247d4:	movt	r2, #4
   247d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247dc:	sub	sp, sp, #316	; 0x13c
   247e0:	ldr	r3, [r2]
   247e4:	mov	r8, r1
   247e8:	str	r2, [sp]
   247ec:	str	r0, [sp, #8]
   247f0:	str	r3, [sp, #308]	; 0x134
   247f4:	bl	121dc <__ctype_get_mb_cur_max@plt>
   247f8:	cmp	r0, #1
   247fc:	bls	24b90 <__assert_fail@plt+0x12558>
   24800:	ldrb	r2, [r8]
   24804:	movw	r7, #13748	; 0x35b4
   24808:	movt	r7, #3
   2480c:	mov	r3, #0
   24810:	and	r1, r2, #31
   24814:	str	r8, [sp, #44]	; 0x2c
   24818:	lsr	r0, r2, #5
   2481c:	str	r3, [sp, #36]	; 0x24
   24820:	strb	r3, [sp, #28]
   24824:	ldr	r0, [r7, r0, lsl #2]
   24828:	str	r3, [sp, #32]
   2482c:	strb	r3, [sp, #40]	; 0x28
   24830:	lsr	r1, r0, r1
   24834:	ands	r5, r1, #1
   24838:	beq	24ae0 <__assert_fail@plt+0x124a8>
   2483c:	mov	r4, r2
   24840:	cmp	r4, #0
   24844:	mov	r3, #1
   24848:	str	r2, [sp, #56]	; 0x38
   2484c:	str	r3, [sp, #48]	; 0x30
   24850:	strb	r3, [sp, #52]	; 0x34
   24854:	mov	r3, #1
   24858:	strb	r3, [sp, #40]	; 0x28
   2485c:	beq	24b70 <__assert_fail@plt+0x12538>
   24860:	mov	r3, #0
   24864:	mov	r2, #1
   24868:	strb	r3, [sp, #140]	; 0x8c
   2486c:	mov	r9, r3
   24870:	str	r2, [sp, #16]
   24874:	mov	r6, r3
   24878:	ldrb	r2, [sp, #140]	; 0x8c
   2487c:	mov	r4, #1
   24880:	ldr	r1, [sp, #8]
   24884:	cmp	r2, #0
   24888:	str	r3, [sp, #12]
   2488c:	str	r8, [sp, #100]	; 0x64
   24890:	str	r1, [sp, #156]	; 0x9c
   24894:	mov	fp, r1
   24898:	str	r3, [sp, #4]
   2489c:	strb	r3, [sp, #84]	; 0x54
   248a0:	str	r3, [sp, #88]	; 0x58
   248a4:	strb	r3, [sp, #96]	; 0x60
   248a8:	str	r3, [sp, #144]	; 0x90
   248ac:	strb	r3, [sp, #152]	; 0x98
   248b0:	str	r3, [sp, #92]	; 0x5c
   248b4:	str	r3, [sp, #148]	; 0x94
   248b8:	str	r8, [sp, #20]
   248bc:	bne	24a6c <__assert_fail@plt+0x12434>
   248c0:	ldrb	r2, [fp]
   248c4:	and	r1, r2, #31
   248c8:	lsr	r2, r2, #5
   248cc:	ldr	r2, [r7, r2, lsl #2]
   248d0:	lsr	r2, r2, r1
   248d4:	tst	r2, #1
   248d8:	beq	24cd0 <__assert_fail@plt+0x12698>
   248dc:	str	r4, [sp, #160]	; 0xa0
   248e0:	ldrb	r5, [fp]
   248e4:	strb	r4, [sp, #164]	; 0xa4
   248e8:	cmp	r5, #0
   248ec:	strb	r4, [sp, #152]	; 0x98
   248f0:	str	r5, [sp, #168]	; 0xa8
   248f4:	beq	24ad8 <__assert_fail@plt+0x124a0>
   248f8:	mov	r3, #1
   248fc:	ldr	r5, [sp, #16]
   24900:	cmp	r9, #9
   24904:	movls	r5, #0
   24908:	andhi	r5, r5, #1
   2490c:	cmp	r5, #0
   24910:	beq	24a0c <__assert_fail@plt+0x123d4>
   24914:	ldr	r1, [sp, #4]
   24918:	add	r2, r9, r9, lsl #2
   2491c:	cmp	r1, r2
   24920:	bcc	24e90 <__assert_fail@plt+0x12858>
   24924:	ldr	r2, [sp, #12]
   24928:	subs	fp, r1, r2
   2492c:	beq	249c0 <__assert_fail@plt+0x12388>
   24930:	ldrb	r8, [sp, #96]	; 0x60
   24934:	cmp	r8, #0
   24938:	beq	24968 <__assert_fail@plt+0x12330>
   2493c:	ldrb	r8, [sp, #108]	; 0x6c
   24940:	cmp	r8, #0
   24944:	bne	249b4 <__assert_fail@plt+0x1237c>
   24948:	ldr	r2, [sp, #100]	; 0x64
   2494c:	subs	fp, fp, #1
   24950:	ldr	r3, [sp, #104]	; 0x68
   24954:	strb	r6, [sp, #96]	; 0x60
   24958:	add	r8, r2, r3
   2495c:	str	r8, [sp, #100]	; 0x64
   24960:	beq	24f5c <__assert_fail@plt+0x12924>
   24964:	mov	r8, #0
   24968:	ldrb	r3, [sp, #84]	; 0x54
   2496c:	ldr	sl, [sp, #100]	; 0x64
   24970:	cmp	r3, #0
   24974:	bne	24d34 <__assert_fail@plt+0x126fc>
   24978:	ldrb	r2, [sl]
   2497c:	and	r1, r2, #31
   24980:	lsr	r2, r2, #5
   24984:	ldr	r2, [r7, r2, lsl #2]
   24988:	lsr	r2, r2, r1
   2498c:	tst	r2, #1
   24990:	beq	24d20 <__assert_fail@plt+0x126e8>
   24994:	str	r4, [sp, #104]	; 0x68
   24998:	mov	r8, r5
   2499c:	ldrb	r3, [sl]
   249a0:	strb	r4, [sp, #108]	; 0x6c
   249a4:	str	r3, [sp, #112]	; 0x70
   249a8:	cmp	r8, #0
   249ac:	strb	r4, [sp, #96]	; 0x60
   249b0:	beq	24948 <__assert_fail@plt+0x12310>
   249b4:	ldr	r3, [sp, #112]	; 0x70
   249b8:	cmp	r3, #0
   249bc:	bne	24948 <__assert_fail@plt+0x12310>
   249c0:	ldrb	r3, [sp, #96]	; 0x60
   249c4:	cmp	r3, #0
   249c8:	ldrbne	r5, [sp, #108]	; 0x6c
   249cc:	beq	24f58 <__assert_fail@plt+0x12920>
   249d0:	cmp	r5, #0
   249d4:	beq	24e9c <__assert_fail@plt+0x12864>
   249d8:	ldr	r3, [sp, #112]	; 0x70
   249dc:	cmp	r3, #0
   249e0:	bne	24e9c <__assert_fail@plt+0x12864>
   249e4:	ldr	r0, [sp, #8]
   249e8:	add	r2, sp, #24
   249ec:	ldr	r1, [sp, #20]
   249f0:	bl	23f6c <__assert_fail@plt+0x11934>
   249f4:	cmp	r0, #0
   249f8:	bne	2539c <__assert_fail@plt+0x12d64>
   249fc:	ldr	r1, [sp, #4]
   24a00:	ldrb	r3, [sp, #164]	; 0xa4
   24a04:	str	r0, [sp, #16]
   24a08:	str	r1, [sp, #12]
   24a0c:	cmp	r3, #0
   24a10:	ldr	r3, [sp, #4]
   24a14:	add	r9, r9, #1
   24a18:	add	r5, r3, #1
   24a1c:	beq	24db8 <__assert_fail@plt+0x12780>
   24a20:	ldrb	r3, [sp, #52]	; 0x34
   24a24:	cmp	r3, #0
   24a28:	beq	24db8 <__assert_fail@plt+0x12780>
   24a2c:	ldr	r0, [sp, #168]	; 0xa8
   24a30:	ldr	r3, [sp, #56]	; 0x38
   24a34:	subs	r3, r0, r3
   24a38:	rsbs	r0, r3, #0
   24a3c:	adcs	r0, r0, r3
   24a40:	cmp	r0, #0
   24a44:	bne	24de8 <__assert_fail@plt+0x127b0>
   24a48:	ldr	fp, [sp, #156]	; 0x9c
   24a4c:	ldr	r2, [sp, #160]	; 0xa0
   24a50:	str	r5, [sp, #4]
   24a54:	add	fp, fp, r2
   24a58:	ldrb	r2, [sp, #140]	; 0x8c
   24a5c:	strb	r6, [sp, #152]	; 0x98
   24a60:	cmp	r2, #0
   24a64:	str	fp, [sp, #156]	; 0x9c
   24a68:	beq	248c0 <__assert_fail@plt+0x12288>
   24a6c:	bl	121dc <__ctype_get_mb_cur_max@plt>
   24a70:	mov	r1, r0
   24a74:	mov	r0, fp
   24a78:	bl	29080 <__assert_fail@plt+0x16a48>
   24a7c:	mov	r1, fp
   24a80:	add	r3, sp, #144	; 0x90
   24a84:	mov	r2, r0
   24a88:	add	r0, sp, #168	; 0xa8
   24a8c:	bl	12218 <mbrtowc@plt>
   24a90:	cmn	r0, #1
   24a94:	str	r0, [sp, #160]	; 0xa0
   24a98:	strbeq	r6, [sp, #164]	; 0xa4
   24a9c:	streq	r4, [sp, #160]	; 0xa0
   24aa0:	beq	24d14 <__assert_fail@plt+0x126dc>
   24aa4:	cmn	r0, #2
   24aa8:	beq	24d04 <__assert_fail@plt+0x126cc>
   24aac:	cmp	r0, #0
   24ab0:	beq	252e4 <__assert_fail@plt+0x12cac>
   24ab4:	ldr	r5, [sp, #168]	; 0xa8
   24ab8:	add	r0, sp, #144	; 0x90
   24abc:	strb	r4, [sp, #164]	; 0xa4
   24ac0:	bl	12080 <mbsinit@plt>
   24ac4:	strb	r4, [sp, #152]	; 0x98
   24ac8:	cmp	r0, #0
   24acc:	strbne	r6, [sp, #140]	; 0x8c
   24ad0:	cmp	r5, #0
   24ad4:	bne	248f8 <__assert_fail@plt+0x122c0>
   24ad8:	mov	r0, r5
   24adc:	b	24b74 <__assert_fail@plt+0x1253c>
   24ae0:	add	r0, sp, #32
   24ae4:	bl	12080 <mbsinit@plt>
   24ae8:	cmp	r0, #0
   24aec:	beq	253a4 <__assert_fail@plt+0x12d6c>
   24af0:	mov	r4, #1
   24af4:	strb	r4, [sp, #28]
   24af8:	bl	121dc <__ctype_get_mb_cur_max@plt>
   24afc:	mov	r1, r0
   24b00:	mov	r0, r8
   24b04:	bl	29080 <__assert_fail@plt+0x16a48>
   24b08:	mov	r1, r8
   24b0c:	add	r3, sp, #32
   24b10:	mov	r2, r0
   24b14:	add	r0, sp, #56	; 0x38
   24b18:	bl	12218 <mbrtowc@plt>
   24b1c:	cmn	r0, #1
   24b20:	str	r0, [sp, #48]	; 0x30
   24b24:	strbeq	r5, [sp, #52]	; 0x34
   24b28:	streq	r4, [sp, #48]	; 0x30
   24b2c:	beq	24cf8 <__assert_fail@plt+0x126c0>
   24b30:	cmn	r0, #2
   24b34:	beq	24ce8 <__assert_fail@plt+0x126b0>
   24b38:	cmp	r0, #0
   24b3c:	beq	25308 <__assert_fail@plt+0x12cd0>
   24b40:	ldr	r4, [sp, #56]	; 0x38
   24b44:	add	r0, sp, #32
   24b48:	mov	r3, #1
   24b4c:	strb	r3, [sp, #52]	; 0x34
   24b50:	bl	12080 <mbsinit@plt>
   24b54:	cmp	r0, #0
   24b58:	movne	r3, #0
   24b5c:	strbne	r3, [sp, #28]
   24b60:	cmp	r4, #0
   24b64:	mov	r3, #1
   24b68:	strb	r3, [sp, #40]	; 0x28
   24b6c:	bne	24860 <__assert_fail@plt+0x12228>
   24b70:	ldr	r0, [sp, #8]
   24b74:	ldr	r1, [sp]
   24b78:	ldr	r2, [sp, #308]	; 0x134
   24b7c:	ldr	r3, [r1]
   24b80:	cmp	r2, r3
   24b84:	bne	253c4 <__assert_fail@plt+0x12d8c>
   24b88:	add	sp, sp, #316	; 0x13c
   24b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b90:	ldrb	r7, [r8]
   24b94:	cmp	r7, #0
   24b98:	beq	24b70 <__assert_fail@plt+0x12538>
   24b9c:	ldr	r3, [sp, #8]
   24ba0:	ldrb	r9, [r3]
   24ba4:	cmp	r9, #0
   24ba8:	beq	24eb4 <__assert_fail@plt+0x1287c>
   24bac:	cmp	r9, r7
   24bb0:	mov	r4, #0
   24bb4:	mov	fp, r4
   24bb8:	str	r4, [sp, #4]
   24bbc:	add	r6, r3, #1
   24bc0:	mov	r5, r3
   24bc4:	mov	sl, r8
   24bc8:	mov	r0, #1
   24bcc:	add	r4, r4, #1
   24bd0:	beq	24c74 <__assert_fail@plt+0x1263c>
   24bd4:	ldrb	r9, [r5, #1]
   24bd8:	cmp	r9, #0
   24bdc:	beq	24eb4 <__assert_fail@plt+0x1287c>
   24be0:	add	fp, fp, #1
   24be4:	cmp	r4, #9
   24be8:	movls	r3, #0
   24bec:	andhi	r3, r0, #1
   24bf0:	cmp	r3, #0
   24bf4:	beq	24c60 <__assert_fail@plt+0x12628>
   24bf8:	add	r3, r4, r4, lsl #2
   24bfc:	cmp	fp, r3
   24c00:	bcc	24c5c <__assert_fail@plt+0x12624>
   24c04:	cmp	sl, #0
   24c08:	beq	24c2c <__assert_fail@plt+0x125f4>
   24c0c:	ldr	r2, [sp, #4]
   24c10:	mov	r0, sl
   24c14:	rsb	r1, r2, fp
   24c18:	bl	12464 <strnlen@plt>
   24c1c:	str	fp, [sp, #4]
   24c20:	ldrb	r3, [sl, r0]!
   24c24:	cmp	r3, #0
   24c28:	bne	24c5c <__assert_fail@plt+0x12624>
   24c2c:	mov	r0, r8
   24c30:	bl	1232c <strlen@plt>
   24c34:	mov	r1, r8
   24c38:	add	r3, sp, #24
   24c3c:	mov	r2, r0
   24c40:	mov	r0, r6
   24c44:	bl	23df4 <__assert_fail@plt+0x117bc>
   24c48:	cmp	r0, #0
   24c4c:	bne	2539c <__assert_fail@plt+0x12d64>
   24c50:	mov	sl, r0
   24c54:	ldrb	r9, [r5, #1]
   24c58:	b	24c60 <__assert_fail@plt+0x12628>
   24c5c:	mov	r0, #1
   24c60:	cmp	r9, r7
   24c64:	add	r6, r6, #1
   24c68:	add	r5, r5, #1
   24c6c:	add	r4, r4, #1
   24c70:	bne	24bd4 <__assert_fail@plt+0x1259c>
   24c74:	ldrb	r3, [r8, #1]
   24c78:	cmp	r3, #0
   24c7c:	beq	24ad8 <__assert_fail@plt+0x124a0>
   24c80:	ldrb	r9, [r5, #1]
   24c84:	cmp	r9, #0
   24c88:	beq	24eb4 <__assert_fail@plt+0x1287c>
   24c8c:	cmp	r3, r9
   24c90:	add	r3, fp, #2
   24c94:	bne	24f50 <__assert_fail@plt+0x12918>
   24c98:	rsb	r1, fp, #0
   24c9c:	add	fp, r8, r1
   24ca0:	add	r1, r5, r1
   24ca4:	b	24cc0 <__assert_fail@plt+0x12688>
   24ca8:	ldrb	ip, [r1, r3]
   24cac:	cmp	ip, #0
   24cb0:	beq	24eb4 <__assert_fail@plt+0x1287c>
   24cb4:	cmp	r2, ip
   24cb8:	add	r3, r3, #1
   24cbc:	bne	24f50 <__assert_fail@plt+0x12918>
   24cc0:	ldrb	r2, [fp, r3]
   24cc4:	cmp	r2, #0
   24cc8:	bne	24ca8 <__assert_fail@plt+0x12670>
   24ccc:	b	24ad8 <__assert_fail@plt+0x124a0>
   24cd0:	add	r0, sp, #144	; 0x90
   24cd4:	bl	12080 <mbsinit@plt>
   24cd8:	cmp	r0, #0
   24cdc:	beq	253a4 <__assert_fail@plt+0x12d6c>
   24ce0:	strb	r4, [sp, #140]	; 0x8c
   24ce4:	b	24a6c <__assert_fail@plt+0x12434>
   24ce8:	ldr	r0, [sp, #44]	; 0x2c
   24cec:	bl	1232c <strlen@plt>
   24cf0:	strb	r5, [sp, #52]	; 0x34
   24cf4:	str	r0, [sp, #48]	; 0x30
   24cf8:	mov	r3, #1
   24cfc:	strb	r3, [sp, #40]	; 0x28
   24d00:	b	24860 <__assert_fail@plt+0x12228>
   24d04:	ldr	r0, [sp, #156]	; 0x9c
   24d08:	bl	1232c <strlen@plt>
   24d0c:	strb	r6, [sp, #164]	; 0xa4
   24d10:	str	r0, [sp, #160]	; 0xa0
   24d14:	strb	r4, [sp, #152]	; 0x98
   24d18:	mov	r3, #0
   24d1c:	b	248fc <__assert_fail@plt+0x122c4>
   24d20:	add	r0, sp, #88	; 0x58
   24d24:	bl	12080 <mbsinit@plt>
   24d28:	cmp	r0, #0
   24d2c:	beq	253a4 <__assert_fail@plt+0x12d6c>
   24d30:	strb	r4, [sp, #84]	; 0x54
   24d34:	bl	121dc <__ctype_get_mb_cur_max@plt>
   24d38:	mov	r1, r0
   24d3c:	mov	r0, sl
   24d40:	bl	29080 <__assert_fail@plt+0x16a48>
   24d44:	mov	r1, sl
   24d48:	add	r3, sp, #88	; 0x58
   24d4c:	mov	r2, r0
   24d50:	add	r0, sp, #112	; 0x70
   24d54:	bl	12218 <mbrtowc@plt>
   24d58:	cmn	r0, #1
   24d5c:	str	r0, [sp, #104]	; 0x68
   24d60:	strbeq	r6, [sp, #108]	; 0x6c
   24d64:	streq	r4, [sp, #104]	; 0x68
   24d68:	beq	249a8 <__assert_fail@plt+0x12370>
   24d6c:	cmn	r0, #2
   24d70:	beq	24e7c <__assert_fail@plt+0x12844>
   24d74:	cmp	r0, #0
   24d78:	bne	24d9c <__assert_fail@plt+0x12764>
   24d7c:	ldr	r3, [sp, #100]	; 0x64
   24d80:	str	r4, [sp, #104]	; 0x68
   24d84:	ldrb	r3, [r3]
   24d88:	cmp	r3, #0
   24d8c:	bne	253c8 <__assert_fail@plt+0x12d90>
   24d90:	ldr	r3, [sp, #112]	; 0x70
   24d94:	cmp	r3, #0
   24d98:	bne	24f30 <__assert_fail@plt+0x128f8>
   24d9c:	add	r0, sp, #88	; 0x58
   24da0:	strb	r4, [sp, #108]	; 0x6c
   24da4:	bl	12080 <mbsinit@plt>
   24da8:	mov	r8, r5
   24dac:	cmp	r0, #0
   24db0:	strbne	r6, [sp, #84]	; 0x54
   24db4:	b	249a8 <__assert_fail@plt+0x12370>
   24db8:	ldr	r2, [sp, #160]	; 0xa0
   24dbc:	ldr	r3, [sp, #48]	; 0x30
   24dc0:	cmp	r2, r3
   24dc4:	movne	r0, #0
   24dc8:	bne	24a40 <__assert_fail@plt+0x12408>
   24dcc:	ldr	r0, [sp, #156]	; 0x9c
   24dd0:	ldr	r1, [sp, #44]	; 0x2c
   24dd4:	bl	120b0 <memcmp@plt>
   24dd8:	rsbs	r0, r0, #1
   24ddc:	movcc	r0, #0
   24de0:	cmp	r0, #0
   24de4:	beq	24a48 <__assert_fail@plt+0x12410>
   24de8:	ldr	r1, [sp, #20]
   24dec:	add	r5, sp, #140	; 0x8c
   24df0:	add	ip, sp, #196	; 0xc4
   24df4:	str	r1, [sp, #268]	; 0x10c
   24df8:	ldm	r5!, {r0, r1, r2, r3}
   24dfc:	stmia	ip!, {r0, r1, r2, r3}
   24e00:	ldm	r5!, {r0, r1, r2, r3}
   24e04:	strb	r6, [sp, #208]	; 0xd0
   24e08:	stmia	ip!, {r0, r1, r2, r3}
   24e0c:	ldm	r5!, {r0, r1, r2, r3}
   24e10:	ldr	r8, [sp, #212]	; 0xd4
   24e14:	stmia	ip!, {r0, r1, r2, r3}
   24e18:	ldm	r5, {r0, r1}
   24e1c:	ldr	r3, [sp, #216]	; 0xd8
   24e20:	stm	ip, {r0, r1}
   24e24:	add	r3, r8, r3
   24e28:	str	r3, [sp, #212]	; 0xd4
   24e2c:	ldr	r2, [sp, #20]
   24e30:	strb	r6, [sp, #252]	; 0xfc
   24e34:	str	r6, [sp, #256]	; 0x100
   24e38:	ldrb	r3, [r2]
   24e3c:	strb	r6, [sp, #264]	; 0x108
   24e40:	and	r2, r3, #31
   24e44:	str	r6, [sp, #260]	; 0x104
   24e48:	lsr	r1, r3, #5
   24e4c:	ldr	r5, [r7, r1, lsl #2]
   24e50:	lsr	r5, r5, r2
   24e54:	ands	r5, r5, #1
   24e58:	beq	24ebc <__assert_fail@plt+0x12884>
   24e5c:	mov	r5, r3
   24e60:	str	r4, [sp, #272]	; 0x110
   24e64:	str	r3, [sp, #280]	; 0x118
   24e68:	strb	r4, [sp, #276]	; 0x114
   24e6c:	cmp	r5, #0
   24e70:	strb	r4, [sp, #264]	; 0x108
   24e74:	bne	25020 <__assert_fail@plt+0x129e8>
   24e78:	bl	125cc <abort@plt>
   24e7c:	ldr	r0, [sp, #100]	; 0x64
   24e80:	bl	1232c <strlen@plt>
   24e84:	strb	r6, [sp, #108]	; 0x6c
   24e88:	str	r0, [sp, #104]	; 0x68
   24e8c:	b	249a8 <__assert_fail@plt+0x12370>
   24e90:	mov	r2, #1
   24e94:	str	r2, [sp, #16]
   24e98:	b	24a0c <__assert_fail@plt+0x123d4>
   24e9c:	ldr	r1, [sp, #4]
   24ea0:	mov	r2, #1
   24ea4:	ldrb	r3, [sp, #164]	; 0xa4
   24ea8:	str	r2, [sp, #16]
   24eac:	str	r1, [sp, #12]
   24eb0:	b	24a0c <__assert_fail@plt+0x123d4>
   24eb4:	mov	r0, #0
   24eb8:	b	24b74 <__assert_fail@plt+0x1253c>
   24ebc:	add	r0, sp, #256	; 0x100
   24ec0:	bl	12080 <mbsinit@plt>
   24ec4:	cmp	r0, #0
   24ec8:	beq	253a4 <__assert_fail@plt+0x12d6c>
   24ecc:	strb	r4, [sp, #252]	; 0xfc
   24ed0:	bl	121dc <__ctype_get_mb_cur_max@plt>
   24ed4:	mov	r1, r0
   24ed8:	ldr	r0, [sp, #20]
   24edc:	bl	29080 <__assert_fail@plt+0x16a48>
   24ee0:	ldr	r1, [sp, #20]
   24ee4:	add	r3, sp, #256	; 0x100
   24ee8:	mov	r2, r0
   24eec:	add	r0, sp, #280	; 0x118
   24ef0:	bl	12218 <mbrtowc@plt>
   24ef4:	cmn	r0, #1
   24ef8:	str	r0, [sp, #272]	; 0x110
   24efc:	beq	25374 <__assert_fail@plt+0x12d3c>
   24f00:	cmn	r0, #2
   24f04:	beq	25384 <__assert_fail@plt+0x12d4c>
   24f08:	cmp	r0, #0
   24f0c:	bne	25340 <__assert_fail@plt+0x12d08>
   24f10:	ldr	fp, [sp, #268]	; 0x10c
   24f14:	str	r4, [sp, #272]	; 0x110
   24f18:	ldrb	r3, [fp]
   24f1c:	cmp	r3, #0
   24f20:	bne	253c8 <__assert_fail@plt+0x12d90>
   24f24:	ldr	r5, [sp, #280]	; 0x118
   24f28:	cmp	r5, #0
   24f2c:	beq	25344 <__assert_fail@plt+0x12d0c>
   24f30:	movw	r0, #8624	; 0x21b0
   24f34:	movw	r1, #8588	; 0x218c
   24f38:	movw	r3, #8544	; 0x2160
   24f3c:	movt	r0, #3
   24f40:	movt	r1, #3
   24f44:	mov	r2, #176	; 0xb0
   24f48:	movt	r3, #3
   24f4c:	bl	12638 <__assert_fail@plt>
   24f50:	mov	fp, r3
   24f54:	b	24be4 <__assert_fail@plt+0x125ac>
   24f58:	ldr	r8, [sp, #100]	; 0x64
   24f5c:	ldrb	r2, [sp, #84]	; 0x54
   24f60:	cmp	r2, #0
   24f64:	bne	24f98 <__assert_fail@plt+0x12960>
   24f68:	ldrb	r2, [r8]
   24f6c:	and	r1, r2, #31
   24f70:	lsr	r2, r2, #5
   24f74:	ldr	r2, [r7, r2, lsl #2]
   24f78:	lsr	r2, r2, r1
   24f7c:	tst	r2, #1
   24f80:	bne	2532c <__assert_fail@plt+0x12cf4>
   24f84:	add	r0, sp, #88	; 0x58
   24f88:	bl	12080 <mbsinit@plt>
   24f8c:	cmp	r0, #0
   24f90:	beq	253a4 <__assert_fail@plt+0x12d6c>
   24f94:	strb	r4, [sp, #84]	; 0x54
   24f98:	bl	121dc <__ctype_get_mb_cur_max@plt>
   24f9c:	mov	r1, r0
   24fa0:	mov	r0, r8
   24fa4:	bl	29080 <__assert_fail@plt+0x16a48>
   24fa8:	mov	r1, r8
   24fac:	add	r3, sp, #88	; 0x58
   24fb0:	mov	r2, r0
   24fb4:	add	r0, sp, #112	; 0x70
   24fb8:	bl	12218 <mbrtowc@plt>
   24fbc:	cmn	r0, #1
   24fc0:	str	r0, [sp, #104]	; 0x68
   24fc4:	strbeq	r6, [sp, #108]	; 0x6c
   24fc8:	streq	r4, [sp, #104]	; 0x68
   24fcc:	moveq	r5, #0
   24fd0:	beq	25018 <__assert_fail@plt+0x129e0>
   24fd4:	cmn	r0, #2
   24fd8:	beq	2535c <__assert_fail@plt+0x12d24>
   24fdc:	cmp	r0, #0
   24fe0:	bne	25004 <__assert_fail@plt+0x129cc>
   24fe4:	ldr	r3, [sp, #100]	; 0x64
   24fe8:	str	r4, [sp, #104]	; 0x68
   24fec:	ldrb	r3, [r3]
   24ff0:	cmp	r3, #0
   24ff4:	bne	253c8 <__assert_fail@plt+0x12d90>
   24ff8:	ldr	r3, [sp, #112]	; 0x70
   24ffc:	cmp	r3, #0
   25000:	bne	24f30 <__assert_fail@plt+0x128f8>
   25004:	add	r0, sp, #88	; 0x58
   25008:	strb	r4, [sp, #108]	; 0x6c
   2500c:	bl	12080 <mbsinit@plt>
   25010:	cmp	r0, #0
   25014:	strbne	r6, [sp, #84]	; 0x54
   25018:	strb	r4, [sp, #96]	; 0x60
   2501c:	b	249d0 <__assert_fail@plt+0x12398>
   25020:	ldr	fp, [sp, #268]	; 0x10c
   25024:	ldr	r3, [sp, #4]
   25028:	ldr	r2, [sp, #272]	; 0x110
   2502c:	add	r5, r3, #2
   25030:	ldrb	r3, [sp, #252]	; 0xfc
   25034:	add	fp, fp, r2
   25038:	strb	r6, [sp, #264]	; 0x108
   2503c:	cmp	r3, #0
   25040:	str	fp, [sp, #268]	; 0x10c
   25044:	bne	2510c <__assert_fail@plt+0x12ad4>
   25048:	ldrb	r3, [fp]
   2504c:	and	r2, r3, #31
   25050:	lsr	r3, r3, #5
   25054:	ldr	r3, [r7, r3, lsl #2]
   25058:	lsr	r3, r3, r2
   2505c:	tst	r3, #1
   25060:	beq	25294 <__assert_fail@plt+0x12c5c>
   25064:	str	r4, [sp, #272]	; 0x110
   25068:	ldrb	r8, [fp]
   2506c:	strb	r4, [sp, #276]	; 0x114
   25070:	str	r8, [sp, #280]	; 0x118
   25074:	cmp	r8, #0
   25078:	strb	r4, [sp, #264]	; 0x108
   2507c:	bne	2509c <__assert_fail@plt+0x12a64>
   25080:	ldr	r0, [sp, #156]	; 0x9c
   25084:	b	24b74 <__assert_fail@plt+0x1253c>
   25088:	ldr	r0, [sp, #268]	; 0x10c
   2508c:	bl	1232c <strlen@plt>
   25090:	strb	r6, [sp, #276]	; 0x114
   25094:	str	r0, [sp, #272]	; 0x110
   25098:	strb	r4, [sp, #264]	; 0x108
   2509c:	ldrb	r8, [sp, #208]	; 0xd0
   250a0:	cmp	r8, #0
   250a4:	beq	25170 <__assert_fail@plt+0x12b38>
   250a8:	ldrb	r8, [sp, #220]	; 0xdc
   250ac:	cmp	r8, #0
   250b0:	bne	251bc <__assert_fail@plt+0x12b84>
   250b4:	ldr	r2, [sp, #216]	; 0xd8
   250b8:	ldr	r3, [sp, #272]	; 0x110
   250bc:	cmp	r2, r3
   250c0:	movne	r0, #1
   250c4:	beq	2527c <__assert_fail@plt+0x12c44>
   250c8:	cmp	r0, #0
   250cc:	add	r3, r5, #1
   250d0:	bne	24a48 <__assert_fail@plt+0x12410>
   250d4:	ldr	r2, [sp, #212]	; 0xd4
   250d8:	mov	r5, r3
   250dc:	ldr	r3, [sp, #216]	; 0xd8
   250e0:	ldr	fp, [sp, #268]	; 0x10c
   250e4:	add	r2, r2, r3
   250e8:	ldr	r3, [sp, #272]	; 0x110
   250ec:	strb	r0, [sp, #208]	; 0xd0
   250f0:	add	fp, fp, r3
   250f4:	ldrb	r3, [sp, #252]	; 0xfc
   250f8:	strb	r0, [sp, #264]	; 0x108
   250fc:	cmp	r3, #0
   25100:	str	r2, [sp, #212]	; 0xd4
   25104:	str	fp, [sp, #268]	; 0x10c
   25108:	beq	25048 <__assert_fail@plt+0x12a10>
   2510c:	bl	121dc <__ctype_get_mb_cur_max@plt>
   25110:	mov	r1, r0
   25114:	mov	r0, fp
   25118:	bl	29080 <__assert_fail@plt+0x16a48>
   2511c:	mov	r1, fp
   25120:	add	r3, sp, #256	; 0x100
   25124:	mov	r2, r0
   25128:	add	r0, sp, #280	; 0x118
   2512c:	bl	12218 <mbrtowc@plt>
   25130:	cmn	r0, #1
   25134:	str	r0, [sp, #272]	; 0x110
   25138:	strbeq	r6, [sp, #276]	; 0x114
   2513c:	streq	r4, [sp, #272]	; 0x110
   25140:	beq	25098 <__assert_fail@plt+0x12a60>
   25144:	cmn	r0, #2
   25148:	beq	25088 <__assert_fail@plt+0x12a50>
   2514c:	cmp	r0, #0
   25150:	beq	252ac <__assert_fail@plt+0x12c74>
   25154:	ldr	r8, [sp, #280]	; 0x118
   25158:	add	r0, sp, #256	; 0x100
   2515c:	strb	r4, [sp, #276]	; 0x114
   25160:	bl	12080 <mbsinit@plt>
   25164:	cmp	r0, #0
   25168:	strbne	r6, [sp, #252]	; 0xfc
   2516c:	b	25074 <__assert_fail@plt+0x12a3c>
   25170:	ldrb	r3, [sp, #196]	; 0xc4
   25174:	ldr	sl, [sp, #212]	; 0xd4
   25178:	cmp	r3, #0
   2517c:	bne	251f8 <__assert_fail@plt+0x12bc0>
   25180:	ldrb	r3, [sl]
   25184:	and	r2, r3, #31
   25188:	lsr	r3, r3, #5
   2518c:	ldr	r3, [r7, r3, lsl #2]
   25190:	lsr	r3, r3, r2
   25194:	tst	r3, #1
   25198:	beq	251e4 <__assert_fail@plt+0x12bac>
   2519c:	str	r4, [sp, #216]	; 0xd8
   251a0:	mov	r8, #1
   251a4:	ldrb	r3, [sl]
   251a8:	strb	r4, [sp, #220]	; 0xdc
   251ac:	str	r3, [sp, #224]	; 0xe0
   251b0:	cmp	r8, #0
   251b4:	strb	r4, [sp, #208]	; 0xd0
   251b8:	beq	250b4 <__assert_fail@plt+0x12a7c>
   251bc:	ldr	r0, [sp, #224]	; 0xe0
   251c0:	cmp	r0, #0
   251c4:	beq	24b74 <__assert_fail@plt+0x1253c>
   251c8:	ldrb	r3, [sp, #276]	; 0x114
   251cc:	cmp	r3, #0
   251d0:	beq	250b4 <__assert_fail@plt+0x12a7c>
   251d4:	ldr	r3, [sp, #280]	; 0x118
   251d8:	subs	r0, r0, r3
   251dc:	movne	r0, #1
   251e0:	b	250c8 <__assert_fail@plt+0x12a90>
   251e4:	add	r0, sp, #200	; 0xc8
   251e8:	bl	12080 <mbsinit@plt>
   251ec:	cmp	r0, #0
   251f0:	beq	253a4 <__assert_fail@plt+0x12d6c>
   251f4:	strb	r4, [sp, #196]	; 0xc4
   251f8:	bl	121dc <__ctype_get_mb_cur_max@plt>
   251fc:	mov	r1, r0
   25200:	mov	r0, sl
   25204:	bl	29080 <__assert_fail@plt+0x16a48>
   25208:	mov	r1, sl
   2520c:	add	r3, sp, #200	; 0xc8
   25210:	mov	r2, r0
   25214:	add	r0, sp, #224	; 0xe0
   25218:	bl	12218 <mbrtowc@plt>
   2521c:	cmn	r0, #1
   25220:	str	r0, [sp, #216]	; 0xd8
   25224:	strbeq	r6, [sp, #220]	; 0xdc
   25228:	streq	r4, [sp, #216]	; 0xd8
   2522c:	beq	251b0 <__assert_fail@plt+0x12b78>
   25230:	cmn	r0, #2
   25234:	beq	252d0 <__assert_fail@plt+0x12c98>
   25238:	cmp	r0, #0
   2523c:	bne	25260 <__assert_fail@plt+0x12c28>
   25240:	ldr	r3, [sp, #212]	; 0xd4
   25244:	str	r4, [sp, #216]	; 0xd8
   25248:	ldrb	r3, [r3]
   2524c:	cmp	r3, #0
   25250:	bne	253c8 <__assert_fail@plt+0x12d90>
   25254:	ldr	r3, [sp, #224]	; 0xe0
   25258:	cmp	r3, #0
   2525c:	bne	24f30 <__assert_fail@plt+0x128f8>
   25260:	add	r0, sp, #200	; 0xc8
   25264:	strb	r4, [sp, #220]	; 0xdc
   25268:	bl	12080 <mbsinit@plt>
   2526c:	mov	r8, #1
   25270:	cmp	r0, #0
   25274:	strbne	r6, [sp, #196]	; 0xc4
   25278:	b	251b0 <__assert_fail@plt+0x12b78>
   2527c:	ldr	r0, [sp, #212]	; 0xd4
   25280:	ldr	r1, [sp, #268]	; 0x10c
   25284:	bl	120b0 <memcmp@plt>
   25288:	adds	r0, r0, #0
   2528c:	movne	r0, #1
   25290:	b	250c8 <__assert_fail@plt+0x12a90>
   25294:	add	r0, sp, #256	; 0x100
   25298:	bl	12080 <mbsinit@plt>
   2529c:	cmp	r0, #0
   252a0:	beq	253a4 <__assert_fail@plt+0x12d6c>
   252a4:	strb	r4, [sp, #252]	; 0xfc
   252a8:	b	2510c <__assert_fail@plt+0x12ad4>
   252ac:	ldr	r3, [sp, #268]	; 0x10c
   252b0:	str	r4, [sp, #272]	; 0x110
   252b4:	ldrb	r3, [r3]
   252b8:	cmp	r3, #0
   252bc:	bne	253c8 <__assert_fail@plt+0x12d90>
   252c0:	ldr	r8, [sp, #280]	; 0x118
   252c4:	cmp	r8, #0
   252c8:	beq	25158 <__assert_fail@plt+0x12b20>
   252cc:	b	24f30 <__assert_fail@plt+0x128f8>
   252d0:	ldr	r0, [sp, #212]	; 0xd4
   252d4:	bl	1232c <strlen@plt>
   252d8:	strb	r6, [sp, #220]	; 0xdc
   252dc:	str	r0, [sp, #216]	; 0xd8
   252e0:	b	251b0 <__assert_fail@plt+0x12b78>
   252e4:	ldr	r3, [sp, #156]	; 0x9c
   252e8:	str	r4, [sp, #160]	; 0xa0
   252ec:	ldrb	r3, [r3]
   252f0:	cmp	r3, #0
   252f4:	bne	253c8 <__assert_fail@plt+0x12d90>
   252f8:	ldr	r5, [sp, #168]	; 0xa8
   252fc:	cmp	r5, #0
   25300:	beq	24ab8 <__assert_fail@plt+0x12480>
   25304:	b	24f30 <__assert_fail@plt+0x128f8>
   25308:	ldr	r3, [sp, #44]	; 0x2c
   2530c:	str	r4, [sp, #48]	; 0x30
   25310:	ldrb	r3, [r3]
   25314:	cmp	r3, #0
   25318:	bne	253c8 <__assert_fail@plt+0x12d90>
   2531c:	ldr	r4, [sp, #56]	; 0x38
   25320:	cmp	r4, #0
   25324:	beq	24b44 <__assert_fail@plt+0x1250c>
   25328:	b	24f30 <__assert_fail@plt+0x128f8>
   2532c:	str	r4, [sp, #104]	; 0x68
   25330:	ldrb	r3, [r8]
   25334:	strb	r4, [sp, #108]	; 0x6c
   25338:	str	r3, [sp, #112]	; 0x70
   2533c:	b	25018 <__assert_fail@plt+0x129e0>
   25340:	ldr	r5, [sp, #280]	; 0x118
   25344:	add	r0, sp, #256	; 0x100
   25348:	strb	r4, [sp, #276]	; 0x114
   2534c:	bl	12080 <mbsinit@plt>
   25350:	cmp	r0, #0
   25354:	strbne	r6, [sp, #252]	; 0xfc
   25358:	b	24e6c <__assert_fail@plt+0x12834>
   2535c:	ldr	r0, [sp, #100]	; 0x64
   25360:	mov	r5, #0
   25364:	bl	1232c <strlen@plt>
   25368:	strb	r6, [sp, #108]	; 0x6c
   2536c:	str	r0, [sp, #104]	; 0x68
   25370:	b	25018 <__assert_fail@plt+0x129e0>
   25374:	str	r4, [sp, #272]	; 0x110
   25378:	strb	r5, [sp, #276]	; 0x114
   2537c:	ldr	fp, [sp, #268]	; 0x10c
   25380:	b	25024 <__assert_fail@plt+0x129ec>
   25384:	ldr	fp, [sp, #268]	; 0x10c
   25388:	mov	r0, fp
   2538c:	bl	1232c <strlen@plt>
   25390:	strb	r5, [sp, #276]	; 0x114
   25394:	str	r0, [sp, #272]	; 0x110
   25398:	b	25024 <__assert_fail@plt+0x129ec>
   2539c:	ldr	r0, [sp, #24]
   253a0:	b	24b74 <__assert_fail@plt+0x1253c>
   253a4:	movw	r0, #8564	; 0x2174
   253a8:	movw	r1, #8588	; 0x218c
   253ac:	movw	r3, #8544	; 0x2160
   253b0:	movt	r0, #3
   253b4:	movt	r1, #3
   253b8:	mov	r2, #147	; 0x93
   253bc:	movt	r3, #3
   253c0:	bl	12638 <__assert_fail@plt>
   253c4:	bl	120e0 <__stack_chk_fail@plt>
   253c8:	movw	r0, #8600	; 0x2198
   253cc:	movw	r1, #8588	; 0x218c
   253d0:	movw	r3, #8544	; 0x2160
   253d4:	movt	r0, #3
   253d8:	movt	r1, #3
   253dc:	mov	r2, #175	; 0xaf
   253e0:	movt	r3, #3
   253e4:	bl	12638 <__assert_fail@plt>
   253e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253ec:	mov	r5, r0
   253f0:	ldrb	r2, [r0]
   253f4:	sub	r3, r2, #48	; 0x30
   253f8:	cmp	r3, #7
   253fc:	bls	2549c <__assert_fail@plt+0x12e64>
   25400:	cmp	r2, #0
   25404:	moveq	r0, #16
   25408:	beq	2544c <__assert_fail@plt+0x12e14>
   2540c:	mov	lr, r5
   25410:	mov	r1, #1
   25414:	cmp	r2, #43	; 0x2b
   25418:	moveq	r3, #1
   2541c:	beq	25430 <__assert_fail@plt+0x12df8>
   25420:	and	r2, r2, #239	; 0xef
   25424:	subs	r2, r2, #45	; 0x2d
   25428:	rsbs	r3, r2, #0
   2542c:	adcs	r3, r3, r2
   25430:	ldrb	r2, [lr, #1]!
   25434:	add	r1, r1, r3
   25438:	cmp	r2, #0
   2543c:	bne	25414 <__assert_fail@plt+0x12ddc>
   25440:	cmn	r1, #-268435455	; 0xf0000001
   25444:	bhi	25770 <__assert_fail@plt+0x13138>
   25448:	lsl	r0, r1, #4
   2544c:	bl	29604 <__assert_fail@plt+0x16fcc>
   25450:	mov	r7, #0
   25454:	movw	r9, #4095	; 0xfff
   25458:	mov	r8, #1
   2545c:	mov	r6, #0
   25460:	mov	r3, r5
   25464:	add	r5, r5, #1
   25468:	ldrb	sl, [r3]
   2546c:	cmp	sl, #97	; 0x61
   25470:	beq	256a0 <__assert_fail@plt+0x13068>
   25474:	bls	254d4 <__assert_fail@plt+0x12e9c>
   25478:	cmp	sl, #111	; 0x6f
   2547c:	beq	256bc <__assert_fail@plt+0x13084>
   25480:	cmp	sl, #117	; 0x75
   25484:	beq	256b4 <__assert_fail@plt+0x1307c>
   25488:	cmp	sl, #103	; 0x67
   2548c:	beq	256a8 <__assert_fail@plt+0x13070>
   25490:	bl	12020 <free@plt>
   25494:	mov	r0, #0
   25498:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2549c:	mov	r1, r0
   254a0:	mov	r4, #0
   254a4:	b	254bc <__assert_fail@plt+0x12e84>
   254a8:	ldrb	r2, [r1, #1]
   254ac:	sub	r1, r2, #48	; 0x30
   254b0:	cmp	r1, #7
   254b4:	bhi	256c8 <__assert_fail@plt+0x13090>
   254b8:	mov	r1, ip
   254bc:	add	r4, r2, r4, lsl #3
   254c0:	add	ip, r1, #1
   254c4:	sub	r4, r4, #48	; 0x30
   254c8:	cmp	r4, #4096	; 0x1000
   254cc:	bcc	254a8 <__assert_fail@plt+0x12e70>
   254d0:	b	25494 <__assert_fail@plt+0x12e5c>
   254d4:	cmp	sl, #45	; 0x2d
   254d8:	beq	254ec <__assert_fail@plt+0x12eb4>
   254dc:	cmp	sl, #61	; 0x3d
   254e0:	beq	254ec <__assert_fail@plt+0x12eb4>
   254e4:	cmp	sl, #43	; 0x2b
   254e8:	bne	25490 <__assert_fail@plt+0x12e58>
   254ec:	add	r5, r0, r7, lsl #4
   254f0:	add	r7, r7, #1
   254f4:	add	r4, r5, #8
   254f8:	b	25558 <__assert_fail@plt+0x12f20>
   254fc:	cmp	ip, #111	; 0x6f
   25500:	beq	25690 <__assert_fail@plt+0x13058>
   25504:	cmp	ip, #117	; 0x75
   25508:	addeq	r3, r3, #2
   2550c:	moveq	r2, #3
   25510:	moveq	fp, #448	; 0x1c0
   25514:	bne	255ac <__assert_fail@plt+0x12f74>
   25518:	cmp	r6, #0
   2551c:	strb	sl, [r4, #-8]
   25520:	strb	r2, [r4, #-7]
   25524:	str	r6, [r4, #-4]
   25528:	str	fp, [r5, #8]
   2552c:	andne	fp, fp, r6
   25530:	str	fp, [r5, #12]
   25534:	ldrb	sl, [r3]
   25538:	cmp	sl, #43	; 0x2b
   2553c:	beq	2554c <__assert_fail@plt+0x12f14>
   25540:	and	r2, sl, #239	; 0xef
   25544:	cmp	r2, #45	; 0x2d
   25548:	bne	25750 <__assert_fail@plt+0x13118>
   2554c:	add	r5, r5, #16
   25550:	add	r4, r4, #16
   25554:	add	r7, r7, #1
   25558:	ldrb	ip, [r3, #1]
   2555c:	add	r1, r3, #1
   25560:	cmp	ip, #103	; 0x67
   25564:	beq	25680 <__assert_fail@plt+0x13048>
   25568:	bhi	254fc <__assert_fail@plt+0x12ec4>
   2556c:	sub	r3, ip, #48	; 0x30
   25570:	cmp	r3, #7
   25574:	movls	r2, #0
   25578:	bls	25594 <__assert_fail@plt+0x12f5c>
   2557c:	b	255ac <__assert_fail@plt+0x12f74>
   25580:	ldrb	ip, [r1, #1]
   25584:	sub	r1, ip, #48	; 0x30
   25588:	cmp	r1, #7
   2558c:	bhi	25720 <__assert_fail@plt+0x130e8>
   25590:	mov	r1, r3
   25594:	add	r2, ip, r2, lsl #3
   25598:	add	r3, r1, #1
   2559c:	sub	r2, r2, #48	; 0x30
   255a0:	cmp	r2, #4096	; 0x1000
   255a4:	bcc	25580 <__assert_fail@plt+0x12f48>
   255a8:	b	25494 <__assert_fail@plt+0x12e5c>
   255ac:	mov	r2, #1
   255b0:	mov	fp, #0
   255b4:	sub	ip, ip, #88	; 0x58
   255b8:	mov	r3, r1
   255bc:	cmp	ip, #32
   255c0:	ldrls	pc, [pc, ip, lsl #2]
   255c4:	b	25518 <__assert_fail@plt+0x12ee0>
   255c8:	andeq	r5, r2, ip, asr #12
   255cc:	andeq	r5, r2, r8, lsl r5
   255d0:	andeq	r5, r2, r8, lsl r5
   255d4:	andeq	r5, r2, r8, lsl r5
   255d8:	andeq	r5, r2, r8, lsl r5
   255dc:	andeq	r5, r2, r8, lsl r5
   255e0:	andeq	r5, r2, r8, lsl r5
   255e4:	andeq	r5, r2, r8, lsl r5
   255e8:	andeq	r5, r2, r8, lsl r5
   255ec:	andeq	r5, r2, r8, lsl r5
   255f0:	andeq	r5, r2, r8, lsl r5
   255f4:	andeq	r5, r2, r8, lsl r5
   255f8:	andeq	r5, r2, r8, lsl r5
   255fc:	andeq	r5, r2, r8, lsl r5
   25600:	andeq	r5, r2, r8, lsl r5
   25604:	andeq	r5, r2, r8, lsl r5
   25608:	andeq	r5, r2, r8, lsl r5
   2560c:	andeq	r5, r2, r8, lsl r5
   25610:	andeq	r5, r2, r8, lsl r5
   25614:	andeq	r5, r2, r8, lsl r5
   25618:	andeq	r5, r2, r8, lsl r5
   2561c:	andeq	r5, r2, r8, lsl r5
   25620:	andeq	r5, r2, r8, lsl r5
   25624:	andeq	r5, r2, r8, lsl r5
   25628:	andeq	r5, r2, r8, lsl r5
   2562c:	andeq	r5, r2, r8, lsl r5
   25630:	andeq	r5, r2, r8, ror r6
   25634:	andeq	r5, r2, r0, ror r6
   25638:	andeq	r5, r2, r8, ror #12
   2563c:	andeq	r5, r2, r8, lsl r5
   25640:	andeq	r5, r2, r8, lsl r5
   25644:	andeq	r5, r2, r0, ror #12
   25648:	andeq	r5, r2, r8, asr r6
   2564c:	mov	r2, #2
   25650:	ldrb	ip, [r1, #1]!
   25654:	b	255b4 <__assert_fail@plt+0x12f7c>
   25658:	orr	fp, fp, #73	; 0x49
   2565c:	b	25650 <__assert_fail@plt+0x13018>
   25660:	orr	fp, fp, #146	; 0x92
   25664:	b	25650 <__assert_fail@plt+0x13018>
   25668:	orr	fp, fp, #512	; 0x200
   2566c:	b	25650 <__assert_fail@plt+0x13018>
   25670:	orr	fp, fp, #3072	; 0xc00
   25674:	b	25650 <__assert_fail@plt+0x13018>
   25678:	orr	fp, fp, #292	; 0x124
   2567c:	b	25650 <__assert_fail@plt+0x13018>
   25680:	add	r3, r3, #2
   25684:	mov	r2, #3
   25688:	mov	fp, #56	; 0x38
   2568c:	b	25518 <__assert_fail@plt+0x12ee0>
   25690:	add	r3, r3, #2
   25694:	mov	r2, #3
   25698:	mov	fp, #7
   2569c:	b	25518 <__assert_fail@plt+0x12ee0>
   256a0:	movw	r6, #4095	; 0xfff
   256a4:	b	25460 <__assert_fail@plt+0x12e28>
   256a8:	orr	r6, r6, #1072	; 0x430
   256ac:	orr	r6, r6, #8
   256b0:	b	25460 <__assert_fail@plt+0x12e28>
   256b4:	orr	r6, r6, #2496	; 0x9c0
   256b8:	b	25460 <__assert_fail@plt+0x12e28>
   256bc:	orr	r6, r6, #516	; 0x204
   256c0:	orr	r6, r6, #3
   256c4:	b	25460 <__assert_fail@plt+0x12e28>
   256c8:	cmp	r2, #0
   256cc:	bne	25494 <__assert_fail@plt+0x12e5c>
   256d0:	rsb	ip, r5, ip
   256d4:	mov	r0, #32
   256d8:	cmp	ip, #4
   256dc:	andle	r5, r4, #3072	; 0xc00
   256e0:	movwgt	r5, #4095	; 0xfff
   256e4:	mvnle	r5, r5, lsr #10
   256e8:	mvnle	r5, r5, lsl #10
   256ec:	bl	29604 <__assert_fail@plt+0x16fcc>
   256f0:	mov	r1, #61	; 0x3d
   256f4:	mov	r2, #1
   256f8:	mov	r3, r0
   256fc:	strb	r1, [r0]
   25700:	strb	r2, [r0, #1]
   25704:	movw	r1, #4095	; 0xfff
   25708:	str	r4, [r0, #8]
   2570c:	mov	r2, #0
   25710:	str	r5, [r0, #12]
   25714:	str	r1, [r0, #4]
   25718:	strb	r2, [r3, #17]
   2571c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25720:	cmp	r6, #0
   25724:	bne	25494 <__assert_fail@plt+0x12e5c>
   25728:	cmp	ip, #44	; 0x2c
   2572c:	cmpne	ip, #0
   25730:	bne	25494 <__assert_fail@plt+0x12e5c>
   25734:	movw	r6, #4095	; 0xfff
   25738:	strb	sl, [r4, #-8]
   2573c:	strb	r8, [r4, #-7]
   25740:	mov	fp, r6
   25744:	str	r9, [r4, #-4]
   25748:	str	r2, [r5, #8]
   2574c:	b	25530 <__assert_fail@plt+0x12ef8>
   25750:	cmp	sl, #44	; 0x2c
   25754:	addeq	r5, r3, #1
   25758:	beq	2545c <__assert_fail@plt+0x12e24>
   2575c:	cmp	sl, #0
   25760:	bne	25490 <__assert_fail@plt+0x12e58>
   25764:	add	r7, r0, r7, lsl #4
   25768:	strb	sl, [r7, #1]
   2576c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25770:	bl	2973c <__assert_fail@plt+0x17104>
   25774:	push	{r4, r5, r6, lr}
   25778:	movw	r4, #21904	; 0x5590
   2577c:	movt	r4, #4
   25780:	sub	sp, sp, #112	; 0x70
   25784:	mov	r1, r0
   25788:	mov	r0, #3
   2578c:	ldr	r3, [r4]
   25790:	mov	r2, sp
   25794:	str	r3, [sp, #108]	; 0x6c
   25798:	bl	12578 <__xstat64@plt>
   2579c:	subs	r5, r0, #0
   257a0:	movne	r0, #0
   257a4:	bne	257dc <__assert_fail@plt+0x131a4>
   257a8:	mov	r0, #32
   257ac:	ldr	r6, [sp, #16]
   257b0:	bl	29604 <__assert_fail@plt+0x16fcc>
   257b4:	mov	r2, #61	; 0x3d
   257b8:	mov	r1, #1
   257bc:	mov	r3, r0
   257c0:	strb	r2, [r0]
   257c4:	strb	r5, [r0, #17]
   257c8:	movw	r2, #4095	; 0xfff
   257cc:	str	r6, [r0, #8]
   257d0:	strb	r1, [r0, #1]
   257d4:	str	r2, [r3, #4]
   257d8:	str	r2, [r3, #12]
   257dc:	ldr	r2, [sp, #108]	; 0x6c
   257e0:	ldr	r3, [r4]
   257e4:	cmp	r2, r3
   257e8:	bne	257f4 <__assert_fail@plt+0x131bc>
   257ec:	add	sp, sp, #112	; 0x70
   257f0:	pop	{r4, r5, r6, pc}
   257f4:	bl	120e0 <__stack_chk_fail@plt>
   257f8:	push	{r4, r5, r6, r7, r8, r9}
   257fc:	ubfx	r0, r0, #0, #12
   25800:	ldrb	ip, [r3, #1]
   25804:	ldr	r8, [sp, #24]
   25808:	cmp	ip, #0
   2580c:	beq	25920 <__assert_fail@plt+0x132e8>
   25810:	add	r3, r3, #16
   25814:	mvn	r2, r2
   25818:	mov	r7, #0
   2581c:	b	258a0 <__assert_fail@plt+0x13268>
   25820:	cmp	ip, #3
   25824:	bne	2585c <__assert_fail@plt+0x13224>
   25828:	and	r5, r5, r0
   2582c:	tst	r5, #292	; 0x124
   25830:	moveq	ip, #0
   25834:	movne	ip, #292	; 0x124
   25838:	tst	r5, #146	; 0x92
   2583c:	moveq	r9, #0
   25840:	movne	r9, #146	; 0x92
   25844:	tst	r5, #73	; 0x49
   25848:	orr	ip, r9, ip
   2584c:	moveq	r9, #0
   25850:	movne	r9, #73	; 0x49
   25854:	orr	ip, ip, r9
   25858:	orr	r5, ip, r5
   2585c:	cmp	r4, #0
   25860:	ldrb	ip, [r3, #-16]
   25864:	bic	r5, r5, r6
   25868:	movne	r9, r4
   2586c:	moveq	r9, r2
   25870:	cmp	ip, #45	; 0x2d
   25874:	and	r5, r5, r9
   25878:	beq	25914 <__assert_fail@plt+0x132dc>
   2587c:	cmp	ip, #61	; 0x3d
   25880:	beq	258d4 <__assert_fail@plt+0x1329c>
   25884:	cmp	ip, #43	; 0x2b
   25888:	orreq	r7, r7, r5
   2588c:	orreq	r0, r0, r5
   25890:	add	r3, r3, #16
   25894:	ldrb	ip, [r3, #-15]
   25898:	cmp	ip, #0
   2589c:	beq	25904 <__assert_fail@plt+0x132cc>
   258a0:	cmp	r1, #0
   258a4:	ldr	r6, [r3, #-4]
   258a8:	ldr	r4, [r3, #-12]
   258ac:	movne	r5, #3072	; 0xc00
   258b0:	moveq	r5, #0
   258b4:	cmp	ip, #2
   258b8:	bic	r6, r5, r6
   258bc:	ldr	r5, [r3, #-8]
   258c0:	bne	25820 <__assert_fail@plt+0x131e8>
   258c4:	and	ip, r0, #73	; 0x49
   258c8:	orrs	ip, ip, r1
   258cc:	orrne	r5, r5, #73	; 0x49
   258d0:	b	2585c <__assert_fail@plt+0x13224>
   258d4:	add	r3, r3, #16
   258d8:	cmp	r4, #0
   258dc:	ldrb	ip, [r3, #-15]
   258e0:	mvnne	r4, r4
   258e4:	orr	r6, r4, r6
   258e8:	cmp	ip, #0
   258ec:	and	r0, r6, r0
   258f0:	mvn	r6, r6
   258f4:	ubfx	r6, r6, #0, #12
   258f8:	orr	r7, r7, r6
   258fc:	orr	r0, r0, r5
   25900:	bne	258a0 <__assert_fail@plt+0x13268>
   25904:	cmp	r8, #0
   25908:	strne	r7, [r8]
   2590c:	pop	{r4, r5, r6, r7, r8, r9}
   25910:	bx	lr
   25914:	orr	r7, r7, r5
   25918:	bic	r0, r0, r5
   2591c:	b	25890 <__assert_fail@plt+0x13258>
   25920:	mov	r7, ip
   25924:	b	25904 <__assert_fail@plt+0x132cc>
   25928:	push	{r3, r4, r5, lr}
   2592c:	movw	r3, #21820	; 0x553c
   25930:	movt	r3, #4
   25934:	mov	r4, r0
   25938:	mov	r2, #5
   2593c:	movw	r1, #8644	; 0x21c4
   25940:	mov	r0, #0
   25944:	movt	r1, #3
   25948:	ldr	r5, [r3]
   2594c:	bl	120d4 <dcgettext@plt>
   25950:	mov	r1, r4
   25954:	mov	r2, r0
   25958:	mov	r0, r5
   2595c:	bl	12224 <error@plt>
   25960:	bl	125cc <abort@plt>
   25964:	push	{r3, r4, r5, lr}
   25968:	movw	r3, #21820	; 0x553c
   2596c:	movt	r3, #4
   25970:	mov	r4, r0
   25974:	mov	r2, #5
   25978:	movw	r1, #8688	; 0x21f0
   2597c:	mov	r0, #0
   25980:	movt	r1, #3
   25984:	ldr	r5, [r3]
   25988:	bl	120d4 <dcgettext@plt>
   2598c:	mov	r1, r4
   25990:	mov	r2, r0
   25994:	mov	r0, r5
   25998:	bl	12224 <error@plt>
   2599c:	bl	125cc <abort@plt>
   259a0:	mov	ip, r0
   259a4:	push	{r4, r5, r6, r7, r8}
   259a8:	sub	sp, sp, #20
   259ac:	ldr	r4, [ip, #92]	; 0x5c
   259b0:	add	r0, sp, #4
   259b4:	cmp	r4, #0
   259b8:	stm	r0, {r1, r2, r3}
   259bc:	ldr	r3, [sp, #8]
   259c0:	ldr	r2, [sp, #12]
   259c4:	beq	259d4 <__assert_fail@plt+0x1339c>
   259c8:	ldr	r1, [ip, #32]
   259cc:	cmp	r1, #0
   259d0:	beq	25a34 <__assert_fail@plt+0x133fc>
   259d4:	cmp	r2, #4
   259d8:	bhi	25a6c <__assert_fail@plt+0x13434>
   259dc:	cmp	r2, #2
   259e0:	ldr	r2, [ip, #108]	; 0x6c
   259e4:	add	r2, r2, #1
   259e8:	str	r2, [ip, #108]	; 0x6c
   259ec:	bls	25a5c <__assert_fail@plt+0x13424>
   259f0:	movw	r1, #34079	; 0x851f
   259f4:	movt	r1, #20971	; 0x51eb
   259f8:	asr	r4, r3, #31
   259fc:	mov	r0, #100	; 0x64
   25a00:	smull	r5, r2, r1, r3
   25a04:	rsb	r2, r4, r2, asr #5
   25a08:	str	r2, [ip, #44]	; 0x2c
   25a0c:	mls	r3, r0, r2, r3
   25a10:	str	r3, [ip, #48]	; 0x30
   25a14:	mov	r3, #0
   25a18:	mov	r2, #2
   25a1c:	str	r3, [ip, #52]	; 0x34
   25a20:	str	r3, [ip, #56]	; 0x38
   25a24:	str	r2, [ip, #20]
   25a28:	add	sp, sp, #20
   25a2c:	pop	{r4, r5, r6, r7, r8}
   25a30:	bx	lr
   25a34:	ldrb	r1, [ip, #89]	; 0x59
   25a38:	cmp	r1, #0
   25a3c:	bne	259d4 <__assert_fail@plt+0x1339c>
   25a40:	ldr	r1, [ip, #108]	; 0x6c
   25a44:	cmp	r1, #0
   25a48:	bne	25ad0 <__assert_fail@plt+0x13498>
   25a4c:	cmp	r2, #2
   25a50:	movls	r2, #1
   25a54:	strls	r2, [ip, #108]	; 0x6c
   25a58:	bhi	25ad0 <__assert_fail@plt+0x13498>
   25a5c:	str	r3, [ip, #44]	; 0x2c
   25a60:	mov	r3, #0
   25a64:	str	r3, [ip, #48]	; 0x30
   25a68:	b	25a14 <__assert_fail@plt+0x133dc>
   25a6c:	movw	r0, #34079	; 0x851f
   25a70:	movt	r0, #20971	; 0x51eb
   25a74:	asr	r6, r3, #31
   25a78:	sub	r2, r2, #4
   25a7c:	smull	r5, r1, r0, r3
   25a80:	str	r2, [ip, #32]
   25a84:	movw	r7, #35757	; 0x8bad
   25a88:	movt	r7, #26843	; 0x68db
   25a8c:	mov	r5, #100	; 0x64
   25a90:	add	r4, r4, #1
   25a94:	smull	r8, r7, r7, r3
   25a98:	rsb	r1, r6, r1, asr #5
   25a9c:	str	r4, [ip, #92]	; 0x5c
   25aa0:	smull	r2, r0, r0, r1
   25aa4:	asr	r2, r1, #31
   25aa8:	mls	r3, r5, r1, r3
   25aac:	rsb	r6, r6, r7, asr #12
   25ab0:	str	r6, [ip, #28]
   25ab4:	rsb	r0, r2, r0, asr #5
   25ab8:	mls	r1, r5, r0, r1
   25abc:	str	r3, [ip, #40]	; 0x28
   25ac0:	str	r1, [ip, #36]	; 0x24
   25ac4:	add	sp, sp, #20
   25ac8:	pop	{r4, r5, r6, r7, r8}
   25acc:	bx	lr
   25ad0:	ldm	r0, {r0, r1, r2}
   25ad4:	add	ip, ip, #24
   25ad8:	stm	ip, {r0, r1, r2}
   25adc:	b	25a28 <__assert_fail@plt+0x133f0>
   25ae0:	sub	sp, sp, #16
   25ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   25ae8:	add	sl, sp, #36	; 0x24
   25aec:	ldr	ip, [sp, #64]	; 0x40
   25af0:	mov	r4, #1
   25af4:	ldr	r9, [sp, #60]	; 0x3c
   25af8:	ldr	r8, [r0, #84]	; 0x54
   25afc:	stm	sl, {r1, r2, r3}
   25b00:	mla	r8, r9, ip, r8
   25b04:	ldr	r2, [sp, #44]	; 0x2c
   25b08:	ldr	r7, [sp, #56]	; 0x38
   25b0c:	ldr	fp, [sp, #52]	; 0x34
   25b10:	ldr	r6, [r0, #80]	; 0x50
   25b14:	ldr	r5, [r0, #76]	; 0x4c
   25b18:	str	r8, [r0, #84]	; 0x54
   25b1c:	ldr	r8, [r0, #68]	; 0x44
   25b20:	ldr	r9, [r0, #64]	; 0x40
   25b24:	mla	r6, r7, ip, r6
   25b28:	ldr	r1, [r0, #72]	; 0x48
   25b2c:	mla	r3, r2, ip, r8
   25b30:	ldr	r2, [sp, #40]	; 0x28
   25b34:	mla	r5, fp, ip, r5
   25b38:	ldr	sl, [sp, #48]	; 0x30
   25b3c:	mla	r9, r2, ip, r9
   25b40:	ldr	fp, [r0, #60]	; 0x3c
   25b44:	ldr	r7, [sp, #36]	; 0x24
   25b48:	mla	r1, sl, ip, r1
   25b4c:	str	r6, [r0, #80]	; 0x50
   25b50:	mla	ip, r7, ip, fp
   25b54:	str	r5, [r0, #76]	; 0x4c
   25b58:	strb	r4, [r0, #89]	; 0x59
   25b5c:	str	r9, [r0, #64]	; 0x40
   25b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   25b64:	str	r1, [r0, #72]	; 0x48
   25b68:	str	r3, [r0, #68]	; 0x44
   25b6c:	str	ip, [r0, #60]	; 0x3c
   25b70:	add	sp, sp, #16
   25b74:	bx	lr
   25b78:	push	{r4, r5, lr}
   25b7c:	cmn	r2, #1
   25b80:	sub	sp, sp, #12
   25b84:	mov	r4, r0
   25b88:	str	r2, [sp, #4]
   25b8c:	beq	25bfc <__assert_fail@plt+0x135c4>
   25b90:	ldr	r5, [r1]
   25b94:	ldr	r0, [r1, #4]
   25b98:	ldr	r2, [r4, #4]
   25b9c:	ldr	r3, [r4]
   25ba0:	eor	r0, r0, r2
   25ba4:	ldr	ip, [r4, #8]
   25ba8:	eor	r3, r5, r3
   25bac:	ldr	r2, [r1, #8]
   25bb0:	orr	r0, r0, r3
   25bb4:	ldr	r5, [r1, #12]
   25bb8:	ldr	r3, [r4, #12]
   25bbc:	eor	r2, r2, ip
   25bc0:	orr	r2, r0, r2
   25bc4:	ldr	ip, [r1, #16]
   25bc8:	eor	r3, r5, r3
   25bcc:	ldr	r0, [r4, #16]
   25bd0:	orr	r2, r2, r3
   25bd4:	ldr	r1, [r1, #20]
   25bd8:	ldr	r3, [r4, #20]
   25bdc:	eor	r0, ip, r0
   25be0:	orr	r2, r2, r0
   25be4:	eor	r3, r1, r3
   25be8:	orrs	r3, r2, r3
   25bec:	movne	r0, #0
   25bf0:	moveq	r0, #1
   25bf4:	add	sp, sp, #12
   25bf8:	pop	{r4, r5, pc}
   25bfc:	add	r0, sp, #4
   25c00:	bl	122cc <localtime@plt>
   25c04:	subs	r1, r0, #0
   25c08:	bne	25b90 <__assert_fail@plt+0x13558>
   25c0c:	mov	r0, r1
   25c10:	b	25bf4 <__assert_fail@plt+0x135bc>
   25c14:	push	{r3, r4, r5, lr}
   25c18:	mov	r5, r0
   25c1c:	movw	r0, #11412	; 0x2c94
   25c20:	movt	r0, #3
   25c24:	bl	12260 <getenv@plt>
   25c28:	subs	r4, r0, #0
   25c2c:	popeq	{r3, r4, r5, pc}
   25c30:	bl	1232c <strlen@plt>
   25c34:	add	r2, r0, #1
   25c38:	cmp	r2, #100	; 0x64
   25c3c:	bhi	25c50 <__assert_fail@plt+0x13618>
   25c40:	mov	r0, r5
   25c44:	mov	r1, r4
   25c48:	pop	{r3, r4, r5, lr}
   25c4c:	b	1205c <memcpy@plt>
   25c50:	mov	r0, r4
   25c54:	mov	r1, r2
   25c58:	pop	{r3, r4, r5, lr}
   25c5c:	b	296fc <__assert_fail@plt+0x170c4>
   25c60:	cmp	r3, #2
   25c64:	push	{r4, r5}
   25c68:	ldr	r3, [sp, #8]
   25c6c:	bhi	25cb8 <__assert_fail@plt+0x13680>
   25c70:	cmp	r3, #0
   25c74:	movlt	r3, #100	; 0x64
   25c78:	mullt	r2, r3, r2
   25c7c:	blt	25cc0 <__assert_fail@plt+0x13688>
   25c80:	rsb	r2, r2, r2, lsl #4
   25c84:	cmp	r1, #0
   25c88:	rsbne	r3, r3, #0
   25c8c:	lsl	r2, r2, #2
   25c90:	add	r2, r2, r3
   25c94:	eor	r3, r2, r2, asr #31
   25c98:	sub	r3, r3, r2, asr #31
   25c9c:	cmp	r3, #1440	; 0x5a0
   25ca0:	pop	{r4, r5}
   25ca4:	ldrgt	r3, [r0]
   25ca8:	addgt	r3, r3, #1
   25cac:	strgt	r3, [r0]
   25cb0:	mov	r0, r2
   25cb4:	bx	lr
   25cb8:	cmp	r3, #0
   25cbc:	bge	25c80 <__assert_fail@plt+0x13648>
   25cc0:	movw	r1, #34079	; 0x851f
   25cc4:	movt	r1, #20971	; 0x51eb
   25cc8:	asr	r4, r2, #31
   25ccc:	mov	ip, #100	; 0x64
   25cd0:	smull	r5, r3, r1, r2
   25cd4:	rsb	r3, r4, r3, asr #5
   25cd8:	mls	r2, ip, r3, r2
   25cdc:	rsb	r3, r3, r3, lsl #4
   25ce0:	add	r2, r2, r3, lsl #2
   25ce4:	b	25c94 <__assert_fail@plt+0x1365c>
   25ce8:	push	{r4, r5, r6, lr}
   25cec:	movw	r3, #11416	; 0x2c98
   25cf0:	movw	r4, #8736	; 0x2220
   25cf4:	movt	r3, #3
   25cf8:	movt	r4, #3
   25cfc:	mov	r6, r0
   25d00:	mov	r5, r1
   25d04:	b	25d14 <__assert_fail@plt+0x136dc>
   25d08:	ldr	r3, [r4, #12]!
   25d0c:	cmp	r3, #0
   25d10:	beq	25d30 <__assert_fail@plt+0x136f8>
   25d14:	mov	r1, r3
   25d18:	mov	r0, r5
   25d1c:	bl	11fb4 <strcmp@plt>
   25d20:	cmp	r0, #0
   25d24:	bne	25d08 <__assert_fail@plt+0x136d0>
   25d28:	mov	r0, r4
   25d2c:	pop	{r4, r5, r6, pc}
   25d30:	ldr	r1, [r6, #116]	; 0x74
   25d34:	add	r4, r6, #116	; 0x74
   25d38:	cmp	r1, #0
   25d3c:	bne	25d7c <__assert_fail@plt+0x13744>
   25d40:	movw	r1, #11420	; 0x2c9c
   25d44:	ldr	r4, [pc, #80]	; 25d9c <__assert_fail@plt+0x13764>
   25d48:	movt	r1, #3
   25d4c:	b	25d5c <__assert_fail@plt+0x13724>
   25d50:	ldr	r1, [r4, #12]!
   25d54:	cmp	r1, #0
   25d58:	beq	25d94 <__assert_fail@plt+0x1375c>
   25d5c:	mov	r0, r5
   25d60:	bl	11fb4 <strcmp@plt>
   25d64:	cmp	r0, #0
   25d68:	bne	25d50 <__assert_fail@plt+0x13718>
   25d6c:	b	25d28 <__assert_fail@plt+0x136f0>
   25d70:	ldr	r1, [r4, #12]!
   25d74:	cmp	r1, #0
   25d78:	beq	25d40 <__assert_fail@plt+0x13708>
   25d7c:	mov	r0, r5
   25d80:	bl	11fb4 <strcmp@plt>
   25d84:	cmp	r0, #0
   25d88:	bne	25d70 <__assert_fail@plt+0x13738>
   25d8c:	mov	r0, r4
   25d90:	pop	{r4, r5, r6, pc}
   25d94:	mov	r0, r1
   25d98:	pop	{r4, r5, r6, pc}
   25d9c:	andeq	r2, r3, r0, asr r2
   25da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25da4:	movw	r4, #21904	; 0x5590
   25da8:	movt	r4, #4
   25dac:	sub	sp, sp, #748	; 0x2ec
   25db0:	movw	r9, #8736	; 0x2220
   25db4:	movt	r9, #3
   25db8:	ldr	r1, [r4]
   25dbc:	mov	r2, #0
   25dc0:	movw	r3, #64912	; 0xfd90
   25dc4:	add	ip, sp, #744	; 0x2e8
   25dc8:	movt	r3, #65535	; 0xffff
   25dcc:	add	r8, sp, #160	; 0xa0
   25dd0:	mov	r5, r2
   25dd4:	mov	r7, r9
   25dd8:	mvn	r6, #1
   25ddc:	str	r4, [sp, #36]	; 0x24
   25de0:	add	sl, sp, #120	; 0x78
   25de4:	movw	r4, #39321	; 0x9999
   25de8:	str	r2, [sp, #48]	; 0x30
   25dec:	movt	r4, #6553	; 0x1999
   25df0:	str	r1, [sp, #740]	; 0x2e4
   25df4:	strh	r2, [ip, r3]
   25df8:	str	sl, [sp, #32]
   25dfc:	str	r4, [sp, #72]	; 0x48
   25e00:	str	r0, [sp, #40]	; 0x28
   25e04:	add	r3, r9, r5
   25e08:	add	r3, r3, #948	; 0x3b4
   25e0c:	ldrsb	r4, [r3]
   25e10:	cmn	r4, #93	; 0x5d
   25e14:	beq	25e5c <__assert_fail@plt+0x13824>
   25e18:	cmn	r6, #2
   25e1c:	beq	261fc <__assert_fail@plt+0x13bc4>
   25e20:	cmp	r6, #0
   25e24:	ble	26298 <__assert_fail@plt+0x13c60>
   25e28:	movw	r3, #277	; 0x115
   25e2c:	cmp	r6, r3
   25e30:	movhi	r3, #2
   25e34:	addls	r3, r9, r6
   25e38:	ldrbls	r3, [r3, #1256]	; 0x4e8
   25e3c:	add	r4, r4, r3
   25e40:	cmp	r4, #112	; 0x70
   25e44:	bhi	25e5c <__assert_fail@plt+0x13824>
   25e48:	add	r4, r9, r4
   25e4c:	add	r2, r4, #1536	; 0x600
   25e50:	ldrsb	r2, [r2]
   25e54:	cmp	r2, r3
   25e58:	beq	26114 <__assert_fail@plt+0x13adc>
   25e5c:	add	r3, r9, r5
   25e60:	ldrb	r4, [r3, #1768]	; 0x6e8
   25e64:	cmp	r4, #0
   25e68:	beq	26124 <__assert_fail@plt+0x13aec>
   25e6c:	add	r3, r7, r4
   25e70:	sub	r1, r4, #4
   25e74:	ldrb	fp, [r3, #1884]	; 0x75c
   25e78:	rsb	r2, fp, #1
   25e7c:	rsb	r2, r2, r2, lsl #3
   25e80:	add	r3, r8, r2, lsl #2
   25e84:	ldr	r2, [r8, r2, lsl #2]
   25e88:	ldr	ip, [r3, #4]
   25e8c:	str	r2, [sp, #52]	; 0x34
   25e90:	ldr	r5, [r3, #24]
   25e94:	str	ip, [sp, #56]	; 0x38
   25e98:	ldr	ip, [r3, #8]
   25e9c:	str	ip, [sp, #68]	; 0x44
   25ea0:	ldr	ip, [r3, #12]
   25ea4:	str	ip, [sp, #64]	; 0x40
   25ea8:	ldr	ip, [r3, #16]
   25eac:	str	ip, [sp, #44]	; 0x2c
   25eb0:	ldr	ip, [r3, #20]
   25eb4:	str	ip, [sp, #60]	; 0x3c
   25eb8:	cmp	r1, #87	; 0x57
   25ebc:	ldrls	pc, [pc, r1, lsl #2]
   25ec0:	b	26050 <__assert_fail@plt+0x13a18>
   25ec4:	andeq	r6, r2, r4, asr r5
   25ec8:	andeq	r6, r2, r0, asr r0
   25ecc:	andeq	r6, r2, r0, asr r0
   25ed0:	andeq	r6, r2, ip, lsr #14
   25ed4:	andeq	r6, r2, r0, asr #10
   25ed8:	muleq	r2, r8, r5
   25edc:	andeq	r6, r2, r4, lsl #11
   25ee0:	andeq	r6, r2, r0, ror r5
   25ee4:	andeq	r6, r2, ip, lsr #11
   25ee8:	andeq	r6, r2, r0, asr r0
   25eec:	andeq	r6, r2, r0, asr r0
   25ef0:	andeq	r6, r2, r0, asr r0
   25ef4:	andeq	r6, r2, r0, asr r0
   25ef8:	andeq	r6, r2, r0, asr r0
   25efc:	andeq	r6, r2, r4, asr #20
   25f00:	andeq	r6, r2, r8, lsl sl
   25f04:	andeq	r6, r2, r8, ror #19
   25f08:	andeq	r6, r2, r0, asr r0
   25f0c:	andeq	r6, r2, r0, asr #19
   25f10:	muleq	r2, r4, r9
   25f14:	andeq	r6, r2, r4, ror #18
   25f18:	andeq	r6, r2, r0, asr r0
   25f1c:	andeq	r6, r2, r0, asr r0
   25f20:	andeq	r6, r2, ip, lsr #18
   25f24:	andeq	r6, r2, r8, lsl #18
   25f28:	ldrdeq	r6, [r2], -ip
   25f2c:	andeq	r6, r2, ip, asr #17
   25f30:			; <UNDEFINED> instruction: 0x000268bc
   25f34:			; <UNDEFINED> instruction: 0x000268b0
   25f38:	andeq	r6, r2, r4, lsr #32
   25f3c:	andeq	r6, r2, r4, ror r8
   25f40:	andeq	r6, r2, r0, ror #16
   25f44:	andeq	r6, r2, ip, asr #16
   25f48:	andeq	r6, r2, r4, lsr r8
   25f4c:	andeq	r6, r2, ip, lsl r8
   25f50:	andeq	r6, r2, r4, lsl #16
   25f54:	andeq	r6, r2, ip, ror #15
   25f58:	ldrdeq	r6, [r2], -r4
   25f5c:	andeq	r6, r2, r0, lsr #12
   25f60:	andeq	r6, r2, r8, lsl #12
   25f64:	ldrdeq	r6, [r2], -r8
   25f68:	andeq	r6, r2, r0, asr #11
   25f6c:	andeq	r6, r2, ip, ror #13
   25f70:	ldrdeq	r6, [r2], -r4
   25f74:			; <UNDEFINED> instruction: 0x000266b0
   25f78:	andeq	r6, r2, r0, asr r0
   25f7c:	andeq	r6, r2, r0, lsl #13
   25f80:	andeq	r6, r2, r0, ror r7
   25f84:	ldrdeq	r6, [r2], -r8
   25f88:	ldrdeq	r6, [r2], -r8
   25f8c:	muleq	r2, r8, r7
   25f90:	andeq	r6, r2, r0, lsr #8
   25f94:			; <UNDEFINED> instruction: 0x000267bc
   25f98:			; <UNDEFINED> instruction: 0x000267b0
   25f9c:			; <UNDEFINED> instruction: 0x000264b8
   25fa0:	andeq	r6, r2, r4, ror r6
   25fa4:	andeq	r6, r2, ip, ror #12
   25fa8:	andeq	r6, r2, r4, lsl r5
   25fac:	strdeq	r6, [r2], -ip
   25fb0:	andeq	r6, r2, r4, ror #14
   25fb4:	ldrdeq	r6, [r2], -ip
   25fb8:	andeq	r6, r2, r8, asr r7
   25fbc:	andeq	r6, r2, ip, asr #14
   25fc0:	andeq	r6, r2, r0, ror r4
   25fc4:	andeq	r6, r2, r0, lsl r7
   25fc8:	andeq	r6, r2, r4, asr r6
   25fcc:	muleq	r2, r4, r4
   25fd0:	andeq	r6, r2, r4, asr #8
   25fd4:	andeq	r6, r2, r4, asr #8
   25fd8:	andeq	r6, r2, r8, asr #15
   25fdc:	andeq	r6, r2, r0, asr r0
   25fe0:	andeq	r6, r2, r0, lsr #8
   25fe4:			; <UNDEFINED> instruction: 0x000264b8
   25fe8:	andeq	r6, r2, r4, lsl r5
   25fec:	ldrdeq	r6, [r2], -ip
   25ff0:	andeq	r6, r2, r0, ror r4
   25ff4:	muleq	r2, r4, r4
   25ff8:	strdeq	r6, [r2], -ip
   25ffc:	andeq	r6, r2, r0, asr r0
   26000:	andeq	r6, r2, r0, asr r0
   26004:	andeq	r6, r2, r0, asr r0
   26008:	andeq	r6, r2, r0, lsl #10
   2600c:	andeq	r6, r2, r0, asr r0
   26010:	andeq	r6, r2, r0, lsl #10
   26014:	andeq	r6, r2, ip, lsl r7
   26018:	andeq	r6, r2, r8, asr #7
   2601c:	andeq	r6, r2, r0, ror #12
   26020:	andeq	r6, r2, r4, lsr #15
   26024:	add	r3, r8, #12
   26028:	mov	r1, #420	; 0x1a4
   2602c:	ldr	ip, [sp, #40]	; 0x28
   26030:	mov	r2, #1
   26034:	str	r1, [ip, #16]
   26038:	str	r2, [sp, #16]
   2603c:	ldm	r3, {r0, r1, r2, r3}
   26040:	stm	sp, {r0, r1, r2, r3}
   26044:	mov	r0, ip
   26048:	ldm	r8, {r1, r2, r3}
   2604c:	bl	25ae0 <__assert_fail@plt+0x134a8>
   26050:	add	r4, r9, r4
   26054:	sxth	fp, fp
   26058:	ldrb	r1, [r4, #1976]	; 0x7b8
   2605c:	ldr	r4, [sp, #32]
   26060:	sub	r1, r1, #28
   26064:	add	r2, r9, r1
   26068:	sub	ip, r4, fp, lsl #1
   2606c:	rsb	fp, fp, fp, lsl #3
   26070:	ldr	r4, [sp, #52]	; 0x34
   26074:	add	r2, r2, #2064	; 0x810
   26078:	sub	r3, r8, fp, lsl #2
   2607c:	ldrsh	r0, [ip]
   26080:	add	r2, r2, #4
   26084:	add	r8, r3, #28
   26088:	str	r4, [r3, #28]
   2608c:	ldr	r4, [sp, #56]	; 0x38
   26090:	ldrsb	r2, [r2]
   26094:	str	r5, [r3, #52]	; 0x34
   26098:	str	r4, [r3, #32]
   2609c:	add	r2, r2, r0
   260a0:	ldr	r4, [sp, #68]	; 0x44
   260a4:	cmp	r2, #112	; 0x70
   260a8:	str	r4, [r3, #36]	; 0x24
   260ac:	ldr	r4, [sp, #64]	; 0x40
   260b0:	str	r4, [r3, #40]	; 0x28
   260b4:	ldr	r4, [sp, #44]	; 0x2c
   260b8:	str	r4, [r3, #44]	; 0x2c
   260bc:	ldr	r4, [sp, #60]	; 0x3c
   260c0:	str	r4, [r3, #48]	; 0x30
   260c4:	bhi	260e0 <__assert_fail@plt+0x13aa8>
   260c8:	add	r2, r7, r2
   260cc:	add	r3, r2, #1536	; 0x600
   260d0:	ldrsb	r3, [r3]
   260d4:	cmp	r3, r0
   260d8:	ldrbeq	r5, [r2, #1652]	; 0x674
   260dc:	beq	260ec <__assert_fail@plt+0x13ab4>
   260e0:	add	r1, r9, r1
   260e4:	add	r1, r1, #2096	; 0x830
   260e8:	ldrsb	r5, [r1]
   260ec:	add	r4, ip, #2
   260f0:	add	r3, sl, #38	; 0x26
   260f4:	cmp	r4, r3
   260f8:	str	r4, [sp, #32]
   260fc:	strh	r5, [ip, #2]
   26100:	bcs	26b88 <__assert_fail@plt+0x14550>
   26104:	cmp	r5, #12
   26108:	bne	25e04 <__assert_fail@plt+0x137cc>
   2610c:	mov	r0, #0
   26110:	b	261e0 <__assert_fail@plt+0x13ba8>
   26114:	ldrb	r4, [r4, #1652]	; 0x674
   26118:	cmp	r4, #0
   2611c:	str	r4, [sp, #44]	; 0x2c
   26120:	bne	2636c <__assert_fail@plt+0x13d34>
   26124:	ldr	ip, [sp, #48]	; 0x30
   26128:	cmp	ip, #3
   2612c:	beq	261cc <__assert_fail@plt+0x13b94>
   26130:	ldr	r3, [sp, #32]
   26134:	b	2614c <__assert_fail@plt+0x13b14>
   26138:	cmp	r3, sl
   2613c:	beq	261dc <__assert_fail@plt+0x13ba4>
   26140:	ldrsh	r5, [ip, #-2]
   26144:	sub	r8, r8, #28
   26148:	sub	r3, r3, #2
   2614c:	add	r5, r9, r5
   26150:	mov	ip, r3
   26154:	add	r5, r5, #948	; 0x3b4
   26158:	ldrsb	r2, [r5]
   2615c:	cmn	r2, #93	; 0x5d
   26160:	beq	26138 <__assert_fail@plt+0x13b00>
   26164:	add	r2, r2, #1
   26168:	cmp	r2, #112	; 0x70
   2616c:	bhi	26138 <__assert_fail@plt+0x13b00>
   26170:	add	r2, r7, r2
   26174:	ldrb	r1, [r2, #1536]	; 0x600
   26178:	cmp	r1, #1
   2617c:	bne	26138 <__assert_fail@plt+0x13b00>
   26180:	ldrb	r5, [r2, #1652]	; 0x674
   26184:	cmp	r5, #0
   26188:	beq	26138 <__assert_fail@plt+0x13b00>
   2618c:	ldr	r4, [sp, #76]	; 0x4c
   26190:	add	fp, sp, #92	; 0x5c
   26194:	str	r4, [sp, #96]	; 0x60
   26198:	ldr	r4, [sp, #80]	; 0x50
   2619c:	str	r4, [sp, #100]	; 0x64
   261a0:	add	r4, r8, #28
   261a4:	ldm	fp!, {r0, r1, r2, r3}
   261a8:	mov	r8, r4
   261ac:	mov	r4, #3
   261b0:	str	r4, [sp, #48]	; 0x30
   261b4:	mov	r4, r8
   261b8:	stmia	r4!, {r0, r1, r2, r3}
   261bc:	ldm	fp, {r0, r1, r2}
   261c0:	str	r4, [sp, #32]
   261c4:	stm	r4, {r0, r1, r2}
   261c8:	b	260ec <__assert_fail@plt+0x13ab4>
   261cc:	cmp	r6, #0
   261d0:	mvngt	r6, #1
   261d4:	bgt	26130 <__assert_fail@plt+0x13af8>
   261d8:	bne	26130 <__assert_fail@plt+0x13af8>
   261dc:	mov	r0, #1
   261e0:	ldr	ip, [sp, #36]	; 0x24
   261e4:	ldr	r2, [sp, #740]	; 0x2e4
   261e8:	ldr	r3, [ip]
   261ec:	cmp	r2, r3
   261f0:	bne	26df0 <__assert_fail@plt+0x147b8>
   261f4:	add	sp, sp, #748	; 0x2ec
   261f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261fc:	ldr	ip, [sp, #40]	; 0x28
   26200:	ldr	r1, [ip]
   26204:	ldrb	r2, [r1]
   26208:	sub	r3, r2, #9
   2620c:	uxtb	r3, r3
   26210:	cmp	r2, #32
   26214:	cmpne	r3, #4
   26218:	bls	262a4 <__assert_fail@plt+0x13c6c>
   2621c:	subs	r6, r2, #45	; 0x2d
   26220:	sub	r0, r2, #48	; 0x30
   26224:	rsbs	r3, r6, #0
   26228:	adcs	r3, r3, r6
   2622c:	cmp	r0, #9
   26230:	movhi	r6, r3
   26234:	orrls	r6, r3, #1
   26238:	cmp	r6, #0
   2623c:	bne	262b8 <__assert_fail@plt+0x13c80>
   26240:	cmp	r2, #43	; 0x2b
   26244:	beq	263b8 <__assert_fail@plt+0x13d80>
   26248:	bic	r3, r2, #32
   2624c:	sub	r3, r3, #65	; 0x41
   26250:	cmp	r3, #25
   26254:	bls	26c14 <__assert_fail@plt+0x145dc>
   26258:	cmp	r2, #40	; 0x28
   2625c:	beq	26284 <__assert_fail@plt+0x13c4c>
   26260:	b	26c00 <__assert_fail@plt+0x145c8>
   26264:	cmp	r2, #40	; 0x28
   26268:	addeq	r6, r6, #1
   2626c:	beq	26278 <__assert_fail@plt+0x13c40>
   26270:	cmp	r2, #41	; 0x29
   26274:	subeq	r6, r6, #1
   26278:	cmp	r6, #0
   2627c:	beq	263c0 <__assert_fail@plt+0x13d88>
   26280:	mov	r1, r3
   26284:	add	r3, r1, #1
   26288:	str	r3, [ip]
   2628c:	ldrb	r2, [r3, #-1]
   26290:	cmp	r2, #0
   26294:	bne	26264 <__assert_fail@plt+0x13c2c>
   26298:	mov	r6, #0
   2629c:	mov	r3, r6
   262a0:	b	25e3c <__assert_fail@plt+0x13804>
   262a4:	add	r3, r1, #1
   262a8:	str	r3, [ip]
   262ac:	ldrb	r2, [r1, #1]
   262b0:	mov	r1, r3
   262b4:	b	26208 <__assert_fail@plt+0x13bd0>
   262b8:	cmp	r2, #43	; 0x2b
   262bc:	movne	r2, r3
   262c0:	orreq	r2, r3, #1
   262c4:	cmp	r2, #0
   262c8:	beq	26bc0 <__assert_fail@plt+0x14588>
   262cc:	cmp	r3, #0
   262d0:	mvnne	fp, #0
   262d4:	moveq	fp, #1
   262d8:	add	r3, r1, #1
   262dc:	str	r3, [ip]
   262e0:	ldrb	r2, [r1, #1]
   262e4:	sub	r1, r2, #9
   262e8:	cmp	r2, #32
   262ec:	cmpne	r1, #4
   262f0:	bls	26364 <__assert_fail@plt+0x13d2c>
   262f4:	sub	r0, r2, #48	; 0x30
   262f8:	cmp	r0, #9
   262fc:	bhi	262b0 <__assert_fail@plt+0x13c78>
   26300:	ldrb	ip, [r3, #1]
   26304:	add	r6, r3, #1
   26308:	mov	r1, r3
   2630c:	sub	r2, ip, #48	; 0x30
   26310:	cmp	r2, #9
   26314:	bhi	26a70 <__assert_fail@plt+0x14438>
   26318:	add	r3, r1, #2
   2631c:	str	r1, [sp, #44]	; 0x2c
   26320:	ldr	r1, [sp, #72]	; 0x48
   26324:	b	26344 <__assert_fail@plt+0x13d0c>
   26328:	mov	r6, r3
   2632c:	ldrb	ip, [r3], #1
   26330:	sub	r2, ip, #48	; 0x30
   26334:	cmp	r2, #9
   26338:	bhi	26a6c <__assert_fail@plt+0x14434>
   2633c:	cmp	r0, r1
   26340:	bhi	2635c <__assert_fail@plt+0x13d24>
   26344:	add	r0, r0, r0, lsl #2
   26348:	lsl	r2, r0, #1
   2634c:	add	r0, ip, r2
   26350:	sub	r0, r0, #48	; 0x30
   26354:	cmp	r0, r2
   26358:	bcs	26328 <__assert_fail@plt+0x13cf0>
   2635c:	mov	r6, #63	; 0x3f
   26360:	b	25e28 <__assert_fail@plt+0x137f0>
   26364:	mov	r1, r3
   26368:	b	262d8 <__assert_fail@plt+0x13ca0>
   2636c:	ldr	r4, [sp, #48]	; 0x30
   26370:	add	fp, sp, #92	; 0x5c
   26374:	ldr	ip, [sp, #76]	; 0x4c
   26378:	add	r8, r8, #28
   2637c:	cmp	r4, #0
   26380:	ldr	r5, [sp, #44]	; 0x2c
   26384:	subne	r4, r4, #1
   26388:	strne	r4, [sp, #48]	; 0x30
   2638c:	ldr	r4, [sp, #80]	; 0x50
   26390:	mvn	r6, #1
   26394:	str	ip, [sp, #96]	; 0x60
   26398:	ldr	ip, [sp, #32]
   2639c:	str	r4, [sp, #100]	; 0x64
   263a0:	mov	r4, r8
   263a4:	ldm	fp!, {r0, r1, r2, r3}
   263a8:	stmia	r4!, {r0, r1, r2, r3}
   263ac:	ldm	fp, {r0, r1, r2}
   263b0:	stm	r4, {r0, r1, r2}
   263b4:	b	260ec <__assert_fail@plt+0x13ab4>
   263b8:	mov	fp, #1
   263bc:	b	262d8 <__assert_fail@plt+0x13ca0>
   263c0:	ldrb	r2, [r1, #1]
   263c4:	b	262b0 <__assert_fail@plt+0x13c78>
   263c8:	sub	r3, r8, #28
   263cc:	ldr	r0, [sp, #40]	; 0x28
   263d0:	ldm	r3, {r1, r2, r3}
   263d4:	bl	259a0 <__assert_fail@plt+0x13368>
   263d8:	add	r3, r8, #12
   263dc:	mov	r2, #1
   263e0:	str	r2, [sp, #16]
   263e4:	ldm	r3, {r0, r1, r2, r3}
   263e8:	stm	sp, {r0, r1, r2, r3}
   263ec:	ldr	r0, [sp, #40]	; 0x28
   263f0:	ldm	r8, {r1, r2, r3}
   263f4:	bl	25ae0 <__assert_fail@plt+0x134a8>
   263f8:	b	26050 <__assert_fail@plt+0x13a18>
   263fc:	ldr	ip, [r8]
   26400:	mov	r5, #0
   26404:	str	r5, [sp, #60]	; 0x3c
   26408:	str	r5, [sp, #44]	; 0x2c
   2640c:	str	ip, [sp, #68]	; 0x44
   26410:	str	r5, [sp, #64]	; 0x40
   26414:	str	r5, [sp, #56]	; 0x38
   26418:	str	r5, [sp, #52]	; 0x34
   2641c:	b	26050 <__assert_fail@plt+0x13a18>
   26420:	ldr	ip, [r8, #-24]	; 0xffffffe8
   26424:	mov	r5, #0
   26428:	str	ip, [sp, #52]	; 0x34
   2642c:	str	r5, [sp, #60]	; 0x3c
   26430:	str	r5, [sp, #44]	; 0x2c
   26434:	str	r5, [sp, #64]	; 0x40
   26438:	str	r5, [sp, #68]	; 0x44
   2643c:	str	r5, [sp, #56]	; 0x38
   26440:	b	26050 <__assert_fail@plt+0x13a18>
   26444:	mov	ip, #0
   26448:	str	ip, [sp, #44]	; 0x2c
   2644c:	ldr	ip, [r8, #-28]	; 0xffffffe4
   26450:	ldr	r5, [r8, #-24]	; 0xffffffe8
   26454:	str	ip, [sp, #60]	; 0x3c
   26458:	mov	ip, #0
   2645c:	str	ip, [sp, #64]	; 0x40
   26460:	str	ip, [sp, #68]	; 0x44
   26464:	str	ip, [sp, #56]	; 0x38
   26468:	str	ip, [sp, #52]	; 0x34
   2646c:	b	26050 <__assert_fail@plt+0x13a18>
   26470:	ldr	ip, [r8, #-24]	; 0xffffffe8
   26474:	mov	r5, #0
   26478:	str	ip, [sp, #44]	; 0x2c
   2647c:	str	r5, [sp, #60]	; 0x3c
   26480:	str	r5, [sp, #64]	; 0x40
   26484:	str	r5, [sp, #68]	; 0x44
   26488:	str	r5, [sp, #56]	; 0x38
   2648c:	str	r5, [sp, #52]	; 0x34
   26490:	b	26050 <__assert_fail@plt+0x13a18>
   26494:	ldr	ip, [r8, #-24]	; 0xffffffe8
   26498:	mov	r5, #0
   2649c:	str	ip, [sp, #60]	; 0x3c
   264a0:	str	r5, [sp, #44]	; 0x2c
   264a4:	str	r5, [sp, #64]	; 0x40
   264a8:	str	r5, [sp, #68]	; 0x44
   264ac:	str	r5, [sp, #56]	; 0x38
   264b0:	str	r5, [sp, #52]	; 0x34
   264b4:	b	26050 <__assert_fail@plt+0x13a18>
   264b8:	ldr	ip, [r8, #-24]	; 0xffffffe8
   264bc:	mov	r5, #0
   264c0:	str	ip, [sp, #56]	; 0x38
   264c4:	str	r5, [sp, #60]	; 0x3c
   264c8:	str	r5, [sp, #44]	; 0x2c
   264cc:	str	r5, [sp, #64]	; 0x40
   264d0:	str	r5, [sp, #68]	; 0x44
   264d4:	str	r5, [sp, #52]	; 0x34
   264d8:	b	26050 <__assert_fail@plt+0x13a18>
   264dc:	ldr	ip, [r8, #-24]	; 0xffffffe8
   264e0:	mov	r5, #0
   264e4:	str	ip, [sp, #64]	; 0x40
   264e8:	str	r5, [sp, #60]	; 0x3c
   264ec:	str	r5, [sp, #44]	; 0x2c
   264f0:	str	r5, [sp, #68]	; 0x44
   264f4:	str	r5, [sp, #56]	; 0x38
   264f8:	str	r5, [sp, #52]	; 0x34
   264fc:	b	26050 <__assert_fail@plt+0x13a18>
   26500:	ldr	ip, [r8, #4]
   26504:	str	ip, [sp, #52]	; 0x34
   26508:	mov	ip, #0
   2650c:	str	ip, [sp, #56]	; 0x38
   26510:	b	26050 <__assert_fail@plt+0x13a18>
   26514:	ldr	r3, [r8, #-24]	; 0xffffffe8
   26518:	ldr	r2, [r8]
   2651c:	mov	r5, #0
   26520:	str	r5, [sp, #60]	; 0x3c
   26524:	str	r5, [sp, #44]	; 0x2c
   26528:	mul	r2, r2, r3
   2652c:	str	r5, [sp, #64]	; 0x40
   26530:	str	r5, [sp, #56]	; 0x38
   26534:	str	r5, [sp, #52]	; 0x34
   26538:	str	r2, [sp, #68]	; 0x44
   2653c:	b	26050 <__assert_fail@plt+0x13a18>
   26540:	ldr	ip, [sp, #40]	; 0x28
   26544:	ldr	r3, [ip, #108]	; 0x6c
   26548:	add	r3, r3, #1
   2654c:	str	r3, [ip, #108]	; 0x6c
   26550:	b	26050 <__assert_fail@plt+0x13a18>
   26554:	ldr	ip, [sp, #40]	; 0x28
   26558:	mov	r2, #1
   2655c:	ldm	r8, {r0, r1}
   26560:	add	r3, ip, #52	; 0x34
   26564:	stm	r3, {r0, r1}
   26568:	strb	r2, [ip, #88]	; 0x58
   2656c:	b	26050 <__assert_fail@plt+0x13a18>
   26570:	ldr	ip, [sp, #40]	; 0x28
   26574:	ldr	r3, [ip, #92]	; 0x5c
   26578:	add	r3, r3, #1
   2657c:	str	r3, [ip, #92]	; 0x5c
   26580:	b	26050 <__assert_fail@plt+0x13a18>
   26584:	ldr	ip, [sp, #40]	; 0x28
   26588:	ldr	r3, [ip, #112]	; 0x70
   2658c:	add	r3, r3, #1
   26590:	str	r3, [ip, #112]	; 0x70
   26594:	b	26050 <__assert_fail@plt+0x13a18>
   26598:	ldr	ip, [sp, #40]	; 0x28
   2659c:	ldr	r3, [ip, #100]	; 0x64
   265a0:	add	r3, r3, #1
   265a4:	str	r3, [ip, #100]	; 0x64
   265a8:	b	26050 <__assert_fail@plt+0x13a18>
   265ac:	ldr	ip, [sp, #40]	; 0x28
   265b0:	ldr	r3, [ip, #96]	; 0x60
   265b4:	add	r3, r3, #1
   265b8:	str	r3, [ip, #96]	; 0x60
   265bc:	b	26050 <__assert_fail@plt+0x13a18>
   265c0:	ldr	r3, [r8, #-28]	; 0xffffffe4
   265c4:	ldr	ip, [sp, #40]	; 0x28
   265c8:	str	r3, [ip, #36]	; 0x24
   265cc:	ldr	r3, [r8, #4]
   265d0:	str	r3, [ip, #40]	; 0x28
   265d4:	b	26050 <__assert_fail@plt+0x13a18>
   265d8:	ldr	r3, [r8, #-56]	; 0xffffffc8
   265dc:	ldr	ip, [sp, #40]	; 0x28
   265e0:	str	r3, [ip, #36]	; 0x24
   265e4:	ldr	r3, [r8, #-24]	; 0xffffffe8
   265e8:	rsb	r3, r3, #0
   265ec:	str	r3, [ip, #40]	; 0x28
   265f0:	ldr	r2, [r8, #8]
   265f4:	ldr	r3, [r8, #4]
   265f8:	str	r2, [ip, #32]
   265fc:	rsb	r3, r3, #0
   26600:	str	r3, [ip, #28]
   26604:	b	26050 <__assert_fail@plt+0x13a18>
   26608:	ldr	r3, [r8, #-52]	; 0xffffffcc
   2660c:	ldr	ip, [sp, #40]	; 0x28
   26610:	str	r3, [ip, #40]	; 0x28
   26614:	ldr	r3, [r8, #-28]	; 0xffffffe4
   26618:	str	r3, [ip, #36]	; 0x24
   2661c:	b	265f0 <__assert_fail@plt+0x13fb8>
   26620:	ldr	r3, [r8, #-104]	; 0xffffff98
   26624:	cmp	r3, #3
   26628:	bls	26bb8 <__assert_fail@plt+0x14580>
   2662c:	sub	r2, r8, #112	; 0x70
   26630:	ldr	ip, [sp, #40]	; 0x28
   26634:	ldm	r2, {r0, r1, r2}
   26638:	add	r3, ip, #24
   2663c:	stm	r3, {r0, r1, r2}
   26640:	ldr	r3, [r8, #-52]	; 0xffffffcc
   26644:	str	r3, [ip, #36]	; 0x24
   26648:	ldr	r3, [r8, #4]
   2664c:	str	r3, [ip, #40]	; 0x28
   26650:	b	26050 <__assert_fail@plt+0x13a18>
   26654:	mov	r5, #0
   26658:	ldr	ip, [r8, #-28]	; 0xffffffe4
   2665c:	b	2649c <__assert_fail@plt+0x13e64>
   26660:	mvn	ip, #0
   26664:	str	ip, [sp, #52]	; 0x34
   26668:	b	26050 <__assert_fail@plt+0x13a18>
   2666c:	ldr	r3, [r8, #-28]	; 0xffffffe4
   26670:	b	26518 <__assert_fail@plt+0x13ee0>
   26674:	mov	r5, #0
   26678:	mov	ip, #1
   2667c:	b	264c0 <__assert_fail@plt+0x13e88>
   26680:	sub	r2, r8, #56	; 0x38
   26684:	ldr	ip, [sp, #40]	; 0x28
   26688:	ldm	r2, {r0, r1, r2}
   2668c:	add	r3, ip, #24
   26690:	stm	r3, {r0, r1, r2}
   26694:	ldr	r3, [r8, #-24]	; 0xffffffe8
   26698:	rsb	r3, r3, #0
   2669c:	str	r3, [ip, #36]	; 0x24
   266a0:	ldr	r3, [r8, #4]
   266a4:	rsb	r3, r3, #0
   266a8:	str	r3, [ip, #40]	; 0x28
   266ac:	b	26050 <__assert_fail@plt+0x13a18>
   266b0:	ldr	r2, [r8, #-52]	; 0xffffffcc
   266b4:	ldr	ip, [sp, #40]	; 0x28
   266b8:	add	r3, ip, #24
   266bc:	str	r2, [ip, #40]	; 0x28
   266c0:	ldr	r2, [r8, #-28]	; 0xffffffe4
   266c4:	str	r2, [ip, #36]	; 0x24
   266c8:	ldm	r8, {r0, r1, r2}
   266cc:	stm	r3, {r0, r1, r2}
   266d0:	b	26050 <__assert_fail@plt+0x13a18>
   266d4:	ldr	r3, [r8, #-24]	; 0xffffffe8
   266d8:	ldr	ip, [sp, #40]	; 0x28
   266dc:	str	r3, [ip, #40]	; 0x28
   266e0:	ldr	r3, [r8]
   266e4:	str	r3, [ip, #36]	; 0x24
   266e8:	b	26050 <__assert_fail@plt+0x13a18>
   266ec:	ldr	r2, [r8, #-84]	; 0xffffffac
   266f0:	ldr	ip, [sp, #40]	; 0x28
   266f4:	add	r3, ip, #24
   266f8:	str	r2, [ip, #36]	; 0x24
   266fc:	ldr	r2, [r8, #-52]	; 0xffffffcc
   26700:	str	r2, [ip, #40]	; 0x28
   26704:	ldm	r8, {r0, r1, r2}
   26708:	stm	r3, {r0, r1, r2}
   2670c:	b	26050 <__assert_fail@plt+0x13a18>
   26710:	mov	r5, #0
   26714:	mov	ip, #1
   26718:	b	26478 <__assert_fail@plt+0x13e40>
   2671c:	ldr	r0, [sp, #40]	; 0x28
   26720:	ldm	r8, {r1, r2, r3}
   26724:	bl	259a0 <__assert_fail@plt+0x13368>
   26728:	b	26050 <__assert_fail@plt+0x13a18>
   2672c:	ldr	ip, [sp, #40]	; 0x28
   26730:	ldr	r2, [ip, #108]	; 0x6c
   26734:	ldr	r3, [ip, #92]	; 0x5c
   26738:	add	r2, r2, #1
   2673c:	str	r2, [ip, #108]	; 0x6c
   26740:	add	r3, r3, #1
   26744:	str	r3, [ip, #92]	; 0x5c
   26748:	b	26050 <__assert_fail@plt+0x13a18>
   2674c:	mov	r5, #0
   26750:	ldr	ip, [r8, #-28]	; 0xffffffe4
   26754:	b	26478 <__assert_fail@plt+0x13e40>
   26758:	mov	r5, #0
   2675c:	mov	ip, #1
   26760:	b	264e4 <__assert_fail@plt+0x13eac>
   26764:	mov	r5, #0
   26768:	ldr	ip, [r8, #-28]	; 0xffffffe4
   2676c:	b	264e4 <__assert_fail@plt+0x13eac>
   26770:	mov	r3, r8
   26774:	sub	ip, r8, #28
   26778:	ldr	r2, [r3], #-16
   2677c:	str	r2, [sp, #16]
   26780:	ldm	r3, {r0, r1, r2, r3}
   26784:	stm	sp, {r0, r1, r2, r3}
   26788:	ldr	r0, [sp, #40]	; 0x28
   2678c:	ldm	ip, {r1, r2, r3}
   26790:	bl	25ae0 <__assert_fail@plt+0x134a8>
   26794:	b	26050 <__assert_fail@plt+0x13a18>
   26798:	mov	r5, #0
   2679c:	ldr	ip, [r8, #-28]	; 0xffffffe4
   267a0:	b	26428 <__assert_fail@plt+0x13df0>
   267a4:	ldr	ip, [r8, #4]
   267a8:	str	ip, [sp, #52]	; 0x34
   267ac:	b	26050 <__assert_fail@plt+0x13a18>
   267b0:	mov	r5, #0
   267b4:	ldr	ip, [r8, #-28]	; 0xffffffe4
   267b8:	b	264c0 <__assert_fail@plt+0x13e88>
   267bc:	mov	r5, #0
   267c0:	mov	ip, #1
   267c4:	b	26428 <__assert_fail@plt+0x13df0>
   267c8:	mov	r5, #0
   267cc:	mov	ip, #1
   267d0:	b	2649c <__assert_fail@plt+0x13e64>
   267d4:	ldr	r3, [r8, #-52]	; 0xffffffcc
   267d8:	ldr	ip, [sp, #40]	; 0x28
   267dc:	str	r3, [ip, #36]	; 0x24
   267e0:	ldr	r3, [r8, #4]
   267e4:	str	r3, [ip, #40]	; 0x28
   267e8:	b	26050 <__assert_fail@plt+0x13a18>
   267ec:	ldr	r3, [r8, #-24]	; 0xffffffe8
   267f0:	ldr	ip, [sp, #40]	; 0x28
   267f4:	str	r3, [ip, #4]
   267f8:	ldr	r3, [r8]
   267fc:	str	r3, [ip, #8]
   26800:	b	26050 <__assert_fail@plt+0x13a18>
   26804:	ldr	r3, [r8, #-28]	; 0xffffffe4
   26808:	ldr	ip, [sp, #40]	; 0x28
   2680c:	str	r3, [ip, #4]
   26810:	ldr	r3, [r8]
   26814:	str	r3, [ip, #8]
   26818:	b	26050 <__assert_fail@plt+0x13a18>
   2681c:	ldr	ip, [sp, #40]	; 0x28
   26820:	mov	r3, #0
   26824:	str	r3, [ip, #4]
   26828:	ldr	r3, [r8, #-28]	; 0xffffffe4
   2682c:	str	r3, [ip, #8]
   26830:	b	26050 <__assert_fail@plt+0x13a18>
   26834:	ldr	ip, [sp, #40]	; 0x28
   26838:	mov	r3, #0
   2683c:	str	r3, [ip, #4]
   26840:	ldr	r3, [r8]
   26844:	str	r3, [ip, #8]
   26848:	b	26050 <__assert_fail@plt+0x13a18>
   2684c:	ldr	ip, [sp, #40]	; 0x28
   26850:	ldr	r3, [r8, #-28]	; 0xffffffe4
   26854:	add	r3, r3, #60	; 0x3c
   26858:	str	r3, [ip, #16]
   2685c:	b	26050 <__assert_fail@plt+0x13a18>
   26860:	ldr	ip, [sp, #40]	; 0x28
   26864:	ldr	r3, [r8]
   26868:	add	r3, r3, #60	; 0x3c
   2686c:	str	r3, [ip, #16]
   26870:	b	26050 <__assert_fail@plt+0x13a18>
   26874:	ldr	ip, [sp, #40]	; 0x28
   26878:	ldr	lr, [r8, #-56]	; 0xffffffc8
   2687c:	add	r0, ip, #112	; 0x70
   26880:	ldr	ip, [r8]
   26884:	ldrb	r1, [r8, #-28]	; 0xffffffe4
   26888:	ldr	r2, [r8, #-24]	; 0xffffffe8
   2688c:	ldr	r3, [r8, #-20]	; 0xffffffec
   26890:	str	ip, [sp]
   26894:	str	lr, [sp, #84]	; 0x54
   26898:	bl	25c60 <__assert_fail@plt+0x13628>
   2689c:	ldr	ip, [sp, #84]	; 0x54
   268a0:	add	r0, ip, r0
   268a4:	ldr	ip, [sp, #40]	; 0x28
   268a8:	str	r0, [ip, #16]
   268ac:	b	26050 <__assert_fail@plt+0x13a18>
   268b0:	ldr	r1, [r8, #-28]	; 0xffffffe4
   268b4:	add	r3, r8, #12
   268b8:	b	2602c <__assert_fail@plt+0x139f4>
   268bc:	ldr	ip, [sp, #40]	; 0x28
   268c0:	mov	r3, #420	; 0x1a4
   268c4:	str	r3, [ip, #16]
   268c8:	b	26050 <__assert_fail@plt+0x13a18>
   268cc:	ldr	r3, [r8]
   268d0:	ldr	ip, [sp, #40]	; 0x28
   268d4:	str	r3, [ip, #16]
   268d8:	b	26050 <__assert_fail@plt+0x13a18>
   268dc:	ldr	ip, [sp, #40]	; 0x28
   268e0:	mov	r3, #1
   268e4:	str	r3, [ip, #12]
   268e8:	ldr	r2, [r8, #-28]	; 0xffffffe4
   268ec:	ldr	r3, [ip, #104]	; 0x68
   268f0:	cmp	r2, #0
   268f4:	movle	r2, #1
   268f8:	movgt	r2, #2
   268fc:	add	r3, r2, r3
   26900:	str	r3, [ip, #104]	; 0x68
   26904:	b	26050 <__assert_fail@plt+0x13a18>
   26908:	ldr	ip, [sp, #40]	; 0x28
   2690c:	ldr	r3, [r8]
   26910:	ldr	r2, [ip, #104]	; 0x68
   26914:	str	r3, [ip, #12]
   26918:	cmp	r3, #0
   2691c:	movle	r3, r2
   26920:	addgt	r3, r2, #1
   26924:	str	r3, [ip, #104]	; 0x68
   26928:	b	26050 <__assert_fail@plt+0x13a18>
   2692c:	ldr	ip, [sp, #40]	; 0x28
   26930:	ldrb	r1, [r8, #-28]	; 0xffffffe4
   26934:	ldr	r2, [r8, #-24]	; 0xffffffe8
   26938:	ldr	r3, [ip, #112]	; 0x70
   2693c:	mov	r0, ip
   26940:	add	r3, r3, #1
   26944:	str	r3, [r0, #112]!	; 0x70
   26948:	ldr	ip, [r8]
   2694c:	ldr	r3, [r8, #-20]	; 0xffffffec
   26950:	str	ip, [sp]
   26954:	bl	25c60 <__assert_fail@plt+0x13628>
   26958:	ldr	ip, [sp, #40]	; 0x28
   2695c:	str	r0, [ip, #16]
   26960:	b	26050 <__assert_fail@plt+0x13a18>
   26964:	ldr	r0, [r8, #-28]	; 0xffffffe4
   26968:	ldr	r2, [r8, #-24]	; 0xffffffe8
   2696c:	ldr	r1, [r8, #-136]	; 0xffffff78
   26970:	ldr	r3, [r8, #-80]	; 0xffffffb0
   26974:	ldr	ip, [sp, #40]	; 0x28
   26978:	str	r0, [ip, #52]	; 0x34
   2697c:	mov	r0, #2
   26980:	str	r3, [ip, #48]	; 0x30
   26984:	str	r1, [ip, #44]	; 0x2c
   26988:	str	r2, [ip, #56]	; 0x38
   2698c:	str	r0, [ip, #20]
   26990:	b	26050 <__assert_fail@plt+0x13a18>
   26994:	ldr	r0, [r8, #-24]	; 0xffffffe8
   26998:	mov	r3, #0
   2699c:	ldr	r1, [r8, #-80]	; 0xffffffb0
   269a0:	mov	r2, #2
   269a4:	ldr	ip, [sp, #40]	; 0x28
   269a8:	str	r3, [ip, #52]	; 0x34
   269ac:	str	r0, [ip, #48]	; 0x30
   269b0:	str	r1, [ip, #44]	; 0x2c
   269b4:	str	r3, [ip, #56]	; 0x38
   269b8:	str	r2, [ip, #20]
   269bc:	b	26050 <__assert_fail@plt+0x13a18>
   269c0:	ldr	r1, [r8, #-24]	; 0xffffffe8
   269c4:	mov	r3, #0
   269c8:	ldr	ip, [sp, #40]	; 0x28
   269cc:	mov	r2, #2
   269d0:	str	r3, [ip, #48]	; 0x30
   269d4:	str	r3, [ip, #52]	; 0x34
   269d8:	str	r1, [ip, #44]	; 0x2c
   269dc:	str	r3, [ip, #56]	; 0x38
   269e0:	str	r2, [ip, #20]
   269e4:	b	26050 <__assert_fail@plt+0x13a18>
   269e8:	ldr	r3, [r8, #-24]	; 0xffffffe8
   269ec:	ldr	r0, [r8, #-80]	; 0xffffffb0
   269f0:	ldr	r1, [r8, #-28]	; 0xffffffe4
   269f4:	ldr	r2, [r8, #-136]	; 0xffffff78
   269f8:	ldr	ip, [sp, #40]	; 0x28
   269fc:	str	r0, [ip, #48]	; 0x30
   26a00:	str	r1, [ip, #52]	; 0x34
   26a04:	str	r2, [ip, #44]	; 0x2c
   26a08:	str	r3, [ip, #56]	; 0x38
   26a0c:	ldr	r3, [r8]
   26a10:	str	r3, [ip, #20]
   26a14:	b	26050 <__assert_fail@plt+0x13a18>
   26a18:	ldr	r1, [r8, #-24]	; 0xffffffe8
   26a1c:	mov	r3, #0
   26a20:	ldr	r2, [r8, #-80]	; 0xffffffb0
   26a24:	ldr	ip, [sp, #40]	; 0x28
   26a28:	str	r3, [ip, #52]	; 0x34
   26a2c:	str	r1, [ip, #48]	; 0x30
   26a30:	str	r2, [ip, #44]	; 0x2c
   26a34:	str	r3, [ip, #56]	; 0x38
   26a38:	ldr	r3, [r8]
   26a3c:	str	r3, [ip, #20]
   26a40:	b	26050 <__assert_fail@plt+0x13a18>
   26a44:	ldr	r2, [r8, #-24]	; 0xffffffe8
   26a48:	mov	r3, #0
   26a4c:	ldr	ip, [sp, #40]	; 0x28
   26a50:	str	r3, [ip, #48]	; 0x30
   26a54:	str	r3, [ip, #52]	; 0x34
   26a58:	str	r2, [ip, #44]	; 0x2c
   26a5c:	str	r3, [ip, #56]	; 0x38
   26a60:	ldr	r3, [r8]
   26a64:	str	r3, [ip, #20]
   26a68:	b	26050 <__assert_fail@plt+0x13a18>
   26a6c:	ldr	r1, [sp, #44]	; 0x2c
   26a70:	and	ip, ip, #253	; 0xfd
   26a74:	cmp	ip, #44	; 0x2c
   26a78:	bne	26b44 <__assert_fail@plt+0x1450c>
   26a7c:	ldrb	r3, [r6, #1]
   26a80:	sub	r3, r3, #48	; 0x30
   26a84:	cmp	r3, #9
   26a88:	bhi	26b44 <__assert_fail@plt+0x1450c>
   26a8c:	cmn	fp, #1
   26a90:	beq	26be8 <__assert_fail@plt+0x145b0>
   26a94:	cmp	r0, #0
   26a98:	mov	ip, r0
   26a9c:	blt	2635c <__assert_fail@plt+0x13d24>
   26aa0:	ldrb	r1, [r6, #2]
   26aa4:	add	r6, r6, #2
   26aa8:	mov	r0, #8
   26aac:	sub	r2, r1, #48	; 0x30
   26ab0:	cmp	r2, #9
   26ab4:	add	r3, r3, r3, lsl #2
   26ab8:	ldrbls	r1, [r6, #1]
   26abc:	lsl	r3, r3, #1
   26ac0:	addls	r3, r3, r2
   26ac4:	addls	r6, r6, #1
   26ac8:	subls	r2, r1, #48	; 0x30
   26acc:	subs	r0, r0, #1
   26ad0:	bne	26ab0 <__assert_fail@plt+0x14478>
   26ad4:	cmn	fp, #1
   26ad8:	beq	26e08 <__assert_fail@plt+0x147d0>
   26adc:	cmp	r2, #9
   26ae0:	bhi	26b00 <__assert_fail@plt+0x144c8>
   26ae4:	add	r2, r6, #1
   26ae8:	mov	r6, r2
   26aec:	add	r2, r2, #1
   26af0:	ldrb	r1, [r6]
   26af4:	sub	r1, r1, #48	; 0x30
   26af8:	cmp	r1, #9
   26afc:	bls	26ae8 <__assert_fail@plt+0x144b0>
   26b00:	lsr	r2, fp, #31
   26b04:	cmp	r3, #0
   26b08:	moveq	r2, #0
   26b0c:	andne	r2, r2, #1
   26b10:	cmp	r2, #0
   26b14:	beq	26e40 <__assert_fail@plt+0x14808>
   26b18:	subs	ip, ip, #1
   26b1c:	bpl	2635c <__assert_fail@plt+0x13d24>
   26b20:	str	ip, [sp, #92]	; 0x5c
   26b24:	mov	r0, #51712	; 0xca00
   26b28:	ldr	ip, [sp, #40]	; 0x28
   26b2c:	movt	r0, #15258	; 0x3b9a
   26b30:	rsb	r0, r3, r0
   26b34:	str	r0, [sp, #76]	; 0x4c
   26b38:	str	r6, [ip]
   26b3c:	mov	r6, #276	; 0x114
   26b40:	b	25e28 <__assert_fail@plt+0x137f0>
   26b44:	cmn	fp, #1
   26b48:	lsr	r3, fp, #31
   26b4c:	strb	r3, [sp, #92]	; 0x5c
   26b50:	beq	26b90 <__assert_fail@plt+0x14558>
   26b54:	cmp	r0, #0
   26b58:	str	r0, [sp, #76]	; 0x4c
   26b5c:	blt	2635c <__assert_fail@plt+0x13d24>
   26b60:	ldr	ip, [sp, #40]	; 0x28
   26b64:	cmp	fp, #0
   26b68:	movw	r2, #275	; 0x113
   26b6c:	movw	r3, #274	; 0x112
   26b70:	rsb	r1, r1, r6
   26b74:	str	r1, [sp, #80]	; 0x50
   26b78:	str	r6, [ip]
   26b7c:	moveq	r6, r2
   26b80:	movne	r6, r3
   26b84:	b	25e28 <__assert_fail@plt+0x137f0>
   26b88:	mov	r0, #2
   26b8c:	b	261e0 <__assert_fail@plt+0x13ba8>
   26b90:	rsb	r0, r0, #0
   26b94:	str	r0, [sp, #76]	; 0x4c
   26b98:	cmp	r0, #0
   26b9c:	bgt	2635c <__assert_fail@plt+0x13d24>
   26ba0:	ldr	ip, [sp, #40]	; 0x28
   26ba4:	rsb	r1, r1, r6
   26ba8:	str	r1, [sp, #80]	; 0x50
   26bac:	str	r6, [ip]
   26bb0:	movw	r6, #274	; 0x112
   26bb4:	b	25e28 <__assert_fail@plt+0x137f0>
   26bb8:	ldr	r2, [r8, #-108]	; 0xffffff94
   26bbc:	b	266f0 <__assert_fail@plt+0x140b8>
   26bc0:	ldrb	ip, [r1, #1]
   26bc4:	add	r6, r1, #1
   26bc8:	sub	r3, ip, #48	; 0x30
   26bcc:	cmp	r3, #9
   26bd0:	bhi	26e6c <__assert_fail@plt+0x14834>
   26bd4:	ldr	r3, [sp, #72]	; 0x48
   26bd8:	cmp	r0, r3
   26bdc:	bhi	2635c <__assert_fail@plt+0x13d24>
   26be0:	mov	fp, r2
   26be4:	b	26318 <__assert_fail@plt+0x13ce0>
   26be8:	rsb	ip, r0, #0
   26bec:	cmp	ip, #0
   26bf0:	bgt	2635c <__assert_fail@plt+0x13d24>
   26bf4:	cmn	r0, ip
   26bf8:	bne	2635c <__assert_fail@plt+0x13d24>
   26bfc:	b	26aa0 <__assert_fail@plt+0x14468>
   26c00:	ldr	ip, [sp, #40]	; 0x28
   26c04:	add	r3, r1, #1
   26c08:	str	r3, [ip]
   26c0c:	ldrb	r6, [r1]
   26c10:	b	25e20 <__assert_fail@plt+0x137e8>
   26c14:	add	fp, sp, #720	; 0x2d0
   26c18:	ldr	r0, [sp, #40]	; 0x28
   26c1c:	mov	r1, fp
   26c20:	rsb	r3, fp, r1
   26c24:	cmp	r3, #18
   26c28:	strbls	r2, [r1]
   26c2c:	ldr	r3, [r0]
   26c30:	addls	r1, r1, #1
   26c34:	add	r2, r3, #1
   26c38:	str	r2, [r0]
   26c3c:	ldrb	r2, [r3, #1]
   26c40:	bic	r3, r2, #32
   26c44:	sub	r3, r3, #65	; 0x41
   26c48:	cmp	r3, #25
   26c4c:	bls	26c20 <__assert_fail@plt+0x145e8>
   26c50:	cmp	r2, #46	; 0x2e
   26c54:	beq	26c20 <__assert_fail@plt+0x145e8>
   26c58:	mov	r3, #0
   26c5c:	strb	r3, [r1]
   26c60:	ldrb	r3, [sp, #720]	; 0x2d0
   26c64:	cmp	r3, #0
   26c68:	addne	r2, sp, #716	; 0x2cc
   26c6c:	addne	r2, r2, #3
   26c70:	beq	26c90 <__assert_fail@plt+0x14658>
   26c74:	sub	r1, r3, #97	; 0x61
   26c78:	cmp	r1, #25
   26c7c:	subls	r3, r3, #32
   26c80:	strb	r3, [r2, #1]!
   26c84:	ldrb	r3, [r2, #1]
   26c88:	cmp	r3, #0
   26c8c:	bne	26c74 <__assert_fail@plt+0x1463c>
   26c90:	ldr	r3, [pc, #800]	; 26fb8 <__assert_fail@plt+0x14980>
   26c94:	movw	r1, #11424	; 0x2ca0
   26c98:	mov	r2, r9
   26c9c:	movt	r1, #3
   26ca0:	mov	r9, r6
   26ca4:	mov	r6, r4
   26ca8:	mov	r4, r3
   26cac:	b	26cbc <__assert_fail@plt+0x14684>
   26cb0:	ldr	r1, [r4, #12]!
   26cb4:	cmp	r1, #0
   26cb8:	beq	26cf0 <__assert_fail@plt+0x146b8>
   26cbc:	mov	r0, fp
   26cc0:	str	r2, [sp, #28]
   26cc4:	bl	11fb4 <strcmp@plt>
   26cc8:	ldr	r2, [sp, #28]
   26ccc:	cmp	r0, #0
   26cd0:	bne	26cb0 <__assert_fail@plt+0x14678>
   26cd4:	mov	r3, r4
   26cd8:	mov	r9, r2
   26cdc:	mov	r4, r6
   26ce0:	ldr	r2, [r3, #8]
   26ce4:	ldr	r6, [r3, #4]
   26ce8:	str	r2, [sp, #92]	; 0x5c
   26cec:	b	25e20 <__assert_fail@plt+0x137e8>
   26cf0:	mov	r0, fp
   26cf4:	mov	r4, r6
   26cf8:	mov	r6, r9
   26cfc:	mov	r9, r2
   26d00:	bl	1232c <strlen@plt>
   26d04:	cmp	r0, #3
   26d08:	str	r0, [sp, #44]	; 0x2c
   26d0c:	moveq	r6, #1
   26d10:	beq	26d1c <__assert_fail@plt+0x146e4>
   26d14:	cmp	r0, #4
   26d18:	beq	26df4 <__assert_fail@plt+0x147bc>
   26d1c:	ldr	r3, [pc, #664]	; 26fbc <__assert_fail@plt+0x14984>
   26d20:	movw	r1, #11428	; 0x2ca4
   26d24:	str	r4, [sp, #52]	; 0x34
   26d28:	movt	r1, #3
   26d2c:	mov	r4, r3
   26d30:	b	26d58 <__assert_fail@plt+0x14720>
   26d34:	mov	r2, #3
   26d38:	bl	125b4 <strncmp@plt>
   26d3c:	rsbs	r0, r0, #1
   26d40:	movcc	r0, #0
   26d44:	cmp	r0, #0
   26d48:	bne	26d94 <__assert_fail@plt+0x1475c>
   26d4c:	ldr	r1, [r4, #12]!
   26d50:	cmp	r1, #0
   26d54:	beq	26d74 <__assert_fail@plt+0x1473c>
   26d58:	cmp	r6, #0
   26d5c:	mov	r0, fp
   26d60:	bne	26d34 <__assert_fail@plt+0x146fc>
   26d64:	bl	11fb4 <strcmp@plt>
   26d68:	rsbs	r0, r0, #1
   26d6c:	movcc	r0, #0
   26d70:	b	26d44 <__assert_fail@plt+0x1470c>
   26d74:	ldr	r0, [sp, #40]	; 0x28
   26d78:	mov	r1, fp
   26d7c:	bl	25ce8 <__assert_fail@plt+0x136b0>
   26d80:	ldr	r4, [sp, #52]	; 0x34
   26d84:	cmp	r0, #0
   26d88:	beq	26da0 <__assert_fail@plt+0x14768>
   26d8c:	mov	r3, r0
   26d90:	b	26ce0 <__assert_fail@plt+0x146a8>
   26d94:	mov	r3, r4
   26d98:	ldr	r4, [sp, #52]	; 0x34
   26d9c:	b	26ce0 <__assert_fail@plt+0x146a8>
   26da0:	movw	r1, #11456	; 0x2cc0
   26da4:	mov	r0, fp
   26da8:	movt	r1, #3
   26dac:	bl	11fb4 <strcmp@plt>
   26db0:	cmp	r0, #0
   26db4:	beq	26efc <__assert_fail@plt+0x148c4>
   26db8:	movw	r2, #11436	; 0x2cac
   26dbc:	movt	r2, #3
   26dc0:	ldr	r6, [pc, #504]	; 26fc0 <__assert_fail@plt+0x14988>
   26dc4:	mov	r1, r2
   26dc8:	b	26dd8 <__assert_fail@plt+0x147a0>
   26dcc:	ldr	r1, [r6, #12]!
   26dd0:	cmp	r1, #0
   26dd4:	beq	26e74 <__assert_fail@plt+0x1483c>
   26dd8:	mov	r0, fp
   26ddc:	bl	11fb4 <strcmp@plt>
   26de0:	cmp	r0, #0
   26de4:	bne	26dcc <__assert_fail@plt+0x14794>
   26de8:	mov	r3, r6
   26dec:	b	26ce0 <__assert_fail@plt+0x146a8>
   26df0:	bl	120e0 <__stack_chk_fail@plt>
   26df4:	ldrb	r6, [sp, #723]	; 0x2d3
   26df8:	subs	r3, r6, #46	; 0x2e
   26dfc:	rsbs	r6, r3, #0
   26e00:	adcs	r6, r6, r3
   26e04:	b	26d1c <__assert_fail@plt+0x146e4>
   26e08:	cmp	r2, #9
   26e0c:	bhi	26b00 <__assert_fail@plt+0x144c8>
   26e10:	cmp	r1, #48	; 0x30
   26e14:	addeq	r2, r6, #1
   26e18:	beq	26e28 <__assert_fail@plt+0x147f0>
   26e1c:	b	26e64 <__assert_fail@plt+0x1482c>
   26e20:	cmp	r1, #48	; 0x30
   26e24:	bne	26e64 <__assert_fail@plt+0x1482c>
   26e28:	mov	r6, r2
   26e2c:	ldrb	r1, [r2], #1
   26e30:	sub	r0, r1, #48	; 0x30
   26e34:	cmp	r0, #9
   26e38:	bls	26e20 <__assert_fail@plt+0x147e8>
   26e3c:	b	26b00 <__assert_fail@plt+0x144c8>
   26e40:	str	ip, [sp, #92]	; 0x5c
   26e44:	cmp	fp, #0
   26e48:	ldr	ip, [sp, #40]	; 0x28
   26e4c:	str	r3, [sp, #76]	; 0x4c
   26e50:	movw	r3, #277	; 0x115
   26e54:	str	r6, [ip]
   26e58:	moveq	r6, r3
   26e5c:	movne	r6, #276	; 0x114
   26e60:	b	25e28 <__assert_fail@plt+0x137f0>
   26e64:	add	r3, r3, #1
   26e68:	b	26ae4 <__assert_fail@plt+0x144ac>
   26e6c:	mov	fp, r2
   26e70:	b	26a70 <__assert_fail@plt+0x14438>
   26e74:	ldr	ip, [sp, #44]	; 0x2c
   26e78:	mov	r2, r1
   26e7c:	sub	r3, ip, #1
   26e80:	ldrb	r1, [fp, r3]
   26e84:	cmp	r1, #83	; 0x53
   26e88:	beq	26f04 <__assert_fail@plt+0x148cc>
   26e8c:	ldr	r6, [pc, #304]	; 26fc4 <__assert_fail@plt+0x1498c>
   26e90:	movw	r1, #11444	; 0x2cb4
   26e94:	movt	r1, #3
   26e98:	mov	r0, fp
   26e9c:	bl	11fb4 <strcmp@plt>
   26ea0:	cmp	r0, #0
   26ea4:	beq	26de8 <__assert_fail@plt+0x147b0>
   26ea8:	ldr	r1, [r6, #12]!
   26eac:	cmp	r1, #0
   26eb0:	bne	26e98 <__assert_fail@plt+0x14860>
   26eb4:	ldr	r3, [sp, #44]	; 0x2c
   26eb8:	cmp	r3, #1
   26ebc:	ldrb	r3, [sp, #720]	; 0x2d0
   26ec0:	beq	26f74 <__assert_fail@plt+0x1493c>
   26ec4:	cmp	r3, #0
   26ec8:	movne	r1, fp
   26ecc:	movne	r0, #0
   26ed0:	movne	r2, fp
   26ed4:	beq	2635c <__assert_fail@plt+0x13d24>
   26ed8:	cmp	r3, #46	; 0x2e
   26edc:	ldrb	r3, [r1, #1]
   26ee0:	addne	r2, r2, #1
   26ee4:	moveq	r0, #1
   26ee8:	cmp	r3, #0
   26eec:	strb	r3, [r2]
   26ef0:	beq	26f54 <__assert_fail@plt+0x1491c>
   26ef4:	ldrb	r3, [r1, #1]!
   26ef8:	b	26ed8 <__assert_fail@plt+0x148a0>
   26efc:	ldr	r3, [pc, #196]	; 26fc8 <__assert_fail@plt+0x14990>
   26f00:	b	26ce0 <__assert_fail@plt+0x146a8>
   26f04:	ldr	r6, [pc, #180]	; 26fc0 <__assert_fail@plt+0x14988>
   26f08:	movw	r1, #11436	; 0x2cac
   26f0c:	movt	r1, #3
   26f10:	strb	r2, [fp, r3]
   26f14:	mov	r2, r9
   26f18:	mov	r9, r3
   26f1c:	mov	r0, fp
   26f20:	str	r2, [sp, #28]
   26f24:	bl	11fb4 <strcmp@plt>
   26f28:	ldr	r2, [sp, #28]
   26f2c:	cmp	r0, #0
   26f30:	beq	26fa4 <__assert_fail@plt+0x1496c>
   26f34:	ldr	r1, [r6, #12]!
   26f38:	cmp	r1, #0
   26f3c:	bne	26f1c <__assert_fail@plt+0x148e4>
   26f40:	mov	r3, r9
   26f44:	mov	r9, r2
   26f48:	mov	r2, #83	; 0x53
   26f4c:	strb	r2, [fp, r3]
   26f50:	b	26e8c <__assert_fail@plt+0x14854>
   26f54:	cmp	r0, #0
   26f58:	beq	2635c <__assert_fail@plt+0x13d24>
   26f5c:	mov	r1, fp
   26f60:	ldr	r0, [sp, #40]	; 0x28
   26f64:	bl	25ce8 <__assert_fail@plt+0x136b0>
   26f68:	cmp	r0, #0
   26f6c:	bne	26d8c <__assert_fail@plt+0x14754>
   26f70:	b	2635c <__assert_fail@plt+0x13d24>
   26f74:	cmp	r3, #65	; 0x41
   26f78:	beq	26fb0 <__assert_fail@plt+0x14978>
   26f7c:	ldr	r2, [pc, #72]	; 26fcc <__assert_fail@plt+0x14994>
   26f80:	ldr	r1, [r2]
   26f84:	mov	r0, r2
   26f88:	cmp	r1, #0
   26f8c:	beq	26ec4 <__assert_fail@plt+0x1488c>
   26f90:	ldrb	r1, [r1]
   26f94:	add	r2, r2, #12
   26f98:	cmp	r1, r3
   26f9c:	bne	26f80 <__assert_fail@plt+0x14948>
   26fa0:	b	26d8c <__assert_fail@plt+0x14754>
   26fa4:	mov	r9, r2
   26fa8:	mov	r3, r6
   26fac:	b	26ce0 <__assert_fail@plt+0x146a8>
   26fb0:	ldr	r3, [pc, #24]	; 26fd0 <__assert_fail@plt+0x14998>
   26fb4:	b	26ce0 <__assert_fail@plt+0x146a8>
   26fb8:	andeq	r2, r3, r8, asr #12
   26fbc:	andeq	r2, r3, ip, ror #20
   26fc0:	andeq	r2, r3, r4, lsl #13
   26fc4:	muleq	r3, r8, fp
   26fc8:	muleq	r3, r0, r4
   26fcc:	andeq	r2, r3, r8, lsr #9
   26fd0:	muleq	r3, ip, r4
   26fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fd8:	movw	r8, #21904	; 0x5590
   26fdc:	movt	r8, #4
   26fe0:	sub	sp, sp, #508	; 0x1fc
   26fe4:	cmp	r2, #0
   26fe8:	mov	r4, r1
   26fec:	ldr	r3, [r8]
   26ff0:	str	r0, [sp, #36]	; 0x24
   26ff4:	str	r3, [sp, #500]	; 0x1f4
   26ff8:	beq	27858 <__assert_fail@plt+0x15220>
   26ffc:	ldr	r3, [r2]
   27000:	mov	r0, r2
   27004:	ldr	r2, [r2, #4]
   27008:	str	r3, [sp, #28]
   2700c:	str	r2, [sp, #32]
   27010:	bl	122cc <localtime@plt>
   27014:	subs	fp, r0, #0
   27018:	beq	27820 <__assert_fail@plt+0x151e8>
   2701c:	mov	r1, r4
   27020:	mov	r5, r1
   27024:	add	r1, r1, #1
   27028:	ldrb	r4, [r5]
   2702c:	sub	r7, r4, #9
   27030:	cmp	r4, #32
   27034:	cmpne	r7, #4
   27038:	movhi	r7, #0
   2703c:	movls	r7, #1
   27040:	bls	27020 <__assert_fail@plt+0x149e8>
   27044:	movw	r1, #11460	; 0x2cc4
   27048:	mov	r0, r5
   2704c:	movt	r1, #3
   27050:	mov	r2, #4
   27054:	bl	125b4 <strncmp@plt>
   27058:	cmp	r0, #0
   2705c:	bne	27104 <__assert_fail@plt+0x14acc>
   27060:	ldrb	r2, [r5, #4]
   27064:	add	r6, r5, #4
   27068:	str	r6, [sp, #24]
   2706c:	cmp	r2, #0
   27070:	beq	278a8 <__assert_fail@plt+0x15270>
   27074:	mov	r1, r6
   27078:	mov	r6, #1
   2707c:	mov	r7, r0
   27080:	mov	sl, r0
   27084:	str	fp, [sp, #44]	; 0x2c
   27088:	add	r9, sp, #300	; 0x12c
   2708c:	mov	fp, r6
   27090:	mov	r0, r5
   27094:	mov	r6, r5
   27098:	str	r8, [sp, #40]	; 0x28
   2709c:	b	270c0 <__assert_fail@plt+0x14a88>
   270a0:	cmp	r2, #34	; 0x22
   270a4:	beq	272f8 <__assert_fail@plt+0x14cc0>
   270a8:	mov	r4, r1
   270ac:	add	r1, r1, #1
   270b0:	ldrb	r2, [r4, #1]
   270b4:	add	fp, fp, #1
   270b8:	cmp	r2, #0
   270bc:	beq	270f0 <__assert_fail@plt+0x14ab8>
   270c0:	cmp	r2, #92	; 0x5c
   270c4:	bne	270a0 <__assert_fail@plt+0x14a68>
   270c8:	ldrb	r2, [r1, #1]
   270cc:	add	r4, r1, #1
   270d0:	cmp	r2, #34	; 0x22
   270d4:	cmpne	r2, #92	; 0x5c
   270d8:	bne	270f0 <__assert_fail@plt+0x14ab8>
   270dc:	ldrb	r2, [r4, #1]
   270e0:	add	r1, r1, #2
   270e4:	add	fp, fp, #1
   270e8:	cmp	r2, #0
   270ec:	bne	270c0 <__assert_fail@plt+0x14a88>
   270f0:	ldr	fp, [sp, #44]	; 0x2c
   270f4:	mov	r5, r0
   270f8:	ldr	r8, [sp, #40]	; 0x28
   270fc:	ldrb	r2, [r0]
   27100:	b	27110 <__assert_fail@plt+0x14ad8>
   27104:	add	r9, sp, #300	; 0x12c
   27108:	mov	r2, r4
   2710c:	mov	sl, r7
   27110:	ldr	r1, [fp, #20]
   27114:	cmp	r2, #0
   27118:	ldr	r6, [fp, #4]
   2711c:	movw	r0, #55804	; 0xd9fc
   27120:	ldr	r3, [sp, #28]
   27124:	movt	r0, #2
   27128:	add	r1, r1, #1888	; 0x760
   2712c:	ldr	r2, [fp]
   27130:	ldr	ip, [fp, #12]
   27134:	moveq	r5, r0
   27138:	ldr	lr, [fp, #8]
   2713c:	add	r4, r3, #7733248	; 0x760000
   27140:	ldr	r0, [fp, #32]
   27144:	add	r1, r1, #12
   27148:	ldr	r3, [fp, #40]	; 0x28
   2714c:	add	r4, r4, #42752	; 0xa700
   27150:	str	r1, [sp, #176]	; 0xb0
   27154:	ldr	r1, [fp, #16]
   27158:	str	r6, [sp, #196]	; 0xc4
   2715c:	ldr	r6, [sp, #32]
   27160:	add	r1, r1, #1
   27164:	str	r5, [sp, #148]	; 0x94
   27168:	mov	r5, #62720	; 0xf500
   2716c:	str	ip, [sp, #188]	; 0xbc
   27170:	movt	r5, #355	; 0x163
   27174:	str	r1, [sp, #184]	; 0xb8
   27178:	mov	r1, #0
   2717c:	str	r2, [sp, #200]	; 0xc8
   27180:	mov	ip, #2
   27184:	str	r6, [sp, #204]	; 0xcc
   27188:	mov	r6, r1
   2718c:	str	lr, [sp, #192]	; 0xc0
   27190:	movw	r2, #269	; 0x10d
   27194:	str	r0, [sp, #92]	; 0x5c
   27198:	str	r1, [sp, #180]	; 0xb4
   2719c:	str	r1, [sp, #208]	; 0xd0
   271a0:	str	r1, [sp, #212]	; 0xd4
   271a4:	str	r1, [sp, #216]	; 0xd8
   271a8:	str	r1, [sp, #220]	; 0xdc
   271ac:	str	r1, [sp, #224]	; 0xe0
   271b0:	str	r1, [sp, #228]	; 0xe4
   271b4:	str	r1, [sp, #232]	; 0xe8
   271b8:	strb	r1, [sp, #236]	; 0xec
   271bc:	strb	r1, [sp, #237]	; 0xed
   271c0:	str	r1, [sp, #240]	; 0xf0
   271c4:	str	r1, [sp, #244]	; 0xf4
   271c8:	str	r1, [sp, #256]	; 0x100
   271cc:	str	r1, [sp, #248]	; 0xf8
   271d0:	str	r1, [sp, #252]	; 0xfc
   271d4:	str	r3, [sp, #264]	; 0x108
   271d8:	ldr	r3, [fp, #32]
   271dc:	str	r1, [sp, #260]	; 0x104
   271e0:	str	ip, [sp, #168]	; 0xa8
   271e4:	str	r2, [sp, #268]	; 0x10c
   271e8:	str	r1, [sp, #276]	; 0x114
   271ec:	str	r3, [sp, #272]	; 0x110
   271f0:	add	r0, sp, #104	; 0x68
   271f4:	add	r3, r4, r6
   271f8:	str	r3, [sp, #104]	; 0x68
   271fc:	bl	122cc <localtime@plt>
   27200:	cmp	r0, #0
   27204:	beq	27224 <__assert_fail@plt+0x14bec>
   27208:	ldr	r3, [r0, #40]	; 0x28
   2720c:	cmp	r3, #0
   27210:	beq	27224 <__assert_fail@plt+0x14bec>
   27214:	ldr	r2, [r0, #32]
   27218:	ldr	r1, [sp, #272]	; 0x110
   2721c:	cmp	r2, r1
   27220:	bne	27828 <__assert_fail@plt+0x151f0>
   27224:	add	r6, r6, #7733248	; 0x760000
   27228:	add	r6, r6, #42752	; 0xa700
   2722c:	cmp	r6, r5
   27230:	bne	271f0 <__assert_fail@plt+0x14bb8>
   27234:	ldr	r0, [sp, #264]	; 0x108
   27238:	cmp	r0, #0
   2723c:	beq	27260 <__assert_fail@plt+0x14c28>
   27240:	ldr	r1, [sp, #276]	; 0x114
   27244:	cmp	r1, #0
   27248:	beq	27260 <__assert_fail@plt+0x14c28>
   2724c:	bl	11fb4 <strcmp@plt>
   27250:	cmp	r0, #0
   27254:	streq	r0, [sp, #276]	; 0x114
   27258:	mvneq	r3, #0
   2725c:	streq	r3, [sp, #272]	; 0x110
   27260:	add	r0, sp, #148	; 0x94
   27264:	bl	25da0 <__assert_fail@plt+0x13768>
   27268:	cmp	r0, #0
   2726c:	beq	272d4 <__assert_fail@plt+0x14c9c>
   27270:	mov	r4, #0
   27274:	cmp	sl, #0
   27278:	beq	272a4 <__assert_fail@plt+0x14c6c>
   2727c:	cmp	r7, #0
   27280:	movw	r0, #11412	; 0x2c94
   27284:	beq	27844 <__assert_fail@plt+0x1520c>
   27288:	mov	r1, r7
   2728c:	movt	r0, #3
   27290:	mov	r2, #1
   27294:	bl	12344 <setenv@plt>
   27298:	rsbs	r0, r0, #1
   2729c:	movcc	r0, #0
   272a0:	and	r4, r0, r4
   272a4:	cmp	r7, r9
   272a8:	moveq	r0, r4
   272ac:	beq	272bc <__assert_fail@plt+0x14c84>
   272b0:	mov	r0, r7
   272b4:	bl	12020 <free@plt>
   272b8:	mov	r0, r4
   272bc:	ldr	r2, [sp, #500]	; 0x1f4
   272c0:	ldr	r3, [r8]
   272c4:	cmp	r2, r3
   272c8:	bne	27910 <__assert_fail@plt+0x152d8>
   272cc:	add	sp, sp, #508	; 0x1fc
   272d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272d4:	ldrb	r4, [sp, #236]	; 0xec
   272d8:	cmp	r4, #0
   272dc:	beq	273c4 <__assert_fail@plt+0x14d8c>
   272e0:	add	r3, sp, #200	; 0xc8
   272e4:	ldr	r5, [sp, #36]	; 0x24
   272e8:	mov	r4, #1
   272ec:	ldm	r3, {r0, r1}
   272f0:	stm	r5, {r0, r1}
   272f4:	b	27274 <__assert_fail@plt+0x14c3c>
   272f8:	cmp	fp, #100	; 0x64
   272fc:	mov	r0, r7
   27300:	movls	r5, #0
   27304:	movhi	r5, #1
   27308:	bl	12020 <free@plt>
   2730c:	mov	r0, r9
   27310:	bl	25c14 <__assert_fail@plt+0x135dc>
   27314:	cmp	r5, #0
   27318:	addeq	r8, sp, #400	; 0x190
   2731c:	mov	r7, r0
   27320:	bne	273a0 <__assert_fail@plt+0x14d68>
   27324:	ldrb	r2, [r6, #4]
   27328:	mov	r0, r8
   2732c:	ldr	r4, [sp, #24]
   27330:	cmp	r2, #34	; 0x22
   27334:	beq	27360 <__assert_fail@plt+0x14d28>
   27338:	subs	r3, r2, #92	; 0x5c
   2733c:	rsbs	r2, r3, #0
   27340:	adcs	r2, r2, r3
   27344:	add	r3, r4, r2
   27348:	ldrb	r2, [r4, r2]
   2734c:	add	r4, r3, #1
   27350:	strb	r2, [r0], #1
   27354:	ldrb	r2, [r3, #1]
   27358:	cmp	r2, #34	; 0x22
   2735c:	bne	27338 <__assert_fail@plt+0x14d00>
   27360:	mov	r1, #0
   27364:	mov	r2, #1
   27368:	strb	r1, [r0]
   2736c:	movw	r0, #11412	; 0x2c94
   27370:	mov	r1, r8
   27374:	movt	r0, #3
   27378:	bl	12344 <setenv@plt>
   2737c:	cmp	r5, #0
   27380:	mov	r2, r0
   27384:	bne	273b0 <__assert_fail@plt+0x14d78>
   27388:	cmp	r2, #0
   2738c:	bne	278bc <__assert_fail@plt+0x15284>
   27390:	add	r0, r4, #1
   27394:	mov	sl, #1
   27398:	mov	r1, r0
   2739c:	b	270b0 <__assert_fail@plt+0x14a78>
   273a0:	mov	r0, fp
   273a4:	bl	29604 <__assert_fail@plt+0x16fcc>
   273a8:	mov	r8, r0
   273ac:	b	27324 <__assert_fail@plt+0x14cec>
   273b0:	mov	r0, r8
   273b4:	str	r2, [sp, #20]
   273b8:	bl	12020 <free@plt>
   273bc:	ldr	r2, [sp, #20]
   273c0:	b	27388 <__assert_fail@plt+0x14d50>
   273c4:	ldr	r3, [sp, #256]	; 0x100
   273c8:	ldr	ip, [sp, #240]	; 0xf0
   273cc:	ldr	r0, [sp, #244]	; 0xf4
   273d0:	orr	r2, ip, r3
   273d4:	ldr	r6, [sp, #252]	; 0xfc
   273d8:	ldr	r1, [sp, #248]	; 0xf8
   273dc:	orr	r2, r2, r0
   273e0:	ldr	r5, [sp, #260]	; 0x104
   273e4:	orr	r6, r2, r6
   273e8:	add	r5, r1, r5
   273ec:	orr	r5, r6, r5
   273f0:	cmp	r5, #1
   273f4:	bhi	27274 <__assert_fail@plt+0x14c3c>
   273f8:	ldr	r4, [sp, #176]	; 0xb0
   273fc:	ldr	r5, [sp, #180]	; 0xb4
   27400:	cmp	r4, #0
   27404:	rsblt	r4, r4, #0
   27408:	blt	27424 <__assert_fail@plt+0x14dec>
   2740c:	cmp	r5, #2
   27410:	bne	27424 <__assert_fail@plt+0x14dec>
   27414:	cmp	r4, #68	; 0x44
   27418:	movw	r5, #1900	; 0x76c
   2741c:	movle	r5, #2000	; 0x7d0
   27420:	add	r4, r4, r5
   27424:	ldr	r5, [sp, #188]	; 0xbc
   27428:	cmp	r3, #0
   2742c:	ldr	r3, [sp, #184]	; 0xb8
   27430:	sub	r4, r4, #1888	; 0x760
   27434:	sub	r4, r4, #12
   27438:	str	r4, [sp, #80]	; 0x50
   2743c:	sub	r3, r3, #1
   27440:	str	r5, [sp, #72]	; 0x48
   27444:	str	r3, [sp, #76]	; 0x4c
   27448:	bne	27868 <__assert_fail@plt+0x15230>
   2744c:	ldrb	r3, [sp, #237]	; 0xed
   27450:	cmp	r3, #0
   27454:	beq	27468 <__assert_fail@plt+0x14e30>
   27458:	cmp	ip, #0
   2745c:	bne	27468 <__assert_fail@plt+0x14e30>
   27460:	cmp	r0, #0
   27464:	beq	27868 <__assert_fail@plt+0x15230>
   27468:	mov	r3, #0
   2746c:	str	r3, [sp, #60]	; 0x3c
   27470:	str	r3, [sp, #64]	; 0x40
   27474:	str	r3, [sp, #68]	; 0x44
   27478:	str	r3, [sp, #204]	; 0xcc
   2747c:	cmp	r2, #0
   27480:	add	lr, sp, #60	; 0x3c
   27484:	add	ip, sp, #104	; 0x68
   27488:	mvnne	r3, #0
   2748c:	strne	r3, [sp, #92]	; 0x5c
   27490:	cmp	r1, #0
   27494:	ldrne	r3, [sp, #160]	; 0xa0
   27498:	strne	r3, [sp, #92]	; 0x5c
   2749c:	ldm	lr!, {r0, r1, r2, r3}
   274a0:	stmia	ip!, {r0, r1, r2, r3}
   274a4:	ldm	lr!, {r0, r1, r2, r3}
   274a8:	stmia	ip!, {r0, r1, r2, r3}
   274ac:	ldm	lr, {r0, r1, r2}
   274b0:	stm	ip, {r0, r1, r2}
   274b4:	add	r0, sp, #60	; 0x3c
   274b8:	bl	11fd8 <mktime@plt>
   274bc:	add	r1, sp, #60	; 0x3c
   274c0:	mov	r4, r0
   274c4:	add	r0, sp, #104	; 0x68
   274c8:	mov	r2, r4
   274cc:	bl	25b78 <__assert_fail@plt+0x13540>
   274d0:	cmp	r0, #0
   274d4:	bne	275a8 <__assert_fail@plt+0x14f70>
   274d8:	ldr	r4, [sp, #260]	; 0x104
   274dc:	cmp	r4, #0
   274e0:	beq	27274 <__assert_fail@plt+0x14c3c>
   274e4:	ldr	r5, [sp, #164]	; 0xa4
   274e8:	movw	r2, #34953	; 0x8889
   274ec:	movt	r2, #34952	; 0x8888
   274f0:	eor	r3, r5, r5, asr #31
   274f4:	sub	r3, r3, r5, asr #31
   274f8:	cmp	sl, #0
   274fc:	smull	r6, r2, r2, r3
   27500:	asr	r1, r3, #31
   27504:	add	r4, r2, r3
   27508:	rsb	r4, r1, r4, asr #5
   2750c:	rsb	r6, r4, r4, lsl #4
   27510:	sub	r6, r3, r6, lsl #2
   27514:	beq	27900 <__assert_fail@plt+0x152c8>
   27518:	movw	r2, #7140	; 0x1be4
   2751c:	movt	r2, #3
   27520:	add	r2, r2, r5, lsr #31
   27524:	mov	r1, #1
   27528:	str	r2, [sp]
   2752c:	add	r0, sp, #400	; 0x190
   27530:	mov	r2, #19
   27534:	stmib	sp, {r4, r6}
   27538:	movw	r3, #11468	; 0x2ccc
   2753c:	movt	r3, #3
   27540:	bl	12398 <__sprintf_chk@plt>
   27544:	add	r1, sp, #400	; 0x190
   27548:	movw	r0, #11412	; 0x2c94
   2754c:	mov	r2, #1
   27550:	movt	r0, #3
   27554:	bl	12344 <setenv@plt>
   27558:	cmp	r0, #0
   2755c:	bne	27270 <__assert_fail@plt+0x14c38>
   27560:	add	lr, sp, #104	; 0x68
   27564:	add	ip, sp, #60	; 0x3c
   27568:	mov	sl, #1
   2756c:	ldm	lr!, {r0, r1, r2, r3}
   27570:	stmia	ip!, {r0, r1, r2, r3}
   27574:	ldm	lr!, {r0, r1, r2, r3}
   27578:	stmia	ip!, {r0, r1, r2, r3}
   2757c:	ldm	lr, {r0, r1, r2}
   27580:	stm	ip, {r0, r1, r2}
   27584:	add	r0, sp, #60	; 0x3c
   27588:	bl	11fd8 <mktime@plt>
   2758c:	add	r1, sp, #60	; 0x3c
   27590:	mov	r4, r0
   27594:	add	r0, sp, #104	; 0x68
   27598:	mov	r2, r4
   2759c:	bl	25b78 <__assert_fail@plt+0x13540>
   275a0:	cmp	r0, #0
   275a4:	beq	27270 <__assert_fail@plt+0x14c38>
   275a8:	ldr	r3, [sp, #244]	; 0xf4
   275ac:	cmp	r3, #0
   275b0:	beq	27638 <__assert_fail@plt+0x15000>
   275b4:	ldr	r1, [sp, #240]	; 0xf0
   275b8:	cmp	r1, #0
   275bc:	bne	27638 <__assert_fail@plt+0x15000>
   275c0:	ldr	r4, [sp, #156]	; 0x9c
   275c4:	movw	r3, #9363	; 0x2493
   275c8:	ldr	ip, [sp, #84]	; 0x54
   275cc:	movt	r3, #37449	; 0x9249
   275d0:	ldr	r0, [sp, #152]	; 0x98
   275d4:	rsb	r2, ip, r4
   275d8:	ldr	lr, [sp, #72]	; 0x48
   275dc:	add	r2, r2, #7
   275e0:	cmp	r0, #0
   275e4:	smull	r5, r3, r3, r2
   275e8:	asr	r5, r2, #31
   275ec:	add	r3, r3, r2
   275f0:	rsb	r3, r5, r3, asr #2
   275f4:	rsb	r3, r3, r3, lsl #3
   275f8:	rsb	r3, r3, r2
   275fc:	ble	27608 <__assert_fail@plt+0x14fd0>
   27600:	subs	r1, r4, ip
   27604:	movne	r1, #1
   27608:	rsb	r2, r1, r0
   2760c:	add	r0, sp, #60	; 0x3c
   27610:	mvn	r1, #0
   27614:	str	r1, [sp, #92]	; 0x5c
   27618:	rsb	r2, r2, r2, lsl #3
   2761c:	add	r3, r3, r2
   27620:	add	lr, lr, r3
   27624:	str	lr, [sp, #72]	; 0x48
   27628:	bl	11fd8 <mktime@plt>
   2762c:	cmn	r0, #1
   27630:	mov	r4, r0
   27634:	beq	27270 <__assert_fail@plt+0x14c38>
   27638:	ldr	r3, [sp, #208]	; 0xd0
   2763c:	ldr	r1, [sp, #212]	; 0xd4
   27640:	ldr	fp, [sp, #216]	; 0xd8
   27644:	orr	r2, r1, r3
   27648:	orrs	r2, r2, fp
   2764c:	beq	276e4 <__assert_fail@plt+0x150ac>
   27650:	ldr	r4, [sp, #76]	; 0x4c
   27654:	lsr	r5, fp, #31
   27658:	ldr	ip, [sp, #72]	; 0x48
   2765c:	lsr	r6, r1, #31
   27660:	ldr	r0, [sp, #80]	; 0x50
   27664:	add	r1, r1, r4
   27668:	add	r2, fp, ip
   2766c:	cmp	r4, r1
   27670:	movle	r4, r6
   27674:	eorgt	r4, r6, #1
   27678:	cmp	ip, r2
   2767c:	movle	ip, r5
   27680:	eorgt	ip, r5, #1
   27684:	add	fp, r3, r0
   27688:	lsr	r3, r3, #31
   2768c:	orr	ip, r4, ip
   27690:	cmp	r0, fp
   27694:	movle	r0, r3
   27698:	eorgt	r0, r3, #1
   2769c:	orrs	r5, ip, r0
   276a0:	bne	27270 <__assert_fail@plt+0x14c38>
   276a4:	ldr	r4, [sp, #112]	; 0x70
   276a8:	add	r0, sp, #60	; 0x3c
   276ac:	ldr	lr, [sp, #108]	; 0x6c
   276b0:	ldr	ip, [sp, #104]	; 0x68
   276b4:	ldr	r3, [sp, #136]	; 0x88
   276b8:	str	r4, [sp, #68]	; 0x44
   276bc:	str	fp, [sp, #80]	; 0x50
   276c0:	str	r1, [sp, #76]	; 0x4c
   276c4:	str	r2, [sp, #72]	; 0x48
   276c8:	str	lr, [sp, #64]	; 0x40
   276cc:	str	ip, [sp, #60]	; 0x3c
   276d0:	str	r3, [sp, #92]	; 0x5c
   276d4:	bl	11fd8 <mktime@plt>
   276d8:	cmn	r0, #1
   276dc:	mov	r4, r0
   276e0:	beq	27270 <__assert_fail@plt+0x14c38>
   276e4:	ldr	r3, [sp, #260]	; 0x104
   276e8:	cmp	r3, #0
   276ec:	beq	27720 <__assert_fail@plt+0x150e8>
   276f0:	ldr	r3, [sp, #164]	; 0xa4
   276f4:	ldr	r2, [sp, #96]	; 0x60
   276f8:	rsb	r3, r3, r3, lsl #4
   276fc:	rsb	r2, r2, r3, lsl #2
   27700:	rsb	r3, r2, r4
   27704:	lsr	r2, r2, #31
   27708:	cmp	r4, r3
   2770c:	movge	r4, r2
   27710:	eorlt	r4, r2, #1
   27714:	cmp	r4, #0
   27718:	bne	27270 <__assert_fail@plt+0x14c38>
   2771c:	mov	r4, r3
   27720:	ldr	r3, [sp, #232]	; 0xe8
   27724:	movw	r1, #12193	; 0x2fa1
   27728:	ldr	fp, [sp, #204]	; 0xcc
   2772c:	movt	r1, #17592	; 0x44b8
   27730:	mov	r5, #51712	; 0xca00
   27734:	movt	r5, #15258	; 0x3b9a
   27738:	add	fp, fp, r3
   2773c:	ldr	r0, [sp, #220]	; 0xdc
   27740:	mov	ip, #3600	; 0xe10
   27744:	mov	r3, #51712	; 0xca00
   27748:	smull	r2, r6, r1, fp
   2774c:	asr	r2, fp, #31
   27750:	mul	ip, ip, r0
   27754:	movt	r3, #15258	; 0x3b9a
   27758:	ldr	r0, [sp, #224]	; 0xe0
   2775c:	rsb	r2, r2, r6, asr #28
   27760:	rsb	r0, r0, r0, lsl #4
   27764:	mls	r2, r5, r2, fp
   27768:	lsl	r0, r0, #2
   2776c:	add	r3, r2, r3
   27770:	smull	r2, r6, r1, r3
   27774:	asr	r2, r3, #31
   27778:	str	r2, [sp, #28]
   2777c:	add	r2, r4, ip
   27780:	lsr	ip, ip, #31
   27784:	cmp	r4, r2
   27788:	eorgt	ip, ip, #1
   2778c:	str	ip, [sp, #32]
   27790:	add	ip, r2, r0
   27794:	lsr	r0, r0, #31
   27798:	cmp	ip, r2
   2779c:	movge	r4, r0
   277a0:	eorlt	r4, r0, #1
   277a4:	ldr	r0, [sp, #28]
   277a8:	rsb	r2, r0, r6, asr #28
   277ac:	ldr	r6, [sp, #32]
   277b0:	mls	r2, r5, r2, r3
   277b4:	orr	r4, r4, r6
   277b8:	str	r4, [sp, #24]
   277bc:	ldr	r4, [sp, #228]	; 0xe4
   277c0:	rsb	fp, r2, fp
   277c4:	ldr	r5, [sp, #24]
   277c8:	add	r0, ip, r4
   277cc:	lsr	r6, r4, #31
   277d0:	cmp	r0, ip
   277d4:	movge	ip, r6
   277d8:	eorlt	ip, r6, #1
   277dc:	smull	r6, r1, r1, fp
   277e0:	asr	fp, fp, #31
   277e4:	orr	r4, r5, ip
   277e8:	rsb	r1, fp, r1, asr #28
   277ec:	add	r3, r0, r1
   277f0:	lsr	r1, r1, #31
   277f4:	cmp	r3, r0
   277f8:	movge	r0, r1
   277fc:	eorlt	r0, r1, #1
   27800:	orrs	r0, r4, r0
   27804:	bne	27270 <__assert_fail@plt+0x14c38>
   27808:	ldr	r4, [sp, #36]	; 0x24
   2780c:	ldr	r5, [sp, #36]	; 0x24
   27810:	str	r3, [r4]
   27814:	mov	r4, #1
   27818:	str	r2, [r5, #4]
   2781c:	b	27274 <__assert_fail@plt+0x14c3c>
   27820:	mov	r0, fp
   27824:	b	272bc <__assert_fail@plt+0x14c84>
   27828:	str	r3, [sp, #276]	; 0x114
   2782c:	movw	r1, #269	; 0x10d
   27830:	mov	r3, #0
   27834:	str	r2, [sp, #284]	; 0x11c
   27838:	str	r1, [sp, #280]	; 0x118
   2783c:	str	r3, [sp, #288]	; 0x120
   27840:	b	27234 <__assert_fail@plt+0x14bfc>
   27844:	movt	r0, #3
   27848:	bl	1259c <unsetenv@plt>
   2784c:	rsbs	r0, r0, #1
   27850:	movcc	r0, #0
   27854:	b	272a0 <__assert_fail@plt+0x14c68>
   27858:	add	r0, sp, #52	; 0x34
   2785c:	bl	2b86c <__assert_fail@plt+0x19234>
   27860:	add	r2, sp, #52	; 0x34
   27864:	b	26ffc <__assert_fail@plt+0x149c4>
   27868:	ldr	r0, [sp, #168]	; 0xa8
   2786c:	ldr	r3, [sp, #192]	; 0xc0
   27870:	cmp	r0, #0
   27874:	beq	278e8 <__assert_fail@plt+0x152b0>
   27878:	cmp	r0, #1
   2787c:	bne	278c4 <__assert_fail@plt+0x1528c>
   27880:	sub	r0, r3, #1
   27884:	cmp	r0, #10
   27888:	addls	r0, r3, #12
   2788c:	bls	278d0 <__assert_fail@plt+0x15298>
   27890:	cmp	r3, #12
   27894:	beq	278cc <__assert_fail@plt+0x15294>
   27898:	mvn	r3, #0
   2789c:	mov	r4, #0
   278a0:	str	r3, [sp, #68]	; 0x44
   278a4:	b	27274 <__assert_fail@plt+0x14c3c>
   278a8:	mov	r7, r2
   278ac:	add	r9, sp, #300	; 0x12c
   278b0:	mov	r2, r4
   278b4:	mov	sl, r7
   278b8:	b	27110 <__assert_fail@plt+0x14ad8>
   278bc:	ldr	r8, [sp, #40]	; 0x28
   278c0:	b	27270 <__assert_fail@plt+0x14c38>
   278c4:	cmp	r3, #23
   278c8:	bhi	27898 <__assert_fail@plt+0x15260>
   278cc:	mov	r0, r3
   278d0:	ldr	ip, [sp, #196]	; 0xc4
   278d4:	ldr	r3, [sp, #200]	; 0xc8
   278d8:	str	r0, [sp, #68]	; 0x44
   278dc:	str	ip, [sp, #64]	; 0x40
   278e0:	str	r3, [sp, #60]	; 0x3c
   278e4:	b	2747c <__assert_fail@plt+0x14e44>
   278e8:	sub	ip, r3, #1
   278ec:	cmp	ip, #10
   278f0:	bls	278cc <__assert_fail@plt+0x15294>
   278f4:	cmp	r3, #12
   278f8:	bne	27898 <__assert_fail@plt+0x15260>
   278fc:	b	278d0 <__assert_fail@plt+0x15298>
   27900:	mov	r0, r9
   27904:	bl	25c14 <__assert_fail@plt+0x135dc>
   27908:	mov	r7, r0
   2790c:	b	27518 <__assert_fail@plt+0x14ee0>
   27910:	bl	120e0 <__stack_chk_fail@plt>
   27914:	push	{r4, r5, r6, lr}
   27918:	subs	r4, r0, #0
   2791c:	beq	279a4 <__assert_fail@plt+0x1536c>
   27920:	mov	r1, #47	; 0x2f
   27924:	bl	124c4 <strrchr@plt>
   27928:	subs	r5, r0, #0
   2792c:	beq	27988 <__assert_fail@plt+0x15350>
   27930:	add	r6, r5, #1
   27934:	rsb	r3, r4, r6
   27938:	cmp	r3, #6
   2793c:	ble	27988 <__assert_fail@plt+0x15350>
   27940:	movw	r1, #12284	; 0x2ffc
   27944:	sub	r0, r5, #6
   27948:	movt	r1, #3
   2794c:	mov	r2, #7
   27950:	bl	125b4 <strncmp@plt>
   27954:	cmp	r0, #0
   27958:	bne	27988 <__assert_fail@plt+0x15350>
   2795c:	movw	r1, #12292	; 0x3004
   27960:	mov	r0, r6
   27964:	movt	r1, #3
   27968:	mov	r2, #3
   2796c:	bl	125b4 <strncmp@plt>
   27970:	cmp	r0, #0
   27974:	addeq	r4, r5, #4
   27978:	movweq	r3, #21896	; 0x5588
   2797c:	movteq	r3, #4
   27980:	movne	r4, r6
   27984:	streq	r4, [r3]
   27988:	movw	r2, #23992	; 0x5db8
   2798c:	movw	r3, #21908	; 0x5594
   27990:	movt	r2, #4
   27994:	movt	r3, #4
   27998:	str	r4, [r2]
   2799c:	str	r4, [r3]
   279a0:	pop	{r4, r5, r6, pc}
   279a4:	movw	r3, #21912	; 0x5598
   279a8:	movt	r3, #4
   279ac:	movw	r0, #12228	; 0x2fc4
   279b0:	mov	r1, #1
   279b4:	ldr	r3, [r3]
   279b8:	mov	r2, #55	; 0x37
   279bc:	movt	r0, #3
   279c0:	bl	121a0 <fwrite@plt>
   279c4:	bl	125cc <abort@plt>
   279c8:	push	{r3, lr}
   279cc:	mov	r3, r0
   279d0:	mov	r2, #0
   279d4:	cmp	r1, #8
   279d8:	str	r2, [r3], #4
   279dc:	add	r3, r3, #4
   279e0:	str	r2, [r0, #4]
   279e4:	str	r2, [r3], #4
   279e8:	str	r2, [r3], #4
   279ec:	str	r2, [r3], #4
   279f0:	str	r2, [r3], #4
   279f4:	str	r2, [r3], #4
   279f8:	str	r2, [r3], #4
   279fc:	str	r2, [r3], #4
   27a00:	str	r2, [r3], #4
   27a04:	str	r2, [r3], #4
   27a08:	str	r2, [r3]
   27a0c:	beq	27a18 <__assert_fail@plt+0x153e0>
   27a10:	str	r1, [r0]
   27a14:	pop	{r3, pc}
   27a18:	bl	125cc <abort@plt>
   27a1c:	push	{r4, r5, r6, lr}
   27a20:	mov	r4, r0
   27a24:	mov	r6, r1
   27a28:	mov	r0, #0
   27a2c:	mov	r1, r4
   27a30:	mov	r2, #5
   27a34:	bl	120d4 <dcgettext@plt>
   27a38:	cmp	r0, r4
   27a3c:	mov	r5, r0
   27a40:	beq	27a48 <__assert_fail@plt+0x15410>
   27a44:	pop	{r4, r5, r6, pc}
   27a48:	bl	2b8d8 <__assert_fail@plt+0x192a0>
   27a4c:	ldrb	r3, [r0]
   27a50:	bic	r3, r3, #32
   27a54:	cmp	r3, #85	; 0x55
   27a58:	bne	27ae0 <__assert_fail@plt+0x154a8>
   27a5c:	ldrb	r3, [r0, #1]
   27a60:	bic	r3, r3, #32
   27a64:	cmp	r3, #84	; 0x54
   27a68:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27a6c:	ldrb	r3, [r0, #2]
   27a70:	bic	r3, r3, #32
   27a74:	cmp	r3, #70	; 0x46
   27a78:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27a7c:	ldrb	r3, [r0, #3]
   27a80:	cmp	r3, #45	; 0x2d
   27a84:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27a88:	ldrb	r3, [r0, #4]
   27a8c:	cmp	r3, #56	; 0x38
   27a90:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27a94:	ldrb	r3, [r0, #5]
   27a98:	cmp	r3, #0
   27a9c:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27aa0:	ldrb	r0, [r5]
   27aa4:	movw	r2, #12364	; 0x304c
   27aa8:	movw	r3, #12380	; 0x305c
   27aac:	movt	r2, #3
   27ab0:	cmp	r0, #96	; 0x60
   27ab4:	movt	r3, #3
   27ab8:	movne	r0, r2
   27abc:	moveq	r0, r3
   27ac0:	pop	{r4, r5, r6, pc}
   27ac4:	cmp	r6, #7
   27ac8:	movw	r3, #12372	; 0x3054
   27acc:	movt	r3, #3
   27ad0:	movw	r0, #57216	; 0xdf80
   27ad4:	movt	r0, #2
   27ad8:	moveq	r0, r3
   27adc:	pop	{r4, r5, r6, pc}
   27ae0:	cmp	r3, #71	; 0x47
   27ae4:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27ae8:	ldrb	r3, [r0, #1]
   27aec:	bic	r3, r3, #32
   27af0:	cmp	r3, #66	; 0x42
   27af4:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27af8:	ldrb	r3, [r0, #2]
   27afc:	cmp	r3, #49	; 0x31
   27b00:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27b04:	ldrb	r3, [r0, #3]
   27b08:	cmp	r3, #56	; 0x38
   27b0c:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27b10:	ldrb	r3, [r0, #4]
   27b14:	cmp	r3, #48	; 0x30
   27b18:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27b1c:	ldrb	r3, [r0, #5]
   27b20:	cmp	r3, #51	; 0x33
   27b24:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27b28:	ldrb	r3, [r0, #6]
   27b2c:	cmp	r3, #48	; 0x30
   27b30:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27b34:	ldrb	r3, [r0, #7]
   27b38:	cmp	r3, #0
   27b3c:	bne	27ac4 <__assert_fail@plt+0x1548c>
   27b40:	ldrb	r0, [r5]
   27b44:	movw	r2, #12368	; 0x3050
   27b48:	movw	r3, #12376	; 0x3058
   27b4c:	movt	r2, #3
   27b50:	cmp	r0, #96	; 0x60
   27b54:	movt	r3, #3
   27b58:	movne	r0, r2
   27b5c:	moveq	r0, r3
   27b60:	pop	{r4, r5, r6, pc}
   27b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b68:	movw	ip, #21904	; 0x5590
   27b6c:	sub	sp, sp, #124	; 0x7c
   27b70:	movt	ip, #4
   27b74:	mov	fp, r1
   27b78:	mov	sl, r3
   27b7c:	str	ip, [sp, #60]	; 0x3c
   27b80:	str	r0, [sp, #44]	; 0x2c
   27b84:	ldr	r0, [ip]
   27b88:	ldr	ip, [sp, #168]	; 0xa8
   27b8c:	str	r2, [sp, #40]	; 0x28
   27b90:	str	r0, [sp, #116]	; 0x74
   27b94:	str	ip, [sp, #52]	; 0x34
   27b98:	ldr	ip, [sp, #164]	; 0xa4
   27b9c:	ubfx	ip, ip, #1, #1
   27ba0:	str	ip, [sp, #36]	; 0x24
   27ba4:	ldr	ip, [sp, #172]	; 0xac
   27ba8:	str	ip, [sp, #76]	; 0x4c
   27bac:	ldr	ip, [sp, #176]	; 0xb0
   27bb0:	str	ip, [sp, #72]	; 0x48
   27bb4:	bl	121dc <__ctype_get_mb_cur_max@plt>
   27bb8:	ldr	ip, [sp, #160]	; 0xa0
   27bbc:	str	r0, [sp, #68]	; 0x44
   27bc0:	cmp	ip, #8
   27bc4:	ldrls	pc, [pc, ip, lsl #2]
   27bc8:	b	286fc <__assert_fail@plt+0x160c4>
   27bcc:	strdeq	r7, [r2], -r0
   27bd0:	andeq	r8, r2, r4, asr r4
   27bd4:	andeq	r8, r2, r8, lsl #9
   27bd8:	andeq	r8, r2, ip, lsr #6
   27bdc:	andeq	r8, r2, ip, ror #6
   27be0:	muleq	r2, ip, r3
   27be4:	andeq	r8, r2, r0, asr #7
   27be8:	andeq	r8, r2, r0, asr #7
   27bec:	andeq	r8, r2, r0, asr #7
   27bf0:	mov	ip, #0
   27bf4:	str	ip, [sp, #36]	; 0x24
   27bf8:	mov	r4, ip
   27bfc:	str	ip, [sp, #28]
   27c00:	str	ip, [sp, #32]
   27c04:	str	ip, [sp, #56]	; 0x38
   27c08:	ldr	ip, [sp, #36]	; 0x24
   27c0c:	mov	r9, #0
   27c10:	ldr	r0, [sp, #36]	; 0x24
   27c14:	eor	r2, ip, #1
   27c18:	ldr	ip, [sp, #28]
   27c1c:	eor	r3, ip, #1
   27c20:	and	ip, ip, r0
   27c24:	and	r3, r2, r3
   27c28:	str	ip, [sp, #80]	; 0x50
   27c2c:	str	r3, [sp, #48]	; 0x30
   27c30:	cmn	sl, #1
   27c34:	beq	27fb4 <__assert_fail@plt+0x1597c>
   27c38:	subs	r3, r9, sl
   27c3c:	movne	r3, #1
   27c40:	cmp	r3, #0
   27c44:	beq	27fcc <__assert_fail@plt+0x15994>
   27c48:	ldr	ip, [sp, #32]
   27c4c:	adds	r8, ip, #0
   27c50:	ldr	ip, [sp, #28]
   27c54:	movne	r8, #1
   27c58:	ands	r7, r8, ip
   27c5c:	bne	284cc <__assert_fail@plt+0x15e94>
   27c60:	ldr	ip, [sp, #40]	; 0x28
   27c64:	add	r6, ip, r9
   27c68:	ldrb	r5, [r6]
   27c6c:	cmp	r5, #126	; 0x7e
   27c70:	ldrls	pc, [pc, r5, lsl #2]
   27c74:	b	28240 <__assert_fail@plt+0x15c08>
   27c78:	andeq	r8, r2, ip, asr #2
   27c7c:	andeq	r8, r2, r0, asr #4
   27c80:	andeq	r8, r2, r0, asr #4
   27c84:	andeq	r8, r2, r0, asr #4
   27c88:	andeq	r8, r2, r0, asr #4
   27c8c:	andeq	r8, r2, r0, asr #4
   27c90:	andeq	r8, r2, r0, asr #4
   27c94:	andeq	r8, r2, r4, lsr r1
   27c98:	andeq	r8, r2, ip, lsl r1
   27c9c:	andeq	r8, r2, r4, asr #2
   27ca0:	andeq	r8, r2, ip, lsr r1
   27ca4:	andeq	r8, r2, ip, lsr #2
   27ca8:	andeq	r8, r2, r4, lsr #2
   27cac:	andeq	r8, r2, r8, ror #1
   27cb0:	andeq	r8, r2, r0, asr #4
   27cb4:	andeq	r8, r2, r0, asr #4
   27cb8:	andeq	r8, r2, r0, asr #4
   27cbc:	andeq	r8, r2, r0, asr #4
   27cc0:	andeq	r8, r2, r0, asr #4
   27cc4:	andeq	r8, r2, r0, asr #4
   27cc8:	andeq	r8, r2, r0, asr #4
   27ccc:	andeq	r8, r2, r0, asr #4
   27cd0:	andeq	r8, r2, r0, asr #4
   27cd4:	andeq	r8, r2, r0, asr #4
   27cd8:	andeq	r8, r2, r0, asr #4
   27cdc:	andeq	r8, r2, r0, asr #4
   27ce0:	andeq	r8, r2, r0, asr #4
   27ce4:	andeq	r8, r2, r0, asr #4
   27ce8:	andeq	r8, r2, r0, asr #4
   27cec:	andeq	r8, r2, r0, asr #4
   27cf0:	andeq	r8, r2, r0, asr #4
   27cf4:	andeq	r8, r2, r0, asr #4
   27cf8:	andeq	r8, r2, r0, ror r0
   27cfc:	andeq	r8, r2, r0, ror r0
   27d00:	andeq	r8, r2, r0, ror r0
   27d04:	andeq	r8, r2, r8, rrx
   27d08:	andeq	r8, r2, r0, ror r0
   27d0c:	andeq	r7, r2, r0, asr #30
   27d10:	andeq	r8, r2, r0, ror r0
   27d14:	andeq	r8, r2, r8, ror #3
   27d18:	andeq	r8, r2, r0, ror r0
   27d1c:	andeq	r8, r2, r0, ror r0
   27d20:	andeq	r8, r2, r0, ror r0
   27d24:	andeq	r7, r2, r0, asr #30
   27d28:	andeq	r7, r2, r0, asr #30
   27d2c:	andeq	r7, r2, r0, asr #30
   27d30:	andeq	r7, r2, r0, asr #30
   27d34:	andeq	r7, r2, r0, asr #30
   27d38:	andeq	r7, r2, r0, asr #30
   27d3c:	andeq	r7, r2, r0, asr #30
   27d40:	andeq	r7, r2, r0, asr #30
   27d44:	andeq	r7, r2, r0, asr #30
   27d48:	andeq	r7, r2, r0, asr #30
   27d4c:	andeq	r7, r2, r0, asr #30
   27d50:	andeq	r7, r2, r0, asr #30
   27d54:	andeq	r7, r2, r0, asr #30
   27d58:	andeq	r7, r2, r0, asr #30
   27d5c:	andeq	r7, r2, r0, asr #30
   27d60:	andeq	r7, r2, r0, asr #30
   27d64:	andeq	r8, r2, r0, ror r0
   27d68:	andeq	r8, r2, r0, ror r0
   27d6c:	andeq	r8, r2, r0, ror r0
   27d70:	andeq	r8, r2, r0, ror r0
   27d74:	andeq	r7, r2, r4, ror lr
   27d78:	andeq	r8, r2, r0, asr #4
   27d7c:	andeq	r7, r2, r0, asr #30
   27d80:	andeq	r7, r2, r0, asr #30
   27d84:	andeq	r7, r2, r0, asr #30
   27d88:	andeq	r7, r2, r0, asr #30
   27d8c:	andeq	r7, r2, r0, asr #30
   27d90:	andeq	r7, r2, r0, asr #30
   27d94:	andeq	r7, r2, r0, asr #30
   27d98:	andeq	r7, r2, r0, asr #30
   27d9c:	andeq	r7, r2, r0, asr #30
   27da0:	andeq	r7, r2, r0, asr #30
   27da4:	andeq	r7, r2, r0, asr #30
   27da8:	andeq	r7, r2, r0, asr #30
   27dac:	andeq	r7, r2, r0, asr #30
   27db0:	andeq	r7, r2, r0, asr #30
   27db4:	andeq	r7, r2, r0, asr #30
   27db8:	andeq	r7, r2, r0, asr #30
   27dbc:	andeq	r7, r2, r0, asr #30
   27dc0:	andeq	r7, r2, r0, asr #30
   27dc4:	andeq	r7, r2, r0, asr #30
   27dc8:	andeq	r7, r2, r0, asr #30
   27dcc:	andeq	r7, r2, r0, asr #30
   27dd0:	andeq	r7, r2, r0, asr #30
   27dd4:	andeq	r7, r2, r0, asr #30
   27dd8:	andeq	r7, r2, r0, asr #30
   27ddc:	andeq	r7, r2, r0, asr #30
   27de0:	andeq	r7, r2, r0, asr #30
   27de4:	andeq	r8, r2, r0, ror r0
   27de8:	andeq	r8, r2, ip, asr #3
   27dec:	andeq	r7, r2, r0, asr #30
   27df0:	andeq	r8, r2, r0, ror r0
   27df4:	andeq	r7, r2, r0, asr #30
   27df8:	andeq	r8, r2, r0, ror r0
   27dfc:	andeq	r7, r2, r0, asr #30
   27e00:	andeq	r7, r2, r0, asr #30
   27e04:	andeq	r7, r2, r0, asr #30
   27e08:	andeq	r7, r2, r0, asr #30
   27e0c:	andeq	r7, r2, r0, asr #30
   27e10:	andeq	r7, r2, r0, asr #30
   27e14:	andeq	r7, r2, r0, asr #30
   27e18:	andeq	r7, r2, r0, asr #30
   27e1c:	andeq	r7, r2, r0, asr #30
   27e20:	andeq	r7, r2, r0, asr #30
   27e24:	andeq	r7, r2, r0, asr #30
   27e28:	andeq	r7, r2, r0, asr #30
   27e2c:	andeq	r7, r2, r0, asr #30
   27e30:	andeq	r7, r2, r0, asr #30
   27e34:	andeq	r7, r2, r0, asr #30
   27e38:	andeq	r7, r2, r0, asr #30
   27e3c:	andeq	r7, r2, r0, asr #30
   27e40:	andeq	r7, r2, r0, asr #30
   27e44:	andeq	r7, r2, r0, asr #30
   27e48:	andeq	r7, r2, r0, asr #30
   27e4c:	andeq	r7, r2, r0, asr #30
   27e50:	andeq	r7, r2, r0, asr #30
   27e54:	andeq	r7, r2, r0, asr #30
   27e58:	andeq	r7, r2, r0, asr #30
   27e5c:	andeq	r7, r2, r0, asr #30
   27e60:	andeq	r7, r2, r0, asr #30
   27e64:	andeq	r8, r2, r0, asr r0
   27e68:	andeq	r8, r2, r0, ror r0
   27e6c:	andeq	r8, r2, r0, asr r0
   27e70:	andeq	r8, r2, r8, rrx
   27e74:	ldr	ip, [sp, #160]	; 0xa0
   27e78:	cmp	ip, #2
   27e7c:	beq	286d8 <__assert_fail@plt+0x160a0>
   27e80:	cmp	ip, #3
   27e84:	bne	27f40 <__assert_fail@plt+0x15908>
   27e88:	ldr	ip, [sp, #164]	; 0xa4
   27e8c:	tst	ip, #4
   27e90:	beq	27f40 <__assert_fail@plt+0x15908>
   27e94:	add	r3, r9, #2
   27e98:	cmp	sl, r3
   27e9c:	bls	27f40 <__assert_fail@plt+0x15908>
   27ea0:	ldrb	r2, [r6, #1]
   27ea4:	mov	r1, #1
   27ea8:	cmp	r2, #63	; 0x3f
   27eac:	bne	27f40 <__assert_fail@plt+0x15908>
   27eb0:	ldr	r0, [sp, #40]	; 0x28
   27eb4:	ldrb	ip, [r0, r3]
   27eb8:	sub	r0, ip, #33	; 0x21
   27ebc:	uxtb	r0, r0
   27ec0:	cmp	r0, #29
   27ec4:	bhi	27f40 <__assert_fail@plt+0x15908>
   27ec8:	lsl	r1, r1, r0
   27ecc:	movw	r0, #20929	; 0x51c1
   27ed0:	movt	r0, #14336	; 0x3800
   27ed4:	and	r0, r1, r0
   27ed8:	cmp	r0, #0
   27edc:	beq	27f40 <__assert_fail@plt+0x15908>
   27ee0:	ldr	r1, [sp, #36]	; 0x24
   27ee4:	cmp	r1, #0
   27ee8:	bne	2808c <__assert_fail@plt+0x15a54>
   27eec:	cmp	r4, fp
   27ef0:	mov	r5, ip
   27ef4:	mov	r9, r3
   27ef8:	ldrcc	r0, [sp, #44]	; 0x2c
   27efc:	strbcc	r2, [r0, r4]
   27f00:	add	r2, r4, #1
   27f04:	cmp	fp, r2
   27f08:	ldrhi	r0, [sp, #44]	; 0x2c
   27f0c:	movhi	r1, #34	; 0x22
   27f10:	strbhi	r1, [r0, r2]
   27f14:	add	r2, r4, #2
   27f18:	cmp	fp, r2
   27f1c:	ldrhi	r0, [sp, #44]	; 0x2c
   27f20:	movhi	r1, #34	; 0x22
   27f24:	strbhi	r1, [r0, r2]
   27f28:	add	r2, r4, #3
   27f2c:	cmp	fp, r2
   27f30:	add	r4, r4, #4
   27f34:	ldrhi	r0, [sp, #44]	; 0x2c
   27f38:	movhi	r1, #63	; 0x3f
   27f3c:	strbhi	r1, [r0, r2]
   27f40:	ldr	ip, [sp, #48]	; 0x30
   27f44:	cmp	ip, #0
   27f48:	bne	27f70 <__assert_fail@plt+0x15938>
   27f4c:	ldr	ip, [sp, #52]	; 0x34
   27f50:	cmp	ip, #0
   27f54:	beq	27f70 <__assert_fail@plt+0x15938>
   27f58:	ubfx	r3, r5, #5, #8
   27f5c:	and	r2, r5, #31
   27f60:	mov	r1, #1
   27f64:	ldr	r3, [ip, r3, lsl #2]
   27f68:	ands	r3, r3, r1, lsl r2
   27f6c:	bne	27f78 <__assert_fail@plt+0x15940>
   27f70:	cmp	r7, #0
   27f74:	beq	27f98 <__assert_fail@plt+0x15960>
   27f78:	ldr	ip, [sp, #36]	; 0x24
   27f7c:	cmp	ip, #0
   27f80:	bne	2808c <__assert_fail@plt+0x15a54>
   27f84:	cmp	r4, fp
   27f88:	ldrcc	ip, [sp, #44]	; 0x2c
   27f8c:	movcc	r3, #92	; 0x5c
   27f90:	strbcc	r3, [ip, r4]
   27f94:	add	r4, r4, #1
   27f98:	add	r9, r9, #1
   27f9c:	cmp	r4, fp
   27fa0:	ldrcc	ip, [sp, #44]	; 0x2c
   27fa4:	strbcc	r5, [ip, r4]
   27fa8:	cmn	sl, #1
   27fac:	add	r4, r4, #1
   27fb0:	bne	27c38 <__assert_fail@plt+0x15600>
   27fb4:	ldr	ip, [sp, #40]	; 0x28
   27fb8:	ldrb	r3, [ip, r9]
   27fbc:	adds	r3, r3, #0
   27fc0:	movne	r3, #1
   27fc4:	cmp	r3, #0
   27fc8:	bne	27c48 <__assert_fail@plt+0x15610>
   27fcc:	ldr	ip, [sp, #160]	; 0xa0
   27fd0:	cmp	r4, #0
   27fd4:	cmpeq	ip, #2
   27fd8:	bne	27fe8 <__assert_fail@plt+0x159b0>
   27fdc:	ldr	ip, [sp, #36]	; 0x24
   27fe0:	cmp	ip, #0
   27fe4:	bne	2808c <__assert_fail@plt+0x15a54>
   27fe8:	ldr	ip, [sp, #36]	; 0x24
   27fec:	eor	r3, ip, #1
   27ff0:	ldr	ip, [sp, #56]	; 0x38
   27ff4:	cmp	ip, #0
   27ff8:	moveq	r3, #0
   27ffc:	andne	r3, r3, #1
   28000:	cmp	r3, #0
   28004:	beq	28034 <__assert_fail@plt+0x159fc>
   28008:	ldrb	r3, [ip]
   2800c:	cmp	r3, #0
   28010:	beq	28034 <__assert_fail@plt+0x159fc>
   28014:	ldr	r1, [sp, #44]	; 0x2c
   28018:	mov	r2, ip
   2801c:	cmp	fp, r4
   28020:	strbhi	r3, [r1, r4]
   28024:	ldrb	r3, [r2, #1]!
   28028:	add	r4, r4, #1
   2802c:	cmp	r3, #0
   28030:	bne	2801c <__assert_fail@plt+0x159e4>
   28034:	cmp	r4, fp
   28038:	movcs	r0, r4
   2803c:	ldrcc	ip, [sp, #44]	; 0x2c
   28040:	movcc	r3, #0
   28044:	movcc	r0, r4
   28048:	strbcc	r3, [ip, r4]
   2804c:	b	280cc <__assert_fail@plt+0x15a94>
   28050:	cmn	sl, #1
   28054:	beq	286e8 <__assert_fail@plt+0x160b0>
   28058:	subs	r3, sl, #1
   2805c:	movne	r3, #1
   28060:	cmp	r3, #0
   28064:	bne	27f40 <__assert_fail@plt+0x15908>
   28068:	cmp	r9, #0
   2806c:	bne	27f40 <__assert_fail@plt+0x15908>
   28070:	ldr	r3, [sp, #36]	; 0x24
   28074:	ldr	ip, [sp, #160]	; 0xa0
   28078:	cmp	ip, #2
   2807c:	movne	r3, #0
   28080:	andeq	r3, r3, #1
   28084:	cmp	r3, #0
   28088:	beq	27f40 <__assert_fail@plt+0x15908>
   2808c:	ldr	ip, [sp, #164]	; 0xa4
   28090:	mov	r1, fp
   28094:	ldr	r0, [sp, #44]	; 0x2c
   28098:	bic	r3, ip, #2
   2809c:	ldr	ip, [sp, #160]	; 0xa0
   280a0:	str	r3, [sp, #4]
   280a4:	mov	r3, sl
   280a8:	ldr	r2, [sp, #40]	; 0x28
   280ac:	str	ip, [sp]
   280b0:	ldr	ip, [sp, #76]	; 0x4c
   280b4:	str	ip, [sp, #12]
   280b8:	ldr	ip, [sp, #72]	; 0x48
   280bc:	str	ip, [sp, #16]
   280c0:	mov	ip, #0
   280c4:	str	ip, [sp, #8]
   280c8:	bl	27b64 <__assert_fail@plt+0x1552c>
   280cc:	ldr	ip, [sp, #60]	; 0x3c
   280d0:	ldr	r2, [sp, #116]	; 0x74
   280d4:	ldr	r3, [ip]
   280d8:	cmp	r2, r3
   280dc:	bne	287cc <__assert_fail@plt+0x16194>
   280e0:	add	sp, sp, #124	; 0x7c
   280e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280e8:	mov	r3, #114	; 0x72
   280ec:	ldr	r2, [sp, #36]	; 0x24
   280f0:	ldr	ip, [sp, #160]	; 0xa0
   280f4:	cmp	ip, #2
   280f8:	movne	r2, #0
   280fc:	andeq	r2, r2, #1
   28100:	cmp	r2, #0
   28104:	bne	2808c <__assert_fail@plt+0x15a54>
   28108:	ldr	ip, [sp, #28]
   2810c:	cmp	ip, #0
   28110:	beq	27f40 <__assert_fail@plt+0x15908>
   28114:	mov	r5, r3
   28118:	b	27f78 <__assert_fail@plt+0x15940>
   2811c:	mov	r3, #98	; 0x62
   28120:	b	28108 <__assert_fail@plt+0x15ad0>
   28124:	mov	r3, #102	; 0x66
   28128:	b	28108 <__assert_fail@plt+0x15ad0>
   2812c:	mov	r3, #118	; 0x76
   28130:	b	28108 <__assert_fail@plt+0x15ad0>
   28134:	mov	r3, #97	; 0x61
   28138:	b	28108 <__assert_fail@plt+0x15ad0>
   2813c:	mov	r3, #110	; 0x6e
   28140:	b	280ec <__assert_fail@plt+0x15ab4>
   28144:	mov	r3, #116	; 0x74
   28148:	b	280ec <__assert_fail@plt+0x15ab4>
   2814c:	ldr	ip, [sp, #28]
   28150:	cmp	ip, #0
   28154:	beq	286c4 <__assert_fail@plt+0x1608c>
   28158:	ldr	ip, [sp, #36]	; 0x24
   2815c:	cmp	ip, #0
   28160:	bne	2808c <__assert_fail@plt+0x15a54>
   28164:	cmp	r4, fp
   28168:	add	r2, r4, #1
   2816c:	ldrcc	ip, [sp, #44]	; 0x2c
   28170:	movcc	r3, #92	; 0x5c
   28174:	strbcc	r3, [ip, r4]
   28178:	add	r3, r9, #1
   2817c:	cmp	sl, r3
   28180:	bls	281c0 <__assert_fail@plt+0x15b88>
   28184:	ldr	ip, [sp, #40]	; 0x28
   28188:	ldrb	r3, [ip, r3]
   2818c:	sub	r3, r3, #48	; 0x30
   28190:	cmp	r3, #9
   28194:	bhi	281c0 <__assert_fail@plt+0x15b88>
   28198:	cmp	fp, r2
   2819c:	ldrhi	ip, [sp, #44]	; 0x2c
   281a0:	movhi	r3, #48	; 0x30
   281a4:	strbhi	r3, [ip, r2]
   281a8:	add	r3, r4, #2
   281ac:	cmp	fp, r3
   281b0:	ldrhi	ip, [sp, #44]	; 0x2c
   281b4:	movhi	r2, #48	; 0x30
   281b8:	strbhi	r2, [ip, r3]
   281bc:	add	r2, r4, #3
   281c0:	mov	r4, r2
   281c4:	mov	r5, #48	; 0x30
   281c8:	b	27f4c <__assert_fail@plt+0x15914>
   281cc:	ldr	ip, [sp, #80]	; 0x50
   281d0:	cmp	ip, #0
   281d4:	beq	281e0 <__assert_fail@plt+0x15ba8>
   281d8:	cmp	r8, #0
   281dc:	bne	27f98 <__assert_fail@plt+0x15960>
   281e0:	mov	r3, r5
   281e4:	b	280ec <__assert_fail@plt+0x15ab4>
   281e8:	ldr	ip, [sp, #160]	; 0xa0
   281ec:	cmp	ip, #2
   281f0:	bne	27f40 <__assert_fail@plt+0x15908>
   281f4:	ldr	ip, [sp, #36]	; 0x24
   281f8:	cmp	ip, #0
   281fc:	bne	2808c <__assert_fail@plt+0x15a54>
   28200:	cmp	r4, fp
   28204:	ldrcc	ip, [sp, #44]	; 0x2c
   28208:	movcc	r3, #39	; 0x27
   2820c:	strbcc	r3, [ip, r4]
   28210:	add	r3, r4, #1
   28214:	cmp	fp, r3
   28218:	ldrhi	ip, [sp, #44]	; 0x2c
   2821c:	movhi	r2, #92	; 0x5c
   28220:	strbhi	r2, [ip, r3]
   28224:	add	r3, r4, #2
   28228:	cmp	fp, r3
   2822c:	add	r4, r4, #3
   28230:	ldrhi	ip, [sp, #44]	; 0x2c
   28234:	movhi	r2, #39	; 0x27
   28238:	strbhi	r2, [ip, r3]
   2823c:	b	27f40 <__assert_fail@plt+0x15908>
   28240:	ldr	ip, [sp, #68]	; 0x44
   28244:	cmp	ip, #1
   28248:	bne	28518 <__assert_fail@plt+0x15ee0>
   2824c:	bl	122f0 <__ctype_b_loc@plt>
   28250:	sxth	r3, r5
   28254:	ldr	ip, [sp, #68]	; 0x44
   28258:	lsl	r3, r3, #1
   2825c:	str	ip, [sp, #64]	; 0x40
   28260:	ldr	r2, [r0]
   28264:	ldrh	r2, [r2, r3]
   28268:	eor	r2, r2, #16384	; 0x4000
   2826c:	ubfx	r2, r2, #14, #1
   28270:	ldr	ip, [sp, #28]
   28274:	ands	r2, r2, ip
   28278:	beq	27f40 <__assert_fail@plt+0x15908>
   2827c:	ldr	r3, [sp, #64]	; 0x40
   28280:	mov	r0, #92	; 0x5c
   28284:	ldr	r8, [sp, #36]	; 0x24
   28288:	add	r1, r3, r9
   2828c:	str	sl, [sp, #64]	; 0x40
   28290:	ldr	r3, [sp, #44]	; 0x2c
   28294:	b	282f8 <__assert_fail@plt+0x15cc0>
   28298:	cmp	r8, #0
   2829c:	bne	28700 <__assert_fail@plt+0x160c8>
   282a0:	add	ip, r4, #1
   282a4:	cmp	r4, fp
   282a8:	strbcc	r0, [r3, r4]
   282ac:	cmp	fp, ip
   282b0:	lsrhi	sl, r5, #6
   282b4:	addhi	sl, sl, #48	; 0x30
   282b8:	strbhi	sl, [r3, ip]
   282bc:	add	ip, r4, #2
   282c0:	add	r4, r4, #3
   282c4:	cmp	fp, ip
   282c8:	ubfxhi	sl, r5, #3, #3
   282cc:	and	r5, r5, #7
   282d0:	add	r5, r5, #48	; 0x30
   282d4:	addhi	sl, sl, #48	; 0x30
   282d8:	strbhi	sl, [r3, ip]
   282dc:	add	r9, r9, #1
   282e0:	cmp	r1, r9
   282e4:	bls	28324 <__assert_fail@plt+0x15cec>
   282e8:	cmp	r4, fp
   282ec:	strbcc	r5, [r3, r4]
   282f0:	ldrb	r5, [r6, #1]!
   282f4:	add	r4, r4, #1
   282f8:	cmp	r2, #0
   282fc:	bne	28298 <__assert_fail@plt+0x15c60>
   28300:	cmp	r7, #0
   28304:	beq	282dc <__assert_fail@plt+0x15ca4>
   28308:	add	r9, r9, #1
   2830c:	cmp	r4, fp
   28310:	strbcc	r0, [r3, r4]
   28314:	cmp	r1, r9
   28318:	add	r4, r4, #1
   2831c:	mov	r7, #0
   28320:	bhi	282e8 <__assert_fail@plt+0x15cb0>
   28324:	ldr	sl, [sp, #64]	; 0x40
   28328:	b	27f9c <__assert_fail@plt+0x15964>
   2832c:	ldr	ip, [sp, #36]	; 0x24
   28330:	cmp	ip, #0
   28334:	mov	ip, #1
   28338:	str	ip, [sp, #28]
   2833c:	bne	287f4 <__assert_fail@plt+0x161bc>
   28340:	cmp	fp, #0
   28344:	beq	28718 <__assert_fail@plt+0x160e0>
   28348:	str	ip, [sp, #32]
   2834c:	mov	r4, ip
   28350:	ldr	ip, [sp, #44]	; 0x2c
   28354:	mov	r3, #34	; 0x22
   28358:	strb	r3, [ip]
   2835c:	movw	ip, #12372	; 0x3054
   28360:	movt	ip, #3
   28364:	str	ip, [sp, #56]	; 0x38
   28368:	b	27c08 <__assert_fail@plt+0x155d0>
   2836c:	mov	ip, #1
   28370:	mov	r4, #0
   28374:	str	ip, [sp, #36]	; 0x24
   28378:	mov	ip, #1
   2837c:	str	ip, [sp, #28]
   28380:	str	ip, [sp, #32]
   28384:	movw	ip, #12372	; 0x3054
   28388:	movt	ip, #3
   2838c:	str	ip, [sp, #56]	; 0x38
   28390:	mov	ip, #3
   28394:	str	ip, [sp, #160]	; 0xa0
   28398:	b	27c08 <__assert_fail@plt+0x155d0>
   2839c:	mov	ip, #0
   283a0:	str	ip, [sp, #36]	; 0x24
   283a4:	mov	ip, #1
   283a8:	str	ip, [sp, #28]
   283ac:	mov	ip, #0
   283b0:	str	ip, [sp, #32]
   283b4:	str	ip, [sp, #56]	; 0x38
   283b8:	mov	r4, ip
   283bc:	b	27c08 <__assert_fail@plt+0x155d0>
   283c0:	ldr	ip, [sp, #160]	; 0xa0
   283c4:	cmp	ip, #8
   283c8:	beq	283f4 <__assert_fail@plt+0x15dbc>
   283cc:	mov	r1, ip
   283d0:	movw	r0, #12384	; 0x3060
   283d4:	movt	r0, #3
   283d8:	bl	27a1c <__assert_fail@plt+0x153e4>
   283dc:	ldr	r1, [sp, #160]	; 0xa0
   283e0:	str	r0, [sp, #76]	; 0x4c
   283e4:	movw	r0, #57216	; 0xdf80
   283e8:	movt	r0, #2
   283ec:	bl	27a1c <__assert_fail@plt+0x153e4>
   283f0:	str	r0, [sp, #72]	; 0x48
   283f4:	ldr	ip, [sp, #36]	; 0x24
   283f8:	cmp	ip, #0
   283fc:	movne	r4, #0
   28400:	bne	28438 <__assert_fail@plt+0x15e00>
   28404:	ldr	ip, [sp, #76]	; 0x4c
   28408:	ldrb	r3, [ip]
   2840c:	cmp	r3, #0
   28410:	beq	287c4 <__assert_fail@plt+0x1618c>
   28414:	ldr	r4, [sp, #36]	; 0x24
   28418:	mov	r2, ip
   2841c:	ldr	r1, [sp, #44]	; 0x2c
   28420:	cmp	r4, fp
   28424:	strbcc	r3, [r1, r4]
   28428:	ldrb	r3, [r2, #1]!
   2842c:	add	r4, r4, #1
   28430:	cmp	r3, #0
   28434:	bne	28420 <__assert_fail@plt+0x15de8>
   28438:	ldr	r0, [sp, #72]	; 0x48
   2843c:	str	r0, [sp, #56]	; 0x38
   28440:	bl	1232c <strlen@plt>
   28444:	mov	ip, #1
   28448:	str	ip, [sp, #28]
   2844c:	str	r0, [sp, #32]
   28450:	b	27c08 <__assert_fail@plt+0x155d0>
   28454:	mov	ip, #1
   28458:	mov	r4, #0
   2845c:	str	ip, [sp, #36]	; 0x24
   28460:	mov	ip, #0
   28464:	str	ip, [sp, #28]
   28468:	mov	ip, #1
   2846c:	str	ip, [sp, #32]
   28470:	mov	ip, #2
   28474:	str	ip, [sp, #160]	; 0xa0
   28478:	movw	ip, #57216	; 0xdf80
   2847c:	movt	ip, #2
   28480:	str	ip, [sp, #56]	; 0x38
   28484:	b	27c08 <__assert_fail@plt+0x155d0>
   28488:	ldr	ip, [sp, #36]	; 0x24
   2848c:	cmp	ip, #0
   28490:	bne	287d0 <__assert_fail@plt+0x16198>
   28494:	cmp	fp, #0
   28498:	mov	ip, #1
   2849c:	str	ip, [sp, #32]
   284a0:	beq	28734 <__assert_fail@plt+0x160fc>
   284a4:	mov	r4, ip
   284a8:	ldr	ip, [sp, #44]	; 0x2c
   284ac:	mov	r3, #39	; 0x27
   284b0:	strb	r3, [ip]
   284b4:	ldr	ip, [sp, #36]	; 0x24
   284b8:	str	ip, [sp, #28]
   284bc:	movw	ip, #57216	; 0xdf80
   284c0:	movt	ip, #2
   284c4:	str	ip, [sp, #56]	; 0x38
   284c8:	b	27c08 <__assert_fail@plt+0x155d0>
   284cc:	ldr	ip, [sp, #32]
   284d0:	add	r3, r9, ip
   284d4:	ldr	ip, [sp, #40]	; 0x28
   284d8:	cmp	sl, r3
   284dc:	add	r6, ip, r9
   284e0:	bcc	28510 <__assert_fail@plt+0x15ed8>
   284e4:	ldr	r1, [sp, #56]	; 0x38
   284e8:	mov	r0, r6
   284ec:	ldr	r2, [sp, #32]
   284f0:	bl	120b0 <memcmp@plt>
   284f4:	cmp	r0, #0
   284f8:	bne	28510 <__assert_fail@plt+0x15ed8>
   284fc:	ldr	ip, [sp, #36]	; 0x24
   28500:	cmp	ip, #0
   28504:	bne	2808c <__assert_fail@plt+0x15a54>
   28508:	mov	r7, #1
   2850c:	b	27c68 <__assert_fail@plt+0x15630>
   28510:	mov	r7, #0
   28514:	b	27c68 <__assert_fail@plt+0x15630>
   28518:	cmn	sl, #1
   2851c:	mov	r3, #0
   28520:	str	r3, [sp, #108]	; 0x6c
   28524:	str	r3, [sp, #112]	; 0x70
   28528:	beq	28708 <__assert_fail@plt+0x160d0>
   2852c:	ldr	ip, [sp, #40]	; 0x28
   28530:	mov	r1, #0
   28534:	str	r6, [sp, #100]	; 0x64
   28538:	ldr	r6, [sp, #36]	; 0x24
   2853c:	sub	ip, ip, #1
   28540:	str	ip, [sp, #84]	; 0x54
   28544:	mov	ip, #1
   28548:	str	r5, [sp, #92]	; 0x5c
   2854c:	mov	r5, r1
   28550:	str	r7, [sp, #96]	; 0x60
   28554:	mov	r7, ip
   28558:	str	r1, [sp, #64]	; 0x40
   2855c:	str	r4, [sp, #88]	; 0x58
   28560:	ldr	ip, [sp, #40]	; 0x28
   28564:	add	r8, r5, r9
   28568:	rsb	r2, r8, sl
   2856c:	add	r0, sp, #104	; 0x68
   28570:	add	r4, ip, r8
   28574:	add	r3, sp, #108	; 0x6c
   28578:	mov	r1, r4
   2857c:	bl	12218 <mbrtowc@plt>
   28580:	subs	r2, r0, #0
   28584:	beq	2868c <__assert_fail@plt+0x16054>
   28588:	cmn	r2, #1
   2858c:	beq	287a8 <__assert_fail@plt+0x16170>
   28590:	cmn	r2, #2
   28594:	beq	2874c <__assert_fail@plt+0x16114>
   28598:	ldr	ip, [sp, #160]	; 0xa0
   2859c:	cmp	ip, #2
   285a0:	movne	r3, #0
   285a4:	andeq	r3, r6, #1
   285a8:	cmp	r3, #0
   285ac:	beq	28668 <__assert_fail@plt+0x16030>
   285b0:	cmp	r2, #1
   285b4:	beq	28668 <__assert_fail@plt+0x16030>
   285b8:	ldr	ip, [sp, #84]	; 0x54
   285bc:	add	r3, ip, r2
   285c0:	add	r8, r3, r8
   285c4:	ldrb	r3, [r4, #1]!
   285c8:	sub	r3, r3, #91	; 0x5b
   285cc:	cmp	r3, #33	; 0x21
   285d0:	ldrls	pc, [pc, r3, lsl #2]
   285d4:	b	28660 <__assert_fail@plt+0x16028>
   285d8:	andeq	r8, r2, ip, lsl #1
   285dc:	andeq	r8, r2, ip, lsl #1
   285e0:	andeq	r8, r2, r0, ror #12
   285e4:	andeq	r8, r2, ip, lsl #1
   285e8:	andeq	r8, r2, r0, ror #12
   285ec:	andeq	r8, r2, ip, lsl #1
   285f0:	andeq	r8, r2, r0, ror #12
   285f4:	andeq	r8, r2, r0, ror #12
   285f8:	andeq	r8, r2, r0, ror #12
   285fc:	andeq	r8, r2, r0, ror #12
   28600:	andeq	r8, r2, r0, ror #12
   28604:	andeq	r8, r2, r0, ror #12
   28608:	andeq	r8, r2, r0, ror #12
   2860c:	andeq	r8, r2, r0, ror #12
   28610:	andeq	r8, r2, r0, ror #12
   28614:	andeq	r8, r2, r0, ror #12
   28618:	andeq	r8, r2, r0, ror #12
   2861c:	andeq	r8, r2, r0, ror #12
   28620:	andeq	r8, r2, r0, ror #12
   28624:	andeq	r8, r2, r0, ror #12
   28628:	andeq	r8, r2, r0, ror #12
   2862c:	andeq	r8, r2, r0, ror #12
   28630:	andeq	r8, r2, r0, ror #12
   28634:	andeq	r8, r2, r0, ror #12
   28638:	andeq	r8, r2, r0, ror #12
   2863c:	andeq	r8, r2, r0, ror #12
   28640:	andeq	r8, r2, r0, ror #12
   28644:	andeq	r8, r2, r0, ror #12
   28648:	andeq	r8, r2, r0, ror #12
   2864c:	andeq	r8, r2, r0, ror #12
   28650:	andeq	r8, r2, r0, ror #12
   28654:	andeq	r8, r2, r0, ror #12
   28658:	andeq	r8, r2, r0, ror #12
   2865c:	andeq	r8, r2, ip, lsl #1
   28660:	cmp	r4, r8
   28664:	bne	285c4 <__assert_fail@plt+0x15f8c>
   28668:	ldr	r0, [sp, #104]	; 0x68
   2866c:	add	r5, r5, r2
   28670:	bl	12158 <iswprint@plt>
   28674:	cmp	r0, #0
   28678:	add	r0, sp, #108	; 0x6c
   2867c:	moveq	r7, #0
   28680:	bl	12080 <mbsinit@plt>
   28684:	cmp	r0, #0
   28688:	beq	28560 <__assert_fail@plt+0x15f28>
   2868c:	mov	ip, r7
   28690:	eor	r2, ip, #1
   28694:	str	r5, [sp, #64]	; 0x40
   28698:	ldr	r4, [sp, #88]	; 0x58
   2869c:	uxtb	r2, r2
   286a0:	ldr	r5, [sp, #92]	; 0x5c
   286a4:	ldr	r7, [sp, #96]	; 0x60
   286a8:	ldr	r6, [sp, #100]	; 0x64
   286ac:	ldr	r1, [sp, #64]	; 0x40
   286b0:	cmp	r1, #1
   286b4:	bls	28270 <__assert_fail@plt+0x15c38>
   286b8:	ldr	ip, [sp, #28]
   286bc:	and	r2, r2, ip
   286c0:	b	2827c <__assert_fail@plt+0x15c44>
   286c4:	ldr	ip, [sp, #164]	; 0xa4
   286c8:	tst	ip, #1
   286cc:	addne	r9, r9, #1
   286d0:	bne	27c30 <__assert_fail@plt+0x155f8>
   286d4:	b	27f40 <__assert_fail@plt+0x15908>
   286d8:	ldr	ip, [sp, #36]	; 0x24
   286dc:	cmp	ip, #0
   286e0:	beq	27f40 <__assert_fail@plt+0x15908>
   286e4:	b	2808c <__assert_fail@plt+0x15a54>
   286e8:	ldr	ip, [sp, #40]	; 0x28
   286ec:	ldrb	r3, [ip, #1]
   286f0:	adds	r3, r3, #0
   286f4:	movne	r3, #1
   286f8:	b	28060 <__assert_fail@plt+0x15a28>
   286fc:	bl	125cc <abort@plt>
   28700:	ldr	sl, [sp, #64]	; 0x40
   28704:	b	2808c <__assert_fail@plt+0x15a54>
   28708:	ldr	r0, [sp, #40]	; 0x28
   2870c:	bl	1232c <strlen@plt>
   28710:	mov	sl, r0
   28714:	b	2852c <__assert_fail@plt+0x15ef4>
   28718:	mov	ip, #1
   2871c:	str	ip, [sp, #32]
   28720:	mov	r4, ip
   28724:	movw	ip, #12372	; 0x3054
   28728:	movt	ip, #3
   2872c:	str	ip, [sp, #56]	; 0x38
   28730:	b	27c08 <__assert_fail@plt+0x155d0>
   28734:	movw	ip, #57216	; 0xdf80
   28738:	mov	r4, #1
   2873c:	movt	ip, #2
   28740:	str	fp, [sp, #28]
   28744:	str	ip, [sp, #56]	; 0x38
   28748:	b	27c08 <__assert_fail@plt+0x155d0>
   2874c:	cmp	sl, r8
   28750:	str	r5, [sp, #64]	; 0x40
   28754:	mov	ip, r4
   28758:	ldr	r7, [sp, #96]	; 0x60
   2875c:	ldr	r5, [sp, #92]	; 0x5c
   28760:	ldr	r4, [sp, #88]	; 0x58
   28764:	ldr	r6, [sp, #100]	; 0x64
   28768:	bls	287a0 <__assert_fail@plt+0x16168>
   2876c:	ldrb	r3, [ip]
   28770:	cmp	r3, #0
   28774:	beq	287a0 <__assert_fail@plt+0x16168>
   28778:	ldr	r3, [sp, #64]	; 0x40
   2877c:	b	2878c <__assert_fail@plt+0x16154>
   28780:	ldrb	r2, [r6, r3]
   28784:	cmp	r2, #0
   28788:	beq	2879c <__assert_fail@plt+0x16164>
   2878c:	add	r3, r3, #1
   28790:	add	r2, r9, r3
   28794:	cmp	sl, r2
   28798:	bhi	28780 <__assert_fail@plt+0x16148>
   2879c:	str	r3, [sp, #64]	; 0x40
   287a0:	mov	r2, #1
   287a4:	b	286ac <__assert_fail@plt+0x16074>
   287a8:	str	r5, [sp, #64]	; 0x40
   287ac:	mov	r2, #1
   287b0:	ldr	r4, [sp, #88]	; 0x58
   287b4:	ldr	r7, [sp, #96]	; 0x60
   287b8:	ldr	r5, [sp, #92]	; 0x5c
   287bc:	ldr	r6, [sp, #100]	; 0x64
   287c0:	b	286ac <__assert_fail@plt+0x16074>
   287c4:	ldr	r4, [sp, #36]	; 0x24
   287c8:	b	28438 <__assert_fail@plt+0x15e00>
   287cc:	bl	120e0 <__stack_chk_fail@plt>
   287d0:	mov	ip, #0
   287d4:	mov	r4, #0
   287d8:	str	ip, [sp, #28]
   287dc:	movw	ip, #57216	; 0xdf80
   287e0:	movt	ip, #2
   287e4:	str	ip, [sp, #56]	; 0x38
   287e8:	mov	ip, #1
   287ec:	str	ip, [sp, #32]
   287f0:	b	27c08 <__assert_fail@plt+0x155d0>
   287f4:	mov	ip, #1
   287f8:	mov	r4, #0
   287fc:	str	ip, [sp, #32]
   28800:	movw	ip, #12372	; 0x3054
   28804:	movt	ip, #3
   28808:	str	ip, [sp, #56]	; 0x38
   2880c:	b	27c08 <__assert_fail@plt+0x155d0>
   28810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28814:	sub	sp, sp, #44	; 0x2c
   28818:	mov	r6, r0
   2881c:	mov	r9, r1
   28820:	mov	sl, r2
   28824:	mov	r4, r3
   28828:	bl	1238c <__errno_location@plt>
   2882c:	movw	r7, #21824	; 0x5540
   28830:	cmp	r6, #0
   28834:	movt	r7, #4
   28838:	ldr	r5, [r7]
   2883c:	ldr	r1, [r0]
   28840:	mov	r8, r0
   28844:	str	r1, [sp, #36]	; 0x24
   28848:	blt	289b8 <__assert_fail@plt+0x16380>
   2884c:	ldr	r3, [r7, #4]
   28850:	cmp	r6, r3
   28854:	bcc	288a0 <__assert_fail@plt+0x16268>
   28858:	add	fp, r6, #1
   2885c:	cmn	fp, #-536870911	; 0xe0000001
   28860:	bhi	289bc <__assert_fail@plt+0x16384>
   28864:	add	r3, r7, #8
   28868:	cmp	r5, r3
   2886c:	beq	28990 <__assert_fail@plt+0x16358>
   28870:	mov	r0, r5
   28874:	lsl	r1, fp, #3
   28878:	bl	2962c <__assert_fail@plt+0x16ff4>
   2887c:	mov	r5, r0
   28880:	str	r0, [r7]
   28884:	ldr	r0, [r7, #4]
   28888:	mov	r1, #0
   2888c:	rsb	r2, r0, fp
   28890:	add	r0, r5, r0, lsl #3
   28894:	lsl	r2, r2, #3
   28898:	bl	123bc <memset@plt>
   2889c:	str	fp, [r7, #4]
   288a0:	add	r2, r4, #8
   288a4:	str	r2, [sp, #32]
   288a8:	ldr	r1, [r4]
   288ac:	add	fp, r5, r6, lsl #3
   288b0:	ldr	lr, [sp, #32]
   288b4:	mov	r2, r9
   288b8:	ldr	r3, [r4, #4]
   288bc:	ldr	ip, [r5, r6, lsl #3]
   288c0:	ldr	r7, [fp, #4]
   288c4:	orr	r3, r3, #1
   288c8:	str	r1, [sp]
   288cc:	str	r3, [sp, #4]
   288d0:	mov	r1, ip
   288d4:	str	lr, [sp, #8]
   288d8:	mov	r0, r7
   288dc:	ldr	lr, [r4, #40]	; 0x28
   288e0:	str	r3, [sp, #28]
   288e4:	mov	r3, sl
   288e8:	str	lr, [sp, #12]
   288ec:	ldr	lr, [r4, #44]	; 0x2c
   288f0:	str	ip, [sp, #24]
   288f4:	str	lr, [sp, #16]
   288f8:	bl	27b64 <__assert_fail@plt+0x1552c>
   288fc:	ldr	ip, [sp, #24]
   28900:	cmp	ip, r0
   28904:	bhi	2897c <__assert_fail@plt+0x16344>
   28908:	movw	r3, #23996	; 0x5dbc
   2890c:	movt	r3, #4
   28910:	cmp	r7, r3
   28914:	add	r1, r0, #1
   28918:	str	r1, [r5, r6, lsl #3]
   2891c:	beq	28930 <__assert_fail@plt+0x162f8>
   28920:	mov	r0, r7
   28924:	str	r1, [sp, #24]
   28928:	bl	12020 <free@plt>
   2892c:	ldr	r1, [sp, #24]
   28930:	mov	r0, r1
   28934:	str	r1, [sp, #24]
   28938:	bl	29604 <__assert_fail@plt+0x16fcc>
   2893c:	ldr	ip, [r4]
   28940:	ldr	r3, [sp, #28]
   28944:	mov	r2, r9
   28948:	ldr	lr, [sp, #32]
   2894c:	ldr	r1, [sp, #24]
   28950:	str	r0, [fp, #4]
   28954:	mov	r7, r0
   28958:	str	r3, [sp, #4]
   2895c:	mov	r3, sl
   28960:	str	lr, [sp, #8]
   28964:	str	ip, [sp]
   28968:	ldr	ip, [r4, #40]	; 0x28
   2896c:	str	ip, [sp, #12]
   28970:	ldr	ip, [r4, #44]	; 0x2c
   28974:	str	ip, [sp, #16]
   28978:	bl	27b64 <__assert_fail@plt+0x1552c>
   2897c:	ldr	r1, [sp, #36]	; 0x24
   28980:	mov	r0, r7
   28984:	str	r1, [r8]
   28988:	add	sp, sp, #44	; 0x2c
   2898c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28990:	lsl	r1, fp, #3
   28994:	mov	r0, #0
   28998:	str	r3, [sp, #24]
   2899c:	bl	2962c <__assert_fail@plt+0x16ff4>
   289a0:	ldr	r3, [sp, #24]
   289a4:	mov	r5, r0
   289a8:	ldm	r3, {r0, r1}
   289ac:	str	r5, [r7]
   289b0:	stm	r5, {r0, r1}
   289b4:	b	28884 <__assert_fail@plt+0x1624c>
   289b8:	bl	125cc <abort@plt>
   289bc:	bl	2973c <__assert_fail@plt+0x17104>
   289c0:	push	{r4, r5, r6, lr}
   289c4:	mov	r5, r0
   289c8:	bl	1238c <__errno_location@plt>
   289cc:	cmp	r5, #0
   289d0:	mov	r1, #48	; 0x30
   289d4:	mov	r4, r0
   289d8:	ldr	r0, [pc, #16]	; 289f0 <__assert_fail@plt+0x163b8>
   289dc:	ldr	r6, [r4]
   289e0:	movne	r0, r5
   289e4:	bl	296fc <__assert_fail@plt+0x170c4>
   289e8:	str	r6, [r4]
   289ec:	pop	{r4, r5, r6, pc}
   289f0:			; <UNDEFINED> instruction: 0x00045ebc
   289f4:	ldr	r3, [pc, #12]	; 28a08 <__assert_fail@plt+0x163d0>
   289f8:	cmp	r0, #0
   289fc:	moveq	r0, r3
   28a00:	ldr	r0, [r0]
   28a04:	bx	lr
   28a08:			; <UNDEFINED> instruction: 0x00045ebc
   28a0c:	ldr	r3, [pc, #12]	; 28a20 <__assert_fail@plt+0x163e8>
   28a10:	cmp	r0, #0
   28a14:	moveq	r0, r3
   28a18:	str	r1, [r0]
   28a1c:	bx	lr
   28a20:			; <UNDEFINED> instruction: 0x00045ebc
   28a24:	ldr	r3, [pc, #48]	; 28a5c <__assert_fail@plt+0x16424>
   28a28:	lsr	ip, r1, #5
   28a2c:	cmp	r0, #0
   28a30:	and	r1, r1, #31
   28a34:	moveq	r0, r3
   28a38:	add	r3, r0, ip, lsl #2
   28a3c:	ldr	ip, [r3, #8]
   28a40:	lsr	r0, ip, r1
   28a44:	eor	r2, r0, r2
   28a48:	and	r0, r0, #1
   28a4c:	and	r2, r2, #1
   28a50:	eor	ip, ip, r2, lsl r1
   28a54:	str	ip, [r3, #8]
   28a58:	bx	lr
   28a5c:			; <UNDEFINED> instruction: 0x00045ebc
   28a60:	ldr	r3, [pc, #16]	; 28a78 <__assert_fail@plt+0x16440>
   28a64:	cmp	r0, #0
   28a68:	movne	r3, r0
   28a6c:	ldr	r0, [r3, #4]
   28a70:	str	r1, [r3, #4]
   28a74:	bx	lr
   28a78:			; <UNDEFINED> instruction: 0x00045ebc
   28a7c:	push	{r3, lr}
   28a80:	cmp	r0, #0
   28a84:	ldr	r3, [pc, #32]	; 28aac <__assert_fail@plt+0x16474>
   28a88:	mov	ip, #8
   28a8c:	moveq	r0, r3
   28a90:	cmp	r2, #0
   28a94:	cmpne	r1, #0
   28a98:	str	ip, [r0]
   28a9c:	strne	r1, [r0, #40]	; 0x28
   28aa0:	strne	r2, [r0, #44]	; 0x2c
   28aa4:	popne	{r3, pc}
   28aa8:	bl	125cc <abort@plt>
   28aac:			; <UNDEFINED> instruction: 0x00045ebc
   28ab0:	push	{r4, r5, r6, r7, r8, r9, lr}
   28ab4:	sub	sp, sp, #28
   28ab8:	mov	r6, r0
   28abc:	ldr	r0, [pc, #100]	; 28b28 <__assert_fail@plt+0x164f0>
   28ac0:	ldr	r4, [sp, #56]	; 0x38
   28ac4:	mov	r9, r1
   28ac8:	mov	r8, r2
   28acc:	mov	r7, r3
   28ad0:	cmp	r4, #0
   28ad4:	moveq	r4, r0
   28ad8:	bl	1238c <__errno_location@plt>
   28adc:	ldr	ip, [r4]
   28ae0:	add	lr, r4, #8
   28ae4:	mov	r1, r9
   28ae8:	mov	r2, r8
   28aec:	mov	r3, r7
   28af0:	mov	r5, r0
   28af4:	mov	r0, r6
   28af8:	ldr	r6, [r5]
   28afc:	str	ip, [sp]
   28b00:	ldr	ip, [r4, #4]
   28b04:	stmib	sp, {ip, lr}
   28b08:	ldr	ip, [r4, #40]	; 0x28
   28b0c:	str	ip, [sp, #12]
   28b10:	ldr	ip, [r4, #44]	; 0x2c
   28b14:	str	ip, [sp, #16]
   28b18:	bl	27b64 <__assert_fail@plt+0x1552c>
   28b1c:	str	r6, [r5]
   28b20:	add	sp, sp, #28
   28b24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28b28:			; <UNDEFINED> instruction: 0x00045ebc
   28b2c:	cmp	r3, #0
   28b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b34:	sub	sp, sp, #36	; 0x24
   28b38:	ldr	r4, [pc, #196]	; 28c04 <__assert_fail@plt+0x165cc>
   28b3c:	mov	r5, r2
   28b40:	movne	r4, r3
   28b44:	mov	r6, r1
   28b48:	mov	r7, r0
   28b4c:	bl	1238c <__errno_location@plt>
   28b50:	ldr	r1, [r4]
   28b54:	add	r9, r4, #8
   28b58:	ldr	sl, [r4, #4]
   28b5c:	mov	r2, r7
   28b60:	mov	r8, r0
   28b64:	mov	r0, #0
   28b68:	ldr	r3, [r8]
   28b6c:	cmp	r5, r0
   28b70:	orreq	sl, sl, #1
   28b74:	str	r9, [sp, #8]
   28b78:	stm	sp, {r1, sl}
   28b7c:	mov	r1, r0
   28b80:	ldr	ip, [r4, #40]	; 0x28
   28b84:	str	r3, [sp, #28]
   28b88:	mov	r3, r6
   28b8c:	str	ip, [sp, #12]
   28b90:	ldr	ip, [r4, #44]	; 0x2c
   28b94:	str	ip, [sp, #16]
   28b98:	bl	27b64 <__assert_fail@plt+0x1552c>
   28b9c:	add	r1, r0, #1
   28ba0:	mov	fp, r0
   28ba4:	str	r1, [sp, #24]
   28ba8:	mov	r0, r1
   28bac:	bl	29604 <__assert_fail@plt+0x16fcc>
   28bb0:	ldr	lr, [r4]
   28bb4:	str	sl, [sp, #4]
   28bb8:	mov	r3, r6
   28bbc:	str	r9, [sp, #8]
   28bc0:	mov	r2, r7
   28bc4:	str	lr, [sp]
   28bc8:	ldr	lr, [r4, #40]	; 0x28
   28bcc:	ldr	r1, [sp, #24]
   28bd0:	str	lr, [sp, #12]
   28bd4:	ldr	lr, [r4, #44]	; 0x2c
   28bd8:	str	lr, [sp, #16]
   28bdc:	str	r0, [sp, #24]
   28be0:	bl	27b64 <__assert_fail@plt+0x1552c>
   28be4:	ldr	ip, [sp, #24]
   28be8:	cmp	r5, #0
   28bec:	ldr	r3, [sp, #28]
   28bf0:	mov	r0, ip
   28bf4:	str	r3, [r8]
   28bf8:	strne	fp, [r5]
   28bfc:	add	sp, sp, #36	; 0x24
   28c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c04:			; <UNDEFINED> instruction: 0x00045ebc
   28c08:	mov	r3, r2
   28c0c:	mov	r2, #0
   28c10:	b	28b2c <__assert_fail@plt+0x164f4>
   28c14:	push	{r4, r5, r6, r7, r8, lr}
   28c18:	movw	r7, #21824	; 0x5540
   28c1c:	movt	r7, #4
   28c20:	ldr	r6, [r7, #4]
   28c24:	ldr	r8, [r7]
   28c28:	cmp	r6, #1
   28c2c:	movhi	r5, r8
   28c30:	movhi	r4, #1
   28c34:	bls	28c50 <__assert_fail@plt+0x16618>
   28c38:	ldr	r0, [r5, #12]
   28c3c:	add	r4, r4, #1
   28c40:	bl	12020 <free@plt>
   28c44:	cmp	r4, r6
   28c48:	add	r5, r5, #8
   28c4c:	bne	28c38 <__assert_fail@plt+0x16600>
   28c50:	ldr	r0, [r8, #4]
   28c54:	movw	r4, #23996	; 0x5dbc
   28c58:	movt	r4, #4
   28c5c:	cmp	r0, r4
   28c60:	beq	28c74 <__assert_fail@plt+0x1663c>
   28c64:	bl	12020 <free@plt>
   28c68:	mov	r3, #256	; 0x100
   28c6c:	str	r4, [r7, #12]
   28c70:	str	r3, [r7, #8]
   28c74:	movw	r4, #21824	; 0x5540
   28c78:	movt	r4, #4
   28c7c:	add	r5, r4, #8
   28c80:	cmp	r8, r5
   28c84:	beq	28c94 <__assert_fail@plt+0x1665c>
   28c88:	mov	r0, r8
   28c8c:	bl	12020 <free@plt>
   28c90:	str	r5, [r4]
   28c94:	mov	r3, #1
   28c98:	str	r3, [r7, #4]
   28c9c:	pop	{r4, r5, r6, r7, r8, pc}
   28ca0:	mvn	r2, #0
   28ca4:	ldr	r3, [pc]	; 28cac <__assert_fail@plt+0x16674>
   28ca8:	b	28810 <__assert_fail@plt+0x161d8>
   28cac:			; <UNDEFINED> instruction: 0x00045ebc
   28cb0:	ldr	r3, [pc]	; 28cb8 <__assert_fail@plt+0x16680>
   28cb4:	b	28810 <__assert_fail@plt+0x161d8>
   28cb8:			; <UNDEFINED> instruction: 0x00045ebc
   28cbc:	mov	r1, r0
   28cc0:	mvn	r2, #0
   28cc4:	mov	r0, #0
   28cc8:	ldr	r3, [pc]	; 28cd0 <__assert_fail@plt+0x16698>
   28ccc:	b	28810 <__assert_fail@plt+0x161d8>
   28cd0:			; <UNDEFINED> instruction: 0x00045ebc
   28cd4:	mov	r2, r1
   28cd8:	ldr	r3, [pc, #8]	; 28ce8 <__assert_fail@plt+0x166b0>
   28cdc:	mov	r1, r0
   28ce0:	mov	r0, #0
   28ce4:	b	28810 <__assert_fail@plt+0x161d8>
   28ce8:			; <UNDEFINED> instruction: 0x00045ebc
   28cec:	push	{r4, r5, r6, lr}
   28cf0:	movw	r4, #21904	; 0x5590
   28cf4:	movt	r4, #4
   28cf8:	sub	sp, sp, #56	; 0x38
   28cfc:	mov	r6, r2
   28d00:	mov	r5, r0
   28d04:	ldr	r3, [r4]
   28d08:	add	r0, sp, #4
   28d0c:	str	r3, [sp, #52]	; 0x34
   28d10:	bl	279c8 <__assert_fail@plt+0x15390>
   28d14:	add	r3, sp, #4
   28d18:	mvn	r2, #0
   28d1c:	mov	r0, r5
   28d20:	mov	r1, r6
   28d24:	bl	28810 <__assert_fail@plt+0x161d8>
   28d28:	ldr	r2, [sp, #52]	; 0x34
   28d2c:	ldr	r3, [r4]
   28d30:	cmp	r2, r3
   28d34:	bne	28d40 <__assert_fail@plt+0x16708>
   28d38:	add	sp, sp, #56	; 0x38
   28d3c:	pop	{r4, r5, r6, pc}
   28d40:	bl	120e0 <__stack_chk_fail@plt>
   28d44:	push	{r4, r5, r6, r7, lr}
   28d48:	movw	r4, #21904	; 0x5590
   28d4c:	movt	r4, #4
   28d50:	sub	sp, sp, #60	; 0x3c
   28d54:	mov	r6, r2
   28d58:	mov	r7, r3
   28d5c:	ldr	ip, [r4]
   28d60:	mov	r5, r0
   28d64:	add	r0, sp, #4
   28d68:	str	ip, [sp, #52]	; 0x34
   28d6c:	bl	279c8 <__assert_fail@plt+0x15390>
   28d70:	mov	r2, r7
   28d74:	add	r3, sp, #4
   28d78:	mov	r0, r5
   28d7c:	mov	r1, r6
   28d80:	bl	28810 <__assert_fail@plt+0x161d8>
   28d84:	ldr	r2, [sp, #52]	; 0x34
   28d88:	ldr	r3, [r4]
   28d8c:	cmp	r2, r3
   28d90:	bne	28d9c <__assert_fail@plt+0x16764>
   28d94:	add	sp, sp, #60	; 0x3c
   28d98:	pop	{r4, r5, r6, r7, pc}
   28d9c:	bl	120e0 <__stack_chk_fail@plt>
   28da0:	mov	r2, r1
   28da4:	mov	r1, r0
   28da8:	mov	r0, #0
   28dac:	b	28cec <__assert_fail@plt+0x166b4>
   28db0:	mov	ip, r1
   28db4:	mov	r3, r2
   28db8:	mov	r1, r0
   28dbc:	mov	r2, ip
   28dc0:	mov	r0, #0
   28dc4:	b	28d44 <__assert_fail@plt+0x1670c>
   28dc8:	push	{r4, r5, r6, r7, r8, r9, lr}
   28dcc:	mov	r8, r0
   28dd0:	ldr	lr, [pc, #144]	; 28e68 <__assert_fail@plt+0x16830>
   28dd4:	mov	r7, r1
   28dd8:	mov	r6, r2
   28ddc:	lsr	r5, r2, #5
   28de0:	sub	sp, sp, #60	; 0x3c
   28de4:	add	r5, r5, #2
   28de8:	ldm	lr!, {r0, r1, r2, r3}
   28dec:	add	ip, sp, #4
   28df0:	add	r9, sp, #56	; 0x38
   28df4:	and	r6, r6, #31
   28df8:	add	r5, r9, r5, lsl #2
   28dfc:	movw	r4, #21904	; 0x5590
   28e00:	movt	r4, #4
   28e04:	stmia	ip!, {r0, r1, r2, r3}
   28e08:	ldm	lr!, {r0, r1, r2, r3}
   28e0c:	ldr	r9, [r4]
   28e10:	stmia	ip!, {r0, r1, r2, r3}
   28e14:	ldm	lr, {r0, r1, r2, r3}
   28e18:	str	r9, [sp, #52]	; 0x34
   28e1c:	stm	ip, {r0, r1, r2, r3}
   28e20:	mov	r2, r7
   28e24:	ldr	ip, [r5, #-52]	; 0xffffffcc
   28e28:	add	r3, sp, #4
   28e2c:	mov	r1, r8
   28e30:	mov	r0, #0
   28e34:	lsr	lr, ip, r6
   28e38:	eor	lr, lr, #1
   28e3c:	and	lr, lr, #1
   28e40:	eor	ip, ip, lr, lsl r6
   28e44:	str	ip, [r5, #-52]	; 0xffffffcc
   28e48:	bl	28810 <__assert_fail@plt+0x161d8>
   28e4c:	ldr	r2, [sp, #52]	; 0x34
   28e50:	ldr	r3, [r4]
   28e54:	cmp	r2, r3
   28e58:	bne	28e64 <__assert_fail@plt+0x1682c>
   28e5c:	add	sp, sp, #60	; 0x3c
   28e60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28e64:	bl	120e0 <__stack_chk_fail@plt>
   28e68:			; <UNDEFINED> instruction: 0x00045ebc
   28e6c:	mov	r2, r1
   28e70:	mvn	r1, #0
   28e74:	b	28dc8 <__assert_fail@plt+0x16790>
   28e78:	mvn	r1, #0
   28e7c:	mov	r2, #58	; 0x3a
   28e80:	b	28dc8 <__assert_fail@plt+0x16790>
   28e84:	mov	r2, #58	; 0x3a
   28e88:	b	28dc8 <__assert_fail@plt+0x16790>
   28e8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28e90:	mov	r7, r0
   28e94:	ldr	lr, [pc, #124]	; 28f18 <__assert_fail@plt+0x168e0>
   28e98:	mov	r9, r1
   28e9c:	mov	r8, r2
   28ea0:	mov	r6, r3
   28ea4:	sub	sp, sp, #56	; 0x38
   28ea8:	movw	r4, #21904	; 0x5590
   28eac:	ldm	lr!, {r0, r1, r2, r3}
   28eb0:	add	ip, sp, #4
   28eb4:	movt	r4, #4
   28eb8:	ldr	r5, [sp, #88]	; 0x58
   28ebc:	ldr	sl, [r4]
   28ec0:	stmia	ip!, {r0, r1, r2, r3}
   28ec4:	ldm	lr!, {r0, r1, r2, r3}
   28ec8:	str	sl, [sp, #52]	; 0x34
   28ecc:	stmia	ip!, {r0, r1, r2, r3}
   28ed0:	ldm	lr, {r0, r1, r2, r3}
   28ed4:	stm	ip, {r0, r1, r2, r3}
   28ed8:	mov	r1, r9
   28edc:	mov	r2, r8
   28ee0:	add	r0, sp, #4
   28ee4:	bl	28a7c <__assert_fail@plt+0x16444>
   28ee8:	mov	r2, r5
   28eec:	add	r3, sp, #4
   28ef0:	mov	r0, r7
   28ef4:	mov	r1, r6
   28ef8:	bl	28810 <__assert_fail@plt+0x161d8>
   28efc:	ldr	r2, [sp, #52]	; 0x34
   28f00:	ldr	r3, [r4]
   28f04:	cmp	r2, r3
   28f08:	bne	28f14 <__assert_fail@plt+0x168dc>
   28f0c:	add	sp, sp, #56	; 0x38
   28f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28f14:	bl	120e0 <__stack_chk_fail@plt>
   28f18:			; <UNDEFINED> instruction: 0x00045ebc
   28f1c:	push	{lr}		; (str lr, [sp, #-4]!)
   28f20:	sub	sp, sp, #12
   28f24:	mvn	ip, #0
   28f28:	str	ip, [sp]
   28f2c:	bl	28e8c <__assert_fail@plt+0x16854>
   28f30:	add	sp, sp, #12
   28f34:	pop	{pc}		; (ldr pc, [sp], #4)
   28f38:	push	{lr}		; (str lr, [sp, #-4]!)
   28f3c:	sub	sp, sp, #12
   28f40:	mov	ip, r1
   28f44:	mov	r3, r2
   28f48:	mov	r1, r0
   28f4c:	mov	r2, ip
   28f50:	mov	r0, #0
   28f54:	mvn	ip, #0
   28f58:	str	ip, [sp]
   28f5c:	bl	28e8c <__assert_fail@plt+0x16854>
   28f60:	add	sp, sp, #12
   28f64:	pop	{pc}		; (ldr pc, [sp], #4)
   28f68:	push	{lr}		; (str lr, [sp, #-4]!)
   28f6c:	sub	sp, sp, #12
   28f70:	mov	lr, r1
   28f74:	mov	ip, r2
   28f78:	mov	r1, r0
   28f7c:	str	r3, [sp]
   28f80:	mov	r2, lr
   28f84:	mov	r3, ip
   28f88:	mov	r0, #0
   28f8c:	bl	28e8c <__assert_fail@plt+0x16854>
   28f90:	add	sp, sp, #12
   28f94:	pop	{pc}		; (ldr pc, [sp], #4)
   28f98:	ldr	r3, [pc]	; 28fa0 <__assert_fail@plt+0x16968>
   28f9c:	b	28810 <__assert_fail@plt+0x161d8>
   28fa0:	andeq	r5, r4, r0, asr r5
   28fa4:	mov	r2, r1
   28fa8:	ldr	r3, [pc, #8]	; 28fb8 <__assert_fail@plt+0x16980>
   28fac:	mov	r1, r0
   28fb0:	mov	r0, #0
   28fb4:	b	28810 <__assert_fail@plt+0x161d8>
   28fb8:	andeq	r5, r4, r0, asr r5
   28fbc:	mvn	r2, #0
   28fc0:	ldr	r3, [pc]	; 28fc8 <__assert_fail@plt+0x16990>
   28fc4:	b	28810 <__assert_fail@plt+0x161d8>
   28fc8:	andeq	r5, r4, r0, asr r5
   28fcc:	mov	r1, r0
   28fd0:	mvn	r2, #0
   28fd4:	mov	r0, #0
   28fd8:	ldr	r3, [pc]	; 28fe0 <__assert_fail@plt+0x169a8>
   28fdc:	b	28810 <__assert_fail@plt+0x161d8>
   28fe0:	andeq	r5, r4, r0, asr r5
   28fe4:	push	{r3, r4, r5, lr}
   28fe8:	mov	r4, #0
   28fec:	mov	r5, r0
   28ff0:	str	r4, [r0, #4]
   28ff4:	mov	r1, r4
   28ff8:	movw	r0, #528	; 0x210
   28ffc:	movt	r0, #3
   29000:	bl	21c38 <__assert_fail@plt+0xf600>
   29004:	cmp	r0, r4
   29008:	str	r0, [r5]
   2900c:	blt	29020 <__assert_fail@plt+0x169e8>
   29010:	mov	r1, #1
   29014:	bl	21720 <__assert_fail@plt+0xf0e8>
   29018:	mov	r0, r4
   2901c:	pop	{r3, r4, r5, pc}
   29020:	mov	r0, r4
   29024:	mov	r1, r4
   29028:	bl	122fc <getcwd@plt>
   2902c:	str	r0, [r5, #4]
   29030:	cmp	r0, r4
   29034:	movne	r0, #0
   29038:	mvneq	r0, #0
   2903c:	pop	{r3, r4, r5, pc}
   29040:	ldr	r3, [r0]
   29044:	cmp	r3, #0
   29048:	blt	29054 <__assert_fail@plt+0x16a1c>
   2904c:	mov	r0, r3
   29050:	b	12524 <fchdir@plt>
   29054:	ldr	r0, [r0, #4]
   29058:	b	2a58c <__assert_fail@plt+0x17f54>
   2905c:	push	{r4, lr}
   29060:	mov	r4, r0
   29064:	ldr	r0, [r0]
   29068:	cmp	r0, #0
   2906c:	blt	29074 <__assert_fail@plt+0x16a3c>
   29070:	bl	125d8 <close@plt>
   29074:	ldr	r0, [r4, #4]
   29078:	pop	{r4, lr}
   2907c:	b	12020 <free@plt>
   29080:	push	{r3, r4, r5, lr}
   29084:	mov	r4, r1
   29088:	mov	r2, r4
   2908c:	mov	r1, #0
   29090:	mov	r5, r0
   29094:	bl	12434 <memchr@plt>
   29098:	cmp	r0, #0
   2909c:	rsbne	r0, r5, r0
   290a0:	addne	r0, r0, #1
   290a4:	moveq	r0, r4
   290a8:	pop	{r3, r4, r5, pc}
   290ac:	mov	r1, #0
   290b0:	mov	r2, #3
   290b4:	b	2a868 <__assert_fail@plt+0x18230>
   290b8:	cmp	r0, #2
   290bc:	push	{r3, r4, r5, r6, r7, lr}
   290c0:	mov	r4, r0
   290c4:	bhi	290ec <__assert_fail@plt+0x16ab4>
   290c8:	bl	290ac <__assert_fail@plt+0x16a74>
   290cc:	mov	r7, r0
   290d0:	bl	1238c <__errno_location@plt>
   290d4:	ldr	r6, [r0]
   290d8:	mov	r5, r0
   290dc:	mov	r0, r4
   290e0:	mov	r4, r7
   290e4:	bl	125d8 <close@plt>
   290e8:	str	r6, [r5]
   290ec:	mov	r0, r4
   290f0:	pop	{r3, r4, r5, r6, r7, pc}
   290f4:	push	{r4, r5, r6, lr}
   290f8:	cmp	r1, #0
   290fc:	sub	sp, sp, #32
   29100:	mov	ip, r3
   29104:	mov	r5, r0
   29108:	ldr	r4, [sp, #48]	; 0x30
   2910c:	ldr	r6, [sp, #52]	; 0x34
   29110:	beq	29454 <__assert_fail@plt+0x16e1c>
   29114:	str	r2, [sp]
   29118:	mov	r3, r1
   2911c:	movw	r2, #12452	; 0x30a4
   29120:	str	ip, [sp, #4]
   29124:	mov	r1, #1
   29128:	movt	r2, #3
   2912c:	bl	12428 <__fprintf_chk@plt>
   29130:	mov	r2, #5
   29134:	movw	r1, #12472	; 0x30b8
   29138:	mov	r0, #0
   2913c:	movt	r1, #3
   29140:	bl	120d4 <dcgettext@plt>
   29144:	movw	r1, #2012	; 0x7dc
   29148:	movw	r2, #13232	; 0x33b0
   2914c:	str	r1, [sp]
   29150:	movt	r2, #3
   29154:	mov	r1, #1
   29158:	mov	r3, r0
   2915c:	mov	r0, r5
   29160:	bl	12428 <__fprintf_chk@plt>
   29164:	movw	r1, #12476	; 0x30bc
   29168:	mov	r0, #0
   2916c:	movt	r1, #3
   29170:	mov	r2, #5
   29174:	bl	120d4 <dcgettext@plt>
   29178:	mov	r1, r5
   2917c:	bl	125a8 <fputs@plt>
   29180:	cmp	r6, #9
   29184:	ldrls	pc, [pc, r6, lsl #2]
   29188:	b	29470 <__assert_fail@plt+0x16e38>
   2918c:	andeq	r9, r2, r0, lsr #4
   29190:	andeq	r9, r2, r4, lsr #4
   29194:	andeq	r9, r2, r4, asr r2
   29198:	andeq	r9, r2, r8, lsl #5
   2919c:	andeq	r9, r2, r4, asr #5
   291a0:	andeq	r9, r2, r4, lsl #6
   291a4:	andeq	r9, r2, ip, asr #6
   291a8:	muleq	r2, ip, r3
   291ac:	strdeq	r9, [r2], -r4
   291b0:			; <UNDEFINED> instruction: 0x000291b4
   291b4:	movw	r1, #12948	; 0x3294
   291b8:	movt	r1, #3
   291bc:	mov	r0, #0
   291c0:	mov	r2, #5
   291c4:	bl	120d4 <dcgettext@plt>
   291c8:	ldm	r4, {r3, ip}
   291cc:	mov	r1, #1
   291d0:	str	ip, [sp]
   291d4:	ldr	ip, [r4, #8]
   291d8:	str	ip, [sp, #4]
   291dc:	ldr	ip, [r4, #12]
   291e0:	str	ip, [sp, #8]
   291e4:	ldr	ip, [r4, #16]
   291e8:	str	ip, [sp, #12]
   291ec:	ldr	ip, [r4, #20]
   291f0:	str	ip, [sp, #16]
   291f4:	ldr	ip, [r4, #24]
   291f8:	str	ip, [sp, #20]
   291fc:	ldr	ip, [r4, #28]
   29200:	str	ip, [sp, #24]
   29204:	ldr	ip, [r4, #32]
   29208:	str	ip, [sp, #28]
   2920c:	mov	r2, r0
   29210:	mov	r0, r5
   29214:	bl	12428 <__fprintf_chk@plt>
   29218:	add	sp, sp, #32
   2921c:	pop	{r4, r5, r6, pc}
   29220:	bl	125cc <abort@plt>
   29224:	mov	r2, #5
   29228:	movw	r1, #12680	; 0x3188
   2922c:	mov	r0, #0
   29230:	movt	r1, #3
   29234:	bl	120d4 <dcgettext@plt>
   29238:	ldr	r3, [r4]
   2923c:	mov	r1, #1
   29240:	mov	r2, r0
   29244:	mov	r0, r5
   29248:	add	sp, sp, #32
   2924c:	pop	{r4, r5, r6, lr}
   29250:	b	12428 <__fprintf_chk@plt>
   29254:	mov	r2, #5
   29258:	movw	r1, #12696	; 0x3198
   2925c:	mov	r0, #0
   29260:	movt	r1, #3
   29264:	bl	120d4 <dcgettext@plt>
   29268:	ldm	r4, {r3, ip}
   2926c:	mov	r1, #1
   29270:	str	ip, [sp, #48]	; 0x30
   29274:	mov	r2, r0
   29278:	mov	r0, r5
   2927c:	add	sp, sp, #32
   29280:	pop	{r4, r5, r6, lr}
   29284:	b	12428 <__fprintf_chk@plt>
   29288:	mov	r2, #5
   2928c:	movw	r1, #12720	; 0x31b0
   29290:	mov	r0, #0
   29294:	movt	r1, #3
   29298:	bl	120d4 <dcgettext@plt>
   2929c:	ldm	r4, {r3, ip}
   292a0:	mov	r1, #1
   292a4:	str	ip, [sp, #48]	; 0x30
   292a8:	ldr	ip, [r4, #8]
   292ac:	str	ip, [sp, #52]	; 0x34
   292b0:	mov	r2, r0
   292b4:	mov	r0, r5
   292b8:	add	sp, sp, #32
   292bc:	pop	{r4, r5, r6, lr}
   292c0:	b	12428 <__fprintf_chk@plt>
   292c4:	mov	r2, #5
   292c8:	movw	r1, #12748	; 0x31cc
   292cc:	mov	r0, #0
   292d0:	movt	r1, #3
   292d4:	bl	120d4 <dcgettext@plt>
   292d8:	ldm	r4, {r3, ip}
   292dc:	mov	r1, #1
   292e0:	str	ip, [sp]
   292e4:	ldr	ip, [r4, #8]
   292e8:	str	ip, [sp, #4]
   292ec:	ldr	ip, [r4, #12]
   292f0:	str	ip, [sp, #8]
   292f4:	mov	r2, r0
   292f8:	mov	r0, r5
   292fc:	bl	12428 <__fprintf_chk@plt>
   29300:	b	29218 <__assert_fail@plt+0x16be0>
   29304:	mov	r2, #5
   29308:	movw	r1, #12780	; 0x31ec
   2930c:	mov	r0, #0
   29310:	movt	r1, #3
   29314:	bl	120d4 <dcgettext@plt>
   29318:	ldm	r4, {r3, ip}
   2931c:	mov	r1, #1
   29320:	str	ip, [sp]
   29324:	ldr	ip, [r4, #8]
   29328:	str	ip, [sp, #4]
   2932c:	ldr	ip, [r4, #12]
   29330:	str	ip, [sp, #8]
   29334:	ldr	ip, [r4, #16]
   29338:	str	ip, [sp, #12]
   2933c:	mov	r2, r0
   29340:	mov	r0, r5
   29344:	bl	12428 <__fprintf_chk@plt>
   29348:	b	29218 <__assert_fail@plt+0x16be0>
   2934c:	mov	r2, #5
   29350:	movw	r1, #12816	; 0x3210
   29354:	mov	r0, #0
   29358:	movt	r1, #3
   2935c:	bl	120d4 <dcgettext@plt>
   29360:	ldm	r4, {r3, ip}
   29364:	mov	r1, #1
   29368:	str	ip, [sp]
   2936c:	ldr	ip, [r4, #8]
   29370:	str	ip, [sp, #4]
   29374:	ldr	ip, [r4, #12]
   29378:	str	ip, [sp, #8]
   2937c:	ldr	ip, [r4, #16]
   29380:	str	ip, [sp, #12]
   29384:	ldr	ip, [r4, #20]
   29388:	str	ip, [sp, #16]
   2938c:	mov	r2, r0
   29390:	mov	r0, r5
   29394:	bl	12428 <__fprintf_chk@plt>
   29398:	b	29218 <__assert_fail@plt+0x16be0>
   2939c:	mov	r2, #5
   293a0:	movw	r1, #12856	; 0x3238
   293a4:	mov	r0, #0
   293a8:	movt	r1, #3
   293ac:	bl	120d4 <dcgettext@plt>
   293b0:	ldm	r4, {r3, ip}
   293b4:	mov	r1, #1
   293b8:	str	ip, [sp]
   293bc:	ldr	ip, [r4, #8]
   293c0:	str	ip, [sp, #4]
   293c4:	ldr	ip, [r4, #12]
   293c8:	str	ip, [sp, #8]
   293cc:	ldr	ip, [r4, #16]
   293d0:	str	ip, [sp, #12]
   293d4:	ldr	ip, [r4, #20]
   293d8:	str	ip, [sp, #16]
   293dc:	ldr	ip, [r4, #24]
   293e0:	str	ip, [sp, #20]
   293e4:	mov	r2, r0
   293e8:	mov	r0, r5
   293ec:	bl	12428 <__fprintf_chk@plt>
   293f0:	b	29218 <__assert_fail@plt+0x16be0>
   293f4:	mov	r2, #5
   293f8:	movw	r1, #12900	; 0x3264
   293fc:	mov	r0, #0
   29400:	movt	r1, #3
   29404:	bl	120d4 <dcgettext@plt>
   29408:	ldm	r4, {r3, ip}
   2940c:	mov	r1, #1
   29410:	str	ip, [sp]
   29414:	ldr	ip, [r4, #8]
   29418:	str	ip, [sp, #4]
   2941c:	ldr	ip, [r4, #12]
   29420:	str	ip, [sp, #8]
   29424:	ldr	ip, [r4, #16]
   29428:	str	ip, [sp, #12]
   2942c:	ldr	ip, [r4, #20]
   29430:	str	ip, [sp, #16]
   29434:	ldr	ip, [r4, #24]
   29438:	str	ip, [sp, #20]
   2943c:	ldr	ip, [r4, #28]
   29440:	str	ip, [sp, #24]
   29444:	mov	r2, r0
   29448:	mov	r0, r5
   2944c:	bl	12428 <__fprintf_chk@plt>
   29450:	b	29218 <__assert_fail@plt+0x16be0>
   29454:	str	r3, [sp]
   29458:	mov	r1, #1
   2945c:	mov	r3, r2
   29460:	movw	r2, #12464	; 0x30b0
   29464:	movt	r2, #3
   29468:	bl	12428 <__fprintf_chk@plt>
   2946c:	b	29130 <__assert_fail@plt+0x16af8>
   29470:	movw	r1, #13000	; 0x32c8
   29474:	mov	r0, #0
   29478:	movt	r1, #3
   2947c:	b	291c0 <__assert_fail@plt+0x16b88>
   29480:	push	{r4, r5, lr}
   29484:	sub	sp, sp, #12
   29488:	ldr	r5, [sp, #24]
   2948c:	ldr	ip, [r5]
   29490:	cmp	ip, #0
   29494:	beq	294b0 <__assert_fail@plt+0x16e78>
   29498:	mov	lr, r5
   2949c:	mov	ip, #0
   294a0:	ldr	r4, [lr, #4]!
   294a4:	add	ip, ip, #1
   294a8:	cmp	r4, #0
   294ac:	bne	294a0 <__assert_fail@plt+0x16e68>
   294b0:	stm	sp, {r5, ip}
   294b4:	bl	290f4 <__assert_fail@plt+0x16abc>
   294b8:	add	sp, sp, #12
   294bc:	pop	{r4, r5, pc}
   294c0:	push	{r4, r5, r6, r7, lr}
   294c4:	movw	r7, #21904	; 0x5590
   294c8:	sub	sp, sp, #60	; 0x3c
   294cc:	movt	r7, #4
   294d0:	mov	ip, #0
   294d4:	add	r5, sp, #12
   294d8:	ldr	r4, [r7]
   294dc:	mov	lr, ip
   294e0:	ldr	r6, [sp, #80]	; 0x50
   294e4:	str	r4, [sp, #52]	; 0x34
   294e8:	ldr	r4, [r6, ip]
   294ec:	cmp	r4, #0
   294f0:	str	r4, [r5, ip]
   294f4:	beq	29508 <__assert_fail@plt+0x16ed0>
   294f8:	add	lr, lr, #1
   294fc:	add	ip, ip, #4
   29500:	cmp	lr, #10
   29504:	bne	294e8 <__assert_fail@plt+0x16eb0>
   29508:	stm	sp, {r5, lr}
   2950c:	bl	290f4 <__assert_fail@plt+0x16abc>
   29510:	ldr	r2, [sp, #52]	; 0x34
   29514:	ldr	r3, [r7]
   29518:	cmp	r2, r3
   2951c:	bne	29528 <__assert_fail@plt+0x16ef0>
   29520:	add	sp, sp, #60	; 0x3c
   29524:	pop	{r4, r5, r6, r7, pc}
   29528:	bl	120e0 <__stack_chk_fail@plt>
   2952c:	push	{r3}		; (str r3, [sp, #-4]!)
   29530:	push	{r4, lr}
   29534:	movw	r4, #21904	; 0x5590
   29538:	movt	r4, #4
   2953c:	sub	sp, sp, #20
   29540:	add	ip, sp, #32
   29544:	ldr	lr, [r4]
   29548:	ldr	r3, [sp, #28]
   2954c:	str	ip, [sp]
   29550:	str	ip, [sp, #8]
   29554:	str	lr, [sp, #12]
   29558:	bl	294c0 <__assert_fail@plt+0x16e88>
   2955c:	ldr	r2, [sp, #12]
   29560:	ldr	r3, [r4]
   29564:	cmp	r2, r3
   29568:	bne	2957c <__assert_fail@plt+0x16f44>
   2956c:	add	sp, sp, #20
   29570:	pop	{r4, lr}
   29574:	add	sp, sp, #4
   29578:	bx	lr
   2957c:	bl	120e0 <__stack_chk_fail@plt>
   29580:	push	{r3, lr}
   29584:	mov	r2, #5
   29588:	movw	r1, #13060	; 0x3304
   2958c:	mov	r0, #0
   29590:	movt	r1, #3
   29594:	bl	120d4 <dcgettext@plt>
   29598:	movw	r2, #13084	; 0x331c
   2959c:	movt	r2, #3
   295a0:	mov	r1, r0
   295a4:	mov	r0, #1
   295a8:	bl	123f8 <__printf_chk@plt>
   295ac:	mov	r2, #5
   295b0:	movw	r1, #13108	; 0x3334
   295b4:	mov	r0, #0
   295b8:	movt	r1, #3
   295bc:	bl	120d4 <dcgettext@plt>
   295c0:	movw	r2, #6980	; 0x1b44
   295c4:	movw	r3, #13128	; 0x3348
   295c8:	movt	r2, #3
   295cc:	movt	r3, #3
   295d0:	mov	r1, r0
   295d4:	mov	r0, #1
   295d8:	bl	123f8 <__printf_chk@plt>
   295dc:	movw	r1, #13168	; 0x3370
   295e0:	mov	r0, #0
   295e4:	movt	r1, #3
   295e8:	mov	r2, #5
   295ec:	bl	120d4 <dcgettext@plt>
   295f0:	movw	r3, #21920	; 0x55a0
   295f4:	movt	r3, #4
   295f8:	ldr	r1, [r3]
   295fc:	pop	{r3, lr}
   29600:	b	125a8 <fputs@plt>
   29604:	push	{r4, lr}
   29608:	mov	r4, r0
   2960c:	bl	12284 <malloc@plt>
   29610:	rsbs	r3, r0, #1
   29614:	movcc	r3, #0
   29618:	cmp	r4, #0
   2961c:	moveq	r3, #0
   29620:	cmp	r3, #0
   29624:	popeq	{r4, pc}
   29628:	bl	2973c <__assert_fail@plt+0x17104>
   2962c:	rsbs	r3, r1, #1
   29630:	push	{r4, lr}
   29634:	movcc	r3, #0
   29638:	cmp	r0, #0
   2963c:	mov	r4, r1
   29640:	moveq	r3, #0
   29644:	cmp	r3, #0
   29648:	bne	2966c <__assert_fail@plt+0x17034>
   2964c:	bl	12104 <realloc@plt>
   29650:	rsbs	r3, r0, #1
   29654:	movcc	r3, #0
   29658:	cmp	r4, #0
   2965c:	moveq	r3, #0
   29660:	cmp	r3, #0
   29664:	popeq	{r4, pc}
   29668:	bl	2973c <__assert_fail@plt+0x17104>
   2966c:	bl	12020 <free@plt>
   29670:	mov	r0, #0
   29674:	pop	{r4, pc}
   29678:	cmp	r0, #0
   2967c:	push	{r3, lr}
   29680:	ldr	r3, [r1]
   29684:	beq	296b0 <__assert_fail@plt+0x17078>
   29688:	movw	r2, #43689	; 0xaaa9
   2968c:	movt	r2, #43690	; 0xaaaa
   29690:	cmp	r3, r2
   29694:	addls	r2, r3, #1
   29698:	addls	r3, r3, r2, lsr #1
   2969c:	bhi	296c8 <__assert_fail@plt+0x17090>
   296a0:	str	r3, [r1]
   296a4:	mov	r1, r3
   296a8:	pop	{r3, lr}
   296ac:	b	2962c <__assert_fail@plt+0x16ff4>
   296b0:	cmp	r3, #0
   296b4:	moveq	r3, #64	; 0x40
   296b8:	str	r3, [r1]
   296bc:	mov	r1, r3
   296c0:	pop	{r3, lr}
   296c4:	b	2962c <__assert_fail@plt+0x16ff4>
   296c8:	bl	2973c <__assert_fail@plt+0x17104>
   296cc:	push	{r4, lr}
   296d0:	mov	r4, r0
   296d4:	bl	29604 <__assert_fail@plt+0x16fcc>
   296d8:	mov	r2, r4
   296dc:	mov	r1, #0
   296e0:	pop	{r4, lr}
   296e4:	b	123bc <memset@plt>
   296e8:	push	{r3, lr}
   296ec:	bl	11f6c <calloc@plt>
   296f0:	cmp	r0, #0
   296f4:	popne	{r3, pc}
   296f8:	bl	2973c <__assert_fail@plt+0x17104>
   296fc:	push	{r3, r4, r5, lr}
   29700:	mov	r4, r1
   29704:	mov	r5, r0
   29708:	mov	r0, r1
   2970c:	bl	29604 <__assert_fail@plt+0x16fcc>
   29710:	mov	r1, r5
   29714:	mov	r2, r4
   29718:	pop	{r3, r4, r5, lr}
   2971c:	b	1205c <memcpy@plt>
   29720:	push	{r4, lr}
   29724:	mov	r4, r0
   29728:	bl	1232c <strlen@plt>
   2972c:	add	r1, r0, #1
   29730:	mov	r0, r4
   29734:	pop	{r4, lr}
   29738:	b	296fc <__assert_fail@plt+0x170c4>
   2973c:	movw	r3, #21820	; 0x553c
   29740:	movt	r3, #4
   29744:	push	{r4, lr}
   29748:	mov	r2, #5
   2974c:	movw	r1, #13280	; 0x33e0
   29750:	mov	r0, #0
   29754:	movt	r1, #3
   29758:	ldr	r4, [r3]
   2975c:	bl	120d4 <dcgettext@plt>
   29760:	movw	r2, #8288	; 0x2060
   29764:	mov	r1, #0
   29768:	movt	r2, #3
   2976c:	mov	r3, r0
   29770:	mov	r0, r4
   29774:	bl	12224 <error@plt>
   29778:	bl	125cc <abort@plt>
   2977c:	push	{r3, lr}
   29780:	bl	12140 <__strndup@plt>
   29784:	cmp	r0, #0
   29788:	popne	{r3, pc}
   2978c:	bl	2973c <__assert_fail@plt+0x17104>
   29790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29794:	movw	r4, #21904	; 0x5590
   29798:	movt	r4, #4
   2979c:	mov	r5, r1
   297a0:	sub	sp, sp, #8
   297a4:	mov	r6, r0
   297a8:	ldr	r1, [r4]
   297ac:	mov	sl, r3
   297b0:	mov	r9, r2
   297b4:	mov	r8, #0
   297b8:	str	r1, [sp, #4]
   297bc:	bl	1238c <__errno_location@plt>
   297c0:	mov	r1, sp
   297c4:	mov	r7, r0
   297c8:	mov	r0, r6
   297cc:	str	r8, [r7]
   297d0:	blx	sl
   297d4:	ldr	r3, [sp]
   297d8:	cmp	r3, r6
   297dc:	beq	2982c <__assert_fail@plt+0x171f4>
   297e0:	cmp	r5, r8
   297e4:	beq	29834 <__assert_fail@plt+0x171fc>
   297e8:	vcmp.f64	d0, #0.0
   297ec:	vmrs	APSR_nzcv, fpscr
   297f0:	moveq	r0, #1
   297f4:	bne	2981c <__assert_fail@plt+0x171e4>
   297f8:	cmp	r5, #0
   297fc:	strne	r3, [r5]
   29800:	ldr	r2, [sp, #4]
   29804:	vstr	d0, [r9]
   29808:	ldr	r3, [r4]
   2980c:	cmp	r2, r3
   29810:	bne	29848 <__assert_fail@plt+0x17210>
   29814:	add	sp, sp, #8
   29818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2981c:	ldr	r0, [r7]
   29820:	subs	r0, r0, #34	; 0x22
   29824:	movne	r0, #1
   29828:	b	297f8 <__assert_fail@plt+0x171c0>
   2982c:	mov	r0, r8
   29830:	b	297f8 <__assert_fail@plt+0x171c0>
   29834:	ldrb	r2, [r3]
   29838:	cmp	r2, r8
   2983c:	movne	r0, r5
   29840:	bne	29800 <__assert_fail@plt+0x171c8>
   29844:	b	297e8 <__assert_fail@plt+0x171b0>
   29848:	bl	120e0 <__stack_chk_fail@plt>
   2984c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29850:	movw	r5, #21904	; 0x5590
   29854:	movt	r5, #4
   29858:	mov	sl, r2
   2985c:	cmp	r2, #36	; 0x24
   29860:	sub	sp, sp, #20
   29864:	ldr	r2, [r5]
   29868:	mov	r6, r0
   2986c:	mov	r7, r1
   29870:	mov	r9, r3
   29874:	ldr	r8, [sp, #56]	; 0x38
   29878:	str	r2, [sp, #12]
   2987c:	bhi	29d44 <__assert_fail@plt+0x1770c>
   29880:	cmp	r1, #0
   29884:	addeq	r7, sp, #8
   29888:	bl	122f0 <__ctype_b_loc@plt>
   2988c:	ldrb	ip, [r6]
   29890:	mov	r2, r6
   29894:	ldr	r1, [r0]
   29898:	b	298a0 <__assert_fail@plt+0x17268>
   2989c:	ldrb	ip, [r2, #1]!
   298a0:	lsl	r3, ip, #1
   298a4:	ldrh	r4, [r1, r3]
   298a8:	and	r4, r4, #8192	; 0x2000
   298ac:	uxth	r4, r4
   298b0:	cmp	r4, #0
   298b4:	bne	2989c <__assert_fail@plt+0x17264>
   298b8:	cmp	ip, #45	; 0x2d
   298bc:	bne	298dc <__assert_fail@plt+0x172a4>
   298c0:	mov	r0, #4
   298c4:	ldr	r2, [sp, #12]
   298c8:	ldr	r3, [r5]
   298cc:	cmp	r2, r3
   298d0:	bne	29d40 <__assert_fail@plt+0x17708>
   298d4:	add	sp, sp, #20
   298d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298dc:	bl	1238c <__errno_location@plt>
   298e0:	mov	r2, sl
   298e4:	mov	r1, r7
   298e8:	str	r4, [r0]
   298ec:	mov	fp, r0
   298f0:	mov	r0, r6
   298f4:	bl	12320 <strtoul@plt>
   298f8:	ldr	r3, [r7]
   298fc:	cmp	r3, r6
   29900:	mov	sl, r0
   29904:	beq	29a94 <__assert_fail@plt+0x1745c>
   29908:	ldr	r0, [fp]
   2990c:	cmp	r0, #0
   29910:	bne	29940 <__assert_fail@plt+0x17308>
   29914:	mov	r4, r0
   29918:	cmp	r8, #0
   2991c:	streq	sl, [r9]
   29920:	moveq	r0, r4
   29924:	beq	298c4 <__assert_fail@plt+0x1728c>
   29928:	ldrb	r6, [r3]
   2992c:	cmp	r6, #0
   29930:	bne	29950 <__assert_fail@plt+0x17318>
   29934:	mov	r0, r4
   29938:	str	sl, [r9]
   2993c:	b	298c4 <__assert_fail@plt+0x1728c>
   29940:	cmp	r0, #34	; 0x22
   29944:	moveq	r4, #1
   29948:	bne	298c0 <__assert_fail@plt+0x17288>
   2994c:	b	29918 <__assert_fail@plt+0x172e0>
   29950:	mov	r0, r8
   29954:	mov	r1, r6
   29958:	str	r3, [sp, #4]
   2995c:	bl	12338 <strchr@plt>
   29960:	ldr	r3, [sp, #4]
   29964:	cmp	r0, #0
   29968:	beq	29acc <__assert_fail@plt+0x17494>
   2996c:	mov	r0, r8
   29970:	mov	r1, #48	; 0x30
   29974:	str	r3, [sp, #4]
   29978:	bl	12338 <strchr@plt>
   2997c:	ldr	r3, [sp, #4]
   29980:	cmp	r0, #0
   29984:	beq	299a4 <__assert_fail@plt+0x1736c>
   29988:	ldrb	r2, [r3, #1]
   2998c:	cmp	r2, #68	; 0x44
   29990:	beq	29d28 <__assert_fail@plt+0x176f0>
   29994:	cmp	r2, #105	; 0x69
   29998:	beq	29d10 <__assert_fail@plt+0x176d8>
   2999c:	cmp	r2, #66	; 0x42
   299a0:	beq	29d28 <__assert_fail@plt+0x176f0>
   299a4:	mov	r8, #1
   299a8:	mov	fp, #1024	; 0x400
   299ac:	sub	r6, r6, #66	; 0x42
   299b0:	cmp	r6, #53	; 0x35
   299b4:	ldrls	pc, [pc, r6, lsl #2]
   299b8:	b	29acc <__assert_fail@plt+0x17494>
   299bc:			; <UNDEFINED> instruction: 0x00029cbc
   299c0:	andeq	r9, r2, ip, asr #21
   299c4:	andeq	r9, r2, ip, asr #21
   299c8:	andeq	r9, r2, ip, ror ip
   299cc:	andeq	r9, r2, ip, asr #21
   299d0:	ldrdeq	r9, [r2], -r0
   299d4:	andeq	r9, r2, ip, asr #21
   299d8:	andeq	r9, r2, ip, asr #21
   299dc:	andeq	r9, r2, ip, asr #21
   299e0:	andeq	r9, r2, ip, asr ip
   299e4:	andeq	r9, r2, ip, asr #21
   299e8:	andeq	r9, r2, r8, lsr #24
   299ec:	andeq	r9, r2, ip, asr #21
   299f0:	andeq	r9, r2, ip, asr #21
   299f4:	andeq	r9, r2, r8, ror #23
   299f8:	andeq	r9, r2, ip, asr #21
   299fc:	andeq	r9, r2, ip, asr #21
   29a00:	andeq	r9, r2, ip, asr #21
   29a04:	andeq	r9, r2, r8, lsr #23
   29a08:	andeq	r9, r2, ip, asr #21
   29a0c:	andeq	r9, r2, ip, asr #21
   29a10:	andeq	r9, r2, ip, asr #21
   29a14:	andeq	r9, r2, ip, asr #21
   29a18:	andeq	r9, r2, r8, ror #22
   29a1c:	andeq	r9, r2, r8, lsr #22
   29a20:	andeq	r9, r2, ip, asr #21
   29a24:	andeq	r9, r2, ip, asr #21
   29a28:	andeq	r9, r2, ip, asr #21
   29a2c:	andeq	r9, r2, ip, asr #21
   29a30:	andeq	r9, r2, ip, asr #21
   29a34:	andeq	r9, r2, ip, asr #21
   29a38:	andeq	r9, r2, ip, asr #21
   29a3c:	andeq	r9, r2, r4, lsl fp
   29a40:	ldrdeq	r9, [r2], -r8
   29a44:	andeq	r9, r2, ip, asr #21
   29a48:	andeq	r9, r2, ip, asr #21
   29a4c:	andeq	r9, r2, ip, asr #21
   29a50:	ldrdeq	r9, [r2], -r0
   29a54:	andeq	r9, r2, ip, asr #21
   29a58:	andeq	r9, r2, ip, asr #21
   29a5c:	andeq	r9, r2, ip, asr #21
   29a60:	andeq	r9, r2, ip, asr ip
   29a64:	andeq	r9, r2, ip, asr #21
   29a68:	andeq	r9, r2, r8, lsr #24
   29a6c:	andeq	r9, r2, ip, asr #21
   29a70:	andeq	r9, r2, ip, asr #21
   29a74:	andeq	r9, r2, ip, asr #21
   29a78:	andeq	r9, r2, ip, asr #21
   29a7c:	andeq	r9, r2, ip, asr #21
   29a80:	andeq	r9, r2, ip, asr #21
   29a84:	andeq	r9, r2, r8, lsr #23
   29a88:	andeq	r9, r2, ip, asr #21
   29a8c:	andeq	r9, r2, ip, asr #21
   29a90:	strdeq	r9, [r2], -r8
   29a94:	cmp	r8, #0
   29a98:	beq	298c0 <__assert_fail@plt+0x17288>
   29a9c:	ldrb	r6, [r6]
   29aa0:	cmp	r6, #0
   29aa4:	beq	298c0 <__assert_fail@plt+0x17288>
   29aa8:	mov	r0, r8
   29aac:	mov	r1, r6
   29ab0:	str	r3, [sp, #4]
   29ab4:	bl	12338 <strchr@plt>
   29ab8:	ldr	r3, [sp, #4]
   29abc:	cmp	r0, #0
   29ac0:	movne	sl, #1
   29ac4:	bne	2996c <__assert_fail@plt+0x17334>
   29ac8:	b	298c0 <__assert_fail@plt+0x17288>
   29acc:	str	sl, [r9]
   29ad0:	orr	r0, r4, #2
   29ad4:	b	298c4 <__assert_fail@plt+0x1728c>
   29ad8:	mov	r2, #0
   29adc:	add	r1, r3, r8
   29ae0:	str	r1, [r7]
   29ae4:	ldrb	r3, [r3, r8]
   29ae8:	orr	r4, r4, r2
   29aec:	cmp	r3, #0
   29af0:	orrne	r4, r4, #2
   29af4:	b	29934 <__assert_fail@plt+0x172fc>
   29af8:	cmn	sl, #-2147483647	; 0x80000001
   29afc:	lslls	sl, sl, #1
   29b00:	movls	r2, #0
   29b04:	bls	29adc <__assert_fail@plt+0x174a4>
   29b08:	mvn	sl, #0
   29b0c:	mov	r2, #1
   29b10:	b	29adc <__assert_fail@plt+0x174a4>
   29b14:	cmp	sl, #8388608	; 0x800000
   29b18:	lslcc	sl, sl, #9
   29b1c:	movcc	r2, #0
   29b20:	bcc	29adc <__assert_fail@plt+0x174a4>
   29b24:	b	29b08 <__assert_fail@plt+0x174d0>
   29b28:	mov	r1, fp
   29b2c:	mvn	r0, #0
   29b30:	str	r3, [sp, #4]
   29b34:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29b38:	ldr	r3, [sp, #4]
   29b3c:	mov	r1, #7
   29b40:	mov	r2, #0
   29b44:	cmp	r0, sl
   29b48:	movcs	ip, #0
   29b4c:	movcc	ip, #1
   29b50:	mulcs	sl, fp, sl
   29b54:	mvncc	sl, #0
   29b58:	subs	r1, r1, #1
   29b5c:	orr	r2, r2, ip
   29b60:	bne	29b44 <__assert_fail@plt+0x1750c>
   29b64:	b	29adc <__assert_fail@plt+0x174a4>
   29b68:	mov	r1, fp
   29b6c:	mvn	r0, #0
   29b70:	str	r3, [sp, #4]
   29b74:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29b78:	ldr	r3, [sp, #4]
   29b7c:	mov	r1, #8
   29b80:	mov	r2, #0
   29b84:	cmp	r0, sl
   29b88:	movcs	ip, #0
   29b8c:	movcc	ip, #1
   29b90:	mulcs	sl, fp, sl
   29b94:	mvncc	sl, #0
   29b98:	subs	r1, r1, #1
   29b9c:	orr	r2, r2, ip
   29ba0:	bne	29b84 <__assert_fail@plt+0x1754c>
   29ba4:	b	29adc <__assert_fail@plt+0x174a4>
   29ba8:	mov	r1, fp
   29bac:	mvn	r0, #0
   29bb0:	str	r3, [sp, #4]
   29bb4:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29bb8:	ldr	r3, [sp, #4]
   29bbc:	mov	r1, #4
   29bc0:	mov	r2, #0
   29bc4:	cmp	r0, sl
   29bc8:	movcs	ip, #0
   29bcc:	movcc	ip, #1
   29bd0:	mulcs	sl, fp, sl
   29bd4:	mvncc	sl, #0
   29bd8:	subs	r1, r1, #1
   29bdc:	orr	r2, r2, ip
   29be0:	bne	29bc4 <__assert_fail@plt+0x1758c>
   29be4:	b	29adc <__assert_fail@plt+0x174a4>
   29be8:	mov	r1, fp
   29bec:	mvn	r0, #0
   29bf0:	str	r3, [sp, #4]
   29bf4:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29bf8:	ldr	r3, [sp, #4]
   29bfc:	mov	r1, #5
   29c00:	mov	r2, #0
   29c04:	cmp	r0, sl
   29c08:	movcs	ip, #0
   29c0c:	movcc	ip, #1
   29c10:	mulcs	sl, fp, sl
   29c14:	mvncc	sl, #0
   29c18:	subs	r1, r1, #1
   29c1c:	orr	r2, r2, ip
   29c20:	bne	29c04 <__assert_fail@plt+0x175cc>
   29c24:	b	29adc <__assert_fail@plt+0x174a4>
   29c28:	mvn	r0, #0
   29c2c:	mov	r1, fp
   29c30:	str	r3, [sp, #4]
   29c34:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29c38:	ldr	r3, [sp, #4]
   29c3c:	cmp	sl, r0
   29c40:	bhi	29d34 <__assert_fail@plt+0x176fc>
   29c44:	mul	sl, sl, fp
   29c48:	cmp	r0, sl
   29c4c:	bcc	29d34 <__assert_fail@plt+0x176fc>
   29c50:	mul	sl, fp, sl
   29c54:	mov	r2, #0
   29c58:	b	29adc <__assert_fail@plt+0x174a4>
   29c5c:	mvn	r0, #0
   29c60:	mov	r1, fp
   29c64:	str	r3, [sp, #4]
   29c68:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29c6c:	ldr	r3, [sp, #4]
   29c70:	cmp	sl, r0
   29c74:	bhi	29b08 <__assert_fail@plt+0x174d0>
   29c78:	b	29c50 <__assert_fail@plt+0x17618>
   29c7c:	mov	r1, fp
   29c80:	mvn	r0, #0
   29c84:	str	r3, [sp, #4]
   29c88:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29c8c:	ldr	r3, [sp, #4]
   29c90:	mov	r1, #6
   29c94:	mov	r2, #0
   29c98:	cmp	r0, sl
   29c9c:	movcs	ip, #0
   29ca0:	movcc	ip, #1
   29ca4:	mulcs	sl, fp, sl
   29ca8:	mvncc	sl, #0
   29cac:	subs	r1, r1, #1
   29cb0:	orr	r2, r2, ip
   29cb4:	bne	29c98 <__assert_fail@plt+0x17660>
   29cb8:	b	29adc <__assert_fail@plt+0x174a4>
   29cbc:	cmp	sl, #4194304	; 0x400000
   29cc0:	lslcc	sl, sl, #10
   29cc4:	movcc	r2, #0
   29cc8:	bcc	29adc <__assert_fail@plt+0x174a4>
   29ccc:	b	29b08 <__assert_fail@plt+0x174d0>
   29cd0:	mov	r1, fp
   29cd4:	mvn	r0, #0
   29cd8:	str	r3, [sp, #4]
   29cdc:	bl	2c2ac <__assert_fail@plt+0x19c74>
   29ce0:	ldr	r3, [sp, #4]
   29ce4:	mov	r1, #3
   29ce8:	mov	r2, #0
   29cec:	cmp	r0, sl
   29cf0:	movcs	ip, #0
   29cf4:	movcc	ip, #1
   29cf8:	mulcs	sl, fp, sl
   29cfc:	mvncc	sl, #0
   29d00:	subs	r1, r1, #1
   29d04:	orr	r2, r2, ip
   29d08:	bne	29cec <__assert_fail@plt+0x176b4>
   29d0c:	b	29adc <__assert_fail@plt+0x174a4>
   29d10:	ldrb	r8, [r3, #2]
   29d14:	mov	fp, #1024	; 0x400
   29d18:	cmp	r8, #66	; 0x42
   29d1c:	moveq	r8, #3
   29d20:	movne	r8, #1
   29d24:	b	299ac <__assert_fail@plt+0x17374>
   29d28:	mov	r8, #2
   29d2c:	mov	fp, #1000	; 0x3e8
   29d30:	b	299ac <__assert_fail@plt+0x17374>
   29d34:	mov	r2, #1
   29d38:	mvn	sl, #0
   29d3c:	b	29adc <__assert_fail@plt+0x174a4>
   29d40:	bl	120e0 <__stack_chk_fail@plt>
   29d44:	movw	r0, #13312	; 0x3400
   29d48:	movw	r1, #13352	; 0x3428
   29d4c:	movw	r3, #13300	; 0x33f4
   29d50:	movt	r0, #3
   29d54:	movt	r1, #3
   29d58:	mov	r2, #96	; 0x60
   29d5c:	movt	r3, #3
   29d60:	bl	12638 <__assert_fail@plt>
   29d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d68:	movw	r8, #21904	; 0x5590
   29d6c:	movt	r8, #4
   29d70:	mov	sl, r2
   29d74:	cmp	r2, #36	; 0x24
   29d78:	sub	sp, sp, #36	; 0x24
   29d7c:	ldr	r2, [r8]
   29d80:	mov	r4, r0
   29d84:	mov	r6, r1
   29d88:	mov	r7, r3
   29d8c:	ldr	r5, [sp, #72]	; 0x48
   29d90:	str	r2, [sp, #28]
   29d94:	bhi	2a490 <__assert_fail@plt+0x17e58>
   29d98:	cmp	r1, #0
   29d9c:	addeq	r6, sp, #24
   29da0:	bl	122f0 <__ctype_b_loc@plt>
   29da4:	ldrb	r3, [r4]
   29da8:	mov	r1, r4
   29dac:	ldr	r0, [r0]
   29db0:	b	29db8 <__assert_fail@plt+0x17780>
   29db4:	ldrb	r3, [r1, #1]!
   29db8:	lsl	r2, r3, #1
   29dbc:	ldrh	fp, [r0, r2]
   29dc0:	and	fp, fp, #8192	; 0x2000
   29dc4:	uxth	fp, fp
   29dc8:	cmp	fp, #0
   29dcc:	bne	29db4 <__assert_fail@plt+0x1777c>
   29dd0:	cmp	r3, #45	; 0x2d
   29dd4:	bne	29df4 <__assert_fail@plt+0x177bc>
   29dd8:	mov	r0, #4
   29ddc:	ldr	r2, [sp, #28]
   29de0:	ldr	r3, [r8]
   29de4:	cmp	r2, r3
   29de8:	bne	2a48c <__assert_fail@plt+0x17e54>
   29dec:	add	sp, sp, #36	; 0x24
   29df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29df4:	bl	1238c <__errno_location@plt>
   29df8:	mov	r2, sl
   29dfc:	mov	r1, r6
   29e00:	mov	r3, fp
   29e04:	str	fp, [r0]
   29e08:	mov	r9, r0
   29e0c:	mov	r0, r4
   29e10:	bl	12074 <__strtoull_internal@plt>
   29e14:	ldr	sl, [r6]
   29e18:	cmp	sl, r4
   29e1c:	strd	r0, [sp]
   29e20:	beq	29f9c <__assert_fail@plt+0x17964>
   29e24:	ldr	fp, [r9]
   29e28:	cmp	fp, #0
   29e2c:	bne	29e54 <__assert_fail@plt+0x1781c>
   29e30:	cmp	r5, #0
   29e34:	beq	2a418 <__assert_fail@plt+0x17de0>
   29e38:	ldrb	r4, [sl]
   29e3c:	cmp	r4, #0
   29e40:	bne	29e64 <__assert_fail@plt+0x1782c>
   29e44:	ldrd	r4, [sp]
   29e48:	mov	r0, fp
   29e4c:	strd	r4, [r7]
   29e50:	b	29ddc <__assert_fail@plt+0x177a4>
   29e54:	cmp	fp, #34	; 0x22
   29e58:	bne	29dd8 <__assert_fail@plt+0x177a0>
   29e5c:	mov	fp, #1
   29e60:	b	29e30 <__assert_fail@plt+0x177f8>
   29e64:	mov	r0, r5
   29e68:	mov	r1, r4
   29e6c:	bl	12338 <strchr@plt>
   29e70:	cmp	r0, #0
   29e74:	beq	29fd4 <__assert_fail@plt+0x1799c>
   29e78:	mov	r0, r5
   29e7c:	mov	r1, #48	; 0x30
   29e80:	bl	12338 <strchr@plt>
   29e84:	cmp	r0, #0
   29e88:	beq	2a468 <__assert_fail@plt+0x17e30>
   29e8c:	ldrb	r3, [sl, #1]
   29e90:	cmp	r3, #68	; 0x44
   29e94:	beq	2a444 <__assert_fail@plt+0x17e0c>
   29e98:	cmp	r3, #105	; 0x69
   29e9c:	beq	2a428 <__assert_fail@plt+0x17df0>
   29ea0:	cmp	r3, #66	; 0x42
   29ea4:	beq	2a444 <__assert_fail@plt+0x17e0c>
   29ea8:	mov	r9, #1024	; 0x400
   29eac:	mov	r5, #1
   29eb0:	str	r5, [sp, #20]
   29eb4:	sub	r4, r4, #66	; 0x42
   29eb8:	cmp	r4, #53	; 0x35
   29ebc:	ldrls	pc, [pc, r4, lsl #2]
   29ec0:	b	29fd4 <__assert_fail@plt+0x1799c>
   29ec4:	andeq	sl, r2, ip, lsl r2
   29ec8:	ldrdeq	r9, [r2], -r4
   29ecc:	ldrdeq	r9, [r2], -r4
   29ed0:	andeq	sl, r2, ip, lsr #3
   29ed4:	ldrdeq	r9, [r2], -r4
   29ed8:	andeq	sl, r2, r4, lsr r1
   29edc:	ldrdeq	r9, [r2], -r4
   29ee0:	ldrdeq	r9, [r2], -r4
   29ee4:	ldrdeq	r9, [r2], -r4
   29ee8:	andeq	sl, r2, r4, ror #1
   29eec:	ldrdeq	r9, [r2], -r4
   29ef0:	andeq	sl, r2, ip, rrx
   29ef4:	ldrdeq	r9, [r2], -r4
   29ef8:	ldrdeq	r9, [r2], -r4
   29efc:	andeq	sl, r2, r8, lsr #7
   29f00:	ldrdeq	r9, [r2], -r4
   29f04:	ldrdeq	r9, [r2], -r4
   29f08:	ldrdeq	r9, [r2], -r4
   29f0c:	andeq	sl, r2, r8, lsr r3
   29f10:	ldrdeq	r9, [r2], -r4
   29f14:	ldrdeq	r9, [r2], -r4
   29f18:	ldrdeq	r9, [r2], -r4
   29f1c:	ldrdeq	r9, [r2], -r4
   29f20:	andeq	sl, r2, r8, asr #5
   29f24:	andeq	sl, r2, r8, asr r2
   29f28:	ldrdeq	r9, [r2], -r4
   29f2c:	ldrdeq	r9, [r2], -r4
   29f30:	ldrdeq	r9, [r2], -r4
   29f34:	ldrdeq	r9, [r2], -r4
   29f38:	ldrdeq	r9, [r2], -r4
   29f3c:	ldrdeq	r9, [r2], -r4
   29f40:	ldrdeq	r9, [r2], -r4
   29f44:	andeq	sl, r2, r8
   29f48:	andeq	r9, r2, r4, ror #31
   29f4c:	ldrdeq	r9, [r2], -r4
   29f50:	ldrdeq	r9, [r2], -r4
   29f54:	ldrdeq	r9, [r2], -r4
   29f58:	andeq	sl, r2, r4, lsr r1
   29f5c:	ldrdeq	r9, [r2], -r4
   29f60:	ldrdeq	r9, [r2], -r4
   29f64:	ldrdeq	r9, [r2], -r4
   29f68:	andeq	sl, r2, r4, ror #1
   29f6c:	ldrdeq	r9, [r2], -r4
   29f70:	andeq	sl, r2, ip, rrx
   29f74:	ldrdeq	r9, [r2], -r4
   29f78:	ldrdeq	r9, [r2], -r4
   29f7c:	ldrdeq	r9, [r2], -r4
   29f80:	ldrdeq	r9, [r2], -r4
   29f84:	ldrdeq	r9, [r2], -r4
   29f88:	ldrdeq	r9, [r2], -r4
   29f8c:	andeq	sl, r2, r8, lsr r3
   29f90:	ldrdeq	r9, [r2], -r4
   29f94:	ldrdeq	r9, [r2], -r4
   29f98:	andeq	sl, r2, r4, asr #32
   29f9c:	cmp	r5, #0
   29fa0:	beq	29dd8 <__assert_fail@plt+0x177a0>
   29fa4:	ldrb	r4, [r4]
   29fa8:	cmp	r4, #0
   29fac:	beq	29dd8 <__assert_fail@plt+0x177a0>
   29fb0:	mov	r1, r4
   29fb4:	mov	r0, r5
   29fb8:	bl	12338 <strchr@plt>
   29fbc:	cmp	r0, #0
   29fc0:	movne	r0, #1
   29fc4:	movne	r1, #0
   29fc8:	strdne	r0, [sp]
   29fcc:	bne	29e78 <__assert_fail@plt+0x17840>
   29fd0:	b	29dd8 <__assert_fail@plt+0x177a0>
   29fd4:	ldrd	r4, [sp]
   29fd8:	orr	r0, fp, #2
   29fdc:	strd	r4, [r7]
   29fe0:	b	29ddc <__assert_fail@plt+0x177a4>
   29fe4:	mov	r1, #0
   29fe8:	ldr	r5, [sp, #20]
   29fec:	orr	fp, fp, r1
   29ff0:	add	r3, sl, r5
   29ff4:	str	r3, [r6]
   29ff8:	ldrb	r3, [sl, r5]
   29ffc:	cmp	r3, #0
   2a000:	orrne	fp, fp, #2
   2a004:	b	29e44 <__assert_fail@plt+0x1780c>
   2a008:	ldrd	r4, [sp]
   2a00c:	movw	r3, #65535	; 0xffff
   2a010:	movt	r3, #127	; 0x7f
   2a014:	mvn	r2, #0
   2a018:	cmp	r5, r3
   2a01c:	cmpeq	r4, r2
   2a020:	bhi	2a454 <__assert_fail@plt+0x17e1c>
   2a024:	lsl	r3, r5, #9
   2a028:	ldr	r5, [sp]
   2a02c:	lsl	r2, r4, #9
   2a030:	mov	r1, #0
   2a034:	str	r2, [sp]
   2a038:	orr	r3, r3, r5, lsr #23
   2a03c:	str	r3, [sp, #4]
   2a040:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a044:	ldrd	r4, [sp]
   2a048:	cmp	r4, #0
   2a04c:	sbcs	r5, r5, #0
   2a050:	blt	2a454 <__assert_fail@plt+0x17e1c>
   2a054:	ldrd	r4, [sp]
   2a058:	mov	r1, #0
   2a05c:	adds	r4, r4, r4
   2a060:	adc	r5, r5, r5
   2a064:	strd	r4, [sp]
   2a068:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a06c:	asr	r5, r9, #31
   2a070:	mvn	r0, #0
   2a074:	mvn	r1, #0
   2a078:	mov	r2, r9
   2a07c:	mov	r3, r5
   2a080:	mov	r4, r9
   2a084:	strd	r4, [sp, #8]
   2a088:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a08c:	ldrd	r4, [sp]
   2a090:	cmp	r5, r1
   2a094:	cmpeq	r4, r0
   2a098:	bhi	2a478 <__assert_fail@plt+0x17e40>
   2a09c:	mul	ip, r9, r5
   2a0a0:	ldr	r2, [sp]
   2a0a4:	ldr	r5, [sp, #12]
   2a0a8:	mla	r4, r2, r5, ip
   2a0ac:	umull	r2, r3, r9, r2
   2a0b0:	add	r3, r4, r3
   2a0b4:	cmp	r1, r3
   2a0b8:	cmpeq	r0, r2
   2a0bc:	bcc	2a478 <__assert_fail@plt+0x17e40>
   2a0c0:	ldr	r4, [sp, #8]
   2a0c4:	mov	r1, #0
   2a0c8:	mul	r0, r2, r5
   2a0cc:	mla	r3, r4, r3, r0
   2a0d0:	umull	r4, r5, r2, r4
   2a0d4:	add	r3, r3, r5
   2a0d8:	strd	r4, [sp]
   2a0dc:	str	r3, [sp, #4]
   2a0e0:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a0e4:	asr	r5, r9, #31
   2a0e8:	mov	r2, r9
   2a0ec:	mvn	r0, #0
   2a0f0:	mvn	r1, #0
   2a0f4:	mov	r3, r5
   2a0f8:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a0fc:	ldrd	r2, [sp]
   2a100:	cmp	r3, r1
   2a104:	cmpeq	r2, r0
   2a108:	bhi	2a454 <__assert_fail@plt+0x17e1c>
   2a10c:	ldr	r4, [sp, #4]
   2a110:	mov	r1, #0
   2a114:	mul	r3, r2, r5
   2a118:	ldr	r5, [sp]
   2a11c:	mla	r3, r9, r4, r3
   2a120:	umull	r4, r5, r5, r9
   2a124:	add	r3, r3, r5
   2a128:	strd	r4, [sp]
   2a12c:	str	r3, [sp, #4]
   2a130:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a134:	asr	r5, r9, #31
   2a138:	mov	r2, r9
   2a13c:	mvn	r0, #0
   2a140:	mvn	r1, #0
   2a144:	mov	r3, r5
   2a148:	mov	r4, r9
   2a14c:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a150:	mov	r3, #3
   2a154:	str	r8, [sp, #16]
   2a158:	strd	r0, [sp, #8]
   2a15c:	mov	r0, r3
   2a160:	ldrd	r2, [sp]
   2a164:	mov	r1, #0
   2a168:	ldrd	r8, [sp, #8]
   2a16c:	cmp	r9, r3
   2a170:	cmpeq	r8, r2
   2a174:	mulcs	r9, r2, r5
   2a178:	movcs	ip, #0
   2a17c:	mlacs	r9, r4, r3, r9
   2a180:	movcc	ip, #1
   2a184:	umullcs	r2, r3, r2, r4
   2a188:	mvncc	r2, #0
   2a18c:	mvncc	r3, #0
   2a190:	orr	r1, r1, ip
   2a194:	addcs	r3, r9, r3
   2a198:	subs	r0, r0, #1
   2a19c:	bne	2a168 <__assert_fail@plt+0x17b30>
   2a1a0:	strd	r2, [sp]
   2a1a4:	ldr	r8, [sp, #16]
   2a1a8:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a1ac:	asr	r5, r9, #31
   2a1b0:	mov	r2, r9
   2a1b4:	mvn	r0, #0
   2a1b8:	mvn	r1, #0
   2a1bc:	mov	r3, r5
   2a1c0:	mov	r4, r9
   2a1c4:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a1c8:	mov	r3, #6
   2a1cc:	str	r8, [sp, #16]
   2a1d0:	strd	r0, [sp, #8]
   2a1d4:	mov	r0, r3
   2a1d8:	ldrd	r2, [sp]
   2a1dc:	mov	r1, #0
   2a1e0:	ldrd	r8, [sp, #8]
   2a1e4:	cmp	r9, r3
   2a1e8:	cmpeq	r8, r2
   2a1ec:	mulcs	r9, r2, r5
   2a1f0:	movcs	ip, #0
   2a1f4:	mlacs	r9, r4, r3, r9
   2a1f8:	movcc	ip, #1
   2a1fc:	umullcs	r2, r3, r2, r4
   2a200:	mvncc	r2, #0
   2a204:	mvncc	r3, #0
   2a208:	orr	r1, r1, ip
   2a20c:	addcs	r3, r9, r3
   2a210:	subs	r0, r0, #1
   2a214:	bne	2a1e0 <__assert_fail@plt+0x17ba8>
   2a218:	b	2a1a0 <__assert_fail@plt+0x17b68>
   2a21c:	ldrd	r4, [sp]
   2a220:	movw	r3, #65535	; 0xffff
   2a224:	movt	r3, #63	; 0x3f
   2a228:	mvn	r2, #0
   2a22c:	cmp	r5, r3
   2a230:	cmpeq	r4, r2
   2a234:	bhi	2a454 <__assert_fail@plt+0x17e1c>
   2a238:	lsl	r3, r5, #10
   2a23c:	ldr	r5, [sp]
   2a240:	lsl	r2, r4, #10
   2a244:	mov	r1, #0
   2a248:	str	r2, [sp]
   2a24c:	orr	r3, r3, r5, lsr #22
   2a250:	str	r3, [sp, #4]
   2a254:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a258:	asr	r5, r9, #31
   2a25c:	mov	r2, r9
   2a260:	mvn	r0, #0
   2a264:	mvn	r1, #0
   2a268:	mov	r3, r5
   2a26c:	mov	r4, r9
   2a270:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a274:	mov	r3, #7
   2a278:	str	r8, [sp, #16]
   2a27c:	strd	r0, [sp, #8]
   2a280:	mov	r0, r3
   2a284:	ldrd	r2, [sp]
   2a288:	mov	r1, #0
   2a28c:	ldrd	r8, [sp, #8]
   2a290:	cmp	r9, r3
   2a294:	cmpeq	r8, r2
   2a298:	mulcs	r9, r2, r5
   2a29c:	movcs	ip, #0
   2a2a0:	mlacs	r9, r4, r3, r9
   2a2a4:	movcc	ip, #1
   2a2a8:	umullcs	r2, r3, r2, r4
   2a2ac:	mvncc	r2, #0
   2a2b0:	mvncc	r3, #0
   2a2b4:	orr	r1, r1, ip
   2a2b8:	addcs	r3, r9, r3
   2a2bc:	subs	r0, r0, #1
   2a2c0:	bne	2a28c <__assert_fail@plt+0x17c54>
   2a2c4:	b	2a1a0 <__assert_fail@plt+0x17b68>
   2a2c8:	asr	r5, r9, #31
   2a2cc:	mov	r2, r9
   2a2d0:	mvn	r0, #0
   2a2d4:	mvn	r1, #0
   2a2d8:	mov	r3, r5
   2a2dc:	mov	r4, r9
   2a2e0:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a2e4:	mov	r3, #8
   2a2e8:	str	r8, [sp, #16]
   2a2ec:	strd	r0, [sp, #8]
   2a2f0:	mov	r0, r3
   2a2f4:	ldrd	r2, [sp]
   2a2f8:	mov	r1, #0
   2a2fc:	ldrd	r8, [sp, #8]
   2a300:	cmp	r9, r3
   2a304:	cmpeq	r8, r2
   2a308:	mulcs	r9, r2, r5
   2a30c:	movcs	ip, #0
   2a310:	mlacs	r9, r4, r3, r9
   2a314:	movcc	ip, #1
   2a318:	umullcs	r2, r3, r2, r4
   2a31c:	mvncc	r2, #0
   2a320:	mvncc	r3, #0
   2a324:	orr	r1, r1, ip
   2a328:	addcs	r3, r9, r3
   2a32c:	subs	r0, r0, #1
   2a330:	bne	2a2fc <__assert_fail@plt+0x17cc4>
   2a334:	b	2a1a0 <__assert_fail@plt+0x17b68>
   2a338:	asr	r5, r9, #31
   2a33c:	mov	r2, r9
   2a340:	mvn	r0, #0
   2a344:	mvn	r1, #0
   2a348:	mov	r3, r5
   2a34c:	mov	r4, r9
   2a350:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a354:	mov	r3, #4
   2a358:	str	r8, [sp, #16]
   2a35c:	strd	r0, [sp, #8]
   2a360:	mov	r0, r3
   2a364:	ldrd	r2, [sp]
   2a368:	mov	r1, #0
   2a36c:	ldrd	r8, [sp, #8]
   2a370:	cmp	r9, r3
   2a374:	cmpeq	r8, r2
   2a378:	mulcs	r9, r2, r5
   2a37c:	movcs	ip, #0
   2a380:	mlacs	r9, r4, r3, r9
   2a384:	movcc	ip, #1
   2a388:	umullcs	r2, r3, r2, r4
   2a38c:	mvncc	r2, #0
   2a390:	mvncc	r3, #0
   2a394:	orr	r1, r1, ip
   2a398:	addcs	r3, r9, r3
   2a39c:	subs	r0, r0, #1
   2a3a0:	bne	2a36c <__assert_fail@plt+0x17d34>
   2a3a4:	b	2a1a0 <__assert_fail@plt+0x17b68>
   2a3a8:	asr	r5, r9, #31
   2a3ac:	mov	r2, r9
   2a3b0:	mvn	r0, #0
   2a3b4:	mvn	r1, #0
   2a3b8:	mov	r3, r5
   2a3bc:	mov	r4, r9
   2a3c0:	bl	2c8b8 <__assert_fail@plt+0x1a280>
   2a3c4:	mov	r3, #5
   2a3c8:	str	r8, [sp, #16]
   2a3cc:	strd	r0, [sp, #8]
   2a3d0:	mov	r0, r3
   2a3d4:	ldrd	r2, [sp]
   2a3d8:	mov	r1, #0
   2a3dc:	ldrd	r8, [sp, #8]
   2a3e0:	cmp	r9, r3
   2a3e4:	cmpeq	r8, r2
   2a3e8:	mulcs	r9, r2, r5
   2a3ec:	movcs	ip, #0
   2a3f0:	mlacs	r9, r4, r3, r9
   2a3f4:	movcc	ip, #1
   2a3f8:	umullcs	r2, r3, r2, r4
   2a3fc:	mvncc	r2, #0
   2a400:	mvncc	r3, #0
   2a404:	orr	r1, r1, ip
   2a408:	addcs	r3, r9, r3
   2a40c:	subs	r0, r0, #1
   2a410:	bne	2a3dc <__assert_fail@plt+0x17da4>
   2a414:	b	2a1a0 <__assert_fail@plt+0x17b68>
   2a418:	ldrd	r4, [sp]
   2a41c:	mov	r0, fp
   2a420:	strd	r4, [r7]
   2a424:	b	29ddc <__assert_fail@plt+0x177a4>
   2a428:	ldrb	r3, [sl, #2]
   2a42c:	mov	r9, #1024	; 0x400
   2a430:	cmp	r3, #66	; 0x42
   2a434:	moveq	r3, #3
   2a438:	movne	r3, #1
   2a43c:	str	r3, [sp, #20]
   2a440:	b	29eb4 <__assert_fail@plt+0x1787c>
   2a444:	mov	ip, #2
   2a448:	mov	r9, #1000	; 0x3e8
   2a44c:	str	ip, [sp, #20]
   2a450:	b	29eb4 <__assert_fail@plt+0x1787c>
   2a454:	mvn	r4, #0
   2a458:	mvn	r5, #0
   2a45c:	mov	r1, #1
   2a460:	strd	r4, [sp]
   2a464:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a468:	mov	r9, #1
   2a46c:	str	r9, [sp, #20]
   2a470:	mov	r9, #1024	; 0x400
   2a474:	b	29eb4 <__assert_fail@plt+0x1787c>
   2a478:	mvn	r4, #0
   2a47c:	mvn	r5, #0
   2a480:	mov	r1, #1
   2a484:	strd	r4, [sp]
   2a488:	b	29fe8 <__assert_fail@plt+0x179b0>
   2a48c:	bl	120e0 <__stack_chk_fail@plt>
   2a490:	movw	r0, #13312	; 0x3400
   2a494:	movw	r1, #13352	; 0x3428
   2a498:	movw	r3, #13364	; 0x3434
   2a49c:	movt	r0, #3
   2a4a0:	movt	r1, #3
   2a4a4:	mov	r2, #96	; 0x60
   2a4a8:	movt	r3, #3
   2a4ac:	bl	12638 <__assert_fail@plt>
   2a4b0:	push	{r4, r5, lr}
   2a4b4:	movw	r4, #21904	; 0x5590
   2a4b8:	movt	r4, #4
   2a4bc:	movw	r3, #21916	; 0x559c
   2a4c0:	movt	r3, #4
   2a4c4:	sub	sp, sp, #20
   2a4c8:	ldr	ip, [r4]
   2a4cc:	add	r0, sp, #4
   2a4d0:	ldr	r3, [r3]
   2a4d4:	add	r1, sp, #8
   2a4d8:	mov	r2, #10
   2a4dc:	mov	r5, #0
   2a4e0:	str	ip, [sp, #12]
   2a4e4:	str	r5, [sp, #4]
   2a4e8:	str	r5, [sp, #8]
   2a4ec:	bl	11f90 <__getdelim@plt>
   2a4f0:	cmp	r0, #0
   2a4f4:	ble	2a518 <__assert_fail@plt+0x17ee0>
   2a4f8:	ldr	r3, [sp, #4]
   2a4fc:	add	r0, r3, r0
   2a500:	strb	r5, [r0, #-1]
   2a504:	ldr	r0, [sp, #4]
   2a508:	bl	12488 <rpmatch@plt>
   2a50c:	cmp	r0, r5
   2a510:	movle	r5, #0
   2a514:	movgt	r5, #1
   2a518:	ldr	r0, [sp, #4]
   2a51c:	bl	12020 <free@plt>
   2a520:	ldr	r2, [sp, #12]
   2a524:	ldr	r3, [r4]
   2a528:	mov	r0, r5
   2a52c:	cmp	r2, r3
   2a530:	bne	2a53c <__assert_fail@plt+0x17f04>
   2a534:	add	sp, sp, #20
   2a538:	pop	{r4, r5, pc}
   2a53c:	bl	120e0 <__stack_chk_fail@plt>
   2a540:	push	{r3, r4, r5, lr}
   2a544:	mov	r2, #18688	; 0x4900
   2a548:	mov	r4, r0
   2a54c:	ldr	r0, [r0]
   2a550:	bl	12350 <openat64@plt>
   2a554:	subs	r5, r0, #0
   2a558:	blt	2a580 <__assert_fail@plt+0x17f48>
   2a55c:	ldr	r0, [r4]
   2a560:	cmp	r0, #0
   2a564:	blt	2a574 <__assert_fail@plt+0x17f3c>
   2a568:	bl	125d8 <close@plt>
   2a56c:	cmp	r0, #0
   2a570:	bne	2a588 <__assert_fail@plt+0x17f50>
   2a574:	str	r5, [r4]
   2a578:	mov	r0, #0
   2a57c:	pop	{r3, r4, r5, pc}
   2a580:	mvn	r0, #0
   2a584:	pop	{r3, r4, r5, pc}
   2a588:	bl	12648 <__assert_fail@plt+0x10>
   2a58c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a590:	movw	r5, #21904	; 0x5590
   2a594:	movt	r5, #4
   2a598:	sub	sp, sp, #8
   2a59c:	mov	r7, r0
   2a5a0:	ldr	r3, [r5]
   2a5a4:	str	r3, [sp, #4]
   2a5a8:	bl	12134 <chdir@plt>
   2a5ac:	subs	r4, r0, #0
   2a5b0:	beq	2a5c8 <__assert_fail@plt+0x17f90>
   2a5b4:	bl	1238c <__errno_location@plt>
   2a5b8:	ldr	r3, [r0]
   2a5bc:	mov	r9, r0
   2a5c0:	cmp	r3, #36	; 0x24
   2a5c4:	beq	2a5e4 <__assert_fail@plt+0x17fac>
   2a5c8:	ldr	r2, [sp, #4]
   2a5cc:	mov	r0, r4
   2a5d0:	ldr	r3, [r5]
   2a5d4:	cmp	r2, r3
   2a5d8:	bne	2a844 <__assert_fail@plt+0x1820c>
   2a5dc:	add	sp, sp, #8
   2a5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a5e4:	mov	r0, r7
   2a5e8:	bl	1232c <strlen@plt>
   2a5ec:	mvn	r3, #99	; 0x63
   2a5f0:	str	r3, [sp]
   2a5f4:	cmp	r0, #0
   2a5f8:	add	r6, r7, r0
   2a5fc:	beq	2a848 <__assert_fail@plt+0x18210>
   2a600:	cmp	r0, #4096	; 0x1000
   2a604:	bcc	2a7f0 <__assert_fail@plt+0x181b8>
   2a608:	ldrb	r3, [r7]
   2a60c:	cmp	r3, #47	; 0x2f
   2a610:	movne	r4, r7
   2a614:	bne	2a6e4 <__assert_fail@plt+0x180ac>
   2a618:	add	r3, r7, #1
   2a61c:	mov	r2, #0
   2a620:	ldrb	ip, [r3]
   2a624:	mov	r4, r3
   2a628:	add	r2, r2, #1
   2a62c:	add	r3, r3, #1
   2a630:	cmp	ip, #47	; 0x2f
   2a634:	beq	2a620 <__assert_fail@plt+0x17fe8>
   2a638:	cmp	r2, #2
   2a63c:	beq	2a680 <__assert_fail@plt+0x18048>
   2a640:	movw	r1, #6324	; 0x18b4
   2a644:	mov	r0, sp
   2a648:	movt	r1, #3
   2a64c:	bl	2a540 <__assert_fail@plt+0x17f08>
   2a650:	cmp	r0, #0
   2a654:	beq	2a7c8 <__assert_fail@plt+0x18190>
   2a658:	ldr	r0, [sp]
   2a65c:	ldr	r4, [r9]
   2a660:	cmp	r0, #0
   2a664:	blt	2a674 <__assert_fail@plt+0x1803c>
   2a668:	bl	125d8 <close@plt>
   2a66c:	cmp	r0, #0
   2a670:	bne	2a7ac <__assert_fail@plt+0x18174>
   2a674:	str	r4, [r9]
   2a678:	mvn	r4, #0
   2a67c:	b	2a5c8 <__assert_fail@plt+0x17f90>
   2a680:	add	r0, r7, #3
   2a684:	mov	r1, #47	; 0x2f
   2a688:	rsb	r2, r0, r6
   2a68c:	bl	12434 <memchr@plt>
   2a690:	subs	r8, r0, #0
   2a694:	beq	2a76c <__assert_fail@plt+0x18134>
   2a698:	mov	r3, #0
   2a69c:	mov	r1, r7
   2a6a0:	strb	r3, [r8]
   2a6a4:	mov	r0, sp
   2a6a8:	bl	2a540 <__assert_fail@plt+0x17f08>
   2a6ac:	mov	r3, #47	; 0x2f
   2a6b0:	strb	r3, [r8]
   2a6b4:	cmp	r0, #0
   2a6b8:	bne	2a658 <__assert_fail@plt+0x18020>
   2a6bc:	ldrb	r3, [r8, #1]
   2a6c0:	add	r4, r8, #1
   2a6c4:	cmp	r3, #47	; 0x2f
   2a6c8:	bne	2a6e4 <__assert_fail@plt+0x180ac>
   2a6cc:	add	r3, r8, #2
   2a6d0:	mov	r4, r3
   2a6d4:	add	r3, r3, #1
   2a6d8:	ldrb	r2, [r4]
   2a6dc:	cmp	r2, #47	; 0x2f
   2a6e0:	beq	2a6d0 <__assert_fail@plt+0x18098>
   2a6e4:	cmp	r6, r4
   2a6e8:	bcc	2a80c <__assert_fail@plt+0x181d4>
   2a6ec:	mov	r8, #47	; 0x2f
   2a6f0:	mov	r7, #0
   2a6f4:	rsb	r3, r4, r6
   2a6f8:	cmp	r3, #4096	; 0x1000
   2a6fc:	blt	2a77c <__assert_fail@plt+0x18144>
   2a700:	mov	r0, r4
   2a704:	mov	r1, #47	; 0x2f
   2a708:	mov	r2, #4096	; 0x1000
   2a70c:	bl	1235c <memrchr@plt>
   2a710:	subs	sl, r0, #0
   2a714:	beq	2a76c <__assert_fail@plt+0x18134>
   2a718:	rsb	r3, r4, sl
   2a71c:	strb	r7, [sl]
   2a720:	cmp	r3, #4096	; 0x1000
   2a724:	bge	2a828 <__assert_fail@plt+0x181f0>
   2a728:	mov	r1, r4
   2a72c:	mov	r0, sp
   2a730:	bl	2a540 <__assert_fail@plt+0x17f08>
   2a734:	strb	r8, [sl]
   2a738:	cmp	r0, #0
   2a73c:	bne	2a658 <__assert_fail@plt+0x18020>
   2a740:	ldrb	r3, [sl, #1]
   2a744:	add	r4, sl, #1
   2a748:	cmp	r3, #47	; 0x2f
   2a74c:	bne	2a6f4 <__assert_fail@plt+0x180bc>
   2a750:	add	r3, sl, #2
   2a754:	mov	r4, r3
   2a758:	add	r3, r3, #1
   2a75c:	ldrb	r2, [r4]
   2a760:	cmp	r2, #47	; 0x2f
   2a764:	beq	2a754 <__assert_fail@plt+0x1811c>
   2a768:	b	2a6f4 <__assert_fail@plt+0x180bc>
   2a76c:	mov	r3, #36	; 0x24
   2a770:	mvn	r4, #0
   2a774:	str	r3, [r9]
   2a778:	b	2a5c8 <__assert_fail@plt+0x17f90>
   2a77c:	cmp	r6, r4
   2a780:	bhi	2a7b0 <__assert_fail@plt+0x18178>
   2a784:	ldr	r0, [sp]
   2a788:	bl	12524 <fchdir@plt>
   2a78c:	subs	r4, r0, #0
   2a790:	bne	2a658 <__assert_fail@plt+0x18020>
   2a794:	ldr	r0, [sp]
   2a798:	cmp	r0, #0
   2a79c:	blt	2a5c8 <__assert_fail@plt+0x17f90>
   2a7a0:	bl	125d8 <close@plt>
   2a7a4:	cmp	r0, #0
   2a7a8:	beq	2a5c8 <__assert_fail@plt+0x17f90>
   2a7ac:	bl	12648 <__assert_fail@plt+0x10>
   2a7b0:	mov	r1, r4
   2a7b4:	mov	r0, sp
   2a7b8:	bl	2a540 <__assert_fail@plt+0x17f08>
   2a7bc:	cmp	r0, #0
   2a7c0:	bne	2a658 <__assert_fail@plt+0x18020>
   2a7c4:	b	2a784 <__assert_fail@plt+0x1814c>
   2a7c8:	ldrb	r3, [r4]
   2a7cc:	cmp	r3, #47	; 0x2f
   2a7d0:	bne	2a6e4 <__assert_fail@plt+0x180ac>
   2a7d4:	movw	r0, #13452	; 0x348c
   2a7d8:	movw	r1, #13416	; 0x3468
   2a7dc:	movt	r0, #3
   2a7e0:	movt	r1, #3
   2a7e4:	mov	r2, #161	; 0xa1
   2a7e8:	ldr	r3, [pc, #116]	; 2a864 <__assert_fail@plt+0x1822c>
   2a7ec:	bl	12638 <__assert_fail@plt>
   2a7f0:	movw	r0, #13440	; 0x3480
   2a7f4:	movw	r1, #13416	; 0x3468
   2a7f8:	movt	r0, #3
   2a7fc:	movt	r1, #3
   2a800:	mov	r2, #126	; 0x7e
   2a804:	ldr	r3, [pc, #88]	; 2a864 <__assert_fail@plt+0x1822c>
   2a808:	bl	12638 <__assert_fail@plt>
   2a80c:	movw	r0, #13464	; 0x3498
   2a810:	movw	r1, #13416	; 0x3468
   2a814:	movt	r0, #3
   2a818:	movt	r1, #3
   2a81c:	mov	r2, #162	; 0xa2
   2a820:	ldr	r3, [pc, #60]	; 2a864 <__assert_fail@plt+0x1822c>
   2a824:	bl	12638 <__assert_fail@plt>
   2a828:	movw	r0, #13480	; 0x34a8
   2a82c:	movw	r1, #13416	; 0x3468
   2a830:	movt	r0, #3
   2a834:	movt	r1, #3
   2a838:	mov	r2, #178	; 0xb2
   2a83c:	ldr	r3, [pc, #32]	; 2a864 <__assert_fail@plt+0x1822c>
   2a840:	bl	12638 <__assert_fail@plt>
   2a844:	bl	120e0 <__stack_chk_fail@plt>
   2a848:	movw	r0, #13432	; 0x3478
   2a84c:	movw	r1, #13416	; 0x3468
   2a850:	movt	r0, #3
   2a854:	movt	r1, #3
   2a858:	mov	r2, #125	; 0x7d
   2a85c:	ldr	r3, [pc]	; 2a864 <__assert_fail@plt+0x1822c>
   2a860:	bl	12638 <__assert_fail@plt>
   2a864:	andeq	r3, r3, ip, asr #8
   2a868:	push	{r1, r2, r3}
   2a86c:	movw	ip, #1030	; 0x406
   2a870:	push	{r4, r5, r6, r7, r8, lr}
   2a874:	sub	sp, sp, #12
   2a878:	movw	r4, #21904	; 0x5590
   2a87c:	movt	r4, #4
   2a880:	ldr	r1, [sp, #36]	; 0x24
   2a884:	add	r2, sp, #40	; 0x28
   2a888:	ldr	r3, [r4]
   2a88c:	mov	r8, r0
   2a890:	cmp	r1, ip
   2a894:	str	r2, [sp]
   2a898:	str	r3, [sp, #4]
   2a89c:	bne	2a910 <__assert_fail@plt+0x182d8>
   2a8a0:	movw	r5, #24300	; 0x5eec
   2a8a4:	movt	r5, #4
   2a8a8:	ldr	r7, [sp, #40]	; 0x28
   2a8ac:	add	r2, sp, #44	; 0x2c
   2a8b0:	ldr	r3, [r5]
   2a8b4:	str	r2, [sp]
   2a8b8:	cmp	r3, #0
   2a8bc:	mov	r2, r7
   2a8c0:	blt	2a99c <__assert_fail@plt+0x18364>
   2a8c4:	bl	12380 <fcntl@plt>
   2a8c8:	subs	r6, r0, #0
   2a8cc:	blt	2a920 <__assert_fail@plt+0x182e8>
   2a8d0:	mov	r3, #1
   2a8d4:	str	r3, [r5]
   2a8d8:	cmp	r6, #0
   2a8dc:	blt	2a8ec <__assert_fail@plt+0x182b4>
   2a8e0:	ldr	r3, [r5]
   2a8e4:	cmn	r3, #1
   2a8e8:	beq	2a950 <__assert_fail@plt+0x18318>
   2a8ec:	ldr	r2, [sp, #4]
   2a8f0:	mov	r0, r6
   2a8f4:	ldr	r3, [r4]
   2a8f8:	cmp	r2, r3
   2a8fc:	bne	2a9ac <__assert_fail@plt+0x18374>
   2a900:	add	sp, sp, #12
   2a904:	pop	{r4, r5, r6, r7, r8, lr}
   2a908:	add	sp, sp, #12
   2a90c:	bx	lr
   2a910:	ldr	r2, [sp, #40]	; 0x28
   2a914:	bl	12380 <fcntl@plt>
   2a918:	mov	r6, r0
   2a91c:	b	2a8ec <__assert_fail@plt+0x182b4>
   2a920:	bl	1238c <__errno_location@plt>
   2a924:	ldr	r3, [r0]
   2a928:	cmp	r3, #22
   2a92c:	bne	2a8d0 <__assert_fail@plt+0x18298>
   2a930:	mov	r0, r8
   2a934:	mov	r2, r7
   2a938:	mov	r1, #0
   2a93c:	bl	2a868 <__assert_fail@plt+0x18230>
   2a940:	subs	r6, r0, #0
   2a944:	blt	2a8ec <__assert_fail@plt+0x182b4>
   2a948:	mvn	r3, #0
   2a94c:	str	r3, [r5]
   2a950:	mov	r0, r6
   2a954:	mov	r1, #1
   2a958:	bl	12380 <fcntl@plt>
   2a95c:	subs	r2, r0, #0
   2a960:	blt	2a97c <__assert_fail@plt+0x18344>
   2a964:	orr	r2, r2, #1
   2a968:	mov	r0, r6
   2a96c:	mov	r1, #2
   2a970:	bl	12380 <fcntl@plt>
   2a974:	cmn	r0, #1
   2a978:	bne	2a8ec <__assert_fail@plt+0x182b4>
   2a97c:	bl	1238c <__errno_location@plt>
   2a980:	ldr	r7, [r0]
   2a984:	mov	r5, r0
   2a988:	mov	r0, r6
   2a98c:	mvn	r6, #0
   2a990:	bl	125d8 <close@plt>
   2a994:	str	r7, [r5]
   2a998:	b	2a8ec <__assert_fail@plt+0x182b4>
   2a99c:	mov	r1, #0
   2a9a0:	bl	2a868 <__assert_fail@plt+0x18230>
   2a9a4:	mov	r6, r0
   2a9a8:	b	2a8d8 <__assert_fail@plt+0x182a0>
   2a9ac:	bl	120e0 <__stack_chk_fail@plt>
   2a9b0:	push	{r4, lr}
   2a9b4:	subs	r4, r0, #0
   2a9b8:	sub	sp, sp, #8
   2a9bc:	beq	2a9cc <__assert_fail@plt+0x18394>
   2a9c0:	bl	122c0 <__freading@plt>
   2a9c4:	cmp	r0, #0
   2a9c8:	bne	2a9dc <__assert_fail@plt+0x183a4>
   2a9cc:	mov	r0, r4
   2a9d0:	add	sp, sp, #8
   2a9d4:	pop	{r4, lr}
   2a9d8:	b	11fe4 <fflush@plt>
   2a9dc:	ldr	r3, [r4]
   2a9e0:	tst	r3, #256	; 0x100
   2a9e4:	beq	2a9cc <__assert_fail@plt+0x18394>
   2a9e8:	mov	r3, #1
   2a9ec:	mov	r0, r4
   2a9f0:	str	r3, [sp]
   2a9f4:	mov	r2, #0
   2a9f8:	mov	r3, #0
   2a9fc:	bl	2aa50 <__assert_fail@plt+0x18418>
   2aa00:	mov	r0, r4
   2aa04:	add	sp, sp, #8
   2aa08:	pop	{r4, lr}
   2aa0c:	b	11fe4 <fflush@plt>
   2aa10:	ldr	r2, [r0, #20]
   2aa14:	ldr	r3, [r0, #16]
   2aa18:	cmp	r2, r3
   2aa1c:	bhi	2aa48 <__assert_fail@plt+0x18410>
   2aa20:	ldr	r3, [r0]
   2aa24:	ldr	r1, [r0, #8]
   2aa28:	ands	r3, r3, #256	; 0x100
   2aa2c:	ldr	r2, [r0, #4]
   2aa30:	ldrne	r3, [r0, #36]	; 0x24
   2aa34:	rsb	r2, r2, r1
   2aa38:	ldrne	r1, [r0, #44]	; 0x2c
   2aa3c:	rsbne	r3, r3, r1
   2aa40:	add	r0, r2, r3
   2aa44:	bx	lr
   2aa48:	mov	r0, #0
   2aa4c:	bx	lr
   2aa50:	ldmib	r0, {r1, ip}
   2aa54:	push	{r4, r5, r6, r7, lr}
   2aa58:	cmp	ip, r1
   2aa5c:	sub	sp, sp, #20
   2aa60:	mov	r6, r0
   2aa64:	ldr	r4, [sp, #40]	; 0x28
   2aa68:	beq	2aa80 <__assert_fail@plt+0x18448>
   2aa6c:	str	r4, [sp, #40]	; 0x28
   2aa70:	mov	r0, r6
   2aa74:	add	sp, sp, #20
   2aa78:	pop	{r4, r5, r6, r7, lr}
   2aa7c:	b	12470 <fseeko64@plt>
   2aa80:	ldr	ip, [r0, #20]
   2aa84:	ldr	r1, [r0, #16]
   2aa88:	cmp	ip, r1
   2aa8c:	bne	2aa6c <__assert_fail@plt+0x18434>
   2aa90:	ldr	r7, [r0, #36]	; 0x24
   2aa94:	cmp	r7, #0
   2aa98:	bne	2aa6c <__assert_fail@plt+0x18434>
   2aa9c:	str	r2, [sp, #12]
   2aaa0:	mvn	r5, #0
   2aaa4:	str	r3, [sp, #8]
   2aaa8:	bl	12410 <fileno@plt>
   2aaac:	str	r4, [sp]
   2aab0:	mvn	r4, #0
   2aab4:	ldr	r2, [sp, #12]
   2aab8:	ldr	r3, [sp, #8]
   2aabc:	bl	121b8 <lseek64@plt>
   2aac0:	mov	r2, r0
   2aac4:	mov	r3, r1
   2aac8:	cmp	r3, r5
   2aacc:	cmpeq	r2, r4
   2aad0:	beq	2aaf0 <__assert_fail@plt+0x184b8>
   2aad4:	ldr	r1, [r6]
   2aad8:	mov	r0, r7
   2aadc:	strd	r2, [r6, #80]	; 0x50
   2aae0:	bic	r3, r1, #16
   2aae4:	str	r3, [r6]
   2aae8:	add	sp, sp, #20
   2aaec:	pop	{r4, r5, r6, r7, pc}
   2aaf0:	mvn	r0, #0
   2aaf4:	b	2aae8 <__assert_fail@plt+0x184b0>
   2aaf8:	push	{r4, r5, r6, r7, r8, r9, lr}
   2aafc:	movw	r8, #21904	; 0x5590
   2ab00:	movt	r8, #4
   2ab04:	sub	sp, sp, #12
   2ab08:	movw	r0, #13500	; 0x34bc
   2ab0c:	movw	r1, #65496	; 0xffd8
   2ab10:	ldr	r3, [r8]
   2ab14:	movt	r0, #3
   2ab18:	movt	r1, #2
   2ab1c:	str	r3, [sp, #4]
   2ab20:	bl	12560 <setmntent@plt>
   2ab24:	subs	r7, r0, #0
   2ab28:	beq	2ad78 <__assert_fail@plt+0x18740>
   2ab2c:	mov	r0, r7
   2ab30:	mov	r6, sp
   2ab34:	bl	12230 <getmntent@plt>
   2ab38:	subs	r5, r0, #0
   2ab3c:	beq	2ac50 <__assert_fail@plt+0x18618>
   2ab40:	mov	r0, #32
   2ab44:	bl	29604 <__assert_fail@plt+0x16fcc>
   2ab48:	mov	r4, r0
   2ab4c:	ldr	r0, [r5]
   2ab50:	bl	29720 <__assert_fail@plt+0x170e8>
   2ab54:	str	r0, [r4]
   2ab58:	ldr	r0, [r5, #4]
   2ab5c:	bl	29720 <__assert_fail@plt+0x170e8>
   2ab60:	str	r0, [r4, #4]
   2ab64:	ldr	r0, [r5, #8]
   2ab68:	bl	29720 <__assert_fail@plt+0x170e8>
   2ab6c:	ldrb	r3, [r4, #24]
   2ab70:	movw	r1, #55540	; 0xd8f4
   2ab74:	movt	r1, #2
   2ab78:	orr	r3, r3, #4
   2ab7c:	strb	r3, [r4, #24]
   2ab80:	str	r0, [r4, #8]
   2ab84:	mov	r9, r0
   2ab88:	bl	11fb4 <strcmp@plt>
   2ab8c:	cmp	r0, #0
   2ab90:	beq	2abf4 <__assert_fail@plt+0x185bc>
   2ab94:	movw	r1, #13512	; 0x34c8
   2ab98:	mov	r0, r9
   2ab9c:	movt	r1, #3
   2aba0:	bl	11fb4 <strcmp@plt>
   2aba4:	cmp	r0, #0
   2aba8:	beq	2abf4 <__assert_fail@plt+0x185bc>
   2abac:	movw	r1, #13520	; 0x34d0
   2abb0:	mov	r0, r9
   2abb4:	movt	r1, #3
   2abb8:	bl	11fb4 <strcmp@plt>
   2abbc:	cmp	r0, #0
   2abc0:	beq	2abf4 <__assert_fail@plt+0x185bc>
   2abc4:	movw	r1, #13528	; 0x34d8
   2abc8:	mov	r0, r9
   2abcc:	movt	r1, #3
   2abd0:	bl	11fb4 <strcmp@plt>
   2abd4:	cmp	r0, #0
   2abd8:	beq	2abf4 <__assert_fail@plt+0x185bc>
   2abdc:	movw	r1, #55516	; 0xd8dc
   2abe0:	mov	r0, r9
   2abe4:	movt	r1, #2
   2abe8:	bl	11fb4 <strcmp@plt>
   2abec:	cmp	r0, #0
   2abf0:	bne	2acd0 <__assert_fail@plt+0x18698>
   2abf4:	mov	r2, #1
   2abf8:	ldr	r5, [r4]
   2abfc:	mov	r1, #58	; 0x3a
   2ac00:	ldrb	r3, [r4, #24]
   2ac04:	mov	r0, r5
   2ac08:	bfi	r3, r2, #0, #1
   2ac0c:	strb	r3, [r4, #24]
   2ac10:	bl	12338 <strchr@plt>
   2ac14:	cmp	r0, #0
   2ac18:	beq	2ac80 <__assert_fail@plt+0x18648>
   2ac1c:	mov	r0, #1
   2ac20:	ldrb	r1, [r4, #24]
   2ac24:	mvn	r2, #0
   2ac28:	mvn	r3, #0
   2ac2c:	strd	r2, [r4, #16]
   2ac30:	bfi	r1, r0, #1, #1
   2ac34:	mov	r0, r7
   2ac38:	strb	r1, [r4, #24]
   2ac3c:	str	r4, [r6]
   2ac40:	add	r6, r4, #28
   2ac44:	bl	12230 <getmntent@plt>
   2ac48:	subs	r5, r0, #0
   2ac4c:	bne	2ab40 <__assert_fail@plt+0x18508>
   2ac50:	mov	r0, r7
   2ac54:	bl	1247c <endmntent@plt>
   2ac58:	subs	r4, r0, #0
   2ac5c:	beq	2ad08 <__assert_fail@plt+0x186d0>
   2ac60:	str	r5, [r6]
   2ac64:	ldr	r0, [sp]
   2ac68:	ldr	r2, [sp, #4]
   2ac6c:	ldr	r3, [r8]
   2ac70:	cmp	r2, r3
   2ac74:	bne	2ad80 <__assert_fail@plt+0x18748>
   2ac78:	add	sp, sp, #12
   2ac7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ac80:	ldrb	r3, [r5]
   2ac84:	cmp	r3, #47	; 0x2f
   2ac88:	bne	2ac20 <__assert_fail@plt+0x185e8>
   2ac8c:	ldrb	r3, [r5, #1]
   2ac90:	cmp	r3, #47	; 0x2f
   2ac94:	bne	2ac20 <__assert_fail@plt+0x185e8>
   2ac98:	ldr	r5, [r4, #8]
   2ac9c:	movw	r1, #13552	; 0x34f0
   2aca0:	movt	r1, #3
   2aca4:	mov	r0, r5
   2aca8:	bl	11fb4 <strcmp@plt>
   2acac:	cmp	r0, #0
   2acb0:	beq	2ac1c <__assert_fail@plt+0x185e4>
   2acb4:	mov	r0, r5
   2acb8:	movw	r1, #13560	; 0x34f8
   2acbc:	movt	r1, #3
   2acc0:	bl	11fb4 <strcmp@plt>
   2acc4:	rsbs	r0, r0, #1
   2acc8:	movcc	r0, #0
   2accc:	b	2ac20 <__assert_fail@plt+0x185e8>
   2acd0:	mov	r0, r9
   2acd4:	movw	r1, #13536	; 0x34e0
   2acd8:	movt	r1, #3
   2acdc:	bl	11fb4 <strcmp@plt>
   2ace0:	cmp	r0, #0
   2ace4:	movne	r2, #0
   2ace8:	bne	2abf8 <__assert_fail@plt+0x185c0>
   2acec:	mov	r0, r5
   2acf0:	movw	r1, #13544	; 0x34e8
   2acf4:	movt	r1, #3
   2acf8:	bl	121e8 <hasmntopt@plt>
   2acfc:	rsbs	r2, r0, #1
   2ad00:	movcc	r2, #0
   2ad04:	b	2abf8 <__assert_fail@plt+0x185c0>
   2ad08:	bl	1238c <__errno_location@plt>
   2ad0c:	ldr	r9, [r0]
   2ad10:	mov	r7, r0
   2ad14:	str	r4, [r6]
   2ad18:	ldr	r4, [sp]
   2ad1c:	cmp	r4, #0
   2ad20:	bne	2ad40 <__assert_fail@plt+0x18708>
   2ad24:	b	2ad6c <__assert_fail@plt+0x18734>
   2ad28:	mov	r0, r4
   2ad2c:	bl	12020 <free@plt>
   2ad30:	cmp	r5, #0
   2ad34:	str	r5, [sp]
   2ad38:	beq	2ad6c <__assert_fail@plt+0x18734>
   2ad3c:	mov	r4, r5
   2ad40:	ldr	r0, [r4]
   2ad44:	ldr	r5, [r4, #28]
   2ad48:	bl	12020 <free@plt>
   2ad4c:	ldr	r0, [r4, #4]
   2ad50:	bl	12020 <free@plt>
   2ad54:	ldrb	r3, [r4, #24]
   2ad58:	tst	r3, #4
   2ad5c:	beq	2ad28 <__assert_fail@plt+0x186f0>
   2ad60:	ldr	r0, [r4, #8]
   2ad64:	bl	12020 <free@plt>
   2ad68:	b	2ad28 <__assert_fail@plt+0x186f0>
   2ad6c:	str	r9, [r7]
   2ad70:	mov	r0, #0
   2ad74:	b	2ac68 <__assert_fail@plt+0x18630>
   2ad78:	mov	r0, r7
   2ad7c:	b	2ac68 <__assert_fail@plt+0x18630>
   2ad80:	bl	120e0 <__stack_chk_fail@plt>
   2ad84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad88:	movw	r4, #21904	; 0x5590
   2ad8c:	movt	r4, #4
   2ad90:	sub	sp, sp, #4048	; 0xfd0
   2ad94:	sub	sp, sp, #4
   2ad98:	cmn	r0, #100	; 0x64
   2ad9c:	ldr	r3, [r4]
   2ada0:	mov	r5, r0
   2ada4:	mov	r6, r1
   2ada8:	mov	r7, r2
   2adac:	str	r3, [sp, #4044]	; 0xfcc
   2adb0:	beq	2ae9c <__assert_fail@plt+0x18864>
   2adb4:	ldrb	r3, [r1]
   2adb8:	cmp	r3, #47	; 0x2f
   2adbc:	beq	2ae9c <__assert_fail@plt+0x18864>
   2adc0:	add	r8, sp, #12
   2adc4:	mov	r1, r0
   2adc8:	mov	r2, r6
   2adcc:	mov	r0, r8
   2add0:	bl	2c174 <__assert_fail@plt+0x19b3c>
   2add4:	subs	r9, r0, #0
   2add8:	beq	2ae48 <__assert_fail@plt+0x18810>
   2addc:	mov	r1, r7
   2ade0:	bl	2c024 <__assert_fail@plt+0x199ec>
   2ade4:	mov	sl, r0
   2ade8:	bl	1238c <__errno_location@plt>
   2adec:	cmp	r9, r8
   2adf0:	mov	fp, r0
   2adf4:	ldr	r8, [r0]
   2adf8:	beq	2ae04 <__assert_fail@plt+0x187cc>
   2adfc:	mov	r0, r9
   2ae00:	bl	12020 <free@plt>
   2ae04:	cmn	sl, #1
   2ae08:	beq	2ae30 <__assert_fail@plt+0x187f8>
   2ae0c:	mov	r3, sl
   2ae10:	ldr	r2, [sp, #4044]	; 0xfcc
   2ae14:	mov	r0, r3
   2ae18:	ldr	r3, [r4]
   2ae1c:	cmp	r2, r3
   2ae20:	bne	2af38 <__assert_fail@plt+0x18900>
   2ae24:	add	sp, sp, #4048	; 0xfd0
   2ae28:	add	sp, sp, #4
   2ae2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae30:	cmp	r8, #20
   2ae34:	beq	2ae48 <__assert_fail@plt+0x18810>
   2ae38:	sub	r3, r8, #1
   2ae3c:	cmp	r8, #13
   2ae40:	cmpne	r3, #1
   2ae44:	bhi	2aefc <__assert_fail@plt+0x188c4>
   2ae48:	add	r0, sp, #4
   2ae4c:	bl	28fe4 <__assert_fail@plt+0x169ac>
   2ae50:	cmp	r0, #0
   2ae54:	bne	2af3c <__assert_fail@plt+0x18904>
   2ae58:	cmp	r5, #0
   2ae5c:	blt	2ae6c <__assert_fail@plt+0x18834>
   2ae60:	ldr	r3, [sp, #4]
   2ae64:	cmp	r3, r5
   2ae68:	beq	2af1c <__assert_fail@plt+0x188e4>
   2ae6c:	mov	r0, r5
   2ae70:	bl	12524 <fchdir@plt>
   2ae74:	subs	r8, r0, #0
   2ae78:	beq	2aeb0 <__assert_fail@plt+0x18878>
   2ae7c:	bl	1238c <__errno_location@plt>
   2ae80:	ldr	r6, [r0]
   2ae84:	mov	r5, r0
   2ae88:	add	r0, sp, #4
   2ae8c:	bl	2905c <__assert_fail@plt+0x16a24>
   2ae90:	mvn	r3, #0
   2ae94:	str	r6, [r5]
   2ae98:	b	2ae10 <__assert_fail@plt+0x187d8>
   2ae9c:	mov	r0, r6
   2aea0:	mov	r1, r7
   2aea4:	bl	2c024 <__assert_fail@plt+0x199ec>
   2aea8:	mov	r3, r0
   2aeac:	b	2ae10 <__assert_fail@plt+0x187d8>
   2aeb0:	mov	r0, r6
   2aeb4:	mov	r1, r7
   2aeb8:	bl	2c024 <__assert_fail@plt+0x199ec>
   2aebc:	cmn	r0, #1
   2aec0:	mov	r5, r0
   2aec4:	beq	2af10 <__assert_fail@plt+0x188d8>
   2aec8:	add	r0, sp, #4
   2aecc:	bl	29040 <__assert_fail@plt+0x16a08>
   2aed0:	cmp	r0, #0
   2aed4:	bne	2af48 <__assert_fail@plt+0x18910>
   2aed8:	add	r0, sp, #4
   2aedc:	bl	2905c <__assert_fail@plt+0x16a24>
   2aee0:	cmp	r8, #0
   2aee4:	moveq	r3, r5
   2aee8:	beq	2ae10 <__assert_fail@plt+0x187d8>
   2aeec:	bl	1238c <__errno_location@plt>
   2aef0:	mov	r3, r5
   2aef4:	str	r8, [r0]
   2aef8:	b	2ae10 <__assert_fail@plt+0x187d8>
   2aefc:	cmp	r8, #38	; 0x26
   2af00:	cmpne	r8, #95	; 0x5f
   2af04:	strne	r8, [fp]
   2af08:	bne	2ae0c <__assert_fail@plt+0x187d4>
   2af0c:	b	2ae48 <__assert_fail@plt+0x18810>
   2af10:	bl	1238c <__errno_location@plt>
   2af14:	ldr	r8, [r0]
   2af18:	b	2aec8 <__assert_fail@plt+0x18890>
   2af1c:	add	r0, sp, #4
   2af20:	bl	2905c <__assert_fail@plt+0x16a24>
   2af24:	bl	1238c <__errno_location@plt>
   2af28:	mov	r2, #9
   2af2c:	mvn	r3, #0
   2af30:	str	r2, [r0]
   2af34:	b	2ae10 <__assert_fail@plt+0x187d8>
   2af38:	bl	120e0 <__stack_chk_fail@plt>
   2af3c:	bl	1238c <__errno_location@plt>
   2af40:	ldr	r0, [r0]
   2af44:	bl	25928 <__assert_fail@plt+0x132f0>
   2af48:	bl	1238c <__errno_location@plt>
   2af4c:	ldr	r0, [r0]
   2af50:	bl	25964 <__assert_fail@plt+0x1332c>
   2af54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af58:	movw	r4, #21904	; 0x5590
   2af5c:	movt	r4, #4
   2af60:	sub	sp, sp, #4048	; 0xfd0
   2af64:	sub	sp, sp, #4
   2af68:	cmn	r0, #100	; 0x64
   2af6c:	ldr	r3, [r4]
   2af70:	mov	r5, r0
   2af74:	mov	r6, r1
   2af78:	mov	r7, r2
   2af7c:	str	r3, [sp, #4044]	; 0xfcc
   2af80:	beq	2b06c <__assert_fail@plt+0x18a34>
   2af84:	ldrb	r3, [r1]
   2af88:	cmp	r3, #47	; 0x2f
   2af8c:	beq	2b06c <__assert_fail@plt+0x18a34>
   2af90:	add	r8, sp, #12
   2af94:	mov	r1, r0
   2af98:	mov	r2, r6
   2af9c:	mov	r0, r8
   2afa0:	bl	2c174 <__assert_fail@plt+0x19b3c>
   2afa4:	subs	r9, r0, #0
   2afa8:	beq	2b018 <__assert_fail@plt+0x189e0>
   2afac:	mov	r1, r7
   2afb0:	bl	2c094 <__assert_fail@plt+0x19a5c>
   2afb4:	mov	sl, r0
   2afb8:	bl	1238c <__errno_location@plt>
   2afbc:	cmp	r9, r8
   2afc0:	mov	fp, r0
   2afc4:	ldr	r8, [r0]
   2afc8:	beq	2afd4 <__assert_fail@plt+0x1899c>
   2afcc:	mov	r0, r9
   2afd0:	bl	12020 <free@plt>
   2afd4:	cmn	sl, #1
   2afd8:	beq	2b000 <__assert_fail@plt+0x189c8>
   2afdc:	mov	r3, sl
   2afe0:	ldr	r2, [sp, #4044]	; 0xfcc
   2afe4:	mov	r0, r3
   2afe8:	ldr	r3, [r4]
   2afec:	cmp	r2, r3
   2aff0:	bne	2b108 <__assert_fail@plt+0x18ad0>
   2aff4:	add	sp, sp, #4048	; 0xfd0
   2aff8:	add	sp, sp, #4
   2affc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b000:	cmp	r8, #20
   2b004:	beq	2b018 <__assert_fail@plt+0x189e0>
   2b008:	sub	r3, r8, #1
   2b00c:	cmp	r8, #13
   2b010:	cmpne	r3, #1
   2b014:	bhi	2b0cc <__assert_fail@plt+0x18a94>
   2b018:	add	r0, sp, #4
   2b01c:	bl	28fe4 <__assert_fail@plt+0x169ac>
   2b020:	cmp	r0, #0
   2b024:	bne	2b10c <__assert_fail@plt+0x18ad4>
   2b028:	cmp	r5, #0
   2b02c:	blt	2b03c <__assert_fail@plt+0x18a04>
   2b030:	ldr	r3, [sp, #4]
   2b034:	cmp	r3, r5
   2b038:	beq	2b0ec <__assert_fail@plt+0x18ab4>
   2b03c:	mov	r0, r5
   2b040:	bl	12524 <fchdir@plt>
   2b044:	subs	r8, r0, #0
   2b048:	beq	2b080 <__assert_fail@plt+0x18a48>
   2b04c:	bl	1238c <__errno_location@plt>
   2b050:	ldr	r6, [r0]
   2b054:	mov	r5, r0
   2b058:	add	r0, sp, #4
   2b05c:	bl	2905c <__assert_fail@plt+0x16a24>
   2b060:	mvn	r3, #0
   2b064:	str	r6, [r5]
   2b068:	b	2afe0 <__assert_fail@plt+0x189a8>
   2b06c:	mov	r0, r6
   2b070:	mov	r1, r7
   2b074:	bl	2c094 <__assert_fail@plt+0x19a5c>
   2b078:	mov	r3, r0
   2b07c:	b	2afe0 <__assert_fail@plt+0x189a8>
   2b080:	mov	r0, r6
   2b084:	mov	r1, r7
   2b088:	bl	2c094 <__assert_fail@plt+0x19a5c>
   2b08c:	cmn	r0, #1
   2b090:	mov	r5, r0
   2b094:	beq	2b0e0 <__assert_fail@plt+0x18aa8>
   2b098:	add	r0, sp, #4
   2b09c:	bl	29040 <__assert_fail@plt+0x16a08>
   2b0a0:	cmp	r0, #0
   2b0a4:	bne	2b118 <__assert_fail@plt+0x18ae0>
   2b0a8:	add	r0, sp, #4
   2b0ac:	bl	2905c <__assert_fail@plt+0x16a24>
   2b0b0:	cmp	r8, #0
   2b0b4:	moveq	r3, r5
   2b0b8:	beq	2afe0 <__assert_fail@plt+0x189a8>
   2b0bc:	bl	1238c <__errno_location@plt>
   2b0c0:	mov	r3, r5
   2b0c4:	str	r8, [r0]
   2b0c8:	b	2afe0 <__assert_fail@plt+0x189a8>
   2b0cc:	cmp	r8, #38	; 0x26
   2b0d0:	cmpne	r8, #95	; 0x5f
   2b0d4:	strne	r8, [fp]
   2b0d8:	bne	2afdc <__assert_fail@plt+0x189a4>
   2b0dc:	b	2b018 <__assert_fail@plt+0x189e0>
   2b0e0:	bl	1238c <__errno_location@plt>
   2b0e4:	ldr	r8, [r0]
   2b0e8:	b	2b098 <__assert_fail@plt+0x18a60>
   2b0ec:	add	r0, sp, #4
   2b0f0:	bl	2905c <__assert_fail@plt+0x16a24>
   2b0f4:	bl	1238c <__errno_location@plt>
   2b0f8:	mov	r2, #9
   2b0fc:	mvn	r3, #0
   2b100:	str	r2, [r0]
   2b104:	b	2afe0 <__assert_fail@plt+0x189a8>
   2b108:	bl	120e0 <__stack_chk_fail@plt>
   2b10c:	bl	1238c <__errno_location@plt>
   2b110:	ldr	r0, [r0]
   2b114:	bl	25928 <__assert_fail@plt+0x132f0>
   2b118:	bl	1238c <__errno_location@plt>
   2b11c:	ldr	r0, [r0]
   2b120:	bl	25964 <__assert_fail@plt+0x1332c>
   2b124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b128:	movw	r4, #21904	; 0x5590
   2b12c:	movt	r4, #4
   2b130:	sub	sp, sp, #4048	; 0xfd0
   2b134:	sub	sp, sp, #4
   2b138:	cmn	r0, #100	; 0x64
   2b13c:	ldr	r3, [r4]
   2b140:	mov	r5, r0
   2b144:	mov	r6, r1
   2b148:	mov	r7, r2
   2b14c:	str	r3, [sp, #4044]	; 0xfcc
   2b150:	beq	2b23c <__assert_fail@plt+0x18c04>
   2b154:	ldrb	r3, [r1]
   2b158:	cmp	r3, #47	; 0x2f
   2b15c:	beq	2b23c <__assert_fail@plt+0x18c04>
   2b160:	add	r8, sp, #12
   2b164:	mov	r1, r0
   2b168:	mov	r2, r6
   2b16c:	mov	r0, r8
   2b170:	bl	2c174 <__assert_fail@plt+0x19b3c>
   2b174:	subs	r9, r0, #0
   2b178:	beq	2b1e8 <__assert_fail@plt+0x18bb0>
   2b17c:	mov	r1, r7
   2b180:	bl	12440 <setfilecon@plt>
   2b184:	mov	sl, r0
   2b188:	bl	1238c <__errno_location@plt>
   2b18c:	cmp	r9, r8
   2b190:	mov	fp, r0
   2b194:	ldr	r8, [r0]
   2b198:	beq	2b1a4 <__assert_fail@plt+0x18b6c>
   2b19c:	mov	r0, r9
   2b1a0:	bl	12020 <free@plt>
   2b1a4:	cmn	sl, #1
   2b1a8:	beq	2b1d0 <__assert_fail@plt+0x18b98>
   2b1ac:	mov	r3, sl
   2b1b0:	ldr	r2, [sp, #4044]	; 0xfcc
   2b1b4:	mov	r0, r3
   2b1b8:	ldr	r3, [r4]
   2b1bc:	cmp	r2, r3
   2b1c0:	bne	2b2d8 <__assert_fail@plt+0x18ca0>
   2b1c4:	add	sp, sp, #4048	; 0xfd0
   2b1c8:	add	sp, sp, #4
   2b1cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1d0:	cmp	r8, #20
   2b1d4:	beq	2b1e8 <__assert_fail@plt+0x18bb0>
   2b1d8:	sub	r3, r8, #1
   2b1dc:	cmp	r8, #13
   2b1e0:	cmpne	r3, #1
   2b1e4:	bhi	2b29c <__assert_fail@plt+0x18c64>
   2b1e8:	add	r0, sp, #4
   2b1ec:	bl	28fe4 <__assert_fail@plt+0x169ac>
   2b1f0:	cmp	r0, #0
   2b1f4:	bne	2b2dc <__assert_fail@plt+0x18ca4>
   2b1f8:	cmp	r5, #0
   2b1fc:	blt	2b20c <__assert_fail@plt+0x18bd4>
   2b200:	ldr	r3, [sp, #4]
   2b204:	cmp	r3, r5
   2b208:	beq	2b2bc <__assert_fail@plt+0x18c84>
   2b20c:	mov	r0, r5
   2b210:	bl	12524 <fchdir@plt>
   2b214:	subs	r8, r0, #0
   2b218:	beq	2b250 <__assert_fail@plt+0x18c18>
   2b21c:	bl	1238c <__errno_location@plt>
   2b220:	ldr	r6, [r0]
   2b224:	mov	r5, r0
   2b228:	add	r0, sp, #4
   2b22c:	bl	2905c <__assert_fail@plt+0x16a24>
   2b230:	mvn	r3, #0
   2b234:	str	r6, [r5]
   2b238:	b	2b1b0 <__assert_fail@plt+0x18b78>
   2b23c:	mov	r0, r6
   2b240:	mov	r1, r7
   2b244:	bl	12440 <setfilecon@plt>
   2b248:	mov	r3, r0
   2b24c:	b	2b1b0 <__assert_fail@plt+0x18b78>
   2b250:	mov	r0, r6
   2b254:	mov	r1, r7
   2b258:	bl	12440 <setfilecon@plt>
   2b25c:	cmn	r0, #1
   2b260:	mov	r5, r0
   2b264:	beq	2b2b0 <__assert_fail@plt+0x18c78>
   2b268:	add	r0, sp, #4
   2b26c:	bl	29040 <__assert_fail@plt+0x16a08>
   2b270:	cmp	r0, #0
   2b274:	bne	2b2e8 <__assert_fail@plt+0x18cb0>
   2b278:	add	r0, sp, #4
   2b27c:	bl	2905c <__assert_fail@plt+0x16a24>
   2b280:	cmp	r8, #0
   2b284:	moveq	r3, r5
   2b288:	beq	2b1b0 <__assert_fail@plt+0x18b78>
   2b28c:	bl	1238c <__errno_location@plt>
   2b290:	mov	r3, r5
   2b294:	str	r8, [r0]
   2b298:	b	2b1b0 <__assert_fail@plt+0x18b78>
   2b29c:	cmp	r8, #38	; 0x26
   2b2a0:	cmpne	r8, #95	; 0x5f
   2b2a4:	strne	r8, [fp]
   2b2a8:	bne	2b1ac <__assert_fail@plt+0x18b74>
   2b2ac:	b	2b1e8 <__assert_fail@plt+0x18bb0>
   2b2b0:	bl	1238c <__errno_location@plt>
   2b2b4:	ldr	r8, [r0]
   2b2b8:	b	2b268 <__assert_fail@plt+0x18c30>
   2b2bc:	add	r0, sp, #4
   2b2c0:	bl	2905c <__assert_fail@plt+0x16a24>
   2b2c4:	bl	1238c <__errno_location@plt>
   2b2c8:	mov	r2, #9
   2b2cc:	mvn	r3, #0
   2b2d0:	str	r2, [r0]
   2b2d4:	b	2b1b0 <__assert_fail@plt+0x18b78>
   2b2d8:	bl	120e0 <__stack_chk_fail@plt>
   2b2dc:	bl	1238c <__errno_location@plt>
   2b2e0:	ldr	r0, [r0]
   2b2e4:	bl	25928 <__assert_fail@plt+0x132f0>
   2b2e8:	bl	1238c <__errno_location@plt>
   2b2ec:	ldr	r0, [r0]
   2b2f0:	bl	25964 <__assert_fail@plt+0x1332c>
   2b2f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2f8:	movw	r4, #21904	; 0x5590
   2b2fc:	movt	r4, #4
   2b300:	sub	sp, sp, #4048	; 0xfd0
   2b304:	sub	sp, sp, #4
   2b308:	cmn	r0, #100	; 0x64
   2b30c:	ldr	r3, [r4]
   2b310:	mov	r5, r0
   2b314:	mov	r6, r1
   2b318:	mov	r7, r2
   2b31c:	str	r3, [sp, #4044]	; 0xfcc
   2b320:	beq	2b40c <__assert_fail@plt+0x18dd4>
   2b324:	ldrb	r3, [r1]
   2b328:	cmp	r3, #47	; 0x2f
   2b32c:	beq	2b40c <__assert_fail@plt+0x18dd4>
   2b330:	add	r8, sp, #12
   2b334:	mov	r1, r0
   2b338:	mov	r2, r6
   2b33c:	mov	r0, r8
   2b340:	bl	2c174 <__assert_fail@plt+0x19b3c>
   2b344:	subs	r9, r0, #0
   2b348:	beq	2b3b8 <__assert_fail@plt+0x18d80>
   2b34c:	mov	r1, r7
   2b350:	bl	12008 <lsetfilecon@plt>
   2b354:	mov	sl, r0
   2b358:	bl	1238c <__errno_location@plt>
   2b35c:	cmp	r9, r8
   2b360:	mov	fp, r0
   2b364:	ldr	r8, [r0]
   2b368:	beq	2b374 <__assert_fail@plt+0x18d3c>
   2b36c:	mov	r0, r9
   2b370:	bl	12020 <free@plt>
   2b374:	cmn	sl, #1
   2b378:	beq	2b3a0 <__assert_fail@plt+0x18d68>
   2b37c:	mov	r3, sl
   2b380:	ldr	r2, [sp, #4044]	; 0xfcc
   2b384:	mov	r0, r3
   2b388:	ldr	r3, [r4]
   2b38c:	cmp	r2, r3
   2b390:	bne	2b4a8 <__assert_fail@plt+0x18e70>
   2b394:	add	sp, sp, #4048	; 0xfd0
   2b398:	add	sp, sp, #4
   2b39c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3a0:	cmp	r8, #20
   2b3a4:	beq	2b3b8 <__assert_fail@plt+0x18d80>
   2b3a8:	sub	r3, r8, #1
   2b3ac:	cmp	r8, #13
   2b3b0:	cmpne	r3, #1
   2b3b4:	bhi	2b46c <__assert_fail@plt+0x18e34>
   2b3b8:	add	r0, sp, #4
   2b3bc:	bl	28fe4 <__assert_fail@plt+0x169ac>
   2b3c0:	cmp	r0, #0
   2b3c4:	bne	2b4ac <__assert_fail@plt+0x18e74>
   2b3c8:	cmp	r5, #0
   2b3cc:	blt	2b3dc <__assert_fail@plt+0x18da4>
   2b3d0:	ldr	r3, [sp, #4]
   2b3d4:	cmp	r3, r5
   2b3d8:	beq	2b48c <__assert_fail@plt+0x18e54>
   2b3dc:	mov	r0, r5
   2b3e0:	bl	12524 <fchdir@plt>
   2b3e4:	subs	r8, r0, #0
   2b3e8:	beq	2b420 <__assert_fail@plt+0x18de8>
   2b3ec:	bl	1238c <__errno_location@plt>
   2b3f0:	ldr	r6, [r0]
   2b3f4:	mov	r5, r0
   2b3f8:	add	r0, sp, #4
   2b3fc:	bl	2905c <__assert_fail@plt+0x16a24>
   2b400:	mvn	r3, #0
   2b404:	str	r6, [r5]
   2b408:	b	2b380 <__assert_fail@plt+0x18d48>
   2b40c:	mov	r0, r6
   2b410:	mov	r1, r7
   2b414:	bl	12008 <lsetfilecon@plt>
   2b418:	mov	r3, r0
   2b41c:	b	2b380 <__assert_fail@plt+0x18d48>
   2b420:	mov	r0, r6
   2b424:	mov	r1, r7
   2b428:	bl	12008 <lsetfilecon@plt>
   2b42c:	cmn	r0, #1
   2b430:	mov	r5, r0
   2b434:	beq	2b480 <__assert_fail@plt+0x18e48>
   2b438:	add	r0, sp, #4
   2b43c:	bl	29040 <__assert_fail@plt+0x16a08>
   2b440:	cmp	r0, #0
   2b444:	bne	2b4b8 <__assert_fail@plt+0x18e80>
   2b448:	add	r0, sp, #4
   2b44c:	bl	2905c <__assert_fail@plt+0x16a24>
   2b450:	cmp	r8, #0
   2b454:	moveq	r3, r5
   2b458:	beq	2b380 <__assert_fail@plt+0x18d48>
   2b45c:	bl	1238c <__errno_location@plt>
   2b460:	mov	r3, r5
   2b464:	str	r8, [r0]
   2b468:	b	2b380 <__assert_fail@plt+0x18d48>
   2b46c:	cmp	r8, #38	; 0x26
   2b470:	cmpne	r8, #95	; 0x5f
   2b474:	strne	r8, [fp]
   2b478:	bne	2b37c <__assert_fail@plt+0x18d44>
   2b47c:	b	2b3b8 <__assert_fail@plt+0x18d80>
   2b480:	bl	1238c <__errno_location@plt>
   2b484:	ldr	r8, [r0]
   2b488:	b	2b438 <__assert_fail@plt+0x18e00>
   2b48c:	add	r0, sp, #4
   2b490:	bl	2905c <__assert_fail@plt+0x16a24>
   2b494:	bl	1238c <__errno_location@plt>
   2b498:	mov	r2, #9
   2b49c:	mvn	r3, #0
   2b4a0:	str	r2, [r0]
   2b4a4:	b	2b380 <__assert_fail@plt+0x18d48>
   2b4a8:	bl	120e0 <__stack_chk_fail@plt>
   2b4ac:	bl	1238c <__errno_location@plt>
   2b4b0:	ldr	r0, [r0]
   2b4b4:	bl	25928 <__assert_fail@plt+0x132f0>
   2b4b8:	bl	1238c <__errno_location@plt>
   2b4bc:	ldr	r0, [r0]
   2b4c0:	bl	25964 <__assert_fail@plt+0x1332c>
   2b4c4:	push	{r3, lr}
   2b4c8:	movw	r3, #21820	; 0x553c
   2b4cc:	movt	r3, #4
   2b4d0:	ldr	r0, [r3]
   2b4d4:	bl	12308 <exit@plt>
   2b4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4dc:	sub	sp, sp, #12
   2b4e0:	mov	r7, r1
   2b4e4:	mov	r6, r3
   2b4e8:	str	r2, [sp]
   2b4ec:	mov	sl, r0
   2b4f0:	bl	1232c <strlen@plt>
   2b4f4:	ldr	fp, [r7]
   2b4f8:	cmp	fp, #0
   2b4fc:	mov	r8, r0
   2b500:	beq	2b5c4 <__assert_fail@plt+0x18f8c>
   2b504:	mov	r3, #0
   2b508:	ldr	r4, [sp]
   2b50c:	str	r3, [sp, #4]
   2b510:	mov	r5, r3
   2b514:	mvn	r9, #0
   2b518:	b	2b544 <__assert_fail@plt+0x18f0c>
   2b51c:	bl	120b0 <memcmp@plt>
   2b520:	ldr	r3, [sp, #4]
   2b524:	cmp	r0, #0
   2b528:	movne	r3, #1
   2b52c:	str	r3, [sp, #4]
   2b530:	ldr	fp, [r7, #4]!
   2b534:	add	r5, r5, #1
   2b538:	add	r4, r4, r6
   2b53c:	cmp	fp, #0
   2b540:	beq	2b5a0 <__assert_fail@plt+0x18f68>
   2b544:	mov	r0, fp
   2b548:	mov	r1, sl
   2b54c:	mov	r2, r8
   2b550:	bl	125b4 <strncmp@plt>
   2b554:	cmp	r0, #0
   2b558:	mov	r0, fp
   2b55c:	bne	2b530 <__assert_fail@plt+0x18ef8>
   2b560:	bl	1232c <strlen@plt>
   2b564:	ldr	r3, [sp]
   2b568:	mov	r1, r4
   2b56c:	mov	r2, r6
   2b570:	cmp	r0, r8
   2b574:	mla	r0, r6, r9, r3
   2b578:	beq	2b5b8 <__assert_fail@plt+0x18f80>
   2b57c:	cmn	r9, #1
   2b580:	moveq	r9, r5
   2b584:	beq	2b530 <__assert_fail@plt+0x18ef8>
   2b588:	ldr	r3, [sp]
   2b58c:	cmp	r3, #0
   2b590:	bne	2b51c <__assert_fail@plt+0x18ee4>
   2b594:	mov	r3, #1
   2b598:	str	r3, [sp, #4]
   2b59c:	b	2b530 <__assert_fail@plt+0x18ef8>
   2b5a0:	ldr	r3, [sp, #4]
   2b5a4:	cmp	r3, #0
   2b5a8:	bne	2b5cc <__assert_fail@plt+0x18f94>
   2b5ac:	mov	r0, r9
   2b5b0:	add	sp, sp, #12
   2b5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5b8:	mov	r0, r5
   2b5bc:	add	sp, sp, #12
   2b5c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5c4:	mvn	r9, #0
   2b5c8:	b	2b5ac <__assert_fail@plt+0x18f74>
   2b5cc:	mvn	r0, #1
   2b5d0:	b	2b5b0 <__assert_fail@plt+0x18f78>
   2b5d4:	cmn	r2, #1
   2b5d8:	mov	r2, #5
   2b5dc:	push	{r4, r5, r6, lr}
   2b5e0:	mov	r5, r1
   2b5e4:	sub	sp, sp, #8
   2b5e8:	movweq	r1, #13584	; 0x3510
   2b5ec:	movwne	r1, #13612	; 0x352c
   2b5f0:	movteq	r1, #3
   2b5f4:	movtne	r1, #3
   2b5f8:	mov	r4, r0
   2b5fc:	moveq	r0, #0
   2b600:	movne	r0, #0
   2b604:	bl	120d4 <dcgettext@plt>
   2b608:	mov	r2, r5
   2b60c:	mov	r1, #6
   2b610:	mov	r6, r0
   2b614:	mov	r0, #0
   2b618:	bl	28cec <__assert_fail@plt+0x166b4>
   2b61c:	mov	r1, r4
   2b620:	mov	r5, r0
   2b624:	mov	r0, #1
   2b628:	bl	28fbc <__assert_fail@plt+0x16984>
   2b62c:	mov	r3, r5
   2b630:	mov	r2, r6
   2b634:	str	r0, [sp]
   2b638:	mov	r0, #0
   2b63c:	mov	r1, r0
   2b640:	bl	12224 <error@plt>
   2b644:	add	sp, sp, #8
   2b648:	pop	{r4, r5, r6, pc}
   2b64c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b650:	movw	sl, #21912	; 0x5598
   2b654:	movt	sl, #4
   2b658:	mov	r8, r0
   2b65c:	mov	r4, r1
   2b660:	mov	r7, r2
   2b664:	movw	r1, #13644	; 0x354c
   2b668:	mov	r2, #5
   2b66c:	movt	r1, #3
   2b670:	mov	r0, #0
   2b674:	bl	120d4 <dcgettext@plt>
   2b678:	ldr	r1, [sl]
   2b67c:	bl	125a8 <fputs@plt>
   2b680:	ldr	r5, [r8]
   2b684:	cmp	r5, #0
   2b688:	movne	r9, #0
   2b68c:	movne	r6, r9
   2b690:	bne	2b6d4 <__assert_fail@plt+0x1909c>
   2b694:	b	2b71c <__assert_fail@plt+0x190e4>
   2b698:	mov	r0, r5
   2b69c:	ldr	r5, [sl]
   2b6a0:	bl	28fcc <__assert_fail@plt+0x16994>
   2b6a4:	movw	r2, #13668	; 0x3564
   2b6a8:	mov	r1, #1
   2b6ac:	movt	r2, #3
   2b6b0:	mov	r9, r4
   2b6b4:	mov	r3, r0
   2b6b8:	mov	r0, r5
   2b6bc:	bl	12428 <__fprintf_chk@plt>
   2b6c0:	ldr	r5, [r8, #4]!
   2b6c4:	add	r6, r6, #1
   2b6c8:	add	r4, r4, r7
   2b6cc:	cmp	r5, #0
   2b6d0:	beq	2b71c <__assert_fail@plt+0x190e4>
   2b6d4:	cmp	r6, #0
   2b6d8:	mov	r1, r4
   2b6dc:	mov	r2, r7
   2b6e0:	mov	r0, r9
   2b6e4:	beq	2b698 <__assert_fail@plt+0x19060>
   2b6e8:	bl	120b0 <memcmp@plt>
   2b6ec:	cmp	r0, #0
   2b6f0:	bne	2b698 <__assert_fail@plt+0x19060>
   2b6f4:	mov	r0, r5
   2b6f8:	ldr	r5, [sl]
   2b6fc:	bl	28fcc <__assert_fail@plt+0x16994>
   2b700:	movw	r2, #13676	; 0x356c
   2b704:	mov	r1, #1
   2b708:	movt	r2, #3
   2b70c:	mov	r3, r0
   2b710:	mov	r0, r5
   2b714:	bl	12428 <__fprintf_chk@plt>
   2b718:	b	2b6c0 <__assert_fail@plt+0x19088>
   2b71c:	ldr	r1, [sl]
   2b720:	mov	r0, #10
   2b724:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b728:	b	12194 <_IO_putc@plt>
   2b72c:	push	{r4, r5, r6, r7, r8, lr}
   2b730:	mov	r7, r1
   2b734:	ldr	r4, [sp, #24]
   2b738:	mov	r1, r2
   2b73c:	mov	r6, r2
   2b740:	mov	r5, r3
   2b744:	mov	r2, r3
   2b748:	mov	r8, r0
   2b74c:	mov	r3, r4
   2b750:	mov	r0, r7
   2b754:	bl	2b4d8 <__assert_fail@plt+0x18ea0>
   2b758:	subs	r2, r0, #0
   2b75c:	blt	2b768 <__assert_fail@plt+0x19130>
   2b760:	mov	r0, r2
   2b764:	pop	{r4, r5, r6, r7, r8, pc}
   2b768:	mov	r0, r8
   2b76c:	mov	r1, r7
   2b770:	bl	2b5d4 <__assert_fail@plt+0x18f9c>
   2b774:	mov	r0, r6
   2b778:	mov	r1, r5
   2b77c:	mov	r2, r4
   2b780:	bl	2b64c <__assert_fail@plt+0x19014>
   2b784:	ldr	r3, [sp, #28]
   2b788:	blx	r3
   2b78c:	mvn	r0, #0
   2b790:	pop	{r4, r5, r6, r7, r8, pc}
   2b794:	push	{r4, r5, r6, r7, r8, lr}
   2b798:	mov	r8, r0
   2b79c:	ldr	r5, [r1]
   2b7a0:	mov	r6, r3
   2b7a4:	cmp	r5, #0
   2b7a8:	beq	2b7e0 <__assert_fail@plt+0x191a8>
   2b7ac:	mov	r4, r2
   2b7b0:	mov	r7, r1
   2b7b4:	b	2b7c4 <__assert_fail@plt+0x1918c>
   2b7b8:	ldr	r5, [r7, #4]!
   2b7bc:	cmp	r5, #0
   2b7c0:	beq	2b7e0 <__assert_fail@plt+0x191a8>
   2b7c4:	mov	r1, r4
   2b7c8:	mov	r0, r8
   2b7cc:	mov	r2, r6
   2b7d0:	add	r4, r4, r6
   2b7d4:	bl	120b0 <memcmp@plt>
   2b7d8:	cmp	r0, #0
   2b7dc:	bne	2b7b8 <__assert_fail@plt+0x19180>
   2b7e0:	mov	r0, r5
   2b7e4:	pop	{r4, r5, r6, r7, r8, pc}
   2b7e8:	push	{r4, r5, r6, lr}
   2b7ec:	mov	r5, r0
   2b7f0:	bl	1220c <__fpending@plt>
   2b7f4:	mov	r6, r0
   2b7f8:	mov	r0, r5
   2b7fc:	bl	12038 <ferror@plt>
   2b800:	mov	r4, r0
   2b804:	mov	r0, r5
   2b808:	bl	12458 <fclose@plt>
   2b80c:	adds	r5, r0, #0
   2b810:	movne	r5, #1
   2b814:	cmp	r4, #0
   2b818:	bne	2b838 <__assert_fail@plt+0x19200>
   2b81c:	cmp	r5, #0
   2b820:	beq	2b830 <__assert_fail@plt+0x191f8>
   2b824:	cmp	r6, #0
   2b828:	beq	2b854 <__assert_fail@plt+0x1921c>
   2b82c:	mvn	r4, #0
   2b830:	mov	r0, r4
   2b834:	pop	{r4, r5, r6, pc}
   2b838:	cmp	r5, #0
   2b83c:	bne	2b82c <__assert_fail@plt+0x191f4>
   2b840:	bl	1238c <__errno_location@plt>
   2b844:	mvn	r4, #0
   2b848:	str	r5, [r0]
   2b84c:	mov	r0, r4
   2b850:	pop	{r4, r5, r6, pc}
   2b854:	bl	1238c <__errno_location@plt>
   2b858:	ldr	r4, [r0]
   2b85c:	subs	r4, r4, #9
   2b860:	mvnne	r4, #0
   2b864:	mov	r0, r4
   2b868:	pop	{r4, r5, r6, pc}
   2b86c:	push	{r4, r5, lr}
   2b870:	movw	r4, #21904	; 0x5590
   2b874:	movt	r4, #4
   2b878:	sub	sp, sp, #20
   2b87c:	mov	r5, r0
   2b880:	mov	r0, #0
   2b884:	ldr	r3, [r4]
   2b888:	mov	r1, r5
   2b88c:	str	r3, [sp, #12]
   2b890:	bl	12044 <clock_gettime@plt>
   2b894:	cmp	r0, #0
   2b898:	beq	2b8bc <__assert_fail@plt+0x19284>
   2b89c:	mov	r1, #0
   2b8a0:	add	r0, sp, #4
   2b8a4:	bl	12200 <gettimeofday@plt>
   2b8a8:	ldr	r3, [sp, #8]
   2b8ac:	mov	r1, #1000	; 0x3e8
   2b8b0:	ldr	r2, [sp, #4]
   2b8b4:	mul	r3, r1, r3
   2b8b8:	stm	r5, {r2, r3}
   2b8bc:	ldr	r2, [sp, #12]
   2b8c0:	ldr	r3, [r4]
   2b8c4:	cmp	r2, r3
   2b8c8:	bne	2b8d4 <__assert_fail@plt+0x1929c>
   2b8cc:	add	sp, sp, #20
   2b8d0:	pop	{r4, r5, pc}
   2b8d4:	bl	120e0 <__stack_chk_fail@plt>
   2b8d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b8dc:	movw	r7, #21904	; 0x5590
   2b8e0:	movt	r7, #4
   2b8e4:	sub	sp, sp, #132	; 0x84
   2b8e8:	mov	r0, #14
   2b8ec:	movw	r5, #24304	; 0x5ef0
   2b8f0:	ldr	r3, [r7]
   2b8f4:	movt	r5, #4
   2b8f8:	movw	r6, #54180	; 0xd3a4
   2b8fc:	movt	r6, #2
   2b900:	str	r3, [sp, #124]	; 0x7c
   2b904:	bl	124d0 <nl_langinfo@plt>
   2b908:	ldr	r4, [r5]
   2b90c:	cmp	r0, #0
   2b910:	movne	r6, r0
   2b914:	cmp	r4, #0
   2b918:	beq	2b9c0 <__assert_fail@plt+0x19388>
   2b91c:	ldrb	r5, [r4]
   2b920:	cmp	r5, #0
   2b924:	bne	2b958 <__assert_fail@plt+0x19320>
   2b928:	b	2b990 <__assert_fail@plt+0x19358>
   2b92c:	mov	r0, r4
   2b930:	bl	1232c <strlen@plt>
   2b934:	add	r0, r0, #1
   2b938:	add	r5, r4, r0
   2b93c:	mov	r0, r5
   2b940:	bl	1232c <strlen@plt>
   2b944:	add	r0, r0, #1
   2b948:	add	r4, r5, r0
   2b94c:	ldrb	r5, [r5, r0]
   2b950:	cmp	r5, #0
   2b954:	beq	2b990 <__assert_fail@plt+0x19358>
   2b958:	mov	r0, r6
   2b95c:	mov	r1, r4
   2b960:	bl	11fb4 <strcmp@plt>
   2b964:	cmp	r0, #0
   2b968:	beq	2b980 <__assert_fail@plt+0x19348>
   2b96c:	cmp	r5, #42	; 0x2a
   2b970:	bne	2b92c <__assert_fail@plt+0x192f4>
   2b974:	ldrb	r3, [r4, #1]
   2b978:	cmp	r3, #0
   2b97c:	bne	2b92c <__assert_fail@plt+0x192f4>
   2b980:	mov	r0, r4
   2b984:	bl	1232c <strlen@plt>
   2b988:	add	r0, r0, #1
   2b98c:	add	r6, r4, r0
   2b990:	ldrb	r0, [r6]
   2b994:	movw	r3, #13696	; 0x3580
   2b998:	ldr	r1, [sp, #124]	; 0x7c
   2b99c:	movt	r3, #3
   2b9a0:	cmp	r0, #0
   2b9a4:	ldr	r2, [r7]
   2b9a8:	movne	r0, r6
   2b9ac:	moveq	r0, r3
   2b9b0:	cmp	r1, r2
   2b9b4:	bne	2bc6c <__assert_fail@plt+0x19634>
   2b9b8:	add	sp, sp, #132	; 0x84
   2b9bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9c0:	movw	r0, #13704	; 0x3588
   2b9c4:	movt	r0, #3
   2b9c8:	bl	12260 <getenv@plt>
   2b9cc:	subs	r8, r0, #0
   2b9d0:	beq	2bc44 <__assert_fail@plt+0x1960c>
   2b9d4:	ldrb	r3, [r8]
   2b9d8:	cmp	r3, #0
   2b9dc:	beq	2bbdc <__assert_fail@plt+0x195a4>
   2b9e0:	bl	1232c <strlen@plt>
   2b9e4:	subs	sl, r0, #0
   2b9e8:	subne	r3, sl, #1
   2b9ec:	bne	2bbec <__assert_fail@plt+0x195b4>
   2b9f0:	mov	ip, #0
   2b9f4:	str	ip, [sp, #12]
   2b9f8:	add	fp, sl, ip
   2b9fc:	add	r0, fp, #14
   2ba00:	bl	12284 <malloc@plt>
   2ba04:	subs	r9, r0, #0
   2ba08:	beq	2bc38 <__assert_fail@plt+0x19600>
   2ba0c:	mov	r2, sl
   2ba10:	mov	r1, r8
   2ba14:	bl	1205c <memcpy@plt>
   2ba18:	ldr	r3, [sp, #12]
   2ba1c:	add	lr, r9, fp
   2ba20:	cmp	r3, #0
   2ba24:	movne	r3, #47	; 0x2f
   2ba28:	strbne	r3, [r9, sl]
   2ba2c:	movw	r3, #13720	; 0x3598
   2ba30:	movt	r3, #3
   2ba34:	ldm	r3!, {r0, r1, r2}
   2ba38:	ldrh	r3, [r3]
   2ba3c:	str	r0, [r9, fp]
   2ba40:	mov	r0, r9
   2ba44:	str	r1, [lr, #4]
   2ba48:	mov	r1, #32768	; 0x8000
   2ba4c:	strh	r3, [lr, #12]
   2ba50:	str	r2, [lr, #8]
   2ba54:	bl	12254 <open64@plt>
   2ba58:	subs	sl, r0, #0
   2ba5c:	blt	2bc04 <__assert_fail@plt+0x195cc>
   2ba60:	movw	r1, #65496	; 0xffd8
   2ba64:	movt	r1, #2
   2ba68:	bl	11f60 <fdopen@plt>
   2ba6c:	subs	r8, r0, #0
   2ba70:	beq	2bc58 <__assert_fail@plt+0x19620>
   2ba74:	mov	sl, #0
   2ba78:	ldr	r3, [r8, #4]
   2ba7c:	ldr	r2, [r8, #8]
   2ba80:	cmp	r3, r2
   2ba84:	bcs	2bb70 <__assert_fail@plt+0x19538>
   2ba88:	add	r2, r3, #1
   2ba8c:	str	r2, [r8, #4]
   2ba90:	ldrb	r0, [r3]
   2ba94:	cmp	r0, #32
   2ba98:	beq	2ba78 <__assert_fail@plt+0x19440>
   2ba9c:	sub	r3, r0, #9
   2baa0:	cmp	r3, #1
   2baa4:	bls	2ba78 <__assert_fail@plt+0x19440>
   2baa8:	cmp	r0, #35	; 0x23
   2baac:	beq	2bb84 <__assert_fail@plt+0x1954c>
   2bab0:	mov	r1, r8
   2bab4:	bl	12374 <ungetc@plt>
   2bab8:	mov	r0, r8
   2babc:	movw	r1, #13736	; 0x35a8
   2bac0:	add	r2, sp, #20
   2bac4:	movt	r1, #3
   2bac8:	add	r3, sp, #72	; 0x48
   2bacc:	bl	123ec <fscanf@plt>
   2bad0:	cmp	r0, #1
   2bad4:	ble	2bbb4 <__assert_fail@plt+0x1957c>
   2bad8:	add	r0, sp, #20
   2badc:	bl	1232c <strlen@plt>
   2bae0:	mov	fp, r0
   2bae4:	add	r0, sp, #72	; 0x48
   2bae8:	bl	1232c <strlen@plt>
   2baec:	cmp	sl, #0
   2baf0:	mov	ip, r0
   2baf4:	bne	2bc10 <__assert_fail@plt+0x195d8>
   2baf8:	add	sl, r0, fp
   2bafc:	str	ip, [sp, #4]
   2bb00:	add	r0, sl, #3
   2bb04:	add	sl, sl, #2
   2bb08:	bl	12284 <malloc@plt>
   2bb0c:	ldr	ip, [sp, #4]
   2bb10:	mov	r2, r0
   2bb14:	cmp	r2, #0
   2bb18:	beq	2bc70 <__assert_fail@plt+0x19638>
   2bb1c:	movw	r3, #65534	; 0xfffe
   2bb20:	movt	r3, #65535	; 0xffff
   2bb24:	rsb	ip, ip, sl
   2bb28:	rsb	r3, fp, r3
   2bb2c:	add	r0, r3, ip
   2bb30:	add	r1, sp, #20
   2bb34:	add	r0, r2, r0
   2bb38:	mov	r4, r2
   2bb3c:	str	r2, [sp, #8]
   2bb40:	str	ip, [sp, #4]
   2bb44:	bl	121f4 <strcpy@plt>
   2bb48:	ldr	ip, [sp, #4]
   2bb4c:	add	r1, sp, #72	; 0x48
   2bb50:	ldr	r2, [sp, #8]
   2bb54:	sub	r0, ip, #1
   2bb58:	add	r0, r2, r0
   2bb5c:	bl	121f4 <strcpy@plt>
   2bb60:	ldr	r3, [r8, #4]
   2bb64:	ldr	r2, [r8, #8]
   2bb68:	cmp	r3, r2
   2bb6c:	bcc	2ba88 <__assert_fail@plt+0x19450>
   2bb70:	mov	r0, r8
   2bb74:	bl	12494 <__uflow@plt>
   2bb78:	cmn	r0, #1
   2bb7c:	beq	2bbb4 <__assert_fail@plt+0x1957c>
   2bb80:	b	2ba94 <__assert_fail@plt+0x1945c>
   2bb84:	ldr	r3, [r8, #4]
   2bb88:	ldr	r2, [r8, #8]
   2bb8c:	cmp	r3, r2
   2bb90:	bcs	2bc8c <__assert_fail@plt+0x19654>
   2bb94:	add	r2, r3, #1
   2bb98:	str	r2, [r8, #4]
   2bb9c:	ldrb	r0, [r3]
   2bba0:	cmp	r0, #10
   2bba4:	cmnne	r0, #1
   2bba8:	bne	2bb84 <__assert_fail@plt+0x1954c>
   2bbac:	cmn	r0, #1
   2bbb0:	bne	2ba78 <__assert_fail@plt+0x19440>
   2bbb4:	mov	r0, r8
   2bbb8:	bl	12458 <fclose@plt>
   2bbbc:	cmp	sl, #0
   2bbc0:	beq	2bc04 <__assert_fail@plt+0x195cc>
   2bbc4:	mov	r3, #0
   2bbc8:	strb	r3, [r4, sl]
   2bbcc:	mov	r0, r9
   2bbd0:	bl	12020 <free@plt>
   2bbd4:	str	r4, [r5]
   2bbd8:	b	2b91c <__assert_fail@plt+0x192e4>
   2bbdc:	movw	r8, #13684	; 0x3574
   2bbe0:	movt	r8, #3
   2bbe4:	mov	r3, #7
   2bbe8:	mov	sl, #8
   2bbec:	ldrb	r3, [r8, r3]
   2bbf0:	cmp	r3, #47	; 0x2f
   2bbf4:	movne	ip, #1
   2bbf8:	strne	ip, [sp, #12]
   2bbfc:	bne	2b9f8 <__assert_fail@plt+0x193c0>
   2bc00:	b	2b9f0 <__assert_fail@plt+0x193b8>
   2bc04:	movw	r4, #54180	; 0xd3a4
   2bc08:	movt	r4, #2
   2bc0c:	b	2bbcc <__assert_fail@plt+0x19594>
   2bc10:	add	r3, fp, r0
   2bc14:	mov	r0, r4
   2bc18:	add	sl, r3, sl
   2bc1c:	str	ip, [sp, #4]
   2bc20:	add	r1, sl, #3
   2bc24:	add	sl, sl, #2
   2bc28:	bl	12104 <realloc@plt>
   2bc2c:	ldr	ip, [sp, #4]
   2bc30:	mov	r2, r0
   2bc34:	b	2bb14 <__assert_fail@plt+0x194dc>
   2bc38:	movw	r4, #54180	; 0xd3a4
   2bc3c:	movt	r4, #2
   2bc40:	b	2bbd4 <__assert_fail@plt+0x1959c>
   2bc44:	movw	r8, #13684	; 0x3574
   2bc48:	mov	r3, #7
   2bc4c:	movt	r8, #3
   2bc50:	mov	sl, #8
   2bc54:	b	2bbec <__assert_fail@plt+0x195b4>
   2bc58:	mov	r0, sl
   2bc5c:	movw	r4, #54180	; 0xd3a4
   2bc60:	bl	125d8 <close@plt>
   2bc64:	movt	r4, #2
   2bc68:	b	2bbcc <__assert_fail@plt+0x19594>
   2bc6c:	bl	120e0 <__stack_chk_fail@plt>
   2bc70:	mov	r0, r4
   2bc74:	movw	r4, #54180	; 0xd3a4
   2bc78:	bl	12020 <free@plt>
   2bc7c:	mov	r0, r8
   2bc80:	bl	12458 <fclose@plt>
   2bc84:	movt	r4, #2
   2bc88:	b	2bbcc <__assert_fail@plt+0x19594>
   2bc8c:	mov	r0, r8
   2bc90:	bl	12494 <__uflow@plt>
   2bc94:	b	2bba0 <__assert_fail@plt+0x19568>
   2bc98:	adds	r0, r0, #8
   2bc9c:	push	{r4, lr}
   2bca0:	bcs	2bcf4 <__assert_fail@plt+0x196bc>
   2bca4:	bl	12284 <malloc@plt>
   2bca8:	subs	ip, r0, #0
   2bcac:	beq	2bcf4 <__assert_fail@plt+0x196bc>
   2bcb0:	add	r1, ip, #8
   2bcb4:	movw	r3, #65281	; 0xff01
   2bcb8:	movt	r3, #65280	; 0xff00
   2bcbc:	movw	r2, #24308	; 0x5ef4
   2bcc0:	movt	r2, #4
   2bcc4:	mov	r0, r1
   2bcc8:	umull	r4, r3, r3, r1
   2bccc:	movw	r4, #64330	; 0xfb4a
   2bcd0:	movt	r4, #5141	; 0x1415
   2bcd4:	str	r4, [ip, #4]
   2bcd8:	lsr	r3, r3, #8
   2bcdc:	add	r3, r3, r3, lsl #8
   2bce0:	rsb	r3, r3, r1
   2bce4:	ldr	r4, [r2, r3, lsl #2]
   2bce8:	str	r1, [r2, r3, lsl #2]
   2bcec:	str	r4, [ip]
   2bcf0:	pop	{r4, pc}
   2bcf4:	mov	r0, #0
   2bcf8:	pop	{r4, pc}
   2bcfc:	cmp	r0, #0
   2bd00:	bxeq	lr
   2bd04:	ldr	r2, [r0, #-4]
   2bd08:	movw	r3, #64330	; 0xfb4a
   2bd0c:	movt	r3, #5141	; 0x1415
   2bd10:	cmp	r2, r3
   2bd14:	bxne	lr
   2bd18:	movw	r3, #65281	; 0xff01
   2bd1c:	movt	r3, #65280	; 0xff00
   2bd20:	movw	r1, #24308	; 0x5ef4
   2bd24:	movt	r1, #4
   2bd28:	umull	r2, r3, r3, r0
   2bd2c:	lsr	r3, r3, #8
   2bd30:	add	r3, r3, r3, lsl #8
   2bd34:	rsb	r3, r3, r0
   2bd38:	ldr	r2, [r1, r3, lsl #2]
   2bd3c:	cmp	r2, #0
   2bd40:	bxeq	lr
   2bd44:	cmp	r0, r2
   2bd48:	addeq	r2, r1, r3, lsl #2
   2bd4c:	bne	2bd60 <__assert_fail@plt+0x19728>
   2bd50:	b	2bd74 <__assert_fail@plt+0x1973c>
   2bd54:	cmp	r0, r3
   2bd58:	beq	2bd70 <__assert_fail@plt+0x19738>
   2bd5c:	mov	r2, r3
   2bd60:	ldr	r3, [r2, #-8]
   2bd64:	cmp	r3, #0
   2bd68:	bne	2bd54 <__assert_fail@plt+0x1971c>
   2bd6c:	bx	lr
   2bd70:	sub	r2, r2, #8
   2bd74:	ldr	ip, [r0, #-8]!
   2bd78:	str	ip, [r2]
   2bd7c:	b	12020 <free@plt>
   2bd80:	push	{r4, lr}
   2bd84:	mov	r4, r0
   2bd88:	bl	11ffc <wcwidth@plt>
   2bd8c:	cmp	r0, #0
   2bd90:	popge	{r4, pc}
   2bd94:	mov	r0, r4
   2bd98:	bl	12128 <iswcntrl@plt>
   2bd9c:	rsbs	r0, r0, #1
   2bda0:	movcc	r0, #0
   2bda4:	pop	{r4, pc}
   2bda8:	push	{r3, r4, r5, lr}
   2bdac:	mov	r3, r1
   2bdb0:	mov	r4, r1
   2bdb4:	ldr	r1, [r3], #16
   2bdb8:	mov	r5, r0
   2bdbc:	cmp	r1, r3
   2bdc0:	strne	r1, [r0]
   2bdc4:	beq	2bde8 <__assert_fail@plt+0x197b0>
   2bdc8:	ldrb	r3, [r4, #8]
   2bdcc:	ldr	r2, [r4, #4]
   2bdd0:	cmp	r3, #0
   2bdd4:	strb	r3, [r5, #8]
   2bdd8:	ldrne	r3, [r4, #12]
   2bddc:	str	r2, [r5, #4]
   2bde0:	strne	r3, [r5, #12]
   2bde4:	pop	{r3, r4, r5, pc}
   2bde8:	add	r3, r0, #16
   2bdec:	ldr	r2, [r4, #4]
   2bdf0:	mov	r0, r3
   2bdf4:	bl	1205c <memcpy@plt>
   2bdf8:	str	r0, [r5]
   2bdfc:	b	2bdc8 <__assert_fail@plt+0x19790>
   2be00:	lsr	r2, r0, #5
   2be04:	movw	r3, #13748	; 0x35b4
   2be08:	movt	r3, #3
   2be0c:	and	r0, r0, #31
   2be10:	ldr	r3, [r3, r2, lsl #2]
   2be14:	lsr	r0, r3, r0
   2be18:	and	r0, r0, #1
   2be1c:	bx	lr
   2be20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2be24:	movw	r9, #21904	; 0x5590
   2be28:	movt	r9, #4
   2be2c:	sub	sp, sp, #64	; 0x40
   2be30:	mov	sl, r0
   2be34:	ldr	r3, [r9]
   2be38:	str	r3, [sp, #60]	; 0x3c
   2be3c:	bl	121dc <__ctype_get_mb_cur_max@plt>
   2be40:	cmp	r0, #1
   2be44:	bls	2bfd4 <__assert_fail@plt+0x1999c>
   2be48:	mov	r3, #0
   2be4c:	movw	r8, #13748	; 0x35b4
   2be50:	movt	r8, #3
   2be54:	mov	r5, r3
   2be58:	mov	r4, sl
   2be5c:	mov	r7, r3
   2be60:	mov	r6, #1
   2be64:	str	sl, [sp, #20]
   2be68:	strb	r3, [sp, #4]
   2be6c:	str	r3, [sp, #8]
   2be70:	strb	r3, [sp, #16]
   2be74:	str	r3, [sp, #12]
   2be78:	ldrb	r3, [sp, #4]
   2be7c:	cmp	r3, #0
   2be80:	bne	2beec <__assert_fail@plt+0x198b4>
   2be84:	ldrb	r3, [r4]
   2be88:	and	r2, r3, #31
   2be8c:	lsr	r3, r3, #5
   2be90:	ldr	r3, [r8, r3, lsl #2]
   2be94:	lsr	r3, r3, r2
   2be98:	tst	r3, #1
   2be9c:	beq	2bed8 <__assert_fail@plt+0x198a0>
   2bea0:	str	r6, [sp, #24]
   2bea4:	ldrb	r4, [r4]
   2bea8:	strb	r6, [sp, #28]
   2beac:	cmp	r4, #0
   2beb0:	strb	r6, [sp, #16]
   2beb4:	str	r4, [sp, #32]
   2beb8:	bne	2bf50 <__assert_fail@plt+0x19918>
   2bebc:	mov	r0, r5
   2bec0:	ldr	r2, [sp, #60]	; 0x3c
   2bec4:	ldr	r3, [r9]
   2bec8:	cmp	r2, r3
   2becc:	bne	2c000 <__assert_fail@plt+0x199c8>
   2bed0:	add	sp, sp, #64	; 0x40
   2bed4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bed8:	add	r0, sp, #8
   2bedc:	bl	12080 <mbsinit@plt>
   2bee0:	cmp	r0, #0
   2bee4:	beq	2bfe0 <__assert_fail@plt+0x199a8>
   2bee8:	strb	r6, [sp, #4]
   2beec:	bl	121dc <__ctype_get_mb_cur_max@plt>
   2bef0:	mov	r1, r0
   2bef4:	mov	r0, r4
   2bef8:	bl	29080 <__assert_fail@plt+0x16a48>
   2befc:	mov	r1, r4
   2bf00:	add	r3, sp, #8
   2bf04:	mov	r2, r0
   2bf08:	add	r0, sp, #32
   2bf0c:	bl	12218 <mbrtowc@plt>
   2bf10:	cmn	r0, #1
   2bf14:	str	r0, [sp, #24]
   2bf18:	beq	2bf6c <__assert_fail@plt+0x19934>
   2bf1c:	cmn	r0, #2
   2bf20:	beq	2bfbc <__assert_fail@plt+0x19984>
   2bf24:	cmp	r0, #0
   2bf28:	beq	2bf7c <__assert_fail@plt+0x19944>
   2bf2c:	ldr	r4, [sp, #32]
   2bf30:	add	r0, sp, #8
   2bf34:	strb	r6, [sp, #28]
   2bf38:	bl	12080 <mbsinit@plt>
   2bf3c:	strb	r6, [sp, #16]
   2bf40:	cmp	r0, #0
   2bf44:	strbne	r7, [sp, #4]
   2bf48:	cmp	r4, #0
   2bf4c:	beq	2bebc <__assert_fail@plt+0x19884>
   2bf50:	ldr	r4, [sp, #20]
   2bf54:	ldr	r3, [sp, #24]
   2bf58:	add	r5, r5, #1
   2bf5c:	strb	r7, [sp, #16]
   2bf60:	add	r4, r4, r3
   2bf64:	str	r4, [sp, #20]
   2bf68:	b	2be78 <__assert_fail@plt+0x19840>
   2bf6c:	str	r6, [sp, #24]
   2bf70:	strb	r7, [sp, #28]
   2bf74:	ldr	r4, [sp, #20]
   2bf78:	b	2bf54 <__assert_fail@plt+0x1991c>
   2bf7c:	ldr	r4, [sp, #20]
   2bf80:	str	r6, [sp, #24]
   2bf84:	ldrb	r3, [r4]
   2bf88:	cmp	r3, #0
   2bf8c:	bne	2c004 <__assert_fail@plt+0x199cc>
   2bf90:	ldr	r4, [sp, #32]
   2bf94:	cmp	r4, #0
   2bf98:	beq	2bf30 <__assert_fail@plt+0x198f8>
   2bf9c:	movw	r0, #8624	; 0x21b0
   2bfa0:	movw	r1, #8588	; 0x218c
   2bfa4:	movw	r3, #13780	; 0x35d4
   2bfa8:	movt	r0, #3
   2bfac:	movt	r1, #3
   2bfb0:	mov	r2, #176	; 0xb0
   2bfb4:	movt	r3, #3
   2bfb8:	bl	12638 <__assert_fail@plt>
   2bfbc:	ldr	r4, [sp, #20]
   2bfc0:	mov	r0, r4
   2bfc4:	bl	1232c <strlen@plt>
   2bfc8:	strb	r7, [sp, #28]
   2bfcc:	str	r0, [sp, #24]
   2bfd0:	b	2bf54 <__assert_fail@plt+0x1991c>
   2bfd4:	mov	r0, sl
   2bfd8:	bl	1232c <strlen@plt>
   2bfdc:	b	2bec0 <__assert_fail@plt+0x19888>
   2bfe0:	movw	r0, #8564	; 0x2174
   2bfe4:	movw	r1, #8588	; 0x218c
   2bfe8:	movw	r3, #13780	; 0x35d4
   2bfec:	movt	r0, #3
   2bff0:	movt	r1, #3
   2bff4:	mov	r2, #147	; 0x93
   2bff8:	movt	r3, #3
   2bffc:	bl	12638 <__assert_fail@plt>
   2c000:	bl	120e0 <__stack_chk_fail@plt>
   2c004:	movw	r0, #8600	; 0x2198
   2c008:	movw	r1, #8588	; 0x218c
   2c00c:	movw	r3, #13780	; 0x35d4
   2c010:	movt	r0, #3
   2c014:	movt	r1, #3
   2c018:	mov	r2, #175	; 0xaf
   2c01c:	movt	r3, #3
   2c020:	bl	12638 <__assert_fail@plt>
   2c024:	push	{r3, r4, r5, lr}
   2c028:	mov	r5, r1
   2c02c:	bl	12314 <getfilecon@plt>
   2c030:	subs	r4, r0, #0
   2c034:	beq	2c080 <__assert_fail@plt+0x19a48>
   2c038:	cmp	r4, #10
   2c03c:	beq	2c048 <__assert_fail@plt+0x19a10>
   2c040:	mov	r0, r4
   2c044:	pop	{r3, r4, r5, pc}
   2c048:	ldr	r5, [r5]
   2c04c:	movw	r1, #13800	; 0x35e8
   2c050:	movt	r1, #3
   2c054:	mov	r0, r5
   2c058:	bl	11fb4 <strcmp@plt>
   2c05c:	cmp	r0, #0
   2c060:	bne	2c040 <__assert_fail@plt+0x19a08>
   2c064:	mov	r0, r5
   2c068:	mvn	r4, #0
   2c06c:	bl	12548 <freecon@plt>
   2c070:	bl	1238c <__errno_location@plt>
   2c074:	mov	r3, #61	; 0x3d
   2c078:	str	r3, [r0]
   2c07c:	b	2c040 <__assert_fail@plt+0x19a08>
   2c080:	bl	1238c <__errno_location@plt>
   2c084:	mvn	r4, #0
   2c088:	mov	r3, #95	; 0x5f
   2c08c:	str	r3, [r0]
   2c090:	b	2c040 <__assert_fail@plt+0x19a08>
   2c094:	push	{r3, r4, r5, lr}
   2c098:	mov	r5, r1
   2c09c:	bl	1226c <lgetfilecon@plt>
   2c0a0:	subs	r4, r0, #0
   2c0a4:	beq	2c0f0 <__assert_fail@plt+0x19ab8>
   2c0a8:	cmp	r4, #10
   2c0ac:	beq	2c0b8 <__assert_fail@plt+0x19a80>
   2c0b0:	mov	r0, r4
   2c0b4:	pop	{r3, r4, r5, pc}
   2c0b8:	ldr	r5, [r5]
   2c0bc:	movw	r1, #13800	; 0x35e8
   2c0c0:	movt	r1, #3
   2c0c4:	mov	r0, r5
   2c0c8:	bl	11fb4 <strcmp@plt>
   2c0cc:	cmp	r0, #0
   2c0d0:	bne	2c0b0 <__assert_fail@plt+0x19a78>
   2c0d4:	mov	r0, r5
   2c0d8:	mvn	r4, #0
   2c0dc:	bl	12548 <freecon@plt>
   2c0e0:	bl	1238c <__errno_location@plt>
   2c0e4:	mov	r3, #61	; 0x3d
   2c0e8:	str	r3, [r0]
   2c0ec:	b	2c0b0 <__assert_fail@plt+0x19a78>
   2c0f0:	bl	1238c <__errno_location@plt>
   2c0f4:	mvn	r4, #0
   2c0f8:	mov	r3, #95	; 0x5f
   2c0fc:	str	r3, [r0]
   2c100:	b	2c0b0 <__assert_fail@plt+0x19a78>
   2c104:	push	{r3, r4, r5, lr}
   2c108:	mov	r5, r1
   2c10c:	bl	12110 <fgetfilecon@plt>
   2c110:	subs	r4, r0, #0
   2c114:	beq	2c160 <__assert_fail@plt+0x19b28>
   2c118:	cmp	r4, #10
   2c11c:	beq	2c128 <__assert_fail@plt+0x19af0>
   2c120:	mov	r0, r4
   2c124:	pop	{r3, r4, r5, pc}
   2c128:	ldr	r5, [r5]
   2c12c:	movw	r1, #13800	; 0x35e8
   2c130:	movt	r1, #3
   2c134:	mov	r0, r5
   2c138:	bl	11fb4 <strcmp@plt>
   2c13c:	cmp	r0, #0
   2c140:	bne	2c120 <__assert_fail@plt+0x19ae8>
   2c144:	mov	r0, r5
   2c148:	mvn	r4, #0
   2c14c:	bl	12548 <freecon@plt>
   2c150:	bl	1238c <__errno_location@plt>
   2c154:	mov	r3, #61	; 0x3d
   2c158:	str	r3, [r0]
   2c15c:	b	2c120 <__assert_fail@plt+0x19ae8>
   2c160:	bl	1238c <__errno_location@plt>
   2c164:	mvn	r4, #0
   2c168:	mov	r3, #95	; 0x5f
   2c16c:	str	r3, [r0]
   2c170:	b	2c120 <__assert_fail@plt+0x19ae8>
   2c174:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c178:	movw	r4, #21904	; 0x5590
   2c17c:	movt	r4, #4
   2c180:	ldrb	r3, [r2]
   2c184:	mov	r6, r2
   2c188:	sub	sp, sp, #48	; 0x30
   2c18c:	ldr	r2, [r4]
   2c190:	cmp	r3, #0
   2c194:	mov	r5, r0
   2c198:	strbeq	r3, [r0]
   2c19c:	mov	r9, r1
   2c1a0:	moveq	r0, r0
   2c1a4:	str	r2, [sp, #44]	; 0x2c
   2c1a8:	beq	2c200 <__assert_fail@plt+0x19bc8>
   2c1ac:	movw	r7, #25336	; 0x62f8
   2c1b0:	movt	r7, #4
   2c1b4:	ldr	r8, [r7]
   2c1b8:	cmp	r8, #0
   2c1bc:	beq	2c22c <__assert_fail@plt+0x19bf4>
   2c1c0:	cmp	r8, #0
   2c1c4:	blt	2c224 <__assert_fail@plt+0x19bec>
   2c1c8:	mov	r0, r6
   2c1cc:	bl	1232c <strlen@plt>
   2c1d0:	add	r0, r0, #27
   2c1d4:	cmp	r0, #4032	; 0xfc0
   2c1d8:	bhi	2c218 <__assert_fail@plt+0x19be0>
   2c1dc:	str	r9, [sp]
   2c1e0:	movw	r3, #13812	; 0x35f4
   2c1e4:	str	r6, [sp, #4]
   2c1e8:	movt	r3, #3
   2c1ec:	mov	r0, r5
   2c1f0:	mov	r1, #1
   2c1f4:	mvn	r2, #0
   2c1f8:	bl	12398 <__sprintf_chk@plt>
   2c1fc:	mov	r0, r5
   2c200:	ldr	r2, [sp, #44]	; 0x2c
   2c204:	ldr	r3, [r4]
   2c208:	cmp	r2, r3
   2c20c:	bne	2c2a8 <__assert_fail@plt+0x19c70>
   2c210:	add	sp, sp, #48	; 0x30
   2c214:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c218:	bl	12284 <malloc@plt>
   2c21c:	subs	r5, r0, #0
   2c220:	bne	2c1dc <__assert_fail@plt+0x19ba4>
   2c224:	mov	r0, #0
   2c228:	b	2c200 <__assert_fail@plt+0x19bc8>
   2c22c:	movw	r0, #8020	; 0x1f54
   2c230:	mov	r1, #18688	; 0x4900
   2c234:	movt	r0, #3
   2c238:	bl	12254 <open64@plt>
   2c23c:	subs	sl, r0, #0
   2c240:	blt	2c298 <__assert_fail@plt+0x19c60>
   2c244:	mov	r1, #1
   2c248:	str	sl, [sp]
   2c24c:	movw	r2, #13832	; 0x3608
   2c250:	movw	r3, #13812	; 0x35f4
   2c254:	movt	r2, #3
   2c258:	movt	r3, #3
   2c25c:	str	r2, [sp, #4]
   2c260:	add	r0, sp, #12
   2c264:	mov	r2, #32
   2c268:	bl	12398 <__sprintf_chk@plt>
   2c26c:	mov	r1, r8
   2c270:	add	r0, sp, #12
   2c274:	bl	1244c <access@plt>
   2c278:	cmp	r0, #0
   2c27c:	mov	r0, sl
   2c280:	moveq	r3, #1
   2c284:	mvnne	r3, #0
   2c288:	str	r3, [r7]
   2c28c:	bl	125d8 <close@plt>
   2c290:	ldr	r8, [r7]
   2c294:	b	2c1c0 <__assert_fail@plt+0x19b88>
   2c298:	mvn	r3, #0
   2c29c:	mov	r0, r8
   2c2a0:	str	r3, [r7]
   2c2a4:	b	2c200 <__assert_fail@plt+0x19bc8>
   2c2a8:	bl	120e0 <__stack_chk_fail@plt>
   2c2ac:	subs	r2, r1, #1
   2c2b0:	bxeq	lr
   2c2b4:	bcc	2c48c <__assert_fail@plt+0x19e54>
   2c2b8:	cmp	r0, r1
   2c2bc:	bls	2c470 <__assert_fail@plt+0x19e38>
   2c2c0:	tst	r1, r2
   2c2c4:	beq	2c47c <__assert_fail@plt+0x19e44>
   2c2c8:	clz	r3, r0
   2c2cc:	clz	r2, r1
   2c2d0:	sub	r3, r2, r3
   2c2d4:	rsbs	r3, r3, #31
   2c2d8:	addne	r3, r3, r3, lsl #1
   2c2dc:	mov	r2, #0
   2c2e0:	addne	pc, pc, r3, lsl #2
   2c2e4:	nop	{0}
   2c2e8:	cmp	r0, r1, lsl #31
   2c2ec:	adc	r2, r2, r2
   2c2f0:	subcs	r0, r0, r1, lsl #31
   2c2f4:	cmp	r0, r1, lsl #30
   2c2f8:	adc	r2, r2, r2
   2c2fc:	subcs	r0, r0, r1, lsl #30
   2c300:	cmp	r0, r1, lsl #29
   2c304:	adc	r2, r2, r2
   2c308:	subcs	r0, r0, r1, lsl #29
   2c30c:	cmp	r0, r1, lsl #28
   2c310:	adc	r2, r2, r2
   2c314:	subcs	r0, r0, r1, lsl #28
   2c318:	cmp	r0, r1, lsl #27
   2c31c:	adc	r2, r2, r2
   2c320:	subcs	r0, r0, r1, lsl #27
   2c324:	cmp	r0, r1, lsl #26
   2c328:	adc	r2, r2, r2
   2c32c:	subcs	r0, r0, r1, lsl #26
   2c330:	cmp	r0, r1, lsl #25
   2c334:	adc	r2, r2, r2
   2c338:	subcs	r0, r0, r1, lsl #25
   2c33c:	cmp	r0, r1, lsl #24
   2c340:	adc	r2, r2, r2
   2c344:	subcs	r0, r0, r1, lsl #24
   2c348:	cmp	r0, r1, lsl #23
   2c34c:	adc	r2, r2, r2
   2c350:	subcs	r0, r0, r1, lsl #23
   2c354:	cmp	r0, r1, lsl #22
   2c358:	adc	r2, r2, r2
   2c35c:	subcs	r0, r0, r1, lsl #22
   2c360:	cmp	r0, r1, lsl #21
   2c364:	adc	r2, r2, r2
   2c368:	subcs	r0, r0, r1, lsl #21
   2c36c:	cmp	r0, r1, lsl #20
   2c370:	adc	r2, r2, r2
   2c374:	subcs	r0, r0, r1, lsl #20
   2c378:	cmp	r0, r1, lsl #19
   2c37c:	adc	r2, r2, r2
   2c380:	subcs	r0, r0, r1, lsl #19
   2c384:	cmp	r0, r1, lsl #18
   2c388:	adc	r2, r2, r2
   2c38c:	subcs	r0, r0, r1, lsl #18
   2c390:	cmp	r0, r1, lsl #17
   2c394:	adc	r2, r2, r2
   2c398:	subcs	r0, r0, r1, lsl #17
   2c39c:	cmp	r0, r1, lsl #16
   2c3a0:	adc	r2, r2, r2
   2c3a4:	subcs	r0, r0, r1, lsl #16
   2c3a8:	cmp	r0, r1, lsl #15
   2c3ac:	adc	r2, r2, r2
   2c3b0:	subcs	r0, r0, r1, lsl #15
   2c3b4:	cmp	r0, r1, lsl #14
   2c3b8:	adc	r2, r2, r2
   2c3bc:	subcs	r0, r0, r1, lsl #14
   2c3c0:	cmp	r0, r1, lsl #13
   2c3c4:	adc	r2, r2, r2
   2c3c8:	subcs	r0, r0, r1, lsl #13
   2c3cc:	cmp	r0, r1, lsl #12
   2c3d0:	adc	r2, r2, r2
   2c3d4:	subcs	r0, r0, r1, lsl #12
   2c3d8:	cmp	r0, r1, lsl #11
   2c3dc:	adc	r2, r2, r2
   2c3e0:	subcs	r0, r0, r1, lsl #11
   2c3e4:	cmp	r0, r1, lsl #10
   2c3e8:	adc	r2, r2, r2
   2c3ec:	subcs	r0, r0, r1, lsl #10
   2c3f0:	cmp	r0, r1, lsl #9
   2c3f4:	adc	r2, r2, r2
   2c3f8:	subcs	r0, r0, r1, lsl #9
   2c3fc:	cmp	r0, r1, lsl #8
   2c400:	adc	r2, r2, r2
   2c404:	subcs	r0, r0, r1, lsl #8
   2c408:	cmp	r0, r1, lsl #7
   2c40c:	adc	r2, r2, r2
   2c410:	subcs	r0, r0, r1, lsl #7
   2c414:	cmp	r0, r1, lsl #6
   2c418:	adc	r2, r2, r2
   2c41c:	subcs	r0, r0, r1, lsl #6
   2c420:	cmp	r0, r1, lsl #5
   2c424:	adc	r2, r2, r2
   2c428:	subcs	r0, r0, r1, lsl #5
   2c42c:	cmp	r0, r1, lsl #4
   2c430:	adc	r2, r2, r2
   2c434:	subcs	r0, r0, r1, lsl #4
   2c438:	cmp	r0, r1, lsl #3
   2c43c:	adc	r2, r2, r2
   2c440:	subcs	r0, r0, r1, lsl #3
   2c444:	cmp	r0, r1, lsl #2
   2c448:	adc	r2, r2, r2
   2c44c:	subcs	r0, r0, r1, lsl #2
   2c450:	cmp	r0, r1, lsl #1
   2c454:	adc	r2, r2, r2
   2c458:	subcs	r0, r0, r1, lsl #1
   2c45c:	cmp	r0, r1
   2c460:	adc	r2, r2, r2
   2c464:	subcs	r0, r0, r1
   2c468:	mov	r0, r2
   2c46c:	bx	lr
   2c470:	moveq	r0, #1
   2c474:	movne	r0, #0
   2c478:	bx	lr
   2c47c:	clz	r2, r1
   2c480:	rsb	r2, r2, #31
   2c484:	lsr	r0, r0, r2
   2c488:	bx	lr
   2c48c:	cmp	r0, #0
   2c490:	mvnne	r0, #0
   2c494:	b	2c8f4 <__assert_fail@plt+0x1a2bc>
   2c498:	cmp	r1, #0
   2c49c:	beq	2c48c <__assert_fail@plt+0x19e54>
   2c4a0:	push	{r0, r1, lr}
   2c4a4:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2c4a8:	pop	{r1, r2, lr}
   2c4ac:	mul	r3, r2, r0
   2c4b0:	sub	r1, r1, r3
   2c4b4:	bx	lr
   2c4b8:	eor	r1, r1, #-2147483648	; 0x80000000
   2c4bc:	b	2c4c4 <__assert_fail@plt+0x19e8c>
   2c4c0:	eor	r3, r3, #-2147483648	; 0x80000000
   2c4c4:	push	{r4, r5, lr}
   2c4c8:	lsl	r4, r1, #1
   2c4cc:	lsl	r5, r3, #1
   2c4d0:	teq	r4, r5
   2c4d4:	teqeq	r0, r2
   2c4d8:	orrsne	ip, r4, r0
   2c4dc:	orrsne	ip, r5, r2
   2c4e0:	mvnsne	ip, r4, asr #21
   2c4e4:	mvnsne	ip, r5, asr #21
   2c4e8:	beq	2c6d4 <__assert_fail@plt+0x1a09c>
   2c4ec:	lsr	r4, r4, #21
   2c4f0:	rsbs	r5, r4, r5, lsr #21
   2c4f4:	rsblt	r5, r5, #0
   2c4f8:	ble	2c518 <__assert_fail@plt+0x19ee0>
   2c4fc:	add	r4, r4, r5
   2c500:	eor	r2, r0, r2
   2c504:	eor	r3, r1, r3
   2c508:	eor	r0, r2, r0
   2c50c:	eor	r1, r3, r1
   2c510:	eor	r2, r0, r2
   2c514:	eor	r3, r1, r3
   2c518:	cmp	r5, #54	; 0x36
   2c51c:	pophi	{r4, r5, pc}
   2c520:	tst	r1, #-2147483648	; 0x80000000
   2c524:	lsl	r1, r1, #12
   2c528:	mov	ip, #1048576	; 0x100000
   2c52c:	orr	r1, ip, r1, lsr #12
   2c530:	beq	2c53c <__assert_fail@plt+0x19f04>
   2c534:	rsbs	r0, r0, #0
   2c538:	rsc	r1, r1, #0
   2c53c:	tst	r3, #-2147483648	; 0x80000000
   2c540:	lsl	r3, r3, #12
   2c544:	orr	r3, ip, r3, lsr #12
   2c548:	beq	2c554 <__assert_fail@plt+0x19f1c>
   2c54c:	rsbs	r2, r2, #0
   2c550:	rsc	r3, r3, #0
   2c554:	teq	r4, r5
   2c558:	beq	2c6bc <__assert_fail@plt+0x1a084>
   2c55c:	sub	r4, r4, #1
   2c560:	rsbs	lr, r5, #32
   2c564:	blt	2c580 <__assert_fail@plt+0x19f48>
   2c568:	lsl	ip, r2, lr
   2c56c:	adds	r0, r0, r2, lsr r5
   2c570:	adc	r1, r1, #0
   2c574:	adds	r0, r0, r3, lsl lr
   2c578:	adcs	r1, r1, r3, asr r5
   2c57c:	b	2c59c <__assert_fail@plt+0x19f64>
   2c580:	sub	r5, r5, #32
   2c584:	add	lr, lr, #32
   2c588:	cmp	r2, #1
   2c58c:	lsl	ip, r3, lr
   2c590:	orrcs	ip, ip, #2
   2c594:	adds	r0, r0, r3, asr r5
   2c598:	adcs	r1, r1, r3, asr #31
   2c59c:	and	r5, r1, #-2147483648	; 0x80000000
   2c5a0:	bpl	2c5b0 <__assert_fail@plt+0x19f78>
   2c5a4:	rsbs	ip, ip, #0
   2c5a8:	rscs	r0, r0, #0
   2c5ac:	rsc	r1, r1, #0
   2c5b0:	cmp	r1, #1048576	; 0x100000
   2c5b4:	bcc	2c5f4 <__assert_fail@plt+0x19fbc>
   2c5b8:	cmp	r1, #2097152	; 0x200000
   2c5bc:	bcc	2c5dc <__assert_fail@plt+0x19fa4>
   2c5c0:	lsrs	r1, r1, #1
   2c5c4:	rrxs	r0, r0
   2c5c8:	rrx	ip, ip
   2c5cc:	add	r4, r4, #1
   2c5d0:	lsl	r2, r4, #21
   2c5d4:	cmn	r2, #4194304	; 0x400000
   2c5d8:	bcs	2c734 <__assert_fail@plt+0x1a0fc>
   2c5dc:	cmp	ip, #-2147483648	; 0x80000000
   2c5e0:	lsrseq	ip, r0, #1
   2c5e4:	adcs	r0, r0, #0
   2c5e8:	adc	r1, r1, r4, lsl #20
   2c5ec:	orr	r1, r1, r5
   2c5f0:	pop	{r4, r5, pc}
   2c5f4:	lsls	ip, ip, #1
   2c5f8:	adcs	r0, r0, r0
   2c5fc:	adc	r1, r1, r1
   2c600:	tst	r1, #1048576	; 0x100000
   2c604:	sub	r4, r4, #1
   2c608:	bne	2c5dc <__assert_fail@plt+0x19fa4>
   2c60c:	teq	r1, #0
   2c610:	moveq	r1, r0
   2c614:	moveq	r0, #0
   2c618:	clz	r3, r1
   2c61c:	addeq	r3, r3, #32
   2c620:	sub	r3, r3, #11
   2c624:	subs	r2, r3, #32
   2c628:	bge	2c64c <__assert_fail@plt+0x1a014>
   2c62c:	adds	r2, r2, #12
   2c630:	ble	2c648 <__assert_fail@plt+0x1a010>
   2c634:	add	ip, r2, #20
   2c638:	rsb	r2, r2, #12
   2c63c:	lsl	r0, r1, ip
   2c640:	lsr	r1, r1, r2
   2c644:	b	2c65c <__assert_fail@plt+0x1a024>
   2c648:	add	r2, r2, #20
   2c64c:	rsble	ip, r2, #32
   2c650:	lsl	r1, r1, r2
   2c654:	orrle	r1, r1, r0, lsr ip
   2c658:	lslle	r0, r0, r2
   2c65c:	subs	r4, r4, r3
   2c660:	addge	r1, r1, r4, lsl #20
   2c664:	orrge	r1, r1, r5
   2c668:	popge	{r4, r5, pc}
   2c66c:	mvn	r4, r4
   2c670:	subs	r4, r4, #31
   2c674:	bge	2c6b0 <__assert_fail@plt+0x1a078>
   2c678:	adds	r4, r4, #12
   2c67c:	bgt	2c698 <__assert_fail@plt+0x1a060>
   2c680:	add	r4, r4, #20
   2c684:	rsb	r2, r4, #32
   2c688:	lsr	r0, r0, r4
   2c68c:	orr	r0, r0, r1, lsl r2
   2c690:	orr	r1, r5, r1, lsr r4
   2c694:	pop	{r4, r5, pc}
   2c698:	rsb	r4, r4, #12
   2c69c:	rsb	r2, r4, #32
   2c6a0:	lsr	r0, r0, r2
   2c6a4:	orr	r0, r0, r1, lsl r4
   2c6a8:	mov	r1, r5
   2c6ac:	pop	{r4, r5, pc}
   2c6b0:	lsr	r0, r1, r4
   2c6b4:	mov	r1, r5
   2c6b8:	pop	{r4, r5, pc}
   2c6bc:	teq	r4, #0
   2c6c0:	eor	r3, r3, #1048576	; 0x100000
   2c6c4:	eoreq	r1, r1, #1048576	; 0x100000
   2c6c8:	addeq	r4, r4, #1
   2c6cc:	subne	r5, r5, #1
   2c6d0:	b	2c55c <__assert_fail@plt+0x19f24>
   2c6d4:	mvns	ip, r4, asr #21
   2c6d8:	mvnsne	ip, r5, asr #21
   2c6dc:	beq	2c744 <__assert_fail@plt+0x1a10c>
   2c6e0:	teq	r4, r5
   2c6e4:	teqeq	r0, r2
   2c6e8:	beq	2c6fc <__assert_fail@plt+0x1a0c4>
   2c6ec:	orrs	ip, r4, r0
   2c6f0:	moveq	r1, r3
   2c6f4:	moveq	r0, r2
   2c6f8:	pop	{r4, r5, pc}
   2c6fc:	teq	r1, r3
   2c700:	movne	r1, #0
   2c704:	movne	r0, #0
   2c708:	popne	{r4, r5, pc}
   2c70c:	lsrs	ip, r4, #21
   2c710:	bne	2c724 <__assert_fail@plt+0x1a0ec>
   2c714:	lsls	r0, r0, #1
   2c718:	adcs	r1, r1, r1
   2c71c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2c720:	pop	{r4, r5, pc}
   2c724:	adds	r4, r4, #4194304	; 0x400000
   2c728:	addcc	r1, r1, #1048576	; 0x100000
   2c72c:	popcc	{r4, r5, pc}
   2c730:	and	r5, r1, #-2147483648	; 0x80000000
   2c734:	orr	r1, r5, #2130706432	; 0x7f000000
   2c738:	orr	r1, r1, #15728640	; 0xf00000
   2c73c:	mov	r0, #0
   2c740:	pop	{r4, r5, pc}
   2c744:	mvns	ip, r4, asr #21
   2c748:	movne	r1, r3
   2c74c:	movne	r0, r2
   2c750:	mvnseq	ip, r5, asr #21
   2c754:	movne	r3, r1
   2c758:	movne	r2, r0
   2c75c:	orrs	r4, r0, r1, lsl #12
   2c760:	orrseq	r5, r2, r3, lsl #12
   2c764:	teqeq	r1, r3
   2c768:	orrne	r1, r1, #524288	; 0x80000
   2c76c:	pop	{r4, r5, pc}
   2c770:	teq	r0, #0
   2c774:	moveq	r1, #0
   2c778:	bxeq	lr
   2c77c:	push	{r4, r5, lr}
   2c780:	mov	r4, #1024	; 0x400
   2c784:	add	r4, r4, #50	; 0x32
   2c788:	mov	r5, #0
   2c78c:	mov	r1, #0
   2c790:	b	2c60c <__assert_fail@plt+0x19fd4>
   2c794:	teq	r0, #0
   2c798:	moveq	r1, #0
   2c79c:	bxeq	lr
   2c7a0:	push	{r4, r5, lr}
   2c7a4:	mov	r4, #1024	; 0x400
   2c7a8:	add	r4, r4, #50	; 0x32
   2c7ac:	ands	r5, r0, #-2147483648	; 0x80000000
   2c7b0:	rsbmi	r0, r0, #0
   2c7b4:	mov	r1, #0
   2c7b8:	b	2c60c <__assert_fail@plt+0x19fd4>
   2c7bc:	lsls	r2, r0, #1
   2c7c0:	asr	r1, r2, #3
   2c7c4:	rrx	r1, r1
   2c7c8:	lsl	r0, r2, #28
   2c7cc:	andsne	r3, r2, #-16777216	; 0xff000000
   2c7d0:	teqne	r3, #-16777216	; 0xff000000
   2c7d4:	eorne	r1, r1, #939524096	; 0x38000000
   2c7d8:	bxne	lr
   2c7dc:	teq	r2, #0
   2c7e0:	teqne	r3, #-16777216	; 0xff000000
   2c7e4:	bxeq	lr
   2c7e8:	push	{r4, r5, lr}
   2c7ec:	mov	r4, #896	; 0x380
   2c7f0:	and	r5, r1, #-2147483648	; 0x80000000
   2c7f4:	bic	r1, r1, #-2147483648	; 0x80000000
   2c7f8:	b	2c60c <__assert_fail@plt+0x19fd4>
   2c7fc:	orrs	r2, r0, r1
   2c800:	bxeq	lr
   2c804:	push	{r4, r5, lr}
   2c808:	mov	r5, #0
   2c80c:	b	2c82c <__assert_fail@plt+0x1a1f4>
   2c810:	orrs	r2, r0, r1
   2c814:	bxeq	lr
   2c818:	push	{r4, r5, lr}
   2c81c:	ands	r5, r1, #-2147483648	; 0x80000000
   2c820:	bpl	2c82c <__assert_fail@plt+0x1a1f4>
   2c824:	rsbs	r0, r0, #0
   2c828:	rsc	r1, r1, #0
   2c82c:	mov	r4, #1024	; 0x400
   2c830:	add	r4, r4, #50	; 0x32
   2c834:	lsrs	ip, r1, #22
   2c838:	beq	2c5b0 <__assert_fail@plt+0x19f78>
   2c83c:	mov	r2, #3
   2c840:	lsrs	ip, ip, #3
   2c844:	addne	r2, r2, #3
   2c848:	lsrs	ip, ip, #3
   2c84c:	addne	r2, r2, #3
   2c850:	add	r2, r2, ip, lsr #3
   2c854:	rsb	r3, r2, #32
   2c858:	lsl	ip, r0, r3
   2c85c:	lsr	r0, r0, r2
   2c860:	orr	r0, r0, r1, lsl r3
   2c864:	lsr	r1, r1, r2
   2c868:	add	r4, r4, r2
   2c86c:	b	2c5b0 <__assert_fail@plt+0x19f78>
   2c870:	cmp	r3, #0
   2c874:	cmpeq	r2, #0
   2c878:	bne	2c89c <__assert_fail@plt+0x1a264>
   2c87c:	cmp	r1, #0
   2c880:	movlt	r1, #-2147483648	; 0x80000000
   2c884:	movlt	r0, #0
   2c888:	blt	2c898 <__assert_fail@plt+0x1a260>
   2c88c:	cmpeq	r0, #0
   2c890:	mvnne	r1, #-2147483648	; 0x80000000
   2c894:	mvnne	r0, #0
   2c898:	b	2c8f4 <__assert_fail@plt+0x1a2bc>
   2c89c:	sub	sp, sp, #8
   2c8a0:	push	{sp, lr}
   2c8a4:	bl	2c950 <__assert_fail@plt+0x1a318>
   2c8a8:	ldr	lr, [sp, #4]
   2c8ac:	add	sp, sp, #8
   2c8b0:	pop	{r2, r3}
   2c8b4:	bx	lr
   2c8b8:	cmp	r3, #0
   2c8bc:	cmpeq	r2, #0
   2c8c0:	bne	2c8d8 <__assert_fail@plt+0x1a2a0>
   2c8c4:	cmp	r1, #0
   2c8c8:	cmpeq	r0, #0
   2c8cc:	mvnne	r1, #0
   2c8d0:	mvnne	r0, #0
   2c8d4:	b	2c8f4 <__assert_fail@plt+0x1a2bc>
   2c8d8:	sub	sp, sp, #8
   2c8dc:	push	{sp, lr}
   2c8e0:	bl	2c98c <__assert_fail@plt+0x1a354>
   2c8e4:	ldr	lr, [sp, #4]
   2c8e8:	add	sp, sp, #8
   2c8ec:	pop	{r2, r3}
   2c8f0:	bx	lr
   2c8f4:	push	{r1, lr}
   2c8f8:	mov	r0, #8
   2c8fc:	bl	11f84 <raise@plt>
   2c900:	pop	{r1, pc}
   2c904:	andeq	r0, r0, r0
   2c908:	vmov	d7, r0, r1
   2c90c:	vldr	d5, [pc, #44]	; 2c940 <__assert_fail@plt+0x1a308>
   2c910:	vldr	d6, [pc, #48]	; 2c948 <__assert_fail@plt+0x1a310>
   2c914:	mov	r0, #0
   2c918:	vmul.f64	d5, d7, d5
   2c91c:	vcvt.u32.f64	s9, d5
   2c920:	vcvt.f64.u32	d5, s9
   2c924:	vmov	r1, s9
   2c928:	vmls.f64	d7, d5, d6
   2c92c:	vcvt.u32.f64	s14, d7
   2c930:	vmov	r3, s14
   2c934:	orr	r0, r0, r3
   2c938:	bx	lr
   2c93c:	nop	{0}
   2c940:	andeq	r0, r0, r0
   2c944:	ldclcc	0, cr0, [r0]
   2c948:	andeq	r0, r0, r0
   2c94c:	mvnsmi	r0, r0
   2c950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c954:	mov	r8, r2
   2c958:	mov	r6, r0
   2c95c:	mov	r7, r1
   2c960:	mov	sl, r3
   2c964:	ldr	r9, [sp, #32]
   2c968:	bl	2c9c8 <__assert_fail@plt+0x1a390>
   2c96c:	umull	r4, r5, r8, r0
   2c970:	mul	r8, r8, r1
   2c974:	mla	r2, r0, sl, r8
   2c978:	add	r5, r2, r5
   2c97c:	subs	r4, r6, r4
   2c980:	sbc	r5, r7, r5
   2c984:	strd	r4, [r9]
   2c988:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c98c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2c990:	mov	r8, r2
   2c994:	mov	r6, r0
   2c998:	mov	r7, r1
   2c99c:	mov	r5, r3
   2c9a0:	ldr	r9, [sp, #32]
   2c9a4:	bl	2ce54 <__assert_fail@plt+0x1a81c>
   2c9a8:	mul	r3, r0, r5
   2c9ac:	umull	r4, r5, r0, r8
   2c9b0:	mla	r8, r8, r1, r3
   2c9b4:	add	r5, r8, r5
   2c9b8:	subs	r4, r6, r4
   2c9bc:	sbc	r5, r7, r5
   2c9c0:	strd	r4, [r9]
   2c9c4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2c9c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c9cc:	rsbs	r4, r0, #0
   2c9d0:	rsc	r5, r1, #0
   2c9d4:	cmp	r1, #0
   2c9d8:	mvn	r6, #0
   2c9dc:	sub	sp, sp, #12
   2c9e0:	movge	r4, r0
   2c9e4:	movge	r5, r1
   2c9e8:	movge	r6, #0
   2c9ec:	cmp	r3, #0
   2c9f0:	blt	2cc28 <__assert_fail@plt+0x1a5f0>
   2c9f4:	cmp	r3, #0
   2c9f8:	mov	sl, r4
   2c9fc:	mov	ip, r5
   2ca00:	mov	r0, r2
   2ca04:	mov	r1, r3
   2ca08:	mov	r8, r2
   2ca0c:	mov	r7, r4
   2ca10:	mov	r9, r5
   2ca14:	bne	2cb0c <__assert_fail@plt+0x1a4d4>
   2ca18:	cmp	r2, r5
   2ca1c:	bls	2cb48 <__assert_fail@plt+0x1a510>
   2ca20:	clz	r3, r2
   2ca24:	cmp	r3, #0
   2ca28:	rsbne	r2, r3, #32
   2ca2c:	lslne	r8, r0, r3
   2ca30:	lsrne	r2, r4, r2
   2ca34:	lslne	r7, r4, r3
   2ca38:	orrne	r9, r2, r5, lsl r3
   2ca3c:	lsr	r4, r8, #16
   2ca40:	uxth	sl, r8
   2ca44:	mov	r1, r4
   2ca48:	mov	r0, r9
   2ca4c:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2ca50:	mov	r1, r4
   2ca54:	mov	fp, r0
   2ca58:	mov	r0, r9
   2ca5c:	bl	2c498 <__assert_fail@plt+0x19e60>
   2ca60:	mul	r0, sl, fp
   2ca64:	lsr	r2, r7, #16
   2ca68:	orr	r1, r2, r1, lsl #16
   2ca6c:	cmp	r0, r1
   2ca70:	bls	2ca94 <__assert_fail@plt+0x1a45c>
   2ca74:	adds	r1, r1, r8
   2ca78:	sub	r3, fp, #1
   2ca7c:	bcs	2ca90 <__assert_fail@plt+0x1a458>
   2ca80:	cmp	r0, r1
   2ca84:	subhi	fp, fp, #2
   2ca88:	addhi	r1, r1, r8
   2ca8c:	bhi	2ca94 <__assert_fail@plt+0x1a45c>
   2ca90:	mov	fp, r3
   2ca94:	rsb	r9, r0, r1
   2ca98:	mov	r1, r4
   2ca9c:	uxth	r7, r7
   2caa0:	mov	r0, r9
   2caa4:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2caa8:	mov	r1, r4
   2caac:	mov	r5, r0
   2cab0:	mov	r0, r9
   2cab4:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cab8:	mul	sl, sl, r5
   2cabc:	orr	r1, r7, r1, lsl #16
   2cac0:	cmp	sl, r1
   2cac4:	bls	2cae4 <__assert_fail@plt+0x1a4ac>
   2cac8:	adds	r8, r1, r8
   2cacc:	sub	r3, r5, #1
   2cad0:	bcs	2cae0 <__assert_fail@plt+0x1a4a8>
   2cad4:	cmp	sl, r8
   2cad8:	subhi	r5, r5, #2
   2cadc:	bhi	2cae4 <__assert_fail@plt+0x1a4ac>
   2cae0:	mov	r5, r3
   2cae4:	orr	r3, r5, fp, lsl #16
   2cae8:	mov	r4, #0
   2caec:	cmp	r6, #0
   2caf0:	mov	r0, r3
   2caf4:	mov	r1, r4
   2caf8:	beq	2cb04 <__assert_fail@plt+0x1a4cc>
   2cafc:	rsbs	r0, r0, #0
   2cb00:	rsc	r1, r1, #0
   2cb04:	add	sp, sp, #12
   2cb08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb0c:	cmp	r3, r5
   2cb10:	movhi	r4, #0
   2cb14:	movhi	r3, r4
   2cb18:	bhi	2caec <__assert_fail@plt+0x1a4b4>
   2cb1c:	clz	r5, r1
   2cb20:	cmp	r5, #0
   2cb24:	bne	2cd14 <__assert_fail@plt+0x1a6dc>
   2cb28:	cmp	r1, ip
   2cb2c:	cmpcs	r2, sl
   2cb30:	movhi	r4, #0
   2cb34:	movls	r4, #1
   2cb38:	movls	r3, #1
   2cb3c:	movls	r4, r5
   2cb40:	movhi	r3, r4
   2cb44:	b	2caec <__assert_fail@plt+0x1a4b4>
   2cb48:	cmp	r2, #0
   2cb4c:	bne	2cb60 <__assert_fail@plt+0x1a528>
   2cb50:	mov	r1, r2
   2cb54:	mov	r0, #1
   2cb58:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cb5c:	mov	r8, r0
   2cb60:	clz	r3, r8
   2cb64:	cmp	r3, #0
   2cb68:	bne	2cc38 <__assert_fail@plt+0x1a600>
   2cb6c:	rsb	r9, r8, r9
   2cb70:	lsr	r5, r8, #16
   2cb74:	uxth	sl, r8
   2cb78:	mov	r4, #1
   2cb7c:	mov	r1, r5
   2cb80:	mov	r0, r9
   2cb84:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cb88:	mov	r1, r5
   2cb8c:	mov	fp, r0
   2cb90:	mov	r0, r9
   2cb94:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cb98:	mul	r0, sl, fp
   2cb9c:	lsr	r2, r7, #16
   2cba0:	orr	r1, r2, r1, lsl #16
   2cba4:	cmp	r0, r1
   2cba8:	bls	2cbc8 <__assert_fail@plt+0x1a590>
   2cbac:	adds	r1, r1, r8
   2cbb0:	sub	r3, fp, #1
   2cbb4:	bcs	2ce34 <__assert_fail@plt+0x1a7fc>
   2cbb8:	cmp	r0, r1
   2cbbc:	subhi	fp, fp, #2
   2cbc0:	addhi	r1, r1, r8
   2cbc4:	bls	2ce34 <__assert_fail@plt+0x1a7fc>
   2cbc8:	rsb	r2, r0, r1
   2cbcc:	mov	r1, r5
   2cbd0:	str	r2, [sp]
   2cbd4:	uxth	r7, r7
   2cbd8:	mov	r0, r2
   2cbdc:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cbe0:	ldr	r2, [sp]
   2cbe4:	mov	r1, r5
   2cbe8:	mov	r9, r0
   2cbec:	mov	r0, r2
   2cbf0:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cbf4:	mul	sl, sl, r9
   2cbf8:	orr	r1, r7, r1, lsl #16
   2cbfc:	cmp	sl, r1
   2cc00:	bls	2cc20 <__assert_fail@plt+0x1a5e8>
   2cc04:	adds	r8, r1, r8
   2cc08:	sub	r3, r9, #1
   2cc0c:	bcs	2cc1c <__assert_fail@plt+0x1a5e4>
   2cc10:	cmp	sl, r8
   2cc14:	subhi	r9, r9, #2
   2cc18:	bhi	2cc20 <__assert_fail@plt+0x1a5e8>
   2cc1c:	mov	r9, r3
   2cc20:	orr	r3, r9, fp, lsl #16
   2cc24:	b	2caec <__assert_fail@plt+0x1a4b4>
   2cc28:	mvn	r6, r6
   2cc2c:	rsbs	r2, r2, #0
   2cc30:	rsc	r3, r3, #0
   2cc34:	b	2c9f4 <__assert_fail@plt+0x1a3bc>
   2cc38:	lsl	r8, r8, r3
   2cc3c:	rsb	fp, r3, #32
   2cc40:	lsr	r4, r9, fp
   2cc44:	lsr	fp, r7, fp
   2cc48:	lsr	r5, r8, #16
   2cc4c:	orr	fp, fp, r9, lsl r3
   2cc50:	mov	r0, r4
   2cc54:	lsl	r7, r7, r3
   2cc58:	mov	r1, r5
   2cc5c:	uxth	sl, r8
   2cc60:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cc64:	mov	r1, r5
   2cc68:	mov	r3, r0
   2cc6c:	mov	r0, r4
   2cc70:	str	r3, [sp]
   2cc74:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cc78:	ldr	r3, [sp]
   2cc7c:	lsr	r2, fp, #16
   2cc80:	mul	r0, sl, r3
   2cc84:	orr	r1, r2, r1, lsl #16
   2cc88:	cmp	r0, r1
   2cc8c:	bls	2ccac <__assert_fail@plt+0x1a674>
   2cc90:	adds	r1, r1, r8
   2cc94:	sub	r2, r3, #1
   2cc98:	bcs	2ce4c <__assert_fail@plt+0x1a814>
   2cc9c:	cmp	r0, r1
   2cca0:	subhi	r3, r3, #2
   2cca4:	addhi	r1, r1, r8
   2cca8:	bls	2ce4c <__assert_fail@plt+0x1a814>
   2ccac:	rsb	r9, r0, r1
   2ccb0:	mov	r1, r5
   2ccb4:	str	r3, [sp]
   2ccb8:	uxth	fp, fp
   2ccbc:	mov	r0, r9
   2ccc0:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2ccc4:	mov	r1, r5
   2ccc8:	mov	r4, r0
   2cccc:	mov	r0, r9
   2ccd0:	bl	2c498 <__assert_fail@plt+0x19e60>
   2ccd4:	mul	r9, sl, r4
   2ccd8:	ldr	r3, [sp]
   2ccdc:	orr	r1, fp, r1, lsl #16
   2cce0:	cmp	r9, r1
   2cce4:	bls	2cd08 <__assert_fail@plt+0x1a6d0>
   2cce8:	adds	r1, r1, r8
   2ccec:	sub	r2, r4, #1
   2ccf0:	bcs	2cd04 <__assert_fail@plt+0x1a6cc>
   2ccf4:	cmp	r9, r1
   2ccf8:	subhi	r4, r4, #2
   2ccfc:	addhi	r1, r1, r8
   2cd00:	bhi	2cd08 <__assert_fail@plt+0x1a6d0>
   2cd04:	mov	r4, r2
   2cd08:	rsb	r9, r9, r1
   2cd0c:	orr	r4, r4, r3, lsl #16
   2cd10:	b	2cb7c <__assert_fail@plt+0x1a544>
   2cd14:	rsb	sl, r5, #32
   2cd18:	lsl	r3, r2, r5
   2cd1c:	lsr	r0, r2, sl
   2cd20:	lsr	r2, ip, sl
   2cd24:	orr	r4, r0, r1, lsl r5
   2cd28:	lsr	sl, r7, sl
   2cd2c:	mov	r0, r2
   2cd30:	orr	sl, sl, ip, lsl r5
   2cd34:	lsr	r9, r4, #16
   2cd38:	str	r3, [sp, #4]
   2cd3c:	str	r2, [sp]
   2cd40:	uxth	fp, r4
   2cd44:	mov	r1, r9
   2cd48:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cd4c:	ldr	r2, [sp]
   2cd50:	mov	r1, r9
   2cd54:	mov	r8, r0
   2cd58:	mov	r0, r2
   2cd5c:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cd60:	mul	r0, fp, r8
   2cd64:	lsr	r2, sl, #16
   2cd68:	orr	r1, r2, r1, lsl #16
   2cd6c:	cmp	r0, r1
   2cd70:	bls	2cd90 <__assert_fail@plt+0x1a758>
   2cd74:	adds	r1, r1, r4
   2cd78:	sub	r2, r8, #1
   2cd7c:	bcs	2ce44 <__assert_fail@plt+0x1a80c>
   2cd80:	cmp	r0, r1
   2cd84:	subhi	r8, r8, #2
   2cd88:	addhi	r1, r1, r4
   2cd8c:	bls	2ce44 <__assert_fail@plt+0x1a80c>
   2cd90:	rsb	ip, r0, r1
   2cd94:	mov	r1, r9
   2cd98:	str	ip, [sp]
   2cd9c:	mov	r0, ip
   2cda0:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cda4:	ldr	ip, [sp]
   2cda8:	mov	r1, r9
   2cdac:	mov	r2, r0
   2cdb0:	mov	r0, ip
   2cdb4:	str	r2, [sp]
   2cdb8:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cdbc:	ldr	r2, [sp]
   2cdc0:	uxth	ip, sl
   2cdc4:	mul	fp, fp, r2
   2cdc8:	orr	ip, ip, r1, lsl #16
   2cdcc:	cmp	fp, ip
   2cdd0:	bls	2cdf0 <__assert_fail@plt+0x1a7b8>
   2cdd4:	adds	ip, ip, r4
   2cdd8:	sub	r1, r2, #1
   2cddc:	bcs	2ce3c <__assert_fail@plt+0x1a804>
   2cde0:	cmp	fp, ip
   2cde4:	subhi	r2, r2, #2
   2cde8:	addhi	ip, ip, r4
   2cdec:	bls	2ce3c <__assert_fail@plt+0x1a804>
   2cdf0:	ldr	r0, [sp, #4]
   2cdf4:	orr	r1, r2, r8, lsl #16
   2cdf8:	rsb	fp, fp, ip
   2cdfc:	umull	r2, r3, r1, r0
   2ce00:	cmp	fp, r3
   2ce04:	bcc	2ce28 <__assert_fail@plt+0x1a7f0>
   2ce08:	movne	r4, #0
   2ce0c:	moveq	r4, #1
   2ce10:	cmp	r2, r7, lsl r5
   2ce14:	movls	r4, #0
   2ce18:	andhi	r4, r4, #1
   2ce1c:	cmp	r4, #0
   2ce20:	moveq	r3, r1
   2ce24:	beq	2caec <__assert_fail@plt+0x1a4b4>
   2ce28:	sub	r3, r1, #1
   2ce2c:	mov	r4, #0
   2ce30:	b	2caec <__assert_fail@plt+0x1a4b4>
   2ce34:	mov	fp, r3
   2ce38:	b	2cbc8 <__assert_fail@plt+0x1a590>
   2ce3c:	mov	r2, r1
   2ce40:	b	2cdf0 <__assert_fail@plt+0x1a7b8>
   2ce44:	mov	r8, r2
   2ce48:	b	2cd90 <__assert_fail@plt+0x1a758>
   2ce4c:	mov	r3, r2
   2ce50:	b	2ccac <__assert_fail@plt+0x1a674>
   2ce54:	cmp	r3, #0
   2ce58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce5c:	mov	r6, r0
   2ce60:	sub	sp, sp, #12
   2ce64:	mov	r5, r1
   2ce68:	mov	r7, r0
   2ce6c:	mov	r4, r2
   2ce70:	mov	r8, r1
   2ce74:	bne	2cf54 <__assert_fail@plt+0x1a91c>
   2ce78:	cmp	r2, r1
   2ce7c:	bls	2cf90 <__assert_fail@plt+0x1a958>
   2ce80:	clz	r3, r2
   2ce84:	cmp	r3, #0
   2ce88:	rsbne	r8, r3, #32
   2ce8c:	lslne	r4, r2, r3
   2ce90:	lsrne	r8, r0, r8
   2ce94:	lslne	r7, r0, r3
   2ce98:	orrne	r8, r8, r1, lsl r3
   2ce9c:	lsr	r5, r4, #16
   2cea0:	uxth	sl, r4
   2cea4:	mov	r1, r5
   2cea8:	mov	r0, r8
   2ceac:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2ceb0:	mov	r1, r5
   2ceb4:	mov	r9, r0
   2ceb8:	mov	r0, r8
   2cebc:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cec0:	mul	r0, sl, r9
   2cec4:	lsr	r3, r7, #16
   2cec8:	orr	r1, r3, r1, lsl #16
   2cecc:	cmp	r0, r1
   2ced0:	bls	2cef4 <__assert_fail@plt+0x1a8bc>
   2ced4:	adds	r1, r1, r4
   2ced8:	sub	r2, r9, #1
   2cedc:	bcs	2cef0 <__assert_fail@plt+0x1a8b8>
   2cee0:	cmp	r0, r1
   2cee4:	subhi	r9, r9, #2
   2cee8:	addhi	r1, r1, r4
   2ceec:	bhi	2cef4 <__assert_fail@plt+0x1a8bc>
   2cef0:	mov	r9, r2
   2cef4:	rsb	r8, r0, r1
   2cef8:	mov	r1, r5
   2cefc:	uxth	r7, r7
   2cf00:	mov	r0, r8
   2cf04:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cf08:	mov	r1, r5
   2cf0c:	mov	r6, r0
   2cf10:	mov	r0, r8
   2cf14:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cf18:	mul	sl, sl, r6
   2cf1c:	orr	r1, r7, r1, lsl #16
   2cf20:	cmp	sl, r1
   2cf24:	bls	2cf40 <__assert_fail@plt+0x1a908>
   2cf28:	adds	r4, r1, r4
   2cf2c:	sub	r3, r6, #1
   2cf30:	bcs	2d23c <__assert_fail@plt+0x1ac04>
   2cf34:	cmp	sl, r4
   2cf38:	subhi	r6, r6, #2
   2cf3c:	bls	2d23c <__assert_fail@plt+0x1ac04>
   2cf40:	orr	r0, r6, r9, lsl #16
   2cf44:	mov	r6, #0
   2cf48:	mov	r1, r6
   2cf4c:	add	sp, sp, #12
   2cf50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf54:	cmp	r3, r1
   2cf58:	movhi	r6, #0
   2cf5c:	movhi	r0, r6
   2cf60:	bhi	2cf48 <__assert_fail@plt+0x1a910>
   2cf64:	clz	r7, r3
   2cf68:	cmp	r7, #0
   2cf6c:	bne	2d06c <__assert_fail@plt+0x1aa34>
   2cf70:	cmp	r3, r1
   2cf74:	cmpcs	r2, r6
   2cf78:	movhi	r6, #0
   2cf7c:	movls	r6, #1
   2cf80:	movls	r0, #1
   2cf84:	movls	r6, r7
   2cf88:	movhi	r0, r6
   2cf8c:	b	2cf48 <__assert_fail@plt+0x1a910>
   2cf90:	cmp	r2, #0
   2cf94:	bne	2cfa8 <__assert_fail@plt+0x1a970>
   2cf98:	mov	r1, r2
   2cf9c:	mov	r0, #1
   2cfa0:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cfa4:	mov	r4, r0
   2cfa8:	clz	r3, r4
   2cfac:	cmp	r3, #0
   2cfb0:	bne	2d168 <__assert_fail@plt+0x1ab30>
   2cfb4:	rsb	r5, r4, r5
   2cfb8:	lsr	r8, r4, #16
   2cfbc:	uxth	sl, r4
   2cfc0:	mov	r6, #1
   2cfc4:	mov	r1, r8
   2cfc8:	mov	r0, r5
   2cfcc:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2cfd0:	mov	r1, r8
   2cfd4:	mov	r9, r0
   2cfd8:	mov	r0, r5
   2cfdc:	bl	2c498 <__assert_fail@plt+0x19e60>
   2cfe0:	mul	r0, sl, r9
   2cfe4:	lsr	r3, r7, #16
   2cfe8:	orr	r1, r3, r1, lsl #16
   2cfec:	cmp	r0, r1
   2cff0:	bls	2d010 <__assert_fail@plt+0x1a9d8>
   2cff4:	adds	r1, r1, r4
   2cff8:	sub	r2, r9, #1
   2cffc:	bcs	2d244 <__assert_fail@plt+0x1ac0c>
   2d000:	cmp	r0, r1
   2d004:	subhi	r9, r9, #2
   2d008:	addhi	r1, r1, r4
   2d00c:	bls	2d244 <__assert_fail@plt+0x1ac0c>
   2d010:	rsb	fp, r0, r1
   2d014:	mov	r1, r8
   2d018:	uxth	r7, r7
   2d01c:	mov	r0, fp
   2d020:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2d024:	mov	r1, r8
   2d028:	mov	r5, r0
   2d02c:	mov	r0, fp
   2d030:	bl	2c498 <__assert_fail@plt+0x19e60>
   2d034:	mul	sl, sl, r5
   2d038:	orr	r1, r7, r1, lsl #16
   2d03c:	cmp	sl, r1
   2d040:	bls	2d05c <__assert_fail@plt+0x1aa24>
   2d044:	adds	r4, r1, r4
   2d048:	sub	r3, r5, #1
   2d04c:	bcs	2d24c <__assert_fail@plt+0x1ac14>
   2d050:	cmp	sl, r4
   2d054:	subhi	r5, r5, #2
   2d058:	bls	2d24c <__assert_fail@plt+0x1ac14>
   2d05c:	orr	r0, r5, r9, lsl #16
   2d060:	mov	r1, r6
   2d064:	add	sp, sp, #12
   2d068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d06c:	rsb	r1, r7, #32
   2d070:	lsl	r0, r2, r7
   2d074:	lsr	r2, r2, r1
   2d078:	lsr	fp, r5, r1
   2d07c:	orr	r8, r2, r3, lsl r7
   2d080:	lsr	r1, r6, r1
   2d084:	str	r0, [sp, #4]
   2d088:	orr	r5, r1, r5, lsl r7
   2d08c:	lsr	r9, r8, #16
   2d090:	mov	r0, fp
   2d094:	uxth	sl, r8
   2d098:	mov	r1, r9
   2d09c:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2d0a0:	mov	r1, r9
   2d0a4:	mov	r4, r0
   2d0a8:	mov	r0, fp
   2d0ac:	bl	2c498 <__assert_fail@plt+0x19e60>
   2d0b0:	mul	r0, sl, r4
   2d0b4:	lsr	ip, r5, #16
   2d0b8:	orr	r1, ip, r1, lsl #16
   2d0bc:	cmp	r0, r1
   2d0c0:	bls	2d0d4 <__assert_fail@plt+0x1aa9c>
   2d0c4:	adds	r1, r1, r8
   2d0c8:	sub	r2, r4, #1
   2d0cc:	bcc	2d268 <__assert_fail@plt+0x1ac30>
   2d0d0:	mov	r4, r2
   2d0d4:	rsb	ip, r0, r1
   2d0d8:	mov	r1, r9
   2d0dc:	str	ip, [sp]
   2d0e0:	uxth	r5, r5
   2d0e4:	mov	r0, ip
   2d0e8:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2d0ec:	ldr	ip, [sp]
   2d0f0:	mov	r1, r9
   2d0f4:	mov	fp, r0
   2d0f8:	mov	r0, ip
   2d0fc:	bl	2c498 <__assert_fail@plt+0x19e60>
   2d100:	mul	sl, sl, fp
   2d104:	orr	r1, r5, r1, lsl #16
   2d108:	cmp	sl, r1
   2d10c:	bls	2d120 <__assert_fail@plt+0x1aae8>
   2d110:	adds	r1, r1, r8
   2d114:	sub	r2, fp, #1
   2d118:	bcc	2d254 <__assert_fail@plt+0x1ac1c>
   2d11c:	mov	fp, r2
   2d120:	ldr	r3, [sp, #4]
   2d124:	orr	r0, fp, r4, lsl #16
   2d128:	rsb	sl, sl, r1
   2d12c:	umull	r4, r5, r0, r3
   2d130:	cmp	sl, r5
   2d134:	bcc	2d154 <__assert_fail@plt+0x1ab1c>
   2d138:	movne	r3, #0
   2d13c:	moveq	r3, #1
   2d140:	cmp	r4, r6, lsl r7
   2d144:	movls	r6, #0
   2d148:	andhi	r6, r3, #1
   2d14c:	cmp	r6, #0
   2d150:	beq	2cf48 <__assert_fail@plt+0x1a910>
   2d154:	mov	r6, #0
   2d158:	sub	r0, r0, #1
   2d15c:	mov	r1, r6
   2d160:	add	sp, sp, #12
   2d164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d168:	lsl	r4, r4, r3
   2d16c:	rsb	r9, r3, #32
   2d170:	lsr	r2, r5, r9
   2d174:	lsr	r9, r6, r9
   2d178:	lsr	r8, r4, #16
   2d17c:	orr	r9, r9, r5, lsl r3
   2d180:	mov	r0, r2
   2d184:	lsl	r7, r6, r3
   2d188:	mov	r1, r8
   2d18c:	str	r2, [sp]
   2d190:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2d194:	ldr	r2, [sp]
   2d198:	mov	r1, r8
   2d19c:	uxth	sl, r4
   2d1a0:	mov	fp, r0
   2d1a4:	mov	r0, r2
   2d1a8:	bl	2c498 <__assert_fail@plt+0x19e60>
   2d1ac:	mul	r0, sl, fp
   2d1b0:	lsr	r3, r9, #16
   2d1b4:	orr	r1, r3, r1, lsl #16
   2d1b8:	cmp	r0, r1
   2d1bc:	bls	2d1dc <__assert_fail@plt+0x1aba4>
   2d1c0:	adds	r1, r1, r4
   2d1c4:	sub	r3, fp, #1
   2d1c8:	bcs	2d27c <__assert_fail@plt+0x1ac44>
   2d1cc:	cmp	r0, r1
   2d1d0:	subhi	fp, fp, #2
   2d1d4:	addhi	r1, r1, r4
   2d1d8:	bls	2d27c <__assert_fail@plt+0x1ac44>
   2d1dc:	rsb	r5, r0, r1
   2d1e0:	mov	r1, r8
   2d1e4:	uxth	r9, r9
   2d1e8:	mov	r0, r5
   2d1ec:	bl	2c2ac <__assert_fail@plt+0x19c74>
   2d1f0:	mov	r1, r8
   2d1f4:	mov	r6, r0
   2d1f8:	mov	r0, r5
   2d1fc:	bl	2c498 <__assert_fail@plt+0x19e60>
   2d200:	mul	r5, sl, r6
   2d204:	orr	r1, r9, r1, lsl #16
   2d208:	cmp	r5, r1
   2d20c:	bls	2d230 <__assert_fail@plt+0x1abf8>
   2d210:	adds	r1, r1, r4
   2d214:	sub	r3, r6, #1
   2d218:	bcs	2d22c <__assert_fail@plt+0x1abf4>
   2d21c:	cmp	r5, r1
   2d220:	subhi	r6, r6, #2
   2d224:	addhi	r1, r1, r4
   2d228:	bhi	2d230 <__assert_fail@plt+0x1abf8>
   2d22c:	mov	r6, r3
   2d230:	rsb	r5, r5, r1
   2d234:	orr	r6, r6, fp, lsl #16
   2d238:	b	2cfc4 <__assert_fail@plt+0x1a98c>
   2d23c:	mov	r6, r3
   2d240:	b	2cf40 <__assert_fail@plt+0x1a908>
   2d244:	mov	r9, r2
   2d248:	b	2d010 <__assert_fail@plt+0x1a9d8>
   2d24c:	mov	r5, r3
   2d250:	b	2d05c <__assert_fail@plt+0x1aa24>
   2d254:	cmp	sl, r1
   2d258:	subhi	fp, fp, #2
   2d25c:	addhi	r1, r1, r8
   2d260:	bhi	2d120 <__assert_fail@plt+0x1aae8>
   2d264:	b	2d11c <__assert_fail@plt+0x1aae4>
   2d268:	cmp	r0, r1
   2d26c:	subhi	r4, r4, #2
   2d270:	addhi	r1, r1, r8
   2d274:	bhi	2d0d4 <__assert_fail@plt+0x1aa9c>
   2d278:	b	2d0d0 <__assert_fail@plt+0x1aa98>
   2d27c:	mov	fp, r3
   2d280:	b	2d1dc <__assert_fail@plt+0x1aba4>
   2d284:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2d288:	mov	r7, r0
   2d28c:	ldr	r6, [pc, #76]	; 2d2e0 <__assert_fail@plt+0x1aca8>
   2d290:	mov	r8, r1
   2d294:	ldr	r5, [pc, #72]	; 2d2e4 <__assert_fail@plt+0x1acac>
   2d298:	mov	r9, r2
   2d29c:	add	r6, pc, r6
   2d2a0:	bl	11f40 <_init@@Base>
   2d2a4:	add	r5, pc, r5
   2d2a8:	rsb	r6, r5, r6
   2d2ac:	asrs	r6, r6, #2
   2d2b0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d2b4:	sub	r5, r5, #4
   2d2b8:	mov	r4, #0
   2d2bc:	add	r4, r4, #1
   2d2c0:	ldr	r3, [r5, #4]!
   2d2c4:	mov	r0, r7
   2d2c8:	mov	r1, r8
   2d2cc:	mov	r2, r9
   2d2d0:	blx	r3
   2d2d4:	cmp	r4, r6
   2d2d8:	bne	2d2bc <__assert_fail@plt+0x1ac84>
   2d2dc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2d2e0:	andeq	r7, r1, ip, asr #24
   2d2e4:	andeq	r7, r1, r0, asr #24
   2d2e8:	bx	lr
   2d2ec:	ldr	r3, [pc, #28]	; 2d310 <__assert_fail@plt+0x1acd8>
   2d2f0:	mov	r1, #0
   2d2f4:	ldr	r2, [pc, #24]	; 2d314 <__assert_fail@plt+0x1acdc>
   2d2f8:	add	r3, pc, r3
   2d2fc:	ldr	r3, [r3, r2]
   2d300:	cmp	r3, #0
   2d304:	ldrne	r2, [r3]
   2d308:	moveq	r2, r3
   2d30c:	b	123a4 <__cxa_atexit@plt>
   2d310:	andeq	r7, r1, r0, lsl #26
   2d314:	andeq	r0, r0, ip, asr r2

Disassembly of section .fini:

0002d318 <_fini@@Base>:
   2d318:	push	{r3, lr}
   2d31c:	pop	{r3, pc}
