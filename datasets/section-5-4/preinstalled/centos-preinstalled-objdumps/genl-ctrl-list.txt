
centos-preinstalled/genl-ctrl-list:     file format elf32-littlearm


Disassembly of section .init:

00010730 <.init>:
   10730:	push	{r3, lr}
   10734:	bl	109c0 <genl_ctrl_alloc_cache@plt+0x1d4>
   10738:	pop	{r3, pc}

Disassembly of section .plt:

0001073c <abort@plt-0x14>:
   1073c:	push	{lr}		; (str lr, [sp, #-4]!)
   10740:	ldr	lr, [pc, #4]	; 1074c <abort@plt-0x4>
   10744:	add	lr, pc, lr
   10748:	ldr	pc, [lr, #8]!
   1074c:			; <UNDEFINED> instruction: 0x000108b4

00010750 <abort@plt>:
   10750:	add	ip, pc, #0, 12
   10754:	add	ip, ip, #16, 20	; 0x10000
   10758:	ldr	pc, [ip, #2228]!	; 0x8b4

0001075c <__libc_start_main@plt>:
   1075c:	add	ip, pc, #0, 12
   10760:	add	ip, ip, #16, 20	; 0x10000
   10764:	ldr	pc, [ip, #2220]!	; 0x8ac

00010768 <__gmon_start__@plt>:
   10768:	add	ip, pc, #0, 12
   1076c:	add	ip, ip, #16, 20	; 0x10000
   10770:	ldr	pc, [ip, #2212]!	; 0x8a4

00010774 <nl_cli_alloc_cache@plt>:
   10774:	add	ip, pc, #0, 12
   10778:	add	ip, ip, #16, 20	; 0x10000
   1077c:	ldr	pc, [ip, #2204]!	; 0x89c

00010780 <nl_cli_print_version@plt>:
   10780:	add	ip, pc, #0, 12
   10784:	add	ip, ip, #16, 20	; 0x10000
   10788:	ldr	pc, [ip, #2196]!	; 0x894

0001078c <nl_cli_alloc_socket@plt>:
   1078c:	add	ip, pc, #0, 12
   10790:	add	ip, ip, #16, 20	; 0x10000
   10794:	ldr	pc, [ip, #2188]!	; 0x88c

00010798 <nl_cache_dump@plt>:
   10798:	add	ip, pc, #0, 12
   1079c:	add	ip, ip, #16, 20	; 0x10000
   107a0:	ldr	pc, [ip, #2180]!	; 0x884

000107a4 <getopt_long@plt>:
   107a4:	add	ip, pc, #0, 12
   107a8:	add	ip, ip, #16, 20	; 0x10000
   107ac:	ldr	pc, [ip, #2172]!	; 0x87c

000107b0 <nl_cli_parse_dumptype@plt>:
   107b0:	add	ip, pc, #0, 12
   107b4:	add	ip, ip, #16, 20	; 0x10000
   107b8:	ldr	pc, [ip, #2164]!	; 0x874

000107bc <__stack_chk_fail@plt>:
   107bc:	add	ip, pc, #0, 12
   107c0:	add	ip, ip, #16, 20	; 0x10000
   107c4:	ldr	pc, [ip, #2156]!	; 0x86c

000107c8 <puts@plt>:
   107c8:	add	ip, pc, #0, 12
   107cc:	add	ip, ip, #16, 20	; 0x10000
   107d0:	ldr	pc, [ip, #2148]!	; 0x864

000107d4 <nl_cli_connect@plt>:
   107d4:	add	ip, pc, #0, 12
   107d8:	add	ip, ip, #16, 20	; 0x10000
   107dc:	ldr	pc, [ip, #2140]!	; 0x85c

000107e0 <exit@plt>:
   107e0:	add	ip, pc, #0, 12
   107e4:	add	ip, ip, #16, 20	; 0x10000
   107e8:	ldr	pc, [ip, #2132]!	; 0x854

000107ec <genl_ctrl_alloc_cache@plt>:
   107ec:	add	ip, pc, #0, 12
   107f0:	add	ip, ip, #16, 20	; 0x10000
   107f4:	ldr	pc, [ip, #2124]!	; 0x84c

Disassembly of section .text:

000107f8 <.text>:
   107f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107fc:	movw	r2, #4260	; 0x10a4
   10800:	movw	r8, #4256	; 0x10a0
   10804:	movt	r2, #2
   10808:	movt	r8, #2
   1080c:	mov	r6, r1
   10810:	ldr	r2, [r2]
   10814:	sub	sp, sp, #76	; 0x4c
   10818:	ldr	r1, [r8]
   1081c:	mov	r3, #0
   10820:	mov	r4, r3
   10824:	str	r3, [sp, #16]
   10828:	str	r2, [sp, #44]	; 0x2c
   1082c:	mov	r7, r0
   10830:	str	r3, [sp, #20]
   10834:	movw	r9, #4264	; 0x10a8
   10838:	str	r3, [sp, #24]
   1083c:	movt	r9, #2
   10840:	str	r3, [sp, #28]
   10844:	add	r5, sp, #12
   10848:	str	r3, [sp, #32]
   1084c:	mov	sl, #1
   10850:	str	r3, [sp, #36]	; 0x24
   10854:	str	r3, [sp, #40]	; 0x28
   10858:	str	r3, [sp, #48]	; 0x30
   1085c:	str	r3, [sp, #52]	; 0x34
   10860:	str	r3, [sp, #56]	; 0x38
   10864:	str	r3, [sp, #60]	; 0x3c
   10868:	str	r3, [sp, #64]	; 0x40
   1086c:	str	r1, [sp, #68]	; 0x44
   10870:	bl	1078c <nl_cli_alloc_socket@plt>
   10874:	mov	r1, #16
   10878:	mov	fp, r0
   1087c:	bl	107d4 <nl_cli_connect@plt>
   10880:	mov	r0, fp
   10884:	movw	r1, #2864	; 0xb30
   10888:	movw	r2, #2028	; 0x7ec
   1088c:	movt	r1, #1
   10890:	movt	r2, #1
   10894:	bl	10774 <nl_cli_alloc_cache@plt>
   10898:	mov	fp, r0
   1089c:	str	r5, [sp]
   108a0:	movw	r2, #2888	; 0xb48
   108a4:	movw	r3, #4172	; 0x104c
   108a8:	movt	r2, #1
   108ac:	movt	r3, #2
   108b0:	mov	r0, r7
   108b4:	mov	r1, r6
   108b8:	str	r4, [sp, #12]
   108bc:	bl	107a4 <getopt_long@plt>
   108c0:	cmn	r0, #1
   108c4:	beq	10958 <genl_ctrl_alloc_cache@plt+0x16c>
   108c8:	sub	r0, r0, #100	; 0x64
   108cc:	cmp	r0, #18
   108d0:	ldrls	pc, [pc, r0, lsl #2]
   108d4:	b	1089c <genl_ctrl_alloc_cache@plt+0xb0>
   108d8:	andeq	r0, r1, r0, asr r9
   108dc:	muleq	r1, ip, r8
   108e0:	andeq	r0, r1, r0, asr #18
   108e4:	muleq	r1, ip, r8
   108e8:	andeq	r0, r1, ip, lsr #18
   108ec:	muleq	r1, ip, r8
   108f0:	muleq	r1, ip, r8
   108f4:	muleq	r1, ip, r8
   108f8:	muleq	r1, ip, r8
   108fc:	muleq	r1, ip, r8
   10900:	muleq	r1, ip, r8
   10904:	muleq	r1, ip, r8
   10908:	muleq	r1, ip, r8
   1090c:	muleq	r1, ip, r8
   10910:	muleq	r1, ip, r8
   10914:	muleq	r1, ip, r8
   10918:	muleq	r1, ip, r8
   1091c:	muleq	r1, ip, r8
   10920:	andeq	r0, r1, r4, lsr #18
   10924:	bl	10780 <nl_cli_print_version@plt>
   10928:	b	1089c <genl_ctrl_alloc_cache@plt+0xb0>
   1092c:	movw	r0, #2896	; 0xb50
   10930:	movt	r0, #1
   10934:	bl	107c8 <puts@plt>
   10938:	mov	r0, #0
   1093c:	bl	107e0 <exit@plt>
   10940:	ldr	r0, [r9]
   10944:	bl	107b0 <nl_cli_parse_dumptype@plt>
   10948:	str	r0, [sp, #16]
   1094c:	b	1089c <genl_ctrl_alloc_cache@plt+0xb0>
   10950:	str	sl, [sp, #16]
   10954:	b	1089c <genl_ctrl_alloc_cache@plt+0xb0>
   10958:	mov	r0, fp
   1095c:	add	r1, sp, #16
   10960:	bl	10798 <nl_cache_dump@plt>
   10964:	ldr	r2, [sp, #68]	; 0x44
   10968:	ldr	r3, [r8]
   1096c:	mov	r0, #0
   10970:	cmp	r2, r3
   10974:	bne	10980 <genl_ctrl_alloc_cache@plt+0x194>
   10978:	add	sp, sp, #76	; 0x4c
   1097c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10980:	bl	107bc <__stack_chk_fail@plt>
   10984:	mov	fp, #0
   10988:	mov	lr, #0
   1098c:	pop	{r1}		; (ldr r1, [sp], #4)
   10990:	mov	r2, sp
   10994:	push	{r2}		; (str r2, [sp, #-4]!)
   10998:	push	{r0}		; (str r0, [sp, #-4]!)
   1099c:	ldr	ip, [pc, #16]	; 109b4 <genl_ctrl_alloc_cache@plt+0x1c8>
   109a0:	push	{ip}		; (str ip, [sp, #-4]!)
   109a4:	ldr	r0, [pc, #12]	; 109b8 <genl_ctrl_alloc_cache@plt+0x1cc>
   109a8:	ldr	r3, [pc, #12]	; 109bc <genl_ctrl_alloc_cache@plt+0x1d0>
   109ac:	bl	1075c <__libc_start_main@plt>
   109b0:	bl	10750 <abort@plt>
   109b4:	andeq	r0, r1, ip, lsl fp
   109b8:	strdeq	r0, [r1], -r8
   109bc:			; <UNDEFINED> instruction: 0x00010ab8
   109c0:	ldr	r3, [pc, #20]	; 109dc <genl_ctrl_alloc_cache@plt+0x1f0>
   109c4:	ldr	r2, [pc, #20]	; 109e0 <genl_ctrl_alloc_cache@plt+0x1f4>
   109c8:	add	r3, pc, r3
   109cc:	ldr	r2, [r3, r2]
   109d0:	cmp	r2, #0
   109d4:	bxeq	lr
   109d8:	b	10768 <__gmon_start__@plt>
   109dc:	andeq	r0, r1, r0, lsr r6
   109e0:	andeq	r0, r0, r4, asr #32
   109e4:	push	{r3, lr}
   109e8:	movw	r0, #4252	; 0x109c
   109ec:	ldr	r3, [pc, #36]	; 10a18 <genl_ctrl_alloc_cache@plt+0x22c>
   109f0:	movt	r0, #2
   109f4:	rsb	r3, r0, r3
   109f8:	cmp	r3, #6
   109fc:	popls	{r3, pc}
   10a00:	movw	r3, #0
   10a04:	movt	r3, #0
   10a08:	cmp	r3, #0
   10a0c:	popeq	{r3, pc}
   10a10:	blx	r3
   10a14:	pop	{r3, pc}
   10a18:	muleq	r2, pc, r0	; <UNPREDICTABLE>
   10a1c:	push	{r3, lr}
   10a20:	movw	r0, #4252	; 0x109c
   10a24:	movw	r3, #4252	; 0x109c
   10a28:	movt	r0, #2
   10a2c:	movt	r3, #2
   10a30:	rsb	r3, r0, r3
   10a34:	asr	r3, r3, #2
   10a38:	add	r3, r3, r3, lsr #31
   10a3c:	asrs	r1, r3, #1
   10a40:	popeq	{r3, pc}
   10a44:	movw	r2, #0
   10a48:	movt	r2, #0
   10a4c:	cmp	r2, #0
   10a50:	popeq	{r3, pc}
   10a54:	blx	r2
   10a58:	pop	{r3, pc}
   10a5c:	push	{r4, lr}
   10a60:	movw	r4, #4268	; 0x10ac
   10a64:	movt	r4, #2
   10a68:	ldrb	r3, [r4]
   10a6c:	cmp	r3, #0
   10a70:	popne	{r4, pc}
   10a74:	bl	109e4 <genl_ctrl_alloc_cache@plt+0x1f8>
   10a78:	mov	r3, #1
   10a7c:	strb	r3, [r4]
   10a80:	pop	{r4, pc}
   10a84:	movw	r0, #3772	; 0xebc
   10a88:	movt	r0, #2
   10a8c:	push	{r3, lr}
   10a90:	ldr	r3, [r0]
   10a94:	cmp	r3, #0
   10a98:	beq	10ab0 <genl_ctrl_alloc_cache@plt+0x2c4>
   10a9c:	movw	r3, #0
   10aa0:	movt	r3, #0
   10aa4:	cmp	r3, #0
   10aa8:	beq	10ab0 <genl_ctrl_alloc_cache@plt+0x2c4>
   10aac:	blx	r3
   10ab0:	pop	{r3, lr}
   10ab4:	b	10a1c <genl_ctrl_alloc_cache@plt+0x230>
   10ab8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10abc:	mov	r7, r0
   10ac0:	ldr	r6, [pc, #76]	; 10b14 <genl_ctrl_alloc_cache@plt+0x328>
   10ac4:	mov	r8, r1
   10ac8:	ldr	r5, [pc, #72]	; 10b18 <genl_ctrl_alloc_cache@plt+0x32c>
   10acc:	mov	r9, r2
   10ad0:	add	r6, pc, r6
   10ad4:	bl	10730 <abort@plt-0x20>
   10ad8:	add	r5, pc, r5
   10adc:	rsb	r6, r5, r6
   10ae0:	asrs	r6, r6, #2
   10ae4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10ae8:	sub	r5, r5, #4
   10aec:	mov	r4, #0
   10af0:	add	r4, r4, #1
   10af4:	ldr	r3, [r5, #4]!
   10af8:	mov	r0, r7
   10afc:	mov	r1, r8
   10b00:	mov	r2, r9
   10b04:	blx	r3
   10b08:	cmp	r4, r6
   10b0c:	bne	10af0 <genl_ctrl_alloc_cache@plt+0x304>
   10b10:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10b14:	andeq	r0, r1, r0, ror #7
   10b18:	ldrdeq	r0, [r1], -r4
   10b1c:	bx	lr

Disassembly of section .fini:

00010b20 <.fini>:
   10b20:	push	{r3, lr}
   10b24:	pop	{r3, pc}
