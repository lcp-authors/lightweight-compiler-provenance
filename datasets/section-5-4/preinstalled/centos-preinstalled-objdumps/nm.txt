
centos-preinstalled/nm:     file format elf32-littlearm


Disassembly of section .init:

00011684 <_init@@Base>:
   11684:	push	{r3, lr}
   11688:	bl	1227c <__assert_fail@plt+0x7c4>
   1168c:	pop	{r3, pc}

Disassembly of section .plt:

00011690 <strstr@plt-0x14>:
   11690:	push	{lr}		; (str lr, [sp, #-4]!)
   11694:	ldr	lr, [pc, #4]	; 116a0 <_init@@Base+0x1c>
   11698:	add	lr, pc, lr
   1169c:	ldr	pc, [lr, #8]!
   116a0:	andeq	r7, r1, r0, ror #18

000116a4 <strstr@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #94208	; 0x17000
   116ac:	ldr	pc, [ip, #2400]!	; 0x960

000116b0 <raise@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #94208	; 0x17000
   116b8:	ldr	pc, [ip, #2392]!	; 0x958

000116bc <cplus_demangle_name_to_style@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #94208	; 0x17000
   116c4:	ldr	pc, [ip, #2384]!	; 0x950

000116c8 <bfd_scan_vma@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #94208	; 0x17000
   116d0:	ldr	pc, [ip, #2376]!	; 0x948

000116d4 <strcmp@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #94208	; 0x17000
   116dc:	ldr	pc, [ip, #2368]!	; 0x940

000116e0 <strtol@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #94208	; 0x17000
   116e8:	ldr	pc, [ip, #2360]!	; 0x938

000116ec <bfd_plugin_set_plugin@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #94208	; 0x17000
   116f4:	ldr	pc, [ip, #2352]!	; 0x930

000116f8 <fflush@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #94208	; 0x17000
   11700:	ldr	pc, [ip, #2344]!	; 0x928

00011704 <bfd_arch_list@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #94208	; 0x17000
   1170c:	ldr	pc, [ip, #2336]!	; 0x920

00011710 <memmove@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #94208	; 0x17000
   11718:	ldr	pc, [ip, #2328]!	; 0x918

0001171c <bfd_set_default_target@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #94208	; 0x17000
   11724:	ldr	pc, [ip, #2320]!	; 0x910

00011728 <bfd_is_undefined_symclass@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #94208	; 0x17000
   11730:	ldr	pc, [ip, #2312]!	; 0x908

00011734 <free@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #94208	; 0x17000
   1173c:	ldr	pc, [ip, #2304]!	; 0x900

00011740 <ferror@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #94208	; 0x17000
   11748:	ldr	pc, [ip, #2296]!	; 0x8f8

0001174c <cplus_demangle_set_style@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #94208	; 0x17000
   11754:	ldr	pc, [ip, #2288]!	; 0x8f0

00011758 <memcpy@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #94208	; 0x17000
   11760:	ldr	pc, [ip, #2280]!	; 0x8e8

00011764 <bfd_openr@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #94208	; 0x17000
   1176c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011770 <ftell@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #94208	; 0x17000
   11778:	ldr	pc, [ip, #2264]!	; 0x8d8

0001177c <ctime@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #94208	; 0x17000
   11784:	ldr	pc, [ip, #2256]!	; 0x8d0

00011788 <dcgettext@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #94208	; 0x17000
   11790:	ldr	pc, [ip, #2248]!	; 0x8c8

00011794 <bfd_malloc@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #94208	; 0x17000
   1179c:	ldr	pc, [ip, #2240]!	; 0x8c0

000117a0 <__stack_chk_fail@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #94208	; 0x17000
   117a8:	ldr	pc, [ip, #2232]!	; 0x8b8

000117ac <unlink@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #94208	; 0x17000
   117b4:	ldr	pc, [ip, #2224]!	; 0x8b0

000117b8 <xrealloc@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #94208	; 0x17000
   117c0:	ldr	pc, [ip, #2216]!	; 0x8a8

000117c4 <textdomain@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #94208	; 0x17000
   117cc:	ldr	pc, [ip, #2208]!	; 0x8a0

000117d0 <bfd_target_list@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #94208	; 0x17000
   117d8:	ldr	pc, [ip, #2200]!	; 0x898

000117dc <bfd_get_error@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #94208	; 0x17000
   117e4:	ldr	pc, [ip, #2192]!	; 0x890

000117e8 <_IO_putc@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #94208	; 0x17000
   117f0:	ldr	pc, [ip, #2184]!	; 0x888

000117f4 <fwrite@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #94208	; 0x17000
   117fc:	ldr	pc, [ip, #2176]!	; 0x880

00011800 <xmalloc@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #94208	; 0x17000
   11808:	ldr	pc, [ip, #2168]!	; 0x878

0001180c <xmalloc_set_program_name@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #94208	; 0x17000
   11814:	ldr	pc, [ip, #2160]!	; 0x870

00011818 <xstrdup@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #94208	; 0x17000
   11820:	ldr	pc, [ip, #2152]!	; 0x868

00011824 <strcpy@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #94208	; 0x17000
   1182c:	ldr	pc, [ip, #2144]!	; 0x860

00011830 <fread@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #94208	; 0x17000
   11838:	ldr	pc, [ip, #2136]!	; 0x858

0001183c <bfd_get_arch_size@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #94208	; 0x17000
   11844:	ldr	pc, [ip, #2128]!	; 0x850

00011848 <bfd_init@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #94208	; 0x17000
   11850:	ldr	pc, [ip, #2120]!	; 0x848

00011854 <mkstemps64@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #94208	; 0x17000
   1185c:	ldr	pc, [ip, #2112]!	; 0x840

00011860 <strcoll@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #94208	; 0x17000
   11868:	ldr	pc, [ip, #2104]!	; 0x838

0001186c <getenv@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #94208	; 0x17000
   11874:	ldr	pc, [ip, #2096]!	; 0x830

00011878 <mkstemp64@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #94208	; 0x17000
   11880:	ldr	pc, [ip, #2088]!	; 0x828

00011884 <__gnu_Unwind_Find_exidx@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #94208	; 0x17000
   1188c:	ldr	pc, [ip, #2080]!	; 0x820

00011890 <__cxa_begin_cleanup@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #94208	; 0x17000
   11898:	ldr	pc, [ip, #2072]!	; 0x818

0001189c <__libc_start_main@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #94208	; 0x17000
   118a4:	ldr	pc, [ip, #2064]!	; 0x810

000118a8 <strerror@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #94208	; 0x17000
   118b0:	ldr	pc, [ip, #2056]!	; 0x808

000118b4 <__vfprintf_chk@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #94208	; 0x17000
   118bc:	ldr	pc, [ip, #2048]!	; 0x800

000118c0 <__gmon_start__@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #94208	; 0x17000
   118c8:	ldr	pc, [ip, #2040]!	; 0x7f8

000118cc <bfd_set_format@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #94208	; 0x17000
   118d4:	ldr	pc, [ip, #2032]!	; 0x7f0

000118d8 <getopt_long@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #94208	; 0x17000
   118e0:	ldr	pc, [ip, #2024]!	; 0x7e8

000118e4 <exit@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #94208	; 0x17000
   118ec:	ldr	pc, [ip, #2016]!	; 0x7e0

000118f0 <__cxa_type_match@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #94208	; 0x17000
   118f8:	ldr	pc, [ip, #2008]!	; 0x7d8

000118fc <strlen@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #94208	; 0x17000
   11904:	ldr	pc, [ip, #2000]!	; 0x7d0

00011908 <bfd_close_all_done@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #94208	; 0x17000
   11910:	ldr	pc, [ip, #1992]!	; 0x7c8

00011914 <bfd_plugin_set_program_name@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #94208	; 0x17000
   1191c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011920 <bfd_printable_arch_mach@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #94208	; 0x17000
   11928:	ldr	pc, [ip, #1976]!	; 0x7b8

0001192c <__errno_location@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #94208	; 0x17000
   11934:	ldr	pc, [ip, #1968]!	; 0x7b0

00011938 <__sprintf_chk@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #94208	; 0x17000
   11940:	ldr	pc, [ip, #1960]!	; 0x7a8

00011944 <putchar@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #94208	; 0x17000
   1194c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011950 <__printf_chk@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #94208	; 0x17000
   11958:	ldr	pc, [ip, #1944]!	; 0x798

0001195c <__fprintf_chk@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #94208	; 0x17000
   11964:	ldr	pc, [ip, #1936]!	; 0x790

00011968 <access@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #94208	; 0x17000
   11970:	ldr	pc, [ip, #1928]!	; 0x788

00011974 <fclose@plt>:
   11974:	add	ip, pc, #0, 12
   11978:	add	ip, ip, #94208	; 0x17000
   1197c:	ldr	pc, [ip, #1920]!	; 0x780

00011980 <bfd_openw@plt>:
   11980:	add	ip, pc, #0, 12
   11984:	add	ip, ip, #94208	; 0x17000
   11988:	ldr	pc, [ip, #1912]!	; 0x778

0001198c <bfd_set_error_program_name@plt>:
   1198c:	add	ip, pc, #0, 12
   11990:	add	ip, ip, #94208	; 0x17000
   11994:	ldr	pc, [ip, #1904]!	; 0x770

00011998 <bfd_demangle@plt>:
   11998:	add	ip, pc, #0, 12
   1199c:	add	ip, ip, #94208	; 0x17000
   119a0:	ldr	pc, [ip, #1896]!	; 0x768

000119a4 <setlocale@plt>:
   119a4:	add	ip, pc, #0, 12
   119a8:	add	ip, ip, #94208	; 0x17000
   119ac:	ldr	pc, [ip, #1888]!	; 0x760

000119b0 <strrchr@plt>:
   119b0:	add	ip, pc, #0, 12
   119b4:	add	ip, ip, #94208	; 0x17000
   119b8:	ldr	pc, [ip, #1880]!	; 0x758

000119bc <fputc@plt>:
   119bc:	add	ip, pc, #0, 12
   119c0:	add	ip, ip, #94208	; 0x17000
   119c4:	ldr	pc, [ip, #1872]!	; 0x750

000119c8 <xexit@plt>:
   119c8:	add	ip, pc, #0, 12
   119cc:	add	ip, ip, #94208	; 0x17000
   119d0:	ldr	pc, [ip, #1864]!	; 0x748

000119d4 <bfd_close@plt>:
   119d4:	add	ip, pc, #0, 12
   119d8:	add	ip, ip, #94208	; 0x17000
   119dc:	ldr	pc, [ip, #1856]!	; 0x740

000119e0 <mkdtemp@plt>:
   119e0:	add	ip, pc, #0, 12
   119e4:	add	ip, ip, #94208	; 0x17000
   119e8:	ldr	pc, [ip, #1848]!	; 0x738

000119ec <bfd_check_format_matches@plt>:
   119ec:	add	ip, pc, #0, 12
   119f0:	add	ip, ip, #94208	; 0x17000
   119f4:	ldr	pc, [ip, #1840]!	; 0x730

000119f8 <fopen64@plt>:
   119f8:	add	ip, pc, #0, 12
   119fc:	add	ip, ip, #94208	; 0x17000
   11a00:	ldr	pc, [ip, #1832]!	; 0x728

00011a04 <bfd_errmsg@plt>:
   11a04:	add	ip, pc, #0, 12
   11a08:	add	ip, ip, #94208	; 0x17000
   11a0c:	ldr	pc, [ip, #1824]!	; 0x720

00011a10 <qsort@plt>:
   11a10:	add	ip, pc, #0, 12
   11a14:	add	ip, ip, #94208	; 0x17000
   11a18:	ldr	pc, [ip, #1816]!	; 0x718

00011a1c <bfd_canonicalize_reloc@plt>:
   11a1c:	add	ip, pc, #0, 12
   11a20:	add	ip, ip, #94208	; 0x17000
   11a24:	ldr	pc, [ip, #1808]!	; 0x710

00011a28 <sbrk@plt>:
   11a28:	add	ip, pc, #0, 12
   11a2c:	add	ip, ip, #94208	; 0x17000
   11a30:	ldr	pc, [ip, #1800]!	; 0x708

00011a34 <bindtextdomain@plt>:
   11a34:	add	ip, pc, #0, 12
   11a38:	add	ip, ip, #94208	; 0x17000
   11a3c:	ldr	pc, [ip, #1792]!	; 0x700

00011a40 <bfd_check_format@plt>:
   11a40:	add	ip, pc, #0, 12
   11a44:	add	ip, ip, #94208	; 0x17000
   11a48:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a4c <bfd_openr_next_archived_file@plt>:
   11a4c:	add	ip, pc, #0, 12
   11a50:	add	ip, ip, #94208	; 0x17000
   11a54:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a58 <bfd_get_reloc_upper_bound@plt>:
   11a58:	add	ip, pc, #0, 12
   11a5c:	add	ip, ip, #94208	; 0x17000
   11a60:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a64 <bfd_map_over_sections@plt>:
   11a64:	add	ip, pc, #0, 12
   11a68:	add	ip, ip, #94208	; 0x17000
   11a6c:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a70 <fseek@plt>:
   11a70:	add	ip, pc, #0, 12
   11a74:	add	ip, ip, #94208	; 0x17000
   11a78:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a7c <__xstat64@plt>:
   11a7c:	add	ip, pc, #0, 12
   11a80:	add	ip, ip, #94208	; 0x17000
   11a84:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a88 <fputs@plt>:
   11a88:	add	ip, pc, #0, 12
   11a8c:	add	ip, ip, #94208	; 0x17000
   11a90:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a94 <abort@plt>:
   11a94:	add	ip, pc, #0, 12
   11a98:	add	ip, ip, #94208	; 0x17000
   11a9c:	ldr	pc, [ip, #1728]!	; 0x6c0

00011aa0 <close@plt>:
   11aa0:	add	ip, pc, #0, 12
   11aa4:	add	ip, ip, #94208	; 0x17000
   11aa8:	ldr	pc, [ip, #1720]!	; 0x6b8

00011aac <bfd_get_next_mapent@plt>:
   11aac:	add	ip, pc, #0, 12
   11ab0:	add	ip, ip, #94208	; 0x17000
   11ab4:	ldr	pc, [ip, #1712]!	; 0x6b0

00011ab8 <__assert_fail@plt>:
   11ab8:	add	ip, pc, #0, 12
   11abc:	add	ip, ip, #94208	; 0x17000
   11ac0:	ldr	pc, [ip, #1704]!	; 0x6a8

Disassembly of section .text:

00011ac4 <.text>:
   11ac4:	push	{r4, r5, r6, r7, lr}
   11ac8:	sub	sp, sp, #20
   11acc:	movw	r5, #38848	; 0x97c0
   11ad0:	movt	r5, #2
   11ad4:	str	r1, [sp, #8]
   11ad8:	movw	r1, #33360	; 0x8250
   11adc:	str	r0, [sp, #12]
   11ae0:	movt	r1, #1
   11ae4:	mov	r0, #5
   11ae8:	movw	r6, #38632	; 0x96e8
   11aec:	bl	119a4 <setlocale@plt>
   11af0:	movw	r1, #33360	; 0x8250
   11af4:	mov	r0, #0
   11af8:	movt	r1, #1
   11afc:	bl	119a4 <setlocale@plt>
   11b00:	movw	r1, #33360	; 0x8250
   11b04:	mov	r0, #3
   11b08:	movt	r1, #1
   11b0c:	bl	119a4 <setlocale@plt>
   11b10:	movw	r0, #34052	; 0x8504
   11b14:	movw	r1, #34064	; 0x8510
   11b18:	movt	r0, #1
   11b1c:	movt	r1, #1
   11b20:	movw	r4, #38640	; 0x96f0
   11b24:	bl	11a34 <bindtextdomain@plt>
   11b28:	movw	r0, #34052	; 0x8504
   11b2c:	movt	r0, #1
   11b30:	movw	r7, #37260	; 0x918c
   11b34:	bl	117c4 <textdomain@plt>
   11b38:	ldr	r3, [sp, #8]
   11b3c:	movt	r6, #2
   11b40:	movt	r4, #2
   11b44:	movt	r7, #2
   11b48:	ldr	r3, [r3]
   11b4c:	mov	r0, r3
   11b50:	str	r3, [r5]
   11b54:	bl	1180c <xmalloc_set_program_name@plt>
   11b58:	ldr	r0, [r5]
   11b5c:	bl	1198c <bfd_set_error_program_name@plt>
   11b60:	ldr	r0, [r5]
   11b64:	bl	11914 <bfd_plugin_set_program_name@plt>
   11b68:	add	r0, sp, #12
   11b6c:	add	r1, sp, #8
   11b70:	bl	15960 <__assert_fail@plt+0x3ea8>
   11b74:	bl	11848 <bfd_init@plt>
   11b78:	bl	146e4 <__assert_fail@plt+0x2c2c>
   11b7c:	mov	r3, #0
   11b80:	ldr	r0, [sp, #12]
   11b84:	str	r3, [sp]
   11b88:	movw	r2, #34184	; 0x8588
   11b8c:	ldr	r1, [sp, #8]
   11b90:	movt	r2, #1
   11b94:	ldr	r3, [pc, #1696]	; 1223c <__assert_fail@plt+0x784>
   11b98:	bl	118d8 <getopt_long@plt>
   11b9c:	cmn	r0, #1
   11ba0:	beq	120a4 <__assert_fail@plt+0x5ec>
   11ba4:	cmp	r0, #202	; 0xca
   11ba8:	ldrls	pc, [pc, r0, lsl #2]
   11bac:	b	12090 <__assert_fail@plt+0x5d8>
   11bb0:	andeq	r1, r1, ip, ror fp
   11bb4:	muleq	r1, r0, r0
   11bb8:	muleq	r1, r0, r0
   11bbc:	muleq	r1, r0, r0
   11bc0:	muleq	r1, r0, r0
   11bc4:	muleq	r1, r0, r0
   11bc8:	muleq	r1, r0, r0
   11bcc:	muleq	r1, r0, r0
   11bd0:	muleq	r1, r0, r0
   11bd4:	muleq	r1, r0, r0
   11bd8:	muleq	r1, r0, r0
   11bdc:	muleq	r1, r0, r0
   11be0:	muleq	r1, r0, r0
   11be4:	muleq	r1, r0, r0
   11be8:	muleq	r1, r0, r0
   11bec:	muleq	r1, r0, r0
   11bf0:	muleq	r1, r0, r0
   11bf4:	muleq	r1, r0, r0
   11bf8:	muleq	r1, r0, r0
   11bfc:	muleq	r1, r0, r0
   11c00:	muleq	r1, r0, r0
   11c04:	muleq	r1, r0, r0
   11c08:	muleq	r1, r0, r0
   11c0c:	muleq	r1, r0, r0
   11c10:	muleq	r1, r0, r0
   11c14:	muleq	r1, r0, r0
   11c18:	muleq	r1, r0, r0
   11c1c:	muleq	r1, r0, r0
   11c20:	muleq	r1, r0, r0
   11c24:	muleq	r1, r0, r0
   11c28:	muleq	r1, r0, r0
   11c2c:	muleq	r1, r0, r0
   11c30:	muleq	r1, r0, r0
   11c34:	muleq	r1, r0, r0
   11c38:	muleq	r1, r0, r0
   11c3c:	muleq	r1, r0, r0
   11c40:	muleq	r1, r0, r0
   11c44:	muleq	r1, r0, r0
   11c48:	muleq	r1, r0, r0
   11c4c:	muleq	r1, r0, r0
   11c50:	muleq	r1, r0, r0
   11c54:	muleq	r1, r0, r0
   11c58:	muleq	r1, r0, r0
   11c5c:	muleq	r1, r0, r0
   11c60:	muleq	r1, r0, r0
   11c64:	muleq	r1, r0, r0
   11c68:	muleq	r1, r0, r0
   11c6c:	muleq	r1, r0, r0
   11c70:	muleq	r1, r0, r0
   11c74:	muleq	r1, r0, r0
   11c78:	muleq	r1, r0, r0
   11c7c:	muleq	r1, r0, r0
   11c80:	muleq	r1, r0, r0
   11c84:	muleq	r1, r0, r0
   11c88:	muleq	r1, r0, r0
   11c8c:	muleq	r1, r0, r0
   11c90:	muleq	r1, r0, r0
   11c94:	muleq	r1, r0, r0
   11c98:	muleq	r1, r0, r0
   11c9c:	muleq	r1, r0, r0
   11ca0:	muleq	r1, r0, r0
   11ca4:	muleq	r1, r0, r0
   11ca8:	muleq	r1, r0, r0
   11cac:	muleq	r1, r0, r0
   11cb0:	muleq	r1, r0, r0
   11cb4:	andeq	r2, r1, ip, rrx
   11cb8:	andeq	r2, r1, ip, asr r0
   11cbc:	andeq	r2, r1, ip, lsr #32
   11cc0:	andeq	r2, r1, r0, lsr #32
   11cc4:	muleq	r1, r0, r0
   11cc8:	muleq	r1, r0, r0
   11ccc:	muleq	r1, r0, r0
   11cd0:	andeq	r2, r1, ip
   11cd4:	muleq	r1, r0, r0
   11cd8:	muleq	r1, r0, r0
   11cdc:	muleq	r1, r0, r0
   11ce0:	muleq	r1, r0, r0
   11ce4:	muleq	r1, r0, r0
   11ce8:	muleq	r1, r0, r0
   11cec:	muleq	r1, r0, r0
   11cf0:	strdeq	r1, [r1], -ip
   11cf4:	muleq	r1, r0, r0
   11cf8:	muleq	r1, r0, r0
   11cfc:	strdeq	r1, [r1], -r0
   11d00:	muleq	r1, r0, r0
   11d04:	muleq	r1, r0, r0
   11d08:	andeq	r1, r1, r4, ror #31
   11d0c:	muleq	r1, r0, r0
   11d10:			; <UNDEFINED> instruction: 0x00011fb4
   11d14:	muleq	r1, r0, r0
   11d18:	muleq	r1, r0, r0
   11d1c:	muleq	r1, r0, r0
   11d20:	muleq	r1, r0, r0
   11d24:	muleq	r1, r0, r0
   11d28:	muleq	r1, r0, r0
   11d2c:	muleq	r1, r0, r0
   11d30:	muleq	r1, r0, r0
   11d34:	andeq	r1, r1, r8, lsr #31
   11d38:	muleq	r1, r0, r0
   11d3c:	muleq	r1, r0, r0
   11d40:	muleq	r1, r0, r0
   11d44:	andeq	r1, r1, ip, ror fp
   11d48:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11d4c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11d50:	andeq	r2, r1, ip
   11d54:	muleq	r1, r0, r0
   11d58:	muleq	r1, r0, r0
   11d5c:	muleq	r1, r0, r0
   11d60:	andeq	r1, r1, r4, lsl #31
   11d64:	muleq	r1, r0, r0
   11d68:	andeq	r1, r1, ip, ror #30
   11d6c:	andeq	r2, r1, ip, rrx
   11d70:	andeq	r1, r1, r4, asr pc
   11d74:	muleq	r1, r0, r0
   11d78:	andeq	r1, r1, r8, asr #30
   11d7c:	andeq	r1, r1, ip, lsr pc
   11d80:	andeq	r1, r1, r0, lsl #30
   11d84:	strdeq	r1, [r1], -r4
   11d88:	andeq	r1, r1, ip, ror #30
   11d8c:	muleq	r1, r0, r0
   11d90:	muleq	r1, r0, r0
   11d94:	muleq	r1, r0, r0
   11d98:	muleq	r1, r0, r0
   11d9c:	muleq	r1, r0, r0
   11da0:	muleq	r1, r0, r0
   11da4:	muleq	r1, r0, r0
   11da8:	muleq	r1, r0, r0
   11dac:	muleq	r1, r0, r0
   11db0:	muleq	r1, r0, r0
   11db4:	muleq	r1, r0, r0
   11db8:	muleq	r1, r0, r0
   11dbc:	muleq	r1, r0, r0
   11dc0:	muleq	r1, r0, r0
   11dc4:	muleq	r1, r0, r0
   11dc8:	muleq	r1, r0, r0
   11dcc:	muleq	r1, r0, r0
   11dd0:	muleq	r1, r0, r0
   11dd4:	muleq	r1, r0, r0
   11dd8:	muleq	r1, r0, r0
   11ddc:	muleq	r1, r0, r0
   11de0:	muleq	r1, r0, r0
   11de4:	muleq	r1, r0, r0
   11de8:	muleq	r1, r0, r0
   11dec:	muleq	r1, r0, r0
   11df0:	muleq	r1, r0, r0
   11df4:	muleq	r1, r0, r0
   11df8:	muleq	r1, r0, r0
   11dfc:	muleq	r1, r0, r0
   11e00:	muleq	r1, r0, r0
   11e04:	muleq	r1, r0, r0
   11e08:	muleq	r1, r0, r0
   11e0c:	muleq	r1, r0, r0
   11e10:	muleq	r1, r0, r0
   11e14:	muleq	r1, r0, r0
   11e18:	muleq	r1, r0, r0
   11e1c:	muleq	r1, r0, r0
   11e20:	muleq	r1, r0, r0
   11e24:	muleq	r1, r0, r0
   11e28:	muleq	r1, r0, r0
   11e2c:	muleq	r1, r0, r0
   11e30:	muleq	r1, r0, r0
   11e34:	muleq	r1, r0, r0
   11e38:	muleq	r1, r0, r0
   11e3c:	muleq	r1, r0, r0
   11e40:	muleq	r1, r0, r0
   11e44:	muleq	r1, r0, r0
   11e48:	muleq	r1, r0, r0
   11e4c:	muleq	r1, r0, r0
   11e50:	muleq	r1, r0, r0
   11e54:	muleq	r1, r0, r0
   11e58:	muleq	r1, r0, r0
   11e5c:	muleq	r1, r0, r0
   11e60:	muleq	r1, r0, r0
   11e64:	muleq	r1, r0, r0
   11e68:	muleq	r1, r0, r0
   11e6c:	muleq	r1, r0, r0
   11e70:	muleq	r1, r0, r0
   11e74:	muleq	r1, r0, r0
   11e78:	muleq	r1, r0, r0
   11e7c:	muleq	r1, r0, r0
   11e80:	muleq	r1, r0, r0
   11e84:	muleq	r1, r0, r0
   11e88:	muleq	r1, r0, r0
   11e8c:	muleq	r1, r0, r0
   11e90:	muleq	r1, r0, r0
   11e94:	muleq	r1, r0, r0
   11e98:	muleq	r1, r0, r0
   11e9c:	muleq	r1, r0, r0
   11ea0:	muleq	r1, r0, r0
   11ea4:	muleq	r1, r0, r0
   11ea8:	muleq	r1, r0, r0
   11eac:	muleq	r1, r0, r0
   11eb0:	muleq	r1, r0, r0
   11eb4:	muleq	r1, r0, r0
   11eb8:	muleq	r1, r0, r0
   11ebc:	muleq	r1, r0, r0
   11ec0:	muleq	r1, r0, r0
   11ec4:	muleq	r1, r0, r0
   11ec8:	muleq	r1, r0, r0
   11ecc:	muleq	r1, r0, r0
   11ed0:	andeq	r1, r1, r8, ror #29
   11ed4:	ldrdeq	r1, [r1], -ip
   11ed8:	andeq	r2, r1, r8, ror r0
   11edc:	ldr	r0, [r6]
   11ee0:	bl	116ec <bfd_plugin_set_plugin@plt>
   11ee4:	b	11b7c <__assert_fail@plt+0xc4>
   11ee8:	ldr	r3, [r6]
   11eec:	str	r3, [r4, #180]	; 0xb4
   11ef0:	b	11b7c <__assert_fail@plt+0xc4>
   11ef4:	mov	r3, #1
   11ef8:	str	r3, [r4, #64]	; 0x40
   11efc:	b	11b7c <__assert_fail@plt+0xc4>
   11f00:	ldr	r5, [r6]
   11f04:	ldrb	r3, [r5]
   11f08:	cmp	r3, #111	; 0x6f
   11f0c:	beq	1210c <__assert_fail@plt+0x654>
   11f10:	cmp	r3, #120	; 0x78
   11f14:	beq	11b7c <__assert_fail@plt+0xc4>
   11f18:	cmp	r3, #100	; 0x64
   11f1c:	beq	12148 <__assert_fail@plt+0x690>
   11f20:	movw	r1, #34128	; 0x8550
   11f24:	mov	r0, #0
   11f28:	movt	r1, #1
   11f2c:	mov	r2, #5
   11f30:	bl	11788 <dcgettext@plt>
   11f34:	mov	r1, r5
   11f38:	bl	14658 <__assert_fail@plt+0x2ba0>
   11f3c:	mov	r3, #1
   11f40:	str	r3, [r4, #184]	; 0xb8
   11f44:	b	11b7c <__assert_fail@plt+0xc4>
   11f48:	mov	r3, #1
   11f4c:	str	r3, [r4, #92]	; 0x5c
   11f50:	b	11b7c <__assert_fail@plt+0xc4>
   11f54:	mov	r3, #0
   11f58:	mov	r2, #1
   11f5c:	str	r3, [r4, #88]	; 0x58
   11f60:	str	r2, [r4, #80]	; 0x50
   11f64:	str	r3, [r4, #84]	; 0x54
   11f68:	b	11b7c <__assert_fail@plt+0xc4>
   11f6c:	mov	r3, #0
   11f70:	mov	r2, #1
   11f74:	str	r3, [r4, #80]	; 0x50
   11f78:	str	r3, [r4, #84]	; 0x54
   11f7c:	str	r2, [r4, #88]	; 0x58
   11f80:	b	11b7c <__assert_fail@plt+0xc4>
   11f84:	mov	r3, #1
   11f88:	str	r3, [r4, #20]
   11f8c:	b	11b7c <__assert_fail@plt+0xc4>
   11f90:	mov	r3, #1
   11f94:	str	r3, [r4, #68]	; 0x44
   11f98:	b	11b7c <__assert_fail@plt+0xc4>
   11f9c:	ldr	r0, [r6]
   11fa0:	bl	139b0 <__assert_fail@plt+0x1ef8>
   11fa4:	b	11b7c <__assert_fail@plt+0xc4>
   11fa8:	mov	r3, #1
   11fac:	str	r3, [r4, #72]	; 0x48
   11fb0:	b	11b7c <__assert_fail@plt+0xc4>
   11fb4:	movw	r1, #34148	; 0x8564
   11fb8:	ldr	r0, [r6]
   11fbc:	movt	r1, #1
   11fc0:	bl	116d4 <strcmp@plt>
   11fc4:	cmp	r0, #0
   11fc8:	beq	11b7c <__assert_fail@plt+0xc4>
   11fcc:	movw	r1, #34156	; 0x856c
   11fd0:	mov	r2, #5
   11fd4:	movt	r1, #1
   11fd8:	mov	r0, #0
   11fdc:	bl	11788 <dcgettext@plt>
   11fe0:	bl	14658 <__assert_fail@plt+0x2ba0>
   11fe4:	mov	r3, #1
   11fe8:	str	r3, [r4, #188]	; 0xbc
   11fec:	b	11b7c <__assert_fail@plt+0xc4>
   11ff0:	mov	r3, #1
   11ff4:	str	r3, [r4, #176]	; 0xb0
   11ff8:	b	11b7c <__assert_fail@plt+0xc4>
   11ffc:	movw	r0, #34120	; 0x8548
   12000:	movt	r0, #1
   12004:	bl	139b0 <__assert_fail@plt+0x1ef8>
   12008:	b	11b7c <__assert_fail@plt+0xc4>
   1200c:	movw	r3, #38624	; 0x96e0
   12010:	movt	r3, #2
   12014:	mov	r1, #0
   12018:	ldr	r0, [r3]
   1201c:	bl	123ec <__assert_fail@plt+0x934>
   12020:	mov	r3, #1
   12024:	str	r3, [r4, #56]	; 0x38
   12028:	b	11b7c <__assert_fail@plt+0xc4>
   1202c:	ldr	r0, [r6]
   12030:	mov	r3, #1
   12034:	movw	r5, #38632	; 0x96e8
   12038:	str	r3, [r4]
   1203c:	cmp	r0, #0
   12040:	movt	r5, #2
   12044:	beq	11b7c <__assert_fail@plt+0xc4>
   12048:	bl	116bc <cplus_demangle_name_to_style@plt>
   1204c:	cmp	r0, #0
   12050:	beq	12224 <__assert_fail@plt+0x76c>
   12054:	bl	1174c <cplus_demangle_set_style@plt>
   12058:	b	11b7c <__assert_fail@plt+0xc4>
   1205c:	movw	r0, #34084	; 0x8524
   12060:	movt	r0, #1
   12064:	bl	139b0 <__assert_fail@plt+0x1ef8>
   12068:	b	11b7c <__assert_fail@plt+0xc4>
   1206c:	mov	r3, #1
   12070:	str	r3, [r4, #104]	; 0x68
   12074:	b	11b7c <__assert_fail@plt+0xc4>
   12078:	mov	r3, #0
   1207c:	mov	r2, #1
   12080:	str	r3, [r4, #80]	; 0x50
   12084:	str	r3, [r4, #88]	; 0x58
   12088:	str	r2, [r4, #84]	; 0x54
   1208c:	b	11b7c <__assert_fail@plt+0xc4>
   12090:	movw	r3, #37812	; 0x93b4
   12094:	movt	r3, #2
   12098:	mov	r1, #1
   1209c:	ldr	r0, [r3]
   120a0:	bl	123ec <__assert_fail@plt+0x934>
   120a4:	movw	r4, #38640	; 0x96f0
   120a8:	movt	r4, #2
   120ac:	ldr	r3, [r4, #188]	; 0xbc
   120b0:	cmp	r3, #0
   120b4:	bne	12138 <__assert_fail@plt+0x680>
   120b8:	ldr	r2, [r4, #84]	; 0x54
   120bc:	movw	r3, #38640	; 0x96f0
   120c0:	movt	r3, #2
   120c4:	cmp	r2, #0
   120c8:	beq	120d8 <__assert_fail@plt+0x620>
   120cc:	ldr	r3, [r3, #64]	; 0x40
   120d0:	cmp	r3, #0
   120d4:	bne	1215c <__assert_fail@plt+0x6a4>
   120d8:	movw	r5, #37808	; 0x93b0
   120dc:	movt	r5, #2
   120e0:	ldr	r3, [sp, #12]
   120e4:	ldr	r2, [r5]
   120e8:	cmp	r2, r3
   120ec:	bne	12194 <__assert_fail@plt+0x6dc>
   120f0:	movw	r0, #34340	; 0x8624
   120f4:	movt	r0, #1
   120f8:	bl	14190 <__assert_fail@plt+0x26d8>
   120fc:	rsbs	r0, r0, #1
   12100:	movcc	r0, #0
   12104:	add	sp, sp, #20
   12108:	pop	{r4, r5, r6, r7, pc}
   1210c:	movw	r2, #37260	; 0x918c
   12110:	movt	r2, #2
   12114:	mov	r1, #8
   12118:	str	r1, [r7, #96]	; 0x60
   1211c:	strb	r3, [r2, #68]	; 0x44
   12120:	ldrb	r3, [r5]
   12124:	strb	r3, [r2, #78]	; 0x4e
   12128:	ldrb	r3, [r5]
   1212c:	strb	r3, [r2, #83]	; 0x53
   12130:	strb	r3, [r2, #91]	; 0x5b
   12134:	b	11b7c <__assert_fail@plt+0xc4>
   12138:	movw	r0, #34212	; 0x85a4
   1213c:	movt	r0, #1
   12140:	bl	15404 <__assert_fail@plt+0x394c>
   12144:	b	120b8 <__assert_fail@plt+0x600>
   12148:	movw	r2, #37260	; 0x918c
   1214c:	mov	r1, #10
   12150:	movt	r2, #2
   12154:	str	r1, [r7, #96]	; 0x60
   12158:	b	1211c <__assert_fail@plt+0x664>
   1215c:	mov	r2, #5
   12160:	movw	r1, #34216	; 0x85a8
   12164:	mov	r0, #0
   12168:	movt	r1, #1
   1216c:	bl	11788 <dcgettext@plt>
   12170:	bl	14690 <__assert_fail@plt+0x2bd8>
   12174:	mov	r2, #5
   12178:	movw	r1, #34276	; 0x85e4
   1217c:	mov	r0, #0
   12180:	movt	r1, #1
   12184:	bl	11788 <dcgettext@plt>
   12188:	bl	14690 <__assert_fail@plt+0x2bd8>
   1218c:	mov	r0, #0
   12190:	b	12104 <__assert_fail@plt+0x64c>
   12194:	rsb	r2, r2, r3
   12198:	movw	r7, #37808	; 0x93b0
   1219c:	cmp	r2, #1
   121a0:	mov	r6, #0
   121a4:	movt	r7, #2
   121a8:	movgt	r2, #1
   121ac:	strgt	r2, [r4, #100]	; 0x64
   121b0:	b	121d4 <__assert_fail@plt+0x71c>
   121b4:	ldr	r3, [sp, #8]
   121b8:	add	r1, r2, #1
   121bc:	str	r1, [r7]
   121c0:	ldr	r0, [r3, r2, lsl #2]
   121c4:	bl	14190 <__assert_fail@plt+0x26d8>
   121c8:	ldr	r3, [sp, #12]
   121cc:	cmp	r0, #0
   121d0:	addeq	r6, r6, #1
   121d4:	ldr	r2, [r5]
   121d8:	cmp	r2, r3
   121dc:	blt	121b4 <__assert_fail@plt+0x6fc>
   121e0:	ldr	r3, [r4, #192]	; 0xc0
   121e4:	cmp	r3, #0
   121e8:	beq	1221c <__assert_fail@plt+0x764>
   121ec:	mov	r0, #0
   121f0:	bl	11a28 <sbrk@plt>
   121f4:	movw	r1, #34348	; 0x862c
   121f8:	mov	r2, #5
   121fc:	movt	r1, #1
   12200:	mov	r4, r0
   12204:	mov	r0, #0
   12208:	bl	11788 <dcgettext@plt>
   1220c:	movw	r1, #37792	; 0x93a0
   12210:	movt	r1, #2
   12214:	rsb	r1, r1, r4
   12218:	bl	14690 <__assert_fail@plt+0x2bd8>
   1221c:	mov	r0, r6
   12220:	bl	118e4 <exit@plt>
   12224:	movw	r1, #34088	; 0x8528
   12228:	mov	r2, #5
   1222c:	movt	r1, #1
   12230:	bl	11788 <dcgettext@plt>
   12234:	ldr	r1, [r5]
   12238:	bl	14658 <__assert_fail@plt+0x2ba0>
   1223c:	strdeq	r9, [r2], -r0
   12240:	mov	fp, #0
   12244:	mov	lr, #0
   12248:	pop	{r1}		; (ldr r1, [sp], #4)
   1224c:	mov	r2, sp
   12250:	push	{r2}		; (str r2, [sp, #-4]!)
   12254:	push	{r0}		; (str r0, [sp, #-4]!)
   12258:	ldr	ip, [pc, #16]	; 12270 <__assert_fail@plt+0x7b8>
   1225c:	push	{ip}		; (str ip, [sp, #-4]!)
   12260:	ldr	r0, [pc, #12]	; 12274 <__assert_fail@plt+0x7bc>
   12264:	ldr	r3, [pc, #12]	; 12278 <__assert_fail@plt+0x7c0>
   12268:	bl	1189c <__libc_start_main@plt>
   1226c:	bl	11a94 <abort@plt>
   12270:	andeq	r7, r1, r8, ror #17
   12274:	andeq	r1, r1, r4, asr #21
   12278:	andeq	r7, r1, r4, lsl #17
   1227c:	ldr	r3, [pc, #20]	; 12298 <__assert_fail@plt+0x7e0>
   12280:	ldr	r2, [pc, #20]	; 1229c <__assert_fail@plt+0x7e4>
   12284:	add	r3, pc, r3
   12288:	ldr	r2, [r3, r2]
   1228c:	cmp	r2, #0
   12290:	bxeq	lr
   12294:	b	118c0 <__gmon_start__@plt>
   12298:	andeq	r6, r1, r4, ror sp
   1229c:	andeq	r0, r0, ip, ror r1
   122a0:	push	{r3, lr}
   122a4:	movw	r0, #37792	; 0x93a0
   122a8:	ldr	r3, [pc, #36]	; 122d4 <__assert_fail@plt+0x81c>
   122ac:	movt	r0, #2
   122b0:	rsb	r3, r0, r3
   122b4:	cmp	r3, #6
   122b8:	popls	{r3, pc}
   122bc:	movw	r3, #0
   122c0:	movt	r3, #0
   122c4:	cmp	r3, #0
   122c8:	popeq	{r3, pc}
   122cc:	blx	r3
   122d0:	pop	{r3, pc}
   122d4:	andeq	r9, r2, r3, lsr #7
   122d8:	push	{r3, lr}
   122dc:	movw	r0, #37792	; 0x93a0
   122e0:	movw	r3, #37792	; 0x93a0
   122e4:	movt	r0, #2
   122e8:	movt	r3, #2
   122ec:	rsb	r3, r0, r3
   122f0:	asr	r3, r3, #2
   122f4:	add	r3, r3, r3, lsr #31
   122f8:	asrs	r1, r3, #1
   122fc:	popeq	{r3, pc}
   12300:	movw	r2, #0
   12304:	movt	r2, #0
   12308:	cmp	r2, #0
   1230c:	popeq	{r3, pc}
   12310:	blx	r2
   12314:	pop	{r3, pc}
   12318:	push	{r4, lr}
   1231c:	movw	r4, #38636	; 0x96ec
   12320:	movt	r4, #2
   12324:	ldrb	r3, [r4]
   12328:	cmp	r3, #0
   1232c:	popne	{r4, pc}
   12330:	bl	122a0 <__assert_fail@plt+0x7e8>
   12334:	mov	r3, #1
   12338:	strb	r3, [r4]
   1233c:	pop	{r4, pc}
   12340:	movw	r0, #36604	; 0x8efc
   12344:	movt	r0, #2
   12348:	push	{r3, lr}
   1234c:	ldr	r3, [r0]
   12350:	cmp	r3, #0
   12354:	beq	1236c <__assert_fail@plt+0x8b4>
   12358:	movw	r3, #0
   1235c:	movt	r3, #0
   12360:	cmp	r3, #0
   12364:	beq	1236c <__assert_fail@plt+0x8b4>
   12368:	blx	r3
   1236c:	pop	{r3, lr}
   12370:	b	122d8 <__assert_fail@plt+0x820>
   12374:	bx	lr
   12378:	bx	lr
   1237c:	movw	r3, #38640	; 0x96f0
   12380:	movt	r3, #2
   12384:	push	{r4, r5, r6, lr}
   12388:	mov	r5, r0
   1238c:	ldr	r3, [r3]
   12390:	mov	r4, r1
   12394:	cmp	r3, #0
   12398:	beq	123a8 <__assert_fail@plt+0x8f0>
   1239c:	ldrb	r3, [r1]
   123a0:	cmp	r3, #0
   123a4:	bne	123bc <__assert_fail@plt+0x904>
   123a8:	mov	r1, r5
   123ac:	mov	r2, r4
   123b0:	mov	r0, #1
   123b4:	pop	{r4, r5, r6, lr}
   123b8:	b	11950 <__printf_chk@plt>
   123bc:	mov	r0, r2
   123c0:	mov	r2, #3
   123c4:	bl	11998 <bfd_demangle@plt>
   123c8:	subs	r6, r0, #0
   123cc:	beq	123a8 <__assert_fail@plt+0x8f0>
   123d0:	mov	r1, r5
   123d4:	mov	r2, r6
   123d8:	mov	r0, #1
   123dc:	bl	11950 <__printf_chk@plt>
   123e0:	mov	r0, r6
   123e4:	pop	{r4, r5, r6, lr}
   123e8:	b	11734 <free@plt>
   123ec:	push	{r4, r5, r6, lr}
   123f0:	mov	r2, #5
   123f4:	mov	r4, r0
   123f8:	mov	r6, r1
   123fc:	mov	r0, #0
   12400:	movw	r1, #30988	; 0x790c
   12404:	movt	r1, #1
   12408:	movw	r5, #38848	; 0x97c0
   1240c:	bl	11788 <dcgettext@plt>
   12410:	movt	r5, #2
   12414:	mov	r1, #1
   12418:	ldr	r3, [r5]
   1241c:	mov	r2, r0
   12420:	mov	r0, r4
   12424:	bl	1195c <__fprintf_chk@plt>
   12428:	mov	r2, #5
   1242c:	movw	r1, #31024	; 0x7930
   12430:	mov	r0, #0
   12434:	movt	r1, #1
   12438:	bl	11788 <dcgettext@plt>
   1243c:	mov	r1, #1
   12440:	mov	r2, r0
   12444:	mov	r0, r4
   12448:	bl	1195c <__fprintf_chk@plt>
   1244c:	mov	r2, #5
   12450:	movw	r1, #31072	; 0x7960
   12454:	mov	r0, #0
   12458:	movt	r1, #1
   1245c:	bl	11788 <dcgettext@plt>
   12460:	mov	r1, #1
   12464:	mov	r2, r0
   12468:	mov	r0, r4
   1246c:	bl	1195c <__fprintf_chk@plt>
   12470:	mov	r2, #5
   12474:	movw	r1, #32344	; 0x7e58
   12478:	mov	r0, #0
   1247c:	movt	r1, #1
   12480:	bl	11788 <dcgettext@plt>
   12484:	mov	r1, #1
   12488:	mov	r2, r0
   1248c:	mov	r0, r4
   12490:	bl	1195c <__fprintf_chk@plt>
   12494:	mov	r2, #5
   12498:	movw	r1, #32396	; 0x7e8c
   1249c:	mov	r0, #0
   124a0:	movt	r1, #1
   124a4:	bl	11788 <dcgettext@plt>
   124a8:	mov	r1, #1
   124ac:	mov	r2, r0
   124b0:	mov	r0, r4
   124b4:	bl	1195c <__fprintf_chk@plt>
   124b8:	ldr	r0, [r5]
   124bc:	mov	r1, r4
   124c0:	bl	147bc <__assert_fail@plt+0x2d04>
   124c4:	cmp	r6, #0
   124c8:	beq	124d4 <__assert_fail@plt+0xa1c>
   124cc:	mov	r0, r6
   124d0:	bl	118e4 <exit@plt>
   124d4:	mov	r0, r6
   124d8:	mov	r2, #5
   124dc:	movw	r1, #33076	; 0x8134
   124e0:	movt	r1, #1
   124e4:	bl	11788 <dcgettext@plt>
   124e8:	movw	r3, #33096	; 0x8148
   124ec:	mov	r1, #1
   124f0:	movt	r3, #1
   124f4:	mov	r2, r0
   124f8:	mov	r0, r4
   124fc:	bl	1195c <__fprintf_chk@plt>
   12500:	b	124cc <__assert_fail@plt+0xa14>
   12504:	push	{r4, r5, r6, lr}
   12508:	movw	r4, #38640	; 0x96f0
   1250c:	movt	r4, #2
   12510:	mov	r2, r0
   12514:	mov	r6, r1
   12518:	ldmib	r4, {r0, r1, r3}
   1251c:	ldr	ip, [r0, #4]
   12520:	ldr	ip, [ip, #316]	; 0x13c
   12524:	blx	ip
   12528:	mov	r2, r6
   1252c:	ldr	r1, [r4, #8]
   12530:	ldr	r3, [r4, #16]
   12534:	mov	r5, r0
   12538:	ldr	r0, [r4, #4]
   1253c:	ldr	ip, [r0, #4]
   12540:	ldr	ip, [ip, #316]	; 0x13c
   12544:	blx	ip
   12548:	cmp	r5, #0
   1254c:	cmpne	r0, #0
   12550:	beq	125a4 <__assert_fail@plt+0xaec>
   12554:	ldr	r1, [r0, #4]
   12558:	ldr	r0, [r5, #4]
   1255c:	cmp	r1, #0
   12560:	beq	12590 <__assert_fail@plt+0xad8>
   12564:	cmp	r0, #0
   12568:	beq	1259c <__assert_fail@plt+0xae4>
   1256c:	ldrb	r3, [r1]
   12570:	cmp	r3, #0
   12574:	beq	1258c <__assert_fail@plt+0xad4>
   12578:	ldrb	r3, [r0]
   1257c:	cmp	r3, #0
   12580:	beq	1259c <__assert_fail@plt+0xae4>
   12584:	pop	{r4, r5, r6, lr}
   12588:	b	11860 <strcoll@plt>
   1258c:	ldrb	r0, [r0]
   12590:	adds	r0, r0, #0
   12594:	movne	r0, #1
   12598:	pop	{r4, r5, r6, pc}
   1259c:	mvn	r0, #0
   125a0:	pop	{r4, r5, r6, pc}
   125a4:	ldr	r3, [r4, #4]
   125a8:	ldr	r0, [r3]
   125ac:	bl	145e0 <__assert_fail@plt+0x2b28>
   125b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b4:	movw	r4, #38640	; 0x96f0
   125b8:	movt	r4, #2
   125bc:	mov	fp, r0
   125c0:	mov	sl, r1
   125c4:	mov	r2, fp
   125c8:	ldr	r0, [r4, #4]
   125cc:	ldr	r1, [r4, #8]
   125d0:	ldr	r3, [r4, #12]
   125d4:	ldr	ip, [r0, #4]
   125d8:	ldr	ip, [ip, #316]	; 0x13c
   125dc:	blx	ip
   125e0:	mov	r2, sl
   125e4:	ldr	r1, [r4, #8]
   125e8:	ldr	r3, [r4, #16]
   125ec:	mov	r5, r0
   125f0:	ldr	r0, [r4, #4]
   125f4:	ldr	ip, [r0, #4]
   125f8:	ldr	ip, [ip, #316]	; 0x13c
   125fc:	blx	ip
   12600:	cmp	r5, #0
   12604:	cmpne	r0, #0
   12608:	beq	12680 <__assert_fail@plt+0xbc8>
   1260c:	ldr	r3, [r5, #20]
   12610:	ldr	r2, [pc, #116]	; 1268c <__assert_fail@plt+0xbd4>
   12614:	ldr	r1, [r0, #20]
   12618:	cmp	r3, r2
   1261c:	beq	12660 <__assert_fail@plt+0xba8>
   12620:	cmp	r1, r2
   12624:	beq	12658 <__assert_fail@plt+0xba0>
   12628:	ldrd	r8, [r5, #8]
   1262c:	ldrd	r6, [r3, #32]
   12630:	ldrd	r4, [r0, #8]
   12634:	ldrd	r2, [r1, #32]
   12638:	adds	r6, r6, r8
   1263c:	adc	r7, r7, r9
   12640:	adds	r4, r4, r2
   12644:	adc	r5, r5, r3
   12648:	cmp	r7, r5
   1264c:	cmpeq	r6, r4
   12650:	beq	12670 <__assert_fail@plt+0xbb8>
   12654:	bcc	12668 <__assert_fail@plt+0xbb0>
   12658:	mov	r0, #1
   1265c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12660:	cmp	r1, r3
   12664:	beq	12670 <__assert_fail@plt+0xbb8>
   12668:	mvn	r0, #0
   1266c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12670:	mov	r0, fp
   12674:	mov	r1, sl
   12678:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1267c:	b	12504 <__assert_fail@plt+0xa4c>
   12680:	ldr	r3, [r4, #4]
   12684:	ldr	r0, [r3]
   12688:	bl	145e0 <__assert_fail@plt+0x2b28>
   1268c:	andeq	r9, r2, r8, lsl #9
   12690:	push	{r3, lr}
   12694:	bl	125b0 <__assert_fail@plt+0xaf8>
   12698:	rsb	r0, r0, #0
   1269c:	pop	{r3, pc}
   126a0:	push	{r3, lr}
   126a4:	bl	12504 <__assert_fail@plt+0xa4c>
   126a8:	rsb	r0, r0, #0
   126ac:	pop	{r3, pc}
   126b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126b4:	movw	r4, #38640	; 0x96f0
   126b8:	movt	r4, #2
   126bc:	mov	fp, r0
   126c0:	sub	sp, sp, #36	; 0x24
   126c4:	mov	sl, r1
   126c8:	ldr	r0, [r4, #4]
   126cc:	mov	r2, fp
   126d0:	ldr	r1, [r4, #8]
   126d4:	ldr	r3, [r4, #12]
   126d8:	ldr	ip, [r0, #4]
   126dc:	ldr	ip, [ip, #316]	; 0x13c
   126e0:	blx	ip
   126e4:	ldr	r3, [r4, #16]
   126e8:	mov	r2, sl
   126ec:	ldr	r1, [r4, #8]
   126f0:	mov	r9, r0
   126f4:	ldr	r0, [r4, #4]
   126f8:	ldr	lr, [r0, #4]
   126fc:	ldr	r5, [lr, #316]	; 0x13c
   12700:	blx	r5
   12704:	cmp	r9, #0
   12708:	cmpne	r0, #0
   1270c:	mov	r3, r0
   12710:	beq	128d8 <__assert_fail@plt+0xe20>
   12714:	ldr	r1, [r9, #20]
   12718:	ldr	r2, [pc, #452]	; 128e4 <__assert_fail@plt+0xe2c>
   1271c:	ldr	r4, [r0, #20]
   12720:	cmp	r1, r2
   12724:	beq	128d4 <__assert_fail@plt+0xe1c>
   12728:	cmp	r4, r2
   1272c:	beq	128d4 <__assert_fail@plt+0xe1c>
   12730:	ldrd	r6, [r1, #32]
   12734:	ldrd	r0, [r4, #32]
   12738:	ldrd	r4, [r3, #8]
   1273c:	strd	r0, [sp]
   12740:	ldrd	r0, [r9, #8]
   12744:	adds	r0, r0, r6
   12748:	adc	r1, r1, r7
   1274c:	strd	r0, [sp, #8]
   12750:	ldrd	r0, [sp]
   12754:	adds	r0, r0, r4
   12758:	adc	r1, r1, r5
   1275c:	ldrd	r4, [sp, #8]
   12760:	cmp	r5, r1
   12764:	cmpeq	r4, r0
   12768:	beq	1277c <__assert_fail@plt+0xcc4>
   1276c:	bcc	12874 <__assert_fail@plt+0xdbc>
   12770:	mov	r0, #1
   12774:	add	sp, sp, #36	; 0x24
   12778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1277c:	ldrd	r0, [sp]
   12780:	cmp	r7, r1
   12784:	cmpeq	r6, r0
   12788:	bne	1276c <__assert_fail@plt+0xcb4>
   1278c:	ldr	r5, [r9, #4]
   12790:	ldr	r4, [r3, #4]
   12794:	str	r3, [sp, #20]
   12798:	mov	r0, r5
   1279c:	bl	118fc <strlen@plt>
   127a0:	mov	r7, r0
   127a4:	mov	r0, r4
   127a8:	bl	118fc <strlen@plt>
   127ac:	movw	r1, #33136	; 0x8170
   127b0:	movt	r1, #1
   127b4:	mov	r8, r0
   127b8:	mov	r0, r5
   127bc:	bl	116a4 <strstr@plt>
   127c0:	ldr	r3, [sp, #20]
   127c4:	cmp	r0, #0
   127c8:	movne	r6, #1
   127cc:	beq	1289c <__assert_fail@plt+0xde4>
   127d0:	movw	r1, #33136	; 0x8170
   127d4:	mov	r0, r4
   127d8:	movt	r1, #1
   127dc:	str	r3, [sp, #20]
   127e0:	bl	116a4 <strstr@plt>
   127e4:	ldr	r3, [sp, #20]
   127e8:	cmp	r0, #0
   127ec:	beq	12850 <__assert_fail@plt+0xd98>
   127f0:	cmp	r6, #0
   127f4:	beq	12770 <__assert_fail@plt+0xcb8>
   127f8:	ldr	r2, [r9, #16]
   127fc:	ands	r2, r2, #16384	; 0x4000
   12800:	movne	r2, #1
   12804:	bne	12818 <__assert_fail@plt+0xd60>
   12808:	add	r5, r5, r7
   1280c:	ldrb	r1, [r5, #-2]
   12810:	cmp	r1, #46	; 0x2e
   12814:	beq	128bc <__assert_fail@plt+0xe04>
   12818:	ldr	r3, [r3, #16]
   1281c:	tst	r3, #16384	; 0x4000
   12820:	bne	12890 <__assert_fail@plt+0xdd8>
   12824:	add	r4, r4, r8
   12828:	ldrb	r3, [r4, #-2]
   1282c:	cmp	r3, #46	; 0x2e
   12830:	beq	12880 <__assert_fail@plt+0xdc8>
   12834:	tst	r2, #1
   12838:	bne	12874 <__assert_fail@plt+0xdbc>
   1283c:	mov	r0, fp
   12840:	mov	r1, sl
   12844:	add	sp, sp, #36	; 0x24
   12848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1284c:	b	12504 <__assert_fail@plt+0xa4c>
   12850:	movw	r1, #33152	; 0x8180
   12854:	mov	r0, r4
   12858:	movt	r1, #1
   1285c:	bl	116a4 <strstr@plt>
   12860:	ldr	r3, [sp, #20]
   12864:	cmp	r0, #0
   12868:	bne	127f0 <__assert_fail@plt+0xd38>
   1286c:	cmp	r6, #0
   12870:	beq	127f8 <__assert_fail@plt+0xd40>
   12874:	mvn	r0, #0
   12878:	add	sp, sp, #36	; 0x24
   1287c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12880:	ldrb	r3, [r4, #-1]
   12884:	cmp	r3, #111	; 0x6f
   12888:	cmpne	r3, #97	; 0x61
   1288c:	bne	12834 <__assert_fail@plt+0xd7c>
   12890:	tst	r2, #1
   12894:	beq	12770 <__assert_fail@plt+0xcb8>
   12898:	b	1283c <__assert_fail@plt+0xd84>
   1289c:	movw	r1, #33152	; 0x8180
   128a0:	mov	r0, r5
   128a4:	movt	r1, #1
   128a8:	bl	116a4 <strstr@plt>
   128ac:	ldr	r3, [sp, #20]
   128b0:	adds	r6, r0, #0
   128b4:	movne	r6, #1
   128b8:	b	127d0 <__assert_fail@plt+0xd18>
   128bc:	ldrb	r2, [r5, #-1]
   128c0:	cmp	r2, #111	; 0x6f
   128c4:	cmpne	r2, #97	; 0x61
   128c8:	movne	r2, #0
   128cc:	moveq	r2, #1
   128d0:	b	12818 <__assert_fail@plt+0xd60>
   128d4:	bl	11a94 <abort@plt>
   128d8:	ldr	r3, [r4, #4]
   128dc:	ldr	r0, [r3]
   128e0:	bl	145e0 <__assert_fail@plt+0x2b28>
   128e4:	andeq	r9, r2, r8, lsl #9
   128e8:	push	{r3, r4, r5, r6, r7, lr}
   128ec:	mov	r4, r2
   128f0:	ldr	r3, [r1, #20]
   128f4:	mov	r5, r1
   128f8:	ldr	r2, [r2]
   128fc:	mov	r6, r0
   12900:	ands	r3, r3, #4
   12904:	str	r1, [r2]
   12908:	bne	1293c <__assert_fail@plt+0xe84>
   1290c:	ldr	r2, [r4, #4]
   12910:	str	r3, [r2]
   12914:	ldr	r2, [r4, #8]
   12918:	str	r3, [r2]
   1291c:	ldr	r1, [r4]
   12920:	add	r2, r2, #4
   12924:	ldr	r3, [r4, #4]
   12928:	str	r2, [r4, #8]
   1292c:	add	r2, r1, #4
   12930:	add	r3, r3, #4
   12934:	stm	r4, {r2, r3}
   12938:	pop	{r3, r4, r5, r6, r7, pc}
   1293c:	bl	11a58 <bfd_get_reloc_upper_bound@plt>
   12940:	cmp	r0, #0
   12944:	blt	12984 <__assert_fail@plt+0xecc>
   12948:	ldr	r7, [r4, #4]
   1294c:	bl	11800 <xmalloc@plt>
   12950:	mov	r1, r5
   12954:	str	r0, [r7]
   12958:	mov	r0, r6
   1295c:	ldr	r2, [r4, #4]
   12960:	ldr	r3, [r4, #12]
   12964:	ldr	r5, [r4, #8]
   12968:	ldr	r2, [r2]
   1296c:	bl	11a1c <bfd_canonicalize_reloc@plt>
   12970:	ldr	r2, [r4, #8]
   12974:	str	r0, [r5]
   12978:	ldr	r3, [r2]
   1297c:	cmp	r3, #0
   12980:	bge	1291c <__assert_fail@plt+0xe64>
   12984:	ldr	r0, [r6]
   12988:	bl	145e0 <__assert_fail@plt+0x2b28>
   1298c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12990:	movw	r6, #37260	; 0x918c
   12994:	movt	r6, #2
   12998:	movw	r5, #37800	; 0x93a8
   1299c:	movt	r5, #2
   129a0:	sub	sp, sp, #124	; 0x7c
   129a4:	ldr	ip, [r6]
   129a8:	mov	fp, r0
   129ac:	ldr	lr, [r5]
   129b0:	mov	r4, r1
   129b4:	ldr	r0, [sp, #160]	; 0xa0
   129b8:	mov	r1, fp
   129bc:	ldr	r7, [ip, #12]
   129c0:	mov	r8, r2
   129c4:	mov	r9, r3
   129c8:	ldr	sl, [sp, #164]	; 0xa4
   129cc:	str	lr, [sp, #116]	; 0x74
   129d0:	blx	r7
   129d4:	ldr	r3, [fp, #4]
   129d8:	add	r7, sp, #64	; 0x40
   129dc:	mov	r0, fp
   129e0:	mov	r1, r4
   129e4:	mov	r2, r7
   129e8:	ldr	r3, [r3, #276]	; 0x114
   129ec:	blx	r3
   129f0:	cmp	sl, #0
   129f4:	strd	r8, [sp, #96]	; 0x60
   129f8:	str	r7, [sp, #88]	; 0x58
   129fc:	beq	12af0 <__assert_fail@plt+0x1038>
   12a00:	mov	r3, #0
   12a04:	str	r3, [sp, #104]	; 0x68
   12a08:	str	r3, [sp, #108]	; 0x6c
   12a0c:	ldr	r3, [r6]
   12a10:	movw	sl, #38640	; 0x96f0
   12a14:	movt	sl, #2
   12a18:	add	r0, sp, #88	; 0x58
   12a1c:	mov	r1, fp
   12a20:	ldr	r3, [r3, #16]
   12a24:	blx	r3
   12a28:	ldr	r3, [sl, #20]
   12a2c:	cmp	r3, #0
   12a30:	beq	12ac4 <__assert_fail@plt+0x100c>
   12a34:	ldr	r3, [sl, #24]
   12a38:	cmp	fp, r3
   12a3c:	beq	12b54 <__assert_fail@plt+0x109c>
   12a40:	ldr	r0, [sl, #28]
   12a44:	cmp	r0, #0
   12a48:	beq	12a58 <__assert_fail@plt+0xfa0>
   12a4c:	bl	11734 <free@plt>
   12a50:	mov	r3, #0
   12a54:	str	r3, [sl, #28]
   12a58:	ldr	r3, [fp, #4]
   12a5c:	mov	r0, fp
   12a60:	ldr	r3, [r3, #260]	; 0x104
   12a64:	blx	r3
   12a68:	cmp	r0, #0
   12a6c:	blt	12e74 <__assert_fail@plt+0x13bc>
   12a70:	bl	11800 <xmalloc@plt>
   12a74:	ldr	r2, [fp, #4]
   12a78:	movw	r6, #38640	; 0x96f0
   12a7c:	movt	r6, #2
   12a80:	mov	r3, r0
   12a84:	mov	r1, r0
   12a88:	str	r3, [sl, #28]
   12a8c:	mov	r0, fp
   12a90:	ldr	r3, [r2, #264]	; 0x108
   12a94:	blx	r3
   12a98:	cmp	r0, #0
   12a9c:	str	r0, [sl, #32]
   12aa0:	strge	fp, [r6, #24]
   12aa4:	blt	12e74 <__assert_fail@plt+0x13bc>
   12aa8:	ldr	r3, [r4, #20]
   12aac:	ldr	r2, [pc, #968]	; 12e7c <__assert_fail@plt+0x13c4>
   12ab0:	cmp	r3, r2
   12ab4:	beq	12b70 <__assert_fail@plt+0x10b8>
   12ab8:	ldr	r3, [r3, #180]	; 0xb4
   12abc:	cmp	r3, fp
   12ac0:	beq	12dbc <__assert_fail@plt+0x1304>
   12ac4:	movw	r3, #38624	; 0x96e0
   12ac8:	movt	r3, #2
   12acc:	mov	r0, #10
   12ad0:	ldr	r1, [r3]
   12ad4:	bl	117e8 <_IO_putc@plt>
   12ad8:	ldr	r2, [sp, #116]	; 0x74
   12adc:	ldr	r3, [r5]
   12ae0:	cmp	r2, r3
   12ae4:	bne	12e70 <__assert_fail@plt+0x13b8>
   12ae8:	add	sp, sp, #124	; 0x7c
   12aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12af0:	ldr	r2, [r4]
   12af4:	ldr	r3, [r2, #4]
   12af8:	ldr	r3, [r3, #4]
   12afc:	cmp	r3, #5
   12b00:	beq	12b38 <__assert_fail@plt+0x1080>
   12b04:	cmp	r3, #2
   12b08:	cmpne	r3, #4
   12b0c:	str	sl, [sp, #104]	; 0x68
   12b10:	movne	r3, #0
   12b14:	moveq	r3, #1
   12b18:	movne	r8, r3
   12b1c:	bne	12b30 <__assert_fail@plt+0x1078>
   12b20:	ldr	r8, [r2, #168]	; 0xa8
   12b24:	cmp	r8, #0
   12b28:	movne	r8, r4
   12b2c:	moveq	r8, #0
   12b30:	str	r8, [sp, #108]	; 0x6c
   12b34:	b	12a0c <__assert_fail@plt+0xf54>
   12b38:	ldr	r3, [r2, #168]	; 0xa8
   12b3c:	mov	r8, sl
   12b40:	cmp	r3, #0
   12b44:	movne	r3, r4
   12b48:	moveq	r3, #0
   12b4c:	str	r3, [sp, #104]	; 0x68
   12b50:	b	12b30 <__assert_fail@plt+0x1078>
   12b54:	ldr	r3, [sl, #28]
   12b58:	cmp	r3, #0
   12b5c:	beq	12a58 <__assert_fail@plt+0xfa0>
   12b60:	ldr	r3, [r4, #20]
   12b64:	ldr	r2, [pc, #784]	; 12e7c <__assert_fail@plt+0x13c4>
   12b68:	cmp	r3, r2
   12b6c:	bne	12ab8 <__assert_fail@plt+0x1000>
   12b70:	ldr	r2, [sl, #36]	; 0x24
   12b74:	movw	r3, #38640	; 0x96f0
   12b78:	movt	r3, #2
   12b7c:	cmp	fp, r2
   12b80:	beq	12e20 <__assert_fail@plt+0x1368>
   12b84:	ldr	r6, [r3, #40]	; 0x28
   12b88:	cmp	r6, #0
   12b8c:	beq	12be8 <__assert_fail@plt+0x1130>
   12b90:	ldr	r9, [r3, #44]	; 0x2c
   12b94:	cmp	r9, #0
   12b98:	subne	r7, r6, #4
   12b9c:	movne	r8, #0
   12ba0:	beq	12bc0 <__assert_fail@plt+0x1108>
   12ba4:	ldr	r0, [r7, #4]!
   12ba8:	cmp	r0, #0
   12bac:	beq	12bb4 <__assert_fail@plt+0x10fc>
   12bb0:	bl	11734 <free@plt>
   12bb4:	add	r8, r8, #1
   12bb8:	cmp	r8, r9
   12bbc:	bne	12ba4 <__assert_fail@plt+0x10ec>
   12bc0:	ldr	r0, [sl, #48]	; 0x30
   12bc4:	bl	11734 <free@plt>
   12bc8:	mov	r0, r6
   12bcc:	bl	11734 <free@plt>
   12bd0:	ldr	r0, [sl, #52]	; 0x34
   12bd4:	bl	11734 <free@plt>
   12bd8:	mov	r3, #0
   12bdc:	str	r3, [sl, #48]	; 0x30
   12be0:	str	r3, [sl, #40]	; 0x28
   12be4:	str	r3, [sl, #52]	; 0x34
   12be8:	ldr	r3, [fp, #108]	; 0x6c
   12bec:	lsl	r0, r3, #2
   12bf0:	str	r3, [sl, #44]	; 0x2c
   12bf4:	bl	11800 <xmalloc@plt>
   12bf8:	ldr	r3, [sl, #44]	; 0x2c
   12bfc:	str	r0, [sl, #48]	; 0x30
   12c00:	lsl	r0, r3, #2
   12c04:	bl	11800 <xmalloc@plt>
   12c08:	ldr	r3, [sl, #44]	; 0x2c
   12c0c:	str	r0, [sl, #40]	; 0x28
   12c10:	lsl	r0, r3, #2
   12c14:	bl	11800 <xmalloc@plt>
   12c18:	ldr	r6, [sl, #48]	; 0x30
   12c1c:	ldr	ip, [sl, #40]	; 0x28
   12c20:	movw	r1, #10472	; 0x28e8
   12c24:	ldr	lr, [sl, #28]
   12c28:	movt	r1, #1
   12c2c:	add	r2, sp, #48	; 0x30
   12c30:	str	r6, [sp, #48]	; 0x30
   12c34:	str	ip, [sp, #52]	; 0x34
   12c38:	str	lr, [sp, #60]	; 0x3c
   12c3c:	mov	r3, r0
   12c40:	mov	r0, fp
   12c44:	str	r3, [sl, #52]	; 0x34
   12c48:	str	r3, [sp, #56]	; 0x38
   12c4c:	bl	11a64 <bfd_map_over_sections@plt>
   12c50:	str	fp, [sl, #36]	; 0x24
   12c54:	ldr	r3, [sl, #44]	; 0x2c
   12c58:	ldr	r2, [r4, #4]
   12c5c:	cmp	r3, #0
   12c60:	str	r2, [sp, #28]
   12c64:	beq	12ac4 <__assert_fail@plt+0x100c>
   12c68:	movw	ip, #38640	; 0x96f0
   12c6c:	movt	ip, #2
   12c70:	str	fp, [sp, #32]
   12c74:	mov	r6, #0
   12c78:	mov	fp, ip
   12c7c:	str	r5, [sp, #36]	; 0x24
   12c80:	ldr	r3, [sl, #52]	; 0x34
   12c84:	lsl	r8, r6, #2
   12c88:	ldr	r3, [r3, r6, lsl #2]
   12c8c:	cmp	r3, #0
   12c90:	ldrle	r3, [fp, #44]	; 0x2c
   12c94:	ble	12d90 <__assert_fail@plt+0x12d8>
   12c98:	mov	r5, #0
   12c9c:	mov	r9, r6
   12ca0:	b	12cc0 <__assert_fail@plt+0x1208>
   12ca4:	ldr	r2, [sl, #52]	; 0x34
   12ca8:	add	r5, r5, #1
   12cac:	movw	r3, #38640	; 0x96f0
   12cb0:	movt	r3, #2
   12cb4:	ldr	r2, [r2, r8]
   12cb8:	cmp	r2, r5
   12cbc:	ble	12da4 <__assert_fail@plt+0x12ec>
   12cc0:	ldr	r3, [sl, #40]	; 0x28
   12cc4:	movw	r7, #38640	; 0x96f0
   12cc8:	movt	r7, #2
   12ccc:	ldr	r3, [r3, r8]
   12cd0:	ldr	r6, [r3, r5, lsl #2]
   12cd4:	ldr	r3, [r6]
   12cd8:	cmp	r3, #0
   12cdc:	beq	12ca4 <__assert_fail@plt+0x11ec>
   12ce0:	ldr	ip, [r3]
   12ce4:	ldr	r3, [r4, #20]
   12ce8:	ldr	r2, [ip, #20]
   12cec:	cmp	r2, r3
   12cf0:	bne	12ca4 <__assert_fail@plt+0x11ec>
   12cf4:	ldrd	r0, [ip, #8]
   12cf8:	ldrd	r2, [r4, #8]
   12cfc:	cmp	r1, r3
   12d00:	cmpeq	r0, r2
   12d04:	bne	12ca4 <__assert_fail@plt+0x11ec>
   12d08:	ldr	r1, [ip, #4]
   12d0c:	ldr	r0, [sp, #28]
   12d10:	bl	116d4 <strcmp@plt>
   12d14:	subs	ip, r0, #0
   12d18:	bne	12ca4 <__assert_fail@plt+0x11ec>
   12d1c:	ldr	r1, [fp, #48]	; 0x30
   12d20:	ldr	r0, [sp, #32]
   12d24:	ldrd	r2, [r6, #8]
   12d28:	ldr	r6, [r1, r8]
   12d2c:	ldr	lr, [r0, #4]
   12d30:	ldr	r1, [fp, #28]
   12d34:	strd	r2, [sp]
   12d38:	add	r3, sp, #40	; 0x28
   12d3c:	str	ip, [sp, #20]
   12d40:	mov	r2, r6
   12d44:	str	r3, [sp, #8]
   12d48:	add	r3, sp, #44	; 0x2c
   12d4c:	str	r3, [sp, #12]
   12d50:	add	r3, sp, #48	; 0x30
   12d54:	str	r3, [sp, #16]
   12d58:	ldr	r3, [lr, #296]	; 0x128
   12d5c:	blx	r3
   12d60:	cmp	r0, #0
   12d64:	beq	12ca4 <__assert_fail@plt+0x11ec>
   12d68:	ldr	r2, [sp, #40]	; 0x28
   12d6c:	cmp	r2, #0
   12d70:	beq	12ca4 <__assert_fail@plt+0x11ec>
   12d74:	ldr	r3, [sp, #48]	; 0x30
   12d78:	movw	r1, #33168	; 0x8190
   12d7c:	mov	r0, #1
   12d80:	movt	r1, #1
   12d84:	bl	11950 <__printf_chk@plt>
   12d88:	ldr	r6, [r7, #44]	; 0x2c
   12d8c:	mov	r3, r6
   12d90:	add	r6, r6, #1
   12d94:	cmp	r6, r3
   12d98:	bcc	12c80 <__assert_fail@plt+0x11c8>
   12d9c:	ldr	r5, [sp, #36]	; 0x24
   12da0:	b	12ac4 <__assert_fail@plt+0x100c>
   12da4:	ldr	r3, [r3, #44]	; 0x2c
   12da8:	mov	r6, r9
   12dac:	add	r6, r6, #1
   12db0:	cmp	r6, r3
   12db4:	bcc	12c80 <__assert_fail@plt+0x11c8>
   12db8:	b	12d9c <__assert_fail@plt+0x12e4>
   12dbc:	ldr	r2, [fp, #4]
   12dc0:	add	r7, sp, #40	; 0x28
   12dc4:	ldr	r1, [sl, #28]
   12dc8:	add	r6, sp, #48	; 0x30
   12dcc:	mov	r3, r7
   12dd0:	str	r6, [sp]
   12dd4:	mov	r0, fp
   12dd8:	ldr	ip, [r2, #300]	; 0x12c
   12ddc:	mov	r2, r4
   12de0:	blx	ip
   12de4:	movw	r2, #38640	; 0x96f0
   12de8:	movt	r2, #2
   12dec:	subs	r8, r0, #0
   12df0:	beq	12e30 <__assert_fail@plt+0x1378>
   12df4:	ldr	r2, [sp, #40]	; 0x28
   12df8:	cmp	r2, #0
   12dfc:	beq	12ac4 <__assert_fail@plt+0x100c>
   12e00:	ldr	r3, [sp, #48]	; 0x30
   12e04:	cmp	r3, #0
   12e08:	beq	12ac4 <__assert_fail@plt+0x100c>
   12e0c:	movw	r1, #33168	; 0x8190
   12e10:	mov	r0, #1
   12e14:	movt	r1, #1
   12e18:	bl	11950 <__printf_chk@plt>
   12e1c:	b	12ac4 <__assert_fail@plt+0x100c>
   12e20:	ldr	r3, [r3, #40]	; 0x28
   12e24:	cmp	r3, #0
   12e28:	bne	12c54 <__assert_fail@plt+0x119c>
   12e2c:	b	12be8 <__assert_fail@plt+0x1130>
   12e30:	ldr	r3, [fp, #4]
   12e34:	mov	r0, fp
   12e38:	ldrd	sl, [r4, #8]
   12e3c:	add	lr, sp, #44	; 0x2c
   12e40:	ldr	r1, [r2, #28]
   12e44:	ldr	r2, [r4, #20]
   12e48:	str	r7, [sp, #8]
   12e4c:	str	r6, [sp, #16]
   12e50:	strd	sl, [sp]
   12e54:	str	r8, [sp, #20]
   12e58:	str	lr, [sp, #12]
   12e5c:	ldr	r3, [r3, #296]	; 0x128
   12e60:	blx	r3
   12e64:	cmp	r0, #0
   12e68:	bne	12df4 <__assert_fail@plt+0x133c>
   12e6c:	b	12ac4 <__assert_fail@plt+0x100c>
   12e70:	bl	117a0 <__stack_chk_fail@plt>
   12e74:	ldr	r0, [fp]
   12e78:	bl	145e0 <__assert_fail@plt+0x2b28>
   12e7c:	andeq	r9, r2, r8, lsl #9
   12e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e84:	movw	r6, #38640	; 0x96f0
   12e88:	movt	r6, #2
   12e8c:	sub	sp, sp, #60	; 0x3c
   12e90:	movw	r2, #37800	; 0x93a8
   12e94:	movt	r2, #2
   12e98:	ldr	r3, [r6, #56]	; 0x38
   12e9c:	mov	r4, r0
   12ea0:	str	r2, [sp, #24]
   12ea4:	ldr	r2, [r2]
   12ea8:	cmp	r3, #0
   12eac:	str	r1, [sp, #32]
   12eb0:	str	r2, [sp, #52]	; 0x34
   12eb4:	bne	12ec8 <__assert_fail@plt+0x1410>
   12eb8:	ldr	r0, [r0, #40]	; 0x28
   12ebc:	ubfx	r0, r0, #5, #20
   12ec0:	ands	r0, r0, #16
   12ec4:	beq	131bc <__assert_fail@plt+0x1704>
   12ec8:	ldr	ip, [r4, #4]
   12ecc:	mov	r1, r3
   12ed0:	mov	r0, r4
   12ed4:	add	r2, sp, #40	; 0x28
   12ed8:	add	r3, sp, #44	; 0x2c
   12edc:	ldr	ip, [ip, #312]	; 0x138
   12ee0:	blx	ip
   12ee4:	subs	sl, r0, #0
   12ee8:	blt	1320c <__assert_fail@plt+0x1754>
   12eec:	beq	131bc <__assert_fail@plt+0x1704>
   12ef0:	ldr	r8, [r6, #60]	; 0x3c
   12ef4:	movw	r3, #38640	; 0x96f0
   12ef8:	movt	r3, #2
   12efc:	cmp	r8, #0
   12f00:	beq	132d0 <__assert_fail@plt+0x1818>
   12f04:	ldr	r7, [sp, #44]	; 0x2c
   12f08:	cmp	r7, #4
   12f0c:	beq	13368 <__assert_fail@plt+0x18b0>
   12f10:	ldr	lr, [sp, #40]	; 0x28
   12f14:	mov	r0, #0
   12f18:	str	r0, [sp, #36]	; 0x24
   12f1c:	str	lr, [sp, #28]
   12f20:	ldr	r3, [r4, #4]
   12f24:	mov	r0, r4
   12f28:	ldr	r1, [r6, #56]	; 0x38
   12f2c:	ldr	r3, [r3, #268]	; 0x10c
   12f30:	str	r1, [sp, #16]
   12f34:	blx	r3
   12f38:	cmp	r0, #0
   12f3c:	str	r0, [sp, #20]
   12f40:	beq	1363c <__assert_fail@plt+0x1b84>
   12f44:	ldr	r2, [sp, #28]
   12f48:	mla	sl, r7, sl, r2
   12f4c:	cmp	sl, r2
   12f50:	str	sl, [sp, #12]
   12f54:	bls	13604 <__assert_fail@plt+0x1b4c>
   12f58:	movw	fp, #38640	; 0x96f0
   12f5c:	ldr	r9, [pc, #1776]	; 13654 <__assert_fail@plt+0x1b9c>
   12f60:	movt	fp, #2
   12f64:	mov	r8, r2
   12f68:	mov	r5, r2
   12f6c:	b	12f8c <__assert_fail@plt+0x14d4>
   12f70:	ldr	r2, [sl, #20]
   12f74:	cmp	r2, r9
   12f78:	beq	13010 <__assert_fail@plt+0x1558>
   12f7c:	ldr	lr, [sp, #12]
   12f80:	add	r5, r5, r7
   12f84:	cmp	lr, r5
   12f88:	bls	130b8 <__assert_fail@plt+0x1600>
   12f8c:	ldr	ip, [r4, #4]
   12f90:	mov	r0, r4
   12f94:	ldr	r1, [sp, #16]
   12f98:	mov	r2, r5
   12f9c:	ldr	r3, [sp, #20]
   12fa0:	ldr	ip, [ip, #316]	; 0x13c
   12fa4:	blx	ip
   12fa8:	subs	sl, r0, #0
   12fac:	beq	1363c <__assert_fail@plt+0x1b84>
   12fb0:	movw	r1, #33192	; 0x81a8
   12fb4:	ldr	r0, [sl, #4]
   12fb8:	movt	r1, #1
   12fbc:	bl	116d4 <strcmp@plt>
   12fc0:	cmp	r0, #0
   12fc4:	beq	131f0 <__assert_fail@plt+0x1738>
   12fc8:	ldr	r2, [r6, #64]	; 0x40
   12fcc:	cmp	r2, #0
   12fd0:	bne	12f70 <__assert_fail@plt+0x14b8>
   12fd4:	ldr	r2, [fp, #68]	; 0x44
   12fd8:	cmp	r2, #0
   12fdc:	beq	13010 <__assert_fail@plt+0x1558>
   12fe0:	ldr	r1, [sl, #16]
   12fe4:	mov	r2, #130	; 0x82
   12fe8:	movt	r2, #128	; 0x80
   12fec:	and	r2, r1, r2
   12ff0:	cmp	r2, #0
   12ff4:	bne	13010 <__assert_fail@plt+0x1558>
   12ff8:	ldr	r2, [sl, #20]
   12ffc:	cmp	r2, r9
   13000:	beq	13010 <__assert_fail@plt+0x1558>
   13004:	ldr	r2, [r2, #20]
   13008:	tst	r2, #4096	; 0x1000
   1300c:	beq	12f7c <__assert_fail@plt+0x14c4>
   13010:	ldr	r2, [r6, #72]	; 0x48
   13014:	cmp	r2, #0
   13018:	bne	13028 <__assert_fail@plt+0x1570>
   1301c:	ldr	r2, [sl, #16]
   13020:	tst	r2, #4
   13024:	bne	12f7c <__assert_fail@plt+0x14c4>
   13028:	ldr	r2, [r6, #84]	; 0x54
   1302c:	cmp	r2, #0
   13030:	beq	1304c <__assert_fail@plt+0x1594>
   13034:	ldr	r2, [sl, #20]
   13038:	ldr	r3, [pc, #1560]	; 13658 <__assert_fail@plt+0x1ba0>
   1303c:	cmp	r2, r3
   13040:	beq	12f7c <__assert_fail@plt+0x14c4>
   13044:	cmp	r2, r9
   13048:	beq	12f7c <__assert_fail@plt+0x14c4>
   1304c:	ldr	r2, [r6, #96]	; 0x60
   13050:	cmp	r2, #0
   13054:	beq	13064 <__assert_fail@plt+0x15ac>
   13058:	ldr	r2, [sl, #20]
   1305c:	cmp	r2, r9
   13060:	beq	12f7c <__assert_fail@plt+0x14c4>
   13064:	ldr	r2, [r4, #4]
   13068:	mov	r1, sl
   1306c:	mov	r0, r4
   13070:	ldr	r3, [r2, #288]	; 0x120
   13074:	blx	r3
   13078:	cmp	r0, #0
   1307c:	beq	1308c <__assert_fail@plt+0x15d4>
   13080:	ldr	r3, [r6, #76]	; 0x4c
   13084:	cmp	r3, #0
   13088:	beq	12f7c <__assert_fail@plt+0x14c4>
   1308c:	cmp	r5, r8
   13090:	beq	130a4 <__assert_fail@plt+0x15ec>
   13094:	mov	r0, r8
   13098:	mov	r1, r5
   1309c:	mov	r2, r7
   130a0:	bl	11758 <memcpy@plt>
   130a4:	ldr	lr, [sp, #12]
   130a8:	add	r5, r5, r7
   130ac:	add	r8, r8, r7
   130b0:	cmp	lr, r5
   130b4:	bhi	12f8c <__assert_fail@plt+0x14d4>
   130b8:	ldr	r1, [sp, #28]
   130bc:	rsb	r0, r1, r8
   130c0:	mov	r1, r7
   130c4:	movw	r9, #38640	; 0x96f0
   130c8:	bl	15fa0 <__assert_fail@plt+0x44e8>
   130cc:	ldr	r5, [r6, #80]	; 0x50
   130d0:	movt	r9, #2
   130d4:	cmp	r5, #0
   130d8:	movne	r1, #0
   130dc:	mov	r8, r0
   130e0:	strne	r1, [sp, #12]
   130e4:	beq	132e4 <__assert_fail@plt+0x182c>
   130e8:	ldr	r2, [r6, #84]	; 0x54
   130ec:	movw	r3, #38640	; 0x96f0
   130f0:	mov	r0, r4
   130f4:	movt	r3, #2
   130f8:	cmp	r2, #0
   130fc:	ldr	r2, [r4, #4]
   13100:	bne	13244 <__assert_fail@plt+0x178c>
   13104:	ldr	r9, [r3, #56]	; 0x38
   13108:	ldr	r3, [r2, #268]	; 0x10c
   1310c:	ldr	r5, [sp, #40]	; 0x28
   13110:	ldr	r6, [sp, #44]	; 0x2c
   13114:	blx	r3
   13118:	subs	sl, r0, #0
   1311c:	beq	1363c <__assert_fail@plt+0x1b84>
   13120:	mla	r7, r6, r8, r5
   13124:	ldr	r2, [sp, #36]	; 0x24
   13128:	rsb	r8, r2, r8
   1312c:	cmp	r5, r7
   13130:	mla	r8, r6, r8, r5
   13134:	ldrcc	fp, [sp, #32]
   13138:	bcs	13190 <__assert_fail@plt+0x16d8>
   1313c:	ldr	ip, [r4, #4]
   13140:	mov	r1, r9
   13144:	mov	r0, r4
   13148:	mov	r2, r5
   1314c:	mov	r3, sl
   13150:	ldr	ip, [ip, #316]	; 0x13c
   13154:	blx	ip
   13158:	subs	r1, r0, #0
   1315c:	beq	1363c <__assert_fail@plt+0x1b84>
   13160:	cmp	r8, r5
   13164:	str	fp, [sp]
   13168:	mov	r0, r4
   1316c:	add	r5, r5, r6
   13170:	movhi	r3, #0
   13174:	movls	r3, #1
   13178:	mov	r2, #0
   1317c:	str	r3, [sp, #4]
   13180:	mov	r3, #0
   13184:	bl	1298c <__assert_fail@plt+0xed4>
   13188:	cmp	r7, r5
   1318c:	bhi	1313c <__assert_fail@plt+0x1684>
   13190:	ldr	r0, [sp, #40]	; 0x28
   13194:	bl	11734 <free@plt>
   13198:	ldr	r0, [sp, #24]
   1319c:	ldr	r2, [sp, #52]	; 0x34
   131a0:	ldr	r3, [r0]
   131a4:	cmp	r2, r3
   131a8:	bne	13650 <__assert_fail@plt+0x1b98>
   131ac:	ldr	r0, [sp, #12]
   131b0:	add	sp, sp, #60	; 0x3c
   131b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b8:	b	11734 <free@plt>
   131bc:	movw	r1, #33176	; 0x8198
   131c0:	mov	r2, #5
   131c4:	movt	r1, #1
   131c8:	bl	11788 <dcgettext@plt>
   131cc:	ldr	r1, [r4]
   131d0:	bl	14690 <__assert_fail@plt+0x2bd8>
   131d4:	ldr	r0, [sp, #24]
   131d8:	ldr	r2, [sp, #52]	; 0x34
   131dc:	ldr	r3, [r0]
   131e0:	cmp	r2, r3
   131e4:	bne	13650 <__assert_fail@plt+0x1b98>
   131e8:	add	sp, sp, #60	; 0x3c
   131ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f0:	mov	r2, #5
   131f4:	movw	r1, #33208	; 0x81b8
   131f8:	movt	r1, #1
   131fc:	bl	11788 <dcgettext@plt>
   13200:	ldr	r1, [r4]
   13204:	bl	14690 <__assert_fail@plt+0x2bd8>
   13208:	b	12fc8 <__assert_fail@plt+0x1510>
   1320c:	ldr	r3, [r6, #56]	; 0x38
   13210:	cmp	r3, #0
   13214:	beq	1363c <__assert_fail@plt+0x1b84>
   13218:	bl	117dc <bfd_get_error@plt>
   1321c:	cmp	r0, #7
   13220:	bne	1363c <__assert_fail@plt+0x1b84>
   13224:	mov	r2, #5
   13228:	movw	r1, #33176	; 0x8198
   1322c:	mov	r0, #0
   13230:	movt	r1, #1
   13234:	bl	11788 <dcgettext@plt>
   13238:	ldr	r1, [r4]
   1323c:	bl	14690 <__assert_fail@plt+0x2bd8>
   13240:	b	131d4 <__assert_fail@plt+0x171c>
   13244:	ldr	r7, [r3, #56]	; 0x38
   13248:	ldr	r3, [r2, #268]	; 0x10c
   1324c:	blx	r3
   13250:	subs	r9, r0, #0
   13254:	beq	1363c <__assert_fail@plt+0x1b84>
   13258:	ldr	r1, [sp, #12]
   1325c:	ldr	r2, [sp, #36]	; 0x24
   13260:	add	r6, r1, r8, lsl #4
   13264:	cmp	r1, r6
   13268:	rsb	r8, r2, r8
   1326c:	add	r8, r1, r8, lsl #4
   13270:	bcs	13190 <__assert_fail@plt+0x16d8>
   13274:	ldr	sl, [sp, #32]
   13278:	mov	r5, r1
   1327c:	ldr	ip, [r4, #4]
   13280:	mov	r1, r7
   13284:	mov	r0, r4
   13288:	ldr	r2, [r5]
   1328c:	mov	r3, r9
   13290:	ldr	ip, [ip, #316]	; 0x13c
   13294:	blx	ip
   13298:	subs	r1, r0, #0
   1329c:	beq	1363c <__assert_fail@plt+0x1b84>
   132a0:	cmp	r8, r5
   132a4:	ldrd	r2, [r5, #8]
   132a8:	str	sl, [sp]
   132ac:	add	r5, r5, #16
   132b0:	movhi	r0, #0
   132b4:	movls	r0, #1
   132b8:	str	r0, [sp, #4]
   132bc:	mov	r0, r4
   132c0:	bl	1298c <__assert_fail@plt+0xed4>
   132c4:	cmp	r6, r5
   132c8:	bhi	1327c <__assert_fail@plt+0x17c4>
   132cc:	b	13190 <__assert_fail@plt+0x16d8>
   132d0:	ldr	r3, [sp, #40]	; 0x28
   132d4:	str	r8, [sp, #36]	; 0x24
   132d8:	ldr	r7, [sp, #44]	; 0x2c
   132dc:	str	r3, [sp, #28]
   132e0:	b	12f20 <__assert_fail@plt+0x1468>
   132e4:	ldr	r3, [r4, #4]
   132e8:	mov	r0, r4
   132ec:	ldr	r2, [r9, #56]	; 0x38
   132f0:	str	r4, [r9, #4]
   132f4:	ldr	r3, [r3, #268]	; 0x10c
   132f8:	str	r2, [r9, #8]
   132fc:	blx	r3
   13300:	ldr	r3, [r4, #4]
   13304:	ldr	r3, [r3, #268]	; 0x10c
   13308:	str	r0, [r9, #12]
   1330c:	mov	r0, r4
   13310:	blx	r3
   13314:	ldr	r3, [r9, #12]
   13318:	cmp	r3, #0
   1331c:	str	r0, [r9, #16]
   13320:	beq	1363c <__assert_fail@plt+0x1b84>
   13324:	cmp	r0, #0
   13328:	beq	1363c <__assert_fail@plt+0x1b84>
   1332c:	ldr	r3, [r9, #84]	; 0x54
   13330:	cmp	r3, #0
   13334:	bne	13414 <__assert_fail@plt+0x195c>
   13338:	ldr	lr, [r9, #88]	; 0x58
   1333c:	movw	ip, #30972	; 0x78fc
   13340:	ldr	r2, [r9, #92]	; 0x5c
   13344:	movt	ip, #1
   13348:	str	r3, [sp, #12]
   1334c:	mov	r1, r8
   13350:	add	lr, r2, lr, lsl #1
   13354:	ldr	r0, [sp, #40]	; 0x28
   13358:	ldr	r2, [sp, #44]	; 0x2c
   1335c:	ldr	r3, [ip, lr, lsl #2]
   13360:	bl	11a10 <qsort@plt>
   13364:	b	130e8 <__assert_fail@plt+0x1630>
   13368:	ldr	r5, [r3, #56]	; 0x38
   1336c:	cmp	r5, #0
   13370:	beq	135d8 <__assert_fail@plt+0x1b20>
   13374:	ldr	r7, [sp, #40]	; 0x28
   13378:	mov	r1, #0
   1337c:	mov	r2, r1
   13380:	mov	r3, sl
   13384:	ldr	ip, [r4, #4]
   13388:	add	lr, sp, #48	; 0x30
   1338c:	str	r7, [sp]
   13390:	mov	r0, r4
   13394:	str	lr, [sp, #4]
   13398:	ldr	ip, [ip, #420]	; 0x1a4
   1339c:	blx	ip
   133a0:	cmp	r0, #0
   133a4:	str	r0, [sp, #36]	; 0x24
   133a8:	ble	13488 <__assert_fail@plt+0x19d0>
   133ac:	ldr	r1, [sp, #36]	; 0x24
   133b0:	add	r5, sl, r1
   133b4:	lsl	sl, sl, #2
   133b8:	add	r0, r5, #1
   133bc:	lsl	r0, r0, #2
   133c0:	bl	11800 <xmalloc@plt>
   133c4:	mov	r2, sl
   133c8:	ldr	r1, [sp, #40]	; 0x28
   133cc:	bl	11758 <memcpy@plt>
   133d0:	ldr	lr, [sp, #36]	; 0x24
   133d4:	ldr	r2, [sp, #48]	; 0x30
   133d8:	add	r3, r0, sl
   133dc:	mov	ip, r0
   133e0:	add	r1, r3, lr, lsl #2
   133e4:	str	r2, [r3], #4
   133e8:	cmp	r3, r1
   133ec:	add	r2, r2, #32
   133f0:	bne	133e4 <__assert_fail@plt+0x192c>
   133f4:	mov	sl, r5
   133f8:	mov	r8, ip
   133fc:	str	ip, [sp, #40]	; 0x28
   13400:	mov	r2, #0
   13404:	str	r2, [r3]
   13408:	ldr	r7, [sp, #44]	; 0x2c
   1340c:	str	r8, [sp, #28]
   13410:	b	12f20 <__assert_fail@plt+0x1468>
   13414:	ldr	r7, [sp, #40]	; 0x28
   13418:	mov	r1, r8
   1341c:	ldr	r2, [sp, #44]	; 0x2c
   13420:	movw	r3, #9904	; 0x26b0
   13424:	ldr	lr, [r9, #56]	; 0x38
   13428:	movt	r3, #1
   1342c:	mov	r0, r7
   13430:	mla	ip, r2, r8, r7
   13434:	str	r2, [sp, #16]
   13438:	str	lr, [sp, #20]
   1343c:	str	ip, [sp, #8]
   13440:	bl	11a10 <qsort@plt>
   13444:	lsl	r0, r8, #4
   13448:	bl	11800 <xmalloc@plt>
   1344c:	ldr	ip, [sp, #8]
   13450:	ldr	fp, [r9, #16]
   13454:	cmp	r7, ip
   13458:	movcs	r1, r5
   1345c:	str	r0, [sp, #12]
   13460:	movcs	r8, r1
   13464:	ldr	r0, [r9, #12]
   13468:	str	r0, [sp, #28]
   1346c:	bcc	13490 <__assert_fail@plt+0x19d8>
   13470:	movw	r3, #13916	; 0x365c
   13474:	ldr	r0, [sp, #12]
   13478:	movt	r3, #1
   1347c:	mov	r2, #16
   13480:	bl	11a10 <qsort@plt>
   13484:	b	130e8 <__assert_fail@plt+0x1630>
   13488:	ldr	r8, [sp, #40]	; 0x28
   1348c:	b	13408 <__assert_fail@plt+0x1950>
   13490:	ldr	lr, [r4, #4]
   13494:	mov	r0, r4
   13498:	ldr	r1, [sp, #20]
   1349c:	mov	r2, r7
   134a0:	ldr	r3, [sp, #28]
   134a4:	ldr	r5, [lr, #316]	; 0x13c
   134a8:	blx	r5
   134ac:	ldr	ip, [sp, #8]
   134b0:	subs	sl, r0, #0
   134b4:	beq	1363c <__assert_fail@plt+0x1b84>
   134b8:	ldr	r1, [r4, #4]
   134bc:	mov	r8, ip
   134c0:	ldr	r9, [sp, #12]
   134c4:	ldr	ip, [sp, #16]
   134c8:	str	r4, [sp, #16]
   134cc:	mov	r4, sl
   134d0:	ldr	sl, [sp, #28]
   134d4:	str	r6, [sp, #28]
   134d8:	b	1350c <__assert_fail@plt+0x1a54>
   134dc:	ldrd	r2, [r4, #8]
   134e0:	orrs	lr, r2, r3
   134e4:	strne	r7, [r9]
   134e8:	strdne	r2, [r9, #8]
   134ec:	addne	r9, r9, #16
   134f0:	cmp	r8, r6
   134f4:	bls	135a8 <__assert_fail@plt+0x1af0>
   134f8:	mov	r3, fp
   134fc:	mov	r4, r0
   13500:	mov	fp, sl
   13504:	mov	r7, r6
   13508:	mov	sl, r3
   1350c:	add	r6, r7, ip
   13510:	cmp	r8, r6
   13514:	movls	r0, #0
   13518:	bhi	13560 <__assert_fail@plt+0x1aa8>
   1351c:	ldr	r2, [r1, #4]
   13520:	ldr	r3, [r4, #20]
   13524:	cmp	r2, #5
   13528:	beq	135a0 <__assert_fail@plt+0x1ae8>
   1352c:	ldr	r2, [r3, #20]
   13530:	tst	r2, #4096	; 0x1000
   13534:	bne	134dc <__assert_fail@plt+0x1a24>
   13538:	cmp	r8, r6
   1353c:	bls	1354c <__assert_fail@plt+0x1a94>
   13540:	ldr	r2, [r0, #20]
   13544:	cmp	r3, r2
   13548:	beq	135c4 <__assert_fail@plt+0x1b0c>
   1354c:	ldrd	r2, [r3, #48]	; 0x30
   13550:	ldrd	r4, [r4, #8]
   13554:	subs	r2, r2, r4
   13558:	sbc	r3, r3, r5
   1355c:	b	134e0 <__assert_fail@plt+0x1a28>
   13560:	ldr	r5, [r1, #316]	; 0x13c
   13564:	mov	r2, r6
   13568:	str	ip, [sp, #8]
   1356c:	mov	r3, fp
   13570:	ldr	r0, [sp, #16]
   13574:	ldr	r1, [sp, #20]
   13578:	blx	r5
   1357c:	ldr	ip, [sp, #8]
   13580:	cmp	r0, #0
   13584:	beq	13644 <__assert_fail@plt+0x1b8c>
   13588:	ldr	r2, [sp, #16]
   1358c:	ldr	r3, [r4, #20]
   13590:	ldr	r1, [r2, #4]
   13594:	ldr	r2, [r1, #4]
   13598:	cmp	r2, #5
   1359c:	bne	1352c <__assert_fail@plt+0x1a74>
   135a0:	ldrd	r2, [r4, #40]	; 0x28
   135a4:	b	134e0 <__assert_fail@plt+0x1a28>
   135a8:	ldr	r0, [sp, #12]
   135ac:	ldr	r4, [sp, #16]
   135b0:	rsb	r1, r0, r9
   135b4:	ldr	r6, [sp, #28]
   135b8:	asr	r1, r1, #4
   135bc:	mov	r8, r1
   135c0:	b	13470 <__assert_fail@plt+0x19b8>
   135c4:	ldrd	r2, [r0, #8]
   135c8:	ldrd	r4, [r4, #8]
   135cc:	subs	r2, r2, r4
   135d0:	sbc	r3, r3, r5
   135d4:	b	134e0 <__assert_fail@plt+0x1a28>
   135d8:	ldr	r3, [r4, #4]
   135dc:	mov	r0, r4
   135e0:	ldr	r3, [r3, #412]	; 0x19c
   135e4:	blx	r3
   135e8:	ldr	r2, [sp, #40]	; 0x28
   135ec:	cmp	r0, #0
   135f0:	bgt	1360c <__assert_fail@plt+0x1b54>
   135f4:	mov	r3, r5
   135f8:	mov	r1, sl
   135fc:	mov	r7, r5
   13600:	b	13384 <__assert_fail@plt+0x18cc>
   13604:	mov	r0, #0
   13608:	b	130c0 <__assert_fail@plt+0x1608>
   1360c:	str	r2, [sp, #8]
   13610:	bl	11800 <xmalloc@plt>
   13614:	ldr	r3, [r4, #4]
   13618:	ldr	r3, [r3, #416]	; 0x1a0
   1361c:	mov	r1, r0
   13620:	mov	r7, r0
   13624:	mov	r0, r4
   13628:	blx	r3
   1362c:	ldr	r2, [sp, #8]
   13630:	subs	r3, r0, #0
   13634:	movge	r1, sl
   13638:	bge	13384 <__assert_fail@plt+0x18cc>
   1363c:	ldr	r0, [r4]
   13640:	bl	145e0 <__assert_fail@plt+0x2b28>
   13644:	ldr	r4, [sp, #16]
   13648:	ldr	r0, [r4]
   1364c:	bl	145e0 <__assert_fail@plt+0x2b28>
   13650:	bl	117a0 <__stack_chk_fail@plt>
   13654:	andeq	r9, r2, r8, lsl #9
   13658:	andeq	r9, r2, r0, asr r5
   1365c:	push	{r3, r4, r5, lr}
   13660:	ldrd	r4, [r0, #8]
   13664:	ldrd	r2, [r1, #8]
   13668:	cmp	r5, r3
   1366c:	cmpeq	r4, r2
   13670:	bcs	13690 <__assert_fail@plt+0x1bd8>
   13674:	movw	r3, #38640	; 0x96f0
   13678:	movt	r3, #2
   1367c:	ldr	r3, [r3, #92]	; 0x5c
   13680:	cmp	r3, #0
   13684:	mvneq	r0, #0
   13688:	movne	r0, #1
   1368c:	pop	{r3, r4, r5, pc}
   13690:	bls	136b0 <__assert_fail@plt+0x1bf8>
   13694:	movw	r3, #38640	; 0x96f0
   13698:	movt	r3, #2
   1369c:	ldr	r3, [r3, #92]	; 0x5c
   136a0:	cmp	r3, #0
   136a4:	moveq	r0, #1
   136a8:	mvnne	r0, #0
   136ac:	pop	{r3, r4, r5, pc}
   136b0:	movw	r2, #38640	; 0x96f0
   136b4:	movt	r2, #2
   136b8:	movw	r3, #30972	; 0x78fc
   136bc:	movt	r3, #1
   136c0:	ldr	r2, [r2, #92]	; 0x5c
   136c4:	ldr	r1, [r1]
   136c8:	ldr	r0, [r0]
   136cc:	ldr	r3, [r3, r2, lsl #2]
   136d0:	blx	r3
   136d4:	pop	{r3, r4, r5, pc}
   136d8:	movw	r3, #38640	; 0x96f0
   136dc:	movt	r3, #2
   136e0:	ldr	r1, [r3, #100]	; 0x64
   136e4:	cmp	r1, #0
   136e8:	bxeq	lr
   136ec:	ldr	r3, [r3, #104]	; 0x68
   136f0:	cmp	r3, #0
   136f4:	bxne	lr
   136f8:	mov	r2, r0
   136fc:	movw	r1, #33248	; 0x81e0
   13700:	mov	r0, #1
   13704:	movt	r1, #1
   13708:	b	11950 <__printf_chk@plt>
   1370c:	movw	r3, #38640	; 0x96f0
   13710:	movt	r3, #2
   13714:	ldr	r1, [r3, #100]	; 0x64
   13718:	cmp	r1, #0
   1371c:	bxeq	lr
   13720:	ldr	r3, [r3, #104]	; 0x68
   13724:	cmp	r3, #0
   13728:	bxne	lr
   1372c:	mov	r2, r0
   13730:	movw	r1, #33256	; 0x81e8
   13734:	mov	r0, #1
   13738:	movt	r1, #1
   1373c:	b	11950 <__printf_chk@plt>
   13740:	movw	r3, #38640	; 0x96f0
   13744:	movt	r3, #2
   13748:	ldr	r3, [r3, #100]	; 0x64
   1374c:	cmp	r3, #0
   13750:	bxeq	lr
   13754:	mov	r2, r0
   13758:	movw	r1, #33248	; 0x81e0
   1375c:	mov	r0, #1
   13760:	movt	r1, #1
   13764:	b	11950 <__printf_chk@plt>
   13768:	movw	r3, #38640	; 0x96f0
   1376c:	movt	r3, #2
   13770:	ldr	r3, [r3, #104]	; 0x68
   13774:	cmp	r3, #0
   13778:	bxne	lr
   1377c:	mov	r2, r1
   13780:	mov	r0, #1
   13784:	movw	r1, #33248	; 0x81e0
   13788:	movt	r1, #1
   1378c:	b	11950 <__printf_chk@plt>
   13790:	movw	ip, #38640	; 0x96f0
   13794:	movt	ip, #2
   13798:	ldr	ip, [ip, #104]	; 0x68
   1379c:	cmp	ip, #0
   137a0:	bxne	lr
   137a4:	mov	r2, r0
   137a8:	mov	r3, r1
   137ac:	mov	r0, #1
   137b0:	movw	r1, #33264	; 0x81f0
   137b4:	movt	r1, #1
   137b8:	b	11950 <__printf_chk@plt>
   137bc:	movw	r3, #38640	; 0x96f0
   137c0:	movt	r3, #2
   137c4:	push	{r4, lr}
   137c8:	mov	r4, r1
   137cc:	ldr	r3, [r3, #104]	; 0x68
   137d0:	cmp	r3, #0
   137d4:	popeq	{r4, pc}
   137d8:	cmp	r0, #0
   137dc:	beq	137f4 <__assert_fail@plt+0x1d3c>
   137e0:	ldr	r2, [r0]
   137e4:	movw	r1, #33276	; 0x81fc
   137e8:	mov	r0, #1
   137ec:	movt	r1, #1
   137f0:	bl	11950 <__printf_chk@plt>
   137f4:	ldr	r2, [r4]
   137f8:	movw	r1, #33276	; 0x81fc
   137fc:	mov	r0, #1
   13800:	movt	r1, #1
   13804:	pop	{r4, lr}
   13808:	b	11950 <__printf_chk@plt>
   1380c:	movw	r3, #38640	; 0x96f0
   13810:	movt	r3, #2
   13814:	push	{r4, lr}
   13818:	mov	r4, r1
   1381c:	ldr	r3, [r3, #104]	; 0x68
   13820:	cmp	r3, #0
   13824:	popeq	{r4, pc}
   13828:	cmp	r0, #0
   1382c:	beq	13844 <__assert_fail@plt+0x1d8c>
   13830:	ldr	r2, [r0]
   13834:	movw	r1, #33276	; 0x81fc
   13838:	mov	r0, #1
   1383c:	movt	r1, #1
   13840:	bl	11950 <__printf_chk@plt>
   13844:	ldr	r2, [r4]
   13848:	movw	r1, #33276	; 0x81fc
   1384c:	mov	r0, #1
   13850:	movt	r1, #1
   13854:	pop	{r4, lr}
   13858:	b	11950 <__printf_chk@plt>
   1385c:	movw	r3, #38640	; 0x96f0
   13860:	movt	r3, #2
   13864:	mov	ip, r1
   13868:	ldr	r3, [r3, #104]	; 0x68
   1386c:	cmp	r3, #0
   13870:	bxeq	lr
   13874:	cmp	r0, #0
   13878:	beq	13894 <__assert_fail@plt+0x1ddc>
   1387c:	ldr	r2, [r0]
   13880:	movw	r1, #33280	; 0x8200
   13884:	ldr	r3, [ip]
   13888:	movt	r1, #1
   1388c:	mov	r0, #1
   13890:	b	11950 <__printf_chk@plt>
   13894:	ldr	r2, [r1]
   13898:	mov	r0, #1
   1389c:	movw	r1, #33292	; 0x820c
   138a0:	movt	r1, #1
   138a4:	b	11950 <__printf_chk@plt>
   138a8:	push	{r4, r5, r6, lr}
   138ac:	movw	r4, #38640	; 0x96f0
   138b0:	movt	r4, #2
   138b4:	mov	r6, r0
   138b8:	mov	r5, r1
   138bc:	ldr	r0, [r4, #64]	; 0x40
   138c0:	cmp	r0, #0
   138c4:	movwne	r1, #33300	; 0x8214
   138c8:	movweq	r1, #33336	; 0x8238
   138cc:	movtne	r1, #1
   138d0:	movne	r2, #5
   138d4:	moveq	r2, #5
   138d8:	movteq	r1, #1
   138dc:	movne	r0, #0
   138e0:	bl	11788 <dcgettext@plt>
   138e4:	mov	r2, r6
   138e8:	mov	r3, r5
   138ec:	mov	r1, r0
   138f0:	mov	r0, #1
   138f4:	bl	11950 <__printf_chk@plt>
   138f8:	ldr	r3, [r4, #108]	; 0x6c
   138fc:	mov	r2, #5
   13900:	cmp	r3, #32
   13904:	movweq	r1, #33364	; 0x8254
   13908:	movwne	r1, #33448	; 0x82a8
   1390c:	moveq	r0, #0
   13910:	movne	r0, #0
   13914:	movteq	r1, #1
   13918:	movtne	r1, #1
   1391c:	bl	11788 <dcgettext@plt>
   13920:	pop	{r4, r5, r6, lr}
   13924:	mov	r1, r0
   13928:	mov	r0, #1
   1392c:	b	11950 <__printf_chk@plt>
   13930:	push	{r3, r4, r5, lr}
   13934:	movw	r4, #38640	; 0x96f0
   13938:	movt	r4, #2
   1393c:	mov	r5, r0
   13940:	ldr	r0, [r4, #64]	; 0x40
   13944:	cmp	r0, #0
   13948:	movwne	r1, #33548	; 0x830c
   1394c:	movweq	r1, #33580	; 0x832c
   13950:	movtne	r1, #1
   13954:	movne	r2, #5
   13958:	moveq	r2, #5
   1395c:	movteq	r1, #1
   13960:	movne	r0, #0
   13964:	bl	11788 <dcgettext@plt>
   13968:	mov	r2, r5
   1396c:	mov	r1, r0
   13970:	mov	r0, #1
   13974:	bl	11950 <__printf_chk@plt>
   13978:	ldr	r3, [r4, #108]	; 0x6c
   1397c:	mov	r2, #5
   13980:	cmp	r3, #32
   13984:	movweq	r1, #33364	; 0x8254
   13988:	movwne	r1, #33448	; 0x82a8
   1398c:	moveq	r0, #0
   13990:	movne	r0, #0
   13994:	movteq	r1, #1
   13998:	movtne	r1, #1
   1399c:	bl	11788 <dcgettext@plt>
   139a0:	pop	{r3, r4, r5, lr}
   139a4:	mov	r1, r0
   139a8:	mov	r0, #1
   139ac:	b	11950 <__printf_chk@plt>
   139b0:	push	{r4, lr}
   139b4:	mov	r4, r0
   139b8:	ldrb	r3, [r0]
   139bc:	sub	r3, r3, #66	; 0x42
   139c0:	cmp	r3, #49	; 0x31
   139c4:	ldrls	pc, [pc, r3, lsl #2]
   139c8:	b	13ac4 <__assert_fail@plt+0x200c>
   139cc:			; <UNDEFINED> instruction: 0x00013ab4
   139d0:	andeq	r3, r1, r4, asr #21
   139d4:	andeq	r3, r1, r4, asr #21
   139d8:	andeq	r3, r1, r4, asr #21
   139dc:	andeq	r3, r1, r4, asr #21
   139e0:	andeq	r3, r1, r4, asr #21
   139e4:	andeq	r3, r1, r4, asr #21
   139e8:	andeq	r3, r1, r4, asr #21
   139ec:	andeq	r3, r1, r4, asr #21
   139f0:	andeq	r3, r1, r4, asr #21
   139f4:	andeq	r3, r1, r4, asr #21
   139f8:	andeq	r3, r1, r4, asr #21
   139fc:	andeq	r3, r1, r4, asr #21
   13a00:	andeq	r3, r1, r4, asr #21
   13a04:	muleq	r1, r4, sl
   13a08:	andeq	r3, r1, r4, asr #21
   13a0c:	andeq	r3, r1, r4, asr #21
   13a10:			; <UNDEFINED> instruction: 0x00013abc
   13a14:	andeq	r3, r1, r4, asr #21
   13a18:	andeq	r3, r1, r4, asr #21
   13a1c:	andeq	r3, r1, r4, asr #21
   13a20:	andeq	r3, r1, r4, asr #21
   13a24:	andeq	r3, r1, r4, asr #21
   13a28:	andeq	r3, r1, r4, asr #21
   13a2c:	andeq	r3, r1, r4, asr #21
   13a30:	andeq	r3, r1, r4, asr #21
   13a34:	andeq	r3, r1, r4, asr #21
   13a38:	andeq	r3, r1, r4, asr #21
   13a3c:	andeq	r3, r1, r4, asr #21
   13a40:	andeq	r3, r1, r4, asr #21
   13a44:	andeq	r3, r1, r4, asr #21
   13a48:	andeq	r3, r1, r4, asr #21
   13a4c:			; <UNDEFINED> instruction: 0x00013ab4
   13a50:	andeq	r3, r1, r4, asr #21
   13a54:	andeq	r3, r1, r4, asr #21
   13a58:	andeq	r3, r1, r4, asr #21
   13a5c:	andeq	r3, r1, r4, asr #21
   13a60:	andeq	r3, r1, r4, asr #21
   13a64:	andeq	r3, r1, r4, asr #21
   13a68:	andeq	r3, r1, r4, asr #21
   13a6c:	andeq	r3, r1, r4, asr #21
   13a70:	andeq	r3, r1, r4, asr #21
   13a74:	andeq	r3, r1, r4, asr #21
   13a78:	andeq	r3, r1, r4, asr #21
   13a7c:	andeq	r3, r1, r4, asr #21
   13a80:	andeq	r3, r1, r4, asr #21
   13a84:	muleq	r1, r4, sl
   13a88:	andeq	r3, r1, r4, asr #21
   13a8c:	andeq	r3, r1, r4, asr #21
   13a90:			; <UNDEFINED> instruction: 0x00013abc
   13a94:	mov	r3, #2
   13a98:	add	r1, r3, r3, lsl #2
   13a9c:	movw	r3, #37260	; 0x918c
   13aa0:	movt	r3, #2
   13aa4:	add	r2, r3, #4
   13aa8:	add	r2, r2, r1, lsl #2
   13aac:	str	r2, [r3]
   13ab0:	pop	{r4, pc}
   13ab4:	mov	r3, #0
   13ab8:	b	13a98 <__assert_fail@plt+0x1fe0>
   13abc:	mov	r3, #1
   13ac0:	b	13a98 <__assert_fail@plt+0x1fe0>
   13ac4:	movw	r1, #33604	; 0x8344
   13ac8:	mov	r0, #0
   13acc:	movt	r1, #1
   13ad0:	mov	r2, #5
   13ad4:	bl	11788 <dcgettext@plt>
   13ad8:	mov	r1, r4
   13adc:	bl	14658 <__assert_fail@plt+0x2ba0>
   13ae0:	movw	ip, #38640	; 0x96f0
   13ae4:	movt	ip, #2
   13ae8:	push	{r4, lr}
   13aec:	ldr	r4, [ip, #108]	; 0x6c
   13af0:	cmp	r4, #32
   13af4:	beq	13b34 <__assert_fail@plt+0x207c>
   13af8:	cmp	r4, #64	; 0x40
   13afc:	bne	13b18 <__assert_fail@plt+0x2060>
   13b00:	mov	r2, r0
   13b04:	mov	r3, r1
   13b08:	mov	r0, #1
   13b0c:	ldr	r1, [pc, #52]	; 13b48 <__assert_fail@plt+0x2090>
   13b10:	pop	{r4, lr}
   13b14:	b	11950 <__printf_chk@plt>
   13b18:	movw	r1, #33632	; 0x8360
   13b1c:	mov	r0, #0
   13b20:	movt	r1, #1
   13b24:	mov	r2, #5
   13b28:	bl	11788 <dcgettext@plt>
   13b2c:	mov	r1, r4
   13b30:	bl	14658 <__assert_fail@plt+0x2ba0>
   13b34:	mov	r2, r0
   13b38:	ldr	r1, [pc, #12]	; 13b4c <__assert_fail@plt+0x2094>
   13b3c:	mov	r0, #1
   13b40:	pop	{r4, lr}
   13b44:	b	11950 <__printf_chk@plt>
   13b48:	ldrdeq	r9, [r2], -r4
   13b4c:	andeq	r9, r2, ip, asr #3
   13b50:	ldr	r3, [r0]
   13b54:	mov	r2, r1
   13b58:	push	{r4, r5, lr}
   13b5c:	mov	r4, r0
   13b60:	ldr	r1, [r3, #12]
   13b64:	sub	sp, sp, #12
   13b68:	movw	r0, #33788	; 0x83fc
   13b6c:	movt	r0, #1
   13b70:	bl	1237c <__assert_fail@plt+0x8c4>
   13b74:	ldr	r3, [r4]
   13b78:	ldrb	r0, [r3, #8]
   13b7c:	bl	11728 <bfd_is_undefined_symclass@plt>
   13b80:	cmp	r0, #0
   13b84:	beq	13c18 <__assert_fail@plt+0x2160>
   13b88:	movw	r3, #38640	; 0x96f0
   13b8c:	movt	r3, #2
   13b90:	ldr	r3, [r3, #108]	; 0x6c
   13b94:	cmp	r3, #32
   13b98:	movweq	r1, #33804	; 0x840c
   13b9c:	movwne	r1, #33796	; 0x8404
   13ba0:	moveq	r0, #1
   13ba4:	movteq	r1, #1
   13ba8:	movne	r0, #1
   13bac:	movtne	r1, #1
   13bb0:	bl	11950 <__printf_chk@plt>
   13bb4:	ldr	r3, [r4]
   13bb8:	movw	r1, #33816	; 0x8418
   13bbc:	mov	r0, #1
   13bc0:	movt	r1, #1
   13bc4:	ldrb	r2, [r3, #8]
   13bc8:	bl	11950 <__printf_chk@plt>
   13bcc:	ldr	r3, [r4]
   13bd0:	ldrb	r2, [r3, #8]
   13bd4:	cmp	r2, #45	; 0x2d
   13bd8:	beq	13df0 <__assert_fail@plt+0x2338>
   13bdc:	ldr	r3, [r4, #16]
   13be0:	cmp	r3, #0
   13be4:	beq	13c28 <__assert_fail@plt+0x2170>
   13be8:	ldrb	r5, [r3, #52]	; 0x34
   13bec:	and	r5, r5, #15
   13bf0:	cmp	r5, #6
   13bf4:	ldrls	pc, [pc, r5, lsl #2]
   13bf8:	b	13e1c <__assert_fail@plt+0x2364>
   13bfc:	andeq	r3, r1, r4, ror #26
   13c00:	andeq	r3, r1, ip, asr #25
   13c04:	andeq	r3, r1, r8, asr sp
   13c08:	andeq	r3, r1, r4, lsr sp
   13c0c:	andeq	r3, r1, r0, ror sp
   13c10:	andeq	r3, r1, r0, asr #26
   13c14:	andeq	r3, r1, ip, asr #26
   13c18:	ldr	r3, [r4]
   13c1c:	ldrd	r0, [r3]
   13c20:	bl	13ae0 <__assert_fail@plt+0x2028>
   13c24:	b	13bb4 <__assert_fail@plt+0x20fc>
   13c28:	ldr	r3, [r4, #20]
   13c2c:	cmp	r3, #0
   13c30:	beq	13e88 <__assert_fail@plt+0x23d0>
   13c34:	ldr	r5, [r3, #32]
   13c38:	ldrb	r3, [r5, #32]
   13c3c:	cmp	r3, #103	; 0x67
   13c40:	beq	13d7c <__assert_fail@plt+0x22c4>
   13c44:	cmp	r3, #104	; 0x68
   13c48:	beq	13e7c <__assert_fail@plt+0x23c4>
   13c4c:	cmp	r3, #100	; 0x64
   13c50:	movweq	r2, #33728	; 0x83c0
   13c54:	movteq	r2, #1
   13c58:	beq	13cd4 <__assert_fail@plt+0x221c>
   13c5c:	ldrh	r3, [r5, #30]
   13c60:	cmp	r3, #0
   13c64:	movweq	r2, #33752	; 0x83d8
   13c68:	movteq	r2, #1
   13c6c:	beq	13cd4 <__assert_fail@plt+0x221c>
   13c70:	ubfx	r3, r3, #4, #2
   13c74:	cmp	r3, #2
   13c78:	beq	13eb4 <__assert_fail@plt+0x23fc>
   13c7c:	cmp	r3, #3
   13c80:	beq	13ea8 <__assert_fail@plt+0x23f0>
   13c84:	cmp	r3, #1
   13c88:	beq	13e9c <__assert_fail@plt+0x23e4>
   13c8c:	mov	r2, #5
   13c90:	movw	r1, #33916	; 0x847c
   13c94:	mov	r0, #0
   13c98:	movt	r1, #1
   13c9c:	bl	11788 <dcgettext@plt>
   13ca0:	ldrb	ip, [r5, #32]
   13ca4:	mov	r2, #32
   13ca8:	mov	r1, #1
   13cac:	str	ip, [sp]
   13cb0:	ldrh	ip, [r5, #30]
   13cb4:	str	ip, [sp, #4]
   13cb8:	mov	r3, r0
   13cbc:	ldr	r0, [pc, #508]	; 13ec0 <__assert_fail@plt+0x2408>
   13cc0:	bl	11938 <__sprintf_chk@plt>
   13cc4:	ldr	r2, [pc, #500]	; 13ec0 <__assert_fail@plt+0x2408>
   13cc8:	b	13cd4 <__assert_fail@plt+0x221c>
   13ccc:	movw	r2, #33684	; 0x8394
   13cd0:	movt	r2, #1
   13cd4:	movw	r1, #33908	; 0x8474
   13cd8:	mov	r0, #1
   13cdc:	movt	r1, #1
   13ce0:	bl	11950 <__printf_chk@plt>
   13ce4:	ldr	r3, [r4, #16]
   13ce8:	cmp	r3, #0
   13cec:	beq	13d88 <__assert_fail@plt+0x22d0>
   13cf0:	ldrd	r2, [r3, #40]	; 0x28
   13cf4:	orrs	r1, r2, r3
   13cf8:	beq	13d94 <__assert_fail@plt+0x22dc>
   13cfc:	mov	r1, r3
   13d00:	mov	r0, r2
   13d04:	bl	13ae0 <__assert_fail@plt+0x2028>
   13d08:	ldr	r3, [r4, #16]
   13d0c:	cmp	r3, #0
   13d10:	beq	13dcc <__assert_fail@plt+0x2314>
   13d14:	ldr	r3, [r3, #20]
   13d18:	movw	r1, #33956	; 0x84a4
   13d1c:	mov	r0, #1
   13d20:	movt	r1, #1
   13d24:	ldr	r2, [r3]
   13d28:	add	sp, sp, #12
   13d2c:	pop	{r4, r5, lr}
   13d30:	b	11950 <__printf_chk@plt>
   13d34:	movw	r2, #33700	; 0x83a4
   13d38:	movt	r2, #1
   13d3c:	b	13cd4 <__assert_fail@plt+0x221c>
   13d40:	movw	r2, #33716	; 0x83b4
   13d44:	movt	r2, #1
   13d48:	b	13cd4 <__assert_fail@plt+0x221c>
   13d4c:	movw	r2, #33724	; 0x83bc
   13d50:	movt	r2, #1
   13d54:	b	13cd4 <__assert_fail@plt+0x221c>
   13d58:	movw	r2, #33692	; 0x839c
   13d5c:	movt	r2, #1
   13d60:	b	13cd4 <__assert_fail@plt+0x221c>
   13d64:	movw	r2, #33676	; 0x838c
   13d68:	movt	r2, #1
   13d6c:	b	13cd4 <__assert_fail@plt+0x221c>
   13d70:	movw	r2, #33708	; 0x83ac
   13d74:	movt	r2, #1
   13d78:	b	13cd4 <__assert_fail@plt+0x221c>
   13d7c:	movw	r2, #33736	; 0x83c8
   13d80:	movt	r2, #1
   13d84:	b	13cd4 <__assert_fail@plt+0x221c>
   13d88:	ldrd	r2, [r4, #8]
   13d8c:	orrs	r1, r2, r3
   13d90:	bne	13cfc <__assert_fail@plt+0x2244>
   13d94:	movw	r3, #38640	; 0x96f0
   13d98:	movt	r3, #2
   13d9c:	ldr	r3, [r3, #108]	; 0x6c
   13da0:	cmp	r3, #32
   13da4:	movweq	r1, #33804	; 0x840c
   13da8:	movwne	r1, #33796	; 0x8404
   13dac:	moveq	r0, #1
   13db0:	movteq	r1, #1
   13db4:	movne	r0, #1
   13db8:	movtne	r1, #1
   13dbc:	bl	11950 <__printf_chk@plt>
   13dc0:	ldr	r3, [r4, #16]
   13dc4:	cmp	r3, #0
   13dc8:	bne	13d14 <__assert_fail@plt+0x225c>
   13dcc:	ldr	r3, [r4, #20]
   13dd0:	cmp	r3, #0
   13dd4:	bne	13d14 <__assert_fail@plt+0x225c>
   13dd8:	movw	r1, #33836	; 0x842c
   13ddc:	mov	r0, #1
   13de0:	movt	r1, #1
   13de4:	add	sp, sp, #12
   13de8:	pop	{r4, r5, lr}
   13dec:	b	11950 <__printf_chk@plt>
   13df0:	ldr	r2, [r3, #20]
   13df4:	movw	r1, #33828	; 0x8424
   13df8:	mov	r0, #1
   13dfc:	movt	r1, #1
   13e00:	bl	11950 <__printf_chk@plt>
   13e04:	ldr	r3, [r4]
   13e08:	ldr	r1, [pc, #180]	; 13ec4 <__assert_fail@plt+0x240c>
   13e0c:	mov	r0, #1
   13e10:	ldrsh	r2, [r3, #18]
   13e14:	bl	11950 <__printf_chk@plt>
   13e18:	b	13dd8 <__assert_fail@plt+0x2320>
   13e1c:	sub	r3, r5, #13
   13e20:	cmp	r3, #2
   13e24:	movwls	r1, #33844	; 0x8434
   13e28:	movls	r0, #0
   13e2c:	movtls	r1, #1
   13e30:	bls	13e54 <__assert_fail@plt+0x239c>
   13e34:	sub	r3, r5, #10
   13e38:	cmp	r3, #2
   13e3c:	movwls	r1, #33872	; 0x8450
   13e40:	movwhi	r1, #33892	; 0x8464
   13e44:	movtls	r1, #1
   13e48:	movthi	r1, #1
   13e4c:	movls	r0, #0
   13e50:	movhi	r0, #0
   13e54:	mov	r2, #5
   13e58:	bl	11788 <dcgettext@plt>
   13e5c:	mov	r2, #32
   13e60:	str	r5, [sp]
   13e64:	mov	r1, #1
   13e68:	mov	r3, r0
   13e6c:	ldr	r0, [pc, #84]	; 13ec8 <__assert_fail@plt+0x2410>
   13e70:	bl	11938 <__sprintf_chk@plt>
   13e74:	ldr	r2, [pc, #76]	; 13ec8 <__assert_fail@plt+0x2410>
   13e78:	b	13cd4 <__assert_fail@plt+0x221c>
   13e7c:	movw	r2, #33744	; 0x83d0
   13e80:	movt	r2, #1
   13e84:	b	13cd4 <__assert_fail@plt+0x221c>
   13e88:	movw	r1, #33936	; 0x8490
   13e8c:	mov	r0, #1
   13e90:	movt	r1, #1
   13e94:	bl	11950 <__printf_chk@plt>
   13e98:	b	13ce4 <__assert_fail@plt+0x222c>
   13e9c:	movw	r2, #33772	; 0x83ec
   13ea0:	movt	r2, #1
   13ea4:	b	13cd4 <__assert_fail@plt+0x221c>
   13ea8:	movw	r2, #33780	; 0x83f4
   13eac:	movt	r2, #1
   13eb0:	b	13cd4 <__assert_fail@plt+0x221c>
   13eb4:	movw	r2, #33760	; 0x83e0
   13eb8:	movt	r2, #1
   13ebc:	b	13cd4 <__assert_fail@plt+0x221c>
   13ec0:	andeq	r9, r2, r0, lsl #15
   13ec4:	ldrdeq	r9, [r2], -ip
   13ec8:	andeq	r9, r2, r0, ror #14
   13ecc:	ldr	r3, [r0]
   13ed0:	push	{r6, r7, r8, lr}
   13ed4:	mov	r6, r0
   13ed8:	ldrb	r0, [r3, #8]
   13edc:	mov	r8, r1
   13ee0:	bl	11728 <bfd_is_undefined_symclass@plt>
   13ee4:	cmp	r0, #0
   13ee8:	beq	13f50 <__assert_fail@plt+0x2498>
   13eec:	movw	r3, #38640	; 0x96f0
   13ef0:	movt	r3, #2
   13ef4:	ldr	r3, [r3, #108]	; 0x6c
   13ef8:	cmp	r3, #64	; 0x40
   13efc:	beq	13fe8 <__assert_fail@plt+0x2530>
   13f00:	movw	r1, #33804	; 0x840c
   13f04:	mov	r0, #1
   13f08:	movt	r1, #1
   13f0c:	bl	11950 <__printf_chk@plt>
   13f10:	ldr	r3, [r6]
   13f14:	movw	r1, #33968	; 0x84b0
   13f18:	mov	r0, #1
   13f1c:	movt	r1, #1
   13f20:	ldrb	r2, [r3, #8]
   13f24:	bl	11950 <__printf_chk@plt>
   13f28:	ldr	r3, [r6]
   13f2c:	ldrb	r2, [r3, #8]
   13f30:	cmp	r2, #45	; 0x2d
   13f34:	beq	13ffc <__assert_fail@plt+0x2544>
   13f38:	mov	r2, r8
   13f3c:	movw	r0, #35224	; 0x8998
   13f40:	ldr	r1, [r3, #12]
   13f44:	movt	r0, #1
   13f48:	pop	{r6, r7, r8, lr}
   13f4c:	b	1237c <__assert_fail@plt+0x8c4>
   13f50:	movw	r7, #38640	; 0x96f0
   13f54:	movt	r7, #2
   13f58:	ldr	r3, [r7, #84]	; 0x54
   13f5c:	cmp	r3, #0
   13f60:	beq	13f70 <__assert_fail@plt+0x24b8>
   13f64:	ldr	r3, [r7, #176]	; 0xb0
   13f68:	cmp	r3, #0
   13f6c:	beq	13fd4 <__assert_fail@plt+0x251c>
   13f70:	ldr	r3, [r6]
   13f74:	ldrd	r0, [r3]
   13f78:	bl	13ae0 <__assert_fail@plt+0x2028>
   13f7c:	ldr	r3, [r7, #176]	; 0xb0
   13f80:	cmp	r3, #0
   13f84:	beq	13f10 <__assert_fail@plt+0x2458>
   13f88:	ldr	r3, [r6, #16]
   13f8c:	cmp	r3, #0
   13f90:	ldrne	r2, [r3, #40]	; 0x28
   13f94:	ldreq	r3, [r6, #12]
   13f98:	ldrne	r3, [r3, #44]	; 0x2c
   13f9c:	ldreq	r2, [r6, #8]
   13fa0:	orrs	r3, r2, r3
   13fa4:	moveq	r3, #0
   13fa8:	movne	r3, #1
   13fac:	cmp	r3, #0
   13fb0:	beq	13f10 <__assert_fail@plt+0x2458>
   13fb4:	mov	r0, #32
   13fb8:	bl	11944 <putchar@plt>
   13fbc:	ldr	r3, [r6, #16]
   13fc0:	cmp	r3, #0
   13fc4:	ldrdne	r0, [r3, #40]	; 0x28
   13fc8:	ldrdeq	r0, [r6, #8]
   13fcc:	bl	13ae0 <__assert_fail@plt+0x2028>
   13fd0:	b	13f10 <__assert_fail@plt+0x2458>
   13fd4:	ldr	r3, [r6, #16]
   13fd8:	cmp	r3, #0
   13fdc:	ldrdne	r0, [r3, #40]	; 0x28
   13fe0:	ldrdeq	r0, [r6, #8]
   13fe4:	b	13f78 <__assert_fail@plt+0x24c0>
   13fe8:	movw	r1, #33804	; 0x840c
   13fec:	mov	r0, #1
   13ff0:	movt	r1, #1
   13ff4:	bl	11950 <__printf_chk@plt>
   13ff8:	b	13f00 <__assert_fail@plt+0x2448>
   13ffc:	mov	r0, #32
   14000:	bl	11944 <putchar@plt>
   14004:	ldr	r3, [r6]
   14008:	ldr	r1, [pc, #68]	; 14054 <__assert_fail@plt+0x259c>
   1400c:	mov	r0, #1
   14010:	ldrb	r2, [r3, #17]
   14014:	bl	11950 <__printf_chk@plt>
   14018:	mov	r0, #32
   1401c:	bl	11944 <putchar@plt>
   14020:	ldr	r3, [r6]
   14024:	ldr	r1, [pc, #44]	; 14058 <__assert_fail@plt+0x25a0>
   14028:	mov	r0, #1
   1402c:	ldrsh	r2, [r3, #18]
   14030:	bl	11950 <__printf_chk@plt>
   14034:	ldr	r3, [r6]
   14038:	movw	r1, #33972	; 0x84b4
   1403c:	mov	r0, #1
   14040:	movt	r1, #1
   14044:	ldr	r2, [r3, #20]
   14048:	bl	11950 <__printf_chk@plt>
   1404c:	ldr	r3, [r6]
   14050:	b	13f38 <__assert_fail@plt+0x2480>
   14054:	andeq	r9, r2, r4, ror #3
   14058:	ldrdeq	r9, [r2], -ip
   1405c:	ldr	r3, [r0]
   14060:	mov	r2, r1
   14064:	push	{r4, lr}
   14068:	mov	r4, r0
   1406c:	ldr	r1, [r3, #12]
   14070:	movw	r0, #33980	; 0x84bc
   14074:	movt	r0, #1
   14078:	bl	1237c <__assert_fail@plt+0x8c4>
   1407c:	ldr	r3, [r4]
   14080:	movw	r1, #33984	; 0x84c0
   14084:	mov	r0, #1
   14088:	movt	r1, #1
   1408c:	ldrb	r2, [r3, #8]
   14090:	bl	11950 <__printf_chk@plt>
   14094:	ldr	r3, [r4]
   14098:	ldrb	r0, [r3, #8]
   1409c:	bl	11728 <bfd_is_undefined_symclass@plt>
   140a0:	cmp	r0, #0
   140a4:	bne	140e4 <__assert_fail@plt+0x262c>
   140a8:	ldr	r3, [r4]
   140ac:	ldrd	r0, [r3]
   140b0:	bl	13ae0 <__assert_fail@plt+0x2028>
   140b4:	mov	r0, #32
   140b8:	bl	11944 <putchar@plt>
   140bc:	ldr	r3, [r4, #16]
   140c0:	cmp	r3, #0
   140c4:	beq	140f8 <__assert_fail@plt+0x2640>
   140c8:	ldrd	r2, [r3, #40]	; 0x28
   140cc:	orrs	r1, r2, r3
   140d0:	popeq	{r4, pc}
   140d4:	mov	r0, r2
   140d8:	mov	r1, r3
   140dc:	pop	{r4, lr}
   140e0:	b	13ae0 <__assert_fail@plt+0x2028>
   140e4:	movw	r1, #33804	; 0x840c
   140e8:	mov	r0, #1
   140ec:	movt	r1, #1
   140f0:	pop	{r4, lr}
   140f4:	b	11950 <__printf_chk@plt>
   140f8:	ldrd	r2, [r4, #8]
   140fc:	orrs	r1, r2, r3
   14100:	bne	140d4 <__assert_fail@plt+0x261c>
   14104:	pop	{r4, pc}
   14108:	push	{r3, r4, r5, lr}
   1410c:	mov	r5, r0
   14110:	bl	1183c <bfd_get_arch_size@plt>
   14114:	movw	r4, #38640	; 0x96f0
   14118:	movt	r4, #2
   1411c:	cmn	r0, #1
   14120:	str	r0, [r4, #108]	; 0x6c
   14124:	popne	{r3, r4, r5, pc}
   14128:	ldr	r3, [r5, #4]
   1412c:	movw	r1, #33988	; 0x84c4
   14130:	movt	r1, #1
   14134:	ldr	r5, [r3]
   14138:	mov	r0, r5
   1413c:	bl	116a4 <strstr@plt>
   14140:	cmp	r0, #0
   14144:	beq	14154 <__assert_fail@plt+0x269c>
   14148:	mov	r3, #64	; 0x40
   1414c:	str	r3, [r4, #108]	; 0x6c
   14150:	pop	{r3, r4, r5, pc}
   14154:	ldrb	r3, [r5]
   14158:	cmp	r3, #109	; 0x6d
   1415c:	bne	14184 <__assert_fail@plt+0x26cc>
   14160:	ldrb	r3, [r5, #1]
   14164:	cmp	r3, #109	; 0x6d
   14168:	bne	14184 <__assert_fail@plt+0x26cc>
   1416c:	ldrb	r3, [r5, #2]
   14170:	cmp	r3, #111	; 0x6f
   14174:	bne	14184 <__assert_fail@plt+0x26cc>
   14178:	ldrb	r3, [r5, #3]
   1417c:	cmp	r3, #0
   14180:	beq	14148 <__assert_fail@plt+0x2690>
   14184:	mov	r3, #32
   14188:	str	r3, [r4, #108]	; 0x6c
   1418c:	pop	{r3, r4, r5, pc}
   14190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14194:	movw	r8, #37800	; 0x93a8
   14198:	movt	r8, #2
   1419c:	sub	sp, sp, #12
   141a0:	mov	sl, r0
   141a4:	ldr	r3, [r8]
   141a8:	str	r3, [sp, #4]
   141ac:	bl	15010 <__assert_fail@plt+0x3558>
   141b0:	cmp	r0, #1
   141b4:	sbcs	r3, r1, #0
   141b8:	blt	143b0 <__assert_fail@plt+0x28f8>
   141bc:	movw	r7, #38640	; 0x96f0
   141c0:	movt	r7, #2
   141c4:	movw	r3, #33992	; 0x84c8
   141c8:	movt	r3, #1
   141cc:	ldr	r1, [r7, #180]	; 0xb4
   141d0:	mov	r0, sl
   141d4:	cmp	r1, #0
   141d8:	moveq	r1, r3
   141dc:	bl	11764 <bfd_openr@plt>
   141e0:	subs	r5, r0, #0
   141e4:	beq	14470 <__assert_fail@plt+0x29b8>
   141e8:	ldr	r3, [r7, #20]
   141ec:	mov	r0, r5
   141f0:	mov	r1, #2
   141f4:	cmp	r3, #0
   141f8:	ldrne	r3, [r5, #40]	; 0x28
   141fc:	orrne	r3, r3, #1048576	; 0x100000
   14200:	strne	r3, [r5, #40]	; 0x28
   14204:	bl	11a40 <bfd_check_format@plt>
   14208:	subs	r6, r0, #0
   1420c:	beq	142dc <__assert_fail@plt+0x2824>
   14210:	movw	r9, #37260	; 0x918c
   14214:	movt	r9, #2
   14218:	ldr	r0, [r5]
   1421c:	ldr	r3, [r9]
   14220:	ldr	r3, [r3, #4]
   14224:	blx	r3
   14228:	ldr	r3, [r7, #184]	; 0xb8
   1422c:	cmp	r3, #0
   14230:	bne	143b8 <__assert_fail@plt+0x2900>
   14234:	mov	r6, #0
   14238:	mov	fp, r6
   1423c:	b	1428c <__assert_fail@plt+0x27d4>
   14240:	mov	r0, r4
   14244:	bl	14108 <__assert_fail@plt+0x2650>
   14248:	ldr	r3, [r9]
   1424c:	ldr	r0, [r5]
   14250:	ldr	r1, [r4]
   14254:	ldr	r3, [r3, #8]
   14258:	blx	r3
   1425c:	mov	r0, r4
   14260:	mov	r1, r5
   14264:	bl	12e80 <__assert_fail@plt+0x13c8>
   14268:	cmp	r6, #0
   1426c:	beq	14288 <__assert_fail@plt+0x27d0>
   14270:	mov	r0, r6
   14274:	bl	119d4 <bfd_close@plt>
   14278:	cmp	r6, r4
   1427c:	str	fp, [r7, #24]
   14280:	str	fp, [r7, #36]	; 0x24
   14284:	beq	1434c <__assert_fail@plt+0x2894>
   14288:	mov	r6, r4
   1428c:	mov	r0, r5
   14290:	mov	r1, r6
   14294:	bl	11a4c <bfd_openr_next_archived_file@plt>
   14298:	subs	r4, r0, #0
   1429c:	beq	14328 <__assert_fail@plt+0x2870>
   142a0:	mov	r1, #1
   142a4:	mov	r2, sp
   142a8:	bl	119ec <bfd_check_format_matches@plt>
   142ac:	cmp	r0, #0
   142b0:	bne	14240 <__assert_fail@plt+0x2788>
   142b4:	ldr	r0, [r4]
   142b8:	bl	14554 <__assert_fail@plt+0x2a9c>
   142bc:	bl	117dc <bfd_get_error@plt>
   142c0:	cmp	r0, #13
   142c4:	bne	14268 <__assert_fail@plt+0x27b0>
   142c8:	ldr	r0, [sp]
   142cc:	bl	1472c <__assert_fail@plt+0x2c74>
   142d0:	ldr	r0, [sp]
   142d4:	bl	11734 <free@plt>
   142d8:	b	14268 <__assert_fail@plt+0x27b0>
   142dc:	mov	r0, r5
   142e0:	mov	r1, #1
   142e4:	mov	r2, sp
   142e8:	bl	119ec <bfd_check_format_matches@plt>
   142ec:	subs	r4, r0, #0
   142f0:	beq	14388 <__assert_fail@plt+0x28d0>
   142f4:	mov	r0, r5
   142f8:	mov	r4, #1
   142fc:	bl	14108 <__assert_fail@plt+0x2650>
   14300:	movw	r3, #37260	; 0x918c
   14304:	movt	r3, #2
   14308:	mov	r0, sl
   1430c:	ldr	r3, [r3]
   14310:	ldr	r3, [r3]
   14314:	blx	r3
   14318:	mov	r0, r5
   1431c:	mov	r1, r6
   14320:	bl	12e80 <__assert_fail@plt+0x13c8>
   14324:	b	14350 <__assert_fail@plt+0x2898>
   14328:	bl	117dc <bfd_get_error@plt>
   1432c:	cmp	r0, #9
   14330:	bne	1448c <__assert_fail@plt+0x29d4>
   14334:	cmp	r6, #0
   14338:	beq	1434c <__assert_fail@plt+0x2894>
   1433c:	mov	r0, r6
   14340:	bl	119d4 <bfd_close@plt>
   14344:	str	r4, [r7, #24]
   14348:	str	r4, [r7, #36]	; 0x24
   1434c:	mov	r4, #1
   14350:	mov	r0, r5
   14354:	bl	119d4 <bfd_close@plt>
   14358:	cmp	r0, #0
   1435c:	movne	r3, #0
   14360:	movne	r0, r4
   14364:	strne	r3, [r7, #24]
   14368:	strne	r3, [r7, #36]	; 0x24
   1436c:	beq	14484 <__assert_fail@plt+0x29cc>
   14370:	ldr	r2, [sp, #4]
   14374:	ldr	r3, [r8]
   14378:	cmp	r2, r3
   1437c:	bne	14480 <__assert_fail@plt+0x29c8>
   14380:	add	sp, sp, #12
   14384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14388:	mov	r0, sl
   1438c:	bl	14554 <__assert_fail@plt+0x2a9c>
   14390:	bl	117dc <bfd_get_error@plt>
   14394:	cmp	r0, #13
   14398:	bne	14350 <__assert_fail@plt+0x2898>
   1439c:	ldr	r0, [sp]
   143a0:	bl	1472c <__assert_fail@plt+0x2c74>
   143a4:	ldr	r0, [sp]
   143a8:	bl	11734 <free@plt>
   143ac:	b	14350 <__assert_fail@plt+0x2898>
   143b0:	mov	r0, #0
   143b4:	b	14370 <__assert_fail@plt+0x28b8>
   143b8:	mov	r0, r5
   143bc:	mvn	r1, #0
   143c0:	mov	r2, sp
   143c4:	bl	11aac <bfd_get_next_mapent@plt>
   143c8:	cmn	r0, #1
   143cc:	mov	r4, r0
   143d0:	beq	14234 <__assert_fail@plt+0x277c>
   143d4:	mov	r2, #5
   143d8:	movw	r1, #34032	; 0x84f0
   143dc:	mov	r0, #0
   143e0:	movt	r1, #1
   143e4:	bl	11788 <dcgettext@plt>
   143e8:	mov	r1, r0
   143ec:	mov	r0, #1
   143f0:	bl	11950 <__printf_chk@plt>
   143f4:	b	14448 <__assert_fail@plt+0x2990>
   143f8:	ldr	r3, [sp]
   143fc:	ldr	r1, [r3]
   14400:	cmp	r1, #0
   14404:	beq	1442c <__assert_fail@plt+0x2974>
   14408:	mov	r2, r5
   1440c:	movw	r0, #35160	; 0x8958
   14410:	movt	r0, #1
   14414:	bl	1237c <__assert_fail@plt+0x8c4>
   14418:	movw	r1, #34024	; 0x84e8
   1441c:	ldr	r2, [r6]
   14420:	mov	r0, #1
   14424:	movt	r1, #1
   14428:	bl	11950 <__printf_chk@plt>
   1442c:	mov	r1, r4
   14430:	mov	r0, r5
   14434:	mov	r2, sp
   14438:	bl	11aac <bfd_get_next_mapent@plt>
   1443c:	cmn	r0, #1
   14440:	mov	r4, r0
   14444:	beq	14234 <__assert_fail@plt+0x277c>
   14448:	ldr	r3, [r5, #4]
   1444c:	mov	r0, r5
   14450:	mov	r1, r4
   14454:	ldr	r3, [r3, #248]	; 0xf8
   14458:	blx	r3
   1445c:	subs	r6, r0, #0
   14460:	bne	143f8 <__assert_fail@plt+0x2940>
   14464:	movw	r0, #34000	; 0x84d0
   14468:	movt	r0, #1
   1446c:	bl	145e0 <__assert_fail@plt+0x2b28>
   14470:	mov	r0, sl
   14474:	bl	14554 <__assert_fail@plt+0x2a9c>
   14478:	mov	r0, r5
   1447c:	b	14370 <__assert_fail@plt+0x28b8>
   14480:	bl	117a0 <__stack_chk_fail@plt>
   14484:	mov	r0, sl
   14488:	bl	145e0 <__assert_fail@plt+0x2b28>
   1448c:	ldr	r0, [r5]
   14490:	bl	145e0 <__assert_fail@plt+0x2b28>
   14494:	push	{r4, r5, r6, lr}
   14498:	mov	r1, #47	; 0x2f
   1449c:	mov	r6, r0
   144a0:	bl	119b0 <strrchr@plt>
   144a4:	subs	r5, r0, #0
   144a8:	beq	144fc <__assert_fail@plt+0x2a44>
   144ac:	rsb	r4, r6, r5
   144b0:	add	r0, r4, #11
   144b4:	add	r5, r4, #1
   144b8:	bl	11800 <xmalloc@plt>
   144bc:	mov	r1, r6
   144c0:	mov	r2, r4
   144c4:	bl	11758 <memcpy@plt>
   144c8:	mov	r3, #47	; 0x2f
   144cc:	mov	ip, r0
   144d0:	strb	r3, [r0, r4]
   144d4:	movw	r3, #34680	; 0x8778
   144d8:	movt	r3, #1
   144dc:	add	r2, ip, r5
   144e0:	ldm	r3!, {r0, r1}
   144e4:	ldrb	r3, [r3]
   144e8:	str	r0, [ip, r5]
   144ec:	mov	r0, ip
   144f0:	str	r1, [r2, #4]
   144f4:	strb	r3, [r2, #8]
   144f8:	pop	{r4, r5, r6, pc}
   144fc:	mov	r0, #9
   14500:	bl	11800 <xmalloc@plt>
   14504:	mov	ip, r0
   14508:	b	144d4 <__assert_fail@plt+0x2a1c>
   1450c:	subs	r3, r0, #0
   14510:	beq	14544 <__assert_fail@plt+0x2a8c>
   14514:	cmp	r3, #1
   14518:	bne	14530 <__assert_fail@plt+0x2a78>
   1451c:	movw	r1, #34704	; 0x8790
   14520:	mov	r0, #0
   14524:	movt	r1, #1
   14528:	mov	r2, #5
   1452c:	b	11788 <dcgettext@plt>
   14530:	movw	r1, #34720	; 0x87a0
   14534:	mov	r0, #0
   14538:	movt	r1, #1
   1453c:	mov	r2, #5
   14540:	b	11788 <dcgettext@plt>
   14544:	movw	r1, #34692	; 0x8784
   14548:	mov	r2, #5
   1454c:	movt	r1, #1
   14550:	b	11788 <dcgettext@plt>
   14554:	push	{r4, r5, lr}
   14558:	sub	sp, sp, #12
   1455c:	mov	r4, r0
   14560:	bl	117dc <bfd_get_error@plt>
   14564:	bl	11a04 <bfd_errmsg@plt>
   14568:	movw	r3, #38624	; 0x96e0
   1456c:	movt	r3, #2
   14570:	mov	r5, r0
   14574:	ldr	r0, [r3]
   14578:	bl	116f8 <fflush@plt>
   1457c:	cmp	r4, #0
   14580:	movw	r1, #37812	; 0x93b4
   14584:	movw	r3, #38848	; 0x97c0
   14588:	movt	r1, #2
   1458c:	movt	r3, #2
   14590:	beq	145bc <__assert_fail@plt+0x2b04>
   14594:	str	r4, [sp]
   14598:	movw	r2, #34740	; 0x87b4
   1459c:	ldr	r0, [r1]
   145a0:	movt	r2, #1
   145a4:	ldr	r3, [r3]
   145a8:	mov	r1, #1
   145ac:	str	r5, [sp, #4]
   145b0:	bl	1195c <__fprintf_chk@plt>
   145b4:	add	sp, sp, #12
   145b8:	pop	{r4, r5, pc}
   145bc:	str	r5, [sp]
   145c0:	movw	r2, #34744	; 0x87b8
   145c4:	ldr	r0, [r1]
   145c8:	movt	r2, #1
   145cc:	ldr	r3, [r3]
   145d0:	mov	r1, #1
   145d4:	bl	1195c <__fprintf_chk@plt>
   145d8:	add	sp, sp, #12
   145dc:	pop	{r4, r5, pc}
   145e0:	push	{r3, lr}
   145e4:	bl	14554 <__assert_fail@plt+0x2a9c>
   145e8:	mov	r0, #1
   145ec:	bl	119c8 <xexit@plt>
   145f0:	movw	ip, #38624	; 0x96e0
   145f4:	movt	ip, #2
   145f8:	push	{r4, r5, r6, lr}
   145fc:	mov	r6, r0
   14600:	ldr	r0, [ip]
   14604:	mov	r5, r1
   14608:	movw	r4, #37812	; 0x93b4
   1460c:	bl	116f8 <fflush@plt>
   14610:	movt	r4, #2
   14614:	movw	ip, #38848	; 0x97c0
   14618:	movt	ip, #2
   1461c:	mov	r1, #1
   14620:	ldr	r0, [r4]
   14624:	movw	r2, #33292	; 0x820c
   14628:	ldr	r3, [ip]
   1462c:	movt	r2, #1
   14630:	bl	1195c <__fprintf_chk@plt>
   14634:	mov	r2, r6
   14638:	mov	r3, r5
   1463c:	ldr	r0, [r4]
   14640:	mov	r1, #1
   14644:	bl	118b4 <__vfprintf_chk@plt>
   14648:	ldr	r1, [r4]
   1464c:	mov	r0, #10
   14650:	pop	{r4, r5, r6, lr}
   14654:	b	117e8 <_IO_putc@plt>
   14658:	push	{r0, r1, r2, r3}
   1465c:	movw	r3, #37800	; 0x93a8
   14660:	movt	r3, #2
   14664:	push	{lr}		; (str lr, [sp, #-4]!)
   14668:	sub	sp, sp, #12
   1466c:	add	r2, sp, #20
   14670:	ldr	r3, [r3]
   14674:	ldr	r0, [sp, #16]
   14678:	mov	r1, r2
   1467c:	str	r2, [sp]
   14680:	str	r3, [sp, #4]
   14684:	bl	145f0 <__assert_fail@plt+0x2b38>
   14688:	mov	r0, #1
   1468c:	bl	119c8 <xexit@plt>
   14690:	push	{r0, r1, r2, r3}
   14694:	push	{r4, lr}
   14698:	movw	r4, #37800	; 0x93a8
   1469c:	movt	r4, #2
   146a0:	sub	sp, sp, #8
   146a4:	add	r3, sp, #20
   146a8:	ldr	r2, [r4]
   146ac:	mov	r1, r3
   146b0:	ldr	r0, [sp, #16]
   146b4:	str	r3, [sp]
   146b8:	str	r2, [sp, #4]
   146bc:	bl	145f0 <__assert_fail@plt+0x2b38>
   146c0:	ldr	r2, [sp, #4]
   146c4:	ldr	r3, [r4]
   146c8:	cmp	r2, r3
   146cc:	bne	146e0 <__assert_fail@plt+0x2c28>
   146d0:	add	sp, sp, #8
   146d4:	pop	{r4, lr}
   146d8:	add	sp, sp, #16
   146dc:	bx	lr
   146e0:	bl	117a0 <__stack_chk_fail@plt>
   146e4:	push	{r4, lr}
   146e8:	movw	r0, #34752	; 0x87c0
   146ec:	movt	r0, #1
   146f0:	bl	1171c <bfd_set_default_target@plt>
   146f4:	cmp	r0, #0
   146f8:	popne	{r4, pc}
   146fc:	mov	r2, #5
   14700:	movw	r1, #34784	; 0x87e0
   14704:	movt	r1, #1
   14708:	bl	11788 <dcgettext@plt>
   1470c:	mov	r4, r0
   14710:	bl	117dc <bfd_get_error@plt>
   14714:	bl	11a04 <bfd_errmsg@plt>
   14718:	movw	r1, #34752	; 0x87c0
   1471c:	movt	r1, #1
   14720:	mov	r2, r0
   14724:	mov	r0, r4
   14728:	bl	14658 <__assert_fail@plt+0x2ba0>
   1472c:	movw	r3, #38624	; 0x96e0
   14730:	movt	r3, #2
   14734:	push	{r4, r5, r6, lr}
   14738:	mov	r4, r0
   1473c:	movw	r5, #37812	; 0x93b4
   14740:	ldr	r0, [r3]
   14744:	movt	r5, #2
   14748:	bl	116f8 <fflush@plt>
   1474c:	mov	r2, #5
   14750:	movw	r1, #34828	; 0x880c
   14754:	mov	r0, #0
   14758:	movt	r1, #1
   1475c:	ldr	r6, [r5]
   14760:	bl	11788 <dcgettext@plt>
   14764:	movw	r3, #38848	; 0x97c0
   14768:	movt	r3, #2
   1476c:	mov	r1, #1
   14770:	ldr	r3, [r3]
   14774:	mov	r2, r0
   14778:	mov	r0, r6
   1477c:	bl	1195c <__fprintf_chk@plt>
   14780:	ldr	r3, [r4]
   14784:	cmp	r3, #0
   14788:	beq	147ac <__assert_fail@plt+0x2cf4>
   1478c:	movw	r2, #35224	; 0x8998
   14790:	ldr	r0, [r5]
   14794:	movt	r2, #1
   14798:	mov	r1, #1
   1479c:	bl	1195c <__fprintf_chk@plt>
   147a0:	ldr	r3, [r4, #4]!
   147a4:	cmp	r3, #0
   147a8:	bne	1478c <__assert_fail@plt+0x2cd4>
   147ac:	ldr	r1, [r5]
   147b0:	mov	r0, #10
   147b4:	pop	{r4, r5, r6, lr}
   147b8:	b	119bc <fputc@plt>
   147bc:	push	{r4, r5, r6, lr}
   147c0:	subs	r4, r0, #0
   147c4:	mov	r5, r1
   147c8:	beq	14844 <__assert_fail@plt+0x2d8c>
   147cc:	mov	r2, #5
   147d0:	movw	r1, #34872	; 0x8838
   147d4:	mov	r0, #0
   147d8:	movt	r1, #1
   147dc:	bl	11788 <dcgettext@plt>
   147e0:	mov	r3, r4
   147e4:	mov	r1, #1
   147e8:	mov	r2, r0
   147ec:	mov	r0, r5
   147f0:	bl	1195c <__fprintf_chk@plt>
   147f4:	bl	117d0 <bfd_target_list@plt>
   147f8:	ldr	r3, [r0]
   147fc:	mov	r6, r0
   14800:	cmp	r3, #0
   14804:	movne	r4, r0
   14808:	beq	1482c <__assert_fail@plt+0x2d74>
   1480c:	movw	r2, #35224	; 0x8998
   14810:	mov	r0, r5
   14814:	movt	r2, #1
   14818:	mov	r1, #1
   1481c:	bl	1195c <__fprintf_chk@plt>
   14820:	ldr	r3, [r4, #4]!
   14824:	cmp	r3, #0
   14828:	bne	1480c <__assert_fail@plt+0x2d54>
   1482c:	mov	r1, r5
   14830:	mov	r0, #10
   14834:	bl	119bc <fputc@plt>
   14838:	mov	r0, r6
   1483c:	pop	{r4, r5, r6, lr}
   14840:	b	11734 <free@plt>
   14844:	mov	r2, #5
   14848:	movw	r1, #34852	; 0x8824
   1484c:	movt	r1, #1
   14850:	bl	11788 <dcgettext@plt>
   14854:	mov	r1, #1
   14858:	mov	r2, r0
   1485c:	mov	r0, r5
   14860:	bl	1195c <__fprintf_chk@plt>
   14864:	b	147f4 <__assert_fail@plt+0x2d3c>
   14868:	push	{r4, r5, r6, lr}
   1486c:	subs	r4, r0, #0
   14870:	mov	r5, r1
   14874:	beq	148f0 <__assert_fail@plt+0x2e38>
   14878:	mov	r2, #5
   1487c:	movw	r1, #34924	; 0x886c
   14880:	mov	r0, #0
   14884:	movt	r1, #1
   14888:	bl	11788 <dcgettext@plt>
   1488c:	mov	r3, r4
   14890:	mov	r1, #1
   14894:	mov	r2, r0
   14898:	mov	r0, r5
   1489c:	bl	1195c <__fprintf_chk@plt>
   148a0:	bl	11704 <bfd_arch_list@plt>
   148a4:	ldr	r3, [r0]
   148a8:	mov	r6, r0
   148ac:	cmp	r3, #0
   148b0:	movne	r4, r0
   148b4:	beq	148d8 <__assert_fail@plt+0x2e20>
   148b8:	movw	r2, #35224	; 0x8998
   148bc:	mov	r0, r5
   148c0:	movt	r2, #1
   148c4:	mov	r1, #1
   148c8:	bl	1195c <__fprintf_chk@plt>
   148cc:	ldr	r3, [r4, #4]!
   148d0:	cmp	r3, #0
   148d4:	bne	148b8 <__assert_fail@plt+0x2e00>
   148d8:	mov	r1, r5
   148dc:	mov	r0, #10
   148e0:	bl	119bc <fputc@plt>
   148e4:	mov	r0, r6
   148e8:	pop	{r4, r5, r6, lr}
   148ec:	b	11734 <free@plt>
   148f0:	mov	r2, #5
   148f4:	movw	r1, #34896	; 0x8850
   148f8:	movt	r1, #1
   148fc:	bl	11788 <dcgettext@plt>
   14900:	mov	r1, #1
   14904:	mov	r2, r0
   14908:	mov	r0, r5
   1490c:	bl	1195c <__fprintf_chk@plt>
   14910:	b	148a0 <__assert_fail@plt+0x2de8>
   14914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14918:	mov	r2, #5
   1491c:	sub	sp, sp, #44	; 0x2c
   14920:	movw	r1, #34956	; 0x888c
   14924:	mov	r0, #0
   14928:	movt	r1, #1
   1492c:	bl	11788 <dcgettext@plt>
   14930:	movw	r2, #34984	; 0x88a8
   14934:	movt	r2, #1
   14938:	movw	fp, #37816	; 0x93b8
   1493c:	movt	fp, #2
   14940:	mov	r1, r0
   14944:	mov	r0, #1
   14948:	bl	11950 <__printf_chk@plt>
   1494c:	mov	r0, #0
   14950:	bl	15e88 <__assert_fail@plt+0x43d0>
   14954:	ldr	r3, [fp]
   14958:	ldr	r4, [r3]
   1495c:	cmp	r4, #0
   14960:	mov	r6, r0
   14964:	beq	14ab4 <__assert_fail@plt+0x2ffc>
   14968:	mov	r8, #4
   1496c:	mov	r7, #1
   14970:	ldr	r1, [r4]
   14974:	mov	r0, r6
   14978:	bl	11980 <bfd_openw@plt>
   1497c:	mov	r2, #5
   14980:	movw	r1, #35012	; 0x88c4
   14984:	movt	r1, #1
   14988:	mov	r5, r0
   1498c:	mov	r0, #0
   14990:	bl	11788 <dcgettext@plt>
   14994:	ldr	sl, [r4]
   14998:	mov	r1, r0
   1499c:	ldr	r0, [r4, #12]
   149a0:	str	r1, [sp, #8]
   149a4:	bl	1450c <__assert_fail@plt+0x2a54>
   149a8:	mov	r9, r0
   149ac:	ldr	r0, [r4, #8]
   149b0:	bl	1450c <__assert_fail@plt+0x2a54>
   149b4:	ldr	r1, [sp, #8]
   149b8:	mov	r2, sl
   149bc:	mov	r3, r9
   149c0:	str	r0, [sp]
   149c4:	mov	r0, #1
   149c8:	bl	11950 <__printf_chk@plt>
   149cc:	cmp	r5, #0
   149d0:	beq	14aa4 <__assert_fail@plt+0x2fec>
   149d4:	mov	r0, r5
   149d8:	mov	r1, #1
   149dc:	bl	118cc <bfd_set_format@plt>
   149e0:	subs	r9, r0, #0
   149e4:	movne	r4, #2
   149e8:	bne	149fc <__assert_fail@plt+0x2f44>
   149ec:	b	14a88 <__assert_fail@plt+0x2fd0>
   149f0:	add	r4, r4, #1
   149f4:	cmp	r4, #92	; 0x5c
   149f8:	beq	14a48 <__assert_fail@plt+0x2f90>
   149fc:	ldr	r3, [r5, #4]
   14a00:	mov	r0, r5
   14a04:	mov	r1, r4
   14a08:	mov	r2, #0
   14a0c:	ldr	r3, [r3, #336]	; 0x150
   14a10:	blx	r3
   14a14:	cmp	r0, #0
   14a18:	beq	149f0 <__assert_fail@plt+0x2f38>
   14a1c:	mov	r0, r4
   14a20:	mov	r1, #0
   14a24:	bl	11920 <bfd_printable_arch_mach@plt>
   14a28:	add	r4, r4, #1
   14a2c:	movw	r1, #35040	; 0x88e0
   14a30:	movt	r1, #1
   14a34:	mov	r2, r0
   14a38:	mov	r0, #1
   14a3c:	bl	11950 <__printf_chk@plt>
   14a40:	cmp	r4, #92	; 0x5c
   14a44:	bne	149fc <__assert_fail@plt+0x2f44>
   14a48:	mov	r0, r5
   14a4c:	bl	11908 <bfd_close_all_done@plt>
   14a50:	ldr	r3, [fp]
   14a54:	ldr	r4, [r3, r8]
   14a58:	add	r8, r8, #4
   14a5c:	cmp	r4, #0
   14a60:	bne	14970 <__assert_fail@plt+0x2eb8>
   14a64:	mov	r0, r6
   14a68:	bl	117ac <unlink@plt>
   14a6c:	mov	r0, r6
   14a70:	bl	11734 <free@plt>
   14a74:	cmp	r7, #0
   14a78:	moveq	r0, #1
   14a7c:	bne	14ac0 <__assert_fail@plt+0x3008>
   14a80:	add	sp, sp, #44	; 0x2c
   14a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a88:	bl	117dc <bfd_get_error@plt>
   14a8c:	cmp	r0, #5
   14a90:	beq	14a48 <__assert_fail@plt+0x2f90>
   14a94:	ldr	r0, [r4]
   14a98:	mov	r7, r9
   14a9c:	bl	14554 <__assert_fail@plt+0x2a9c>
   14aa0:	b	14a48 <__assert_fail@plt+0x2f90>
   14aa4:	mov	r0, r6
   14aa8:	mov	r7, r5
   14aac:	bl	14554 <__assert_fail@plt+0x2a9c>
   14ab0:	b	14a50 <__assert_fail@plt+0x2f98>
   14ab4:	bl	117ac <unlink@plt>
   14ab8:	mov	r0, r6
   14abc:	bl	11734 <free@plt>
   14ac0:	movw	r0, #35048	; 0x88e8
   14ac4:	movt	r0, #1
   14ac8:	bl	1186c <getenv@plt>
   14acc:	cmp	r0, #0
   14ad0:	beq	14e14 <__assert_fail@plt+0x335c>
   14ad4:	mov	r1, #0
   14ad8:	mov	r2, #10
   14adc:	bl	116e0 <strtol@plt>
   14ae0:	cmp	r0, #0
   14ae4:	str	r0, [sp, #32]
   14ae8:	beq	14e14 <__assert_fail@plt+0x335c>
   14aec:	movw	sl, #38624	; 0x96e0
   14af0:	movt	sl, #2
   14af4:	mov	r3, #1
   14af8:	mov	r2, #0
   14afc:	str	r3, [sp, #36]	; 0x24
   14b00:	str	r2, [sp, #16]
   14b04:	ldr	r6, [fp]
   14b08:	ldr	r3, [sp, #16]
   14b0c:	ldr	r2, [sp, #16]
   14b10:	lsl	r3, r3, #2
   14b14:	str	r3, [sp, #24]
   14b18:	ldr	r3, [r6, r2, lsl #2]
   14b1c:	cmp	r3, #0
   14b20:	beq	14e00 <__assert_fail@plt+0x3348>
   14b24:	ldr	r0, [r3]
   14b28:	ldr	r3, [sp, #16]
   14b2c:	add	r9, r3, #1
   14b30:	bl	118fc <strlen@plt>
   14b34:	ldr	r2, [sp, #32]
   14b38:	add	r5, r0, #16
   14b3c:	cmp	r5, r2
   14b40:	bge	14df0 <__assert_fail@plt+0x3338>
   14b44:	ldr	r2, [sp, #24]
   14b48:	add	r2, r2, #4
   14b4c:	str	r2, [sp, #20]
   14b50:	add	r4, r6, r2
   14b54:	ldr	r3, [r6, r2]
   14b58:	cmp	r3, #0
   14b5c:	beq	14b90 <__assert_fail@plt+0x30d8>
   14b60:	ldr	r6, [sp, #32]
   14b64:	b	14b78 <__assert_fail@plt+0x30c0>
   14b68:	ldr	r3, [r4, #4]!
   14b6c:	add	r9, r9, #1
   14b70:	cmp	r3, #0
   14b74:	beq	14b90 <__assert_fail@plt+0x30d8>
   14b78:	ldr	r0, [r3]
   14b7c:	add	r5, r5, #1
   14b80:	bl	118fc <strlen@plt>
   14b84:	add	r5, r5, r0
   14b88:	cmp	r5, r6
   14b8c:	blt	14b68 <__assert_fail@plt+0x30b0>
   14b90:	movw	r1, #35056	; 0x88f0
   14b94:	movw	r3, #35064	; 0x88f8
   14b98:	movt	r1, #1
   14b9c:	movt	r3, #1
   14ba0:	mov	r0, #1
   14ba4:	mov	r2, #15
   14ba8:	bl	11950 <__printf_chk@plt>
   14bac:	ldr	r3, [sp, #16]
   14bb0:	cmp	r9, r3
   14bb4:	ble	14c0c <__assert_fail@plt+0x3154>
   14bb8:	ldr	r3, [fp]
   14bbc:	ldr	r2, [sp, #24]
   14bc0:	ldr	r3, [r3, r2]
   14bc4:	cmp	r3, #0
   14bc8:	beq	14c0c <__assert_fail@plt+0x3154>
   14bcc:	ldr	r5, [sp, #20]
   14bd0:	ldr	r4, [sp, #16]
   14bd4:	b	14bec <__assert_fail@plt+0x3134>
   14bd8:	ldr	r3, [fp]
   14bdc:	ldr	r3, [r3, r5]
   14be0:	add	r5, r5, #4
   14be4:	cmp	r3, #0
   14be8:	beq	14c0c <__assert_fail@plt+0x3154>
   14bec:	ldr	r2, [r3]
   14bf0:	add	r4, r4, #1
   14bf4:	movw	r1, #33980	; 0x84bc
   14bf8:	mov	r0, #1
   14bfc:	movt	r1, #1
   14c00:	bl	11950 <__printf_chk@plt>
   14c04:	cmp	r4, r9
   14c08:	bne	14bd8 <__assert_fail@plt+0x3120>
   14c0c:	ldr	r1, [sl]
   14c10:	mov	r0, #10
   14c14:	bl	117e8 <_IO_putc@plt>
   14c18:	mov	r0, #0
   14c1c:	bl	15e88 <__assert_fail@plt+0x43d0>
   14c20:	mov	r8, #2
   14c24:	mov	r2, #1
   14c28:	str	r2, [sp, #28]
   14c2c:	str	r0, [sp, #12]
   14c30:	b	14c40 <__assert_fail@plt+0x3188>
   14c34:	add	r8, r8, #1
   14c38:	cmp	r8, #92	; 0x5c
   14c3c:	beq	14d90 <__assert_fail@plt+0x32d8>
   14c40:	mov	r1, #0
   14c44:	mov	r0, r8
   14c48:	bl	11920 <bfd_printable_arch_mach@plt>
   14c4c:	movw	r1, #35068	; 0x88fc
   14c50:	movt	r1, #1
   14c54:	bl	116d4 <strcmp@plt>
   14c58:	cmp	r0, #0
   14c5c:	beq	14c34 <__assert_fail@plt+0x317c>
   14c60:	mov	r1, #0
   14c64:	mov	r0, r8
   14c68:	bl	11920 <bfd_printable_arch_mach@plt>
   14c6c:	movw	r1, #35080	; 0x8908
   14c70:	mov	r2, #14
   14c74:	movt	r1, #1
   14c78:	mov	r3, r0
   14c7c:	mov	r0, #1
   14c80:	bl	11950 <__printf_chk@plt>
   14c84:	ldr	r3, [sp, #16]
   14c88:	cmp	r9, r3
   14c8c:	ble	14d78 <__assert_fail@plt+0x32c0>
   14c90:	ldr	r3, [fp]
   14c94:	ldr	r2, [sp, #24]
   14c98:	ldr	r4, [r3, r2]
   14c9c:	cmp	r4, #0
   14ca0:	beq	14d78 <__assert_fail@plt+0x32c0>
   14ca4:	ldr	r7, [sp, #20]
   14ca8:	ldr	r6, [sp, #16]
   14cac:	b	14cec <__assert_fail@plt+0x3234>
   14cb0:	movw	r1, #33980	; 0x84bc
   14cb4:	ldr	r2, [r4]
   14cb8:	mov	r0, #1
   14cbc:	movt	r1, #1
   14cc0:	bl	11950 <__printf_chk@plt>
   14cc4:	mov	r0, r5
   14cc8:	add	r6, r6, #1
   14ccc:	bl	11908 <bfd_close_all_done@plt>
   14cd0:	cmp	r6, r9
   14cd4:	beq	14d78 <__assert_fail@plt+0x32c0>
   14cd8:	ldr	r3, [fp]
   14cdc:	ldr	r4, [r3, r7]
   14ce0:	add	r7, r7, #4
   14ce4:	cmp	r4, #0
   14ce8:	beq	14d78 <__assert_fail@plt+0x32c0>
   14cec:	ldr	r0, [sp, #12]
   14cf0:	ldr	r1, [r4]
   14cf4:	bl	11980 <bfd_openw@plt>
   14cf8:	subs	r5, r0, #0
   14cfc:	beq	14de0 <__assert_fail@plt+0x3328>
   14d00:	mov	r1, #1
   14d04:	bl	118cc <bfd_set_format@plt>
   14d08:	subs	r3, r0, #0
   14d0c:	beq	14dbc <__assert_fail@plt+0x3304>
   14d10:	ldr	r3, [r5, #4]
   14d14:	mov	r0, r5
   14d18:	mov	r1, r8
   14d1c:	mov	r2, #0
   14d20:	ldr	r3, [r3, #336]	; 0x150
   14d24:	blx	r3
   14d28:	cmp	r0, #0
   14d2c:	bne	14cb0 <__assert_fail@plt+0x31f8>
   14d30:	ldr	r0, [r4]
   14d34:	bl	118fc <strlen@plt>
   14d38:	cmp	r0, #0
   14d3c:	beq	14d58 <__assert_fail@plt+0x32a0>
   14d40:	mov	r4, r0
   14d44:	mov	r0, #45	; 0x2d
   14d48:	ldr	r1, [sl]
   14d4c:	bl	117e8 <_IO_putc@plt>
   14d50:	subs	r4, r4, #1
   14d54:	bne	14d44 <__assert_fail@plt+0x328c>
   14d58:	mov	r0, #32
   14d5c:	ldr	r1, [sl]
   14d60:	bl	117e8 <_IO_putc@plt>
   14d64:	cmp	r5, #0
   14d68:	bne	14cc4 <__assert_fail@plt+0x320c>
   14d6c:	add	r6, r6, #1
   14d70:	cmp	r6, r9
   14d74:	bne	14cd8 <__assert_fail@plt+0x3220>
   14d78:	mov	r0, #10
   14d7c:	ldr	r1, [sl]
   14d80:	add	r8, r8, #1
   14d84:	bl	117e8 <_IO_putc@plt>
   14d88:	cmp	r8, #92	; 0x5c
   14d8c:	bne	14c40 <__assert_fail@plt+0x3188>
   14d90:	ldr	r2, [sp, #28]
   14d94:	ldr	r3, [sp, #36]	; 0x24
   14d98:	cmp	r2, #0
   14d9c:	ldr	r0, [sp, #12]
   14da0:	moveq	r3, #0
   14da4:	str	r3, [sp, #36]	; 0x24
   14da8:	bl	117ac <unlink@plt>
   14dac:	ldr	r0, [sp, #12]
   14db0:	bl	11734 <free@plt>
   14db4:	str	r9, [sp, #16]
   14db8:	b	14b04 <__assert_fail@plt+0x304c>
   14dbc:	str	r3, [sp, #8]
   14dc0:	bl	117dc <bfd_get_error@plt>
   14dc4:	ldr	r3, [sp, #8]
   14dc8:	cmp	r0, #5
   14dcc:	beq	14d30 <__assert_fail@plt+0x3278>
   14dd0:	ldr	r0, [r4]
   14dd4:	str	r3, [sp, #28]
   14dd8:	bl	14554 <__assert_fail@plt+0x2a9c>
   14ddc:	b	14d30 <__assert_fail@plt+0x3278>
   14de0:	ldr	r0, [r4]
   14de4:	str	r5, [sp, #28]
   14de8:	bl	14554 <__assert_fail@plt+0x2a9c>
   14dec:	b	14d30 <__assert_fail@plt+0x3278>
   14df0:	ldr	r3, [sp, #24]
   14df4:	add	r3, r3, #4
   14df8:	str	r3, [sp, #20]
   14dfc:	b	14b90 <__assert_fail@plt+0x30d8>
   14e00:	ldr	r3, [sp, #36]	; 0x24
   14e04:	rsbs	r0, r3, #1
   14e08:	movcc	r0, #0
   14e0c:	add	sp, sp, #44	; 0x2c
   14e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e14:	mov	r2, #80	; 0x50
   14e18:	str	r2, [sp, #32]
   14e1c:	b	14aec <__assert_fail@plt+0x3034>
   14e20:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e24:	movw	r6, #37800	; 0x93a8
   14e28:	movt	r6, #2
   14e2c:	sub	sp, sp, #196	; 0xc4
   14e30:	cmp	r2, #0
   14e34:	mov	r8, r0
   14e38:	ldr	r3, [r6]
   14e3c:	mov	r7, r1
   14e40:	str	r3, [sp, #188]	; 0xbc
   14e44:	bne	14e78 <__assert_fail@plt+0x33c0>
   14e48:	ldr	r3, [r7]
   14e4c:	mov	r0, r8
   14e50:	movw	r2, #34748	; 0x87bc
   14e54:	mov	r1, #1
   14e58:	movt	r2, #1
   14e5c:	bl	1195c <__fprintf_chk@plt>
   14e60:	ldr	r2, [sp, #188]	; 0xbc
   14e64:	ldr	r3, [r6]
   14e68:	cmp	r2, r3
   14e6c:	bne	14f50 <__assert_fail@plt+0x3498>
   14e70:	add	sp, sp, #196	; 0xc4
   14e74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14e78:	ldr	r3, [r1, #4]
   14e7c:	mov	r0, r1
   14e80:	add	r1, sp, #32
   14e84:	ldr	r3, [r3, #252]	; 0xfc
   14e88:	blx	r3
   14e8c:	cmp	r0, #0
   14e90:	bne	14e48 <__assert_fail@plt+0x3390>
   14e94:	ldr	r3, [sp, #112]	; 0x70
   14e98:	add	r0, sp, #192	; 0xc0
   14e9c:	str	r3, [r0, #-164]!	; 0xffffff5c
   14ea0:	bl	1177c <ctime@plt>
   14ea4:	subs	r3, r0, #0
   14ea8:	beq	14f24 <__assert_fail@plt+0x346c>
   14eac:	add	r9, sp, #148	; 0x94
   14eb0:	add	r2, r3, #4
   14eb4:	mov	r1, #1
   14eb8:	add	r3, r3, #20
   14ebc:	str	r2, [sp]
   14ec0:	mov	r0, r9
   14ec4:	str	r3, [sp, #4]
   14ec8:	mov	r2, #40	; 0x28
   14ecc:	movw	r3, #35108	; 0x8924
   14ed0:	movt	r3, #1
   14ed4:	bl	11938 <__sprintf_chk@plt>
   14ed8:	ldr	r0, [sp, #48]	; 0x30
   14edc:	add	r1, sp, #136	; 0x88
   14ee0:	bl	1546c <__assert_fail@plt+0x39b4>
   14ee4:	ldr	r1, [sp, #56]	; 0x38
   14ee8:	ldr	r3, [sp, #60]	; 0x3c
   14eec:	movw	r2, #35120	; 0x8930
   14ef0:	ldrd	r4, [sp, #80]	; 0x50
   14ef4:	movt	r2, #1
   14ef8:	str	r1, [sp]
   14efc:	mov	r0, r8
   14f00:	str	r3, [sp, #4]
   14f04:	mov	r1, #1
   14f08:	str	r9, [sp, #16]
   14f0c:	add	r3, sp, #137	; 0x89
   14f10:	strd	r4, [sp, #8]
   14f14:	mov	ip, #0
   14f18:	strb	ip, [sp, #146]	; 0x92
   14f1c:	bl	1195c <__fprintf_chk@plt>
   14f20:	b	14e48 <__assert_fail@plt+0x3390>
   14f24:	mov	r2, #5
   14f28:	movw	r1, #35088	; 0x8910
   14f2c:	movt	r1, #1
   14f30:	add	r9, sp, #148	; 0x94
   14f34:	bl	11788 <dcgettext@plt>
   14f38:	mov	r1, #1
   14f3c:	mov	r2, #40	; 0x28
   14f40:	mov	r3, r0
   14f44:	mov	r0, r9
   14f48:	bl	11938 <__sprintf_chk@plt>
   14f4c:	b	14ed8 <__assert_fail@plt+0x3420>
   14f50:	bl	117a0 <__stack_chk_fail@plt>
   14f54:	push	{r4, lr}
   14f58:	bl	14494 <__assert_fail@plt+0x29dc>
   14f5c:	mov	r4, r0
   14f60:	bl	11878 <mkstemp64@plt>
   14f64:	cmn	r0, #1
   14f68:	beq	14f78 <__assert_fail@plt+0x34c0>
   14f6c:	bl	11aa0 <close@plt>
   14f70:	mov	r0, r4
   14f74:	pop	{r4, pc}
   14f78:	mov	r0, r4
   14f7c:	bl	11734 <free@plt>
   14f80:	mov	r0, #0
   14f84:	pop	{r4, pc}
   14f88:	push	{r3, lr}
   14f8c:	bl	14494 <__assert_fail@plt+0x29dc>
   14f90:	pop	{r3, lr}
   14f94:	b	119e0 <mkdtemp@plt>
   14f98:	push	{r4, r5, r6, lr}
   14f9c:	movw	r4, #37800	; 0x93a8
   14fa0:	movt	r4, #2
   14fa4:	sub	sp, sp, #8
   14fa8:	mov	r6, r1
   14fac:	mov	r2, #0
   14fb0:	ldr	r3, [r4]
   14fb4:	mov	r1, sp
   14fb8:	mov	r5, r0
   14fbc:	str	r3, [sp, #4]
   14fc0:	bl	116c8 <bfd_scan_vma@plt>
   14fc4:	ldr	r3, [sp]
   14fc8:	ldrb	r3, [r3]
   14fcc:	cmp	r3, #0
   14fd0:	bne	14ff0 <__assert_fail@plt+0x3538>
   14fd4:	ldr	r2, [sp, #4]
   14fd8:	ldr	r3, [r4]
   14fdc:	cmp	r2, r3
   14fe0:	bne	14fec <__assert_fail@plt+0x3534>
   14fe4:	add	sp, sp, #8
   14fe8:	pop	{r4, r5, r6, pc}
   14fec:	bl	117a0 <__stack_chk_fail@plt>
   14ff0:	mov	r2, #5
   14ff4:	movw	r1, #35144	; 0x8948
   14ff8:	mov	r0, #0
   14ffc:	movt	r1, #1
   15000:	bl	11788 <dcgettext@plt>
   15004:	mov	r1, r6
   15008:	mov	r2, r5
   1500c:	bl	14658 <__assert_fail@plt+0x2ba0>
   15010:	push	{r4, r5, r6, r7, lr}
   15014:	movw	r4, #37800	; 0x93a8
   15018:	movt	r4, #2
   1501c:	sub	sp, sp, #116	; 0x74
   15020:	mov	r1, r0
   15024:	mov	r5, r0
   15028:	ldr	r3, [r4]
   1502c:	mov	r2, sp
   15030:	mov	r0, #3
   15034:	str	r3, [sp, #108]	; 0x6c
   15038:	bl	11a7c <__xstat64@plt>
   1503c:	cmp	r0, #0
   15040:	blt	15090 <__assert_fail@plt+0x35d8>
   15044:	ldr	r3, [sp, #16]
   15048:	and	r3, r3, #61440	; 0xf000
   1504c:	cmp	r3, #32768	; 0x8000
   15050:	bne	150ec <__assert_fail@plt+0x3634>
   15054:	ldrd	r2, [sp, #48]	; 0x30
   15058:	cmp	r2, #0
   1505c:	sbcs	r1, r3, #0
   15060:	movwlt	r1, #35268	; 0x89c4
   15064:	movlt	r0, #0
   15068:	movtlt	r1, #1
   1506c:	blt	150f8 <__assert_fail@plt+0x3640>
   15070:	mov	r0, r2
   15074:	mov	r1, r3
   15078:	ldr	r2, [sp, #108]	; 0x6c
   1507c:	ldr	r3, [r4]
   15080:	cmp	r2, r3
   15084:	bne	15114 <__assert_fail@plt+0x365c>
   15088:	add	sp, sp, #116	; 0x74
   1508c:	pop	{r4, r5, r6, r7, pc}
   15090:	bl	1192c <__errno_location@plt>
   15094:	ldr	r3, [r0]
   15098:	mov	r6, r0
   1509c:	cmp	r3, #2
   150a0:	movweq	r1, #35164	; 0x895c
   150a4:	moveq	r0, #0
   150a8:	movteq	r1, #1
   150ac:	beq	150f8 <__assert_fail@plt+0x3640>
   150b0:	mov	r2, #5
   150b4:	movw	r1, #35184	; 0x8970
   150b8:	mov	r0, #0
   150bc:	movt	r1, #1
   150c0:	bl	11788 <dcgettext@plt>
   150c4:	mov	r7, r0
   150c8:	ldr	r0, [r6]
   150cc:	bl	118a8 <strerror@plt>
   150d0:	mov	r1, r5
   150d4:	mov	r2, r0
   150d8:	mov	r0, r7
   150dc:	bl	14690 <__assert_fail@plt+0x2bd8>
   150e0:	mvn	r0, #0
   150e4:	mov	r1, r0
   150e8:	b	15078 <__assert_fail@plt+0x35c0>
   150ec:	movw	r1, #35228	; 0x899c
   150f0:	movt	r1, #1
   150f4:	mov	r0, #0
   150f8:	mov	r2, #5
   150fc:	bl	11788 <dcgettext@plt>
   15100:	mov	r1, r5
   15104:	bl	14690 <__assert_fail@plt+0x2bd8>
   15108:	mvn	r0, #0
   1510c:	mov	r1, r0
   15110:	b	15078 <__assert_fail@plt+0x35c0>
   15114:	bl	117a0 <__stack_chk_fail@plt>
   15118:	push	{r4, r5, r6, r7, r8, lr}
   1511c:	subs	r5, r0, #0
   15120:	sub	sp, sp, #8
   15124:	beq	151f8 <__assert_fail@plt+0x3740>
   15128:	ldr	r3, [r5, #148]	; 0x94
   1512c:	cmp	r3, #0
   15130:	beq	151d8 <__assert_fail@plt+0x3720>
   15134:	ldrb	r2, [r3, #44]	; 0x2c
   15138:	tst	r2, #1
   1513c:	bne	151d8 <__assert_fail@plt+0x3720>
   15140:	ldr	r6, [r3]
   15144:	movw	r4, #38836	; 0x97b4
   15148:	movt	r4, #2
   1514c:	mov	r0, r6
   15150:	bl	118fc <strlen@plt>
   15154:	ldr	r8, [r5]
   15158:	mov	r7, r0
   1515c:	mov	r0, r8
   15160:	bl	118fc <strlen@plt>
   15164:	ldr	r3, [r4]
   15168:	add	r0, r7, r0
   1516c:	add	r7, r0, #3
   15170:	cmp	r7, r3
   15174:	bls	151e4 <__assert_fail@plt+0x372c>
   15178:	cmp	r3, #0
   1517c:	bne	151ec <__assert_fail@plt+0x3734>
   15180:	add	r0, r7, r7, lsr #1
   15184:	mov	r1, #0
   15188:	str	r0, [r4]
   1518c:	bl	11794 <bfd_malloc@plt>
   15190:	movw	r6, #38836	; 0x97b4
   15194:	movt	r6, #2
   15198:	cmp	r0, #0
   1519c:	str	r0, [r4, #4]
   151a0:	beq	151d4 <__assert_fail@plt+0x371c>
   151a4:	ldr	r3, [r5, #148]	; 0x94
   151a8:	ldr	r8, [r5]
   151ac:	ldr	r6, [r3]
   151b0:	stm	sp, {r6, r8}
   151b4:	mov	r1, #1
   151b8:	mvn	r2, #0
   151bc:	movw	r3, #35360	; 0x8a20
   151c0:	movt	r3, #1
   151c4:	bl	11938 <__sprintf_chk@plt>
   151c8:	ldr	r0, [r4, #4]
   151cc:	add	sp, sp, #8
   151d0:	pop	{r4, r5, r6, r7, r8, pc}
   151d4:	str	r0, [r6]
   151d8:	ldr	r0, [r5]
   151dc:	add	sp, sp, #8
   151e0:	pop	{r4, r5, r6, r7, r8, pc}
   151e4:	ldr	r0, [r4, #4]
   151e8:	b	151b0 <__assert_fail@plt+0x36f8>
   151ec:	ldr	r0, [r4, #4]
   151f0:	bl	11734 <free@plt>
   151f4:	b	15180 <__assert_fail@plt+0x36c8>
   151f8:	movw	r0, #35328	; 0x8a00
   151fc:	movw	r1, #35348	; 0x8a14
   15200:	movw	r3, #34652	; 0x875c
   15204:	movt	r0, #1
   15208:	movt	r1, #1
   1520c:	movw	r2, #606	; 0x25e
   15210:	movt	r3, #1
   15214:	bl	11ab8 <__assert_fail@plt>
   15218:	push	{r3}		; (str r3, [sp, #-4]!)
   1521c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15220:	movw	r5, #37800	; 0x93a8
   15224:	movt	r5, #2
   15228:	sub	sp, sp, #20
   1522c:	mov	sl, r1
   15230:	mov	r8, r2
   15234:	ldr	r3, [r5]
   15238:	mov	r6, r0
   1523c:	ldr	r7, [sp, #52]	; 0x34
   15240:	movw	r4, #37812	; 0x93b4
   15244:	movt	r4, #2
   15248:	str	r3, [sp, #12]
   1524c:	bl	117dc <bfd_get_error@plt>
   15250:	bl	11a04 <bfd_errmsg@plt>
   15254:	movw	ip, #38624	; 0x96e0
   15258:	movt	ip, #2
   1525c:	mov	r9, r0
   15260:	ldr	r0, [ip]
   15264:	bl	116f8 <fflush@plt>
   15268:	movw	ip, #38848	; 0x97c0
   1526c:	movt	ip, #2
   15270:	ldr	r1, [r4]
   15274:	add	r3, sp, #56	; 0x38
   15278:	str	r3, [sp, #8]
   1527c:	ldr	r0, [ip]
   15280:	bl	11a88 <fputs@plt>
   15284:	cmp	sl, #0
   15288:	beq	15330 <__assert_fail@plt+0x3878>
   1528c:	cmp	r6, #0
   15290:	beq	1534c <__assert_fail@plt+0x3894>
   15294:	cmp	r8, #0
   15298:	beq	15330 <__assert_fail@plt+0x3878>
   1529c:	ldr	r2, [r8]
   152a0:	cmp	r2, #0
   152a4:	beq	15330 <__assert_fail@plt+0x3878>
   152a8:	str	r2, [sp]
   152ac:	mov	r3, r6
   152b0:	movw	r2, #35368	; 0x8a28
   152b4:	ldr	r0, [r4]
   152b8:	mov	r1, #1
   152bc:	movt	r2, #1
   152c0:	bl	1195c <__fprintf_chk@plt>
   152c4:	cmp	r7, #0
   152c8:	beq	152f8 <__assert_fail@plt+0x3840>
   152cc:	mov	r1, #1
   152d0:	mov	r2, #2
   152d4:	ldr	r3, [r4]
   152d8:	movw	r0, #35380	; 0x8a34
   152dc:	movt	r0, #1
   152e0:	bl	117f4 <fwrite@plt>
   152e4:	mov	r2, r7
   152e8:	ldr	r0, [r4]
   152ec:	mov	r1, #1
   152f0:	ldr	r3, [sp, #8]
   152f4:	bl	118b4 <__vfprintf_chk@plt>
   152f8:	mov	r3, r9
   152fc:	ldr	r0, [r4]
   15300:	movw	r2, #35384	; 0x8a38
   15304:	mov	r1, #1
   15308:	movt	r2, #1
   1530c:	bl	1195c <__fprintf_chk@plt>
   15310:	ldr	r2, [sp, #12]
   15314:	ldr	r3, [r5]
   15318:	cmp	r2, r3
   1531c:	bne	1535c <__assert_fail@plt+0x38a4>
   15320:	add	sp, sp, #20
   15324:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15328:	add	sp, sp, #4
   1532c:	bx	lr
   15330:	mov	r3, r6
   15334:	movw	r2, #35376	; 0x8a30
   15338:	ldr	r0, [r4]
   1533c:	movt	r2, #1
   15340:	mov	r1, #1
   15344:	bl	1195c <__fprintf_chk@plt>
   15348:	b	152c4 <__assert_fail@plt+0x380c>
   1534c:	mov	r0, sl
   15350:	bl	15118 <__assert_fail@plt+0x3660>
   15354:	mov	r6, r0
   15358:	b	15294 <__assert_fail@plt+0x37dc>
   1535c:	bl	117a0 <__stack_chk_fail@plt>
   15360:	ldrb	r3, [r0]
   15364:	cmp	r3, #47	; 0x2f
   15368:	beq	153fc <__assert_fail@plt+0x3944>
   1536c:	cmp	r3, #0
   15370:	beq	153cc <__assert_fail@plt+0x3914>
   15374:	cmp	r3, #46	; 0x2e
   15378:	beq	153d4 <__assert_fail@plt+0x391c>
   1537c:	cmp	r3, #0
   15380:	cmpne	r3, #47	; 0x2f
   15384:	beq	153a4 <__assert_fail@plt+0x38ec>
   15388:	add	r2, r0, #1
   1538c:	mov	r0, r2
   15390:	add	r2, r2, #1
   15394:	ldrb	r3, [r0]
   15398:	cmp	r3, #47	; 0x2f
   1539c:	cmpne	r3, #0
   153a0:	bne	1538c <__assert_fail@plt+0x38d4>
   153a4:	cmp	r3, #47	; 0x2f
   153a8:	bne	1536c <__assert_fail@plt+0x38b4>
   153ac:	add	r2, r0, #1
   153b0:	mov	r0, r2
   153b4:	add	r2, r2, #1
   153b8:	ldrb	r3, [r0]
   153bc:	cmp	r3, #47	; 0x2f
   153c0:	beq	153b0 <__assert_fail@plt+0x38f8>
   153c4:	cmp	r3, #0
   153c8:	bne	15374 <__assert_fail@plt+0x38bc>
   153cc:	mov	r0, #1
   153d0:	bx	lr
   153d4:	ldrb	r3, [r0, #1]
   153d8:	cmp	r3, #46	; 0x2e
   153dc:	addne	r0, r0, #1
   153e0:	bne	1537c <__assert_fail@plt+0x38c4>
   153e4:	ldrb	r3, [r0, #2]
   153e8:	add	r0, r0, #2
   153ec:	cmp	r3, #0
   153f0:	beq	153fc <__assert_fail@plt+0x3944>
   153f4:	cmp	r3, #47	; 0x2f
   153f8:	bne	15388 <__assert_fail@plt+0x38d0>
   153fc:	mov	r0, #0
   15400:	bx	lr
   15404:	push	{r3, lr}
   15408:	mov	r2, r0
   1540c:	movw	r1, #35392	; 0x8a40
   15410:	movw	r3, #34984	; 0x88a8
   15414:	movt	r1, #1
   15418:	movt	r3, #1
   1541c:	mov	r0, #1
   15420:	bl	11950 <__printf_chk@plt>
   15424:	mov	r2, #5
   15428:	movw	r1, #35404	; 0x8a4c
   1542c:	mov	r0, #0
   15430:	movt	r1, #1
   15434:	bl	11788 <dcgettext@plt>
   15438:	mov	r1, r0
   1543c:	mov	r0, #1
   15440:	bl	11950 <__printf_chk@plt>
   15444:	mov	r2, #5
   15448:	movw	r1, #35456	; 0x8a80
   1544c:	mov	r0, #0
   15450:	movt	r1, #1
   15454:	bl	11788 <dcgettext@plt>
   15458:	mov	r1, r0
   1545c:	mov	r0, #1
   15460:	bl	11950 <__printf_chk@plt>
   15464:	mov	r0, #0
   15468:	bl	118e4 <exit@plt>
   1546c:	and	r3, r0, #61440	; 0xf000
   15470:	cmp	r3, #16384	; 0x4000
   15474:	moveq	r3, #100	; 0x64
   15478:	beq	154b8 <__assert_fail@plt+0x3a00>
   1547c:	cmp	r3, #40960	; 0xa000
   15480:	moveq	r3, #108	; 0x6c
   15484:	beq	154b8 <__assert_fail@plt+0x3a00>
   15488:	cmp	r3, #24576	; 0x6000
   1548c:	moveq	r3, #98	; 0x62
   15490:	beq	154b8 <__assert_fail@plt+0x3a00>
   15494:	cmp	r3, #8192	; 0x2000
   15498:	moveq	r3, #99	; 0x63
   1549c:	beq	154b8 <__assert_fail@plt+0x3a00>
   154a0:	cmp	r3, #49152	; 0xc000
   154a4:	moveq	r3, #115	; 0x73
   154a8:	beq	154b8 <__assert_fail@plt+0x3a00>
   154ac:	cmp	r3, #4096	; 0x1000
   154b0:	movne	r3, #45	; 0x2d
   154b4:	moveq	r3, #112	; 0x70
   154b8:	tst	r0, #256	; 0x100
   154bc:	strb	r3, [r1]
   154c0:	moveq	r3, #45	; 0x2d
   154c4:	movne	r3, #114	; 0x72
   154c8:	tst	r0, #128	; 0x80
   154cc:	strb	r3, [r1, #1]
   154d0:	moveq	r3, #45	; 0x2d
   154d4:	movne	r3, #119	; 0x77
   154d8:	tst	r0, #64	; 0x40
   154dc:	strb	r3, [r1, #2]
   154e0:	moveq	ip, #45	; 0x2d
   154e4:	movne	ip, #120	; 0x78
   154e8:	tst	r0, #32
   154ec:	strb	ip, [r1, #3]
   154f0:	moveq	r3, #45	; 0x2d
   154f4:	movne	r3, #114	; 0x72
   154f8:	tst	r0, #16
   154fc:	strb	r3, [r1, #4]
   15500:	moveq	r3, #45	; 0x2d
   15504:	movne	r3, #119	; 0x77
   15508:	tst	r0, #8
   1550c:	strb	r3, [r1, #5]
   15510:	moveq	r2, #45	; 0x2d
   15514:	movne	r2, #120	; 0x78
   15518:	tst	r0, #4
   1551c:	strb	r2, [r1, #6]
   15520:	moveq	r3, #45	; 0x2d
   15524:	movne	r3, #114	; 0x72
   15528:	tst	r0, #2
   1552c:	strb	r3, [r1, #7]
   15530:	moveq	r3, #45	; 0x2d
   15534:	movne	r3, #119	; 0x77
   15538:	tst	r0, #1
   1553c:	strb	r3, [r1, #8]
   15540:	moveq	r3, #45	; 0x2d
   15544:	movne	r3, #120	; 0x78
   15548:	tst	r0, #2048	; 0x800
   1554c:	strb	r3, [r1, #9]
   15550:	beq	15564 <__assert_fail@plt+0x3aac>
   15554:	cmp	ip, #120	; 0x78
   15558:	movne	ip, #83	; 0x53
   1555c:	moveq	ip, #115	; 0x73
   15560:	strb	ip, [r1, #3]
   15564:	tst	r0, #1024	; 0x400
   15568:	beq	1557c <__assert_fail@plt+0x3ac4>
   1556c:	cmp	r2, #120	; 0x78
   15570:	movne	r2, #83	; 0x53
   15574:	moveq	r2, #115	; 0x73
   15578:	strb	r2, [r1, #6]
   1557c:	tst	r0, #512	; 0x200
   15580:	bxeq	lr
   15584:	cmp	r3, #120	; 0x78
   15588:	movne	r3, #84	; 0x54
   1558c:	moveq	r3, #116	; 0x74
   15590:	strb	r3, [r1, #9]
   15594:	bx	lr
   15598:	push	{r3, r4, r5, r6, r7, lr}
   1559c:	subs	r4, r0, #0
   155a0:	beq	15624 <__assert_fail@plt+0x3b6c>
   155a4:	ldr	r3, [r4]
   155a8:	cmp	r3, #0
   155ac:	beq	15614 <__assert_fail@plt+0x3b5c>
   155b0:	mov	r2, r4
   155b4:	mov	r3, #0
   155b8:	ldr	r1, [r2, #4]!
   155bc:	add	r3, r3, #1
   155c0:	cmp	r1, #0
   155c4:	bne	155b8 <__assert_fail@plt+0x3b00>
   155c8:	add	r3, r3, #1
   155cc:	lsl	r0, r3, #2
   155d0:	bl	11800 <xmalloc@plt>
   155d4:	mov	r6, r0
   155d8:	ldr	r0, [r4]
   155dc:	cmp	r0, #0
   155e0:	beq	1561c <__assert_fail@plt+0x3b64>
   155e4:	rsb	r7, r4, #4
   155e8:	mov	r5, #0
   155ec:	bl	11818 <xstrdup@plt>
   155f0:	str	r0, [r6, r5]
   155f4:	add	r5, r7, r4
   155f8:	ldr	r0, [r4, #4]!
   155fc:	cmp	r0, #0
   15600:	bne	155ec <__assert_fail@plt+0x3b34>
   15604:	mov	r3, #0
   15608:	mov	r0, r6
   1560c:	str	r3, [r6, r5]
   15610:	pop	{r3, r4, r5, r6, r7, pc}
   15614:	mov	r0, #4
   15618:	b	155d0 <__assert_fail@plt+0x3b18>
   1561c:	mov	r5, r0
   15620:	b	15604 <__assert_fail@plt+0x3b4c>
   15624:	mov	r0, r4
   15628:	pop	{r3, r4, r5, r6, r7, pc}
   1562c:	push	{r3, r4, r5, lr}
   15630:	subs	r5, r0, #0
   15634:	popeq	{r3, r4, r5, pc}
   15638:	ldr	r0, [r5]
   1563c:	cmp	r0, #0
   15640:	movne	r4, r5
   15644:	beq	15658 <__assert_fail@plt+0x3ba0>
   15648:	bl	11734 <free@plt>
   1564c:	ldr	r0, [r4, #4]!
   15650:	cmp	r0, #0
   15654:	bne	15648 <__assert_fail@plt+0x3b90>
   15658:	mov	r0, r5
   1565c:	pop	{r3, r4, r5, lr}
   15660:	b	11734 <free@plt>
   15664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15668:	subs	r4, r0, #0
   1566c:	ldr	r5, [pc, #536]	; 1588c <__assert_fail@plt+0x3dd4>
   15670:	sub	sp, sp, #12
   15674:	add	r5, pc, r5
   15678:	beq	15884 <__assert_fail@plt+0x3dcc>
   1567c:	bl	118fc <strlen@plt>
   15680:	mov	r9, #0
   15684:	mov	r7, r9
   15688:	mov	r8, r9
   1568c:	mov	r6, r9
   15690:	mov	fp, r9
   15694:	mov	sl, r9
   15698:	add	r0, r0, #1
   1569c:	bl	11800 <xmalloc@plt>
   156a0:	ldr	r3, [pc, #488]	; 15890 <__assert_fail@plt+0x3dd8>
   156a4:	str	r0, [sp]
   156a8:	ldr	r5, [r5, r3]
   156ac:	ldrb	r3, [r4]
   156b0:	lsl	r3, r3, #1
   156b4:	ldrh	r3, [r5, r3]
   156b8:	tst	r3, #64	; 0x40
   156bc:	beq	156e0 <__assert_fail@plt+0x3c28>
   156c0:	mov	r3, r4
   156c4:	ldrb	r2, [r3, #1]
   156c8:	add	r4, r3, #1
   156cc:	mov	r3, r4
   156d0:	lsl	r2, r2, #1
   156d4:	ldrh	r2, [r5, r2]
   156d8:	tst	r2, #64	; 0x40
   156dc:	bne	156c4 <__assert_fail@plt+0x3c0c>
   156e0:	cmp	r7, #0
   156e4:	beq	156fc <__assert_fail@plt+0x3c44>
   156e8:	sub	r3, r7, #1
   156ec:	cmp	r9, r3
   156f0:	addlt	r3, r8, r9, lsl #2
   156f4:	strlt	r3, [sp, #4]
   156f8:	blt	15728 <__assert_fail@plt+0x3c70>
   156fc:	cmp	r8, #0
   15700:	beq	15870 <__assert_fail@plt+0x3db8>
   15704:	lsl	r7, r7, #1
   15708:	mov	r0, r8
   1570c:	lsl	r1, r7, #2
   15710:	bl	117b8 <xrealloc@plt>
   15714:	mov	r8, r0
   15718:	add	r3, r8, r9, lsl #2
   1571c:	str	r3, [sp, #4]
   15720:	mov	r3, #0
   15724:	str	r3, [r8, r9, lsl #2]
   15728:	ldrb	r3, [r4]
   1572c:	cmp	r3, #0
   15730:	beq	157e8 <__assert_fail@plt+0x3d30>
   15734:	mov	r2, r4
   15738:	ldr	lr, [sp]
   1573c:	b	15760 <__assert_fail@plt+0x3ca8>
   15740:	strb	r3, [lr]
   15744:	add	lr, lr, #1
   15748:	mov	r6, #0
   1574c:	ldrb	r3, [r2, #1]
   15750:	add	r2, r2, #1
   15754:	cmp	r3, #0
   15758:	mov	r4, r2
   1575c:	beq	157ec <__assert_fail@plt+0x3d34>
   15760:	lsl	r1, r3, #1
   15764:	mov	r4, r2
   15768:	ldrh	r1, [r5, r1]
   1576c:	tst	r1, #64	; 0x40
   15770:	beq	15780 <__assert_fail@plt+0x3cc8>
   15774:	orr	r0, r6, fp
   15778:	orrs	r0, r0, sl
   1577c:	beq	15864 <__assert_fail@plt+0x3dac>
   15780:	cmp	r6, #0
   15784:	bne	15740 <__assert_fail@plt+0x3c88>
   15788:	cmp	r3, #92	; 0x5c
   1578c:	moveq	r6, #1
   15790:	beq	1574c <__assert_fail@plt+0x3c94>
   15794:	cmp	sl, #0
   15798:	beq	157b4 <__assert_fail@plt+0x3cfc>
   1579c:	cmp	r3, #39	; 0x27
   157a0:	moveq	sl, r6
   157a4:	beq	1574c <__assert_fail@plt+0x3c94>
   157a8:	strb	r3, [lr]
   157ac:	add	lr, lr, #1
   157b0:	b	1574c <__assert_fail@plt+0x3c94>
   157b4:	cmp	fp, #0
   157b8:	beq	157cc <__assert_fail@plt+0x3d14>
   157bc:	cmp	r3, #34	; 0x22
   157c0:	moveq	fp, sl
   157c4:	bne	157a8 <__assert_fail@plt+0x3cf0>
   157c8:	b	1574c <__assert_fail@plt+0x3c94>
   157cc:	cmp	r3, #39	; 0x27
   157d0:	moveq	sl, #1
   157d4:	beq	1574c <__assert_fail@plt+0x3c94>
   157d8:	cmp	r3, #34	; 0x22
   157dc:	moveq	fp, #1
   157e0:	bne	157a8 <__assert_fail@plt+0x3cf0>
   157e4:	b	1574c <__assert_fail@plt+0x3c94>
   157e8:	ldr	lr, [sp]
   157ec:	mov	r3, #0
   157f0:	ldr	r0, [sp]
   157f4:	strb	r3, [lr]
   157f8:	add	r9, r9, #1
   157fc:	bl	11818 <xstrdup@plt>
   15800:	ldr	r3, [sp, #4]
   15804:	str	r0, [r3]
   15808:	mov	r3, #0
   1580c:	str	r3, [r8, r9, lsl #2]
   15810:	ldrb	r2, [r4]
   15814:	lsl	r3, r2, #1
   15818:	ldrh	r3, [r5, r3]
   1581c:	tst	r3, #64	; 0x40
   15820:	beq	15844 <__assert_fail@plt+0x3d8c>
   15824:	mov	r3, r4
   15828:	ldrb	r2, [r3, #1]
   1582c:	add	r4, r3, #1
   15830:	mov	r3, r4
   15834:	lsl	r1, r2, #1
   15838:	ldrh	r1, [r5, r1]
   1583c:	tst	r1, #64	; 0x40
   15840:	bne	15828 <__assert_fail@plt+0x3d70>
   15844:	cmp	r2, #0
   15848:	bne	156ac <__assert_fail@plt+0x3bf4>
   1584c:	ldr	r0, [sp]
   15850:	mov	r9, r8
   15854:	bl	11734 <free@plt>
   15858:	mov	r0, r9
   1585c:	add	sp, sp, #12
   15860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15864:	mov	r6, r0
   15868:	mov	sl, r0
   1586c:	b	157ec <__assert_fail@plt+0x3d34>
   15870:	mov	r0, #32
   15874:	mov	r7, #8
   15878:	bl	11800 <xmalloc@plt>
   1587c:	mov	r8, r0
   15880:	b	15718 <__assert_fail@plt+0x3c60>
   15884:	mov	r9, r4
   15888:	b	15858 <__assert_fail@plt+0x3da0>
   1588c:	andeq	r3, r1, r4, lsl #19
   15890:	andeq	r0, r0, ip, ror #2
   15894:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15898:	subs	r5, r1, #0
   1589c:	ldr	r8, [pc, #180]	; 15958 <__assert_fail@plt+0x3ea0>
   158a0:	add	r8, pc, r8
   158a4:	beq	15928 <__assert_fail@plt+0x3e70>
   158a8:	ldr	r6, [r0]
   158ac:	cmp	r6, #0
   158b0:	movne	r9, r0
   158b4:	beq	15950 <__assert_fail@plt+0x3e98>
   158b8:	ldrb	r4, [r6]
   158bc:	cmp	r4, #0
   158c0:	beq	15930 <__assert_fail@plt+0x3e78>
   158c4:	ldr	r3, [pc, #144]	; 1595c <__assert_fail@plt+0x3ea4>
   158c8:	ldr	r7, [r8, r3]
   158cc:	b	158f8 <__assert_fail@plt+0x3e40>
   158d0:	cmp	r4, #34	; 0x22
   158d4:	beq	1591c <__assert_fail@plt+0x3e64>
   158d8:	mov	r0, r4
   158dc:	mov	r1, r5
   158e0:	bl	119bc <fputc@plt>
   158e4:	cmn	r0, #1
   158e8:	beq	15928 <__assert_fail@plt+0x3e70>
   158ec:	ldrb	r4, [r6, #1]!
   158f0:	cmp	r4, #0
   158f4:	beq	15930 <__assert_fail@plt+0x3e78>
   158f8:	lsl	r3, r4, #1
   158fc:	mov	r1, r5
   15900:	mov	r0, #92	; 0x5c
   15904:	ldrh	r3, [r7, r3]
   15908:	tst	r3, #64	; 0x40
   1590c:	bne	1591c <__assert_fail@plt+0x3e64>
   15910:	cmp	r4, #39	; 0x27
   15914:	cmpne	r4, r0
   15918:	bne	158d0 <__assert_fail@plt+0x3e18>
   1591c:	bl	119bc <fputc@plt>
   15920:	cmn	r0, #1
   15924:	bne	158d8 <__assert_fail@plt+0x3e20>
   15928:	mov	r0, #1
   1592c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15930:	mov	r0, #10
   15934:	mov	r1, r5
   15938:	bl	119bc <fputc@plt>
   1593c:	cmn	r0, #1
   15940:	beq	15928 <__assert_fail@plt+0x3e70>
   15944:	ldr	r6, [r9, #4]!
   15948:	cmp	r6, #0
   1594c:	bne	158b8 <__assert_fail@plt+0x3e00>
   15950:	mov	r0, #0
   15954:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15958:	andeq	r3, r1, r8, asr r7
   1595c:	andeq	r0, r0, ip, ror #2
   15960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15964:	sub	sp, sp, #28
   15968:	ldr	ip, [pc, #684]	; 15c1c <__assert_fail@plt+0x4164>
   1596c:	mov	r6, r1
   15970:	mov	sl, r0
   15974:	mov	r5, #0
   15978:	add	ip, pc, ip
   1597c:	str	ip, [sp, #12]
   15980:	ldr	ip, [pc, #664]	; 15c20 <__assert_fail@plt+0x4168>
   15984:	mov	r8, #2000	; 0x7d0
   15988:	ldr	r1, [r0]
   1598c:	add	ip, pc, ip
   15990:	mov	fp, ip
   15994:	b	1599c <__assert_fail@plt+0x3ee4>
   15998:	mov	r5, r4
   1599c:	add	r4, r5, #1
   159a0:	cmp	r4, r1
   159a4:	bge	15b98 <__assert_fail@plt+0x40e0>
   159a8:	ldr	r3, [r6]
   159ac:	lsl	r7, r4, #2
   159b0:	ldr	r0, [r3, r4, lsl #2]
   159b4:	ldrb	r2, [r0]
   159b8:	cmp	r2, #64	; 0x40
   159bc:	bne	15998 <__assert_fail@plt+0x3ee0>
   159c0:	subs	r8, r8, #1
   159c4:	beq	15bf0 <__assert_fail@plt+0x4138>
   159c8:	add	r0, r0, #1
   159cc:	mov	r1, fp
   159d0:	bl	119f8 <fopen64@plt>
   159d4:	subs	r9, r0, #0
   159d8:	beq	15b90 <__assert_fail@plt+0x40d8>
   159dc:	mov	r1, #0
   159e0:	mov	r2, #2
   159e4:	bl	11a70 <fseek@plt>
   159e8:	cmn	r0, #1
   159ec:	beq	15b88 <__assert_fail@plt+0x40d0>
   159f0:	mov	r0, r9
   159f4:	bl	11770 <ftell@plt>
   159f8:	cmn	r0, #1
   159fc:	mov	ip, r0
   15a00:	beq	15b88 <__assert_fail@plt+0x40d0>
   15a04:	mov	r1, #0
   15a08:	mov	r0, r9
   15a0c:	mov	r2, r1
   15a10:	str	ip, [sp, #4]
   15a14:	bl	11a70 <fseek@plt>
   15a18:	ldr	ip, [sp, #4]
   15a1c:	cmn	r0, #1
   15a20:	beq	15b88 <__assert_fail@plt+0x40d0>
   15a24:	add	r0, ip, #1
   15a28:	bl	11800 <xmalloc@plt>
   15a2c:	ldr	ip, [sp, #4]
   15a30:	mov	r3, r9
   15a34:	mov	r1, #1
   15a38:	mov	r2, ip
   15a3c:	str	r0, [sp, #16]
   15a40:	bl	11830 <fread@plt>
   15a44:	ldr	ip, [sp, #4]
   15a48:	cmp	ip, r0
   15a4c:	mov	r3, r0
   15a50:	beq	15a6c <__assert_fail@plt+0x3fb4>
   15a54:	mov	r0, r9
   15a58:	str	r3, [sp, #8]
   15a5c:	bl	11740 <ferror@plt>
   15a60:	ldr	r3, [sp, #8]
   15a64:	cmp	r0, #0
   15a68:	bne	15b88 <__assert_fail@plt+0x40d0>
   15a6c:	ldr	ip, [sp, #16]
   15a70:	mov	r0, #0
   15a74:	strb	r0, [ip, r3]
   15a78:	ldrb	r3, [ip]
   15a7c:	cmp	r3, #0
   15a80:	beq	15ac4 <__assert_fail@plt+0x400c>
   15a84:	ldr	r2, [pc, #408]	; 15c24 <__assert_fail@plt+0x416c>
   15a88:	lsl	r3, r3, #1
   15a8c:	ldr	ip, [sp, #12]
   15a90:	ldr	r1, [ip, r2]
   15a94:	ldrh	r3, [r1, r3]
   15a98:	tst	r3, #64	; 0x40
   15a9c:	beq	15ba0 <__assert_fail@plt+0x40e8>
   15aa0:	ldr	r2, [sp, #16]
   15aa4:	b	15ab8 <__assert_fail@plt+0x4000>
   15aa8:	lsl	r3, r3, #1
   15aac:	ldrh	r3, [r1, r3]
   15ab0:	tst	r3, #64	; 0x40
   15ab4:	beq	15ba0 <__assert_fail@plt+0x40e8>
   15ab8:	ldrb	r3, [r2, #1]!
   15abc:	cmp	r3, #0
   15ac0:	bne	15aa8 <__assert_fail@plt+0x3ff0>
   15ac4:	mov	r0, #4
   15ac8:	mov	ip, #0
   15acc:	str	ip, [sp, #4]
   15ad0:	bl	11800 <xmalloc@plt>
   15ad4:	ldr	ip, [sp, #4]
   15ad8:	mov	r1, #0
   15adc:	str	r0, [sp, #20]
   15ae0:	str	r1, [r0]
   15ae4:	ldr	r0, [r6]
   15ae8:	str	ip, [sp, #8]
   15aec:	bl	15598 <__assert_fail@plt+0x3ae0>
   15af0:	ldr	r3, [sp, #8]
   15af4:	ldr	ip, [sp, #4]
   15af8:	str	r0, [r6]
   15afc:	ldr	r1, [sl]
   15b00:	str	ip, [sp, #4]
   15b04:	add	r1, r1, #1
   15b08:	str	r3, [sp, #8]
   15b0c:	add	r1, r1, r3
   15b10:	lsl	r1, r1, #2
   15b14:	bl	117b8 <xrealloc@plt>
   15b18:	ldr	r3, [sp, #8]
   15b1c:	ldr	r2, [sl]
   15b20:	add	lr, r7, #4
   15b24:	rsb	r2, r4, r2
   15b28:	lsl	r2, r2, #2
   15b2c:	mov	r1, r0
   15b30:	add	r0, r3, r4
   15b34:	str	r1, [r6]
   15b38:	mov	r4, r5
   15b3c:	add	r0, r1, r0, lsl #2
   15b40:	add	r1, r1, lr
   15b44:	str	r3, [sp, #8]
   15b48:	bl	11710 <memmove@plt>
   15b4c:	ldr	ip, [sp, #4]
   15b50:	ldr	r0, [r6]
   15b54:	ldr	r1, [sp, #20]
   15b58:	mov	r2, ip
   15b5c:	add	r0, r0, r7
   15b60:	bl	11758 <memcpy@plt>
   15b64:	ldr	r2, [sl]
   15b68:	ldr	r3, [sp, #8]
   15b6c:	sub	r2, r2, #1
   15b70:	ldr	r0, [sp, #20]
   15b74:	add	r3, r2, r3
   15b78:	str	r3, [sl]
   15b7c:	bl	11734 <free@plt>
   15b80:	ldr	r0, [sp, #16]
   15b84:	bl	11734 <free@plt>
   15b88:	mov	r0, r9
   15b8c:	bl	11974 <fclose@plt>
   15b90:	ldr	r1, [sl]
   15b94:	b	15998 <__assert_fail@plt+0x3ee0>
   15b98:	add	sp, sp, #28
   15b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ba0:	ldr	r0, [sp, #16]
   15ba4:	bl	15664 <__assert_fail@plt+0x3bac>
   15ba8:	ldr	ip, [r0]
   15bac:	str	r0, [sp, #20]
   15bb0:	ldr	r0, [r6]
   15bb4:	str	ip, [sp, #4]
   15bb8:	bl	15598 <__assert_fail@plt+0x3ae0>
   15bbc:	ldr	ip, [sp, #4]
   15bc0:	cmp	ip, #0
   15bc4:	moveq	r3, ip
   15bc8:	str	r0, [r6]
   15bcc:	beq	15afc <__assert_fail@plt+0x4044>
   15bd0:	ldr	r2, [sp, #20]
   15bd4:	mov	r3, #0
   15bd8:	ldr	r1, [r2, #4]!
   15bdc:	add	r3, r3, #1
   15be0:	cmp	r1, #0
   15be4:	lsl	ip, r3, #2
   15be8:	bne	15bd8 <__assert_fail@plt+0x4120>
   15bec:	b	15afc <__assert_fail@plt+0x4044>
   15bf0:	ldr	ip, [sp, #12]
   15bf4:	mov	r1, #1
   15bf8:	ldr	r0, [pc, #40]	; 15c28 <__assert_fail@plt+0x4170>
   15bfc:	ldr	r2, [pc, #40]	; 15c2c <__assert_fail@plt+0x4174>
   15c00:	ldr	r3, [r3]
   15c04:	ldr	r0, [ip, r0]
   15c08:	add	r2, pc, r2
   15c0c:	ldr	r0, [r0]
   15c10:	bl	1195c <__fprintf_chk@plt>
   15c14:	mov	r0, #1
   15c18:	bl	119c8 <xexit@plt>
   15c1c:	andeq	r3, r1, r0, lsl #13
   15c20:	ldrdeq	r3, [r0], -ip
   15c24:	andeq	r0, r0, ip, ror #2
   15c28:	andeq	r0, r0, r0, ror r1
   15c2c:	andeq	r2, r0, r4, lsr pc
   15c30:	subs	r3, r0, #0
   15c34:	beq	15c5c <__assert_fail@plt+0x41a4>
   15c38:	ldr	r0, [r3]
   15c3c:	cmp	r0, #0
   15c40:	bxeq	lr
   15c44:	mov	r0, #0
   15c48:	ldr	r2, [r3, #4]!
   15c4c:	add	r0, r0, #1
   15c50:	cmp	r2, #0
   15c54:	bne	15c48 <__assert_fail@plt+0x4190>
   15c58:	bx	lr
   15c5c:	mov	r0, r3
   15c60:	bx	lr
   15c64:	ldr	r3, [pc, #488]	; 15e54 <__assert_fail@plt+0x439c>
   15c68:	push	{r4, r5, r6, lr}
   15c6c:	ldr	r0, [pc, r3]
   15c70:	cmp	r0, #0
   15c74:	popne	{r4, r5, r6, pc}
   15c78:	ldr	r0, [pc, #472]	; 15e58 <__assert_fail@plt+0x43a0>
   15c7c:	add	r0, pc, r0
   15c80:	bl	1186c <getenv@plt>
   15c84:	subs	r4, r0, #0
   15c88:	beq	15d00 <__assert_fail@plt+0x4248>
   15c8c:	mov	r1, #7
   15c90:	bl	11968 <access@plt>
   15c94:	cmp	r0, #0
   15c98:	bne	15d3c <__assert_fail@plt+0x4284>
   15c9c:	ldr	r0, [pc, #440]	; 15e5c <__assert_fail@plt+0x43a4>
   15ca0:	add	r0, pc, r0
   15ca4:	bl	1186c <getenv@plt>
   15ca8:	ldr	r0, [pc, #432]	; 15e60 <__assert_fail@plt+0x43a8>
   15cac:	add	r0, pc, r0
   15cb0:	bl	1186c <getenv@plt>
   15cb4:	mov	r0, r4
   15cb8:	bl	118fc <strlen@plt>
   15cbc:	mov	r3, r0
   15cc0:	mov	r5, r0
   15cc4:	add	r6, r3, #1
   15cc8:	add	r0, r0, #2
   15ccc:	bl	11800 <xmalloc@plt>
   15cd0:	mov	r1, r4
   15cd4:	bl	11824 <strcpy@plt>
   15cd8:	ldr	r2, [pc, #388]	; 15e64 <__assert_fail@plt+0x43ac>
   15cdc:	mov	r1, #0
   15ce0:	add	r2, pc, r2
   15ce4:	mov	r3, r0
   15ce8:	mov	r0, #47	; 0x2f
   15cec:	str	r3, [r2]
   15cf0:	strb	r0, [r3, r5]
   15cf4:	mov	r0, r3
   15cf8:	strb	r1, [r3, r6]
   15cfc:	pop	{r4, r5, r6, pc}
   15d00:	ldr	r0, [pc, #352]	; 15e68 <__assert_fail@plt+0x43b0>
   15d04:	add	r0, pc, r0
   15d08:	bl	1186c <getenv@plt>
   15d0c:	mov	r4, r0
   15d10:	cmp	r4, #0
   15d14:	beq	15d50 <__assert_fail@plt+0x4298>
   15d18:	mov	r0, r4
   15d1c:	mov	r1, #7
   15d20:	bl	11968 <access@plt>
   15d24:	cmp	r0, #0
   15d28:	bne	15de0 <__assert_fail@plt+0x4328>
   15d2c:	ldr	r0, [pc, #312]	; 15e6c <__assert_fail@plt+0x43b4>
   15d30:	add	r0, pc, r0
   15d34:	bl	1186c <getenv@plt>
   15d38:	b	15cb4 <__assert_fail@plt+0x41fc>
   15d3c:	ldr	r0, [pc, #300]	; 15e70 <__assert_fail@plt+0x43b8>
   15d40:	add	r0, pc, r0
   15d44:	bl	1186c <getenv@plt>
   15d48:	mov	r4, r0
   15d4c:	b	15d10 <__assert_fail@plt+0x4258>
   15d50:	ldr	r0, [pc, #284]	; 15e74 <__assert_fail@plt+0x43bc>
   15d54:	add	r0, pc, r0
   15d58:	bl	1186c <getenv@plt>
   15d5c:	mov	r4, r0
   15d60:	cmp	r4, #0
   15d64:	beq	15d7c <__assert_fail@plt+0x42c4>
   15d68:	mov	r0, r4
   15d6c:	mov	r1, #7
   15d70:	bl	11968 <access@plt>
   15d74:	cmp	r0, #0
   15d78:	beq	15cb4 <__assert_fail@plt+0x41fc>
   15d7c:	ldr	r4, [pc, #244]	; 15e78 <__assert_fail@plt+0x43c0>
   15d80:	mov	r1, #7
   15d84:	add	r4, pc, r4
   15d88:	mov	r0, r4
   15d8c:	bl	11968 <access@plt>
   15d90:	cmp	r0, #0
   15d94:	moveq	r6, #5
   15d98:	moveq	r0, #6
   15d9c:	moveq	r5, #4
   15da0:	beq	15ccc <__assert_fail@plt+0x4214>
   15da4:	ldr	r5, [pc, #208]	; 15e7c <__assert_fail@plt+0x43c4>
   15da8:	mov	r1, #7
   15dac:	add	r5, pc, r5
   15db0:	add	r4, r5, #8
   15db4:	mov	r0, r4
   15db8:	bl	11968 <access@plt>
   15dbc:	cmp	r0, #0
   15dc0:	bne	15df4 <__assert_fail@plt+0x433c>
   15dc4:	mov	r0, r4
   15dc8:	bl	118fc <strlen@plt>
   15dcc:	mov	r6, r0
   15dd0:	mov	r5, r0
   15dd4:	add	r6, r6, #1
   15dd8:	add	r0, r0, #2
   15ddc:	b	15ccc <__assert_fail@plt+0x4214>
   15de0:	ldr	r0, [pc, #152]	; 15e80 <__assert_fail@plt+0x43c8>
   15de4:	add	r0, pc, r0
   15de8:	bl	1186c <getenv@plt>
   15dec:	mov	r4, r0
   15df0:	b	15d60 <__assert_fail@plt+0x42a8>
   15df4:	add	r4, r5, #20
   15df8:	mov	r1, #7
   15dfc:	mov	r0, r4
   15e00:	bl	11968 <access@plt>
   15e04:	cmp	r0, #0
   15e08:	beq	15dc4 <__assert_fail@plt+0x430c>
   15e0c:	mov	r0, r5
   15e10:	mov	r1, #7
   15e14:	bl	11968 <access@plt>
   15e18:	cmp	r0, #0
   15e1c:	bne	15e3c <__assert_fail@plt+0x4384>
   15e20:	mov	r0, r5
   15e24:	mov	r4, r5
   15e28:	bl	118fc <strlen@plt>
   15e2c:	mov	r5, r0
   15e30:	add	r0, r0, #2
   15e34:	add	r6, r5, #1
   15e38:	b	15ccc <__assert_fail@plt+0x4214>
   15e3c:	ldr	r4, [pc, #64]	; 15e84 <__assert_fail@plt+0x43cc>
   15e40:	mov	r6, #2
   15e44:	mov	r0, #3
   15e48:	mov	r5, #1
   15e4c:	add	r4, pc, r4
   15e50:	b	15ccc <__assert_fail@plt+0x4214>
   15e54:	andeq	r3, r1, r8, asr #22
   15e58:	andeq	r2, r0, r8, lsl pc
   15e5c:	strdeq	r2, [r0], -ip
   15e60:	strdeq	r2, [r0], -r4
   15e64:	ldrdeq	r3, [r1], -r4
   15e68:	muleq	r0, r8, lr
   15e6c:	andeq	r2, r0, r0, ror lr
   15e70:	andeq	r2, r0, ip, asr lr
   15e74:	andeq	r2, r0, ip, asr #28
   15e78:	andeq	r2, r0, r8, lsl #28
   15e7c:	andeq	r2, r0, r0, asr #27
   15e80:			; <UNDEFINED> instruction: 0x00002dbc
   15e84:	andeq	r2, r0, ip, asr #15
   15e88:	push	{r4, r5, r6, r7, r8, r9, lr}
   15e8c:	sub	sp, sp, #12
   15e90:	mov	r6, r0
   15e94:	bl	15c64 <__assert_fail@plt+0x41ac>
   15e98:	ldr	r9, [pc, #236]	; 15f8c <__assert_fail@plt+0x44d4>
   15e9c:	cmp	r6, #0
   15ea0:	add	r9, pc, r9
   15ea4:	mov	r7, r0
   15ea8:	beq	15f3c <__assert_fail@plt+0x4484>
   15eac:	mov	r0, r6
   15eb0:	bl	118fc <strlen@plt>
   15eb4:	mov	r8, r0
   15eb8:	mov	r4, r0
   15ebc:	mov	r0, r7
   15ec0:	bl	118fc <strlen@plt>
   15ec4:	mov	r5, r0
   15ec8:	add	r0, r0, r4
   15ecc:	add	r0, r0, #9
   15ed0:	bl	11800 <xmalloc@plt>
   15ed4:	mov	r1, r7
   15ed8:	mov	r4, r0
   15edc:	bl	11824 <strcpy@plt>
   15ee0:	ldr	r2, [pc, #168]	; 15f90 <__assert_fail@plt+0x44d8>
   15ee4:	add	r3, r4, r5
   15ee8:	add	ip, r5, #8
   15eec:	add	r2, pc, r2
   15ef0:	ldm	r2!, {r0, r1}
   15ef4:	ldrb	r2, [r2]
   15ef8:	str	r0, [r4, r5]
   15efc:	add	r0, r4, ip
   15f00:	str	r1, [r3, #4]
   15f04:	mov	r1, r6
   15f08:	strb	r2, [r3, #8]
   15f0c:	bl	11824 <strcpy@plt>
   15f10:	mov	r0, r4
   15f14:	mov	r1, r8
   15f18:	bl	11854 <mkstemps64@plt>
   15f1c:	cmn	r0, #1
   15f20:	beq	15f50 <__assert_fail@plt+0x4498>
   15f24:	bl	11aa0 <close@plt>
   15f28:	cmp	r0, #0
   15f2c:	bne	15f88 <__assert_fail@plt+0x44d0>
   15f30:	mov	r0, r4
   15f34:	add	sp, sp, #12
   15f38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f3c:	mov	r8, r6
   15f40:	ldr	r6, [pc, #76]	; 15f94 <__assert_fail@plt+0x44dc>
   15f44:	mov	r4, r8
   15f48:	add	r6, pc, r6
   15f4c:	b	15ebc <__assert_fail@plt+0x4404>
   15f50:	ldr	r3, [pc, #64]	; 15f98 <__assert_fail@plt+0x44e0>
   15f54:	ldr	r3, [r9, r3]
   15f58:	ldr	r4, [r3]
   15f5c:	bl	1192c <__errno_location@plt>
   15f60:	ldr	r0, [r0]
   15f64:	bl	118a8 <strerror@plt>
   15f68:	ldr	r2, [pc, #44]	; 15f9c <__assert_fail@plt+0x44e4>
   15f6c:	mov	r3, r7
   15f70:	mov	r1, #1
   15f74:	add	r2, pc, r2
   15f78:	str	r0, [sp]
   15f7c:	mov	r0, r4
   15f80:	bl	1195c <__fprintf_chk@plt>
   15f84:	bl	11a94 <abort@plt>
   15f88:	bl	11a94 <abort@plt>
   15f8c:	andeq	r3, r1, r8, asr r1
   15f90:			; <UNDEFINED> instruction: 0x00002cbc
   15f94:	andeq	r2, r0, r0, lsl #6
   15f98:	andeq	r0, r0, r0, ror r1
   15f9c:	andeq	r2, r0, r0, asr #24
   15fa0:	subs	r2, r1, #1
   15fa4:	bxeq	lr
   15fa8:	bcc	16180 <__assert_fail@plt+0x46c8>
   15fac:	cmp	r0, r1
   15fb0:	bls	16164 <__assert_fail@plt+0x46ac>
   15fb4:	tst	r1, r2
   15fb8:	beq	16170 <__assert_fail@plt+0x46b8>
   15fbc:	clz	r3, r0
   15fc0:	clz	r2, r1
   15fc4:	sub	r3, r2, r3
   15fc8:	rsbs	r3, r3, #31
   15fcc:	addne	r3, r3, r3, lsl #1
   15fd0:	mov	r2, #0
   15fd4:	addne	pc, pc, r3, lsl #2
   15fd8:	nop	{0}
   15fdc:	cmp	r0, r1, lsl #31
   15fe0:	adc	r2, r2, r2
   15fe4:	subcs	r0, r0, r1, lsl #31
   15fe8:	cmp	r0, r1, lsl #30
   15fec:	adc	r2, r2, r2
   15ff0:	subcs	r0, r0, r1, lsl #30
   15ff4:	cmp	r0, r1, lsl #29
   15ff8:	adc	r2, r2, r2
   15ffc:	subcs	r0, r0, r1, lsl #29
   16000:	cmp	r0, r1, lsl #28
   16004:	adc	r2, r2, r2
   16008:	subcs	r0, r0, r1, lsl #28
   1600c:	cmp	r0, r1, lsl #27
   16010:	adc	r2, r2, r2
   16014:	subcs	r0, r0, r1, lsl #27
   16018:	cmp	r0, r1, lsl #26
   1601c:	adc	r2, r2, r2
   16020:	subcs	r0, r0, r1, lsl #26
   16024:	cmp	r0, r1, lsl #25
   16028:	adc	r2, r2, r2
   1602c:	subcs	r0, r0, r1, lsl #25
   16030:	cmp	r0, r1, lsl #24
   16034:	adc	r2, r2, r2
   16038:	subcs	r0, r0, r1, lsl #24
   1603c:	cmp	r0, r1, lsl #23
   16040:	adc	r2, r2, r2
   16044:	subcs	r0, r0, r1, lsl #23
   16048:	cmp	r0, r1, lsl #22
   1604c:	adc	r2, r2, r2
   16050:	subcs	r0, r0, r1, lsl #22
   16054:	cmp	r0, r1, lsl #21
   16058:	adc	r2, r2, r2
   1605c:	subcs	r0, r0, r1, lsl #21
   16060:	cmp	r0, r1, lsl #20
   16064:	adc	r2, r2, r2
   16068:	subcs	r0, r0, r1, lsl #20
   1606c:	cmp	r0, r1, lsl #19
   16070:	adc	r2, r2, r2
   16074:	subcs	r0, r0, r1, lsl #19
   16078:	cmp	r0, r1, lsl #18
   1607c:	adc	r2, r2, r2
   16080:	subcs	r0, r0, r1, lsl #18
   16084:	cmp	r0, r1, lsl #17
   16088:	adc	r2, r2, r2
   1608c:	subcs	r0, r0, r1, lsl #17
   16090:	cmp	r0, r1, lsl #16
   16094:	adc	r2, r2, r2
   16098:	subcs	r0, r0, r1, lsl #16
   1609c:	cmp	r0, r1, lsl #15
   160a0:	adc	r2, r2, r2
   160a4:	subcs	r0, r0, r1, lsl #15
   160a8:	cmp	r0, r1, lsl #14
   160ac:	adc	r2, r2, r2
   160b0:	subcs	r0, r0, r1, lsl #14
   160b4:	cmp	r0, r1, lsl #13
   160b8:	adc	r2, r2, r2
   160bc:	subcs	r0, r0, r1, lsl #13
   160c0:	cmp	r0, r1, lsl #12
   160c4:	adc	r2, r2, r2
   160c8:	subcs	r0, r0, r1, lsl #12
   160cc:	cmp	r0, r1, lsl #11
   160d0:	adc	r2, r2, r2
   160d4:	subcs	r0, r0, r1, lsl #11
   160d8:	cmp	r0, r1, lsl #10
   160dc:	adc	r2, r2, r2
   160e0:	subcs	r0, r0, r1, lsl #10
   160e4:	cmp	r0, r1, lsl #9
   160e8:	adc	r2, r2, r2
   160ec:	subcs	r0, r0, r1, lsl #9
   160f0:	cmp	r0, r1, lsl #8
   160f4:	adc	r2, r2, r2
   160f8:	subcs	r0, r0, r1, lsl #8
   160fc:	cmp	r0, r1, lsl #7
   16100:	adc	r2, r2, r2
   16104:	subcs	r0, r0, r1, lsl #7
   16108:	cmp	r0, r1, lsl #6
   1610c:	adc	r2, r2, r2
   16110:	subcs	r0, r0, r1, lsl #6
   16114:	cmp	r0, r1, lsl #5
   16118:	adc	r2, r2, r2
   1611c:	subcs	r0, r0, r1, lsl #5
   16120:	cmp	r0, r1, lsl #4
   16124:	adc	r2, r2, r2
   16128:	subcs	r0, r0, r1, lsl #4
   1612c:	cmp	r0, r1, lsl #3
   16130:	adc	r2, r2, r2
   16134:	subcs	r0, r0, r1, lsl #3
   16138:	cmp	r0, r1, lsl #2
   1613c:	adc	r2, r2, r2
   16140:	subcs	r0, r0, r1, lsl #2
   16144:	cmp	r0, r1, lsl #1
   16148:	adc	r2, r2, r2
   1614c:	subcs	r0, r0, r1, lsl #1
   16150:	cmp	r0, r1
   16154:	adc	r2, r2, r2
   16158:	subcs	r0, r0, r1
   1615c:	mov	r0, r2
   16160:	bx	lr
   16164:	moveq	r0, #1
   16168:	movne	r0, #0
   1616c:	bx	lr
   16170:	clz	r2, r1
   16174:	rsb	r2, r2, #31
   16178:	lsr	r0, r0, r2
   1617c:	bx	lr
   16180:	cmp	r0, #0
   16184:	mvnne	r0, #0
   16188:	b	161ac <__assert_fail@plt+0x46f4>
   1618c:	cmp	r1, #0
   16190:	beq	16180 <__assert_fail@plt+0x46c8>
   16194:	push	{r0, r1, lr}
   16198:	bl	15fa0 <__assert_fail@plt+0x44e8>
   1619c:	pop	{r1, r2, lr}
   161a0:	mul	r3, r2, r0
   161a4:	sub	r1, r1, r3
   161a8:	bx	lr
   161ac:	push	{r1, lr}
   161b0:	mov	r0, #8
   161b4:	bl	116b0 <raise@plt>
   161b8:	pop	{r1, pc}
   161bc:	ldr	r3, [r0]
   161c0:	tst	r3, #1073741824	; 0x40000000
   161c4:	orrne	r3, r3, #-2147483648	; 0x80000000
   161c8:	biceq	r3, r3, #-2147483648	; 0x80000000
   161cc:	add	r0, r0, r3
   161d0:	bx	lr
   161d4:	cmp	r1, #0
   161d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161dc:	mov	r6, r0
   161e0:	sub	sp, sp, #12
   161e4:	mov	r9, r2
   161e8:	beq	1626c <__assert_fail@plt+0x47b4>
   161ec:	sub	r1, r1, #1
   161f0:	mov	r7, #0
   161f4:	str	r1, [sp, #4]
   161f8:	mov	r8, r1
   161fc:	add	r4, r7, r8
   16200:	add	r4, r4, r4, lsr #31
   16204:	asr	r4, r4, #1
   16208:	lsl	r5, r4, #3
   1620c:	add	fp, r6, r5
   16210:	mov	r0, fp
   16214:	bl	161bc <__assert_fail@plt+0x4704>
   16218:	ldr	r3, [sp, #4]
   1621c:	cmp	r3, r4
   16220:	mov	sl, r0
   16224:	add	r0, r5, #8
   16228:	add	r0, r6, r0
   1622c:	beq	1627c <__assert_fail@plt+0x47c4>
   16230:	bl	161bc <__assert_fail@plt+0x4704>
   16234:	cmp	sl, r9
   16238:	sub	r0, r0, #1
   1623c:	bls	1625c <__assert_fail@plt+0x47a4>
   16240:	cmp	r4, r7
   16244:	sub	r8, r4, #1
   16248:	bne	161fc <__assert_fail@plt+0x4744>
   1624c:	mov	fp, #0
   16250:	mov	r0, fp
   16254:	add	sp, sp, #12
   16258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1625c:	cmp	r0, r9
   16260:	add	r7, r4, #1
   16264:	bcc	161fc <__assert_fail@plt+0x4744>
   16268:	b	16250 <__assert_fail@plt+0x4798>
   1626c:	mov	fp, r1
   16270:	mov	r0, fp
   16274:	add	sp, sp, #12
   16278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1627c:	cmp	sl, r9
   16280:	bhi	16240 <__assert_fail@plt+0x4788>
   16284:	b	16250 <__assert_fail@plt+0x4798>
   16288:	cmp	r0, #1
   1628c:	beq	162c0 <__assert_fail@plt+0x4808>
   16290:	cmp	r0, #2
   16294:	beq	162b4 <__assert_fail@plt+0x47fc>
   16298:	cmp	r0, #0
   1629c:	beq	162a8 <__assert_fail@plt+0x47f0>
   162a0:	mov	r0, #0
   162a4:	bx	lr
   162a8:	ldr	r0, [pc, #28]	; 162cc <__assert_fail@plt+0x4814>
   162ac:	add	r0, pc, r0
   162b0:	bx	lr
   162b4:	ldr	r0, [pc, #20]	; 162d0 <__assert_fail@plt+0x4818>
   162b8:	add	r0, pc, r0
   162bc:	bx	lr
   162c0:	ldr	r0, [pc, #12]	; 162d4 <__assert_fail@plt+0x481c>
   162c4:	add	r0, pc, r0
   162c8:	bx	lr
   162cc:	andeq	r0, r0, r0, lsl #23
   162d0:	andeq	r0, r0, r4, lsl #23
   162d4:	andeq	r0, r0, r0, ror fp
   162d8:	ldr	r3, [pc, #276]	; 163f4 <__assert_fail@plt+0x493c>
   162dc:	ldr	r2, [pc, #276]	; 163f8 <__assert_fail@plt+0x4940>
   162e0:	add	r3, pc, r3
   162e4:	push	{r4, r5, lr}
   162e8:	mov	r4, r0
   162ec:	ldr	r2, [r3, r2]
   162f0:	sub	sp, sp, #12
   162f4:	sub	r5, r1, #2
   162f8:	cmp	r2, #0
   162fc:	beq	163d4 <__assert_fail@plt+0x491c>
   16300:	mov	r0, r5
   16304:	add	r1, sp, #4
   16308:	bl	11884 <__gnu_Unwind_Find_exidx@plt>
   1630c:	cmp	r0, #0
   16310:	beq	163a0 <__assert_fail@plt+0x48e8>
   16314:	mov	r2, r5
   16318:	ldr	r1, [sp, #4]
   1631c:	bl	161d4 <__assert_fail@plt+0x471c>
   16320:	subs	r5, r0, #0
   16324:	beq	163a0 <__assert_fail@plt+0x48e8>
   16328:	bl	161bc <__assert_fail@plt+0x4704>
   1632c:	ldr	r3, [r5, #4]
   16330:	cmp	r3, #1
   16334:	str	r0, [r4, #72]	; 0x48
   16338:	beq	16388 <__assert_fail@plt+0x48d0>
   1633c:	cmp	r3, #0
   16340:	add	r0, r5, #4
   16344:	strlt	r0, [r4, #76]	; 0x4c
   16348:	movlt	r3, #1
   1634c:	strlt	r3, [r4, #80]	; 0x50
   16350:	blt	16364 <__assert_fail@plt+0x48ac>
   16354:	bl	161bc <__assert_fail@plt+0x4704>
   16358:	mov	r3, #0
   1635c:	str	r3, [r4, #80]	; 0x50
   16360:	str	r0, [r4, #76]	; 0x4c
   16364:	ldr	r3, [r0]
   16368:	cmp	r3, #0
   1636c:	blt	163b8 <__assert_fail@plt+0x4900>
   16370:	bl	161bc <__assert_fail@plt+0x4704>
   16374:	mov	r3, #0
   16378:	str	r0, [r4, #16]
   1637c:	mov	r0, r3
   16380:	add	sp, sp, #12
   16384:	pop	{r4, r5, pc}
   16388:	mov	r3, #5
   1638c:	mov	r2, #0
   16390:	mov	r0, r3
   16394:	str	r2, [r4, #16]
   16398:	add	sp, sp, #12
   1639c:	pop	{r4, r5, pc}
   163a0:	mov	r3, #9
   163a4:	mov	r2, #0
   163a8:	mov	r0, r3
   163ac:	str	r2, [r4, #16]
   163b0:	add	sp, sp, #12
   163b4:	pop	{r4, r5, pc}
   163b8:	ubfx	r0, r3, #24, #4
   163bc:	bl	16288 <__assert_fail@plt+0x47d0>
   163c0:	cmp	r0, #0
   163c4:	str	r0, [r4, #16]
   163c8:	moveq	r3, #9
   163cc:	movne	r3, #0
   163d0:	b	1637c <__assert_fail@plt+0x48c4>
   163d4:	ldr	r2, [pc, #32]	; 163fc <__assert_fail@plt+0x4944>
   163d8:	ldr	r1, [pc, #32]	; 16400 <__assert_fail@plt+0x4948>
   163dc:	ldr	r2, [r3, r2]
   163e0:	ldr	r0, [r3, r1]
   163e4:	rsb	r3, r0, r2
   163e8:	asr	r3, r3, #3
   163ec:	str	r3, [sp, #4]
   163f0:	b	16314 <__assert_fail@plt+0x485c>
   163f4:	andeq	r2, r1, r8, lsl sp
   163f8:	andeq	r0, r0, r4, ror r1
   163fc:	andeq	r0, r0, r8, ror r1
   16400:	andeq	r0, r0, r0, lsl #3
   16404:	ldr	r3, [r0]
   16408:	push	{r4, lr}
   1640c:	tst	r3, #1
   16410:	mov	r4, r0
   16414:	bne	1642c <__assert_fail@plt+0x4974>
   16418:	tst	r3, #2
   1641c:	add	r0, r0, #72	; 0x48
   16420:	beq	16450 <__assert_fail@plt+0x4998>
   16424:	bl	171fc <__assert_fail@plt+0x5744>
   16428:	ldr	r3, [r4]
   1642c:	tst	r3, #4
   16430:	beq	16460 <__assert_fail@plt+0x49a8>
   16434:	tst	r3, #8
   16438:	beq	16474 <__assert_fail@plt+0x49bc>
   1643c:	tst	r3, #16
   16440:	popne	{r4, pc}
   16444:	add	r0, r4, #464	; 0x1d0
   16448:	pop	{r4, lr}
   1644c:	b	172a4 <__assert_fail@plt+0x57ec>
   16450:	bl	171ec <__assert_fail@plt+0x5734>
   16454:	ldr	r3, [r4]
   16458:	tst	r3, #4
   1645c:	bne	16434 <__assert_fail@plt+0x497c>
   16460:	add	r0, r4, #208	; 0xd0
   16464:	bl	1720c <__assert_fail@plt+0x5754>
   16468:	ldr	r3, [r4]
   1646c:	tst	r3, #8
   16470:	bne	1643c <__assert_fail@plt+0x4984>
   16474:	add	r0, r4, #336	; 0x150
   16478:	bl	1721c <__assert_fail@plt+0x5764>
   1647c:	ldr	r3, [r4]
   16480:	tst	r3, #16
   16484:	popne	{r4, pc}
   16488:	b	16444 <__assert_fail@plt+0x498c>
   1648c:	ldr	r3, [r0]
   16490:	cmp	r3, #0
   16494:	ldrne	r0, [r3, r0]
   16498:	moveq	r0, r3
   1649c:	bx	lr
   164a0:	mov	r0, #9
   164a4:	bx	lr
   164a8:	nop	{0}
   164ac:	bx	lr
   164b0:	push	{r4, r5, r6, lr}
   164b4:	mov	r4, r0
   164b8:	mov	r5, r1
   164bc:	b	164e4 <__assert_fail@plt+0x4a2c>
   164c0:	ldr	ip, [r5, #64]	; 0x40
   164c4:	mov	r0, #1
   164c8:	ldr	r3, [r4, #16]
   164cc:	mov	r1, r4
   164d0:	mov	r2, r5
   164d4:	str	ip, [r4, #20]
   164d8:	blx	r3
   164dc:	cmp	r0, #8
   164e0:	bne	164fc <__assert_fail@plt+0x4a44>
   164e4:	mov	r0, r4
   164e8:	ldr	r1, [r5, #64]	; 0x40
   164ec:	bl	162d8 <__assert_fail@plt+0x4820>
   164f0:	subs	r6, r0, #0
   164f4:	beq	164c0 <__assert_fail@plt+0x4a08>
   164f8:	bl	11a94 <abort@plt>
   164fc:	cmp	r0, #7
   16500:	bne	164f8 <__assert_fail@plt+0x4a40>
   16504:	mov	r0, r6
   16508:	ldr	r1, [r5, #64]	; 0x40
   1650c:	bl	164a8 <__assert_fail@plt+0x49f0>
   16510:	add	r0, r5, #4
   16514:	bl	171d8 <__assert_fail@plt+0x5720>
   16518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1651c:	add	r5, r1, #4
   16520:	sub	sp, sp, #980	; 0x3d4
   16524:	mov	r4, r0
   16528:	mov	ip, r2
   1652c:	add	r3, sp, #20
   16530:	str	r3, [sp, #12]
   16534:	add	lr, sp, #20
   16538:	ldm	r5!, {r0, r1, r2, r3}
   1653c:	cmp	ip, #0
   16540:	ldr	r9, [r4, #12]
   16544:	mov	r8, #0
   16548:	ldr	sl, [r4, #24]
   1654c:	movne	fp, #10
   16550:	moveq	fp, #9
   16554:	add	r6, sp, #16
   16558:	stmia	lr!, {r0, r1, r2, r3}
   1655c:	add	r7, sp, #496	; 0x1f0
   16560:	ldm	r5!, {r0, r1, r2, r3}
   16564:	stmia	lr!, {r0, r1, r2, r3}
   16568:	ldm	r5!, {r0, r1, r2, r3}
   1656c:	stmia	lr!, {r0, r1, r2, r3}
   16570:	ldm	r5, {r0, r1, r2, r3}
   16574:	stm	lr, {r0, r1, r2, r3}
   16578:	mov	r0, r4
   1657c:	ldr	r1, [sp, #80]	; 0x50
   16580:	str	r8, [sp, #16]
   16584:	bl	162d8 <__assert_fail@plt+0x4820>
   16588:	mov	r5, r0
   1658c:	cmp	r5, #0
   16590:	beq	165cc <__assert_fail@plt+0x4b14>
   16594:	ldr	r0, [sp, #72]	; 0x48
   16598:	mov	r2, r4
   1659c:	str	r6, [sp]
   165a0:	orr	r1, fp, #16
   165a4:	str	sl, [sp, #4]
   165a8:	mov	r3, r4
   165ac:	str	r0, [sp, #84]	; 0x54
   165b0:	mov	r0, #1
   165b4:	blx	r9
   165b8:	cmp	r0, #0
   165bc:	bne	16660 <__assert_fail@plt+0x4ba8>
   165c0:	mov	r0, r5
   165c4:	add	sp, sp, #980	; 0x3d4
   165c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165cc:	ldr	r3, [sp, #80]	; 0x50
   165d0:	mov	r1, r6
   165d4:	mov	r2, #480	; 0x1e0
   165d8:	mov	r0, r7
   165dc:	str	r3, [r4, #20]
   165e0:	bl	11758 <memcpy@plt>
   165e4:	ldr	r3, [r4, #16]
   165e8:	mov	r1, r4
   165ec:	mov	r2, r7
   165f0:	mov	r0, fp
   165f4:	blx	r3
   165f8:	ldr	r3, [sp, #552]	; 0x228
   165fc:	mov	r1, fp
   16600:	str	r6, [sp]
   16604:	str	sl, [sp, #4]
   16608:	mov	r2, r4
   1660c:	str	r3, [sp, #84]	; 0x54
   16610:	mov	r3, r4
   16614:	mov	r8, r0
   16618:	mov	r0, #1
   1661c:	blx	r9
   16620:	cmp	r0, #0
   16624:	bne	16660 <__assert_fail@plt+0x4ba8>
   16628:	mov	r0, r6
   1662c:	mov	r1, r7
   16630:	mov	r2, #480	; 0x1e0
   16634:	bl	11758 <memcpy@plt>
   16638:	cmp	r8, #8
   1663c:	bne	16658 <__assert_fail@plt+0x4ba0>
   16640:	mov	r0, r4
   16644:	ldr	r1, [sp, #80]	; 0x50
   16648:	bl	162d8 <__assert_fail@plt+0x4820>
   1664c:	mov	fp, #9
   16650:	mov	r5, r0
   16654:	b	1658c <__assert_fail@plt+0x4ad4>
   16658:	cmp	r8, #7
   1665c:	beq	1666c <__assert_fail@plt+0x4bb4>
   16660:	mov	r0, #9
   16664:	add	sp, sp, #980	; 0x3d4
   16668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1666c:	mov	r0, r5
   16670:	ldr	r1, [sp, #80]	; 0x50
   16674:	bl	164a8 <__assert_fail@plt+0x49f0>
   16678:	add	r0, sp, #20
   1667c:	bl	171d8 <__assert_fail@plt+0x5720>
   16680:	ldr	r0, [r0, #68]	; 0x44
   16684:	bx	lr
   16688:	ldr	r3, [r1, #60]	; 0x3c
   1668c:	push	{r4, r5, r6, r7, lr}
   16690:	add	lr, r1, #4
   16694:	str	r3, [r1, #64]	; 0x40
   16698:	mov	r7, r1
   1669c:	mov	r4, r0
   166a0:	sub	sp, sp, #484	; 0x1e4
   166a4:	ldm	lr!, {r0, r1, r2, r3}
   166a8:	add	ip, sp, #4
   166ac:	add	r6, sp, #480	; 0x1e0
   166b0:	mvn	r5, #0
   166b4:	stmia	ip!, {r0, r1, r2, r3}
   166b8:	ldm	lr!, {r0, r1, r2, r3}
   166bc:	stmia	ip!, {r0, r1, r2, r3}
   166c0:	ldm	lr!, {r0, r1, r2, r3}
   166c4:	stmia	ip!, {r0, r1, r2, r3}
   166c8:	ldm	lr, {r0, r1, r2, r3}
   166cc:	stm	ip, {r0, r1, r2, r3}
   166d0:	str	r5, [r6, #-480]!	; 0xfffffe20
   166d4:	b	166f4 <__assert_fail@plt+0x4c3c>
   166d8:	ldr	r3, [r4, #16]
   166dc:	mov	r1, r4
   166e0:	mov	r2, sp
   166e4:	blx	r3
   166e8:	cmp	r0, #8
   166ec:	mov	r5, r0
   166f0:	bne	16714 <__assert_fail@plt+0x4c5c>
   166f4:	mov	r0, r4
   166f8:	ldr	r1, [sp, #64]	; 0x40
   166fc:	bl	162d8 <__assert_fail@plt+0x4820>
   16700:	cmp	r0, #0
   16704:	beq	166d8 <__assert_fail@plt+0x4c20>
   16708:	mov	r0, #9
   1670c:	add	sp, sp, #484	; 0x1e4
   16710:	pop	{r4, r5, r6, r7, pc}
   16714:	mov	r0, sp
   16718:	bl	16404 <__assert_fail@plt+0x494c>
   1671c:	cmp	r5, #6
   16720:	bne	16708 <__assert_fail@plt+0x4c50>
   16724:	mov	r0, r4
   16728:	mov	r1, r7
   1672c:	bl	164b0 <__assert_fail@plt+0x49f8>
   16730:	push	{r4}		; (str r4, [sp, #-4]!)
   16734:	ldr	r4, [r3, #60]	; 0x3c
   16738:	str	r1, [r0, #12]
   1673c:	mov	r1, r3
   16740:	str	r2, [r0, #24]
   16744:	mov	r2, #0
   16748:	str	r4, [r3, #64]	; 0x40
   1674c:	pop	{r4}		; (ldr r4, [sp], #4)
   16750:	b	16518 <__assert_fail@plt+0x4a60>
   16754:	push	{r4, r5, r6, lr}
   16758:	mov	r4, r0
   1675c:	ldr	r6, [r0, #12]
   16760:	mov	r5, r1
   16764:	ldr	r3, [r0, #20]
   16768:	cmp	r6, #0
   1676c:	str	r3, [r1, #64]	; 0x40
   16770:	beq	16780 <__assert_fail@plt+0x4cc8>
   16774:	mov	r2, #1
   16778:	bl	16518 <__assert_fail@plt+0x4a60>
   1677c:	bl	11a94 <abort@plt>
   16780:	ldr	r3, [r0, #16]
   16784:	mov	r1, r4
   16788:	mov	r0, #2
   1678c:	mov	r2, r5
   16790:	blx	r3
   16794:	cmp	r0, #7
   16798:	beq	167b4 <__assert_fail@plt+0x4cfc>
   1679c:	cmp	r0, #8
   167a0:	bne	167b0 <__assert_fail@plt+0x4cf8>
   167a4:	mov	r0, r4
   167a8:	mov	r1, r5
   167ac:	bl	164b0 <__assert_fail@plt+0x49f8>
   167b0:	bl	11a94 <abort@plt>
   167b4:	mov	r0, r6
   167b8:	ldr	r1, [r5, #64]	; 0x40
   167bc:	bl	164a8 <__assert_fail@plt+0x49f0>
   167c0:	add	r0, r5, #4
   167c4:	bl	171d8 <__assert_fail@plt+0x5720>
   167c8:	ldr	r2, [r0, #12]
   167cc:	cmp	r2, #0
   167d0:	beq	167e4 <__assert_fail@plt+0x4d2c>
   167d4:	ldr	ip, [r1, #60]	; 0x3c
   167d8:	mov	r2, #0
   167dc:	str	ip, [r1, #64]	; 0x40
   167e0:	b	16518 <__assert_fail@plt+0x4a60>
   167e4:	b	16688 <__assert_fail@plt+0x4bd0>
   167e8:	bx	lr
   167ec:	push	{r3, lr}
   167f0:	ldr	r3, [r0, #8]
   167f4:	cmp	r3, #0
   167f8:	popeq	{r3, pc}
   167fc:	mov	r1, r0
   16800:	mov	r0, #1
   16804:	blx	r3
   16808:	pop	{r3, pc}
   1680c:	cmp	r1, #4
   16810:	addls	pc, pc, r1, lsl #2
   16814:	b	16848 <__assert_fail@plt+0x4d90>
   16818:	b	16834 <__assert_fail@plt+0x4d7c>
   1681c:	b	1682c <__assert_fail@plt+0x4d74>
   16820:	b	16848 <__assert_fail@plt+0x4d90>
   16824:	b	1682c <__assert_fail@plt+0x4d74>
   16828:	b	1682c <__assert_fail@plt+0x4d74>
   1682c:	mov	r0, #1
   16830:	bx	lr
   16834:	cmp	r2, #15
   16838:	cmpls	r3, #0
   1683c:	moveq	r3, #0
   16840:	movne	r3, #1
   16844:	beq	16850 <__assert_fail@plt+0x4d98>
   16848:	mov	r0, #2
   1684c:	bx	lr
   16850:	add	r2, r0, r2, lsl #2
   16854:	mov	r0, r3
   16858:	ldr	r3, [r2, #4]
   1685c:	ldr	r2, [sp]
   16860:	str	r3, [r2]
   16864:	bx	lr
   16868:	push	{lr}		; (str lr, [sp, #-4]!)
   1686c:	sub	sp, sp, #20
   16870:	mov	r2, r1
   16874:	mov	r1, #0
   16878:	add	ip, sp, #12
   1687c:	mov	r3, r1
   16880:	str	ip, [sp]
   16884:	bl	1680c <__assert_fail@plt+0x4d54>
   16888:	ldr	r0, [sp, #12]
   1688c:	add	sp, sp, #20
   16890:	pop	{pc}		; (ldr pc, [sp], #4)
   16894:	cmp	r1, #4
   16898:	addls	pc, pc, r1, lsl #2
   1689c:	b	168d0 <__assert_fail@plt+0x4e18>
   168a0:	b	168bc <__assert_fail@plt+0x4e04>
   168a4:	b	168b4 <__assert_fail@plt+0x4dfc>
   168a8:	b	168d0 <__assert_fail@plt+0x4e18>
   168ac:	b	168b4 <__assert_fail@plt+0x4dfc>
   168b0:	b	168b4 <__assert_fail@plt+0x4dfc>
   168b4:	mov	r0, #1
   168b8:	bx	lr
   168bc:	cmp	r2, #15
   168c0:	cmpls	r3, #0
   168c4:	moveq	r3, #0
   168c8:	movne	r3, #1
   168cc:	beq	168d8 <__assert_fail@plt+0x4e20>
   168d0:	mov	r0, #2
   168d4:	bx	lr
   168d8:	ldr	ip, [sp]
   168dc:	add	r2, r0, r2, lsl #2
   168e0:	mov	r0, r3
   168e4:	ldr	r1, [ip]
   168e8:	str	r1, [r2, #4]
   168ec:	bx	lr
   168f0:	push	{lr}		; (str lr, [sp, #-4]!)
   168f4:	sub	sp, sp, #20
   168f8:	add	ip, sp, #16
   168fc:	mov	lr, r1
   16900:	mov	r1, #0
   16904:	str	r2, [ip, #-4]!
   16908:	mov	r3, r1
   1690c:	str	ip, [sp]
   16910:	mov	r2, lr
   16914:	bl	16894 <__assert_fail@plt+0x4ddc>
   16918:	add	sp, sp, #20
   1691c:	pop	{pc}		; (ldr pc, [sp], #4)
   16920:	ldr	r3, [r2, #60]	; 0x3c
   16924:	push	{r4, r5, r6, r7, r8, lr}
   16928:	add	lr, r2, #4
   1692c:	str	r3, [r2, #64]	; 0x40
   16930:	mov	r8, r0
   16934:	mov	r7, r1
   16938:	sub	sp, sp, #568	; 0x238
   1693c:	ldm	lr!, {r0, r1, r2, r3}
   16940:	add	ip, sp, #92	; 0x5c
   16944:	mvn	r6, #0
   16948:	add	r4, sp, #88	; 0x58
   1694c:	stmia	ip!, {r0, r1, r2, r3}
   16950:	ldm	lr!, {r0, r1, r2, r3}
   16954:	stmia	ip!, {r0, r1, r2, r3}
   16958:	ldm	lr!, {r0, r1, r2, r3}
   1695c:	stmia	ip!, {r0, r1, r2, r3}
   16960:	ldm	lr, {r0, r1, r2, r3}
   16964:	stm	ip, {r0, r1, r2, r3}
   16968:	str	r6, [sp, #88]	; 0x58
   1696c:	b	169ac <__assert_fail@plt+0x4ef4>
   16970:	bl	168f0 <__assert_fail@plt+0x4e38>
   16974:	mov	r1, r7
   16978:	mov	r0, r4
   1697c:	blx	r8
   16980:	mov	r1, sp
   16984:	mov	r2, r4
   16988:	cmp	r0, #0
   1698c:	mov	r0, #8
   16990:	bne	169cc <__assert_fail@plt+0x4f14>
   16994:	ldr	r3, [sp, #16]
   16998:	blx	r3
   1699c:	cmp	r0, #9
   169a0:	cmpne	r0, #5
   169a4:	mov	r6, r0
   169a8:	beq	169d0 <__assert_fail@plt+0x4f18>
   169ac:	ldr	r1, [sp, #152]	; 0x98
   169b0:	mov	r0, sp
   169b4:	bl	162d8 <__assert_fail@plt+0x4820>
   169b8:	mov	r2, sp
   169bc:	mov	r1, #12
   169c0:	cmp	r0, #0
   169c4:	mov	r0, r4
   169c8:	beq	16970 <__assert_fail@plt+0x4eb8>
   169cc:	mov	r6, #9
   169d0:	mov	r0, r4
   169d4:	bl	16404 <__assert_fail@plt+0x494c>
   169d8:	mov	r0, r6
   169dc:	add	sp, sp, #568	; 0x238
   169e0:	pop	{r4, r5, r6, r7, r8, pc}
   169e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169e8:	mov	r4, r1
   169ec:	ldr	r1, [r1, #76]	; 0x4c
   169f0:	mov	r8, r2
   169f4:	sub	sp, sp, #44	; 0x2c
   169f8:	subs	r6, r3, #0
   169fc:	ldr	ip, [pc, #1064]	; 16e2c <__assert_fail@plt+0x5374>
   16a00:	add	r3, r1, #4
   16a04:	ldr	r2, [r1]
   16a08:	and	r7, r0, #3
   16a0c:	add	ip, pc, ip
   16a10:	str	r3, [sp, #32]
   16a14:	str	ip, [sp, #4]
   16a18:	str	r2, [sp, #28]
   16a1c:	bne	16bc8 <__assert_fail@plt+0x5110>
   16a20:	lsl	r2, r2, #8
   16a24:	strb	r6, [sp, #37]	; 0x25
   16a28:	str	r2, [sp, #28]
   16a2c:	mov	r2, #3
   16a30:	strb	r2, [sp, #36]	; 0x24
   16a34:	cmp	r7, #2
   16a38:	ldr	r2, [r4, #80]	; 0x50
   16a3c:	ldreq	r3, [r4, #56]	; 0x38
   16a40:	ands	r2, r2, #1
   16a44:	bne	16b9c <__assert_fail@plt+0x50e4>
   16a48:	eor	r0, r0, #8
   16a4c:	str	r2, [sp, #8]
   16a50:	ubfx	r0, r0, #3, #1
   16a54:	str	r0, [sp, #12]
   16a58:	ldr	r9, [r3]
   16a5c:	cmp	r9, #0
   16a60:	beq	16ba4 <__assert_fail@plt+0x50ec>
   16a64:	cmp	r6, #2
   16a68:	mov	r0, r8
   16a6c:	addeq	r5, r3, #8
   16a70:	addne	r5, r3, #4
   16a74:	ldreq	sl, [r3, #4]
   16a78:	mov	r1, #15
   16a7c:	ldrhne	sl, [r3, #2]
   16a80:	ldrhne	r9, [r3]
   16a84:	ldr	r3, [r4, #72]	; 0x48
   16a88:	bic	fp, sl, #1
   16a8c:	add	fp, fp, r3
   16a90:	bl	16868 <__assert_fail@plt+0x4db0>
   16a94:	cmp	fp, r0
   16a98:	movhi	r0, #0
   16a9c:	bhi	16ab4 <__assert_fail@plt+0x4ffc>
   16aa0:	bic	r3, r9, #1
   16aa4:	add	fp, fp, r3
   16aa8:	cmp	r0, fp
   16aac:	movcs	r0, #0
   16ab0:	movcc	r0, #1
   16ab4:	and	sl, sl, #1
   16ab8:	and	r9, r9, #1
   16abc:	orr	r9, r9, sl, lsl #1
   16ac0:	cmp	r9, #1
   16ac4:	beq	16c40 <__assert_fail@plt+0x5188>
   16ac8:	bcc	16c24 <__assert_fail@plt+0x516c>
   16acc:	cmp	r9, #2
   16ad0:	bne	16bb8 <__assert_fail@plt+0x5100>
   16ad4:	ldr	r3, [r5]
   16ad8:	cmp	r7, #0
   16adc:	bic	fp, r3, #-2147483648	; 0x80000000
   16ae0:	bne	16bf4 <__assert_fail@plt+0x513c>
   16ae4:	cmp	r0, #0
   16ae8:	beq	16c10 <__assert_fail@plt+0x5158>
   16aec:	ldr	r2, [sp, #12]
   16af0:	cmp	fp, #0
   16af4:	orreq	r2, r2, #1
   16af8:	cmp	r2, #0
   16afc:	beq	16c10 <__assert_fail@plt+0x5158>
   16b00:	cmp	fp, #0
   16b04:	beq	16b78 <__assert_fail@plt+0x50c0>
   16b08:	add	r2, r4, #88	; 0x58
   16b0c:	add	ip, sp, #24
   16b10:	mov	sl, r7
   16b14:	str	r7, [sp, #20]
   16b18:	str	r6, [sp, #16]
   16b1c:	add	r9, r5, #4
   16b20:	mov	r7, r2
   16b24:	mov	r6, ip
   16b28:	b	16b38 <__assert_fail@plt+0x5080>
   16b2c:	cmp	r3, fp
   16b30:	mov	sl, r3
   16b34:	beq	16b78 <__assert_fail@plt+0x50c0>
   16b38:	mov	r0, r9
   16b3c:	str	r7, [sp, #24]
   16b40:	bl	1648c <__assert_fail@plt+0x49d4>
   16b44:	mov	r3, r6
   16b48:	mov	r2, #0
   16b4c:	add	r9, r9, #4
   16b50:	mov	r1, r0
   16b54:	mov	r0, r4
   16b58:	bl	118f0 <__cxa_type_match@plt>
   16b5c:	add	r3, sl, #1
   16b60:	cmp	r0, #0
   16b64:	beq	16b2c <__assert_fail@plt+0x5074>
   16b68:	cmp	fp, sl
   16b6c:	ldr	r7, [sp, #20]
   16b70:	ldr	r6, [sp, #16]
   16b74:	bne	16c0c <__assert_fail@plt+0x5154>
   16b78:	mov	r0, r8
   16b7c:	mov	r1, #13
   16b80:	bl	16868 <__assert_fail@plt+0x4db0>
   16b84:	ldr	r2, [sp, #24]
   16b88:	str	r5, [r4, #40]	; 0x28
   16b8c:	mov	r3, #6
   16b90:	str	r2, [r4, #36]	; 0x24
   16b94:	str	r0, [r4, #32]
   16b98:	b	16bbc <__assert_fail@plt+0x5104>
   16b9c:	mov	ip, #0
   16ba0:	str	ip, [sp, #8]
   16ba4:	cmp	r6, #2
   16ba8:	ble	16c9c <__assert_fail@plt+0x51e4>
   16bac:	bl	164a0 <__assert_fail@plt+0x49e8>
   16bb0:	cmp	r0, #0
   16bb4:	beq	16cb0 <__assert_fail@plt+0x51f8>
   16bb8:	mov	r3, #9
   16bbc:	mov	r0, r3
   16bc0:	add	sp, sp, #44	; 0x2c
   16bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bc8:	cmp	r6, #2
   16bcc:	bgt	16a34 <__assert_fail@plt+0x4f7c>
   16bd0:	lsr	r1, r2, #16
   16bd4:	strb	r1, [sp, #37]	; 0x25
   16bd8:	lsl	r2, r2, #16
   16bdc:	mov	ip, #2
   16be0:	uxtb	r1, r1
   16be4:	str	r2, [sp, #28]
   16be8:	strb	ip, [sp, #36]	; 0x24
   16bec:	add	r3, r3, r1, lsl #2
   16bf0:	b	16a34 <__assert_fail@plt+0x4f7c>
   16bf4:	mov	r0, r8
   16bf8:	mov	r1, #13
   16bfc:	ldr	r9, [r4, #32]
   16c00:	bl	16868 <__assert_fail@plt+0x4db0>
   16c04:	cmp	r9, r0
   16c08:	beq	16d50 <__assert_fail@plt+0x5298>
   16c0c:	ldr	r3, [r5]
   16c10:	cmp	r3, #0
   16c14:	addlt	r5, r5, #4
   16c18:	add	fp, fp, #1
   16c1c:	add	r3, r5, fp, lsl #2
   16c20:	b	16a58 <__assert_fail@plt+0x4fa0>
   16c24:	cmp	r7, #0
   16c28:	moveq	r0, #0
   16c2c:	andne	r0, r0, #1
   16c30:	cmp	r0, #0
   16c34:	bne	16db4 <__assert_fail@plt+0x52fc>
   16c38:	add	r3, r5, #4
   16c3c:	b	16a58 <__assert_fail@plt+0x4fa0>
   16c40:	cmp	r7, #0
   16c44:	bne	16cfc <__assert_fail@plt+0x5244>
   16c48:	cmp	r0, #0
   16c4c:	beq	16c94 <__assert_fail@plt+0x51dc>
   16c50:	ldm	r5, {r2, r3}
   16c54:	cmn	r3, #2
   16c58:	lsr	r9, r2, #31
   16c5c:	beq	16bb8 <__assert_fail@plt+0x5100>
   16c60:	cmn	r3, #1
   16c64:	add	r3, r4, #88	; 0x58
   16c68:	str	r3, [sp, #24]
   16c6c:	beq	16d90 <__assert_fail@plt+0x52d8>
   16c70:	add	r0, r5, #4
   16c74:	bl	1648c <__assert_fail@plt+0x49d4>
   16c78:	mov	r2, r9
   16c7c:	add	r3, sp, #24
   16c80:	mov	r1, r0
   16c84:	mov	r0, r4
   16c88:	bl	118f0 <__cxa_type_match@plt>
   16c8c:	cmp	r0, #0
   16c90:	bne	16dfc <__assert_fail@plt+0x5344>
   16c94:	add	r3, r5, #8
   16c98:	b	16a58 <__assert_fail@plt+0x4fa0>
   16c9c:	mov	r0, r8
   16ca0:	add	r1, sp, #28
   16ca4:	bl	17414 <__assert_fail@plt+0x595c>
   16ca8:	cmp	r0, #0
   16cac:	bne	16bb8 <__assert_fail@plt+0x5100>
   16cb0:	ldr	ip, [sp, #8]
   16cb4:	cmp	ip, #0
   16cb8:	moveq	r3, #8
   16cbc:	beq	16bbc <__assert_fail@plt+0x5104>
   16cc0:	mov	r1, #15
   16cc4:	mov	r0, r8
   16cc8:	bl	16868 <__assert_fail@plt+0x4db0>
   16ccc:	mov	r1, #14
   16cd0:	mov	r2, r0
   16cd4:	mov	r0, r8
   16cd8:	bl	168f0 <__assert_fail@plt+0x4e38>
   16cdc:	ldr	r3, [pc, #332]	; 16e30 <__assert_fail@plt+0x5378>
   16ce0:	ldr	ip, [sp, #4]
   16ce4:	mov	r0, r8
   16ce8:	mov	r1, #15
   16cec:	ldr	r2, [ip, r3]
   16cf0:	bl	168f0 <__assert_fail@plt+0x4e38>
   16cf4:	mov	r3, #7
   16cf8:	b	16bbc <__assert_fail@plt+0x5104>
   16cfc:	mov	r0, r8
   16d00:	mov	r1, #13
   16d04:	ldr	r9, [r4, #32]
   16d08:	bl	16868 <__assert_fail@plt+0x4db0>
   16d0c:	cmp	r9, r0
   16d10:	bne	16c94 <__assert_fail@plt+0x51dc>
   16d14:	ldr	r3, [r4, #40]	; 0x28
   16d18:	cmp	r5, r3
   16d1c:	bne	16c94 <__assert_fail@plt+0x51dc>
   16d20:	mov	r0, r5
   16d24:	bl	161bc <__assert_fail@plt+0x4704>
   16d28:	mov	r1, #15
   16d2c:	mov	r2, r0
   16d30:	mov	r0, r8
   16d34:	bl	168f0 <__assert_fail@plt+0x4e38>
   16d38:	mov	r0, r8
   16d3c:	mov	r2, r4
   16d40:	mov	r1, #0
   16d44:	bl	168f0 <__assert_fail@plt+0x4e38>
   16d48:	mov	r3, #7
   16d4c:	b	16bbc <__assert_fail@plt+0x5104>
   16d50:	ldr	r3, [r4, #40]	; 0x28
   16d54:	cmp	r5, r3
   16d58:	bne	16c0c <__assert_fail@plt+0x5154>
   16d5c:	mov	r2, #4
   16d60:	mov	r3, #0
   16d64:	str	fp, [r4, #40]	; 0x28
   16d68:	str	r3, [r4, #44]	; 0x2c
   16d6c:	add	r3, r5, r2
   16d70:	str	r2, [r4, #48]	; 0x30
   16d74:	str	r3, [r4, #52]	; 0x34
   16d78:	ldr	r3, [r5]
   16d7c:	cmp	r3, #0
   16d80:	blt	16df0 <__assert_fail@plt+0x5338>
   16d84:	mov	ip, #1
   16d88:	str	ip, [sp, #8]
   16d8c:	b	16c18 <__assert_fail@plt+0x5160>
   16d90:	mov	r0, r8
   16d94:	mov	r1, #13
   16d98:	bl	16868 <__assert_fail@plt+0x4db0>
   16d9c:	str	r0, [r4, #32]
   16da0:	ldr	r3, [sp, #24]
   16da4:	str	r3, [r4, #36]	; 0x24
   16da8:	str	r5, [r4, #40]	; 0x28
   16dac:	mov	r3, #6
   16db0:	b	16bbc <__assert_fail@plt+0x5104>
   16db4:	mov	r0, r5
   16db8:	add	r5, r5, #4
   16dbc:	bl	161bc <__assert_fail@plt+0x4704>
   16dc0:	str	r5, [r4, #56]	; 0x38
   16dc4:	mov	r6, r0
   16dc8:	mov	r0, r4
   16dcc:	bl	11890 <__cxa_begin_cleanup@plt>
   16dd0:	cmp	r0, #0
   16dd4:	beq	16bb8 <__assert_fail@plt+0x5100>
   16dd8:	mov	r0, r8
   16ddc:	mov	r2, r6
   16de0:	mov	r1, #15
   16de4:	bl	168f0 <__assert_fail@plt+0x4e38>
   16de8:	mov	r3, #7
   16dec:	b	16bbc <__assert_fail@plt+0x5104>
   16df0:	add	r0, fp, #1
   16df4:	add	r0, r5, r0, lsl #2
   16df8:	b	16d24 <__assert_fail@plt+0x526c>
   16dfc:	mov	r9, r0
   16e00:	mov	r1, #13
   16e04:	mov	r0, r8
   16e08:	bl	16868 <__assert_fail@plt+0x4db0>
   16e0c:	cmp	r9, #2
   16e10:	str	r0, [r4, #32]
   16e14:	bne	16da0 <__assert_fail@plt+0x52e8>
   16e18:	ldr	r2, [sp, #24]
   16e1c:	mov	r3, r4
   16e20:	str	r2, [r3, #44]!	; 0x2c
   16e24:	str	r3, [r4, #36]	; 0x24
   16e28:	b	16da8 <__assert_fail@plt+0x52f0>
   16e2c:	andeq	r2, r1, ip, ror #11
   16e30:	andeq	r0, r0, r4, lsl #3
   16e34:	mov	r3, #0
   16e38:	b	169e4 <__assert_fail@plt+0x4f2c>
   16e3c:	mov	r3, #1
   16e40:	b	169e4 <__assert_fail@plt+0x4f2c>
   16e44:	mov	r3, #2
   16e48:	b	169e4 <__assert_fail@plt+0x4f2c>
   16e4c:	push	{r4, r5, r6, r7, r8, lr}
   16e50:	mov	r4, r0
   16e54:	sub	sp, sp, #272	; 0x110
   16e58:	cmp	r1, #4
   16e5c:	addls	pc, pc, r1, lsl #2
   16e60:	b	16e80 <__assert_fail@plt+0x53c8>
   16e64:	b	17074 <__assert_fail@plt+0x55bc>
   16e68:	b	16ef4 <__assert_fail@plt+0x543c>
   16e6c:	b	16e80 <__assert_fail@plt+0x53c8>
   16e70:	b	16e78 <__assert_fail@plt+0x53c0>
   16e74:	b	16e8c <__assert_fail@plt+0x53d4>
   16e78:	cmp	r3, #3
   16e7c:	beq	170b8 <__assert_fail@plt+0x5600>
   16e80:	mov	r0, #2
   16e84:	add	sp, sp, #272	; 0x110
   16e88:	pop	{r4, r5, r6, r7, r8, pc}
   16e8c:	cmp	r2, #16
   16e90:	cmpls	r3, #0
   16e94:	bne	16e80 <__assert_fail@plt+0x53c8>
   16e98:	ldr	r3, [r0]
   16e9c:	tst	r3, #16
   16ea0:	bne	17134 <__assert_fail@plt+0x567c>
   16ea4:	add	r5, sp, #136	; 0x88
   16ea8:	str	r2, [sp, #4]
   16eac:	mov	r0, r5
   16eb0:	bl	172b8 <__assert_fail@plt+0x5800>
   16eb4:	ldr	r1, [r4, #56]	; 0x38
   16eb8:	ldr	r2, [sp, #4]
   16ebc:	mov	r3, #0
   16ec0:	mov	r0, #1
   16ec4:	ands	ip, r2, r0, lsl r3
   16ec8:	ldrne	ip, [r1]
   16ecc:	addne	r1, r1, #4
   16ed0:	strne	ip, [r5, r3, lsl #2]
   16ed4:	add	r3, r3, #1
   16ed8:	cmp	r3, #4
   16edc:	bne	16ec4 <__assert_fail@plt+0x540c>
   16ee0:	mov	r0, r5
   16ee4:	str	r1, [r4, #56]	; 0x38
   16ee8:	bl	172a4 <__assert_fail@plt+0x57ec>
   16eec:	mov	r0, #0
   16ef0:	b	16e84 <__assert_fail@plt+0x53cc>
   16ef4:	bic	r1, r3, #4
   16ef8:	cmp	r1, #1
   16efc:	bne	16e80 <__assert_fail@plt+0x53c8>
   16f00:	cmp	r3, #1
   16f04:	lsr	r5, r2, #16
   16f08:	uxth	r6, r2
   16f0c:	add	r2, r6, r5
   16f10:	movne	r1, #32
   16f14:	moveq	r1, #16
   16f18:	cmp	r1, r2
   16f1c:	bcc	16e80 <__assert_fail@plt+0x53c8>
   16f20:	subs	r0, r3, #1
   16f24:	rsbs	r7, r0, #0
   16f28:	adcs	r7, r7, r0
   16f2c:	cmp	r5, #15
   16f30:	movls	r1, #0
   16f34:	movhi	r1, #1
   16f38:	tst	r7, r1
   16f3c:	bne	16e80 <__assert_fail@plt+0x53c8>
   16f40:	cmp	r1, #0
   16f44:	movne	r8, r6
   16f48:	bne	16f58 <__assert_fail@plt+0x54a0>
   16f4c:	cmp	r2, #16
   16f50:	bls	1715c <__assert_fail@plt+0x56a4>
   16f54:	sub	r8, r2, #16
   16f58:	cmp	r8, #0
   16f5c:	cmpne	r3, #5
   16f60:	bne	16e80 <__assert_fail@plt+0x53c8>
   16f64:	cmp	r5, #15
   16f68:	bhi	16f98 <__assert_fail@plt+0x54e0>
   16f6c:	ldr	r2, [r4]
   16f70:	tst	r2, #1
   16f74:	beq	16f98 <__assert_fail@plt+0x54e0>
   16f78:	cmp	r3, #5
   16f7c:	mov	r0, r4
   16f80:	bic	r3, r2, #1
   16f84:	str	r3, [r4]
   16f88:	beq	171c8 <__assert_fail@plt+0x5710>
   16f8c:	bic	r2, r2, #3
   16f90:	str	r2, [r0], #72	; 0x48
   16f94:	bl	171f4 <__assert_fail@plt+0x573c>
   16f98:	cmp	r8, #0
   16f9c:	beq	16fac <__assert_fail@plt+0x54f4>
   16fa0:	ldr	r3, [r4]
   16fa4:	tst	r3, #4
   16fa8:	bne	171a0 <__assert_fail@plt+0x56e8>
   16fac:	cmp	r7, #0
   16fb0:	bne	171b4 <__assert_fail@plt+0x56fc>
   16fb4:	cmp	r5, #15
   16fb8:	bls	17184 <__assert_fail@plt+0x56cc>
   16fbc:	cmp	r8, #0
   16fc0:	bne	17190 <__assert_fail@plt+0x56d8>
   16fc4:	ldr	ip, [r4, #56]	; 0x38
   16fc8:	cmp	r6, #0
   16fcc:	mov	r2, ip
   16fd0:	ble	17004 <__assert_fail@plt+0x554c>
   16fd4:	add	r0, sp, #136	; 0x88
   16fd8:	lsl	r6, r6, #1
   16fdc:	add	r0, r0, r5, lsl #3
   16fe0:	sub	r1, r6, #1
   16fe4:	rsb	r0, ip, r0
   16fe8:	sub	r3, ip, #4
   16fec:	sub	r1, r1, #1
   16ff0:	ldr	r2, [r3, #4]!
   16ff4:	cmn	r1, #1
   16ff8:	str	r2, [r0, r3]
   16ffc:	bne	16fec <__assert_fail@plt+0x5534>
   17000:	add	r2, ip, r6, lsl #2
   17004:	cmp	r8, #0
   17008:	beq	17048 <__assert_fail@plt+0x5590>
   1700c:	cmp	r5, #16
   17010:	movcs	r0, r5
   17014:	movcc	r0, #16
   17018:	add	r6, sp, #272	; 0x110
   1701c:	lsl	r1, r8, #1
   17020:	mov	ip, r2
   17024:	add	r0, r6, r0, lsl #3
   17028:	sub	r3, r1, #1
   1702c:	sub	r0, r0, #392	; 0x188
   17030:	sub	r3, r3, #1
   17034:	ldr	r6, [ip], #4
   17038:	cmn	r3, #1
   1703c:	str	r6, [r0], #4
   17040:	bne	17030 <__assert_fail@plt+0x5578>
   17044:	add	r2, r2, r1, lsl #2
   17048:	cmp	r7, #0
   1704c:	bne	17164 <__assert_fail@plt+0x56ac>
   17050:	cmp	r5, #15
   17054:	str	r2, [r4, #56]	; 0x38
   17058:	bls	17178 <__assert_fail@plt+0x56c0>
   1705c:	cmp	r8, #0
   17060:	beq	1706c <__assert_fail@plt+0x55b4>
   17064:	add	r0, sp, #8
   17068:	bl	1720c <__assert_fail@plt+0x5754>
   1706c:	mov	r0, #0
   17070:	b	16e84 <__assert_fail@plt+0x53cc>
   17074:	cmp	r3, #0
   17078:	bne	16e80 <__assert_fail@plt+0x53c8>
   1707c:	ldr	r1, [r0, #56]	; 0x38
   17080:	uxth	r5, r2
   17084:	mov	ip, #1
   17088:	ands	r0, r5, ip, lsl r3
   1708c:	add	r0, r4, r3, lsl #2
   17090:	add	r3, r3, #1
   17094:	ldrne	r6, [r1]
   17098:	addne	r1, r1, #4
   1709c:	strne	r6, [r0, #4]
   170a0:	cmp	r3, #16
   170a4:	bne	17088 <__assert_fail@plt+0x55d0>
   170a8:	ands	r0, r2, #8192	; 0x2000
   170ac:	streq	r1, [r4, #56]	; 0x38
   170b0:	beq	16e84 <__assert_fail@plt+0x53cc>
   170b4:	b	1706c <__assert_fail@plt+0x55b4>
   170b8:	lsr	r6, r2, #16
   170bc:	uxth	r7, r2
   170c0:	add	r3, r7, r6
   170c4:	cmp	r3, #16
   170c8:	bhi	16e80 <__assert_fail@plt+0x53c8>
   170cc:	ldr	r3, [r0]
   170d0:	tst	r3, #8
   170d4:	bne	1714c <__assert_fail@plt+0x5694>
   170d8:	add	r5, sp, #136	; 0x88
   170dc:	lsl	r7, r7, #1
   170e0:	mov	r0, r5
   170e4:	bl	17260 <__assert_fail@plt+0x57a8>
   170e8:	ldr	ip, [r4, #56]	; 0x38
   170ec:	cmp	r7, #0
   170f0:	add	r0, r5, r6, lsl #3
   170f4:	sub	r3, r7, #1
   170f8:	mov	r2, ip
   170fc:	beq	17120 <__assert_fail@plt+0x5668>
   17100:	rsb	r0, ip, r0
   17104:	sub	r2, ip, #4
   17108:	sub	r3, r3, #1
   1710c:	ldr	r1, [r2, #4]!
   17110:	cmn	r3, #1
   17114:	str	r1, [r0, r2]
   17118:	bne	17108 <__assert_fail@plt+0x5650>
   1711c:	add	r2, ip, r7, lsl #2
   17120:	mov	r0, r5
   17124:	str	r2, [r4, #56]	; 0x38
   17128:	bl	1721c <__assert_fail@plt+0x5764>
   1712c:	mov	r0, #0
   17130:	b	16e84 <__assert_fail@plt+0x53cc>
   17134:	bic	r3, r3, #16
   17138:	str	r3, [r0], #464	; 0x1d0
   1713c:	str	r2, [sp, #4]
   17140:	bl	172b8 <__assert_fail@plt+0x5800>
   17144:	ldr	r2, [sp, #4]
   17148:	b	16ea4 <__assert_fail@plt+0x53ec>
   1714c:	bic	r3, r3, #8
   17150:	str	r3, [r0], #336	; 0x150
   17154:	bl	17260 <__assert_fail@plt+0x57a8>
   17158:	b	170d8 <__assert_fail@plt+0x5620>
   1715c:	mov	r8, r1
   17160:	b	16f64 <__assert_fail@plt+0x54ac>
   17164:	add	r2, r2, #4
   17168:	add	r0, sp, #136	; 0x88
   1716c:	str	r2, [r4, #56]	; 0x38
   17170:	bl	171ec <__assert_fail@plt+0x5734>
   17174:	b	1706c <__assert_fail@plt+0x55b4>
   17178:	add	r0, sp, #136	; 0x88
   1717c:	bl	171fc <__assert_fail@plt+0x5744>
   17180:	b	1705c <__assert_fail@plt+0x55a4>
   17184:	add	r0, sp, #136	; 0x88
   17188:	bl	17204 <__assert_fail@plt+0x574c>
   1718c:	b	16fbc <__assert_fail@plt+0x5504>
   17190:	add	r0, sp, #8
   17194:	bl	17214 <__assert_fail@plt+0x575c>
   17198:	rsb	r6, r5, #16
   1719c:	b	16fc4 <__assert_fail@plt+0x550c>
   171a0:	mov	r0, r4
   171a4:	bic	r3, r3, #4
   171a8:	str	r3, [r0], #208	; 0xd0
   171ac:	bl	17214 <__assert_fail@plt+0x575c>
   171b0:	b	16fac <__assert_fail@plt+0x54f4>
   171b4:	add	r0, sp, #136	; 0x88
   171b8:	bl	171f4 <__assert_fail@plt+0x573c>
   171bc:	cmp	r8, #0
   171c0:	bne	17198 <__assert_fail@plt+0x56e0>
   171c4:	b	16fc4 <__assert_fail@plt+0x550c>
   171c8:	orr	r3, r3, #2
   171cc:	str	r3, [r0], #72	; 0x48
   171d0:	bl	17204 <__assert_fail@plt+0x574c>
   171d4:	b	16f98 <__assert_fail@plt+0x54e0>
   171d8:	add	r1, r0, #52	; 0x34
   171dc:	ldm	r1, {r3, r4, r5}
   171e0:	push	{r3, r4, r5}
   171e4:	ldm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   171e8:	ldm	sp, {sp, lr, pc}
   171ec:	fldmiax	r0, {d0-d15}	;@ Deprecated
   171f0:	bx	lr
   171f4:	fstmiax	r0, {d0-d15}	;@ Deprecated
   171f8:	bx	lr
   171fc:	vldmia	r0, {d0-d15}
   17200:	bx	lr
   17204:	vstmia	r0, {d0-d15}
   17208:	bx	lr
   1720c:	vldmia	r0, {d16-d31}
   17210:	bx	lr
   17214:	vstmia	r0, {d16-d31}
   17218:	bx	lr
   1721c:	ldfe	f0, [r0], #8
   17220:	ldfe	f1, [r0], #8
   17224:	ldfe	f2, [r0], #8
   17228:	ldfe	f3, [r0], #8
   1722c:	ldfe	f4, [r0], #8
   17230:	ldfe	f5, [r0], #8
   17234:	ldfe	f6, [r0], #8
   17238:	ldfe	f7, [r0], #8
   1723c:	ldfp	f0, [r0], #8
   17240:	ldfp	f1, [r0], #8
   17244:	ldfp	f2, [r0], #8
   17248:	ldfp	f3, [r0], #8
   1724c:	ldfp	f4, [r0], #8
   17250:	ldfp	f5, [r0], #8
   17254:	ldfp	f6, [r0], #8
   17258:	ldfp	f7, [r0], #8
   1725c:	bx	lr
   17260:	stfe	f0, [r0], #8
   17264:	stfe	f1, [r0], #8
   17268:	stfe	f2, [r0], #8
   1726c:	stfe	f3, [r0], #8
   17270:	stfe	f4, [r0], #8
   17274:	stfe	f5, [r0], #8
   17278:	stfe	f6, [r0], #8
   1727c:	stfe	f7, [r0], #8
   17280:	stfp	f0, [r0], #8
   17284:	stfp	f1, [r0], #8
   17288:	stfp	f2, [r0], #8
   1728c:	stfp	f3, [r0], #8
   17290:	stfp	f4, [r0], #8
   17294:	stfp	f5, [r0], #8
   17298:	stfp	f6, [r0], #8
   1729c:	stfp	f7, [r0], #8
   172a0:	bx	lr
   172a4:	ldc2	1, cr8, [r0], #4
   172a8:	ldc2	1, cr9, [r0], #4
   172ac:	ldc2	1, cr10, [r0], #4
   172b0:	ldc2	1, cr11, [r0], #4
   172b4:	bx	lr
   172b8:	stc2	1, cr8, [r0], #4
   172bc:	stc2	1, cr9, [r0], #4
   172c0:	stc2	1, cr10, [r0], #4
   172c4:	stc2	1, cr11, [r0], #4
   172c8:	bx	lr
   172cc:	push	{sp, lr, pc}
   172d0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   172d4:	mov	r3, #0
   172d8:	push	{r2, r3}
   172dc:	add	r1, sp, #4
   172e0:	bl	16688 <__assert_fail@plt+0x4bd0>
   172e4:	ldr	lr, [sp, #64]	; 0x40
   172e8:	add	sp, sp, #72	; 0x48
   172ec:	bx	lr
   172f0:	push	{sp, lr, pc}
   172f4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   172f8:	mov	r3, #0
   172fc:	push	{r2, r3}
   17300:	add	r1, sp, #4
   17304:	bl	16754 <__assert_fail@plt+0x4c9c>
   17308:	ldr	lr, [sp, #64]	; 0x40
   1730c:	add	sp, sp, #72	; 0x48
   17310:	bx	lr
   17314:	push	{sp, lr, pc}
   17318:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1731c:	mov	r3, #0
   17320:	push	{r2, r3}
   17324:	add	r1, sp, #4
   17328:	bl	167c8 <__assert_fail@plt+0x4d10>
   1732c:	ldr	lr, [sp, #64]	; 0x40
   17330:	add	sp, sp, #72	; 0x48
   17334:	bx	lr
   17338:	push	{sp, lr, pc}
   1733c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   17340:	mov	r3, #0
   17344:	push	{r2, r3}
   17348:	add	r3, sp, #4
   1734c:	bl	16730 <__assert_fail@plt+0x4c78>
   17350:	ldr	lr, [sp, #64]	; 0x40
   17354:	add	sp, sp, #72	; 0x48
   17358:	bx	lr
   1735c:	push	{sp, lr, pc}
   17360:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   17364:	mov	r3, #0
   17368:	push	{r2, r3}
   1736c:	add	r2, sp, #4
   17370:	bl	16920 <__assert_fail@plt+0x4e68>
   17374:	ldr	lr, [sp, #64]	; 0x40
   17378:	add	sp, sp, #72	; 0x48
   1737c:	bx	lr
   17380:	ldrb	r2, [r0, #8]
   17384:	mov	r3, r0
   17388:	cmp	r2, #0
   1738c:	bne	173a4 <__assert_fail@plt+0x58ec>
   17390:	ldrb	r2, [r0, #9]
   17394:	cmp	r2, #0
   17398:	bne	173c0 <__assert_fail@plt+0x5908>
   1739c:	mov	r0, #176	; 0xb0
   173a0:	bx	lr
   173a4:	ldr	r0, [r0]
   173a8:	sub	r2, r2, #1
   173ac:	strb	r2, [r3, #8]
   173b0:	lsl	r2, r0, #8
   173b4:	lsr	r0, r0, #24
   173b8:	str	r2, [r3]
   173bc:	bx	lr
   173c0:	ldr	r1, [r0, #4]
   173c4:	sub	r2, r2, #1
   173c8:	strb	r2, [r0, #9]
   173cc:	mov	r2, #3
   173d0:	add	r0, r1, #4
   173d4:	str	r0, [r3, #4]
   173d8:	ldr	r0, [r1]
   173dc:	strb	r2, [r3, #8]
   173e0:	b	173b0 <__assert_fail@plt+0x58f8>
   173e4:	push	{lr}		; (str lr, [sp, #-4]!)
   173e8:	sub	sp, sp, #20
   173ec:	mov	r1, #0
   173f0:	add	r2, sp, #12
   173f4:	mov	r3, r1
   173f8:	str	r2, [sp]
   173fc:	mov	r2, #12
   17400:	bl	1680c <__assert_fail@plt+0x4d54>
   17404:	ldr	r0, [sp, #12]
   17408:	add	sp, sp, #20
   1740c:	pop	{pc}		; (ldr pc, [sp], #4)
   17410:	b	173e4 <__assert_fail@plt+0x592c>
   17414:	push	{r4, r5, r6, r7, r8, r9, lr}
   17418:	sub	sp, sp, #20
   1741c:	add	r7, sp, #12
   17420:	mov	r6, r0
   17424:	mov	r5, r1
   17428:	mov	r8, #0
   1742c:	mov	r0, r5
   17430:	bl	17380 <__assert_fail@plt+0x58c8>
   17434:	cmp	r0, #176	; 0xb0
   17438:	mov	r4, r0
   1743c:	beq	17658 <__assert_fail@plt+0x5ba0>
   17440:	bic	r2, r0, #127	; 0x7f
   17444:	ands	r1, r2, #255	; 0xff
   17448:	beq	174b4 <__assert_fail@plt+0x59fc>
   1744c:	and	r2, r0, #240	; 0xf0
   17450:	cmp	r2, #128	; 0x80
   17454:	beq	175b0 <__assert_fail@plt+0x5af8>
   17458:	cmp	r2, #144	; 0x90
   1745c:	beq	17504 <__assert_fail@plt+0x5a4c>
   17460:	cmp	r2, #160	; 0xa0
   17464:	beq	1752c <__assert_fail@plt+0x5a74>
   17468:	cmp	r2, #176	; 0xb0
   1746c:	beq	17564 <__assert_fail@plt+0x5aac>
   17470:	cmp	r2, #192	; 0xc0
   17474:	beq	175f8 <__assert_fail@plt+0x5b40>
   17478:	and	r3, r0, #248	; 0xf8
   1747c:	cmp	r3, #208	; 0xd0
   17480:	bne	174a8 <__assert_fail@plt+0x59f0>
   17484:	and	r4, r0, #7
   17488:	mov	r1, #1
   1748c:	add	r2, r4, #1
   17490:	mov	r0, r6
   17494:	orr	r2, r2, #524288	; 0x80000
   17498:	mov	r3, #5
   1749c:	bl	16e4c <__assert_fail@plt+0x5394>
   174a0:	cmp	r0, #0
   174a4:	beq	1742c <__assert_fail@plt+0x5974>
   174a8:	mov	r0, #9
   174ac:	add	sp, sp, #20
   174b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   174b4:	lsl	r9, r0, #2
   174b8:	mov	r3, r1
   174bc:	str	r7, [sp]
   174c0:	mov	r0, r6
   174c4:	mov	r2, #13
   174c8:	uxtb	r9, r9
   174cc:	bl	1680c <__assert_fail@plt+0x4d54>
   174d0:	ldr	r3, [sp, #12]
   174d4:	add	r9, r9, #4
   174d8:	tst	r4, #64	; 0x40
   174dc:	rsbne	r9, r9, r3
   174e0:	addeq	r9, r3, r9
   174e4:	str	r9, [sp, #12]
   174e8:	mov	r1, #0
   174ec:	str	r7, [sp]
   174f0:	mov	r3, r1
   174f4:	mov	r0, r6
   174f8:	mov	r2, #13
   174fc:	bl	16894 <__assert_fail@plt+0x4ddc>
   17500:	b	1742c <__assert_fail@plt+0x5974>
   17504:	and	r3, r0, #13
   17508:	cmp	r3, #13
   1750c:	beq	174a8 <__assert_fail@plt+0x59f0>
   17510:	mov	r1, #0
   17514:	and	r2, r0, #15
   17518:	str	r7, [sp]
   1751c:	mov	r3, r1
   17520:	mov	r0, r6
   17524:	bl	1680c <__assert_fail@plt+0x4d54>
   17528:	b	174e8 <__assert_fail@plt+0x5a30>
   1752c:	mvn	r4, r0
   17530:	mov	r2, #4080	; 0xff0
   17534:	and	r4, r4, #7
   17538:	tst	r0, #8
   1753c:	asr	r2, r2, r4
   17540:	mov	r1, #0
   17544:	and	r2, r2, #4080	; 0xff0
   17548:	orrne	r2, r2, #16384	; 0x4000
   1754c:	mov	r3, r1
   17550:	mov	r0, r6
   17554:	bl	16e4c <__assert_fail@plt+0x5394>
   17558:	cmp	r0, #0
   1755c:	bne	174a8 <__assert_fail@plt+0x59f0>
   17560:	b	1742c <__assert_fail@plt+0x5974>
   17564:	cmp	r0, #177	; 0xb1
   17568:	beq	176a0 <__assert_fail@plt+0x5be8>
   1756c:	cmp	r0, #178	; 0xb2
   17570:	beq	176bc <__assert_fail@plt+0x5c04>
   17574:	cmp	r0, #179	; 0xb3
   17578:	beq	1773c <__assert_fail@plt+0x5c84>
   1757c:	and	r3, r0, #252	; 0xfc
   17580:	cmp	r3, #180	; 0xb4
   17584:	beq	174a8 <__assert_fail@plt+0x59f0>
   17588:	and	r2, r0, #7
   1758c:	mov	r1, #1
   17590:	add	r2, r2, r1
   17594:	mov	r3, r1
   17598:	orr	r2, r2, #524288	; 0x80000
   1759c:	mov	r0, r6
   175a0:	bl	16e4c <__assert_fail@plt+0x5394>
   175a4:	cmp	r0, #0
   175a8:	bne	174a8 <__assert_fail@plt+0x59f0>
   175ac:	b	1742c <__assert_fail@plt+0x5974>
   175b0:	mov	r0, r5
   175b4:	lsl	r4, r4, #8
   175b8:	bl	17380 <__assert_fail@plt+0x58c8>
   175bc:	orr	r0, r0, r4
   175c0:	cmp	r0, #32768	; 0x8000
   175c4:	beq	174a8 <__assert_fail@plt+0x59f0>
   175c8:	lsl	r4, r0, #4
   175cc:	mov	r1, #0
   175d0:	movw	r2, #65520	; 0xfff0
   175d4:	mov	r3, r1
   175d8:	and	r2, r4, r2
   175dc:	mov	r0, r6
   175e0:	bl	16e4c <__assert_fail@plt+0x5394>
   175e4:	cmp	r0, #0
   175e8:	bne	174a8 <__assert_fail@plt+0x59f0>
   175ec:	tst	r4, #32768	; 0x8000
   175f0:	movne	r8, #1
   175f4:	b	1742c <__assert_fail@plt+0x5974>
   175f8:	cmp	r0, #198	; 0xc6
   175fc:	beq	1775c <__assert_fail@plt+0x5ca4>
   17600:	cmp	r0, #199	; 0xc7
   17604:	beq	17778 <__assert_fail@plt+0x5cc0>
   17608:	and	r3, r0, #248	; 0xf8
   1760c:	cmp	r3, #192	; 0xc0
   17610:	beq	177a8 <__assert_fail@plt+0x5cf0>
   17614:	cmp	r0, #200	; 0xc8
   17618:	beq	177d0 <__assert_fail@plt+0x5d18>
   1761c:	cmp	r0, #201	; 0xc9
   17620:	bne	174a8 <__assert_fail@plt+0x59f0>
   17624:	mov	r0, r5
   17628:	bl	17380 <__assert_fail@plt+0x58c8>
   1762c:	mov	r1, #1
   17630:	and	r3, r0, #15
   17634:	and	r2, r0, #240	; 0xf0
   17638:	add	r3, r3, #1
   1763c:	mov	r0, r6
   17640:	orr	r2, r3, r2, lsl #12
   17644:	mov	r3, #5
   17648:	bl	16e4c <__assert_fail@plt+0x5394>
   1764c:	cmp	r0, #0
   17650:	bne	174a8 <__assert_fail@plt+0x59f0>
   17654:	b	1742c <__assert_fail@plt+0x5974>
   17658:	cmp	r8, #0
   1765c:	movne	r0, #0
   17660:	bne	174ac <__assert_fail@plt+0x59f4>
   17664:	add	r4, sp, #12
   17668:	mov	r1, r8
   1766c:	mov	r2, #14
   17670:	mov	r3, r8
   17674:	mov	r0, r6
   17678:	str	r4, [sp]
   1767c:	bl	1680c <__assert_fail@plt+0x4d54>
   17680:	str	r4, [sp]
   17684:	mov	r0, r6
   17688:	mov	r1, r8
   1768c:	mov	r2, #15
   17690:	mov	r3, r8
   17694:	bl	16894 <__assert_fail@plt+0x4ddc>
   17698:	mov	r0, r8
   1769c:	b	174ac <__assert_fail@plt+0x59f4>
   176a0:	mov	r0, r5
   176a4:	bl	17380 <__assert_fail@plt+0x58c8>
   176a8:	subs	r2, r0, #0
   176ac:	beq	174a8 <__assert_fail@plt+0x59f0>
   176b0:	ands	r1, r2, #240	; 0xf0
   176b4:	beq	1754c <__assert_fail@plt+0x5a94>
   176b8:	b	174a8 <__assert_fail@plt+0x59f0>
   176bc:	mov	r1, #0
   176c0:	mov	r2, #13
   176c4:	mov	r3, r1
   176c8:	str	r7, [sp]
   176cc:	mov	r0, r6
   176d0:	mov	r4, #2
   176d4:	bl	1680c <__assert_fail@plt+0x4d54>
   176d8:	mov	r0, r5
   176dc:	bl	17380 <__assert_fail@plt+0x58c8>
   176e0:	tst	r0, #128	; 0x80
   176e4:	beq	1770c <__assert_fail@plt+0x5c54>
   176e8:	and	r2, r0, #127	; 0x7f
   176ec:	ldr	r3, [sp, #12]
   176f0:	mov	r0, r5
   176f4:	add	r3, r3, r2, lsl r4
   176f8:	str	r3, [sp, #12]
   176fc:	bl	17380 <__assert_fail@plt+0x58c8>
   17700:	add	r4, r4, #7
   17704:	tst	r0, #128	; 0x80
   17708:	bne	176e8 <__assert_fail@plt+0x5c30>
   1770c:	ldr	ip, [sp, #12]
   17710:	and	lr, r0, #127	; 0x7f
   17714:	mov	r1, #0
   17718:	str	r7, [sp]
   1771c:	add	ip, ip, #516	; 0x204
   17720:	mov	r3, r1
   17724:	mov	r0, r6
   17728:	mov	r2, #13
   1772c:	add	r4, ip, lr, lsl r4
   17730:	str	r4, [sp, #12]
   17734:	bl	16894 <__assert_fail@plt+0x4ddc>
   17738:	b	1742c <__assert_fail@plt+0x5974>
   1773c:	mov	r0, r5
   17740:	bl	17380 <__assert_fail@plt+0x58c8>
   17744:	mov	r1, #1
   17748:	and	r3, r0, #15
   1774c:	and	r2, r0, #240	; 0xf0
   17750:	add	r3, r3, #1
   17754:	orr	r2, r3, r2, lsl #12
   17758:	b	1754c <__assert_fail@plt+0x5a94>
   1775c:	mov	r0, r5
   17760:	bl	17380 <__assert_fail@plt+0x58c8>
   17764:	mov	r1, #3
   17768:	and	r3, r0, #15
   1776c:	and	r2, r0, #240	; 0xf0
   17770:	add	r3, r3, #1
   17774:	b	17754 <__assert_fail@plt+0x5c9c>
   17778:	mov	r0, r5
   1777c:	bl	17380 <__assert_fail@plt+0x58c8>
   17780:	subs	r2, r0, #0
   17784:	beq	174a8 <__assert_fail@plt+0x59f0>
   17788:	ands	r3, r2, #240	; 0xf0
   1778c:	bne	174a8 <__assert_fail@plt+0x59f0>
   17790:	mov	r0, r6
   17794:	mov	r1, #4
   17798:	bl	16e4c <__assert_fail@plt+0x5394>
   1779c:	cmp	r0, #0
   177a0:	bne	174a8 <__assert_fail@plt+0x59f0>
   177a4:	b	1742c <__assert_fail@plt+0x5974>
   177a8:	and	r2, r0, #15
   177ac:	mov	r1, #3
   177b0:	add	r2, r2, #1
   177b4:	mov	r3, r1
   177b8:	orr	r2, r2, #655360	; 0xa0000
   177bc:	mov	r0, r6
   177c0:	bl	16e4c <__assert_fail@plt+0x5394>
   177c4:	cmp	r0, #0
   177c8:	bne	174a8 <__assert_fail@plt+0x59f0>
   177cc:	b	1742c <__assert_fail@plt+0x5974>
   177d0:	mov	r0, r5
   177d4:	bl	17380 <__assert_fail@plt+0x58c8>
   177d8:	mov	r1, #1
   177dc:	and	r2, r0, #240	; 0xf0
   177e0:	and	r3, r0, #15
   177e4:	add	r2, r2, #16
   177e8:	add	r3, r3, #1
   177ec:	mov	r0, r6
   177f0:	orr	r2, r3, r2, lsl #12
   177f4:	mov	r3, #5
   177f8:	bl	16e4c <__assert_fail@plt+0x5394>
   177fc:	cmp	r0, #0
   17800:	bne	174a8 <__assert_fail@plt+0x59f0>
   17804:	b	1742c <__assert_fail@plt+0x5974>
   17808:	ldr	r3, [r0, #76]	; 0x4c
   1780c:	mov	r0, r1
   17810:	push	{lr}		; (str lr, [sp, #-4]!)
   17814:	sub	sp, sp, #20
   17818:	ldr	r2, [r3, #4]
   1781c:	add	ip, r3, #8
   17820:	mov	lr, #3
   17824:	strb	lr, [sp, #12]
   17828:	ldrb	r3, [r3, #7]
   1782c:	add	r1, sp, #4
   17830:	lsl	r2, r2, #8
   17834:	stmib	sp, {r2, ip}
   17838:	strb	r3, [sp, #13]
   1783c:	bl	17414 <__assert_fail@plt+0x595c>
   17840:	add	sp, sp, #20
   17844:	pop	{pc}		; (ldr pc, [sp], #4)
   17848:	push	{r3, lr}
   1784c:	bl	17410 <__assert_fail@plt+0x5958>
   17850:	ldr	r0, [r0, #72]	; 0x48
   17854:	pop	{r3, pc}
   17858:	push	{r3, lr}
   1785c:	bl	17410 <__assert_fail@plt+0x5958>
   17860:	ldr	r3, [r0, #76]	; 0x4c
   17864:	ldrb	r2, [r3, #7]
   17868:	add	r0, r3, r2, lsl #2
   1786c:	add	r0, r0, #8
   17870:	pop	{r3, pc}
   17874:	push	{r3, lr}
   17878:	bl	11a94 <abort@plt>
   1787c:	push	{r3, lr}
   17880:	bl	11a94 <abort@plt>
   17884:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17888:	mov	r7, r0
   1788c:	ldr	r6, [pc, #76]	; 178e0 <__assert_fail@plt+0x5e28>
   17890:	mov	r8, r1
   17894:	ldr	r5, [pc, #72]	; 178e4 <__assert_fail@plt+0x5e2c>
   17898:	mov	r9, r2
   1789c:	add	r6, pc, r6
   178a0:	bl	11684 <_init@@Base>
   178a4:	add	r5, pc, r5
   178a8:	rsb	r6, r5, r6
   178ac:	asrs	r6, r6, #2
   178b0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   178b4:	sub	r5, r5, #4
   178b8:	mov	r4, #0
   178bc:	add	r4, r4, #1
   178c0:	ldr	r3, [r5, #4]!
   178c4:	mov	r0, r7
   178c8:	mov	r1, r8
   178cc:	mov	r2, r9
   178d0:	blx	r3
   178d4:	cmp	r4, r6
   178d8:	bne	178bc <__assert_fail@plt+0x5e04>
   178dc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   178e0:	andeq	r1, r1, r4, asr r6
   178e4:	andeq	r1, r1, r8, asr #12
   178e8:	bx	lr

Disassembly of section .fini:

000178ec <_fini@@Base>:
   178ec:	push	{r3, lr}
   178f0:	pop	{r3, pc}
