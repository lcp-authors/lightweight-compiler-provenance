
centos-preinstalled/mktemp:     file format elf32-littlearm


Disassembly of section .init:

00011134 <.init>:
   11134:	push	{r3, lr}
   11138:	bl	11bbc <__assert_fail@plt+0x738>
   1113c:	pop	{r3, pc}

Disassembly of section .plt:

00011140 <fdopen@plt-0x14>:
   11140:	push	{lr}		; (str lr, [sp, #-4]!)
   11144:	ldr	lr, [pc, #4]	; 11150 <fdopen@plt-0x4>
   11148:	add	lr, pc, lr
   1114c:	ldr	pc, [lr, #8]!
   11150:			; <UNDEFINED> instruction: 0x00016eb0

00011154 <fdopen@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011160 <calloc@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3752]!	; 0xea8

0001116c <fputs_unlocked@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3744]!	; 0xea0

00011178 <raise@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3736]!	; 0xe98

00011184 <strcmp@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3728]!	; 0xe90

00011190 <__read_chk@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3720]!	; 0xe88

0001119c <fflush@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3712]!	; 0xe80

000111a8 <getuid@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3704]!	; 0xe78

000111b4 <free@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3696]!	; 0xe70

000111c0 <_exit@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3688]!	; 0xe68

000111cc <memcpy@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3680]!	; 0xe60

000111d8 <mbsinit@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3672]!	; 0xe58

000111e4 <memcmp@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3664]!	; 0xe50

000111f0 <fputc_unlocked@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3656]!	; 0xe48

000111fc <dcgettext@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3648]!	; 0xe40

00011208 <__stack_chk_fail@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3640]!	; 0xe38

00011214 <realloc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3632]!	; 0xe30

00011220 <textdomain@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3624]!	; 0xe28

0001122c <__rawmemchr@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3616]!	; 0xe20

00011238 <iswprint@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3608]!	; 0xe18

00011244 <fwrite@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3600]!	; 0xe10

00011250 <lseek64@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3592]!	; 0xe08

0001125c <__ctype_get_mb_cur_max@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3584]!	; 0xe00

00011268 <strcpy@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3576]!	; 0xdf8

00011274 <gettimeofday@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011280 <__fpending@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3560]!	; 0xde8

0001128c <mbrtowc@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3552]!	; 0xde0

00011298 <error@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3544]!	; 0xdd8

000112a4 <open64@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b0 <getenv@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3528]!	; 0xdc8

000112bc <puts@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3520]!	; 0xdc0

000112c8 <malloc@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3512]!	; 0xdb8

000112d4 <__libc_start_main@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e0 <__freading@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3496]!	; 0xda8

000112ec <__gmon_start__@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3488]!	; 0xda0

000112f8 <mempcpy@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3480]!	; 0xd98

00011304 <getopt_long@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3472]!	; 0xd90

00011310 <__ctype_b_loc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3464]!	; 0xd88

0001131c <getpid@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3456]!	; 0xd80

00011328 <exit@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3448]!	; 0xd78

00011334 <strlen@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3440]!	; 0xd70

00011340 <ungetc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3432]!	; 0xd68

0001134c <fcntl@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3424]!	; 0xd60

00011358 <__errno_location@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3416]!	; 0xd58

00011364 <__cxa_atexit@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3408]!	; 0xd50

00011370 <mkdir@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3400]!	; 0xd48

0001137c <setvbuf@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3392]!	; 0xd40

00011388 <getgid@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3384]!	; 0xd38

00011394 <memset@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3376]!	; 0xd30

000113a0 <fscanf@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3368]!	; 0xd28

000113ac <__printf_chk@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #90112	; 0x16000
   113b4:	ldr	pc, [ip, #3360]!	; 0xd20

000113b8 <fileno@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #90112	; 0x16000
   113c0:	ldr	pc, [ip, #3352]!	; 0xd18

000113c4 <__fprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #90112	; 0x16000
   113cc:	ldr	pc, [ip, #3344]!	; 0xd10

000113d0 <fclose@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #90112	; 0x16000
   113d8:	ldr	pc, [ip, #3336]!	; 0xd08

000113dc <fseeko64@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #90112	; 0x16000
   113e4:	ldr	pc, [ip, #3328]!	; 0xd00

000113e8 <__uflow@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #90112	; 0x16000
   113f0:	ldr	pc, [ip, #3320]!	; 0xcf8

000113f4 <setlocale@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #90112	; 0x16000
   113fc:	ldr	pc, [ip, #3312]!	; 0xcf0

00011400 <strrchr@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #90112	; 0x16000
   11408:	ldr	pc, [ip, #3304]!	; 0xce8

0001140c <nl_langinfo@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #90112	; 0x16000
   11414:	ldr	pc, [ip, #3296]!	; 0xce0

00011418 <remove@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #90112	; 0x16000
   11420:	ldr	pc, [ip, #3288]!	; 0xcd8

00011424 <getppid@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #90112	; 0x16000
   1142c:	ldr	pc, [ip, #3280]!	; 0xcd0

00011430 <fopen64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #90112	; 0x16000
   11438:	ldr	pc, [ip, #3272]!	; 0xcc8

0001143c <bindtextdomain@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #90112	; 0x16000
   11444:	ldr	pc, [ip, #3264]!	; 0xcc0

00011448 <fread_unlocked@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #90112	; 0x16000
   11450:	ldr	pc, [ip, #3256]!	; 0xcb8

00011454 <strncmp@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #90112	; 0x16000
   1145c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011460 <abort@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #90112	; 0x16000
   11468:	ldr	pc, [ip, #3240]!	; 0xca8

0001146c <close@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #90112	; 0x16000
   11474:	ldr	pc, [ip, #3232]!	; 0xca0

00011478 <__lxstat64@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #90112	; 0x16000
   11480:	ldr	pc, [ip, #3224]!	; 0xc98

00011484 <__assert_fail@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #90112	; 0x16000
   1148c:	ldr	pc, [ip, #3216]!	; 0xc90

Disassembly of section .text:

00011490 <.text>:
   11490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11494:	mov	r6, r0
   11498:	sub	sp, sp, #44	; 0x2c
   1149c:	ldr	r0, [r1]
   114a0:	mov	r5, r1
   114a4:	bl	122e4 <__assert_fail@plt+0xe60>
   114a8:	ldr	r1, [pc, #1616]	; 11b00 <__assert_fail@plt+0x67c>
   114ac:	mov	r0, #6
   114b0:	ldr	r7, [pc, #1612]	; 11b04 <__assert_fail@plt+0x680>
   114b4:	mov	r4, #0
   114b8:	add	r1, pc, r1
   114bc:	ldr	r8, [pc, #1604]	; 11b08 <__assert_fail@plt+0x684>
   114c0:	bl	113f4 <setlocale@plt>
   114c4:	add	r7, pc, r7
   114c8:	ldr	r1, [pc, #1596]	; 11b0c <__assert_fail@plt+0x688>
   114cc:	add	r8, pc, r8
   114d0:	mov	r0, r7
   114d4:	str	r4, [sp, #32]
   114d8:	add	r1, pc, r1
   114dc:	ldr	sl, [pc, #1580]	; 11b10 <__assert_fail@plt+0x68c>
   114e0:	bl	1143c <bindtextdomain@plt>
   114e4:	mov	r0, r7
   114e8:	ldr	r7, [pc, #1572]	; 11b14 <__assert_fail@plt+0x690>
   114ec:	bl	11220 <textdomain@plt>
   114f0:	ldr	r0, [pc, #1568]	; 11b18 <__assert_fail@plt+0x694>
   114f4:	mov	fp, r4
   114f8:	add	r7, pc, r7
   114fc:	mov	r9, r4
   11500:	add	r0, pc, r0
   11504:	add	sl, pc, sl
   11508:	bl	16528 <__assert_fail@plt+0x50a4>
   1150c:	str	r4, [sp, #20]
   11510:	str	r4, [sp, #24]
   11514:	str	r4, [sp, #36]	; 0x24
   11518:	str	r4, [sp, #28]
   1151c:	str	r9, [sp]
   11520:	mov	r0, r6
   11524:	mov	r1, r5
   11528:	mov	r2, r8
   1152c:	mov	r3, r7
   11530:	bl	11304 <getopt_long@plt>
   11534:	cmn	r0, #1
   11538:	beq	11610 <__assert_fail@plt+0x18c>
   1153c:	cmp	r0, #112	; 0x70
   11540:	beq	1166c <__assert_fail@plt+0x1e8>
   11544:	ble	11578 <__assert_fail@plt+0xf4>
   11548:	cmp	r0, #116	; 0x74
   1154c:	beq	11654 <__assert_fail@plt+0x1d0>
   11550:	ble	115fc <__assert_fail@plt+0x178>
   11554:	cmp	r0, #117	; 0x75
   11558:	beq	115a0 <__assert_fail@plt+0x11c>
   1155c:	cmp	r0, #256	; 0x100
   11560:	bne	1164c <__assert_fail@plt+0x1c8>
   11564:	ldr	r3, [pc, #1456]	; 11b1c <__assert_fail@plt+0x698>
   11568:	ldr	r3, [sl, r3]
   1156c:	ldr	r3, [r3]
   11570:	str	r3, [sp, #24]
   11574:	b	1151c <__assert_fail@plt+0x98>
   11578:	cmn	r0, #2
   1157c:	beq	11664 <__assert_fail@plt+0x1e0>
   11580:	ble	115a8 <__assert_fail@plt+0x124>
   11584:	cmp	r0, #86	; 0x56
   11588:	beq	115b0 <__assert_fail@plt+0x12c>
   1158c:	cmp	r0, #100	; 0x64
   11590:	bne	1164c <__assert_fail@plt+0x1c8>
   11594:	mov	r3, #1
   11598:	str	r3, [sp, #32]
   1159c:	b	1151c <__assert_fail@plt+0x98>
   115a0:	mov	r4, #1
   115a4:	b	1151c <__assert_fail@plt+0x98>
   115a8:	cmn	r0, #3
   115ac:	bne	1164c <__assert_fail@plt+0x1c8>
   115b0:	ldr	r2, [pc, #1384]	; 11b20 <__assert_fail@plt+0x69c>
   115b4:	mov	r4, #0
   115b8:	ldr	r3, [pc, #1380]	; 11b24 <__assert_fail@plt+0x6a0>
   115bc:	ldr	r1, [pc, #1380]	; 11b28 <__assert_fail@plt+0x6a4>
   115c0:	ldr	r0, [sl, r2]
   115c4:	ldr	r3, [sl, r3]
   115c8:	add	r1, pc, r1
   115cc:	ldr	r2, [pc, #1368]	; 11b2c <__assert_fail@plt+0x6a8>
   115d0:	ldr	r0, [r0]
   115d4:	add	r2, pc, r2
   115d8:	ldr	r3, [r3]
   115dc:	stm	sp, {r1, r2, r4}
   115e0:	ldr	r1, [pc, #1352]	; 11b30 <__assert_fail@plt+0x6ac>
   115e4:	ldr	r2, [pc, #1352]	; 11b34 <__assert_fail@plt+0x6b0>
   115e8:	add	r1, pc, r1
   115ec:	add	r2, pc, r2
   115f0:	bl	14250 <__assert_fail@plt+0x2dcc>
   115f4:	mov	r0, r4
   115f8:	bl	11328 <exit@plt>
   115fc:	cmp	r0, #113	; 0x71
   11600:	bne	1164c <__assert_fail@plt+0x1c8>
   11604:	mov	r2, #1
   11608:	str	r2, [sp, #36]	; 0x24
   1160c:	b	1151c <__assert_fail@plt+0x98>
   11610:	ldr	r3, [pc, #1312]	; 11b38 <__assert_fail@plt+0x6b4>
   11614:	ldr	r3, [sl, r3]
   11618:	ldr	r3, [r3]
   1161c:	rsb	r6, r3, r6
   11620:	cmp	r6, #1
   11624:	bls	11684 <__assert_fail@plt+0x200>
   11628:	ldr	r1, [pc, #1292]	; 11b3c <__assert_fail@plt+0x6b8>
   1162c:	mov	r2, #5
   11630:	mov	r0, #0
   11634:	add	r1, pc, r1
   11638:	bl	111fc <dcgettext@plt>
   1163c:	mov	r2, r0
   11640:	mov	r0, #0
   11644:	mov	r1, r0
   11648:	bl	11298 <error@plt>
   1164c:	mov	r0, #1
   11650:	bl	11d08 <__assert_fail@plt+0x884>
   11654:	mov	r2, #1
   11658:	str	r2, [sp, #20]
   1165c:	mov	fp, r2
   11660:	b	1151c <__assert_fail@plt+0x98>
   11664:	mov	r0, #0
   11668:	bl	11d08 <__assert_fail@plt+0x884>
   1166c:	ldr	r3, [pc, #1192]	; 11b1c <__assert_fail@plt+0x698>
   11670:	mov	fp, #1
   11674:	ldr	r3, [sl, r3]
   11678:	ldr	r3, [r3]
   1167c:	str	r3, [sp, #28]
   11680:	b	1151c <__assert_fail@plt+0x98>
   11684:	cmp	r6, #0
   11688:	ldrne	r5, [r5, r3, lsl #2]
   1168c:	ldreq	r5, [pc, #1196]	; 11b40 <__assert_fail@plt+0x6bc>
   11690:	moveq	fp, #1
   11694:	addeq	r5, pc, r5
   11698:	ldr	r3, [sp, #24]
   1169c:	mov	r0, r5
   116a0:	cmp	r3, #0
   116a4:	beq	11a40 <__assert_fail@plt+0x5bc>
   116a8:	bl	11334 <strlen@plt>
   116ac:	subs	r6, r0, #0
   116b0:	beq	116c4 <__assert_fail@plt+0x240>
   116b4:	add	r3, r5, r6
   116b8:	ldrb	r3, [r3, #-1]
   116bc:	cmp	r3, #88	; 0x58
   116c0:	beq	116f8 <__assert_fail@plt+0x274>
   116c4:	ldr	r1, [pc, #1144]	; 11b44 <__assert_fail@plt+0x6c0>
   116c8:	mov	r2, #5
   116cc:	mov	r0, #0
   116d0:	add	r1, pc, r1
   116d4:	bl	111fc <dcgettext@plt>
   116d8:	mov	r7, r0
   116dc:	mov	r0, r5
   116e0:	bl	13b34 <__assert_fail@plt+0x26b0>
   116e4:	mov	r2, r7
   116e8:	mov	r1, #0
   116ec:	mov	r3, r0
   116f0:	mov	r0, #1
   116f4:	bl	11298 <error@plt>
   116f8:	ldr	r0, [sp, #24]
   116fc:	bl	11334 <strlen@plt>
   11700:	mov	r8, r0
   11704:	add	r0, r6, #1
   11708:	add	r0, r0, r8
   1170c:	bl	14360 <__assert_fail@plt+0x2edc>
   11710:	mov	r1, r5
   11714:	mov	r2, r6
   11718:	add	r5, r0, r6
   1171c:	mov	r7, r0
   11720:	bl	111cc <memcpy@plt>
   11724:	ldr	r1, [sp, #24]
   11728:	add	r2, r8, #1
   1172c:	mov	r0, r5
   11730:	bl	111cc <memcpy@plt>
   11734:	cmp	r8, #0
   11738:	beq	11780 <__assert_fail@plt+0x2fc>
   1173c:	mov	r0, r5
   11740:	bl	12150 <__assert_fail@plt+0xccc>
   11744:	cmp	r5, r0
   11748:	beq	11780 <__assert_fail@plt+0x2fc>
   1174c:	ldr	r1, [pc, #1012]	; 11b48 <__assert_fail@plt+0x6c4>
   11750:	mov	r2, #5
   11754:	mov	r0, #0
   11758:	add	r1, pc, r1
   1175c:	bl	111fc <dcgettext@plt>
   11760:	mov	r6, r0
   11764:	mov	r0, r5
   11768:	bl	13b34 <__assert_fail@plt+0x26b0>
   1176c:	mov	r2, r6
   11770:	mov	r1, #0
   11774:	mov	r3, r0
   11778:	mov	r0, #1
   1177c:	bl	11298 <error@plt>
   11780:	rsb	r5, r7, r5
   11784:	mov	r3, r5
   11788:	b	1179c <__assert_fail@plt+0x318>
   1178c:	sub	r3, r3, #1
   11790:	ldrb	r2, [r7, r3]
   11794:	cmp	r2, #88	; 0x58
   11798:	bne	117a8 <__assert_fail@plt+0x324>
   1179c:	cmp	r3, #0
   117a0:	rsb	r6, r3, r5
   117a4:	bne	1178c <__assert_fail@plt+0x308>
   117a8:	cmp	r6, #2
   117ac:	bls	118b8 <__assert_fail@plt+0x434>
   117b0:	cmp	fp, #0
   117b4:	beq	11834 <__assert_fail@plt+0x3b0>
   117b8:	ldr	r2, [sp, #20]
   117bc:	cmp	r2, #0
   117c0:	bne	11974 <__assert_fail@plt+0x4f0>
   117c4:	ldr	r2, [sp, #28]
   117c8:	cmp	r2, #0
   117cc:	beq	117dc <__assert_fail@plt+0x358>
   117d0:	ldrb	r3, [r2]
   117d4:	cmp	r3, #0
   117d8:	bne	11808 <__assert_fail@plt+0x384>
   117dc:	ldr	r0, [pc, #872]	; 11b4c <__assert_fail@plt+0x6c8>
   117e0:	add	r0, pc, r0
   117e4:	bl	112b0 <getenv@plt>
   117e8:	cmp	r0, #0
   117ec:	str	r0, [sp, #28]
   117f0:	beq	11a98 <__assert_fail@plt+0x614>
   117f4:	ldrb	r3, [r0]
   117f8:	cmp	r3, #0
   117fc:	ldreq	r3, [pc, #844]	; 11b50 <__assert_fail@plt+0x6cc>
   11800:	addeq	r3, pc, r3
   11804:	streq	r3, [sp, #28]
   11808:	ldrb	r3, [r7]
   1180c:	cmp	r3, #47	; 0x2f
   11810:	beq	11a88 <__assert_fail@plt+0x604>
   11814:	mov	r1, r7
   11818:	ldr	r0, [sp, #28]
   1181c:	mov	r2, #0
   11820:	bl	121f4 <__assert_fail@plt+0xd70>
   11824:	mov	r3, r0
   11828:	mov	r0, r7
   1182c:	mov	r7, r3
   11830:	bl	111b4 <free@plt>
   11834:	mov	r0, r7
   11838:	bl	14558 <__assert_fail@plt+0x30d4>
   1183c:	ldr	r3, [sp, #32]
   11840:	cmp	r3, #0
   11844:	mov	r5, r0
   11848:	beq	11884 <__assert_fail@plt+0x400>
   1184c:	mov	r2, #0
   11850:	cmp	r4, r2
   11854:	str	r6, [sp]
   11858:	mov	r1, r8
   1185c:	moveq	r3, #1
   11860:	movne	r3, #2
   11864:	bl	13b40 <__assert_fail@plt+0x26bc>
   11868:	cmp	r0, #0
   1186c:	beq	118f0 <__assert_fail@plt+0x46c>
   11870:	ldr	r2, [sp, #36]	; 0x24
   11874:	cmp	r2, #0
   11878:	beq	11a00 <__assert_fail@plt+0x57c>
   1187c:	mov	r0, #1
   11880:	bl	11328 <exit@plt>
   11884:	cmp	r4, #0
   11888:	beq	11ab8 <__assert_fail@plt+0x634>
   1188c:	str	r6, [sp]
   11890:	mov	r1, r8
   11894:	ldr	r2, [sp, #32]
   11898:	mov	r3, #2
   1189c:	bl	13b40 <__assert_fail@plt+0x26bc>
   118a0:	cmp	r0, #0
   118a4:	blt	11a6c <__assert_fail@plt+0x5e8>
   118a8:	mov	r0, r5
   118ac:	bl	112bc <puts@plt>
   118b0:	mov	r0, #0
   118b4:	b	11880 <__assert_fail@plt+0x3fc>
   118b8:	ldr	r1, [pc, #660]	; 11b54 <__assert_fail@plt+0x6d0>
   118bc:	mov	r2, #5
   118c0:	mov	r0, #0
   118c4:	add	r1, pc, r1
   118c8:	bl	111fc <dcgettext@plt>
   118cc:	mov	r5, r0
   118d0:	mov	r0, r7
   118d4:	bl	13b34 <__assert_fail@plt+0x26b0>
   118d8:	mov	r2, r5
   118dc:	mov	r1, #0
   118e0:	mov	r3, r0
   118e4:	mov	r0, #1
   118e8:	bl	11298 <error@plt>
   118ec:	b	117b0 <__assert_fail@plt+0x32c>
   118f0:	mov	r0, r5
   118f4:	bl	112bc <puts@plt>
   118f8:	cmp	r4, #0
   118fc:	bne	118b0 <__assert_fail@plt+0x42c>
   11900:	ldr	r2, [pc, #592]	; 11b58 <__assert_fail@plt+0x6d4>
   11904:	mov	r4, #1
   11908:	ldr	r3, [pc, #528]	; 11b20 <__assert_fail@plt+0x69c>
   1190c:	add	r2, pc, r2
   11910:	strb	r4, [r2]
   11914:	ldr	r3, [sl, r3]
   11918:	ldr	r0, [r3]
   1191c:	bl	11f90 <__assert_fail@plt+0xb0c>
   11920:	cmp	r0, #0
   11924:	beq	118b0 <__assert_fail@plt+0x42c>
   11928:	bl	11358 <__errno_location@plt>
   1192c:	ldr	r6, [r0]
   11930:	mov	r0, r5
   11934:	bl	11418 <remove@plt>
   11938:	ldr	r2, [sp, #36]	; 0x24
   1193c:	cmp	r2, #0
   11940:	movne	r0, r4
   11944:	bne	11880 <__assert_fail@plt+0x3fc>
   11948:	ldr	r1, [pc, #524]	; 11b5c <__assert_fail@plt+0x6d8>
   1194c:	mov	r0, r2
   11950:	mov	r2, #5
   11954:	add	r1, pc, r1
   11958:	bl	111fc <dcgettext@plt>
   1195c:	mov	r1, r6
   11960:	mov	r2, r0
   11964:	ldr	r0, [sp, #36]	; 0x24
   11968:	bl	11298 <error@plt>
   1196c:	mov	r0, r4
   11970:	b	11880 <__assert_fail@plt+0x3fc>
   11974:	ldr	r0, [pc, #484]	; 11b60 <__assert_fail@plt+0x6dc>
   11978:	add	r0, pc, r0
   1197c:	bl	112b0 <getenv@plt>
   11980:	cmp	r0, #0
   11984:	beq	11998 <__assert_fail@plt+0x514>
   11988:	ldrb	r3, [r0]
   1198c:	cmp	r3, #0
   11990:	strne	r0, [sp, #28]
   11994:	bne	119b8 <__assert_fail@plt+0x534>
   11998:	ldr	r3, [sp, #28]
   1199c:	cmp	r3, #0
   119a0:	beq	11aa8 <__assert_fail@plt+0x624>
   119a4:	ldrb	r3, [r3]
   119a8:	cmp	r3, #0
   119ac:	ldreq	r2, [pc, #432]	; 11b64 <__assert_fail@plt+0x6e0>
   119b0:	addeq	r2, pc, r2
   119b4:	streq	r2, [sp, #28]
   119b8:	mov	r0, r7
   119bc:	bl	12150 <__assert_fail@plt+0xccc>
   119c0:	cmp	r7, r0
   119c4:	beq	11814 <__assert_fail@plt+0x390>
   119c8:	ldr	r1, [pc, #408]	; 11b68 <__assert_fail@plt+0x6e4>
   119cc:	mov	r0, #0
   119d0:	add	r1, pc, r1
   119d4:	mov	r2, #5
   119d8:	bl	111fc <dcgettext@plt>
   119dc:	mov	r5, r0
   119e0:	mov	r0, r7
   119e4:	bl	13b34 <__assert_fail@plt+0x26b0>
   119e8:	mov	r2, r5
   119ec:	mov	r1, #0
   119f0:	mov	r3, r0
   119f4:	mov	r0, #1
   119f8:	bl	11298 <error@plt>
   119fc:	b	11814 <__assert_fail@plt+0x390>
   11a00:	bl	11358 <__errno_location@plt>
   11a04:	ldr	r1, [pc, #352]	; 11b6c <__assert_fail@plt+0x6e8>
   11a08:	add	r1, pc, r1
   11a0c:	ldr	r4, [r0]
   11a10:	mov	r2, #5
   11a14:	ldr	r0, [sp, #36]	; 0x24
   11a18:	bl	111fc <dcgettext@plt>
   11a1c:	mov	r5, r0
   11a20:	mov	r0, r7
   11a24:	bl	13b34 <__assert_fail@plt+0x26b0>
   11a28:	mov	r1, r4
   11a2c:	mov	r2, r5
   11a30:	mov	r3, r0
   11a34:	ldr	r0, [sp, #36]	; 0x24
   11a38:	bl	11298 <error@plt>
   11a3c:	b	1187c <__assert_fail@plt+0x3f8>
   11a40:	bl	14558 <__assert_fail@plt+0x30d4>
   11a44:	mov	r1, #88	; 0x58
   11a48:	mov	r7, r0
   11a4c:	bl	11400 <strrchr@plt>
   11a50:	cmp	r0, #0
   11a54:	addne	r5, r0, #1
   11a58:	beq	11aec <__assert_fail@plt+0x668>
   11a5c:	mov	r0, r5
   11a60:	bl	11334 <strlen@plt>
   11a64:	mov	r8, r0
   11a68:	b	11734 <__assert_fail@plt+0x2b0>
   11a6c:	ldr	r3, [sp, #36]	; 0x24
   11a70:	cmp	r3, #0
   11a74:	bne	1187c <__assert_fail@plt+0x3f8>
   11a78:	bl	11358 <__errno_location@plt>
   11a7c:	ldr	r1, [pc, #236]	; 11b70 <__assert_fail@plt+0x6ec>
   11a80:	add	r1, pc, r1
   11a84:	b	11a0c <__assert_fail@plt+0x588>
   11a88:	ldr	r1, [pc, #228]	; 11b74 <__assert_fail@plt+0x6f0>
   11a8c:	mov	r0, #0
   11a90:	add	r1, pc, r1
   11a94:	b	119d4 <__assert_fail@plt+0x550>
   11a98:	ldr	r2, [pc, #216]	; 11b78 <__assert_fail@plt+0x6f4>
   11a9c:	add	r2, pc, r2
   11aa0:	str	r2, [sp, #28]
   11aa4:	b	11808 <__assert_fail@plt+0x384>
   11aa8:	ldr	r3, [pc, #204]	; 11b7c <__assert_fail@plt+0x6f8>
   11aac:	add	r3, pc, r3
   11ab0:	str	r3, [sp, #28]
   11ab4:	b	119b8 <__assert_fail@plt+0x534>
   11ab8:	mov	r2, r4
   11abc:	str	r6, [sp]
   11ac0:	mov	r1, r8
   11ac4:	mov	r3, r4
   11ac8:	bl	13b40 <__assert_fail@plt+0x26bc>
   11acc:	cmp	r0, #0
   11ad0:	blt	11a6c <__assert_fail@plt+0x5e8>
   11ad4:	bl	1146c <close@plt>
   11ad8:	cmp	r0, #0
   11adc:	bne	11a6c <__assert_fail@plt+0x5e8>
   11ae0:	mov	r0, r5
   11ae4:	bl	112bc <puts@plt>
   11ae8:	b	11900 <__assert_fail@plt+0x47c>
   11aec:	ldr	r1, [sp, #24]
   11af0:	mov	r0, r7
   11af4:	bl	1122c <__rawmemchr@plt>
   11af8:	mov	r5, r0
   11afc:	b	11a5c <__assert_fail@plt+0x5d8>
   11b00:	andeq	r5, r0, ip, lsl #14
   11b04:	andeq	r5, r0, r0, asr #12
   11b08:	andeq	r5, r0, ip, asr #14
   11b0c:	andeq	r5, r0, r8, lsl #14
   11b10:	strdeq	r6, [r1], -r4
   11b14:	andeq	r6, r1, r4, ror #18
   11b18:	andeq	r0, r0, ip, lsr #15
   11b1c:	andeq	r0, r0, r4, asr r1
   11b20:	andeq	r0, r0, ip, lsr r1
   11b24:	andeq	r0, r0, ip, lsr #2
   11b28:	andeq	r5, r0, r4, lsr r6
   11b2c:	andeq	r5, r0, r8, lsr r6
   11b30:	andeq	r5, r0, ip, lsl #12
   11b34:	andeq	r5, r0, r4, lsl r5
   11b38:	andeq	r0, r0, r8, lsr #2
   11b3c:	andeq	r5, r0, ip, ror #11
   11b40:	andeq	r5, r0, r4, lsr r5
   11b44:	andeq	r5, r0, r4, ror #10
   11b48:	andeq	r5, r0, r8, lsl #10
   11b4c:	andeq	r5, r0, ip, asr #9
   11b50:	ldrdeq	r5, [r0], -r8
   11b54:	andeq	r5, r0, ip, asr #7
   11b58:	muleq	r1, r1, r8
   11b5c:	andeq	r5, r0, r4, lsr #8
   11b60:	andeq	r5, r0, r4, lsr r3
   11b64:	andeq	r5, r0, r8, lsr #4
   11b68:	andeq	r5, r0, r4, ror #5
   11b6c:	andeq	r5, r0, ip, lsl r3
   11b70:	ldrdeq	r5, [r0], -r0
   11b74:	andeq	r5, r0, r8, asr r2
   11b78:	andeq	r5, r0, ip, lsr r1
   11b7c:	andeq	r5, r0, ip, lsr #2
   11b80:	mov	fp, #0
   11b84:	mov	lr, #0
   11b88:	pop	{r1}		; (ldr r1, [sp], #4)
   11b8c:	mov	r2, sp
   11b90:	push	{r2}		; (str r2, [sp, #-4]!)
   11b94:	push	{r0}		; (str r0, [sp, #-4]!)
   11b98:	ldr	ip, [pc, #16]	; 11bb0 <__assert_fail@plt+0x72c>
   11b9c:	push	{ip}		; (str ip, [sp, #-4]!)
   11ba0:	ldr	r0, [pc, #12]	; 11bb4 <__assert_fail@plt+0x730>
   11ba4:	ldr	r3, [pc, #12]	; 11bb8 <__assert_fail@plt+0x734>
   11ba8:	bl	112d4 <__libc_start_main@plt>
   11bac:	bl	11460 <abort@plt>
   11bb0:	andeq	r6, r1, r4, lsr #10
   11bb4:	muleq	r1, r0, r4
   11bb8:	andeq	r6, r1, r0, asr #9
   11bbc:	ldr	r3, [pc, #20]	; 11bd8 <__assert_fail@plt+0x754>
   11bc0:	ldr	r2, [pc, #20]	; 11bdc <__assert_fail@plt+0x758>
   11bc4:	add	r3, pc, r3
   11bc8:	ldr	r2, [r3, r2]
   11bcc:	cmp	r2, #0
   11bd0:	bxeq	lr
   11bd4:	b	112ec <__gmon_start__@plt>
   11bd8:	andeq	r6, r1, r4, lsr r4
   11bdc:	andeq	r0, r0, r4, lsr r1
   11be0:	push	{r3, lr}
   11be4:	movw	r0, #33188	; 0x81a4
   11be8:	ldr	r3, [pc, #36]	; 11c14 <__assert_fail@plt+0x790>
   11bec:	movt	r0, #2
   11bf0:	rsb	r3, r0, r3
   11bf4:	cmp	r3, #6
   11bf8:	popls	{r3, pc}
   11bfc:	movw	r3, #0
   11c00:	movt	r3, #0
   11c04:	cmp	r3, #0
   11c08:	popeq	{r3, pc}
   11c0c:	blx	r3
   11c10:	pop	{r3, pc}
   11c14:	andeq	r8, r2, r7, lsr #3
   11c18:	push	{r3, lr}
   11c1c:	movw	r0, #33188	; 0x81a4
   11c20:	movw	r3, #33188	; 0x81a4
   11c24:	movt	r0, #2
   11c28:	movt	r3, #2
   11c2c:	rsb	r3, r0, r3
   11c30:	asr	r3, r3, #2
   11c34:	add	r3, r3, r3, lsr #31
   11c38:	asrs	r1, r3, #1
   11c3c:	popeq	{r3, pc}
   11c40:	movw	r2, #0
   11c44:	movt	r2, #0
   11c48:	cmp	r2, #0
   11c4c:	popeq	{r3, pc}
   11c50:	blx	r2
   11c54:	pop	{r3, pc}
   11c58:	push	{r4, lr}
   11c5c:	movw	r4, #33188	; 0x81a4
   11c60:	movt	r4, #2
   11c64:	ldrb	r3, [r4]
   11c68:	cmp	r3, #0
   11c6c:	popne	{r4, pc}
   11c70:	bl	11be0 <__assert_fail@plt+0x75c>
   11c74:	mov	r3, #1
   11c78:	strb	r3, [r4]
   11c7c:	pop	{r4, pc}
   11c80:	movw	r0, #32352	; 0x7e60
   11c84:	movt	r0, #2
   11c88:	push	{r3, lr}
   11c8c:	ldr	r3, [r0]
   11c90:	cmp	r3, #0
   11c94:	beq	11cac <__assert_fail@plt+0x828>
   11c98:	movw	r3, #0
   11c9c:	movt	r3, #0
   11ca0:	cmp	r3, #0
   11ca4:	beq	11cac <__assert_fail@plt+0x828>
   11ca8:	blx	r3
   11cac:	pop	{r3, lr}
   11cb0:	b	11c18 <__assert_fail@plt+0x794>
   11cb4:	ldr	r2, [pc, #64]	; 11cfc <__assert_fail@plt+0x878>
   11cb8:	push	{r3, lr}
   11cbc:	add	r2, pc, r2
   11cc0:	ldr	r3, [pc, #56]	; 11d00 <__assert_fail@plt+0x87c>
   11cc4:	ldrb	r2, [r2]
   11cc8:	add	r3, pc, r3
   11ccc:	cmp	r2, #0
   11cd0:	beq	11cf4 <__assert_fail@plt+0x870>
   11cd4:	ldr	r2, [pc, #40]	; 11d04 <__assert_fail@plt+0x880>
   11cd8:	ldr	r3, [r3, r2]
   11cdc:	ldr	r0, [r3]
   11ce0:	bl	11f90 <__assert_fail@plt+0xb0c>
   11ce4:	cmp	r0, #0
   11ce8:	popeq	{r3, pc}
   11cec:	mov	r0, #1
   11cf0:	bl	111c0 <_exit@plt>
   11cf4:	pop	{r3, lr}
   11cf8:	b	12038 <__assert_fail@plt+0xbb4>
   11cfc:	andeq	r6, r1, r1, ror #9
   11d00:	andeq	r6, r1, r0, lsr r3
   11d04:	andeq	r0, r0, r0, lsr r1
   11d08:	push	{r4, r5, r6, lr}
   11d0c:	subs	r4, r0, #0
   11d10:	ldr	r5, [pc, #552]	; 11f40 <__assert_fail@plt+0xabc>
   11d14:	add	r5, pc, r5
   11d18:	beq	11d60 <__assert_fail@plt+0x8dc>
   11d1c:	ldr	r3, [pc, #544]	; 11f44 <__assert_fail@plt+0xac0>
   11d20:	mov	r2, #5
   11d24:	ldr	r1, [pc, #540]	; 11f48 <__assert_fail@plt+0xac4>
   11d28:	mov	r0, #0
   11d2c:	ldr	r3, [r5, r3]
   11d30:	add	r1, pc, r1
   11d34:	ldr	r6, [r3]
   11d38:	bl	111fc <dcgettext@plt>
   11d3c:	ldr	r3, [pc, #520]	; 11f4c <__assert_fail@plt+0xac8>
   11d40:	mov	r1, #1
   11d44:	ldr	r3, [r5, r3]
   11d48:	ldr	r3, [r3]
   11d4c:	mov	r2, r0
   11d50:	mov	r0, r6
   11d54:	bl	113c4 <__fprintf_chk@plt>
   11d58:	mov	r0, r4
   11d5c:	bl	11328 <exit@plt>
   11d60:	ldr	r1, [pc, #488]	; 11f50 <__assert_fail@plt+0xacc>
   11d64:	mov	r2, #5
   11d68:	add	r1, pc, r1
   11d6c:	bl	111fc <dcgettext@plt>
   11d70:	ldr	r3, [pc, #468]	; 11f4c <__assert_fail@plt+0xac8>
   11d74:	ldr	r6, [r5, r3]
   11d78:	ldr	r2, [r6]
   11d7c:	mov	r1, r0
   11d80:	mov	r0, #1
   11d84:	bl	113ac <__printf_chk@plt>
   11d88:	ldr	r1, [pc, #452]	; 11f54 <__assert_fail@plt+0xad0>
   11d8c:	mov	r2, #5
   11d90:	mov	r0, r4
   11d94:	add	r1, pc, r1
   11d98:	bl	111fc <dcgettext@plt>
   11d9c:	ldr	r3, [pc, #436]	; 11f58 <__assert_fail@plt+0xad4>
   11da0:	ldr	r5, [r5, r3]
   11da4:	ldr	r1, [r5]
   11da8:	bl	1116c <fputs_unlocked@plt>
   11dac:	ldr	r1, [pc, #424]	; 11f5c <__assert_fail@plt+0xad8>
   11db0:	mov	r2, #5
   11db4:	mov	r0, r4
   11db8:	add	r1, pc, r1
   11dbc:	bl	111fc <dcgettext@plt>
   11dc0:	ldr	r1, [r5]
   11dc4:	bl	1116c <fputs_unlocked@plt>
   11dc8:	ldr	r1, [r5]
   11dcc:	mov	r0, #10
   11dd0:	bl	111f0 <fputc_unlocked@plt>
   11dd4:	ldr	r1, [pc, #388]	; 11f60 <__assert_fail@plt+0xadc>
   11dd8:	mov	r2, #5
   11ddc:	mov	r0, r4
   11de0:	add	r1, pc, r1
   11de4:	bl	111fc <dcgettext@plt>
   11de8:	ldr	r1, [r5]
   11dec:	bl	1116c <fputs_unlocked@plt>
   11df0:	ldr	r1, [pc, #364]	; 11f64 <__assert_fail@plt+0xae0>
   11df4:	mov	r2, #5
   11df8:	mov	r0, r4
   11dfc:	add	r1, pc, r1
   11e00:	bl	111fc <dcgettext@plt>
   11e04:	ldr	r1, [r5]
   11e08:	bl	1116c <fputs_unlocked@plt>
   11e0c:	ldr	r1, [pc, #340]	; 11f68 <__assert_fail@plt+0xae4>
   11e10:	mov	r2, #5
   11e14:	mov	r0, r4
   11e18:	add	r1, pc, r1
   11e1c:	bl	111fc <dcgettext@plt>
   11e20:	ldr	r1, [r5]
   11e24:	bl	1116c <fputs_unlocked@plt>
   11e28:	ldr	r1, [pc, #316]	; 11f6c <__assert_fail@plt+0xae8>
   11e2c:	mov	r2, #5
   11e30:	mov	r0, r4
   11e34:	add	r1, pc, r1
   11e38:	bl	111fc <dcgettext@plt>
   11e3c:	ldr	r1, [r5]
   11e40:	bl	1116c <fputs_unlocked@plt>
   11e44:	ldr	r1, [pc, #292]	; 11f70 <__assert_fail@plt+0xaec>
   11e48:	mov	r2, #5
   11e4c:	mov	r0, r4
   11e50:	add	r1, pc, r1
   11e54:	bl	111fc <dcgettext@plt>
   11e58:	ldr	r1, [r5]
   11e5c:	bl	1116c <fputs_unlocked@plt>
   11e60:	ldr	r1, [pc, #268]	; 11f74 <__assert_fail@plt+0xaf0>
   11e64:	mov	r2, #5
   11e68:	mov	r0, r4
   11e6c:	add	r1, pc, r1
   11e70:	bl	111fc <dcgettext@plt>
   11e74:	ldr	r1, [r5]
   11e78:	bl	1116c <fputs_unlocked@plt>
   11e7c:	ldr	r1, [pc, #244]	; 11f78 <__assert_fail@plt+0xaf4>
   11e80:	mov	r2, #5
   11e84:	mov	r0, r4
   11e88:	add	r1, pc, r1
   11e8c:	bl	111fc <dcgettext@plt>
   11e90:	ldr	r2, [pc, #228]	; 11f7c <__assert_fail@plt+0xaf8>
   11e94:	ldr	r3, [pc, #228]	; 11f80 <__assert_fail@plt+0xafc>
   11e98:	add	r2, pc, r2
   11e9c:	add	r3, pc, r3
   11ea0:	mov	r1, r0
   11ea4:	mov	r0, #1
   11ea8:	bl	113ac <__printf_chk@plt>
   11eac:	mov	r0, #5
   11eb0:	mov	r1, r4
   11eb4:	bl	113f4 <setlocale@plt>
   11eb8:	cmp	r0, #0
   11ebc:	beq	11ed8 <__assert_fail@plt+0xa54>
   11ec0:	ldr	r1, [pc, #188]	; 11f84 <__assert_fail@plt+0xb00>
   11ec4:	mov	r2, #3
   11ec8:	add	r1, pc, r1
   11ecc:	bl	11454 <strncmp@plt>
   11ed0:	cmp	r0, #0
   11ed4:	bne	11f0c <__assert_fail@plt+0xa88>
   11ed8:	ldr	r1, [pc, #168]	; 11f88 <__assert_fail@plt+0xb04>
   11edc:	mov	r2, #5
   11ee0:	mov	r0, #0
   11ee4:	add	r1, pc, r1
   11ee8:	bl	111fc <dcgettext@plt>
   11eec:	mov	r5, r0
   11ef0:	ldr	r0, [r6]
   11ef4:	bl	12150 <__assert_fail@plt+0xccc>
   11ef8:	mov	r1, r5
   11efc:	mov	r2, r0
   11f00:	mov	r0, #1
   11f04:	bl	113ac <__printf_chk@plt>
   11f08:	b	11d58 <__assert_fail@plt+0x8d4>
   11f0c:	ldr	r1, [pc, #120]	; 11f8c <__assert_fail@plt+0xb08>
   11f10:	mov	r2, #5
   11f14:	mov	r0, r4
   11f18:	add	r1, pc, r1
   11f1c:	bl	111fc <dcgettext@plt>
   11f20:	mov	r5, r0
   11f24:	ldr	r0, [r6]
   11f28:	bl	12150 <__assert_fail@plt+0xccc>
   11f2c:	mov	r1, r5
   11f30:	mov	r2, r0
   11f34:	mov	r0, #1
   11f38:	bl	113ac <__printf_chk@plt>
   11f3c:	b	11ed8 <__assert_fail@plt+0xa54>
   11f40:	andeq	r6, r1, r4, ror #5
   11f44:	andeq	r0, r0, r0, lsr r1
   11f48:	andeq	r4, r0, ip, lsr #16
   11f4c:	andeq	r0, r0, r8, asr #2
   11f50:	andeq	r4, r0, ip, lsl r8
   11f54:	andeq	r4, r0, r4, lsl r8
   11f58:	andeq	r0, r0, ip, lsr r1
   11f5c:	andeq	r4, r0, r4, asr #17
   11f60:	andeq	r4, r0, r8, ror #17
   11f64:	muleq	r0, r8, r9
   11f68:	andeq	r4, r0, r8, lsl sl
   11f6c:	andeq	r4, r0, r8, ror #22
   11f70:	andeq	r4, r0, r0, lsr ip
   11f74:	andeq	r4, r0, r4, asr #24
   11f78:	andeq	r4, r0, r0, ror #24
   11f7c:	andeq	r4, r0, r8, ror #24
   11f80:	andeq	r4, r0, r4, ror ip
   11f84:	andeq	r4, r0, r0, ror ip
   11f88:	andeq	r4, r0, r0, lsr #25
   11f8c:	andeq	r4, r0, r4, lsr #24
   11f90:	push	{r4, r5, r6, lr}
   11f94:	mov	r4, r0
   11f98:	bl	11280 <__fpending@plt>
   11f9c:	mov	r6, r0
   11fa0:	mov	r0, r4
   11fa4:	ldr	r4, [r4]
   11fa8:	bl	145cc <__assert_fail@plt+0x3148>
   11fac:	and	r4, r4, #32
   11fb0:	adds	r5, r0, #0
   11fb4:	movne	r5, #1
   11fb8:	cmp	r4, #0
   11fbc:	bne	11fdc <__assert_fail@plt+0xb58>
   11fc0:	cmp	r5, #0
   11fc4:	beq	11fd4 <__assert_fail@plt+0xb50>
   11fc8:	cmp	r6, #0
   11fcc:	beq	11ff8 <__assert_fail@plt+0xb74>
   11fd0:	mvn	r4, #0
   11fd4:	mov	r0, r4
   11fd8:	pop	{r4, r5, r6, pc}
   11fdc:	cmp	r5, #0
   11fe0:	bne	11fd0 <__assert_fail@plt+0xb4c>
   11fe4:	bl	11358 <__errno_location@plt>
   11fe8:	mvn	r4, #0
   11fec:	str	r5, [r0]
   11ff0:	mov	r0, r4
   11ff4:	pop	{r4, r5, r6, pc}
   11ff8:	bl	11358 <__errno_location@plt>
   11ffc:	ldr	r4, [r0]
   12000:	subs	r4, r4, #9
   12004:	mvnne	r4, #0
   12008:	mov	r0, r4
   1200c:	pop	{r4, r5, r6, pc}
   12010:	ldr	r3, [pc, #8]	; 12020 <__assert_fail@plt+0xb9c>
   12014:	add	r3, pc, r3
   12018:	str	r0, [r3]
   1201c:	bx	lr
   12020:	andeq	r6, r1, ip, lsl #3
   12024:	ldr	r3, [pc, #8]	; 12034 <__assert_fail@plt+0xbb0>
   12028:	add	r3, pc, r3
   1202c:	strb	r0, [r3, #4]
   12030:	bx	lr
   12034:	andeq	r6, r1, r8, ror r1
   12038:	push	{r4, r5, r6, r7, lr}
   1203c:	sub	sp, sp, #12
   12040:	ldr	r4, [pc, #228]	; 1212c <__assert_fail@plt+0xca8>
   12044:	ldr	r3, [pc, #228]	; 12130 <__assert_fail@plt+0xcac>
   12048:	add	r4, pc, r4
   1204c:	ldr	r3, [r4, r3]
   12050:	ldr	r0, [r3]
   12054:	bl	11f90 <__assert_fail@plt+0xb0c>
   12058:	cmp	r0, #0
   1205c:	beq	12084 <__assert_fail@plt+0xc00>
   12060:	ldr	r3, [pc, #204]	; 12134 <__assert_fail@plt+0xcb0>
   12064:	add	r3, pc, r3
   12068:	ldrb	r3, [r3, #4]
   1206c:	cmp	r3, #0
   12070:	beq	120a4 <__assert_fail@plt+0xc20>
   12074:	bl	11358 <__errno_location@plt>
   12078:	ldr	r3, [r0]
   1207c:	cmp	r3, #32
   12080:	bne	120a4 <__assert_fail@plt+0xc20>
   12084:	ldr	r3, [pc, #172]	; 12138 <__assert_fail@plt+0xcb4>
   12088:	ldr	r3, [r4, r3]
   1208c:	ldr	r0, [r3]
   12090:	bl	11f90 <__assert_fail@plt+0xb0c>
   12094:	cmp	r0, #0
   12098:	bne	120f8 <__assert_fail@plt+0xc74>
   1209c:	add	sp, sp, #12
   120a0:	pop	{r4, r5, r6, r7, pc}
   120a4:	ldr	r1, [pc, #144]	; 1213c <__assert_fail@plt+0xcb8>
   120a8:	mov	r0, #0
   120ac:	mov	r2, #5
   120b0:	add	r1, pc, r1
   120b4:	bl	111fc <dcgettext@plt>
   120b8:	ldr	r3, [pc, #128]	; 12140 <__assert_fail@plt+0xcbc>
   120bc:	ldr	r5, [pc, r3]
   120c0:	cmp	r5, #0
   120c4:	mov	r6, r0
   120c8:	beq	12108 <__assert_fail@plt+0xc84>
   120cc:	bl	11358 <__errno_location@plt>
   120d0:	ldr	r7, [r0]
   120d4:	mov	r0, r5
   120d8:	bl	139e0 <__assert_fail@plt+0x255c>
   120dc:	ldr	r2, [pc, #96]	; 12144 <__assert_fail@plt+0xcc0>
   120e0:	str	r6, [sp]
   120e4:	mov	r1, r7
   120e8:	add	r2, pc, r2
   120ec:	mov	r3, r0
   120f0:	mov	r0, #0
   120f4:	bl	11298 <error@plt>
   120f8:	ldr	r3, [pc, #72]	; 12148 <__assert_fail@plt+0xcc4>
   120fc:	ldr	r3, [r4, r3]
   12100:	ldr	r0, [r3]
   12104:	bl	111c0 <_exit@plt>
   12108:	bl	11358 <__errno_location@plt>
   1210c:	ldr	r2, [pc, #56]	; 1214c <__assert_fail@plt+0xcc8>
   12110:	add	r2, pc, r2
   12114:	mov	r3, r0
   12118:	mov	r0, r5
   1211c:	ldr	r1, [r3]
   12120:	mov	r3, r6
   12124:	bl	11298 <error@plt>
   12128:	b	120f8 <__assert_fail@plt+0xc74>
   1212c:			; <UNDEFINED> instruction: 0x00015fb0
   12130:	andeq	r0, r0, ip, lsr r1
   12134:	andeq	r6, r1, ip, lsr r1
   12138:	andeq	r0, r0, r0, lsr r1
   1213c:	andeq	r4, r0, r8, asr #25
   12140:	andeq	r6, r1, r4, ror #1
   12144:	andeq	r4, r0, r0, ror #25
   12148:	andeq	r0, r0, r0, asr #2
   1214c:			; <UNDEFINED> instruction: 0x00004cbc
   12150:	ldrb	r3, [r0]
   12154:	cmp	r3, #47	; 0x2f
   12158:	bne	12174 <__assert_fail@plt+0xcf0>
   1215c:	add	r2, r0, #1
   12160:	mov	r0, r2
   12164:	add	r2, r2, #1
   12168:	ldrb	r3, [r0]
   1216c:	cmp	r3, #47	; 0x2f
   12170:	beq	12160 <__assert_fail@plt+0xcdc>
   12174:	cmp	r3, #0
   12178:	bxeq	lr
   1217c:	mov	r2, r0
   12180:	mov	r1, #0
   12184:	cmp	r3, #47	; 0x2f
   12188:	moveq	r1, #1
   1218c:	beq	1219c <__assert_fail@plt+0xd18>
   12190:	cmp	r1, #0
   12194:	movne	r0, r2
   12198:	movne	r1, #0
   1219c:	ldrb	r3, [r2, #1]!
   121a0:	cmp	r3, #0
   121a4:	bne	12184 <__assert_fail@plt+0xd00>
   121a8:	bx	lr
   121ac:	push	{r4, lr}
   121b0:	mov	r4, r0
   121b4:	bl	11334 <strlen@plt>
   121b8:	cmp	r0, #1
   121bc:	popls	{r4, pc}
   121c0:	sub	r3, r0, #1
   121c4:	ldrb	r2, [r4, r3]
   121c8:	cmp	r2, #47	; 0x2f
   121cc:	popne	{r4, pc}
   121d0:	mov	r0, r3
   121d4:	cmp	r0, #1
   121d8:	sub	r3, r3, #1
   121dc:	beq	121f0 <__assert_fail@plt+0xd6c>
   121e0:	ldrb	r2, [r4, r3]
   121e4:	cmp	r2, #47	; 0x2f
   121e8:	popne	{r4, pc}
   121ec:	b	121d0 <__assert_fail@plt+0xd4c>
   121f0:	pop	{r4, pc}
   121f4:	push	{r3, lr}
   121f8:	bl	12208 <__assert_fail@plt+0xd84>
   121fc:	cmp	r0, #0
   12200:	popne	{r3, pc}
   12204:	bl	14574 <__assert_fail@plt+0x30f0>
   12208:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1220c:	mov	r4, r1
   12210:	mov	r8, r2
   12214:	mov	fp, r0
   12218:	bl	12150 <__assert_fail@plt+0xccc>
   1221c:	mov	sl, r0
   12220:	bl	121ac <__assert_fail@plt+0xd28>
   12224:	rsb	r7, fp, sl
   12228:	cmp	r0, #0
   1222c:	add	r7, r7, r0
   12230:	moveq	sl, r0
   12234:	beq	12248 <__assert_fail@plt+0xdc4>
   12238:	add	sl, sl, r0
   1223c:	ldrb	sl, [sl, #-1]
   12240:	subs	sl, sl, #47	; 0x2f
   12244:	movne	sl, #1
   12248:	ldrb	r3, [r4]
   1224c:	cmp	r3, #47	; 0x2f
   12250:	movne	r5, r4
   12254:	beq	122c8 <__assert_fail@plt+0xe44>
   12258:	mov	r0, r5
   1225c:	bl	11334 <strlen@plt>
   12260:	mov	r6, r0
   12264:	add	r0, r7, #1
   12268:	add	r0, r0, sl
   1226c:	add	r0, r0, r6
   12270:	bl	112c8 <malloc@plt>
   12274:	subs	r9, r0, #0
   12278:	beq	122c0 <__assert_fail@plt+0xe3c>
   1227c:	mov	r2, r7
   12280:	mov	r1, fp
   12284:	bl	112f8 <mempcpy@plt>
   12288:	cmp	r8, #0
   1228c:	mov	r2, #47	; 0x2f
   12290:	strb	r2, [r0], sl
   12294:	beq	122ac <__assert_fail@plt+0xe28>
   12298:	ldrb	r2, [r4]
   1229c:	cmp	r2, #47	; 0x2f
   122a0:	movne	r2, r0
   122a4:	subeq	r2, r0, #1
   122a8:	str	r2, [r8]
   122ac:	mov	r1, r5
   122b0:	mov	r2, r6
   122b4:	bl	112f8 <mempcpy@plt>
   122b8:	mov	r3, #0
   122bc:	strb	r3, [r0]
   122c0:	mov	r0, r9
   122c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c8:	add	r3, r4, #1
   122cc:	mov	r5, r3
   122d0:	add	r3, r3, #1
   122d4:	ldrb	r2, [r5]
   122d8:	cmp	r2, #47	; 0x2f
   122dc:	bne	12258 <__assert_fail@plt+0xdd4>
   122e0:	b	122cc <__assert_fail@plt+0xe48>
   122e4:	push	{r3, r4, r5, r6, r7, lr}
   122e8:	subs	r4, r0, #0
   122ec:	ldr	r5, [pc, #172]	; 123a0 <__assert_fail@plt+0xf1c>
   122f0:	add	r5, pc, r5
   122f4:	beq	1237c <__assert_fail@plt+0xef8>
   122f8:	mov	r1, #47	; 0x2f
   122fc:	bl	11400 <strrchr@plt>
   12300:	subs	r6, r0, #0
   12304:	beq	12360 <__assert_fail@plt+0xedc>
   12308:	add	r7, r6, #1
   1230c:	rsb	r3, r4, r7
   12310:	cmp	r3, #6
   12314:	ble	12360 <__assert_fail@plt+0xedc>
   12318:	ldr	r1, [pc, #132]	; 123a4 <__assert_fail@plt+0xf20>
   1231c:	sub	r0, r6, #6
   12320:	mov	r2, #7
   12324:	add	r1, pc, r1
   12328:	bl	11454 <strncmp@plt>
   1232c:	cmp	r0, #0
   12330:	bne	12360 <__assert_fail@plt+0xedc>
   12334:	ldr	r1, [pc, #108]	; 123a8 <__assert_fail@plt+0xf24>
   12338:	mov	r0, r7
   1233c:	mov	r2, #3
   12340:	add	r1, pc, r1
   12344:	bl	11454 <strncmp@plt>
   12348:	cmp	r0, #0
   1234c:	movne	r4, r7
   12350:	ldreq	r3, [pc, #84]	; 123ac <__assert_fail@plt+0xf28>
   12354:	addeq	r4, r6, #4
   12358:	ldreq	r3, [r5, r3]
   1235c:	streq	r4, [r3]
   12360:	ldr	r2, [pc, #72]	; 123b0 <__assert_fail@plt+0xf2c>
   12364:	ldr	r3, [pc, #72]	; 123b4 <__assert_fail@plt+0xf30>
   12368:	ldr	r2, [r5, r2]
   1236c:	str	r4, [r2]
   12370:	ldr	r3, [r5, r3]
   12374:	str	r4, [r3]
   12378:	pop	{r3, r4, r5, r6, r7, pc}
   1237c:	ldr	r3, [pc, #52]	; 123b8 <__assert_fail@plt+0xf34>
   12380:	mov	r1, #1
   12384:	ldr	r0, [pc, #48]	; 123bc <__assert_fail@plt+0xf38>
   12388:	mov	r2, #55	; 0x37
   1238c:	ldr	r3, [r5, r3]
   12390:	add	r0, pc, r0
   12394:	ldr	r3, [r3]
   12398:	bl	11244 <fwrite@plt>
   1239c:	bl	11460 <abort@plt>
   123a0:	andeq	r5, r1, r8, lsl #26
   123a4:	andeq	r4, r0, r4, ror #21
   123a8:	ldrdeq	r4, [r0], -r0
   123ac:	andeq	r0, r0, r0, asr r1
   123b0:	andeq	r0, r0, r8, asr #2
   123b4:	andeq	r0, r0, r4, asr #2
   123b8:	andeq	r0, r0, r0, lsr r1
   123bc:	andeq	r4, r0, r0, asr #20
   123c0:	push	{r3, lr}
   123c4:	mov	r3, r0
   123c8:	mov	r2, #0
   123cc:	cmp	r1, #8
   123d0:	str	r2, [r3], #4
   123d4:	add	r3, r3, #4
   123d8:	str	r2, [r0, #4]
   123dc:	str	r2, [r3], #4
   123e0:	str	r2, [r3], #4
   123e4:	str	r2, [r3], #4
   123e8:	str	r2, [r3], #4
   123ec:	str	r2, [r3], #4
   123f0:	str	r2, [r3], #4
   123f4:	str	r2, [r3], #4
   123f8:	str	r2, [r3], #4
   123fc:	str	r2, [r3], #4
   12400:	str	r2, [r3]
   12404:	beq	12410 <__assert_fail@plt+0xf8c>
   12408:	str	r1, [r0]
   1240c:	pop	{r3, pc}
   12410:	bl	11460 <abort@plt>
   12414:	push	{r4, r5, r6, lr}
   12418:	mov	r4, r0
   1241c:	mov	r6, r1
   12420:	mov	r0, #0
   12424:	mov	r1, r4
   12428:	mov	r2, #5
   1242c:	bl	111fc <dcgettext@plt>
   12430:	cmp	r0, r4
   12434:	mov	r5, r0
   12438:	beq	12440 <__assert_fail@plt+0xfbc>
   1243c:	pop	{r4, r5, r6, pc}
   12440:	bl	14774 <__assert_fail@plt+0x32f0>
   12444:	ldrb	r3, [r0]
   12448:	bic	r3, r3, #32
   1244c:	cmp	r3, #85	; 0x55
   12450:	bne	124c4 <__assert_fail@plt+0x1040>
   12454:	ldrb	r3, [r0, #1]
   12458:	bic	r3, r3, #32
   1245c:	cmp	r3, #84	; 0x54
   12460:	bne	124b0 <__assert_fail@plt+0x102c>
   12464:	ldrb	r3, [r0, #2]
   12468:	bic	r3, r3, #32
   1246c:	cmp	r3, #70	; 0x46
   12470:	bne	124b0 <__assert_fail@plt+0x102c>
   12474:	ldrb	r3, [r0, #3]
   12478:	cmp	r3, #45	; 0x2d
   1247c:	bne	124b0 <__assert_fail@plt+0x102c>
   12480:	ldrb	r3, [r0, #4]
   12484:	cmp	r3, #56	; 0x38
   12488:	bne	124b0 <__assert_fail@plt+0x102c>
   1248c:	ldrb	r3, [r0, #5]
   12490:	cmp	r3, #0
   12494:	bne	124b0 <__assert_fail@plt+0x102c>
   12498:	ldrb	r3, [r5]
   1249c:	cmp	r3, #96	; 0x60
   124a0:	beq	1253c <__assert_fail@plt+0x10b8>
   124a4:	ldr	r0, [pc, #180]	; 12560 <__assert_fail@plt+0x10dc>
   124a8:	add	r0, pc, r0
   124ac:	pop	{r4, r5, r6, pc}
   124b0:	cmp	r6, #7
   124b4:	beq	12548 <__assert_fail@plt+0x10c4>
   124b8:	ldr	r0, [pc, #164]	; 12564 <__assert_fail@plt+0x10e0>
   124bc:	add	r0, pc, r0
   124c0:	pop	{r4, r5, r6, pc}
   124c4:	cmp	r3, #71	; 0x47
   124c8:	bne	124b0 <__assert_fail@plt+0x102c>
   124cc:	ldrb	r3, [r0, #1]
   124d0:	bic	r3, r3, #32
   124d4:	cmp	r3, #66	; 0x42
   124d8:	bne	124b0 <__assert_fail@plt+0x102c>
   124dc:	ldrb	r3, [r0, #2]
   124e0:	cmp	r3, #49	; 0x31
   124e4:	bne	124b0 <__assert_fail@plt+0x102c>
   124e8:	ldrb	r3, [r0, #3]
   124ec:	cmp	r3, #56	; 0x38
   124f0:	bne	124b0 <__assert_fail@plt+0x102c>
   124f4:	ldrb	r3, [r0, #4]
   124f8:	cmp	r3, #48	; 0x30
   124fc:	bne	124b0 <__assert_fail@plt+0x102c>
   12500:	ldrb	r3, [r0, #5]
   12504:	cmp	r3, #51	; 0x33
   12508:	bne	124b0 <__assert_fail@plt+0x102c>
   1250c:	ldrb	r3, [r0, #6]
   12510:	cmp	r3, #48	; 0x30
   12514:	bne	124b0 <__assert_fail@plt+0x102c>
   12518:	ldrb	r3, [r0, #7]
   1251c:	cmp	r3, #0
   12520:	bne	124b0 <__assert_fail@plt+0x102c>
   12524:	ldrb	r3, [r5]
   12528:	cmp	r3, #96	; 0x60
   1252c:	beq	12554 <__assert_fail@plt+0x10d0>
   12530:	ldr	r0, [pc, #48]	; 12568 <__assert_fail@plt+0x10e4>
   12534:	add	r0, pc, r0
   12538:	pop	{r4, r5, r6, pc}
   1253c:	ldr	r0, [pc, #40]	; 1256c <__assert_fail@plt+0x10e8>
   12540:	add	r0, pc, r0
   12544:	pop	{r4, r5, r6, pc}
   12548:	ldr	r0, [pc, #32]	; 12570 <__assert_fail@plt+0x10ec>
   1254c:	add	r0, pc, r0
   12550:	pop	{r4, r5, r6, pc}
   12554:	ldr	r0, [pc, #24]	; 12574 <__assert_fail@plt+0x10f0>
   12558:	add	r0, pc, r0
   1255c:	pop	{r4, r5, r6, pc}
   12560:	andeq	r4, r0, ip, lsl #19
   12564:	andeq	r4, r0, r0, lsl #19
   12568:	andeq	r4, r0, r4, lsl #18
   1256c:	andeq	r4, r0, r8, lsl #18
   12570:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   12574:	andeq	r4, r0, ip, ror #17
   12578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1257c:	sub	sp, sp, #124	; 0x7c
   12580:	ldr	ip, [pc, #3304]	; 13270 <__assert_fail@plt+0x1dec>
   12584:	mov	sl, r1
   12588:	str	r0, [sp, #40]	; 0x28
   1258c:	mov	r8, r3
   12590:	ldr	r0, [pc, #3292]	; 13274 <__assert_fail@plt+0x1df0>
   12594:	add	ip, pc, ip
   12598:	str	r2, [sp, #32]
   1259c:	ldr	r1, [sp, #164]	; 0xa4
   125a0:	mov	r3, ip
   125a4:	ldr	r0, [ip, r0]
   125a8:	ldr	r2, [sp, #172]	; 0xac
   125ac:	ubfx	r1, r1, #1, #1
   125b0:	str	r1, [sp, #36]	; 0x24
   125b4:	str	r0, [sp, #56]	; 0x38
   125b8:	ldr	r0, [sp, #168]	; 0xa8
   125bc:	ldr	r1, [sp, #176]	; 0xb0
   125c0:	str	r2, [sp, #72]	; 0x48
   125c4:	str	r0, [sp, #48]	; 0x30
   125c8:	ldr	r0, [sp, #56]	; 0x38
   125cc:	str	r1, [sp, #68]	; 0x44
   125d0:	ldr	r3, [r0]
   125d4:	str	r3, [sp, #116]	; 0x74
   125d8:	bl	1125c <__ctype_get_mb_cur_max@plt>
   125dc:	ldr	r2, [sp, #160]	; 0xa0
   125e0:	str	r0, [sp, #64]	; 0x40
   125e4:	cmp	r2, #8
   125e8:	addls	pc, pc, r2, lsl #2
   125ec:	b	1314c <__assert_fail@plt+0x1cc8>
   125f0:	b	12614 <__assert_fail@plt+0x1190>
   125f4:	b	12e64 <__assert_fail@plt+0x19e0>
   125f8:	b	12e94 <__assert_fail@plt+0x1a10>
   125fc:	b	12d44 <__assert_fail@plt+0x18c0>
   12600:	b	12d84 <__assert_fail@plt+0x1900>
   12604:	b	12db0 <__assert_fail@plt+0x192c>
   12608:	b	12dd0 <__assert_fail@plt+0x194c>
   1260c:	b	12dd0 <__assert_fail@plt+0x194c>
   12610:	b	12dd0 <__assert_fail@plt+0x194c>
   12614:	mov	r2, #0
   12618:	str	r2, [sp, #36]	; 0x24
   1261c:	mov	r9, r2
   12620:	str	r2, [sp, #24]
   12624:	str	r2, [sp, #28]
   12628:	str	r2, [sp, #52]	; 0x34
   1262c:	ldr	r0, [sp, #36]	; 0x24
   12630:	mov	fp, #0
   12634:	ldr	r1, [sp, #24]
   12638:	eor	r2, r0, #1
   1263c:	eor	r3, r1, #1
   12640:	and	r3, r2, r3
   12644:	and	r2, r1, r0
   12648:	str	r3, [sp, #44]	; 0x2c
   1264c:	str	r2, [sp, #76]	; 0x4c
   12650:	cmn	r8, #1
   12654:	beq	129d4 <__assert_fail@plt+0x1550>
   12658:	subs	r3, fp, r8
   1265c:	movne	r3, #1
   12660:	cmp	r3, #0
   12664:	beq	129ec <__assert_fail@plt+0x1568>
   12668:	ldr	r3, [sp, #28]
   1266c:	ldr	r0, [sp, #24]
   12670:	adds	r7, r3, #0
   12674:	movne	r7, #1
   12678:	ands	r6, r7, r0
   1267c:	bne	12ed8 <__assert_fail@plt+0x1a54>
   12680:	ldr	r1, [sp, #32]
   12684:	add	r5, r1, fp
   12688:	ldrb	r4, [r5]
   1268c:	cmp	r4, #126	; 0x7e
   12690:	addls	pc, pc, r4, lsl #2
   12694:	b	12c58 <__assert_fail@plt+0x17d4>
   12698:	b	12b64 <__assert_fail@plt+0x16e0>
   1269c:	b	12c58 <__assert_fail@plt+0x17d4>
   126a0:	b	12c58 <__assert_fail@plt+0x17d4>
   126a4:	b	12c58 <__assert_fail@plt+0x17d4>
   126a8:	b	12c58 <__assert_fail@plt+0x17d4>
   126ac:	b	12c58 <__assert_fail@plt+0x17d4>
   126b0:	b	12c58 <__assert_fail@plt+0x17d4>
   126b4:	b	12b4c <__assert_fail@plt+0x16c8>
   126b8:	b	12b34 <__assert_fail@plt+0x16b0>
   126bc:	b	12b5c <__assert_fail@plt+0x16d8>
   126c0:	b	12b54 <__assert_fail@plt+0x16d0>
   126c4:	b	12b44 <__assert_fail@plt+0x16c0>
   126c8:	b	12b3c <__assert_fail@plt+0x16b8>
   126cc:	b	12b00 <__assert_fail@plt+0x167c>
   126d0:	b	12c58 <__assert_fail@plt+0x17d4>
   126d4:	b	12c58 <__assert_fail@plt+0x17d4>
   126d8:	b	12c58 <__assert_fail@plt+0x17d4>
   126dc:	b	12c58 <__assert_fail@plt+0x17d4>
   126e0:	b	12c58 <__assert_fail@plt+0x17d4>
   126e4:	b	12c58 <__assert_fail@plt+0x17d4>
   126e8:	b	12c58 <__assert_fail@plt+0x17d4>
   126ec:	b	12c58 <__assert_fail@plt+0x17d4>
   126f0:	b	12c58 <__assert_fail@plt+0x17d4>
   126f4:	b	12c58 <__assert_fail@plt+0x17d4>
   126f8:	b	12c58 <__assert_fail@plt+0x17d4>
   126fc:	b	12c58 <__assert_fail@plt+0x17d4>
   12700:	b	12c58 <__assert_fail@plt+0x17d4>
   12704:	b	12c58 <__assert_fail@plt+0x17d4>
   12708:	b	12c58 <__assert_fail@plt+0x17d4>
   1270c:	b	12c58 <__assert_fail@plt+0x17d4>
   12710:	b	12c58 <__assert_fail@plt+0x17d4>
   12714:	b	12c58 <__assert_fail@plt+0x17d4>
   12718:	b	12a8c <__assert_fail@plt+0x1608>
   1271c:	b	12a8c <__assert_fail@plt+0x1608>
   12720:	b	12a8c <__assert_fail@plt+0x1608>
   12724:	b	12a84 <__assert_fail@plt+0x1600>
   12728:	b	12a8c <__assert_fail@plt+0x1608>
   1272c:	b	12960 <__assert_fail@plt+0x14dc>
   12730:	b	12a8c <__assert_fail@plt+0x1608>
   12734:	b	12c00 <__assert_fail@plt+0x177c>
   12738:	b	12a8c <__assert_fail@plt+0x1608>
   1273c:	b	12a8c <__assert_fail@plt+0x1608>
   12740:	b	12a8c <__assert_fail@plt+0x1608>
   12744:	b	12960 <__assert_fail@plt+0x14dc>
   12748:	b	12960 <__assert_fail@plt+0x14dc>
   1274c:	b	12960 <__assert_fail@plt+0x14dc>
   12750:	b	12960 <__assert_fail@plt+0x14dc>
   12754:	b	12960 <__assert_fail@plt+0x14dc>
   12758:	b	12960 <__assert_fail@plt+0x14dc>
   1275c:	b	12960 <__assert_fail@plt+0x14dc>
   12760:	b	12960 <__assert_fail@plt+0x14dc>
   12764:	b	12960 <__assert_fail@plt+0x14dc>
   12768:	b	12960 <__assert_fail@plt+0x14dc>
   1276c:	b	12960 <__assert_fail@plt+0x14dc>
   12770:	b	12960 <__assert_fail@plt+0x14dc>
   12774:	b	12960 <__assert_fail@plt+0x14dc>
   12778:	b	12960 <__assert_fail@plt+0x14dc>
   1277c:	b	12960 <__assert_fail@plt+0x14dc>
   12780:	b	12960 <__assert_fail@plt+0x14dc>
   12784:	b	12a8c <__assert_fail@plt+0x1608>
   12788:	b	12a8c <__assert_fail@plt+0x1608>
   1278c:	b	12a8c <__assert_fail@plt+0x1608>
   12790:	b	12a8c <__assert_fail@plt+0x1608>
   12794:	b	12894 <__assert_fail@plt+0x1410>
   12798:	b	12c58 <__assert_fail@plt+0x17d4>
   1279c:	b	12960 <__assert_fail@plt+0x14dc>
   127a0:	b	12960 <__assert_fail@plt+0x14dc>
   127a4:	b	12960 <__assert_fail@plt+0x14dc>
   127a8:	b	12960 <__assert_fail@plt+0x14dc>
   127ac:	b	12960 <__assert_fail@plt+0x14dc>
   127b0:	b	12960 <__assert_fail@plt+0x14dc>
   127b4:	b	12960 <__assert_fail@plt+0x14dc>
   127b8:	b	12960 <__assert_fail@plt+0x14dc>
   127bc:	b	12960 <__assert_fail@plt+0x14dc>
   127c0:	b	12960 <__assert_fail@plt+0x14dc>
   127c4:	b	12960 <__assert_fail@plt+0x14dc>
   127c8:	b	12960 <__assert_fail@plt+0x14dc>
   127cc:	b	12960 <__assert_fail@plt+0x14dc>
   127d0:	b	12960 <__assert_fail@plt+0x14dc>
   127d4:	b	12960 <__assert_fail@plt+0x14dc>
   127d8:	b	12960 <__assert_fail@plt+0x14dc>
   127dc:	b	12960 <__assert_fail@plt+0x14dc>
   127e0:	b	12960 <__assert_fail@plt+0x14dc>
   127e4:	b	12960 <__assert_fail@plt+0x14dc>
   127e8:	b	12960 <__assert_fail@plt+0x14dc>
   127ec:	b	12960 <__assert_fail@plt+0x14dc>
   127f0:	b	12960 <__assert_fail@plt+0x14dc>
   127f4:	b	12960 <__assert_fail@plt+0x14dc>
   127f8:	b	12960 <__assert_fail@plt+0x14dc>
   127fc:	b	12960 <__assert_fail@plt+0x14dc>
   12800:	b	12960 <__assert_fail@plt+0x14dc>
   12804:	b	12a8c <__assert_fail@plt+0x1608>
   12808:	b	12be4 <__assert_fail@plt+0x1760>
   1280c:	b	12960 <__assert_fail@plt+0x14dc>
   12810:	b	12a8c <__assert_fail@plt+0x1608>
   12814:	b	12960 <__assert_fail@plt+0x14dc>
   12818:	b	12a8c <__assert_fail@plt+0x1608>
   1281c:	b	12960 <__assert_fail@plt+0x14dc>
   12820:	b	12960 <__assert_fail@plt+0x14dc>
   12824:	b	12960 <__assert_fail@plt+0x14dc>
   12828:	b	12960 <__assert_fail@plt+0x14dc>
   1282c:	b	12960 <__assert_fail@plt+0x14dc>
   12830:	b	12960 <__assert_fail@plt+0x14dc>
   12834:	b	12960 <__assert_fail@plt+0x14dc>
   12838:	b	12960 <__assert_fail@plt+0x14dc>
   1283c:	b	12960 <__assert_fail@plt+0x14dc>
   12840:	b	12960 <__assert_fail@plt+0x14dc>
   12844:	b	12960 <__assert_fail@plt+0x14dc>
   12848:	b	12960 <__assert_fail@plt+0x14dc>
   1284c:	b	12960 <__assert_fail@plt+0x14dc>
   12850:	b	12960 <__assert_fail@plt+0x14dc>
   12854:	b	12960 <__assert_fail@plt+0x14dc>
   12858:	b	12960 <__assert_fail@plt+0x14dc>
   1285c:	b	12960 <__assert_fail@plt+0x14dc>
   12860:	b	12960 <__assert_fail@plt+0x14dc>
   12864:	b	12960 <__assert_fail@plt+0x14dc>
   12868:	b	12960 <__assert_fail@plt+0x14dc>
   1286c:	b	12960 <__assert_fail@plt+0x14dc>
   12870:	b	12960 <__assert_fail@plt+0x14dc>
   12874:	b	12960 <__assert_fail@plt+0x14dc>
   12878:	b	12960 <__assert_fail@plt+0x14dc>
   1287c:	b	12960 <__assert_fail@plt+0x14dc>
   12880:	b	12960 <__assert_fail@plt+0x14dc>
   12884:	b	12a6c <__assert_fail@plt+0x15e8>
   12888:	b	12a8c <__assert_fail@plt+0x1608>
   1288c:	b	12a6c <__assert_fail@plt+0x15e8>
   12890:	b	12a84 <__assert_fail@plt+0x1600>
   12894:	ldr	r3, [sp, #160]	; 0xa0
   12898:	cmp	r3, #2
   1289c:	beq	13128 <__assert_fail@plt+0x1ca4>
   128a0:	cmp	r3, #3
   128a4:	bne	12960 <__assert_fail@plt+0x14dc>
   128a8:	ldr	r1, [sp, #164]	; 0xa4
   128ac:	tst	r1, #4
   128b0:	beq	12960 <__assert_fail@plt+0x14dc>
   128b4:	add	r3, fp, #2
   128b8:	cmp	r8, r3
   128bc:	bls	12960 <__assert_fail@plt+0x14dc>
   128c0:	ldrb	r2, [r5, #1]
   128c4:	mov	r1, #1
   128c8:	cmp	r2, #63	; 0x3f
   128cc:	bne	12960 <__assert_fail@plt+0x14dc>
   128d0:	ldr	r0, [sp, #32]
   128d4:	ldrb	ip, [r0, r3]
   128d8:	sub	r0, ip, #33	; 0x21
   128dc:	uxtb	r0, r0
   128e0:	cmp	r0, #29
   128e4:	bhi	12960 <__assert_fail@plt+0x14dc>
   128e8:	lsl	r1, r1, r0
   128ec:	movw	r0, #20929	; 0x51c1
   128f0:	movt	r0, #14336	; 0x3800
   128f4:	and	r0, r1, r0
   128f8:	cmp	r0, #0
   128fc:	beq	12960 <__assert_fail@plt+0x14dc>
   12900:	ldr	r1, [sp, #36]	; 0x24
   12904:	cmp	r1, #0
   12908:	bne	12aa8 <__assert_fail@plt+0x1624>
   1290c:	cmp	r9, sl
   12910:	mov	r4, ip
   12914:	mov	fp, r3
   12918:	ldrcc	r0, [sp, #40]	; 0x28
   1291c:	strbcc	r2, [r0, r9]
   12920:	add	r2, r9, #1
   12924:	cmp	sl, r2
   12928:	ldrhi	r0, [sp, #40]	; 0x28
   1292c:	movhi	r1, #34	; 0x22
   12930:	strbhi	r1, [r0, r2]
   12934:	add	r2, r9, #2
   12938:	cmp	sl, r2
   1293c:	ldrhi	r0, [sp, #40]	; 0x28
   12940:	movhi	r1, #34	; 0x22
   12944:	strbhi	r1, [r0, r2]
   12948:	add	r2, r9, #3
   1294c:	cmp	sl, r2
   12950:	add	r9, r9, #4
   12954:	ldrhi	r0, [sp, #40]	; 0x28
   12958:	movhi	r1, #63	; 0x3f
   1295c:	strbhi	r1, [r0, r2]
   12960:	ldr	r0, [sp, #44]	; 0x2c
   12964:	cmp	r0, #0
   12968:	bne	12990 <__assert_fail@plt+0x150c>
   1296c:	ldr	r1, [sp, #48]	; 0x30
   12970:	cmp	r1, #0
   12974:	beq	12990 <__assert_fail@plt+0x150c>
   12978:	ubfx	r2, r4, #5, #8
   1297c:	and	r3, r4, #31
   12980:	ldr	r2, [r1, r2, lsl #2]
   12984:	lsr	r3, r2, r3
   12988:	tst	r3, #1
   1298c:	bne	12998 <__assert_fail@plt+0x1514>
   12990:	cmp	r6, #0
   12994:	beq	129b8 <__assert_fail@plt+0x1534>
   12998:	ldr	r2, [sp, #36]	; 0x24
   1299c:	cmp	r2, #0
   129a0:	bne	12aa8 <__assert_fail@plt+0x1624>
   129a4:	cmp	r9, sl
   129a8:	ldrcc	r0, [sp, #40]	; 0x28
   129ac:	movcc	r3, #92	; 0x5c
   129b0:	strbcc	r3, [r0, r9]
   129b4:	add	r9, r9, #1
   129b8:	add	fp, fp, #1
   129bc:	cmp	r9, sl
   129c0:	ldrcc	r1, [sp, #40]	; 0x28
   129c4:	strbcc	r4, [r1, r9]
   129c8:	cmn	r8, #1
   129cc:	add	r9, r9, #1
   129d0:	bne	12658 <__assert_fail@plt+0x11d4>
   129d4:	ldr	r2, [sp, #32]
   129d8:	ldrb	r3, [r2, fp]
   129dc:	adds	r3, r3, #0
   129e0:	movne	r3, #1
   129e4:	cmp	r3, #0
   129e8:	bne	12668 <__assert_fail@plt+0x11e4>
   129ec:	ldr	r3, [sp, #160]	; 0xa0
   129f0:	cmp	r9, #0
   129f4:	cmpeq	r3, #2
   129f8:	bne	12a08 <__assert_fail@plt+0x1584>
   129fc:	ldr	r0, [sp, #36]	; 0x24
   12a00:	cmp	r0, #0
   12a04:	bne	12aa8 <__assert_fail@plt+0x1624>
   12a08:	ldr	r1, [sp, #36]	; 0x24
   12a0c:	ldr	r2, [sp, #52]	; 0x34
   12a10:	eor	r3, r1, #1
   12a14:	cmp	r2, #0
   12a18:	moveq	r3, #0
   12a1c:	andne	r3, r3, #1
   12a20:	cmp	r3, #0
   12a24:	beq	12a50 <__assert_fail@plt+0x15cc>
   12a28:	ldrb	r3, [r2]
   12a2c:	cmp	r3, #0
   12a30:	beq	12a50 <__assert_fail@plt+0x15cc>
   12a34:	ldr	r1, [sp, #40]	; 0x28
   12a38:	cmp	sl, r9
   12a3c:	strbhi	r3, [r1, r9]
   12a40:	ldrb	r3, [r2, #1]!
   12a44:	add	r9, r9, #1
   12a48:	cmp	r3, #0
   12a4c:	bne	12a38 <__assert_fail@plt+0x15b4>
   12a50:	cmp	r9, sl
   12a54:	movcs	r0, r9
   12a58:	ldrcc	r1, [sp, #40]	; 0x28
   12a5c:	movcc	r3, #0
   12a60:	movcc	r0, r9
   12a64:	strbcc	r3, [r1, r9]
   12a68:	b	12ae4 <__assert_fail@plt+0x1660>
   12a6c:	cmn	r8, #1
   12a70:	beq	13138 <__assert_fail@plt+0x1cb4>
   12a74:	subs	r3, r8, #1
   12a78:	movne	r3, #1
   12a7c:	cmp	r3, #0
   12a80:	bne	12960 <__assert_fail@plt+0x14dc>
   12a84:	cmp	fp, #0
   12a88:	bne	12960 <__assert_fail@plt+0x14dc>
   12a8c:	ldr	r3, [sp, #36]	; 0x24
   12a90:	ldr	r0, [sp, #160]	; 0xa0
   12a94:	cmp	r0, #2
   12a98:	movne	r3, #0
   12a9c:	andeq	r3, r3, #1
   12aa0:	cmp	r3, #0
   12aa4:	beq	12960 <__assert_fail@plt+0x14dc>
   12aa8:	ldr	r2, [sp, #164]	; 0xa4
   12aac:	mov	ip, #0
   12ab0:	ldr	r0, [sp, #160]	; 0xa0
   12ab4:	bic	r3, r2, #2
   12ab8:	ldr	r1, [sp, #72]	; 0x48
   12abc:	ldr	r2, [sp, #68]	; 0x44
   12ac0:	stm	sp, {r0, r3}
   12ac4:	mov	r3, r8
   12ac8:	str	r1, [sp, #12]
   12acc:	mov	r1, sl
   12ad0:	str	r2, [sp, #16]
   12ad4:	ldr	r0, [sp, #40]	; 0x28
   12ad8:	ldr	r2, [sp, #32]
   12adc:	str	ip, [sp, #8]
   12ae0:	bl	12578 <__assert_fail@plt+0x10f4>
   12ae4:	ldr	r1, [sp, #56]	; 0x38
   12ae8:	ldr	r2, [sp, #116]	; 0x74
   12aec:	ldr	r3, [r1]
   12af0:	cmp	r2, r3
   12af4:	bne	13228 <__assert_fail@plt+0x1da4>
   12af8:	add	sp, sp, #124	; 0x7c
   12afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b00:	mov	r3, #114	; 0x72
   12b04:	ldr	r2, [sp, #36]	; 0x24
   12b08:	ldr	r0, [sp, #160]	; 0xa0
   12b0c:	cmp	r0, #2
   12b10:	movne	r2, #0
   12b14:	andeq	r2, r2, #1
   12b18:	cmp	r2, #0
   12b1c:	bne	12aa8 <__assert_fail@plt+0x1624>
   12b20:	ldr	r1, [sp, #24]
   12b24:	cmp	r1, #0
   12b28:	beq	12960 <__assert_fail@plt+0x14dc>
   12b2c:	mov	r4, r3
   12b30:	b	12998 <__assert_fail@plt+0x1514>
   12b34:	mov	r3, #98	; 0x62
   12b38:	b	12b20 <__assert_fail@plt+0x169c>
   12b3c:	mov	r3, #102	; 0x66
   12b40:	b	12b20 <__assert_fail@plt+0x169c>
   12b44:	mov	r3, #118	; 0x76
   12b48:	b	12b20 <__assert_fail@plt+0x169c>
   12b4c:	mov	r3, #97	; 0x61
   12b50:	b	12b20 <__assert_fail@plt+0x169c>
   12b54:	mov	r3, #110	; 0x6e
   12b58:	b	12b04 <__assert_fail@plt+0x1680>
   12b5c:	mov	r3, #116	; 0x74
   12b60:	b	12b04 <__assert_fail@plt+0x1680>
   12b64:	ldr	r2, [sp, #24]
   12b68:	cmp	r2, #0
   12b6c:	beq	13114 <__assert_fail@plt+0x1c90>
   12b70:	ldr	r3, [sp, #36]	; 0x24
   12b74:	cmp	r3, #0
   12b78:	bne	12aa8 <__assert_fail@plt+0x1624>
   12b7c:	cmp	r9, sl
   12b80:	add	r2, r9, #1
   12b84:	ldrcc	r0, [sp, #40]	; 0x28
   12b88:	movcc	r3, #92	; 0x5c
   12b8c:	strbcc	r3, [r0, r9]
   12b90:	add	r3, fp, #1
   12b94:	cmp	r8, r3
   12b98:	bls	12bd8 <__assert_fail@plt+0x1754>
   12b9c:	ldr	r1, [sp, #32]
   12ba0:	ldrb	r3, [r1, r3]
   12ba4:	sub	r3, r3, #48	; 0x30
   12ba8:	cmp	r3, #9
   12bac:	bhi	12bd8 <__assert_fail@plt+0x1754>
   12bb0:	cmp	sl, r2
   12bb4:	ldrhi	r0, [sp, #40]	; 0x28
   12bb8:	movhi	r3, #48	; 0x30
   12bbc:	strbhi	r3, [r0, r2]
   12bc0:	add	r3, r9, #2
   12bc4:	cmp	sl, r3
   12bc8:	ldrhi	r1, [sp, #40]	; 0x28
   12bcc:	movhi	r2, #48	; 0x30
   12bd0:	strbhi	r2, [r1, r3]
   12bd4:	add	r2, r9, #3
   12bd8:	mov	r9, r2
   12bdc:	mov	r4, #48	; 0x30
   12be0:	b	1296c <__assert_fail@plt+0x14e8>
   12be4:	ldr	r1, [sp, #76]	; 0x4c
   12be8:	cmp	r1, #0
   12bec:	beq	12bf8 <__assert_fail@plt+0x1774>
   12bf0:	cmp	r7, #0
   12bf4:	bne	129b8 <__assert_fail@plt+0x1534>
   12bf8:	mov	r3, r4
   12bfc:	b	12b04 <__assert_fail@plt+0x1680>
   12c00:	ldr	r1, [sp, #160]	; 0xa0
   12c04:	cmp	r1, #2
   12c08:	bne	12960 <__assert_fail@plt+0x14dc>
   12c0c:	ldr	r2, [sp, #36]	; 0x24
   12c10:	cmp	r2, #0
   12c14:	bne	12aa8 <__assert_fail@plt+0x1624>
   12c18:	cmp	r9, sl
   12c1c:	ldrcc	r0, [sp, #40]	; 0x28
   12c20:	movcc	r3, #39	; 0x27
   12c24:	strbcc	r3, [r0, r9]
   12c28:	add	r3, r9, #1
   12c2c:	cmp	sl, r3
   12c30:	ldrhi	r1, [sp, #40]	; 0x28
   12c34:	movhi	r2, #92	; 0x5c
   12c38:	strbhi	r2, [r1, r3]
   12c3c:	add	r3, r9, #2
   12c40:	cmp	sl, r3
   12c44:	add	r9, r9, #3
   12c48:	ldrhi	r0, [sp, #40]	; 0x28
   12c4c:	movhi	r2, #39	; 0x27
   12c50:	strbhi	r2, [r0, r3]
   12c54:	b	12960 <__assert_fail@plt+0x14dc>
   12c58:	ldr	r1, [sp, #64]	; 0x40
   12c5c:	cmp	r1, #1
   12c60:	bne	12f58 <__assert_fail@plt+0x1ad4>
   12c64:	bl	11310 <__ctype_b_loc@plt>
   12c68:	ldr	r2, [sp, #64]	; 0x40
   12c6c:	sxth	r3, r4
   12c70:	str	r2, [sp, #60]	; 0x3c
   12c74:	lsl	r3, r3, #1
   12c78:	ldr	r2, [r0]
   12c7c:	ldrh	r2, [r2, r3]
   12c80:	eor	r2, r2, #16384	; 0x4000
   12c84:	ubfx	r2, r2, #14, #1
   12c88:	ldr	r1, [sp, #24]
   12c8c:	ands	r2, r2, r1
   12c90:	beq	12960 <__assert_fail@plt+0x14dc>
   12c94:	ldr	r3, [sp, #60]	; 0x3c
   12c98:	mov	r0, #92	; 0x5c
   12c9c:	ldr	r7, [sp, #36]	; 0x24
   12ca0:	add	r1, r3, fp
   12ca4:	str	r8, [sp, #60]	; 0x3c
   12ca8:	ldr	r3, [sp, #40]	; 0x28
   12cac:	b	12d10 <__assert_fail@plt+0x188c>
   12cb0:	cmp	r7, #0
   12cb4:	bne	13150 <__assert_fail@plt+0x1ccc>
   12cb8:	add	ip, r9, #1
   12cbc:	cmp	r9, sl
   12cc0:	strbcc	r0, [r3, r9]
   12cc4:	cmp	sl, ip
   12cc8:	lsrhi	r8, r4, #6
   12ccc:	addhi	r8, r8, #48	; 0x30
   12cd0:	strbhi	r8, [r3, ip]
   12cd4:	add	ip, r9, #2
   12cd8:	add	r9, r9, #3
   12cdc:	cmp	sl, ip
   12ce0:	ubfxhi	r8, r4, #3, #3
   12ce4:	and	r4, r4, #7
   12ce8:	add	r4, r4, #48	; 0x30
   12cec:	addhi	r8, r8, #48	; 0x30
   12cf0:	strbhi	r8, [r3, ip]
   12cf4:	add	fp, fp, #1
   12cf8:	cmp	r1, fp
   12cfc:	bls	12d3c <__assert_fail@plt+0x18b8>
   12d00:	cmp	r9, sl
   12d04:	strbcc	r4, [r3, r9]
   12d08:	ldrb	r4, [r5, #1]!
   12d0c:	add	r9, r9, #1
   12d10:	cmp	r2, #0
   12d14:	bne	12cb0 <__assert_fail@plt+0x182c>
   12d18:	cmp	r6, #0
   12d1c:	beq	12cf4 <__assert_fail@plt+0x1870>
   12d20:	add	fp, fp, #1
   12d24:	cmp	r9, sl
   12d28:	strbcc	r0, [r3, r9]
   12d2c:	cmp	r1, fp
   12d30:	add	r9, r9, #1
   12d34:	mov	r6, #0
   12d38:	bhi	12d00 <__assert_fail@plt+0x187c>
   12d3c:	ldr	r8, [sp, #60]	; 0x3c
   12d40:	b	129bc <__assert_fail@plt+0x1538>
   12d44:	ldr	r3, [sp, #36]	; 0x24
   12d48:	cmp	r3, #0
   12d4c:	bne	13250 <__assert_fail@plt+0x1dcc>
   12d50:	cmp	sl, #0
   12d54:	beq	13168 <__assert_fail@plt+0x1ce4>
   12d58:	ldr	r1, [sp, #40]	; 0x28
   12d5c:	mov	r0, #1
   12d60:	ldr	r2, [pc, #1296]	; 13278 <__assert_fail@plt+0x1df4>
   12d64:	mov	r3, #34	; 0x22
   12d68:	str	r0, [sp, #24]
   12d6c:	mov	r9, r0
   12d70:	add	r2, pc, r2
   12d74:	str	r0, [sp, #28]
   12d78:	strb	r3, [r1]
   12d7c:	str	r2, [sp, #52]	; 0x34
   12d80:	b	1262c <__assert_fail@plt+0x11a8>
   12d84:	ldr	r3, [pc, #1264]	; 1327c <__assert_fail@plt+0x1df8>
   12d88:	mov	r2, #1
   12d8c:	mov	r0, #3
   12d90:	str	r2, [sp, #36]	; 0x24
   12d94:	add	r3, pc, r3
   12d98:	str	r2, [sp, #24]
   12d9c:	str	r3, [sp, #52]	; 0x34
   12da0:	mov	r9, #0
   12da4:	str	r2, [sp, #28]
   12da8:	str	r0, [sp, #160]	; 0xa0
   12dac:	b	1262c <__assert_fail@plt+0x11a8>
   12db0:	mov	r0, #0
   12db4:	mov	r1, #1
   12db8:	str	r0, [sp, #36]	; 0x24
   12dbc:	mov	r9, r0
   12dc0:	str	r1, [sp, #24]
   12dc4:	str	r0, [sp, #28]
   12dc8:	str	r0, [sp, #52]	; 0x34
   12dcc:	b	1262c <__assert_fail@plt+0x11a8>
   12dd0:	ldr	r3, [sp, #160]	; 0xa0
   12dd4:	cmp	r3, #8
   12dd8:	beq	12e04 <__assert_fail@plt+0x1980>
   12ddc:	ldr	r0, [pc, #1180]	; 13280 <__assert_fail@plt+0x1dfc>
   12de0:	mov	r1, r3
   12de4:	add	r0, pc, r0
   12de8:	bl	12414 <__assert_fail@plt+0xf90>
   12dec:	ldr	r1, [sp, #160]	; 0xa0
   12df0:	str	r0, [sp, #72]	; 0x48
   12df4:	ldr	r0, [pc, #1160]	; 13284 <__assert_fail@plt+0x1e00>
   12df8:	add	r0, pc, r0
   12dfc:	bl	12414 <__assert_fail@plt+0xf90>
   12e00:	str	r0, [sp, #68]	; 0x44
   12e04:	ldr	r0, [sp, #36]	; 0x24
   12e08:	cmp	r0, #0
   12e0c:	movne	r9, #0
   12e10:	bne	12e48 <__assert_fail@plt+0x19c4>
   12e14:	ldr	r1, [sp, #72]	; 0x48
   12e18:	ldrb	r3, [r1]
   12e1c:	cmp	r3, #0
   12e20:	beq	13220 <__assert_fail@plt+0x1d9c>
   12e24:	mov	r2, r1
   12e28:	ldr	r1, [sp, #40]	; 0x28
   12e2c:	mov	r9, r0
   12e30:	cmp	r9, sl
   12e34:	strbcc	r3, [r1, r9]
   12e38:	ldrb	r3, [r2, #1]!
   12e3c:	add	r9, r9, #1
   12e40:	cmp	r3, #0
   12e44:	bne	12e30 <__assert_fail@plt+0x19ac>
   12e48:	ldr	r0, [sp, #68]	; 0x44
   12e4c:	str	r0, [sp, #52]	; 0x34
   12e50:	bl	11334 <strlen@plt>
   12e54:	mov	r2, #1
   12e58:	str	r2, [sp, #24]
   12e5c:	str	r0, [sp, #28]
   12e60:	b	1262c <__assert_fail@plt+0x11a8>
   12e64:	ldr	r3, [pc, #1052]	; 13288 <__assert_fail@plt+0x1e04>
   12e68:	mov	r2, #0
   12e6c:	mov	r1, #1
   12e70:	mov	r0, #2
   12e74:	add	r3, pc, r3
   12e78:	str	r1, [sp, #36]	; 0x24
   12e7c:	str	r2, [sp, #24]
   12e80:	mov	r9, r2
   12e84:	str	r1, [sp, #28]
   12e88:	str	r3, [sp, #52]	; 0x34
   12e8c:	str	r0, [sp, #160]	; 0xa0
   12e90:	b	1262c <__assert_fail@plt+0x11a8>
   12e94:	ldr	r3, [sp, #36]	; 0x24
   12e98:	cmp	r3, #0
   12e9c:	bne	1322c <__assert_fail@plt+0x1da8>
   12ea0:	cmp	sl, #0
   12ea4:	beq	13188 <__assert_fail@plt+0x1d04>
   12ea8:	ldr	r1, [sp, #40]	; 0x28
   12eac:	mov	r3, #39	; 0x27
   12eb0:	ldr	r2, [sp, #36]	; 0x24
   12eb4:	mov	r0, #1
   12eb8:	mov	r9, r0
   12ebc:	str	r0, [sp, #28]
   12ec0:	strb	r3, [r1]
   12ec4:	ldr	r3, [pc, #960]	; 1328c <__assert_fail@plt+0x1e08>
   12ec8:	str	r2, [sp, #24]
   12ecc:	add	r3, pc, r3
   12ed0:	str	r3, [sp, #52]	; 0x34
   12ed4:	b	1262c <__assert_fail@plt+0x11a8>
   12ed8:	ldr	r2, [sp, #28]
   12edc:	cmp	r2, #1
   12ee0:	add	r4, fp, r2
   12ee4:	movls	r3, #0
   12ee8:	movhi	r3, #1
   12eec:	cmn	r8, #1
   12ef0:	movne	r3, #0
   12ef4:	cmp	r3, #0
   12ef8:	beq	12f08 <__assert_fail@plt+0x1a84>
   12efc:	ldr	r0, [sp, #32]
   12f00:	bl	11334 <strlen@plt>
   12f04:	mov	r8, r0
   12f08:	cmp	r8, r4
   12f0c:	ldrcc	r3, [sp, #32]
   12f10:	movcc	r6, #0
   12f14:	addcc	r5, r3, fp
   12f18:	bcc	12688 <__assert_fail@plt+0x1204>
   12f1c:	ldr	r0, [sp, #32]
   12f20:	ldr	r1, [sp, #52]	; 0x34
   12f24:	add	r5, r0, fp
   12f28:	ldr	r2, [sp, #28]
   12f2c:	mov	r0, r5
   12f30:	bl	111e4 <memcmp@plt>
   12f34:	cmp	r0, #0
   12f38:	bne	12f50 <__assert_fail@plt+0x1acc>
   12f3c:	ldr	r1, [sp, #36]	; 0x24
   12f40:	cmp	r1, #0
   12f44:	bne	12aa8 <__assert_fail@plt+0x1624>
   12f48:	mov	r6, #1
   12f4c:	b	12688 <__assert_fail@plt+0x1204>
   12f50:	mov	r6, #0
   12f54:	b	12688 <__assert_fail@plt+0x1204>
   12f58:	add	r7, sp, #108	; 0x6c
   12f5c:	cmn	r8, #1
   12f60:	mov	r3, #0
   12f64:	str	r3, [sp, #108]	; 0x6c
   12f68:	str	r3, [r7, #4]
   12f6c:	beq	13158 <__assert_fail@plt+0x1cd4>
   12f70:	mov	r1, #0
   12f74:	ldr	r0, [sp, #32]
   12f78:	mov	ip, #1
   12f7c:	str	r9, [sp, #88]	; 0x58
   12f80:	str	r6, [sp, #96]	; 0x60
   12f84:	mov	r9, r1
   12f88:	str	r5, [sp, #100]	; 0x64
   12f8c:	mov	r6, ip
   12f90:	mov	r5, r7
   12f94:	add	r3, sp, #104	; 0x68
   12f98:	sub	r0, r0, #1
   12f9c:	str	r3, [sp, #80]	; 0x50
   12fa0:	str	r0, [sp, #84]	; 0x54
   12fa4:	str	r1, [sp, #60]	; 0x3c
   12fa8:	str	r4, [sp, #92]	; 0x5c
   12fac:	ldr	r2, [sp, #32]
   12fb0:	add	r7, r9, fp
   12fb4:	add	r0, sp, #104	; 0x68
   12fb8:	mov	r3, r5
   12fbc:	add	r4, r2, r7
   12fc0:	rsb	r2, r7, r8
   12fc4:	mov	r1, r4
   12fc8:	bl	1128c <mbrtowc@plt>
   12fcc:	subs	r2, r0, #0
   12fd0:	beq	130dc <__assert_fail@plt+0x1c58>
   12fd4:	cmn	r2, #1
   12fd8:	beq	13204 <__assert_fail@plt+0x1d80>
   12fdc:	cmn	r2, #2
   12fe0:	beq	131a8 <__assert_fail@plt+0x1d24>
   12fe4:	ldr	r3, [sp, #36]	; 0x24
   12fe8:	ldr	r0, [sp, #160]	; 0xa0
   12fec:	cmp	r0, #2
   12ff0:	movne	r3, #0
   12ff4:	andeq	r3, r3, #1
   12ff8:	cmp	r3, #0
   12ffc:	beq	130b8 <__assert_fail@plt+0x1c34>
   13000:	cmp	r2, #1
   13004:	beq	130b8 <__assert_fail@plt+0x1c34>
   13008:	ldr	r1, [sp, #84]	; 0x54
   1300c:	add	r3, r1, r2
   13010:	add	r7, r3, r7
   13014:	ldrb	r3, [r4, #1]!
   13018:	sub	r3, r3, #91	; 0x5b
   1301c:	cmp	r3, #33	; 0x21
   13020:	addls	pc, pc, r3, lsl #2
   13024:	b	130b0 <__assert_fail@plt+0x1c2c>
   13028:	b	12aa8 <__assert_fail@plt+0x1624>
   1302c:	b	12aa8 <__assert_fail@plt+0x1624>
   13030:	b	130b0 <__assert_fail@plt+0x1c2c>
   13034:	b	12aa8 <__assert_fail@plt+0x1624>
   13038:	b	130b0 <__assert_fail@plt+0x1c2c>
   1303c:	b	12aa8 <__assert_fail@plt+0x1624>
   13040:	b	130b0 <__assert_fail@plt+0x1c2c>
   13044:	b	130b0 <__assert_fail@plt+0x1c2c>
   13048:	b	130b0 <__assert_fail@plt+0x1c2c>
   1304c:	b	130b0 <__assert_fail@plt+0x1c2c>
   13050:	b	130b0 <__assert_fail@plt+0x1c2c>
   13054:	b	130b0 <__assert_fail@plt+0x1c2c>
   13058:	b	130b0 <__assert_fail@plt+0x1c2c>
   1305c:	b	130b0 <__assert_fail@plt+0x1c2c>
   13060:	b	130b0 <__assert_fail@plt+0x1c2c>
   13064:	b	130b0 <__assert_fail@plt+0x1c2c>
   13068:	b	130b0 <__assert_fail@plt+0x1c2c>
   1306c:	b	130b0 <__assert_fail@plt+0x1c2c>
   13070:	b	130b0 <__assert_fail@plt+0x1c2c>
   13074:	b	130b0 <__assert_fail@plt+0x1c2c>
   13078:	b	130b0 <__assert_fail@plt+0x1c2c>
   1307c:	b	130b0 <__assert_fail@plt+0x1c2c>
   13080:	b	130b0 <__assert_fail@plt+0x1c2c>
   13084:	b	130b0 <__assert_fail@plt+0x1c2c>
   13088:	b	130b0 <__assert_fail@plt+0x1c2c>
   1308c:	b	130b0 <__assert_fail@plt+0x1c2c>
   13090:	b	130b0 <__assert_fail@plt+0x1c2c>
   13094:	b	130b0 <__assert_fail@plt+0x1c2c>
   13098:	b	130b0 <__assert_fail@plt+0x1c2c>
   1309c:	b	130b0 <__assert_fail@plt+0x1c2c>
   130a0:	b	130b0 <__assert_fail@plt+0x1c2c>
   130a4:	b	130b0 <__assert_fail@plt+0x1c2c>
   130a8:	b	130b0 <__assert_fail@plt+0x1c2c>
   130ac:	b	12aa8 <__assert_fail@plt+0x1624>
   130b0:	cmp	r4, r7
   130b4:	bne	13014 <__assert_fail@plt+0x1b90>
   130b8:	ldr	r0, [sp, #104]	; 0x68
   130bc:	add	r9, r9, r2
   130c0:	bl	11238 <iswprint@plt>
   130c4:	cmp	r0, #0
   130c8:	mov	r0, r5
   130cc:	moveq	r6, #0
   130d0:	bl	111d8 <mbsinit@plt>
   130d4:	cmp	r0, #0
   130d8:	beq	12fac <__assert_fail@plt+0x1b28>
   130dc:	mov	ip, r6
   130e0:	eor	r2, ip, #1
   130e4:	str	r9, [sp, #60]	; 0x3c
   130e8:	ldr	r4, [sp, #92]	; 0x5c
   130ec:	uxtb	r2, r2
   130f0:	ldr	r9, [sp, #88]	; 0x58
   130f4:	ldr	r6, [sp, #96]	; 0x60
   130f8:	ldr	r5, [sp, #100]	; 0x64
   130fc:	ldr	r3, [sp, #60]	; 0x3c
   13100:	cmp	r3, #1
   13104:	bls	12c88 <__assert_fail@plt+0x1804>
   13108:	ldr	r0, [sp, #24]
   1310c:	and	r2, r2, r0
   13110:	b	12c94 <__assert_fail@plt+0x1810>
   13114:	ldr	r2, [sp, #164]	; 0xa4
   13118:	tst	r2, #1
   1311c:	addne	fp, fp, #1
   13120:	bne	12650 <__assert_fail@plt+0x11cc>
   13124:	b	12960 <__assert_fail@plt+0x14dc>
   13128:	ldr	r0, [sp, #36]	; 0x24
   1312c:	cmp	r0, #0
   13130:	beq	12960 <__assert_fail@plt+0x14dc>
   13134:	b	12aa8 <__assert_fail@plt+0x1624>
   13138:	ldr	r2, [sp, #32]
   1313c:	ldrb	r3, [r2, #1]
   13140:	adds	r3, r3, #0
   13144:	movne	r3, #1
   13148:	b	12a7c <__assert_fail@plt+0x15f8>
   1314c:	bl	11460 <abort@plt>
   13150:	ldr	r8, [sp, #60]	; 0x3c
   13154:	b	12aa8 <__assert_fail@plt+0x1624>
   13158:	ldr	r0, [sp, #32]
   1315c:	bl	11334 <strlen@plt>
   13160:	mov	r8, r0
   13164:	b	12f70 <__assert_fail@plt+0x1aec>
   13168:	ldr	r2, [pc, #288]	; 13290 <__assert_fail@plt+0x1e0c>
   1316c:	mov	r1, #1
   13170:	mov	r9, r1
   13174:	str	r1, [sp, #24]
   13178:	add	r2, pc, r2
   1317c:	str	r1, [sp, #28]
   13180:	str	r2, [sp, #52]	; 0x34
   13184:	b	1262c <__assert_fail@plt+0x11a8>
   13188:	ldr	r2, [pc, #260]	; 13294 <__assert_fail@plt+0x1e10>
   1318c:	mov	r3, #1
   13190:	mov	r9, r3
   13194:	str	r3, [sp, #28]
   13198:	add	r2, pc, r2
   1319c:	str	sl, [sp, #24]
   131a0:	str	r2, [sp, #52]	; 0x34
   131a4:	b	1262c <__assert_fail@plt+0x11a8>
   131a8:	cmp	r8, r7
   131ac:	str	r9, [sp, #60]	; 0x3c
   131b0:	mov	ip, r4
   131b4:	ldr	r6, [sp, #96]	; 0x60
   131b8:	ldr	r9, [sp, #88]	; 0x58
   131bc:	ldr	r4, [sp, #92]	; 0x5c
   131c0:	ldr	r5, [sp, #100]	; 0x64
   131c4:	bls	131fc <__assert_fail@plt+0x1d78>
   131c8:	ldrb	r3, [ip]
   131cc:	cmp	r3, #0
   131d0:	beq	131fc <__assert_fail@plt+0x1d78>
   131d4:	ldr	r3, [sp, #60]	; 0x3c
   131d8:	b	131e8 <__assert_fail@plt+0x1d64>
   131dc:	ldrb	r2, [r5, r3]
   131e0:	cmp	r2, #0
   131e4:	beq	131f8 <__assert_fail@plt+0x1d74>
   131e8:	add	r3, r3, #1
   131ec:	add	r2, fp, r3
   131f0:	cmp	r8, r2
   131f4:	bhi	131dc <__assert_fail@plt+0x1d58>
   131f8:	str	r3, [sp, #60]	; 0x3c
   131fc:	mov	r2, #1
   13200:	b	130fc <__assert_fail@plt+0x1c78>
   13204:	str	r9, [sp, #60]	; 0x3c
   13208:	mov	r2, #1
   1320c:	ldr	r4, [sp, #92]	; 0x5c
   13210:	ldr	r6, [sp, #96]	; 0x60
   13214:	ldr	r9, [sp, #88]	; 0x58
   13218:	ldr	r5, [sp, #100]	; 0x64
   1321c:	b	130fc <__assert_fail@plt+0x1c78>
   13220:	ldr	r9, [sp, #36]	; 0x24
   13224:	b	12e48 <__assert_fail@plt+0x19c4>
   13228:	bl	11208 <__stack_chk_fail@plt>
   1322c:	ldr	r1, [pc, #100]	; 13298 <__assert_fail@plt+0x1e14>
   13230:	mov	r3, #0
   13234:	mov	r0, #1
   13238:	str	r3, [sp, #24]
   1323c:	add	r1, pc, r1
   13240:	str	r0, [sp, #28]
   13244:	mov	r9, r3
   13248:	str	r1, [sp, #52]	; 0x34
   1324c:	b	1262c <__assert_fail@plt+0x11a8>
   13250:	ldr	r0, [pc, #68]	; 1329c <__assert_fail@plt+0x1e18>
   13254:	mov	r3, #1
   13258:	mov	r9, #0
   1325c:	str	r3, [sp, #24]
   13260:	add	r0, pc, r0
   13264:	str	r3, [sp, #28]
   13268:	str	r0, [sp, #52]	; 0x34
   1326c:	b	1262c <__assert_fail@plt+0x11a8>
   13270:	andeq	r5, r1, r4, ror #20
   13274:	andeq	r0, r0, r4, lsr #2
   13278:	ldrdeq	r4, [r0], -r0
   1327c:	andeq	r4, r0, ip, lsr #1
   13280:	andeq	r4, r0, r8, rrx
   13284:	andeq	r4, r0, r4, asr #32
   13288:	andeq	r3, r0, r8, asr #31
   1328c:	andeq	r3, r0, r0, ror pc
   13290:	andeq	r3, r0, r8, asr #25
   13294:	andeq	r3, r0, r4, lsr #25
   13298:	andeq	r3, r0, r0, lsl #24
   1329c:	andeq	r3, r0, r0, ror #23
   132a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a4:	sub	sp, sp, #44	; 0x2c
   132a8:	mov	r6, r0
   132ac:	mov	r9, r1
   132b0:	mov	sl, r2
   132b4:	mov	r4, r3
   132b8:	bl	11358 <__errno_location@plt>
   132bc:	ldr	fp, [pc, #412]	; 13460 <__assert_fail@plt+0x1fdc>
   132c0:	cmp	r6, #0
   132c4:	add	fp, pc, fp
   132c8:	ldr	r5, [fp]
   132cc:	ldr	r1, [r0]
   132d0:	mov	r8, r0
   132d4:	str	r1, [sp, #36]	; 0x24
   132d8:	blt	13458 <__assert_fail@plt+0x1fd4>
   132dc:	ldr	r3, [pc, #384]	; 13464 <__assert_fail@plt+0x1fe0>
   132e0:	add	r3, pc, r3
   132e4:	ldr	r3, [r3]
   132e8:	cmp	r6, r3
   132ec:	bcc	13340 <__assert_fail@plt+0x1ebc>
   132f0:	add	r7, r6, #1
   132f4:	cmn	r7, #-536870911	; 0xe0000001
   132f8:	bhi	1345c <__assert_fail@plt+0x1fd8>
   132fc:	add	r3, fp, #4
   13300:	cmp	r5, r3
   13304:	beq	13430 <__assert_fail@plt+0x1fac>
   13308:	mov	r0, r5
   1330c:	lsl	r1, r7, #3
   13310:	bl	143b8 <__assert_fail@plt+0x2f34>
   13314:	mov	r5, r0
   13318:	str	r0, [fp]
   1331c:	ldr	fp, [pc, #324]	; 13468 <__assert_fail@plt+0x1fe4>
   13320:	mov	r1, #0
   13324:	add	fp, pc, fp
   13328:	ldr	r0, [fp]
   1332c:	rsb	r2, r0, r7
   13330:	add	r0, r5, r0, lsl #3
   13334:	lsl	r2, r2, #3
   13338:	bl	11394 <memset@plt>
   1333c:	str	r7, [fp]
   13340:	add	r2, r4, #8
   13344:	str	r2, [sp, #32]
   13348:	ldr	r1, [r4]
   1334c:	add	fp, r5, r6, lsl #3
   13350:	ldr	lr, [sp, #32]
   13354:	mov	r2, r9
   13358:	ldr	r3, [r4, #4]
   1335c:	ldr	ip, [r5, r6, lsl #3]
   13360:	ldr	r7, [fp, #4]
   13364:	orr	r3, r3, #1
   13368:	str	r1, [sp]
   1336c:	str	r3, [sp, #4]
   13370:	mov	r1, ip
   13374:	str	lr, [sp, #8]
   13378:	mov	r0, r7
   1337c:	ldr	lr, [r4, #40]	; 0x28
   13380:	str	r3, [sp, #28]
   13384:	mov	r3, sl
   13388:	str	lr, [sp, #12]
   1338c:	ldr	lr, [r4, #44]	; 0x2c
   13390:	str	ip, [sp, #24]
   13394:	str	lr, [sp, #16]
   13398:	bl	12578 <__assert_fail@plt+0x10f4>
   1339c:	ldr	ip, [sp, #24]
   133a0:	cmp	ip, r0
   133a4:	bhi	1341c <__assert_fail@plt+0x1f98>
   133a8:	ldr	r3, [pc, #188]	; 1346c <__assert_fail@plt+0x1fe8>
   133ac:	add	r1, r0, #1
   133b0:	str	r1, [r5, r6, lsl #3]
   133b4:	add	r3, pc, r3
   133b8:	cmp	r7, r3
   133bc:	beq	133d0 <__assert_fail@plt+0x1f4c>
   133c0:	mov	r0, r7
   133c4:	str	r1, [sp, #24]
   133c8:	bl	111b4 <free@plt>
   133cc:	ldr	r1, [sp, #24]
   133d0:	mov	r0, r1
   133d4:	str	r1, [sp, #24]
   133d8:	bl	14360 <__assert_fail@plt+0x2edc>
   133dc:	ldr	r3, [sp, #28]
   133e0:	ldr	lr, [sp, #32]
   133e4:	mov	r2, r9
   133e8:	str	r0, [fp, #4]
   133ec:	mov	r7, r0
   133f0:	ldr	ip, [r4]
   133f4:	str	r3, [sp, #4]
   133f8:	mov	r3, sl
   133fc:	str	lr, [sp, #8]
   13400:	str	ip, [sp]
   13404:	ldr	ip, [r4, #40]	; 0x28
   13408:	ldr	r1, [sp, #24]
   1340c:	str	ip, [sp, #12]
   13410:	ldr	ip, [r4, #44]	; 0x2c
   13414:	str	ip, [sp, #16]
   13418:	bl	12578 <__assert_fail@plt+0x10f4>
   1341c:	ldr	r1, [sp, #36]	; 0x24
   13420:	mov	r0, r7
   13424:	str	r1, [r8]
   13428:	add	sp, sp, #44	; 0x2c
   1342c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13430:	lsl	r1, r7, #3
   13434:	mov	r0, #0
   13438:	str	r3, [sp, #24]
   1343c:	bl	143b8 <__assert_fail@plt+0x2f34>
   13440:	ldr	r3, [sp, #24]
   13444:	mov	r5, r0
   13448:	ldm	r3, {r0, r1}
   1344c:	str	r5, [fp]
   13450:	stm	r5, {r0, r1}
   13454:	b	1331c <__assert_fail@plt+0x1e98>
   13458:	bl	11460 <abort@plt>
   1345c:	bl	14574 <__assert_fail@plt+0x30f0>
   13460:	andeq	r4, r1, ip, asr #29
   13464:	andeq	r4, r1, ip, ror lr
   13468:	andeq	r4, r1, r8, lsr lr
   1346c:	strdeq	r4, [r1], -r8
   13470:	push	{r4, r5, r6, lr}
   13474:	mov	r5, r0
   13478:	bl	11358 <__errno_location@plt>
   1347c:	cmp	r5, #0
   13480:	mov	r1, #48	; 0x30
   13484:	mov	r4, r0
   13488:	ldr	r0, [pc, #24]	; 134a8 <__assert_fail@plt+0x2024>
   1348c:	ldr	r6, [r4]
   13490:	add	r0, pc, r0
   13494:	add	r0, r0, #256	; 0x100
   13498:	movne	r0, r5
   1349c:	bl	14534 <__assert_fail@plt+0x30b0>
   134a0:	str	r6, [r4]
   134a4:	pop	{r4, r5, r6, pc}
   134a8:	andeq	r4, r1, ip, lsl sp
   134ac:	cmp	r0, #0
   134b0:	beq	134bc <__assert_fail@plt+0x2038>
   134b4:	ldr	r0, [r0]
   134b8:	bx	lr
   134bc:	ldr	r0, [pc, #12]	; 134d0 <__assert_fail@plt+0x204c>
   134c0:	add	r0, pc, r0
   134c4:	add	r0, r0, #256	; 0x100
   134c8:	ldr	r0, [r0]
   134cc:	bx	lr
   134d0:	andeq	r4, r1, ip, ror #25
   134d4:	cmp	r0, #0
   134d8:	beq	134e4 <__assert_fail@plt+0x2060>
   134dc:	str	r1, [r0]
   134e0:	bx	lr
   134e4:	ldr	r0, [pc, #12]	; 134f8 <__assert_fail@plt+0x2074>
   134e8:	add	r0, pc, r0
   134ec:	add	r0, r0, #256	; 0x100
   134f0:	str	r1, [r0]
   134f4:	bx	lr
   134f8:	andeq	r4, r1, r4, asr #25
   134fc:	cmp	r0, #0
   13500:	movne	r3, r0
   13504:	beq	13534 <__assert_fail@plt+0x20b0>
   13508:	lsr	ip, r1, #5
   1350c:	and	r1, r1, #31
   13510:	add	r3, r3, ip, lsl #2
   13514:	ldr	ip, [r3, #8]
   13518:	lsr	r0, ip, r1
   1351c:	eor	r2, r0, r2
   13520:	and	r0, r0, #1
   13524:	and	r2, r2, #1
   13528:	eor	ip, ip, r2, lsl r1
   1352c:	str	ip, [r3, #8]
   13530:	bx	lr
   13534:	ldr	r3, [pc, #8]	; 13544 <__assert_fail@plt+0x20c0>
   13538:	add	r3, pc, r3
   1353c:	add	r3, r3, #256	; 0x100
   13540:	b	13508 <__assert_fail@plt+0x2084>
   13544:	andeq	r4, r1, r4, ror ip
   13548:	subs	r3, r0, #0
   1354c:	beq	1355c <__assert_fail@plt+0x20d8>
   13550:	ldr	r0, [r3, #4]
   13554:	str	r1, [r3, #4]
   13558:	bx	lr
   1355c:	ldr	r3, [pc, #8]	; 1356c <__assert_fail@plt+0x20e8>
   13560:	add	r3, pc, r3
   13564:	add	r3, r3, #256	; 0x100
   13568:	b	13550 <__assert_fail@plt+0x20cc>
   1356c:	andeq	r4, r1, ip, asr #24
   13570:	cmp	r0, #0
   13574:	push	{r3, lr}
   13578:	beq	1359c <__assert_fail@plt+0x2118>
   1357c:	cmp	r2, #0
   13580:	cmpne	r1, #0
   13584:	mov	r3, #8
   13588:	strne	r1, [r0, #40]	; 0x28
   1358c:	str	r3, [r0]
   13590:	strne	r2, [r0, #44]	; 0x2c
   13594:	popne	{r3, pc}
   13598:	bl	11460 <abort@plt>
   1359c:	ldr	r0, [pc, #8]	; 135ac <__assert_fail@plt+0x2128>
   135a0:	add	r0, pc, r0
   135a4:	add	r0, r0, #256	; 0x100
   135a8:	b	1357c <__assert_fail@plt+0x20f8>
   135ac:	andeq	r4, r1, ip, lsl #24
   135b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135b4:	sub	sp, sp, #24
   135b8:	mov	r7, r0
   135bc:	mov	sl, r1
   135c0:	ldr	r4, [sp, #56]	; 0x38
   135c4:	mov	r9, r2
   135c8:	mov	r8, r3
   135cc:	cmp	r4, #0
   135d0:	beq	13624 <__assert_fail@plt+0x21a0>
   135d4:	bl	11358 <__errno_location@plt>
   135d8:	ldr	r3, [r4]
   135dc:	add	lr, r4, #8
   135e0:	mov	r1, sl
   135e4:	mov	r2, r9
   135e8:	ldr	r6, [r0]
   135ec:	mov	r5, r0
   135f0:	str	r3, [sp]
   135f4:	mov	r0, r7
   135f8:	ldr	ip, [r4, #4]
   135fc:	mov	r3, r8
   13600:	stmib	sp, {ip, lr}
   13604:	ldr	ip, [r4, #40]	; 0x28
   13608:	str	ip, [sp, #12]
   1360c:	ldr	ip, [r4, #44]	; 0x2c
   13610:	str	ip, [sp, #16]
   13614:	bl	12578 <__assert_fail@plt+0x10f4>
   13618:	str	r6, [r5]
   1361c:	add	sp, sp, #24
   13620:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13624:	ldr	r4, [pc, #8]	; 13634 <__assert_fail@plt+0x21b0>
   13628:	add	r4, pc, r4
   1362c:	add	r4, r4, #256	; 0x100
   13630:	b	135d4 <__assert_fail@plt+0x2150>
   13634:	andeq	r4, r1, r4, lsl #23
   13638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1363c:	subs	r4, r3, #0
   13640:	sub	sp, sp, #36	; 0x24
   13644:	mov	r7, r0
   13648:	mov	r6, r1
   1364c:	mov	r5, r2
   13650:	beq	1370c <__assert_fail@plt+0x2288>
   13654:	bl	11358 <__errno_location@plt>
   13658:	ldr	r3, [r4]
   1365c:	ldr	sl, [r4, #4]
   13660:	add	r9, r4, #8
   13664:	mov	r8, r0
   13668:	mov	r0, #0
   1366c:	ldr	r2, [r8]
   13670:	cmp	r5, r0
   13674:	orreq	sl, sl, #1
   13678:	str	r9, [sp, #8]
   1367c:	mov	r1, r0
   13680:	stm	sp, {r3, sl}
   13684:	mov	r3, r6
   13688:	ldr	ip, [r4, #40]	; 0x28
   1368c:	str	r2, [sp, #28]
   13690:	mov	r2, r7
   13694:	str	ip, [sp, #12]
   13698:	ldr	ip, [r4, #44]	; 0x2c
   1369c:	str	ip, [sp, #16]
   136a0:	bl	12578 <__assert_fail@plt+0x10f4>
   136a4:	add	r1, r0, #1
   136a8:	mov	fp, r0
   136ac:	str	r1, [sp, #24]
   136b0:	mov	r0, r1
   136b4:	bl	14360 <__assert_fail@plt+0x2edc>
   136b8:	ldr	lr, [r4]
   136bc:	str	sl, [sp, #4]
   136c0:	mov	r3, r6
   136c4:	str	r9, [sp, #8]
   136c8:	mov	r2, r7
   136cc:	str	lr, [sp]
   136d0:	ldr	lr, [r4, #40]	; 0x28
   136d4:	ldr	r1, [sp, #24]
   136d8:	str	lr, [sp, #12]
   136dc:	ldr	lr, [r4, #44]	; 0x2c
   136e0:	str	lr, [sp, #16]
   136e4:	str	r0, [sp, #24]
   136e8:	bl	12578 <__assert_fail@plt+0x10f4>
   136ec:	ldr	r3, [sp, #28]
   136f0:	cmp	r5, #0
   136f4:	str	r3, [r8]
   136f8:	ldr	ip, [sp, #24]
   136fc:	strne	fp, [r5]
   13700:	mov	r0, ip
   13704:	add	sp, sp, #36	; 0x24
   13708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1370c:	ldr	r4, [pc, #8]	; 1371c <__assert_fail@plt+0x2298>
   13710:	add	r4, pc, r4
   13714:	add	r4, r4, #256	; 0x100
   13718:	b	13654 <__assert_fail@plt+0x21d0>
   1371c:	muleq	r1, ip, sl
   13720:	mov	r3, r2
   13724:	mov	r2, #0
   13728:	b	13638 <__assert_fail@plt+0x21b4>
   1372c:	ldr	r2, [pc, #152]	; 137cc <__assert_fail@plt+0x2348>
   13730:	push	{r3, r4, r5, r6, r7, lr}
   13734:	add	r2, pc, r2
   13738:	ldr	r3, [pc, #144]	; 137d0 <__assert_fail@plt+0x234c>
   1373c:	ldr	r6, [r2]
   13740:	add	r3, pc, r3
   13744:	cmp	r6, #1
   13748:	ldr	r7, [r3]
   1374c:	movhi	r4, #1
   13750:	movhi	r5, r7
   13754:	bls	13770 <__assert_fail@plt+0x22ec>
   13758:	ldr	r0, [r5, #12]
   1375c:	add	r4, r4, #1
   13760:	bl	111b4 <free@plt>
   13764:	cmp	r4, r6
   13768:	add	r5, r5, #8
   1376c:	bne	13758 <__assert_fail@plt+0x22d4>
   13770:	ldr	r4, [pc, #92]	; 137d4 <__assert_fail@plt+0x2350>
   13774:	ldr	r0, [r7, #4]
   13778:	add	r4, pc, r4
   1377c:	cmp	r0, r4
   13780:	beq	13798 <__assert_fail@plt+0x2314>
   13784:	bl	111b4 <free@plt>
   13788:	ldr	r3, [pc, #72]	; 137d8 <__assert_fail@plt+0x2354>
   1378c:	mov	r2, #256	; 0x100
   13790:	add	r3, pc, r3
   13794:	stmib	r3, {r2, r4}
   13798:	ldr	r4, [pc, #60]	; 137dc <__assert_fail@plt+0x2358>
   1379c:	add	r4, pc, r4
   137a0:	add	r5, r4, #4
   137a4:	cmp	r7, r5
   137a8:	beq	137b8 <__assert_fail@plt+0x2334>
   137ac:	mov	r0, r7
   137b0:	bl	111b4 <free@plt>
   137b4:	str	r5, [r4]
   137b8:	ldr	r3, [pc, #32]	; 137e0 <__assert_fail@plt+0x235c>
   137bc:	mov	r2, #1
   137c0:	add	r3, pc, r3
   137c4:	str	r2, [r3]
   137c8:	pop	{r3, r4, r5, r6, r7, pc}
   137cc:	andeq	r4, r1, r8, lsr #20
   137d0:	andeq	r4, r1, r0, asr sl
   137d4:	andeq	r4, r1, r4, lsr sl
   137d8:	andeq	r4, r1, r0, lsl #20
   137dc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   137e0:	muleq	r1, ip, r9
   137e4:	ldr	r3, [pc, #12]	; 137f8 <__assert_fail@plt+0x2374>
   137e8:	mvn	r2, #0
   137ec:	add	r3, pc, r3
   137f0:	add	r3, r3, #256	; 0x100
   137f4:	b	132a0 <__assert_fail@plt+0x1e1c>
   137f8:	andeq	r4, r1, r0, asr #19
   137fc:	ldr	r3, [pc, #8]	; 1380c <__assert_fail@plt+0x2388>
   13800:	add	r3, pc, r3
   13804:	add	r3, r3, #256	; 0x100
   13808:	b	132a0 <__assert_fail@plt+0x1e1c>
   1380c:	andeq	r4, r1, ip, lsr #19
   13810:	mov	r1, r0
   13814:	mov	r0, #0
   13818:	b	137e4 <__assert_fail@plt+0x2360>
   1381c:	mov	r2, r1
   13820:	mov	r1, r0
   13824:	mov	r0, #0
   13828:	b	137fc <__assert_fail@plt+0x2378>
   1382c:	ldr	r3, [pc, #92]	; 13890 <__assert_fail@plt+0x240c>
   13830:	ldr	ip, [pc, #92]	; 13894 <__assert_fail@plt+0x2410>
   13834:	add	r3, pc, r3
   13838:	push	{r4, r5, r6, r7, lr}
   1383c:	sub	sp, sp, #60	; 0x3c
   13840:	ldr	r4, [r3, ip]
   13844:	add	r5, sp, #4
   13848:	mov	r7, r2
   1384c:	mov	r6, r0
   13850:	mov	r0, r5
   13854:	ldr	r3, [r4]
   13858:	str	r3, [sp, #52]	; 0x34
   1385c:	bl	123c0 <__assert_fail@plt+0xf3c>
   13860:	mov	r3, r5
   13864:	mvn	r2, #0
   13868:	mov	r0, r6
   1386c:	mov	r1, r7
   13870:	bl	132a0 <__assert_fail@plt+0x1e1c>
   13874:	ldr	r2, [sp, #52]	; 0x34
   13878:	ldr	r3, [r4]
   1387c:	cmp	r2, r3
   13880:	bne	1388c <__assert_fail@plt+0x2408>
   13884:	add	sp, sp, #60	; 0x3c
   13888:	pop	{r4, r5, r6, r7, pc}
   1388c:	bl	11208 <__stack_chk_fail@plt>
   13890:	andeq	r4, r1, r4, asr #15
   13894:	andeq	r0, r0, r4, lsr #2
   13898:	ldr	ip, [pc, #96]	; 13900 <__assert_fail@plt+0x247c>
   1389c:	push	{r4, r5, r6, r7, r8, lr}
   138a0:	add	ip, pc, ip
   138a4:	ldr	lr, [pc, #88]	; 13904 <__assert_fail@plt+0x2480>
   138a8:	sub	sp, sp, #56	; 0x38
   138ac:	mov	r8, r3
   138b0:	add	r5, sp, #4
   138b4:	mov	r7, r2
   138b8:	mov	r6, r0
   138bc:	ldr	r4, [ip, lr]
   138c0:	mov	r0, r5
   138c4:	ldr	r3, [r4]
   138c8:	str	r3, [sp, #52]	; 0x34
   138cc:	bl	123c0 <__assert_fail@plt+0xf3c>
   138d0:	mov	r2, r8
   138d4:	mov	r3, r5
   138d8:	mov	r0, r6
   138dc:	mov	r1, r7
   138e0:	bl	132a0 <__assert_fail@plt+0x1e1c>
   138e4:	ldr	r2, [sp, #52]	; 0x34
   138e8:	ldr	r3, [r4]
   138ec:	cmp	r2, r3
   138f0:	bne	138fc <__assert_fail@plt+0x2478>
   138f4:	add	sp, sp, #56	; 0x38
   138f8:	pop	{r4, r5, r6, r7, r8, pc}
   138fc:	bl	11208 <__stack_chk_fail@plt>
   13900:	andeq	r4, r1, r8, asr r7
   13904:	andeq	r0, r0, r4, lsr #2
   13908:	mov	r2, r1
   1390c:	mov	r1, r0
   13910:	mov	r0, #0
   13914:	b	1382c <__assert_fail@plt+0x23a8>
   13918:	mov	ip, r1
   1391c:	mov	r3, r2
   13920:	mov	r1, r0
   13924:	mov	r2, ip
   13928:	mov	r0, #0
   1392c:	b	13898 <__assert_fail@plt+0x2414>
   13930:	push	{r4, r5, r6, r7, r8, lr}
   13934:	mov	r5, r2
   13938:	ldr	lr, [pc, #136]	; 139c8 <__assert_fail@plt+0x2544>
   1393c:	mov	r7, r0
   13940:	mov	r6, r1
   13944:	ldr	r4, [pc, #128]	; 139cc <__assert_fail@plt+0x2548>
   13948:	add	lr, pc, lr
   1394c:	sub	sp, sp, #56	; 0x38
   13950:	add	lr, lr, #256	; 0x100
   13954:	ldr	r8, [pc, #116]	; 139d0 <__assert_fail@plt+0x254c>
   13958:	add	r4, pc, r4
   1395c:	add	ip, sp, #4
   13960:	ldm	lr!, {r0, r1, r2, r3}
   13964:	ldr	r4, [r4, r8]
   13968:	stmia	ip!, {r0, r1, r2, r3}
   1396c:	ldm	lr!, {r0, r1, r2, r3}
   13970:	ldr	r8, [r4]
   13974:	stmia	ip!, {r0, r1, r2, r3}
   13978:	ldm	lr, {r0, r1, r2, r3}
   1397c:	str	r8, [sp, #52]	; 0x34
   13980:	stm	ip, {r0, r1, r2, r3}
   13984:	mov	r1, r5
   13988:	add	r5, sp, #4
   1398c:	mov	r2, #1
   13990:	mov	r0, r5
   13994:	bl	134fc <__assert_fail@plt+0x2078>
   13998:	mov	r2, r6
   1399c:	mov	r3, r5
   139a0:	mov	r1, r7
   139a4:	mov	r0, #0
   139a8:	bl	132a0 <__assert_fail@plt+0x1e1c>
   139ac:	ldr	r2, [sp, #52]	; 0x34
   139b0:	ldr	r3, [r4]
   139b4:	cmp	r2, r3
   139b8:	bne	139c4 <__assert_fail@plt+0x2540>
   139bc:	add	sp, sp, #56	; 0x38
   139c0:	pop	{r4, r5, r6, r7, r8, pc}
   139c4:	bl	11208 <__stack_chk_fail@plt>
   139c8:	andeq	r4, r1, r4, ror #16
   139cc:	andeq	r4, r1, r0, lsr #13
   139d0:	andeq	r0, r0, r4, lsr #2
   139d4:	mov	r2, r1
   139d8:	mvn	r1, #0
   139dc:	b	13930 <__assert_fail@plt+0x24ac>
   139e0:	mov	r1, #58	; 0x3a
   139e4:	b	139d4 <__assert_fail@plt+0x2550>
   139e8:	mov	r2, #58	; 0x3a
   139ec:	b	13930 <__assert_fail@plt+0x24ac>
   139f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139f4:	mov	r5, r2
   139f8:	ldr	lr, [pc, #144]	; 13a90 <__assert_fail@plt+0x260c>
   139fc:	mov	r8, r0
   13a00:	mov	r9, r1
   13a04:	mov	r7, r3
   13a08:	add	lr, pc, lr
   13a0c:	ldr	r4, [pc, #128]	; 13a94 <__assert_fail@plt+0x2610>
   13a10:	add	lr, lr, #256	; 0x100
   13a14:	sub	sp, sp, #56	; 0x38
   13a18:	ldr	sl, [pc, #120]	; 13a98 <__assert_fail@plt+0x2614>
   13a1c:	add	r4, pc, r4
   13a20:	ldm	lr!, {r0, r1, r2, r3}
   13a24:	add	ip, sp, #4
   13a28:	ldr	r4, [r4, sl]
   13a2c:	ldr	r6, [sp, #88]	; 0x58
   13a30:	stmia	ip!, {r0, r1, r2, r3}
   13a34:	ldm	lr!, {r0, r1, r2, r3}
   13a38:	ldr	sl, [r4]
   13a3c:	stmia	ip!, {r0, r1, r2, r3}
   13a40:	ldm	lr, {r0, r1, r2, r3}
   13a44:	str	sl, [sp, #52]	; 0x34
   13a48:	stm	ip, {r0, r1, r2, r3}
   13a4c:	mov	r2, r5
   13a50:	add	r5, sp, #4
   13a54:	mov	r1, r9
   13a58:	mov	r0, r5
   13a5c:	bl	13570 <__assert_fail@plt+0x20ec>
   13a60:	mov	r2, r6
   13a64:	mov	r3, r5
   13a68:	mov	r0, r8
   13a6c:	mov	r1, r7
   13a70:	bl	132a0 <__assert_fail@plt+0x1e1c>
   13a74:	ldr	r2, [sp, #52]	; 0x34
   13a78:	ldr	r3, [r4]
   13a7c:	cmp	r2, r3
   13a80:	bne	13a8c <__assert_fail@plt+0x2608>
   13a84:	add	sp, sp, #56	; 0x38
   13a88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a8c:	bl	11208 <__stack_chk_fail@plt>
   13a90:	andeq	r4, r1, r4, lsr #15
   13a94:	ldrdeq	r4, [r1], -ip
   13a98:	andeq	r0, r0, r4, lsr #2
   13a9c:	push	{lr}		; (str lr, [sp, #-4]!)
   13aa0:	sub	sp, sp, #12
   13aa4:	mvn	ip, #0
   13aa8:	str	ip, [sp]
   13aac:	bl	139f0 <__assert_fail@plt+0x256c>
   13ab0:	add	sp, sp, #12
   13ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab8:	mov	ip, r1
   13abc:	mov	r3, r2
   13ac0:	mov	r1, r0
   13ac4:	mov	r2, ip
   13ac8:	mov	r0, #0
   13acc:	b	13a9c <__assert_fail@plt+0x2618>
   13ad0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ad4:	sub	sp, sp, #12
   13ad8:	mov	lr, r1
   13adc:	mov	ip, r2
   13ae0:	mov	r1, r0
   13ae4:	str	r3, [sp]
   13ae8:	mov	r2, lr
   13aec:	mov	r3, ip
   13af0:	mov	r0, #0
   13af4:	bl	139f0 <__assert_fail@plt+0x256c>
   13af8:	add	sp, sp, #12
   13afc:	pop	{pc}		; (ldr pc, [sp], #4)
   13b00:	ldr	r3, [pc, #12]	; 13b14 <__assert_fail@plt+0x2690>
   13b04:	ldr	ip, [pc, #12]	; 13b18 <__assert_fail@plt+0x2694>
   13b08:	add	r3, pc, r3
   13b0c:	ldr	r3, [r3, ip]
   13b10:	b	132a0 <__assert_fail@plt+0x1e1c>
   13b14:	strdeq	r4, [r1], -r0
   13b18:	andeq	r0, r0, r0, lsr #2
   13b1c:	mov	r2, r1
   13b20:	mov	r1, r0
   13b24:	mov	r0, #0
   13b28:	b	13b00 <__assert_fail@plt+0x267c>
   13b2c:	mvn	r2, #0
   13b30:	b	13b00 <__assert_fail@plt+0x267c>
   13b34:	mov	r1, r0
   13b38:	mov	r0, #0
   13b3c:	b	13b2c <__assert_fail@plt+0x26a8>
   13b40:	ldr	ip, [pc, #580]	; 13d8c <__assert_fail@plt+0x2908>
   13b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b48:	mov	sl, r0
   13b4c:	ldr	r0, [pc, #572]	; 13d90 <__assert_fail@plt+0x290c>
   13b50:	add	ip, pc, ip
   13b54:	mov	r9, r3
   13b58:	sub	sp, sp, #148	; 0x94
   13b5c:	mov	r3, ip
   13b60:	mov	r4, r1
   13b64:	ldr	r0, [ip, r0]
   13b68:	mov	r5, r2
   13b6c:	ldr	r7, [sp, #184]	; 0xb8
   13b70:	ldr	r3, [r0]
   13b74:	str	r0, [sp, #20]
   13b78:	str	r3, [sp, #140]	; 0x8c
   13b7c:	bl	11358 <__errno_location@plt>
   13b80:	str	r0, [sp, #16]
   13b84:	mov	r0, sl
   13b88:	bl	11334 <strlen@plt>
   13b8c:	ldr	r1, [sp, #16]
   13b90:	add	r3, r4, r7
   13b94:	ldr	r1, [r1]
   13b98:	str	r1, [sp, #28]
   13b9c:	cmp	r0, r3
   13ba0:	bcc	13d44 <__assert_fail@plt+0x28c0>
   13ba4:	rsb	r0, r7, r0
   13ba8:	rsb	r4, r4, r0
   13bac:	add	r2, sl, r4
   13bb0:	str	r2, [sp, #12]
   13bb4:	ldrb	r3, [sl, r4]
   13bb8:	cmp	r3, #88	; 0x58
   13bbc:	mov	r3, #0
   13bc0:	bne	13bd4 <__assert_fail@plt+0x2750>
   13bc4:	ldrb	r1, [r2, #1]!
   13bc8:	add	r3, r3, #1
   13bcc:	cmp	r1, #88	; 0x58
   13bd0:	beq	13bc4 <__assert_fail@plt+0x2740>
   13bd4:	cmp	r7, r3
   13bd8:	bhi	13d44 <__assert_fail@plt+0x28c0>
   13bdc:	mov	r0, #0
   13be0:	mov	r1, r7
   13be4:	bl	14bbc <__assert_fail@plt+0x3738>
   13be8:	subs	r4, r0, #0
   13bec:	beq	13d80 <__assert_fail@plt+0x28fc>
   13bf0:	bic	r5, r5, #195	; 0xc3
   13bf4:	ldr	r2, [sp, #12]
   13bf8:	orr	r5, r5, #194	; 0xc2
   13bfc:	str	r5, [sp, #24]
   13c00:	ldr	r5, [pc, #396]	; 13d94 <__assert_fail@plt+0x2910>
   13c04:	movw	r8, #41720	; 0xa2f8
   13c08:	add	r6, r2, r7
   13c0c:	movt	r8, #3
   13c10:	add	r5, pc, r5
   13c14:	cmp	r7, #0
   13c18:	beq	13c40 <__assert_fail@plt+0x27bc>
   13c1c:	ldr	fp, [sp, #12]
   13c20:	mov	r3, #0
   13c24:	mov	r0, r4
   13c28:	mov	r2, #61	; 0x3d
   13c2c:	bl	14bdc <__assert_fail@plt+0x3758>
   13c30:	ldrb	r3, [r5, r0]
   13c34:	strb	r3, [fp], #1
   13c38:	cmp	fp, r6
   13c3c:	bne	13c20 <__assert_fail@plt+0x279c>
   13c40:	cmp	r9, #1
   13c44:	beq	13c7c <__assert_fail@plt+0x27f8>
   13c48:	cmp	r9, #2
   13c4c:	beq	13cd8 <__assert_fail@plt+0x2854>
   13c50:	cmp	r9, #0
   13c54:	beq	13cc4 <__assert_fail@plt+0x2840>
   13c58:	ldr	r3, [pc, #312]	; 13d98 <__assert_fail@plt+0x2914>
   13c5c:	movw	r2, #289	; 0x121
   13c60:	ldr	r0, [pc, #308]	; 13d9c <__assert_fail@plt+0x2918>
   13c64:	ldr	r1, [pc, #308]	; 13da0 <__assert_fail@plt+0x291c>
   13c68:	add	r3, pc, r3
   13c6c:	add	r0, pc, r0
   13c70:	add	r3, r3, #64	; 0x40
   13c74:	add	r1, pc, r1
   13c78:	bl	11484 <__assert_fail@plt>
   13c7c:	mov	r0, sl
   13c80:	mov	r1, #448	; 0x1c0
   13c84:	bl	11370 <mkdir@plt>
   13c88:	cmp	r0, #0
   13c8c:	bge	13d6c <__assert_fail@plt+0x28e8>
   13c90:	ldr	r2, [sp, #16]
   13c94:	ldr	r3, [r2]
   13c98:	cmp	r3, #17
   13c9c:	bne	13d00 <__assert_fail@plt+0x287c>
   13ca0:	subs	r8, r8, #1
   13ca4:	bne	13c14 <__assert_fail@plt+0x2790>
   13ca8:	mov	r0, r4
   13cac:	bl	14e04 <__assert_fail@plt+0x3980>
   13cb0:	ldr	r1, [sp, #16]
   13cb4:	mov	r3, #17
   13cb8:	mvn	r0, #0
   13cbc:	str	r3, [r1]
   13cc0:	b	13d28 <__assert_fail@plt+0x28a4>
   13cc4:	mov	r0, sl
   13cc8:	ldr	r1, [sp, #24]
   13ccc:	mov	r2, #384	; 0x180
   13cd0:	bl	112a4 <open64@plt>
   13cd4:	b	13c88 <__assert_fail@plt+0x2804>
   13cd8:	mov	r0, #3
   13cdc:	mov	r1, sl
   13ce0:	add	r2, sp, #32
   13ce4:	bl	11478 <__lxstat64@plt>
   13ce8:	cmp	r0, #0
   13cec:	bge	13ca0 <__assert_fail@plt+0x281c>
   13cf0:	ldr	r1, [sp, #16]
   13cf4:	ldr	r3, [r1]
   13cf8:	cmp	r3, #2
   13cfc:	beq	13d58 <__assert_fail@plt+0x28d4>
   13d00:	mvn	r2, #0
   13d04:	mov	r0, r4
   13d08:	str	r2, [sp, #8]
   13d0c:	str	r3, [sp, #4]
   13d10:	bl	14e04 <__assert_fail@plt+0x3980>
   13d14:	ldr	r3, [sp, #4]
   13d18:	ldr	r1, [sp, #16]
   13d1c:	str	r3, [r1]
   13d20:	ldr	r2, [sp, #8]
   13d24:	mov	r0, r2
   13d28:	ldr	r2, [sp, #20]
   13d2c:	ldr	r1, [sp, #140]	; 0x8c
   13d30:	ldr	r3, [r2]
   13d34:	cmp	r1, r3
   13d38:	bne	13d88 <__assert_fail@plt+0x2904>
   13d3c:	add	sp, sp, #148	; 0x94
   13d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d44:	ldr	r1, [sp, #16]
   13d48:	mov	r3, #22
   13d4c:	mvn	r0, #0
   13d50:	str	r3, [r1]
   13d54:	b	13d28 <__assert_fail@plt+0x28a4>
   13d58:	ldr	r2, [sp, #28]
   13d5c:	str	r2, [r1]
   13d60:	mov	r3, r2
   13d64:	mov	r2, #0
   13d68:	b	13d04 <__assert_fail@plt+0x2880>
   13d6c:	ldr	r3, [sp, #28]
   13d70:	mov	r2, r0
   13d74:	ldr	r1, [sp, #16]
   13d78:	str	r3, [r1]
   13d7c:	b	13d04 <__assert_fail@plt+0x2880>
   13d80:	mvn	r0, #0
   13d84:	b	13d28 <__assert_fail@plt+0x28a4>
   13d88:	bl	11208 <__stack_chk_fail@plt>
   13d8c:	andeq	r4, r1, r8, lsr #9
   13d90:	andeq	r0, r0, r4, lsr #2
   13d94:	andeq	r3, r0, r4, lsl #5
   13d98:	andeq	r3, r0, ip, lsr #4
   13d9c:	andeq	r3, r0, ip, ror r2
   13da0:	muleq	r0, r8, r2
   13da4:	push	{lr}		; (str lr, [sp, #-4]!)
   13da8:	sub	sp, sp, #12
   13dac:	mov	ip, #6
   13db0:	str	ip, [sp]
   13db4:	bl	13b40 <__assert_fail@plt+0x26bc>
   13db8:	add	sp, sp, #12
   13dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc0:	push	{r4, r5, r6, r7, lr}
   13dc4:	cmp	r1, #0
   13dc8:	sub	sp, sp, #36	; 0x24
   13dcc:	ldr	r7, [pc, #896]	; 14154 <__assert_fail@plt+0x2cd0>
   13dd0:	mov	ip, r3
   13dd4:	mov	r5, r0
   13dd8:	add	r7, pc, r7
   13ddc:	ldr	r4, [sp, #56]	; 0x38
   13de0:	ldr	r6, [sp, #60]	; 0x3c
   13de4:	beq	14128 <__assert_fail@plt+0x2ca4>
   13de8:	str	r2, [sp]
   13dec:	mov	r3, r1
   13df0:	ldr	r2, [pc, #864]	; 14158 <__assert_fail@plt+0x2cd4>
   13df4:	mov	r1, #1
   13df8:	str	ip, [sp, #4]
   13dfc:	add	r2, pc, r2
   13e00:	bl	113c4 <__fprintf_chk@plt>
   13e04:	ldr	r1, [pc, #848]	; 1415c <__assert_fail@plt+0x2cd8>
   13e08:	mov	r2, #5
   13e0c:	mov	r0, #0
   13e10:	add	r1, pc, r1
   13e14:	bl	111fc <dcgettext@plt>
   13e18:	ldr	r2, [pc, #832]	; 14160 <__assert_fail@plt+0x2cdc>
   13e1c:	movw	ip, #2013	; 0x7dd
   13e20:	mov	r1, #1
   13e24:	ldr	r2, [r7, r2]
   13e28:	str	ip, [sp]
   13e2c:	mov	r3, r0
   13e30:	mov	r0, r5
   13e34:	bl	113c4 <__fprintf_chk@plt>
   13e38:	ldr	r1, [pc, #804]	; 14164 <__assert_fail@plt+0x2ce0>
   13e3c:	mov	r0, #0
   13e40:	mov	r2, #5
   13e44:	add	r1, pc, r1
   13e48:	bl	111fc <dcgettext@plt>
   13e4c:	mov	r1, r5
   13e50:	bl	1116c <fputs_unlocked@plt>
   13e54:	cmp	r6, #9
   13e58:	addls	pc, pc, r6, lsl #2
   13e5c:	b	14144 <__assert_fail@plt+0x2cc0>
   13e60:	b	13ef4 <__assert_fail@plt+0x2a70>
   13e64:	b	13ef8 <__assert_fail@plt+0x2a74>
   13e68:	b	13f28 <__assert_fail@plt+0x2aa4>
   13e6c:	b	13f5c <__assert_fail@plt+0x2ad8>
   13e70:	b	13f98 <__assert_fail@plt+0x2b14>
   13e74:	b	13fd8 <__assert_fail@plt+0x2b54>
   13e78:	b	14020 <__assert_fail@plt+0x2b9c>
   13e7c:	b	14070 <__assert_fail@plt+0x2bec>
   13e80:	b	140c8 <__assert_fail@plt+0x2c44>
   13e84:	b	13e88 <__assert_fail@plt+0x2a04>
   13e88:	ldr	r1, [pc, #728]	; 14168 <__assert_fail@plt+0x2ce4>
   13e8c:	mov	r0, #0
   13e90:	add	r1, pc, r1
   13e94:	mov	r2, #5
   13e98:	bl	111fc <dcgettext@plt>
   13e9c:	ldm	r4, {r3, ip}
   13ea0:	mov	r1, #1
   13ea4:	str	ip, [sp]
   13ea8:	ldr	ip, [r4, #8]
   13eac:	str	ip, [sp, #4]
   13eb0:	ldr	ip, [r4, #12]
   13eb4:	str	ip, [sp, #8]
   13eb8:	ldr	ip, [r4, #16]
   13ebc:	str	ip, [sp, #12]
   13ec0:	ldr	ip, [r4, #20]
   13ec4:	str	ip, [sp, #16]
   13ec8:	ldr	ip, [r4, #24]
   13ecc:	str	ip, [sp, #20]
   13ed0:	ldr	ip, [r4, #28]
   13ed4:	str	ip, [sp, #24]
   13ed8:	ldr	ip, [r4, #32]
   13edc:	str	ip, [sp, #28]
   13ee0:	mov	r2, r0
   13ee4:	mov	r0, r5
   13ee8:	bl	113c4 <__fprintf_chk@plt>
   13eec:	add	sp, sp, #36	; 0x24
   13ef0:	pop	{r4, r5, r6, r7, pc}
   13ef4:	bl	11460 <abort@plt>
   13ef8:	ldr	r1, [pc, #620]	; 1416c <__assert_fail@plt+0x2ce8>
   13efc:	mov	r2, #5
   13f00:	mov	r0, #0
   13f04:	add	r1, pc, r1
   13f08:	bl	111fc <dcgettext@plt>
   13f0c:	ldr	r3, [r4]
   13f10:	mov	r1, #1
   13f14:	mov	r2, r0
   13f18:	mov	r0, r5
   13f1c:	add	sp, sp, #36	; 0x24
   13f20:	pop	{r4, r5, r6, r7, lr}
   13f24:	b	113c4 <__fprintf_chk@plt>
   13f28:	ldr	r1, [pc, #576]	; 14170 <__assert_fail@plt+0x2cec>
   13f2c:	mov	r2, #5
   13f30:	mov	r0, #0
   13f34:	add	r1, pc, r1
   13f38:	bl	111fc <dcgettext@plt>
   13f3c:	ldm	r4, {r3, ip}
   13f40:	mov	r1, #1
   13f44:	str	ip, [sp, #56]	; 0x38
   13f48:	mov	r2, r0
   13f4c:	mov	r0, r5
   13f50:	add	sp, sp, #36	; 0x24
   13f54:	pop	{r4, r5, r6, r7, lr}
   13f58:	b	113c4 <__fprintf_chk@plt>
   13f5c:	ldr	r1, [pc, #528]	; 14174 <__assert_fail@plt+0x2cf0>
   13f60:	mov	r2, #5
   13f64:	mov	r0, #0
   13f68:	add	r1, pc, r1
   13f6c:	bl	111fc <dcgettext@plt>
   13f70:	ldm	r4, {r3, ip}
   13f74:	mov	r1, #1
   13f78:	str	ip, [sp, #56]	; 0x38
   13f7c:	ldr	ip, [r4, #8]
   13f80:	str	ip, [sp, #60]	; 0x3c
   13f84:	mov	r2, r0
   13f88:	mov	r0, r5
   13f8c:	add	sp, sp, #36	; 0x24
   13f90:	pop	{r4, r5, r6, r7, lr}
   13f94:	b	113c4 <__fprintf_chk@plt>
   13f98:	ldr	r1, [pc, #472]	; 14178 <__assert_fail@plt+0x2cf4>
   13f9c:	mov	r2, #5
   13fa0:	mov	r0, #0
   13fa4:	add	r1, pc, r1
   13fa8:	bl	111fc <dcgettext@plt>
   13fac:	ldm	r4, {r3, ip}
   13fb0:	mov	r1, #1
   13fb4:	str	ip, [sp]
   13fb8:	ldr	ip, [r4, #8]
   13fbc:	str	ip, [sp, #4]
   13fc0:	ldr	ip, [r4, #12]
   13fc4:	str	ip, [sp, #8]
   13fc8:	mov	r2, r0
   13fcc:	mov	r0, r5
   13fd0:	bl	113c4 <__fprintf_chk@plt>
   13fd4:	b	13eec <__assert_fail@plt+0x2a68>
   13fd8:	ldr	r1, [pc, #412]	; 1417c <__assert_fail@plt+0x2cf8>
   13fdc:	mov	r2, #5
   13fe0:	mov	r0, #0
   13fe4:	add	r1, pc, r1
   13fe8:	bl	111fc <dcgettext@plt>
   13fec:	ldm	r4, {r3, ip}
   13ff0:	mov	r1, #1
   13ff4:	str	ip, [sp]
   13ff8:	ldr	ip, [r4, #8]
   13ffc:	str	ip, [sp, #4]
   14000:	ldr	ip, [r4, #12]
   14004:	str	ip, [sp, #8]
   14008:	ldr	ip, [r4, #16]
   1400c:	str	ip, [sp, #12]
   14010:	mov	r2, r0
   14014:	mov	r0, r5
   14018:	bl	113c4 <__fprintf_chk@plt>
   1401c:	b	13eec <__assert_fail@plt+0x2a68>
   14020:	ldr	r1, [pc, #344]	; 14180 <__assert_fail@plt+0x2cfc>
   14024:	mov	r2, #5
   14028:	mov	r0, #0
   1402c:	add	r1, pc, r1
   14030:	bl	111fc <dcgettext@plt>
   14034:	ldm	r4, {r3, ip}
   14038:	mov	r1, #1
   1403c:	str	ip, [sp]
   14040:	ldr	ip, [r4, #8]
   14044:	str	ip, [sp, #4]
   14048:	ldr	ip, [r4, #12]
   1404c:	str	ip, [sp, #8]
   14050:	ldr	ip, [r4, #16]
   14054:	str	ip, [sp, #12]
   14058:	ldr	ip, [r4, #20]
   1405c:	str	ip, [sp, #16]
   14060:	mov	r2, r0
   14064:	mov	r0, r5
   14068:	bl	113c4 <__fprintf_chk@plt>
   1406c:	b	13eec <__assert_fail@plt+0x2a68>
   14070:	ldr	r1, [pc, #268]	; 14184 <__assert_fail@plt+0x2d00>
   14074:	mov	r2, #5
   14078:	mov	r0, #0
   1407c:	add	r1, pc, r1
   14080:	bl	111fc <dcgettext@plt>
   14084:	ldm	r4, {r3, ip}
   14088:	mov	r1, #1
   1408c:	str	ip, [sp]
   14090:	ldr	ip, [r4, #8]
   14094:	str	ip, [sp, #4]
   14098:	ldr	ip, [r4, #12]
   1409c:	str	ip, [sp, #8]
   140a0:	ldr	ip, [r4, #16]
   140a4:	str	ip, [sp, #12]
   140a8:	ldr	ip, [r4, #20]
   140ac:	str	ip, [sp, #16]
   140b0:	ldr	ip, [r4, #24]
   140b4:	str	ip, [sp, #20]
   140b8:	mov	r2, r0
   140bc:	mov	r0, r5
   140c0:	bl	113c4 <__fprintf_chk@plt>
   140c4:	b	13eec <__assert_fail@plt+0x2a68>
   140c8:	ldr	r1, [pc, #184]	; 14188 <__assert_fail@plt+0x2d04>
   140cc:	mov	r2, #5
   140d0:	mov	r0, #0
   140d4:	add	r1, pc, r1
   140d8:	bl	111fc <dcgettext@plt>
   140dc:	ldm	r4, {r3, ip}
   140e0:	mov	r1, #1
   140e4:	str	ip, [sp]
   140e8:	ldr	ip, [r4, #8]
   140ec:	str	ip, [sp, #4]
   140f0:	ldr	ip, [r4, #12]
   140f4:	str	ip, [sp, #8]
   140f8:	ldr	ip, [r4, #16]
   140fc:	str	ip, [sp, #12]
   14100:	ldr	ip, [r4, #20]
   14104:	str	ip, [sp, #16]
   14108:	ldr	ip, [r4, #24]
   1410c:	str	ip, [sp, #20]
   14110:	ldr	ip, [r4, #28]
   14114:	str	ip, [sp, #24]
   14118:	mov	r2, r0
   1411c:	mov	r0, r5
   14120:	bl	113c4 <__fprintf_chk@plt>
   14124:	b	13eec <__assert_fail@plt+0x2a68>
   14128:	str	r3, [sp]
   1412c:	mov	r3, r2
   14130:	ldr	r2, [pc, #84]	; 1418c <__assert_fail@plt+0x2d08>
   14134:	mov	r1, #1
   14138:	add	r2, pc, r2
   1413c:	bl	113c4 <__fprintf_chk@plt>
   14140:	b	13e04 <__assert_fail@plt+0x2980>
   14144:	ldr	r1, [pc, #68]	; 14190 <__assert_fail@plt+0x2d0c>
   14148:	mov	r0, #0
   1414c:	add	r1, pc, r1
   14150:	b	13e94 <__assert_fail@plt+0x2a10>
   14154:	andeq	r4, r1, r0, lsr #4
   14158:	andeq	r3, r0, r0, lsr #2
   1415c:	andeq	r3, r0, r0, lsr #2
   14160:	andeq	r0, r0, ip, asr #2
   14164:	strdeq	r3, [r0], -r0
   14168:	andeq	r3, r0, ip, ror r2
   1416c:	strdeq	r3, [r0], -ip
   14170:	ldrdeq	r3, [r0], -ip
   14174:	andeq	r3, r0, r0, asr #1
   14178:	andeq	r3, r0, r0, lsr #1
   1417c:	andeq	r3, r0, r0, lsl #1
   14180:	andeq	r3, r0, ip, asr r0
   14184:	andeq	r3, r0, r4, lsr r0
   14188:	andeq	r3, r0, r8
   1418c:	strdeq	r2, [r0], -r0
   14190:	strdeq	r2, [r0], -r4
   14194:	push	{r4, r5, lr}
   14198:	sub	sp, sp, #12
   1419c:	ldr	r5, [sp, #24]
   141a0:	ldr	ip, [r5]
   141a4:	cmp	ip, #0
   141a8:	beq	141c4 <__assert_fail@plt+0x2d40>
   141ac:	mov	lr, r5
   141b0:	mov	ip, #0
   141b4:	ldr	r4, [lr, #4]!
   141b8:	add	ip, ip, #1
   141bc:	cmp	r4, #0
   141c0:	bne	141b4 <__assert_fail@plt+0x2d30>
   141c4:	stm	sp, {r5, ip}
   141c8:	bl	13dc0 <__assert_fail@plt+0x293c>
   141cc:	add	sp, sp, #12
   141d0:	pop	{r4, r5, pc}
   141d4:	push	{r4, r5, r6, r7, lr}
   141d8:	sub	sp, sp, #60	; 0x3c
   141dc:	ldr	r4, [pc, #100]	; 14248 <__assert_fail@plt+0x2dc4>
   141e0:	mov	ip, #0
   141e4:	ldr	r5, [pc, #96]	; 1424c <__assert_fail@plt+0x2dc8>
   141e8:	mov	lr, ip
   141ec:	add	r4, pc, r4
   141f0:	ldr	r6, [sp, #80]	; 0x50
   141f4:	ldr	r7, [r4, r5]
   141f8:	add	r5, sp, #12
   141fc:	ldr	r4, [r7]
   14200:	str	r4, [sp, #52]	; 0x34
   14204:	ldr	r4, [r6, ip]
   14208:	cmp	r4, #0
   1420c:	str	r4, [r5, ip]
   14210:	beq	14224 <__assert_fail@plt+0x2da0>
   14214:	add	lr, lr, #1
   14218:	add	ip, ip, #4
   1421c:	cmp	lr, #10
   14220:	bne	14204 <__assert_fail@plt+0x2d80>
   14224:	stm	sp, {r5, lr}
   14228:	bl	13dc0 <__assert_fail@plt+0x293c>
   1422c:	ldr	r2, [sp, #52]	; 0x34
   14230:	ldr	r3, [r7]
   14234:	cmp	r2, r3
   14238:	bne	14244 <__assert_fail@plt+0x2dc0>
   1423c:	add	sp, sp, #60	; 0x3c
   14240:	pop	{r4, r5, r6, r7, pc}
   14244:	bl	11208 <__stack_chk_fail@plt>
   14248:	andeq	r3, r1, ip, lsl #28
   1424c:	andeq	r0, r0, r4, lsr #2
   14250:	push	{r3}		; (str r3, [sp, #-4]!)
   14254:	push	{r4, lr}
   14258:	sub	sp, sp, #20
   1425c:	ldr	lr, [pc, #72]	; 142ac <__assert_fail@plt+0x2e28>
   14260:	add	ip, sp, #32
   14264:	ldr	r4, [pc, #68]	; 142b0 <__assert_fail@plt+0x2e2c>
   14268:	add	lr, pc, lr
   1426c:	ldr	r3, [sp, #28]
   14270:	ldr	r4, [lr, r4]
   14274:	str	ip, [sp]
   14278:	str	ip, [sp, #8]
   1427c:	ldr	ip, [r4]
   14280:	str	ip, [sp, #12]
   14284:	bl	141d4 <__assert_fail@plt+0x2d50>
   14288:	ldr	r2, [sp, #12]
   1428c:	ldr	r3, [r4]
   14290:	cmp	r2, r3
   14294:	bne	142a8 <__assert_fail@plt+0x2e24>
   14298:	add	sp, sp, #20
   1429c:	pop	{r4, lr}
   142a0:	add	sp, sp, #4
   142a4:	bx	lr
   142a8:	bl	11208 <__stack_chk_fail@plt>
   142ac:	muleq	r1, r0, sp
   142b0:	andeq	r0, r0, r4, lsr #2
   142b4:	ldr	r1, [pc, #132]	; 14340 <__assert_fail@plt+0x2ebc>
   142b8:	mov	r2, #5
   142bc:	push	{r4, lr}
   142c0:	add	r1, pc, r1
   142c4:	mov	r0, #0
   142c8:	ldr	r4, [pc, #116]	; 14344 <__assert_fail@plt+0x2ec0>
   142cc:	bl	111fc <dcgettext@plt>
   142d0:	ldr	r2, [pc, #112]	; 14348 <__assert_fail@plt+0x2ec4>
   142d4:	add	r4, pc, r4
   142d8:	add	r2, pc, r2
   142dc:	mov	r1, r0
   142e0:	mov	r0, #1
   142e4:	bl	113ac <__printf_chk@plt>
   142e8:	ldr	r1, [pc, #92]	; 1434c <__assert_fail@plt+0x2ec8>
   142ec:	mov	r2, #5
   142f0:	mov	r0, #0
   142f4:	add	r1, pc, r1
   142f8:	bl	111fc <dcgettext@plt>
   142fc:	ldr	r2, [pc, #76]	; 14350 <__assert_fail@plt+0x2ecc>
   14300:	ldr	r3, [pc, #76]	; 14354 <__assert_fail@plt+0x2ed0>
   14304:	add	r2, pc, r2
   14308:	add	r3, pc, r3
   1430c:	mov	r1, r0
   14310:	mov	r0, #1
   14314:	bl	113ac <__printf_chk@plt>
   14318:	ldr	r1, [pc, #56]	; 14358 <__assert_fail@plt+0x2ed4>
   1431c:	mov	r0, #0
   14320:	mov	r2, #5
   14324:	add	r1, pc, r1
   14328:	bl	111fc <dcgettext@plt>
   1432c:	ldr	r3, [pc, #40]	; 1435c <__assert_fail@plt+0x2ed8>
   14330:	ldr	r3, [r4, r3]
   14334:	pop	{r4, lr}
   14338:	ldr	r1, [r3]
   1433c:	b	1116c <fputs_unlocked@plt>
   14340:			; <UNDEFINED> instruction: 0x00002ebc
   14344:	andeq	r3, r1, r4, lsr #26
   14348:			; <UNDEFINED> instruction: 0x00002ebc
   1434c:			; <UNDEFINED> instruction: 0x00002eb8
   14350:	strdeq	r2, [r0], -ip
   14354:	andeq	r2, r0, r8, lsl #16
   14358:	muleq	r0, ip, lr
   1435c:	andeq	r0, r0, ip, lsr r1
   14360:	push	{r4, lr}
   14364:	mov	r4, r0
   14368:	bl	112c8 <malloc@plt>
   1436c:	rsbs	r3, r0, #1
   14370:	movcc	r3, #0
   14374:	cmp	r4, #0
   14378:	moveq	r3, #0
   1437c:	cmp	r3, #0
   14380:	popeq	{r4, pc}
   14384:	bl	14574 <__assert_fail@plt+0x30f0>
   14388:	push	{r3, r4, r5, lr}
   1438c:	mov	r4, r0
   14390:	mvn	r0, #0
   14394:	mov	r5, r1
   14398:	bl	15934 <__assert_fail@plt+0x44b0>
   1439c:	cmp	r0, r4
   143a0:	bcc	143b0 <__assert_fail@plt+0x2f2c>
   143a4:	mul	r0, r4, r5
   143a8:	pop	{r3, r4, r5, lr}
   143ac:	b	14360 <__assert_fail@plt+0x2edc>
   143b0:	bl	14574 <__assert_fail@plt+0x30f0>
   143b4:	b	14360 <__assert_fail@plt+0x2edc>
   143b8:	rsbs	r3, r1, #1
   143bc:	push	{r4, lr}
   143c0:	movcc	r3, #0
   143c4:	cmp	r0, #0
   143c8:	mov	r4, r1
   143cc:	moveq	r3, #0
   143d0:	cmp	r3, #0
   143d4:	bne	143f8 <__assert_fail@plt+0x2f74>
   143d8:	bl	11214 <realloc@plt>
   143dc:	rsbs	r3, r0, #1
   143e0:	movcc	r3, #0
   143e4:	cmp	r4, #0
   143e8:	moveq	r3, #0
   143ec:	cmp	r3, #0
   143f0:	popeq	{r4, pc}
   143f4:	bl	14574 <__assert_fail@plt+0x30f0>
   143f8:	bl	111b4 <free@plt>
   143fc:	mov	r0, #0
   14400:	pop	{r4, pc}
   14404:	push	{r4, r5, r6, lr}
   14408:	mov	r5, r1
   1440c:	mov	r6, r0
   14410:	mov	r1, r2
   14414:	mvn	r0, #0
   14418:	mov	r4, r2
   1441c:	bl	15934 <__assert_fail@plt+0x44b0>
   14420:	cmp	r0, r5
   14424:	bcc	14438 <__assert_fail@plt+0x2fb4>
   14428:	mov	r0, r6
   1442c:	mul	r1, r5, r4
   14430:	pop	{r4, r5, r6, lr}
   14434:	b	143b8 <__assert_fail@plt+0x2f34>
   14438:	bl	14574 <__assert_fail@plt+0x30f0>
   1443c:	push	{r3, r4, r5, r6, r7, lr}
   14440:	subs	r7, r0, #0
   14444:	mov	r5, r1
   14448:	mov	r6, r2
   1444c:	ldr	r4, [r1]
   14450:	beq	14488 <__assert_fail@plt+0x3004>
   14454:	movw	r0, #43690	; 0xaaaa
   14458:	mov	r1, r2
   1445c:	bfi	r0, r0, #16, #16
   14460:	bl	15934 <__assert_fail@plt+0x44b0>
   14464:	cmp	r4, r0
   14468:	addcc	r3, r4, #1
   1446c:	addcc	r4, r4, r3, lsr #1
   14470:	bcs	144ac <__assert_fail@plt+0x3028>
   14474:	str	r4, [r5]
   14478:	mov	r0, r7
   1447c:	mul	r1, r6, r4
   14480:	pop	{r3, r4, r5, r6, r7, lr}
   14484:	b	143b8 <__assert_fail@plt+0x2f34>
   14488:	cmp	r4, #0
   1448c:	bne	14474 <__assert_fail@plt+0x2ff0>
   14490:	mov	r0, #64	; 0x40
   14494:	mov	r1, r2
   14498:	bl	15934 <__assert_fail@plt+0x44b0>
   1449c:	cmp	r0, #0
   144a0:	movne	r4, r0
   144a4:	addeq	r4, r0, #1
   144a8:	b	14474 <__assert_fail@plt+0x2ff0>
   144ac:	bl	14574 <__assert_fail@plt+0x30f0>
   144b0:	cmp	r0, #0
   144b4:	push	{r3, lr}
   144b8:	ldr	r3, [r1]
   144bc:	beq	144e8 <__assert_fail@plt+0x3064>
   144c0:	movw	r2, #43689	; 0xaaa9
   144c4:	movt	r2, #43690	; 0xaaaa
   144c8:	cmp	r3, r2
   144cc:	addls	r2, r3, #1
   144d0:	addls	r3, r3, r2, lsr #1
   144d4:	bhi	14500 <__assert_fail@plt+0x307c>
   144d8:	str	r3, [r1]
   144dc:	mov	r1, r3
   144e0:	pop	{r3, lr}
   144e4:	b	143b8 <__assert_fail@plt+0x2f34>
   144e8:	cmp	r3, #0
   144ec:	moveq	r3, #64	; 0x40
   144f0:	str	r3, [r1]
   144f4:	mov	r1, r3
   144f8:	pop	{r3, lr}
   144fc:	b	143b8 <__assert_fail@plt+0x2f34>
   14500:	bl	14574 <__assert_fail@plt+0x30f0>
   14504:	push	{r4, lr}
   14508:	mov	r4, r0
   1450c:	bl	14360 <__assert_fail@plt+0x2edc>
   14510:	mov	r2, r4
   14514:	mov	r1, #0
   14518:	pop	{r4, lr}
   1451c:	b	11394 <memset@plt>
   14520:	push	{r3, lr}
   14524:	bl	11160 <calloc@plt>
   14528:	cmp	r0, #0
   1452c:	popne	{r3, pc}
   14530:	bl	14574 <__assert_fail@plt+0x30f0>
   14534:	push	{r3, r4, r5, lr}
   14538:	mov	r4, r1
   1453c:	mov	r5, r0
   14540:	mov	r0, r1
   14544:	bl	14360 <__assert_fail@plt+0x2edc>
   14548:	mov	r1, r5
   1454c:	mov	r2, r4
   14550:	pop	{r3, r4, r5, lr}
   14554:	b	111cc <memcpy@plt>
   14558:	push	{r4, lr}
   1455c:	mov	r4, r0
   14560:	bl	11334 <strlen@plt>
   14564:	add	r1, r0, #1
   14568:	mov	r0, r4
   1456c:	pop	{r4, lr}
   14570:	b	14534 <__assert_fail@plt+0x30b0>
   14574:	ldr	r3, [pc, #64]	; 145bc <__assert_fail@plt+0x3138>
   14578:	mov	r2, #5
   1457c:	ldr	ip, [pc, #60]	; 145c0 <__assert_fail@plt+0x313c>
   14580:	mov	r0, #0
   14584:	add	r3, pc, r3
   14588:	ldr	r1, [pc, #52]	; 145c4 <__assert_fail@plt+0x3140>
   1458c:	push	{r4, lr}
   14590:	add	r1, pc, r1
   14594:	ldr	r3, [r3, ip]
   14598:	ldr	r4, [r3]
   1459c:	bl	111fc <dcgettext@plt>
   145a0:	ldr	r2, [pc, #32]	; 145c8 <__assert_fail@plt+0x3144>
   145a4:	mov	r1, #0
   145a8:	add	r2, pc, r2
   145ac:	mov	r3, r0
   145b0:	mov	r0, r4
   145b4:	bl	11298 <error@plt>
   145b8:	bl	11460 <abort@plt>
   145bc:	andeq	r3, r1, r4, ror sl
   145c0:	andeq	r0, r0, r0, asr #2
   145c4:	andeq	r2, r0, r0, lsr #25
   145c8:	andeq	r2, r0, r4, lsr #16
   145cc:	push	{r4, r5, r6, lr}
   145d0:	sub	sp, sp, #8
   145d4:	mov	r4, r0
   145d8:	bl	113b8 <fileno@plt>
   145dc:	cmp	r0, #0
   145e0:	mov	r0, r4
   145e4:	blt	14660 <__assert_fail@plt+0x31dc>
   145e8:	bl	112e0 <__freading@plt>
   145ec:	cmp	r0, #0
   145f0:	bne	1462c <__assert_fail@plt+0x31a8>
   145f4:	mov	r0, r4
   145f8:	bl	1466c <__assert_fail@plt+0x31e8>
   145fc:	cmp	r0, #0
   14600:	beq	1465c <__assert_fail@plt+0x31d8>
   14604:	bl	11358 <__errno_location@plt>
   14608:	ldr	r6, [r0]
   1460c:	mov	r5, r0
   14610:	mov	r0, r4
   14614:	bl	113d0 <fclose@plt>
   14618:	cmp	r6, #0
   1461c:	mvnne	r0, #0
   14620:	strne	r6, [r5]
   14624:	add	sp, sp, #8
   14628:	pop	{r4, r5, r6, pc}
   1462c:	mov	r0, r4
   14630:	bl	113b8 <fileno@plt>
   14634:	mov	r1, #1
   14638:	mov	r2, #0
   1463c:	mov	r3, #0
   14640:	str	r1, [sp]
   14644:	bl	11250 <lseek64@plt>
   14648:	mvn	r2, #0
   1464c:	mvn	r3, #0
   14650:	cmp	r1, r3
   14654:	cmpeq	r0, r2
   14658:	bne	145f4 <__assert_fail@plt+0x3170>
   1465c:	mov	r0, r4
   14660:	add	sp, sp, #8
   14664:	pop	{r4, r5, r6, lr}
   14668:	b	113d0 <fclose@plt>
   1466c:	push	{r4, lr}
   14670:	subs	r4, r0, #0
   14674:	sub	sp, sp, #8
   14678:	beq	14688 <__assert_fail@plt+0x3204>
   1467c:	bl	112e0 <__freading@plt>
   14680:	cmp	r0, #0
   14684:	bne	14698 <__assert_fail@plt+0x3214>
   14688:	mov	r0, r4
   1468c:	add	sp, sp, #8
   14690:	pop	{r4, lr}
   14694:	b	1119c <fflush@plt>
   14698:	ldr	r3, [r4]
   1469c:	tst	r3, #256	; 0x100
   146a0:	beq	14688 <__assert_fail@plt+0x3204>
   146a4:	mov	r3, #1
   146a8:	mov	r0, r4
   146ac:	str	r3, [sp]
   146b0:	mov	r2, #0
   146b4:	mov	r3, #0
   146b8:	bl	146cc <__assert_fail@plt+0x3248>
   146bc:	mov	r0, r4
   146c0:	add	sp, sp, #8
   146c4:	pop	{r4, lr}
   146c8:	b	1119c <fflush@plt>
   146cc:	push	{r4, r5, r6, r7, lr}
   146d0:	sub	sp, sp, #20
   146d4:	ldmib	r0, {r1, ip}
   146d8:	mov	r6, r0
   146dc:	ldr	r4, [sp, #40]	; 0x28
   146e0:	cmp	ip, r1
   146e4:	beq	146fc <__assert_fail@plt+0x3278>
   146e8:	str	r4, [sp, #40]	; 0x28
   146ec:	mov	r0, r6
   146f0:	add	sp, sp, #20
   146f4:	pop	{r4, r5, r6, r7, lr}
   146f8:	b	113dc <fseeko64@plt>
   146fc:	ldr	ip, [r0, #20]
   14700:	ldr	r1, [r0, #16]
   14704:	cmp	ip, r1
   14708:	bne	146e8 <__assert_fail@plt+0x3264>
   1470c:	ldr	r7, [r0, #36]	; 0x24
   14710:	cmp	r7, #0
   14714:	bne	146e8 <__assert_fail@plt+0x3264>
   14718:	str	r2, [sp, #12]
   1471c:	mvn	r5, #0
   14720:	str	r3, [sp, #8]
   14724:	bl	113b8 <fileno@plt>
   14728:	str	r4, [sp]
   1472c:	mvn	r4, #0
   14730:	ldr	r2, [sp, #12]
   14734:	ldr	r3, [sp, #8]
   14738:	bl	11250 <lseek64@plt>
   1473c:	mov	r2, r0
   14740:	mov	r3, r1
   14744:	cmp	r3, r5
   14748:	cmpeq	r2, r4
   1474c:	beq	1476c <__assert_fail@plt+0x32e8>
   14750:	ldr	r1, [r6]
   14754:	mov	r0, r7
   14758:	strd	r2, [r6, #80]	; 0x50
   1475c:	bic	r3, r1, #16
   14760:	str	r3, [r6]
   14764:	add	sp, sp, #20
   14768:	pop	{r4, r5, r6, r7, pc}
   1476c:	mvn	r0, #0
   14770:	b	14764 <__assert_fail@plt+0x32e0>
   14774:	ldr	r3, [pc, #984]	; 14b54 <__assert_fail@plt+0x36d0>
   14778:	mov	r0, #14
   1477c:	ldr	r2, [pc, #980]	; 14b58 <__assert_fail@plt+0x36d4>
   14780:	add	r3, pc, r3
   14784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14788:	sub	sp, sp, #132	; 0x84
   1478c:	ldr	r6, [r3, r2]
   14790:	ldr	r3, [r6]
   14794:	str	r3, [sp, #124]	; 0x7c
   14798:	bl	1140c <nl_langinfo@plt>
   1479c:	subs	r5, r0, #0
   147a0:	beq	14854 <__assert_fail@plt+0x33d0>
   147a4:	ldr	r3, [pc, #944]	; 14b5c <__assert_fail@plt+0x36d8>
   147a8:	ldr	r4, [pc, r3]
   147ac:	cmp	r4, #0
   147b0:	beq	14860 <__assert_fail@plt+0x33dc>
   147b4:	ldrb	r7, [r4]
   147b8:	cmp	r7, #0
   147bc:	bne	147f0 <__assert_fail@plt+0x336c>
   147c0:	b	14828 <__assert_fail@plt+0x33a4>
   147c4:	mov	r0, r4
   147c8:	bl	11334 <strlen@plt>
   147cc:	add	r0, r0, #1
   147d0:	add	r7, r4, r0
   147d4:	mov	r0, r7
   147d8:	bl	11334 <strlen@plt>
   147dc:	add	r0, r0, #1
   147e0:	add	r4, r7, r0
   147e4:	ldrb	r7, [r7, r0]
   147e8:	cmp	r7, #0
   147ec:	beq	14828 <__assert_fail@plt+0x33a4>
   147f0:	mov	r0, r5
   147f4:	mov	r1, r4
   147f8:	bl	11184 <strcmp@plt>
   147fc:	cmp	r0, #0
   14800:	beq	14818 <__assert_fail@plt+0x3394>
   14804:	cmp	r7, #42	; 0x2a
   14808:	bne	147c4 <__assert_fail@plt+0x3340>
   1480c:	ldrb	r3, [r4, #1]
   14810:	cmp	r3, #0
   14814:	bne	147c4 <__assert_fail@plt+0x3340>
   14818:	mov	r0, r4
   1481c:	bl	11334 <strlen@plt>
   14820:	add	r0, r0, #1
   14824:	add	r5, r4, r0
   14828:	ldrb	r3, [r5]
   1482c:	cmp	r3, #0
   14830:	ldreq	r5, [pc, #808]	; 14b60 <__assert_fail@plt+0x36dc>
   14834:	addeq	r5, pc, r5
   14838:	ldr	r2, [sp, #124]	; 0x7c
   1483c:	mov	r0, r5
   14840:	ldr	r3, [r6]
   14844:	cmp	r2, r3
   14848:	bne	14b28 <__assert_fail@plt+0x36a4>
   1484c:	add	sp, sp, #132	; 0x84
   14850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14854:	ldr	r5, [pc, #776]	; 14b64 <__assert_fail@plt+0x36e0>
   14858:	add	r5, pc, r5
   1485c:	b	147a4 <__assert_fail@plt+0x3320>
   14860:	ldr	r0, [pc, #768]	; 14b68 <__assert_fail@plt+0x36e4>
   14864:	add	r0, pc, r0
   14868:	bl	112b0 <getenv@plt>
   1486c:	subs	r8, r0, #0
   14870:	beq	14b00 <__assert_fail@plt+0x367c>
   14874:	ldrb	r3, [r8]
   14878:	cmp	r3, #0
   1487c:	beq	14a94 <__assert_fail@plt+0x3610>
   14880:	bl	11334 <strlen@plt>
   14884:	subs	sl, r0, #0
   14888:	subne	r3, sl, #1
   1488c:	bne	14aa4 <__assert_fail@plt+0x3620>
   14890:	mov	r9, #0
   14894:	mov	fp, r9
   14898:	add	r9, sl, r9
   1489c:	add	r0, r9, #14
   148a0:	bl	112c8 <malloc@plt>
   148a4:	subs	r7, r0, #0
   148a8:	beq	14af4 <__assert_fail@plt+0x3670>
   148ac:	mov	r1, r8
   148b0:	mov	r2, sl
   148b4:	bl	111cc <memcpy@plt>
   148b8:	cmp	fp, #0
   148bc:	add	ip, r7, r9
   148c0:	movne	r3, #47	; 0x2f
   148c4:	strbne	r3, [r7, sl]
   148c8:	ldr	r3, [pc, #668]	; 14b6c <__assert_fail@plt+0x36e8>
   148cc:	add	r3, pc, r3
   148d0:	ldm	r3!, {r0, r1, r2}
   148d4:	ldrh	r3, [r3]
   148d8:	str	r0, [r7, r9]
   148dc:	mov	r0, r7
   148e0:	str	r1, [ip, #4]
   148e4:	mov	r1, #32768	; 0x8000
   148e8:	strh	r3, [ip, #12]
   148ec:	str	r2, [ip, #8]
   148f0:	bl	112a4 <open64@plt>
   148f4:	subs	r8, r0, #0
   148f8:	blt	14abc <__assert_fail@plt+0x3638>
   148fc:	ldr	r1, [pc, #620]	; 14b70 <__assert_fail@plt+0x36ec>
   14900:	add	r1, pc, r1
   14904:	bl	11154 <fdopen@plt>
   14908:	subs	fp, r0, #0
   1490c:	beq	14b14 <__assert_fail@plt+0x3690>
   14910:	ldr	r0, [pc, #604]	; 14b74 <__assert_fail@plt+0x36f0>
   14914:	add	sl, sp, #20
   14918:	add	r9, sp, #72	; 0x48
   1491c:	mov	r8, #0
   14920:	add	r0, pc, r0
   14924:	str	r0, [sp, #12]
   14928:	ldr	r3, [fp, #4]
   1492c:	ldr	r2, [fp, #8]
   14930:	cmp	r3, r2
   14934:	bcs	14a20 <__assert_fail@plt+0x359c>
   14938:	add	r2, r3, #1
   1493c:	str	r2, [fp, #4]
   14940:	ldrb	r0, [r3]
   14944:	cmp	r0, #32
   14948:	beq	14928 <__assert_fail@plt+0x34a4>
   1494c:	sub	r3, r0, #9
   14950:	cmp	r3, #1
   14954:	bls	14928 <__assert_fail@plt+0x34a4>
   14958:	cmp	r0, #35	; 0x23
   1495c:	beq	14a34 <__assert_fail@plt+0x35b0>
   14960:	mov	r1, fp
   14964:	bl	11340 <ungetc@plt>
   14968:	mov	r0, fp
   1496c:	ldr	r1, [sp, #12]
   14970:	mov	r2, sl
   14974:	mov	r3, r9
   14978:	bl	113a0 <fscanf@plt>
   1497c:	cmp	r0, #1
   14980:	ble	14a64 <__assert_fail@plt+0x35e0>
   14984:	mov	r0, sl
   14988:	bl	11334 <strlen@plt>
   1498c:	str	r0, [sp, #8]
   14990:	mov	r0, r9
   14994:	bl	11334 <strlen@plt>
   14998:	cmp	r8, #0
   1499c:	mov	r2, r0
   149a0:	bne	14ac8 <__assert_fail@plt+0x3644>
   149a4:	ldr	r3, [sp, #8]
   149a8:	str	r2, [sp]
   149ac:	add	r8, r0, r3
   149b0:	add	r0, r8, #3
   149b4:	add	r8, r8, #2
   149b8:	bl	112c8 <malloc@plt>
   149bc:	ldr	r2, [sp]
   149c0:	mov	r3, r0
   149c4:	cmp	r3, #0
   149c8:	beq	14b2c <__assert_fail@plt+0x36a8>
   149cc:	ldr	r0, [sp, #8]
   149d0:	movw	r1, #65534	; 0xfffe
   149d4:	movt	r1, #65535	; 0xffff
   149d8:	rsb	r2, r2, r8
   149dc:	rsb	r1, r0, r1
   149e0:	stm	sp, {r2, r3}
   149e4:	add	r0, r1, r2
   149e8:	mov	r1, sl
   149ec:	add	r0, r3, r0
   149f0:	mov	r4, r3
   149f4:	bl	11268 <strcpy@plt>
   149f8:	ldr	r2, [sp]
   149fc:	ldr	r3, [sp, #4]
   14a00:	mov	r1, r9
   14a04:	sub	r0, r2, #1
   14a08:	add	r0, r3, r0
   14a0c:	bl	11268 <strcpy@plt>
   14a10:	ldr	r3, [fp, #4]
   14a14:	ldr	r2, [fp, #8]
   14a18:	cmp	r3, r2
   14a1c:	bcc	14938 <__assert_fail@plt+0x34b4>
   14a20:	mov	r0, fp
   14a24:	bl	113e8 <__uflow@plt>
   14a28:	cmn	r0, #1
   14a2c:	beq	14a64 <__assert_fail@plt+0x35e0>
   14a30:	b	14944 <__assert_fail@plt+0x34c0>
   14a34:	ldr	r3, [fp, #4]
   14a38:	ldr	r2, [fp, #8]
   14a3c:	cmp	r3, r2
   14a40:	bcs	14b48 <__assert_fail@plt+0x36c4>
   14a44:	add	r2, r3, #1
   14a48:	str	r2, [fp, #4]
   14a4c:	ldrb	r0, [r3]
   14a50:	cmp	r0, #10
   14a54:	cmnne	r0, #1
   14a58:	bne	14a34 <__assert_fail@plt+0x35b0>
   14a5c:	cmn	r0, #1
   14a60:	bne	14928 <__assert_fail@plt+0x34a4>
   14a64:	mov	r0, fp
   14a68:	bl	145cc <__assert_fail@plt+0x3148>
   14a6c:	cmp	r8, #0
   14a70:	beq	14abc <__assert_fail@plt+0x3638>
   14a74:	mov	r3, #0
   14a78:	strb	r3, [r4, r8]
   14a7c:	mov	r0, r7
   14a80:	bl	111b4 <free@plt>
   14a84:	ldr	r3, [pc, #236]	; 14b78 <__assert_fail@plt+0x36f4>
   14a88:	add	r3, pc, r3
   14a8c:	str	r4, [r3]
   14a90:	b	147b4 <__assert_fail@plt+0x3330>
   14a94:	ldr	r8, [pc, #224]	; 14b7c <__assert_fail@plt+0x36f8>
   14a98:	mov	r3, #7
   14a9c:	mov	sl, #8
   14aa0:	add	r8, pc, r8
   14aa4:	ldrb	r3, [r8, r3]
   14aa8:	cmp	r3, #47	; 0x2f
   14aac:	movne	r9, #1
   14ab0:	movne	fp, r9
   14ab4:	bne	14898 <__assert_fail@plt+0x3414>
   14ab8:	b	14890 <__assert_fail@plt+0x340c>
   14abc:	ldr	r4, [pc, #188]	; 14b80 <__assert_fail@plt+0x36fc>
   14ac0:	add	r4, pc, r4
   14ac4:	b	14a7c <__assert_fail@plt+0x35f8>
   14ac8:	ldr	r0, [sp, #8]
   14acc:	str	r2, [sp]
   14ad0:	add	r3, r0, r2
   14ad4:	mov	r0, r4
   14ad8:	add	r8, r3, r8
   14adc:	add	r1, r8, #3
   14ae0:	add	r8, r8, #2
   14ae4:	bl	11214 <realloc@plt>
   14ae8:	ldr	r2, [sp]
   14aec:	mov	r3, r0
   14af0:	b	149c4 <__assert_fail@plt+0x3540>
   14af4:	ldr	r4, [pc, #136]	; 14b84 <__assert_fail@plt+0x3700>
   14af8:	add	r4, pc, r4
   14afc:	b	14a84 <__assert_fail@plt+0x3600>
   14b00:	ldr	r8, [pc, #128]	; 14b88 <__assert_fail@plt+0x3704>
   14b04:	mov	r3, #7
   14b08:	mov	sl, #8
   14b0c:	add	r8, pc, r8
   14b10:	b	14aa4 <__assert_fail@plt+0x3620>
   14b14:	ldr	r4, [pc, #112]	; 14b8c <__assert_fail@plt+0x3708>
   14b18:	mov	r0, r8
   14b1c:	add	r4, pc, r4
   14b20:	bl	1146c <close@plt>
   14b24:	b	14a7c <__assert_fail@plt+0x35f8>
   14b28:	bl	11208 <__stack_chk_fail@plt>
   14b2c:	mov	r0, r4
   14b30:	ldr	r4, [pc, #88]	; 14b90 <__assert_fail@plt+0x370c>
   14b34:	bl	111b4 <free@plt>
   14b38:	mov	r0, fp
   14b3c:	add	r4, pc, r4
   14b40:	bl	145cc <__assert_fail@plt+0x3148>
   14b44:	b	14a7c <__assert_fail@plt+0x35f8>
   14b48:	mov	r0, fp
   14b4c:	bl	113e8 <__uflow@plt>
   14b50:	b	14a50 <__assert_fail@plt+0x35cc>
   14b54:	andeq	r3, r1, r8, ror r8
   14b58:	andeq	r0, r0, r4, lsr #2
   14b5c:	andeq	r3, r1, r4, lsr fp
   14b60:	andeq	r2, r0, ip, lsl sl
   14b64:	andeq	r2, r0, ip, ror #6
   14b68:	strdeq	r2, [r0], -r4
   14b6c:	muleq	r0, ip, r9
   14b70:	andeq	r2, r0, r8, ror r9
   14b74:	andeq	r2, r0, ip, asr r9
   14b78:	andeq	r3, r1, r4, asr r8
   14b7c:	andeq	r2, r0, r4, lsr #15
   14b80:	andeq	r2, r0, r4, lsl #2
   14b84:	andeq	r2, r0, ip, asr #1
   14b88:	andeq	r2, r0, r8, lsr r7
   14b8c:	andeq	r2, r0, r8, lsr #1
   14b90:	andeq	r2, r0, r8, lsl #1
   14b94:	push	{r4, lr}
   14b98:	mov	r4, r0
   14b9c:	mov	r0, #24
   14ba0:	bl	14360 <__assert_fail@plt+0x2edc>
   14ba4:	mov	r2, #0
   14ba8:	mov	r3, #0
   14bac:	str	r4, [r0]
   14bb0:	strd	r2, [r0, #16]
   14bb4:	strd	r2, [r0, #8]
   14bb8:	pop	{r4, pc}
   14bbc:	push	{r3, lr}
   14bc0:	bl	14ebc <__assert_fail@plt+0x3a38>
   14bc4:	cmp	r0, #0
   14bc8:	popeq	{r3, pc}
   14bcc:	pop	{r3, lr}
   14bd0:	b	14b94 <__assert_fail@plt+0x3710>
   14bd4:	ldr	r0, [r0]
   14bd8:	bx	lr
   14bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be0:	sub	sp, sp, #84	; 0x54
   14be4:	ldr	r1, [pc, #496]	; 14ddc <__assert_fail@plt+0x3958>
   14be8:	str	r0, [sp, #56]	; 0x38
   14bec:	ldr	ip, [sp, #56]	; 0x38
   14bf0:	add	r1, pc, r1
   14bf4:	ldr	r0, [pc, #484]	; 14de0 <__assert_fail@plt+0x395c>
   14bf8:	strd	r2, [sp, #8]
   14bfc:	adds	r2, r2, #1
   14c00:	ldr	ip, [ip]
   14c04:	adc	r3, r3, #0
   14c08:	strd	r2, [sp, #24]
   14c0c:	str	ip, [sp, #48]	; 0x30
   14c10:	ldr	ip, [sp, #56]	; 0x38
   14c14:	ldrd	r8, [ip, #8]
   14c18:	add	ip, sp, #68	; 0x44
   14c1c:	str	ip, [sp, #52]	; 0x34
   14c20:	ldr	ip, [sp, #56]	; 0x38
   14c24:	ldr	r0, [r1, r0]
   14c28:	ldrd	r6, [ip, #16]
   14c2c:	ldr	r3, [r0]
   14c30:	str	r0, [sp, #60]	; 0x3c
   14c34:	str	r3, [sp, #76]	; 0x4c
   14c38:	ldrd	r0, [sp, #8]
   14c3c:	cmp	r7, r1
   14c40:	cmpeq	r6, r0
   14c44:	bcs	14cec <__assert_fail@plt+0x3868>
   14c48:	mov	r2, #0
   14c4c:	mov	r3, r9
   14c50:	mov	ip, r2
   14c54:	mov	r2, r8
   14c58:	ldrd	r8, [sp, #8]
   14c5c:	mov	r0, r6
   14c60:	mov	r1, r7
   14c64:	lsl	r5, r1, #8
   14c68:	lsl	r4, r0, #8
   14c6c:	orr	r5, r5, r0, lsr #24
   14c70:	adds	r0, r4, #255	; 0xff
   14c74:	adc	r1, r5, #0
   14c78:	add	ip, ip, #1
   14c7c:	cmp	r9, r1
   14c80:	cmpeq	r8, r0
   14c84:	bhi	14c64 <__assert_fail@plt+0x37e0>
   14c88:	ldr	r0, [sp, #48]	; 0x30
   14c8c:	add	r1, sp, #68	; 0x44
   14c90:	mov	r8, r2
   14c94:	mov	r2, ip
   14c98:	mov	r9, r3
   14c9c:	bl	1514c <__assert_fail@plt+0x3cc8>
   14ca0:	add	r3, sp, #67	; 0x43
   14ca4:	ldrd	r0, [sp, #8]
   14ca8:	mov	ip, r3
   14cac:	lsl	fp, r9, #8
   14cb0:	lsl	r3, r7, #8
   14cb4:	orr	fp, fp, r8, lsr #24
   14cb8:	lsl	sl, r8, #8
   14cbc:	lsl	r2, r6, #8
   14cc0:	ldrb	r8, [ip, #1]!
   14cc4:	orr	r3, r3, r6, lsr #24
   14cc8:	adds	r6, r2, #255	; 0xff
   14ccc:	adc	r7, r3, #0
   14cd0:	adds	r8, r8, sl
   14cd4:	mov	r9, #0
   14cd8:	adc	r9, r9, fp
   14cdc:	cmp	r1, r7
   14ce0:	cmpeq	r0, r6
   14ce4:	bhi	14cac <__assert_fail@plt+0x3828>
   14ce8:	strd	r2, [sp, #40]	; 0x28
   14cec:	ldrd	r2, [sp, #8]
   14cf0:	cmp	r7, r3
   14cf4:	cmpeq	r6, r2
   14cf8:	beq	14d58 <__assert_fail@plt+0x38d4>
   14cfc:	ldrd	r0, [sp, #8]
   14d00:	ldrd	r2, [sp, #24]
   14d04:	subs	r0, r6, r0
   14d08:	sbc	r1, r7, r1
   14d0c:	strd	r0, [sp, #32]
   14d10:	bl	15b40 <__assert_fail@plt+0x46bc>
   14d14:	mov	r0, r8
   14d18:	mov	r1, r9
   14d1c:	strd	r2, [sp, #16]
   14d20:	ldrd	r2, [sp, #24]
   14d24:	bl	15b40 <__assert_fail@plt+0x46bc>
   14d28:	ldrd	r0, [sp, #16]
   14d2c:	subs	r6, r6, r0
   14d30:	sbc	r7, r7, r1
   14d34:	cmp	r9, r7
   14d38:	cmpeq	r8, r6
   14d3c:	bls	14d90 <__assert_fail@plt+0x390c>
   14d40:	ldrd	r6, [sp, #16]
   14d44:	mov	r8, r2
   14d48:	mov	r9, r3
   14d4c:	subs	r6, r6, #1
   14d50:	sbc	r7, r7, #0
   14d54:	b	14c38 <__assert_fail@plt+0x37b4>
   14d58:	ldr	ip, [sp, #56]	; 0x38
   14d5c:	mov	r2, #0
   14d60:	mov	r3, #0
   14d64:	strd	r2, [ip, #16]
   14d68:	strd	r2, [ip, #8]
   14d6c:	ldr	ip, [sp, #60]	; 0x3c
   14d70:	mov	r0, r8
   14d74:	ldr	r2, [sp, #76]	; 0x4c
   14d78:	mov	r1, r9
   14d7c:	ldr	r3, [ip]
   14d80:	cmp	r2, r3
   14d84:	bne	14dd8 <__assert_fail@plt+0x3954>
   14d88:	add	sp, sp, #84	; 0x54
   14d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d90:	mov	ip, r3
   14d94:	mov	r4, r2
   14d98:	mov	r0, r8
   14d9c:	mov	r1, r9
   14da0:	ldrd	r2, [sp, #24]
   14da4:	mov	r8, r4
   14da8:	str	ip, [sp, #4]
   14dac:	bl	15b40 <__assert_fail@plt+0x46bc>
   14db0:	ldr	lr, [sp, #56]	; 0x38
   14db4:	ldrd	r2, [sp, #24]
   14db8:	strd	r0, [lr, #8]
   14dbc:	ldrd	r0, [sp, #32]
   14dc0:	bl	15b40 <__assert_fail@plt+0x46bc>
   14dc4:	ldr	ip, [sp, #4]
   14dc8:	mov	r9, ip
   14dcc:	ldr	ip, [sp, #56]	; 0x38
   14dd0:	strd	r0, [ip, #16]
   14dd4:	b	14d6c <__assert_fail@plt+0x38e8>
   14dd8:	bl	11208 <__stack_chk_fail@plt>
   14ddc:	andeq	r3, r1, r8, lsl #8
   14de0:	andeq	r0, r0, r4, lsr #2
   14de4:	push	{r4, lr}
   14de8:	mov	r1, #0
   14dec:	mov	r4, r0
   14df0:	mov	r2, #24
   14df4:	bl	11394 <memset@plt>
   14df8:	mov	r0, r4
   14dfc:	pop	{r4, lr}
   14e00:	b	111b4 <free@plt>
   14e04:	push	{r3, r4, r5, r6, r7, lr}
   14e08:	mov	r5, r0
   14e0c:	ldr	r0, [r0]
   14e10:	bl	1529c <__assert_fail@plt+0x3e18>
   14e14:	mov	r7, r0
   14e18:	bl	11358 <__errno_location@plt>
   14e1c:	ldr	r6, [r0]
   14e20:	mov	r4, r0
   14e24:	mov	r0, r5
   14e28:	bl	14de4 <__assert_fail@plt+0x3960>
   14e2c:	mov	r0, r7
   14e30:	str	r6, [r4]
   14e34:	pop	{r3, r4, r5, r6, r7, pc}
   14e38:	push	{r3, r4, r5, r6, r7, lr}
   14e3c:	subs	r5, r0, #0
   14e40:	ldr	r3, [pc, #100]	; 14eac <__assert_fail@plt+0x3a28>
   14e44:	add	r3, pc, r3
   14e48:	beq	14e9c <__assert_fail@plt+0x3a18>
   14e4c:	ldr	r2, [pc, #92]	; 14eb0 <__assert_fail@plt+0x3a2c>
   14e50:	ldr	r3, [r3, r2]
   14e54:	ldr	r6, [r3]
   14e58:	bl	11358 <__errno_location@plt>
   14e5c:	ldr	r4, [r0]
   14e60:	cmp	r4, #0
   14e64:	beq	14ea0 <__assert_fail@plt+0x3a1c>
   14e68:	ldr	r1, [pc, #68]	; 14eb4 <__assert_fail@plt+0x3a30>
   14e6c:	add	r1, pc, r1
   14e70:	mov	r2, #5
   14e74:	mov	r0, #0
   14e78:	bl	111fc <dcgettext@plt>
   14e7c:	mov	r7, r0
   14e80:	mov	r0, r5
   14e84:	bl	139e0 <__assert_fail@plt+0x255c>
   14e88:	mov	r1, r4
   14e8c:	mov	r2, r7
   14e90:	mov	r3, r0
   14e94:	mov	r0, r6
   14e98:	bl	11298 <error@plt>
   14e9c:	bl	11460 <abort@plt>
   14ea0:	ldr	r1, [pc, #16]	; 14eb8 <__assert_fail@plt+0x3a34>
   14ea4:	add	r1, pc, r1
   14ea8:	b	14e70 <__assert_fail@plt+0x39ec>
   14eac:			; <UNDEFINED> instruction: 0x000131b4
   14eb0:	andeq	r0, r0, r0, asr #2
   14eb4:	andeq	r2, r0, ip, lsr #8
   14eb8:	andeq	r2, r0, r4, ror #7
   14ebc:	ldr	ip, [pc, #604]	; 15120 <__assert_fail@plt+0x3c9c>
   14ec0:	ldr	r3, [pc, #604]	; 15124 <__assert_fail@plt+0x3ca0>
   14ec4:	add	ip, pc, ip
   14ec8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ecc:	subs	r7, r1, #0
   14ed0:	ldr	r5, [ip, r3]
   14ed4:	sub	sp, sp, #16
   14ed8:	mov	r6, r0
   14edc:	ldr	r3, [r5]
   14ee0:	str	r3, [sp, #12]
   14ee4:	beq	14f5c <__assert_fail@plt+0x3ad8>
   14ee8:	cmp	r0, #0
   14eec:	beq	14f7c <__assert_fail@plt+0x3af8>
   14ef0:	ldr	r1, [pc, #560]	; 15128 <__assert_fail@plt+0x3ca4>
   14ef4:	add	r1, pc, r1
   14ef8:	bl	15718 <__assert_fail@plt+0x4294>
   14efc:	subs	r8, r0, #0
   14f00:	beq	150ac <__assert_fail@plt+0x3c28>
   14f04:	movw	r0, #2076	; 0x81c
   14f08:	bl	14360 <__assert_fail@plt+0x2edc>
   14f0c:	ldr	ip, [pc, #536]	; 1512c <__assert_fail@plt+0x3ca8>
   14f10:	cmp	r7, #2048	; 0x800
   14f14:	movcc	r3, r7
   14f18:	movcs	r3, #2048	; 0x800
   14f1c:	mov	r2, #0
   14f20:	add	ip, pc, ip
   14f24:	mov	r4, r0
   14f28:	mov	r0, r8
   14f2c:	add	r1, r4, #12
   14f30:	str	r8, [r4]
   14f34:	str	r6, [r4, #8]
   14f38:	str	ip, [r4, #4]
   14f3c:	bl	1137c <setvbuf@plt>
   14f40:	mov	r0, r4
   14f44:	ldr	r2, [sp, #12]
   14f48:	ldr	r3, [r5]
   14f4c:	cmp	r2, r3
   14f50:	bne	1511c <__assert_fail@plt+0x3c98>
   14f54:	add	sp, sp, #16
   14f58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f5c:	movw	r0, #2076	; 0x81c
   14f60:	bl	14360 <__assert_fail@plt+0x2edc>
   14f64:	ldr	r2, [pc, #452]	; 15130 <__assert_fail@plt+0x3cac>
   14f68:	add	r2, pc, r2
   14f6c:	mov	r3, r0
   14f70:	str	r7, [r3]
   14f74:	stmib	r3, {r2, r7}
   14f78:	b	14f44 <__assert_fail@plt+0x3ac0>
   14f7c:	movw	r0, #2076	; 0x81c
   14f80:	bl	14360 <__assert_fail@plt+0x2edc>
   14f84:	ldr	r3, [pc, #424]	; 15134 <__assert_fail@plt+0x3cb0>
   14f88:	mov	r1, r6
   14f8c:	add	r3, pc, r3
   14f90:	mov	r4, r0
   14f94:	ldr	r0, [pc, #412]	; 15138 <__assert_fail@plt+0x3cb4>
   14f98:	str	r6, [r4]
   14f9c:	add	r8, r4, #16
   14fa0:	add	r0, pc, r0
   14fa4:	str	r6, [r4, #8]
   14fa8:	str	r6, [r4, #12]
   14fac:	str	r3, [r4, #4]
   14fb0:	bl	112a4 <open64@plt>
   14fb4:	subs	r9, r0, #0
   14fb8:	blt	14ffc <__assert_fail@plt+0x3b78>
   14fbc:	cmp	r7, #1024	; 0x400
   14fc0:	movcc	r2, r7
   14fc4:	movcs	r2, #1024	; 0x400
   14fc8:	mov	r1, r8
   14fcc:	movw	r3, #2060	; 0x80c
   14fd0:	bl	11190 <__read_chk@plt>
   14fd4:	mov	r3, r0
   14fd8:	mov	r0, r9
   14fdc:	bic	r9, r3, r3, asr #31
   14fe0:	bl	1146c <close@plt>
   14fe4:	cmp	r9, #1024	; 0x400
   14fe8:	bcc	150b4 <__assert_fail@plt+0x3c30>
   14fec:	mov	r0, r8
   14ff0:	bl	15500 <__assert_fail@plt+0x407c>
   14ff4:	mov	r0, r4
   14ff8:	b	14f44 <__assert_fail@plt+0x3ac0>
   14ffc:	add	r7, sp, #4
   15000:	mov	r1, r6
   15004:	mov	r9, #12
   15008:	mov	r0, r7
   1500c:	bl	11274 <gettimeofday@plt>
   15010:	mov	r3, r7
   15014:	ldm	r3!, {r0, r1}
   15018:	str	r0, [r4, #16]
   1501c:	str	r1, [r8, #4]
   15020:	bl	1131c <getpid@plt>
   15024:	str	r0, [sp, #4]
   15028:	ldr	r0, [r7]
   1502c:	str	r0, [r4, #24]
   15030:	bl	11424 <getppid@plt>
   15034:	rsb	r2, r9, #1024	; 0x400
   15038:	cmp	r2, #4
   1503c:	movcs	r2, #4
   15040:	mov	r1, r7
   15044:	add	r6, r2, r9
   15048:	str	r0, [sp, #4]
   1504c:	add	r0, r8, r9
   15050:	bl	111cc <memcpy@plt>
   15054:	cmp	r6, #1024	; 0x400
   15058:	bcs	14fec <__assert_fail@plt+0x3b68>
   1505c:	bl	111a8 <getuid@plt>
   15060:	rsb	r2, r6, #1024	; 0x400
   15064:	cmp	r2, #4
   15068:	movcs	r2, #4
   1506c:	mov	r1, r7
   15070:	add	r9, r2, r6
   15074:	str	r0, [sp, #4]
   15078:	add	r0, r8, r6
   1507c:	bl	111cc <memcpy@plt>
   15080:	cmp	r9, #1024	; 0x400
   15084:	bcs	14fec <__assert_fail@plt+0x3b68>
   15088:	bl	11388 <getgid@plt>
   1508c:	rsb	r2, r9, #1024	; 0x400
   15090:	mov	r1, r7
   15094:	cmp	r2, #4
   15098:	movcs	r2, #4
   1509c:	str	r0, [sp, #4]
   150a0:	add	r0, r8, r9
   150a4:	bl	111cc <memcpy@plt>
   150a8:	b	14fec <__assert_fail@plt+0x3b68>
   150ac:	mov	r0, r8
   150b0:	b	14f44 <__assert_fail@plt+0x3ac0>
   150b4:	add	r7, sp, #4
   150b8:	rsb	sl, r9, #1024	; 0x400
   150bc:	cmp	sl, #8
   150c0:	movcs	sl, #8
   150c4:	mov	r1, r6
   150c8:	mov	r0, r7
   150cc:	add	r6, sl, r9
   150d0:	bl	11274 <gettimeofday@plt>
   150d4:	mov	r2, sl
   150d8:	add	r0, r8, r9
   150dc:	mov	r1, r7
   150e0:	bl	111cc <memcpy@plt>
   150e4:	cmp	r6, #1024	; 0x400
   150e8:	bcs	14fec <__assert_fail@plt+0x3b68>
   150ec:	bl	1131c <getpid@plt>
   150f0:	rsb	r2, r6, #1024	; 0x400
   150f4:	cmp	r2, #4
   150f8:	movcs	r2, #4
   150fc:	mov	r1, r7
   15100:	add	r9, r2, r6
   15104:	str	r0, [sp, #4]
   15108:	add	r0, r8, r6
   1510c:	bl	111cc <memcpy@plt>
   15110:	cmp	r9, #1024	; 0x400
   15114:	bcc	15030 <__assert_fail@plt+0x3bac>
   15118:	b	14fec <__assert_fail@plt+0x3b68>
   1511c:	bl	11208 <__stack_chk_fail@plt>
   15120:	andeq	r3, r1, r4, lsr r1
   15124:	andeq	r0, r0, r4, lsr #2
   15128:			; <UNDEFINED> instruction: 0x000023b4
   1512c:			; <UNDEFINED> instruction: 0xffffff10
   15130:			; <UNDEFINED> instruction: 0xfffffec8
   15134:			; <UNDEFINED> instruction: 0xfffffea4
   15138:	andeq	r2, r0, ip, lsl #6
   1513c:	str	r1, [r0, #4]
   15140:	bx	lr
   15144:	str	r1, [r0, #8]
   15148:	bx	lr
   1514c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15150:	mov	r6, r0
   15154:	ldr	r3, [r0]
   15158:	sub	sp, sp, #12
   1515c:	mov	r5, r1
   15160:	mov	r4, r2
   15164:	cmp	r3, #0
   15168:	beq	151cc <__assert_fail@plt+0x3d48>
   1516c:	str	r3, [sp, #4]
   15170:	bl	11358 <__errno_location@plt>
   15174:	ldr	r3, [sp, #4]
   15178:	mov	r7, r0
   1517c:	b	151a4 <__assert_fail@plt+0x3d20>
   15180:	ldr	r3, [r6]
   15184:	ldr	r3, [r3]
   15188:	ands	r3, r3, #32
   1518c:	movne	r3, r2
   15190:	str	r3, [r7]
   15194:	ldr	r3, [r6, #4]
   15198:	ldr	r0, [r6, #8]
   1519c:	blx	r3
   151a0:	ldr	r3, [r6]
   151a4:	mov	r2, r4
   151a8:	mov	r0, r5
   151ac:	mov	r1, #1
   151b0:	bl	11448 <fread_unlocked@plt>
   151b4:	ldr	r2, [r7]
   151b8:	subs	r4, r4, r0
   151bc:	add	r5, r5, r0
   151c0:	bne	15180 <__assert_fail@plt+0x3cfc>
   151c4:	add	sp, sp, #12
   151c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151cc:	ldr	r8, [r0, #12]
   151d0:	cmp	r2, r8
   151d4:	bls	1528c <__assert_fail@plt+0x3e08>
   151d8:	add	r9, r0, #12
   151dc:	rsb	r1, r8, #2064	; 0x810
   151e0:	add	r1, r9, r1
   151e4:	add	sl, r9, #1040	; 0x410
   151e8:	add	r7, r0, #16
   151ec:	mov	r0, r5
   151f0:	mov	r2, r8
   151f4:	add	r5, r5, r8
   151f8:	bl	111cc <memcpy@plt>
   151fc:	tst	r5, #3
   15200:	rsb	r4, r8, r4
   15204:	beq	15224 <__assert_fail@plt+0x3da0>
   15208:	b	15268 <__assert_fail@plt+0x3de4>
   1520c:	mov	r1, r5
   15210:	mov	r0, r7
   15214:	bl	152d0 <__assert_fail@plt+0x3e4c>
   15218:	subs	r4, r4, #1024	; 0x400
   1521c:	add	r5, r5, #1024	; 0x400
   15220:	beq	1525c <__assert_fail@plt+0x3dd8>
   15224:	cmp	r4, #1024	; 0x400
   15228:	bcs	1520c <__assert_fail@plt+0x3d88>
   1522c:	add	fp, r9, #1040	; 0x410
   15230:	mov	r0, r7
   15234:	mov	r1, fp
   15238:	bl	152d0 <__assert_fail@plt+0x3e4c>
   1523c:	mov	r1, fp
   15240:	mov	r8, #1024	; 0x400
   15244:	mov	r2, r4
   15248:	mov	r0, r5
   1524c:	bl	111cc <memcpy@plt>
   15250:	rsb	r4, r4, r8
   15254:	str	r4, [r6, #12]
   15258:	b	151c4 <__assert_fail@plt+0x3d40>
   1525c:	str	r4, [r6, #12]
   15260:	add	sp, sp, #12
   15264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15268:	mov	r1, sl
   1526c:	mov	r0, r7
   15270:	bl	152d0 <__assert_fail@plt+0x3e4c>
   15274:	mov	r8, #1024	; 0x400
   15278:	cmp	r4, r8
   1527c:	mov	r1, sl
   15280:	mov	fp, sl
   15284:	bhi	151ec <__assert_fail@plt+0x3d68>
   15288:	b	1523c <__assert_fail@plt+0x3db8>
   1528c:	add	r1, r0, #12
   15290:	rsb	r3, r8, #2064	; 0x810
   15294:	add	r1, r1, r3
   15298:	b	15244 <__assert_fail@plt+0x3dc0>
   1529c:	push	{r3, r4, r5, lr}
   152a0:	mov	r1, #0
   152a4:	mov	r4, r0
   152a8:	ldr	r5, [r0]
   152ac:	movw	r2, #2076	; 0x81c
   152b0:	bl	11394 <memset@plt>
   152b4:	mov	r0, r4
   152b8:	bl	111b4 <free@plt>
   152bc:	subs	r0, r5, #0
   152c0:	beq	152cc <__assert_fail@plt+0x3e48>
   152c4:	pop	{r3, r4, r5, lr}
   152c8:	b	145cc <__assert_fail@plt+0x3148>
   152cc:	pop	{r3, r4, r5, pc}
   152d0:	push	{r4, r5, r6, r7, r8, r9}
   152d4:	add	r6, r0, #512	; 0x200
   152d8:	ldr	r5, [r0, #1032]	; 0x408
   152dc:	add	r4, r0, #16
   152e0:	ldr	ip, [r0, #1028]	; 0x404
   152e4:	mov	r3, r0
   152e8:	add	r5, r5, #1
   152ec:	ldr	r2, [r0, #1024]	; 0x400
   152f0:	add	ip, r5, ip
   152f4:	str	r5, [r0, #1032]	; 0x408
   152f8:	ldr	r7, [r4, #-16]
   152fc:	eor	r2, r2, r2, lsl #13
   15300:	ldr	r5, [r3, #512]	; 0x200
   15304:	add	r3, r3, #16
   15308:	and	r8, r7, #1020	; 0x3fc
   1530c:	add	r4, r4, #16
   15310:	add	r5, r2, r5
   15314:	add	r1, r1, #16
   15318:	ldr	r2, [r0, r8]
   1531c:	eor	r8, r5, r5, lsr #6
   15320:	add	r5, r5, r2
   15324:	add	ip, r5, ip
   15328:	str	ip, [r4, #-32]	; 0xffffffe0
   1532c:	lsr	ip, ip, #8
   15330:	and	ip, ip, #1020	; 0x3fc
   15334:	ldr	r2, [r0, ip]
   15338:	add	r7, r7, r2
   1533c:	str	r7, [r1, #-16]
   15340:	ldr	r5, [r3, #-12]
   15344:	ldr	r2, [r3, #500]	; 0x1f4
   15348:	and	ip, r5, #1020	; 0x3fc
   1534c:	add	r2, r8, r2
   15350:	ldr	ip, [r0, ip]
   15354:	eor	r8, r2, r2, lsl #2
   15358:	add	r2, r2, ip
   1535c:	add	r2, r2, r7
   15360:	str	r2, [r3, #-12]
   15364:	lsr	r2, r2, #8
   15368:	and	r2, r2, #1020	; 0x3fc
   1536c:	ldr	r7, [r0, r2]
   15370:	add	r7, r5, r7
   15374:	str	r7, [r1, #-12]
   15378:	ldr	r5, [r3, #-8]
   1537c:	ldr	ip, [r3, #504]	; 0x1f8
   15380:	and	r2, r5, #1020	; 0x3fc
   15384:	add	ip, r8, ip
   15388:	ldr	r8, [r0, r2]
   1538c:	eor	r2, ip, ip, lsr #16
   15390:	add	ip, ip, r8
   15394:	add	ip, ip, r7
   15398:	str	ip, [r3, #-8]
   1539c:	lsr	ip, ip, #8
   153a0:	and	ip, ip, #1020	; 0x3fc
   153a4:	ldr	r7, [r0, ip]
   153a8:	add	r7, r5, r7
   153ac:	str	r7, [r1, #-8]
   153b0:	ldr	ip, [r3, #-4]
   153b4:	ldr	r8, [r3, #508]	; 0x1fc
   153b8:	and	r5, ip, #1020	; 0x3fc
   153bc:	add	r2, r2, r8
   153c0:	ldr	r5, [r0, r5]
   153c4:	add	r5, r2, r5
   153c8:	add	r5, r5, r7
   153cc:	str	r5, [r3, #-4]
   153d0:	cmp	r3, r6
   153d4:	lsr	r5, r5, #8
   153d8:	and	r5, r5, #1020	; 0x3fc
   153dc:	ldr	r5, [r0, r5]
   153e0:	add	ip, ip, r5
   153e4:	str	ip, [r1, #-4]
   153e8:	bcc	152f8 <__assert_fail@plt+0x3e74>
   153ec:	add	r4, r3, #16
   153f0:	add	r7, r0, #1024	; 0x400
   153f4:	mov	r5, r4
   153f8:	ldr	r8, [r5, #-16]
   153fc:	eor	r2, r2, r2, lsl #13
   15400:	ldr	r6, [r3, #-512]	; 0xfffffe00
   15404:	cmp	r4, r7
   15408:	and	r9, r8, #1020	; 0x3fc
   1540c:	add	r5, r5, #16
   15410:	add	r6, r2, r6
   15414:	add	r1, r1, #16
   15418:	ldr	r2, [r0, r9]
   1541c:	eor	r9, r6, r6, lsr #6
   15420:	add	r6, r6, r2
   15424:	add	ip, r6, ip
   15428:	str	ip, [r5, #-32]	; 0xffffffe0
   1542c:	lsr	ip, ip, #8
   15430:	and	ip, ip, #1020	; 0x3fc
   15434:	ldr	r2, [r0, ip]
   15438:	add	r8, r8, r2
   1543c:	str	r8, [r1, #-16]
   15440:	ldr	r6, [r3, #4]
   15444:	ldr	r2, [r3, #-508]	; 0xfffffe04
   15448:	and	ip, r6, #1020	; 0x3fc
   1544c:	add	r2, r9, r2
   15450:	ldr	ip, [r0, ip]
   15454:	eor	r9, r2, r2, lsl #2
   15458:	add	r2, r2, ip
   1545c:	add	r2, r2, r8
   15460:	str	r2, [r3, #4]
   15464:	lsr	r2, r2, #8
   15468:	and	r2, r2, #1020	; 0x3fc
   1546c:	ldr	r8, [r0, r2]
   15470:	add	r8, r6, r8
   15474:	str	r8, [r1, #-12]
   15478:	ldr	r6, [r3, #8]
   1547c:	ldr	ip, [r3, #-504]	; 0xfffffe08
   15480:	and	r2, r6, #1020	; 0x3fc
   15484:	add	ip, r9, ip
   15488:	ldr	r9, [r0, r2]
   1548c:	eor	r2, ip, ip, lsr #16
   15490:	add	ip, ip, r9
   15494:	add	ip, ip, r8
   15498:	str	ip, [r3, #8]
   1549c:	lsr	ip, ip, #8
   154a0:	and	ip, ip, #1020	; 0x3fc
   154a4:	ldr	r8, [r0, ip]
   154a8:	add	r8, r6, r8
   154ac:	str	r8, [r1, #-8]
   154b0:	ldr	ip, [r3, #12]
   154b4:	ldr	r9, [r3, #-500]	; 0xfffffe0c
   154b8:	and	r6, ip, #1020	; 0x3fc
   154bc:	add	r2, r2, r9
   154c0:	ldr	r6, [r0, r6]
   154c4:	add	r6, r2, r6
   154c8:	add	r6, r6, r8
   154cc:	str	r6, [r3, #12]
   154d0:	mov	r3, r4
   154d4:	add	r4, r4, #16
   154d8:	lsr	r6, r6, #8
   154dc:	and	r6, r6, #1020	; 0x3fc
   154e0:	ldr	r6, [r0, r6]
   154e4:	add	ip, ip, r6
   154e8:	str	ip, [r1, #-4]
   154ec:	bcc	153f8 <__assert_fail@plt+0x3f74>
   154f0:	str	r2, [r0, #1024]	; 0x400
   154f4:	str	ip, [r0, #1028]	; 0x404
   154f8:	pop	{r4, r5, r6, r7, r8, r9}
   154fc:	bx	lr
   15500:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   15504:	movw	ip, #15433	; 0x3c49
   15508:	movw	r6, #37145	; 0x9119
   1550c:	movw	r4, #59931	; 0xea1b
   15510:	movw	r1, #19064	; 0x4a78
   15514:	movw	r2, #6872	; 0x1ad8
   15518:	movw	r7, #15947	; 0x3e4b
   1551c:	mov	r5, #89	; 0x59
   15520:	movw	r8, #57178	; 0xdf5a
   15524:	sub	sp, sp, #8
   15528:	movt	r6, #12384	; 0x3060
   1552c:	movt	r4, #50415	; 0xc4ef
   15530:	movt	ip, #42266	; 0xa51a
   15534:	movt	r1, #55594	; 0xd92a
   15538:	movt	r2, #3906	; 0xf42
   1553c:	movt	r7, #49942	; 0xc316
   15540:	movt	r5, #38361	; 0x95d9
   15544:	movt	r8, #4967	; 0x1367
   15548:	mov	r3, r0
   1554c:	mov	r9, #0
   15550:	ldr	fp, [r3, #4]
   15554:	add	r3, r3, #32
   15558:	ldr	sl, [r0, r9]
   1555c:	add	r5, r5, fp
   15560:	ldr	fp, [r3, #-20]	; 0xffffffec
   15564:	add	r8, r8, sl
   15568:	ldr	sl, [r3, #-24]	; 0xffffffe8
   1556c:	eor	r8, r8, r5, lsl #11
   15570:	add	fp, r8, fp
   15574:	add	r7, r7, sl
   15578:	add	fp, fp, r2
   1557c:	add	r5, r7, r5
   15580:	add	r2, fp, r7
   15584:	ldr	sl, [r3, #-12]
   15588:	eor	r5, r5, r7, lsr #2
   1558c:	eor	r7, r2, fp, lsl #8
   15590:	ldr	r2, [r3, #-16]
   15594:	add	sl, r7, sl
   15598:	add	sl, sl, ip
   1559c:	ldr	ip, [r3, #-4]
   155a0:	add	r2, r5, r2
   155a4:	str	r2, [sp, #4]
   155a8:	add	r2, r2, r1
   155ac:	add	r1, sl, r2
   155b0:	add	fp, r2, fp
   155b4:	eor	r1, r1, sl, lsl #10
   155b8:	eor	r2, fp, r2, lsr #16
   155bc:	add	fp, r1, ip
   155c0:	ldr	ip, [r3, #-8]
   155c4:	add	r6, fp, r6
   155c8:	add	ip, r2, ip
   155cc:	add	r4, ip, r4
   155d0:	add	ip, r4, sl
   155d4:	add	fp, r6, r4
   155d8:	eor	ip, ip, r4, lsr #4
   155dc:	eor	r4, fp, r6, lsl #8
   155e0:	add	sl, ip, r8
   155e4:	add	r5, r4, r5
   155e8:	add	r8, r5, sl
   155ec:	str	r8, [r0, r9]
   155f0:	add	r9, r9, #32
   155f4:	add	r6, r6, sl
   155f8:	cmp	r9, #1024	; 0x400
   155fc:	eor	r6, r6, sl, lsr #9
   15600:	str	r5, [r3, #-28]	; 0xffffffe4
   15604:	add	r7, r6, r7
   15608:	str	r4, [r3, #-8]
   1560c:	str	r7, [r3, #-24]	; 0xffffffe8
   15610:	str	r6, [r3, #-4]
   15614:	str	ip, [r3, #-12]
   15618:	str	r1, [r3, #-16]
   1561c:	str	r2, [r3, #-20]	; 0xffffffec
   15620:	bne	15550 <__assert_fail@plt+0x40cc>
   15624:	add	r3, r0, #4
   15628:	mov	r9, #0
   1562c:	ldr	fp, [r3]
   15630:	add	r9, r9, #8
   15634:	ldr	sl, [r3, #-4]
   15638:	cmp	r9, #256	; 0x100
   1563c:	add	r5, r5, fp
   15640:	ldr	fp, [r3, #4]
   15644:	add	r8, r8, sl
   15648:	add	r3, r3, #32
   1564c:	add	r7, r7, fp
   15650:	ldr	fp, [r3, #-24]	; 0xffffffe8
   15654:	eor	r8, r8, r5, lsl #11
   15658:	add	r5, r7, r5
   1565c:	add	sl, r8, fp
   15660:	ldr	fp, [r3, #-20]	; 0xffffffec
   15664:	eor	r5, r5, r7, lsr #2
   15668:	add	r2, sl, r2
   1566c:	add	sl, r5, fp
   15670:	add	r7, r2, r7
   15674:	add	r1, sl, r1
   15678:	ldr	sl, [r3, #-16]
   1567c:	eor	r7, r7, r2, lsl #8
   15680:	add	r2, r1, r2
   15684:	add	fp, r7, sl
   15688:	ldr	sl, [r3, #-12]
   1568c:	eor	r2, r2, r1, lsr #16
   15690:	add	ip, fp, ip
   15694:	add	fp, r2, sl
   15698:	add	r1, ip, r1
   1569c:	add	r4, fp, r4
   156a0:	ldr	fp, [r3, #-8]
   156a4:	eor	r1, r1, ip, lsl #10
   156a8:	add	ip, r4, ip
   156ac:	add	sl, r1, fp
   156b0:	eor	ip, ip, r4, lsr #4
   156b4:	add	r6, sl, r6
   156b8:	add	r8, ip, r8
   156bc:	add	r4, r6, r4
   156c0:	str	r1, [r3, #-20]	; 0xffffffec
   156c4:	eor	r4, r4, r6, lsl #8
   156c8:	add	r6, r6, r8
   156cc:	eor	r6, r6, r8, lsr #9
   156d0:	add	r5, r4, r5
   156d4:	add	r8, r5, r8
   156d8:	str	r2, [r3, #-24]	; 0xffffffe8
   156dc:	add	r7, r6, r7
   156e0:	str	r5, [r3, #-32]	; 0xffffffe0
   156e4:	str	r8, [r3, #-36]	; 0xffffffdc
   156e8:	str	r7, [r3, #-28]	; 0xffffffe4
   156ec:	str	r4, [r3, #-12]
   156f0:	str	r6, [r3, #-8]
   156f4:	str	ip, [r3, #-16]
   156f8:	bne	1562c <__assert_fail@plt+0x41a8>
   156fc:	mov	r3, #0
   15700:	str	r3, [r0, #1032]	; 0x408
   15704:	str	r3, [r0, #1028]	; 0x404
   15708:	str	r3, [r0, #1024]	; 0x400
   1570c:	add	sp, sp, #8
   15710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15714:	bx	lr
   15718:	push	{r4, r5, r6, lr}
   1571c:	mov	r5, r1
   15720:	bl	11430 <fopen64@plt>
   15724:	subs	r4, r0, #0
   15728:	beq	15738 <__assert_fail@plt+0x42b4>
   1572c:	bl	113b8 <fileno@plt>
   15730:	cmp	r0, #2
   15734:	bls	15740 <__assert_fail@plt+0x42bc>
   15738:	mov	r0, r4
   1573c:	pop	{r4, r5, r6, pc}
   15740:	bl	157b4 <__assert_fail@plt+0x4330>
   15744:	subs	r6, r0, #0
   15748:	blt	15774 <__assert_fail@plt+0x42f0>
   1574c:	mov	r0, r4
   15750:	bl	145cc <__assert_fail@plt+0x3148>
   15754:	cmp	r0, #0
   15758:	bne	15794 <__assert_fail@plt+0x4310>
   1575c:	mov	r1, r5
   15760:	mov	r0, r6
   15764:	bl	11154 <fdopen@plt>
   15768:	cmp	r0, #0
   1576c:	beq	15794 <__assert_fail@plt+0x4310>
   15770:	pop	{r4, r5, r6, pc}
   15774:	bl	11358 <__errno_location@plt>
   15778:	ldr	r6, [r0]
   1577c:	mov	r5, r0
   15780:	mov	r0, r4
   15784:	bl	145cc <__assert_fail@plt+0x3148>
   15788:	mov	r0, #0
   1578c:	str	r6, [r5]
   15790:	pop	{r4, r5, r6, pc}
   15794:	bl	11358 <__errno_location@plt>
   15798:	ldr	r5, [r0]
   1579c:	mov	r4, r0
   157a0:	mov	r0, r6
   157a4:	bl	1146c <close@plt>
   157a8:	mov	r0, #0
   157ac:	str	r5, [r4]
   157b0:	pop	{r4, r5, r6, pc}
   157b4:	mov	r1, #0
   157b8:	mov	r2, #3
   157bc:	b	157c0 <__assert_fail@plt+0x433c>
   157c0:	push	{r1, r2, r3}
   157c4:	movw	ip, #1030	; 0x406
   157c8:	ldr	r3, [pc, #336]	; 15920 <__assert_fail@plt+0x449c>
   157cc:	push	{r4, r5, r6, r7, r8, lr}
   157d0:	add	r3, pc, r3
   157d4:	ldr	lr, [pc, #328]	; 15924 <__assert_fail@plt+0x44a0>
   157d8:	sub	sp, sp, #12
   157dc:	add	r2, sp, #40	; 0x28
   157e0:	mov	r6, r0
   157e4:	ldr	r1, [sp, #36]	; 0x24
   157e8:	ldr	r4, [r3, lr]
   157ec:	cmp	r1, ip
   157f0:	str	r2, [sp]
   157f4:	ldr	r3, [r4]
   157f8:	str	r3, [sp, #4]
   157fc:	bne	15880 <__assert_fail@plt+0x43fc>
   15800:	ldr	r8, [pc, #288]	; 15928 <__assert_fail@plt+0x44a4>
   15804:	add	r3, sp, #44	; 0x2c
   15808:	str	r3, [sp]
   1580c:	add	r8, pc, r8
   15810:	ldr	r7, [sp, #40]	; 0x28
   15814:	ldr	r3, [r8]
   15818:	mov	r2, r7
   1581c:	cmp	r3, #0
   15820:	blt	1590c <__assert_fail@plt+0x4488>
   15824:	bl	1134c <fcntl@plt>
   15828:	subs	r5, r0, #0
   1582c:	blt	15890 <__assert_fail@plt+0x440c>
   15830:	ldr	r3, [pc, #244]	; 1592c <__assert_fail@plt+0x44a8>
   15834:	mov	r2, #1
   15838:	add	r3, pc, r3
   1583c:	str	r2, [r3]
   15840:	cmp	r5, #0
   15844:	blt	1585c <__assert_fail@plt+0x43d8>
   15848:	ldr	r3, [pc, #224]	; 15930 <__assert_fail@plt+0x44ac>
   1584c:	add	r3, pc, r3
   15850:	ldr	r3, [r3]
   15854:	cmn	r3, #1
   15858:	beq	158c0 <__assert_fail@plt+0x443c>
   1585c:	ldr	r2, [sp, #4]
   15860:	mov	r0, r5
   15864:	ldr	r3, [r4]
   15868:	cmp	r2, r3
   1586c:	bne	1591c <__assert_fail@plt+0x4498>
   15870:	add	sp, sp, #12
   15874:	pop	{r4, r5, r6, r7, r8, lr}
   15878:	add	sp, sp, #12
   1587c:	bx	lr
   15880:	ldr	r2, [sp, #40]	; 0x28
   15884:	bl	1134c <fcntl@plt>
   15888:	mov	r5, r0
   1588c:	b	1585c <__assert_fail@plt+0x43d8>
   15890:	bl	11358 <__errno_location@plt>
   15894:	ldr	r3, [r0]
   15898:	cmp	r3, #22
   1589c:	bne	15830 <__assert_fail@plt+0x43ac>
   158a0:	mov	r0, r6
   158a4:	mov	r2, r7
   158a8:	mov	r1, #0
   158ac:	bl	157c0 <__assert_fail@plt+0x433c>
   158b0:	subs	r5, r0, #0
   158b4:	blt	1585c <__assert_fail@plt+0x43d8>
   158b8:	mvn	r3, #0
   158bc:	str	r3, [r8]
   158c0:	mov	r0, r5
   158c4:	mov	r1, #1
   158c8:	bl	1134c <fcntl@plt>
   158cc:	subs	r2, r0, #0
   158d0:	blt	158ec <__assert_fail@plt+0x4468>
   158d4:	orr	r2, r2, #1
   158d8:	mov	r0, r5
   158dc:	mov	r1, #2
   158e0:	bl	1134c <fcntl@plt>
   158e4:	cmn	r0, #1
   158e8:	bne	1585c <__assert_fail@plt+0x43d8>
   158ec:	bl	11358 <__errno_location@plt>
   158f0:	ldr	r7, [r0]
   158f4:	mov	r6, r0
   158f8:	mov	r0, r5
   158fc:	mvn	r5, #0
   15900:	bl	1146c <close@plt>
   15904:	str	r7, [r6]
   15908:	b	1585c <__assert_fail@plt+0x43d8>
   1590c:	mov	r1, #0
   15910:	bl	157c0 <__assert_fail@plt+0x433c>
   15914:	mov	r5, r0
   15918:	b	15840 <__assert_fail@plt+0x43bc>
   1591c:	bl	11208 <__stack_chk_fail@plt>
   15920:	andeq	r2, r1, r8, lsr #16
   15924:	andeq	r0, r0, r4, lsr #2
   15928:	ldrdeq	r2, [r1], -r4
   1592c:	andeq	r2, r1, r8, lsr #21
   15930:	muleq	r1, r4, sl
   15934:	subs	r2, r1, #1
   15938:	bxeq	lr
   1593c:	bcc	15b14 <__assert_fail@plt+0x4690>
   15940:	cmp	r0, r1
   15944:	bls	15af8 <__assert_fail@plt+0x4674>
   15948:	tst	r1, r2
   1594c:	beq	15b04 <__assert_fail@plt+0x4680>
   15950:	clz	r3, r0
   15954:	clz	r2, r1
   15958:	sub	r3, r2, r3
   1595c:	rsbs	r3, r3, #31
   15960:	addne	r3, r3, r3, lsl #1
   15964:	mov	r2, #0
   15968:	addne	pc, pc, r3, lsl #2
   1596c:	nop	{0}
   15970:	cmp	r0, r1, lsl #31
   15974:	adc	r2, r2, r2
   15978:	subcs	r0, r0, r1, lsl #31
   1597c:	cmp	r0, r1, lsl #30
   15980:	adc	r2, r2, r2
   15984:	subcs	r0, r0, r1, lsl #30
   15988:	cmp	r0, r1, lsl #29
   1598c:	adc	r2, r2, r2
   15990:	subcs	r0, r0, r1, lsl #29
   15994:	cmp	r0, r1, lsl #28
   15998:	adc	r2, r2, r2
   1599c:	subcs	r0, r0, r1, lsl #28
   159a0:	cmp	r0, r1, lsl #27
   159a4:	adc	r2, r2, r2
   159a8:	subcs	r0, r0, r1, lsl #27
   159ac:	cmp	r0, r1, lsl #26
   159b0:	adc	r2, r2, r2
   159b4:	subcs	r0, r0, r1, lsl #26
   159b8:	cmp	r0, r1, lsl #25
   159bc:	adc	r2, r2, r2
   159c0:	subcs	r0, r0, r1, lsl #25
   159c4:	cmp	r0, r1, lsl #24
   159c8:	adc	r2, r2, r2
   159cc:	subcs	r0, r0, r1, lsl #24
   159d0:	cmp	r0, r1, lsl #23
   159d4:	adc	r2, r2, r2
   159d8:	subcs	r0, r0, r1, lsl #23
   159dc:	cmp	r0, r1, lsl #22
   159e0:	adc	r2, r2, r2
   159e4:	subcs	r0, r0, r1, lsl #22
   159e8:	cmp	r0, r1, lsl #21
   159ec:	adc	r2, r2, r2
   159f0:	subcs	r0, r0, r1, lsl #21
   159f4:	cmp	r0, r1, lsl #20
   159f8:	adc	r2, r2, r2
   159fc:	subcs	r0, r0, r1, lsl #20
   15a00:	cmp	r0, r1, lsl #19
   15a04:	adc	r2, r2, r2
   15a08:	subcs	r0, r0, r1, lsl #19
   15a0c:	cmp	r0, r1, lsl #18
   15a10:	adc	r2, r2, r2
   15a14:	subcs	r0, r0, r1, lsl #18
   15a18:	cmp	r0, r1, lsl #17
   15a1c:	adc	r2, r2, r2
   15a20:	subcs	r0, r0, r1, lsl #17
   15a24:	cmp	r0, r1, lsl #16
   15a28:	adc	r2, r2, r2
   15a2c:	subcs	r0, r0, r1, lsl #16
   15a30:	cmp	r0, r1, lsl #15
   15a34:	adc	r2, r2, r2
   15a38:	subcs	r0, r0, r1, lsl #15
   15a3c:	cmp	r0, r1, lsl #14
   15a40:	adc	r2, r2, r2
   15a44:	subcs	r0, r0, r1, lsl #14
   15a48:	cmp	r0, r1, lsl #13
   15a4c:	adc	r2, r2, r2
   15a50:	subcs	r0, r0, r1, lsl #13
   15a54:	cmp	r0, r1, lsl #12
   15a58:	adc	r2, r2, r2
   15a5c:	subcs	r0, r0, r1, lsl #12
   15a60:	cmp	r0, r1, lsl #11
   15a64:	adc	r2, r2, r2
   15a68:	subcs	r0, r0, r1, lsl #11
   15a6c:	cmp	r0, r1, lsl #10
   15a70:	adc	r2, r2, r2
   15a74:	subcs	r0, r0, r1, lsl #10
   15a78:	cmp	r0, r1, lsl #9
   15a7c:	adc	r2, r2, r2
   15a80:	subcs	r0, r0, r1, lsl #9
   15a84:	cmp	r0, r1, lsl #8
   15a88:	adc	r2, r2, r2
   15a8c:	subcs	r0, r0, r1, lsl #8
   15a90:	cmp	r0, r1, lsl #7
   15a94:	adc	r2, r2, r2
   15a98:	subcs	r0, r0, r1, lsl #7
   15a9c:	cmp	r0, r1, lsl #6
   15aa0:	adc	r2, r2, r2
   15aa4:	subcs	r0, r0, r1, lsl #6
   15aa8:	cmp	r0, r1, lsl #5
   15aac:	adc	r2, r2, r2
   15ab0:	subcs	r0, r0, r1, lsl #5
   15ab4:	cmp	r0, r1, lsl #4
   15ab8:	adc	r2, r2, r2
   15abc:	subcs	r0, r0, r1, lsl #4
   15ac0:	cmp	r0, r1, lsl #3
   15ac4:	adc	r2, r2, r2
   15ac8:	subcs	r0, r0, r1, lsl #3
   15acc:	cmp	r0, r1, lsl #2
   15ad0:	adc	r2, r2, r2
   15ad4:	subcs	r0, r0, r1, lsl #2
   15ad8:	cmp	r0, r1, lsl #1
   15adc:	adc	r2, r2, r2
   15ae0:	subcs	r0, r0, r1, lsl #1
   15ae4:	cmp	r0, r1
   15ae8:	adc	r2, r2, r2
   15aec:	subcs	r0, r0, r1
   15af0:	mov	r0, r2
   15af4:	bx	lr
   15af8:	moveq	r0, #1
   15afc:	movne	r0, #0
   15b00:	bx	lr
   15b04:	clz	r2, r1
   15b08:	rsb	r2, r2, #31
   15b0c:	lsr	r0, r0, r2
   15b10:	bx	lr
   15b14:	cmp	r0, #0
   15b18:	mvnne	r0, #0
   15b1c:	b	15b7c <__assert_fail@plt+0x46f8>
   15b20:	cmp	r1, #0
   15b24:	beq	15b14 <__assert_fail@plt+0x4690>
   15b28:	push	{r0, r1, lr}
   15b2c:	bl	15934 <__assert_fail@plt+0x44b0>
   15b30:	pop	{r1, r2, lr}
   15b34:	mul	r3, r2, r0
   15b38:	sub	r1, r1, r3
   15b3c:	bx	lr
   15b40:	cmp	r3, #0
   15b44:	cmpeq	r2, #0
   15b48:	bne	15b60 <__assert_fail@plt+0x46dc>
   15b4c:	cmp	r1, #0
   15b50:	cmpeq	r0, #0
   15b54:	mvnne	r1, #0
   15b58:	mvnne	r0, #0
   15b5c:	b	15b7c <__assert_fail@plt+0x46f8>
   15b60:	sub	sp, sp, #8
   15b64:	push	{sp, lr}
   15b68:	bl	15bc8 <__assert_fail@plt+0x4744>
   15b6c:	ldr	lr, [sp, #4]
   15b70:	add	sp, sp, #8
   15b74:	pop	{r2, r3}
   15b78:	bx	lr
   15b7c:	push	{r1, lr}
   15b80:	mov	r0, #8
   15b84:	bl	11178 <raise@plt>
   15b88:	pop	{r1, pc}
   15b8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b90:	mov	r8, r2
   15b94:	mov	r6, r0
   15b98:	mov	r7, r1
   15b9c:	mov	sl, r3
   15ba0:	ldr	r9, [sp, #32]
   15ba4:	bl	15c04 <__assert_fail@plt+0x4780>
   15ba8:	umull	r4, r5, r8, r0
   15bac:	mul	r8, r8, r1
   15bb0:	mla	r2, r0, sl, r8
   15bb4:	add	r5, r2, r5
   15bb8:	subs	r4, r6, r4
   15bbc:	sbc	r5, r7, r5
   15bc0:	strd	r4, [r9]
   15bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bc8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15bcc:	mov	r8, r2
   15bd0:	mov	r6, r0
   15bd4:	mov	r7, r1
   15bd8:	mov	r5, r3
   15bdc:	ldr	r9, [sp, #32]
   15be0:	bl	16090 <__assert_fail@plt+0x4c0c>
   15be4:	mul	r3, r0, r5
   15be8:	umull	r4, r5, r0, r8
   15bec:	mla	r8, r8, r1, r3
   15bf0:	add	r5, r8, r5
   15bf4:	subs	r4, r6, r4
   15bf8:	sbc	r5, r7, r5
   15bfc:	strd	r4, [r9]
   15c00:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c08:	rsbs	r4, r0, #0
   15c0c:	rsc	r5, r1, #0
   15c10:	cmp	r1, #0
   15c14:	mvn	r6, #0
   15c18:	sub	sp, sp, #12
   15c1c:	movge	r4, r0
   15c20:	movge	r5, r1
   15c24:	movge	r6, #0
   15c28:	cmp	r3, #0
   15c2c:	blt	15e64 <__assert_fail@plt+0x49e0>
   15c30:	cmp	r3, #0
   15c34:	mov	sl, r4
   15c38:	mov	ip, r5
   15c3c:	mov	r0, r2
   15c40:	mov	r1, r3
   15c44:	mov	r8, r2
   15c48:	mov	r7, r4
   15c4c:	mov	r9, r5
   15c50:	bne	15d48 <__assert_fail@plt+0x48c4>
   15c54:	cmp	r2, r5
   15c58:	bls	15d84 <__assert_fail@plt+0x4900>
   15c5c:	clz	r3, r2
   15c60:	cmp	r3, #0
   15c64:	rsbne	r2, r3, #32
   15c68:	lslne	r8, r0, r3
   15c6c:	lsrne	r2, r4, r2
   15c70:	lslne	r7, r4, r3
   15c74:	orrne	r9, r2, r5, lsl r3
   15c78:	lsr	r4, r8, #16
   15c7c:	uxth	sl, r8
   15c80:	mov	r1, r4
   15c84:	mov	r0, r9
   15c88:	bl	15934 <__assert_fail@plt+0x44b0>
   15c8c:	mov	r1, r4
   15c90:	mov	fp, r0
   15c94:	mov	r0, r9
   15c98:	bl	15b20 <__assert_fail@plt+0x469c>
   15c9c:	mul	r0, sl, fp
   15ca0:	lsr	r2, r7, #16
   15ca4:	orr	r1, r2, r1, lsl #16
   15ca8:	cmp	r0, r1
   15cac:	bls	15cd0 <__assert_fail@plt+0x484c>
   15cb0:	adds	r1, r1, r8
   15cb4:	sub	r3, fp, #1
   15cb8:	bcs	15ccc <__assert_fail@plt+0x4848>
   15cbc:	cmp	r0, r1
   15cc0:	subhi	fp, fp, #2
   15cc4:	addhi	r1, r1, r8
   15cc8:	bhi	15cd0 <__assert_fail@plt+0x484c>
   15ccc:	mov	fp, r3
   15cd0:	rsb	r9, r0, r1
   15cd4:	mov	r1, r4
   15cd8:	uxth	r7, r7
   15cdc:	mov	r0, r9
   15ce0:	bl	15934 <__assert_fail@plt+0x44b0>
   15ce4:	mov	r1, r4
   15ce8:	mov	r5, r0
   15cec:	mov	r0, r9
   15cf0:	bl	15b20 <__assert_fail@plt+0x469c>
   15cf4:	mul	sl, sl, r5
   15cf8:	orr	r1, r7, r1, lsl #16
   15cfc:	cmp	sl, r1
   15d00:	bls	15d20 <__assert_fail@plt+0x489c>
   15d04:	adds	r8, r1, r8
   15d08:	sub	r3, r5, #1
   15d0c:	bcs	15d1c <__assert_fail@plt+0x4898>
   15d10:	cmp	sl, r8
   15d14:	subhi	r5, r5, #2
   15d18:	bhi	15d20 <__assert_fail@plt+0x489c>
   15d1c:	mov	r5, r3
   15d20:	orr	r3, r5, fp, lsl #16
   15d24:	mov	r4, #0
   15d28:	cmp	r6, #0
   15d2c:	mov	r0, r3
   15d30:	mov	r1, r4
   15d34:	beq	15d40 <__assert_fail@plt+0x48bc>
   15d38:	rsbs	r0, r0, #0
   15d3c:	rsc	r1, r1, #0
   15d40:	add	sp, sp, #12
   15d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d48:	cmp	r3, r5
   15d4c:	movhi	r4, #0
   15d50:	movhi	r3, r4
   15d54:	bhi	15d28 <__assert_fail@plt+0x48a4>
   15d58:	clz	r5, r1
   15d5c:	cmp	r5, #0
   15d60:	bne	15f50 <__assert_fail@plt+0x4acc>
   15d64:	cmp	r1, ip
   15d68:	cmpcs	r2, sl
   15d6c:	movhi	r4, #0
   15d70:	movls	r4, #1
   15d74:	movls	r3, #1
   15d78:	movls	r4, r5
   15d7c:	movhi	r3, r4
   15d80:	b	15d28 <__assert_fail@plt+0x48a4>
   15d84:	cmp	r2, #0
   15d88:	bne	15d9c <__assert_fail@plt+0x4918>
   15d8c:	mov	r1, r2
   15d90:	mov	r0, #1
   15d94:	bl	15934 <__assert_fail@plt+0x44b0>
   15d98:	mov	r8, r0
   15d9c:	clz	r3, r8
   15da0:	cmp	r3, #0
   15da4:	bne	15e74 <__assert_fail@plt+0x49f0>
   15da8:	rsb	r9, r8, r9
   15dac:	lsr	r5, r8, #16
   15db0:	uxth	sl, r8
   15db4:	mov	r4, #1
   15db8:	mov	r1, r5
   15dbc:	mov	r0, r9
   15dc0:	bl	15934 <__assert_fail@plt+0x44b0>
   15dc4:	mov	r1, r5
   15dc8:	mov	fp, r0
   15dcc:	mov	r0, r9
   15dd0:	bl	15b20 <__assert_fail@plt+0x469c>
   15dd4:	mul	r0, sl, fp
   15dd8:	lsr	r2, r7, #16
   15ddc:	orr	r1, r2, r1, lsl #16
   15de0:	cmp	r0, r1
   15de4:	bls	15e04 <__assert_fail@plt+0x4980>
   15de8:	adds	r1, r1, r8
   15dec:	sub	r3, fp, #1
   15df0:	bcs	16070 <__assert_fail@plt+0x4bec>
   15df4:	cmp	r0, r1
   15df8:	subhi	fp, fp, #2
   15dfc:	addhi	r1, r1, r8
   15e00:	bls	16070 <__assert_fail@plt+0x4bec>
   15e04:	rsb	r2, r0, r1
   15e08:	mov	r1, r5
   15e0c:	str	r2, [sp]
   15e10:	uxth	r7, r7
   15e14:	mov	r0, r2
   15e18:	bl	15934 <__assert_fail@plt+0x44b0>
   15e1c:	ldr	r2, [sp]
   15e20:	mov	r1, r5
   15e24:	mov	r9, r0
   15e28:	mov	r0, r2
   15e2c:	bl	15b20 <__assert_fail@plt+0x469c>
   15e30:	mul	sl, sl, r9
   15e34:	orr	r1, r7, r1, lsl #16
   15e38:	cmp	sl, r1
   15e3c:	bls	15e5c <__assert_fail@plt+0x49d8>
   15e40:	adds	r8, r1, r8
   15e44:	sub	r3, r9, #1
   15e48:	bcs	15e58 <__assert_fail@plt+0x49d4>
   15e4c:	cmp	sl, r8
   15e50:	subhi	r9, r9, #2
   15e54:	bhi	15e5c <__assert_fail@plt+0x49d8>
   15e58:	mov	r9, r3
   15e5c:	orr	r3, r9, fp, lsl #16
   15e60:	b	15d28 <__assert_fail@plt+0x48a4>
   15e64:	mvn	r6, r6
   15e68:	rsbs	r2, r2, #0
   15e6c:	rsc	r3, r3, #0
   15e70:	b	15c30 <__assert_fail@plt+0x47ac>
   15e74:	lsl	r8, r8, r3
   15e78:	rsb	fp, r3, #32
   15e7c:	lsr	r4, r9, fp
   15e80:	lsr	fp, r7, fp
   15e84:	lsr	r5, r8, #16
   15e88:	orr	fp, fp, r9, lsl r3
   15e8c:	mov	r0, r4
   15e90:	lsl	r7, r7, r3
   15e94:	mov	r1, r5
   15e98:	uxth	sl, r8
   15e9c:	bl	15934 <__assert_fail@plt+0x44b0>
   15ea0:	mov	r1, r5
   15ea4:	mov	r3, r0
   15ea8:	mov	r0, r4
   15eac:	str	r3, [sp]
   15eb0:	bl	15b20 <__assert_fail@plt+0x469c>
   15eb4:	ldr	r3, [sp]
   15eb8:	lsr	r2, fp, #16
   15ebc:	mul	r0, sl, r3
   15ec0:	orr	r1, r2, r1, lsl #16
   15ec4:	cmp	r0, r1
   15ec8:	bls	15ee8 <__assert_fail@plt+0x4a64>
   15ecc:	adds	r1, r1, r8
   15ed0:	sub	r2, r3, #1
   15ed4:	bcs	16088 <__assert_fail@plt+0x4c04>
   15ed8:	cmp	r0, r1
   15edc:	subhi	r3, r3, #2
   15ee0:	addhi	r1, r1, r8
   15ee4:	bls	16088 <__assert_fail@plt+0x4c04>
   15ee8:	rsb	r9, r0, r1
   15eec:	mov	r1, r5
   15ef0:	str	r3, [sp]
   15ef4:	uxth	fp, fp
   15ef8:	mov	r0, r9
   15efc:	bl	15934 <__assert_fail@plt+0x44b0>
   15f00:	mov	r1, r5
   15f04:	mov	r4, r0
   15f08:	mov	r0, r9
   15f0c:	bl	15b20 <__assert_fail@plt+0x469c>
   15f10:	mul	r9, sl, r4
   15f14:	ldr	r3, [sp]
   15f18:	orr	r1, fp, r1, lsl #16
   15f1c:	cmp	r9, r1
   15f20:	bls	15f44 <__assert_fail@plt+0x4ac0>
   15f24:	adds	r1, r1, r8
   15f28:	sub	r2, r4, #1
   15f2c:	bcs	15f40 <__assert_fail@plt+0x4abc>
   15f30:	cmp	r9, r1
   15f34:	subhi	r4, r4, #2
   15f38:	addhi	r1, r1, r8
   15f3c:	bhi	15f44 <__assert_fail@plt+0x4ac0>
   15f40:	mov	r4, r2
   15f44:	rsb	r9, r9, r1
   15f48:	orr	r4, r4, r3, lsl #16
   15f4c:	b	15db8 <__assert_fail@plt+0x4934>
   15f50:	rsb	sl, r5, #32
   15f54:	lsl	r3, r2, r5
   15f58:	lsr	r0, r2, sl
   15f5c:	lsr	r2, ip, sl
   15f60:	orr	r4, r0, r1, lsl r5
   15f64:	lsr	sl, r7, sl
   15f68:	mov	r0, r2
   15f6c:	orr	sl, sl, ip, lsl r5
   15f70:	lsr	r9, r4, #16
   15f74:	str	r3, [sp, #4]
   15f78:	str	r2, [sp]
   15f7c:	uxth	fp, r4
   15f80:	mov	r1, r9
   15f84:	bl	15934 <__assert_fail@plt+0x44b0>
   15f88:	ldr	r2, [sp]
   15f8c:	mov	r1, r9
   15f90:	mov	r8, r0
   15f94:	mov	r0, r2
   15f98:	bl	15b20 <__assert_fail@plt+0x469c>
   15f9c:	mul	r0, fp, r8
   15fa0:	lsr	r2, sl, #16
   15fa4:	orr	r1, r2, r1, lsl #16
   15fa8:	cmp	r0, r1
   15fac:	bls	15fcc <__assert_fail@plt+0x4b48>
   15fb0:	adds	r1, r1, r4
   15fb4:	sub	r2, r8, #1
   15fb8:	bcs	16080 <__assert_fail@plt+0x4bfc>
   15fbc:	cmp	r0, r1
   15fc0:	subhi	r8, r8, #2
   15fc4:	addhi	r1, r1, r4
   15fc8:	bls	16080 <__assert_fail@plt+0x4bfc>
   15fcc:	rsb	ip, r0, r1
   15fd0:	mov	r1, r9
   15fd4:	str	ip, [sp]
   15fd8:	mov	r0, ip
   15fdc:	bl	15934 <__assert_fail@plt+0x44b0>
   15fe0:	ldr	ip, [sp]
   15fe4:	mov	r1, r9
   15fe8:	mov	r2, r0
   15fec:	mov	r0, ip
   15ff0:	str	r2, [sp]
   15ff4:	bl	15b20 <__assert_fail@plt+0x469c>
   15ff8:	ldr	r2, [sp]
   15ffc:	uxth	ip, sl
   16000:	mul	fp, fp, r2
   16004:	orr	ip, ip, r1, lsl #16
   16008:	cmp	fp, ip
   1600c:	bls	1602c <__assert_fail@plt+0x4ba8>
   16010:	adds	ip, ip, r4
   16014:	sub	r1, r2, #1
   16018:	bcs	16078 <__assert_fail@plt+0x4bf4>
   1601c:	cmp	fp, ip
   16020:	subhi	r2, r2, #2
   16024:	addhi	ip, ip, r4
   16028:	bls	16078 <__assert_fail@plt+0x4bf4>
   1602c:	ldr	r0, [sp, #4]
   16030:	orr	r1, r2, r8, lsl #16
   16034:	rsb	fp, fp, ip
   16038:	umull	r2, r3, r1, r0
   1603c:	cmp	fp, r3
   16040:	bcc	16064 <__assert_fail@plt+0x4be0>
   16044:	movne	r4, #0
   16048:	moveq	r4, #1
   1604c:	cmp	r2, r7, lsl r5
   16050:	movls	r4, #0
   16054:	andhi	r4, r4, #1
   16058:	cmp	r4, #0
   1605c:	moveq	r3, r1
   16060:	beq	15d28 <__assert_fail@plt+0x48a4>
   16064:	sub	r3, r1, #1
   16068:	mov	r4, #0
   1606c:	b	15d28 <__assert_fail@plt+0x48a4>
   16070:	mov	fp, r3
   16074:	b	15e04 <__assert_fail@plt+0x4980>
   16078:	mov	r2, r1
   1607c:	b	1602c <__assert_fail@plt+0x4ba8>
   16080:	mov	r8, r2
   16084:	b	15fcc <__assert_fail@plt+0x4b48>
   16088:	mov	r3, r2
   1608c:	b	15ee8 <__assert_fail@plt+0x4a64>
   16090:	cmp	r3, #0
   16094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16098:	mov	r6, r0
   1609c:	sub	sp, sp, #12
   160a0:	mov	r5, r1
   160a4:	mov	r7, r0
   160a8:	mov	r4, r2
   160ac:	mov	r8, r1
   160b0:	bne	16190 <__assert_fail@plt+0x4d0c>
   160b4:	cmp	r2, r1
   160b8:	bls	161cc <__assert_fail@plt+0x4d48>
   160bc:	clz	r3, r2
   160c0:	cmp	r3, #0
   160c4:	rsbne	r8, r3, #32
   160c8:	lslne	r4, r2, r3
   160cc:	lsrne	r8, r0, r8
   160d0:	lslne	r7, r0, r3
   160d4:	orrne	r8, r8, r1, lsl r3
   160d8:	lsr	r5, r4, #16
   160dc:	uxth	sl, r4
   160e0:	mov	r1, r5
   160e4:	mov	r0, r8
   160e8:	bl	15934 <__assert_fail@plt+0x44b0>
   160ec:	mov	r1, r5
   160f0:	mov	r9, r0
   160f4:	mov	r0, r8
   160f8:	bl	15b20 <__assert_fail@plt+0x469c>
   160fc:	mul	r0, sl, r9
   16100:	lsr	r3, r7, #16
   16104:	orr	r1, r3, r1, lsl #16
   16108:	cmp	r0, r1
   1610c:	bls	16130 <__assert_fail@plt+0x4cac>
   16110:	adds	r1, r1, r4
   16114:	sub	r2, r9, #1
   16118:	bcs	1612c <__assert_fail@plt+0x4ca8>
   1611c:	cmp	r0, r1
   16120:	subhi	r9, r9, #2
   16124:	addhi	r1, r1, r4
   16128:	bhi	16130 <__assert_fail@plt+0x4cac>
   1612c:	mov	r9, r2
   16130:	rsb	r8, r0, r1
   16134:	mov	r1, r5
   16138:	uxth	r7, r7
   1613c:	mov	r0, r8
   16140:	bl	15934 <__assert_fail@plt+0x44b0>
   16144:	mov	r1, r5
   16148:	mov	r6, r0
   1614c:	mov	r0, r8
   16150:	bl	15b20 <__assert_fail@plt+0x469c>
   16154:	mul	sl, sl, r6
   16158:	orr	r1, r7, r1, lsl #16
   1615c:	cmp	sl, r1
   16160:	bls	1617c <__assert_fail@plt+0x4cf8>
   16164:	adds	r4, r1, r4
   16168:	sub	r3, r6, #1
   1616c:	bcs	16478 <__assert_fail@plt+0x4ff4>
   16170:	cmp	sl, r4
   16174:	subhi	r6, r6, #2
   16178:	bls	16478 <__assert_fail@plt+0x4ff4>
   1617c:	orr	r0, r6, r9, lsl #16
   16180:	mov	r6, #0
   16184:	mov	r1, r6
   16188:	add	sp, sp, #12
   1618c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16190:	cmp	r3, r1
   16194:	movhi	r6, #0
   16198:	movhi	r0, r6
   1619c:	bhi	16184 <__assert_fail@plt+0x4d00>
   161a0:	clz	r7, r3
   161a4:	cmp	r7, #0
   161a8:	bne	162a8 <__assert_fail@plt+0x4e24>
   161ac:	cmp	r3, r1
   161b0:	cmpcs	r2, r6
   161b4:	movhi	r6, #0
   161b8:	movls	r6, #1
   161bc:	movls	r0, #1
   161c0:	movls	r6, r7
   161c4:	movhi	r0, r6
   161c8:	b	16184 <__assert_fail@plt+0x4d00>
   161cc:	cmp	r2, #0
   161d0:	bne	161e4 <__assert_fail@plt+0x4d60>
   161d4:	mov	r1, r2
   161d8:	mov	r0, #1
   161dc:	bl	15934 <__assert_fail@plt+0x44b0>
   161e0:	mov	r4, r0
   161e4:	clz	r3, r4
   161e8:	cmp	r3, #0
   161ec:	bne	163a4 <__assert_fail@plt+0x4f20>
   161f0:	rsb	r5, r4, r5
   161f4:	lsr	r8, r4, #16
   161f8:	uxth	sl, r4
   161fc:	mov	r6, #1
   16200:	mov	r1, r8
   16204:	mov	r0, r5
   16208:	bl	15934 <__assert_fail@plt+0x44b0>
   1620c:	mov	r1, r8
   16210:	mov	r9, r0
   16214:	mov	r0, r5
   16218:	bl	15b20 <__assert_fail@plt+0x469c>
   1621c:	mul	r0, sl, r9
   16220:	lsr	r3, r7, #16
   16224:	orr	r1, r3, r1, lsl #16
   16228:	cmp	r0, r1
   1622c:	bls	1624c <__assert_fail@plt+0x4dc8>
   16230:	adds	r1, r1, r4
   16234:	sub	r2, r9, #1
   16238:	bcs	16480 <__assert_fail@plt+0x4ffc>
   1623c:	cmp	r0, r1
   16240:	subhi	r9, r9, #2
   16244:	addhi	r1, r1, r4
   16248:	bls	16480 <__assert_fail@plt+0x4ffc>
   1624c:	rsb	fp, r0, r1
   16250:	mov	r1, r8
   16254:	uxth	r7, r7
   16258:	mov	r0, fp
   1625c:	bl	15934 <__assert_fail@plt+0x44b0>
   16260:	mov	r1, r8
   16264:	mov	r5, r0
   16268:	mov	r0, fp
   1626c:	bl	15b20 <__assert_fail@plt+0x469c>
   16270:	mul	sl, sl, r5
   16274:	orr	r1, r7, r1, lsl #16
   16278:	cmp	sl, r1
   1627c:	bls	16298 <__assert_fail@plt+0x4e14>
   16280:	adds	r4, r1, r4
   16284:	sub	r3, r5, #1
   16288:	bcs	16488 <__assert_fail@plt+0x5004>
   1628c:	cmp	sl, r4
   16290:	subhi	r5, r5, #2
   16294:	bls	16488 <__assert_fail@plt+0x5004>
   16298:	orr	r0, r5, r9, lsl #16
   1629c:	mov	r1, r6
   162a0:	add	sp, sp, #12
   162a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162a8:	rsb	r1, r7, #32
   162ac:	lsl	r0, r2, r7
   162b0:	lsr	r2, r2, r1
   162b4:	lsr	fp, r5, r1
   162b8:	orr	r8, r2, r3, lsl r7
   162bc:	lsr	r1, r6, r1
   162c0:	str	r0, [sp, #4]
   162c4:	orr	r5, r1, r5, lsl r7
   162c8:	lsr	r9, r8, #16
   162cc:	mov	r0, fp
   162d0:	uxth	sl, r8
   162d4:	mov	r1, r9
   162d8:	bl	15934 <__assert_fail@plt+0x44b0>
   162dc:	mov	r1, r9
   162e0:	mov	r4, r0
   162e4:	mov	r0, fp
   162e8:	bl	15b20 <__assert_fail@plt+0x469c>
   162ec:	mul	r0, sl, r4
   162f0:	lsr	ip, r5, #16
   162f4:	orr	r1, ip, r1, lsl #16
   162f8:	cmp	r0, r1
   162fc:	bls	16310 <__assert_fail@plt+0x4e8c>
   16300:	adds	r1, r1, r8
   16304:	sub	r2, r4, #1
   16308:	bcc	164a4 <__assert_fail@plt+0x5020>
   1630c:	mov	r4, r2
   16310:	rsb	ip, r0, r1
   16314:	mov	r1, r9
   16318:	str	ip, [sp]
   1631c:	uxth	r5, r5
   16320:	mov	r0, ip
   16324:	bl	15934 <__assert_fail@plt+0x44b0>
   16328:	ldr	ip, [sp]
   1632c:	mov	r1, r9
   16330:	mov	fp, r0
   16334:	mov	r0, ip
   16338:	bl	15b20 <__assert_fail@plt+0x469c>
   1633c:	mul	sl, sl, fp
   16340:	orr	r1, r5, r1, lsl #16
   16344:	cmp	sl, r1
   16348:	bls	1635c <__assert_fail@plt+0x4ed8>
   1634c:	adds	r1, r1, r8
   16350:	sub	r2, fp, #1
   16354:	bcc	16490 <__assert_fail@plt+0x500c>
   16358:	mov	fp, r2
   1635c:	ldr	r3, [sp, #4]
   16360:	orr	r0, fp, r4, lsl #16
   16364:	rsb	sl, sl, r1
   16368:	umull	r4, r5, r0, r3
   1636c:	cmp	sl, r5
   16370:	bcc	16390 <__assert_fail@plt+0x4f0c>
   16374:	movne	r3, #0
   16378:	moveq	r3, #1
   1637c:	cmp	r4, r6, lsl r7
   16380:	movls	r6, #0
   16384:	andhi	r6, r3, #1
   16388:	cmp	r6, #0
   1638c:	beq	16184 <__assert_fail@plt+0x4d00>
   16390:	mov	r6, #0
   16394:	sub	r0, r0, #1
   16398:	mov	r1, r6
   1639c:	add	sp, sp, #12
   163a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a4:	lsl	r4, r4, r3
   163a8:	rsb	r9, r3, #32
   163ac:	lsr	r2, r5, r9
   163b0:	lsr	r9, r6, r9
   163b4:	lsr	r8, r4, #16
   163b8:	orr	r9, r9, r5, lsl r3
   163bc:	mov	r0, r2
   163c0:	lsl	r7, r6, r3
   163c4:	mov	r1, r8
   163c8:	str	r2, [sp]
   163cc:	bl	15934 <__assert_fail@plt+0x44b0>
   163d0:	ldr	r2, [sp]
   163d4:	mov	r1, r8
   163d8:	uxth	sl, r4
   163dc:	mov	fp, r0
   163e0:	mov	r0, r2
   163e4:	bl	15b20 <__assert_fail@plt+0x469c>
   163e8:	mul	r0, sl, fp
   163ec:	lsr	r3, r9, #16
   163f0:	orr	r1, r3, r1, lsl #16
   163f4:	cmp	r0, r1
   163f8:	bls	16418 <__assert_fail@plt+0x4f94>
   163fc:	adds	r1, r1, r4
   16400:	sub	r3, fp, #1
   16404:	bcs	164b8 <__assert_fail@plt+0x5034>
   16408:	cmp	r0, r1
   1640c:	subhi	fp, fp, #2
   16410:	addhi	r1, r1, r4
   16414:	bls	164b8 <__assert_fail@plt+0x5034>
   16418:	rsb	r5, r0, r1
   1641c:	mov	r1, r8
   16420:	uxth	r9, r9
   16424:	mov	r0, r5
   16428:	bl	15934 <__assert_fail@plt+0x44b0>
   1642c:	mov	r1, r8
   16430:	mov	r6, r0
   16434:	mov	r0, r5
   16438:	bl	15b20 <__assert_fail@plt+0x469c>
   1643c:	mul	r5, sl, r6
   16440:	orr	r1, r9, r1, lsl #16
   16444:	cmp	r5, r1
   16448:	bls	1646c <__assert_fail@plt+0x4fe8>
   1644c:	adds	r1, r1, r4
   16450:	sub	r3, r6, #1
   16454:	bcs	16468 <__assert_fail@plt+0x4fe4>
   16458:	cmp	r5, r1
   1645c:	subhi	r6, r6, #2
   16460:	addhi	r1, r1, r4
   16464:	bhi	1646c <__assert_fail@plt+0x4fe8>
   16468:	mov	r6, r3
   1646c:	rsb	r5, r5, r1
   16470:	orr	r6, r6, fp, lsl #16
   16474:	b	16200 <__assert_fail@plt+0x4d7c>
   16478:	mov	r6, r3
   1647c:	b	1617c <__assert_fail@plt+0x4cf8>
   16480:	mov	r9, r2
   16484:	b	1624c <__assert_fail@plt+0x4dc8>
   16488:	mov	r5, r3
   1648c:	b	16298 <__assert_fail@plt+0x4e14>
   16490:	cmp	sl, r1
   16494:	subhi	fp, fp, #2
   16498:	addhi	r1, r1, r8
   1649c:	bhi	1635c <__assert_fail@plt+0x4ed8>
   164a0:	b	16358 <__assert_fail@plt+0x4ed4>
   164a4:	cmp	r0, r1
   164a8:	subhi	r4, r4, #2
   164ac:	addhi	r1, r1, r8
   164b0:	bhi	16310 <__assert_fail@plt+0x4e8c>
   164b4:	b	1630c <__assert_fail@plt+0x4e88>
   164b8:	mov	fp, r3
   164bc:	b	16418 <__assert_fail@plt+0x4f94>
   164c0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   164c4:	mov	r7, r0
   164c8:	ldr	r6, [pc, #76]	; 1651c <__assert_fail@plt+0x5098>
   164cc:	mov	r8, r1
   164d0:	ldr	r5, [pc, #72]	; 16520 <__assert_fail@plt+0x509c>
   164d4:	mov	r9, r2
   164d8:	add	r6, pc, r6
   164dc:	bl	11134 <fdopen@plt-0x20>
   164e0:	add	r5, pc, r5
   164e4:	rsb	r6, r5, r6
   164e8:	asrs	r6, r6, #2
   164ec:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   164f0:	sub	r5, r5, #4
   164f4:	mov	r4, #0
   164f8:	add	r4, r4, #1
   164fc:	ldr	r3, [r5, #4]!
   16500:	mov	r0, r7
   16504:	mov	r1, r8
   16508:	mov	r2, r9
   1650c:	blx	r3
   16510:	cmp	r4, r6
   16514:	bne	164f8 <__assert_fail@plt+0x5074>
   16518:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1651c:	andeq	r1, r1, ip, ror r9
   16520:	andeq	r1, r1, r0, ror r9
   16524:	bx	lr
   16528:	ldr	r3, [pc, #28]	; 1654c <__assert_fail@plt+0x50c8>
   1652c:	mov	r1, #0
   16530:	ldr	r2, [pc, #24]	; 16550 <__assert_fail@plt+0x50cc>
   16534:	add	r3, pc, r3
   16538:	ldr	r3, [r3, r2]
   1653c:	cmp	r3, #0
   16540:	ldrne	r2, [r3]
   16544:	moveq	r2, r3
   16548:	b	11364 <__cxa_atexit@plt>
   1654c:	andeq	r1, r1, r4, asr #21
   16550:	andeq	r0, r0, r8, lsr r1

Disassembly of section .fini:

00016554 <.fini>:
   16554:	push	{r3, lr}
   16558:	pop	{r3, pc}
