
centos-preinstalled/env:     file format elf32-littlearm


Disassembly of section .init:

00010ef8 <.init>:
   10ef8:	push	{r3, lr}
   10efc:	bl	11634 <close@plt+0x494>
   10f00:	pop	{r3, pc}

Disassembly of section .plt:

00010f04 <fdopen@plt-0x14>:
   10f04:	push	{lr}		; (str lr, [sp, #-4]!)
   10f08:	ldr	lr, [pc, #4]	; 10f14 <fdopen@plt-0x4>
   10f0c:	add	lr, pc, lr
   10f10:	ldr	pc, [lr, #8]!
   10f14:	andeq	r5, r1, ip, ror #1

00010f18 <fdopen@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #236]!	; 0xec

00010f24 <calloc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #228]!	; 0xe4

00010f30 <fputs_unlocked@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #220]!	; 0xdc

00010f3c <raise@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #212]!	; 0xd4

00010f48 <strcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #204]!	; 0xcc

00010f54 <fflush@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #196]!	; 0xc4

00010f60 <free@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #188]!	; 0xbc

00010f6c <_exit@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #180]!	; 0xb4

00010f78 <memcpy@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #172]!	; 0xac

00010f84 <execvp@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #164]!	; 0xa4

00010f90 <mbsinit@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #156]!	; 0x9c

00010f9c <memcmp@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #148]!	; 0x94

00010fa8 <dcgettext@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #140]!	; 0x8c

00010fb4 <__stack_chk_fail@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #132]!	; 0x84

00010fc0 <realloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #124]!	; 0x7c

00010fcc <textdomain@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #116]!	; 0x74

00010fd8 <iswprint@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #108]!	; 0x6c

00010fe4 <fwrite@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #100]!	; 0x64

00010ff0 <lseek64@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #92]!	; 0x5c

00010ffc <__ctype_get_mb_cur_max@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #84]!	; 0x54

00011008 <strcpy@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #76]!	; 0x4c

00011014 <__fpending@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #68]!	; 0x44

00011020 <mbrtowc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #60]!	; 0x3c

0001102c <error@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #86016	; 0x15000
   11034:	ldr	pc, [ip, #52]!	; 0x34

00011038 <open64@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #86016	; 0x15000
   11040:	ldr	pc, [ip, #44]!	; 0x2c

00011044 <getenv@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #36]!	; 0x24

00011050 <malloc@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #28]!

0001105c <__libc_start_main@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #86016	; 0x15000
   11064:	ldr	pc, [ip, #20]!

00011068 <__freading@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #86016	; 0x15000
   11070:	ldr	pc, [ip, #12]!

00011074 <__gmon_start__@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #86016	; 0x15000
   1107c:	ldr	pc, [ip, #4]!

00011080 <getopt_long@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #20, 20	; 0x14000
   11088:	ldr	pc, [ip, #4092]!	; 0xffc

0001108c <__ctype_b_loc@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #20, 20	; 0x14000
   11094:	ldr	pc, [ip, #4084]!	; 0xff4

00011098 <exit@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #20, 20	; 0x14000
   110a0:	ldr	pc, [ip, #4076]!	; 0xfec

000110a4 <strlen@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #20, 20	; 0x14000
   110ac:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b0 <strchr@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #20, 20	; 0x14000
   110b8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110bc <ungetc@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #20, 20	; 0x14000
   110c4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110c8 <__errno_location@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #20, 20	; 0x14000
   110d0:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d4 <__cxa_atexit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #20, 20	; 0x14000
   110dc:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e0 <memset@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #20, 20	; 0x14000
   110e8:	ldr	pc, [ip, #4028]!	; 0xfbc

000110ec <fscanf@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #20, 20	; 0x14000
   110f4:	ldr	pc, [ip, #4020]!	; 0xfb4

000110f8 <__printf_chk@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #20, 20	; 0x14000
   11100:	ldr	pc, [ip, #4012]!	; 0xfac

00011104 <fileno@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #20, 20	; 0x14000
   1110c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011110 <__fprintf_chk@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #20, 20	; 0x14000
   11118:	ldr	pc, [ip, #3996]!	; 0xf9c

0001111c <fclose@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #20, 20	; 0x14000
   11124:	ldr	pc, [ip, #3988]!	; 0xf94

00011128 <fseeko64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #20, 20	; 0x14000
   11130:	ldr	pc, [ip, #3980]!	; 0xf8c

00011134 <__uflow@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #20, 20	; 0x14000
   1113c:	ldr	pc, [ip, #3972]!	; 0xf84

00011140 <setlocale@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #20, 20	; 0x14000
   11148:	ldr	pc, [ip, #3964]!	; 0xf7c

0001114c <putenv@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #20, 20	; 0x14000
   11154:	ldr	pc, [ip, #3956]!	; 0xf74

00011158 <strrchr@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #20, 20	; 0x14000
   11160:	ldr	pc, [ip, #3948]!	; 0xf6c

00011164 <nl_langinfo@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #20, 20	; 0x14000
   1116c:	ldr	pc, [ip, #3940]!	; 0xf64

00011170 <bindtextdomain@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #20, 20	; 0x14000
   11178:	ldr	pc, [ip, #3932]!	; 0xf5c

0001117c <unsetenv@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #20, 20	; 0x14000
   11184:	ldr	pc, [ip, #3924]!	; 0xf54

00011188 <strncmp@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #20, 20	; 0x14000
   11190:	ldr	pc, [ip, #3916]!	; 0xf4c

00011194 <abort@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #20, 20	; 0x14000
   1119c:	ldr	pc, [ip, #3908]!	; 0xf44

000111a0 <close@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #20, 20	; 0x14000
   111a8:	ldr	pc, [ip, #3900]!	; 0xf3c

Disassembly of section .text:

000111ac <close_stdout@@Base-0x7e4>:
   111ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111b0:	mov	r6, r0
   111b4:	sub	sp, sp, #36	; 0x24
   111b8:	ldr	r0, [r1]
   111bc:	mov	r4, r1
   111c0:	bl	11b4c <close_stdout@@Base+0x1bc>
   111c4:	ldr	r1, [pc, #968]	; 11594 <close@plt+0x3f4>
   111c8:	mov	r0, #6
   111cc:	ldr	r5, [pc, #964]	; 11598 <close@plt+0x3f8>
   111d0:	mov	r7, #0
   111d4:	add	r1, pc, r1
   111d8:	ldr	r9, [pc, #956]	; 1159c <close@plt+0x3fc>
   111dc:	bl	11140 <setlocale@plt>
   111e0:	add	r5, pc, r5
   111e4:	ldr	r1, [pc, #948]	; 115a0 <close@plt+0x400>
   111e8:	mov	sl, r7
   111ec:	mov	r0, r5
   111f0:	str	r7, [sp, #24]
   111f4:	add	r1, pc, r1
   111f8:	ldr	r8, [pc, #932]	; 115a4 <close@plt+0x404>
   111fc:	bl	11170 <bindtextdomain@plt>
   11200:	mov	r0, r5
   11204:	ldr	r5, [pc, #924]	; 115a8 <close@plt+0x408>
   11208:	bl	10fcc <textdomain@plt>
   1120c:	ldr	r2, [pc, #920]	; 115ac <close@plt+0x40c>
   11210:	mov	r1, #125	; 0x7d
   11214:	add	r5, pc, r5
   11218:	ldr	r3, [pc, #912]	; 115b0 <close@plt+0x410>
   1121c:	add	r9, pc, r9
   11220:	add	r8, pc, r8
   11224:	ldr	r2, [r5, r2]
   11228:	str	r1, [r2]
   1122c:	ldr	r0, [r5, r3]
   11230:	bl	14480 <close_stdout@@Base+0x2af0>
   11234:	str	sl, [sp]
   11238:	mov	r0, r6
   1123c:	mov	r1, r4
   11240:	mov	r2, r9
   11244:	mov	r3, r8
   11248:	mov	fp, #0
   1124c:	bl	11080 <getopt_long@plt>
   11250:	cmn	r0, #1
   11254:	beq	112f0 <close@plt+0x150>
   11258:	cmp	r0, #48	; 0x30
   1125c:	beq	112e8 <close@plt+0x148>
   11260:	bgt	1127c <close@plt+0xdc>
   11264:	cmn	r0, #3
   11268:	beq	11294 <close@plt+0xf4>
   1126c:	cmn	r0, #2
   11270:	bne	1128c <close@plt+0xec>
   11274:	mov	r0, fp
   11278:	bl	1172c <close@plt+0x58c>
   1127c:	cmp	r0, #105	; 0x69
   11280:	beq	112dc <close@plt+0x13c>
   11284:	cmp	r0, #117	; 0x75
   11288:	beq	11234 <close@plt+0x94>
   1128c:	mov	r0, #125	; 0x7d
   11290:	bl	1172c <close@plt+0x58c>
   11294:	ldr	r2, [pc, #792]	; 115b4 <close@plt+0x414>
   11298:	ldr	r3, [pc, #792]	; 115b8 <close@plt+0x418>
   1129c:	ldr	r1, [pc, #792]	; 115bc <close@plt+0x41c>
   112a0:	ldr	r0, [r5, r2]
   112a4:	ldr	r3, [r5, r3]
   112a8:	add	r1, pc, r1
   112ac:	ldr	r2, [pc, #780]	; 115c0 <close@plt+0x420>
   112b0:	ldr	r0, [r0]
   112b4:	add	r2, pc, r2
   112b8:	ldr	r3, [r3]
   112bc:	stm	sp, {r1, r2, fp}
   112c0:	ldr	r1, [pc, #764]	; 115c4 <close@plt+0x424>
   112c4:	ldr	r2, [pc, #764]	; 115c8 <close@plt+0x428>
   112c8:	add	r1, pc, r1
   112cc:	add	r2, pc, r2
   112d0:	bl	13838 <close_stdout@@Base+0x1ea8>
   112d4:	mov	r0, fp
   112d8:	bl	11098 <exit@plt>
   112dc:	mov	r3, #1
   112e0:	str	r3, [sp, #24]
   112e4:	b	11234 <close@plt+0x94>
   112e8:	mov	r7, #1
   112ec:	b	11234 <close@plt+0x94>
   112f0:	ldr	r3, [pc, #724]	; 115cc <close@plt+0x42c>
   112f4:	ldr	r8, [r5, r3]
   112f8:	ldr	r3, [r8]
   112fc:	cmp	r6, r3
   11300:	ble	114bc <close@plt+0x31c>
   11304:	ldr	r3, [r4, r3, lsl #2]
   11308:	ldrb	r2, [r3]
   1130c:	cmp	r2, #45	; 0x2d
   11310:	bne	114bc <close@plt+0x31c>
   11314:	ldrb	r3, [r3, #1]
   11318:	cmp	r3, fp
   1131c:	bne	114bc <close@plt+0x31c>
   11320:	ldr	r3, [pc, #680]	; 115d0 <close@plt+0x430>
   11324:	ldr	r2, [pc, #680]	; 115d4 <close@plt+0x434>
   11328:	ldr	r3, [r5, r3]
   1132c:	add	r2, pc, r2
   11330:	str	r2, [r3]
   11334:	ldr	sl, [pc, #668]	; 115d8 <close@plt+0x438>
   11338:	mov	r9, #0
   1133c:	ldr	fp, [pc, #664]	; 115dc <close@plt+0x43c>
   11340:	ldr	r3, [pc, #664]	; 115e0 <close@plt+0x440>
   11344:	add	sl, pc, sl
   11348:	str	r9, [r8]
   1134c:	add	fp, pc, fp
   11350:	add	r3, pc, r3
   11354:	str	r3, [sp, #28]
   11358:	b	11364 <close@plt+0x1c4>
   1135c:	cmp	r0, #117	; 0x75
   11360:	beq	11454 <close@plt+0x2b4>
   11364:	str	r9, [sp]
   11368:	mov	r0, r6
   1136c:	mov	r1, r4
   11370:	mov	r2, fp
   11374:	mov	r3, sl
   11378:	bl	11080 <getopt_long@plt>
   1137c:	cmn	r0, #1
   11380:	bne	1135c <close@plt+0x1bc>
   11384:	ldr	r3, [r8]
   11388:	cmp	r6, r3
   1138c:	ble	113b0 <close@plt+0x210>
   11390:	ldr	r2, [r4, r3, lsl #2]
   11394:	ldrb	r1, [r2]
   11398:	cmp	r1, #45	; 0x2d
   1139c:	bne	113b0 <close@plt+0x210>
   113a0:	ldrb	r2, [r2, #1]
   113a4:	cmp	r2, #0
   113a8:	addeq	r3, r3, #1
   113ac:	streq	r3, [r8]
   113b0:	ldr	r3, [pc, #556]	; 115e4 <close@plt+0x444>
   113b4:	mov	fp, r8
   113b8:	str	r5, [sp, #28]
   113bc:	add	r3, pc, r3
   113c0:	str	r3, [sp, #24]
   113c4:	b	113d4 <close@plt+0x234>
   113c8:	ldr	r3, [r8]
   113cc:	add	r3, r3, #1
   113d0:	str	r3, [r8]
   113d4:	ldr	sl, [r8]
   113d8:	cmp	r6, sl
   113dc:	ble	114cc <close@plt+0x32c>
   113e0:	ldr	r5, [r4, sl, lsl #2]
   113e4:	mov	r1, #61	; 0x3d
   113e8:	add	sl, r4, sl, lsl #2
   113ec:	mov	r0, r5
   113f0:	bl	110b0 <strchr@plt>
   113f4:	subs	r9, r0, #0
   113f8:	beq	11518 <close@plt+0x378>
   113fc:	mov	r0, r5
   11400:	bl	1114c <putenv@plt>
   11404:	cmp	r0, #0
   11408:	beq	113c8 <close@plt+0x228>
   1140c:	mov	r3, #0
   11410:	strb	r3, [r9]
   11414:	bl	110c8 <__errno_location@plt>
   11418:	ldr	r1, [sp, #24]
   1141c:	mov	r2, #5
   11420:	ldr	r9, [r0]
   11424:	mov	r0, #0
   11428:	bl	10fa8 <dcgettext@plt>
   1142c:	ldr	r3, [fp]
   11430:	mov	sl, r0
   11434:	ldr	r0, [r4, r3, lsl #2]
   11438:	bl	1339c <close_stdout@@Base+0x1a0c>
   1143c:	mov	r1, r9
   11440:	mov	r2, sl
   11444:	mov	r3, r0
   11448:	mov	r0, #125	; 0x7d
   1144c:	bl	1102c <error@plt>
   11450:	b	113c8 <close@plt+0x228>
   11454:	ldr	r3, [pc, #396]	; 115e8 <close@plt+0x448>
   11458:	ldr	r3, [r5, r3]
   1145c:	ldr	r0, [r3]
   11460:	str	r3, [sp, #24]
   11464:	bl	1117c <unsetenv@plt>
   11468:	cmp	r0, #0
   1146c:	beq	11364 <close@plt+0x1c4>
   11470:	bl	110c8 <__errno_location@plt>
   11474:	ldr	r1, [sp, #28]
   11478:	mov	r2, #5
   1147c:	ldr	ip, [r0]
   11480:	mov	r0, #0
   11484:	str	ip, [sp, #16]
   11488:	bl	10fa8 <dcgettext@plt>
   1148c:	ldr	r3, [sp, #24]
   11490:	mov	r2, r0
   11494:	ldr	r0, [r3]
   11498:	str	r2, [sp, #20]
   1149c:	bl	1339c <close_stdout@@Base+0x1a0c>
   114a0:	ldr	ip, [sp, #16]
   114a4:	ldr	r2, [sp, #20]
   114a8:	mov	r1, ip
   114ac:	mov	r3, r0
   114b0:	mov	r0, #125	; 0x7d
   114b4:	bl	1102c <error@plt>
   114b8:	b	11364 <close@plt+0x1c4>
   114bc:	ldr	r3, [sp, #24]
   114c0:	cmp	r3, #0
   114c4:	beq	11334 <close@plt+0x194>
   114c8:	b	11320 <close@plt+0x180>
   114cc:	ldr	r5, [sp, #28]
   114d0:	ldr	r3, [pc, #248]	; 115d0 <close@plt+0x430>
   114d4:	ldr	r6, [pc, #272]	; 115ec <close@plt+0x44c>
   114d8:	ldr	r3, [r5, r3]
   114dc:	add	r6, pc, r6
   114e0:	ldr	r4, [r3]
   114e4:	sub	r4, r4, #4
   114e8:	b	11504 <close@plt+0x364>
   114ec:	cmp	r7, #0
   114f0:	mov	r0, #1
   114f4:	mov	r1, r6
   114f8:	moveq	r3, #10
   114fc:	movne	r3, #0
   11500:	bl	110f8 <__printf_chk@plt>
   11504:	ldr	r2, [r4, #4]!
   11508:	cmp	r2, #0
   1150c:	bne	114ec <close@plt+0x34c>
   11510:	mov	r0, r2
   11514:	bl	11098 <exit@plt>
   11518:	cmp	r7, #0
   1151c:	mov	fp, r5
   11520:	beq	11554 <close@plt+0x3b4>
   11524:	bl	110c8 <__errno_location@plt>
   11528:	ldr	r1, [pc, #192]	; 115f0 <close@plt+0x450>
   1152c:	mov	r2, #5
   11530:	add	r1, pc, r1
   11534:	ldr	r4, [r0]
   11538:	mov	r0, r9
   1153c:	bl	10fa8 <dcgettext@plt>
   11540:	mov	r1, r4
   11544:	mov	r2, r0
   11548:	mov	r0, r9
   1154c:	bl	1102c <error@plt>
   11550:	b	1128c <close@plt+0xec>
   11554:	mov	r1, sl
   11558:	mov	r0, fp
   1155c:	bl	10f84 <execvp@plt>
   11560:	bl	110c8 <__errno_location@plt>
   11564:	ldr	r3, [r8]
   11568:	ldr	r2, [pc, #132]	; 115f4 <close@plt+0x454>
   1156c:	ldr	r3, [r4, r3, lsl #2]
   11570:	add	r2, pc, r2
   11574:	ldr	r1, [r0]
   11578:	mov	r0, r7
   1157c:	cmp	r1, #2
   11580:	movne	r4, #126	; 0x7e
   11584:	moveq	r4, #127	; 0x7f
   11588:	bl	1102c <error@plt>
   1158c:	mov	r0, r4
   11590:	bl	11098 <exit@plt>
   11594:	andeq	r3, r0, r4, lsr #12
   11598:	andeq	r3, r0, r8, asr r5
   1159c:	andeq	r3, r0, ip, lsl r6
   115a0:	andeq	r3, r0, r8, lsl #12
   115a4:	andeq	r4, r1, ip, asr ip
   115a8:	andeq	r4, r1, r4, ror #27
   115ac:	andeq	r0, r0, ip, lsl #2
   115b0:	strdeq	r0, [r0], -ip
   115b4:	andeq	r0, r0, r8, lsl #2
   115b8:	strdeq	r0, [r0], -r4
   115bc:	andeq	r3, r0, ip, ror #10
   115c0:	andeq	r3, r0, r4, ror r5
   115c4:	andeq	r3, r0, r8, asr #10
   115c8:	andeq	r3, r0, r8, ror #8
   115cc:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   115d0:	andeq	r0, r0, r0, lsr #2
   115d4:	andeq	r4, r1, r4, asr #28
   115d8:	andeq	r4, r1, r8, lsr fp
   115dc:	andeq	r3, r0, ip, ror #9
   115e0:	strdeq	r3, [r0], -r0
   115e4:	muleq	r0, r4, r4
   115e8:	andeq	r0, r0, r4, lsr #2
   115ec:	andeq	r3, r0, r4, lsl #7
   115f0:	andeq	r3, r0, r8, lsr r3
   115f4:	andeq	r3, r0, ip, ror #6
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <close@plt+0x488>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <close@plt+0x48c>
   1161c:	ldr	r3, [pc, #12]	; 11630 <close@plt+0x490>
   11620:	bl	1105c <__libc_start_main@plt>
   11624:	bl	11194 <abort@plt>
   11628:	andeq	r4, r1, ip, ror r4
   1162c:	andeq	r1, r1, ip, lsr #3
   11630:	andeq	r4, r1, r8, lsl r4
   11634:	ldr	r3, [pc, #20]	; 11650 <close@plt+0x4b0>
   11638:	ldr	r2, [pc, #20]	; 11654 <close@plt+0x4b4>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	11074 <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x000149bc
   11654:	andeq	r0, r0, r0, lsl #2
   11658:	push	{r3, lr}
   1165c:	movw	r0, #24948	; 0x6174
   11660:	ldr	r3, [pc, #36]	; 1168c <close@plt+0x4ec>
   11664:	movt	r0, #2
   11668:	rsb	r3, r0, r3
   1166c:	cmp	r3, #6
   11670:	popls	{r3, pc}
   11674:	movw	r3, #0
   11678:	movt	r3, #0
   1167c:	cmp	r3, #0
   11680:	popeq	{r3, pc}
   11684:	blx	r3
   11688:	pop	{r3, pc}
   1168c:	andeq	r6, r2, r7, ror r1
   11690:	push	{r3, lr}
   11694:	movw	r0, #24948	; 0x6174
   11698:	movw	r3, #24948	; 0x6174
   1169c:	movt	r0, #2
   116a0:	movt	r3, #2
   116a4:	rsb	r3, r0, r3
   116a8:	asr	r3, r3, #2
   116ac:	add	r3, r3, r3, lsr #31
   116b0:	asrs	r1, r3, #1
   116b4:	popeq	{r3, pc}
   116b8:	movw	r2, #0
   116bc:	movt	r2, #0
   116c0:	cmp	r2, #0
   116c4:	popeq	{r3, pc}
   116c8:	blx	r2
   116cc:	pop	{r3, pc}
   116d0:	push	{r4, lr}
   116d4:	movw	r4, #24948	; 0x6174
   116d8:	movt	r4, #2
   116dc:	ldrb	r3, [r4]
   116e0:	cmp	r3, #0
   116e4:	popne	{r4, pc}
   116e8:	bl	11658 <close@plt+0x4b8>
   116ec:	mov	r3, #1
   116f0:	strb	r3, [r4]
   116f4:	pop	{r4, pc}
   116f8:	movw	r0, #24192	; 0x5e80
   116fc:	movt	r0, #2
   11700:	push	{r3, lr}
   11704:	ldr	r3, [r0]
   11708:	cmp	r3, #0
   1170c:	beq	11724 <close@plt+0x584>
   11710:	movw	r3, #0
   11714:	movt	r3, #0
   11718:	cmp	r3, #0
   1171c:	beq	11724 <close@plt+0x584>
   11720:	blx	r3
   11724:	pop	{r3, lr}
   11728:	b	11690 <close@plt+0x4f0>
   1172c:	push	{r4, r5, r6, lr}
   11730:	subs	r4, r0, #0
   11734:	ldr	r5, [pc, #484]	; 11920 <close@plt+0x780>
   11738:	add	r5, pc, r5
   1173c:	beq	11784 <close@plt+0x5e4>
   11740:	ldr	r3, [pc, #476]	; 11924 <close@plt+0x784>
   11744:	mov	r2, #5
   11748:	ldr	r1, [pc, #472]	; 11928 <close@plt+0x788>
   1174c:	mov	r0, #0
   11750:	ldr	r3, [r5, r3]
   11754:	add	r1, pc, r1
   11758:	ldr	r6, [r3]
   1175c:	bl	10fa8 <dcgettext@plt>
   11760:	ldr	r3, [pc, #452]	; 1192c <close@plt+0x78c>
   11764:	mov	r1, #1
   11768:	ldr	r3, [r5, r3]
   1176c:	ldr	r3, [r3]
   11770:	mov	r2, r0
   11774:	mov	r0, r6
   11778:	bl	11110 <__fprintf_chk@plt>
   1177c:	mov	r0, r4
   11780:	bl	11098 <exit@plt>
   11784:	ldr	r1, [pc, #420]	; 11930 <close@plt+0x790>
   11788:	mov	r2, #5
   1178c:	add	r1, pc, r1
   11790:	bl	10fa8 <dcgettext@plt>
   11794:	ldr	r3, [pc, #400]	; 1192c <close@plt+0x78c>
   11798:	ldr	r6, [r5, r3]
   1179c:	ldr	r2, [r6]
   117a0:	mov	r1, r0
   117a4:	mov	r0, #1
   117a8:	bl	110f8 <__printf_chk@plt>
   117ac:	ldr	r1, [pc, #384]	; 11934 <close@plt+0x794>
   117b0:	mov	r2, #5
   117b4:	mov	r0, r4
   117b8:	add	r1, pc, r1
   117bc:	bl	10fa8 <dcgettext@plt>
   117c0:	ldr	r3, [pc, #368]	; 11938 <close@plt+0x798>
   117c4:	ldr	r5, [r5, r3]
   117c8:	ldr	r1, [r5]
   117cc:	bl	10f30 <fputs_unlocked@plt>
   117d0:	ldr	r1, [pc, #356]	; 1193c <close@plt+0x79c>
   117d4:	mov	r2, #5
   117d8:	mov	r0, r4
   117dc:	add	r1, pc, r1
   117e0:	bl	10fa8 <dcgettext@plt>
   117e4:	ldr	r1, [r5]
   117e8:	bl	10f30 <fputs_unlocked@plt>
   117ec:	ldr	r1, [pc, #332]	; 11940 <close@plt+0x7a0>
   117f0:	mov	r2, #5
   117f4:	mov	r0, r4
   117f8:	add	r1, pc, r1
   117fc:	bl	10fa8 <dcgettext@plt>
   11800:	ldr	r1, [r5]
   11804:	bl	10f30 <fputs_unlocked@plt>
   11808:	ldr	r1, [pc, #308]	; 11944 <close@plt+0x7a4>
   1180c:	mov	r2, #5
   11810:	mov	r0, r4
   11814:	add	r1, pc, r1
   11818:	bl	10fa8 <dcgettext@plt>
   1181c:	ldr	r1, [r5]
   11820:	bl	10f30 <fputs_unlocked@plt>
   11824:	ldr	r1, [pc, #284]	; 11948 <close@plt+0x7a8>
   11828:	mov	r2, #5
   1182c:	mov	r0, r4
   11830:	add	r1, pc, r1
   11834:	bl	10fa8 <dcgettext@plt>
   11838:	ldr	r1, [r5]
   1183c:	bl	10f30 <fputs_unlocked@plt>
   11840:	ldr	r1, [pc, #260]	; 1194c <close@plt+0x7ac>
   11844:	mov	r2, #5
   11848:	mov	r0, r4
   1184c:	add	r1, pc, r1
   11850:	bl	10fa8 <dcgettext@plt>
   11854:	ldr	r1, [r5]
   11858:	bl	10f30 <fputs_unlocked@plt>
   1185c:	ldr	r1, [pc, #236]	; 11950 <close@plt+0x7b0>
   11860:	mov	r2, #5
   11864:	mov	r0, r4
   11868:	add	r1, pc, r1
   1186c:	bl	10fa8 <dcgettext@plt>
   11870:	ldr	r2, [pc, #220]	; 11954 <close@plt+0x7b4>
   11874:	ldr	r3, [pc, #220]	; 11958 <close@plt+0x7b8>
   11878:	add	r2, pc, r2
   1187c:	add	r3, pc, r3
   11880:	mov	r1, r0
   11884:	mov	r0, #1
   11888:	bl	110f8 <__printf_chk@plt>
   1188c:	mov	r0, #5
   11890:	mov	r1, r4
   11894:	bl	11140 <setlocale@plt>
   11898:	cmp	r0, #0
   1189c:	beq	118b8 <close@plt+0x718>
   118a0:	ldr	r1, [pc, #180]	; 1195c <close@plt+0x7bc>
   118a4:	mov	r2, #3
   118a8:	add	r1, pc, r1
   118ac:	bl	11188 <strncmp@plt>
   118b0:	cmp	r0, #0
   118b4:	bne	118ec <close@plt+0x74c>
   118b8:	ldr	r1, [pc, #160]	; 11960 <close@plt+0x7c0>
   118bc:	mov	r2, #5
   118c0:	mov	r0, #0
   118c4:	add	r1, pc, r1
   118c8:	bl	10fa8 <dcgettext@plt>
   118cc:	mov	r5, r0
   118d0:	ldr	r0, [r6]
   118d4:	bl	11aa8 <close_stdout@@Base+0x118>
   118d8:	mov	r1, r5
   118dc:	mov	r2, r0
   118e0:	mov	r0, #1
   118e4:	bl	110f8 <__printf_chk@plt>
   118e8:	b	1177c <close@plt+0x5dc>
   118ec:	ldr	r1, [pc, #112]	; 11964 <close@plt+0x7c4>
   118f0:	mov	r2, #5
   118f4:	mov	r0, r4
   118f8:	add	r1, pc, r1
   118fc:	bl	10fa8 <dcgettext@plt>
   11900:	mov	r5, r0
   11904:	ldr	r0, [r6]
   11908:	bl	11aa8 <close_stdout@@Base+0x118>
   1190c:	mov	r1, r5
   11910:	mov	r2, r0
   11914:	mov	r0, #1
   11918:	bl	110f8 <__printf_chk@plt>
   1191c:	b	118b8 <close@plt+0x718>
   11920:	andeq	r4, r1, r0, asr #17
   11924:	strdeq	r0, [r0], -r8
   11928:	andeq	r2, r0, r0, ror #26
   1192c:	andeq	r0, r0, r4, lsl r1
   11930:	andeq	r2, r0, r0, asr sp
   11934:	andeq	r2, r0, r4, ror #26
   11938:	andeq	r0, r0, r8, lsl #2
   1193c:	andeq	r2, r0, ip, ror sp
   11940:	andeq	r2, r0, ip, lsr #27
   11944:	andeq	r2, r0, r8, asr lr
   11948:	andeq	r2, r0, ip, ror #28
   1194c:	andeq	r2, r0, r8, lsl #29
   11950:			; <UNDEFINED> instruction: 0x00002eb4
   11954:			; <UNDEFINED> instruction: 0x00002ebc
   11958:	andeq	r2, r0, r8, asr #29
   1195c:	andeq	r2, r0, r4, asr #29
   11960:	strdeq	r2, [r0], -r4
   11964:	andeq	r2, r0, r8, ror lr
   11968:	ldr	r3, [pc, #8]	; 11978 <close@plt+0x7d8>
   1196c:	add	r3, pc, r3
   11970:	str	r0, [r3]
   11974:	bx	lr
   11978:	andeq	r4, r1, r8, lsl #16
   1197c:	ldr	r3, [pc, #8]	; 1198c <close@plt+0x7ec>
   11980:	add	r3, pc, r3
   11984:	strb	r0, [r3, #4]
   11988:	bx	lr
   1198c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00011990 <close_stdout@@Base>:
   11990:	push	{r4, r5, r6, r7, lr}
   11994:	sub	sp, sp, #12
   11998:	ldr	r4, [pc, #228]	; 11a84 <close_stdout@@Base+0xf4>
   1199c:	ldr	r3, [pc, #228]	; 11a88 <close_stdout@@Base+0xf8>
   119a0:	add	r4, pc, r4
   119a4:	ldr	r3, [r4, r3]
   119a8:	ldr	r0, [r3]
   119ac:	bl	13bb4 <close_stdout@@Base+0x2224>
   119b0:	cmp	r0, #0
   119b4:	beq	119dc <close_stdout@@Base+0x4c>
   119b8:	ldr	r3, [pc, #204]	; 11a8c <close_stdout@@Base+0xfc>
   119bc:	add	r3, pc, r3
   119c0:	ldrb	r3, [r3, #4]
   119c4:	cmp	r3, #0
   119c8:	beq	119fc <close_stdout@@Base+0x6c>
   119cc:	bl	110c8 <__errno_location@plt>
   119d0:	ldr	r3, [r0]
   119d4:	cmp	r3, #32
   119d8:	bne	119fc <close_stdout@@Base+0x6c>
   119dc:	ldr	r3, [pc, #172]	; 11a90 <close_stdout@@Base+0x100>
   119e0:	ldr	r3, [r4, r3]
   119e4:	ldr	r0, [r3]
   119e8:	bl	13bb4 <close_stdout@@Base+0x2224>
   119ec:	cmp	r0, #0
   119f0:	bne	11a50 <close_stdout@@Base+0xc0>
   119f4:	add	sp, sp, #12
   119f8:	pop	{r4, r5, r6, r7, pc}
   119fc:	ldr	r1, [pc, #144]	; 11a94 <close_stdout@@Base+0x104>
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	add	r1, pc, r1
   11a0c:	bl	10fa8 <dcgettext@plt>
   11a10:	ldr	r3, [pc, #128]	; 11a98 <close_stdout@@Base+0x108>
   11a14:	ldr	r5, [pc, r3]
   11a18:	cmp	r5, #0
   11a1c:	mov	r6, r0
   11a20:	beq	11a60 <close_stdout@@Base+0xd0>
   11a24:	bl	110c8 <__errno_location@plt>
   11a28:	ldr	r7, [r0]
   11a2c:	mov	r0, r5
   11a30:	bl	13248 <close_stdout@@Base+0x18b8>
   11a34:	ldr	r2, [pc, #96]	; 11a9c <close_stdout@@Base+0x10c>
   11a38:	str	r6, [sp]
   11a3c:	mov	r1, r7
   11a40:	add	r2, pc, r2
   11a44:	mov	r3, r0
   11a48:	mov	r0, #0
   11a4c:	bl	1102c <error@plt>
   11a50:	ldr	r3, [pc, #72]	; 11aa0 <close_stdout@@Base+0x110>
   11a54:	ldr	r3, [r4, r3]
   11a58:	ldr	r0, [r3]
   11a5c:	bl	10f6c <_exit@plt>
   11a60:	bl	110c8 <__errno_location@plt>
   11a64:	ldr	r2, [pc, #56]	; 11aa4 <close_stdout@@Base+0x114>
   11a68:	add	r2, pc, r2
   11a6c:	mov	r3, r0
   11a70:	mov	r0, r5
   11a74:	ldr	r1, [r3]
   11a78:	mov	r3, r6
   11a7c:	bl	1102c <error@plt>
   11a80:	b	11a50 <close_stdout@@Base+0xc0>
   11a84:	andeq	r4, r1, r8, asr r6
   11a88:	andeq	r0, r0, r8, lsl #2
   11a8c:			; <UNDEFINED> instruction: 0x000147b8
   11a90:	strdeq	r0, [r0], -r8
   11a94:	andeq	r2, r0, r4, asr #29
   11a98:	andeq	r4, r1, r0, ror #14
   11a9c:	muleq	r0, r8, lr
   11aa0:	andeq	r0, r0, ip, lsl #2
   11aa4:	andeq	r2, r0, r4, ror lr
   11aa8:	ldrb	r3, [r0]
   11aac:	cmp	r3, #47	; 0x2f
   11ab0:	bne	11acc <close_stdout@@Base+0x13c>
   11ab4:	add	r2, r0, #1
   11ab8:	mov	r0, r2
   11abc:	add	r2, r2, #1
   11ac0:	ldrb	r3, [r0]
   11ac4:	cmp	r3, #47	; 0x2f
   11ac8:	beq	11ab8 <close_stdout@@Base+0x128>
   11acc:	cmp	r3, #0
   11ad0:	bxeq	lr
   11ad4:	mov	r2, r0
   11ad8:	mov	r1, #0
   11adc:	cmp	r3, #47	; 0x2f
   11ae0:	moveq	r1, #1
   11ae4:	beq	11af4 <close_stdout@@Base+0x164>
   11ae8:	cmp	r1, #0
   11aec:	movne	r0, r2
   11af0:	movne	r1, #0
   11af4:	ldrb	r3, [r2, #1]!
   11af8:	cmp	r3, #0
   11afc:	bne	11adc <close_stdout@@Base+0x14c>
   11b00:	bx	lr
   11b04:	push	{r4, lr}
   11b08:	mov	r4, r0
   11b0c:	bl	110a4 <strlen@plt>
   11b10:	cmp	r0, #1
   11b14:	popls	{r4, pc}
   11b18:	sub	r3, r0, #1
   11b1c:	ldrb	r2, [r4, r3]
   11b20:	cmp	r2, #47	; 0x2f
   11b24:	popne	{r4, pc}
   11b28:	mov	r0, r3
   11b2c:	cmp	r0, #1
   11b30:	sub	r3, r3, #1
   11b34:	beq	11b48 <close_stdout@@Base+0x1b8>
   11b38:	ldrb	r2, [r4, r3]
   11b3c:	cmp	r2, #47	; 0x2f
   11b40:	popne	{r4, pc}
   11b44:	b	11b28 <close_stdout@@Base+0x198>
   11b48:	pop	{r4, pc}
   11b4c:	push	{r3, r4, r5, r6, r7, lr}
   11b50:	subs	r4, r0, #0
   11b54:	ldr	r5, [pc, #172]	; 11c08 <close_stdout@@Base+0x278>
   11b58:	add	r5, pc, r5
   11b5c:	beq	11be4 <close_stdout@@Base+0x254>
   11b60:	mov	r1, #47	; 0x2f
   11b64:	bl	11158 <strrchr@plt>
   11b68:	subs	r6, r0, #0
   11b6c:	beq	11bc8 <close_stdout@@Base+0x238>
   11b70:	add	r7, r6, #1
   11b74:	rsb	r3, r4, r7
   11b78:	cmp	r3, #6
   11b7c:	ble	11bc8 <close_stdout@@Base+0x238>
   11b80:	ldr	r1, [pc, #132]	; 11c0c <close_stdout@@Base+0x27c>
   11b84:	sub	r0, r6, #6
   11b88:	mov	r2, #7
   11b8c:	add	r1, pc, r1
   11b90:	bl	11188 <strncmp@plt>
   11b94:	cmp	r0, #0
   11b98:	bne	11bc8 <close_stdout@@Base+0x238>
   11b9c:	ldr	r1, [pc, #108]	; 11c10 <close_stdout@@Base+0x280>
   11ba0:	mov	r0, r7
   11ba4:	mov	r2, #3
   11ba8:	add	r1, pc, r1
   11bac:	bl	11188 <strncmp@plt>
   11bb0:	cmp	r0, #0
   11bb4:	movne	r4, r7
   11bb8:	ldreq	r3, [pc, #84]	; 11c14 <close_stdout@@Base+0x284>
   11bbc:	addeq	r4, r6, #4
   11bc0:	ldreq	r3, [r5, r3]
   11bc4:	streq	r4, [r3]
   11bc8:	ldr	r2, [pc, #72]	; 11c18 <close_stdout@@Base+0x288>
   11bcc:	ldr	r3, [pc, #72]	; 11c1c <close_stdout@@Base+0x28c>
   11bd0:	ldr	r2, [r5, r2]
   11bd4:	str	r4, [r2]
   11bd8:	ldr	r3, [r5, r3]
   11bdc:	str	r4, [r3]
   11be0:	pop	{r3, r4, r5, r6, r7, pc}
   11be4:	ldr	r3, [pc, #52]	; 11c20 <close_stdout@@Base+0x290>
   11be8:	mov	r1, #1
   11bec:	ldr	r0, [pc, #48]	; 11c24 <close_stdout@@Base+0x294>
   11bf0:	mov	r2, #55	; 0x37
   11bf4:	ldr	r3, [r5, r3]
   11bf8:	add	r0, pc, r0
   11bfc:	ldr	r3, [r3]
   11c00:	bl	10fe4 <fwrite@plt>
   11c04:	bl	11194 <abort@plt>
   11c08:	andeq	r4, r1, r0, lsr #9
   11c0c:	andeq	r2, r0, ip, lsl #27
   11c10:	andeq	r2, r0, r8, ror sp
   11c14:	andeq	r0, r0, ip, lsl r1
   11c18:	andeq	r0, r0, r4, lsl r1
   11c1c:	andeq	r0, r0, r0, lsl r1
   11c20:	strdeq	r0, [r0], -r8
   11c24:	andeq	r2, r0, r8, ror #25
   11c28:	push	{r3, lr}
   11c2c:	mov	r3, r0
   11c30:	mov	r2, #0
   11c34:	cmp	r1, #8
   11c38:	str	r2, [r3], #4
   11c3c:	add	r3, r3, #4
   11c40:	str	r2, [r0, #4]
   11c44:	str	r2, [r3], #4
   11c48:	str	r2, [r3], #4
   11c4c:	str	r2, [r3], #4
   11c50:	str	r2, [r3], #4
   11c54:	str	r2, [r3], #4
   11c58:	str	r2, [r3], #4
   11c5c:	str	r2, [r3], #4
   11c60:	str	r2, [r3], #4
   11c64:	str	r2, [r3], #4
   11c68:	str	r2, [r3]
   11c6c:	beq	11c78 <close_stdout@@Base+0x2e8>
   11c70:	str	r1, [r0]
   11c74:	pop	{r3, pc}
   11c78:	bl	11194 <abort@plt>
   11c7c:	push	{r4, r5, r6, lr}
   11c80:	mov	r4, r0
   11c84:	mov	r6, r1
   11c88:	mov	r0, #0
   11c8c:	mov	r1, r4
   11c90:	mov	r2, #5
   11c94:	bl	10fa8 <dcgettext@plt>
   11c98:	cmp	r0, r4
   11c9c:	mov	r5, r0
   11ca0:	beq	11ca8 <close_stdout@@Base+0x318>
   11ca4:	pop	{r4, r5, r6, pc}
   11ca8:	bl	13c34 <close_stdout@@Base+0x22a4>
   11cac:	ldrb	r3, [r0]
   11cb0:	bic	r3, r3, #32
   11cb4:	cmp	r3, #85	; 0x55
   11cb8:	bne	11d2c <close_stdout@@Base+0x39c>
   11cbc:	ldrb	r3, [r0, #1]
   11cc0:	bic	r3, r3, #32
   11cc4:	cmp	r3, #84	; 0x54
   11cc8:	bne	11d18 <close_stdout@@Base+0x388>
   11ccc:	ldrb	r3, [r0, #2]
   11cd0:	bic	r3, r3, #32
   11cd4:	cmp	r3, #70	; 0x46
   11cd8:	bne	11d18 <close_stdout@@Base+0x388>
   11cdc:	ldrb	r3, [r0, #3]
   11ce0:	cmp	r3, #45	; 0x2d
   11ce4:	bne	11d18 <close_stdout@@Base+0x388>
   11ce8:	ldrb	r3, [r0, #4]
   11cec:	cmp	r3, #56	; 0x38
   11cf0:	bne	11d18 <close_stdout@@Base+0x388>
   11cf4:	ldrb	r3, [r0, #5]
   11cf8:	cmp	r3, #0
   11cfc:	bne	11d18 <close_stdout@@Base+0x388>
   11d00:	ldrb	r3, [r5]
   11d04:	cmp	r3, #96	; 0x60
   11d08:	beq	11da4 <close_stdout@@Base+0x414>
   11d0c:	ldr	r0, [pc, #180]	; 11dc8 <close_stdout@@Base+0x438>
   11d10:	add	r0, pc, r0
   11d14:	pop	{r4, r5, r6, pc}
   11d18:	cmp	r6, #7
   11d1c:	beq	11db0 <close_stdout@@Base+0x420>
   11d20:	ldr	r0, [pc, #164]	; 11dcc <close_stdout@@Base+0x43c>
   11d24:	add	r0, pc, r0
   11d28:	pop	{r4, r5, r6, pc}
   11d2c:	cmp	r3, #71	; 0x47
   11d30:	bne	11d18 <close_stdout@@Base+0x388>
   11d34:	ldrb	r3, [r0, #1]
   11d38:	bic	r3, r3, #32
   11d3c:	cmp	r3, #66	; 0x42
   11d40:	bne	11d18 <close_stdout@@Base+0x388>
   11d44:	ldrb	r3, [r0, #2]
   11d48:	cmp	r3, #49	; 0x31
   11d4c:	bne	11d18 <close_stdout@@Base+0x388>
   11d50:	ldrb	r3, [r0, #3]
   11d54:	cmp	r3, #56	; 0x38
   11d58:	bne	11d18 <close_stdout@@Base+0x388>
   11d5c:	ldrb	r3, [r0, #4]
   11d60:	cmp	r3, #48	; 0x30
   11d64:	bne	11d18 <close_stdout@@Base+0x388>
   11d68:	ldrb	r3, [r0, #5]
   11d6c:	cmp	r3, #51	; 0x33
   11d70:	bne	11d18 <close_stdout@@Base+0x388>
   11d74:	ldrb	r3, [r0, #6]
   11d78:	cmp	r3, #48	; 0x30
   11d7c:	bne	11d18 <close_stdout@@Base+0x388>
   11d80:	ldrb	r3, [r0, #7]
   11d84:	cmp	r3, #0
   11d88:	bne	11d18 <close_stdout@@Base+0x388>
   11d8c:	ldrb	r3, [r5]
   11d90:	cmp	r3, #96	; 0x60
   11d94:	beq	11dbc <close_stdout@@Base+0x42c>
   11d98:	ldr	r0, [pc, #48]	; 11dd0 <close_stdout@@Base+0x440>
   11d9c:	add	r0, pc, r0
   11da0:	pop	{r4, r5, r6, pc}
   11da4:	ldr	r0, [pc, #40]	; 11dd4 <close_stdout@@Base+0x444>
   11da8:	add	r0, pc, r0
   11dac:	pop	{r4, r5, r6, pc}
   11db0:	ldr	r0, [pc, #32]	; 11dd8 <close_stdout@@Base+0x448>
   11db4:	add	r0, pc, r0
   11db8:	pop	{r4, r5, r6, pc}
   11dbc:	ldr	r0, [pc, #24]	; 11ddc <close_stdout@@Base+0x44c>
   11dc0:	add	r0, pc, r0
   11dc4:	pop	{r4, r5, r6, pc}
   11dc8:	andeq	r2, r0, r4, lsr ip
   11dcc:	andeq	r2, r0, r8, lsr #24
   11dd0:	andeq	r2, r0, ip, lsr #23
   11dd4:			; <UNDEFINED> instruction: 0x00002bb0
   11dd8:	muleq	r0, ip, fp
   11ddc:	muleq	r0, r4, fp
   11de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de4:	sub	sp, sp, #124	; 0x7c
   11de8:	ldr	ip, [pc, #3304]	; 12ad8 <close_stdout@@Base+0x1148>
   11dec:	mov	sl, r1
   11df0:	str	r0, [sp, #40]	; 0x28
   11df4:	mov	r8, r3
   11df8:	ldr	r0, [pc, #3292]	; 12adc <close_stdout@@Base+0x114c>
   11dfc:	add	ip, pc, ip
   11e00:	str	r2, [sp, #32]
   11e04:	ldr	r1, [sp, #164]	; 0xa4
   11e08:	mov	r3, ip
   11e0c:	ldr	r0, [ip, r0]
   11e10:	ldr	r2, [sp, #172]	; 0xac
   11e14:	ubfx	r1, r1, #1, #1
   11e18:	str	r1, [sp, #36]	; 0x24
   11e1c:	str	r0, [sp, #56]	; 0x38
   11e20:	ldr	r0, [sp, #168]	; 0xa8
   11e24:	ldr	r1, [sp, #176]	; 0xb0
   11e28:	str	r2, [sp, #72]	; 0x48
   11e2c:	str	r0, [sp, #48]	; 0x30
   11e30:	ldr	r0, [sp, #56]	; 0x38
   11e34:	str	r1, [sp, #68]	; 0x44
   11e38:	ldr	r3, [r0]
   11e3c:	str	r3, [sp, #116]	; 0x74
   11e40:	bl	10ffc <__ctype_get_mb_cur_max@plt>
   11e44:	ldr	r2, [sp, #160]	; 0xa0
   11e48:	str	r0, [sp, #64]	; 0x40
   11e4c:	cmp	r2, #8
   11e50:	addls	pc, pc, r2, lsl #2
   11e54:	b	129b4 <close_stdout@@Base+0x1024>
   11e58:	b	11e7c <close_stdout@@Base+0x4ec>
   11e5c:	b	126cc <close_stdout@@Base+0xd3c>
   11e60:	b	126fc <close_stdout@@Base+0xd6c>
   11e64:	b	125ac <close_stdout@@Base+0xc1c>
   11e68:	b	125ec <close_stdout@@Base+0xc5c>
   11e6c:	b	12618 <close_stdout@@Base+0xc88>
   11e70:	b	12638 <close_stdout@@Base+0xca8>
   11e74:	b	12638 <close_stdout@@Base+0xca8>
   11e78:	b	12638 <close_stdout@@Base+0xca8>
   11e7c:	mov	r2, #0
   11e80:	str	r2, [sp, #36]	; 0x24
   11e84:	mov	r9, r2
   11e88:	str	r2, [sp, #24]
   11e8c:	str	r2, [sp, #28]
   11e90:	str	r2, [sp, #52]	; 0x34
   11e94:	ldr	r0, [sp, #36]	; 0x24
   11e98:	mov	fp, #0
   11e9c:	ldr	r1, [sp, #24]
   11ea0:	eor	r2, r0, #1
   11ea4:	eor	r3, r1, #1
   11ea8:	and	r3, r2, r3
   11eac:	and	r2, r1, r0
   11eb0:	str	r3, [sp, #44]	; 0x2c
   11eb4:	str	r2, [sp, #76]	; 0x4c
   11eb8:	cmn	r8, #1
   11ebc:	beq	1223c <close_stdout@@Base+0x8ac>
   11ec0:	subs	r3, fp, r8
   11ec4:	movne	r3, #1
   11ec8:	cmp	r3, #0
   11ecc:	beq	12254 <close_stdout@@Base+0x8c4>
   11ed0:	ldr	r3, [sp, #28]
   11ed4:	ldr	r0, [sp, #24]
   11ed8:	adds	r7, r3, #0
   11edc:	movne	r7, #1
   11ee0:	ands	r6, r7, r0
   11ee4:	bne	12740 <close_stdout@@Base+0xdb0>
   11ee8:	ldr	r1, [sp, #32]
   11eec:	add	r5, r1, fp
   11ef0:	ldrb	r4, [r5]
   11ef4:	cmp	r4, #126	; 0x7e
   11ef8:	addls	pc, pc, r4, lsl #2
   11efc:	b	124c0 <close_stdout@@Base+0xb30>
   11f00:	b	123cc <close_stdout@@Base+0xa3c>
   11f04:	b	124c0 <close_stdout@@Base+0xb30>
   11f08:	b	124c0 <close_stdout@@Base+0xb30>
   11f0c:	b	124c0 <close_stdout@@Base+0xb30>
   11f10:	b	124c0 <close_stdout@@Base+0xb30>
   11f14:	b	124c0 <close_stdout@@Base+0xb30>
   11f18:	b	124c0 <close_stdout@@Base+0xb30>
   11f1c:	b	123b4 <close_stdout@@Base+0xa24>
   11f20:	b	1239c <close_stdout@@Base+0xa0c>
   11f24:	b	123c4 <close_stdout@@Base+0xa34>
   11f28:	b	123bc <close_stdout@@Base+0xa2c>
   11f2c:	b	123ac <close_stdout@@Base+0xa1c>
   11f30:	b	123a4 <close_stdout@@Base+0xa14>
   11f34:	b	12368 <close_stdout@@Base+0x9d8>
   11f38:	b	124c0 <close_stdout@@Base+0xb30>
   11f3c:	b	124c0 <close_stdout@@Base+0xb30>
   11f40:	b	124c0 <close_stdout@@Base+0xb30>
   11f44:	b	124c0 <close_stdout@@Base+0xb30>
   11f48:	b	124c0 <close_stdout@@Base+0xb30>
   11f4c:	b	124c0 <close_stdout@@Base+0xb30>
   11f50:	b	124c0 <close_stdout@@Base+0xb30>
   11f54:	b	124c0 <close_stdout@@Base+0xb30>
   11f58:	b	124c0 <close_stdout@@Base+0xb30>
   11f5c:	b	124c0 <close_stdout@@Base+0xb30>
   11f60:	b	124c0 <close_stdout@@Base+0xb30>
   11f64:	b	124c0 <close_stdout@@Base+0xb30>
   11f68:	b	124c0 <close_stdout@@Base+0xb30>
   11f6c:	b	124c0 <close_stdout@@Base+0xb30>
   11f70:	b	124c0 <close_stdout@@Base+0xb30>
   11f74:	b	124c0 <close_stdout@@Base+0xb30>
   11f78:	b	124c0 <close_stdout@@Base+0xb30>
   11f7c:	b	124c0 <close_stdout@@Base+0xb30>
   11f80:	b	122f4 <close_stdout@@Base+0x964>
   11f84:	b	122f4 <close_stdout@@Base+0x964>
   11f88:	b	122f4 <close_stdout@@Base+0x964>
   11f8c:	b	122ec <close_stdout@@Base+0x95c>
   11f90:	b	122f4 <close_stdout@@Base+0x964>
   11f94:	b	121c8 <close_stdout@@Base+0x838>
   11f98:	b	122f4 <close_stdout@@Base+0x964>
   11f9c:	b	12468 <close_stdout@@Base+0xad8>
   11fa0:	b	122f4 <close_stdout@@Base+0x964>
   11fa4:	b	122f4 <close_stdout@@Base+0x964>
   11fa8:	b	122f4 <close_stdout@@Base+0x964>
   11fac:	b	121c8 <close_stdout@@Base+0x838>
   11fb0:	b	121c8 <close_stdout@@Base+0x838>
   11fb4:	b	121c8 <close_stdout@@Base+0x838>
   11fb8:	b	121c8 <close_stdout@@Base+0x838>
   11fbc:	b	121c8 <close_stdout@@Base+0x838>
   11fc0:	b	121c8 <close_stdout@@Base+0x838>
   11fc4:	b	121c8 <close_stdout@@Base+0x838>
   11fc8:	b	121c8 <close_stdout@@Base+0x838>
   11fcc:	b	121c8 <close_stdout@@Base+0x838>
   11fd0:	b	121c8 <close_stdout@@Base+0x838>
   11fd4:	b	121c8 <close_stdout@@Base+0x838>
   11fd8:	b	121c8 <close_stdout@@Base+0x838>
   11fdc:	b	121c8 <close_stdout@@Base+0x838>
   11fe0:	b	121c8 <close_stdout@@Base+0x838>
   11fe4:	b	121c8 <close_stdout@@Base+0x838>
   11fe8:	b	121c8 <close_stdout@@Base+0x838>
   11fec:	b	122f4 <close_stdout@@Base+0x964>
   11ff0:	b	122f4 <close_stdout@@Base+0x964>
   11ff4:	b	122f4 <close_stdout@@Base+0x964>
   11ff8:	b	122f4 <close_stdout@@Base+0x964>
   11ffc:	b	120fc <close_stdout@@Base+0x76c>
   12000:	b	124c0 <close_stdout@@Base+0xb30>
   12004:	b	121c8 <close_stdout@@Base+0x838>
   12008:	b	121c8 <close_stdout@@Base+0x838>
   1200c:	b	121c8 <close_stdout@@Base+0x838>
   12010:	b	121c8 <close_stdout@@Base+0x838>
   12014:	b	121c8 <close_stdout@@Base+0x838>
   12018:	b	121c8 <close_stdout@@Base+0x838>
   1201c:	b	121c8 <close_stdout@@Base+0x838>
   12020:	b	121c8 <close_stdout@@Base+0x838>
   12024:	b	121c8 <close_stdout@@Base+0x838>
   12028:	b	121c8 <close_stdout@@Base+0x838>
   1202c:	b	121c8 <close_stdout@@Base+0x838>
   12030:	b	121c8 <close_stdout@@Base+0x838>
   12034:	b	121c8 <close_stdout@@Base+0x838>
   12038:	b	121c8 <close_stdout@@Base+0x838>
   1203c:	b	121c8 <close_stdout@@Base+0x838>
   12040:	b	121c8 <close_stdout@@Base+0x838>
   12044:	b	121c8 <close_stdout@@Base+0x838>
   12048:	b	121c8 <close_stdout@@Base+0x838>
   1204c:	b	121c8 <close_stdout@@Base+0x838>
   12050:	b	121c8 <close_stdout@@Base+0x838>
   12054:	b	121c8 <close_stdout@@Base+0x838>
   12058:	b	121c8 <close_stdout@@Base+0x838>
   1205c:	b	121c8 <close_stdout@@Base+0x838>
   12060:	b	121c8 <close_stdout@@Base+0x838>
   12064:	b	121c8 <close_stdout@@Base+0x838>
   12068:	b	121c8 <close_stdout@@Base+0x838>
   1206c:	b	122f4 <close_stdout@@Base+0x964>
   12070:	b	1244c <close_stdout@@Base+0xabc>
   12074:	b	121c8 <close_stdout@@Base+0x838>
   12078:	b	122f4 <close_stdout@@Base+0x964>
   1207c:	b	121c8 <close_stdout@@Base+0x838>
   12080:	b	122f4 <close_stdout@@Base+0x964>
   12084:	b	121c8 <close_stdout@@Base+0x838>
   12088:	b	121c8 <close_stdout@@Base+0x838>
   1208c:	b	121c8 <close_stdout@@Base+0x838>
   12090:	b	121c8 <close_stdout@@Base+0x838>
   12094:	b	121c8 <close_stdout@@Base+0x838>
   12098:	b	121c8 <close_stdout@@Base+0x838>
   1209c:	b	121c8 <close_stdout@@Base+0x838>
   120a0:	b	121c8 <close_stdout@@Base+0x838>
   120a4:	b	121c8 <close_stdout@@Base+0x838>
   120a8:	b	121c8 <close_stdout@@Base+0x838>
   120ac:	b	121c8 <close_stdout@@Base+0x838>
   120b0:	b	121c8 <close_stdout@@Base+0x838>
   120b4:	b	121c8 <close_stdout@@Base+0x838>
   120b8:	b	121c8 <close_stdout@@Base+0x838>
   120bc:	b	121c8 <close_stdout@@Base+0x838>
   120c0:	b	121c8 <close_stdout@@Base+0x838>
   120c4:	b	121c8 <close_stdout@@Base+0x838>
   120c8:	b	121c8 <close_stdout@@Base+0x838>
   120cc:	b	121c8 <close_stdout@@Base+0x838>
   120d0:	b	121c8 <close_stdout@@Base+0x838>
   120d4:	b	121c8 <close_stdout@@Base+0x838>
   120d8:	b	121c8 <close_stdout@@Base+0x838>
   120dc:	b	121c8 <close_stdout@@Base+0x838>
   120e0:	b	121c8 <close_stdout@@Base+0x838>
   120e4:	b	121c8 <close_stdout@@Base+0x838>
   120e8:	b	121c8 <close_stdout@@Base+0x838>
   120ec:	b	122d4 <close_stdout@@Base+0x944>
   120f0:	b	122f4 <close_stdout@@Base+0x964>
   120f4:	b	122d4 <close_stdout@@Base+0x944>
   120f8:	b	122ec <close_stdout@@Base+0x95c>
   120fc:	ldr	r3, [sp, #160]	; 0xa0
   12100:	cmp	r3, #2
   12104:	beq	12990 <close_stdout@@Base+0x1000>
   12108:	cmp	r3, #3
   1210c:	bne	121c8 <close_stdout@@Base+0x838>
   12110:	ldr	r1, [sp, #164]	; 0xa4
   12114:	tst	r1, #4
   12118:	beq	121c8 <close_stdout@@Base+0x838>
   1211c:	add	r3, fp, #2
   12120:	cmp	r8, r3
   12124:	bls	121c8 <close_stdout@@Base+0x838>
   12128:	ldrb	r2, [r5, #1]
   1212c:	mov	r1, #1
   12130:	cmp	r2, #63	; 0x3f
   12134:	bne	121c8 <close_stdout@@Base+0x838>
   12138:	ldr	r0, [sp, #32]
   1213c:	ldrb	ip, [r0, r3]
   12140:	sub	r0, ip, #33	; 0x21
   12144:	uxtb	r0, r0
   12148:	cmp	r0, #29
   1214c:	bhi	121c8 <close_stdout@@Base+0x838>
   12150:	lsl	r1, r1, r0
   12154:	movw	r0, #20929	; 0x51c1
   12158:	movt	r0, #14336	; 0x3800
   1215c:	and	r0, r1, r0
   12160:	cmp	r0, #0
   12164:	beq	121c8 <close_stdout@@Base+0x838>
   12168:	ldr	r1, [sp, #36]	; 0x24
   1216c:	cmp	r1, #0
   12170:	bne	12310 <close_stdout@@Base+0x980>
   12174:	cmp	r9, sl
   12178:	mov	r4, ip
   1217c:	mov	fp, r3
   12180:	ldrcc	r0, [sp, #40]	; 0x28
   12184:	strbcc	r2, [r0, r9]
   12188:	add	r2, r9, #1
   1218c:	cmp	sl, r2
   12190:	ldrhi	r0, [sp, #40]	; 0x28
   12194:	movhi	r1, #34	; 0x22
   12198:	strbhi	r1, [r0, r2]
   1219c:	add	r2, r9, #2
   121a0:	cmp	sl, r2
   121a4:	ldrhi	r0, [sp, #40]	; 0x28
   121a8:	movhi	r1, #34	; 0x22
   121ac:	strbhi	r1, [r0, r2]
   121b0:	add	r2, r9, #3
   121b4:	cmp	sl, r2
   121b8:	add	r9, r9, #4
   121bc:	ldrhi	r0, [sp, #40]	; 0x28
   121c0:	movhi	r1, #63	; 0x3f
   121c4:	strbhi	r1, [r0, r2]
   121c8:	ldr	r0, [sp, #44]	; 0x2c
   121cc:	cmp	r0, #0
   121d0:	bne	121f8 <close_stdout@@Base+0x868>
   121d4:	ldr	r1, [sp, #48]	; 0x30
   121d8:	cmp	r1, #0
   121dc:	beq	121f8 <close_stdout@@Base+0x868>
   121e0:	ubfx	r2, r4, #5, #8
   121e4:	and	r3, r4, #31
   121e8:	ldr	r2, [r1, r2, lsl #2]
   121ec:	lsr	r3, r2, r3
   121f0:	tst	r3, #1
   121f4:	bne	12200 <close_stdout@@Base+0x870>
   121f8:	cmp	r6, #0
   121fc:	beq	12220 <close_stdout@@Base+0x890>
   12200:	ldr	r2, [sp, #36]	; 0x24
   12204:	cmp	r2, #0
   12208:	bne	12310 <close_stdout@@Base+0x980>
   1220c:	cmp	r9, sl
   12210:	ldrcc	r0, [sp, #40]	; 0x28
   12214:	movcc	r3, #92	; 0x5c
   12218:	strbcc	r3, [r0, r9]
   1221c:	add	r9, r9, #1
   12220:	add	fp, fp, #1
   12224:	cmp	r9, sl
   12228:	ldrcc	r1, [sp, #40]	; 0x28
   1222c:	strbcc	r4, [r1, r9]
   12230:	cmn	r8, #1
   12234:	add	r9, r9, #1
   12238:	bne	11ec0 <close_stdout@@Base+0x530>
   1223c:	ldr	r2, [sp, #32]
   12240:	ldrb	r3, [r2, fp]
   12244:	adds	r3, r3, #0
   12248:	movne	r3, #1
   1224c:	cmp	r3, #0
   12250:	bne	11ed0 <close_stdout@@Base+0x540>
   12254:	ldr	r3, [sp, #160]	; 0xa0
   12258:	cmp	r9, #0
   1225c:	cmpeq	r3, #2
   12260:	bne	12270 <close_stdout@@Base+0x8e0>
   12264:	ldr	r0, [sp, #36]	; 0x24
   12268:	cmp	r0, #0
   1226c:	bne	12310 <close_stdout@@Base+0x980>
   12270:	ldr	r1, [sp, #36]	; 0x24
   12274:	ldr	r2, [sp, #52]	; 0x34
   12278:	eor	r3, r1, #1
   1227c:	cmp	r2, #0
   12280:	moveq	r3, #0
   12284:	andne	r3, r3, #1
   12288:	cmp	r3, #0
   1228c:	beq	122b8 <close_stdout@@Base+0x928>
   12290:	ldrb	r3, [r2]
   12294:	cmp	r3, #0
   12298:	beq	122b8 <close_stdout@@Base+0x928>
   1229c:	ldr	r1, [sp, #40]	; 0x28
   122a0:	cmp	sl, r9
   122a4:	strbhi	r3, [r1, r9]
   122a8:	ldrb	r3, [r2, #1]!
   122ac:	add	r9, r9, #1
   122b0:	cmp	r3, #0
   122b4:	bne	122a0 <close_stdout@@Base+0x910>
   122b8:	cmp	r9, sl
   122bc:	movcs	r0, r9
   122c0:	ldrcc	r1, [sp, #40]	; 0x28
   122c4:	movcc	r3, #0
   122c8:	movcc	r0, r9
   122cc:	strbcc	r3, [r1, r9]
   122d0:	b	1234c <close_stdout@@Base+0x9bc>
   122d4:	cmn	r8, #1
   122d8:	beq	129a0 <close_stdout@@Base+0x1010>
   122dc:	subs	r3, r8, #1
   122e0:	movne	r3, #1
   122e4:	cmp	r3, #0
   122e8:	bne	121c8 <close_stdout@@Base+0x838>
   122ec:	cmp	fp, #0
   122f0:	bne	121c8 <close_stdout@@Base+0x838>
   122f4:	ldr	r3, [sp, #36]	; 0x24
   122f8:	ldr	r0, [sp, #160]	; 0xa0
   122fc:	cmp	r0, #2
   12300:	movne	r3, #0
   12304:	andeq	r3, r3, #1
   12308:	cmp	r3, #0
   1230c:	beq	121c8 <close_stdout@@Base+0x838>
   12310:	ldr	r2, [sp, #164]	; 0xa4
   12314:	mov	ip, #0
   12318:	ldr	r0, [sp, #160]	; 0xa0
   1231c:	bic	r3, r2, #2
   12320:	ldr	r1, [sp, #72]	; 0x48
   12324:	ldr	r2, [sp, #68]	; 0x44
   12328:	stm	sp, {r0, r3}
   1232c:	mov	r3, r8
   12330:	str	r1, [sp, #12]
   12334:	mov	r1, sl
   12338:	str	r2, [sp, #16]
   1233c:	ldr	r0, [sp, #40]	; 0x28
   12340:	ldr	r2, [sp, #32]
   12344:	str	ip, [sp, #8]
   12348:	bl	11de0 <close_stdout@@Base+0x450>
   1234c:	ldr	r1, [sp, #56]	; 0x38
   12350:	ldr	r2, [sp, #116]	; 0x74
   12354:	ldr	r3, [r1]
   12358:	cmp	r2, r3
   1235c:	bne	12a90 <close_stdout@@Base+0x1100>
   12360:	add	sp, sp, #124	; 0x7c
   12364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12368:	mov	r3, #114	; 0x72
   1236c:	ldr	r2, [sp, #36]	; 0x24
   12370:	ldr	r0, [sp, #160]	; 0xa0
   12374:	cmp	r0, #2
   12378:	movne	r2, #0
   1237c:	andeq	r2, r2, #1
   12380:	cmp	r2, #0
   12384:	bne	12310 <close_stdout@@Base+0x980>
   12388:	ldr	r1, [sp, #24]
   1238c:	cmp	r1, #0
   12390:	beq	121c8 <close_stdout@@Base+0x838>
   12394:	mov	r4, r3
   12398:	b	12200 <close_stdout@@Base+0x870>
   1239c:	mov	r3, #98	; 0x62
   123a0:	b	12388 <close_stdout@@Base+0x9f8>
   123a4:	mov	r3, #102	; 0x66
   123a8:	b	12388 <close_stdout@@Base+0x9f8>
   123ac:	mov	r3, #118	; 0x76
   123b0:	b	12388 <close_stdout@@Base+0x9f8>
   123b4:	mov	r3, #97	; 0x61
   123b8:	b	12388 <close_stdout@@Base+0x9f8>
   123bc:	mov	r3, #110	; 0x6e
   123c0:	b	1236c <close_stdout@@Base+0x9dc>
   123c4:	mov	r3, #116	; 0x74
   123c8:	b	1236c <close_stdout@@Base+0x9dc>
   123cc:	ldr	r2, [sp, #24]
   123d0:	cmp	r2, #0
   123d4:	beq	1297c <close_stdout@@Base+0xfec>
   123d8:	ldr	r3, [sp, #36]	; 0x24
   123dc:	cmp	r3, #0
   123e0:	bne	12310 <close_stdout@@Base+0x980>
   123e4:	cmp	r9, sl
   123e8:	add	r2, r9, #1
   123ec:	ldrcc	r0, [sp, #40]	; 0x28
   123f0:	movcc	r3, #92	; 0x5c
   123f4:	strbcc	r3, [r0, r9]
   123f8:	add	r3, fp, #1
   123fc:	cmp	r8, r3
   12400:	bls	12440 <close_stdout@@Base+0xab0>
   12404:	ldr	r1, [sp, #32]
   12408:	ldrb	r3, [r1, r3]
   1240c:	sub	r3, r3, #48	; 0x30
   12410:	cmp	r3, #9
   12414:	bhi	12440 <close_stdout@@Base+0xab0>
   12418:	cmp	sl, r2
   1241c:	ldrhi	r0, [sp, #40]	; 0x28
   12420:	movhi	r3, #48	; 0x30
   12424:	strbhi	r3, [r0, r2]
   12428:	add	r3, r9, #2
   1242c:	cmp	sl, r3
   12430:	ldrhi	r1, [sp, #40]	; 0x28
   12434:	movhi	r2, #48	; 0x30
   12438:	strbhi	r2, [r1, r3]
   1243c:	add	r2, r9, #3
   12440:	mov	r9, r2
   12444:	mov	r4, #48	; 0x30
   12448:	b	121d4 <close_stdout@@Base+0x844>
   1244c:	ldr	r1, [sp, #76]	; 0x4c
   12450:	cmp	r1, #0
   12454:	beq	12460 <close_stdout@@Base+0xad0>
   12458:	cmp	r7, #0
   1245c:	bne	12220 <close_stdout@@Base+0x890>
   12460:	mov	r3, r4
   12464:	b	1236c <close_stdout@@Base+0x9dc>
   12468:	ldr	r1, [sp, #160]	; 0xa0
   1246c:	cmp	r1, #2
   12470:	bne	121c8 <close_stdout@@Base+0x838>
   12474:	ldr	r2, [sp, #36]	; 0x24
   12478:	cmp	r2, #0
   1247c:	bne	12310 <close_stdout@@Base+0x980>
   12480:	cmp	r9, sl
   12484:	ldrcc	r0, [sp, #40]	; 0x28
   12488:	movcc	r3, #39	; 0x27
   1248c:	strbcc	r3, [r0, r9]
   12490:	add	r3, r9, #1
   12494:	cmp	sl, r3
   12498:	ldrhi	r1, [sp, #40]	; 0x28
   1249c:	movhi	r2, #92	; 0x5c
   124a0:	strbhi	r2, [r1, r3]
   124a4:	add	r3, r9, #2
   124a8:	cmp	sl, r3
   124ac:	add	r9, r9, #3
   124b0:	ldrhi	r0, [sp, #40]	; 0x28
   124b4:	movhi	r2, #39	; 0x27
   124b8:	strbhi	r2, [r0, r3]
   124bc:	b	121c8 <close_stdout@@Base+0x838>
   124c0:	ldr	r1, [sp, #64]	; 0x40
   124c4:	cmp	r1, #1
   124c8:	bne	127c0 <close_stdout@@Base+0xe30>
   124cc:	bl	1108c <__ctype_b_loc@plt>
   124d0:	ldr	r2, [sp, #64]	; 0x40
   124d4:	sxth	r3, r4
   124d8:	str	r2, [sp, #60]	; 0x3c
   124dc:	lsl	r3, r3, #1
   124e0:	ldr	r2, [r0]
   124e4:	ldrh	r2, [r2, r3]
   124e8:	eor	r2, r2, #16384	; 0x4000
   124ec:	ubfx	r2, r2, #14, #1
   124f0:	ldr	r1, [sp, #24]
   124f4:	ands	r2, r2, r1
   124f8:	beq	121c8 <close_stdout@@Base+0x838>
   124fc:	ldr	r3, [sp, #60]	; 0x3c
   12500:	mov	r0, #92	; 0x5c
   12504:	ldr	r7, [sp, #36]	; 0x24
   12508:	add	r1, r3, fp
   1250c:	str	r8, [sp, #60]	; 0x3c
   12510:	ldr	r3, [sp, #40]	; 0x28
   12514:	b	12578 <close_stdout@@Base+0xbe8>
   12518:	cmp	r7, #0
   1251c:	bne	129b8 <close_stdout@@Base+0x1028>
   12520:	add	ip, r9, #1
   12524:	cmp	r9, sl
   12528:	strbcc	r0, [r3, r9]
   1252c:	cmp	sl, ip
   12530:	lsrhi	r8, r4, #6
   12534:	addhi	r8, r8, #48	; 0x30
   12538:	strbhi	r8, [r3, ip]
   1253c:	add	ip, r9, #2
   12540:	add	r9, r9, #3
   12544:	cmp	sl, ip
   12548:	ubfxhi	r8, r4, #3, #3
   1254c:	and	r4, r4, #7
   12550:	add	r4, r4, #48	; 0x30
   12554:	addhi	r8, r8, #48	; 0x30
   12558:	strbhi	r8, [r3, ip]
   1255c:	add	fp, fp, #1
   12560:	cmp	r1, fp
   12564:	bls	125a4 <close_stdout@@Base+0xc14>
   12568:	cmp	r9, sl
   1256c:	strbcc	r4, [r3, r9]
   12570:	ldrb	r4, [r5, #1]!
   12574:	add	r9, r9, #1
   12578:	cmp	r2, #0
   1257c:	bne	12518 <close_stdout@@Base+0xb88>
   12580:	cmp	r6, #0
   12584:	beq	1255c <close_stdout@@Base+0xbcc>
   12588:	add	fp, fp, #1
   1258c:	cmp	r9, sl
   12590:	strbcc	r0, [r3, r9]
   12594:	cmp	r1, fp
   12598:	add	r9, r9, #1
   1259c:	mov	r6, #0
   125a0:	bhi	12568 <close_stdout@@Base+0xbd8>
   125a4:	ldr	r8, [sp, #60]	; 0x3c
   125a8:	b	12224 <close_stdout@@Base+0x894>
   125ac:	ldr	r3, [sp, #36]	; 0x24
   125b0:	cmp	r3, #0
   125b4:	bne	12ab8 <close_stdout@@Base+0x1128>
   125b8:	cmp	sl, #0
   125bc:	beq	129d0 <close_stdout@@Base+0x1040>
   125c0:	ldr	r1, [sp, #40]	; 0x28
   125c4:	mov	r0, #1
   125c8:	ldr	r2, [pc, #1296]	; 12ae0 <close_stdout@@Base+0x1150>
   125cc:	mov	r3, #34	; 0x22
   125d0:	str	r0, [sp, #24]
   125d4:	mov	r9, r0
   125d8:	add	r2, pc, r2
   125dc:	str	r0, [sp, #28]
   125e0:	strb	r3, [r1]
   125e4:	str	r2, [sp, #52]	; 0x34
   125e8:	b	11e94 <close_stdout@@Base+0x504>
   125ec:	ldr	r3, [pc, #1264]	; 12ae4 <close_stdout@@Base+0x1154>
   125f0:	mov	r2, #1
   125f4:	mov	r0, #3
   125f8:	str	r2, [sp, #36]	; 0x24
   125fc:	add	r3, pc, r3
   12600:	str	r2, [sp, #24]
   12604:	str	r3, [sp, #52]	; 0x34
   12608:	mov	r9, #0
   1260c:	str	r2, [sp, #28]
   12610:	str	r0, [sp, #160]	; 0xa0
   12614:	b	11e94 <close_stdout@@Base+0x504>
   12618:	mov	r0, #0
   1261c:	mov	r1, #1
   12620:	str	r0, [sp, #36]	; 0x24
   12624:	mov	r9, r0
   12628:	str	r1, [sp, #24]
   1262c:	str	r0, [sp, #28]
   12630:	str	r0, [sp, #52]	; 0x34
   12634:	b	11e94 <close_stdout@@Base+0x504>
   12638:	ldr	r3, [sp, #160]	; 0xa0
   1263c:	cmp	r3, #8
   12640:	beq	1266c <close_stdout@@Base+0xcdc>
   12644:	ldr	r0, [pc, #1180]	; 12ae8 <close_stdout@@Base+0x1158>
   12648:	mov	r1, r3
   1264c:	add	r0, pc, r0
   12650:	bl	11c7c <close_stdout@@Base+0x2ec>
   12654:	ldr	r1, [sp, #160]	; 0xa0
   12658:	str	r0, [sp, #72]	; 0x48
   1265c:	ldr	r0, [pc, #1160]	; 12aec <close_stdout@@Base+0x115c>
   12660:	add	r0, pc, r0
   12664:	bl	11c7c <close_stdout@@Base+0x2ec>
   12668:	str	r0, [sp, #68]	; 0x44
   1266c:	ldr	r0, [sp, #36]	; 0x24
   12670:	cmp	r0, #0
   12674:	movne	r9, #0
   12678:	bne	126b0 <close_stdout@@Base+0xd20>
   1267c:	ldr	r1, [sp, #72]	; 0x48
   12680:	ldrb	r3, [r1]
   12684:	cmp	r3, #0
   12688:	beq	12a88 <close_stdout@@Base+0x10f8>
   1268c:	mov	r2, r1
   12690:	ldr	r1, [sp, #40]	; 0x28
   12694:	mov	r9, r0
   12698:	cmp	r9, sl
   1269c:	strbcc	r3, [r1, r9]
   126a0:	ldrb	r3, [r2, #1]!
   126a4:	add	r9, r9, #1
   126a8:	cmp	r3, #0
   126ac:	bne	12698 <close_stdout@@Base+0xd08>
   126b0:	ldr	r0, [sp, #68]	; 0x44
   126b4:	str	r0, [sp, #52]	; 0x34
   126b8:	bl	110a4 <strlen@plt>
   126bc:	mov	r2, #1
   126c0:	str	r2, [sp, #24]
   126c4:	str	r0, [sp, #28]
   126c8:	b	11e94 <close_stdout@@Base+0x504>
   126cc:	ldr	r3, [pc, #1052]	; 12af0 <close_stdout@@Base+0x1160>
   126d0:	mov	r2, #0
   126d4:	mov	r1, #1
   126d8:	mov	r0, #2
   126dc:	add	r3, pc, r3
   126e0:	str	r1, [sp, #36]	; 0x24
   126e4:	str	r2, [sp, #24]
   126e8:	mov	r9, r2
   126ec:	str	r1, [sp, #28]
   126f0:	str	r3, [sp, #52]	; 0x34
   126f4:	str	r0, [sp, #160]	; 0xa0
   126f8:	b	11e94 <close_stdout@@Base+0x504>
   126fc:	ldr	r3, [sp, #36]	; 0x24
   12700:	cmp	r3, #0
   12704:	bne	12a94 <close_stdout@@Base+0x1104>
   12708:	cmp	sl, #0
   1270c:	beq	129f0 <close_stdout@@Base+0x1060>
   12710:	ldr	r1, [sp, #40]	; 0x28
   12714:	mov	r3, #39	; 0x27
   12718:	ldr	r2, [sp, #36]	; 0x24
   1271c:	mov	r0, #1
   12720:	mov	r9, r0
   12724:	str	r0, [sp, #28]
   12728:	strb	r3, [r1]
   1272c:	ldr	r3, [pc, #960]	; 12af4 <close_stdout@@Base+0x1164>
   12730:	str	r2, [sp, #24]
   12734:	add	r3, pc, r3
   12738:	str	r3, [sp, #52]	; 0x34
   1273c:	b	11e94 <close_stdout@@Base+0x504>
   12740:	ldr	r2, [sp, #28]
   12744:	cmp	r2, #1
   12748:	add	r4, fp, r2
   1274c:	movls	r3, #0
   12750:	movhi	r3, #1
   12754:	cmn	r8, #1
   12758:	movne	r3, #0
   1275c:	cmp	r3, #0
   12760:	beq	12770 <close_stdout@@Base+0xde0>
   12764:	ldr	r0, [sp, #32]
   12768:	bl	110a4 <strlen@plt>
   1276c:	mov	r8, r0
   12770:	cmp	r8, r4
   12774:	ldrcc	r3, [sp, #32]
   12778:	movcc	r6, #0
   1277c:	addcc	r5, r3, fp
   12780:	bcc	11ef0 <close_stdout@@Base+0x560>
   12784:	ldr	r0, [sp, #32]
   12788:	ldr	r1, [sp, #52]	; 0x34
   1278c:	add	r5, r0, fp
   12790:	ldr	r2, [sp, #28]
   12794:	mov	r0, r5
   12798:	bl	10f9c <memcmp@plt>
   1279c:	cmp	r0, #0
   127a0:	bne	127b8 <close_stdout@@Base+0xe28>
   127a4:	ldr	r1, [sp, #36]	; 0x24
   127a8:	cmp	r1, #0
   127ac:	bne	12310 <close_stdout@@Base+0x980>
   127b0:	mov	r6, #1
   127b4:	b	11ef0 <close_stdout@@Base+0x560>
   127b8:	mov	r6, #0
   127bc:	b	11ef0 <close_stdout@@Base+0x560>
   127c0:	add	r7, sp, #108	; 0x6c
   127c4:	cmn	r8, #1
   127c8:	mov	r3, #0
   127cc:	str	r3, [sp, #108]	; 0x6c
   127d0:	str	r3, [r7, #4]
   127d4:	beq	129c0 <close_stdout@@Base+0x1030>
   127d8:	mov	r1, #0
   127dc:	ldr	r0, [sp, #32]
   127e0:	mov	ip, #1
   127e4:	str	r9, [sp, #88]	; 0x58
   127e8:	str	r6, [sp, #96]	; 0x60
   127ec:	mov	r9, r1
   127f0:	str	r5, [sp, #100]	; 0x64
   127f4:	mov	r6, ip
   127f8:	mov	r5, r7
   127fc:	add	r3, sp, #104	; 0x68
   12800:	sub	r0, r0, #1
   12804:	str	r3, [sp, #80]	; 0x50
   12808:	str	r0, [sp, #84]	; 0x54
   1280c:	str	r1, [sp, #60]	; 0x3c
   12810:	str	r4, [sp, #92]	; 0x5c
   12814:	ldr	r2, [sp, #32]
   12818:	add	r7, r9, fp
   1281c:	add	r0, sp, #104	; 0x68
   12820:	mov	r3, r5
   12824:	add	r4, r2, r7
   12828:	rsb	r2, r7, r8
   1282c:	mov	r1, r4
   12830:	bl	11020 <mbrtowc@plt>
   12834:	subs	r2, r0, #0
   12838:	beq	12944 <close_stdout@@Base+0xfb4>
   1283c:	cmn	r2, #1
   12840:	beq	12a6c <close_stdout@@Base+0x10dc>
   12844:	cmn	r2, #2
   12848:	beq	12a10 <close_stdout@@Base+0x1080>
   1284c:	ldr	r3, [sp, #36]	; 0x24
   12850:	ldr	r0, [sp, #160]	; 0xa0
   12854:	cmp	r0, #2
   12858:	movne	r3, #0
   1285c:	andeq	r3, r3, #1
   12860:	cmp	r3, #0
   12864:	beq	12920 <close_stdout@@Base+0xf90>
   12868:	cmp	r2, #1
   1286c:	beq	12920 <close_stdout@@Base+0xf90>
   12870:	ldr	r1, [sp, #84]	; 0x54
   12874:	add	r3, r1, r2
   12878:	add	r7, r3, r7
   1287c:	ldrb	r3, [r4, #1]!
   12880:	sub	r3, r3, #91	; 0x5b
   12884:	cmp	r3, #33	; 0x21
   12888:	addls	pc, pc, r3, lsl #2
   1288c:	b	12918 <close_stdout@@Base+0xf88>
   12890:	b	12310 <close_stdout@@Base+0x980>
   12894:	b	12310 <close_stdout@@Base+0x980>
   12898:	b	12918 <close_stdout@@Base+0xf88>
   1289c:	b	12310 <close_stdout@@Base+0x980>
   128a0:	b	12918 <close_stdout@@Base+0xf88>
   128a4:	b	12310 <close_stdout@@Base+0x980>
   128a8:	b	12918 <close_stdout@@Base+0xf88>
   128ac:	b	12918 <close_stdout@@Base+0xf88>
   128b0:	b	12918 <close_stdout@@Base+0xf88>
   128b4:	b	12918 <close_stdout@@Base+0xf88>
   128b8:	b	12918 <close_stdout@@Base+0xf88>
   128bc:	b	12918 <close_stdout@@Base+0xf88>
   128c0:	b	12918 <close_stdout@@Base+0xf88>
   128c4:	b	12918 <close_stdout@@Base+0xf88>
   128c8:	b	12918 <close_stdout@@Base+0xf88>
   128cc:	b	12918 <close_stdout@@Base+0xf88>
   128d0:	b	12918 <close_stdout@@Base+0xf88>
   128d4:	b	12918 <close_stdout@@Base+0xf88>
   128d8:	b	12918 <close_stdout@@Base+0xf88>
   128dc:	b	12918 <close_stdout@@Base+0xf88>
   128e0:	b	12918 <close_stdout@@Base+0xf88>
   128e4:	b	12918 <close_stdout@@Base+0xf88>
   128e8:	b	12918 <close_stdout@@Base+0xf88>
   128ec:	b	12918 <close_stdout@@Base+0xf88>
   128f0:	b	12918 <close_stdout@@Base+0xf88>
   128f4:	b	12918 <close_stdout@@Base+0xf88>
   128f8:	b	12918 <close_stdout@@Base+0xf88>
   128fc:	b	12918 <close_stdout@@Base+0xf88>
   12900:	b	12918 <close_stdout@@Base+0xf88>
   12904:	b	12918 <close_stdout@@Base+0xf88>
   12908:	b	12918 <close_stdout@@Base+0xf88>
   1290c:	b	12918 <close_stdout@@Base+0xf88>
   12910:	b	12918 <close_stdout@@Base+0xf88>
   12914:	b	12310 <close_stdout@@Base+0x980>
   12918:	cmp	r4, r7
   1291c:	bne	1287c <close_stdout@@Base+0xeec>
   12920:	ldr	r0, [sp, #104]	; 0x68
   12924:	add	r9, r9, r2
   12928:	bl	10fd8 <iswprint@plt>
   1292c:	cmp	r0, #0
   12930:	mov	r0, r5
   12934:	moveq	r6, #0
   12938:	bl	10f90 <mbsinit@plt>
   1293c:	cmp	r0, #0
   12940:	beq	12814 <close_stdout@@Base+0xe84>
   12944:	mov	ip, r6
   12948:	eor	r2, ip, #1
   1294c:	str	r9, [sp, #60]	; 0x3c
   12950:	ldr	r4, [sp, #92]	; 0x5c
   12954:	uxtb	r2, r2
   12958:	ldr	r9, [sp, #88]	; 0x58
   1295c:	ldr	r6, [sp, #96]	; 0x60
   12960:	ldr	r5, [sp, #100]	; 0x64
   12964:	ldr	r3, [sp, #60]	; 0x3c
   12968:	cmp	r3, #1
   1296c:	bls	124f0 <close_stdout@@Base+0xb60>
   12970:	ldr	r0, [sp, #24]
   12974:	and	r2, r2, r0
   12978:	b	124fc <close_stdout@@Base+0xb6c>
   1297c:	ldr	r2, [sp, #164]	; 0xa4
   12980:	tst	r2, #1
   12984:	addne	fp, fp, #1
   12988:	bne	11eb8 <close_stdout@@Base+0x528>
   1298c:	b	121c8 <close_stdout@@Base+0x838>
   12990:	ldr	r0, [sp, #36]	; 0x24
   12994:	cmp	r0, #0
   12998:	beq	121c8 <close_stdout@@Base+0x838>
   1299c:	b	12310 <close_stdout@@Base+0x980>
   129a0:	ldr	r2, [sp, #32]
   129a4:	ldrb	r3, [r2, #1]
   129a8:	adds	r3, r3, #0
   129ac:	movne	r3, #1
   129b0:	b	122e4 <close_stdout@@Base+0x954>
   129b4:	bl	11194 <abort@plt>
   129b8:	ldr	r8, [sp, #60]	; 0x3c
   129bc:	b	12310 <close_stdout@@Base+0x980>
   129c0:	ldr	r0, [sp, #32]
   129c4:	bl	110a4 <strlen@plt>
   129c8:	mov	r8, r0
   129cc:	b	127d8 <close_stdout@@Base+0xe48>
   129d0:	ldr	r2, [pc, #288]	; 12af8 <close_stdout@@Base+0x1168>
   129d4:	mov	r1, #1
   129d8:	mov	r9, r1
   129dc:	str	r1, [sp, #24]
   129e0:	add	r2, pc, r2
   129e4:	str	r1, [sp, #28]
   129e8:	str	r2, [sp, #52]	; 0x34
   129ec:	b	11e94 <close_stdout@@Base+0x504>
   129f0:	ldr	r2, [pc, #260]	; 12afc <close_stdout@@Base+0x116c>
   129f4:	mov	r3, #1
   129f8:	mov	r9, r3
   129fc:	str	r3, [sp, #28]
   12a00:	add	r2, pc, r2
   12a04:	str	sl, [sp, #24]
   12a08:	str	r2, [sp, #52]	; 0x34
   12a0c:	b	11e94 <close_stdout@@Base+0x504>
   12a10:	cmp	r8, r7
   12a14:	str	r9, [sp, #60]	; 0x3c
   12a18:	mov	ip, r4
   12a1c:	ldr	r6, [sp, #96]	; 0x60
   12a20:	ldr	r9, [sp, #88]	; 0x58
   12a24:	ldr	r4, [sp, #92]	; 0x5c
   12a28:	ldr	r5, [sp, #100]	; 0x64
   12a2c:	bls	12a64 <close_stdout@@Base+0x10d4>
   12a30:	ldrb	r3, [ip]
   12a34:	cmp	r3, #0
   12a38:	beq	12a64 <close_stdout@@Base+0x10d4>
   12a3c:	ldr	r3, [sp, #60]	; 0x3c
   12a40:	b	12a50 <close_stdout@@Base+0x10c0>
   12a44:	ldrb	r2, [r5, r3]
   12a48:	cmp	r2, #0
   12a4c:	beq	12a60 <close_stdout@@Base+0x10d0>
   12a50:	add	r3, r3, #1
   12a54:	add	r2, fp, r3
   12a58:	cmp	r8, r2
   12a5c:	bhi	12a44 <close_stdout@@Base+0x10b4>
   12a60:	str	r3, [sp, #60]	; 0x3c
   12a64:	mov	r2, #1
   12a68:	b	12964 <close_stdout@@Base+0xfd4>
   12a6c:	str	r9, [sp, #60]	; 0x3c
   12a70:	mov	r2, #1
   12a74:	ldr	r4, [sp, #92]	; 0x5c
   12a78:	ldr	r6, [sp, #96]	; 0x60
   12a7c:	ldr	r9, [sp, #88]	; 0x58
   12a80:	ldr	r5, [sp, #100]	; 0x64
   12a84:	b	12964 <close_stdout@@Base+0xfd4>
   12a88:	ldr	r9, [sp, #36]	; 0x24
   12a8c:	b	126b0 <close_stdout@@Base+0xd20>
   12a90:	bl	10fb4 <__stack_chk_fail@plt>
   12a94:	ldr	r1, [pc, #100]	; 12b00 <close_stdout@@Base+0x1170>
   12a98:	mov	r3, #0
   12a9c:	mov	r0, #1
   12aa0:	str	r3, [sp, #24]
   12aa4:	add	r1, pc, r1
   12aa8:	str	r0, [sp, #28]
   12aac:	mov	r9, r3
   12ab0:	str	r1, [sp, #52]	; 0x34
   12ab4:	b	11e94 <close_stdout@@Base+0x504>
   12ab8:	ldr	r0, [pc, #68]	; 12b04 <close_stdout@@Base+0x1174>
   12abc:	mov	r3, #1
   12ac0:	mov	r9, #0
   12ac4:	str	r3, [sp, #24]
   12ac8:	add	r0, pc, r0
   12acc:	str	r3, [sp, #28]
   12ad0:	str	r0, [sp, #52]	; 0x34
   12ad4:	b	11e94 <close_stdout@@Base+0x504>
   12ad8:	strdeq	r4, [r1], -ip
   12adc:	andeq	r0, r0, ip, ror #1
   12ae0:	andeq	r2, r0, r8, ror r3
   12ae4:	andeq	r2, r0, r4, asr r3
   12ae8:	andeq	r2, r0, r0, lsl r3
   12aec:	andeq	r2, r0, ip, ror #5
   12af0:	andeq	r2, r0, r0, ror r2
   12af4:	andeq	r2, r0, r8, lsl r2
   12af8:	andeq	r1, r0, r0, ror pc
   12afc:	andeq	r1, r0, ip, asr #30
   12b00:	andeq	r1, r0, r8, lsr #29
   12b04:	andeq	r1, r0, r8, lsl #29
   12b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b0c:	sub	sp, sp, #44	; 0x2c
   12b10:	mov	r6, r0
   12b14:	mov	r9, r1
   12b18:	mov	sl, r2
   12b1c:	mov	r4, r3
   12b20:	bl	110c8 <__errno_location@plt>
   12b24:	ldr	fp, [pc, #412]	; 12cc8 <close_stdout@@Base+0x1338>
   12b28:	cmp	r6, #0
   12b2c:	add	fp, pc, fp
   12b30:	ldr	r5, [fp]
   12b34:	ldr	r1, [r0]
   12b38:	mov	r8, r0
   12b3c:	str	r1, [sp, #36]	; 0x24
   12b40:	blt	12cc0 <close_stdout@@Base+0x1330>
   12b44:	ldr	r3, [pc, #384]	; 12ccc <close_stdout@@Base+0x133c>
   12b48:	add	r3, pc, r3
   12b4c:	ldr	r3, [r3]
   12b50:	cmp	r6, r3
   12b54:	bcc	12ba8 <close_stdout@@Base+0x1218>
   12b58:	add	r7, r6, #1
   12b5c:	cmn	r7, #-536870911	; 0xe0000001
   12b60:	bhi	12cc4 <close_stdout@@Base+0x1334>
   12b64:	add	r3, fp, #4
   12b68:	cmp	r5, r3
   12b6c:	beq	12c98 <close_stdout@@Base+0x1308>
   12b70:	mov	r0, r5
   12b74:	lsl	r1, r7, #3
   12b78:	bl	139a0 <close_stdout@@Base+0x2010>
   12b7c:	mov	r5, r0
   12b80:	str	r0, [fp]
   12b84:	ldr	fp, [pc, #324]	; 12cd0 <close_stdout@@Base+0x1340>
   12b88:	mov	r1, #0
   12b8c:	add	fp, pc, fp
   12b90:	ldr	r0, [fp]
   12b94:	rsb	r2, r0, r7
   12b98:	add	r0, r5, r0, lsl #3
   12b9c:	lsl	r2, r2, #3
   12ba0:	bl	110e0 <memset@plt>
   12ba4:	str	r7, [fp]
   12ba8:	add	r2, r4, #8
   12bac:	str	r2, [sp, #32]
   12bb0:	ldr	r1, [r4]
   12bb4:	add	fp, r5, r6, lsl #3
   12bb8:	ldr	lr, [sp, #32]
   12bbc:	mov	r2, r9
   12bc0:	ldr	r3, [r4, #4]
   12bc4:	ldr	ip, [r5, r6, lsl #3]
   12bc8:	ldr	r7, [fp, #4]
   12bcc:	orr	r3, r3, #1
   12bd0:	str	r1, [sp]
   12bd4:	str	r3, [sp, #4]
   12bd8:	mov	r1, ip
   12bdc:	str	lr, [sp, #8]
   12be0:	mov	r0, r7
   12be4:	ldr	lr, [r4, #40]	; 0x28
   12be8:	str	r3, [sp, #28]
   12bec:	mov	r3, sl
   12bf0:	str	lr, [sp, #12]
   12bf4:	ldr	lr, [r4, #44]	; 0x2c
   12bf8:	str	ip, [sp, #24]
   12bfc:	str	lr, [sp, #16]
   12c00:	bl	11de0 <close_stdout@@Base+0x450>
   12c04:	ldr	ip, [sp, #24]
   12c08:	cmp	ip, r0
   12c0c:	bhi	12c84 <close_stdout@@Base+0x12f4>
   12c10:	ldr	r3, [pc, #188]	; 12cd4 <close_stdout@@Base+0x1344>
   12c14:	add	r1, r0, #1
   12c18:	str	r1, [r5, r6, lsl #3]
   12c1c:	add	r3, pc, r3
   12c20:	cmp	r7, r3
   12c24:	beq	12c38 <close_stdout@@Base+0x12a8>
   12c28:	mov	r0, r7
   12c2c:	str	r1, [sp, #24]
   12c30:	bl	10f60 <free@plt>
   12c34:	ldr	r1, [sp, #24]
   12c38:	mov	r0, r1
   12c3c:	str	r1, [sp, #24]
   12c40:	bl	13948 <close_stdout@@Base+0x1fb8>
   12c44:	ldr	r3, [sp, #28]
   12c48:	ldr	lr, [sp, #32]
   12c4c:	mov	r2, r9
   12c50:	str	r0, [fp, #4]
   12c54:	mov	r7, r0
   12c58:	ldr	ip, [r4]
   12c5c:	str	r3, [sp, #4]
   12c60:	mov	r3, sl
   12c64:	str	lr, [sp, #8]
   12c68:	str	ip, [sp]
   12c6c:	ldr	ip, [r4, #40]	; 0x28
   12c70:	ldr	r1, [sp, #24]
   12c74:	str	ip, [sp, #12]
   12c78:	ldr	ip, [r4, #44]	; 0x2c
   12c7c:	str	ip, [sp, #16]
   12c80:	bl	11de0 <close_stdout@@Base+0x450>
   12c84:	ldr	r1, [sp, #36]	; 0x24
   12c88:	mov	r0, r7
   12c8c:	str	r1, [r8]
   12c90:	add	sp, sp, #44	; 0x2c
   12c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c98:	lsl	r1, r7, #3
   12c9c:	mov	r0, #0
   12ca0:	str	r3, [sp, #24]
   12ca4:	bl	139a0 <close_stdout@@Base+0x2010>
   12ca8:	ldr	r3, [sp, #24]
   12cac:	mov	r5, r0
   12cb0:	ldm	r3, {r0, r1}
   12cb4:	str	r5, [fp]
   12cb8:	stm	r5, {r0, r1}
   12cbc:	b	12b84 <close_stdout@@Base+0x11f4>
   12cc0:	bl	11194 <abort@plt>
   12cc4:	bl	13b5c <close_stdout@@Base+0x21cc>
   12cc8:	andeq	r3, r1, r4, lsr r6
   12ccc:	andeq	r3, r1, r4, ror #11
   12cd0:	andeq	r3, r1, r0, lsr #11
   12cd4:	andeq	r3, r1, r4, ror #10
   12cd8:	push	{r4, r5, r6, lr}
   12cdc:	mov	r5, r0
   12ce0:	bl	110c8 <__errno_location@plt>
   12ce4:	cmp	r5, #0
   12ce8:	mov	r1, #48	; 0x30
   12cec:	mov	r4, r0
   12cf0:	ldr	r0, [pc, #24]	; 12d10 <close_stdout@@Base+0x1380>
   12cf4:	ldr	r6, [r4]
   12cf8:	add	r0, pc, r0
   12cfc:	add	r0, r0, #256	; 0x100
   12d00:	movne	r0, r5
   12d04:	bl	13b1c <close_stdout@@Base+0x218c>
   12d08:	str	r6, [r4]
   12d0c:	pop	{r4, r5, r6, pc}
   12d10:	andeq	r3, r1, r8, lsl #9
   12d14:	cmp	r0, #0
   12d18:	beq	12d24 <close_stdout@@Base+0x1394>
   12d1c:	ldr	r0, [r0]
   12d20:	bx	lr
   12d24:	ldr	r0, [pc, #12]	; 12d38 <close_stdout@@Base+0x13a8>
   12d28:	add	r0, pc, r0
   12d2c:	add	r0, r0, #256	; 0x100
   12d30:	ldr	r0, [r0]
   12d34:	bx	lr
   12d38:	andeq	r3, r1, r8, asr r4
   12d3c:	cmp	r0, #0
   12d40:	beq	12d4c <close_stdout@@Base+0x13bc>
   12d44:	str	r1, [r0]
   12d48:	bx	lr
   12d4c:	ldr	r0, [pc, #12]	; 12d60 <close_stdout@@Base+0x13d0>
   12d50:	add	r0, pc, r0
   12d54:	add	r0, r0, #256	; 0x100
   12d58:	str	r1, [r0]
   12d5c:	bx	lr
   12d60:	andeq	r3, r1, r0, lsr r4
   12d64:	cmp	r0, #0
   12d68:	movne	r3, r0
   12d6c:	beq	12d9c <close_stdout@@Base+0x140c>
   12d70:	lsr	ip, r1, #5
   12d74:	and	r1, r1, #31
   12d78:	add	r3, r3, ip, lsl #2
   12d7c:	ldr	ip, [r3, #8]
   12d80:	lsr	r0, ip, r1
   12d84:	eor	r2, r0, r2
   12d88:	and	r0, r0, #1
   12d8c:	and	r2, r2, #1
   12d90:	eor	ip, ip, r2, lsl r1
   12d94:	str	ip, [r3, #8]
   12d98:	bx	lr
   12d9c:	ldr	r3, [pc, #8]	; 12dac <close_stdout@@Base+0x141c>
   12da0:	add	r3, pc, r3
   12da4:	add	r3, r3, #256	; 0x100
   12da8:	b	12d70 <close_stdout@@Base+0x13e0>
   12dac:	andeq	r3, r1, r0, ror #7
   12db0:	subs	r3, r0, #0
   12db4:	beq	12dc4 <close_stdout@@Base+0x1434>
   12db8:	ldr	r0, [r3, #4]
   12dbc:	str	r1, [r3, #4]
   12dc0:	bx	lr
   12dc4:	ldr	r3, [pc, #8]	; 12dd4 <close_stdout@@Base+0x1444>
   12dc8:	add	r3, pc, r3
   12dcc:	add	r3, r3, #256	; 0x100
   12dd0:	b	12db8 <close_stdout@@Base+0x1428>
   12dd4:			; <UNDEFINED> instruction: 0x000133b8
   12dd8:	cmp	r0, #0
   12ddc:	push	{r3, lr}
   12de0:	beq	12e04 <close_stdout@@Base+0x1474>
   12de4:	cmp	r2, #0
   12de8:	cmpne	r1, #0
   12dec:	mov	r3, #8
   12df0:	strne	r1, [r0, #40]	; 0x28
   12df4:	str	r3, [r0]
   12df8:	strne	r2, [r0, #44]	; 0x2c
   12dfc:	popne	{r3, pc}
   12e00:	bl	11194 <abort@plt>
   12e04:	ldr	r0, [pc, #8]	; 12e14 <close_stdout@@Base+0x1484>
   12e08:	add	r0, pc, r0
   12e0c:	add	r0, r0, #256	; 0x100
   12e10:	b	12de4 <close_stdout@@Base+0x1454>
   12e14:	andeq	r3, r1, r8, ror r3
   12e18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e1c:	sub	sp, sp, #24
   12e20:	mov	r7, r0
   12e24:	mov	sl, r1
   12e28:	ldr	r4, [sp, #56]	; 0x38
   12e2c:	mov	r9, r2
   12e30:	mov	r8, r3
   12e34:	cmp	r4, #0
   12e38:	beq	12e8c <close_stdout@@Base+0x14fc>
   12e3c:	bl	110c8 <__errno_location@plt>
   12e40:	ldr	r3, [r4]
   12e44:	add	lr, r4, #8
   12e48:	mov	r1, sl
   12e4c:	mov	r2, r9
   12e50:	ldr	r6, [r0]
   12e54:	mov	r5, r0
   12e58:	str	r3, [sp]
   12e5c:	mov	r0, r7
   12e60:	ldr	ip, [r4, #4]
   12e64:	mov	r3, r8
   12e68:	stmib	sp, {ip, lr}
   12e6c:	ldr	ip, [r4, #40]	; 0x28
   12e70:	str	ip, [sp, #12]
   12e74:	ldr	ip, [r4, #44]	; 0x2c
   12e78:	str	ip, [sp, #16]
   12e7c:	bl	11de0 <close_stdout@@Base+0x450>
   12e80:	str	r6, [r5]
   12e84:	add	sp, sp, #24
   12e88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e8c:	ldr	r4, [pc, #8]	; 12e9c <close_stdout@@Base+0x150c>
   12e90:	add	r4, pc, r4
   12e94:	add	r4, r4, #256	; 0x100
   12e98:	b	12e3c <close_stdout@@Base+0x14ac>
   12e9c:	strdeq	r3, [r1], -r0
   12ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea4:	subs	r4, r3, #0
   12ea8:	sub	sp, sp, #36	; 0x24
   12eac:	mov	r7, r0
   12eb0:	mov	r6, r1
   12eb4:	mov	r5, r2
   12eb8:	beq	12f74 <close_stdout@@Base+0x15e4>
   12ebc:	bl	110c8 <__errno_location@plt>
   12ec0:	ldr	r3, [r4]
   12ec4:	ldr	sl, [r4, #4]
   12ec8:	add	r9, r4, #8
   12ecc:	mov	r8, r0
   12ed0:	mov	r0, #0
   12ed4:	ldr	r2, [r8]
   12ed8:	cmp	r5, r0
   12edc:	orreq	sl, sl, #1
   12ee0:	str	r9, [sp, #8]
   12ee4:	mov	r1, r0
   12ee8:	stm	sp, {r3, sl}
   12eec:	mov	r3, r6
   12ef0:	ldr	ip, [r4, #40]	; 0x28
   12ef4:	str	r2, [sp, #28]
   12ef8:	mov	r2, r7
   12efc:	str	ip, [sp, #12]
   12f00:	ldr	ip, [r4, #44]	; 0x2c
   12f04:	str	ip, [sp, #16]
   12f08:	bl	11de0 <close_stdout@@Base+0x450>
   12f0c:	add	r1, r0, #1
   12f10:	mov	fp, r0
   12f14:	str	r1, [sp, #24]
   12f18:	mov	r0, r1
   12f1c:	bl	13948 <close_stdout@@Base+0x1fb8>
   12f20:	ldr	lr, [r4]
   12f24:	str	sl, [sp, #4]
   12f28:	mov	r3, r6
   12f2c:	str	r9, [sp, #8]
   12f30:	mov	r2, r7
   12f34:	str	lr, [sp]
   12f38:	ldr	lr, [r4, #40]	; 0x28
   12f3c:	ldr	r1, [sp, #24]
   12f40:	str	lr, [sp, #12]
   12f44:	ldr	lr, [r4, #44]	; 0x2c
   12f48:	str	lr, [sp, #16]
   12f4c:	str	r0, [sp, #24]
   12f50:	bl	11de0 <close_stdout@@Base+0x450>
   12f54:	ldr	r3, [sp, #28]
   12f58:	cmp	r5, #0
   12f5c:	str	r3, [r8]
   12f60:	ldr	ip, [sp, #24]
   12f64:	strne	fp, [r5]
   12f68:	mov	r0, ip
   12f6c:	add	sp, sp, #36	; 0x24
   12f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f74:	ldr	r4, [pc, #8]	; 12f84 <close_stdout@@Base+0x15f4>
   12f78:	add	r4, pc, r4
   12f7c:	add	r4, r4, #256	; 0x100
   12f80:	b	12ebc <close_stdout@@Base+0x152c>
   12f84:	andeq	r3, r1, r8, lsl #4
   12f88:	mov	r3, r2
   12f8c:	mov	r2, #0
   12f90:	b	12ea0 <close_stdout@@Base+0x1510>
   12f94:	ldr	r2, [pc, #152]	; 13034 <close_stdout@@Base+0x16a4>
   12f98:	push	{r3, r4, r5, r6, r7, lr}
   12f9c:	add	r2, pc, r2
   12fa0:	ldr	r3, [pc, #144]	; 13038 <close_stdout@@Base+0x16a8>
   12fa4:	ldr	r6, [r2]
   12fa8:	add	r3, pc, r3
   12fac:	cmp	r6, #1
   12fb0:	ldr	r7, [r3]
   12fb4:	movhi	r4, #1
   12fb8:	movhi	r5, r7
   12fbc:	bls	12fd8 <close_stdout@@Base+0x1648>
   12fc0:	ldr	r0, [r5, #12]
   12fc4:	add	r4, r4, #1
   12fc8:	bl	10f60 <free@plt>
   12fcc:	cmp	r4, r6
   12fd0:	add	r5, r5, #8
   12fd4:	bne	12fc0 <close_stdout@@Base+0x1630>
   12fd8:	ldr	r4, [pc, #92]	; 1303c <close_stdout@@Base+0x16ac>
   12fdc:	ldr	r0, [r7, #4]
   12fe0:	add	r4, pc, r4
   12fe4:	cmp	r0, r4
   12fe8:	beq	13000 <close_stdout@@Base+0x1670>
   12fec:	bl	10f60 <free@plt>
   12ff0:	ldr	r3, [pc, #72]	; 13040 <close_stdout@@Base+0x16b0>
   12ff4:	mov	r2, #256	; 0x100
   12ff8:	add	r3, pc, r3
   12ffc:	stmib	r3, {r2, r4}
   13000:	ldr	r4, [pc, #60]	; 13044 <close_stdout@@Base+0x16b4>
   13004:	add	r4, pc, r4
   13008:	add	r5, r4, #4
   1300c:	cmp	r7, r5
   13010:	beq	13020 <close_stdout@@Base+0x1690>
   13014:	mov	r0, r7
   13018:	bl	10f60 <free@plt>
   1301c:	str	r5, [r4]
   13020:	ldr	r3, [pc, #32]	; 13048 <close_stdout@@Base+0x16b8>
   13024:	mov	r2, #1
   13028:	add	r3, pc, r3
   1302c:	str	r2, [r3]
   13030:	pop	{r3, r4, r5, r6, r7, pc}
   13034:	muleq	r1, r0, r1
   13038:			; <UNDEFINED> instruction: 0x000131b8
   1303c:	andeq	r3, r1, r0, lsr #3
   13040:	andeq	r3, r1, r8, ror #2
   13044:	andeq	r3, r1, ip, asr r1
   13048:	andeq	r3, r1, r4, lsl #2
   1304c:	ldr	r3, [pc, #12]	; 13060 <close_stdout@@Base+0x16d0>
   13050:	mvn	r2, #0
   13054:	add	r3, pc, r3
   13058:	add	r3, r3, #256	; 0x100
   1305c:	b	12b08 <close_stdout@@Base+0x1178>
   13060:	andeq	r3, r1, ip, lsr #2
   13064:	ldr	r3, [pc, #8]	; 13074 <close_stdout@@Base+0x16e4>
   13068:	add	r3, pc, r3
   1306c:	add	r3, r3, #256	; 0x100
   13070:	b	12b08 <close_stdout@@Base+0x1178>
   13074:	andeq	r3, r1, r8, lsl r1
   13078:	mov	r1, r0
   1307c:	mov	r0, #0
   13080:	b	1304c <close_stdout@@Base+0x16bc>
   13084:	mov	r2, r1
   13088:	mov	r1, r0
   1308c:	mov	r0, #0
   13090:	b	13064 <close_stdout@@Base+0x16d4>
   13094:	ldr	r3, [pc, #92]	; 130f8 <close_stdout@@Base+0x1768>
   13098:	ldr	ip, [pc, #92]	; 130fc <close_stdout@@Base+0x176c>
   1309c:	add	r3, pc, r3
   130a0:	push	{r4, r5, r6, r7, lr}
   130a4:	sub	sp, sp, #60	; 0x3c
   130a8:	ldr	r4, [r3, ip]
   130ac:	add	r5, sp, #4
   130b0:	mov	r7, r2
   130b4:	mov	r6, r0
   130b8:	mov	r0, r5
   130bc:	ldr	r3, [r4]
   130c0:	str	r3, [sp, #52]	; 0x34
   130c4:	bl	11c28 <close_stdout@@Base+0x298>
   130c8:	mov	r3, r5
   130cc:	mvn	r2, #0
   130d0:	mov	r0, r6
   130d4:	mov	r1, r7
   130d8:	bl	12b08 <close_stdout@@Base+0x1178>
   130dc:	ldr	r2, [sp, #52]	; 0x34
   130e0:	ldr	r3, [r4]
   130e4:	cmp	r2, r3
   130e8:	bne	130f4 <close_stdout@@Base+0x1764>
   130ec:	add	sp, sp, #60	; 0x3c
   130f0:	pop	{r4, r5, r6, r7, pc}
   130f4:	bl	10fb4 <__stack_chk_fail@plt>
   130f8:	andeq	r2, r1, ip, asr pc
   130fc:	andeq	r0, r0, ip, ror #1
   13100:	ldr	ip, [pc, #96]	; 13168 <close_stdout@@Base+0x17d8>
   13104:	push	{r4, r5, r6, r7, r8, lr}
   13108:	add	ip, pc, ip
   1310c:	ldr	lr, [pc, #88]	; 1316c <close_stdout@@Base+0x17dc>
   13110:	sub	sp, sp, #56	; 0x38
   13114:	mov	r8, r3
   13118:	add	r5, sp, #4
   1311c:	mov	r7, r2
   13120:	mov	r6, r0
   13124:	ldr	r4, [ip, lr]
   13128:	mov	r0, r5
   1312c:	ldr	r3, [r4]
   13130:	str	r3, [sp, #52]	; 0x34
   13134:	bl	11c28 <close_stdout@@Base+0x298>
   13138:	mov	r2, r8
   1313c:	mov	r3, r5
   13140:	mov	r0, r6
   13144:	mov	r1, r7
   13148:	bl	12b08 <close_stdout@@Base+0x1178>
   1314c:	ldr	r2, [sp, #52]	; 0x34
   13150:	ldr	r3, [r4]
   13154:	cmp	r2, r3
   13158:	bne	13164 <close_stdout@@Base+0x17d4>
   1315c:	add	sp, sp, #56	; 0x38
   13160:	pop	{r4, r5, r6, r7, r8, pc}
   13164:	bl	10fb4 <__stack_chk_fail@plt>
   13168:	strdeq	r2, [r1], -r0
   1316c:	andeq	r0, r0, ip, ror #1
   13170:	mov	r2, r1
   13174:	mov	r1, r0
   13178:	mov	r0, #0
   1317c:	b	13094 <close_stdout@@Base+0x1704>
   13180:	mov	ip, r1
   13184:	mov	r3, r2
   13188:	mov	r1, r0
   1318c:	mov	r2, ip
   13190:	mov	r0, #0
   13194:	b	13100 <close_stdout@@Base+0x1770>
   13198:	push	{r4, r5, r6, r7, r8, lr}
   1319c:	mov	r5, r2
   131a0:	ldr	lr, [pc, #136]	; 13230 <close_stdout@@Base+0x18a0>
   131a4:	mov	r7, r0
   131a8:	mov	r6, r1
   131ac:	ldr	r4, [pc, #128]	; 13234 <close_stdout@@Base+0x18a4>
   131b0:	add	lr, pc, lr
   131b4:	sub	sp, sp, #56	; 0x38
   131b8:	add	lr, lr, #256	; 0x100
   131bc:	ldr	r8, [pc, #116]	; 13238 <close_stdout@@Base+0x18a8>
   131c0:	add	r4, pc, r4
   131c4:	add	ip, sp, #4
   131c8:	ldm	lr!, {r0, r1, r2, r3}
   131cc:	ldr	r4, [r4, r8]
   131d0:	stmia	ip!, {r0, r1, r2, r3}
   131d4:	ldm	lr!, {r0, r1, r2, r3}
   131d8:	ldr	r8, [r4]
   131dc:	stmia	ip!, {r0, r1, r2, r3}
   131e0:	ldm	lr, {r0, r1, r2, r3}
   131e4:	str	r8, [sp, #52]	; 0x34
   131e8:	stm	ip, {r0, r1, r2, r3}
   131ec:	mov	r1, r5
   131f0:	add	r5, sp, #4
   131f4:	mov	r2, #1
   131f8:	mov	r0, r5
   131fc:	bl	12d64 <close_stdout@@Base+0x13d4>
   13200:	mov	r2, r6
   13204:	mov	r3, r5
   13208:	mov	r1, r7
   1320c:	mov	r0, #0
   13210:	bl	12b08 <close_stdout@@Base+0x1178>
   13214:	ldr	r2, [sp, #52]	; 0x34
   13218:	ldr	r3, [r4]
   1321c:	cmp	r2, r3
   13220:	bne	1322c <close_stdout@@Base+0x189c>
   13224:	add	sp, sp, #56	; 0x38
   13228:	pop	{r4, r5, r6, r7, r8, pc}
   1322c:	bl	10fb4 <__stack_chk_fail@plt>
   13230:	ldrdeq	r2, [r1], -r0
   13234:	andeq	r2, r1, r8, lsr lr
   13238:	andeq	r0, r0, ip, ror #1
   1323c:	mov	r2, r1
   13240:	mvn	r1, #0
   13244:	b	13198 <close_stdout@@Base+0x1808>
   13248:	mov	r1, #58	; 0x3a
   1324c:	b	1323c <close_stdout@@Base+0x18ac>
   13250:	mov	r2, #58	; 0x3a
   13254:	b	13198 <close_stdout@@Base+0x1808>
   13258:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1325c:	mov	r5, r2
   13260:	ldr	lr, [pc, #144]	; 132f8 <close_stdout@@Base+0x1968>
   13264:	mov	r8, r0
   13268:	mov	r9, r1
   1326c:	mov	r7, r3
   13270:	add	lr, pc, lr
   13274:	ldr	r4, [pc, #128]	; 132fc <close_stdout@@Base+0x196c>
   13278:	add	lr, lr, #256	; 0x100
   1327c:	sub	sp, sp, #56	; 0x38
   13280:	ldr	sl, [pc, #120]	; 13300 <close_stdout@@Base+0x1970>
   13284:	add	r4, pc, r4
   13288:	ldm	lr!, {r0, r1, r2, r3}
   1328c:	add	ip, sp, #4
   13290:	ldr	r4, [r4, sl]
   13294:	ldr	r6, [sp, #88]	; 0x58
   13298:	stmia	ip!, {r0, r1, r2, r3}
   1329c:	ldm	lr!, {r0, r1, r2, r3}
   132a0:	ldr	sl, [r4]
   132a4:	stmia	ip!, {r0, r1, r2, r3}
   132a8:	ldm	lr, {r0, r1, r2, r3}
   132ac:	str	sl, [sp, #52]	; 0x34
   132b0:	stm	ip, {r0, r1, r2, r3}
   132b4:	mov	r2, r5
   132b8:	add	r5, sp, #4
   132bc:	mov	r1, r9
   132c0:	mov	r0, r5
   132c4:	bl	12dd8 <close_stdout@@Base+0x1448>
   132c8:	mov	r2, r6
   132cc:	mov	r3, r5
   132d0:	mov	r0, r8
   132d4:	mov	r1, r7
   132d8:	bl	12b08 <close_stdout@@Base+0x1178>
   132dc:	ldr	r2, [sp, #52]	; 0x34
   132e0:	ldr	r3, [r4]
   132e4:	cmp	r2, r3
   132e8:	bne	132f4 <close_stdout@@Base+0x1964>
   132ec:	add	sp, sp, #56	; 0x38
   132f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132f4:	bl	10fb4 <__stack_chk_fail@plt>
   132f8:	andeq	r2, r1, r0, lsl pc
   132fc:	andeq	r2, r1, r4, ror sp
   13300:	andeq	r0, r0, ip, ror #1
   13304:	push	{lr}		; (str lr, [sp, #-4]!)
   13308:	sub	sp, sp, #12
   1330c:	mvn	ip, #0
   13310:	str	ip, [sp]
   13314:	bl	13258 <close_stdout@@Base+0x18c8>
   13318:	add	sp, sp, #12
   1331c:	pop	{pc}		; (ldr pc, [sp], #4)
   13320:	mov	ip, r1
   13324:	mov	r3, r2
   13328:	mov	r1, r0
   1332c:	mov	r2, ip
   13330:	mov	r0, #0
   13334:	b	13304 <close_stdout@@Base+0x1974>
   13338:	push	{lr}		; (str lr, [sp, #-4]!)
   1333c:	sub	sp, sp, #12
   13340:	mov	lr, r1
   13344:	mov	ip, r2
   13348:	mov	r1, r0
   1334c:	str	r3, [sp]
   13350:	mov	r2, lr
   13354:	mov	r3, ip
   13358:	mov	r0, #0
   1335c:	bl	13258 <close_stdout@@Base+0x18c8>
   13360:	add	sp, sp, #12
   13364:	pop	{pc}		; (ldr pc, [sp], #4)
   13368:	ldr	r3, [pc, #12]	; 1337c <close_stdout@@Base+0x19ec>
   1336c:	ldr	ip, [pc, #12]	; 13380 <close_stdout@@Base+0x19f0>
   13370:	add	r3, pc, r3
   13374:	ldr	r3, [r3, ip]
   13378:	b	12b08 <close_stdout@@Base+0x1178>
   1337c:	andeq	r2, r1, r8, lsl #25
   13380:	andeq	r0, r0, r8, ror #1
   13384:	mov	r2, r1
   13388:	mov	r1, r0
   1338c:	mov	r0, #0
   13390:	b	13368 <close_stdout@@Base+0x19d8>
   13394:	mvn	r2, #0
   13398:	b	13368 <close_stdout@@Base+0x19d8>
   1339c:	mov	r1, r0
   133a0:	mov	r0, #0
   133a4:	b	13394 <close_stdout@@Base+0x1a04>
   133a8:	push	{r4, r5, r6, r7, lr}
   133ac:	cmp	r1, #0
   133b0:	sub	sp, sp, #36	; 0x24
   133b4:	ldr	r7, [pc, #896]	; 1373c <close_stdout@@Base+0x1dac>
   133b8:	mov	ip, r3
   133bc:	mov	r5, r0
   133c0:	add	r7, pc, r7
   133c4:	ldr	r4, [sp, #56]	; 0x38
   133c8:	ldr	r6, [sp, #60]	; 0x3c
   133cc:	beq	13710 <close_stdout@@Base+0x1d80>
   133d0:	str	r2, [sp]
   133d4:	mov	r3, r1
   133d8:	ldr	r2, [pc, #864]	; 13740 <close_stdout@@Base+0x1db0>
   133dc:	mov	r1, #1
   133e0:	str	ip, [sp, #4]
   133e4:	add	r2, pc, r2
   133e8:	bl	11110 <__fprintf_chk@plt>
   133ec:	ldr	r1, [pc, #848]	; 13744 <close_stdout@@Base+0x1db4>
   133f0:	mov	r2, #5
   133f4:	mov	r0, #0
   133f8:	add	r1, pc, r1
   133fc:	bl	10fa8 <dcgettext@plt>
   13400:	ldr	r2, [pc, #832]	; 13748 <close_stdout@@Base+0x1db8>
   13404:	movw	ip, #2013	; 0x7dd
   13408:	mov	r1, #1
   1340c:	ldr	r2, [r7, r2]
   13410:	str	ip, [sp]
   13414:	mov	r3, r0
   13418:	mov	r0, r5
   1341c:	bl	11110 <__fprintf_chk@plt>
   13420:	ldr	r1, [pc, #804]	; 1374c <close_stdout@@Base+0x1dbc>
   13424:	mov	r0, #0
   13428:	mov	r2, #5
   1342c:	add	r1, pc, r1
   13430:	bl	10fa8 <dcgettext@plt>
   13434:	mov	r1, r5
   13438:	bl	10f30 <fputs_unlocked@plt>
   1343c:	cmp	r6, #9
   13440:	addls	pc, pc, r6, lsl #2
   13444:	b	1372c <close_stdout@@Base+0x1d9c>
   13448:	b	134dc <close_stdout@@Base+0x1b4c>
   1344c:	b	134e0 <close_stdout@@Base+0x1b50>
   13450:	b	13510 <close_stdout@@Base+0x1b80>
   13454:	b	13544 <close_stdout@@Base+0x1bb4>
   13458:	b	13580 <close_stdout@@Base+0x1bf0>
   1345c:	b	135c0 <close_stdout@@Base+0x1c30>
   13460:	b	13608 <close_stdout@@Base+0x1c78>
   13464:	b	13658 <close_stdout@@Base+0x1cc8>
   13468:	b	136b0 <close_stdout@@Base+0x1d20>
   1346c:	b	13470 <close_stdout@@Base+0x1ae0>
   13470:	ldr	r1, [pc, #728]	; 13750 <close_stdout@@Base+0x1dc0>
   13474:	mov	r0, #0
   13478:	add	r1, pc, r1
   1347c:	mov	r2, #5
   13480:	bl	10fa8 <dcgettext@plt>
   13484:	ldm	r4, {r3, ip}
   13488:	mov	r1, #1
   1348c:	str	ip, [sp]
   13490:	ldr	ip, [r4, #8]
   13494:	str	ip, [sp, #4]
   13498:	ldr	ip, [r4, #12]
   1349c:	str	ip, [sp, #8]
   134a0:	ldr	ip, [r4, #16]
   134a4:	str	ip, [sp, #12]
   134a8:	ldr	ip, [r4, #20]
   134ac:	str	ip, [sp, #16]
   134b0:	ldr	ip, [r4, #24]
   134b4:	str	ip, [sp, #20]
   134b8:	ldr	ip, [r4, #28]
   134bc:	str	ip, [sp, #24]
   134c0:	ldr	ip, [r4, #32]
   134c4:	str	ip, [sp, #28]
   134c8:	mov	r2, r0
   134cc:	mov	r0, r5
   134d0:	bl	11110 <__fprintf_chk@plt>
   134d4:	add	sp, sp, #36	; 0x24
   134d8:	pop	{r4, r5, r6, r7, pc}
   134dc:	bl	11194 <abort@plt>
   134e0:	ldr	r1, [pc, #620]	; 13754 <close_stdout@@Base+0x1dc4>
   134e4:	mov	r2, #5
   134e8:	mov	r0, #0
   134ec:	add	r1, pc, r1
   134f0:	bl	10fa8 <dcgettext@plt>
   134f4:	ldr	r3, [r4]
   134f8:	mov	r1, #1
   134fc:	mov	r2, r0
   13500:	mov	r0, r5
   13504:	add	sp, sp, #36	; 0x24
   13508:	pop	{r4, r5, r6, r7, lr}
   1350c:	b	11110 <__fprintf_chk@plt>
   13510:	ldr	r1, [pc, #576]	; 13758 <close_stdout@@Base+0x1dc8>
   13514:	mov	r2, #5
   13518:	mov	r0, #0
   1351c:	add	r1, pc, r1
   13520:	bl	10fa8 <dcgettext@plt>
   13524:	ldm	r4, {r3, ip}
   13528:	mov	r1, #1
   1352c:	str	ip, [sp, #56]	; 0x38
   13530:	mov	r2, r0
   13534:	mov	r0, r5
   13538:	add	sp, sp, #36	; 0x24
   1353c:	pop	{r4, r5, r6, r7, lr}
   13540:	b	11110 <__fprintf_chk@plt>
   13544:	ldr	r1, [pc, #528]	; 1375c <close_stdout@@Base+0x1dcc>
   13548:	mov	r2, #5
   1354c:	mov	r0, #0
   13550:	add	r1, pc, r1
   13554:	bl	10fa8 <dcgettext@plt>
   13558:	ldm	r4, {r3, ip}
   1355c:	mov	r1, #1
   13560:	str	ip, [sp, #56]	; 0x38
   13564:	ldr	ip, [r4, #8]
   13568:	str	ip, [sp, #60]	; 0x3c
   1356c:	mov	r2, r0
   13570:	mov	r0, r5
   13574:	add	sp, sp, #36	; 0x24
   13578:	pop	{r4, r5, r6, r7, lr}
   1357c:	b	11110 <__fprintf_chk@plt>
   13580:	ldr	r1, [pc, #472]	; 13760 <close_stdout@@Base+0x1dd0>
   13584:	mov	r2, #5
   13588:	mov	r0, #0
   1358c:	add	r1, pc, r1
   13590:	bl	10fa8 <dcgettext@plt>
   13594:	ldm	r4, {r3, ip}
   13598:	mov	r1, #1
   1359c:	str	ip, [sp]
   135a0:	ldr	ip, [r4, #8]
   135a4:	str	ip, [sp, #4]
   135a8:	ldr	ip, [r4, #12]
   135ac:	str	ip, [sp, #8]
   135b0:	mov	r2, r0
   135b4:	mov	r0, r5
   135b8:	bl	11110 <__fprintf_chk@plt>
   135bc:	b	134d4 <close_stdout@@Base+0x1b44>
   135c0:	ldr	r1, [pc, #412]	; 13764 <close_stdout@@Base+0x1dd4>
   135c4:	mov	r2, #5
   135c8:	mov	r0, #0
   135cc:	add	r1, pc, r1
   135d0:	bl	10fa8 <dcgettext@plt>
   135d4:	ldm	r4, {r3, ip}
   135d8:	mov	r1, #1
   135dc:	str	ip, [sp]
   135e0:	ldr	ip, [r4, #8]
   135e4:	str	ip, [sp, #4]
   135e8:	ldr	ip, [r4, #12]
   135ec:	str	ip, [sp, #8]
   135f0:	ldr	ip, [r4, #16]
   135f4:	str	ip, [sp, #12]
   135f8:	mov	r2, r0
   135fc:	mov	r0, r5
   13600:	bl	11110 <__fprintf_chk@plt>
   13604:	b	134d4 <close_stdout@@Base+0x1b44>
   13608:	ldr	r1, [pc, #344]	; 13768 <close_stdout@@Base+0x1dd8>
   1360c:	mov	r2, #5
   13610:	mov	r0, #0
   13614:	add	r1, pc, r1
   13618:	bl	10fa8 <dcgettext@plt>
   1361c:	ldm	r4, {r3, ip}
   13620:	mov	r1, #1
   13624:	str	ip, [sp]
   13628:	ldr	ip, [r4, #8]
   1362c:	str	ip, [sp, #4]
   13630:	ldr	ip, [r4, #12]
   13634:	str	ip, [sp, #8]
   13638:	ldr	ip, [r4, #16]
   1363c:	str	ip, [sp, #12]
   13640:	ldr	ip, [r4, #20]
   13644:	str	ip, [sp, #16]
   13648:	mov	r2, r0
   1364c:	mov	r0, r5
   13650:	bl	11110 <__fprintf_chk@plt>
   13654:	b	134d4 <close_stdout@@Base+0x1b44>
   13658:	ldr	r1, [pc, #268]	; 1376c <close_stdout@@Base+0x1ddc>
   1365c:	mov	r2, #5
   13660:	mov	r0, #0
   13664:	add	r1, pc, r1
   13668:	bl	10fa8 <dcgettext@plt>
   1366c:	ldm	r4, {r3, ip}
   13670:	mov	r1, #1
   13674:	str	ip, [sp]
   13678:	ldr	ip, [r4, #8]
   1367c:	str	ip, [sp, #4]
   13680:	ldr	ip, [r4, #12]
   13684:	str	ip, [sp, #8]
   13688:	ldr	ip, [r4, #16]
   1368c:	str	ip, [sp, #12]
   13690:	ldr	ip, [r4, #20]
   13694:	str	ip, [sp, #16]
   13698:	ldr	ip, [r4, #24]
   1369c:	str	ip, [sp, #20]
   136a0:	mov	r2, r0
   136a4:	mov	r0, r5
   136a8:	bl	11110 <__fprintf_chk@plt>
   136ac:	b	134d4 <close_stdout@@Base+0x1b44>
   136b0:	ldr	r1, [pc, #184]	; 13770 <close_stdout@@Base+0x1de0>
   136b4:	mov	r2, #5
   136b8:	mov	r0, #0
   136bc:	add	r1, pc, r1
   136c0:	bl	10fa8 <dcgettext@plt>
   136c4:	ldm	r4, {r3, ip}
   136c8:	mov	r1, #1
   136cc:	str	ip, [sp]
   136d0:	ldr	ip, [r4, #8]
   136d4:	str	ip, [sp, #4]
   136d8:	ldr	ip, [r4, #12]
   136dc:	str	ip, [sp, #8]
   136e0:	ldr	ip, [r4, #16]
   136e4:	str	ip, [sp, #12]
   136e8:	ldr	ip, [r4, #20]
   136ec:	str	ip, [sp, #16]
   136f0:	ldr	ip, [r4, #24]
   136f4:	str	ip, [sp, #20]
   136f8:	ldr	ip, [r4, #28]
   136fc:	str	ip, [sp, #24]
   13700:	mov	r2, r0
   13704:	mov	r0, r5
   13708:	bl	11110 <__fprintf_chk@plt>
   1370c:	b	134d4 <close_stdout@@Base+0x1b44>
   13710:	str	r3, [sp]
   13714:	mov	r3, r2
   13718:	ldr	r2, [pc, #84]	; 13774 <close_stdout@@Base+0x1de4>
   1371c:	mov	r1, #1
   13720:	add	r2, pc, r2
   13724:	bl	11110 <__fprintf_chk@plt>
   13728:	b	133ec <close_stdout@@Base+0x1a5c>
   1372c:	ldr	r1, [pc, #68]	; 13778 <close_stdout@@Base+0x1de8>
   13730:	mov	r0, #0
   13734:	add	r1, pc, r1
   13738:	b	1347c <close_stdout@@Base+0x1aec>
   1373c:	andeq	r2, r1, r8, lsr ip
   13740:	andeq	r1, r0, r0, asr #11
   13744:	andeq	r1, r0, r0, asr #11
   13748:	andeq	r0, r0, r8, lsl r1
   1374c:	muleq	r0, r0, r5
   13750:	andeq	r1, r0, ip, lsl r7
   13754:	muleq	r0, ip, r5
   13758:	andeq	r1, r0, ip, ror r5
   1375c:	andeq	r1, r0, r0, ror #10
   13760:	andeq	r1, r0, r0, asr #10
   13764:	andeq	r1, r0, r0, lsr #10
   13768:	strdeq	r1, [r0], -ip
   1376c:	ldrdeq	r1, [r0], -r4
   13770:	andeq	r1, r0, r8, lsr #9
   13774:	muleq	r0, r0, r2
   13778:	muleq	r0, r4, r4
   1377c:	push	{r4, r5, lr}
   13780:	sub	sp, sp, #12
   13784:	ldr	r5, [sp, #24]
   13788:	ldr	ip, [r5]
   1378c:	cmp	ip, #0
   13790:	beq	137ac <close_stdout@@Base+0x1e1c>
   13794:	mov	lr, r5
   13798:	mov	ip, #0
   1379c:	ldr	r4, [lr, #4]!
   137a0:	add	ip, ip, #1
   137a4:	cmp	r4, #0
   137a8:	bne	1379c <close_stdout@@Base+0x1e0c>
   137ac:	stm	sp, {r5, ip}
   137b0:	bl	133a8 <close_stdout@@Base+0x1a18>
   137b4:	add	sp, sp, #12
   137b8:	pop	{r4, r5, pc}
   137bc:	push	{r4, r5, r6, r7, lr}
   137c0:	sub	sp, sp, #60	; 0x3c
   137c4:	ldr	r4, [pc, #100]	; 13830 <close_stdout@@Base+0x1ea0>
   137c8:	mov	ip, #0
   137cc:	ldr	r5, [pc, #96]	; 13834 <close_stdout@@Base+0x1ea4>
   137d0:	mov	lr, ip
   137d4:	add	r4, pc, r4
   137d8:	ldr	r6, [sp, #80]	; 0x50
   137dc:	ldr	r7, [r4, r5]
   137e0:	add	r5, sp, #12
   137e4:	ldr	r4, [r7]
   137e8:	str	r4, [sp, #52]	; 0x34
   137ec:	ldr	r4, [r6, ip]
   137f0:	cmp	r4, #0
   137f4:	str	r4, [r5, ip]
   137f8:	beq	1380c <close_stdout@@Base+0x1e7c>
   137fc:	add	lr, lr, #1
   13800:	add	ip, ip, #4
   13804:	cmp	lr, #10
   13808:	bne	137ec <close_stdout@@Base+0x1e5c>
   1380c:	stm	sp, {r5, lr}
   13810:	bl	133a8 <close_stdout@@Base+0x1a18>
   13814:	ldr	r2, [sp, #52]	; 0x34
   13818:	ldr	r3, [r7]
   1381c:	cmp	r2, r3
   13820:	bne	1382c <close_stdout@@Base+0x1e9c>
   13824:	add	sp, sp, #60	; 0x3c
   13828:	pop	{r4, r5, r6, r7, pc}
   1382c:	bl	10fb4 <__stack_chk_fail@plt>
   13830:	andeq	r2, r1, r4, lsr #16
   13834:	andeq	r0, r0, ip, ror #1
   13838:	push	{r3}		; (str r3, [sp, #-4]!)
   1383c:	push	{r4, lr}
   13840:	sub	sp, sp, #20
   13844:	ldr	lr, [pc, #72]	; 13894 <close_stdout@@Base+0x1f04>
   13848:	add	ip, sp, #32
   1384c:	ldr	r4, [pc, #68]	; 13898 <close_stdout@@Base+0x1f08>
   13850:	add	lr, pc, lr
   13854:	ldr	r3, [sp, #28]
   13858:	ldr	r4, [lr, r4]
   1385c:	str	ip, [sp]
   13860:	str	ip, [sp, #8]
   13864:	ldr	ip, [r4]
   13868:	str	ip, [sp, #12]
   1386c:	bl	137bc <close_stdout@@Base+0x1e2c>
   13870:	ldr	r2, [sp, #12]
   13874:	ldr	r3, [r4]
   13878:	cmp	r2, r3
   1387c:	bne	13890 <close_stdout@@Base+0x1f00>
   13880:	add	sp, sp, #20
   13884:	pop	{r4, lr}
   13888:	add	sp, sp, #4
   1388c:	bx	lr
   13890:	bl	10fb4 <__stack_chk_fail@plt>
   13894:	andeq	r2, r1, r8, lsr #15
   13898:	andeq	r0, r0, ip, ror #1
   1389c:	ldr	r1, [pc, #132]	; 13928 <close_stdout@@Base+0x1f98>
   138a0:	mov	r2, #5
   138a4:	push	{r4, lr}
   138a8:	add	r1, pc, r1
   138ac:	mov	r0, #0
   138b0:	ldr	r4, [pc, #116]	; 1392c <close_stdout@@Base+0x1f9c>
   138b4:	bl	10fa8 <dcgettext@plt>
   138b8:	ldr	r2, [pc, #112]	; 13930 <close_stdout@@Base+0x1fa0>
   138bc:	add	r4, pc, r4
   138c0:	add	r2, pc, r2
   138c4:	mov	r1, r0
   138c8:	mov	r0, #1
   138cc:	bl	110f8 <__printf_chk@plt>
   138d0:	ldr	r1, [pc, #92]	; 13934 <close_stdout@@Base+0x1fa4>
   138d4:	mov	r2, #5
   138d8:	mov	r0, #0
   138dc:	add	r1, pc, r1
   138e0:	bl	10fa8 <dcgettext@plt>
   138e4:	ldr	r2, [pc, #76]	; 13938 <close_stdout@@Base+0x1fa8>
   138e8:	ldr	r3, [pc, #76]	; 1393c <close_stdout@@Base+0x1fac>
   138ec:	add	r2, pc, r2
   138f0:	add	r3, pc, r3
   138f4:	mov	r1, r0
   138f8:	mov	r0, #1
   138fc:	bl	110f8 <__printf_chk@plt>
   13900:	ldr	r1, [pc, #56]	; 13940 <close_stdout@@Base+0x1fb0>
   13904:	mov	r0, #0
   13908:	mov	r2, #5
   1390c:	add	r1, pc, r1
   13910:	bl	10fa8 <dcgettext@plt>
   13914:	ldr	r3, [pc, #40]	; 13944 <close_stdout@@Base+0x1fb4>
   13918:	ldr	r3, [r4, r3]
   1391c:	pop	{r4, lr}
   13920:	ldr	r1, [r3]
   13924:	b	10f30 <fputs_unlocked@plt>
   13928:	andeq	r1, r0, ip, asr r3
   1392c:	andeq	r2, r1, ip, lsr r7
   13930:	andeq	r1, r0, ip, asr r3
   13934:	andeq	r1, r0, r8, asr r3
   13938:	andeq	r0, r0, r8, asr #28
   1393c:	andeq	r0, r0, r4, asr lr
   13940:	andeq	r1, r0, ip, lsr r3
   13944:	andeq	r0, r0, r8, lsl #2
   13948:	push	{r4, lr}
   1394c:	mov	r4, r0
   13950:	bl	11050 <malloc@plt>
   13954:	rsbs	r3, r0, #1
   13958:	movcc	r3, #0
   1395c:	cmp	r4, #0
   13960:	moveq	r3, #0
   13964:	cmp	r3, #0
   13968:	popeq	{r4, pc}
   1396c:	bl	13b5c <close_stdout@@Base+0x21cc>
   13970:	push	{r3, r4, r5, lr}
   13974:	mov	r4, r0
   13978:	mvn	r0, #0
   1397c:	mov	r5, r1
   13980:	bl	141fc <close_stdout@@Base+0x286c>
   13984:	cmp	r0, r4
   13988:	bcc	13998 <close_stdout@@Base+0x2008>
   1398c:	mul	r0, r4, r5
   13990:	pop	{r3, r4, r5, lr}
   13994:	b	13948 <close_stdout@@Base+0x1fb8>
   13998:	bl	13b5c <close_stdout@@Base+0x21cc>
   1399c:	b	13948 <close_stdout@@Base+0x1fb8>
   139a0:	rsbs	r3, r1, #1
   139a4:	push	{r4, lr}
   139a8:	movcc	r3, #0
   139ac:	cmp	r0, #0
   139b0:	mov	r4, r1
   139b4:	moveq	r3, #0
   139b8:	cmp	r3, #0
   139bc:	bne	139e0 <close_stdout@@Base+0x2050>
   139c0:	bl	10fc0 <realloc@plt>
   139c4:	rsbs	r3, r0, #1
   139c8:	movcc	r3, #0
   139cc:	cmp	r4, #0
   139d0:	moveq	r3, #0
   139d4:	cmp	r3, #0
   139d8:	popeq	{r4, pc}
   139dc:	bl	13b5c <close_stdout@@Base+0x21cc>
   139e0:	bl	10f60 <free@plt>
   139e4:	mov	r0, #0
   139e8:	pop	{r4, pc}
   139ec:	push	{r4, r5, r6, lr}
   139f0:	mov	r5, r1
   139f4:	mov	r6, r0
   139f8:	mov	r1, r2
   139fc:	mvn	r0, #0
   13a00:	mov	r4, r2
   13a04:	bl	141fc <close_stdout@@Base+0x286c>
   13a08:	cmp	r0, r5
   13a0c:	bcc	13a20 <close_stdout@@Base+0x2090>
   13a10:	mov	r0, r6
   13a14:	mul	r1, r5, r4
   13a18:	pop	{r4, r5, r6, lr}
   13a1c:	b	139a0 <close_stdout@@Base+0x2010>
   13a20:	bl	13b5c <close_stdout@@Base+0x21cc>
   13a24:	push	{r3, r4, r5, r6, r7, lr}
   13a28:	subs	r7, r0, #0
   13a2c:	mov	r5, r1
   13a30:	mov	r6, r2
   13a34:	ldr	r4, [r1]
   13a38:	beq	13a70 <close_stdout@@Base+0x20e0>
   13a3c:	movw	r0, #43690	; 0xaaaa
   13a40:	mov	r1, r2
   13a44:	bfi	r0, r0, #16, #16
   13a48:	bl	141fc <close_stdout@@Base+0x286c>
   13a4c:	cmp	r4, r0
   13a50:	addcc	r3, r4, #1
   13a54:	addcc	r4, r4, r3, lsr #1
   13a58:	bcs	13a94 <close_stdout@@Base+0x2104>
   13a5c:	str	r4, [r5]
   13a60:	mov	r0, r7
   13a64:	mul	r1, r6, r4
   13a68:	pop	{r3, r4, r5, r6, r7, lr}
   13a6c:	b	139a0 <close_stdout@@Base+0x2010>
   13a70:	cmp	r4, #0
   13a74:	bne	13a5c <close_stdout@@Base+0x20cc>
   13a78:	mov	r0, #64	; 0x40
   13a7c:	mov	r1, r2
   13a80:	bl	141fc <close_stdout@@Base+0x286c>
   13a84:	cmp	r0, #0
   13a88:	movne	r4, r0
   13a8c:	addeq	r4, r0, #1
   13a90:	b	13a5c <close_stdout@@Base+0x20cc>
   13a94:	bl	13b5c <close_stdout@@Base+0x21cc>
   13a98:	cmp	r0, #0
   13a9c:	push	{r3, lr}
   13aa0:	ldr	r3, [r1]
   13aa4:	beq	13ad0 <close_stdout@@Base+0x2140>
   13aa8:	movw	r2, #43689	; 0xaaa9
   13aac:	movt	r2, #43690	; 0xaaaa
   13ab0:	cmp	r3, r2
   13ab4:	addls	r2, r3, #1
   13ab8:	addls	r3, r3, r2, lsr #1
   13abc:	bhi	13ae8 <close_stdout@@Base+0x2158>
   13ac0:	str	r3, [r1]
   13ac4:	mov	r1, r3
   13ac8:	pop	{r3, lr}
   13acc:	b	139a0 <close_stdout@@Base+0x2010>
   13ad0:	cmp	r3, #0
   13ad4:	moveq	r3, #64	; 0x40
   13ad8:	str	r3, [r1]
   13adc:	mov	r1, r3
   13ae0:	pop	{r3, lr}
   13ae4:	b	139a0 <close_stdout@@Base+0x2010>
   13ae8:	bl	13b5c <close_stdout@@Base+0x21cc>
   13aec:	push	{r4, lr}
   13af0:	mov	r4, r0
   13af4:	bl	13948 <close_stdout@@Base+0x1fb8>
   13af8:	mov	r2, r4
   13afc:	mov	r1, #0
   13b00:	pop	{r4, lr}
   13b04:	b	110e0 <memset@plt>
   13b08:	push	{r3, lr}
   13b0c:	bl	10f24 <calloc@plt>
   13b10:	cmp	r0, #0
   13b14:	popne	{r3, pc}
   13b18:	bl	13b5c <close_stdout@@Base+0x21cc>
   13b1c:	push	{r3, r4, r5, lr}
   13b20:	mov	r4, r1
   13b24:	mov	r5, r0
   13b28:	mov	r0, r1
   13b2c:	bl	13948 <close_stdout@@Base+0x1fb8>
   13b30:	mov	r1, r5
   13b34:	mov	r2, r4
   13b38:	pop	{r3, r4, r5, lr}
   13b3c:	b	10f78 <memcpy@plt>
   13b40:	push	{r4, lr}
   13b44:	mov	r4, r0
   13b48:	bl	110a4 <strlen@plt>
   13b4c:	add	r1, r0, #1
   13b50:	mov	r0, r4
   13b54:	pop	{r4, lr}
   13b58:	b	13b1c <close_stdout@@Base+0x218c>
   13b5c:	ldr	r3, [pc, #64]	; 13ba4 <close_stdout@@Base+0x2214>
   13b60:	mov	r2, #5
   13b64:	ldr	ip, [pc, #60]	; 13ba8 <close_stdout@@Base+0x2218>
   13b68:	mov	r0, #0
   13b6c:	add	r3, pc, r3
   13b70:	ldr	r1, [pc, #52]	; 13bac <close_stdout@@Base+0x221c>
   13b74:	push	{r4, lr}
   13b78:	add	r1, pc, r1
   13b7c:	ldr	r3, [r3, ip]
   13b80:	ldr	r4, [r3]
   13b84:	bl	10fa8 <dcgettext@plt>
   13b88:	ldr	r2, [pc, #32]	; 13bb0 <close_stdout@@Base+0x2220>
   13b8c:	mov	r1, #0
   13b90:	add	r2, pc, r2
   13b94:	mov	r3, r0
   13b98:	mov	r0, r4
   13b9c:	bl	1102c <error@plt>
   13ba0:	bl	11194 <abort@plt>
   13ba4:	andeq	r2, r1, ip, lsl #9
   13ba8:	andeq	r0, r0, ip, lsl #2
   13bac:	andeq	r1, r0, r0, asr #2
   13bb0:	andeq	r0, r0, ip, asr #26
   13bb4:	push	{r4, r5, r6, lr}
   13bb8:	mov	r4, r0
   13bbc:	bl	11014 <__fpending@plt>
   13bc0:	mov	r6, r0
   13bc4:	mov	r0, r4
   13bc8:	ldr	r4, [r4]
   13bcc:	bl	14054 <close_stdout@@Base+0x26c4>
   13bd0:	and	r4, r4, #32
   13bd4:	adds	r5, r0, #0
   13bd8:	movne	r5, #1
   13bdc:	cmp	r4, #0
   13be0:	bne	13c00 <close_stdout@@Base+0x2270>
   13be4:	cmp	r5, #0
   13be8:	beq	13bf8 <close_stdout@@Base+0x2268>
   13bec:	cmp	r6, #0
   13bf0:	beq	13c1c <close_stdout@@Base+0x228c>
   13bf4:	mvn	r4, #0
   13bf8:	mov	r0, r4
   13bfc:	pop	{r4, r5, r6, pc}
   13c00:	cmp	r5, #0
   13c04:	bne	13bf4 <close_stdout@@Base+0x2264>
   13c08:	bl	110c8 <__errno_location@plt>
   13c0c:	mvn	r4, #0
   13c10:	str	r5, [r0]
   13c14:	mov	r0, r4
   13c18:	pop	{r4, r5, r6, pc}
   13c1c:	bl	110c8 <__errno_location@plt>
   13c20:	ldr	r4, [r0]
   13c24:	subs	r4, r4, #9
   13c28:	mvnne	r4, #0
   13c2c:	mov	r0, r4
   13c30:	pop	{r4, r5, r6, pc}
   13c34:	ldr	r3, [pc, #984]	; 14014 <close_stdout@@Base+0x2684>
   13c38:	mov	r0, #14
   13c3c:	ldr	r2, [pc, #980]	; 14018 <close_stdout@@Base+0x2688>
   13c40:	add	r3, pc, r3
   13c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c48:	sub	sp, sp, #132	; 0x84
   13c4c:	ldr	r6, [r3, r2]
   13c50:	ldr	r3, [r6]
   13c54:	str	r3, [sp, #124]	; 0x7c
   13c58:	bl	11164 <nl_langinfo@plt>
   13c5c:	subs	r5, r0, #0
   13c60:	beq	13d14 <close_stdout@@Base+0x2384>
   13c64:	ldr	r3, [pc, #944]	; 1401c <close_stdout@@Base+0x268c>
   13c68:	ldr	r4, [pc, r3]
   13c6c:	cmp	r4, #0
   13c70:	beq	13d20 <close_stdout@@Base+0x2390>
   13c74:	ldrb	r7, [r4]
   13c78:	cmp	r7, #0
   13c7c:	bne	13cb0 <close_stdout@@Base+0x2320>
   13c80:	b	13ce8 <close_stdout@@Base+0x2358>
   13c84:	mov	r0, r4
   13c88:	bl	110a4 <strlen@plt>
   13c8c:	add	r0, r0, #1
   13c90:	add	r7, r4, r0
   13c94:	mov	r0, r7
   13c98:	bl	110a4 <strlen@plt>
   13c9c:	add	r0, r0, #1
   13ca0:	add	r4, r7, r0
   13ca4:	ldrb	r7, [r7, r0]
   13ca8:	cmp	r7, #0
   13cac:	beq	13ce8 <close_stdout@@Base+0x2358>
   13cb0:	mov	r0, r5
   13cb4:	mov	r1, r4
   13cb8:	bl	10f48 <strcmp@plt>
   13cbc:	cmp	r0, #0
   13cc0:	beq	13cd8 <close_stdout@@Base+0x2348>
   13cc4:	cmp	r7, #42	; 0x2a
   13cc8:	bne	13c84 <close_stdout@@Base+0x22f4>
   13ccc:	ldrb	r3, [r4, #1]
   13cd0:	cmp	r3, #0
   13cd4:	bne	13c84 <close_stdout@@Base+0x22f4>
   13cd8:	mov	r0, r4
   13cdc:	bl	110a4 <strlen@plt>
   13ce0:	add	r0, r0, #1
   13ce4:	add	r5, r4, r0
   13ce8:	ldrb	r3, [r5]
   13cec:	cmp	r3, #0
   13cf0:	ldreq	r5, [pc, #808]	; 14020 <close_stdout@@Base+0x2690>
   13cf4:	addeq	r5, pc, r5
   13cf8:	ldr	r2, [sp, #124]	; 0x7c
   13cfc:	mov	r0, r5
   13d00:	ldr	r3, [r6]
   13d04:	cmp	r2, r3
   13d08:	bne	13fe8 <close_stdout@@Base+0x2658>
   13d0c:	add	sp, sp, #132	; 0x84
   13d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d14:	ldr	r5, [pc, #776]	; 14024 <close_stdout@@Base+0x2694>
   13d18:	add	r5, pc, r5
   13d1c:	b	13c64 <close_stdout@@Base+0x22d4>
   13d20:	ldr	r0, [pc, #768]	; 14028 <close_stdout@@Base+0x2698>
   13d24:	add	r0, pc, r0
   13d28:	bl	11044 <getenv@plt>
   13d2c:	subs	r8, r0, #0
   13d30:	beq	13fc0 <close_stdout@@Base+0x2630>
   13d34:	ldrb	r3, [r8]
   13d38:	cmp	r3, #0
   13d3c:	beq	13f54 <close_stdout@@Base+0x25c4>
   13d40:	bl	110a4 <strlen@plt>
   13d44:	subs	sl, r0, #0
   13d48:	subne	r3, sl, #1
   13d4c:	bne	13f64 <close_stdout@@Base+0x25d4>
   13d50:	mov	r9, #0
   13d54:	mov	fp, r9
   13d58:	add	r9, sl, r9
   13d5c:	add	r0, r9, #14
   13d60:	bl	11050 <malloc@plt>
   13d64:	subs	r7, r0, #0
   13d68:	beq	13fb4 <close_stdout@@Base+0x2624>
   13d6c:	mov	r1, r8
   13d70:	mov	r2, sl
   13d74:	bl	10f78 <memcpy@plt>
   13d78:	cmp	fp, #0
   13d7c:	add	ip, r7, r9
   13d80:	movne	r3, #47	; 0x2f
   13d84:	strbne	r3, [r7, sl]
   13d88:	ldr	r3, [pc, #668]	; 1402c <close_stdout@@Base+0x269c>
   13d8c:	add	r3, pc, r3
   13d90:	ldm	r3!, {r0, r1, r2}
   13d94:	ldrh	r3, [r3]
   13d98:	str	r0, [r7, r9]
   13d9c:	mov	r0, r7
   13da0:	str	r1, [ip, #4]
   13da4:	mov	r1, #32768	; 0x8000
   13da8:	strh	r3, [ip, #12]
   13dac:	str	r2, [ip, #8]
   13db0:	bl	11038 <open64@plt>
   13db4:	subs	r8, r0, #0
   13db8:	blt	13f7c <close_stdout@@Base+0x25ec>
   13dbc:	ldr	r1, [pc, #620]	; 14030 <close_stdout@@Base+0x26a0>
   13dc0:	add	r1, pc, r1
   13dc4:	bl	10f18 <fdopen@plt>
   13dc8:	subs	fp, r0, #0
   13dcc:	beq	13fd4 <close_stdout@@Base+0x2644>
   13dd0:	ldr	r0, [pc, #604]	; 14034 <close_stdout@@Base+0x26a4>
   13dd4:	add	sl, sp, #20
   13dd8:	add	r9, sp, #72	; 0x48
   13ddc:	mov	r8, #0
   13de0:	add	r0, pc, r0
   13de4:	str	r0, [sp, #12]
   13de8:	ldr	r3, [fp, #4]
   13dec:	ldr	r2, [fp, #8]
   13df0:	cmp	r3, r2
   13df4:	bcs	13ee0 <close_stdout@@Base+0x2550>
   13df8:	add	r2, r3, #1
   13dfc:	str	r2, [fp, #4]
   13e00:	ldrb	r0, [r3]
   13e04:	cmp	r0, #32
   13e08:	beq	13de8 <close_stdout@@Base+0x2458>
   13e0c:	sub	r3, r0, #9
   13e10:	cmp	r3, #1
   13e14:	bls	13de8 <close_stdout@@Base+0x2458>
   13e18:	cmp	r0, #35	; 0x23
   13e1c:	beq	13ef4 <close_stdout@@Base+0x2564>
   13e20:	mov	r1, fp
   13e24:	bl	110bc <ungetc@plt>
   13e28:	mov	r0, fp
   13e2c:	ldr	r1, [sp, #12]
   13e30:	mov	r2, sl
   13e34:	mov	r3, r9
   13e38:	bl	110ec <fscanf@plt>
   13e3c:	cmp	r0, #1
   13e40:	ble	13f24 <close_stdout@@Base+0x2594>
   13e44:	mov	r0, sl
   13e48:	bl	110a4 <strlen@plt>
   13e4c:	str	r0, [sp, #8]
   13e50:	mov	r0, r9
   13e54:	bl	110a4 <strlen@plt>
   13e58:	cmp	r8, #0
   13e5c:	mov	r2, r0
   13e60:	bne	13f88 <close_stdout@@Base+0x25f8>
   13e64:	ldr	r3, [sp, #8]
   13e68:	str	r2, [sp]
   13e6c:	add	r8, r0, r3
   13e70:	add	r0, r8, #3
   13e74:	add	r8, r8, #2
   13e78:	bl	11050 <malloc@plt>
   13e7c:	ldr	r2, [sp]
   13e80:	mov	r3, r0
   13e84:	cmp	r3, #0
   13e88:	beq	13fec <close_stdout@@Base+0x265c>
   13e8c:	ldr	r0, [sp, #8]
   13e90:	movw	r1, #65534	; 0xfffe
   13e94:	movt	r1, #65535	; 0xffff
   13e98:	rsb	r2, r2, r8
   13e9c:	rsb	r1, r0, r1
   13ea0:	stm	sp, {r2, r3}
   13ea4:	add	r0, r1, r2
   13ea8:	mov	r1, sl
   13eac:	add	r0, r3, r0
   13eb0:	mov	r4, r3
   13eb4:	bl	11008 <strcpy@plt>
   13eb8:	ldr	r2, [sp]
   13ebc:	ldr	r3, [sp, #4]
   13ec0:	mov	r1, r9
   13ec4:	sub	r0, r2, #1
   13ec8:	add	r0, r3, r0
   13ecc:	bl	11008 <strcpy@plt>
   13ed0:	ldr	r3, [fp, #4]
   13ed4:	ldr	r2, [fp, #8]
   13ed8:	cmp	r3, r2
   13edc:	bcc	13df8 <close_stdout@@Base+0x2468>
   13ee0:	mov	r0, fp
   13ee4:	bl	11134 <__uflow@plt>
   13ee8:	cmn	r0, #1
   13eec:	beq	13f24 <close_stdout@@Base+0x2594>
   13ef0:	b	13e04 <close_stdout@@Base+0x2474>
   13ef4:	ldr	r3, [fp, #4]
   13ef8:	ldr	r2, [fp, #8]
   13efc:	cmp	r3, r2
   13f00:	bcs	14008 <close_stdout@@Base+0x2678>
   13f04:	add	r2, r3, #1
   13f08:	str	r2, [fp, #4]
   13f0c:	ldrb	r0, [r3]
   13f10:	cmp	r0, #10
   13f14:	cmnne	r0, #1
   13f18:	bne	13ef4 <close_stdout@@Base+0x2564>
   13f1c:	cmn	r0, #1
   13f20:	bne	13de8 <close_stdout@@Base+0x2458>
   13f24:	mov	r0, fp
   13f28:	bl	14054 <close_stdout@@Base+0x26c4>
   13f2c:	cmp	r8, #0
   13f30:	beq	13f7c <close_stdout@@Base+0x25ec>
   13f34:	mov	r3, #0
   13f38:	strb	r3, [r4, r8]
   13f3c:	mov	r0, r7
   13f40:	bl	10f60 <free@plt>
   13f44:	ldr	r3, [pc, #236]	; 14038 <close_stdout@@Base+0x26a8>
   13f48:	add	r3, pc, r3
   13f4c:	str	r4, [r3]
   13f50:	b	13c74 <close_stdout@@Base+0x22e4>
   13f54:	ldr	r8, [pc, #224]	; 1403c <close_stdout@@Base+0x26ac>
   13f58:	mov	r3, #7
   13f5c:	mov	sl, #8
   13f60:	add	r8, pc, r8
   13f64:	ldrb	r3, [r8, r3]
   13f68:	cmp	r3, #47	; 0x2f
   13f6c:	movne	r9, #1
   13f70:	movne	fp, r9
   13f74:	bne	13d58 <close_stdout@@Base+0x23c8>
   13f78:	b	13d50 <close_stdout@@Base+0x23c0>
   13f7c:	ldr	r4, [pc, #188]	; 14040 <close_stdout@@Base+0x26b0>
   13f80:	add	r4, pc, r4
   13f84:	b	13f3c <close_stdout@@Base+0x25ac>
   13f88:	ldr	r0, [sp, #8]
   13f8c:	str	r2, [sp]
   13f90:	add	r3, r0, r2
   13f94:	mov	r0, r4
   13f98:	add	r8, r3, r8
   13f9c:	add	r1, r8, #3
   13fa0:	add	r8, r8, #2
   13fa4:	bl	10fc0 <realloc@plt>
   13fa8:	ldr	r2, [sp]
   13fac:	mov	r3, r0
   13fb0:	b	13e84 <close_stdout@@Base+0x24f4>
   13fb4:	ldr	r4, [pc, #136]	; 14044 <close_stdout@@Base+0x26b4>
   13fb8:	add	r4, pc, r4
   13fbc:	b	13f44 <close_stdout@@Base+0x25b4>
   13fc0:	ldr	r8, [pc, #128]	; 14048 <close_stdout@@Base+0x26b8>
   13fc4:	mov	r3, #7
   13fc8:	mov	sl, #8
   13fcc:	add	r8, pc, r8
   13fd0:	b	13f64 <close_stdout@@Base+0x25d4>
   13fd4:	ldr	r4, [pc, #112]	; 1404c <close_stdout@@Base+0x26bc>
   13fd8:	mov	r0, r8
   13fdc:	add	r4, pc, r4
   13fe0:	bl	111a0 <close@plt>
   13fe4:	b	13f3c <close_stdout@@Base+0x25ac>
   13fe8:	bl	10fb4 <__stack_chk_fail@plt>
   13fec:	mov	r0, r4
   13ff0:	ldr	r4, [pc, #88]	; 14050 <close_stdout@@Base+0x26c0>
   13ff4:	bl	10f60 <free@plt>
   13ff8:	mov	r0, fp
   13ffc:	add	r4, pc, r4
   14000:	bl	14054 <close_stdout@@Base+0x26c4>
   14004:	b	13f3c <close_stdout@@Base+0x25ac>
   14008:	mov	r0, fp
   1400c:	bl	11134 <__uflow@plt>
   14010:	b	13f10 <close_stdout@@Base+0x2580>
   14014:			; <UNDEFINED> instruction: 0x000123b8
   14018:	andeq	r0, r0, ip, ror #1
   1401c:	andeq	r2, r1, r8, asr #12
   14020:	andeq	r0, r0, r4, ror #31
   14024:	andeq	r0, r0, r0, ror #21
   14028:			; <UNDEFINED> instruction: 0x00000fbc
   1402c:	andeq	r0, r0, r4, ror #30
   14030:	andeq	r0, r0, r0, asr #30
   14034:	andeq	r0, r0, r4, lsr #30
   14038:	andeq	r2, r1, r8, ror #6
   1403c:	andeq	r0, r0, ip, ror #26
   14040:	andeq	r0, r0, r8, ror r8
   14044:	andeq	r0, r0, r0, asr #16
   14048:	andeq	r0, r0, r0, lsl #26
   1404c:	andeq	r0, r0, ip, lsl r8
   14050:	strdeq	r0, [r0], -ip
   14054:	push	{r4, r5, r6, lr}
   14058:	sub	sp, sp, #8
   1405c:	mov	r4, r0
   14060:	bl	11104 <fileno@plt>
   14064:	cmp	r0, #0
   14068:	mov	r0, r4
   1406c:	blt	140e8 <close_stdout@@Base+0x2758>
   14070:	bl	11068 <__freading@plt>
   14074:	cmp	r0, #0
   14078:	bne	140b4 <close_stdout@@Base+0x2724>
   1407c:	mov	r0, r4
   14080:	bl	140f4 <close_stdout@@Base+0x2764>
   14084:	cmp	r0, #0
   14088:	beq	140e4 <close_stdout@@Base+0x2754>
   1408c:	bl	110c8 <__errno_location@plt>
   14090:	ldr	r6, [r0]
   14094:	mov	r5, r0
   14098:	mov	r0, r4
   1409c:	bl	1111c <fclose@plt>
   140a0:	cmp	r6, #0
   140a4:	mvnne	r0, #0
   140a8:	strne	r6, [r5]
   140ac:	add	sp, sp, #8
   140b0:	pop	{r4, r5, r6, pc}
   140b4:	mov	r0, r4
   140b8:	bl	11104 <fileno@plt>
   140bc:	mov	r1, #1
   140c0:	mov	r2, #0
   140c4:	mov	r3, #0
   140c8:	str	r1, [sp]
   140cc:	bl	10ff0 <lseek64@plt>
   140d0:	mvn	r2, #0
   140d4:	mvn	r3, #0
   140d8:	cmp	r1, r3
   140dc:	cmpeq	r0, r2
   140e0:	bne	1407c <close_stdout@@Base+0x26ec>
   140e4:	mov	r0, r4
   140e8:	add	sp, sp, #8
   140ec:	pop	{r4, r5, r6, lr}
   140f0:	b	1111c <fclose@plt>
   140f4:	push	{r4, lr}
   140f8:	subs	r4, r0, #0
   140fc:	sub	sp, sp, #8
   14100:	beq	14110 <close_stdout@@Base+0x2780>
   14104:	bl	11068 <__freading@plt>
   14108:	cmp	r0, #0
   1410c:	bne	14120 <close_stdout@@Base+0x2790>
   14110:	mov	r0, r4
   14114:	add	sp, sp, #8
   14118:	pop	{r4, lr}
   1411c:	b	10f54 <fflush@plt>
   14120:	ldr	r3, [r4]
   14124:	tst	r3, #256	; 0x100
   14128:	beq	14110 <close_stdout@@Base+0x2780>
   1412c:	mov	r3, #1
   14130:	mov	r0, r4
   14134:	str	r3, [sp]
   14138:	mov	r2, #0
   1413c:	mov	r3, #0
   14140:	bl	14154 <close_stdout@@Base+0x27c4>
   14144:	mov	r0, r4
   14148:	add	sp, sp, #8
   1414c:	pop	{r4, lr}
   14150:	b	10f54 <fflush@plt>
   14154:	push	{r4, r5, r6, r7, lr}
   14158:	sub	sp, sp, #20
   1415c:	ldmib	r0, {r1, ip}
   14160:	mov	r6, r0
   14164:	ldr	r4, [sp, #40]	; 0x28
   14168:	cmp	ip, r1
   1416c:	beq	14184 <close_stdout@@Base+0x27f4>
   14170:	str	r4, [sp, #40]	; 0x28
   14174:	mov	r0, r6
   14178:	add	sp, sp, #20
   1417c:	pop	{r4, r5, r6, r7, lr}
   14180:	b	11128 <fseeko64@plt>
   14184:	ldr	ip, [r0, #20]
   14188:	ldr	r1, [r0, #16]
   1418c:	cmp	ip, r1
   14190:	bne	14170 <close_stdout@@Base+0x27e0>
   14194:	ldr	r7, [r0, #36]	; 0x24
   14198:	cmp	r7, #0
   1419c:	bne	14170 <close_stdout@@Base+0x27e0>
   141a0:	str	r2, [sp, #12]
   141a4:	mvn	r5, #0
   141a8:	str	r3, [sp, #8]
   141ac:	bl	11104 <fileno@plt>
   141b0:	str	r4, [sp]
   141b4:	mvn	r4, #0
   141b8:	ldr	r2, [sp, #12]
   141bc:	ldr	r3, [sp, #8]
   141c0:	bl	10ff0 <lseek64@plt>
   141c4:	mov	r2, r0
   141c8:	mov	r3, r1
   141cc:	cmp	r3, r5
   141d0:	cmpeq	r2, r4
   141d4:	beq	141f4 <close_stdout@@Base+0x2864>
   141d8:	ldr	r1, [r6]
   141dc:	mov	r0, r7
   141e0:	strd	r2, [r6, #80]	; 0x50
   141e4:	bic	r3, r1, #16
   141e8:	str	r3, [r6]
   141ec:	add	sp, sp, #20
   141f0:	pop	{r4, r5, r6, r7, pc}
   141f4:	mvn	r0, #0
   141f8:	b	141ec <close_stdout@@Base+0x285c>
   141fc:	subs	r2, r1, #1
   14200:	bxeq	lr
   14204:	bcc	143dc <close_stdout@@Base+0x2a4c>
   14208:	cmp	r0, r1
   1420c:	bls	143c0 <close_stdout@@Base+0x2a30>
   14210:	tst	r1, r2
   14214:	beq	143cc <close_stdout@@Base+0x2a3c>
   14218:	clz	r3, r0
   1421c:	clz	r2, r1
   14220:	sub	r3, r2, r3
   14224:	rsbs	r3, r3, #31
   14228:	addne	r3, r3, r3, lsl #1
   1422c:	mov	r2, #0
   14230:	addne	pc, pc, r3, lsl #2
   14234:	nop	{0}
   14238:	cmp	r0, r1, lsl #31
   1423c:	adc	r2, r2, r2
   14240:	subcs	r0, r0, r1, lsl #31
   14244:	cmp	r0, r1, lsl #30
   14248:	adc	r2, r2, r2
   1424c:	subcs	r0, r0, r1, lsl #30
   14250:	cmp	r0, r1, lsl #29
   14254:	adc	r2, r2, r2
   14258:	subcs	r0, r0, r1, lsl #29
   1425c:	cmp	r0, r1, lsl #28
   14260:	adc	r2, r2, r2
   14264:	subcs	r0, r0, r1, lsl #28
   14268:	cmp	r0, r1, lsl #27
   1426c:	adc	r2, r2, r2
   14270:	subcs	r0, r0, r1, lsl #27
   14274:	cmp	r0, r1, lsl #26
   14278:	adc	r2, r2, r2
   1427c:	subcs	r0, r0, r1, lsl #26
   14280:	cmp	r0, r1, lsl #25
   14284:	adc	r2, r2, r2
   14288:	subcs	r0, r0, r1, lsl #25
   1428c:	cmp	r0, r1, lsl #24
   14290:	adc	r2, r2, r2
   14294:	subcs	r0, r0, r1, lsl #24
   14298:	cmp	r0, r1, lsl #23
   1429c:	adc	r2, r2, r2
   142a0:	subcs	r0, r0, r1, lsl #23
   142a4:	cmp	r0, r1, lsl #22
   142a8:	adc	r2, r2, r2
   142ac:	subcs	r0, r0, r1, lsl #22
   142b0:	cmp	r0, r1, lsl #21
   142b4:	adc	r2, r2, r2
   142b8:	subcs	r0, r0, r1, lsl #21
   142bc:	cmp	r0, r1, lsl #20
   142c0:	adc	r2, r2, r2
   142c4:	subcs	r0, r0, r1, lsl #20
   142c8:	cmp	r0, r1, lsl #19
   142cc:	adc	r2, r2, r2
   142d0:	subcs	r0, r0, r1, lsl #19
   142d4:	cmp	r0, r1, lsl #18
   142d8:	adc	r2, r2, r2
   142dc:	subcs	r0, r0, r1, lsl #18
   142e0:	cmp	r0, r1, lsl #17
   142e4:	adc	r2, r2, r2
   142e8:	subcs	r0, r0, r1, lsl #17
   142ec:	cmp	r0, r1, lsl #16
   142f0:	adc	r2, r2, r2
   142f4:	subcs	r0, r0, r1, lsl #16
   142f8:	cmp	r0, r1, lsl #15
   142fc:	adc	r2, r2, r2
   14300:	subcs	r0, r0, r1, lsl #15
   14304:	cmp	r0, r1, lsl #14
   14308:	adc	r2, r2, r2
   1430c:	subcs	r0, r0, r1, lsl #14
   14310:	cmp	r0, r1, lsl #13
   14314:	adc	r2, r2, r2
   14318:	subcs	r0, r0, r1, lsl #13
   1431c:	cmp	r0, r1, lsl #12
   14320:	adc	r2, r2, r2
   14324:	subcs	r0, r0, r1, lsl #12
   14328:	cmp	r0, r1, lsl #11
   1432c:	adc	r2, r2, r2
   14330:	subcs	r0, r0, r1, lsl #11
   14334:	cmp	r0, r1, lsl #10
   14338:	adc	r2, r2, r2
   1433c:	subcs	r0, r0, r1, lsl #10
   14340:	cmp	r0, r1, lsl #9
   14344:	adc	r2, r2, r2
   14348:	subcs	r0, r0, r1, lsl #9
   1434c:	cmp	r0, r1, lsl #8
   14350:	adc	r2, r2, r2
   14354:	subcs	r0, r0, r1, lsl #8
   14358:	cmp	r0, r1, lsl #7
   1435c:	adc	r2, r2, r2
   14360:	subcs	r0, r0, r1, lsl #7
   14364:	cmp	r0, r1, lsl #6
   14368:	adc	r2, r2, r2
   1436c:	subcs	r0, r0, r1, lsl #6
   14370:	cmp	r0, r1, lsl #5
   14374:	adc	r2, r2, r2
   14378:	subcs	r0, r0, r1, lsl #5
   1437c:	cmp	r0, r1, lsl #4
   14380:	adc	r2, r2, r2
   14384:	subcs	r0, r0, r1, lsl #4
   14388:	cmp	r0, r1, lsl #3
   1438c:	adc	r2, r2, r2
   14390:	subcs	r0, r0, r1, lsl #3
   14394:	cmp	r0, r1, lsl #2
   14398:	adc	r2, r2, r2
   1439c:	subcs	r0, r0, r1, lsl #2
   143a0:	cmp	r0, r1, lsl #1
   143a4:	adc	r2, r2, r2
   143a8:	subcs	r0, r0, r1, lsl #1
   143ac:	cmp	r0, r1
   143b0:	adc	r2, r2, r2
   143b4:	subcs	r0, r0, r1
   143b8:	mov	r0, r2
   143bc:	bx	lr
   143c0:	moveq	r0, #1
   143c4:	movne	r0, #0
   143c8:	bx	lr
   143cc:	clz	r2, r1
   143d0:	rsb	r2, r2, #31
   143d4:	lsr	r0, r0, r2
   143d8:	bx	lr
   143dc:	cmp	r0, #0
   143e0:	mvnne	r0, #0
   143e4:	b	14408 <close_stdout@@Base+0x2a78>
   143e8:	cmp	r1, #0
   143ec:	beq	143dc <close_stdout@@Base+0x2a4c>
   143f0:	push	{r0, r1, lr}
   143f4:	bl	141fc <close_stdout@@Base+0x286c>
   143f8:	pop	{r1, r2, lr}
   143fc:	mul	r3, r2, r0
   14400:	sub	r1, r1, r3
   14404:	bx	lr
   14408:	push	{r1, lr}
   1440c:	mov	r0, #8
   14410:	bl	10f3c <raise@plt>
   14414:	pop	{r1, pc}
   14418:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1441c:	mov	r7, r0
   14420:	ldr	r6, [pc, #76]	; 14474 <close_stdout@@Base+0x2ae4>
   14424:	mov	r8, r1
   14428:	ldr	r5, [pc, #72]	; 14478 <close_stdout@@Base+0x2ae8>
   1442c:	mov	r9, r2
   14430:	add	r6, pc, r6
   14434:	bl	10ef8 <fdopen@plt-0x20>
   14438:	add	r5, pc, r5
   1443c:	rsb	r6, r5, r6
   14440:	asrs	r6, r6, #2
   14444:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14448:	sub	r5, r5, #4
   1444c:	mov	r4, #0
   14450:	add	r4, r4, #1
   14454:	ldr	r3, [r5, #4]!
   14458:	mov	r0, r7
   1445c:	mov	r1, r8
   14460:	mov	r2, r9
   14464:	blx	r3
   14468:	cmp	r4, r6
   1446c:	bne	14450 <close_stdout@@Base+0x2ac0>
   14470:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14474:	andeq	r1, r1, r4, asr #20
   14478:	andeq	r1, r1, r8, lsr sl
   1447c:	bx	lr
   14480:	ldr	r3, [pc, #28]	; 144a4 <close_stdout@@Base+0x2b14>
   14484:	mov	r1, #0
   14488:	ldr	r2, [pc, #24]	; 144a8 <close_stdout@@Base+0x2b18>
   1448c:	add	r3, pc, r3
   14490:	ldr	r3, [r3, r2]
   14494:	cmp	r3, #0
   14498:	ldrne	r2, [r3]
   1449c:	moveq	r2, r3
   144a0:	b	110d4 <__cxa_atexit@plt>
   144a4:	andeq	r1, r1, ip, ror #22
   144a8:	andeq	r0, r0, r4, lsl #2

Disassembly of section .fini:

000144ac <.fini>:
   144ac:	push	{r3, lr}
   144b0:	pop	{r3, pc}
