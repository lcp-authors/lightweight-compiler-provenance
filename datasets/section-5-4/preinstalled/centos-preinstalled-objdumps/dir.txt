
centos-preinstalled/dir:     file format elf32-littlearm


Disassembly of section .init:

00011c14 <_init@@Base>:
   11c14:	push	{r3, lr}
   11c18:	bl	146d4 <__assert_fail@plt+0x2548>
   11c1c:	pop	{r3, pc}

Disassembly of section .plt:

00011c20 <fdopen@plt-0x14>:
   11c20:	push	{lr}		; (str lr, [sp, #-4]!)
   11c24:	ldr	lr, [pc, #4]	; 11c30 <_init@@Base+0x1c>
   11c28:	add	lr, pc, lr
   11c2c:	ldr	pc, [lr, #8]!
   11c30:	ldrdeq	r7, [r2], -r0

00011c34 <fdopen@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #159744	; 0x27000
   11c3c:	ldr	pc, [ip, #976]!	; 0x3d0

00011c40 <calloc@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #159744	; 0x27000
   11c48:	ldr	pc, [ip, #968]!	; 0x3c8

00011c4c <fputs_unlocked@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #159744	; 0x27000
   11c54:	ldr	pc, [ip, #960]!	; 0x3c0

00011c58 <strstr@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #159744	; 0x27000
   11c60:	ldr	pc, [ip, #952]!	; 0x3b8

00011c64 <cap_to_text@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #159744	; 0x27000
   11c6c:	ldr	pc, [ip, #944]!	; 0x3b0

00011c70 <raise@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #159744	; 0x27000
   11c78:	ldr	pc, [ip, #936]!	; 0x3a8

00011c7c <getpwnam@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #159744	; 0x27000
   11c84:	ldr	pc, [ip, #928]!	; 0x3a0

00011c88 <strcmp@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #159744	; 0x27000
   11c90:	ldr	pc, [ip, #920]!	; 0x398

00011c94 <getpwuid@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #159744	; 0x27000
   11c9c:	ldr	pc, [ip, #912]!	; 0x390

00011ca0 <mktime@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #159744	; 0x27000
   11ca8:	ldr	pc, [ip, #904]!	; 0x388

00011cac <fflush@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #159744	; 0x27000
   11cb4:	ldr	pc, [ip, #896]!	; 0x380

00011cb8 <wcwidth@plt>:
   11cb8:	add	ip, pc, #0, 12
   11cbc:	add	ip, ip, #159744	; 0x27000
   11cc0:	ldr	pc, [ip, #888]!	; 0x378

00011cc4 <sigprocmask@plt>:
   11cc4:	add	ip, pc, #0, 12
   11cc8:	add	ip, ip, #159744	; 0x27000
   11ccc:	ldr	pc, [ip, #880]!	; 0x370

00011cd0 <_setjmp@plt>:
   11cd0:	add	ip, pc, #0, 12
   11cd4:	add	ip, ip, #159744	; 0x27000
   11cd8:	ldr	pc, [ip, #872]!	; 0x368

00011cdc <memmove@plt>:
   11cdc:	add	ip, pc, #0, 12
   11ce0:	add	ip, ip, #159744	; 0x27000
   11ce4:	ldr	pc, [ip, #864]!	; 0x360

00011ce8 <free@plt>:
   11ce8:	add	ip, pc, #0, 12
   11cec:	add	ip, ip, #159744	; 0x27000
   11cf0:	ldr	pc, [ip, #856]!	; 0x358

00011cf4 <clock_gettime@plt>:
   11cf4:	add	ip, pc, #0, 12
   11cf8:	add	ip, ip, #159744	; 0x27000
   11cfc:	ldr	pc, [ip, #848]!	; 0x350

00011d00 <_exit@plt>:
   11d00:	add	ip, pc, #0, 12
   11d04:	add	ip, ip, #159744	; 0x27000
   11d08:	ldr	pc, [ip, #840]!	; 0x348

00011d0c <memcpy@plt>:
   11d0c:	add	ip, pc, #0, 12
   11d10:	add	ip, ip, #159744	; 0x27000
   11d14:	ldr	pc, [ip, #832]!	; 0x340

00011d18 <__strtoull_internal@plt>:
   11d18:	add	ip, pc, #0, 12
   11d1c:	add	ip, ip, #159744	; 0x27000
   11d20:	ldr	pc, [ip, #824]!	; 0x338

00011d24 <mbsinit@plt>:
   11d24:	add	ip, pc, #0, 12
   11d28:	add	ip, ip, #159744	; 0x27000
   11d2c:	ldr	pc, [ip, #816]!	; 0x330

00011d30 <signal@plt>:
   11d30:	add	ip, pc, #0, 12
   11d34:	add	ip, ip, #159744	; 0x27000
   11d38:	ldr	pc, [ip, #808]!	; 0x328

00011d3c <fwrite_unlocked@plt>:
   11d3c:	add	ip, pc, #0, 12
   11d40:	add	ip, ip, #159744	; 0x27000
   11d44:	ldr	pc, [ip, #800]!	; 0x320

00011d48 <memcmp@plt>:
   11d48:	add	ip, pc, #0, 12
   11d4c:	add	ip, ip, #159744	; 0x27000
   11d50:	ldr	pc, [ip, #792]!	; 0x318

00011d54 <_obstack_newchunk@plt>:
   11d54:	add	ip, pc, #0, 12
   11d58:	add	ip, ip, #159744	; 0x27000
   11d5c:	ldr	pc, [ip, #784]!	; 0x310

00011d60 <stpcpy@plt>:
   11d60:	add	ip, pc, #0, 12
   11d64:	add	ip, ip, #159744	; 0x27000
   11d68:	ldr	pc, [ip, #776]!	; 0x308

00011d6c <dcgettext@plt>:
   11d6c:	add	ip, pc, #0, 12
   11d70:	add	ip, ip, #159744	; 0x27000
   11d74:	ldr	pc, [ip, #768]!	; 0x300

00011d78 <__stack_chk_fail@plt>:
   11d78:	add	ip, pc, #0, 12
   11d7c:	add	ip, ip, #159744	; 0x27000
   11d80:	ldr	pc, [ip, #760]!	; 0x2f8

00011d84 <_obstack_begin@plt>:
   11d84:	add	ip, pc, #0, 12
   11d88:	add	ip, ip, #159744	; 0x27000
   11d8c:	ldr	pc, [ip, #752]!	; 0x2f0

00011d90 <realloc@plt>:
   11d90:	add	ip, pc, #0, 12
   11d94:	add	ip, ip, #159744	; 0x27000
   11d98:	ldr	pc, [ip, #744]!	; 0x2e8

00011d9c <sigismember@plt>:
   11d9c:	add	ip, pc, #0, 12
   11da0:	add	ip, ip, #159744	; 0x27000
   11da4:	ldr	pc, [ip, #736]!	; 0x2e0

00011da8 <fgetfilecon@plt>:
   11da8:	add	ip, pc, #0, 12
   11dac:	add	ip, ip, #159744	; 0x27000
   11db0:	ldr	pc, [ip, #728]!	; 0x2d8

00011db4 <textdomain@plt>:
   11db4:	add	ip, pc, #0, 12
   11db8:	add	ip, ip, #159744	; 0x27000
   11dbc:	ldr	pc, [ip, #720]!	; 0x2d0

00011dc0 <iswcntrl@plt>:
   11dc0:	add	ip, pc, #0, 12
   11dc4:	add	ip, ip, #159744	; 0x27000
   11dc8:	ldr	pc, [ip, #712]!	; 0x2c8

00011dcc <fflush_unlocked@plt>:
   11dcc:	add	ip, pc, #0, 12
   11dd0:	add	ip, ip, #159744	; 0x27000
   11dd4:	ldr	pc, [ip, #704]!	; 0x2c0

00011dd8 <iswprint@plt>:
   11dd8:	add	ip, pc, #0, 12
   11ddc:	add	ip, ip, #159744	; 0x27000
   11de0:	ldr	pc, [ip, #696]!	; 0x2b8

00011de4 <acl_get_tag_type@plt>:
   11de4:	add	ip, pc, #0, 12
   11de8:	add	ip, ip, #159744	; 0x27000
   11dec:	ldr	pc, [ip, #688]!	; 0x2b0

00011df0 <__fxstat64@plt>:
   11df0:	add	ip, pc, #0, 12
   11df4:	add	ip, ip, #159744	; 0x27000
   11df8:	ldr	pc, [ip, #680]!	; 0x2a8

00011dfc <readlink@plt>:
   11dfc:	add	ip, pc, #0, 12
   11e00:	add	ip, ip, #159744	; 0x27000
   11e04:	ldr	pc, [ip, #672]!	; 0x2a0

00011e08 <sigaction@plt>:
   11e08:	add	ip, pc, #0, 12
   11e0c:	add	ip, ip, #159744	; 0x27000
   11e10:	ldr	pc, [ip, #664]!	; 0x298

00011e14 <__memcpy_chk@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #159744	; 0x27000
   11e1c:	ldr	pc, [ip, #656]!	; 0x290

00011e20 <fwrite@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #159744	; 0x27000
   11e28:	ldr	pc, [ip, #648]!	; 0x288

00011e2c <ioctl@plt>:
   11e2c:	add	ip, pc, #0, 12
   11e30:	add	ip, ip, #159744	; 0x27000
   11e34:	ldr	pc, [ip, #640]!	; 0x280

00011e38 <lseek64@plt>:
   11e38:	add	ip, pc, #0, 12
   11e3c:	add	ip, ip, #159744	; 0x27000
   11e40:	ldr	pc, [ip, #632]!	; 0x278

00011e44 <acl_extended_file@plt>:
   11e44:	add	ip, pc, #0, 12
   11e48:	add	ip, ip, #159744	; 0x27000
   11e4c:	ldr	pc, [ip, #624]!	; 0x270

00011e50 <__ctype_get_mb_cur_max@plt>:
   11e50:	add	ip, pc, #0, 12
   11e54:	add	ip, ip, #159744	; 0x27000
   11e58:	ldr	pc, [ip, #616]!	; 0x268

00011e5c <strcpy@plt>:
   11e5c:	add	ip, pc, #0, 12
   11e60:	add	ip, ip, #159744	; 0x27000
   11e64:	ldr	pc, [ip, #608]!	; 0x260

00011e68 <gettimeofday@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #159744	; 0x27000
   11e70:	ldr	pc, [ip, #600]!	; 0x258

00011e74 <__fpending@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #159744	; 0x27000
   11e7c:	ldr	pc, [ip, #592]!	; 0x250

00011e80 <mbrtowc@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #159744	; 0x27000
   11e88:	ldr	pc, [ip, #584]!	; 0x248

00011e8c <wcstombs@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #159744	; 0x27000
   11e94:	ldr	pc, [ip, #576]!	; 0x240

00011e98 <error@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #159744	; 0x27000
   11ea0:	ldr	pc, [ip, #568]!	; 0x238

00011ea4 <opendir@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #159744	; 0x27000
   11eac:	ldr	pc, [ip, #560]!	; 0x230

00011eb0 <fnmatch@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #159744	; 0x27000
   11eb8:	ldr	pc, [ip, #552]!	; 0x228

00011ebc <open64@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #159744	; 0x27000
   11ec4:	ldr	pc, [ip, #544]!	; 0x220

00011ec8 <strcoll@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #159744	; 0x27000
   11ed0:	ldr	pc, [ip, #536]!	; 0x218

00011ed4 <getenv@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #159744	; 0x27000
   11edc:	ldr	pc, [ip, #528]!	; 0x210

00011ee0 <lgetfilecon@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #159744	; 0x27000
   11ee8:	ldr	pc, [ip, #520]!	; 0x208

00011eec <malloc@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #159744	; 0x27000
   11ef4:	ldr	pc, [ip, #512]!	; 0x200

00011ef8 <sigaddset@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #159744	; 0x27000
   11f00:	ldr	pc, [ip, #504]!	; 0x1f8

00011f04 <__libc_start_main@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #159744	; 0x27000
   11f0c:	ldr	pc, [ip, #496]!	; 0x1f0

00011f10 <strftime@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #159744	; 0x27000
   11f18:	ldr	pc, [ip, #488]!	; 0x1e8

00011f1c <__freading@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #159744	; 0x27000
   11f24:	ldr	pc, [ip, #480]!	; 0x1e0

00011f28 <localtime@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #159744	; 0x27000
   11f30:	ldr	pc, [ip, #472]!	; 0x1d8

00011f34 <__ctype_tolower_loc@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #159744	; 0x27000
   11f3c:	ldr	pc, [ip, #464]!	; 0x1d0

00011f40 <__ctype_toupper_loc@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #159744	; 0x27000
   11f48:	ldr	pc, [ip, #456]!	; 0x1c8

00011f4c <__gmon_start__@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #159744	; 0x27000
   11f54:	ldr	pc, [ip, #448]!	; 0x1c0

00011f58 <mempcpy@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #159744	; 0x27000
   11f60:	ldr	pc, [ip, #440]!	; 0x1b8

00011f64 <getopt_long@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #159744	; 0x27000
   11f6c:	ldr	pc, [ip, #432]!	; 0x1b0

00011f70 <__ctype_b_loc@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #159744	; 0x27000
   11f78:	ldr	pc, [ip, #424]!	; 0x1a8

00011f7c <exit@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #159744	; 0x27000
   11f84:	ldr	pc, [ip, #416]!	; 0x1a0

00011f88 <getfilecon@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #159744	; 0x27000
   11f90:	ldr	pc, [ip, #408]!	; 0x198

00011f94 <strtoul@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #159744	; 0x27000
   11f9c:	ldr	pc, [ip, #400]!	; 0x190

00011fa0 <tcgetpgrp@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #159744	; 0x27000
   11fa8:	ldr	pc, [ip, #392]!	; 0x188

00011fac <strlen@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #159744	; 0x27000
   11fb4:	ldr	pc, [ip, #384]!	; 0x180

00011fb8 <strchr@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #159744	; 0x27000
   11fc0:	ldr	pc, [ip, #376]!	; 0x178

00011fc4 <ungetc@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #159744	; 0x27000
   11fcc:	ldr	pc, [ip, #368]!	; 0x170

00011fd0 <__errno_location@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #159744	; 0x27000
   11fd8:	ldr	pc, [ip, #360]!	; 0x168

00011fdc <__sprintf_chk@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #159744	; 0x27000
   11fe4:	ldr	pc, [ip, #352]!	; 0x160

00011fe8 <__cxa_atexit@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #159744	; 0x27000
   11ff0:	ldr	pc, [ip, #344]!	; 0x158

00011ff4 <memset@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #159744	; 0x27000
   11ffc:	ldr	pc, [ip, #336]!	; 0x150

00012000 <fscanf@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #159744	; 0x27000
   12008:	ldr	pc, [ip, #328]!	; 0x148

0001200c <__printf_chk@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #159744	; 0x27000
   12014:	ldr	pc, [ip, #320]!	; 0x140

00012018 <stpncpy@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #159744	; 0x27000
   12020:	ldr	pc, [ip, #312]!	; 0x138

00012024 <fileno@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #159744	; 0x27000
   1202c:	ldr	pc, [ip, #304]!	; 0x130

00012030 <acl_get_entry@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #159744	; 0x27000
   12038:	ldr	pc, [ip, #296]!	; 0x128

0001203c <__fprintf_chk@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #159744	; 0x27000
   12044:	ldr	pc, [ip, #288]!	; 0x120

00012048 <fclose@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #159744	; 0x27000
   12050:	ldr	pc, [ip, #280]!	; 0x118

00012054 <fseeko64@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #159744	; 0x27000
   1205c:	ldr	pc, [ip, #272]!	; 0x110

00012060 <__uflow@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #159744	; 0x27000
   12068:	ldr	pc, [ip, #264]!	; 0x108

0001206c <__overflow@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #159744	; 0x27000
   12074:	ldr	pc, [ip, #256]!	; 0x100

00012078 <setlocale@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #159744	; 0x27000
   12080:	ldr	pc, [ip, #248]!	; 0xf8

00012084 <sigemptyset@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #159744	; 0x27000
   1208c:	ldr	pc, [ip, #240]!	; 0xf0

00012090 <wcswidth@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #159744	; 0x27000
   12098:	ldr	pc, [ip, #232]!	; 0xe8

0001209c <strrchr@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #159744	; 0x27000
   120a4:	ldr	pc, [ip, #224]!	; 0xe0

000120a8 <cap_get_file@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #159744	; 0x27000
   120b0:	ldr	pc, [ip, #216]!	; 0xd8

000120b4 <nl_langinfo@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #159744	; 0x27000
   120bc:	ldr	pc, [ip, #208]!	; 0xd0

000120c0 <localeconv@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #159744	; 0x27000
   120c8:	ldr	pc, [ip, #200]!	; 0xc8

000120cc <mbstowcs@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #159744	; 0x27000
   120d4:	ldr	pc, [ip, #192]!	; 0xc0

000120d8 <readdir64@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #159744	; 0x27000
   120e0:	ldr	pc, [ip, #184]!	; 0xb8

000120e4 <cap_free@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #159744	; 0x27000
   120ec:	ldr	pc, [ip, #176]!	; 0xb0

000120f0 <dirfd@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #159744	; 0x27000
   120f8:	ldr	pc, [ip, #168]!	; 0xa8

000120fc <freecon@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #159744	; 0x27000
   12104:	ldr	pc, [ip, #160]!	; 0xa0

00012108 <bindtextdomain@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #159744	; 0x27000
   12110:	ldr	pc, [ip, #152]!	; 0x98

00012114 <__xstat64@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #159744	; 0x27000
   1211c:	ldr	pc, [ip, #144]!	; 0x90

00012120 <isatty@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #159744	; 0x27000
   12128:	ldr	pc, [ip, #136]!	; 0x88

0001212c <strncmp@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #159744	; 0x27000
   12134:	ldr	pc, [ip, #128]!	; 0x80

00012138 <abort@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #159744	; 0x27000
   12140:	ldr	pc, [ip, #120]!	; 0x78

00012144 <close@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #159744	; 0x27000
   1214c:	ldr	pc, [ip, #112]!	; 0x70

00012150 <__lxstat64@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #159744	; 0x27000
   12158:	ldr	pc, [ip, #104]!	; 0x68

0001215c <closedir@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #159744	; 0x27000
   12164:	ldr	pc, [ip, #96]!	; 0x60

00012168 <getgrgid@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #159744	; 0x27000
   12170:	ldr	pc, [ip, #88]!	; 0x58

00012174 <getgrnam@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #159744	; 0x27000
   1217c:	ldr	pc, [ip, #80]!	; 0x50

00012180 <__mempcpy_chk@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #159744	; 0x27000
   12188:	ldr	pc, [ip, #72]!	; 0x48

0001218c <__assert_fail@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #159744	; 0x27000
   12194:	ldr	pc, [ip, #64]!	; 0x40

Disassembly of section .text:

00012198 <close_stdout@@Base-0x90e4>:
   12198:	push	{r3, lr}
   1219c:	movw	r2, #3827	; 0xef3
   121a0:	ldr	r3, [pc, #24]	; 121c0 <__assert_fail@plt+0x34>
   121a4:	ldr	r0, [pc, #24]	; 121c4 <__assert_fail@plt+0x38>
   121a8:	ldr	r1, [pc, #24]	; 121c8 <__assert_fail@plt+0x3c>
   121ac:	add	r3, pc, r3
   121b0:	add	r0, pc, r0
   121b4:	add	r3, r3, #12
   121b8:	add	r1, pc, r1
   121bc:	bl	1218c <__assert_fail@plt>
   121c0:			; <UNDEFINED> instruction: 0x000123b4
   121c4:	andeq	r2, r1, r4, asr r5
   121c8:	andeq	r2, r1, r8, lsr #10
   121cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121d0:	sub	sp, sp, #76	; 0x4c
   121d4:	ldr	r5, [pc, #4044]	; 131a8 <__assert_fail@plt+0x101c>
   121d8:	mov	r4, r0
   121dc:	ldr	r3, [pc, #4040]	; 131ac <__assert_fail@plt+0x1020>
   121e0:	mov	fp, r1
   121e4:	add	r5, pc, r5
   121e8:	ldr	r0, [r1]
   121ec:	ldr	r7, [pc, #4028]	; 131b0 <__assert_fail@plt+0x1024>
   121f0:	mov	r8, #2
   121f4:	ldr	r3, [r5, r3]
   121f8:	add	r7, pc, r7
   121fc:	ldr	r6, [pc, #4016]	; 131b4 <__assert_fail@plt+0x1028>
   12200:	ldr	r3, [r3]
   12204:	add	r6, pc, r6
   12208:	str	r3, [sp, #68]	; 0x44
   1220c:	bl	1e668 <close_stdout@@Base+0x33ec>
   12210:	ldr	r1, [pc, #4000]	; 131b8 <__assert_fail@plt+0x102c>
   12214:	mov	r0, #6
   12218:	add	r1, pc, r1
   1221c:	bl	12078 <setlocale@plt>
   12220:	ldr	r1, [pc, #3988]	; 131bc <__assert_fail@plt+0x1030>
   12224:	mov	r0, r7
   12228:	add	r1, pc, r1
   1222c:	bl	12108 <bindtextdomain@plt>
   12230:	mov	r0, r7
   12234:	bl	11db4 <textdomain@plt>
   12238:	ldr	r2, [pc, #3968]	; 131c0 <__assert_fail@plt+0x1034>
   1223c:	ldr	r3, [pc, #3968]	; 131c4 <__assert_fail@plt+0x1038>
   12240:	ldr	r2, [r5, r2]
   12244:	str	r8, [r2]
   12248:	ldr	r0, [r5, r3]
   1224c:	bl	2452c <close_stdout@@Base+0x92b0>
   12250:	ldr	r2, [pc, #3952]	; 131c8 <__assert_fail@plt+0x103c>
   12254:	mov	r1, #1
   12258:	mov	r3, #-2147483648	; 0x80000000
   1225c:	strb	r1, [r6, #2777]	; 0xad9
   12260:	mvn	r1, #0
   12264:	str	r3, [r6, #2680]	; 0xa78
   12268:	mov	r3, #0
   1226c:	str	r1, [r6, #2684]	; 0xa7c
   12270:	str	r3, [r6, #496]	; 0x1f0
   12274:	str	r3, [r6, #4]
   12278:	strb	r3, [r6, #480]	; 0x1e0
   1227c:	ldr	r2, [r5, r2]
   12280:	ldr	r7, [r2]
   12284:	str	r2, [sp, #28]
   12288:	cmp	r7, r8
   1228c:	beq	128e0 <__assert_fail@plt+0x754>
   12290:	cmp	r7, #3
   12294:	beq	128cc <__assert_fail@plt+0x740>
   12298:	cmp	r7, #1
   1229c:	beq	122a4 <__assert_fail@plt+0x118>
   122a0:	bl	12138 <abort@plt>
   122a4:	mov	r0, r7
   122a8:	bl	12120 <isatty@plt>
   122ac:	cmp	r0, #0
   122b0:	strne	r8, [r6, #508]	; 0x1fc
   122b4:	strbne	r7, [r6, #480]	; 0x1e0
   122b8:	streq	r7, [r6, #508]	; 0x1fc
   122bc:	ldr	r3, [pc, #3848]	; 131cc <__assert_fail@plt+0x1040>
   122c0:	mov	r6, #0
   122c4:	ldr	r0, [pc, #3844]	; 131d0 <__assert_fail@plt+0x1044>
   122c8:	mov	r2, #1
   122cc:	add	r3, pc, r3
   122d0:	add	r0, pc, r0
   122d4:	str	r2, [r3, #2692]	; 0xa84
   122d8:	str	r6, [r3, #464]	; 0x1d0
   122dc:	str	r6, [r3, #64]	; 0x40
   122e0:	strb	r6, [r3, #468]	; 0x1d4
   122e4:	strb	r6, [r3, #488]	; 0x1e8
   122e8:	strb	r6, [r3, #512]	; 0x200
   122ec:	str	r6, [r3, #500]	; 0x1f4
   122f0:	strb	r6, [r3, #504]	; 0x1f8
   122f4:	strb	r6, [r3, #2776]	; 0xad8
   122f8:	strb	r6, [r3, #2728]	; 0xaa8
   122fc:	str	r6, [r3, #2828]	; 0xb0c
   12300:	str	r6, [r3, #2832]	; 0xb10
   12304:	str	r6, [r3, #2836]	; 0xb14
   12308:	str	r6, [r3, #2624]	; 0xa40
   1230c:	bl	11ed4 <getenv@plt>
   12310:	subs	r8, r0, #0
   12314:	beq	12348 <__assert_fail@plt+0x1bc>
   12318:	ldr	r2, [pc, #3764]	; 131d4 <__assert_fail@plt+0x1048>
   1231c:	mov	r3, #4
   12320:	ldr	r1, [pc, #3760]	; 131d8 <__assert_fail@plt+0x104c>
   12324:	ldr	r7, [r5, r2]
   12328:	ldr	r1, [r5, r1]
   1232c:	mov	r2, r7
   12330:	bl	1aed4 <__assert_fail@plt+0x8d48>
   12334:	subs	r3, r0, #0
   12338:	mov	r0, r6
   1233c:	blt	13b80 <__assert_fail@plt+0x19f4>
   12340:	ldr	r1, [r7, r3, lsl #2]
   12344:	bl	1f94c <close_stdout@@Base+0x46d0>
   12348:	ldr	r6, [pc, #3724]	; 131dc <__assert_fail@plt+0x1050>
   1234c:	mov	r3, #80	; 0x50
   12350:	ldr	r0, [pc, #3720]	; 131e0 <__assert_fail@plt+0x1054>
   12354:	add	r6, pc, r6
   12358:	add	r0, pc, r0
   1235c:	str	r3, [r6, #544]	; 0x220
   12360:	bl	11ed4 <getenv@plt>
   12364:	subs	r7, r0, #0
   12368:	beq	12378 <__assert_fail@plt+0x1ec>
   1236c:	ldrb	r3, [r7]
   12370:	cmp	r3, #0
   12374:	bne	13b10 <__assert_fail@plt+0x1984>
   12378:	add	ip, sp, #48	; 0x30
   1237c:	str	ip, [sp, #20]
   12380:	mov	r0, #1
   12384:	movw	r1, #21523	; 0x5413
   12388:	ldr	r2, [sp, #20]
   1238c:	bl	11e2c <ioctl@plt>
   12390:	cmn	r0, #1
   12394:	beq	123ac <__assert_fail@plt+0x220>
   12398:	ldrh	r3, [sp, #50]	; 0x32
   1239c:	cmp	r3, #0
   123a0:	ldrne	r2, [pc, #3644]	; 131e4 <__assert_fail@plt+0x1058>
   123a4:	addne	r2, pc, r2
   123a8:	strne	r3, [r2, #544]	; 0x220
   123ac:	ldr	r0, [pc, #3636]	; 131e8 <__assert_fail@plt+0x105c>
   123b0:	ldr	r7, [pc, #3636]	; 131ec <__assert_fail@plt+0x1060>
   123b4:	add	r0, pc, r0
   123b8:	bl	11ed4 <getenv@plt>
   123bc:	add	r7, pc, r7
   123c0:	mov	r3, #8
   123c4:	str	r3, [r7, #476]	; 0x1dc
   123c8:	subs	r8, r0, #0
   123cc:	beq	123f8 <__assert_fail@plt+0x26c>
   123d0:	mov	r6, #0
   123d4:	ldr	r3, [sp, #20]
   123d8:	str	r6, [sp]
   123dc:	mov	r1, r6
   123e0:	mov	r2, r6
   123e4:	bl	22038 <close_stdout@@Base+0x6dbc>
   123e8:	cmp	r0, r6
   123ec:	bne	13d14 <__assert_fail@plt+0x1b88>
   123f0:	ldr	r3, [sp, #48]	; 0x30
   123f4:	str	r3, [r7, #476]	; 0x1dc
   123f8:	ldr	r9, [pc, #3568]	; 131f0 <__assert_fail@plt+0x1064>
   123fc:	mov	r7, #0
   12400:	ldr	r3, [pc, #3564]	; 131f4 <__assert_fail@plt+0x1068>
   12404:	add	sl, sp, #44	; 0x2c
   12408:	add	r9, pc, r9
   1240c:	mov	r6, r7
   12410:	add	r9, r9, #1056	; 0x420
   12414:	add	r3, pc, r3
   12418:	add	r9, r9, #12
   1241c:	add	r3, r3, #1024	; 0x400
   12420:	add	r3, r3, #4
   12424:	str	r7, [sp, #32]
   12428:	str	r3, [sp, #24]
   1242c:	ldr	r3, [pc, #3524]	; 131f8 <__assert_fail@plt+0x106c>
   12430:	mov	r0, r4
   12434:	ldr	r2, [pc, #3520]	; 131fc <__assert_fail@plt+0x1070>
   12438:	mov	r1, fp
   1243c:	add	r3, pc, r3
   12440:	str	sl, [sp]
   12444:	add	r3, r3, #224	; 0xe0
   12448:	add	r2, pc, r2
   1244c:	mvn	ip, #0
   12450:	str	ip, [sp, #44]	; 0x2c
   12454:	bl	11f64 <getopt_long@plt>
   12458:	cmn	r0, #1
   1245c:	beq	128f4 <__assert_fail@plt+0x768>
   12460:	add	r0, r0, #3
   12464:	movw	r3, #277	; 0x115
   12468:	cmp	r0, r3
   1246c:	addls	pc, pc, r0, lsl #2
   12470:	b	13948 <__assert_fail@plt+0x17bc>
   12474:	b	12f1c <__assert_fail@plt+0xd90>
   12478:	b	12f14 <__assert_fail@plt+0xd88>
   1247c:	b	13948 <__assert_fail@plt+0x17bc>
   12480:	b	13948 <__assert_fail@plt+0x17bc>
   12484:	b	13948 <__assert_fail@plt+0x17bc>
   12488:	b	13948 <__assert_fail@plt+0x17bc>
   1248c:	b	13948 <__assert_fail@plt+0x17bc>
   12490:	b	13948 <__assert_fail@plt+0x17bc>
   12494:	b	13948 <__assert_fail@plt+0x17bc>
   12498:	b	13948 <__assert_fail@plt+0x17bc>
   1249c:	b	13948 <__assert_fail@plt+0x17bc>
   124a0:	b	13948 <__assert_fail@plt+0x17bc>
   124a4:	b	13948 <__assert_fail@plt+0x17bc>
   124a8:	b	13948 <__assert_fail@plt+0x17bc>
   124ac:	b	13948 <__assert_fail@plt+0x17bc>
   124b0:	b	13948 <__assert_fail@plt+0x17bc>
   124b4:	b	13948 <__assert_fail@plt+0x17bc>
   124b8:	b	13948 <__assert_fail@plt+0x17bc>
   124bc:	b	13948 <__assert_fail@plt+0x17bc>
   124c0:	b	13948 <__assert_fail@plt+0x17bc>
   124c4:	b	13948 <__assert_fail@plt+0x17bc>
   124c8:	b	13948 <__assert_fail@plt+0x17bc>
   124cc:	b	13948 <__assert_fail@plt+0x17bc>
   124d0:	b	13948 <__assert_fail@plt+0x17bc>
   124d4:	b	13948 <__assert_fail@plt+0x17bc>
   124d8:	b	13948 <__assert_fail@plt+0x17bc>
   124dc:	b	13948 <__assert_fail@plt+0x17bc>
   124e0:	b	13948 <__assert_fail@plt+0x17bc>
   124e4:	b	13948 <__assert_fail@plt+0x17bc>
   124e8:	b	13948 <__assert_fail@plt+0x17bc>
   124ec:	b	13948 <__assert_fail@plt+0x17bc>
   124f0:	b	13948 <__assert_fail@plt+0x17bc>
   124f4:	b	13948 <__assert_fail@plt+0x17bc>
   124f8:	b	13948 <__assert_fail@plt+0x17bc>
   124fc:	b	13948 <__assert_fail@plt+0x17bc>
   12500:	b	13948 <__assert_fail@plt+0x17bc>
   12504:	b	13948 <__assert_fail@plt+0x17bc>
   12508:	b	13948 <__assert_fail@plt+0x17bc>
   1250c:	b	13948 <__assert_fail@plt+0x17bc>
   12510:	b	13948 <__assert_fail@plt+0x17bc>
   12514:	b	13948 <__assert_fail@plt+0x17bc>
   12518:	b	13948 <__assert_fail@plt+0x17bc>
   1251c:	b	13948 <__assert_fail@plt+0x17bc>
   12520:	b	13948 <__assert_fail@plt+0x17bc>
   12524:	b	13948 <__assert_fail@plt+0x17bc>
   12528:	b	13948 <__assert_fail@plt+0x17bc>
   1252c:	b	13948 <__assert_fail@plt+0x17bc>
   12530:	b	13948 <__assert_fail@plt+0x17bc>
   12534:	b	13948 <__assert_fail@plt+0x17bc>
   12538:	b	13948 <__assert_fail@plt+0x17bc>
   1253c:	b	13948 <__assert_fail@plt+0x17bc>
   12540:	b	13948 <__assert_fail@plt+0x17bc>
   12544:	b	12ef8 <__assert_fail@plt+0xd6c>
   12548:	b	13948 <__assert_fail@plt+0x17bc>
   1254c:	b	13948 <__assert_fail@plt+0x17bc>
   12550:	b	13948 <__assert_fail@plt+0x17bc>
   12554:	b	13948 <__assert_fail@plt+0x17bc>
   12558:	b	13948 <__assert_fail@plt+0x17bc>
   1255c:	b	13948 <__assert_fail@plt+0x17bc>
   12560:	b	13948 <__assert_fail@plt+0x17bc>
   12564:	b	13948 <__assert_fail@plt+0x17bc>
   12568:	b	13948 <__assert_fail@plt+0x17bc>
   1256c:	b	13948 <__assert_fail@plt+0x17bc>
   12570:	b	13948 <__assert_fail@plt+0x17bc>
   12574:	b	13948 <__assert_fail@plt+0x17bc>
   12578:	b	13948 <__assert_fail@plt+0x17bc>
   1257c:	b	13948 <__assert_fail@plt+0x17bc>
   12580:	b	13948 <__assert_fail@plt+0x17bc>
   12584:	b	12edc <__assert_fail@plt+0xd50>
   12588:	b	12e94 <__assert_fail@plt+0xd08>
   1258c:	b	12e80 <__assert_fail@plt+0xcf4>
   12590:	b	12e6c <__assert_fail@plt+0xce0>
   12594:	b	13948 <__assert_fail@plt+0x17bc>
   12598:	b	12e58 <__assert_fail@plt+0xccc>
   1259c:	b	12e44 <__assert_fail@plt+0xcb8>
   125a0:	b	12e30 <__assert_fail@plt+0xca4>
   125a4:	b	12e00 <__assert_fail@plt+0xc74>
   125a8:	b	13948 <__assert_fail@plt+0x17bc>
   125ac:	b	13948 <__assert_fail@plt+0x17bc>
   125b0:	b	12dec <__assert_fail@plt+0xc60>
   125b4:	b	13948 <__assert_fail@plt+0x17bc>
   125b8:	b	12ddc <__assert_fail@plt+0xc50>
   125bc:	b	13948 <__assert_fail@plt+0x17bc>
   125c0:	b	13948 <__assert_fail@plt+0x17bc>
   125c4:	b	12dcc <__assert_fail@plt+0xc40>
   125c8:	b	12db8 <__assert_fail@plt+0xc2c>
   125cc:	b	12d9c <__assert_fail@plt+0xc10>
   125d0:	b	12d20 <__assert_fail@plt+0xb94>
   125d4:	b	12d04 <__assert_fail@plt+0xb78>
   125d8:	b	13948 <__assert_fail@plt+0x17bc>
   125dc:	b	13948 <__assert_fail@plt+0x17bc>
   125e0:	b	12cec <__assert_fail@plt+0xb60>
   125e4:	b	13948 <__assert_fail@plt+0x17bc>
   125e8:	b	12cd0 <__assert_fail@plt+0xb44>
   125ec:	b	13948 <__assert_fail@plt+0x17bc>
   125f0:	b	13948 <__assert_fail@plt+0x17bc>
   125f4:	b	13948 <__assert_fail@plt+0x17bc>
   125f8:	b	13948 <__assert_fail@plt+0x17bc>
   125fc:	b	13948 <__assert_fail@plt+0x17bc>
   12600:	b	13948 <__assert_fail@plt+0x17bc>
   12604:	b	12d88 <__assert_fail@plt+0xbfc>
   12608:	b	12d64 <__assert_fail@plt+0xbd8>
   1260c:	b	12d74 <__assert_fail@plt+0xbe8>
   12610:	b	12cbc <__assert_fail@plt+0xb30>
   12614:	b	13948 <__assert_fail@plt+0x17bc>
   12618:	b	12c78 <__assert_fail@plt+0xaec>
   1261c:	b	12c58 <__assert_fail@plt+0xacc>
   12620:	b	12c24 <__assert_fail@plt+0xa98>
   12624:	b	12c10 <__assert_fail@plt+0xa84>
   12628:	b	13948 <__assert_fail@plt+0x17bc>
   1262c:	b	12c08 <__assert_fail@plt+0xa7c>
   12630:	b	13840 <__assert_fail@plt+0x16b4>
   12634:	b	1382c <__assert_fail@plt+0x16a0>
   12638:	b	13810 <__assert_fail@plt+0x1684>
   1263c:	b	137f0 <__assert_fail@plt+0x1664>
   12640:	b	137dc <__assert_fail@plt+0x1650>
   12644:	b	137c8 <__assert_fail@plt+0x163c>
   12648:	b	137b4 <__assert_fail@plt+0x1628>
   1264c:	b	137a0 <__assert_fail@plt+0x1614>
   12650:	b	13784 <__assert_fail@plt+0x15f8>
   12654:	b	13770 <__assert_fail@plt+0x15e4>
   12658:	b	13754 <__assert_fail@plt+0x15c8>
   1265c:	b	136cc <__assert_fail@plt+0x1540>
   12660:	b	136b8 <__assert_fail@plt+0x152c>
   12664:	b	13948 <__assert_fail@plt+0x17bc>
   12668:	b	13948 <__assert_fail@plt+0x17bc>
   1266c:	b	13948 <__assert_fail@plt+0x17bc>
   12670:	b	13948 <__assert_fail@plt+0x17bc>
   12674:	b	13948 <__assert_fail@plt+0x17bc>
   12678:	b	13948 <__assert_fail@plt+0x17bc>
   1267c:	b	13948 <__assert_fail@plt+0x17bc>
   12680:	b	13948 <__assert_fail@plt+0x17bc>
   12684:	b	13948 <__assert_fail@plt+0x17bc>
   12688:	b	13948 <__assert_fail@plt+0x17bc>
   1268c:	b	13948 <__assert_fail@plt+0x17bc>
   12690:	b	13948 <__assert_fail@plt+0x17bc>
   12694:	b	13948 <__assert_fail@plt+0x17bc>
   12698:	b	13948 <__assert_fail@plt+0x17bc>
   1269c:	b	13948 <__assert_fail@plt+0x17bc>
   126a0:	b	13948 <__assert_fail@plt+0x17bc>
   126a4:	b	13948 <__assert_fail@plt+0x17bc>
   126a8:	b	13948 <__assert_fail@plt+0x17bc>
   126ac:	b	13948 <__assert_fail@plt+0x17bc>
   126b0:	b	13948 <__assert_fail@plt+0x17bc>
   126b4:	b	13948 <__assert_fail@plt+0x17bc>
   126b8:	b	13948 <__assert_fail@plt+0x17bc>
   126bc:	b	13948 <__assert_fail@plt+0x17bc>
   126c0:	b	13948 <__assert_fail@plt+0x17bc>
   126c4:	b	13948 <__assert_fail@plt+0x17bc>
   126c8:	b	13948 <__assert_fail@plt+0x17bc>
   126cc:	b	13948 <__assert_fail@plt+0x17bc>
   126d0:	b	13948 <__assert_fail@plt+0x17bc>
   126d4:	b	13948 <__assert_fail@plt+0x17bc>
   126d8:	b	13948 <__assert_fail@plt+0x17bc>
   126dc:	b	13948 <__assert_fail@plt+0x17bc>
   126e0:	b	13948 <__assert_fail@plt+0x17bc>
   126e4:	b	13948 <__assert_fail@plt+0x17bc>
   126e8:	b	13948 <__assert_fail@plt+0x17bc>
   126ec:	b	13948 <__assert_fail@plt+0x17bc>
   126f0:	b	13948 <__assert_fail@plt+0x17bc>
   126f4:	b	13948 <__assert_fail@plt+0x17bc>
   126f8:	b	13948 <__assert_fail@plt+0x17bc>
   126fc:	b	13948 <__assert_fail@plt+0x17bc>
   12700:	b	13948 <__assert_fail@plt+0x17bc>
   12704:	b	13948 <__assert_fail@plt+0x17bc>
   12708:	b	13948 <__assert_fail@plt+0x17bc>
   1270c:	b	13948 <__assert_fail@plt+0x17bc>
   12710:	b	13948 <__assert_fail@plt+0x17bc>
   12714:	b	13948 <__assert_fail@plt+0x17bc>
   12718:	b	13948 <__assert_fail@plt+0x17bc>
   1271c:	b	13948 <__assert_fail@plt+0x17bc>
   12720:	b	13948 <__assert_fail@plt+0x17bc>
   12724:	b	13948 <__assert_fail@plt+0x17bc>
   12728:	b	13948 <__assert_fail@plt+0x17bc>
   1272c:	b	13948 <__assert_fail@plt+0x17bc>
   12730:	b	13948 <__assert_fail@plt+0x17bc>
   12734:	b	13948 <__assert_fail@plt+0x17bc>
   12738:	b	13948 <__assert_fail@plt+0x17bc>
   1273c:	b	13948 <__assert_fail@plt+0x17bc>
   12740:	b	13948 <__assert_fail@plt+0x17bc>
   12744:	b	13948 <__assert_fail@plt+0x17bc>
   12748:	b	13948 <__assert_fail@plt+0x17bc>
   1274c:	b	13948 <__assert_fail@plt+0x17bc>
   12750:	b	13948 <__assert_fail@plt+0x17bc>
   12754:	b	13948 <__assert_fail@plt+0x17bc>
   12758:	b	13948 <__assert_fail@plt+0x17bc>
   1275c:	b	13948 <__assert_fail@plt+0x17bc>
   12760:	b	13948 <__assert_fail@plt+0x17bc>
   12764:	b	13948 <__assert_fail@plt+0x17bc>
   12768:	b	13948 <__assert_fail@plt+0x17bc>
   1276c:	b	13948 <__assert_fail@plt+0x17bc>
   12770:	b	13948 <__assert_fail@plt+0x17bc>
   12774:	b	13948 <__assert_fail@plt+0x17bc>
   12778:	b	13948 <__assert_fail@plt+0x17bc>
   1277c:	b	13948 <__assert_fail@plt+0x17bc>
   12780:	b	13948 <__assert_fail@plt+0x17bc>
   12784:	b	13948 <__assert_fail@plt+0x17bc>
   12788:	b	13948 <__assert_fail@plt+0x17bc>
   1278c:	b	13948 <__assert_fail@plt+0x17bc>
   12790:	b	13948 <__assert_fail@plt+0x17bc>
   12794:	b	13948 <__assert_fail@plt+0x17bc>
   12798:	b	13948 <__assert_fail@plt+0x17bc>
   1279c:	b	13948 <__assert_fail@plt+0x17bc>
   127a0:	b	13948 <__assert_fail@plt+0x17bc>
   127a4:	b	13948 <__assert_fail@plt+0x17bc>
   127a8:	b	13948 <__assert_fail@plt+0x17bc>
   127ac:	b	13948 <__assert_fail@plt+0x17bc>
   127b0:	b	13948 <__assert_fail@plt+0x17bc>
   127b4:	b	13948 <__assert_fail@plt+0x17bc>
   127b8:	b	13948 <__assert_fail@plt+0x17bc>
   127bc:	b	13948 <__assert_fail@plt+0x17bc>
   127c0:	b	13948 <__assert_fail@plt+0x17bc>
   127c4:	b	13948 <__assert_fail@plt+0x17bc>
   127c8:	b	13948 <__assert_fail@plt+0x17bc>
   127cc:	b	13948 <__assert_fail@plt+0x17bc>
   127d0:	b	13948 <__assert_fail@plt+0x17bc>
   127d4:	b	13948 <__assert_fail@plt+0x17bc>
   127d8:	b	13948 <__assert_fail@plt+0x17bc>
   127dc:	b	13948 <__assert_fail@plt+0x17bc>
   127e0:	b	13948 <__assert_fail@plt+0x17bc>
   127e4:	b	13948 <__assert_fail@plt+0x17bc>
   127e8:	b	13948 <__assert_fail@plt+0x17bc>
   127ec:	b	13948 <__assert_fail@plt+0x17bc>
   127f0:	b	13948 <__assert_fail@plt+0x17bc>
   127f4:	b	13948 <__assert_fail@plt+0x17bc>
   127f8:	b	13948 <__assert_fail@plt+0x17bc>
   127fc:	b	13948 <__assert_fail@plt+0x17bc>
   12800:	b	13948 <__assert_fail@plt+0x17bc>
   12804:	b	13948 <__assert_fail@plt+0x17bc>
   12808:	b	13948 <__assert_fail@plt+0x17bc>
   1280c:	b	13948 <__assert_fail@plt+0x17bc>
   12810:	b	13948 <__assert_fail@plt+0x17bc>
   12814:	b	13948 <__assert_fail@plt+0x17bc>
   12818:	b	13948 <__assert_fail@plt+0x17bc>
   1281c:	b	13948 <__assert_fail@plt+0x17bc>
   12820:	b	13948 <__assert_fail@plt+0x17bc>
   12824:	b	13948 <__assert_fail@plt+0x17bc>
   12828:	b	13948 <__assert_fail@plt+0x17bc>
   1282c:	b	13948 <__assert_fail@plt+0x17bc>
   12830:	b	13948 <__assert_fail@plt+0x17bc>
   12834:	b	13948 <__assert_fail@plt+0x17bc>
   12838:	b	13948 <__assert_fail@plt+0x17bc>
   1283c:	b	13948 <__assert_fail@plt+0x17bc>
   12840:	b	13948 <__assert_fail@plt+0x17bc>
   12844:	b	13948 <__assert_fail@plt+0x17bc>
   12848:	b	13948 <__assert_fail@plt+0x17bc>
   1284c:	b	13948 <__assert_fail@plt+0x17bc>
   12850:	b	13948 <__assert_fail@plt+0x17bc>
   12854:	b	13948 <__assert_fail@plt+0x17bc>
   12858:	b	13948 <__assert_fail@plt+0x17bc>
   1285c:	b	13948 <__assert_fail@plt+0x17bc>
   12860:	b	13948 <__assert_fail@plt+0x17bc>
   12864:	b	13948 <__assert_fail@plt+0x17bc>
   12868:	b	13948 <__assert_fail@plt+0x17bc>
   1286c:	b	13948 <__assert_fail@plt+0x17bc>
   12870:	b	13948 <__assert_fail@plt+0x17bc>
   12874:	b	13948 <__assert_fail@plt+0x17bc>
   12878:	b	13948 <__assert_fail@plt+0x17bc>
   1287c:	b	13948 <__assert_fail@plt+0x17bc>
   12880:	b	136a4 <__assert_fail@plt+0x1518>
   12884:	b	1364c <__assert_fail@plt+0x14c0>
   12888:	b	135d8 <__assert_fail@plt+0x144c>
   1288c:	b	135c4 <__assert_fail@plt+0x1438>
   12890:	b	135b0 <__assert_fail@plt+0x1424>
   12894:	b	13550 <__assert_fail@plt+0x13c4>
   12898:	b	13534 <__assert_fail@plt+0x13a8>
   1289c:	b	13520 <__assert_fail@plt+0x1394>
   128a0:	b	134f0 <__assert_fail@plt+0x1364>
   128a4:	b	13150 <__assert_fail@plt+0xfc4>
   128a8:	b	130fc <__assert_fail@plt+0xf70>
   128ac:	b	130e8 <__assert_fail@plt+0xf5c>
   128b0:	b	130b4 <__assert_fail@plt+0xf28>
   128b4:	b	1304c <__assert_fail@plt+0xec0>
   128b8:	b	13030 <__assert_fail@plt+0xea4>
   128bc:	b	13014 <__assert_fail@plt+0xe88>
   128c0:	b	12ff8 <__assert_fail@plt+0xe6c>
   128c4:	b	12f98 <__assert_fail@plt+0xe0c>
   128c8:	b	12f88 <__assert_fail@plt+0xdfc>
   128cc:	mov	r0, r3
   128d0:	mov	r1, #5
   128d4:	str	r3, [r6, #508]	; 0x1fc
   128d8:	bl	1f94c <close_stdout@@Base+0x46d0>
   128dc:	b	122bc <__assert_fail@plt+0x130>
   128e0:	mov	r0, r3
   128e4:	mov	r1, #5
   128e8:	str	r7, [r6, #508]	; 0x1fc
   128ec:	bl	1f94c <close_stdout@@Base+0x46d0>
   128f0:	b	122bc <__assert_fail@plt+0x130>
   128f4:	ldr	r8, [pc, #2308]	; 13200 <__assert_fail@plt+0x1074>
   128f8:	mov	r3, #520	; 0x208
   128fc:	add	r8, pc, r8
   12900:	ldrd	r0, [r8, r3]
   12904:	orrs	lr, r0, r1
   12908:	beq	139e4 <__assert_fail@plt+0x1858>
   1290c:	ldr	r3, [pc, #2288]	; 13204 <__assert_fail@plt+0x1078>
   12910:	add	r3, pc, r3
   12914:	ldr	r0, [r3, #544]	; 0x220
   12918:	cmp	r0, #2
   1291c:	movls	r3, #1
   12920:	bls	12930 <__assert_fail@plt+0x7a4>
   12924:	mov	r1, #3
   12928:	bl	234ec <close_stdout@@Base+0x8270>
   1292c:	mov	r3, r0
   12930:	ldr	r7, [pc, #2256]	; 13208 <__assert_fail@plt+0x107c>
   12934:	mov	r0, #0
   12938:	add	r7, pc, r7
   1293c:	str	r3, [r7, #532]	; 0x214
   12940:	bl	1f8e8 <close_stdout@@Base+0x466c>
   12944:	str	r0, [r7, #528]	; 0x210
   12948:	bl	1f924 <close_stdout@@Base+0x46a8>
   1294c:	cmp	r0, #5
   12950:	beq	13ef0 <__assert_fail@plt+0x1d64>
   12954:	ldr	r7, [pc, #2224]	; 1320c <__assert_fail@plt+0x1080>
   12958:	add	r7, pc, r7
   1295c:	ldr	r3, [r7, #500]	; 0x1f4
   12960:	cmp	r3, #1
   12964:	bls	1299c <__assert_fail@plt+0x810>
   12968:	ldr	r2, [pc, #2208]	; 13210 <__assert_fail@plt+0x1084>
   1296c:	sub	r3, r3, #2
   12970:	add	r2, pc, r2
   12974:	add	r8, r3, r2
   12978:	ldrb	r1, [r2, r3]
   1297c:	cmp	r1, #0
   12980:	beq	1299c <__assert_fail@plt+0x810>
   12984:	ldr	r0, [r7, #528]	; 0x210
   12988:	mov	r2, #1
   1298c:	bl	1f974 <close_stdout@@Base+0x46f8>
   12990:	ldrb	r1, [r8, #1]!
   12994:	cmp	r1, #0
   12998:	bne	12984 <__assert_fail@plt+0x7f8>
   1299c:	mov	r0, #0
   129a0:	ldr	r7, [pc, #2156]	; 13214 <__assert_fail@plt+0x1088>
   129a4:	bl	1f8e8 <close_stdout@@Base+0x466c>
   129a8:	mov	r1, #58	; 0x3a
   129ac:	add	r7, pc, r7
   129b0:	mov	r2, #1
   129b4:	str	r0, [r7, #2824]	; 0xb08
   129b8:	bl	1f974 <close_stdout@@Base+0x46f8>
   129bc:	ldrb	r3, [r7, #2620]	; 0xa3c
   129c0:	cmp	r3, #0
   129c4:	beq	129d8 <__assert_fail@plt+0x84c>
   129c8:	ldr	r3, [r7, #508]	; 0x1fc
   129cc:	cmp	r3, #0
   129d0:	movne	r3, #0
   129d4:	strbne	r3, [r7, #2620]	; 0xa3c
   129d8:	ldr	r3, [pc, #2104]	; 13218 <__assert_fail@plt+0x108c>
   129dc:	add	r3, pc, r3
   129e0:	ldr	r2, [r3, #464]	; 0x1d0
   129e4:	sub	r2, r2, #1
   129e8:	cmp	r2, #1
   129ec:	bls	13aec <__assert_fail@plt+0x1960>
   129f0:	ldr	r3, [pc, #2084]	; 1321c <__assert_fail@plt+0x1090>
   129f4:	add	r3, pc, r3
   129f8:	ldr	r3, [r3, #508]	; 0x1fc
   129fc:	cmp	r3, #0
   12a00:	beq	13898 <__assert_fail@plt+0x170c>
   12a04:	ldr	r3, [pc, #2068]	; 13220 <__assert_fail@plt+0x1094>
   12a08:	ldr	r9, [pc, #2068]	; 13224 <__assert_fail@plt+0x1098>
   12a0c:	ldr	r3, [r5, r3]
   12a10:	add	r9, pc, r9
   12a14:	ldr	r6, [r3]
   12a18:	ldrb	r3, [r9, #2613]	; 0xa35
   12a1c:	cmp	r3, #0
   12a20:	bne	13950 <__assert_fail@plt+0x17c4>
   12a24:	ldr	r3, [pc, #2044]	; 13228 <__assert_fail@plt+0x109c>
   12a28:	add	r3, pc, r3
   12a2c:	ldr	r2, [r3, #2692]	; 0xa84
   12a30:	cmp	r2, #1
   12a34:	beq	13ab8 <__assert_fail@plt+0x192c>
   12a38:	ldr	r7, [pc, #2028]	; 1322c <__assert_fail@plt+0x10a0>
   12a3c:	add	r7, pc, r7
   12a40:	ldrb	r3, [r7, #2776]	; 0xad8
   12a44:	cmp	r3, #0
   12a48:	bne	13a58 <__assert_fail@plt+0x18cc>
   12a4c:	ldr	r3, [pc, #2012]	; 13230 <__assert_fail@plt+0x10a4>
   12a50:	add	r3, pc, r3
   12a54:	ldr	r2, [r3, #64]	; 0x40
   12a58:	cmp	r2, #4
   12a5c:	cmpne	r2, #2
   12a60:	bne	13854 <__assert_fail@plt+0x16c8>
   12a64:	ldr	r3, [pc, #1992]	; 13234 <__assert_fail@plt+0x10a8>
   12a68:	mov	r2, #1
   12a6c:	add	r3, pc, r3
   12a70:	strb	r2, [r3, #2696]	; 0xa88
   12a74:	mov	r2, #0
   12a78:	ldr	r7, [pc, #1976]	; 13238 <__assert_fail@plt+0x10ac>
   12a7c:	add	r7, pc, r7
   12a80:	ldrb	r3, [r7, #2620]	; 0xa3c
   12a84:	strb	r2, [r7, #2697]	; 0xa89
   12a88:	cmp	r3, #0
   12a8c:	bne	13e08 <__assert_fail@plt+0x1c7c>
   12a90:	ldr	r7, [pc, #1956]	; 1323c <__assert_fail@plt+0x10b0>
   12a94:	movw	r0, #13600	; 0x3520
   12a98:	mov	r3, #100	; 0x64
   12a9c:	rsb	r9, r6, r4
   12aa0:	add	r7, pc, r7
   12aa4:	str	r3, [r7, #2688]	; 0xa80
   12aa8:	bl	21dcc <close_stdout@@Base+0x6b50>
   12aac:	mov	r3, #0
   12ab0:	str	r3, [r7, #8]
   12ab4:	str	r0, [r7, #68]	; 0x44
   12ab8:	bl	14e60 <__assert_fail@plt+0x2cd4>
   12abc:	cmp	r9, #0
   12ac0:	ble	13e54 <__assert_fail@plt+0x1cc8>
   12ac4:	sub	r7, r6, #-1073741823	; 0xc0000001
   12ac8:	ldr	r8, [pc, #1904]	; 13240 <__assert_fail@plt+0x10b4>
   12acc:	add	r7, fp, r7, lsl #2
   12ad0:	add	r8, pc, r8
   12ad4:	add	r6, r6, #1
   12ad8:	ldr	r0, [r7, #4]!
   12adc:	mov	r1, #10
   12ae0:	mov	r2, #1
   12ae4:	mov	r3, r8
   12ae8:	bl	18668 <__assert_fail@plt+0x64dc>
   12aec:	cmp	r4, r6
   12af0:	bgt	12ad4 <__assert_fail@plt+0x948>
   12af4:	ldr	r4, [pc, #1864]	; 13244 <__assert_fail@plt+0x10b8>
   12af8:	add	r4, pc, r4
   12afc:	ldr	r3, [r4, #8]
   12b00:	cmp	r3, #0
   12b04:	bne	13d90 <__assert_fail@plt+0x1c04>
   12b08:	cmp	r9, #1
   12b0c:	ble	14454 <__assert_fail@plt+0x22c8>
   12b10:	ldr	r6, [pc, #1840]	; 13248 <__assert_fail@plt+0x10bc>
   12b14:	mov	r8, #1
   12b18:	ldr	r7, [pc, #1836]	; 1324c <__assert_fail@plt+0x10c0>
   12b1c:	add	r6, pc, r6
   12b20:	ldr	r9, [pc, #1832]	; 13250 <__assert_fail@plt+0x10c4>
   12b24:	add	sl, r6, #2720	; 0xaa0
   12b28:	add	r7, pc, r7
   12b2c:	add	r9, pc, r9
   12b30:	add	sl, sl, #12
   12b34:	b	12b60 <__assert_fail@plt+0x9d4>
   12b38:	ldr	r1, [r4, #4]
   12b3c:	ldrb	r2, [r4, #8]
   12b40:	bl	19530 <__assert_fail@plt+0x73a4>
   12b44:	ldr	r0, [r4]
   12b48:	bl	11ce8 <free@plt>
   12b4c:	ldr	r0, [r4, #4]
   12b50:	bl	11ce8 <free@plt>
   12b54:	mov	r0, r4
   12b58:	bl	11ce8 <free@plt>
   12b5c:	strb	r8, [r7, #2777]	; 0xad9
   12b60:	ldr	r4, [r6, #4]
   12b64:	cmp	r4, #0
   12b68:	beq	13bb4 <__assert_fail@plt+0x1a28>
   12b6c:	ldr	r2, [r6, #472]	; 0x1d8
   12b70:	ldr	r3, [r4, #12]
   12b74:	cmp	r2, #0
   12b78:	ldr	r0, [r4]
   12b7c:	str	r3, [r6, #4]
   12b80:	beq	12b38 <__assert_fail@plt+0x9ac>
   12b84:	cmp	r0, #0
   12b88:	bne	12b38 <__assert_fail@plt+0x9ac>
   12b8c:	ldr	r3, [r6, #2744]	; 0xab8
   12b90:	ldr	r2, [r6, #2740]	; 0xab4
   12b94:	rsb	r2, r2, r3
   12b98:	cmp	r2, #15
   12b9c:	bls	14630 <__assert_fail@plt+0x24a4>
   12ba0:	ldr	r2, [r6, #2748]	; 0xabc
   12ba4:	rsb	r3, r3, r2
   12ba8:	cmn	r3, #16
   12bac:	bge	12bbc <__assert_fail@plt+0xa30>
   12bb0:	mov	r0, sl
   12bb4:	mvn	r1, #15
   12bb8:	bl	11d54 <_obstack_newchunk@plt>
   12bbc:	ldr	r3, [r9, #2744]	; 0xab8
   12bc0:	ldr	ip, [sp, #20]
   12bc4:	sub	r3, r3, #16
   12bc8:	str	r3, [r9, #2744]	; 0xab8
   12bcc:	ldm	r3, {r0, r1, r2, r3}
   12bd0:	stm	ip, {r0, r1, r2, r3}
   12bd4:	mov	r1, ip
   12bd8:	ldr	r0, [r9, #472]	; 0x1d8
   12bdc:	bl	1cbc0 <close_stdout@@Base+0x1944>
   12be0:	cmp	r0, #0
   12be4:	beq	14484 <__assert_fail@plt+0x22f8>
   12be8:	bl	11ce8 <free@plt>
   12bec:	ldr	r0, [r4]
   12bf0:	bl	11ce8 <free@plt>
   12bf4:	ldr	r0, [r4, #4]
   12bf8:	bl	11ce8 <free@plt>
   12bfc:	mov	r0, r4
   12c00:	bl	11ce8 <free@plt>
   12c04:	b	12b60 <__assert_fail@plt+0x9d4>
   12c08:	mov	r7, #1
   12c0c:	b	1242c <__assert_fail@plt+0x2a0>
   12c10:	ldr	r3, [pc, #1596]	; 13254 <__assert_fail@plt+0x10c8>
   12c14:	mov	r2, #1
   12c18:	add	r3, pc, r3
   12c1c:	strb	r2, [r3, #504]	; 0x1f8
   12c20:	b	1242c <__assert_fail@plt+0x2a0>
   12c24:	ldr	r1, [pc, #1580]	; 13258 <__assert_fail@plt+0x10cc>
   12c28:	mov	r0, #520	; 0x208
   12c2c:	ldr	ip, [pc, #1576]	; 1325c <__assert_fail@plt+0x10d0>
   12c30:	mov	r2, #1
   12c34:	add	r1, pc, r1
   12c38:	mov	r3, #0
   12c3c:	add	ip, pc, ip
   12c40:	strd	r2, [r1, r0]
   12c44:	mov	r0, #176	; 0xb0
   12c48:	strd	r2, [ip, #8]
   12c4c:	str	r0, [r1, #516]	; 0x204
   12c50:	str	r0, [r1, #2676]	; 0xa74
   12c54:	b	1242c <__assert_fail@plt+0x2a0>
   12c58:	ldr	r1, [pc, #1536]	; 13260 <__assert_fail@plt+0x10d4>
   12c5c:	mov	r3, #0
   12c60:	ldr	r2, [pc, #1532]	; 13264 <__assert_fail@plt+0x10d8>
   12c64:	add	r1, pc, r1
   12c68:	add	r2, pc, r2
   12c6c:	str	r3, [r1, #508]	; 0x1fc
   12c70:	strb	r3, [r2, #2]
   12c74:	b	1242c <__assert_fail@plt+0x2a0>
   12c78:	ldr	r8, [pc, #1512]	; 13268 <__assert_fail@plt+0x10dc>
   12c7c:	mov	r1, #2
   12c80:	mvn	r3, #0
   12c84:	add	r8, pc, r8
   12c88:	ldr	r2, [r8, #508]	; 0x1fc
   12c8c:	str	r1, [r8, #2828]	; 0xb0c
   12c90:	cmp	r2, #0
   12c94:	str	r3, [r8, #64]	; 0x40
   12c98:	beq	13e80 <__assert_fail@plt+0x1cf4>
   12c9c:	ldr	r3, [pc, #1480]	; 1326c <__assert_fail@plt+0x10e0>
   12ca0:	mov	r2, #0
   12ca4:	mov	ip, #1
   12ca8:	str	ip, [sp, #32]
   12cac:	add	r3, pc, r3
   12cb0:	strb	r2, [r3, #512]	; 0x200
   12cb4:	strb	r2, [r3, #2613]	; 0xa35
   12cb8:	b	1242c <__assert_fail@plt+0x2a0>
   12cbc:	ldr	r3, [pc, #1452]	; 13270 <__assert_fail@plt+0x10e4>
   12cc0:	mov	r2, #1
   12cc4:	add	r3, pc, r3
   12cc8:	strb	r2, [r3, #2728]	; 0xaa8
   12ccc:	b	1242c <__assert_fail@plt+0x2a0>
   12cd0:	ldr	r3, [pc, #1436]	; 13274 <__assert_fail@plt+0x10e8>
   12cd4:	mov	r1, #1
   12cd8:	mov	r2, #5
   12cdc:	add	r3, pc, r3
   12ce0:	str	r1, [r3, #2624]	; 0xa40
   12ce4:	str	r2, [r3, #508]	; 0x1fc
   12ce8:	b	1242c <__assert_fail@plt+0x2a0>
   12cec:	ldr	r2, [pc, #1412]	; 13278 <__assert_fail@plt+0x10ec>
   12cf0:	mov	r3, #1
   12cf4:	str	r3, [sp, #32]
   12cf8:	add	r2, pc, r2
   12cfc:	str	r3, [r2, #64]	; 0x40
   12d00:	b	1242c <__assert_fail@plt+0x2a0>
   12d04:	ldr	r3, [pc, #1392]	; 1327c <__assert_fail@plt+0x10f0>
   12d08:	mvn	r2, #0
   12d0c:	mov	ip, #1
   12d10:	str	ip, [sp, #32]
   12d14:	add	r3, pc, r3
   12d18:	str	r2, [r3, #64]	; 0x40
   12d1c:	b	1242c <__assert_fail@plt+0x2a0>
   12d20:	ldr	r0, [pc, #1600]	; 13368 <__assert_fail@plt+0x11dc>
   12d24:	mov	r8, #0
   12d28:	mov	r1, r8
   12d2c:	mov	r2, r8
   12d30:	ldr	r3, [sp, #20]
   12d34:	ldr	r0, [r5, r0]
   12d38:	str	r8, [sp]
   12d3c:	str	r0, [sp, #36]	; 0x24
   12d40:	ldr	r0, [r0]
   12d44:	bl	22038 <close_stdout@@Base+0x6dbc>
   12d48:	cmp	r0, r8
   12d4c:	bne	13e9c <__assert_fail@plt+0x1d10>
   12d50:	ldr	r3, [pc, #1320]	; 13280 <__assert_fail@plt+0x10f4>
   12d54:	ldr	r2, [sp, #48]	; 0x30
   12d58:	add	r3, pc, r3
   12d5c:	str	r2, [r3, #476]	; 0x1dc
   12d60:	b	1242c <__assert_fail@plt+0x2a0>
   12d64:	mov	r0, #0
   12d68:	mov	r1, #5
   12d6c:	bl	1f94c <close_stdout@@Base+0x46d0>
   12d70:	b	1242c <__assert_fail@plt+0x2a0>
   12d74:	ldr	r3, [pc, #1288]	; 13284 <__assert_fail@plt+0x10f8>
   12d78:	mov	r2, #1
   12d7c:	add	r3, pc, r3
   12d80:	str	r2, [r3, #464]	; 0x1d0
   12d84:	b	1242c <__assert_fail@plt+0x2a0>
   12d88:	ldr	r3, [pc, #1272]	; 13288 <__assert_fail@plt+0x10fc>
   12d8c:	mov	r2, #2
   12d90:	add	r3, pc, r3
   12d94:	str	r2, [r3, #2828]	; 0xb0c
   12d98:	b	1242c <__assert_fail@plt+0x2a0>
   12d9c:	ldr	r3, [pc, #1256]	; 1328c <__assert_fail@plt+0x1100>
   12da0:	mov	r2, #2
   12da4:	mov	ip, #1
   12da8:	str	ip, [sp, #32]
   12dac:	add	r3, pc, r3
   12db0:	str	r2, [r3, #64]	; 0x40
   12db4:	b	1242c <__assert_fail@plt+0x2a0>
   12db8:	ldr	r3, [pc, #1232]	; 13290 <__assert_fail@plt+0x1104>
   12dbc:	mov	r2, #1
   12dc0:	add	r3, pc, r3
   12dc4:	strb	r2, [r3, #2776]	; 0xad8
   12dc8:	b	1242c <__assert_fail@plt+0x2a0>
   12dcc:	mov	r0, #0
   12dd0:	mov	r1, #3
   12dd4:	bl	1f94c <close_stdout@@Base+0x46d0>
   12dd8:	b	1242c <__assert_fail@plt+0x2a0>
   12ddc:	mov	r0, #0
   12de0:	mov	r1, r0
   12de4:	bl	1f94c <close_stdout@@Base+0x46d0>
   12de8:	b	1242c <__assert_fail@plt+0x2a0>
   12dec:	ldr	r3, [pc, #1184]	; 13294 <__assert_fail@plt+0x1108>
   12df0:	mov	r2, #5
   12df4:	add	r3, pc, r3
   12df8:	str	r2, [r3, #2692]	; 0xa84
   12dfc:	b	1242c <__assert_fail@plt+0x2a0>
   12e00:	ldr	r3, [pc, #1376]	; 13368 <__assert_fail@plt+0x11dc>
   12e04:	mov	r0, #8
   12e08:	ldr	r3, [r5, r3]
   12e0c:	ldr	r8, [r3]
   12e10:	bl	21dcc <close_stdout@@Base+0x6b50>
   12e14:	ldr	r3, [pc, #1148]	; 13298 <__assert_fail@plt+0x110c>
   12e18:	add	r3, pc, r3
   12e1c:	ldr	r2, [r3, #2832]	; 0xb10
   12e20:	str	r8, [r0]
   12e24:	str	r0, [r3, #2832]	; 0xb10
   12e28:	str	r2, [r0, #4]
   12e2c:	b	1242c <__assert_fail@plt+0x2a0>
   12e30:	ldr	r3, [pc, #1124]	; 1329c <__assert_fail@plt+0x1110>
   12e34:	mov	r2, #3
   12e38:	add	r3, pc, r3
   12e3c:	str	r2, [r3, #2692]	; 0xa84
   12e40:	b	1242c <__assert_fail@plt+0x2a0>
   12e44:	ldr	r3, [pc, #1108]	; 132a0 <__assert_fail@plt+0x1114>
   12e48:	mov	r2, #0
   12e4c:	add	r3, pc, r3
   12e50:	strb	r2, [r3, #3]
   12e54:	b	1242c <__assert_fail@plt+0x2a0>
   12e58:	ldr	r3, [pc, #1092]	; 132a4 <__assert_fail@plt+0x1118>
   12e5c:	mov	r2, #3
   12e60:	add	r3, pc, r3
   12e64:	str	r2, [r3, #500]	; 0x1f4
   12e68:	b	1242c <__assert_fail@plt+0x2a0>
   12e6c:	ldr	r3, [pc, #1076]	; 132a8 <__assert_fail@plt+0x111c>
   12e70:	mov	r2, #1
   12e74:	add	r3, pc, r3
   12e78:	strb	r2, [r3, #2620]	; 0xa3c
   12e7c:	b	1242c <__assert_fail@plt+0x2a0>
   12e80:	ldr	r3, [pc, #1060]	; 132ac <__assert_fail@plt+0x1120>
   12e84:	mov	r2, #2
   12e88:	add	r3, pc, r3
   12e8c:	str	r2, [r3, #508]	; 0x1fc
   12e90:	b	1242c <__assert_fail@plt+0x2a0>
   12e94:	mov	r0, #8
   12e98:	ldr	r8, [pc, #1040]	; 132b0 <__assert_fail@plt+0x1124>
   12e9c:	bl	21dcc <close_stdout@@Base+0x6b50>
   12ea0:	ldr	r1, [pc, #1036]	; 132b4 <__assert_fail@plt+0x1128>
   12ea4:	add	r8, pc, r8
   12ea8:	add	r1, pc, r1
   12eac:	ldr	r2, [r8, #2832]	; 0xb10
   12eb0:	mov	r3, r0
   12eb4:	mov	r0, #8
   12eb8:	stm	r3, {r1, r2}
   12ebc:	str	r3, [r8, #2832]	; 0xb10
   12ec0:	bl	21dcc <close_stdout@@Base+0x6b50>
   12ec4:	ldr	r3, [r8, #2832]	; 0xb10
   12ec8:	ldr	r2, [pc, #1000]	; 132b8 <__assert_fail@plt+0x112c>
   12ecc:	add	r2, pc, r2
   12ed0:	str	r0, [r8, #2832]	; 0xb10
   12ed4:	stm	r0, {r2, r3}
   12ed8:	b	1242c <__assert_fail@plt+0x2a0>
   12edc:	ldr	r3, [pc, #984]	; 132bc <__assert_fail@plt+0x1130>
   12ee0:	add	r3, pc, r3
   12ee4:	ldr	r2, [r3, #2828]	; 0xb0c
   12ee8:	cmp	r2, #0
   12eec:	moveq	r2, #1
   12ef0:	streq	r2, [r3, #2828]	; 0xb0c
   12ef4:	b	1242c <__assert_fail@plt+0x2a0>
   12ef8:	ldr	r3, [pc, #960]	; 132c0 <__assert_fail@plt+0x1134>
   12efc:	add	r3, pc, r3
   12f00:	ldr	r2, [r3, #508]	; 0x1fc
   12f04:	cmp	r2, #0
   12f08:	movne	r2, #1
   12f0c:	strne	r2, [r3, #508]	; 0x1fc
   12f10:	b	1242c <__assert_fail@plt+0x2a0>
   12f14:	mov	r0, #0
   12f18:	bl	1a94c <__assert_fail@plt+0x87c0>
   12f1c:	ldr	ip, [sp, #28]
   12f20:	ldr	r2, [pc, #1276]	; 13424 <__assert_fail@plt+0x1298>
   12f24:	ldr	r3, [ip]
   12f28:	ldr	r2, [r5, r2]
   12f2c:	cmp	r3, #1
   12f30:	ldr	r0, [r2]
   12f34:	beq	14448 <__assert_fail@plt+0x22bc>
   12f38:	cmp	r3, #2
   12f3c:	beq	14478 <__assert_fail@plt+0x22ec>
   12f40:	ldr	r1, [pc, #892]	; 132c4 <__assert_fail@plt+0x1138>
   12f44:	add	r1, pc, r1
   12f48:	ldr	r3, [pc, #888]	; 132c8 <__assert_fail@plt+0x113c>
   12f4c:	mov	r4, #0
   12f50:	ldr	lr, [pc, #884]	; 132cc <__assert_fail@plt+0x1140>
   12f54:	ldr	ip, [pc, #884]	; 132d0 <__assert_fail@plt+0x1144>
   12f58:	ldr	r3, [r5, r3]
   12f5c:	add	lr, pc, lr
   12f60:	ldr	r2, [pc, #876]	; 132d4 <__assert_fail@plt+0x1148>
   12f64:	add	ip, pc, ip
   12f68:	str	lr, [sp]
   12f6c:	add	r2, pc, r2
   12f70:	ldr	r3, [r3]
   12f74:	str	ip, [sp, #4]
   12f78:	str	r4, [sp, #8]
   12f7c:	bl	21cbc <close_stdout@@Base+0x6a40>
   12f80:	mov	r0, r4
   12f84:	bl	11f7c <exit@plt>
   12f88:	ldr	r3, [pc, #984]	; 13368 <__assert_fail@plt+0x11dc>
   12f8c:	ldr	r3, [r5, r3]
   12f90:	ldr	r6, [r3]
   12f94:	b	1242c <__assert_fail@plt+0x2a0>
   12f98:	ldr	r1, [pc, #968]	; 13368 <__assert_fail@plt+0x11dc>
   12f9c:	mov	r0, #4
   12fa0:	ldr	r3, [pc, #928]	; 13348 <__assert_fail@plt+0x11bc>
   12fa4:	ldr	r2, [pc, #812]	; 132d8 <__assert_fail@plt+0x114c>
   12fa8:	ldr	r1, [r5, r1]
   12fac:	str	r0, [sp]
   12fb0:	add	r2, pc, r2
   12fb4:	ldr	r3, [r5, r3]
   12fb8:	add	r2, r2, #968	; 0x3c8
   12fbc:	ldr	r8, [pc, #792]	; 132dc <__assert_fail@plt+0x1150>
   12fc0:	ldr	r0, [pc, #792]	; 132e0 <__assert_fail@plt+0x1154>
   12fc4:	ldr	ip, [r3]
   12fc8:	add	r8, pc, r8
   12fcc:	ldr	r1, [r1]
   12fd0:	add	r3, r8, #204	; 0xcc
   12fd4:	add	r0, pc, r0
   12fd8:	str	ip, [sp, #4]
   12fdc:	bl	1b198 <__assert_fail@plt+0x900c>
   12fe0:	ldr	r3, [pc, #764]	; 132e4 <__assert_fail@plt+0x1158>
   12fe4:	add	r3, pc, r3
   12fe8:	add	r0, r8, r0, lsl #2
   12fec:	ldr	r2, [r0, #204]	; 0xcc
   12ff0:	str	r2, [r3, #464]	; 0x1d0
   12ff4:	b	1242c <__assert_fail@plt+0x2a0>
   12ff8:	ldr	r3, [pc, #744]	; 132e8 <__assert_fail@plt+0x115c>
   12ffc:	mov	r1, #0
   13000:	mov	r2, #5
   13004:	add	r3, pc, r3
   13008:	str	r1, [r3, #2624]	; 0xa40
   1300c:	str	r2, [r3, #508]	; 0x1fc
   13010:	b	1242c <__assert_fail@plt+0x2a0>
   13014:	ldr	r3, [pc, #720]	; 132ec <__assert_fail@plt+0x1160>
   13018:	mov	r1, #1
   1301c:	mov	r2, #0
   13020:	add	r3, pc, r3
   13024:	str	r1, [r3, #2624]	; 0xa40
   13028:	str	r2, [r3, #508]	; 0x1fc
   1302c:	b	1242c <__assert_fail@plt+0x2a0>
   13030:	ldr	r3, [pc, #696]	; 132f0 <__assert_fail@plt+0x1164>
   13034:	mov	r1, #1
   13038:	mov	r2, #5
   1303c:	add	r3, pc, r3
   13040:	str	r1, [r3, #2624]	; 0xa40
   13044:	str	r2, [r3, #508]	; 0x1fc
   13048:	b	1242c <__assert_fail@plt+0x2a0>
   1304c:	ldr	r1, [pc, #788]	; 13368 <__assert_fail@plt+0x11dc>
   13050:	mov	r0, #4
   13054:	ldr	r3, [pc, #748]	; 13348 <__assert_fail@plt+0x11bc>
   13058:	mov	ip, #1
   1305c:	str	ip, [sp, #32]
   13060:	ldr	r1, [r5, r1]
   13064:	str	r0, [sp]
   13068:	ldr	r3, [r5, r3]
   1306c:	ldr	r2, [pc, #640]	; 132f4 <__assert_fail@plt+0x1168>
   13070:	ldr	r8, [pc, #640]	; 132f8 <__assert_fail@plt+0x116c>
   13074:	ldr	ip, [r3]
   13078:	add	r2, pc, r2
   1307c:	ldr	r0, [pc, #632]	; 132fc <__assert_fail@plt+0x1170>
   13080:	add	r8, pc, r8
   13084:	add	r2, r2, #944	; 0x3b0
   13088:	ldr	r1, [r1]
   1308c:	add	r3, r8, #184	; 0xb8
   13090:	add	r0, pc, r0
   13094:	str	ip, [sp, #4]
   13098:	bl	1b198 <__assert_fail@plt+0x900c>
   1309c:	ldr	r3, [pc, #604]	; 13300 <__assert_fail@plt+0x1174>
   130a0:	add	r3, pc, r3
   130a4:	add	r0, r8, r0, lsl #2
   130a8:	ldr	r2, [r0, #184]	; 0xb8
   130ac:	str	r2, [r3, #64]	; 0x40
   130b0:	b	1242c <__assert_fail@plt+0x2a0>
   130b4:	ldr	r1, [pc, #584]	; 13304 <__assert_fail@plt+0x1178>
   130b8:	mov	r0, #520	; 0x208
   130bc:	ldr	ip, [pc, #580]	; 13308 <__assert_fail@plt+0x117c>
   130c0:	mov	r2, #1
   130c4:	add	r1, pc, r1
   130c8:	mov	r3, #0
   130cc:	add	ip, pc, ip
   130d0:	strd	r2, [r1, r0]
   130d4:	mov	r0, #144	; 0x90
   130d8:	strd	r2, [ip, #8]
   130dc:	str	r0, [r1, #516]	; 0x204
   130e0:	str	r0, [r1, #2676]	; 0xa74
   130e4:	b	1242c <__assert_fail@plt+0x2a0>
   130e8:	ldr	r3, [pc, #540]	; 1330c <__assert_fail@plt+0x1180>
   130ec:	mov	r2, #0
   130f0:	add	r3, pc, r3
   130f4:	strb	r2, [r3, #480]	; 0x1e0
   130f8:	b	1242c <__assert_fail@plt+0x2a0>
   130fc:	ldr	ip, [pc, #208]	; 131d4 <__assert_fail@plt+0x1048>
   13100:	mov	r0, #4
   13104:	ldr	r1, [pc, #572]	; 13348 <__assert_fail@plt+0x11bc>
   13108:	ldr	r3, [pc, #600]	; 13368 <__assert_fail@plt+0x11dc>
   1310c:	ldr	r2, [pc, #196]	; 131d8 <__assert_fail@plt+0x104c>
   13110:	ldr	r8, [r5, ip]
   13114:	ldr	r3, [r5, r3]
   13118:	ldr	r2, [r5, r2]
   1311c:	str	r0, [sp]
   13120:	ldr	ip, [r5, r1]
   13124:	ldr	r0, [pc, #484]	; 13310 <__assert_fail@plt+0x1184>
   13128:	ldr	r1, [r3]
   1312c:	mov	r3, r8
   13130:	ldr	ip, [ip]
   13134:	add	r0, pc, r0
   13138:	str	ip, [sp, #4]
   1313c:	bl	1b198 <__assert_fail@plt+0x900c>
   13140:	ldr	r1, [r8, r0, lsl #2]
   13144:	mov	r0, #0
   13148:	bl	1f94c <close_stdout@@Base+0x46d0>
   1314c:	b	1242c <__assert_fail@plt+0x2a0>
   13150:	ldr	r0, [pc, #496]	; 13348 <__assert_fail@plt+0x11bc>
   13154:	mov	r3, #4
   13158:	ldr	r1, [pc, #520]	; 13368 <__assert_fail@plt+0x11dc>
   1315c:	mov	r2, r9
   13160:	ldr	r8, [pc, #428]	; 13314 <__assert_fail@plt+0x1188>
   13164:	ldr	r1, [r5, r1]
   13168:	add	r8, pc, r8
   1316c:	str	r3, [sp]
   13170:	add	r3, r8, #292	; 0x124
   13174:	ldr	ip, [r5, r0]
   13178:	ldr	r0, [pc, #408]	; 13318 <__assert_fail@plt+0x118c>
   1317c:	ldr	r1, [r1]
   13180:	ldr	ip, [ip]
   13184:	add	r0, pc, r0
   13188:	str	ip, [sp, #4]
   1318c:	bl	1b198 <__assert_fail@plt+0x900c>
   13190:	ldr	r3, [pc, #388]	; 1331c <__assert_fail@plt+0x1190>
   13194:	add	r3, pc, r3
   13198:	add	r0, r8, r0, lsl #2
   1319c:	ldr	r2, [r0, #292]	; 0x124
   131a0:	str	r2, [r3, #500]	; 0x1f4
   131a4:	b	1242c <__assert_fail@plt+0x2a0>
   131a8:	andeq	r6, r2, r4, lsl lr
   131ac:	andeq	r0, r0, r0, ror #3
   131b0:	andeq	r4, r1, r8, lsl r5
   131b4:	andeq	r7, r2, r4, ror #2
   131b8:			; <UNDEFINED> instruction: 0x000145b8
   131bc:	andeq	r4, r1, ip, asr #11
   131c0:	andeq	r0, r0, r4, lsl r2
   131c4:	strdeq	r0, [r0], -r8
   131c8:	strdeq	r0, [r0], -r4
   131cc:	muleq	r2, ip, r0
   131d0:	andeq	r4, r1, r8, lsr r5
   131d4:	andeq	r0, r0, r8, lsl #4
   131d8:	andeq	r0, r0, ip, lsl #4
   131dc:	andeq	r7, r2, r4, lsl r0
   131e0:	andeq	r4, r1, r4, lsl #10
   131e4:	andeq	r6, r2, r4, asr #31
   131e8:	andeq	r4, r1, ip, ror #9
   131ec:	andeq	r6, r2, ip, lsr #31
   131f0:	strdeq	r6, [r2], -r8
   131f4:	andeq	r6, r2, ip, ror #11
   131f8:	andeq	r6, r2, r4, asr #11
   131fc:	andeq	r4, r1, r0, lsr #9
   13200:	andeq	r6, r2, ip, ror #20
   13204:	andeq	r6, r2, r8, asr sl
   13208:	andeq	r6, r2, r0, lsr sl
   1320c:	andeq	r6, r2, r0, lsl sl
   13210:	andeq	r4, r1, r4, rrx
   13214:			; <UNDEFINED> instruction: 0x000269bc
   13218:	andeq	r6, r2, ip, lsl #19
   1321c:	andeq	r6, r2, r4, ror r9
   13220:	andeq	r0, r0, r4, ror #3
   13224:	andeq	r6, r2, r8, asr r9
   13228:	andeq	r6, r2, r0, asr #18
   1322c:	andeq	r6, r2, ip, lsr #18
   13230:	andeq	r6, r2, r8, lsl r9
   13234:	strdeq	r6, [r2], -ip
   13238:	andeq	r6, r2, ip, ror #17
   1323c:	andeq	r6, r2, r8, asr #17
   13240:	andeq	r3, r1, r0, lsl #26
   13244:	andeq	r6, r2, r0, ror r8
   13248:	andeq	r6, r2, ip, asr #16
   1324c:	andeq	r6, r2, r0, asr #16
   13250:	andeq	r6, r2, ip, lsr r8
   13254:	andeq	r6, r2, r0, asr r7
   13258:	andeq	r6, r2, r4, lsr r7
   1325c:	strdeq	r6, [r2], -r4
   13260:	andeq	r6, r2, r4, lsl #14
   13264:	andeq	r6, r2, r8, asr #11
   13268:	andeq	r6, r2, r4, ror #13
   1326c:			; <UNDEFINED> instruction: 0x000266bc
   13270:	andeq	r6, r2, r4, lsr #13
   13274:	andeq	r6, r2, ip, lsl #13
   13278:	andeq	r6, r2, r0, ror r6
   1327c:	andeq	r6, r2, r4, asr r6
   13280:	andeq	r6, r2, r0, lsl r6
   13284:	andeq	r6, r2, ip, ror #11
   13288:	ldrdeq	r6, [r2], -r8
   1328c:			; <UNDEFINED> instruction: 0x000265bc
   13290:	andeq	r6, r2, r8, lsr #11
   13294:	andeq	r6, r2, r4, ror r5
   13298:	andeq	r6, r2, r0, asr r5
   1329c:	andeq	r6, r2, r0, lsr r5
   132a0:	andeq	r6, r2, r4, ror #7
   132a4:	andeq	r6, r2, r8, lsl #10
   132a8:	strdeq	r6, [r2], -r4
   132ac:	andeq	r6, r2, r0, ror #9
   132b0:	andeq	r6, r2, r4, asr #9
   132b4:	andeq	r3, r1, r4, lsl #21
   132b8:	andeq	r3, r1, r4, ror #20
   132bc:	andeq	r6, r2, r8, lsl #9
   132c0:	andeq	r6, r2, ip, ror #8
   132c4:	muleq	r1, r4, r8
   132c8:	andeq	r0, r0, r8, ror #3
   132cc:	andeq	r3, r1, r8, lsr sl
   132d0:	andeq	r3, r1, r4, asr #20
   132d4:	andeq	r3, r1, r0, lsr #15
   132d8:	andeq	r5, r2, r0, asr sl
   132dc:	muleq	r1, r8, r5
   132e0:	andeq	r3, r1, r0, lsl #19
   132e4:	andeq	r6, r2, r4, lsl #7
   132e8:	andeq	r6, r2, r4, ror #6
   132ec:	andeq	r6, r2, r8, asr #6
   132f0:	andeq	r6, r2, ip, lsr #6
   132f4:	andeq	r5, r2, r8, lsl #19
   132f8:	andeq	r1, r1, r0, ror #9
   132fc:			; <UNDEFINED> instruction: 0x000138bc
   13300:	andeq	r6, r2, r8, asr #5
   13304:	andeq	r6, r2, r4, lsr #5
   13308:	andeq	r6, r2, r4, ror #2
   1330c:	andeq	r6, r2, r8, ror r2
   13310:	andeq	r3, r1, r0, asr r8
   13314:	strdeq	r1, [r1], -r8
   13318:	andeq	r3, r1, ip, ror #15
   1331c:	ldrdeq	r6, [r2], -r4
   13320:	andeq	r5, r2, r4, ror #28
   13324:	andeq	r5, r2, r0, asr #28
   13328:	andeq	r5, r2, r8, lsr #28
   1332c:	muleq	r1, ip, r2
   13330:	muleq	r2, r8, r4
   13334:	andeq	r0, r1, r0, ror #31
   13338:	ldrdeq	r3, [r1], -r0
   1333c:	andeq	r5, r2, ip, asr #27
   13340:			; <UNDEFINED> instruction: 0x00025db0
   13344:	muleq	r2, ip, sp
   13348:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1334c:	andeq	r0, r1, ip, asr pc
   13350:	andeq	r3, r1, r4, asr r3
   13354:	andeq	r5, r2, r8, lsr #26
   13358:	andeq	r5, r2, ip, lsl #26
   1335c:	muleq	r2, ip, fp
   13360:			; <UNDEFINED> instruction: 0x00025cbc
   13364:	andeq	r5, r2, r8, lsr #25
   13368:	andeq	r0, r0, r8, lsr #4
   1336c:	andeq	r3, r1, r0, lsl #4
   13370:	andeq	r5, r2, r0, lsr #24
   13374:	andeq	r5, r2, r4, lsl #24
   13378:	strdeq	r5, [r2], -r0
   1337c:	ldrdeq	r5, [r2], -r4
   13380:	andeq	r5, r2, r0, asr #23
   13384:	andeq	r5, r2, ip, lsr #23
   13388:	muleq	r2, r8, fp
   1338c:	andeq	r5, r2, r4, lsl #23
   13390:	andeq	r5, r2, ip, ror #22
   13394:	andeq	r5, r2, r0, lsr sl
   13398:	andeq	r5, r2, ip, asr #22
   1339c:	andeq	r5, r2, r4, lsr fp
   133a0:	andeq	r5, r2, r0, lsr #22
   133a4:			; <UNDEFINED> instruction: 0x00010cbc
   133a8:	andeq	r5, r2, r8, lsl #2
   133ac:	andeq	r3, r1, r4, lsl #2
   133b0:	andeq	r3, r1, r4, lsl #3
   133b4:	strdeq	r5, [r2], -r0
   133b8:	andeq	r5, r2, ip, lsr #19
   133bc:	muleq	r2, r0, r9
   133c0:	ldrdeq	r2, [r1], -r0
   133c4:	andeq	r5, r2, r4, asr r9
   133c8:	andeq	r5, r2, r8, lsl r8
   133cc:	andeq	r5, r2, r4, lsr #18
   133d0:	ldrdeq	r0, [r0], -r8
   133d4:	andeq	r0, r0, r4, asr sp
   133d8:	andeq	r0, r0, r8, ror #26
   133dc:	andeq	r2, r1, r0, lsl sp
   133e0:	muleq	r1, r0, ip
   133e4:	andeq	r5, r2, r8, ror r6
   133e8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   133ec:	andeq	r5, r2, r0, asr #12
   133f0:	andeq	r5, r2, r8, lsr r7
   133f4:	andeq	r0, r1, ip, lsr #18
   133f8:	andeq	r5, r2, r4, ror #13
   133fc:	andeq	r5, r2, r0, asr #13
   13400:	andeq	r5, r2, ip, lsr #13
   13404:	muleq	r2, r8, r6
   13408:	andeq	r0, r1, r0, ror #16
   1340c:	andeq	r2, r1, r0, asr #29
   13410:	ldrdeq	r0, [r1], -r4
   13414:	andeq	r2, r1, r8, lsl #23
   13418:	andeq	r5, r2, r0, lsl r6
   1341c:	andeq	r5, r2, r8, ror #11
   13420:	andeq	r5, r2, r4, asr #11
   13424:	andeq	r0, r0, r0, lsl r2
   13428:	andeq	r5, r2, r4, ror r5
   1342c:	strdeq	r0, [r0], -ip
   13430:	ldrdeq	r0, [r0], -ip
   13434:	andeq	r2, r1, ip, ror ip
   13438:	andeq	r2, r1, ip, asr r9
   1343c:	andeq	r2, r1, ip, lsl #21
   13440:	andeq	r5, r2, r4, lsl #9
   13444:	andeq	r2, r1, r0, ror #23
   13448:	andeq	r2, r1, r4, ror sl
   1344c:	andeq	r5, r2, r0, lsr #5
   13450:	andeq	r5, r2, ip, lsl #5
   13454:	andeq	r0, r1, r8, lsl #16
   13458:	andeq	r5, r2, r4, lsl #7
   1345c:	andeq	r5, r2, ip, ror r3
   13460:	andeq	r2, r1, r8, lsl #20
   13464:	andeq	r2, r1, r4, ror #22
   13468:	andeq	r2, r1, r4, lsl fp
   1346c:	andeq	r5, r2, ip, asr r1
   13470:	andeq	r5, r2, r4, ror #4
   13474:	andeq	r4, r2, ip, ror #17
   13478:	andeq	r5, r2, ip, ror #1
   1347c:	andeq	r2, r1, ip, lsr #18
   13480:	ldrdeq	r5, [r2], -r4
   13484:	andeq	r0, r1, r0, asr r6
   13488:	muleq	r2, ip, r0
   1348c:	andeq	r5, r2, ip, rrx
   13490:			; <UNDEFINED> instruction: 0x000128b8
   13494:	andeq	r2, r1, r0, asr #17
   13498:	andeq	r5, r2, r8, asr #32
   1349c:	andeq	r2, r1, r0, ror r8
   134a0:	andeq	r2, r1, r4, ror #19
   134a4:	andeq	r5, r2, ip, lsr r1
   134a8:	andeq	r5, r2, r0, lsl #2
   134ac:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   134b0:	andeq	r2, r1, r8, asr r8
   134b4:	andeq	r5, r2, r8, asr #1
   134b8:	andeq	r4, r2, ip, lsl #31
   134bc:	andeq	r2, r1, r0, lsl #15
   134c0:	andeq	r2, r1, r8, ror r7
   134c4:	andeq	r0, r0, ip, lsl #4
   134c8:	andeq	r2, r1, ip, ror #14
   134cc:	andeq	r2, r1, r8, lsl #7
   134d0:	andeq	r4, r2, r0, lsl pc
   134d4:			; <UNDEFINED> instruction: 0x000129b8
   134d8:	andeq	r0, r1, ip, asr #1
   134dc:	ldrdeq	r2, [r1], -ip
   134e0:	andeq	r0, r1, r0, asr #4
   134e4:	andeq	r2, r1, ip, lsr #10
   134e8:	andeq	r2, r1, ip, lsr #6
   134ec:	strdeq	r2, [r1], -ip
   134f0:	mov	r0, #8
   134f4:	bl	21dcc <close_stdout@@Base+0x6b50>
   134f8:	ldr	r2, [pc, #-408]	; 13368 <__assert_fail@plt+0x11dc>
   134fc:	ldr	r3, [pc, #-484]	; 13320 <__assert_fail@plt+0x1194>
   13500:	ldr	r1, [r5, r2]
   13504:	add	r3, pc, r3
   13508:	ldr	r2, [r3, #2836]	; 0xb14
   1350c:	str	r0, [r3, #2836]	; 0xb14
   13510:	ldr	r3, [r1]
   13514:	str	r2, [r0, #4]
   13518:	str	r3, [r0]
   1351c:	b	1242c <__assert_fail@plt+0x2a0>
   13520:	ldr	r3, [pc, #-516]	; 13324 <__assert_fail@plt+0x1198>
   13524:	mov	r2, #1
   13528:	add	r3, pc, r3
   1352c:	strb	r2, [r3, #469]	; 0x1d5
   13530:	b	1242c <__assert_fail@plt+0x2a0>
   13534:	ldr	r3, [pc, #-532]	; 13328 <__assert_fail@plt+0x119c>
   13538:	mov	r2, #0
   1353c:	ldr	r6, [pc, #-536]	; 1332c <__assert_fail@plt+0x11a0>
   13540:	add	r3, pc, r3
   13544:	add	r6, pc, r6
   13548:	str	r2, [r3, #508]	; 0x1fc
   1354c:	b	1242c <__assert_fail@plt+0x2a0>
   13550:	ldr	r1, [pc, #-496]	; 13368 <__assert_fail@plt+0x11dc>
   13554:	mov	r0, #4
   13558:	ldr	r3, [pc, #-536]	; 13348 <__assert_fail@plt+0x11bc>
   1355c:	ldr	r2, [pc, #-564]	; 13330 <__assert_fail@plt+0x11a4>
   13560:	ldr	r1, [r5, r1]
   13564:	str	r0, [sp]
   13568:	add	r2, pc, r2
   1356c:	ldr	r3, [r5, r3]
   13570:	add	r2, r2, #992	; 0x3e0
   13574:	ldr	r8, [pc, #-584]	; 13334 <__assert_fail@plt+0x11a8>
   13578:	ldr	r0, [pc, #-584]	; 13338 <__assert_fail@plt+0x11ac>
   1357c:	ldr	ip, [r3]
   13580:	add	r8, pc, r8
   13584:	ldr	r1, [r1]
   13588:	add	r3, r8, #224	; 0xe0
   1358c:	add	r0, pc, r0
   13590:	str	ip, [sp, #4]
   13594:	bl	1b198 <__assert_fail@plt+0x900c>
   13598:	ldr	r3, [pc, #-612]	; 1333c <__assert_fail@plt+0x11b0>
   1359c:	add	r3, pc, r3
   135a0:	add	r0, r8, r0, lsl #2
   135a4:	ldr	r2, [r0, #224]	; 0xe0
   135a8:	str	r2, [r3, #508]	; 0x1fc
   135ac:	b	1242c <__assert_fail@plt+0x2a0>
   135b0:	ldr	r3, [pc, #-632]	; 13340 <__assert_fail@plt+0x11b4>
   135b4:	mov	r2, #2
   135b8:	add	r3, pc, r3
   135bc:	str	r2, [r3, #500]	; 0x1f4
   135c0:	b	1242c <__assert_fail@plt+0x2a0>
   135c4:	ldr	r3, [pc, #-648]	; 13344 <__assert_fail@plt+0x11b8>
   135c8:	mov	r2, #4
   135cc:	add	r3, pc, r3
   135d0:	str	r2, [r3, #2692]	; 0xa84
   135d4:	b	1242c <__assert_fail@plt+0x2a0>
   135d8:	ldr	r3, [pc, #-632]	; 13368 <__assert_fail@plt+0x11dc>
   135dc:	ldr	r3, [r5, r3]
   135e0:	ldr	r1, [r3]
   135e4:	cmp	r1, #0
   135e8:	beq	13d74 <__assert_fail@plt+0x1be8>
   135ec:	ldr	r3, [pc, #-684]	; 13348 <__assert_fail@plt+0x11bc>
   135f0:	mov	r2, #4
   135f4:	str	r2, [sp]
   135f8:	ldr	r8, [pc, #-692]	; 1334c <__assert_fail@plt+0x11c0>
   135fc:	ldr	ip, [r5, r3]
   13600:	ldr	r0, [pc, #-696]	; 13350 <__assert_fail@plt+0x11c4>
   13604:	add	r8, pc, r8
   13608:	add	r3, r8, #256	; 0x100
   1360c:	ldr	r2, [sp, #24]
   13610:	ldr	ip, [ip]
   13614:	add	r0, pc, r0
   13618:	str	ip, [sp, #4]
   1361c:	bl	1b198 <__assert_fail@plt+0x900c>
   13620:	add	r0, r8, r0, lsl #2
   13624:	ldr	r3, [r0, #256]	; 0x100
   13628:	cmp	r3, #1
   1362c:	beq	13d74 <__assert_fail@plt+0x1be8>
   13630:	cmp	r3, #2
   13634:	beq	13d64 <__assert_fail@plt+0x1bd8>
   13638:	ldr	r3, [pc, #-748]	; 13354 <__assert_fail@plt+0x11c8>
   1363c:	mov	r2, #0
   13640:	add	r3, pc, r3
   13644:	strb	r2, [r3, #2613]	; 0xa35
   13648:	b	1242c <__assert_fail@plt+0x2a0>
   1364c:	ldr	r2, [pc, #-748]	; 13368 <__assert_fail@plt+0x11dc>
   13650:	mov	r3, #520	; 0x208
   13654:	ldr	r8, [pc, #-772]	; 13358 <__assert_fail@plt+0x11cc>
   13658:	ldr	r2, [r5, r2]
   1365c:	add	r8, pc, r8
   13660:	add	r1, r8, #516	; 0x204
   13664:	str	r2, [sp, #36]	; 0x24
   13668:	add	r2, r8, r3
   1366c:	ldr	ip, [sp, #36]	; 0x24
   13670:	ldr	r0, [ip]
   13674:	str	r3, [sp, #16]
   13678:	bl	1d74c <close_stdout@@Base+0x24d0>
   1367c:	ldr	r3, [sp, #16]
   13680:	cmp	r0, #0
   13684:	bne	14654 <__assert_fail@plt+0x24c8>
   13688:	ldr	r1, [pc, #-820]	; 1335c <__assert_fail@plt+0x11d0>
   1368c:	ldr	r0, [r8, #516]	; 0x204
   13690:	ldrd	r2, [r3, r8]
   13694:	add	r1, pc, r1
   13698:	str	r0, [r8, #2676]	; 0xa74
   1369c:	strd	r2, [r1, #8]
   136a0:	b	1242c <__assert_fail@plt+0x2a0>
   136a4:	ldr	r3, [pc, #-844]	; 13360 <__assert_fail@plt+0x11d4>
   136a8:	mov	r2, #1
   136ac:	add	r3, pc, r3
   136b0:	strb	r2, [r3, #2672]	; 0xa70
   136b4:	b	1242c <__assert_fail@plt+0x2a0>
   136b8:	ldr	r3, [pc, #-860]	; 13364 <__assert_fail@plt+0x11d8>
   136bc:	mov	r2, #3
   136c0:	add	r3, pc, r3
   136c4:	str	r2, [r3, #508]	; 0x1fc
   136c8:	b	1242c <__assert_fail@plt+0x2a0>
   136cc:	ldr	ip, [pc, #-876]	; 13368 <__assert_fail@plt+0x11dc>
   136d0:	mov	r0, #0
   136d4:	mov	r1, r0
   136d8:	mov	r2, r0
   136dc:	ldr	r3, [sp, #20]
   136e0:	ldr	ip, [r5, ip]
   136e4:	str	r0, [sp]
   136e8:	ldr	r0, [ip]
   136ec:	str	ip, [sp, #36]	; 0x24
   136f0:	bl	22038 <close_stdout@@Base+0x6dbc>
   136f4:	cmp	r0, #0
   136f8:	bne	13708 <__assert_fail@plt+0x157c>
   136fc:	ldr	r3, [sp, #48]	; 0x30
   13700:	cmp	r3, #0
   13704:	bne	13744 <__assert_fail@plt+0x15b8>
   13708:	ldr	r1, [pc, #-932]	; 1336c <__assert_fail@plt+0x11e0>
   1370c:	mov	r2, #5
   13710:	mov	r0, #0
   13714:	add	r1, pc, r1
   13718:	bl	11d6c <dcgettext@plt>
   1371c:	ldr	ip, [sp, #36]	; 0x24
   13720:	mov	r8, r0
   13724:	ldr	r0, [ip]
   13728:	bl	1fc88 <close_stdout@@Base+0x4a0c>
   1372c:	mov	r2, r8
   13730:	mov	r1, #0
   13734:	mov	r3, r0
   13738:	mov	r0, #2
   1373c:	bl	11e98 <error@plt>
   13740:	ldr	r3, [sp, #48]	; 0x30
   13744:	ldr	r2, [pc, #-988]	; 13370 <__assert_fail@plt+0x11e4>
   13748:	add	r2, pc, r2
   1374c:	str	r3, [r2, #544]	; 0x220
   13750:	b	1242c <__assert_fail@plt+0x2a0>
   13754:	ldr	r3, [pc, #-1000]	; 13374 <__assert_fail@plt+0x11e8>
   13758:	mov	r2, #3
   1375c:	mov	ip, #1
   13760:	str	ip, [sp, #32]
   13764:	add	r3, pc, r3
   13768:	str	r2, [r3, #64]	; 0x40
   1376c:	b	1242c <__assert_fail@plt+0x2a0>
   13770:	ldr	r3, [pc, #-1024]	; 13378 <__assert_fail@plt+0x11ec>
   13774:	mov	r2, #2
   13778:	add	r3, pc, r3
   1377c:	str	r2, [r3, #464]	; 0x1d0
   13780:	b	1242c <__assert_fail@plt+0x2a0>
   13784:	ldr	r3, [pc, #-1040]	; 1337c <__assert_fail@plt+0x11f0>
   13788:	mov	r2, #4
   1378c:	mov	ip, #1
   13790:	str	ip, [sp, #32]
   13794:	add	r3, pc, r3
   13798:	str	r2, [r3, #64]	; 0x40
   1379c:	b	1242c <__assert_fail@plt+0x2a0>
   137a0:	ldr	r3, [pc, #-1064]	; 13380 <__assert_fail@plt+0x11f4>
   137a4:	mov	r2, #1
   137a8:	add	r3, pc, r3
   137ac:	strb	r2, [r3, #512]	; 0x200
   137b0:	b	1242c <__assert_fail@plt+0x2a0>
   137b4:	ldr	r3, [pc, #-1080]	; 13384 <__assert_fail@plt+0x11f8>
   137b8:	mov	r2, #1
   137bc:	add	r3, pc, r3
   137c0:	strb	r2, [r3, #468]	; 0x1d4
   137c4:	b	1242c <__assert_fail@plt+0x2a0>
   137c8:	ldr	r3, [pc, #-1096]	; 13388 <__assert_fail@plt+0x11fc>
   137cc:	mov	r2, #1
   137d0:	add	r3, pc, r3
   137d4:	strb	r2, [r3, #480]	; 0x1e0
   137d8:	b	1242c <__assert_fail@plt+0x2a0>
   137dc:	ldr	r3, [pc, #-1112]	; 1338c <__assert_fail@plt+0x1200>
   137e0:	mov	r2, #1
   137e4:	add	r3, pc, r3
   137e8:	str	r2, [r3, #500]	; 0x1f4
   137ec:	b	1242c <__assert_fail@plt+0x2a0>
   137f0:	ldr	r1, [pc, #-1128]	; 13390 <__assert_fail@plt+0x1204>
   137f4:	mov	r3, #0
   137f8:	ldr	r2, [pc, #-1132]	; 13394 <__assert_fail@plt+0x1208>
   137fc:	add	r1, pc, r1
   13800:	add	r2, pc, r2
   13804:	str	r3, [r1, #508]	; 0x1fc
   13808:	strb	r3, [r2, #3]
   1380c:	b	1242c <__assert_fail@plt+0x2a0>
   13810:	ldr	r3, [pc, #-1152]	; 13398 <__assert_fail@plt+0x120c>
   13814:	mov	r1, #1
   13818:	mov	r2, #0
   1381c:	add	r3, pc, r3
   13820:	strb	r1, [r3, #488]	; 0x1e8
   13824:	str	r2, [r3, #508]	; 0x1fc
   13828:	b	1242c <__assert_fail@plt+0x2a0>
   1382c:	ldr	r3, [pc, #-1176]	; 1339c <__assert_fail@plt+0x1210>
   13830:	mov	r2, #4
   13834:	add	r3, pc, r3
   13838:	str	r2, [r3, #508]	; 0x1fc
   1383c:	b	1242c <__assert_fail@plt+0x2a0>
   13840:	ldr	r3, [pc, #-1192]	; 133a0 <__assert_fail@plt+0x1214>
   13844:	mov	r2, #0
   13848:	add	r3, pc, r3
   1384c:	str	r2, [r3, #508]	; 0x1fc
   13850:	b	1242c <__assert_fail@plt+0x2a0>
   13854:	ldr	r2, [r3, #508]	; 0x1fc
   13858:	cmp	r2, #0
   1385c:	beq	12a64 <__assert_fail@plt+0x8d8>
   13860:	cmp	r2, #5
   13864:	beq	12a64 <__assert_fail@plt+0x8d8>
   13868:	ldr	r2, [r3, #2624]	; 0xa40
   1386c:	cmp	r2, #0
   13870:	bne	12a64 <__assert_fail@plt+0x8d8>
   13874:	ldrb	r2, [r3, #512]	; 0x200
   13878:	cmp	r2, #0
   1387c:	bne	12a64 <__assert_fail@plt+0x8d8>
   13880:	ldrb	r1, [r3, #2776]	; 0xad8
   13884:	strb	r2, [r3, #2696]	; 0xa88
   13888:	cmp	r1, #0
   1388c:	beq	143ac <__assert_fail@plt+0x2220>
   13890:	mov	r2, #1
   13894:	b	12a78 <__assert_fail@plt+0x8ec>
   13898:	cmp	r6, #0
   1389c:	beq	144ac <__assert_fail@plt+0x2320>
   138a0:	ldr	r8, [pc, #-1284]	; 133a4 <__assert_fail@plt+0x1218>
   138a4:	add	r8, pc, r8
   138a8:	add	r7, r8, #308	; 0x134
   138ac:	b	138c4 <__assert_fail@plt+0x1738>
   138b0:	mov	r0, #2
   138b4:	bl	1bbd4 <close_stdout@@Base+0x958>
   138b8:	cmp	r0, #0
   138bc:	beq	12a04 <__assert_fail@plt+0x878>
   138c0:	add	r6, r6, #6
   138c4:	mov	r0, r6
   138c8:	mov	r1, r7
   138cc:	mov	r2, #6
   138d0:	bl	1212c <strncmp@plt>
   138d4:	cmp	r0, #0
   138d8:	beq	138b0 <__assert_fail@plt+0x1724>
   138dc:	ldrb	r3, [r6]
   138e0:	cmp	r3, #43	; 0x2b
   138e4:	beq	13f34 <__assert_fail@plt+0x1da8>
   138e8:	ldr	r7, [pc, #-1352]	; 133a8 <__assert_fail@plt+0x121c>
   138ec:	add	r2, r8, #316	; 0x13c
   138f0:	mov	r0, r6
   138f4:	mov	r3, #4
   138f8:	add	r7, pc, r7
   138fc:	add	r7, r7, #1088	; 0x440
   13900:	mov	r1, r7
   13904:	bl	1aed4 <__assert_fail@plt+0x8d48>
   13908:	subs	r2, r0, #0
   1390c:	blt	145d0 <__assert_fail@plt+0x2444>
   13910:	cmp	r2, #3
   13914:	addls	pc, pc, r2, lsl #2
   13918:	b	13fb4 <__assert_fail@plt+0x1e28>
   1391c:	b	141f8 <__assert_fail@plt+0x206c>
   13920:	b	14154 <__assert_fail@plt+0x1fc8>
   13924:	b	141d4 <__assert_fail@plt+0x2048>
   13928:	b	14190 <__assert_fail@plt+0x2004>
   1392c:	ldr	r1, [pc, #-1416]	; 133ac <__assert_fail@plt+0x1220>
   13930:	mov	r0, r3
   13934:	mov	r2, #5
   13938:	add	r1, pc, r1
   1393c:	bl	11d6c <dcgettext@plt>
   13940:	ldr	r1, [r4]
   13944:	bl	11c4c <fputs_unlocked@plt>
   13948:	mov	r0, #2
   1394c:	bl	1a94c <__assert_fail@plt+0x87c0>
   13950:	ldr	r0, [pc, #-1448]	; 133b0 <__assert_fail@plt+0x1224>
   13954:	add	r0, pc, r0
   13958:	bl	11ed4 <getenv@plt>
   1395c:	cmp	r0, #0
   13960:	str	r0, [sp, #44]	; 0x2c
   13964:	beq	13974 <__assert_fail@plt+0x17e8>
   13968:	ldrb	r3, [r0]
   1396c:	cmp	r3, #0
   13970:	bne	140c8 <__assert_fail@plt+0x1f3c>
   13974:	ldr	r7, [pc, #-1480]	; 133b4 <__assert_fail@plt+0x1228>
   13978:	add	r7, pc, r7
   1397c:	ldrb	r3, [r7, #2613]	; 0xa35
   13980:	cmp	r3, #0
   13984:	beq	12a24 <__assert_fail@plt+0x898>
   13988:	mov	r0, #13
   1398c:	bl	14d58 <__assert_fail@plt+0x2bcc>
   13990:	cmp	r0, #0
   13994:	bne	139d0 <__assert_fail@plt+0x1844>
   13998:	mov	r0, #14
   1399c:	bl	14d58 <__assert_fail@plt+0x2bcc>
   139a0:	cmp	r0, #0
   139a4:	bne	13f18 <__assert_fail@plt+0x1d8c>
   139a8:	mov	r0, #12
   139ac:	bl	14d58 <__assert_fail@plt+0x2bcc>
   139b0:	cmp	r0, #0
   139b4:	beq	12a24 <__assert_fail@plt+0x898>
   139b8:	ldr	r3, [pc, #-1544]	; 133b8 <__assert_fail@plt+0x122c>
   139bc:	add	r3, pc, r3
   139c0:	ldr	r3, [r3, #508]	; 0x1fc
   139c4:	cmp	r3, #0
   139c8:	cmpne	r3, #5
   139cc:	bne	12a24 <__assert_fail@plt+0x898>
   139d0:	ldr	r3, [pc, #-1564]	; 133bc <__assert_fail@plt+0x1230>
   139d4:	mov	r2, #1
   139d8:	add	r3, pc, r3
   139dc:	strb	r2, [r3, #2698]	; 0xa8a
   139e0:	b	12a24 <__assert_fail@plt+0x898>
   139e4:	ldr	r0, [pc, #-1580]	; 133c0 <__assert_fail@plt+0x1234>
   139e8:	add	r0, pc, r0
   139ec:	bl	11ed4 <getenv@plt>
   139f0:	add	r1, r8, #516	; 0x204
   139f4:	add	r2, r8, #520	; 0x208
   139f8:	mov	r9, r0
   139fc:	bl	1d74c <close_stdout@@Base+0x24d0>
   13a00:	cmp	r9, #0
   13a04:	beq	144c8 <__assert_fail@plt+0x233c>
   13a08:	ldr	r1, [pc, #-1612]	; 133c4 <__assert_fail@plt+0x1238>
   13a0c:	mov	r3, #520	; 0x208
   13a10:	ldr	r0, [pc, #-1616]	; 133c8 <__assert_fail@plt+0x123c>
   13a14:	add	r1, pc, r1
   13a18:	add	r0, pc, r0
   13a1c:	ldr	ip, [r1, #516]	; 0x204
   13a20:	ldrd	r2, [r3, r1]
   13a24:	str	ip, [r1, #2676]	; 0xa74
   13a28:	strd	r2, [r0, #8]
   13a2c:	cmp	r7, #0
   13a30:	beq	1290c <__assert_fail@plt+0x780>
   13a34:	ldr	r1, [pc, #-1648]	; 133cc <__assert_fail@plt+0x1240>
   13a38:	mov	r0, #520	; 0x208
   13a3c:	mov	ip, #0
   13a40:	mov	r2, #1024	; 0x400
   13a44:	add	r1, pc, r1
   13a48:	mov	r3, #0
   13a4c:	str	ip, [r1, #516]	; 0x204
   13a50:	strd	r2, [r1, r0]
   13a54:	b	1290c <__assert_fail@plt+0x780>
   13a58:	ldr	ip, [pc, #-1680]	; 133d0 <__assert_fail@plt+0x1244>
   13a5c:	mov	r0, #30
   13a60:	ldr	r2, [pc, #-1684]	; 133d4 <__assert_fail@plt+0x1248>
   13a64:	mov	r1, #0
   13a68:	ldr	r3, [pc, #-1688]	; 133d8 <__assert_fail@plt+0x124c>
   13a6c:	add	ip, pc, ip
   13a70:	add	r2, pc, r2
   13a74:	str	ip, [sp]
   13a78:	add	r3, pc, r3
   13a7c:	bl	1c524 <close_stdout@@Base+0x12a8>
   13a80:	cmp	r0, #0
   13a84:	str	r0, [r7, #472]	; 0x1d8
   13a88:	beq	144a8 <__assert_fail@plt+0x231c>
   13a8c:	ldr	ip, [pc, #-1636]	; 13430 <__assert_fail@plt+0x12a4>
   13a90:	add	r0, r7, #2720	; 0xaa0
   13a94:	ldr	r3, [pc, #-1648]	; 1342c <__assert_fail@plt+0x12a0>
   13a98:	mov	r1, #0
   13a9c:	mov	r2, r1
   13aa0:	add	r0, r0, #12
   13aa4:	ldr	ip, [r5, ip]
   13aa8:	ldr	r3, [r5, r3]
   13aac:	str	ip, [sp]
   13ab0:	bl	11d84 <_obstack_begin@plt>
   13ab4:	b	12a4c <__assert_fail@plt+0x8c0>
   13ab8:	ldrb	r2, [r3, #2728]	; 0xaa8
   13abc:	cmp	r2, #0
   13ac0:	bne	13edc <__assert_fail@plt+0x1d50>
   13ac4:	ldr	r2, [r3, #500]	; 0x1f4
   13ac8:	cmp	r2, #3
   13acc:	beq	13edc <__assert_fail@plt+0x1d50>
   13ad0:	ldr	r2, [r3, #508]	; 0x1fc
   13ad4:	cmp	r2, #0
   13ad8:	beq	13edc <__assert_fail@plt+0x1d50>
   13adc:	cmp	r2, #5
   13ae0:	movne	r2, #4
   13ae4:	moveq	r2, #2
   13ae8:	b	13ee0 <__assert_fail@plt+0x1d54>
   13aec:	ldr	ip, [sp, #32]
   13af0:	cmp	ip, #0
   13af4:	bne	129f0 <__assert_fail@plt+0x864>
   13af8:	ldr	r2, [r3, #508]	; 0x1fc
   13afc:	cmp	r2, #0
   13b00:	beq	13898 <__assert_fail@plt+0x170c>
   13b04:	mov	r2, #4
   13b08:	str	r2, [r3, #64]	; 0x40
   13b0c:	b	129f0 <__assert_fail@plt+0x864>
   13b10:	add	ip, sp, #48	; 0x30
   13b14:	mov	r3, #0
   13b18:	mov	r1, r3
   13b1c:	str	r3, [sp]
   13b20:	mov	r2, r3
   13b24:	mov	r3, ip
   13b28:	str	ip, [sp, #20]
   13b2c:	bl	22038 <close_stdout@@Base+0x6dbc>
   13b30:	cmp	r0, #0
   13b34:	bne	13b48 <__assert_fail@plt+0x19bc>
   13b38:	ldr	r3, [sp, #48]	; 0x30
   13b3c:	cmp	r3, #0
   13b40:	strne	r3, [r6, #544]	; 0x220
   13b44:	bne	12380 <__assert_fail@plt+0x1f4>
   13b48:	ldr	r1, [pc, #-1908]	; 133dc <__assert_fail@plt+0x1250>
   13b4c:	mov	r2, #5
   13b50:	mov	r0, #0
   13b54:	add	r1, pc, r1
   13b58:	bl	11d6c <dcgettext@plt>
   13b5c:	mov	r6, r0
   13b60:	mov	r0, r7
   13b64:	bl	1fc88 <close_stdout@@Base+0x4a0c>
   13b68:	mov	r2, r6
   13b6c:	mov	r3, r0
   13b70:	mov	r0, #0
   13b74:	mov	r1, r0
   13b78:	bl	11e98 <error@plt>
   13b7c:	b	12380 <__assert_fail@plt+0x1f4>
   13b80:	ldr	r1, [pc, #-1960]	; 133e0 <__assert_fail@plt+0x1254>
   13b84:	mov	r2, #5
   13b88:	add	r1, pc, r1
   13b8c:	bl	11d6c <dcgettext@plt>
   13b90:	mov	r7, r0
   13b94:	mov	r0, r8
   13b98:	bl	1fc88 <close_stdout@@Base+0x4a0c>
   13b9c:	mov	r1, r6
   13ba0:	mov	r2, r7
   13ba4:	mov	r3, r0
   13ba8:	mov	r0, r6
   13bac:	bl	11e98 <error@plt>
   13bb0:	b	12348 <__assert_fail@plt+0x1bc>
   13bb4:	ldrb	r3, [r6, #2613]	; 0xa35
   13bb8:	cmp	r3, #0
   13bbc:	beq	13cb8 <__assert_fail@plt+0x1b2c>
   13bc0:	ldrb	r3, [r6, #2612]	; 0xa34
   13bc4:	cmp	r3, #0
   13bc8:	beq	13cb8 <__assert_fail@plt+0x1b2c>
   13bcc:	ldr	r4, [pc, #-2032]	; 133e4 <__assert_fail@plt+0x1258>
   13bd0:	add	r4, pc, r4
   13bd4:	ldr	r2, [r4]
   13bd8:	cmp	r2, #2
   13bdc:	bne	13c04 <__assert_fail@plt+0x1a78>
   13be0:	ldr	r1, [pc, #-2048]	; 133e8 <__assert_fail@plt+0x125c>
   13be4:	ldr	r0, [r4, #4]
   13be8:	add	r1, pc, r1
   13bec:	bl	11d48 <memcmp@plt>
   13bf0:	cmp	r0, #0
   13bf4:	bne	13c04 <__assert_fail@plt+0x1a78>
   13bf8:	ldr	r3, [r4, #8]
   13bfc:	cmp	r3, #1
   13c00:	beq	144e0 <__assert_fail@plt+0x2354>
   13c04:	ldr	r4, [pc, #-2080]	; 133ec <__assert_fail@plt+0x1260>
   13c08:	add	r4, pc, r4
   13c0c:	mov	r0, r4
   13c10:	bl	16868 <__assert_fail@plt+0x46dc>
   13c14:	add	r0, r4, #8
   13c18:	bl	16868 <__assert_fail@plt+0x46dc>
   13c1c:	ldr	r3, [pc, #-2048]	; 13424 <__assert_fail@plt+0x1298>
   13c20:	mov	r4, #0
   13c24:	ldr	r7, [pc, #-2108]	; 133f0 <__assert_fail@plt+0x1264>
   13c28:	ldr	r8, [pc, #-2108]	; 133f4 <__assert_fail@plt+0x1268>
   13c2c:	ldr	r3, [r5, r3]
   13c30:	add	r7, pc, r7
   13c34:	add	r8, pc, r8
   13c38:	add	r7, r7, #548	; 0x224
   13c3c:	ldr	r0, [r3]
   13c40:	bl	11dcc <fflush_unlocked@plt>
   13c44:	b	13c54 <__assert_fail@plt+0x1ac8>
   13c48:	add	r4, r4, #4
   13c4c:	cmp	r4, #48	; 0x30
   13c50:	beq	13c80 <__assert_fail@plt+0x1af4>
   13c54:	add	r3, r8, #28
   13c58:	mov	r0, r7
   13c5c:	ldr	r6, [r4, r3]
   13c60:	mov	r1, r6
   13c64:	bl	11d9c <sigismember@plt>
   13c68:	cmp	r0, #0
   13c6c:	beq	13c48 <__assert_fail@plt+0x1abc>
   13c70:	mov	r0, r6
   13c74:	mov	r1, #0
   13c78:	bl	11d30 <signal@plt>
   13c7c:	b	13c48 <__assert_fail@plt+0x1abc>
   13c80:	ldr	r3, [pc, #-2192]	; 133f8 <__assert_fail@plt+0x126c>
   13c84:	add	r3, pc, r3
   13c88:	ldr	r4, [r3, #492]	; 0x1ec
   13c8c:	b	13c9c <__assert_fail@plt+0x1b10>
   13c90:	mov	r0, #19
   13c94:	sub	r4, r4, #1
   13c98:	bl	11c70 <raise@plt>
   13c9c:	cmp	r4, #0
   13ca0:	bne	13c90 <__assert_fail@plt+0x1b04>
   13ca4:	ldr	r3, [pc, #-2224]	; 133fc <__assert_fail@plt+0x1270>
   13ca8:	ldr	r0, [pc, r3]
   13cac:	cmp	r0, #0
   13cb0:	beq	13cb8 <__assert_fail@plt+0x1b2c>
   13cb4:	bl	11c70 <raise@plt>
   13cb8:	ldr	r4, [pc, #-2240]	; 13400 <__assert_fail@plt+0x1274>
   13cbc:	add	r4, pc, r4
   13cc0:	ldrb	r3, [r4, #2620]	; 0xa3c
   13cc4:	cmp	r3, #0
   13cc8:	bne	143f4 <__assert_fail@plt+0x2268>
   13ccc:	ldr	r3, [pc, #-2256]	; 13404 <__assert_fail@plt+0x1278>
   13cd0:	add	r3, pc, r3
   13cd4:	ldr	r4, [r3, #472]	; 0x1d8
   13cd8:	cmp	r4, #0
   13cdc:	beq	13d54 <__assert_fail@plt+0x1bc8>
   13ce0:	mov	r0, r4
   13ce4:	bl	1c064 <close_stdout@@Base+0xde8>
   13ce8:	cmp	r0, #0
   13cec:	beq	13d4c <__assert_fail@plt+0x1bc0>
   13cf0:	ldr	r3, [pc, #-2288]	; 13408 <__assert_fail@plt+0x127c>
   13cf4:	mov	r2, #1536	; 0x600
   13cf8:	ldr	r0, [pc, #-2292]	; 1340c <__assert_fail@plt+0x1280>
   13cfc:	ldr	r1, [pc, #-2292]	; 13410 <__assert_fail@plt+0x1284>
   13d00:	add	r3, pc, r3
   13d04:	add	r0, pc, r0
   13d08:	add	r3, r3, #344	; 0x158
   13d0c:	add	r1, pc, r1
   13d10:	bl	1218c <__assert_fail@plt>
   13d14:	ldr	r1, [pc, #-2312]	; 13414 <__assert_fail@plt+0x1288>
   13d18:	mov	r2, #5
   13d1c:	mov	r0, r6
   13d20:	add	r1, pc, r1
   13d24:	bl	11d6c <dcgettext@plt>
   13d28:	mov	r7, r0
   13d2c:	mov	r0, r8
   13d30:	bl	1fc88 <close_stdout@@Base+0x4a0c>
   13d34:	mov	r1, r6
   13d38:	mov	r2, r7
   13d3c:	mov	r3, r0
   13d40:	mov	r0, r6
   13d44:	bl	11e98 <error@plt>
   13d48:	b	123f8 <__assert_fail@plt+0x26c>
   13d4c:	mov	r0, r4
   13d50:	bl	1c708 <close_stdout@@Base+0x148c>
   13d54:	ldr	r3, [pc, #-2372]	; 13418 <__assert_fail@plt+0x128c>
   13d58:	add	r3, pc, r3
   13d5c:	ldr	r0, [r3, #496]	; 0x1f0
   13d60:	bl	11f7c <exit@plt>
   13d64:	mov	r0, #1
   13d68:	bl	12120 <isatty@plt>
   13d6c:	cmp	r0, #0
   13d70:	beq	13638 <__assert_fail@plt+0x14ac>
   13d74:	ldr	r3, [pc, #-2400]	; 1341c <__assert_fail@plt+0x1290>
   13d78:	mov	r1, #1
   13d7c:	mov	r2, #0
   13d80:	add	r3, pc, r3
   13d84:	strb	r1, [r3, #2613]	; 0xa35
   13d88:	str	r2, [r3, #476]	; 0x1dc
   13d8c:	b	1242c <__assert_fail@plt+0x2a0>
   13d90:	bl	14ee0 <__assert_fail@plt+0x2d54>
   13d94:	ldrb	r0, [r4, #2728]	; 0xaa8
   13d98:	cmp	r0, #0
   13d9c:	beq	13f28 <__assert_fail@plt+0x1d9c>
   13da0:	ldr	r4, [pc, #-2440]	; 13420 <__assert_fail@plt+0x1294>
   13da4:	add	r4, pc, r4
   13da8:	ldr	r3, [r4, #8]
   13dac:	cmp	r3, #0
   13db0:	beq	12b08 <__assert_fail@plt+0x97c>
   13db4:	bl	17ef8 <__assert_fail@plt+0x5d6c>
   13db8:	ldr	r3, [r4, #4]
   13dbc:	cmp	r3, #0
   13dc0:	beq	12b10 <__assert_fail@plt+0x984>
   13dc4:	ldr	r3, [pc, #-2472]	; 13424 <__assert_fail@plt+0x1298>
   13dc8:	ldr	r3, [r5, r3]
   13dcc:	ldr	r0, [r3]
   13dd0:	ldr	r3, [r0, #20]
   13dd4:	ldr	r2, [r0, #24]
   13dd8:	cmp	r3, r2
   13ddc:	addcc	r1, r3, #1
   13de0:	strcc	r1, [r0, #20]
   13de4:	movcc	r2, #10
   13de8:	strbcc	r2, [r3]
   13dec:	bcs	145c4 <__assert_fail@plt+0x2438>
   13df0:	ldr	r3, [pc, #-2512]	; 13428 <__assert_fail@plt+0x129c>
   13df4:	add	r3, pc, r3
   13df8:	ldr	r2, [r3, #484]	; 0x1e4
   13dfc:	add	r2, r2, #1
   13e00:	str	r2, [r3, #484]	; 0x1e4
   13e04:	b	12b10 <__assert_fail@plt+0x984>
   13e08:	ldr	ip, [pc, #-2532]	; 1342c <__assert_fail@plt+0x12a0>
   13e0c:	mov	r1, #0
   13e10:	ldr	r3, [pc, #-2536]	; 13430 <__assert_fail@plt+0x12a4>
   13e14:	add	r0, r7, #2624	; 0xa40
   13e18:	mov	r2, r1
   13e1c:	add	r0, r0, #4
   13e20:	ldr	r8, [r5, ip]
   13e24:	ldr	r9, [r5, r3]
   13e28:	mov	r3, r8
   13e2c:	str	r9, [sp]
   13e30:	bl	11d84 <_obstack_begin@plt>
   13e34:	add	r0, r7, #2768	; 0xad0
   13e38:	mov	r1, #0
   13e3c:	str	r9, [sp]
   13e40:	mov	r3, r8
   13e44:	mov	r2, r1
   13e48:	add	r0, r0, #12
   13e4c:	bl	11d84 <_obstack_begin@plt>
   13e50:	b	12a90 <__assert_fail@plt+0x904>
   13e54:	ldrb	r1, [r7, #2728]	; 0xaa8
   13e58:	cmp	r1, #0
   13e5c:	beq	13f04 <__assert_fail@plt+0x1d78>
   13e60:	ldr	r0, [pc, #-2612]	; 13434 <__assert_fail@plt+0x12a8>
   13e64:	mov	r2, #1
   13e68:	ldr	r3, [pc, #-2616]	; 13438 <__assert_fail@plt+0x12ac>
   13e6c:	mov	r1, #3
   13e70:	add	r0, pc, r0
   13e74:	add	r3, pc, r3
   13e78:	bl	18668 <__assert_fail@plt+0x64dc>
   13e7c:	b	12af4 <__assert_fail@plt+0x968>
   13e80:	mov	r0, #1
   13e84:	bl	12120 <isatty@plt>
   13e88:	cmp	r0, #0
   13e8c:	moveq	r0, #1
   13e90:	movne	r0, #2
   13e94:	str	r0, [r8, #508]	; 0x1fc
   13e98:	b	12c9c <__assert_fail@plt+0xb10>
   13e9c:	ldr	r1, [pc, #-2664]	; 1343c <__assert_fail@plt+0x12b0>
   13ea0:	mov	r0, r8
   13ea4:	mov	r2, #5
   13ea8:	add	r1, pc, r1
   13eac:	bl	11d6c <dcgettext@plt>
   13eb0:	ldr	ip, [sp, #36]	; 0x24
   13eb4:	mov	r2, r0
   13eb8:	ldr	r0, [ip]
   13ebc:	str	r2, [sp, #16]
   13ec0:	bl	1fc88 <close_stdout@@Base+0x4a0c>
   13ec4:	ldr	r2, [sp, #16]
   13ec8:	mov	r1, r8
   13ecc:	mov	r3, r0
   13ed0:	mov	r0, #2
   13ed4:	bl	11e98 <error@plt>
   13ed8:	b	12d50 <__assert_fail@plt+0xbc4>
   13edc:	mov	r2, #2
   13ee0:	ldr	r3, [pc, #-2728]	; 13440 <__assert_fail@plt+0x12b4>
   13ee4:	add	r3, pc, r3
   13ee8:	str	r2, [r3, #2692]	; 0xa84
   13eec:	b	12a38 <__assert_fail@plt+0x8ac>
   13ef0:	ldr	r0, [r7, #528]	; 0x210
   13ef4:	mov	r1, #32
   13ef8:	mov	r2, #1
   13efc:	bl	1f974 <close_stdout@@Base+0x46f8>
   13f00:	b	12954 <__assert_fail@plt+0x7c8>
   13f04:	ldr	r0, [pc, #-2760]	; 13444 <__assert_fail@plt+0x12b8>
   13f08:	mov	r2, #1
   13f0c:	add	r0, pc, r0
   13f10:	bl	14dc8 <__assert_fail@plt+0x2c3c>
   13f14:	b	12af4 <__assert_fail@plt+0x968>
   13f18:	ldrb	r3, [r7, #2614]	; 0xa36
   13f1c:	cmp	r3, #0
   13f20:	bne	139d0 <__assert_fail@plt+0x1844>
   13f24:	b	139a8 <__assert_fail@plt+0x181c>
   13f28:	mov	r1, #1
   13f2c:	bl	15110 <__assert_fail@plt+0x2f84>
   13f30:	b	13da0 <__assert_fail@plt+0x1c14>
   13f34:	add	r6, r6, #1
   13f38:	mov	r1, #10
   13f3c:	mov	r0, r6
   13f40:	bl	11fb8 <strchr@plt>
   13f44:	subs	r8, r0, #0
   13f48:	moveq	r7, r6
   13f4c:	beq	13fa4 <__assert_fail@plt+0x1e18>
   13f50:	add	r7, r8, #1
   13f54:	mov	r1, #10
   13f58:	mov	r0, r7
   13f5c:	bl	11fb8 <strchr@plt>
   13f60:	cmp	r0, #0
   13f64:	beq	13f9c <__assert_fail@plt+0x1e10>
   13f68:	ldr	r1, [pc, #-2856]	; 13448 <__assert_fail@plt+0x12bc>
   13f6c:	mov	r2, #5
   13f70:	mov	r0, #0
   13f74:	add	r1, pc, r1
   13f78:	bl	11d6c <dcgettext@plt>
   13f7c:	mov	r9, r0
   13f80:	mov	r0, r6
   13f84:	bl	1ffac <close_stdout@@Base+0x4d30>
   13f88:	mov	r2, r9
   13f8c:	mov	r1, #0
   13f90:	mov	r3, r0
   13f94:	mov	r0, #2
   13f98:	bl	11e98 <error@plt>
   13f9c:	mov	r3, #0
   13fa0:	strb	r3, [r8]
   13fa4:	ldr	r3, [pc, #-2912]	; 1344c <__assert_fail@plt+0x12c0>
   13fa8:	add	r3, pc, r3
   13fac:	str	r6, [r3, #192]	; 0xc0
   13fb0:	str	r7, [r3, #196]	; 0xc4
   13fb4:	ldr	r3, [pc, #-2924]	; 13450 <__assert_fail@plt+0x12c4>
   13fb8:	ldr	r1, [pc, #-2924]	; 13454 <__assert_fail@plt+0x12c8>
   13fbc:	add	r3, pc, r3
   13fc0:	add	r1, pc, r1
   13fc4:	ldr	r0, [r3, #192]	; 0xc0
   13fc8:	bl	11c58 <strstr@plt>
   13fcc:	cmp	r0, #0
   13fd0:	beq	1416c <__assert_fail@plt+0x1fe0>
   13fd4:	ldr	r2, [pc, #-2948]	; 13458 <__assert_fail@plt+0x12cc>
   13fd8:	mov	r1, #26
   13fdc:	ldr	r9, [pc, #-2952]	; 1345c <__assert_fail@plt+0x12d0>
   13fe0:	movt	r1, #2
   13fe4:	add	r2, pc, r2
   13fe8:	ldr	r7, [sp, #20]
   13fec:	add	r9, pc, r9
   13ff0:	str	fp, [sp, #28]
   13ff4:	str	sl, [sp, #36]	; 0x24
   13ff8:	mov	r8, #0
   13ffc:	mov	sl, r9
   14000:	mov	fp, r1
   14004:	mov	r9, r2
   14008:	mov	r3, #5
   1400c:	str	r4, [sp, #24]
   14010:	str	r3, [r2, #676]	; 0x2a4
   14014:	str	r5, [sp, #32]
   14018:	mov	r4, #14
   1401c:	add	r5, r9, #680	; 0x2a8
   14020:	movt	r4, #2
   14024:	ldr	r6, [r9, #676]	; 0x2a4
   14028:	str	r8, [r9, #676]	; 0x2a4
   1402c:	mov	r0, r4
   14030:	str	r6, [sp, #48]	; 0x30
   14034:	bl	120b4 <nl_langinfo@plt>
   14038:	mov	r3, r7
   1403c:	str	r8, [sp]
   14040:	mov	r1, r5
   14044:	str	r8, [sp, #4]
   14048:	mov	r2, #161	; 0xa1
   1404c:	bl	1de14 <close_stdout@@Base+0x2b98>
   14050:	mov	r3, #0
   14054:	cmp	r0, #160	; 0xa0
   14058:	bhi	143d4 <__assert_fail@plt+0x2248>
   1405c:	ldr	r2, [sl, #676]	; 0x2a4
   14060:	add	r4, r4, #1
   14064:	ldr	r3, [sp, #48]	; 0x30
   14068:	add	r5, r5, #161	; 0xa1
   1406c:	cmp	r2, r3
   14070:	movcs	r3, r2
   14074:	cmp	r4, fp
   14078:	str	r3, [sl, #676]	; 0x2a4
   1407c:	bne	1402c <__assert_fail@plt+0x1ea0>
   14080:	cmp	r6, r3
   14084:	bhi	14018 <__assert_fail@plt+0x1e8c>
   14088:	cmp	r3, #0
   1408c:	ldr	r4, [sp, #24]
   14090:	ldr	fp, [sp, #28]
   14094:	ldr	r5, [sp, #32]
   14098:	ldr	sl, [sp, #36]	; 0x24
   1409c:	bne	12a04 <__assert_fail@plt+0x878>
   140a0:	ldr	r1, [pc, #-3144]	; 13460 <__assert_fail@plt+0x12d4>
   140a4:	mov	r2, #5
   140a8:	mov	r0, #0
   140ac:	add	r1, pc, r1
   140b0:	bl	11d6c <dcgettext@plt>
   140b4:	mov	r2, r0
   140b8:	mov	r0, #0
   140bc:	mov	r1, r0
   140c0:	bl	11e98 <error@plt>
   140c4:	b	12a04 <__assert_fail@plt+0x878>
   140c8:	ldr	r3, [pc, #-3180]	; 13464 <__assert_fail@plt+0x12d8>
   140cc:	add	r8, sp, #64	; 0x40
   140d0:	ldr	ip, [pc, #-3184]	; 13468 <__assert_fail@plt+0x12dc>
   140d4:	mov	r7, #0
   140d8:	add	r3, pc, r3
   140dc:	add	ip, pc, ip
   140e0:	str	ip, [sp, #32]
   140e4:	ldr	r3, [r3]
   140e8:	ldr	ip, [pc, #-3204]	; 1346c <__assert_fail@plt+0x12e0>
   140ec:	add	ip, pc, ip
   140f0:	str	ip, [sp, #36]	; 0x24
   140f4:	ldr	ip, [pc, #-3212]	; 13470 <__assert_fail@plt+0x12e4>
   140f8:	strh	r3, [sp, #64]	; 0x40
   140fc:	lsr	r3, r3, #16
   14100:	strb	r3, [r8, #2]
   14104:	add	ip, pc, ip
   14108:	str	ip, [sp, #28]
   1410c:	bl	21fc4 <close_stdout@@Base+0x6d48>
   14110:	ldr	r3, [pc, #-3236]	; 13474 <__assert_fail@plt+0x12e8>
   14114:	add	r3, pc, r3
   14118:	add	r3, r3, #1104	; 0x450
   1411c:	str	r3, [sp, #24]
   14120:	str	r0, [r9, #2840]	; 0xb18
   14124:	mov	r9, r7
   14128:	str	r0, [sp, #48]	; 0x30
   1412c:	mov	r0, r7
   14130:	cmp	r0, #5
   14134:	addls	pc, pc, r0, lsl #2
   14138:	b	122a0 <__assert_fail@plt+0x114>
   1413c:	b	14374 <__assert_fail@plt+0x21e8>
   14140:	b	142cc <__assert_fail@plt+0x2140>
   14144:	b	142f4 <__assert_fail@plt+0x2168>
   14148:	b	142ac <__assert_fail@plt+0x2120>
   1414c:	b	122a0 <__assert_fail@plt+0x114>
   14150:	b	14214 <__assert_fail@plt+0x2088>
   14154:	ldr	r3, [pc, #-3300]	; 13478 <__assert_fail@plt+0x12ec>
   14158:	ldr	r2, [pc, #-3300]	; 1347c <__assert_fail@plt+0x12f0>
   1415c:	add	r3, pc, r3
   14160:	add	r2, pc, r2
   14164:	str	r2, [r3, #196]	; 0xc4
   14168:	str	r2, [r3, #192]	; 0xc0
   1416c:	ldr	r3, [pc, #-3316]	; 13480 <__assert_fail@plt+0x12f4>
   14170:	ldr	r1, [pc, #-3316]	; 13484 <__assert_fail@plt+0x12f8>
   14174:	add	r3, pc, r3
   14178:	add	r1, pc, r1
   1417c:	ldr	r0, [r3, #196]	; 0xc4
   14180:	bl	11c58 <strstr@plt>
   14184:	cmp	r0, #0
   14188:	bne	13fd4 <__assert_fail@plt+0x1e48>
   1418c:	b	12a04 <__assert_fail@plt+0x878>
   14190:	mov	r0, #2
   14194:	bl	1bbd4 <close_stdout@@Base+0x958>
   14198:	cmp	r0, #0
   1419c:	beq	13fb4 <__assert_fail@plt+0x1e28>
   141a0:	ldr	r6, [pc, #-3360]	; 13488 <__assert_fail@plt+0x12fc>
   141a4:	mov	r2, #2
   141a8:	mov	r0, #0
   141ac:	add	r6, pc, r6
   141b0:	ldr	r1, [r6, #192]	; 0xc0
   141b4:	bl	11d6c <dcgettext@plt>
   141b8:	ldr	r1, [r6, #196]	; 0xc4
   141bc:	mov	r2, #2
   141c0:	str	r0, [r6, #192]	; 0xc0
   141c4:	mov	r0, #0
   141c8:	bl	11d6c <dcgettext@plt>
   141cc:	str	r0, [r6, #196]	; 0xc4
   141d0:	b	13fb4 <__assert_fail@plt+0x1e28>
   141d4:	ldr	r3, [pc, #-3408]	; 1348c <__assert_fail@plt+0x1300>
   141d8:	ldr	r1, [pc, #-3408]	; 13490 <__assert_fail@plt+0x1304>
   141dc:	add	r3, pc, r3
   141e0:	ldr	r2, [pc, #-3412]	; 13494 <__assert_fail@plt+0x1308>
   141e4:	add	r1, pc, r1
   141e8:	add	r2, pc, r2
   141ec:	str	r1, [r3, #192]	; 0xc0
   141f0:	str	r2, [r3, #196]	; 0xc4
   141f4:	b	13fb4 <__assert_fail@plt+0x1e28>
   141f8:	ldr	r3, [pc, #-3432]	; 13498 <__assert_fail@plt+0x130c>
   141fc:	ldr	r2, [pc, #-3432]	; 1349c <__assert_fail@plt+0x1310>
   14200:	add	r3, pc, r3
   14204:	add	r2, pc, r2
   14208:	str	r2, [r3, #196]	; 0xc4
   1420c:	str	r2, [r3, #192]	; 0xc0
   14210:	b	1416c <__assert_fail@plt+0x1fe0>
   14214:	ldr	r1, [pc, #-3452]	; 134a0 <__assert_fail@plt+0x1314>
   14218:	mov	r2, #5
   1421c:	mov	r0, #0
   14220:	ldr	r7, [pc, #-3460]	; 134a4 <__assert_fail@plt+0x1318>
   14224:	add	r1, pc, r1
   14228:	bl	11d6c <dcgettext@plt>
   1422c:	add	r7, pc, r7
   14230:	mov	r2, r0
   14234:	mov	r0, #0
   14238:	mov	r1, r0
   1423c:	bl	11e98 <error@plt>
   14240:	ldr	r0, [r7, #2840]	; 0xb18
   14244:	bl	11ce8 <free@plt>
   14248:	ldr	r0, [r7, #2616]	; 0xa38
   1424c:	b	1425c <__assert_fail@plt+0x20d0>
   14250:	ldr	r7, [r0, #16]
   14254:	bl	11ce8 <free@plt>
   14258:	mov	r0, r7
   1425c:	cmp	r0, #0
   14260:	bne	14250 <__assert_fail@plt+0x20c4>
   14264:	ldr	r3, [pc, #-3524]	; 134a8 <__assert_fail@plt+0x131c>
   14268:	add	r3, pc, r3
   1426c:	strb	r0, [r3, #2613]	; 0xa35
   14270:	ldr	r3, [pc, #-3532]	; 134ac <__assert_fail@plt+0x1320>
   14274:	add	r3, pc, r3
   14278:	ldr	r2, [r3, #56]	; 0x38
   1427c:	cmp	r2, #6
   14280:	bne	13974 <__assert_fail@plt+0x17e8>
   14284:	ldr	r1, [pc, #-3548]	; 134b0 <__assert_fail@plt+0x1324>
   14288:	ldr	r0, [r3, #60]	; 0x3c
   1428c:	add	r1, pc, r1
   14290:	bl	1212c <strncmp@plt>
   14294:	cmp	r0, #0
   14298:	ldreq	r3, [pc, #-3564]	; 134b4 <__assert_fail@plt+0x1328>
   1429c:	moveq	r2, #1
   142a0:	addeq	r3, pc, r3
   142a4:	strbeq	r2, [r3, #2614]	; 0xa36
   142a8:	b	13974 <__assert_fail@plt+0x17e8>
   142ac:	ldr	r3, [sp, #44]	; 0x2c
   142b0:	add	r2, r3, #1
   142b4:	str	r2, [sp, #44]	; 0x2c
   142b8:	ldrb	r3, [r3]
   142bc:	cmp	r3, #61	; 0x3d
   142c0:	beq	14598 <__assert_fail@plt+0x240c>
   142c4:	mov	r0, #5
   142c8:	b	14130 <__assert_fail@plt+0x1fa4>
   142cc:	ldr	r3, [sp, #44]	; 0x2c
   142d0:	ldrb	r2, [r3]
   142d4:	cmp	r2, #0
   142d8:	beq	142c4 <__assert_fail@plt+0x2138>
   142dc:	add	r2, r3, #1
   142e0:	str	r2, [sp, #44]	; 0x2c
   142e4:	ldrb	r3, [r3]
   142e8:	mov	r0, #2
   142ec:	strb	r3, [sp, #65]	; 0x41
   142f0:	b	14130 <__assert_fail@plt+0x1fa4>
   142f4:	ldr	r3, [sp, #44]	; 0x2c
   142f8:	add	r2, r3, #1
   142fc:	str	r2, [sp, #44]	; 0x2c
   14300:	ldrb	r3, [r3]
   14304:	cmp	r3, #61	; 0x3d
   14308:	moveq	r9, #0
   1430c:	bne	142c4 <__assert_fail@plt+0x2138>
   14310:	b	14328 <__assert_fail@plt+0x219c>
   14314:	mov	r0, r8
   14318:	bl	11c88 <strcmp@plt>
   1431c:	cmp	r0, #0
   14320:	beq	14558 <__assert_fail@plt+0x23cc>
   14324:	add	r9, r9, #1
   14328:	ldr	ip, [sp, #24]
   1432c:	add	r3, ip, #4
   14330:	ldr	r1, [r3, r9, lsl #2]
   14334:	cmp	r1, #0
   14338:	bne	14314 <__assert_fail@plt+0x2188>
   1433c:	ldr	r1, [sp, #32]
   14340:	mov	r2, #5
   14344:	mov	r0, #0
   14348:	bl	11d6c <dcgettext@plt>
   1434c:	mov	r9, r0
   14350:	mov	r0, r8
   14354:	bl	1fc88 <close_stdout@@Base+0x4a0c>
   14358:	mov	r2, r9
   1435c:	mov	r3, r0
   14360:	mov	r0, #0
   14364:	mov	r1, r0
   14368:	bl	11e98 <error@plt>
   1436c:	mov	r0, #5
   14370:	b	14130 <__assert_fail@plt+0x1fa4>
   14374:	ldr	r3, [sp, #44]	; 0x2c
   14378:	ldrb	r2, [r3]
   1437c:	cmp	r2, #42	; 0x2a
   14380:	beq	14500 <__assert_fail@plt+0x2374>
   14384:	cmp	r2, #58	; 0x3a
   14388:	beq	144f4 <__assert_fail@plt+0x2368>
   1438c:	cmp	r2, #0
   14390:	beq	14270 <__assert_fail@plt+0x20e4>
   14394:	add	r2, r3, #1
   14398:	str	r2, [sp, #44]	; 0x2c
   1439c:	ldrb	r3, [r3]
   143a0:	mov	r0, #1
   143a4:	strb	r3, [sp, #64]	; 0x40
   143a8:	b	14130 <__assert_fail@plt+0x1fa4>
   143ac:	ldrb	r2, [r3, #2613]	; 0xa35
   143b0:	cmp	r2, #0
   143b4:	bne	13890 <__assert_fail@plt+0x1704>
   143b8:	ldr	r2, [r3, #500]	; 0x1f4
   143bc:	cmp	r2, #0
   143c0:	bne	13890 <__assert_fail@plt+0x1704>
   143c4:	ldrb	r3, [r3, #469]	; 0x1d5
   143c8:	cmp	r3, #0
   143cc:	bne	13890 <__assert_fail@plt+0x1704>
   143d0:	b	12a74 <__assert_fail@plt+0x8e8>
   143d4:	ldr	r2, [pc, #-3876]	; 134b8 <__assert_fail@plt+0x132c>
   143d8:	ldr	r4, [sp, #24]
   143dc:	add	r2, pc, r2
   143e0:	ldr	fp, [sp, #28]
   143e4:	ldr	r5, [sp, #32]
   143e8:	ldr	sl, [sp, #36]	; 0x24
   143ec:	str	r3, [r2, #676]	; 0x2a4
   143f0:	b	140a0 <__assert_fail@plt+0x1f14>
   143f4:	ldr	r0, [pc, #-3904]	; 134bc <__assert_fail@plt+0x1330>
   143f8:	add	r1, r4, #2624	; 0xa40
   143fc:	add	r1, r1, #4
   14400:	add	r0, pc, r0
   14404:	bl	15764 <__assert_fail@plt+0x35d8>
   14408:	ldr	r0, [pc, #-3920]	; 134c0 <__assert_fail@plt+0x1334>
   1440c:	add	r1, r4, #2768	; 0xad0
   14410:	add	r1, r1, #12
   14414:	add	r0, pc, r0
   14418:	bl	15764 <__assert_fail@plt+0x35d8>
   1441c:	ldr	r0, [r4, #528]	; 0x210
   14420:	bl	1f924 <close_stdout@@Base+0x46a8>
   14424:	ldr	r3, [pc, #-3944]	; 134c4 <__assert_fail@plt+0x1338>
   14428:	ldr	r1, [pc, #-3944]	; 134c8 <__assert_fail@plt+0x133c>
   1442c:	ldr	r3, [r5, r3]
   14430:	add	r1, pc, r1
   14434:	mov	r2, r0
   14438:	mov	r0, #1
   1443c:	ldr	r2, [r3, r2, lsl #2]
   14440:	bl	1200c <__printf_chk@plt>
   14444:	b	13ccc <__assert_fail@plt+0x1b40>
   14448:	ldr	r1, [pc, #-3972]	; 134cc <__assert_fail@plt+0x1340>
   1444c:	add	r1, pc, r1
   14450:	b	12f48 <__assert_fail@plt+0xdbc>
   14454:	ldr	r2, [pc, #-3980]	; 134d0 <__assert_fail@plt+0x1344>
   14458:	add	r2, pc, r2
   1445c:	ldr	r3, [r2, #4]
   14460:	cmp	r3, #0
   14464:	beq	12b10 <__assert_fail@plt+0x984>
   14468:	ldr	r3, [r3, #12]
   1446c:	cmp	r3, #0
   14470:	strbeq	r3, [r2, #2777]	; 0xad9
   14474:	b	12b10 <__assert_fail@plt+0x984>
   14478:	ldr	r1, [pc, #-4012]	; 134d4 <__assert_fail@plt+0x1348>
   1447c:	add	r1, pc, r1
   14480:	b	12f48 <__assert_fail@plt+0xdbc>
   14484:	ldr	r3, [pc, #-4020]	; 134d8 <__assert_fail@plt+0x134c>
   14488:	movw	r2, #1484	; 0x5cc
   1448c:	ldr	r0, [pc, #-4024]	; 134dc <__assert_fail@plt+0x1350>
   14490:	ldr	r1, [pc, #-4024]	; 134e0 <__assert_fail@plt+0x1354>
   14494:	add	r3, pc, r3
   14498:	add	r0, pc, r0
   1449c:	add	r3, r3, #344	; 0x158
   144a0:	add	r1, pc, r1
   144a4:	bl	1218c <__assert_fail@plt>
   144a8:	bl	21fe0 <close_stdout@@Base+0x6d64>
   144ac:	ldr	r0, [pc, #-4048]	; 134e4 <__assert_fail@plt+0x1358>
   144b0:	add	r0, pc, r0
   144b4:	bl	11ed4 <getenv@plt>
   144b8:	subs	r6, r0, #0
   144bc:	ldreq	r6, [pc, #-4060]	; 134e8 <__assert_fail@plt+0x135c>
   144c0:	addeq	r6, pc, r6
   144c4:	b	138a0 <__assert_fail@plt+0x1714>
   144c8:	ldr	r0, [pc, #-4068]	; 134ec <__assert_fail@plt+0x1360>
   144cc:	add	r0, pc, r0
   144d0:	bl	11ed4 <getenv@plt>
   144d4:	cmp	r0, #0
   144d8:	bne	13a08 <__assert_fail@plt+0x187c>
   144dc:	b	13a2c <__assert_fail@plt+0x18a0>
   144e0:	ldr	r3, [r4, #12]
   144e4:	ldrb	r3, [r3]
   144e8:	cmp	r3, #109	; 0x6d
   144ec:	bne	13c04 <__assert_fail@plt+0x1a78>
   144f0:	b	13c1c <__assert_fail@plt+0x1a90>
   144f4:	add	r3, r3, #1
   144f8:	str	r3, [sp, #44]	; 0x2c
   144fc:	b	14130 <__assert_fail@plt+0x1fa4>
   14500:	mov	r0, #20
   14504:	bl	21dcc <close_stdout@@Base+0x6b50>
   14508:	ldr	ip, [sp, #28]
   1450c:	ldr	r2, [sp, #48]	; 0x30
   14510:	ldr	lr, [sp, #28]
   14514:	ldr	r1, [ip, #2616]	; 0xa38
   14518:	ldr	ip, [sp, #44]	; 0x2c
   1451c:	mov	r7, r0
   14520:	mov	r3, r0
   14524:	str	r1, [r7, #16]
   14528:	mov	r1, sl
   1452c:	str	r2, [r7, #4]
   14530:	mov	r2, #1
   14534:	ldr	r0, [sp, #20]
   14538:	add	ip, ip, r2
   1453c:	str	r7, [lr, #2616]	; 0xa38
   14540:	str	ip, [sp, #44]	; 0x2c
   14544:	bl	14850 <__assert_fail@plt+0x26c4>
   14548:	cmp	r0, #0
   1454c:	movne	r0, #3
   14550:	moveq	r0, #5
   14554:	b	14130 <__assert_fail@plt+0x1fa4>
   14558:	ldr	r1, [sp, #36]	; 0x24
   1455c:	mov	ip, r0
   14560:	ldr	r2, [sp, #48]	; 0x30
   14564:	add	r9, r1, r9, lsl #3
   14568:	ldr	r0, [sp, #20]
   1456c:	mov	r1, sl
   14570:	str	r2, [r9, #4]
   14574:	mov	r3, r9
   14578:	mov	r2, ip
   1457c:	str	ip, [sp, #16]
   14580:	bl	14850 <__assert_fail@plt+0x26c4>
   14584:	ldr	ip, [sp, #16]
   14588:	cmp	r0, #0
   1458c:	movne	r0, ip
   14590:	bne	14130 <__assert_fail@plt+0x1fa4>
   14594:	b	1433c <__assert_fail@plt+0x21b0>
   14598:	ldr	ip, [sp, #48]	; 0x30
   1459c:	mov	r1, sl
   145a0:	ldr	r0, [sp, #20]
   145a4:	mov	r2, #0
   145a8:	add	r3, r7, #8
   145ac:	str	ip, [r7, #12]
   145b0:	bl	14850 <__assert_fail@plt+0x26c4>
   145b4:	cmp	r0, #0
   145b8:	moveq	r0, #5
   145bc:	movne	r0, #0
   145c0:	b	14130 <__assert_fail@plt+0x1fa4>
   145c4:	mov	r1, #10
   145c8:	bl	1206c <__overflow@plt>
   145cc:	b	13df0 <__assert_fail@plt+0x1c64>
   145d0:	ldr	r0, [pc, #160]	; 14678 <__assert_fail@plt+0x24ec>
   145d4:	mov	r1, r6
   145d8:	ldr	r6, [pc, #156]	; 1467c <__assert_fail@plt+0x24f0>
   145dc:	sub	r7, r7, #4
   145e0:	add	r0, pc, r0
   145e4:	bl	1afd0 <__assert_fail@plt+0x8e44>
   145e8:	ldr	r1, [pc, #144]	; 14680 <__assert_fail@plt+0x24f4>
   145ec:	mov	r0, #0
   145f0:	mov	r2, #5
   145f4:	add	r1, pc, r1
   145f8:	add	r6, pc, r6
   145fc:	bl	11d6c <dcgettext@plt>
   14600:	ldr	r3, [pc, #124]	; 14684 <__assert_fail@plt+0x24f8>
   14604:	ldr	r4, [r5, r3]
   14608:	ldr	r1, [r4]
   1460c:	bl	11c4c <fputs_unlocked@plt>
   14610:	ldr	r3, [r7, #4]!
   14614:	cmp	r3, #0
   14618:	beq	1392c <__assert_fail@plt+0x17a0>
   1461c:	ldr	r0, [r4]
   14620:	mov	r1, #1
   14624:	mov	r2, r6
   14628:	bl	1203c <__fprintf_chk@plt>
   1462c:	b	14610 <__assert_fail@plt+0x2484>
   14630:	ldr	r3, [pc, #80]	; 14688 <__assert_fail@plt+0x24fc>
   14634:	movw	r2, #997	; 0x3e5
   14638:	ldr	r0, [pc, #76]	; 1468c <__assert_fail@plt+0x2500>
   1463c:	ldr	r1, [pc, #76]	; 14690 <__assert_fail@plt+0x2504>
   14640:	add	r3, pc, r3
   14644:	add	r0, pc, r0
   14648:	add	r3, r3, #332	; 0x14c
   1464c:	add	r1, pc, r1
   14650:	bl	1218c <__assert_fail@plt>
   14654:	ldr	r3, [sp, #36]	; 0x24
   14658:	mov	r2, #0
   1465c:	ldr	r1, [sp, #44]	; 0x2c
   14660:	ldr	ip, [r3]
   14664:	ldr	r3, [pc, #40]	; 14694 <__assert_fail@plt+0x2508>
   14668:	add	r3, pc, r3
   1466c:	str	ip, [sp]
   14670:	add	r3, r3, #224	; 0xe0
   14674:	bl	22570 <close_stdout@@Base+0x72f4>
   14678:	andeq	r2, r1, r8, lsr #8
   1467c:	andeq	r2, r1, r4, lsr r4
   14680:	andeq	r2, r1, r0, lsr #8
   14684:	andeq	r0, r0, ip, ror #3
   14688:	andeq	pc, r0, r0, lsr #30
   1468c:	andeq	r2, r1, ip, lsr #9
   14690:	muleq	r1, r4, r0
   14694:	muleq	r2, r8, r3
   14698:	mov	fp, #0
   1469c:	mov	lr, #0
   146a0:	pop	{r1}		; (ldr r1, [sp], #4)
   146a4:	mov	r2, sp
   146a8:	push	{r2}		; (str r2, [sp, #-4]!)
   146ac:	push	{r0}		; (str r0, [sp, #-4]!)
   146b0:	ldr	ip, [pc, #16]	; 146c8 <__assert_fail@plt+0x253c>
   146b4:	push	{ip}		; (str ip, [sp, #-4]!)
   146b8:	ldr	r0, [pc, #12]	; 146cc <__assert_fail@plt+0x2540>
   146bc:	ldr	r3, [pc, #12]	; 146d0 <__assert_fail@plt+0x2544>
   146c0:	bl	11f04 <__libc_start_main@plt>
   146c4:	bl	12138 <abort@plt>
   146c8:	andeq	r4, r2, r8, lsr #10
   146cc:	andeq	r2, r1, ip, asr #3
   146d0:	andeq	r4, r2, r4, asr #9
   146d4:	ldr	r3, [pc, #20]	; 146f0 <__assert_fail@plt+0x2564>
   146d8:	ldr	r2, [pc, #20]	; 146f4 <__assert_fail@plt+0x2568>
   146dc:	add	r3, pc, r3
   146e0:	ldr	r2, [r3, r2]
   146e4:	cmp	r2, #0
   146e8:	bxeq	lr
   146ec:	b	11f4c <__gmon_start__@plt>
   146f0:	andeq	r4, r2, ip, lsl r9
   146f4:	andeq	r0, r0, r0, lsl #4
   146f8:	push	{r3, lr}
   146fc:	movw	r0, #37736	; 0x9368
   14700:	ldr	r3, [pc, #36]	; 1472c <__assert_fail@plt+0x25a0>
   14704:	movt	r0, #3
   14708:	rsb	r3, r0, r3
   1470c:	cmp	r3, #6
   14710:	popls	{r3, pc}
   14714:	movw	r3, #0
   14718:	movt	r3, #0
   1471c:	cmp	r3, #0
   14720:	popeq	{r3, pc}
   14724:	blx	r3
   14728:	pop	{r3, pc}
   1472c:	andeq	r9, r3, fp, ror #6
   14730:	push	{r3, lr}
   14734:	movw	r0, #37736	; 0x9368
   14738:	movw	r3, #37736	; 0x9368
   1473c:	movt	r0, #3
   14740:	movt	r3, #3
   14744:	rsb	r3, r0, r3
   14748:	asr	r3, r3, #2
   1474c:	add	r3, r3, r3, lsr #31
   14750:	asrs	r1, r3, #1
   14754:	popeq	{r3, pc}
   14758:	movw	r2, #0
   1475c:	movt	r2, #0
   14760:	cmp	r2, #0
   14764:	popeq	{r3, pc}
   14768:	blx	r2
   1476c:	pop	{r3, pc}
   14770:	push	{r4, lr}
   14774:	movw	r4, #37736	; 0x9368
   14778:	movt	r4, #3
   1477c:	ldrb	r3, [r4]
   14780:	cmp	r3, #0
   14784:	popne	{r4, pc}
   14788:	bl	146f8 <__assert_fail@plt+0x256c>
   1478c:	mov	r3, #1
   14790:	strb	r3, [r4]
   14794:	pop	{r4, pc}
   14798:	movw	r0, #35332	; 0x8a04
   1479c:	movt	r0, #3
   147a0:	push	{r3, lr}
   147a4:	ldr	r3, [r0]
   147a8:	cmp	r3, #0
   147ac:	beq	147c4 <__assert_fail@plt+0x2638>
   147b0:	movw	r3, #0
   147b4:	movt	r3, #0
   147b8:	cmp	r3, #0
   147bc:	beq	147c4 <__assert_fail@plt+0x2638>
   147c0:	blx	r3
   147c4:	pop	{r3, lr}
   147c8:	b	14730 <__assert_fail@plt+0x25a4>
   147cc:	push	{r3, lr}
   147d0:	mov	r2, r1
   147d4:	mov	r3, #0
   147d8:	ldrd	r0, [r0]
   147dc:	bl	23af8 <close_stdout@@Base+0x887c>
   147e0:	mov	r0, r2
   147e4:	pop	{r3, pc}
   147e8:	push	{r4, r5}
   147ec:	mov	ip, r1
   147f0:	ldrd	r4, [r0]
   147f4:	ldrd	r2, [r1]
   147f8:	cmp	r5, r3
   147fc:	cmpeq	r4, r2
   14800:	movne	r0, #0
   14804:	beq	14810 <__assert_fail@plt+0x2684>
   14808:	pop	{r4, r5}
   1480c:	bx	lr
   14810:	ldrd	r0, [r0, #8]
   14814:	ldrd	r2, [ip, #8]
   14818:	pop	{r4, r5}
   1481c:	cmp	r1, r3
   14820:	cmpeq	r0, r2
   14824:	movne	r0, #0
   14828:	moveq	r0, #1
   1482c:	bx	lr
   14830:	ldr	r3, [pc, #16]	; 14848 <__assert_fail@plt+0x26bc>
   14834:	add	r3, pc, r3
   14838:	ldr	r2, [r3]
   1483c:	cmp	r2, #0
   14840:	streq	r0, [r3]
   14844:	bx	lr
   14848:	andeq	r4, r2, r4, lsr fp
   1484c:	b	11ce8 <free@plt>
   14850:	push	{r4, r5, r6, r7, r8, r9, sl}
   14854:	mov	r6, #0
   14858:	ldr	r4, [r1]
   1485c:	mov	r7, r6
   14860:	ldr	r5, [r0]
   14864:	mvn	ip, #0
   14868:	mov	r8, #127	; 0x7f
   1486c:	cmp	ip, #3
   14870:	addls	pc, pc, ip, lsl #2
   14874:	b	1499c <__assert_fail@plt+0x2810>
   14878:	b	149e4 <__assert_fail@plt+0x2858>
   1487c:	b	14978 <__assert_fail@plt+0x27ec>
   14880:	b	14888 <__assert_fail@plt+0x26fc>
   14884:	b	14bd8 <__assert_fail@plt+0x2a4c>
   14888:	ldrb	sl, [r4]
   1488c:	sub	r9, sl, #48	; 0x30
   14890:	cmp	r9, #54	; 0x36
   14894:	addls	pc, pc, r9, lsl #2
   14898:	b	14988 <__assert_fail@plt+0x27fc>
   1489c:	b	14c84 <__assert_fail@plt+0x2af8>
   148a0:	b	14c84 <__assert_fail@plt+0x2af8>
   148a4:	b	14c84 <__assert_fail@plt+0x2af8>
   148a8:	b	14c84 <__assert_fail@plt+0x2af8>
   148ac:	b	14c84 <__assert_fail@plt+0x2af8>
   148b0:	b	14c84 <__assert_fail@plt+0x2af8>
   148b4:	b	14c84 <__assert_fail@plt+0x2af8>
   148b8:	b	14c84 <__assert_fail@plt+0x2af8>
   148bc:	b	14c84 <__assert_fail@plt+0x2af8>
   148c0:	b	14c84 <__assert_fail@plt+0x2af8>
   148c4:	b	14988 <__assert_fail@plt+0x27fc>
   148c8:	b	14988 <__assert_fail@plt+0x27fc>
   148cc:	b	14988 <__assert_fail@plt+0x27fc>
   148d0:	b	14988 <__assert_fail@plt+0x27fc>
   148d4:	b	14988 <__assert_fail@plt+0x27fc>
   148d8:	b	14988 <__assert_fail@plt+0x27fc>
   148dc:	b	14988 <__assert_fail@plt+0x27fc>
   148e0:	b	14c5c <__assert_fail@plt+0x2ad0>
   148e4:	b	14c5c <__assert_fail@plt+0x2ad0>
   148e8:	b	14c5c <__assert_fail@plt+0x2ad0>
   148ec:	b	14c5c <__assert_fail@plt+0x2ad0>
   148f0:	b	14c5c <__assert_fail@plt+0x2ad0>
   148f4:	b	14c5c <__assert_fail@plt+0x2ad0>
   148f8:	b	14988 <__assert_fail@plt+0x27fc>
   148fc:	b	14988 <__assert_fail@plt+0x27fc>
   14900:	b	14988 <__assert_fail@plt+0x27fc>
   14904:	b	14988 <__assert_fail@plt+0x27fc>
   14908:	b	14988 <__assert_fail@plt+0x27fc>
   1490c:	b	14988 <__assert_fail@plt+0x27fc>
   14910:	b	14988 <__assert_fail@plt+0x27fc>
   14914:	b	14988 <__assert_fail@plt+0x27fc>
   14918:	b	14988 <__assert_fail@plt+0x27fc>
   1491c:	b	14988 <__assert_fail@plt+0x27fc>
   14920:	b	14988 <__assert_fail@plt+0x27fc>
   14924:	b	14988 <__assert_fail@plt+0x27fc>
   14928:	b	14988 <__assert_fail@plt+0x27fc>
   1492c:	b	14988 <__assert_fail@plt+0x27fc>
   14930:	b	14988 <__assert_fail@plt+0x27fc>
   14934:	b	14988 <__assert_fail@plt+0x27fc>
   14938:	b	14988 <__assert_fail@plt+0x27fc>
   1493c:	b	14988 <__assert_fail@plt+0x27fc>
   14940:	b	14988 <__assert_fail@plt+0x27fc>
   14944:	b	14988 <__assert_fail@plt+0x27fc>
   14948:	b	14988 <__assert_fail@plt+0x27fc>
   1494c:	b	14988 <__assert_fail@plt+0x27fc>
   14950:	b	14988 <__assert_fail@plt+0x27fc>
   14954:	b	14988 <__assert_fail@plt+0x27fc>
   14958:	b	14988 <__assert_fail@plt+0x27fc>
   1495c:	b	14988 <__assert_fail@plt+0x27fc>
   14960:	b	14c70 <__assert_fail@plt+0x2ae4>
   14964:	b	14c70 <__assert_fail@plt+0x2ae4>
   14968:	b	14c70 <__assert_fail@plt+0x2ae4>
   1496c:	b	14c70 <__assert_fail@plt+0x2ae4>
   14970:	b	14c70 <__assert_fail@plt+0x2ae4>
   14974:	b	14c70 <__assert_fail@plt+0x2ae4>
   14978:	ldrb	r9, [r4]
   1497c:	sub	sl, r9, #48	; 0x30
   14980:	cmp	sl, #7
   14984:	bls	14c28 <__assert_fail@plt+0x2a9c>
   14988:	strb	r7, [r5]
   1498c:	add	r6, r6, #1
   14990:	add	r5, r5, #1
   14994:	mvn	ip, #0
   14998:	b	1486c <__assert_fail@plt+0x26e0>
   1499c:	ldrb	ip, [r4]
   149a0:	cmp	ip, #61	; 0x3d
   149a4:	beq	14d34 <__assert_fail@plt+0x2ba8>
   149a8:	bls	14c3c <__assert_fail@plt+0x2ab0>
   149ac:	cmp	ip, #92	; 0x5c
   149b0:	addeq	r4, r4, #1
   149b4:	moveq	ip, #0
   149b8:	beq	1486c <__assert_fail@plt+0x26e0>
   149bc:	cmp	ip, #94	; 0x5e
   149c0:	addeq	r4, r4, #1
   149c4:	moveq	ip, #3
   149c8:	beq	1486c <__assert_fail@plt+0x26e0>
   149cc:	strb	ip, [r5]
   149d0:	add	r4, r4, #1
   149d4:	add	r6, r6, #1
   149d8:	add	r5, r5, #1
   149dc:	mvn	ip, #0
   149e0:	b	1486c <__assert_fail@plt+0x26e0>
   149e4:	ldrb	ip, [r4]
   149e8:	cmp	ip, #120	; 0x78
   149ec:	addls	pc, pc, ip, lsl #2
   149f0:	b	14d2c <__assert_fail@plt+0x2ba0>
   149f4:	b	14d04 <__assert_fail@plt+0x2b78>
   149f8:	b	14d2c <__assert_fail@plt+0x2ba0>
   149fc:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a00:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a04:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a08:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a0c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a10:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a14:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a18:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a1c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a20:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a24:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a28:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a2c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a30:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a34:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a38:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a3c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a40:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a44:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a48:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a4c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a50:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a54:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a58:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a5c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a60:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a64:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a68:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a6c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a70:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a74:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a78:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a7c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a80:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a84:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a88:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a8c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a90:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a94:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a98:	b	14d2c <__assert_fail@plt+0x2ba0>
   14a9c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14aa0:	b	14d2c <__assert_fail@plt+0x2ba0>
   14aa4:	b	14d2c <__assert_fail@plt+0x2ba0>
   14aa8:	b	14d2c <__assert_fail@plt+0x2ba0>
   14aac:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ab0:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ab4:	b	14d0c <__assert_fail@plt+0x2b80>
   14ab8:	b	14d0c <__assert_fail@plt+0x2b80>
   14abc:	b	14d0c <__assert_fail@plt+0x2b80>
   14ac0:	b	14d0c <__assert_fail@plt+0x2b80>
   14ac4:	b	14d0c <__assert_fail@plt+0x2b80>
   14ac8:	b	14d0c <__assert_fail@plt+0x2b80>
   14acc:	b	14d0c <__assert_fail@plt+0x2b80>
   14ad0:	b	14d0c <__assert_fail@plt+0x2b80>
   14ad4:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ad8:	b	14d2c <__assert_fail@plt+0x2ba0>
   14adc:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ae0:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ae4:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ae8:	b	14d2c <__assert_fail@plt+0x2ba0>
   14aec:	b	14d2c <__assert_fail@plt+0x2ba0>
   14af0:	b	14ce4 <__assert_fail@plt+0x2b58>
   14af4:	b	14d2c <__assert_fail@plt+0x2ba0>
   14af8:	b	14d2c <__assert_fail@plt+0x2ba0>
   14afc:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b00:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b04:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b08:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b0c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b10:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b14:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b18:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b1c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b20:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b24:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b28:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b2c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b30:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b34:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b38:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b3c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b40:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b44:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b48:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b4c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b50:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b54:	b	14c98 <__assert_fail@plt+0x2b0c>
   14b58:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b5c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b60:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b64:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b68:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b6c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b70:	b	14cec <__assert_fail@plt+0x2b60>
   14b74:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b78:	b	14cf4 <__assert_fail@plt+0x2b68>
   14b7c:	b	14cfc <__assert_fail@plt+0x2b70>
   14b80:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b84:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b88:	b	14cb4 <__assert_fail@plt+0x2b28>
   14b8c:	b	14d24 <__assert_fail@plt+0x2b98>
   14b90:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b94:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b98:	b	14d2c <__assert_fail@plt+0x2ba0>
   14b9c:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ba0:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ba4:	b	14d2c <__assert_fail@plt+0x2ba0>
   14ba8:	b	14d2c <__assert_fail@plt+0x2ba0>
   14bac:	b	14ccc <__assert_fail@plt+0x2b40>
   14bb0:	b	14d2c <__assert_fail@plt+0x2ba0>
   14bb4:	b	14d2c <__assert_fail@plt+0x2ba0>
   14bb8:	b	14d2c <__assert_fail@plt+0x2ba0>
   14bbc:	b	14cd4 <__assert_fail@plt+0x2b48>
   14bc0:	b	14d2c <__assert_fail@plt+0x2ba0>
   14bc4:	b	14cdc <__assert_fail@plt+0x2b50>
   14bc8:	b	14d2c <__assert_fail@plt+0x2ba0>
   14bcc:	b	14d1c <__assert_fail@plt+0x2b90>
   14bd0:	b	14d2c <__assert_fail@plt+0x2ba0>
   14bd4:	b	14c98 <__assert_fail@plt+0x2b0c>
   14bd8:	ldrb	ip, [r4]
   14bdc:	sub	r9, ip, #64	; 0x40
   14be0:	cmp	r9, #62	; 0x3e
   14be4:	bls	14c0c <__assert_fail@plt+0x2a80>
   14be8:	cmp	ip, #63	; 0x3f
   14bec:	beq	14d44 <__assert_fail@plt+0x2bb8>
   14bf0:	mov	ip, #0
   14bf4:	str	r5, [r0]
   14bf8:	mov	r0, ip
   14bfc:	str	r4, [r1]
   14c00:	str	r6, [r3]
   14c04:	pop	{r4, r5, r6, r7, r8, r9, sl}
   14c08:	bx	lr
   14c0c:	and	ip, ip, #31
   14c10:	add	r4, r4, #1
   14c14:	strb	ip, [r5]
   14c18:	add	r6, r6, #1
   14c1c:	add	r5, r5, #1
   14c20:	mvn	ip, #0
   14c24:	b	1486c <__assert_fail@plt+0x26e0>
   14c28:	add	r7, r9, r7, lsl #3
   14c2c:	add	r4, r4, #1
   14c30:	sub	r7, r7, #48	; 0x30
   14c34:	and	r7, r7, #255	; 0xff
   14c38:	b	1486c <__assert_fail@plt+0x26e0>
   14c3c:	cmp	ip, #0
   14c40:	beq	14c4c <__assert_fail@plt+0x2ac0>
   14c44:	cmp	ip, #58	; 0x3a
   14c48:	bne	149cc <__assert_fail@plt+0x2840>
   14c4c:	mov	ip, #5
   14c50:	subs	ip, ip, #6
   14c54:	movne	ip, #1
   14c58:	b	14bf4 <__assert_fail@plt+0x2a68>
   14c5c:	add	r7, sl, r7, lsl #4
   14c60:	add	r4, r4, #1
   14c64:	sub	r7, r7, #55	; 0x37
   14c68:	and	r7, r7, #255	; 0xff
   14c6c:	b	1486c <__assert_fail@plt+0x26e0>
   14c70:	add	r7, sl, r7, lsl #4
   14c74:	add	r4, r4, #1
   14c78:	sub	r7, r7, #87	; 0x57
   14c7c:	and	r7, r7, #255	; 0xff
   14c80:	b	1486c <__assert_fail@plt+0x26e0>
   14c84:	add	r7, sl, r7, lsl #4
   14c88:	add	r4, r4, #1
   14c8c:	sub	r7, r7, #48	; 0x30
   14c90:	and	r7, r7, #255	; 0xff
   14c94:	b	1486c <__assert_fail@plt+0x26e0>
   14c98:	mov	ip, #3
   14c9c:	mov	r7, #0
   14ca0:	cmp	ip, #4
   14ca4:	add	r4, r4, #1
   14ca8:	bhi	14c50 <__assert_fail@plt+0x2ac4>
   14cac:	sub	ip, ip, #1
   14cb0:	b	1486c <__assert_fail@plt+0x26e0>
   14cb4:	mov	r7, #27
   14cb8:	strb	r7, [r5]
   14cbc:	add	r6, r6, #1
   14cc0:	add	r5, r5, #1
   14cc4:	mov	ip, #0
   14cc8:	b	14ca0 <__assert_fail@plt+0x2b14>
   14ccc:	mov	r7, #10
   14cd0:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14cd4:	mov	r7, #13
   14cd8:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14cdc:	mov	r7, #9
   14ce0:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14ce4:	mov	r7, #127	; 0x7f
   14ce8:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14cec:	mov	r7, #32
   14cf0:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14cf4:	mov	r7, #7
   14cf8:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14cfc:	mov	r7, #8
   14d00:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14d04:	mov	ip, #6
   14d08:	b	14ca0 <__assert_fail@plt+0x2b14>
   14d0c:	sub	r7, ip, #48	; 0x30
   14d10:	mov	ip, #2
   14d14:	uxtb	r7, r7
   14d18:	b	14ca0 <__assert_fail@plt+0x2b14>
   14d1c:	mov	r7, #11
   14d20:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14d24:	mov	r7, #12
   14d28:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14d2c:	mov	r7, ip
   14d30:	b	14cb8 <__assert_fail@plt+0x2b2c>
   14d34:	cmp	r2, #0
   14d38:	beq	149cc <__assert_fail@plt+0x2840>
   14d3c:	mov	ip, #1
   14d40:	b	14bf4 <__assert_fail@plt+0x2a68>
   14d44:	strb	r8, [r5]
   14d48:	add	r6, r6, #1
   14d4c:	add	r5, r5, #1
   14d50:	mvn	ip, #0
   14d54:	b	1486c <__assert_fail@plt+0x26e0>
   14d58:	push	{r3, lr}
   14d5c:	ldr	r3, [pc, #92]	; 14dc0 <__assert_fail@plt+0x2c34>
   14d60:	add	r3, pc, r3
   14d64:	add	r1, r3, r0, lsl #3
   14d68:	ldr	r2, [r3, r0, lsl #3]
   14d6c:	ldr	r0, [r1, #4]
   14d70:	cmp	r2, #0
   14d74:	beq	14d90 <__assert_fail@plt+0x2c04>
   14d78:	cmp	r2, #1
   14d7c:	beq	14db0 <__assert_fail@plt+0x2c24>
   14d80:	cmp	r2, #2
   14d84:	beq	14d98 <__assert_fail@plt+0x2c0c>
   14d88:	mov	r0, #1
   14d8c:	pop	{r3, pc}
   14d90:	mov	r0, r2
   14d94:	pop	{r3, pc}
   14d98:	ldr	r1, [pc, #36]	; 14dc4 <__assert_fail@plt+0x2c38>
   14d9c:	add	r1, pc, r1
   14da0:	bl	1212c <strncmp@plt>
   14da4:	adds	r0, r0, #0
   14da8:	movne	r0, #1
   14dac:	pop	{r3, pc}
   14db0:	ldrb	r0, [r0]
   14db4:	subs	r0, r0, #48	; 0x30
   14db8:	movne	r0, #1
   14dbc:	pop	{r3, pc}
   14dc0:	andeq	r4, r2, r8, ror #9
   14dc4:	andeq	pc, r0, r4, lsr #18
   14dc8:	push	{r3, r4, r5, r6, r7, lr}
   14dcc:	mov	r5, r0
   14dd0:	mov	r0, #16
   14dd4:	mov	r6, r1
   14dd8:	mov	r7, r2
   14ddc:	bl	21dcc <close_stdout@@Base+0x6b50>
   14de0:	mov	r4, r0
   14de4:	subs	r0, r6, #0
   14de8:	beq	14df0 <__assert_fail@plt+0x2c64>
   14dec:	bl	21fc4 <close_stdout@@Base+0x6d48>
   14df0:	cmp	r5, #0
   14df4:	str	r0, [r4, #4]
   14df8:	mov	r0, r5
   14dfc:	beq	14e04 <__assert_fail@plt+0x2c78>
   14e00:	bl	21fc4 <close_stdout@@Base+0x6d48>
   14e04:	ldr	r3, [pc, #24]	; 14e24 <__assert_fail@plt+0x2c98>
   14e08:	str	r0, [r4]
   14e0c:	add	r3, pc, r3
   14e10:	strb	r7, [r4, #8]
   14e14:	ldr	r2, [r3, #4]
   14e18:	str	r4, [r3, #4]
   14e1c:	str	r2, [r4, #12]
   14e20:	pop	{r3, r4, r5, r6, r7, pc}
   14e24:	andeq	r4, r2, ip, asr r5
   14e28:	push	{r4, lr}
   14e2c:	mov	r4, r0
   14e30:	ldr	r0, [r0]
   14e34:	bl	11ce8 <free@plt>
   14e38:	ldr	r0, [r4, #4]
   14e3c:	bl	11ce8 <free@plt>
   14e40:	ldr	r3, [pc, #20]	; 14e5c <__assert_fail@plt+0x2cd0>
   14e44:	ldr	r0, [r4, #120]	; 0x78
   14e48:	add	r3, pc, r3
   14e4c:	cmp	r0, r3
   14e50:	popeq	{r4, pc}
   14e54:	pop	{r4, lr}
   14e58:	b	120fc <freecon@plt>
   14e5c:	andeq	r4, r2, r8, ror #7
   14e60:	push	{r3, r4, r5, lr}
   14e64:	ldr	r5, [pc, #108]	; 14ed8 <__assert_fail@plt+0x2d4c>
   14e68:	add	r5, pc, r5
   14e6c:	ldr	r3, [r5, #8]
   14e70:	cmp	r3, #0
   14e74:	movne	r4, #0
   14e78:	beq	14e98 <__assert_fail@plt+0x2d0c>
   14e7c:	ldr	r3, [r5, #56]	; 0x38
   14e80:	ldr	r0, [r3, r4, lsl #2]
   14e84:	add	r4, r4, #1
   14e88:	bl	14e28 <__assert_fail@plt+0x2c9c>
   14e8c:	ldr	r3, [r5, #8]
   14e90:	cmp	r3, r4
   14e94:	bhi	14e7c <__assert_fail@plt+0x2cf0>
   14e98:	ldr	r3, [pc, #60]	; 14edc <__assert_fail@plt+0x2d50>
   14e9c:	mov	r2, #0
   14ea0:	add	r3, pc, r3
   14ea4:	str	r2, [r3, #8]
   14ea8:	strb	r2, [r3, #12]
   14eac:	str	r2, [r3, #16]
   14eb0:	str	r2, [r3, #20]
   14eb4:	str	r2, [r3, #24]
   14eb8:	str	r2, [r3, #28]
   14ebc:	str	r2, [r3, #32]
   14ec0:	str	r2, [r3, #36]	; 0x24
   14ec4:	str	r2, [r3, #40]	; 0x28
   14ec8:	str	r2, [r3, #44]	; 0x2c
   14ecc:	str	r2, [r3, #48]	; 0x30
   14ed0:	str	r2, [r3, #52]	; 0x34
   14ed4:	pop	{r3, r4, r5, pc}
   14ed8:	andeq	r4, r2, r0, lsl #10
   14edc:	andeq	r4, r2, r8, asr #9
   14ee0:	push	{r3, r4, r5, lr}
   14ee4:	ldr	r5, [pc, #376]	; 15064 <__assert_fail@plt+0x2ed8>
   14ee8:	add	r5, pc, r5
   14eec:	ldr	r4, [r5, #8]
   14ef0:	ldr	r3, [r5, #60]	; 0x3c
   14ef4:	add	r2, r4, r4, lsr #1
   14ef8:	cmp	r2, r3
   14efc:	bhi	15008 <__assert_fail@plt+0x2e7c>
   14f00:	cmp	r4, #0
   14f04:	beq	14f2c <__assert_fail@plt+0x2da0>
   14f08:	ldr	r2, [pc, #344]	; 15068 <__assert_fail@plt+0x2edc>
   14f0c:	add	r2, pc, r2
   14f10:	ldr	r3, [r2, #56]	; 0x38
   14f14:	ldr	r2, [r2, #68]	; 0x44
   14f18:	add	r1, r3, r4, lsl #2
   14f1c:	str	r2, [r3], #4
   14f20:	cmp	r3, r1
   14f24:	add	r2, r2, #136	; 0x88
   14f28:	bne	14f1c <__assert_fail@plt+0x2d90>
   14f2c:	ldr	r0, [pc, #312]	; 1506c <__assert_fail@plt+0x2ee0>
   14f30:	add	r0, pc, r0
   14f34:	ldr	r3, [r0, #64]	; 0x40
   14f38:	cmn	r3, #1
   14f3c:	popeq	{r3, r4, r5, pc}
   14f40:	add	r0, r0, #72	; 0x48
   14f44:	bl	11cd0 <_setjmp@plt>
   14f48:	subs	ip, r0, #0
   14f4c:	beq	14fb4 <__assert_fail@plt+0x2e28>
   14f50:	ldr	r3, [pc, #280]	; 15070 <__assert_fail@plt+0x2ee4>
   14f54:	add	r3, pc, r3
   14f58:	ldr	lr, [r3, #64]	; 0x40
   14f5c:	cmp	lr, #3
   14f60:	beq	15040 <__assert_fail@plt+0x2eb4>
   14f64:	ldr	r1, [r3, #8]
   14f68:	ldr	r0, [r3, #56]	; 0x38
   14f6c:	cmp	r1, #0
   14f70:	beq	14f90 <__assert_fail@plt+0x2e04>
   14f74:	add	ip, r0, r1, lsl #2
   14f78:	ldr	r2, [r3, #68]	; 0x44
   14f7c:	mov	r3, r0
   14f80:	str	r2, [r3], #4
   14f84:	cmp	r3, ip
   14f88:	add	r2, r2, #136	; 0x88
   14f8c:	bne	14f80 <__assert_fail@plt+0x2df4>
   14f90:	mov	r2, lr
   14f94:	cmp	r2, #4
   14f98:	mov	ip, #1
   14f9c:	movne	lr, #0
   14fa0:	bne	14fd4 <__assert_fail@plt+0x2e48>
   14fa4:	ldr	r3, [pc, #200]	; 15074 <__assert_fail@plt+0x2ee8>
   14fa8:	add	r3, pc, r3
   14fac:	ldr	lr, [r3, #464]	; 0x1d0
   14fb0:	b	14fd4 <__assert_fail@plt+0x2e48>
   14fb4:	ldr	r3, [pc, #188]	; 15078 <__assert_fail@plt+0x2eec>
   14fb8:	add	r3, pc, r3
   14fbc:	ldr	r2, [r3, #64]	; 0x40
   14fc0:	ldr	r1, [r3, #8]
   14fc4:	cmp	r2, #4
   14fc8:	ldr	r0, [r3, #56]	; 0x38
   14fcc:	movne	lr, #0
   14fd0:	beq	14fa4 <__assert_fail@plt+0x2e18>
   14fd4:	ldr	r3, [pc, #160]	; 1507c <__assert_fail@plt+0x2ef0>
   14fd8:	add	r2, lr, r2
   14fdc:	ldr	lr, [pc, #156]	; 15080 <__assert_fail@plt+0x2ef4>
   14fe0:	add	r3, pc, r3
   14fe4:	add	r2, ip, r2, lsl #1
   14fe8:	add	lr, pc, lr
   14fec:	ldrb	r4, [r3, #468]	; 0x1d4
   14ff0:	ldrb	r3, [r3, #469]	; 0x1d5
   14ff4:	add	r2, r4, r2, lsl #1
   14ff8:	add	r2, r3, r2, lsl #1
   14ffc:	ldr	r2, [lr, r2, lsl #2]
   15000:	bl	1e65c <close_stdout@@Base+0x33e0>
   15004:	pop	{r3, r4, r5, pc}
   15008:	ldr	r0, [r5, #56]	; 0x38
   1500c:	bl	11ce8 <free@plt>
   15010:	movw	r3, #21845	; 0x5555
   15014:	movt	r3, #5461	; 0x1555
   15018:	cmp	r4, r3
   1501c:	bhi	15060 <__assert_fail@plt+0x2ed4>
   15020:	add	r0, r4, r4, lsl #1
   15024:	lsl	r0, r0, #2
   15028:	bl	21dcc <close_stdout@@Base+0x6b50>
   1502c:	ldr	r4, [r5, #8]
   15030:	add	r3, r4, r4, lsl #1
   15034:	str	r3, [r5, #60]	; 0x3c
   15038:	str	r0, [r5, #56]	; 0x38
   1503c:	b	14f00 <__assert_fail@plt+0x2d74>
   15040:	ldr	r0, [pc, #60]	; 15084 <__assert_fail@plt+0x2ef8>
   15044:	movw	r2, #3617	; 0xe21
   15048:	ldr	r1, [pc, #56]	; 15088 <__assert_fail@plt+0x2efc>
   1504c:	ldr	r3, [pc, #56]	; 1508c <__assert_fail@plt+0x2f00>
   15050:	add	r0, pc, r0
   15054:	add	r1, pc, r1
   15058:	add	r3, pc, r3
   1505c:	bl	1218c <__assert_fail@plt>
   15060:	bl	21fe0 <close_stdout@@Base+0x6d64>
   15064:	andeq	r4, r2, r0, lsl #9
   15068:	andeq	r4, r2, ip, asr r4
   1506c:	andeq	r4, r2, r8, lsr r4
   15070:	andeq	r4, r2, r4, lsl r4
   15074:	andeq	r4, r2, r0, asr #7
   15078:			; <UNDEFINED> instruction: 0x000243b0
   1507c:	andeq	r4, r2, r8, lsl #7
   15080:	andeq	r3, r2, r8, lsl sl
   15084:	andeq	pc, r0, r4, ror r6	; <UNPREDICTABLE>
   15088:	andeq	pc, r0, ip, lsl #13
   1508c:	andeq	pc, r0, r8, lsl #10
   15090:	ldr	r0, [r0]
   15094:	ldr	r1, [r1]
   15098:	b	11c88 <strcmp@plt>
   1509c:	ldr	r3, [r0]
   150a0:	ldr	r0, [r1]
   150a4:	mov	r1, r3
   150a8:	b	11c88 <strcmp@plt>
   150ac:	push	{r3, r4, r5, lr}
   150b0:	mov	r4, r0
   150b4:	mov	r5, r1
   150b8:	bl	11fd0 <__errno_location@plt>
   150bc:	mov	r1, r5
   150c0:	mov	r2, #0
   150c4:	mov	r3, r0
   150c8:	mov	r0, r4
   150cc:	str	r2, [r3]
   150d0:	pop	{r3, r4, r5, lr}
   150d4:	b	11ec8 <strcoll@plt>
   150d8:	ldr	r0, [r0]
   150dc:	ldr	r1, [r1]
   150e0:	b	150ac <__assert_fail@plt+0x2f20>
   150e4:	ldr	r3, [r0]
   150e8:	ldr	r0, [r1]
   150ec:	mov	r1, r3
   150f0:	b	150ac <__assert_fail@plt+0x2f20>
   150f4:	ldr	r3, [r0]
   150f8:	ldr	r0, [r1]
   150fc:	mov	r1, r3
   15100:	b	1b7e0 <close_stdout@@Base+0x564>
   15104:	ldr	r0, [r0]
   15108:	ldr	r1, [r1]
   1510c:	b	1b7e0 <close_stdout@@Base+0x564>
   15110:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15114:	subs	r8, r0, #0
   15118:	mov	r9, r1
   1511c:	beq	15144 <__assert_fail@plt+0x2fb8>
   15120:	ldr	r3, [pc, #364]	; 15294 <__assert_fail@plt+0x3108>
   15124:	add	r3, pc, r3
   15128:	ldr	r3, [r3, #472]	; 0x1d8
   1512c:	cmp	r3, #0
   15130:	beq	15144 <__assert_fail@plt+0x2fb8>
   15134:	mov	r0, #0
   15138:	mov	r1, r8
   1513c:	mov	r2, r0
   15140:	bl	14dc8 <__assert_fail@plt+0x2c3c>
   15144:	ldr	r3, [pc, #332]	; 15298 <__assert_fail@plt+0x310c>
   15148:	mov	r4, #0
   1514c:	ldr	fp, [pc, #328]	; 1529c <__assert_fail@plt+0x3110>
   15150:	add	r3, pc, r3
   15154:	add	fp, pc, fp
   15158:	ldr	r7, [r3, #8]
   1515c:	sub	r6, r7, #-1073741823	; 0xc0000001
   15160:	lsl	r6, r6, #2
   15164:	b	15198 <__assert_fail@plt+0x300c>
   15168:	ldrb	r3, [sl]
   1516c:	cmp	r3, #47	; 0x2f
   15170:	bne	151fc <__assert_fail@plt+0x3070>
   15174:	mov	r0, sl
   15178:	ldr	r1, [r5, #4]
   1517c:	mov	r2, r9
   15180:	bl	14dc8 <__assert_fail@plt+0x2c3c>
   15184:	ldr	r3, [r5, #112]	; 0x70
   15188:	cmp	r3, #9
   1518c:	beq	15230 <__assert_fail@plt+0x30a4>
   15190:	add	r4, r4, #1
   15194:	sub	r6, r6, #4
   15198:	cmp	r4, r7
   1519c:	beq	1523c <__assert_fail@plt+0x30b0>
   151a0:	ldr	r3, [fp, #56]	; 0x38
   151a4:	ldr	r5, [r3, r6]
   151a8:	ldr	r3, [r5, #112]	; 0x70
   151ac:	cmp	r3, #3
   151b0:	cmpne	r3, #9
   151b4:	bne	15190 <__assert_fail@plt+0x3004>
   151b8:	cmp	r8, #0
   151bc:	ldr	sl, [r5]
   151c0:	beq	15174 <__assert_fail@plt+0x2fe8>
   151c4:	mov	r0, sl
   151c8:	bl	1b450 <close_stdout@@Base+0x1d4>
   151cc:	ldrb	r3, [r0]
   151d0:	cmp	r3, #46	; 0x2e
   151d4:	bne	15168 <__assert_fail@plt+0x2fdc>
   151d8:	ldrb	r3, [r0, #1]
   151dc:	cmp	r3, #46	; 0x2e
   151e0:	movne	r3, #1
   151e4:	moveq	r3, #2
   151e8:	ldrb	r3, [r0, r3]
   151ec:	cmp	r3, #0
   151f0:	cmpne	r3, #47	; 0x2f
   151f4:	beq	15190 <__assert_fail@plt+0x3004>
   151f8:	b	15168 <__assert_fail@plt+0x2fdc>
   151fc:	mov	r1, sl
   15200:	mov	r2, #0
   15204:	mov	r0, r8
   15208:	bl	1b644 <close_stdout@@Base+0x3c8>
   1520c:	ldr	r1, [r5, #4]
   15210:	mov	r2, r9
   15214:	mov	sl, r0
   15218:	bl	14dc8 <__assert_fail@plt+0x2c3c>
   1521c:	mov	r0, sl
   15220:	bl	11ce8 <free@plt>
   15224:	ldr	r3, [r5, #112]	; 0x70
   15228:	cmp	r3, #9
   1522c:	bne	15190 <__assert_fail@plt+0x3004>
   15230:	mov	r0, r5
   15234:	bl	14e28 <__assert_fail@plt+0x2c9c>
   15238:	b	15190 <__assert_fail@plt+0x3004>
   1523c:	ldr	r3, [pc, #92]	; 152a0 <__assert_fail@plt+0x3114>
   15240:	add	r3, pc, r3
   15244:	ldr	ip, [r3, #8]
   15248:	cmp	ip, #0
   1524c:	beq	1528c <__assert_fail@plt+0x3100>
   15250:	ldr	r0, [r3, #56]	; 0x38
   15254:	mov	r3, #0
   15258:	add	ip, r0, ip, lsl #2
   1525c:	mov	r2, r0
   15260:	ldr	r1, [r2], #4
   15264:	str	r1, [r0, r3, lsl #2]
   15268:	ldr	r1, [r1, #112]	; 0x70
   1526c:	cmp	r1, #9
   15270:	addne	r3, r3, #1
   15274:	cmp	r2, ip
   15278:	bne	15260 <__assert_fail@plt+0x30d4>
   1527c:	ldr	r2, [pc, #32]	; 152a4 <__assert_fail@plt+0x3118>
   15280:	add	r2, pc, r2
   15284:	str	r3, [r2, #8]
   15288:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1528c:	mov	r3, ip
   15290:	b	1527c <__assert_fail@plt+0x30f0>
   15294:	andeq	r4, r2, r4, asr #4
   15298:	andeq	r4, r2, r8, lsl r2
   1529c:	andeq	r4, r2, r4, lsl r2
   152a0:	andeq	r4, r2, r8, lsr #2
   152a4:	andeq	r4, r2, r8, ror #1
   152a8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152ac:	cmp	r0, r1
   152b0:	ldr	r3, [pc, #228]	; 1539c <__assert_fail@plt+0x3210>
   152b4:	mov	r4, r0
   152b8:	mov	sl, r1
   152bc:	add	r3, pc, r3
   152c0:	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152c4:	ldr	r2, [pc, #212]	; 153a0 <__assert_fail@plt+0x3214>
   152c8:	mov	r8, #32
   152cc:	ldr	r6, [pc, #208]	; 153a4 <__assert_fail@plt+0x3218>
   152d0:	ldr	r7, [r3, r2]
   152d4:	add	r6, pc, r6
   152d8:	b	15344 <__assert_fail@plt+0x31b8>
   152dc:	mov	r1, r5
   152e0:	mov	r0, sl
   152e4:	bl	234ec <close_stdout@@Base+0x8270>
   152e8:	add	fp, r4, #1
   152ec:	mov	r1, r5
   152f0:	mov	r9, r0
   152f4:	mov	r0, fp
   152f8:	bl	234ec <close_stdout@@Base+0x8270>
   152fc:	cmp	r9, r0
   15300:	bls	15380 <__assert_fail@plt+0x31f4>
   15304:	ldr	r0, [r7]
   15308:	ldr	r2, [r0, #24]
   1530c:	ldr	r3, [r0, #20]
   15310:	cmp	r3, r2
   15314:	addcc	r2, r3, #1
   15318:	strcc	r2, [r0, #20]
   1531c:	movcc	r2, #9
   15320:	strbcc	r2, [r3]
   15324:	bcs	1538c <__assert_fail@plt+0x3200>
   15328:	mov	r0, r4
   1532c:	mov	r1, r5
   15330:	bl	236d8 <close_stdout@@Base+0x845c>
   15334:	add	r4, r5, r4
   15338:	rsb	r4, r1, r4
   1533c:	cmp	sl, r4
   15340:	bls	15388 <__assert_fail@plt+0x31fc>
   15344:	ldr	r5, [r6, #476]	; 0x1dc
   15348:	cmp	r5, #0
   1534c:	bne	152dc <__assert_fail@plt+0x3150>
   15350:	add	r4, r4, #1
   15354:	ldr	r0, [r7]
   15358:	ldr	r2, [r0, #20]
   1535c:	ldr	r1, [r0, #24]
   15360:	cmp	r2, r1
   15364:	addcc	r1, r2, #1
   15368:	strcc	r1, [r0, #20]
   1536c:	strbcc	r8, [r2]
   15370:	bcc	1533c <__assert_fail@plt+0x31b0>
   15374:	mov	r1, #32
   15378:	bl	1206c <__overflow@plt>
   1537c:	b	1533c <__assert_fail@plt+0x31b0>
   15380:	mov	r4, fp
   15384:	b	15354 <__assert_fail@plt+0x31c8>
   15388:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1538c:	mov	r1, #9
   15390:	bl	1206c <__overflow@plt>
   15394:	ldr	r5, [r6, #476]	; 0x1dc
   15398:	b	15328 <__assert_fail@plt+0x319c>
   1539c:	andeq	r3, r2, ip, lsr sp
   153a0:	andeq	r0, r0, r0, lsl r2
   153a4:	muleq	r2, r4, r0
   153a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153ac:	add	fp, sp, #32
   153b0:	ldr	ip, [pc, #928]	; 15758 <__assert_fail@plt+0x35cc>
   153b4:	sub	sp, sp, #8192	; 0x2000
   153b8:	sub	sp, sp, #52	; 0x34
   153bc:	ldr	lr, [pc, #920]	; 1575c <__assert_fail@plt+0x35d0>
   153c0:	add	ip, pc, ip
   153c4:	mov	r7, r1
   153c8:	sub	r1, fp, #8192	; 0x2000
   153cc:	sub	sl, fp, #8192	; 0x2000
   153d0:	mov	r6, r2
   153d4:	str	r0, [r1, #-72]	; 0xffffffb8
   153d8:	sub	sl, sl, #36	; 0x24
   153dc:	str	r3, [r1, #-64]	; 0xffffffc0
   153e0:	sub	sl, sl, #4
   153e4:	ldr	lr, [ip, lr]
   153e8:	mov	r2, r7
   153ec:	mov	r0, sl
   153f0:	mvn	r3, #0
   153f4:	str	lr, [r1, #-68]	; 0xffffffbc
   153f8:	mov	r1, #8192	; 0x2000
   153fc:	str	r6, [sp]
   15400:	ldr	lr, [lr]
   15404:	str	lr, [fp, #-40]	; 0xffffffd8
   15408:	bl	1fa28 <close_stdout@@Base+0x47ac>
   1540c:	cmp	r0, #8192	; 0x2000
   15410:	mov	r4, r0
   15414:	subcc	r0, fp, #8192	; 0x2000
   15418:	strcc	sl, [r0, #-60]	; 0xffffffc4
   1541c:	bcs	156c8 <__assert_fail@plt+0x353c>
   15420:	ldr	r3, [pc, #824]	; 15760 <__assert_fail@plt+0x35d4>
   15424:	add	r3, pc, r3
   15428:	ldrb	r6, [r3, #480]	; 0x1e0
   1542c:	cmp	r6, #0
   15430:	bne	15514 <__assert_fail@plt+0x3388>
   15434:	sub	r0, fp, #8192	; 0x2000
   15438:	ldr	r0, [r0, #-64]	; 0xffffffc0
   1543c:	cmp	r0, #0
   15440:	beq	15468 <__assert_fail@plt+0x32dc>
   15444:	bl	11e50 <__ctype_get_mb_cur_max@plt>
   15448:	cmp	r0, #1
   1544c:	bls	154c4 <__assert_fail@plt+0x3338>
   15450:	sub	r1, fp, #8192	; 0x2000
   15454:	mov	r2, r6
   15458:	ldr	r0, [r1, #-60]	; 0xffffffc4
   1545c:	mov	r1, r4
   15460:	bl	1e244 <close_stdout@@Base+0x2fc8>
   15464:	mov	r5, r0
   15468:	sub	r0, fp, #8192	; 0x2000
   1546c:	ldr	r0, [r0, #-72]	; 0xffffffb8
   15470:	cmp	r0, #0
   15474:	beq	15490 <__assert_fail@plt+0x3304>
   15478:	sub	r1, fp, #8192	; 0x2000
   1547c:	mov	r2, r4
   15480:	ldr	r0, [r1, #-60]	; 0xffffffc4
   15484:	ldr	r3, [r1, #-72]	; 0xffffffb8
   15488:	mov	r1, #1
   1548c:	bl	11d3c <fwrite_unlocked@plt>
   15490:	sub	r3, fp, #8192	; 0x2000
   15494:	sub	r1, fp, #8192	; 0x2000
   15498:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1549c:	mov	r0, r4
   154a0:	ldr	r3, [r3, #-64]	; 0xffffffc0
   154a4:	ldr	r1, [r1, #-68]	; 0xffffffbc
   154a8:	cmp	r3, #0
   154ac:	strne	r5, [r3]
   154b0:	ldr	r3, [r1]
   154b4:	cmp	r2, r3
   154b8:	bne	15754 <__assert_fail@plt+0x35c8>
   154bc:	sub	sp, fp, #32
   154c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154c4:	sub	r2, fp, #8192	; 0x2000
   154c8:	ldr	r2, [r2, #-60]	; 0xffffffc4
   154cc:	add	r5, r2, r4
   154d0:	cmp	r2, r5
   154d4:	bcs	15740 <__assert_fail@plt+0x35b4>
   154d8:	bl	11f70 <__ctype_b_loc@plt>
   154dc:	sub	ip, fp, #8192	; 0x2000
   154e0:	sub	r1, r5, #1
   154e4:	mov	r5, r6
   154e8:	ldr	ip, [ip, #-60]	; 0xffffffc4
   154ec:	sub	r3, ip, #1
   154f0:	ldr	r0, [r0]
   154f4:	ldrb	r2, [r3, #1]!
   154f8:	lsl	r2, r2, #1
   154fc:	ldrh	r2, [r0, r2]
   15500:	tst	r2, #16384	; 0x4000
   15504:	addne	r5, r5, #1
   15508:	cmp	r3, r1
   1550c:	bne	154f4 <__assert_fail@plt+0x3368>
   15510:	b	15468 <__assert_fail@plt+0x32dc>
   15514:	bl	11e50 <__ctype_get_mb_cur_max@plt>
   15518:	sub	r1, fp, #8192	; 0x2000
   1551c:	ldr	r1, [r1, #-60]	; 0xffffffc4
   15520:	cmp	r0, #1
   15524:	bls	156fc <__assert_fail@plt+0x3570>
   15528:	add	r7, r1, r4
   1552c:	cmp	r1, r7
   15530:	bcs	15748 <__assert_fail@plt+0x35bc>
   15534:	sub	r1, fp, #8192	; 0x2000
   15538:	movw	r4, #57332	; 0xdff4
   1553c:	movt	r4, #65535	; 0xffff
   15540:	sub	r6, fp, #8192	; 0x2000
   15544:	str	r4, [r1, #-76]	; 0xffffffb4
   15548:	sub	r8, fp, #8192	; 0x2000
   1554c:	ldr	r4, [r1, #-60]	; 0xffffffc4
   15550:	sub	r6, r6, #48	; 0x30
   15554:	sub	r8, r8, #52	; 0x34
   15558:	mov	r5, #0
   1555c:	movw	r0, #57328	; 0xdff0
   15560:	movt	r0, #65535	; 0xffff
   15564:	mov	sl, r4
   15568:	str	r0, [r1, #-56]	; 0xffffffc8
   1556c:	ldrb	r3, [sl]
   15570:	cmp	r3, #63	; 0x3f
   15574:	bhi	15650 <__assert_fail@plt+0x34c4>
   15578:	cmp	r3, #37	; 0x25
   1557c:	bcs	1566c <__assert_fail@plt+0x34e0>
   15580:	sub	r2, r3, #32
   15584:	cmp	r2, #3
   15588:	bls	1566c <__assert_fail@plt+0x34e0>
   1558c:	sub	r2, fp, #8192	; 0x2000
   15590:	sub	r1, fp, #36	; 0x24
   15594:	mov	r3, #0
   15598:	str	r3, [r6, #4]
   1559c:	ldr	r0, [r2, #-76]	; 0xffffffb4
   155a0:	str	r3, [r1, r0]
   155a4:	mov	r0, r8
   155a8:	mov	r1, sl
   155ac:	rsb	r2, sl, r7
   155b0:	mov	r3, r6
   155b4:	bl	11e80 <mbrtowc@plt>
   155b8:	cmn	r0, #1
   155bc:	mov	r9, r0
   155c0:	beq	15688 <__assert_fail@plt+0x34fc>
   155c4:	cmn	r0, #2
   155c8:	beq	156a8 <__assert_fail@plt+0x351c>
   155cc:	sub	r3, fp, #8192	; 0x2000
   155d0:	sub	r2, fp, #36	; 0x24
   155d4:	cmp	r9, #0
   155d8:	ldr	r1, [r3, #-56]	; 0xffffffc8
   155dc:	moveq	r9, #1
   155e0:	ldr	r0, [r2, r1]
   155e4:	bl	11cb8 <wcwidth@plt>
   155e8:	cmp	r0, #0
   155ec:	blt	15638 <__assert_fail@plt+0x34ac>
   155f0:	add	r1, sl, r9
   155f4:	mov	r3, r4
   155f8:	ldrb	r2, [sl], #1
   155fc:	cmp	sl, r1
   15600:	strb	r2, [r3], #1
   15604:	bne	155f8 <__assert_fail@plt+0x346c>
   15608:	add	r4, r4, r9
   1560c:	add	r5, r5, r0
   15610:	mov	r0, r6
   15614:	bl	11d24 <mbsinit@plt>
   15618:	cmp	r0, #0
   1561c:	beq	155a4 <__assert_fail@plt+0x3418>
   15620:	cmp	sl, r7
   15624:	bcc	1556c <__assert_fail@plt+0x33e0>
   15628:	sub	r0, fp, #8192	; 0x2000
   1562c:	ldr	r0, [r0, #-60]	; 0xffffffc4
   15630:	rsb	r4, r0, r4
   15634:	b	15468 <__assert_fail@plt+0x32dc>
   15638:	mov	ip, #63	; 0x3f
   1563c:	add	sl, sl, r9
   15640:	strb	ip, [r4]
   15644:	add	r5, r5, #1
   15648:	add	r4, r4, #1
   1564c:	b	15610 <__assert_fail@plt+0x3484>
   15650:	cmp	r3, #65	; 0x41
   15654:	bcc	1558c <__assert_fail@plt+0x3400>
   15658:	cmp	r3, #95	; 0x5f
   1565c:	bls	1566c <__assert_fail@plt+0x34e0>
   15660:	sub	r2, r3, #97	; 0x61
   15664:	cmp	r2, #29
   15668:	bhi	1558c <__assert_fail@plt+0x3400>
   1566c:	add	sl, sl, #1
   15670:	strb	r3, [r4]
   15674:	cmp	sl, r7
   15678:	add	r5, r5, #1
   1567c:	add	r4, r4, #1
   15680:	bcc	1556c <__assert_fail@plt+0x33e0>
   15684:	b	15628 <__assert_fail@plt+0x349c>
   15688:	add	sl, sl, #1
   1568c:	mov	ip, #63	; 0x3f
   15690:	cmp	sl, r7
   15694:	strb	ip, [r4]
   15698:	add	r5, r5, #1
   1569c:	add	r4, r4, #1
   156a0:	bcc	1556c <__assert_fail@plt+0x33e0>
   156a4:	b	15628 <__assert_fail@plt+0x349c>
   156a8:	mov	sl, r7
   156ac:	cmp	sl, r7
   156b0:	mov	r0, #63	; 0x3f
   156b4:	add	r5, r5, #1
   156b8:	strb	r0, [r4]
   156bc:	add	r4, r4, #1
   156c0:	bcc	1556c <__assert_fail@plt+0x33e0>
   156c4:	b	15628 <__assert_fail@plt+0x349c>
   156c8:	add	r3, r4, #15
   156cc:	sub	r0, fp, #8192	; 0x2000
   156d0:	bic	r3, r3, #7
   156d4:	mov	r2, r7
   156d8:	sub	sp, sp, r3
   156dc:	add	r1, r4, #1
   156e0:	add	ip, sp, #8
   156e4:	mvn	r3, #0
   156e8:	str	ip, [r0, #-60]	; 0xffffffc4
   156ec:	str	r6, [sp]
   156f0:	ldr	r0, [r0, #-60]	; 0xffffffc4
   156f4:	bl	1fa28 <close_stdout@@Base+0x47ac>
   156f8:	b	15420 <__assert_fail@plt+0x3294>
   156fc:	add	r5, r1, r4
   15700:	cmp	r1, r5
   15704:	bcs	15738 <__assert_fail@plt+0x35ac>
   15708:	bl	11f70 <__ctype_b_loc@plt>
   1570c:	sub	ip, fp, #8192	; 0x2000
   15710:	ldr	r3, [ip, #-60]	; 0xffffffc4
   15714:	mov	ip, #63	; 0x3f
   15718:	ldrb	r2, [r3], #1
   1571c:	ldr	r1, [r0]
   15720:	lsl	r2, r2, #1
   15724:	ldrh	r2, [r1, r2]
   15728:	tst	r2, #16384	; 0x4000
   1572c:	strbeq	ip, [r3, #-1]
   15730:	cmp	r3, r5
   15734:	bne	15718 <__assert_fail@plt+0x358c>
   15738:	mov	r5, r4
   1573c:	b	15468 <__assert_fail@plt+0x32dc>
   15740:	mov	r5, r6
   15744:	b	15468 <__assert_fail@plt+0x32dc>
   15748:	mov	r4, #0
   1574c:	mov	r5, r4
   15750:	b	15468 <__assert_fail@plt+0x32dc>
   15754:	bl	11d78 <__stack_chk_fail@plt>
   15758:	andeq	r3, r2, r8, lsr ip
   1575c:	andeq	r0, r0, r0, ror #3
   15760:	andeq	r3, r2, r4, asr #30
   15764:	push	{r4, r5, r6, r7, r8, lr}
   15768:	mov	r3, r1
   1576c:	ldr	r2, [r1, #12]
   15770:	ldr	r5, [r1, #8]
   15774:	ldr	r1, [pc, #184]	; 15834 <__assert_fail@plt+0x36a8>
   15778:	rsb	r6, r5, r2
   1577c:	add	r1, pc, r1
   15780:	lsrs	r6, r6, #2
   15784:	popeq	{r4, r5, r6, r7, r8, pc}
   15788:	cmp	r2, r5
   1578c:	ldr	lr, [r3, #24]
   15790:	ldr	r4, [r3, #16]
   15794:	sub	r5, r5, #4
   15798:	ldrbeq	ip, [r3, #40]	; 0x28
   1579c:	add	r2, r2, lr
   157a0:	bic	r2, r2, lr
   157a4:	str	r2, [r3, #12]
   157a8:	orreq	ip, ip, #2
   157ac:	ldr	r7, [pc, #132]	; 15838 <__assert_fail@plt+0x36ac>
   157b0:	strbeq	ip, [r3, #40]	; 0x28
   157b4:	ldr	ip, [r3, #4]
   157b8:	add	r7, pc, r7
   157bc:	rsb	r2, ip, r2
   157c0:	rsb	ip, ip, r4
   157c4:	cmp	r2, ip
   157c8:	ldr	r2, [pc, #108]	; 1583c <__assert_fail@plt+0x36b0>
   157cc:	strgt	r4, [r3, #12]
   157d0:	mov	r4, #0
   157d4:	ldr	ip, [r3, #12]
   157d8:	str	ip, [r3, #8]
   157dc:	ldr	r8, [r1, r2]
   157e0:	ldr	r1, [r8]
   157e4:	bl	11c4c <fputs_unlocked@plt>
   157e8:	add	r4, r4, #1
   157ec:	mov	r0, #1
   157f0:	mov	r1, r7
   157f4:	ldr	r2, [r5, #4]!
   157f8:	bl	1200c <__printf_chk@plt>
   157fc:	cmp	r4, r6
   15800:	bne	157e8 <__assert_fail@plt+0x365c>
   15804:	ldr	r0, [r8]
   15808:	ldr	r3, [r0, #20]
   1580c:	ldr	r2, [r0, #24]
   15810:	cmp	r3, r2
   15814:	addcc	r1, r3, #1
   15818:	strcc	r1, [r0, #20]
   1581c:	movcc	r2, #10
   15820:	strbcc	r2, [r3]
   15824:	popcc	{r4, r5, r6, r7, r8, pc}
   15828:	mov	r1, #10
   1582c:	pop	{r4, r5, r6, r7, r8, lr}
   15830:	b	1206c <__overflow@plt>
   15834:	andeq	r3, r2, ip, ror r8
   15838:	andeq	lr, r0, r4, lsr pc
   1583c:	andeq	r0, r0, r0, lsl r2
   15840:	push	{r4, r5, r6, r7, r8, lr}
   15844:	subs	r8, r0, #0
   15848:	ldr	r5, [pc, #168]	; 158f8 <__assert_fail@plt+0x376c>
   1584c:	mov	r4, r2
   15850:	add	r5, pc, r5
   15854:	beq	158d0 <__assert_fail@plt+0x3744>
   15858:	mov	r1, #0
   1585c:	mov	r7, #32
   15860:	bl	1e460 <close_stdout@@Base+0x31e4>
   15864:	ldr	r3, [pc, #144]	; 158fc <__assert_fail@plt+0x3770>
   15868:	ldr	r6, [r5, r3]
   1586c:	ldr	r1, [r6]
   15870:	rsb	r4, r0, r4
   15874:	mov	r0, r8
   15878:	bl	11c4c <fputs_unlocked@plt>
   1587c:	mov	r0, r8
   15880:	bl	11fac <strlen@plt>
   15884:	bic	r4, r4, r4, asr #31
   15888:	add	r8, r4, r0
   1588c:	ldr	r0, [r6]
   15890:	ldr	r1, [r0, #20]
   15894:	ldr	ip, [r0, #24]
   15898:	add	r5, r1, #1
   1589c:	cmp	r1, ip
   158a0:	strcc	r5, [r0, #20]
   158a4:	strbcc	r7, [r1]
   158a8:	bcs	158ec <__assert_fail@plt+0x3760>
   158ac:	subs	r4, r4, #1
   158b0:	bcs	1588c <__assert_fail@plt+0x3700>
   158b4:	ldr	r3, [pc, #68]	; 15900 <__assert_fail@plt+0x3774>
   158b8:	add	r3, pc, r3
   158bc:	ldr	r2, [r3, #484]	; 0x1e4
   158c0:	add	r2, r2, #1
   158c4:	add	r8, r2, r8
   158c8:	str	r8, [r3, #484]	; 0x1e4
   158cc:	pop	{r4, r5, r6, r7, r8, pc}
   158d0:	mov	r3, r1
   158d4:	ldr	r1, [pc, #40]	; 15904 <__assert_fail@plt+0x3778>
   158d8:	mov	r0, #1
   158dc:	mov	r8, r2
   158e0:	add	r1, pc, r1
   158e4:	bl	1200c <__printf_chk@plt>
   158e8:	b	158b4 <__assert_fail@plt+0x3728>
   158ec:	mov	r1, #32
   158f0:	bl	1206c <__overflow@plt>
   158f4:	b	158ac <__assert_fail@plt+0x3720>
   158f8:	andeq	r3, r2, r8, lsr #15
   158fc:	andeq	r0, r0, r0, lsl r2
   15900:			; <UNDEFINED> instruction: 0x00023ab0
   15904:	andeq	lr, r0, r4, lsl lr
   15908:	cmp	r2, #0
   1590c:	mov	r2, r1
   15910:	push	{lr}		; (str lr, [sp, #-4]!)
   15914:	mov	r1, r0
   15918:	sub	sp, sp, #12
   1591c:	beq	15944 <__assert_fail@plt+0x37b8>
   15920:	ldr	r3, [pc, #80]	; 15978 <__assert_fail@plt+0x37ec>
   15924:	add	r3, pc, r3
   15928:	ldrb	r3, [r3, #488]	; 0x1e8
   1592c:	cmp	r3, #0
   15930:	movne	r0, #0
   15934:	beq	15958 <__assert_fail@plt+0x37cc>
   15938:	add	sp, sp, #12
   1593c:	pop	{lr}		; (ldr lr, [sp], #4)
   15940:	b	15840 <__assert_fail@plt+0x36b4>
   15944:	ldr	r0, [pc, #48]	; 1597c <__assert_fail@plt+0x37f0>
   15948:	add	r0, pc, r0
   1594c:	add	sp, sp, #12
   15950:	pop	{lr}		; (ldr lr, [sp], #4)
   15954:	b	15840 <__assert_fail@plt+0x36b4>
   15958:	str	r1, [sp, #4]
   1595c:	str	r2, [sp]
   15960:	bl	1db08 <close_stdout@@Base+0x288c>
   15964:	ldr	r1, [sp, #4]
   15968:	ldr	r2, [sp]
   1596c:	add	sp, sp, #12
   15970:	pop	{lr}		; (ldr lr, [sp], #4)
   15974:	b	15840 <__assert_fail@plt+0x36b4>
   15978:	andeq	r3, r2, r4, asr #20
   1597c:			; <UNDEFINED> instruction: 0x0000edb4
   15980:	cmp	r2, #0
   15984:	mov	r2, r1
   15988:	push	{lr}		; (str lr, [sp, #-4]!)
   1598c:	mov	r1, r0
   15990:	sub	sp, sp, #12
   15994:	beq	159bc <__assert_fail@plt+0x3830>
   15998:	ldr	r3, [pc, #80]	; 159f0 <__assert_fail@plt+0x3864>
   1599c:	add	r3, pc, r3
   159a0:	ldrb	r3, [r3, #488]	; 0x1e8
   159a4:	cmp	r3, #0
   159a8:	movne	r0, #0
   159ac:	beq	159d0 <__assert_fail@plt+0x3844>
   159b0:	add	sp, sp, #12
   159b4:	pop	{lr}		; (ldr lr, [sp], #4)
   159b8:	b	15840 <__assert_fail@plt+0x36b4>
   159bc:	ldr	r0, [pc, #48]	; 159f4 <__assert_fail@plt+0x3868>
   159c0:	add	r0, pc, r0
   159c4:	add	sp, sp, #12
   159c8:	pop	{lr}		; (ldr lr, [sp], #4)
   159cc:	b	15840 <__assert_fail@plt+0x36b4>
   159d0:	str	r1, [sp, #4]
   159d4:	str	r2, [sp]
   159d8:	bl	1d928 <close_stdout@@Base+0x26ac>
   159dc:	ldr	r1, [sp, #4]
   159e0:	ldr	r2, [sp]
   159e4:	add	sp, sp, #12
   159e8:	pop	{lr}		; (ldr lr, [sp], #4)
   159ec:	b	15840 <__assert_fail@plt+0x36b4>
   159f0:	andeq	r3, r2, ip, asr #19
   159f4:	andeq	lr, r0, ip, lsr sp
   159f8:	ldr	r3, [pc, #24]	; 15a18 <__assert_fail@plt+0x388c>
   159fc:	add	r3, pc, r3
   15a00:	ldr	r2, [r3]
   15a04:	cmp	r2, #0
   15a08:	ldreq	r2, [r3, #492]	; 0x1ec
   15a0c:	addeq	r2, r2, #1
   15a10:	streq	r2, [r3, #492]	; 0x1ec
   15a14:	bx	lr
   15a18:	andeq	r3, r2, ip, ror #18
   15a1c:	push	{r3, r4, r5, r6, r7, lr}
   15a20:	mov	r6, r1
   15a24:	mov	r7, r2
   15a28:	mov	r4, r0
   15a2c:	bl	11fd0 <__errno_location@plt>
   15a30:	ldr	r5, [r0]
   15a34:	mov	r0, r7
   15a38:	bl	1fe58 <close_stdout@@Base+0x4bdc>
   15a3c:	mov	r2, r6
   15a40:	mov	r1, r5
   15a44:	mov	r3, r0
   15a48:	mov	r0, #0
   15a4c:	bl	11e98 <error@plt>
   15a50:	cmp	r4, #0
   15a54:	beq	15a6c <__assert_fail@plt+0x38e0>
   15a58:	ldr	r3, [pc, #40]	; 15a88 <__assert_fail@plt+0x38fc>
   15a5c:	mov	r2, #2
   15a60:	add	r3, pc, r3
   15a64:	str	r2, [r3, #496]	; 0x1f0
   15a68:	pop	{r3, r4, r5, r6, r7, pc}
   15a6c:	ldr	r3, [pc, #24]	; 15a8c <__assert_fail@plt+0x3900>
   15a70:	add	r3, pc, r3
   15a74:	ldr	r2, [r3, #496]	; 0x1f0
   15a78:	cmp	r2, #0
   15a7c:	moveq	r2, #1
   15a80:	streq	r2, [r3, #496]	; 0x1f0
   15a84:	pop	{r3, r4, r5, r6, r7, pc}
   15a88:	andeq	r3, r2, r8, lsl #18
   15a8c:	strdeq	r3, [r2], -r8
   15a90:	ldr	r2, [r1, #112]	; 0x70
   15a94:	mov	ip, r0
   15a98:	ldr	r3, [r0, #112]	; 0x70
   15a9c:	cmp	r2, #3
   15aa0:	cmpne	r2, #9
   15aa4:	movne	r2, #0
   15aa8:	moveq	r2, #1
   15aac:	cmp	r3, #3
   15ab0:	cmpne	r3, #9
   15ab4:	eor	r0, r2, #1
   15ab8:	movne	r3, #0
   15abc:	moveq	r3, #1
   15ac0:	tst	r3, r0
   15ac4:	bne	15b0c <__assert_fail@plt+0x3980>
   15ac8:	eor	r3, r3, #1
   15acc:	tst	r2, r3
   15ad0:	beq	15adc <__assert_fail@plt+0x3950>
   15ad4:	mov	r0, #1
   15ad8:	bx	lr
   15adc:	ldr	r3, [r1, #96]	; 0x60
   15ae0:	ldr	r2, [ip, #96]	; 0x60
   15ae4:	ldr	r0, [ip, #100]	; 0x64
   15ae8:	cmp	r2, r3
   15aec:	ldr	r3, [r1, #100]	; 0x64
   15af0:	blt	15b0c <__assert_fail@plt+0x3980>
   15af4:	bgt	15ad4 <__assert_fail@plt+0x3948>
   15af8:	subs	r0, r0, r3
   15afc:	bxne	lr
   15b00:	ldr	r0, [r1]
   15b04:	ldr	r1, [ip]
   15b08:	b	11c88 <strcmp@plt>
   15b0c:	mvn	r0, #0
   15b10:	bx	lr
   15b14:	ldr	r2, [r1, #112]	; 0x70
   15b18:	mov	ip, r0
   15b1c:	ldr	r3, [r0, #112]	; 0x70
   15b20:	cmp	r2, #3
   15b24:	cmpne	r2, #9
   15b28:	movne	r2, #0
   15b2c:	moveq	r2, #1
   15b30:	cmp	r3, #3
   15b34:	cmpne	r3, #9
   15b38:	eor	r0, r2, #1
   15b3c:	movne	r3, #0
   15b40:	moveq	r3, #1
   15b44:	tst	r3, r0
   15b48:	bne	15b90 <__assert_fail@plt+0x3a04>
   15b4c:	eor	r3, r3, #1
   15b50:	tst	r2, r3
   15b54:	beq	15b60 <__assert_fail@plt+0x39d4>
   15b58:	mov	r0, #1
   15b5c:	bx	lr
   15b60:	ldr	r3, [r1, #88]	; 0x58
   15b64:	ldr	r2, [ip, #88]	; 0x58
   15b68:	ldr	r0, [ip, #92]	; 0x5c
   15b6c:	cmp	r2, r3
   15b70:	ldr	r3, [r1, #92]	; 0x5c
   15b74:	blt	15b90 <__assert_fail@plt+0x3a04>
   15b78:	bgt	15b58 <__assert_fail@plt+0x39cc>
   15b7c:	subs	r0, r0, r3
   15b80:	bxne	lr
   15b84:	ldr	r0, [r1]
   15b88:	ldr	r1, [ip]
   15b8c:	b	11c88 <strcmp@plt>
   15b90:	mvn	r0, #0
   15b94:	bx	lr
   15b98:	ldr	r2, [r1, #112]	; 0x70
   15b9c:	ldr	r3, [r0, #112]	; 0x70
   15ba0:	cmp	r2, #3
   15ba4:	cmpne	r2, #9
   15ba8:	movne	r2, #0
   15bac:	moveq	r2, #1
   15bb0:	cmp	r3, #3
   15bb4:	cmpne	r3, #9
   15bb8:	eor	ip, r2, #1
   15bbc:	movne	r3, #0
   15bc0:	moveq	r3, #1
   15bc4:	tst	r3, ip
   15bc8:	bne	15c10 <__assert_fail@plt+0x3a84>
   15bcc:	eor	r3, r3, #1
   15bd0:	tst	r2, r3
   15bd4:	beq	15be0 <__assert_fail@plt+0x3a54>
   15bd8:	mov	r0, #1
   15bdc:	bx	lr
   15be0:	ldr	r3, [r0, #80]	; 0x50
   15be4:	ldr	r2, [r1, #80]	; 0x50
   15be8:	ldr	ip, [r1, #84]	; 0x54
   15bec:	cmp	r2, r3
   15bf0:	ldr	r3, [r0, #84]	; 0x54
   15bf4:	blt	15c10 <__assert_fail@plt+0x3a84>
   15bf8:	bgt	15bd8 <__assert_fail@plt+0x3a4c>
   15bfc:	subs	r3, ip, r3
   15c00:	bne	15c18 <__assert_fail@plt+0x3a8c>
   15c04:	ldr	r0, [r0]
   15c08:	ldr	r1, [r1]
   15c0c:	b	11c88 <strcmp@plt>
   15c10:	mvn	r0, #0
   15c14:	bx	lr
   15c18:	mov	r0, r3
   15c1c:	bx	lr
   15c20:	push	{r4, r5}
   15c24:	mov	ip, r0
   15c28:	ldr	r2, [r1, #112]	; 0x70
   15c2c:	ldr	r3, [r0, #112]	; 0x70
   15c30:	cmp	r2, #3
   15c34:	cmpne	r2, #9
   15c38:	movne	r2, #0
   15c3c:	moveq	r2, #1
   15c40:	cmp	r3, #3
   15c44:	cmpne	r3, #9
   15c48:	eor	r0, r2, #1
   15c4c:	movne	r3, #0
   15c50:	moveq	r3, #1
   15c54:	tst	r3, r0
   15c58:	bne	15ca4 <__assert_fail@plt+0x3b18>
   15c5c:	eor	r3, r3, #1
   15c60:	tst	r2, r3
   15c64:	beq	15c74 <__assert_fail@plt+0x3ae8>
   15c68:	mov	r0, #1
   15c6c:	pop	{r4, r5}
   15c70:	bx	lr
   15c74:	ldrd	r2, [ip, #56]	; 0x38
   15c78:	ldrd	r4, [r1, #56]	; 0x38
   15c7c:	cmp	r2, r4
   15c80:	sbcs	r0, r3, r5
   15c84:	blt	15ca4 <__assert_fail@plt+0x3b18>
   15c88:	cmp	r4, r2
   15c8c:	sbcs	r0, r5, r3
   15c90:	blt	15c68 <__assert_fail@plt+0x3adc>
   15c94:	ldr	r0, [r1]
   15c98:	pop	{r4, r5}
   15c9c:	ldr	r1, [ip]
   15ca0:	b	11c88 <strcmp@plt>
   15ca4:	mvn	r0, #0
   15ca8:	pop	{r4, r5}
   15cac:	bx	lr
   15cb0:	ldr	r2, [r1, #112]	; 0x70
   15cb4:	ldr	r3, [r0, #112]	; 0x70
   15cb8:	cmp	r2, #3
   15cbc:	cmpne	r2, #9
   15cc0:	movne	r2, #0
   15cc4:	moveq	r2, #1
   15cc8:	cmp	r3, #3
   15ccc:	cmpne	r3, #9
   15cd0:	eor	ip, r2, #1
   15cd4:	movne	r3, #0
   15cd8:	moveq	r3, #1
   15cdc:	tst	r3, ip
   15ce0:	bne	15d04 <__assert_fail@plt+0x3b78>
   15ce4:	eor	r3, r3, #1
   15ce8:	tst	r2, r3
   15cec:	beq	15cf8 <__assert_fail@plt+0x3b6c>
   15cf0:	mov	r0, #1
   15cf4:	bx	lr
   15cf8:	ldr	r0, [r0]
   15cfc:	ldr	r1, [r1]
   15d00:	b	150ac <__assert_fail@plt+0x2f20>
   15d04:	mvn	r0, #0
   15d08:	bx	lr
   15d0c:	ldr	r2, [r1, #112]	; 0x70
   15d10:	ldr	r3, [r0, #112]	; 0x70
   15d14:	cmp	r2, #3
   15d18:	cmpne	r2, #9
   15d1c:	movne	r2, #0
   15d20:	moveq	r2, #1
   15d24:	cmp	r3, #3
   15d28:	cmpne	r3, #9
   15d2c:	eor	ip, r2, #1
   15d30:	movne	r3, #0
   15d34:	moveq	r3, #1
   15d38:	tst	r3, ip
   15d3c:	bne	15d60 <__assert_fail@plt+0x3bd4>
   15d40:	eor	r3, r3, #1
   15d44:	tst	r2, r3
   15d48:	bne	15d58 <__assert_fail@plt+0x3bcc>
   15d4c:	ldr	r0, [r0]
   15d50:	ldr	r1, [r1]
   15d54:	b	11c88 <strcmp@plt>
   15d58:	mov	r0, #1
   15d5c:	bx	lr
   15d60:	mvn	r0, #0
   15d64:	bx	lr
   15d68:	ldr	r2, [r1, #112]	; 0x70
   15d6c:	mov	ip, r0
   15d70:	ldr	r3, [r0, #112]	; 0x70
   15d74:	cmp	r2, #3
   15d78:	cmpne	r2, #9
   15d7c:	movne	r2, #0
   15d80:	moveq	r2, #1
   15d84:	cmp	r3, #3
   15d88:	cmpne	r3, #9
   15d8c:	eor	r0, r2, #1
   15d90:	movne	r3, #0
   15d94:	moveq	r3, #1
   15d98:	tst	r3, r0
   15d9c:	bne	15dc0 <__assert_fail@plt+0x3c34>
   15da0:	eor	r3, r3, #1
   15da4:	tst	r2, r3
   15da8:	beq	15db4 <__assert_fail@plt+0x3c28>
   15dac:	mov	r0, #1
   15db0:	bx	lr
   15db4:	ldr	r0, [r1]
   15db8:	ldr	r1, [ip]
   15dbc:	b	150ac <__assert_fail@plt+0x2f20>
   15dc0:	mvn	r0, #0
   15dc4:	bx	lr
   15dc8:	ldr	r2, [r1, #112]	; 0x70
   15dcc:	mov	ip, r0
   15dd0:	ldr	r3, [r0, #112]	; 0x70
   15dd4:	cmp	r2, #3
   15dd8:	cmpne	r2, #9
   15ddc:	movne	r2, #0
   15de0:	moveq	r2, #1
   15de4:	cmp	r3, #3
   15de8:	cmpne	r3, #9
   15dec:	eor	r0, r2, #1
   15df0:	movne	r3, #0
   15df4:	moveq	r3, #1
   15df8:	tst	r3, r0
   15dfc:	bne	15e20 <__assert_fail@plt+0x3c94>
   15e00:	eor	r3, r3, #1
   15e04:	tst	r2, r3
   15e08:	bne	15e18 <__assert_fail@plt+0x3c8c>
   15e0c:	ldr	r0, [r1]
   15e10:	ldr	r1, [ip]
   15e14:	b	11c88 <strcmp@plt>
   15e18:	mov	r0, #1
   15e1c:	bx	lr
   15e20:	mvn	r0, #0
   15e24:	bx	lr
   15e28:	cmp	r0, #0
   15e2c:	beq	15e58 <__assert_fail@plt+0x3ccc>
   15e30:	and	r3, r1, #61440	; 0xf000
   15e34:	cmp	r3, #32768	; 0x8000
   15e38:	bne	15e80 <__assert_fail@plt+0x3cf4>
   15e3c:	ldr	r3, [pc, #228]	; 15f28 <__assert_fail@plt+0x3d9c>
   15e40:	add	r3, pc, r3
   15e44:	ldr	r3, [r3, #500]	; 0x1f4
   15e48:	cmp	r3, #3
   15e4c:	beq	15ec4 <__assert_fail@plt+0x3d38>
   15e50:	mov	r0, #0
   15e54:	bx	lr
   15e58:	cmp	r2, #5
   15e5c:	bxeq	lr
   15e60:	cmp	r2, #3
   15e64:	cmpne	r2, #9
   15e68:	movne	r3, #0
   15e6c:	moveq	r3, #1
   15e70:	cmp	r3, #0
   15e74:	beq	15e94 <__assert_fail@plt+0x3d08>
   15e78:	mov	r0, #47	; 0x2f
   15e7c:	bx	lr
   15e80:	subs	ip, r3, #16384	; 0x4000
   15e84:	rsbs	r3, ip, #0
   15e88:	adcs	r3, r3, ip
   15e8c:	cmp	r3, #0
   15e90:	bne	15e78 <__assert_fail@plt+0x3cec>
   15e94:	ldr	ip, [pc, #144]	; 15f2c <__assert_fail@plt+0x3da0>
   15e98:	add	ip, pc, ip
   15e9c:	ldr	ip, [ip, #500]	; 0x1f4
   15ea0:	cmp	ip, #1
   15ea4:	beq	15f10 <__assert_fail@plt+0x3d84>
   15ea8:	cmp	r0, #0
   15eac:	beq	15ed4 <__assert_fail@plt+0x3d48>
   15eb0:	and	r1, r1, #61440	; 0xf000
   15eb4:	cmp	r1, #40960	; 0xa000
   15eb8:	bne	15eec <__assert_fail@plt+0x3d60>
   15ebc:	mov	r0, #64	; 0x40
   15ec0:	bx	lr
   15ec4:	tst	r1, #73	; 0x49
   15ec8:	moveq	r0, #0
   15ecc:	movne	r0, #42	; 0x2a
   15ed0:	bx	lr
   15ed4:	cmp	r2, #6
   15ed8:	beq	15ebc <__assert_fail@plt+0x3d30>
   15edc:	cmp	r2, #1
   15ee0:	bne	15f18 <__assert_fail@plt+0x3d8c>
   15ee4:	mov	r0, #124	; 0x7c
   15ee8:	bx	lr
   15eec:	cmp	r1, #4096	; 0x1000
   15ef0:	beq	15ee4 <__assert_fail@plt+0x3d58>
   15ef4:	subs	r1, r1, #49152	; 0xc000
   15ef8:	rsbs	r2, r1, #0
   15efc:	adcs	r2, r2, r1
   15f00:	cmp	r2, #0
   15f04:	movne	r0, #61	; 0x3d
   15f08:	moveq	r0, #0
   15f0c:	bx	lr
   15f10:	mov	r0, r3
   15f14:	bx	lr
   15f18:	subs	r3, r2, #7
   15f1c:	rsbs	r2, r3, #0
   15f20:	adcs	r2, r2, r3
   15f24:	b	15f00 <__assert_fail@plt+0x3d74>
   15f28:	andeq	r3, r2, r8, lsr #10
   15f2c:	ldrdeq	r3, [r2], -r0
   15f30:	push	{r4, lr}
   15f34:	bl	15e28 <__assert_fail@plt+0x3c9c>
   15f38:	ldr	r3, [pc, #92]	; 15f9c <__assert_fail@plt+0x3e10>
   15f3c:	add	r3, pc, r3
   15f40:	subs	r4, r0, #0
   15f44:	beq	15f84 <__assert_fail@plt+0x3df8>
   15f48:	ldr	r2, [pc, #80]	; 15fa0 <__assert_fail@plt+0x3e14>
   15f4c:	ldr	r3, [r3, r2]
   15f50:	ldr	r0, [r3]
   15f54:	ldr	r3, [r0, #20]
   15f58:	ldr	r2, [r0, #24]
   15f5c:	cmp	r3, r2
   15f60:	addcc	r2, r3, #1
   15f64:	strcc	r2, [r0, #20]
   15f68:	strbcc	r4, [r3]
   15f6c:	bcs	15f90 <__assert_fail@plt+0x3e04>
   15f70:	ldr	r3, [pc, #44]	; 15fa4 <__assert_fail@plt+0x3e18>
   15f74:	add	r3, pc, r3
   15f78:	ldr	r2, [r3, #484]	; 0x1e4
   15f7c:	add	r2, r2, #1
   15f80:	str	r2, [r3, #484]	; 0x1e4
   15f84:	adds	r0, r4, #0
   15f88:	movne	r0, #1
   15f8c:	pop	{r4, pc}
   15f90:	mov	r1, r4
   15f94:	bl	1206c <__overflow@plt>
   15f98:	b	15f70 <__assert_fail@plt+0x3de4>
   15f9c:	strheq	r3, [r2], -ip
   15fa0:	andeq	r0, r0, r0, lsl r2
   15fa4:	strdeq	r3, [r2], -r4
   15fa8:	ldr	r3, [pc, #312]	; 160e8 <__assert_fail@plt+0x3f5c>
   15fac:	ldr	r1, [pc, #312]	; 160ec <__assert_fail@plt+0x3f60>
   15fb0:	add	r3, pc, r3
   15fb4:	ldr	r2, [pc, #308]	; 160f0 <__assert_fail@plt+0x3f64>
   15fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fbc:	add	r2, pc, r2
   15fc0:	ldr	fp, [r3, r1]
   15fc4:	sub	sp, sp, #684	; 0x2ac
   15fc8:	ldrb	ip, [r2, #504]	; 0x1f8
   15fcc:	mov	sl, r0
   15fd0:	ldr	r3, [fp]
   15fd4:	cmp	ip, #0
   15fd8:	moveq	r5, ip
   15fdc:	str	r3, [sp, #676]	; 0x2a4
   15fe0:	beq	15ff8 <__assert_fail@plt+0x3e6c>
   15fe4:	ldr	r3, [r2, #508]	; 0x1fc
   15fe8:	cmp	r3, #4
   15fec:	beq	160cc <__assert_fail@plt+0x3f40>
   15ff0:	ldr	ip, [r2, #16]
   15ff4:	add	r5, ip, #1
   15ff8:	ldr	r2, [pc, #244]	; 160f4 <__assert_fail@plt+0x3f68>
   15ffc:	add	r2, pc, r2
   16000:	ldrb	r3, [r2, #512]	; 0x200
   16004:	cmp	r3, #0
   16008:	beq	16024 <__assert_fail@plt+0x3e98>
   1600c:	ldr	r3, [r2, #508]	; 0x1fc
   16010:	cmp	r3, #4
   16014:	beq	16088 <__assert_fail@plt+0x3efc>
   16018:	ldr	r0, [r2, #20]
   1601c:	add	r0, r0, #1
   16020:	add	r5, r5, r0
   16024:	ldr	r4, [pc, #204]	; 160f8 <__assert_fail@plt+0x3f6c>
   16028:	add	r3, sp, #20
   1602c:	mov	r0, #0
   16030:	ldr	r1, [sl]
   16034:	add	r4, pc, r4
   16038:	ldr	r2, [r4, #528]	; 0x210
   1603c:	bl	153a8 <__assert_fail@plt+0x321c>
   16040:	ldr	r3, [r4, #500]	; 0x1f4
   16044:	ldr	r4, [sp, #20]
   16048:	cmp	r3, #0
   1604c:	add	r4, r5, r4
   16050:	beq	1606c <__assert_fail@plt+0x3ee0>
   16054:	ldrb	r0, [sl, #124]	; 0x7c
   16058:	ldr	r1, [sl, #24]
   1605c:	ldr	r2, [sl, #112]	; 0x70
   16060:	bl	15e28 <__assert_fail@plt+0x3c9c>
   16064:	cmp	r0, #0
   16068:	addne	r4, r4, #1
   1606c:	ldr	r2, [sp, #676]	; 0x2a4
   16070:	mov	r0, r4
   16074:	ldr	r3, [fp]
   16078:	cmp	r2, r3
   1607c:	bne	160e4 <__assert_fail@plt+0x3f58>
   16080:	add	sp, sp, #684	; 0x2ac
   16084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16088:	ldrb	r3, [sl, #124]	; 0x7c
   1608c:	cmp	r3, #0
   16090:	moveq	r0, #2
   16094:	beq	16020 <__assert_fail@plt+0x3e94>
   16098:	mov	r1, #520	; 0x208
   1609c:	ldr	r3, [r2, #516]	; 0x204
   160a0:	ldrd	r6, [r2, r1]
   160a4:	mov	r8, #512	; 0x200
   160a8:	ldrd	r0, [sl, #72]	; 0x48
   160ac:	add	r2, sp, #24
   160b0:	mov	r9, #0
   160b4:	strd	r8, [sp]
   160b8:	strd	r6, [sp, #8]
   160bc:	bl	1cd00 <close_stdout@@Base+0x1a84>
   160c0:	bl	11fac <strlen@plt>
   160c4:	add	r0, r0, #1
   160c8:	b	16020 <__assert_fail@plt+0x3e94>
   160cc:	ldrd	r0, [r0, #104]	; 0x68
   160d0:	add	r2, sp, #24
   160d4:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   160d8:	bl	11fac <strlen@plt>
   160dc:	add	r5, r0, #1
   160e0:	b	15ff8 <__assert_fail@plt+0x3e6c>
   160e4:	bl	11d78 <__stack_chk_fail@plt>
   160e8:	andeq	r3, r2, r8, asr #32
   160ec:	andeq	r0, r0, r0, ror #3
   160f0:	andeq	r3, r2, ip, lsr #7
   160f4:	andeq	r3, r2, ip, ror #6
   160f8:	andeq	r3, r2, r4, lsr r3
   160fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16100:	mov	r8, r0
   16104:	ldr	r4, [pc, #752]	; 163fc <__assert_fail@plt+0x4270>
   16108:	sub	sp, sp, #20
   1610c:	add	r4, pc, r4
   16110:	ldr	r2, [r4, #8]
   16114:	ldr	r3, [r4, #532]	; 0x214
   16118:	ldr	r1, [r4, #536]	; 0x218
   1611c:	cmp	r3, r2
   16120:	movcc	sl, r3
   16124:	movcs	sl, r2
   16128:	cmp	sl, r1
   1612c:	bls	16308 <__assert_fail@plt+0x417c>
   16130:	cmp	sl, r3, lsr #1
   16134:	bcc	163cc <__assert_fail@plt+0x4240>
   16138:	movw	r2, #21845	; 0x5555
   1613c:	movt	r2, #5461	; 0x1555
   16140:	cmp	r3, r2
   16144:	ldr	r0, [r4, #540]	; 0x21c
   16148:	bhi	163f8 <__assert_fail@plt+0x426c>
   1614c:	add	r1, r3, r3, lsl #1
   16150:	lsl	r1, r1, #2
   16154:	bl	21e24 <close_stdout@@Base+0x6ba8>
   16158:	ldr	r5, [r4, #532]	; 0x214
   1615c:	str	r0, [r4, #540]	; 0x21c
   16160:	ldr	r4, [pc, #664]	; 16400 <__assert_fail@plt+0x4274>
   16164:	add	r4, pc, r4
   16168:	ldr	r1, [r4, #536]	; 0x218
   1616c:	add	r6, r1, #1
   16170:	rsb	r1, r1, r5
   16174:	add	r6, r6, r5
   16178:	cmp	r5, r6
   1617c:	mul	r7, r1, r6
   16180:	bhi	163f8 <__assert_fail@plt+0x426c>
   16184:	mov	r0, r7
   16188:	bl	234ec <close_stdout@@Base+0x8270>
   1618c:	cmp	r6, r0
   16190:	bne	163f8 <__assert_fail@plt+0x426c>
   16194:	lsr	r0, r7, #1
   16198:	cmn	r0, #-1073741823	; 0xc0000001
   1619c:	bhi	163f8 <__assert_fail@plt+0x426c>
   161a0:	lsl	r0, r0, #2
   161a4:	bl	21dcc <close_stdout@@Base+0x6b50>
   161a8:	ldr	r2, [r4, #536]	; 0x218
   161ac:	cmp	r5, r2
   161b0:	bls	161e8 <__assert_fail@plt+0x405c>
   161b4:	ldr	ip, [r4, #540]	; 0x21c
   161b8:	add	r3, r2, r2, lsl #1
   161bc:	add	r1, r5, r5, lsl #1
   161c0:	add	r2, r2, #1
   161c4:	add	r3, ip, r3, lsl #2
   161c8:	lsl	r2, r2, #2
   161cc:	add	r1, ip, r1, lsl #2
   161d0:	str	r0, [r3, #8]
   161d4:	add	r3, r3, #12
   161d8:	cmp	r3, r1
   161dc:	add	r0, r0, r2
   161e0:	add	r2, r2, #4
   161e4:	bne	161d0 <__assert_fail@plt+0x4044>
   161e8:	ldr	r3, [pc, #532]	; 16404 <__assert_fail@plt+0x4278>
   161ec:	cmp	sl, #0
   161f0:	add	r3, pc, r3
   161f4:	str	r5, [r3, #536]	; 0x218
   161f8:	ldr	r6, [r3, #8]
   161fc:	bne	16314 <__assert_fail@plt+0x4188>
   16200:	ldr	r7, [pc, #512]	; 16408 <__assert_fail@plt+0x427c>
   16204:	cmp	r6, #0
   16208:	mov	r9, #0
   1620c:	add	r7, pc, r7
   16210:	beq	16378 <__assert_fail@plt+0x41ec>
   16214:	ldr	r3, [r7, #56]	; 0x38
   16218:	ldr	r0, [r3, r9, lsl #2]
   1621c:	bl	15fa8 <__assert_fail@plt+0x3e1c>
   16220:	ldr	r3, [r7, #8]
   16224:	cmp	sl, #0
   16228:	str	r3, [sp, #12]
   1622c:	mov	r6, r0
   16230:	beq	16368 <__assert_fail@plt+0x41dc>
   16234:	ldr	r3, [r7, #544]	; 0x220
   16238:	mov	r4, #1
   1623c:	ldr	r5, [r7, #540]	; 0x21c
   16240:	str	r3, [sp, #4]
   16244:	add	r5, r5, #8
   16248:	ldr	r3, [sp, #12]
   1624c:	sub	r3, r3, #1
   16250:	str	r3, [sp, #8]
   16254:	b	162d8 <__assert_fail@plt+0x414c>
   16258:	ldr	r3, [sp, #8]
   1625c:	mov	r1, r4
   16260:	add	r0, r3, r4
   16264:	bl	234ec <close_stdout@@Base+0x8270>
   16268:	mov	r1, r0
   1626c:	mov	r0, r9
   16270:	bl	234ec <close_stdout@@Base+0x8270>
   16274:	mov	r3, r4
   16278:	mov	r1, r0
   1627c:	ldr	r2, [r5]
   16280:	cmp	fp, r1
   16284:	movne	fp, #2
   16288:	moveq	fp, #0
   1628c:	ldr	r0, [r2, r1, lsl #2]
   16290:	add	fp, fp, r6
   16294:	cmp	fp, r0
   16298:	bls	162c8 <__assert_fail@plt+0x413c>
   1629c:	ldr	ip, [r5, #-4]
   162a0:	rsb	r0, r0, ip
   162a4:	add	r0, r0, fp
   162a8:	str	r0, [r5, #-4]
   162ac:	str	fp, [r2, r1, lsl #2]
   162b0:	ldr	r1, [sp, #4]
   162b4:	ldr	r2, [r5, #-4]
   162b8:	cmp	r2, r1
   162bc:	movcs	r2, #0
   162c0:	movcc	r2, #1
   162c4:	strb	r2, [r5, #-8]
   162c8:	cmp	sl, r3
   162cc:	add	r4, r4, #1
   162d0:	add	r5, r5, #12
   162d4:	bls	16368 <__assert_fail@plt+0x41dc>
   162d8:	ldrb	r3, [r5, #-8]
   162dc:	sub	fp, r4, #1
   162e0:	cmp	r3, #0
   162e4:	moveq	r3, r4
   162e8:	beq	162c8 <__assert_fail@plt+0x413c>
   162ec:	cmp	r8, #0
   162f0:	bne	16258 <__assert_fail@plt+0x40cc>
   162f4:	mov	r0, r9
   162f8:	mov	r1, r4
   162fc:	bl	236d8 <close_stdout@@Base+0x845c>
   16300:	mov	r3, r4
   16304:	b	1627c <__assert_fail@plt+0x40f0>
   16308:	cmp	sl, #0
   1630c:	mov	r6, r2
   16310:	beq	16200 <__assert_fail@plt+0x4074>
   16314:	ldr	r3, [pc, #240]	; 1640c <__assert_fail@plt+0x4280>
   16318:	mov	r0, #0
   1631c:	mov	r5, #1
   16320:	mov	ip, #3
   16324:	add	r3, pc, r3
   16328:	ldr	r1, [r3, #540]	; 0x21c
   1632c:	add	r4, r0, #1
   16330:	mov	r3, #0
   16334:	strb	r5, [r1]
   16338:	add	r2, r4, r4, lsl #1
   1633c:	str	r2, [r1, #4]
   16340:	ldr	r2, [r1, #8]
   16344:	str	ip, [r2, r3, lsl #2]
   16348:	add	r3, r3, #1
   1634c:	cmp	r3, r0
   16350:	bls	16340 <__assert_fail@plt+0x41b4>
   16354:	cmp	r4, sl
   16358:	add	r1, r1, #12
   1635c:	beq	16200 <__assert_fail@plt+0x4074>
   16360:	mov	r0, r4
   16364:	b	1632c <__assert_fail@plt+0x41a0>
   16368:	ldr	r3, [sp, #12]
   1636c:	add	r9, r9, #1
   16370:	cmp	r9, r3
   16374:	bcc	16214 <__assert_fail@plt+0x4088>
   16378:	cmp	sl, #1
   1637c:	bls	163c0 <__assert_fail@plt+0x4234>
   16380:	ldr	r2, [pc, #136]	; 16410 <__assert_fail@plt+0x4284>
   16384:	add	r3, sl, sl, lsl #1
   16388:	add	r2, pc, r2
   1638c:	ldr	r2, [r2, #540]	; 0x21c
   16390:	add	r3, r2, r3, lsl #2
   16394:	ldrb	r2, [r3, #-12]
   16398:	cmp	r2, #0
   1639c:	beq	163b4 <__assert_fail@plt+0x4228>
   163a0:	b	163c0 <__assert_fail@plt+0x4234>
   163a4:	sub	r3, r3, #12
   163a8:	ldrb	r2, [r3, #-12]
   163ac:	cmp	r2, #0
   163b0:	bne	163c0 <__assert_fail@plt+0x4234>
   163b4:	sub	sl, sl, #1
   163b8:	cmp	sl, #1
   163bc:	bne	163a4 <__assert_fail@plt+0x4218>
   163c0:	mov	r0, sl
   163c4:	add	sp, sp, #20
   163c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163cc:	movw	r3, #43690	; 0xaaaa
   163d0:	movt	r3, #2730	; 0xaaa
   163d4:	cmp	sl, r3
   163d8:	ldr	r0, [r4, #540]	; 0x21c
   163dc:	bhi	163f8 <__assert_fail@plt+0x426c>
   163e0:	lsl	r5, sl, #1
   163e4:	add	r1, r5, sl
   163e8:	lsl	r1, r1, #3
   163ec:	bl	21e24 <close_stdout@@Base+0x6ba8>
   163f0:	str	r0, [r4, #540]	; 0x21c
   163f4:	b	16160 <__assert_fail@plt+0x3fd4>
   163f8:	bl	21fe0 <close_stdout@@Base+0x6d64>
   163fc:	andeq	r3, r2, ip, asr r2
   16400:	andeq	r3, r2, r4, lsl #4
   16404:	andeq	r3, r2, r8, ror r1
   16408:	andeq	r3, r2, ip, asr r1
   1640c:	andeq	r3, r2, r4, asr #32
   16410:	andeq	r2, r2, r0, ror #31
   16414:	ldr	r3, [pc, #144]	; 164ac <__assert_fail@plt+0x4320>
   16418:	ldr	r1, [pc, #144]	; 164b0 <__assert_fail@plt+0x4324>
   1641c:	add	r3, pc, r3
   16420:	ldr	r2, [pc, #140]	; 164b4 <__assert_fail@plt+0x4328>
   16424:	push	{r4, r5, r6, lr}
   16428:	add	r2, pc, r2
   1642c:	ldr	r4, [r3, r1]
   16430:	sub	sp, sp, #24
   16434:	ldrb	r5, [r2, #488]	; 0x1e8
   16438:	mov	r6, r0
   1643c:	ldr	r3, [r4]
   16440:	cmp	r5, #0
   16444:	str	r3, [sp, #20]
   16448:	beq	1648c <__assert_fail@plt+0x4300>
   1644c:	add	r5, sp, #8
   16450:	ldr	r3, [pc, #96]	; 164b8 <__assert_fail@plt+0x432c>
   16454:	str	r6, [sp]
   16458:	mov	r1, #1
   1645c:	mov	r2, #11
   16460:	mov	r0, r5
   16464:	add	r3, pc, r3
   16468:	bl	11fdc <__sprintf_chk@plt>
   1646c:	mov	r0, r5
   16470:	bl	11fac <strlen@plt>
   16474:	ldr	r2, [sp, #20]
   16478:	ldr	r3, [r4]
   1647c:	cmp	r2, r3
   16480:	bne	164a8 <__assert_fail@plt+0x431c>
   16484:	add	sp, sp, #24
   16488:	pop	{r4, r5, r6, pc}
   1648c:	bl	1d928 <close_stdout@@Base+0x26ac>
   16490:	cmp	r0, #0
   16494:	beq	1644c <__assert_fail@plt+0x42c0>
   16498:	mov	r1, r5
   1649c:	bl	1e460 <close_stdout@@Base+0x31e4>
   164a0:	bic	r0, r0, r0, asr #31
   164a4:	b	16474 <__assert_fail@plt+0x42e8>
   164a8:	bl	11d78 <__stack_chk_fail@plt>
   164ac:	ldrdeq	r2, [r2], -ip
   164b0:	andeq	r0, r0, r0, ror #3
   164b4:	andeq	r2, r2, r0, asr #30
   164b8:	muleq	r0, ip, r2
   164bc:	ldr	r2, [r1, #112]	; 0x70
   164c0:	mov	ip, r0
   164c4:	ldr	r3, [r0, #112]	; 0x70
   164c8:	cmp	r2, #3
   164cc:	cmpne	r2, #9
   164d0:	movne	r2, #0
   164d4:	moveq	r2, #1
   164d8:	cmp	r3, #3
   164dc:	cmpne	r3, #9
   164e0:	eor	r0, r2, #1
   164e4:	movne	r3, #0
   164e8:	moveq	r3, #1
   164ec:	tst	r3, r0
   164f0:	bne	16514 <__assert_fail@plt+0x4388>
   164f4:	eor	r3, r3, #1
   164f8:	tst	r2, r3
   164fc:	beq	16508 <__assert_fail@plt+0x437c>
   16500:	mov	r0, #1
   16504:	bx	lr
   16508:	ldr	r0, [r1]
   1650c:	ldr	r1, [ip]
   16510:	b	1b7e0 <close_stdout@@Base+0x564>
   16514:	mvn	r0, #0
   16518:	bx	lr
   1651c:	ldr	r2, [r1, #112]	; 0x70
   16520:	ldr	r3, [r0, #112]	; 0x70
   16524:	cmp	r2, #3
   16528:	cmpne	r2, #9
   1652c:	movne	r2, #0
   16530:	moveq	r2, #1
   16534:	cmp	r3, #3
   16538:	cmpne	r3, #9
   1653c:	eor	ip, r2, #1
   16540:	movne	r3, #0
   16544:	moveq	r3, #1
   16548:	tst	r3, ip
   1654c:	bne	16570 <__assert_fail@plt+0x43e4>
   16550:	eor	r3, r3, #1
   16554:	tst	r2, r3
   16558:	beq	16564 <__assert_fail@plt+0x43d8>
   1655c:	mov	r0, #1
   16560:	bx	lr
   16564:	ldr	r0, [r0]
   16568:	ldr	r1, [r1]
   1656c:	b	1b7e0 <close_stdout@@Base+0x564>
   16570:	mvn	r0, #0
   16574:	bx	lr
   16578:	push	{r4, r5, r6, lr}
   1657c:	mov	r4, r1
   16580:	ldr	r2, [r1, #112]	; 0x70
   16584:	ldr	r3, [r0, #112]	; 0x70
   16588:	cmp	r2, #3
   1658c:	cmpne	r2, #9
   16590:	movne	r2, #0
   16594:	moveq	r2, #1
   16598:	cmp	r3, #3
   1659c:	cmpne	r3, #9
   165a0:	eor	r1, r2, #1
   165a4:	movne	r3, #0
   165a8:	moveq	r3, #1
   165ac:	tst	r3, r1
   165b0:	bne	1662c <__assert_fail@plt+0x44a0>
   165b4:	eor	r3, r3, #1
   165b8:	tst	r2, r3
   165bc:	beq	165c8 <__assert_fail@plt+0x443c>
   165c0:	mov	r0, #1
   165c4:	pop	{r4, r5, r6, pc}
   165c8:	ldr	r6, [r0]
   165cc:	mov	r1, #46	; 0x2e
   165d0:	mov	r0, r6
   165d4:	bl	1209c <strrchr@plt>
   165d8:	ldr	r4, [r4]
   165dc:	mov	r1, #46	; 0x2e
   165e0:	mov	r5, r0
   165e4:	mov	r0, r4
   165e8:	bl	1209c <strrchr@plt>
   165ec:	cmp	r5, #0
   165f0:	ldr	r1, [pc, #60]	; 16634 <__assert_fail@plt+0x44a8>
   165f4:	add	r1, pc, r1
   165f8:	mov	r3, r0
   165fc:	ldr	r0, [pc, #52]	; 16638 <__assert_fail@plt+0x44ac>
   16600:	add	r0, pc, r0
   16604:	movne	r0, r5
   16608:	cmp	r3, #0
   1660c:	movne	r1, r3
   16610:	bl	11c88 <strcmp@plt>
   16614:	cmp	r0, #0
   16618:	popne	{r4, r5, r6, pc}
   1661c:	mov	r0, r6
   16620:	mov	r1, r4
   16624:	pop	{r4, r5, r6, lr}
   16628:	b	11c88 <strcmp@plt>
   1662c:	mvn	r0, #0
   16630:	pop	{r4, r5, r6, pc}
   16634:	ldrdeq	r0, [r1], -ip
   16638:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   1663c:	ldr	r3, [pc, #268]	; 16750 <__assert_fail@plt+0x45c4>
   16640:	ldr	r2, [pc, #268]	; 16754 <__assert_fail@plt+0x45c8>
   16644:	add	r3, pc, r3
   16648:	ldr	r0, [pc, #264]	; 16758 <__assert_fail@plt+0x45cc>
   1664c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16650:	sub	sp, sp, #148	; 0x94
   16654:	ldr	r9, [r3, r2]
   16658:	add	r0, pc, r0
   1665c:	add	r0, r0, #548	; 0x224
   16660:	ldr	r7, [pc, #244]	; 1675c <__assert_fail@plt+0x45d0>
   16664:	ldr	sl, [pc, #244]	; 16760 <__assert_fail@plt+0x45d4>
   16668:	ldr	r3, [r9]
   1666c:	add	r7, pc, r7
   16670:	add	r4, r7, #24
   16674:	add	sl, pc, sl
   16678:	add	r7, r7, #72	; 0x48
   1667c:	add	sl, sl, #548	; 0x224
   16680:	str	r3, [sp, #140]	; 0x8c
   16684:	bl	12084 <sigemptyset@plt>
   16688:	mov	r5, r4
   1668c:	ldr	r6, [r5, #4]!
   16690:	mov	r1, #0
   16694:	mov	r2, sp
   16698:	mov	r0, r6
   1669c:	bl	11e08 <sigaction@plt>
   166a0:	ldr	r3, [sp]
   166a4:	cmp	r3, #1
   166a8:	beq	166b8 <__assert_fail@plt+0x452c>
   166ac:	mov	r1, r6
   166b0:	mov	r0, sl
   166b4:	bl	11ef8 <sigaddset@plt>
   166b8:	cmp	r5, r7
   166bc:	bne	1668c <__assert_fail@plt+0x4500>
   166c0:	ldr	r6, [pc, #156]	; 16764 <__assert_fail@plt+0x45d8>
   166c4:	add	r0, sp, #4
   166c8:	ldr	fp, [pc, #152]	; 16768 <__assert_fail@plt+0x45dc>
   166cc:	mov	r2, #128	; 0x80
   166d0:	add	r6, pc, r6
   166d4:	ldr	sl, [pc, #144]	; 1676c <__assert_fail@plt+0x45e0>
   166d8:	add	r6, r6, #548	; 0x224
   166dc:	add	fp, pc, fp
   166e0:	add	sl, pc, sl
   166e4:	mov	r1, r6
   166e8:	bl	11d0c <memcpy@plt>
   166ec:	mov	r3, #268435456	; 0x10000000
   166f0:	str	r3, [sp, #132]	; 0x84
   166f4:	ldr	r5, [r4, #4]!
   166f8:	mov	r0, r6
   166fc:	mov	r1, r5
   16700:	bl	11d9c <sigismember@plt>
   16704:	cmp	r0, #0
   16708:	beq	1672c <__assert_fail@plt+0x45a0>
   1670c:	cmp	r5, #20
   16710:	mov	r0, r5
   16714:	mov	r1, sp
   16718:	mov	r2, #0
   1671c:	movne	r3, fp
   16720:	moveq	r3, sl
   16724:	str	r3, [sp]
   16728:	bl	11e08 <sigaction@plt>
   1672c:	cmp	r4, r7
   16730:	bne	166f4 <__assert_fail@plt+0x4568>
   16734:	ldr	r2, [sp, #140]	; 0x8c
   16738:	ldr	r3, [r9]
   1673c:	cmp	r2, r3
   16740:	bne	1674c <__assert_fail@plt+0x45c0>
   16744:	add	sp, sp, #148	; 0x94
   16748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1674c:	bl	11d78 <__stack_chk_fail@plt>
   16750:			; <UNDEFINED> instruction: 0x000229b4
   16754:	andeq	r0, r0, r0, ror #3
   16758:	andeq	r2, r2, r0, lsl sp
   1675c:	strdeq	sp, [r0], -r4
   16760:	strdeq	r2, [r2], -r4
   16764:	muleq	r2, r8, ip
   16768:			; <UNDEFINED> instruction: 0xffffe14c
   1676c:			; <UNDEFINED> instruction: 0xfffff310
   16770:	ldr	ip, [pc, #224]	; 16858 <__assert_fail@plt+0x46cc>
   16774:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16778:	mov	r8, r0
   1677c:	ldr	r0, [pc, #216]	; 1685c <__assert_fail@plt+0x46d0>
   16780:	add	ip, pc, ip
   16784:	ldr	r7, [pc, #212]	; 16860 <__assert_fail@plt+0x46d4>
   16788:	mov	r6, r2
   1678c:	mov	r9, r3
   16790:	sub	sp, sp, #280	; 0x118
   16794:	ldr	r5, [ip, r0]
   16798:	add	r7, pc, r7
   1679c:	mov	r4, r1
   167a0:	mov	r1, ip
   167a4:	ldr	r2, [r7, #676]	; 0x2a4
   167a8:	ldr	r3, [r5]
   167ac:	cmp	r2, #0
   167b0:	str	r3, [sp, #276]	; 0x114
   167b4:	beq	167e0 <__assert_fail@plt+0x4654>
   167b8:	ldr	r1, [pc, #164]	; 16864 <__assert_fail@plt+0x46d8>
   167bc:	mov	r0, r4
   167c0:	add	r1, pc, r1
   167c4:	bl	11c58 <strstr@plt>
   167c8:	subs	sl, r0, #0
   167cc:	beq	167e0 <__assert_fail@plt+0x4654>
   167d0:	mov	r0, r4
   167d4:	bl	11fac <strlen@plt>
   167d8:	cmp	r0, #101	; 0x65
   167dc:	bls	16818 <__assert_fail@plt+0x468c>
   167e0:	mov	r2, r4
   167e4:	mov	r3, r6
   167e8:	mov	ip, #0
   167ec:	str	r9, [sp, #4]
   167f0:	mov	r0, r8
   167f4:	movw	r1, #1001	; 0x3e9
   167f8:	str	ip, [sp]
   167fc:	bl	217f0 <close_stdout@@Base+0x6574>
   16800:	ldr	r2, [sp, #276]	; 0x114
   16804:	ldr	r3, [r5]
   16808:	cmp	r2, r3
   1680c:	bne	16854 <__assert_fail@plt+0x46c8>
   16810:	add	sp, sp, #280	; 0x118
   16814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16818:	rsb	r2, r4, sl
   1681c:	mov	r1, r4
   16820:	add	r4, sp, #12
   16824:	movw	r3, #261	; 0x105
   16828:	mov	r0, r4
   1682c:	bl	12180 <__mempcpy_chk@plt>
   16830:	ldr	r3, [r6, #16]
   16834:	add	r1, r7, #680	; 0x2a8
   16838:	add	r2, r3, r3, lsl #2
   1683c:	add	r3, r3, r2, lsl #5
   16840:	add	r1, r1, r3
   16844:	bl	11d60 <stpcpy@plt>
   16848:	add	r1, sl, #2
   1684c:	bl	11e5c <strcpy@plt>
   16850:	b	167e0 <__assert_fail@plt+0x4654>
   16854:	bl	11d78 <__stack_chk_fail@plt>
   16858:	andeq	r2, r2, r8, ror r8
   1685c:	andeq	r0, r0, r0, ror #3
   16860:	ldrdeq	r2, [r2], -r0
   16864:	andeq	lr, r0, r8
   16868:	ldr	r3, [pc, #92]	; 168cc <__assert_fail@plt+0x4740>
   1686c:	push	{r4, r5, r6, lr}
   16870:	add	r3, pc, r3
   16874:	ldr	r4, [pc, #84]	; 168d0 <__assert_fail@plt+0x4744>
   16878:	mov	r5, r0
   1687c:	ldrb	r2, [r3, #2612]	; 0xa34
   16880:	add	r4, pc, r4
   16884:	cmp	r2, #0
   16888:	beq	168ac <__assert_fail@plt+0x4720>
   1688c:	ldr	r3, [pc, #64]	; 168d4 <__assert_fail@plt+0x4748>
   16890:	mov	r2, #1
   16894:	ldr	r1, [r5]
   16898:	ldr	r0, [r5, #4]
   1689c:	ldr	r3, [r4, r3]
   168a0:	pop	{r4, r5, r6, lr}
   168a4:	ldr	r3, [r3]
   168a8:	b	11d3c <fwrite_unlocked@plt>
   168ac:	mov	r0, #1
   168b0:	strb	r0, [r3, #2612]	; 0xa34
   168b4:	bl	11fa0 <tcgetpgrp@plt>
   168b8:	cmp	r0, #0
   168bc:	blt	168c4 <__assert_fail@plt+0x4738>
   168c0:	bl	1663c <__assert_fail@plt+0x44b0>
   168c4:	bl	168d8 <__assert_fail@plt+0x474c>
   168c8:	b	1688c <__assert_fail@plt+0x4700>
   168cc:	strdeq	r2, [r2], -r8
   168d0:	andeq	r2, r2, r8, ror r7
   168d4:	andeq	r0, r0, r0, lsl r2
   168d8:	push	{r4, lr}
   168dc:	ldr	r4, [pc, #52]	; 16918 <__assert_fail@plt+0x478c>
   168e0:	add	r4, pc, r4
   168e4:	ldr	r3, [r4, #20]
   168e8:	cmp	r3, #0
   168ec:	beq	168fc <__assert_fail@plt+0x4770>
   168f0:	add	r0, r4, #16
   168f4:	pop	{r4, lr}
   168f8:	b	16868 <__assert_fail@plt+0x46dc>
   168fc:	mov	r0, r4
   16900:	bl	16868 <__assert_fail@plt+0x46dc>
   16904:	add	r0, r4, #24
   16908:	bl	16868 <__assert_fail@plt+0x46dc>
   1690c:	add	r0, r4, #8
   16910:	pop	{r4, lr}
   16914:	b	16868 <__assert_fail@plt+0x46dc>
   16918:	andeq	r2, r2, r8, ror #18
   1691c:	ldr	r3, [pc, #68]	; 16968 <__assert_fail@plt+0x47dc>
   16920:	push	{r4, lr}
   16924:	add	r3, pc, r3
   16928:	ldrb	r3, [r3, #2613]	; 0xa35
   1692c:	cmp	r3, #0
   16930:	popeq	{r4, pc}
   16934:	mov	r0, #4
   16938:	bl	14d58 <__assert_fail@plt+0x2bcc>
   1693c:	cmp	r0, #0
   16940:	popeq	{r4, pc}
   16944:	ldr	r4, [pc, #32]	; 1696c <__assert_fail@plt+0x47e0>
   16948:	add	r4, pc, r4
   1694c:	mov	r0, r4
   16950:	bl	16868 <__assert_fail@plt+0x46dc>
   16954:	add	r0, r4, #32
   16958:	bl	16868 <__assert_fail@plt+0x46dc>
   1695c:	add	r0, r4, #8
   16960:	pop	{r4, lr}
   16964:	b	16868 <__assert_fail@plt+0x46dc>
   16968:	andeq	r2, r2, r4, asr #20
   1696c:	andeq	r2, r2, r0, lsl #18
   16970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16974:	sub	sp, sp, #148	; 0x94
   16978:	ldr	r7, [pc, #260]	; 16a84 <__assert_fail@plt+0x48f8>
   1697c:	ldr	r3, [pc, #260]	; 16a88 <__assert_fail@plt+0x48fc>
   16980:	add	r7, pc, r7
   16984:	ldr	sl, [pc, #256]	; 16a8c <__assert_fail@plt+0x4900>
   16988:	ldr	r5, [pc, #256]	; 16a90 <__assert_fail@plt+0x4904>
   1698c:	ldr	r3, [r7, r3]
   16990:	add	sl, pc, sl
   16994:	ldr	r6, [pc, #248]	; 16a94 <__assert_fail@plt+0x4908>
   16998:	add	r5, pc, r5
   1699c:	ldr	r8, [pc, #244]	; 16a98 <__assert_fail@plt+0x490c>
   169a0:	add	r9, r5, #548	; 0x224
   169a4:	str	r3, [sp, #4]
   169a8:	add	r3, sl, #8
   169ac:	ldr	r1, [sp, #4]
   169b0:	add	r6, pc, r6
   169b4:	str	r3, [sp]
   169b8:	add	r8, pc, r8
   169bc:	ldr	r3, [r1]
   169c0:	str	r3, [sp, #140]	; 0x8c
   169c4:	b	16a20 <__assert_fail@plt+0x4894>
   169c8:	ldr	r3, [pc, #204]	; 16a9c <__assert_fail@plt+0x4910>
   169cc:	add	r4, sp, #12
   169d0:	ldr	r3, [r7, r3]
   169d4:	ldr	r0, [r3]
   169d8:	bl	11dcc <fflush_unlocked@plt>
   169dc:	mov	r1, r9
   169e0:	mov	r2, r4
   169e4:	mov	r0, #0
   169e8:	bl	11cc4 <sigprocmask@plt>
   169ec:	ldr	fp, [r5]
   169f0:	ldr	r1, [r5, #492]	; 0x1ec
   169f4:	cmp	r1, #0
   169f8:	beq	16a58 <__assert_fail@plt+0x48cc>
   169fc:	mov	fp, #19
   16a00:	sub	r1, r1, #1
   16a04:	str	r1, [r5, #492]	; 0x1ec
   16a08:	mov	r0, fp
   16a0c:	bl	11c70 <raise@plt>
   16a10:	mov	r1, r4
   16a14:	mov	r0, #2
   16a18:	mov	r2, #0
   16a1c:	bl	11cc4 <sigprocmask@plt>
   16a20:	ldr	r3, [r6]
   16a24:	cmp	r3, #0
   16a28:	bne	16a38 <__assert_fail@plt+0x48ac>
   16a2c:	ldr	r3, [r6, #492]	; 0x1ec
   16a30:	cmp	r3, #0
   16a34:	beq	16a64 <__assert_fail@plt+0x48d8>
   16a38:	ldrb	r3, [r8, #2612]	; 0xa34
   16a3c:	cmp	r3, #0
   16a40:	beq	169c8 <__assert_fail@plt+0x483c>
   16a44:	mov	r0, sl
   16a48:	bl	16868 <__assert_fail@plt+0x46dc>
   16a4c:	ldr	r0, [sp]
   16a50:	bl	16868 <__assert_fail@plt+0x46dc>
   16a54:	b	169c8 <__assert_fail@plt+0x483c>
   16a58:	mov	r0, fp
   16a5c:	bl	11d30 <signal@plt>
   16a60:	b	16a08 <__assert_fail@plt+0x487c>
   16a64:	ldr	r1, [sp, #4]
   16a68:	ldr	r2, [sp, #140]	; 0x8c
   16a6c:	ldr	r3, [r1]
   16a70:	cmp	r2, r3
   16a74:	bne	16a80 <__assert_fail@plt+0x48f4>
   16a78:	add	sp, sp, #148	; 0x94
   16a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a80:	bl	11d78 <__stack_chk_fail@plt>
   16a84:	andeq	r2, r2, r8, ror r6
   16a88:	andeq	r0, r0, r0, ror #3
   16a8c:			; <UNDEFINED> instruction: 0x000228b8
   16a90:	ldrdeq	r2, [r2], -r0
   16a94:			; <UNDEFINED> instruction: 0x000229b8
   16a98:			; <UNDEFINED> instruction: 0x000229b0
   16a9c:	andeq	r0, r0, r0, lsl r2
   16aa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16aa4:	cmp	r1, #0
   16aa8:	ldr	r7, [pc, #1216]	; 16f70 <__assert_fail@plt+0x4de4>
   16aac:	mov	r8, r3
   16ab0:	mov	r5, r0
   16ab4:	mov	r4, r2
   16ab8:	ldm	r0, {r3, r6}
   16abc:	add	r7, pc, r7
   16ac0:	beq	16f24 <__assert_fail@plt+0x4d98>
   16ac4:	ldr	r3, [pc, #1192]	; 16f74 <__assert_fail@plt+0x4de8>
   16ac8:	add	r3, pc, r3
   16acc:	ldrb	r9, [r3, #2613]	; 0xa35
   16ad0:	cmp	r9, #0
   16ad4:	bne	16c30 <__assert_fail@plt+0x4aa4>
   16ad8:	cmp	r4, #0
   16adc:	beq	16bf8 <__assert_fail@plt+0x4a6c>
   16ae0:	ldr	r3, [pc, #1168]	; 16f78 <__assert_fail@plt+0x4dec>
   16ae4:	add	r3, pc, r3
   16ae8:	ldrb	r3, [r3, #2620]	; 0xa3c
   16aec:	cmp	r3, #0
   16af0:	beq	16b24 <__assert_fail@plt+0x4998>
   16af4:	ldr	r3, [r4, #12]
   16af8:	ldr	r1, [r4, #16]
   16afc:	add	r2, r3, #4
   16b00:	cmp	r1, r2
   16b04:	bcc	16d24 <__assert_fail@plt+0x4b98>
   16b08:	ldr	r2, [pc, #1132]	; 16f7c <__assert_fail@plt+0x4df0>
   16b0c:	add	r2, pc, r2
   16b10:	ldr	r0, [r2, #484]	; 0x1e4
   16b14:	str	r0, [r3]
   16b18:	ldr	r3, [r4, #12]
   16b1c:	add	r3, r3, #4
   16b20:	str	r3, [r4, #12]
   16b24:	ldr	r2, [pc, #1108]	; 16f80 <__assert_fail@plt+0x4df4>
   16b28:	mov	r1, r6
   16b2c:	ldr	r6, [pc, #1104]	; 16f84 <__assert_fail@plt+0x4df8>
   16b30:	mov	r3, #0
   16b34:	ldr	ip, [r7, r2]
   16b38:	add	r6, pc, r6
   16b3c:	ldr	r2, [r6, #528]	; 0x210
   16b40:	ldr	r0, [ip]
   16b44:	bl	153a8 <__assert_fail@plt+0x321c>
   16b48:	ldrb	r2, [r6, #2620]	; 0xa3c
   16b4c:	ldr	r3, [r6, #484]	; 0x1e4
   16b50:	cmp	r2, #0
   16b54:	add	r3, r0, r3
   16b58:	mov	r5, r0
   16b5c:	str	r3, [r6, #484]	; 0x1e4
   16b60:	beq	16b94 <__assert_fail@plt+0x4a08>
   16b64:	ldr	r3, [r4, #12]
   16b68:	ldr	r1, [r4, #16]
   16b6c:	add	r2, r3, #4
   16b70:	cmp	r1, r2
   16b74:	bcc	16d38 <__assert_fail@plt+0x4bac>
   16b78:	ldr	r2, [pc, #1032]	; 16f88 <__assert_fail@plt+0x4dfc>
   16b7c:	add	r2, pc, r2
   16b80:	ldr	r0, [r2, #484]	; 0x1e4
   16b84:	str	r0, [r3]
   16b88:	ldr	r3, [r4, #12]
   16b8c:	add	r3, r3, #4
   16b90:	str	r3, [r4, #12]
   16b94:	bl	16970 <__assert_fail@plt+0x47e4>
   16b98:	cmp	r9, #0
   16b9c:	bne	16ba8 <__assert_fail@plt+0x4a1c>
   16ba0:	mov	r0, r5
   16ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ba8:	bl	168d8 <__assert_fail@plt+0x474c>
   16bac:	ldr	r3, [pc, #984]	; 16f8c <__assert_fail@plt+0x4e00>
   16bb0:	mov	r0, r8
   16bb4:	add	r3, pc, r3
   16bb8:	ldr	r4, [r3, #544]	; 0x220
   16bbc:	mov	r1, r4
   16bc0:	bl	234ec <close_stdout@@Base+0x8270>
   16bc4:	mov	r1, r4
   16bc8:	mov	r6, r0
   16bcc:	sub	r0, r8, #1
   16bd0:	add	r0, r0, r5
   16bd4:	bl	234ec <close_stdout@@Base+0x8270>
   16bd8:	cmp	r6, r0
   16bdc:	beq	16ba0 <__assert_fail@plt+0x4a14>
   16be0:	ldr	r0, [pc, #936]	; 16f90 <__assert_fail@plt+0x4e04>
   16be4:	add	r0, pc, r0
   16be8:	add	r0, r0, #184	; 0xb8
   16bec:	bl	16868 <__assert_fail@plt+0x46dc>
   16bf0:	mov	r0, r5
   16bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bf8:	ldr	r2, [pc, #896]	; 16f80 <__assert_fail@plt+0x4df4>
   16bfc:	mov	r1, r6
   16c00:	ldr	r6, [pc, #908]	; 16f94 <__assert_fail@plt+0x4e08>
   16c04:	mov	r3, r4
   16c08:	ldr	r0, [r7, r2]
   16c0c:	add	r6, pc, r6
   16c10:	ldr	r2, [r6, #528]	; 0x210
   16c14:	ldr	r0, [r0]
   16c18:	bl	153a8 <__assert_fail@plt+0x321c>
   16c1c:	ldr	r3, [r6, #484]	; 0x1e4
   16c20:	mov	r5, r0
   16c24:	add	r3, r0, r3
   16c28:	str	r3, [r6, #484]	; 0x1e4
   16c2c:	b	16b94 <__assert_fail@plt+0x4a08>
   16c30:	ldrb	r9, [r5, #125]	; 0x7d
   16c34:	ldr	sl, [r5, #116]	; 0x74
   16c38:	cmp	r9, #0
   16c3c:	bne	16c54 <__assert_fail@plt+0x4ac8>
   16c40:	mov	r0, #12
   16c44:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16c48:	cmp	r0, #0
   16c4c:	movne	r0, #12
   16c50:	bne	16d88 <__assert_fail@plt+0x4bfc>
   16c54:	ldrb	r3, [r5, #124]	; 0x7c
   16c58:	cmp	r3, #0
   16c5c:	bne	16cd4 <__assert_fail@plt+0x4b48>
   16c60:	ldr	r2, [r5, #112]	; 0x70
   16c64:	ldr	r3, [pc, #812]	; 16f98 <__assert_fail@plt+0x4e0c>
   16c68:	add	r3, pc, r3
   16c6c:	add	r3, r3, r2, lsl #2
   16c70:	ldr	r0, [r3, #76]	; 0x4c
   16c74:	cmp	r0, #5
   16c78:	bne	16d4c <__assert_fail@plt+0x4bc0>
   16c7c:	mov	r0, r6
   16c80:	bl	11fac <strlen@plt>
   16c84:	ldr	r3, [pc, #784]	; 16f9c <__assert_fail@plt+0x4e10>
   16c88:	add	r3, pc, r3
   16c8c:	ldr	r5, [r3, #2616]	; 0xa38
   16c90:	cmp	r5, #0
   16c94:	mov	r9, r0
   16c98:	add	sl, r6, r0
   16c9c:	beq	16ccc <__assert_fail@plt+0x4b40>
   16ca0:	ldr	r2, [r5]
   16ca4:	cmp	r9, r2
   16ca8:	rsb	r0, r2, sl
   16cac:	bcc	16cc0 <__assert_fail@plt+0x4b34>
   16cb0:	ldr	r1, [r5, #4]
   16cb4:	bl	1212c <strncmp@plt>
   16cb8:	cmp	r0, #0
   16cbc:	beq	16e28 <__assert_fail@plt+0x4c9c>
   16cc0:	ldr	r5, [r5, #16]
   16cc4:	cmp	r5, #0
   16cc8:	bne	16ca0 <__assert_fail@plt+0x4b14>
   16ccc:	mov	r0, #5
   16cd0:	b	16d88 <__assert_fail@plt+0x4bfc>
   16cd4:	and	r0, sl, #61440	; 0xf000
   16cd8:	cmp	r0, #32768	; 0x8000
   16cdc:	beq	16dfc <__assert_fail@plt+0x4c70>
   16ce0:	cmp	r0, #16384	; 0x4000
   16ce4:	beq	16e58 <__assert_fail@plt+0x4ccc>
   16ce8:	cmp	r0, #40960	; 0xa000
   16cec:	beq	16df4 <__assert_fail@plt+0x4c68>
   16cf0:	cmp	r0, #4096	; 0x1000
   16cf4:	moveq	r0, #8
   16cf8:	beq	16d88 <__assert_fail@plt+0x4bfc>
   16cfc:	cmp	r0, #49152	; 0xc000
   16d00:	moveq	r0, #9
   16d04:	beq	16d88 <__assert_fail@plt+0x4bfc>
   16d08:	cmp	r0, #24576	; 0x6000
   16d0c:	moveq	r0, #10
   16d10:	beq	16d88 <__assert_fail@plt+0x4bfc>
   16d14:	cmp	r0, #8192	; 0x2000
   16d18:	moveq	r0, #11
   16d1c:	movne	r0, #13
   16d20:	b	16d88 <__assert_fail@plt+0x4bfc>
   16d24:	mov	r0, r4
   16d28:	mov	r1, #4
   16d2c:	bl	11d54 <_obstack_newchunk@plt>
   16d30:	ldr	r3, [r4, #12]
   16d34:	b	16b08 <__assert_fail@plt+0x497c>
   16d38:	mov	r0, r4
   16d3c:	mov	r1, #4
   16d40:	bl	11d54 <_obstack_newchunk@plt>
   16d44:	ldr	r3, [r4, #12]
   16d48:	b	16b78 <__assert_fail@plt+0x49ec>
   16d4c:	cmp	r0, #7
   16d50:	movne	r9, #0
   16d54:	andeq	r9, r9, #1
   16d58:	cmp	r9, #0
   16d5c:	beq	16d88 <__assert_fail@plt+0x4bfc>
   16d60:	ldr	r3, [pc, #568]	; 16fa0 <__assert_fail@plt+0x4e14>
   16d64:	mov	r0, #13
   16d68:	add	r3, pc, r3
   16d6c:	ldrb	r3, [r3, #2614]	; 0xa36
   16d70:	cmp	r3, #0
   16d74:	bne	16d88 <__assert_fail@plt+0x4bfc>
   16d78:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16d7c:	cmp	r0, #0
   16d80:	moveq	r0, #7
   16d84:	movne	r0, #13
   16d88:	ldr	r5, [pc, #532]	; 16fa4 <__assert_fail@plt+0x4e18>
   16d8c:	add	r5, pc, r5
   16d90:	add	r5, r5, r0, lsl #3
   16d94:	ldr	r3, [r5, #4]
   16d98:	mov	r0, #4
   16d9c:	cmp	r3, #0
   16da0:	beq	16e1c <__assert_fail@plt+0x4c90>
   16da4:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16da8:	cmp	r0, #0
   16dac:	bne	16dd8 <__assert_fail@plt+0x4c4c>
   16db0:	ldr	sl, [pc, #496]	; 16fa8 <__assert_fail@plt+0x4e1c>
   16db4:	mov	r9, #1
   16db8:	add	sl, pc, sl
   16dbc:	mov	r0, sl
   16dc0:	bl	16868 <__assert_fail@plt+0x46dc>
   16dc4:	mov	r0, r5
   16dc8:	bl	16868 <__assert_fail@plt+0x46dc>
   16dcc:	add	r0, sl, #8
   16dd0:	bl	16868 <__assert_fail@plt+0x46dc>
   16dd4:	b	16ad8 <__assert_fail@plt+0x494c>
   16dd8:	ldr	r9, [pc, #460]	; 16fac <__assert_fail@plt+0x4e20>
   16ddc:	add	r9, pc, r9
   16de0:	mov	r0, r9
   16de4:	bl	16868 <__assert_fail@plt+0x46dc>
   16de8:	add	r0, r9, #8
   16dec:	bl	16868 <__assert_fail@plt+0x46dc>
   16df0:	b	16db0 <__assert_fail@plt+0x4c24>
   16df4:	mov	r0, #7
   16df8:	b	16d58 <__assert_fail@plt+0x4bcc>
   16dfc:	tst	sl, #2048	; 0x800
   16e00:	beq	16e38 <__assert_fail@plt+0x4cac>
   16e04:	mov	r0, #16
   16e08:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16e0c:	cmp	r0, #0
   16e10:	beq	16e38 <__assert_fail@plt+0x4cac>
   16e14:	mov	r0, #16
   16e18:	b	16d88 <__assert_fail@plt+0x4bfc>
   16e1c:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16e20:	mov	r9, r0
   16e24:	b	16ad8 <__assert_fail@plt+0x494c>
   16e28:	cmp	r5, #0
   16e2c:	addne	r5, r5, #8
   16e30:	bne	16d94 <__assert_fail@plt+0x4c08>
   16e34:	b	16ccc <__assert_fail@plt+0x4b40>
   16e38:	tst	sl, #1024	; 0x400
   16e3c:	beq	16eac <__assert_fail@plt+0x4d20>
   16e40:	mov	r0, #17
   16e44:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16e48:	cmp	r0, #0
   16e4c:	beq	16eac <__assert_fail@plt+0x4d20>
   16e50:	mov	r0, #17
   16e54:	b	16d88 <__assert_fail@plt+0x4bfc>
   16e58:	movw	r3, #514	; 0x202
   16e5c:	and	r3, sl, r3
   16e60:	movw	r2, #514	; 0x202
   16e64:	cmp	r3, r2
   16e68:	beq	16f0c <__assert_fail@plt+0x4d80>
   16e6c:	tst	sl, #2
   16e70:	beq	16e88 <__assert_fail@plt+0x4cfc>
   16e74:	mov	r0, #19
   16e78:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16e7c:	cmp	r0, #0
   16e80:	movne	r0, #19
   16e84:	bne	16d88 <__assert_fail@plt+0x4bfc>
   16e88:	tst	sl, #512	; 0x200
   16e8c:	moveq	r0, #6
   16e90:	beq	16d88 <__assert_fail@plt+0x4bfc>
   16e94:	mov	r0, #18
   16e98:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16e9c:	cmp	r0, #0
   16ea0:	moveq	r0, #6
   16ea4:	movne	r0, #18
   16ea8:	b	16d88 <__assert_fail@plt+0x4bfc>
   16eac:	mov	r0, #21
   16eb0:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16eb4:	cmp	r0, #0
   16eb8:	beq	16ecc <__assert_fail@plt+0x4d40>
   16ebc:	ldrb	r3, [r5, #132]	; 0x84
   16ec0:	cmp	r3, #0
   16ec4:	movne	r0, #21
   16ec8:	bne	16d88 <__assert_fail@plt+0x4bfc>
   16ecc:	tst	sl, #73	; 0x49
   16ed0:	beq	16ee8 <__assert_fail@plt+0x4d5c>
   16ed4:	mov	r0, #14
   16ed8:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16edc:	cmp	r0, #0
   16ee0:	movne	r0, #14
   16ee4:	bne	16d88 <__assert_fail@plt+0x4bfc>
   16ee8:	ldr	r3, [r5, #28]
   16eec:	cmp	r3, #1
   16ef0:	bls	16c7c <__assert_fail@plt+0x4af0>
   16ef4:	mov	r0, #22
   16ef8:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16efc:	cmp	r0, #0
   16f00:	beq	16c7c <__assert_fail@plt+0x4af0>
   16f04:	mov	r0, #22
   16f08:	b	16d88 <__assert_fail@plt+0x4bfc>
   16f0c:	mov	r0, #20
   16f10:	bl	14d58 <__assert_fail@plt+0x2bcc>
   16f14:	cmp	r0, #0
   16f18:	movne	r0, #20
   16f1c:	bne	16d88 <__assert_fail@plt+0x4bfc>
   16f20:	b	16e6c <__assert_fail@plt+0x4ce0>
   16f24:	ldr	r2, [pc, #132]	; 16fb0 <__assert_fail@plt+0x4e24>
   16f28:	add	r2, pc, r2
   16f2c:	ldrb	r9, [r2, #2613]	; 0xa35
   16f30:	cmp	r9, #0
   16f34:	moveq	r6, r3
   16f38:	beq	16ad8 <__assert_fail@plt+0x494c>
   16f3c:	ldrb	r2, [r2, #2614]	; 0xa36
   16f40:	ldrb	r9, [r5, #125]	; 0x7d
   16f44:	cmp	r2, #0
   16f48:	beq	16f68 <__assert_fail@plt+0x4ddc>
   16f4c:	cmp	r9, #0
   16f50:	beq	16f68 <__assert_fail@plt+0x4ddc>
   16f54:	ldr	sl, [r5, #116]	; 0x74
   16f58:	mov	r9, #1
   16f5c:	eor	r9, r9, #1
   16f60:	mov	r6, r3
   16f64:	b	16c54 <__assert_fail@plt+0x4ac8>
   16f68:	ldr	sl, [r5, #24]
   16f6c:	b	16f5c <__assert_fail@plt+0x4dd0>
   16f70:	andeq	r2, r2, ip, lsr r5
   16f74:	andeq	r2, r2, r0, lsr #17
   16f78:	andeq	r2, r2, r4, lsl #17
   16f7c:	andeq	r2, r2, ip, asr r8
   16f80:	andeq	r0, r0, r0, lsl r2
   16f84:	andeq	r2, r2, r0, lsr r8
   16f88:	andeq	r2, r2, ip, ror #15
   16f8c:			; <UNDEFINED> instruction: 0x000227b4
   16f90:	andeq	r2, r2, r4, ror #12
   16f94:	andeq	r2, r2, ip, asr r7
   16f98:	strdeq	sp, [r0], -r8
   16f9c:	andeq	r2, r2, r0, ror #13
   16fa0:	andeq	r2, r2, r0, lsl #12
   16fa4:			; <UNDEFINED> instruction: 0x000224bc
   16fa8:	muleq	r2, r0, r4
   16fac:	andeq	r2, r2, ip, ror #8
   16fb0:	andeq	r2, r2, r0, asr #8
   16fb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fb8:	sub	sp, sp, #4608	; 0x1200
   16fbc:	ldr	r6, [pc, #632]	; 1723c <__assert_fail@plt+0x50b0>
   16fc0:	mov	r5, r0
   16fc4:	ldr	r3, [pc, #628]	; 17240 <__assert_fail@plt+0x50b4>
   16fc8:	add	r6, pc, r6
   16fcc:	ldr	r4, [pc, #624]	; 17244 <__assert_fail@plt+0x50b8>
   16fd0:	ldr	r8, [r6, r3]
   16fd4:	add	r4, pc, r4
   16fd8:	ldr	r2, [r4, #2624]	; 0xa40
   16fdc:	ldr	r3, [r8]
   16fe0:	cmp	r2, #0
   16fe4:	add	r2, sp, #8192	; 0x2000
   16fe8:	str	r3, [r2, #-3588]	; 0xfffff1fc
   16fec:	bne	170f0 <__assert_fail@plt+0x4f64>
   16ff0:	ldr	r3, [pc, #592]	; 17248 <__assert_fail@plt+0x50bc>
   16ff4:	add	r4, sp, #24
   16ff8:	ldr	r9, [r6, r3]
   16ffc:	ldr	r3, [r5, #120]	; 0x78
   17000:	cmp	r3, #0
   17004:	beq	171a0 <__assert_fail@plt+0x5014>
   17008:	str	r3, [sp]
   1700c:	mov	r1, #1
   17010:	ldr	r3, [pc, #564]	; 1724c <__assert_fail@plt+0x50c0>
   17014:	movw	r2, #4577	; 0x11e1
   17018:	mov	r0, r4
   1701c:	ldr	r6, [pc, #556]	; 17250 <__assert_fail@plt+0x50c4>
   17020:	add	r3, pc, r3
   17024:	bl	11fdc <__sprintf_chk@plt>
   17028:	mov	r0, r4
   1702c:	bl	11fac <strlen@plt>
   17030:	add	r6, pc, r6
   17034:	ldrb	r3, [r6, #2620]	; 0xa3c
   17038:	cmp	r3, #0
   1703c:	add	r7, r4, r0
   17040:	bne	170c8 <__assert_fail@plt+0x4f3c>
   17044:	ldr	r6, [pc, #520]	; 17254 <__assert_fail@plt+0x50c8>
   17048:	rsb	r7, r4, r7
   1704c:	mov	r0, r4
   17050:	ldr	r1, [r9]
   17054:	add	r6, pc, r6
   17058:	bl	11c4c <fputs_unlocked@plt>
   1705c:	add	r2, r6, #2624	; 0xa40
   17060:	mov	r3, r7
   17064:	ldr	ip, [r6, #484]	; 0x1e4
   17068:	add	r2, r2, #4
   1706c:	mov	r0, r5
   17070:	mov	r1, #0
   17074:	add	ip, r7, ip
   17078:	str	ip, [r6, #484]	; 0x1e4
   1707c:	bl	16aa0 <__assert_fail@plt+0x4914>
   17080:	ldr	r2, [r5, #112]	; 0x70
   17084:	cmp	r2, #6
   17088:	mov	r4, r0
   1708c:	beq	171ac <__assert_fail@plt+0x5020>
   17090:	ldr	r3, [r6, #500]	; 0x1f4
   17094:	cmp	r3, #0
   17098:	bne	170b8 <__assert_fail@plt+0x4f2c>
   1709c:	add	r3, sp, #8192	; 0x2000
   170a0:	ldr	r2, [r3, #-3588]	; 0xfffff1fc
   170a4:	ldr	r3, [r8]
   170a8:	cmp	r2, r3
   170ac:	bne	17238 <__assert_fail@plt+0x50ac>
   170b0:	add	sp, sp, #4608	; 0x1200
   170b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   170b8:	ldrb	r0, [r5, #124]	; 0x7c
   170bc:	ldr	r1, [r5, #24]
   170c0:	bl	15f30 <__assert_fail@plt+0x3da4>
   170c4:	b	1709c <__assert_fail@plt+0x4f10>
   170c8:	ldr	r0, [pc, #392]	; 17258 <__assert_fail@plt+0x50cc>
   170cc:	mov	r1, #1
   170d0:	ldr	r3, [r9]
   170d4:	mov	r2, #2
   170d8:	add	r0, pc, r0
   170dc:	bl	11d3c <fwrite_unlocked@plt>
   170e0:	ldr	r3, [r6, #484]	; 0x1e4
   170e4:	add	r3, r3, #2
   170e8:	str	r3, [r6, #484]	; 0x1e4
   170ec:	b	17044 <__assert_fail@plt+0x4eb8>
   170f0:	add	r7, sp, #64	; 0x40
   170f4:	add	r0, r0, #8
   170f8:	sub	r9, r7, #52	; 0x34
   170fc:	mov	r1, r9
   17100:	bl	1b63c <close_stdout@@Base+0x3c0>
   17104:	ldrb	r3, [r4, #12]
   17108:	cmp	r3, #0
   1710c:	bne	17214 <__assert_fail@plt+0x5088>
   17110:	strb	r3, [r9, #10]
   17114:	sub	r4, r7, #40	; 0x28
   17118:	ldr	r3, [pc, #316]	; 1725c <__assert_fail@plt+0x50d0>
   1711c:	mov	ip, #0
   17120:	movw	r2, #4577	; 0x11e1
   17124:	mov	r1, #1
   17128:	add	r3, pc, r3
   1712c:	sub	r7, r7, #52	; 0x34
   17130:	mov	r0, r4
   17134:	str	r7, [sp]
   17138:	strb	ip, [r9, #11]
   1713c:	bl	11fdc <__sprintf_chk@plt>
   17140:	mov	r0, r4
   17144:	bl	11fac <strlen@plt>
   17148:	ldr	r3, [pc, #248]	; 17248 <__assert_fail@plt+0x50bc>
   1714c:	ldr	r7, [pc, #268]	; 17260 <__assert_fail@plt+0x50d4>
   17150:	ldr	r9, [r6, r3]
   17154:	add	r7, pc, r7
   17158:	ldr	r1, [r9]
   1715c:	mov	sl, r0
   17160:	mov	r0, r4
   17164:	bl	11c4c <fputs_unlocked@plt>
   17168:	ldr	r3, [r7, #484]	; 0x1e4
   1716c:	ldr	r1, [r7, #28]
   17170:	ldr	r0, [r5, #32]
   17174:	add	r3, sl, r3
   17178:	ldrb	r2, [r5, #124]	; 0x7c
   1717c:	str	r3, [r7, #484]	; 0x1e4
   17180:	bl	15980 <__assert_fail@plt+0x37f4>
   17184:	ldr	r1, [r7, #32]
   17188:	ldr	r0, [r5, #36]	; 0x24
   1718c:	ldrb	r2, [r5, #124]	; 0x7c
   17190:	bl	15908 <__assert_fail@plt+0x377c>
   17194:	ldr	r3, [r5, #120]	; 0x78
   17198:	cmp	r3, #0
   1719c:	bne	17008 <__assert_fail@plt+0x4e7c>
   171a0:	ldr	r3, [pc, #188]	; 17264 <__assert_fail@plt+0x50d8>
   171a4:	add	r3, pc, r3
   171a8:	b	17008 <__assert_fail@plt+0x4e7c>
   171ac:	ldr	r3, [r5, #4]
   171b0:	cmp	r3, #0
   171b4:	beq	1709c <__assert_fail@plt+0x4f10>
   171b8:	ldr	r0, [pc, #168]	; 17268 <__assert_fail@plt+0x50dc>
   171bc:	mov	r1, #1
   171c0:	ldr	r3, [r9]
   171c4:	mov	r2, #4
   171c8:	add	r0, pc, r0
   171cc:	bl	11d3c <fwrite_unlocked@plt>
   171d0:	ldr	ip, [r6, #484]	; 0x1e4
   171d4:	add	r3, r7, #4
   171d8:	mov	r0, r5
   171dc:	add	r3, r3, r4
   171e0:	mov	r1, #1
   171e4:	mov	r2, #0
   171e8:	add	ip, ip, #4
   171ec:	str	ip, [r6, #484]	; 0x1e4
   171f0:	bl	16aa0 <__assert_fail@plt+0x4914>
   171f4:	ldr	r3, [r6, #500]	; 0x1f4
   171f8:	cmp	r3, #0
   171fc:	beq	1709c <__assert_fail@plt+0x4f10>
   17200:	ldrb	r0, [r5, #124]	; 0x7c
   17204:	ldr	r1, [r5, #116]	; 0x74
   17208:	ldr	r2, [r5, #112]	; 0x70
   1720c:	bl	15f30 <__assert_fail@plt+0x3da4>
   17210:	b	1709c <__assert_fail@plt+0x4f10>
   17214:	ldr	r3, [r5, #128]	; 0x80
   17218:	cmp	r3, #1
   1721c:	moveq	r3, #46	; 0x2e
   17220:	strbeq	r3, [r9, #10]
   17224:	beq	17114 <__assert_fail@plt+0x4f88>
   17228:	cmp	r3, #2
   1722c:	bne	17114 <__assert_fail@plt+0x4f88>
   17230:	mov	r3, #43	; 0x2b
   17234:	b	17110 <__assert_fail@plt+0x4f84>
   17238:	bl	11d78 <__stack_chk_fail@plt>
   1723c:	andeq	r2, r2, r0, lsr r0
   17240:	andeq	r0, r0, r0, ror #3
   17244:	muleq	r2, r4, r3
   17248:	andeq	r0, r0, r0, lsl r2
   1724c:			; <UNDEFINED> instruction: 0x0000d7b0
   17250:	andeq	r2, r2, r8, lsr r3
   17254:	andeq	r2, r2, r4, lsl r3
   17258:	andeq	sp, r0, r0, lsl #14
   1725c:	andeq	sp, r0, r4, lsr #13
   17260:	andeq	r2, r2, r4, lsl r2
   17264:	andeq	pc, r0, ip, lsr #12
   17268:	andeq	sp, r0, r4, lsl r6
   1726c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17270:	sub	sp, sp, #4736	; 0x1280
   17274:	ldr	r5, [pc, #2432]	; 17bfc <__assert_fail@plt+0x5a70>
   17278:	sub	sp, sp, #12
   1727c:	ldr	r3, [pc, #2428]	; 17c00 <__assert_fail@plt+0x5a74>
   17280:	mov	r6, r0
   17284:	add	r5, pc, r5
   17288:	ldrb	r4, [r0, #124]	; 0x7c
   1728c:	add	r0, sp, #8192	; 0x2000
   17290:	ldr	r3, [r5, r3]
   17294:	cmp	r4, #0
   17298:	str	r3, [sp, #28]
   1729c:	ldr	r3, [r3]
   172a0:	str	r3, [r0, #-3452]	; 0xfffff284
   172a4:	beq	173ec <__assert_fail@plt+0x5260>
   172a8:	add	fp, sp, #72	; 0x48
   172ac:	add	r0, r6, #8
   172b0:	sub	sl, fp, #16
   172b4:	mov	r1, sl
   172b8:	bl	1b63c <close_stdout@@Base+0x3c0>
   172bc:	ldr	r3, [pc, #2368]	; 17c04 <__assert_fail@plt+0x5a78>
   172c0:	add	r3, pc, r3
   172c4:	ldrb	r3, [r3, #12]
   172c8:	cmp	r3, #0
   172cc:	beq	173e4 <__assert_fail@plt+0x5258>
   172d0:	ldr	r3, [r6, #128]	; 0x80
   172d4:	cmp	r3, #1
   172d8:	moveq	r3, #46	; 0x2e
   172dc:	strbeq	r3, [sl, #10]
   172e0:	beq	172ec <__assert_fail@plt+0x5160>
   172e4:	cmp	r3, #2
   172e8:	beq	173e0 <__assert_fail@plt+0x5254>
   172ec:	ldr	r3, [pc, #2324]	; 17c08 <__assert_fail@plt+0x5a7c>
   172f0:	add	r3, pc, r3
   172f4:	ldr	r3, [r3, #464]	; 0x1d0
   172f8:	cmp	r3, #1
   172fc:	beq	1784c <__assert_fail@plt+0x56c0>
   17300:	bcc	17820 <__assert_fail@plt+0x5694>
   17304:	cmp	r3, #2
   17308:	bne	17434 <__assert_fail@plt+0x52a8>
   1730c:	ldr	r1, [r6, #80]	; 0x50
   17310:	movw	r3, #60840	; 0xeda8
   17314:	ldr	r2, [r6, #84]	; 0x54
   17318:	add	ip, sp, #4736	; 0x1280
   1731c:	movt	r3, #65535	; 0xffff
   17320:	add	ip, ip, #8
   17324:	add	r9, sp, #48	; 0x30
   17328:	str	r2, [sp, #52]	; 0x34
   1732c:	str	r9, [sp, #16]
   17330:	str	r1, [ip, r3]
   17334:	ldr	r3, [pc, #2256]	; 17c0c <__assert_fail@plt+0x5a80>
   17338:	add	r3, pc, r3
   1733c:	ldrb	r2, [r3, #504]	; 0x1f8
   17340:	cmp	r2, #0
   17344:	addeq	r7, sp, #1088	; 0x440
   17348:	addeq	r7, r7, #8
   1734c:	moveq	r4, r7
   17350:	bne	1785c <__assert_fail@plt+0x56d0>
   17354:	ldr	r2, [pc, #2228]	; 17c10 <__assert_fail@plt+0x5a84>
   17358:	add	r2, pc, r2
   1735c:	ldrb	r3, [r2, #512]	; 0x200
   17360:	cmp	r3, #0
   17364:	beq	17444 <__assert_fail@plt+0x52b8>
   17368:	ldrb	r3, [r6, #124]	; 0x7c
   1736c:	ldr	r8, [pc, #2208]	; 17c14 <__assert_fail@plt+0x5a88>
   17370:	cmp	r3, #0
   17374:	add	r8, pc, r8
   17378:	bne	179cc <__assert_fail@plt+0x5840>
   1737c:	ldr	r3, [pc, #2196]	; 17c18 <__assert_fail@plt+0x5a8c>
   17380:	mov	r0, r8
   17384:	mov	r1, #0
   17388:	add	r3, pc, r3
   1738c:	ldr	r3, [r3, #20]
   17390:	str	r3, [sp, #20]
   17394:	bl	1e460 <close_stdout@@Base+0x31e4>
   17398:	ldr	r3, [sp, #20]
   1739c:	rsb	r0, r0, r3
   173a0:	cmp	r0, #0
   173a4:	ble	17b64 <__assert_fail@plt+0x59d8>
   173a8:	ldr	r9, [sp, #16]
   173ac:	add	r3, r4, r0
   173b0:	mov	r2, #32
   173b4:	strb	r2, [r4], #1
   173b8:	cmp	r4, r3
   173bc:	bne	173b4 <__assert_fail@plt+0x5228>
   173c0:	str	r9, [sp, #16]
   173c4:	ldrb	r2, [r8], #1
   173c8:	mov	r4, r3
   173cc:	cmp	r2, #0
   173d0:	strb	r2, [r4], #1
   173d4:	beq	17438 <__assert_fail@plt+0x52ac>
   173d8:	mov	r3, r4
   173dc:	b	173c4 <__assert_fail@plt+0x5238>
   173e0:	mov	r3, #43	; 0x2b
   173e4:	strb	r3, [sl, #10]
   173e8:	b	172ec <__assert_fail@plt+0x5160>
   173ec:	ldr	ip, [pc, #2088]	; 17c1c <__assert_fail@plt+0x5a90>
   173f0:	add	r8, sp, #4736	; 0x1280
   173f4:	ldr	r2, [r6, #112]	; 0x70
   173f8:	movw	r3, #60848	; 0xedb0
   173fc:	add	ip, pc, ip
   17400:	movt	r3, #65535	; 0xffff
   17404:	add	ip, ip, r2
   17408:	add	fp, sp, #72	; 0x48
   1740c:	add	sl, sp, #56	; 0x38
   17410:	add	r8, r8, #8
   17414:	ldrb	ip, [ip, #116]	; 0x74
   17418:	sub	r0, fp, #15
   1741c:	mov	r1, #63	; 0x3f
   17420:	mov	r2, #10
   17424:	strb	ip, [r8, r3]
   17428:	bl	11ff4 <memset@plt>
   1742c:	strb	r4, [sl, #11]
   17430:	b	172bc <__assert_fail@plt+0x5130>
   17434:	bl	12138 <abort@plt>
   17438:	mov	r2, #32
   1743c:	str	r9, [sp, #16]
   17440:	strb	r2, [r3]
   17444:	ldrb	r2, [r6, #124]	; 0x7c
   17448:	ldr	r3, [pc, #2000]	; 17c20 <__assert_fail@plt+0x5a94>
   1744c:	cmp	r2, #0
   17450:	add	r3, pc, r3
   17454:	ldr	r8, [r3, #24]
   17458:	bne	178ec <__assert_fail@plt+0x5760>
   1745c:	ldr	r2, [pc, #1984]	; 17c24 <__assert_fail@plt+0x5a98>
   17460:	add	r2, pc, r2
   17464:	ldr	r3, [pc, #1980]	; 17c28 <__assert_fail@plt+0x5a9c>
   17468:	mov	r1, #1
   1746c:	str	r8, [sp, #4]
   17470:	mov	r0, r4
   17474:	add	r3, pc, r3
   17478:	str	r2, [sp, #8]
   1747c:	str	sl, [sp]
   17480:	mvn	r2, #0
   17484:	bl	11fdc <__sprintf_chk@plt>
   17488:	mov	r0, r4
   1748c:	bl	11fac <strlen@plt>
   17490:	ldr	r3, [pc, #1940]	; 17c2c <__assert_fail@plt+0x5aa0>
   17494:	add	r3, pc, r3
   17498:	ldr	r3, [r3, #2624]	; 0xa40
   1749c:	cmp	r3, #0
   174a0:	add	r8, r4, r0
   174a4:	beq	174dc <__assert_fail@plt+0x5350>
   174a8:	ldr	r3, [r6, #120]	; 0x78
   174ac:	cmp	r3, #0
   174b0:	beq	17ae0 <__assert_fail@plt+0x5954>
   174b4:	str	r3, [sp]
   174b8:	mov	r0, r8
   174bc:	ldr	r3, [pc, #1900]	; 17c30 <__assert_fail@plt+0x5aa4>
   174c0:	mov	r1, #1
   174c4:	mvn	r2, #0
   174c8:	add	r3, pc, r3
   174cc:	bl	11fdc <__sprintf_chk@plt>
   174d0:	mov	r0, r8
   174d4:	bl	11fac <strlen@plt>
   174d8:	add	r8, r8, r0
   174dc:	ldr	r4, [pc, #1872]	; 17c34 <__assert_fail@plt+0x5aa8>
   174e0:	add	r4, pc, r4
   174e4:	ldrb	r3, [r4, #2620]	; 0xa3c
   174e8:	cmp	r3, #0
   174ec:	ldr	r3, [pc, #1860]	; 17c38 <__assert_fail@plt+0x5aac>
   174f0:	bne	178c0 <__assert_fail@plt+0x5734>
   174f4:	ldr	sl, [r5, r3]
   174f8:	ldr	r3, [pc, #1852]	; 17c3c <__assert_fail@plt+0x5ab0>
   174fc:	add	r3, pc, r3
   17500:	ldrb	r2, [r3, #2]
   17504:	cmp	r2, #0
   17508:	bne	1752c <__assert_fail@plt+0x53a0>
   1750c:	ldrb	r3, [r3, #3]
   17510:	cmp	r3, #0
   17514:	bne	1752c <__assert_fail@plt+0x53a0>
   17518:	ldr	r3, [pc, #1824]	; 17c40 <__assert_fail@plt+0x5ab4>
   1751c:	add	r3, pc, r3
   17520:	ldrb	r3, [r3, #2672]	; 0xa70
   17524:	cmp	r3, #0
   17528:	beq	17590 <__assert_fail@plt+0x5404>
   1752c:	ldr	r1, [sl]
   17530:	mov	r0, r7
   17534:	bl	11c4c <fputs_unlocked@plt>
   17538:	ldr	r2, [pc, #1796]	; 17c44 <__assert_fail@plt+0x5ab8>
   1753c:	ldr	r3, [pc, #1796]	; 17c48 <__assert_fail@plt+0x5abc>
   17540:	rsb	ip, r7, r8
   17544:	add	r2, pc, r2
   17548:	add	r3, pc, r3
   1754c:	ldrb	r1, [r2, #2]
   17550:	ldr	r2, [r3, #484]	; 0x1e4
   17554:	cmp	r1, #0
   17558:	add	ip, ip, r2
   1755c:	str	ip, [r3, #484]	; 0x1e4
   17560:	bne	179a0 <__assert_fail@plt+0x5814>
   17564:	ldr	r3, [pc, #1760]	; 17c4c <__assert_fail@plt+0x5ac0>
   17568:	add	r3, pc, r3
   1756c:	ldrb	r3, [r3, #3]
   17570:	cmp	r3, #0
   17574:	bne	17984 <__assert_fail@plt+0x57f8>
   17578:	ldr	r3, [pc, #1744]	; 17c50 <__assert_fail@plt+0x5ac4>
   1757c:	add	r3, pc, r3
   17580:	ldrb	r2, [r3, #2672]	; 0xa70
   17584:	cmp	r2, #0
   17588:	moveq	r8, r7
   1758c:	bne	17904 <__assert_fail@plt+0x5778>
   17590:	ldrb	r3, [r6, #124]	; 0x7c
   17594:	cmp	r3, #0
   17598:	beq	17814 <__assert_fail@plt+0x5688>
   1759c:	ldr	r3, [r6, #24]
   175a0:	and	r3, r3, #45056	; 0xb000
   175a4:	cmp	r3, #8192	; 0x2000
   175a8:	beq	17a04 <__assert_fail@plt+0x5878>
   175ac:	ldr	r1, [pc, #1696]	; 17c54 <__assert_fail@plt+0x5ac8>
   175b0:	add	r2, sp, #92	; 0x5c
   175b4:	ldr	r3, [pc, #1692]	; 17c58 <__assert_fail@plt+0x5acc>
   175b8:	add	r1, pc, r1
   175bc:	add	r3, pc, r3
   175c0:	ldrd	r4, [r1, #8]
   175c4:	ldr	r3, [r3, #2676]	; 0xa74
   175c8:	ldrd	r0, [r6, #56]	; 0x38
   175cc:	strd	r4, [sp, #32]
   175d0:	mov	r4, #1
   175d4:	mov	r5, #0
   175d8:	strd	r4, [sp]
   175dc:	ldrd	r4, [sp, #32]
   175e0:	strd	r4, [sp, #8]
   175e4:	bl	1cd00 <close_stdout@@Base+0x1a84>
   175e8:	mov	r5, r0
   175ec:	ldr	r3, [pc, #1640]	; 17c5c <__assert_fail@plt+0x5ad0>
   175f0:	mov	r0, r5
   175f4:	mov	r1, #0
   175f8:	add	r3, pc, r3
   175fc:	ldr	r4, [r3, #52]	; 0x34
   17600:	bl	1e460 <close_stdout@@Base+0x31e4>
   17604:	rsb	r0, r0, r4
   17608:	cmp	r0, #0
   1760c:	ble	17ad4 <__assert_fail@plt+0x5948>
   17610:	ldr	r9, [sp, #16]
   17614:	add	r3, r8, r0
   17618:	mov	r2, #32
   1761c:	strb	r2, [r8], #1
   17620:	cmp	r8, r3
   17624:	bne	1761c <__assert_fail@plt+0x5490>
   17628:	str	r9, [sp, #16]
   1762c:	ldrb	r2, [r5], #1
   17630:	mov	r4, r3
   17634:	cmp	r2, #0
   17638:	strb	r2, [r4], #1
   1763c:	movne	r3, r4
   17640:	bne	1762c <__assert_fail@plt+0x54a0>
   17644:	mov	r2, #32
   17648:	str	r9, [sp, #16]
   1764c:	strb	r2, [r3]
   17650:	ldr	r0, [sp, #16]
   17654:	bl	11f28 <localtime@plt>
   17658:	mov	r3, #1
   1765c:	strb	r3, [r4]
   17660:	ldrb	r3, [r6, #124]	; 0x7c
   17664:	cmp	r3, #0
   17668:	mov	r2, r0
   1766c:	beq	17734 <__assert_fail@plt+0x55a8>
   17670:	cmp	r0, #0
   17674:	beq	17734 <__assert_fail@plt+0x55a8>
   17678:	ldr	r1, [pc, #1504]	; 17c60 <__assert_fail@plt+0x5ad4>
   1767c:	add	r8, sp, #4736	; 0x1280
   17680:	movw	r0, #60840	; 0xeda8
   17684:	add	r8, r8, #8
   17688:	add	r1, pc, r1
   1768c:	movt	r0, #65535	; 0xffff
   17690:	ldr	r5, [sp, #16]
   17694:	ldr	ip, [r8, r0]
   17698:	ldr	r0, [r1, #2680]	; 0xa78
   1769c:	ldr	r3, [r5, #4]
   176a0:	cmp	ip, r0
   176a4:	ldr	r1, [r1, #2684]	; 0xa7c
   176a8:	bgt	17af8 <__assert_fail@plt+0x596c>
   176ac:	blt	176bc <__assert_fail@plt+0x5530>
   176b0:	rsb	lr, r3, r1
   176b4:	cmp	lr, #0
   176b8:	blt	17af8 <__assert_fail@plt+0x596c>
   176bc:	mov	lr, r1
   176c0:	movw	r1, #15700	; 0x3d54
   176c4:	movt	r1, #65295	; 0xff0f
   176c8:	add	r1, r0, r1
   176cc:	cmp	r1, ip
   176d0:	bge	179b4 <__assert_fail@plt+0x5828>
   176d4:	cmp	r0, ip
   176d8:	movgt	ip, #1
   176dc:	bgt	176ec <__assert_fail@plt+0x5560>
   176e0:	blt	179c4 <__assert_fail@plt+0x5838>
   176e4:	rsb	ip, lr, r3
   176e8:	lsr	ip, ip, #31
   176ec:	ldr	r1, [pc, #1392]	; 17c64 <__assert_fail@plt+0x5ad8>
   176f0:	mov	r0, r4
   176f4:	add	r1, pc, r1
   176f8:	add	r1, r1, ip, lsl #2
   176fc:	ldr	r1, [r1, #192]	; 0xc0
   17700:	bl	16770 <__assert_fail@plt+0x45e4>
   17704:	cmp	r0, #0
   17708:	beq	17728 <__assert_fail@plt+0x559c>
   1770c:	add	r3, r4, r0
   17710:	mov	r1, #32
   17714:	mov	r2, #0
   17718:	strb	r1, [r4, r0]
   1771c:	add	r0, r3, #1
   17720:	strb	r2, [r3, #1]
   17724:	b	1778c <__assert_fail@plt+0x5600>
   17728:	ldrb	r3, [r4]
   1772c:	cmp	r3, #0
   17730:	beq	1770c <__assert_fail@plt+0x5580>
   17734:	ldr	r5, [pc, #1324]	; 17c68 <__assert_fail@plt+0x5adc>
   17738:	add	r5, pc, r5
   1773c:	ldr	r3, [r5, #16]
   17740:	cmp	r3, #0
   17744:	movge	r9, r3
   17748:	blt	17b70 <__assert_fail@plt+0x59e4>
   1774c:	ldrb	r2, [r6, #124]	; 0x7c
   17750:	cmp	r2, #0
   17754:	bne	17b3c <__assert_fail@plt+0x59b0>
   17758:	ldr	r2, [pc, #1292]	; 17c6c <__assert_fail@plt+0x5ae0>
   1775c:	add	r2, pc, r2
   17760:	ldr	r3, [pc, #1288]	; 17c70 <__assert_fail@plt+0x5ae4>
   17764:	mov	r1, #1
   17768:	str	r2, [sp, #4]
   1776c:	mov	r0, r4
   17770:	mvn	r2, #0
   17774:	add	r3, pc, r3
   17778:	str	r9, [sp]
   1777c:	bl	11fdc <__sprintf_chk@plt>
   17780:	mov	r0, r4
   17784:	bl	11fac <strlen@plt>
   17788:	add	r0, r4, r0
   1778c:	ldr	r5, [pc, #1248]	; 17c74 <__assert_fail@plt+0x5ae8>
   17790:	rsb	r4, r7, r0
   17794:	ldr	r1, [sl]
   17798:	mov	r0, r7
   1779c:	add	r5, pc, r5
   177a0:	bl	11c4c <fputs_unlocked@plt>
   177a4:	add	r2, r5, #2624	; 0xa40
   177a8:	mov	r3, r4
   177ac:	ldr	ip, [r5, #484]	; 0x1e4
   177b0:	add	r2, r2, #4
   177b4:	mov	r0, r6
   177b8:	mov	r1, #0
   177bc:	add	ip, r4, ip
   177c0:	str	ip, [r5, #484]	; 0x1e4
   177c4:	bl	16aa0 <__assert_fail@plt+0x4914>
   177c8:	ldr	r2, [r6, #112]	; 0x70
   177cc:	cmp	r2, #6
   177d0:	mov	r7, r0
   177d4:	beq	1791c <__assert_fail@plt+0x5790>
   177d8:	ldr	r3, [r5, #500]	; 0x1f4
   177dc:	cmp	r3, #0
   177e0:	beq	177f0 <__assert_fail@plt+0x5664>
   177e4:	ldrb	r0, [r6, #124]	; 0x7c
   177e8:	ldr	r1, [r6, #24]
   177ec:	bl	15f30 <__assert_fail@plt+0x3da4>
   177f0:	ldr	r5, [sp, #28]
   177f4:	add	r4, sp, #8192	; 0x2000
   177f8:	ldr	r2, [r4, #-3452]	; 0xfffff284
   177fc:	ldr	r3, [r5]
   17800:	cmp	r2, r3
   17804:	bne	17bf8 <__assert_fail@plt+0x5a6c>
   17808:	add	sp, sp, #4736	; 0x1280
   1780c:	add	sp, sp, #12
   17810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17814:	ldr	r5, [pc, #1116]	; 17c78 <__assert_fail@plt+0x5aec>
   17818:	add	r5, pc, r5
   1781c:	b	175ec <__assert_fail@plt+0x5460>
   17820:	ldr	r1, [r6, #88]	; 0x58
   17824:	add	r8, sp, #4736	; 0x1280
   17828:	ldr	r2, [r6, #92]	; 0x5c
   1782c:	movw	r3, #60840	; 0xeda8
   17830:	add	r8, r8, #8
   17834:	movt	r3, #65535	; 0xffff
   17838:	add	r4, sp, #48	; 0x30
   1783c:	str	r4, [sp, #16]
   17840:	str	r1, [r8, r3]
   17844:	str	r2, [sp, #52]	; 0x34
   17848:	b	17334 <__assert_fail@plt+0x51a8>
   1784c:	ldr	r1, [r6, #96]	; 0x60
   17850:	movw	r3, #60840	; 0xeda8
   17854:	ldr	r2, [r6, #100]	; 0x64
   17858:	b	17318 <__assert_fail@plt+0x518c>
   1785c:	ldrb	r2, [r6, #124]	; 0x7c
   17860:	ldr	r0, [pc, #1044]	; 17c7c <__assert_fail@plt+0x5af0>
   17864:	cmp	r2, #0
   17868:	ldr	r4, [r3, #16]
   1786c:	add	r0, pc, r0
   17870:	beq	17888 <__assert_fail@plt+0x56fc>
   17874:	ldrd	r0, [r6, #104]	; 0x68
   17878:	orrs	lr, r0, r1
   1787c:	bne	17aec <__assert_fail@plt+0x5960>
   17880:	ldr	r0, [pc, #1016]	; 17c80 <__assert_fail@plt+0x5af4>
   17884:	add	r0, pc, r0
   17888:	add	r7, sp, #1088	; 0x440
   1788c:	ldr	r3, [pc, #1008]	; 17c84 <__assert_fail@plt+0x5af8>
   17890:	add	r7, r7, #8
   17894:	str	r4, [sp]
   17898:	str	r0, [sp, #4]
   1789c:	mov	r1, #1
   178a0:	movw	r2, #3643	; 0xe3b
   178a4:	add	r3, pc, r3
   178a8:	mov	r0, r7
   178ac:	bl	11fdc <__sprintf_chk@plt>
   178b0:	mov	r0, r7
   178b4:	bl	11fac <strlen@plt>
   178b8:	add	r4, r7, r0
   178bc:	b	17354 <__assert_fail@plt+0x51c8>
   178c0:	ldr	sl, [r5, r3]
   178c4:	mov	r1, #1
   178c8:	ldr	r0, [pc, #952]	; 17c88 <__assert_fail@plt+0x5afc>
   178cc:	mov	r2, #2
   178d0:	ldr	r3, [sl]
   178d4:	add	r0, pc, r0
   178d8:	bl	11d3c <fwrite_unlocked@plt>
   178dc:	ldr	r3, [r4, #484]	; 0x1e4
   178e0:	add	r3, r3, #2
   178e4:	str	r3, [r4, #484]	; 0x1e4
   178e8:	b	174f8 <__assert_fail@plt+0x536c>
   178ec:	add	r2, sp, #92	; 0x5c
   178f0:	ldr	r0, [r6, #28]
   178f4:	mov	r1, #0
   178f8:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   178fc:	mov	r2, r0
   17900:	b	17464 <__assert_fail@plt+0x52d8>
   17904:	ldr	r1, [r3, #36]	; 0x24
   17908:	mov	r8, r7
   1790c:	ldr	r0, [r6, #32]
   17910:	ldrb	r2, [r6, #124]	; 0x7c
   17914:	bl	15980 <__assert_fail@plt+0x37f4>
   17918:	b	17590 <__assert_fail@plt+0x5404>
   1791c:	ldr	r3, [r6, #4]
   17920:	cmp	r3, #0
   17924:	beq	177f0 <__assert_fail@plt+0x5664>
   17928:	ldr	r0, [pc, #860]	; 17c8c <__assert_fail@plt+0x5b00>
   1792c:	mov	r1, #1
   17930:	ldr	r3, [sl]
   17934:	mov	r2, #4
   17938:	add	r0, pc, r0
   1793c:	bl	11d3c <fwrite_unlocked@plt>
   17940:	ldr	ip, [r5, #484]	; 0x1e4
   17944:	add	r3, r7, #4
   17948:	mov	r0, r6
   1794c:	add	r3, r3, r4
   17950:	mov	r1, #1
   17954:	mov	r2, #0
   17958:	add	ip, ip, #4
   1795c:	str	ip, [r5, #484]	; 0x1e4
   17960:	bl	16aa0 <__assert_fail@plt+0x4914>
   17964:	ldr	r3, [r5, #500]	; 0x1f4
   17968:	cmp	r3, #0
   1796c:	beq	177f0 <__assert_fail@plt+0x5664>
   17970:	ldr	r1, [r6, #116]	; 0x74
   17974:	mov	r2, #0
   17978:	mov	r0, #1
   1797c:	bl	15f30 <__assert_fail@plt+0x3da4>
   17980:	b	177f0 <__assert_fail@plt+0x5664>
   17984:	ldr	r3, [pc, #772]	; 17c90 <__assert_fail@plt+0x5b04>
   17988:	ldr	r0, [r6, #36]	; 0x24
   1798c:	add	r3, pc, r3
   17990:	ldrb	r2, [r6, #124]	; 0x7c
   17994:	ldr	r1, [r3, #32]
   17998:	bl	15908 <__assert_fail@plt+0x377c>
   1799c:	b	17578 <__assert_fail@plt+0x53ec>
   179a0:	ldr	r1, [r3, #28]
   179a4:	ldr	r0, [r6, #32]
   179a8:	ldrb	r2, [r6, #124]	; 0x7c
   179ac:	bl	15980 <__assert_fail@plt+0x37f4>
   179b0:	b	17564 <__assert_fail@plt+0x53d8>
   179b4:	bgt	179c4 <__assert_fail@plt+0x5838>
   179b8:	rsb	r1, r3, lr
   179bc:	cmp	r1, #0
   179c0:	blt	176d4 <__assert_fail@plt+0x5548>
   179c4:	mov	ip, #0
   179c8:	b	176ec <__assert_fail@plt+0x5560>
   179cc:	mov	ip, #520	; 0x208
   179d0:	ldrd	r8, [r6, #72]	; 0x48
   179d4:	ldrd	r0, [r2, ip]
   179d8:	ldr	r3, [r2, #516]	; 0x204
   179dc:	add	r2, sp, #92	; 0x5c
   179e0:	strd	r0, [sp, #8]
   179e4:	mov	r0, r8
   179e8:	mov	r1, r9
   179ec:	mov	r8, #512	; 0x200
   179f0:	mov	r9, #0
   179f4:	strd	r8, [sp]
   179f8:	bl	1cd00 <close_stdout@@Base+0x1a84>
   179fc:	mov	r8, r0
   17a00:	b	1737c <__assert_fail@plt+0x51f0>
   17a04:	ldr	r4, [pc, #648]	; 17c94 <__assert_fail@plt+0x5b08>
   17a08:	movw	r3, #65534	; 0xfffe
   17a0c:	ldr	r0, [r6, #44]	; 0x2c
   17a10:	movt	r3, #65535	; 0xffff
   17a14:	add	r4, pc, r4
   17a18:	ldr	r2, [r6, #40]	; 0x28
   17a1c:	bic	r0, r0, #4080	; 0xff0
   17a20:	mov	r1, #0
   17a24:	ldr	lr, [r4, #44]	; 0x2c
   17a28:	ubfx	r2, r2, #8, #12
   17a2c:	ldr	r5, [r4, #48]	; 0x30
   17a30:	bic	r0, r0, #15
   17a34:	ldr	ip, [r4, #52]	; 0x34
   17a38:	rsb	r3, lr, r3
   17a3c:	rsb	r3, r5, r3
   17a40:	orr	r0, r0, r2
   17a44:	add	r3, r3, ip
   17a48:	sub	r2, fp, #4
   17a4c:	cmp	r3, r1
   17a50:	addge	ip, lr, r3
   17a54:	addlt	ip, lr, r1
   17a58:	str	ip, [sp, #24]
   17a5c:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   17a60:	ldr	r3, [r6, #40]	; 0x28
   17a64:	ldr	r9, [r6, #44]	; 0x2c
   17a68:	add	r2, sp, #92	; 0x5c
   17a6c:	mov	r1, #0
   17a70:	lsr	lr, r3, #12
   17a74:	orr	lr, lr, r9, lsl #20
   17a78:	bic	lr, lr, #255	; 0xff
   17a7c:	mov	r5, r0
   17a80:	uxtb	r0, r3
   17a84:	ldr	r3, [r4, #48]	; 0x30
   17a88:	orr	r0, lr, r0
   17a8c:	str	r3, [sp, #20]
   17a90:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   17a94:	ldr	r3, [sp, #20]
   17a98:	mov	r1, #1
   17a9c:	ldr	ip, [sp, #24]
   17aa0:	mvn	r2, #0
   17aa4:	str	r5, [sp, #4]
   17aa8:	str	r3, [sp, #8]
   17aac:	ldr	r3, [pc, #484]	; 17c98 <__assert_fail@plt+0x5b0c>
   17ab0:	str	ip, [sp]
   17ab4:	add	r3, pc, r3
   17ab8:	str	r0, [sp, #12]
   17abc:	mov	r0, r8
   17ac0:	bl	11fdc <__sprintf_chk@plt>
   17ac4:	ldr	r4, [r4, #52]	; 0x34
   17ac8:	add	r4, r4, #1
   17acc:	add	r4, r8, r4
   17ad0:	b	17650 <__assert_fail@plt+0x54c4>
   17ad4:	mov	r3, r8
   17ad8:	ldr	r9, [sp, #16]
   17adc:	b	1762c <__assert_fail@plt+0x54a0>
   17ae0:	ldr	r3, [pc, #436]	; 17c9c <__assert_fail@plt+0x5b10>
   17ae4:	add	r3, pc, r3
   17ae8:	b	174b4 <__assert_fail@plt+0x5328>
   17aec:	add	r2, sp, #92	; 0x5c
   17af0:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   17af4:	b	17888 <__assert_fail@plt+0x56fc>
   17af8:	ldr	r5, [pc, #416]	; 17ca0 <__assert_fail@plt+0x5b14>
   17afc:	str	r2, [sp, #24]
   17b00:	add	r5, pc, r5
   17b04:	add	r0, r5, #2672	; 0xa70
   17b08:	add	r0, r0, #8
   17b0c:	bl	1bb58 <close_stdout@@Base+0x8dc>
   17b10:	ldr	r9, [sp, #16]
   17b14:	add	lr, sp, #4736	; 0x1280
   17b18:	movw	r1, #60840	; 0xeda8
   17b1c:	add	lr, lr, #8
   17b20:	movt	r1, #65535	; 0xffff
   17b24:	ldr	r3, [r9, #4]
   17b28:	ldr	ip, [lr, r1]
   17b2c:	ldr	r0, [r5, #2680]	; 0xa78
   17b30:	ldr	lr, [r5, #2684]	; 0xa7c
   17b34:	ldr	r2, [sp, #24]
   17b38:	b	176c0 <__assert_fail@plt+0x5534>
   17b3c:	add	r3, sp, #4736	; 0x1280
   17b40:	movw	r2, #60840	; 0xeda8
   17b44:	add	r3, r3, #8
   17b48:	movt	r2, #65535	; 0xffff
   17b4c:	ldr	r0, [r3, r2]
   17b50:	add	r2, sp, #92	; 0x5c
   17b54:	asr	r1, r0, #31
   17b58:	bl	1dce8 <close_stdout@@Base+0x2a6c>
   17b5c:	mov	r2, r0
   17b60:	b	17760 <__assert_fail@plt+0x55d4>
   17b64:	mov	r3, r4
   17b68:	ldr	r9, [sp, #16]
   17b6c:	b	173c4 <__assert_fail@plt+0x5238>
   17b70:	add	r1, sp, #4736	; 0x1280
   17b74:	movw	r3, #60836	; 0xeda4
   17b78:	add	r1, r1, #8
   17b7c:	movt	r3, #65535	; 0xffff
   17b80:	sub	r0, fp, #28
   17b84:	mov	r9, #0
   17b88:	str	r9, [r1, r3]
   17b8c:	bl	11f28 <localtime@plt>
   17b90:	subs	r2, r0, #0
   17b94:	beq	17bc8 <__assert_fail@plt+0x5a3c>
   17b98:	ldr	r1, [pc, #260]	; 17ca4 <__assert_fail@plt+0x5b18>
   17b9c:	add	fp, sp, #92	; 0x5c
   17ba0:	mov	r3, r9
   17ba4:	add	r1, pc, r1
   17ba8:	mov	r0, fp
   17bac:	ldr	r1, [r1, #192]	; 0xc0
   17bb0:	bl	16770 <__assert_fail@plt+0x45e4>
   17bb4:	subs	r1, r0, #0
   17bb8:	bne	17be0 <__assert_fail@plt+0x5a54>
   17bbc:	ldr	r9, [r5, #16]
   17bc0:	cmp	r9, #0
   17bc4:	bge	1774c <__assert_fail@plt+0x55c0>
   17bc8:	ldr	r1, [pc, #216]	; 17ca8 <__assert_fail@plt+0x5b1c>
   17bcc:	mov	r2, #0
   17bd0:	mov	r9, r2
   17bd4:	add	r1, pc, r1
   17bd8:	str	r2, [r1, #16]
   17bdc:	b	1774c <__assert_fail@plt+0x55c0>
   17be0:	mov	r2, r9
   17be4:	mov	r0, fp
   17be8:	bl	1e244 <close_stdout@@Base+0x2fc8>
   17bec:	mov	r9, r0
   17bf0:	str	r0, [r5, #16]
   17bf4:	b	17bc0 <__assert_fail@plt+0x5a34>
   17bf8:	bl	11d78 <__stack_chk_fail@plt>
   17bfc:	andeq	r1, r2, r4, ror sp
   17c00:	andeq	r0, r0, r0, ror #3
   17c04:	andeq	r2, r2, r8, lsr #1
   17c08:	andeq	r2, r2, r8, ror r0
   17c0c:	andeq	r2, r2, r0, lsr r0
   17c10:	andeq	r2, r2, r0, lsl r0
   17c14:	andeq	sp, r0, r8, lsl #7
   17c18:	andeq	r1, r2, r0, ror #31
   17c1c:	andeq	sp, r0, r4, ror #2
   17c20:	andeq	r1, r2, r8, lsl pc
   17c24:	muleq	r0, ip, r2
   17c28:	andeq	sp, r0, r8, ror r3
   17c2c:	ldrdeq	r1, [r2], -r4
   17c30:	andeq	sp, r0, r8, lsl #6
   17c34:	andeq	r1, r2, r8, lsl #29
   17c38:	andeq	r0, r0, r0, lsl r2
   17c3c:	andeq	r1, r2, r4, lsr sp
   17c40:	andeq	r1, r2, ip, asr #28
   17c44:	andeq	r1, r2, ip, ror #25
   17c48:	andeq	r1, r2, r0, lsr #28
   17c4c:	andeq	r1, r2, r8, asr #25
   17c50:	andeq	r1, r2, ip, ror #27
   17c54:	andeq	r1, r2, r8, ror ip
   17c58:	andeq	r1, r2, ip, lsr #27
   17c5c:	andeq	r1, r2, r0, ror sp
   17c60:	andeq	r1, r2, r0, ror #25
   17c64:	andeq	r1, r2, r4, asr fp
   17c68:	strdeq	r1, [r2], -r8
   17c6c:	andeq	ip, r0, r0, lsr #31
   17c70:	andeq	sp, r0, r0, ror r0
   17c74:	andeq	r1, r2, ip, asr #23
   17c78:	andeq	ip, r0, r4, ror #29
   17c7c:	muleq	r0, r0, lr
   17c80:	andeq	ip, r0, r8, ror lr
   17c84:	andeq	ip, r0, r0, asr #30
   17c88:	andeq	ip, r0, r4, lsl #30
   17c8c:	andeq	ip, r0, r4, lsr #29
   17c90:	ldrdeq	r1, [r2], -ip
   17c94:	andeq	r1, r2, r4, asr r9
   17c98:	andeq	ip, r0, r0, asr #26
   17c9c:	andeq	lr, r0, ip, ror #25
   17ca0:	andeq	r1, r2, r8, ror #16
   17ca4:	andeq	r1, r2, r4, lsr #13
   17ca8:	andeq	r1, r2, ip, asr r6
   17cac:	push	{r4, r5}
   17cb0:	ldrd	r2, [r1, #56]	; 0x38
   17cb4:	ldrd	r4, [r0, #56]	; 0x38
   17cb8:	cmp	r2, r4
   17cbc:	sbcs	ip, r3, r5
   17cc0:	blt	17ce0 <__assert_fail@plt+0x5b54>
   17cc4:	cmp	r4, r2
   17cc8:	sbcs	ip, r5, r3
   17ccc:	blt	17cec <__assert_fail@plt+0x5b60>
   17cd0:	ldr	r0, [r0]
   17cd4:	ldr	r1, [r1]
   17cd8:	pop	{r4, r5}
   17cdc:	b	150ac <__assert_fail@plt+0x2f20>
   17ce0:	mvn	r0, #0
   17ce4:	pop	{r4, r5}
   17ce8:	bx	lr
   17cec:	mov	r0, #1
   17cf0:	pop	{r4, r5}
   17cf4:	bx	lr
   17cf8:	push	{r4, r5}
   17cfc:	mov	ip, r0
   17d00:	ldrd	r2, [r0, #56]	; 0x38
   17d04:	ldrd	r4, [r1, #56]	; 0x38
   17d08:	cmp	r2, r4
   17d0c:	sbcs	r0, r3, r5
   17d10:	blt	17d30 <__assert_fail@plt+0x5ba4>
   17d14:	cmp	r4, r2
   17d18:	sbcs	r0, r5, r3
   17d1c:	blt	17d3c <__assert_fail@plt+0x5bb0>
   17d20:	ldr	r0, [r1]
   17d24:	pop	{r4, r5}
   17d28:	ldr	r1, [ip]
   17d2c:	b	150ac <__assert_fail@plt+0x2f20>
   17d30:	mvn	r0, #0
   17d34:	pop	{r4, r5}
   17d38:	bx	lr
   17d3c:	mov	r0, #1
   17d40:	pop	{r4, r5}
   17d44:	bx	lr
   17d48:	ldr	r3, [pc, #380]	; 17ecc <__assert_fail@plt+0x5d40>
   17d4c:	ldr	r2, [pc, #380]	; 17ed0 <__assert_fail@plt+0x5d44>
   17d50:	add	r3, pc, r3
   17d54:	push	{r4, r5, r6, r7, r8, r9, lr}
   17d58:	sub	sp, sp, #676	; 0x2a4
   17d5c:	ldr	r7, [r3, r2]
   17d60:	mov	r6, r0
   17d64:	mov	r8, r1
   17d68:	ldr	r3, [r7]
   17d6c:	str	r3, [sp, #668]	; 0x29c
   17d70:	bl	1691c <__assert_fail@plt+0x4790>
   17d74:	ldr	r3, [pc, #344]	; 17ed4 <__assert_fail@plt+0x5d48>
   17d78:	add	r3, pc, r3
   17d7c:	ldrb	r2, [r3, #504]	; 0x1f8
   17d80:	cmp	r2, #0
   17d84:	beq	17dd8 <__assert_fail@plt+0x5c4c>
   17d88:	ldr	r2, [r3, #508]	; 0x1fc
   17d8c:	cmp	r2, #4
   17d90:	ldrne	r9, [r3, #16]
   17d94:	moveq	r9, #0
   17d98:	ldrb	r3, [r6, #124]	; 0x7c
   17d9c:	cmp	r3, #0
   17da0:	beq	17dbc <__assert_fail@plt+0x5c30>
   17da4:	ldrd	r0, [r6, #104]	; 0x68
   17da8:	orrs	r3, r0, r1
   17dac:	bne	17eb8 <__assert_fail@plt+0x5d2c>
   17db0:	ldr	r3, [pc, #288]	; 17ed8 <__assert_fail@plt+0x5d4c>
   17db4:	add	r3, pc, r3
   17db8:	b	17dc4 <__assert_fail@plt+0x5c38>
   17dbc:	ldr	r3, [pc, #280]	; 17edc <__assert_fail@plt+0x5d50>
   17dc0:	add	r3, pc, r3
   17dc4:	ldr	r1, [pc, #276]	; 17ee0 <__assert_fail@plt+0x5d54>
   17dc8:	mov	r2, r9
   17dcc:	mov	r0, #1
   17dd0:	add	r1, pc, r1
   17dd4:	bl	1200c <__printf_chk@plt>
   17dd8:	ldr	r3, [pc, #260]	; 17ee4 <__assert_fail@plt+0x5d58>
   17ddc:	add	r3, pc, r3
   17de0:	ldrb	r2, [r3, #512]	; 0x200
   17de4:	cmp	r2, #0
   17de8:	beq	17e24 <__assert_fail@plt+0x5c98>
   17dec:	ldr	r2, [r3, #508]	; 0x1fc
   17df0:	cmp	r2, #4
   17df4:	ldrne	r9, [r3, #20]
   17df8:	moveq	r9, #0
   17dfc:	ldrb	r3, [r6, #124]	; 0x7c
   17e00:	cmp	r3, #0
   17e04:	bne	17e80 <__assert_fail@plt+0x5cf4>
   17e08:	ldr	r3, [pc, #216]	; 17ee8 <__assert_fail@plt+0x5d5c>
   17e0c:	add	r3, pc, r3
   17e10:	ldr	r1, [pc, #212]	; 17eec <__assert_fail@plt+0x5d60>
   17e14:	mov	r2, r9
   17e18:	mov	r0, #1
   17e1c:	add	r1, pc, r1
   17e20:	bl	1200c <__printf_chk@plt>
   17e24:	mov	r1, #0
   17e28:	mov	r3, r8
   17e2c:	mov	r2, r1
   17e30:	mov	r0, r6
   17e34:	bl	16aa0 <__assert_fail@plt+0x4914>
   17e38:	ldr	r3, [pc, #176]	; 17ef0 <__assert_fail@plt+0x5d64>
   17e3c:	add	r3, pc, r3
   17e40:	ldr	r3, [r3, #500]	; 0x1f4
   17e44:	cmp	r3, #0
   17e48:	mov	r4, r0
   17e4c:	beq	17e64 <__assert_fail@plt+0x5cd8>
   17e50:	ldrb	r0, [r6, #124]	; 0x7c
   17e54:	ldr	r1, [r6, #24]
   17e58:	ldr	r2, [r6, #112]	; 0x70
   17e5c:	bl	15f30 <__assert_fail@plt+0x3da4>
   17e60:	add	r4, r4, r0
   17e64:	ldr	r2, [sp, #668]	; 0x29c
   17e68:	mov	r0, r4
   17e6c:	ldr	r3, [r7]
   17e70:	cmp	r2, r3
   17e74:	bne	17ec8 <__assert_fail@plt+0x5d3c>
   17e78:	add	sp, sp, #676	; 0x2a4
   17e7c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e80:	ldr	ip, [pc, #108]	; 17ef4 <__assert_fail@plt+0x5d68>
   17e84:	mov	lr, #520	; 0x208
   17e88:	ldrd	r0, [r6, #72]	; 0x48
   17e8c:	mov	r4, #512	; 0x200
   17e90:	add	ip, pc, ip
   17e94:	mov	r5, #0
   17e98:	strd	r4, [sp]
   17e9c:	add	r2, sp, #16
   17ea0:	ldrd	r4, [ip, lr]
   17ea4:	ldr	r3, [ip, #516]	; 0x204
   17ea8:	strd	r4, [sp, #8]
   17eac:	bl	1cd00 <close_stdout@@Base+0x1a84>
   17eb0:	mov	r3, r0
   17eb4:	b	17e10 <__assert_fail@plt+0x5c84>
   17eb8:	add	r2, sp, #16
   17ebc:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   17ec0:	mov	r3, r0
   17ec4:	b	17dc4 <__assert_fail@plt+0x5c38>
   17ec8:	bl	11d78 <__stack_chk_fail@plt>
   17ecc:	andeq	r1, r2, r8, lsr #5
   17ed0:	andeq	r0, r0, r0, ror #3
   17ed4:	strdeq	r1, [r2], -r0
   17ed8:	andeq	ip, r0, r8, asr #18
   17edc:	andeq	ip, r0, ip, lsr r9
   17ee0:	andeq	ip, r0, r4, lsl sl
   17ee4:	andeq	r1, r2, ip, lsl #11
   17ee8:	strdeq	ip, [r0], -r0
   17eec:	andeq	ip, r0, r8, asr #19
   17ef0:	andeq	r1, r2, ip, lsr #10
   17ef4:	ldrdeq	r1, [r2], -r8
   17ef8:	ldr	r3, [pc, #1416]	; 18488 <__assert_fail@plt+0x62fc>
   17efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f00:	add	r3, pc, r3
   17f04:	ldr	ip, [pc, #1408]	; 1848c <__assert_fail@plt+0x6300>
   17f08:	sub	sp, sp, #28
   17f0c:	ldr	r3, [r3, #508]	; 0x1fc
   17f10:	add	ip, pc, ip
   17f14:	cmp	r3, #5
   17f18:	addls	pc, pc, r3, lsl #2
   17f1c:	b	17f6c <__assert_fail@plt+0x5de0>
   17f20:	b	17ff4 <__assert_fail@plt+0x5e68>
   17f24:	b	18078 <__assert_fail@plt+0x5eec>
   17f28:	b	180f0 <__assert_fail@plt+0x5f64>
   17f2c:	b	18230 <__assert_fail@plt+0x60a4>
   17f30:	b	18338 <__assert_fail@plt+0x61ac>
   17f34:	b	17f74 <__assert_fail@plt+0x5de8>
   17f38:	ldr	r3, [pc, #1360]	; 18490 <__assert_fail@plt+0x6304>
   17f3c:	ldr	r3, [ip, r3]
   17f40:	str	r3, [sp, #20]
   17f44:	ldr	r2, [sp, #20]
   17f48:	ldr	r0, [r2]
   17f4c:	ldr	r3, [r0, #20]
   17f50:	ldr	r2, [r0, #24]
   17f54:	cmp	r3, r2
   17f58:	addcc	r1, r3, #1
   17f5c:	strcc	r1, [r0, #20]
   17f60:	movcc	r2, #10
   17f64:	strbcc	r2, [r3]
   17f68:	bcs	18460 <__assert_fail@plt+0x62d4>
   17f6c:	add	sp, sp, #28
   17f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f74:	ldr	r7, [pc, #1304]	; 18494 <__assert_fail@plt+0x6308>
   17f78:	add	r7, pc, r7
   17f7c:	ldr	r3, [r7, #8]
   17f80:	cmp	r3, #0
   17f84:	beq	17f6c <__assert_fail@plt+0x5de0>
   17f88:	ldr	r3, [pc, #1280]	; 18490 <__assert_fail@plt+0x6304>
   17f8c:	mov	r5, r7
   17f90:	mov	r4, #0
   17f94:	mov	r6, #10
   17f98:	ldr	r3, [ip, r3]
   17f9c:	mov	r8, r3
   17fa0:	str	r3, [sp, #20]
   17fa4:	ldr	r3, [r7, #56]	; 0x38
   17fa8:	ldr	r0, [r3, r4, lsl #2]
   17fac:	bl	16fb4 <__assert_fail@plt+0x4e28>
   17fb0:	ldr	r0, [r8]
   17fb4:	ldr	r3, [r0, #20]
   17fb8:	ldr	r1, [r0, #24]
   17fbc:	add	r2, r3, #1
   17fc0:	cmp	r3, r1
   17fc4:	strcc	r2, [r0, #20]
   17fc8:	strbcc	r6, [r3]
   17fcc:	bcs	18454 <__assert_fail@plt+0x62c8>
   17fd0:	ldr	r2, [r5, #8]
   17fd4:	add	r4, r4, #1
   17fd8:	ldr	r3, [r5, #484]	; 0x1e4
   17fdc:	cmp	r2, r4
   17fe0:	add	r3, r3, #1
   17fe4:	str	r3, [r5, #484]	; 0x1e4
   17fe8:	bhi	17fa4 <__assert_fail@plt+0x5e18>
   17fec:	add	sp, sp, #28
   17ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ff4:	ldr	r6, [pc, #1180]	; 18498 <__assert_fail@plt+0x630c>
   17ff8:	add	r6, pc, r6
   17ffc:	ldr	r3, [r6, #8]
   18000:	cmp	r3, #0
   18004:	beq	17f6c <__assert_fail@plt+0x5de0>
   18008:	ldr	r3, [pc, #1152]	; 18490 <__assert_fail@plt+0x6304>
   1800c:	mov	r5, r6
   18010:	mov	r4, #0
   18014:	mov	r7, #10
   18018:	ldr	r3, [ip, r3]
   1801c:	mov	r8, r3
   18020:	str	r3, [sp, #20]
   18024:	bl	1691c <__assert_fail@plt+0x4790>
   18028:	ldr	r3, [r6, #56]	; 0x38
   1802c:	ldr	r0, [r3, r4, lsl #2]
   18030:	bl	1726c <__assert_fail@plt+0x50e0>
   18034:	ldr	r0, [r8]
   18038:	ldr	r3, [r0, #20]
   1803c:	ldr	r1, [r0, #24]
   18040:	add	r2, r3, #1
   18044:	cmp	r3, r1
   18048:	strcc	r2, [r0, #20]
   1804c:	strbcc	r7, [r3]
   18050:	bcs	18448 <__assert_fail@plt+0x62bc>
   18054:	ldr	r2, [r5, #8]
   18058:	add	r4, r4, #1
   1805c:	ldr	r3, [r5, #484]	; 0x1e4
   18060:	cmp	r2, r4
   18064:	add	r3, r3, #1
   18068:	str	r3, [r5, #484]	; 0x1e4
   1806c:	bhi	18024 <__assert_fail@plt+0x5e98>
   18070:	add	sp, sp, #28
   18074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18078:	ldr	r6, [pc, #1052]	; 1849c <__assert_fail@plt+0x6310>
   1807c:	add	r6, pc, r6
   18080:	ldr	r3, [r6, #8]
   18084:	cmp	r3, #0
   18088:	beq	17f6c <__assert_fail@plt+0x5de0>
   1808c:	ldr	r3, [pc, #1020]	; 18490 <__assert_fail@plt+0x6304>
   18090:	mov	r7, r6
   18094:	mov	r4, #0
   18098:	mov	r5, #10
   1809c:	ldr	r3, [ip, r3]
   180a0:	mov	r8, r3
   180a4:	str	r3, [sp, #20]
   180a8:	ldr	r3, [r6, #56]	; 0x38
   180ac:	mov	r1, #0
   180b0:	ldr	r0, [r3, r4, lsl #2]
   180b4:	bl	17d48 <__assert_fail@plt+0x5bbc>
   180b8:	ldr	r0, [r8]
   180bc:	ldr	r3, [r0, #20]
   180c0:	ldr	r1, [r0, #24]
   180c4:	add	r2, r3, #1
   180c8:	cmp	r3, r1
   180cc:	strcc	r2, [r0, #20]
   180d0:	strbcc	r5, [r3]
   180d4:	bcs	1843c <__assert_fail@plt+0x62b0>
   180d8:	ldr	r3, [r7, #8]
   180dc:	add	r4, r4, #1
   180e0:	cmp	r3, r4
   180e4:	bhi	180a8 <__assert_fail@plt+0x5f1c>
   180e8:	add	sp, sp, #28
   180ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f0:	mov	r0, #1
   180f4:	str	ip, [sp, #4]
   180f8:	bl	160fc <__assert_fail@plt+0x3f70>
   180fc:	ldr	r5, [pc, #924]	; 184a0 <__assert_fail@plt+0x6314>
   18100:	add	r5, pc, r5
   18104:	ldr	r6, [r5, #8]
   18108:	ldr	sl, [r5, #540]	; 0x21c
   1810c:	add	r3, r0, r0, lsl #1
   18110:	mov	r4, r0
   18114:	mov	r1, r0
   18118:	mov	r0, r6
   1811c:	lsl	r3, r3, #2
   18120:	sub	r3, r3, #12
   18124:	add	sl, sl, r3
   18128:	bl	236d8 <close_stdout@@Base+0x845c>
   1812c:	mov	r0, r6
   18130:	adds	r8, r1, #0
   18134:	mov	r1, r4
   18138:	movne	r8, #1
   1813c:	bl	234ec <close_stdout@@Base+0x8270>
   18140:	ldr	ip, [sp, #4]
   18144:	adds	r8, r8, r0
   18148:	str	r8, [sp, #8]
   1814c:	beq	17f6c <__assert_fail@plt+0x5de0>
   18150:	ldr	r3, [pc, #824]	; 18490 <__assert_fail@plt+0x6304>
   18154:	lsl	r2, r8, #2
   18158:	str	r2, [sp, #12]
   1815c:	mov	r2, #0
   18160:	str	r2, [sp, #16]
   18164:	mov	fp, r5
   18168:	ldr	r3, [ip, r3]
   1816c:	str	r3, [sp, #20]
   18170:	ldr	r3, [sp, #16]
   18174:	mov	r5, #0
   18178:	mov	r4, r5
   1817c:	mov	r9, fp
   18180:	lsl	r7, r3, #2
   18184:	mov	r6, r3
   18188:	b	18190 <__assert_fail@plt+0x6004>
   1818c:	bl	152a8 <__assert_fail@plt+0x311c>
   18190:	ldr	r2, [r9, #56]	; 0x38
   18194:	ldr	r3, [sp, #8]
   18198:	ldr	r8, [r2, r7]
   1819c:	add	r6, r6, r3
   181a0:	ldr	r2, [sp, #12]
   181a4:	mov	r0, r8
   181a8:	add	r7, r7, r2
   181ac:	bl	15fa8 <__assert_fail@plt+0x3e1c>
   181b0:	ldr	ip, [sl, #8]
   181b4:	mov	r1, r4
   181b8:	mov	fp, r0
   181bc:	mov	r0, r8
   181c0:	ldr	r8, [ip, r5]
   181c4:	bl	17d48 <__assert_fail@plt+0x5bbc>
   181c8:	ldr	r1, [r9, #8]
   181cc:	add	r0, r4, fp
   181d0:	add	r4, r4, r8
   181d4:	add	r5, r5, #4
   181d8:	cmp	r6, r1
   181dc:	mov	r1, r4
   181e0:	bcc	1818c <__assert_fail@plt+0x6000>
   181e4:	ldr	r3, [sp, #20]
   181e8:	mov	fp, r9
   181ec:	ldr	r0, [r3]
   181f0:	ldr	r3, [r0, #20]
   181f4:	ldr	r1, [r0, #24]
   181f8:	cmp	r3, r1
   181fc:	addcc	r1, r3, #1
   18200:	strcc	r1, [r0, #20]
   18204:	movcc	r2, #10
   18208:	strbcc	r2, [r3]
   1820c:	bcs	18430 <__assert_fail@plt+0x62a4>
   18210:	ldr	r3, [sp, #16]
   18214:	ldr	r2, [sp, #8]
   18218:	add	r3, r3, #1
   1821c:	str	r3, [sp, #16]
   18220:	cmp	r3, r2
   18224:	bne	18170 <__assert_fail@plt+0x5fe4>
   18228:	add	sp, sp, #28
   1822c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18230:	mov	r0, #0
   18234:	str	ip, [sp, #4]
   18238:	bl	160fc <__assert_fail@plt+0x3f70>
   1823c:	ldr	r5, [pc, #608]	; 184a4 <__assert_fail@plt+0x6318>
   18240:	add	r5, pc, r5
   18244:	ldr	r2, [r5, #56]	; 0x38
   18248:	ldr	r9, [r5, #540]	; 0x21c
   1824c:	ldr	r4, [r2]
   18250:	add	r3, r0, r0, lsl #1
   18254:	mov	r8, r0
   18258:	mov	r0, r4
   1825c:	lsl	r3, r3, #2
   18260:	sub	r3, r3, #12
   18264:	add	r9, r9, r3
   18268:	bl	15fa8 <__assert_fail@plt+0x3e1c>
   1826c:	mov	r1, #0
   18270:	ldr	r3, [r9, #8]
   18274:	ldr	r7, [r3]
   18278:	mov	r6, r0
   1827c:	mov	r0, r4
   18280:	bl	17d48 <__assert_fail@plt+0x5bbc>
   18284:	ldr	r3, [r5, #8]
   18288:	ldr	ip, [sp, #4]
   1828c:	cmp	r3, #1
   18290:	bls	17f38 <__assert_fail@plt+0x5dac>
   18294:	ldr	r2, [pc, #500]	; 18490 <__assert_fail@plt+0x6304>
   18298:	mov	r4, #0
   1829c:	mov	sl, #1
   182a0:	ldr	r2, [ip, r2]
   182a4:	str	r2, [sp, #20]
   182a8:	b	18310 <__assert_fail@plt+0x6184>
   182ac:	ldr	r3, [sp, #20]
   182b0:	mov	r4, fp
   182b4:	ldr	r0, [r3]
   182b8:	ldr	r2, [r0, #20]
   182bc:	ldr	ip, [r0, #24]
   182c0:	add	r1, r2, #1
   182c4:	cmp	r2, ip
   182c8:	strcc	r1, [r0, #20]
   182cc:	movcc	r3, #10
   182d0:	strbcc	r3, [r2]
   182d4:	bcs	1847c <__assert_fail@plt+0x62f0>
   182d8:	ldr	r2, [r5, #56]	; 0x38
   182dc:	mov	r1, r4
   182e0:	ldr	r6, [r2, sl, lsl #2]
   182e4:	add	sl, sl, #1
   182e8:	mov	r0, r6
   182ec:	bl	17d48 <__assert_fail@plt+0x5bbc>
   182f0:	mov	r0, r6
   182f4:	bl	15fa8 <__assert_fail@plt+0x3e1c>
   182f8:	ldr	r1, [r5, #8]
   182fc:	ldr	r2, [r9, #8]
   18300:	cmp	sl, r1
   18304:	ldr	r7, [r2, fp, lsl #2]
   18308:	mov	r6, r0
   1830c:	bcs	17f44 <__assert_fail@plt+0x5db8>
   18310:	mov	r0, sl
   18314:	mov	r1, r8
   18318:	bl	236d8 <close_stdout@@Base+0x845c>
   1831c:	subs	fp, r1, #0
   18320:	beq	182ac <__assert_fail@plt+0x6120>
   18324:	add	r0, r6, r4
   18328:	add	r4, r4, r7
   1832c:	mov	r1, r4
   18330:	bl	152a8 <__assert_fail@plt+0x311c>
   18334:	b	182d8 <__assert_fail@plt+0x614c>
   18338:	ldr	r8, [pc, #360]	; 184a8 <__assert_fail@plt+0x631c>
   1833c:	add	r8, pc, r8
   18340:	ldr	r3, [r8, #8]
   18344:	cmp	r3, #0
   18348:	beq	17f38 <__assert_fail@plt+0x5dac>
   1834c:	ldr	r3, [r8, #56]	; 0x38
   18350:	mov	r4, #0
   18354:	mov	r6, r4
   18358:	mov	r9, #44	; 0x2c
   1835c:	ldr	r7, [r3]
   18360:	str	ip, [sp, #4]
   18364:	mov	r0, r7
   18368:	bl	15fa8 <__assert_fail@plt+0x3e1c>
   1836c:	ldr	r3, [pc, #284]	; 18490 <__assert_fail@plt+0x6304>
   18370:	ldr	ip, [sp, #4]
   18374:	ldr	r3, [ip, r3]
   18378:	str	r3, [sp, #20]
   1837c:	mov	r5, r0
   18380:	mov	r1, r6
   18384:	mov	r0, r7
   18388:	bl	17d48 <__assert_fail@plt+0x5bbc>
   1838c:	ldr	r3, [r8, #8]
   18390:	add	r4, r4, #1
   18394:	mov	r6, r5
   18398:	cmp	r4, r3
   1839c:	bcs	17f44 <__assert_fail@plt+0x5db8>
   183a0:	ldr	r3, [r8, #56]	; 0x38
   183a4:	ldr	r7, [r3, r4, lsl #2]
   183a8:	mov	r0, r7
   183ac:	bl	15fa8 <__assert_fail@plt+0x3e1c>
   183b0:	cmp	r4, #0
   183b4:	addeq	r5, r0, r5
   183b8:	beq	18380 <__assert_fail@plt+0x61f4>
   183bc:	add	r6, r5, #2
   183c0:	ldr	r3, [r8, #544]	; 0x220
   183c4:	add	r5, r0, r6
   183c8:	ldr	r2, [sp, #20]
   183cc:	cmp	r5, r3
   183d0:	movcs	r5, r0
   183d4:	ldr	r0, [r2]
   183d8:	movcc	sl, #32
   183dc:	movcs	sl, #10
   183e0:	movcs	r6, #0
   183e4:	ldr	r3, [r0, #20]
   183e8:	ldr	r2, [r0, #24]
   183ec:	cmp	r3, r2
   183f0:	addcc	r2, r3, #1
   183f4:	strcc	r2, [r0, #20]
   183f8:	strbcc	r9, [r3]
   183fc:	bcs	18470 <__assert_fail@plt+0x62e4>
   18400:	ldr	r3, [sp, #20]
   18404:	ldr	r0, [r3]
   18408:	ldr	r3, [r0, #20]
   1840c:	ldr	r2, [r0, #24]
   18410:	cmp	r3, r2
   18414:	addcc	r2, r3, #1
   18418:	strcc	r2, [r0, #20]
   1841c:	strbcc	sl, [r3]
   18420:	bcc	18380 <__assert_fail@plt+0x61f4>
   18424:	mov	r1, sl
   18428:	bl	1206c <__overflow@plt>
   1842c:	b	18380 <__assert_fail@plt+0x61f4>
   18430:	mov	r1, #10
   18434:	bl	1206c <__overflow@plt>
   18438:	b	18210 <__assert_fail@plt+0x6084>
   1843c:	mov	r1, #10
   18440:	bl	1206c <__overflow@plt>
   18444:	b	180d8 <__assert_fail@plt+0x5f4c>
   18448:	mov	r1, #10
   1844c:	bl	1206c <__overflow@plt>
   18450:	b	18054 <__assert_fail@plt+0x5ec8>
   18454:	mov	r1, #10
   18458:	bl	1206c <__overflow@plt>
   1845c:	b	17fd0 <__assert_fail@plt+0x5e44>
   18460:	mov	r1, #10
   18464:	add	sp, sp, #28
   18468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1846c:	b	1206c <__overflow@plt>
   18470:	mov	r1, #44	; 0x2c
   18474:	bl	1206c <__overflow@plt>
   18478:	b	18400 <__assert_fail@plt+0x6274>
   1847c:	mov	r1, #10
   18480:	bl	1206c <__overflow@plt>
   18484:	b	182d8 <__assert_fail@plt+0x614c>
   18488:	andeq	r1, r2, r8, ror #8
   1848c:	andeq	r1, r2, r8, ror #1
   18490:	andeq	r0, r0, r0, lsl r2
   18494:	strdeq	r1, [r2], -r0
   18498:	andeq	r1, r2, r0, ror r3
   1849c:	andeq	r1, r2, ip, ror #5
   184a0:	andeq	r1, r2, r8, ror #4
   184a4:	andeq	r1, r2, r8, lsr #2
   184a8:	andeq	r1, r2, ip, lsr #32
   184ac:	ldr	r3, [r0, #80]	; 0x50
   184b0:	ldr	r2, [r1, #80]	; 0x50
   184b4:	ldr	ip, [r1, #84]	; 0x54
   184b8:	cmp	r2, r3
   184bc:	ldr	r3, [r0, #84]	; 0x54
   184c0:	blt	184dc <__assert_fail@plt+0x6350>
   184c4:	bgt	184e4 <__assert_fail@plt+0x6358>
   184c8:	subs	r3, ip, r3
   184cc:	bne	184ec <__assert_fail@plt+0x6360>
   184d0:	ldr	r0, [r0]
   184d4:	ldr	r1, [r1]
   184d8:	b	150ac <__assert_fail@plt+0x2f20>
   184dc:	mvn	r0, #0
   184e0:	bx	lr
   184e4:	mov	r0, #1
   184e8:	bx	lr
   184ec:	mov	r0, r3
   184f0:	bx	lr
   184f4:	mov	r3, r0
   184f8:	ldr	r2, [r1, #80]	; 0x50
   184fc:	ldr	r0, [r0, #80]	; 0x50
   18500:	ldr	ip, [r3, #84]	; 0x54
   18504:	cmp	r0, r2
   18508:	ldr	r2, [r1, #84]	; 0x54
   1850c:	blt	18528 <__assert_fail@plt+0x639c>
   18510:	bgt	18530 <__assert_fail@plt+0x63a4>
   18514:	subs	r2, ip, r2
   18518:	bne	18538 <__assert_fail@plt+0x63ac>
   1851c:	ldr	r0, [r1]
   18520:	ldr	r1, [r3]
   18524:	b	150ac <__assert_fail@plt+0x2f20>
   18528:	mvn	r0, #0
   1852c:	bx	lr
   18530:	mov	r0, #1
   18534:	bx	lr
   18538:	mov	r0, r2
   1853c:	bx	lr
   18540:	ldr	r3, [r0, #96]	; 0x60
   18544:	ldr	r2, [r1, #96]	; 0x60
   18548:	ldr	ip, [r1, #100]	; 0x64
   1854c:	cmp	r2, r3
   18550:	ldr	r3, [r0, #100]	; 0x64
   18554:	blt	18570 <__assert_fail@plt+0x63e4>
   18558:	bgt	18578 <__assert_fail@plt+0x63ec>
   1855c:	subs	r3, ip, r3
   18560:	bne	18580 <__assert_fail@plt+0x63f4>
   18564:	ldr	r0, [r0]
   18568:	ldr	r1, [r1]
   1856c:	b	150ac <__assert_fail@plt+0x2f20>
   18570:	mvn	r0, #0
   18574:	bx	lr
   18578:	mov	r0, #1
   1857c:	bx	lr
   18580:	mov	r0, r3
   18584:	bx	lr
   18588:	mov	r3, r0
   1858c:	ldr	r2, [r1, #96]	; 0x60
   18590:	ldr	r0, [r0, #96]	; 0x60
   18594:	ldr	ip, [r3, #100]	; 0x64
   18598:	cmp	r0, r2
   1859c:	ldr	r2, [r1, #100]	; 0x64
   185a0:	blt	185bc <__assert_fail@plt+0x6430>
   185a4:	bgt	185c4 <__assert_fail@plt+0x6438>
   185a8:	subs	r2, ip, r2
   185ac:	bne	185cc <__assert_fail@plt+0x6440>
   185b0:	ldr	r0, [r1]
   185b4:	ldr	r1, [r3]
   185b8:	b	150ac <__assert_fail@plt+0x2f20>
   185bc:	mvn	r0, #0
   185c0:	bx	lr
   185c4:	mov	r0, #1
   185c8:	bx	lr
   185cc:	mov	r0, r2
   185d0:	bx	lr
   185d4:	ldr	r3, [r0, #88]	; 0x58
   185d8:	ldr	r2, [r1, #88]	; 0x58
   185dc:	ldr	ip, [r1, #92]	; 0x5c
   185e0:	cmp	r2, r3
   185e4:	ldr	r3, [r0, #92]	; 0x5c
   185e8:	blt	18604 <__assert_fail@plt+0x6478>
   185ec:	bgt	1860c <__assert_fail@plt+0x6480>
   185f0:	subs	r3, ip, r3
   185f4:	bne	18614 <__assert_fail@plt+0x6488>
   185f8:	ldr	r0, [r0]
   185fc:	ldr	r1, [r1]
   18600:	b	150ac <__assert_fail@plt+0x2f20>
   18604:	mvn	r0, #0
   18608:	bx	lr
   1860c:	mov	r0, #1
   18610:	bx	lr
   18614:	mov	r0, r3
   18618:	bx	lr
   1861c:	mov	r3, r0
   18620:	ldr	r2, [r1, #88]	; 0x58
   18624:	ldr	r0, [r0, #88]	; 0x58
   18628:	ldr	ip, [r3, #92]	; 0x5c
   1862c:	cmp	r0, r2
   18630:	ldr	r2, [r1, #92]	; 0x5c
   18634:	blt	18650 <__assert_fail@plt+0x64c4>
   18638:	bgt	18658 <__assert_fail@plt+0x64cc>
   1863c:	subs	r2, ip, r2
   18640:	bne	18660 <__assert_fail@plt+0x64d4>
   18644:	ldr	r0, [r1]
   18648:	ldr	r1, [r3]
   1864c:	b	150ac <__assert_fail@plt+0x2f20>
   18650:	mvn	r0, #0
   18654:	bx	lr
   18658:	mov	r0, #1
   1865c:	bx	lr
   18660:	mov	r0, r2
   18664:	bx	lr
   18668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1866c:	add	fp, sp, #32
   18670:	ldr	ip, [pc, #3284]	; 1934c <__assert_fail@plt+0x71c0>
   18674:	sub	sp, sp, #828	; 0x33c
   18678:	str	r0, [fp, #-824]	; 0xfffffcc8
   1867c:	ldr	r0, [pc, #3276]	; 19350 <__assert_fail@plt+0x71c4>
   18680:	add	ip, pc, ip
   18684:	ldr	r6, [pc, #3272]	; 19354 <__assert_fail@plt+0x71c8>
   18688:	mov	r5, r1
   1868c:	mov	r7, r2
   18690:	mov	r8, r3
   18694:	ldr	r0, [ip, r0]
   18698:	add	r6, pc, r6
   1869c:	mov	r3, ip
   186a0:	ldr	r1, [r6, #8]
   186a4:	ldr	r2, [r6, #2688]	; 0xa80
   186a8:	ldr	r3, [r0]
   186ac:	cmp	r1, r2
   186b0:	str	r0, [fp, #-828]	; 0xfffffcc4
   186b4:	str	r3, [fp, #-40]	; 0xffffffd8
   186b8:	beq	18b48 <__assert_fail@plt+0x69bc>
   186bc:	ldr	r3, [r6, #68]	; 0x44
   186c0:	add	ip, r1, r1, lsl #4
   186c4:	mov	r2, #136	; 0x88
   186c8:	mov	r1, #0
   186cc:	add	r4, r3, ip, lsl #3
   186d0:	mov	r0, r4
   186d4:	bl	11ff4 <memset@plt>
   186d8:	cmp	r7, #0
   186dc:	str	r5, [r4, #112]	; 0x70
   186e0:	beq	189c4 <__assert_fail@plt+0x6838>
   186e4:	ldr	r3, [pc, #3180]	; 19358 <__assert_fail@plt+0x71cc>
   186e8:	add	r3, pc, r3
   186ec:	ldr	sl, [r3, #2692]	; 0xa84
   186f0:	ldr	r6, [fp, #-824]	; 0xfffffcc8
   186f4:	ldrb	r2, [r6]
   186f8:	cmp	r2, #47	; 0x2f
   186fc:	beq	1870c <__assert_fail@plt+0x6580>
   18700:	ldrb	r9, [r8]
   18704:	cmp	r9, #0
   18708:	bne	18cac <__assert_fail@plt+0x6b20>
   1870c:	ldr	r6, [fp, #-824]	; 0xfffffcc8
   18710:	cmp	sl, #3
   18714:	bcc	18c28 <__assert_fail@plt+0x6a9c>
   18718:	cmp	sl, #4
   1871c:	bls	18abc <__assert_fail@plt+0x6930>
   18720:	cmp	sl, #5
   18724:	bne	18c28 <__assert_fail@plt+0x6a9c>
   18728:	add	r9, r4, #8
   1872c:	mov	r0, #3
   18730:	mov	r1, r6
   18734:	mov	sl, #1
   18738:	mov	r2, r9
   1873c:	bl	12114 <__xstat64@plt>
   18740:	mov	r8, r0
   18744:	cmp	r8, #0
   18748:	bne	18ae8 <__assert_fail@plt+0x695c>
   1874c:	cmp	r5, #5
   18750:	mov	r3, #1
   18754:	strb	r3, [r4, #124]	; 0x7c
   18758:	beq	18b84 <__assert_fail@plt+0x69f8>
   1875c:	ldr	r3, [r4, #24]
   18760:	and	r3, r3, #61440	; 0xf000
   18764:	cmp	r3, #32768	; 0x8000
   18768:	beq	18b84 <__assert_fail@plt+0x69f8>
   1876c:	ldr	r2, [pc, #3048]	; 1935c <__assert_fail@plt+0x71d0>
   18770:	add	r2, pc, r2
   18774:	ldr	r3, [r2, #508]	; 0x1fc
   18778:	cmp	r3, #5
   1877c:	cmpne	r3, #0
   18780:	beq	18790 <__assert_fail@plt+0x6604>
   18784:	ldr	r3, [r2, #2624]	; 0xa40
   18788:	cmp	r3, #0
   1878c:	beq	1884c <__assert_fail@plt+0x66c0>
   18790:	ldr	r0, [pc, #3016]	; 19360 <__assert_fail@plt+0x71d4>
   18794:	movw	r1, #2712	; 0xa98
   18798:	ldrd	r2, [r4, #8]
   1879c:	add	r0, pc, r0
   187a0:	add	r0, r0, r1
   187a4:	ldrd	r0, [r0]
   187a8:	cmp	r3, r1
   187ac:	cmpeq	r2, r0
   187b0:	beq	19334 <__assert_fail@plt+0x71a8>
   187b4:	cmp	sl, #0
   187b8:	mov	r0, r6
   187bc:	add	r1, r4, #120	; 0x78
   187c0:	beq	18c30 <__assert_fail@plt+0x6aa4>
   187c4:	bl	22e28 <close_stdout@@Base+0x7bac>
   187c8:	cmp	r0, #0
   187cc:	blt	18c3c <__assert_fail@plt+0x6ab0>
   187d0:	ldr	r0, [pc, #2956]	; 19364 <__assert_fail@plt+0x71d8>
   187d4:	ldr	r1, [r4, #120]	; 0x78
   187d8:	add	r0, pc, r0
   187dc:	bl	11c88 <strcmp@plt>
   187e0:	adds	r5, r0, #0
   187e4:	movne	r5, #1
   187e8:	ldr	r2, [pc, #2936]	; 19368 <__assert_fail@plt+0x71dc>
   187ec:	add	r2, pc, r2
   187f0:	ldr	r3, [r2, #508]	; 0x1fc
   187f4:	cmp	r3, #0
   187f8:	cmpne	r3, #5
   187fc:	movne	r1, #0
   18800:	moveq	r1, #1
   18804:	beq	19194 <__assert_fail@plt+0x7008>
   18808:	orrs	r2, r1, r5
   1880c:	moveq	r1, r2
   18810:	beq	1882c <__assert_fail@plt+0x66a0>
   18814:	eor	r1, r1, #1
   18818:	and	r5, r5, r1
   1881c:	cmp	r5, #0
   18820:	movne	r2, r5
   18824:	moveq	r1, #2
   18828:	movne	r1, #1
   1882c:	ldr	r3, [pc, #2872]	; 1936c <__assert_fail@plt+0x71e0>
   18830:	cmp	r8, #0
   18834:	str	r1, [r4, #128]	; 0x80
   18838:	add	r3, pc, r3
   1883c:	ldrb	r1, [r3, #12]
   18840:	orr	r2, r2, r1
   18844:	strb	r2, [r3, #12]
   18848:	bne	18f0c <__assert_fail@plt+0x6d80>
   1884c:	ldr	r3, [r4, #24]
   18850:	and	r3, r3, #61440	; 0xf000
   18854:	cmp	r3, #40960	; 0xa000
   18858:	beq	18e94 <__assert_fail@plt+0x6d08>
   1885c:	cmp	r3, #16384	; 0x4000
   18860:	beq	18ec8 <__assert_fail@plt+0x6d3c>
   18864:	ldr	r3, [pc, #2820]	; 19370 <__assert_fail@plt+0x71e4>
   18868:	mov	r2, #5
   1886c:	str	r2, [r4, #112]	; 0x70
   18870:	add	r3, pc, r3
   18874:	ldr	r6, [r3, #508]	; 0x1fc
   18878:	cmp	r6, #0
   1887c:	ldr	r8, [r4, #72]	; 0x48
   18880:	ldr	r5, [r4, #76]	; 0x4c
   18884:	beq	1889c <__assert_fail@plt+0x6710>
   18888:	ldr	r3, [pc, #2788]	; 19374 <__assert_fail@plt+0x71e8>
   1888c:	add	r3, pc, r3
   18890:	ldrb	r3, [r3, #512]	; 0x200
   18894:	cmp	r3, #0
   18898:	beq	188f0 <__assert_fail@plt+0x6764>
   1889c:	ldr	r9, [pc, #2772]	; 19378 <__assert_fail@plt+0x71ec>
   188a0:	mov	lr, #520	; 0x208
   188a4:	mov	r2, #512	; 0x200
   188a8:	mov	r3, #0
   188ac:	add	r9, pc, r9
   188b0:	strd	r2, [sp]
   188b4:	mov	r1, r5
   188b8:	sub	r2, fp, #692	; 0x2b4
   188bc:	ldrd	r6, [r9, lr]
   188c0:	mov	r0, r8
   188c4:	ldr	r3, [r9, #516]	; 0x204
   188c8:	strd	r6, [sp, #8]
   188cc:	bl	1cd00 <close_stdout@@Base+0x1a84>
   188d0:	mov	r1, #0
   188d4:	bl	1e460 <close_stdout@@Base+0x31e4>
   188d8:	ldr	r3, [r9, #20]
   188dc:	cmp	r0, r3
   188e0:	ldr	r3, [pc, #2708]	; 1937c <__assert_fail@plt+0x71f0>
   188e4:	strgt	r0, [r9, #20]
   188e8:	add	r3, pc, r3
   188ec:	ldr	r6, [r3, #508]	; 0x1fc
   188f0:	cmp	r6, #0
   188f4:	cmpne	r6, #5
   188f8:	bne	1893c <__assert_fail@plt+0x67b0>
   188fc:	ldr	r3, [pc, #2684]	; 19380 <__assert_fail@plt+0x71f4>
   18900:	add	r3, pc, r3
   18904:	ldrb	r3, [r3, #2]
   18908:	cmp	r3, #0
   1890c:	bne	19130 <__assert_fail@plt+0x6fa4>
   18910:	ldr	r3, [pc, #2668]	; 19384 <__assert_fail@plt+0x71f8>
   18914:	add	r3, pc, r3
   18918:	ldrb	r3, [r3, #3]
   1891c:	cmp	r3, #0
   18920:	bne	190d8 <__assert_fail@plt+0x6f4c>
   18924:	ldr	r7, [pc, #2652]	; 19388 <__assert_fail@plt+0x71fc>
   18928:	add	r7, pc, r7
   1892c:	ldrb	r3, [r7, #2672]	; 0xa70
   18930:	cmp	r3, #0
   18934:	bne	190bc <__assert_fail@plt+0x6f30>
   18938:	ldr	r6, [r7, #508]	; 0x1fc
   1893c:	ldr	r7, [pc, #2632]	; 1938c <__assert_fail@plt+0x7200>
   18940:	add	r7, pc, r7
   18944:	ldr	r3, [r7, #2624]	; 0xa40
   18948:	cmp	r3, #0
   1894c:	beq	18964 <__assert_fail@plt+0x67d8>
   18950:	ldr	r0, [r4, #120]	; 0x78
   18954:	bl	11fac <strlen@plt>
   18958:	ldr	r3, [r7, #40]	; 0x28
   1895c:	cmp	r0, r3
   18960:	strgt	r0, [r7, #40]	; 0x28
   18964:	cmp	r6, #0
   18968:	beq	18da8 <__assert_fail@plt+0x6c1c>
   1896c:	ldr	r3, [pc, #2588]	; 19390 <__assert_fail@plt+0x7204>
   18970:	add	r3, pc, r3
   18974:	ldrb	r3, [r3, #504]	; 0x1f8
   18978:	cmp	r3, #0
   1897c:	bne	18c84 <__assert_fail@plt+0x6af8>
   18980:	ldr	r0, [fp, #-824]	; 0xfffffcc8
   18984:	bl	21fc4 <close_stdout@@Base+0x6d48>
   18988:	ldr	r3, [pc, #2564]	; 19394 <__assert_fail@plt+0x7208>
   1898c:	mov	r1, r5
   18990:	add	r3, pc, r3
   18994:	ldr	r2, [r3, #8]
   18998:	add	r2, r2, #1
   1899c:	str	r2, [r3, #8]
   189a0:	str	r0, [r4]
   189a4:	ldr	ip, [fp, #-828]	; 0xfffffcc4
   189a8:	mov	r0, r8
   189ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   189b0:	ldr	r3, [ip]
   189b4:	cmp	r2, r3
   189b8:	bne	19344 <__assert_fail@plt+0x71b8>
   189bc:	sub	sp, fp, #32
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c4:	ldr	r3, [pc, #2508]	; 19398 <__assert_fail@plt+0x720c>
   189c8:	add	r3, pc, r3
   189cc:	ldrb	r2, [r3, #2696]	; 0xa88
   189d0:	cmp	r2, #0
   189d4:	bne	186e4 <__assert_fail@plt+0x6558>
   189d8:	cmp	r5, #3
   189dc:	beq	18d68 <__assert_fail@plt+0x6bdc>
   189e0:	ldr	r3, [pc, #2484]	; 1939c <__assert_fail@plt+0x7210>
   189e4:	add	r3, pc, r3
   189e8:	ldrb	r2, [r3, #504]	; 0x1f8
   189ec:	cmp	r2, #0
   189f0:	beq	18d50 <__assert_fail@plt+0x6bc4>
   189f4:	rsbs	r1, r5, #1
   189f8:	movcc	r1, #0
   189fc:	cmp	r5, #0
   18a00:	cmpne	r5, #6
   18a04:	bne	18a34 <__assert_fail@plt+0x68a8>
   18a08:	ldr	r3, [pc, #2448]	; 193a0 <__assert_fail@plt+0x7214>
   18a0c:	add	r3, pc, r3
   18a10:	ldr	sl, [r3, #2692]	; 0xa84
   18a14:	cmp	sl, #5
   18a18:	beq	186f0 <__assert_fail@plt+0x6564>
   18a1c:	ldrb	r0, [r3, #2614]	; 0xa36
   18a20:	cmp	r0, #0
   18a24:	bne	186f0 <__assert_fail@plt+0x6564>
   18a28:	ldrb	r3, [r3, #2698]	; 0xa8a
   18a2c:	cmp	r3, #0
   18a30:	bne	186f0 <__assert_fail@plt+0x6564>
   18a34:	cmp	r2, #0
   18a38:	bne	186e4 <__assert_fail@plt+0x6558>
   18a3c:	ldr	r3, [pc, #2400]	; 193a4 <__assert_fail@plt+0x7218>
   18a40:	add	r3, pc, r3
   18a44:	ldrb	r2, [r3, #2697]	; 0xa89
   18a48:	cmp	r2, #0
   18a4c:	beq	18d5c <__assert_fail@plt+0x6bd0>
   18a50:	cmp	r1, #0
   18a54:	bne	186e4 <__assert_fail@plt+0x6558>
   18a58:	cmp	r5, #5
   18a5c:	bne	18d5c <__assert_fail@plt+0x6bd0>
   18a60:	ldr	r2, [r3, #500]	; 0x1f4
   18a64:	cmp	r2, #3
   18a68:	beq	186e4 <__assert_fail@plt+0x6558>
   18a6c:	ldrb	r3, [r3, #2613]	; 0xa35
   18a70:	cmp	r3, #0
   18a74:	beq	18d5c <__assert_fail@plt+0x6bd0>
   18a78:	mov	r0, #14
   18a7c:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18a80:	cmp	r0, #0
   18a84:	bne	186e4 <__assert_fail@plt+0x6558>
   18a88:	mov	r0, #16
   18a8c:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18a90:	cmp	r0, #0
   18a94:	bne	186e4 <__assert_fail@plt+0x6558>
   18a98:	mov	r0, #17
   18a9c:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18aa0:	cmp	r0, #0
   18aa4:	bne	186e4 <__assert_fail@plt+0x6558>
   18aa8:	mov	r0, #21
   18aac:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18ab0:	cmp	r0, #0
   18ab4:	bne	186e4 <__assert_fail@plt+0x6558>
   18ab8:	b	18d5c <__assert_fail@plt+0x6bd0>
   18abc:	cmp	r7, #0
   18ac0:	add	r9, r4, #8
   18ac4:	bne	19150 <__assert_fail@plt+0x6fc4>
   18ac8:	mov	r0, #3
   18acc:	mov	r1, r6
   18ad0:	mov	r2, r9
   18ad4:	mov	sl, #0
   18ad8:	bl	12150 <__lxstat64@plt>
   18adc:	mov	r8, r0
   18ae0:	cmp	r8, #0
   18ae4:	beq	1874c <__assert_fail@plt+0x65c0>
   18ae8:	ldr	r1, [pc, #2232]	; 193a8 <__assert_fail@plt+0x721c>
   18aec:	mov	r2, #5
   18af0:	mov	r0, #0
   18af4:	add	r1, pc, r1
   18af8:	bl	11d6c <dcgettext@plt>
   18afc:	mov	r2, r6
   18b00:	mov	r1, r0
   18b04:	mov	r0, r7
   18b08:	bl	15a1c <__assert_fail@plt+0x3890>
   18b0c:	cmp	r7, #0
   18b10:	movne	r8, #0
   18b14:	movne	r1, r8
   18b18:	bne	189a4 <__assert_fail@plt+0x6818>
   18b1c:	ldr	r0, [fp, #-824]	; 0xfffffcc8
   18b20:	mov	r8, #0
   18b24:	bl	21fc4 <close_stdout@@Base+0x6d48>
   18b28:	ldr	r3, [pc, #2172]	; 193ac <__assert_fail@plt+0x7220>
   18b2c:	mov	r1, r8
   18b30:	add	r3, pc, r3
   18b34:	ldr	r2, [r3, #8]
   18b38:	add	r2, r2, #1
   18b3c:	str	r2, [r3, #8]
   18b40:	str	r0, [r4]
   18b44:	b	189a4 <__assert_fail@plt+0x6818>
   18b48:	movw	r3, #61680	; 0xf0f0
   18b4c:	movt	r3, #240	; 0xf0
   18b50:	cmp	r1, r3
   18b54:	ldr	r0, [r6, #68]	; 0x44
   18b58:	bhi	19348 <__assert_fail@plt+0x71bc>
   18b5c:	add	r1, r1, r1, lsl #4
   18b60:	lsl	r1, r1, #4
   18b64:	bl	21e24 <close_stdout@@Base+0x6ba8>
   18b68:	ldr	r2, [r6, #2688]	; 0xa80
   18b6c:	ldr	r1, [r6, #8]
   18b70:	lsl	r2, r2, #1
   18b74:	str	r2, [r6, #2688]	; 0xa80
   18b78:	mov	r3, r0
   18b7c:	str	r0, [r6, #68]	; 0x44
   18b80:	b	186c0 <__assert_fail@plt+0x6534>
   18b84:	ldr	r5, [pc, #2084]	; 193b0 <__assert_fail@plt+0x7224>
   18b88:	add	r5, pc, r5
   18b8c:	ldrb	r2, [r5, #2613]	; 0xa35
   18b90:	cmp	r2, #0
   18b94:	beq	1876c <__assert_fail@plt+0x65e0>
   18b98:	mov	r0, #21
   18b9c:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18ba0:	subs	ip, r0, #0
   18ba4:	beq	1876c <__assert_fail@plt+0x65e0>
   18ba8:	mov	r2, #2704	; 0xa90
   18bac:	ldrd	r0, [r4, #8]
   18bb0:	ldrd	r2, [r2, r5]
   18bb4:	cmp	r1, r3
   18bb8:	cmpeq	r0, r2
   18bbc:	beq	192a0 <__assert_fail@plt+0x7114>
   18bc0:	mov	r0, r6
   18bc4:	str	ip, [fp, #-844]	; 0xfffffcb4
   18bc8:	bl	120a8 <cap_get_file@plt>
   18bcc:	subs	r3, r0, #0
   18bd0:	beq	192b4 <__assert_fail@plt+0x7128>
   18bd4:	mov	r1, #0
   18bd8:	str	r3, [fp, #-840]	; 0xfffffcb8
   18bdc:	bl	11c64 <cap_to_text@plt>
   18be0:	ldr	r3, [fp, #-840]	; 0xfffffcb8
   18be4:	mov	r2, r0
   18be8:	mov	r0, r3
   18bec:	str	r2, [fp, #-840]	; 0xfffffcb8
   18bf0:	bl	120e4 <cap_free@plt>
   18bf4:	ldr	r2, [fp, #-840]	; 0xfffffcb8
   18bf8:	cmp	r2, #0
   18bfc:	beq	192b4 <__assert_fail@plt+0x7128>
   18c00:	ldrb	r3, [r2]
   18c04:	mov	r0, r2
   18c08:	str	r3, [fp, #-840]	; 0xfffffcb8
   18c0c:	bl	120e4 <cap_free@plt>
   18c10:	ldr	r3, [fp, #-840]	; 0xfffffcb8
   18c14:	ldr	ip, [fp, #-844]	; 0xfffffcb4
   18c18:	cmp	r3, #0
   18c1c:	beq	192b4 <__assert_fail@plt+0x7128>
   18c20:	strb	ip, [r4, #132]	; 0x84
   18c24:	b	1876c <__assert_fail@plt+0x65e0>
   18c28:	add	r9, r4, #8
   18c2c:	b	18ac8 <__assert_fail@plt+0x693c>
   18c30:	bl	22e40 <close_stdout@@Base+0x7bc4>
   18c34:	cmp	r0, #0
   18c38:	bge	187d0 <__assert_fail@plt+0x6644>
   18c3c:	bl	11fd0 <__errno_location@plt>
   18c40:	ldr	r3, [r0]
   18c44:	cmp	r3, #38	; 0x26
   18c48:	cmpne	r3, #22
   18c4c:	beq	1904c <__assert_fail@plt+0x6ec0>
   18c50:	cmp	r3, #95	; 0x5f
   18c54:	beq	1904c <__assert_fail@plt+0x6ec0>
   18c58:	ldr	r3, [pc, #1876]	; 193b4 <__assert_fail@plt+0x7228>
   18c5c:	add	r3, pc, r3
   18c60:	str	r3, [r4, #120]	; 0x78
   18c64:	ldr	r3, [r0]
   18c68:	cmp	r3, #95	; 0x5f
   18c6c:	cmpne	r3, #61	; 0x3d
   18c70:	movne	r3, #0
   18c74:	moveq	r3, #1
   18c78:	bne	18f08 <__assert_fail@plt+0x6d7c>
   18c7c:	mov	r5, #0
   18c80:	b	187e8 <__assert_fail@plt+0x665c>
   18c84:	sub	r2, fp, #692	; 0x2b4
   18c88:	ldrd	r0, [r4, #104]	; 0x68
   18c8c:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   18c90:	bl	11fac <strlen@plt>
   18c94:	ldr	r3, [pc, #1820]	; 193b8 <__assert_fail@plt+0x722c>
   18c98:	add	r3, pc, r3
   18c9c:	ldr	r2, [r3, #16]
   18ca0:	cmp	r0, r2
   18ca4:	strgt	r0, [r3, #16]
   18ca8:	b	18980 <__assert_fail@plt+0x67f4>
   18cac:	mov	r0, r6
   18cb0:	str	r2, [fp, #-840]	; 0xfffffcb8
   18cb4:	bl	11fac <strlen@plt>
   18cb8:	mov	r6, r0
   18cbc:	mov	r0, r8
   18cc0:	bl	11fac <strlen@plt>
   18cc4:	cmp	r9, #46	; 0x2e
   18cc8:	ldr	r2, [fp, #-840]	; 0xfffffcb8
   18ccc:	add	r0, r6, r0
   18cd0:	add	r6, r0, #16
   18cd4:	bic	r6, r6, #7
   18cd8:	sub	sp, sp, r6
   18cdc:	add	r6, sp, #16
   18ce0:	beq	1921c <__assert_fail@plt+0x7090>
   18ce4:	add	r2, r8, #1
   18ce8:	mov	r3, r6
   18cec:	strb	r9, [r3], #1
   18cf0:	mov	r1, r2
   18cf4:	ldrb	r9, [r2], #1
   18cf8:	cmp	r9, #0
   18cfc:	bne	18cec <__assert_fail@plt+0x6b60>
   18d00:	cmp	r8, r1
   18d04:	mov	r2, r3
   18d08:	bcs	18d20 <__assert_fail@plt+0x6b94>
   18d0c:	ldrb	r1, [r1, #-1]
   18d10:	cmp	r1, #47	; 0x2f
   18d14:	addne	r3, r3, #1
   18d18:	movne	r1, #47	; 0x2f
   18d1c:	strbne	r1, [r2]
   18d20:	ldr	ip, [fp, #-824]	; 0xfffffcc8
   18d24:	ldrb	r2, [ip]
   18d28:	cmp	r2, #0
   18d2c:	beq	18d44 <__assert_fail@plt+0x6bb8>
   18d30:	ldr	r1, [fp, #-824]	; 0xfffffcc8
   18d34:	strb	r2, [r3], #1
   18d38:	ldrb	r2, [r1, #1]!
   18d3c:	cmp	r2, #0
   18d40:	bne	18d34 <__assert_fail@plt+0x6ba8>
   18d44:	mov	r2, #0
   18d48:	strb	r2, [r3]
   18d4c:	b	18710 <__assert_fail@plt+0x6584>
   18d50:	ldrb	r3, [r3, #2697]	; 0xa89
   18d54:	cmp	r3, #0
   18d58:	bne	189f4 <__assert_fail@plt+0x6868>
   18d5c:	mov	r8, #0
   18d60:	mov	r5, r8
   18d64:	b	18980 <__assert_fail@plt+0x67f4>
   18d68:	ldrb	r3, [r3, #2613]	; 0xa35
   18d6c:	cmp	r3, #0
   18d70:	beq	189e0 <__assert_fail@plt+0x6854>
   18d74:	mov	r0, #19
   18d78:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18d7c:	cmp	r0, #0
   18d80:	bne	186e4 <__assert_fail@plt+0x6558>
   18d84:	mov	r0, #18
   18d88:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18d8c:	cmp	r0, #0
   18d90:	bne	186e4 <__assert_fail@plt+0x6558>
   18d94:	mov	r0, #20
   18d98:	bl	14d58 <__assert_fail@plt+0x2bcc>
   18d9c:	cmp	r0, #0
   18da0:	bne	186e4 <__assert_fail@plt+0x6558>
   18da4:	b	189e0 <__assert_fail@plt+0x6854>
   18da8:	sub	r2, fp, #716	; 0x2cc
   18dac:	mov	r1, r6
   18db0:	ldr	r0, [r4, #28]
   18db4:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   18db8:	bl	11fac <strlen@plt>
   18dbc:	ldr	r3, [pc, #1528]	; 193bc <__assert_fail@plt+0x7230>
   18dc0:	add	r3, pc, r3
   18dc4:	ldr	r2, [r3, #24]
   18dc8:	cmp	r0, r2
   18dcc:	strgt	r0, [r3, #24]
   18dd0:	ldr	r3, [r4, #24]
   18dd4:	and	r3, r3, #45056	; 0xb000
   18dd8:	cmp	r3, #8192	; 0x2000
   18ddc:	bne	19064 <__assert_fail@plt+0x6ed8>
   18de0:	ldr	r0, [r4, #44]	; 0x2c
   18de4:	sub	r6, fp, #692	; 0x2b4
   18de8:	ldr	r3, [r4, #40]	; 0x28
   18dec:	mov	r1, #0
   18df0:	bic	r0, r0, #4080	; 0xff0
   18df4:	mov	r2, r6
   18df8:	ubfx	r3, r3, #8, #12
   18dfc:	bic	r0, r0, #15
   18e00:	orr	r0, r0, r3
   18e04:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   18e08:	bl	11fac <strlen@plt>
   18e0c:	ldr	r3, [pc, #1452]	; 193c0 <__assert_fail@plt+0x7234>
   18e10:	ldr	lr, [r4, #44]	; 0x2c
   18e14:	mov	r1, #0
   18e18:	add	r3, pc, r3
   18e1c:	ldr	r2, [r3, #44]	; 0x2c
   18e20:	cmp	r0, r2
   18e24:	strgt	r0, [r3, #44]	; 0x2c
   18e28:	ldr	r0, [r4, #40]	; 0x28
   18e2c:	mov	r2, r6
   18e30:	lsr	r3, r0, #12
   18e34:	uxtb	r0, r0
   18e38:	orr	r3, r3, lr, lsl #20
   18e3c:	bic	r3, r3, #255	; 0xff
   18e40:	orr	r0, r3, r0
   18e44:	bl	1ddb0 <close_stdout@@Base+0x2b34>
   18e48:	bl	11fac <strlen@plt>
   18e4c:	ldr	r2, [pc, #1392]	; 193c4 <__assert_fail@plt+0x7238>
   18e50:	add	r2, pc, r2
   18e54:	ldr	r3, [r2, #48]	; 0x30
   18e58:	cmp	r0, r3
   18e5c:	strgt	r0, [r2, #48]	; 0x30
   18e60:	movle	r0, r3
   18e64:	ldr	r3, [pc, #1372]	; 193c8 <__assert_fail@plt+0x723c>
   18e68:	add	r3, pc, r3
   18e6c:	ldr	r1, [r3, #44]	; 0x2c
   18e70:	ldr	r2, [r3, #52]	; 0x34
   18e74:	add	r1, r1, #2
   18e78:	add	r0, r1, r0
   18e7c:	cmp	r0, r2
   18e80:	strgt	r0, [r3, #52]	; 0x34
   18e84:	ldr	r3, [pc, #1344]	; 193cc <__assert_fail@plt+0x7240>
   18e88:	add	r3, pc, r3
   18e8c:	ldrb	r3, [r3, #504]	; 0x1f8
   18e90:	b	18978 <__assert_fail@plt+0x67ec>
   18e94:	ldr	r2, [pc, #1332]	; 193d0 <__assert_fail@plt+0x7244>
   18e98:	add	r2, pc, r2
   18e9c:	ldr	r3, [r2, #508]	; 0x1fc
   18ea0:	cmp	r3, #5
   18ea4:	cmpne	r3, #0
   18ea8:	beq	18f38 <__assert_fail@plt+0x6dac>
   18eac:	ldrb	r2, [r2, #2698]	; 0xa8a
   18eb0:	cmp	r2, #0
   18eb4:	bne	18f38 <__assert_fail@plt+0x6dac>
   18eb8:	mov	r6, r3
   18ebc:	mov	r3, #6
   18ec0:	str	r3, [r4, #112]	; 0x70
   18ec4:	b	18878 <__assert_fail@plt+0x66ec>
   18ec8:	cmp	r7, #0
   18ecc:	beq	18ef0 <__assert_fail@plt+0x6d64>
   18ed0:	ldr	r3, [pc, #1276]	; 193d4 <__assert_fail@plt+0x7248>
   18ed4:	add	r3, pc, r3
   18ed8:	ldrb	r2, [r3, #2728]	; 0xaa8
   18edc:	cmp	r2, #0
   18ee0:	ldreq	r6, [r3, #508]	; 0x1fc
   18ee4:	moveq	r3, #9
   18ee8:	streq	r3, [r4, #112]	; 0x70
   18eec:	beq	18878 <__assert_fail@plt+0x66ec>
   18ef0:	ldr	r3, [pc, #1248]	; 193d8 <__assert_fail@plt+0x724c>
   18ef4:	mov	r2, #3
   18ef8:	str	r2, [r4, #112]	; 0x70
   18efc:	add	r3, pc, r3
   18f00:	ldr	r6, [r3, #508]	; 0x1fc
   18f04:	b	18878 <__assert_fail@plt+0x66ec>
   18f08:	str	r3, [r4, #128]	; 0x80
   18f0c:	bl	11fd0 <__errno_location@plt>
   18f10:	ldr	r5, [r0]
   18f14:	mov	r0, r6
   18f18:	bl	1fe58 <close_stdout@@Base+0x4bdc>
   18f1c:	ldr	r2, [pc, #1208]	; 193dc <__assert_fail@plt+0x7250>
   18f20:	mov	r1, r5
   18f24:	add	r2, pc, r2
   18f28:	mov	r3, r0
   18f2c:	mov	r0, #0
   18f30:	bl	11e98 <error@plt>
   18f34:	b	1884c <__assert_fail@plt+0x66c0>
   18f38:	mov	r0, r6
   18f3c:	ldr	r1, [r4, #56]	; 0x38
   18f40:	bl	1ae08 <__assert_fail@plt+0x8c7c>
   18f44:	cmp	r0, #0
   18f48:	mov	r5, r0
   18f4c:	str	r0, [r4, #4]
   18f50:	beq	192f4 <__assert_fail@plt+0x7168>
   18f54:	ldrb	r3, [r5]
   18f58:	cmp	r3, #47	; 0x2f
   18f5c:	beq	19324 <__assert_fail@plt+0x7198>
   18f60:	mov	r0, r6
   18f64:	bl	1b394 <close_stdout@@Base+0x118>
   18f68:	subs	r8, r0, #0
   18f6c:	mov	r0, r5
   18f70:	beq	1926c <__assert_fail@plt+0x70e0>
   18f74:	bl	11fac <strlen@plt>
   18f78:	add	r3, r8, #2
   18f7c:	add	r0, r3, r0
   18f80:	bl	21dcc <close_stdout@@Base+0x6b50>
   18f84:	add	r3, r6, r8
   18f88:	mov	r1, r6
   18f8c:	ldrb	r3, [r3, #-1]
   18f90:	cmp	r3, #47	; 0x2f
   18f94:	addne	r8, r8, #1
   18f98:	mov	r2, r8
   18f9c:	mov	r9, r0
   18fa0:	bl	12018 <stpncpy@plt>
   18fa4:	mov	r1, r5
   18fa8:	mov	r5, r9
   18fac:	bl	11e5c <strcpy@plt>
   18fb0:	cmp	r5, #0
   18fb4:	beq	19024 <__assert_fail@plt+0x6e98>
   18fb8:	ldr	r3, [pc, #1056]	; 193e0 <__assert_fail@plt+0x7254>
   18fbc:	add	r3, pc, r3
   18fc0:	ldr	r2, [r3, #500]	; 0x1f4
   18fc4:	cmp	r2, #1
   18fc8:	bls	1925c <__assert_fail@plt+0x70d0>
   18fcc:	mov	r0, #3
   18fd0:	mov	r1, r5
   18fd4:	sub	r2, fp, #820	; 0x334
   18fd8:	bl	12114 <__xstat64@plt>
   18fdc:	cmp	r0, #0
   18fe0:	bne	19024 <__assert_fail@plt+0x6e98>
   18fe4:	cmp	r7, #0
   18fe8:	mov	r3, #1
   18fec:	strb	r3, [r4, #125]	; 0x7d
   18ff0:	beq	19298 <__assert_fail@plt+0x710c>
   18ff4:	ldr	r3, [pc, #1000]	; 193e4 <__assert_fail@plt+0x7258>
   18ff8:	add	r3, pc, r3
   18ffc:	ldr	r3, [r3, #508]	; 0x1fc
   19000:	cmp	r3, #0
   19004:	beq	19298 <__assert_fail@plt+0x710c>
   19008:	cmp	r3, #5
   1900c:	beq	19298 <__assert_fail@plt+0x710c>
   19010:	ldr	r3, [fp, #-804]	; 0xfffffcdc
   19014:	and	r2, r3, #61440	; 0xf000
   19018:	cmp	r2, #16384	; 0x4000
   1901c:	beq	19024 <__assert_fail@plt+0x6e98>
   19020:	str	r3, [r4, #116]	; 0x74
   19024:	mov	r0, r5
   19028:	bl	11ce8 <free@plt>
   1902c:	ldr	r3, [r4, #24]
   19030:	and	r3, r3, #61440	; 0xf000
   19034:	cmp	r3, #40960	; 0xa000
   19038:	bne	1885c <__assert_fail@plt+0x66d0>
   1903c:	ldr	r3, [pc, #932]	; 193e8 <__assert_fail@plt+0x725c>
   19040:	add	r3, pc, r3
   19044:	ldr	r6, [r3, #508]	; 0x1fc
   19048:	b	18ebc <__assert_fail@plt+0x6d30>
   1904c:	ldr	lr, [pc, #920]	; 193ec <__assert_fail@plt+0x7260>
   19050:	movw	r1, #2712	; 0xa98
   19054:	ldrd	r2, [r4, #8]
   19058:	add	lr, pc, lr
   1905c:	strd	r2, [lr, r1]
   19060:	b	18c58 <__assert_fail@plt+0x6acc>
   19064:	ldr	lr, [pc, #900]	; 193f0 <__assert_fail@plt+0x7264>
   19068:	sub	ip, fp, #1024	; 0x400
   1906c:	ldr	r9, [pc, #896]	; 193f4 <__assert_fail@plt+0x7268>
   19070:	mov	r6, #1
   19074:	add	lr, pc, lr
   19078:	mov	r7, #0
   1907c:	add	r9, pc, r9
   19080:	sub	r2, fp, #692	; 0x2b4
   19084:	ldrd	r0, [lr, #8]
   19088:	ldr	r3, [r9, #2676]	; 0xa74
   1908c:	strd	r0, [ip, #188]	; 0xbc
   19090:	ldrd	r0, [r4, #56]	; 0x38
   19094:	strd	r6, [sp]
   19098:	ldrd	r6, [ip, #188]	; 0xbc
   1909c:	strd	r6, [sp, #8]
   190a0:	bl	1cd00 <close_stdout@@Base+0x1a84>
   190a4:	mov	r1, #0
   190a8:	bl	1e460 <close_stdout@@Base+0x31e4>
   190ac:	ldr	r3, [r9, #52]	; 0x34
   190b0:	cmp	r0, r3
   190b4:	strgt	r0, [r9, #52]	; 0x34
   190b8:	b	18e84 <__assert_fail@plt+0x6cf8>
   190bc:	ldr	r0, [r4, #32]
   190c0:	bl	16414 <__assert_fail@plt+0x4288>
   190c4:	ldr	r3, [r7, #36]	; 0x24
   190c8:	ldr	r6, [r7, #508]	; 0x1fc
   190cc:	cmp	r0, r3
   190d0:	strgt	r0, [r7, #36]	; 0x24
   190d4:	b	1893c <__assert_fail@plt+0x67b0>
   190d8:	ldr	r3, [pc, #792]	; 193f8 <__assert_fail@plt+0x726c>
   190dc:	ldr	r7, [r4, #36]	; 0x24
   190e0:	add	r3, pc, r3
   190e4:	ldrb	r6, [r3, #488]	; 0x1e8
   190e8:	cmp	r6, #0
   190ec:	beq	19278 <__assert_fail@plt+0x70ec>
   190f0:	sub	r6, fp, #692	; 0x2b4
   190f4:	ldr	r3, [pc, #768]	; 193fc <__assert_fail@plt+0x7270>
   190f8:	str	r7, [sp]
   190fc:	mov	r1, #1
   19100:	mov	r2, #11
   19104:	mov	r0, r6
   19108:	add	r3, pc, r3
   1910c:	bl	11fdc <__sprintf_chk@plt>
   19110:	mov	r0, r6
   19114:	bl	11fac <strlen@plt>
   19118:	ldr	r3, [pc, #736]	; 19400 <__assert_fail@plt+0x7274>
   1911c:	add	r3, pc, r3
   19120:	ldr	r2, [r3, #32]
   19124:	cmp	r2, r0
   19128:	strlt	r0, [r3, #32]
   1912c:	b	18924 <__assert_fail@plt+0x6798>
   19130:	ldr	r0, [r4, #32]
   19134:	bl	16414 <__assert_fail@plt+0x4288>
   19138:	ldr	r3, [pc, #708]	; 19404 <__assert_fail@plt+0x7278>
   1913c:	add	r3, pc, r3
   19140:	ldr	r2, [r3, #28]
   19144:	cmp	r0, r2
   19148:	strgt	r0, [r3, #28]
   1914c:	b	18910 <__assert_fail@plt+0x6784>
   19150:	mov	r0, #3
   19154:	mov	r1, r6
   19158:	mov	r2, r9
   1915c:	bl	12114 <__xstat64@plt>
   19160:	cmp	sl, #3
   19164:	mov	r8, r0
   19168:	beq	1918c <__assert_fail@plt+0x7000>
   1916c:	cmp	r0, #0
   19170:	blt	19244 <__assert_fail@plt+0x70b8>
   19174:	ldr	r3, [r4, #24]
   19178:	and	r3, r3, #61440	; 0xf000
   1917c:	subs	r3, r3, #16384	; 0x4000
   19180:	movne	r3, #1
   19184:	cmp	r3, #0
   19188:	bne	18ac8 <__assert_fail@plt+0x693c>
   1918c:	mov	sl, #1
   19190:	b	18744 <__assert_fail@plt+0x65b8>
   19194:	mov	r3, #2720	; 0xaa0
   19198:	add	r2, r2, r3
   1919c:	ldrd	r0, [r4, #8]
   191a0:	ldrd	r2, [r2]
   191a4:	cmp	r1, r3
   191a8:	cmpeq	r0, r2
   191ac:	beq	19230 <__assert_fail@plt+0x70a4>
   191b0:	bl	11fd0 <__errno_location@plt>
   191b4:	mov	r1, r9
   191b8:	mov	r3, #0
   191bc:	mov	sl, r0
   191c0:	mov	r0, r6
   191c4:	str	r3, [sl]
   191c8:	bl	1e7fc <close_stdout@@Base+0x3580>
   191cc:	cmp	r0, #0
   191d0:	movgt	r1, #1
   191d4:	bgt	18808 <__assert_fail@plt+0x667c>
   191d8:	ldr	r3, [sl]
   191dc:	cmp	r3, #38	; 0x26
   191e0:	cmpne	r3, #22
   191e4:	movne	r1, #0
   191e8:	moveq	r1, #1
   191ec:	beq	191fc <__assert_fail@plt+0x7070>
   191f0:	cmp	r3, #95	; 0x5f
   191f4:	lsrne	r8, r0, #31
   191f8:	bne	18808 <__assert_fail@plt+0x667c>
   191fc:	ldr	r9, [pc, #516]	; 19408 <__assert_fail@plt+0x727c>
   19200:	mov	lr, #2720	; 0xaa0
   19204:	ldrd	r2, [r4, #8]
   19208:	lsr	r8, r0, #31
   1920c:	add	r9, pc, r9
   19210:	mov	r1, #0
   19214:	strd	r2, [r9, lr]
   19218:	b	18808 <__assert_fail@plt+0x667c>
   1921c:	ldrb	r3, [r8, #1]
   19220:	cmp	r3, #0
   19224:	moveq	r3, r6
   19228:	beq	18d28 <__assert_fail@plt+0x6b9c>
   1922c:	b	18ce4 <__assert_fail@plt+0x6b58>
   19230:	bl	11fd0 <__errno_location@plt>
   19234:	mov	r3, #95	; 0x5f
   19238:	mov	r1, #0
   1923c:	str	r3, [r0]
   19240:	b	18808 <__assert_fail@plt+0x667c>
   19244:	bl	11fd0 <__errno_location@plt>
   19248:	ldr	r3, [r0]
   1924c:	subs	r2, r3, #2
   19250:	rsbs	r3, r2, #0
   19254:	adcs	r3, r3, r2
   19258:	b	19184 <__assert_fail@plt+0x6ff8>
   1925c:	ldrb	r3, [r3, #2698]	; 0xa8a
   19260:	cmp	r3, #0
   19264:	beq	19024 <__assert_fail@plt+0x6e98>
   19268:	b	18fcc <__assert_fail@plt+0x6e40>
   1926c:	bl	21fc4 <close_stdout@@Base+0x6d48>
   19270:	mov	r5, r0
   19274:	b	18fb0 <__assert_fail@plt+0x6e24>
   19278:	mov	r0, r7
   1927c:	bl	1db08 <close_stdout@@Base+0x288c>
   19280:	cmp	r0, #0
   19284:	beq	190f0 <__assert_fail@plt+0x6f64>
   19288:	mov	r1, r6
   1928c:	bl	1e460 <close_stdout@@Base+0x31e4>
   19290:	bic	r0, r0, r0, asr #31
   19294:	b	19118 <__assert_fail@plt+0x6f8c>
   19298:	ldr	r3, [fp, #-804]	; 0xfffffcdc
   1929c:	b	19020 <__assert_fail@plt+0x6e94>
   192a0:	bl	11fd0 <__errno_location@plt>
   192a4:	mov	r3, #95	; 0x5f
   192a8:	mov	ip, #0
   192ac:	str	r3, [r0]
   192b0:	b	18c20 <__assert_fail@plt+0x6a94>
   192b4:	bl	11fd0 <__errno_location@plt>
   192b8:	ldr	r3, [r0]
   192bc:	cmp	r3, #38	; 0x26
   192c0:	cmpne	r3, #22
   192c4:	movne	ip, #0
   192c8:	moveq	ip, #1
   192cc:	beq	192d8 <__assert_fail@plt+0x714c>
   192d0:	cmp	r3, #95	; 0x5f
   192d4:	bne	18c20 <__assert_fail@plt+0x6a94>
   192d8:	ldr	r0, [pc, #300]	; 1940c <__assert_fail@plt+0x7280>
   192dc:	mov	r1, #2704	; 0xa90
   192e0:	ldrd	r2, [r4, #8]
   192e4:	mov	ip, #0
   192e8:	add	r0, pc, r0
   192ec:	strd	r2, [r0, r1]
   192f0:	b	18c20 <__assert_fail@plt+0x6a94>
   192f4:	ldr	r1, [pc, #276]	; 19410 <__assert_fail@plt+0x7284>
   192f8:	mov	r2, #5
   192fc:	add	r1, pc, r1
   19300:	bl	11d6c <dcgettext@plt>
   19304:	mov	r2, r6
   19308:	mov	r1, r0
   1930c:	mov	r0, r7
   19310:	bl	15a1c <__assert_fail@plt+0x3890>
   19314:	ldr	r5, [r4, #4]
   19318:	cmp	r5, #0
   1931c:	bne	18f54 <__assert_fail@plt+0x6dc8>
   19320:	b	19024 <__assert_fail@plt+0x6e98>
   19324:	mov	r0, r5
   19328:	bl	21fc4 <close_stdout@@Base+0x6d48>
   1932c:	mov	r5, r0
   19330:	b	18fb0 <__assert_fail@plt+0x6e24>
   19334:	bl	11fd0 <__errno_location@plt>
   19338:	mov	r3, #95	; 0x5f
   1933c:	str	r3, [r0]
   19340:	b	18c58 <__assert_fail@plt+0x6acc>
   19344:	bl	11d78 <__stack_chk_fail@plt>
   19348:	bl	21fe0 <close_stdout@@Base+0x6d64>
   1934c:	andeq	r0, r2, r8, ror r9
   19350:	andeq	r0, r0, r0, ror #3
   19354:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   19358:	andeq	r0, r2, r0, lsl #25
   1935c:	strdeq	r0, [r2], -r8
   19360:	andeq	r0, r2, ip, asr #23
   19364:	andeq	ip, r0, ip, asr r0
   19368:	andeq	r0, r2, ip, ror fp
   1936c:	andeq	r0, r2, r0, lsr fp
   19370:	strdeq	r0, [r2], -r8
   19374:	ldrdeq	r0, [r2], -ip
   19378:			; <UNDEFINED> instruction: 0x00020abc
   1937c:	andeq	r0, r2, r0, lsl #21
   19380:	andeq	r0, r2, r0, lsr r9
   19384:	andeq	r0, r2, ip, lsl r9
   19388:	andeq	r0, r2, r0, asr #20
   1938c:	andeq	r0, r2, r8, lsr #20
   19390:	strdeq	r0, [r2], -r8
   19394:	ldrdeq	r0, [r2], -r8
   19398:	andeq	r0, r2, r0, lsr #19
   1939c:	andeq	r0, r2, r4, lsl #19
   193a0:	andeq	r0, r2, ip, asr r9
   193a4:	andeq	r0, r2, r8, lsr #18
   193a8:	andeq	fp, r0, ip, lsl #26
   193ac:	andeq	r0, r2, r8, lsr r8
   193b0:	andeq	r0, r2, r0, ror #15
   193b4:	ldrdeq	r0, [r2], -r4
   193b8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   193bc:	andeq	r0, r2, r8, lsr #11
   193c0:	andeq	r0, r2, r0, asr r5
   193c4:	andeq	r0, r2, r8, lsl r5
   193c8:	andeq	r0, r2, r0, lsl #10
   193cc:	andeq	r0, r2, r0, ror #9
   193d0:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   193d4:	muleq	r2, r4, r4
   193d8:	andeq	r0, r2, ip, ror #8
   193dc:	andeq	sp, r0, r8, ror r9
   193e0:	andeq	r0, r2, ip, lsr #7
   193e4:	andeq	r0, r2, r0, ror r3
   193e8:	andeq	r0, r2, r8, lsr #6
   193ec:	andeq	r0, r2, r0, lsl r3
   193f0:			; <UNDEFINED> instruction: 0x000201bc
   193f4:	andeq	r0, r2, ip, ror #5
   193f8:	andeq	r0, r2, r8, lsl #5
   193fc:	strdeq	fp, [r0], -r8
   19400:	andeq	r0, r2, ip, asr #4
   19404:	andeq	r0, r2, ip, lsr #4
   19408:	andeq	r0, r2, ip, asr r1
   1940c:	andeq	r0, r2, r0, lsl #1
   19410:	andeq	fp, r0, r8, lsl r5
   19414:	push	{r4, r5}
   19418:	ldr	r2, [r1, #112]	; 0x70
   1941c:	ldr	r3, [r0, #112]	; 0x70
   19420:	cmp	r2, #3
   19424:	cmpne	r2, #9
   19428:	movne	r2, #0
   1942c:	moveq	r2, #1
   19430:	cmp	r3, #3
   19434:	cmpne	r3, #9
   19438:	eor	ip, r2, #1
   1943c:	movne	r3, #0
   19440:	moveq	r3, #1
   19444:	tst	r3, ip
   19448:	bne	19494 <__assert_fail@plt+0x7308>
   1944c:	eor	r3, r3, #1
   19450:	tst	r2, r3
   19454:	beq	19464 <__assert_fail@plt+0x72d8>
   19458:	mov	r0, #1
   1945c:	pop	{r4, r5}
   19460:	bx	lr
   19464:	ldrd	r2, [r1, #56]	; 0x38
   19468:	ldrd	r4, [r0, #56]	; 0x38
   1946c:	cmp	r2, r4
   19470:	sbcs	ip, r3, r5
   19474:	blt	19494 <__assert_fail@plt+0x7308>
   19478:	cmp	r4, r2
   1947c:	sbcs	ip, r5, r3
   19480:	blt	19458 <__assert_fail@plt+0x72cc>
   19484:	ldr	r0, [r0]
   19488:	ldr	r1, [r1]
   1948c:	pop	{r4, r5}
   19490:	b	150ac <__assert_fail@plt+0x2f20>
   19494:	mvn	r0, #0
   19498:	pop	{r4, r5}
   1949c:	bx	lr
   194a0:	push	{r4, r5}
   194a4:	mov	ip, r0
   194a8:	ldr	r2, [r1, #112]	; 0x70
   194ac:	ldr	r3, [r0, #112]	; 0x70
   194b0:	cmp	r2, #3
   194b4:	cmpne	r2, #9
   194b8:	movne	r2, #0
   194bc:	moveq	r2, #1
   194c0:	cmp	r3, #3
   194c4:	cmpne	r3, #9
   194c8:	eor	r0, r2, #1
   194cc:	movne	r3, #0
   194d0:	moveq	r3, #1
   194d4:	tst	r3, r0
   194d8:	bne	19524 <__assert_fail@plt+0x7398>
   194dc:	eor	r3, r3, #1
   194e0:	tst	r2, r3
   194e4:	beq	194f4 <__assert_fail@plt+0x7368>
   194e8:	mov	r0, #1
   194ec:	pop	{r4, r5}
   194f0:	bx	lr
   194f4:	ldrd	r2, [ip, #56]	; 0x38
   194f8:	ldrd	r4, [r1, #56]	; 0x38
   194fc:	cmp	r2, r4
   19500:	sbcs	r0, r3, r5
   19504:	blt	19524 <__assert_fail@plt+0x7398>
   19508:	cmp	r4, r2
   1950c:	sbcs	r0, r5, r3
   19510:	blt	194e8 <__assert_fail@plt+0x735c>
   19514:	ldr	r0, [r1]
   19518:	pop	{r4, r5}
   1951c:	ldr	r1, [ip]
   19520:	b	150ac <__assert_fail@plt+0x2f20>
   19524:	mvn	r0, #0
   19528:	pop	{r4, r5}
   1952c:	bx	lr
   19530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19534:	sub	sp, sp, #828	; 0x33c
   19538:	ldr	r4, [pc, #2000]	; 19d10 <__assert_fail@plt+0x7b84>
   1953c:	mov	r9, r1
   19540:	ldr	r3, [pc, #1996]	; 19d14 <__assert_fail@plt+0x7b88>
   19544:	add	r4, pc, r4
   19548:	str	r2, [sp, #44]	; 0x2c
   1954c:	str	r4, [sp, #52]	; 0x34
   19550:	str	r0, [sp, #40]	; 0x28
   19554:	ldr	r3, [r4, r3]
   19558:	str	r3, [sp, #60]	; 0x3c
   1955c:	ldr	r3, [r3]
   19560:	str	r3, [sp, #820]	; 0x334
   19564:	bl	11fd0 <__errno_location@plt>
   19568:	mov	r3, #0
   1956c:	mov	r6, r0
   19570:	ldr	r0, [sp, #40]	; 0x28
   19574:	str	r3, [r6]
   19578:	bl	11ea4 <opendir@plt>
   1957c:	subs	r7, r0, #0
   19580:	beq	19cb8 <__assert_fail@plt+0x7b2c>
   19584:	ldr	r3, [pc, #1932]	; 19d18 <__assert_fail@plt+0x7b8c>
   19588:	add	r3, pc, r3
   1958c:	ldr	r3, [r3, #472]	; 0x1d8
   19590:	cmp	r3, #0
   19594:	beq	196cc <__assert_fail@plt+0x7540>
   19598:	bl	120f0 <dirfd@plt>
   1959c:	subs	r1, r0, #0
   195a0:	mov	r0, #3
   195a4:	blt	19b14 <__assert_fail@plt+0x7988>
   195a8:	add	r2, sp, #64	; 0x40
   195ac:	bl	11df0 <__fxstat64@plt>
   195b0:	lsr	fp, r0, #31
   195b4:	cmp	fp, #0
   195b8:	beq	19604 <__assert_fail@plt+0x7478>
   195bc:	ldr	r1, [pc, #1880]	; 19d1c <__assert_fail@plt+0x7b90>
   195c0:	mov	r2, #5
   195c4:	mov	r0, #0
   195c8:	add	r1, pc, r1
   195cc:	bl	11d6c <dcgettext@plt>
   195d0:	ldr	r2, [sp, #40]	; 0x28
   195d4:	mov	r1, r0
   195d8:	ldr	r0, [sp, #44]	; 0x2c
   195dc:	bl	15a1c <__assert_fail@plt+0x3890>
   195e0:	mov	r0, r7
   195e4:	bl	1215c <closedir@plt>
   195e8:	ldr	r5, [sp, #60]	; 0x3c
   195ec:	ldr	r2, [sp, #820]	; 0x334
   195f0:	ldr	r3, [r5]
   195f4:	cmp	r2, r3
   195f8:	bne	19d08 <__assert_fail@plt+0x7b7c>
   195fc:	add	sp, sp, #828	; 0x33c
   19600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19604:	movw	r8, #64776	; 0xfd08
   19608:	add	r3, sp, #824	; 0x338
   1960c:	movt	r8, #65535	; 0xffff
   19610:	movw	r5, #64872	; 0xfd68
   19614:	movt	r5, #65535	; 0xffff
   19618:	mov	r0, #16
   1961c:	ldrd	r2, [r3, r8]
   19620:	ldr	sl, [pc, #1784]	; 19d20 <__assert_fail@plt+0x7b94>
   19624:	strd	r2, [sp, #24]
   19628:	add	r3, sp, #824	; 0x338
   1962c:	add	sl, pc, sl
   19630:	ldrd	r2, [r3, r5]
   19634:	strd	r2, [sp, #32]
   19638:	bl	21dcc <close_stdout@@Base+0x6b50>
   1963c:	ldrd	r2, [sp, #24]
   19640:	mov	r4, r0
   19644:	ldr	r0, [sl, #472]	; 0x1d8
   19648:	strd	r2, [r4, #8]
   1964c:	mov	r1, r4
   19650:	ldrd	r2, [sp, #32]
   19654:	strd	r2, [r4]
   19658:	bl	1cb4c <close_stdout@@Base+0x18d0>
   1965c:	cmp	r0, #0
   19660:	beq	19d0c <__assert_fail@plt+0x7b80>
   19664:	cmp	r4, r0
   19668:	bne	19ba4 <__assert_fail@plt+0x7a18>
   1966c:	ldr	r1, [sl, #2744]	; 0xab8
   19670:	add	r4, sp, #824	; 0x338
   19674:	ldr	r0, [sl, #2748]	; 0xabc
   19678:	ldrd	r2, [r4, r8]
   1967c:	add	r4, r4, r5
   19680:	rsb	r0, r1, r0
   19684:	cmp	r0, #15
   19688:	ldrd	r4, [r4]
   1968c:	bgt	196b4 <__assert_fail@plt+0x7528>
   19690:	add	r0, sl, #2720	; 0xaa0
   19694:	mov	r1, #16
   19698:	add	r0, r0, #12
   1969c:	str	r2, [sp, #20]
   196a0:	str	r3, [sp, #16]
   196a4:	bl	11d54 <_obstack_newchunk@plt>
   196a8:	ldr	r1, [sl, #2744]	; 0xab8
   196ac:	ldr	r3, [sp, #16]
   196b0:	ldr	r2, [sp, #20]
   196b4:	ldr	r0, [pc, #1640]	; 19d24 <__assert_fail@plt+0x7b98>
   196b8:	add	ip, r1, #16
   196bc:	add	r0, pc, r0
   196c0:	str	ip, [r0, #2744]	; 0xab8
   196c4:	strd	r2, [r1, #8]
   196c8:	strd	r4, [r1]
   196cc:	ldr	r3, [pc, #1620]	; 19d28 <__assert_fail@plt+0x7b9c>
   196d0:	add	r3, pc, r3
   196d4:	ldrb	r2, [r3, #2776]	; 0xad8
   196d8:	cmp	r2, #0
   196dc:	bne	197a8 <__assert_fail@plt+0x761c>
   196e0:	ldrb	r3, [r3, #2777]	; 0xad9
   196e4:	cmp	r3, #0
   196e8:	bne	197a8 <__assert_fail@plt+0x761c>
   196ec:	ldr	r4, [pc, #1592]	; 19d2c <__assert_fail@plt+0x7ba0>
   196f0:	bl	14e60 <__assert_fail@plt+0x2cd4>
   196f4:	ldr	sl, [pc, #1588]	; 19d30 <__assert_fail@plt+0x7ba4>
   196f8:	mov	r5, #0
   196fc:	ldr	fp, [pc, #1584]	; 19d34 <__assert_fail@plt+0x7ba8>
   19700:	add	r4, pc, r4
   19704:	ldr	ip, [pc, #1580]	; 19d38 <__assert_fail@plt+0x7bac>
   19708:	add	sl, pc, sl
   1970c:	str	r4, [sp, #48]	; 0x30
   19710:	add	fp, pc, fp
   19714:	mov	r4, #0
   19718:	strd	r4, [sp, #24]
   1971c:	ldr	r5, [pc, #1560]	; 19d3c <__assert_fail@plt+0x7bb0>
   19720:	mov	r9, #0
   19724:	add	ip, pc, ip
   19728:	str	ip, [sp, #56]	; 0x38
   1972c:	add	r5, pc, r5
   19730:	str	r5, [sp, #32]
   19734:	str	r9, [r6]
   19738:	mov	r0, r7
   1973c:	bl	120d8 <readdir64@plt>
   19740:	subs	r5, r0, #0
   19744:	beq	198e8 <__assert_fail@plt+0x775c>
   19748:	ldr	r3, [sl, #2828]	; 0xb0c
   1974c:	add	r4, r5, #19
   19750:	cmp	r3, #2
   19754:	beq	198ac <__assert_fail@plt+0x7720>
   19758:	ldrb	r2, [r5, #19]
   1975c:	cmp	r2, #46	; 0x2e
   19760:	beq	19888 <__assert_fail@plt+0x76fc>
   19764:	cmp	r3, #0
   19768:	bne	198ac <__assert_fail@plt+0x7720>
   1976c:	ldr	r8, [sl, #2836]	; 0xb14
   19770:	cmp	r8, #0
   19774:	bne	19788 <__assert_fail@plt+0x75fc>
   19778:	b	198ac <__assert_fail@plt+0x7720>
   1977c:	ldr	r8, [r8, #4]
   19780:	cmp	r8, #0
   19784:	beq	198ac <__assert_fail@plt+0x7720>
   19788:	ldr	r0, [r8]
   1978c:	mov	r1, r4
   19790:	mov	r2, #4
   19794:	bl	11eb0 <fnmatch@plt>
   19798:	cmp	r0, #0
   1979c:	bne	1977c <__assert_fail@plt+0x75f0>
   197a0:	bl	16970 <__assert_fail@plt+0x47e4>
   197a4:	b	19734 <__assert_fail@plt+0x75a8>
   197a8:	ldr	r3, [pc, #1424]	; 19d40 <__assert_fail@plt+0x7bb4>
   197ac:	add	r3, pc, r3
   197b0:	ldrb	r3, [r3, #20]
   197b4:	cmp	r3, #0
   197b8:	ldr	r3, [pc, #1412]	; 19d44 <__assert_fail@plt+0x7bb8>
   197bc:	beq	19b28 <__assert_fail@plt+0x799c>
   197c0:	ldr	r5, [sp, #52]	; 0x34
   197c4:	ldr	r4, [r5, r3]
   197c8:	ldr	r5, [pc, #1400]	; 19d48 <__assert_fail@plt+0x7bbc>
   197cc:	mov	r1, #0
   197d0:	ldr	r2, [pc, #1396]	; 19d4c <__assert_fail@plt+0x7bc0>
   197d4:	add	r5, pc, r5
   197d8:	add	r2, pc, r2
   197dc:	ldrb	r3, [r5, #2620]	; 0xa3c
   197e0:	strb	r1, [r2, #20]
   197e4:	cmp	r3, r1
   197e8:	bne	19c24 <__assert_fail@plt+0x7a98>
   197ec:	ldr	r5, [pc, #1372]	; 19d50 <__assert_fail@plt+0x7bc4>
   197f0:	cmp	r9, #0
   197f4:	ldr	r1, [sp, #40]	; 0x28
   197f8:	mov	r3, #0
   197fc:	add	r5, pc, r5
   19800:	movne	r1, r9
   19804:	ldr	r0, [r4]
   19808:	ldr	r2, [r5, #2824]	; 0xb08
   1980c:	bl	153a8 <__assert_fail@plt+0x321c>
   19810:	ldrb	r2, [r5, #2620]	; 0xa3c
   19814:	ldr	r3, [r5, #484]	; 0x1e4
   19818:	cmp	r2, #0
   1981c:	add	r0, r0, r3
   19820:	str	r0, [r5, #484]	; 0x1e4
   19824:	beq	19858 <__assert_fail@plt+0x76cc>
   19828:	ldr	r2, [r5, #2792]	; 0xae8
   1982c:	ldr	r1, [r5, #2796]	; 0xaec
   19830:	add	r3, r2, #4
   19834:	cmp	r1, r3
   19838:	bcc	19c88 <__assert_fail@plt+0x7afc>
   1983c:	ldr	r3, [pc, #1296]	; 19d54 <__assert_fail@plt+0x7bc8>
   19840:	add	r3, pc, r3
   19844:	ldr	r0, [r3, #484]	; 0x1e4
   19848:	str	r0, [r2]
   1984c:	ldr	r2, [r3, #2792]	; 0xae8
   19850:	add	r2, r2, #4
   19854:	str	r2, [r3, #2792]	; 0xae8
   19858:	ldr	r0, [pc, #1272]	; 19d58 <__assert_fail@plt+0x7bcc>
   1985c:	mov	r2, #2
   19860:	ldr	r3, [r4]
   19864:	mov	r1, #1
   19868:	add	r0, pc, r0
   1986c:	bl	11d3c <fwrite_unlocked@plt>
   19870:	ldr	r3, [pc, #1252]	; 19d5c <__assert_fail@plt+0x7bd0>
   19874:	add	r3, pc, r3
   19878:	ldr	r2, [r3, #484]	; 0x1e4
   1987c:	add	r2, r2, #2
   19880:	str	r2, [r3, #484]	; 0x1e4
   19884:	b	196ec <__assert_fail@plt+0x7560>
   19888:	cmp	r3, #0
   1988c:	beq	197a0 <__assert_fail@plt+0x7614>
   19890:	ldrb	r3, [r5, #20]
   19894:	cmp	r3, #46	; 0x2e
   19898:	movne	r3, #1
   1989c:	moveq	r3, #2
   198a0:	ldrb	r3, [r4, r3]
   198a4:	cmp	r3, #0
   198a8:	beq	197a0 <__assert_fail@plt+0x7614>
   198ac:	ldr	ip, [sp, #32]
   198b0:	ldr	r8, [ip, #2832]	; 0xb10
   198b4:	cmp	r8, #0
   198b8:	bne	198cc <__assert_fail@plt+0x7740>
   198bc:	b	19a94 <__assert_fail@plt+0x7908>
   198c0:	ldr	r8, [r8, #4]
   198c4:	cmp	r8, #0
   198c8:	beq	19a94 <__assert_fail@plt+0x7908>
   198cc:	ldr	r0, [r8]
   198d0:	mov	r1, r4
   198d4:	mov	r2, #4
   198d8:	bl	11eb0 <fnmatch@plt>
   198dc:	cmp	r0, #0
   198e0:	bne	198c0 <__assert_fail@plt+0x7734>
   198e4:	b	197a0 <__assert_fail@plt+0x7614>
   198e8:	ldr	r3, [r6]
   198ec:	cmp	r3, #0
   198f0:	beq	1991c <__assert_fail@plt+0x7790>
   198f4:	ldr	r1, [sp, #48]	; 0x30
   198f8:	mov	r2, #5
   198fc:	bl	11d6c <dcgettext@plt>
   19900:	ldr	r2, [sp, #40]	; 0x28
   19904:	mov	r1, r0
   19908:	ldr	r0, [sp, #44]	; 0x2c
   1990c:	bl	15a1c <__assert_fail@plt+0x3890>
   19910:	ldr	r3, [r6]
   19914:	cmp	r3, #75	; 0x4b
   19918:	beq	197a0 <__assert_fail@plt+0x7614>
   1991c:	mov	r0, r7
   19920:	bl	1215c <closedir@plt>
   19924:	cmp	r0, #0
   19928:	bne	19b7c <__assert_fail@plt+0x79f0>
   1992c:	bl	14ee0 <__assert_fail@plt+0x2d54>
   19930:	ldr	r3, [pc, #1064]	; 19d60 <__assert_fail@plt+0x7bd4>
   19934:	add	r3, pc, r3
   19938:	ldrb	r3, [r3, #2776]	; 0xad8
   1993c:	cmp	r3, #0
   19940:	bne	19b6c <__assert_fail@plt+0x79e0>
   19944:	ldr	r3, [pc, #1048]	; 19d64 <__assert_fail@plt+0x7bd8>
   19948:	add	r3, pc, r3
   1994c:	ldr	r2, [r3, #508]	; 0x1fc
   19950:	cmp	r2, #0
   19954:	beq	19964 <__assert_fail@plt+0x77d8>
   19958:	ldrb	r3, [r3, #512]	; 0x200
   1995c:	cmp	r3, #0
   19960:	beq	19a78 <__assert_fail@plt+0x78ec>
   19964:	ldr	r5, [pc, #1020]	; 19d68 <__assert_fail@plt+0x7bdc>
   19968:	add	r5, pc, r5
   1996c:	ldrb	r3, [r5, #2620]	; 0xa3c
   19970:	cmp	r3, #0
   19974:	ldr	r3, [pc, #968]	; 19d44 <__assert_fail@plt+0x7bb8>
   19978:	bne	19bf4 <__assert_fail@plt+0x7a68>
   1997c:	ldr	r5, [sp, #52]	; 0x34
   19980:	ldr	r4, [r5, r3]
   19984:	ldr	r1, [pc, #992]	; 19d6c <__assert_fail@plt+0x7be0>
   19988:	mov	r2, #5
   1998c:	mov	r0, #0
   19990:	add	r1, pc, r1
   19994:	bl	11d6c <dcgettext@plt>
   19998:	ldr	r1, [r4]
   1999c:	mov	r5, r0
   199a0:	bl	11c4c <fputs_unlocked@plt>
   199a4:	mov	r0, r5
   199a8:	bl	11fac <strlen@plt>
   199ac:	ldr	r3, [r4]
   199b0:	ldr	r1, [pc, #952]	; 19d70 <__assert_fail@plt+0x7be4>
   199b4:	ldr	r2, [r3, #20]
   199b8:	add	r1, pc, r1
   199bc:	ldr	lr, [r3, #24]
   199c0:	ldr	ip, [r1, #484]	; 0x1e4
   199c4:	cmp	r2, lr
   199c8:	add	r0, r0, ip
   199cc:	str	r0, [r1, #484]	; 0x1e4
   199d0:	addcc	r0, r2, #1
   199d4:	movcc	r1, #32
   199d8:	strcc	r0, [r3, #20]
   199dc:	strbcc	r1, [r2]
   199e0:	bcs	19cf8 <__assert_fail@plt+0x7b6c>
   199e4:	ldr	r5, [pc, #904]	; 19d74 <__assert_fail@plt+0x7be8>
   199e8:	mov	ip, #520	; 0x208
   199ec:	mov	r6, #512	; 0x200
   199f0:	mov	r7, #0
   199f4:	add	r5, pc, r5
   199f8:	strd	r6, [sp]
   199fc:	add	r2, sp, #168	; 0xa8
   19a00:	ldrd	r0, [sp, #24]
   19a04:	ldrd	r6, [r5, ip]
   19a08:	ldr	ip, [r5, #484]	; 0x1e4
   19a0c:	ldr	r3, [r5, #516]	; 0x204
   19a10:	add	ip, ip, #1
   19a14:	strd	r6, [sp, #8]
   19a18:	str	ip, [r5, #484]	; 0x1e4
   19a1c:	bl	1cd00 <close_stdout@@Base+0x1a84>
   19a20:	ldr	r1, [r4]
   19a24:	mov	r6, r0
   19a28:	bl	11c4c <fputs_unlocked@plt>
   19a2c:	mov	r0, r6
   19a30:	bl	11fac <strlen@plt>
   19a34:	ldr	r3, [r4]
   19a38:	ldr	r1, [r5, #484]	; 0x1e4
   19a3c:	ldr	r2, [r3, #20]
   19a40:	ldr	ip, [r3, #24]
   19a44:	cmp	r2, ip
   19a48:	add	r0, r0, r1
   19a4c:	movcc	r1, #10
   19a50:	str	r0, [r5, #484]	; 0x1e4
   19a54:	addcc	r0, r2, #1
   19a58:	strcc	r0, [r3, #20]
   19a5c:	strbcc	r1, [r2]
   19a60:	bcs	19ce8 <__assert_fail@plt+0x7b5c>
   19a64:	ldr	r3, [pc, #780]	; 19d78 <__assert_fail@plt+0x7bec>
   19a68:	add	r3, pc, r3
   19a6c:	ldr	r2, [r3, #484]	; 0x1e4
   19a70:	add	r2, r2, #1
   19a74:	str	r2, [r3, #484]	; 0x1e4
   19a78:	ldr	r3, [pc, #764]	; 19d7c <__assert_fail@plt+0x7bf0>
   19a7c:	add	r3, pc, r3
   19a80:	ldr	r3, [r3, #8]
   19a84:	cmp	r3, #0
   19a88:	beq	195e8 <__assert_fail@plt+0x745c>
   19a8c:	bl	17ef8 <__assert_fail@plt+0x5d6c>
   19a90:	b	195e8 <__assert_fail@plt+0x745c>
   19a94:	ldrb	r3, [r5, #18]
   19a98:	sub	r3, r3, #1
   19a9c:	uxtb	r3, r3
   19aa0:	cmp	r3, #13
   19aa4:	movhi	r1, #0
   19aa8:	ldrls	r5, [sp, #56]	; 0x38
   19aac:	addls	r3, r5, r3, lsl #2
   19ab0:	ldrls	r1, [r3, #128]	; 0x80
   19ab4:	mov	r0, r4
   19ab8:	ldr	r3, [sp, #40]	; 0x28
   19abc:	mov	r2, #0
   19ac0:	bl	18668 <__assert_fail@plt+0x64dc>
   19ac4:	ldrd	r4, [sp, #24]
   19ac8:	ldr	r3, [fp, #508]	; 0x1fc
   19acc:	adds	r4, r4, r0
   19ad0:	adc	r5, r5, r1
   19ad4:	cmp	r3, #1
   19ad8:	strd	r4, [sp, #24]
   19adc:	bne	197a0 <__assert_fail@plt+0x7614>
   19ae0:	ldr	r3, [fp, #64]	; 0x40
   19ae4:	cmn	r3, #1
   19ae8:	bne	197a0 <__assert_fail@plt+0x7614>
   19aec:	ldrb	r3, [fp, #512]	; 0x200
   19af0:	cmp	r3, #0
   19af4:	bne	197a0 <__assert_fail@plt+0x7614>
   19af8:	ldrb	r3, [fp, #2776]	; 0xad8
   19afc:	cmp	r3, #0
   19b00:	bne	197a0 <__assert_fail@plt+0x7614>
   19b04:	bl	14ee0 <__assert_fail@plt+0x2d54>
   19b08:	bl	17ef8 <__assert_fail@plt+0x5d6c>
   19b0c:	bl	14e60 <__assert_fail@plt+0x2cd4>
   19b10:	b	197a0 <__assert_fail@plt+0x7614>
   19b14:	ldr	r1, [sp, #40]	; 0x28
   19b18:	add	r2, sp, #64	; 0x40
   19b1c:	bl	12114 <__xstat64@plt>
   19b20:	lsr	fp, r0, #31
   19b24:	b	195b4 <__assert_fail@plt+0x7428>
   19b28:	ldr	ip, [sp, #52]	; 0x34
   19b2c:	ldr	r4, [ip, r3]
   19b30:	ldr	r0, [r4]
   19b34:	ldr	r3, [r0, #20]
   19b38:	ldr	r2, [r0, #24]
   19b3c:	cmp	r3, r2
   19b40:	addcc	r1, r3, #1
   19b44:	strcc	r1, [r0, #20]
   19b48:	movcc	r2, #10
   19b4c:	strbcc	r2, [r3]
   19b50:	bcs	19cdc <__assert_fail@plt+0x7b50>
   19b54:	ldr	r3, [pc, #548]	; 19d80 <__assert_fail@plt+0x7bf4>
   19b58:	add	r3, pc, r3
   19b5c:	ldr	r2, [r3, #484]	; 0x1e4
   19b60:	add	r2, r2, #1
   19b64:	str	r2, [r3, #484]	; 0x1e4
   19b68:	b	197c8 <__assert_fail@plt+0x763c>
   19b6c:	ldr	r0, [sp, #40]	; 0x28
   19b70:	mov	r1, #0
   19b74:	bl	15110 <__assert_fail@plt+0x2f84>
   19b78:	b	19944 <__assert_fail@plt+0x77b8>
   19b7c:	ldr	r1, [pc, #512]	; 19d84 <__assert_fail@plt+0x7bf8>
   19b80:	mov	r2, #5
   19b84:	mov	r0, #0
   19b88:	add	r1, pc, r1
   19b8c:	bl	11d6c <dcgettext@plt>
   19b90:	ldr	r2, [sp, #40]	; 0x28
   19b94:	mov	r1, r0
   19b98:	ldr	r0, [sp, #44]	; 0x2c
   19b9c:	bl	15a1c <__assert_fail@plt+0x3890>
   19ba0:	b	1992c <__assert_fail@plt+0x77a0>
   19ba4:	mov	r0, r4
   19ba8:	bl	11ce8 <free@plt>
   19bac:	ldr	r1, [pc, #468]	; 19d88 <__assert_fail@plt+0x7bfc>
   19bb0:	mov	r2, #5
   19bb4:	mov	r0, fp
   19bb8:	add	r1, pc, r1
   19bbc:	bl	11d6c <dcgettext@plt>
   19bc0:	mov	r4, r0
   19bc4:	ldr	r0, [sp, #40]	; 0x28
   19bc8:	bl	1fe58 <close_stdout@@Base+0x4bdc>
   19bcc:	mov	r1, fp
   19bd0:	mov	r2, r4
   19bd4:	mov	r3, r0
   19bd8:	mov	r0, fp
   19bdc:	bl	11e98 <error@plt>
   19be0:	mov	r0, r7
   19be4:	bl	1215c <closedir@plt>
   19be8:	mov	r3, #2
   19bec:	str	r3, [sl, #496]	; 0x1f0
   19bf0:	b	195e8 <__assert_fail@plt+0x745c>
   19bf4:	ldr	ip, [sp, #52]	; 0x34
   19bf8:	mov	r1, #1
   19bfc:	ldr	r0, [pc, #392]	; 19d8c <__assert_fail@plt+0x7c00>
   19c00:	mov	r2, #2
   19c04:	ldr	r4, [ip, r3]
   19c08:	add	r0, pc, r0
   19c0c:	ldr	r3, [r4]
   19c10:	bl	11d3c <fwrite_unlocked@plt>
   19c14:	ldr	r3, [r5, #484]	; 0x1e4
   19c18:	add	r3, r3, #2
   19c1c:	str	r3, [r5, #484]	; 0x1e4
   19c20:	b	19984 <__assert_fail@plt+0x77f8>
   19c24:	ldr	r0, [pc, #356]	; 19d90 <__assert_fail@plt+0x7c04>
   19c28:	mov	r2, #2
   19c2c:	ldr	r3, [r4]
   19c30:	mov	r1, #1
   19c34:	add	r0, pc, r0
   19c38:	bl	11d3c <fwrite_unlocked@plt>
   19c3c:	ldrb	r2, [r5, #2620]	; 0xa3c
   19c40:	ldr	r3, [r5, #484]	; 0x1e4
   19c44:	cmp	r2, #0
   19c48:	add	r3, r3, #2
   19c4c:	str	r3, [r5, #484]	; 0x1e4
   19c50:	beq	197ec <__assert_fail@plt+0x7660>
   19c54:	ldr	r2, [r5, #2792]	; 0xae8
   19c58:	ldr	r1, [r5, #2796]	; 0xaec
   19c5c:	add	r3, r2, #4
   19c60:	cmp	r1, r3
   19c64:	bcc	19ca0 <__assert_fail@plt+0x7b14>
   19c68:	ldr	r3, [pc, #292]	; 19d94 <__assert_fail@plt+0x7c08>
   19c6c:	add	r3, pc, r3
   19c70:	ldr	r0, [r3, #484]	; 0x1e4
   19c74:	str	r0, [r2]
   19c78:	ldr	r2, [r3, #2792]	; 0xae8
   19c7c:	add	r2, r2, #4
   19c80:	str	r2, [r3, #2792]	; 0xae8
   19c84:	b	197ec <__assert_fail@plt+0x7660>
   19c88:	add	r0, r5, #2768	; 0xad0
   19c8c:	mov	r1, #4
   19c90:	add	r0, r0, #12
   19c94:	bl	11d54 <_obstack_newchunk@plt>
   19c98:	ldr	r2, [r5, #2792]	; 0xae8
   19c9c:	b	1983c <__assert_fail@plt+0x76b0>
   19ca0:	add	r0, r5, #2768	; 0xad0
   19ca4:	mov	r1, #4
   19ca8:	add	r0, r0, #12
   19cac:	bl	11d54 <_obstack_newchunk@plt>
   19cb0:	ldr	r2, [r5, #2792]	; 0xae8
   19cb4:	b	19c68 <__assert_fail@plt+0x7adc>
   19cb8:	ldr	r1, [pc, #216]	; 19d98 <__assert_fail@plt+0x7c0c>
   19cbc:	mov	r2, #5
   19cc0:	add	r1, pc, r1
   19cc4:	bl	11d6c <dcgettext@plt>
   19cc8:	ldr	r2, [sp, #40]	; 0x28
   19ccc:	mov	r1, r0
   19cd0:	ldr	r0, [sp, #44]	; 0x2c
   19cd4:	bl	15a1c <__assert_fail@plt+0x3890>
   19cd8:	b	195e8 <__assert_fail@plt+0x745c>
   19cdc:	mov	r1, #10
   19ce0:	bl	1206c <__overflow@plt>
   19ce4:	b	19b54 <__assert_fail@plt+0x79c8>
   19ce8:	mov	r0, r3
   19cec:	mov	r1, #10
   19cf0:	bl	1206c <__overflow@plt>
   19cf4:	b	19a64 <__assert_fail@plt+0x78d8>
   19cf8:	mov	r0, r3
   19cfc:	mov	r1, #32
   19d00:	bl	1206c <__overflow@plt>
   19d04:	b	199e4 <__assert_fail@plt+0x7858>
   19d08:	bl	11d78 <__stack_chk_fail@plt>
   19d0c:	bl	21fe0 <close_stdout@@Base+0x6d64>
   19d10:			; <UNDEFINED> instruction: 0x0001fab4
   19d14:	andeq	r0, r0, r0, ror #3
   19d18:	andeq	pc, r1, r0, ror #27
   19d1c:	muleq	r0, r4, r2
   19d20:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   19d24:	andeq	pc, r1, ip, lsr #25
   19d28:	muleq	r1, r8, ip
   19d2c:			; <UNDEFINED> instruction: 0x0000b1b4
   19d30:	andeq	pc, r1, r0, ror #24
   19d34:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   19d38:	andeq	sl, r0, ip, lsr lr
   19d3c:	andeq	pc, r1, ip, lsr ip	; <UNPREDICTABLE>
   19d40:	andeq	pc, r1, r4, lsl #21
   19d44:	andeq	r0, r0, r0, lsl r2
   19d48:	muleq	r1, r4, fp
   19d4c:	andeq	pc, r1, r8, asr sl	; <UNPREDICTABLE>
   19d50:	andeq	pc, r1, ip, ror #22
   19d54:	andeq	pc, r1, r8, lsr #22
   19d58:	andeq	fp, r0, r8, asr #32
   19d5c:	strdeq	pc, [r1], -r4
   19d60:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   19d64:	andeq	pc, r1, r0, lsr #20
   19d68:	andeq	pc, r1, r0, lsl #20
   19d6c:	andeq	sl, r0, r4, asr pc
   19d70:			; <UNDEFINED> instruction: 0x0001f9b0
   19d74:	andeq	pc, r1, r4, ror r9	; <UNPREDICTABLE>
   19d78:	andeq	pc, r1, r0, lsl #18
   19d7c:	andeq	pc, r1, ip, ror #17
   19d80:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   19d84:	andeq	sl, r0, r4, asr #26
   19d88:	andeq	sl, r0, ip, asr #25
   19d8c:	ldrdeq	sl, [r0], -r0
   19d90:	andeq	sl, r0, r4, lsr #23
   19d94:	strdeq	pc, [r1], -ip
   19d98:	andeq	sl, r0, r0, lsl #23
   19d9c:	ldr	r2, [r1, #112]	; 0x70
   19da0:	mov	ip, r0
   19da4:	ldr	r3, [r0, #112]	; 0x70
   19da8:	cmp	r2, #3
   19dac:	cmpne	r2, #9
   19db0:	movne	r2, #0
   19db4:	moveq	r2, #1
   19db8:	cmp	r3, #3
   19dbc:	cmpne	r3, #9
   19dc0:	eor	r0, r2, #1
   19dc4:	movne	r3, #0
   19dc8:	moveq	r3, #1
   19dcc:	tst	r3, r0
   19dd0:	bne	19e18 <__assert_fail@plt+0x7c8c>
   19dd4:	eor	r3, r3, #1
   19dd8:	tst	r2, r3
   19ddc:	beq	19de8 <__assert_fail@plt+0x7c5c>
   19de0:	mov	r0, #1
   19de4:	bx	lr
   19de8:	ldr	r3, [r1, #96]	; 0x60
   19dec:	ldr	r2, [ip, #96]	; 0x60
   19df0:	ldr	r0, [ip, #100]	; 0x64
   19df4:	cmp	r2, r3
   19df8:	ldr	r3, [r1, #100]	; 0x64
   19dfc:	blt	19e18 <__assert_fail@plt+0x7c8c>
   19e00:	bgt	19de0 <__assert_fail@plt+0x7c54>
   19e04:	subs	r0, r0, r3
   19e08:	bxne	lr
   19e0c:	ldr	r0, [r1]
   19e10:	ldr	r1, [ip]
   19e14:	b	150ac <__assert_fail@plt+0x2f20>
   19e18:	mvn	r0, #0
   19e1c:	bx	lr
   19e20:	ldr	r2, [r1, #112]	; 0x70
   19e24:	mov	ip, r0
   19e28:	ldr	r3, [r0, #112]	; 0x70
   19e2c:	cmp	r2, #3
   19e30:	cmpne	r2, #9
   19e34:	movne	r2, #0
   19e38:	moveq	r2, #1
   19e3c:	cmp	r3, #3
   19e40:	cmpne	r3, #9
   19e44:	eor	r0, r2, #1
   19e48:	movne	r3, #0
   19e4c:	moveq	r3, #1
   19e50:	tst	r3, r0
   19e54:	bne	19e9c <__assert_fail@plt+0x7d10>
   19e58:	eor	r3, r3, #1
   19e5c:	tst	r2, r3
   19e60:	beq	19e6c <__assert_fail@plt+0x7ce0>
   19e64:	mov	r0, #1
   19e68:	bx	lr
   19e6c:	ldr	r3, [r1, #80]	; 0x50
   19e70:	ldr	r2, [ip, #80]	; 0x50
   19e74:	ldr	r0, [ip, #84]	; 0x54
   19e78:	cmp	r2, r3
   19e7c:	ldr	r3, [r1, #84]	; 0x54
   19e80:	blt	19e9c <__assert_fail@plt+0x7d10>
   19e84:	bgt	19e64 <__assert_fail@plt+0x7cd8>
   19e88:	subs	r0, r0, r3
   19e8c:	bxne	lr
   19e90:	ldr	r0, [r1]
   19e94:	ldr	r1, [ip]
   19e98:	b	150ac <__assert_fail@plt+0x2f20>
   19e9c:	mvn	r0, #0
   19ea0:	bx	lr
   19ea4:	ldr	r2, [r1, #112]	; 0x70
   19ea8:	ldr	r3, [r0, #112]	; 0x70
   19eac:	cmp	r2, #3
   19eb0:	cmpne	r2, #9
   19eb4:	movne	r2, #0
   19eb8:	moveq	r2, #1
   19ebc:	cmp	r3, #3
   19ec0:	cmpne	r3, #9
   19ec4:	eor	ip, r2, #1
   19ec8:	movne	r3, #0
   19ecc:	moveq	r3, #1
   19ed0:	tst	r3, ip
   19ed4:	bne	19f1c <__assert_fail@plt+0x7d90>
   19ed8:	eor	r3, r3, #1
   19edc:	tst	r2, r3
   19ee0:	beq	19eec <__assert_fail@plt+0x7d60>
   19ee4:	mov	r0, #1
   19ee8:	bx	lr
   19eec:	ldr	r3, [r0, #96]	; 0x60
   19ef0:	ldr	r2, [r1, #96]	; 0x60
   19ef4:	ldr	ip, [r1, #100]	; 0x64
   19ef8:	cmp	r2, r3
   19efc:	ldr	r3, [r0, #100]	; 0x64
   19f00:	blt	19f1c <__assert_fail@plt+0x7d90>
   19f04:	bgt	19ee4 <__assert_fail@plt+0x7d58>
   19f08:	subs	r3, ip, r3
   19f0c:	bne	19f24 <__assert_fail@plt+0x7d98>
   19f10:	ldr	r0, [r0]
   19f14:	ldr	r1, [r1]
   19f18:	b	150ac <__assert_fail@plt+0x2f20>
   19f1c:	mvn	r0, #0
   19f20:	bx	lr
   19f24:	mov	r0, r3
   19f28:	bx	lr
   19f2c:	ldr	r2, [r1, #112]	; 0x70
   19f30:	mov	ip, r0
   19f34:	ldr	r3, [r0, #112]	; 0x70
   19f38:	cmp	r2, #3
   19f3c:	cmpne	r2, #9
   19f40:	movne	r2, #0
   19f44:	moveq	r2, #1
   19f48:	cmp	r3, #3
   19f4c:	cmpne	r3, #9
   19f50:	eor	r0, r2, #1
   19f54:	movne	r3, #0
   19f58:	moveq	r3, #1
   19f5c:	tst	r3, r0
   19f60:	bne	19fa8 <__assert_fail@plt+0x7e1c>
   19f64:	eor	r3, r3, #1
   19f68:	tst	r2, r3
   19f6c:	beq	19f78 <__assert_fail@plt+0x7dec>
   19f70:	mov	r0, #1
   19f74:	bx	lr
   19f78:	ldr	r3, [r1, #88]	; 0x58
   19f7c:	ldr	r2, [ip, #88]	; 0x58
   19f80:	ldr	r0, [ip, #92]	; 0x5c
   19f84:	cmp	r2, r3
   19f88:	ldr	r3, [r1, #92]	; 0x5c
   19f8c:	blt	19fa8 <__assert_fail@plt+0x7e1c>
   19f90:	bgt	19f70 <__assert_fail@plt+0x7de4>
   19f94:	subs	r0, r0, r3
   19f98:	bxne	lr
   19f9c:	ldr	r0, [r1]
   19fa0:	ldr	r1, [ip]
   19fa4:	b	150ac <__assert_fail@plt+0x2f20>
   19fa8:	mvn	r0, #0
   19fac:	bx	lr
   19fb0:	ldr	r2, [r1, #112]	; 0x70
   19fb4:	ldr	r3, [r0, #112]	; 0x70
   19fb8:	cmp	r2, #3
   19fbc:	cmpne	r2, #9
   19fc0:	movne	r2, #0
   19fc4:	moveq	r2, #1
   19fc8:	cmp	r3, #3
   19fcc:	cmpne	r3, #9
   19fd0:	eor	ip, r2, #1
   19fd4:	movne	r3, #0
   19fd8:	moveq	r3, #1
   19fdc:	tst	r3, ip
   19fe0:	bne	1a028 <__assert_fail@plt+0x7e9c>
   19fe4:	eor	r3, r3, #1
   19fe8:	tst	r2, r3
   19fec:	beq	19ff8 <__assert_fail@plt+0x7e6c>
   19ff0:	mov	r0, #1
   19ff4:	bx	lr
   19ff8:	ldr	r3, [r0, #88]	; 0x58
   19ffc:	ldr	r2, [r1, #88]	; 0x58
   1a000:	ldr	ip, [r1, #92]	; 0x5c
   1a004:	cmp	r2, r3
   1a008:	ldr	r3, [r0, #92]	; 0x5c
   1a00c:	blt	1a028 <__assert_fail@plt+0x7e9c>
   1a010:	bgt	19ff0 <__assert_fail@plt+0x7e64>
   1a014:	subs	r3, ip, r3
   1a018:	bne	1a030 <__assert_fail@plt+0x7ea4>
   1a01c:	ldr	r0, [r0]
   1a020:	ldr	r1, [r1]
   1a024:	b	150ac <__assert_fail@plt+0x2f20>
   1a028:	mvn	r0, #0
   1a02c:	bx	lr
   1a030:	mov	r0, r3
   1a034:	bx	lr
   1a038:	ldr	r2, [r1, #112]	; 0x70
   1a03c:	ldr	r3, [r0, #112]	; 0x70
   1a040:	cmp	r2, #3
   1a044:	cmpne	r2, #9
   1a048:	movne	r2, #0
   1a04c:	moveq	r2, #1
   1a050:	cmp	r3, #3
   1a054:	cmpne	r3, #9
   1a058:	eor	ip, r2, #1
   1a05c:	movne	r3, #0
   1a060:	moveq	r3, #1
   1a064:	tst	r3, ip
   1a068:	bne	1a0b0 <__assert_fail@plt+0x7f24>
   1a06c:	eor	r3, r3, #1
   1a070:	tst	r2, r3
   1a074:	beq	1a080 <__assert_fail@plt+0x7ef4>
   1a078:	mov	r0, #1
   1a07c:	bx	lr
   1a080:	ldr	r3, [r0, #80]	; 0x50
   1a084:	ldr	r2, [r1, #80]	; 0x50
   1a088:	ldr	ip, [r1, #84]	; 0x54
   1a08c:	cmp	r2, r3
   1a090:	ldr	r3, [r0, #84]	; 0x54
   1a094:	blt	1a0b0 <__assert_fail@plt+0x7f24>
   1a098:	bgt	1a078 <__assert_fail@plt+0x7eec>
   1a09c:	subs	r3, ip, r3
   1a0a0:	bne	1a0b8 <__assert_fail@plt+0x7f2c>
   1a0a4:	ldr	r0, [r0]
   1a0a8:	ldr	r1, [r1]
   1a0ac:	b	150ac <__assert_fail@plt+0x2f20>
   1a0b0:	mvn	r0, #0
   1a0b4:	bx	lr
   1a0b8:	mov	r0, r3
   1a0bc:	bx	lr
   1a0c0:	push	{r4, r5}
   1a0c4:	mov	ip, r0
   1a0c8:	ldrd	r2, [r0, #56]	; 0x38
   1a0cc:	ldrd	r4, [r1, #56]	; 0x38
   1a0d0:	cmp	r2, r4
   1a0d4:	sbcs	r0, r3, r5
   1a0d8:	blt	1a0f8 <__assert_fail@plt+0x7f6c>
   1a0dc:	cmp	r4, r2
   1a0e0:	sbcs	r0, r5, r3
   1a0e4:	blt	1a104 <__assert_fail@plt+0x7f78>
   1a0e8:	ldr	r0, [r1]
   1a0ec:	pop	{r4, r5}
   1a0f0:	ldr	r1, [ip]
   1a0f4:	b	11c88 <strcmp@plt>
   1a0f8:	mvn	r0, #0
   1a0fc:	pop	{r4, r5}
   1a100:	bx	lr
   1a104:	mov	r0, #1
   1a108:	pop	{r4, r5}
   1a10c:	bx	lr
   1a110:	push	{r4, r5}
   1a114:	ldrd	r2, [r1, #56]	; 0x38
   1a118:	ldrd	r4, [r0, #56]	; 0x38
   1a11c:	cmp	r2, r4
   1a120:	sbcs	ip, r3, r5
   1a124:	blt	1a144 <__assert_fail@plt+0x7fb8>
   1a128:	cmp	r4, r2
   1a12c:	sbcs	ip, r5, r3
   1a130:	blt	1a150 <__assert_fail@plt+0x7fc4>
   1a134:	ldr	r0, [r0]
   1a138:	ldr	r1, [r1]
   1a13c:	pop	{r4, r5}
   1a140:	b	11c88 <strcmp@plt>
   1a144:	mvn	r0, #0
   1a148:	pop	{r4, r5}
   1a14c:	bx	lr
   1a150:	mov	r0, #1
   1a154:	pop	{r4, r5}
   1a158:	bx	lr
   1a15c:	ldr	r3, [r0, #96]	; 0x60
   1a160:	ldr	r2, [r1, #96]	; 0x60
   1a164:	ldr	ip, [r1, #100]	; 0x64
   1a168:	cmp	r2, r3
   1a16c:	ldr	r3, [r0, #100]	; 0x64
   1a170:	blt	1a18c <__assert_fail@plt+0x8000>
   1a174:	bgt	1a194 <__assert_fail@plt+0x8008>
   1a178:	subs	r3, ip, r3
   1a17c:	bne	1a19c <__assert_fail@plt+0x8010>
   1a180:	ldr	r0, [r0]
   1a184:	ldr	r1, [r1]
   1a188:	b	11c88 <strcmp@plt>
   1a18c:	mvn	r0, #0
   1a190:	bx	lr
   1a194:	mov	r0, #1
   1a198:	bx	lr
   1a19c:	mov	r0, r3
   1a1a0:	bx	lr
   1a1a4:	mov	r3, r0
   1a1a8:	ldr	r2, [r1, #96]	; 0x60
   1a1ac:	ldr	r0, [r0, #96]	; 0x60
   1a1b0:	ldr	ip, [r3, #100]	; 0x64
   1a1b4:	cmp	r0, r2
   1a1b8:	ldr	r2, [r1, #100]	; 0x64
   1a1bc:	blt	1a1d8 <__assert_fail@plt+0x804c>
   1a1c0:	bgt	1a1e0 <__assert_fail@plt+0x8054>
   1a1c4:	subs	r2, ip, r2
   1a1c8:	bne	1a1e8 <__assert_fail@plt+0x805c>
   1a1cc:	ldr	r0, [r1]
   1a1d0:	ldr	r1, [r3]
   1a1d4:	b	11c88 <strcmp@plt>
   1a1d8:	mvn	r0, #0
   1a1dc:	bx	lr
   1a1e0:	mov	r0, #1
   1a1e4:	bx	lr
   1a1e8:	mov	r0, r2
   1a1ec:	bx	lr
   1a1f0:	ldr	r3, [r0, #88]	; 0x58
   1a1f4:	ldr	r2, [r1, #88]	; 0x58
   1a1f8:	ldr	ip, [r1, #92]	; 0x5c
   1a1fc:	cmp	r2, r3
   1a200:	ldr	r3, [r0, #92]	; 0x5c
   1a204:	blt	1a220 <__assert_fail@plt+0x8094>
   1a208:	bgt	1a228 <__assert_fail@plt+0x809c>
   1a20c:	subs	r3, ip, r3
   1a210:	bne	1a230 <__assert_fail@plt+0x80a4>
   1a214:	ldr	r0, [r0]
   1a218:	ldr	r1, [r1]
   1a21c:	b	11c88 <strcmp@plt>
   1a220:	mvn	r0, #0
   1a224:	bx	lr
   1a228:	mov	r0, #1
   1a22c:	bx	lr
   1a230:	mov	r0, r3
   1a234:	bx	lr
   1a238:	mov	r3, r0
   1a23c:	ldr	r2, [r1, #88]	; 0x58
   1a240:	ldr	r0, [r0, #88]	; 0x58
   1a244:	ldr	ip, [r3, #92]	; 0x5c
   1a248:	cmp	r0, r2
   1a24c:	ldr	r2, [r1, #92]	; 0x5c
   1a250:	blt	1a26c <__assert_fail@plt+0x80e0>
   1a254:	bgt	1a274 <__assert_fail@plt+0x80e8>
   1a258:	subs	r2, ip, r2
   1a25c:	bne	1a27c <__assert_fail@plt+0x80f0>
   1a260:	ldr	r0, [r1]
   1a264:	ldr	r1, [r3]
   1a268:	b	11c88 <strcmp@plt>
   1a26c:	mvn	r0, #0
   1a270:	bx	lr
   1a274:	mov	r0, #1
   1a278:	bx	lr
   1a27c:	mov	r0, r2
   1a280:	bx	lr
   1a284:	ldr	r3, [r0, #80]	; 0x50
   1a288:	ldr	r2, [r1, #80]	; 0x50
   1a28c:	ldr	ip, [r1, #84]	; 0x54
   1a290:	cmp	r2, r3
   1a294:	ldr	r3, [r0, #84]	; 0x54
   1a298:	blt	1a2b4 <__assert_fail@plt+0x8128>
   1a29c:	bgt	1a2bc <__assert_fail@plt+0x8130>
   1a2a0:	subs	r3, ip, r3
   1a2a4:	bne	1a2c4 <__assert_fail@plt+0x8138>
   1a2a8:	ldr	r0, [r0]
   1a2ac:	ldr	r1, [r1]
   1a2b0:	b	11c88 <strcmp@plt>
   1a2b4:	mvn	r0, #0
   1a2b8:	bx	lr
   1a2bc:	mov	r0, #1
   1a2c0:	bx	lr
   1a2c4:	mov	r0, r3
   1a2c8:	bx	lr
   1a2cc:	mov	r3, r0
   1a2d0:	ldr	r2, [r1, #80]	; 0x50
   1a2d4:	ldr	r0, [r0, #80]	; 0x50
   1a2d8:	ldr	ip, [r3, #84]	; 0x54
   1a2dc:	cmp	r0, r2
   1a2e0:	ldr	r2, [r1, #84]	; 0x54
   1a2e4:	blt	1a300 <__assert_fail@plt+0x8174>
   1a2e8:	bgt	1a308 <__assert_fail@plt+0x817c>
   1a2ec:	subs	r2, ip, r2
   1a2f0:	bne	1a310 <__assert_fail@plt+0x8184>
   1a2f4:	ldr	r0, [r1]
   1a2f8:	ldr	r1, [r3]
   1a2fc:	b	11c88 <strcmp@plt>
   1a300:	mvn	r0, #0
   1a304:	bx	lr
   1a308:	mov	r0, #1
   1a30c:	bx	lr
   1a310:	mov	r0, r2
   1a314:	bx	lr
   1a318:	push	{r4, r5, r6, lr}
   1a31c:	mov	r6, r1
   1a320:	mov	r5, r0
   1a324:	mov	r1, #46	; 0x2e
   1a328:	ldr	r0, [r6]
   1a32c:	bl	1209c <strrchr@plt>
   1a330:	mov	r1, #46	; 0x2e
   1a334:	mov	r4, r0
   1a338:	ldr	r0, [r5]
   1a33c:	bl	1209c <strrchr@plt>
   1a340:	cmp	r4, #0
   1a344:	ldr	r1, [pc, #52]	; 1a380 <__assert_fail@plt+0x81f4>
   1a348:	add	r1, pc, r1
   1a34c:	mov	r3, r0
   1a350:	ldr	r0, [pc, #44]	; 1a384 <__assert_fail@plt+0x81f8>
   1a354:	add	r0, pc, r0
   1a358:	movne	r0, r4
   1a35c:	cmp	r3, #0
   1a360:	movne	r1, r3
   1a364:	bl	150ac <__assert_fail@plt+0x2f20>
   1a368:	cmp	r0, #0
   1a36c:	popne	{r4, r5, r6, pc}
   1a370:	ldr	r0, [r6]
   1a374:	ldr	r1, [r5]
   1a378:	pop	{r4, r5, r6, lr}
   1a37c:	b	150ac <__assert_fail@plt+0x2f20>
   1a380:	andeq	ip, r0, r8, lsl #9
   1a384:	andeq	ip, r0, ip, ror r4
   1a388:	push	{r4, r5, r6, lr}
   1a38c:	mov	r5, r1
   1a390:	mov	r6, r0
   1a394:	mov	r1, #46	; 0x2e
   1a398:	ldr	r0, [r0]
   1a39c:	bl	1209c <strrchr@plt>
   1a3a0:	mov	r1, #46	; 0x2e
   1a3a4:	mov	r4, r0
   1a3a8:	ldr	r0, [r5]
   1a3ac:	bl	1209c <strrchr@plt>
   1a3b0:	cmp	r4, #0
   1a3b4:	ldr	r1, [pc, #52]	; 1a3f0 <__assert_fail@plt+0x8264>
   1a3b8:	add	r1, pc, r1
   1a3bc:	mov	r3, r0
   1a3c0:	ldr	r0, [pc, #44]	; 1a3f4 <__assert_fail@plt+0x8268>
   1a3c4:	add	r0, pc, r0
   1a3c8:	movne	r0, r4
   1a3cc:	cmp	r3, #0
   1a3d0:	movne	r1, r3
   1a3d4:	bl	150ac <__assert_fail@plt+0x2f20>
   1a3d8:	cmp	r0, #0
   1a3dc:	popne	{r4, r5, r6, pc}
   1a3e0:	ldr	r0, [r6]
   1a3e4:	ldr	r1, [r5]
   1a3e8:	pop	{r4, r5, r6, lr}
   1a3ec:	b	150ac <__assert_fail@plt+0x2f20>
   1a3f0:	andeq	ip, r0, r8, lsl r4
   1a3f4:	andeq	ip, r0, ip, lsl #8
   1a3f8:	push	{r4, r5}
   1a3fc:	ldr	r2, [r1, #112]	; 0x70
   1a400:	ldr	r3, [r0, #112]	; 0x70
   1a404:	cmp	r2, #3
   1a408:	cmpne	r2, #9
   1a40c:	movne	r2, #0
   1a410:	moveq	r2, #1
   1a414:	cmp	r3, #3
   1a418:	cmpne	r3, #9
   1a41c:	eor	ip, r2, #1
   1a420:	movne	r3, #0
   1a424:	moveq	r3, #1
   1a428:	tst	r3, ip
   1a42c:	bne	1a478 <__assert_fail@plt+0x82ec>
   1a430:	eor	r3, r3, #1
   1a434:	tst	r2, r3
   1a438:	beq	1a448 <__assert_fail@plt+0x82bc>
   1a43c:	mov	r0, #1
   1a440:	pop	{r4, r5}
   1a444:	bx	lr
   1a448:	ldrd	r2, [r1, #56]	; 0x38
   1a44c:	ldrd	r4, [r0, #56]	; 0x38
   1a450:	cmp	r2, r4
   1a454:	sbcs	ip, r3, r5
   1a458:	blt	1a478 <__assert_fail@plt+0x82ec>
   1a45c:	cmp	r4, r2
   1a460:	sbcs	ip, r5, r3
   1a464:	blt	1a43c <__assert_fail@plt+0x82b0>
   1a468:	ldr	r0, [r0]
   1a46c:	ldr	r1, [r1]
   1a470:	pop	{r4, r5}
   1a474:	b	11c88 <strcmp@plt>
   1a478:	mvn	r0, #0
   1a47c:	pop	{r4, r5}
   1a480:	bx	lr
   1a484:	push	{r4, r5, r6, lr}
   1a488:	mov	r5, r1
   1a48c:	ldr	r2, [r1, #112]	; 0x70
   1a490:	mov	r4, r0
   1a494:	ldr	r3, [r0, #112]	; 0x70
   1a498:	cmp	r2, #3
   1a49c:	cmpne	r2, #9
   1a4a0:	movne	r2, #0
   1a4a4:	moveq	r2, #1
   1a4a8:	cmp	r3, #3
   1a4ac:	cmpne	r3, #9
   1a4b0:	eor	r1, r2, #1
   1a4b4:	movne	r3, #0
   1a4b8:	moveq	r3, #1
   1a4bc:	tst	r3, r1
   1a4c0:	bne	1a538 <__assert_fail@plt+0x83ac>
   1a4c4:	eor	r3, r3, #1
   1a4c8:	tst	r2, r3
   1a4cc:	beq	1a4d8 <__assert_fail@plt+0x834c>
   1a4d0:	mov	r0, #1
   1a4d4:	pop	{r4, r5, r6, pc}
   1a4d8:	mov	r1, #46	; 0x2e
   1a4dc:	ldr	r0, [r5]
   1a4e0:	bl	1209c <strrchr@plt>
   1a4e4:	mov	r1, #46	; 0x2e
   1a4e8:	mov	r6, r0
   1a4ec:	ldr	r0, [r4]
   1a4f0:	bl	1209c <strrchr@plt>
   1a4f4:	cmp	r6, #0
   1a4f8:	mov	r1, r0
   1a4fc:	ldr	r0, [pc, #60]	; 1a540 <__assert_fail@plt+0x83b4>
   1a500:	add	r0, pc, r0
   1a504:	movne	r0, r6
   1a508:	cmp	r1, #0
   1a50c:	beq	1a52c <__assert_fail@plt+0x83a0>
   1a510:	bl	150ac <__assert_fail@plt+0x2f20>
   1a514:	cmp	r0, #0
   1a518:	popne	{r4, r5, r6, pc}
   1a51c:	ldr	r0, [r5]
   1a520:	ldr	r1, [r4]
   1a524:	pop	{r4, r5, r6, lr}
   1a528:	b	150ac <__assert_fail@plt+0x2f20>
   1a52c:	ldr	r1, [pc, #16]	; 1a544 <__assert_fail@plt+0x83b8>
   1a530:	add	r1, pc, r1
   1a534:	b	1a510 <__assert_fail@plt+0x8384>
   1a538:	mvn	r0, #0
   1a53c:	pop	{r4, r5, r6, pc}
   1a540:	ldrdeq	ip, [r0], -r0
   1a544:	andeq	ip, r0, r0, lsr #5
   1a548:	push	{r4, r5, r6, lr}
   1a54c:	mov	r4, r1
   1a550:	ldr	r2, [r1, #112]	; 0x70
   1a554:	mov	r5, r0
   1a558:	ldr	r3, [r0, #112]	; 0x70
   1a55c:	cmp	r2, #3
   1a560:	cmpne	r2, #9
   1a564:	movne	r2, #0
   1a568:	moveq	r2, #1
   1a56c:	cmp	r3, #3
   1a570:	cmpne	r3, #9
   1a574:	eor	r1, r2, #1
   1a578:	movne	r3, #0
   1a57c:	moveq	r3, #1
   1a580:	tst	r3, r1
   1a584:	bne	1a5fc <__assert_fail@plt+0x8470>
   1a588:	eor	r3, r3, #1
   1a58c:	tst	r2, r3
   1a590:	beq	1a59c <__assert_fail@plt+0x8410>
   1a594:	mov	r0, #1
   1a598:	pop	{r4, r5, r6, pc}
   1a59c:	mov	r1, #46	; 0x2e
   1a5a0:	ldr	r0, [r0]
   1a5a4:	bl	1209c <strrchr@plt>
   1a5a8:	mov	r1, #46	; 0x2e
   1a5ac:	mov	r6, r0
   1a5b0:	ldr	r0, [r4]
   1a5b4:	bl	1209c <strrchr@plt>
   1a5b8:	cmp	r6, #0
   1a5bc:	mov	r1, r0
   1a5c0:	ldr	r0, [pc, #60]	; 1a604 <__assert_fail@plt+0x8478>
   1a5c4:	add	r0, pc, r0
   1a5c8:	movne	r0, r6
   1a5cc:	cmp	r1, #0
   1a5d0:	beq	1a5f0 <__assert_fail@plt+0x8464>
   1a5d4:	bl	150ac <__assert_fail@plt+0x2f20>
   1a5d8:	cmp	r0, #0
   1a5dc:	popne	{r4, r5, r6, pc}
   1a5e0:	ldr	r0, [r5]
   1a5e4:	ldr	r1, [r4]
   1a5e8:	pop	{r4, r5, r6, lr}
   1a5ec:	b	150ac <__assert_fail@plt+0x2f20>
   1a5f0:	ldr	r1, [pc, #16]	; 1a608 <__assert_fail@plt+0x847c>
   1a5f4:	add	r1, pc, r1
   1a5f8:	b	1a5d4 <__assert_fail@plt+0x8448>
   1a5fc:	mvn	r0, #0
   1a600:	pop	{r4, r5, r6, pc}
   1a604:	andeq	ip, r0, ip, lsl #4
   1a608:	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   1a60c:	ldr	r2, [r1, #112]	; 0x70
   1a610:	ldr	r3, [r0, #112]	; 0x70
   1a614:	cmp	r2, #3
   1a618:	cmpne	r2, #9
   1a61c:	movne	r2, #0
   1a620:	moveq	r2, #1
   1a624:	cmp	r3, #3
   1a628:	cmpne	r3, #9
   1a62c:	eor	ip, r2, #1
   1a630:	movne	r3, #0
   1a634:	moveq	r3, #1
   1a638:	tst	r3, ip
   1a63c:	bne	1a684 <__assert_fail@plt+0x84f8>
   1a640:	eor	r3, r3, #1
   1a644:	tst	r2, r3
   1a648:	beq	1a654 <__assert_fail@plt+0x84c8>
   1a64c:	mov	r0, #1
   1a650:	bx	lr
   1a654:	ldr	r3, [r0, #88]	; 0x58
   1a658:	ldr	r2, [r1, #88]	; 0x58
   1a65c:	ldr	ip, [r1, #92]	; 0x5c
   1a660:	cmp	r2, r3
   1a664:	ldr	r3, [r0, #92]	; 0x5c
   1a668:	blt	1a684 <__assert_fail@plt+0x84f8>
   1a66c:	bgt	1a64c <__assert_fail@plt+0x84c0>
   1a670:	subs	r3, ip, r3
   1a674:	bne	1a68c <__assert_fail@plt+0x8500>
   1a678:	ldr	r0, [r0]
   1a67c:	ldr	r1, [r1]
   1a680:	b	11c88 <strcmp@plt>
   1a684:	mvn	r0, #0
   1a688:	bx	lr
   1a68c:	mov	r0, r3
   1a690:	bx	lr
   1a694:	ldr	r2, [r1, #112]	; 0x70
   1a698:	ldr	r3, [r0, #112]	; 0x70
   1a69c:	cmp	r2, #3
   1a6a0:	cmpne	r2, #9
   1a6a4:	movne	r2, #0
   1a6a8:	moveq	r2, #1
   1a6ac:	cmp	r3, #3
   1a6b0:	cmpne	r3, #9
   1a6b4:	eor	ip, r2, #1
   1a6b8:	movne	r3, #0
   1a6bc:	moveq	r3, #1
   1a6c0:	tst	r3, ip
   1a6c4:	bne	1a70c <__assert_fail@plt+0x8580>
   1a6c8:	eor	r3, r3, #1
   1a6cc:	tst	r2, r3
   1a6d0:	beq	1a6dc <__assert_fail@plt+0x8550>
   1a6d4:	mov	r0, #1
   1a6d8:	bx	lr
   1a6dc:	ldr	r3, [r0, #96]	; 0x60
   1a6e0:	ldr	r2, [r1, #96]	; 0x60
   1a6e4:	ldr	ip, [r1, #100]	; 0x64
   1a6e8:	cmp	r2, r3
   1a6ec:	ldr	r3, [r0, #100]	; 0x64
   1a6f0:	blt	1a70c <__assert_fail@plt+0x8580>
   1a6f4:	bgt	1a6d4 <__assert_fail@plt+0x8548>
   1a6f8:	subs	r3, ip, r3
   1a6fc:	bne	1a714 <__assert_fail@plt+0x8588>
   1a700:	ldr	r0, [r0]
   1a704:	ldr	r1, [r1]
   1a708:	b	11c88 <strcmp@plt>
   1a70c:	mvn	r0, #0
   1a710:	bx	lr
   1a714:	mov	r0, r3
   1a718:	bx	lr
   1a71c:	ldr	r2, [r1, #112]	; 0x70
   1a720:	mov	ip, r0
   1a724:	ldr	r3, [r0, #112]	; 0x70
   1a728:	cmp	r2, #3
   1a72c:	cmpne	r2, #9
   1a730:	movne	r2, #0
   1a734:	moveq	r2, #1
   1a738:	cmp	r3, #3
   1a73c:	cmpne	r3, #9
   1a740:	eor	r0, r2, #1
   1a744:	movne	r3, #0
   1a748:	moveq	r3, #1
   1a74c:	tst	r3, r0
   1a750:	bne	1a798 <__assert_fail@plt+0x860c>
   1a754:	eor	r3, r3, #1
   1a758:	tst	r2, r3
   1a75c:	beq	1a768 <__assert_fail@plt+0x85dc>
   1a760:	mov	r0, #1
   1a764:	bx	lr
   1a768:	ldr	r3, [r1, #80]	; 0x50
   1a76c:	ldr	r2, [ip, #80]	; 0x50
   1a770:	ldr	r0, [ip, #84]	; 0x54
   1a774:	cmp	r2, r3
   1a778:	ldr	r3, [r1, #84]	; 0x54
   1a77c:	blt	1a798 <__assert_fail@plt+0x860c>
   1a780:	bgt	1a760 <__assert_fail@plt+0x85d4>
   1a784:	subs	r0, r0, r3
   1a788:	bxne	lr
   1a78c:	ldr	r0, [r1]
   1a790:	ldr	r1, [ip]
   1a794:	b	11c88 <strcmp@plt>
   1a798:	mvn	r0, #0
   1a79c:	bx	lr
   1a7a0:	push	{r4, r5, r6, lr}
   1a7a4:	mov	r5, r0
   1a7a8:	ldr	r6, [r1]
   1a7ac:	mov	r1, #46	; 0x2e
   1a7b0:	mov	r0, r6
   1a7b4:	bl	1209c <strrchr@plt>
   1a7b8:	ldr	r5, [r5]
   1a7bc:	mov	r1, #46	; 0x2e
   1a7c0:	mov	r4, r0
   1a7c4:	mov	r0, r5
   1a7c8:	bl	1209c <strrchr@plt>
   1a7cc:	cmp	r4, #0
   1a7d0:	ldr	r1, [pc, #52]	; 1a80c <__assert_fail@plt+0x8680>
   1a7d4:	add	r1, pc, r1
   1a7d8:	mov	r3, r0
   1a7dc:	ldr	r0, [pc, #44]	; 1a810 <__assert_fail@plt+0x8684>
   1a7e0:	add	r0, pc, r0
   1a7e4:	movne	r0, r4
   1a7e8:	cmp	r3, #0
   1a7ec:	movne	r1, r3
   1a7f0:	bl	11c88 <strcmp@plt>
   1a7f4:	cmp	r0, #0
   1a7f8:	popne	{r4, r5, r6, pc}
   1a7fc:	mov	r0, r6
   1a800:	mov	r1, r5
   1a804:	pop	{r4, r5, r6, lr}
   1a808:	b	11c88 <strcmp@plt>
   1a80c:	strdeq	fp, [r0], -ip
   1a810:	strdeq	fp, [r0], -r0
   1a814:	push	{r4, r5, r6, lr}
   1a818:	mov	r5, r1
   1a81c:	ldr	r6, [r0]
   1a820:	mov	r1, #46	; 0x2e
   1a824:	mov	r0, r6
   1a828:	bl	1209c <strrchr@plt>
   1a82c:	ldr	r5, [r5]
   1a830:	mov	r1, #46	; 0x2e
   1a834:	mov	r4, r0
   1a838:	mov	r0, r5
   1a83c:	bl	1209c <strrchr@plt>
   1a840:	cmp	r4, #0
   1a844:	ldr	r1, [pc, #52]	; 1a880 <__assert_fail@plt+0x86f4>
   1a848:	add	r1, pc, r1
   1a84c:	mov	r3, r0
   1a850:	ldr	r0, [pc, #44]	; 1a884 <__assert_fail@plt+0x86f8>
   1a854:	add	r0, pc, r0
   1a858:	movne	r0, r4
   1a85c:	cmp	r3, #0
   1a860:	movne	r1, r3
   1a864:	bl	11c88 <strcmp@plt>
   1a868:	cmp	r0, #0
   1a86c:	popne	{r4, r5, r6, pc}
   1a870:	mov	r0, r6
   1a874:	mov	r1, r5
   1a878:	pop	{r4, r5, r6, lr}
   1a87c:	b	11c88 <strcmp@plt>
   1a880:	andeq	fp, r0, r8, lsl #31
   1a884:	andeq	fp, r0, ip, ror pc
   1a888:	push	{r4, r5, r6, lr}
   1a88c:	mov	r4, r0
   1a890:	ldr	r2, [r1, #112]	; 0x70
   1a894:	ldr	r3, [r0, #112]	; 0x70
   1a898:	cmp	r2, #3
   1a89c:	cmpne	r2, #9
   1a8a0:	movne	r2, #0
   1a8a4:	moveq	r2, #1
   1a8a8:	cmp	r3, #3
   1a8ac:	cmpne	r3, #9
   1a8b0:	eor	r0, r2, #1
   1a8b4:	movne	r3, #0
   1a8b8:	moveq	r3, #1
   1a8bc:	tst	r3, r0
   1a8c0:	bne	1a93c <__assert_fail@plt+0x87b0>
   1a8c4:	eor	r3, r3, #1
   1a8c8:	tst	r2, r3
   1a8cc:	beq	1a8d8 <__assert_fail@plt+0x874c>
   1a8d0:	mov	r0, #1
   1a8d4:	pop	{r4, r5, r6, pc}
   1a8d8:	ldr	r6, [r1]
   1a8dc:	mov	r1, #46	; 0x2e
   1a8e0:	mov	r0, r6
   1a8e4:	bl	1209c <strrchr@plt>
   1a8e8:	ldr	r4, [r4]
   1a8ec:	mov	r1, #46	; 0x2e
   1a8f0:	mov	r5, r0
   1a8f4:	mov	r0, r4
   1a8f8:	bl	1209c <strrchr@plt>
   1a8fc:	cmp	r5, #0
   1a900:	ldr	r1, [pc, #60]	; 1a944 <__assert_fail@plt+0x87b8>
   1a904:	add	r1, pc, r1
   1a908:	mov	r3, r0
   1a90c:	ldr	r0, [pc, #52]	; 1a948 <__assert_fail@plt+0x87bc>
   1a910:	add	r0, pc, r0
   1a914:	movne	r0, r5
   1a918:	cmp	r3, #0
   1a91c:	movne	r1, r3
   1a920:	bl	11c88 <strcmp@plt>
   1a924:	cmp	r0, #0
   1a928:	popne	{r4, r5, r6, pc}
   1a92c:	mov	r0, r6
   1a930:	mov	r1, r4
   1a934:	pop	{r4, r5, r6, lr}
   1a938:	b	11c88 <strcmp@plt>
   1a93c:	mvn	r0, #0
   1a940:	pop	{r4, r5, r6, pc}
   1a944:	andeq	fp, r0, ip, asr #29
   1a948:	andeq	fp, r0, r0, asr #29
   1a94c:	push	{r4, r5, r6, lr}
   1a950:	subs	r4, r0, #0
   1a954:	ldr	r5, [pc, #1044]	; 1ad70 <__assert_fail@plt+0x8be4>
   1a958:	add	r5, pc, r5
   1a95c:	beq	1a9a4 <__assert_fail@plt+0x8818>
   1a960:	ldr	r3, [pc, #1036]	; 1ad74 <__assert_fail@plt+0x8be8>
   1a964:	mov	r2, #5
   1a968:	ldr	r1, [pc, #1032]	; 1ad78 <__assert_fail@plt+0x8bec>
   1a96c:	mov	r0, #0
   1a970:	ldr	r3, [r5, r3]
   1a974:	add	r1, pc, r1
   1a978:	ldr	r6, [r3]
   1a97c:	bl	11d6c <dcgettext@plt>
   1a980:	ldr	r3, [pc, #1012]	; 1ad7c <__assert_fail@plt+0x8bf0>
   1a984:	mov	r1, #1
   1a988:	ldr	r3, [r5, r3]
   1a98c:	ldr	r3, [r3]
   1a990:	mov	r2, r0
   1a994:	mov	r0, r6
   1a998:	bl	1203c <__fprintf_chk@plt>
   1a99c:	mov	r0, r4
   1a9a0:	bl	11f7c <exit@plt>
   1a9a4:	ldr	r1, [pc, #980]	; 1ad80 <__assert_fail@plt+0x8bf4>
   1a9a8:	mov	r2, #5
   1a9ac:	add	r1, pc, r1
   1a9b0:	bl	11d6c <dcgettext@plt>
   1a9b4:	ldr	r3, [pc, #960]	; 1ad7c <__assert_fail@plt+0x8bf0>
   1a9b8:	ldr	r6, [r5, r3]
   1a9bc:	ldr	r2, [r6]
   1a9c0:	mov	r1, r0
   1a9c4:	mov	r0, #1
   1a9c8:	bl	1200c <__printf_chk@plt>
   1a9cc:	ldr	r1, [pc, #944]	; 1ad84 <__assert_fail@plt+0x8bf8>
   1a9d0:	mov	r2, #5
   1a9d4:	mov	r0, r4
   1a9d8:	add	r1, pc, r1
   1a9dc:	bl	11d6c <dcgettext@plt>
   1a9e0:	ldr	r3, [pc, #928]	; 1ad88 <__assert_fail@plt+0x8bfc>
   1a9e4:	ldr	r5, [r5, r3]
   1a9e8:	ldr	r1, [r5]
   1a9ec:	bl	11c4c <fputs_unlocked@plt>
   1a9f0:	ldr	r1, [pc, #916]	; 1ad8c <__assert_fail@plt+0x8c00>
   1a9f4:	mov	r2, #5
   1a9f8:	mov	r0, r4
   1a9fc:	add	r1, pc, r1
   1aa00:	bl	11d6c <dcgettext@plt>
   1aa04:	ldr	r1, [r5]
   1aa08:	bl	11c4c <fputs_unlocked@plt>
   1aa0c:	ldr	r1, [pc, #892]	; 1ad90 <__assert_fail@plt+0x8c04>
   1aa10:	mov	r2, #5
   1aa14:	mov	r0, r4
   1aa18:	add	r1, pc, r1
   1aa1c:	bl	11d6c <dcgettext@plt>
   1aa20:	ldr	r1, [r5]
   1aa24:	bl	11c4c <fputs_unlocked@plt>
   1aa28:	ldr	r1, [pc, #868]	; 1ad94 <__assert_fail@plt+0x8c08>
   1aa2c:	mov	r2, #5
   1aa30:	mov	r0, r4
   1aa34:	add	r1, pc, r1
   1aa38:	bl	11d6c <dcgettext@plt>
   1aa3c:	ldr	r1, [r5]
   1aa40:	bl	11c4c <fputs_unlocked@plt>
   1aa44:	ldr	r1, [pc, #844]	; 1ad98 <__assert_fail@plt+0x8c0c>
   1aa48:	mov	r2, #5
   1aa4c:	mov	r0, r4
   1aa50:	add	r1, pc, r1
   1aa54:	bl	11d6c <dcgettext@plt>
   1aa58:	ldr	r1, [r5]
   1aa5c:	bl	11c4c <fputs_unlocked@plt>
   1aa60:	ldr	r1, [pc, #820]	; 1ad9c <__assert_fail@plt+0x8c10>
   1aa64:	mov	r2, #5
   1aa68:	mov	r0, r4
   1aa6c:	add	r1, pc, r1
   1aa70:	bl	11d6c <dcgettext@plt>
   1aa74:	ldr	r1, [r5]
   1aa78:	bl	11c4c <fputs_unlocked@plt>
   1aa7c:	ldr	r1, [pc, #796]	; 1ada0 <__assert_fail@plt+0x8c14>
   1aa80:	mov	r2, #5
   1aa84:	mov	r0, r4
   1aa88:	add	r1, pc, r1
   1aa8c:	bl	11d6c <dcgettext@plt>
   1aa90:	ldr	r1, [r5]
   1aa94:	bl	11c4c <fputs_unlocked@plt>
   1aa98:	ldr	r1, [pc, #772]	; 1ada4 <__assert_fail@plt+0x8c18>
   1aa9c:	mov	r2, #5
   1aaa0:	mov	r0, r4
   1aaa4:	add	r1, pc, r1
   1aaa8:	bl	11d6c <dcgettext@plt>
   1aaac:	ldr	r1, [r5]
   1aab0:	bl	11c4c <fputs_unlocked@plt>
   1aab4:	ldr	r1, [pc, #748]	; 1ada8 <__assert_fail@plt+0x8c1c>
   1aab8:	mov	r2, #5
   1aabc:	mov	r0, r4
   1aac0:	add	r1, pc, r1
   1aac4:	bl	11d6c <dcgettext@plt>
   1aac8:	ldr	r1, [r5]
   1aacc:	bl	11c4c <fputs_unlocked@plt>
   1aad0:	ldr	r1, [pc, #724]	; 1adac <__assert_fail@plt+0x8c20>
   1aad4:	mov	r2, #5
   1aad8:	mov	r0, r4
   1aadc:	add	r1, pc, r1
   1aae0:	bl	11d6c <dcgettext@plt>
   1aae4:	ldr	r1, [r5]
   1aae8:	bl	11c4c <fputs_unlocked@plt>
   1aaec:	ldr	r1, [pc, #700]	; 1adb0 <__assert_fail@plt+0x8c24>
   1aaf0:	mov	r2, #5
   1aaf4:	mov	r0, r4
   1aaf8:	add	r1, pc, r1
   1aafc:	bl	11d6c <dcgettext@plt>
   1ab00:	ldr	r1, [r5]
   1ab04:	bl	11c4c <fputs_unlocked@plt>
   1ab08:	ldr	r1, [pc, #676]	; 1adb4 <__assert_fail@plt+0x8c28>
   1ab0c:	mov	r2, #5
   1ab10:	mov	r0, r4
   1ab14:	add	r1, pc, r1
   1ab18:	bl	11d6c <dcgettext@plt>
   1ab1c:	ldr	r1, [r5]
   1ab20:	bl	11c4c <fputs_unlocked@plt>
   1ab24:	ldr	r1, [pc, #652]	; 1adb8 <__assert_fail@plt+0x8c2c>
   1ab28:	mov	r2, #5
   1ab2c:	mov	r0, r4
   1ab30:	add	r1, pc, r1
   1ab34:	bl	11d6c <dcgettext@plt>
   1ab38:	ldr	r1, [r5]
   1ab3c:	bl	11c4c <fputs_unlocked@plt>
   1ab40:	ldr	r1, [pc, #628]	; 1adbc <__assert_fail@plt+0x8c30>
   1ab44:	mov	r2, #5
   1ab48:	mov	r0, r4
   1ab4c:	add	r1, pc, r1
   1ab50:	bl	11d6c <dcgettext@plt>
   1ab54:	ldr	r1, [r5]
   1ab58:	bl	11c4c <fputs_unlocked@plt>
   1ab5c:	ldr	r1, [pc, #604]	; 1adc0 <__assert_fail@plt+0x8c34>
   1ab60:	mov	r2, #5
   1ab64:	mov	r0, r4
   1ab68:	add	r1, pc, r1
   1ab6c:	bl	11d6c <dcgettext@plt>
   1ab70:	ldr	r1, [r5]
   1ab74:	bl	11c4c <fputs_unlocked@plt>
   1ab78:	ldr	r1, [pc, #580]	; 1adc4 <__assert_fail@plt+0x8c38>
   1ab7c:	mov	r2, #5
   1ab80:	mov	r0, r4
   1ab84:	add	r1, pc, r1
   1ab88:	bl	11d6c <dcgettext@plt>
   1ab8c:	ldr	r1, [r5]
   1ab90:	bl	11c4c <fputs_unlocked@plt>
   1ab94:	ldr	r1, [pc, #556]	; 1adc8 <__assert_fail@plt+0x8c3c>
   1ab98:	mov	r2, #5
   1ab9c:	mov	r0, r4
   1aba0:	add	r1, pc, r1
   1aba4:	bl	11d6c <dcgettext@plt>
   1aba8:	ldr	r1, [r5]
   1abac:	bl	11c4c <fputs_unlocked@plt>
   1abb0:	ldr	r1, [pc, #532]	; 1adcc <__assert_fail@plt+0x8c40>
   1abb4:	mov	r2, #5
   1abb8:	mov	r0, r4
   1abbc:	add	r1, pc, r1
   1abc0:	bl	11d6c <dcgettext@plt>
   1abc4:	ldr	r1, [r5]
   1abc8:	bl	11c4c <fputs_unlocked@plt>
   1abcc:	ldr	r1, [pc, #508]	; 1add0 <__assert_fail@plt+0x8c44>
   1abd0:	mov	r2, #5
   1abd4:	mov	r0, r4
   1abd8:	add	r1, pc, r1
   1abdc:	bl	11d6c <dcgettext@plt>
   1abe0:	ldr	r1, [r5]
   1abe4:	bl	11c4c <fputs_unlocked@plt>
   1abe8:	ldr	r1, [pc, #484]	; 1add4 <__assert_fail@plt+0x8c48>
   1abec:	mov	r2, #5
   1abf0:	mov	r0, r4
   1abf4:	add	r1, pc, r1
   1abf8:	bl	11d6c <dcgettext@plt>
   1abfc:	ldr	r1, [r5]
   1ac00:	bl	11c4c <fputs_unlocked@plt>
   1ac04:	ldr	r1, [pc, #460]	; 1add8 <__assert_fail@plt+0x8c4c>
   1ac08:	mov	r2, #5
   1ac0c:	mov	r0, r4
   1ac10:	add	r1, pc, r1
   1ac14:	bl	11d6c <dcgettext@plt>
   1ac18:	ldr	r1, [r5]
   1ac1c:	bl	11c4c <fputs_unlocked@plt>
   1ac20:	ldr	r1, [pc, #436]	; 1addc <__assert_fail@plt+0x8c50>
   1ac24:	mov	r2, #5
   1ac28:	mov	r0, r4
   1ac2c:	add	r1, pc, r1
   1ac30:	bl	11d6c <dcgettext@plt>
   1ac34:	ldr	r1, [r5]
   1ac38:	bl	11c4c <fputs_unlocked@plt>
   1ac3c:	ldr	r1, [pc, #412]	; 1ade0 <__assert_fail@plt+0x8c54>
   1ac40:	mov	r2, #5
   1ac44:	mov	r0, r4
   1ac48:	add	r1, pc, r1
   1ac4c:	bl	11d6c <dcgettext@plt>
   1ac50:	ldr	r1, [r5]
   1ac54:	bl	11c4c <fputs_unlocked@plt>
   1ac58:	ldr	r1, [pc, #388]	; 1ade4 <__assert_fail@plt+0x8c58>
   1ac5c:	mov	r2, #5
   1ac60:	mov	r0, r4
   1ac64:	add	r1, pc, r1
   1ac68:	bl	11d6c <dcgettext@plt>
   1ac6c:	ldr	r1, [r5]
   1ac70:	bl	11c4c <fputs_unlocked@plt>
   1ac74:	ldr	r1, [pc, #364]	; 1ade8 <__assert_fail@plt+0x8c5c>
   1ac78:	mov	r2, #5
   1ac7c:	mov	r0, r4
   1ac80:	add	r1, pc, r1
   1ac84:	bl	11d6c <dcgettext@plt>
   1ac88:	ldr	r1, [r5]
   1ac8c:	bl	11c4c <fputs_unlocked@plt>
   1ac90:	ldr	r1, [pc, #340]	; 1adec <__assert_fail@plt+0x8c60>
   1ac94:	mov	r2, #5
   1ac98:	mov	r0, r4
   1ac9c:	add	r1, pc, r1
   1aca0:	bl	11d6c <dcgettext@plt>
   1aca4:	ldr	r1, [r5]
   1aca8:	bl	11c4c <fputs_unlocked@plt>
   1acac:	ldr	r1, [pc, #316]	; 1adf0 <__assert_fail@plt+0x8c64>
   1acb0:	mov	r2, #5
   1acb4:	mov	r0, r4
   1acb8:	add	r1, pc, r1
   1acbc:	bl	11d6c <dcgettext@plt>
   1acc0:	ldr	r2, [pc, #300]	; 1adf4 <__assert_fail@plt+0x8c68>
   1acc4:	ldr	r3, [pc, #300]	; 1adf8 <__assert_fail@plt+0x8c6c>
   1acc8:	add	r2, pc, r2
   1accc:	add	r3, pc, r3
   1acd0:	mov	r1, r0
   1acd4:	mov	r0, #1
   1acd8:	bl	1200c <__printf_chk@plt>
   1acdc:	mov	r0, #5
   1ace0:	mov	r1, r4
   1ace4:	bl	12078 <setlocale@plt>
   1ace8:	cmp	r0, #0
   1acec:	beq	1ad08 <__assert_fail@plt+0x8b7c>
   1acf0:	ldr	r1, [pc, #260]	; 1adfc <__assert_fail@plt+0x8c70>
   1acf4:	mov	r2, #3
   1acf8:	add	r1, pc, r1
   1acfc:	bl	1212c <strncmp@plt>
   1ad00:	cmp	r0, #0
   1ad04:	bne	1ad3c <__assert_fail@plt+0x8bb0>
   1ad08:	ldr	r1, [pc, #240]	; 1ae00 <__assert_fail@plt+0x8c74>
   1ad0c:	mov	r2, #5
   1ad10:	mov	r0, #0
   1ad14:	add	r1, pc, r1
   1ad18:	bl	11d6c <dcgettext@plt>
   1ad1c:	mov	r5, r0
   1ad20:	ldr	r0, [r6]
   1ad24:	bl	1b450 <close_stdout@@Base+0x1d4>
   1ad28:	mov	r1, r5
   1ad2c:	mov	r2, r0
   1ad30:	mov	r0, #1
   1ad34:	bl	1200c <__printf_chk@plt>
   1ad38:	b	1a99c <__assert_fail@plt+0x8810>
   1ad3c:	ldr	r1, [pc, #192]	; 1ae04 <__assert_fail@plt+0x8c78>
   1ad40:	mov	r2, #5
   1ad44:	mov	r0, r4
   1ad48:	add	r1, pc, r1
   1ad4c:	bl	11d6c <dcgettext@plt>
   1ad50:	mov	r5, r0
   1ad54:	ldr	r0, [r6]
   1ad58:	bl	1b450 <close_stdout@@Base+0x1d4>
   1ad5c:	mov	r1, r5
   1ad60:	mov	r2, r0
   1ad64:	mov	r0, #1
   1ad68:	bl	1200c <__printf_chk@plt>
   1ad6c:	b	1ad08 <__assert_fail@plt+0x8b7c>
   1ad70:	andeq	lr, r1, r0, lsr #13
   1ad74:	andeq	r0, r0, ip, ror #3
   1ad78:	andeq	r9, r0, r8, ror pc
   1ad7c:	andeq	r0, r0, ip, lsl r2
   1ad80:	andeq	r9, r0, r8, ror #30
   1ad84:	andeq	r9, r0, r0, ror #30
   1ad88:	andeq	r0, r0, r0, lsl r2
   1ad8c:	andeq	r9, r0, ip, asr #31
   1ad90:	strdeq	r9, [r0], -ip
   1ad94:	strdeq	sl, [r0], -r0
   1ad98:	andeq	sl, r0, ip, lsl r3
   1ad9c:	andeq	sl, r0, r8, ror #8
   1ada0:	strdeq	sl, [r0], -r0
   1ada4:	andeq	sl, r0, r4, lsl r6
   1ada8:	strdeq	sl, [r0], -r0
   1adac:	andeq	sl, r0, r4, ror #15
   1adb0:	andeq	sl, r0, r0, ror r9
   1adb4:	andeq	sl, r0, r0, lsl #22
   1adb8:	andeq	sl, r0, ip, asr #24
   1adbc:	andeq	sl, r0, r4, lsr #27
   1adc0:	andeq	sl, r0, r4, asr #30
   1adc4:	strdeq	sl, [r0], -r0
   1adc8:			; <UNDEFINED> instruction: 0x0000b1bc
   1adcc:			; <UNDEFINED> instruction: 0x0000b3b4
   1add0:	andeq	fp, r0, r8, lsr #8
   1add4:	andeq	fp, r0, r4, ror r5
   1add8:	andeq	fp, r0, r4, ror #12
   1addc:	andeq	fp, r0, ip, lsl #16
   1ade0:	andeq	fp, r0, r0, lsr #16
   1ade4:	andeq	fp, r0, ip, lsr r8
   1ade8:			; <UNDEFINED> instruction: 0x0000b8bc
   1adec:	andeq	fp, r0, r0, asr #19
   1adf0:	andeq	fp, r0, ip, lsr sl
   1adf4:	andeq	fp, r0, r4, asr #20
   1adf8:	andeq	fp, r0, r0, asr sl
   1adfc:	andeq	fp, r0, ip, asr #20
   1ae00:	andeq	fp, r0, ip, ror sl
   1ae04:	andeq	fp, r0, r0, lsl #20
   1ae08:	cmp	r1, #1024	; 0x400
   1ae0c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1ae10:	addls	r4, r1, #1
   1ae14:	mov	r7, r0
   1ae18:	movwhi	r4, #1025	; 0x401
   1ae1c:	mov	r0, r4
   1ae20:	bl	11eec <malloc@plt>
   1ae24:	mov	r2, r4
   1ae28:	subs	r5, r0, #0
   1ae2c:	mov	r0, r7
   1ae30:	mov	r1, r5
   1ae34:	beq	1aeac <__assert_fail@plt+0x8d20>
   1ae38:	bl	11dfc <readlink@plt>
   1ae3c:	subs	r6, r0, #0
   1ae40:	blt	1ae84 <__assert_fail@plt+0x8cf8>
   1ae44:	cmp	r4, r6
   1ae48:	mov	r0, r5
   1ae4c:	bhi	1aeb8 <__assert_fail@plt+0x8d2c>
   1ae50:	bl	11ce8 <free@plt>
   1ae54:	cmn	r4, #-1073741823	; 0xc0000001
   1ae58:	lslls	r4, r4, #1
   1ae5c:	bls	1ae1c <__assert_fail@plt+0x8c90>
   1ae60:	cmn	r4, #-2147483646	; 0x80000002
   1ae64:	mvn	r4, #-2147483648	; 0x80000000
   1ae68:	bls	1ae1c <__assert_fail@plt+0x8c90>
   1ae6c:	bl	11fd0 <__errno_location@plt>
   1ae70:	mov	r3, #0
   1ae74:	mov	r2, #12
   1ae78:	str	r2, [r0]
   1ae7c:	mov	r0, r3
   1ae80:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ae84:	bl	11fd0 <__errno_location@plt>
   1ae88:	ldr	r9, [r0]
   1ae8c:	mov	r8, r0
   1ae90:	cmp	r9, #34	; 0x22
   1ae94:	beq	1ae44 <__assert_fail@plt+0x8cb8>
   1ae98:	mov	r0, r5
   1ae9c:	bl	11ce8 <free@plt>
   1aea0:	str	r9, [r8]
   1aea4:	mov	r3, #0
   1aea8:	b	1aeb0 <__assert_fail@plt+0x8d24>
   1aeac:	mov	r3, r5
   1aeb0:	mov	r0, r3
   1aeb4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1aeb8:	mov	r3, r5
   1aebc:	mov	r2, #0
   1aec0:	mov	r0, r3
   1aec4:	strb	r2, [r5, r6]
   1aec8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1aecc:	mov	r0, #1
   1aed0:	b	1a94c <__assert_fail@plt+0x87c0>
   1aed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aed8:	sub	sp, sp, #12
   1aedc:	mov	r7, r1
   1aee0:	mov	r6, r3
   1aee4:	str	r2, [sp]
   1aee8:	mov	sl, r0
   1aeec:	bl	11fac <strlen@plt>
   1aef0:	ldr	fp, [r7]
   1aef4:	cmp	fp, #0
   1aef8:	mov	r8, r0
   1aefc:	beq	1afc0 <__assert_fail@plt+0x8e34>
   1af00:	mov	r3, #0
   1af04:	ldr	r4, [sp]
   1af08:	str	r3, [sp, #4]
   1af0c:	mov	r5, r3
   1af10:	mvn	r9, #0
   1af14:	b	1af40 <__assert_fail@plt+0x8db4>
   1af18:	bl	11d48 <memcmp@plt>
   1af1c:	ldr	r3, [sp, #4]
   1af20:	cmp	r0, #0
   1af24:	movne	r3, #1
   1af28:	str	r3, [sp, #4]
   1af2c:	ldr	fp, [r7, #4]!
   1af30:	add	r5, r5, #1
   1af34:	add	r4, r4, r6
   1af38:	cmp	fp, #0
   1af3c:	beq	1af9c <__assert_fail@plt+0x8e10>
   1af40:	mov	r0, fp
   1af44:	mov	r1, sl
   1af48:	mov	r2, r8
   1af4c:	bl	1212c <strncmp@plt>
   1af50:	cmp	r0, #0
   1af54:	mov	r0, fp
   1af58:	bne	1af2c <__assert_fail@plt+0x8da0>
   1af5c:	bl	11fac <strlen@plt>
   1af60:	ldr	r3, [sp]
   1af64:	mov	r1, r4
   1af68:	mov	r2, r6
   1af6c:	cmp	r0, r8
   1af70:	mla	r0, r6, r9, r3
   1af74:	beq	1afb4 <__assert_fail@plt+0x8e28>
   1af78:	cmn	r9, #1
   1af7c:	moveq	r9, r5
   1af80:	beq	1af2c <__assert_fail@plt+0x8da0>
   1af84:	ldr	r3, [sp]
   1af88:	cmp	r3, #0
   1af8c:	bne	1af18 <__assert_fail@plt+0x8d8c>
   1af90:	mov	r3, #1
   1af94:	str	r3, [sp, #4]
   1af98:	b	1af2c <__assert_fail@plt+0x8da0>
   1af9c:	ldr	r3, [sp, #4]
   1afa0:	cmp	r3, #0
   1afa4:	bne	1afc8 <__assert_fail@plt+0x8e3c>
   1afa8:	mov	r0, r9
   1afac:	add	sp, sp, #12
   1afb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afb4:	mov	r0, r5
   1afb8:	add	sp, sp, #12
   1afbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afc0:	mvn	r9, #0
   1afc4:	b	1afa8 <__assert_fail@plt+0x8e1c>
   1afc8:	mvn	r0, #1
   1afcc:	b	1afac <__assert_fail@plt+0x8e20>
   1afd0:	cmn	r2, #1
   1afd4:	push	{r4, r5, r6, lr}
   1afd8:	mov	r4, r0
   1afdc:	sub	sp, sp, #8
   1afe0:	mov	r5, r1
   1afe4:	mov	r0, #0
   1afe8:	beq	1b040 <__assert_fail@plt+0x8eb4>
   1afec:	ldr	r1, [pc, #100]	; 1b058 <__assert_fail@plt+0x8ecc>
   1aff0:	mov	r2, #5
   1aff4:	add	r1, pc, r1
   1aff8:	bl	11d6c <dcgettext@plt>
   1affc:	mov	r6, r0
   1b000:	mov	r2, r5
   1b004:	mov	r1, #6
   1b008:	mov	r0, #0
   1b00c:	bl	1fca4 <close_stdout@@Base+0x4a28>
   1b010:	mov	r1, r4
   1b014:	mov	r5, r0
   1b018:	mov	r0, #1
   1b01c:	bl	1ffa4 <close_stdout@@Base+0x4d28>
   1b020:	mov	r3, r5
   1b024:	mov	r2, r6
   1b028:	str	r0, [sp]
   1b02c:	mov	r0, #0
   1b030:	mov	r1, r0
   1b034:	bl	11e98 <error@plt>
   1b038:	add	sp, sp, #8
   1b03c:	pop	{r4, r5, r6, pc}
   1b040:	ldr	r1, [pc, #20]	; 1b05c <__assert_fail@plt+0x8ed0>
   1b044:	mov	r2, #5
   1b048:	add	r1, pc, r1
   1b04c:	bl	11d6c <dcgettext@plt>
   1b050:	mov	r6, r0
   1b054:	b	1b000 <__assert_fail@plt+0x8e74>
   1b058:	andeq	ip, r0, r0, lsr #32
   1b05c:			; <UNDEFINED> instruction: 0x0000bfb0
   1b060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b064:	mov	r4, r1
   1b068:	ldr	r1, [pc, #276]	; 1b184 <__assert_fail@plt+0x8ff8>
   1b06c:	sub	sp, sp, #12
   1b070:	mov	r7, r0
   1b074:	mov	r6, r2
   1b078:	add	r1, pc, r1
   1b07c:	mov	r2, #5
   1b080:	mov	r0, #0
   1b084:	bl	11d6c <dcgettext@plt>
   1b088:	ldr	r3, [pc, #248]	; 1b188 <__assert_fail@plt+0x8ffc>
   1b08c:	ldr	r2, [pc, #248]	; 1b18c <__assert_fail@plt+0x9000>
   1b090:	add	r3, pc, r3
   1b094:	ldr	r9, [r3, r2]
   1b098:	ldr	r1, [r9]
   1b09c:	bl	11c4c <fputs_unlocked@plt>
   1b0a0:	ldr	fp, [r7]
   1b0a4:	cmp	fp, #0
   1b0a8:	beq	1b148 <__assert_fail@plt+0x8fbc>
   1b0ac:	ldr	sl, [pc, #220]	; 1b190 <__assert_fail@plt+0x9004>
   1b0b0:	mov	r8, #0
   1b0b4:	ldr	r3, [pc, #216]	; 1b194 <__assert_fail@plt+0x9008>
   1b0b8:	mov	r5, r8
   1b0bc:	add	sl, pc, sl
   1b0c0:	add	r3, pc, r3
   1b0c4:	str	r3, [sp, #4]
   1b0c8:	b	1b104 <__assert_fail@plt+0x8f78>
   1b0cc:	mov	r0, fp
   1b0d0:	ldr	fp, [r9]
   1b0d4:	bl	1ffac <close_stdout@@Base+0x4d30>
   1b0d8:	mov	r1, #1
   1b0dc:	mov	r2, sl
   1b0e0:	mov	r8, r4
   1b0e4:	mov	r3, r0
   1b0e8:	mov	r0, fp
   1b0ec:	bl	1203c <__fprintf_chk@plt>
   1b0f0:	ldr	fp, [r7, #4]!
   1b0f4:	add	r5, r5, #1
   1b0f8:	add	r4, r4, r6
   1b0fc:	cmp	fp, #0
   1b100:	beq	1b148 <__assert_fail@plt+0x8fbc>
   1b104:	cmp	r5, #0
   1b108:	mov	r1, r4
   1b10c:	mov	r2, r6
   1b110:	mov	r0, r8
   1b114:	beq	1b0cc <__assert_fail@plt+0x8f40>
   1b118:	bl	11d48 <memcmp@plt>
   1b11c:	cmp	r0, #0
   1b120:	bne	1b0cc <__assert_fail@plt+0x8f40>
   1b124:	mov	r0, fp
   1b128:	ldr	fp, [r9]
   1b12c:	bl	1ffac <close_stdout@@Base+0x4d30>
   1b130:	mov	r1, #1
   1b134:	ldr	r2, [sp, #4]
   1b138:	mov	r3, r0
   1b13c:	mov	r0, fp
   1b140:	bl	1203c <__fprintf_chk@plt>
   1b144:	b	1b0f0 <__assert_fail@plt+0x8f64>
   1b148:	ldr	r0, [r9]
   1b14c:	ldr	r3, [r0, #20]
   1b150:	ldr	r2, [r0, #24]
   1b154:	cmp	r3, r2
   1b158:	bcs	1b174 <__assert_fail@plt+0x8fe8>
   1b15c:	add	r1, r3, #1
   1b160:	mov	r2, #10
   1b164:	str	r1, [r0, #20]
   1b168:	strb	r2, [r3]
   1b16c:	add	sp, sp, #12
   1b170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b174:	mov	r1, #10
   1b178:	add	sp, sp, #12
   1b17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b180:	b	1206c <__overflow@plt>
   1b184:			; <UNDEFINED> instruction: 0x0000bfbc
   1b188:	andeq	sp, r1, r8, ror #30
   1b18c:	andeq	r0, r0, ip, ror #3
   1b190:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   1b194:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   1b198:	push	{r4, r5, r6, r7, r8, lr}
   1b19c:	mov	r7, r1
   1b1a0:	ldr	r4, [sp, #24]
   1b1a4:	mov	r1, r2
   1b1a8:	mov	r6, r2
   1b1ac:	mov	r5, r3
   1b1b0:	mov	r2, r3
   1b1b4:	mov	r8, r0
   1b1b8:	mov	r3, r4
   1b1bc:	mov	r0, r7
   1b1c0:	bl	1aed4 <__assert_fail@plt+0x8d48>
   1b1c4:	subs	r2, r0, #0
   1b1c8:	blt	1b1d4 <__assert_fail@plt+0x9048>
   1b1cc:	mov	r0, r2
   1b1d0:	pop	{r4, r5, r6, r7, r8, pc}
   1b1d4:	mov	r0, r8
   1b1d8:	mov	r1, r7
   1b1dc:	bl	1afd0 <__assert_fail@plt+0x8e44>
   1b1e0:	mov	r0, r6
   1b1e4:	mov	r1, r5
   1b1e8:	mov	r2, r4
   1b1ec:	bl	1b060 <__assert_fail@plt+0x8ed4>
   1b1f0:	ldr	r3, [sp, #28]
   1b1f4:	blx	r3
   1b1f8:	mvn	r0, #0
   1b1fc:	pop	{r4, r5, r6, r7, r8, pc}
   1b200:	push	{r4, r5, r6, r7, r8, lr}
   1b204:	mov	r8, r0
   1b208:	ldr	r5, [r1]
   1b20c:	mov	r6, r3
   1b210:	cmp	r5, #0
   1b214:	beq	1b24c <__assert_fail@plt+0x90c0>
   1b218:	mov	r4, r2
   1b21c:	mov	r7, r1
   1b220:	b	1b230 <__assert_fail@plt+0x90a4>
   1b224:	ldr	r5, [r7, #4]!
   1b228:	cmp	r5, #0
   1b22c:	beq	1b24c <__assert_fail@plt+0x90c0>
   1b230:	mov	r1, r4
   1b234:	mov	r0, r8
   1b238:	mov	r2, r6
   1b23c:	add	r4, r4, r6
   1b240:	bl	11d48 <memcmp@plt>
   1b244:	cmp	r0, #0
   1b248:	bne	1b224 <__assert_fail@plt+0x9098>
   1b24c:	mov	r0, r5
   1b250:	pop	{r4, r5, r6, r7, r8, pc}
   1b254:	ldr	r3, [pc, #8]	; 1b264 <__assert_fail@plt+0x90d8>
   1b258:	add	r3, pc, r3
   1b25c:	str	r0, [r3]
   1b260:	bx	lr
   1b264:	andeq	lr, r1, ip, lsr #24
   1b268:	ldr	r3, [pc, #8]	; 1b278 <__assert_fail@plt+0x90ec>
   1b26c:	add	r3, pc, r3
   1b270:	strb	r0, [r3, #4]
   1b274:	bx	lr
   1b278:	andeq	lr, r1, r8, lsl ip

0001b27c <close_stdout@@Base>:
   1b27c:	push	{r4, r5, r6, r7, lr}
   1b280:	sub	sp, sp, #12
   1b284:	ldr	r4, [pc, #228]	; 1b370 <close_stdout@@Base+0xf4>
   1b288:	ldr	r3, [pc, #228]	; 1b374 <close_stdout@@Base+0xf8>
   1b28c:	add	r4, pc, r4
   1b290:	ldr	r3, [r4, r3]
   1b294:	ldr	r0, [r3]
   1b298:	bl	22e70 <close_stdout@@Base+0x7bf4>
   1b29c:	cmp	r0, #0
   1b2a0:	beq	1b2c8 <close_stdout@@Base+0x4c>
   1b2a4:	ldr	r3, [pc, #204]	; 1b378 <close_stdout@@Base+0xfc>
   1b2a8:	add	r3, pc, r3
   1b2ac:	ldrb	r3, [r3, #4]
   1b2b0:	cmp	r3, #0
   1b2b4:	beq	1b2e8 <close_stdout@@Base+0x6c>
   1b2b8:	bl	11fd0 <__errno_location@plt>
   1b2bc:	ldr	r3, [r0]
   1b2c0:	cmp	r3, #32
   1b2c4:	bne	1b2e8 <close_stdout@@Base+0x6c>
   1b2c8:	ldr	r3, [pc, #172]	; 1b37c <close_stdout@@Base+0x100>
   1b2cc:	ldr	r3, [r4, r3]
   1b2d0:	ldr	r0, [r3]
   1b2d4:	bl	22e70 <close_stdout@@Base+0x7bf4>
   1b2d8:	cmp	r0, #0
   1b2dc:	bne	1b33c <close_stdout@@Base+0xc0>
   1b2e0:	add	sp, sp, #12
   1b2e4:	pop	{r4, r5, r6, r7, pc}
   1b2e8:	ldr	r1, [pc, #144]	; 1b380 <close_stdout@@Base+0x104>
   1b2ec:	mov	r0, #0
   1b2f0:	mov	r2, #5
   1b2f4:	add	r1, pc, r1
   1b2f8:	bl	11d6c <dcgettext@plt>
   1b2fc:	ldr	r3, [pc, #128]	; 1b384 <close_stdout@@Base+0x108>
   1b300:	ldr	r5, [pc, r3]
   1b304:	cmp	r5, #0
   1b308:	mov	r6, r0
   1b30c:	beq	1b34c <close_stdout@@Base+0xd0>
   1b310:	bl	11fd0 <__errno_location@plt>
   1b314:	ldr	r7, [r0]
   1b318:	mov	r0, r5
   1b31c:	bl	1fe58 <close_stdout@@Base+0x4bdc>
   1b320:	ldr	r2, [pc, #96]	; 1b388 <close_stdout@@Base+0x10c>
   1b324:	str	r6, [sp]
   1b328:	mov	r1, r7
   1b32c:	add	r2, pc, r2
   1b330:	mov	r3, r0
   1b334:	mov	r0, #0
   1b338:	bl	11e98 <error@plt>
   1b33c:	ldr	r3, [pc, #72]	; 1b38c <close_stdout@@Base+0x110>
   1b340:	ldr	r3, [r4, r3]
   1b344:	ldr	r0, [r3]
   1b348:	bl	11d00 <_exit@plt>
   1b34c:	bl	11fd0 <__errno_location@plt>
   1b350:	ldr	r2, [pc, #56]	; 1b390 <close_stdout@@Base+0x114>
   1b354:	add	r2, pc, r2
   1b358:	mov	r3, r0
   1b35c:	mov	r0, r5
   1b360:	ldr	r1, [r3]
   1b364:	mov	r3, r6
   1b368:	bl	11e98 <error@plt>
   1b36c:	b	1b33c <close_stdout@@Base+0xc0>
   1b370:	andeq	sp, r1, ip, ror #26
   1b374:	andeq	r0, r0, r0, lsl r2
   1b378:	ldrdeq	lr, [r1], -ip
   1b37c:	andeq	r0, r0, ip, ror #3
   1b380:	andeq	fp, r0, r8, ror #26
   1b384:	andeq	lr, r1, r4, lsl #23
   1b388:	andeq	fp, r0, ip, lsr sp
   1b38c:	andeq	r0, r0, r4, lsl r2
   1b390:	andeq	fp, r0, r8, asr #10
   1b394:	push	{r3, r4, r5, lr}
   1b398:	mov	r4, r0
   1b39c:	ldrb	r5, [r0]
   1b3a0:	subs	r3, r5, #47	; 0x2f
   1b3a4:	rsbs	r5, r3, #0
   1b3a8:	adcs	r5, r5, r3
   1b3ac:	bl	1b450 <close_stdout@@Base+0x1d4>
   1b3b0:	rsb	r3, r4, r0
   1b3b4:	cmp	r3, r5
   1b3b8:	bls	1b3f0 <close_stdout@@Base+0x174>
   1b3bc:	sub	r0, r3, #1
   1b3c0:	ldrb	r2, [r4, r0]
   1b3c4:	cmp	r2, #47	; 0x2f
   1b3c8:	beq	1b3e0 <close_stdout@@Base+0x164>
   1b3cc:	b	1b3f0 <close_stdout@@Base+0x174>
   1b3d0:	ldrb	r2, [r4, r3]
   1b3d4:	cmp	r2, #47	; 0x2f
   1b3d8:	popne	{r3, r4, r5, pc}
   1b3dc:	mov	r0, r3
   1b3e0:	cmp	r5, r0
   1b3e4:	sub	r3, r0, #1
   1b3e8:	bcc	1b3d0 <close_stdout@@Base+0x154>
   1b3ec:	pop	{r3, r4, r5, pc}
   1b3f0:	mov	r0, r3
   1b3f4:	pop	{r3, r4, r5, pc}
   1b3f8:	push	{r4, r5, r6, r7, r8, lr}
   1b3fc:	mov	r8, r0
   1b400:	bl	1b394 <close_stdout@@Base+0x118>
   1b404:	rsbs	r6, r0, #1
   1b408:	add	r7, r0, #1
   1b40c:	mov	r4, r0
   1b410:	movcc	r6, #0
   1b414:	add	r0, r6, r7
   1b418:	bl	11eec <malloc@plt>
   1b41c:	subs	r5, r0, #0
   1b420:	beq	1b448 <close_stdout@@Base+0x1cc>
   1b424:	mov	r2, r4
   1b428:	mov	r1, r8
   1b42c:	bl	11d0c <memcpy@plt>
   1b430:	cmp	r6, #0
   1b434:	movne	r3, #46	; 0x2e
   1b438:	strbne	r3, [r5, r4]
   1b43c:	movne	r4, r7
   1b440:	mov	r3, #0
   1b444:	strb	r3, [r5, r4]
   1b448:	mov	r0, r5
   1b44c:	pop	{r4, r5, r6, r7, r8, pc}
   1b450:	ldrb	r3, [r0]
   1b454:	cmp	r3, #47	; 0x2f
   1b458:	bne	1b474 <close_stdout@@Base+0x1f8>
   1b45c:	add	r2, r0, #1
   1b460:	mov	r0, r2
   1b464:	add	r2, r2, #1
   1b468:	ldrb	r3, [r0]
   1b46c:	cmp	r3, #47	; 0x2f
   1b470:	beq	1b460 <close_stdout@@Base+0x1e4>
   1b474:	cmp	r3, #0
   1b478:	bxeq	lr
   1b47c:	mov	r2, r0
   1b480:	mov	r1, #0
   1b484:	cmp	r3, #47	; 0x2f
   1b488:	moveq	r1, #1
   1b48c:	beq	1b49c <close_stdout@@Base+0x220>
   1b490:	cmp	r1, #0
   1b494:	movne	r0, r2
   1b498:	movne	r1, #0
   1b49c:	ldrb	r3, [r2, #1]!
   1b4a0:	cmp	r3, #0
   1b4a4:	bne	1b484 <close_stdout@@Base+0x208>
   1b4a8:	bx	lr
   1b4ac:	push	{r4, lr}
   1b4b0:	mov	r4, r0
   1b4b4:	bl	11fac <strlen@plt>
   1b4b8:	cmp	r0, #1
   1b4bc:	popls	{r4, pc}
   1b4c0:	sub	r3, r0, #1
   1b4c4:	ldrb	r2, [r4, r3]
   1b4c8:	cmp	r2, #47	; 0x2f
   1b4cc:	popne	{r4, pc}
   1b4d0:	mov	r0, r3
   1b4d4:	cmp	r0, #1
   1b4d8:	sub	r3, r3, #1
   1b4dc:	beq	1b4f0 <close_stdout@@Base+0x274>
   1b4e0:	ldrb	r2, [r4, r3]
   1b4e4:	cmp	r2, #47	; 0x2f
   1b4e8:	popne	{r4, pc}
   1b4ec:	b	1b4d0 <close_stdout@@Base+0x254>
   1b4f0:	pop	{r4, pc}
   1b4f4:	and	r3, r0, #61440	; 0xf000
   1b4f8:	cmp	r3, #32768	; 0x8000
   1b4fc:	moveq	r3, #45	; 0x2d
   1b500:	beq	1b54c <close_stdout@@Base+0x2d0>
   1b504:	cmp	r3, #16384	; 0x4000
   1b508:	moveq	r3, #100	; 0x64
   1b50c:	beq	1b54c <close_stdout@@Base+0x2d0>
   1b510:	cmp	r3, #24576	; 0x6000
   1b514:	moveq	r3, #98	; 0x62
   1b518:	beq	1b54c <close_stdout@@Base+0x2d0>
   1b51c:	cmp	r3, #8192	; 0x2000
   1b520:	moveq	r3, #99	; 0x63
   1b524:	beq	1b54c <close_stdout@@Base+0x2d0>
   1b528:	cmp	r3, #40960	; 0xa000
   1b52c:	moveq	r3, #108	; 0x6c
   1b530:	beq	1b54c <close_stdout@@Base+0x2d0>
   1b534:	cmp	r3, #4096	; 0x1000
   1b538:	moveq	r3, #112	; 0x70
   1b53c:	beq	1b54c <close_stdout@@Base+0x2d0>
   1b540:	cmp	r3, #49152	; 0xc000
   1b544:	movne	r3, #63	; 0x3f
   1b548:	moveq	r3, #115	; 0x73
   1b54c:	tst	r0, #256	; 0x100
   1b550:	strb	r3, [r1]
   1b554:	moveq	r3, #45	; 0x2d
   1b558:	movne	r3, #114	; 0x72
   1b55c:	tst	r0, #128	; 0x80
   1b560:	strb	r3, [r1, #1]
   1b564:	moveq	r3, #45	; 0x2d
   1b568:	movne	r3, #119	; 0x77
   1b56c:	tst	r0, #2048	; 0x800
   1b570:	strb	r3, [r1, #2]
   1b574:	beq	1b60c <close_stdout@@Base+0x390>
   1b578:	tst	r0, #64	; 0x40
   1b57c:	moveq	r3, #83	; 0x53
   1b580:	movne	r3, #115	; 0x73
   1b584:	tst	r0, #32
   1b588:	strb	r3, [r1, #3]
   1b58c:	moveq	r3, #45	; 0x2d
   1b590:	movne	r3, #114	; 0x72
   1b594:	tst	r0, #16
   1b598:	strb	r3, [r1, #4]
   1b59c:	moveq	r3, #45	; 0x2d
   1b5a0:	movne	r3, #119	; 0x77
   1b5a4:	tst	r0, #1024	; 0x400
   1b5a8:	strb	r3, [r1, #5]
   1b5ac:	beq	1b62c <close_stdout@@Base+0x3b0>
   1b5b0:	tst	r0, #8
   1b5b4:	moveq	r3, #83	; 0x53
   1b5b8:	movne	r3, #115	; 0x73
   1b5bc:	tst	r0, #4
   1b5c0:	strb	r3, [r1, #6]
   1b5c4:	moveq	r3, #45	; 0x2d
   1b5c8:	movne	r3, #114	; 0x72
   1b5cc:	tst	r0, #2
   1b5d0:	strb	r3, [r1, #7]
   1b5d4:	moveq	r3, #45	; 0x2d
   1b5d8:	movne	r3, #119	; 0x77
   1b5dc:	tst	r0, #512	; 0x200
   1b5e0:	strb	r3, [r1, #8]
   1b5e4:	beq	1b61c <close_stdout@@Base+0x3a0>
   1b5e8:	tst	r0, #1
   1b5ec:	moveq	r3, #84	; 0x54
   1b5f0:	movne	r3, #116	; 0x74
   1b5f4:	strb	r3, [r1, #9]
   1b5f8:	mov	r2, #32
   1b5fc:	mov	r3, #0
   1b600:	strb	r2, [r1, #10]
   1b604:	strb	r3, [r1, #11]
   1b608:	bx	lr
   1b60c:	tst	r0, #64	; 0x40
   1b610:	moveq	r3, #45	; 0x2d
   1b614:	movne	r3, #120	; 0x78
   1b618:	b	1b584 <close_stdout@@Base+0x308>
   1b61c:	tst	r0, #1
   1b620:	moveq	r3, #45	; 0x2d
   1b624:	movne	r3, #120	; 0x78
   1b628:	b	1b5f4 <close_stdout@@Base+0x378>
   1b62c:	tst	r0, #8
   1b630:	moveq	r3, #45	; 0x2d
   1b634:	movne	r3, #120	; 0x78
   1b638:	b	1b5bc <close_stdout@@Base+0x340>
   1b63c:	ldr	r0, [r0, #16]
   1b640:	b	1b4f4 <close_stdout@@Base+0x278>
   1b644:	push	{r3, lr}
   1b648:	bl	1b658 <close_stdout@@Base+0x3dc>
   1b64c:	cmp	r0, #0
   1b650:	popne	{r3, pc}
   1b654:	bl	21fe0 <close_stdout@@Base+0x6d64>
   1b658:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b65c:	mov	r4, r1
   1b660:	mov	r8, r2
   1b664:	mov	fp, r0
   1b668:	bl	1b450 <close_stdout@@Base+0x1d4>
   1b66c:	mov	sl, r0
   1b670:	bl	1b4ac <close_stdout@@Base+0x230>
   1b674:	rsb	r7, fp, sl
   1b678:	cmp	r0, #0
   1b67c:	add	r7, r7, r0
   1b680:	moveq	sl, r0
   1b684:	beq	1b698 <close_stdout@@Base+0x41c>
   1b688:	add	sl, sl, r0
   1b68c:	ldrb	sl, [sl, #-1]
   1b690:	subs	sl, sl, #47	; 0x2f
   1b694:	movne	sl, #1
   1b698:	ldrb	r3, [r4]
   1b69c:	cmp	r3, #47	; 0x2f
   1b6a0:	movne	r5, r4
   1b6a4:	beq	1b718 <close_stdout@@Base+0x49c>
   1b6a8:	mov	r0, r5
   1b6ac:	bl	11fac <strlen@plt>
   1b6b0:	mov	r6, r0
   1b6b4:	add	r0, r7, #1
   1b6b8:	add	r0, r0, sl
   1b6bc:	add	r0, r0, r6
   1b6c0:	bl	11eec <malloc@plt>
   1b6c4:	subs	r9, r0, #0
   1b6c8:	beq	1b710 <close_stdout@@Base+0x494>
   1b6cc:	mov	r2, r7
   1b6d0:	mov	r1, fp
   1b6d4:	bl	11f58 <mempcpy@plt>
   1b6d8:	cmp	r8, #0
   1b6dc:	mov	r2, #47	; 0x2f
   1b6e0:	strb	r2, [r0], sl
   1b6e4:	beq	1b6fc <close_stdout@@Base+0x480>
   1b6e8:	ldrb	r2, [r4]
   1b6ec:	cmp	r2, #47	; 0x2f
   1b6f0:	movne	r2, r0
   1b6f4:	subeq	r2, r0, #1
   1b6f8:	str	r2, [r8]
   1b6fc:	mov	r1, r5
   1b700:	mov	r2, r6
   1b704:	bl	11f58 <mempcpy@plt>
   1b708:	mov	r3, #0
   1b70c:	strb	r3, [r0]
   1b710:	mov	r0, r9
   1b714:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b718:	add	r3, r4, #1
   1b71c:	mov	r5, r3
   1b720:	add	r3, r3, #1
   1b724:	ldrb	r2, [r5]
   1b728:	cmp	r2, #47	; 0x2f
   1b72c:	bne	1b6a8 <close_stdout@@Base+0x42c>
   1b730:	b	1b71c <close_stdout@@Base+0x4a0>
   1b734:	push	{r4}		; (str r4, [sp, #-4]!)
   1b738:	mov	r4, r0
   1b73c:	ldr	r2, [r0]
   1b740:	ldrb	r3, [r2]
   1b744:	cmp	r3, #0
   1b748:	beq	1b7c4 <close_stdout@@Base+0x548>
   1b74c:	mov	ip, #0
   1b750:	mov	r0, ip
   1b754:	b	1b78c <close_stdout@@Base+0x510>
   1b758:	bic	r1, r3, #32
   1b75c:	mov	ip, #0
   1b760:	sub	r1, r1, #65	; 0x41
   1b764:	cmp	r1, #25
   1b768:	bls	1b774 <close_stdout@@Base+0x4f8>
   1b76c:	cmp	r3, #126	; 0x7e
   1b770:	movne	r0, ip
   1b774:	add	r1, r2, #1
   1b778:	str	r1, [r4]
   1b77c:	ldrb	r3, [r2, #1]
   1b780:	cmp	r3, #0
   1b784:	beq	1b7c8 <close_stdout@@Base+0x54c>
   1b788:	mov	r2, r1
   1b78c:	cmp	ip, #0
   1b790:	bne	1b758 <close_stdout@@Base+0x4dc>
   1b794:	cmp	r3, #46	; 0x2e
   1b798:	beq	1b7d0 <close_stdout@@Base+0x554>
   1b79c:	sub	r1, r3, #48	; 0x30
   1b7a0:	cmp	r1, #9
   1b7a4:	bls	1b774 <close_stdout@@Base+0x4f8>
   1b7a8:	bic	r1, r3, #32
   1b7ac:	sub	r1, r1, #65	; 0x41
   1b7b0:	cmp	r1, #25
   1b7b4:	bls	1b774 <close_stdout@@Base+0x4f8>
   1b7b8:	cmp	r3, #126	; 0x7e
   1b7bc:	movne	r0, #0
   1b7c0:	b	1b774 <close_stdout@@Base+0x4f8>
   1b7c4:	mov	r0, r3
   1b7c8:	pop	{r4}		; (ldr r4, [sp], #4)
   1b7cc:	bx	lr
   1b7d0:	cmp	r0, #0
   1b7d4:	mov	ip, #1
   1b7d8:	moveq	r0, r2
   1b7dc:	b	1b774 <close_stdout@@Base+0x4f8>
   1b7e0:	ldr	r3, [pc, #872]	; 1bb50 <close_stdout@@Base+0x8d4>
   1b7e4:	ldr	r2, [pc, #872]	; 1bb54 <close_stdout@@Base+0x8d8>
   1b7e8:	add	r3, pc, r3
   1b7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7f0:	sub	sp, sp, #28
   1b7f4:	ldr	r2, [r3, r2]
   1b7f8:	mov	r4, r0
   1b7fc:	mov	r5, r1
   1b800:	ldr	r3, [r2]
   1b804:	str	r2, [sp]
   1b808:	str	r3, [sp, #20]
   1b80c:	bl	11c88 <strcmp@plt>
   1b810:	cmp	r0, #0
   1b814:	str	r0, [sp, #4]
   1b818:	beq	1b9d4 <close_stdout@@Base+0x758>
   1b81c:	ldrb	r3, [r4]
   1b820:	cmp	r3, #0
   1b824:	beq	1ba08 <close_stdout@@Base+0x78c>
   1b828:	ldrb	r2, [r5]
   1b82c:	cmp	r2, #0
   1b830:	beq	1b85c <close_stdout@@Base+0x5e0>
   1b834:	rsbs	r1, r3, #46	; 0x2e
   1b838:	bne	1b848 <close_stdout@@Base+0x5cc>
   1b83c:	ldrb	r0, [r4, #1]
   1b840:	cmp	r0, #0
   1b844:	beq	1ba08 <close_stdout@@Base+0x78c>
   1b848:	rsbs	r0, r2, #46	; 0x2e
   1b84c:	bne	1b87c <close_stdout@@Base+0x600>
   1b850:	ldrb	ip, [r5, #1]
   1b854:	cmp	ip, #0
   1b858:	bne	1b87c <close_stdout@@Base+0x600>
   1b85c:	mov	r0, #1
   1b860:	ldr	r1, [sp]
   1b864:	ldr	r2, [sp, #20]
   1b868:	ldr	r3, [r1]
   1b86c:	cmp	r2, r3
   1b870:	bne	1bb34 <close_stdout@@Base+0x8b8>
   1b874:	add	sp, sp, #28
   1b878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b87c:	cmp	r1, #0
   1b880:	bne	1b89c <close_stdout@@Base+0x620>
   1b884:	ldrb	r1, [r4, #1]
   1b888:	cmp	r1, #46	; 0x2e
   1b88c:	bne	1b89c <close_stdout@@Base+0x620>
   1b890:	ldrb	r1, [r4, #2]
   1b894:	cmp	r1, #0
   1b898:	beq	1ba08 <close_stdout@@Base+0x78c>
   1b89c:	cmp	r0, #0
   1b8a0:	beq	1b9dc <close_stdout@@Base+0x760>
   1b8a4:	cmp	r3, #46	; 0x2e
   1b8a8:	beq	1b9f8 <close_stdout@@Base+0x77c>
   1b8ac:	cmp	r2, #46	; 0x2e
   1b8b0:	beq	1b85c <close_stdout@@Base+0x5e0>
   1b8b4:	add	r0, sp, #12
   1b8b8:	str	r4, [sp, #12]
   1b8bc:	str	r5, [sp, #16]
   1b8c0:	bl	1b734 <close_stdout@@Base+0x4b8>
   1b8c4:	mov	r7, r0
   1b8c8:	add	r0, sp, #16
   1b8cc:	bl	1b734 <close_stdout@@Base+0x4b8>
   1b8d0:	cmp	r7, #0
   1b8d4:	ldreq	r6, [sp, #12]
   1b8d8:	movne	r6, r7
   1b8dc:	rsb	r6, r4, r6
   1b8e0:	cmp	r0, #0
   1b8e4:	rsbne	r2, r5, r0
   1b8e8:	beq	1bb18 <close_stdout@@Base+0x89c>
   1b8ec:	cmp	r6, r2
   1b8f0:	beq	1baec <close_stdout@@Base+0x870>
   1b8f4:	mov	ip, #0
   1b8f8:	mov	r3, ip
   1b8fc:	cmp	r6, r3
   1b900:	cmpls	r2, ip
   1b904:	bhi	1b97c <close_stdout@@Base+0x700>
   1b908:	b	1b9d4 <close_stdout@@Base+0x758>
   1b90c:	cmp	r2, ip
   1b910:	ldrb	sl, [r5, ip]
   1b914:	bls	1ba18 <close_stdout@@Base+0x79c>
   1b918:	sub	r1, sl, #48	; 0x30
   1b91c:	cmp	r1, #9
   1b920:	bls	1ba18 <close_stdout@@Base+0x79c>
   1b924:	cmp	r6, r3
   1b928:	beq	1b940 <close_stdout@@Base+0x6c4>
   1b92c:	ldrb	r1, [r4, r3]
   1b930:	sub	r0, r1, #48	; 0x30
   1b934:	cmp	r0, #9
   1b938:	mov	r0, r1
   1b93c:	bhi	1b998 <close_stdout@@Base+0x71c>
   1b940:	sub	r0, sl, #48	; 0x30
   1b944:	mov	r1, #0
   1b948:	cmp	r0, #9
   1b94c:	bls	1b9cc <close_stdout@@Base+0x750>
   1b950:	bic	r0, sl, #32
   1b954:	sub	r0, r0, #65	; 0x41
   1b958:	cmp	r0, #25
   1b95c:	bls	1b96c <close_stdout@@Base+0x6f0>
   1b960:	cmp	sl, #126	; 0x7e
   1b964:	addne	sl, sl, #256	; 0x100
   1b968:	beq	1ba10 <close_stdout@@Base+0x794>
   1b96c:	cmp	r1, sl
   1b970:	bne	1badc <close_stdout@@Base+0x860>
   1b974:	add	r3, r3, #1
   1b978:	add	ip, ip, #1
   1b97c:	cmp	r6, r3
   1b980:	bls	1b90c <close_stdout@@Base+0x690>
   1b984:	ldrb	r1, [r4, r3]
   1b988:	sub	r0, r1, #48	; 0x30
   1b98c:	cmp	r0, #9
   1b990:	bls	1b90c <close_stdout@@Base+0x690>
   1b994:	mov	r0, r1
   1b998:	bic	r0, r0, #32
   1b99c:	sub	r0, r0, #65	; 0x41
   1b9a0:	cmp	r0, #25
   1b9a4:	bls	1b9b4 <close_stdout@@Base+0x738>
   1b9a8:	cmp	r1, #126	; 0x7e
   1b9ac:	addne	r1, r1, #256	; 0x100
   1b9b0:	mvneq	r1, #0
   1b9b4:	cmp	r2, ip
   1b9b8:	beq	1b9cc <close_stdout@@Base+0x750>
   1b9bc:	ldrb	sl, [r5, ip]
   1b9c0:	sub	r0, sl, #48	; 0x30
   1b9c4:	cmp	r0, #9
   1b9c8:	bhi	1b950 <close_stdout@@Base+0x6d4>
   1b9cc:	mov	sl, #0
   1b9d0:	b	1b96c <close_stdout@@Base+0x6f0>
   1b9d4:	ldr	r0, [sp, #4]
   1b9d8:	b	1b860 <close_stdout@@Base+0x5e4>
   1b9dc:	ldrb	r1, [r5, #1]
   1b9e0:	cmp	r1, #46	; 0x2e
   1b9e4:	bne	1b8a4 <close_stdout@@Base+0x628>
   1b9e8:	ldrb	r1, [r5, #2]
   1b9ec:	cmp	r1, #0
   1b9f0:	beq	1b85c <close_stdout@@Base+0x5e0>
   1b9f4:	b	1b8a4 <close_stdout@@Base+0x628>
   1b9f8:	cmp	r2, #46	; 0x2e
   1b9fc:	addeq	r4, r4, #1
   1ba00:	addeq	r5, r5, #1
   1ba04:	beq	1b8b4 <close_stdout@@Base+0x638>
   1ba08:	mvn	r0, #0
   1ba0c:	b	1b860 <close_stdout@@Base+0x5e4>
   1ba10:	mvn	sl, #0
   1ba14:	b	1b96c <close_stdout@@Base+0x6f0>
   1ba18:	ldrb	r7, [r4, r3]
   1ba1c:	add	r0, r4, r3
   1ba20:	mov	r1, r3
   1ba24:	cmp	r7, #48	; 0x30
   1ba28:	bne	1ba3c <close_stdout@@Base+0x7c0>
   1ba2c:	ldrb	r7, [r0, #1]!
   1ba30:	add	r1, r1, #1
   1ba34:	cmp	r7, #48	; 0x30
   1ba38:	beq	1ba2c <close_stdout@@Base+0x7b0>
   1ba3c:	cmp	sl, #48	; 0x30
   1ba40:	bne	1bb2c <close_stdout@@Base+0x8b0>
   1ba44:	add	r3, r5, ip
   1ba48:	mov	r0, ip
   1ba4c:	ldrb	sl, [r3, #1]!
   1ba50:	add	r0, r0, #1
   1ba54:	cmp	sl, #48	; 0x30
   1ba58:	beq	1ba4c <close_stdout@@Base+0x7d0>
   1ba5c:	sub	r3, r7, #48	; 0x30
   1ba60:	cmp	r3, #9
   1ba64:	bhi	1bb38 <close_stdout@@Base+0x8bc>
   1ba68:	sub	r3, sl, #48	; 0x30
   1ba6c:	cmp	r3, #9
   1ba70:	bhi	1b85c <close_stdout@@Base+0x5e0>
   1ba74:	add	r9, r5, r0
   1ba78:	add	r8, r4, r1
   1ba7c:	mov	r3, r1
   1ba80:	mov	fp, #0
   1ba84:	b	1ba98 <close_stdout@@Base+0x81c>
   1ba88:	ldrb	sl, [r9, #1]!
   1ba8c:	sub	ip, sl, #48	; 0x30
   1ba90:	cmp	ip, #9
   1ba94:	bhi	1b85c <close_stdout@@Base+0x5e0>
   1ba98:	cmp	fp, #0
   1ba9c:	add	r3, r3, #1
   1baa0:	rsbeq	fp, sl, r7
   1baa4:	ldrb	r7, [r8, #1]!
   1baa8:	rsb	ip, r1, r3
   1baac:	sub	sl, r7, #48	; 0x30
   1bab0:	add	ip, ip, r0
   1bab4:	cmp	sl, #9
   1bab8:	bls	1ba88 <close_stdout@@Base+0x80c>
   1babc:	ldrb	r1, [r5, ip]
   1bac0:	sub	r1, r1, #48	; 0x30
   1bac4:	cmp	r1, #9
   1bac8:	bls	1ba08 <close_stdout@@Base+0x78c>
   1bacc:	cmp	fp, #0
   1bad0:	beq	1b8fc <close_stdout@@Base+0x680>
   1bad4:	mov	r0, fp
   1bad8:	b	1b860 <close_stdout@@Base+0x5e4>
   1badc:	cmp	r1, sl
   1bae0:	ldr	r0, [sp, #4]
   1bae4:	rsbne	r0, sl, r1
   1bae8:	b	1b860 <close_stdout@@Base+0x5e4>
   1baec:	mov	r2, r6
   1baf0:	mov	r0, r4
   1baf4:	mov	r1, r5
   1baf8:	bl	1212c <strncmp@plt>
   1bafc:	cmp	r0, #0
   1bb00:	ldreq	r6, [sp, #12]
   1bb04:	movne	r2, r6
   1bb08:	ldreq	r2, [sp, #16]
   1bb0c:	rsbeq	r6, r4, r6
   1bb10:	rsbeq	r2, r5, r2
   1bb14:	b	1b8f4 <close_stdout@@Base+0x678>
   1bb18:	ldr	r2, [sp, #16]
   1bb1c:	cmp	r7, #0
   1bb20:	rsb	r2, r5, r2
   1bb24:	beq	1b8f4 <close_stdout@@Base+0x678>
   1bb28:	b	1b8ec <close_stdout@@Base+0x670>
   1bb2c:	mov	r0, ip
   1bb30:	b	1ba5c <close_stdout@@Base+0x7e0>
   1bb34:	bl	11d78 <__stack_chk_fail@plt>
   1bb38:	sub	sl, sl, #48	; 0x30
   1bb3c:	cmp	sl, #9
   1bb40:	bls	1ba08 <close_stdout@@Base+0x78c>
   1bb44:	mov	ip, r0
   1bb48:	mov	r3, r1
   1bb4c:	b	1b8fc <close_stdout@@Base+0x680>
   1bb50:	andeq	sp, r1, r0, lsl r8
   1bb54:	andeq	r0, r0, r0, ror #3
   1bb58:	ldr	r3, [pc, #108]	; 1bbcc <close_stdout@@Base+0x950>
   1bb5c:	mov	r1, r0
   1bb60:	ldr	r2, [pc, #104]	; 1bbd0 <close_stdout@@Base+0x954>
   1bb64:	add	r3, pc, r3
   1bb68:	push	{r4, r5, lr}
   1bb6c:	sub	sp, sp, #20
   1bb70:	ldr	r4, [r3, r2]
   1bb74:	mov	r5, r0
   1bb78:	mov	r0, #0
   1bb7c:	ldr	r3, [r4]
   1bb80:	str	r3, [sp, #12]
   1bb84:	bl	11cf4 <clock_gettime@plt>
   1bb88:	cmp	r0, #0
   1bb8c:	beq	1bbb0 <close_stdout@@Base+0x934>
   1bb90:	mov	r1, #0
   1bb94:	add	r0, sp, #4
   1bb98:	bl	11e68 <gettimeofday@plt>
   1bb9c:	ldr	r3, [sp, #8]
   1bba0:	mov	r1, #1000	; 0x3e8
   1bba4:	ldr	r2, [sp, #4]
   1bba8:	mul	r3, r1, r3
   1bbac:	stm	r5, {r2, r3}
   1bbb0:	ldr	r2, [sp, #12]
   1bbb4:	ldr	r3, [r4]
   1bbb8:	cmp	r2, r3
   1bbbc:	bne	1bbc8 <close_stdout@@Base+0x94c>
   1bbc0:	add	sp, sp, #20
   1bbc4:	pop	{r4, r5, pc}
   1bbc8:	bl	11d78 <__stack_chk_fail@plt>
   1bbcc:	muleq	r1, r4, r4
   1bbd0:	andeq	r0, r0, r0, ror #3
   1bbd4:	push	{r3, lr}
   1bbd8:	mov	r1, #0
   1bbdc:	bl	12078 <setlocale@plt>
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bc20 <close_stdout@@Base+0x9a4>
   1bbe8:	ldrb	r3, [r0]
   1bbec:	cmp	r3, #67	; 0x43
   1bbf0:	bne	1bc08 <close_stdout@@Base+0x98c>
   1bbf4:	ldrb	r3, [r0, #1]
   1bbf8:	cmp	r3, #0
   1bbfc:	bne	1bc08 <close_stdout@@Base+0x98c>
   1bc00:	mov	r0, r3
   1bc04:	pop	{r3, pc}
   1bc08:	ldr	r1, [pc, #24]	; 1bc28 <close_stdout@@Base+0x9ac>
   1bc0c:	add	r1, pc, r1
   1bc10:	bl	11c88 <strcmp@plt>
   1bc14:	adds	r0, r0, #0
   1bc18:	movne	r0, #1
   1bc1c:	pop	{r3, pc}
   1bc20:	mov	r0, #1
   1bc24:	pop	{r3, pc}
   1bc28:	andeq	fp, r0, r4, ror #8
   1bc2c:	andeq	r0, r0, r0
   1bc30:	cmp	r0, #9
   1bc34:	push	{r4, r5, r6, r7, r8, lr}
   1bc38:	bhi	1bccc <close_stdout@@Base+0xa50>
   1bc3c:	mov	r7, #11
   1bc40:	movw	r8, #43691	; 0xaaab
   1bc44:	movt	r8, #43690	; 0xaaaa
   1bc48:	cmp	r7, #9
   1bc4c:	bls	1bcc4 <close_stdout@@Base+0xa48>
   1bc50:	umull	r2, r3, r8, r7
   1bc54:	lsr	r3, r3, #1
   1bc58:	add	r3, r3, r3, lsl #1
   1bc5c:	cmp	r7, r3
   1bc60:	beq	1bcb0 <close_stdout@@Base+0xa34>
   1bc64:	mov	r6, #16
   1bc68:	mov	r5, #9
   1bc6c:	mov	r4, #3
   1bc70:	b	1bc80 <close_stdout@@Base+0xa04>
   1bc74:	bl	236d8 <close_stdout@@Base+0x845c>
   1bc78:	cmp	r1, #0
   1bc7c:	beq	1bcb0 <close_stdout@@Base+0xa34>
   1bc80:	add	r5, r5, r6
   1bc84:	add	r4, r4, #2
   1bc88:	cmp	r5, r7
   1bc8c:	mov	r0, r7
   1bc90:	add	r6, r6, #8
   1bc94:	mov	r1, r4
   1bc98:	bcc	1bc74 <close_stdout@@Base+0x9f8>
   1bc9c:	mov	r1, r4
   1bca0:	mov	r0, r7
   1bca4:	bl	236d8 <close_stdout@@Base+0x845c>
   1bca8:	cmp	r1, #0
   1bcac:	bne	1bcbc <close_stdout@@Base+0xa40>
   1bcb0:	add	r7, r7, #2
   1bcb4:	cmn	r7, #1
   1bcb8:	bne	1bc48 <close_stdout@@Base+0x9cc>
   1bcbc:	mov	r0, r7
   1bcc0:	pop	{r4, r5, r6, r7, r8, pc}
   1bcc4:	mov	r4, #3
   1bcc8:	b	1bc9c <close_stdout@@Base+0xa20>
   1bccc:	orr	r7, r0, #1
   1bcd0:	cmn	r7, #1
   1bcd4:	bne	1bc40 <close_stdout@@Base+0x9c4>
   1bcd8:	b	1bcbc <close_stdout@@Base+0xa40>
   1bcdc:	push	{r3, lr}
   1bce0:	ror	r0, r0, #3
   1bce4:	bl	236d8 <close_stdout@@Base+0x845c>
   1bce8:	mov	r0, r1
   1bcec:	pop	{r3, pc}
   1bcf0:	subs	r3, r1, r0
   1bcf4:	rsbs	r0, r3, #0
   1bcf8:	adcs	r0, r0, r3
   1bcfc:	bx	lr
   1bd00:	push	{r4, lr}
   1bd04:	mov	r4, r0
   1bd08:	ldr	r3, [r4, #24]
   1bd0c:	mov	r0, r1
   1bd10:	ldr	r1, [r4, #8]
   1bd14:	blx	r3
   1bd18:	ldr	r3, [r4, #8]
   1bd1c:	cmp	r0, r3
   1bd20:	bcs	1bd30 <close_stdout@@Base+0xab4>
   1bd24:	ldr	r3, [r4]
   1bd28:	add	r0, r3, r0, lsl #3
   1bd2c:	pop	{r4, pc}
   1bd30:	bl	12138 <abort@plt>
   1bd34:	push	{r4, r5, r6, r7, r8, lr}
   1bd38:	mov	r7, r2
   1bd3c:	mov	r8, r3
   1bd40:	mov	r6, r0
   1bd44:	mov	r5, r1
   1bd48:	bl	1bd00 <close_stdout@@Base+0xa84>
   1bd4c:	str	r0, [r7]
   1bd50:	mov	r4, r0
   1bd54:	ldr	r2, [r0]
   1bd58:	cmp	r2, #0
   1bd5c:	beq	1bdf0 <close_stdout@@Base+0xb74>
   1bd60:	cmp	r5, r2
   1bd64:	beq	1bd84 <close_stdout@@Base+0xb08>
   1bd68:	mov	r1, r2
   1bd6c:	ldr	r3, [r6, #28]
   1bd70:	mov	r0, r5
   1bd74:	blx	r3
   1bd78:	cmp	r0, #0
   1bd7c:	beq	1bde4 <close_stdout@@Base+0xb68>
   1bd80:	ldr	r2, [r4]
   1bd84:	cmp	r8, #0
   1bd88:	beq	1bdb4 <close_stdout@@Base+0xb38>
   1bd8c:	ldr	r3, [r4, #4]
   1bd90:	cmp	r3, #0
   1bd94:	streq	r3, [r4]
   1bd98:	ldmne	r3, {r0, r1}
   1bd9c:	movne	ip, #0
   1bda0:	stmne	r4, {r0, r1}
   1bda4:	strne	ip, [r3]
   1bda8:	ldrne	r1, [r6, #36]	; 0x24
   1bdac:	strne	r1, [r3, #4]
   1bdb0:	strne	r3, [r6, #36]	; 0x24
   1bdb4:	mov	r0, r2
   1bdb8:	pop	{r4, r5, r6, r7, r8, pc}
   1bdbc:	ldr	r2, [ip]
   1bdc0:	cmp	r2, r5
   1bdc4:	beq	1be04 <close_stdout@@Base+0xb88>
   1bdc8:	mov	r1, r2
   1bdcc:	mov	r0, r5
   1bdd0:	ldr	r2, [r6, #28]
   1bdd4:	blx	r2
   1bdd8:	cmp	r0, #0
   1bddc:	bne	1bdfc <close_stdout@@Base+0xb80>
   1bde0:	ldr	r4, [r4, #4]
   1bde4:	ldr	ip, [r4, #4]
   1bde8:	cmp	ip, #0
   1bdec:	bne	1bdbc <close_stdout@@Base+0xb40>
   1bdf0:	mov	r2, #0
   1bdf4:	mov	r0, r2
   1bdf8:	pop	{r4, r5, r6, r7, r8, pc}
   1bdfc:	ldr	ip, [r4, #4]
   1be00:	ldr	r2, [ip]
   1be04:	cmp	r8, #0
   1be08:	beq	1bdb4 <close_stdout@@Base+0xb38>
   1be0c:	ldr	r1, [ip, #4]
   1be10:	mov	r3, #0
   1be14:	mov	r0, r2
   1be18:	str	r1, [r4, #4]
   1be1c:	str	r3, [ip]
   1be20:	ldr	r3, [r6, #36]	; 0x24
   1be24:	str	r3, [ip, #4]
   1be28:	str	ip, [r6, #36]	; 0x24
   1be2c:	pop	{r4, r5, r6, r7, r8, pc}
   1be30:	ldr	r1, [pc, #176]	; 1bee8 <close_stdout@@Base+0xc6c>
   1be34:	mov	r2, r0
   1be38:	ldr	r3, [r0]
   1be3c:	add	r1, pc, r1
   1be40:	cmp	r3, r1
   1be44:	beq	1bed4 <close_stdout@@Base+0xc58>
   1be48:	vldr	s15, [r3, #8]
   1be4c:	vldr	s14, [pc, #136]	; 1bedc <close_stdout@@Base+0xc60>
   1be50:	vcmpe.f32	s15, s14
   1be54:	vmrs	APSR_nzcv, fpscr
   1be58:	ble	1bec0 <close_stdout@@Base+0xc44>
   1be5c:	vldr	s13, [pc, #124]	; 1bee0 <close_stdout@@Base+0xc64>
   1be60:	vcmpe.f32	s15, s13
   1be64:	vmrs	APSR_nzcv, fpscr
   1be68:	bpl	1bec0 <close_stdout@@Base+0xc44>
   1be6c:	vldr	s13, [pc, #112]	; 1bee4 <close_stdout@@Base+0xc68>
   1be70:	vldr	s12, [r3, #12]
   1be74:	vcmpe.f32	s12, s13
   1be78:	vmrs	APSR_nzcv, fpscr
   1be7c:	ble	1bec0 <close_stdout@@Base+0xc44>
   1be80:	vldr	s13, [r3]
   1be84:	vcmpe.f32	s13, #0.0
   1be88:	vmrs	APSR_nzcv, fpscr
   1be8c:	blt	1bec0 <close_stdout@@Base+0xc44>
   1be90:	vadd.f32	s14, s13, s14
   1be94:	vldr	s12, [r3, #4]
   1be98:	vcmpe.f32	s14, s12
   1be9c:	vmrs	APSR_nzcv, fpscr
   1bea0:	bpl	1bec0 <close_stdout@@Base+0xc44>
   1bea4:	vmov.f32	s13, #112	; 0x3f800000  1.0
   1bea8:	vcmpe.f32	s12, s13
   1beac:	vmrs	APSR_nzcv, fpscr
   1beb0:	bhi	1bec0 <close_stdout@@Base+0xc44>
   1beb4:	vcmpe.f32	s15, s14
   1beb8:	vmrs	APSR_nzcv, fpscr
   1bebc:	bgt	1bed4 <close_stdout@@Base+0xc58>
   1bec0:	ldr	r3, [pc, #36]	; 1beec <close_stdout@@Base+0xc70>
   1bec4:	mov	r0, #0
   1bec8:	add	r3, pc, r3
   1becc:	str	r3, [r2]
   1bed0:	bx	lr
   1bed4:	mov	r0, #1
   1bed8:	bx	lr
   1bedc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bee0:	svccc	0x00666666
   1bee4:	svccc	0x008ccccd
   1bee8:	andeq	fp, r0, ip, lsr r2
   1beec:			; <UNDEFINED> instruction: 0x0000b1b0
   1bef0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bef4:	mov	r8, r1
   1bef8:	ldr	r6, [r1]
   1befc:	mov	r5, r0
   1bf00:	ldr	r3, [r1, #4]
   1bf04:	mov	sl, r2
   1bf08:	cmp	r6, r3
   1bf0c:	addcc	r6, r6, #8
   1bf10:	movcc	r9, #0
   1bf14:	bcs	1bfbc <close_stdout@@Base+0xd40>
   1bf18:	ldr	fp, [r6, #-8]
   1bf1c:	mov	r7, r6
   1bf20:	cmp	fp, #0
   1bf24:	beq	1bfb0 <close_stdout@@Base+0xd34>
   1bf28:	ldr	r4, [r6, #-4]
   1bf2c:	cmp	r4, #0
   1bf30:	bne	1bf50 <close_stdout@@Base+0xcd4>
   1bf34:	b	1bfa0 <close_stdout@@Base+0xd24>
   1bf38:	ldr	r2, [r0, #4]
   1bf3c:	cmp	r3, #0
   1bf40:	str	r2, [r4, #4]
   1bf44:	str	r4, [r0, #4]
   1bf48:	mov	r4, r3
   1bf4c:	beq	1bf9c <close_stdout@@Base+0xd20>
   1bf50:	ldr	fp, [r4]
   1bf54:	mov	r0, r5
   1bf58:	mov	r1, fp
   1bf5c:	bl	1bd00 <close_stdout@@Base+0xa84>
   1bf60:	ldr	r3, [r4, #4]
   1bf64:	ldr	r2, [r0]
   1bf68:	cmp	r2, #0
   1bf6c:	bne	1bf38 <close_stdout@@Base+0xcbc>
   1bf70:	str	fp, [r0]
   1bf74:	cmp	r3, #0
   1bf78:	ldr	r1, [r5, #12]
   1bf7c:	add	r1, r1, #1
   1bf80:	str	r1, [r5, #12]
   1bf84:	str	r2, [r4]
   1bf88:	ldr	r2, [r5, #36]	; 0x24
   1bf8c:	str	r2, [r4, #4]
   1bf90:	str	r4, [r5, #36]	; 0x24
   1bf94:	mov	r4, r3
   1bf98:	bne	1bf50 <close_stdout@@Base+0xcd4>
   1bf9c:	ldr	fp, [r6, #-8]
   1bfa0:	cmp	sl, #0
   1bfa4:	str	r9, [r6, #-4]
   1bfa8:	beq	1bfc4 <close_stdout@@Base+0xd48>
   1bfac:	ldr	r3, [r8, #4]
   1bfb0:	cmp	r3, r7
   1bfb4:	add	r6, r6, #8
   1bfb8:	bhi	1bf18 <close_stdout@@Base+0xc9c>
   1bfbc:	mov	r0, #1
   1bfc0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfc4:	mov	r0, r5
   1bfc8:	mov	r1, fp
   1bfcc:	bl	1bd00 <close_stdout@@Base+0xa84>
   1bfd0:	ldr	r3, [r0]
   1bfd4:	mov	r4, r0
   1bfd8:	cmp	r3, #0
   1bfdc:	beq	1c028 <close_stdout@@Base+0xdac>
   1bfe0:	ldr	r0, [r5, #36]	; 0x24
   1bfe4:	cmp	r0, #0
   1bfe8:	beq	1c03c <close_stdout@@Base+0xdc0>
   1bfec:	ldr	r2, [r0, #4]
   1bff0:	str	r2, [r5, #36]	; 0x24
   1bff4:	str	fp, [r0]
   1bff8:	ldr	r2, [r4, #4]
   1bffc:	str	r2, [r0, #4]
   1c000:	str	r0, [r4, #4]
   1c004:	str	r9, [r6, #-8]
   1c008:	add	r6, r6, #8
   1c00c:	ldr	r3, [r8, #4]
   1c010:	ldr	r2, [r8, #12]
   1c014:	cmp	r3, r7
   1c018:	sub	r2, r2, #1
   1c01c:	str	r2, [r8, #12]
   1c020:	bhi	1bf18 <close_stdout@@Base+0xc9c>
   1c024:	b	1bfbc <close_stdout@@Base+0xd40>
   1c028:	str	fp, [r0]
   1c02c:	ldr	r3, [r5, #12]
   1c030:	add	r3, r3, #1
   1c034:	str	r3, [r5, #12]
   1c038:	b	1c004 <close_stdout@@Base+0xd88>
   1c03c:	mov	r0, #8
   1c040:	bl	11eec <malloc@plt>
   1c044:	cmp	r0, #0
   1c048:	bne	1bff4 <close_stdout@@Base+0xd78>
   1c04c:	mov	r0, sl
   1c050:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c054:	ldr	r0, [r0, #8]
   1c058:	bx	lr
   1c05c:	ldr	r0, [r0, #12]
   1c060:	bx	lr
   1c064:	ldr	r0, [r0, #16]
   1c068:	bx	lr
   1c06c:	ldr	r3, [r0]
   1c070:	ldr	r2, [r0, #4]
   1c074:	cmp	r3, r2
   1c078:	bcs	1c0dc <close_stdout@@Base+0xe60>
   1c07c:	add	r1, r3, #8
   1c080:	add	r2, r2, #7
   1c084:	rsb	r2, r1, r2
   1c088:	add	r3, r3, #16
   1c08c:	bic	r2, r2, #7
   1c090:	mov	r0, #0
   1c094:	add	ip, r3, r2
   1c098:	ldr	r3, [r1, #-8]
   1c09c:	cmp	r3, #0
   1c0a0:	beq	1c0cc <close_stdout@@Base+0xe50>
   1c0a4:	ldr	r3, [r1, #-4]
   1c0a8:	mov	r2, #1
   1c0ac:	cmp	r3, #0
   1c0b0:	beq	1c0c4 <close_stdout@@Base+0xe48>
   1c0b4:	ldr	r3, [r3, #4]
   1c0b8:	add	r2, r2, #1
   1c0bc:	cmp	r3, #0
   1c0c0:	bne	1c0b4 <close_stdout@@Base+0xe38>
   1c0c4:	cmp	r0, r2
   1c0c8:	movcc	r0, r2
   1c0cc:	add	r1, r1, #8
   1c0d0:	cmp	r1, ip
   1c0d4:	bne	1c098 <close_stdout@@Base+0xe1c>
   1c0d8:	bx	lr
   1c0dc:	mov	r0, #0
   1c0e0:	bx	lr
   1c0e4:	push	{r4}		; (str r4, [sp, #-4]!)
   1c0e8:	ldr	r3, [r0]
   1c0ec:	ldr	r2, [r0, #4]
   1c0f0:	cmp	r3, r2
   1c0f4:	bcs	1c184 <close_stdout@@Base+0xf08>
   1c0f8:	add	r2, r2, #7
   1c0fc:	add	r1, r3, #8
   1c100:	rsb	ip, r1, r2
   1c104:	add	r3, r3, #16
   1c108:	bic	ip, ip, #7
   1c10c:	mov	r2, #0
   1c110:	add	r4, r3, ip
   1c114:	mov	ip, r2
   1c118:	ldr	r3, [r1, #-8]
   1c11c:	cmp	r3, #0
   1c120:	beq	1c148 <close_stdout@@Base+0xecc>
   1c124:	ldr	r3, [r1, #-4]
   1c128:	add	ip, ip, #1
   1c12c:	add	r2, r2, #1
   1c130:	cmp	r3, #0
   1c134:	beq	1c148 <close_stdout@@Base+0xecc>
   1c138:	ldr	r3, [r3, #4]
   1c13c:	add	r2, r2, #1
   1c140:	cmp	r3, #0
   1c144:	bne	1c138 <close_stdout@@Base+0xebc>
   1c148:	add	r1, r1, #8
   1c14c:	cmp	r1, r4
   1c150:	bne	1c118 <close_stdout@@Base+0xe9c>
   1c154:	ldr	r3, [r0, #12]
   1c158:	cmp	r3, ip
   1c15c:	movne	r0, #0
   1c160:	beq	1c16c <close_stdout@@Base+0xef0>
   1c164:	pop	{r4}		; (ldr r4, [sp], #4)
   1c168:	bx	lr
   1c16c:	ldr	r0, [r0, #16]
   1c170:	pop	{r4}		; (ldr r4, [sp], #4)
   1c174:	subs	r3, r0, r2
   1c178:	rsbs	r0, r3, #0
   1c17c:	adcs	r0, r0, r3
   1c180:	bx	lr
   1c184:	mov	r2, #0
   1c188:	mov	ip, r2
   1c18c:	b	1c154 <close_stdout@@Base+0xed8>
   1c190:	push	{r4, r5, r6, r7, r8, lr}
   1c194:	sub	sp, sp, #8
   1c198:	mov	r4, r1
   1c19c:	mov	r5, r0
   1c1a0:	bl	1c064 <close_stdout@@Base+0xde8>
   1c1a4:	mov	r8, r0
   1c1a8:	mov	r0, r5
   1c1ac:	bl	1c054 <close_stdout@@Base+0xdd8>
   1c1b0:	mov	r6, r0
   1c1b4:	mov	r0, r5
   1c1b8:	bl	1c05c <close_stdout@@Base+0xde0>
   1c1bc:	mov	r7, r0
   1c1c0:	mov	r0, r5
   1c1c4:	bl	1c06c <close_stdout@@Base+0xdf0>
   1c1c8:	ldr	r2, [pc, #144]	; 1c260 <close_stdout@@Base+0xfe4>
   1c1cc:	mov	r3, r8
   1c1d0:	mov	r1, #1
   1c1d4:	add	r2, pc, r2
   1c1d8:	mov	r5, r0
   1c1dc:	mov	r0, r4
   1c1e0:	bl	1203c <__fprintf_chk@plt>
   1c1e4:	ldr	r2, [pc, #120]	; 1c264 <close_stdout@@Base+0xfe8>
   1c1e8:	mov	r3, r6
   1c1ec:	mov	r0, r4
   1c1f0:	mov	r1, #1
   1c1f4:	add	r2, pc, r2
   1c1f8:	bl	1203c <__fprintf_chk@plt>
   1c1fc:	vmov	s15, r7
   1c200:	vldr	d5, [pc, #80]	; 1c258 <close_stdout@@Base+0xfdc>
   1c204:	ldr	r2, [pc, #92]	; 1c268 <close_stdout@@Base+0xfec>
   1c208:	vcvt.f64.u32	d4, s15
   1c20c:	mov	r3, r7
   1c210:	vmov	s15, r6
   1c214:	mov	r0, r4
   1c218:	mov	r1, #1
   1c21c:	add	r2, pc, r2
   1c220:	vmul.f64	d5, d4, d5
   1c224:	vcvt.f64.u32	d6, s15
   1c228:	vdiv.f64	d7, d5, d6
   1c22c:	vstr	d7, [sp]
   1c230:	bl	1203c <__fprintf_chk@plt>
   1c234:	ldr	r2, [pc, #48]	; 1c26c <close_stdout@@Base+0xff0>
   1c238:	mov	r0, r4
   1c23c:	mov	r3, r5
   1c240:	mov	r1, #1
   1c244:	add	r2, pc, r2
   1c248:	add	sp, sp, #8
   1c24c:	pop	{r4, r5, r6, r7, r8, lr}
   1c250:	b	1203c <__fprintf_chk@plt>
   1c254:	nop	{0}
   1c258:	andeq	r0, r0, r0
   1c25c:	subsmi	r0, r9, r0
   1c260:			; <UNDEFINED> instruction: 0x0000aeb8
   1c264:			; <UNDEFINED> instruction: 0x0000aeb0
   1c268:	andeq	sl, r0, r0, lsr #29
   1c26c:	muleq	r0, ip, lr
   1c270:	push	{r4, r5, r6, lr}
   1c274:	mov	r6, r0
   1c278:	mov	r5, r1
   1c27c:	bl	1bd00 <close_stdout@@Base+0xa84>
   1c280:	ldr	r3, [r0]
   1c284:	mov	r4, r0
   1c288:	cmp	r3, #0
   1c28c:	bne	1c298 <close_stdout@@Base+0x101c>
   1c290:	b	1c2c4 <close_stdout@@Base+0x1048>
   1c294:	ldr	r3, [r4]
   1c298:	cmp	r5, r3
   1c29c:	mov	r1, r3
   1c2a0:	mov	r0, r5
   1c2a4:	beq	1c2d0 <close_stdout@@Base+0x1054>
   1c2a8:	ldr	r3, [r6, #28]
   1c2ac:	blx	r3
   1c2b0:	cmp	r0, #0
   1c2b4:	bne	1c2cc <close_stdout@@Base+0x1050>
   1c2b8:	ldr	r4, [r4, #4]
   1c2bc:	cmp	r4, #0
   1c2c0:	bne	1c294 <close_stdout@@Base+0x1018>
   1c2c4:	mov	r0, #0
   1c2c8:	pop	{r4, r5, r6, pc}
   1c2cc:	ldr	r3, [r4]
   1c2d0:	mov	r0, r3
   1c2d4:	pop	{r4, r5, r6, pc}
   1c2d8:	push	{r3, lr}
   1c2dc:	ldr	r3, [r0, #16]
   1c2e0:	cmp	r3, #0
   1c2e4:	beq	1c324 <close_stdout@@Base+0x10a8>
   1c2e8:	ldr	r3, [r0]
   1c2ec:	ldr	r2, [r0, #4]
   1c2f0:	cmp	r3, r2
   1c2f4:	bcs	1c320 <close_stdout@@Base+0x10a4>
   1c2f8:	ldr	r0, [r3]
   1c2fc:	cmp	r0, #0
   1c300:	beq	1c314 <close_stdout@@Base+0x1098>
   1c304:	b	1c32c <close_stdout@@Base+0x10b0>
   1c308:	ldr	r0, [r3]
   1c30c:	cmp	r0, #0
   1c310:	popne	{r3, pc}
   1c314:	add	r3, r3, #8
   1c318:	cmp	r3, r2
   1c31c:	bcc	1c308 <close_stdout@@Base+0x108c>
   1c320:	bl	12138 <abort@plt>
   1c324:	mov	r0, r3
   1c328:	pop	{r3, pc}
   1c32c:	pop	{r3, pc}
   1c330:	push	{r3, r4, r5, lr}
   1c334:	mov	r5, r0
   1c338:	mov	r4, r1
   1c33c:	bl	1bd00 <close_stdout@@Base+0xa84>
   1c340:	mov	r2, r0
   1c344:	mov	r3, r0
   1c348:	b	1c354 <close_stdout@@Base+0x10d8>
   1c34c:	cmp	r3, #0
   1c350:	beq	1c36c <close_stdout@@Base+0x10f0>
   1c354:	ldr	ip, [r3]
   1c358:	ldr	r3, [r3, #4]
   1c35c:	cmp	ip, r4
   1c360:	bne	1c34c <close_stdout@@Base+0x10d0>
   1c364:	cmp	r3, #0
   1c368:	bne	1c394 <close_stdout@@Base+0x1118>
   1c36c:	ldr	r3, [r5, #4]
   1c370:	b	1c380 <close_stdout@@Base+0x1104>
   1c374:	ldr	r0, [r2]
   1c378:	cmp	r0, #0
   1c37c:	popne	{r3, r4, r5, pc}
   1c380:	add	r2, r2, #8
   1c384:	cmp	r2, r3
   1c388:	bcc	1c374 <close_stdout@@Base+0x10f8>
   1c38c:	mov	r0, #0
   1c390:	pop	{r3, r4, r5, pc}
   1c394:	ldr	r0, [r3]
   1c398:	pop	{r3, r4, r5, pc}
   1c39c:	push	{r4, r5, r6, r7}
   1c3a0:	mov	r6, r0
   1c3a4:	ldm	r0, {r5, ip}
   1c3a8:	cmp	ip, r5
   1c3ac:	bls	1c430 <close_stdout@@Base+0x11b4>
   1c3b0:	add	r5, r5, #8
   1c3b4:	mov	r0, #0
   1c3b8:	ldr	r3, [r5, #-8]
   1c3bc:	mov	r7, r5
   1c3c0:	cmp	r3, #0
   1c3c4:	beq	1c410 <close_stdout@@Base+0x1194>
   1c3c8:	cmp	r2, r0
   1c3cc:	bls	1c41c <close_stdout@@Base+0x11a0>
   1c3d0:	str	r3, [r1, r0, lsl #2]
   1c3d4:	add	r4, r0, #1
   1c3d8:	ldr	r3, [r5, #-4]
   1c3dc:	add	ip, r1, r0, lsl #2
   1c3e0:	cmp	r3, #0
   1c3e4:	beq	1c424 <close_stdout@@Base+0x11a8>
   1c3e8:	mov	r0, r4
   1c3ec:	cmp	r0, r2
   1c3f0:	beq	1c41c <close_stdout@@Base+0x11a0>
   1c3f4:	ldr	r4, [r3]
   1c3f8:	add	r0, r0, #1
   1c3fc:	str	r4, [ip, #4]!
   1c400:	ldr	r3, [r3, #4]
   1c404:	cmp	r3, #0
   1c408:	bne	1c3ec <close_stdout@@Base+0x1170>
   1c40c:	ldr	ip, [r6, #4]
   1c410:	cmp	ip, r7
   1c414:	add	r5, r5, #8
   1c418:	bhi	1c3b8 <close_stdout@@Base+0x113c>
   1c41c:	pop	{r4, r5, r6, r7}
   1c420:	bx	lr
   1c424:	ldr	ip, [r6, #4]
   1c428:	mov	r0, r4
   1c42c:	b	1c410 <close_stdout@@Base+0x1194>
   1c430:	mov	r0, #0
   1c434:	b	1c41c <close_stdout@@Base+0x11a0>
   1c438:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1c43c:	mov	r7, r2
   1c440:	ldr	r8, [r0]
   1c444:	mov	r9, r0
   1c448:	ldr	r2, [r0, #4]
   1c44c:	mov	r6, r1
   1c450:	mov	r5, #0
   1c454:	cmp	r2, r8
   1c458:	bls	1c4a8 <close_stdout@@Base+0x122c>
   1c45c:	ldr	r3, [r8]
   1c460:	cmp	r3, #0
   1c464:	beq	1c49c <close_stdout@@Base+0x1220>
   1c468:	mov	r0, r3
   1c46c:	mov	r4, r8
   1c470:	b	1c478 <close_stdout@@Base+0x11fc>
   1c474:	ldr	r0, [r4]
   1c478:	mov	r1, r7
   1c47c:	blx	r6
   1c480:	cmp	r0, #0
   1c484:	beq	1c4a8 <close_stdout@@Base+0x122c>
   1c488:	ldr	r4, [r4, #4]
   1c48c:	add	r5, r5, #1
   1c490:	cmp	r4, #0
   1c494:	bne	1c474 <close_stdout@@Base+0x11f8>
   1c498:	ldr	r2, [r9, #4]
   1c49c:	add	r8, r8, #8
   1c4a0:	cmp	r2, r8
   1c4a4:	bhi	1c45c <close_stdout@@Base+0x11e0>
   1c4a8:	mov	r0, r5
   1c4ac:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1c4b0:	push	{r3, r4, r5, lr}
   1c4b4:	mov	r5, r1
   1c4b8:	ldrb	r3, [r0]
   1c4bc:	cmp	r3, #0
   1c4c0:	beq	1c4f0 <close_stdout@@Base+0x1274>
   1c4c4:	mov	r4, r0
   1c4c8:	mov	r1, #0
   1c4cc:	rsb	r0, r1, r1, lsl #5
   1c4d0:	mov	r1, r5
   1c4d4:	add	r0, r3, r0
   1c4d8:	bl	236d8 <close_stdout@@Base+0x845c>
   1c4dc:	ldrb	r3, [r4, #1]!
   1c4e0:	cmp	r3, #0
   1c4e4:	bne	1c4cc <close_stdout@@Base+0x1250>
   1c4e8:	mov	r0, r1
   1c4ec:	pop	{r3, r4, r5, pc}
   1c4f0:	mov	r1, r3
   1c4f4:	b	1c4e8 <close_stdout@@Base+0x126c>
   1c4f8:	push	{r4}		; (str r4, [sp, #-4]!)
   1c4fc:	mov	ip, r0
   1c500:	ldr	r4, [pc, #24]	; 1c520 <close_stdout@@Base+0x12a4>
   1c504:	add	r4, pc, r4
   1c508:	ldm	r4!, {r0, r1, r2, r3}
   1c50c:	ldr	r4, [r4]
   1c510:	stmia	ip!, {r0, r1, r2, r3}
   1c514:	str	r4, [ip]
   1c518:	pop	{r4}		; (ldr r4, [sp], #4)
   1c51c:	bx	lr
   1c520:	andeq	sl, r0, r4, ror fp
   1c524:	push	{r4, r5, r6, r7, r8, lr}
   1c528:	subs	r8, r2, #0
   1c52c:	mov	r7, r0
   1c530:	mov	r5, r1
   1c534:	mov	r6, r3
   1c538:	beq	1c62c <close_stdout@@Base+0x13b0>
   1c53c:	cmp	r6, #0
   1c540:	beq	1c620 <close_stdout@@Base+0x13a4>
   1c544:	mov	r0, #40	; 0x28
   1c548:	bl	11eec <malloc@plt>
   1c54c:	subs	r4, r0, #0
   1c550:	beq	1c644 <close_stdout@@Base+0x13c8>
   1c554:	cmp	r5, #0
   1c558:	beq	1c638 <close_stdout@@Base+0x13bc>
   1c55c:	mov	r0, r4
   1c560:	str	r5, [r0, #20]!
   1c564:	bl	1be30 <close_stdout@@Base+0xbb4>
   1c568:	cmp	r0, #0
   1c56c:	beq	1c610 <close_stdout@@Base+0x1394>
   1c570:	ldrb	r3, [r5, #16]
   1c574:	vldr	s15, [r5, #8]
   1c578:	cmp	r3, #0
   1c57c:	bne	1c5a4 <close_stdout@@Base+0x1328>
   1c580:	vmov	s14, r7
   1c584:	vcvt.f32.u32	s13, s14
   1c588:	vldr	s14, [pc, #188]	; 1c64c <close_stdout@@Base+0x13d0>
   1c58c:	vdiv.f32	s15, s13, s15
   1c590:	vcmpe.f32	s15, s14
   1c594:	vmrs	APSR_nzcv, fpscr
   1c598:	bge	1c608 <close_stdout@@Base+0x138c>
   1c59c:	vcvt.u32.f32	s15, s15
   1c5a0:	vmov	r7, s15
   1c5a4:	mov	r0, r7
   1c5a8:	bl	1bc30 <close_stdout@@Base+0x9b4>
   1c5ac:	cmn	r0, #-1073741823	; 0xc0000001
   1c5b0:	mov	r5, r0
   1c5b4:	bhi	1c608 <close_stdout@@Base+0x138c>
   1c5b8:	cmp	r0, #0
   1c5bc:	str	r0, [r4, #8]
   1c5c0:	beq	1c610 <close_stdout@@Base+0x1394>
   1c5c4:	mov	r1, #8
   1c5c8:	bl	11c40 <calloc@plt>
   1c5cc:	cmp	r0, #0
   1c5d0:	str	r0, [r4]
   1c5d4:	beq	1c610 <close_stdout@@Base+0x1394>
   1c5d8:	ldr	r3, [sp, #24]
   1c5dc:	mov	r2, #0
   1c5e0:	add	r5, r0, r5, lsl #3
   1c5e4:	str	r8, [r4, #24]
   1c5e8:	str	r5, [r4, #4]
   1c5ec:	mov	r0, r4
   1c5f0:	str	r6, [r4, #28]
   1c5f4:	str	r3, [r4, #32]
   1c5f8:	str	r2, [r4, #12]
   1c5fc:	str	r2, [r4, #16]
   1c600:	str	r2, [r4, #36]	; 0x24
   1c604:	pop	{r4, r5, r6, r7, r8, pc}
   1c608:	mov	r3, #0
   1c60c:	str	r3, [r4, #8]
   1c610:	mov	r0, r4
   1c614:	bl	11ce8 <free@plt>
   1c618:	mov	r0, #0
   1c61c:	pop	{r4, r5, r6, r7, r8, pc}
   1c620:	ldr	r6, [pc, #40]	; 1c650 <close_stdout@@Base+0x13d4>
   1c624:	add	r6, pc, r6
   1c628:	b	1c544 <close_stdout@@Base+0x12c8>
   1c62c:	ldr	r8, [pc, #32]	; 1c654 <close_stdout@@Base+0x13d8>
   1c630:	add	r8, pc, r8
   1c634:	b	1c53c <close_stdout@@Base+0x12c0>
   1c638:	ldr	r5, [pc, #24]	; 1c658 <close_stdout@@Base+0x13dc>
   1c63c:	add	r5, pc, r5
   1c640:	b	1c55c <close_stdout@@Base+0x12e0>
   1c644:	mov	r0, r4
   1c648:	pop	{r4, r5, r6, r7, r8, pc}
   1c64c:	svcmi	0x00800000
   1c650:			; <UNDEFINED> instruction: 0xfffff6c4
   1c654:			; <UNDEFINED> instruction: 0xfffff6a4
   1c658:	andeq	sl, r0, ip, lsr sl
   1c65c:	push	{r4, r5, r6, r7, r8, lr}
   1c660:	mov	r5, r0
   1c664:	ldr	r7, [r0]
   1c668:	ldr	r3, [r0, #4]
   1c66c:	cmp	r7, r3
   1c670:	addcc	r7, r7, #8
   1c674:	movcc	r6, #0
   1c678:	bcs	1c6f8 <close_stdout@@Base+0x147c>
   1c67c:	ldr	r2, [r7, #-8]
   1c680:	mov	r8, r7
   1c684:	cmp	r2, #0
   1c688:	beq	1c6ec <close_stdout@@Base+0x1470>
   1c68c:	ldr	r4, [r7, #-4]
   1c690:	cmp	r4, #0
   1c694:	beq	1c6cc <close_stdout@@Base+0x1450>
   1c698:	ldr	r3, [r5, #32]
   1c69c:	cmp	r3, #0
   1c6a0:	beq	1c6ac <close_stdout@@Base+0x1430>
   1c6a4:	ldr	r0, [r4]
   1c6a8:	blx	r3
   1c6ac:	ldr	r3, [r4, #4]
   1c6b0:	str	r6, [r4]
   1c6b4:	ldr	r2, [r5, #36]	; 0x24
   1c6b8:	cmp	r3, #0
   1c6bc:	str	r2, [r4, #4]
   1c6c0:	str	r4, [r5, #36]	; 0x24
   1c6c4:	mov	r4, r3
   1c6c8:	bne	1c698 <close_stdout@@Base+0x141c>
   1c6cc:	ldr	r3, [r5, #32]
   1c6d0:	cmp	r3, #0
   1c6d4:	beq	1c6e0 <close_stdout@@Base+0x1464>
   1c6d8:	ldr	r0, [r7, #-8]
   1c6dc:	blx	r3
   1c6e0:	str	r6, [r7, #-8]
   1c6e4:	str	r6, [r7, #-4]
   1c6e8:	ldr	r3, [r5, #4]
   1c6ec:	cmp	r3, r8
   1c6f0:	add	r7, r7, #8
   1c6f4:	bhi	1c67c <close_stdout@@Base+0x1400>
   1c6f8:	mov	r3, #0
   1c6fc:	str	r3, [r5, #12]
   1c700:	str	r3, [r5, #16]
   1c704:	pop	{r4, r5, r6, r7, r8, pc}
   1c708:	push	{r3, r4, r5, r6, r7, lr}
   1c70c:	mov	r5, r0
   1c710:	ldr	r3, [r0, #32]
   1c714:	cmp	r3, #0
   1c718:	beq	1c728 <close_stdout@@Base+0x14ac>
   1c71c:	ldr	r3, [r0, #16]
   1c720:	cmp	r3, #0
   1c724:	bne	1c7a4 <close_stdout@@Base+0x1528>
   1c728:	ldr	r3, [r5, #4]
   1c72c:	ldr	r6, [r5]
   1c730:	cmp	r6, r3
   1c734:	bcs	1c770 <close_stdout@@Base+0x14f4>
   1c738:	add	r6, r6, #8
   1c73c:	ldr	r0, [r6, #-4]
   1c740:	mov	r7, r6
   1c744:	cmp	r0, #0
   1c748:	beq	1c764 <close_stdout@@Base+0x14e8>
   1c74c:	ldr	r4, [r0, #4]
   1c750:	bl	11ce8 <free@plt>
   1c754:	cmp	r4, #0
   1c758:	mov	r0, r4
   1c75c:	bne	1c74c <close_stdout@@Base+0x14d0>
   1c760:	ldr	r3, [r5, #4]
   1c764:	cmp	r7, r3
   1c768:	add	r6, r6, #8
   1c76c:	bcc	1c73c <close_stdout@@Base+0x14c0>
   1c770:	ldr	r0, [r5, #36]	; 0x24
   1c774:	cmp	r0, #0
   1c778:	beq	1c790 <close_stdout@@Base+0x1514>
   1c77c:	ldr	r4, [r0, #4]
   1c780:	bl	11ce8 <free@plt>
   1c784:	cmp	r4, #0
   1c788:	mov	r0, r4
   1c78c:	bne	1c77c <close_stdout@@Base+0x1500>
   1c790:	ldr	r0, [r5]
   1c794:	bl	11ce8 <free@plt>
   1c798:	mov	r0, r5
   1c79c:	pop	{r3, r4, r5, r6, r7, lr}
   1c7a0:	b	11ce8 <free@plt>
   1c7a4:	ldr	r6, [r0]
   1c7a8:	ldr	r3, [r0, #4]
   1c7ac:	cmp	r6, r3
   1c7b0:	bcs	1c770 <close_stdout@@Base+0x14f4>
   1c7b4:	ldr	r0, [r6]
   1c7b8:	cmp	r0, #0
   1c7bc:	movne	r4, r6
   1c7c0:	bne	1c7cc <close_stdout@@Base+0x1550>
   1c7c4:	b	1c7e4 <close_stdout@@Base+0x1568>
   1c7c8:	ldr	r0, [r4]
   1c7cc:	ldr	r3, [r5, #32]
   1c7d0:	blx	r3
   1c7d4:	ldr	r4, [r4, #4]
   1c7d8:	cmp	r4, #0
   1c7dc:	bne	1c7c8 <close_stdout@@Base+0x154c>
   1c7e0:	ldr	r3, [r5, #4]
   1c7e4:	add	r6, r6, #8
   1c7e8:	cmp	r3, r6
   1c7ec:	bhi	1c7b4 <close_stdout@@Base+0x1538>
   1c7f0:	b	1c72c <close_stdout@@Base+0x14b0>
   1c7f4:	ldr	r3, [pc, #392]	; 1c984 <close_stdout@@Base+0x1708>
   1c7f8:	ldr	r2, [pc, #392]	; 1c988 <close_stdout@@Base+0x170c>
   1c7fc:	add	r3, pc, r3
   1c800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c804:	sub	sp, sp, #52	; 0x34
   1c808:	ldr	r5, [r0, #20]
   1c80c:	mov	r4, r0
   1c810:	ldr	r6, [r3, r2]
   1c814:	vldr	s15, [r5, #8]
   1c818:	ldrb	r2, [r5, #16]
   1c81c:	ldr	r3, [r6]
   1c820:	cmp	r2, #0
   1c824:	str	r3, [sp, #44]	; 0x2c
   1c828:	bne	1c850 <close_stdout@@Base+0x15d4>
   1c82c:	vmov	s14, r1
   1c830:	vcvt.f32.u32	s13, s14
   1c834:	vldr	s14, [pc, #324]	; 1c980 <close_stdout@@Base+0x1704>
   1c838:	vdiv.f32	s15, s13, s15
   1c83c:	vcmpe.f32	s15, s14
   1c840:	vmrs	APSR_nzcv, fpscr
   1c844:	bge	1c948 <close_stdout@@Base+0x16cc>
   1c848:	vcvt.u32.f32	s15, s15
   1c84c:	vmov	r1, s15
   1c850:	mov	r0, r1
   1c854:	bl	1bc30 <close_stdout@@Base+0x9b4>
   1c858:	sub	r3, r0, #1
   1c85c:	mov	r7, r0
   1c860:	cmn	r3, #-1073741822	; 0xc0000002
   1c864:	bhi	1c948 <close_stdout@@Base+0x16cc>
   1c868:	ldr	r3, [r4, #8]
   1c86c:	cmp	r3, r0
   1c870:	beq	1c928 <close_stdout@@Base+0x16ac>
   1c874:	mov	r1, #8
   1c878:	bl	11c40 <calloc@plt>
   1c87c:	cmp	r0, #0
   1c880:	mov	r3, r0
   1c884:	str	r0, [sp, #4]
   1c888:	beq	1c948 <close_stdout@@Base+0x16cc>
   1c88c:	ldr	fp, [r4, #24]
   1c890:	add	r8, sp, #4
   1c894:	ldr	sl, [r4, #28]
   1c898:	mov	ip, #0
   1c89c:	ldr	r9, [r4, #32]
   1c8a0:	mov	r0, r8
   1c8a4:	ldr	lr, [r4, #36]	; 0x24
   1c8a8:	mov	r2, ip
   1c8ac:	mov	r1, r4
   1c8b0:	add	r3, r3, r7, lsl #3
   1c8b4:	str	r5, [sp, #24]
   1c8b8:	str	r7, [sp, #12]
   1c8bc:	str	r3, [sp, #8]
   1c8c0:	str	fp, [sp, #28]
   1c8c4:	str	sl, [sp, #32]
   1c8c8:	str	r9, [sp, #36]	; 0x24
   1c8cc:	str	lr, [sp, #40]	; 0x28
   1c8d0:	str	ip, [sp, #16]
   1c8d4:	str	ip, [sp, #20]
   1c8d8:	bl	1bef0 <close_stdout@@Base+0xc74>
   1c8dc:	subs	r5, r0, #0
   1c8e0:	bne	1c950 <close_stdout@@Base+0x16d4>
   1c8e4:	ldr	r3, [sp, #40]	; 0x28
   1c8e8:	mov	r0, r4
   1c8ec:	mov	r1, r8
   1c8f0:	mov	r2, #1
   1c8f4:	str	r3, [r4, #36]	; 0x24
   1c8f8:	bl	1bef0 <close_stdout@@Base+0xc74>
   1c8fc:	cmp	r0, #0
   1c900:	beq	1c97c <close_stdout@@Base+0x1700>
   1c904:	mov	r0, r4
   1c908:	mov	r1, r8
   1c90c:	mov	r2, r5
   1c910:	bl	1bef0 <close_stdout@@Base+0xc74>
   1c914:	cmp	r0, #0
   1c918:	beq	1c97c <close_stdout@@Base+0x1700>
   1c91c:	ldr	r0, [sp, #4]
   1c920:	bl	11ce8 <free@plt>
   1c924:	b	1c92c <close_stdout@@Base+0x16b0>
   1c928:	mov	r5, #1
   1c92c:	ldr	r1, [sp, #44]	; 0x2c
   1c930:	mov	r0, r5
   1c934:	ldr	r3, [r6]
   1c938:	cmp	r1, r3
   1c93c:	bne	1c978 <close_stdout@@Base+0x16fc>
   1c940:	add	sp, sp, #52	; 0x34
   1c944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c948:	mov	r5, #0
   1c94c:	b	1c92c <close_stdout@@Base+0x16b0>
   1c950:	ldr	r0, [r4]
   1c954:	bl	11ce8 <free@plt>
   1c958:	add	r0, sp, #8
   1c95c:	ldr	ip, [sp, #4]
   1c960:	ldm	r0, {r0, r1, r2}
   1c964:	ldr	r3, [sp, #40]	; 0x28
   1c968:	str	ip, [r4]
   1c96c:	stmib	r4, {r0, r1, r2}
   1c970:	str	r3, [r4, #36]	; 0x24
   1c974:	b	1c92c <close_stdout@@Base+0x16b0>
   1c978:	bl	11d78 <__stack_chk_fail@plt>
   1c97c:	bl	12138 <abort@plt>
   1c980:	svcmi	0x00800000
   1c984:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c988:	andeq	r0, r0, r0, ror #3
   1c98c:	ldr	r3, [pc, #428]	; 1cb40 <close_stdout@@Base+0x18c4>
   1c990:	ldr	ip, [pc, #428]	; 1cb44 <close_stdout@@Base+0x18c8>
   1c994:	add	r3, pc, r3
   1c998:	push	{r4, r5, r6, r7, r8, lr}
   1c99c:	subs	r8, r1, #0
   1c9a0:	ldr	r4, [r3, ip]
   1c9a4:	sub	sp, sp, #8
   1c9a8:	mov	r5, r2
   1c9ac:	mov	r6, r0
   1c9b0:	ldr	r3, [r4]
   1c9b4:	str	r3, [sp, #4]
   1c9b8:	beq	1caf8 <close_stdout@@Base+0x187c>
   1c9bc:	mov	r3, #0
   1c9c0:	mov	r2, sp
   1c9c4:	bl	1bd34 <close_stdout@@Base+0xab8>
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1c9f8 <close_stdout@@Base+0x177c>
   1c9d0:	cmp	r5, #0
   1c9d4:	moveq	r0, r5
   1c9d8:	strne	r0, [r5]
   1c9dc:	movne	r0, #0
   1c9e0:	ldr	r2, [sp, #4]
   1c9e4:	ldr	r3, [r4]
   1c9e8:	cmp	r2, r3
   1c9ec:	bne	1cb38 <close_stdout@@Base+0x18bc>
   1c9f0:	add	sp, sp, #8
   1c9f4:	pop	{r4, r5, r6, r7, r8, pc}
   1c9f8:	vldr	s11, [r6, #8]
   1c9fc:	vcvt.f32.u32	s14, s11
   1ca00:	ldr	r3, [r6, #20]
   1ca04:	vldr	s15, [r3, #8]
   1ca08:	vldr	s13, [r6, #12]
   1ca0c:	vmul.f32	s15, s14, s15
   1ca10:	vcvt.f32.u32	s14, s13
   1ca14:	vcmpe.f32	s14, s15
   1ca18:	vmrs	APSR_nzcv, fpscr
   1ca1c:	bgt	1ca6c <close_stdout@@Base+0x17f0>
   1ca20:	ldr	r3, [sp]
   1ca24:	ldr	r2, [r3]
   1ca28:	cmp	r2, #0
   1ca2c:	beq	1cafc <close_stdout@@Base+0x1880>
   1ca30:	ldr	r3, [r6, #36]	; 0x24
   1ca34:	cmp	r3, #0
   1ca38:	beq	1cb20 <close_stdout@@Base+0x18a4>
   1ca3c:	ldr	r2, [r3, #4]
   1ca40:	str	r2, [r6, #36]	; 0x24
   1ca44:	str	r8, [r3]
   1ca48:	mov	r0, #1
   1ca4c:	ldr	r2, [sp]
   1ca50:	ldr	r1, [r2, #4]
   1ca54:	str	r1, [r3, #4]
   1ca58:	str	r3, [r2, #4]
   1ca5c:	ldr	r3, [r6, #16]
   1ca60:	add	r3, r3, r0
   1ca64:	str	r3, [r6, #16]
   1ca68:	b	1c9e0 <close_stdout@@Base+0x1764>
   1ca6c:	add	r0, r6, #20
   1ca70:	bl	1be30 <close_stdout@@Base+0xbb4>
   1ca74:	vldr	s11, [r6, #8]
   1ca78:	vcvt.f32.u32	s15, s11
   1ca7c:	ldr	r3, [r6, #20]
   1ca80:	vldr	s14, [r3, #8]
   1ca84:	vldr	s11, [r6, #12]
   1ca88:	vmul.f32	s13, s14, s15
   1ca8c:	vcvt.f32.u32	s12, s11
   1ca90:	vcmpe.f32	s12, s13
   1ca94:	vmrs	APSR_nzcv, fpscr
   1ca98:	ble	1ca20 <close_stdout@@Base+0x17a4>
   1ca9c:	ldrb	r2, [r3, #16]
   1caa0:	cmp	r2, #0
   1caa4:	vldreq	s13, [r3, #12]
   1caa8:	vldrne	s14, [r3, #12]
   1caac:	vmuleq.f32	s15, s15, s13
   1cab0:	vmul.f32	s15, s14, s15
   1cab4:	vldr	s14, [pc, #128]	; 1cb3c <close_stdout@@Base+0x18c0>
   1cab8:	vcmpe.f32	s15, s14
   1cabc:	vmrs	APSR_nzcv, fpscr
   1cac0:	bge	1cb30 <close_stdout@@Base+0x18b4>
   1cac4:	vcvt.u32.f32	s15, s15
   1cac8:	mov	r0, r6
   1cacc:	vmov	r1, s15
   1cad0:	bl	1c7f4 <close_stdout@@Base+0x1578>
   1cad4:	cmp	r0, #0
   1cad8:	beq	1cb30 <close_stdout@@Base+0x18b4>
   1cadc:	mov	r2, sp
   1cae0:	mov	r0, r6
   1cae4:	mov	r1, r8
   1cae8:	mov	r3, #0
   1caec:	bl	1bd34 <close_stdout@@Base+0xab8>
   1caf0:	cmp	r0, #0
   1caf4:	beq	1ca20 <close_stdout@@Base+0x17a4>
   1caf8:	bl	12138 <abort@plt>
   1cafc:	str	r8, [r3]
   1cb00:	mov	r0, #1
   1cb04:	ldr	r2, [r6, #16]
   1cb08:	ldr	r3, [r6, #12]
   1cb0c:	add	r2, r2, r0
   1cb10:	str	r2, [r6, #16]
   1cb14:	add	r3, r3, r0
   1cb18:	str	r3, [r6, #12]
   1cb1c:	b	1c9e0 <close_stdout@@Base+0x1764>
   1cb20:	mov	r0, #8
   1cb24:	bl	11eec <malloc@plt>
   1cb28:	subs	r3, r0, #0
   1cb2c:	bne	1ca44 <close_stdout@@Base+0x17c8>
   1cb30:	mvn	r0, #0
   1cb34:	b	1c9e0 <close_stdout@@Base+0x1764>
   1cb38:	bl	11d78 <__stack_chk_fail@plt>
   1cb3c:	svcmi	0x00800000
   1cb40:	andeq	ip, r1, r4, ror #12
   1cb44:	andeq	r0, r0, r0, ror #3
   1cb48:	b	1c98c <close_stdout@@Base+0x1710>
   1cb4c:	ldr	r3, [pc, #100]	; 1cbb8 <close_stdout@@Base+0x193c>
   1cb50:	ldr	ip, [pc, #100]	; 1cbbc <close_stdout@@Base+0x1940>
   1cb54:	add	r3, pc, r3
   1cb58:	push	{r4, r5, lr}
   1cb5c:	sub	sp, sp, #12
   1cb60:	ldr	r4, [r3, ip]
   1cb64:	mov	r5, r1
   1cb68:	mov	r2, sp
   1cb6c:	ldr	r3, [r4]
   1cb70:	str	r3, [sp, #4]
   1cb74:	bl	1c98c <close_stdout@@Base+0x1710>
   1cb78:	cmn	r0, #1
   1cb7c:	beq	1cbac <close_stdout@@Base+0x1930>
   1cb80:	cmp	r0, #0
   1cb84:	movne	r0, r5
   1cb88:	beq	1cba4 <close_stdout@@Base+0x1928>
   1cb8c:	ldr	r2, [sp, #4]
   1cb90:	ldr	r3, [r4]
   1cb94:	cmp	r2, r3
   1cb98:	bne	1cbb4 <close_stdout@@Base+0x1938>
   1cb9c:	add	sp, sp, #12
   1cba0:	pop	{r4, r5, pc}
   1cba4:	ldr	r0, [sp]
   1cba8:	b	1cb8c <close_stdout@@Base+0x1910>
   1cbac:	mov	r0, #0
   1cbb0:	b	1cb8c <close_stdout@@Base+0x1910>
   1cbb4:	bl	11d78 <__stack_chk_fail@plt>
   1cbb8:	andeq	ip, r1, r4, lsr #9
   1cbbc:	andeq	r0, r0, r0, ror #3
   1cbc0:	ldr	ip, [pc, #304]	; 1ccf8 <close_stdout@@Base+0x1a7c>
   1cbc4:	mov	r3, #1
   1cbc8:	push	{r4, r5, r6, r7, lr}
   1cbcc:	add	ip, pc, ip
   1cbd0:	ldr	lr, [pc, #292]	; 1ccfc <close_stdout@@Base+0x1a80>
   1cbd4:	sub	sp, sp, #12
   1cbd8:	mov	r4, r0
   1cbdc:	mov	r2, sp
   1cbe0:	ldr	r5, [ip, lr]
   1cbe4:	ldr	ip, [r5]
   1cbe8:	str	ip, [sp, #4]
   1cbec:	bl	1bd34 <close_stdout@@Base+0xab8>
   1cbf0:	subs	r6, r0, #0
   1cbf4:	beq	1cc14 <close_stdout@@Base+0x1998>
   1cbf8:	ldr	r3, [sp]
   1cbfc:	ldr	r2, [r4, #16]
   1cc00:	sub	r2, r2, #1
   1cc04:	str	r2, [r4, #16]
   1cc08:	ldr	r3, [r3]
   1cc0c:	cmp	r3, #0
   1cc10:	beq	1cc30 <close_stdout@@Base+0x19b4>
   1cc14:	ldr	r2, [sp, #4]
   1cc18:	mov	r0, r6
   1cc1c:	ldr	r3, [r5]
   1cc20:	cmp	r2, r3
   1cc24:	bne	1ccf4 <close_stdout@@Base+0x1a78>
   1cc28:	add	sp, sp, #12
   1cc2c:	pop	{r4, r5, r6, r7, pc}
   1cc30:	vldr	s12, [r4, #8]
   1cc34:	vcvt.f32.u32	s14, s12
   1cc38:	ldr	r3, [r4, #12]
   1cc3c:	ldr	r2, [r4, #20]
   1cc40:	sub	r3, r3, #1
   1cc44:	str	r3, [r4, #12]
   1cc48:	vldr	s15, [r2]
   1cc4c:	vmov	s13, r3
   1cc50:	vmul.f32	s15, s14, s15
   1cc54:	vcvt.f32.u32	s14, s13
   1cc58:	vcmpe.f32	s14, s15
   1cc5c:	vmrs	APSR_nzcv, fpscr
   1cc60:	bpl	1cc14 <close_stdout@@Base+0x1998>
   1cc64:	add	r0, r4, #20
   1cc68:	bl	1be30 <close_stdout@@Base+0xbb4>
   1cc6c:	vldr	s12, [r4, #8]
   1cc70:	vcvt.f32.u32	s15, s12
   1cc74:	ldr	r3, [r4, #20]
   1cc78:	vldr	s14, [r3]
   1cc7c:	vldr	s12, [r4, #12]
   1cc80:	vmul.f32	s14, s15, s14
   1cc84:	vcvt.f32.u32	s13, s12
   1cc88:	vcmpe.f32	s13, s14
   1cc8c:	vmrs	APSR_nzcv, fpscr
   1cc90:	bpl	1cc14 <close_stdout@@Base+0x1998>
   1cc94:	vldr	s14, [r3, #4]
   1cc98:	vmul.f32	s15, s15, s14
   1cc9c:	ldrb	r2, [r3, #16]
   1cca0:	mov	r0, r4
   1cca4:	cmp	r2, #0
   1cca8:	vldreq	s14, [r3, #8]
   1ccac:	vmuleq.f32	s15, s15, s14
   1ccb0:	vcvt.u32.f32	s15, s15
   1ccb4:	vmov	r1, s15
   1ccb8:	bl	1c7f4 <close_stdout@@Base+0x1578>
   1ccbc:	cmp	r0, #0
   1ccc0:	bne	1cc14 <close_stdout@@Base+0x1998>
   1ccc4:	ldr	r0, [r4, #36]	; 0x24
   1ccc8:	cmp	r0, #0
   1cccc:	bne	1ccd8 <close_stdout@@Base+0x1a5c>
   1ccd0:	b	1cce8 <close_stdout@@Base+0x1a6c>
   1ccd4:	mov	r0, r7
   1ccd8:	ldr	r7, [r0, #4]
   1ccdc:	bl	11ce8 <free@plt>
   1cce0:	cmp	r7, #0
   1cce4:	bne	1ccd4 <close_stdout@@Base+0x1a58>
   1cce8:	mov	r3, #0
   1ccec:	str	r3, [r4, #36]	; 0x24
   1ccf0:	b	1cc14 <close_stdout@@Base+0x1998>
   1ccf4:	bl	11d78 <__stack_chk_fail@plt>
   1ccf8:	andeq	ip, r1, ip, lsr #8
   1ccfc:	andeq	r0, r0, r0, ror #3
   1cd00:	ldr	ip, [pc, #1192]	; 1d1b0 <close_stdout@@Base+0x1f34>
   1cd04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd08:	vpush	{d8-d9}
   1cd0c:	ands	r4, r3, #32
   1cd10:	ldr	lr, [pc, #1180]	; 1d1b4 <close_stdout@@Base+0x1f38>
   1cd14:	sub	sp, sp, #140	; 0x8c
   1cd18:	add	ip, pc, ip
   1cd1c:	moveq	r5, #1000	; 0x3e8
   1cd20:	movne	r5, #1024	; 0x400
   1cd24:	str	r4, [sp, #56]	; 0x38
   1cd28:	mov	r8, r3
   1cd2c:	str	r2, [sp, #28]
   1cd30:	mov	r3, ip
   1cd34:	str	r5, [sp, #60]	; 0x3c
   1cd38:	mov	r7, r1
   1cd3c:	ldr	lr, [ip, lr]
   1cd40:	and	r4, r8, #3
   1cd44:	mov	r6, r0
   1cd48:	str	r4, [sp, #48]	; 0x30
   1cd4c:	ldr	r3, [lr]
   1cd50:	str	lr, [sp, #44]	; 0x2c
   1cd54:	str	r3, [sp, #132]	; 0x84
   1cd58:	bl	120c0 <localeconv@plt>
   1cd5c:	ldr	r5, [r0]
   1cd60:	mov	r4, r0
   1cd64:	mov	r0, r5
   1cd68:	str	r5, [sp, #52]	; 0x34
   1cd6c:	bl	11fac <strlen@plt>
   1cd70:	sub	r3, r0, #1
   1cd74:	mov	fp, r0
   1cd78:	cmp	r3, #15
   1cd7c:	ldrhi	r5, [pc, #1076]	; 1d1b8 <close_stdout@@Base+0x1f3c>
   1cd80:	movhi	fp, #1
   1cd84:	addhi	r5, pc, r5
   1cd88:	strhi	r5, [sp, #52]	; 0x34
   1cd8c:	ldr	r5, [r4, #4]
   1cd90:	ldr	r9, [r4, #8]
   1cd94:	mov	r0, r5
   1cd98:	str	r5, [sp, #40]	; 0x28
   1cd9c:	bl	11fac <strlen@plt>
   1cda0:	cmp	r0, #16
   1cda4:	ldrhi	r4, [pc, #1040]	; 1d1bc <close_stdout@@Base+0x1f40>
   1cda8:	addhi	r4, pc, r4
   1cdac:	strhi	r4, [sp, #40]	; 0x28
   1cdb0:	ldrd	r4, [sp, #200]	; 0xc8
   1cdb4:	ldrd	r0, [sp, #192]	; 0xc0
   1cdb8:	cmp	r5, r1
   1cdbc:	cmpeq	r4, r0
   1cdc0:	ldr	r4, [sp, #28]
   1cdc4:	add	r4, r4, #648	; 0x288
   1cdc8:	str	r4, [sp, #32]
   1cdcc:	str	r4, [sp, #36]	; 0x24
   1cdd0:	bhi	1d008 <close_stdout@@Base+0x1d8c>
   1cdd4:	ldrd	r2, [sp, #200]	; 0xc8
   1cdd8:	bl	23af8 <close_stdout@@Base+0x887c>
   1cddc:	orrs	r5, r2, r3
   1cde0:	bne	1ce20 <close_stdout@@Base+0x1ba4>
   1cde4:	ldrd	r2, [sp, #200]	; 0xc8
   1cde8:	ldrd	r0, [sp, #192]	; 0xc0
   1cdec:	bl	23af8 <close_stdout@@Base+0x887c>
   1cdf0:	mul	r2, r0, r7
   1cdf4:	mov	r3, r1
   1cdf8:	umull	r4, r5, r0, r6
   1cdfc:	mla	r1, r6, r1, r2
   1ce00:	mov	r2, r0
   1ce04:	add	r5, r1, r5
   1ce08:	mov	r0, r4
   1ce0c:	mov	r1, r5
   1ce10:	bl	23af8 <close_stdout@@Base+0x887c>
   1ce14:	cmp	r1, r7
   1ce18:	cmpeq	r0, r6
   1ce1c:	beq	1d430 <close_stdout@@Base+0x21b4>
   1ce20:	mov	r0, r6
   1ce24:	mov	r1, r7
   1ce28:	bl	23a3c <close_stdout@@Base+0x87c0>
   1ce2c:	vmov	d9, r0, r1
   1ce30:	ldrd	r0, [sp, #192]	; 0xc0
   1ce34:	bl	23a3c <close_stdout@@Base+0x87c0>
   1ce38:	vmov	d8, r0, r1
   1ce3c:	ldrd	r0, [sp, #200]	; 0xc8
   1ce40:	bl	23a3c <close_stdout@@Base+0x87c0>
   1ce44:	tst	r8, #16
   1ce48:	vmov	d7, r0, r1
   1ce4c:	vdiv.f64	d8, d8, d7
   1ce50:	vmul.f64	d8, d9, d8
   1ce54:	beq	1d1c8 <close_stdout@@Base+0x1f4c>
   1ce58:	vldr	s15, [sp, #60]	; 0x3c
   1ce5c:	mov	r6, #0
   1ce60:	vcvt.f64.s32	d6, s15
   1ce64:	vmov.f64	d7, d6
   1ce68:	add	r6, r6, #1
   1ce6c:	vmov.f64	d5, d7
   1ce70:	vmul.f64	d7, d7, d6
   1ce74:	vcmpe.f64	d8, d7
   1ce78:	vmrs	APSR_nzcv, fpscr
   1ce7c:	blt	1ce88 <close_stdout@@Base+0x1c0c>
   1ce80:	cmp	r6, #8
   1ce84:	bne	1ce68 <close_stdout@@Base+0x1bec>
   1ce88:	vdiv.f64	d8, d8, d5
   1ce8c:	ldr	r4, [sp, #48]	; 0x30
   1ce90:	cmp	r4, #1
   1ce94:	vmoveq	r0, r1, d8
   1ce98:	beq	1cef8 <close_stdout@@Base+0x1c7c>
   1ce9c:	vldr	d7, [pc, #772]	; 1d1a8 <close_stdout@@Base+0x1f2c>
   1cea0:	vcmpe.f64	d8, d7
   1cea4:	vmov	r0, r1, d8
   1cea8:	vmrs	APSR_nzcv, fpscr
   1ceac:	bpl	1cef8 <close_stdout@@Base+0x1c7c>
   1ceb0:	bl	23b48 <close_stdout@@Base+0x88cc>
   1ceb4:	ldr	r2, [sp, #48]	; 0x30
   1ceb8:	cmp	r2, #0
   1cebc:	mov	r4, r0
   1cec0:	mov	r5, r1
   1cec4:	movne	r0, #0
   1cec8:	movne	r1, #0
   1cecc:	bne	1ceec <close_stdout@@Base+0x1c70>
   1ced0:	bl	23a3c <close_stdout@@Base+0x87c0>
   1ced4:	vmov	d7, r0, r1
   1ced8:	ldr	r1, [sp, #48]	; 0x30
   1cedc:	vcmp.f64	d8, d7
   1cee0:	vmrs	APSR_nzcv, fpscr
   1cee4:	moveq	r0, #0
   1cee8:	movne	r0, #1
   1ceec:	adds	r0, r0, r4
   1cef0:	adc	r1, r1, r5
   1cef4:	bl	23a3c <close_stdout@@Base+0x87c0>
   1cef8:	ldr	r3, [pc, #704]	; 1d1c0 <close_stdout@@Base+0x1f44>
   1cefc:	mvn	r2, #0
   1cf00:	strd	r0, [sp]
   1cf04:	mov	r1, #1
   1cf08:	add	r3, pc, r3
   1cf0c:	ldr	r0, [sp, #28]
   1cf10:	add	r4, fp, r1
   1cf14:	bl	11fdc <__sprintf_chk@plt>
   1cf18:	ldr	r0, [sp, #28]
   1cf1c:	bl	11fac <strlen@plt>
   1cf20:	ldr	r5, [sp, #56]	; 0x38
   1cf24:	cmp	r5, #0
   1cf28:	movne	r3, #1
   1cf2c:	moveq	r3, #2
   1cf30:	add	r3, r3, r4
   1cf34:	mov	fp, r0
   1cf38:	cmp	r0, r3
   1cf3c:	bhi	1cf5c <close_stdout@@Base+0x1ce0>
   1cf40:	tst	r8, #8
   1cf44:	beq	1d214 <close_stdout@@Base+0x1f98>
   1cf48:	ldr	r5, [sp, #28]
   1cf4c:	add	r3, r5, r0
   1cf50:	ldrb	r3, [r3, #-1]
   1cf54:	cmp	r3, #48	; 0x30
   1cf58:	bne	1d214 <close_stdout@@Base+0x1f98>
   1cf5c:	vmov.f64	d5, #36	; 0x41200000  10.0
   1cf60:	ldr	r4, [sp, #48]	; 0x30
   1cf64:	cmp	r4, #1
   1cf68:	vmul.f64	d8, d8, d5
   1cf6c:	beq	1cfd0 <close_stdout@@Base+0x1d54>
   1cf70:	vldr	d7, [pc, #560]	; 1d1a8 <close_stdout@@Base+0x1f2c>
   1cf74:	vcmpe.f64	d8, d7
   1cf78:	vmrs	APSR_nzcv, fpscr
   1cf7c:	bpl	1cfd0 <close_stdout@@Base+0x1d54>
   1cf80:	vmov	r0, r1, d8
   1cf84:	bl	23b48 <close_stdout@@Base+0x88cc>
   1cf88:	ldr	r2, [sp, #48]	; 0x30
   1cf8c:	cmp	r2, #0
   1cf90:	mov	r4, r0
   1cf94:	mov	r5, r1
   1cf98:	movne	r0, #0
   1cf9c:	movne	r1, #0
   1cfa0:	bne	1cfc0 <close_stdout@@Base+0x1d44>
   1cfa4:	bl	23a3c <close_stdout@@Base+0x87c0>
   1cfa8:	vmov	d7, r0, r1
   1cfac:	ldr	r1, [sp, #48]	; 0x30
   1cfb0:	vcmp.f64	d8, d7
   1cfb4:	vmrs	APSR_nzcv, fpscr
   1cfb8:	moveq	r0, #0
   1cfbc:	movne	r0, #1
   1cfc0:	adds	r0, r0, r4
   1cfc4:	adc	r1, r1, r5
   1cfc8:	bl	23a3c <close_stdout@@Base+0x87c0>
   1cfcc:	vmov	d8, r0, r1
   1cfd0:	ldr	r3, [pc, #492]	; 1d1c4 <close_stdout@@Base+0x1f48>
   1cfd4:	mov	r1, #1
   1cfd8:	vmov.f64	d7, #36	; 0x41200000  10.0
   1cfdc:	mvn	r2, #0
   1cfe0:	add	r3, pc, r3
   1cfe4:	ldr	r0, [sp, #28]
   1cfe8:	mov	r4, #0
   1cfec:	vdiv.f64	d8, d8, d7
   1cff0:	vstr	d8, [sp]
   1cff4:	bl	11fdc <__sprintf_chk@plt>
   1cff8:	ldr	r0, [sp, #28]
   1cffc:	bl	11fac <strlen@plt>
   1d000:	mov	fp, r0
   1d004:	b	1d214 <close_stdout@@Base+0x1f98>
   1d008:	ldrd	r4, [sp, #192]	; 0xc0
   1d00c:	orrs	r5, r4, r5
   1d010:	beq	1ce20 <close_stdout@@Base+0x1ba4>
   1d014:	ldrd	r0, [sp, #200]	; 0xc8
   1d018:	ldrd	r2, [sp, #192]	; 0xc0
   1d01c:	bl	23af8 <close_stdout@@Base+0x887c>
   1d020:	orrs	r0, r2, r3
   1d024:	bne	1ce20 <close_stdout@@Base+0x1ba4>
   1d028:	ldrd	r2, [sp, #192]	; 0xc0
   1d02c:	ldrd	r0, [sp, #200]	; 0xc8
   1d030:	bl	23af8 <close_stdout@@Base+0x887c>
   1d034:	strd	r0, [sp, #16]
   1d038:	mov	r0, r6
   1d03c:	mov	r1, r7
   1d040:	ldrd	r2, [sp, #16]
   1d044:	bl	23af8 <close_stdout@@Base+0x887c>
   1d048:	mov	r1, #10
   1d04c:	umull	r4, r5, r2, r1
   1d050:	mla	r1, r1, r3, r5
   1d054:	strd	r4, [sp, #64]	; 0x40
   1d058:	ldrd	r2, [sp, #16]
   1d05c:	str	r1, [sp, #68]	; 0x44
   1d060:	ldrd	r0, [sp, #64]	; 0x40
   1d064:	bl	23af8 <close_stdout@@Base+0x887c>
   1d068:	mov	r0, r6
   1d06c:	mov	r1, r7
   1d070:	adds	r6, r2, r2
   1d074:	adc	r7, r3, r3
   1d078:	ldrd	r2, [sp, #16]
   1d07c:	bl	23af8 <close_stdout@@Base+0x887c>
   1d080:	ldrd	r2, [sp, #16]
   1d084:	mov	r4, r0
   1d088:	mov	r5, r1
   1d08c:	ldrd	r0, [sp, #64]	; 0x40
   1d090:	bl	23af8 <close_stdout@@Base+0x887c>
   1d094:	str	r0, [sp, #64]	; 0x40
   1d098:	ldrd	r0, [sp, #16]
   1d09c:	cmp	r1, r7
   1d0a0:	cmpeq	r0, r6
   1d0a4:	bls	1d59c <close_stdout@@Base+0x2320>
   1d0a8:	orrs	r1, r6, r7
   1d0ac:	moveq	ip, #0
   1d0b0:	movne	ip, #1
   1d0b4:	ands	r0, r8, #16
   1d0b8:	str	r0, [sp, #72]	; 0x48
   1d0bc:	beq	1d48c <close_stdout@@Base+0x2210>
   1d0c0:	ldr	r2, [sp, #60]	; 0x3c
   1d0c4:	mov	r3, #0
   1d0c8:	cmp	r5, r3
   1d0cc:	cmpeq	r4, r2
   1d0d0:	strd	r2, [sp, #16]
   1d0d4:	bcc	1d5f4 <close_stdout@@Base+0x2378>
   1d0d8:	mov	r6, #0
   1d0dc:	mov	sl, ip
   1d0e0:	str	r9, [sp, #80]	; 0x50
   1d0e4:	mov	ip, r6
   1d0e8:	str	r8, [sp, #84]	; 0x54
   1d0ec:	mov	r9, r3
   1d0f0:	ldr	r6, [sp, #64]	; 0x40
   1d0f4:	mov	r8, r2
   1d0f8:	str	fp, [sp, #76]	; 0x4c
   1d0fc:	ldr	r7, [sp, #60]	; 0x3c
   1d100:	b	1d124 <close_stdout@@Base+0x1ea8>
   1d104:	adds	sl, sl, #0
   1d108:	movne	sl, #1
   1d10c:	cmp	r9, r5
   1d110:	cmpeq	r8, r4
   1d114:	add	ip, ip, #1
   1d118:	bhi	1d628 <close_stdout@@Base+0x23ac>
   1d11c:	cmp	ip, #8
   1d120:	beq	1d604 <close_stdout@@Base+0x2388>
   1d124:	mov	r0, r4
   1d128:	mov	r1, r5
   1d12c:	mov	r2, r8
   1d130:	mov	r3, r9
   1d134:	str	ip, [sp, #12]
   1d138:	bl	23af8 <close_stdout@@Base+0x887c>
   1d13c:	mov	r1, r7
   1d140:	asr	fp, sl, #1
   1d144:	add	r2, r2, r2, lsl #2
   1d148:	add	r6, r6, r2, lsl #1
   1d14c:	mov	r0, r6
   1d150:	bl	236d8 <close_stdout@@Base+0x845c>
   1d154:	mov	r2, r8
   1d158:	mov	r3, r9
   1d15c:	mov	r0, r4
   1d160:	add	fp, fp, r1, lsl #1
   1d164:	mov	r1, r5
   1d168:	bl	23af8 <close_stdout@@Base+0x887c>
   1d16c:	add	sl, fp, sl
   1d170:	mov	r4, r0
   1d174:	mov	r5, r1
   1d178:	mov	r0, r6
   1d17c:	mov	r1, r7
   1d180:	bl	234ec <close_stdout@@Base+0x8270>
   1d184:	cmp	r7, fp
   1d188:	ldr	ip, [sp, #12]
   1d18c:	mov	r6, r0
   1d190:	bhi	1d104 <close_stdout@@Base+0x1e88>
   1d194:	cmp	r7, sl
   1d198:	movcs	sl, #2
   1d19c:	movcc	sl, #3
   1d1a0:	b	1d10c <close_stdout@@Base+0x1e90>
   1d1a4:	nop	{0}
   1d1a8:	andeq	r0, r0, r0
   1d1ac:	mvnsmi	r0, #0
   1d1b0:	andeq	ip, r1, r0, ror #5
   1d1b4:	andeq	r0, r0, r0, ror #3
   1d1b8:	andeq	r9, r0, r8, ror #26
   1d1bc:	andeq	r9, r0, r8, lsr #20
   1d1c0:	andeq	sl, r0, ip, lsl #4
   1d1c4:	andeq	sl, r0, ip, lsr #2
   1d1c8:	ldr	r4, [sp, #48]	; 0x30
   1d1cc:	cmp	r4, #1
   1d1d0:	beq	1d1e4 <close_stdout@@Base+0x1f68>
   1d1d4:	vldr	d7, [pc, #972]	; 1d5a8 <close_stdout@@Base+0x232c>
   1d1d8:	vcmpe.f64	d8, d7
   1d1dc:	vmrs	APSR_nzcv, fpscr
   1d1e0:	bmi	1d3dc <close_stdout@@Base+0x2160>
   1d1e4:	ldr	r3, [pc, #964]	; 1d5b0 <close_stdout@@Base+0x2334>
   1d1e8:	mov	r1, #1
   1d1ec:	mvn	r2, #0
   1d1f0:	vstr	d8, [sp]
   1d1f4:	add	r3, pc, r3
   1d1f8:	ldr	r0, [sp, #28]
   1d1fc:	bl	11fdc <__sprintf_chk@plt>
   1d200:	ldr	r0, [sp, #28]
   1d204:	bl	11fac <strlen@plt>
   1d208:	mov	r4, #0
   1d20c:	mvn	r6, #0
   1d210:	mov	fp, r0
   1d214:	ldr	r5, [sp, #32]
   1d218:	mov	r2, fp
   1d21c:	ldr	r1, [sp, #28]
   1d220:	rsb	sl, fp, r5
   1d224:	rsb	fp, r4, fp
   1d228:	add	fp, sl, fp
   1d22c:	mov	r0, sl
   1d230:	bl	11cdc <memmove@plt>
   1d234:	str	fp, [sp, #16]
   1d238:	tst	r8, #4
   1d23c:	bne	1d2f0 <close_stdout@@Base+0x2074>
   1d240:	tst	r8, #128	; 0x80
   1d244:	beq	1d2c0 <close_stdout@@Base+0x2044>
   1d248:	cmn	r6, #1
   1d24c:	beq	1d43c <close_stdout@@Base+0x21c0>
   1d250:	and	r3, r8, #256	; 0x100
   1d254:	orrs	r5, r6, r3
   1d258:	beq	1d2c0 <close_stdout@@Base+0x2044>
   1d25c:	tst	r8, #64	; 0x40
   1d260:	bne	1d3c0 <close_stdout@@Base+0x2144>
   1d264:	cmp	r6, #0
   1d268:	ldreq	r2, [sp, #36]	; 0x24
   1d26c:	beq	1d298 <close_stdout@@Base+0x201c>
   1d270:	ldr	r4, [sp, #56]	; 0x38
   1d274:	ldr	r5, [sp, #36]	; 0x24
   1d278:	cmp	r4, #0
   1d27c:	add	r2, r5, #1
   1d280:	beq	1d3b0 <close_stdout@@Base+0x2134>
   1d284:	ldr	r1, [pc, #808]	; 1d5b4 <close_stdout@@Base+0x2338>
   1d288:	add	r1, pc, r1
   1d28c:	ldrb	r1, [r1, r6]
   1d290:	ldr	r4, [sp, #36]	; 0x24
   1d294:	strb	r1, [r4]
   1d298:	cmp	r3, #0
   1d29c:	streq	r2, [sp, #36]	; 0x24
   1d2a0:	beq	1d2c0 <close_stdout@@Base+0x2044>
   1d2a4:	ldr	r5, [sp, #56]	; 0x38
   1d2a8:	cmp	r5, #0
   1d2ac:	bne	1d39c <close_stdout@@Base+0x2120>
   1d2b0:	mov	r3, #66	; 0x42
   1d2b4:	add	r4, r2, #1
   1d2b8:	strb	r3, [r2]
   1d2bc:	str	r4, [sp, #36]	; 0x24
   1d2c0:	ldr	r5, [sp, #36]	; 0x24
   1d2c4:	mov	r3, #0
   1d2c8:	ldr	r4, [sp, #44]	; 0x2c
   1d2cc:	mov	r0, sl
   1d2d0:	ldr	r2, [sp, #132]	; 0x84
   1d2d4:	strb	r3, [r5]
   1d2d8:	ldr	r3, [r4]
   1d2dc:	cmp	r2, r3
   1d2e0:	bne	1d748 <close_stdout@@Base+0x24cc>
   1d2e4:	add	sp, sp, #140	; 0x8c
   1d2e8:	vpop	{d8-d9}
   1d2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2f0:	ldr	r0, [sp, #40]	; 0x28
   1d2f4:	add	r5, sp, #88	; 0x58
   1d2f8:	ldr	r4, [sp, #16]
   1d2fc:	str	r5, [sp, #16]
   1d300:	bl	11fac <strlen@plt>
   1d304:	rsb	fp, sl, r4
   1d308:	mov	r1, sl
   1d30c:	add	r7, sl, fp
   1d310:	mov	r3, #41	; 0x29
   1d314:	mov	r2, fp
   1d318:	mvn	r5, #0
   1d31c:	mov	r4, r0
   1d320:	add	r0, sp, #88	; 0x58
   1d324:	bl	11e14 <__memcpy_chk@plt>
   1d328:	mov	ip, r7
   1d32c:	ldr	sl, [sp, #40]	; 0x28
   1d330:	add	r7, sp, #88	; 0x58
   1d334:	b	1d350 <close_stdout@@Base+0x20d4>
   1d338:	rsb	ip, r4, r0
   1d33c:	mov	r1, sl
   1d340:	mov	r2, r4
   1d344:	mov	r0, ip
   1d348:	bl	11d0c <memcpy@plt>
   1d34c:	mov	ip, r0
   1d350:	ldrb	r3, [r9]
   1d354:	cmp	r3, #0
   1d358:	beq	1d36c <close_stdout@@Base+0x20f0>
   1d35c:	cmp	r3, #255	; 0xff
   1d360:	add	r9, r9, #1
   1d364:	movne	r5, r3
   1d368:	moveq	r5, fp
   1d36c:	cmp	r5, fp
   1d370:	movcs	r5, fp
   1d374:	rsb	r3, r5, ip
   1d378:	rsb	fp, r5, fp
   1d37c:	add	r1, r7, fp
   1d380:	mov	r2, r5
   1d384:	mov	r0, r3
   1d388:	bl	11d0c <memcpy@plt>
   1d38c:	cmp	fp, #0
   1d390:	bne	1d338 <close_stdout@@Base+0x20bc>
   1d394:	mov	sl, r0
   1d398:	b	1d240 <close_stdout@@Base+0x1fc4>
   1d39c:	cmp	r6, #0
   1d3a0:	movne	r3, #105	; 0x69
   1d3a4:	strbne	r3, [r2]
   1d3a8:	addne	r2, r2, #1
   1d3ac:	b	1d2b0 <close_stdout@@Base+0x2034>
   1d3b0:	cmp	r6, #1
   1d3b4:	moveq	r1, #107	; 0x6b
   1d3b8:	bne	1d284 <close_stdout@@Base+0x2008>
   1d3bc:	b	1d290 <close_stdout@@Base+0x2014>
   1d3c0:	ldr	r5, [sp, #28]
   1d3c4:	mov	r2, #32
   1d3c8:	ldr	r4, [sp, #32]
   1d3cc:	strb	r2, [r5, #648]	; 0x288
   1d3d0:	add	r4, r4, #1
   1d3d4:	str	r4, [sp, #36]	; 0x24
   1d3d8:	b	1d264 <close_stdout@@Base+0x1fe8>
   1d3dc:	vmov	r0, r1, d8
   1d3e0:	bl	23b48 <close_stdout@@Base+0x88cc>
   1d3e4:	ldr	r2, [sp, #48]	; 0x30
   1d3e8:	cmp	r2, #0
   1d3ec:	mov	r4, r0
   1d3f0:	mov	r5, r1
   1d3f4:	movne	r0, #0
   1d3f8:	movne	r1, #0
   1d3fc:	bne	1d41c <close_stdout@@Base+0x21a0>
   1d400:	bl	23a3c <close_stdout@@Base+0x87c0>
   1d404:	vmov	d7, r0, r1
   1d408:	ldr	r1, [sp, #48]	; 0x30
   1d40c:	vcmp.f64	d8, d7
   1d410:	vmrs	APSR_nzcv, fpscr
   1d414:	moveq	r0, #0
   1d418:	movne	r0, #1
   1d41c:	adds	r0, r0, r4
   1d420:	adc	r1, r1, r5
   1d424:	bl	23a3c <close_stdout@@Base+0x87c0>
   1d428:	vmov	d8, r0, r1
   1d42c:	b	1d1e4 <close_stdout@@Base+0x1f68>
   1d430:	mov	ip, #0
   1d434:	str	ip, [sp, #64]	; 0x40
   1d438:	b	1d0b4 <close_stdout@@Base+0x1e38>
   1d43c:	ldrd	r4, [sp, #200]	; 0xc8
   1d440:	cmp	r5, #0
   1d444:	cmpeq	r4, #1
   1d448:	bls	1d6e8 <close_stdout@@Base+0x246c>
   1d44c:	ldr	ip, [sp, #60]	; 0x3c
   1d450:	mov	r6, #1
   1d454:	mov	r2, #1
   1d458:	mov	r3, #0
   1d45c:	mov	r0, r4
   1d460:	mov	r1, r5
   1d464:	mul	r4, ip, r3
   1d468:	umull	r2, r3, r2, ip
   1d46c:	add	r3, r4, r3
   1d470:	cmp	r1, r3
   1d474:	cmpeq	r0, r2
   1d478:	bls	1d250 <close_stdout@@Base+0x1fd4>
   1d47c:	add	r6, r6, #1
   1d480:	cmp	r6, #8
   1d484:	bne	1d464 <close_stdout@@Base+0x21e8>
   1d488:	b	1d250 <close_stdout@@Base+0x1fd4>
   1d48c:	ldr	r0, [sp, #32]
   1d490:	mvn	r6, #0
   1d494:	str	r0, [sp, #16]
   1d498:	ldr	r0, [sp, #48]	; 0x30
   1d49c:	cmp	r0, #1
   1d4a0:	beq	1d5b8 <close_stdout@@Base+0x233c>
   1d4a4:	ldr	r0, [sp, #48]	; 0x30
   1d4a8:	cmp	r0, #0
   1d4ac:	movne	ip, #0
   1d4b0:	bne	1d4c8 <close_stdout@@Base+0x224c>
   1d4b4:	ldr	r3, [sp, #64]	; 0x40
   1d4b8:	add	ip, r3, ip
   1d4bc:	cmp	ip, #0
   1d4c0:	movle	ip, #0
   1d4c4:	movgt	ip, #1
   1d4c8:	cmp	ip, #0
   1d4cc:	beq	1d54c <close_stdout@@Base+0x22d0>
   1d4d0:	ldr	r0, [sp, #72]	; 0x48
   1d4d4:	adds	r4, r4, #1
   1d4d8:	adc	r5, r5, #0
   1d4dc:	cmp	r0, #0
   1d4e0:	beq	1d54c <close_stdout@@Base+0x22d0>
   1d4e4:	ldr	r0, [sp, #60]	; 0x3c
   1d4e8:	mov	r1, #0
   1d4ec:	mov	r3, r1
   1d4f0:	mov	r2, r0
   1d4f4:	cmp	r3, r5
   1d4f8:	cmpeq	r2, r4
   1d4fc:	bne	1d54c <close_stdout@@Base+0x22d0>
   1d500:	cmp	r6, #8
   1d504:	beq	1d54c <close_stdout@@Base+0x22d0>
   1d508:	tst	r8, #8
   1d50c:	add	r6, r6, #1
   1d510:	movne	r4, #1
   1d514:	movne	r5, #0
   1d518:	bne	1d54c <close_stdout@@Base+0x22d0>
   1d51c:	ldr	r4, [sp, #16]
   1d520:	mov	r2, #48	; 0x30
   1d524:	ldr	r1, [sp, #52]	; 0x34
   1d528:	mov	r5, #0
   1d52c:	sub	r3, r4, #1
   1d530:	rsb	r3, fp, r3
   1d534:	strb	r2, [r4, #-1]
   1d538:	mov	r2, fp
   1d53c:	str	r3, [sp, #16]
   1d540:	mov	r0, r3
   1d544:	mov	r4, #1
   1d548:	bl	11d0c <memcpy@plt>
   1d54c:	ldr	r0, [sp, #16]
   1d550:	sub	r7, r0, #1
   1d554:	mov	r0, r4
   1d558:	mov	r1, r5
   1d55c:	mov	r2, #10
   1d560:	mov	r3, #0
   1d564:	bl	23af8 <close_stdout@@Base+0x887c>
   1d568:	mov	sl, r7
   1d56c:	mov	r0, r4
   1d570:	mov	r1, r5
   1d574:	mov	r3, #0
   1d578:	add	r2, r2, #48	; 0x30
   1d57c:	strb	r2, [r7], #-1
   1d580:	mov	r2, #10
   1d584:	bl	23af8 <close_stdout@@Base+0x887c>
   1d588:	mov	r4, r0
   1d58c:	mov	r5, r1
   1d590:	orrs	r1, r4, r5
   1d594:	bne	1d554 <close_stdout@@Base+0x22d8>
   1d598:	b	1d238 <close_stdout@@Base+0x1fbc>
   1d59c:	movcc	ip, #3
   1d5a0:	movcs	ip, #2
   1d5a4:	b	1d0b4 <close_stdout@@Base+0x1e38>
   1d5a8:	andeq	r0, r0, r0
   1d5ac:	mvnsmi	r0, #0
   1d5b0:	andeq	r9, r0, r8, lsl pc
   1d5b4:	andeq	r9, r0, r0, ror lr
   1d5b8:	mov	r2, #1
   1d5bc:	mov	r3, #0
   1d5c0:	and	r2, r2, r4
   1d5c4:	and	r3, r3, r5
   1d5c8:	adds	r2, r2, ip
   1d5cc:	adc	r3, r3, ip, asr #31
   1d5d0:	orr	ip, r2, r3
   1d5d4:	ldr	r3, [sp, #64]	; 0x40
   1d5d8:	cmp	ip, #0
   1d5dc:	addne	r3, r3, #1
   1d5e0:	cmp	r3, #5
   1d5e4:	mov	ip, r3
   1d5e8:	movle	ip, #0
   1d5ec:	movgt	ip, #1
   1d5f0:	b	1d4c8 <close_stdout@@Base+0x224c>
   1d5f4:	ldr	r1, [sp, #32]
   1d5f8:	mov	r6, #0
   1d5fc:	str	r1, [sp, #16]
   1d600:	b	1d498 <close_stdout@@Base+0x221c>
   1d604:	ldr	r2, [sp, #32]
   1d608:	str	r6, [sp, #64]	; 0x40
   1d60c:	mov	r6, ip
   1d610:	ldr	fp, [sp, #76]	; 0x4c
   1d614:	mov	ip, sl
   1d618:	ldr	r9, [sp, #80]	; 0x50
   1d61c:	ldr	r8, [sp, #84]	; 0x54
   1d620:	str	r2, [sp, #16]
   1d624:	b	1d498 <close_stdout@@Base+0x221c>
   1d628:	cmp	r5, #0
   1d62c:	cmpeq	r4, #9
   1d630:	str	r6, [sp, #64]	; 0x40
   1d634:	ldr	fp, [sp, #76]	; 0x4c
   1d638:	mov	r6, ip
   1d63c:	ldrhi	r3, [sp, #32]
   1d640:	mov	ip, sl
   1d644:	ldr	r9, [sp, #80]	; 0x50
   1d648:	ldr	r8, [sp, #84]	; 0x54
   1d64c:	strhi	r3, [sp, #16]
   1d650:	bhi	1d498 <close_stdout@@Base+0x221c>
   1d654:	ldr	r3, [sp, #48]	; 0x30
   1d658:	cmp	r3, #1
   1d65c:	beq	1d6f0 <close_stdout@@Base+0x2474>
   1d660:	adds	r3, sl, #0
   1d664:	ldr	r1, [sp, #48]	; 0x30
   1d668:	movne	r3, #1
   1d66c:	cmp	r1, #0
   1d670:	movne	r3, #0
   1d674:	cmp	r3, #0
   1d678:	ldr	r3, [sp, #64]	; 0x40
   1d67c:	beq	1d6d0 <close_stdout@@Base+0x2454>
   1d680:	add	r3, r3, #1
   1d684:	str	r3, [sp, #64]	; 0x40
   1d688:	cmp	r3, #10
   1d68c:	beq	1d720 <close_stdout@@Base+0x24a4>
   1d690:	ldr	r0, [sp, #28]
   1d694:	ldr	r1, [sp, #64]	; 0x40
   1d698:	add	r2, r0, #644	; 0x284
   1d69c:	add	r2, r2, #3
   1d6a0:	add	r3, r1, #48	; 0x30
   1d6a4:	rsb	r2, fp, r2
   1d6a8:	str	r2, [sp, #16]
   1d6ac:	strb	r3, [r0, #647]	; 0x287
   1d6b0:	mov	r2, fp
   1d6b4:	ldr	r1, [sp, #52]	; 0x34
   1d6b8:	mov	r3, #0
   1d6bc:	ldr	r0, [sp, #16]
   1d6c0:	str	r3, [sp, #64]	; 0x40
   1d6c4:	bl	11d0c <memcpy@plt>
   1d6c8:	ldr	ip, [sp, #64]	; 0x40
   1d6cc:	b	1d498 <close_stdout@@Base+0x221c>
   1d6d0:	cmp	r3, #0
   1d6d4:	bne	1d690 <close_stdout@@Base+0x2414>
   1d6d8:	ands	r3, r8, #8
   1d6dc:	bne	1d70c <close_stdout@@Base+0x2490>
   1d6e0:	str	r3, [sp, #64]	; 0x40
   1d6e4:	b	1d690 <close_stdout@@Base+0x2414>
   1d6e8:	mov	r6, #0
   1d6ec:	b	1d250 <close_stdout@@Base+0x1fd4>
   1d6f0:	ldr	r0, [sp, #64]	; 0x40
   1d6f4:	and	r3, r0, #1
   1d6f8:	add	r3, sl, r3
   1d6fc:	cmp	r3, #2
   1d700:	movle	r3, #0
   1d704:	movgt	r3, #1
   1d708:	b	1d674 <close_stdout@@Base+0x23f8>
   1d70c:	ldr	r1, [sp, #32]
   1d710:	mov	r3, #0
   1d714:	str	r3, [sp, #64]	; 0x40
   1d718:	str	r1, [sp, #16]
   1d71c:	b	1d498 <close_stdout@@Base+0x221c>
   1d720:	adds	r4, r4, #1
   1d724:	mov	ip, #0
   1d728:	adc	r5, r5, #0
   1d72c:	cmp	r5, #0
   1d730:	cmpeq	r4, #10
   1d734:	bne	1d6d8 <close_stdout@@Base+0x245c>
   1d738:	ldr	r0, [sp, #32]
   1d73c:	str	ip, [sp, #64]	; 0x40
   1d740:	str	r0, [sp, #16]
   1d744:	b	1d498 <close_stdout@@Base+0x221c>
   1d748:	bl	11d78 <__stack_chk_fail@plt>
   1d74c:	ldr	r3, [pc, #432]	; 1d904 <close_stdout@@Base+0x2688>
   1d750:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d754:	subs	r4, r0, #0
   1d758:	ldr	r0, [pc, #424]	; 1d908 <close_stdout@@Base+0x268c>
   1d75c:	add	r3, pc, r3
   1d760:	sub	sp, sp, #20
   1d764:	mov	r8, r1
   1d768:	mov	r6, r2
   1d76c:	ldr	r7, [r3, r0]
   1d770:	ldr	r3, [r7]
   1d774:	str	r3, [sp, #12]
   1d778:	beq	1d89c <close_stdout@@Base+0x2620>
   1d77c:	ldrb	r3, [r4]
   1d780:	ldr	r5, [pc, #388]	; 1d90c <close_stdout@@Base+0x2690>
   1d784:	cmp	r3, #39	; 0x27
   1d788:	ldr	r1, [pc, #384]	; 1d910 <close_stdout@@Base+0x2694>
   1d78c:	addeq	r4, r4, #1
   1d790:	add	r5, pc, r5
   1d794:	add	r1, pc, r1
   1d798:	mov	r3, #4
   1d79c:	mov	r0, r4
   1d7a0:	add	r2, r5, #12
   1d7a4:	moveq	r9, #4
   1d7a8:	movne	r9, #0
   1d7ac:	bl	1aed4 <__assert_fail@plt+0x8d48>
   1d7b0:	cmp	r0, #0
   1d7b4:	blt	1d820 <close_stdout@@Base+0x25a4>
   1d7b8:	add	r0, r5, r0, lsl #2
   1d7bc:	mov	r4, #1
   1d7c0:	mov	r5, #0
   1d7c4:	strd	r4, [r6]
   1d7c8:	ldr	r3, [r0, #12]
   1d7cc:	orr	r9, r9, r3
   1d7d0:	mov	r0, #0
   1d7d4:	str	r9, [r8]
   1d7d8:	ldrd	r4, [r6]
   1d7dc:	orrs	r3, r4, r5
   1d7e0:	bne	1d808 <close_stdout@@Base+0x258c>
   1d7e4:	ldr	r0, [pc, #296]	; 1d914 <close_stdout@@Base+0x2698>
   1d7e8:	mov	r5, #0
   1d7ec:	add	r0, pc, r0
   1d7f0:	bl	11ed4 <getenv@plt>
   1d7f4:	cmp	r0, #0
   1d7f8:	mov	r0, #4
   1d7fc:	movne	r4, #512	; 0x200
   1d800:	moveq	r4, #1024	; 0x400
   1d804:	strd	r4, [r6]
   1d808:	ldr	r2, [sp, #12]
   1d80c:	ldr	r3, [r7]
   1d810:	cmp	r2, r3
   1d814:	bne	1d900 <close_stdout@@Base+0x2684>
   1d818:	add	sp, sp, #20
   1d81c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d820:	ldr	ip, [pc, #240]	; 1d918 <close_stdout@@Base+0x269c>
   1d824:	mov	r3, r6
   1d828:	mov	r0, r4
   1d82c:	add	r1, sp, #8
   1d830:	add	ip, pc, ip
   1d834:	mov	r2, #0
   1d838:	str	ip, [sp]
   1d83c:	bl	22664 <close_stdout@@Base+0x73e8>
   1d840:	cmp	r0, #0
   1d844:	movne	r3, #0
   1d848:	strne	r3, [r8]
   1d84c:	bne	1d7d8 <close_stdout@@Base+0x255c>
   1d850:	ldrb	r3, [r4]
   1d854:	sub	r3, r3, #48	; 0x30
   1d858:	cmp	r3, #9
   1d85c:	bls	1d7d0 <close_stdout@@Base+0x2554>
   1d860:	ldr	r2, [sp, #8]
   1d864:	cmp	r4, r2
   1d868:	beq	1d884 <close_stdout@@Base+0x2608>
   1d86c:	ldrb	r3, [r4, #1]!
   1d870:	sub	r3, r3, #48	; 0x30
   1d874:	cmp	r3, #9
   1d878:	bls	1d7d0 <close_stdout@@Base+0x2554>
   1d87c:	cmp	r2, r4
   1d880:	bne	1d86c <close_stdout@@Base+0x25f0>
   1d884:	ldrb	r3, [r2, #-1]
   1d888:	cmp	r3, #66	; 0x42
   1d88c:	orrne	r9, r9, #128	; 0x80
   1d890:	beq	1d8ec <close_stdout@@Base+0x2670>
   1d894:	orr	r9, r9, #32
   1d898:	b	1d7d0 <close_stdout@@Base+0x2554>
   1d89c:	ldr	r0, [pc, #120]	; 1d91c <close_stdout@@Base+0x26a0>
   1d8a0:	add	r0, pc, r0
   1d8a4:	bl	11ed4 <getenv@plt>
   1d8a8:	subs	r4, r0, #0
   1d8ac:	bne	1d77c <close_stdout@@Base+0x2500>
   1d8b0:	ldr	r0, [pc, #104]	; 1d920 <close_stdout@@Base+0x26a4>
   1d8b4:	add	r0, pc, r0
   1d8b8:	bl	11ed4 <getenv@plt>
   1d8bc:	subs	r4, r0, #0
   1d8c0:	bne	1d77c <close_stdout@@Base+0x2500>
   1d8c4:	ldr	r0, [pc, #88]	; 1d924 <close_stdout@@Base+0x26a8>
   1d8c8:	mov	r9, #0
   1d8cc:	add	r0, pc, r0
   1d8d0:	bl	11ed4 <getenv@plt>
   1d8d4:	mov	r3, #0
   1d8d8:	cmp	r0, #0
   1d8dc:	movne	r2, #512	; 0x200
   1d8e0:	moveq	r2, #1024	; 0x400
   1d8e4:	strd	r2, [r6]
   1d8e8:	b	1d7d0 <close_stdout@@Base+0x2554>
   1d8ec:	ldrb	r3, [r2, #-2]
   1d8f0:	orr	r9, r9, #384	; 0x180
   1d8f4:	cmp	r3, #105	; 0x69
   1d8f8:	bne	1d7d0 <close_stdout@@Base+0x2554>
   1d8fc:	b	1d894 <close_stdout@@Base+0x2618>
   1d900:	bl	11d78 <__stack_chk_fail@plt>
   1d904:	muleq	r1, ip, r8
   1d908:	andeq	r0, r0, r0, ror #3
   1d90c:	andeq	r9, r0, r8, ror #18
   1d910:	andeq	fp, r1, r4, lsr #14
   1d914:	andeq	r9, r0, ip, lsr r9
   1d918:	andeq	r9, r0, r8, lsl #18
   1d91c:	andeq	r9, r0, r8, lsr #2
   1d920:	andeq	r9, r0, r8, ror #16
   1d924:	andeq	r9, r0, ip, asr r8
   1d928:	ldr	r3, [pc, #156]	; 1d9cc <close_stdout@@Base+0x2750>
   1d92c:	push	{r4, r5, r6, lr}
   1d930:	add	r3, pc, r3
   1d934:	mov	r5, r0
   1d938:	ldr	r4, [r3]
   1d93c:	cmp	r4, #0
   1d940:	bne	1d954 <close_stdout@@Base+0x26d8>
   1d944:	b	1d970 <close_stdout@@Base+0x26f4>
   1d948:	ldr	r4, [r4, #4]
   1d94c:	cmp	r4, #0
   1d950:	beq	1d970 <close_stdout@@Base+0x26f4>
   1d954:	ldr	r3, [r4]
   1d958:	cmp	r3, r5
   1d95c:	bne	1d948 <close_stdout@@Base+0x26cc>
   1d960:	ldrb	r0, [r4, #8]
   1d964:	cmp	r0, #0
   1d968:	addne	r0, r4, #8
   1d96c:	pop	{r4, r5, r6, pc}
   1d970:	mov	r0, r5
   1d974:	bl	11c94 <getpwuid@plt>
   1d978:	cmp	r0, #0
   1d97c:	beq	1d9bc <close_stdout@@Base+0x2740>
   1d980:	ldr	r6, [r0]
   1d984:	mov	r0, r6
   1d988:	bl	11fac <strlen@plt>
   1d98c:	add	r0, r0, #9
   1d990:	bl	21dcc <close_stdout@@Base+0x6b50>
   1d994:	mov	r1, r6
   1d998:	mov	r4, r0
   1d99c:	str	r5, [r0], #8
   1d9a0:	bl	11e5c <strcpy@plt>
   1d9a4:	ldr	r3, [pc, #36]	; 1d9d0 <close_stdout@@Base+0x2754>
   1d9a8:	add	r3, pc, r3
   1d9ac:	ldr	r2, [r3]
   1d9b0:	str	r4, [r3]
   1d9b4:	str	r2, [r4, #4]
   1d9b8:	b	1d960 <close_stdout@@Base+0x26e4>
   1d9bc:	ldr	r6, [pc, #16]	; 1d9d4 <close_stdout@@Base+0x2758>
   1d9c0:	mov	r0, #9
   1d9c4:	add	r6, pc, r6
   1d9c8:	b	1d990 <close_stdout@@Base+0x2714>
   1d9cc:	andeq	ip, r1, ip, asr r5
   1d9d0:	andeq	ip, r1, r4, ror #9
   1d9d4:	andeq	r8, r0, ip, lsl #28
   1d9d8:	push	{r3, r4, r5, r6, r7, lr}
   1d9dc:	mov	r7, r0
   1d9e0:	ldr	r3, [pc, #272]	; 1daf8 <close_stdout@@Base+0x287c>
   1d9e4:	add	r3, pc, r3
   1d9e8:	ldr	r4, [r3]
   1d9ec:	cmp	r4, #0
   1d9f0:	beq	1da30 <close_stdout@@Base+0x27b4>
   1d9f4:	ldrb	r5, [r0]
   1d9f8:	b	1da08 <close_stdout@@Base+0x278c>
   1d9fc:	ldr	r4, [r4, #4]
   1da00:	cmp	r4, #0
   1da04:	beq	1da30 <close_stdout@@Base+0x27b4>
   1da08:	ldrb	r3, [r4, #8]
   1da0c:	cmp	r3, r5
   1da10:	bne	1d9fc <close_stdout@@Base+0x2780>
   1da14:	add	r0, r4, #8
   1da18:	mov	r1, r7
   1da1c:	bl	11c88 <strcmp@plt>
   1da20:	cmp	r0, #0
   1da24:	bne	1d9fc <close_stdout@@Base+0x2780>
   1da28:	mov	r0, r4
   1da2c:	pop	{r3, r4, r5, r6, r7, pc}
   1da30:	ldr	r3, [pc, #196]	; 1dafc <close_stdout@@Base+0x2880>
   1da34:	add	r3, pc, r3
   1da38:	ldr	r5, [r3, #4]
   1da3c:	cmp	r5, #0
   1da40:	beq	1da84 <close_stdout@@Base+0x2808>
   1da44:	ldrb	r6, [r7]
   1da48:	b	1da58 <close_stdout@@Base+0x27dc>
   1da4c:	ldr	r5, [r5, #4]
   1da50:	cmp	r5, #0
   1da54:	beq	1da84 <close_stdout@@Base+0x2808>
   1da58:	ldrb	r3, [r5, #8]
   1da5c:	cmp	r3, r6
   1da60:	bne	1da4c <close_stdout@@Base+0x27d0>
   1da64:	add	r0, r5, #8
   1da68:	mov	r1, r7
   1da6c:	bl	11c88 <strcmp@plt>
   1da70:	cmp	r0, #0
   1da74:	popeq	{r3, r4, r5, r6, r7, pc}
   1da78:	ldr	r5, [r5, #4]
   1da7c:	cmp	r5, #0
   1da80:	bne	1da58 <close_stdout@@Base+0x27dc>
   1da84:	mov	r0, r7
   1da88:	bl	11c7c <getpwnam@plt>
   1da8c:	mov	r4, r0
   1da90:	mov	r0, r7
   1da94:	bl	11fac <strlen@plt>
   1da98:	add	r0, r0, #9
   1da9c:	bl	21dcc <close_stdout@@Base+0x6b50>
   1daa0:	mov	r1, r7
   1daa4:	mov	r5, r0
   1daa8:	add	r0, r0, #8
   1daac:	bl	11e5c <strcpy@plt>
   1dab0:	cmp	r4, #0
   1dab4:	beq	1dadc <close_stdout@@Base+0x2860>
   1dab8:	ldr	r3, [pc, #64]	; 1db00 <close_stdout@@Base+0x2884>
   1dabc:	mov	r0, r5
   1dac0:	ldr	r1, [r4, #8]
   1dac4:	add	r3, pc, r3
   1dac8:	ldr	r2, [r3]
   1dacc:	str	r1, [r5]
   1dad0:	str	r5, [r3]
   1dad4:	str	r2, [r5, #4]
   1dad8:	pop	{r3, r4, r5, r6, r7, pc}
   1dadc:	ldr	r3, [pc, #32]	; 1db04 <close_stdout@@Base+0x2888>
   1dae0:	mov	r0, r4
   1dae4:	add	r3, pc, r3
   1dae8:	ldr	r2, [r3, #4]
   1daec:	str	r5, [r3, #4]
   1daf0:	str	r2, [r5, #4]
   1daf4:	pop	{r3, r4, r5, r6, r7, pc}
   1daf8:	andeq	ip, r1, r8, lsr #9
   1dafc:	andeq	ip, r1, r8, asr r4
   1db00:	andeq	ip, r1, r8, asr #7
   1db04:	andeq	ip, r1, r8, lsr #7
   1db08:	ldr	r3, [pc, #156]	; 1dbac <close_stdout@@Base+0x2930>
   1db0c:	push	{r4, r5, r6, lr}
   1db10:	add	r3, pc, r3
   1db14:	mov	r5, r0
   1db18:	ldr	r4, [r3, #8]
   1db1c:	cmp	r4, #0
   1db20:	bne	1db34 <close_stdout@@Base+0x28b8>
   1db24:	b	1db50 <close_stdout@@Base+0x28d4>
   1db28:	ldr	r4, [r4, #4]
   1db2c:	cmp	r4, #0
   1db30:	beq	1db50 <close_stdout@@Base+0x28d4>
   1db34:	ldr	r3, [r4]
   1db38:	cmp	r3, r5
   1db3c:	bne	1db28 <close_stdout@@Base+0x28ac>
   1db40:	ldrb	r0, [r4, #8]
   1db44:	cmp	r0, #0
   1db48:	addne	r0, r4, #8
   1db4c:	pop	{r4, r5, r6, pc}
   1db50:	mov	r0, r5
   1db54:	bl	12168 <getgrgid@plt>
   1db58:	cmp	r0, #0
   1db5c:	beq	1db9c <close_stdout@@Base+0x2920>
   1db60:	ldr	r6, [r0]
   1db64:	mov	r0, r6
   1db68:	bl	11fac <strlen@plt>
   1db6c:	add	r0, r0, #9
   1db70:	bl	21dcc <close_stdout@@Base+0x6b50>
   1db74:	mov	r1, r6
   1db78:	mov	r4, r0
   1db7c:	str	r5, [r0], #8
   1db80:	bl	11e5c <strcpy@plt>
   1db84:	ldr	r3, [pc, #36]	; 1dbb0 <close_stdout@@Base+0x2934>
   1db88:	add	r3, pc, r3
   1db8c:	ldr	r2, [r3, #8]
   1db90:	str	r4, [r3, #8]
   1db94:	str	r2, [r4, #4]
   1db98:	b	1db40 <close_stdout@@Base+0x28c4>
   1db9c:	ldr	r6, [pc, #16]	; 1dbb4 <close_stdout@@Base+0x2938>
   1dba0:	mov	r0, #9
   1dba4:	add	r6, pc, r6
   1dba8:	b	1db70 <close_stdout@@Base+0x28f4>
   1dbac:	andeq	ip, r1, ip, ror r3
   1dbb0:	andeq	ip, r1, r4, lsl #6
   1dbb4:	andeq	r8, r0, ip, lsr #24
   1dbb8:	push	{r3, r4, r5, r6, r7, lr}
   1dbbc:	mov	r7, r0
   1dbc0:	ldr	r3, [pc, #272]	; 1dcd8 <close_stdout@@Base+0x2a5c>
   1dbc4:	add	r3, pc, r3
   1dbc8:	ldr	r4, [r3, #8]
   1dbcc:	cmp	r4, #0
   1dbd0:	beq	1dc10 <close_stdout@@Base+0x2994>
   1dbd4:	ldrb	r5, [r0]
   1dbd8:	b	1dbe8 <close_stdout@@Base+0x296c>
   1dbdc:	ldr	r4, [r4, #4]
   1dbe0:	cmp	r4, #0
   1dbe4:	beq	1dc10 <close_stdout@@Base+0x2994>
   1dbe8:	ldrb	r3, [r4, #8]
   1dbec:	cmp	r3, r5
   1dbf0:	bne	1dbdc <close_stdout@@Base+0x2960>
   1dbf4:	add	r0, r4, #8
   1dbf8:	mov	r1, r7
   1dbfc:	bl	11c88 <strcmp@plt>
   1dc00:	cmp	r0, #0
   1dc04:	bne	1dbdc <close_stdout@@Base+0x2960>
   1dc08:	mov	r0, r4
   1dc0c:	pop	{r3, r4, r5, r6, r7, pc}
   1dc10:	ldr	r3, [pc, #196]	; 1dcdc <close_stdout@@Base+0x2a60>
   1dc14:	add	r3, pc, r3
   1dc18:	ldr	r5, [r3, #12]
   1dc1c:	cmp	r5, #0
   1dc20:	beq	1dc64 <close_stdout@@Base+0x29e8>
   1dc24:	ldrb	r6, [r7]
   1dc28:	b	1dc38 <close_stdout@@Base+0x29bc>
   1dc2c:	ldr	r5, [r5, #4]
   1dc30:	cmp	r5, #0
   1dc34:	beq	1dc64 <close_stdout@@Base+0x29e8>
   1dc38:	ldrb	r3, [r5, #8]
   1dc3c:	cmp	r3, r6
   1dc40:	bne	1dc2c <close_stdout@@Base+0x29b0>
   1dc44:	add	r0, r5, #8
   1dc48:	mov	r1, r7
   1dc4c:	bl	11c88 <strcmp@plt>
   1dc50:	cmp	r0, #0
   1dc54:	popeq	{r3, r4, r5, r6, r7, pc}
   1dc58:	ldr	r5, [r5, #4]
   1dc5c:	cmp	r5, #0
   1dc60:	bne	1dc38 <close_stdout@@Base+0x29bc>
   1dc64:	mov	r0, r7
   1dc68:	bl	12174 <getgrnam@plt>
   1dc6c:	mov	r4, r0
   1dc70:	mov	r0, r7
   1dc74:	bl	11fac <strlen@plt>
   1dc78:	add	r0, r0, #9
   1dc7c:	bl	21dcc <close_stdout@@Base+0x6b50>
   1dc80:	mov	r1, r7
   1dc84:	mov	r5, r0
   1dc88:	add	r0, r0, #8
   1dc8c:	bl	11e5c <strcpy@plt>
   1dc90:	cmp	r4, #0
   1dc94:	beq	1dcbc <close_stdout@@Base+0x2a40>
   1dc98:	ldr	r3, [pc, #64]	; 1dce0 <close_stdout@@Base+0x2a64>
   1dc9c:	mov	r0, r5
   1dca0:	ldr	r1, [r4, #8]
   1dca4:	add	r3, pc, r3
   1dca8:	ldr	r2, [r3, #8]
   1dcac:	str	r1, [r5]
   1dcb0:	str	r5, [r3, #8]
   1dcb4:	str	r2, [r5, #4]
   1dcb8:	pop	{r3, r4, r5, r6, r7, pc}
   1dcbc:	ldr	r3, [pc, #32]	; 1dce4 <close_stdout@@Base+0x2a68>
   1dcc0:	mov	r0, r4
   1dcc4:	add	r3, pc, r3
   1dcc8:	ldr	r2, [r3, #12]
   1dccc:	str	r5, [r3, #12]
   1dcd0:	str	r2, [r5, #4]
   1dcd4:	pop	{r3, r4, r5, r6, r7, pc}
   1dcd8:	andeq	ip, r1, r8, asr #5
   1dcdc:	andeq	ip, r1, r8, ror r2
   1dce0:	andeq	ip, r1, r8, ror #3
   1dce4:	andeq	ip, r1, r8, asr #3
   1dce8:	push	{r4, r5, r6, r7, r8, lr}
   1dcec:	mov	r4, r0
   1dcf0:	mov	r5, r1
   1dcf4:	cmp	r4, #0
   1dcf8:	sbcs	r3, r5, #0
   1dcfc:	add	r6, r2, #19
   1dd00:	mov	r3, #0
   1dd04:	strb	r3, [r2, #20]
   1dd08:	blt	1dd58 <close_stdout@@Base+0x2adc>
   1dd0c:	mov	r0, r4
   1dd10:	mov	r1, r5
   1dd14:	mov	r2, #10
   1dd18:	mov	r3, #0
   1dd1c:	bl	23ab0 <close_stdout@@Base+0x8834>
   1dd20:	mov	r7, r6
   1dd24:	mov	r0, r4
   1dd28:	mov	r1, r5
   1dd2c:	mov	r3, #0
   1dd30:	add	ip, r2, #48	; 0x30
   1dd34:	mov	r2, #10
   1dd38:	strb	ip, [r6], #-1
   1dd3c:	bl	23ab0 <close_stdout@@Base+0x8834>
   1dd40:	mov	r4, r0
   1dd44:	mov	r5, r1
   1dd48:	orrs	r3, r4, r5
   1dd4c:	bne	1dd0c <close_stdout@@Base+0x2a90>
   1dd50:	mov	r0, r7
   1dd54:	pop	{r4, r5, r6, r7, r8, pc}
   1dd58:	mov	r0, r4
   1dd5c:	mov	r1, r5
   1dd60:	mov	r2, #10
   1dd64:	mov	r3, #0
   1dd68:	bl	23ab0 <close_stdout@@Base+0x8834>
   1dd6c:	mov	r8, r6
   1dd70:	mov	r0, r4
   1dd74:	mov	r1, r5
   1dd78:	mov	r3, #0
   1dd7c:	rsb	ip, r2, #48	; 0x30
   1dd80:	mov	r2, #10
   1dd84:	strb	ip, [r6], #-1
   1dd88:	bl	23ab0 <close_stdout@@Base+0x8834>
   1dd8c:	mov	r4, r0
   1dd90:	mov	r5, r1
   1dd94:	orrs	r3, r4, r5
   1dd98:	bne	1dd58 <close_stdout@@Base+0x2adc>
   1dd9c:	mov	r7, r6
   1dda0:	mov	r3, #45	; 0x2d
   1dda4:	mov	r0, r7
   1dda8:	strb	r3, [r8, #-1]
   1ddac:	pop	{r4, r5, r6, r7, r8, pc}
   1ddb0:	push	{r3, r4, r5, r6, r7, lr}
   1ddb4:	add	r6, r2, #19
   1ddb8:	mov	r4, r0
   1ddbc:	mov	r5, r1
   1ddc0:	mov	r3, #0
   1ddc4:	strb	r3, [r2, #20]
   1ddc8:	mov	r0, r4
   1ddcc:	mov	r1, r5
   1ddd0:	mov	r2, #10
   1ddd4:	mov	r3, #0
   1ddd8:	bl	23af8 <close_stdout@@Base+0x887c>
   1dddc:	mov	r7, r6
   1dde0:	mov	r0, r4
   1dde4:	mov	r1, r5
   1dde8:	mov	r3, #0
   1ddec:	add	ip, r2, #48	; 0x30
   1ddf0:	mov	r2, #10
   1ddf4:	strb	ip, [r6], #-1
   1ddf8:	bl	23af8 <close_stdout@@Base+0x887c>
   1ddfc:	mov	r4, r0
   1de00:	mov	r5, r1
   1de04:	orrs	r3, r4, r5
   1de08:	bne	1ddc8 <close_stdout@@Base+0x2b4c>
   1de0c:	mov	r0, r7
   1de10:	pop	{r3, r4, r5, r6, r7, pc}
   1de14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de18:	sub	sp, sp, #20
   1de1c:	mov	r4, r1
   1de20:	mov	r7, r3
   1de24:	str	r2, [sp, #8]
   1de28:	str	r0, [sp, #4]
   1de2c:	bl	11fac <strlen@plt>
   1de30:	ldr	ip, [sp, #60]	; 0x3c
   1de34:	ands	sl, ip, #2
   1de38:	mov	r9, r0
   1de3c:	beq	1dfc8 <close_stdout@@Base+0x2d4c>
   1de40:	mov	r6, #0
   1de44:	mov	r5, r9
   1de48:	mov	sl, #0
   1de4c:	ldr	r2, [r7]
   1de50:	cmp	r5, r2
   1de54:	movhi	r9, r2
   1de58:	movhi	fp, #0
   1de5c:	bls	1df88 <close_stdout@@Base+0x2d0c>
   1de60:	ldr	ip, [sp, #56]	; 0x38
   1de64:	str	r2, [r7]
   1de68:	cmp	ip, #0
   1de6c:	beq	1dfac <close_stdout@@Base+0x2d30>
   1de70:	cmp	ip, #1
   1de74:	moveq	r5, #0
   1de78:	bne	1dfb8 <close_stdout@@Base+0x2d3c>
   1de7c:	ldr	ip, [sp, #60]	; 0x3c
   1de80:	tst	ip, #4
   1de84:	movne	fp, #0
   1de88:	tst	ip, #8
   1de8c:	ldr	ip, [sp, #8]
   1de90:	movne	r5, #0
   1de94:	cmp	ip, #0
   1de98:	beq	1df3c <close_stdout@@Base+0x2cc0>
   1de9c:	cmp	fp, #0
   1dea0:	sub	r8, ip, #1
   1dea4:	add	r8, r4, r8
   1dea8:	sub	r1, fp, #1
   1deac:	beq	1dedc <close_stdout@@Base+0x2c60>
   1deb0:	cmp	r4, r8
   1deb4:	bcs	1dedc <close_stdout@@Base+0x2c60>
   1deb8:	mov	r2, #0
   1debc:	mov	r0, #32
   1dec0:	b	1decc <close_stdout@@Base+0x2c50>
   1dec4:	cmp	r4, r8
   1dec8:	beq	1dedc <close_stdout@@Base+0x2c60>
   1decc:	cmp	r1, r2
   1ded0:	strb	r0, [r4], #1
   1ded4:	add	r2, r2, #1
   1ded8:	bne	1dec4 <close_stdout@@Base+0x2c48>
   1dedc:	rsb	r2, r4, r8
   1dee0:	ldr	r1, [sp, #4]
   1dee4:	cmp	r2, r9
   1dee8:	movcs	r2, r9
   1deec:	mov	r7, #0
   1def0:	mov	r0, r4
   1def4:	strb	r7, [r4]
   1def8:	bl	11f58 <mempcpy@plt>
   1defc:	cmp	r5, r7
   1df00:	sub	r1, r5, #1
   1df04:	beq	1df34 <close_stdout@@Base+0x2cb8>
   1df08:	cmp	r8, r0
   1df0c:	bls	1df34 <close_stdout@@Base+0x2cb8>
   1df10:	mov	r2, r7
   1df14:	mov	ip, #32
   1df18:	b	1df24 <close_stdout@@Base+0x2ca8>
   1df1c:	cmp	r0, r8
   1df20:	beq	1df34 <close_stdout@@Base+0x2cb8>
   1df24:	cmp	r1, r2
   1df28:	strb	ip, [r0], #1
   1df2c:	add	r2, r2, #1
   1df30:	bne	1df1c <close_stdout@@Base+0x2ca0>
   1df34:	mov	r2, #0
   1df38:	strb	r2, [r0]
   1df3c:	add	r3, fp, r9
   1df40:	add	r5, r3, r5
   1df44:	mov	r0, r6
   1df48:	bl	11ce8 <free@plt>
   1df4c:	mov	r0, sl
   1df50:	bl	11ce8 <free@plt>
   1df54:	mov	r0, r5
   1df58:	add	sp, sp, #20
   1df5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df60:	mov	r1, r5
   1df64:	mov	r0, r6
   1df68:	bl	12090 <wcswidth@plt>
   1df6c:	mov	r5, r0
   1df70:	ldr	r2, [r7]
   1df74:	cmp	r5, r2
   1df78:	addhi	ip, r9, #1
   1df7c:	strhi	ip, [sp, #12]
   1df80:	bhi	1e0a4 <close_stdout@@Base+0x2e28>
   1df84:	mov	sl, #0
   1df88:	cmp	r5, r2
   1df8c:	ldr	ip, [sp, #56]	; 0x38
   1df90:	rsbcc	fp, r5, r2
   1df94:	movcs	r2, r5
   1df98:	movcc	r2, r5
   1df9c:	movcs	fp, #0
   1dfa0:	cmp	ip, #0
   1dfa4:	str	r2, [r7]
   1dfa8:	bne	1de70 <close_stdout@@Base+0x2bf4>
   1dfac:	mov	r5, fp
   1dfb0:	ldr	fp, [sp, #56]	; 0x38
   1dfb4:	b	1de7c <close_stdout@@Base+0x2c00>
   1dfb8:	lsr	r5, fp, #1
   1dfbc:	and	fp, fp, #1
   1dfc0:	add	fp, fp, r5
   1dfc4:	b	1de7c <close_stdout@@Base+0x2c00>
   1dfc8:	bl	11e50 <__ctype_get_mb_cur_max@plt>
   1dfcc:	cmp	r0, #1
   1dfd0:	bls	1de40 <close_stdout@@Base+0x2bc4>
   1dfd4:	mov	r0, sl
   1dfd8:	ldr	r1, [sp, #4]
   1dfdc:	mov	r2, sl
   1dfe0:	bl	120cc <mbstowcs@plt>
   1dfe4:	cmn	r0, #1
   1dfe8:	bne	1e008 <close_stdout@@Base+0x2d8c>
   1dfec:	ldr	ip, [sp, #60]	; 0x3c
   1dff0:	tst	ip, #1
   1dff4:	bne	1e16c <close_stdout@@Base+0x2ef0>
   1dff8:	mov	r6, #0
   1dffc:	mvn	r5, #0
   1e000:	mov	sl, r6
   1e004:	b	1df44 <close_stdout@@Base+0x2cc8>
   1e008:	add	r5, r0, #1
   1e00c:	lsl	fp, r5, #2
   1e010:	mov	r0, fp
   1e014:	bl	11eec <malloc@plt>
   1e018:	subs	r6, r0, #0
   1e01c:	beq	1e178 <close_stdout@@Base+0x2efc>
   1e020:	ldr	r1, [sp, #4]
   1e024:	mov	r2, r5
   1e028:	bl	120cc <mbstowcs@plt>
   1e02c:	cmp	r0, #0
   1e030:	beq	1de44 <close_stdout@@Base+0x2bc8>
   1e034:	add	fp, r6, fp
   1e038:	str	sl, [fp, #-4]
   1e03c:	ldr	r8, [r6]
   1e040:	cmp	r8, #0
   1e044:	beq	1df60 <close_stdout@@Base+0x2ce4>
   1e048:	add	fp, r6, #4
   1e04c:	mov	r0, r8
   1e050:	bl	11dd8 <iswprint@plt>
   1e054:	cmp	r0, #0
   1e058:	movweq	r3, #65533	; 0xfffd
   1e05c:	streq	r3, [fp, #-4]
   1e060:	ldr	r0, [fp], #4
   1e064:	moveq	sl, #1
   1e068:	cmp	r0, #0
   1e06c:	bne	1e050 <close_stdout@@Base+0x2dd4>
   1e070:	mov	r1, r5
   1e074:	mov	r8, r0
   1e078:	mov	r0, r6
   1e07c:	bl	12090 <wcswidth@plt>
   1e080:	cmp	sl, #0
   1e084:	mov	r5, r0
   1e088:	beq	1df70 <close_stdout@@Base+0x2cf4>
   1e08c:	mov	r0, r8
   1e090:	mov	r1, r6
   1e094:	mov	r2, r8
   1e098:	bl	11e8c <wcstombs@plt>
   1e09c:	add	r0, r0, #1
   1e0a0:	str	r0, [sp, #12]
   1e0a4:	ldr	r0, [sp, #12]
   1e0a8:	bl	11eec <malloc@plt>
   1e0ac:	subs	sl, r0, #0
   1e0b0:	beq	1e158 <close_stdout@@Base+0x2edc>
   1e0b4:	ldr	r0, [r6]
   1e0b8:	ldr	r9, [r7]
   1e0bc:	cmp	r0, #0
   1e0c0:	beq	1e190 <close_stdout@@Base+0x2f14>
   1e0c4:	mov	r5, #0
   1e0c8:	str	r4, [sp, #4]
   1e0cc:	add	fp, r6, #4
   1e0d0:	mov	r4, r5
   1e0d4:	mov	r5, r6
   1e0d8:	b	1e0ec <close_stdout@@Base+0x2e70>
   1e0dc:	ldr	r0, [r5, #4]!
   1e0e0:	mov	r4, r1
   1e0e4:	cmp	r0, #0
   1e0e8:	beq	1e148 <close_stdout@@Base+0x2ecc>
   1e0ec:	bl	11cb8 <wcwidth@plt>
   1e0f0:	mov	r8, r5
   1e0f4:	mov	ip, fp
   1e0f8:	add	fp, fp, #4
   1e0fc:	cmn	r0, #1
   1e100:	moveq	r0, #1
   1e104:	add	r1, r0, r4
   1e108:	movweq	r3, #65533	; 0xfffd
   1e10c:	streq	r3, [fp, #-8]
   1e110:	cmp	r9, r1
   1e114:	bcs	1e0dc <close_stdout@@Base+0x2e60>
   1e118:	mov	r5, r4
   1e11c:	ldr	r4, [sp, #4]
   1e120:	mov	r9, r8
   1e124:	mov	r3, #0
   1e128:	ldr	r2, [sp, #12]
   1e12c:	str	r3, [r9]
   1e130:	mov	r0, sl
   1e134:	mov	r1, r6
   1e138:	str	sl, [sp, #4]
   1e13c:	bl	11e8c <wcstombs@plt>
   1e140:	mov	r9, r0
   1e144:	b	1de4c <close_stdout@@Base+0x2bd0>
   1e148:	ldr	r4, [sp, #4]
   1e14c:	mov	r5, r1
   1e150:	mov	r9, ip
   1e154:	b	1e124 <close_stdout@@Base+0x2ea8>
   1e158:	ldr	ip, [sp, #60]	; 0x3c
   1e15c:	tst	ip, #1
   1e160:	mvneq	r5, #0
   1e164:	beq	1df44 <close_stdout@@Base+0x2cc8>
   1e168:	b	1de4c <close_stdout@@Base+0x2bd0>
   1e16c:	mov	r6, sl
   1e170:	mov	r5, r9
   1e174:	b	1de4c <close_stdout@@Base+0x2bd0>
   1e178:	ldr	ip, [sp, #60]	; 0x3c
   1e17c:	tst	ip, #1
   1e180:	beq	1dff8 <close_stdout@@Base+0x2d7c>
   1e184:	mov	r5, r9
   1e188:	mov	sl, r6
   1e18c:	b	1de4c <close_stdout@@Base+0x2bd0>
   1e190:	mov	r5, r0
   1e194:	mov	r9, r6
   1e198:	b	1e124 <close_stdout@@Base+0x2ea8>
   1e19c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1a0:	sub	sp, sp, #12
   1e1a4:	ldr	r7, [r1]
   1e1a8:	mov	r8, r0
   1e1ac:	mov	r5, r1
   1e1b0:	mov	sl, r2
   1e1b4:	mov	r9, r3
   1e1b8:	mov	r6, #0
   1e1bc:	mov	r0, r7
   1e1c0:	add	r4, r0, #1
   1e1c4:	mov	r0, r6
   1e1c8:	mov	r1, r4
   1e1cc:	bl	11d90 <realloc@plt>
   1e1d0:	mov	r2, r4
   1e1d4:	mov	r3, r5
   1e1d8:	subs	fp, r0, #0
   1e1dc:	mov	r0, r8
   1e1e0:	mov	r1, fp
   1e1e4:	beq	1e218 <close_stdout@@Base+0x2f9c>
   1e1e8:	str	r7, [r5]
   1e1ec:	mov	r6, fp
   1e1f0:	str	sl, [sp]
   1e1f4:	str	r9, [sp, #4]
   1e1f8:	bl	1de14 <close_stdout@@Base+0x2b98>
   1e1fc:	cmn	r0, #1
   1e200:	beq	1e22c <close_stdout@@Base+0x2fb0>
   1e204:	cmp	r4, r0
   1e208:	bls	1e1c0 <close_stdout@@Base+0x2f44>
   1e20c:	mov	r0, fp
   1e210:	add	sp, sp, #12
   1e214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e218:	mov	r0, r6
   1e21c:	bl	11ce8 <free@plt>
   1e220:	mov	r0, fp
   1e224:	add	sp, sp, #12
   1e228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e22c:	mov	r0, fp
   1e230:	mov	fp, #0
   1e234:	bl	11ce8 <free@plt>
   1e238:	mov	r0, fp
   1e23c:	add	sp, sp, #12
   1e240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e244:	ldr	r3, [pc, #524]	; 1e458 <close_stdout@@Base+0x31dc>
   1e248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e24c:	mov	r4, r0
   1e250:	ldr	r0, [pc, #516]	; 1e45c <close_stdout@@Base+0x31e0>
   1e254:	add	r3, pc, r3
   1e258:	sub	sp, sp, #28
   1e25c:	add	r7, r4, r1
   1e260:	mov	fp, r2
   1e264:	ldr	r0, [r3, r0]
   1e268:	ldr	r3, [r0]
   1e26c:	str	r0, [sp]
   1e270:	str	r3, [sp, #20]
   1e274:	bl	11e50 <__ctype_get_mb_cur_max@plt>
   1e278:	cmp	r0, #1
   1e27c:	bls	1e3ec <close_stdout@@Base+0x3170>
   1e280:	cmp	r4, r7
   1e284:	bcs	1e44c <close_stdout@@Base+0x31d0>
   1e288:	mov	r5, #0
   1e28c:	and	r9, fp, #2
   1e290:	add	r6, sp, #12
   1e294:	and	fp, fp, #1
   1e298:	add	r8, sp, #8
   1e29c:	str	fp, [sp, #4]
   1e2a0:	mov	sl, r5
   1e2a4:	b	1e2cc <close_stdout@@Base+0x3050>
   1e2a8:	cmp	r3, #37	; 0x25
   1e2ac:	bcs	1e2bc <close_stdout@@Base+0x3040>
   1e2b0:	sub	r3, r3, #32
   1e2b4:	cmp	r3, #3
   1e2b8:	bhi	1e2f4 <close_stdout@@Base+0x3078>
   1e2bc:	add	r4, r4, #1
   1e2c0:	add	r5, r5, #1
   1e2c4:	cmp	r7, r4
   1e2c8:	bls	1e3dc <close_stdout@@Base+0x3160>
   1e2cc:	ldrb	r3, [r4]
   1e2d0:	cmp	r3, #63	; 0x3f
   1e2d4:	bls	1e2a8 <close_stdout@@Base+0x302c>
   1e2d8:	cmp	r3, #65	; 0x41
   1e2dc:	bcc	1e2f4 <close_stdout@@Base+0x3078>
   1e2e0:	cmp	r3, #95	; 0x5f
   1e2e4:	bls	1e2bc <close_stdout@@Base+0x3040>
   1e2e8:	sub	r3, r3, #97	; 0x61
   1e2ec:	cmp	r3, #29
   1e2f0:	bls	1e2bc <close_stdout@@Base+0x3040>
   1e2f4:	str	sl, [r6]
   1e2f8:	str	sl, [r6, #4]
   1e2fc:	b	1e32c <close_stdout@@Base+0x30b0>
   1e300:	movw	r2, #65535	; 0xffff
   1e304:	movt	r2, #32767	; 0x7fff
   1e308:	rsb	r2, r5, r2
   1e30c:	cmp	r0, r2
   1e310:	bgt	1e3e4 <close_stdout@@Base+0x3168>
   1e314:	add	r5, r5, r0
   1e318:	mov	r0, r6
   1e31c:	add	r4, r4, fp
   1e320:	bl	11d24 <mbsinit@plt>
   1e324:	cmp	r0, #0
   1e328:	bne	1e2c4 <close_stdout@@Base+0x3048>
   1e32c:	mov	r0, r8
   1e330:	mov	r1, r4
   1e334:	rsb	r2, r4, r7
   1e338:	mov	r3, r6
   1e33c:	bl	11e80 <mbrtowc@plt>
   1e340:	cmn	r0, #1
   1e344:	mov	fp, r0
   1e348:	beq	1e394 <close_stdout@@Base+0x3118>
   1e34c:	cmn	r0, #2
   1e350:	beq	1e3c0 <close_stdout@@Base+0x3144>
   1e354:	cmp	fp, #0
   1e358:	ldr	r0, [sp, #8]
   1e35c:	moveq	fp, #1
   1e360:	bl	11cb8 <wcwidth@plt>
   1e364:	cmp	r0, #0
   1e368:	bge	1e300 <close_stdout@@Base+0x3084>
   1e36c:	cmp	r9, #0
   1e370:	bne	1e3a0 <close_stdout@@Base+0x3124>
   1e374:	ldr	r0, [sp, #8]
   1e378:	bl	11dc0 <iswcntrl@plt>
   1e37c:	cmp	r0, #0
   1e380:	bne	1e318 <close_stdout@@Base+0x309c>
   1e384:	cmn	r5, #-2147483647	; 0x80000001
   1e388:	beq	1e3e4 <close_stdout@@Base+0x3168>
   1e38c:	add	r5, r5, #1
   1e390:	b	1e318 <close_stdout@@Base+0x309c>
   1e394:	ldr	r1, [sp, #4]
   1e398:	cmp	r1, #0
   1e39c:	beq	1e2bc <close_stdout@@Base+0x3040>
   1e3a0:	mvn	r0, #0
   1e3a4:	ldr	r1, [sp]
   1e3a8:	ldr	r2, [sp, #20]
   1e3ac:	ldr	r3, [r1]
   1e3b0:	cmp	r2, r3
   1e3b4:	bne	1e454 <close_stdout@@Base+0x31d8>
   1e3b8:	add	sp, sp, #28
   1e3bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3c0:	ldr	r2, [sp, #4]
   1e3c4:	cmp	r2, #0
   1e3c8:	bne	1e3a0 <close_stdout@@Base+0x3124>
   1e3cc:	mov	r4, r7
   1e3d0:	cmp	r7, r4
   1e3d4:	add	r5, r5, #1
   1e3d8:	bhi	1e2cc <close_stdout@@Base+0x3050>
   1e3dc:	mov	r0, r5
   1e3e0:	b	1e3a4 <close_stdout@@Base+0x3128>
   1e3e4:	mvn	r0, #-2147483648	; 0x80000000
   1e3e8:	b	1e3a4 <close_stdout@@Base+0x3128>
   1e3ec:	cmp	r4, r7
   1e3f0:	bcs	1e44c <close_stdout@@Base+0x31d0>
   1e3f4:	bl	11f70 <__ctype_b_loc@plt>
   1e3f8:	mov	r5, #0
   1e3fc:	and	r1, fp, #2
   1e400:	ldr	r2, [r0]
   1e404:	b	1e41c <close_stdout@@Base+0x31a0>
   1e408:	cmn	r5, #-2147483647	; 0x80000001
   1e40c:	beq	1e3e4 <close_stdout@@Base+0x3168>
   1e410:	add	r5, r5, #1
   1e414:	cmp	r4, r7
   1e418:	beq	1e3dc <close_stdout@@Base+0x3160>
   1e41c:	ldrb	r3, [r4], #1
   1e420:	lsl	r3, r3, #1
   1e424:	ldrh	r3, [r2, r3]
   1e428:	tst	r3, #16384	; 0x4000
   1e42c:	bne	1e408 <close_stdout@@Base+0x318c>
   1e430:	cmp	r1, #0
   1e434:	bne	1e3a0 <close_stdout@@Base+0x3124>
   1e438:	tst	r3, #2
   1e43c:	bne	1e414 <close_stdout@@Base+0x3198>
   1e440:	cmn	r5, #-2147483647	; 0x80000001
   1e444:	bne	1e410 <close_stdout@@Base+0x3194>
   1e448:	b	1e3dc <close_stdout@@Base+0x3160>
   1e44c:	mov	r0, #0
   1e450:	b	1e3a4 <close_stdout@@Base+0x3128>
   1e454:	bl	11d78 <__stack_chk_fail@plt>
   1e458:	andeq	sl, r1, r4, lsr #27
   1e45c:	andeq	r0, r0, r0, ror #3
   1e460:	push	{r3, r4, r5, lr}
   1e464:	mov	r4, r1
   1e468:	mov	r5, r0
   1e46c:	bl	11fac <strlen@plt>
   1e470:	mov	r2, r4
   1e474:	mov	r1, r0
   1e478:	mov	r0, r5
   1e47c:	pop	{r3, r4, r5, lr}
   1e480:	b	1e244 <close_stdout@@Base+0x2fc8>
   1e484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e488:	cmp	r1, #2
   1e48c:	sub	sp, sp, #20
   1e490:	mov	r9, r1
   1e494:	mov	r5, r0
   1e498:	mov	r6, r3
   1e49c:	str	r2, [sp, #8]
   1e4a0:	bhi	1e4b0 <close_stdout@@Base+0x3234>
   1e4a4:	beq	1e634 <close_stdout@@Base+0x33b8>
   1e4a8:	add	sp, sp, #20
   1e4ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4b0:	lsr	ip, r1, #1
   1e4b4:	str	ip, [sp, #4]
   1e4b8:	rsb	r1, ip, r1
   1e4bc:	add	r0, r0, ip, lsl #2
   1e4c0:	bl	1e484 <close_stdout@@Base+0x3208>
   1e4c4:	ldr	ip, [sp, #4]
   1e4c8:	cmp	ip, #1
   1e4cc:	beq	1e56c <close_stdout@@Base+0x32f0>
   1e4d0:	lsr	ip, r9, #2
   1e4d4:	ldmib	sp, {r0, r2}
   1e4d8:	mov	r3, r6
   1e4dc:	str	ip, [sp, #12]
   1e4e0:	rsb	r1, ip, r0
   1e4e4:	add	r0, r5, ip, lsl #2
   1e4e8:	mov	fp, ip
   1e4ec:	bl	1e484 <close_stdout@@Base+0x3208>
   1e4f0:	mov	r0, r5
   1e4f4:	ldr	r1, [sp, #12]
   1e4f8:	ldr	r2, [sp, #8]
   1e4fc:	mov	r3, r6
   1e500:	bl	1e484 <close_stdout@@Base+0x3208>
   1e504:	ldr	ip, [sp, #8]
   1e508:	mov	r7, #0
   1e50c:	ldr	r4, [r5]
   1e510:	add	sl, ip, #4
   1e514:	ldr	ip, [sp, #12]
   1e518:	ldr	r8, [r5, ip, lsl #2]
   1e51c:	b	1e53c <close_stdout@@Base+0x32c0>
   1e520:	ldr	ip, [sp, #4]
   1e524:	add	fp, fp, #1
   1e528:	str	r8, [sl, #-4]
   1e52c:	cmp	ip, fp
   1e530:	beq	1e610 <close_stdout@@Base+0x3394>
   1e534:	ldr	r8, [r5, fp, lsl #2]
   1e538:	add	sl, sl, #4
   1e53c:	mov	r0, r4
   1e540:	mov	r1, r8
   1e544:	blx	r6
   1e548:	cmp	r0, #0
   1e54c:	bgt	1e520 <close_stdout@@Base+0x32a4>
   1e550:	ldr	ip, [sp, #12]
   1e554:	add	r7, r7, #1
   1e558:	str	r4, [sl, #-4]
   1e55c:	cmp	ip, r7
   1e560:	beq	1e604 <close_stdout@@Base+0x3388>
   1e564:	ldr	r4, [r5, r7, lsl #2]
   1e568:	b	1e538 <close_stdout@@Base+0x32bc>
   1e56c:	ldr	r7, [r5]
   1e570:	ldr	ip, [sp, #8]
   1e574:	str	r7, [ip]
   1e578:	ldr	ip, [sp, #4]
   1e57c:	mov	r4, #0
   1e580:	mov	r8, r4
   1e584:	ldr	sl, [r5, ip, lsl #2]
   1e588:	mov	fp, ip
   1e58c:	b	1e5a8 <close_stdout@@Base+0x332c>
   1e590:	add	fp, fp, #1
   1e594:	str	sl, [r5, r4, lsl #2]
   1e598:	cmp	r9, fp
   1e59c:	beq	1e5e0 <close_stdout@@Base+0x3364>
   1e5a0:	ldr	sl, [r5, fp, lsl #2]
   1e5a4:	mov	r4, r1
   1e5a8:	mov	r1, sl
   1e5ac:	mov	r0, r7
   1e5b0:	blx	r6
   1e5b4:	add	r1, r4, #1
   1e5b8:	cmp	r0, #0
   1e5bc:	bgt	1e590 <close_stdout@@Base+0x3314>
   1e5c0:	ldr	ip, [sp, #4]
   1e5c4:	add	r8, r8, #1
   1e5c8:	str	r7, [r5, r4, lsl #2]
   1e5cc:	cmp	ip, r8
   1e5d0:	beq	1e4a8 <close_stdout@@Base+0x322c>
   1e5d4:	ldr	ip, [sp, #8]
   1e5d8:	ldr	r7, [ip, r8, lsl #2]
   1e5dc:	b	1e5a4 <close_stdout@@Base+0x3328>
   1e5e0:	ldr	ip, [sp, #4]
   1e5e4:	add	r0, r5, r1, lsl #2
   1e5e8:	rsb	r2, r8, ip
   1e5ec:	ldr	ip, [sp, #8]
   1e5f0:	lsl	r2, r2, #2
   1e5f4:	add	r1, ip, r8, lsl #2
   1e5f8:	add	sp, sp, #20
   1e5fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e600:	b	11d0c <memcpy@plt>
   1e604:	ldr	ip, [sp, #4]
   1e608:	mov	r7, fp
   1e60c:	str	ip, [sp, #12]
   1e610:	ldr	ip, [sp, #12]
   1e614:	add	r1, r5, r7, lsl #2
   1e618:	mov	r0, sl
   1e61c:	rsb	r2, r7, ip
   1e620:	lsl	r2, r2, #2
   1e624:	bl	11d0c <memcpy@plt>
   1e628:	ldr	ip, [sp, #8]
   1e62c:	ldr	r7, [ip]
   1e630:	b	1e578 <close_stdout@@Base+0x32fc>
   1e634:	ldm	r0, {r4, r7}
   1e638:	mov	r0, r4
   1e63c:	mov	r1, r7
   1e640:	blx	r3
   1e644:	cmp	r0, #0
   1e648:	ble	1e4a8 <close_stdout@@Base+0x322c>
   1e64c:	str	r7, [r5]
   1e650:	str	r4, [r5, #4]
   1e654:	add	sp, sp, #20
   1e658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e65c:	mov	r3, r2
   1e660:	add	r2, r0, r1, lsl #2
   1e664:	b	1e484 <close_stdout@@Base+0x3208>
   1e668:	push	{r3, r4, r5, r6, r7, lr}
   1e66c:	subs	r4, r0, #0
   1e670:	ldr	r5, [pc, #172]	; 1e724 <close_stdout@@Base+0x34a8>
   1e674:	add	r5, pc, r5
   1e678:	beq	1e700 <close_stdout@@Base+0x3484>
   1e67c:	mov	r1, #47	; 0x2f
   1e680:	bl	1209c <strrchr@plt>
   1e684:	subs	r6, r0, #0
   1e688:	beq	1e6e4 <close_stdout@@Base+0x3468>
   1e68c:	add	r7, r6, #1
   1e690:	rsb	r3, r4, r7
   1e694:	cmp	r3, #6
   1e698:	ble	1e6e4 <close_stdout@@Base+0x3468>
   1e69c:	ldr	r1, [pc, #132]	; 1e728 <close_stdout@@Base+0x34ac>
   1e6a0:	sub	r0, r6, #6
   1e6a4:	mov	r2, #7
   1e6a8:	add	r1, pc, r1
   1e6ac:	bl	1212c <strncmp@plt>
   1e6b0:	cmp	r0, #0
   1e6b4:	bne	1e6e4 <close_stdout@@Base+0x3468>
   1e6b8:	ldr	r1, [pc, #108]	; 1e72c <close_stdout@@Base+0x34b0>
   1e6bc:	mov	r0, r7
   1e6c0:	mov	r2, #3
   1e6c4:	add	r1, pc, r1
   1e6c8:	bl	1212c <strncmp@plt>
   1e6cc:	cmp	r0, #0
   1e6d0:	movne	r4, r7
   1e6d4:	ldreq	r3, [pc, #84]	; 1e730 <close_stdout@@Base+0x34b4>
   1e6d8:	addeq	r4, r6, #4
   1e6dc:	ldreq	r3, [r5, r3]
   1e6e0:	streq	r4, [r3]
   1e6e4:	ldr	r2, [pc, #72]	; 1e734 <close_stdout@@Base+0x34b8>
   1e6e8:	ldr	r3, [pc, #72]	; 1e738 <close_stdout@@Base+0x34bc>
   1e6ec:	ldr	r2, [r5, r2]
   1e6f0:	str	r4, [r2]
   1e6f4:	ldr	r3, [r5, r3]
   1e6f8:	str	r4, [r3]
   1e6fc:	pop	{r3, r4, r5, r6, r7, pc}
   1e700:	ldr	r3, [pc, #52]	; 1e73c <close_stdout@@Base+0x34c0>
   1e704:	mov	r1, #1
   1e708:	ldr	r0, [pc, #48]	; 1e740 <close_stdout@@Base+0x34c4>
   1e70c:	mov	r2, #55	; 0x37
   1e710:	ldr	r3, [r5, r3]
   1e714:	add	r0, pc, r0
   1e718:	ldr	r3, [r3]
   1e71c:	bl	11e20 <fwrite@plt>
   1e720:	bl	12138 <abort@plt>
   1e724:	andeq	sl, r1, r4, lsl #19
   1e728:	ldrdeq	r8, [r0], -ip
   1e72c:	andeq	r8, r0, r8, asr #21
   1e730:	andeq	r0, r0, r4, lsr #4
   1e734:	andeq	r0, r0, ip, lsl r2
   1e738:	andeq	r0, r0, r8, lsl r2
   1e73c:	andeq	r0, r0, ip, ror #3
   1e740:	andeq	r8, r0, r8, lsr sl
   1e744:	ldr	r3, [pc, #168]	; 1e7f4 <close_stdout@@Base+0x3578>
   1e748:	mov	r1, #0
   1e74c:	ldr	ip, [pc, #164]	; 1e7f8 <close_stdout@@Base+0x357c>
   1e750:	add	r3, pc, r3
   1e754:	push	{r4, r5, r6, r7, lr}
   1e758:	sub	sp, sp, #20
   1e75c:	ldr	r7, [r3, ip]
   1e760:	add	r4, sp, #4
   1e764:	mov	r6, r0
   1e768:	mov	r2, r4
   1e76c:	ldr	r3, [r7]
   1e770:	str	r3, [sp, #12]
   1e774:	bl	12030 <acl_get_entry@plt>
   1e778:	cmp	r0, #0
   1e77c:	ble	1e7d0 <close_stdout@@Base+0x3554>
   1e780:	add	r5, sp, #8
   1e784:	b	1e7b8 <close_stdout@@Base+0x353c>
   1e788:	ldr	r3, [sp, #8]
   1e78c:	cmp	r3, #1
   1e790:	cmpne	r3, #4
   1e794:	beq	1e7a0 <close_stdout@@Base+0x3524>
   1e798:	cmp	r3, #32
   1e79c:	bne	1e7e8 <close_stdout@@Base+0x356c>
   1e7a0:	mov	r0, r6
   1e7a4:	mov	r1, #1
   1e7a8:	mov	r2, r4
   1e7ac:	bl	12030 <acl_get_entry@plt>
   1e7b0:	cmp	r0, #0
   1e7b4:	ble	1e7d0 <close_stdout@@Base+0x3554>
   1e7b8:	ldr	r0, [sp, #4]
   1e7bc:	mov	r1, r5
   1e7c0:	bl	11de4 <acl_get_tag_type@plt>
   1e7c4:	cmp	r0, #0
   1e7c8:	bge	1e788 <close_stdout@@Base+0x350c>
   1e7cc:	mvn	r0, #0
   1e7d0:	ldr	r2, [sp, #12]
   1e7d4:	ldr	r3, [r7]
   1e7d8:	cmp	r2, r3
   1e7dc:	bne	1e7f0 <close_stdout@@Base+0x3574>
   1e7e0:	add	sp, sp, #20
   1e7e4:	pop	{r4, r5, r6, r7, pc}
   1e7e8:	mov	r0, #1
   1e7ec:	b	1e7d0 <close_stdout@@Base+0x3554>
   1e7f0:	bl	11d78 <__stack_chk_fail@plt>
   1e7f4:	andeq	sl, r1, r8, lsr #17
   1e7f8:	andeq	r0, r0, r0, ror #3
   1e7fc:	push	{r3, lr}
   1e800:	ldr	r3, [r1, #16]
   1e804:	and	r3, r3, #61440	; 0xf000
   1e808:	cmp	r3, #40960	; 0xa000
   1e80c:	beq	1e830 <close_stdout@@Base+0x35b4>
   1e810:	bl	11e44 <acl_extended_file@plt>
   1e814:	cmp	r0, #0
   1e818:	popge	{r3, pc}
   1e81c:	bl	11fd0 <__errno_location@plt>
   1e820:	ldr	r0, [r0]
   1e824:	bl	23310 <close_stdout@@Base+0x8094>
   1e828:	rsb	r0, r0, #0
   1e82c:	pop	{r3, pc}
   1e830:	mov	r0, #0
   1e834:	pop	{r3, pc}
   1e838:	push	{r3, lr}
   1e83c:	mov	r3, r0
   1e840:	mov	r2, #0
   1e844:	cmp	r1, #8
   1e848:	str	r2, [r3], #4
   1e84c:	add	r3, r3, #4
   1e850:	str	r2, [r0, #4]
   1e854:	str	r2, [r3], #4
   1e858:	str	r2, [r3], #4
   1e85c:	str	r2, [r3], #4
   1e860:	str	r2, [r3], #4
   1e864:	str	r2, [r3], #4
   1e868:	str	r2, [r3], #4
   1e86c:	str	r2, [r3], #4
   1e870:	str	r2, [r3], #4
   1e874:	str	r2, [r3], #4
   1e878:	str	r2, [r3]
   1e87c:	beq	1e888 <close_stdout@@Base+0x360c>
   1e880:	str	r1, [r0]
   1e884:	pop	{r3, pc}
   1e888:	bl	12138 <abort@plt>
   1e88c:	push	{r4, r5, r6, lr}
   1e890:	mov	r4, r0
   1e894:	mov	r6, r1
   1e898:	mov	r0, #0
   1e89c:	mov	r1, r4
   1e8a0:	mov	r2, #5
   1e8a4:	bl	11d6c <dcgettext@plt>
   1e8a8:	cmp	r0, r4
   1e8ac:	mov	r5, r0
   1e8b0:	beq	1e8b8 <close_stdout@@Base+0x363c>
   1e8b4:	pop	{r4, r5, r6, pc}
   1e8b8:	bl	22ef0 <close_stdout@@Base+0x7c74>
   1e8bc:	ldrb	r3, [r0]
   1e8c0:	bic	r3, r3, #32
   1e8c4:	cmp	r3, #85	; 0x55
   1e8c8:	bne	1e93c <close_stdout@@Base+0x36c0>
   1e8cc:	ldrb	r3, [r0, #1]
   1e8d0:	bic	r3, r3, #32
   1e8d4:	cmp	r3, #84	; 0x54
   1e8d8:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e8dc:	ldrb	r3, [r0, #2]
   1e8e0:	bic	r3, r3, #32
   1e8e4:	cmp	r3, #70	; 0x46
   1e8e8:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e8ec:	ldrb	r3, [r0, #3]
   1e8f0:	cmp	r3, #45	; 0x2d
   1e8f4:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e8f8:	ldrb	r3, [r0, #4]
   1e8fc:	cmp	r3, #56	; 0x38
   1e900:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e904:	ldrb	r3, [r0, #5]
   1e908:	cmp	r3, #0
   1e90c:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e910:	ldrb	r3, [r5]
   1e914:	cmp	r3, #96	; 0x60
   1e918:	beq	1e9b4 <close_stdout@@Base+0x3738>
   1e91c:	ldr	r0, [pc, #180]	; 1e9d8 <close_stdout@@Base+0x375c>
   1e920:	add	r0, pc, r0
   1e924:	pop	{r4, r5, r6, pc}
   1e928:	cmp	r6, #7
   1e92c:	beq	1e9c0 <close_stdout@@Base+0x3744>
   1e930:	ldr	r0, [pc, #164]	; 1e9dc <close_stdout@@Base+0x3760>
   1e934:	add	r0, pc, r0
   1e938:	pop	{r4, r5, r6, pc}
   1e93c:	cmp	r3, #71	; 0x47
   1e940:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e944:	ldrb	r3, [r0, #1]
   1e948:	bic	r3, r3, #32
   1e94c:	cmp	r3, #66	; 0x42
   1e950:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e954:	ldrb	r3, [r0, #2]
   1e958:	cmp	r3, #49	; 0x31
   1e95c:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e960:	ldrb	r3, [r0, #3]
   1e964:	cmp	r3, #56	; 0x38
   1e968:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e96c:	ldrb	r3, [r0, #4]
   1e970:	cmp	r3, #48	; 0x30
   1e974:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e978:	ldrb	r3, [r0, #5]
   1e97c:	cmp	r3, #51	; 0x33
   1e980:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e984:	ldrb	r3, [r0, #6]
   1e988:	cmp	r3, #48	; 0x30
   1e98c:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e990:	ldrb	r3, [r0, #7]
   1e994:	cmp	r3, #0
   1e998:	bne	1e928 <close_stdout@@Base+0x36ac>
   1e99c:	ldrb	r3, [r5]
   1e9a0:	cmp	r3, #96	; 0x60
   1e9a4:	beq	1e9cc <close_stdout@@Base+0x3750>
   1e9a8:	ldr	r0, [pc, #48]	; 1e9e0 <close_stdout@@Base+0x3764>
   1e9ac:	add	r0, pc, r0
   1e9b0:	pop	{r4, r5, r6, pc}
   1e9b4:	ldr	r0, [pc, #40]	; 1e9e4 <close_stdout@@Base+0x3768>
   1e9b8:	add	r0, pc, r0
   1e9bc:	pop	{r4, r5, r6, pc}
   1e9c0:	ldr	r0, [pc, #32]	; 1e9e8 <close_stdout@@Base+0x376c>
   1e9c4:	add	r0, pc, r0
   1e9c8:	pop	{r4, r5, r6, pc}
   1e9cc:	ldr	r0, [pc, #24]	; 1e9ec <close_stdout@@Base+0x3770>
   1e9d0:	add	r0, pc, r0
   1e9d4:	pop	{r4, r5, r6, pc}
   1e9d8:	muleq	r0, r0, r8
   1e9dc:	andeq	r8, r0, r4, lsl #17
   1e9e0:	andeq	r8, r0, r8, lsl #16
   1e9e4:	andeq	r8, r0, ip, lsl #16
   1e9e8:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1e9ec:	strdeq	r8, [r0], -r0
   1e9f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9f4:	sub	sp, sp, #124	; 0x7c
   1e9f8:	ldr	ip, [pc, #3304]	; 1f6e8 <close_stdout@@Base+0x446c>
   1e9fc:	mov	sl, r1
   1ea00:	str	r0, [sp, #40]	; 0x28
   1ea04:	mov	r8, r3
   1ea08:	ldr	r0, [pc, #3292]	; 1f6ec <close_stdout@@Base+0x4470>
   1ea0c:	add	ip, pc, ip
   1ea10:	str	r2, [sp, #32]
   1ea14:	ldr	r1, [sp, #164]	; 0xa4
   1ea18:	mov	r3, ip
   1ea1c:	ldr	r0, [ip, r0]
   1ea20:	ldr	r2, [sp, #172]	; 0xac
   1ea24:	ubfx	r1, r1, #1, #1
   1ea28:	str	r1, [sp, #36]	; 0x24
   1ea2c:	str	r0, [sp, #56]	; 0x38
   1ea30:	ldr	r0, [sp, #168]	; 0xa8
   1ea34:	ldr	r1, [sp, #176]	; 0xb0
   1ea38:	str	r2, [sp, #72]	; 0x48
   1ea3c:	str	r0, [sp, #48]	; 0x30
   1ea40:	ldr	r0, [sp, #56]	; 0x38
   1ea44:	str	r1, [sp, #68]	; 0x44
   1ea48:	ldr	r3, [r0]
   1ea4c:	str	r3, [sp, #116]	; 0x74
   1ea50:	bl	11e50 <__ctype_get_mb_cur_max@plt>
   1ea54:	ldr	r2, [sp, #160]	; 0xa0
   1ea58:	str	r0, [sp, #64]	; 0x40
   1ea5c:	cmp	r2, #8
   1ea60:	addls	pc, pc, r2, lsl #2
   1ea64:	b	1f5c4 <close_stdout@@Base+0x4348>
   1ea68:	b	1ea8c <close_stdout@@Base+0x3810>
   1ea6c:	b	1f2dc <close_stdout@@Base+0x4060>
   1ea70:	b	1f30c <close_stdout@@Base+0x4090>
   1ea74:	b	1f1bc <close_stdout@@Base+0x3f40>
   1ea78:	b	1f1fc <close_stdout@@Base+0x3f80>
   1ea7c:	b	1f228 <close_stdout@@Base+0x3fac>
   1ea80:	b	1f248 <close_stdout@@Base+0x3fcc>
   1ea84:	b	1f248 <close_stdout@@Base+0x3fcc>
   1ea88:	b	1f248 <close_stdout@@Base+0x3fcc>
   1ea8c:	mov	r2, #0
   1ea90:	str	r2, [sp, #36]	; 0x24
   1ea94:	mov	r9, r2
   1ea98:	str	r2, [sp, #24]
   1ea9c:	str	r2, [sp, #28]
   1eaa0:	str	r2, [sp, #52]	; 0x34
   1eaa4:	ldr	r0, [sp, #36]	; 0x24
   1eaa8:	mov	fp, #0
   1eaac:	ldr	r1, [sp, #24]
   1eab0:	eor	r2, r0, #1
   1eab4:	eor	r3, r1, #1
   1eab8:	and	r3, r2, r3
   1eabc:	and	r2, r1, r0
   1eac0:	str	r3, [sp, #44]	; 0x2c
   1eac4:	str	r2, [sp, #76]	; 0x4c
   1eac8:	cmn	r8, #1
   1eacc:	beq	1ee4c <close_stdout@@Base+0x3bd0>
   1ead0:	subs	r3, fp, r8
   1ead4:	movne	r3, #1
   1ead8:	cmp	r3, #0
   1eadc:	beq	1ee64 <close_stdout@@Base+0x3be8>
   1eae0:	ldr	r3, [sp, #28]
   1eae4:	ldr	r0, [sp, #24]
   1eae8:	adds	r7, r3, #0
   1eaec:	movne	r7, #1
   1eaf0:	ands	r6, r7, r0
   1eaf4:	bne	1f350 <close_stdout@@Base+0x40d4>
   1eaf8:	ldr	r1, [sp, #32]
   1eafc:	add	r5, r1, fp
   1eb00:	ldrb	r4, [r5]
   1eb04:	cmp	r4, #126	; 0x7e
   1eb08:	addls	pc, pc, r4, lsl #2
   1eb0c:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb10:	b	1efdc <close_stdout@@Base+0x3d60>
   1eb14:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb18:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb1c:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb20:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb24:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb28:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb2c:	b	1efc4 <close_stdout@@Base+0x3d48>
   1eb30:	b	1efac <close_stdout@@Base+0x3d30>
   1eb34:	b	1efd4 <close_stdout@@Base+0x3d58>
   1eb38:	b	1efcc <close_stdout@@Base+0x3d50>
   1eb3c:	b	1efbc <close_stdout@@Base+0x3d40>
   1eb40:	b	1efb4 <close_stdout@@Base+0x3d38>
   1eb44:	b	1ef78 <close_stdout@@Base+0x3cfc>
   1eb48:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb4c:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb50:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb54:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb58:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb5c:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb60:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb64:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb68:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb6c:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb70:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb74:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb78:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb7c:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb80:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb84:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb88:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb8c:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1eb90:	b	1ef04 <close_stdout@@Base+0x3c88>
   1eb94:	b	1ef04 <close_stdout@@Base+0x3c88>
   1eb98:	b	1ef04 <close_stdout@@Base+0x3c88>
   1eb9c:	b	1eefc <close_stdout@@Base+0x3c80>
   1eba0:	b	1ef04 <close_stdout@@Base+0x3c88>
   1eba4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1eba8:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ebac:	b	1f078 <close_stdout@@Base+0x3dfc>
   1ebb0:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ebb4:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ebb8:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ebbc:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebc0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebc4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebc8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebcc:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebd0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebd4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebd8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebdc:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebe0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebe4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebe8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebec:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebf0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebf4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebf8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ebfc:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ec00:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ec04:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ec08:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ec0c:	b	1ed0c <close_stdout@@Base+0x3a90>
   1ec10:	b	1f0d0 <close_stdout@@Base+0x3e54>
   1ec14:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec18:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec1c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec20:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec24:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec28:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec2c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec30:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec34:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec38:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec3c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec40:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec44:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec48:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec4c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec50:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec54:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec58:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec5c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec60:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec64:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec68:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec6c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec70:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec74:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec78:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec7c:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ec80:	b	1f05c <close_stdout@@Base+0x3de0>
   1ec84:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec88:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ec8c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec90:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ec94:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec98:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ec9c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1eca0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1eca4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1eca8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecac:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecb0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecb4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecb8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecbc:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecc0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecc4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecc8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1eccc:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecd0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecd4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecd8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecdc:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ece0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ece4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ece8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecec:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecf0:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecf4:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecf8:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1ecfc:	b	1eee4 <close_stdout@@Base+0x3c68>
   1ed00:	b	1ef04 <close_stdout@@Base+0x3c88>
   1ed04:	b	1eee4 <close_stdout@@Base+0x3c68>
   1ed08:	b	1eefc <close_stdout@@Base+0x3c80>
   1ed0c:	ldr	r3, [sp, #160]	; 0xa0
   1ed10:	cmp	r3, #2
   1ed14:	beq	1f5a0 <close_stdout@@Base+0x4324>
   1ed18:	cmp	r3, #3
   1ed1c:	bne	1edd8 <close_stdout@@Base+0x3b5c>
   1ed20:	ldr	r1, [sp, #164]	; 0xa4
   1ed24:	tst	r1, #4
   1ed28:	beq	1edd8 <close_stdout@@Base+0x3b5c>
   1ed2c:	add	r3, fp, #2
   1ed30:	cmp	r8, r3
   1ed34:	bls	1edd8 <close_stdout@@Base+0x3b5c>
   1ed38:	ldrb	r2, [r5, #1]
   1ed3c:	mov	r1, #1
   1ed40:	cmp	r2, #63	; 0x3f
   1ed44:	bne	1edd8 <close_stdout@@Base+0x3b5c>
   1ed48:	ldr	r0, [sp, #32]
   1ed4c:	ldrb	ip, [r0, r3]
   1ed50:	sub	r0, ip, #33	; 0x21
   1ed54:	uxtb	r0, r0
   1ed58:	cmp	r0, #29
   1ed5c:	bhi	1edd8 <close_stdout@@Base+0x3b5c>
   1ed60:	lsl	r1, r1, r0
   1ed64:	movw	r0, #20929	; 0x51c1
   1ed68:	movt	r0, #14336	; 0x3800
   1ed6c:	and	r0, r1, r0
   1ed70:	cmp	r0, #0
   1ed74:	beq	1edd8 <close_stdout@@Base+0x3b5c>
   1ed78:	ldr	r1, [sp, #36]	; 0x24
   1ed7c:	cmp	r1, #0
   1ed80:	bne	1ef20 <close_stdout@@Base+0x3ca4>
   1ed84:	cmp	r9, sl
   1ed88:	mov	r4, ip
   1ed8c:	mov	fp, r3
   1ed90:	ldrcc	r0, [sp, #40]	; 0x28
   1ed94:	strbcc	r2, [r0, r9]
   1ed98:	add	r2, r9, #1
   1ed9c:	cmp	sl, r2
   1eda0:	ldrhi	r0, [sp, #40]	; 0x28
   1eda4:	movhi	r1, #34	; 0x22
   1eda8:	strbhi	r1, [r0, r2]
   1edac:	add	r2, r9, #2
   1edb0:	cmp	sl, r2
   1edb4:	ldrhi	r0, [sp, #40]	; 0x28
   1edb8:	movhi	r1, #34	; 0x22
   1edbc:	strbhi	r1, [r0, r2]
   1edc0:	add	r2, r9, #3
   1edc4:	cmp	sl, r2
   1edc8:	add	r9, r9, #4
   1edcc:	ldrhi	r0, [sp, #40]	; 0x28
   1edd0:	movhi	r1, #63	; 0x3f
   1edd4:	strbhi	r1, [r0, r2]
   1edd8:	ldr	r0, [sp, #44]	; 0x2c
   1eddc:	cmp	r0, #0
   1ede0:	bne	1ee08 <close_stdout@@Base+0x3b8c>
   1ede4:	ldr	r1, [sp, #48]	; 0x30
   1ede8:	cmp	r1, #0
   1edec:	beq	1ee08 <close_stdout@@Base+0x3b8c>
   1edf0:	ubfx	r2, r4, #5, #8
   1edf4:	and	r3, r4, #31
   1edf8:	ldr	r2, [r1, r2, lsl #2]
   1edfc:	lsr	r3, r2, r3
   1ee00:	tst	r3, #1
   1ee04:	bne	1ee10 <close_stdout@@Base+0x3b94>
   1ee08:	cmp	r6, #0
   1ee0c:	beq	1ee30 <close_stdout@@Base+0x3bb4>
   1ee10:	ldr	r2, [sp, #36]	; 0x24
   1ee14:	cmp	r2, #0
   1ee18:	bne	1ef20 <close_stdout@@Base+0x3ca4>
   1ee1c:	cmp	r9, sl
   1ee20:	ldrcc	r0, [sp, #40]	; 0x28
   1ee24:	movcc	r3, #92	; 0x5c
   1ee28:	strbcc	r3, [r0, r9]
   1ee2c:	add	r9, r9, #1
   1ee30:	add	fp, fp, #1
   1ee34:	cmp	r9, sl
   1ee38:	ldrcc	r1, [sp, #40]	; 0x28
   1ee3c:	strbcc	r4, [r1, r9]
   1ee40:	cmn	r8, #1
   1ee44:	add	r9, r9, #1
   1ee48:	bne	1ead0 <close_stdout@@Base+0x3854>
   1ee4c:	ldr	r2, [sp, #32]
   1ee50:	ldrb	r3, [r2, fp]
   1ee54:	adds	r3, r3, #0
   1ee58:	movne	r3, #1
   1ee5c:	cmp	r3, #0
   1ee60:	bne	1eae0 <close_stdout@@Base+0x3864>
   1ee64:	ldr	r3, [sp, #160]	; 0xa0
   1ee68:	cmp	r9, #0
   1ee6c:	cmpeq	r3, #2
   1ee70:	bne	1ee80 <close_stdout@@Base+0x3c04>
   1ee74:	ldr	r0, [sp, #36]	; 0x24
   1ee78:	cmp	r0, #0
   1ee7c:	bne	1ef20 <close_stdout@@Base+0x3ca4>
   1ee80:	ldr	r1, [sp, #36]	; 0x24
   1ee84:	ldr	r2, [sp, #52]	; 0x34
   1ee88:	eor	r3, r1, #1
   1ee8c:	cmp	r2, #0
   1ee90:	moveq	r3, #0
   1ee94:	andne	r3, r3, #1
   1ee98:	cmp	r3, #0
   1ee9c:	beq	1eec8 <close_stdout@@Base+0x3c4c>
   1eea0:	ldrb	r3, [r2]
   1eea4:	cmp	r3, #0
   1eea8:	beq	1eec8 <close_stdout@@Base+0x3c4c>
   1eeac:	ldr	r1, [sp, #40]	; 0x28
   1eeb0:	cmp	sl, r9
   1eeb4:	strbhi	r3, [r1, r9]
   1eeb8:	ldrb	r3, [r2, #1]!
   1eebc:	add	r9, r9, #1
   1eec0:	cmp	r3, #0
   1eec4:	bne	1eeb0 <close_stdout@@Base+0x3c34>
   1eec8:	cmp	r9, sl
   1eecc:	movcs	r0, r9
   1eed0:	ldrcc	r1, [sp, #40]	; 0x28
   1eed4:	movcc	r3, #0
   1eed8:	movcc	r0, r9
   1eedc:	strbcc	r3, [r1, r9]
   1eee0:	b	1ef5c <close_stdout@@Base+0x3ce0>
   1eee4:	cmn	r8, #1
   1eee8:	beq	1f5b0 <close_stdout@@Base+0x4334>
   1eeec:	subs	r3, r8, #1
   1eef0:	movne	r3, #1
   1eef4:	cmp	r3, #0
   1eef8:	bne	1edd8 <close_stdout@@Base+0x3b5c>
   1eefc:	cmp	fp, #0
   1ef00:	bne	1edd8 <close_stdout@@Base+0x3b5c>
   1ef04:	ldr	r3, [sp, #36]	; 0x24
   1ef08:	ldr	r0, [sp, #160]	; 0xa0
   1ef0c:	cmp	r0, #2
   1ef10:	movne	r3, #0
   1ef14:	andeq	r3, r3, #1
   1ef18:	cmp	r3, #0
   1ef1c:	beq	1edd8 <close_stdout@@Base+0x3b5c>
   1ef20:	ldr	r2, [sp, #164]	; 0xa4
   1ef24:	mov	ip, #0
   1ef28:	ldr	r0, [sp, #160]	; 0xa0
   1ef2c:	bic	r3, r2, #2
   1ef30:	ldr	r1, [sp, #72]	; 0x48
   1ef34:	ldr	r2, [sp, #68]	; 0x44
   1ef38:	stm	sp, {r0, r3}
   1ef3c:	mov	r3, r8
   1ef40:	str	r1, [sp, #12]
   1ef44:	mov	r1, sl
   1ef48:	str	r2, [sp, #16]
   1ef4c:	ldr	r0, [sp, #40]	; 0x28
   1ef50:	ldr	r2, [sp, #32]
   1ef54:	str	ip, [sp, #8]
   1ef58:	bl	1e9f0 <close_stdout@@Base+0x3774>
   1ef5c:	ldr	r1, [sp, #56]	; 0x38
   1ef60:	ldr	r2, [sp, #116]	; 0x74
   1ef64:	ldr	r3, [r1]
   1ef68:	cmp	r2, r3
   1ef6c:	bne	1f6a0 <close_stdout@@Base+0x4424>
   1ef70:	add	sp, sp, #124	; 0x7c
   1ef74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef78:	mov	r3, #114	; 0x72
   1ef7c:	ldr	r2, [sp, #36]	; 0x24
   1ef80:	ldr	r0, [sp, #160]	; 0xa0
   1ef84:	cmp	r0, #2
   1ef88:	movne	r2, #0
   1ef8c:	andeq	r2, r2, #1
   1ef90:	cmp	r2, #0
   1ef94:	bne	1ef20 <close_stdout@@Base+0x3ca4>
   1ef98:	ldr	r1, [sp, #24]
   1ef9c:	cmp	r1, #0
   1efa0:	beq	1edd8 <close_stdout@@Base+0x3b5c>
   1efa4:	mov	r4, r3
   1efa8:	b	1ee10 <close_stdout@@Base+0x3b94>
   1efac:	mov	r3, #98	; 0x62
   1efb0:	b	1ef98 <close_stdout@@Base+0x3d1c>
   1efb4:	mov	r3, #102	; 0x66
   1efb8:	b	1ef98 <close_stdout@@Base+0x3d1c>
   1efbc:	mov	r3, #118	; 0x76
   1efc0:	b	1ef98 <close_stdout@@Base+0x3d1c>
   1efc4:	mov	r3, #97	; 0x61
   1efc8:	b	1ef98 <close_stdout@@Base+0x3d1c>
   1efcc:	mov	r3, #110	; 0x6e
   1efd0:	b	1ef7c <close_stdout@@Base+0x3d00>
   1efd4:	mov	r3, #116	; 0x74
   1efd8:	b	1ef7c <close_stdout@@Base+0x3d00>
   1efdc:	ldr	r2, [sp, #24]
   1efe0:	cmp	r2, #0
   1efe4:	beq	1f58c <close_stdout@@Base+0x4310>
   1efe8:	ldr	r3, [sp, #36]	; 0x24
   1efec:	cmp	r3, #0
   1eff0:	bne	1ef20 <close_stdout@@Base+0x3ca4>
   1eff4:	cmp	r9, sl
   1eff8:	add	r2, r9, #1
   1effc:	ldrcc	r0, [sp, #40]	; 0x28
   1f000:	movcc	r3, #92	; 0x5c
   1f004:	strbcc	r3, [r0, r9]
   1f008:	add	r3, fp, #1
   1f00c:	cmp	r8, r3
   1f010:	bls	1f050 <close_stdout@@Base+0x3dd4>
   1f014:	ldr	r1, [sp, #32]
   1f018:	ldrb	r3, [r1, r3]
   1f01c:	sub	r3, r3, #48	; 0x30
   1f020:	cmp	r3, #9
   1f024:	bhi	1f050 <close_stdout@@Base+0x3dd4>
   1f028:	cmp	sl, r2
   1f02c:	ldrhi	r0, [sp, #40]	; 0x28
   1f030:	movhi	r3, #48	; 0x30
   1f034:	strbhi	r3, [r0, r2]
   1f038:	add	r3, r9, #2
   1f03c:	cmp	sl, r3
   1f040:	ldrhi	r1, [sp, #40]	; 0x28
   1f044:	movhi	r2, #48	; 0x30
   1f048:	strbhi	r2, [r1, r3]
   1f04c:	add	r2, r9, #3
   1f050:	mov	r9, r2
   1f054:	mov	r4, #48	; 0x30
   1f058:	b	1ede4 <close_stdout@@Base+0x3b68>
   1f05c:	ldr	r1, [sp, #76]	; 0x4c
   1f060:	cmp	r1, #0
   1f064:	beq	1f070 <close_stdout@@Base+0x3df4>
   1f068:	cmp	r7, #0
   1f06c:	bne	1ee30 <close_stdout@@Base+0x3bb4>
   1f070:	mov	r3, r4
   1f074:	b	1ef7c <close_stdout@@Base+0x3d00>
   1f078:	ldr	r1, [sp, #160]	; 0xa0
   1f07c:	cmp	r1, #2
   1f080:	bne	1edd8 <close_stdout@@Base+0x3b5c>
   1f084:	ldr	r2, [sp, #36]	; 0x24
   1f088:	cmp	r2, #0
   1f08c:	bne	1ef20 <close_stdout@@Base+0x3ca4>
   1f090:	cmp	r9, sl
   1f094:	ldrcc	r0, [sp, #40]	; 0x28
   1f098:	movcc	r3, #39	; 0x27
   1f09c:	strbcc	r3, [r0, r9]
   1f0a0:	add	r3, r9, #1
   1f0a4:	cmp	sl, r3
   1f0a8:	ldrhi	r1, [sp, #40]	; 0x28
   1f0ac:	movhi	r2, #92	; 0x5c
   1f0b0:	strbhi	r2, [r1, r3]
   1f0b4:	add	r3, r9, #2
   1f0b8:	cmp	sl, r3
   1f0bc:	add	r9, r9, #3
   1f0c0:	ldrhi	r0, [sp, #40]	; 0x28
   1f0c4:	movhi	r2, #39	; 0x27
   1f0c8:	strbhi	r2, [r0, r3]
   1f0cc:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1f0d0:	ldr	r1, [sp, #64]	; 0x40
   1f0d4:	cmp	r1, #1
   1f0d8:	bne	1f3d0 <close_stdout@@Base+0x4154>
   1f0dc:	bl	11f70 <__ctype_b_loc@plt>
   1f0e0:	ldr	r2, [sp, #64]	; 0x40
   1f0e4:	sxth	r3, r4
   1f0e8:	str	r2, [sp, #60]	; 0x3c
   1f0ec:	lsl	r3, r3, #1
   1f0f0:	ldr	r2, [r0]
   1f0f4:	ldrh	r2, [r2, r3]
   1f0f8:	eor	r2, r2, #16384	; 0x4000
   1f0fc:	ubfx	r2, r2, #14, #1
   1f100:	ldr	r1, [sp, #24]
   1f104:	ands	r2, r2, r1
   1f108:	beq	1edd8 <close_stdout@@Base+0x3b5c>
   1f10c:	ldr	r3, [sp, #60]	; 0x3c
   1f110:	mov	r0, #92	; 0x5c
   1f114:	ldr	r7, [sp, #36]	; 0x24
   1f118:	add	r1, r3, fp
   1f11c:	str	r8, [sp, #60]	; 0x3c
   1f120:	ldr	r3, [sp, #40]	; 0x28
   1f124:	b	1f188 <close_stdout@@Base+0x3f0c>
   1f128:	cmp	r7, #0
   1f12c:	bne	1f5c8 <close_stdout@@Base+0x434c>
   1f130:	add	ip, r9, #1
   1f134:	cmp	r9, sl
   1f138:	strbcc	r0, [r3, r9]
   1f13c:	cmp	sl, ip
   1f140:	lsrhi	r8, r4, #6
   1f144:	addhi	r8, r8, #48	; 0x30
   1f148:	strbhi	r8, [r3, ip]
   1f14c:	add	ip, r9, #2
   1f150:	add	r9, r9, #3
   1f154:	cmp	sl, ip
   1f158:	ubfxhi	r8, r4, #3, #3
   1f15c:	and	r4, r4, #7
   1f160:	add	r4, r4, #48	; 0x30
   1f164:	addhi	r8, r8, #48	; 0x30
   1f168:	strbhi	r8, [r3, ip]
   1f16c:	add	fp, fp, #1
   1f170:	cmp	r1, fp
   1f174:	bls	1f1b4 <close_stdout@@Base+0x3f38>
   1f178:	cmp	r9, sl
   1f17c:	strbcc	r4, [r3, r9]
   1f180:	ldrb	r4, [r5, #1]!
   1f184:	add	r9, r9, #1
   1f188:	cmp	r2, #0
   1f18c:	bne	1f128 <close_stdout@@Base+0x3eac>
   1f190:	cmp	r6, #0
   1f194:	beq	1f16c <close_stdout@@Base+0x3ef0>
   1f198:	add	fp, fp, #1
   1f19c:	cmp	r9, sl
   1f1a0:	strbcc	r0, [r3, r9]
   1f1a4:	cmp	r1, fp
   1f1a8:	add	r9, r9, #1
   1f1ac:	mov	r6, #0
   1f1b0:	bhi	1f178 <close_stdout@@Base+0x3efc>
   1f1b4:	ldr	r8, [sp, #60]	; 0x3c
   1f1b8:	b	1ee34 <close_stdout@@Base+0x3bb8>
   1f1bc:	ldr	r3, [sp, #36]	; 0x24
   1f1c0:	cmp	r3, #0
   1f1c4:	bne	1f6c8 <close_stdout@@Base+0x444c>
   1f1c8:	cmp	sl, #0
   1f1cc:	beq	1f5e0 <close_stdout@@Base+0x4364>
   1f1d0:	ldr	r1, [sp, #40]	; 0x28
   1f1d4:	mov	r0, #1
   1f1d8:	ldr	r2, [pc, #1296]	; 1f6f0 <close_stdout@@Base+0x4474>
   1f1dc:	mov	r3, #34	; 0x22
   1f1e0:	str	r0, [sp, #24]
   1f1e4:	mov	r9, r0
   1f1e8:	add	r2, pc, r2
   1f1ec:	str	r0, [sp, #28]
   1f1f0:	strb	r3, [r1]
   1f1f4:	str	r2, [sp, #52]	; 0x34
   1f1f8:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f1fc:	ldr	r3, [pc, #1264]	; 1f6f4 <close_stdout@@Base+0x4478>
   1f200:	mov	r2, #1
   1f204:	mov	r0, #3
   1f208:	str	r2, [sp, #36]	; 0x24
   1f20c:	add	r3, pc, r3
   1f210:	str	r2, [sp, #24]
   1f214:	str	r3, [sp, #52]	; 0x34
   1f218:	mov	r9, #0
   1f21c:	str	r2, [sp, #28]
   1f220:	str	r0, [sp, #160]	; 0xa0
   1f224:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f228:	mov	r0, #0
   1f22c:	mov	r1, #1
   1f230:	str	r0, [sp, #36]	; 0x24
   1f234:	mov	r9, r0
   1f238:	str	r1, [sp, #24]
   1f23c:	str	r0, [sp, #28]
   1f240:	str	r0, [sp, #52]	; 0x34
   1f244:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f248:	ldr	r3, [sp, #160]	; 0xa0
   1f24c:	cmp	r3, #8
   1f250:	beq	1f27c <close_stdout@@Base+0x4000>
   1f254:	ldr	r0, [pc, #1180]	; 1f6f8 <close_stdout@@Base+0x447c>
   1f258:	mov	r1, r3
   1f25c:	add	r0, pc, r0
   1f260:	bl	1e88c <close_stdout@@Base+0x3610>
   1f264:	ldr	r1, [sp, #160]	; 0xa0
   1f268:	str	r0, [sp, #72]	; 0x48
   1f26c:	ldr	r0, [pc, #1160]	; 1f6fc <close_stdout@@Base+0x4480>
   1f270:	add	r0, pc, r0
   1f274:	bl	1e88c <close_stdout@@Base+0x3610>
   1f278:	str	r0, [sp, #68]	; 0x44
   1f27c:	ldr	r0, [sp, #36]	; 0x24
   1f280:	cmp	r0, #0
   1f284:	movne	r9, #0
   1f288:	bne	1f2c0 <close_stdout@@Base+0x4044>
   1f28c:	ldr	r1, [sp, #72]	; 0x48
   1f290:	ldrb	r3, [r1]
   1f294:	cmp	r3, #0
   1f298:	beq	1f698 <close_stdout@@Base+0x441c>
   1f29c:	mov	r2, r1
   1f2a0:	ldr	r1, [sp, #40]	; 0x28
   1f2a4:	mov	r9, r0
   1f2a8:	cmp	r9, sl
   1f2ac:	strbcc	r3, [r1, r9]
   1f2b0:	ldrb	r3, [r2, #1]!
   1f2b4:	add	r9, r9, #1
   1f2b8:	cmp	r3, #0
   1f2bc:	bne	1f2a8 <close_stdout@@Base+0x402c>
   1f2c0:	ldr	r0, [sp, #68]	; 0x44
   1f2c4:	str	r0, [sp, #52]	; 0x34
   1f2c8:	bl	11fac <strlen@plt>
   1f2cc:	mov	r2, #1
   1f2d0:	str	r2, [sp, #24]
   1f2d4:	str	r0, [sp, #28]
   1f2d8:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f2dc:	ldr	r3, [pc, #1052]	; 1f700 <close_stdout@@Base+0x4484>
   1f2e0:	mov	r2, #0
   1f2e4:	mov	r1, #1
   1f2e8:	mov	r0, #2
   1f2ec:	add	r3, pc, r3
   1f2f0:	str	r1, [sp, #36]	; 0x24
   1f2f4:	str	r2, [sp, #24]
   1f2f8:	mov	r9, r2
   1f2fc:	str	r1, [sp, #28]
   1f300:	str	r3, [sp, #52]	; 0x34
   1f304:	str	r0, [sp, #160]	; 0xa0
   1f308:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f30c:	ldr	r3, [sp, #36]	; 0x24
   1f310:	cmp	r3, #0
   1f314:	bne	1f6a4 <close_stdout@@Base+0x4428>
   1f318:	cmp	sl, #0
   1f31c:	beq	1f600 <close_stdout@@Base+0x4384>
   1f320:	ldr	r1, [sp, #40]	; 0x28
   1f324:	mov	r3, #39	; 0x27
   1f328:	ldr	r2, [sp, #36]	; 0x24
   1f32c:	mov	r0, #1
   1f330:	mov	r9, r0
   1f334:	str	r0, [sp, #28]
   1f338:	strb	r3, [r1]
   1f33c:	ldr	r3, [pc, #960]	; 1f704 <close_stdout@@Base+0x4488>
   1f340:	str	r2, [sp, #24]
   1f344:	add	r3, pc, r3
   1f348:	str	r3, [sp, #52]	; 0x34
   1f34c:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f350:	ldr	r2, [sp, #28]
   1f354:	cmp	r2, #1
   1f358:	add	r4, fp, r2
   1f35c:	movls	r3, #0
   1f360:	movhi	r3, #1
   1f364:	cmn	r8, #1
   1f368:	movne	r3, #0
   1f36c:	cmp	r3, #0
   1f370:	beq	1f380 <close_stdout@@Base+0x4104>
   1f374:	ldr	r0, [sp, #32]
   1f378:	bl	11fac <strlen@plt>
   1f37c:	mov	r8, r0
   1f380:	cmp	r8, r4
   1f384:	ldrcc	r3, [sp, #32]
   1f388:	movcc	r6, #0
   1f38c:	addcc	r5, r3, fp
   1f390:	bcc	1eb00 <close_stdout@@Base+0x3884>
   1f394:	ldr	r0, [sp, #32]
   1f398:	ldr	r1, [sp, #52]	; 0x34
   1f39c:	add	r5, r0, fp
   1f3a0:	ldr	r2, [sp, #28]
   1f3a4:	mov	r0, r5
   1f3a8:	bl	11d48 <memcmp@plt>
   1f3ac:	cmp	r0, #0
   1f3b0:	bne	1f3c8 <close_stdout@@Base+0x414c>
   1f3b4:	ldr	r1, [sp, #36]	; 0x24
   1f3b8:	cmp	r1, #0
   1f3bc:	bne	1ef20 <close_stdout@@Base+0x3ca4>
   1f3c0:	mov	r6, #1
   1f3c4:	b	1eb00 <close_stdout@@Base+0x3884>
   1f3c8:	mov	r6, #0
   1f3cc:	b	1eb00 <close_stdout@@Base+0x3884>
   1f3d0:	add	r7, sp, #108	; 0x6c
   1f3d4:	cmn	r8, #1
   1f3d8:	mov	r3, #0
   1f3dc:	str	r3, [sp, #108]	; 0x6c
   1f3e0:	str	r3, [r7, #4]
   1f3e4:	beq	1f5d0 <close_stdout@@Base+0x4354>
   1f3e8:	mov	r1, #0
   1f3ec:	ldr	r0, [sp, #32]
   1f3f0:	mov	ip, #1
   1f3f4:	str	r9, [sp, #88]	; 0x58
   1f3f8:	str	r6, [sp, #96]	; 0x60
   1f3fc:	mov	r9, r1
   1f400:	str	r5, [sp, #100]	; 0x64
   1f404:	mov	r6, ip
   1f408:	mov	r5, r7
   1f40c:	add	r3, sp, #104	; 0x68
   1f410:	sub	r0, r0, #1
   1f414:	str	r3, [sp, #80]	; 0x50
   1f418:	str	r0, [sp, #84]	; 0x54
   1f41c:	str	r1, [sp, #60]	; 0x3c
   1f420:	str	r4, [sp, #92]	; 0x5c
   1f424:	ldr	r2, [sp, #32]
   1f428:	add	r7, r9, fp
   1f42c:	add	r0, sp, #104	; 0x68
   1f430:	mov	r3, r5
   1f434:	add	r4, r2, r7
   1f438:	rsb	r2, r7, r8
   1f43c:	mov	r1, r4
   1f440:	bl	11e80 <mbrtowc@plt>
   1f444:	subs	r2, r0, #0
   1f448:	beq	1f554 <close_stdout@@Base+0x42d8>
   1f44c:	cmn	r2, #1
   1f450:	beq	1f67c <close_stdout@@Base+0x4400>
   1f454:	cmn	r2, #2
   1f458:	beq	1f620 <close_stdout@@Base+0x43a4>
   1f45c:	ldr	r3, [sp, #36]	; 0x24
   1f460:	ldr	r0, [sp, #160]	; 0xa0
   1f464:	cmp	r0, #2
   1f468:	movne	r3, #0
   1f46c:	andeq	r3, r3, #1
   1f470:	cmp	r3, #0
   1f474:	beq	1f530 <close_stdout@@Base+0x42b4>
   1f478:	cmp	r2, #1
   1f47c:	beq	1f530 <close_stdout@@Base+0x42b4>
   1f480:	ldr	r1, [sp, #84]	; 0x54
   1f484:	add	r3, r1, r2
   1f488:	add	r7, r3, r7
   1f48c:	ldrb	r3, [r4, #1]!
   1f490:	sub	r3, r3, #91	; 0x5b
   1f494:	cmp	r3, #33	; 0x21
   1f498:	addls	pc, pc, r3, lsl #2
   1f49c:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4a0:	b	1ef20 <close_stdout@@Base+0x3ca4>
   1f4a4:	b	1ef20 <close_stdout@@Base+0x3ca4>
   1f4a8:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4ac:	b	1ef20 <close_stdout@@Base+0x3ca4>
   1f4b0:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4b4:	b	1ef20 <close_stdout@@Base+0x3ca4>
   1f4b8:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4bc:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4c0:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4c4:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4c8:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4cc:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4d0:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4d4:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4d8:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4dc:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4e0:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4e4:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4e8:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4ec:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4f0:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4f4:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4f8:	b	1f528 <close_stdout@@Base+0x42ac>
   1f4fc:	b	1f528 <close_stdout@@Base+0x42ac>
   1f500:	b	1f528 <close_stdout@@Base+0x42ac>
   1f504:	b	1f528 <close_stdout@@Base+0x42ac>
   1f508:	b	1f528 <close_stdout@@Base+0x42ac>
   1f50c:	b	1f528 <close_stdout@@Base+0x42ac>
   1f510:	b	1f528 <close_stdout@@Base+0x42ac>
   1f514:	b	1f528 <close_stdout@@Base+0x42ac>
   1f518:	b	1f528 <close_stdout@@Base+0x42ac>
   1f51c:	b	1f528 <close_stdout@@Base+0x42ac>
   1f520:	b	1f528 <close_stdout@@Base+0x42ac>
   1f524:	b	1ef20 <close_stdout@@Base+0x3ca4>
   1f528:	cmp	r4, r7
   1f52c:	bne	1f48c <close_stdout@@Base+0x4210>
   1f530:	ldr	r0, [sp, #104]	; 0x68
   1f534:	add	r9, r9, r2
   1f538:	bl	11dd8 <iswprint@plt>
   1f53c:	cmp	r0, #0
   1f540:	mov	r0, r5
   1f544:	moveq	r6, #0
   1f548:	bl	11d24 <mbsinit@plt>
   1f54c:	cmp	r0, #0
   1f550:	beq	1f424 <close_stdout@@Base+0x41a8>
   1f554:	mov	ip, r6
   1f558:	eor	r2, ip, #1
   1f55c:	str	r9, [sp, #60]	; 0x3c
   1f560:	ldr	r4, [sp, #92]	; 0x5c
   1f564:	uxtb	r2, r2
   1f568:	ldr	r9, [sp, #88]	; 0x58
   1f56c:	ldr	r6, [sp, #96]	; 0x60
   1f570:	ldr	r5, [sp, #100]	; 0x64
   1f574:	ldr	r3, [sp, #60]	; 0x3c
   1f578:	cmp	r3, #1
   1f57c:	bls	1f100 <close_stdout@@Base+0x3e84>
   1f580:	ldr	r0, [sp, #24]
   1f584:	and	r2, r2, r0
   1f588:	b	1f10c <close_stdout@@Base+0x3e90>
   1f58c:	ldr	r2, [sp, #164]	; 0xa4
   1f590:	tst	r2, #1
   1f594:	addne	fp, fp, #1
   1f598:	bne	1eac8 <close_stdout@@Base+0x384c>
   1f59c:	b	1edd8 <close_stdout@@Base+0x3b5c>
   1f5a0:	ldr	r0, [sp, #36]	; 0x24
   1f5a4:	cmp	r0, #0
   1f5a8:	beq	1edd8 <close_stdout@@Base+0x3b5c>
   1f5ac:	b	1ef20 <close_stdout@@Base+0x3ca4>
   1f5b0:	ldr	r2, [sp, #32]
   1f5b4:	ldrb	r3, [r2, #1]
   1f5b8:	adds	r3, r3, #0
   1f5bc:	movne	r3, #1
   1f5c0:	b	1eef4 <close_stdout@@Base+0x3c78>
   1f5c4:	bl	12138 <abort@plt>
   1f5c8:	ldr	r8, [sp, #60]	; 0x3c
   1f5cc:	b	1ef20 <close_stdout@@Base+0x3ca4>
   1f5d0:	ldr	r0, [sp, #32]
   1f5d4:	bl	11fac <strlen@plt>
   1f5d8:	mov	r8, r0
   1f5dc:	b	1f3e8 <close_stdout@@Base+0x416c>
   1f5e0:	ldr	r2, [pc, #288]	; 1f708 <close_stdout@@Base+0x448c>
   1f5e4:	mov	r1, #1
   1f5e8:	mov	r9, r1
   1f5ec:	str	r1, [sp, #24]
   1f5f0:	add	r2, pc, r2
   1f5f4:	str	r1, [sp, #28]
   1f5f8:	str	r2, [sp, #52]	; 0x34
   1f5fc:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f600:	ldr	r2, [pc, #260]	; 1f70c <close_stdout@@Base+0x4490>
   1f604:	mov	r3, #1
   1f608:	mov	r9, r3
   1f60c:	str	r3, [sp, #28]
   1f610:	add	r2, pc, r2
   1f614:	str	sl, [sp, #24]
   1f618:	str	r2, [sp, #52]	; 0x34
   1f61c:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f620:	cmp	r8, r7
   1f624:	str	r9, [sp, #60]	; 0x3c
   1f628:	mov	ip, r4
   1f62c:	ldr	r6, [sp, #96]	; 0x60
   1f630:	ldr	r9, [sp, #88]	; 0x58
   1f634:	ldr	r4, [sp, #92]	; 0x5c
   1f638:	ldr	r5, [sp, #100]	; 0x64
   1f63c:	bls	1f674 <close_stdout@@Base+0x43f8>
   1f640:	ldrb	r3, [ip]
   1f644:	cmp	r3, #0
   1f648:	beq	1f674 <close_stdout@@Base+0x43f8>
   1f64c:	ldr	r3, [sp, #60]	; 0x3c
   1f650:	b	1f660 <close_stdout@@Base+0x43e4>
   1f654:	ldrb	r2, [r5, r3]
   1f658:	cmp	r2, #0
   1f65c:	beq	1f670 <close_stdout@@Base+0x43f4>
   1f660:	add	r3, r3, #1
   1f664:	add	r2, fp, r3
   1f668:	cmp	r8, r2
   1f66c:	bhi	1f654 <close_stdout@@Base+0x43d8>
   1f670:	str	r3, [sp, #60]	; 0x3c
   1f674:	mov	r2, #1
   1f678:	b	1f574 <close_stdout@@Base+0x42f8>
   1f67c:	str	r9, [sp, #60]	; 0x3c
   1f680:	mov	r2, #1
   1f684:	ldr	r4, [sp, #92]	; 0x5c
   1f688:	ldr	r6, [sp, #96]	; 0x60
   1f68c:	ldr	r9, [sp, #88]	; 0x58
   1f690:	ldr	r5, [sp, #100]	; 0x64
   1f694:	b	1f574 <close_stdout@@Base+0x42f8>
   1f698:	ldr	r9, [sp, #36]	; 0x24
   1f69c:	b	1f2c0 <close_stdout@@Base+0x4044>
   1f6a0:	bl	11d78 <__stack_chk_fail@plt>
   1f6a4:	ldr	r1, [pc, #100]	; 1f710 <close_stdout@@Base+0x4494>
   1f6a8:	mov	r3, #0
   1f6ac:	mov	r0, #1
   1f6b0:	str	r3, [sp, #24]
   1f6b4:	add	r1, pc, r1
   1f6b8:	str	r0, [sp, #28]
   1f6bc:	mov	r9, r3
   1f6c0:	str	r1, [sp, #52]	; 0x34
   1f6c4:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f6c8:	ldr	r0, [pc, #68]	; 1f714 <close_stdout@@Base+0x4498>
   1f6cc:	mov	r3, #1
   1f6d0:	mov	r9, #0
   1f6d4:	str	r3, [sp, #24]
   1f6d8:	add	r0, pc, r0
   1f6dc:	str	r3, [sp, #28]
   1f6e0:	str	r0, [sp, #52]	; 0x34
   1f6e4:	b	1eaa4 <close_stdout@@Base+0x3828>
   1f6e8:	andeq	sl, r1, ip, ror #11
   1f6ec:	andeq	r0, r0, r0, ror #3
   1f6f0:	ldrdeq	r7, [r0], -r4
   1f6f4:			; <UNDEFINED> instruction: 0x00007fb0
   1f6f8:	andeq	r7, r0, ip, ror #30
   1f6fc:	andeq	r7, r0, r8, asr #30
   1f700:	andeq	r7, r0, ip, asr #29
   1f704:	andeq	r7, r0, r4, ror lr
   1f708:	andeq	r7, r0, ip, asr #23
   1f70c:	andeq	r7, r0, r8, lsr #23
   1f710:	andeq	r7, r0, r4, lsl #22
   1f714:	andeq	r7, r0, r4, ror #21
   1f718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f71c:	sub	sp, sp, #44	; 0x2c
   1f720:	mov	r6, r0
   1f724:	mov	r9, r1
   1f728:	mov	sl, r2
   1f72c:	mov	r4, r3
   1f730:	bl	11fd0 <__errno_location@plt>
   1f734:	ldr	fp, [pc, #412]	; 1f8d8 <close_stdout@@Base+0x465c>
   1f738:	cmp	r6, #0
   1f73c:	add	fp, pc, fp
   1f740:	ldr	r5, [fp]
   1f744:	ldr	r1, [r0]
   1f748:	mov	r8, r0
   1f74c:	str	r1, [sp, #36]	; 0x24
   1f750:	blt	1f8d0 <close_stdout@@Base+0x4654>
   1f754:	ldr	r3, [pc, #384]	; 1f8dc <close_stdout@@Base+0x4660>
   1f758:	add	r3, pc, r3
   1f75c:	ldr	r3, [r3]
   1f760:	cmp	r6, r3
   1f764:	bcc	1f7b8 <close_stdout@@Base+0x453c>
   1f768:	add	r7, r6, #1
   1f76c:	cmn	r7, #-536870911	; 0xe0000001
   1f770:	bhi	1f8d4 <close_stdout@@Base+0x4658>
   1f774:	add	r3, fp, #4
   1f778:	cmp	r5, r3
   1f77c:	beq	1f8a8 <close_stdout@@Base+0x462c>
   1f780:	mov	r0, r5
   1f784:	lsl	r1, r7, #3
   1f788:	bl	21e24 <close_stdout@@Base+0x6ba8>
   1f78c:	mov	r5, r0
   1f790:	str	r0, [fp]
   1f794:	ldr	fp, [pc, #324]	; 1f8e0 <close_stdout@@Base+0x4664>
   1f798:	mov	r1, #0
   1f79c:	add	fp, pc, fp
   1f7a0:	ldr	r0, [fp]
   1f7a4:	rsb	r2, r0, r7
   1f7a8:	add	r0, r5, r0, lsl #3
   1f7ac:	lsl	r2, r2, #3
   1f7b0:	bl	11ff4 <memset@plt>
   1f7b4:	str	r7, [fp]
   1f7b8:	add	r2, r4, #8
   1f7bc:	str	r2, [sp, #32]
   1f7c0:	ldr	r1, [r4]
   1f7c4:	add	fp, r5, r6, lsl #3
   1f7c8:	ldr	lr, [sp, #32]
   1f7cc:	mov	r2, r9
   1f7d0:	ldr	r3, [r4, #4]
   1f7d4:	ldr	ip, [r5, r6, lsl #3]
   1f7d8:	ldr	r7, [fp, #4]
   1f7dc:	orr	r3, r3, #1
   1f7e0:	str	r1, [sp]
   1f7e4:	str	r3, [sp, #4]
   1f7e8:	mov	r1, ip
   1f7ec:	str	lr, [sp, #8]
   1f7f0:	mov	r0, r7
   1f7f4:	ldr	lr, [r4, #40]	; 0x28
   1f7f8:	str	r3, [sp, #28]
   1f7fc:	mov	r3, sl
   1f800:	str	lr, [sp, #12]
   1f804:	ldr	lr, [r4, #44]	; 0x2c
   1f808:	str	ip, [sp, #24]
   1f80c:	str	lr, [sp, #16]
   1f810:	bl	1e9f0 <close_stdout@@Base+0x3774>
   1f814:	ldr	ip, [sp, #24]
   1f818:	cmp	ip, r0
   1f81c:	bhi	1f894 <close_stdout@@Base+0x4618>
   1f820:	ldr	r3, [pc, #188]	; 1f8e4 <close_stdout@@Base+0x4668>
   1f824:	add	r1, r0, #1
   1f828:	str	r1, [r5, r6, lsl #3]
   1f82c:	add	r3, pc, r3
   1f830:	cmp	r7, r3
   1f834:	beq	1f848 <close_stdout@@Base+0x45cc>
   1f838:	mov	r0, r7
   1f83c:	str	r1, [sp, #24]
   1f840:	bl	11ce8 <free@plt>
   1f844:	ldr	r1, [sp, #24]
   1f848:	mov	r0, r1
   1f84c:	str	r1, [sp, #24]
   1f850:	bl	21dcc <close_stdout@@Base+0x6b50>
   1f854:	ldr	r3, [sp, #28]
   1f858:	ldr	lr, [sp, #32]
   1f85c:	mov	r2, r9
   1f860:	str	r0, [fp, #4]
   1f864:	mov	r7, r0
   1f868:	ldr	ip, [r4]
   1f86c:	str	r3, [sp, #4]
   1f870:	mov	r3, sl
   1f874:	str	lr, [sp, #8]
   1f878:	str	ip, [sp]
   1f87c:	ldr	ip, [r4, #40]	; 0x28
   1f880:	ldr	r1, [sp, #24]
   1f884:	str	ip, [sp, #12]
   1f888:	ldr	ip, [r4, #44]	; 0x2c
   1f88c:	str	ip, [sp, #16]
   1f890:	bl	1e9f0 <close_stdout@@Base+0x3774>
   1f894:	ldr	r1, [sp, #36]	; 0x24
   1f898:	mov	r0, r7
   1f89c:	str	r1, [r8]
   1f8a0:	add	sp, sp, #44	; 0x2c
   1f8a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8a8:	lsl	r1, r7, #3
   1f8ac:	mov	r0, #0
   1f8b0:	str	r3, [sp, #24]
   1f8b4:	bl	21e24 <close_stdout@@Base+0x6ba8>
   1f8b8:	ldr	r3, [sp, #24]
   1f8bc:	mov	r5, r0
   1f8c0:	ldm	r3, {r0, r1}
   1f8c4:	str	r5, [fp]
   1f8c8:	stm	r5, {r0, r1}
   1f8cc:	b	1f794 <close_stdout@@Base+0x4518>
   1f8d0:	bl	12138 <abort@plt>
   1f8d4:	bl	21fe0 <close_stdout@@Base+0x6d64>
   1f8d8:	andeq	r9, r1, r8, lsl ip
   1f8dc:	andeq	r9, r1, r8, asr #23
   1f8e0:	andeq	r9, r1, r4, lsl #23
   1f8e4:	andeq	sl, r1, r4, ror r6
   1f8e8:	push	{r4, r5, r6, lr}
   1f8ec:	mov	r5, r0
   1f8f0:	bl	11fd0 <__errno_location@plt>
   1f8f4:	cmp	r5, #0
   1f8f8:	mov	r1, #48	; 0x30
   1f8fc:	mov	r4, r0
   1f900:	ldr	r0, [pc, #24]	; 1f920 <close_stdout@@Base+0x46a4>
   1f904:	ldr	r6, [r4]
   1f908:	add	r0, pc, r0
   1f90c:	add	r0, r0, #256	; 0x100
   1f910:	movne	r0, r5
   1f914:	bl	21fa0 <close_stdout@@Base+0x6d24>
   1f918:	str	r6, [r4]
   1f91c:	pop	{r4, r5, r6, pc}
   1f920:	muleq	r1, r8, r5
   1f924:	cmp	r0, #0
   1f928:	beq	1f934 <close_stdout@@Base+0x46b8>
   1f92c:	ldr	r0, [r0]
   1f930:	bx	lr
   1f934:	ldr	r0, [pc, #12]	; 1f948 <close_stdout@@Base+0x46cc>
   1f938:	add	r0, pc, r0
   1f93c:	add	r0, r0, #256	; 0x100
   1f940:	ldr	r0, [r0]
   1f944:	bx	lr
   1f948:	andeq	sl, r1, r8, ror #10
   1f94c:	cmp	r0, #0
   1f950:	beq	1f95c <close_stdout@@Base+0x46e0>
   1f954:	str	r1, [r0]
   1f958:	bx	lr
   1f95c:	ldr	r0, [pc, #12]	; 1f970 <close_stdout@@Base+0x46f4>
   1f960:	add	r0, pc, r0
   1f964:	add	r0, r0, #256	; 0x100
   1f968:	str	r1, [r0]
   1f96c:	bx	lr
   1f970:	andeq	sl, r1, r0, asr #10
   1f974:	cmp	r0, #0
   1f978:	movne	r3, r0
   1f97c:	beq	1f9ac <close_stdout@@Base+0x4730>
   1f980:	lsr	ip, r1, #5
   1f984:	and	r1, r1, #31
   1f988:	add	r3, r3, ip, lsl #2
   1f98c:	ldr	ip, [r3, #8]
   1f990:	lsr	r0, ip, r1
   1f994:	eor	r2, r0, r2
   1f998:	and	r0, r0, #1
   1f99c:	and	r2, r2, #1
   1f9a0:	eor	ip, ip, r2, lsl r1
   1f9a4:	str	ip, [r3, #8]
   1f9a8:	bx	lr
   1f9ac:	ldr	r3, [pc, #8]	; 1f9bc <close_stdout@@Base+0x4740>
   1f9b0:	add	r3, pc, r3
   1f9b4:	add	r3, r3, #256	; 0x100
   1f9b8:	b	1f980 <close_stdout@@Base+0x4704>
   1f9bc:	strdeq	sl, [r1], -r0
   1f9c0:	subs	r3, r0, #0
   1f9c4:	beq	1f9d4 <close_stdout@@Base+0x4758>
   1f9c8:	ldr	r0, [r3, #4]
   1f9cc:	str	r1, [r3, #4]
   1f9d0:	bx	lr
   1f9d4:	ldr	r3, [pc, #8]	; 1f9e4 <close_stdout@@Base+0x4768>
   1f9d8:	add	r3, pc, r3
   1f9dc:	add	r3, r3, #256	; 0x100
   1f9e0:	b	1f9c8 <close_stdout@@Base+0x474c>
   1f9e4:	andeq	sl, r1, r8, asr #9
   1f9e8:	cmp	r0, #0
   1f9ec:	push	{r3, lr}
   1f9f0:	beq	1fa14 <close_stdout@@Base+0x4798>
   1f9f4:	cmp	r2, #0
   1f9f8:	cmpne	r1, #0
   1f9fc:	mov	r3, #8
   1fa00:	strne	r1, [r0, #40]	; 0x28
   1fa04:	str	r3, [r0]
   1fa08:	strne	r2, [r0, #44]	; 0x2c
   1fa0c:	popne	{r3, pc}
   1fa10:	bl	12138 <abort@plt>
   1fa14:	ldr	r0, [pc, #8]	; 1fa24 <close_stdout@@Base+0x47a8>
   1fa18:	add	r0, pc, r0
   1fa1c:	add	r0, r0, #256	; 0x100
   1fa20:	b	1f9f4 <close_stdout@@Base+0x4778>
   1fa24:	andeq	sl, r1, r8, lsl #9
   1fa28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fa2c:	sub	sp, sp, #24
   1fa30:	mov	r7, r0
   1fa34:	mov	sl, r1
   1fa38:	ldr	r4, [sp, #56]	; 0x38
   1fa3c:	mov	r9, r2
   1fa40:	mov	r8, r3
   1fa44:	cmp	r4, #0
   1fa48:	beq	1fa9c <close_stdout@@Base+0x4820>
   1fa4c:	bl	11fd0 <__errno_location@plt>
   1fa50:	ldr	r3, [r4]
   1fa54:	add	lr, r4, #8
   1fa58:	mov	r1, sl
   1fa5c:	mov	r2, r9
   1fa60:	ldr	r6, [r0]
   1fa64:	mov	r5, r0
   1fa68:	str	r3, [sp]
   1fa6c:	mov	r0, r7
   1fa70:	ldr	ip, [r4, #4]
   1fa74:	mov	r3, r8
   1fa78:	stmib	sp, {ip, lr}
   1fa7c:	ldr	ip, [r4, #40]	; 0x28
   1fa80:	str	ip, [sp, #12]
   1fa84:	ldr	ip, [r4, #44]	; 0x2c
   1fa88:	str	ip, [sp, #16]
   1fa8c:	bl	1e9f0 <close_stdout@@Base+0x3774>
   1fa90:	str	r6, [r5]
   1fa94:	add	sp, sp, #24
   1fa98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fa9c:	ldr	r4, [pc, #8]	; 1faac <close_stdout@@Base+0x4830>
   1faa0:	add	r4, pc, r4
   1faa4:	add	r4, r4, #256	; 0x100
   1faa8:	b	1fa4c <close_stdout@@Base+0x47d0>
   1faac:	andeq	sl, r1, r0, lsl #8
   1fab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fab4:	subs	r4, r3, #0
   1fab8:	sub	sp, sp, #36	; 0x24
   1fabc:	mov	r7, r0
   1fac0:	mov	r6, r1
   1fac4:	mov	r5, r2
   1fac8:	beq	1fb84 <close_stdout@@Base+0x4908>
   1facc:	bl	11fd0 <__errno_location@plt>
   1fad0:	ldr	r3, [r4]
   1fad4:	ldr	sl, [r4, #4]
   1fad8:	add	r9, r4, #8
   1fadc:	mov	r8, r0
   1fae0:	mov	r0, #0
   1fae4:	ldr	r2, [r8]
   1fae8:	cmp	r5, r0
   1faec:	orreq	sl, sl, #1
   1faf0:	str	r9, [sp, #8]
   1faf4:	mov	r1, r0
   1faf8:	stm	sp, {r3, sl}
   1fafc:	mov	r3, r6
   1fb00:	ldr	ip, [r4, #40]	; 0x28
   1fb04:	str	r2, [sp, #28]
   1fb08:	mov	r2, r7
   1fb0c:	str	ip, [sp, #12]
   1fb10:	ldr	ip, [r4, #44]	; 0x2c
   1fb14:	str	ip, [sp, #16]
   1fb18:	bl	1e9f0 <close_stdout@@Base+0x3774>
   1fb1c:	add	r1, r0, #1
   1fb20:	mov	fp, r0
   1fb24:	str	r1, [sp, #24]
   1fb28:	mov	r0, r1
   1fb2c:	bl	21dcc <close_stdout@@Base+0x6b50>
   1fb30:	ldr	lr, [r4]
   1fb34:	str	sl, [sp, #4]
   1fb38:	mov	r3, r6
   1fb3c:	str	r9, [sp, #8]
   1fb40:	mov	r2, r7
   1fb44:	str	lr, [sp]
   1fb48:	ldr	lr, [r4, #40]	; 0x28
   1fb4c:	ldr	r1, [sp, #24]
   1fb50:	str	lr, [sp, #12]
   1fb54:	ldr	lr, [r4, #44]	; 0x2c
   1fb58:	str	lr, [sp, #16]
   1fb5c:	str	r0, [sp, #24]
   1fb60:	bl	1e9f0 <close_stdout@@Base+0x3774>
   1fb64:	ldr	r3, [sp, #28]
   1fb68:	cmp	r5, #0
   1fb6c:	str	r3, [r8]
   1fb70:	ldr	ip, [sp, #24]
   1fb74:	strne	fp, [r5]
   1fb78:	mov	r0, ip
   1fb7c:	add	sp, sp, #36	; 0x24
   1fb80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb84:	ldr	r4, [pc, #8]	; 1fb94 <close_stdout@@Base+0x4918>
   1fb88:	add	r4, pc, r4
   1fb8c:	add	r4, r4, #256	; 0x100
   1fb90:	b	1facc <close_stdout@@Base+0x4850>
   1fb94:	andeq	sl, r1, r8, lsl r3
   1fb98:	mov	r3, r2
   1fb9c:	mov	r2, #0
   1fba0:	b	1fab0 <close_stdout@@Base+0x4834>
   1fba4:	ldr	r2, [pc, #152]	; 1fc44 <close_stdout@@Base+0x49c8>
   1fba8:	push	{r3, r4, r5, r6, r7, lr}
   1fbac:	add	r2, pc, r2
   1fbb0:	ldr	r3, [pc, #144]	; 1fc48 <close_stdout@@Base+0x49cc>
   1fbb4:	ldr	r6, [r2]
   1fbb8:	add	r3, pc, r3
   1fbbc:	cmp	r6, #1
   1fbc0:	ldr	r7, [r3]
   1fbc4:	movhi	r4, #1
   1fbc8:	movhi	r5, r7
   1fbcc:	bls	1fbe8 <close_stdout@@Base+0x496c>
   1fbd0:	ldr	r0, [r5, #12]
   1fbd4:	add	r4, r4, #1
   1fbd8:	bl	11ce8 <free@plt>
   1fbdc:	cmp	r4, r6
   1fbe0:	add	r5, r5, #8
   1fbe4:	bne	1fbd0 <close_stdout@@Base+0x4954>
   1fbe8:	ldr	r4, [pc, #92]	; 1fc4c <close_stdout@@Base+0x49d0>
   1fbec:	ldr	r0, [r7, #4]
   1fbf0:	add	r4, pc, r4
   1fbf4:	cmp	r0, r4
   1fbf8:	beq	1fc10 <close_stdout@@Base+0x4994>
   1fbfc:	bl	11ce8 <free@plt>
   1fc00:	ldr	r3, [pc, #72]	; 1fc50 <close_stdout@@Base+0x49d4>
   1fc04:	mov	r2, #256	; 0x100
   1fc08:	add	r3, pc, r3
   1fc0c:	stmib	r3, {r2, r4}
   1fc10:	ldr	r4, [pc, #60]	; 1fc54 <close_stdout@@Base+0x49d8>
   1fc14:	add	r4, pc, r4
   1fc18:	add	r5, r4, #4
   1fc1c:	cmp	r7, r5
   1fc20:	beq	1fc30 <close_stdout@@Base+0x49b4>
   1fc24:	mov	r0, r7
   1fc28:	bl	11ce8 <free@plt>
   1fc2c:	str	r5, [r4]
   1fc30:	ldr	r3, [pc, #32]	; 1fc58 <close_stdout@@Base+0x49dc>
   1fc34:	mov	r2, #1
   1fc38:	add	r3, pc, r3
   1fc3c:	str	r2, [r3]
   1fc40:	pop	{r3, r4, r5, r6, r7, pc}
   1fc44:	andeq	r9, r1, r4, ror r7
   1fc48:	muleq	r1, ip, r7
   1fc4c:			; <UNDEFINED> instruction: 0x0001a2b0
   1fc50:	andeq	r9, r1, ip, asr #14
   1fc54:	andeq	r9, r1, r0, asr #14
   1fc58:	andeq	r9, r1, r8, ror #13
   1fc5c:	ldr	r3, [pc, #12]	; 1fc70 <close_stdout@@Base+0x49f4>
   1fc60:	mvn	r2, #0
   1fc64:	add	r3, pc, r3
   1fc68:	add	r3, r3, #256	; 0x100
   1fc6c:	b	1f718 <close_stdout@@Base+0x449c>
   1fc70:	andeq	sl, r1, ip, lsr r2
   1fc74:	ldr	r3, [pc, #8]	; 1fc84 <close_stdout@@Base+0x4a08>
   1fc78:	add	r3, pc, r3
   1fc7c:	add	r3, r3, #256	; 0x100
   1fc80:	b	1f718 <close_stdout@@Base+0x449c>
   1fc84:	andeq	sl, r1, r8, lsr #4
   1fc88:	mov	r1, r0
   1fc8c:	mov	r0, #0
   1fc90:	b	1fc5c <close_stdout@@Base+0x49e0>
   1fc94:	mov	r2, r1
   1fc98:	mov	r1, r0
   1fc9c:	mov	r0, #0
   1fca0:	b	1fc74 <close_stdout@@Base+0x49f8>
   1fca4:	ldr	r3, [pc, #92]	; 1fd08 <close_stdout@@Base+0x4a8c>
   1fca8:	ldr	ip, [pc, #92]	; 1fd0c <close_stdout@@Base+0x4a90>
   1fcac:	add	r3, pc, r3
   1fcb0:	push	{r4, r5, r6, r7, lr}
   1fcb4:	sub	sp, sp, #60	; 0x3c
   1fcb8:	ldr	r4, [r3, ip]
   1fcbc:	add	r5, sp, #4
   1fcc0:	mov	r7, r2
   1fcc4:	mov	r6, r0
   1fcc8:	mov	r0, r5
   1fccc:	ldr	r3, [r4]
   1fcd0:	str	r3, [sp, #52]	; 0x34
   1fcd4:	bl	1e838 <close_stdout@@Base+0x35bc>
   1fcd8:	mov	r3, r5
   1fcdc:	mvn	r2, #0
   1fce0:	mov	r0, r6
   1fce4:	mov	r1, r7
   1fce8:	bl	1f718 <close_stdout@@Base+0x449c>
   1fcec:	ldr	r2, [sp, #52]	; 0x34
   1fcf0:	ldr	r3, [r4]
   1fcf4:	cmp	r2, r3
   1fcf8:	bne	1fd04 <close_stdout@@Base+0x4a88>
   1fcfc:	add	sp, sp, #60	; 0x3c
   1fd00:	pop	{r4, r5, r6, r7, pc}
   1fd04:	bl	11d78 <__stack_chk_fail@plt>
   1fd08:	andeq	r9, r1, ip, asr #6
   1fd0c:	andeq	r0, r0, r0, ror #3
   1fd10:	ldr	ip, [pc, #96]	; 1fd78 <close_stdout@@Base+0x4afc>
   1fd14:	push	{r4, r5, r6, r7, r8, lr}
   1fd18:	add	ip, pc, ip
   1fd1c:	ldr	lr, [pc, #88]	; 1fd7c <close_stdout@@Base+0x4b00>
   1fd20:	sub	sp, sp, #56	; 0x38
   1fd24:	mov	r8, r3
   1fd28:	add	r5, sp, #4
   1fd2c:	mov	r7, r2
   1fd30:	mov	r6, r0
   1fd34:	ldr	r4, [ip, lr]
   1fd38:	mov	r0, r5
   1fd3c:	ldr	r3, [r4]
   1fd40:	str	r3, [sp, #52]	; 0x34
   1fd44:	bl	1e838 <close_stdout@@Base+0x35bc>
   1fd48:	mov	r2, r8
   1fd4c:	mov	r3, r5
   1fd50:	mov	r0, r6
   1fd54:	mov	r1, r7
   1fd58:	bl	1f718 <close_stdout@@Base+0x449c>
   1fd5c:	ldr	r2, [sp, #52]	; 0x34
   1fd60:	ldr	r3, [r4]
   1fd64:	cmp	r2, r3
   1fd68:	bne	1fd74 <close_stdout@@Base+0x4af8>
   1fd6c:	add	sp, sp, #56	; 0x38
   1fd70:	pop	{r4, r5, r6, r7, r8, pc}
   1fd74:	bl	11d78 <__stack_chk_fail@plt>
   1fd78:	andeq	r9, r1, r0, ror #5
   1fd7c:	andeq	r0, r0, r0, ror #3
   1fd80:	mov	r2, r1
   1fd84:	mov	r1, r0
   1fd88:	mov	r0, #0
   1fd8c:	b	1fca4 <close_stdout@@Base+0x4a28>
   1fd90:	mov	ip, r1
   1fd94:	mov	r3, r2
   1fd98:	mov	r1, r0
   1fd9c:	mov	r2, ip
   1fda0:	mov	r0, #0
   1fda4:	b	1fd10 <close_stdout@@Base+0x4a94>
   1fda8:	push	{r4, r5, r6, r7, r8, lr}
   1fdac:	mov	r5, r2
   1fdb0:	ldr	lr, [pc, #136]	; 1fe40 <close_stdout@@Base+0x4bc4>
   1fdb4:	mov	r7, r0
   1fdb8:	mov	r6, r1
   1fdbc:	ldr	r4, [pc, #128]	; 1fe44 <close_stdout@@Base+0x4bc8>
   1fdc0:	add	lr, pc, lr
   1fdc4:	sub	sp, sp, #56	; 0x38
   1fdc8:	add	lr, lr, #256	; 0x100
   1fdcc:	ldr	r8, [pc, #116]	; 1fe48 <close_stdout@@Base+0x4bcc>
   1fdd0:	add	r4, pc, r4
   1fdd4:	add	ip, sp, #4
   1fdd8:	ldm	lr!, {r0, r1, r2, r3}
   1fddc:	ldr	r4, [r4, r8]
   1fde0:	stmia	ip!, {r0, r1, r2, r3}
   1fde4:	ldm	lr!, {r0, r1, r2, r3}
   1fde8:	ldr	r8, [r4]
   1fdec:	stmia	ip!, {r0, r1, r2, r3}
   1fdf0:	ldm	lr, {r0, r1, r2, r3}
   1fdf4:	str	r8, [sp, #52]	; 0x34
   1fdf8:	stm	ip, {r0, r1, r2, r3}
   1fdfc:	mov	r1, r5
   1fe00:	add	r5, sp, #4
   1fe04:	mov	r2, #1
   1fe08:	mov	r0, r5
   1fe0c:	bl	1f974 <close_stdout@@Base+0x46f8>
   1fe10:	mov	r2, r6
   1fe14:	mov	r3, r5
   1fe18:	mov	r1, r7
   1fe1c:	mov	r0, #0
   1fe20:	bl	1f718 <close_stdout@@Base+0x449c>
   1fe24:	ldr	r2, [sp, #52]	; 0x34
   1fe28:	ldr	r3, [r4]
   1fe2c:	cmp	r2, r3
   1fe30:	bne	1fe3c <close_stdout@@Base+0x4bc0>
   1fe34:	add	sp, sp, #56	; 0x38
   1fe38:	pop	{r4, r5, r6, r7, r8, pc}
   1fe3c:	bl	11d78 <__stack_chk_fail@plt>
   1fe40:	andeq	sl, r1, r0, ror #1
   1fe44:	andeq	r9, r1, r8, lsr #4
   1fe48:	andeq	r0, r0, r0, ror #3
   1fe4c:	mov	r2, r1
   1fe50:	mvn	r1, #0
   1fe54:	b	1fda8 <close_stdout@@Base+0x4b2c>
   1fe58:	mov	r1, #58	; 0x3a
   1fe5c:	b	1fe4c <close_stdout@@Base+0x4bd0>
   1fe60:	mov	r2, #58	; 0x3a
   1fe64:	b	1fda8 <close_stdout@@Base+0x4b2c>
   1fe68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fe6c:	mov	r5, r2
   1fe70:	ldr	lr, [pc, #144]	; 1ff08 <close_stdout@@Base+0x4c8c>
   1fe74:	mov	r8, r0
   1fe78:	mov	r9, r1
   1fe7c:	mov	r7, r3
   1fe80:	add	lr, pc, lr
   1fe84:	ldr	r4, [pc, #128]	; 1ff0c <close_stdout@@Base+0x4c90>
   1fe88:	add	lr, lr, #256	; 0x100
   1fe8c:	sub	sp, sp, #56	; 0x38
   1fe90:	ldr	sl, [pc, #120]	; 1ff10 <close_stdout@@Base+0x4c94>
   1fe94:	add	r4, pc, r4
   1fe98:	ldm	lr!, {r0, r1, r2, r3}
   1fe9c:	add	ip, sp, #4
   1fea0:	ldr	r4, [r4, sl]
   1fea4:	ldr	r6, [sp, #88]	; 0x58
   1fea8:	stmia	ip!, {r0, r1, r2, r3}
   1feac:	ldm	lr!, {r0, r1, r2, r3}
   1feb0:	ldr	sl, [r4]
   1feb4:	stmia	ip!, {r0, r1, r2, r3}
   1feb8:	ldm	lr, {r0, r1, r2, r3}
   1febc:	str	sl, [sp, #52]	; 0x34
   1fec0:	stm	ip, {r0, r1, r2, r3}
   1fec4:	mov	r2, r5
   1fec8:	add	r5, sp, #4
   1fecc:	mov	r1, r9
   1fed0:	mov	r0, r5
   1fed4:	bl	1f9e8 <close_stdout@@Base+0x476c>
   1fed8:	mov	r2, r6
   1fedc:	mov	r3, r5
   1fee0:	mov	r0, r8
   1fee4:	mov	r1, r7
   1fee8:	bl	1f718 <close_stdout@@Base+0x449c>
   1feec:	ldr	r2, [sp, #52]	; 0x34
   1fef0:	ldr	r3, [r4]
   1fef4:	cmp	r2, r3
   1fef8:	bne	1ff04 <close_stdout@@Base+0x4c88>
   1fefc:	add	sp, sp, #56	; 0x38
   1ff00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ff04:	bl	11d78 <__stack_chk_fail@plt>
   1ff08:	andeq	sl, r1, r0, lsr #32
   1ff0c:	andeq	r9, r1, r4, ror #2
   1ff10:	andeq	r0, r0, r0, ror #3
   1ff14:	push	{lr}		; (str lr, [sp, #-4]!)
   1ff18:	sub	sp, sp, #12
   1ff1c:	mvn	ip, #0
   1ff20:	str	ip, [sp]
   1ff24:	bl	1fe68 <close_stdout@@Base+0x4bec>
   1ff28:	add	sp, sp, #12
   1ff2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff30:	mov	ip, r1
   1ff34:	mov	r3, r2
   1ff38:	mov	r1, r0
   1ff3c:	mov	r2, ip
   1ff40:	mov	r0, #0
   1ff44:	b	1ff14 <close_stdout@@Base+0x4c98>
   1ff48:	push	{lr}		; (str lr, [sp, #-4]!)
   1ff4c:	sub	sp, sp, #12
   1ff50:	mov	lr, r1
   1ff54:	mov	ip, r2
   1ff58:	mov	r1, r0
   1ff5c:	str	r3, [sp]
   1ff60:	mov	r2, lr
   1ff64:	mov	r3, ip
   1ff68:	mov	r0, #0
   1ff6c:	bl	1fe68 <close_stdout@@Base+0x4bec>
   1ff70:	add	sp, sp, #12
   1ff74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff78:	ldr	r3, [pc, #12]	; 1ff8c <close_stdout@@Base+0x4d10>
   1ff7c:	ldr	ip, [pc, #12]	; 1ff90 <close_stdout@@Base+0x4d14>
   1ff80:	add	r3, pc, r3
   1ff84:	ldr	r3, [r3, ip]
   1ff88:	b	1f718 <close_stdout@@Base+0x449c>
   1ff8c:	andeq	r9, r1, r8, ror r0
   1ff90:	ldrdeq	r0, [r0], -r8
   1ff94:	mov	r2, r1
   1ff98:	mov	r1, r0
   1ff9c:	mov	r0, #0
   1ffa0:	b	1ff78 <close_stdout@@Base+0x4cfc>
   1ffa4:	mvn	r2, #0
   1ffa8:	b	1ff78 <close_stdout@@Base+0x4cfc>
   1ffac:	mov	r1, r0
   1ffb0:	mov	r0, #0
   1ffb4:	b	1ffa4 <close_stdout@@Base+0x4d28>
   1ffb8:	cmp	r2, #0
   1ffbc:	push	{r3, r4, r6, r7, r8, lr}
   1ffc0:	mov	r6, r2
   1ffc4:	mov	r7, r0
   1ffc8:	mov	r8, r1
   1ffcc:	sub	r4, r2, #1
   1ffd0:	beq	1fffc <close_stdout@@Base+0x4d80>
   1ffd4:	bl	11f34 <__ctype_tolower_loc@plt>
   1ffd8:	add	r1, r8, r6
   1ffdc:	add	r2, r7, r6
   1ffe0:	ldrb	ip, [r1, #-1]!
   1ffe4:	sub	r4, r4, #1
   1ffe8:	ldr	r3, [r0]
   1ffec:	cmn	r4, #1
   1fff0:	ldr	r3, [r3, ip, lsl #2]
   1fff4:	strb	r3, [r2, #-1]!
   1fff8:	bne	1ffe0 <close_stdout@@Base+0x4d64>
   1fffc:	mov	r0, r7
   20000:	pop	{r3, r4, r6, r7, r8, pc}
   20004:	cmp	r2, #0
   20008:	push	{r3, r4, r6, r7, r8, lr}
   2000c:	mov	r6, r2
   20010:	mov	r7, r0
   20014:	mov	r8, r1
   20018:	sub	r4, r2, #1
   2001c:	beq	20048 <close_stdout@@Base+0x4dcc>
   20020:	bl	11f40 <__ctype_toupper_loc@plt>
   20024:	add	r1, r8, r6
   20028:	add	r2, r7, r6
   2002c:	ldrb	ip, [r1, #-1]!
   20030:	sub	r4, r4, #1
   20034:	ldr	r3, [r0]
   20038:	cmn	r4, #1
   2003c:	ldr	r3, [r3, ip, lsl #2]
   20040:	strb	r3, [r2, #-1]!
   20044:	bne	2002c <close_stdout@@Base+0x4db0>
   20048:	mov	r0, r7
   2004c:	pop	{r3, r4, r6, r7, r8, pc}
   20050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20054:	sub	sp, sp, #1168	; 0x490
   20058:	sub	sp, sp, #12
   2005c:	ldr	ip, [pc, #4080]	; 21054 <close_stdout@@Base+0x5dd8>
   20060:	mov	r4, r3
   20064:	mov	r8, r1
   20068:	ldr	r6, [sp, #1216]	; 0x4c0
   2006c:	add	ip, pc, ip
   20070:	str	r0, [sp, #48]	; 0x30
   20074:	ldr	r0, [pc, #4060]	; 21058 <close_stdout@@Base+0x5ddc>
   20078:	mov	r3, ip
   2007c:	str	r6, [sp, #40]	; 0x28
   20080:	str	r2, [sp, #28]
   20084:	ldr	r0, [ip, r0]
   20088:	ldr	ip, [r6, #8]
   2008c:	ldr	r6, [r6, #40]	; 0x28
   20090:	ldr	r3, [r0]
   20094:	cmp	ip, #12
   20098:	str	ip, [sp, #36]	; 0x24
   2009c:	subgt	ip, ip, #12
   200a0:	str	r0, [sp, #44]	; 0x2c
   200a4:	str	r6, [sp, #84]	; 0x54
   200a8:	str	r3, [sp, #1172]	; 0x494
   200ac:	strgt	ip, [sp, #36]	; 0x24
   200b0:	bgt	200c4 <close_stdout@@Base+0x4e48>
   200b4:	ldr	ip, [sp, #36]	; 0x24
   200b8:	cmp	ip, #0
   200bc:	moveq	ip, #12
   200c0:	str	ip, [sp, #36]	; 0x24
   200c4:	ldrb	r2, [r4]
   200c8:	cmp	r2, #0
   200cc:	beq	215dc <close_stdout@@Base+0x6360>
   200d0:	movw	ip, #46021	; 0xb3c5
   200d4:	movw	r6, #34953	; 0x8889
   200d8:	movt	ip, #37282	; 0x91a2
   200dc:	movt	r6, #34952	; 0x8888
   200e0:	str	ip, [sp, #72]	; 0x48
   200e4:	movw	r7, #52429	; 0xcccd
   200e8:	str	r6, [sp, #64]	; 0x40
   200ec:	movw	ip, #34079	; 0x851f
   200f0:	movw	r6, #9363	; 0x2493
   200f4:	movt	ip, #20971	; 0x51eb
   200f8:	movt	r6, #37449	; 0x9249
   200fc:	str	ip, [sp, #60]	; 0x3c
   20100:	movt	r7, #52428	; 0xcccc
   20104:	movw	ip, #26215	; 0x6667
   20108:	str	r6, [sp, #56]	; 0x38
   2010c:	movt	ip, #26214	; 0x6666
   20110:	mov	fp, #0
   20114:	str	ip, [sp, #68]	; 0x44
   20118:	str	r7, [sp, #80]	; 0x50
   2011c:	b	2014c <close_stdout@@Base+0x4ed0>
   20120:	ldr	ip, [sp, #28]
   20124:	rsb	r3, fp, ip
   20128:	cmp	r3, #1
   2012c:	bls	20434 <close_stdout@@Base+0x51b8>
   20130:	add	fp, fp, #1
   20134:	cmp	r8, #0
   20138:	strbne	r2, [r8], #1
   2013c:	ldrb	r2, [r4, #1]
   20140:	add	r4, r4, #1
   20144:	cmp	r2, #0
   20148:	beq	20584 <close_stdout@@Base+0x5308>
   2014c:	cmp	r2, #37	; 0x25
   20150:	bne	20120 <close_stdout@@Base+0x4ea4>
   20154:	ldr	r6, [sp, #48]	; 0x30
   20158:	mov	r1, #0
   2015c:	mov	r3, r4
   20160:	mov	sl, r1
   20164:	str	r6, [sp, #32]
   20168:	ldrb	r2, [r3, #1]
   2016c:	add	r3, r3, #1
   20170:	cmp	r2, #48	; 0x30
   20174:	mov	r4, r3
   20178:	beq	2020c <close_stdout@@Base+0x4f90>
   2017c:	bhi	201f4 <close_stdout@@Base+0x4f78>
   20180:	cmp	r2, #35	; 0x23
   20184:	moveq	r1, #1
   20188:	beq	20168 <close_stdout@@Base+0x4eec>
   2018c:	cmp	r2, #45	; 0x2d
   20190:	beq	2020c <close_stdout@@Base+0x4f90>
   20194:	sub	r0, r2, #48	; 0x30
   20198:	cmp	r0, #9
   2019c:	mvnhi	r5, #0
   201a0:	bhi	20214 <close_stdout@@Base+0x4f98>
   201a4:	movw	ip, #52428	; 0xcccc
   201a8:	add	r3, r3, #1
   201ac:	movt	ip, #3276	; 0xccc
   201b0:	mov	r5, #0
   201b4:	b	201e4 <close_stdout@@Base+0x4f68>
   201b8:	ldrb	r2, [r3, #-1]
   201bc:	beq	20424 <close_stdout@@Base+0x51a8>
   201c0:	add	r5, r5, r5, lsl #2
   201c4:	sub	r2, r2, #48	; 0x30
   201c8:	add	r5, r2, r5, lsl #1
   201cc:	mov	r4, r3
   201d0:	add	r3, r3, #1
   201d4:	ldrb	r2, [r4]
   201d8:	sub	r0, r2, #48	; 0x30
   201dc:	cmp	r0, #9
   201e0:	bhi	20214 <close_stdout@@Base+0x4f98>
   201e4:	cmp	r5, ip
   201e8:	ble	201b8 <close_stdout@@Base+0x4f3c>
   201ec:	mvn	r5, #-2147483648	; 0x80000000
   201f0:	b	201cc <close_stdout@@Base+0x4f50>
   201f4:	cmp	r2, #94	; 0x5e
   201f8:	moveq	r6, #1
   201fc:	streq	r6, [sp, #32]
   20200:	beq	20168 <close_stdout@@Base+0x4eec>
   20204:	cmp	r2, #95	; 0x5f
   20208:	bne	20194 <close_stdout@@Base+0x4f18>
   2020c:	mov	sl, r2
   20210:	b	20168 <close_stdout@@Base+0x4eec>
   20214:	cmp	r2, #69	; 0x45
   20218:	beq	20458 <close_stdout@@Base+0x51dc>
   2021c:	cmp	r2, #79	; 0x4f
   20220:	movne	r3, #0
   20224:	beq	20458 <close_stdout@@Base+0x51dc>
   20228:	mov	r9, r2
   2022c:	cmp	r2, #122	; 0x7a
   20230:	addls	pc, pc, r2, lsl #2
   20234:	b	20650 <close_stdout@@Base+0x53d4>
   20238:	b	20648 <close_stdout@@Base+0x53cc>
   2023c:	b	20650 <close_stdout@@Base+0x53d4>
   20240:	b	20650 <close_stdout@@Base+0x53d4>
   20244:	b	20650 <close_stdout@@Base+0x53d4>
   20248:	b	20650 <close_stdout@@Base+0x53d4>
   2024c:	b	20650 <close_stdout@@Base+0x53d4>
   20250:	b	20650 <close_stdout@@Base+0x53d4>
   20254:	b	20650 <close_stdout@@Base+0x53d4>
   20258:	b	20650 <close_stdout@@Base+0x53d4>
   2025c:	b	20650 <close_stdout@@Base+0x53d4>
   20260:	b	20650 <close_stdout@@Base+0x53d4>
   20264:	b	20650 <close_stdout@@Base+0x53d4>
   20268:	b	20650 <close_stdout@@Base+0x53d4>
   2026c:	b	20650 <close_stdout@@Base+0x53d4>
   20270:	b	20650 <close_stdout@@Base+0x53d4>
   20274:	b	20650 <close_stdout@@Base+0x53d4>
   20278:	b	20650 <close_stdout@@Base+0x53d4>
   2027c:	b	20650 <close_stdout@@Base+0x53d4>
   20280:	b	20650 <close_stdout@@Base+0x53d4>
   20284:	b	20650 <close_stdout@@Base+0x53d4>
   20288:	b	20650 <close_stdout@@Base+0x53d4>
   2028c:	b	20650 <close_stdout@@Base+0x53d4>
   20290:	b	20650 <close_stdout@@Base+0x53d4>
   20294:	b	20650 <close_stdout@@Base+0x53d4>
   20298:	b	20650 <close_stdout@@Base+0x53d4>
   2029c:	b	20650 <close_stdout@@Base+0x53d4>
   202a0:	b	20650 <close_stdout@@Base+0x53d4>
   202a4:	b	20650 <close_stdout@@Base+0x53d4>
   202a8:	b	20650 <close_stdout@@Base+0x53d4>
   202ac:	b	20650 <close_stdout@@Base+0x53d4>
   202b0:	b	20650 <close_stdout@@Base+0x53d4>
   202b4:	b	20650 <close_stdout@@Base+0x53d4>
   202b8:	b	20650 <close_stdout@@Base+0x53d4>
   202bc:	b	20650 <close_stdout@@Base+0x53d4>
   202c0:	b	20650 <close_stdout@@Base+0x53d4>
   202c4:	b	20650 <close_stdout@@Base+0x53d4>
   202c8:	b	20650 <close_stdout@@Base+0x53d4>
   202cc:	b	20fe8 <close_stdout@@Base+0x5d6c>
   202d0:	b	20650 <close_stdout@@Base+0x53d4>
   202d4:	b	20650 <close_stdout@@Base+0x53d4>
   202d8:	b	20650 <close_stdout@@Base+0x53d4>
   202dc:	b	20650 <close_stdout@@Base+0x53d4>
   202e0:	b	20650 <close_stdout@@Base+0x53d4>
   202e4:	b	20650 <close_stdout@@Base+0x53d4>
   202e8:	b	20650 <close_stdout@@Base+0x53d4>
   202ec:	b	20650 <close_stdout@@Base+0x53d4>
   202f0:	b	20650 <close_stdout@@Base+0x53d4>
   202f4:	b	20650 <close_stdout@@Base+0x53d4>
   202f8:	b	20650 <close_stdout@@Base+0x53d4>
   202fc:	b	20650 <close_stdout@@Base+0x53d4>
   20300:	b	20650 <close_stdout@@Base+0x53d4>
   20304:	b	20650 <close_stdout@@Base+0x53d4>
   20308:	b	20650 <close_stdout@@Base+0x53d4>
   2030c:	b	20650 <close_stdout@@Base+0x53d4>
   20310:	b	20650 <close_stdout@@Base+0x53d4>
   20314:	b	20650 <close_stdout@@Base+0x53d4>
   20318:	b	20650 <close_stdout@@Base+0x53d4>
   2031c:	b	20650 <close_stdout@@Base+0x53d4>
   20320:	b	21314 <close_stdout@@Base+0x6098>
   20324:	b	20650 <close_stdout@@Base+0x53d4>
   20328:	b	20650 <close_stdout@@Base+0x53d4>
   2032c:	b	20650 <close_stdout@@Base+0x53d4>
   20330:	b	20650 <close_stdout@@Base+0x53d4>
   20334:	b	20650 <close_stdout@@Base+0x53d4>
   20338:	b	20650 <close_stdout@@Base+0x53d4>
   2033c:	b	205a0 <close_stdout@@Base+0x5324>
   20340:	b	205a0 <close_stdout@@Base+0x5324>
   20344:	b	20c5c <close_stdout@@Base+0x59e0>
   20348:	b	20fd4 <close_stdout@@Base+0x5d58>
   2034c:	b	20650 <close_stdout@@Base+0x53d4>
   20350:	b	20f90 <close_stdout@@Base+0x5d14>
   20354:	b	20dfc <close_stdout@@Base+0x5b80>
   20358:	b	21338 <close_stdout@@Base+0x60bc>
   2035c:	b	206fc <close_stdout@@Base+0x5480>
   20360:	b	20650 <close_stdout@@Base+0x53d4>
   20364:	b	20650 <close_stdout@@Base+0x53d4>
   20368:	b	20650 <close_stdout@@Base+0x53d4>
   2036c:	b	21128 <close_stdout@@Base+0x5eac>
   20370:	b	210e4 <close_stdout@@Base+0x5e68>
   20374:	b	20650 <close_stdout@@Base+0x53d4>
   20378:	b	212e8 <close_stdout@@Base+0x606c>
   2037c:	b	20650 <close_stdout@@Base+0x53d4>
   20380:	b	212dc <close_stdout@@Base+0x6060>
   20384:	b	212f8 <close_stdout@@Base+0x607c>
   20388:	b	20d24 <close_stdout@@Base+0x5aa8>
   2038c:	b	21368 <close_stdout@@Base+0x60ec>
   20390:	b	20dfc <close_stdout@@Base+0x5b80>
   20394:	b	20c00 <close_stdout@@Base+0x5984>
   20398:	b	20468 <close_stdout@@Base+0x51ec>
   2039c:	b	2098c <close_stdout@@Base+0x5710>
   203a0:	b	208d4 <close_stdout@@Base+0x5658>
   203a4:	b	20650 <close_stdout@@Base+0x53d4>
   203a8:	b	20650 <close_stdout@@Base+0x53d4>
   203ac:	b	20650 <close_stdout@@Base+0x53d4>
   203b0:	b	20650 <close_stdout@@Base+0x53d4>
   203b4:	b	20650 <close_stdout@@Base+0x53d4>
   203b8:	b	20650 <close_stdout@@Base+0x53d4>
   203bc:	b	208b8 <close_stdout@@Base+0x563c>
   203c0:	b	20878 <close_stdout@@Base+0x55fc>
   203c4:	b	20468 <close_stdout@@Base+0x51ec>
   203c8:	b	207c4 <close_stdout@@Base+0x5548>
   203cc:	b	2079c <close_stdout@@Base+0x5520>
   203d0:	b	20650 <close_stdout@@Base+0x53d4>
   203d4:	b	20dfc <close_stdout@@Base+0x5b80>
   203d8:	b	20878 <close_stdout@@Base+0x55fc>
   203dc:	b	20650 <close_stdout@@Base+0x53d4>
   203e0:	b	20764 <close_stdout@@Base+0x54e8>
   203e4:	b	21354 <close_stdout@@Base+0x60d8>
   203e8:	b	20fc4 <close_stdout@@Base+0x5d48>
   203ec:	b	20fa4 <close_stdout@@Base+0x5d28>
   203f0:	b	21278 <close_stdout@@Base+0x5ffc>
   203f4:	b	20650 <close_stdout@@Base+0x53d4>
   203f8:	b	210c4 <close_stdout@@Base+0x5e48>
   203fc:	b	20650 <close_stdout@@Base+0x53d4>
   20400:	b	20470 <close_stdout@@Base+0x51f4>
   20404:	b	21144 <close_stdout@@Base+0x5ec8>
   20408:	b	20694 <close_stdout@@Base+0x5418>
   2040c:	b	2108c <close_stdout@@Base+0x5e10>
   20410:	b	20650 <close_stdout@@Base+0x53d4>
   20414:	b	21070 <close_stdout@@Base+0x5df4>
   20418:	b	20468 <close_stdout@@Base+0x51ec>
   2041c:	b	20cc4 <close_stdout@@Base+0x5a48>
   20420:	b	207e0 <close_stdout@@Base+0x5564>
   20424:	cmp	r2, #55	; 0x37
   20428:	ble	201c0 <close_stdout@@Base+0x4f44>
   2042c:	mvn	r5, #-2147483648	; 0x80000000
   20430:	b	201cc <close_stdout@@Base+0x4f50>
   20434:	mov	r0, #0
   20438:	ldr	ip, [sp, #44]	; 0x2c
   2043c:	ldr	r2, [sp, #1172]	; 0x494
   20440:	ldr	r3, [ip]
   20444:	cmp	r2, r3
   20448:	bne	217e0 <close_stdout@@Base+0x6564>
   2044c:	add	sp, sp, #1168	; 0x490
   20450:	add	sp, sp, #12
   20454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20458:	mov	r3, r2
   2045c:	add	r4, r4, #1
   20460:	ldrb	r2, [r4]
   20464:	b	20228 <close_stdout@@Base+0x4fac>
   20468:	cmp	r3, #79	; 0x4f
   2046c:	beq	205a8 <close_stdout@@Base+0x532c>
   20470:	mov	ip, r2
   20474:	mov	r6, #0
   20478:	cmp	r3, #0
   2047c:	mov	r2, #32
   20480:	addeq	r7, sp, #152	; 0x98
   20484:	strb	r2, [sp, #140]	; 0x8c
   20488:	streq	r3, [sp, #76]	; 0x4c
   2048c:	mov	r2, #37	; 0x25
   20490:	subeq	r3, r7, #10
   20494:	strb	r2, [sp, #141]	; 0x8d
   20498:	bne	217e4 <close_stdout@@Base+0x6568>
   2049c:	strb	ip, [r3]
   204a0:	sub	r0, r7, #4
   204a4:	mov	ip, #0
   204a8:	mov	r1, #1024	; 0x400
   204ac:	strb	ip, [r3, #1]
   204b0:	sub	r2, r7, #12
   204b4:	ldr	r3, [sp, #40]	; 0x28
   204b8:	bl	11f10 <strftime@plt>
   204bc:	cmp	r0, #0
   204c0:	beq	2013c <close_stdout@@Base+0x4ec0>
   204c4:	sub	r9, r0, #1
   204c8:	ldr	r0, [sp, #28]
   204cc:	bic	r3, r5, r5, asr #31
   204d0:	cmp	r3, r9
   204d4:	movcs	ip, r3
   204d8:	movcc	ip, r9
   204dc:	rsb	r2, fp, r0
   204e0:	cmp	ip, r2
   204e4:	bcs	20434 <close_stdout@@Base+0x51b8>
   204e8:	cmp	r8, #0
   204ec:	beq	20570 <close_stdout@@Base+0x52f4>
   204f0:	cmp	r9, r3
   204f4:	ldr	r1, [sp, #76]	; 0x4c
   204f8:	movcs	r3, #0
   204fc:	movcc	r3, #1
   20500:	cmp	r1, #0
   20504:	movne	r3, #0
   20508:	cmp	r3, #0
   2050c:	beq	20540 <close_stdout@@Base+0x52c4>
   20510:	cmp	sl, #48	; 0x30
   20514:	rsb	r5, r9, r5
   20518:	str	ip, [sp, #20]
   2051c:	moveq	r0, r8
   20520:	movne	r0, r8
   20524:	moveq	r1, sl
   20528:	moveq	r2, r5
   2052c:	movne	r2, r5
   20530:	movne	r1, #32
   20534:	bl	11ff4 <memset@plt>
   20538:	ldr	ip, [sp, #20]
   2053c:	add	r8, r8, r5
   20540:	cmp	r6, #0
   20544:	bne	20678 <close_stdout@@Base+0x53fc>
   20548:	ldr	r6, [sp, #32]
   2054c:	sub	r1, r7, #3
   20550:	mov	r0, r8
   20554:	mov	r2, r9
   20558:	cmp	r6, #0
   2055c:	str	ip, [sp, #20]
   20560:	beq	2066c <close_stdout@@Base+0x53f0>
   20564:	bl	20004 <close_stdout@@Base+0x4d88>
   20568:	ldr	ip, [sp, #20]
   2056c:	add	r8, r8, r9
   20570:	ldrb	r2, [r4, #1]
   20574:	add	fp, fp, ip
   20578:	add	r4, r4, #1
   2057c:	cmp	r2, #0
   20580:	bne	2014c <close_stdout@@Base+0x4ed0>
   20584:	ldr	r6, [sp, #28]
   20588:	mov	r0, fp
   2058c:	cmp	r8, #0
   20590:	cmpne	r6, #0
   20594:	movne	r3, #0
   20598:	strbne	r3, [r8]
   2059c:	b	20438 <close_stdout@@Base+0x51bc>
   205a0:	cmp	r3, #0
   205a4:	beq	213a4 <close_stdout@@Base+0x6128>
   205a8:	sub	r3, r4, #1
   205ac:	mov	r7, #1
   205b0:	ldrb	r2, [r3]
   205b4:	mov	r6, r3
   205b8:	add	r7, r7, #1
   205bc:	sub	r3, r3, #1
   205c0:	cmp	r2, #37	; 0x25
   205c4:	bne	205b0 <close_stdout@@Base+0x5334>
   205c8:	ldr	ip, [sp, #28]
   205cc:	bic	r3, r5, r5, asr #31
   205d0:	cmp	r7, r3
   205d4:	movcs	r9, r7
   205d8:	movcc	r9, r3
   205dc:	rsb	r2, fp, ip
   205e0:	cmp	r9, r2
   205e4:	bcs	20434 <close_stdout@@Base+0x51b8>
   205e8:	cmp	r8, #0
   205ec:	beq	20640 <close_stdout@@Base+0x53c4>
   205f0:	cmp	r3, r7
   205f4:	bls	20620 <close_stdout@@Base+0x53a4>
   205f8:	cmp	sl, #48	; 0x30
   205fc:	rsb	r5, r7, r5
   20600:	moveq	r0, r8
   20604:	movne	r0, r8
   20608:	moveq	r1, sl
   2060c:	moveq	r2, r5
   20610:	movne	r2, r5
   20614:	movne	r1, #32
   20618:	add	r8, r8, r5
   2061c:	bl	11ff4 <memset@plt>
   20620:	ldr	ip, [sp, #32]
   20624:	mov	r1, r6
   20628:	mov	r0, r8
   2062c:	mov	r2, r7
   20630:	cmp	ip, #0
   20634:	beq	20664 <close_stdout@@Base+0x53e8>
   20638:	bl	20004 <close_stdout@@Base+0x4d88>
   2063c:	add	r8, r8, r7
   20640:	add	fp, fp, r9
   20644:	b	2013c <close_stdout@@Base+0x4ec0>
   20648:	ldrb	r2, [r4, #-1]
   2064c:	sub	r4, r4, #1
   20650:	cmp	r2, #37	; 0x25
   20654:	bne	205a8 <close_stdout@@Base+0x532c>
   20658:	mov	r6, r4
   2065c:	mov	r7, #1
   20660:	b	205c8 <close_stdout@@Base+0x534c>
   20664:	bl	11d0c <memcpy@plt>
   20668:	b	2063c <close_stdout@@Base+0x53c0>
   2066c:	bl	11d0c <memcpy@plt>
   20670:	ldr	ip, [sp, #20]
   20674:	b	2056c <close_stdout@@Base+0x52f0>
   20678:	sub	r1, r7, #3
   2067c:	mov	r0, r8
   20680:	mov	r2, r9
   20684:	str	ip, [sp, #20]
   20688:	bl	1ffb8 <close_stdout@@Base+0x4d3c>
   2068c:	ldr	ip, [sp, #20]
   20690:	b	2056c <close_stdout@@Base+0x52f0>
   20694:	ldr	r6, [sp, #28]
   20698:	bic	r3, r5, r5, asr #31
   2069c:	rsb	r2, fp, r6
   206a0:	cmp	r3, #1
   206a4:	movcs	r6, r3
   206a8:	movcc	r6, #1
   206ac:	cmp	r6, r2
   206b0:	bcs	20434 <close_stdout@@Base+0x51b8>
   206b4:	cmp	r8, #0
   206b8:	beq	206f4 <close_stdout@@Base+0x5478>
   206bc:	cmp	r3, #1
   206c0:	bls	206ec <close_stdout@@Base+0x5470>
   206c4:	cmp	sl, #48	; 0x30
   206c8:	sub	r5, r5, #1
   206cc:	moveq	r0, r8
   206d0:	movne	r0, r8
   206d4:	moveq	r1, sl
   206d8:	moveq	r2, r5
   206dc:	movne	r2, r5
   206e0:	movne	r1, #32
   206e4:	add	r8, r8, r5
   206e8:	bl	11ff4 <memset@plt>
   206ec:	mov	r3, #9
   206f0:	strb	r3, [r8], #1
   206f4:	add	fp, fp, r6
   206f8:	b	2013c <close_stdout@@Base+0x4ec0>
   206fc:	cmp	r3, #69	; 0x45
   20700:	beq	205a8 <close_stdout@@Base+0x532c>
   20704:	ldr	r0, [sp, #36]	; 0x24
   20708:	mov	r6, #2
   2070c:	str	r6, [sp, #76]	; 0x4c
   20710:	mov	r2, #0
   20714:	lsr	r1, r0, #31
   20718:	str	r2, [sp, #88]	; 0x58
   2071c:	str	r1, [sp, #52]	; 0x34
   20720:	ldr	r6, [sp, #52]	; 0x34
   20724:	eor	r1, r6, #1
   20728:	cmp	r3, #79	; 0x4f
   2072c:	movne	r1, #0
   20730:	andeq	r1, r1, #1
   20734:	cmp	r1, #0
   20738:	beq	209d4 <close_stdout@@Base+0x5758>
   2073c:	mov	r6, #0
   20740:	mov	r2, #32
   20744:	strb	r2, [sp, #140]	; 0x8c
   20748:	mov	r2, #37	; 0x25
   2074c:	strb	r2, [sp, #141]	; 0x8d
   20750:	add	r7, sp, #152	; 0x98
   20754:	strb	r3, [sp, #142]	; 0x8e
   20758:	uxtb	ip, r9
   2075c:	sub	r3, r7, #9
   20760:	b	2049c <close_stdout@@Base+0x5220>
   20764:	cmp	r3, #69	; 0x45
   20768:	beq	205a8 <close_stdout@@Base+0x532c>
   2076c:	ldr	r6, [sp, #40]	; 0x28
   20770:	mov	ip, #3
   20774:	mov	r2, #0
   20778:	str	r2, [sp, #88]	; 0x58
   2077c:	ldr	r0, [r6, #28]
   20780:	cmn	r0, #1
   20784:	str	ip, [sp, #76]	; 0x4c
   20788:	add	r0, r0, #1
   2078c:	movge	r1, #0
   20790:	movlt	r1, #1
   20794:	str	r1, [sp, #52]	; 0x34
   20798:	b	20720 <close_stdout@@Base+0x54a4>
   2079c:	cmp	r3, #69	; 0x45
   207a0:	beq	205a8 <close_stdout@@Base+0x532c>
   207a4:	ldr	r6, [sp, #40]	; 0x28
   207a8:	ldr	r0, [r6, #12]
   207ac:	cmp	sl, #45	; 0x2d
   207b0:	cmpne	sl, #48	; 0x30
   207b4:	mov	ip, #2
   207b8:	str	ip, [sp, #76]	; 0x4c
   207bc:	movne	sl, #95	; 0x5f
   207c0:	b	20710 <close_stdout@@Base+0x5494>
   207c4:	cmp	r3, #69	; 0x45
   207c8:	beq	205a8 <close_stdout@@Base+0x532c>
   207cc:	ldr	r6, [sp, #40]	; 0x28
   207d0:	mov	ip, #2
   207d4:	str	ip, [sp, #76]	; 0x4c
   207d8:	ldr	r0, [r6, #12]
   207dc:	b	20710 <close_stdout@@Base+0x5494>
   207e0:	mov	r7, #0
   207e4:	ldr	r6, [sp, #40]	; 0x28
   207e8:	ldr	r2, [r6, #32]
   207ec:	cmp	r2, #0
   207f0:	blt	2013c <close_stdout@@Base+0x4ec0>
   207f4:	ldr	ip, [r6, #36]	; 0x24
   207f8:	ldr	r6, [sp, #64]	; 0x40
   207fc:	ldr	r0, [sp, #72]	; 0x48
   20800:	asr	r2, ip, #31
   20804:	smull	r6, r1, r6, ip
   20808:	smull	r0, r6, r0, ip
   2080c:	add	r1, r1, ip
   20810:	add	r6, r6, ip
   20814:	str	r6, [sp, #76]	; 0x4c
   20818:	ldr	r6, [sp, #64]	; 0x40
   2081c:	rsb	r1, r2, r1, asr #5
   20820:	smull	r0, r6, r6, r1
   20824:	ldr	r0, [sp, #76]	; 0x4c
   20828:	rsb	r2, r2, r0, asr #11
   2082c:	str	r2, [sp, #76]	; 0x4c
   20830:	str	r6, [sp, #52]	; 0x34
   20834:	asr	r6, r1, #31
   20838:	ldr	r0, [sp, #52]	; 0x34
   2083c:	str	r6, [sp, #88]	; 0x58
   20840:	rsb	r6, r1, r1, lsl #4
   20844:	add	r2, r0, r1
   20848:	ldr	r0, [sp, #88]	; 0x58
   2084c:	sub	r6, ip, r6, lsl #2
   20850:	rsb	r2, r0, r2, asr #5
   20854:	rsb	r2, r2, r2, lsl #4
   20858:	sub	r2, r1, r2, lsl #2
   2085c:	cmp	r7, #3
   20860:	addls	pc, pc, r7, lsl #2
   20864:	b	216cc <close_stdout@@Base+0x6450>
   20868:	b	2141c <close_stdout@@Base+0x61a0>
   2086c:	b	213f0 <close_stdout@@Base+0x6174>
   20870:	b	213b8 <close_stdout@@Base+0x613c>
   20874:	b	21448 <close_stdout@@Base+0x61cc>
   20878:	cmp	r1, #0
   2087c:	ldr	r6, [sp, #32]
   20880:	movne	r6, #1
   20884:	cmp	r3, #0
   20888:	str	r6, [sp, #32]
   2088c:	bne	205a8 <close_stdout@@Base+0x532c>
   20890:	add	r7, sp, #152	; 0x98
   20894:	mov	r6, #0
   20898:	mov	ip, r2
   2089c:	str	r6, [sp, #76]	; 0x4c
   208a0:	mov	r2, #32
   208a4:	sub	r3, r7, #10
   208a8:	strb	r2, [sp, #140]	; 0x8c
   208ac:	mov	r2, #37	; 0x25
   208b0:	strb	r2, [sp, #141]	; 0x8d
   208b4:	b	2049c <close_stdout@@Base+0x5220>
   208b8:	cmp	r3, #0
   208bc:	bne	205a8 <close_stdout@@Base+0x532c>
   208c0:	ldr	r6, [sp, #32]
   208c4:	cmp	r1, #0
   208c8:	movne	r6, #1
   208cc:	str	r6, [sp, #32]
   208d0:	b	20890 <close_stdout@@Base+0x5614>
   208d4:	ldr	ip, [sp, #32]
   208d8:	cmp	r1, #0
   208dc:	ldr	r6, [sp, #84]	; 0x54
   208e0:	moveq	r9, #0
   208e4:	movne	r9, #1
   208e8:	movne	ip, #0
   208ec:	cmp	r6, #0
   208f0:	str	ip, [sp, #32]
   208f4:	beq	217a0 <close_stdout@@Base+0x6524>
   208f8:	mov	r0, r6
   208fc:	bl	11fac <strlen@plt>
   20900:	mov	r6, r0
   20904:	ldr	ip, [sp, #28]
   20908:	bic	r3, r5, r5, asr #31
   2090c:	cmp	r6, r3
   20910:	movcs	r7, r6
   20914:	movcc	r7, r3
   20918:	rsb	r2, fp, ip
   2091c:	cmp	r7, r2
   20920:	bcs	20434 <close_stdout@@Base+0x51b8>
   20924:	cmp	r8, #0
   20928:	beq	20984 <close_stdout@@Base+0x5708>
   2092c:	cmp	r3, r6
   20930:	bls	2095c <close_stdout@@Base+0x56e0>
   20934:	cmp	sl, #48	; 0x30
   20938:	rsb	r5, r6, r5
   2093c:	moveq	r0, r8
   20940:	movne	r0, r8
   20944:	moveq	r1, sl
   20948:	moveq	r2, r5
   2094c:	movne	r2, r5
   20950:	movne	r1, #32
   20954:	add	r8, r8, r5
   20958:	bl	11ff4 <memset@plt>
   2095c:	cmp	r9, #0
   20960:	bne	21624 <close_stdout@@Base+0x63a8>
   20964:	ldr	ip, [sp, #32]
   20968:	mov	r0, r8
   2096c:	ldr	r1, [sp, #84]	; 0x54
   20970:	mov	r2, r6
   20974:	cmp	ip, #0
   20978:	beq	215e4 <close_stdout@@Base+0x6368>
   2097c:	bl	20004 <close_stdout@@Base+0x4d88>
   20980:	add	r8, r8, r6
   20984:	add	fp, fp, r7
   20988:	b	2013c <close_stdout@@Base+0x4ec0>
   2098c:	cmp	r3, #69	; 0x45
   20990:	beq	215f8 <close_stdout@@Base+0x637c>
   20994:	cmp	r3, #79	; 0x4f
   20998:	beq	205a8 <close_stdout@@Base+0x532c>
   2099c:	ldr	r6, [sp, #40]	; 0x28
   209a0:	movw	r3, #63636	; 0xf894
   209a4:	movt	r3, #65535	; 0xffff
   209a8:	mov	ip, #4
   209ac:	str	ip, [sp, #76]	; 0x4c
   209b0:	ldr	r2, [r6, #20]
   209b4:	add	r0, r2, #1888	; 0x760
   209b8:	cmp	r2, r3
   209bc:	add	r0, r0, #12
   209c0:	movge	r3, #0
   209c4:	movlt	r3, #1
   209c8:	str	r3, [sp, #52]	; 0x34
   209cc:	mov	r2, #0
   209d0:	str	r2, [sp, #88]	; 0x58
   209d4:	ldr	ip, [sp, #52]	; 0x34
   209d8:	add	r7, sp, #152	; 0x98
   209dc:	str	fp, [sp, #92]	; 0x5c
   209e0:	add	r3, r7, #10
   209e4:	cmp	ip, #0
   209e8:	ldr	fp, [sp, #80]	; 0x50
   209ec:	rsbne	r0, r0, #0
   209f0:	b	209f8 <close_stdout@@Base+0x577c>
   209f4:	mov	r3, r6
   209f8:	tst	r2, #1
   209fc:	movne	r1, #58	; 0x3a
   20a00:	strbne	r1, [r3, #-1]
   20a04:	umull	r6, r1, fp, r0
   20a08:	subne	r3, r3, #1
   20a0c:	asrs	r2, r2, #1
   20a10:	sub	r6, r3, #1
   20a14:	moveq	r9, #0
   20a18:	movne	r9, #1
   20a1c:	lsr	r1, r1, #3
   20a20:	cmp	r1, #0
   20a24:	orrne	r9, r9, #1
   20a28:	add	ip, r1, r1, lsl #2
   20a2c:	cmp	r9, #0
   20a30:	sub	ip, r0, ip, lsl #1
   20a34:	mov	r0, r1
   20a38:	add	ip, ip, #48	; 0x30
   20a3c:	strb	ip, [r3, #-1]
   20a40:	bne	209f4 <close_stdout@@Base+0x5778>
   20a44:	ldr	r3, [sp, #76]	; 0x4c
   20a48:	ldr	ip, [sp, #52]	; 0x34
   20a4c:	cmp	r3, r5
   20a50:	movlt	r3, r5
   20a54:	ldr	fp, [sp, #92]	; 0x5c
   20a58:	cmp	ip, #0
   20a5c:	bne	21478 <close_stdout@@Base+0x61fc>
   20a60:	ldr	r0, [sp, #88]	; 0x58
   20a64:	cmp	r0, #0
   20a68:	bne	21518 <close_stdout@@Base+0x629c>
   20a6c:	cmp	sl, #45	; 0x2d
   20a70:	add	r7, r7, #10
   20a74:	str	r7, [sp, #52]	; 0x34
   20a78:	beq	215d4 <close_stdout@@Base+0x6358>
   20a7c:	rsb	r7, r7, r6
   20a80:	add	r7, r3, r7
   20a84:	cmp	r7, #0
   20a88:	movgt	ip, #0
   20a8c:	strgt	ip, [sp, #76]	; 0x4c
   20a90:	ble	215d4 <close_stdout@@Base+0x6358>
   20a94:	cmp	sl, #95	; 0x5f
   20a98:	beq	21520 <close_stdout@@Base+0x62a4>
   20a9c:	ldr	r1, [sp, #28]
   20aa0:	rsb	r2, fp, r1
   20aa4:	cmp	r3, r2
   20aa8:	bcs	20434 <close_stdout@@Base+0x51b8>
   20aac:	ldr	r0, [sp, #76]	; 0x4c
   20ab0:	cmp	r0, #0
   20ab4:	beq	20b2c <close_stdout@@Base+0x58b0>
   20ab8:	bic	r1, r5, r5, asr #31
   20abc:	cmp	r1, #1
   20ac0:	movcs	r9, r1
   20ac4:	movcc	r9, #1
   20ac8:	cmp	r2, r9
   20acc:	bls	20434 <close_stdout@@Base+0x51b8>
   20ad0:	cmp	r8, #0
   20ad4:	beq	20b28 <close_stdout@@Base+0x58ac>
   20ad8:	cmp	r1, #1
   20adc:	movls	r1, #0
   20ae0:	movhi	r1, #1
   20ae4:	cmp	r3, #0
   20ae8:	movne	r1, #0
   20aec:	cmp	r1, #0
   20af0:	beq	20b24 <close_stdout@@Base+0x58a8>
   20af4:	sub	r5, r5, #1
   20af8:	cmp	sl, #48	; 0x30
   20afc:	mov	r0, r8
   20b00:	mov	r2, r5
   20b04:	beq	216d4 <close_stdout@@Base+0x6458>
   20b08:	mov	r1, #32
   20b0c:	str	r3, [sp, #24]
   20b10:	str	ip, [sp, #20]
   20b14:	bl	11ff4 <memset@plt>
   20b18:	ldr	ip, [sp, #20]
   20b1c:	add	r8, r8, r5
   20b20:	ldr	r3, [sp, #24]
   20b24:	strb	ip, [r8], #1
   20b28:	add	fp, fp, r9
   20b2c:	cmp	r8, #0
   20b30:	beq	20b50 <close_stdout@@Base+0x58d4>
   20b34:	mov	r0, r8
   20b38:	mov	r1, #48	; 0x30
   20b3c:	mov	r2, r7
   20b40:	str	r3, [sp, #24]
   20b44:	bl	11ff4 <memset@plt>
   20b48:	ldr	r3, [sp, #24]
   20b4c:	add	r8, r8, r7
   20b50:	mov	r9, #0
   20b54:	add	fp, fp, r7
   20b58:	mov	r5, r9
   20b5c:	ldr	ip, [sp, #52]	; 0x34
   20b60:	rsb	r7, r6, ip
   20b64:	ldr	ip, [sp, #28]
   20b68:	rsb	r2, fp, ip
   20b6c:	cmp	r7, r9
   20b70:	movcs	ip, r7
   20b74:	movcc	ip, r9
   20b78:	cmp	ip, r2
   20b7c:	bcs	20434 <close_stdout@@Base+0x51b8>
   20b80:	cmp	r8, #0
   20b84:	beq	20570 <close_stdout@@Base+0x52f4>
   20b88:	cmp	r7, r9
   20b8c:	movcs	r9, #0
   20b90:	movcc	r9, #1
   20b94:	cmp	r3, #0
   20b98:	movne	r9, #0
   20b9c:	cmp	r9, #0
   20ba0:	beq	20bd4 <close_stdout@@Base+0x5958>
   20ba4:	cmp	sl, #48	; 0x30
   20ba8:	rsb	r5, r7, r5
   20bac:	str	ip, [sp, #20]
   20bb0:	moveq	r0, r8
   20bb4:	movne	r0, r8
   20bb8:	moveq	r1, sl
   20bbc:	moveq	r2, r5
   20bc0:	movne	r2, r5
   20bc4:	movne	r1, #32
   20bc8:	bl	11ff4 <memset@plt>
   20bcc:	ldr	ip, [sp, #20]
   20bd0:	add	r8, r8, r5
   20bd4:	ldr	lr, [sp, #32]
   20bd8:	mov	r1, r6
   20bdc:	mov	r0, r8
   20be0:	mov	r2, r7
   20be4:	cmp	lr, #0
   20be8:	str	ip, [sp, #20]
   20bec:	beq	21504 <close_stdout@@Base+0x6288>
   20bf0:	bl	20004 <close_stdout@@Base+0x4d88>
   20bf4:	ldr	ip, [sp, #20]
   20bf8:	add	r8, r8, r7
   20bfc:	b	20570 <close_stdout@@Base+0x52f4>
   20c00:	cmp	r3, #69	; 0x45
   20c04:	beq	205a8 <close_stdout@@Base+0x532c>
   20c08:	ldr	r6, [sp, #40]	; 0x28
   20c0c:	mov	ip, #2
   20c10:	str	ip, [sp, #76]	; 0x4c
   20c14:	ldr	r2, [r6, #24]
   20c18:	ldr	ip, [r6, #28]
   20c1c:	ldr	r6, [sp, #56]	; 0x38
   20c20:	add	r2, r2, #6
   20c24:	asr	r1, r2, #31
   20c28:	smull	r6, r0, r6, r2
   20c2c:	add	r0, r0, r2
   20c30:	rsb	r1, r1, r0, asr #2
   20c34:	rsb	r1, r1, r1, lsl #3
   20c38:	rsb	r2, r1, r2
   20c3c:	rsb	r2, r2, ip
   20c40:	ldr	ip, [sp, #56]	; 0x38
   20c44:	add	r2, r2, #7
   20c48:	smull	ip, r0, ip, r2
   20c4c:	asr	r1, r2, #31
   20c50:	add	r0, r0, r2
   20c54:	rsb	r0, r1, r0, asr #2
   20c58:	b	20710 <close_stdout@@Base+0x5494>
   20c5c:	cmp	r3, #79	; 0x4f
   20c60:	beq	205a8 <close_stdout@@Base+0x532c>
   20c64:	cmp	r3, #69	; 0x45
   20c68:	beq	216a0 <close_stdout@@Base+0x6424>
   20c6c:	ldr	ip, [sp, #40]	; 0x28
   20c70:	mov	r0, #100	; 0x64
   20c74:	ldr	r6, [sp, #60]	; 0x3c
   20c78:	ldr	r3, [ip, #20]
   20c7c:	smull	r6, r1, r6, r3
   20c80:	asr	r2, r3, #31
   20c84:	rsb	r2, r2, r1, asr #5
   20c88:	add	r1, r2, #19
   20c8c:	mls	r2, r0, r2, r3
   20c90:	cmp	r2, #0
   20c94:	movge	r0, #0
   20c98:	blt	21790 <close_stdout@@Base+0x6514>
   20c9c:	movw	r2, #63636	; 0xf894
   20ca0:	movt	r2, #65535	; 0xffff
   20ca4:	cmp	r3, r2
   20ca8:	mov	ip, #2
   20cac:	rsb	r0, r0, r1
   20cb0:	str	ip, [sp, #76]	; 0x4c
   20cb4:	movge	r2, #0
   20cb8:	movlt	r2, #1
   20cbc:	str	r2, [sp, #52]	; 0x34
   20cc0:	b	209cc <close_stdout@@Base+0x5750>
   20cc4:	cmp	r3, #69	; 0x45
   20cc8:	beq	215ec <close_stdout@@Base+0x6370>
   20ccc:	ldr	r6, [sp, #40]	; 0x28
   20cd0:	mov	r1, #100	; 0x64
   20cd4:	ldr	r2, [r6, #20]
   20cd8:	ldr	r6, [sp, #60]	; 0x3c
   20cdc:	asr	r0, r2, #31
   20ce0:	smull	r6, ip, r6, r2
   20ce4:	rsb	r0, r0, ip, asr #5
   20ce8:	mls	r0, r1, r0, r2
   20cec:	cmp	r0, #0
   20cf0:	movge	ip, #2
   20cf4:	strge	ip, [sp, #76]	; 0x4c
   20cf8:	bge	20710 <close_stdout@@Base+0x5494>
   20cfc:	movw	r1, #63636	; 0xf894
   20d00:	movt	r1, #65535	; 0xffff
   20d04:	cmp	r2, r1
   20d08:	rsblt	r0, r0, #0
   20d0c:	addge	r0, r0, #100	; 0x64
   20d10:	movlt	ip, #2
   20d14:	movge	r6, #2
   20d18:	strlt	ip, [sp, #76]	; 0x4c
   20d1c:	strge	r6, [sp, #76]	; 0x4c
   20d20:	b	20710 <close_stdout@@Base+0x5494>
   20d24:	ldr	r9, [pc, #816]	; 2105c <close_stdout@@Base+0x5de0>
   20d28:	add	r9, pc, r9
   20d2c:	ldr	r6, [sp, #40]	; 0x28
   20d30:	mov	r3, r9
   20d34:	ldr	ip, [sp, #1220]	; 0x4c4
   20d38:	mov	r1, #0
   20d3c:	ldr	lr, [sp, #1224]	; 0x4c8
   20d40:	mvn	r2, #0
   20d44:	str	r6, [sp]
   20d48:	ldr	r6, [sp, #28]
   20d4c:	str	ip, [sp, #4]
   20d50:	ldr	r0, [sp, #32]
   20d54:	rsb	ip, fp, r6
   20d58:	str	lr, [sp, #8]
   20d5c:	str	ip, [sp, #20]
   20d60:	bl	20050 <close_stdout@@Base+0x4dd4>
   20d64:	bic	r3, r5, r5, asr #31
   20d68:	ldr	ip, [sp, #20]
   20d6c:	cmp	r0, r3
   20d70:	movcs	r7, r0
   20d74:	movcc	r7, r3
   20d78:	mov	r6, r0
   20d7c:	cmp	r7, ip
   20d80:	bcs	20434 <close_stdout@@Base+0x51b8>
   20d84:	cmp	r8, #0
   20d88:	beq	20984 <close_stdout@@Base+0x5708>
   20d8c:	cmp	r0, r3
   20d90:	bcs	20dc8 <close_stdout@@Base+0x5b4c>
   20d94:	cmp	sl, #48	; 0x30
   20d98:	rsb	r5, r0, r5
   20d9c:	strne	ip, [sp, #20]
   20da0:	moveq	r0, r8
   20da4:	movne	r0, r8
   20da8:	moveq	r1, sl
   20dac:	moveq	r2, r5
   20db0:	movne	r2, r5
   20db4:	movne	r1, #32
   20db8:	addeq	r8, r8, r5
   20dbc:	addne	r8, r8, r5
   20dc0:	bl	11ff4 <memset@plt>
   20dc4:	ldr	ip, [sp, #20]
   20dc8:	ldr	r1, [sp, #1220]	; 0x4c4
   20dcc:	mov	r2, ip
   20dd0:	ldr	r3, [sp, #1224]	; 0x4c8
   20dd4:	ldr	lr, [sp, #40]	; 0x28
   20dd8:	str	r1, [sp, #4]
   20ddc:	mov	r1, r8
   20de0:	str	r3, [sp, #8]
   20de4:	mov	r3, r9
   20de8:	str	lr, [sp]
   20dec:	add	r8, r8, r6
   20df0:	ldr	r0, [sp, #32]
   20df4:	bl	20050 <close_stdout@@Base+0x4dd4>
   20df8:	b	20984 <close_stdout@@Base+0x5708>
   20dfc:	cmp	r3, #69	; 0x45
   20e00:	beq	205a8 <close_stdout@@Base+0x532c>
   20e04:	ldr	ip, [sp, #40]	; 0x28
   20e08:	ldr	r1, [ip, #20]
   20e0c:	ldr	r0, [ip, #24]
   20e10:	ldr	r7, [ip, #28]
   20e14:	str	r1, [sp, #52]	; 0x34
   20e18:	ldr	r6, [sp, #52]	; 0x34
   20e1c:	rsb	r1, r0, r7
   20e20:	add	r1, r1, #380	; 0x17c
   20e24:	str	r0, [sp, #76]	; 0x4c
   20e28:	cmp	r6, #0
   20e2c:	ldr	r6, [sp, #56]	; 0x38
   20e30:	add	r1, r1, #2
   20e34:	smull	r6, ip, r6, r1
   20e38:	mvnge	r6, #99	; 0x63
   20e3c:	movlt	r6, #300	; 0x12c
   20e40:	asr	r0, r1, #31
   20e44:	add	ip, ip, r1
   20e48:	str	ip, [sp, #92]	; 0x5c
   20e4c:	ldr	ip, [sp, #52]	; 0x34
   20e50:	add	r6, ip, r6
   20e54:	ldr	ip, [sp, #92]	; 0x5c
   20e58:	rsb	r0, r0, ip, asr #2
   20e5c:	rsb	r0, r0, r0, lsl #3
   20e60:	rsb	r1, r0, r1
   20e64:	rsb	r1, r1, r7
   20e68:	adds	r1, r1, #3
   20e6c:	str	r1, [sp, #88]	; 0x58
   20e70:	bmi	216f4 <close_stdout@@Base+0x6478>
   20e74:	tst	r6, #3
   20e78:	mvnne	r1, #364	; 0x16c
   20e7c:	bne	20ecc <close_stdout@@Base+0x5c50>
   20e80:	ldr	r1, [sp, #60]	; 0x3c
   20e84:	smull	ip, r1, r1, r6
   20e88:	asr	ip, r6, #31
   20e8c:	rsb	r0, ip, r1, asr #5
   20e90:	str	r1, [sp, #16]
   20e94:	mov	r1, #100	; 0x64
   20e98:	mls	r1, r1, r0, r6
   20e9c:	cmp	r1, #0
   20ea0:	movwne	r1, #65170	; 0xfe92
   20ea4:	movtne	r1, #65535	; 0xffff
   20ea8:	bne	20ecc <close_stdout@@Base+0x5c50>
   20eac:	ldr	r1, [sp, #16]
   20eb0:	rsb	r0, ip, r1, asr #7
   20eb4:	mov	ip, #400	; 0x190
   20eb8:	movw	r1, #65170	; 0xfe92
   20ebc:	movt	r1, #65535	; 0xffff
   20ec0:	mls	r0, ip, r0, r6
   20ec4:	cmp	r0, #0
   20ec8:	mvnne	r1, #364	; 0x16c
   20ecc:	ldr	ip, [sp, #76]	; 0x4c
   20ed0:	add	r6, r1, r7
   20ed4:	ldr	r0, [sp, #56]	; 0x38
   20ed8:	rsb	r1, ip, r6
   20edc:	add	r1, r1, #380	; 0x17c
   20ee0:	add	r1, r1, #2
   20ee4:	smull	r0, ip, r0, r1
   20ee8:	asr	r0, r1, #31
   20eec:	add	ip, ip, r1
   20ef0:	rsb	r0, r0, ip, asr #2
   20ef4:	rsb	r0, r0, r0, lsl #3
   20ef8:	rsb	r1, r0, r1
   20efc:	rsb	r1, r1, r6
   20f00:	adds	r1, r1, #3
   20f04:	ldrmi	r1, [sp, #88]	; 0x58
   20f08:	movmi	r7, #0
   20f0c:	movpl	r7, #1
   20f10:	cmp	r2, #71	; 0x47
   20f14:	beq	2165c <close_stdout@@Base+0x63e0>
   20f18:	cmp	r2, #103	; 0x67
   20f1c:	bne	21638 <close_stdout@@Base+0x63bc>
   20f20:	ldr	r2, [sp, #52]	; 0x34
   20f24:	ldr	r6, [sp, #60]	; 0x3c
   20f28:	ldr	ip, [sp, #52]	; 0x34
   20f2c:	ldr	r0, [sp, #52]	; 0x34
   20f30:	smull	r2, r1, r6, r2
   20f34:	asr	r2, ip, #31
   20f38:	mov	ip, #100	; 0x64
   20f3c:	rsb	r2, r2, r1, asr #5
   20f40:	mls	r2, ip, r2, r0
   20f44:	add	r2, r2, r7
   20f48:	smull	r6, r0, r6, r2
   20f4c:	asr	r1, r2, #31
   20f50:	rsb	r0, r1, r0, asr #5
   20f54:	mls	r0, ip, r0, r2
   20f58:	cmp	r0, #0
   20f5c:	bge	20708 <close_stdout@@Base+0x548c>
   20f60:	movw	r2, #63636	; 0xf894
   20f64:	ldr	r1, [sp, #52]	; 0x34
   20f68:	movt	r2, #65535	; 0xffff
   20f6c:	rsb	r2, r7, r2
   20f70:	cmp	r1, r2
   20f74:	rsblt	r0, r0, #0
   20f78:	addge	r0, r0, #100	; 0x64
   20f7c:	movlt	r6, #2
   20f80:	movge	ip, #2
   20f84:	strlt	r6, [sp, #76]	; 0x4c
   20f88:	strge	ip, [sp, #76]	; 0x4c
   20f8c:	b	20710 <close_stdout@@Base+0x5494>
   20f90:	ldr	r9, [pc, #200]	; 21060 <close_stdout@@Base+0x5de4>
   20f94:	cmp	r3, #0
   20f98:	add	r9, pc, r9
   20f9c:	beq	20d2c <close_stdout@@Base+0x5ab0>
   20fa0:	b	205a8 <close_stdout@@Base+0x532c>
   20fa4:	cmp	r3, #69	; 0x45
   20fa8:	beq	205a8 <close_stdout@@Base+0x532c>
   20fac:	ldr	r6, [sp, #40]	; 0x28
   20fb0:	mov	r2, #0
   20fb4:	mov	ip, #2
   20fb8:	str	r2, [sp, #88]	; 0x58
   20fbc:	ldr	r0, [r6, #16]
   20fc0:	b	20780 <close_stdout@@Base+0x5504>
   20fc4:	cmp	r3, #69	; 0x45
   20fc8:	beq	205a8 <close_stdout@@Base+0x532c>
   20fcc:	ldr	r0, [sp, #36]	; 0x24
   20fd0:	b	207ac <close_stdout@@Base+0x5530>
   20fd4:	ldr	r9, [pc, #136]	; 21064 <close_stdout@@Base+0x5de8>
   20fd8:	cmp	r3, #0
   20fdc:	add	r9, pc, r9
   20fe0:	beq	20d2c <close_stdout@@Base+0x5ab0>
   20fe4:	b	205a8 <close_stdout@@Base+0x532c>
   20fe8:	cmp	r3, #0
   20fec:	bne	20658 <close_stdout@@Base+0x53dc>
   20ff0:	ldr	ip, [sp, #28]
   20ff4:	bic	r3, r5, r5, asr #31
   20ff8:	cmp	r3, #1
   20ffc:	movcs	r6, r3
   21000:	movcc	r6, #1
   21004:	rsb	r1, fp, ip
   21008:	cmp	r6, r1
   2100c:	bcs	20434 <close_stdout@@Base+0x51b8>
   21010:	cmp	r8, #0
   21014:	beq	206f4 <close_stdout@@Base+0x5478>
   21018:	cmp	r3, #1
   2101c:	bls	2104c <close_stdout@@Base+0x5dd0>
   21020:	cmp	sl, #48	; 0x30
   21024:	sub	r5, r5, #1
   21028:	moveq	r0, r8
   2102c:	moveq	r2, r5
   21030:	movne	r0, r8
   21034:	movne	r2, r5
   21038:	moveq	r1, sl
   2103c:	movne	r1, #32
   21040:	bl	11ff4 <memset@plt>
   21044:	ldrb	r2, [r4]
   21048:	add	r8, r8, r5
   2104c:	strb	r2, [r8], #1
   21050:	b	206f4 <close_stdout@@Base+0x5478>
   21054:	andeq	r8, r1, ip, lsl #31
   21058:	andeq	r0, r0, r0, ror #3
   2105c:	andeq	r6, r0, ip, ror #9
   21060:	andeq	r6, r0, r8, ror #4
   21064:	andeq	r6, r0, r8, lsl r2
   21068:	andeq	r5, r0, ip, lsr #30
   2106c:	andeq	r5, r0, r8, lsr #32
   21070:	cmp	r3, #69	; 0x45
   21074:	beq	205a8 <close_stdout@@Base+0x532c>
   21078:	ldr	r6, [sp, #40]	; 0x28
   2107c:	mov	ip, #1
   21080:	str	ip, [sp, #76]	; 0x4c
   21084:	ldr	r0, [r6, #24]
   21088:	b	20710 <close_stdout@@Base+0x5494>
   2108c:	ldr	ip, [sp, #40]	; 0x28
   21090:	mov	r6, #1
   21094:	str	r6, [sp, #76]	; 0x4c
   21098:	ldr	r2, [ip, #24]
   2109c:	ldr	ip, [sp, #56]	; 0x38
   210a0:	add	r2, r2, #6
   210a4:	smull	ip, r0, ip, r2
   210a8:	asr	r1, r2, #31
   210ac:	add	r0, r0, r2
   210b0:	rsb	r1, r1, r0, asr #2
   210b4:	rsb	r1, r1, r1, lsl #3
   210b8:	rsb	r2, r1, r2
   210bc:	add	r0, r2, r6
   210c0:	b	20710 <close_stdout@@Base+0x5494>
   210c4:	mov	ip, r2
   210c8:	mov	r6, #0
   210cc:	ldr	lr, [sp, #32]
   210d0:	cmp	r1, #0
   210d4:	movne	r6, #1
   210d8:	movne	lr, #0
   210dc:	str	lr, [sp, #32]
   210e0:	b	20478 <close_stdout@@Base+0x51fc>
   210e4:	cmp	r3, #69	; 0x45
   210e8:	beq	205a8 <close_stdout@@Base+0x532c>
   210ec:	cmn	r5, #1
   210f0:	beq	216bc <close_stdout@@Base+0x6440>
   210f4:	cmp	r5, #8
   210f8:	bgt	217d4 <close_stdout@@Base+0x6558>
   210fc:	ldr	r0, [sp, #1224]	; 0x4c8
   21100:	mov	r2, r5
   21104:	ldr	ip, [sp, #68]	; 0x44
   21108:	smull	r6, r1, ip, r0
   2110c:	add	r2, r2, #1
   21110:	cmp	r2, #9
   21114:	asr	r0, r0, #31
   21118:	rsb	r0, r0, r1, asr #2
   2111c:	bne	21108 <close_stdout@@Base+0x5e8c>
   21120:	str	r5, [sp, #76]	; 0x4c
   21124:	b	20710 <close_stdout@@Base+0x5494>
   21128:	cmp	r3, #69	; 0x45
   2112c:	beq	205a8 <close_stdout@@Base+0x532c>
   21130:	ldr	r6, [sp, #40]	; 0x28
   21134:	mov	ip, #2
   21138:	str	ip, [sp, #76]	; 0x4c
   2113c:	ldr	r0, [r6, #4]
   21140:	b	20710 <close_stdout@@Base+0x5494>
   21144:	ldr	lr, [sp, #40]	; 0x28
   21148:	add	ip, sp, #96	; 0x60
   2114c:	add	r7, sp, #152	; 0x98
   21150:	ldm	lr!, {r0, r1, r2, r3}
   21154:	stmia	ip!, {r0, r1, r2, r3}
   21158:	ldm	lr!, {r0, r1, r2, r3}
   2115c:	stmia	ip!, {r0, r1, r2, r3}
   21160:	ldm	lr, {r0, r1, r2}
   21164:	stm	ip, {r0, r1, r2}
   21168:	add	r0, sp, #96	; 0x60
   2116c:	bl	11ca0 <mktime@plt>
   21170:	ldr	r9, [sp, #68]	; 0x44
   21174:	add	r2, r7, #9
   21178:	lsr	ip, r0, #31
   2117c:	smull	r3, r1, r9, r0
   21180:	asr	r3, r0, #31
   21184:	cmp	ip, #0
   21188:	mov	r6, r2
   2118c:	rsb	r3, r3, r1, asr #2
   21190:	add	r1, r3, r3, lsl #2
   21194:	sub	r1, r0, r1, lsl #1
   21198:	mov	r0, r3
   2119c:	rsbne	r1, r1, #48	; 0x30
   211a0:	addeq	r1, r1, #48	; 0x30
   211a4:	cmp	r3, #0
   211a8:	uxtb	r1, r1
   211ac:	strb	r1, [r2], #-1
   211b0:	bne	2117c <close_stdout@@Base+0x5f00>
   211b4:	cmp	r5, #1
   211b8:	movge	r3, r5
   211bc:	movlt	r3, #1
   211c0:	cmp	ip, #0
   211c4:	beq	20a6c <close_stdout@@Base+0x57f0>
   211c8:	cmp	sl, #45	; 0x2d
   211cc:	movne	ip, #45	; 0x2d
   211d0:	beq	21510 <close_stdout@@Base+0x6294>
   211d4:	add	r7, r7, #10
   211d8:	str	r7, [sp, #52]	; 0x34
   211dc:	rsb	r7, r7, r6
   211e0:	add	r7, r3, r7
   211e4:	sub	r7, r7, #1
   211e8:	cmp	r7, #0
   211ec:	movgt	r2, #1
   211f0:	strgt	r2, [sp, #76]	; 0x4c
   211f4:	bgt	20a94 <close_stdout@@Base+0x5818>
   211f8:	ldr	r1, [sp, #28]
   211fc:	bic	r9, r5, r5, asr #31
   21200:	cmp	r9, #1
   21204:	movcs	r7, r9
   21208:	movcc	r7, #1
   2120c:	rsb	r2, fp, r1
   21210:	cmp	r7, r2
   21214:	bcs	20434 <close_stdout@@Base+0x51b8>
   21218:	cmp	r8, #0
   2121c:	beq	21270 <close_stdout@@Base+0x5ff4>
   21220:	cmp	r9, #1
   21224:	movls	r2, #0
   21228:	movhi	r2, #1
   2122c:	cmp	r3, #0
   21230:	movne	r2, #0
   21234:	cmp	r2, #0
   21238:	beq	2126c <close_stdout@@Base+0x5ff0>
   2123c:	cmp	sl, #48	; 0x30
   21240:	sub	lr, r5, #1
   21244:	mov	r0, r8
   21248:	addne	r8, r8, lr
   2124c:	mov	r2, lr
   21250:	movne	r1, #32
   21254:	beq	217b4 <close_stdout@@Base+0x6538>
   21258:	str	r3, [sp, #24]
   2125c:	str	ip, [sp, #20]
   21260:	bl	11ff4 <memset@plt>
   21264:	ldr	ip, [sp, #20]
   21268:	ldr	r3, [sp, #24]
   2126c:	strb	ip, [r8], #1
   21270:	add	fp, fp, r7
   21274:	b	20b5c <close_stdout@@Base+0x58e0>
   21278:	ldr	ip, [sp, #28]
   2127c:	bic	r3, r5, r5, asr #31
   21280:	cmp	r3, #1
   21284:	movcs	r6, r3
   21288:	movcc	r6, #1
   2128c:	rsb	r2, fp, ip
   21290:	cmp	r6, r2
   21294:	bcs	20434 <close_stdout@@Base+0x51b8>
   21298:	cmp	r8, #0
   2129c:	beq	206f4 <close_stdout@@Base+0x5478>
   212a0:	cmp	r3, #1
   212a4:	bls	212d0 <close_stdout@@Base+0x6054>
   212a8:	cmp	sl, #48	; 0x30
   212ac:	sub	r5, r5, #1
   212b0:	moveq	r0, r8
   212b4:	movne	r0, r8
   212b8:	moveq	r1, sl
   212bc:	moveq	r2, r5
   212c0:	movne	r2, r5
   212c4:	movne	r1, #32
   212c8:	add	r8, r8, r5
   212cc:	bl	11ff4 <memset@plt>
   212d0:	mov	r3, #10
   212d4:	strb	r3, [r8], #1
   212d8:	b	206f4 <close_stdout@@Base+0x5478>
   212dc:	ldr	r9, [pc, #-636]	; 21068 <close_stdout@@Base+0x5dec>
   212e0:	add	r9, pc, r9
   212e4:	b	20d2c <close_stdout@@Base+0x5ab0>
   212e8:	mov	ip, #112	; 0x70
   212ec:	mov	r6, #1
   212f0:	mov	r9, ip
   212f4:	b	210cc <close_stdout@@Base+0x5e50>
   212f8:	cmp	r3, #69	; 0x45
   212fc:	beq	205a8 <close_stdout@@Base+0x532c>
   21300:	ldr	r6, [sp, #40]	; 0x28
   21304:	mov	ip, #2
   21308:	str	ip, [sp, #76]	; 0x4c
   2130c:	ldr	r0, [r6]
   21310:	b	20710 <close_stdout@@Base+0x5494>
   21314:	ldrb	r2, [r4, #1]
   21318:	cmp	r2, #58	; 0x3a
   2131c:	beq	21604 <close_stdout@@Base+0x6388>
   21320:	add	r1, r4, #1
   21324:	mov	r7, #1
   21328:	cmp	r2, #122	; 0x7a
   2132c:	moveq	r4, r1
   21330:	bne	205a8 <close_stdout@@Base+0x532c>
   21334:	b	207e4 <close_stdout@@Base+0x5568>
   21338:	cmp	r3, #69	; 0x45
   2133c:	beq	205a8 <close_stdout@@Base+0x532c>
   21340:	ldr	r6, [sp, #40]	; 0x28
   21344:	mov	ip, #2
   21348:	str	ip, [sp, #76]	; 0x4c
   2134c:	ldr	r0, [r6, #8]
   21350:	b	20710 <close_stdout@@Base+0x5494>
   21354:	cmp	r3, #69	; 0x45
   21358:	beq	205a8 <close_stdout@@Base+0x532c>
   2135c:	ldr	ip, [sp, #40]	; 0x28
   21360:	ldr	r0, [ip, #8]
   21364:	b	207ac <close_stdout@@Base+0x5530>
   21368:	cmp	r3, #69	; 0x45
   2136c:	beq	205a8 <close_stdout@@Base+0x532c>
   21370:	ldr	r6, [sp, #40]	; 0x28
   21374:	mov	ip, #2
   21378:	str	ip, [sp, #76]	; 0x4c
   2137c:	ldr	r1, [r6, #28]
   21380:	ldr	r2, [r6, #24]
   21384:	ldr	r6, [sp, #56]	; 0x38
   21388:	rsb	r2, r2, r1
   2138c:	add	r2, r2, #7
   21390:	smull	r6, r0, r6, r2
   21394:	asr	r1, r2, #31
   21398:	add	r0, r0, r2
   2139c:	rsb	r0, r1, r0, asr ip
   213a0:	b	20710 <close_stdout@@Base+0x5494>
   213a4:	ldr	ip, [sp, #32]
   213a8:	cmp	r1, #0
   213ac:	movne	ip, #1
   213b0:	str	ip, [sp, #32]
   213b4:	b	20890 <close_stdout@@Base+0x5614>
   213b8:	lsr	ip, ip, #31
   213bc:	str	ip, [sp, #52]	; 0x34
   213c0:	ldr	ip, [sp, #76]	; 0x4c
   213c4:	mov	r0, #100	; 0x64
   213c8:	movw	r1, #10000	; 0x2710
   213cc:	mul	r2, r0, r2
   213d0:	mla	r0, r1, ip, r2
   213d4:	mov	r1, #1
   213d8:	mov	ip, #9
   213dc:	mov	r2, #20
   213e0:	str	r1, [sp, #88]	; 0x58
   213e4:	str	ip, [sp, #76]	; 0x4c
   213e8:	add	r0, r0, r6
   213ec:	b	20720 <close_stdout@@Base+0x54a4>
   213f0:	ldr	r1, [sp, #76]	; 0x4c
   213f4:	mov	r0, #100	; 0x64
   213f8:	lsr	ip, ip, #31
   213fc:	mov	r6, #1
   21400:	str	ip, [sp, #52]	; 0x34
   21404:	mov	ip, #6
   21408:	mla	r0, r0, r1, r2
   2140c:	str	r6, [sp, #88]	; 0x58
   21410:	mov	r2, #4
   21414:	str	ip, [sp, #76]	; 0x4c
   21418:	b	20720 <close_stdout@@Base+0x54a4>
   2141c:	ldr	r1, [sp, #76]	; 0x4c
   21420:	mov	r0, #100	; 0x64
   21424:	lsr	ip, ip, #31
   21428:	mov	r6, #1
   2142c:	str	ip, [sp, #52]	; 0x34
   21430:	mov	ip, #5
   21434:	mla	r0, r0, r1, r2
   21438:	str	r6, [sp, #88]	; 0x58
   2143c:	mov	r2, #0
   21440:	str	ip, [sp, #76]	; 0x4c
   21444:	b	20720 <close_stdout@@Base+0x54a4>
   21448:	cmp	r6, #0
   2144c:	bne	213b8 <close_stdout@@Base+0x613c>
   21450:	cmp	r2, #0
   21454:	bne	213f0 <close_stdout@@Base+0x6174>
   21458:	lsr	ip, ip, #31
   2145c:	ldr	r0, [sp, #76]	; 0x4c
   21460:	mov	r1, #1
   21464:	mov	r6, #3
   21468:	str	ip, [sp, #52]	; 0x34
   2146c:	str	r1, [sp, #88]	; 0x58
   21470:	str	r6, [sp, #76]	; 0x4c
   21474:	b	20720 <close_stdout@@Base+0x54a4>
   21478:	mov	ip, #45	; 0x2d
   2147c:	cmp	sl, #45	; 0x2d
   21480:	bne	211d4 <close_stdout@@Base+0x5f58>
   21484:	ldr	r1, [sp, #28]
   21488:	bic	r9, r5, r5, asr #31
   2148c:	cmp	r9, #1
   21490:	movcs	sl, r9
   21494:	movcc	sl, #1
   21498:	rsb	r2, fp, r1
   2149c:	cmp	sl, r2
   214a0:	bcs	20434 <close_stdout@@Base+0x51b8>
   214a4:	cmp	r8, #0
   214a8:	beq	214f0 <close_stdout@@Base+0x6274>
   214ac:	cmp	r9, #1
   214b0:	movls	r2, #0
   214b4:	movhi	r2, #1
   214b8:	cmp	r3, #0
   214bc:	movne	r2, #0
   214c0:	cmp	r2, #0
   214c4:	beq	214ec <close_stdout@@Base+0x6270>
   214c8:	sub	r2, r5, #1
   214cc:	mov	r0, r8
   214d0:	mov	r1, #32
   214d4:	str	r3, [sp, #24]
   214d8:	str	ip, [sp, #20]
   214dc:	add	r8, r8, r2
   214e0:	bl	11ff4 <memset@plt>
   214e4:	ldr	ip, [sp, #20]
   214e8:	ldr	r3, [sp, #24]
   214ec:	strb	ip, [r8], #1
   214f0:	add	fp, fp, sl
   214f4:	add	r7, r7, #10
   214f8:	mov	sl, #45	; 0x2d
   214fc:	str	r7, [sp, #52]	; 0x34
   21500:	b	20b5c <close_stdout@@Base+0x58e0>
   21504:	bl	11d0c <memcpy@plt>
   21508:	ldr	ip, [sp, #20]
   2150c:	b	20bf8 <close_stdout@@Base+0x597c>
   21510:	mov	ip, sl
   21514:	b	21484 <close_stdout@@Base+0x6208>
   21518:	mov	ip, #43	; 0x2b
   2151c:	b	2147c <close_stdout@@Base+0x6200>
   21520:	ldr	r0, [sp, #28]
   21524:	rsb	r2, fp, r0
   21528:	cmp	r7, r2
   2152c:	bcs	20434 <close_stdout@@Base+0x51b8>
   21530:	cmp	r8, #0
   21534:	beq	2155c <close_stdout@@Base+0x62e0>
   21538:	mov	r0, r8
   2153c:	mov	r1, #32
   21540:	mov	r2, r7
   21544:	str	r3, [sp, #24]
   21548:	str	ip, [sp, #20]
   2154c:	bl	11ff4 <memset@plt>
   21550:	ldr	ip, [sp, #20]
   21554:	add	r8, r8, r7
   21558:	ldr	r3, [sp, #24]
   2155c:	cmp	r5, r7
   21560:	ldr	r1, [sp, #76]	; 0x4c
   21564:	rsbgt	r5, r7, r5
   21568:	add	fp, fp, r7
   2156c:	movle	r5, #0
   21570:	bicgt	r9, r5, r5, asr #31
   21574:	movle	r9, r5
   21578:	cmp	r1, #0
   2157c:	beq	20b5c <close_stdout@@Base+0x58e0>
   21580:	ldr	r0, [sp, #28]
   21584:	cmp	r9, #1
   21588:	movcs	r7, r9
   2158c:	movcc	r7, #1
   21590:	rsb	r2, fp, r0
   21594:	cmp	r7, r2
   21598:	bcs	20434 <close_stdout@@Base+0x51b8>
   2159c:	cmp	r8, #0
   215a0:	beq	21270 <close_stdout@@Base+0x5ff4>
   215a4:	cmp	r9, #1
   215a8:	movls	r2, #0
   215ac:	movhi	r2, #1
   215b0:	cmp	r3, #0
   215b4:	movne	r2, #0
   215b8:	cmp	r2, #0
   215bc:	beq	2126c <close_stdout@@Base+0x5ff0>
   215c0:	sub	r2, r5, #1
   215c4:	mov	r0, r8
   215c8:	mov	r1, #32
   215cc:	add	r8, r8, r2
   215d0:	b	21258 <close_stdout@@Base+0x5fdc>
   215d4:	bic	r9, r5, r5, asr #31
   215d8:	b	20b5c <close_stdout@@Base+0x58e0>
   215dc:	mov	fp, r2
   215e0:	b	20584 <close_stdout@@Base+0x5308>
   215e4:	bl	11d0c <memcpy@plt>
   215e8:	b	20980 <close_stdout@@Base+0x5704>
   215ec:	mov	ip, #0
   215f0:	str	ip, [sp, #76]	; 0x4c
   215f4:	b	2073c <close_stdout@@Base+0x54c0>
   215f8:	mov	r6, #0
   215fc:	str	r6, [sp, #76]	; 0x4c
   21600:	b	2073c <close_stdout@@Base+0x54c0>
   21604:	add	r0, r4, #2
   21608:	mov	r7, #1
   2160c:	mov	r1, r0
   21610:	ldrb	r2, [r0], #1
   21614:	add	r7, r7, #1
   21618:	cmp	r2, #58	; 0x3a
   2161c:	bne	21328 <close_stdout@@Base+0x60ac>
   21620:	b	2160c <close_stdout@@Base+0x6390>
   21624:	mov	r0, r8
   21628:	ldr	r1, [sp, #84]	; 0x54
   2162c:	mov	r2, r6
   21630:	bl	1ffb8 <close_stdout@@Base+0x4d3c>
   21634:	b	20980 <close_stdout@@Base+0x5704>
   21638:	ldr	r6, [sp, #56]	; 0x38
   2163c:	asr	r2, r1, #31
   21640:	mov	ip, #2
   21644:	str	ip, [sp, #76]	; 0x4c
   21648:	smull	r6, r0, r6, r1
   2164c:	add	r1, r0, r1
   21650:	rsb	r2, r2, r1, asr ip
   21654:	add	r0, r2, #1
   21658:	b	20710 <close_stdout@@Base+0x5494>
   2165c:	ldr	r2, [sp, #52]	; 0x34
   21660:	movw	r1, #63636	; 0xf894
   21664:	ldr	r6, [sp, #52]	; 0x34
   21668:	movt	r1, #65535	; 0xffff
   2166c:	rsb	r1, r7, r1
   21670:	add	r0, r2, #1888	; 0x760
   21674:	cmp	r6, r1
   21678:	add	r0, r0, #12
   2167c:	mov	r2, #0
   21680:	mov	ip, #4
   21684:	movge	r1, #0
   21688:	movlt	r1, #1
   2168c:	add	r0, r0, r7
   21690:	str	r1, [sp, #52]	; 0x34
   21694:	str	r2, [sp, #88]	; 0x58
   21698:	str	ip, [sp, #76]	; 0x4c
   2169c:	b	20720 <close_stdout@@Base+0x54a4>
   216a0:	mov	r2, #32
   216a4:	mov	r6, #0
   216a8:	strb	r2, [sp, #140]	; 0x8c
   216ac:	mov	r2, #37	; 0x25
   216b0:	str	r6, [sp, #76]	; 0x4c
   216b4:	strb	r2, [sp, #141]	; 0x8d
   216b8:	b	20750 <close_stdout@@Base+0x54d4>
   216bc:	mov	r5, #9
   216c0:	ldr	r0, [sp, #1224]	; 0x4c8
   216c4:	str	r5, [sp, #76]	; 0x4c
   216c8:	b	20710 <close_stdout@@Base+0x5494>
   216cc:	ldrb	r2, [r4]
   216d0:	b	20650 <close_stdout@@Base+0x53d4>
   216d4:	mov	r1, sl
   216d8:	str	r3, [sp, #24]
   216dc:	str	ip, [sp, #20]
   216e0:	add	r8, r8, r5
   216e4:	bl	11ff4 <memset@plt>
   216e8:	ldr	r3, [sp, #24]
   216ec:	ldr	ip, [sp, #20]
   216f0:	b	20b24 <close_stdout@@Base+0x58a8>
   216f4:	sub	r6, r6, #1
   216f8:	tst	r6, #3
   216fc:	movwne	r1, #365	; 0x16d
   21700:	bne	21750 <close_stdout@@Base+0x64d4>
   21704:	ldr	r1, [sp, #60]	; 0x3c
   21708:	smull	ip, r1, r1, r6
   2170c:	asr	ip, r6, #31
   21710:	rsb	r0, ip, r1, asr #5
   21714:	str	r1, [sp, #92]	; 0x5c
   21718:	mov	r1, #100	; 0x64
   2171c:	mls	r1, r1, r0, r6
   21720:	cmp	r1, #0
   21724:	movwne	r1, #366	; 0x16e
   21728:	bne	21750 <close_stdout@@Base+0x64d4>
   2172c:	ldr	r0, [sp, #92]	; 0x5c
   21730:	mov	r1, #400	; 0x190
   21734:	rsb	ip, ip, r0, asr #7
   21738:	movw	r0, #366	; 0x16e
   2173c:	mls	r1, r1, ip, r6
   21740:	movw	ip, #365	; 0x16d
   21744:	cmp	r1, #0
   21748:	moveq	r1, r0
   2174c:	movne	r1, ip
   21750:	ldr	ip, [sp, #76]	; 0x4c
   21754:	add	r6, r7, r1
   21758:	ldr	r0, [sp, #56]	; 0x38
   2175c:	mvn	r7, #0
   21760:	rsb	r1, ip, r6
   21764:	add	r1, r1, #380	; 0x17c
   21768:	add	r1, r1, #2
   2176c:	smull	r0, ip, r0, r1
   21770:	asr	r0, r1, #31
   21774:	add	ip, ip, r1
   21778:	rsb	r0, r0, ip, asr #2
   2177c:	rsb	r0, r0, r0, lsl #3
   21780:	rsb	r1, r0, r1
   21784:	rsb	r1, r1, r6
   21788:	add	r1, r1, #3
   2178c:	b	20f10 <close_stdout@@Base+0x5c94>
   21790:	cmp	r1, #0
   21794:	movle	r0, #0
   21798:	movgt	r0, #1
   2179c:	b	20c9c <close_stdout@@Base+0x5a20>
   217a0:	ldr	ip, [pc, #-1852]	; 2106c <close_stdout@@Base+0x5df0>
   217a4:	ldr	r6, [sp, #84]	; 0x54
   217a8:	add	ip, pc, ip
   217ac:	str	ip, [sp, #84]	; 0x54
   217b0:	b	20904 <close_stdout@@Base+0x5688>
   217b4:	mov	r1, sl
   217b8:	str	r3, [sp, #24]
   217bc:	str	ip, [sp, #20]
   217c0:	add	r8, r8, lr
   217c4:	bl	11ff4 <memset@plt>
   217c8:	ldr	r3, [sp, #24]
   217cc:	ldr	ip, [sp, #20]
   217d0:	b	2126c <close_stdout@@Base+0x5ff0>
   217d4:	ldr	r0, [sp, #1224]	; 0x4c8
   217d8:	str	r5, [sp, #76]	; 0x4c
   217dc:	b	20710 <close_stdout@@Base+0x5494>
   217e0:	bl	11d78 <__stack_chk_fail@plt>
   217e4:	mov	ip, #0
   217e8:	str	ip, [sp, #76]	; 0x4c
   217ec:	b	20750 <close_stdout@@Base+0x54d4>
   217f0:	push	{r4, r5, lr}
   217f4:	sub	sp, sp, #20
   217f8:	mov	r5, r1
   217fc:	mov	r4, r2
   21800:	ldr	ip, [sp, #32]
   21804:	mov	r1, r0
   21808:	ldr	lr, [sp, #36]	; 0x24
   2180c:	mov	r2, r5
   21810:	mov	r0, #0
   21814:	stm	sp, {r3, ip}
   21818:	mov	r3, r4
   2181c:	str	lr, [sp, #8]
   21820:	bl	20050 <close_stdout@@Base+0x4dd4>
   21824:	add	sp, sp, #20
   21828:	pop	{r4, r5, pc}
   2182c:	push	{r4, r5, r6, r7, lr}
   21830:	cmp	r1, #0
   21834:	sub	sp, sp, #36	; 0x24
   21838:	ldr	r7, [pc, #896]	; 21bc0 <close_stdout@@Base+0x6944>
   2183c:	mov	ip, r3
   21840:	mov	r5, r0
   21844:	add	r7, pc, r7
   21848:	ldr	r4, [sp, #56]	; 0x38
   2184c:	ldr	r6, [sp, #60]	; 0x3c
   21850:	beq	21b94 <close_stdout@@Base+0x6918>
   21854:	str	r2, [sp]
   21858:	mov	r3, r1
   2185c:	ldr	r2, [pc, #864]	; 21bc4 <close_stdout@@Base+0x6948>
   21860:	mov	r1, #1
   21864:	str	ip, [sp, #4]
   21868:	add	r2, pc, r2
   2186c:	bl	1203c <__fprintf_chk@plt>
   21870:	ldr	r1, [pc, #848]	; 21bc8 <close_stdout@@Base+0x694c>
   21874:	mov	r2, #5
   21878:	mov	r0, #0
   2187c:	add	r1, pc, r1
   21880:	bl	11d6c <dcgettext@plt>
   21884:	ldr	r2, [pc, #832]	; 21bcc <close_stdout@@Base+0x6950>
   21888:	movw	ip, #2013	; 0x7dd
   2188c:	mov	r1, #1
   21890:	ldr	r2, [r7, r2]
   21894:	str	ip, [sp]
   21898:	mov	r3, r0
   2189c:	mov	r0, r5
   218a0:	bl	1203c <__fprintf_chk@plt>
   218a4:	ldr	r1, [pc, #804]	; 21bd0 <close_stdout@@Base+0x6954>
   218a8:	mov	r0, #0
   218ac:	mov	r2, #5
   218b0:	add	r1, pc, r1
   218b4:	bl	11d6c <dcgettext@plt>
   218b8:	mov	r1, r5
   218bc:	bl	11c4c <fputs_unlocked@plt>
   218c0:	cmp	r6, #9
   218c4:	addls	pc, pc, r6, lsl #2
   218c8:	b	21bb0 <close_stdout@@Base+0x6934>
   218cc:	b	21960 <close_stdout@@Base+0x66e4>
   218d0:	b	21964 <close_stdout@@Base+0x66e8>
   218d4:	b	21994 <close_stdout@@Base+0x6718>
   218d8:	b	219c8 <close_stdout@@Base+0x674c>
   218dc:	b	21a04 <close_stdout@@Base+0x6788>
   218e0:	b	21a44 <close_stdout@@Base+0x67c8>
   218e4:	b	21a8c <close_stdout@@Base+0x6810>
   218e8:	b	21adc <close_stdout@@Base+0x6860>
   218ec:	b	21b34 <close_stdout@@Base+0x68b8>
   218f0:	b	218f4 <close_stdout@@Base+0x6678>
   218f4:	ldr	r1, [pc, #728]	; 21bd4 <close_stdout@@Base+0x6958>
   218f8:	mov	r0, #0
   218fc:	add	r1, pc, r1
   21900:	mov	r2, #5
   21904:	bl	11d6c <dcgettext@plt>
   21908:	ldm	r4, {r3, ip}
   2190c:	mov	r1, #1
   21910:	str	ip, [sp]
   21914:	ldr	ip, [r4, #8]
   21918:	str	ip, [sp, #4]
   2191c:	ldr	ip, [r4, #12]
   21920:	str	ip, [sp, #8]
   21924:	ldr	ip, [r4, #16]
   21928:	str	ip, [sp, #12]
   2192c:	ldr	ip, [r4, #20]
   21930:	str	ip, [sp, #16]
   21934:	ldr	ip, [r4, #24]
   21938:	str	ip, [sp, #20]
   2193c:	ldr	ip, [r4, #28]
   21940:	str	ip, [sp, #24]
   21944:	ldr	ip, [r4, #32]
   21948:	str	ip, [sp, #28]
   2194c:	mov	r2, r0
   21950:	mov	r0, r5
   21954:	bl	1203c <__fprintf_chk@plt>
   21958:	add	sp, sp, #36	; 0x24
   2195c:	pop	{r4, r5, r6, r7, pc}
   21960:	bl	12138 <abort@plt>
   21964:	ldr	r1, [pc, #620]	; 21bd8 <close_stdout@@Base+0x695c>
   21968:	mov	r2, #5
   2196c:	mov	r0, #0
   21970:	add	r1, pc, r1
   21974:	bl	11d6c <dcgettext@plt>
   21978:	ldr	r3, [r4]
   2197c:	mov	r1, #1
   21980:	mov	r2, r0
   21984:	mov	r0, r5
   21988:	add	sp, sp, #36	; 0x24
   2198c:	pop	{r4, r5, r6, r7, lr}
   21990:	b	1203c <__fprintf_chk@plt>
   21994:	ldr	r1, [pc, #576]	; 21bdc <close_stdout@@Base+0x6960>
   21998:	mov	r2, #5
   2199c:	mov	r0, #0
   219a0:	add	r1, pc, r1
   219a4:	bl	11d6c <dcgettext@plt>
   219a8:	ldm	r4, {r3, ip}
   219ac:	mov	r1, #1
   219b0:	str	ip, [sp, #56]	; 0x38
   219b4:	mov	r2, r0
   219b8:	mov	r0, r5
   219bc:	add	sp, sp, #36	; 0x24
   219c0:	pop	{r4, r5, r6, r7, lr}
   219c4:	b	1203c <__fprintf_chk@plt>
   219c8:	ldr	r1, [pc, #528]	; 21be0 <close_stdout@@Base+0x6964>
   219cc:	mov	r2, #5
   219d0:	mov	r0, #0
   219d4:	add	r1, pc, r1
   219d8:	bl	11d6c <dcgettext@plt>
   219dc:	ldm	r4, {r3, ip}
   219e0:	mov	r1, #1
   219e4:	str	ip, [sp, #56]	; 0x38
   219e8:	ldr	ip, [r4, #8]
   219ec:	str	ip, [sp, #60]	; 0x3c
   219f0:	mov	r2, r0
   219f4:	mov	r0, r5
   219f8:	add	sp, sp, #36	; 0x24
   219fc:	pop	{r4, r5, r6, r7, lr}
   21a00:	b	1203c <__fprintf_chk@plt>
   21a04:	ldr	r1, [pc, #472]	; 21be4 <close_stdout@@Base+0x6968>
   21a08:	mov	r2, #5
   21a0c:	mov	r0, #0
   21a10:	add	r1, pc, r1
   21a14:	bl	11d6c <dcgettext@plt>
   21a18:	ldm	r4, {r3, ip}
   21a1c:	mov	r1, #1
   21a20:	str	ip, [sp]
   21a24:	ldr	ip, [r4, #8]
   21a28:	str	ip, [sp, #4]
   21a2c:	ldr	ip, [r4, #12]
   21a30:	str	ip, [sp, #8]
   21a34:	mov	r2, r0
   21a38:	mov	r0, r5
   21a3c:	bl	1203c <__fprintf_chk@plt>
   21a40:	b	21958 <close_stdout@@Base+0x66dc>
   21a44:	ldr	r1, [pc, #412]	; 21be8 <close_stdout@@Base+0x696c>
   21a48:	mov	r2, #5
   21a4c:	mov	r0, #0
   21a50:	add	r1, pc, r1
   21a54:	bl	11d6c <dcgettext@plt>
   21a58:	ldm	r4, {r3, ip}
   21a5c:	mov	r1, #1
   21a60:	str	ip, [sp]
   21a64:	ldr	ip, [r4, #8]
   21a68:	str	ip, [sp, #4]
   21a6c:	ldr	ip, [r4, #12]
   21a70:	str	ip, [sp, #8]
   21a74:	ldr	ip, [r4, #16]
   21a78:	str	ip, [sp, #12]
   21a7c:	mov	r2, r0
   21a80:	mov	r0, r5
   21a84:	bl	1203c <__fprintf_chk@plt>
   21a88:	b	21958 <close_stdout@@Base+0x66dc>
   21a8c:	ldr	r1, [pc, #344]	; 21bec <close_stdout@@Base+0x6970>
   21a90:	mov	r2, #5
   21a94:	mov	r0, #0
   21a98:	add	r1, pc, r1
   21a9c:	bl	11d6c <dcgettext@plt>
   21aa0:	ldm	r4, {r3, ip}
   21aa4:	mov	r1, #1
   21aa8:	str	ip, [sp]
   21aac:	ldr	ip, [r4, #8]
   21ab0:	str	ip, [sp, #4]
   21ab4:	ldr	ip, [r4, #12]
   21ab8:	str	ip, [sp, #8]
   21abc:	ldr	ip, [r4, #16]
   21ac0:	str	ip, [sp, #12]
   21ac4:	ldr	ip, [r4, #20]
   21ac8:	str	ip, [sp, #16]
   21acc:	mov	r2, r0
   21ad0:	mov	r0, r5
   21ad4:	bl	1203c <__fprintf_chk@plt>
   21ad8:	b	21958 <close_stdout@@Base+0x66dc>
   21adc:	ldr	r1, [pc, #268]	; 21bf0 <close_stdout@@Base+0x6974>
   21ae0:	mov	r2, #5
   21ae4:	mov	r0, #0
   21ae8:	add	r1, pc, r1
   21aec:	bl	11d6c <dcgettext@plt>
   21af0:	ldm	r4, {r3, ip}
   21af4:	mov	r1, #1
   21af8:	str	ip, [sp]
   21afc:	ldr	ip, [r4, #8]
   21b00:	str	ip, [sp, #4]
   21b04:	ldr	ip, [r4, #12]
   21b08:	str	ip, [sp, #8]
   21b0c:	ldr	ip, [r4, #16]
   21b10:	str	ip, [sp, #12]
   21b14:	ldr	ip, [r4, #20]
   21b18:	str	ip, [sp, #16]
   21b1c:	ldr	ip, [r4, #24]
   21b20:	str	ip, [sp, #20]
   21b24:	mov	r2, r0
   21b28:	mov	r0, r5
   21b2c:	bl	1203c <__fprintf_chk@plt>
   21b30:	b	21958 <close_stdout@@Base+0x66dc>
   21b34:	ldr	r1, [pc, #184]	; 21bf4 <close_stdout@@Base+0x6978>
   21b38:	mov	r2, #5
   21b3c:	mov	r0, #0
   21b40:	add	r1, pc, r1
   21b44:	bl	11d6c <dcgettext@plt>
   21b48:	ldm	r4, {r3, ip}
   21b4c:	mov	r1, #1
   21b50:	str	ip, [sp]
   21b54:	ldr	ip, [r4, #8]
   21b58:	str	ip, [sp, #4]
   21b5c:	ldr	ip, [r4, #12]
   21b60:	str	ip, [sp, #8]
   21b64:	ldr	ip, [r4, #16]
   21b68:	str	ip, [sp, #12]
   21b6c:	ldr	ip, [r4, #20]
   21b70:	str	ip, [sp, #16]
   21b74:	ldr	ip, [r4, #24]
   21b78:	str	ip, [sp, #20]
   21b7c:	ldr	ip, [r4, #28]
   21b80:	str	ip, [sp, #24]
   21b84:	mov	r2, r0
   21b88:	mov	r0, r5
   21b8c:	bl	1203c <__fprintf_chk@plt>
   21b90:	b	21958 <close_stdout@@Base+0x66dc>
   21b94:	str	r3, [sp]
   21b98:	mov	r3, r2
   21b9c:	ldr	r2, [pc, #84]	; 21bf8 <close_stdout@@Base+0x697c>
   21ba0:	mov	r1, #1
   21ba4:	add	r2, pc, r2
   21ba8:	bl	1203c <__fprintf_chk@plt>
   21bac:	b	21870 <close_stdout@@Base+0x65f4>
   21bb0:	ldr	r1, [pc, #68]	; 21bfc <close_stdout@@Base+0x6980>
   21bb4:	mov	r0, #0
   21bb8:	add	r1, pc, r1
   21bbc:	b	21900 <close_stdout@@Base+0x6684>
   21bc0:			; <UNDEFINED> instruction: 0x000177b4
   21bc4:			; <UNDEFINED> instruction: 0x000059b8
   21bc8:			; <UNDEFINED> instruction: 0x000059b8
   21bcc:	andeq	r0, r0, r0, lsr #4
   21bd0:	andeq	r5, r0, r8, lsl #19
   21bd4:	andeq	r5, r0, r4, lsl fp
   21bd8:	muleq	r0, r4, r9
   21bdc:	andeq	r5, r0, r4, ror r9
   21be0:	andeq	r5, r0, r8, asr r9
   21be4:	andeq	r5, r0, r8, lsr r9
   21be8:	andeq	r5, r0, r8, lsl r9
   21bec:	strdeq	r5, [r0], -r4
   21bf0:	andeq	r5, r0, ip, asr #17
   21bf4:	andeq	r5, r0, r0, lsr #17
   21bf8:	andeq	r5, r0, r8, lsl #13
   21bfc:	andeq	r5, r0, ip, lsl #17
   21c00:	push	{r4, r5, lr}
   21c04:	sub	sp, sp, #12
   21c08:	ldr	r5, [sp, #24]
   21c0c:	ldr	ip, [r5]
   21c10:	cmp	ip, #0
   21c14:	beq	21c30 <close_stdout@@Base+0x69b4>
   21c18:	mov	lr, r5
   21c1c:	mov	ip, #0
   21c20:	ldr	r4, [lr, #4]!
   21c24:	add	ip, ip, #1
   21c28:	cmp	r4, #0
   21c2c:	bne	21c20 <close_stdout@@Base+0x69a4>
   21c30:	stm	sp, {r5, ip}
   21c34:	bl	2182c <close_stdout@@Base+0x65b0>
   21c38:	add	sp, sp, #12
   21c3c:	pop	{r4, r5, pc}
   21c40:	push	{r4, r5, r6, r7, lr}
   21c44:	sub	sp, sp, #60	; 0x3c
   21c48:	ldr	r4, [pc, #100]	; 21cb4 <close_stdout@@Base+0x6a38>
   21c4c:	mov	ip, #0
   21c50:	ldr	r5, [pc, #96]	; 21cb8 <close_stdout@@Base+0x6a3c>
   21c54:	mov	lr, ip
   21c58:	add	r4, pc, r4
   21c5c:	ldr	r6, [sp, #80]	; 0x50
   21c60:	ldr	r7, [r4, r5]
   21c64:	add	r5, sp, #12
   21c68:	ldr	r4, [r7]
   21c6c:	str	r4, [sp, #52]	; 0x34
   21c70:	ldr	r4, [r6, ip]
   21c74:	cmp	r4, #0
   21c78:	str	r4, [r5, ip]
   21c7c:	beq	21c90 <close_stdout@@Base+0x6a14>
   21c80:	add	lr, lr, #1
   21c84:	add	ip, ip, #4
   21c88:	cmp	lr, #10
   21c8c:	bne	21c70 <close_stdout@@Base+0x69f4>
   21c90:	stm	sp, {r5, lr}
   21c94:	bl	2182c <close_stdout@@Base+0x65b0>
   21c98:	ldr	r2, [sp, #52]	; 0x34
   21c9c:	ldr	r3, [r7]
   21ca0:	cmp	r2, r3
   21ca4:	bne	21cb0 <close_stdout@@Base+0x6a34>
   21ca8:	add	sp, sp, #60	; 0x3c
   21cac:	pop	{r4, r5, r6, r7, pc}
   21cb0:	bl	11d78 <__stack_chk_fail@plt>
   21cb4:	andeq	r7, r1, r0, lsr #7
   21cb8:	andeq	r0, r0, r0, ror #3
   21cbc:	push	{r3}		; (str r3, [sp, #-4]!)
   21cc0:	push	{r4, lr}
   21cc4:	sub	sp, sp, #20
   21cc8:	ldr	lr, [pc, #72]	; 21d18 <close_stdout@@Base+0x6a9c>
   21ccc:	add	ip, sp, #32
   21cd0:	ldr	r4, [pc, #68]	; 21d1c <close_stdout@@Base+0x6aa0>
   21cd4:	add	lr, pc, lr
   21cd8:	ldr	r3, [sp, #28]
   21cdc:	ldr	r4, [lr, r4]
   21ce0:	str	ip, [sp]
   21ce4:	str	ip, [sp, #8]
   21ce8:	ldr	ip, [r4]
   21cec:	str	ip, [sp, #12]
   21cf0:	bl	21c40 <close_stdout@@Base+0x69c4>
   21cf4:	ldr	r2, [sp, #12]
   21cf8:	ldr	r3, [r4]
   21cfc:	cmp	r2, r3
   21d00:	bne	21d14 <close_stdout@@Base+0x6a98>
   21d04:	add	sp, sp, #20
   21d08:	pop	{r4, lr}
   21d0c:	add	sp, sp, #4
   21d10:	bx	lr
   21d14:	bl	11d78 <__stack_chk_fail@plt>
   21d18:	andeq	r7, r1, r4, lsr #6
   21d1c:	andeq	r0, r0, r0, ror #3
   21d20:	ldr	r1, [pc, #132]	; 21dac <close_stdout@@Base+0x6b30>
   21d24:	mov	r2, #5
   21d28:	push	{r4, lr}
   21d2c:	add	r1, pc, r1
   21d30:	mov	r0, #0
   21d34:	ldr	r4, [pc, #116]	; 21db0 <close_stdout@@Base+0x6b34>
   21d38:	bl	11d6c <dcgettext@plt>
   21d3c:	ldr	r2, [pc, #112]	; 21db4 <close_stdout@@Base+0x6b38>
   21d40:	add	r4, pc, r4
   21d44:	add	r2, pc, r2
   21d48:	mov	r1, r0
   21d4c:	mov	r0, #1
   21d50:	bl	1200c <__printf_chk@plt>
   21d54:	ldr	r1, [pc, #92]	; 21db8 <close_stdout@@Base+0x6b3c>
   21d58:	mov	r2, #5
   21d5c:	mov	r0, #0
   21d60:	add	r1, pc, r1
   21d64:	bl	11d6c <dcgettext@plt>
   21d68:	ldr	r2, [pc, #76]	; 21dbc <close_stdout@@Base+0x6b40>
   21d6c:	ldr	r3, [pc, #76]	; 21dc0 <close_stdout@@Base+0x6b44>
   21d70:	add	r2, pc, r2
   21d74:	add	r3, pc, r3
   21d78:	mov	r1, r0
   21d7c:	mov	r0, #1
   21d80:	bl	1200c <__printf_chk@plt>
   21d84:	ldr	r1, [pc, #56]	; 21dc4 <close_stdout@@Base+0x6b48>
   21d88:	mov	r0, #0
   21d8c:	mov	r2, #5
   21d90:	add	r1, pc, r1
   21d94:	bl	11d6c <dcgettext@plt>
   21d98:	ldr	r3, [pc, #40]	; 21dc8 <close_stdout@@Base+0x6b4c>
   21d9c:	ldr	r3, [r4, r3]
   21da0:	pop	{r4, lr}
   21da4:	ldr	r1, [r3]
   21da8:	b	11c4c <fputs_unlocked@plt>
   21dac:	andeq	r5, r0, r4, asr r7
   21db0:			; <UNDEFINED> instruction: 0x000172b8
   21db4:	andeq	r5, r0, r4, asr r7
   21db8:	andeq	r5, r0, r0, asr r7
   21dbc:	muleq	r0, ip, r9
   21dc0:	andeq	r4, r0, r8, lsr #19
   21dc4:	andeq	r5, r0, r4, lsr r7
   21dc8:	andeq	r0, r0, r0, lsl r2
   21dcc:	push	{r4, lr}
   21dd0:	mov	r4, r0
   21dd4:	bl	11eec <malloc@plt>
   21dd8:	rsbs	r3, r0, #1
   21ddc:	movcc	r3, #0
   21de0:	cmp	r4, #0
   21de4:	moveq	r3, #0
   21de8:	cmp	r3, #0
   21dec:	popeq	{r4, pc}
   21df0:	bl	21fe0 <close_stdout@@Base+0x6d64>
   21df4:	push	{r3, r4, r5, lr}
   21df8:	mov	r4, r0
   21dfc:	mvn	r0, #0
   21e00:	mov	r5, r1
   21e04:	bl	234ec <close_stdout@@Base+0x8270>
   21e08:	cmp	r0, r4
   21e0c:	bcc	21e1c <close_stdout@@Base+0x6ba0>
   21e10:	mul	r0, r4, r5
   21e14:	pop	{r3, r4, r5, lr}
   21e18:	b	21dcc <close_stdout@@Base+0x6b50>
   21e1c:	bl	21fe0 <close_stdout@@Base+0x6d64>
   21e20:	b	21dcc <close_stdout@@Base+0x6b50>
   21e24:	rsbs	r3, r1, #1
   21e28:	push	{r4, lr}
   21e2c:	movcc	r3, #0
   21e30:	cmp	r0, #0
   21e34:	mov	r4, r1
   21e38:	moveq	r3, #0
   21e3c:	cmp	r3, #0
   21e40:	bne	21e64 <close_stdout@@Base+0x6be8>
   21e44:	bl	11d90 <realloc@plt>
   21e48:	rsbs	r3, r0, #1
   21e4c:	movcc	r3, #0
   21e50:	cmp	r4, #0
   21e54:	moveq	r3, #0
   21e58:	cmp	r3, #0
   21e5c:	popeq	{r4, pc}
   21e60:	bl	21fe0 <close_stdout@@Base+0x6d64>
   21e64:	bl	11ce8 <free@plt>
   21e68:	mov	r0, #0
   21e6c:	pop	{r4, pc}
   21e70:	push	{r4, r5, r6, lr}
   21e74:	mov	r5, r1
   21e78:	mov	r6, r0
   21e7c:	mov	r1, r2
   21e80:	mvn	r0, #0
   21e84:	mov	r4, r2
   21e88:	bl	234ec <close_stdout@@Base+0x8270>
   21e8c:	cmp	r0, r5
   21e90:	bcc	21ea4 <close_stdout@@Base+0x6c28>
   21e94:	mov	r0, r6
   21e98:	mul	r1, r5, r4
   21e9c:	pop	{r4, r5, r6, lr}
   21ea0:	b	21e24 <close_stdout@@Base+0x6ba8>
   21ea4:	bl	21fe0 <close_stdout@@Base+0x6d64>
   21ea8:	push	{r3, r4, r5, r6, r7, lr}
   21eac:	subs	r7, r0, #0
   21eb0:	mov	r5, r1
   21eb4:	mov	r6, r2
   21eb8:	ldr	r4, [r1]
   21ebc:	beq	21ef4 <close_stdout@@Base+0x6c78>
   21ec0:	movw	r0, #43690	; 0xaaaa
   21ec4:	mov	r1, r2
   21ec8:	bfi	r0, r0, #16, #16
   21ecc:	bl	234ec <close_stdout@@Base+0x8270>
   21ed0:	cmp	r4, r0
   21ed4:	addcc	r3, r4, #1
   21ed8:	addcc	r4, r4, r3, lsr #1
   21edc:	bcs	21f18 <close_stdout@@Base+0x6c9c>
   21ee0:	str	r4, [r5]
   21ee4:	mov	r0, r7
   21ee8:	mul	r1, r6, r4
   21eec:	pop	{r3, r4, r5, r6, r7, lr}
   21ef0:	b	21e24 <close_stdout@@Base+0x6ba8>
   21ef4:	cmp	r4, #0
   21ef8:	bne	21ee0 <close_stdout@@Base+0x6c64>
   21efc:	mov	r0, #64	; 0x40
   21f00:	mov	r1, r2
   21f04:	bl	234ec <close_stdout@@Base+0x8270>
   21f08:	cmp	r0, #0
   21f0c:	movne	r4, r0
   21f10:	addeq	r4, r0, #1
   21f14:	b	21ee0 <close_stdout@@Base+0x6c64>
   21f18:	bl	21fe0 <close_stdout@@Base+0x6d64>
   21f1c:	cmp	r0, #0
   21f20:	push	{r3, lr}
   21f24:	ldr	r3, [r1]
   21f28:	beq	21f54 <close_stdout@@Base+0x6cd8>
   21f2c:	movw	r2, #43689	; 0xaaa9
   21f30:	movt	r2, #43690	; 0xaaaa
   21f34:	cmp	r3, r2
   21f38:	addls	r2, r3, #1
   21f3c:	addls	r3, r3, r2, lsr #1
   21f40:	bhi	21f6c <close_stdout@@Base+0x6cf0>
   21f44:	str	r3, [r1]
   21f48:	mov	r1, r3
   21f4c:	pop	{r3, lr}
   21f50:	b	21e24 <close_stdout@@Base+0x6ba8>
   21f54:	cmp	r3, #0
   21f58:	moveq	r3, #64	; 0x40
   21f5c:	str	r3, [r1]
   21f60:	mov	r1, r3
   21f64:	pop	{r3, lr}
   21f68:	b	21e24 <close_stdout@@Base+0x6ba8>
   21f6c:	bl	21fe0 <close_stdout@@Base+0x6d64>
   21f70:	push	{r4, lr}
   21f74:	mov	r4, r0
   21f78:	bl	21dcc <close_stdout@@Base+0x6b50>
   21f7c:	mov	r2, r4
   21f80:	mov	r1, #0
   21f84:	pop	{r4, lr}
   21f88:	b	11ff4 <memset@plt>
   21f8c:	push	{r3, lr}
   21f90:	bl	11c40 <calloc@plt>
   21f94:	cmp	r0, #0
   21f98:	popne	{r3, pc}
   21f9c:	bl	21fe0 <close_stdout@@Base+0x6d64>
   21fa0:	push	{r3, r4, r5, lr}
   21fa4:	mov	r4, r1
   21fa8:	mov	r5, r0
   21fac:	mov	r0, r1
   21fb0:	bl	21dcc <close_stdout@@Base+0x6b50>
   21fb4:	mov	r1, r5
   21fb8:	mov	r2, r4
   21fbc:	pop	{r3, r4, r5, lr}
   21fc0:	b	11d0c <memcpy@plt>
   21fc4:	push	{r4, lr}
   21fc8:	mov	r4, r0
   21fcc:	bl	11fac <strlen@plt>
   21fd0:	add	r1, r0, #1
   21fd4:	mov	r0, r4
   21fd8:	pop	{r4, lr}
   21fdc:	b	21fa0 <close_stdout@@Base+0x6d24>
   21fe0:	ldr	r3, [pc, #64]	; 22028 <close_stdout@@Base+0x6dac>
   21fe4:	mov	r2, #5
   21fe8:	ldr	ip, [pc, #60]	; 2202c <close_stdout@@Base+0x6db0>
   21fec:	mov	r0, #0
   21ff0:	add	r3, pc, r3
   21ff4:	ldr	r1, [pc, #52]	; 22030 <close_stdout@@Base+0x6db4>
   21ff8:	push	{r4, lr}
   21ffc:	add	r1, pc, r1
   22000:	ldr	r3, [r3, ip]
   22004:	ldr	r4, [r3]
   22008:	bl	11d6c <dcgettext@plt>
   2200c:	ldr	r2, [pc, #32]	; 22034 <close_stdout@@Base+0x6db8>
   22010:	mov	r1, #0
   22014:	add	r2, pc, r2
   22018:	mov	r3, r0
   2201c:	mov	r0, r4
   22020:	bl	11e98 <error@plt>
   22024:	bl	12138 <abort@plt>
   22028:	andeq	r7, r1, r8
   2202c:	andeq	r0, r0, r4, lsl r2
   22030:	andeq	r5, r0, r8, lsr r5
   22034:	andeq	r4, r0, r8, lsl #17
   22038:	ldr	ip, [pc, #1308]	; 2255c <close_stdout@@Base+0x72e0>
   2203c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22040:	mov	sl, r2
   22044:	ldr	r2, [pc, #1300]	; 22560 <close_stdout@@Base+0x72e4>
   22048:	add	ip, pc, ip
   2204c:	mov	r9, r3
   22050:	sub	sp, sp, #20
   22054:	mov	r3, ip
   22058:	cmp	sl, #36	; 0x24
   2205c:	ldr	r6, [ip, r2]
   22060:	mov	r5, r0
   22064:	mov	r7, r1
   22068:	ldr	r8, [sp, #56]	; 0x38
   2206c:	ldr	r3, [r6]
   22070:	str	r3, [sp, #12]
   22074:	bhi	2253c <close_stdout@@Base+0x72c0>
   22078:	cmp	r1, #0
   2207c:	addeq	r7, sp, #8
   22080:	bl	11f70 <__ctype_b_loc@plt>
   22084:	ldrb	ip, [r5]
   22088:	mov	r2, r5
   2208c:	ldr	r1, [r0]
   22090:	b	22098 <close_stdout@@Base+0x6e1c>
   22094:	ldrb	ip, [r2, #1]!
   22098:	lsl	r3, ip, #1
   2209c:	ldrh	r4, [r1, r3]
   220a0:	and	r4, r4, #8192	; 0x2000
   220a4:	uxth	r4, r4
   220a8:	cmp	r4, #0
   220ac:	bne	22094 <close_stdout@@Base+0x6e18>
   220b0:	cmp	ip, #45	; 0x2d
   220b4:	bne	220d4 <close_stdout@@Base+0x6e58>
   220b8:	mov	r0, #4
   220bc:	ldr	r2, [sp, #12]
   220c0:	ldr	r3, [r6]
   220c4:	cmp	r2, r3
   220c8:	bne	22538 <close_stdout@@Base+0x72bc>
   220cc:	add	sp, sp, #20
   220d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220d4:	bl	11fd0 <__errno_location@plt>
   220d8:	mov	r2, sl
   220dc:	mov	r1, r7
   220e0:	str	r4, [r0]
   220e4:	mov	fp, r0
   220e8:	mov	r0, r5
   220ec:	bl	11f94 <strtoul@plt>
   220f0:	ldr	r3, [r7]
   220f4:	cmp	r3, r5
   220f8:	mov	sl, r0
   220fc:	beq	2228c <close_stdout@@Base+0x7010>
   22100:	ldr	r0, [fp]
   22104:	cmp	r0, #0
   22108:	bne	22138 <close_stdout@@Base+0x6ebc>
   2210c:	mov	r4, r0
   22110:	cmp	r8, #0
   22114:	streq	sl, [r9]
   22118:	moveq	r0, r4
   2211c:	beq	220bc <close_stdout@@Base+0x6e40>
   22120:	ldrb	r5, [r3]
   22124:	cmp	r5, #0
   22128:	bne	22148 <close_stdout@@Base+0x6ecc>
   2212c:	mov	r0, r4
   22130:	str	sl, [r9]
   22134:	b	220bc <close_stdout@@Base+0x6e40>
   22138:	cmp	r0, #34	; 0x22
   2213c:	moveq	r4, #1
   22140:	bne	220b8 <close_stdout@@Base+0x6e3c>
   22144:	b	22110 <close_stdout@@Base+0x6e94>
   22148:	mov	r0, r8
   2214c:	mov	r1, r5
   22150:	str	r3, [sp, #4]
   22154:	bl	11fb8 <strchr@plt>
   22158:	ldr	r3, [sp, #4]
   2215c:	cmp	r0, #0
   22160:	beq	222c4 <close_stdout@@Base+0x7048>
   22164:	mov	r0, r8
   22168:	mov	r1, #48	; 0x30
   2216c:	str	r3, [sp, #4]
   22170:	bl	11fb8 <strchr@plt>
   22174:	ldr	r3, [sp, #4]
   22178:	cmp	r0, #0
   2217c:	beq	2219c <close_stdout@@Base+0x6f20>
   22180:	ldrb	r2, [r3, #1]
   22184:	cmp	r2, #68	; 0x44
   22188:	beq	22520 <close_stdout@@Base+0x72a4>
   2218c:	cmp	r2, #105	; 0x69
   22190:	beq	22508 <close_stdout@@Base+0x728c>
   22194:	cmp	r2, #66	; 0x42
   22198:	beq	22520 <close_stdout@@Base+0x72a4>
   2219c:	mov	r8, #1
   221a0:	mov	fp, #1024	; 0x400
   221a4:	sub	r5, r5, #66	; 0x42
   221a8:	cmp	r5, #53	; 0x35
   221ac:	addls	pc, pc, r5, lsl #2
   221b0:	b	222c4 <close_stdout@@Base+0x7048>
   221b4:	b	224b4 <close_stdout@@Base+0x7238>
   221b8:	b	222c4 <close_stdout@@Base+0x7048>
   221bc:	b	222c4 <close_stdout@@Base+0x7048>
   221c0:	b	22474 <close_stdout@@Base+0x71f8>
   221c4:	b	222c4 <close_stdout@@Base+0x7048>
   221c8:	b	224c8 <close_stdout@@Base+0x724c>
   221cc:	b	222c4 <close_stdout@@Base+0x7048>
   221d0:	b	222c4 <close_stdout@@Base+0x7048>
   221d4:	b	222c4 <close_stdout@@Base+0x7048>
   221d8:	b	22454 <close_stdout@@Base+0x71d8>
   221dc:	b	222c4 <close_stdout@@Base+0x7048>
   221e0:	b	22420 <close_stdout@@Base+0x71a4>
   221e4:	b	222c4 <close_stdout@@Base+0x7048>
   221e8:	b	222c4 <close_stdout@@Base+0x7048>
   221ec:	b	223e0 <close_stdout@@Base+0x7164>
   221f0:	b	222c4 <close_stdout@@Base+0x7048>
   221f4:	b	222c4 <close_stdout@@Base+0x7048>
   221f8:	b	222c4 <close_stdout@@Base+0x7048>
   221fc:	b	223a0 <close_stdout@@Base+0x7124>
   22200:	b	222c4 <close_stdout@@Base+0x7048>
   22204:	b	222c4 <close_stdout@@Base+0x7048>
   22208:	b	222c4 <close_stdout@@Base+0x7048>
   2220c:	b	222c4 <close_stdout@@Base+0x7048>
   22210:	b	22360 <close_stdout@@Base+0x70e4>
   22214:	b	22320 <close_stdout@@Base+0x70a4>
   22218:	b	222c4 <close_stdout@@Base+0x7048>
   2221c:	b	222c4 <close_stdout@@Base+0x7048>
   22220:	b	222c4 <close_stdout@@Base+0x7048>
   22224:	b	222c4 <close_stdout@@Base+0x7048>
   22228:	b	222c4 <close_stdout@@Base+0x7048>
   2222c:	b	222c4 <close_stdout@@Base+0x7048>
   22230:	b	222c4 <close_stdout@@Base+0x7048>
   22234:	b	2230c <close_stdout@@Base+0x7090>
   22238:	b	222d0 <close_stdout@@Base+0x7054>
   2223c:	b	222c4 <close_stdout@@Base+0x7048>
   22240:	b	222c4 <close_stdout@@Base+0x7048>
   22244:	b	222c4 <close_stdout@@Base+0x7048>
   22248:	b	224c8 <close_stdout@@Base+0x724c>
   2224c:	b	222c4 <close_stdout@@Base+0x7048>
   22250:	b	222c4 <close_stdout@@Base+0x7048>
   22254:	b	222c4 <close_stdout@@Base+0x7048>
   22258:	b	22454 <close_stdout@@Base+0x71d8>
   2225c:	b	222c4 <close_stdout@@Base+0x7048>
   22260:	b	22420 <close_stdout@@Base+0x71a4>
   22264:	b	222c4 <close_stdout@@Base+0x7048>
   22268:	b	222c4 <close_stdout@@Base+0x7048>
   2226c:	b	222c4 <close_stdout@@Base+0x7048>
   22270:	b	222c4 <close_stdout@@Base+0x7048>
   22274:	b	222c4 <close_stdout@@Base+0x7048>
   22278:	b	222c4 <close_stdout@@Base+0x7048>
   2227c:	b	223a0 <close_stdout@@Base+0x7124>
   22280:	b	222c4 <close_stdout@@Base+0x7048>
   22284:	b	222c4 <close_stdout@@Base+0x7048>
   22288:	b	222f0 <close_stdout@@Base+0x7074>
   2228c:	cmp	r8, #0
   22290:	beq	220b8 <close_stdout@@Base+0x6e3c>
   22294:	ldrb	r5, [r5]
   22298:	cmp	r5, #0
   2229c:	beq	220b8 <close_stdout@@Base+0x6e3c>
   222a0:	mov	r0, r8
   222a4:	mov	r1, r5
   222a8:	str	r3, [sp, #4]
   222ac:	bl	11fb8 <strchr@plt>
   222b0:	ldr	r3, [sp, #4]
   222b4:	cmp	r0, #0
   222b8:	movne	sl, #1
   222bc:	bne	22164 <close_stdout@@Base+0x6ee8>
   222c0:	b	220b8 <close_stdout@@Base+0x6e3c>
   222c4:	str	sl, [r9]
   222c8:	orr	r0, r4, #2
   222cc:	b	220bc <close_stdout@@Base+0x6e40>
   222d0:	mov	r2, #0
   222d4:	add	r1, r3, r8
   222d8:	str	r1, [r7]
   222dc:	ldrb	r3, [r3, r8]
   222e0:	orr	r4, r4, r2
   222e4:	cmp	r3, #0
   222e8:	orrne	r4, r4, #2
   222ec:	b	2212c <close_stdout@@Base+0x6eb0>
   222f0:	cmn	sl, #-2147483647	; 0x80000001
   222f4:	lslls	sl, sl, #1
   222f8:	movls	r2, #0
   222fc:	bls	222d4 <close_stdout@@Base+0x7058>
   22300:	mvn	sl, #0
   22304:	mov	r2, #1
   22308:	b	222d4 <close_stdout@@Base+0x7058>
   2230c:	cmp	sl, #8388608	; 0x800000
   22310:	lslcc	sl, sl, #9
   22314:	movcc	r2, #0
   22318:	bcc	222d4 <close_stdout@@Base+0x7058>
   2231c:	b	22300 <close_stdout@@Base+0x7084>
   22320:	mov	r1, fp
   22324:	mvn	r0, #0
   22328:	str	r3, [sp, #4]
   2232c:	bl	234ec <close_stdout@@Base+0x8270>
   22330:	ldr	r3, [sp, #4]
   22334:	mov	r1, #7
   22338:	mov	r2, #0
   2233c:	cmp	r0, sl
   22340:	movcs	ip, #0
   22344:	movcc	ip, #1
   22348:	mulcs	sl, fp, sl
   2234c:	mvncc	sl, #0
   22350:	subs	r1, r1, #1
   22354:	orr	r2, r2, ip
   22358:	bne	2233c <close_stdout@@Base+0x70c0>
   2235c:	b	222d4 <close_stdout@@Base+0x7058>
   22360:	mov	r1, fp
   22364:	mvn	r0, #0
   22368:	str	r3, [sp, #4]
   2236c:	bl	234ec <close_stdout@@Base+0x8270>
   22370:	ldr	r3, [sp, #4]
   22374:	mov	r1, #8
   22378:	mov	r2, #0
   2237c:	cmp	r0, sl
   22380:	movcs	ip, #0
   22384:	movcc	ip, #1
   22388:	mulcs	sl, fp, sl
   2238c:	mvncc	sl, #0
   22390:	subs	r1, r1, #1
   22394:	orr	r2, r2, ip
   22398:	bne	2237c <close_stdout@@Base+0x7100>
   2239c:	b	222d4 <close_stdout@@Base+0x7058>
   223a0:	mov	r1, fp
   223a4:	mvn	r0, #0
   223a8:	str	r3, [sp, #4]
   223ac:	bl	234ec <close_stdout@@Base+0x8270>
   223b0:	ldr	r3, [sp, #4]
   223b4:	mov	r1, #4
   223b8:	mov	r2, #0
   223bc:	cmp	r0, sl
   223c0:	movcs	ip, #0
   223c4:	movcc	ip, #1
   223c8:	mulcs	sl, fp, sl
   223cc:	mvncc	sl, #0
   223d0:	subs	r1, r1, #1
   223d4:	orr	r2, r2, ip
   223d8:	bne	223bc <close_stdout@@Base+0x7140>
   223dc:	b	222d4 <close_stdout@@Base+0x7058>
   223e0:	mov	r1, fp
   223e4:	mvn	r0, #0
   223e8:	str	r3, [sp, #4]
   223ec:	bl	234ec <close_stdout@@Base+0x8270>
   223f0:	ldr	r3, [sp, #4]
   223f4:	mov	r1, #5
   223f8:	mov	r2, #0
   223fc:	cmp	r0, sl
   22400:	movcs	ip, #0
   22404:	movcc	ip, #1
   22408:	mulcs	sl, fp, sl
   2240c:	mvncc	sl, #0
   22410:	subs	r1, r1, #1
   22414:	orr	r2, r2, ip
   22418:	bne	223fc <close_stdout@@Base+0x7180>
   2241c:	b	222d4 <close_stdout@@Base+0x7058>
   22420:	mvn	r0, #0
   22424:	mov	r1, fp
   22428:	str	r3, [sp, #4]
   2242c:	bl	234ec <close_stdout@@Base+0x8270>
   22430:	ldr	r3, [sp, #4]
   22434:	cmp	sl, r0
   22438:	bhi	2252c <close_stdout@@Base+0x72b0>
   2243c:	mul	sl, sl, fp
   22440:	cmp	r0, sl
   22444:	bcc	2252c <close_stdout@@Base+0x72b0>
   22448:	mul	sl, fp, sl
   2244c:	mov	r2, #0
   22450:	b	222d4 <close_stdout@@Base+0x7058>
   22454:	mvn	r0, #0
   22458:	mov	r1, fp
   2245c:	str	r3, [sp, #4]
   22460:	bl	234ec <close_stdout@@Base+0x8270>
   22464:	ldr	r3, [sp, #4]
   22468:	cmp	sl, r0
   2246c:	bhi	22300 <close_stdout@@Base+0x7084>
   22470:	b	22448 <close_stdout@@Base+0x71cc>
   22474:	mov	r1, fp
   22478:	mvn	r0, #0
   2247c:	str	r3, [sp, #4]
   22480:	bl	234ec <close_stdout@@Base+0x8270>
   22484:	ldr	r3, [sp, #4]
   22488:	mov	r1, #6
   2248c:	mov	r2, #0
   22490:	cmp	r0, sl
   22494:	movcs	ip, #0
   22498:	movcc	ip, #1
   2249c:	mulcs	sl, fp, sl
   224a0:	mvncc	sl, #0
   224a4:	subs	r1, r1, #1
   224a8:	orr	r2, r2, ip
   224ac:	bne	22490 <close_stdout@@Base+0x7214>
   224b0:	b	222d4 <close_stdout@@Base+0x7058>
   224b4:	cmp	sl, #4194304	; 0x400000
   224b8:	lslcc	sl, sl, #10
   224bc:	movcc	r2, #0
   224c0:	bcc	222d4 <close_stdout@@Base+0x7058>
   224c4:	b	22300 <close_stdout@@Base+0x7084>
   224c8:	mov	r1, fp
   224cc:	mvn	r0, #0
   224d0:	str	r3, [sp, #4]
   224d4:	bl	234ec <close_stdout@@Base+0x8270>
   224d8:	ldr	r3, [sp, #4]
   224dc:	mov	r1, #3
   224e0:	mov	r2, #0
   224e4:	cmp	r0, sl
   224e8:	movcs	ip, #0
   224ec:	movcc	ip, #1
   224f0:	mulcs	sl, fp, sl
   224f4:	mvncc	sl, #0
   224f8:	subs	r1, r1, #1
   224fc:	orr	r2, r2, ip
   22500:	bne	224e4 <close_stdout@@Base+0x7268>
   22504:	b	222d4 <close_stdout@@Base+0x7058>
   22508:	ldrb	r8, [r3, #2]
   2250c:	mov	fp, #1024	; 0x400
   22510:	cmp	r8, #66	; 0x42
   22514:	moveq	r8, #3
   22518:	movne	r8, #1
   2251c:	b	221a4 <close_stdout@@Base+0x6f28>
   22520:	mov	r8, #2
   22524:	mov	fp, #1000	; 0x3e8
   22528:	b	221a4 <close_stdout@@Base+0x6f28>
   2252c:	mov	r2, #1
   22530:	mvn	sl, #0
   22534:	b	222d4 <close_stdout@@Base+0x7058>
   22538:	bl	11d78 <__stack_chk_fail@plt>
   2253c:	ldr	r0, [pc, #32]	; 22564 <close_stdout@@Base+0x72e8>
   22540:	mov	r2, #96	; 0x60
   22544:	ldr	r1, [pc, #28]	; 22568 <close_stdout@@Base+0x72ec>
   22548:	ldr	r3, [pc, #28]	; 2256c <close_stdout@@Base+0x72f0>
   2254c:	add	r0, pc, r0
   22550:	add	r1, pc, r1
   22554:	add	r3, pc, r3
   22558:	bl	1218c <__assert_fail@plt>
   2255c:			; <UNDEFINED> instruction: 0x00016fb0
   22560:	andeq	r0, r0, r0, ror #3
   22564:	andeq	r5, r0, r8
   22568:	andeq	r5, r0, ip, lsr #32
   2256c:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   22570:	ldr	ip, [pc, #204]	; 22644 <close_stdout@@Base+0x73c8>
   22574:	push	{r4, r5, r6, r7, lr}
   22578:	sub	lr, r0, #1
   2257c:	ldr	r0, [pc, #196]	; 22648 <close_stdout@@Base+0x73cc>
   22580:	add	ip, pc, ip
   22584:	ldr	r4, [pc, #192]	; 2264c <close_stdout@@Base+0x73d0>
   22588:	sub	sp, sp, #20
   2258c:	ldr	r0, [ip, r0]
   22590:	ldr	r5, [sp, #40]	; 0x28
   22594:	ldr	r0, [r0]
   22598:	str	r0, [sp, #12]
   2259c:	ldr	r0, [ip, r4]
   225a0:	ldr	r4, [r0]
   225a4:	cmp	lr, #3
   225a8:	addls	pc, pc, lr, lsl #2
   225ac:	b	22608 <close_stdout@@Base+0x738c>
   225b0:	b	2260c <close_stdout@@Base+0x7390>
   225b4:	b	225c0 <close_stdout@@Base+0x7344>
   225b8:	b	225c0 <close_stdout@@Base+0x7344>
   225bc:	b	22618 <close_stdout@@Base+0x739c>
   225c0:	ldr	r0, [pc, #136]	; 22650 <close_stdout@@Base+0x73d4>
   225c4:	add	r0, pc, r0
   225c8:	cmp	r1, #0
   225cc:	blt	22624 <close_stdout@@Base+0x73a8>
   225d0:	ldr	r7, [pc, #124]	; 22654 <close_stdout@@Base+0x73d8>
   225d4:	ldr	r6, [r3, r1, lsl #4]
   225d8:	add	r7, pc, r7
   225dc:	mov	r1, r0
   225e0:	mov	r2, #5
   225e4:	mov	r0, #0
   225e8:	bl	11d6c <dcgettext@plt>
   225ec:	str	r6, [sp]
   225f0:	str	r5, [sp, #4]
   225f4:	mov	r3, r7
   225f8:	mov	r1, #0
   225fc:	mov	r2, r0
   22600:	mov	r0, r4
   22604:	bl	11e98 <error@plt>
   22608:	bl	12138 <abort@plt>
   2260c:	ldr	r0, [pc, #68]	; 22658 <close_stdout@@Base+0x73dc>
   22610:	add	r0, pc, r0
   22614:	b	225c8 <close_stdout@@Base+0x734c>
   22618:	ldr	r0, [pc, #60]	; 2265c <close_stdout@@Base+0x73e0>
   2261c:	add	r0, pc, r0
   22620:	b	225c8 <close_stdout@@Base+0x734c>
   22624:	ldr	r7, [pc, #52]	; 22660 <close_stdout@@Base+0x73e4>
   22628:	mov	r3, #0
   2262c:	strb	r2, [sp, #8]
   22630:	add	r6, sp, #8
   22634:	add	r7, pc, r7
   22638:	strb	r3, [sp, #9]
   2263c:	rsb	r7, r1, r7
   22640:	b	225dc <close_stdout@@Base+0x7360>
   22644:	andeq	r6, r1, r8, ror sl
   22648:	andeq	r0, r0, r0, ror #3
   2264c:	andeq	r0, r0, r4, lsl r2
   22650:	andeq	r4, r0, r4, ror #31
   22654:	andeq	r5, r0, r8, lsl r0
   22658:	andeq	r4, r0, r0, asr #31
   2265c:	andeq	r4, r0, r0, ror pc
   22660:			; <UNDEFINED> instruction: 0x00004fbc
   22664:	ldr	ip, [pc, #1852]	; 22da8 <close_stdout@@Base+0x7b2c>
   22668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2266c:	mov	fp, r2
   22670:	ldr	r2, [pc, #1844]	; 22dac <close_stdout@@Base+0x7b30>
   22674:	add	ip, pc, ip
   22678:	mov	r9, r3
   2267c:	sub	sp, sp, #36	; 0x24
   22680:	mov	r3, ip
   22684:	cmp	fp, #36	; 0x24
   22688:	ldr	sl, [ip, r2]
   2268c:	mov	r5, r0
   22690:	mov	r8, r1
   22694:	ldr	r6, [sp, #72]	; 0x48
   22698:	ldr	r3, [sl]
   2269c:	str	r3, [sp, #28]
   226a0:	bhi	22d88 <close_stdout@@Base+0x7b0c>
   226a4:	cmp	r1, #0
   226a8:	addeq	r8, sp, #24
   226ac:	bl	11f70 <__ctype_b_loc@plt>
   226b0:	ldrb	r3, [r5]
   226b4:	mov	r1, r5
   226b8:	ldr	r0, [r0]
   226bc:	b	226c4 <close_stdout@@Base+0x7448>
   226c0:	ldrb	r3, [r1, #1]!
   226c4:	lsl	r2, r3, #1
   226c8:	ldrh	r4, [r0, r2]
   226cc:	and	r4, r4, #8192	; 0x2000
   226d0:	uxth	r4, r4
   226d4:	cmp	r4, #0
   226d8:	bne	226c0 <close_stdout@@Base+0x7444>
   226dc:	cmp	r3, #45	; 0x2d
   226e0:	bne	22700 <close_stdout@@Base+0x7484>
   226e4:	mov	r0, #4
   226e8:	ldr	r2, [sp, #28]
   226ec:	ldr	r3, [sl]
   226f0:	cmp	r2, r3
   226f4:	bne	22d84 <close_stdout@@Base+0x7b08>
   226f8:	add	sp, sp, #36	; 0x24
   226fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22700:	bl	11fd0 <__errno_location@plt>
   22704:	mov	r2, fp
   22708:	mov	r1, r8
   2270c:	mov	r3, r4
   22710:	str	r4, [r0]
   22714:	mov	r7, r0
   22718:	mov	r0, r5
   2271c:	bl	11d18 <__strtoull_internal@plt>
   22720:	ldr	fp, [r8]
   22724:	cmp	fp, r5
   22728:	strd	r0, [sp]
   2272c:	beq	228a8 <close_stdout@@Base+0x762c>
   22730:	ldr	ip, [r7]
   22734:	cmp	ip, #0
   22738:	bne	22764 <close_stdout@@Base+0x74e8>
   2273c:	mov	r7, ip
   22740:	cmp	r6, #0
   22744:	beq	22d14 <close_stdout@@Base+0x7a98>
   22748:	ldrb	r5, [fp]
   2274c:	cmp	r5, #0
   22750:	bne	22774 <close_stdout@@Base+0x74f8>
   22754:	ldrd	r2, [sp]
   22758:	mov	r0, r7
   2275c:	strd	r2, [r9]
   22760:	b	226e8 <close_stdout@@Base+0x746c>
   22764:	cmp	ip, #34	; 0x22
   22768:	moveq	r7, #1
   2276c:	bne	226e4 <close_stdout@@Base+0x7468>
   22770:	b	22740 <close_stdout@@Base+0x74c4>
   22774:	mov	r0, r6
   22778:	mov	r1, r5
   2277c:	bl	11fb8 <strchr@plt>
   22780:	cmp	r0, #0
   22784:	beq	228e4 <close_stdout@@Base+0x7668>
   22788:	mov	r0, r6
   2278c:	mov	r1, #48	; 0x30
   22790:	bl	11fb8 <strchr@plt>
   22794:	cmp	r0, #0
   22798:	beq	227b8 <close_stdout@@Base+0x753c>
   2279c:	ldrb	r3, [fp, #1]
   227a0:	cmp	r3, #68	; 0x44
   227a4:	beq	22d3c <close_stdout@@Base+0x7ac0>
   227a8:	cmp	r3, #105	; 0x69
   227ac:	beq	22d24 <close_stdout@@Base+0x7aa8>
   227b0:	cmp	r3, #66	; 0x42
   227b4:	beq	22d3c <close_stdout@@Base+0x7ac0>
   227b8:	mov	r6, #1
   227bc:	mov	r4, #1024	; 0x400
   227c0:	sub	r5, r5, #66	; 0x42
   227c4:	cmp	r5, #53	; 0x35
   227c8:	addls	pc, pc, r5, lsl #2
   227cc:	b	228e4 <close_stdout@@Base+0x7668>
   227d0:	b	22b8c <close_stdout@@Base+0x7910>
   227d4:	b	228e4 <close_stdout@@Base+0x7668>
   227d8:	b	228e4 <close_stdout@@Base+0x7668>
   227dc:	b	22b20 <close_stdout@@Base+0x78a4>
   227e0:	b	228e4 <close_stdout@@Base+0x7668>
   227e4:	b	22ab4 <close_stdout@@Base+0x7838>
   227e8:	b	228e4 <close_stdout@@Base+0x7668>
   227ec:	b	228e4 <close_stdout@@Base+0x7668>
   227f0:	b	228e4 <close_stdout@@Base+0x7668>
   227f4:	b	22a5c <close_stdout@@Base+0x77e0>
   227f8:	b	228e4 <close_stdout@@Base+0x7668>
   227fc:	b	22c34 <close_stdout@@Base+0x79b8>
   22800:	b	228e4 <close_stdout@@Base+0x7668>
   22804:	b	228e4 <close_stdout@@Base+0x7668>
   22808:	b	22bc8 <close_stdout@@Base+0x794c>
   2280c:	b	228e4 <close_stdout@@Base+0x7668>
   22810:	b	228e4 <close_stdout@@Base+0x7668>
   22814:	b	228e4 <close_stdout@@Base+0x7668>
   22818:	b	22ca8 <close_stdout@@Base+0x7a2c>
   2281c:	b	228e4 <close_stdout@@Base+0x7668>
   22820:	b	228e4 <close_stdout@@Base+0x7668>
   22824:	b	228e4 <close_stdout@@Base+0x7668>
   22828:	b	228e4 <close_stdout@@Base+0x7668>
   2282c:	b	229f0 <close_stdout@@Base+0x7774>
   22830:	b	22978 <close_stdout@@Base+0x76fc>
   22834:	b	228e4 <close_stdout@@Base+0x7668>
   22838:	b	228e4 <close_stdout@@Base+0x7668>
   2283c:	b	228e4 <close_stdout@@Base+0x7668>
   22840:	b	228e4 <close_stdout@@Base+0x7668>
   22844:	b	228e4 <close_stdout@@Base+0x7668>
   22848:	b	228e4 <close_stdout@@Base+0x7668>
   2284c:	b	228e4 <close_stdout@@Base+0x7668>
   22850:	b	2293c <close_stdout@@Base+0x76c0>
   22854:	b	228f4 <close_stdout@@Base+0x7678>
   22858:	b	228e4 <close_stdout@@Base+0x7668>
   2285c:	b	228e4 <close_stdout@@Base+0x7668>
   22860:	b	228e4 <close_stdout@@Base+0x7668>
   22864:	b	22ab4 <close_stdout@@Base+0x7838>
   22868:	b	228e4 <close_stdout@@Base+0x7668>
   2286c:	b	228e4 <close_stdout@@Base+0x7668>
   22870:	b	228e4 <close_stdout@@Base+0x7668>
   22874:	b	22a5c <close_stdout@@Base+0x77e0>
   22878:	b	228e4 <close_stdout@@Base+0x7668>
   2287c:	b	22c34 <close_stdout@@Base+0x79b8>
   22880:	b	228e4 <close_stdout@@Base+0x7668>
   22884:	b	228e4 <close_stdout@@Base+0x7668>
   22888:	b	228e4 <close_stdout@@Base+0x7668>
   2288c:	b	228e4 <close_stdout@@Base+0x7668>
   22890:	b	228e4 <close_stdout@@Base+0x7668>
   22894:	b	228e4 <close_stdout@@Base+0x7668>
   22898:	b	22ca8 <close_stdout@@Base+0x7a2c>
   2289c:	b	228e4 <close_stdout@@Base+0x7668>
   228a0:	b	228e4 <close_stdout@@Base+0x7668>
   228a4:	b	22914 <close_stdout@@Base+0x7698>
   228a8:	cmp	r6, #0
   228ac:	beq	226e4 <close_stdout@@Base+0x7468>
   228b0:	ldrb	r5, [r5]
   228b4:	cmp	r5, #0
   228b8:	beq	226e4 <close_stdout@@Base+0x7468>
   228bc:	mov	r0, r6
   228c0:	mov	r1, r5
   228c4:	bl	11fb8 <strchr@plt>
   228c8:	cmp	r0, #0
   228cc:	beq	226e4 <close_stdout@@Base+0x7468>
   228d0:	mov	r0, #1
   228d4:	mov	r1, #0
   228d8:	mov	r7, r4
   228dc:	strd	r0, [sp]
   228e0:	b	22788 <close_stdout@@Base+0x750c>
   228e4:	ldrd	r2, [sp]
   228e8:	orr	r0, r7, #2
   228ec:	strd	r2, [r9]
   228f0:	b	226e8 <close_stdout@@Base+0x746c>
   228f4:	mov	r3, #0
   228f8:	add	r2, fp, r6
   228fc:	str	r2, [r8]
   22900:	ldrb	r2, [fp, r6]
   22904:	orr	r7, r7, r3
   22908:	cmp	r2, #0
   2290c:	orrne	r7, r7, #2
   22910:	b	22754 <close_stdout@@Base+0x74d8>
   22914:	ldrd	r2, [sp]
   22918:	cmp	r2, #0
   2291c:	sbcs	r3, r3, #0
   22920:	blt	22d5c <close_stdout@@Base+0x7ae0>
   22924:	ldrd	r0, [sp]
   22928:	mov	r3, #0
   2292c:	adds	r0, r0, r0
   22930:	adc	r1, r1, r1
   22934:	strd	r0, [sp]
   22938:	b	228f8 <close_stdout@@Base+0x767c>
   2293c:	ldrd	r0, [sp]
   22940:	movw	r3, #65535	; 0xffff
   22944:	movt	r3, #127	; 0x7f
   22948:	mvn	r2, #0
   2294c:	cmp	r1, r3
   22950:	cmpeq	r0, r2
   22954:	bhi	22d5c <close_stdout@@Base+0x7ae0>
   22958:	lsl	r2, r1, #9
   2295c:	ldr	r1, [sp]
   22960:	lsl	r3, r0, #9
   22964:	str	r3, [sp]
   22968:	mov	r3, #0
   2296c:	orr	r2, r2, r1, lsr #23
   22970:	str	r2, [sp, #4]
   22974:	b	228f8 <close_stdout@@Base+0x767c>
   22978:	asr	r5, r4, #31
   2297c:	mov	r2, r4
   22980:	mvn	r0, #0
   22984:	mvn	r1, #0
   22988:	mov	r3, r5
   2298c:	bl	23af8 <close_stdout@@Base+0x887c>
   22990:	mov	ip, r7
   22994:	str	r6, [sp, #20]
   22998:	mov	r2, #7
   2299c:	ldrd	r6, [sp]
   229a0:	mov	r3, #0
   229a4:	strd	r0, [sp, #8]
   229a8:	ldrd	r0, [sp, #8]
   229ac:	cmp	r1, r7
   229b0:	cmpeq	r0, r6
   229b4:	mulcs	r0, r6, r5
   229b8:	movcs	r1, #0
   229bc:	mlacs	r0, r4, r7, r0
   229c0:	movcc	r1, #1
   229c4:	umullcs	r6, r7, r6, r4
   229c8:	mvncc	r6, #0
   229cc:	mvncc	r7, #0
   229d0:	orr	r3, r3, r1
   229d4:	addcs	r7, r0, r7
   229d8:	subs	r2, r2, #1
   229dc:	bne	229a8 <close_stdout@@Base+0x772c>
   229e0:	strd	r6, [sp]
   229e4:	mov	r7, ip
   229e8:	ldr	r6, [sp, #20]
   229ec:	b	228f8 <close_stdout@@Base+0x767c>
   229f0:	asr	r5, r4, #31
   229f4:	mov	r2, r4
   229f8:	mvn	r0, #0
   229fc:	mvn	r1, #0
   22a00:	mov	r3, r5
   22a04:	bl	23af8 <close_stdout@@Base+0x887c>
   22a08:	mov	ip, r7
   22a0c:	str	r6, [sp, #20]
   22a10:	mov	r2, #8
   22a14:	ldrd	r6, [sp]
   22a18:	mov	r3, #0
   22a1c:	strd	r0, [sp, #8]
   22a20:	ldrd	r0, [sp, #8]
   22a24:	cmp	r1, r7
   22a28:	cmpeq	r0, r6
   22a2c:	mulcs	r0, r6, r5
   22a30:	movcs	r1, #0
   22a34:	mlacs	r0, r4, r7, r0
   22a38:	movcc	r1, #1
   22a3c:	umullcs	r6, r7, r6, r4
   22a40:	mvncc	r6, #0
   22a44:	mvncc	r7, #0
   22a48:	orr	r3, r3, r1
   22a4c:	addcs	r7, r0, r7
   22a50:	subs	r2, r2, #1
   22a54:	bne	22a20 <close_stdout@@Base+0x77a4>
   22a58:	b	229e0 <close_stdout@@Base+0x7764>
   22a5c:	mov	r2, r4
   22a60:	asr	r3, r4, #31
   22a64:	mvn	r0, #0
   22a68:	mvn	r1, #0
   22a6c:	strd	r2, [sp, #8]
   22a70:	bl	23af8 <close_stdout@@Base+0x887c>
   22a74:	ldrd	r2, [sp]
   22a78:	cmp	r3, r1
   22a7c:	cmpeq	r2, r0
   22a80:	bhi	22d48 <close_stdout@@Base+0x7acc>
   22a84:	ldr	r3, [sp]
   22a88:	ldr	ip, [sp, #12]
   22a8c:	ldr	r0, [sp, #4]
   22a90:	ldr	r1, [sp]
   22a94:	mul	r2, r3, ip
   22a98:	mov	r3, #0
   22a9c:	mla	r2, r4, r0, r2
   22aa0:	umull	r0, r1, r1, r4
   22aa4:	add	r2, r2, r1
   22aa8:	strd	r0, [sp]
   22aac:	str	r2, [sp, #4]
   22ab0:	b	228f8 <close_stdout@@Base+0x767c>
   22ab4:	asr	r5, r4, #31
   22ab8:	mov	r2, r4
   22abc:	mvn	r0, #0
   22ac0:	mvn	r1, #0
   22ac4:	mov	r3, r5
   22ac8:	bl	23af8 <close_stdout@@Base+0x887c>
   22acc:	mov	ip, r7
   22ad0:	str	r6, [sp, #20]
   22ad4:	mov	r2, #3
   22ad8:	ldrd	r6, [sp]
   22adc:	mov	r3, #0
   22ae0:	strd	r0, [sp, #8]
   22ae4:	ldrd	r0, [sp, #8]
   22ae8:	cmp	r1, r7
   22aec:	cmpeq	r0, r6
   22af0:	mulcs	r0, r6, r5
   22af4:	movcs	r1, #0
   22af8:	mlacs	r0, r4, r7, r0
   22afc:	movcc	r1, #1
   22b00:	umullcs	r6, r7, r6, r4
   22b04:	mvncc	r6, #0
   22b08:	mvncc	r7, #0
   22b0c:	orr	r3, r3, r1
   22b10:	addcs	r7, r0, r7
   22b14:	subs	r2, r2, #1
   22b18:	bne	22ae4 <close_stdout@@Base+0x7868>
   22b1c:	b	229e0 <close_stdout@@Base+0x7764>
   22b20:	asr	r5, r4, #31
   22b24:	mov	r2, r4
   22b28:	mvn	r0, #0
   22b2c:	mvn	r1, #0
   22b30:	mov	r3, r5
   22b34:	bl	23af8 <close_stdout@@Base+0x887c>
   22b38:	mov	ip, r7
   22b3c:	str	r6, [sp, #20]
   22b40:	mov	r2, #6
   22b44:	ldrd	r6, [sp]
   22b48:	mov	r3, #0
   22b4c:	strd	r0, [sp, #8]
   22b50:	ldrd	r0, [sp, #8]
   22b54:	cmp	r1, r7
   22b58:	cmpeq	r0, r6
   22b5c:	mulcs	r0, r6, r5
   22b60:	movcs	r1, #0
   22b64:	mlacs	r0, r4, r7, r0
   22b68:	movcc	r1, #1
   22b6c:	umullcs	r6, r7, r6, r4
   22b70:	mvncc	r6, #0
   22b74:	mvncc	r7, #0
   22b78:	orr	r3, r3, r1
   22b7c:	addcs	r7, r0, r7
   22b80:	subs	r2, r2, #1
   22b84:	bne	22b50 <close_stdout@@Base+0x78d4>
   22b88:	b	229e0 <close_stdout@@Base+0x7764>
   22b8c:	ldrd	r0, [sp]
   22b90:	movw	r3, #65535	; 0xffff
   22b94:	movt	r3, #63	; 0x3f
   22b98:	mvn	r2, #0
   22b9c:	cmp	r1, r3
   22ba0:	cmpeq	r0, r2
   22ba4:	bhi	22d48 <close_stdout@@Base+0x7acc>
   22ba8:	lsl	r2, r1, #10
   22bac:	ldr	r1, [sp]
   22bb0:	lsl	r3, r0, #10
   22bb4:	str	r3, [sp]
   22bb8:	mov	r3, #0
   22bbc:	orr	r2, r2, r1, lsr #22
   22bc0:	str	r2, [sp, #4]
   22bc4:	b	228f8 <close_stdout@@Base+0x767c>
   22bc8:	asr	r5, r4, #31
   22bcc:	mov	r2, r4
   22bd0:	mvn	r0, #0
   22bd4:	mvn	r1, #0
   22bd8:	mov	r3, r5
   22bdc:	bl	23af8 <close_stdout@@Base+0x887c>
   22be0:	mov	ip, r7
   22be4:	str	r6, [sp, #20]
   22be8:	mov	r2, #5
   22bec:	ldrd	r6, [sp]
   22bf0:	mov	r3, #0
   22bf4:	strd	r0, [sp, #8]
   22bf8:	ldrd	r0, [sp, #8]
   22bfc:	cmp	r1, r7
   22c00:	cmpeq	r0, r6
   22c04:	mulcs	r0, r6, r5
   22c08:	movcs	r1, #0
   22c0c:	mlacs	r0, r4, r7, r0
   22c10:	movcc	r1, #1
   22c14:	umullcs	r6, r7, r6, r4
   22c18:	mvncc	r6, #0
   22c1c:	mvncc	r7, #0
   22c20:	orr	r3, r3, r1
   22c24:	addcs	r7, r0, r7
   22c28:	subs	r2, r2, #1
   22c2c:	bne	22bf8 <close_stdout@@Base+0x797c>
   22c30:	b	229e0 <close_stdout@@Base+0x7764>
   22c34:	mov	r2, r4
   22c38:	asr	r3, r4, #31
   22c3c:	mvn	r0, #0
   22c40:	mvn	r1, #0
   22c44:	strd	r2, [sp, #8]
   22c48:	bl	23af8 <close_stdout@@Base+0x887c>
   22c4c:	ldrd	r2, [sp]
   22c50:	cmp	r3, r1
   22c54:	cmpeq	r2, r0
   22c58:	bhi	22d70 <close_stdout@@Base+0x7af4>
   22c5c:	ldr	ip, [sp, #4]
   22c60:	mul	r3, r4, ip
   22c64:	ldr	ip, [sp, #12]
   22c68:	mla	r3, r2, ip, r3
   22c6c:	ldr	r2, [sp]
   22c70:	umull	r4, r5, r4, r2
   22c74:	add	r5, r3, r5
   22c78:	cmp	r1, r5
   22c7c:	cmpeq	r0, r4
   22c80:	bcc	22d70 <close_stdout@@Base+0x7af4>
   22c84:	mul	r2, r4, ip
   22c88:	ldr	ip, [sp, #8]
   22c8c:	mov	r3, #0
   22c90:	umull	r0, r1, r4, ip
   22c94:	mla	r2, ip, r5, r2
   22c98:	strd	r0, [sp]
   22c9c:	add	r2, r2, r1
   22ca0:	str	r2, [sp, #4]
   22ca4:	b	228f8 <close_stdout@@Base+0x767c>
   22ca8:	asr	r5, r4, #31
   22cac:	mov	r2, r4
   22cb0:	mvn	r0, #0
   22cb4:	mvn	r1, #0
   22cb8:	mov	r3, r5
   22cbc:	bl	23af8 <close_stdout@@Base+0x887c>
   22cc0:	mov	ip, r7
   22cc4:	str	r6, [sp, #20]
   22cc8:	mov	r2, #4
   22ccc:	ldrd	r6, [sp]
   22cd0:	mov	r3, #0
   22cd4:	strd	r0, [sp, #8]
   22cd8:	ldrd	r0, [sp, #8]
   22cdc:	cmp	r1, r7
   22ce0:	cmpeq	r0, r6
   22ce4:	mulcs	r0, r6, r5
   22ce8:	movcs	r1, #0
   22cec:	mlacs	r0, r4, r7, r0
   22cf0:	movcc	r1, #1
   22cf4:	umullcs	r6, r7, r6, r4
   22cf8:	mvncc	r6, #0
   22cfc:	mvncc	r7, #0
   22d00:	orr	r3, r3, r1
   22d04:	addcs	r7, r0, r7
   22d08:	subs	r2, r2, #1
   22d0c:	bne	22cd8 <close_stdout@@Base+0x7a5c>
   22d10:	b	229e0 <close_stdout@@Base+0x7764>
   22d14:	ldrd	r0, [sp]
   22d18:	strd	r0, [r9]
   22d1c:	mov	r0, r7
   22d20:	b	226e8 <close_stdout@@Base+0x746c>
   22d24:	ldrb	r3, [fp, #2]
   22d28:	mov	r4, #1024	; 0x400
   22d2c:	cmp	r3, #66	; 0x42
   22d30:	moveq	r6, #3
   22d34:	movne	r6, #1
   22d38:	b	227c0 <close_stdout@@Base+0x7544>
   22d3c:	mov	r6, #2
   22d40:	mov	r4, #1000	; 0x3e8
   22d44:	b	227c0 <close_stdout@@Base+0x7544>
   22d48:	mvn	r3, #0
   22d4c:	mvn	r2, #0
   22d50:	strd	r2, [sp]
   22d54:	mov	r3, #1
   22d58:	b	228f8 <close_stdout@@Base+0x767c>
   22d5c:	mvn	r0, #0
   22d60:	mvn	r1, #0
   22d64:	mov	r3, #1
   22d68:	strd	r0, [sp]
   22d6c:	b	228f8 <close_stdout@@Base+0x767c>
   22d70:	mvn	r0, #0
   22d74:	mvn	r1, #0
   22d78:	mov	r3, #1
   22d7c:	strd	r0, [sp]
   22d80:	b	228f8 <close_stdout@@Base+0x767c>
   22d84:	bl	11d78 <__stack_chk_fail@plt>
   22d88:	ldr	r0, [pc, #32]	; 22db0 <close_stdout@@Base+0x7b34>
   22d8c:	mov	r2, #96	; 0x60
   22d90:	ldr	r1, [pc, #28]	; 22db4 <close_stdout@@Base+0x7b38>
   22d94:	ldr	r3, [pc, #28]	; 22db8 <close_stdout@@Base+0x7b3c>
   22d98:	add	r0, pc, r0
   22d9c:	add	r1, pc, r1
   22da0:	add	r3, pc, r3
   22da4:	bl	1218c <__assert_fail@plt>
   22da8:	andeq	r6, r1, r4, lsl #19
   22dac:	andeq	r0, r0, r0, ror #3
   22db0:			; <UNDEFINED> instruction: 0x000047bc
   22db4:	andeq	r4, r0, r0, ror #15
   22db8:	andeq	r4, r0, r4, asr r8
   22dbc:	push	{r3, r4, r5, lr}
   22dc0:	subs	r4, r0, #0
   22dc4:	beq	22e10 <close_stdout@@Base+0x7b94>
   22dc8:	cmp	r4, #10
   22dcc:	beq	22dd8 <close_stdout@@Base+0x7b5c>
   22dd0:	mov	r0, r4
   22dd4:	pop	{r3, r4, r5, pc}
   22dd8:	ldr	r5, [r1]
   22ddc:	ldr	r1, [pc, #64]	; 22e24 <close_stdout@@Base+0x7ba8>
   22de0:	mov	r0, r5
   22de4:	add	r1, pc, r1
   22de8:	bl	11c88 <strcmp@plt>
   22dec:	cmp	r0, #0
   22df0:	bne	22dd0 <close_stdout@@Base+0x7b54>
   22df4:	mov	r0, r5
   22df8:	mvn	r4, #0
   22dfc:	bl	120fc <freecon@plt>
   22e00:	bl	11fd0 <__errno_location@plt>
   22e04:	mov	r3, #61	; 0x3d
   22e08:	str	r3, [r0]
   22e0c:	b	22dd0 <close_stdout@@Base+0x7b54>
   22e10:	bl	11fd0 <__errno_location@plt>
   22e14:	mvn	r4, #0
   22e18:	mov	r3, #95	; 0x5f
   22e1c:	str	r3, [r0]
   22e20:	b	22dd0 <close_stdout@@Base+0x7b54>
   22e24:	andeq	r1, r0, r0, asr sl
   22e28:	push	{r4, lr}
   22e2c:	mov	r4, r1
   22e30:	bl	11f88 <getfilecon@plt>
   22e34:	mov	r1, r4
   22e38:	pop	{r4, lr}
   22e3c:	b	22dbc <close_stdout@@Base+0x7b40>
   22e40:	push	{r4, lr}
   22e44:	mov	r4, r1
   22e48:	bl	11ee0 <lgetfilecon@plt>
   22e4c:	mov	r1, r4
   22e50:	pop	{r4, lr}
   22e54:	b	22dbc <close_stdout@@Base+0x7b40>
   22e58:	push	{r4, lr}
   22e5c:	mov	r4, r1
   22e60:	bl	11da8 <fgetfilecon@plt>
   22e64:	mov	r1, r4
   22e68:	pop	{r4, lr}
   22e6c:	b	22dbc <close_stdout@@Base+0x7b40>
   22e70:	push	{r4, r5, r6, lr}
   22e74:	mov	r4, r0
   22e78:	bl	11e74 <__fpending@plt>
   22e7c:	mov	r6, r0
   22e80:	mov	r0, r4
   22e84:	ldr	r4, [r4]
   22e88:	bl	23344 <close_stdout@@Base+0x80c8>
   22e8c:	and	r4, r4, #32
   22e90:	adds	r5, r0, #0
   22e94:	movne	r5, #1
   22e98:	cmp	r4, #0
   22e9c:	bne	22ebc <close_stdout@@Base+0x7c40>
   22ea0:	cmp	r5, #0
   22ea4:	beq	22eb4 <close_stdout@@Base+0x7c38>
   22ea8:	cmp	r6, #0
   22eac:	beq	22ed8 <close_stdout@@Base+0x7c5c>
   22eb0:	mvn	r4, #0
   22eb4:	mov	r0, r4
   22eb8:	pop	{r4, r5, r6, pc}
   22ebc:	cmp	r5, #0
   22ec0:	bne	22eb0 <close_stdout@@Base+0x7c34>
   22ec4:	bl	11fd0 <__errno_location@plt>
   22ec8:	mvn	r4, #0
   22ecc:	str	r5, [r0]
   22ed0:	mov	r0, r4
   22ed4:	pop	{r4, r5, r6, pc}
   22ed8:	bl	11fd0 <__errno_location@plt>
   22edc:	ldr	r4, [r0]
   22ee0:	subs	r4, r4, #9
   22ee4:	mvnne	r4, #0
   22ee8:	mov	r0, r4
   22eec:	pop	{r4, r5, r6, pc}
   22ef0:	ldr	r3, [pc, #984]	; 232d0 <close_stdout@@Base+0x8054>
   22ef4:	mov	r0, #14
   22ef8:	ldr	r2, [pc, #980]	; 232d4 <close_stdout@@Base+0x8058>
   22efc:	add	r3, pc, r3
   22f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f04:	sub	sp, sp, #132	; 0x84
   22f08:	ldr	r6, [r3, r2]
   22f0c:	ldr	r3, [r6]
   22f10:	str	r3, [sp, #124]	; 0x7c
   22f14:	bl	120b4 <nl_langinfo@plt>
   22f18:	subs	r5, r0, #0
   22f1c:	beq	22fd0 <close_stdout@@Base+0x7d54>
   22f20:	ldr	r3, [pc, #944]	; 232d8 <close_stdout@@Base+0x805c>
   22f24:	ldr	r4, [pc, r3]
   22f28:	cmp	r4, #0
   22f2c:	beq	22fdc <close_stdout@@Base+0x7d60>
   22f30:	ldrb	r7, [r4]
   22f34:	cmp	r7, #0
   22f38:	bne	22f6c <close_stdout@@Base+0x7cf0>
   22f3c:	b	22fa4 <close_stdout@@Base+0x7d28>
   22f40:	mov	r0, r4
   22f44:	bl	11fac <strlen@plt>
   22f48:	add	r0, r0, #1
   22f4c:	add	r7, r4, r0
   22f50:	mov	r0, r7
   22f54:	bl	11fac <strlen@plt>
   22f58:	add	r0, r0, #1
   22f5c:	add	r4, r7, r0
   22f60:	ldrb	r7, [r7, r0]
   22f64:	cmp	r7, #0
   22f68:	beq	22fa4 <close_stdout@@Base+0x7d28>
   22f6c:	mov	r0, r5
   22f70:	mov	r1, r4
   22f74:	bl	11c88 <strcmp@plt>
   22f78:	cmp	r0, #0
   22f7c:	beq	22f94 <close_stdout@@Base+0x7d18>
   22f80:	cmp	r7, #42	; 0x2a
   22f84:	bne	22f40 <close_stdout@@Base+0x7cc4>
   22f88:	ldrb	r3, [r4, #1]
   22f8c:	cmp	r3, #0
   22f90:	bne	22f40 <close_stdout@@Base+0x7cc4>
   22f94:	mov	r0, r4
   22f98:	bl	11fac <strlen@plt>
   22f9c:	add	r0, r0, #1
   22fa0:	add	r5, r4, r0
   22fa4:	ldrb	r3, [r5]
   22fa8:	cmp	r3, #0
   22fac:	ldreq	r5, [pc, #808]	; 232dc <close_stdout@@Base+0x8060>
   22fb0:	addeq	r5, pc, r5
   22fb4:	ldr	r2, [sp, #124]	; 0x7c
   22fb8:	mov	r0, r5
   22fbc:	ldr	r3, [r6]
   22fc0:	cmp	r2, r3
   22fc4:	bne	232a4 <close_stdout@@Base+0x8028>
   22fc8:	add	sp, sp, #132	; 0x84
   22fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fd0:	ldr	r5, [pc, #776]	; 232e0 <close_stdout@@Base+0x8064>
   22fd4:	add	r5, pc, r5
   22fd8:	b	22f20 <close_stdout@@Base+0x7ca4>
   22fdc:	ldr	r0, [pc, #768]	; 232e4 <close_stdout@@Base+0x8068>
   22fe0:	add	r0, pc, r0
   22fe4:	bl	11ed4 <getenv@plt>
   22fe8:	subs	r8, r0, #0
   22fec:	beq	2327c <close_stdout@@Base+0x8000>
   22ff0:	ldrb	r3, [r8]
   22ff4:	cmp	r3, #0
   22ff8:	beq	23210 <close_stdout@@Base+0x7f94>
   22ffc:	bl	11fac <strlen@plt>
   23000:	subs	sl, r0, #0
   23004:	subne	r3, sl, #1
   23008:	bne	23220 <close_stdout@@Base+0x7fa4>
   2300c:	mov	r9, #0
   23010:	mov	fp, r9
   23014:	add	r9, sl, r9
   23018:	add	r0, r9, #14
   2301c:	bl	11eec <malloc@plt>
   23020:	subs	r7, r0, #0
   23024:	beq	23270 <close_stdout@@Base+0x7ff4>
   23028:	mov	r1, r8
   2302c:	mov	r2, sl
   23030:	bl	11d0c <memcpy@plt>
   23034:	cmp	fp, #0
   23038:	add	ip, r7, r9
   2303c:	movne	r3, #47	; 0x2f
   23040:	strbne	r3, [r7, sl]
   23044:	ldr	r3, [pc, #668]	; 232e8 <close_stdout@@Base+0x806c>
   23048:	add	r3, pc, r3
   2304c:	ldm	r3!, {r0, r1, r2}
   23050:	ldrh	r3, [r3]
   23054:	str	r0, [r7, r9]
   23058:	mov	r0, r7
   2305c:	str	r1, [ip, #4]
   23060:	mov	r1, #32768	; 0x8000
   23064:	strh	r3, [ip, #12]
   23068:	str	r2, [ip, #8]
   2306c:	bl	11ebc <open64@plt>
   23070:	subs	r8, r0, #0
   23074:	blt	23238 <close_stdout@@Base+0x7fbc>
   23078:	ldr	r1, [pc, #620]	; 232ec <close_stdout@@Base+0x8070>
   2307c:	add	r1, pc, r1
   23080:	bl	11c34 <fdopen@plt>
   23084:	subs	fp, r0, #0
   23088:	beq	23290 <close_stdout@@Base+0x8014>
   2308c:	ldr	r0, [pc, #604]	; 232f0 <close_stdout@@Base+0x8074>
   23090:	add	sl, sp, #20
   23094:	add	r9, sp, #72	; 0x48
   23098:	mov	r8, #0
   2309c:	add	r0, pc, r0
   230a0:	str	r0, [sp, #12]
   230a4:	ldr	r3, [fp, #4]
   230a8:	ldr	r2, [fp, #8]
   230ac:	cmp	r3, r2
   230b0:	bcs	2319c <close_stdout@@Base+0x7f20>
   230b4:	add	r2, r3, #1
   230b8:	str	r2, [fp, #4]
   230bc:	ldrb	r0, [r3]
   230c0:	cmp	r0, #32
   230c4:	beq	230a4 <close_stdout@@Base+0x7e28>
   230c8:	sub	r3, r0, #9
   230cc:	cmp	r3, #1
   230d0:	bls	230a4 <close_stdout@@Base+0x7e28>
   230d4:	cmp	r0, #35	; 0x23
   230d8:	beq	231b0 <close_stdout@@Base+0x7f34>
   230dc:	mov	r1, fp
   230e0:	bl	11fc4 <ungetc@plt>
   230e4:	mov	r0, fp
   230e8:	ldr	r1, [sp, #12]
   230ec:	mov	r2, sl
   230f0:	mov	r3, r9
   230f4:	bl	12000 <fscanf@plt>
   230f8:	cmp	r0, #1
   230fc:	ble	231e0 <close_stdout@@Base+0x7f64>
   23100:	mov	r0, sl
   23104:	bl	11fac <strlen@plt>
   23108:	str	r0, [sp, #8]
   2310c:	mov	r0, r9
   23110:	bl	11fac <strlen@plt>
   23114:	cmp	r8, #0
   23118:	mov	r2, r0
   2311c:	bne	23244 <close_stdout@@Base+0x7fc8>
   23120:	ldr	r3, [sp, #8]
   23124:	str	r2, [sp]
   23128:	add	r8, r0, r3
   2312c:	add	r0, r8, #3
   23130:	add	r8, r8, #2
   23134:	bl	11eec <malloc@plt>
   23138:	ldr	r2, [sp]
   2313c:	mov	r3, r0
   23140:	cmp	r3, #0
   23144:	beq	232a8 <close_stdout@@Base+0x802c>
   23148:	ldr	r0, [sp, #8]
   2314c:	movw	r1, #65534	; 0xfffe
   23150:	movt	r1, #65535	; 0xffff
   23154:	rsb	r2, r2, r8
   23158:	rsb	r1, r0, r1
   2315c:	stm	sp, {r2, r3}
   23160:	add	r0, r1, r2
   23164:	mov	r1, sl
   23168:	add	r0, r3, r0
   2316c:	mov	r4, r3
   23170:	bl	11e5c <strcpy@plt>
   23174:	ldr	r2, [sp]
   23178:	ldr	r3, [sp, #4]
   2317c:	mov	r1, r9
   23180:	sub	r0, r2, #1
   23184:	add	r0, r3, r0
   23188:	bl	11e5c <strcpy@plt>
   2318c:	ldr	r3, [fp, #4]
   23190:	ldr	r2, [fp, #8]
   23194:	cmp	r3, r2
   23198:	bcc	230b4 <close_stdout@@Base+0x7e38>
   2319c:	mov	r0, fp
   231a0:	bl	12060 <__uflow@plt>
   231a4:	cmn	r0, #1
   231a8:	beq	231e0 <close_stdout@@Base+0x7f64>
   231ac:	b	230c0 <close_stdout@@Base+0x7e44>
   231b0:	ldr	r3, [fp, #4]
   231b4:	ldr	r2, [fp, #8]
   231b8:	cmp	r3, r2
   231bc:	bcs	232c4 <close_stdout@@Base+0x8048>
   231c0:	add	r2, r3, #1
   231c4:	str	r2, [fp, #4]
   231c8:	ldrb	r0, [r3]
   231cc:	cmp	r0, #10
   231d0:	cmnne	r0, #1
   231d4:	bne	231b0 <close_stdout@@Base+0x7f34>
   231d8:	cmn	r0, #1
   231dc:	bne	230a4 <close_stdout@@Base+0x7e28>
   231e0:	mov	r0, fp
   231e4:	bl	23344 <close_stdout@@Base+0x80c8>
   231e8:	cmp	r8, #0
   231ec:	beq	23238 <close_stdout@@Base+0x7fbc>
   231f0:	mov	r3, #0
   231f4:	strb	r3, [r4, r8]
   231f8:	mov	r0, r7
   231fc:	bl	11ce8 <free@plt>
   23200:	ldr	r3, [pc, #236]	; 232f4 <close_stdout@@Base+0x8078>
   23204:	add	r3, pc, r3
   23208:	str	r4, [r3]
   2320c:	b	22f30 <close_stdout@@Base+0x7cb4>
   23210:	ldr	r8, [pc, #224]	; 232f8 <close_stdout@@Base+0x807c>
   23214:	mov	r3, #7
   23218:	mov	sl, #8
   2321c:	add	r8, pc, r8
   23220:	ldrb	r3, [r8, r3]
   23224:	cmp	r3, #47	; 0x2f
   23228:	movne	r9, #1
   2322c:	movne	fp, r9
   23230:	bne	23014 <close_stdout@@Base+0x7d98>
   23234:	b	2300c <close_stdout@@Base+0x7d90>
   23238:	ldr	r4, [pc, #188]	; 232fc <close_stdout@@Base+0x8080>
   2323c:	add	r4, pc, r4
   23240:	b	231f8 <close_stdout@@Base+0x7f7c>
   23244:	ldr	r0, [sp, #8]
   23248:	str	r2, [sp]
   2324c:	add	r3, r0, r2
   23250:	mov	r0, r4
   23254:	add	r8, r3, r8
   23258:	add	r1, r8, #3
   2325c:	add	r8, r8, #2
   23260:	bl	11d90 <realloc@plt>
   23264:	ldr	r2, [sp]
   23268:	mov	r3, r0
   2326c:	b	23140 <close_stdout@@Base+0x7ec4>
   23270:	ldr	r4, [pc, #136]	; 23300 <close_stdout@@Base+0x8084>
   23274:	add	r4, pc, r4
   23278:	b	23200 <close_stdout@@Base+0x7f84>
   2327c:	ldr	r8, [pc, #128]	; 23304 <close_stdout@@Base+0x8088>
   23280:	mov	r3, #7
   23284:	mov	sl, #8
   23288:	add	r8, pc, r8
   2328c:	b	23220 <close_stdout@@Base+0x7fa4>
   23290:	ldr	r4, [pc, #112]	; 23308 <close_stdout@@Base+0x808c>
   23294:	mov	r0, r8
   23298:	add	r4, pc, r4
   2329c:	bl	12144 <close@plt>
   232a0:	b	231f8 <close_stdout@@Base+0x7f7c>
   232a4:	bl	11d78 <__stack_chk_fail@plt>
   232a8:	mov	r0, r4
   232ac:	ldr	r4, [pc, #88]	; 2330c <close_stdout@@Base+0x8090>
   232b0:	bl	11ce8 <free@plt>
   232b4:	mov	r0, fp
   232b8:	add	r4, pc, r4
   232bc:	bl	23344 <close_stdout@@Base+0x80c8>
   232c0:	b	231f8 <close_stdout@@Base+0x7f7c>
   232c4:	mov	r0, fp
   232c8:	bl	12060 <__uflow@plt>
   232cc:	b	231cc <close_stdout@@Base+0x7f50>
   232d0:	strdeq	r6, [r1], -ip
   232d4:	andeq	r0, r0, r0, ror #3
   232d8:	andeq	r7, r1, ip, lsr #1
   232dc:	andeq	r4, r0, ip, asr r6
   232e0:	strdeq	r3, [r0], -ip
   232e4:	andeq	r4, r0, r4, lsr r6
   232e8:	ldrdeq	r4, [r0], -ip
   232ec:	ldrdeq	r3, [r0], -ip
   232f0:	muleq	r0, r8, r5
   232f4:	andeq	r6, r1, ip, asr #27
   232f8:	andeq	r4, r0, r4, ror #7
   232fc:	muleq	r0, r4, r5
   23300:	andeq	r3, r0, ip, asr r5
   23304:	andeq	r4, r0, r8, ror r3
   23308:	andeq	r3, r0, r8, lsr r5
   2330c:	andeq	r3, r0, r8, lsl r5
   23310:	cmp	r0, #22
   23314:	beq	2333c <close_stdout@@Base+0x80c0>
   23318:	ble	23334 <close_stdout@@Base+0x80b8>
   2331c:	cmp	r0, #38	; 0x26
   23320:	beq	2333c <close_stdout@@Base+0x80c0>
   23324:	cmp	r0, #95	; 0x5f
   23328:	beq	2333c <close_stdout@@Base+0x80c0>
   2332c:	mov	r0, #1
   23330:	bx	lr
   23334:	cmp	r0, #16
   23338:	bne	2332c <close_stdout@@Base+0x80b0>
   2333c:	mov	r0, #0
   23340:	bx	lr
   23344:	push	{r4, r5, r6, lr}
   23348:	sub	sp, sp, #8
   2334c:	mov	r4, r0
   23350:	bl	12024 <fileno@plt>
   23354:	cmp	r0, #0
   23358:	mov	r0, r4
   2335c:	blt	233d8 <close_stdout@@Base+0x815c>
   23360:	bl	11f1c <__freading@plt>
   23364:	cmp	r0, #0
   23368:	bne	233a4 <close_stdout@@Base+0x8128>
   2336c:	mov	r0, r4
   23370:	bl	233e4 <close_stdout@@Base+0x8168>
   23374:	cmp	r0, #0
   23378:	beq	233d4 <close_stdout@@Base+0x8158>
   2337c:	bl	11fd0 <__errno_location@plt>
   23380:	ldr	r6, [r0]
   23384:	mov	r5, r0
   23388:	mov	r0, r4
   2338c:	bl	12048 <fclose@plt>
   23390:	cmp	r6, #0
   23394:	mvnne	r0, #0
   23398:	strne	r6, [r5]
   2339c:	add	sp, sp, #8
   233a0:	pop	{r4, r5, r6, pc}
   233a4:	mov	r0, r4
   233a8:	bl	12024 <fileno@plt>
   233ac:	mov	r1, #1
   233b0:	mov	r2, #0
   233b4:	mov	r3, #0
   233b8:	str	r1, [sp]
   233bc:	bl	11e38 <lseek64@plt>
   233c0:	mvn	r2, #0
   233c4:	mvn	r3, #0
   233c8:	cmp	r1, r3
   233cc:	cmpeq	r0, r2
   233d0:	bne	2336c <close_stdout@@Base+0x80f0>
   233d4:	mov	r0, r4
   233d8:	add	sp, sp, #8
   233dc:	pop	{r4, r5, r6, lr}
   233e0:	b	12048 <fclose@plt>
   233e4:	push	{r4, lr}
   233e8:	subs	r4, r0, #0
   233ec:	sub	sp, sp, #8
   233f0:	beq	23400 <close_stdout@@Base+0x8184>
   233f4:	bl	11f1c <__freading@plt>
   233f8:	cmp	r0, #0
   233fc:	bne	23410 <close_stdout@@Base+0x8194>
   23400:	mov	r0, r4
   23404:	add	sp, sp, #8
   23408:	pop	{r4, lr}
   2340c:	b	11cac <fflush@plt>
   23410:	ldr	r3, [r4]
   23414:	tst	r3, #256	; 0x100
   23418:	beq	23400 <close_stdout@@Base+0x8184>
   2341c:	mov	r3, #1
   23420:	mov	r0, r4
   23424:	str	r3, [sp]
   23428:	mov	r2, #0
   2342c:	mov	r3, #0
   23430:	bl	23444 <close_stdout@@Base+0x81c8>
   23434:	mov	r0, r4
   23438:	add	sp, sp, #8
   2343c:	pop	{r4, lr}
   23440:	b	11cac <fflush@plt>
   23444:	push	{r4, r5, r6, r7, lr}
   23448:	sub	sp, sp, #20
   2344c:	ldmib	r0, {r1, ip}
   23450:	mov	r6, r0
   23454:	ldr	r4, [sp, #40]	; 0x28
   23458:	cmp	ip, r1
   2345c:	beq	23474 <close_stdout@@Base+0x81f8>
   23460:	str	r4, [sp, #40]	; 0x28
   23464:	mov	r0, r6
   23468:	add	sp, sp, #20
   2346c:	pop	{r4, r5, r6, r7, lr}
   23470:	b	12054 <fseeko64@plt>
   23474:	ldr	ip, [r0, #20]
   23478:	ldr	r1, [r0, #16]
   2347c:	cmp	ip, r1
   23480:	bne	23460 <close_stdout@@Base+0x81e4>
   23484:	ldr	r7, [r0, #36]	; 0x24
   23488:	cmp	r7, #0
   2348c:	bne	23460 <close_stdout@@Base+0x81e4>
   23490:	str	r2, [sp, #12]
   23494:	mvn	r5, #0
   23498:	str	r3, [sp, #8]
   2349c:	bl	12024 <fileno@plt>
   234a0:	str	r4, [sp]
   234a4:	mvn	r4, #0
   234a8:	ldr	r2, [sp, #12]
   234ac:	ldr	r3, [sp, #8]
   234b0:	bl	11e38 <lseek64@plt>
   234b4:	mov	r2, r0
   234b8:	mov	r3, r1
   234bc:	cmp	r3, r5
   234c0:	cmpeq	r2, r4
   234c4:	beq	234e4 <close_stdout@@Base+0x8268>
   234c8:	ldr	r1, [r6]
   234cc:	mov	r0, r7
   234d0:	strd	r2, [r6, #80]	; 0x50
   234d4:	bic	r3, r1, #16
   234d8:	str	r3, [r6]
   234dc:	add	sp, sp, #20
   234e0:	pop	{r4, r5, r6, r7, pc}
   234e4:	mvn	r0, #0
   234e8:	b	234dc <close_stdout@@Base+0x8260>
   234ec:	subs	r2, r1, #1
   234f0:	bxeq	lr
   234f4:	bcc	236cc <close_stdout@@Base+0x8450>
   234f8:	cmp	r0, r1
   234fc:	bls	236b0 <close_stdout@@Base+0x8434>
   23500:	tst	r1, r2
   23504:	beq	236bc <close_stdout@@Base+0x8440>
   23508:	clz	r3, r0
   2350c:	clz	r2, r1
   23510:	sub	r3, r2, r3
   23514:	rsbs	r3, r3, #31
   23518:	addne	r3, r3, r3, lsl #1
   2351c:	mov	r2, #0
   23520:	addne	pc, pc, r3, lsl #2
   23524:	nop	{0}
   23528:	cmp	r0, r1, lsl #31
   2352c:	adc	r2, r2, r2
   23530:	subcs	r0, r0, r1, lsl #31
   23534:	cmp	r0, r1, lsl #30
   23538:	adc	r2, r2, r2
   2353c:	subcs	r0, r0, r1, lsl #30
   23540:	cmp	r0, r1, lsl #29
   23544:	adc	r2, r2, r2
   23548:	subcs	r0, r0, r1, lsl #29
   2354c:	cmp	r0, r1, lsl #28
   23550:	adc	r2, r2, r2
   23554:	subcs	r0, r0, r1, lsl #28
   23558:	cmp	r0, r1, lsl #27
   2355c:	adc	r2, r2, r2
   23560:	subcs	r0, r0, r1, lsl #27
   23564:	cmp	r0, r1, lsl #26
   23568:	adc	r2, r2, r2
   2356c:	subcs	r0, r0, r1, lsl #26
   23570:	cmp	r0, r1, lsl #25
   23574:	adc	r2, r2, r2
   23578:	subcs	r0, r0, r1, lsl #25
   2357c:	cmp	r0, r1, lsl #24
   23580:	adc	r2, r2, r2
   23584:	subcs	r0, r0, r1, lsl #24
   23588:	cmp	r0, r1, lsl #23
   2358c:	adc	r2, r2, r2
   23590:	subcs	r0, r0, r1, lsl #23
   23594:	cmp	r0, r1, lsl #22
   23598:	adc	r2, r2, r2
   2359c:	subcs	r0, r0, r1, lsl #22
   235a0:	cmp	r0, r1, lsl #21
   235a4:	adc	r2, r2, r2
   235a8:	subcs	r0, r0, r1, lsl #21
   235ac:	cmp	r0, r1, lsl #20
   235b0:	adc	r2, r2, r2
   235b4:	subcs	r0, r0, r1, lsl #20
   235b8:	cmp	r0, r1, lsl #19
   235bc:	adc	r2, r2, r2
   235c0:	subcs	r0, r0, r1, lsl #19
   235c4:	cmp	r0, r1, lsl #18
   235c8:	adc	r2, r2, r2
   235cc:	subcs	r0, r0, r1, lsl #18
   235d0:	cmp	r0, r1, lsl #17
   235d4:	adc	r2, r2, r2
   235d8:	subcs	r0, r0, r1, lsl #17
   235dc:	cmp	r0, r1, lsl #16
   235e0:	adc	r2, r2, r2
   235e4:	subcs	r0, r0, r1, lsl #16
   235e8:	cmp	r0, r1, lsl #15
   235ec:	adc	r2, r2, r2
   235f0:	subcs	r0, r0, r1, lsl #15
   235f4:	cmp	r0, r1, lsl #14
   235f8:	adc	r2, r2, r2
   235fc:	subcs	r0, r0, r1, lsl #14
   23600:	cmp	r0, r1, lsl #13
   23604:	adc	r2, r2, r2
   23608:	subcs	r0, r0, r1, lsl #13
   2360c:	cmp	r0, r1, lsl #12
   23610:	adc	r2, r2, r2
   23614:	subcs	r0, r0, r1, lsl #12
   23618:	cmp	r0, r1, lsl #11
   2361c:	adc	r2, r2, r2
   23620:	subcs	r0, r0, r1, lsl #11
   23624:	cmp	r0, r1, lsl #10
   23628:	adc	r2, r2, r2
   2362c:	subcs	r0, r0, r1, lsl #10
   23630:	cmp	r0, r1, lsl #9
   23634:	adc	r2, r2, r2
   23638:	subcs	r0, r0, r1, lsl #9
   2363c:	cmp	r0, r1, lsl #8
   23640:	adc	r2, r2, r2
   23644:	subcs	r0, r0, r1, lsl #8
   23648:	cmp	r0, r1, lsl #7
   2364c:	adc	r2, r2, r2
   23650:	subcs	r0, r0, r1, lsl #7
   23654:	cmp	r0, r1, lsl #6
   23658:	adc	r2, r2, r2
   2365c:	subcs	r0, r0, r1, lsl #6
   23660:	cmp	r0, r1, lsl #5
   23664:	adc	r2, r2, r2
   23668:	subcs	r0, r0, r1, lsl #5
   2366c:	cmp	r0, r1, lsl #4
   23670:	adc	r2, r2, r2
   23674:	subcs	r0, r0, r1, lsl #4
   23678:	cmp	r0, r1, lsl #3
   2367c:	adc	r2, r2, r2
   23680:	subcs	r0, r0, r1, lsl #3
   23684:	cmp	r0, r1, lsl #2
   23688:	adc	r2, r2, r2
   2368c:	subcs	r0, r0, r1, lsl #2
   23690:	cmp	r0, r1, lsl #1
   23694:	adc	r2, r2, r2
   23698:	subcs	r0, r0, r1, lsl #1
   2369c:	cmp	r0, r1
   236a0:	adc	r2, r2, r2
   236a4:	subcs	r0, r0, r1
   236a8:	mov	r0, r2
   236ac:	bx	lr
   236b0:	moveq	r0, #1
   236b4:	movne	r0, #0
   236b8:	bx	lr
   236bc:	clz	r2, r1
   236c0:	rsb	r2, r2, #31
   236c4:	lsr	r0, r0, r2
   236c8:	bx	lr
   236cc:	cmp	r0, #0
   236d0:	mvnne	r0, #0
   236d4:	b	23b34 <close_stdout@@Base+0x88b8>
   236d8:	cmp	r1, #0
   236dc:	beq	236cc <close_stdout@@Base+0x8450>
   236e0:	push	{r0, r1, lr}
   236e4:	bl	234ec <close_stdout@@Base+0x8270>
   236e8:	pop	{r1, r2, lr}
   236ec:	mul	r3, r2, r0
   236f0:	sub	r1, r1, r3
   236f4:	bx	lr
   236f8:	eor	r1, r1, #-2147483648	; 0x80000000
   236fc:	b	23704 <close_stdout@@Base+0x8488>
   23700:	eor	r3, r3, #-2147483648	; 0x80000000
   23704:	push	{r4, r5, lr}
   23708:	lsl	r4, r1, #1
   2370c:	lsl	r5, r3, #1
   23710:	teq	r4, r5
   23714:	teqeq	r0, r2
   23718:	orrsne	ip, r4, r0
   2371c:	orrsne	ip, r5, r2
   23720:	mvnsne	ip, r4, asr #21
   23724:	mvnsne	ip, r5, asr #21
   23728:	beq	23914 <close_stdout@@Base+0x8698>
   2372c:	lsr	r4, r4, #21
   23730:	rsbs	r5, r4, r5, lsr #21
   23734:	rsblt	r5, r5, #0
   23738:	ble	23758 <close_stdout@@Base+0x84dc>
   2373c:	add	r4, r4, r5
   23740:	eor	r2, r0, r2
   23744:	eor	r3, r1, r3
   23748:	eor	r0, r2, r0
   2374c:	eor	r1, r3, r1
   23750:	eor	r2, r0, r2
   23754:	eor	r3, r1, r3
   23758:	cmp	r5, #54	; 0x36
   2375c:	pophi	{r4, r5, pc}
   23760:	tst	r1, #-2147483648	; 0x80000000
   23764:	lsl	r1, r1, #12
   23768:	mov	ip, #1048576	; 0x100000
   2376c:	orr	r1, ip, r1, lsr #12
   23770:	beq	2377c <close_stdout@@Base+0x8500>
   23774:	rsbs	r0, r0, #0
   23778:	rsc	r1, r1, #0
   2377c:	tst	r3, #-2147483648	; 0x80000000
   23780:	lsl	r3, r3, #12
   23784:	orr	r3, ip, r3, lsr #12
   23788:	beq	23794 <close_stdout@@Base+0x8518>
   2378c:	rsbs	r2, r2, #0
   23790:	rsc	r3, r3, #0
   23794:	teq	r4, r5
   23798:	beq	238fc <close_stdout@@Base+0x8680>
   2379c:	sub	r4, r4, #1
   237a0:	rsbs	lr, r5, #32
   237a4:	blt	237c0 <close_stdout@@Base+0x8544>
   237a8:	lsl	ip, r2, lr
   237ac:	adds	r0, r0, r2, lsr r5
   237b0:	adc	r1, r1, #0
   237b4:	adds	r0, r0, r3, lsl lr
   237b8:	adcs	r1, r1, r3, asr r5
   237bc:	b	237dc <close_stdout@@Base+0x8560>
   237c0:	sub	r5, r5, #32
   237c4:	add	lr, lr, #32
   237c8:	cmp	r2, #1
   237cc:	lsl	ip, r3, lr
   237d0:	orrcs	ip, ip, #2
   237d4:	adds	r0, r0, r3, asr r5
   237d8:	adcs	r1, r1, r3, asr #31
   237dc:	and	r5, r1, #-2147483648	; 0x80000000
   237e0:	bpl	237f0 <close_stdout@@Base+0x8574>
   237e4:	rsbs	ip, ip, #0
   237e8:	rscs	r0, r0, #0
   237ec:	rsc	r1, r1, #0
   237f0:	cmp	r1, #1048576	; 0x100000
   237f4:	bcc	23834 <close_stdout@@Base+0x85b8>
   237f8:	cmp	r1, #2097152	; 0x200000
   237fc:	bcc	2381c <close_stdout@@Base+0x85a0>
   23800:	lsrs	r1, r1, #1
   23804:	rrxs	r0, r0
   23808:	rrx	ip, ip
   2380c:	add	r4, r4, #1
   23810:	lsl	r2, r4, #21
   23814:	cmn	r2, #4194304	; 0x400000
   23818:	bcs	23974 <close_stdout@@Base+0x86f8>
   2381c:	cmp	ip, #-2147483648	; 0x80000000
   23820:	lsrseq	ip, r0, #1
   23824:	adcs	r0, r0, #0
   23828:	adc	r1, r1, r4, lsl #20
   2382c:	orr	r1, r1, r5
   23830:	pop	{r4, r5, pc}
   23834:	lsls	ip, ip, #1
   23838:	adcs	r0, r0, r0
   2383c:	adc	r1, r1, r1
   23840:	tst	r1, #1048576	; 0x100000
   23844:	sub	r4, r4, #1
   23848:	bne	2381c <close_stdout@@Base+0x85a0>
   2384c:	teq	r1, #0
   23850:	moveq	r1, r0
   23854:	moveq	r0, #0
   23858:	clz	r3, r1
   2385c:	addeq	r3, r3, #32
   23860:	sub	r3, r3, #11
   23864:	subs	r2, r3, #32
   23868:	bge	2388c <close_stdout@@Base+0x8610>
   2386c:	adds	r2, r2, #12
   23870:	ble	23888 <close_stdout@@Base+0x860c>
   23874:	add	ip, r2, #20
   23878:	rsb	r2, r2, #12
   2387c:	lsl	r0, r1, ip
   23880:	lsr	r1, r1, r2
   23884:	b	2389c <close_stdout@@Base+0x8620>
   23888:	add	r2, r2, #20
   2388c:	rsble	ip, r2, #32
   23890:	lsl	r1, r1, r2
   23894:	orrle	r1, r1, r0, lsr ip
   23898:	lslle	r0, r0, r2
   2389c:	subs	r4, r4, r3
   238a0:	addge	r1, r1, r4, lsl #20
   238a4:	orrge	r1, r1, r5
   238a8:	popge	{r4, r5, pc}
   238ac:	mvn	r4, r4
   238b0:	subs	r4, r4, #31
   238b4:	bge	238f0 <close_stdout@@Base+0x8674>
   238b8:	adds	r4, r4, #12
   238bc:	bgt	238d8 <close_stdout@@Base+0x865c>
   238c0:	add	r4, r4, #20
   238c4:	rsb	r2, r4, #32
   238c8:	lsr	r0, r0, r4
   238cc:	orr	r0, r0, r1, lsl r2
   238d0:	orr	r1, r5, r1, lsr r4
   238d4:	pop	{r4, r5, pc}
   238d8:	rsb	r4, r4, #12
   238dc:	rsb	r2, r4, #32
   238e0:	lsr	r0, r0, r2
   238e4:	orr	r0, r0, r1, lsl r4
   238e8:	mov	r1, r5
   238ec:	pop	{r4, r5, pc}
   238f0:	lsr	r0, r1, r4
   238f4:	mov	r1, r5
   238f8:	pop	{r4, r5, pc}
   238fc:	teq	r4, #0
   23900:	eor	r3, r3, #1048576	; 0x100000
   23904:	eoreq	r1, r1, #1048576	; 0x100000
   23908:	addeq	r4, r4, #1
   2390c:	subne	r5, r5, #1
   23910:	b	2379c <close_stdout@@Base+0x8520>
   23914:	mvns	ip, r4, asr #21
   23918:	mvnsne	ip, r5, asr #21
   2391c:	beq	23984 <close_stdout@@Base+0x8708>
   23920:	teq	r4, r5
   23924:	teqeq	r0, r2
   23928:	beq	2393c <close_stdout@@Base+0x86c0>
   2392c:	orrs	ip, r4, r0
   23930:	moveq	r1, r3
   23934:	moveq	r0, r2
   23938:	pop	{r4, r5, pc}
   2393c:	teq	r1, r3
   23940:	movne	r1, #0
   23944:	movne	r0, #0
   23948:	popne	{r4, r5, pc}
   2394c:	lsrs	ip, r4, #21
   23950:	bne	23964 <close_stdout@@Base+0x86e8>
   23954:	lsls	r0, r0, #1
   23958:	adcs	r1, r1, r1
   2395c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   23960:	pop	{r4, r5, pc}
   23964:	adds	r4, r4, #4194304	; 0x400000
   23968:	addcc	r1, r1, #1048576	; 0x100000
   2396c:	popcc	{r4, r5, pc}
   23970:	and	r5, r1, #-2147483648	; 0x80000000
   23974:	orr	r1, r5, #2130706432	; 0x7f000000
   23978:	orr	r1, r1, #15728640	; 0xf00000
   2397c:	mov	r0, #0
   23980:	pop	{r4, r5, pc}
   23984:	mvns	ip, r4, asr #21
   23988:	movne	r1, r3
   2398c:	movne	r0, r2
   23990:	mvnseq	ip, r5, asr #21
   23994:	movne	r3, r1
   23998:	movne	r2, r0
   2399c:	orrs	r4, r0, r1, lsl #12
   239a0:	orrseq	r5, r2, r3, lsl #12
   239a4:	teqeq	r1, r3
   239a8:	orrne	r1, r1, #524288	; 0x80000
   239ac:	pop	{r4, r5, pc}
   239b0:	teq	r0, #0
   239b4:	moveq	r1, #0
   239b8:	bxeq	lr
   239bc:	push	{r4, r5, lr}
   239c0:	mov	r4, #1024	; 0x400
   239c4:	add	r4, r4, #50	; 0x32
   239c8:	mov	r5, #0
   239cc:	mov	r1, #0
   239d0:	b	2384c <close_stdout@@Base+0x85d0>
   239d4:	teq	r0, #0
   239d8:	moveq	r1, #0
   239dc:	bxeq	lr
   239e0:	push	{r4, r5, lr}
   239e4:	mov	r4, #1024	; 0x400
   239e8:	add	r4, r4, #50	; 0x32
   239ec:	ands	r5, r0, #-2147483648	; 0x80000000
   239f0:	rsbmi	r0, r0, #0
   239f4:	mov	r1, #0
   239f8:	b	2384c <close_stdout@@Base+0x85d0>
   239fc:	lsls	r2, r0, #1
   23a00:	asr	r1, r2, #3
   23a04:	rrx	r1, r1
   23a08:	lsl	r0, r2, #28
   23a0c:	andsne	r3, r2, #-16777216	; 0xff000000
   23a10:	teqne	r3, #-16777216	; 0xff000000
   23a14:	eorne	r1, r1, #939524096	; 0x38000000
   23a18:	bxne	lr
   23a1c:	teq	r2, #0
   23a20:	teqne	r3, #-16777216	; 0xff000000
   23a24:	bxeq	lr
   23a28:	push	{r4, r5, lr}
   23a2c:	mov	r4, #896	; 0x380
   23a30:	and	r5, r1, #-2147483648	; 0x80000000
   23a34:	bic	r1, r1, #-2147483648	; 0x80000000
   23a38:	b	2384c <close_stdout@@Base+0x85d0>
   23a3c:	orrs	r2, r0, r1
   23a40:	bxeq	lr
   23a44:	push	{r4, r5, lr}
   23a48:	mov	r5, #0
   23a4c:	b	23a6c <close_stdout@@Base+0x87f0>
   23a50:	orrs	r2, r0, r1
   23a54:	bxeq	lr
   23a58:	push	{r4, r5, lr}
   23a5c:	ands	r5, r1, #-2147483648	; 0x80000000
   23a60:	bpl	23a6c <close_stdout@@Base+0x87f0>
   23a64:	rsbs	r0, r0, #0
   23a68:	rsc	r1, r1, #0
   23a6c:	mov	r4, #1024	; 0x400
   23a70:	add	r4, r4, #50	; 0x32
   23a74:	lsrs	ip, r1, #22
   23a78:	beq	237f0 <close_stdout@@Base+0x8574>
   23a7c:	mov	r2, #3
   23a80:	lsrs	ip, ip, #3
   23a84:	addne	r2, r2, #3
   23a88:	lsrs	ip, ip, #3
   23a8c:	addne	r2, r2, #3
   23a90:	add	r2, r2, ip, lsr #3
   23a94:	rsb	r3, r2, #32
   23a98:	lsl	ip, r0, r3
   23a9c:	lsr	r0, r0, r2
   23aa0:	orr	r0, r0, r1, lsl r3
   23aa4:	lsr	r1, r1, r2
   23aa8:	add	r4, r4, r2
   23aac:	b	237f0 <close_stdout@@Base+0x8574>
   23ab0:	cmp	r3, #0
   23ab4:	cmpeq	r2, #0
   23ab8:	bne	23adc <close_stdout@@Base+0x8860>
   23abc:	cmp	r1, #0
   23ac0:	movlt	r1, #-2147483648	; 0x80000000
   23ac4:	movlt	r0, #0
   23ac8:	blt	23ad8 <close_stdout@@Base+0x885c>
   23acc:	cmpeq	r0, #0
   23ad0:	mvnne	r1, #-2147483648	; 0x80000000
   23ad4:	mvnne	r0, #0
   23ad8:	b	23b34 <close_stdout@@Base+0x88b8>
   23adc:	sub	sp, sp, #8
   23ae0:	push	{sp, lr}
   23ae4:	bl	23b90 <close_stdout@@Base+0x8914>
   23ae8:	ldr	lr, [sp, #4]
   23aec:	add	sp, sp, #8
   23af0:	pop	{r2, r3}
   23af4:	bx	lr
   23af8:	cmp	r3, #0
   23afc:	cmpeq	r2, #0
   23b00:	bne	23b18 <close_stdout@@Base+0x889c>
   23b04:	cmp	r1, #0
   23b08:	cmpeq	r0, #0
   23b0c:	mvnne	r1, #0
   23b10:	mvnne	r0, #0
   23b14:	b	23b34 <close_stdout@@Base+0x88b8>
   23b18:	sub	sp, sp, #8
   23b1c:	push	{sp, lr}
   23b20:	bl	23bcc <close_stdout@@Base+0x8950>
   23b24:	ldr	lr, [sp, #4]
   23b28:	add	sp, sp, #8
   23b2c:	pop	{r2, r3}
   23b30:	bx	lr
   23b34:	push	{r1, lr}
   23b38:	mov	r0, #8
   23b3c:	bl	11c70 <raise@plt>
   23b40:	pop	{r1, pc}
   23b44:	andeq	r0, r0, r0
   23b48:	vmov	d7, r0, r1
   23b4c:	vldr	d5, [pc, #44]	; 23b80 <close_stdout@@Base+0x8904>
   23b50:	vldr	d6, [pc, #48]	; 23b88 <close_stdout@@Base+0x890c>
   23b54:	mov	r0, #0
   23b58:	vmul.f64	d5, d7, d5
   23b5c:	vcvt.u32.f64	s9, d5
   23b60:	vcvt.f64.u32	d5, s9
   23b64:	vmov	r1, s9
   23b68:	vmls.f64	d7, d5, d6
   23b6c:	vcvt.u32.f64	s14, d7
   23b70:	vmov	r3, s14
   23b74:	orr	r0, r0, r3
   23b78:	bx	lr
   23b7c:	nop	{0}
   23b80:	andeq	r0, r0, r0
   23b84:	ldclcc	0, cr0, [r0]
   23b88:	andeq	r0, r0, r0
   23b8c:	mvnsmi	r0, r0
   23b90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23b94:	mov	r8, r2
   23b98:	mov	r6, r0
   23b9c:	mov	r7, r1
   23ba0:	mov	sl, r3
   23ba4:	ldr	r9, [sp, #32]
   23ba8:	bl	23c08 <close_stdout@@Base+0x898c>
   23bac:	umull	r4, r5, r8, r0
   23bb0:	mul	r8, r8, r1
   23bb4:	mla	r2, r0, sl, r8
   23bb8:	add	r5, r2, r5
   23bbc:	subs	r4, r6, r4
   23bc0:	sbc	r5, r7, r5
   23bc4:	strd	r4, [r9]
   23bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23bcc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   23bd0:	mov	r8, r2
   23bd4:	mov	r6, r0
   23bd8:	mov	r7, r1
   23bdc:	mov	r5, r3
   23be0:	ldr	r9, [sp, #32]
   23be4:	bl	24094 <close_stdout@@Base+0x8e18>
   23be8:	mul	r3, r0, r5
   23bec:	umull	r4, r5, r0, r8
   23bf0:	mla	r8, r8, r1, r3
   23bf4:	add	r5, r8, r5
   23bf8:	subs	r4, r6, r4
   23bfc:	sbc	r5, r7, r5
   23c00:	strd	r4, [r9]
   23c04:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   23c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c0c:	rsbs	r4, r0, #0
   23c10:	rsc	r5, r1, #0
   23c14:	cmp	r1, #0
   23c18:	mvn	r6, #0
   23c1c:	sub	sp, sp, #12
   23c20:	movge	r4, r0
   23c24:	movge	r5, r1
   23c28:	movge	r6, #0
   23c2c:	cmp	r3, #0
   23c30:	blt	23e68 <close_stdout@@Base+0x8bec>
   23c34:	cmp	r3, #0
   23c38:	mov	sl, r4
   23c3c:	mov	ip, r5
   23c40:	mov	r0, r2
   23c44:	mov	r1, r3
   23c48:	mov	r8, r2
   23c4c:	mov	r7, r4
   23c50:	mov	r9, r5
   23c54:	bne	23d4c <close_stdout@@Base+0x8ad0>
   23c58:	cmp	r2, r5
   23c5c:	bls	23d88 <close_stdout@@Base+0x8b0c>
   23c60:	clz	r3, r2
   23c64:	cmp	r3, #0
   23c68:	rsbne	r2, r3, #32
   23c6c:	lslne	r8, r0, r3
   23c70:	lsrne	r2, r4, r2
   23c74:	lslne	r7, r4, r3
   23c78:	orrne	r9, r2, r5, lsl r3
   23c7c:	lsr	r4, r8, #16
   23c80:	uxth	sl, r8
   23c84:	mov	r1, r4
   23c88:	mov	r0, r9
   23c8c:	bl	234ec <close_stdout@@Base+0x8270>
   23c90:	mov	r1, r4
   23c94:	mov	fp, r0
   23c98:	mov	r0, r9
   23c9c:	bl	236d8 <close_stdout@@Base+0x845c>
   23ca0:	mul	r0, sl, fp
   23ca4:	lsr	r2, r7, #16
   23ca8:	orr	r1, r2, r1, lsl #16
   23cac:	cmp	r0, r1
   23cb0:	bls	23cd4 <close_stdout@@Base+0x8a58>
   23cb4:	adds	r1, r1, r8
   23cb8:	sub	r3, fp, #1
   23cbc:	bcs	23cd0 <close_stdout@@Base+0x8a54>
   23cc0:	cmp	r0, r1
   23cc4:	subhi	fp, fp, #2
   23cc8:	addhi	r1, r1, r8
   23ccc:	bhi	23cd4 <close_stdout@@Base+0x8a58>
   23cd0:	mov	fp, r3
   23cd4:	rsb	r9, r0, r1
   23cd8:	mov	r1, r4
   23cdc:	uxth	r7, r7
   23ce0:	mov	r0, r9
   23ce4:	bl	234ec <close_stdout@@Base+0x8270>
   23ce8:	mov	r1, r4
   23cec:	mov	r5, r0
   23cf0:	mov	r0, r9
   23cf4:	bl	236d8 <close_stdout@@Base+0x845c>
   23cf8:	mul	sl, sl, r5
   23cfc:	orr	r1, r7, r1, lsl #16
   23d00:	cmp	sl, r1
   23d04:	bls	23d24 <close_stdout@@Base+0x8aa8>
   23d08:	adds	r8, r1, r8
   23d0c:	sub	r3, r5, #1
   23d10:	bcs	23d20 <close_stdout@@Base+0x8aa4>
   23d14:	cmp	sl, r8
   23d18:	subhi	r5, r5, #2
   23d1c:	bhi	23d24 <close_stdout@@Base+0x8aa8>
   23d20:	mov	r5, r3
   23d24:	orr	r3, r5, fp, lsl #16
   23d28:	mov	r4, #0
   23d2c:	cmp	r6, #0
   23d30:	mov	r0, r3
   23d34:	mov	r1, r4
   23d38:	beq	23d44 <close_stdout@@Base+0x8ac8>
   23d3c:	rsbs	r0, r0, #0
   23d40:	rsc	r1, r1, #0
   23d44:	add	sp, sp, #12
   23d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d4c:	cmp	r3, r5
   23d50:	movhi	r4, #0
   23d54:	movhi	r3, r4
   23d58:	bhi	23d2c <close_stdout@@Base+0x8ab0>
   23d5c:	clz	r5, r1
   23d60:	cmp	r5, #0
   23d64:	bne	23f54 <close_stdout@@Base+0x8cd8>
   23d68:	cmp	r1, ip
   23d6c:	cmpcs	r2, sl
   23d70:	movhi	r4, #0
   23d74:	movls	r4, #1
   23d78:	movls	r3, #1
   23d7c:	movls	r4, r5
   23d80:	movhi	r3, r4
   23d84:	b	23d2c <close_stdout@@Base+0x8ab0>
   23d88:	cmp	r2, #0
   23d8c:	bne	23da0 <close_stdout@@Base+0x8b24>
   23d90:	mov	r1, r2
   23d94:	mov	r0, #1
   23d98:	bl	234ec <close_stdout@@Base+0x8270>
   23d9c:	mov	r8, r0
   23da0:	clz	r3, r8
   23da4:	cmp	r3, #0
   23da8:	bne	23e78 <close_stdout@@Base+0x8bfc>
   23dac:	rsb	r9, r8, r9
   23db0:	lsr	r5, r8, #16
   23db4:	uxth	sl, r8
   23db8:	mov	r4, #1
   23dbc:	mov	r1, r5
   23dc0:	mov	r0, r9
   23dc4:	bl	234ec <close_stdout@@Base+0x8270>
   23dc8:	mov	r1, r5
   23dcc:	mov	fp, r0
   23dd0:	mov	r0, r9
   23dd4:	bl	236d8 <close_stdout@@Base+0x845c>
   23dd8:	mul	r0, sl, fp
   23ddc:	lsr	r2, r7, #16
   23de0:	orr	r1, r2, r1, lsl #16
   23de4:	cmp	r0, r1
   23de8:	bls	23e08 <close_stdout@@Base+0x8b8c>
   23dec:	adds	r1, r1, r8
   23df0:	sub	r3, fp, #1
   23df4:	bcs	24074 <close_stdout@@Base+0x8df8>
   23df8:	cmp	r0, r1
   23dfc:	subhi	fp, fp, #2
   23e00:	addhi	r1, r1, r8
   23e04:	bls	24074 <close_stdout@@Base+0x8df8>
   23e08:	rsb	r2, r0, r1
   23e0c:	mov	r1, r5
   23e10:	str	r2, [sp]
   23e14:	uxth	r7, r7
   23e18:	mov	r0, r2
   23e1c:	bl	234ec <close_stdout@@Base+0x8270>
   23e20:	ldr	r2, [sp]
   23e24:	mov	r1, r5
   23e28:	mov	r9, r0
   23e2c:	mov	r0, r2
   23e30:	bl	236d8 <close_stdout@@Base+0x845c>
   23e34:	mul	sl, sl, r9
   23e38:	orr	r1, r7, r1, lsl #16
   23e3c:	cmp	sl, r1
   23e40:	bls	23e60 <close_stdout@@Base+0x8be4>
   23e44:	adds	r8, r1, r8
   23e48:	sub	r3, r9, #1
   23e4c:	bcs	23e5c <close_stdout@@Base+0x8be0>
   23e50:	cmp	sl, r8
   23e54:	subhi	r9, r9, #2
   23e58:	bhi	23e60 <close_stdout@@Base+0x8be4>
   23e5c:	mov	r9, r3
   23e60:	orr	r3, r9, fp, lsl #16
   23e64:	b	23d2c <close_stdout@@Base+0x8ab0>
   23e68:	mvn	r6, r6
   23e6c:	rsbs	r2, r2, #0
   23e70:	rsc	r3, r3, #0
   23e74:	b	23c34 <close_stdout@@Base+0x89b8>
   23e78:	lsl	r8, r8, r3
   23e7c:	rsb	fp, r3, #32
   23e80:	lsr	r4, r9, fp
   23e84:	lsr	fp, r7, fp
   23e88:	lsr	r5, r8, #16
   23e8c:	orr	fp, fp, r9, lsl r3
   23e90:	mov	r0, r4
   23e94:	lsl	r7, r7, r3
   23e98:	mov	r1, r5
   23e9c:	uxth	sl, r8
   23ea0:	bl	234ec <close_stdout@@Base+0x8270>
   23ea4:	mov	r1, r5
   23ea8:	mov	r3, r0
   23eac:	mov	r0, r4
   23eb0:	str	r3, [sp]
   23eb4:	bl	236d8 <close_stdout@@Base+0x845c>
   23eb8:	ldr	r3, [sp]
   23ebc:	lsr	r2, fp, #16
   23ec0:	mul	r0, sl, r3
   23ec4:	orr	r1, r2, r1, lsl #16
   23ec8:	cmp	r0, r1
   23ecc:	bls	23eec <close_stdout@@Base+0x8c70>
   23ed0:	adds	r1, r1, r8
   23ed4:	sub	r2, r3, #1
   23ed8:	bcs	2408c <close_stdout@@Base+0x8e10>
   23edc:	cmp	r0, r1
   23ee0:	subhi	r3, r3, #2
   23ee4:	addhi	r1, r1, r8
   23ee8:	bls	2408c <close_stdout@@Base+0x8e10>
   23eec:	rsb	r9, r0, r1
   23ef0:	mov	r1, r5
   23ef4:	str	r3, [sp]
   23ef8:	uxth	fp, fp
   23efc:	mov	r0, r9
   23f00:	bl	234ec <close_stdout@@Base+0x8270>
   23f04:	mov	r1, r5
   23f08:	mov	r4, r0
   23f0c:	mov	r0, r9
   23f10:	bl	236d8 <close_stdout@@Base+0x845c>
   23f14:	mul	r9, sl, r4
   23f18:	ldr	r3, [sp]
   23f1c:	orr	r1, fp, r1, lsl #16
   23f20:	cmp	r9, r1
   23f24:	bls	23f48 <close_stdout@@Base+0x8ccc>
   23f28:	adds	r1, r1, r8
   23f2c:	sub	r2, r4, #1
   23f30:	bcs	23f44 <close_stdout@@Base+0x8cc8>
   23f34:	cmp	r9, r1
   23f38:	subhi	r4, r4, #2
   23f3c:	addhi	r1, r1, r8
   23f40:	bhi	23f48 <close_stdout@@Base+0x8ccc>
   23f44:	mov	r4, r2
   23f48:	rsb	r9, r9, r1
   23f4c:	orr	r4, r4, r3, lsl #16
   23f50:	b	23dbc <close_stdout@@Base+0x8b40>
   23f54:	rsb	sl, r5, #32
   23f58:	lsl	r3, r2, r5
   23f5c:	lsr	r0, r2, sl
   23f60:	lsr	r2, ip, sl
   23f64:	orr	r4, r0, r1, lsl r5
   23f68:	lsr	sl, r7, sl
   23f6c:	mov	r0, r2
   23f70:	orr	sl, sl, ip, lsl r5
   23f74:	lsr	r9, r4, #16
   23f78:	str	r3, [sp, #4]
   23f7c:	str	r2, [sp]
   23f80:	uxth	fp, r4
   23f84:	mov	r1, r9
   23f88:	bl	234ec <close_stdout@@Base+0x8270>
   23f8c:	ldr	r2, [sp]
   23f90:	mov	r1, r9
   23f94:	mov	r8, r0
   23f98:	mov	r0, r2
   23f9c:	bl	236d8 <close_stdout@@Base+0x845c>
   23fa0:	mul	r0, fp, r8
   23fa4:	lsr	r2, sl, #16
   23fa8:	orr	r1, r2, r1, lsl #16
   23fac:	cmp	r0, r1
   23fb0:	bls	23fd0 <close_stdout@@Base+0x8d54>
   23fb4:	adds	r1, r1, r4
   23fb8:	sub	r2, r8, #1
   23fbc:	bcs	24084 <close_stdout@@Base+0x8e08>
   23fc0:	cmp	r0, r1
   23fc4:	subhi	r8, r8, #2
   23fc8:	addhi	r1, r1, r4
   23fcc:	bls	24084 <close_stdout@@Base+0x8e08>
   23fd0:	rsb	ip, r0, r1
   23fd4:	mov	r1, r9
   23fd8:	str	ip, [sp]
   23fdc:	mov	r0, ip
   23fe0:	bl	234ec <close_stdout@@Base+0x8270>
   23fe4:	ldr	ip, [sp]
   23fe8:	mov	r1, r9
   23fec:	mov	r2, r0
   23ff0:	mov	r0, ip
   23ff4:	str	r2, [sp]
   23ff8:	bl	236d8 <close_stdout@@Base+0x845c>
   23ffc:	ldr	r2, [sp]
   24000:	uxth	ip, sl
   24004:	mul	fp, fp, r2
   24008:	orr	ip, ip, r1, lsl #16
   2400c:	cmp	fp, ip
   24010:	bls	24030 <close_stdout@@Base+0x8db4>
   24014:	adds	ip, ip, r4
   24018:	sub	r1, r2, #1
   2401c:	bcs	2407c <close_stdout@@Base+0x8e00>
   24020:	cmp	fp, ip
   24024:	subhi	r2, r2, #2
   24028:	addhi	ip, ip, r4
   2402c:	bls	2407c <close_stdout@@Base+0x8e00>
   24030:	ldr	r0, [sp, #4]
   24034:	orr	r1, r2, r8, lsl #16
   24038:	rsb	fp, fp, ip
   2403c:	umull	r2, r3, r1, r0
   24040:	cmp	fp, r3
   24044:	bcc	24068 <close_stdout@@Base+0x8dec>
   24048:	movne	r4, #0
   2404c:	moveq	r4, #1
   24050:	cmp	r2, r7, lsl r5
   24054:	movls	r4, #0
   24058:	andhi	r4, r4, #1
   2405c:	cmp	r4, #0
   24060:	moveq	r3, r1
   24064:	beq	23d2c <close_stdout@@Base+0x8ab0>
   24068:	sub	r3, r1, #1
   2406c:	mov	r4, #0
   24070:	b	23d2c <close_stdout@@Base+0x8ab0>
   24074:	mov	fp, r3
   24078:	b	23e08 <close_stdout@@Base+0x8b8c>
   2407c:	mov	r2, r1
   24080:	b	24030 <close_stdout@@Base+0x8db4>
   24084:	mov	r8, r2
   24088:	b	23fd0 <close_stdout@@Base+0x8d54>
   2408c:	mov	r3, r2
   24090:	b	23eec <close_stdout@@Base+0x8c70>
   24094:	cmp	r3, #0
   24098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2409c:	mov	r6, r0
   240a0:	sub	sp, sp, #12
   240a4:	mov	r5, r1
   240a8:	mov	r7, r0
   240ac:	mov	r4, r2
   240b0:	mov	r8, r1
   240b4:	bne	24194 <close_stdout@@Base+0x8f18>
   240b8:	cmp	r2, r1
   240bc:	bls	241d0 <close_stdout@@Base+0x8f54>
   240c0:	clz	r3, r2
   240c4:	cmp	r3, #0
   240c8:	rsbne	r8, r3, #32
   240cc:	lslne	r4, r2, r3
   240d0:	lsrne	r8, r0, r8
   240d4:	lslne	r7, r0, r3
   240d8:	orrne	r8, r8, r1, lsl r3
   240dc:	lsr	r5, r4, #16
   240e0:	uxth	sl, r4
   240e4:	mov	r1, r5
   240e8:	mov	r0, r8
   240ec:	bl	234ec <close_stdout@@Base+0x8270>
   240f0:	mov	r1, r5
   240f4:	mov	r9, r0
   240f8:	mov	r0, r8
   240fc:	bl	236d8 <close_stdout@@Base+0x845c>
   24100:	mul	r0, sl, r9
   24104:	lsr	r3, r7, #16
   24108:	orr	r1, r3, r1, lsl #16
   2410c:	cmp	r0, r1
   24110:	bls	24134 <close_stdout@@Base+0x8eb8>
   24114:	adds	r1, r1, r4
   24118:	sub	r2, r9, #1
   2411c:	bcs	24130 <close_stdout@@Base+0x8eb4>
   24120:	cmp	r0, r1
   24124:	subhi	r9, r9, #2
   24128:	addhi	r1, r1, r4
   2412c:	bhi	24134 <close_stdout@@Base+0x8eb8>
   24130:	mov	r9, r2
   24134:	rsb	r8, r0, r1
   24138:	mov	r1, r5
   2413c:	uxth	r7, r7
   24140:	mov	r0, r8
   24144:	bl	234ec <close_stdout@@Base+0x8270>
   24148:	mov	r1, r5
   2414c:	mov	r6, r0
   24150:	mov	r0, r8
   24154:	bl	236d8 <close_stdout@@Base+0x845c>
   24158:	mul	sl, sl, r6
   2415c:	orr	r1, r7, r1, lsl #16
   24160:	cmp	sl, r1
   24164:	bls	24180 <close_stdout@@Base+0x8f04>
   24168:	adds	r4, r1, r4
   2416c:	sub	r3, r6, #1
   24170:	bcs	2447c <close_stdout@@Base+0x9200>
   24174:	cmp	sl, r4
   24178:	subhi	r6, r6, #2
   2417c:	bls	2447c <close_stdout@@Base+0x9200>
   24180:	orr	r0, r6, r9, lsl #16
   24184:	mov	r6, #0
   24188:	mov	r1, r6
   2418c:	add	sp, sp, #12
   24190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24194:	cmp	r3, r1
   24198:	movhi	r6, #0
   2419c:	movhi	r0, r6
   241a0:	bhi	24188 <close_stdout@@Base+0x8f0c>
   241a4:	clz	r7, r3
   241a8:	cmp	r7, #0
   241ac:	bne	242ac <close_stdout@@Base+0x9030>
   241b0:	cmp	r3, r1
   241b4:	cmpcs	r2, r6
   241b8:	movhi	r6, #0
   241bc:	movls	r6, #1
   241c0:	movls	r0, #1
   241c4:	movls	r6, r7
   241c8:	movhi	r0, r6
   241cc:	b	24188 <close_stdout@@Base+0x8f0c>
   241d0:	cmp	r2, #0
   241d4:	bne	241e8 <close_stdout@@Base+0x8f6c>
   241d8:	mov	r1, r2
   241dc:	mov	r0, #1
   241e0:	bl	234ec <close_stdout@@Base+0x8270>
   241e4:	mov	r4, r0
   241e8:	clz	r3, r4
   241ec:	cmp	r3, #0
   241f0:	bne	243a8 <close_stdout@@Base+0x912c>
   241f4:	rsb	r5, r4, r5
   241f8:	lsr	r8, r4, #16
   241fc:	uxth	sl, r4
   24200:	mov	r6, #1
   24204:	mov	r1, r8
   24208:	mov	r0, r5
   2420c:	bl	234ec <close_stdout@@Base+0x8270>
   24210:	mov	r1, r8
   24214:	mov	r9, r0
   24218:	mov	r0, r5
   2421c:	bl	236d8 <close_stdout@@Base+0x845c>
   24220:	mul	r0, sl, r9
   24224:	lsr	r3, r7, #16
   24228:	orr	r1, r3, r1, lsl #16
   2422c:	cmp	r0, r1
   24230:	bls	24250 <close_stdout@@Base+0x8fd4>
   24234:	adds	r1, r1, r4
   24238:	sub	r2, r9, #1
   2423c:	bcs	24484 <close_stdout@@Base+0x9208>
   24240:	cmp	r0, r1
   24244:	subhi	r9, r9, #2
   24248:	addhi	r1, r1, r4
   2424c:	bls	24484 <close_stdout@@Base+0x9208>
   24250:	rsb	fp, r0, r1
   24254:	mov	r1, r8
   24258:	uxth	r7, r7
   2425c:	mov	r0, fp
   24260:	bl	234ec <close_stdout@@Base+0x8270>
   24264:	mov	r1, r8
   24268:	mov	r5, r0
   2426c:	mov	r0, fp
   24270:	bl	236d8 <close_stdout@@Base+0x845c>
   24274:	mul	sl, sl, r5
   24278:	orr	r1, r7, r1, lsl #16
   2427c:	cmp	sl, r1
   24280:	bls	2429c <close_stdout@@Base+0x9020>
   24284:	adds	r4, r1, r4
   24288:	sub	r3, r5, #1
   2428c:	bcs	2448c <close_stdout@@Base+0x9210>
   24290:	cmp	sl, r4
   24294:	subhi	r5, r5, #2
   24298:	bls	2448c <close_stdout@@Base+0x9210>
   2429c:	orr	r0, r5, r9, lsl #16
   242a0:	mov	r1, r6
   242a4:	add	sp, sp, #12
   242a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242ac:	rsb	r1, r7, #32
   242b0:	lsl	r0, r2, r7
   242b4:	lsr	r2, r2, r1
   242b8:	lsr	fp, r5, r1
   242bc:	orr	r8, r2, r3, lsl r7
   242c0:	lsr	r1, r6, r1
   242c4:	str	r0, [sp, #4]
   242c8:	orr	r5, r1, r5, lsl r7
   242cc:	lsr	r9, r8, #16
   242d0:	mov	r0, fp
   242d4:	uxth	sl, r8
   242d8:	mov	r1, r9
   242dc:	bl	234ec <close_stdout@@Base+0x8270>
   242e0:	mov	r1, r9
   242e4:	mov	r4, r0
   242e8:	mov	r0, fp
   242ec:	bl	236d8 <close_stdout@@Base+0x845c>
   242f0:	mul	r0, sl, r4
   242f4:	lsr	ip, r5, #16
   242f8:	orr	r1, ip, r1, lsl #16
   242fc:	cmp	r0, r1
   24300:	bls	24314 <close_stdout@@Base+0x9098>
   24304:	adds	r1, r1, r8
   24308:	sub	r2, r4, #1
   2430c:	bcc	244a8 <close_stdout@@Base+0x922c>
   24310:	mov	r4, r2
   24314:	rsb	ip, r0, r1
   24318:	mov	r1, r9
   2431c:	str	ip, [sp]
   24320:	uxth	r5, r5
   24324:	mov	r0, ip
   24328:	bl	234ec <close_stdout@@Base+0x8270>
   2432c:	ldr	ip, [sp]
   24330:	mov	r1, r9
   24334:	mov	fp, r0
   24338:	mov	r0, ip
   2433c:	bl	236d8 <close_stdout@@Base+0x845c>
   24340:	mul	sl, sl, fp
   24344:	orr	r1, r5, r1, lsl #16
   24348:	cmp	sl, r1
   2434c:	bls	24360 <close_stdout@@Base+0x90e4>
   24350:	adds	r1, r1, r8
   24354:	sub	r2, fp, #1
   24358:	bcc	24494 <close_stdout@@Base+0x9218>
   2435c:	mov	fp, r2
   24360:	ldr	r3, [sp, #4]
   24364:	orr	r0, fp, r4, lsl #16
   24368:	rsb	sl, sl, r1
   2436c:	umull	r4, r5, r0, r3
   24370:	cmp	sl, r5
   24374:	bcc	24394 <close_stdout@@Base+0x9118>
   24378:	movne	r3, #0
   2437c:	moveq	r3, #1
   24380:	cmp	r4, r6, lsl r7
   24384:	movls	r6, #0
   24388:	andhi	r6, r3, #1
   2438c:	cmp	r6, #0
   24390:	beq	24188 <close_stdout@@Base+0x8f0c>
   24394:	mov	r6, #0
   24398:	sub	r0, r0, #1
   2439c:	mov	r1, r6
   243a0:	add	sp, sp, #12
   243a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243a8:	lsl	r4, r4, r3
   243ac:	rsb	r9, r3, #32
   243b0:	lsr	r2, r5, r9
   243b4:	lsr	r9, r6, r9
   243b8:	lsr	r8, r4, #16
   243bc:	orr	r9, r9, r5, lsl r3
   243c0:	mov	r0, r2
   243c4:	lsl	r7, r6, r3
   243c8:	mov	r1, r8
   243cc:	str	r2, [sp]
   243d0:	bl	234ec <close_stdout@@Base+0x8270>
   243d4:	ldr	r2, [sp]
   243d8:	mov	r1, r8
   243dc:	uxth	sl, r4
   243e0:	mov	fp, r0
   243e4:	mov	r0, r2
   243e8:	bl	236d8 <close_stdout@@Base+0x845c>
   243ec:	mul	r0, sl, fp
   243f0:	lsr	r3, r9, #16
   243f4:	orr	r1, r3, r1, lsl #16
   243f8:	cmp	r0, r1
   243fc:	bls	2441c <close_stdout@@Base+0x91a0>
   24400:	adds	r1, r1, r4
   24404:	sub	r3, fp, #1
   24408:	bcs	244bc <close_stdout@@Base+0x9240>
   2440c:	cmp	r0, r1
   24410:	subhi	fp, fp, #2
   24414:	addhi	r1, r1, r4
   24418:	bls	244bc <close_stdout@@Base+0x9240>
   2441c:	rsb	r5, r0, r1
   24420:	mov	r1, r8
   24424:	uxth	r9, r9
   24428:	mov	r0, r5
   2442c:	bl	234ec <close_stdout@@Base+0x8270>
   24430:	mov	r1, r8
   24434:	mov	r6, r0
   24438:	mov	r0, r5
   2443c:	bl	236d8 <close_stdout@@Base+0x845c>
   24440:	mul	r5, sl, r6
   24444:	orr	r1, r9, r1, lsl #16
   24448:	cmp	r5, r1
   2444c:	bls	24470 <close_stdout@@Base+0x91f4>
   24450:	adds	r1, r1, r4
   24454:	sub	r3, r6, #1
   24458:	bcs	2446c <close_stdout@@Base+0x91f0>
   2445c:	cmp	r5, r1
   24460:	subhi	r6, r6, #2
   24464:	addhi	r1, r1, r4
   24468:	bhi	24470 <close_stdout@@Base+0x91f4>
   2446c:	mov	r6, r3
   24470:	rsb	r5, r5, r1
   24474:	orr	r6, r6, fp, lsl #16
   24478:	b	24204 <close_stdout@@Base+0x8f88>
   2447c:	mov	r6, r3
   24480:	b	24180 <close_stdout@@Base+0x8f04>
   24484:	mov	r9, r2
   24488:	b	24250 <close_stdout@@Base+0x8fd4>
   2448c:	mov	r5, r3
   24490:	b	2429c <close_stdout@@Base+0x9020>
   24494:	cmp	sl, r1
   24498:	subhi	fp, fp, #2
   2449c:	addhi	r1, r1, r8
   244a0:	bhi	24360 <close_stdout@@Base+0x90e4>
   244a4:	b	2435c <close_stdout@@Base+0x90e0>
   244a8:	cmp	r0, r1
   244ac:	subhi	r4, r4, #2
   244b0:	addhi	r1, r1, r8
   244b4:	bhi	24314 <close_stdout@@Base+0x9098>
   244b8:	b	24310 <close_stdout@@Base+0x9094>
   244bc:	mov	fp, r3
   244c0:	b	2441c <close_stdout@@Base+0x91a0>
   244c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   244c8:	mov	r7, r0
   244cc:	ldr	r6, [pc, #76]	; 24520 <close_stdout@@Base+0x92a4>
   244d0:	mov	r8, r1
   244d4:	ldr	r5, [pc, #72]	; 24524 <close_stdout@@Base+0x92a8>
   244d8:	mov	r9, r2
   244dc:	add	r6, pc, r6
   244e0:	bl	11c14 <_init@@Base>
   244e4:	add	r5, pc, r5
   244e8:	rsb	r6, r5, r6
   244ec:	asrs	r6, r6, #2
   244f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   244f4:	sub	r5, r5, #4
   244f8:	mov	r4, #0
   244fc:	add	r4, r4, #1
   24500:	ldr	r3, [r5, #4]!
   24504:	mov	r0, r7
   24508:	mov	r1, r8
   2450c:	mov	r2, r9
   24510:	blx	r3
   24514:	cmp	r4, r6
   24518:	bne	244fc <close_stdout@@Base+0x9280>
   2451c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   24520:	andeq	r4, r1, ip, lsl r5
   24524:	andeq	r4, r1, r0, lsl r5
   24528:	bx	lr
   2452c:	ldr	r3, [pc, #28]	; 24550 <close_stdout@@Base+0x92d4>
   24530:	mov	r1, #0
   24534:	ldr	r2, [pc, #24]	; 24554 <close_stdout@@Base+0x92d8>
   24538:	add	r3, pc, r3
   2453c:	ldr	r3, [r3, r2]
   24540:	cmp	r3, #0
   24544:	ldrne	r2, [r3]
   24548:	moveq	r2, r3
   2454c:	b	11fe8 <__cxa_atexit@plt>
   24550:	andeq	r4, r1, r0, asr #21
   24554:	andeq	r0, r0, r4, lsl #4

Disassembly of section .fini:

00024558 <_fini@@Base>:
   24558:	push	{r3, lr}
   2455c:	pop	{r3, pc}
