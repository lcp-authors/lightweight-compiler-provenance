
centos-preinstalled/kmod:     file format elf32-littlearm


Disassembly of section .init:

000116ec <.init>:
   116ec:	push	{r3, lr}
   116f0:	bl	11e38 <__assert_fail@plt+0x258>
   116f4:	pop	{r3, pc}

Disassembly of section .plt:

000116f8 <fdopen@plt-0x14>:
   116f8:	push	{lr}		; (str lr, [sp, #-4]!)
   116fc:	ldr	lr, [pc, #4]	; 11708 <fdopen@plt-0x4>
   11700:	add	lr, pc, lr
   11704:	ldr	pc, [lr, #8]!
   11708:	strdeq	sp, [r2], -r8

0001170c <fdopen@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #184320	; 0x2d000
   11714:	ldr	pc, [ip, #2296]!	; 0x8f8

00011718 <calloc@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #184320	; 0x2d000
   11720:	ldr	pc, [ip, #2288]!	; 0x8f0

00011724 <strstr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #184320	; 0x2d000
   1172c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011730 <raise@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #184320	; 0x2d000
   11738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001173c <gzclose@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #184320	; 0x2d000
   11744:	ldr	pc, [ip, #2264]!	; 0x8d8

00011748 <get_current_dir_name@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #184320	; 0x2d000
   11750:	ldr	pc, [ip, #2256]!	; 0x8d0

00011754 <strcmp@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #184320	; 0x2d000
   1175c:	ldr	pc, [ip, #2248]!	; 0x8c8

00011760 <strtol@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #184320	; 0x2d000
   11768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001176c <basename@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #184320	; 0x2d000
   11774:	ldr	pc, [ip, #2232]!	; 0x8b8

00011778 <lzma_code@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #184320	; 0x2d000
   11780:	ldr	pc, [ip, #2224]!	; 0x8b0

00011784 <secure_getenv@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #184320	; 0x2d000
   1178c:	ldr	pc, [ip, #2216]!	; 0x8a8

00011790 <read@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #184320	; 0x2d000
   11798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001179c <fflush@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #184320	; 0x2d000
   117a4:	ldr	pc, [ip, #2200]!	; 0x898

000117a8 <unlinkat@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #184320	; 0x2d000
   117b0:	ldr	pc, [ip, #2192]!	; 0x890

000117b4 <memmove@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #184320	; 0x2d000
   117bc:	ldr	pc, [ip, #2184]!	; 0x888

000117c0 <free@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #184320	; 0x2d000
   117c8:	ldr	pc, [ip, #2176]!	; 0x880

000117cc <fgets@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #184320	; 0x2d000
   117d4:	ldr	pc, [ip, #2168]!	; 0x878

000117d8 <ferror@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #184320	; 0x2d000
   117e0:	ldr	pc, [ip, #2160]!	; 0x870

000117e4 <memcpy@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #184320	; 0x2d000
   117ec:	ldr	pc, [ip, #2152]!	; 0x868

000117f0 <mmap64@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #184320	; 0x2d000
   117f8:	ldr	pc, [ip, #2144]!	; 0x860

000117fc <gzdopen@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #184320	; 0x2d000
   11804:	ldr	pc, [ip, #2136]!	; 0x858

00011808 <__strtok_r@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #184320	; 0x2d000
   11810:	ldr	pc, [ip, #2128]!	; 0x850

00011814 <ftell@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #184320	; 0x2d000
   1181c:	ldr	pc, [ip, #2120]!	; 0x848

00011820 <memcmp@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #184320	; 0x2d000
   11828:	ldr	pc, [ip, #2112]!	; 0x840

0001182c <uname@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #184320	; 0x2d000
   11834:	ldr	pc, [ip, #2104]!	; 0x838

00011838 <__stack_chk_fail@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #184320	; 0x2d000
   11840:	ldr	pc, [ip, #2096]!	; 0x830

00011844 <realloc@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #184320	; 0x2d000
   1184c:	ldr	pc, [ip, #2088]!	; 0x828

00011850 <regexec@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #184320	; 0x2d000
   11858:	ldr	pc, [ip, #2080]!	; 0x820

0001185c <__fxstatat64@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #184320	; 0x2d000
   11864:	ldr	pc, [ip, #2072]!	; 0x818

00011868 <__fxstat64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #184320	; 0x2d000
   11870:	ldr	pc, [ip, #2064]!	; 0x810

00011874 <__memcpy_chk@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #184320	; 0x2d000
   1187c:	ldr	pc, [ip, #2056]!	; 0x808

00011880 <_IO_putc@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #184320	; 0x2d000
   11888:	ldr	pc, [ip, #2048]!	; 0x800

0001188c <fwrite@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #184320	; 0x2d000
   11894:	ldr	pc, [ip, #2040]!	; 0x7f8

00011898 <lseek64@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #184320	; 0x2d000
   118a0:	ldr	pc, [ip, #2032]!	; 0x7f0

000118a4 <regfree@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #184320	; 0x2d000
   118ac:	ldr	pc, [ip, #2024]!	; 0x7e8

000118b0 <__strcpy_chk@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #184320	; 0x2d000
   118b8:	ldr	pc, [ip, #2016]!	; 0x7e0

000118bc <fread@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #184320	; 0x2d000
   118c4:	ldr	pc, [ip, #2008]!	; 0x7d8

000118c8 <opendir@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #184320	; 0x2d000
   118d0:	ldr	pc, [ip, #2000]!	; 0x7d0

000118d4 <fnmatch@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #184320	; 0x2d000
   118dc:	ldr	pc, [ip, #1992]!	; 0x7c8

000118e0 <open64@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #184320	; 0x2d000
   118e8:	ldr	pc, [ip, #1984]!	; 0x7c0

000118ec <__asprintf_chk@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #184320	; 0x2d000
   118f4:	ldr	pc, [ip, #1976]!	; 0x7b8

000118f8 <getenv@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #184320	; 0x2d000
   11900:	ldr	pc, [ip, #1968]!	; 0x7b0

00011904 <puts@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #184320	; 0x2d000
   1190c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011910 <malloc@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #184320	; 0x2d000
   11918:	ldr	pc, [ip, #1952]!	; 0x7a0

0001191c <__libc_start_main@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #184320	; 0x2d000
   11924:	ldr	pc, [ip, #1944]!	; 0x798

00011928 <strerror@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #184320	; 0x2d000
   11930:	ldr	pc, [ip, #1936]!	; 0x790

00011934 <system@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #184320	; 0x2d000
   1193c:	ldr	pc, [ip, #1928]!	; 0x788

00011940 <__vfprintf_chk@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #184320	; 0x2d000
   11948:	ldr	pc, [ip, #1920]!	; 0x780

0001194c <gzread@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #184320	; 0x2d000
   11954:	ldr	pc, [ip, #1912]!	; 0x778

00011958 <closelog@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #184320	; 0x2d000
   11960:	ldr	pc, [ip, #1904]!	; 0x770

00011964 <__gmon_start__@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #184320	; 0x2d000
   1196c:	ldr	pc, [ip, #1896]!	; 0x768

00011970 <getopt_long@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #184320	; 0x2d000
   11978:	ldr	pc, [ip, #1888]!	; 0x760

0001197c <__ctype_b_loc@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #184320	; 0x2d000
   11984:	ldr	pc, [ip, #1880]!	; 0x758

00011988 <exit@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #184320	; 0x2d000
   11990:	ldr	pc, [ip, #1872]!	; 0x750

00011994 <syscall@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #184320	; 0x2d000
   1199c:	ldr	pc, [ip, #1864]!	; 0x748

000119a0 <strlen@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #184320	; 0x2d000
   119a8:	ldr	pc, [ip, #1856]!	; 0x740

000119ac <strchr@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #184320	; 0x2d000
   119b4:	ldr	pc, [ip, #1848]!	; 0x738

000119b8 <setenv@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #184320	; 0x2d000
   119c0:	ldr	pc, [ip, #1840]!	; 0x730

000119c4 <openat64@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #184320	; 0x2d000
   119cc:	ldr	pc, [ip, #1832]!	; 0x728

000119d0 <lzma_stream_decoder@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #184320	; 0x2d000
   119d8:	ldr	pc, [ip, #1824]!	; 0x720

000119dc <lzma_end@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #184320	; 0x2d000
   119e4:	ldr	pc, [ip, #1816]!	; 0x718

000119e8 <__gcc_personality_v0@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #184320	; 0x2d000
   119f0:	ldr	pc, [ip, #1808]!	; 0x710

000119f4 <__errno_location@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #184320	; 0x2d000
   119fc:	ldr	pc, [ip, #1800]!	; 0x708

00011a00 <__sprintf_chk@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #184320	; 0x2d000
   11a08:	ldr	pc, [ip, #1792]!	; 0x700

00011a0c <__vasprintf_chk@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #184320	; 0x2d000
   11a14:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a18 <__strdup@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #184320	; 0x2d000
   11a20:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a24 <mkdir@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #184320	; 0x2d000
   11a2c:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a30 <gzerror@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #184320	; 0x2d000
   11a38:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a3c <memset@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #184320	; 0x2d000
   11a44:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a48 <bsearch@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #184320	; 0x2d000
   11a50:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a54 <strtoull@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #184320	; 0x2d000
   11a5c:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a60 <__printf_chk@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #184320	; 0x2d000
   11a68:	ldr	pc, [ip, #1728]!	; 0x6c0

00011a6c <write@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #184320	; 0x2d000
   11a74:	ldr	pc, [ip, #1720]!	; 0x6b8

00011a78 <__fprintf_chk@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #184320	; 0x2d000
   11a80:	ldr	pc, [ip, #1712]!	; 0x6b0

00011a84 <fclose@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #184320	; 0x2d000
   11a8c:	ldr	pc, [ip, #1704]!	; 0x6a8

00011a90 <strnlen@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #184320	; 0x2d000
   11a98:	ldr	pc, [ip, #1696]!	; 0x6a0

00011a9c <munmap@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #184320	; 0x2d000
   11aa4:	ldr	pc, [ip, #1688]!	; 0x698

00011aa8 <strtok@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #184320	; 0x2d000
   11ab0:	ldr	pc, [ip, #1680]!	; 0x690

00011ab4 <__syslog_chk@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #184320	; 0x2d000
   11abc:	ldr	pc, [ip, #1672]!	; 0x688

00011ac0 <__uflow@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #184320	; 0x2d000
   11ac8:	ldr	pc, [ip, #1664]!	; 0x680

00011acc <strrchr@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #184320	; 0x2d000
   11ad4:	ldr	pc, [ip, #1656]!	; 0x678

00011ad8 <delete_module@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #184320	; 0x2d000
   11ae0:	ldr	pc, [ip, #1648]!	; 0x670

00011ae4 <fputc@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #184320	; 0x2d000
   11aec:	ldr	pc, [ip, #1640]!	; 0x668

00011af0 <sscanf@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #184320	; 0x2d000
   11af8:	ldr	pc, [ip, #1632]!	; 0x660

00011afc <readdir64@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #184320	; 0x2d000
   11b04:	ldr	pc, [ip, #1624]!	; 0x658

00011b08 <fdopendir@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #184320	; 0x2d000
   11b10:	ldr	pc, [ip, #1616]!	; 0x650

00011b14 <openlog@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #184320	; 0x2d000
   11b1c:	ldr	pc, [ip, #1608]!	; 0x648

00011b20 <regcomp@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #184320	; 0x2d000
   11b28:	ldr	pc, [ip, #1600]!	; 0x640

00011b2c <init_module@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #184320	; 0x2d000
   11b34:	ldr	pc, [ip, #1592]!	; 0x638

00011b38 <dirfd@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #184320	; 0x2d000
   11b40:	ldr	pc, [ip, #1584]!	; 0x630

00011b44 <fopen64@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #184320	; 0x2d000
   11b4c:	ldr	pc, [ip, #1576]!	; 0x628

00011b50 <qsort@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #184320	; 0x2d000
   11b58:	ldr	pc, [ip, #1568]!	; 0x620

00011b5c <renameat@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #184320	; 0x2d000
   11b64:	ldr	pc, [ip, #1560]!	; 0x618

00011b68 <fseek@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #184320	; 0x2d000
   11b70:	ldr	pc, [ip, #1552]!	; 0x610

00011b74 <__xstat64@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #184320	; 0x2d000
   11b7c:	ldr	pc, [ip, #1544]!	; 0x608

00011b80 <unsetenv@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #184320	; 0x2d000
   11b88:	ldr	pc, [ip, #1536]!	; 0x600

00011b8c <_Unwind_Resume@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #184320	; 0x2d000
   11b94:	ldr	pc, [ip, #1528]!	; 0x5f8

00011b98 <fputs@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #184320	; 0x2d000
   11ba0:	ldr	pc, [ip, #1520]!	; 0x5f0

00011ba4 <strncmp@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #184320	; 0x2d000
   11bac:	ldr	pc, [ip, #1512]!	; 0x5e8

00011bb0 <abort@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #184320	; 0x2d000
   11bb8:	ldr	pc, [ip, #1504]!	; 0x5e0

00011bbc <close@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #184320	; 0x2d000
   11bc4:	ldr	pc, [ip, #1496]!	; 0x5d8

00011bc8 <closedir@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #184320	; 0x2d000
   11bd0:	ldr	pc, [ip, #1488]!	; 0x5d0

00011bd4 <__snprintf_chk@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #184320	; 0x2d000
   11bdc:	ldr	pc, [ip, #1480]!	; 0x5c8

00011be0 <__assert_fail@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #184320	; 0x2d000
   11be8:	ldr	pc, [ip, #1472]!	; 0x5c0

Disassembly of section .text:

00011bec <.text>:
   11bec:	push	{r3, lr}
   11bf0:	mov	r2, #213	; 0xd5
   11bf4:	ldr	r0, [pc, #20]	; 11c10 <__assert_fail@plt+0x30>
   11bf8:	ldr	r1, [pc, #20]	; 11c14 <__assert_fail@plt+0x34>
   11bfc:	ldr	r3, [pc, #20]	; 11c18 <__assert_fail@plt+0x38>
   11c00:	add	r0, pc, r0
   11c04:	add	r1, pc, r1
   11c08:	add	r3, pc, r3
   11c0c:	bl	11be0 <__assert_fail@plt>
   11c10:	andeq	ip, r1, r4, ror #2
   11c14:	andeq	ip, r1, ip, lsr #2
   11c18:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   11c1c:	movw	r3, #61936	; 0xf1f0
   11c20:	movt	r3, #3
   11c24:	push	{r4, r5, r6, r7, r8, r9, lr}
   11c28:	mov	r8, r1
   11c2c:	sub	sp, sp, #12
   11c30:	mov	r9, r0
   11c34:	movw	r1, #38992	; 0x9850
   11c38:	ldr	r0, [r3]
   11c3c:	movt	r1, #2
   11c40:	bl	11754 <strcmp@plt>
   11c44:	subs	r4, r0, #0
   11c48:	beq	11c8c <__assert_fail@plt+0xac>
   11c4c:	ldr	r0, [r8]
   11c50:	bl	1176c <basename@plt>
   11c54:	ldr	r4, [pc, #412]	; 11df8 <__assert_fail@plt+0x218>
   11c58:	add	r7, r4, #24
   11c5c:	mov	r6, r0
   11c60:	ldr	r5, [r4, #4]!
   11c64:	mov	r1, r6
   11c68:	ldr	r0, [r5]
   11c6c:	bl	11754 <strcmp@plt>
   11c70:	cmp	r0, #0
   11c74:	beq	11d08 <__assert_fail@plt+0x128>
   11c78:	cmp	r4, r7
   11c7c:	bne	11c60 <__assert_fail@plt+0x80>
   11c80:	mvn	r0, #1
   11c84:	add	sp, sp, #12
   11c88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11c8c:	str	r4, [sp]
   11c90:	movw	r2, #38692	; 0x9724
   11c94:	movw	r3, #39136	; 0x98e0
   11c98:	movt	r2, #2
   11c9c:	movt	r3, #2
   11ca0:	mov	r0, r9
   11ca4:	mov	r1, r8
   11ca8:	bl	11970 <getopt_long@plt>
   11cac:	cmn	r0, #1
   11cb0:	beq	11d1c <__assert_fail@plt+0x13c>
   11cb4:	cmp	r0, #86	; 0x56
   11cb8:	beq	11d94 <__assert_fail@plt+0x1b4>
   11cbc:	cmp	r0, #104	; 0x68
   11cc0:	beq	11cf4 <__assert_fail@plt+0x114>
   11cc4:	cmp	r0, #63	; 0x3f
   11cc8:	beq	11da8 <__assert_fail@plt+0x1c8>
   11ccc:	movw	r1, #61956	; 0xf204
   11cd0:	movt	r1, #3
   11cd4:	mov	r3, r0
   11cd8:	movw	r2, #39016	; 0x9868
   11cdc:	ldr	r0, [r1]
   11ce0:	movt	r2, #2
   11ce4:	mov	r1, #1
   11ce8:	bl	11a78 <__fprintf_chk@plt>
   11cec:	mov	r0, #1
   11cf0:	b	11c84 <__assert_fail@plt+0xa4>
   11cf4:	mov	r0, r9
   11cf8:	mov	r1, r8
   11cfc:	bl	11f30 <__assert_fail@plt+0x350>
   11d00:	mov	r0, r4
   11d04:	b	11c84 <__assert_fail@plt+0xa4>
   11d08:	ldr	r3, [r5, #4]
   11d0c:	mov	r0, r9
   11d10:	mov	r1, r8
   11d14:	blx	r3
   11d18:	b	11c84 <__assert_fail@plt+0xa4>
   11d1c:	movw	r3, #61952	; 0xf200
   11d20:	movt	r3, #3
   11d24:	ldr	r3, [r3]
   11d28:	cmp	r9, r3
   11d2c:	ble	11db0 <__assert_fail@plt+0x1d0>
   11d30:	ldr	r7, [r8, r3, lsl #2]
   11d34:	movw	r5, #38668	; 0x970c
   11d38:	movt	r5, #2
   11d3c:	ldr	r6, [r5, r4]
   11d40:	mov	r1, r7
   11d44:	add	r4, r4, #4
   11d48:	ldr	r0, [r6]
   11d4c:	bl	11754 <strcmp@plt>
   11d50:	cmp	r0, #0
   11d54:	beq	11dd4 <__assert_fail@plt+0x1f4>
   11d58:	cmp	r4, #12
   11d5c:	bne	11d3c <__assert_fail@plt+0x15c>
   11d60:	movw	r1, #61956	; 0xf204
   11d64:	movt	r1, #3
   11d68:	movw	r2, #39084	; 0x98ac
   11d6c:	mov	r3, r7
   11d70:	ldr	r0, [r1]
   11d74:	movt	r2, #2
   11d78:	mov	r1, #1
   11d7c:	bl	11a78 <__fprintf_chk@plt>
   11d80:	mov	r0, r9
   11d84:	mov	r1, r8
   11d88:	bl	11f30 <__assert_fail@plt+0x350>
   11d8c:	mov	r0, #1
   11d90:	b	11c84 <__assert_fail@plt+0xa4>
   11d94:	movw	r0, #39000	; 0x9858
   11d98:	movt	r0, #2
   11d9c:	bl	11904 <puts@plt>
   11da0:	mov	r0, r4
   11da4:	b	11c84 <__assert_fail@plt+0xa4>
   11da8:	mov	r0, #1
   11dac:	b	11c84 <__assert_fail@plt+0xa4>
   11db0:	movw	r3, #61956	; 0xf204
   11db4:	movt	r3, #3
   11db8:	movw	r0, #39064	; 0x9898
   11dbc:	mov	r1, #1
   11dc0:	ldr	r3, [r3]
   11dc4:	mov	r2, #16
   11dc8:	movt	r0, #2
   11dcc:	bl	1188c <fwrite@plt>
   11dd0:	b	11d80 <__assert_fail@plt+0x1a0>
   11dd4:	sub	r9, r9, #1
   11dd8:	add	r8, r8, #4
   11ddc:	ldr	r3, [r6, #4]
   11de0:	mov	r0, r9
   11de4:	mov	r1, r8
   11de8:	blx	r3
   11dec:	cmp	r0, #0
   11df0:	bge	11c84 <__assert_fail@plt+0xa4>
   11df4:	b	11d60 <__assert_fail@plt+0x180>
   11df8:	andeq	r9, r2, r4, lsr #14
   11dfc:	mov	fp, #0
   11e00:	mov	lr, #0
   11e04:	pop	{r1}		; (ldr r1, [sp], #4)
   11e08:	mov	r2, sp
   11e0c:	push	{r2}		; (str r2, [sp, #-4]!)
   11e10:	push	{r0}		; (str r0, [sp, #-4]!)
   11e14:	ldr	ip, [pc, #16]	; 11e2c <__assert_fail@plt+0x24c>
   11e18:	push	{ip}		; (str ip, [sp, #-4]!)
   11e1c:	ldr	r0, [pc, #12]	; 11e30 <__assert_fail@plt+0x250>
   11e20:	ldr	r3, [pc, #12]	; 11e34 <__assert_fail@plt+0x254>
   11e24:	bl	1191c <__libc_start_main@plt>
   11e28:	bl	11bb0 <abort@plt>
   11e2c:	andeq	r9, r2, r0, lsl #14
   11e30:	andeq	r1, r1, ip, lsl ip
   11e34:	muleq	r2, ip, r6
   11e38:	ldr	r3, [pc, #20]	; 11e54 <__assert_fail@plt+0x274>
   11e3c:	ldr	r2, [pc, #20]	; 11e58 <__assert_fail@plt+0x278>
   11e40:	add	r3, pc, r3
   11e44:	ldr	r2, [r3, r2]
   11e48:	cmp	r2, #0
   11e4c:	bxeq	lr
   11e50:	b	11964 <__gmon_start__@plt>
   11e54:			; <UNDEFINED> instruction: 0x0002d1b8
   11e58:			; <UNDEFINED> instruction: 0x000001b4
   11e5c:	push	{r3, lr}
   11e60:	movw	r0, #61936	; 0xf1f0
   11e64:	ldr	r3, [pc, #36]	; 11e90 <__assert_fail@plt+0x2b0>
   11e68:	movt	r0, #3
   11e6c:	rsb	r3, r0, r3
   11e70:	cmp	r3, #6
   11e74:	popls	{r3, pc}
   11e78:	movw	r3, #0
   11e7c:	movt	r3, #0
   11e80:	cmp	r3, #0
   11e84:	popeq	{r3, pc}
   11e88:	blx	r3
   11e8c:	pop	{r3, pc}
   11e90:	strdeq	pc, [r3], -r3
   11e94:	push	{r3, lr}
   11e98:	movw	r0, #61936	; 0xf1f0
   11e9c:	movw	r3, #61936	; 0xf1f0
   11ea0:	movt	r0, #3
   11ea4:	movt	r3, #3
   11ea8:	rsb	r3, r0, r3
   11eac:	asr	r3, r3, #2
   11eb0:	add	r3, r3, r3, lsr #31
   11eb4:	asrs	r1, r3, #1
   11eb8:	popeq	{r3, pc}
   11ebc:	movw	r2, #0
   11ec0:	movt	r2, #0
   11ec4:	cmp	r2, #0
   11ec8:	popeq	{r3, pc}
   11ecc:	blx	r2
   11ed0:	pop	{r3, pc}
   11ed4:	push	{r4, lr}
   11ed8:	movw	r4, #61972	; 0xf214
   11edc:	movt	r4, #3
   11ee0:	ldrb	r3, [r4]
   11ee4:	cmp	r3, #0
   11ee8:	popne	{r4, pc}
   11eec:	bl	11e5c <__assert_fail@plt+0x27c>
   11ef0:	mov	r3, #1
   11ef4:	strb	r3, [r4]
   11ef8:	pop	{r4, pc}
   11efc:	movw	r0, #61004	; 0xee4c
   11f00:	movt	r0, #3
   11f04:	push	{r3, lr}
   11f08:	ldr	r3, [r0]
   11f0c:	cmp	r3, #0
   11f10:	beq	11f28 <__assert_fail@plt+0x348>
   11f14:	movw	r3, #0
   11f18:	movt	r3, #0
   11f1c:	cmp	r3, #0
   11f20:	beq	11f28 <__assert_fail@plt+0x348>
   11f24:	blx	r3
   11f28:	pop	{r3, lr}
   11f2c:	b	11e94 <__assert_fail@plt+0x2b4>
   11f30:	push	{r3, r4, r5, lr}
   11f34:	ldr	r0, [r1]
   11f38:	bl	1176c <basename@plt>
   11f3c:	movw	r1, #38720	; 0x9740
   11f40:	movt	r1, #2
   11f44:	ldr	r4, [pc, #128]	; 11fcc <__assert_fail@plt+0x3ec>
   11f48:	add	r5, r4, #12
   11f4c:	mov	r2, r0
   11f50:	mov	r0, #1
   11f54:	bl	11a60 <__printf_chk@plt>
   11f58:	ldr	r2, [r4, #4]!
   11f5c:	movw	r1, #38912	; 0x9800
   11f60:	mov	r0, #1
   11f64:	movt	r1, #2
   11f68:	ldr	r3, [r2, #8]
   11f6c:	cmp	r3, #0
   11f70:	beq	11f7c <__assert_fail@plt+0x39c>
   11f74:	ldr	r2, [r2]
   11f78:	bl	11a60 <__printf_chk@plt>
   11f7c:	cmp	r4, r5
   11f80:	bne	11f58 <__assert_fail@plt+0x378>
   11f84:	movw	r0, #38924	; 0x980c
   11f88:	movt	r0, #2
   11f8c:	bl	11904 <puts@plt>
   11f90:	ldr	r4, [pc, #56]	; 11fd0 <__assert_fail@plt+0x3f0>
   11f94:	add	r5, r4, #24
   11f98:	ldr	r2, [r4, #4]!
   11f9c:	movw	r1, #38912	; 0x9800
   11fa0:	mov	r0, #1
   11fa4:	movt	r1, #2
   11fa8:	ldr	r3, [r2, #8]
   11fac:	cmp	r3, #0
   11fb0:	beq	11fbc <__assert_fail@plt+0x3dc>
   11fb4:	ldr	r2, [r2]
   11fb8:	bl	11a60 <__printf_chk@plt>
   11fbc:	cmp	r4, r5
   11fc0:	bne	11f98 <__assert_fail@plt+0x3b8>
   11fc4:	mov	r0, #0
   11fc8:	pop	{r3, r4, r5, pc}
   11fcc:	andeq	r9, r2, r8, lsl #14
   11fd0:	andeq	r9, r2, r4, lsr #14
   11fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fd8:	movw	sl, #61944	; 0xf1f8
   11fdc:	movt	sl, #3
   11fe0:	sub	sp, sp, #36	; 0x24
   11fe4:	cmp	r0, #1
   11fe8:	mov	r4, r0
   11fec:	ldr	r2, [sl]
   11ff0:	mov	r0, #0
   11ff4:	str	r0, [sp, #20]
   11ff8:	str	r2, [sp, #28]
   11ffc:	beq	1203c <__assert_fail@plt+0x45c>
   12000:	movw	r0, #61956	; 0xf204
   12004:	movt	r0, #3
   12008:	ldr	r3, [r1]
   1200c:	movw	r2, #39196	; 0x991c
   12010:	ldr	r0, [r0]
   12014:	movt	r2, #2
   12018:	mov	r1, #1
   1201c:	bl	11a78 <__fprintf_chk@plt>
   12020:	mov	r0, #1
   12024:	ldr	r2, [sp, #28]
   12028:	ldr	r3, [sl]
   1202c:	cmp	r2, r3
   12030:	bne	121e8 <__assert_fail@plt+0x608>
   12034:	add	sp, sp, #36	; 0x24
   12038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1203c:	add	r1, sp, #20
   12040:	bl	1bf20 <__assert_fail@plt+0xa340>
   12044:	subs	r3, r0, #0
   12048:	str	r3, [sp, #12]
   1204c:	beq	121b8 <__assert_fail@plt+0x5d8>
   12050:	add	r1, sp, #24
   12054:	bl	21d0c <__assert_fail@plt+0x1012c>
   12058:	cmp	r0, #0
   1205c:	blt	1217c <__assert_fail@plt+0x59c>
   12060:	movw	r0, #39280	; 0x9970
   12064:	movt	r0, #2
   12068:	bl	11904 <puts@plt>
   1206c:	ldr	r9, [sp, #24]
   12070:	cmp	r9, #0
   12074:	beq	121e0 <__assert_fail@plt+0x600>
   12078:	movw	r6, #61960	; 0xf208
   1207c:	movt	r6, #3
   12080:	mov	r0, r9
   12084:	bl	21034 <__assert_fail@plt+0xf454>
   12088:	mov	r8, r0
   1208c:	bl	21044 <__assert_fail@plt+0xf464>
   12090:	mov	r4, r0
   12094:	mov	r0, r8
   12098:	bl	22dd4 <__assert_fail@plt+0x111f4>
   1209c:	mov	r5, r0
   120a0:	mov	r0, r8
   120a4:	bl	229e0 <__assert_fail@plt+0x10e00>
   120a8:	mov	r2, r4
   120ac:	str	r5, [sp]
   120b0:	movw	r1, #39320	; 0x9998
   120b4:	movt	r1, #2
   120b8:	mov	r3, r0
   120bc:	mov	r0, #1
   120c0:	bl	11a60 <__printf_chk@plt>
   120c4:	mov	r0, r8
   120c8:	bl	22f38 <__assert_fail@plt+0x11358>
   120cc:	subs	r7, r0, #0
   120d0:	movne	r4, r7
   120d4:	movne	r5, #1
   120d8:	bne	12110 <__assert_fail@plt+0x530>
   120dc:	b	12134 <__assert_fail@plt+0x554>
   120e0:	mov	r0, fp
   120e4:	bl	21044 <__assert_fail@plt+0xf464>
   120e8:	ldr	r1, [r6]
   120ec:	bl	11b98 <fputs@plt>
   120f0:	mov	r0, fp
   120f4:	bl	20b98 <__assert_fail@plt+0xefb8>
   120f8:	mov	r1, r4
   120fc:	mov	r0, r7
   12100:	bl	1d0f4 <__assert_fail@plt+0xb514>
   12104:	subs	r4, r0, #0
   12108:	beq	12134 <__assert_fail@plt+0x554>
   1210c:	mov	r5, #0
   12110:	mov	r0, r4
   12114:	bl	21034 <__assert_fail@plt+0xf454>
   12118:	cmp	r5, #0
   1211c:	mov	fp, r0
   12120:	bne	120e0 <__assert_fail@plt+0x500>
   12124:	ldr	r1, [r6]
   12128:	mov	r0, #44	; 0x2c
   1212c:	bl	11880 <_IO_putc@plt>
   12130:	b	120e0 <__assert_fail@plt+0x500>
   12134:	ldr	r1, [r6]
   12138:	mov	r0, #10
   1213c:	bl	11880 <_IO_putc@plt>
   12140:	mov	r0, r7
   12144:	bl	207dc <__assert_fail@plt+0xebfc>
   12148:	mov	r0, r8
   1214c:	bl	20b98 <__assert_fail@plt+0xefb8>
   12150:	mov	r1, r9
   12154:	ldr	r0, [sp, #24]
   12158:	bl	1d0f4 <__assert_fail@plt+0xb514>
   1215c:	subs	r9, r0, #0
   12160:	bne	12080 <__assert_fail@plt+0x4a0>
   12164:	ldr	r0, [sp, #24]
   12168:	bl	207dc <__assert_fail@plt+0xebfc>
   1216c:	ldr	r0, [sp, #12]
   12170:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   12174:	mov	r0, #0
   12178:	b	12024 <__assert_fail@plt+0x444>
   1217c:	movw	r3, #61956	; 0xf204
   12180:	movt	r3, #3
   12184:	rsb	r0, r0, #0
   12188:	ldr	r5, [r3]
   1218c:	bl	11928 <strerror@plt>
   12190:	mov	r1, r4
   12194:	movw	r2, #39236	; 0x9944
   12198:	movt	r2, #2
   1219c:	mov	r3, r0
   121a0:	mov	r0, r5
   121a4:	bl	11a78 <__fprintf_chk@plt>
   121a8:	ldr	r0, [sp, #12]
   121ac:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   121b0:	mov	r0, r4
   121b4:	b	12024 <__assert_fail@plt+0x444>
   121b8:	movw	r3, #61956	; 0xf204
   121bc:	movt	r3, #3
   121c0:	movw	r0, #39208	; 0x9928
   121c4:	mov	r1, r4
   121c8:	ldr	r3, [r3]
   121cc:	movt	r0, #2
   121d0:	mov	r2, #26
   121d4:	bl	1188c <fwrite@plt>
   121d8:	mov	r0, r4
   121dc:	b	12024 <__assert_fail@plt+0x444>
   121e0:	mov	r0, r9
   121e4:	b	12168 <__assert_fail@plt+0x588>
   121e8:	bl	11838 <__stack_chk_fail@plt>
   121ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121f0:	movw	r4, #61944	; 0xf1f8
   121f4:	movt	r4, #3
   121f8:	sub	sp, sp, #164	; 0xa4
   121fc:	mov	r3, #0
   12200:	movw	fp, #61880	; 0xf1b8
   12204:	ldr	r2, [r4]
   12208:	movw	r9, #61976	; 0xf218
   1220c:	movt	fp, #3
   12210:	add	r6, sp, #48	; 0x30
   12214:	movt	r9, #3
   12218:	mov	r7, r3
   1221c:	mov	r5, r0
   12220:	mov	r8, r1
   12224:	mov	sl, r3
   12228:	str	r2, [sp, #156]	; 0x9c
   1222c:	str	r3, [sp, #40]	; 0x28
   12230:	str	r6, [sp]
   12234:	movw	r2, #39528	; 0x9a68
   12238:	movw	r3, #39432	; 0x9a08
   1223c:	movt	r2, #2
   12240:	movt	r3, #2
   12244:	mov	r0, r5
   12248:	mov	r1, r8
   1224c:	str	sl, [sp, #48]	; 0x30
   12250:	bl	11970 <getopt_long@plt>
   12254:	cmn	r0, #1
   12258:	beq	123e4 <__assert_fail@plt+0x804>
   1225c:	sub	r3, r0, #63	; 0x3f
   12260:	cmp	r3, #55	; 0x37
   12264:	ldrls	pc, [pc, r3, lsl #2]
   12268:	b	123c8 <__assert_fail@plt+0x7e8>
   1226c:	andeq	r2, r1, r4, asr r3
   12270:	andeq	r2, r1, r8, asr #7
   12274:	andeq	r2, r1, r8, asr #7
   12278:	andeq	r2, r1, r8, asr #7
   1227c:	andeq	r2, r1, r8, asr #7
   12280:	andeq	r2, r1, r8, asr #7
   12284:	andeq	r2, r1, r8, asr #7
   12288:	andeq	r2, r1, r8, asr #7
   1228c:	andeq	r2, r1, r8, asr #7
   12290:	andeq	r2, r1, r8, asr #7
   12294:	andeq	r2, r1, r8, asr #7
   12298:	andeq	r2, r1, r8, asr #7
   1229c:	andeq	r2, r1, r8, asr #7
   122a0:	andeq	r2, r1, r8, asr #7
   122a4:	andeq	r2, r1, r8, asr #7
   122a8:	andeq	r2, r1, r8, asr #7
   122ac:	andeq	r2, r1, r8, asr #7
   122b0:	andeq	r2, r1, r8, asr #7
   122b4:	andeq	r2, r1, r8, asr #7
   122b8:	andeq	r2, r1, r8, asr #7
   122bc:	andeq	r2, r1, r8, asr #7
   122c0:	andeq	r2, r1, r8, asr #7
   122c4:	andeq	r2, r1, r8, asr #7
   122c8:	andeq	r2, r1, r4, ror r3
   122cc:	andeq	r2, r1, r8, asr #7
   122d0:	andeq	r2, r1, r8, asr #7
   122d4:	andeq	r2, r1, r8, asr #7
   122d8:	andeq	r2, r1, r8, asr #7
   122dc:	andeq	r2, r1, r8, asr #7
   122e0:	andeq	r2, r1, r8, asr #7
   122e4:	andeq	r2, r1, r8, asr #7
   122e8:	andeq	r2, r1, r8, asr #7
   122ec:	andeq	r2, r1, r8, asr #7
   122f0:	andeq	r2, r1, r8, asr #7
   122f4:	andeq	r2, r1, r8, asr #7
   122f8:	andeq	r2, r1, r8, asr #7
   122fc:	andeq	r2, r1, r8, asr #7
   12300:	andeq	r2, r1, r8, asr #7
   12304:	andeq	r2, r1, r8, asr #7
   12308:	andeq	r2, r1, ip, asr #6
   1230c:	andeq	r2, r1, r8, asr #7
   12310:	andeq	r2, r1, r4, lsr #7
   12314:	andeq	r2, r1, r8, asr #7
   12318:	andeq	r2, r1, r8, asr #7
   1231c:	andeq	r2, r1, r8, asr #7
   12320:	andeq	r2, r1, r8, asr #7
   12324:	andeq	r2, r1, r8, asr #7
   12328:	andeq	r2, r1, r8, asr #7
   1232c:	andeq	r2, r1, r8, asr #7
   12330:	andeq	r2, r1, r8, asr #7
   12334:	andeq	r2, r1, r8, asr #7
   12338:	andeq	r2, r1, r8, asr #7
   1233c:	muleq	r1, r8, r3
   12340:	andeq	r2, r1, r8, asr #7
   12344:	andeq	r2, r1, r8, asr #7
   12348:	andeq	r2, r1, r8, lsl #7
   1234c:	mov	r7, #512	; 0x200
   12350:	b	12230 <__assert_fail@plt+0x650>
   12354:	mov	r5, #1
   12358:	ldr	r2, [sp, #156]	; 0x9c
   1235c:	mov	r0, r5
   12360:	ldr	r3, [r4]
   12364:	cmp	r2, r3
   12368:	bne	126c0 <__assert_fail@plt+0xae0>
   1236c:	add	sp, sp, #164	; 0xa4
   12370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12374:	movw	r0, #39000	; 0x9858
   12378:	movt	r0, #2
   1237c:	bl	11904 <puts@plt>
   12380:	mov	r5, #0
   12384:	b	12358 <__assert_fail@plt+0x778>
   12388:	ldr	r3, [fp]
   1238c:	add	r3, r3, #1
   12390:	str	r3, [fp]
   12394:	b	12230 <__assert_fail@plt+0x650>
   12398:	mov	r3, #1
   1239c:	str	r3, [r9]
   123a0:	b	12230 <__assert_fail@plt+0x650>
   123a4:	movw	r3, #61936	; 0xf1f0
   123a8:	movt	r3, #3
   123ac:	movw	r1, #39536	; 0x9a70
   123b0:	mov	r0, #1
   123b4:	ldr	r2, [r3]
   123b8:	movt	r1, #2
   123bc:	bl	11a60 <__printf_chk@plt>
   123c0:	mov	r5, #0
   123c4:	b	12358 <__assert_fail@plt+0x778>
   123c8:	mov	r2, r0
   123cc:	movw	r1, #39916	; 0x9bec
   123d0:	mov	r0, #3
   123d4:	movt	r1, #2
   123d8:	bl	19fe0 <__assert_fail@plt+0x8400>
   123dc:	mov	r5, #1
   123e0:	b	12358 <__assert_fail@plt+0x778>
   123e4:	movw	r3, #61976	; 0xf218
   123e8:	movt	r3, #3
   123ec:	movw	r9, #61952	; 0xf200
   123f0:	movt	r9, #3
   123f4:	ldr	r0, [r3]
   123f8:	adds	r0, r0, #0
   123fc:	movne	r0, #1
   12400:	bl	19f9c <__assert_fail@plt+0x83bc>
   12404:	ldr	r3, [r9]
   12408:	cmp	r5, r3
   1240c:	bgt	1242c <__assert_fail@plt+0x84c>
   12410:	movw	r1, #39956	; 0x9c14
   12414:	mov	r0, #3
   12418:	movt	r1, #2
   1241c:	mov	r5, #1
   12420:	bl	19fe0 <__assert_fail@plt+0x8400>
   12424:	bl	19fc8 <__assert_fail@plt+0x83e8>
   12428:	b	12358 <__assert_fail@plt+0x778>
   1242c:	mov	r0, #0
   12430:	add	r1, sp, #40	; 0x28
   12434:	bl	1bf20 <__assert_fail@plt+0xa340>
   12438:	subs	r2, r0, #0
   1243c:	str	r2, [sp, #8]
   12440:	beq	12650 <__assert_fail@plt+0xa70>
   12444:	movw	r3, #61880	; 0xf1b8
   12448:	movt	r3, #3
   1244c:	ldr	r1, [r3]
   12450:	bl	1a0fc <__assert_fail@plt+0x851c>
   12454:	ldr	r9, [r9]
   12458:	cmp	r5, r9
   1245c:	ble	126c4 <__assert_fail@plt+0xae4>
   12460:	sub	r3, r9, #-1073741823	; 0xc0000001
   12464:	movw	r2, #61956	; 0xf204
   12468:	str	r5, [sp, #12]
   1246c:	movt	r2, #3
   12470:	add	sl, r8, r3, lsl #2
   12474:	str	r2, [sp, #24]
   12478:	mov	r3, #0
   1247c:	str	r4, [sp, #28]
   12480:	str	r3, [sp, #20]
   12484:	b	12504 <__assert_fail@plt+0x924>
   12488:	bl	20598 <__assert_fail@plt+0xe9b8>
   1248c:	cmp	r0, #0
   12490:	blt	1260c <__assert_fail@plt+0xa2c>
   12494:	cmp	r7, #0
   12498:	bne	124d8 <__assert_fail@plt+0x8f8>
   1249c:	ldr	r4, [sp, #44]	; 0x2c
   124a0:	mov	r0, r4
   124a4:	bl	22014 <__assert_fail@plt+0x10434>
   124a8:	cmp	r0, #0
   124ac:	mov	r0, r4
   124b0:	beq	12684 <__assert_fail@plt+0xaa4>
   124b4:	blt	12668 <__assert_fail@plt+0xa88>
   124b8:	bl	22f38 <__assert_fail@plt+0x11358>
   124bc:	cmp	r0, #0
   124c0:	str	r0, [sp, #16]
   124c4:	mov	r0, r4
   124c8:	bne	12564 <__assert_fail@plt+0x984>
   124cc:	bl	22dd4 <__assert_fail@plt+0x111f4>
   124d0:	cmp	r0, #0
   124d4:	bne	126a0 <__assert_fail@plt+0xac0>
   124d8:	ldr	r0, [sp, #44]	; 0x2c
   124dc:	mov	r1, r7
   124e0:	bl	2110c <__assert_fail@plt+0xf52c>
   124e4:	cmp	r0, #0
   124e8:	blt	12534 <__assert_fail@plt+0x954>
   124ec:	ldr	r0, [sp, #44]	; 0x2c
   124f0:	add	r9, r9, #1
   124f4:	bl	20b98 <__assert_fail@plt+0xefb8>
   124f8:	ldr	r3, [sp, #12]
   124fc:	cmp	r9, r3
   12500:	beq	12648 <__assert_fail@plt+0xa68>
   12504:	ldr	r8, [sl, #4]!
   12508:	mov	r2, r6
   1250c:	mov	r0, #3
   12510:	mov	r1, r8
   12514:	bl	11b74 <__xstat64@plt>
   12518:	mov	r1, r8
   1251c:	add	r2, sp, #44	; 0x2c
   12520:	cmp	r0, #0
   12524:	ldr	r0, [sp, #8]
   12528:	beq	12488 <__assert_fail@plt+0x8a8>
   1252c:	bl	203f0 <__assert_fail@plt+0xe810>
   12530:	b	1248c <__assert_fail@plt+0x8ac>
   12534:	ldr	r2, [sp, #20]
   12538:	rsb	r0, r0, #0
   1253c:	add	r2, r2, #1
   12540:	str	r2, [sp, #20]
   12544:	bl	11928 <strerror@plt>
   12548:	mov	r2, r8
   1254c:	movw	r1, #40144	; 0x9cd0
   12550:	movt	r1, #2
   12554:	mov	r3, r0
   12558:	mov	r0, #3
   1255c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12560:	b	124ec <__assert_fail@plt+0x90c>
   12564:	ldr	r8, [sp, #16]
   12568:	bl	21044 <__assert_fail@plt+0xf464>
   1256c:	movw	r1, #40092	; 0x9c9c
   12570:	movt	r1, #2
   12574:	mov	r2, r0
   12578:	mov	r0, #3
   1257c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12580:	ldr	r5, [sp, #16]
   12584:	ldr	fp, [sp, #24]
   12588:	str	r7, [sp, #32]
   1258c:	str	r9, [sp, #36]	; 0x24
   12590:	mov	r0, r8
   12594:	movw	r4, #61956	; 0xf204
   12598:	bl	21034 <__assert_fail@plt+0xf454>
   1259c:	ldr	r9, [fp]
   125a0:	movt	r4, #3
   125a4:	mov	r7, r0
   125a8:	bl	21044 <__assert_fail@plt+0xf464>
   125ac:	mov	r1, #1
   125b0:	movw	r2, #40116	; 0x9cb4
   125b4:	movt	r2, #2
   125b8:	mov	r3, r0
   125bc:	mov	r0, r9
   125c0:	bl	11a78 <__fprintf_chk@plt>
   125c4:	mov	r0, r7
   125c8:	bl	20b98 <__assert_fail@plt+0xefb8>
   125cc:	mov	r1, r8
   125d0:	mov	r0, r5
   125d4:	bl	1d0f4 <__assert_fail@plt+0xb514>
   125d8:	subs	r8, r0, #0
   125dc:	bne	12590 <__assert_fail@plt+0x9b0>
   125e0:	ldr	r1, [r4]
   125e4:	mov	r0, #10
   125e8:	ldr	r7, [sp, #32]
   125ec:	ldr	r9, [sp, #36]	; 0x24
   125f0:	bl	11ae4 <fputc@plt>
   125f4:	ldr	r0, [sp, #16]
   125f8:	bl	207dc <__assert_fail@plt+0xebfc>
   125fc:	ldr	r2, [sp, #20]
   12600:	add	r2, r2, #1
   12604:	str	r2, [sp, #20]
   12608:	b	124ec <__assert_fail@plt+0x90c>
   1260c:	rsb	r0, r0, #0
   12610:	ldr	r4, [sp, #28]
   12614:	bl	11928 <strerror@plt>
   12618:	movw	r1, #40000	; 0x9c40
   1261c:	mov	r2, r8
   12620:	movt	r1, #2
   12624:	mov	r3, r0
   12628:	mov	r0, #3
   1262c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12630:	ldr	r3, [sp, #20]
   12634:	ldr	r0, [sp, #8]
   12638:	adds	r5, r3, #0
   1263c:	movne	r5, #1
   12640:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   12644:	b	12424 <__assert_fail@plt+0x844>
   12648:	ldr	r4, [sp, #28]
   1264c:	b	12630 <__assert_fail@plt+0xa50>
   12650:	movw	r1, #39980	; 0x9c2c
   12654:	mov	r0, #3
   12658:	movt	r1, #2
   1265c:	mov	r5, #1
   12660:	bl	19fe0 <__assert_fail@plt+0x8400>
   12664:	b	12424 <__assert_fail@plt+0x844>
   12668:	bl	21044 <__assert_fail@plt+0xf464>
   1266c:	movw	r1, #40056	; 0x9c78
   12670:	movt	r1, #2
   12674:	mov	r2, r0
   12678:	mov	r0, #3
   1267c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12680:	b	125fc <__assert_fail@plt+0xa1c>
   12684:	bl	21044 <__assert_fail@plt+0xf464>
   12688:	movw	r1, #40032	; 0x9c60
   1268c:	movt	r1, #2
   12690:	mov	r2, r0
   12694:	mov	r0, #3
   12698:	bl	19fe0 <__assert_fail@plt+0x8400>
   1269c:	b	125fc <__assert_fail@plt+0xa1c>
   126a0:	mov	r0, r4
   126a4:	bl	21044 <__assert_fail@plt+0xf464>
   126a8:	movw	r1, #40120	; 0x9cb8
   126ac:	movt	r1, #2
   126b0:	mov	r2, r0
   126b4:	mov	r0, #3
   126b8:	bl	19fe0 <__assert_fail@plt+0x8400>
   126bc:	b	125fc <__assert_fail@plt+0xa1c>
   126c0:	bl	11838 <__stack_chk_fail@plt>
   126c4:	mov	r2, #0
   126c8:	str	r2, [sp, #20]
   126cc:	b	12630 <__assert_fail@plt+0xa50>
   126d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126d4:	movw	r4, #61944	; 0xf1f8
   126d8:	movt	r4, #3
   126dc:	sub	sp, sp, #44	; 0x2c
   126e0:	mov	r3, #0
   126e4:	mov	r5, r0
   126e8:	ldr	r2, [r4]
   126ec:	mov	r6, r1
   126f0:	mov	r7, r3
   126f4:	str	r3, [sp, #28]
   126f8:	str	r2, [sp, #36]	; 0x24
   126fc:	add	r1, sp, #32
   12700:	movw	r2, #40676	; 0x9ee4
   12704:	str	r1, [sp]
   12708:	movw	r3, #40232	; 0x9d28
   1270c:	movt	r2, #2
   12710:	movt	r3, #2
   12714:	mov	r0, r5
   12718:	mov	r1, r6
   1271c:	str	r7, [sp, #32]
   12720:	bl	11970 <getopt_long@plt>
   12724:	cmn	r0, #1
   12728:	beq	12890 <__assert_fail@plt+0xcb0>
   1272c:	sub	r3, r0, #63	; 0x3f
   12730:	cmp	r3, #52	; 0x34
   12734:	ldrls	pc, [pc, r3, lsl #2]
   12738:	b	12874 <__assert_fail@plt+0xc94>
   1273c:	andeq	r2, r1, r0, lsr #16
   12740:	andeq	r2, r1, r4, ror r8
   12744:	andeq	r2, r1, r4, ror r8
   12748:	andeq	r2, r1, r4, ror r8
   1274c:	andeq	r2, r1, r4, ror r8
   12750:	andeq	r2, r1, r4, ror r8
   12754:	andeq	r2, r1, r4, ror r8
   12758:	andeq	r2, r1, r4, ror r8
   1275c:	andeq	r2, r1, r4, ror r8
   12760:	andeq	r2, r1, r4, ror r8
   12764:	andeq	r2, r1, r4, ror r8
   12768:	andeq	r2, r1, r4, ror r8
   1276c:	andeq	r2, r1, r4, ror r8
   12770:	andeq	r2, r1, r4, ror r8
   12774:	andeq	r2, r1, r4, ror r8
   12778:	andeq	r2, r1, r4, ror r8
   1277c:	andeq	r2, r1, r4, ror r8
   12780:	andeq	r2, r1, r4, ror r8
   12784:	andeq	r2, r1, r4, ror r8
   12788:	andeq	r2, r1, r4, ror r8
   1278c:	andeq	r2, r1, r4, ror r8
   12790:	andeq	r2, r1, r4, ror r8
   12794:	andeq	r2, r1, r4, ror r8
   12798:	andeq	r2, r1, r0, ror #16
   1279c:	andeq	r2, r1, r4, ror r8
   127a0:	andeq	r2, r1, r4, ror r8
   127a4:	andeq	r2, r1, r4, ror r8
   127a8:	andeq	r2, r1, r4, ror r8
   127ac:	andeq	r2, r1, r4, ror r8
   127b0:	andeq	r2, r1, r4, ror r8
   127b4:	andeq	r2, r1, r4, ror r8
   127b8:	andeq	r2, r1, r4, ror r8
   127bc:	andeq	r2, r1, r4, ror r8
   127c0:	andeq	r2, r1, r4, ror r8
   127c4:	andeq	r2, r1, r4, ror r8
   127c8:	andeq	r2, r1, r4, ror r8
   127cc:	andeq	r2, r1, r4, ror r8
   127d0:	andeq	r2, r1, r4, ror r8
   127d4:	andeq	r2, r1, r4, ror r8
   127d8:	strdeq	r2, [r1], -ip
   127dc:	andeq	r2, r1, r4, ror r8
   127e0:	andeq	r2, r1, ip, lsr r8
   127e4:	andeq	r2, r1, r4, ror r8
   127e8:	andeq	r2, r1, r4, ror r8
   127ec:	andeq	r2, r1, r4, ror r8
   127f0:	andeq	r2, r1, r4, ror r8
   127f4:	andeq	r2, r1, r4, ror r8
   127f8:	andeq	r2, r1, r4, ror r8
   127fc:	andeq	r2, r1, r4, ror r8
   12800:	strdeq	r2, [r1], -ip
   12804:	andeq	r2, r1, r4, ror r8
   12808:	andeq	r2, r1, r4, ror r8
   1280c:	strdeq	r2, [r1], -ip
   12810:	movw	r1, #40512	; 0x9e40
   12814:	mov	r0, #3
   12818:	movt	r1, #2
   1281c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12820:	mov	r0, #1
   12824:	ldr	r2, [sp, #36]	; 0x24
   12828:	ldr	r3, [r4]
   1282c:	cmp	r2, r3
   12830:	bne	12a40 <__assert_fail@plt+0xe60>
   12834:	add	sp, sp, #44	; 0x2c
   12838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1283c:	movw	r3, #61936	; 0xf1f0
   12840:	movt	r3, #3
   12844:	movw	r1, #40396	; 0x9dcc
   12848:	mov	r0, #1
   1284c:	ldr	r2, [r3]
   12850:	movt	r1, #2
   12854:	bl	11a60 <__printf_chk@plt>
   12858:	mov	r0, #0
   1285c:	b	12824 <__assert_fail@plt+0xc44>
   12860:	movw	r0, #39000	; 0x9858
   12864:	movt	r0, #2
   12868:	bl	11904 <puts@plt>
   1286c:	mov	r0, #0
   12870:	b	12824 <__assert_fail@plt+0xc44>
   12874:	mov	r2, r0
   12878:	movw	r1, #39916	; 0x9bec
   1287c:	mov	r0, #3
   12880:	movt	r1, #2
   12884:	bl	19fe0 <__assert_fail@plt+0x8400>
   12888:	mov	r0, #1
   1288c:	b	12824 <__assert_fail@plt+0xc44>
   12890:	movw	r3, #61952	; 0xf200
   12894:	movt	r3, #3
   12898:	ldr	r8, [r3]
   1289c:	cmp	r5, r8
   128a0:	ble	12810 <__assert_fail@plt+0xc30>
   128a4:	ldr	r3, [r6, r8, lsl #2]
   128a8:	str	r3, [sp, #16]
   128ac:	add	r3, r6, r8, lsl #2
   128b0:	ldr	r1, [sp, #16]
   128b4:	ldrb	r2, [r1]
   128b8:	cmp	r2, #45	; 0x2d
   128bc:	bne	128cc <__assert_fail@plt+0xcec>
   128c0:	ldrb	r2, [r1, #1]
   128c4:	cmp	r2, #0
   128c8:	beq	129e4 <__assert_fail@plt+0xe04>
   128cc:	add	r8, r8, #1
   128d0:	cmp	r5, r8
   128d4:	ble	12a44 <__assert_fail@plt+0xe64>
   128d8:	mov	r6, #0
   128dc:	str	r4, [sp, #20]
   128e0:	mov	r9, r6
   128e4:	str	r5, [sp, #12]
   128e8:	mov	r4, r3
   128ec:	b	12938 <__assert_fail@plt+0xd58>
   128f0:	cmp	r6, #0
   128f4:	mov	r2, sl
   128f8:	add	r8, r8, #1
   128fc:	add	r4, r4, #4
   12900:	movne	r3, #32
   12904:	strbne	r3, [fp, r6]
   12908:	addne	r6, r6, #1
   1290c:	ldr	r1, [r4]
   12910:	add	r0, fp, r6
   12914:	addne	r7, sl, r6
   12918:	bl	117e4 <memcpy@plt>
   1291c:	ldr	r3, [sp, #12]
   12920:	mov	r1, #0
   12924:	mov	r6, r7
   12928:	cmp	r8, r3
   1292c:	strb	r1, [fp, r7]
   12930:	beq	12980 <__assert_fail@plt+0xda0>
   12934:	mov	r9, fp
   12938:	ldr	r0, [r4, #4]
   1293c:	bl	119a0 <strlen@plt>
   12940:	add	r7, r0, r6
   12944:	mov	sl, r0
   12948:	add	r1, r7, #2
   1294c:	mov	r0, r9
   12950:	bl	11844 <realloc@plt>
   12954:	subs	fp, r0, #0
   12958:	bne	128f0 <__assert_fail@plt+0xd10>
   1295c:	mov	r0, #3
   12960:	movw	r1, #47368	; 0xb908
   12964:	movt	r1, #2
   12968:	ldr	r4, [sp, #20]
   1296c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12970:	mov	r0, r9
   12974:	bl	117c0 <free@plt>
   12978:	mov	r0, #1
   1297c:	b	12824 <__assert_fail@plt+0xc44>
   12980:	ldr	r4, [sp, #20]
   12984:	mov	r0, #0
   12988:	add	r1, sp, #28
   1298c:	bl	1bf20 <__assert_fail@plt+0xa340>
   12990:	subs	r6, r0, #0
   12994:	beq	12a20 <__assert_fail@plt+0xe40>
   12998:	add	r2, sp, #32
   1299c:	ldr	r1, [sp, #16]
   129a0:	bl	20598 <__assert_fail@plt+0xe9b8>
   129a4:	subs	r5, r0, #0
   129a8:	blt	129fc <__assert_fail@plt+0xe1c>
   129ac:	ldr	r0, [sp, #32]
   129b0:	mov	r1, #0
   129b4:	mov	r2, fp
   129b8:	bl	211b0 <__assert_fail@plt+0xf5d0>
   129bc:	subs	r5, r0, #0
   129c0:	blt	12a4c <__assert_fail@plt+0xe6c>
   129c4:	ldr	r0, [sp, #32]
   129c8:	bl	20b98 <__assert_fail@plt+0xefb8>
   129cc:	mov	r0, r6
   129d0:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   129d4:	mov	r0, fp
   129d8:	bl	117c0 <free@plt>
   129dc:	lsr	r0, r5, #31
   129e0:	b	12824 <__assert_fail@plt+0xc44>
   129e4:	mov	r0, #3
   129e8:	movw	r1, #40532	; 0x9e54
   129ec:	movt	r1, #2
   129f0:	bl	19fe0 <__assert_fail@plt+0x8400>
   129f4:	mov	r0, #1
   129f8:	b	12824 <__assert_fail@plt+0xc44>
   129fc:	rsb	r0, r5, #0
   12a00:	bl	11928 <strerror@plt>
   12a04:	ldr	r2, [sp, #16]
   12a08:	movw	r1, #40580	; 0x9e84
   12a0c:	movt	r1, #2
   12a10:	mov	r3, r0
   12a14:	mov	r0, #3
   12a18:	bl	19fe0 <__assert_fail@plt+0x8400>
   12a1c:	b	129cc <__assert_fail@plt+0xdec>
   12a20:	mov	r0, #3
   12a24:	movw	r1, #39980	; 0x9c2c
   12a28:	movt	r1, #2
   12a2c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12a30:	mov	r0, fp
   12a34:	bl	117c0 <free@plt>
   12a38:	mov	r0, #1
   12a3c:	b	12824 <__assert_fail@plt+0xc44>
   12a40:	bl	11838 <__stack_chk_fail@plt>
   12a44:	mov	fp, #0
   12a48:	b	12984 <__assert_fail@plt+0xda4>
   12a4c:	rsb	r0, r5, #0
   12a50:	cmp	r0, #3
   12a54:	beq	12aa8 <__assert_fail@plt+0xec8>
   12a58:	ble	12a8c <__assert_fail@plt+0xeac>
   12a5c:	cmp	r0, #8
   12a60:	beq	12ab4 <__assert_fail@plt+0xed4>
   12a64:	cmp	r0, #22
   12a68:	movweq	r3, #40376	; 0x9db8
   12a6c:	movteq	r3, #2
   12a70:	bne	12a9c <__assert_fail@plt+0xebc>
   12a74:	ldr	r2, [sp, #16]
   12a78:	movw	r1, #40612	; 0x9ea4
   12a7c:	mov	r0, #3
   12a80:	movt	r1, #2
   12a84:	bl	19fe0 <__assert_fail@plt+0x8400>
   12a88:	b	129c4 <__assert_fail@plt+0xde4>
   12a8c:	cmp	r0, #2
   12a90:	movweq	r3, #40316	; 0x9d7c
   12a94:	movteq	r3, #2
   12a98:	beq	12a74 <__assert_fail@plt+0xe94>
   12a9c:	bl	11928 <strerror@plt>
   12aa0:	mov	r3, r0
   12aa4:	b	12a74 <__assert_fail@plt+0xe94>
   12aa8:	movw	r3, #40344	; 0x9d98
   12aac:	movt	r3, #2
   12ab0:	b	12a74 <__assert_fail@plt+0xe94>
   12ab4:	movw	r3, #40292	; 0x9d64
   12ab8:	movt	r3, #2
   12abc:	b	12a74 <__assert_fail@plt+0xe94>
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	mov	r5, r1
   12ac8:	sub	sp, sp, #12
   12acc:	mov	r4, r0
   12ad0:	mov	r1, #58	; 0x3a
   12ad4:	mov	r0, r5
   12ad8:	str	r2, [sp, #4]
   12adc:	bl	119ac <strchr@plt>
   12ae0:	subs	r6, r0, #0
   12ae4:	beq	12be0 <__assert_fail@plt+0x1000>
   12ae8:	mov	r0, r4
   12aec:	movw	r1, #40912	; 0x9fd0
   12af0:	movt	r1, #2
   12af4:	rsb	fp, r5, r6
   12af8:	bl	11754 <strcmp@plt>
   12afc:	cmp	r0, #0
   12b00:	beq	12b88 <__assert_fail@plt+0xfa8>
   12b04:	add	r7, r6, #1
   12b08:	mov	r9, #0
   12b0c:	mov	r6, r9
   12b10:	mov	r0, r7
   12b14:	bl	119a0 <strlen@plt>
   12b18:	mov	sl, r0
   12b1c:	ldr	r3, [sp, #4]
   12b20:	ldr	r8, [r3]
   12b24:	cmp	r8, #0
   12b28:	beq	12ba4 <__assert_fail@plt+0xfc4>
   12b2c:	mov	r4, r8
   12b30:	b	12b40 <__assert_fail@plt+0xf60>
   12b34:	ldr	r4, [r4]
   12b38:	cmp	r4, #0
   12b3c:	beq	12ba4 <__assert_fail@plt+0xfc4>
   12b40:	ldr	r3, [r4, #16]
   12b44:	cmp	fp, r3
   12b48:	bne	12b34 <__assert_fail@plt+0xf54>
   12b4c:	ldr	r0, [r4, #4]
   12b50:	mov	r1, r5
   12b54:	mov	r2, fp
   12b58:	bl	11820 <memcmp@plt>
   12b5c:	cmp	r0, #0
   12b60:	bne	12b34 <__assert_fail@plt+0xf54>
   12b64:	cmp	r6, #0
   12b68:	strne	r6, [r4, #8]
   12b6c:	strne	r9, [r4, #20]
   12b70:	cmp	r7, #0
   12b74:	strne	r7, [r4, #12]
   12b78:	strne	sl, [r4, #24]
   12b7c:	mov	r0, #0
   12b80:	add	sp, sp, #12
   12b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b88:	add	r6, r6, #1
   12b8c:	mov	sl, r0
   12b90:	mov	r7, r0
   12b94:	mov	r0, r6
   12b98:	bl	119a0 <strlen@plt>
   12b9c:	mov	r9, r0
   12ba0:	b	12b1c <__assert_fail@plt+0xf3c>
   12ba4:	mov	r0, #28
   12ba8:	bl	11910 <malloc@plt>
   12bac:	subs	r4, r0, #0
   12bb0:	beq	12c00 <__assert_fail@plt+0x1020>
   12bb4:	ldr	r2, [sp, #4]
   12bb8:	mov	r3, #0
   12bbc:	str	r8, [r4]
   12bc0:	str	r4, [r2]
   12bc4:	str	r5, [r4, #4]
   12bc8:	str	fp, [r4, #16]
   12bcc:	str	r3, [r4, #8]
   12bd0:	str	r3, [r4, #12]
   12bd4:	str	r3, [r4, #20]
   12bd8:	str	r3, [r4, #24]
   12bdc:	b	12b64 <__assert_fail@plt+0xf84>
   12be0:	mov	r0, #3
   12be4:	mov	r2, r4
   12be8:	mov	r3, r5
   12bec:	movw	r1, #40876	; 0x9fac
   12bf0:	movt	r1, #2
   12bf4:	bl	19fe0 <__assert_fail@plt+0x8400>
   12bf8:	mov	r0, r6
   12bfc:	b	12b80 <__assert_fail@plt+0xfa0>
   12c00:	mov	r0, #3
   12c04:	movw	r1, #40920	; 0x9fd8
   12c08:	movt	r1, #2
   12c0c:	bl	19fe0 <__assert_fail@plt+0x8400>
   12c10:	mvn	r0, #11
   12c14:	b	12b80 <__assert_fail@plt+0xfa0>
   12c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c1c:	movw	r6, #61980	; 0xf21c
   12c20:	movt	r6, #3
   12c24:	movw	r8, #61944	; 0xf1f8
   12c28:	movt	r8, #3
   12c2c:	sub	sp, sp, #52	; 0x34
   12c30:	ldr	r2, [r6]
   12c34:	mov	r3, #0
   12c38:	ldr	r1, [r8]
   12c3c:	mov	r4, r0
   12c40:	cmp	r2, r3
   12c44:	str	r3, [sp, #32]
   12c48:	str	r3, [sp, #36]	; 0x24
   12c4c:	str	r1, [sp, #44]	; 0x2c
   12c50:	beq	130d0 <__assert_fail@plt+0x14f0>
   12c54:	mov	r0, r2
   12c58:	movw	r1, #40936	; 0x9fe8
   12c5c:	movt	r1, #2
   12c60:	bl	11754 <strcmp@plt>
   12c64:	subs	r9, r0, #0
   12c68:	beq	1303c <__assert_fail@plt+0x145c>
   12c6c:	mov	r0, r4
   12c70:	add	r1, sp, #32
   12c74:	bl	23218 <__assert_fail@plt+0x11638>
   12c78:	subs	r9, r0, #0
   12c7c:	blt	1309c <__assert_fail@plt+0x14bc>
   12c80:	ldr	r5, [r6]
   12c84:	cmp	r5, #0
   12c88:	beq	12ca4 <__assert_fail@plt+0x10c4>
   12c8c:	movw	r1, #40912	; 0x9fd0
   12c90:	mov	r0, r5
   12c94:	movt	r1, #2
   12c98:	bl	11754 <strcmp@plt>
   12c9c:	cmp	r0, #0
   12ca0:	beq	12eec <__assert_fail@plt+0x130c>
   12ca4:	ldr	r4, [sp, #32]
   12ca8:	cmp	r4, #0
   12cac:	beq	12de0 <__assert_fail@plt+0x1200>
   12cb0:	movw	sl, #61884	; 0xf1bc
   12cb4:	movw	fp, #50108	; 0xc3bc
   12cb8:	movt	sl, #3
   12cbc:	movt	fp, #2
   12cc0:	b	12cd8 <__assert_fail@plt+0x10f8>
   12cc4:	mov	r1, r4
   12cc8:	ldr	r0, [sp, #32]
   12ccc:	bl	1d0f4 <__assert_fail@plt+0xb514>
   12cd0:	subs	r4, r0, #0
   12cd4:	beq	12ddc <__assert_fail@plt+0x11fc>
   12cd8:	mov	r0, r4
   12cdc:	bl	231d0 <__assert_fail@plt+0x115f0>
   12ce0:	mov	r5, r0
   12ce4:	mov	r0, r4
   12ce8:	bl	231e0 <__assert_fail@plt+0x11600>
   12cec:	mov	r7, r0
   12cf0:	ldr	r0, [r6]
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d28 <__assert_fail@plt+0x1148>
   12cfc:	mov	r1, r5
   12d00:	bl	11754 <strcmp@plt>
   12d04:	cmp	r0, #0
   12d08:	bne	12cc4 <__assert_fail@plt+0x10e4>
   12d0c:	mov	r2, r7
   12d10:	movw	r1, #40948	; 0x9ff4
   12d14:	ldrb	r3, [sl]
   12d18:	movt	r1, #2
   12d1c:	mov	r0, #1
   12d20:	bl	11a60 <__printf_chk@plt>
   12d24:	b	12cc4 <__assert_fail@plt+0x10e4>
   12d28:	movw	r1, #40912	; 0x9fd0
   12d2c:	mov	r0, r5
   12d30:	movt	r1, #2
   12d34:	bl	11754 <strcmp@plt>
   12d38:	cmp	r0, #0
   12d3c:	beq	12d84 <__assert_fail@plt+0x11a4>
   12d40:	movw	r1, #41020	; 0xa03c
   12d44:	mov	r0, r5
   12d48:	movt	r1, #2
   12d4c:	bl	11754 <strcmp@plt>
   12d50:	cmp	r0, #0
   12d54:	beq	12d84 <__assert_fail@plt+0x11a4>
   12d58:	ldrb	r3, [sl]
   12d5c:	cmp	r3, #0
   12d60:	bne	12eb4 <__assert_fail@plt+0x12d4>
   12d64:	str	r3, [sp]
   12d68:	mov	r2, r5
   12d6c:	mov	r3, r7
   12d70:	movw	r1, #41080	; 0xa078
   12d74:	mov	r0, #1
   12d78:	movt	r1, #2
   12d7c:	bl	11a60 <__printf_chk@plt>
   12d80:	b	12cc4 <__assert_fail@plt+0x10e4>
   12d84:	mov	r0, r5
   12d88:	mov	r1, r7
   12d8c:	add	r2, sp, #36	; 0x24
   12d90:	bl	12ac0 <__assert_fail@plt+0xee0>
   12d94:	subs	r9, r0, #0
   12d98:	bge	12cc4 <__assert_fail@plt+0x10e4>
   12d9c:	b	12dac <__assert_fail@plt+0x11cc>
   12da0:	ldr	r3, [r0]
   12da4:	str	r3, [sp, #36]	; 0x24
   12da8:	bl	117c0 <free@plt>
   12dac:	ldr	r0, [sp, #36]	; 0x24
   12db0:	cmp	r0, #0
   12db4:	bne	12da0 <__assert_fail@plt+0x11c0>
   12db8:	ldr	r0, [sp, #32]
   12dbc:	bl	231f0 <__assert_fail@plt+0x11610>
   12dc0:	mov	r0, r9
   12dc4:	ldr	r2, [sp, #44]	; 0x2c
   12dc8:	ldr	r3, [r8]
   12dcc:	cmp	r2, r3
   12dd0:	bne	1314c <__assert_fail@plt+0x156c>
   12dd4:	add	sp, sp, #52	; 0x34
   12dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ddc:	ldr	r5, [r6]
   12de0:	cmp	r5, #0
   12de4:	bne	12dac <__assert_fail@plt+0x11cc>
   12de8:	ldr	r4, [sp, #36]	; 0x24
   12dec:	cmp	r4, #0
   12df0:	beq	12db8 <__assert_fail@plt+0x11d8>
   12df4:	movw	r5, #61884	; 0xf1bc
   12df8:	movt	r5, #3
   12dfc:	b	12e58 <__assert_fail@plt+0x1278>
   12e00:	ldr	lr, [r4, #4]
   12e04:	movw	r1, #41128	; 0xa0a8
   12e08:	ldr	r3, [r4, #16]
   12e0c:	movw	r2, #41120	; 0xa0a0
   12e10:	ldrb	r6, [r5]
   12e14:	movt	r1, #2
   12e18:	str	lr, [sp]
   12e1c:	movt	r2, #2
   12e20:	ldr	lr, [r4, #20]
   12e24:	str	r0, [sp, #8]
   12e28:	mov	r0, #1
   12e2c:	str	lr, [sp, #4]
   12e30:	ldr	lr, [r4, #24]
   12e34:	str	ip, [sp, #16]
   12e38:	str	r6, [sp, #20]
   12e3c:	str	lr, [sp, #12]
   12e40:	bl	11a60 <__printf_chk@plt>
   12e44:	mov	r0, r4
   12e48:	bl	117c0 <free@plt>
   12e4c:	ldr	r4, [sp, #36]	; 0x24
   12e50:	cmp	r4, #0
   12e54:	beq	12db8 <__assert_fail@plt+0x11d8>
   12e58:	ldr	r0, [r4, #8]
   12e5c:	ldr	r3, [r4]
   12e60:	cmp	r0, #0
   12e64:	str	r3, [sp, #36]	; 0x24
   12e68:	beq	13104 <__assert_fail@plt+0x1524>
   12e6c:	ldr	ip, [r4, #12]
   12e70:	cmp	ip, #0
   12e74:	bne	12e00 <__assert_fail@plt+0x1220>
   12e78:	ldr	ip, [r4, #4]
   12e7c:	movw	r1, #41100	; 0xa08c
   12e80:	ldr	r3, [r4, #16]
   12e84:	movt	r1, #2
   12e88:	ldrb	lr, [r5]
   12e8c:	movw	r2, #41120	; 0xa0a0
   12e90:	str	ip, [sp]
   12e94:	movt	r2, #2
   12e98:	ldr	ip, [r4, #20]
   12e9c:	str	r0, [sp, #8]
   12ea0:	mov	r0, #1
   12ea4:	str	lr, [sp, #12]
   12ea8:	str	ip, [sp, #4]
   12eac:	bl	11a60 <__printf_chk@plt>
   12eb0:	b	12e44 <__assert_fail@plt+0x1264>
   12eb4:	mov	r0, r5
   12eb8:	str	r3, [sp, #28]
   12ebc:	bl	119a0 <strlen@plt>
   12ec0:	ldr	r3, [sp, #28]
   12ec4:	str	fp, [sp]
   12ec8:	mov	r2, r5
   12ecc:	str	r7, [sp, #4]
   12ed0:	movw	r1, #41088	; 0xa080
   12ed4:	str	r3, [sp, #8]
   12ed8:	movt	r1, #2
   12edc:	rsb	r3, r0, #15
   12ee0:	mov	r0, #1
   12ee4:	bl	11a60 <__printf_chk@plt>
   12ee8:	b	12cc4 <__assert_fail@plt+0x10e4>
   12eec:	ldr	r7, [sp, #32]
   12ef0:	str	r0, [sp, #40]	; 0x28
   12ef4:	cmp	r7, #0
   12ef8:	beq	13144 <__assert_fail@plt+0x1564>
   12efc:	mov	r9, r0
   12f00:	mov	r4, r7
   12f04:	mov	r0, r4
   12f08:	bl	231d0 <__assert_fail@plt+0x115f0>
   12f0c:	mov	r5, r0
   12f10:	mov	r0, r4
   12f14:	bl	231e0 <__assert_fail@plt+0x11600>
   12f18:	movw	r1, #40912	; 0x9fd0
   12f1c:	movt	r1, #2
   12f20:	mov	r6, r0
   12f24:	mov	r0, r5
   12f28:	bl	11754 <strcmp@plt>
   12f2c:	cmp	r0, #0
   12f30:	beq	12f4c <__assert_fail@plt+0x136c>
   12f34:	movw	r1, #41020	; 0xa03c
   12f38:	mov	r0, r5
   12f3c:	movt	r1, #2
   12f40:	bl	11754 <strcmp@plt>
   12f44:	cmp	r0, #0
   12f48:	bne	12f64 <__assert_fail@plt+0x1384>
   12f4c:	mov	r0, r5
   12f50:	mov	r1, r6
   12f54:	add	r2, sp, #40	; 0x28
   12f58:	bl	12ac0 <__assert_fail@plt+0xee0>
   12f5c:	subs	r9, r0, #0
   12f60:	blt	1302c <__assert_fail@plt+0x144c>
   12f64:	mov	r1, r4
   12f68:	mov	r0, r7
   12f6c:	bl	1d0f4 <__assert_fail@plt+0xb514>
   12f70:	subs	r4, r0, #0
   12f74:	bne	12f04 <__assert_fail@plt+0x1324>
   12f78:	ldr	r4, [sp, #40]	; 0x28
   12f7c:	cmp	r4, #0
   12f80:	beq	12dac <__assert_fail@plt+0x11cc>
   12f84:	movw	r5, #61884	; 0xf1bc
   12f88:	movt	r5, #3
   12f8c:	b	12fd8 <__assert_fail@plt+0x13f8>
   12f90:	ldr	r6, [r4, #20]
   12f94:	movw	r1, #41048	; 0xa058
   12f98:	ldr	r2, [r4, #16]
   12f9c:	movt	r1, #2
   12fa0:	ldr	r3, [r4, #4]
   12fa4:	mov	r0, #1
   12fa8:	stm	sp, {r6, ip}
   12fac:	ldr	r6, [r4, #24]
   12fb0:	ldrb	ip, [r5]
   12fb4:	str	lr, [sp, #12]
   12fb8:	str	r6, [sp, #8]
   12fbc:	str	ip, [sp, #16]
   12fc0:	bl	11a60 <__printf_chk@plt>
   12fc4:	mov	r0, r4
   12fc8:	bl	117c0 <free@plt>
   12fcc:	ldr	r4, [sp, #40]	; 0x28
   12fd0:	cmp	r4, #0
   12fd4:	beq	12dac <__assert_fail@plt+0x11cc>
   12fd8:	ldr	ip, [r4, #8]
   12fdc:	ldr	r3, [r4]
   12fe0:	cmp	ip, #0
   12fe4:	str	r3, [sp, #40]	; 0x28
   12fe8:	beq	1306c <__assert_fail@plt+0x148c>
   12fec:	ldr	lr, [r4, #12]
   12ff0:	cmp	lr, #0
   12ff4:	bne	12f90 <__assert_fail@plt+0x13b0>
   12ff8:	ldr	r6, [r4, #20]
   12ffc:	movw	r1, #41068	; 0xa06c
   13000:	ldrb	lr, [r5]
   13004:	movt	r1, #2
   13008:	ldr	r2, [r4, #16]
   1300c:	mov	r0, #1
   13010:	ldr	r3, [r4, #4]
   13014:	stm	sp, {r6, ip, lr}
   13018:	bl	11a60 <__printf_chk@plt>
   1301c:	b	12fc4 <__assert_fail@plt+0x13e4>
   13020:	ldr	r3, [r0]
   13024:	str	r3, [sp, #40]	; 0x28
   13028:	bl	117c0 <free@plt>
   1302c:	ldr	r0, [sp, #40]	; 0x28
   13030:	cmp	r0, #0
   13034:	bne	13020 <__assert_fail@plt+0x1440>
   13038:	b	12dac <__assert_fail@plt+0x11cc>
   1303c:	mov	r0, r4
   13040:	bl	21050 <__assert_fail@plt+0xf470>
   13044:	movw	r3, #61884	; 0xf1bc
   13048:	movt	r3, #3
   1304c:	movw	r1, #40948	; 0x9ff4
   13050:	movt	r1, #2
   13054:	ldrb	r3, [r3]
   13058:	mov	r2, r0
   1305c:	mov	r0, #1
   13060:	bl	11a60 <__printf_chk@plt>
   13064:	mov	r0, r9
   13068:	b	12dc4 <__assert_fail@plt+0x11e4>
   1306c:	ldr	ip, [r4, #24]
   13070:	movw	r1, #41032	; 0xa048
   13074:	ldr	r2, [r4, #16]
   13078:	movt	r1, #2
   1307c:	ldr	r3, [r4, #4]
   13080:	mov	r0, #1
   13084:	str	ip, [sp]
   13088:	ldrb	lr, [r5]
   1308c:	ldr	ip, [r4, #12]
   13090:	stmib	sp, {ip, lr}
   13094:	bl	11a60 <__printf_chk@plt>
   13098:	b	12fc4 <__assert_fail@plt+0x13e4>
   1309c:	mov	r0, r4
   130a0:	bl	21044 <__assert_fail@plt+0xf464>
   130a4:	mov	r4, r0
   130a8:	rsb	r0, r9, #0
   130ac:	bl	11928 <strerror@plt>
   130b0:	mov	r2, r4
   130b4:	movw	r1, #40980	; 0xa014
   130b8:	movt	r1, #2
   130bc:	mov	r3, r0
   130c0:	mov	r0, #3
   130c4:	bl	19fe0 <__assert_fail@plt+0x8400>
   130c8:	mov	r0, r9
   130cc:	b	12dc4 <__assert_fail@plt+0x11e4>
   130d0:	bl	21050 <__assert_fail@plt+0xf470>
   130d4:	movw	r5, #61884	; 0xf1bc
   130d8:	movt	r5, #3
   130dc:	movw	r1, #40956	; 0x9ffc
   130e0:	movw	r2, #40968	; 0xa008
   130e4:	movt	r1, #2
   130e8:	ldrb	ip, [r5]
   130ec:	movt	r2, #2
   130f0:	str	ip, [sp]
   130f4:	mov	r3, r0
   130f8:	mov	r0, #1
   130fc:	bl	11a60 <__printf_chk@plt>
   13100:	b	12c6c <__assert_fail@plt+0x108c>
   13104:	ldr	r0, [r4, #4]
   13108:	movw	r1, #41100	; 0xa08c
   1310c:	ldr	r3, [r4, #16]
   13110:	movt	r1, #2
   13114:	ldrb	lr, [r5]
   13118:	movw	r2, #41120	; 0xa0a0
   1311c:	str	r0, [sp]
   13120:	movt	r2, #2
   13124:	ldr	ip, [r4, #24]
   13128:	mov	r0, #1
   1312c:	str	ip, [sp, #4]
   13130:	ldr	ip, [r4, #12]
   13134:	str	lr, [sp, #12]
   13138:	str	ip, [sp, #8]
   1313c:	bl	11a60 <__printf_chk@plt>
   13140:	b	12e44 <__assert_fail@plt+0x1264>
   13144:	mov	r9, r7
   13148:	b	12dac <__assert_fail@plt+0x11cc>
   1314c:	bl	11838 <__stack_chk_fail@plt>
   13150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13154:	sub	sp, sp, #4608	; 0x1200
   13158:	sub	sp, sp, #44	; 0x2c
   1315c:	movw	fp, #61944	; 0xf1f8
   13160:	movt	fp, #3
   13164:	movw	ip, #61968	; 0xf210
   13168:	movt	ip, #3
   1316c:	str	ip, [sp, #16]
   13170:	ldr	lr, [fp]
   13174:	movw	ip, #61884	; 0xf1bc
   13178:	movt	ip, #3
   1317c:	str	ip, [sp, #20]
   13180:	add	ip, sp, #4608	; 0x1200
   13184:	mov	r2, #0
   13188:	mov	r3, #60928	; 0xee00
   1318c:	movw	sl, #60936	; 0xee08
   13190:	movt	r3, #65535	; 0xffff
   13194:	movw	r7, #61980	; 0xf21c
   13198:	mov	r8, r1
   1319c:	add	ip, ip, #40	; 0x28
   131a0:	add	r1, sp, #8192	; 0x2000
   131a4:	movt	sl, #65535	; 0xffff
   131a8:	movt	r7, #3
   131ac:	add	r4, sp, #48	; 0x30
   131b0:	mov	r6, r2
   131b4:	mov	r5, r0
   131b8:	mov	r9, r2
   131bc:	str	r2, [sp, #24]
   131c0:	str	lr, [r1, #-3548]	; 0xfffff224
   131c4:	str	r2, [ip, r3]
   131c8:	add	lr, sp, #4608	; 0x1200
   131cc:	str	r4, [sp]
   131d0:	add	lr, lr, #40	; 0x28
   131d4:	movw	r2, #42056	; 0xa448
   131d8:	movw	r3, #40684	; 0x9eec
   131dc:	movt	r2, #2
   131e0:	movt	r3, #2
   131e4:	mov	r0, r5
   131e8:	mov	r1, r8
   131ec:	str	r9, [lr, sl]
   131f0:	bl	11970 <getopt_long@plt>
   131f4:	cmn	r0, #1
   131f8:	beq	13418 <__assert_fail@plt+0x1838>
   131fc:	sub	r3, r0, #48	; 0x30
   13200:	cmp	r3, #64	; 0x40
   13204:	ldrls	pc, [pc, r3, lsl #2]
   13208:	b	133fc <__assert_fail@plt+0x181c>
   1320c:	andeq	r3, r1, r8, lsr r3
   13210:	strdeq	r3, [r1], -ip
   13214:	strdeq	r3, [r1], -ip
   13218:	strdeq	r3, [r1], -ip
   1321c:	strdeq	r3, [r1], -ip
   13220:	strdeq	r3, [r1], -ip
   13224:	strdeq	r3, [r1], -ip
   13228:	strdeq	r3, [r1], -ip
   1322c:	strdeq	r3, [r1], -ip
   13230:	strdeq	r3, [r1], -ip
   13234:	strdeq	r3, [r1], -ip
   13238:	strdeq	r3, [r1], -ip
   1323c:	strdeq	r3, [r1], -ip
   13240:	strdeq	r3, [r1], -ip
   13244:	strdeq	r3, [r1], -ip
   13248:	andeq	r3, r1, r0, lsl r3
   1324c:	strdeq	r3, [r1], -ip
   13250:	strdeq	r3, [r1], -ip
   13254:	strdeq	r3, [r1], -ip
   13258:	strdeq	r3, [r1], -ip
   1325c:	strdeq	r3, [r1], -ip
   13260:	strdeq	r3, [r1], -ip
   13264:	andeq	r3, r1, ip, ror #7
   13268:	strdeq	r3, [r1], -ip
   1326c:	strdeq	r3, [r1], -ip
   13270:	strdeq	r3, [r1], -ip
   13274:	strdeq	r3, [r1], -ip
   13278:	strdeq	r3, [r1], -ip
   1327c:	strdeq	r3, [r1], -ip
   13280:	strdeq	r3, [r1], -ip
   13284:	strdeq	r3, [r1], -ip
   13288:	strdeq	r3, [r1], -ip
   1328c:	strdeq	r3, [r1], -ip
   13290:	strdeq	r3, [r1], -ip
   13294:	strdeq	r3, [r1], -ip
   13298:	strdeq	r3, [r1], -ip
   1329c:	strdeq	r3, [r1], -ip
   132a0:	strdeq	r3, [r1], -ip
   132a4:	ldrdeq	r3, [r1], -r8
   132a8:	strdeq	r3, [r1], -ip
   132ac:	strdeq	r3, [r1], -ip
   132b0:	strdeq	r3, [r1], -ip
   132b4:	strdeq	r3, [r1], -ip
   132b8:	strdeq	r3, [r1], -ip
   132bc:	strdeq	r3, [r1], -ip
   132c0:	strdeq	r3, [r1], -ip
   132c4:	strdeq	r3, [r1], -ip
   132c8:	strdeq	r3, [r1], -ip
   132cc:	strdeq	r3, [r1], -ip
   132d0:	andeq	r3, r1, r8, asr #7
   132d4:			; <UNDEFINED> instruction: 0x000133bc
   132d8:	strdeq	r3, [r1], -ip
   132dc:	andeq	r3, r1, ip, lsr #7
   132e0:	strdeq	r3, [r1], -ip
   132e4:	strdeq	r3, [r1], -ip
   132e8:	strdeq	r3, [r1], -ip
   132ec:	andeq	r3, r1, r8, lsl #7
   132f0:	strdeq	r3, [r1], -ip
   132f4:	strdeq	r3, [r1], -ip
   132f8:	andeq	r3, r1, r8, ror r3
   132fc:	andeq	r3, r1, r8, ror #6
   13300:	strdeq	r3, [r1], -ip
   13304:	andeq	r3, r1, r8, asr r3
   13308:	strdeq	r3, [r1], -ip
   1330c:	andeq	r3, r1, r8, asr #6
   13310:	mov	r4, #1
   13314:	add	r1, sp, #8192	; 0x2000
   13318:	mov	r0, r4
   1331c:	ldr	r2, [r1, #-3548]	; 0xfffff224
   13320:	ldr	r3, [fp]
   13324:	cmp	r2, r3
   13328:	bne	13754 <__assert_fail@plt+0x1b74>
   1332c:	add	sp, sp, #4608	; 0x1200
   13330:	add	sp, sp, #44	; 0x2c
   13334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13338:	ldr	ip, [sp, #20]
   1333c:	mov	r1, #0
   13340:	strb	r1, [ip]
   13344:	b	131c8 <__assert_fail@plt+0x15e8>
   13348:	movw	r3, #40912	; 0x9fd0
   1334c:	movt	r3, #2
   13350:	str	r3, [r7]
   13354:	b	131c8 <__assert_fail@plt+0x15e8>
   13358:	movw	r3, #40936	; 0x9fe8
   1335c:	movt	r3, #2
   13360:	str	r3, [r7]
   13364:	b	131c8 <__assert_fail@plt+0x15e8>
   13368:	movw	r3, #41172	; 0xa0d4
   1336c:	movt	r3, #2
   13370:	str	r3, [r7]
   13374:	b	131c8 <__assert_fail@plt+0x15e8>
   13378:	ldr	ip, [sp, #16]
   1337c:	ldr	ip, [ip]
   13380:	str	ip, [sp, #24]
   13384:	b	131c8 <__assert_fail@plt+0x15e8>
   13388:	movw	r3, #61936	; 0xf1f0
   1338c:	movt	r3, #3
   13390:	movw	r1, #41180	; 0xa0dc
   13394:	mov	r0, #1
   13398:	ldr	r2, [r3]
   1339c:	movt	r1, #2
   133a0:	bl	11a60 <__printf_chk@plt>
   133a4:	mov	r4, #0
   133a8:	b	13314 <__assert_fail@plt+0x1734>
   133ac:	movw	r3, #41160	; 0xa0c8
   133b0:	movt	r3, #2
   133b4:	str	r3, [r7]
   133b8:	b	131c8 <__assert_fail@plt+0x15e8>
   133bc:	ldr	ip, [sp, #16]
   133c0:	ldr	r6, [ip]
   133c4:	b	131c8 <__assert_fail@plt+0x15e8>
   133c8:	movw	r3, #41152	; 0xa0c0
   133cc:	movt	r3, #2
   133d0:	str	r3, [r7]
   133d4:	b	131c8 <__assert_fail@plt+0x15e8>
   133d8:	movw	r0, #39000	; 0x9858
   133dc:	movt	r0, #2
   133e0:	bl	11904 <puts@plt>
   133e4:	mov	r4, #0
   133e8:	b	13314 <__assert_fail@plt+0x1734>
   133ec:	ldr	ip, [sp, #16]
   133f0:	ldr	r3, [ip]
   133f4:	str	r3, [r7]
   133f8:	b	131c8 <__assert_fail@plt+0x15e8>
   133fc:	mov	r2, r0
   13400:	movw	r1, #39916	; 0x9bec
   13404:	mov	r0, #3
   13408:	movt	r1, #2
   1340c:	bl	19fe0 <__assert_fail@plt+0x8400>
   13410:	mov	r4, #1
   13414:	b	13314 <__assert_fail@plt+0x1734>
   13418:	movw	r7, #61952	; 0xf200
   1341c:	movt	r7, #3
   13420:	ldr	r3, [r7]
   13424:	cmp	r5, r3
   13428:	ble	13620 <__assert_fail@plt+0x1a40>
   1342c:	ldr	ip, [sp, #24]
   13430:	cmp	r6, #0
   13434:	cmpeq	ip, #0
   13438:	moveq	r0, #0
   1343c:	movne	r0, #1
   13440:	beq	1348c <__assert_fail@plt+0x18ac>
   13444:	cmp	r6, #0
   13448:	movw	r3, #50108	; 0xc3bc
   1344c:	movt	r3, #2
   13450:	moveq	r6, r3
   13454:	cmp	ip, #0
   13458:	beq	13700 <__assert_fail@plt+0x1b20>
   1345c:	ldr	ip, [sp, #24]
   13460:	mov	r1, #4096	; 0x1000
   13464:	str	r6, [sp, #4]
   13468:	movw	r2, #41860	; 0xa384
   1346c:	add	r0, sp, #548	; 0x224
   13470:	movt	r2, #2
   13474:	str	ip, [sp, #8]
   13478:	mov	r3, r1
   1347c:	str	r2, [sp]
   13480:	mov	r2, #1
   13484:	bl	11bd4 <__snprintf_chk@plt>
   13488:	add	r0, sp, #548	; 0x224
   1348c:	add	r1, sp, #40	; 0x28
   13490:	bl	1bf20 <__assert_fail@plt+0xa340>
   13494:	cmp	r0, #0
   13498:	str	r0, [sp, #24]
   1349c:	beq	1373c <__assert_fail@plt+0x1b5c>
   134a0:	ldr	r9, [r7]
   134a4:	cmp	r5, r9
   134a8:	ble	13734 <__assert_fail@plt+0x1b54>
   134ac:	sub	r3, r9, #-1073741823	; 0xc0000001
   134b0:	movw	r7, #60932	; 0xee04
   134b4:	movt	r7, #65535	; 0xffff
   134b8:	movw	ip, #60936	; 0xee08
   134bc:	add	r3, r8, r3, lsl #2
   134c0:	movt	ip, #65535	; 0xffff
   134c4:	str	r3, [sp, #20]
   134c8:	str	ip, [sp, #16]
   134cc:	mov	ip, #0
   134d0:	str	r5, [sp, #28]
   134d4:	str	ip, [sp, #32]
   134d8:	str	fp, [sp, #36]	; 0x24
   134dc:	ldr	ip, [sp, #20]
   134e0:	mov	r0, #3
   134e4:	mov	r2, r4
   134e8:	ldr	r8, [ip, #4]!
   134ec:	mov	r1, r8
   134f0:	str	ip, [sp, #20]
   134f4:	bl	11b74 <__xstat64@plt>
   134f8:	cmp	r0, #0
   134fc:	bne	13510 <__assert_fail@plt+0x1930>
   13500:	ldr	r3, [r4, #16]
   13504:	and	r3, r3, #61440	; 0xf000
   13508:	cmp	r3, #32768	; 0x8000
   1350c:	beq	13658 <__assert_fail@plt+0x1a78>
   13510:	ldr	ip, [sp, #16]
   13514:	add	lr, sp, #4608	; 0x1200
   13518:	add	lr, lr, #40	; 0x28
   1351c:	ldr	r0, [sp, #24]
   13520:	mov	r1, r8
   13524:	mov	r2, r4
   13528:	mov	r3, #0
   1352c:	str	r3, [lr, ip]
   13530:	bl	20c10 <__assert_fail@plt+0xf030>
   13534:	subs	r6, r0, #0
   13538:	blt	136d4 <__assert_fail@plt+0x1af4>
   1353c:	add	lr, sp, #4608	; 0x1200
   13540:	ldr	ip, [sp, #16]
   13544:	add	lr, lr, #40	; 0x28
   13548:	ldr	r2, [lr, ip]
   1354c:	cmp	r2, #0
   13550:	beq	13638 <__assert_fail@plt+0x1a58>
   13554:	mov	r1, #2
   13558:	add	r3, sp, #44	; 0x2c
   1355c:	ldr	r0, [sp, #24]
   13560:	bl	21498 <__assert_fail@plt+0xf8b8>
   13564:	ldr	ip, [sp, #16]
   13568:	add	lr, sp, #4608	; 0x1200
   1356c:	add	lr, lr, #40	; 0x28
   13570:	mov	r6, r0
   13574:	ldr	r0, [lr, ip]
   13578:	bl	207dc <__assert_fail@plt+0xebfc>
   1357c:	cmp	r6, #0
   13580:	blt	136ec <__assert_fail@plt+0x1b0c>
   13584:	add	r1, sp, #4608	; 0x1200
   13588:	add	r1, r1, #40	; 0x28
   1358c:	ldr	fp, [r1, r7]
   13590:	cmp	fp, #0
   13594:	beq	13638 <__assert_fail@plt+0x1a58>
   13598:	mov	r0, fp
   1359c:	movw	r5, #60932	; 0xee04
   135a0:	bl	21034 <__assert_fail@plt+0xf454>
   135a4:	movt	r5, #65535	; 0xffff
   135a8:	mov	sl, r0
   135ac:	bl	12c18 <__assert_fail@plt+0x1038>
   135b0:	mov	r8, r0
   135b4:	mov	r0, sl
   135b8:	bl	20b98 <__assert_fail@plt+0xefb8>
   135bc:	add	r2, sp, #4608	; 0x1200
   135c0:	add	r2, r2, #40	; 0x28
   135c4:	cmp	r8, #0
   135c8:	mov	r1, fp
   135cc:	ldr	r0, [r2, r7]
   135d0:	movlt	r6, r8
   135d4:	bl	1d0f4 <__assert_fail@plt+0xb514>
   135d8:	subs	fp, r0, #0
   135dc:	bne	13598 <__assert_fail@plt+0x19b8>
   135e0:	add	r3, sp, #4608	; 0x1200
   135e4:	add	r3, r3, #40	; 0x28
   135e8:	ldr	r0, [r3, r5]
   135ec:	bl	207dc <__assert_fail@plt+0xebfc>
   135f0:	cmp	r6, #0
   135f4:	blt	13650 <__assert_fail@plt+0x1a70>
   135f8:	ldr	ip, [sp, #28]
   135fc:	add	r9, r9, #1
   13600:	cmp	r9, ip
   13604:	bne	134dc <__assert_fail@plt+0x18fc>
   13608:	ldr	ip, [sp, #32]
   1360c:	ldr	fp, [sp, #36]	; 0x24
   13610:	lsr	r4, ip, #31
   13614:	ldr	r0, [sp, #24]
   13618:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   1361c:	b	13314 <__assert_fail@plt+0x1734>
   13620:	movw	r1, #41808	; 0xa350
   13624:	mov	r0, #3
   13628:	movt	r1, #2
   1362c:	mov	r4, #1
   13630:	bl	19fe0 <__assert_fail@plt+0x8400>
   13634:	b	13314 <__assert_fail@plt+0x1734>
   13638:	mov	r2, r8
   1363c:	movw	r1, #41936	; 0xa3d0
   13640:	mov	r0, #3
   13644:	movt	r1, #2
   13648:	bl	19fe0 <__assert_fail@plt+0x8400>
   1364c:	mvn	r6, #1
   13650:	str	r6, [sp, #32]
   13654:	b	135f8 <__assert_fail@plt+0x1a18>
   13658:	mov	r0, r8
   1365c:	bl	119a0 <strlen@plt>
   13660:	mov	r1, r0
   13664:	mov	r0, r8
   13668:	bl	1b3f8 <__assert_fail@plt+0x9818>
   1366c:	cmp	r0, #0
   13670:	beq	13510 <__assert_fail@plt+0x1930>
   13674:	ldr	r0, [sp, #24]
   13678:	mov	r1, r8
   1367c:	mov	r2, r4
   13680:	bl	20598 <__assert_fail@plt+0xe9b8>
   13684:	subs	r6, r0, #0
   13688:	blt	136bc <__assert_fail@plt+0x1adc>
   1368c:	ldr	ip, [sp, #16]
   13690:	add	lr, sp, #4608	; 0x1200
   13694:	add	lr, lr, #40	; 0x28
   13698:	ldr	r0, [lr, ip]
   1369c:	bl	12c18 <__assert_fail@plt+0x1038>
   136a0:	add	lr, sp, #4608	; 0x1200
   136a4:	ldr	ip, [sp, #16]
   136a8:	add	lr, lr, #40	; 0x28
   136ac:	mov	r6, r0
   136b0:	ldr	r0, [lr, ip]
   136b4:	bl	20b98 <__assert_fail@plt+0xefb8>
   136b8:	b	135f0 <__assert_fail@plt+0x1a10>
   136bc:	mov	r2, r8
   136c0:	movw	r1, #41880	; 0xa398
   136c4:	mov	r0, #3
   136c8:	movt	r1, #2
   136cc:	bl	19fe0 <__assert_fail@plt+0x8400>
   136d0:	b	135f0 <__assert_fail@plt+0x1a10>
   136d4:	mov	r2, r8
   136d8:	movw	r1, #41908	; 0xa3b4
   136dc:	mov	r0, #3
   136e0:	movt	r1, #2
   136e4:	bl	19fe0 <__assert_fail@plt+0x8400>
   136e8:	b	135f0 <__assert_fail@plt+0x1a10>
   136ec:	movw	r1, #41960	; 0xa3e8
   136f0:	mov	r0, #3
   136f4:	movt	r1, #2
   136f8:	bl	19fe0 <__assert_fail@plt+0x8400>
   136fc:	b	135f0 <__assert_fail@plt+0x1a10>
   13700:	add	r0, sp, #156	; 0x9c
   13704:	bl	1182c <uname@plt>
   13708:	cmp	r0, #0
   1370c:	addge	ip, sp, #168	; 0xa8
   13710:	addge	ip, ip, #118	; 0x76
   13714:	strge	ip, [sp, #24]
   13718:	bge	1345c <__assert_fail@plt+0x187c>
   1371c:	movw	r1, #41840	; 0xa370
   13720:	mov	r0, #3
   13724:	movt	r1, #2
   13728:	mov	r4, #1
   1372c:	bl	19fe0 <__assert_fail@plt+0x8400>
   13730:	b	13314 <__assert_fail@plt+0x1734>
   13734:	mov	r4, #0
   13738:	b	13614 <__assert_fail@plt+0x1a34>
   1373c:	movw	r1, #39980	; 0x9c2c
   13740:	mov	r0, #3
   13744:	movt	r1, #2
   13748:	mov	r4, #1
   1374c:	bl	19fe0 <__assert_fail@plt+0x8400>
   13750:	b	13314 <__assert_fail@plt+0x1734>
   13754:	bl	11838 <__stack_chk_fail@plt>
   13758:	push	{r4, r5, lr}
   1375c:	movw	r4, #61944	; 0xf1f8
   13760:	movt	r4, #3
   13764:	sub	sp, sp, #20
   13768:	mov	r5, r0
   1376c:	movw	r0, #42588	; 0xa65c
   13770:	ldr	r3, [r4]
   13774:	movt	r0, #2
   13778:	str	r3, [sp, #12]
   1377c:	bl	118f8 <getenv@plt>
   13780:	subs	r3, r0, #0
   13784:	beq	137f8 <__assert_fail@plt+0x1c18>
   13788:	str	r5, [sp]
   1378c:	movw	r2, #42608	; 0xa670
   13790:	add	r0, sp, #8
   13794:	movt	r2, #2
   13798:	mov	r1, #1
   1379c:	bl	118ec <__asprintf_chk@plt>
   137a0:	cmp	r0, #0
   137a4:	blt	137e4 <__assert_fail@plt+0x1c04>
   137a8:	movw	r0, #42588	; 0xa65c
   137ac:	ldr	r1, [sp, #8]
   137b0:	movt	r0, #2
   137b4:	mov	r2, #1
   137b8:	bl	119b8 <setenv@plt>
   137bc:	cmp	r0, #0
   137c0:	blt	13810 <__assert_fail@plt+0x1c30>
   137c4:	ldr	r0, [sp, #8]
   137c8:	bl	117c0 <free@plt>
   137cc:	ldr	r2, [sp, #12]
   137d0:	ldr	r3, [r4]
   137d4:	cmp	r2, r3
   137d8:	bne	13828 <__assert_fail@plt+0x1c48>
   137dc:	add	sp, sp, #20
   137e0:	pop	{r4, r5, pc}
   137e4:	movw	r1, #42616	; 0xa678
   137e8:	mov	r0, #3
   137ec:	movt	r1, #2
   137f0:	bl	19fe0 <__assert_fail@plt+0x8400>
   137f4:	b	137cc <__assert_fail@plt+0x1bec>
   137f8:	mov	r1, r5
   137fc:	movw	r0, #42588	; 0xa65c
   13800:	mov	r2, #1
   13804:	movt	r0, #2
   13808:	bl	119b8 <setenv@plt>
   1380c:	b	137cc <__assert_fail@plt+0x1bec>
   13810:	movw	r1, #42664	; 0xa6a8
   13814:	mov	r0, #3
   13818:	movt	r1, #2
   1381c:	ldr	r2, [sp, #8]
   13820:	bl	19fe0 <__assert_fail@plt+0x8400>
   13824:	b	137c4 <__assert_fail@plt+0x1be4>
   13828:	bl	11838 <__stack_chk_fail@plt>
   1382c:	push	{r0, r1, r2, r3}
   13830:	movw	r3, #61988	; 0xf224
   13834:	movt	r3, #3
   13838:	push	{r4, r5, lr}
   1383c:	movw	r4, #61944	; 0xf1f8
   13840:	movt	r4, #3
   13844:	ldr	r2, [r3]
   13848:	sub	sp, sp, #12
   1384c:	ldr	r3, [r4]
   13850:	cmp	r2, #0
   13854:	ldr	r2, [sp, #24]
   13858:	str	r3, [sp, #4]
   1385c:	bne	13894 <__assert_fail@plt+0x1cb4>
   13860:	movw	r3, #61888	; 0xf1c0
   13864:	movt	r3, #3
   13868:	ldr	r3, [r3]
   1386c:	cmp	r3, #4
   13870:	bgt	13894 <__assert_fail@plt+0x1cb4>
   13874:	ldr	r2, [sp, #4]
   13878:	ldr	r3, [r4]
   1387c:	cmp	r2, r3
   13880:	bne	138c0 <__assert_fail@plt+0x1ce0>
   13884:	add	sp, sp, #12
   13888:	pop	{r4, r5, lr}
   1388c:	add	sp, sp, #16
   13890:	bx	lr
   13894:	add	ip, sp, #28
   13898:	movw	r5, #61960	; 0xf208
   1389c:	movt	r5, #3
   138a0:	mov	r1, #1
   138a4:	mov	r3, ip
   138a8:	str	ip, [sp]
   138ac:	ldr	r0, [r5]
   138b0:	bl	11940 <__vfprintf_chk@plt>
   138b4:	ldr	r0, [r5]
   138b8:	bl	1179c <fflush@plt>
   138bc:	b	13874 <__assert_fail@plt+0x1c94>
   138c0:	bl	11838 <__stack_chk_fail@plt>
   138c4:	push	{r3, r4, r5, r6, r7, lr}
   138c8:	mov	r4, r0
   138cc:	bl	21044 <__assert_fail@plt+0xf464>
   138d0:	mov	r5, r0
   138d4:	mov	r0, r4
   138d8:	bl	21044 <__assert_fail@plt+0xf464>
   138dc:	mov	r1, r0
   138e0:	movw	r0, #42708	; 0xa6d4
   138e4:	movt	r0, #2
   138e8:	bl	1382c <__assert_fail@plt+0x1c4c>
   138ec:	movw	r3, #62008	; 0xf238
   138f0:	movt	r3, #3
   138f4:	ldr	r3, [r3]
   138f8:	cmp	r3, #0
   138fc:	bne	13994 <__assert_fail@plt+0x1db4>
   13900:	movw	r3, #61992	; 0xf228
   13904:	movt	r3, #3
   13908:	mov	r0, r4
   1390c:	ldr	r1, [r3]
   13910:	cmp	r1, #0
   13914:	movne	r1, #512	; 0x200
   13918:	moveq	r1, #0
   1391c:	bl	2110c <__assert_fail@plt+0xf52c>
   13920:	cmn	r0, #17
   13924:	mov	r7, r0
   13928:	beq	1399c <__assert_fail@plt+0x1dbc>
   1392c:	mov	r0, r4
   13930:	bl	20f2c <__assert_fail@plt+0xf34c>
   13934:	subs	r6, r0, #0
   13938:	beq	139d4 <__assert_fail@plt+0x1df4>
   1393c:	mov	r4, r6
   13940:	b	13960 <__assert_fail@plt+0x1d80>
   13944:	mov	r0, r5
   13948:	bl	20b98 <__assert_fail@plt+0xefb8>
   1394c:	mov	r1, r4
   13950:	mov	r0, r6
   13954:	bl	1d0f4 <__assert_fail@plt+0xb514>
   13958:	subs	r4, r0, #0
   1395c:	beq	13984 <__assert_fail@plt+0x1da4>
   13960:	mov	r0, r4
   13964:	bl	21034 <__assert_fail@plt+0xf454>
   13968:	mov	r5, r0
   1396c:	bl	22dd4 <__assert_fail@plt+0x111f4>
   13970:	cmp	r0, #0
   13974:	bne	13944 <__assert_fail@plt+0x1d64>
   13978:	mov	r0, r5
   1397c:	bl	138c4 <__assert_fail@plt+0x1ce4>
   13980:	b	13944 <__assert_fail@plt+0x1d64>
   13984:	mov	r0, r6
   13988:	bl	207dc <__assert_fail@plt+0xebfc>
   1398c:	mov	r0, r7
   13990:	pop	{r3, r4, r5, r6, r7, pc}
   13994:	mov	r0, #0
   13998:	pop	{r3, r4, r5, r6, r7, pc}
   1399c:	movw	r3, #62000	; 0xf230
   139a0:	movt	r3, #3
   139a4:	ldr	r3, [r3]
   139a8:	cmp	r3, #0
   139ac:	moveq	r7, r3
   139b0:	beq	1392c <__assert_fail@plt+0x1d4c>
   139b4:	movw	r3, #61892	; 0xf1c4
   139b8:	movt	r3, #3
   139bc:	mov	r2, r5
   139c0:	movw	r1, #42720	; 0xa6e0
   139c4:	ldr	r0, [r3]
   139c8:	movt	r1, #2
   139cc:	bl	19fe0 <__assert_fail@plt+0x8400>
   139d0:	b	1392c <__assert_fail@plt+0x1d4c>
   139d4:	mov	r0, r7
   139d8:	pop	{r3, r4, r5, r6, r7, pc}
   139dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139e0:	movw	fp, #61944	; 0xf1f8
   139e4:	movt	fp, #3
   139e8:	sub	sp, sp, #28
   139ec:	add	r3, sp, #24
   139f0:	mov	sl, r2
   139f4:	ldr	ip, [fp]
   139f8:	mov	r2, #0
   139fc:	str	r2, [r3, #-8]!
   13a00:	mov	r2, r3
   13a04:	mov	r6, r1
   13a08:	str	ip, [sp, #20]
   13a0c:	bl	20c10 <__assert_fail@plt+0xf030>
   13a10:	subs	r5, r0, #0
   13a14:	movlt	r0, r5
   13a18:	blt	13ba0 <__assert_fail@plt+0x1fc0>
   13a1c:	ldr	r4, [sp, #16]
   13a20:	cmp	r4, #0
   13a24:	beq	13b80 <__assert_fail@plt+0x1fa0>
   13a28:	movw	r3, #62012	; 0xf23c
   13a2c:	movt	r3, #3
   13a30:	ldr	r3, [r3]
   13a34:	cmp	r3, #0
   13a38:	movne	r8, #2
   13a3c:	beq	13c58 <__assert_fail@plt+0x2078>
   13a40:	movw	r3, #62020	; 0xf244
   13a44:	movt	r3, #3
   13a48:	ldr	r3, [r3]
   13a4c:	cmp	r3, #0
   13a50:	beq	13c40 <__assert_fail@plt+0x2060>
   13a54:	orr	r8, r8, #1
   13a58:	movw	r3, #62004	; 0xf234
   13a5c:	movt	r3, #3
   13a60:	ldr	r3, [r3]
   13a64:	cmp	r3, #0
   13a68:	movw	r3, #62016	; 0xf240
   13a6c:	movt	r3, #3
   13a70:	orrne	r8, r8, #4
   13a74:	ldr	r3, [r3]
   13a78:	cmp	r3, #0
   13a7c:	movw	r3, #62008	; 0xf238
   13a80:	movt	r3, #3
   13a84:	orrne	r8, r8, #8
   13a88:	ldr	r3, [r3]
   13a8c:	cmp	r3, #0
   13a90:	movw	r3, #61988	; 0xf224
   13a94:	movt	r3, #3
   13a98:	orrne	r8, r8, #16
   13a9c:	ldr	r3, [r3]
   13aa0:	cmp	r3, #0
   13aa4:	movwne	r9, #15480	; 0x3c78
   13aa8:	movtne	r9, #1
   13aac:	beq	13c1c <__assert_fail@plt+0x203c>
   13ab0:	movw	r3, #62028	; 0xf24c
   13ab4:	movt	r3, #3
   13ab8:	movw	r7, #62024	; 0xf248
   13abc:	movt	r7, #3
   13ac0:	ldr	r3, [r3]
   13ac4:	cmp	r3, #0
   13ac8:	movw	r3, #62000	; 0xf230
   13acc:	movt	r3, #3
   13ad0:	orrne	r8, r8, #393216	; 0x60000
   13ad4:	orreq	r8, r8, #262144	; 0x40000
   13ad8:	ldr	r3, [r3]
   13adc:	cmp	r3, #0
   13ae0:	orrne	r8, r8, #32
   13ae4:	b	13b18 <__assert_fail@plt+0x1f38>
   13ae8:	bl	21044 <__assert_fail@plt+0xf464>
   13aec:	bl	11904 <puts@plt>
   13af0:	cmp	r5, #0
   13af4:	movge	r5, #0
   13af8:	blt	13b50 <__assert_fail@plt+0x1f70>
   13afc:	mov	r0, r6
   13b00:	bl	20b98 <__assert_fail@plt+0xefb8>
   13b04:	mov	r1, r4
   13b08:	ldr	r0, [sp, #16]
   13b0c:	bl	1d0f4 <__assert_fail@plt+0xb514>
   13b10:	subs	r4, r0, #0
   13b14:	beq	13bb8 <__assert_fail@plt+0x1fd8>
   13b18:	mov	r0, r4
   13b1c:	bl	21034 <__assert_fail@plt+0xf454>
   13b20:	ldr	r3, [r7]
   13b24:	cmp	r3, #0
   13b28:	mov	r6, r0
   13b2c:	bne	13ae8 <__assert_fail@plt+0x1f08>
   13b30:	stm	sp, {r3, r9}
   13b34:	mov	r1, r8
   13b38:	mov	r2, sl
   13b3c:	bl	22294 <__assert_fail@plt+0x106b4>
   13b40:	mov	r5, r0
   13b44:	cmp	r5, #0
   13b48:	movge	r5, #0
   13b4c:	bge	13afc <__assert_fail@plt+0x1f1c>
   13b50:	cmn	r5, #17
   13b54:	beq	13bfc <__assert_fail@plt+0x201c>
   13b58:	cmn	r5, #2
   13b5c:	bne	13bc8 <__assert_fail@plt+0x1fe8>
   13b60:	mov	r0, r6
   13b64:	bl	21044 <__assert_fail@plt+0xf464>
   13b68:	movw	r1, #42804	; 0xa734
   13b6c:	movt	r1, #2
   13b70:	mov	r2, r0
   13b74:	mov	r0, #3
   13b78:	bl	19fe0 <__assert_fail@plt+0x8400>
   13b7c:	b	13afc <__assert_fail@plt+0x1f1c>
   13b80:	movw	r3, #61892	; 0xf1c4
   13b84:	movt	r3, #3
   13b88:	mov	r2, r6
   13b8c:	movw	r1, #41936	; 0xa3d0
   13b90:	ldr	r0, [r3]
   13b94:	movt	r1, #2
   13b98:	bl	19fe0 <__assert_fail@plt+0x8400>
   13b9c:	mvn	r0, #1
   13ba0:	ldr	r2, [sp, #20]
   13ba4:	ldr	r3, [fp]
   13ba8:	cmp	r2, r3
   13bac:	bne	13c74 <__assert_fail@plt+0x2094>
   13bb0:	add	sp, sp, #28
   13bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb8:	ldr	r0, [sp, #16]
   13bbc:	bl	207dc <__assert_fail@plt+0xebfc>
   13bc0:	mov	r0, r5
   13bc4:	b	13ba0 <__assert_fail@plt+0x1fc0>
   13bc8:	mov	r0, r6
   13bcc:	bl	21044 <__assert_fail@plt+0xf464>
   13bd0:	mov	r2, r0
   13bd4:	rsb	r0, r5, #0
   13bd8:	str	r2, [sp, #12]
   13bdc:	bl	11928 <strerror@plt>
   13be0:	ldr	r2, [sp, #12]
   13be4:	movw	r1, #42888	; 0xa788
   13be8:	movt	r1, #2
   13bec:	mov	r3, r0
   13bf0:	mov	r0, #3
   13bf4:	bl	19fe0 <__assert_fail@plt+0x8400>
   13bf8:	b	13afc <__assert_fail@plt+0x1f1c>
   13bfc:	mov	r0, r6
   13c00:	bl	21044 <__assert_fail@plt+0xf464>
   13c04:	movw	r1, #42752	; 0xa700
   13c08:	movt	r1, #2
   13c0c:	mov	r2, r0
   13c10:	mov	r0, #3
   13c14:	bl	19fe0 <__assert_fail@plt+0x8400>
   13c18:	b	13afc <__assert_fail@plt+0x1f1c>
   13c1c:	movw	r2, #61888	; 0xf1c0
   13c20:	movt	r2, #3
   13c24:	movw	r3, #15480	; 0x3c78
   13c28:	movt	r3, #1
   13c2c:	ldr	r9, [r2]
   13c30:	cmp	r9, #4
   13c34:	movgt	r9, r3
   13c38:	movle	r9, #0
   13c3c:	b	13ab0 <__assert_fail@plt+0x1ed0>
   13c40:	movw	r3, #61992	; 0xf228
   13c44:	movt	r3, #3
   13c48:	ldr	r3, [r3]
   13c4c:	cmp	r3, #0
   13c50:	beq	13a58 <__assert_fail@plt+0x1e78>
   13c54:	b	13a54 <__assert_fail@plt+0x1e74>
   13c58:	movw	r3, #61992	; 0xf228
   13c5c:	movt	r3, #3
   13c60:	ldr	r8, [r3]
   13c64:	cmp	r8, #0
   13c68:	movne	r8, #2
   13c6c:	moveq	r8, #0
   13c70:	b	13a40 <__assert_fail@plt+0x1e60>
   13c74:	bl	11838 <__stack_chk_fail@plt>
   13c78:	cmp	r1, #0
   13c7c:	push	{r4, r5, r6, lr}
   13c80:	mov	r4, r2
   13c84:	mov	r5, r0
   13c88:	bne	13cbc <__assert_fail@plt+0x20dc>
   13c8c:	bl	21050 <__assert_fail@plt+0xf470>
   13c90:	cmp	r0, #0
   13c94:	mov	r0, r5
   13c98:	beq	13cdc <__assert_fail@plt+0x20fc>
   13c9c:	bl	21050 <__assert_fail@plt+0xf470>
   13ca0:	mov	r3, r4
   13ca4:	movw	r1, #42944	; 0xa7c0
   13ca8:	movt	r1, #2
   13cac:	pop	{r4, r5, r6, lr}
   13cb0:	mov	r2, r0
   13cb4:	mov	r0, #1
   13cb8:	b	11a60 <__printf_chk@plt>
   13cbc:	bl	21704 <__assert_fail@plt+0xfb24>
   13cc0:	mov	r3, r4
   13cc4:	movw	r1, #42916	; 0xa7a4
   13cc8:	movt	r1, #2
   13ccc:	pop	{r4, r5, r6, lr}
   13cd0:	mov	r2, r0
   13cd4:	mov	r0, #1
   13cd8:	b	11a60 <__printf_chk@plt>
   13cdc:	bl	22014 <__assert_fail@plt+0x10434>
   13ce0:	cmp	r0, #0
   13ce4:	popne	{r4, r5, r6, pc}
   13ce8:	mov	r0, r5
   13cec:	bl	21044 <__assert_fail@plt+0xf464>
   13cf0:	movw	r1, #42932	; 0xa7b4
   13cf4:	pop	{r4, r5, r6, lr}
   13cf8:	movt	r1, #2
   13cfc:	mov	r2, r0
   13d00:	mov	r0, #1
   13d04:	b	11a60 <__printf_chk@plt>
   13d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d0c:	movw	sl, #61944	; 0xf1f8
   13d10:	movt	sl, #3
   13d14:	sub	sp, sp, #28
   13d18:	mov	r7, r1
   13d1c:	mov	r4, r0
   13d20:	ldr	r3, [sl]
   13d24:	str	r3, [sp, #20]
   13d28:	bl	21044 <__assert_fail@plt+0xf464>
   13d2c:	movw	r3, #62004	; 0xf234
   13d30:	movt	r3, #3
   13d34:	mov	ip, #0
   13d38:	str	ip, [sp, #12]
   13d3c:	ldr	r3, [r3]
   13d40:	str	ip, [sp, #16]
   13d44:	cmp	r3, ip
   13d48:	mov	r6, r0
   13d4c:	beq	13f00 <__assert_fail@plt+0x2320>
   13d50:	movw	r3, #62016	; 0xf240
   13d54:	movt	r3, #3
   13d58:	ldr	r5, [r3]
   13d5c:	cmp	r5, #0
   13d60:	movne	r5, #0
   13d64:	beq	13f48 <__assert_fail@plt+0x2368>
   13d68:	ldr	r0, [sp, #16]
   13d6c:	mov	r1, #0
   13d70:	bl	14090 <__assert_fail@plt+0x24b0>
   13d74:	cmp	r7, #0
   13d78:	beq	13d90 <__assert_fail@plt+0x21b0>
   13d7c:	movw	r3, #61996	; 0xf22c
   13d80:	movt	r3, #3
   13d84:	ldr	r3, [r3]
   13d88:	cmp	r3, #0
   13d8c:	bne	13f2c <__assert_fail@plt+0x234c>
   13d90:	movw	r3, #62016	; 0xf240
   13d94:	movt	r3, #3
   13d98:	ldr	r3, [r3]
   13d9c:	cmp	r3, #0
   13da0:	beq	13eb4 <__assert_fail@plt+0x22d4>
   13da4:	cmp	r5, #0
   13da8:	beq	13f80 <__assert_fail@plt+0x23a0>
   13dac:	mov	r0, r4
   13db0:	bl	21044 <__assert_fail@plt+0xf464>
   13db4:	str	r0, [sp, #4]
   13db8:	mov	r0, r5
   13dbc:	bl	11a18 <__strdup@plt>
   13dc0:	subs	r4, r0, #0
   13dc4:	beq	14084 <__assert_fail@plt+0x24a4>
   13dc8:	bl	119a0 <strlen@plt>
   13dcc:	mov	r9, #0
   13dd0:	mov	r5, r0
   13dd4:	b	13e28 <__assert_fail@plt+0x2248>
   13dd8:	rsb	r6, r4, r8
   13ddc:	add	r8, r8, #13
   13de0:	rsb	r7, r6, r5
   13de4:	sub	r5, r5, #13
   13de8:	add	r0, r5, #1
   13dec:	sub	r7, r7, #13
   13df0:	bl	11910 <malloc@plt>
   13df4:	subs	fp, r0, #0
   13df8:	beq	13ef0 <__assert_fail@plt+0x2310>
   13dfc:	mov	r1, r4
   13e00:	mov	r2, r6
   13e04:	bl	117e4 <memcpy@plt>
   13e08:	add	r0, fp, r6
   13e0c:	mov	r1, r8
   13e10:	mov	r2, r7
   13e14:	bl	117e4 <memcpy@plt>
   13e18:	mov	r0, r4
   13e1c:	strb	r9, [fp, r5]
   13e20:	mov	r4, fp
   13e24:	bl	117c0 <free@plt>
   13e28:	movw	r1, #43020	; 0xa80c
   13e2c:	mov	r0, r4
   13e30:	movt	r1, #2
   13e34:	bl	11724 <strstr@plt>
   13e38:	subs	r8, r0, #0
   13e3c:	bne	13dd8 <__assert_fail@plt+0x21f8>
   13e40:	movw	r0, #47232	; 0xb880
   13e44:	movw	r1, #43036	; 0xa81c
   13e48:	movt	r0, #2
   13e4c:	movt	r1, #2
   13e50:	mov	r2, r4
   13e54:	bl	1382c <__assert_fail@plt+0x1c4c>
   13e58:	movw	r3, #62008	; 0xf238
   13e5c:	movt	r3, #3
   13e60:	ldr	r3, [r3]
   13e64:	cmp	r3, #0
   13e68:	beq	13f90 <__assert_fail@plt+0x23b0>
   13e6c:	mov	r0, r4
   13e70:	bl	117c0 <free@plt>
   13e74:	cmp	r8, #0
   13e78:	blt	13e88 <__assert_fail@plt+0x22a8>
   13e7c:	ldr	r0, [sp, #12]
   13e80:	mov	r1, #0
   13e84:	bl	14090 <__assert_fail@plt+0x24b0>
   13e88:	ldr	r0, [sp, #12]
   13e8c:	bl	207dc <__assert_fail@plt+0xebfc>
   13e90:	ldr	r0, [sp, #16]
   13e94:	bl	207dc <__assert_fail@plt+0xebfc>
   13e98:	mov	r0, r8
   13e9c:	ldr	r2, [sp, #20]
   13ea0:	ldr	r3, [sl]
   13ea4:	cmp	r2, r3
   13ea8:	bne	1408c <__assert_fail@plt+0x24ac>
   13eac:	add	sp, sp, #28
   13eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb4:	cmp	r5, #0
   13eb8:	bne	13dac <__assert_fail@plt+0x21cc>
   13ebc:	mov	r0, r4
   13ec0:	bl	22dd4 <__assert_fail@plt+0x111f4>
   13ec4:	cmp	r0, #0
   13ec8:	ble	13f80 <__assert_fail@plt+0x23a0>
   13ecc:	movw	r3, #61892	; 0xf1c4
   13ed0:	movt	r3, #3
   13ed4:	mov	r2, r6
   13ed8:	movw	r1, #42996	; 0xa7f4
   13edc:	ldr	r0, [r3]
   13ee0:	movt	r1, #2
   13ee4:	bl	19fe0 <__assert_fail@plt+0x8400>
   13ee8:	mvn	r8, #15
   13eec:	b	13e88 <__assert_fail@plt+0x22a8>
   13ef0:	mov	r0, r4
   13ef4:	mvn	r8, #11
   13ef8:	bl	117c0 <free@plt>
   13efc:	b	13e88 <__assert_fail@plt+0x22a8>
   13f00:	mov	r0, r4
   13f04:	add	r1, sp, #12
   13f08:	add	r2, sp, #16
   13f0c:	bl	217bc <__assert_fail@plt+0xfbdc>
   13f10:	subs	r8, r0, #0
   13f14:	blt	13ffc <__assert_fail@plt+0x241c>
   13f18:	mov	r0, r4
   13f1c:	bl	21c54 <__assert_fail@plt+0x10074>
   13f20:	subs	r5, r0, #0
   13f24:	bne	13d68 <__assert_fail@plt+0x2188>
   13f28:	b	13d50 <__assert_fail@plt+0x2170>
   13f2c:	mov	r0, r4
   13f30:	bl	20f2c <__assert_fail@plt+0xf34c>
   13f34:	mov	r1, #1
   13f38:	bl	14090 <__assert_fail@plt+0x24b0>
   13f3c:	subs	r8, r0, #0
   13f40:	bge	13d90 <__assert_fail@plt+0x21b0>
   13f44:	b	13e88 <__assert_fail@plt+0x22a8>
   13f48:	mov	r0, r4
   13f4c:	bl	22014 <__assert_fail@plt+0x10434>
   13f50:	cmp	r0, #0
   13f54:	blt	14024 <__assert_fail@plt+0x2444>
   13f58:	bne	13d68 <__assert_fail@plt+0x2188>
   13f5c:	movw	r3, #61892	; 0xf1c4
   13f60:	movt	r3, #3
   13f64:	mov	r2, r6
   13f68:	movw	r1, #40032	; 0x9c60
   13f6c:	ldr	r0, [r3]
   13f70:	movt	r1, #2
   13f74:	bl	19fe0 <__assert_fail@plt+0x8400>
   13f78:	mvn	r8, #1
   13f7c:	b	13e88 <__assert_fail@plt+0x22a8>
   13f80:	mov	r0, r4
   13f84:	bl	138c4 <__assert_fail@plt+0x1ce4>
   13f88:	mov	r8, r0
   13f8c:	b	13e74 <__assert_fail@plt+0x2294>
   13f90:	ldr	r1, [sp, #4]
   13f94:	mov	r2, #1
   13f98:	movw	r0, #43044	; 0xa824
   13f9c:	movt	r0, #2
   13fa0:	bl	119b8 <setenv@plt>
   13fa4:	mov	r0, r4
   13fa8:	bl	11934 <system@plt>
   13fac:	mov	r8, r0
   13fb0:	movw	r0, #43044	; 0xa824
   13fb4:	movt	r0, #2
   13fb8:	bl	11b80 <unsetenv@plt>
   13fbc:	cmn	r8, #1
   13fc0:	beq	1405c <__assert_fail@plt+0x247c>
   13fc4:	ubfx	ip, r8, #8, #8
   13fc8:	cmp	ip, #0
   13fcc:	beq	13e6c <__assert_fail@plt+0x228c>
   13fd0:	movw	r2, #61892	; 0xf1c4
   13fd4:	movt	r2, #3
   13fd8:	ldr	r3, [sp, #4]
   13fdc:	movw	r1, #43060	; 0xa834
   13fe0:	ldr	r0, [r2]
   13fe4:	movt	r1, #2
   13fe8:	movw	r2, #43036	; 0xa81c
   13fec:	movt	r2, #2
   13ff0:	rsb	r8, ip, #0
   13ff4:	bl	19fe0 <__assert_fail@plt+0x8400>
   13ff8:	b	13e6c <__assert_fail@plt+0x228c>
   13ffc:	rsb	r0, r8, #0
   14000:	bl	11928 <strerror@plt>
   14004:	mov	r2, r6
   14008:	movw	r1, #42960	; 0xa7d0
   1400c:	movt	r1, #2
   14010:	mov	r3, r0
   14014:	mov	r0, #4
   14018:	bl	19fe0 <__assert_fail@plt+0x8400>
   1401c:	mov	r0, r8
   14020:	b	13e9c <__assert_fail@plt+0x22bc>
   14024:	movw	r3, #62000	; 0xf230
   14028:	movt	r3, #3
   1402c:	ldr	r8, [r3]
   14030:	cmp	r8, #0
   14034:	beq	13e88 <__assert_fail@plt+0x22a8>
   14038:	movw	r3, #61892	; 0xf1c4
   1403c:	movt	r3, #3
   14040:	mov	r2, r6
   14044:	movw	r1, #42720	; 0xa6e0
   14048:	ldr	r0, [r3]
   1404c:	movt	r1, #2
   14050:	bl	19fe0 <__assert_fail@plt+0x8400>
   14054:	mvn	r8, #1
   14058:	b	13e88 <__assert_fail@plt+0x22a8>
   1405c:	movw	r2, #61892	; 0xf1c4
   14060:	movt	r2, #3
   14064:	ldr	r3, [sp, #4]
   14068:	movw	r1, #43060	; 0xa834
   1406c:	ldr	r0, [r2]
   14070:	movt	r1, #2
   14074:	movw	r2, #43036	; 0xa81c
   14078:	movt	r2, #2
   1407c:	bl	19fe0 <__assert_fail@plt+0x8400>
   14080:	b	13e6c <__assert_fail@plt+0x228c>
   14084:	mvn	r8, #11
   14088:	b	13e88 <__assert_fail@plt+0x22a8>
   1408c:	bl	11838 <__stack_chk_fail@plt>
   14090:	push	{r4, r5, r6, r7, r8, lr}
   14094:	mov	r8, r1
   14098:	mov	r7, r0
   1409c:	bl	1d11c <__assert_fail@plt+0xb53c>
   140a0:	subs	r4, r0, #0
   140a4:	bne	140b8 <__assert_fail@plt+0x24d8>
   140a8:	b	140f0 <__assert_fail@plt+0x2510>
   140ac:	bl	1d0c0 <__assert_fail@plt+0xb4e0>
   140b0:	subs	r4, r0, #0
   140b4:	beq	140f0 <__assert_fail@plt+0x2510>
   140b8:	mov	r0, r4
   140bc:	bl	21034 <__assert_fail@plt+0xf454>
   140c0:	mov	r1, #0
   140c4:	mov	r6, r0
   140c8:	bl	13d08 <__assert_fail@plt+0x2128>
   140cc:	mov	r5, r0
   140d0:	mov	r0, r6
   140d4:	bl	20b98 <__assert_fail@plt+0xefb8>
   140d8:	ands	r3, r8, r5, lsr #31
   140dc:	mov	r1, r4
   140e0:	mov	r0, r7
   140e4:	beq	140ac <__assert_fail@plt+0x24cc>
   140e8:	mov	r0, r5
   140ec:	pop	{r4, r5, r6, r7, r8, pc}
   140f0:	mov	r0, #0
   140f4:	pop	{r4, r5, r6, r7, r8, pc}
   140f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140fc:	movw	sl, #61944	; 0xf1f8
   14100:	sub	sp, sp, #4544	; 0x11c0
   14104:	movt	sl, #3
   14108:	sub	sp, sp, #20
   1410c:	mov	r5, r0
   14110:	ldr	r3, [sl]
   14114:	movw	r0, #42588	; 0xa65c
   14118:	str	r1, [sp, #24]
   1411c:	add	r1, sp, #8192	; 0x2000
   14120:	movt	r0, #2
   14124:	str	r3, [r1, #-3636]	; 0xfffff1cc
   14128:	bl	118f8 <getenv@plt>
   1412c:	subs	r6, r0, #0
   14130:	beq	14a58 <__assert_fail@plt+0x2e78>
   14134:	ldrb	r3, [r6]
   14138:	cmp	r3, #0
   1413c:	beq	14a6c <__assert_fail@plt+0x2e8c>
   14140:	add	r2, r6, #1
   14144:	mov	lr, #0
   14148:	cmp	r3, #32
   1414c:	mov	ip, r2
   14150:	ldrb	r3, [r2], #1
   14154:	addeq	lr, lr, #1
   14158:	cmp	r3, #0
   1415c:	bne	14148 <__assert_fail@plt+0x2568>
   14160:	rsb	r7, r6, ip
   14164:	add	r8, r5, #3
   14168:	add	r8, r8, lr
   1416c:	add	r0, r8, r7
   14170:	lsl	r0, r0, #2
   14174:	bl	11910 <malloc@plt>
   14178:	subs	r4, r0, #0
   1417c:	beq	14b94 <__assert_fail@plt+0x2fb4>
   14180:	ldr	ip, [sp, #24]
   14184:	add	r2, r7, #1
   14188:	mov	r1, r6
   1418c:	ldr	r3, [ip]
   14190:	add	ip, r4, r8, lsl #2
   14194:	mov	r0, ip
   14198:	str	r3, [r4]
   1419c:	bl	117e4 <memcpy@plt>
   141a0:	ldrb	r2, [r4, r8, lsl #2]
   141a4:	cmp	r2, #0
   141a8:	mov	ip, r0
   141ac:	add	r0, r0, r7
   141b0:	beq	14a78 <__assert_fail@plt+0x2e98>
   141b4:	mov	r3, #0
   141b8:	mov	r1, ip
   141bc:	mov	lr, r3
   141c0:	mov	r7, #1
   141c4:	b	141dc <__assert_fail@plt+0x25fc>
   141c8:	mov	r2, r1
   141cc:	add	r1, r1, #1
   141d0:	ldrb	r2, [r2, #1]
   141d4:	cmp	r2, #0
   141d8:	beq	14254 <__assert_fail@plt+0x2674>
   141dc:	cmp	r3, #0
   141e0:	beq	144e8 <__assert_fail@plt+0x2908>
   141e4:	ldrb	r6, [r3]
   141e8:	cmp	r6, r2
   141ec:	bne	141c8 <__assert_fail@plt+0x25e8>
   141f0:	cmp	r3, ip
   141f4:	beq	147e0 <__assert_fail@plt+0x2c00>
   141f8:	sub	r6, r1, #1
   141fc:	cmp	r6, r3
   14200:	bls	14214 <__assert_fail@plt+0x2634>
   14204:	ldrb	r2, [r3, #1]
   14208:	strb	r2, [r3], #1
   1420c:	cmp	r6, r3
   14210:	bne	14204 <__assert_fail@plt+0x2624>
   14214:	sub	r8, r0, #2
   14218:	cmp	r6, r8
   1421c:	movcc	r3, r6
   14220:	bcs	14234 <__assert_fail@plt+0x2654>
   14224:	ldrb	r2, [r3, #2]
   14228:	strb	r2, [r3], #1
   1422c:	cmp	r3, r8
   14230:	bne	14224 <__assert_fail@plt+0x2644>
   14234:	sub	r2, r1, #2
   14238:	strb	lr, [r0, #-2]
   1423c:	mov	r1, r6
   14240:	mov	r0, r8
   14244:	ldrb	r2, [r2, #1]
   14248:	mov	r3, #0
   1424c:	cmp	r2, #0
   14250:	bne	141dc <__assert_fail@plt+0x25fc>
   14254:	cmp	ip, r1
   14258:	lsl	r0, r7, #2
   1425c:	strcc	ip, [r4, r7, lsl #2]
   14260:	addcc	r0, r0, #4
   14264:	addcc	r7, r7, #1
   14268:	sub	r2, r5, #1
   1426c:	ldr	ip, [sp, #24]
   14270:	add	r7, r7, r5
   14274:	add	r0, r4, r0
   14278:	sub	r5, r7, #1
   1427c:	add	r1, ip, #4
   14280:	lsl	r2, r2, #2
   14284:	mov	r6, r4
   14288:	bl	117e4 <memcpy@plt>
   1428c:	mov	r3, #0
   14290:	str	r3, [r4, r7, lsl #2]
   14294:	mov	r4, #0
   14298:	movw	r7, #61040	; 0xee70
   1429c:	movw	fp, #61888	; 0xf1c0
   142a0:	movt	r7, #65535	; 0xffff
   142a4:	movt	fp, #3
   142a8:	add	r8, sp, #64	; 0x40
   142ac:	mov	r9, r4
   142b0:	str	r4, [sp, #44]	; 0x2c
   142b4:	str	r4, [sp, #52]	; 0x34
   142b8:	str	r4, [sp, #48]	; 0x30
   142bc:	str	r4, [sp, #40]	; 0x28
   142c0:	str	r4, [sp, #36]	; 0x24
   142c4:	str	r4, [sp, #32]
   142c8:	str	r4, [sp, #28]
   142cc:	add	ip, sp, #4544	; 0x11c0
   142d0:	str	r8, [sp]
   142d4:	add	ip, ip, #16
   142d8:	movw	r2, #42564	; 0xa644
   142dc:	movw	r3, #42132	; 0xa494
   142e0:	movt	r2, #2
   142e4:	movt	r3, #2
   142e8:	mov	r0, r5
   142ec:	mov	r1, r6
   142f0:	str	r9, [ip, r7]
   142f4:	bl	11970 <getopt_long@plt>
   142f8:	cmn	r0, #1
   142fc:	beq	14804 <__assert_fail@plt+0x2c24>
   14300:	sub	r3, r0, #1
   14304:	cmp	r3, #117	; 0x75
   14308:	ldrls	pc, [pc, r3, lsl #2]
   1430c:	b	147a8 <__assert_fail@plt+0x2bc8>
   14310:	andeq	r4, r1, r8, lsr #13
   14314:	muleq	r1, r4, r6
   14318:	andeq	r4, r1, r0, lsl #13
   1431c:	andeq	r4, r1, r8, ror r6
   14320:	andeq	r4, r1, r4, ror #12
   14324:	andeq	r4, r1, r8, lsr #15
   14328:	andeq	r4, r1, r8, lsr #15
   1432c:	andeq	r4, r1, r8, lsr #15
   14330:	andeq	r4, r1, r8, lsr #15
   14334:	andeq	r4, r1, r8, lsr #15
   14338:	andeq	r4, r1, r8, lsr #15
   1433c:	andeq	r4, r1, r8, lsr #15
   14340:	andeq	r4, r1, r8, lsr #15
   14344:	andeq	r4, r1, r8, lsr #15
   14348:	andeq	r4, r1, r8, lsr #15
   1434c:	andeq	r4, r1, r8, lsr #15
   14350:	andeq	r4, r1, r8, lsr #15
   14354:	andeq	r4, r1, r8, lsr #15
   14358:	andeq	r4, r1, r8, lsr #15
   1435c:	andeq	r4, r1, r8, lsr #15
   14360:	andeq	r4, r1, r8, lsr #15
   14364:	andeq	r4, r1, r8, lsr #15
   14368:	andeq	r4, r1, r8, lsr #15
   1436c:	andeq	r4, r1, r8, lsr #15
   14370:	andeq	r4, r1, r8, lsr #15
   14374:	andeq	r4, r1, r8, lsr #15
   14378:	andeq	r4, r1, r8, lsr #15
   1437c:	andeq	r4, r1, r8, lsr #15
   14380:	andeq	r4, r1, r8, lsr #15
   14384:	andeq	r4, r1, r8, lsr #15
   14388:	andeq	r4, r1, r8, lsr #15
   1438c:	andeq	r4, r1, r8, lsr #15
   14390:	andeq	r4, r1, r8, lsr #15
   14394:	andeq	r4, r1, r8, lsr #15
   14398:	andeq	r4, r1, r8, lsr #15
   1439c:	andeq	r4, r1, r8, lsr #15
   143a0:	andeq	r4, r1, r8, lsr #15
   143a4:	andeq	r4, r1, r8, lsr #15
   143a8:	andeq	r4, r1, r8, lsr #15
   143ac:	andeq	r4, r1, r8, lsr #15
   143b0:	andeq	r4, r1, r8, lsr #15
   143b4:	andeq	r4, r1, r8, lsr #15
   143b8:	andeq	r4, r1, r8, lsr #15
   143bc:	andeq	r4, r1, r8, lsr #15
   143c0:	andeq	r4, r1, r8, lsr #15
   143c4:	andeq	r4, r1, r8, lsr #15
   143c8:	andeq	r4, r1, r8, lsr #15
   143cc:	andeq	r4, r1, r8, lsr #15
   143d0:	andeq	r4, r1, r8, lsr #15
   143d4:	andeq	r4, r1, r8, lsr #15
   143d8:	andeq	r4, r1, r8, lsr #15
   143dc:	andeq	r4, r1, r8, lsr #15
   143e0:	andeq	r4, r1, r8, lsr #15
   143e4:	andeq	r4, r1, r8, lsr #15
   143e8:	andeq	r4, r1, r8, lsr #15
   143ec:	andeq	r4, r1, r8, lsr #15
   143f0:	andeq	r4, r1, r8, lsr #15
   143f4:	andeq	r4, r1, r8, lsr #15
   143f8:	andeq	r4, r1, r8, lsr #15
   143fc:	andeq	r4, r1, r8, lsr #15
   14400:	andeq	r4, r1, r8, lsr #15
   14404:	andeq	r4, r1, r8, lsr #15
   14408:	andeq	r4, r1, ip, lsl #10
   1440c:	andeq	r4, r1, r8, lsr #15
   14410:	andeq	r4, r1, r8, lsr #15
   14414:	andeq	r4, r1, r8, lsr #15
   14418:	andeq	r4, r1, r4, asr r5
   1441c:	andeq	r4, r1, r8, lsl #12
   14420:	andeq	r4, r1, r8, lsr #15
   14424:	andeq	r4, r1, r8, lsr #15
   14428:	andeq	r4, r1, r8, lsr #15
   1442c:	andeq	r4, r1, r8, lsr #15
   14430:	andeq	r4, r1, r8, lsr #15
   14434:	andeq	r4, r1, r8, lsr #15
   14438:	andeq	r4, r1, r8, lsr #15
   1443c:	andeq	r4, r1, r8, lsr #15
   14440:	andeq	r4, r1, r8, lsr #15
   14444:	andeq	r4, r1, r8, lsr #15
   14448:	andeq	r4, r1, r8, lsr #15
   1444c:	andeq	r4, r1, r8, lsr #15
   14450:	andeq	r4, r1, r8, lsr #15
   14454:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14458:	andeq	r4, r1, r0, ror #11
   1445c:	andeq	r4, r1, r8, lsr #15
   14460:	andeq	r4, r1, r8, lsr #15
   14464:	andeq	r4, r1, ip, asr #11
   14468:	andeq	r4, r1, r8, lsr #15
   1446c:	andeq	r4, r1, r8, lsr #15
   14470:	andeq	r4, r1, r8, lsr #15
   14474:	andeq	r4, r1, r8, lsr #15
   14478:	andeq	r4, r1, r8, lsr #15
   1447c:	andeq	r4, r1, r8, lsr #15
   14480:	andeq	r4, r1, r8, lsr #15
   14484:	andeq	r4, r1, r8, lsr #15
   14488:	andeq	r4, r1, r8, lsr #15
   1448c:	andeq	r4, r1, r8, lsr #15
   14490:	andeq	r4, r1, r8, asr #12
   14494:	andeq	r4, r1, r4, lsr r6
   14498:	andeq	r4, r1, r0, lsl #10
   1449c:	muleq	r1, r4, r7
   144a0:	andeq	r4, r1, r8, lsr #15
   144a4:	andeq	r4, r1, r0, lsl #15
   144a8:	andeq	r4, r1, r8, lsr #15
   144ac:	andeq	r4, r1, r4, asr #14
   144b0:	andeq	r4, r1, r0, lsr r7
   144b4:	andeq	r4, r1, r8, lsr #15
   144b8:	andeq	r4, r1, r8, lsr #15
   144bc:	andeq	r4, r1, r8, lsr #15
   144c0:	andeq	r4, r1, r8, lsr #15
   144c4:	andeq	r4, r1, ip, lsl r7
   144c8:	andeq	r4, r1, r8, lsr #15
   144cc:	andeq	r4, r1, r8, lsr #15
   144d0:	andeq	r4, r1, r4, lsl #14
   144d4:	strdeq	r4, [r1], -r8
   144d8:	ldrdeq	r4, [r1], -r8
   144dc:	andeq	r4, r1, r8, lsr #15
   144e0:	andeq	r4, r1, r8, lsr #15
   144e4:			; <UNDEFINED> instruction: 0x000146bc
   144e8:	cmp	r2, #32
   144ec:	beq	147c4 <__assert_fail@plt+0x2be4>
   144f0:	cmp	r2, #34	; 0x22
   144f4:	cmpne	r2, #39	; 0x27
   144f8:	moveq	r3, r1
   144fc:	b	141c8 <__assert_fail@plt+0x25e8>
   14500:	mov	ip, #1
   14504:	str	ip, [sp, #44]	; 0x2c
   14508:	b	142cc <__assert_fail@plt+0x26ec>
   1450c:	mov	r4, #1
   14510:	bl	19fc8 <__assert_fail@plt+0x83e8>
   14514:	ldr	ip, [sp, #24]
   14518:	cmp	ip, r6
   1451c:	beq	14528 <__assert_fail@plt+0x2948>
   14520:	mov	r0, r6
   14524:	bl	117c0 <free@plt>
   14528:	ldr	r0, [sp, #28]
   1452c:	bl	117c0 <free@plt>
   14530:	add	r0, sp, #8192	; 0x2000
   14534:	ldr	r2, [r0, #-3636]	; 0xfffff1cc
   14538:	mov	r0, r4
   1453c:	ldr	r3, [sl]
   14540:	cmp	r2, r3
   14544:	bne	14fb0 <__assert_fail@plt+0x33d0>
   14548:	add	sp, sp, #4544	; 0x11c0
   1454c:	add	sp, sp, #20
   14550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14554:	ldr	ip, [sp, #32]
   14558:	ldr	r0, [sp, #28]
   1455c:	add	r2, ip, #2
   14560:	lsl	r2, r2, #2
   14564:	str	r2, [sp, #20]
   14568:	mov	r1, r2
   1456c:	bl	11844 <realloc@plt>
   14570:	ldr	r2, [sp, #20]
   14574:	subs	r1, r0, #0
   14578:	beq	14f4c <__assert_fail@plt+0x336c>
   1457c:	movw	r3, #61968	; 0xf210
   14580:	movt	r3, #3
   14584:	sub	lr, r2, #8
   14588:	str	r1, [sp, #28]
   1458c:	mov	r2, r1
   14590:	ldr	r1, [r3]
   14594:	ldr	ip, [sp, #32]
   14598:	movw	r0, #43160	; 0xa898
   1459c:	movt	r0, #2
   145a0:	str	r1, [r2, lr]!
   145a4:	add	ip, ip, #1
   145a8:	str	ip, [sp, #32]
   145ac:	mov	ip, #0
   145b0:	str	ip, [r2, #4]
   145b4:	str	r3, [sp, #20]
   145b8:	bl	13758 <__assert_fail@plt+0x1b78>
   145bc:	ldr	r3, [sp, #20]
   145c0:	ldr	r0, [r3]
   145c4:	bl	13758 <__assert_fail@plt+0x1b78>
   145c8:	b	142cc <__assert_fail@plt+0x26ec>
   145cc:	movw	r0, #39000	; 0x9858
   145d0:	movt	r0, #2
   145d4:	bl	11904 <puts@plt>
   145d8:	mov	r4, #0
   145dc:	b	14510 <__assert_fail@plt+0x2930>
   145e0:	movw	r3, #61968	; 0xf210
   145e4:	movt	r3, #3
   145e8:	ldr	r3, [r3]
   145ec:	str	r3, [sp, #40]	; 0x28
   145f0:	b	142cc <__assert_fail@plt+0x26ec>
   145f4:	movw	r3, #62024	; 0xf248
   145f8:	movt	r3, #3
   145fc:	mov	r2, #1
   14600:	str	r2, [r3]
   14604:	b	142cc <__assert_fail@plt+0x26ec>
   14608:	movw	r0, #62016	; 0xf240
   1460c:	movw	r1, #62008	; 0xf238
   14610:	movt	r0, #3
   14614:	movt	r1, #3
   14618:	movw	r3, #61988	; 0xf224
   1461c:	movt	r3, #3
   14620:	mov	r2, #1
   14624:	str	r2, [r0]
   14628:	str	r2, [r1]
   1462c:	str	r2, [r3]
   14630:	b	142cc <__assert_fail@plt+0x26ec>
   14634:	movw	r3, #62028	; 0xf24c
   14638:	movt	r3, #3
   1463c:	mov	r2, #1
   14640:	str	r2, [r3]
   14644:	b	142cc <__assert_fail@plt+0x26ec>
   14648:	movw	r3, #61892	; 0xf1c4
   1464c:	movt	r3, #3
   14650:	mov	r2, #4
   14654:	mov	ip, #1
   14658:	str	ip, [sp, #48]	; 0x30
   1465c:	str	r2, [r3]
   14660:	b	142cc <__assert_fail@plt+0x26ec>
   14664:	movw	r3, #61996	; 0xf22c
   14668:	movt	r3, #3
   1466c:	mov	r2, #1
   14670:	str	r2, [r3]
   14674:	b	142cc <__assert_fail@plt+0x26ec>
   14678:	mov	r4, #1
   1467c:	b	142cc <__assert_fail@plt+0x26ec>
   14680:	movw	r3, #62000	; 0xf230
   14684:	movt	r3, #3
   14688:	mov	r2, #1
   1468c:	str	r2, [r3]
   14690:	b	142cc <__assert_fail@plt+0x26ec>
   14694:	movw	r3, #62012	; 0xf23c
   14698:	movt	r3, #3
   1469c:	mov	r2, #1
   146a0:	str	r2, [r3]
   146a4:	b	142cc <__assert_fail@plt+0x26ec>
   146a8:	movw	r3, #62020	; 0xf244
   146ac:	movt	r3, #3
   146b0:	mov	r2, #1
   146b4:	str	r2, [r3]
   146b8:	b	142cc <__assert_fail@plt+0x26ec>
   146bc:	movw	r0, #43172	; 0xa8a4
   146c0:	movt	r0, #2
   146c4:	bl	13758 <__assert_fail@plt+0x1b78>
   146c8:	ldr	r3, [fp]
   146cc:	add	r3, r3, #1
   146d0:	str	r3, [fp]
   146d4:	b	142cc <__assert_fail@plt+0x26ec>
   146d8:	movw	r0, #43164	; 0xa89c
   146dc:	movt	r0, #2
   146e0:	bl	13758 <__assert_fail@plt+0x1b78>
   146e4:	movw	r3, #61984	; 0xf220
   146e8:	movt	r3, #3
   146ec:	mov	r2, #1
   146f0:	str	r2, [r3]
   146f4:	b	142cc <__assert_fail@plt+0x26ec>
   146f8:	mov	ip, #1
   146fc:	str	ip, [sp, #52]	; 0x34
   14700:	b	142cc <__assert_fail@plt+0x26ec>
   14704:	movw	r0, #43168	; 0xa8a0
   14708:	movt	r0, #2
   1470c:	bl	13758 <__assert_fail@plt+0x1b78>
   14710:	mov	r0, #0
   14714:	str	r0, [fp]
   14718:	b	142cc <__assert_fail@plt+0x26ec>
   1471c:	movw	r3, #62008	; 0xf238
   14720:	movt	r3, #3
   14724:	mov	r2, #1
   14728:	str	r2, [r3]
   1472c:	b	142cc <__assert_fail@plt+0x26ec>
   14730:	movw	r3, #62004	; 0xf234
   14734:	movt	r3, #3
   14738:	mov	r2, #1
   1473c:	str	r2, [r3]
   14740:	b	142cc <__assert_fail@plt+0x26ec>
   14744:	movw	r3, #61936	; 0xf1f0
   14748:	movt	r3, #3
   1474c:	movw	r1, #43176	; 0xa8a8
   14750:	mov	r0, #1
   14754:	ldr	ip, [r3]
   14758:	movt	r1, #2
   1475c:	mov	r4, #0
   14760:	mov	r2, ip
   14764:	str	ip, [sp]
   14768:	str	ip, [sp, #4]
   1476c:	mov	r3, ip
   14770:	str	ip, [sp, #8]
   14774:	str	ip, [sp, #12]
   14778:	bl	11a60 <__printf_chk@plt>
   1477c:	b	14510 <__assert_fail@plt+0x2930>
   14780:	movw	r3, #61992	; 0xf228
   14784:	movt	r3, #3
   14788:	mov	r2, #1
   1478c:	str	r2, [r3]
   14790:	b	142cc <__assert_fail@plt+0x26ec>
   14794:	movw	r3, #61968	; 0xf210
   14798:	movt	r3, #3
   1479c:	ldr	r3, [r3]
   147a0:	str	r3, [sp, #36]	; 0x24
   147a4:	b	142cc <__assert_fail@plt+0x26ec>
   147a8:	mov	r2, r0
   147ac:	movw	r1, #39916	; 0x9bec
   147b0:	mov	r0, #3
   147b4:	movt	r1, #2
   147b8:	bl	19fe0 <__assert_fail@plt+0x8400>
   147bc:	mov	r4, #1
   147c0:	b	14510 <__assert_fail@plt+0x2930>
   147c4:	str	ip, [r4, r7, lsl #2]
   147c8:	mov	ip, r1
   147cc:	strb	r3, [ip], #1
   147d0:	mov	r2, r1
   147d4:	add	r7, r7, #1
   147d8:	mov	r1, ip
   147dc:	b	141d0 <__assert_fail@plt+0x25f0>
   147e0:	mov	ip, r1
   147e4:	add	r3, r3, #1
   147e8:	mov	r2, r1
   147ec:	str	r3, [r4, r7, lsl #2]
   147f0:	strb	lr, [ip], #1
   147f4:	mov	r3, #0
   147f8:	add	r7, r7, #1
   147fc:	mov	r1, ip
   14800:	b	141d0 <__assert_fail@plt+0x25f0>
   14804:	movw	r2, #61984	; 0xf220
   14808:	movt	r2, #3
   1480c:	movw	r3, #61952	; 0xf200
   14810:	movt	r3, #3
   14814:	ldr	r0, [r2]
   14818:	ldr	r7, [r3]
   1481c:	adds	r0, r0, #0
   14820:	rsb	r5, r7, r5
   14824:	movne	r0, #1
   14828:	bl	19f9c <__assert_fail@plt+0x83bc>
   1482c:	ldr	ip, [sp, #44]	; 0x2c
   14830:	str	r5, [sp, #32]
   14834:	cmp	ip, #0
   14838:	bne	14848 <__assert_fail@plt+0x2c68>
   1483c:	ldr	ip, [sp, #32]
   14840:	cmp	ip, #0
   14844:	beq	14b7c <__assert_fail@plt+0x2f9c>
   14848:	ldr	ip, [sp, #40]	; 0x28
   1484c:	ldr	r1, [sp, #36]	; 0x24
   14850:	cmp	r1, #0
   14854:	cmpeq	ip, #0
   14858:	moveq	r0, #0
   1485c:	movne	r0, #1
   14860:	beq	148b4 <__assert_fail@plt+0x2cd4>
   14864:	cmp	r1, #0
   14868:	movw	r3, #50108	; 0xc3bc
   1486c:	movt	r3, #2
   14870:	moveq	r1, r3
   14874:	cmp	ip, #0
   14878:	str	r1, [sp, #36]	; 0x24
   1487c:	beq	14d2c <__assert_fail@plt+0x314c>
   14880:	ldr	ip, [sp, #36]	; 0x24
   14884:	mov	r1, #4096	; 0x1000
   14888:	movw	r2, #41860	; 0xa384
   1488c:	add	r0, sp, #460	; 0x1cc
   14890:	movt	r2, #2
   14894:	mov	r3, r1
   14898:	str	ip, [sp, #4]
   1489c:	ldr	ip, [sp, #40]	; 0x28
   148a0:	str	r2, [sp]
   148a4:	mov	r2, #1
   148a8:	str	ip, [sp, #8]
   148ac:	bl	11bd4 <__snprintf_chk@plt>
   148b0:	add	r0, sp, #460	; 0x1cc
   148b4:	ldr	r1, [sp, #28]
   148b8:	bl	1bf20 <__assert_fail@plt+0xa340>
   148bc:	subs	r9, r0, #0
   148c0:	beq	14ccc <__assert_fail@plt+0x30ec>
   148c4:	movw	r3, #61888	; 0xf1c0
   148c8:	movt	r3, #3
   148cc:	ldr	r1, [r3]
   148d0:	bl	1a0fc <__assert_fail@plt+0x851c>
   148d4:	mov	r0, r9
   148d8:	bl	1cc90 <__assert_fail@plt+0xb0b0>
   148dc:	ldr	ip, [sp, #44]	; 0x2c
   148e0:	cmp	ip, #0
   148e4:	bne	14bac <__assert_fail@plt+0x2fcc>
   148e8:	cmp	r4, #0
   148ec:	add	r3, r6, r7, lsl #2
   148f0:	str	r3, [sp, #40]	; 0x28
   148f4:	bne	14a84 <__assert_fail@plt+0x2ea4>
   148f8:	ldr	ip, [sp, #52]	; 0x34
   148fc:	cmp	ip, #0
   14900:	bne	14d5c <__assert_fail@plt+0x317c>
   14904:	ldr	ip, [sp, #48]	; 0x30
   14908:	cmp	ip, #0
   1490c:	ldr	ip, [sp, #32]
   14910:	bne	14ce4 <__assert_fail@plt+0x3104>
   14914:	cmp	ip, #1
   14918:	ldrle	r7, [sp, #48]	; 0x30
   1491c:	ble	14ef0 <__assert_fail@plt+0x3310>
   14920:	ldr	r3, [sp, #40]	; 0x28
   14924:	ldr	r8, [sp, #48]	; 0x30
   14928:	add	ip, r3, #4
   1492c:	mov	r3, #1
   14930:	str	r9, [sp, #36]	; 0x24
   14934:	mov	r9, r3
   14938:	mov	r4, r8
   1493c:	mov	fp, ip
   14940:	str	r6, [sp, #44]	; 0x2c
   14944:	str	sl, [sp, #48]	; 0x30
   14948:	b	14974 <__assert_fail@plt+0x2d94>
   1494c:	add	r0, sl, r4
   14950:	add	r2, r5, #1
   14954:	ldr	r1, [fp, #-4]
   14958:	add	r4, r4, r5
   1495c:	bl	117e4 <memcpy@plt>
   14960:	ldr	ip, [sp, #32]
   14964:	add	r9, r9, #1
   14968:	cmp	r9, ip
   1496c:	beq	14f14 <__assert_fail@plt+0x3334>
   14970:	mov	r8, sl
   14974:	ldr	r6, [fp], #4
   14978:	mov	r0, r6
   1497c:	bl	119a0 <strlen@plt>
   14980:	mov	r1, #61	; 0x3d
   14984:	mov	r5, r0
   14988:	mov	r0, r6
   1498c:	bl	119ac <strchr@plt>
   14990:	cmp	r0, #0
   14994:	beq	14cc0 <__assert_fail@plt+0x30e0>
   14998:	ldrb	r3, [r0, #1]
   1499c:	add	r6, r0, #1
   149a0:	cmp	r3, #39	; 0x27
   149a4:	cmpne	r3, #34	; 0x22
   149a8:	moveq	r2, #0
   149ac:	movne	r2, #1
   149b0:	moveq	r7, r2
   149b4:	beq	149d0 <__assert_fail@plt+0x2df0>
   149b8:	mov	r0, r6
   149bc:	mov	r1, #32
   149c0:	bl	119ac <strchr@plt>
   149c4:	cmp	r0, #0
   149c8:	movne	r7, #2
   149cc:	moveq	r7, #0
   149d0:	add	r1, r5, r4
   149d4:	mov	r0, r8
   149d8:	add	r1, r1, #2
   149dc:	add	r1, r1, r7
   149e0:	bl	11844 <realloc@plt>
   149e4:	subs	sl, r0, #0
   149e8:	beq	14eb4 <__assert_fail@plt+0x32d4>
   149ec:	cmp	r4, #0
   149f0:	movne	ip, #32
   149f4:	strbne	ip, [sl, r4]
   149f8:	addne	r4, r4, #1
   149fc:	cmp	r7, #0
   14a00:	beq	1494c <__assert_fail@plt+0x2d6c>
   14a04:	ldr	r1, [fp, #-4]
   14a08:	add	r0, sl, r4
   14a0c:	rsb	r8, r1, r6
   14a10:	rsb	r5, r8, r5
   14a14:	mov	r2, r8
   14a18:	add	r8, r4, r8
   14a1c:	add	r4, r8, #1
   14a20:	bl	117e4 <memcpy@plt>
   14a24:	mov	r2, r5
   14a28:	add	r5, r4, r5
   14a2c:	mov	r0, #34	; 0x22
   14a30:	strb	r0, [sl, r8]
   14a34:	add	r0, sl, r4
   14a38:	add	r4, r5, #1
   14a3c:	mov	r1, r6
   14a40:	bl	117e4 <memcpy@plt>
   14a44:	mov	r1, #34	; 0x22
   14a48:	mov	r2, #0
   14a4c:	strb	r1, [sl, r5]
   14a50:	strb	r2, [sl, r4]
   14a54:	b	14960 <__assert_fail@plt+0x2d80>
   14a58:	ldr	ip, [sp, #24]
   14a5c:	cmp	ip, #0
   14a60:	beq	14b94 <__assert_fail@plt+0x2fb4>
   14a64:	mov	r6, ip
   14a68:	b	14294 <__assert_fail@plt+0x26b4>
   14a6c:	mov	r7, r3
   14a70:	mov	lr, r3
   14a74:	b	14164 <__assert_fail@plt+0x2584>
   14a78:	mov	r0, #4
   14a7c:	mov	r7, #1
   14a80:	b	14268 <__assert_fail@plt+0x2688>
   14a84:	ldr	r5, [r6, r7, lsl #2]
   14a88:	add	r3, sp, #4544	; 0x11c0
   14a8c:	ldr	ip, [sp, #44]	; 0x2c
   14a90:	add	r3, r3, #16
   14a94:	movw	r7, #61036	; 0xee6c
   14a98:	movt	r7, #65535	; 0xffff
   14a9c:	mov	r2, r8
   14aa0:	mov	r0, r9
   14aa4:	mov	r1, r5
   14aa8:	str	ip, [r3, r7]
   14aac:	bl	20598 <__assert_fail@plt+0xe9b8>
   14ab0:	cmp	r0, #0
   14ab4:	blt	14f28 <__assert_fail@plt+0x3348>
   14ab8:	add	r2, sp, #4544	; 0x11c0
   14abc:	movw	r8, #61040	; 0xee70
   14ac0:	add	r2, r2, #16
   14ac4:	movt	r8, #65535	; 0xffff
   14ac8:	add	r1, sp, #60	; 0x3c
   14acc:	ldr	r0, [r2, r8]
   14ad0:	bl	23504 <__assert_fail@plt+0x11924>
   14ad4:	cmp	r0, #0
   14ad8:	blt	14f6c <__assert_fail@plt+0x338c>
   14adc:	add	ip, sp, #4544	; 0x11c0
   14ae0:	add	ip, ip, #16
   14ae4:	ldr	r4, [ip, r7]
   14ae8:	cmp	r4, #0
   14aec:	beq	14f64 <__assert_fail@plt+0x3384>
   14af0:	mov	r0, r4
   14af4:	movw	r5, #61036	; 0xee6c
   14af8:	bl	234b4 <__assert_fail@plt+0x118d4>
   14afc:	movt	r5, #65535	; 0xffff
   14b00:	mov	r8, r0
   14b04:	mov	r0, r4
   14b08:	bl	234c4 <__assert_fail@plt+0x118e4>
   14b0c:	str	r8, [sp]
   14b10:	mov	r2, r0
   14b14:	mov	r3, r1
   14b18:	mov	r0, #1
   14b1c:	movw	r1, #45360	; 0xb130
   14b20:	movt	r1, #2
   14b24:	bl	11a60 <__printf_chk@plt>
   14b28:	add	r2, sp, #4544	; 0x11c0
   14b2c:	add	r2, r2, #16
   14b30:	mov	r1, r4
   14b34:	ldr	r0, [r2, r7]
   14b38:	bl	1d0f4 <__assert_fail@plt+0xb514>
   14b3c:	subs	r4, r0, #0
   14b40:	bne	14af0 <__assert_fail@plt+0x2f10>
   14b44:	add	r3, sp, #4544	; 0x11c0
   14b48:	add	r3, r3, #16
   14b4c:	ldr	r0, [r3, r5]
   14b50:	bl	234dc <__assert_fail@plt+0x118fc>
   14b54:	add	ip, sp, #4544	; 0x11c0
   14b58:	movw	r3, #61040	; 0xee70
   14b5c:	add	ip, ip, #16
   14b60:	movt	r3, #65535	; 0xffff
   14b64:	mov	r4, #0
   14b68:	ldr	r0, [ip, r3]
   14b6c:	bl	20b98 <__assert_fail@plt+0xefb8>
   14b70:	mov	r0, r9
   14b74:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   14b78:	b	14510 <__assert_fail@plt+0x2930>
   14b7c:	movw	r1, #45232	; 0xb0b0
   14b80:	mov	r0, #3
   14b84:	movt	r1, #2
   14b88:	mov	r4, #1
   14b8c:	bl	19fe0 <__assert_fail@plt+0x8400>
   14b90:	b	14510 <__assert_fail@plt+0x2930>
   14b94:	movw	r1, #43096	; 0xa858
   14b98:	mov	r0, #3
   14b9c:	movt	r1, #2
   14ba0:	mov	r4, #1
   14ba4:	bl	19fe0 <__assert_fail@plt+0x8400>
   14ba8:	b	14530 <__assert_fail@plt+0x2950>
   14bac:	movw	ip, #42084	; 0xa464
   14bb0:	movt	ip, #2
   14bb4:	add	r7, sp, #68	; 0x44
   14bb8:	movw	r8, #61960	; 0xf208
   14bbc:	ldm	ip!, {r0, r1, r2, r3}
   14bc0:	mov	lr, r7
   14bc4:	movt	r8, #3
   14bc8:	mov	r5, #0
   14bcc:	stmia	lr!, {r0, r1, r2, r3}
   14bd0:	ldm	ip!, {r0, r1, r2, r3}
   14bd4:	stmia	lr!, {r0, r1, r2, r3}
   14bd8:	ldm	ip, {r0, r1, r2, r3}
   14bdc:	stm	lr, {r0, r1, r2, r3}
   14be0:	add	r3, r7, r5
   14be4:	mov	r0, r9
   14be8:	ldr	r3, [r3, #4]
   14bec:	blx	r3
   14bf0:	subs	r4, r0, #0
   14bf4:	beq	14c68 <__assert_fail@plt+0x3088>
   14bf8:	mov	r0, r4
   14bfc:	bl	1eb60 <__assert_fail@plt+0xcf80>
   14c00:	cmp	r0, #0
   14c04:	beq	14c60 <__assert_fail@plt+0x3080>
   14c08:	mov	r0, r4
   14c0c:	ldr	fp, [r7, r5]
   14c10:	bl	1eacc <__assert_fail@plt+0xceec>
   14c14:	movw	r1, #42608	; 0xa670
   14c18:	movt	r1, #2
   14c1c:	mov	r2, fp
   14c20:	mov	r3, r0
   14c24:	mov	r0, #1
   14c28:	bl	11a60 <__printf_chk@plt>
   14c2c:	mov	r0, r4
   14c30:	bl	1eaf8 <__assert_fail@plt+0xcf18>
   14c34:	subs	fp, r0, #0
   14c38:	beq	14cb0 <__assert_fail@plt+0x30d0>
   14c3c:	ldr	r1, [r8]
   14c40:	mov	r0, #32
   14c44:	bl	11880 <_IO_putc@plt>
   14c48:	mov	r0, fp
   14c4c:	bl	11904 <puts@plt>
   14c50:	mov	r0, r4
   14c54:	bl	1eb60 <__assert_fail@plt+0xcf80>
   14c58:	cmp	r0, #0
   14c5c:	bne	14c08 <__assert_fail@plt+0x3028>
   14c60:	mov	r0, r4
   14c64:	bl	1ebac <__assert_fail@plt+0xcfcc>
   14c68:	add	r5, r5, #8
   14c6c:	cmp	r5, #48	; 0x30
   14c70:	bne	14be0 <__assert_fail@plt+0x3000>
   14c74:	movw	r0, #45264	; 0xb0d0
   14c78:	movt	r0, #2
   14c7c:	bl	11904 <puts@plt>
   14c80:	ldr	r0, [r8]
   14c84:	bl	1179c <fflush@plt>
   14c88:	mov	r1, #1
   14c8c:	mov	r2, r1
   14c90:	mov	r0, r9
   14c94:	bl	1ce10 <__assert_fail@plt+0xb230>
   14c98:	mov	r0, r9
   14c9c:	mov	r1, #2
   14ca0:	mov	r2, #1
   14ca4:	mov	r4, #0
   14ca8:	bl	1ce10 <__assert_fail@plt+0xb230>
   14cac:	b	14b70 <__assert_fail@plt+0x2f90>
   14cb0:	ldr	r1, [r8]
   14cb4:	mov	r0, #10
   14cb8:	bl	11880 <_IO_putc@plt>
   14cbc:	b	14bf8 <__assert_fail@plt+0x3018>
   14cc0:	mov	r6, r0
   14cc4:	mov	r7, r0
   14cc8:	b	149d0 <__assert_fail@plt+0x2df0>
   14ccc:	movw	r1, #39980	; 0x9c2c
   14cd0:	mov	r0, #3
   14cd4:	movt	r1, #2
   14cd8:	mov	r4, #1
   14cdc:	bl	19fe0 <__assert_fail@plt+0x8400>
   14ce0:	b	14510 <__assert_fail@plt+0x2930>
   14ce4:	cmp	ip, #0
   14ce8:	ldr	r4, [sp, #52]	; 0x34
   14cec:	ble	14b70 <__assert_fail@plt+0x2f90>
   14cf0:	ldr	r3, [sp, #40]	; 0x28
   14cf4:	mov	r5, r4
   14cf8:	mov	r8, ip
   14cfc:	sub	r7, r3, #4
   14d00:	mov	r0, r9
   14d04:	ldr	r1, [r7, #4]!
   14d08:	mov	r2, #0
   14d0c:	add	r5, r5, #1
   14d10:	bl	139dc <__assert_fail@plt+0x1dfc>
   14d14:	cmp	r0, #0
   14d18:	movlt	r4, r0
   14d1c:	cmp	r5, r8
   14d20:	bne	14d00 <__assert_fail@plt+0x3120>
   14d24:	lsr	r4, r4, #31
   14d28:	b	14b70 <__assert_fail@plt+0x2f90>
   14d2c:	add	r0, sp, #68	; 0x44
   14d30:	bl	1182c <uname@plt>
   14d34:	cmp	r0, #0
   14d38:	addge	ip, sp, #198	; 0xc6
   14d3c:	strge	ip, [sp, #40]	; 0x28
   14d40:	bge	14880 <__assert_fail@plt+0x2ca0>
   14d44:	movw	r1, #41840	; 0xa370
   14d48:	mov	r0, #3
   14d4c:	movt	r1, #2
   14d50:	mov	r4, #1
   14d54:	bl	19fe0 <__assert_fail@plt+0x8400>
   14d58:	b	14510 <__assert_fail@plt+0x2930>
   14d5c:	ldr	ip, [sp, #32]
   14d60:	cmp	ip, #0
   14d64:	ble	14b70 <__assert_fail@plt+0x2f90>
   14d68:	str	r4, [sp, #36]	; 0x24
   14d6c:	movw	r4, #61040	; 0xee70
   14d70:	ldr	r3, [sp, #40]	; 0x28
   14d74:	movt	r4, #65535	; 0xffff
   14d78:	ldr	r5, [sp, #36]	; 0x24
   14d7c:	movw	ip, #61892	; 0xf1c4
   14d80:	sub	r7, r3, #4
   14d84:	movt	ip, #3
   14d88:	str	r6, [sp, #44]	; 0x2c
   14d8c:	str	ip, [sp, #40]	; 0x28
   14d90:	str	sl, [sp, #48]	; 0x30
   14d94:	ldr	r6, [r7, #4]!
   14d98:	add	r1, sp, #4544	; 0x11c0
   14d9c:	add	r1, r1, #16
   14da0:	mov	r3, #0
   14da4:	mov	r0, r9
   14da8:	mov	r2, r8
   14dac:	str	r3, [r1, r4]
   14db0:	mov	r1, r6
   14db4:	bl	20c10 <__assert_fail@plt+0xf030>
   14db8:	cmp	r0, #0
   14dbc:	strlt	r0, [sp, #36]	; 0x24
   14dc0:	blt	14e3c <__assert_fail@plt+0x325c>
   14dc4:	add	ip, sp, #4544	; 0x11c0
   14dc8:	add	ip, ip, #16
   14dcc:	ldr	sl, [ip, r4]
   14dd0:	cmp	sl, #0
   14dd4:	bne	14e00 <__assert_fail@plt+0x3220>
   14dd8:	b	14e74 <__assert_fail@plt+0x3294>
   14ddc:	add	r2, sp, #4544	; 0x11c0
   14de0:	mov	r1, sl
   14de4:	add	r2, r2, #16
   14de8:	ldr	r0, [r2, r4]
   14dec:	bl	1d0f4 <__assert_fail@plt+0xb514>
   14df0:	movw	r2, #61040	; 0xee70
   14df4:	movt	r2, #65535	; 0xffff
   14df8:	subs	sl, r0, #0
   14dfc:	beq	14e60 <__assert_fail@plt+0x3280>
   14e00:	mov	r0, sl
   14e04:	bl	21034 <__assert_fail@plt+0xf454>
   14e08:	mov	r1, #1
   14e0c:	mov	fp, r0
   14e10:	bl	13d08 <__assert_fail@plt+0x2128>
   14e14:	mov	r6, r0
   14e18:	mov	r0, fp
   14e1c:	bl	20b98 <__assert_fail@plt+0xefb8>
   14e20:	cmp	r6, #0
   14e24:	bge	14ddc <__assert_fail@plt+0x31fc>
   14e28:	add	r2, sp, #4544	; 0x11c0
   14e2c:	str	r6, [sp, #36]	; 0x24
   14e30:	add	r2, r2, #16
   14e34:	ldr	r0, [r2, r4]
   14e38:	bl	207dc <__assert_fail@plt+0xebfc>
   14e3c:	ldr	ip, [sp, #32]
   14e40:	add	r5, r5, #1
   14e44:	cmp	r5, ip
   14e48:	bne	14d94 <__assert_fail@plt+0x31b4>
   14e4c:	ldr	r3, [sp, #36]	; 0x24
   14e50:	ldr	r6, [sp, #44]	; 0x2c
   14e54:	ldr	sl, [sp, #48]	; 0x30
   14e58:	lsr	r4, r3, #31
   14e5c:	b	14b70 <__assert_fail@plt+0x2f90>
   14e60:	add	r1, sp, #4544	; 0x11c0
   14e64:	add	r1, r1, #16
   14e68:	ldr	r0, [r1, r2]
   14e6c:	bl	207dc <__assert_fail@plt+0xebfc>
   14e70:	b	14e3c <__assert_fail@plt+0x325c>
   14e74:	ldr	r3, [sp, #40]	; 0x28
   14e78:	mov	r2, r6
   14e7c:	movw	r1, #41936	; 0xa3d0
   14e80:	movt	r1, #2
   14e84:	ldr	r0, [r3]
   14e88:	bl	19fe0 <__assert_fail@plt+0x8400>
   14e8c:	add	ip, sp, #4544	; 0x11c0
   14e90:	add	ip, ip, #16
   14e94:	ldr	sl, [ip, r4]
   14e98:	cmp	sl, #0
   14e9c:	bne	14e00 <__assert_fail@plt+0x3220>
   14ea0:	mov	r0, sl
   14ea4:	mvn	r3, #1
   14ea8:	str	r3, [sp, #36]	; 0x24
   14eac:	bl	207dc <__assert_fail@plt+0xebfc>
   14eb0:	b	14e3c <__assert_fail@plt+0x325c>
   14eb4:	bl	119f4 <__errno_location@plt>
   14eb8:	ldr	r9, [sp, #36]	; 0x24
   14ebc:	mov	r7, sl
   14ec0:	ldr	r6, [sp, #44]	; 0x2c
   14ec4:	ldr	sl, [sp, #48]	; 0x30
   14ec8:	ldr	r4, [r0]
   14ecc:	mov	r0, r8
   14ed0:	bl	117c0 <free@plt>
   14ed4:	movw	r1, #45376	; 0xb140
   14ed8:	rsb	r4, r4, #0
   14edc:	mov	r0, #3
   14ee0:	movt	r1, #2
   14ee4:	bl	19fe0 <__assert_fail@plt+0x8400>
   14ee8:	cmp	r4, #0
   14eec:	bne	14d24 <__assert_fail@plt+0x3144>
   14ef0:	ldr	r3, [sp, #40]	; 0x28
   14ef4:	mov	r0, r9
   14ef8:	mov	r2, r7
   14efc:	ldr	r1, [r3]
   14f00:	bl	139dc <__assert_fail@plt+0x1dfc>
   14f04:	mov	r4, r0
   14f08:	mov	r0, r7
   14f0c:	bl	117c0 <free@plt>
   14f10:	b	14d24 <__assert_fail@plt+0x3144>
   14f14:	mov	r7, sl
   14f18:	ldr	r9, [sp, #36]	; 0x24
   14f1c:	ldr	r6, [sp, #44]	; 0x2c
   14f20:	ldr	sl, [sp, #48]	; 0x30
   14f24:	b	14ef0 <__assert_fail@plt+0x3310>
   14f28:	movw	r3, #61892	; 0xf1c4
   14f2c:	movt	r3, #3
   14f30:	mov	r2, r5
   14f34:	movw	r1, #41936	; 0xa3d0
   14f38:	ldr	r0, [r3]
   14f3c:	movt	r1, #2
   14f40:	bl	19fe0 <__assert_fail@plt+0x8400>
   14f44:	mov	r4, #1
   14f48:	b	14b70 <__assert_fail@plt+0x2f90>
   14f4c:	movw	r1, #43144	; 0xa888
   14f50:	mov	r0, #3
   14f54:	movt	r1, #2
   14f58:	mov	r4, #1
   14f5c:	bl	19fe0 <__assert_fail@plt+0x8400>
   14f60:	b	14510 <__assert_fail@plt+0x2930>
   14f64:	ldr	r0, [sp, #44]	; 0x2c
   14f68:	b	14b50 <__assert_fail@plt+0x2f70>
   14f6c:	movw	r3, #61892	; 0xf1c4
   14f70:	movt	r3, #3
   14f74:	rsb	r0, r0, #0
   14f78:	mov	r4, #1
   14f7c:	ldr	r7, [r3]
   14f80:	bl	11928 <strerror@plt>
   14f84:	mov	r2, r5
   14f88:	movw	r1, #45320	; 0xb108
   14f8c:	movt	r1, #2
   14f90:	mov	r3, r0
   14f94:	mov	r0, r7
   14f98:	bl	19fe0 <__assert_fail@plt+0x8400>
   14f9c:	add	r3, sp, #4544	; 0x11c0
   14fa0:	add	r3, r3, #16
   14fa4:	ldr	r0, [r3, r8]
   14fa8:	bl	20b98 <__assert_fail@plt+0xefb8>
   14fac:	b	14b70 <__assert_fail@plt+0x2f90>
   14fb0:	bl	11838 <__stack_chk_fail@plt>
   14fb4:	ldr	r3, [r0]
   14fb8:	ldr	r2, [r1]
   14fbc:	ldr	r0, [r3, #48]	; 0x30
   14fc0:	ldr	r3, [r2, #48]	; 0x30
   14fc4:	rsb	r0, r3, r0
   14fc8:	bx	lr
   14fcc:	ldr	r3, [r0]
   14fd0:	ldr	r2, [r1]
   14fd4:	ldr	r0, [r3, #52]	; 0x34
   14fd8:	ldr	r3, [r2, #52]	; 0x34
   14fdc:	rsb	r0, r3, r0
   14fe0:	bx	lr
   14fe4:	push	{r3, r4, r5, r6, r7, lr}
   14fe8:	ldr	r7, [r0, #28]
   14fec:	cmp	r7, #0
   14ff0:	beq	15028 <__assert_fail@plt+0x3448>
   14ff4:	ldr	r6, [r0, #24]
   14ff8:	mov	r5, #0
   14ffc:	mov	r4, r5
   15000:	sub	r6, r6, #4
   15004:	ldr	r0, [r6, #4]!
   15008:	add	r4, r4, #1
   1500c:	bl	14fe4 <__assert_fail@plt+0x3404>
   15010:	cmp	r4, r7
   15014:	add	r0, r0, #1
   15018:	add	r5, r5, r0
   1501c:	bne	15004 <__assert_fail@plt+0x3424>
   15020:	mov	r0, r5
   15024:	pop	{r3, r4, r5, r6, r7, pc}
   15028:	mov	r5, r7
   1502c:	b	15020 <__assert_fail@plt+0x3440>
   15030:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15034:	mov	r8, r1
   15038:	ldr	r1, [r0, #28]
   1503c:	mov	sl, r0
   15040:	mov	fp, r2
   15044:	mov	r9, r3
   15048:	cmp	r1, #0
   1504c:	beq	150e8 <__assert_fail@plt+0x3508>
   15050:	mov	r2, #0
   15054:	mov	r7, r2
   15058:	ldr	r6, [r9]
   1505c:	ldr	r3, [sl, #24]
   15060:	cmp	r6, #0
   15064:	ldr	r0, [r3, r7, lsl #2]
   15068:	beq	1509c <__assert_fail@plt+0x34bc>
   1506c:	ldr	r3, [r8]
   15070:	cmp	r3, r0
   15074:	beq	150cc <__assert_fail@plt+0x34ec>
   15078:	mov	r4, r8
   1507c:	mov	ip, #0
   15080:	b	15090 <__assert_fail@plt+0x34b0>
   15084:	ldr	r5, [r4, #4]!
   15088:	cmp	r5, r0
   1508c:	beq	150cc <__assert_fail@plt+0x34ec>
   15090:	add	ip, ip, #1
   15094:	cmp	ip, r6
   15098:	bne	15084 <__assert_fail@plt+0x34a4>
   1509c:	cmp	fp, r6
   150a0:	bls	150e0 <__assert_fail@plt+0x3500>
   150a4:	str	r0, [r8, r6, lsl #2]
   150a8:	mov	r2, fp
   150ac:	add	r6, r6, #1
   150b0:	mov	r1, r8
   150b4:	str	r6, [r9]
   150b8:	mov	r3, r9
   150bc:	bl	15030 <__assert_fail@plt+0x3450>
   150c0:	subs	r2, r0, #0
   150c4:	blt	150d8 <__assert_fail@plt+0x34f8>
   150c8:	ldr	r1, [sl, #28]
   150cc:	add	r7, r7, #1
   150d0:	cmp	r1, r7
   150d4:	bhi	15058 <__assert_fail@plt+0x3478>
   150d8:	mov	r0, r2
   150dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e0:	mvn	r0, #27
   150e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	mov	r0, r1
   150ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f0:	push	{r4, r5, r6, lr}
   150f4:	mov	r6, r0
   150f8:	ldrb	r4, [r0, #8]
   150fc:	ldrb	r3, [r0, #9]
   15100:	cmp	r4, r3
   15104:	addle	r4, r4, #1
   15108:	addle	r5, r0, r4, lsl #2
   1510c:	addle	r5, r5, #4
   15110:	bgt	15134 <__assert_fail@plt+0x3554>
   15114:	ldr	r0, [r5, #4]!
   15118:	cmp	r0, #0
   1511c:	beq	15128 <__assert_fail@plt+0x3548>
   15120:	bl	150f0 <__assert_fail@plt+0x3510>
   15124:	ldrb	r3, [r6, #9]
   15128:	cmp	r3, r4
   1512c:	add	r4, r4, #1
   15130:	bge	15114 <__assert_fail@plt+0x3534>
   15134:	ldr	r0, [r6, #4]
   15138:	cmp	r0, #0
   1513c:	beq	15154 <__assert_fail@plt+0x3574>
   15140:	ldr	r4, [r0]
   15144:	bl	117c0 <free@plt>
   15148:	cmp	r4, #0
   1514c:	mov	r0, r4
   15150:	bne	15140 <__assert_fail@plt+0x3560>
   15154:	ldr	r0, [r6]
   15158:	bl	117c0 <free@plt>
   1515c:	mov	r0, r6
   15160:	pop	{r4, r5, r6, lr}
   15164:	b	117c0 <free@plt>
   15168:	push	{r3, r4, r5, lr}
   1516c:	movw	r5, #4108	; 0x100c
   15170:	mov	r4, r0
   15174:	ldr	r0, [r0, r5]
   15178:	cmp	r0, #0
   1517c:	beq	15198 <__assert_fail@plt+0x35b8>
   15180:	ldr	r3, [r0]
   15184:	str	r3, [r4, r5]
   15188:	bl	117c0 <free@plt>
   1518c:	ldr	r0, [r4, r5]
   15190:	cmp	r0, #0
   15194:	bne	15180 <__assert_fail@plt+0x35a0>
   15198:	movw	r5, #4112	; 0x1010
   1519c:	ldr	r0, [r4, r5]
   151a0:	cmp	r0, #0
   151a4:	beq	151c0 <__assert_fail@plt+0x35e0>
   151a8:	ldr	r3, [r0]
   151ac:	str	r3, [r4, r5]
   151b0:	bl	117c0 <free@plt>
   151b4:	ldr	r0, [r4, r5]
   151b8:	cmp	r0, #0
   151bc:	bne	151a8 <__assert_fail@plt+0x35c8>
   151c0:	movw	r5, #4116	; 0x1014
   151c4:	ldr	r0, [r4, r5]
   151c8:	cmp	r0, #0
   151cc:	popeq	{r3, r4, r5, pc}
   151d0:	ldr	r3, [r0]
   151d4:	str	r3, [r4, r5]
   151d8:	bl	117c0 <free@plt>
   151dc:	ldr	r0, [r4, r5]
   151e0:	cmp	r0, #0
   151e4:	bne	151d0 <__assert_fail@plt+0x35f0>
   151e8:	pop	{r3, r4, r5, pc}
   151ec:	ldr	r2, [r0]
   151f0:	add	r3, r0, #16
   151f4:	push	{r4, lr}
   151f8:	cmp	r2, #0
   151fc:	sub	sp, sp, #8
   15200:	mov	r4, r0
   15204:	ldrne	r1, [r2, #4]
   15208:	movweq	r1, #50108	; 0xc3bc
   1520c:	str	r2, [sp]
   15210:	movteq	r1, #2
   15214:	mov	r0, #7
   15218:	mov	r2, r4
   1521c:	str	r1, [sp, #4]
   15220:	movw	r1, #46140	; 0xb43c
   15224:	movt	r1, #2
   15228:	bl	19fe0 <__assert_fail@plt+0x8400>
   1522c:	mov	r0, r4
   15230:	add	sp, sp, #8
   15234:	pop	{r4, lr}
   15238:	b	117c0 <free@plt>
   1523c:	push	{r4, r5, lr}
   15240:	mov	r5, r0
   15244:	ldrb	r2, [r0]
   15248:	sub	sp, sp, #12
   1524c:	cmp	r2, #0
   15250:	beq	15294 <__assert_fail@plt+0x36b4>
   15254:	mov	r4, r0
   15258:	b	15268 <__assert_fail@plt+0x3688>
   1525c:	ldrb	r2, [r4, #1]!
   15260:	cmp	r2, #0
   15264:	beq	15294 <__assert_fail@plt+0x36b4>
   15268:	cmp	r2, #127	; 0x7f
   1526c:	ble	1525c <__assert_fail@plt+0x367c>
   15270:	mov	r3, r2
   15274:	str	r5, [sp]
   15278:	movw	r1, #46172	; 0xb45c
   1527c:	mov	r0, #2
   15280:	movt	r1, #2
   15284:	bl	19fe0 <__assert_fail@plt+0x8400>
   15288:	ldrb	r2, [r4, #1]!
   1528c:	cmp	r2, #0
   15290:	bne	15268 <__assert_fail@plt+0x3688>
   15294:	add	sp, sp, #12
   15298:	pop	{r4, r5, pc}
   1529c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152a0:	movw	r9, #61944	; 0xf1f8
   152a4:	movt	r9, #3
   152a8:	mov	r7, r2
   152ac:	sub	sp, sp, #148	; 0x94
   152b0:	mov	r8, r3
   152b4:	ldr	r2, [r9]
   152b8:	mov	r5, r0
   152bc:	str	r1, [sp, #28]
   152c0:	mov	r6, #1
   152c4:	str	r6, [sp, #24]
   152c8:	str	r2, [sp, #140]	; 0x8c
   152cc:	bl	11b38 <dirfd@plt>
   152d0:	str	r0, [sp, #20]
   152d4:	mov	r0, r5
   152d8:	bl	11afc <readdir64@plt>
   152dc:	cmp	r0, #0
   152e0:	beq	15370 <__assert_fail@plt+0x3790>
   152e4:	ldrb	r1, [r0, #19]
   152e8:	add	r4, r0, #19
   152ec:	cmp	r1, #46	; 0x2e
   152f0:	beq	1538c <__assert_fail@plt+0x37ac>
   152f4:	movw	r1, #46248	; 0xb4a8
   152f8:	mov	r0, r4
   152fc:	movt	r1, #2
   15300:	bl	11754 <strcmp@plt>
   15304:	cmp	r0, #0
   15308:	beq	152d4 <__assert_fail@plt+0x36f4>
   1530c:	movw	r1, #46256	; 0xb4b0
   15310:	mov	r0, r4
   15314:	movt	r1, #2
   15318:	bl	11754 <strcmp@plt>
   1531c:	cmp	r0, #0
   15320:	beq	152d4 <__assert_fail@plt+0x36f4>
   15324:	mov	r0, r4
   15328:	bl	119a0 <strlen@plt>
   1532c:	add	sl, r0, r7
   15330:	mov	r6, r0
   15334:	add	r3, sl, #2
   15338:	cmp	r3, #4096	; 0x1000
   1533c:	bcc	153b0 <__assert_fail@plt+0x37d0>
   15340:	mov	r3, r4
   15344:	mov	r2, #0
   15348:	mov	r0, #3
   1534c:	strb	r2, [r8, r7]
   15350:	movw	r1, #46264	; 0xb4b8
   15354:	mov	r2, r8
   15358:	movt	r1, #2
   1535c:	bl	19fe0 <__assert_fail@plt+0x8400>
   15360:	mov	r0, r5
   15364:	bl	11afc <readdir64@plt>
   15368:	cmp	r0, #0
   1536c:	bne	152e4 <__assert_fail@plt+0x3704>
   15370:	ldr	r2, [sp, #140]	; 0x8c
   15374:	ldr	r3, [r9]
   15378:	ldr	r0, [sp, #24]
   1537c:	cmp	r2, r3
   15380:	bne	155a4 <__assert_fail@plt+0x39c4>
   15384:	add	sp, sp, #148	; 0x94
   15388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1538c:	ldrb	r1, [r0, #20]
   15390:	cmp	r1, #0
   15394:	beq	152d4 <__assert_fail@plt+0x36f4>
   15398:	cmp	r1, #46	; 0x2e
   1539c:	bne	152f4 <__assert_fail@plt+0x3714>
   153a0:	ldrb	r3, [r0, #21]
   153a4:	cmp	r3, #0
   153a8:	beq	152d4 <__assert_fail@plt+0x36f4>
   153ac:	b	152f4 <__assert_fail@plt+0x3714>
   153b0:	mov	fp, #0
   153b4:	mov	r0, #3
   153b8:	str	fp, [sp]
   153bc:	mov	r2, r4
   153c0:	ldr	r1, [sp, #20]
   153c4:	add	r3, sp, #32
   153c8:	bl	1185c <__fxstatat64@plt>
   153cc:	cmp	r0, fp
   153d0:	blt	15444 <__assert_fail@plt+0x3864>
   153d4:	ldr	r3, [sp, #48]	; 0x30
   153d8:	and	r3, r3, #61440	; 0xf000
   153dc:	cmp	r3, #16384	; 0x4000
   153e0:	beq	15460 <__assert_fail@plt+0x3880>
   153e4:	cmp	r3, #32768	; 0x8000
   153e8:	beq	15404 <__assert_fail@plt+0x3824>
   153ec:	movw	r1, #46424	; 0xb558
   153f0:	mov	r0, #3
   153f4:	movt	r1, #2
   153f8:	mov	r2, r8
   153fc:	bl	19fe0 <__assert_fail@plt+0x8400>
   15400:	b	152d4 <__assert_fail@plt+0x36f4>
   15404:	mov	r0, r4
   15408:	mov	r1, r6
   1540c:	bl	1b3f8 <__assert_fail@plt+0x9818>
   15410:	cmp	r0, #0
   15414:	beq	152d4 <__assert_fail@plt+0x36f4>
   15418:	mov	r1, r4
   1541c:	add	r2, r6, #1
   15420:	add	r0, r8, r7
   15424:	bl	117e4 <memcpy@plt>
   15428:	ldr	r4, [sp, #112]	; 0x70
   1542c:	ldr	r6, [sp, #28]
   15430:	cmp	r6, r4
   15434:	blt	15530 <__assert_fail@plt+0x3950>
   15438:	mov	r6, #1
   1543c:	str	r6, [sp, #24]
   15440:	b	152d4 <__assert_fail@plt+0x36f4>
   15444:	mov	r3, r4
   15448:	movw	r1, #46288	; 0xb4d0
   1544c:	mov	r0, #3
   15450:	movt	r1, #2
   15454:	ldr	r2, [sp, #20]
   15458:	bl	19fe0 <__assert_fail@plt+0x8400>
   1545c:	b	152d4 <__assert_fail@plt+0x36f4>
   15460:	add	r2, r6, #1
   15464:	add	r0, r8, r7
   15468:	mov	r1, r4
   1546c:	bl	117e4 <memcpy@plt>
   15470:	add	r3, sl, #256	; 0x100
   15474:	add	r3, r3, #1
   15478:	cmp	r3, #4096	; 0x1000
   1547c:	bcs	15518 <__assert_fail@plt+0x3938>
   15480:	ldr	r0, [sp, #20]
   15484:	mov	r1, r4
   15488:	mov	r2, fp
   1548c:	bl	119c4 <openat64@plt>
   15490:	subs	r6, r0, #0
   15494:	blt	15568 <__assert_fail@plt+0x3988>
   15498:	bl	11b08 <fdopendir@plt>
   1549c:	subs	r4, r0, #0
   154a0:	beq	15584 <__assert_fail@plt+0x39a4>
   154a4:	add	r3, sl, #1
   154a8:	mov	r2, #47	; 0x2f
   154ac:	ldr	r1, [sp, #28]
   154b0:	strb	r2, [r8, sl]
   154b4:	mov	r2, r3
   154b8:	strb	fp, [r8, r3]
   154bc:	mov	r3, r8
   154c0:	bl	1529c <__assert_fail@plt+0x36bc>
   154c4:	str	r0, [sp, #24]
   154c8:	mov	r0, r4
   154cc:	bl	11bc8 <closedir@plt>
   154d0:	ldr	r6, [sp, #24]
   154d4:	cmp	r6, #0
   154d8:	beq	1555c <__assert_fail@plt+0x397c>
   154dc:	bge	152d4 <__assert_fail@plt+0x36f4>
   154e0:	ldr	r6, [sp, #24]
   154e4:	mov	r3, #0
   154e8:	strb	r3, [r8, sl]
   154ec:	rsb	r0, r6, #0
   154f0:	mov	r6, #1
   154f4:	str	r6, [sp, #24]
   154f8:	bl	11928 <strerror@plt>
   154fc:	movw	r1, #46456	; 0xb578
   15500:	mov	r2, r8
   15504:	movt	r1, #2
   15508:	mov	r3, r0
   1550c:	mov	r0, #3
   15510:	bl	19fe0 <__assert_fail@plt+0x8400>
   15514:	b	152d4 <__assert_fail@plt+0x36f4>
   15518:	movw	r1, #46312	; 0xb4e8
   1551c:	mov	r0, #3
   15520:	movt	r1, #2
   15524:	mov	r2, r8
   15528:	bl	19fe0 <__assert_fail@plt+0x8400>
   1552c:	b	152d4 <__assert_fail@plt+0x36f4>
   15530:	asr	r7, r6, #31
   15534:	mov	r0, r6
   15538:	asr	r5, r4, #31
   1553c:	mov	r2, r8
   15540:	mov	r1, r7
   15544:	strd	r4, [sp]
   15548:	strd	r0, [sp, #8]
   1554c:	movw	r1, #46396	; 0xb53c
   15550:	mov	r0, #7
   15554:	movt	r1, #2
   15558:	bl	19fe0 <__assert_fail@plt+0x8400>
   1555c:	mov	r7, #0
   15560:	str	r7, [sp, #24]
   15564:	b	15370 <__assert_fail@plt+0x3790>
   15568:	mov	r3, r4
   1556c:	movw	r1, #46344	; 0xb508
   15570:	mov	r0, #3
   15574:	movt	r1, #2
   15578:	ldr	r2, [sp, #20]
   1557c:	bl	19fe0 <__assert_fail@plt+0x8400>
   15580:	b	152d4 <__assert_fail@plt+0x36f4>
   15584:	mov	r0, #3
   15588:	mov	r2, r6
   1558c:	movw	r1, #46376	; 0xb528
   15590:	movt	r1, #2
   15594:	bl	19fe0 <__assert_fail@plt+0x8400>
   15598:	mov	r0, r6
   1559c:	bl	11bbc <close@plt>
   155a0:	b	152d4 <__assert_fail@plt+0x36f4>
   155a4:	bl	11838 <__stack_chk_fail@plt>
   155a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155ac:	sub	sp, sp, #28
   155b0:	mov	sl, r0
   155b4:	mov	r0, r2
   155b8:	mov	r4, r3
   155bc:	mov	r7, r2
   155c0:	str	r1, [sp, #8]
   155c4:	bl	119a0 <strlen@plt>
   155c8:	cmp	r4, #0
   155cc:	mov	r6, r0
   155d0:	beq	15730 <__assert_fail@plt+0x3b50>
   155d4:	mov	r0, r4
   155d8:	bl	119a0 <strlen@plt>
   155dc:	mov	r8, r0
   155e0:	ldr	r2, [sp, #8]
   155e4:	ldr	r3, [sl]
   155e8:	ldr	r5, [r2]
   155ec:	str	r3, [sp, #12]
   155f0:	cmp	r5, #0
   155f4:	beq	15654 <__assert_fail@plt+0x3a74>
   155f8:	sub	fp, r3, #4
   155fc:	mov	r9, #0
   15600:	b	15614 <__assert_fail@plt+0x3a34>
   15604:	blt	15658 <__assert_fail@plt+0x3a78>
   15608:	add	r9, r9, #1
   1560c:	cmp	r9, r5
   15610:	beq	15658 <__assert_fail@plt+0x3a78>
   15614:	ldr	r1, [fp, #4]!
   15618:	mov	r0, r4
   1561c:	ldr	r1, [r1, #8]
   15620:	bl	11754 <strcmp@plt>
   15624:	cmp	r0, #0
   15628:	bne	15604 <__assert_fail@plt+0x3a24>
   1562c:	str	r4, [sp]
   15630:	mov	r2, r6
   15634:	mov	r3, r7
   15638:	mov	r0, #7
   1563c:	movw	r1, #46472	; 0xb588
   15640:	movt	r1, #2
   15644:	bl	19fe0 <__assert_fail@plt+0x8400>
   15648:	mvn	r0, #16
   1564c:	add	sp, sp, #28
   15650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15654:	mov	r9, r5
   15658:	add	r3, r6, r8
   1565c:	str	r3, [sp, #16]
   15660:	add	r0, r3, #14
   15664:	bl	11910 <malloc@plt>
   15668:	subs	fp, r0, #0
   1566c:	beq	15750 <__assert_fail@plt+0x3b70>
   15670:	add	r3, r5, #1
   15674:	ldr	r0, [sp, #12]
   15678:	str	r3, [sp, #20]
   1567c:	lsl	r1, r3, #2
   15680:	bl	11844 <realloc@plt>
   15684:	subs	r1, r0, #0
   15688:	beq	15768 <__assert_fail@plt+0x3b88>
   1568c:	cmp	r5, r9
   15690:	str	r1, [sl]
   15694:	addls	r1, r1, r9, lsl #2
   15698:	bhi	15704 <__assert_fail@plt+0x3b24>
   1569c:	add	r5, fp, r6
   156a0:	str	fp, [r1]
   156a4:	mov	r2, r6
   156a8:	stm	fp, {r6, r8}
   156ac:	add	r5, r5, #13
   156b0:	add	r6, fp, r6
   156b4:	mov	r1, r7
   156b8:	add	r0, fp, #12
   156bc:	str	r5, [fp, #8]
   156c0:	bl	117e4 <memcpy@plt>
   156c4:	mov	r3, #47	; 0x2f
   156c8:	mov	r2, r8
   156cc:	strb	r3, [r6, #12]
   156d0:	mov	r0, r5
   156d4:	mov	r1, r4
   156d8:	bl	117e4 <memcpy@plt>
   156dc:	ldr	r3, [sp, #16]
   156e0:	ldr	r2, [sp, #8]
   156e4:	add	ip, fp, r3
   156e8:	mov	r3, #0
   156ec:	mov	r0, r3
   156f0:	strb	r3, [ip, #13]
   156f4:	ldr	r3, [sp, #20]
   156f8:	str	r3, [r2]
   156fc:	add	sp, sp, #28
   15700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15704:	add	r0, r9, #1
   15708:	rsb	r2, r9, r5
   1570c:	lsl	r0, r0, #2
   15710:	lsl	r2, r2, #2
   15714:	sub	r5, r0, #4
   15718:	add	r0, r1, r0
   1571c:	add	r5, r1, r5
   15720:	mov	r1, r5
   15724:	bl	117b4 <memmove@plt>
   15728:	mov	r1, r5
   1572c:	b	1569c <__assert_fail@plt+0x3abc>
   15730:	mov	r0, r7
   15734:	bl	1176c <basename@plt>
   15738:	mov	r4, r0
   1573c:	bl	119a0 <strlen@plt>
   15740:	rsb	r6, r0, r6
   15744:	mov	r8, r0
   15748:	sub	r6, r6, #1
   1574c:	b	155e0 <__assert_fail@plt+0x3a00>
   15750:	mov	r0, #3
   15754:	movw	r1, #46516	; 0xb5b4
   15758:	movt	r1, #2
   1575c:	bl	19fe0 <__assert_fail@plt+0x8400>
   15760:	mvn	r0, #11
   15764:	b	156fc <__assert_fail@plt+0x3b1c>
   15768:	mov	r0, #3
   1576c:	movw	r1, #46516	; 0xb5b4
   15770:	movt	r1, #2
   15774:	bl	19fe0 <__assert_fail@plt+0x8400>
   15778:	mov	r0, fp
   1577c:	bl	117c0 <free@plt>
   15780:	mvn	r0, #11
   15784:	b	156fc <__assert_fail@plt+0x3b1c>
   15788:	ldr	ip, [r0, #4]
   1578c:	mov	r2, r0
   15790:	push	{r4, lr}
   15794:	sub	sp, sp, #8
   15798:	ldr	r3, [r0]
   1579c:	mov	r4, r0
   157a0:	str	ip, [sp]
   157a4:	mov	r0, #7
   157a8:	movw	r1, #46552	; 0xb5d8
   157ac:	movt	r1, #2
   157b0:	bl	19fe0 <__assert_fail@plt+0x8400>
   157b4:	add	r0, r4, #24
   157b8:	bl	1a7d4 <__assert_fail@plt+0x8bf4>
   157bc:	ldr	r0, [r4]
   157c0:	bl	20b98 <__assert_fail@plt+0xefb8>
   157c4:	ldr	r0, [r4, #16]
   157c8:	bl	231f0 <__assert_fail@plt+0x11610>
   157cc:	ldr	r0, [r4, #20]
   157d0:	bl	238a4 <__assert_fail@plt+0x11cc4>
   157d4:	ldr	r0, [r4, #12]
   157d8:	bl	117c0 <free@plt>
   157dc:	ldr	r0, [r4, #4]
   157e0:	bl	117c0 <free@plt>
   157e4:	mov	r0, r4
   157e8:	add	sp, sp, #8
   157ec:	pop	{r4, lr}
   157f0:	b	117c0 <free@plt>
   157f4:	push	{r3, r4, r5, lr}
   157f8:	mov	r5, r0
   157fc:	ldr	r0, [r0, #32]
   15800:	bl	1a874 <__assert_fail@plt+0x8c94>
   15804:	ldr	r0, [r5, #24]
   15808:	bl	1a874 <__assert_fail@plt+0x8c94>
   1580c:	ldr	r0, [r5, #28]
   15810:	bl	1a874 <__assert_fail@plt+0x8c94>
   15814:	ldr	r3, [r5, #12]
   15818:	cmp	r3, #0
   1581c:	movne	r4, #0
   15820:	beq	15840 <__assert_fail@plt+0x3c60>
   15824:	ldr	r3, [r5, #8]
   15828:	ldr	r0, [r3, r4, lsl #2]
   1582c:	add	r4, r4, #1
   15830:	bl	15788 <__assert_fail@plt+0x3ba8>
   15834:	ldr	r3, [r5, #12]
   15838:	cmp	r3, r4
   1583c:	bhi	15824 <__assert_fail@plt+0x3c44>
   15840:	add	r0, r5, #8
   15844:	bl	1a7d4 <__assert_fail@plt+0x8bf4>
   15848:	ldr	r0, [r5, #4]
   1584c:	pop	{r3, r4, r5, lr}
   15850:	b	1cbd8 <__assert_fail@plt+0xaff8>
   15854:	push	{r4, lr}
   15858:	mov	r1, #1
   1585c:	mov	r0, #524	; 0x20c
   15860:	bl	11718 <calloc@plt>
   15864:	mov	r4, r0
   15868:	mov	r0, #1
   1586c:	mov	r1, r0
   15870:	bl	11718 <calloc@plt>
   15874:	mvn	r3, #127	; 0x7f
   15878:	strb	r3, [r4, #8]
   1587c:	str	r0, [r4]
   15880:	mov	r0, r4
   15884:	pop	{r4, pc}
   15888:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1588c:	mov	r7, r0
   15890:	ldr	r4, [r0]
   15894:	mov	r8, r1
   15898:	mov	r9, r2
   1589c:	cmp	r4, #0
   158a0:	beq	15934 <__assert_fail@plt+0x3d54>
   158a4:	mov	r5, r4
   158a8:	mov	r6, #0
   158ac:	add	r0, r5, #8
   158b0:	mov	r1, r8
   158b4:	bl	11754 <strcmp@plt>
   158b8:	ldr	r5, [r5]
   158bc:	cmp	r0, #0
   158c0:	moveq	r6, #1
   158c4:	cmp	r5, #0
   158c8:	bne	158ac <__assert_fail@plt+0x3ccc>
   158cc:	ldr	r3, [r4, #4]
   158d0:	cmp	r9, r3
   158d4:	bhi	158e8 <__assert_fail@plt+0x3d08>
   158d8:	b	158f8 <__assert_fail@plt+0x3d18>
   158dc:	ldr	r3, [r4, #4]
   158e0:	cmp	r3, r9
   158e4:	bcs	158f8 <__assert_fail@plt+0x3d18>
   158e8:	mov	r7, r4
   158ec:	ldr	r4, [r4]
   158f0:	cmp	r4, #0
   158f4:	bne	158dc <__assert_fail@plt+0x3cfc>
   158f8:	mov	r0, r8
   158fc:	bl	119a0 <strlen@plt>
   15900:	mov	r1, #1
   15904:	mov	sl, r0
   15908:	add	r0, r0, #9
   1590c:	bl	11718 <calloc@plt>
   15910:	add	r2, sl, #1
   15914:	mov	r1, r8
   15918:	mov	r5, r0
   1591c:	add	r0, r0, #8
   15920:	stm	r5, {r4, r9}
   15924:	bl	117e4 <memcpy@plt>
   15928:	str	r5, [r7]
   1592c:	mov	r0, r6
   15930:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15934:	mov	r6, r4
   15938:	b	158f8 <__assert_fail@plt+0x3d18>
   1593c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15940:	sub	sp, sp, #20
   15944:	mov	r9, r0
   15948:	mov	r0, r1
   1594c:	str	r2, [sp, #8]
   15950:	mov	sl, #0
   15954:	str	r3, [sp, #12]
   15958:	str	r1, [sp]
   1595c:	bl	1523c <__assert_fail@plt+0x365c>
   15960:	ldr	r0, [sp, #8]
   15964:	bl	1523c <__assert_fail@plt+0x365c>
   15968:	ldr	ip, [sp]
   1596c:	ldr	r3, [r9]
   15970:	ldrb	r4, [r3]
   15974:	str	r3, [sp, #4]
   15978:	cmp	r4, #0
   1597c:	moveq	r7, sl
   15980:	addeq	r6, ip, r7
   15984:	moveq	r5, r7
   15988:	beq	159f8 <__assert_fail@plt+0x3e18>
   1598c:	ldrb	r3, [ip, sl]
   15990:	mov	r7, sl
   15994:	add	r6, ip, sl
   15998:	cmp	r3, r4
   1599c:	bne	15ab0 <__assert_fail@plt+0x3ed0>
   159a0:	ldr	r1, [sp, #4]
   159a4:	add	r2, sl, #1
   159a8:	mov	fp, #0
   159ac:	add	r3, r1, #1
   159b0:	add	r1, ip, r2
   159b4:	b	159c4 <__assert_fail@plt+0x3de4>
   159b8:	ldrb	r0, [r6]
   159bc:	cmp	r0, r4
   159c0:	bne	15a24 <__assert_fail@plt+0x3e44>
   159c4:	mov	r8, r3
   159c8:	ldrb	r4, [r3], #1
   159cc:	mov	r6, r1
   159d0:	mov	r5, r2
   159d4:	cmp	r4, #0
   159d8:	mov	r7, r2
   159dc:	add	fp, fp, #1
   159e0:	add	r1, r1, #1
   159e4:	add	r2, r2, #1
   159e8:	bne	159b8 <__assert_fail@plt+0x3dd8>
   159ec:	add	r5, sl, fp
   159f0:	add	r6, ip, r5
   159f4:	mov	r7, r5
   159f8:	ldrb	r3, [r6]
   159fc:	cmp	r3, #0
   15a00:	beq	15a98 <__assert_fail@plt+0x3eb8>
   15a04:	add	r4, r3, #2
   15a08:	add	r2, r9, r4, lsl #2
   15a0c:	ldr	r2, [r2, #4]
   15a10:	cmp	r2, #0
   15a14:	beq	15ac0 <__assert_fail@plt+0x3ee0>
   15a18:	add	sl, r5, #1
   15a1c:	mov	r9, r2
   15a20:	b	1596c <__assert_fail@plt+0x3d8c>
   15a24:	add	fp, fp, #1
   15a28:	mov	r1, #1
   15a2c:	mov	r0, #524	; 0x20c
   15a30:	str	ip, [sp]
   15a34:	bl	11718 <calloc@plt>
   15a38:	mov	r1, r9
   15a3c:	mov	r2, #524	; 0x20c
   15a40:	mov	sl, r0
   15a44:	bl	117e4 <memcpy@plt>
   15a48:	ldr	r3, [sp, #4]
   15a4c:	add	r0, r3, fp
   15a50:	bl	11a18 <__strdup@plt>
   15a54:	mov	r1, #0
   15a58:	mov	r2, #524	; 0x20c
   15a5c:	str	r0, [sl]
   15a60:	mov	r0, r9
   15a64:	bl	11a3c <memset@plt>
   15a68:	ldr	r2, [sp, #4]
   15a6c:	add	r3, r9, r4, lsl #2
   15a70:	mov	r1, #0
   15a74:	strb	r1, [r8]
   15a78:	strb	r4, [r9, #8]
   15a7c:	strb	r4, [r9, #9]
   15a80:	str	r2, [r9]
   15a84:	str	sl, [r3, #12]
   15a88:	ldrb	r3, [r6]
   15a8c:	ldr	ip, [sp]
   15a90:	cmp	r3, #0
   15a94:	bne	15a04 <__assert_fail@plt+0x3e24>
   15a98:	add	r0, r9, #4
   15a9c:	ldr	r1, [sp, #8]
   15aa0:	ldr	r2, [sp, #12]
   15aa4:	add	sp, sp, #20
   15aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aac:	b	15888 <__assert_fail@plt+0x3ca8>
   15ab0:	mov	r5, sl
   15ab4:	ldr	r8, [sp, #4]
   15ab8:	mov	fp, #1
   15abc:	b	15a28 <__assert_fail@plt+0x3e48>
   15ac0:	ldrb	r2, [r9, #8]
   15ac4:	mov	r1, #1
   15ac8:	mov	r0, #524	; 0x20c
   15acc:	add	r4, r9, r4, lsl #2
   15ad0:	cmp	r2, r3
   15ad4:	ldrb	r2, [r9, #9]
   15ad8:	strbgt	r3, [r9, #8]
   15adc:	cmp	r2, r3
   15ae0:	strblt	r3, [r9, #9]
   15ae4:	str	ip, [sp]
   15ae8:	bl	11718 <calloc@plt>
   15aec:	ldr	ip, [sp]
   15af0:	mov	r5, r0
   15af4:	add	r0, r7, #1
   15af8:	add	r0, ip, r0
   15afc:	str	r5, [r4, #4]
   15b00:	bl	11a18 <__strdup@plt>
   15b04:	mvn	r3, #127	; 0x7f
   15b08:	ldr	r1, [sp, #8]
   15b0c:	ldr	r2, [sp, #12]
   15b10:	strb	r3, [r5, #8]
   15b14:	str	r0, [r5]
   15b18:	add	r0, r5, #4
   15b1c:	bl	15888 <__assert_fail@plt+0x3ca8>
   15b20:	mov	r0, #0
   15b24:	add	sp, sp, #20
   15b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b30:	mov	r5, r0
   15b34:	sub	sp, sp, #20
   15b38:	mov	r0, r1
   15b3c:	mov	r6, r1
   15b40:	ldr	fp, [r5]
   15b44:	bl	21044 <__assert_fail@plt+0xf464>
   15b48:	mov	r7, r0
   15b4c:	bl	119a0 <strlen@plt>
   15b50:	mov	r8, r0
   15b54:	mov	r0, #1
   15b58:	add	r1, r8, #65	; 0x41
   15b5c:	add	r8, r8, r0
   15b60:	bl	11718 <calloc@plt>
   15b64:	subs	r4, r0, #0
   15b68:	beq	15d14 <__assert_fail@plt+0x4134>
   15b6c:	ldr	r3, [r5, #12]
   15b70:	add	r9, r4, #61	; 0x3d
   15b74:	mov	r2, r8
   15b78:	mov	r1, r7
   15b7c:	add	r3, r3, #1
   15b80:	str	r6, [r4]
   15b84:	str	r3, [r4, #48]	; 0x30
   15b88:	mov	r0, r9
   15b8c:	mvn	r3, #-2147483648	; 0x80000000
   15b90:	str	r3, [r4, #52]	; 0x34
   15b94:	bl	117e4 <memcpy@plt>
   15b98:	mov	r1, #4
   15b9c:	add	r0, r4, #24
   15ba0:	str	r8, [r4, #44]	; 0x2c
   15ba4:	bl	1a6d0 <__assert_fail@plt+0x8af0>
   15ba8:	mov	r0, r6
   15bac:	bl	21050 <__assert_fail@plt+0xf470>
   15bb0:	bl	11a18 <__strdup@plt>
   15bb4:	mov	r1, #47	; 0x2f
   15bb8:	str	r0, [r4, #4]
   15bbc:	mov	r7, r0
   15bc0:	bl	11acc <strrchr@plt>
   15bc4:	movw	r3, #4100	; 0x1004
   15bc8:	ldr	r3, [fp, r3]
   15bcc:	add	r1, fp, #4
   15bd0:	rsb	r2, r7, r0
   15bd4:	mov	sl, r0
   15bd8:	str	r2, [r4, #40]	; 0x28
   15bdc:	mov	r0, r7
   15be0:	mov	r2, r3
   15be4:	str	r3, [sp, #12]
   15be8:	bl	11ba4 <strncmp@plt>
   15bec:	ldr	r3, [sp, #12]
   15bf0:	cmp	r0, #0
   15bf4:	beq	15c88 <__assert_fail@plt+0x40a8>
   15bf8:	mov	r3, #0
   15bfc:	str	r3, [r4, #8]
   15c00:	ldr	r0, [r5, #28]
   15c04:	mov	r1, r9
   15c08:	mov	r2, r4
   15c0c:	bl	1aae0 <__assert_fail@plt+0x8f00>
   15c10:	subs	r7, r0, #0
   15c14:	blt	15cf0 <__assert_fail@plt+0x4110>
   15c18:	ldr	r0, [r4, #8]
   15c1c:	cmp	r0, #0
   15c20:	beq	15c5c <__assert_fail@plt+0x407c>
   15c24:	rsb	sl, r0, sl
   15c28:	add	r8, sl, r8
   15c2c:	add	r1, r8, #4
   15c30:	bl	1b1a8 <__assert_fail@plt+0x95c8>
   15c34:	mov	r3, #0
   15c38:	mov	r2, r4
   15c3c:	add	r8, r0, r8
   15c40:	str	r0, [r4, #12]
   15c44:	strb	r3, [r8, #3]
   15c48:	ldr	r0, [r5, #24]
   15c4c:	ldr	r1, [r4, #12]
   15c50:	bl	1aae0 <__assert_fail@plt+0x8f00>
   15c54:	subs	r7, r0, #0
   15c58:	blt	15ca4 <__assert_fail@plt+0x40c4>
   15c5c:	ldr	ip, [r4, #4]
   15c60:	mov	r0, #7
   15c64:	mov	r3, r6
   15c68:	mov	r2, r4
   15c6c:	movw	r1, #46604	; 0xb60c
   15c70:	movt	r1, #2
   15c74:	str	ip, [sp]
   15c78:	bl	19fe0 <__assert_fail@plt+0x8400>
   15c7c:	mov	r0, #0
   15c80:	add	sp, sp, #20
   15c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c88:	ldrb	r2, [r7, r3]
   15c8c:	cmp	r2, #47	; 0x2f
   15c90:	addeq	r3, r3, #1
   15c94:	addeq	r7, r7, r3
   15c98:	streq	r7, [r4, #8]
   15c9c:	bne	15bf8 <__assert_fail@plt+0x4018>
   15ca0:	b	15c00 <__assert_fail@plt+0x4020>
   15ca4:	rsb	r0, r7, #0
   15ca8:	ldr	r6, [r4, #12]
   15cac:	bl	11928 <strerror@plt>
   15cb0:	movw	r1, #46580	; 0xb5f4
   15cb4:	movt	r1, #2
   15cb8:	mov	r2, r6
   15cbc:	mov	r3, r0
   15cc0:	mov	r0, #3
   15cc4:	bl	19fe0 <__assert_fail@plt+0x8400>
   15cc8:	ldr	r0, [r5, #28]
   15ccc:	mov	r1, r9
   15cd0:	bl	1ae08 <__assert_fail@plt+0x9228>
   15cd4:	ldr	r0, [r4, #12]
   15cd8:	bl	117c0 <free@plt>
   15cdc:	mov	r0, r4
   15ce0:	bl	117c0 <free@plt>
   15ce4:	mov	r0, r7
   15ce8:	add	sp, sp, #20
   15cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cf0:	rsb	r0, r7, #0
   15cf4:	bl	11928 <strerror@plt>
   15cf8:	mov	r2, r9
   15cfc:	movw	r1, #46580	; 0xb5f4
   15d00:	movt	r1, #2
   15d04:	mov	r3, r0
   15d08:	mov	r0, #3
   15d0c:	bl	19fe0 <__assert_fail@plt+0x8400>
   15d10:	b	15cd4 <__assert_fail@plt+0x40f4>
   15d14:	mvn	r0, #11
   15d18:	b	15c80 <__assert_fail@plt+0x40a0>
   15d1c:	push	{r4, r5, r6, lr}
   15d20:	movw	r5, #61944	; 0xf1f8
   15d24:	movt	r5, #3
   15d28:	sub	sp, sp, #32
   15d2c:	mov	r6, r0
   15d30:	mov	r3, r1
   15d34:	ldr	ip, [r5]
   15d38:	mov	r4, r1
   15d3c:	movw	r0, #46632	; 0xb628
   15d40:	mov	r1, #1
   15d44:	movt	r0, #2
   15d48:	mov	r2, #49	; 0x31
   15d4c:	str	ip, [sp, #28]
   15d50:	bl	1188c <fwrite@plt>
   15d54:	ldr	r0, [r6, #32]
   15d58:	add	r1, sp, #16
   15d5c:	bl	1b020 <__assert_fail@plt+0x9440>
   15d60:	add	r0, sp, #16
   15d64:	mov	r1, #0
   15d68:	add	r2, sp, #12
   15d6c:	bl	1b038 <__assert_fail@plt+0x9458>
   15d70:	cmp	r0, #0
   15d74:	beq	15dac <__assert_fail@plt+0x41cc>
   15d78:	ldr	r3, [sp, #12]
   15d7c:	ldr	ip, [r3]
   15d80:	cmp	ip, #0
   15d84:	beq	15d60 <__assert_fail@plt+0x4180>
   15d88:	add	ip, ip, #61	; 0x3d
   15d8c:	add	r3, r3, #16
   15d90:	str	ip, [sp]
   15d94:	movw	r2, #46684	; 0xb65c
   15d98:	mov	r0, r4
   15d9c:	movt	r2, #2
   15da0:	mov	r1, #1
   15da4:	bl	11a78 <__fprintf_chk@plt>
   15da8:	b	15d60 <__assert_fail@plt+0x4180>
   15dac:	ldr	r2, [sp, #28]
   15db0:	ldr	r3, [r5]
   15db4:	cmp	r2, r3
   15db8:	bne	15dc4 <__assert_fail@plt+0x41e4>
   15dbc:	add	sp, sp, #32
   15dc0:	pop	{r4, r5, r6, pc}
   15dc4:	bl	11838 <__stack_chk_fail@plt>
   15dc8:	movw	r2, #61944	; 0xf1f8
   15dcc:	movt	r2, #3
   15dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dd4:	sub	sp, sp, #52	; 0x34
   15dd8:	ldr	ip, [r2]
   15ddc:	mov	r3, r1
   15de0:	str	r2, [sp, #28]
   15de4:	mov	r2, #52	; 0x34
   15de8:	str	r1, [sp, #24]
   15dec:	mov	r1, #1
   15df0:	str	r0, [sp, #20]
   15df4:	movw	r0, #46704	; 0xb670
   15df8:	movt	r0, #2
   15dfc:	str	ip, [sp, #44]	; 0x2c
   15e00:	bl	1188c <fwrite@plt>
   15e04:	ldr	r1, [sp, #20]
   15e08:	ldr	r3, [r1, #12]
   15e0c:	cmp	r3, #0
   15e10:	movne	sl, #0
   15e14:	beq	15f78 <__assert_fail@plt+0x4398>
   15e18:	ldr	r1, [sp, #20]
   15e1c:	ldr	r2, [r1, #8]
   15e20:	ldr	r6, [r2, sl, lsl #2]
   15e24:	ldr	r4, [r6, #16]
   15e28:	cmp	r4, #0
   15e2c:	beq	15f6c <__assert_fail@plt+0x438c>
   15e30:	mov	r9, #0
   15e34:	str	r9, [sp, #16]
   15e38:	mov	r8, r9
   15e3c:	mov	r7, r9
   15e40:	b	15e78 <__assert_fail@plt+0x4298>
   15e44:	adds	r3, r8, #0
   15e48:	add	r7, r5, #8
   15e4c:	movne	r3, #1
   15e50:	cmp	r7, #0
   15e54:	moveq	r3, #0
   15e58:	andne	r3, r3, #1
   15e5c:	cmp	r3, #0
   15e60:	bne	15f30 <__assert_fail@plt+0x4350>
   15e64:	mov	r1, r4
   15e68:	ldr	r0, [r6, #16]
   15e6c:	bl	1d0f4 <__assert_fail@plt+0xb514>
   15e70:	subs	r4, r0, #0
   15e74:	beq	15f28 <__assert_fail@plt+0x4348>
   15e78:	mov	r0, r4
   15e7c:	bl	231d0 <__assert_fail@plt+0x115f0>
   15e80:	mov	fp, r0
   15e84:	mov	r0, r4
   15e88:	bl	231e0 <__assert_fail@plt+0x11600>
   15e8c:	movw	r1, #45504	; 0xb1c0
   15e90:	movt	r1, #2
   15e94:	mov	r5, r0
   15e98:	mov	r0, fp
   15e9c:	bl	11754 <strcmp@plt>
   15ea0:	cmp	r0, #0
   15ea4:	bne	15e64 <__assert_fail@plt+0x4284>
   15ea8:	movw	r1, #46760	; 0xb6a8
   15eac:	mov	r0, r5
   15eb0:	movt	r1, #2
   15eb4:	mov	r2, #8
   15eb8:	bl	11ba4 <strncmp@plt>
   15ebc:	cmp	r0, #0
   15ec0:	beq	15e44 <__assert_fail@plt+0x4264>
   15ec4:	movw	r1, #46772	; 0xb6b4
   15ec8:	mov	r0, r5
   15ecc:	movt	r1, #2
   15ed0:	add	r3, sp, #40	; 0x28
   15ed4:	add	r2, sp, #36	; 0x24
   15ed8:	bl	11af0 <sscanf@plt>
   15edc:	cmp	r0, #2
   15ee0:	bne	15efc <__assert_fail@plt+0x431c>
   15ee4:	ldr	r2, [sp, #36]	; 0x24
   15ee8:	mov	r3, #1
   15eec:	ldr	r9, [sp, #40]	; 0x28
   15ef0:	mov	r8, #99	; 0x63
   15ef4:	str	r2, [sp, #16]
   15ef8:	b	15e50 <__assert_fail@plt+0x4270>
   15efc:	mov	r0, r5
   15f00:	add	r3, sp, #40	; 0x28
   15f04:	movw	r1, #46792	; 0xb6c8
   15f08:	add	r2, sp, #36	; 0x24
   15f0c:	movt	r1, #2
   15f10:	bl	11af0 <sscanf@plt>
   15f14:	cmp	r0, #2
   15f18:	beq	15fc8 <__assert_fail@plt+0x43e8>
   15f1c:	adds	r3, r8, #0
   15f20:	movne	r3, #1
   15f24:	b	15e50 <__assert_fail@plt+0x4270>
   15f28:	cmp	r7, #0
   15f2c:	beq	15fb0 <__assert_fail@plt+0x43d0>
   15f30:	cmp	r8, #0
   15f34:	beq	15f98 <__assert_fail@plt+0x43b8>
   15f38:	ldr	r1, [sp, #16]
   15f3c:	add	r3, r6, #61	; 0x3d
   15f40:	str	r7, [sp]
   15f44:	movw	r2, #46812	; 0xb6dc
   15f48:	str	r8, [sp, #4]
   15f4c:	movt	r2, #2
   15f50:	str	r1, [sp, #8]
   15f54:	mov	r1, #1
   15f58:	str	r9, [sp, #12]
   15f5c:	ldr	r0, [sp, #24]
   15f60:	bl	11a78 <__fprintf_chk@plt>
   15f64:	ldr	r2, [sp, #20]
   15f68:	ldr	r3, [r2, #12]
   15f6c:	add	sl, sl, #1
   15f70:	cmp	r3, sl
   15f74:	bhi	15e18 <__assert_fail@plt+0x4238>
   15f78:	ldr	r1, [sp, #28]
   15f7c:	mov	r0, #0
   15f80:	ldr	r2, [sp, #44]	; 0x2c
   15f84:	ldr	r3, [r1]
   15f88:	cmp	r2, r3
   15f8c:	bne	15fe0 <__assert_fail@plt+0x4400>
   15f90:	add	sp, sp, #52	; 0x34
   15f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f98:	movw	r1, #46828	; 0xb6ec
   15f9c:	add	r2, r6, #61	; 0x3d
   15fa0:	mov	r3, r7
   15fa4:	mov	r0, #3
   15fa8:	movt	r1, #2
   15fac:	bl	19fe0 <__assert_fail@plt+0x8400>
   15fb0:	ldr	r1, [sp, #20]
   15fb4:	add	sl, sl, #1
   15fb8:	ldr	r3, [r1, #12]
   15fbc:	cmp	r3, sl
   15fc0:	bhi	15e18 <__assert_fail@plt+0x4238>
   15fc4:	b	15f78 <__assert_fail@plt+0x4398>
   15fc8:	ldr	r3, [sp, #36]	; 0x24
   15fcc:	mov	r8, #98	; 0x62
   15fd0:	ldr	r9, [sp, #40]	; 0x28
   15fd4:	str	r3, [sp, #16]
   15fd8:	mov	r3, #1
   15fdc:	b	15e50 <__assert_fail@plt+0x4270>
   15fe0:	bl	11838 <__stack_chk_fail@plt>
   15fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fe8:	mov	r3, r1
   15fec:	mov	fp, r0
   15ff0:	sub	sp, sp, #12
   15ff4:	mov	sl, r1
   15ff8:	movw	r0, #46908	; 0xb73c
   15ffc:	mov	r1, #1
   16000:	movt	r0, #2
   16004:	mov	r2, #55	; 0x37
   16008:	bl	1188c <fwrite@plt>
   1600c:	ldr	r3, [fp, #12]
   16010:	cmp	r3, #0
   16014:	beq	160ac <__assert_fail@plt+0x44cc>
   16018:	mov	r8, #0
   1601c:	ldr	r2, [fp, #8]
   16020:	ldr	r7, [r2, r8, lsl #2]
   16024:	ldr	r4, [r7, #16]
   16028:	cmp	r4, #0
   1602c:	addne	r9, r7, #61	; 0x3d
   16030:	bne	1604c <__assert_fail@plt+0x446c>
   16034:	b	160a0 <__assert_fail@plt+0x44c0>
   16038:	mov	r1, r4
   1603c:	ldr	r0, [r7, #16]
   16040:	bl	1d0f4 <__assert_fail@plt+0xb514>
   16044:	subs	r4, r0, #0
   16048:	beq	1609c <__assert_fail@plt+0x44bc>
   1604c:	mov	r0, r4
   16050:	bl	231d0 <__assert_fail@plt+0x115f0>
   16054:	mov	r5, r0
   16058:	mov	r0, r4
   1605c:	bl	231e0 <__assert_fail@plt+0x11600>
   16060:	movw	r1, #51284	; 0xc854
   16064:	movt	r1, #2
   16068:	mov	r6, r0
   1606c:	mov	r0, r5
   16070:	bl	11754 <strcmp@plt>
   16074:	cmp	r0, #0
   16078:	bne	16038 <__assert_fail@plt+0x4458>
   1607c:	str	r6, [sp]
   16080:	movw	r2, #46964	; 0xb774
   16084:	mov	r0, sl
   16088:	movt	r2, #2
   1608c:	mov	r1, #1
   16090:	mov	r3, r9
   16094:	bl	11a78 <__fprintf_chk@plt>
   16098:	b	16038 <__assert_fail@plt+0x4458>
   1609c:	ldr	r3, [fp, #12]
   160a0:	add	r8, r8, #1
   160a4:	cmp	r3, r8
   160a8:	bhi	1601c <__assert_fail@plt+0x443c>
   160ac:	mov	r0, #0
   160b0:	add	sp, sp, #12
   160b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160bc:	mov	r3, r1
   160c0:	mov	fp, r0
   160c4:	sub	sp, sp, #12
   160c8:	mov	sl, r1
   160cc:	movw	r0, #46980	; 0xb784
   160d0:	mov	r1, #1
   160d4:	movt	r0, #2
   160d8:	mov	r2, #45	; 0x2d
   160dc:	bl	1188c <fwrite@plt>
   160e0:	ldr	r3, [fp, #12]
   160e4:	cmp	r3, #0
   160e8:	beq	16180 <__assert_fail@plt+0x45a0>
   160ec:	mov	r8, #0
   160f0:	ldr	r2, [fp, #8]
   160f4:	ldr	r7, [r2, r8, lsl #2]
   160f8:	ldr	r4, [r7, #16]
   160fc:	cmp	r4, #0
   16100:	addne	r9, r7, #61	; 0x3d
   16104:	bne	16120 <__assert_fail@plt+0x4540>
   16108:	b	16174 <__assert_fail@plt+0x4594>
   1610c:	mov	r1, r4
   16110:	ldr	r0, [r7, #16]
   16114:	bl	1d0f4 <__assert_fail@plt+0xb514>
   16118:	subs	r4, r0, #0
   1611c:	beq	16170 <__assert_fail@plt+0x4590>
   16120:	mov	r0, r4
   16124:	bl	231d0 <__assert_fail@plt+0x115f0>
   16128:	mov	r5, r0
   1612c:	mov	r0, r4
   16130:	bl	231e0 <__assert_fail@plt+0x11600>
   16134:	movw	r1, #45504	; 0xb1c0
   16138:	movt	r1, #2
   1613c:	mov	r6, r0
   16140:	mov	r0, r5
   16144:	bl	11754 <strcmp@plt>
   16148:	cmp	r0, #0
   1614c:	bne	1610c <__assert_fail@plt+0x452c>
   16150:	str	r9, [sp]
   16154:	mov	r3, r6
   16158:	movw	r2, #47028	; 0xb7b4
   1615c:	mov	r0, sl
   16160:	movt	r2, #2
   16164:	mov	r1, #1
   16168:	bl	11a78 <__fprintf_chk@plt>
   1616c:	b	1610c <__assert_fail@plt+0x452c>
   16170:	ldr	r3, [fp, #12]
   16174:	add	r8, r8, #1
   16178:	cmp	r3, r8
   1617c:	bhi	160f0 <__assert_fail@plt+0x4510>
   16180:	mov	r0, #0
   16184:	add	sp, sp, #12
   16188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1618c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16190:	movw	r6, #61944	; 0xf1f8
   16194:	movt	r6, #3
   16198:	sub	sp, sp, #8
   1619c:	subs	r9, r0, #0
   161a0:	mov	r5, r1
   161a4:	ldr	r3, [r6]
   161a8:	str	r3, [sp, #4]
   161ac:	beq	1634c <__assert_fail@plt+0x476c>
   161b0:	ldrb	r4, [r9, #8]
   161b4:	tst	r4, #128	; 0x80
   161b8:	movne	r8, #0
   161bc:	movne	sl, r8
   161c0:	bne	16220 <__assert_fail@plt+0x4640>
   161c4:	ldrb	r8, [r9, #9]
   161c8:	rsb	r8, r4, r8
   161cc:	add	r8, r8, #1
   161d0:	lsl	r0, r8, #2
   161d4:	bl	11910 <malloc@plt>
   161d8:	cmp	r8, #0
   161dc:	mov	sl, r0
   161e0:	ble	16220 <__assert_fail@plt+0x4640>
   161e4:	mov	r3, r4
   161e8:	sub	r7, r0, #4
   161ec:	mov	r4, #0
   161f0:	b	161f8 <__assert_fail@plt+0x4618>
   161f4:	ldrb	r3, [r9, #8]
   161f8:	add	r3, r3, r4
   161fc:	mov	r1, r5
   16200:	add	r4, r4, #1
   16204:	add	r3, r9, r3, lsl #2
   16208:	ldr	r0, [r3, #12]
   1620c:	bl	1618c <__assert_fail@plt+0x45ac>
   16210:	cmp	r4, r8
   16214:	rev	r0, r0
   16218:	str	r0, [r7, #4]!
   1621c:	bne	161f4 <__assert_fail@plt+0x4614>
   16220:	mov	r0, r5
   16224:	bl	11814 <ftell@plt>
   16228:	mov	r7, r0
   1622c:	ldr	r0, [r9]
   16230:	ldrb	r3, [r0]
   16234:	cmp	r3, #0
   16238:	bne	16330 <__assert_fail@plt+0x4750>
   1623c:	cmp	r8, #0
   16240:	bne	162fc <__assert_fail@plt+0x471c>
   16244:	mov	r0, sl
   16248:	bl	117c0 <free@plt>
   1624c:	ldr	r3, [r9, #4]
   16250:	cmp	r3, #0
   16254:	beq	162e0 <__assert_fail@plt+0x4700>
   16258:	mov	r2, #0
   1625c:	ldr	r3, [r3]
   16260:	add	r2, r2, #1
   16264:	cmp	r3, #0
   16268:	bne	1625c <__assert_fail@plt+0x467c>
   1626c:	add	r8, sp, #8
   16270:	rev	r2, r2
   16274:	mov	r1, #4
   16278:	mov	r0, sp
   1627c:	str	r2, [r8, #-8]!
   16280:	mov	r3, r5
   16284:	mov	r2, #1
   16288:	bl	1188c <fwrite@plt>
   1628c:	ldr	r4, [r9, #4]
   16290:	cmp	r4, #0
   16294:	beq	162dc <__assert_fail@plt+0x46fc>
   16298:	ldr	ip, [r4, #4]
   1629c:	mov	r2, #1
   162a0:	mov	r3, r5
   162a4:	mov	r1, #4
   162a8:	mov	r0, sp
   162ac:	rev	ip, ip
   162b0:	str	ip, [sp]
   162b4:	bl	1188c <fwrite@plt>
   162b8:	add	r0, r4, #8
   162bc:	mov	r1, r5
   162c0:	bl	11b98 <fputs@plt>
   162c4:	mov	r0, #0
   162c8:	mov	r1, r5
   162cc:	bl	11ae4 <fputc@plt>
   162d0:	ldr	r4, [r4]
   162d4:	cmp	r4, #0
   162d8:	bne	16298 <__assert_fail@plt+0x46b8>
   162dc:	orr	r7, r7, #1073741824	; 0x40000000
   162e0:	mov	r0, r7
   162e4:	ldr	r2, [sp, #4]
   162e8:	ldr	r3, [r6]
   162ec:	cmp	r2, r3
   162f0:	bne	16354 <__assert_fail@plt+0x4774>
   162f4:	add	sp, sp, #8
   162f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162fc:	mov	r1, r5
   16300:	ldrb	r0, [r9, #8]
   16304:	bl	11ae4 <fputc@plt>
   16308:	mov	r1, r5
   1630c:	ldrb	r0, [r9, #9]
   16310:	orr	r7, r7, #536870912	; 0x20000000
   16314:	bl	11ae4 <fputc@plt>
   16318:	mov	r0, sl
   1631c:	mov	r2, r8
   16320:	mov	r1, #4
   16324:	mov	r3, r5
   16328:	bl	1188c <fwrite@plt>
   1632c:	b	16244 <__assert_fail@plt+0x4664>
   16330:	mov	r1, r5
   16334:	orr	r7, r7, #-2147483648	; 0x80000000
   16338:	bl	11b98 <fputs@plt>
   1633c:	mov	r1, r5
   16340:	mov	r0, #0
   16344:	bl	11ae4 <fputc@plt>
   16348:	b	1623c <__assert_fail@plt+0x465c>
   1634c:	mov	r0, r9
   16350:	b	162e4 <__assert_fail@plt+0x4704>
   16354:	bl	11838 <__stack_chk_fail@plt>
   16358:	push	{r4, r5, r6, r7, r8, r9, lr}
   1635c:	movw	r6, #61944	; 0xf1f8
   16360:	movt	r6, #3
   16364:	sub	sp, sp, #12
   16368:	add	r5, sp, #8
   1636c:	mov	r4, r1
   16370:	ldr	ip, [r6]
   16374:	mov	r3, r1
   16378:	mov	r8, r0
   1637c:	mov	r1, #4
   16380:	mov	r2, #1968	; 0x7b0
   16384:	mov	r0, sp
   16388:	movt	r2, #22516	; 0x57f4
   1638c:	str	r2, [r5, #-8]!
   16390:	mov	r2, #1
   16394:	str	ip, [sp, #4]
   16398:	bl	1188c <fwrite@plt>
   1639c:	mov	r3, r4
   163a0:	mov	r1, #4
   163a4:	mov	r2, #1
   163a8:	mov	r0, sp
   163ac:	mov	ip, #512	; 0x200
   163b0:	movt	ip, #256	; 0x100
   163b4:	str	ip, [sp]
   163b8:	bl	1188c <fwrite@plt>
   163bc:	mov	r0, r4
   163c0:	bl	11814 <ftell@plt>
   163c4:	subs	r9, r0, #0
   163c8:	blt	16458 <__assert_fail@plt+0x4878>
   163cc:	mov	r2, #1
   163d0:	mov	r3, r4
   163d4:	mov	r1, #4
   163d8:	mov	r0, sp
   163dc:	mov	r7, #0
   163e0:	str	r7, [sp]
   163e4:	bl	1188c <fwrite@plt>
   163e8:	mov	r0, r8
   163ec:	mov	r1, r4
   163f0:	bl	1618c <__assert_fail@plt+0x45ac>
   163f4:	rev	r3, r0
   163f8:	mov	r0, r4
   163fc:	str	r3, [sp]
   16400:	bl	11814 <ftell@plt>
   16404:	subs	r8, r0, #0
   16408:	blt	1647c <__assert_fail@plt+0x489c>
   1640c:	mov	r1, r9
   16410:	mov	r2, r7
   16414:	mov	r0, r4
   16418:	bl	11b68 <fseek@plt>
   1641c:	mov	r3, r4
   16420:	mov	r1, #4
   16424:	mov	r2, #1
   16428:	mov	r0, sp
   1642c:	bl	1188c <fwrite@plt>
   16430:	mov	r2, r7
   16434:	mov	r0, r4
   16438:	mov	r1, r8
   1643c:	bl	11b68 <fseek@plt>
   16440:	ldr	r2, [sp, #4]
   16444:	ldr	r3, [r6]
   16448:	cmp	r2, r3
   1644c:	bne	16478 <__assert_fail@plt+0x4898>
   16450:	add	sp, sp, #12
   16454:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16458:	movw	r0, #47044	; 0xb7c4
   1645c:	movw	r1, #47064	; 0xb7d8
   16460:	movw	r3, #46128	; 0xb430
   16464:	movt	r0, #2
   16468:	movt	r1, #2
   1646c:	mov	r2, #412	; 0x19c
   16470:	movt	r3, #2
   16474:	bl	11be0 <__assert_fail@plt>
   16478:	bl	11838 <__stack_chk_fail@plt>
   1647c:	movw	r0, #47080	; 0xb7e8
   16480:	movw	r1, #47064	; 0xb7d8
   16484:	movw	r3, #46128	; 0xb430
   16488:	movt	r0, #2
   1648c:	movt	r1, #2
   16490:	movw	r2, #421	; 0x1a5
   16494:	movt	r3, #2
   16498:	bl	11be0 <__assert_fail@plt>
   1649c:	movw	r3, #61960	; 0xf208
   164a0:	movt	r3, #3
   164a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164a8:	movw	r8, #61944	; 0xf1f8
   164ac:	movt	r8, #3
   164b0:	ldr	r3, [r3]
   164b4:	sub	sp, sp, #12288	; 0x3000
   164b8:	mov	r9, r1
   164bc:	sub	sp, sp, #16
   164c0:	ldr	r2, [r8]
   164c4:	cmp	r1, r3
   164c8:	add	r3, sp, #16384	; 0x4000
   164cc:	moveq	r0, #0
   164d0:	str	r2, [r3, #-4084]	; 0xfffff00c
   164d4:	beq	165d8 <__assert_fail@plt+0x49f8>
   164d8:	ldr	r3, [r0]
   164dc:	mov	r1, #4096	; 0x1000
   164e0:	movw	r2, #47100	; 0xb7fc
   164e4:	add	r0, sp, #12
   164e8:	add	r3, r3, #4
   164ec:	movt	r2, #2
   164f0:	str	r3, [sp, #4]
   164f4:	mov	r3, r1
   164f8:	str	r2, [sp]
   164fc:	mov	r2, #1
   16500:	bl	11bd4 <__snprintf_chk@plt>
   16504:	add	r0, sp, #12
   16508:	movw	r1, #52052	; 0xcb54
   1650c:	movt	r1, #2
   16510:	bl	11b44 <fopen64@plt>
   16514:	subs	r4, r0, #0
   16518:	beq	1661c <__assert_fail@plt+0x4a3c>
   1651c:	bl	15854 <__assert_fail@plt+0x3c74>
   16520:	subs	r7, r0, #0
   16524:	beq	165cc <__assert_fail@plt+0x49ec>
   16528:	add	r2, sp, #8192	; 0x2000
   1652c:	movw	r5, #57340	; 0xdffc
   16530:	add	r2, r2, #16
   16534:	movt	r5, #65535	; 0xffff
   16538:	sub	r6, r2, #4
   1653c:	add	r0, sp, #4096	; 0x1000
   16540:	mov	r1, #4096	; 0x1000
   16544:	add	r0, r0, #12
   16548:	mov	r2, r4
   1654c:	bl	117cc <fgets@plt>
   16550:	subs	sl, r0, #0
   16554:	beq	165f8 <__assert_fail@plt+0x4a18>
   16558:	bl	1197c <__ctype_b_loc@plt>
   1655c:	add	r2, sp, #12288	; 0x3000
   16560:	add	r2, r2, #16
   16564:	ldrb	r2, [r2, r5]
   16568:	uxtb	r3, r2
   1656c:	lsl	r3, r3, #1
   16570:	ldr	r2, [r0]
   16574:	ldrh	r3, [r2, r3]
   16578:	tst	r3, #1024	; 0x400
   1657c:	bne	1659c <__assert_fail@plt+0x49bc>
   16580:	add	r2, sp, #4096	; 0x1000
   16584:	movw	r1, #47144	; 0xb828
   16588:	mov	r0, #3
   1658c:	movt	r1, #2
   16590:	add	r2, r2, #12
   16594:	bl	19fe0 <__assert_fail@plt+0x8400>
   16598:	b	1653c <__assert_fail@plt+0x495c>
   1659c:	add	r0, sp, #4096	; 0x1000
   165a0:	mov	r1, r6
   165a4:	mov	r2, #0
   165a8:	add	r0, r0, #12
   165ac:	bl	1b3bc <__assert_fail@plt+0x97dc>
   165b0:	mov	r0, r7
   165b4:	mov	r1, r6
   165b8:	movw	r2, #50108	; 0xc3bc
   165bc:	mov	r3, #0
   165c0:	movt	r2, #2
   165c4:	bl	1593c <__assert_fail@plt+0x3d5c>
   165c8:	b	1653c <__assert_fail@plt+0x495c>
   165cc:	mov	r0, r4
   165d0:	bl	11a84 <fclose@plt>
   165d4:	mvn	r0, #11
   165d8:	add	r3, sp, #16384	; 0x4000
   165dc:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   165e0:	ldr	r3, [r8]
   165e4:	cmp	r2, r3
   165e8:	bne	16638 <__assert_fail@plt+0x4a58>
   165ec:	add	sp, sp, #12288	; 0x3000
   165f0:	add	sp, sp, #16
   165f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165f8:	mov	r1, r9
   165fc:	mov	r0, r7
   16600:	bl	16358 <__assert_fail@plt+0x4778>
   16604:	mov	r0, r7
   16608:	bl	150f0 <__assert_fail@plt+0x3510>
   1660c:	mov	r0, r4
   16610:	bl	11a84 <fclose@plt>
   16614:	mov	r0, sl
   16618:	b	165d8 <__assert_fail@plt+0x49f8>
   1661c:	mov	r0, #4
   16620:	add	r2, sp, #12
   16624:	movw	r1, #47120	; 0xb810
   16628:	movt	r1, #2
   1662c:	bl	19fe0 <__assert_fail@plt+0x8400>
   16630:	mov	r0, r4
   16634:	b	165d8 <__assert_fail@plt+0x49f8>
   16638:	bl	11838 <__stack_chk_fail@plt>
   1663c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16640:	movw	r3, #61960	; 0xf208
   16644:	sub	sp, sp, #4096	; 0x1000
   16648:	movt	r3, #3
   1664c:	sub	sp, sp, #20
   16650:	movw	r2, #61944	; 0xf1f8
   16654:	movt	r2, #3
   16658:	ldr	r3, [r3]
   1665c:	str	r2, [sp]
   16660:	mov	r9, r0
   16664:	ldr	r2, [r2]
   16668:	cmp	r1, r3
   1666c:	add	r3, sp, #8192	; 0x2000
   16670:	str	r1, [sp, #4]
   16674:	moveq	r0, #0
   16678:	str	r2, [r3, #-4084]	; 0xfffff00c
   1667c:	beq	16788 <__assert_fail@plt+0x4ba8>
   16680:	bl	15854 <__assert_fail@plt+0x3c74>
   16684:	subs	sl, r0, #0
   16688:	beq	167c4 <__assert_fail@plt+0x4be4>
   1668c:	ldr	r3, [r9, #12]
   16690:	cmp	r3, #0
   16694:	addne	r7, sp, #12
   16698:	movne	r8, #0
   1669c:	beq	16770 <__assert_fail@plt+0x4b90>
   166a0:	ldr	r2, [r9, #8]
   166a4:	ldr	r5, [r2, r8, lsl #2]
   166a8:	ldr	r4, [r5, #16]
   166ac:	cmp	r4, #0
   166b0:	bne	166cc <__assert_fail@plt+0x4aec>
   166b4:	b	16764 <__assert_fail@plt+0x4b84>
   166b8:	mov	r1, r4
   166bc:	ldr	r0, [r5, #16]
   166c0:	bl	1d0f4 <__assert_fail@plt+0xb514>
   166c4:	subs	r4, r0, #0
   166c8:	beq	16760 <__assert_fail@plt+0x4b80>
   166cc:	mov	r0, r4
   166d0:	bl	231d0 <__assert_fail@plt+0x115f0>
   166d4:	mov	fp, r0
   166d8:	mov	r0, r4
   166dc:	bl	231e0 <__assert_fail@plt+0x11600>
   166e0:	movw	r1, #45504	; 0xb1c0
   166e4:	movt	r1, #2
   166e8:	mov	r6, r0
   166ec:	mov	r0, fp
   166f0:	bl	11754 <strcmp@plt>
   166f4:	subs	r2, r0, #0
   166f8:	bne	166b8 <__assert_fail@plt+0x4ad8>
   166fc:	mov	r0, r6
   16700:	mov	r1, r7
   16704:	bl	1b1fc <__assert_fail@plt+0x961c>
   16708:	cmp	r0, #0
   1670c:	blt	167ac <__assert_fail@plt+0x4bcc>
   16710:	add	r6, r5, #61	; 0x3d
   16714:	mov	r0, sl
   16718:	mov	r1, r7
   1671c:	ldrh	r3, [r5, #56]	; 0x38
   16720:	mov	r2, r6
   16724:	bl	1593c <__assert_fail@plt+0x3d5c>
   16728:	cmp	r0, #0
   1672c:	beq	166b8 <__assert_fail@plt+0x4ad8>
   16730:	ldr	r2, [r9]
   16734:	movw	r3, #4107	; 0x100b
   16738:	ldrb	r3, [r2, r3]
   1673c:	cmp	r3, #0
   16740:	beq	166b8 <__assert_fail@plt+0x4ad8>
   16744:	mov	r3, r6
   16748:	movw	r1, #47208	; 0xb868
   1674c:	mov	r0, #4
   16750:	movt	r1, #2
   16754:	mov	r2, r7
   16758:	bl	19fe0 <__assert_fail@plt+0x8400>
   1675c:	b	166b8 <__assert_fail@plt+0x4ad8>
   16760:	ldr	r3, [r9, #12]
   16764:	add	r8, r8, #1
   16768:	cmp	r3, r8
   1676c:	bhi	166a0 <__assert_fail@plt+0x4ac0>
   16770:	ldr	r1, [sp, #4]
   16774:	mov	r0, sl
   16778:	bl	16358 <__assert_fail@plt+0x4778>
   1677c:	mov	r0, sl
   16780:	bl	150f0 <__assert_fail@plt+0x3510>
   16784:	mov	r0, #0
   16788:	ldr	r1, [sp]
   1678c:	add	r3, sp, #8192	; 0x2000
   16790:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   16794:	ldr	r3, [r1]
   16798:	cmp	r2, r3
   1679c:	bne	167cc <__assert_fail@plt+0x4bec>
   167a0:	add	sp, sp, #4096	; 0x1000
   167a4:	add	sp, sp, #20
   167a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167ac:	mov	r2, r6
   167b0:	movw	r1, #47180	; 0xb84c
   167b4:	mov	r0, #4
   167b8:	movt	r1, #2
   167bc:	bl	19fe0 <__assert_fail@plt+0x8400>
   167c0:	b	166b8 <__assert_fail@plt+0x4ad8>
   167c4:	mvn	r0, #11
   167c8:	b	16788 <__assert_fail@plt+0x4ba8>
   167cc:	bl	11838 <__stack_chk_fail@plt>
   167d0:	push	{r4, r5, r6, r7, r8, r9, lr}
   167d4:	movw	r4, #61944	; 0xf1f8
   167d8:	movt	r4, #3
   167dc:	sub	sp, sp, #12
   167e0:	mov	r7, r1
   167e4:	mov	r8, #0
   167e8:	ldr	r3, [r4]
   167ec:	mov	r9, r0
   167f0:	str	r8, [sp]
   167f4:	str	r3, [sp, #4]
   167f8:	bl	14fe4 <__assert_fail@plt+0x3404>
   167fc:	cmp	r0, r8
   16800:	mov	r5, r0
   16804:	str	r0, [r7]
   16808:	beq	16874 <__assert_fail@plt+0x4c94>
   1680c:	lsl	r0, r0, #2
   16810:	bl	11910 <malloc@plt>
   16814:	subs	r6, r0, #0
   16818:	beq	16874 <__assert_fail@plt+0x4c94>
   1681c:	mov	r0, r9
   16820:	mov	r2, r5
   16824:	mov	r1, r6
   16828:	mov	r3, sp
   1682c:	bl	15030 <__assert_fail@plt+0x3450>
   16830:	cmp	r0, #0
   16834:	blt	1687c <__assert_fail@plt+0x4c9c>
   16838:	mov	r0, r6
   1683c:	movw	r3, #20428	; 0x4fcc
   16840:	ldr	r1, [sp]
   16844:	movt	r3, #1
   16848:	mov	r2, #4
   1684c:	bl	11b50 <qsort@plt>
   16850:	ldr	r3, [sp]
   16854:	mov	r0, r6
   16858:	str	r3, [r7]
   1685c:	ldr	r2, [sp, #4]
   16860:	ldr	r3, [r4]
   16864:	cmp	r2, r3
   16868:	bne	1688c <__assert_fail@plt+0x4cac>
   1686c:	add	sp, sp, #12
   16870:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16874:	mov	r0, #0
   16878:	b	1685c <__assert_fail@plt+0x4c7c>
   1687c:	mov	r0, r6
   16880:	bl	117c0 <free@plt>
   16884:	mov	r0, r8
   16888:	b	1685c <__assert_fail@plt+0x4c7c>
   1688c:	bl	11838 <__stack_chk_fail@plt>
   16890:	movw	r3, #61960	; 0xf208
   16894:	movt	r3, #3
   16898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1689c:	movw	r2, #61944	; 0xf1f8
   168a0:	sub	sp, sp, #44	; 0x2c
   168a4:	movt	r2, #3
   168a8:	ldr	r3, [r3]
   168ac:	str	r2, [sp, #24]
   168b0:	ldr	r2, [r2]
   168b4:	cmp	r1, r3
   168b8:	str	r0, [sp, #16]
   168bc:	str	r1, [sp, #28]
   168c0:	moveq	r0, #0
   168c4:	str	r2, [sp, #36]	; 0x24
   168c8:	beq	16a8c <__assert_fail@plt+0x4eac>
   168cc:	bl	15854 <__assert_fail@plt+0x3c74>
   168d0:	cmp	r0, #0
   168d4:	str	r0, [sp, #20]
   168d8:	beq	16b1c <__assert_fail@plt+0x4f3c>
   168dc:	ldr	r1, [sp, #16]
   168e0:	ldr	r3, [r1, #12]
   168e4:	cmp	r3, #0
   168e8:	movne	r2, #0
   168ec:	strne	r2, [sp, #12]
   168f0:	beq	16a74 <__assert_fail@plt+0x4e94>
   168f4:	ldr	r1, [sp, #16]
   168f8:	ldr	r2, [sp, #12]
   168fc:	ldr	r3, [r1, #8]
   16900:	add	r1, sp, #32
   16904:	ldr	r3, [r3, r2, lsl #2]
   16908:	ldr	r4, [r3, #8]
   1690c:	str	r3, [sp, #4]
   16910:	cmp	r4, #0
   16914:	ldr	r0, [sp, #4]
   16918:	ldreq	r4, [r3, #4]
   1691c:	bl	167d0 <__assert_fail@plt+0x4bf0>
   16920:	cmp	r0, #0
   16924:	str	r0, [sp, #8]
   16928:	beq	16aa8 <__assert_fail@plt+0x4ec8>
   1692c:	mov	r0, r4
   16930:	bl	119a0 <strlen@plt>
   16934:	ldr	r7, [sp, #32]
   16938:	cmp	r7, #0
   1693c:	add	r8, r0, #1
   16940:	beq	16974 <__assert_fail@plt+0x4d94>
   16944:	ldr	r3, [sp, #8]
   16948:	add	r5, r3, r7, lsl #2
   1694c:	mov	r6, r3
   16950:	ldr	r3, [r6], #4
   16954:	ldr	r0, [r3, #8]
   16958:	cmp	r0, #0
   1695c:	ldreq	r0, [r3, #4]
   16960:	bl	119a0 <strlen@plt>
   16964:	cmp	r6, r5
   16968:	add	r0, r0, #1
   1696c:	add	r8, r8, r0
   16970:	bne	16950 <__assert_fail@plt+0x4d70>
   16974:	add	r0, r8, #1
   16978:	bl	11910 <malloc@plt>
   1697c:	subs	r6, r0, #0
   16980:	beq	16ad0 <__assert_fail@plt+0x4ef0>
   16984:	mov	r0, r4
   16988:	bl	119a0 <strlen@plt>
   1698c:	mov	r1, r4
   16990:	mov	r5, r0
   16994:	mov	r0, r6
   16998:	mov	r2, r5
   1699c:	bl	117e4 <memcpy@plt>
   169a0:	cmp	r7, #0
   169a4:	mov	r1, #58	; 0x3a
   169a8:	add	r3, r5, #1
   169ac:	strb	r1, [r6, r5]
   169b0:	beq	16a08 <__assert_fail@plt+0x4e28>
   169b4:	ldr	r2, [sp, #8]
   169b8:	mov	r4, #0
   169bc:	mov	r8, #32
   169c0:	sub	sl, r2, #4
   169c4:	ldr	r2, [sl, #4]!
   169c8:	add	r9, r3, #1
   169cc:	strb	r8, [r6, r3]
   169d0:	add	r4, r4, #1
   169d4:	ldr	r5, [r2, #8]
   169d8:	cmp	r5, #0
   169dc:	ldreq	r5, [r2, #4]
   169e0:	mov	r0, r5
   169e4:	bl	119a0 <strlen@plt>
   169e8:	mov	r1, r5
   169ec:	mov	fp, r0
   169f0:	mov	r2, r0
   169f4:	add	r0, r6, r9
   169f8:	bl	117e4 <memcpy@plt>
   169fc:	cmp	r4, r7
   16a00:	add	r3, fp, r9
   16a04:	bne	169c4 <__assert_fail@plt+0x4de4>
   16a08:	mov	r1, #0
   16a0c:	strb	r1, [r6, r3]
   16a10:	ldr	r3, [sp, #4]
   16a14:	mov	r2, r6
   16a18:	ldr	r0, [sp, #20]
   16a1c:	add	r1, r3, #61	; 0x3d
   16a20:	ldrh	r3, [r3, #56]	; 0x38
   16a24:	bl	1593c <__assert_fail@plt+0x3d5c>
   16a28:	cmp	r0, #0
   16a2c:	beq	16a48 <__assert_fail@plt+0x4e68>
   16a30:	ldr	r1, [sp, #16]
   16a34:	movw	r2, #4107	; 0x100b
   16a38:	ldr	r3, [r1]
   16a3c:	ldrb	r3, [r3, r2]
   16a40:	cmp	r3, #0
   16a44:	bne	16aec <__assert_fail@plt+0x4f0c>
   16a48:	mov	r0, r6
   16a4c:	bl	117c0 <free@plt>
   16a50:	ldr	r0, [sp, #8]
   16a54:	bl	117c0 <free@plt>
   16a58:	ldr	r1, [sp, #16]
   16a5c:	ldr	r2, [sp, #12]
   16a60:	ldr	r3, [r1, #12]
   16a64:	add	r2, r2, #1
   16a68:	str	r2, [sp, #12]
   16a6c:	cmp	r3, r2
   16a70:	bhi	168f4 <__assert_fail@plt+0x4d14>
   16a74:	ldr	r1, [sp, #28]
   16a78:	ldr	r0, [sp, #20]
   16a7c:	bl	16358 <__assert_fail@plt+0x4778>
   16a80:	ldr	r0, [sp, #20]
   16a84:	bl	150f0 <__assert_fail@plt+0x3510>
   16a88:	mov	r0, #0
   16a8c:	ldr	r1, [sp, #24]
   16a90:	ldr	r2, [sp, #36]	; 0x24
   16a94:	ldr	r3, [r1]
   16a98:	cmp	r2, r3
   16a9c:	bne	16b24 <__assert_fail@plt+0x4f44>
   16aa0:	add	sp, sp, #44	; 0x2c
   16aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa8:	ldr	r7, [sp, #32]
   16aac:	cmp	r7, #0
   16ab0:	bne	16b04 <__assert_fail@plt+0x4f24>
   16ab4:	mov	r0, r4
   16ab8:	bl	119a0 <strlen@plt>
   16abc:	add	r8, r0, #1
   16ac0:	add	r0, r8, #1
   16ac4:	bl	11910 <malloc@plt>
   16ac8:	subs	r6, r0, #0
   16acc:	bne	16984 <__assert_fail@plt+0x4da4>
   16ad0:	ldr	r0, [sp, #8]
   16ad4:	bl	117c0 <free@plt>
   16ad8:	movw	r1, #47288	; 0xb8b8
   16adc:	mov	r0, #3
   16ae0:	movt	r1, #2
   16ae4:	bl	19fe0 <__assert_fail@plt+0x8400>
   16ae8:	b	16a58 <__assert_fail@plt+0x4e78>
   16aec:	movw	r1, #47324	; 0xb8dc
   16af0:	mov	r0, #4
   16af4:	movt	r1, #2
   16af8:	mov	r2, r6
   16afc:	bl	19fe0 <__assert_fail@plt+0x8400>
   16b00:	b	16a48 <__assert_fail@plt+0x4e68>
   16b04:	mov	r2, r4
   16b08:	movw	r1, #47240	; 0xb888
   16b0c:	mov	r0, #3
   16b10:	movt	r1, #2
   16b14:	bl	19fe0 <__assert_fail@plt+0x8400>
   16b18:	b	16a58 <__assert_fail@plt+0x4e78>
   16b1c:	mvn	r0, #11
   16b20:	b	16a8c <__assert_fail@plt+0x4eac>
   16b24:	bl	11838 <__stack_chk_fail@plt>
   16b28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b2c:	movw	r9, #61944	; 0xf1f8
   16b30:	movt	r9, #3
   16b34:	ldr	r3, [r0, #12]
   16b38:	sub	sp, sp, #8
   16b3c:	mov	r7, r0
   16b40:	ldr	r2, [r9]
   16b44:	cmp	r3, #0
   16b48:	mov	r5, r1
   16b4c:	movne	r6, #0
   16b50:	str	r2, [sp, #4]
   16b54:	bne	16b78 <__assert_fail@plt+0x4f98>
   16b58:	b	16c18 <__assert_fail@plt+0x5038>
   16b5c:	mov	r0, #10
   16b60:	mov	r1, r5
   16b64:	bl	11880 <_IO_putc@plt>
   16b68:	ldr	r3, [r7, #12]
   16b6c:	add	r6, r6, #1
   16b70:	cmp	r3, r6
   16b74:	bls	16c18 <__assert_fail@plt+0x5038>
   16b78:	ldr	r3, [r7, #8]
   16b7c:	movw	r2, #47352	; 0xb8f8
   16b80:	mov	r0, r5
   16b84:	movt	r2, #2
   16b88:	mov	r1, #1
   16b8c:	ldr	r4, [r3, r6, lsl #2]
   16b90:	ldr	sl, [r4, #8]
   16b94:	cmp	sl, #0
   16b98:	ldreq	sl, [r4, #4]
   16b9c:	mov	r3, sl
   16ba0:	bl	11a78 <__fprintf_chk@plt>
   16ba4:	ldr	r3, [r4, #28]
   16ba8:	cmp	r3, #0
   16bac:	beq	16b5c <__assert_fail@plt+0x4f7c>
   16bb0:	mov	r0, r4
   16bb4:	mov	r1, sp
   16bb8:	bl	167d0 <__assert_fail@plt+0x4bf0>
   16bbc:	subs	r8, r0, #0
   16bc0:	beq	16c34 <__assert_fail@plt+0x5054>
   16bc4:	ldr	r3, [sp]
   16bc8:	cmp	r3, #0
   16bcc:	subne	sl, r8, #4
   16bd0:	movne	r4, #0
   16bd4:	beq	16c0c <__assert_fail@plt+0x502c>
   16bd8:	ldr	r2, [sl, #4]!
   16bdc:	mov	r1, #1
   16be0:	mov	r0, r5
   16be4:	add	r4, r4, r1
   16be8:	ldr	r3, [r2, #8]
   16bec:	cmp	r3, #0
   16bf0:	ldreq	r3, [r2, #4]
   16bf4:	movw	r2, #40116	; 0x9cb4
   16bf8:	movt	r2, #2
   16bfc:	bl	11a78 <__fprintf_chk@plt>
   16c00:	ldr	r3, [sp]
   16c04:	cmp	r3, r4
   16c08:	bhi	16bd8 <__assert_fail@plt+0x4ff8>
   16c0c:	mov	r0, r8
   16c10:	bl	117c0 <free@plt>
   16c14:	b	16b5c <__assert_fail@plt+0x4f7c>
   16c18:	ldr	r2, [sp, #4]
   16c1c:	mov	r0, #0
   16c20:	ldr	r3, [r9]
   16c24:	cmp	r2, r3
   16c28:	bne	16c4c <__assert_fail@plt+0x506c>
   16c2c:	add	sp, sp, #8
   16c30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c34:	mov	r2, sl
   16c38:	movw	r1, #47240	; 0xb888
   16c3c:	mov	r0, #3
   16c40:	movt	r1, #2
   16c44:	bl	19fe0 <__assert_fail@plt+0x8400>
   16c48:	b	16b5c <__assert_fail@plt+0x4f7c>
   16c4c:	bl	11838 <__stack_chk_fail@plt>
   16c50:	push	{r4, r5, r6, r7, r8, lr}
   16c54:	mov	r5, r1
   16c58:	mov	r7, r0
   16c5c:	movw	r1, #45732	; 0xb2a4
   16c60:	mov	r0, r5
   16c64:	movt	r1, #2
   16c68:	bl	11754 <strcmp@plt>
   16c6c:	cmp	r0, #0
   16c70:	beq	16cfc <__assert_fail@plt+0x511c>
   16c74:	movw	r1, #51520	; 0xc940
   16c78:	mov	r0, r5
   16c7c:	movt	r1, #2
   16c80:	bl	11754 <strcmp@plt>
   16c84:	cmp	r0, #0
   16c88:	moveq	r6, #2
   16c8c:	bne	16ce4 <__assert_fail@plt+0x5104>
   16c90:	mov	r0, #12
   16c94:	mov	r8, #0
   16c98:	bl	11910 <malloc@plt>
   16c9c:	subs	r4, r0, #0
   16ca0:	beq	16d20 <__assert_fail@plt+0x5140>
   16ca4:	cmp	r6, #0
   16ca8:	str	r6, [r4, #4]
   16cac:	beq	16d04 <__assert_fail@plt+0x5124>
   16cb0:	mov	r3, #0
   16cb4:	str	r3, [r4, #8]
   16cb8:	mov	r3, r6
   16cbc:	mov	r2, r5
   16cc0:	mov	r0, #7
   16cc4:	movw	r1, #47384	; 0xb918
   16cc8:	movt	r1, #2
   16ccc:	bl	19fe0 <__assert_fail@plt+0x8400>
   16cd0:	ldr	r3, [r7]
   16cd4:	mov	r0, #0
   16cd8:	str	r3, [r4]
   16cdc:	str	r4, [r7]
   16ce0:	pop	{r4, r5, r6, r7, r8, pc}
   16ce4:	mov	r0, r5
   16ce8:	mov	r6, #0
   16cec:	bl	119a0 <strlen@plt>
   16cf0:	add	r8, r0, #1
   16cf4:	add	r0, r0, #13
   16cf8:	b	16c98 <__assert_fail@plt+0x50b8>
   16cfc:	mov	r6, #1
   16d00:	b	16c90 <__assert_fail@plt+0x50b0>
   16d04:	sub	r3, r8, #1
   16d08:	mov	r2, r8
   16d0c:	str	r3, [r4, #8]
   16d10:	add	r0, r4, #12
   16d14:	mov	r1, r5
   16d18:	bl	117e4 <memcpy@plt>
   16d1c:	b	16cb8 <__assert_fail@plt+0x50d8>
   16d20:	mov	r0, #3
   16d24:	movw	r1, #47356	; 0xb8fc
   16d28:	movt	r1, #2
   16d2c:	bl	19fe0 <__assert_fail@plt+0x8400>
   16d30:	mvn	r0, #11
   16d34:	pop	{r4, r5, r6, r7, r8, pc}
   16d38:	push	{r4, r5, r6, r7, r8, r9, lr}
   16d3c:	cmp	r3, #0
   16d40:	sub	sp, sp, #12
   16d44:	mov	r8, r1
   16d48:	mov	r7, r2
   16d4c:	ldr	r5, [sp, #48]	; 0x30
   16d50:	bne	16d6c <__assert_fail@plt+0x518c>
   16d54:	ldr	r1, [r0]
   16d58:	movw	r3, #4104	; 0x1008
   16d5c:	ldrb	r2, [r2]
   16d60:	ldrb	r3, [r1, r3]
   16d64:	cmp	r2, r3
   16d68:	addeq	r7, r7, #1
   16d6c:	mov	r0, r7
   16d70:	bl	119a0 <strlen@plt>
   16d74:	mov	r2, r0
   16d78:	add	r0, r0, #17
   16d7c:	add	r9, r2, #1
   16d80:	bl	11910 <malloc@plt>
   16d84:	subs	r4, r0, #0
   16d88:	beq	16e10 <__assert_fail@plt+0x5230>
   16d8c:	ldrd	r2, [sp, #40]	; 0x28
   16d90:	add	r6, r4, #16
   16d94:	mov	r1, r7
   16d98:	str	r5, [r4]
   16d9c:	mov	r0, r6
   16da0:	strd	r2, [r4, #8]
   16da4:	mov	r2, r9
   16da8:	bl	117e4 <memcpy@plt>
   16dac:	ldr	r0, [r8]
   16db0:	mov	r1, r6
   16db4:	mov	r2, r4
   16db8:	bl	1a904 <__assert_fail@plt+0x8d24>
   16dbc:	subs	r7, r0, #0
   16dc0:	blt	16e00 <__assert_fail@plt+0x5220>
   16dc4:	cmp	r5, #0
   16dc8:	mov	r0, #7
   16dcc:	mov	r2, r4
   16dd0:	movw	r1, #47420	; 0xb93c
   16dd4:	ldrne	r3, [r5, #4]
   16dd8:	movweq	r3, #50108	; 0xc3bc
   16ddc:	str	r5, [sp]
   16de0:	movteq	r3, #2
   16de4:	movt	r1, #2
   16de8:	str	r3, [sp, #4]
   16dec:	mov	r3, r6
   16df0:	bl	19fe0 <__assert_fail@plt+0x8400>
   16df4:	mov	r0, #0
   16df8:	add	sp, sp, #12
   16dfc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16e00:	mov	r0, r4
   16e04:	bl	117c0 <free@plt>
   16e08:	mov	r0, r7
   16e0c:	b	16df8 <__assert_fail@plt+0x5218>
   16e10:	mvn	r0, #11
   16e14:	b	16df8 <__assert_fail@plt+0x5218>
   16e18:	push	{r4, r5, r6, r7, r8, lr}
   16e1c:	add	r8, r0, #32
   16e20:	sub	sp, sp, #16
   16e24:	mov	r7, r0
   16e28:	mov	r4, #0
   16e2c:	mov	r5, #0
   16e30:	mov	r6, #0
   16e34:	mov	r1, r8
   16e38:	strd	r4, [sp]
   16e3c:	mov	r3, #1
   16e40:	str	r6, [sp, #8]
   16e44:	movw	r2, #47448	; 0xb958
   16e48:	movt	r2, #2
   16e4c:	bl	16d38 <__assert_fail@plt+0x5158>
   16e50:	mov	r1, r8
   16e54:	strd	r4, [sp]
   16e58:	mov	r0, r7
   16e5c:	str	r6, [sp, #8]
   16e60:	mov	r3, #1
   16e64:	movw	r2, #47464	; 0xb968
   16e68:	movt	r2, #2
   16e6c:	bl	16d38 <__assert_fail@plt+0x5158>
   16e70:	mov	r1, r8
   16e74:	strd	r4, [sp]
   16e78:	mov	r0, r7
   16e7c:	str	r6, [sp, #8]
   16e80:	mov	r3, #1
   16e84:	movw	r2, #47488	; 0xb980
   16e88:	movt	r2, #2
   16e8c:	bl	16d38 <__assert_fail@plt+0x5158>
   16e90:	add	sp, sp, #16
   16e94:	pop	{r4, r5, r6, r7, r8, pc}
   16e98:	push	{r4, r5, lr}
   16e9c:	movw	r4, #61944	; 0xf1f8
   16ea0:	movt	r4, #3
   16ea4:	ldrb	r3, [r1]
   16ea8:	sub	sp, sp, #52	; 0x34
   16eac:	mov	r5, r0
   16eb0:	ldr	r2, [r4]
   16eb4:	cmp	r3, #42	; 0x2a
   16eb8:	str	r2, [sp, #44]	; 0x2c
   16ebc:	beq	16ef0 <__assert_fail@plt+0x5310>
   16ec0:	mov	r2, #9
   16ec4:	add	r0, sp, #12
   16ec8:	bl	11b20 <regcomp@plt>
   16ecc:	cmp	r0, #0
   16ed0:	movne	r0, #0
   16ed4:	beq	16f04 <__assert_fail@plt+0x5324>
   16ed8:	ldr	r2, [sp, #44]	; 0x2c
   16edc:	ldr	r3, [r4]
   16ee0:	cmp	r2, r3
   16ee4:	bne	16f34 <__assert_fail@plt+0x5354>
   16ee8:	add	sp, sp, #52	; 0x34
   16eec:	pop	{r4, r5, pc}
   16ef0:	ldrb	r3, [r1, #1]
   16ef4:	cmp	r3, #0
   16ef8:	moveq	r0, #1
   16efc:	beq	16ed8 <__assert_fail@plt+0x52f8>
   16f00:	b	16ec0 <__assert_fail@plt+0x52e0>
   16f04:	ldr	r1, [r5]
   16f08:	mov	r2, r0
   16f0c:	mov	r3, r0
   16f10:	str	r0, [sp]
   16f14:	add	r0, sp, #12
   16f18:	bl	11850 <regexec@plt>
   16f1c:	mov	r5, r0
   16f20:	add	r0, sp, #12
   16f24:	bl	118a4 <regfree@plt>
   16f28:	rsbs	r0, r5, #1
   16f2c:	movcc	r0, #0
   16f30:	b	16ed8 <__assert_fail@plt+0x52f8>
   16f34:	bl	11838 <__stack_chk_fail@plt>
   16f38:	movw	r3, #61960	; 0xf208
   16f3c:	movt	r3, #3
   16f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f44:	movw	r8, #61944	; 0xf1f8
   16f48:	movt	r8, #3
   16f4c:	ldr	r3, [r3]
   16f50:	sub	sp, sp, #1040	; 0x410
   16f54:	mov	r9, r0
   16f58:	ldr	r2, [r8]
   16f5c:	sub	sp, sp, #12
   16f60:	cmp	r1, r3
   16f64:	mov	fp, r1
   16f68:	str	r2, [sp, #1044]	; 0x414
   16f6c:	moveq	r0, #0
   16f70:	beq	17058 <__assert_fail@plt+0x5478>
   16f74:	bl	15854 <__assert_fail@plt+0x3c74>
   16f78:	subs	r6, r0, #0
   16f7c:	beq	17074 <__assert_fail@plt+0x5494>
   16f80:	movw	r3, #47496	; 0xb988
   16f84:	movt	r3, #2
   16f88:	add	r7, sp, #27
   16f8c:	movw	sl, #4107	; 0x100b
   16f90:	ldm	r3, {r0, r1}
   16f94:	add	r3, sp, #24
   16f98:	mov	r5, r3
   16f9c:	lsr	r3, r1, #16
   16fa0:	str	r0, [sp, #20]
   16fa4:	strh	r1, [r5], #-4
   16fa8:	add	r1, sp, #8
   16fac:	ldr	r0, [r9, #32]
   16fb0:	strb	r3, [sp, #26]
   16fb4:	bl	1b020 <__assert_fail@plt+0x9440>
   16fb8:	add	r0, sp, #8
   16fbc:	mov	r1, #0
   16fc0:	add	r2, sp, #4
   16fc4:	bl	1b038 <__assert_fail@plt+0x9458>
   16fc8:	subs	r4, r0, #0
   16fcc:	beq	17040 <__assert_fail@plt+0x5460>
   16fd0:	ldr	r4, [sp, #4]
   16fd4:	ldr	r3, [r4]
   16fd8:	cmp	r3, #0
   16fdc:	beq	16fb8 <__assert_fail@plt+0x53d8>
   16fe0:	add	r1, r4, #16
   16fe4:	movw	r2, #1017	; 0x3f9
   16fe8:	mov	r0, r7
   16fec:	bl	118b0 <__strcpy_chk@plt>
   16ff0:	ldr	r3, [r4]
   16ff4:	mov	r0, r6
   16ff8:	mov	r1, r5
   16ffc:	add	r2, r3, #61	; 0x3d
   17000:	ldrh	r3, [r3, #56]	; 0x38
   17004:	bl	1593c <__assert_fail@plt+0x3d5c>
   17008:	cmp	r0, #0
   1700c:	beq	16fb8 <__assert_fail@plt+0x53d8>
   17010:	ldr	r3, [r9]
   17014:	ldrb	r3, [r3, sl]
   17018:	cmp	r3, #0
   1701c:	beq	16fb8 <__assert_fail@plt+0x53d8>
   17020:	ldr	r3, [r4]
   17024:	movw	r1, #47504	; 0xb990
   17028:	mov	r0, #4
   1702c:	movt	r1, #2
   17030:	add	r3, r3, #61	; 0x3d
   17034:	mov	r2, r5
   17038:	bl	19fe0 <__assert_fail@plt+0x8400>
   1703c:	b	16fb8 <__assert_fail@plt+0x53d8>
   17040:	mov	r1, fp
   17044:	mov	r0, r6
   17048:	bl	16358 <__assert_fail@plt+0x4778>
   1704c:	mov	r0, r6
   17050:	bl	150f0 <__assert_fail@plt+0x3510>
   17054:	mov	r0, r4
   17058:	ldr	r2, [sp, #1044]	; 0x414
   1705c:	ldr	r3, [r8]
   17060:	cmp	r2, r3
   17064:	bne	1707c <__assert_fail@plt+0x549c>
   17068:	add	sp, sp, #1040	; 0x410
   1706c:	add	sp, sp, #12
   17070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17074:	mvn	r0, #11
   17078:	b	17058 <__assert_fail@plt+0x5478>
   1707c:	bl	11838 <__stack_chk_fail@plt>
   17080:	push	{r0, r1, r2, r3}
   17084:	movw	r3, #61896	; 0xf1c8
   17088:	movt	r3, #3
   1708c:	push	{r4, r5, lr}
   17090:	movw	r4, #61944	; 0xf1f8
   17094:	movt	r4, #3
   17098:	ldr	r2, [r3]
   1709c:	sub	sp, sp, #12
   170a0:	ldr	r3, [r4]
   170a4:	cmp	r2, #4
   170a8:	str	r3, [sp, #4]
   170ac:	bgt	170d0 <__assert_fail@plt+0x54f0>
   170b0:	ldr	r2, [sp, #4]
   170b4:	ldr	r3, [r4]
   170b8:	cmp	r2, r3
   170bc:	bne	17104 <__assert_fail@plt+0x5524>
   170c0:	add	sp, sp, #12
   170c4:	pop	{r4, r5, lr}
   170c8:	add	sp, sp, #16
   170cc:	bx	lr
   170d0:	add	ip, sp, #28
   170d4:	movw	r5, #61960	; 0xf208
   170d8:	movt	r5, #3
   170dc:	mov	r1, #1
   170e0:	mov	r3, ip
   170e4:	movw	r2, #47536	; 0xb9b0
   170e8:	ldr	r0, [r5]
   170ec:	movt	r2, #2
   170f0:	str	ip, [sp]
   170f4:	bl	11940 <__vfprintf_chk@plt>
   170f8:	ldr	r0, [r5]
   170fc:	bl	1179c <fflush@plt>
   17100:	b	170b0 <__assert_fail@plt+0x54d0>
   17104:	bl	11838 <__stack_chk_fail@plt>
   17108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1710c:	movw	sl, #61944	; 0xf1f8
   17110:	movt	sl, #3
   17114:	sub	sp, sp, #4160	; 0x1040
   17118:	sub	sp, sp, #20
   1711c:	mov	r5, r1
   17120:	ldr	ip, [sl]
   17124:	mov	r1, r2
   17128:	add	r2, sp, #8192	; 0x2000
   1712c:	str	r0, [sp, #16]
   17130:	add	r0, r3, r5
   17134:	mov	r9, r3
   17138:	str	ip, [r2, #-4020]	; 0xfffff04c
   1713c:	bl	1b3f8 <__assert_fail@plt+0x9818>
   17140:	cmp	r0, #0
   17144:	bne	1716c <__assert_fail@plt+0x558c>
   17148:	mov	r0, #0
   1714c:	add	ip, sp, #8192	; 0x2000
   17150:	ldr	r2, [ip, #-4020]	; 0xfffff04c
   17154:	ldr	r3, [sl]
   17158:	cmp	r2, r3
   1715c:	bne	17704 <__assert_fail@plt+0x5b24>
   17160:	add	sp, sp, #4160	; 0x1040
   17164:	add	sp, sp, #20
   17168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1716c:	mov	r0, r9
   17170:	add	r2, sp, #72	; 0x48
   17174:	add	r1, sp, #76	; 0x4c
   17178:	bl	1b3bc <__assert_fail@plt+0x97dc>
   1717c:	cmp	r0, #0
   17180:	beq	176e8 <__assert_fail@plt+0x5b08>
   17184:	ldr	ip, [sp, #16]
   17188:	movw	r4, #4100	; 0x1004
   1718c:	mov	r0, #7
   17190:	add	r3, sp, #76	; 0x4c
   17194:	movw	r1, #47616	; 0xba00
   17198:	movt	r1, #2
   1719c:	ldr	r2, [ip]
   171a0:	ldr	r2, [r2, r4]
   171a4:	add	r2, r2, #1
   171a8:	add	r2, r9, r2
   171ac:	str	r2, [sp, #52]	; 0x34
   171b0:	bl	19fe0 <__assert_fail@plt+0x8400>
   171b4:	ldr	ip, [sp, #16]
   171b8:	add	r1, sp, #76	; 0x4c
   171bc:	ldr	r0, [ip, #28]
   171c0:	bl	1aca0 <__assert_fail@plt+0x90c0>
   171c4:	cmp	r0, #0
   171c8:	str	r0, [sp, #12]
   171cc:	beq	17398 <__assert_fail@plt+0x57b8>
   171d0:	ldr	ip, [r0, #4]
   171d4:	movw	r3, #61432	; 0xeff8
   171d8:	movt	r3, #65535	; 0xffff
   171dc:	movw	r1, #47632	; 0xba10
   171e0:	movt	r1, #2
   171e4:	str	ip, [sp, #20]
   171e8:	ldr	ip, [sp, #16]
   171ec:	ldr	r2, [sp, #20]
   171f0:	ldr	ip, [ip]
   171f4:	str	ip, [sp, #28]
   171f8:	ldr	ip, [r0, #44]	; 0x2c
   171fc:	add	r0, sp, #4160	; 0x1040
   17200:	add	r0, r0, #16
   17204:	ldr	r3, [r0, r3]
   17208:	ldr	r0, [sp, #12]
   1720c:	add	r3, r5, r3
   17210:	str	r3, [sp, #44]	; 0x2c
   17214:	mov	r3, r9
   17218:	ldr	fp, [r0, #40]	; 0x28
   1721c:	mov	r0, #7
   17220:	add	fp, ip, fp
   17224:	str	fp, [sp, #56]	; 0x38
   17228:	bl	19fe0 <__assert_fail@plt+0x8400>
   1722c:	ldr	ip, [sp, #28]
   17230:	mov	r0, r9
   17234:	ldr	r8, [ip, r4]
   17238:	add	r4, ip, #4
   1723c:	mov	r1, r4
   17240:	mov	r2, r8
   17244:	bl	11ba4 <strncmp@plt>
   17248:	mov	r2, r8
   1724c:	mov	r1, r4
   17250:	cmp	r0, #0
   17254:	ldr	r0, [sp, #20]
   17258:	addeq	r3, r8, #1
   1725c:	ldreq	ip, [sp, #44]	; 0x2c
   17260:	movne	r3, #0
   17264:	addeq	r3, r9, r3
   17268:	strne	r3, [sp, #36]	; 0x24
   1726c:	rsbeq	r7, r8, ip
   17270:	streq	r3, [sp, #36]	; 0x24
   17274:	movne	r7, r3
   17278:	subeq	r7, r7, #1
   1727c:	bl	11ba4 <strncmp@plt>
   17280:	cmp	r0, #0
   17284:	addeq	r3, r8, #1
   17288:	ldreq	ip, [sp, #56]	; 0x38
   1728c:	movne	r3, #0
   17290:	movne	r8, r3
   17294:	strne	r3, [sp, #40]	; 0x28
   17298:	rsbeq	r8, r8, ip
   1729c:	ldreq	ip, [sp, #20]
   172a0:	subeq	r8, r8, #1
   172a4:	addeq	r3, ip, r3
   172a8:	ldr	ip, [sp, #28]
   172ac:	streq	r3, [sp, #40]	; 0x28
   172b0:	movw	r3, #4108	; 0x100c
   172b4:	ldr	r5, [ip, r3]
   172b8:	cmp	r5, #0
   172bc:	beq	17450 <__assert_fail@plt+0x5870>
   172c0:	ldr	r6, [sp, #36]	; 0x24
   172c4:	ldr	fp, [sp, #40]	; 0x28
   172c8:	str	r9, [sp, #8]
   172cc:	b	172e4 <__assert_fail@plt+0x5704>
   172d0:	cmp	r9, r8
   172d4:	beq	17410 <__assert_fail@plt+0x5830>
   172d8:	ldr	r5, [r5]
   172dc:	cmp	r5, #0
   172e0:	beq	1744c <__assert_fail@plt+0x586c>
   172e4:	add	r4, r5, #8
   172e8:	movw	r1, #47668	; 0xba34
   172ec:	mov	r0, #7
   172f0:	movt	r1, #2
   172f4:	mov	r2, r4
   172f8:	bl	19fe0 <__assert_fail@plt+0x8400>
   172fc:	ldr	r9, [r5, #4]
   17300:	cmp	r9, r7
   17304:	bne	172d0 <__assert_fail@plt+0x56f0>
   17308:	mov	r0, r4
   1730c:	mov	r1, r6
   17310:	mov	r2, r7
   17314:	bl	11820 <memcmp@plt>
   17318:	cmp	r0, #0
   1731c:	bne	172d0 <__assert_fail@plt+0x56f0>
   17320:	ldr	r9, [sp, #8]
   17324:	ldr	ip, [sp, #12]
   17328:	mov	r0, #7
   1732c:	ldr	r3, [sp, #52]	; 0x34
   17330:	movw	r1, #47780	; 0xbaa4
   17334:	movt	r1, #2
   17338:	ldr	r2, [ip, #8]
   1733c:	bl	19fe0 <__assert_fail@plt+0x8400>
   17340:	ldr	ip, [sp, #12]
   17344:	movw	r1, #47828	; 0xbad4
   17348:	mov	r0, #7
   1734c:	movt	r1, #2
   17350:	ldr	r2, [sp, #12]
   17354:	ldm	ip, {r3, ip}
   17358:	str	ip, [sp]
   1735c:	bl	19fe0 <__assert_fail@plt+0x8400>
   17360:	ldr	ip, [sp, #12]
   17364:	ldr	r1, [ip, #12]
   17368:	cmp	r1, #0
   1736c:	beq	1737c <__assert_fail@plt+0x579c>
   17370:	ldr	ip, [sp, #16]
   17374:	ldr	r0, [ip, #24]
   17378:	bl	1ae08 <__assert_fail@plt+0x9228>
   1737c:	ldr	ip, [sp, #16]
   17380:	ldr	r0, [ip, #28]
   17384:	ldr	ip, [sp, #12]
   17388:	add	r1, ip, #61	; 0x3d
   1738c:	bl	1ae08 <__assert_fail@plt+0x9228>
   17390:	ldr	r0, [sp, #12]
   17394:	bl	15788 <__assert_fail@plt+0x3ba8>
   17398:	ldr	ip, [sp, #16]
   1739c:	add	r2, sp, #68	; 0x44
   173a0:	mov	r1, r9
   173a4:	ldr	r0, [ip, #4]
   173a8:	bl	20598 <__assert_fail@plt+0xe9b8>
   173ac:	subs	r4, r0, #0
   173b0:	blt	176a0 <__assert_fail@plt+0x5ac0>
   173b4:	add	r2, sp, #4160	; 0x1040
   173b8:	movw	r4, #61428	; 0xeff4
   173bc:	add	r2, r2, #16
   173c0:	movt	r4, #65535	; 0xffff
   173c4:	ldr	r0, [sp, #16]
   173c8:	ldr	r1, [r2, r4]
   173cc:	bl	15b2c <__assert_fail@plt+0x3f4c>
   173d0:	subs	r5, r0, #0
   173d4:	bge	17148 <__assert_fail@plt+0x5568>
   173d8:	rsb	r0, r5, #0
   173dc:	bl	11928 <strerror@plt>
   173e0:	mov	r2, r9
   173e4:	movw	r1, #47888	; 0xbb10
   173e8:	movt	r1, #2
   173ec:	mov	r3, r0
   173f0:	mov	r0, #3
   173f4:	bl	19fe0 <__assert_fail@plt+0x8400>
   173f8:	add	r3, sp, #4160	; 0x1040
   173fc:	add	r3, r3, #16
   17400:	ldr	r0, [r3, r4]
   17404:	bl	20b98 <__assert_fail@plt+0xefb8>
   17408:	mov	r0, r5
   1740c:	b	1714c <__assert_fail@plt+0x556c>
   17410:	mov	r0, r4
   17414:	mov	r1, fp
   17418:	mov	r2, r8
   1741c:	bl	11820 <memcmp@plt>
   17420:	cmp	r0, #0
   17424:	bne	172d8 <__assert_fail@plt+0x56f8>
   17428:	ldr	r9, [sp, #8]
   1742c:	ldr	ip, [sp, #12]
   17430:	mov	r2, r9
   17434:	movw	r1, #47684	; 0xba44
   17438:	mov	r0, #7
   1743c:	movt	r1, #2
   17440:	ldr	r3, [ip, #4]
   17444:	bl	19fe0 <__assert_fail@plt+0x8400>
   17448:	b	17148 <__assert_fail@plt+0x5568>
   1744c:	ldr	r9, [sp, #8]
   17450:	ldr	ip, [sp, #28]
   17454:	movw	r3, #4112	; 0x1010
   17458:	ldr	fp, [ip, r3]
   1745c:	cmp	fp, #0
   17460:	beq	176c8 <__assert_fail@plt+0x5ae8>
   17464:	mvn	r3, #0
   17468:	str	r7, [sp, #48]	; 0x30
   1746c:	str	sl, [sp, #60]	; 0x3c
   17470:	mov	r6, #0
   17474:	ldr	r7, [sp, #20]
   17478:	str	r3, [sp, #32]
   1747c:	str	r8, [sp, #20]
   17480:	str	r3, [sp, #8]
   17484:	str	r3, [sp, #24]
   17488:	ldr	r8, [sp, #44]	; 0x2c
   1748c:	ldr	sl, [sp, #56]	; 0x38
   17490:	b	17518 <__assert_fail@plt+0x5938>
   17494:	cmp	r2, #2
   17498:	addne	r2, fp, #12
   1749c:	movweq	r2, #47556	; 0xb9c4
   174a0:	movteq	r2, #2
   174a4:	movw	r1, #47724	; 0xba6c
   174a8:	mov	r0, #7
   174ac:	movt	r1, #2
   174b0:	bl	19fe0 <__assert_fail@plt+0x8400>
   174b4:	ldr	r2, [fp, #4]
   174b8:	cmp	r2, #1
   174bc:	streq	r6, [sp, #32]
   174c0:	beq	17508 <__assert_fail@plt+0x5928>
   174c4:	cmp	r2, #2
   174c8:	beq	17530 <__assert_fail@plt+0x5950>
   174cc:	ldr	r4, [fp, #8]
   174d0:	ldr	r3, [sp, #48]	; 0x30
   174d4:	cmp	r3, r4
   174d8:	bls	174ec <__assert_fail@plt+0x590c>
   174dc:	ldr	ip, [sp, #36]	; 0x24
   174e0:	ldrb	r2, [ip, r4]
   174e4:	cmp	r2, #47	; 0x2f
   174e8:	beq	1765c <__assert_fail@plt+0x5a7c>
   174ec:	ldr	r3, [sp, #20]
   174f0:	cmp	r3, r4
   174f4:	bls	17508 <__assert_fail@plt+0x5928>
   174f8:	ldr	ip, [sp, #40]	; 0x28
   174fc:	ldrb	r2, [ip, r4]
   17500:	cmp	r2, #47	; 0x2f
   17504:	beq	1767c <__assert_fail@plt+0x5a9c>
   17508:	ldr	fp, [fp]
   1750c:	add	r6, r6, #1
   17510:	cmp	fp, #0
   17514:	beq	17604 <__assert_fail@plt+0x5a24>
   17518:	ldr	r2, [fp, #4]
   1751c:	cmp	r2, #1
   17520:	bne	17494 <__assert_fail@plt+0x58b4>
   17524:	movw	r2, #47568	; 0xb9d0
   17528:	movt	r2, #2
   1752c:	b	174a4 <__assert_fail@plt+0x58c4>
   17530:	ldr	r0, [sp, #28]
   17534:	movw	ip, #4116	; 0x1014
   17538:	ldr	r4, [r0, ip]
   1753c:	cmp	r4, #0
   17540:	beq	17508 <__assert_fail@plt+0x5928>
   17544:	str	fp, [sp, #44]	; 0x2c
   17548:	mov	fp, r9
   1754c:	mov	r9, r7
   17550:	b	17578 <__assert_fail@plt+0x5998>
   17554:	cmp	sl, r5
   17558:	bls	17568 <__assert_fail@plt+0x5988>
   1755c:	ldrb	r2, [r9, r5]
   17560:	cmp	r2, #47	; 0x2f
   17564:	beq	175b8 <__assert_fail@plt+0x59d8>
   17568:	ldr	r4, [r4]
   1756c:	add	r6, r6, #1
   17570:	cmp	r4, #0
   17574:	beq	175e8 <__assert_fail@plt+0x5a08>
   17578:	ldr	r5, [r4, #4]
   1757c:	add	r7, r4, #8
   17580:	cmp	r8, r5
   17584:	bls	17554 <__assert_fail@plt+0x5974>
   17588:	ldrb	r2, [fp, r5]
   1758c:	cmp	r2, #47	; 0x2f
   17590:	bne	17554 <__assert_fail@plt+0x5974>
   17594:	mov	r0, fp
   17598:	mov	r1, r7
   1759c:	mov	r2, r5
   175a0:	bl	11820 <memcmp@plt>
   175a4:	ldr	ip, [sp, #24]
   175a8:	cmp	r0, #0
   175ac:	moveq	ip, r6
   175b0:	str	ip, [sp, #24]
   175b4:	b	17554 <__assert_fail@plt+0x5974>
   175b8:	mov	r1, r7
   175bc:	mov	r2, r5
   175c0:	mov	r0, r9
   175c4:	bl	11820 <memcmp@plt>
   175c8:	ldr	r4, [r4]
   175cc:	ldr	ip, [sp, #8]
   175d0:	cmp	r0, #0
   175d4:	moveq	ip, r6
   175d8:	cmp	r4, #0
   175dc:	str	ip, [sp, #8]
   175e0:	add	r6, r6, #1
   175e4:	bne	17578 <__assert_fail@plt+0x5998>
   175e8:	mov	r7, r9
   175ec:	mov	r9, fp
   175f0:	ldr	fp, [sp, #44]	; 0x2c
   175f4:	add	r6, r6, #1
   175f8:	ldr	fp, [fp]
   175fc:	cmp	fp, #0
   17600:	bne	17518 <__assert_fail@plt+0x5938>
   17604:	ldr	ip, [sp, #8]
   17608:	mov	r0, #7
   1760c:	ldr	r3, [sp, #32]
   17610:	movw	r1, #47736	; 0xba78
   17614:	cmn	ip, #1
   17618:	movt	r1, #2
   1761c:	ldr	sl, [sp, #60]	; 0x3c
   17620:	moveq	ip, r3
   17624:	str	ip, [sp, #8]
   17628:	ldr	ip, [sp, #24]
   1762c:	mov	r2, r3
   17630:	cmn	ip, #1
   17634:	moveq	ip, r3
   17638:	ldr	r3, [sp, #8]
   1763c:	str	ip, [sp]
   17640:	str	ip, [sp, #24]
   17644:	bl	19fe0 <__assert_fail@plt+0x8400>
   17648:	ldr	ip, [sp, #8]
   1764c:	ldr	r0, [sp, #24]
   17650:	cmp	ip, r0
   17654:	blt	17324 <__assert_fail@plt+0x5744>
   17658:	b	1742c <__assert_fail@plt+0x584c>
   1765c:	add	r0, fp, #12
   17660:	mov	r1, ip
   17664:	mov	r2, r4
   17668:	bl	11820 <memcmp@plt>
   1766c:	cmp	r0, #0
   17670:	streq	r6, [sp, #24]
   17674:	beq	17508 <__assert_fail@plt+0x5928>
   17678:	b	174ec <__assert_fail@plt+0x590c>
   1767c:	mov	r1, ip
   17680:	mov	r2, r4
   17684:	add	r0, fp, #12
   17688:	bl	11820 <memcmp@plt>
   1768c:	ldr	ip, [sp, #8]
   17690:	cmp	r0, #0
   17694:	moveq	ip, r6
   17698:	str	ip, [sp, #8]
   1769c:	b	17508 <__assert_fail@plt+0x5928>
   176a0:	rsb	r0, r4, #0
   176a4:	bl	11928 <strerror@plt>
   176a8:	mov	r2, r9
   176ac:	movw	r1, #47856	; 0xbaf0
   176b0:	movt	r1, #2
   176b4:	mov	r3, r0
   176b8:	mov	r0, #3
   176bc:	bl	19fe0 <__assert_fail@plt+0x8400>
   176c0:	mov	r0, r4
   176c4:	b	1714c <__assert_fail@plt+0x556c>
   176c8:	mvn	r3, #0
   176cc:	movw	r1, #47736	; 0xba78
   176d0:	mov	r2, r3
   176d4:	str	r3, [sp]
   176d8:	movt	r1, #2
   176dc:	mov	r0, #7
   176e0:	bl	19fe0 <__assert_fail@plt+0x8400>
   176e4:	b	1742c <__assert_fail@plt+0x584c>
   176e8:	mov	r0, #3
   176ec:	mov	r2, r9
   176f0:	movw	r1, #47580	; 0xb9dc
   176f4:	movt	r1, #2
   176f8:	bl	19fe0 <__assert_fail@plt+0x8400>
   176fc:	mvn	r0, #21
   17700:	b	1714c <__assert_fail@plt+0x556c>
   17704:	bl	11838 <__stack_chk_fail@plt>
   17708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1770c:	movw	r6, #61944	; 0xf1f8
   17710:	movt	r6, #3
   17714:	sub	sp, sp, #140	; 0x8c
   17718:	mov	r5, r1
   1771c:	mov	r9, r2
   17720:	ldr	r1, [r6]
   17724:	mov	fp, r3
   17728:	str	r0, [sp, #20]
   1772c:	mov	r0, r5
   17730:	mov	r8, #0
   17734:	str	r1, [sp, #132]	; 0x84
   17738:	bl	11b38 <dirfd@plt>
   1773c:	str	r0, [sp, #16]
   17740:	mov	r0, r5
   17744:	bl	11afc <readdir64@plt>
   17748:	subs	sl, r0, #0
   1774c:	beq	17844 <__assert_fail@plt+0x5c64>
   17750:	ldrb	r2, [sl, #19]
   17754:	add	r4, sl, #19
   17758:	cmp	r2, #46	; 0x2e
   1775c:	beq	17860 <__assert_fail@plt+0x5c80>
   17760:	movw	r1, #46248	; 0xb4a8
   17764:	mov	r0, r4
   17768:	movt	r1, #2
   1776c:	bl	11754 <strcmp@plt>
   17770:	cmp	r0, #0
   17774:	beq	17740 <__assert_fail@plt+0x5b60>
   17778:	movw	r1, #46256	; 0xb4b0
   1777c:	mov	r0, r4
   17780:	movt	r1, #2
   17784:	bl	11754 <strcmp@plt>
   17788:	cmp	r0, #0
   1778c:	beq	17740 <__assert_fail@plt+0x5b60>
   17790:	mov	r0, r4
   17794:	bl	119a0 <strlen@plt>
   17798:	add	ip, r0, r9
   1779c:	mov	r7, r0
   177a0:	add	r1, ip, #2
   177a4:	mov	r0, fp
   177a8:	str	ip, [sp, #8]
   177ac:	bl	1b11c <__assert_fail@plt+0x953c>
   177b0:	cmp	r0, #0
   177b4:	blt	1793c <__assert_fail@plt+0x5d5c>
   177b8:	ldr	ip, [fp]
   177bc:	mov	r1, r4
   177c0:	add	r2, r7, #1
   177c4:	add	r0, ip, r9
   177c8:	str	ip, [sp, #12]
   177cc:	bl	117e4 <memcpy@plt>
   177d0:	ldrb	r3, [sl, #18]
   177d4:	cmp	r3, #8
   177d8:	beq	17920 <__assert_fail@plt+0x5d40>
   177dc:	cmp	r3, #4
   177e0:	beq	17884 <__assert_fail@plt+0x5ca4>
   177e4:	mov	r3, #0
   177e8:	mov	r0, #3
   177ec:	str	r3, [sp]
   177f0:	mov	r2, r4
   177f4:	ldr	r1, [sp, #16]
   177f8:	add	r3, sp, #24
   177fc:	bl	1185c <__fxstatat64@plt>
   17800:	cmp	r0, #0
   17804:	blt	17970 <__assert_fail@plt+0x5d90>
   17808:	ldr	r3, [sp, #40]	; 0x28
   1780c:	and	r3, r3, #61440	; 0xf000
   17810:	cmp	r3, #32768	; 0x8000
   17814:	beq	17920 <__assert_fail@plt+0x5d40>
   17818:	cmp	r3, #16384	; 0x4000
   1781c:	beq	17884 <__assert_fail@plt+0x5ca4>
   17820:	ldr	r2, [sp, #12]
   17824:	mov	r0, #3
   17828:	movw	r1, #46424	; 0xb558
   1782c:	movt	r1, #2
   17830:	bl	19fe0 <__assert_fail@plt+0x8400>
   17834:	mov	r0, r5
   17838:	bl	11afc <readdir64@plt>
   1783c:	subs	sl, r0, #0
   17840:	bne	17750 <__assert_fail@plt+0x5b70>
   17844:	ldr	r2, [sp, #132]	; 0x84
   17848:	mov	r0, r8
   1784c:	ldr	r3, [r6]
   17850:	cmp	r2, r3
   17854:	bne	179ac <__assert_fail@plt+0x5dcc>
   17858:	add	sp, sp, #140	; 0x8c
   1785c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17860:	ldrb	r2, [sl, #20]
   17864:	cmp	r2, #0
   17868:	beq	17740 <__assert_fail@plt+0x5b60>
   1786c:	cmp	r2, #46	; 0x2e
   17870:	bne	17760 <__assert_fail@plt+0x5b80>
   17874:	ldrb	r2, [sl, #21]
   17878:	cmp	r2, #0
   1787c:	beq	17740 <__assert_fail@plt+0x5b60>
   17880:	b	17760 <__assert_fail@plt+0x5b80>
   17884:	ldr	r0, [sp, #16]
   17888:	mov	r1, r4
   1788c:	mov	r2, #0
   17890:	bl	119c4 <openat64@plt>
   17894:	subs	r7, r0, #0
   17898:	blt	17954 <__assert_fail@plt+0x5d74>
   1789c:	bl	11b08 <fdopendir@plt>
   178a0:	subs	r4, r0, #0
   178a4:	beq	1798c <__assert_fail@plt+0x5dac>
   178a8:	ldr	ip, [sp, #8]
   178ac:	mov	r2, #47	; 0x2f
   178b0:	ldr	r0, [sp, #12]
   178b4:	mov	r1, #0
   178b8:	add	r3, ip, #1
   178bc:	strb	r2, [r0, ip]
   178c0:	mov	r2, r3
   178c4:	strb	r1, [r0, r3]
   178c8:	mov	r1, r4
   178cc:	ldr	r0, [sp, #20]
   178d0:	mov	r3, fp
   178d4:	bl	17708 <__assert_fail@plt+0x5b28>
   178d8:	mov	r8, r0
   178dc:	mov	r0, r4
   178e0:	bl	11bc8 <closedir@plt>
   178e4:	cmp	r8, #0
   178e8:	bge	17740 <__assert_fail@plt+0x5b60>
   178ec:	ldr	r2, [sp, #12]
   178f0:	rsb	r0, r8, #0
   178f4:	ldr	ip, [sp, #8]
   178f8:	mov	r8, #0
   178fc:	strb	r8, [r2, ip]
   17900:	bl	11928 <strerror@plt>
   17904:	ldr	r2, [sp, #12]
   17908:	movw	r1, #46456	; 0xb578
   1790c:	movt	r1, #2
   17910:	mov	r3, r0
   17914:	mov	r0, #3
   17918:	bl	19fe0 <__assert_fail@plt+0x8400>
   1791c:	b	17740 <__assert_fail@plt+0x5b60>
   17920:	mov	r2, r7
   17924:	ldr	r0, [sp, #20]
   17928:	mov	r1, r9
   1792c:	ldr	r3, [sp, #12]
   17930:	bl	17108 <__assert_fail@plt+0x5528>
   17934:	mov	r8, r0
   17938:	b	178e4 <__assert_fail@plt+0x5d04>
   1793c:	movw	r1, #47920	; 0xbb30
   17940:	mov	r0, #3
   17944:	movt	r1, #2
   17948:	mvn	r8, #11
   1794c:	bl	19fe0 <__assert_fail@plt+0x8400>
   17950:	b	17740 <__assert_fail@plt+0x5b60>
   17954:	mov	r3, r4
   17958:	movw	r1, #46344	; 0xb508
   1795c:	mov	r0, #3
   17960:	movt	r1, #2
   17964:	ldr	r2, [sp, #16]
   17968:	bl	19fe0 <__assert_fail@plt+0x8400>
   1796c:	b	17740 <__assert_fail@plt+0x5b60>
   17970:	mov	r3, r4
   17974:	movw	r1, #46288	; 0xb4d0
   17978:	mov	r0, #3
   1797c:	movt	r1, #2
   17980:	ldr	r2, [sp, #16]
   17984:	bl	19fe0 <__assert_fail@plt+0x8400>
   17988:	b	17740 <__assert_fail@plt+0x5b60>
   1798c:	mov	r0, #3
   17990:	mov	r2, r7
   17994:	movw	r1, #46376	; 0xb528
   17998:	movt	r1, #2
   1799c:	bl	19fe0 <__assert_fail@plt+0x8400>
   179a0:	mov	r0, r7
   179a4:	bl	11bbc <close@plt>
   179a8:	b	17740 <__assert_fail@plt+0x5b60>
   179ac:	bl	11838 <__stack_chk_fail@plt>
   179b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   179b4:	movw	r4, #61944	; 0xf1f8
   179b8:	movt	r4, #3
   179bc:	mov	r6, r1
   179c0:	sub	sp, sp, #276	; 0x114
   179c4:	mov	r9, r0
   179c8:	ldr	r1, [r4]
   179cc:	mov	r0, r6
   179d0:	add	r3, sp, #12
   179d4:	mov	r2, #256	; 0x100
   179d8:	str	r3, [sp]
   179dc:	mov	r3, #0
   179e0:	str	r1, [sp, #268]	; 0x10c
   179e4:	str	r2, [sp, #4]
   179e8:	strb	r3, [sp, #8]
   179ec:	bl	118c8 <opendir@plt>
   179f0:	subs	r8, r0, #0
   179f4:	beq	17a90 <__assert_fail@plt+0x5eb0>
   179f8:	mov	r0, r6
   179fc:	bl	119a0 <strlen@plt>
   17a00:	mov	r7, r0
   17a04:	mov	r0, sp
   17a08:	add	r1, r7, #2
   17a0c:	bl	1b11c <__assert_fail@plt+0x953c>
   17a10:	cmp	r0, #0
   17a14:	blt	17a88 <__assert_fail@plt+0x5ea8>
   17a18:	ldr	r3, [sp]
   17a1c:	mov	r1, r6
   17a20:	mov	r2, r7
   17a24:	mov	r0, r3
   17a28:	bl	117e4 <memcpy@plt>
   17a2c:	add	r1, r7, #1
   17a30:	mov	r2, #47	; 0x2f
   17a34:	mov	ip, #0
   17a38:	mov	r3, r0
   17a3c:	mov	r0, r9
   17a40:	strb	r2, [r3, r7]
   17a44:	mov	r2, r1
   17a48:	strb	ip, [r3, r1]
   17a4c:	mov	r1, r8
   17a50:	mov	r3, sp
   17a54:	bl	17708 <__assert_fail@plt+0x5b28>
   17a58:	mov	r6, r0
   17a5c:	mov	r0, r8
   17a60:	bl	11bc8 <closedir@plt>
   17a64:	mov	r0, sp
   17a68:	bl	1b194 <__assert_fail@plt+0x95b4>
   17a6c:	ldr	r2, [sp, #268]	; 0x10c
   17a70:	ldr	r3, [r4]
   17a74:	mov	r0, r6
   17a78:	cmp	r2, r3
   17a7c:	bne	17ab4 <__assert_fail@plt+0x5ed4>
   17a80:	add	sp, sp, #276	; 0x114
   17a84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17a88:	mvn	r6, #11
   17a8c:	b	17a5c <__assert_fail@plt+0x5e7c>
   17a90:	bl	119f4 <__errno_location@plt>
   17a94:	mov	r2, r6
   17a98:	movw	r1, #47932	; 0xbb3c
   17a9c:	movt	r1, #2
   17aa0:	ldr	r6, [r0]
   17aa4:	mov	r0, #3
   17aa8:	rsb	r6, r6, #0
   17aac:	bl	19fe0 <__assert_fail@plt+0x8400>
   17ab0:	b	17a64 <__assert_fail@plt+0x5e84>
   17ab4:	bl	11838 <__stack_chk_fail@plt>
   17ab8:	mov	r4, r0
   17abc:	mov	r0, sp
   17ac0:	bl	1b194 <__assert_fail@plt+0x95b4>
   17ac4:	mov	r0, r4
   17ac8:	bl	11b8c <_Unwind_Resume@plt>
   17acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ad0:	movw	r4, #61944	; 0xf1f8
   17ad4:	sub	sp, sp, #37888	; 0x9400
   17ad8:	movt	r4, #3
   17adc:	sub	sp, sp, #156	; 0x9c
   17ae0:	mov	r3, #0
   17ae4:	ldr	lr, [r4]
   17ae8:	movw	ip, #27584	; 0x6bc0
   17aec:	str	r4, [sp, #36]	; 0x24
   17af0:	add	r4, sp, #40960	; 0xa000
   17af4:	movt	ip, #65535	; 0xffff
   17af8:	movw	r2, #4120	; 0x1018
   17afc:	str	lr, [r4, #-2924]	; 0xfffff494
   17b00:	add	lr, sp, #37888	; 0x9400
   17b04:	add	lr, lr, #152	; 0x98
   17b08:	mov	r6, r0
   17b0c:	mov	r8, r1
   17b10:	add	r0, sp, #872	; 0x368
   17b14:	mov	r1, r3
   17b18:	mov	r4, r3
   17b1c:	str	r3, [lr, ip]
   17b20:	movw	r5, #27872	; 0x6ce0
   17b24:	str	r3, [sp, #28]
   17b28:	bl	11a3c <memset@plt>
   17b2c:	ldr	r3, [sp, #28]
   17b30:	add	r2, sp, #152	; 0x98
   17b34:	movw	fp, #45824	; 0xb300
   17b38:	movw	sl, #61968	; 0xf210
   17b3c:	movt	r5, #65535	; 0xffff
   17b40:	movt	fp, #2
   17b44:	str	r3, [sp, #132]	; 0x84
   17b48:	movt	sl, #3
   17b4c:	str	r3, [sp, #136]	; 0x88
   17b50:	add	r7, sp, #376	; 0x178
   17b54:	str	r3, [sp, #140]	; 0x8c
   17b58:	mov	r9, r4
   17b5c:	str	r3, [sp, #144]	; 0x90
   17b60:	str	r3, [sp, #148]	; 0x94
   17b64:	str	r3, [r2], #4
   17b68:	add	r2, r2, #4
   17b6c:	str	r3, [sp, #156]	; 0x9c
   17b70:	str	r4, [sp, #44]	; 0x2c
   17b74:	str	r3, [r2], #4
   17b78:	str	r4, [sp, #60]	; 0x3c
   17b7c:	str	r4, [sp, #68]	; 0x44
   17b80:	str	r4, [sp, #40]	; 0x28
   17b84:	str	r4, [sp, #64]	; 0x40
   17b88:	str	r4, [sp, #48]	; 0x30
   17b8c:	str	r4, [sp, #56]	; 0x38
   17b90:	str	r3, [r2]
   17b94:	add	ip, sp, #37888	; 0x9400
   17b98:	str	r7, [sp]
   17b9c:	add	ip, ip, #152	; 0x98
   17ba0:	movw	r2, #51532	; 0xc94c
   17ba4:	movw	r3, #45824	; 0xb300
   17ba8:	movt	r2, #2
   17bac:	movt	r3, #2
   17bb0:	mov	r0, r6
   17bb4:	mov	r1, r8
   17bb8:	str	r9, [ip, r5]
   17bbc:	bl	11970 <getopt_long@plt>
   17bc0:	cmn	r0, #1
   17bc4:	beq	17ef8 <__assert_fail@plt+0x6318>
   17bc8:	sub	r3, r0, #63	; 0x3f
   17bcc:	cmp	r3, #56	; 0x38
   17bd0:	ldrls	pc, [pc, r3, lsl #2]
   17bd4:	b	17ec8 <__assert_fail@plt+0x62e8>
   17bd8:	strdeq	r7, [r1], -r4
   17bdc:	andeq	r7, r1, r8, asr #29
   17be0:	andeq	r7, r1, r8, lsr sp
   17be4:	andeq	r7, r1, r8, asr #29
   17be8:	ldrdeq	r7, [r1], -ip
   17bec:	andeq	r7, r1, r8, asr #29
   17bf0:	andeq	r7, r1, r0, asr #27
   17bf4:	andeq	r7, r1, r0, lsr lr
   17bf8:	andeq	r7, r1, r8, asr #29
   17bfc:	andeq	r7, r1, r8, asr #29
   17c00:	andeq	r7, r1, r8, asr #29
   17c04:	andeq	r7, r1, r8, asr #29
   17c08:	andeq	r7, r1, r8, asr #29
   17c0c:	andeq	r7, r1, r8, asr #29
   17c10:	andeq	r7, r1, r8, asr #29
   17c14:	andeq	r7, r1, r8, asr #29
   17c18:	andeq	r7, r1, r8, asr #29
   17c1c:	muleq	r1, ip, sp
   17c20:	andeq	r7, r1, r8, asr #29
   17c24:	andeq	r7, r1, r8, asr #29
   17c28:	andeq	r7, r1, r8, asr #29
   17c2c:	andeq	r7, r1, r8, asr #29
   17c30:	andeq	r7, r1, r8, asr #29
   17c34:	andeq	r7, r1, r0, asr sp
   17c38:	andeq	r7, r1, r8, asr #29
   17c3c:	andeq	r7, r1, r8, asr #29
   17c40:	andeq	r7, r1, r8, asr #29
   17c44:	andeq	r7, r1, r8, asr #29
   17c48:	andeq	r7, r1, r8, asr #29
   17c4c:	andeq	r7, r1, r8, asr #29
   17c50:	andeq	r7, r1, r8, asr #29
   17c54:	andeq	r7, r1, r8, asr #29
   17c58:	andeq	r7, r1, r8, asr #29
   17c5c:	andeq	r7, r1, r8, asr #29
   17c60:	andeq	r7, r1, r4, asr #26
   17c64:	andeq	r7, r1, r8, ror sp
   17c68:	andeq	r7, r1, r8, asr #29
   17c6c:	andeq	r7, r1, r8, asr #29
   17c70:	andeq	r7, r1, r4, ror #26
   17c74:	andeq	r7, r1, r8, asr #29
   17c78:	andeq	r7, r1, r8, asr #29
   17c7c:	andeq	r7, r1, r8, lsr #29
   17c80:	andeq	r7, r1, r8, asr #29
   17c84:	andeq	r7, r1, r8, asr #29
   17c88:	andeq	r7, r1, r8, asr #29
   17c8c:	andeq	r7, r1, r8, asr #29
   17c90:	andeq	r7, r1, ip, ror lr
   17c94:	andeq	r7, r1, r8, ror #28
   17c98:	andeq	r7, r1, r8, asr #29
   17c9c:	andeq	r7, r1, r8, asr #29
   17ca0:	andeq	r7, r1, ip, ror lr
   17ca4:	andeq	r7, r1, ip, ror lr
   17ca8:	andeq	r7, r1, r8, asr #29
   17cac:	andeq	r7, r1, r8, asr #29
   17cb0:	andeq	r7, r1, ip, ror lr
   17cb4:	andeq	r7, r1, r0, asr lr
   17cb8:	andeq	r7, r1, ip, lsr lr
   17cbc:	bl	119f4 <__errno_location@plt>
   17cc0:	ldr	r0, [r0]
   17cc4:	rsb	r0, r0, #0
   17cc8:	cmp	r0, #0
   17ccc:	bge	18148 <__assert_fail@plt+0x6568>
   17cd0:	rsb	r0, r0, #0
   17cd4:	bl	11928 <strerror@plt>
   17cd8:	movw	r1, #49292	; 0xc08c
   17cdc:	movt	r1, #2
   17ce0:	mov	r2, r0
   17ce4:	mov	r0, #2
   17ce8:	bl	19fe0 <__assert_fail@plt+0x8400>
   17cec:	mov	r0, r9
   17cf0:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   17cf4:	add	r0, sp, #872	; 0x368
   17cf8:	mov	r5, #1
   17cfc:	bl	15168 <__assert_fail@plt+0x3588>
   17d00:	mov	r0, r4
   17d04:	bl	117c0 <free@plt>
   17d08:	ldr	r0, [sp, #44]	; 0x2c
   17d0c:	bl	117c0 <free@plt>
   17d10:	ldr	r4, [sp, #36]	; 0x24
   17d14:	add	r3, sp, #40960	; 0xa000
   17d18:	mov	r0, r5
   17d1c:	ldr	r2, [r3, #-2924]	; 0xfffff494
   17d20:	ldr	r3, [r4]
   17d24:	cmp	r2, r3
   17d28:	bne	19b64 <__assert_fail@plt+0x7f84>
   17d2c:	add	sp, sp, #37888	; 0x9400
   17d30:	add	sp, sp, #156	; 0x9c
   17d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d38:	mov	r3, #1
   17d3c:	str	r3, [sp, #64]	; 0x40
   17d40:	b	17b94 <__assert_fail@plt+0x5fb4>
   17d44:	mov	r2, #1
   17d48:	str	r2, [sp, #48]	; 0x30
   17d4c:	b	17b94 <__assert_fail@plt+0x5fb4>
   17d50:	movw	r0, #39000	; 0x9858
   17d54:	movt	r0, #2
   17d58:	bl	11904 <puts@plt>
   17d5c:	mov	r5, #0
   17d60:	b	17d00 <__assert_fail@plt+0x6120>
   17d64:	add	r2, sp, #872	; 0x368
   17d68:	add	r3, r2, #4096	; 0x1000
   17d6c:	mov	r2, #1
   17d70:	strb	r2, [r3, #10]
   17d74:	b	17b94 <__assert_fail@plt+0x5fb4>
   17d78:	ldr	lr, [sp, #44]	; 0x2c
   17d7c:	cmp	lr, #0
   17d80:	beq	17d8c <__assert_fail@plt+0x61ac>
   17d84:	mov	r0, lr
   17d88:	bl	117c0 <free@plt>
   17d8c:	ldr	r0, [sl]
   17d90:	bl	1b778 <__assert_fail@plt+0x9b98>
   17d94:	str	r0, [sp, #44]	; 0x2c
   17d98:	b	17b94 <__assert_fail@plt+0x5fb4>
   17d9c:	ldr	r3, [sl]
   17da0:	ldrb	r2, [r3, #1]
   17da4:	cmp	r2, #0
   17da8:	bne	19580 <__assert_fail@plt+0x79a0>
   17dac:	ldrb	r2, [r3]
   17db0:	add	ip, sp, #872	; 0x368
   17db4:	add	r3, ip, #4096	; 0x1000
   17db8:	strb	r2, [r3, #8]
   17dbc:	b	17b94 <__assert_fail@plt+0x5fb4>
   17dc0:	add	lr, sp, #872	; 0x368
   17dc4:	ldr	r0, [sl]
   17dc8:	add	r3, lr, #4096	; 0x1000
   17dcc:	mov	r2, #1
   17dd0:	str	r0, [sp, #60]	; 0x3c
   17dd4:	strb	r2, [r3, #9]
   17dd8:	b	17b94 <__assert_fail@plt+0x5fb4>
   17ddc:	ldr	r0, [sp, #40]	; 0x28
   17de0:	add	r3, r0, #2
   17de4:	mov	r0, r4
   17de8:	lsl	r3, r3, #2
   17dec:	str	r3, [sp, #28]
   17df0:	mov	r1, r3
   17df4:	bl	11844 <realloc@plt>
   17df8:	ldr	r3, [sp, #28]
   17dfc:	cmp	r0, #0
   17e00:	beq	19594 <__assert_fail@plt+0x79b4>
   17e04:	ldr	r2, [sl]
   17e08:	sub	r1, r3, #8
   17e0c:	ldr	r4, [sp, #40]	; 0x28
   17e10:	mov	r3, r0
   17e14:	mov	ip, #0
   17e18:	add	r4, r4, #1
   17e1c:	str	r2, [r3, r1]!
   17e20:	str	r4, [sp, #40]	; 0x28
   17e24:	mov	r4, r0
   17e28:	str	ip, [r3, #4]
   17e2c:	b	17b94 <__assert_fail@plt+0x5fb4>
   17e30:	ldr	r1, [sl]
   17e34:	str	r1, [sp, #68]	; 0x44
   17e38:	b	17b94 <__assert_fail@plt+0x5fb4>
   17e3c:	add	lr, sp, #872	; 0x368
   17e40:	mov	r2, #1
   17e44:	add	r3, lr, #4096	; 0x1000
   17e48:	strb	r2, [r3, #11]
   17e4c:	b	17b94 <__assert_fail@plt+0x5fb4>
   17e50:	movw	r3, #61896	; 0xf1c8
   17e54:	movt	r3, #3
   17e58:	ldr	r2, [r3]
   17e5c:	add	r2, r2, #1
   17e60:	str	r2, [r3]
   17e64:	b	17b94 <__assert_fail@plt+0x5fb4>
   17e68:	movw	r3, #61960	; 0xf208
   17e6c:	movt	r3, #3
   17e70:	ldr	r3, [r3]
   17e74:	str	r3, [sp, #56]	; 0x38
   17e78:	b	17b94 <__assert_fail@plt+0x5fb4>
   17e7c:	add	r1, sp, #37888	; 0x9400
   17e80:	add	r1, r1, #152	; 0x98
   17e84:	ldr	r3, [r1, r5]
   17e88:	cmp	r3, #0
   17e8c:	ble	17ee0 <__assert_fail@plt+0x6300>
   17e90:	movw	r1, #48036	; 0xbba4
   17e94:	ldr	r2, [fp, r3, lsl #4]
   17e98:	mov	r0, #4
   17e9c:	movt	r1, #2
   17ea0:	bl	19fe0 <__assert_fail@plt+0x8400>
   17ea4:	b	17b94 <__assert_fail@plt+0x5fb4>
   17ea8:	movw	r3, #61936	; 0xf1f0
   17eac:	movt	r3, #3
   17eb0:	movw	r1, #48100	; 0xbbe4
   17eb4:	mov	r0, #1
   17eb8:	ldr	r2, [r3]
   17ebc:	movt	r1, #2
   17ec0:	bl	11a60 <__printf_chk@plt>
   17ec4:	b	17d5c <__assert_fail@plt+0x617c>
   17ec8:	mov	r2, r0
   17ecc:	movw	r1, #39916	; 0x9bec
   17ed0:	mov	r0, #3
   17ed4:	movt	r1, #2
   17ed8:	bl	19fe0 <__assert_fail@plt+0x8400>
   17edc:	b	17cf4 <__assert_fail@plt+0x6114>
   17ee0:	mov	r2, r0
   17ee4:	movw	r1, #48068	; 0xbbc4
   17ee8:	mov	r0, #4
   17eec:	movt	r1, #2
   17ef0:	bl	19fe0 <__assert_fail@plt+0x8400>
   17ef4:	b	17b94 <__assert_fail@plt+0x5fb4>
   17ef8:	movw	fp, #61952	; 0xf200
   17efc:	movt	fp, #3
   17f00:	ldr	r3, [fp]
   17f04:	cmp	r6, r3
   17f08:	bgt	18264 <__assert_fail@plt+0x6684>
   17f0c:	add	r0, sp, #480	; 0x1e0
   17f10:	bl	1182c <uname@plt>
   17f14:	cmp	r0, #0
   17f18:	blt	19298 <__assert_fail@plt+0x76b8>
   17f1c:	add	r2, sp, #664	; 0x298
   17f20:	add	ip, sp, #37888	; 0x9400
   17f24:	sub	r1, r2, #54	; 0x36
   17f28:	movw	r3, #28368	; 0x6ed0
   17f2c:	add	ip, ip, #152	; 0x98
   17f30:	movt	r3, #65535	; 0xffff
   17f34:	mov	r2, r1
   17f38:	str	r1, [ip, r3]
   17f3c:	str	r2, [sp, #8]
   17f40:	add	r5, sp, #876	; 0x36c
   17f44:	ldr	r2, [sp, #44]	; 0x2c
   17f48:	movw	r3, #50108	; 0xc3bc
   17f4c:	movt	r3, #2
   17f50:	mov	r1, #4096	; 0x1000
   17f54:	cmp	r2, #0
   17f58:	mov	r0, r5
   17f5c:	moveq	r2, r3
   17f60:	movw	r3, #41860	; 0xa384
   17f64:	str	r2, [sp, #4]
   17f68:	movt	r3, #2
   17f6c:	mov	r2, #1
   17f70:	str	r3, [sp]
   17f74:	mov	r3, r1
   17f78:	bl	11bd4 <__snprintf_chk@plt>
   17f7c:	ldr	r2, [fp]
   17f80:	ldr	r1, [sp, #48]	; 0x30
   17f84:	add	ip, sp, #872	; 0x368
   17f88:	cmp	r2, r6
   17f8c:	ldr	r2, [sp, #64]	; 0x40
   17f90:	movw	r3, #4100	; 0x1004
   17f94:	moveq	r1, #1
   17f98:	cmp	r2, #0
   17f9c:	str	r1, [sp, #48]	; 0x30
   17fa0:	str	r0, [ip, r3]
   17fa4:	beq	18090 <__assert_fail@plt+0x64b0>
   17fa8:	movw	r3, #61960	; 0xf208
   17fac:	movt	r3, #3
   17fb0:	ldr	lr, [sp, #56]	; 0x38
   17fb4:	ldr	r3, [r3]
   17fb8:	cmp	lr, r3
   17fbc:	beq	182dc <__assert_fail@plt+0x66fc>
   17fc0:	mov	r0, r5
   17fc4:	bl	118c8 <opendir@plt>
   17fc8:	subs	sl, r0, #0
   17fcc:	beq	197dc <__assert_fail@plt+0x7bfc>
   17fd0:	bl	11b38 <dirfd@plt>
   17fd4:	mov	r2, #0
   17fd8:	add	r3, sp, #168	; 0xa8
   17fdc:	str	r2, [sp]
   17fe0:	movw	r2, #49136	; 0xbff0
   17fe4:	movt	r2, #2
   17fe8:	mov	r1, r0
   17fec:	mov	r0, #3
   17ff0:	bl	1185c <__fxstatat64@plt>
   17ff4:	cmp	r0, #0
   17ff8:	str	r0, [sp, #40]	; 0x28
   17ffc:	bne	183fc <__assert_fail@plt+0x681c>
   18000:	add	r9, sp, #876	; 0x36c
   18004:	mov	r0, r9
   18008:	bl	119a0 <strlen@plt>
   1800c:	mov	r1, r9
   18010:	mov	r3, #4096	; 0x1000
   18014:	mov	r5, r0
   18018:	add	r0, sp, #5248	; 0x1480
   1801c:	add	r0, r0, #24
   18020:	mov	r2, r5
   18024:	sub	ip, r0, #4
   18028:	add	r9, r5, #1
   1802c:	mov	r0, ip
   18030:	bl	11874 <__memcpy_chk@plt>
   18034:	mov	lr, #47	; 0x2f
   18038:	ldr	r1, [sp, #248]	; 0xf8
   1803c:	mov	r2, r9
   18040:	mov	ip, r0
   18044:	mov	r3, r0
   18048:	strb	lr, [ip, r5]
   1804c:	mov	r0, sl
   18050:	ldr	lr, [sp, #40]	; 0x28
   18054:	strb	lr, [ip, r9]
   18058:	bl	1529c <__assert_fail@plt+0x36bc>
   1805c:	mov	r5, r0
   18060:	mov	r0, sl
   18064:	bl	11bc8 <closedir@plt>
   18068:	cmp	r5, #1
   1806c:	beq	182c8 <__assert_fail@plt+0x66e8>
   18070:	add	r3, sp, #920	; 0x398
   18074:	movw	r1, #49220	; 0xc044
   18078:	mov	r0, #7
   1807c:	movt	r1, #2
   18080:	sub	r2, r3, #44	; 0x2c
   18084:	bl	19fe0 <__assert_fail@plt+0x8400>
   18088:	mov	ip, #1
   1808c:	str	ip, [sp, #48]	; 0x30
   18090:	add	lr, sp, #920	; 0x398
   18094:	add	r2, sp, #152	; 0x98
   18098:	sub	r0, lr, #44	; 0x2c
   1809c:	sub	r1, r2, #64	; 0x40
   180a0:	bl	1bf20 <__assert_fail@plt+0xa340>
   180a4:	subs	r9, r0, #0
   180a8:	beq	19524 <__assert_fail@plt+0x7944>
   180ac:	movw	r3, #61896	; 0xf1c8
   180b0:	movt	r3, #3
   180b4:	ldr	r1, [r3]
   180b8:	bl	1a0fc <__assert_fail@plt+0x851c>
   180bc:	add	r2, sp, #37888	; 0x9400
   180c0:	movw	r3, #27628	; 0x6bec
   180c4:	add	lr, sp, #152	; 0x98
   180c8:	movt	r3, #65535	; 0xffff
   180cc:	add	r2, r2, #152	; 0x98
   180d0:	sub	r0, lr, #12
   180d4:	mov	r1, #128	; 0x80
   180d8:	add	ip, sp, #132	; 0x84
   180dc:	str	r9, [sp, #136]	; 0x88
   180e0:	str	ip, [sp, #40]	; 0x28
   180e4:	add	ip, sp, #872	; 0x368
   180e8:	str	ip, [r2, r3]
   180ec:	bl	1a6d0 <__assert_fail@plt+0x8af0>
   180f0:	mov	r0, #512	; 0x200
   180f4:	mov	r1, #0
   180f8:	bl	1a810 <__assert_fail@plt+0x8c30>
   180fc:	ldr	lr, [sp, #40]	; 0x28
   18100:	cmp	r0, #0
   18104:	str	r0, [lr, #24]
   18108:	beq	17cbc <__assert_fail@plt+0x60dc>
   1810c:	mov	r0, #512	; 0x200
   18110:	mov	r1, #0
   18114:	bl	1a810 <__assert_fail@plt+0x8c30>
   18118:	ldr	r1, [sp, #40]	; 0x28
   1811c:	cmp	r0, #0
   18120:	str	r0, [r1, #28]
   18124:	beq	18f40 <__assert_fail@plt+0x7360>
   18128:	movw	r1, #20972	; 0x51ec
   1812c:	mov	r0, #2048	; 0x800
   18130:	movt	r1, #1
   18134:	bl	1a810 <__assert_fail@plt+0x8c30>
   18138:	ldr	r2, [sp, #40]	; 0x28
   1813c:	cmp	r0, #0
   18140:	str	r0, [r2, #32]
   18144:	beq	19914 <__assert_fail@plt+0x7d34>
   18148:	ldr	lr, [sp, #60]	; 0x3c
   1814c:	cmp	lr, #0
   18150:	beq	18c20 <__assert_fail@plt+0x7040>
   18154:	movw	r1, #52052	; 0xcb54
   18158:	mov	r0, lr
   1815c:	movt	r1, #2
   18160:	bl	11b44 <fopen64@plt>
   18164:	cmp	r0, #0
   18168:	str	r0, [sp, #64]	; 0x40
   1816c:	beq	198c8 <__assert_fail@plt+0x7ce8>
   18170:	movw	r1, #49336	; 0xc0b8
   18174:	mov	r0, #7
   18178:	movt	r1, #2
   1817c:	ldr	r2, [sp, #60]	; 0x3c
   18180:	bl	19fe0 <__assert_fail@plt+0x8400>
   18184:	mov	r9, #0
   18188:	movw	r0, #27588	; 0x6bc4
   1818c:	movt	r0, #65535	; 0xffff
   18190:	str	r0, [sp, #68]	; 0x44
   18194:	add	r0, sp, #17408	; 0x4400
   18198:	mov	r1, #10240	; 0x2800
   1819c:	add	r0, r0, #148	; 0x94
   181a0:	ldr	r2, [sp, #64]	; 0x40
   181a4:	bl	117cc <fgets@plt>
   181a8:	cmp	r0, #0
   181ac:	beq	18300 <__assert_fail@plt+0x6720>
   181b0:	add	r0, sp, #17408	; 0x4400
   181b4:	movw	r1, #49356	; 0xc0cc
   181b8:	add	r0, r0, #148	; 0x94
   181bc:	movt	r1, #2
   181c0:	bl	11aa8 <strtok@plt>
   181c4:	movw	r1, #49356	; 0xc0cc
   181c8:	movt	r1, #2
   181cc:	add	r9, r9, #1
   181d0:	mov	r5, r0
   181d4:	mov	r0, #0
   181d8:	bl	11aa8 <strtok@plt>
   181dc:	movw	r1, #49356	; 0xc0cc
   181e0:	movt	r1, #2
   181e4:	mov	sl, r0
   181e8:	mov	r0, #0
   181ec:	bl	11aa8 <strtok@plt>
   181f0:	cmp	sl, #0
   181f4:	cmpne	r5, #0
   181f8:	beq	18194 <__assert_fail@plt+0x65b4>
   181fc:	cmp	r0, #0
   18200:	beq	18194 <__assert_fail@plt+0x65b4>
   18204:	movw	r1, #49360	; 0xc0d0
   18208:	movt	r1, #2
   1820c:	bl	11754 <strcmp@plt>
   18210:	cmp	r0, #0
   18214:	bne	18194 <__assert_fail@plt+0x65b4>
   18218:	mov	r0, r5
   1821c:	add	r1, sp, #92	; 0x5c
   18220:	mov	r2, #16
   18224:	bl	11a54 <strtoull@plt>
   18228:	add	lr, sp, #37888	; 0x9400
   1822c:	ldr	ip, [sp, #68]	; 0x44
   18230:	add	lr, lr, #152	; 0x98
   18234:	ldr	r3, [lr, ip]
   18238:	ldrb	r3, [r3]
   1823c:	cmp	r3, #0
   18240:	beq	183dc <__assert_fail@plt+0x67fc>
   18244:	movw	r1, #49368	; 0xc0d8
   18248:	str	r5, [sp]
   1824c:	mov	r0, #3
   18250:	movt	r1, #2
   18254:	ldr	r2, [sp, #60]	; 0x3c
   18258:	mov	r3, r9
   1825c:	bl	19fe0 <__assert_fail@plt+0x8400>
   18260:	b	18194 <__assert_fail@plt+0x65b4>
   18264:	ldr	r0, [r8, r3, lsl #2]
   18268:	movw	r1, #49084	; 0xbfbc
   1826c:	add	r2, sp, #272	; 0x110
   18270:	movt	r1, #2
   18274:	mov	r3, r7
   18278:	bl	11af0 <sscanf@plt>
   1827c:	cmp	r0, #2
   18280:	beq	182a0 <__assert_fail@plt+0x66c0>
   18284:	ldr	r3, [fp]
   18288:	movw	r1, #49092	; 0xbfc4
   1828c:	mov	r0, #3
   18290:	movt	r1, #2
   18294:	ldr	r2, [r8, r3, lsl #2]
   18298:	bl	19fe0 <__assert_fail@plt+0x8400>
   1829c:	b	17cf4 <__assert_fail@plt+0x6114>
   182a0:	ldr	r2, [fp]
   182a4:	add	lr, sp, #37888	; 0x9400
   182a8:	movw	r3, #28368	; 0x6ed0
   182ac:	add	lr, lr, #152	; 0x98
   182b0:	add	r1, r2, #1
   182b4:	movt	r3, #65535	; 0xffff
   182b8:	ldr	r2, [r8, r2, lsl #2]
   182bc:	str	r1, [fp]
   182c0:	str	r2, [lr, r3]
   182c4:	b	17f3c <__assert_fail@plt+0x635c>
   182c8:	movw	r1, #49188	; 0xc024
   182cc:	add	r2, sp, #876	; 0x36c
   182d0:	mov	r0, #7
   182d4:	movt	r1, #2
   182d8:	bl	19fe0 <__assert_fail@plt+0x8400>
   182dc:	mov	r5, #0
   182e0:	add	r0, sp, #132	; 0x84
   182e4:	str	r0, [sp, #40]	; 0x28
   182e8:	ldr	r0, [sp, #40]	; 0x28
   182ec:	bl	157f4 <__assert_fail@plt+0x3c14>
   182f0:	add	r0, sp, #872	; 0x368
   182f4:	lsr	r5, r5, #31
   182f8:	bl	15168 <__assert_fail@plt+0x3588>
   182fc:	b	17d00 <__assert_fail@plt+0x6120>
   18300:	ldr	r0, [sp, #40]	; 0x28
   18304:	bl	16e18 <__assert_fail@plt+0x5238>
   18308:	movw	r1, #49408	; 0xc100
   1830c:	ldr	r2, [sp, #60]	; 0x3c
   18310:	mov	r0, #7
   18314:	movt	r1, #2
   18318:	bl	19fe0 <__assert_fail@plt+0x8400>
   1831c:	ldr	r0, [sp, #64]	; 0x40
   18320:	bl	11a84 <fclose@plt>
   18324:	ldr	r2, [sp, #48]	; 0x30
   18328:	cmp	r2, #0
   1832c:	bne	18d8c <__assert_fail@plt+0x71ac>
   18330:	ldr	r5, [fp]
   18334:	cmp	r6, r5
   18338:	ble	184a4 <__assert_fail@plt+0x68c4>
   1833c:	ldr	r9, [r8, r5, lsl #2]
   18340:	add	r8, r8, r5, lsl #2
   18344:	ldrb	r3, [r9]
   18348:	cmp	r3, #47	; 0x2f
   1834c:	bne	19684 <__assert_fail@plt+0x7aa4>
   18350:	movw	sl, #27872	; 0x6ce0
   18354:	movt	sl, #65535	; 0xffff
   18358:	b	18394 <__assert_fail@plt+0x67b4>
   1835c:	add	r2, sp, #37888	; 0x9400
   18360:	ldr	r0, [sp, #40]	; 0x28
   18364:	add	r2, r2, #152	; 0x98
   18368:	ldr	r1, [r2, sl]
   1836c:	bl	15b2c <__assert_fail@plt+0x3f4c>
   18370:	cmp	r0, #0
   18374:	blt	1969c <__assert_fail@plt+0x7abc>
   18378:	add	r5, r5, #1
   1837c:	cmp	r5, r6
   18380:	beq	184a4 <__assert_fail@plt+0x68c4>
   18384:	ldr	r9, [r8, #4]!
   18388:	ldrb	r3, [r9]
   1838c:	cmp	r3, #47	; 0x2f
   18390:	bne	19684 <__assert_fail@plt+0x7aa4>
   18394:	ldr	lr, [sp, #40]	; 0x28
   18398:	mov	r1, r9
   1839c:	mov	r2, r7
   183a0:	ldr	r0, [lr, #4]
   183a4:	bl	20598 <__assert_fail@plt+0xe9b8>
   183a8:	cmp	r0, #0
   183ac:	bge	1835c <__assert_fail@plt+0x677c>
   183b0:	rsb	r0, r0, #0
   183b4:	bl	11928 <strerror@plt>
   183b8:	movw	r1, #47856	; 0xbaf0
   183bc:	mov	r2, r9
   183c0:	movt	r1, #2
   183c4:	mov	r3, r0
   183c8:	mov	r0, #2
   183cc:	bl	19fe0 <__assert_fail@plt+0x8400>
   183d0:	ldr	r0, [sp, #40]	; 0x28
   183d4:	bl	157f4 <__assert_fail@plt+0x3c14>
   183d8:	b	17cf4 <__assert_fail@plt+0x6114>
   183dc:	add	ip, sp, #152	; 0x98
   183e0:	strd	r0, [sp]
   183e4:	mov	r2, sl
   183e8:	str	r3, [sp, #8]
   183ec:	ldr	r0, [sp, #40]	; 0x28
   183f0:	add	r1, ip, #12
   183f4:	bl	16d38 <__assert_fail@plt+0x5158>
   183f8:	b	18194 <__assert_fail@plt+0x65b4>
   183fc:	bl	119f4 <__errno_location@plt>
   18400:	add	ip, sp, #920	; 0x398
   18404:	movw	r1, #49148	; 0xbffc
   18408:	sub	r2, ip, #44	; 0x2c
   1840c:	movt	r1, #2
   18410:	ldr	r5, [r0]
   18414:	mov	r0, #3
   18418:	rsb	r5, r5, #0
   1841c:	bl	19fe0 <__assert_fail@plt+0x8400>
   18420:	b	18060 <__assert_fail@plt+0x6480>
   18424:	mov	r0, r6
   18428:	bl	117c0 <free@plt>
   1842c:	add	ip, sp, #872	; 0x368
   18430:	movw	r3, #4112	; 0x1010
   18434:	ldr	r3, [ip, r3]
   18438:	cmp	r3, #0
   1843c:	beq	19b88 <__assert_fail@plt+0x7fa8>
   18440:	add	lr, sp, #37888	; 0x9400
   18444:	movw	r3, #27628	; 0x6bec
   18448:	add	lr, lr, #152	; 0x98
   1844c:	movt	r3, #65535	; 0xffff
   18450:	ldr	r0, [sp, #40]	; 0x28
   18454:	ldr	r1, [lr, r3]
   18458:	add	r1, r1, #4
   1845c:	bl	179b0 <__assert_fail@plt+0x5dd0>
   18460:	cmp	r0, #0
   18464:	blt	19b68 <__assert_fail@plt+0x7f88>
   18468:	add	ip, sp, #37888	; 0x9400
   1846c:	movw	r3, #27628	; 0x6bec
   18470:	add	ip, ip, #152	; 0x98
   18474:	movt	r3, #65535	; 0xffff
   18478:	movw	r2, #4116	; 0x1014
   1847c:	ldr	r3, [ip, r3]
   18480:	ldr	r5, [r3, r2]
   18484:	cmp	r5, #0
   18488:	beq	184a4 <__assert_fail@plt+0x68c4>
   1848c:	ldr	r0, [sp, #40]	; 0x28
   18490:	add	r1, r5, #8
   18494:	bl	179b0 <__assert_fail@plt+0x5dd0>
   18498:	ldr	r5, [r5]
   1849c:	cmp	r5, #0
   184a0:	bne	1848c <__assert_fail@plt+0x68ac>
   184a4:	ldr	lr, [sp, #40]	; 0x28
   184a8:	add	r1, sp, #120	; 0x78
   184ac:	ldr	r0, [lr, #28]
   184b0:	bl	1b020 <__assert_fail@plt+0x9440>
   184b4:	movw	r5, #27608	; 0x6bd8
   184b8:	add	r6, sp, #140	; 0x8c
   184bc:	movt	r5, #65535	; 0xffff
   184c0:	b	184ec <__assert_fail@plt+0x690c>
   184c4:	add	r2, sp, #37888	; 0x9400
   184c8:	ldr	ip, [sp, #40]	; 0x28
   184cc:	add	r2, r2, #152	; 0x98
   184d0:	mov	r0, r6
   184d4:	ldr	r1, [r2, r5]
   184d8:	ldr	r3, [ip, #12]
   184dc:	strh	r3, [r1, #56]	; 0x38
   184e0:	bl	1a720 <__assert_fail@plt+0x8b40>
   184e4:	cmp	r0, #0
   184e8:	blt	196d8 <__assert_fail@plt+0x7af8>
   184ec:	add	r0, sp, #120	; 0x78
   184f0:	mov	r1, #0
   184f4:	add	r2, sp, #112	; 0x70
   184f8:	bl	1b038 <__assert_fail@plt+0x9458>
   184fc:	cmp	r0, #0
   18500:	bne	184c4 <__assert_fail@plt+0x68e4>
   18504:	add	lr, sp, #37888	; 0x9400
   18508:	movw	r3, #27628	; 0x6bec
   1850c:	add	lr, lr, #152	; 0x98
   18510:	movt	r3, #65535	; 0xffff
   18514:	mov	r1, #4096	; 0x1000
   18518:	add	r0, sp, #9344	; 0x2480
   1851c:	ldr	r2, [lr, r3]
   18520:	movw	ip, #51184	; 0xc7f0
   18524:	mov	r3, r1
   18528:	movt	ip, #2
   1852c:	add	r2, r2, #4
   18530:	add	r0, r0, #20
   18534:	str	r2, [sp, #4]
   18538:	mov	r2, #1
   1853c:	str	ip, [sp]
   18540:	bl	11bd4 <__snprintf_chk@plt>
   18544:	add	r0, sp, #9344	; 0x2480
   18548:	movw	r1, #52052	; 0xcb54
   1854c:	add	r0, r0, #20
   18550:	movt	r1, #2
   18554:	bl	11b44 <fopen64@plt>
   18558:	subs	r6, r0, #0
   1855c:	movne	r5, #0
   18560:	beq	19cc4 <__assert_fail@plt+0x80e4>
   18564:	add	r0, sp, #13440	; 0x3480
   18568:	mov	r1, #4096	; 0x1000
   1856c:	add	r0, r0, #20
   18570:	mov	r2, r6
   18574:	bl	117cc <fgets@plt>
   18578:	subs	r1, r0, #0
   1857c:	beq	195b8 <__assert_fail@plt+0x79d8>
   18580:	add	r0, sp, #13440	; 0x3480
   18584:	add	r5, r5, #1
   18588:	add	r0, r0, #20
   1858c:	bl	119a0 <strlen@plt>
   18590:	cmp	r0, #0
   18594:	beq	18564 <__assert_fail@plt+0x6984>
   18598:	add	lr, sp, #37888	; 0x9400
   1859c:	add	lr, lr, #152	; 0x98
   185a0:	add	r3, lr, r0
   185a4:	sub	r3, r3, #24576	; 0x6000
   185a8:	sub	r3, r3, #4
   185ac:	ldrb	r3, [r3, #-1]
   185b0:	cmp	r3, #10
   185b4:	beq	18564 <__assert_fail@plt+0x6984>
   185b8:	add	r2, sp, #9344	; 0x2480
   185bc:	movw	r1, #50144	; 0xc3e0
   185c0:	add	r2, r2, #20
   185c4:	mov	r3, r5
   185c8:	mov	r0, #3
   185cc:	movt	r1, #2
   185d0:	bl	19fe0 <__assert_fail@plt+0x8400>
   185d4:	mov	r0, r6
   185d8:	bl	11a84 <fclose@plt>
   185dc:	ldr	lr, [sp, #40]	; 0x28
   185e0:	movw	r1, #50180	; 0xc404
   185e4:	mov	r0, #7
   185e8:	movt	r1, #2
   185ec:	ldr	r2, [lr, #12]
   185f0:	bl	19fe0 <__assert_fail@plt+0x8400>
   185f4:	ldr	r0, [sp, #40]	; 0x28
   185f8:	ldr	fp, [r0, #12]
   185fc:	ldr	sl, [r0, #8]
   18600:	add	fp, sl, fp, lsl #2
   18604:	cmp	sl, fp
   18608:	addcc	r2, sp, #152	; 0x98
   1860c:	movwcc	r8, #27612	; 0x6bdc
   18610:	addcc	r9, r2, #12
   18614:	movtcc	r8, #65535	; 0xffff
   18618:	bcs	186e4 <__assert_fail@plt+0x6b04>
   1861c:	ldr	r7, [sl], #4
   18620:	add	r3, sp, #37888	; 0x9400
   18624:	add	r3, r3, #152	; 0x98
   18628:	add	r1, sp, #116	; 0x74
   1862c:	mov	ip, #0
   18630:	ldr	r0, [r7]
   18634:	str	ip, [r3, r8]
   18638:	bl	236e0 <__assert_fail@plt+0x11b00>
   1863c:	cmp	r0, #0
   18640:	blt	18bf0 <__assert_fail@plt+0x7010>
   18644:	add	lr, sp, #37888	; 0x9400
   18648:	add	lr, lr, #152	; 0x98
   1864c:	ldr	r5, [lr, r8]
   18650:	cmp	r5, #0
   18654:	beq	196f8 <__assert_fail@plt+0x7b18>
   18658:	mov	r0, r5
   1865c:	bl	23690 <__assert_fail@plt+0x11ab0>
   18660:	mov	r6, r0
   18664:	mov	r0, r5
   18668:	bl	236a0 <__assert_fail@plt+0x11ac0>
   1866c:	strd	r0, [sp]
   18670:	mov	r2, r6
   18674:	str	r7, [sp, #8]
   18678:	mov	r1, r9
   1867c:	ldr	r0, [sp, #40]	; 0x28
   18680:	mov	r3, #0
   18684:	bl	16d38 <__assert_fail@plt+0x5158>
   18688:	add	r2, sp, #37888	; 0x9400
   1868c:	mov	r1, r5
   18690:	add	r2, r2, #152	; 0x98
   18694:	ldr	r0, [r2, r8]
   18698:	bl	1d0f4 <__assert_fail@plt+0xb514>
   1869c:	subs	r5, r0, #0
   186a0:	bne	18658 <__assert_fail@plt+0x6a78>
   186a4:	add	r3, sp, #37888	; 0x9400
   186a8:	add	r3, r3, #152	; 0x98
   186ac:	ldr	r0, [r3, r8]
   186b0:	bl	236b8 <__assert_fail@plt+0x11ad8>
   186b4:	mov	r1, r7
   186b8:	ldr	r0, [r1], #16
   186bc:	bl	23218 <__assert_fail@plt+0x11638>
   186c0:	mov	r1, r7
   186c4:	ldr	r0, [r1], #20
   186c8:	bl	238cc <__assert_fail@plt+0x11cec>
   186cc:	ldr	r0, [r7]
   186d0:	bl	20b98 <__assert_fail@plt+0xefb8>
   186d4:	cmp	fp, sl
   186d8:	mov	ip, #0
   186dc:	str	ip, [r7]
   186e0:	bhi	1861c <__assert_fail@plt+0x6a3c>
   186e4:	ldr	r1, [sp, #40]	; 0x28
   186e8:	ldr	r0, [r1, #32]
   186ec:	ldr	r5, [r1, #12]
   186f0:	bl	1b018 <__assert_fail@plt+0x9438>
   186f4:	mov	r3, r0
   186f8:	movw	r1, #50272	; 0xc460
   186fc:	mov	r0, #7
   18700:	mov	r2, r5
   18704:	movt	r1, #2
   18708:	bl	19fe0 <__assert_fail@plt+0x8400>
   1870c:	ldr	lr, [sp, #40]	; 0x28
   18710:	ldr	r0, [lr, #32]
   18714:	ldr	r5, [lr, #12]
   18718:	bl	1b018 <__assert_fail@plt+0x9438>
   1871c:	mov	r3, r0
   18720:	movw	r1, #50316	; 0xc48c
   18724:	mov	r0, #7
   18728:	mov	r2, r5
   1872c:	movt	r1, #2
   18730:	bl	19fe0 <__assert_fail@plt+0x8400>
   18734:	ldr	r0, [sp, #40]	; 0x28
   18738:	ldr	r2, [r0, #12]
   1873c:	ldr	r3, [r0, #8]
   18740:	add	r2, r3, r2, lsl #2
   18744:	str	r2, [sp, #64]	; 0x40
   18748:	cmp	r3, r2
   1874c:	strcc	r3, [sp, #60]	; 0x3c
   18750:	bcs	188e4 <__assert_fail@plt+0x6d04>
   18754:	ldr	r2, [sp, #60]	; 0x3c
   18758:	ldr	r7, [r2], #4
   1875c:	ldr	r3, [r7, #20]
   18760:	str	r2, [sp, #60]	; 0x3c
   18764:	cmp	r3, #0
   18768:	beq	19268 <__assert_fail@plt+0x7688>
   1876c:	add	lr, sp, #37888	; 0x9400
   18770:	movw	r3, #27628	; 0x6bec
   18774:	add	lr, lr, #152	; 0x98
   18778:	movt	r3, #65535	; 0xffff
   1877c:	movw	r1, #50400	; 0xc4e0
   18780:	mov	r0, #7
   18784:	movt	r1, #2
   18788:	ldr	r2, [r7, #4]
   1878c:	ldr	fp, [lr, r3]
   18790:	bl	19fe0 <__assert_fail@plt+0x8400>
   18794:	ldr	r5, [r7, #20]
   18798:	cmp	r5, #0
   1879c:	beq	188d4 <__assert_fail@plt+0x6cf4>
   187a0:	mov	r0, r5
   187a4:	bl	2386c <__assert_fail@plt+0x11c8c>
   187a8:	mov	r8, r0
   187ac:	mov	r0, r5
   187b0:	bl	2387c <__assert_fail@plt+0x11c9c>
   187b4:	strd	r0, [sp, #48]	; 0x30
   187b8:	mov	r0, r5
   187bc:	bl	23894 <__assert_fail@plt+0x11cb4>
   187c0:	add	lr, sp, #37888	; 0x9400
   187c4:	movw	r3, #27628	; 0x6bec
   187c8:	add	lr, lr, #152	; 0x98
   187cc:	movt	r3, #65535	; 0xffff
   187d0:	ldrb	r2, [r8]
   187d4:	mov	r9, r0
   187d8:	ldr	ip, [lr, r3]
   187dc:	movw	r3, #4104	; 0x1008
   187e0:	cmp	r2, #46	; 0x2e
   187e4:	ldr	r1, [sp, #40]	; 0x28
   187e8:	ldrbeq	r2, [r8, #1]
   187ec:	ldrb	r3, [ip, r3]
   187f0:	ldr	r0, [r1, #32]
   187f4:	addeq	r1, r8, #1
   187f8:	movne	r1, r8
   187fc:	cmp	r3, r2
   18800:	addeq	r1, r1, #1
   18804:	bl	1aca0 <__assert_fail@plt+0x90c0>
   18808:	subs	r3, r9, #87	; 0x57
   1880c:	rsbs	sl, r3, #0
   18810:	adcs	sl, sl, r3
   18814:	subs	r6, r0, #0
   18818:	beq	18ba0 <__assert_fail@plt+0x6fc0>
   1881c:	movw	r3, #4105	; 0x1009
   18820:	ldrb	r3, [fp, r3]
   18824:	cmp	r3, #0
   18828:	beq	18848 <__assert_fail@plt+0x6c68>
   1882c:	ldrd	r2, [r6, #8]
   18830:	ldrd	r0, [sp, #48]	; 0x30
   18834:	cmp	r1, r3
   18838:	cmpeq	r0, r2
   1883c:	beq	18848 <__assert_fail@plt+0x6c68>
   18840:	cmp	sl, #0
   18844:	beq	18b48 <__assert_fail@plt+0x6f68>
   18848:	add	r9, r6, #16
   1884c:	ldr	r3, [r6]
   18850:	movw	r1, #50572	; 0xc58c
   18854:	ldr	r2, [r7, #4]
   18858:	mov	r0, #7
   1885c:	cmp	r3, #0
   18860:	movt	r1, #2
   18864:	ldrne	r3, [r3, #4]
   18868:	movweq	r3, #47968	; 0xbb60
   1886c:	movteq	r3, #2
   18870:	str	r3, [sp]
   18874:	mov	r3, r9
   18878:	bl	19fe0 <__assert_fail@plt+0x8400>
   1887c:	ldr	r1, [r6]
   18880:	cmp	r1, #0
   18884:	beq	188c0 <__assert_fail@plt+0x6ce0>
   18888:	add	r0, r7, #24
   1888c:	bl	1a788 <__assert_fail@plt+0x8ba8>
   18890:	cmp	r0, #0
   18894:	blt	188c0 <__assert_fail@plt+0x6ce0>
   18898:	ldr	ip, [r6]
   1889c:	movw	r0, #47536	; 0xb9b0
   188a0:	ldr	r1, [r7, #4]
   188a4:	mov	r2, r9
   188a8:	movt	r0, #2
   188ac:	ldrh	lr, [ip, #58]	; 0x3a
   188b0:	ldr	r3, [ip, #4]
   188b4:	add	lr, lr, #1
   188b8:	strh	lr, [ip, #58]	; 0x3a
   188bc:	bl	17080 <__assert_fail@plt+0x54a0>
   188c0:	mov	r1, r5
   188c4:	ldr	r0, [r7, #20]
   188c8:	bl	1d0f4 <__assert_fail@plt+0xb514>
   188cc:	subs	r5, r0, #0
   188d0:	bne	187a0 <__assert_fail@plt+0x6bc0>
   188d4:	ldr	r3, [sp, #64]	; 0x40
   188d8:	ldr	ip, [sp, #60]	; 0x3c
   188dc:	cmp	r3, ip
   188e0:	bhi	18754 <__assert_fail@plt+0x6b74>
   188e4:	ldr	r1, [sp, #40]	; 0x28
   188e8:	ldr	r0, [r1, #32]
   188ec:	ldr	r5, [r1, #12]
   188f0:	bl	1b018 <__assert_fail@plt+0x9438>
   188f4:	mov	r3, r0
   188f8:	movw	r1, #50596	; 0xc5a4
   188fc:	mov	r0, #7
   18900:	mov	r2, r5
   18904:	movt	r1, #2
   18908:	bl	19fe0 <__assert_fail@plt+0x8400>
   1890c:	ldr	r3, [sp, #40]	; 0x28
   18910:	ldrh	r3, [r3, #12]
   18914:	lsl	r6, r3, #1
   18918:	str	r3, [sp, #76]	; 0x4c
   1891c:	add	r0, r6, r3
   18920:	lsl	r0, r0, #1
   18924:	bl	11910 <malloc@plt>
   18928:	subs	r5, r0, #0
   1892c:	beq	183d0 <__assert_fail@plt+0x67f0>
   18930:	add	ip, r5, r6
   18934:	movw	r1, #50644	; 0xc5d4
   18938:	mov	r0, #7
   1893c:	movt	r1, #2
   18940:	ldr	r2, [sp, #76]	; 0x4c
   18944:	add	r6, ip, r6
   18948:	str	ip, [sp, #64]	; 0x40
   1894c:	str	r6, [sp, #60]	; 0x3c
   18950:	bl	19fe0 <__assert_fail@plt+0x8400>
   18954:	ldr	lr, [sp, #40]	; 0x28
   18958:	movw	r3, #65534	; 0xfffe
   1895c:	ldr	r7, [lr, #12]
   18960:	cmp	r7, r3
   18964:	bhi	19d78 <__assert_fail@plt+0x8198>
   18968:	ldr	r0, [sp, #76]	; 0x4c
   1896c:	ldr	r1, [sp, #40]	; 0x28
   18970:	cmp	r0, #0
   18974:	ldr	r8, [r1, #8]
   18978:	beq	19c70 <__assert_fail@plt+0x8090>
   1897c:	ldr	r6, [sp, #64]	; 0x40
   18980:	mov	ip, #0
   18984:	ldr	lr, [sp, #76]	; 0x4c
   18988:	sub	r1, r8, #4
   1898c:	sub	r2, r5, #2
   18990:	mov	r3, ip
   18994:	ldr	r0, [r1, #4]!
   18998:	ldrh	r0, [r0, #58]	; 0x3a
   1899c:	cmp	r0, #0
   189a0:	strh	r0, [r2, #2]!
   189a4:	lsleq	r0, ip, #1
   189a8:	addeq	r9, ip, #1
   189ac:	strheq	r3, [r6, r0]
   189b0:	add	r3, r3, #1
   189b4:	uxtheq	ip, r9
   189b8:	uxth	r3, r3
   189bc:	cmp	lr, r3
   189c0:	bhi	18994 <__assert_fail@plt+0x6db4>
   189c4:	cmp	ip, #0
   189c8:	beq	19c70 <__assert_fail@plt+0x8090>
   189cc:	ldr	r9, [sp, #64]	; 0x40
   189d0:	mov	r6, #0
   189d4:	ldr	sl, [sp, #60]	; 0x3c
   189d8:	sub	ip, ip, #1
   189dc:	lsl	r0, r6, #1
   189e0:	add	r1, r6, #1
   189e4:	uxth	ip, ip
   189e8:	lsl	r3, ip, #1
   189ec:	ldrh	r3, [r9, r3]
   189f0:	ldr	r2, [r8, r3, lsl #2]
   189f4:	strh	r3, [sl, r0]
   189f8:	ldr	lr, [r2, #28]
   189fc:	ldr	r3, [r2, #24]
   18a00:	str	r6, [r2, #52]	; 0x34
   18a04:	uxth	r6, r1
   18a08:	add	lr, r3, lr, lsl #2
   18a0c:	cmp	r3, lr
   18a10:	bcs	18a84 <__assert_fail@plt+0x6ea4>
   18a14:	ldr	r2, [r3]
   18a18:	ldrh	r1, [r2, #56]	; 0x38
   18a1c:	lsl	r2, r1, #1
   18a20:	add	r0, r5, r2
   18a24:	ldrh	r2, [r5, r2]
   18a28:	cmp	r2, #0
   18a2c:	beq	19ca4 <__assert_fail@plt+0x80c4>
   18a30:	add	r3, r3, #4
   18a34:	b	18a58 <__assert_fail@plt+0x6e78>
   18a38:	ldr	r2, [r2]
   18a3c:	add	r3, r3, #4
   18a40:	ldrh	r1, [r2, #56]	; 0x38
   18a44:	lsl	r2, r1, #1
   18a48:	add	r0, r5, r2
   18a4c:	ldrh	r2, [r5, r2]
   18a50:	cmp	r2, #0
   18a54:	beq	19ca4 <__assert_fail@plt+0x80c4>
   18a58:	sub	r2, r2, #1
   18a5c:	uxth	r2, r2
   18a60:	strh	r2, [r0]
   18a64:	cmp	r2, #0
   18a68:	lsleq	r2, ip, #1
   18a6c:	addeq	r0, ip, #1
   18a70:	strheq	r1, [r9, r2]
   18a74:	uxtheq	ip, r0
   18a78:	cmp	r3, lr
   18a7c:	mov	r2, r3
   18a80:	bcc	18a38 <__assert_fail@plt+0x6e58>
   18a84:	cmp	ip, #0
   18a88:	bne	189d8 <__assert_fail@plt+0x6df8>
   18a8c:	ldr	r2, [sp, #76]	; 0x4c
   18a90:	cmp	r2, r6
   18a94:	bls	19930 <__assert_fail@plt+0x7d50>
   18a98:	movw	r3, #51204	; 0xc804
   18a9c:	movt	r3, #2
   18aa0:	rsb	r6, r6, r2
   18aa4:	add	lr, sp, #37888	; 0x9400
   18aa8:	ldm	r3, {r0, r1}
   18aac:	add	ip, sp, #8192	; 0x2000
   18ab0:	uxth	r6, r6
   18ab4:	movw	r3, #32488	; 0x7ee8
   18ab8:	add	lr, lr, #152	; 0x98
   18abc:	movt	r3, #65535	; 0xffff
   18ac0:	strb	r1, [ip, #-3196]	; 0xfffff384
   18ac4:	mov	r2, r6
   18ac8:	str	r0, [lr, r3]
   18acc:	movw	r1, #50748	; 0xc63c
   18ad0:	mov	r0, #3
   18ad4:	movt	r1, #2
   18ad8:	str	r6, [sp, #84]	; 0x54
   18adc:	bl	19fe0 <__assert_fail@plt+0x8400>
   18ae0:	ldr	ip, [sp, #84]	; 0x54
   18ae4:	cmp	ip, #0
   18ae8:	beq	18b3c <__assert_fail@plt+0x6f5c>
   18aec:	mov	lr, #0
   18af0:	str	lr, [sp, #80]	; 0x50
   18af4:	ldr	r1, [sp, #80]	; 0x50
   18af8:	ldr	r2, [sp, #76]	; 0x4c
   18afc:	cmp	r1, r2
   18b00:	bge	18b3c <__assert_fail@plt+0x6f5c>
   18b04:	lsl	r2, r1, #1
   18b08:	add	r3, r5, r2
   18b0c:	ldrh	r2, [r5, r2]
   18b10:	cmp	r2, #0
   18b14:	bne	192c0 <__assert_fail@plt+0x76e0>
   18b18:	mov	r2, r1
   18b1c:	ldr	r0, [sp, #76]	; 0x4c
   18b20:	b	18b30 <__assert_fail@plt+0x6f50>
   18b24:	ldrh	r1, [r3, #2]!
   18b28:	cmp	r1, #0
   18b2c:	bne	192bc <__assert_fail@plt+0x76dc>
   18b30:	add	r2, r2, #1
   18b34:	cmp	r0, r2
   18b38:	bne	18b24 <__assert_fail@plt+0x6f44>
   18b3c:	mov	r0, r5
   18b40:	bl	117c0 <free@plt>
   18b44:	b	183d0 <__assert_fail@plt+0x67f0>
   18b48:	strd	r2, [sp]
   18b4c:	add	r9, r6, #16
   18b50:	ldr	ip, [r7, #4]
   18b54:	movw	r1, #50488	; 0xc538
   18b58:	ldrd	r2, [sp, #48]	; 0x30
   18b5c:	movt	r1, #2
   18b60:	mov	r0, #7
   18b64:	str	ip, [sp, #8]
   18b68:	strd	r2, [sp, #16]
   18b6c:	mov	r2, r9
   18b70:	bl	19fe0 <__assert_fail@plt+0x8400>
   18b74:	movw	r3, #4106	; 0x100a
   18b78:	ldrb	r3, [fp, r3]
   18b7c:	cmp	r3, #0
   18b80:	beq	1884c <__assert_fail@plt+0x6c6c>
   18b84:	movw	r1, #50528	; 0xc560
   18b88:	mov	r3, r8
   18b8c:	mov	r0, #4
   18b90:	movt	r1, #2
   18b94:	ldr	r2, [r7, #4]
   18b98:	bl	19fe0 <__assert_fail@plt+0x8400>
   18b9c:	b	1884c <__assert_fail@plt+0x6c6c>
   18ba0:	ldr	r2, [r7, #4]
   18ba4:	movw	r1, #50424	; 0xc4f8
   18ba8:	mov	r3, r9
   18bac:	str	r8, [sp]
   18bb0:	mov	r0, #7
   18bb4:	movt	r1, #2
   18bb8:	bl	19fe0 <__assert_fail@plt+0x8400>
   18bbc:	movw	r3, #4106	; 0x100a
   18bc0:	ldrb	r3, [fp, r3]
   18bc4:	cmp	r3, #0
   18bc8:	beq	188c0 <__assert_fail@plt+0x6ce0>
   18bcc:	cmp	sl, #0
   18bd0:	bne	188c0 <__assert_fail@plt+0x6ce0>
   18bd4:	movw	r1, #50460	; 0xc51c
   18bd8:	mov	r3, r8
   18bdc:	mov	r0, #4
   18be0:	movt	r1, #2
   18be4:	ldr	r2, [r7, #4]
   18be8:	bl	19fe0 <__assert_fail@plt+0x8400>
   18bec:	b	188c0 <__assert_fail@plt+0x6ce0>
   18bf0:	cmn	r0, #2
   18bf4:	beq	19568 <__assert_fail@plt+0x7988>
   18bf8:	rsb	r0, r0, #0
   18bfc:	ldr	r5, [r7, #4]
   18c00:	bl	11928 <strerror@plt>
   18c04:	movw	r1, #50236	; 0xc43c
   18c08:	movt	r1, #2
   18c0c:	mov	r2, r5
   18c10:	mov	r3, r0
   18c14:	mov	r0, #3
   18c18:	bl	19fe0 <__assert_fail@plt+0x8400>
   18c1c:	b	186b4 <__assert_fail@plt+0x6ad4>
   18c20:	ldr	lr, [sp, #68]	; 0x44
   18c24:	cmp	lr, #0
   18c28:	beq	19884 <__assert_fail@plt+0x7ca4>
   18c2c:	movw	r3, #51212	; 0xc80c
   18c30:	movt	r3, #2
   18c34:	ldm	r3, {r0, r1, r2}
   18c38:	add	r3, sp, #4992	; 0x1380
   18c3c:	add	r3, r3, #8
   18c40:	lsr	ip, r2, #16
   18c44:	stmia	r3!, {r0, r1}
   18c48:	movw	r1, #52052	; 0xcb54
   18c4c:	mov	r0, lr
   18c50:	movt	r1, #2
   18c54:	strh	r2, [r3], #2
   18c58:	strb	ip, [r3]
   18c5c:	bl	11b44 <fopen64@plt>
   18c60:	cmp	r0, #0
   18c64:	str	r0, [sp, #60]	; 0x3c
   18c68:	beq	19ce0 <__assert_fail@plt+0x8100>
   18c6c:	movw	r1, #49480	; 0xc148
   18c70:	mov	r0, #7
   18c74:	movt	r1, #2
   18c78:	ldr	r2, [sp, #68]	; 0x44
   18c7c:	bl	19fe0 <__assert_fail@plt+0x8400>
   18c80:	add	r5, sp, #27648	; 0x6c00
   18c84:	mov	r9, #0
   18c88:	add	r5, r5, #148	; 0x94
   18c8c:	movw	r0, #27628	; 0x6bec
   18c90:	movt	r0, #65535	; 0xffff
   18c94:	str	r0, [sp, #64]	; 0x40
   18c98:	mov	r0, r5
   18c9c:	mov	r1, #10240	; 0x2800
   18ca0:	ldr	r2, [sp, #60]	; 0x3c
   18ca4:	bl	117cc <fgets@plt>
   18ca8:	cmp	r0, #0
   18cac:	beq	19540 <__assert_fail@plt+0x7960>
   18cb0:	mov	r0, r5
   18cb4:	mov	r1, #32
   18cb8:	bl	119ac <strchr@plt>
   18cbc:	add	r9, r9, #1
   18cc0:	cmp	r0, #0
   18cc4:	beq	18d6c <__assert_fail@plt+0x718c>
   18cc8:	add	r0, r0, #1
   18ccc:	mov	r1, #32
   18cd0:	bl	119ac <strchr@plt>
   18cd4:	cmp	r0, #0
   18cd8:	beq	18d6c <__assert_fail@plt+0x718c>
   18cdc:	ldr	r1, [sp, #64]	; 0x40
   18ce0:	add	r2, sp, #37888	; 0x9400
   18ce4:	add	r2, r2, #152	; 0x98
   18ce8:	movw	ip, #4104	; 0x1008
   18cec:	ldr	r3, [r2, r1]
   18cf0:	add	r1, sp, #4992	; 0x1380
   18cf4:	ldrb	r2, [r0, #1]
   18cf8:	add	r1, r1, #8
   18cfc:	ldrb	r3, [r3, ip]
   18d00:	cmp	r2, r3
   18d04:	mov	r2, #10
   18d08:	addne	sl, r0, #1
   18d0c:	addeq	sl, r0, #2
   18d10:	mov	r0, sl
   18d14:	bl	11ba4 <strncmp@plt>
   18d18:	subs	r2, r0, #0
   18d1c:	bne	18c98 <__assert_fail@plt+0x70b8>
   18d20:	mov	r1, #10
   18d24:	mov	r0, sl
   18d28:	str	r2, [sp, #32]
   18d2c:	bl	119ac <strchr@plt>
   18d30:	ldr	r2, [sp, #32]
   18d34:	add	lr, sp, #152	; 0x98
   18d38:	mov	r1, #0
   18d3c:	mov	r3, #0
   18d40:	cmp	r0, #0
   18d44:	strbne	r2, [r0]
   18d48:	mov	r0, #0
   18d4c:	str	r3, [sp, #8]
   18d50:	strd	r0, [sp]
   18d54:	add	r2, sl, #10
   18d58:	ldr	r0, [sp, #40]	; 0x28
   18d5c:	add	r1, lr, #12
   18d60:	mov	r3, #1
   18d64:	bl	16d38 <__assert_fail@plt+0x5158>
   18d68:	b	18c98 <__assert_fail@plt+0x70b8>
   18d6c:	movw	r1, #49504	; 0xc160
   18d70:	str	r5, [sp]
   18d74:	mov	r0, #3
   18d78:	movt	r1, #2
   18d7c:	ldr	r2, [sp, #68]	; 0x44
   18d80:	mov	r3, r9
   18d84:	bl	19fe0 <__assert_fail@plt+0x8400>
   18d88:	b	18c98 <__assert_fail@plt+0x70b8>
   18d8c:	cmp	r4, #0
   18d90:	add	ip, sp, #37888	; 0x9400
   18d94:	add	ip, ip, #152	; 0x98
   18d98:	movw	r3, #61900	; 0xf1cc
   18d9c:	movw	r0, #27596	; 0x6bcc
   18da0:	movt	r3, #3
   18da4:	movt	r0, #65535	; 0xffff
   18da8:	movne	r3, r4
   18dac:	mov	r1, #0
   18db0:	movw	r2, #27592	; 0x6bc8
   18db4:	str	r1, [ip, r0]
   18db8:	movt	r2, #65535	; 0xffff
   18dbc:	ldr	r6, [r3]
   18dc0:	str	r1, [ip, r2]
   18dc4:	cmp	r6, r1
   18dc8:	beq	18424 <__assert_fail@plt+0x6844>
   18dcc:	mov	r9, r3
   18dd0:	b	18df4 <__assert_fail@plt+0x7214>
   18dd4:	add	lr, sp, #152	; 0x98
   18dd8:	mov	r2, r6
   18ddc:	sub	r0, lr, #52	; 0x34
   18de0:	sub	r1, lr, #56	; 0x38
   18de4:	bl	155a8 <__assert_fail@plt+0x39c8>
   18de8:	ldr	r6, [r9, #4]!
   18dec:	cmp	r6, #0
   18df0:	beq	18f60 <__assert_fail@plt+0x7380>
   18df4:	mov	r0, #3
   18df8:	mov	r1, r6
   18dfc:	add	r2, sp, #272	; 0x110
   18e00:	bl	11b74 <__xstat64@plt>
   18e04:	subs	r3, r0, #0
   18e08:	bne	18f10 <__assert_fail@plt+0x7330>
   18e0c:	ldr	r2, [sp, #288]	; 0x120
   18e10:	and	r2, r2, #61440	; 0xf000
   18e14:	cmp	r2, #16384	; 0x4000
   18e18:	bne	18dd4 <__assert_fail@plt+0x71f4>
   18e1c:	mov	r0, r6
   18e20:	bl	118c8 <opendir@plt>
   18e24:	subs	r8, r0, #0
   18e28:	beq	19db8 <__assert_fail@plt+0x81d8>
   18e2c:	bl	11afc <readdir64@plt>
   18e30:	subs	fp, r0, #0
   18e34:	addne	sl, sp, #100	; 0x64
   18e38:	bne	18e68 <__assert_fail@plt+0x7288>
   18e3c:	b	18ef0 <__assert_fail@plt+0x7310>
   18e40:	movw	r1, #49632	; 0xc1e0
   18e44:	mov	r3, r5
   18e48:	mov	r0, #6
   18e4c:	movt	r1, #2
   18e50:	mov	r2, r6
   18e54:	bl	19fe0 <__assert_fail@plt+0x8400>
   18e58:	mov	r0, r8
   18e5c:	bl	11afc <readdir64@plt>
   18e60:	subs	fp, r0, #0
   18e64:	beq	18ef0 <__assert_fail@plt+0x7310>
   18e68:	add	r5, fp, #19
   18e6c:	mov	r0, r5
   18e70:	bl	119a0 <strlen@plt>
   18e74:	ldrb	r3, [fp, #19]
   18e78:	cmp	r3, #46	; 0x2e
   18e7c:	beq	18e58 <__assert_fail@plt+0x7278>
   18e80:	cmp	r0, #5
   18e84:	bls	18e40 <__assert_fail@plt+0x7260>
   18e88:	sub	r0, r0, #5
   18e8c:	movw	r1, #49624	; 0xc1d8
   18e90:	add	r0, r5, r0
   18e94:	movt	r1, #2
   18e98:	bl	11754 <strcmp@plt>
   18e9c:	subs	fp, r0, #0
   18ea0:	bne	18e40 <__assert_fail@plt+0x7260>
   18ea4:	mov	r0, r8
   18ea8:	bl	11b38 <dirfd@plt>
   18eac:	mov	r3, r7
   18eb0:	str	fp, [sp]
   18eb4:	mov	r2, r5
   18eb8:	mov	r1, r0
   18ebc:	mov	r0, #3
   18ec0:	bl	1185c <__fxstatat64@plt>
   18ec4:	ldr	r3, [r7, #16]
   18ec8:	and	r3, r3, #61440	; 0xf000
   18ecc:	cmp	r3, #16384	; 0x4000
   18ed0:	mov	r3, r5
   18ed4:	beq	18f28 <__assert_fail@plt+0x7348>
   18ed8:	add	ip, sp, #152	; 0x98
   18edc:	mov	r0, sl
   18ee0:	sub	r1, ip, #56	; 0x38
   18ee4:	mov	r2, r6
   18ee8:	bl	155a8 <__assert_fail@plt+0x39c8>
   18eec:	b	18e58 <__assert_fail@plt+0x7278>
   18ef0:	mov	r0, r8
   18ef4:	bl	11bc8 <closedir@plt>
   18ef8:	movw	r1, #49728	; 0xc240
   18efc:	mov	r2, r6
   18f00:	mov	r0, #7
   18f04:	movt	r1, #2
   18f08:	bl	19fe0 <__assert_fail@plt+0x8400>
   18f0c:	b	18de8 <__assert_fail@plt+0x7208>
   18f10:	movw	r1, #49576	; 0xc1a8
   18f14:	mov	r2, r6
   18f18:	mov	r0, #7
   18f1c:	movt	r1, #2
   18f20:	bl	19fe0 <__assert_fail@plt+0x8400>
   18f24:	b	18de8 <__assert_fail@plt+0x7208>
   18f28:	movw	r1, #49668	; 0xc204
   18f2c:	mov	r0, #3
   18f30:	movt	r1, #2
   18f34:	mov	r2, r6
   18f38:	bl	19fe0 <__assert_fail@plt+0x8400>
   18f3c:	b	18e58 <__assert_fail@plt+0x7278>
   18f40:	bl	119f4 <__errno_location@plt>
   18f44:	ldr	r5, [r0]
   18f48:	rsb	r5, r5, #0
   18f4c:	ldr	ip, [sp, #40]	; 0x28
   18f50:	ldr	r0, [ip, #24]
   18f54:	bl	1a874 <__assert_fail@plt+0x8c94>
   18f58:	mov	r0, r5
   18f5c:	b	17cc8 <__assert_fail@plt+0x60e8>
   18f60:	add	r1, sp, #37888	; 0x9400
   18f64:	movw	r2, #27592	; 0x6bc8
   18f68:	add	r1, r1, #152	; 0x98
   18f6c:	movt	r2, #65535	; 0xffff
   18f70:	movw	r3, #27596	; 0x6bcc
   18f74:	movt	r3, #65535	; 0xffff
   18f78:	ldr	r2, [r1, r2]
   18f7c:	ldr	r0, [r1, r3]
   18f80:	cmp	r2, #0
   18f84:	beq	18428 <__assert_fail@plt+0x6848>
   18f88:	movw	fp, #27600	; 0x6bd0
   18f8c:	movt	fp, #65535	; 0xffff
   18f90:	mov	sl, r6
   18f94:	ldr	r0, [r0, sl, lsl #2]
   18f98:	add	r2, sp, #37888	; 0x9400
   18f9c:	add	r2, r2, #152	; 0x98
   18fa0:	movw	r1, #52052	; 0xcb54
   18fa4:	add	r8, r0, #12
   18fa8:	movt	r1, #2
   18fac:	str	r0, [sp, #48]	; 0x30
   18fb0:	mov	r3, #0
   18fb4:	mov	r0, r8
   18fb8:	str	r3, [r2, fp]
   18fbc:	bl	11b44 <fopen64@plt>
   18fc0:	subs	r6, r0, #0
   18fc4:	bne	18fd4 <__assert_fail@plt+0x73f4>
   18fc8:	b	197c4 <__assert_fail@plt+0x7be4>
   18fcc:	mov	r0, r5
   18fd0:	bl	117c0 <free@plt>
   18fd4:	mov	r0, r6
   18fd8:	add	r1, sp, #104	; 0x68
   18fdc:	bl	1b600 <__assert_fail@plt+0x9a20>
   18fe0:	subs	r5, r0, #0
   18fe4:	beq	190e0 <__assert_fail@plt+0x7500>
   18fe8:	ldrb	r3, [r5]
   18fec:	cmp	r3, #0
   18ff0:	cmpne	r3, #35	; 0x23
   18ff4:	beq	18fcc <__assert_fail@plt+0x73ec>
   18ff8:	movw	r1, #49784	; 0xc278
   18ffc:	add	r2, sp, #108	; 0x6c
   19000:	movt	r1, #2
   19004:	bl	11808 <__strtok_r@plt>
   19008:	subs	r7, r0, #0
   1900c:	beq	18fcc <__assert_fail@plt+0x73ec>
   19010:	movw	r1, #49788	; 0xc27c
   19014:	movt	r1, #2
   19018:	bl	11754 <strcmp@plt>
   1901c:	cmp	r0, #0
   19020:	bne	19058 <__assert_fail@plt+0x7478>
   19024:	add	lr, sp, #920	; 0x398
   19028:	add	r7, lr, #4064	; 0xfe0
   1902c:	b	19038 <__assert_fail@plt+0x7458>
   19030:	mov	r0, r7
   19034:	bl	16c50 <__assert_fail@plt+0x5070>
   19038:	movw	r1, #49784	; 0xc278
   1903c:	mov	r0, #0
   19040:	movt	r1, #2
   19044:	add	r2, sp, #108	; 0x6c
   19048:	bl	11808 <__strtok_r@plt>
   1904c:	subs	r1, r0, #0
   19050:	bne	19030 <__assert_fail@plt+0x7450>
   19054:	b	18fcc <__assert_fail@plt+0x73ec>
   19058:	movw	r1, #49796	; 0xc284
   1905c:	mov	r0, r7
   19060:	movt	r1, #2
   19064:	bl	11754 <strcmp@plt>
   19068:	subs	r9, r0, #0
   1906c:	beq	19150 <__assert_fail@plt+0x7570>
   19070:	movw	r1, #47556	; 0xb9c4
   19074:	mov	r0, r7
   19078:	movt	r1, #2
   1907c:	bl	11754 <strcmp@plt>
   19080:	subs	r3, r0, #0
   19084:	beq	191ec <__assert_fail@plt+0x760c>
   19088:	movw	r1, #50000	; 0xc350
   1908c:	mov	r0, r7
   19090:	movt	r1, #2
   19094:	bl	11754 <strcmp@plt>
   19098:	cmp	r0, #0
   1909c:	beq	190b8 <__assert_fail@plt+0x74d8>
   190a0:	movw	r1, #50008	; 0xc358
   190a4:	mov	r0, r7
   190a8:	movt	r1, #2
   190ac:	bl	11754 <strcmp@plt>
   190b0:	cmp	r0, #0
   190b4:	bne	19128 <__assert_fail@plt+0x7548>
   190b8:	add	ip, sp, #37888	; 0x9400
   190bc:	movw	r1, #50024	; 0xc368
   190c0:	add	ip, ip, #152	; 0x98
   190c4:	movt	r1, #2
   190c8:	mov	r0, #6
   190cc:	mov	r2, r8
   190d0:	ldr	r3, [ip, fp]
   190d4:	str	r7, [sp]
   190d8:	bl	19fe0 <__assert_fail@plt+0x8400>
   190dc:	b	18fcc <__assert_fail@plt+0x73ec>
   190e0:	mov	r0, r6
   190e4:	bl	11a84 <fclose@plt>
   190e8:	ldr	r0, [sp, #48]	; 0x30
   190ec:	add	sl, sl, #1
   190f0:	bl	117c0 <free@plt>
   190f4:	add	ip, sp, #37888	; 0x9400
   190f8:	movw	r3, #27592	; 0x6bc8
   190fc:	add	ip, ip, #152	; 0x98
   19100:	movt	r3, #65535	; 0xffff
   19104:	ldr	r3, [ip, r3]
   19108:	cmp	sl, r3
   1910c:	bcs	19280 <__assert_fail@plt+0x76a0>
   19110:	add	r1, sp, #37888	; 0x9400
   19114:	movw	r3, #27596	; 0x6bcc
   19118:	add	r1, r1, #152	; 0x98
   1911c:	movt	r3, #65535	; 0xffff
   19120:	ldr	r0, [r1, r3]
   19124:	b	18f94 <__assert_fail@plt+0x73b4>
   19128:	add	lr, sp, #37888	; 0x9400
   1912c:	movw	r1, #50064	; 0xc390
   19130:	add	lr, lr, #152	; 0x98
   19134:	movt	r1, #2
   19138:	mov	r0, #3
   1913c:	mov	r2, r8
   19140:	ldr	r3, [lr, fp]
   19144:	str	r7, [sp]
   19148:	bl	19fe0 <__assert_fail@plt+0x8400>
   1914c:	b	18fcc <__assert_fail@plt+0x73ec>
   19150:	add	r2, sp, #108	; 0x6c
   19154:	movw	r1, #49784	; 0xc278
   19158:	movt	r1, #2
   1915c:	bl	11808 <__strtok_r@plt>
   19160:	add	r2, sp, #108	; 0x6c
   19164:	movw	r1, #49784	; 0xc278
   19168:	movt	r1, #2
   1916c:	str	r0, [sp, #64]	; 0x40
   19170:	mov	r0, r9
   19174:	bl	11808 <__strtok_r@plt>
   19178:	add	r2, sp, #108	; 0x6c
   1917c:	movw	r1, #49784	; 0xc278
   19180:	movt	r1, #2
   19184:	str	r0, [sp, #60]	; 0x3c
   19188:	mov	r0, r9
   1918c:	bl	11808 <__strtok_r@plt>
   19190:	ldr	r1, [sp, #60]	; 0x3c
   19194:	mov	r9, r0
   19198:	ldr	r0, [sp, #64]	; 0x40
   1919c:	cmp	r1, #0
   191a0:	cmpne	r0, #0
   191a4:	beq	19128 <__assert_fail@plt+0x7548>
   191a8:	cmp	r9, #0
   191ac:	beq	19128 <__assert_fail@plt+0x7548>
   191b0:	add	r0, sp, #872	; 0x368
   191b4:	bl	16e98 <__assert_fail@plt+0x52b8>
   191b8:	cmp	r0, #0
   191bc:	bne	19700 <__assert_fail@plt+0x7b20>
   191c0:	add	r2, sp, #37888	; 0x9400
   191c4:	ldr	ip, [sp, #60]	; 0x3c
   191c8:	add	r2, r2, #152	; 0x98
   191cc:	movw	r1, #49808	; 0xc290
   191d0:	mov	r0, #6
   191d4:	movt	r1, #2
   191d8:	ldr	r3, [r2, fp]
   191dc:	mov	r2, r8
   191e0:	str	ip, [sp]
   191e4:	bl	19fe0 <__assert_fail@plt+0x8400>
   191e8:	b	18fcc <__assert_fail@plt+0x73ec>
   191ec:	add	r2, sp, #108	; 0x6c
   191f0:	movw	r1, #49784	; 0xc278
   191f4:	movt	r1, #2
   191f8:	str	r3, [sp, #28]
   191fc:	bl	11808 <__strtok_r@plt>
   19200:	ldr	r3, [sp, #28]
   19204:	add	r2, sp, #108	; 0x6c
   19208:	movw	r1, #49784	; 0xc278
   1920c:	movt	r1, #2
   19210:	mov	r9, r0
   19214:	mov	r0, r3
   19218:	bl	11808 <__strtok_r@plt>
   1921c:	cmp	r9, #0
   19220:	cmpne	r0, #0
   19224:	str	r0, [sp, #60]	; 0x3c
   19228:	beq	19128 <__assert_fail@plt+0x7548>
   1922c:	add	r0, sp, #872	; 0x368
   19230:	mov	r1, r9
   19234:	bl	16e98 <__assert_fail@plt+0x52b8>
   19238:	cmp	r0, #0
   1923c:	bne	19824 <__assert_fail@plt+0x7c44>
   19240:	add	r1, sp, #37888	; 0x9400
   19244:	mov	r0, #6
   19248:	add	r1, r1, #152	; 0x98
   1924c:	mov	r2, r8
   19250:	ldr	r3, [r1, fp]
   19254:	movw	r1, #49904	; 0xc2f0
   19258:	str	r9, [sp]
   1925c:	movt	r1, #2
   19260:	bl	19fe0 <__assert_fail@plt+0x8400>
   19264:	b	18fcc <__assert_fail@plt+0x73ec>
   19268:	movw	r1, #50364	; 0xc4bc
   1926c:	ldr	r2, [r7, #4]
   19270:	mov	r0, #7
   19274:	movt	r1, #2
   19278:	bl	19fe0 <__assert_fail@plt+0x8400>
   1927c:	b	188d4 <__assert_fail@plt+0x6cf4>
   19280:	add	r2, sp, #37888	; 0x9400
   19284:	movw	r3, #27596	; 0x6bcc
   19288:	add	r2, r2, #152	; 0x98
   1928c:	movt	r3, #65535	; 0xffff
   19290:	ldr	r0, [r2, r3]
   19294:	b	18428 <__assert_fail@plt+0x6848>
   19298:	bl	119f4 <__errno_location@plt>
   1929c:	ldr	r0, [r0]
   192a0:	bl	11928 <strerror@plt>
   192a4:	movw	r1, #49116	; 0xbfdc
   192a8:	movt	r1, #2
   192ac:	mov	r2, r0
   192b0:	mov	r0, #2
   192b4:	bl	19fe0 <__assert_fail@plt+0x8400>
   192b8:	b	17cf4 <__assert_fail@plt+0x6114>
   192bc:	str	r2, [sp, #80]	; 0x50
   192c0:	ldr	r0, [sp, #84]	; 0x54
   192c4:	mov	r8, #0
   192c8:	ldr	r1, [sp, #80]	; 0x50
   192cc:	ldr	r2, [sp, #64]	; 0x40
   192d0:	sub	r3, r0, #1
   192d4:	uxth	r3, r3
   192d8:	str	r3, [sp, #84]	; 0x54
   192dc:	strh	r1, [r2]
   192e0:	mov	r3, #1
   192e4:	add	r1, r1, #1
   192e8:	str	r3, [sp, #56]	; 0x38
   192ec:	str	r1, [sp, #80]	; 0x50
   192f0:	ldr	r0, [sp, #56]	; 0x38
   192f4:	ldr	r1, [sp, #40]	; 0x28
   192f8:	sub	r0, r0, #1
   192fc:	ldr	r2, [sp, #64]	; 0x40
   19300:	str	r0, [sp, #56]	; 0x38
   19304:	lsl	r7, r0, #1
   19308:	ldr	r3, [r1, #8]
   1930c:	mov	r0, #7
   19310:	movw	r1, #50788	; 0xc664
   19314:	ldrh	r6, [r2, r7]
   19318:	movt	r1, #2
   1931c:	ldr	sl, [r3, r6, lsl #2]
   19320:	lsl	r3, r6, #1
   19324:	ldrh	ip, [r5, r3]
   19328:	add	r3, sl, #61	; 0x3d
   1932c:	str	r3, [sp, #48]	; 0x30
   19330:	ldr	r2, [sp, #48]	; 0x30
   19334:	ldrb	r3, [sl, #60]	; 0x3c
   19338:	str	ip, [sp]
   1933c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19340:	ldrb	r3, [sl, #60]	; 0x3c
   19344:	cmp	r3, #0
   19348:	beq	19494 <__assert_fail@plt+0x78b4>
   1934c:	subs	r3, r8, #1
   19350:	bcc	19810 <__assert_fail@plt+0x7c30>
   19354:	ldr	ip, [sp, #40]	; 0x28
   19358:	lsl	r1, r3, #1
   1935c:	ldr	lr, [sp, #60]	; 0x3c
   19360:	ldr	fp, [ip, #8]
   19364:	ldrh	r3, [lr, r1]
   19368:	ldr	r3, [fp, r3, lsl #2]
   1936c:	cmp	sl, r3
   19370:	ldr	r3, [r3, #44]	; 0x2c
   19374:	sub	r2, r3, #1
   19378:	beq	19804 <__assert_fail@plt+0x7c24>
   1937c:	ldr	r0, [sp, #60]	; 0x3c
   19380:	mov	r7, #1
   19384:	add	r1, r0, r1
   19388:	b	193ac <__assert_fail@plt+0x77cc>
   1938c:	ldrh	r3, [r1, #-2]!
   19390:	add	r7, r7, #1
   19394:	ldr	r3, [fp, r3, lsl #2]
   19398:	cmp	sl, r3
   1939c:	ldr	r3, [r3, #44]	; 0x2c
   193a0:	sub	r0, r3, #1
   193a4:	add	r2, r0, r2
   193a8:	beq	19514 <__assert_fail@plt+0x7934>
   193ac:	cmp	r7, r8
   193b0:	bne	1938c <__assert_fail@plt+0x77ac>
   193b4:	lsl	r1, r7, #2
   193b8:	add	r0, r1, #1
   193bc:	rsb	r7, r7, r8
   193c0:	add	r0, r0, r2
   193c4:	bl	11910 <malloc@plt>
   193c8:	cmp	r7, r8
   193cc:	mov	r9, r0
   193d0:	bge	198c0 <__assert_fail@plt+0x7ce0>
   193d4:	sub	ip, r7, #-2147483647	; 0x80000001
   193d8:	ldr	r1, [sp, #60]	; 0x3c
   193dc:	mov	r3, #0
   193e0:	str	r4, [sp, #68]	; 0x44
   193e4:	add	ip, r1, ip, lsl #1
   193e8:	str	r5, [sp, #72]	; 0x48
   193ec:	mov	r4, fp
   193f0:	mov	fp, r7
   193f4:	mov	r5, ip
   193f8:	mov	r7, r3
   193fc:	ldrh	r2, [r5, #2]!
   19400:	add	r0, r9, r7
   19404:	add	fp, fp, #1
   19408:	ldr	r6, [r4, r2, lsl #2]
   1940c:	add	r1, r6, #61	; 0x3d
   19410:	ldr	r2, [r6, #44]	; 0x2c
   19414:	sub	r2, r2, #1
   19418:	bl	117e4 <memcpy@plt>
   1941c:	ldr	r2, [r6, #44]	; 0x2c
   19420:	add	r3, sp, #8192	; 0x2000
   19424:	cmp	fp, r8
   19428:	add	r7, r7, r2
   1942c:	ldr	r0, [r3, #-3200]	; 0xfffff380
   19430:	sub	r2, r7, #1
   19434:	add	r7, r7, #3
   19438:	str	r0, [r9, r2]
   1943c:	bne	193fc <__assert_fail@plt+0x781c>
   19440:	ldr	r4, [sp, #68]	; 0x44
   19444:	mov	r0, r7
   19448:	ldr	r5, [sp, #72]	; 0x48
   1944c:	ldr	r1, [sp, #48]	; 0x30
   19450:	add	r0, r9, r0
   19454:	ldr	r2, [sl, #44]	; 0x2c
   19458:	bl	117e4 <memcpy@plt>
   1945c:	movw	r1, #50836	; 0xc694
   19460:	mov	r0, #3
   19464:	movt	r1, #2
   19468:	mov	r2, r9
   1946c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19470:	mov	r0, r9
   19474:	bl	117c0 <free@plt>
   19478:	ldr	r3, [sp, #56]	; 0x38
   1947c:	cmp	r3, #0
   19480:	bne	192f0 <__assert_fail@plt+0x7710>
   19484:	ldr	r0, [sp, #84]	; 0x54
   19488:	cmp	r0, #0
   1948c:	bne	18af4 <__assert_fail@plt+0x6f14>
   19490:	b	18b3c <__assert_fail@plt+0x6f5c>
   19494:	ldr	r0, [sl, #28]
   19498:	mov	ip, #1
   1949c:	strb	ip, [sl, #60]	; 0x3c
   194a0:	cmp	r0, #0
   194a4:	beq	19478 <__assert_fail@plt+0x7898>
   194a8:	ldr	ip, [sl, #24]
   194ac:	lsl	r3, r8, #1
   194b0:	ldr	lr, [sp, #60]	; 0x3c
   194b4:	add	r8, r8, #1
   194b8:	add	r0, ip, r0, lsl #2
   194bc:	cmp	ip, r0
   194c0:	strh	r6, [lr, r3]
   194c4:	bcs	19478 <__assert_fail@plt+0x7898>
   194c8:	ldr	r1, [sp, #64]	; 0x40
   194cc:	mov	r3, ip
   194d0:	add	r7, r1, r7
   194d4:	ldr	r2, [r3], #4
   194d8:	cmp	r0, r3
   194dc:	ldrh	r1, [r2, #56]	; 0x38
   194e0:	lsl	r2, r1, #1
   194e4:	strh	r1, [r7], #2
   194e8:	ldrh	r1, [r5, r2]
   194ec:	sub	r1, r1, #1
   194f0:	strh	r1, [r5, r2]
   194f4:	bhi	194d4 <__assert_fail@plt+0x78f4>
   194f8:	ldr	r2, [sp, #56]	; 0x38
   194fc:	mvn	r3, ip
   19500:	add	r3, r3, r0
   19504:	add	r3, r2, r3, lsr #2
   19508:	add	r3, r3, #1
   1950c:	str	r3, [sp, #56]	; 0x38
   19510:	b	19478 <__assert_fail@plt+0x7898>
   19514:	lsl	r1, r7, #2
   19518:	add	r2, r2, r3
   1951c:	sub	r2, r2, #1
   19520:	b	193b8 <__assert_fail@plt+0x77d8>
   19524:	add	r3, sp, #920	; 0x398
   19528:	movw	r1, #49256	; 0xc068
   1952c:	sub	r2, r3, #44	; 0x2c
   19530:	mov	r0, #2
   19534:	movt	r1, #2
   19538:	bl	19fe0 <__assert_fail@plt+0x8400>
   1953c:	b	17cf4 <__assert_fail@plt+0x6114>
   19540:	ldr	r0, [sp, #40]	; 0x28
   19544:	bl	16e18 <__assert_fail@plt+0x5238>
   19548:	movw	r1, #49532	; 0xc17c
   1954c:	ldr	r2, [sp, #68]	; 0x44
   19550:	mov	r0, #7
   19554:	movt	r1, #2
   19558:	bl	19fe0 <__assert_fail@plt+0x8400>
   1955c:	ldr	r0, [sp, #60]	; 0x3c
   19560:	bl	11a84 <fclose@plt>
   19564:	b	18324 <__assert_fail@plt+0x6744>
   19568:	movw	r1, #50208	; 0xc420
   1956c:	mov	r0, #7
   19570:	movt	r1, #2
   19574:	ldr	r2, [r7, #4]
   19578:	bl	19fe0 <__assert_fail@plt+0x8400>
   1957c:	b	186b4 <__assert_fail@plt+0x6ad4>
   19580:	movw	r1, #48004	; 0xbb84
   19584:	mov	r0, #2
   19588:	movt	r1, #2
   1958c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19590:	b	17cf4 <__assert_fail@plt+0x6114>
   19594:	movw	r3, #61956	; 0xf204
   19598:	movt	r3, #3
   1959c:	movw	r0, #47980	; 0xbb6c
   195a0:	mov	r1, #1
   195a4:	ldr	r3, [r3]
   195a8:	movt	r0, #2
   195ac:	mov	r2, #21
   195b0:	bl	1188c <fwrite@plt>
   195b4:	b	17cf4 <__assert_fail@plt+0x6114>
   195b8:	mov	r0, r6
   195bc:	mov	r2, r1
   195c0:	bl	11b68 <fseek@plt>
   195c4:	rsb	r5, r5, #0
   195c8:	mov	r7, #0
   195cc:	b	195d4 <__assert_fail@plt+0x79f4>
   195d0:	add	r5, r5, #1
   195d4:	add	r0, sp, #13440	; 0x3480
   195d8:	mov	r1, #4096	; 0x1000
   195dc:	add	r0, r0, #20
   195e0:	mov	r2, r6
   195e4:	bl	117cc <fgets@plt>
   195e8:	cmp	r0, #0
   195ec:	beq	1963c <__assert_fail@plt+0x7a5c>
   195f0:	add	r0, sp, #13440	; 0x3480
   195f4:	add	r0, r0, #20
   195f8:	bl	119a0 <strlen@plt>
   195fc:	cmp	r0, #0
   19600:	beq	195d0 <__assert_fail@plt+0x79f0>
   19604:	add	r1, sp, #37888	; 0x9400
   19608:	ldr	r2, [sp, #40]	; 0x28
   1960c:	add	r1, r1, #152	; 0x98
   19610:	add	r3, r1, r0
   19614:	add	r1, sp, #13440	; 0x3480
   19618:	sub	r3, r3, #24576	; 0x6000
   1961c:	ldr	r0, [r2, #24]
   19620:	sub	r3, r3, #4
   19624:	add	r1, r1, #20
   19628:	strb	r7, [r3, #-1]
   1962c:	bl	1aca0 <__assert_fail@plt+0x90c0>
   19630:	cmp	r0, #0
   19634:	strne	r5, [r0, #48]	; 0x30
   19638:	b	195d0 <__assert_fail@plt+0x79f0>
   1963c:	add	r3, sp, #152	; 0x98
   19640:	movw	r1, #20404	; 0x4fb4
   19644:	sub	r0, r3, #12
   19648:	movt	r1, #1
   1964c:	bl	1a7f4 <__assert_fail@plt+0x8c14>
   19650:	ldr	ip, [sp, #40]	; 0x28
   19654:	ldr	r0, [ip, #12]
   19658:	cmp	r0, #0
   1965c:	beq	185d4 <__assert_fail@plt+0x69f4>
   19660:	ldr	r2, [ip, #8]
   19664:	mov	r3, #0
   19668:	sub	r2, r2, #4
   1966c:	ldr	r1, [r2, #4]!
   19670:	strh	r3, [r1, #56]	; 0x38
   19674:	add	r3, r3, #1
   19678:	cmp	r3, r0
   1967c:	bne	1966c <__assert_fail@plt+0x7a8c>
   19680:	b	185d4 <__assert_fail@plt+0x69f4>
   19684:	movw	r1, #50120	; 0xc3c8
   19688:	mov	r2, r9
   1968c:	mov	r0, #2
   19690:	movt	r1, #2
   19694:	bl	19fe0 <__assert_fail@plt+0x8400>
   19698:	b	183d0 <__assert_fail@plt+0x67f0>
   1969c:	rsb	r0, r0, #0
   196a0:	bl	11928 <strerror@plt>
   196a4:	movw	r1, #47888	; 0xbb10
   196a8:	mov	r2, r9
   196ac:	movt	r1, #2
   196b0:	mov	r3, r0
   196b4:	mov	r0, #2
   196b8:	bl	19fe0 <__assert_fail@plt+0x8400>
   196bc:	add	ip, sp, #37888	; 0x9400
   196c0:	movw	r3, #27872	; 0x6ce0
   196c4:	add	ip, ip, #152	; 0x98
   196c8:	movt	r3, #65535	; 0xffff
   196cc:	ldr	r0, [ip, r3]
   196d0:	bl	20b98 <__assert_fail@plt+0xefb8>
   196d4:	b	183d0 <__assert_fail@plt+0x67f0>
   196d8:	rsb	r0, r0, #0
   196dc:	bl	11928 <strerror@plt>
   196e0:	movw	r1, #51148	; 0xc7cc
   196e4:	movt	r1, #2
   196e8:	mov	r2, r0
   196ec:	mov	r0, #2
   196f0:	bl	19fe0 <__assert_fail@plt+0x8400>
   196f4:	b	183d0 <__assert_fail@plt+0x67f0>
   196f8:	mov	r0, r5
   196fc:	b	186b0 <__assert_fail@plt+0x6ad0>
   19700:	ldr	r0, [sp, #64]	; 0x40
   19704:	bl	119a0 <strlen@plt>
   19708:	str	r0, [sp, #60]	; 0x3c
   1970c:	mov	r0, r9
   19710:	bl	119a0 <strlen@plt>
   19714:	ldr	ip, [sp, #60]	; 0x3c
   19718:	mov	r3, r0
   1971c:	add	r0, ip, r0
   19720:	add	r0, r0, #10
   19724:	str	r3, [sp, #28]
   19728:	bl	11910 <malloc@plt>
   1972c:	ldr	r3, [sp, #28]
   19730:	subs	r7, r0, #0
   19734:	beq	19d64 <__assert_fail@plt+0x8184>
   19738:	add	r0, r7, #8
   1973c:	mov	r1, r9
   19740:	mov	r2, r3
   19744:	add	ip, r3, #1
   19748:	mov	r9, r0
   1974c:	str	ip, [sp, #32]
   19750:	str	r3, [sp, #28]
   19754:	bl	117e4 <memcpy@plt>
   19758:	ldr	r3, [sp, #28]
   1975c:	mov	lr, #47	; 0x2f
   19760:	ldr	r1, [sp, #64]	; 0x40
   19764:	add	r2, r7, r3
   19768:	add	r0, r3, #9
   1976c:	add	r0, r7, r0
   19770:	strb	lr, [r2, #8]
   19774:	ldr	r2, [sp, #60]	; 0x3c
   19778:	bl	117e4 <memcpy@plt>
   1977c:	ldr	ip, [sp, #32]
   19780:	ldr	r3, [sp, #60]	; 0x3c
   19784:	movw	r1, #49884	; 0xc2dc
   19788:	mov	lr, #0
   1978c:	mov	r2, r9
   19790:	add	ip, ip, r3
   19794:	mov	r0, #7
   19798:	add	r3, r7, ip
   1979c:	movt	r1, #2
   197a0:	strb	lr, [r3, #8]
   197a4:	str	ip, [r7, #4]
   197a8:	bl	19fe0 <__assert_fail@plt+0x8400>
   197ac:	add	r0, sp, #872	; 0x368
   197b0:	add	r3, r0, #4096	; 0x1000
   197b4:	ldr	r2, [r3, #12]
   197b8:	str	r7, [r3, #12]
   197bc:	str	r2, [r7]
   197c0:	b	18fcc <__assert_fail@plt+0x73ec>
   197c4:	movw	r1, #49764	; 0xc264
   197c8:	mov	r2, r8
   197cc:	mov	r0, #3
   197d0:	movt	r1, #2
   197d4:	bl	19fe0 <__assert_fail@plt+0x8400>
   197d8:	b	190e8 <__assert_fail@plt+0x7508>
   197dc:	bl	119f4 <__errno_location@plt>
   197e0:	add	r3, sp, #920	; 0x398
   197e4:	movw	r1, #47932	; 0xbb3c
   197e8:	sub	r2, r3, #44	; 0x2c
   197ec:	movt	r1, #2
   197f0:	ldr	r5, [r0]
   197f4:	mov	r0, #3
   197f8:	rsb	r5, r5, #0
   197fc:	bl	19fe0 <__assert_fail@plt+0x8400>
   19800:	b	18068 <__assert_fail@plt+0x6488>
   19804:	mov	r1, #4
   19808:	mov	r7, #1
   1980c:	b	19518 <__assert_fail@plt+0x7938>
   19810:	mov	r0, #1
   19814:	bl	11910 <malloc@plt>
   19818:	mov	r9, r0
   1981c:	mov	r0, #0
   19820:	b	1944c <__assert_fail@plt+0x786c>
   19824:	ldr	r0, [sp, #60]	; 0x3c
   19828:	bl	119a0 <strlen@plt>
   1982c:	mov	r9, r0
   19830:	add	r0, r0, #9
   19834:	bl	11910 <malloc@plt>
   19838:	subs	r7, r0, #0
   1983c:	beq	19d2c <__assert_fail@plt+0x814c>
   19840:	add	r3, r7, #8
   19844:	ldr	r1, [sp, #60]	; 0x3c
   19848:	add	r2, r9, #1
   1984c:	mov	r0, r3
   19850:	bl	117e4 <memcpy@plt>
   19854:	movw	r1, #49980	; 0xc33c
   19858:	str	r9, [r7, #4]
   1985c:	movt	r1, #2
   19860:	mov	r2, r0
   19864:	mov	r0, #7
   19868:	bl	19fe0 <__assert_fail@plt+0x8400>
   1986c:	add	r2, sp, #872	; 0x368
   19870:	add	r3, r2, #4096	; 0x1000
   19874:	ldr	r2, [r3, #20]
   19878:	str	r7, [r3, #20]
   1987c:	str	r2, [r7]
   19880:	b	18fcc <__assert_fail@plt+0x73ec>
   19884:	add	r0, sp, #872	; 0x368
   19888:	movw	r3, #4106	; 0x100a
   1988c:	ldrb	r3, [r0, r3]
   19890:	uxtb	r3, r3
   19894:	cmp	r3, #0
   19898:	beq	18324 <__assert_fail@plt+0x6744>
   1989c:	movw	r1, #49556	; 0xc194
   198a0:	mov	r0, #4
   198a4:	movt	r1, #2
   198a8:	bl	19fe0 <__assert_fail@plt+0x8400>
   198ac:	add	r1, sp, #872	; 0x368
   198b0:	movw	r3, #4106	; 0x100a
   198b4:	mov	r2, #0
   198b8:	strb	r2, [r1, r3]
   198bc:	b	18324 <__assert_fail@plt+0x6744>
   198c0:	mov	r0, #0
   198c4:	b	1944c <__assert_fail@plt+0x786c>
   198c8:	bl	119f4 <__errno_location@plt>
   198cc:	movw	r1, #49312	; 0xc0a0
   198d0:	ldr	r2, [sp, #60]	; 0x3c
   198d4:	movt	r1, #2
   198d8:	ldr	r5, [r0]
   198dc:	mov	r0, #7
   198e0:	rsb	r9, r5, #0
   198e4:	bl	19fe0 <__assert_fail@plt+0x8400>
   198e8:	cmp	r9, #0
   198ec:	bge	18324 <__assert_fail@plt+0x6744>
   198f0:	mov	r0, r5
   198f4:	bl	11928 <strerror@plt>
   198f8:	movw	r1, #49428	; 0xc114
   198fc:	ldr	r2, [sp, #60]	; 0x3c
   19900:	movt	r1, #2
   19904:	mov	r3, r0
   19908:	mov	r0, #2
   1990c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19910:	b	17cf4 <__assert_fail@plt+0x6114>
   19914:	bl	119f4 <__errno_location@plt>
   19918:	ldr	r3, [sp, #40]	; 0x28
   1991c:	ldr	r5, [r0]
   19920:	ldr	r0, [r3, #28]
   19924:	rsb	r5, r5, #0
   19928:	bl	1a874 <__assert_fail@plt+0x8c94>
   1992c:	b	18f4c <__assert_fail@plt+0x736c>
   19930:	add	r7, r8, r7, lsl #2
   19934:	cmp	r8, r7
   19938:	movcc	r6, r8
   1993c:	bcs	19968 <__assert_fail@plt+0x7d88>
   19940:	ldr	r0, [r6], #4
   19944:	ldr	r3, [r0, #28]
   19948:	cmp	r3, #1
   1994c:	bls	19960 <__assert_fail@plt+0x7d80>
   19950:	movw	r1, #20428	; 0x4fcc
   19954:	add	r0, r0, #24
   19958:	movt	r1, #1
   1995c:	bl	1a7f4 <__assert_fail@plt+0x8c14>
   19960:	cmp	r7, r6
   19964:	bhi	19940 <__assert_fail@plt+0x7d60>
   19968:	movw	r1, #50856	; 0xc6a8
   1996c:	ldr	r2, [sp, #76]	; 0x4c
   19970:	mov	r0, #7
   19974:	movt	r1, #2
   19978:	bl	19fe0 <__assert_fail@plt+0x8400>
   1997c:	mov	r0, r5
   19980:	bl	117c0 <free@plt>
   19984:	add	lr, sp, #37888	; 0x9400
   19988:	movw	r3, #27628	; 0x6bec
   1998c:	ldr	ip, [sp, #56]	; 0x38
   19990:	movt	r3, #65535	; 0xffff
   19994:	add	lr, lr, #152	; 0x98
   19998:	cmp	ip, #0
   1999c:	ldr	r3, [lr, r3]
   199a0:	add	r3, r3, #4
   199a4:	str	r3, [sp, #48]	; 0x30
   199a8:	beq	19c78 <__assert_fail@plt+0x8098>
   199ac:	movw	r6, #62032	; 0xf250
   199b0:	movt	r6, #3
   199b4:	mvn	r7, #0
   199b8:	movw	r3, #45744	; 0xb2b0
   199bc:	movt	r3, #2
   199c0:	str	r3, [r6]
   199c4:	movw	r5, #45744	; 0xb2b0
   199c8:	movw	sl, #32508	; 0x7efc
   199cc:	movw	ip, #50908	; 0xc6dc
   199d0:	movt	r5, #2
   199d4:	movt	ip, #2
   199d8:	movt	sl, #65535	; 0xffff
   199dc:	str	ip, [sp, #60]	; 0x3c
   199e0:	mov	fp, #0
   199e4:	b	19a58 <__assert_fail@plt+0x7e78>
   199e8:	mov	r0, r5
   199ec:	bl	117d8 <ferror@plt>
   199f0:	mov	r9, r0
   199f4:	mov	r0, r5
   199f8:	bl	11a84 <fclose@plt>
   199fc:	cmp	r8, #0
   19a00:	orr	r9, r0, r9
   19a04:	blt	19c1c <__assert_fail@plt+0x803c>
   19a08:	ldr	r5, [r6]
   19a0c:	mov	r2, #0
   19a10:	mov	r0, r7
   19a14:	ldr	r1, [r5]
   19a18:	bl	117a8 <unlinkat@plt>
   19a1c:	add	r1, sp, #4992	; 0x1380
   19a20:	ldr	r3, [r5]
   19a24:	add	r1, r1, #20
   19a28:	mov	r0, r7
   19a2c:	mov	r2, r7
   19a30:	bl	11b5c <renameat@plt>
   19a34:	cmp	r0, #0
   19a38:	bne	19be4 <__assert_fail@plt+0x8004>
   19a3c:	cmp	r9, #0
   19a40:	bne	19bb8 <__assert_fail@plt+0x7fd8>
   19a44:	ldr	r3, [r5, #8]
   19a48:	add	r5, r5, #8
   19a4c:	str	r5, [r6]
   19a50:	cmp	r3, #0
   19a54:	beq	19ba0 <__assert_fail@plt+0x7fc0>
   19a58:	add	r3, sp, #37888	; 0x9400
   19a5c:	add	r0, sp, #4992	; 0x1380
   19a60:	add	r3, r3, #152	; 0x98
   19a64:	add	r0, r0, #24
   19a68:	mov	r1, #0
   19a6c:	mov	r2, #251	; 0xfb
   19a70:	str	fp, [r3, sl]
   19a74:	bl	11a3c <memset@plt>
   19a78:	ldr	ip, [sp, #56]	; 0x38
   19a7c:	cmp	ip, #0
   19a80:	ldrne	r5, [sp, #56]	; 0x38
   19a84:	beq	19ab4 <__assert_fail@plt+0x7ed4>
   19a88:	ldr	r3, [r6]
   19a8c:	mov	r1, r5
   19a90:	ldr	r0, [sp, #40]	; 0x28
   19a94:	ldr	r3, [r3, #4]
   19a98:	blx	r3
   19a9c:	ldr	r1, [sp, #56]	; 0x38
   19aa0:	mov	r8, r0
   19aa4:	cmp	r1, r5
   19aa8:	bne	199e8 <__assert_fail@plt+0x7e08>
   19aac:	ldr	r5, [r6]
   19ab0:	b	19a44 <__assert_fail@plt+0x7e64>
   19ab4:	ldr	lr, [sp, #60]	; 0x3c
   19ab8:	add	r0, sp, #4992	; 0x1380
   19abc:	add	r0, r0, #24
   19ac0:	mov	r1, #255	; 0xff
   19ac4:	sub	r9, r0, #4
   19ac8:	mov	r3, r1
   19acc:	str	lr, [sp]
   19ad0:	mov	r2, #1
   19ad4:	ldr	ip, [r5]
   19ad8:	mov	r0, r9
   19adc:	str	ip, [sp, #4]
   19ae0:	bl	11bd4 <__snprintf_chk@plt>
   19ae4:	mov	r0, r7
   19ae8:	mov	r1, r9
   19aec:	movw	r2, #577	; 0x241
   19af0:	mov	r3, #420	; 0x1a4
   19af4:	bl	119c4 <openat64@plt>
   19af8:	subs	r8, r0, #0
   19afc:	blt	19b3c <__assert_fail@plt+0x7f5c>
   19b00:	movw	r1, #50944	; 0xc700
   19b04:	movt	r1, #2
   19b08:	bl	1170c <fdopen@plt>
   19b0c:	subs	r5, r0, #0
   19b10:	bne	19a88 <__assert_fail@plt+0x7ea8>
   19b14:	movw	r1, #50948	; 0xc704
   19b18:	str	r9, [sp]
   19b1c:	mov	r0, #3
   19b20:	movt	r1, #2
   19b24:	mov	r2, r8
   19b28:	ldr	r3, [sp, #48]	; 0x30
   19b2c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19b30:	mov	r0, r8
   19b34:	bl	11bbc <close@plt>
   19b38:	b	19aac <__assert_fail@plt+0x7ecc>
   19b3c:	movw	r1, #577	; 0x241
   19b40:	mov	r2, #420	; 0x1a4
   19b44:	mov	r3, r9
   19b48:	stm	sp, {r1, r2}
   19b4c:	mov	r0, #3
   19b50:	movw	r1, #50916	; 0xc6e4
   19b54:	ldr	r2, [sp, #48]	; 0x30
   19b58:	movt	r1, #2
   19b5c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19b60:	b	19aac <__assert_fail@plt+0x7ecc>
   19b64:	bl	11838 <__stack_chk_fail@plt>
   19b68:	rsb	r0, r0, #0
   19b6c:	bl	11928 <strerror@plt>
   19b70:	movw	r1, #51116	; 0xc7ac
   19b74:	movt	r1, #2
   19b78:	mov	r2, r0
   19b7c:	mov	r0, #2
   19b80:	bl	19fe0 <__assert_fail@plt+0x8400>
   19b84:	b	183d0 <__assert_fail@plt+0x67f0>
   19b88:	add	r1, sp, #920	; 0x398
   19b8c:	add	r0, r1, #4064	; 0xfe0
   19b90:	movw	r1, #50112	; 0xc3c0
   19b94:	movt	r1, #2
   19b98:	bl	16c50 <__assert_fail@plt+0x5070>
   19b9c:	b	18440 <__assert_fail@plt+0x6860>
   19ba0:	mov	r5, r3
   19ba4:	cmn	r7, #1
   19ba8:	beq	182e8 <__assert_fail@plt+0x6708>
   19bac:	mov	r0, r7
   19bb0:	bl	11bbc <close@plt>
   19bb4:	b	182e8 <__assert_fail@plt+0x6708>
   19bb8:	mov	r0, #28
   19bbc:	ldr	r5, [r5]
   19bc0:	bl	11928 <strerror@plt>
   19bc4:	movw	r1, #51060	; 0xc774
   19bc8:	movt	r1, #2
   19bcc:	mov	r2, r5
   19bd0:	mov	r3, r0
   19bd4:	mov	r0, #3
   19bd8:	bl	19fe0 <__assert_fail@plt+0x8400>
   19bdc:	mvn	r5, #27
   19be0:	b	19ba4 <__assert_fail@plt+0x7fc4>
   19be4:	bl	119f4 <__errno_location@plt>
   19be8:	ldr	r2, [sp, #48]	; 0x30
   19bec:	add	r3, sp, #4992	; 0x1380
   19bf0:	movw	r1, #51028	; 0xc754
   19bf4:	add	r3, r3, #20
   19bf8:	movt	r1, #2
   19bfc:	ldr	lr, [r0]
   19c00:	mov	r0, #2
   19c04:	str	r2, [sp]
   19c08:	ldr	ip, [r5]
   19c0c:	rsb	r5, lr, #0
   19c10:	str	ip, [sp, #4]
   19c14:	bl	19fe0 <__assert_fail@plt+0x8400>
   19c18:	b	19ba4 <__assert_fail@plt+0x7fc4>
   19c1c:	add	r1, sp, #4992	; 0x1380
   19c20:	mov	r0, r7
   19c24:	mov	r2, #0
   19c28:	add	r1, r1, #20
   19c2c:	bl	117a8 <unlinkat@plt>
   19c30:	cmp	r0, #0
   19c34:	bne	19d98 <__assert_fail@plt+0x81b8>
   19c38:	ldr	r3, [r6]
   19c3c:	rsb	r0, r8, #0
   19c40:	ldr	r5, [r3]
   19c44:	bl	11928 <strerror@plt>
   19c48:	movw	r1, #50972	; 0xc71c
   19c4c:	movt	r1, #2
   19c50:	mov	r2, r5
   19c54:	mov	r3, r0
   19c58:	mov	r0, #3
   19c5c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19c60:	bl	119f4 <__errno_location@plt>
   19c64:	ldr	r5, [r0]
   19c68:	rsb	r5, r5, #0
   19c6c:	b	19ba4 <__assert_fail@plt+0x7fc4>
   19c70:	mov	r6, #0
   19c74:	b	18a8c <__assert_fail@plt+0x6eac>
   19c78:	mov	r0, r3
   19c7c:	mov	r1, ip
   19c80:	bl	118e0 <open64@plt>
   19c84:	subs	r7, r0, #0
   19c88:	blt	19d40 <__assert_fail@plt+0x8160>
   19c8c:	movw	r6, #62032	; 0xf250
   19c90:	movt	r6, #3
   19c94:	movw	r3, #45744	; 0xb2b0
   19c98:	movt	r3, #2
   19c9c:	str	r3, [r6]
   19ca0:	b	199c4 <__assert_fail@plt+0x7de4>
   19ca4:	movw	r0, #50728	; 0xc628
   19ca8:	movw	r1, #47064	; 0xb7d8
   19cac:	movw	r3, #51556	; 0xc964
   19cb0:	movt	r0, #2
   19cb4:	movt	r1, #2
   19cb8:	movw	r2, #1737	; 0x6c9
   19cbc:	movt	r3, #2
   19cc0:	bl	11be0 <__assert_fail@plt>
   19cc4:	add	r2, sp, #9344	; 0x2480
   19cc8:	movw	r1, #47120	; 0xb810
   19ccc:	add	r2, r2, #20
   19cd0:	mov	r0, #4
   19cd4:	movt	r1, #2
   19cd8:	bl	19fe0 <__assert_fail@plt+0x8400>
   19cdc:	b	185dc <__assert_fail@plt+0x69fc>
   19ce0:	bl	119f4 <__errno_location@plt>
   19ce4:	movw	r1, #49452	; 0xc12c
   19ce8:	ldr	r2, [sp, #68]	; 0x44
   19cec:	movt	r1, #2
   19cf0:	ldr	r5, [r0]
   19cf4:	mov	r0, #7
   19cf8:	rsb	r9, r5, #0
   19cfc:	bl	19fe0 <__assert_fail@plt+0x8400>
   19d00:	cmp	r9, #0
   19d04:	bge	18324 <__assert_fail@plt+0x6744>
   19d08:	mov	r0, r5
   19d0c:	bl	11928 <strerror@plt>
   19d10:	movw	r1, #49428	; 0xc114
   19d14:	ldr	r2, [sp, #68]	; 0x44
   19d18:	movt	r1, #2
   19d1c:	mov	r3, r0
   19d20:	mov	r0, #2
   19d24:	bl	19fe0 <__assert_fail@plt+0x8400>
   19d28:	b	17cf4 <__assert_fail@plt+0x6114>
   19d2c:	movw	r1, #49948	; 0xc31c
   19d30:	mov	r0, #3
   19d34:	movt	r1, #2
   19d38:	bl	19fe0 <__assert_fail@plt+0x8400>
   19d3c:	b	18fcc <__assert_fail@plt+0x73ec>
   19d40:	bl	119f4 <__errno_location@plt>
   19d44:	movw	r1, #47932	; 0xbb3c
   19d48:	ldr	r2, [sp, #48]	; 0x30
   19d4c:	movt	r1, #2
   19d50:	ldr	r5, [r0]
   19d54:	mov	r0, #2
   19d58:	rsb	r5, r5, #0
   19d5c:	bl	19fe0 <__assert_fail@plt+0x8400>
   19d60:	b	182e8 <__assert_fail@plt+0x6708>
   19d64:	movw	r1, #49852	; 0xc2bc
   19d68:	mov	r0, #3
   19d6c:	movt	r1, #2
   19d70:	bl	19fe0 <__assert_fail@plt+0x8400>
   19d74:	b	18fcc <__assert_fail@plt+0x73ec>
   19d78:	movw	r0, #50696	; 0xc608
   19d7c:	movw	r1, #47064	; 0xb7d8
   19d80:	movw	r3, #51556	; 0xc964
   19d84:	movt	r0, #2
   19d88:	movt	r1, #2
   19d8c:	movw	r2, #1708	; 0x6ac
   19d90:	movt	r3, #2
   19d94:	bl	11be0 <__assert_fail@plt>
   19d98:	add	r3, sp, #4992	; 0x1380
   19d9c:	movw	r1, #51004	; 0xc73c
   19da0:	ldr	r2, [sp, #48]	; 0x30
   19da4:	add	r3, r3, #20
   19da8:	mov	r0, #3
   19dac:	movt	r1, #2
   19db0:	bl	19fe0 <__assert_fail@plt+0x8400>
   19db4:	b	19c38 <__assert_fail@plt+0x8058>
   19db8:	movw	r1, #49604	; 0xc1c4
   19dbc:	mov	r2, r6
   19dc0:	mov	r0, #3
   19dc4:	movt	r1, #2
   19dc8:	bl	19fe0 <__assert_fail@plt+0x8400>
   19dcc:	b	18de8 <__assert_fail@plt+0x7208>
   19dd0:	mov	r5, r0
   19dd4:	mov	r0, r4
   19dd8:	bl	117c0 <free@plt>
   19ddc:	ldr	r0, [sp, #44]	; 0x2c
   19de0:	bl	117c0 <free@plt>
   19de4:	mov	r0, r5
   19de8:	bl	11b8c <_Unwind_Resume@plt>
   19dec:	sub	r3, r1, #2
   19df0:	push	{r4, lr}
   19df4:	mov	r4, r0
   19df8:	sub	sp, sp, #8
   19dfc:	cmp	r3, #5
   19e00:	ldrls	pc, [pc, r3, lsl #2]
   19e04:	b	19e98 <__assert_fail@plt+0x82b8>
   19e08:	andeq	r9, r1, r4, lsl #29
   19e0c:	andeq	r9, r1, r0, lsr #28
   19e10:	andeq	r9, r1, r4, lsr lr
   19e14:	andeq	r9, r1, r8, asr #28
   19e18:	andeq	r9, r1, ip, asr lr
   19e1c:	andeq	r9, r1, r0, ror lr
   19e20:	movw	r4, #51608	; 0xc998
   19e24:	movt	r4, #2
   19e28:	mov	r0, r4
   19e2c:	add	sp, sp, #8
   19e30:	pop	{r4, pc}
   19e34:	movw	r4, #51616	; 0xc9a0
   19e38:	movt	r4, #2
   19e3c:	mov	r0, r4
   19e40:	add	sp, sp, #8
   19e44:	pop	{r4, pc}
   19e48:	movw	r4, #51624	; 0xc9a8
   19e4c:	movt	r4, #2
   19e50:	mov	r0, r4
   19e54:	add	sp, sp, #8
   19e58:	pop	{r4, pc}
   19e5c:	movw	r4, #51632	; 0xc9b0
   19e60:	movt	r4, #2
   19e64:	mov	r0, r4
   19e68:	add	sp, sp, #8
   19e6c:	pop	{r4, pc}
   19e70:	movw	r4, #51640	; 0xc9b8
   19e74:	movt	r4, #2
   19e78:	mov	r0, r4
   19e7c:	add	sp, sp, #8
   19e80:	pop	{r4, pc}
   19e84:	movw	r4, #51600	; 0xc990
   19e88:	movt	r4, #2
   19e8c:	mov	r0, r4
   19e90:	add	sp, sp, #8
   19e94:	pop	{r4, pc}
   19e98:	str	r1, [sp, #4]
   19e9c:	mov	r2, #1
   19ea0:	mov	r1, #32
   19ea4:	movw	r3, #51648	; 0xc9c0
   19ea8:	movt	r3, #2
   19eac:	str	r3, [sp]
   19eb0:	mvn	r3, #0
   19eb4:	bl	11bd4 <__snprintf_chk@plt>
   19eb8:	mov	r0, r4
   19ebc:	add	sp, sp, #8
   19ec0:	pop	{r4, pc}
   19ec4:	push	{r4, r5, r6, r7, r8, lr}
   19ec8:	movw	r4, #61944	; 0xf1f8
   19ecc:	movt	r4, #3
   19ed0:	sub	sp, sp, #48	; 0x30
   19ed4:	add	r0, sp, #12
   19ed8:	mov	r8, r1
   19edc:	ldr	r3, [r4]
   19ee0:	ldr	r6, [sp, #76]	; 0x4c
   19ee4:	ldr	r5, [sp, #80]	; 0x50
   19ee8:	str	r3, [sp, #44]	; 0x2c
   19eec:	bl	19dec <__assert_fail@plt+0x820c>
   19ef0:	mov	r2, r6
   19ef4:	mov	r1, #1
   19ef8:	mov	r3, r5
   19efc:	mov	r7, r0
   19f00:	add	r0, sp, #8
   19f04:	bl	11a0c <__vasprintf_chk@plt>
   19f08:	cmp	r0, #0
   19f0c:	blt	19f5c <__assert_fail@plt+0x837c>
   19f10:	movw	r2, #62036	; 0xf254
   19f14:	movt	r2, #3
   19f18:	ldrb	r3, [r2]
   19f1c:	cmp	r3, #0
   19f20:	bne	19f74 <__assert_fail@plt+0x8394>
   19f24:	ldr	ip, [sp, #8]
   19f28:	movw	r1, #61956	; 0xf204
   19f2c:	movw	r3, #61936	; 0xf1f0
   19f30:	movt	r1, #3
   19f34:	movt	r3, #3
   19f38:	movw	r2, #51660	; 0xc9cc
   19f3c:	ldr	r0, [r1]
   19f40:	movt	r2, #2
   19f44:	ldr	r3, [r3]
   19f48:	mov	r1, #1
   19f4c:	stm	sp, {r7, ip}
   19f50:	bl	11a78 <__fprintf_chk@plt>
   19f54:	ldr	r0, [sp, #8]
   19f58:	bl	117c0 <free@plt>
   19f5c:	ldr	r2, [sp, #44]	; 0x2c
   19f60:	ldr	r3, [r4]
   19f64:	cmp	r2, r3
   19f68:	bne	19f98 <__assert_fail@plt+0x83b8>
   19f6c:	add	sp, sp, #48	; 0x30
   19f70:	pop	{r4, r5, r6, r7, r8, pc}
   19f74:	ldr	ip, [sp, #8]
   19f78:	mov	r0, r8
   19f7c:	mov	r3, r7
   19f80:	movw	r2, #51664	; 0xc9d0
   19f84:	mov	r1, #1
   19f88:	movt	r2, #2
   19f8c:	str	ip, [sp]
   19f90:	bl	11ab4 <__syslog_chk@plt>
   19f94:	b	19f54 <__assert_fail@plt+0x8374>
   19f98:	bl	11838 <__stack_chk_fail@plt>
   19f9c:	movw	r3, #62036	; 0xf254
   19fa0:	cmp	r0, #0
   19fa4:	movt	r3, #3
   19fa8:	strb	r0, [r3]
   19fac:	bxeq	lr
   19fb0:	movw	r3, #61936	; 0xf1f0
   19fb4:	movt	r3, #3
   19fb8:	mov	r1, #2
   19fbc:	mov	r2, #24
   19fc0:	ldr	r0, [r3]
   19fc4:	b	11b14 <openlog@plt>
   19fc8:	movw	r3, #62036	; 0xf254
   19fcc:	movt	r3, #3
   19fd0:	ldrb	r3, [r3]
   19fd4:	cmp	r3, #0
   19fd8:	bxeq	lr
   19fdc:	b	11958 <closelog@plt>
   19fe0:	push	{r1, r2, r3}
   19fe4:	movw	r3, #61916	; 0xf1dc
   19fe8:	movt	r3, #3
   19fec:	push	{r4, r5, lr}
   19ff0:	movw	r4, #61944	; 0xf1f8
   19ff4:	movt	r4, #3
   19ff8:	ldr	r3, [r3]
   19ffc:	sub	sp, sp, #56	; 0x38
   1a000:	mov	r5, r0
   1a004:	ldr	r1, [r4]
   1a008:	cmp	r3, r0
   1a00c:	ldr	r2, [sp, #68]	; 0x44
   1a010:	str	r1, [sp, #52]	; 0x34
   1a014:	bge	1a038 <__assert_fail@plt+0x8458>
   1a018:	ldr	r2, [sp, #52]	; 0x34
   1a01c:	ldr	r3, [r4]
   1a020:	cmp	r2, r3
   1a024:	bne	1a0f8 <__assert_fail@plt+0x8518>
   1a028:	add	sp, sp, #56	; 0x38
   1a02c:	pop	{r4, r5, lr}
   1a030:	add	sp, sp, #12
   1a034:	bx	lr
   1a038:	add	ip, sp, #72	; 0x48
   1a03c:	add	r0, sp, #12
   1a040:	mov	r1, #1
   1a044:	str	ip, [sp, #16]
   1a048:	mov	r3, ip
   1a04c:	bl	11a0c <__vasprintf_chk@plt>
   1a050:	cmp	r0, #0
   1a054:	blt	1a018 <__assert_fail@plt+0x8438>
   1a058:	ldr	r3, [sp, #12]
   1a05c:	cmp	r3, #0
   1a060:	beq	1a018 <__assert_fail@plt+0x8438>
   1a064:	add	r0, sp, #20
   1a068:	mov	r1, r5
   1a06c:	bl	19dec <__assert_fail@plt+0x820c>
   1a070:	movw	r2, #62036	; 0xf254
   1a074:	movt	r2, #3
   1a078:	ldrb	r3, [r2]
   1a07c:	cmp	r3, #0
   1a080:	bne	1a0d4 <__assert_fail@plt+0x84f4>
   1a084:	movw	r1, #61956	; 0xf204
   1a088:	movt	r1, #3
   1a08c:	ldr	ip, [sp, #12]
   1a090:	movw	r3, #61936	; 0xf1f0
   1a094:	ldr	lr, [r1]
   1a098:	movt	r3, #3
   1a09c:	movw	r2, #51660	; 0xc9cc
   1a0a0:	mov	r1, #1
   1a0a4:	ldr	r3, [r3]
   1a0a8:	movt	r2, #2
   1a0ac:	str	r0, [sp]
   1a0b0:	mov	r0, lr
   1a0b4:	str	ip, [sp, #4]
   1a0b8:	bl	11a78 <__fprintf_chk@plt>
   1a0bc:	ldr	r0, [sp, #12]
   1a0c0:	bl	117c0 <free@plt>
   1a0c4:	cmp	r5, #2
   1a0c8:	bgt	1a018 <__assert_fail@plt+0x8438>
   1a0cc:	mov	r0, #1
   1a0d0:	bl	11988 <exit@plt>
   1a0d4:	ldr	ip, [sp, #12]
   1a0d8:	mov	r3, r0
   1a0dc:	movw	r2, #51664	; 0xc9d0
   1a0e0:	mov	r0, r5
   1a0e4:	movt	r2, #2
   1a0e8:	mov	r1, #1
   1a0ec:	str	ip, [sp]
   1a0f0:	bl	11ab4 <__syslog_chk@plt>
   1a0f4:	b	1a0bc <__assert_fail@plt+0x84dc>
   1a0f8:	bl	11838 <__stack_chk_fail@plt>
   1a0fc:	movw	r3, #61916	; 0xf1dc
   1a100:	movt	r3, #3
   1a104:	push	{r4, lr}
   1a108:	mov	r4, r0
   1a10c:	str	r1, [r3]
   1a110:	bl	1bf14 <__assert_fail@plt+0xa334>
   1a114:	mov	r0, r4
   1a118:	movw	r1, #40644	; 0x9ec4
   1a11c:	mov	r2, #0
   1a120:	movt	r1, #1
   1a124:	pop	{r4, lr}
   1a128:	b	1bc8c <__assert_fail@plt+0xa0ac>
   1a12c:	push	{r3, r4, r5, lr}
   1a130:	movw	r3, #61936	; 0xf1f0
   1a134:	movt	r3, #3
   1a138:	movw	r1, #51748	; 0xca24
   1a13c:	mov	r0, #1
   1a140:	movt	r1, #2
   1a144:	ldr	r2, [r3]
   1a148:	bl	11a60 <__printf_chk@plt>
   1a14c:	ldr	r4, [pc, #48]	; 1a184 <__assert_fail@plt+0x85a4>
   1a150:	add	r5, r4, #12
   1a154:	ldr	r2, [r4, #4]!
   1a158:	movw	r1, #52032	; 0xcb40
   1a15c:	mov	r0, #1
   1a160:	movt	r1, #2
   1a164:	ldr	r3, [r2, #8]
   1a168:	cmp	r3, #0
   1a16c:	beq	1a178 <__assert_fail@plt+0x8598>
   1a170:	ldr	r2, [r2]
   1a174:	bl	11a60 <__printf_chk@plt>
   1a178:	cmp	r4, r5
   1a17c:	bne	1a154 <__assert_fail@plt+0x8574>
   1a180:	pop	{r3, r4, r5, pc}
   1a184:	muleq	r2, r4, lr
   1a188:	push	{r4, r5, lr}
   1a18c:	sub	sp, sp, #20
   1a190:	cmp	r3, #99	; 0x63
   1a194:	movw	lr, #52056	; 0xcb58
   1a198:	ldr	r4, [sp, #32]
   1a19c:	movt	lr, #2
   1a1a0:	ldr	r5, [sp, #36]	; 0x24
   1a1a4:	movw	ip, #52044	; 0xcb4c
   1a1a8:	movt	ip, #2
   1a1ac:	movne	r3, lr
   1a1b0:	str	r2, [sp]
   1a1b4:	movw	r2, #52064	; 0xcb60
   1a1b8:	moveq	r3, ip
   1a1bc:	str	r5, [sp, #12]
   1a1c0:	stmib	sp, {r3, r4}
   1a1c4:	movt	r2, #2
   1a1c8:	mov	r3, r1
   1a1cc:	mov	r1, #1
   1a1d0:	bl	11a78 <__fprintf_chk@plt>
   1a1d4:	lsr	r0, r0, #31
   1a1d8:	add	sp, sp, #20
   1a1dc:	pop	{r4, r5, pc}
   1a1e0:	push	{r4, lr}
   1a1e4:	sub	sp, sp, #16
   1a1e8:	mov	r4, r1
   1a1ec:	mov	r1, #1
   1a1f0:	ldr	lr, [sp, #24]
   1a1f4:	ldr	ip, [sp, #28]
   1a1f8:	str	r2, [sp]
   1a1fc:	movw	r2, #46812	; 0xb6dc
   1a200:	str	r3, [sp, #4]
   1a204:	movt	r2, #2
   1a208:	mov	r3, r4
   1a20c:	str	lr, [sp, #8]
   1a210:	str	ip, [sp, #12]
   1a214:	bl	11a78 <__fprintf_chk@plt>
   1a218:	lsr	r0, r0, #31
   1a21c:	add	sp, sp, #16
   1a220:	pop	{r4, pc}
   1a224:	push	{r4, r5, r6, lr}
   1a228:	mov	r1, #47	; 0x2f
   1a22c:	sub	sp, sp, #16
   1a230:	mov	r5, r0
   1a234:	mov	r0, r2
   1a238:	mov	r4, r2
   1a23c:	mov	r6, r3
   1a240:	bl	11acc <strrchr@plt>
   1a244:	cmp	r0, #0
   1a248:	beq	1a270 <__assert_fail@plt+0x8690>
   1a24c:	rsb	r3, r4, r0
   1a250:	str	r4, [sp]
   1a254:	movw	r2, #52172	; 0xcbcc
   1a258:	mov	r0, r5
   1a25c:	movt	r2, #2
   1a260:	mov	r1, #1
   1a264:	bl	11a78 <__fprintf_chk@plt>
   1a268:	cmp	r0, #0
   1a26c:	blt	1a2a8 <__assert_fail@plt+0x86c8>
   1a270:	ldr	r2, [sp, #32]
   1a274:	mov	r0, r5
   1a278:	str	r4, [sp]
   1a27c:	mov	r3, r6
   1a280:	mov	r1, #1
   1a284:	str	r2, [sp, #4]
   1a288:	ldr	r2, [sp, #36]	; 0x24
   1a28c:	str	r2, [sp, #8]
   1a290:	movw	r2, #52140	; 0xcbac
   1a294:	movt	r2, #2
   1a298:	bl	11a78 <__fprintf_chk@plt>
   1a29c:	lsr	r0, r0, #31
   1a2a0:	add	sp, sp, #16
   1a2a4:	pop	{r4, r5, r6, pc}
   1a2a8:	mov	r0, #1
   1a2ac:	add	sp, sp, #16
   1a2b0:	pop	{r4, r5, r6, pc}
   1a2b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2b8:	movw	r4, #61944	; 0xf1f8
   1a2bc:	movt	r4, #3
   1a2c0:	sub	sp, sp, #16640	; 0x4100
   1a2c4:	sub	sp, sp, #188	; 0xbc
   1a2c8:	movw	r5, #52912	; 0xceb0
   1a2cc:	ldr	r3, [r4]
   1a2d0:	movw	r8, #52196	; 0xcbe4
   1a2d4:	movw	r7, #48752	; 0xbe70
   1a2d8:	movw	r6, #61968	; 0xf210
   1a2dc:	mov	sl, r1
   1a2e0:	movt	r5, #2
   1a2e4:	add	r1, sp, #16384	; 0x4000
   1a2e8:	movt	r8, #2
   1a2ec:	movt	r7, #65535	; 0xffff
   1a2f0:	movt	r6, #3
   1a2f4:	mov	fp, r0
   1a2f8:	mov	r9, #0
   1a2fc:	str	r3, [r1, #436]	; 0x1b4
   1a300:	add	ip, sp, #16640	; 0x4100
   1a304:	add	r2, sp, #40	; 0x28
   1a308:	add	ip, ip, #184	; 0xb8
   1a30c:	str	r2, [sp]
   1a310:	movw	r3, #51684	; 0xc9e4
   1a314:	movw	r2, #52868	; 0xce84
   1a318:	movt	r3, #2
   1a31c:	movt	r2, #2
   1a320:	mov	r0, fp
   1a324:	mov	r1, sl
   1a328:	str	r9, [ip, r7]
   1a32c:	bl	11970 <getopt_long@plt>
   1a330:	cmn	r0, #1
   1a334:	beq	1a450 <__assert_fail@plt+0x8870>
   1a338:	cmp	r0, #102	; 0x66
   1a33c:	beq	1a3c0 <__assert_fail@plt+0x87e0>
   1a340:	ble	1a388 <__assert_fail@plt+0x87a8>
   1a344:	cmp	r0, #104	; 0x68
   1a348:	beq	1a35c <__assert_fail@plt+0x877c>
   1a34c:	cmp	r0, #111	; 0x6f
   1a350:	bne	1a394 <__assert_fail@plt+0x87b4>
   1a354:	ldr	r8, [r6]
   1a358:	b	1a300 <__assert_fail@plt+0x8720>
   1a35c:	bl	1a12c <__assert_fail@plt+0x854c>
   1a360:	mov	r6, #0
   1a364:	add	r1, sp, #16384	; 0x4000
   1a368:	mov	r0, r6
   1a36c:	ldr	r2, [r1, #436]	; 0x1b4
   1a370:	ldr	r3, [r4]
   1a374:	cmp	r2, r3
   1a378:	bne	1a6c4 <__assert_fail@plt+0x8ae4>
   1a37c:	add	sp, sp, #16640	; 0x4100
   1a380:	add	sp, sp, #188	; 0xbc
   1a384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a388:	cmp	r0, #63	; 0x3f
   1a38c:	moveq	r6, #1
   1a390:	beq	1a364 <__assert_fail@plt+0x8784>
   1a394:	movw	r1, #61956	; 0xf204
   1a398:	movt	r1, #3
   1a39c:	mov	r3, r0
   1a3a0:	movw	r2, #52232	; 0xcc08
   1a3a4:	ldr	r0, [r1]
   1a3a8:	movt	r2, #2
   1a3ac:	mov	r1, #1
   1a3b0:	mov	r6, r1
   1a3b4:	bl	11a78 <__fprintf_chk@plt>
   1a3b8:	bl	1a12c <__assert_fail@plt+0x854c>
   1a3bc:	b	1a364 <__assert_fail@plt+0x8784>
   1a3c0:	ldr	r3, [pc, #768]	; 1a6c8 <__assert_fail@plt+0x8ae8>
   1a3c4:	mov	ip, #0
   1a3c8:	ldr	r2, [r6]
   1a3cc:	str	r4, [sp, #20]
   1a3d0:	str	r6, [sp, #28]
   1a3d4:	mov	r4, r3
   1a3d8:	mov	r6, ip
   1a3dc:	str	r2, [sp, #16]
   1a3e0:	str	r7, [sp, #24]
   1a3e4:	ldr	r7, [r4, #4]!
   1a3e8:	ldr	r1, [sp, #16]
   1a3ec:	ldr	r0, [r7]
   1a3f0:	bl	11754 <strcmp@plt>
   1a3f4:	ldr	r3, [pc, #720]	; 1a6cc <__assert_fail@plt+0x8aec>
   1a3f8:	cmp	r0, #0
   1a3fc:	moveq	r5, r7
   1a400:	moveq	r6, #1
   1a404:	cmp	r4, r3
   1a408:	bne	1a3e4 <__assert_fail@plt+0x8804>
   1a40c:	mov	ip, r6
   1a410:	cmp	ip, #0
   1a414:	ldr	r4, [sp, #20]
   1a418:	ldr	r7, [sp, #24]
   1a41c:	ldr	r6, [sp, #28]
   1a420:	bne	1a300 <__assert_fail@plt+0x8720>
   1a424:	movw	r1, #61956	; 0xf204
   1a428:	movt	r1, #3
   1a42c:	ldr	r3, [sp, #16]
   1a430:	movw	r2, #52208	; 0xcbf0
   1a434:	ldr	r0, [r1]
   1a438:	movt	r2, #2
   1a43c:	mov	r1, #1
   1a440:	mov	r6, r1
   1a444:	bl	11a78 <__fprintf_chk@plt>
   1a448:	bl	1a12c <__assert_fail@plt+0x854c>
   1a44c:	b	1a364 <__assert_fail@plt+0x8784>
   1a450:	add	r0, sp, #44	; 0x2c
   1a454:	bl	1182c <uname@plt>
   1a458:	cmp	r0, #0
   1a45c:	blt	1a5bc <__assert_fail@plt+0x89dc>
   1a460:	mov	r1, #4096	; 0x1000
   1a464:	movw	r2, #52296	; 0xcc48
   1a468:	mov	r3, r1
   1a46c:	movt	r2, #2
   1a470:	add	r0, sp, #436	; 0x1b4
   1a474:	str	r2, [sp]
   1a478:	add	r6, sp, #174	; 0xae
   1a47c:	mov	r2, #1
   1a480:	str	r6, [sp, #4]
   1a484:	bl	11bd4 <__snprintf_chk@plt>
   1a488:	add	r0, sp, #436	; 0x1b4
   1a48c:	movw	r1, #52328	; 0xcc68
   1a490:	movt	r1, #2
   1a494:	bl	11b44 <fopen64@plt>
   1a498:	subs	r7, r0, #0
   1a49c:	beq	1a5e4 <__assert_fail@plt+0x8a04>
   1a4a0:	mov	r0, r8
   1a4a4:	movw	r1, #493	; 0x1ed
   1a4a8:	bl	1b9c8 <__assert_fail@plt+0x9de8>
   1a4ac:	cmp	r0, #0
   1a4b0:	blt	1a62c <__assert_fail@plt+0x8a4c>
   1a4b4:	movw	r1, #52512	; 0xcd20
   1a4b8:	mov	r0, r8
   1a4bc:	movt	r1, #2
   1a4c0:	bl	11b44 <fopen64@plt>
   1a4c4:	subs	sl, r0, #0
   1a4c8:	beq	1a6a0 <__assert_fail@plt+0x8ac0>
   1a4cc:	add	r1, sp, #8576	; 0x2180
   1a4d0:	movw	r8, #53244	; 0xcffc
   1a4d4:	add	r1, r1, #56	; 0x38
   1a4d8:	movw	r9, #61956	; 0xf204
   1a4dc:	sub	fp, r1, #4
   1a4e0:	movt	r8, #65535	; 0xffff
   1a4e4:	movt	r9, #3
   1a4e8:	mov	r6, #0
   1a4ec:	add	r0, sp, #4480	; 0x1180
   1a4f0:	mov	r1, #4096	; 0x1000
   1a4f4:	add	r0, r0, #52	; 0x34
   1a4f8:	mov	r2, r7
   1a4fc:	bl	117cc <fgets@plt>
   1a500:	cmp	r0, #0
   1a504:	beq	1a5a8 <__assert_fail@plt+0x89c8>
   1a508:	add	r2, sp, #16640	; 0x4100
   1a50c:	add	r2, r2, #184	; 0xb8
   1a510:	ldrb	r2, [r2, r8]
   1a514:	uxtb	r3, r2
   1a518:	cmp	r3, #35	; 0x23
   1a51c:	beq	1a4ec <__assert_fail@plt+0x890c>
   1a520:	add	r3, sp, #40	; 0x28
   1a524:	add	r0, sp, #4480	; 0x1180
   1a528:	str	r3, [sp, #8]
   1a52c:	add	r3, sp, #35	; 0x23
   1a530:	str	r3, [sp]
   1a534:	add	r3, sp, #12672	; 0x3180
   1a538:	add	r2, sp, #36	; 0x24
   1a53c:	add	r3, r3, #52	; 0x34
   1a540:	str	r2, [sp, #4]
   1a544:	movw	r1, #52552	; 0xcd48
   1a548:	add	r0, r0, #52	; 0x34
   1a54c:	movt	r1, #2
   1a550:	mov	r2, fp
   1a554:	bl	11af0 <sscanf@plt>
   1a558:	cmp	r0, #5
   1a55c:	bne	1a584 <__assert_fail@plt+0x89a4>
   1a560:	add	lr, sp, #16640	; 0x4100
   1a564:	movw	r3, #48747	; 0xbe6b
   1a568:	add	lr, lr, #184	; 0xb8
   1a56c:	movt	r3, #65535	; 0xffff
   1a570:	ldrb	r3, [lr, r3]
   1a574:	uxtb	r3, r3
   1a578:	sub	r2, r3, #98	; 0x62
   1a57c:	cmp	r2, #1
   1a580:	bls	1a65c <__assert_fail@plt+0x8a7c>
   1a584:	add	r3, sp, #4480	; 0x1180
   1a588:	mov	r1, #1
   1a58c:	movw	r2, #52568	; 0xcd58
   1a590:	ldr	r0, [r9]
   1a594:	movt	r2, #2
   1a598:	add	r3, r3, #52	; 0x34
   1a59c:	mov	r6, r1
   1a5a0:	bl	11a78 <__fprintf_chk@plt>
   1a5a4:	b	1a4ec <__assert_fail@plt+0x890c>
   1a5a8:	mov	r0, r7
   1a5ac:	bl	11a84 <fclose@plt>
   1a5b0:	mov	r0, sl
   1a5b4:	bl	11a84 <fclose@plt>
   1a5b8:	b	1a364 <__assert_fail@plt+0x8784>
   1a5bc:	movw	r3, #61956	; 0xf204
   1a5c0:	movt	r3, #3
   1a5c4:	mov	r1, #1
   1a5c8:	movw	r0, #52272	; 0xcc30
   1a5cc:	ldr	r3, [r3]
   1a5d0:	mov	r2, #21
   1a5d4:	movt	r0, #2
   1a5d8:	mov	r6, r1
   1a5dc:	bl	1188c <fwrite@plt>
   1a5e0:	b	1a364 <__assert_fail@plt+0x8784>
   1a5e4:	bl	119f4 <__errno_location@plt>
   1a5e8:	movw	r1, #61956	; 0xf204
   1a5ec:	movt	r1, #3
   1a5f0:	ldr	r3, [r0]
   1a5f4:	cmp	r3, #2
   1a5f8:	mov	r3, r6
   1a5fc:	movweq	r2, #52332	; 0xcc6c
   1a600:	ldreq	r0, [r1]
   1a604:	movwne	r2, #52396	; 0xccac
   1a608:	ldrne	r0, [r1]
   1a60c:	movteq	r2, #2
   1a610:	movne	r1, #1
   1a614:	moveq	r1, #1
   1a618:	movtne	r2, #2
   1a61c:	moveq	r6, r7
   1a620:	movne	r6, r1
   1a624:	bl	11a78 <__fprintf_chk@plt>
   1a628:	b	1a364 <__assert_fail@plt+0x8784>
   1a62c:	movw	r1, #61956	; 0xf204
   1a630:	movt	r1, #3
   1a634:	movw	r2, #52456	; 0xcce8
   1a638:	mov	r3, r8
   1a63c:	ldr	r0, [r1]
   1a640:	movt	r2, #2
   1a644:	mov	r1, #1
   1a648:	bl	11a78 <__fprintf_chk@plt>
   1a64c:	mov	r0, r7
   1a650:	mov	r6, #1
   1a654:	bl	11a84 <fclose@plt>
   1a658:	b	1a364 <__assert_fail@plt+0x8784>
   1a65c:	add	ip, sp, #16640	; 0x4100
   1a660:	movw	r0, #48748	; 0xbe6c
   1a664:	add	ip, ip, #184	; 0xb8
   1a668:	movt	r0, #65535	; 0xffff
   1a66c:	movw	r1, #48752	; 0xbe70
   1a670:	movt	r1, #65535	; 0xffff
   1a674:	ldr	r0, [ip, r0]
   1a678:	add	r2, sp, #12672	; 0x3180
   1a67c:	add	r2, r2, #52	; 0x34
   1a680:	str	r0, [sp]
   1a684:	mov	r0, sl
   1a688:	ldr	lr, [ip, r1]
   1a68c:	mov	r1, fp
   1a690:	str	lr, [sp, #4]
   1a694:	ldr	ip, [r5, #4]
   1a698:	blx	ip
   1a69c:	b	1a4ec <__assert_fail@plt+0x890c>
   1a6a0:	movw	r1, #61956	; 0xf204
   1a6a4:	movt	r1, #3
   1a6a8:	mov	r3, r8
   1a6ac:	movw	r2, #52516	; 0xcd24
   1a6b0:	ldr	r0, [r1]
   1a6b4:	movt	r2, #2
   1a6b8:	mov	r1, #1
   1a6bc:	bl	11a78 <__fprintf_chk@plt>
   1a6c0:	b	1a64c <__assert_fail@plt+0x8a6c>
   1a6c4:	bl	11838 <__stack_chk_fail@plt>
   1a6c8:	muleq	r2, r4, lr
   1a6cc:	andeq	ip, r2, r0, lsr #29
   1a6d0:	cmp	r1, #0
   1a6d4:	push	{r3, lr}
   1a6d8:	beq	1a6f4 <__assert_fail@plt+0x8b14>
   1a6dc:	mov	r3, #0
   1a6e0:	str	r1, [r0, #12]
   1a6e4:	str	r3, [r0]
   1a6e8:	str	r3, [r0, #4]
   1a6ec:	str	r3, [r0, #8]
   1a6f0:	pop	{r3, pc}
   1a6f4:	ldr	r0, [pc, #24]	; 1a714 <__assert_fail@plt+0x8b34>
   1a6f8:	mov	r2, #42	; 0x2a
   1a6fc:	ldr	r1, [pc, #20]	; 1a718 <__assert_fail@plt+0x8b38>
   1a700:	ldr	r3, [pc, #20]	; 1a71c <__assert_fail@plt+0x8b3c>
   1a704:	add	r0, pc, r0
   1a708:	add	r1, pc, r1
   1a70c:	add	r3, pc, r3
   1a710:	bl	11be0 <__assert_fail@plt>
   1a714:			; <UNDEFINED> instruction: 0x000127bc
   1a718:	andeq	r2, r1, r4, asr #15
   1a71c:	andeq	r2, r1, r8, lsr #15
   1a720:	push	{r4, r5, r6, lr}
   1a724:	mov	r4, r0
   1a728:	ldmib	r0, {r0, r2}
   1a72c:	mov	r5, r1
   1a730:	add	r3, r0, #1
   1a734:	cmp	r3, r2
   1a738:	bcs	1a74c <__assert_fail@plt+0x8b6c>
   1a73c:	ldr	r1, [r4]
   1a740:	str	r5, [r1, r0, lsl #2]
   1a744:	str	r3, [r4, #4]
   1a748:	pop	{r4, r5, r6, pc}
   1a74c:	ldr	r6, [r4, #12]
   1a750:	ldr	r0, [r4]
   1a754:	add	r6, r2, r6
   1a758:	lsl	r1, r6, #2
   1a75c:	bl	11844 <realloc@plt>
   1a760:	subs	r3, r0, #0
   1a764:	beq	1a780 <__assert_fail@plt+0x8ba0>
   1a768:	ldr	r0, [r4, #4]
   1a76c:	mov	r1, r3
   1a770:	str	r3, [r4]
   1a774:	str	r6, [r4, #8]
   1a778:	add	r3, r0, #1
   1a77c:	b	1a740 <__assert_fail@plt+0x8b60>
   1a780:	mvn	r0, #11
   1a784:	pop	{r4, r5, r6, pc}
   1a788:	ldm	r0, {r3, ip}
   1a78c:	add	ip, r3, ip, lsl #2
   1a790:	cmp	r3, ip
   1a794:	bcs	1a7c8 <__assert_fail@plt+0x8be8>
   1a798:	ldr	r2, [r3]
   1a79c:	cmp	r2, r1
   1a7a0:	beq	1a7cc <__assert_fail@plt+0x8bec>
   1a7a4:	add	r3, r3, #4
   1a7a8:	b	1a7b8 <__assert_fail@plt+0x8bd8>
   1a7ac:	ldr	r2, [r2]
   1a7b0:	cmp	r2, r1
   1a7b4:	beq	1a7cc <__assert_fail@plt+0x8bec>
   1a7b8:	cmp	ip, r3
   1a7bc:	mov	r2, r3
   1a7c0:	add	r3, r3, #4
   1a7c4:	bhi	1a7ac <__assert_fail@plt+0x8bcc>
   1a7c8:	b	1a720 <__assert_fail@plt+0x8b40>
   1a7cc:	mvn	r0, #16
   1a7d0:	bx	lr
   1a7d4:	push	{r4, lr}
   1a7d8:	mov	r4, r0
   1a7dc:	ldr	r0, [r0]
   1a7e0:	bl	117c0 <free@plt>
   1a7e4:	mov	r3, #0
   1a7e8:	str	r3, [r4, #4]
   1a7ec:	str	r3, [r4, #8]
   1a7f0:	pop	{r4, pc}
   1a7f4:	mov	r3, r1
   1a7f8:	mov	r2, #4
   1a7fc:	ldm	r0, {r0, r1}
   1a800:	b	11b50 <qsort@plt>
   1a804:	ldr	r0, [r0]
   1a808:	ldr	r1, [r1]
   1a80c:	b	11754 <strcmp@plt>
   1a810:	sub	r0, r0, #1
   1a814:	push	{r3, r4, r5, lr}
   1a818:	clz	r4, r0
   1a81c:	mov	r3, #1
   1a820:	rsb	r4, r4, #32
   1a824:	lsl	r4, r3, r4
   1a828:	mov	r0, r3
   1a82c:	mov	r5, r1
   1a830:	add	r3, r4, r4, lsl #1
   1a834:	lsl	r1, r3, #2
   1a838:	add	r1, r1, #16
   1a83c:	bl	11718 <calloc@plt>
   1a840:	cmp	r0, #0
   1a844:	popeq	{r3, r4, r5, pc}
   1a848:	lsrs	r3, r4, #5
   1a84c:	str	r4, [r0, #8]
   1a850:	str	r5, [r0, #12]
   1a854:	bne	1a864 <__assert_fail@plt+0x8c84>
   1a858:	mov	r3, #4
   1a85c:	str	r3, [r0, #4]
   1a860:	pop	{r3, r4, r5, pc}
   1a864:	cmp	r3, #64	; 0x40
   1a868:	movhi	r3, #64	; 0x40
   1a86c:	str	r3, [r0, #4]
   1a870:	pop	{r3, r4, r5, pc}
   1a874:	push	{r4, r5, r6, r7, r8, lr}
   1a878:	subs	r6, r0, #0
   1a87c:	popeq	{r4, r5, r6, r7, r8, pc}
   1a880:	ldr	r8, [r6, #8]
   1a884:	add	r3, r6, #16
   1a888:	add	r8, r8, r8, lsl #1
   1a88c:	add	r8, r3, r8, lsl #2
   1a890:	cmp	r3, r8
   1a894:	addcc	r7, r6, #28
   1a898:	bcs	1a8f0 <__assert_fail@plt+0x8d10>
   1a89c:	ldr	r3, [r6, #12]
   1a8a0:	cmp	r3, #0
   1a8a4:	beq	1a8dc <__assert_fail@plt+0x8cfc>
   1a8a8:	ldr	r5, [r7, #-8]
   1a8ac:	ldr	r4, [r7, #-12]
   1a8b0:	add	r5, r4, r5, lsl #3
   1a8b4:	cmp	r4, r5
   1a8b8:	bcs	1a8fc <__assert_fail@plt+0x8d1c>
   1a8bc:	add	r4, r4, #8
   1a8c0:	b	1a8c8 <__assert_fail@plt+0x8ce8>
   1a8c4:	ldr	r3, [r6, #12]
   1a8c8:	ldr	r0, [r4, #-4]
   1a8cc:	blx	r3
   1a8d0:	cmp	r5, r4
   1a8d4:	add	r4, r4, #8
   1a8d8:	bhi	1a8c4 <__assert_fail@plt+0x8ce4>
   1a8dc:	ldr	r0, [r7, #-12]
   1a8e0:	bl	117c0 <free@plt>
   1a8e4:	cmp	r8, r7
   1a8e8:	add	r7, r7, #12
   1a8ec:	bhi	1a89c <__assert_fail@plt+0x8cbc>
   1a8f0:	mov	r0, r6
   1a8f4:	pop	{r4, r5, r6, r7, r8, lr}
   1a8f8:	b	117c0 <free@plt>
   1a8fc:	mov	r0, r4
   1a900:	b	1a8e0 <__assert_fail@plt+0x8d00>
   1a904:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a908:	mov	r7, r0
   1a90c:	mov	r0, r1
   1a910:	mov	r6, r1
   1a914:	mov	r8, r2
   1a918:	bl	119a0 <strlen@plt>
   1a91c:	lsrs	r9, r0, #2
   1a920:	mov	r4, r0
   1a924:	and	r0, r0, #3
   1a928:	beq	1aac8 <__assert_fail@plt+0x8ee8>
   1a92c:	mov	ip, r9
   1a930:	mov	r3, r6
   1a934:	ldrh	r5, [r3]
   1a938:	subs	ip, ip, #1
   1a93c:	ldrh	r1, [r3, #2]
   1a940:	add	r3, r3, #4
   1a944:	add	r5, r4, r5
   1a948:	lsl	r2, r5, #16
   1a94c:	eor	r4, r2, r1, lsl #11
   1a950:	eor	r4, r4, r5
   1a954:	add	r4, r4, r4, lsr #11
   1a958:	bne	1a934 <__assert_fail@plt+0x8d54>
   1a95c:	add	r9, r6, r9, lsl #2
   1a960:	cmp	r0, #2
   1a964:	beq	1aab4 <__assert_fail@plt+0x8ed4>
   1a968:	cmp	r0, #3
   1a96c:	beq	1aa98 <__assert_fail@plt+0x8eb8>
   1a970:	cmp	r0, #1
   1a974:	beq	1aa54 <__assert_fail@plt+0x8e74>
   1a978:	eor	r3, r4, r4, lsl #3
   1a97c:	ldr	r2, [r7, #8]
   1a980:	add	r3, r3, r3, lsr #5
   1a984:	sub	r2, r2, #1
   1a988:	eor	r3, r3, r3, lsl #4
   1a98c:	add	r3, r3, r3, lsr #17
   1a990:	eor	r3, r3, r3, lsl #25
   1a994:	add	r3, r3, r3, lsr #6
   1a998:	and	r5, r3, r2
   1a99c:	add	r5, r5, r5, lsl #1
   1a9a0:	lsl	r5, r5, #2
   1a9a4:	add	r5, r5, #16
   1a9a8:	add	r9, r7, r5
   1a9ac:	ldr	sl, [r9, #4]
   1a9b0:	ldr	r3, [r9, #8]
   1a9b4:	add	r2, sl, #1
   1a9b8:	cmp	r2, r3
   1a9bc:	bcs	1aa68 <__assert_fail@plt+0x8e88>
   1a9c0:	ldr	r4, [r7, r5]
   1a9c4:	add	r5, r4, sl, lsl #3
   1a9c8:	cmp	r5, r4
   1a9cc:	bhi	1a9e4 <__assert_fail@plt+0x8e04>
   1a9d0:	b	1aa30 <__assert_fail@plt+0x8e50>
   1a9d4:	blt	1aa1c <__assert_fail@plt+0x8e3c>
   1a9d8:	add	r4, r4, #8
   1a9dc:	cmp	r5, r4
   1a9e0:	bls	1aa30 <__assert_fail@plt+0x8e50>
   1a9e4:	mov	r0, r6
   1a9e8:	ldr	r1, [r4]
   1a9ec:	bl	11754 <strcmp@plt>
   1a9f0:	cmp	r0, #0
   1a9f4:	bne	1a9d4 <__assert_fail@plt+0x8df4>
   1a9f8:	ldr	r3, [r7, #12]
   1a9fc:	cmp	r3, #0
   1aa00:	beq	1aa0c <__assert_fail@plt+0x8e2c>
   1aa04:	ldr	r0, [r4, #4]
   1aa08:	blx	r3
   1aa0c:	str	r6, [r4]
   1aa10:	mov	r0, #0
   1aa14:	str	r8, [r4, #4]
   1aa18:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa1c:	rsb	r2, r4, r5
   1aa20:	add	r0, r4, #8
   1aa24:	mov	r1, r4
   1aa28:	bl	117b4 <memmove@plt>
   1aa2c:	ldr	sl, [r9, #4]
   1aa30:	ldr	r3, [r7]
   1aa34:	add	sl, sl, #1
   1aa38:	str	r6, [r4]
   1aa3c:	mov	r0, #0
   1aa40:	str	r8, [r4, #4]
   1aa44:	add	r3, r3, #1
   1aa48:	str	sl, [r9, #4]
   1aa4c:	str	r3, [r7]
   1aa50:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa54:	ldrb	r3, [r9]
   1aa58:	add	r4, r3, r4
   1aa5c:	eor	r4, r4, r4, lsl #10
   1aa60:	add	r4, r4, r4, lsr #1
   1aa64:	b	1a978 <__assert_fail@plt+0x8d98>
   1aa68:	ldr	fp, [r7, #4]
   1aa6c:	ldr	r0, [r7, r5]
   1aa70:	add	fp, r3, fp
   1aa74:	lsl	r1, fp, #3
   1aa78:	bl	11844 <realloc@plt>
   1aa7c:	cmp	r0, #0
   1aa80:	beq	1aad0 <__assert_fail@plt+0x8ef0>
   1aa84:	ldr	sl, [r9, #4]
   1aa88:	mov	r4, r0
   1aa8c:	str	r0, [r7, r5]
   1aa90:	str	fp, [r9, #8]
   1aa94:	b	1a9c4 <__assert_fail@plt+0x8de4>
   1aa98:	ldrh	r2, [r9]
   1aa9c:	ldrb	r3, [r9, #2]
   1aaa0:	add	r4, r4, r2
   1aaa4:	eor	r4, r4, r4, lsl #16
   1aaa8:	eor	r4, r4, r3, lsl #18
   1aaac:	add	r4, r4, r4, lsr #11
   1aab0:	b	1a978 <__assert_fail@plt+0x8d98>
   1aab4:	ldrh	r3, [r9]
   1aab8:	add	r4, r4, r3
   1aabc:	eor	r4, r4, r4, lsl #11
   1aac0:	add	r4, r4, r4, lsr #17
   1aac4:	b	1a978 <__assert_fail@plt+0x8d98>
   1aac8:	mov	r9, r6
   1aacc:	b	1a960 <__assert_fail@plt+0x8d80>
   1aad0:	bl	119f4 <__errno_location@plt>
   1aad4:	ldr	r0, [r0]
   1aad8:	rsb	r0, r0, #0
   1aadc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aae0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aae4:	mov	r7, r0
   1aae8:	mov	r0, r1
   1aaec:	mov	r6, r1
   1aaf0:	mov	r8, r2
   1aaf4:	bl	119a0 <strlen@plt>
   1aaf8:	lsrs	r9, r0, #2
   1aafc:	mov	r4, r0
   1ab00:	and	r0, r0, #3
   1ab04:	beq	1ac88 <__assert_fail@plt+0x90a8>
   1ab08:	mov	ip, r9
   1ab0c:	mov	r3, r6
   1ab10:	ldrh	r5, [r3]
   1ab14:	subs	ip, ip, #1
   1ab18:	ldrh	r1, [r3, #2]
   1ab1c:	add	r3, r3, #4
   1ab20:	add	r5, r4, r5
   1ab24:	lsl	r2, r5, #16
   1ab28:	eor	r4, r2, r1, lsl #11
   1ab2c:	eor	r4, r4, r5
   1ab30:	add	r4, r4, r4, lsr #11
   1ab34:	bne	1ab10 <__assert_fail@plt+0x8f30>
   1ab38:	add	r9, r6, r9, lsl #2
   1ab3c:	cmp	r0, #2
   1ab40:	beq	1ac74 <__assert_fail@plt+0x9094>
   1ab44:	cmp	r0, #3
   1ab48:	beq	1ac58 <__assert_fail@plt+0x9078>
   1ab4c:	cmp	r0, #1
   1ab50:	beq	1ac14 <__assert_fail@plt+0x9034>
   1ab54:	eor	r3, r4, r4, lsl #3
   1ab58:	ldr	r2, [r7, #8]
   1ab5c:	add	r3, r3, r3, lsr #5
   1ab60:	sub	r2, r2, #1
   1ab64:	eor	r3, r3, r3, lsl #4
   1ab68:	add	r3, r3, r3, lsr #17
   1ab6c:	eor	r3, r3, r3, lsl #25
   1ab70:	add	r3, r3, r3, lsr #6
   1ab74:	and	r5, r3, r2
   1ab78:	add	r5, r5, r5, lsl #1
   1ab7c:	lsl	r5, r5, #2
   1ab80:	add	r5, r5, #16
   1ab84:	add	r9, r7, r5
   1ab88:	ldr	sl, [r9, #4]
   1ab8c:	ldr	r3, [r9, #8]
   1ab90:	add	r2, sl, #1
   1ab94:	cmp	r2, r3
   1ab98:	bcs	1ac28 <__assert_fail@plt+0x9048>
   1ab9c:	ldr	r4, [r7, r5]
   1aba0:	add	r5, r4, sl, lsl #3
   1aba4:	cmp	r5, r4
   1aba8:	bhi	1abc0 <__assert_fail@plt+0x8fe0>
   1abac:	b	1abf0 <__assert_fail@plt+0x9010>
   1abb0:	blt	1abdc <__assert_fail@plt+0x8ffc>
   1abb4:	add	r4, r4, #8
   1abb8:	cmp	r5, r4
   1abbc:	bls	1abf0 <__assert_fail@plt+0x9010>
   1abc0:	mov	r0, r6
   1abc4:	ldr	r1, [r4]
   1abc8:	bl	11754 <strcmp@plt>
   1abcc:	cmp	r0, #0
   1abd0:	bne	1abb0 <__assert_fail@plt+0x8fd0>
   1abd4:	mvn	r0, #16
   1abd8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abdc:	rsb	r2, r4, r5
   1abe0:	add	r0, r4, #8
   1abe4:	mov	r1, r4
   1abe8:	bl	117b4 <memmove@plt>
   1abec:	ldr	sl, [r9, #4]
   1abf0:	ldr	r3, [r7]
   1abf4:	add	sl, sl, #1
   1abf8:	str	r6, [r4]
   1abfc:	mov	r0, #0
   1ac00:	str	r8, [r4, #4]
   1ac04:	add	r3, r3, #1
   1ac08:	str	sl, [r9, #4]
   1ac0c:	str	r3, [r7]
   1ac10:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac14:	ldrb	r3, [r9]
   1ac18:	add	r4, r3, r4
   1ac1c:	eor	r4, r4, r4, lsl #10
   1ac20:	add	r4, r4, r4, lsr #1
   1ac24:	b	1ab54 <__assert_fail@plt+0x8f74>
   1ac28:	ldr	fp, [r7, #4]
   1ac2c:	ldr	r0, [r7, r5]
   1ac30:	add	fp, r3, fp
   1ac34:	lsl	r1, fp, #3
   1ac38:	bl	11844 <realloc@plt>
   1ac3c:	cmp	r0, #0
   1ac40:	beq	1ac90 <__assert_fail@plt+0x90b0>
   1ac44:	ldr	sl, [r9, #4]
   1ac48:	mov	r4, r0
   1ac4c:	str	r0, [r7, r5]
   1ac50:	str	fp, [r9, #8]
   1ac54:	b	1aba0 <__assert_fail@plt+0x8fc0>
   1ac58:	ldrh	r2, [r9]
   1ac5c:	ldrb	r3, [r9, #2]
   1ac60:	add	r4, r4, r2
   1ac64:	eor	r4, r4, r4, lsl #16
   1ac68:	eor	r4, r4, r3, lsl #18
   1ac6c:	add	r4, r4, r4, lsr #11
   1ac70:	b	1ab54 <__assert_fail@plt+0x8f74>
   1ac74:	ldrh	r3, [r9]
   1ac78:	add	r4, r4, r3
   1ac7c:	eor	r4, r4, r4, lsl #11
   1ac80:	add	r4, r4, r4, lsr #17
   1ac84:	b	1ab54 <__assert_fail@plt+0x8f74>
   1ac88:	mov	r9, r6
   1ac8c:	b	1ab3c <__assert_fail@plt+0x8f5c>
   1ac90:	bl	119f4 <__errno_location@plt>
   1ac94:	ldr	r0, [r0]
   1ac98:	rsb	r0, r0, #0
   1ac9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aca0:	ldr	r3, [pc, #340]	; 1adfc <__assert_fail@plt+0x921c>
   1aca4:	ldr	r2, [pc, #340]	; 1ae00 <__assert_fail@plt+0x9220>
   1aca8:	add	r3, pc, r3
   1acac:	push	{r4, r5, r6, r7, lr}
   1acb0:	sub	sp, sp, #28
   1acb4:	ldr	r4, [r3, r2]
   1acb8:	mov	r7, r0
   1acbc:	mov	r0, r1
   1acc0:	mov	r6, r1
   1acc4:	ldr	r3, [r4]
   1acc8:	str	r3, [sp, #20]
   1accc:	bl	119a0 <strlen@plt>
   1acd0:	mov	ip, r0
   1acd4:	and	r1, r0, #3
   1acd8:	lsrs	r0, r0, #2
   1acdc:	beq	1adf0 <__assert_fail@plt+0x9210>
   1ace0:	mov	r2, r0
   1ace4:	mov	r3, r6
   1ace8:	ldrh	lr, [r3]
   1acec:	subs	r2, r2, #1
   1acf0:	ldrh	r5, [r3, #2]
   1acf4:	add	r3, r3, #4
   1acf8:	add	lr, ip, lr
   1acfc:	lsl	ip, lr, #16
   1ad00:	eor	ip, ip, r5, lsl #11
   1ad04:	eor	ip, ip, lr
   1ad08:	add	ip, ip, ip, lsr #11
   1ad0c:	bne	1ace8 <__assert_fail@plt+0x9108>
   1ad10:	add	r0, r6, r0, lsl #2
   1ad14:	cmp	r1, #2
   1ad18:	beq	1addc <__assert_fail@plt+0x91fc>
   1ad1c:	cmp	r1, #3
   1ad20:	beq	1adc0 <__assert_fail@plt+0x91e0>
   1ad24:	cmp	r1, #1
   1ad28:	beq	1adac <__assert_fail@plt+0x91cc>
   1ad2c:	eor	r1, ip, ip, lsl #3
   1ad30:	ldr	lr, [r7, #8]
   1ad34:	mov	r2, #0
   1ad38:	str	r2, [sp, #16]
   1ad3c:	add	r1, r1, r1, lsr #5
   1ad40:	sub	lr, lr, #1
   1ad44:	ldr	ip, [pc, #184]	; 1ae04 <__assert_fail@plt+0x9224>
   1ad48:	mov	r3, #8
   1ad4c:	eor	r1, r1, r1, lsl #4
   1ad50:	add	r0, sp, #12
   1ad54:	add	ip, pc, ip
   1ad58:	str	r6, [sp, #12]
   1ad5c:	add	r1, r1, r1, lsr #17
   1ad60:	eor	r1, r1, r1, lsl #25
   1ad64:	add	r1, r1, r1, lsr #6
   1ad68:	and	r2, r1, lr
   1ad6c:	add	r2, r2, r2, lsl #1
   1ad70:	lsl	r2, r2, #2
   1ad74:	add	r2, r2, #16
   1ad78:	add	lr, r7, r2
   1ad7c:	ldr	r1, [r7, r2]
   1ad80:	ldr	r2, [lr, #4]
   1ad84:	str	ip, [sp]
   1ad88:	bl	11a48 <bsearch@plt>
   1ad8c:	ldr	r2, [sp, #20]
   1ad90:	ldr	r3, [r4]
   1ad94:	cmp	r0, #0
   1ad98:	ldrne	r0, [r0, #4]
   1ad9c:	cmp	r2, r3
   1ada0:	bne	1adf8 <__assert_fail@plt+0x9218>
   1ada4:	add	sp, sp, #28
   1ada8:	pop	{r4, r5, r6, r7, pc}
   1adac:	ldrb	r3, [r0]
   1adb0:	add	ip, r3, ip
   1adb4:	eor	ip, ip, ip, lsl #10
   1adb8:	add	ip, ip, ip, lsr #1
   1adbc:	b	1ad2c <__assert_fail@plt+0x914c>
   1adc0:	ldrh	r2, [r0]
   1adc4:	ldrb	r3, [r0, #2]
   1adc8:	add	ip, ip, r2
   1adcc:	eor	ip, ip, ip, lsl #16
   1add0:	eor	ip, ip, r3, lsl #18
   1add4:	add	ip, ip, ip, lsr #11
   1add8:	b	1ad2c <__assert_fail@plt+0x914c>
   1addc:	ldrh	r3, [r0]
   1ade0:	add	ip, ip, r3
   1ade4:	eor	ip, ip, ip, lsl #11
   1ade8:	add	ip, ip, ip, lsr #17
   1adec:	b	1ad2c <__assert_fail@plt+0x914c>
   1adf0:	mov	r0, r6
   1adf4:	b	1ad14 <__assert_fail@plt+0x9134>
   1adf8:	bl	11838 <__stack_chk_fail@plt>
   1adfc:	andeq	r4, r2, r0, asr r3
   1ae00:	andeq	r0, r0, ip, lsr #3
   1ae04:			; <UNDEFINED> instruction: 0xfffffaa8
   1ae08:	ldr	r3, [pc, #508]	; 1b00c <__assert_fail@plt+0x942c>
   1ae0c:	ldr	r2, [pc, #508]	; 1b010 <__assert_fail@plt+0x9430>
   1ae10:	add	r3, pc, r3
   1ae14:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ae18:	sub	sp, sp, #28
   1ae1c:	ldr	r4, [r3, r2]
   1ae20:	mov	r5, r0
   1ae24:	mov	r0, r1
   1ae28:	mov	r7, r1
   1ae2c:	ldr	r3, [r4]
   1ae30:	str	r3, [sp, #20]
   1ae34:	bl	119a0 <strlen@plt>
   1ae38:	mov	ip, r0
   1ae3c:	and	r1, r0, #3
   1ae40:	lsrs	r0, r0, #2
   1ae44:	beq	1aff8 <__assert_fail@plt+0x9418>
   1ae48:	mov	r2, r0
   1ae4c:	mov	r3, r7
   1ae50:	ldrh	lr, [r3]
   1ae54:	subs	r2, r2, #1
   1ae58:	ldrh	r6, [r3, #2]
   1ae5c:	add	r3, r3, #4
   1ae60:	add	lr, ip, lr
   1ae64:	lsl	ip, lr, #16
   1ae68:	eor	ip, ip, r6, lsl #11
   1ae6c:	eor	ip, ip, lr
   1ae70:	add	ip, ip, ip, lsr #11
   1ae74:	bne	1ae50 <__assert_fail@plt+0x9270>
   1ae78:	add	r0, r7, r0, lsl #2
   1ae7c:	cmp	r1, #2
   1ae80:	beq	1afe4 <__assert_fail@plt+0x9404>
   1ae84:	cmp	r1, #3
   1ae88:	beq	1afc8 <__assert_fail@plt+0x93e8>
   1ae8c:	cmp	r1, #1
   1ae90:	beq	1af84 <__assert_fail@plt+0x93a4>
   1ae94:	eor	r2, ip, ip, lsl #3
   1ae98:	ldr	r1, [r5, #8]
   1ae9c:	str	r7, [sp, #12]
   1aea0:	add	r0, sp, #12
   1aea4:	add	r2, r2, r2, lsr #5
   1aea8:	sub	r1, r1, #1
   1aeac:	ldr	ip, [pc, #352]	; 1b014 <__assert_fail@plt+0x9434>
   1aeb0:	mov	r3, #8
   1aeb4:	eor	r2, r2, r2, lsl #4
   1aeb8:	mov	lr, #0
   1aebc:	add	ip, pc, ip
   1aec0:	str	lr, [sp, #16]
   1aec4:	add	r2, r2, r2, lsr #17
   1aec8:	eor	r2, r2, r2, lsl #25
   1aecc:	add	r2, r2, r2, lsr #6
   1aed0:	and	r7, r2, r1
   1aed4:	add	r7, r7, r7, lsl #1
   1aed8:	lsl	r7, r7, #2
   1aedc:	add	r7, r7, #16
   1aee0:	add	r6, r5, r7
   1aee4:	ldr	r1, [r5, r7]
   1aee8:	ldr	r2, [r6, #4]
   1aeec:	str	ip, [sp]
   1aef0:	bl	11a48 <bsearch@plt>
   1aef4:	subs	r8, r0, #0
   1aef8:	beq	1b000 <__assert_fail@plt+0x9420>
   1aefc:	ldr	r3, [r5, #12]
   1af00:	cmp	r3, #0
   1af04:	beq	1af10 <__assert_fail@plt+0x9330>
   1af08:	ldr	r0, [r8, #4]
   1af0c:	blx	r3
   1af10:	ldr	r2, [r6, #4]
   1af14:	add	r1, r8, #8
   1af18:	ldr	r3, [r5, r7]
   1af1c:	mov	r0, r8
   1af20:	add	r2, r3, r2, lsl #3
   1af24:	rsb	r2, r8, r2
   1af28:	bl	117b4 <memmove@plt>
   1af2c:	ldr	r8, [r5, #4]
   1af30:	ldr	r0, [r6, #4]
   1af34:	ldr	r3, [r5]
   1af38:	sub	r0, r0, #1
   1af3c:	mov	r1, r8
   1af40:	sub	r3, r3, #1
   1af44:	str	r0, [r6, #4]
   1af48:	str	r3, [r5]
   1af4c:	bl	28b10 <__assert_fail@plt+0x16f30>
   1af50:	mov	r1, r8
   1af54:	add	r9, r0, #1
   1af58:	ldr	r0, [r6, #8]
   1af5c:	bl	28b10 <__assert_fail@plt+0x16f30>
   1af60:	cmp	r0, r9
   1af64:	bhi	1af98 <__assert_fail@plt+0x93b8>
   1af68:	mov	r0, #0
   1af6c:	ldr	r2, [sp, #20]
   1af70:	ldr	r3, [r4]
   1af74:	cmp	r2, r3
   1af78:	bne	1b008 <__assert_fail@plt+0x9428>
   1af7c:	add	sp, sp, #28
   1af80:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1af84:	ldrb	r3, [r0]
   1af88:	add	ip, r3, ip
   1af8c:	eor	ip, ip, ip, lsl #10
   1af90:	add	ip, ip, ip, lsr #1
   1af94:	b	1ae94 <__assert_fail@plt+0x92b4>
   1af98:	lsl	r1, r8, #3
   1af9c:	ldr	r0, [r5, r7]
   1afa0:	mul	r1, r9, r1
   1afa4:	bl	11844 <realloc@plt>
   1afa8:	subs	r3, r0, #0
   1afac:	beq	1af68 <__assert_fail@plt+0x9388>
   1afb0:	ldr	r2, [r5, #4]
   1afb4:	mov	r0, #0
   1afb8:	str	r3, [r5, r7]
   1afbc:	mul	r9, r2, r9
   1afc0:	str	r9, [r6, #8]
   1afc4:	b	1af6c <__assert_fail@plt+0x938c>
   1afc8:	ldrh	r2, [r0]
   1afcc:	ldrb	r3, [r0, #2]
   1afd0:	add	ip, ip, r2
   1afd4:	eor	ip, ip, ip, lsl #16
   1afd8:	eor	ip, ip, r3, lsl #18
   1afdc:	add	ip, ip, ip, lsr #11
   1afe0:	b	1ae94 <__assert_fail@plt+0x92b4>
   1afe4:	ldrh	r3, [r0]
   1afe8:	add	ip, ip, r3
   1afec:	eor	ip, ip, ip, lsl #11
   1aff0:	add	ip, ip, ip, lsr #17
   1aff4:	b	1ae94 <__assert_fail@plt+0x92b4>
   1aff8:	mov	r0, r7
   1affc:	b	1ae7c <__assert_fail@plt+0x929c>
   1b000:	mvn	r0, #1
   1b004:	b	1af6c <__assert_fail@plt+0x938c>
   1b008:	bl	11838 <__stack_chk_fail@plt>
   1b00c:	andeq	r4, r2, r8, ror #3
   1b010:	andeq	r0, r0, ip, lsr #3
   1b014:			; <UNDEFINED> instruction: 0xfffff940
   1b018:	ldr	r0, [r0]
   1b01c:	bx	lr
   1b020:	mov	r3, #0
   1b024:	mvn	r2, #0
   1b028:	str	r0, [r1]
   1b02c:	str	r3, [r1, #4]
   1b030:	str	r2, [r1, #8]
   1b034:	bx	lr
   1b038:	push	{r4, r5, r6, r7}
   1b03c:	ldm	r0, {r5, ip}
   1b040:	ldr	r4, [r0, #8]
   1b044:	add	r3, ip, ip, lsl #1
   1b048:	add	r4, r4, #1
   1b04c:	str	r4, [r0, #8]
   1b050:	lsl	r3, r3, #2
   1b054:	add	r6, r3, #16
   1b058:	add	r6, r5, r6
   1b05c:	ldr	r7, [r6, #4]
   1b060:	cmp	r4, r7
   1b064:	bcc	1b0dc <__assert_fail@plt+0x94fc>
   1b068:	ldr	r7, [r5, #8]
   1b06c:	add	r6, ip, #1
   1b070:	mov	r4, #0
   1b074:	str	r6, [r0, #4]
   1b078:	cmp	r6, r7
   1b07c:	str	r4, [r0, #8]
   1b080:	bcs	1b0d0 <__assert_fail@plt+0x94f0>
   1b084:	add	r6, r6, r6, lsl #1
   1b088:	add	r6, r5, r6, lsl #2
   1b08c:	add	r6, r6, #16
   1b090:	ldr	r4, [r6, #4]
   1b094:	cmp	r4, #0
   1b098:	bne	1b114 <__assert_fail@plt+0x9534>
   1b09c:	add	ip, ip, #2
   1b0a0:	add	r3, r5, r3
   1b0a4:	b	1b0bc <__assert_fail@plt+0x94dc>
   1b0a8:	ldr	r5, [r3, #44]	; 0x2c
   1b0ac:	add	r3, r3, #12
   1b0b0:	cmp	r5, #0
   1b0b4:	bne	1b110 <__assert_fail@plt+0x9530>
   1b0b8:	mov	ip, r4
   1b0bc:	cmp	ip, r7
   1b0c0:	add	r6, r3, #40	; 0x28
   1b0c4:	add	r4, ip, #1
   1b0c8:	bne	1b0a8 <__assert_fail@plt+0x94c8>
   1b0cc:	str	ip, [r0, #4]
   1b0d0:	mov	r0, #0
   1b0d4:	pop	{r4, r5, r6, r7}
   1b0d8:	bx	lr
   1b0dc:	lsl	r4, r4, #3
   1b0e0:	ldr	r3, [r6]
   1b0e4:	cmp	r2, #0
   1b0e8:	add	r4, r3, r4
   1b0ec:	ldrne	r3, [r4, #4]
   1b0f0:	strne	r3, [r2]
   1b0f4:	cmp	r1, #0
   1b0f8:	ldrne	r3, [r4]
   1b0fc:	movne	r0, #1
   1b100:	moveq	r0, #1
   1b104:	pop	{r4, r5, r6, r7}
   1b108:	strne	r3, [r1]
   1b10c:	bx	lr
   1b110:	str	ip, [r0, #4]
   1b114:	mov	r4, #0
   1b118:	b	1b0e0 <__assert_fail@plt+0x9500>
   1b11c:	push	{r3, r4, r5, r6, r7, lr}
   1b120:	mov	r4, r0
   1b124:	ldr	r6, [r0, #4]
   1b128:	mov	r5, r1
   1b12c:	cmp	r6, r1
   1b130:	bcs	1b18c <__assert_fail@plt+0x95ac>
   1b134:	ldrb	r3, [r0, #8]
   1b138:	cmp	r3, #0
   1b13c:	bne	1b174 <__assert_fail@plt+0x9594>
   1b140:	mov	r0, r1
   1b144:	bl	11910 <malloc@plt>
   1b148:	subs	r7, r0, #0
   1b14c:	beq	1b184 <__assert_fail@plt+0x95a4>
   1b150:	mov	r2, r6
   1b154:	ldr	r1, [r4]
   1b158:	bl	117e4 <memcpy@plt>
   1b15c:	mov	r3, #1
   1b160:	str	r5, [r4, #4]
   1b164:	str	r7, [r4]
   1b168:	mov	r0, #0
   1b16c:	strb	r3, [r4, #8]
   1b170:	pop	{r3, r4, r5, r6, r7, pc}
   1b174:	ldr	r0, [r0]
   1b178:	bl	11844 <realloc@plt>
   1b17c:	subs	r7, r0, #0
   1b180:	bne	1b15c <__assert_fail@plt+0x957c>
   1b184:	mvn	r0, #11
   1b188:	pop	{r3, r4, r5, r6, r7, pc}
   1b18c:	mov	r0, #0
   1b190:	pop	{r3, r4, r5, r6, r7, pc}
   1b194:	ldrb	r3, [r0, #8]
   1b198:	cmp	r3, #0
   1b19c:	bxeq	lr
   1b1a0:	ldr	r0, [r0]
   1b1a4:	b	117c0 <free@plt>
   1b1a8:	push	{r3, r4, r5, lr}
   1b1ac:	mov	r5, r0
   1b1b0:	mov	r0, r1
   1b1b4:	mov	r4, r1
   1b1b8:	bl	11910 <malloc@plt>
   1b1bc:	cmp	r0, #0
   1b1c0:	popeq	{r3, r4, r5, pc}
   1b1c4:	mov	r1, r5
   1b1c8:	mov	r2, r4
   1b1cc:	pop	{r3, r4, r5, lr}
   1b1d0:	b	117e4 <memcpy@plt>
   1b1d4:	ldrb	r3, [r0]
   1b1d8:	cmp	r3, #0
   1b1dc:	bxeq	lr
   1b1e0:	add	ip, r0, #1
   1b1e4:	cmp	r3, r1
   1b1e8:	strbeq	r2, [ip, #-1]
   1b1ec:	ldrb	r3, [ip], #1
   1b1f0:	cmp	r3, #0
   1b1f4:	bne	1b1e4 <__assert_fail@plt+0x9604>
   1b1f8:	bx	lr
   1b1fc:	push	{r4, r5, r6}
   1b200:	mov	r3, #0
   1b204:	mov	r6, #95	; 0x5f
   1b208:	movw	r5, #4094	; 0xffe
   1b20c:	ldrb	ip, [r0, r3]
   1b210:	add	r4, r0, r3
   1b214:	cmp	ip, #45	; 0x2d
   1b218:	beq	1b2a4 <__assert_fail@plt+0x96c4>
   1b21c:	bls	1b288 <__assert_fail@plt+0x96a8>
   1b220:	cmp	ip, #91	; 0x5b
   1b224:	beq	1b23c <__assert_fail@plt+0x965c>
   1b228:	cmp	ip, #93	; 0x5d
   1b22c:	bne	1b25c <__assert_fail@plt+0x967c>
   1b230:	mvn	r0, #21
   1b234:	pop	{r4, r5, r6}
   1b238:	bx	lr
   1b23c:	strb	ip, [r1, r3]
   1b240:	add	r3, r3, #1
   1b244:	ldrb	ip, [r4, #1]!
   1b248:	cmp	ip, #0
   1b24c:	cmpne	ip, #93	; 0x5d
   1b250:	bne	1b23c <__assert_fail@plt+0x965c>
   1b254:	cmp	ip, #93	; 0x5d
   1b258:	bne	1b230 <__assert_fail@plt+0x9650>
   1b25c:	strb	ip, [r1, r3]
   1b260:	add	r3, r3, #1
   1b264:	cmp	r3, r5
   1b268:	bls	1b20c <__assert_fail@plt+0x962c>
   1b26c:	cmp	r2, #0
   1b270:	mov	r0, #0
   1b274:	strb	r0, [r1, r3]
   1b278:	beq	1b2ac <__assert_fail@plt+0x96cc>
   1b27c:	str	r3, [r2]
   1b280:	pop	{r4, r5, r6}
   1b284:	bx	lr
   1b288:	cmp	ip, #0
   1b28c:	bne	1b25c <__assert_fail@plt+0x967c>
   1b290:	cmp	r2, #0
   1b294:	mov	r0, #0
   1b298:	strb	r0, [r1, r3]
   1b29c:	bne	1b27c <__assert_fail@plt+0x969c>
   1b2a0:	b	1b2ac <__assert_fail@plt+0x96cc>
   1b2a4:	strb	r6, [r1, r3]
   1b2a8:	b	1b260 <__assert_fail@plt+0x9680>
   1b2ac:	mov	r0, r2
   1b2b0:	b	1b280 <__assert_fail@plt+0x96a0>
   1b2b4:	cmp	r0, #0
   1b2b8:	push	{r4}		; (str r4, [sp, #-4]!)
   1b2bc:	beq	1b354 <__assert_fail@plt+0x9774>
   1b2c0:	ldrb	r3, [r0]
   1b2c4:	cmp	r3, #0
   1b2c8:	movne	r1, r0
   1b2cc:	movne	ip, #0
   1b2d0:	movne	r4, #95	; 0x5f
   1b2d4:	beq	1b304 <__assert_fail@plt+0x9724>
   1b2d8:	cmp	r3, #91	; 0x5b
   1b2dc:	beq	1b310 <__assert_fail@plt+0x9730>
   1b2e0:	cmp	r3, #93	; 0x5d
   1b2e4:	beq	1b354 <__assert_fail@plt+0x9774>
   1b2e8:	cmp	r3, #45	; 0x2d
   1b2ec:	strbeq	r4, [r1]
   1b2f0:	add	ip, ip, #1
   1b2f4:	add	r1, r0, ip
   1b2f8:	ldrb	r3, [r0, ip]
   1b2fc:	cmp	r3, #0
   1b300:	bne	1b2d8 <__assert_fail@plt+0x96f8>
   1b304:	mov	r0, #0
   1b308:	pop	{r4}		; (ldr r4, [sp], #4)
   1b30c:	bx	lr
   1b310:	ldrb	r2, [r1]
   1b314:	cmp	r2, #0
   1b318:	beq	1b344 <__assert_fail@plt+0x9764>
   1b31c:	cmp	r2, #93	; 0x5d
   1b320:	mov	r2, #0
   1b324:	bne	1b334 <__assert_fail@plt+0x9754>
   1b328:	b	1b344 <__assert_fail@plt+0x9764>
   1b32c:	cmp	r3, #93	; 0x5d
   1b330:	beq	1b344 <__assert_fail@plt+0x9764>
   1b334:	ldrb	r3, [r1, #1]!
   1b338:	add	r2, r2, #1
   1b33c:	cmp	r3, #0
   1b340:	bne	1b32c <__assert_fail@plt+0x974c>
   1b344:	add	ip, ip, r2
   1b348:	ldrb	r3, [r0, ip]
   1b34c:	cmp	r3, #0
   1b350:	bne	1b2f0 <__assert_fail@plt+0x9710>
   1b354:	mvn	r0, #21
   1b358:	pop	{r4}		; (ldr r4, [sp], #4)
   1b35c:	bx	lr
   1b360:	push	{r4, r5}
   1b364:	mov	r3, #0
   1b368:	mov	r5, #95	; 0x5f
   1b36c:	movw	r4, #4095	; 0xfff
   1b370:	b	1b384 <__assert_fail@plt+0x97a4>
   1b374:	strb	ip, [r1, r3]
   1b378:	add	r3, r3, #1
   1b37c:	cmp	r3, r4
   1b380:	beq	1b3a0 <__assert_fail@plt+0x97c0>
   1b384:	ldrb	ip, [r0, r3]
   1b388:	cmp	ip, #45	; 0x2d
   1b38c:	strbeq	r5, [r1, r3]
   1b390:	beq	1b378 <__assert_fail@plt+0x9798>
   1b394:	cmp	ip, #0
   1b398:	cmpne	ip, #46	; 0x2e
   1b39c:	bne	1b374 <__assert_fail@plt+0x9794>
   1b3a0:	mov	r0, #0
   1b3a4:	cmp	r2, #0
   1b3a8:	strb	r0, [r1, r3]
   1b3ac:	mov	r0, r1
   1b3b0:	strne	r3, [r2]
   1b3b4:	pop	{r4, r5}
   1b3b8:	bx	lr
   1b3bc:	push	{r3, r4, r5, lr}
   1b3c0:	mov	r5, r1
   1b3c4:	mov	r4, r2
   1b3c8:	bl	1176c <basename@plt>
   1b3cc:	subs	r3, r0, #0
   1b3d0:	beq	1b3f0 <__assert_fail@plt+0x9810>
   1b3d4:	ldrb	r3, [r3]
   1b3d8:	cmp	r3, #0
   1b3dc:	beq	1b3f0 <__assert_fail@plt+0x9810>
   1b3e0:	mov	r1, r5
   1b3e4:	mov	r2, r4
   1b3e8:	pop	{r3, r4, r5, lr}
   1b3ec:	b	1b360 <__assert_fail@plt+0x9780>
   1b3f0:	mov	r0, #0
   1b3f4:	pop	{r3, r4, r5, pc}
   1b3f8:	push	{r4, r5, r6, lr}
   1b3fc:	mov	r6, r0
   1b400:	ldr	r4, [pc, #80]	; 1b458 <__assert_fail@plt+0x9878>
   1b404:	mov	r5, r1
   1b408:	ldr	r3, [pc, #76]	; 1b45c <__assert_fail@plt+0x987c>
   1b40c:	add	r4, pc, r4
   1b410:	add	r3, pc, r3
   1b414:	add	r4, r4, #8
   1b418:	mov	r1, r3
   1b41c:	ldr	r3, [r4, #-4]
   1b420:	cmp	r3, r5
   1b424:	rsb	r0, r3, r5
   1b428:	add	r0, r6, r0
   1b42c:	bcs	1b43c <__assert_fail@plt+0x985c>
   1b430:	bl	11754 <strcmp@plt>
   1b434:	cmp	r0, #0
   1b438:	beq	1b450 <__assert_fail@plt+0x9870>
   1b43c:	ldr	r3, [r4], #8
   1b440:	cmp	r3, #0
   1b444:	bne	1b418 <__assert_fail@plt+0x9838>
   1b448:	mov	r0, r3
   1b44c:	pop	{r4, r5, r6, pc}
   1b450:	mov	r0, #1
   1b454:	pop	{r4, r5, r6, pc}
   1b458:	andeq	r3, r2, ip, lsr sl
   1b45c:	andeq	r1, r1, ip, asr #21
   1b460:	push	{r4, r5, r6, r7, r8, lr}
   1b464:	mov	r8, r1
   1b468:	sub	r4, r2, #1
   1b46c:	mov	r7, r0
   1b470:	mov	r6, r1
   1b474:	mov	r5, #0
   1b478:	b	1b490 <__assert_fail@plt+0x98b0>
   1b47c:	add	r5, r5, r0
   1b480:	rsb	r4, r0, r4
   1b484:	add	r6, r8, r5
   1b488:	cmp	r4, #0
   1b48c:	beq	1b4c8 <__assert_fail@plt+0x98e8>
   1b490:	mov	r0, r7
   1b494:	mov	r1, r6
   1b498:	mov	r2, r4
   1b49c:	bl	11790 <read@plt>
   1b4a0:	cmp	r0, #0
   1b4a4:	beq	1b4c8 <__assert_fail@plt+0x98e8>
   1b4a8:	bgt	1b47c <__assert_fail@plt+0x989c>
   1b4ac:	bl	119f4 <__errno_location@plt>
   1b4b0:	ldr	r0, [r0]
   1b4b4:	cmp	r0, #11
   1b4b8:	cmpne	r0, #4
   1b4bc:	beq	1b488 <__assert_fail@plt+0x98a8>
   1b4c0:	rsb	r0, r0, #0
   1b4c4:	pop	{r4, r5, r6, r7, r8, pc}
   1b4c8:	mov	r3, #0
   1b4cc:	mov	r0, r5
   1b4d0:	strb	r3, [r6]
   1b4d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b4d8:	push	{r3, r4, r5, r6, r7, lr}
   1b4dc:	mov	r7, r0
   1b4e0:	mov	r6, r1
   1b4e4:	mov	r4, r2
   1b4e8:	mov	r5, #0
   1b4ec:	b	1b500 <__assert_fail@plt+0x9920>
   1b4f0:	rsb	r4, r0, r4
   1b4f4:	add	r5, r5, r0
   1b4f8:	cmp	r4, #0
   1b4fc:	beq	1b538 <__assert_fail@plt+0x9958>
   1b500:	mov	r0, r7
   1b504:	add	r1, r6, r5
   1b508:	mov	r2, r4
   1b50c:	bl	11a6c <write@plt>
   1b510:	cmp	r0, #0
   1b514:	beq	1b538 <__assert_fail@plt+0x9958>
   1b518:	bgt	1b4f0 <__assert_fail@plt+0x9910>
   1b51c:	bl	119f4 <__errno_location@plt>
   1b520:	ldr	r0, [r0]
   1b524:	cmp	r0, #11
   1b528:	cmpne	r0, #4
   1b52c:	beq	1b4f8 <__assert_fail@plt+0x9918>
   1b530:	rsb	r0, r0, #0
   1b534:	pop	{r3, r4, r5, r6, r7, pc}
   1b538:	mov	r0, r5
   1b53c:	pop	{r3, r4, r5, r6, r7, pc}
   1b540:	ldr	r3, [pc, #176]	; 1b5f8 <__assert_fail@plt+0x9a18>
   1b544:	ldr	ip, [pc, #176]	; 1b5fc <__assert_fail@plt+0x9a1c>
   1b548:	add	r3, pc, r3
   1b54c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b550:	sub	sp, sp, #44	; 0x2c
   1b554:	ldr	r6, [r3, ip]
   1b558:	add	r4, sp, #4
   1b55c:	mov	r7, r1
   1b560:	mov	r8, r2
   1b564:	mov	r5, #0
   1b568:	mov	r1, r4
   1b56c:	ldr	r3, [r6]
   1b570:	mov	r2, #32
   1b574:	str	r5, [r7]
   1b578:	str	r3, [sp, #36]	; 0x24
   1b57c:	bl	1b460 <__assert_fail@plt+0x9880>
   1b580:	cmp	r0, #0
   1b584:	blt	1b5d4 <__assert_fail@plt+0x99f4>
   1b588:	bl	119f4 <__errno_location@plt>
   1b58c:	mov	r2, r8
   1b590:	mov	r1, sp
   1b594:	str	r5, [r0]
   1b598:	mov	r0, r4
   1b59c:	bl	11760 <strtol@plt>
   1b5a0:	ldr	r8, [sp]
   1b5a4:	cmp	r8, r4
   1b5a8:	mov	r9, r0
   1b5ac:	beq	1b5ec <__assert_fail@plt+0x9a0c>
   1b5b0:	bl	1197c <__ctype_b_loc@plt>
   1b5b4:	ldrb	r3, [r8]
   1b5b8:	lsl	r3, r3, #1
   1b5bc:	ldr	r2, [r0]
   1b5c0:	ldrh	r3, [r2, r3]
   1b5c4:	tst	r3, #8192	; 0x2000
   1b5c8:	beq	1b5ec <__assert_fail@plt+0x9a0c>
   1b5cc:	mov	r0, r5
   1b5d0:	str	r9, [r7]
   1b5d4:	ldr	r2, [sp, #36]	; 0x24
   1b5d8:	ldr	r3, [r6]
   1b5dc:	cmp	r2, r3
   1b5e0:	bne	1b5f4 <__assert_fail@plt+0x9a14>
   1b5e4:	add	sp, sp, #44	; 0x2c
   1b5e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b5ec:	mvn	r0, #21
   1b5f0:	b	1b5d4 <__assert_fail@plt+0x99f4>
   1b5f4:	bl	11838 <__stack_chk_fail@plt>
   1b5f8:			; <UNDEFINED> instruction: 0x00023ab0
   1b5fc:	andeq	r0, r0, ip, lsr #3
   1b600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b604:	mov	r4, r0
   1b608:	mov	r0, #256	; 0x100
   1b60c:	mov	r7, r1
   1b610:	bl	11910 <malloc@plt>
   1b614:	subs	r5, r0, #0
   1b618:	beq	1b734 <__assert_fail@plt+0x9b54>
   1b61c:	ldr	r3, [r4, #4]
   1b620:	mov	r8, #0
   1b624:	ldr	r2, [r4, #8]
   1b628:	mov	r9, #256	; 0x100
   1b62c:	mov	r6, r8
   1b630:	cmp	r3, r2
   1b634:	bcs	1b680 <__assert_fail@plt+0x9aa0>
   1b638:	add	r2, r3, #1
   1b63c:	str	r2, [r4, #4]
   1b640:	ldrb	r0, [r3]
   1b644:	cmp	r0, #10
   1b648:	beq	1b694 <__assert_fail@plt+0x9ab4>
   1b64c:	cmp	r0, #92	; 0x5c
   1b650:	beq	1b6cc <__assert_fail@plt+0x9aec>
   1b654:	cmn	r0, #1
   1b658:	beq	1b68c <__assert_fail@plt+0x9aac>
   1b65c:	add	sl, r6, #1
   1b660:	strb	r0, [r5, r6]
   1b664:	cmp	sl, r9
   1b668:	beq	1b708 <__assert_fail@plt+0x9b28>
   1b66c:	ldr	r3, [r4, #4]
   1b670:	mov	r6, sl
   1b674:	ldr	r2, [r4, #8]
   1b678:	cmp	r3, r2
   1b67c:	bcc	1b638 <__assert_fail@plt+0x9a58>
   1b680:	mov	r0, r4
   1b684:	bl	11ac0 <__uflow@plt>
   1b688:	b	1b644 <__assert_fail@plt+0x9a64>
   1b68c:	cmp	r6, #0
   1b690:	beq	1b6bc <__assert_fail@plt+0x9adc>
   1b694:	cmp	r7, #0
   1b698:	mov	r3, #0
   1b69c:	add	r8, r8, #1
   1b6a0:	strb	r3, [r5, r6]
   1b6a4:	beq	1b728 <__assert_fail@plt+0x9b48>
   1b6a8:	ldr	r2, [r7]
   1b6ac:	mov	r6, r5
   1b6b0:	mov	r5, r3
   1b6b4:	add	r8, r2, r8
   1b6b8:	str	r8, [r7]
   1b6bc:	mov	r0, r5
   1b6c0:	bl	117c0 <free@plt>
   1b6c4:	mov	r0, r6
   1b6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b6cc:	ldr	r3, [r4, #4]
   1b6d0:	ldr	r2, [r4, #8]
   1b6d4:	cmp	r3, r2
   1b6d8:	bcs	1b744 <__assert_fail@plt+0x9b64>
   1b6dc:	add	r2, r3, #1
   1b6e0:	str	r2, [r4, #4]
   1b6e4:	ldrb	r0, [r3]
   1b6e8:	cmp	r0, #10
   1b6ec:	addeq	r8, r8, #1
   1b6f0:	moveq	sl, r6
   1b6f4:	beq	1b66c <__assert_fail@plt+0x9a8c>
   1b6f8:	add	sl, r6, #1
   1b6fc:	strb	r0, [r5, r6]
   1b700:	cmp	sl, r9
   1b704:	bne	1b66c <__assert_fail@plt+0x9a8c>
   1b708:	lsl	r9, r9, #1
   1b70c:	mov	r0, r5
   1b710:	mov	r1, r9
   1b714:	bl	11844 <realloc@plt>
   1b718:	cmp	r0, #0
   1b71c:	beq	1b73c <__assert_fail@plt+0x9b5c>
   1b720:	mov	r5, r0
   1b724:	b	1b66c <__assert_fail@plt+0x9a8c>
   1b728:	mov	r6, r5
   1b72c:	mov	r5, r7
   1b730:	b	1b6bc <__assert_fail@plt+0x9adc>
   1b734:	mov	r6, r5
   1b738:	b	1b6bc <__assert_fail@plt+0x9adc>
   1b73c:	mov	r6, r0
   1b740:	b	1b6bc <__assert_fail@plt+0x9adc>
   1b744:	mov	r0, r4
   1b748:	bl	11ac0 <__uflow@plt>
   1b74c:	b	1b6e8 <__assert_fail@plt+0x9b08>
   1b750:	mov	r4, r0
   1b754:	mov	r0, r5
   1b758:	bl	117c0 <free@plt>
   1b75c:	mov	r0, r4
   1b760:	bl	11b8c <_Unwind_Resume@plt>
   1b764:	ldrb	r0, [r0]
   1b768:	subs	r3, r0, #47	; 0x2f
   1b76c:	rsbs	r0, r3, #0
   1b770:	adcs	r0, r0, r3
   1b774:	bx	lr
   1b778:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1b77c:	mov	r5, r0
   1b780:	bl	1b764 <__assert_fail@plt+0x9b84>
   1b784:	subs	r9, r0, #0
   1b788:	bne	1b7f8 <__assert_fail@plt+0x9c18>
   1b78c:	bl	11748 <get_current_dir_name@plt>
   1b790:	subs	r4, r0, #0
   1b794:	beq	1b80c <__assert_fail@plt+0x9c2c>
   1b798:	mov	r0, r5
   1b79c:	bl	119a0 <strlen@plt>
   1b7a0:	mov	r8, r0
   1b7a4:	mov	r0, r4
   1b7a8:	bl	119a0 <strlen@plt>
   1b7ac:	add	r1, r8, r0
   1b7b0:	mov	r6, r0
   1b7b4:	add	r1, r1, #2
   1b7b8:	mov	r0, r4
   1b7bc:	bl	11844 <realloc@plt>
   1b7c0:	subs	r7, r0, #0
   1b7c4:	beq	1b7e8 <__assert_fail@plt+0x9c08>
   1b7c8:	add	r0, r6, #1
   1b7cc:	mov	r3, #47	; 0x2f
   1b7d0:	mov	r1, r5
   1b7d4:	add	r2, r8, #1
   1b7d8:	add	r0, r7, r0
   1b7dc:	strb	r3, [r7, r6]
   1b7e0:	mov	r4, r9
   1b7e4:	bl	117e4 <memcpy@plt>
   1b7e8:	mov	r0, r4
   1b7ec:	bl	117c0 <free@plt>
   1b7f0:	mov	r0, r7
   1b7f4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1b7f8:	mov	r0, r5
   1b7fc:	mov	r4, #0
   1b800:	bl	11a18 <__strdup@plt>
   1b804:	mov	r7, r0
   1b808:	b	1b7e8 <__assert_fail@plt+0x9c08>
   1b80c:	mov	r7, r4
   1b810:	b	1b7e8 <__assert_fail@plt+0x9c08>
   1b814:	ldr	r3, [pc, #420]	; 1b9c0 <__assert_fail@plt+0x9de0>
   1b818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b81c:	mov	r8, r2
   1b820:	add	fp, sp, #32
   1b824:	ldr	r2, [pc, #408]	; 1b9c4 <__assert_fail@plt+0x9de4>
   1b828:	sub	sp, sp, #116	; 0x74
   1b82c:	add	r3, pc, r3
   1b830:	mov	r5, r0
   1b834:	mov	r6, r1
   1b838:	mov	r4, #0
   1b83c:	ldr	sl, [r3, r2]
   1b840:	sub	r7, fp, #148	; 0x94
   1b844:	mov	r9, r4
   1b848:	ldr	r3, [sl]
   1b84c:	str	r3, [fp, #-40]	; 0xffffffd8
   1b850:	bl	11a90 <strnlen@plt>
   1b854:	mov	r1, r5
   1b858:	add	r3, r0, #15
   1b85c:	mov	r2, r0
   1b860:	bic	r3, r3, #7
   1b864:	sub	sp, sp, r3
   1b868:	mov	ip, sp
   1b86c:	lsr	r3, ip, #3
   1b870:	strb	r4, [r0, r3, lsl #3]
   1b874:	lsl	r0, r3, #3
   1b878:	bl	117e4 <memcpy@plt>
   1b87c:	add	r6, r0, r6
   1b880:	mov	r5, r0
   1b884:	mov	r4, r6
   1b888:	mov	r0, #3
   1b88c:	mov	r1, r5
   1b890:	mov	r2, r7
   1b894:	bl	11b74 <__xstat64@plt>
   1b898:	cmp	r0, #0
   1b89c:	blt	1b918 <__assert_fail@plt+0x9d38>
   1b8a0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1b8a4:	and	r3, r3, #61440	; 0xf000
   1b8a8:	subs	r2, r3, #16384	; 0x4000
   1b8ac:	rsbs	r3, r2, #0
   1b8b0:	adcs	r3, r3, r2
   1b8b4:	cmp	r3, #0
   1b8b8:	bgt	1b92c <__assert_fail@plt+0x9d4c>
   1b8bc:	beq	1b9b4 <__assert_fail@plt+0x9dd4>
   1b8c0:	cmp	r4, r5
   1b8c4:	beq	1b948 <__assert_fail@plt+0x9d68>
   1b8c8:	strb	r9, [r4]
   1b8cc:	bls	1b888 <__assert_fail@plt+0x9ca8>
   1b8d0:	sub	r3, r4, #1
   1b8d4:	cmp	r3, r5
   1b8d8:	mov	r4, r3
   1b8dc:	beq	1b888 <__assert_fail@plt+0x9ca8>
   1b8e0:	ldrb	r2, [r3]
   1b8e4:	sub	r3, r3, #1
   1b8e8:	cmp	r2, #47	; 0x2f
   1b8ec:	bne	1b8d4 <__assert_fail@plt+0x9cf4>
   1b8f0:	ldrb	r3, [r4, #-1]
   1b8f4:	cmp	r3, #47	; 0x2f
   1b8f8:	bne	1b888 <__assert_fail@plt+0x9ca8>
   1b8fc:	sub	r4, r4, #1
   1b900:	cmp	r4, r5
   1b904:	bls	1b888 <__assert_fail@plt+0x9ca8>
   1b908:	ldrb	r3, [r4, #-1]
   1b90c:	cmp	r3, #47	; 0x2f
   1b910:	beq	1b8fc <__assert_fail@plt+0x9d1c>
   1b914:	b	1b888 <__assert_fail@plt+0x9ca8>
   1b918:	bl	119f4 <__errno_location@plt>
   1b91c:	ldr	r3, [r0]
   1b920:	rsb	r3, r3, #0
   1b924:	cmp	r3, #0
   1b928:	ble	1b8bc <__assert_fail@plt+0x9cdc>
   1b92c:	mov	r0, r4
   1b930:	bl	119a0 <strlen@plt>
   1b934:	add	r4, r4, r0
   1b938:	cmp	r6, r4
   1b93c:	movne	r3, #47	; 0x2f
   1b940:	strbne	r3, [r4]
   1b944:	beq	1b998 <__assert_fail@plt+0x9db8>
   1b948:	cmp	r6, r4
   1b94c:	movhi	r7, #47	; 0x2f
   1b950:	bhi	1b96c <__assert_fail@plt+0x9d8c>
   1b954:	b	1b998 <__assert_fail@plt+0x9db8>
   1b958:	mov	r0, r4
   1b95c:	bl	119a0 <strlen@plt>
   1b960:	strb	r7, [r4, r0]!
   1b964:	cmp	r6, r4
   1b968:	bls	1b998 <__assert_fail@plt+0x9db8>
   1b96c:	mov	r0, r5
   1b970:	mov	r1, r8
   1b974:	bl	11a24 <mkdir@plt>
   1b978:	cmp	r0, #0
   1b97c:	bge	1b958 <__assert_fail@plt+0x9d78>
   1b980:	bl	119f4 <__errno_location@plt>
   1b984:	ldr	r3, [r0]
   1b988:	cmp	r3, #17
   1b98c:	beq	1b958 <__assert_fail@plt+0x9d78>
   1b990:	rsb	r0, r3, #0
   1b994:	b	1b99c <__assert_fail@plt+0x9dbc>
   1b998:	mov	r0, #0
   1b99c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b9a0:	ldr	r3, [sl]
   1b9a4:	cmp	r2, r3
   1b9a8:	bne	1b9bc <__assert_fail@plt+0x9ddc>
   1b9ac:	sub	sp, fp, #32
   1b9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9b4:	mvn	r0, #19
   1b9b8:	b	1b99c <__assert_fail@plt+0x9dbc>
   1b9bc:	bl	11838 <__stack_chk_fail@plt>
   1b9c0:	andeq	r3, r2, ip, asr #15
   1b9c4:	andeq	r0, r0, ip, lsr #3
   1b9c8:	push	{r3, r4, r5, lr}
   1b9cc:	mov	r5, r1
   1b9d0:	mov	r1, #47	; 0x2f
   1b9d4:	mov	r4, r0
   1b9d8:	bl	11acc <strrchr@plt>
   1b9dc:	subs	r1, r0, #0
   1b9e0:	popeq	{r3, r4, r5, pc}
   1b9e4:	mov	r0, r4
   1b9e8:	mov	r2, r5
   1b9ec:	rsb	r1, r4, r1
   1b9f0:	pop	{r3, r4, r5, lr}
   1b9f4:	b	1b814 <__assert_fail@plt+0x9c34>
   1b9f8:	ldr	r1, [r0, #84]	; 0x54
   1b9fc:	mov	r2, #1000	; 0x3e8
   1ba00:	push	{r4, lr}
   1ba04:	mov	r3, #0
   1ba08:	ldr	r4, [r0, #80]	; 0x50
   1ba0c:	mov	r0, r1
   1ba10:	asr	r1, r1, #31
   1ba14:	bl	28d1c <__assert_fail@plt+0x1713c>
   1ba18:	movw	r3, #16960	; 0x4240
   1ba1c:	movt	r3, #15
   1ba20:	smlal	r0, r1, r3, r4
   1ba24:	pop	{r4, pc}
   1ba28:	push	{r4, r5, r6, lr}
   1ba2c:	mov	r1, #1
   1ba30:	ldr	r5, [sp, #20]
   1ba34:	mov	r6, r0
   1ba38:	ldr	r4, [sp, #24]
   1ba3c:	ldr	r2, [pc, #32]	; 1ba64 <__assert_fail@plt+0x9e84>
   1ba40:	ldr	r3, [sp, #16]
   1ba44:	add	r2, pc, r2
   1ba48:	bl	11a78 <__fprintf_chk@plt>
   1ba4c:	mov	r0, r6
   1ba50:	mov	r2, r5
   1ba54:	mov	r3, r4
   1ba58:	mov	r1, #1
   1ba5c:	bl	11940 <__vfprintf_chk@plt>
   1ba60:	pop	{r4, r5, r6, pc}
   1ba64:	andeq	r1, r1, r0, lsr r5
   1ba68:	ldr	r3, [pc, #140]	; 1bafc <__assert_fail@plt+0x9f1c>
   1ba6c:	cmp	r0, #0
   1ba70:	ldr	r2, [pc, #136]	; 1bb00 <__assert_fail@plt+0x9f20>
   1ba74:	add	r3, pc, r3
   1ba78:	push	{r4, r5, lr}
   1ba7c:	sub	sp, sp, #412	; 0x19c
   1ba80:	ldr	r4, [r3, r2]
   1ba84:	ldr	r3, [r4]
   1ba88:	str	r3, [sp, #404]	; 0x194
   1ba8c:	beq	1baac <__assert_fail@plt+0x9ecc>
   1ba90:	bl	1b778 <__assert_fail@plt+0x9b98>
   1ba94:	ldr	r2, [sp, #404]	; 0x194
   1ba98:	ldr	r3, [r4]
   1ba9c:	cmp	r2, r3
   1baa0:	bne	1baf8 <__assert_fail@plt+0x9f18>
   1baa4:	add	sp, sp, #412	; 0x19c
   1baa8:	pop	{r4, r5, pc}
   1baac:	add	r5, sp, #12
   1bab0:	mov	r0, r5
   1bab4:	bl	1182c <uname@plt>
   1bab8:	cmp	r0, #0
   1babc:	blt	1baf0 <__assert_fail@plt+0x9f10>
   1bac0:	ldr	r2, [pc, #60]	; 1bb04 <__assert_fail@plt+0x9f24>
   1bac4:	add	r5, r5, #130	; 0x82
   1bac8:	ldr	r3, [pc, #56]	; 1bb08 <__assert_fail@plt+0x9f28>
   1bacc:	add	r0, sp, #8
   1bad0:	str	r5, [sp]
   1bad4:	mov	r1, #1
   1bad8:	add	r2, pc, r2
   1badc:	add	r3, pc, r3
   1bae0:	bl	118ec <__asprintf_chk@plt>
   1bae4:	cmp	r0, #0
   1bae8:	ldrge	r0, [sp, #8]
   1baec:	bge	1ba94 <__assert_fail@plt+0x9eb4>
   1baf0:	mov	r0, #0
   1baf4:	b	1ba94 <__assert_fail@plt+0x9eb4>
   1baf8:	bl	11838 <__stack_chk_fail@plt>
   1bafc:	andeq	r3, r2, r4, lsl #11
   1bb00:	andeq	r0, r0, ip, lsr #3
   1bb04:	andeq	r1, r1, ip, lsr #9
   1bb08:			; <UNDEFINED> instruction: 0x000114b0
   1bb0c:	ldr	r3, [pc, #192]	; 1bbd4 <__assert_fail@plt+0x9ff4>
   1bb10:	cmp	r1, #0
   1bb14:	ldr	ip, [pc, #188]	; 1bbd8 <__assert_fail@plt+0x9ff8>
   1bb18:	add	r3, pc, r3
   1bb1c:	push	{r4, r5, r6, lr}
   1bb20:	sub	sp, sp, #4096	; 0x1000
   1bb24:	ldr	r4, [r3, ip]
   1bb28:	sub	sp, sp, #24
   1bb2c:	mov	r5, r2
   1bb30:	add	r2, sp, #8192	; 0x2000
   1bb34:	ldr	r3, [r4]
   1bb38:	str	r3, [r2, #-4076]	; 0xfffff014
   1bb3c:	beq	1bb6c <__assert_fail@plt+0x9f8c>
   1bb40:	mov	r0, r1
   1bb44:	mov	r1, r5
   1bb48:	bl	1fe40 <__assert_fail@plt+0xe260>
   1bb4c:	add	r3, sp, #8192	; 0x2000
   1bb50:	ldr	r2, [r3, #-4076]	; 0xfffff014
   1bb54:	ldr	r3, [r4]
   1bb58:	cmp	r2, r3
   1bb5c:	bne	1bbd0 <__assert_fail@plt+0x9ff0>
   1bb60:	add	sp, sp, #4096	; 0x1000
   1bb64:	add	sp, sp, #24
   1bb68:	pop	{r4, r5, r6, pc}
   1bb6c:	add	r6, sp, #20
   1bb70:	ldr	r2, [pc, #100]	; 1bbdc <__assert_fail@plt+0x9ffc>
   1bb74:	ldr	r3, [pc, #100]	; 1bbe0 <__assert_fail@plt+0xa000>
   1bb78:	mov	r1, #4096	; 0x1000
   1bb7c:	add	r2, pc, r2
   1bb80:	str	r0, [sp, #4]
   1bb84:	add	r3, pc, r3
   1bb88:	mov	r0, r6
   1bb8c:	str	r2, [sp]
   1bb90:	mov	r2, #1
   1bb94:	str	r3, [sp, #8]
   1bb98:	mov	r3, r1
   1bb9c:	bl	11bd4 <__snprintf_chk@plt>
   1bba0:	mov	r0, r6
   1bba4:	bl	1f694 <__assert_fail@plt+0xdab4>
   1bba8:	subs	r6, r0, #0
   1bbac:	moveq	r0, r6
   1bbb0:	beq	1bb4c <__assert_fail@plt+0x9f6c>
   1bbb4:	mov	r1, r5
   1bbb8:	bl	1f7e0 <__assert_fail@plt+0xdc00>
   1bbbc:	mov	r5, r0
   1bbc0:	mov	r0, r6
   1bbc4:	bl	1f730 <__assert_fail@plt+0xdb50>
   1bbc8:	mov	r0, r5
   1bbcc:	b	1bb4c <__assert_fail@plt+0x9f6c>
   1bbd0:	bl	11838 <__stack_chk_fail@plt>
   1bbd4:	andeq	r3, r2, r0, ror #9
   1bbd8:	andeq	r0, r0, ip, lsr #3
   1bbdc:	andeq	r1, r1, r0, lsr #8
   1bbe0:	andeq	r1, r1, r4, lsr #8
   1bbe4:	push	{r4, r5, r6, r7, lr}
   1bbe8:	mov	ip, r0
   1bbec:	ldr	r4, [pc, #100]	; 1bc58 <__assert_fail@plt+0xa078>
   1bbf0:	sub	sp, sp, #28
   1bbf4:	ldr	r6, [pc, #96]	; 1bc5c <__assert_fail@plt+0xa07c>
   1bbf8:	add	r4, pc, r4
   1bbfc:	ldr	r5, [ip, #8]
   1bc00:	ldr	r7, [sp, #48]	; 0x30
   1bc04:	mov	r0, r4
   1bc08:	cmp	r5, #0
   1bc0c:	ldr	r4, [r0, r6]
   1bc10:	ldr	r5, [sp, #52]	; 0x34
   1bc14:	ldr	r0, [r4]
   1bc18:	str	r0, [sp, #20]
   1bc1c:	beq	1bc3c <__assert_fail@plt+0xa05c>
   1bc20:	ldr	r0, [ip, #12]
   1bc24:	add	lr, sp, #56	; 0x38
   1bc28:	str	r7, [sp]
   1bc2c:	stmib	sp, {r5, lr}
   1bc30:	ldr	ip, [ip, #8]
   1bc34:	str	lr, [sp, #16]
   1bc38:	blx	ip
   1bc3c:	ldr	r2, [sp, #20]
   1bc40:	ldr	r3, [r4]
   1bc44:	cmp	r2, r3
   1bc48:	bne	1bc54 <__assert_fail@plt+0xa074>
   1bc4c:	add	sp, sp, #28
   1bc50:	pop	{r4, r5, r6, r7, pc}
   1bc54:	bl	11838 <__stack_chk_fail@plt>
   1bc58:	andeq	r3, r2, r0, lsl #8
   1bc5c:	andeq	r0, r0, ip, lsr #3
   1bc60:	ldr	r0, [r0, #20]
   1bc64:	bx	lr
   1bc68:	cmp	r0, #0
   1bc6c:	ldrne	r3, [r0]
   1bc70:	addne	r3, r3, #1
   1bc74:	strne	r3, [r0]
   1bc78:	bx	lr
   1bc7c:	cmp	r0, #0
   1bc80:	ldrne	r0, [r0, #4]
   1bc84:	mvneq	r0, #0
   1bc88:	bx	lr
   1bc8c:	push	{r4, r5, lr}
   1bc90:	subs	r4, r0, #0
   1bc94:	sub	sp, sp, #20
   1bc98:	mov	r5, r1
   1bc9c:	beq	1bcb4 <__assert_fail@plt+0xa0d4>
   1bca0:	str	r1, [r4, #8]
   1bca4:	str	r2, [r4, #12]
   1bca8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1bcac:	cmp	r0, #5
   1bcb0:	bgt	1bcbc <__assert_fail@plt+0xa0dc>
   1bcb4:	add	sp, sp, #20
   1bcb8:	pop	{r4, r5, pc}
   1bcbc:	ldr	r2, [pc, #52]	; 1bcf8 <__assert_fail@plt+0xa118>
   1bcc0:	mov	r0, r4
   1bcc4:	ldr	ip, [pc, #48]	; 1bcfc <__assert_fail@plt+0xa11c>
   1bcc8:	mov	r1, #6
   1bccc:	add	r2, pc, r2
   1bcd0:	str	r2, [sp, #4]
   1bcd4:	ldr	r2, [pc, #36]	; 1bd00 <__assert_fail@plt+0xa120>
   1bcd8:	add	ip, pc, ip
   1bcdc:	str	r5, [sp, #8]
   1bce0:	mov	r3, #356	; 0x164
   1bce4:	str	ip, [sp]
   1bce8:	add	r2, pc, r2
   1bcec:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1bcf0:	add	sp, sp, #20
   1bcf4:	pop	{r4, r5, pc}
   1bcf8:	andeq	r1, r1, r0, lsl #6
   1bcfc:	andeq	r1, r1, r8, ror #4
   1bd00:	ldrdeq	r1, [r1], -r0
   1bd04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd08:	mov	ip, r1
   1bd0c:	ldr	lr, [pc, #484]	; 1bef8 <__assert_fail@plt+0xa318>
   1bd10:	add	r4, ip, #8
   1bd14:	ldr	r1, [pc, #480]	; 1befc <__assert_fail@plt+0xa31c>
   1bd18:	sub	sp, sp, #4096	; 0x1000
   1bd1c:	add	lr, pc, lr
   1bd20:	sub	sp, sp, #52	; 0x34
   1bd24:	mov	r8, r0
   1bd28:	ldr	r0, [r0, r4, lsl #2]
   1bd2c:	ldr	r1, [lr, r1]
   1bd30:	mov	r6, r3
   1bd34:	mov	r3, lr
   1bd38:	cmp	r0, #0
   1bd3c:	mov	r9, r2
   1bd40:	ldr	r3, [r1]
   1bd44:	str	r1, [sp, #36]	; 0x24
   1bd48:	add	r1, sp, #8192	; 0x2000
   1bd4c:	str	r3, [r1, #-4052]	; 0xfffff02c
   1bd50:	beq	1be8c <__assert_fail@plt+0xa2ac>
   1bd54:	mov	r1, r2
   1bd58:	bl	1ff1c <__assert_fail@plt+0xe33c>
   1bd5c:	str	r0, [sp, #32]
   1bd60:	ldr	r2, [sp, #32]
   1bd64:	cmp	r2, #0
   1bd68:	beq	1be58 <__assert_fail@plt+0xa278>
   1bd6c:	movw	sl, #61432	; 0xeff8
   1bd70:	add	fp, sp, #40	; 0x28
   1bd74:	movt	sl, #65535	; 0xffff
   1bd78:	mov	r4, r2
   1bd7c:	mov	r5, #0
   1bd80:	b	1bdac <__assert_fail@plt+0xa1cc>
   1bd84:	add	r3, sp, #4096	; 0x1000
   1bd88:	ldr	r0, [r6]
   1bd8c:	add	r3, r3, #48	; 0x30
   1bd90:	add	r5, r5, #1
   1bd94:	ldr	r1, [r3, sl]
   1bd98:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1bd9c:	str	r0, [r6]
   1bda0:	ldr	r4, [r4]
   1bda4:	cmp	r4, #0
   1bda8:	beq	1be5c <__assert_fail@plt+0xa27c>
   1bdac:	add	r7, r4, #12
   1bdb0:	mov	r0, r8
   1bdb4:	mov	r1, r9
   1bdb8:	mov	r3, fp
   1bdbc:	mov	r2, r7
   1bdc0:	bl	204b4 <__assert_fail@plt+0xe8d4>
   1bdc4:	cmp	r0, #0
   1bdc8:	bge	1bd84 <__assert_fail@plt+0xa1a4>
   1bdcc:	mov	ip, r0
   1bdd0:	mov	r0, r8
   1bdd4:	str	ip, [sp, #28]
   1bdd8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1bddc:	ldr	ip, [sp, #28]
   1bde0:	cmp	r0, #2
   1bde4:	ble	1be30 <__assert_fail@plt+0xa250>
   1bde8:	rsb	r0, ip, #0
   1bdec:	bl	11928 <strerror@plt>
   1bdf0:	ldr	r2, [pc, #264]	; 1bf00 <__assert_fail@plt+0xa320>
   1bdf4:	ldr	lr, [pc, #264]	; 1bf04 <__assert_fail@plt+0xa324>
   1bdf8:	mov	r1, #3
   1bdfc:	add	r2, pc, r2
   1be00:	str	r2, [sp, #4]
   1be04:	ldr	r2, [pc, #252]	; 1bf08 <__assert_fail@plt+0xa328>
   1be08:	add	lr, pc, lr
   1be0c:	str	r9, [sp, #8]
   1be10:	movw	r3, #451	; 0x1c3
   1be14:	str	r7, [sp, #12]
   1be18:	add	r2, pc, r2
   1be1c:	str	lr, [sp]
   1be20:	str	r0, [sp, #16]
   1be24:	mov	r0, r8
   1be28:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1be2c:	ldr	ip, [sp, #28]
   1be30:	mov	r1, r5
   1be34:	ldr	r0, [r6]
   1be38:	str	ip, [sp, #28]
   1be3c:	bl	1d128 <__assert_fail@plt+0xb548>
   1be40:	str	r0, [r6]
   1be44:	ldr	r0, [sp, #32]
   1be48:	bl	1f670 <__assert_fail@plt+0xda90>
   1be4c:	ldr	ip, [sp, #28]
   1be50:	mov	r0, ip
   1be54:	b	1be68 <__assert_fail@plt+0xa288>
   1be58:	ldr	r5, [sp, #32]
   1be5c:	ldr	r0, [sp, #32]
   1be60:	bl	1f670 <__assert_fail@plt+0xda90>
   1be64:	mov	r0, r5
   1be68:	add	r1, sp, #8192	; 0x2000
   1be6c:	ldr	r2, [r1, #-4052]	; 0xfffff02c
   1be70:	ldr	r1, [sp, #36]	; 0x24
   1be74:	ldr	r3, [r1]
   1be78:	cmp	r2, r3
   1be7c:	bne	1bef4 <__assert_fail@plt+0xa314>
   1be80:	add	sp, sp, #4096	; 0x1000
   1be84:	add	sp, sp, #52	; 0x34
   1be88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be8c:	ldr	r5, [pc, #120]	; 1bf0c <__assert_fail@plt+0xa32c>
   1be90:	add	r4, sp, #44	; 0x2c
   1be94:	ldr	r3, [pc, #116]	; 1bf10 <__assert_fail@plt+0xa330>
   1be98:	mov	r1, #4096	; 0x1000
   1be9c:	add	r5, pc, r5
   1bea0:	mov	r2, #1
   1bea4:	add	r3, pc, r3
   1bea8:	str	r3, [sp]
   1beac:	ldr	ip, [r5, ip, lsl #3]
   1beb0:	mov	r0, r4
   1beb4:	ldr	lr, [r8, #20]
   1beb8:	mov	r3, r1
   1bebc:	str	ip, [sp, #8]
   1bec0:	str	lr, [sp, #4]
   1bec4:	bl	11bd4 <__snprintf_chk@plt>
   1bec8:	mov	r0, r4
   1becc:	bl	1f694 <__assert_fail@plt+0xdab4>
   1bed0:	subs	r4, r0, #0
   1bed4:	mvneq	r0, #37	; 0x25
   1bed8:	beq	1be68 <__assert_fail@plt+0xa288>
   1bedc:	mov	r1, r9
   1bee0:	bl	1f8bc <__assert_fail@plt+0xdcdc>
   1bee4:	str	r0, [sp, #32]
   1bee8:	mov	r0, r4
   1beec:	bl	1f730 <__assert_fail@plt+0xdb50>
   1bef0:	b	1bd60 <__assert_fail@plt+0xa180>
   1bef4:	bl	11838 <__stack_chk_fail@plt>
   1bef8:	ldrdeq	r3, [r2], -ip
   1befc:	andeq	r0, r0, ip, lsr #3
   1bf00:	strdeq	r1, [r1], -r8
   1bf04:	andeq	r1, r1, r0, asr #7
   1bf08:	andeq	r1, r1, r0, lsr #3
   1bf0c:	andeq	r2, r2, ip, asr #31
   1bf10:	strdeq	r1, [r1], -r8
   1bf14:	cmp	r0, #0
   1bf18:	strne	r1, [r0, #4]
   1bf1c:	bx	lr
   1bf20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bf24:	sub	sp, sp, #24
   1bf28:	ldr	r5, [pc, #628]	; 1c1a4 <__assert_fail@plt+0xa5c4>
   1bf2c:	mov	r8, r0
   1bf30:	ldr	r3, [pc, #624]	; 1c1a8 <__assert_fail@plt+0xa5c8>
   1bf34:	mov	r6, r1
   1bf38:	add	r5, pc, r5
   1bf3c:	mov	r0, #1
   1bf40:	mov	r1, #80	; 0x50
   1bf44:	ldr	r7, [r5, r3]
   1bf48:	ldr	r3, [r7]
   1bf4c:	str	r3, [sp, #20]
   1bf50:	bl	11718 <calloc@plt>
   1bf54:	subs	r4, r0, #0
   1bf58:	beq	1c098 <__assert_fail@plt+0xa4b8>
   1bf5c:	ldr	r3, [pc, #584]	; 1c1ac <__assert_fail@plt+0xa5cc>
   1bf60:	mov	r1, #1
   1bf64:	ldr	r2, [pc, #580]	; 1c1b0 <__assert_fail@plt+0xa5d0>
   1bf68:	mov	r0, r8
   1bf6c:	str	r1, [r4]
   1bf70:	mov	r8, #3
   1bf74:	add	r2, pc, r2
   1bf78:	str	r2, [r4, #8]
   1bf7c:	ldr	r3, [r5, r3]
   1bf80:	str	r8, [r4, #4]
   1bf84:	ldr	r3, [r3]
   1bf88:	str	r3, [r4, #12]
   1bf8c:	bl	1ba68 <__assert_fail@plt+0x9e88>
   1bf90:	str	r0, [r4, #20]
   1bf94:	ldr	r0, [pc, #536]	; 1c1b4 <__assert_fail@plt+0xa5d4>
   1bf98:	add	r0, pc, r0
   1bf9c:	bl	11784 <secure_getenv@plt>
   1bfa0:	subs	r9, r0, #0
   1bfa4:	beq	1c050 <__assert_fail@plt+0xa470>
   1bfa8:	add	r1, sp, #16
   1bfac:	mov	r2, #10
   1bfb0:	bl	11760 <strtol@plt>
   1bfb4:	ldr	r3, [sp, #16]
   1bfb8:	ldrb	r5, [r3]
   1bfbc:	cmp	r5, #0
   1bfc0:	mov	sl, r0
   1bfc4:	beq	1c044 <__assert_fail@plt+0xa464>
   1bfc8:	bl	1197c <__ctype_b_loc@plt>
   1bfcc:	lsl	r5, r5, #1
   1bfd0:	ldr	r3, [r0]
   1bfd4:	ldrh	r3, [r3, r5]
   1bfd8:	tst	r3, #8192	; 0x2000
   1bfdc:	bne	1c044 <__assert_fail@plt+0xa464>
   1bfe0:	ldr	r1, [pc, #464]	; 1c1b8 <__assert_fail@plt+0xa5d8>
   1bfe4:	mov	r0, r9
   1bfe8:	mov	r2, r8
   1bfec:	add	r1, pc, r1
   1bff0:	bl	11ba4 <strncmp@plt>
   1bff4:	cmp	r0, #0
   1bff8:	moveq	r1, r8
   1bffc:	beq	1c048 <__assert_fail@plt+0xa468>
   1c000:	ldr	r1, [pc, #436]	; 1c1bc <__assert_fail@plt+0xa5dc>
   1c004:	mov	r0, r9
   1c008:	mov	r2, #4
   1c00c:	add	r1, pc, r1
   1c010:	bl	11ba4 <strncmp@plt>
   1c014:	cmp	r0, #0
   1c018:	moveq	r1, #6
   1c01c:	beq	1c048 <__assert_fail@plt+0xa468>
   1c020:	ldr	r1, [pc, #408]	; 1c1c0 <__assert_fail@plt+0xa5e0>
   1c024:	mov	r0, r9
   1c028:	mov	r2, #5
   1c02c:	add	r1, pc, r1
   1c030:	bl	11ba4 <strncmp@plt>
   1c034:	cmp	r0, #0
   1c038:	moveq	r1, #7
   1c03c:	movne	r1, #0
   1c040:	b	1c048 <__assert_fail@plt+0xa468>
   1c044:	mov	r1, sl
   1c048:	mov	r0, r4
   1c04c:	bl	1bf14 <__assert_fail@plt+0xa334>
   1c050:	cmp	r6, #0
   1c054:	beq	1c0f0 <__assert_fail@plt+0xa510>
   1c058:	mov	r2, r6
   1c05c:	mov	r0, r4
   1c060:	add	r1, r4, #24
   1c064:	bl	1da54 <__assert_fail@plt+0xbe74>
   1c068:	cmp	r0, #0
   1c06c:	blt	1c0fc <__assert_fail@plt+0xa51c>
   1c070:	mov	r0, #256	; 0x100
   1c074:	mov	r1, #0
   1c078:	bl	1a810 <__assert_fail@plt+0x8c30>
   1c07c:	cmp	r0, #0
   1c080:	str	r0, [r4, #28]
   1c084:	mov	r0, r4
   1c088:	beq	1c12c <__assert_fail@plt+0xa54c>
   1c08c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c090:	cmp	r0, #5
   1c094:	bgt	1c0b4 <__assert_fail@plt+0xa4d4>
   1c098:	mov	r0, r4
   1c09c:	ldr	r2, [sp, #20]
   1c0a0:	ldr	r3, [r7]
   1c0a4:	cmp	r2, r3
   1c0a8:	bne	1c1a0 <__assert_fail@plt+0xa5c0>
   1c0ac:	add	sp, sp, #24
   1c0b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c0b4:	ldr	r2, [pc, #264]	; 1c1c4 <__assert_fail@plt+0xa5e4>
   1c0b8:	mov	r0, r4
   1c0bc:	ldr	ip, [pc, #260]	; 1c1c8 <__assert_fail@plt+0xa5e8>
   1c0c0:	mov	r1, #6
   1c0c4:	add	r2, pc, r2
   1c0c8:	str	r2, [sp, #4]
   1c0cc:	ldr	r2, [pc, #248]	; 1c1cc <__assert_fail@plt+0xa5ec>
   1c0d0:	add	ip, pc, ip
   1c0d4:	str	r4, [sp, #8]
   1c0d8:	movw	r3, #278	; 0x116
   1c0dc:	str	ip, [sp]
   1c0e0:	add	r2, pc, r2
   1c0e4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c0e8:	mov	r0, r4
   1c0ec:	b	1c09c <__assert_fail@plt+0xa4bc>
   1c0f0:	ldr	r6, [pc, #216]	; 1c1d0 <__assert_fail@plt+0xa5f0>
   1c0f4:	add	r6, pc, r6
   1c0f8:	b	1c058 <__assert_fail@plt+0xa478>
   1c0fc:	mov	r0, r4
   1c100:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c104:	cmp	r0, #2
   1c108:	bgt	1c16c <__assert_fail@plt+0xa58c>
   1c10c:	ldr	r0, [r4, #28]
   1c110:	bl	117c0 <free@plt>
   1c114:	ldr	r0, [r4, #20]
   1c118:	bl	117c0 <free@plt>
   1c11c:	mov	r0, r4
   1c120:	bl	117c0 <free@plt>
   1c124:	mov	r0, #0
   1c128:	b	1c09c <__assert_fail@plt+0xa4bc>
   1c12c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c130:	cmp	r0, #2
   1c134:	ble	1c10c <__assert_fail@plt+0xa52c>
   1c138:	ldr	lr, [pc, #148]	; 1c1d4 <__assert_fail@plt+0xa5f4>
   1c13c:	mov	r0, r4
   1c140:	ldr	ip, [pc, #144]	; 1c1d8 <__assert_fail@plt+0xa5f8>
   1c144:	mov	r1, #3
   1c148:	ldr	r2, [pc, #140]	; 1c1dc <__assert_fail@plt+0xa5fc>
   1c14c:	add	lr, pc, lr
   1c150:	add	ip, pc, ip
   1c154:	movw	r3, #274	; 0x112
   1c158:	add	r2, pc, r2
   1c15c:	str	lr, [sp]
   1c160:	str	ip, [sp, #4]
   1c164:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c168:	b	1c10c <__assert_fail@plt+0xa52c>
   1c16c:	ldr	lr, [pc, #108]	; 1c1e0 <__assert_fail@plt+0xa600>
   1c170:	mov	r0, r4
   1c174:	ldr	ip, [pc, #104]	; 1c1e4 <__assert_fail@plt+0xa604>
   1c178:	mov	r1, #3
   1c17c:	ldr	r2, [pc, #100]	; 1c1e8 <__assert_fail@plt+0xa608>
   1c180:	add	lr, pc, lr
   1c184:	add	ip, pc, ip
   1c188:	mov	r3, #268	; 0x10c
   1c18c:	add	r2, pc, r2
   1c190:	str	lr, [sp]
   1c194:	str	ip, [sp, #4]
   1c198:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c19c:	b	1c10c <__assert_fail@plt+0xa52c>
   1c1a0:	bl	11838 <__stack_chk_fail@plt>
   1c1a4:	andeq	r3, r2, r0, asr #1
   1c1a8:	andeq	r0, r0, ip, lsr #3
   1c1ac:			; <UNDEFINED> instruction: 0x000001b0
   1c1b0:			; <UNDEFINED> instruction: 0xfffffaac
   1c1b4:	muleq	r1, r4, r0
   1c1b8:	andeq	r1, r1, ip, asr #32
   1c1bc:	andeq	r1, r1, ip, ror #20
   1c1c0:	andeq	r1, r1, r0, lsl r0
   1c1c4:			; <UNDEFINED> instruction: 0x00010fbc
   1c1c8:	andeq	r0, r1, r0, lsr #28
   1c1cc:	ldrdeq	r0, [r1], -r8
   1c1d0:	andeq	r3, r2, r4, ror #1
   1c1d4:	andeq	r0, r1, r4, lsr #27
   1c1d8:	andeq	r0, r1, r0, lsl pc
   1c1dc:	andeq	r0, r1, r0, ror #28
   1c1e0:	andeq	r0, r1, r0, ror sp
   1c1e4:	andeq	r0, r1, r0, asr #29
   1c1e8:	andeq	r0, r1, ip, lsr #28
   1c1ec:	ldr	r0, [r0, #28]
   1c1f0:	b	1aca0 <__assert_fail@plt+0x90c0>
   1c1f4:	mov	r3, r1
   1c1f8:	ldr	r0, [r0, #28]
   1c1fc:	mov	r1, r2
   1c200:	mov	r2, r3
   1c204:	b	1a904 <__assert_fail@plt+0x8d24>
   1c208:	ldr	r0, [r0, #28]
   1c20c:	mov	r1, r2
   1c210:	b	1ae08 <__assert_fail@plt+0x9228>
   1c214:	push	{r4, r5, r6, lr}
   1c218:	mov	r4, r1
   1c21c:	mov	r6, r0
   1c220:	mov	r0, r1
   1c224:	ldr	r1, [pc, #52]	; 1c260 <__assert_fail@plt+0xa680>
   1c228:	mov	r5, r2
   1c22c:	mov	r2, #7
   1c230:	add	r1, pc, r1
   1c234:	bl	11ba4 <strncmp@plt>
   1c238:	cmp	r0, #0
   1c23c:	beq	1c248 <__assert_fail@plt+0xa668>
   1c240:	mov	r0, #0
   1c244:	pop	{r4, r5, r6, pc}
   1c248:	mov	r0, r6
   1c24c:	mov	r2, r4
   1c250:	mov	r3, r5
   1c254:	mov	r1, #2
   1c258:	pop	{r4, r5, r6, lr}
   1c25c:	b	1bd04 <__assert_fail@plt+0xa124>
   1c260:	andeq	pc, r0, r0, asr r7	; <UNPREDICTABLE>
   1c264:	mov	r3, r2
   1c268:	mov	r2, r1
   1c26c:	mov	r1, #1
   1c270:	b	1bd04 <__assert_fail@plt+0xa124>
   1c274:	ldr	r3, [pc, #292]	; 1c3a0 <__assert_fail@plt+0xa7c0>
   1c278:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c27c:	mov	r6, r2
   1c280:	ldr	r2, [pc, #284]	; 1c3a4 <__assert_fail@plt+0xa7c4>
   1c284:	add	r3, pc, r3
   1c288:	mov	r4, r0
   1c28c:	ldr	r0, [r6]
   1c290:	sub	sp, sp, #28
   1c294:	mov	r8, r1
   1c298:	ldr	r7, [r3, r2]
   1c29c:	cmp	r0, #0
   1c2a0:	ldr	r3, [r7]
   1c2a4:	str	r3, [sp, #20]
   1c2a8:	bne	1c380 <__assert_fail@plt+0xa7a0>
   1c2ac:	mov	r2, r1
   1c2b0:	ldr	r0, [r4, #20]
   1c2b4:	ldr	r1, [r4, #44]	; 0x2c
   1c2b8:	bl	1bb0c <__assert_fail@plt+0x9f2c>
   1c2bc:	subs	r9, r0, #0
   1c2c0:	moveq	r5, r9
   1c2c4:	beq	1c304 <__assert_fail@plt+0xa724>
   1c2c8:	mov	r0, r4
   1c2cc:	mov	r1, r8
   1c2d0:	add	r2, sp, #16
   1c2d4:	bl	203f0 <__assert_fail@plt+0xe810>
   1c2d8:	subs	r5, r0, #0
   1c2dc:	blt	1c328 <__assert_fail@plt+0xa748>
   1c2e0:	ldr	r0, [sp, #16]
   1c2e4:	mov	r1, #1
   1c2e8:	bl	2025c <__assert_fail@plt+0xe67c>
   1c2ec:	ldr	r0, [r6]
   1c2f0:	ldr	r1, [sp, #16]
   1c2f4:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1c2f8:	cmp	r0, #0
   1c2fc:	str	r0, [r6]
   1c300:	mvneq	r5, #11
   1c304:	mov	r0, r9
   1c308:	bl	117c0 <free@plt>
   1c30c:	ldr	r2, [sp, #20]
   1c310:	ldr	r3, [r7]
   1c314:	mov	r0, r5
   1c318:	cmp	r2, r3
   1c31c:	bne	1c37c <__assert_fail@plt+0xa79c>
   1c320:	add	sp, sp, #28
   1c324:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c328:	mov	r0, r4
   1c32c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c330:	cmp	r0, #2
   1c334:	ble	1c304 <__assert_fail@plt+0xa724>
   1c338:	rsb	r0, r5, #0
   1c33c:	bl	11928 <strerror@plt>
   1c340:	ldr	r2, [pc, #96]	; 1c3a8 <__assert_fail@plt+0xa7c8>
   1c344:	ldr	ip, [pc, #96]	; 1c3ac <__assert_fail@plt+0xa7cc>
   1c348:	mov	r1, #3
   1c34c:	add	r2, pc, r2
   1c350:	str	r2, [sp, #4]
   1c354:	ldr	r2, [pc, #84]	; 1c3b0 <__assert_fail@plt+0xa7d0>
   1c358:	add	ip, pc, ip
   1c35c:	str	r8, [sp, #8]
   1c360:	mov	r3, #532	; 0x214
   1c364:	str	ip, [sp]
   1c368:	add	r2, pc, r2
   1c36c:	str	r0, [sp, #12]
   1c370:	mov	r0, r4
   1c374:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c378:	b	1c304 <__assert_fail@plt+0xa724>
   1c37c:	bl	11838 <__stack_chk_fail@plt>
   1c380:	ldr	r0, [pc, #44]	; 1c3b4 <__assert_fail@plt+0xa7d4>
   1c384:	movw	r2, #523	; 0x20b
   1c388:	ldr	r1, [pc, #40]	; 1c3b8 <__assert_fail@plt+0xa7d8>
   1c38c:	ldr	r3, [pc, #40]	; 1c3bc <__assert_fail@plt+0xa7dc>
   1c390:	add	r0, pc, r0
   1c394:	add	r1, pc, r1
   1c398:	add	r3, pc, r3
   1c39c:	bl	11be0 <__assert_fail@plt>
   1c3a0:	andeq	r2, r2, r4, ror sp
   1c3a4:	andeq	r0, r0, ip, lsr #3
   1c3a8:	andeq	r0, r1, ip, asr sp
   1c3ac:	strdeq	r0, [r1], -r8
   1c3b0:	andeq	r0, r1, r0, asr ip
   1c3b4:	andeq	r0, r1, r0, lsl #26
   1c3b8:	andeq	r0, r1, r4, lsr #24
   1c3bc:	andeq	r0, r1, ip, ror #27
   1c3c0:	mov	r3, r0
   1c3c4:	mov	r2, r1
   1c3c8:	push	{r4, lr}
   1c3cc:	ldr	r0, [r0, #20]
   1c3d0:	ldr	r1, [r3, #44]	; 0x2c
   1c3d4:	bl	1bb0c <__assert_fail@plt+0x9f2c>
   1c3d8:	mov	r4, r0
   1c3dc:	bl	117c0 <free@plt>
   1c3e0:	adds	r0, r4, #0
   1c3e4:	movne	r0, #1
   1c3e8:	pop	{r4, pc}
   1c3ec:	mov	r4, r0
   1c3f0:	mov	r0, #0
   1c3f4:	bl	117c0 <free@plt>
   1c3f8:	mov	r0, r4
   1c3fc:	bl	11b8c <_Unwind_Resume@plt>
   1c400:	ldr	r3, [pc, #200]	; 1c4d0 <__assert_fail@plt+0xa8f0>
   1c404:	mov	ip, r0
   1c408:	ldr	r0, [pc, #196]	; 1c4d4 <__assert_fail@plt+0xa8f4>
   1c40c:	add	r3, pc, r3
   1c410:	ldr	r2, [ip, #32]
   1c414:	push	{r4, r5, r6, lr}
   1c418:	sub	sp, sp, #4096	; 0x1000
   1c41c:	ldr	r4, [r3, r0]
   1c420:	sub	sp, sp, #24
   1c424:	add	r0, sp, #8192	; 0x2000
   1c428:	cmp	r2, #0
   1c42c:	mov	r5, r1
   1c430:	ldr	r3, [r4]
   1c434:	str	r3, [r0, #-4076]	; 0xfffff014
   1c438:	beq	1c464 <__assert_fail@plt+0xa884>
   1c43c:	mov	r0, r2
   1c440:	bl	1fe40 <__assert_fail@plt+0xe260>
   1c444:	add	r3, sp, #8192	; 0x2000
   1c448:	ldr	r2, [r3, #-4076]	; 0xfffff014
   1c44c:	ldr	r3, [r4]
   1c450:	cmp	r2, r3
   1c454:	bne	1c4cc <__assert_fail@plt+0xa8ec>
   1c458:	add	sp, sp, #4096	; 0x1000
   1c45c:	add	sp, sp, #24
   1c460:	pop	{r4, r5, r6, pc}
   1c464:	ldr	r3, [pc, #108]	; 1c4d8 <__assert_fail@plt+0xa8f8>
   1c468:	add	r6, sp, #20
   1c46c:	ldr	lr, [pc, #104]	; 1c4dc <__assert_fail@plt+0xa8fc>
   1c470:	mov	r1, #4096	; 0x1000
   1c474:	add	r3, pc, r3
   1c478:	str	r3, [sp]
   1c47c:	ldr	ip, [ip, #20]
   1c480:	add	lr, pc, lr
   1c484:	mov	r2, #1
   1c488:	mov	r0, r6
   1c48c:	mov	r3, r1
   1c490:	stmib	sp, {ip, lr}
   1c494:	bl	11bd4 <__snprintf_chk@plt>
   1c498:	mov	r0, r6
   1c49c:	bl	1f694 <__assert_fail@plt+0xdab4>
   1c4a0:	subs	r6, r0, #0
   1c4a4:	beq	1c4c4 <__assert_fail@plt+0xa8e4>
   1c4a8:	mov	r1, r5
   1c4ac:	bl	1f7e0 <__assert_fail@plt+0xdc00>
   1c4b0:	mov	r5, r0
   1c4b4:	mov	r0, r6
   1c4b8:	bl	1f730 <__assert_fail@plt+0xdb50>
   1c4bc:	mov	r0, r5
   1c4c0:	b	1c444 <__assert_fail@plt+0xa864>
   1c4c4:	mov	r0, r6
   1c4c8:	b	1c444 <__assert_fail@plt+0xa864>
   1c4cc:	bl	11838 <__stack_chk_fail@plt>
   1c4d0:	andeq	r2, r2, ip, ror #23
   1c4d4:	andeq	r0, r0, ip, lsr #3
   1c4d8:	andeq	r0, r1, r8, lsr #22
   1c4dc:	andeq	pc, r0, r8, ror #22
   1c4e0:	ldr	r3, [pc, #264]	; 1c5f0 <__assert_fail@plt+0xaa10>
   1c4e4:	ldr	ip, [pc, #264]	; 1c5f4 <__assert_fail@plt+0xaa14>
   1c4e8:	add	r3, pc, r3
   1c4ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c4f0:	mov	r5, r1
   1c4f4:	ldr	r4, [r3, ip]
   1c4f8:	sub	sp, sp, #28
   1c4fc:	mov	r6, r0
   1c500:	mov	r1, #58	; 0x3a
   1c504:	mov	r0, r5
   1c508:	mov	r7, r2
   1c50c:	ldr	r3, [r4]
   1c510:	str	r3, [sp, #20]
   1c514:	bl	119ac <strchr@plt>
   1c518:	cmp	r0, #0
   1c51c:	movne	r0, #0
   1c520:	beq	1c53c <__assert_fail@plt+0xa95c>
   1c524:	ldr	r2, [sp, #20]
   1c528:	ldr	r3, [r4]
   1c52c:	cmp	r2, r3
   1c530:	bne	1c5ec <__assert_fail@plt+0xaa0c>
   1c534:	add	sp, sp, #28
   1c538:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c53c:	mov	r0, r6
   1c540:	mov	r1, r5
   1c544:	bl	1c400 <__assert_fail@plt+0xa820>
   1c548:	subs	r8, r0, #0
   1c54c:	moveq	r9, r8
   1c550:	beq	1c588 <__assert_fail@plt+0xa9a8>
   1c554:	mov	r0, r6
   1c558:	mov	r1, r5
   1c55c:	add	r2, sp, #16
   1c560:	bl	203f0 <__assert_fail@plt+0xe810>
   1c564:	subs	r9, r0, #0
   1c568:	blt	1c598 <__assert_fail@plt+0xa9b8>
   1c56c:	ldr	r1, [sp, #16]
   1c570:	ldr	r0, [r7]
   1c574:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1c578:	mov	r1, r8
   1c57c:	str	r0, [r7]
   1c580:	ldr	r0, [sp, #16]
   1c584:	bl	20808 <__assert_fail@plt+0xec28>
   1c588:	mov	r0, r8
   1c58c:	bl	117c0 <free@plt>
   1c590:	mov	r0, r9
   1c594:	b	1c524 <__assert_fail@plt+0xa944>
   1c598:	mov	r0, r6
   1c59c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c5a0:	cmp	r0, #2
   1c5a4:	ble	1c588 <__assert_fail@plt+0xa9a8>
   1c5a8:	rsb	r0, r9, #0
   1c5ac:	bl	11928 <strerror@plt>
   1c5b0:	ldr	r2, [pc, #64]	; 1c5f8 <__assert_fail@plt+0xaa18>
   1c5b4:	ldr	ip, [pc, #64]	; 1c5fc <__assert_fail@plt+0xaa1c>
   1c5b8:	mov	r1, #3
   1c5bc:	add	r2, pc, r2
   1c5c0:	str	r2, [sp, #4]
   1c5c4:	ldr	r2, [pc, #52]	; 1c600 <__assert_fail@plt+0xaa20>
   1c5c8:	add	ip, pc, ip
   1c5cc:	str	r5, [sp, #8]
   1c5d0:	mov	r3, #608	; 0x260
   1c5d4:	str	ip, [sp]
   1c5d8:	add	r2, pc, r2
   1c5dc:	str	r0, [sp, #12]
   1c5e0:	mov	r0, r6
   1c5e4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c5e8:	b	1c588 <__assert_fail@plt+0xa9a8>
   1c5ec:	bl	11838 <__stack_chk_fail@plt>
   1c5f0:	andeq	r2, r2, r0, lsl fp
   1c5f4:	andeq	r0, r0, ip, lsr #3
   1c5f8:	andeq	r0, r1, ip, ror #21
   1c5fc:	andeq	r0, r1, r4, lsr r9
   1c600:	andeq	r0, r1, r0, ror #19
   1c604:	ldr	r3, [pc, #364]	; 1c778 <__assert_fail@plt+0xab98>
   1c608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c60c:	mov	sl, r0
   1c610:	ldr	r0, [pc, #356]	; 1c77c <__assert_fail@plt+0xab9c>
   1c614:	add	r3, pc, r3
   1c618:	ldr	r6, [sl, #24]
   1c61c:	sub	sp, sp, #44	; 0x2c
   1c620:	mov	r7, r1
   1c624:	mov	r9, r2
   1c628:	ldr	r0, [r3, r0]
   1c62c:	ldr	fp, [r6, #4]
   1c630:	ldr	r3, [r0]
   1c634:	cmp	fp, #0
   1c638:	str	r0, [sp, #28]
   1c63c:	str	r3, [sp, #36]	; 0x24
   1c640:	beq	1c76c <__assert_fail@plt+0xab8c>
   1c644:	add	r1, sp, #32
   1c648:	mov	r8, #0
   1c64c:	str	r1, [sp, #24]
   1c650:	b	1c66c <__assert_fail@plt+0xaa8c>
   1c654:	ldr	fp, [fp]
   1c658:	ldr	r3, [r6, #4]
   1c65c:	cmp	fp, r3
   1c660:	beq	1c6dc <__assert_fail@plt+0xaafc>
   1c664:	cmp	fp, #0
   1c668:	beq	1c6dc <__assert_fail@plt+0xaafc>
   1c66c:	mov	r0, fp
   1c670:	bl	1d158 <__assert_fail@plt+0xb578>
   1c674:	mov	r4, r0
   1c678:	mov	r0, fp
   1c67c:	bl	1d164 <__assert_fail@plt+0xb584>
   1c680:	mov	r1, r7
   1c684:	mov	r2, #0
   1c688:	mov	r5, r0
   1c68c:	mov	r0, r4
   1c690:	bl	118d4 <fnmatch@plt>
   1c694:	cmp	r0, #0
   1c698:	bne	1c654 <__assert_fail@plt+0xaa74>
   1c69c:	mov	r1, r4
   1c6a0:	mov	r0, sl
   1c6a4:	mov	r2, r5
   1c6a8:	add	r3, sp, #32
   1c6ac:	bl	204b4 <__assert_fail@plt+0xe8d4>
   1c6b0:	subs	r4, r0, #0
   1c6b4:	blt	1c6fc <__assert_fail@plt+0xab1c>
   1c6b8:	ldr	r0, [r9]
   1c6bc:	add	r8, r8, #1
   1c6c0:	ldr	r1, [sp, #32]
   1c6c4:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1c6c8:	str	r0, [r9]
   1c6cc:	ldr	fp, [fp]
   1c6d0:	ldr	r3, [r6, #4]
   1c6d4:	cmp	fp, r3
   1c6d8:	bne	1c664 <__assert_fail@plt+0xaa84>
   1c6dc:	ldr	r1, [sp, #28]
   1c6e0:	mov	r0, r8
   1c6e4:	ldr	r2, [sp, #36]	; 0x24
   1c6e8:	ldr	r3, [r1]
   1c6ec:	cmp	r2, r3
   1c6f0:	bne	1c774 <__assert_fail@plt+0xab94>
   1c6f4:	add	sp, sp, #44	; 0x2c
   1c6f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6fc:	mov	r0, sl
   1c700:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c704:	cmp	r0, #2
   1c708:	bgt	1c724 <__assert_fail@plt+0xab44>
   1c70c:	mov	r1, r8
   1c710:	ldr	r0, [r9]
   1c714:	bl	1d128 <__assert_fail@plt+0xb548>
   1c718:	mov	r8, r4
   1c71c:	str	r0, [r9]
   1c720:	b	1c6dc <__assert_fail@plt+0xaafc>
   1c724:	rsb	r0, r4, #0
   1c728:	bl	11928 <strerror@plt>
   1c72c:	ldr	r2, [pc, #76]	; 1c780 <__assert_fail@plt+0xaba0>
   1c730:	ldr	ip, [pc, #76]	; 1c784 <__assert_fail@plt+0xaba4>
   1c734:	mov	r1, #3
   1c738:	add	r2, pc, r2
   1c73c:	str	r2, [sp, #4]
   1c740:	ldr	r2, [pc, #64]	; 1c788 <__assert_fail@plt+0xaba8>
   1c744:	add	ip, pc, ip
   1c748:	str	r7, [sp, #8]
   1c74c:	mov	r3, #640	; 0x280
   1c750:	str	r5, [sp, #12]
   1c754:	add	r2, pc, r2
   1c758:	str	ip, [sp]
   1c75c:	str	r0, [sp, #16]
   1c760:	mov	r0, sl
   1c764:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c768:	b	1c70c <__assert_fail@plt+0xab2c>
   1c76c:	mov	r8, fp
   1c770:	b	1c6dc <__assert_fail@plt+0xaafc>
   1c774:	bl	11838 <__stack_chk_fail@plt>
   1c778:	andeq	r2, r2, r4, ror #19
   1c77c:	andeq	r0, r0, ip, lsr #3
   1c780:	muleq	r1, ip, r9
   1c784:	ldrdeq	r0, [r1], -ip
   1c788:	andeq	r0, r1, r4, ror #16
   1c78c:	ldr	r3, [pc, #692]	; 1ca48 <__assert_fail@plt+0xae68>
   1c790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c794:	mov	r7, r0
   1c798:	ldr	r0, [pc, #684]	; 1ca4c <__assert_fail@plt+0xae6c>
   1c79c:	add	r3, pc, r3
   1c7a0:	ldr	r5, [r7, #24]
   1c7a4:	sub	sp, sp, #24
   1c7a8:	mov	r6, r1
   1c7ac:	mov	r9, r2
   1c7b0:	ldr	r8, [r3, r0]
   1c7b4:	ldr	r4, [r5, #20]
   1c7b8:	ldr	r3, [r8]
   1c7bc:	cmp	r4, #0
   1c7c0:	str	r3, [sp, #20]
   1c7c4:	bne	1c7d4 <__assert_fail@plt+0xabf4>
   1c7c8:	b	1c800 <__assert_fail@plt+0xac20>
   1c7cc:	cmp	r4, #0
   1c7d0:	beq	1c800 <__assert_fail@plt+0xac20>
   1c7d4:	mov	r0, r4
   1c7d8:	bl	1d194 <__assert_fail@plt+0xb5b4>
   1c7dc:	mov	r1, r6
   1c7e0:	mov	sl, r0
   1c7e4:	bl	11754 <strcmp@plt>
   1c7e8:	cmp	r0, #0
   1c7ec:	beq	1c854 <__assert_fail@plt+0xac74>
   1c7f0:	ldr	r4, [r4]
   1c7f4:	ldr	r3, [r5, #20]
   1c7f8:	cmp	r4, r3
   1c7fc:	bne	1c7cc <__assert_fail@plt+0xabec>
   1c800:	ldr	r4, [r5, #16]
   1c804:	cmp	r4, #0
   1c808:	beq	1c838 <__assert_fail@plt+0xac58>
   1c80c:	mov	r0, r4
   1c810:	bl	1d194 <__assert_fail@plt+0xb5b4>
   1c814:	mov	r1, r6
   1c818:	mov	sl, r0
   1c81c:	bl	11754 <strcmp@plt>
   1c820:	cmp	r0, #0
   1c824:	beq	1c8a4 <__assert_fail@plt+0xacc4>
   1c828:	ldr	r4, [r4]
   1c82c:	ldr	r3, [r5, #16]
   1c830:	cmp	r4, r3
   1c834:	bne	1c804 <__assert_fail@plt+0xac24>
   1c838:	mov	r0, #0
   1c83c:	ldr	r2, [sp, #20]
   1c840:	ldr	r3, [r8]
   1c844:	cmp	r2, r3
   1c848:	bne	1ca44 <__assert_fail@plt+0xae64>
   1c84c:	add	sp, sp, #24
   1c850:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c854:	mov	r0, r4
   1c858:	bl	1d188 <__assert_fail@plt+0xb5a8>
   1c85c:	mov	r1, sl
   1c860:	add	r2, sp, #16
   1c864:	mov	r4, r0
   1c868:	mov	r0, r7
   1c86c:	bl	203f0 <__assert_fail@plt+0xe810>
   1c870:	subs	r5, r0, #0
   1c874:	blt	1c90c <__assert_fail@plt+0xad2c>
   1c878:	ldr	r0, [r9]
   1c87c:	ldr	r1, [sp, #16]
   1c880:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1c884:	cmp	r0, #0
   1c888:	beq	1c964 <__assert_fail@plt+0xad84>
   1c88c:	str	r0, [r9]
   1c890:	mov	r1, r4
   1c894:	ldr	r0, [sp, #16]
   1c898:	bl	217a8 <__assert_fail@plt+0xfbc8>
   1c89c:	mov	r0, #1
   1c8a0:	b	1c83c <__assert_fail@plt+0xac5c>
   1c8a4:	mov	r0, r4
   1c8a8:	bl	1d188 <__assert_fail@plt+0xb5a8>
   1c8ac:	mov	r1, sl
   1c8b0:	add	r2, sp, #16
   1c8b4:	mov	r4, r0
   1c8b8:	mov	r0, r7
   1c8bc:	bl	203f0 <__assert_fail@plt+0xe810>
   1c8c0:	subs	r5, r0, #0
   1c8c4:	blt	1c8f4 <__assert_fail@plt+0xad14>
   1c8c8:	ldr	r0, [r9]
   1c8cc:	ldr	r1, [sp, #16]
   1c8d0:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1c8d4:	cmp	r0, #0
   1c8d8:	beq	1c9fc <__assert_fail@plt+0xae1c>
   1c8dc:	str	r0, [r9]
   1c8e0:	mov	r1, r4
   1c8e4:	ldr	r0, [sp, #16]
   1c8e8:	bl	21cf8 <__assert_fail@plt+0x10118>
   1c8ec:	mov	r0, #1
   1c8f0:	b	1c83c <__assert_fail@plt+0xac5c>
   1c8f4:	mov	r0, r7
   1c8f8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c8fc:	cmp	r0, #2
   1c900:	bgt	1c9b4 <__assert_fail@plt+0xadd4>
   1c904:	mov	r0, r5
   1c908:	b	1c83c <__assert_fail@plt+0xac5c>
   1c90c:	mov	r0, r7
   1c910:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c914:	cmp	r0, #2
   1c918:	ble	1c904 <__assert_fail@plt+0xad24>
   1c91c:	rsb	r0, r5, #0
   1c920:	bl	11928 <strerror@plt>
   1c924:	ldr	r2, [pc, #292]	; 1ca50 <__assert_fail@plt+0xae70>
   1c928:	ldr	ip, [pc, #292]	; 1ca54 <__assert_fail@plt+0xae74>
   1c92c:	mov	r1, #3
   1c930:	add	r2, pc, r2
   1c934:	str	r2, [sp, #4]
   1c938:	ldr	r2, [pc, #280]	; 1ca58 <__assert_fail@plt+0xae78>
   1c93c:	add	ip, pc, ip
   1c940:	str	sl, [sp, #8]
   1c944:	movw	r3, #673	; 0x2a1
   1c948:	str	ip, [sp]
   1c94c:	add	r2, pc, r2
   1c950:	str	r0, [sp, #12]
   1c954:	mov	r0, r7
   1c958:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c95c:	mov	r0, r5
   1c960:	b	1c83c <__assert_fail@plt+0xac5c>
   1c964:	mov	r0, r7
   1c968:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1c96c:	cmp	r0, #2
   1c970:	bgt	1c97c <__assert_fail@plt+0xad9c>
   1c974:	mvn	r0, #11
   1c978:	b	1c83c <__assert_fail@plt+0xac5c>
   1c97c:	ldr	lr, [pc, #216]	; 1ca5c <__assert_fail@plt+0xae7c>
   1c980:	mov	r0, r7
   1c984:	ldr	ip, [pc, #212]	; 1ca60 <__assert_fail@plt+0xae80>
   1c988:	mov	r1, #3
   1c98c:	ldr	r2, [pc, #208]	; 1ca64 <__assert_fail@plt+0xae84>
   1c990:	add	lr, pc, lr
   1c994:	add	ip, pc, ip
   1c998:	movw	r3, #679	; 0x2a7
   1c99c:	add	r2, pc, r2
   1c9a0:	str	lr, [sp]
   1c9a4:	str	ip, [sp, #4]
   1c9a8:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c9ac:	mvn	r0, #11
   1c9b0:	b	1c83c <__assert_fail@plt+0xac5c>
   1c9b4:	rsb	r0, r5, #0
   1c9b8:	bl	11928 <strerror@plt>
   1c9bc:	ldr	r2, [pc, #164]	; 1ca68 <__assert_fail@plt+0xae88>
   1c9c0:	ldr	ip, [pc, #164]	; 1ca6c <__assert_fail@plt+0xae8c>
   1c9c4:	mov	r1, #3
   1c9c8:	add	r2, pc, r2
   1c9cc:	str	r2, [sp, #4]
   1c9d0:	ldr	r2, [pc, #152]	; 1ca70 <__assert_fail@plt+0xae90>
   1c9d4:	add	ip, pc, ip
   1c9d8:	str	sl, [sp, #8]
   1c9dc:	movw	r3, #709	; 0x2c5
   1c9e0:	str	ip, [sp]
   1c9e4:	add	r2, pc, r2
   1c9e8:	str	r0, [sp, #12]
   1c9ec:	mov	r0, r7
   1c9f0:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1c9f4:	mov	r0, r5
   1c9f8:	b	1c83c <__assert_fail@plt+0xac5c>
   1c9fc:	mov	r0, r7
   1ca00:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1ca04:	cmp	r0, #2
   1ca08:	ble	1c974 <__assert_fail@plt+0xad94>
   1ca0c:	ldr	lr, [pc, #96]	; 1ca74 <__assert_fail@plt+0xae94>
   1ca10:	mov	r0, r7
   1ca14:	ldr	ip, [pc, #92]	; 1ca78 <__assert_fail@plt+0xae98>
   1ca18:	mov	r1, #3
   1ca1c:	ldr	r2, [pc, #88]	; 1ca7c <__assert_fail@plt+0xae9c>
   1ca20:	add	lr, pc, lr
   1ca24:	add	ip, pc, ip
   1ca28:	movw	r3, #715	; 0x2cb
   1ca2c:	add	r2, pc, r2
   1ca30:	str	lr, [sp]
   1ca34:	str	ip, [sp, #4]
   1ca38:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1ca3c:	mvn	r0, #11
   1ca40:	b	1c83c <__assert_fail@plt+0xac5c>
   1ca44:	bl	11838 <__stack_chk_fail@plt>
   1ca48:	andeq	r2, r2, ip, asr r8
   1ca4c:	andeq	r0, r0, ip, lsr #3
   1ca50:	andeq	r0, r1, r8, ror r7
   1ca54:	andeq	r0, r1, ip, ror #16
   1ca58:	andeq	r0, r1, ip, ror #12
   1ca5c:	andeq	r0, r1, r8, lsl r8
   1ca60:	andeq	lr, r0, ip, ror #30
   1ca64:	andeq	r0, r1, ip, lsl r6
   1ca68:	andeq	r0, r1, r0, ror #13
   1ca6c:	ldrdeq	r0, [r1], -r4
   1ca70:	ldrdeq	r0, [r1], -r4
   1ca74:	andeq	r0, r1, r8, lsl #15
   1ca78:	ldrdeq	lr, [r0], -ip
   1ca7c:	andeq	r0, r1, ip, lsl #11
   1ca80:	ldr	r3, [pc, #116]	; 1cafc <__assert_fail@plt+0xaf1c>
   1ca84:	ldr	r2, [pc, #116]	; 1cb00 <__assert_fail@plt+0xaf20>
   1ca88:	add	r3, pc, r3
   1ca8c:	ldr	r0, [r0, #28]
   1ca90:	push	{r4, r5, r6, r7, lr}
   1ca94:	sub	sp, sp, #28
   1ca98:	ldr	r7, [r3, r2]
   1ca9c:	add	r4, sp, #8
   1caa0:	mov	r6, r1
   1caa4:	add	r5, sp, #4
   1caa8:	mov	r1, r4
   1caac:	ldr	r3, [r7]
   1cab0:	str	r3, [sp, #20]
   1cab4:	bl	1b020 <__assert_fail@plt+0x9440>
   1cab8:	b	1cac8 <__assert_fail@plt+0xaee8>
   1cabc:	ldr	r0, [sp, #4]
   1cac0:	mov	r1, r6
   1cac4:	bl	2024c <__assert_fail@plt+0xe66c>
   1cac8:	mov	r0, r4
   1cacc:	mov	r1, #0
   1cad0:	mov	r2, r5
   1cad4:	bl	1b038 <__assert_fail@plt+0x9458>
   1cad8:	cmp	r0, #0
   1cadc:	bne	1cabc <__assert_fail@plt+0xaedc>
   1cae0:	ldr	r2, [sp, #20]
   1cae4:	ldr	r3, [r7]
   1cae8:	cmp	r2, r3
   1caec:	bne	1caf8 <__assert_fail@plt+0xaf18>
   1caf0:	add	sp, sp, #28
   1caf4:	pop	{r4, r5, r6, r7, pc}
   1caf8:	bl	11838 <__stack_chk_fail@plt>
   1cafc:	andeq	r2, r2, r0, ror r5
   1cb00:	andeq	r0, r0, ip, lsr #3
   1cb04:	ldr	r3, [pc, #116]	; 1cb80 <__assert_fail@plt+0xafa0>
   1cb08:	ldr	r2, [pc, #116]	; 1cb84 <__assert_fail@plt+0xafa4>
   1cb0c:	add	r3, pc, r3
   1cb10:	ldr	r0, [r0, #28]
   1cb14:	push	{r4, r5, r6, r7, lr}
   1cb18:	sub	sp, sp, #28
   1cb1c:	ldr	r7, [r3, r2]
   1cb20:	add	r4, sp, #8
   1cb24:	mov	r6, r1
   1cb28:	add	r5, sp, #4
   1cb2c:	mov	r1, r4
   1cb30:	ldr	r3, [r7]
   1cb34:	str	r3, [sp, #20]
   1cb38:	bl	1b020 <__assert_fail@plt+0x9440>
   1cb3c:	b	1cb4c <__assert_fail@plt+0xaf6c>
   1cb40:	ldr	r0, [sp, #4]
   1cb44:	mov	r1, r6
   1cb48:	bl	20270 <__assert_fail@plt+0xe690>
   1cb4c:	mov	r0, r4
   1cb50:	mov	r1, #0
   1cb54:	mov	r2, r5
   1cb58:	bl	1b038 <__assert_fail@plt+0x9458>
   1cb5c:	cmp	r0, #0
   1cb60:	bne	1cb40 <__assert_fail@plt+0xaf60>
   1cb64:	ldr	r2, [sp, #20]
   1cb68:	ldr	r3, [r7]
   1cb6c:	cmp	r2, r3
   1cb70:	bne	1cb7c <__assert_fail@plt+0xaf9c>
   1cb74:	add	sp, sp, #28
   1cb78:	pop	{r4, r5, r6, r7, pc}
   1cb7c:	bl	11838 <__stack_chk_fail@plt>
   1cb80:	andeq	r2, r2, ip, ror #9
   1cb84:	andeq	r0, r0, ip, lsr #3
   1cb88:	cmp	r0, #0
   1cb8c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1cb90:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1cb94:	mov	r6, r0
   1cb98:	mov	r4, #0
   1cb9c:	mov	r5, #0
   1cba0:	mov	r8, r0
   1cba4:	mov	r7, #4
   1cba8:	mov	r9, #0
   1cbac:	ldr	r0, [r6, #32]
   1cbb0:	cmp	r0, #0
   1cbb4:	beq	1cbc4 <__assert_fail@plt+0xafe4>
   1cbb8:	bl	1fd98 <__assert_fail@plt+0xe1b8>
   1cbbc:	str	r9, [r6, #32]
   1cbc0:	strd	r4, [r8, #48]	; 0x30
   1cbc4:	subs	r7, r7, #1
   1cbc8:	add	r6, r6, #4
   1cbcc:	add	r8, r8, #8
   1cbd0:	bne	1cbac <__assert_fail@plt+0xafcc>
   1cbd4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1cbd8:	push	{r4, lr}
   1cbdc:	subs	r4, r0, #0
   1cbe0:	sub	sp, sp, #16
   1cbe4:	beq	1cc44 <__assert_fail@plt+0xb064>
   1cbe8:	ldr	r3, [r4]
   1cbec:	sub	r3, r3, #1
   1cbf0:	str	r3, [r4]
   1cbf4:	cmp	r3, #0
   1cbf8:	movgt	r0, r4
   1cbfc:	ble	1cc08 <__assert_fail@plt+0xb028>
   1cc00:	add	sp, sp, #16
   1cc04:	pop	{r4, pc}
   1cc08:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1cc0c:	cmp	r0, #5
   1cc10:	bgt	1cc4c <__assert_fail@plt+0xb06c>
   1cc14:	mov	r0, r4
   1cc18:	bl	1cb88 <__assert_fail@plt+0xafa8>
   1cc1c:	ldr	r0, [r4, #28]
   1cc20:	bl	1a874 <__assert_fail@plt+0x8c94>
   1cc24:	ldr	r0, [r4, #20]
   1cc28:	bl	117c0 <free@plt>
   1cc2c:	ldr	r0, [r4, #24]
   1cc30:	cmp	r0, #0
   1cc34:	beq	1cc3c <__assert_fail@plt+0xb05c>
   1cc38:	bl	1d910 <__assert_fail@plt+0xbd30>
   1cc3c:	mov	r0, r4
   1cc40:	bl	117c0 <free@plt>
   1cc44:	mov	r0, #0
   1cc48:	b	1cc00 <__assert_fail@plt+0xb020>
   1cc4c:	ldr	r2, [pc, #48]	; 1cc84 <__assert_fail@plt+0xb0a4>
   1cc50:	mov	r0, r4
   1cc54:	ldr	ip, [pc, #44]	; 1cc88 <__assert_fail@plt+0xb0a8>
   1cc58:	mov	r1, #6
   1cc5c:	add	r2, pc, r2
   1cc60:	str	r2, [sp, #4]
   1cc64:	ldr	r2, [pc, #32]	; 1cc8c <__assert_fail@plt+0xb0ac>
   1cc68:	add	ip, pc, ip
   1cc6c:	str	r4, [sp, #8]
   1cc70:	movw	r3, #323	; 0x143
   1cc74:	str	ip, [sp]
   1cc78:	add	r2, pc, r2
   1cc7c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1cc80:	b	1cc14 <__assert_fail@plt+0xb034>
   1cc84:			; <UNDEFINED> instruction: 0x000104b0
   1cc88:	andeq	r0, r1, r0, lsl r5
   1cc8c:	andeq	r0, r1, r0, asr #6
   1cc90:	ldr	r3, [pc, #344]	; 1cdf0 <__assert_fail@plt+0xb210>
   1cc94:	ldr	r2, [pc, #344]	; 1cdf4 <__assert_fail@plt+0xb214>
   1cc98:	add	r3, pc, r3
   1cc9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cca0:	sub	sp, sp, #4096	; 0x1000
   1cca4:	ldr	r2, [r3, r2]
   1cca8:	sub	sp, sp, #44	; 0x2c
   1ccac:	add	r1, sp, #8192	; 0x2000
   1ccb0:	subs	r6, r0, #0
   1ccb4:	ldr	r3, [r2]
   1ccb8:	str	r2, [sp, #24]
   1ccbc:	str	r3, [r1, #-4060]	; 0xfffff024
   1ccc0:	beq	1cde4 <__assert_fail@plt+0xb204>
   1ccc4:	ldr	fp, [pc, #300]	; 1cdf8 <__assert_fail@plt+0xb218>
   1ccc8:	mov	r5, r6
   1cccc:	ldr	sl, [pc, #296]	; 1cdfc <__assert_fail@plt+0xb21c>
   1ccd0:	mov	r4, #0
   1ccd4:	ldr	r9, [pc, #292]	; 1ce00 <__assert_fail@plt+0xb220>
   1ccd8:	add	fp, pc, fp
   1ccdc:	ldr	r8, [pc, #288]	; 1ce04 <__assert_fail@plt+0xb224>
   1cce0:	add	sl, pc, sl
   1cce4:	ldr	r7, [pc, #284]	; 1ce08 <__assert_fail@plt+0xb228>
   1cce8:	add	r9, pc, r9
   1ccec:	ldr	r2, [pc, #280]	; 1ce0c <__assert_fail@plt+0xb22c>
   1ccf0:	add	r8, pc, r8
   1ccf4:	add	r7, pc, r7
   1ccf8:	add	r2, pc, r2
   1ccfc:	str	r2, [sp, #28]
   1cd00:	ldr	r3, [r5, #32]
   1cd04:	cmp	r3, #0
   1cd08:	beq	1cd7c <__assert_fail@plt+0xb19c>
   1cd0c:	mov	r0, r6
   1cd10:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1cd14:	cmp	r0, #5
   1cd18:	bgt	1cd54 <__assert_fail@plt+0xb174>
   1cd1c:	add	r4, r4, #8
   1cd20:	add	r5, r5, #4
   1cd24:	cmp	r4, #32
   1cd28:	bne	1cd00 <__assert_fail@plt+0xb120>
   1cd2c:	mov	r0, #0
   1cd30:	add	r1, sp, #8192	; 0x2000
   1cd34:	ldr	r2, [r1, #-4060]	; 0xfffff024
   1cd38:	ldr	r1, [sp, #24]
   1cd3c:	ldr	r3, [r1]
   1cd40:	cmp	r2, r3
   1cd44:	bne	1cdec <__assert_fail@plt+0xb20c>
   1cd48:	add	sp, sp, #4096	; 0x1000
   1cd4c:	add	sp, sp, #44	; 0x2c
   1cd50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd54:	ldr	r3, [r4, r7]
   1cd58:	mov	r0, r6
   1cd5c:	str	r9, [sp]
   1cd60:	mov	r1, #6
   1cd64:	str	r8, [sp, #4]
   1cd68:	mov	r2, sl
   1cd6c:	str	r3, [sp, #8]
   1cd70:	movw	r3, #838	; 0x346
   1cd74:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1cd78:	b	1cd1c <__assert_fail@plt+0xb13c>
   1cd7c:	ldr	r3, [sp, #28]
   1cd80:	add	ip, sp, #36	; 0x24
   1cd84:	ldr	lr, [r4, fp]
   1cd88:	mov	r1, #4096	; 0x1000
   1cd8c:	mov	r0, ip
   1cd90:	str	r3, [sp]
   1cd94:	mov	r3, r1
   1cd98:	ldr	r2, [r6, #20]
   1cd9c:	str	lr, [sp, #8]
   1cda0:	str	ip, [sp, #20]
   1cda4:	str	r2, [sp, #4]
   1cda8:	mov	r2, #1
   1cdac:	bl	11bd4 <__snprintf_chk@plt>
   1cdb0:	ldr	ip, [sp, #20]
   1cdb4:	add	r2, r6, #48	; 0x30
   1cdb8:	mov	r0, r6
   1cdbc:	add	r2, r2, r4
   1cdc0:	mov	r1, ip
   1cdc4:	bl	1faf0 <__assert_fail@plt+0xdf10>
   1cdc8:	cmp	r0, #0
   1cdcc:	str	r0, [r5, #32]
   1cdd0:	bne	1cd1c <__assert_fail@plt+0xb13c>
   1cdd4:	mov	r0, r6
   1cdd8:	bl	1cb88 <__assert_fail@plt+0xafa8>
   1cddc:	mvn	r0, #11
   1cde0:	b	1cd30 <__assert_fail@plt+0xb150>
   1cde4:	mvn	r0, #1
   1cde8:	b	1cd30 <__assert_fail@plt+0xb150>
   1cdec:	bl	11838 <__stack_chk_fail@plt>
   1cdf0:	andeq	r2, r2, r0, ror #6
   1cdf4:	andeq	r0, r0, ip, lsr #3
   1cdf8:	muleq	r2, r0, r1
   1cdfc:	ldrdeq	r0, [r1], -r8
   1ce00:	andeq	r0, r1, r4, lsl #10
   1ce04:	andeq	r0, r1, r4, lsr r4
   1ce08:	andeq	r2, r2, r4, ror r1
   1ce0c:	andeq	r0, r1, r4, lsr #5
   1ce10:	ldr	r3, [pc, #264]	; 1cf20 <__assert_fail@plt+0xb340>
   1ce14:	subs	ip, r0, #0
   1ce18:	ldr	r0, [pc, #260]	; 1cf24 <__assert_fail@plt+0xb344>
   1ce1c:	add	r3, pc, r3
   1ce20:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ce24:	sub	sp, sp, #4096	; 0x1000
   1ce28:	ldr	r5, [r3, r0]
   1ce2c:	sub	sp, sp, #28
   1ce30:	mov	r7, r2
   1ce34:	add	r2, sp, #8192	; 0x2000
   1ce38:	mov	r4, r1
   1ce3c:	ldr	r3, [r5]
   1ce40:	str	r3, [r2, #-4076]	; 0xfffff014
   1ce44:	beq	1cf14 <__assert_fail@plt+0xb334>
   1ce48:	cmp	r1, #3
   1ce4c:	bhi	1cf0c <__assert_fail@plt+0xb32c>
   1ce50:	add	r3, r1, #8
   1ce54:	ldr	r6, [ip, r3, lsl #2]
   1ce58:	cmp	r6, #0
   1ce5c:	beq	1cea0 <__assert_fail@plt+0xb2c0>
   1ce60:	ldr	r3, [pc, #192]	; 1cf28 <__assert_fail@plt+0xb348>
   1ce64:	mov	r0, r6
   1ce68:	mov	r1, r7
   1ce6c:	add	r3, pc, r3
   1ce70:	add	r4, r3, r4, lsl #3
   1ce74:	ldr	r2, [r4, #4]
   1ce78:	bl	1fdb8 <__assert_fail@plt+0xe1d8>
   1ce7c:	mov	r0, #0
   1ce80:	add	r3, sp, #8192	; 0x2000
   1ce84:	ldr	r2, [r3, #-4076]	; 0xfffff014
   1ce88:	ldr	r3, [r5]
   1ce8c:	cmp	r2, r3
   1ce90:	bne	1cf1c <__assert_fail@plt+0xb33c>
   1ce94:	add	sp, sp, #4096	; 0x1000
   1ce98:	add	sp, sp, #28
   1ce9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cea0:	ldr	r9, [pc, #132]	; 1cf2c <__assert_fail@plt+0xb34c>
   1cea4:	add	r8, sp, #20
   1cea8:	ldr	r3, [pc, #128]	; 1cf30 <__assert_fail@plt+0xb350>
   1ceac:	mov	r1, #4096	; 0x1000
   1ceb0:	add	r9, pc, r9
   1ceb4:	mov	r2, #1
   1ceb8:	add	r3, pc, r3
   1cebc:	str	r3, [sp]
   1cec0:	ldr	lr, [ip, #20]
   1cec4:	mov	r0, r8
   1cec8:	ldr	ip, [r9, r4, lsl #3]
   1cecc:	mov	r3, r1
   1ced0:	str	lr, [sp, #4]
   1ced4:	str	ip, [sp, #8]
   1ced8:	bl	11bd4 <__snprintf_chk@plt>
   1cedc:	mov	r0, r8
   1cee0:	bl	1f694 <__assert_fail@plt+0xdab4>
   1cee4:	subs	r8, r0, #0
   1cee8:	beq	1cf14 <__assert_fail@plt+0xb334>
   1ceec:	add	r4, r9, r4, lsl #3
   1cef0:	mov	r1, r7
   1cef4:	ldr	r2, [r4, #4]
   1cef8:	bl	1f74c <__assert_fail@plt+0xdb6c>
   1cefc:	mov	r0, r8
   1cf00:	bl	1f730 <__assert_fail@plt+0xdb50>
   1cf04:	mov	r0, r6
   1cf08:	b	1ce80 <__assert_fail@plt+0xb2a0>
   1cf0c:	mvn	r0, #1
   1cf10:	b	1ce80 <__assert_fail@plt+0xb2a0>
   1cf14:	mvn	r0, #37	; 0x25
   1cf18:	b	1ce80 <__assert_fail@plt+0xb2a0>
   1cf1c:	bl	11838 <__stack_chk_fail@plt>
   1cf20:	ldrdeq	r2, [r2], -ip
   1cf24:	andeq	r0, r0, ip, lsr #3
   1cf28:	strdeq	r1, [r2], -ip
   1cf2c:			; <UNDEFINED> instruction: 0x00021fb8
   1cf30:	andeq	r0, r1, r4, ror #1
   1cf34:	ldr	r0, [r0, #24]
   1cf38:	bx	lr
   1cf3c:	push	{r3, r4, r5, lr}
   1cf40:	mov	r4, r0
   1cf44:	mov	r0, #12
   1cf48:	mov	r5, r1
   1cf4c:	bl	11910 <malloc@plt>
   1cf50:	subs	r3, r0, #0
   1cf54:	beq	1cf94 <__assert_fail@plt+0xb3b4>
   1cf58:	cmp	r4, #0
   1cf5c:	str	r5, [r3, #8]
   1cf60:	beq	1cf84 <__assert_fail@plt+0xb3a4>
   1cf64:	ldr	r2, [r4, #4]
   1cf68:	mov	r0, r4
   1cf6c:	str	r2, [r3, #4]
   1cf70:	ldr	r2, [r4, #4]
   1cf74:	str	r3, [r2]
   1cf78:	str	r3, [r4, #4]
   1cf7c:	str	r4, [r3]
   1cf80:	pop	{r3, r4, r5, pc}
   1cf84:	mov	r0, r3
   1cf88:	str	r3, [r3]
   1cf8c:	str	r3, [r3, #4]
   1cf90:	pop	{r3, r4, r5, pc}
   1cf94:	mov	r0, r3
   1cf98:	pop	{r3, r4, r5, pc}
   1cf9c:	push	{r3, r4, r5, lr}
   1cfa0:	subs	r4, r0, #0
   1cfa4:	mov	r5, r1
   1cfa8:	beq	1cfdc <__assert_fail@plt+0xb3fc>
   1cfac:	mov	r0, #12
   1cfb0:	bl	11910 <malloc@plt>
   1cfb4:	cmp	r0, #0
   1cfb8:	popeq	{r3, r4, r5, pc}
   1cfbc:	ldr	r3, [r4, #4]
   1cfc0:	str	r5, [r0, #8]
   1cfc4:	str	r4, [r0]
   1cfc8:	str	r3, [r0, #4]
   1cfcc:	ldr	r3, [r4, #4]
   1cfd0:	str	r0, [r3]
   1cfd4:	str	r0, [r4, #4]
   1cfd8:	pop	{r3, r4, r5, pc}
   1cfdc:	pop	{r3, r4, r5, lr}
   1cfe0:	b	1cf3c <__assert_fail@plt+0xb35c>
   1cfe4:	subs	r3, r0, #0
   1cfe8:	beq	1d014 <__assert_fail@plt+0xb434>
   1cfec:	cmp	r1, #0
   1cff0:	beq	1d01c <__assert_fail@plt+0xb43c>
   1cff4:	ldr	r2, [r3, #4]
   1cff8:	mov	r0, r3
   1cffc:	ldr	ip, [r1, #4]
   1d000:	str	r1, [r2]
   1d004:	str	r3, [ip]
   1d008:	str	ip, [r3, #4]
   1d00c:	str	r2, [r1, #4]
   1d010:	bx	lr
   1d014:	mov	r0, r1
   1d018:	bx	lr
   1d01c:	mov	r0, r3
   1d020:	bx	lr
   1d024:	push	{r3, r4, r5, lr}
   1d028:	mov	r4, r0
   1d02c:	mov	r0, #12
   1d030:	mov	r5, r1
   1d034:	bl	11910 <malloc@plt>
   1d038:	cmp	r0, #0
   1d03c:	popeq	{r3, r4, r5, pc}
   1d040:	cmp	r4, #0
   1d044:	str	r5, [r0, #8]
   1d048:	streq	r0, [r0]
   1d04c:	ldrne	r3, [r4, #4]
   1d050:	streq	r0, [r0, #4]
   1d054:	strne	r3, [r0, #4]
   1d058:	ldrne	r3, [r4, #4]
   1d05c:	strne	r0, [r3]
   1d060:	strne	r0, [r4, #4]
   1d064:	strne	r4, [r0]
   1d068:	pop	{r3, r4, r5, pc}
   1d06c:	subs	r3, r0, #0
   1d070:	push	{r4, lr}
   1d074:	beq	1d0b8 <__assert_fail@plt+0xb4d8>
   1d078:	ldr	r2, [r3, #4]
   1d07c:	cmp	r3, r2
   1d080:	beq	1d0a8 <__assert_fail@plt+0xb4c8>
   1d084:	ldr	r1, [r3]
   1d088:	cmp	r3, r1
   1d08c:	beq	1d0a8 <__assert_fail@plt+0xb4c8>
   1d090:	str	r1, [r2]
   1d094:	ldr	r4, [r3]
   1d098:	str	r2, [r4, #4]
   1d09c:	bl	117c0 <free@plt>
   1d0a0:	mov	r0, r4
   1d0a4:	pop	{r4, pc}
   1d0a8:	mov	r0, r3
   1d0ac:	bl	117c0 <free@plt>
   1d0b0:	mov	r0, #0
   1d0b4:	pop	{r4, pc}
   1d0b8:	mov	r0, r3
   1d0bc:	pop	{r4, pc}
   1d0c0:	cmp	r1, #0
   1d0c4:	cmpne	r0, #0
   1d0c8:	movne	r3, #0
   1d0cc:	moveq	r3, #1
   1d0d0:	beq	1d0e4 <__assert_fail@plt+0xb504>
   1d0d4:	cmp	r0, r1
   1d0d8:	beq	1d0ec <__assert_fail@plt+0xb50c>
   1d0dc:	ldr	r0, [r1, #4]
   1d0e0:	bx	lr
   1d0e4:	mov	r0, #0
   1d0e8:	bx	lr
   1d0ec:	mov	r0, r3
   1d0f0:	bx	lr
   1d0f4:	cmp	r1, #0
   1d0f8:	cmpne	r0, #0
   1d0fc:	beq	1d114 <__assert_fail@plt+0xb534>
   1d100:	ldr	r3, [r1]
   1d104:	cmp	r3, r0
   1d108:	movne	r0, r3
   1d10c:	moveq	r0, #0
   1d110:	bx	lr
   1d114:	mov	r0, #0
   1d118:	bx	lr
   1d11c:	cmp	r0, #0
   1d120:	ldrne	r0, [r0, #4]
   1d124:	bx	lr
   1d128:	push	{r3, r4, r5, lr}
   1d12c:	subs	r5, r1, #0
   1d130:	popeq	{r3, r4, r5, pc}
   1d134:	mov	r4, #0
   1d138:	bl	1d11c <__assert_fail@plt+0xb53c>
   1d13c:	add	r4, r4, #1
   1d140:	bl	1d06c <__assert_fail@plt+0xb48c>
   1d144:	cmp	r4, r5
   1d148:	bne	1d138 <__assert_fail@plt+0xb558>
   1d14c:	pop	{r3, r4, r5, pc}
   1d150:	ldr	r0, [r0, #8]
   1d154:	bx	lr
   1d158:	ldr	r3, [r0, #8]
   1d15c:	ldr	r0, [r3]
   1d160:	bx	lr
   1d164:	ldr	r0, [r0, #8]
   1d168:	add	r0, r0, #4
   1d16c:	bx	lr
   1d170:	ldr	r3, [r0, #8]
   1d174:	ldr	r0, [r3]
   1d178:	bx	lr
   1d17c:	ldr	r0, [r0, #8]
   1d180:	add	r0, r0, #4
   1d184:	bx	lr
   1d188:	ldr	r3, [r0, #8]
   1d18c:	ldr	r0, [r3]
   1d190:	bx	lr
   1d194:	ldr	r0, [r0, #8]
   1d198:	add	r0, r0, #4
   1d19c:	bx	lr
   1d1a0:	ldr	r3, [r0, #8]
   1d1a4:	ldr	r0, [r3]
   1d1a8:	bx	lr
   1d1ac:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1d1b0:	ldr	r5, [r0, #8]
   1d1b4:	ldr	r8, [r5, #12]
   1d1b8:	cmp	r8, #0
   1d1bc:	moveq	r4, #1
   1d1c0:	beq	1d1e8 <__assert_fail@plt+0xb608>
   1d1c4:	ldr	r6, [r5, #4]
   1d1c8:	sub	r8, r8, #-1073741823	; 0xc0000001
   1d1cc:	ldr	r4, [r6, r8, lsl #2]
   1d1d0:	mov	r0, r4
   1d1d4:	bl	119a0 <strlen@plt>
   1d1d8:	ldr	r3, [r6]
   1d1dc:	add	r0, r4, r0
   1d1e0:	rsb	r8, r3, r0
   1d1e4:	add	r4, r8, #6
   1d1e8:	ldr	r7, [r5, #16]
   1d1ec:	cmp	r7, #0
   1d1f0:	beq	1d21c <__assert_fail@plt+0xb63c>
   1d1f4:	ldr	r9, [r5, #8]
   1d1f8:	sub	r7, r7, #-1073741823	; 0xc0000001
   1d1fc:	add	r4, r4, #6
   1d200:	ldr	r6, [r9, r7, lsl #2]
   1d204:	mov	r0, r6
   1d208:	bl	119a0 <strlen@plt>
   1d20c:	ldr	r3, [r9]
   1d210:	add	r0, r6, r0
   1d214:	rsb	r7, r3, r0
   1d218:	add	r4, r4, r7
   1d21c:	mov	r0, r4
   1d220:	bl	11910 <malloc@plt>
   1d224:	subs	r6, r0, #0
   1d228:	beq	1d248 <__assert_fail@plt+0xb668>
   1d22c:	cmp	r8, #0
   1d230:	moveq	r4, r6
   1d234:	bne	1d250 <__assert_fail@plt+0xb670>
   1d238:	cmp	r7, #0
   1d23c:	bne	1d2b8 <__assert_fail@plt+0xb6d8>
   1d240:	mov	r3, #0
   1d244:	strb	r3, [r4]
   1d248:	mov	r0, r6
   1d24c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1d250:	ldr	r3, [pc, #208]	; 1d328 <__assert_fail@plt+0xb748>
   1d254:	add	r4, r6, #5
   1d258:	add	r2, r8, #1
   1d25c:	add	r3, pc, r3
   1d260:	ldm	r3, {r0, r1}
   1d264:	str	r0, [r6]
   1d268:	mov	r0, r4
   1d26c:	strb	r1, [r6, #4]
   1d270:	ldr	r3, [r5, #4]
   1d274:	ldr	r1, [r3]
   1d278:	bl	117e4 <memcpy@plt>
   1d27c:	add	r3, r4, r8
   1d280:	cmp	r4, r3
   1d284:	bcs	1d238 <__assert_fail@plt+0xb658>
   1d288:	mov	r2, r4
   1d28c:	mov	r0, #32
   1d290:	ldrb	r1, [r2], #1
   1d294:	cmp	r1, #0
   1d298:	strbeq	r0, [r2, #-1]
   1d29c:	cmp	r2, r3
   1d2a0:	bne	1d290 <__assert_fail@plt+0xb6b0>
   1d2a4:	rsb	r2, r6, r2
   1d2a8:	cmp	r7, #0
   1d2ac:	sub	r2, r2, #5
   1d2b0:	add	r4, r4, r2
   1d2b4:	beq	1d240 <__assert_fail@plt+0xb660>
   1d2b8:	ldr	r3, [pc, #108]	; 1d32c <__assert_fail@plt+0xb74c>
   1d2bc:	add	r8, r4, #6
   1d2c0:	add	r2, r7, #1
   1d2c4:	add	r3, pc, r3
   1d2c8:	ldr	r0, [r3]
   1d2cc:	ldrh	r3, [r3, #4]
   1d2d0:	str	r0, [r4]
   1d2d4:	mov	r0, r8
   1d2d8:	strh	r3, [r4, #4]
   1d2dc:	ldr	r3, [r5, #8]
   1d2e0:	ldr	r1, [r3]
   1d2e4:	bl	117e4 <memcpy@plt>
   1d2e8:	add	r1, r8, r7
   1d2ec:	cmp	r8, r1
   1d2f0:	bcs	1d320 <__assert_fail@plt+0xb740>
   1d2f4:	mov	r3, r8
   1d2f8:	mov	ip, #32
   1d2fc:	ldrb	r2, [r3], #1
   1d300:	cmp	r2, #0
   1d304:	strbeq	ip, [r3, #-1]
   1d308:	cmp	r3, r1
   1d30c:	bne	1d2fc <__assert_fail@plt+0xb71c>
   1d310:	rsb	r4, r4, r3
   1d314:	sub	r4, r4, #6
   1d318:	add	r4, r8, r4
   1d31c:	b	1d240 <__assert_fail@plt+0xb660>
   1d320:	mov	r4, r8
   1d324:	b	1d240 <__assert_fail@plt+0xb660>
   1d328:	ldrdeq	pc, [r0], -r8
   1d32c:	andeq	pc, r0, r8, ror pc	; <UNPREDICTABLE>
   1d330:	push	{r4, r5, r6, lr}
   1d334:	mov	r6, r0
   1d338:	mov	r5, r1
   1d33c:	mov	r0, #1
   1d340:	mov	r1, #28
   1d344:	bl	11718 <calloc@plt>
   1d348:	mov	r4, r0
   1d34c:	mov	r0, r6
   1d350:	bl	1cf34 <__assert_fail@plt+0xb354>
   1d354:	cmp	r4, #0
   1d358:	beq	1d3ac <__assert_fail@plt+0xb7cc>
   1d35c:	str	r5, [r4]
   1d360:	cmp	r5, #5
   1d364:	addls	pc, pc, r5, lsl #2
   1d368:	b	1d3ac <__assert_fail@plt+0xb7cc>
   1d36c:	b	1d3b4 <__assert_fail@plt+0xb7d4>
   1d370:	b	1d3d0 <__assert_fail@plt+0xb7f0>
   1d374:	b	1d3f8 <__assert_fail@plt+0xb818>
   1d378:	b	1d420 <__assert_fail@plt+0xb840>
   1d37c:	b	1d448 <__assert_fail@plt+0xb868>
   1d380:	b	1d384 <__assert_fail@plt+0xb7a4>
   1d384:	ldr	r0, [r0, #24]
   1d388:	mov	r3, #1
   1d38c:	ldr	r1, [pc, #220]	; 1d470 <__assert_fail@plt+0xb890>
   1d390:	ldr	r2, [pc, #220]	; 1d474 <__assert_fail@plt+0xb894>
   1d394:	add	r1, pc, r1
   1d398:	str	r0, [r4, #8]
   1d39c:	add	r2, pc, r2
   1d3a0:	str	r1, [r4, #20]
   1d3a4:	str	r2, [r4, #24]
   1d3a8:	strb	r3, [r4, #4]
   1d3ac:	mov	r0, r4
   1d3b0:	pop	{r4, r5, r6, pc}
   1d3b4:	ldr	r2, [r0, #8]
   1d3b8:	mov	r0, r4
   1d3bc:	ldr	r3, [pc, #180]	; 1d478 <__assert_fail@plt+0xb898>
   1d3c0:	str	r2, [r4, #8]
   1d3c4:	add	r3, pc, r3
   1d3c8:	str	r3, [r4, #20]
   1d3cc:	pop	{r4, r5, r6, pc}
   1d3d0:	ldr	r1, [r0, #20]
   1d3d4:	mov	r0, r4
   1d3d8:	ldr	r2, [pc, #156]	; 1d47c <__assert_fail@plt+0xb89c>
   1d3dc:	ldr	r3, [pc, #156]	; 1d480 <__assert_fail@plt+0xb8a0>
   1d3e0:	add	r2, pc, r2
   1d3e4:	str	r1, [r4, #8]
   1d3e8:	add	r3, pc, r3
   1d3ec:	str	r2, [r4, #20]
   1d3f0:	str	r3, [r4, #24]
   1d3f4:	pop	{r4, r5, r6, pc}
   1d3f8:	ldr	r1, [r0, #16]
   1d3fc:	mov	r0, r4
   1d400:	ldr	r2, [pc, #124]	; 1d484 <__assert_fail@plt+0xb8a4>
   1d404:	ldr	r3, [pc, #124]	; 1d488 <__assert_fail@plt+0xb8a8>
   1d408:	add	r2, pc, r2
   1d40c:	str	r1, [r4, #8]
   1d410:	add	r3, pc, r3
   1d414:	str	r2, [r4, #20]
   1d418:	str	r3, [r4, #24]
   1d41c:	pop	{r4, r5, r6, pc}
   1d420:	ldr	r1, [r0, #4]
   1d424:	mov	r0, r4
   1d428:	ldr	r2, [pc, #92]	; 1d48c <__assert_fail@plt+0xb8ac>
   1d42c:	ldr	r3, [pc, #92]	; 1d490 <__assert_fail@plt+0xb8b0>
   1d430:	add	r2, pc, r2
   1d434:	str	r1, [r4, #8]
   1d438:	add	r3, pc, r3
   1d43c:	str	r2, [r4, #20]
   1d440:	str	r3, [r4, #24]
   1d444:	pop	{r4, r5, r6, pc}
   1d448:	ldr	r1, [r0, #12]
   1d44c:	mov	r0, r4
   1d450:	ldr	r2, [pc, #60]	; 1d494 <__assert_fail@plt+0xb8b4>
   1d454:	ldr	r3, [pc, #60]	; 1d498 <__assert_fail@plt+0xb8b8>
   1d458:	add	r2, pc, r2
   1d45c:	str	r1, [r4, #8]
   1d460:	add	r3, pc, r3
   1d464:	str	r2, [r4, #20]
   1d468:	str	r3, [r4, #24]
   1d46c:	pop	{r4, r5, r6, pc}
   1d470:			; <UNDEFINED> instruction: 0xfffffe04
   1d474:			; <UNDEFINED> instruction: 0xfffffe08
   1d478:			; <UNDEFINED> instruction: 0xfffffd84
   1d47c:			; <UNDEFINED> instruction: 0xfffffdac
   1d480:			; <UNDEFINED> instruction: 0xfffffd98
   1d484:			; <UNDEFINED> instruction: 0xfffffd84
   1d488:			; <UNDEFINED> instruction: 0xfffffd70
   1d48c:			; <UNDEFINED> instruction: 0xfffffd20
   1d490:			; <UNDEFINED> instruction: 0xfffffd24
   1d494:			; <UNDEFINED> instruction: 0xfffffd1c
   1d498:			; <UNDEFINED> instruction: 0xfffffd08
   1d49c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d4a0:	mov	r6, r1
   1d4a4:	mov	r9, r2
   1d4a8:	mov	sl, r0
   1d4ac:	bl	119a0 <strlen@plt>
   1d4b0:	mov	r7, r0
   1d4b4:	mov	r0, r6
   1d4b8:	bl	119a0 <strlen@plt>
   1d4bc:	add	r8, r7, #1
   1d4c0:	add	r5, r0, #1
   1d4c4:	add	r0, r8, r5
   1d4c8:	add	r0, r0, #4
   1d4cc:	bl	11910 <malloc@plt>
   1d4d0:	subs	r4, r0, #0
   1d4d4:	beq	1d534 <__assert_fail@plt+0xb954>
   1d4d8:	mov	r0, r4
   1d4dc:	add	r7, r7, #5
   1d4e0:	mov	r1, sl
   1d4e4:	mov	r2, r8
   1d4e8:	add	r7, r4, r7
   1d4ec:	str	r7, [r0], #4
   1d4f0:	bl	117e4 <memcpy@plt>
   1d4f4:	mov	r1, r6
   1d4f8:	mov	r2, r5
   1d4fc:	ldr	r0, [r4]
   1d500:	bl	117e4 <memcpy@plt>
   1d504:	ldr	r0, [r9]
   1d508:	mov	r1, r4
   1d50c:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1d510:	cmp	r0, #0
   1d514:	beq	1d534 <__assert_fail@plt+0xb954>
   1d518:	mov	r4, #0
   1d51c:	str	r0, [r9]
   1d520:	mov	r5, r4
   1d524:	mov	r0, r4
   1d528:	bl	117c0 <free@plt>
   1d52c:	mov	r0, r5
   1d530:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d534:	mvn	r5, #11
   1d538:	b	1d524 <__assert_fail@plt+0xb944>
   1d53c:	mov	r5, r0
   1d540:	mov	r0, r4
   1d544:	bl	117c0 <free@plt>
   1d548:	mov	r0, r5
   1d54c:	bl	11b8c <_Unwind_Resume@plt>
   1d550:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d554:	subs	r6, r2, #0
   1d558:	mov	r7, r0
   1d55c:	mov	r8, r1
   1d560:	movne	r9, #0
   1d564:	beq	1d650 <__assert_fail@plt+0xba70>
   1d568:	ldr	r5, [r7]
   1d56c:	cmp	r5, #0
   1d570:	beq	1d5ac <__assert_fail@plt+0xb9cc>
   1d574:	mov	r4, r5
   1d578:	b	1d584 <__assert_fail@plt+0xb9a4>
   1d57c:	cmp	r4, #0
   1d580:	beq	1d67c <__assert_fail@plt+0xba9c>
   1d584:	ldr	r1, [r4, #8]
   1d588:	mov	r0, r6
   1d58c:	add	r1, r1, #5
   1d590:	bl	11754 <strcmp@plt>
   1d594:	cmp	r0, #0
   1d598:	ble	1d61c <__assert_fail@plt+0xba3c>
   1d59c:	ldr	r4, [r4]
   1d5a0:	cmp	r4, r5
   1d5a4:	bne	1d57c <__assert_fail@plt+0xb99c>
   1d5a8:	mov	r5, #0
   1d5ac:	mov	r0, r6
   1d5b0:	bl	119a0 <strlen@plt>
   1d5b4:	mov	sl, r0
   1d5b8:	add	r0, r0, #9
   1d5bc:	bl	11910 <malloc@plt>
   1d5c0:	subs	r4, r0, #0
   1d5c4:	beq	1d664 <__assert_fail@plt+0xba84>
   1d5c8:	mov	r1, r6
   1d5cc:	add	r2, sl, #1
   1d5d0:	add	r0, r4, #5
   1d5d4:	bl	117e4 <memcpy@plt>
   1d5d8:	cmp	r5, #0
   1d5dc:	str	r8, [r4]
   1d5e0:	strb	r9, [r4, #4]
   1d5e4:	beq	1d628 <__assert_fail@plt+0xba48>
   1d5e8:	ldr	r3, [r7]
   1d5ec:	mov	r0, r5
   1d5f0:	mov	r1, r4
   1d5f4:	cmp	r5, r3
   1d5f8:	beq	1d648 <__assert_fail@plt+0xba68>
   1d5fc:	bl	1cf9c <__assert_fail@plt+0xb3bc>
   1d600:	cmp	r0, #0
   1d604:	beq	1d66c <__assert_fail@plt+0xba8c>
   1d608:	ldr	r3, [r7]
   1d60c:	cmp	r5, r3
   1d610:	beq	1d63c <__assert_fail@plt+0xba5c>
   1d614:	mov	r0, #0
   1d618:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d61c:	bne	1d67c <__assert_fail@plt+0xba9c>
   1d620:	mvn	r0, #16
   1d624:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d628:	ldr	r0, [r7]
   1d62c:	mov	r1, r4
   1d630:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1d634:	cmp	r0, #0
   1d638:	beq	1d66c <__assert_fail@plt+0xba8c>
   1d63c:	str	r0, [r7]
   1d640:	mov	r0, #0
   1d644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d648:	bl	1d024 <__assert_fail@plt+0xb444>
   1d64c:	b	1d600 <__assert_fail@plt+0xba20>
   1d650:	mov	r0, r1
   1d654:	mov	r9, #1
   1d658:	bl	1176c <basename@plt>
   1d65c:	mov	r6, r0
   1d660:	b	1d568 <__assert_fail@plt+0xb988>
   1d664:	mvn	r0, #11
   1d668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d66c:	mov	r0, r4
   1d670:	bl	117c0 <free@plt>
   1d674:	mvn	r0, #11
   1d678:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d67c:	mov	r5, r4
   1d680:	b	1d5ac <__assert_fail@plt+0xb9cc>
   1d684:	push	{r3, r4, r5, lr}
   1d688:	mov	r5, r0
   1d68c:	mov	r0, r1
   1d690:	bl	11a18 <__strdup@plt>
   1d694:	subs	r4, r0, #0
   1d698:	beq	1d6cc <__assert_fail@plt+0xbaec>
   1d69c:	ldr	r0, [r5]
   1d6a0:	mov	r1, r4
   1d6a4:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1d6a8:	cmp	r0, #0
   1d6ac:	beq	1d6cc <__assert_fail@plt+0xbaec>
   1d6b0:	mov	r4, #0
   1d6b4:	str	r0, [r5]
   1d6b8:	mov	r5, r4
   1d6bc:	mov	r0, r4
   1d6c0:	bl	117c0 <free@plt>
   1d6c4:	mov	r0, r5
   1d6c8:	pop	{r3, r4, r5, pc}
   1d6cc:	mvn	r5, #11
   1d6d0:	b	1d6bc <__assert_fail@plt+0xbadc>
   1d6d4:	mov	r5, r0
   1d6d8:	mov	r0, r4
   1d6dc:	bl	117c0 <free@plt>
   1d6e0:	mov	r0, r5
   1d6e4:	bl	11b8c <_Unwind_Resume@plt>
   1d6e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d6ec:	mov	sl, r0
   1d6f0:	mov	r0, r1
   1d6f4:	mov	r6, r2
   1d6f8:	mov	r8, r1
   1d6fc:	bl	119a0 <strlen@plt>
   1d700:	mov	r9, r0
   1d704:	mov	r0, r6
   1d708:	bl	119a0 <strlen@plt>
   1d70c:	add	r7, r9, #1
   1d710:	add	r5, r0, #1
   1d714:	add	r0, r7, r5
   1d718:	add	r0, r0, #4
   1d71c:	bl	11910 <malloc@plt>
   1d720:	subs	r4, r0, #0
   1d724:	beq	1d794 <__assert_fail@plt+0xbbb4>
   1d728:	mov	r0, r4
   1d72c:	add	r9, r9, #5
   1d730:	mov	r1, r8
   1d734:	mov	r2, r7
   1d738:	add	r9, r4, r9
   1d73c:	str	r9, [r0], #4
   1d740:	bl	117e4 <memcpy@plt>
   1d744:	mov	r1, r6
   1d748:	mov	r2, r5
   1d74c:	ldr	r0, [r4]
   1d750:	bl	117e4 <memcpy@plt>
   1d754:	ldr	r0, [r4]
   1d758:	mov	r1, #9
   1d75c:	mov	r2, #32
   1d760:	bl	1b1d4 <__assert_fail@plt+0x95f4>
   1d764:	ldr	r0, [sl]
   1d768:	mov	r1, r4
   1d76c:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1d770:	cmp	r0, #0
   1d774:	beq	1d794 <__assert_fail@plt+0xbbb4>
   1d778:	mov	r4, #0
   1d77c:	str	r0, [sl]
   1d780:	mov	r5, r4
   1d784:	mov	r0, r4
   1d788:	bl	117c0 <free@plt>
   1d78c:	mov	r0, r5
   1d790:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d794:	mvn	r5, #11
   1d798:	b	1d784 <__assert_fail@plt+0xbba4>
   1d79c:	mov	r5, r0
   1d7a0:	mov	r0, r4
   1d7a4:	bl	117c0 <free@plt>
   1d7a8:	mov	r0, r5
   1d7ac:	bl	11b8c <_Unwind_Resume@plt>
   1d7b0:	cmp	r2, #0
   1d7b4:	cmpne	r1, #0
   1d7b8:	push	{r4, r5, r6, r7, lr}
   1d7bc:	mov	r5, r1
   1d7c0:	sub	sp, sp, #20
   1d7c4:	mov	r6, r2
   1d7c8:	mov	r7, r0
   1d7cc:	mov	r4, r3
   1d7d0:	beq	1d884 <__assert_fail@plt+0xbca4>
   1d7d4:	mov	r0, r1
   1d7d8:	ldr	r1, [pc, #244]	; 1d8d4 <__assert_fail@plt+0xbcf4>
   1d7dc:	add	r1, pc, r1
   1d7e0:	bl	11754 <strcmp@plt>
   1d7e4:	cmp	r0, #0
   1d7e8:	bne	1d85c <__assert_fail@plt+0xbc7c>
   1d7ec:	ldr	r1, [pc, #228]	; 1d8d8 <__assert_fail@plt+0xbcf8>
   1d7f0:	mov	r0, r6
   1d7f4:	mov	r2, #10
   1d7f8:	add	r1, pc, r1
   1d7fc:	bl	11ba4 <strncmp@plt>
   1d800:	cmp	r0, #0
   1d804:	bne	1d85c <__assert_fail@plt+0xbc7c>
   1d808:	cmp	r4, #0
   1d80c:	beq	1d884 <__assert_fail@plt+0xbca4>
   1d810:	add	r5, r7, #8
   1d814:	mov	r6, r0
   1d818:	b	1d828 <__assert_fail@plt+0xbc48>
   1d81c:	strb	r6, [r3]
   1d820:	mov	r4, r2
   1d824:	bl	1d684 <__assert_fail@plt+0xbaa4>
   1d828:	mov	r1, #44	; 0x2c
   1d82c:	mov	r0, r4
   1d830:	bl	119ac <strchr@plt>
   1d834:	mov	r1, r4
   1d838:	subs	r3, r0, #0
   1d83c:	mov	r0, r5
   1d840:	add	r2, r3, #1
   1d844:	bne	1d81c <__assert_fail@plt+0xbc3c>
   1d848:	mov	r0, r5
   1d84c:	mov	r1, r4
   1d850:	add	sp, sp, #20
   1d854:	pop	{r4, r5, r6, r7, lr}
   1d858:	b	1d684 <__assert_fail@plt+0xbaa4>
   1d85c:	mov	r0, r5
   1d860:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1d864:	cmp	r0, #0
   1d868:	blt	1d88c <__assert_fail@plt+0xbcac>
   1d86c:	add	r0, r7, #12
   1d870:	mov	r1, r5
   1d874:	mov	r2, r6
   1d878:	add	sp, sp, #20
   1d87c:	pop	{r4, r5, r6, r7, lr}
   1d880:	b	1d6e8 <__assert_fail@plt+0xbb08>
   1d884:	add	sp, sp, #20
   1d888:	pop	{r4, r5, r6, r7, pc}
   1d88c:	ldr	r0, [r7]
   1d890:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1d894:	cmp	r0, #2
   1d898:	ble	1d86c <__assert_fail@plt+0xbc8c>
   1d89c:	ldr	r2, [pc, #56]	; 1d8dc <__assert_fail@plt+0xbcfc>
   1d8a0:	mov	r1, #3
   1d8a4:	ldr	r0, [r7]
   1d8a8:	movw	r3, #489	; 0x1e9
   1d8ac:	add	r2, pc, r2
   1d8b0:	ldr	ip, [pc, #40]	; 1d8e0 <__assert_fail@plt+0xbd00>
   1d8b4:	str	r2, [sp, #4]
   1d8b8:	ldr	r2, [pc, #36]	; 1d8e4 <__assert_fail@plt+0xbd04>
   1d8bc:	add	ip, pc, ip
   1d8c0:	str	r5, [sp, #8]
   1d8c4:	str	ip, [sp]
   1d8c8:	add	r2, pc, r2
   1d8cc:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1d8d0:	b	1d86c <__assert_fail@plt+0xbc8c>
   1d8d4:	muleq	r0, ip, r9
   1d8d8:	andeq	pc, r0, ip, asr #20
   1d8dc:	andeq	pc, r0, r0, asr #19
   1d8e0:	andeq	pc, r0, r8, lsr fp	; <UNPREDICTABLE>
   1d8e4:	andeq	pc, r0, r8, lsl #19
   1d8e8:	ldr	r3, [r0, #8]
   1d8ec:	ldr	r2, [r3, #12]
   1d8f0:	ldr	r0, [r3, #4]
   1d8f4:	str	r2, [r1]
   1d8f8:	bx	lr
   1d8fc:	ldr	r3, [r0, #8]
   1d900:	ldr	r2, [r3, #16]
   1d904:	ldr	r0, [r3, #8]
   1d908:	str	r2, [r1]
   1d90c:	bx	lr
   1d910:	push	{r3, r4, r5, lr}
   1d914:	mov	r4, r0
   1d918:	ldr	r5, [r0, #4]
   1d91c:	cmp	r5, #0
   1d920:	beq	1d944 <__assert_fail@plt+0xbd64>
   1d924:	ldr	r0, [r5, #8]
   1d928:	bl	117c0 <free@plt>
   1d92c:	mov	r0, r5
   1d930:	bl	1d06c <__assert_fail@plt+0xb48c>
   1d934:	cmp	r0, #0
   1d938:	mov	r5, r0
   1d93c:	str	r0, [r4, #4]
   1d940:	bne	1d924 <__assert_fail@plt+0xbd44>
   1d944:	ldr	r5, [r4, #8]
   1d948:	cmp	r5, #0
   1d94c:	beq	1d970 <__assert_fail@plt+0xbd90>
   1d950:	ldr	r0, [r5, #8]
   1d954:	bl	117c0 <free@plt>
   1d958:	mov	r0, r5
   1d95c:	bl	1d06c <__assert_fail@plt+0xb48c>
   1d960:	cmp	r0, #0
   1d964:	mov	r5, r0
   1d968:	str	r0, [r4, #8]
   1d96c:	bne	1d950 <__assert_fail@plt+0xbd70>
   1d970:	ldr	r5, [r4, #12]
   1d974:	cmp	r5, #0
   1d978:	beq	1d99c <__assert_fail@plt+0xbdbc>
   1d97c:	ldr	r0, [r5, #8]
   1d980:	bl	117c0 <free@plt>
   1d984:	mov	r0, r5
   1d988:	bl	1d06c <__assert_fail@plt+0xb48c>
   1d98c:	cmp	r0, #0
   1d990:	mov	r5, r0
   1d994:	str	r0, [r4, #12]
   1d998:	bne	1d97c <__assert_fail@plt+0xbd9c>
   1d99c:	ldr	r5, [r4, #20]
   1d9a0:	cmp	r5, #0
   1d9a4:	beq	1d9c8 <__assert_fail@plt+0xbde8>
   1d9a8:	ldr	r0, [r5, #8]
   1d9ac:	bl	117c0 <free@plt>
   1d9b0:	mov	r0, r5
   1d9b4:	bl	1d06c <__assert_fail@plt+0xb48c>
   1d9b8:	cmp	r0, #0
   1d9bc:	mov	r5, r0
   1d9c0:	str	r0, [r4, #20]
   1d9c4:	bne	1d9a8 <__assert_fail@plt+0xbdc8>
   1d9c8:	ldr	r5, [r4, #16]
   1d9cc:	cmp	r5, #0
   1d9d0:	beq	1d9f4 <__assert_fail@plt+0xbe14>
   1d9d4:	ldr	r0, [r5, #8]
   1d9d8:	bl	117c0 <free@plt>
   1d9dc:	mov	r0, r5
   1d9e0:	bl	1d06c <__assert_fail@plt+0xb48c>
   1d9e4:	cmp	r0, #0
   1d9e8:	mov	r5, r0
   1d9ec:	str	r0, [r4, #16]
   1d9f0:	bne	1d9d4 <__assert_fail@plt+0xbdf4>
   1d9f4:	ldr	r5, [r4, #24]
   1d9f8:	cmp	r5, #0
   1d9fc:	beq	1da20 <__assert_fail@plt+0xbe40>
   1da00:	ldr	r0, [r5, #8]
   1da04:	bl	117c0 <free@plt>
   1da08:	mov	r0, r5
   1da0c:	bl	1d06c <__assert_fail@plt+0xb48c>
   1da10:	cmp	r0, #0
   1da14:	mov	r5, r0
   1da18:	str	r0, [r4, #24]
   1da1c:	bne	1da00 <__assert_fail@plt+0xbe20>
   1da20:	ldr	r0, [r4, #28]
   1da24:	cmp	r0, #0
   1da28:	beq	1da48 <__assert_fail@plt+0xbe68>
   1da2c:	ldr	r0, [r0, #8]
   1da30:	bl	117c0 <free@plt>
   1da34:	ldr	r0, [r4, #28]
   1da38:	bl	1d06c <__assert_fail@plt+0xb48c>
   1da3c:	cmp	r0, #0
   1da40:	str	r0, [r4, #28]
   1da44:	bne	1da2c <__assert_fail@plt+0xbe4c>
   1da48:	mov	r0, r4
   1da4c:	pop	{r3, r4, r5, lr}
   1da50:	b	117c0 <free@plt>
   1da54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da58:	sub	sp, sp, #4416	; 0x1140
   1da5c:	ldr	lr, [pc, #3920]	; 1e9b4 <__assert_fail@plt+0xcdd4>
   1da60:	sub	sp, sp, #52	; 0x34
   1da64:	ldr	ip, [pc, #3916]	; 1e9b8 <__assert_fail@plt+0xcdd8>
   1da68:	movw	r3, #61220	; 0xef24
   1da6c:	add	lr, pc, lr
   1da70:	str	r1, [sp, #76]	; 0x4c
   1da74:	str	r0, [sp, #52]	; 0x34
   1da78:	add	r1, sp, #4416	; 0x1140
   1da7c:	ldr	ip, [lr, ip]
   1da80:	add	r1, r1, #48	; 0x30
   1da84:	movt	r3, #65535	; 0xffff
   1da88:	mov	r8, #0
   1da8c:	mov	r4, r2
   1da90:	mov	r2, lr
   1da94:	str	r8, [r1, r3]
   1da98:	add	r2, sp, #8192	; 0x2000
   1da9c:	ldr	r3, [ip]
   1daa0:	str	ip, [sp, #84]	; 0x54
   1daa4:	str	r3, [r2, #-3732]	; 0xfffff16c
   1daa8:	bl	1bc60 <__assert_fail@plt+0xa080>
   1daac:	add	r3, sp, #148	; 0x94
   1dab0:	ldr	r2, [pc, #3844]	; 1e9bc <__assert_fail@plt+0xcddc>
   1dab4:	str	r3, [sp, #44]	; 0x2c
   1dab8:	add	r2, pc, r2
   1dabc:	mov	r1, r0
   1dac0:	mov	r0, r3
   1dac4:	bl	1d550 <__assert_fail@plt+0xb970>
   1dac8:	ldr	r6, [r4]
   1dacc:	cmp	r6, r8
   1dad0:	beq	1e928 <__assert_fail@plt+0xcd48>
   1dad4:	ldr	r7, [pc, #3812]	; 1e9c0 <__assert_fail@plt+0xcde0>
   1dad8:	add	sl, sp, #152	; 0x98
   1dadc:	ldr	ip, [pc, #3808]	; 1e9c4 <__assert_fail@plt+0xcde4>
   1dae0:	add	r7, pc, r7
   1dae4:	str	r7, [sp, #60]	; 0x3c
   1dae8:	add	ip, pc, ip
   1daec:	ldr	r7, [pc, #3796]	; 1e9c8 <__assert_fail@plt+0xcde8>
   1daf0:	str	ip, [sp, #64]	; 0x40
   1daf4:	ldr	ip, [pc, #3792]	; 1e9cc <__assert_fail@plt+0xcdec>
   1daf8:	add	r7, pc, r7
   1dafc:	str	r7, [sp, #68]	; 0x44
   1db00:	add	ip, pc, ip
   1db04:	ldr	r7, [pc, #3780]	; 1e9d0 <__assert_fail@plt+0xcdf0>
   1db08:	str	ip, [sp, #72]	; 0x48
   1db0c:	ldr	ip, [pc, #3776]	; 1e9d4 <__assert_fail@plt+0xcdf4>
   1db10:	add	r7, pc, r7
   1db14:	str	r8, [sp, #40]	; 0x28
   1db18:	add	ip, pc, ip
   1db1c:	str	r7, [sp, #48]	; 0x30
   1db20:	str	ip, [sp, #80]	; 0x50
   1db24:	b	1db54 <__assert_fail@plt+0xbf74>
   1db28:	bl	119f4 <__errno_location@plt>
   1db2c:	ldr	r3, [r0]
   1db30:	rsb	r3, r3, #0
   1db34:	cmp	r3, #0
   1db38:	movge	r0, #0
   1db3c:	movge	r1, #0
   1db40:	strdge	r0, [sp, #32]
   1db44:	bge	1db98 <__assert_fail@plt+0xbfb8>
   1db48:	ldr	r6, [r4, #4]!
   1db4c:	cmp	r6, #0
   1db50:	beq	1dbf4 <__assert_fail@plt+0xc014>
   1db54:	mov	r0, #3
   1db58:	mov	r1, r6
   1db5c:	mov	r2, sl
   1db60:	bl	11b74 <__xstat64@plt>
   1db64:	subs	r5, r0, #0
   1db68:	bne	1db28 <__assert_fail@plt+0xbf48>
   1db6c:	mov	r0, sl
   1db70:	bl	1b9f8 <__assert_fail@plt+0x9e18>
   1db74:	ldr	r3, [sl, #16]
   1db78:	and	r3, r3, #61440	; 0xf000
   1db7c:	cmp	r3, #16384	; 0x4000
   1db80:	strd	r0, [sp, #32]
   1db84:	beq	1de88 <__assert_fail@plt+0xc2a8>
   1db88:	mov	r2, r5
   1db8c:	add	r0, sp, #148	; 0x94
   1db90:	mov	r1, r6
   1db94:	bl	1d550 <__assert_fail@plt+0xb970>
   1db98:	mov	r0, r6
   1db9c:	bl	119a0 <strlen@plt>
   1dba0:	mov	r7, r0
   1dba4:	add	r0, r0, #9
   1dba8:	bl	11910 <malloc@plt>
   1dbac:	add	r7, r7, #1
   1dbb0:	subs	r5, r0, #0
   1dbb4:	beq	1dfa8 <__assert_fail@plt+0xc3c8>
   1dbb8:	mov	r1, r6
   1dbbc:	mov	r2, r7
   1dbc0:	ldrd	r6, [sp, #32]
   1dbc4:	mov	r0, r5
   1dbc8:	strd	r6, [r0], #8
   1dbcc:	bl	117e4 <memcpy@plt>
   1dbd0:	ldr	r0, [sp, #40]	; 0x28
   1dbd4:	mov	r1, r5
   1dbd8:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1dbdc:	cmp	r0, #0
   1dbe0:	beq	1dfa8 <__assert_fail@plt+0xc3c8>
   1dbe4:	ldr	r6, [r4, #4]!
   1dbe8:	str	r0, [sp, #40]	; 0x28
   1dbec:	cmp	r6, #0
   1dbf0:	bne	1db54 <__assert_fail@plt+0xbf74>
   1dbf4:	ldr	r8, [sp, #40]	; 0x28
   1dbf8:	mov	r0, #1
   1dbfc:	mov	r1, #32
   1dc00:	bl	11718 <calloc@plt>
   1dc04:	ldr	ip, [sp, #76]	; 0x4c
   1dc08:	cmp	r0, #0
   1dc0c:	str	r0, [sp, #44]	; 0x2c
   1dc10:	str	r0, [ip]
   1dc14:	beq	1dfac <__assert_fail@plt+0xc3cc>
   1dc18:	add	lr, sp, #4416	; 0x1140
   1dc1c:	movw	r3, #61220	; 0xef24
   1dc20:	add	lr, lr, #48	; 0x30
   1dc24:	movt	r3, #65535	; 0xffff
   1dc28:	str	r8, [r0, #28]
   1dc2c:	ldr	r0, [lr, r3]
   1dc30:	ldr	r6, [sp, #52]	; 0x34
   1dc34:	ldr	r7, [sp, #44]	; 0x2c
   1dc38:	cmp	r0, #0
   1dc3c:	str	r6, [r7]
   1dc40:	beq	1e0b4 <__assert_fail@plt+0xc4d4>
   1dc44:	ldr	r6, [pc, #3468]	; 1e9d8 <__assert_fail@plt+0xcdf8>
   1dc48:	add	sl, sp, #152	; 0x98
   1dc4c:	ldr	r7, [pc, #3464]	; 1e9dc <__assert_fail@plt+0xcdfc>
   1dc50:	add	fp, sp, #364	; 0x16c
   1dc54:	add	r6, pc, r6
   1dc58:	str	r6, [sp, #80]	; 0x50
   1dc5c:	ldr	r6, [pc, #3452]	; 1e9e0 <__assert_fail@plt+0xce00>
   1dc60:	add	r7, pc, r7
   1dc64:	str	r7, [sp, #76]	; 0x4c
   1dc68:	add	r6, pc, r6
   1dc6c:	ldr	r7, [pc, #3440]	; 1e9e4 <__assert_fail@plt+0xce04>
   1dc70:	str	r6, [sp, #128]	; 0x80
   1dc74:	ldr	r6, [pc, #3436]	; 1e9e8 <__assert_fail@plt+0xce08>
   1dc78:	add	r7, pc, r7
   1dc7c:	str	fp, [sp, #32]
   1dc80:	add	r6, pc, r6
   1dc84:	str	r7, [sp, #132]	; 0x84
   1dc88:	str	r6, [sp, #136]	; 0x88
   1dc8c:	ldr	r9, [r0, #8]
   1dc90:	ldrb	r3, [r9, #4]
   1dc94:	cmp	r3, #0
   1dc98:	beq	1e21c <__assert_fail@plt+0xc63c>
   1dc9c:	ldr	r0, [sp, #32]
   1dca0:	mov	r2, #4096	; 0x1000
   1dca4:	ldr	r1, [r9]
   1dca8:	bl	118b0 <__strcpy_chk@plt>
   1dcac:	ldr	r0, [sp, #32]
   1dcb0:	mov	r1, #524288	; 0x80000
   1dcb4:	bl	118e0 <open64@plt>
   1dcb8:	subs	r4, r0, #0
   1dcbc:	blt	1e080 <__assert_fail@plt+0xc4a0>
   1dcc0:	ldr	r6, [sp, #44]	; 0x2c
   1dcc4:	add	ip, sp, #4416	; 0x1140
   1dcc8:	add	ip, ip, #48	; 0x30
   1dccc:	movw	r3, #61224	; 0xef28
   1dcd0:	movt	r3, #65535	; 0xffff
   1dcd4:	ldr	r1, [sp, #76]	; 0x4c
   1dcd8:	ldr	r6, [r6]
   1dcdc:	mov	r2, #0
   1dce0:	str	r2, [ip, r3]
   1dce4:	str	r6, [sp, #52]	; 0x34
   1dce8:	bl	1170c <fdopen@plt>
   1dcec:	subs	fp, r0, #0
   1dcf0:	beq	1e03c <__assert_fail@plt+0xc45c>
   1dcf4:	ldr	r7, [pc, #3312]	; 1e9ec <__assert_fail@plt+0xce0c>
   1dcf8:	ldr	r6, [pc, #3312]	; 1e9f0 <__assert_fail@plt+0xce10>
   1dcfc:	add	r7, pc, r7
   1dd00:	str	r7, [sp, #48]	; 0x30
   1dd04:	ldr	r7, [pc, #3304]	; 1e9f4 <__assert_fail@plt+0xce14>
   1dd08:	add	r6, pc, r6
   1dd0c:	str	r9, [sp, #60]	; 0x3c
   1dd10:	add	r7, pc, r7
   1dd14:	str	r7, [sp, #64]	; 0x40
   1dd18:	ldr	r7, [pc, #3288]	; 1e9f8 <__assert_fail@plt+0xce18>
   1dd1c:	add	r7, pc, r7
   1dd20:	str	r7, [sp, #68]	; 0x44
   1dd24:	ldr	r7, [pc, #3280]	; 1e9fc <__assert_fail@plt+0xce1c>
   1dd28:	add	r7, pc, r7
   1dd2c:	str	r7, [sp, #72]	; 0x48
   1dd30:	ldr	r7, [pc, #3272]	; 1ea00 <__assert_fail@plt+0xce20>
   1dd34:	add	r7, pc, r7
   1dd38:	str	r7, [sp, #56]	; 0x38
   1dd3c:	b	1dd48 <__assert_fail@plt+0xc168>
   1dd40:	mov	r0, r4
   1dd44:	bl	117c0 <free@plt>
   1dd48:	mov	r0, fp
   1dd4c:	mov	r1, sl
   1dd50:	bl	1b600 <__assert_fail@plt+0x9a20>
   1dd54:	subs	r4, r0, #0
   1dd58:	beq	1e24c <__assert_fail@plt+0xc66c>
   1dd5c:	ldrb	r3, [r4]
   1dd60:	cmp	r3, #0
   1dd64:	cmpne	r3, #35	; 0x23
   1dd68:	beq	1dd40 <__assert_fail@plt+0xc160>
   1dd6c:	add	r7, sp, #256	; 0x100
   1dd70:	mov	r1, r6
   1dd74:	mov	r2, r7
   1dd78:	bl	11808 <__strtok_r@plt>
   1dd7c:	subs	r5, r0, #0
   1dd80:	beq	1dd40 <__assert_fail@plt+0xc160>
   1dd84:	ldr	r1, [sp, #48]	; 0x30
   1dd88:	bl	11754 <strcmp@plt>
   1dd8c:	subs	r9, r0, #0
   1dd90:	beq	1e25c <__assert_fail@plt+0xc67c>
   1dd94:	mov	r0, r5
   1dd98:	ldr	r1, [sp, #56]	; 0x38
   1dd9c:	bl	11754 <strcmp@plt>
   1dda0:	cmp	r0, #0
   1dda4:	beq	1e334 <__assert_fail@plt+0xc754>
   1dda8:	ldr	r1, [pc, #3156]	; 1ea04 <__assert_fail@plt+0xce24>
   1ddac:	mov	r0, r5
   1ddb0:	add	r1, pc, r1
   1ddb4:	bl	11754 <strcmp@plt>
   1ddb8:	subs	r9, r0, #0
   1ddbc:	beq	1e364 <__assert_fail@plt+0xc784>
   1ddc0:	ldr	r1, [pc, #3136]	; 1ea08 <__assert_fail@plt+0xce28>
   1ddc4:	mov	r0, r5
   1ddc8:	add	r1, pc, r1
   1ddcc:	bl	11754 <strcmp@plt>
   1ddd0:	subs	r9, r0, #0
   1ddd4:	beq	1e3f4 <__assert_fail@plt+0xc814>
   1ddd8:	ldr	r1, [pc, #3116]	; 1ea0c <__assert_fail@plt+0xce2c>
   1dddc:	mov	r0, r5
   1dde0:	add	r1, pc, r1
   1dde4:	bl	11754 <strcmp@plt>
   1dde8:	subs	r9, r0, #0
   1ddec:	beq	1e180 <__assert_fail@plt+0xc5a0>
   1ddf0:	ldr	r1, [pc, #3096]	; 1ea10 <__assert_fail@plt+0xce30>
   1ddf4:	mov	r0, r5
   1ddf8:	add	r1, pc, r1
   1ddfc:	bl	11754 <strcmp@plt>
   1de00:	subs	r8, r0, #0
   1de04:	beq	1e4ec <__assert_fail@plt+0xc90c>
   1de08:	ldr	r1, [pc, #3076]	; 1ea14 <__assert_fail@plt+0xce34>
   1de0c:	mov	r0, r5
   1de10:	add	r1, pc, r1
   1de14:	bl	11754 <strcmp@plt>
   1de18:	cmp	r0, #0
   1de1c:	beq	1de38 <__assert_fail@plt+0xc258>
   1de20:	ldr	r1, [pc, #3056]	; 1ea18 <__assert_fail@plt+0xce38>
   1de24:	mov	r0, r5
   1de28:	add	r1, pc, r1
   1de2c:	bl	11754 <strcmp@plt>
   1de30:	cmp	r0, #0
   1de34:	bne	1e1c0 <__assert_fail@plt+0xc5e0>
   1de38:	ldr	r0, [sp, #52]	; 0x34
   1de3c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1de40:	cmp	r0, #2
   1de44:	ble	1dd40 <__assert_fail@plt+0xc160>
   1de48:	ldr	r2, [pc, #3020]	; 1ea1c <__assert_fail@plt+0xce3c>
   1de4c:	mov	r1, #3
   1de50:	ldr	r7, [sp, #32]
   1de54:	movw	r3, #631	; 0x277
   1de58:	add	r2, pc, r2
   1de5c:	ldr	ip, [pc, #3004]	; 1ea20 <__assert_fail@plt+0xce40>
   1de60:	str	r2, [sp, #4]
   1de64:	ldr	r2, [pc, #3000]	; 1ea24 <__assert_fail@plt+0xce44>
   1de68:	add	ip, pc, ip
   1de6c:	ldr	r0, [sp, #52]	; 0x34
   1de70:	str	r7, [sp, #8]
   1de74:	add	r2, pc, r2
   1de78:	str	r5, [sp, #12]
   1de7c:	str	ip, [sp]
   1de80:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1de84:	b	1dd40 <__assert_fail@plt+0xc160>
   1de88:	mov	r0, r6
   1de8c:	bl	118c8 <opendir@plt>
   1de90:	subs	r7, r0, #0
   1de94:	beq	1e4a8 <__assert_fail@plt+0xc8c8>
   1de98:	bl	11afc <readdir64@plt>
   1de9c:	subs	fp, r0, #0
   1dea0:	beq	1df5c <__assert_fail@plt+0xc37c>
   1dea4:	ldr	r8, [sp, #60]	; 0x3c
   1dea8:	add	r9, sp, #304	; 0x130
   1deac:	str	r4, [sp, #56]	; 0x38
   1deb0:	add	r5, fp, #19
   1deb4:	mov	r0, r5
   1deb8:	bl	119a0 <strlen@plt>
   1debc:	ldrb	r3, [fp, #19]
   1dec0:	cmp	r3, #46	; 0x2e
   1dec4:	mov	r4, r0
   1dec8:	beq	1df48 <__assert_fail@plt+0xc368>
   1decc:	cmp	r0, #5
   1ded0:	bls	1df48 <__assert_fail@plt+0xc368>
   1ded4:	sub	r0, r0, #5
   1ded8:	mov	r1, r8
   1dedc:	add	r0, r5, r0
   1dee0:	bl	11754 <strcmp@plt>
   1dee4:	cmp	r0, #0
   1dee8:	beq	1df04 <__assert_fail@plt+0xc324>
   1deec:	sub	r0, r4, #6
   1def0:	ldr	r1, [sp, #48]	; 0x30
   1def4:	add	r0, r5, r0
   1def8:	bl	11754 <strcmp@plt>
   1defc:	cmp	r0, #0
   1df00:	bne	1df48 <__assert_fail@plt+0xc368>
   1df04:	mov	r0, r7
   1df08:	bl	11b38 <dirfd@plt>
   1df0c:	mov	r3, #0
   1df10:	mov	r2, r5
   1df14:	str	r3, [sp]
   1df18:	sub	r3, r9, #48	; 0x30
   1df1c:	mov	r1, r0
   1df20:	mov	r0, #3
   1df24:	bl	1185c <__fxstatat64@plt>
   1df28:	ldr	r3, [r9, #-32]	; 0xffffffe0
   1df2c:	and	r3, r3, #61440	; 0xf000
   1df30:	cmp	r3, #16384	; 0x4000
   1df34:	beq	1df68 <__assert_fail@plt+0xc388>
   1df38:	mov	r2, r5
   1df3c:	add	r0, sp, #148	; 0x94
   1df40:	mov	r1, r6
   1df44:	bl	1d550 <__assert_fail@plt+0xb970>
   1df48:	mov	r0, r7
   1df4c:	bl	11afc <readdir64@plt>
   1df50:	subs	fp, r0, #0
   1df54:	bne	1deb0 <__assert_fail@plt+0xc2d0>
   1df58:	ldr	r4, [sp, #56]	; 0x38
   1df5c:	mov	r0, r7
   1df60:	bl	11bc8 <closedir@plt>
   1df64:	b	1db98 <__assert_fail@plt+0xbfb8>
   1df68:	ldr	r0, [sp, #52]	; 0x34
   1df6c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1df70:	cmp	r0, #2
   1df74:	ble	1df48 <__assert_fail@plt+0xc368>
   1df78:	ldr	ip, [sp, #68]	; 0x44
   1df7c:	mov	r1, #3
   1df80:	ldr	r0, [sp, #52]	; 0x34
   1df84:	movw	r3, #695	; 0x2b7
   1df88:	str	r6, [sp, #8]
   1df8c:	str	ip, [sp]
   1df90:	ldr	ip, [sp, #72]	; 0x48
   1df94:	ldr	r2, [sp, #64]	; 0x40
   1df98:	str	r5, [sp, #12]
   1df9c:	str	ip, [sp, #4]
   1dfa0:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1dfa4:	b	1df48 <__assert_fail@plt+0xc368>
   1dfa8:	ldr	r8, [sp, #40]	; 0x28
   1dfac:	add	r7, sp, #4416	; 0x1140
   1dfb0:	movw	r4, #61220	; 0xef24
   1dfb4:	add	r7, r7, #48	; 0x30
   1dfb8:	movt	r4, #65535	; 0xffff
   1dfbc:	ldr	r0, [r7, r4]
   1dfc0:	cmp	r0, #0
   1dfc4:	beq	1dff4 <__assert_fail@plt+0xc414>
   1dfc8:	ldr	r0, [r0, #8]
   1dfcc:	bl	117c0 <free@plt>
   1dfd0:	add	ip, sp, #4416	; 0x1140
   1dfd4:	add	ip, ip, #48	; 0x30
   1dfd8:	ldr	r0, [ip, r4]
   1dfdc:	bl	1d06c <__assert_fail@plt+0xb48c>
   1dfe0:	add	r1, sp, #4416	; 0x1140
   1dfe4:	add	r1, r1, #48	; 0x30
   1dfe8:	cmp	r0, #0
   1dfec:	str	r0, [r1, r4]
   1dff0:	bne	1dfc8 <__assert_fail@plt+0xc3e8>
   1dff4:	cmp	r8, #0
   1dff8:	beq	1e014 <__assert_fail@plt+0xc434>
   1dffc:	ldr	r0, [r8, #8]
   1e000:	bl	117c0 <free@plt>
   1e004:	mov	r0, r8
   1e008:	bl	1d06c <__assert_fail@plt+0xb48c>
   1e00c:	subs	r8, r0, #0
   1e010:	bne	1dffc <__assert_fail@plt+0xc41c>
   1e014:	mvn	r0, #11
   1e018:	ldr	r6, [sp, #84]	; 0x54
   1e01c:	add	r3, sp, #8192	; 0x2000
   1e020:	ldr	r2, [r3, #-3732]	; 0xfffff16c
   1e024:	ldr	r3, [r6]
   1e028:	cmp	r2, r3
   1e02c:	bne	1e9b0 <__assert_fail@plt+0xcdd0>
   1e030:	add	sp, sp, #4416	; 0x1140
   1e034:	add	sp, sp, #52	; 0x34
   1e038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e03c:	ldr	r6, [sp, #44]	; 0x2c
   1e040:	ldr	r0, [r6]
   1e044:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1e048:	cmp	r0, #2
   1e04c:	ble	1e078 <__assert_fail@plt+0xc498>
   1e050:	ldr	r0, [r6]
   1e054:	mov	r1, #3
   1e058:	ldr	r7, [sp, #132]	; 0x84
   1e05c:	mov	r3, #564	; 0x234
   1e060:	ldr	r6, [sp, #136]	; 0x88
   1e064:	ldr	r2, [sp, #128]	; 0x80
   1e068:	str	r7, [sp]
   1e06c:	str	r6, [sp, #4]
   1e070:	str	r4, [sp, #8]
   1e074:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1e078:	mov	r0, r4
   1e07c:	bl	11bbc <close@plt>
   1e080:	mov	r0, r9
   1e084:	movw	r4, #61220	; 0xef24
   1e088:	bl	117c0 <free@plt>
   1e08c:	add	ip, sp, #4416	; 0x1140
   1e090:	movt	r4, #65535	; 0xffff
   1e094:	add	ip, ip, #48	; 0x30
   1e098:	ldr	r0, [ip, r4]
   1e09c:	bl	1d06c <__assert_fail@plt+0xb48c>
   1e0a0:	add	lr, sp, #4416	; 0x1140
   1e0a4:	add	lr, lr, #48	; 0x30
   1e0a8:	cmp	r0, #0
   1e0ac:	str	r0, [lr, r4]
   1e0b0:	bne	1dc8c <__assert_fail@plt+0xc0ac>
   1e0b4:	ldr	r0, [pc, #2412]	; 1ea28 <__assert_fail@plt+0xce48>
   1e0b8:	mov	r1, #524288	; 0x80000
   1e0bc:	add	r0, pc, r0
   1e0c0:	bl	118e0 <open64@plt>
   1e0c4:	subs	r5, r0, #0
   1e0c8:	blt	1e4a0 <__assert_fail@plt+0xc8c0>
   1e0cc:	add	r4, sp, #364	; 0x16c
   1e0d0:	mov	r2, #4096	; 0x1000
   1e0d4:	mov	r1, r4
   1e0d8:	bl	1b460 <__assert_fail@plt+0x9880>
   1e0dc:	mov	r6, r0
   1e0e0:	mov	r0, r5
   1e0e4:	bl	11bbc <close@plt>
   1e0e8:	cmp	r6, #0
   1e0ec:	blt	1e44c <__assert_fail@plt+0xc86c>
   1e0f0:	add	r1, sp, #4416	; 0x1140
   1e0f4:	movw	r2, #61436	; 0xeffc
   1e0f8:	add	r1, r1, #48	; 0x30
   1e0fc:	movt	r2, #65535	; 0xffff
   1e100:	ldrb	r1, [r1, r2]
   1e104:	uxtb	r0, r1
   1e108:	cmp	r0, #0
   1e10c:	cmpne	r0, #10
   1e110:	moveq	r1, #0
   1e114:	movne	r1, #1
   1e118:	beq	1e930 <__assert_fail@plt+0xcd50>
   1e11c:	mov	r3, #0
   1e120:	mov	r1, r4
   1e124:	mov	r2, r3
   1e128:	mov	r6, r3
   1e12c:	mov	r5, #1
   1e130:	b	1e160 <__assert_fail@plt+0xc580>
   1e134:	cmp	r0, #61	; 0x3d
   1e138:	beq	1e3e0 <__assert_fail@plt+0xc800>
   1e13c:	cmp	r0, #32
   1e140:	beq	1e3bc <__assert_fail@plt+0xc7dc>
   1e144:	add	r4, r4, #1
   1e148:	ldrb	r0, [r4]
   1e14c:	cmp	r0, #10
   1e150:	cmpne	r0, #0
   1e154:	moveq	ip, #0
   1e158:	movne	ip, #1
   1e15c:	beq	1e764 <__assert_fail@plt+0xcb84>
   1e160:	cmp	r0, #46	; 0x2e
   1e164:	bne	1e134 <__assert_fail@plt+0xc554>
   1e168:	cmp	r2, #0
   1e16c:	bne	1e144 <__assert_fail@plt+0xc564>
   1e170:	strb	r2, [r4]
   1e174:	add	r2, r4, #1
   1e178:	mov	r4, r2
   1e17c:	b	1e148 <__assert_fail@plt+0xc568>
   1e180:	mov	r2, r7
   1e184:	mov	r1, r6
   1e188:	bl	11808 <__strtok_r@plt>
   1e18c:	ldr	r1, [pc, #2200]	; 1ea2c <__assert_fail@plt+0xce4c>
   1e190:	mov	r2, r7
   1e194:	add	r1, pc, r1
   1e198:	mov	r8, r0
   1e19c:	mov	r0, r9
   1e1a0:	bl	11808 <__strtok_r@plt>
   1e1a4:	mov	r7, r0
   1e1a8:	mov	r0, r8
   1e1ac:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1e1b0:	cmp	r0, #0
   1e1b4:	blt	1e1c0 <__assert_fail@plt+0xc5e0>
   1e1b8:	cmp	r7, #0
   1e1bc:	bne	1e77c <__assert_fail@plt+0xcb9c>
   1e1c0:	ldr	r0, [sp, #52]	; 0x34
   1e1c4:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1e1c8:	cmp	r0, #2
   1e1cc:	ble	1dd40 <__assert_fail@plt+0xc160>
   1e1d0:	ldr	r7, [sp, #68]	; 0x44
   1e1d4:	add	lr, sp, #4416	; 0x1140
   1e1d8:	add	lr, lr, #48	; 0x30
   1e1dc:	movw	r3, #61224	; 0xef28
   1e1e0:	movt	r3, #65535	; 0xffff
   1e1e4:	ldr	r0, [sp, #52]	; 0x34
   1e1e8:	str	r7, [sp]
   1e1ec:	mov	r1, #3
   1e1f0:	ldr	r7, [sp, #72]	; 0x48
   1e1f4:	ldr	ip, [lr, r3]
   1e1f8:	movw	r3, #635	; 0x27b
   1e1fc:	ldr	r2, [sp, #64]	; 0x40
   1e200:	str	r7, [sp, #4]
   1e204:	ldr	r7, [sp, #32]
   1e208:	str	r5, [sp, #16]
   1e20c:	str	ip, [sp, #12]
   1e210:	str	r7, [sp, #8]
   1e214:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1e218:	b	1dd40 <__assert_fail@plt+0xc160>
   1e21c:	ldr	r7, [sp, #80]	; 0x50
   1e220:	mov	ip, r9
   1e224:	mov	r1, #4096	; 0x1000
   1e228:	ldr	r0, [sp, #32]
   1e22c:	mov	r3, r1
   1e230:	str	r7, [sp]
   1e234:	ldr	r2, [ip], #5
   1e238:	str	r2, [sp, #4]
   1e23c:	mov	r2, #1
   1e240:	str	ip, [sp, #8]
   1e244:	bl	11bd4 <__snprintf_chk@plt>
   1e248:	b	1dcac <__assert_fail@plt+0xc0cc>
   1e24c:	mov	r0, fp
   1e250:	ldr	r9, [sp, #60]	; 0x3c
   1e254:	bl	11a84 <fclose@plt>
   1e258:	b	1e080 <__assert_fail@plt+0xc4a0>
   1e25c:	mov	r1, r6
   1e260:	mov	r2, r7
   1e264:	bl	11808 <__strtok_r@plt>
   1e268:	mov	r1, r6
   1e26c:	mov	r2, r7
   1e270:	mov	r8, r0
   1e274:	mov	r0, r9
   1e278:	bl	11808 <__strtok_r@plt>
   1e27c:	mov	r9, r0
   1e280:	mov	r0, r8
   1e284:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1e288:	cmp	r0, #0
   1e28c:	blt	1e1c0 <__assert_fail@plt+0xc5e0>
   1e290:	mov	r0, r9
   1e294:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1e298:	cmp	r0, #0
   1e29c:	blt	1e1c0 <__assert_fail@plt+0xc5e0>
   1e2a0:	mov	r0, r8
   1e2a4:	bl	119a0 <strlen@plt>
   1e2a8:	add	r5, r0, #1
   1e2ac:	mov	r0, r9
   1e2b0:	bl	119a0 <strlen@plt>
   1e2b4:	add	r2, r0, #1
   1e2b8:	mov	r3, r0
   1e2bc:	add	r0, r5, r2
   1e2c0:	str	r2, [sp, #28]
   1e2c4:	add	r0, r0, #4
   1e2c8:	str	r3, [sp, #24]
   1e2cc:	bl	11910 <malloc@plt>
   1e2d0:	ldr	r2, [sp, #28]
   1e2d4:	ldr	r3, [sp, #24]
   1e2d8:	subs	r7, r0, #0
   1e2dc:	beq	1e328 <__assert_fail@plt+0xc748>
   1e2e0:	mov	r0, r7
   1e2e4:	add	r3, r3, #5
   1e2e8:	add	r3, r7, r3
   1e2ec:	mov	r1, r9
   1e2f0:	str	r3, [r0], #4
   1e2f4:	bl	117e4 <memcpy@plt>
   1e2f8:	mov	r1, r8
   1e2fc:	mov	r2, r5
   1e300:	ldr	r0, [r7]
   1e304:	bl	117e4 <memcpy@plt>
   1e308:	ldr	ip, [sp, #44]	; 0x2c
   1e30c:	mov	r1, r7
   1e310:	ldr	r0, [ip, #4]
   1e314:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1e318:	cmp	r0, #0
   1e31c:	ldrne	lr, [sp, #44]	; 0x2c
   1e320:	movne	r7, #0
   1e324:	strne	r0, [lr, #4]
   1e328:	mov	r0, r7
   1e32c:	bl	117c0 <free@plt>
   1e330:	b	1dd40 <__assert_fail@plt+0xc160>
   1e334:	mov	r2, r7
   1e338:	mov	r1, r6
   1e33c:	bl	11808 <__strtok_r@plt>
   1e340:	mov	r7, r0
   1e344:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1e348:	cmp	r0, #0
   1e34c:	blt	1e1c0 <__assert_fail@plt+0xc5e0>
   1e350:	mov	r1, r7
   1e354:	ldr	r7, [sp, #44]	; 0x2c
   1e358:	add	r0, r7, #8
   1e35c:	bl	1d684 <__assert_fail@plt+0xbaa4>
   1e360:	b	1dd40 <__assert_fail@plt+0xc160>
   1e364:	mov	r2, r7
   1e368:	mov	r1, r6
   1e36c:	bl	11808 <__strtok_r@plt>
   1e370:	ldr	r1, [pc, #1720]	; 1ea30 <__assert_fail@plt+0xce50>
   1e374:	mov	r2, r7
   1e378:	add	r1, pc, r1
   1e37c:	mov	r8, r0
   1e380:	mov	r0, r9
   1e384:	bl	11808 <__strtok_r@plt>
   1e388:	mov	r7, r0
   1e38c:	mov	r0, r8
   1e390:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1e394:	cmp	r0, #0
   1e398:	blt	1e1c0 <__assert_fail@plt+0xc5e0>
   1e39c:	cmp	r7, #0
   1e3a0:	beq	1e1c0 <__assert_fail@plt+0xc5e0>
   1e3a4:	mov	r2, r7
   1e3a8:	ldr	r7, [sp, #44]	; 0x2c
   1e3ac:	mov	r1, r8
   1e3b0:	add	r0, r7, #12
   1e3b4:	bl	1d6e8 <__assert_fail@plt+0xbb08>
   1e3b8:	b	1dd40 <__assert_fail@plt+0xc160>
   1e3bc:	cmp	r5, #0
   1e3c0:	strb	r6, [r4]
   1e3c4:	bne	1e8b4 <__assert_fail@plt+0xccd4>
   1e3c8:	add	r4, r4, #1
   1e3cc:	mov	r3, #0
   1e3d0:	mov	r2, r3
   1e3d4:	mov	r5, #1
   1e3d8:	mov	r1, r4
   1e3dc:	b	1e148 <__assert_fail@plt+0xc568>
   1e3e0:	cmp	r2, #0
   1e3e4:	add	r4, r4, #1
   1e3e8:	moveq	r5, r2
   1e3ec:	movne	r3, r4
   1e3f0:	b	1e148 <__assert_fail@plt+0xc568>
   1e3f4:	mov	r2, r7
   1e3f8:	mov	r1, r6
   1e3fc:	bl	11808 <__strtok_r@plt>
   1e400:	ldr	r1, [pc, #1580]	; 1ea34 <__assert_fail@plt+0xce54>
   1e404:	mov	r2, r7
   1e408:	add	r1, pc, r1
   1e40c:	mov	r8, r0
   1e410:	mov	r0, r9
   1e414:	bl	11808 <__strtok_r@plt>
   1e418:	mov	r7, r0
   1e41c:	mov	r0, r8
   1e420:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1e424:	cmp	r0, #0
   1e428:	blt	1e1c0 <__assert_fail@plt+0xc5e0>
   1e42c:	cmp	r7, #0
   1e430:	beq	1e1c0 <__assert_fail@plt+0xc5e0>
   1e434:	mov	r1, r7
   1e438:	ldr	r7, [sp, #44]	; 0x2c
   1e43c:	mov	r0, r8
   1e440:	add	r2, r7, #20
   1e444:	bl	1d49c <__assert_fail@plt+0xb8bc>
   1e448:	b	1dd40 <__assert_fail@plt+0xc160>
   1e44c:	ldr	r7, [sp, #44]	; 0x2c
   1e450:	ldr	r0, [r7]
   1e454:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1e458:	cmp	r0, #2
   1e45c:	ble	1e4a0 <__assert_fail@plt+0xc8c0>
   1e460:	rsb	r0, r6, #0
   1e464:	ldr	r4, [r7]
   1e468:	bl	11928 <strerror@plt>
   1e46c:	ldr	lr, [pc, #1476]	; 1ea38 <__assert_fail@plt+0xce58>
   1e470:	ldr	ip, [pc, #1476]	; 1ea3c <__assert_fail@plt+0xce5c>
   1e474:	mov	r1, #3
   1e478:	ldr	r2, [pc, #1472]	; 1ea40 <__assert_fail@plt+0xce60>
   1e47c:	add	lr, pc, lr
   1e480:	add	ip, pc, ip
   1e484:	mov	r3, #512	; 0x200
   1e488:	add	r2, pc, r2
   1e48c:	str	lr, [sp]
   1e490:	str	ip, [sp, #4]
   1e494:	str	r0, [sp, #8]
   1e498:	mov	r0, r4
   1e49c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1e4a0:	mov	r0, #0
   1e4a4:	b	1e018 <__assert_fail@plt+0xc438>
   1e4a8:	ldr	r0, [sp, #52]	; 0x34
   1e4ac:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1e4b0:	cmp	r0, #2
   1e4b4:	ble	1db48 <__assert_fail@plt+0xbf68>
   1e4b8:	ldr	r3, [pc, #1412]	; 1ea44 <__assert_fail@plt+0xce64>
   1e4bc:	mov	r1, #3
   1e4c0:	ldr	ip, [pc, #1408]	; 1ea48 <__assert_fail@plt+0xce68>
   1e4c4:	add	r3, pc, r3
   1e4c8:	ldr	r0, [sp, #52]	; 0x34
   1e4cc:	add	ip, pc, ip
   1e4d0:	str	r3, [sp]
   1e4d4:	str	r6, [sp, #8]
   1e4d8:	movw	r3, #790	; 0x316
   1e4dc:	ldr	r2, [sp, #80]	; 0x50
   1e4e0:	str	ip, [sp, #4]
   1e4e4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1e4e8:	b	1db48 <__assert_fail@plt+0xbf68>
   1e4ec:	mov	r2, r7
   1e4f0:	mov	r1, r6
   1e4f4:	bl	11808 <__strtok_r@plt>
   1e4f8:	ldr	r1, [pc, #1356]	; 1ea4c <__assert_fail@plt+0xce6c>
   1e4fc:	mov	r2, r7
   1e500:	add	r1, pc, r1
   1e504:	str	r0, [sp, #92]	; 0x5c
   1e508:	mov	r0, r8
   1e50c:	bl	11808 <__strtok_r@plt>
   1e510:	mov	r7, r0
   1e514:	ldr	r0, [sp, #92]	; 0x5c
   1e518:	bl	1b2b4 <__assert_fail@plt+0x96d4>
   1e51c:	cmp	r0, #0
   1e520:	blt	1e1c0 <__assert_fail@plt+0xc5e0>
   1e524:	cmp	r7, #0
   1e528:	beq	1e1c0 <__assert_fail@plt+0xc5e0>
   1e52c:	ldr	ip, [pc, #1308]	; 1ea50 <__assert_fail@plt+0xce70>
   1e530:	ldr	r3, [pc, #1308]	; 1ea54 <__assert_fail@plt+0xce74>
   1e534:	ldr	r0, [sp, #92]	; 0x5c
   1e538:	add	ip, pc, ip
   1e53c:	add	r3, pc, r3
   1e540:	str	ip, [sp, #104]	; 0x68
   1e544:	str	r3, [sp, #100]	; 0x64
   1e548:	bl	119a0 <strlen@plt>
   1e54c:	mov	r3, #0
   1e550:	str	r4, [sp, #108]	; 0x6c
   1e554:	str	r6, [sp, #120]	; 0x78
   1e558:	mov	r8, r3
   1e55c:	mov	r4, r7
   1e560:	mov	r9, r3
   1e564:	mov	r6, r7
   1e568:	str	r3, [sp, #116]	; 0x74
   1e56c:	str	r3, [sp, #40]	; 0x28
   1e570:	str	r3, [sp, #96]	; 0x60
   1e574:	str	r3, [sp, #88]	; 0x58
   1e578:	str	r7, [sp, #112]	; 0x70
   1e57c:	add	ip, r0, #1
   1e580:	str	r0, [sp, #124]	; 0x7c
   1e584:	str	ip, [sp, #140]	; 0x8c
   1e588:	mov	r5, r6
   1e58c:	ldrb	r7, [r5], #1
   1e590:	cmp	r7, #0
   1e594:	beq	1e5d0 <__assert_fail@plt+0xc9f0>
   1e598:	bl	1197c <__ctype_b_loc@plt>
   1e59c:	lsl	r1, r7, #1
   1e5a0:	ldr	r0, [r0]
   1e5a4:	ldrh	r1, [r0, r1]
   1e5a8:	and	r1, r1, #8192	; 0x2000
   1e5ac:	uxth	r1, r1
   1e5b0:	cmp	r1, #0
   1e5b4:	beq	1e7dc <__assert_fail@plt+0xcbfc>
   1e5b8:	cmp	r8, #0
   1e5bc:	movne	r4, r5
   1e5c0:	bne	1e7b0 <__assert_fail@plt+0xcbd0>
   1e5c4:	cmp	r6, r4
   1e5c8:	mov	r8, #1
   1e5cc:	bls	1e7b0 <__assert_fail@plt+0xcbd0>
   1e5d0:	rsb	r6, r4, r6
   1e5d4:	cmp	r6, #4
   1e5d8:	beq	1e7f4 <__assert_fail@plt+0xcc14>
   1e5dc:	cmp	r6, #5
   1e5e0:	beq	1e814 <__assert_fail@plt+0xcc34>
   1e5e4:	cmp	r7, #0
   1e5e8:	bne	1e794 <__assert_fail@plt+0xcbb4>
   1e5ec:	cmp	r8, #0
   1e5f0:	beq	1e794 <__assert_fail@plt+0xcbb4>
   1e5f4:	ldr	ip, [sp, #88]	; 0x58
   1e5f8:	ldr	r3, [sp, #124]	; 0x7c
   1e5fc:	ldr	r4, [sp, #108]	; 0x6c
   1e600:	add	r0, r3, #21
   1e604:	lsl	r9, ip, #2
   1e608:	ldr	r3, [sp, #40]	; 0x28
   1e60c:	ldr	ip, [sp, #96]	; 0x60
   1e610:	add	r0, r0, r3
   1e614:	str	r8, [sp, #116]	; 0x74
   1e618:	add	r0, r0, r9
   1e61c:	ldr	r7, [sp, #112]	; 0x70
   1e620:	lsl	r5, ip, #2
   1e624:	ldr	r6, [sp, #120]	; 0x78
   1e628:	add	r0, r0, r5
   1e62c:	bl	11910 <malloc@plt>
   1e630:	cmp	r0, #0
   1e634:	str	r0, [sp, #40]	; 0x28
   1e638:	beq	1e94c <__assert_fail@plt+0xcd6c>
   1e63c:	ldr	ip, [sp, #40]	; 0x28
   1e640:	mov	r8, #0
   1e644:	ldr	r0, [sp, #96]	; 0x60
   1e648:	ldr	lr, [sp, #88]	; 0x58
   1e64c:	add	r3, ip, #20
   1e650:	add	r9, r3, r9
   1e654:	ldr	r1, [sp, #92]	; 0x5c
   1e658:	stmib	ip, {r3, r9}
   1e65c:	str	r0, [ip, #16]
   1e660:	add	r0, r9, r5
   1e664:	str	lr, [ip, #12]
   1e668:	mov	r9, r8
   1e66c:	str	r0, [ip]
   1e670:	ldr	r2, [sp, #140]	; 0x8c
   1e674:	bl	117e4 <memcpy@plt>
   1e678:	ldr	ip, [sp, #40]	; 0x28
   1e67c:	str	r8, [sp, #112]	; 0x70
   1e680:	str	r8, [sp, #96]	; 0x60
   1e684:	ldr	r3, [ip]
   1e688:	ldr	ip, [pc, #968]	; 1ea58 <__assert_fail@plt+0xce78>
   1e68c:	ldr	r8, [sp, #116]	; 0x74
   1e690:	add	ip, pc, ip
   1e694:	str	ip, [sp, #92]	; 0x5c
   1e698:	ldr	ip, [pc, #956]	; 1ea5c <__assert_fail@plt+0xce7c>
   1e69c:	str	r4, [sp, #100]	; 0x64
   1e6a0:	mov	r4, r7
   1e6a4:	add	ip, pc, ip
   1e6a8:	str	ip, [sp, #88]	; 0x58
   1e6ac:	ldr	ip, [sp, #140]	; 0x8c
   1e6b0:	str	r6, [sp, #104]	; 0x68
   1e6b4:	add	r3, r3, ip
   1e6b8:	str	sl, [sp, #108]	; 0x6c
   1e6bc:	mov	sl, r7
   1e6c0:	mov	r6, r3
   1e6c4:	mov	r5, sl
   1e6c8:	ldrb	r7, [r5], #1
   1e6cc:	cmp	r7, #0
   1e6d0:	beq	1e70c <__assert_fail@plt+0xcb2c>
   1e6d4:	bl	1197c <__ctype_b_loc@plt>
   1e6d8:	lsl	r2, r7, #1
   1e6dc:	ldr	r1, [r0]
   1e6e0:	ldrh	r2, [r1, r2]
   1e6e4:	and	r2, r2, #8192	; 0x2000
   1e6e8:	uxth	r2, r2
   1e6ec:	cmp	r2, #0
   1e6f0:	beq	1e7e8 <__assert_fail@plt+0xcc08>
   1e6f4:	cmp	r8, #0
   1e6f8:	movne	r4, r5
   1e6fc:	bne	1e7d4 <__assert_fail@plt+0xcbf4>
   1e700:	cmp	sl, r4
   1e704:	mov	r8, #1
   1e708:	bls	1e7d4 <__assert_fail@plt+0xcbf4>
   1e70c:	rsb	sl, r4, sl
   1e710:	cmp	sl, #4
   1e714:	beq	1e834 <__assert_fail@plt+0xcc54>
   1e718:	cmp	sl, #5
   1e71c:	beq	1e854 <__assert_fail@plt+0xcc74>
   1e720:	cmp	r7, #0
   1e724:	bne	1e7b8 <__assert_fail@plt+0xcbd8>
   1e728:	cmp	r8, #0
   1e72c:	beq	1e7b8 <__assert_fail@plt+0xcbd8>
   1e730:	ldr	r7, [sp, #44]	; 0x2c
   1e734:	add	r4, sp, #100	; 0x64
   1e738:	ldr	r1, [sp, #40]	; 0x28
   1e73c:	ldm	r4, {r4, r6, sl}
   1e740:	ldr	r0, [r7, #24]
   1e744:	bl	1cf3c <__assert_fail@plt+0xb35c>
   1e748:	cmp	r0, #0
   1e74c:	ldrne	r7, [sp, #44]	; 0x2c
   1e750:	strne	r0, [r7, #24]
   1e754:	bne	1dd40 <__assert_fail@plt+0xc160>
   1e758:	ldr	r0, [sp, #40]	; 0x28
   1e75c:	bl	117c0 <free@plt>
   1e760:	b	1dd40 <__assert_fail@plt+0xc160>
   1e764:	cmp	r5, #0
   1e768:	strb	ip, [r4]
   1e76c:	beq	1e4a0 <__assert_fail@plt+0xc8c0>
   1e770:	ldr	r0, [sp, #44]	; 0x2c
   1e774:	bl	1d7b0 <__assert_fail@plt+0xbbd0>
   1e778:	b	1e4a0 <__assert_fail@plt+0xc8c0>
   1e77c:	mov	r1, r7
   1e780:	ldr	r7, [sp, #44]	; 0x2c
   1e784:	mov	r0, r8
   1e788:	add	r2, r7, #16
   1e78c:	bl	1d49c <__assert_fail@plt+0xb8bc>
   1e790:	b	1dd40 <__assert_fail@plt+0xc160>
   1e794:	cmp	r9, #1
   1e798:	beq	1e874 <__assert_fail@plt+0xcc94>
   1e79c:	cmp	r9, #2
   1e7a0:	beq	1e894 <__assert_fail@plt+0xccb4>
   1e7a4:	cmp	r7, #0
   1e7a8:	mov	r4, r5
   1e7ac:	beq	1e5f4 <__assert_fail@plt+0xca14>
   1e7b0:	mov	r6, r5
   1e7b4:	b	1e588 <__assert_fail@plt+0xc9a8>
   1e7b8:	cmp	r9, #1
   1e7bc:	beq	1e8c0 <__assert_fail@plt+0xcce0>
   1e7c0:	cmp	r9, #2
   1e7c4:	beq	1e900 <__assert_fail@plt+0xcd20>
   1e7c8:	cmp	r7, #0
   1e7cc:	mov	r4, r5
   1e7d0:	beq	1e730 <__assert_fail@plt+0xcb50>
   1e7d4:	mov	sl, r5
   1e7d8:	b	1e6c4 <__assert_fail@plt+0xcae4>
   1e7dc:	mov	r8, r1
   1e7e0:	mov	r6, r5
   1e7e4:	b	1e588 <__assert_fail@plt+0xc9a8>
   1e7e8:	mov	r8, r2
   1e7ec:	mov	sl, r5
   1e7f0:	b	1e6c4 <__assert_fail@plt+0xcae4>
   1e7f4:	mov	r0, r4
   1e7f8:	ldr	r1, [sp, #100]	; 0x64
   1e7fc:	mov	r2, r6
   1e800:	bl	11820 <memcmp@plt>
   1e804:	cmp	r0, #0
   1e808:	bne	1e5e4 <__assert_fail@plt+0xca04>
   1e80c:	mov	r9, #1
   1e810:	b	1e7a4 <__assert_fail@plt+0xcbc4>
   1e814:	mov	r0, r4
   1e818:	ldr	r1, [sp, #104]	; 0x68
   1e81c:	mov	r2, r6
   1e820:	bl	11820 <memcmp@plt>
   1e824:	cmp	r0, #0
   1e828:	bne	1e5e4 <__assert_fail@plt+0xca04>
   1e82c:	mov	r9, #2
   1e830:	b	1e7a4 <__assert_fail@plt+0xcbc4>
   1e834:	mov	r0, r4
   1e838:	ldr	r1, [sp, #88]	; 0x58
   1e83c:	mov	r2, sl
   1e840:	bl	11820 <memcmp@plt>
   1e844:	cmp	r0, #0
   1e848:	bne	1e720 <__assert_fail@plt+0xcb40>
   1e84c:	mov	r9, #1
   1e850:	b	1e7c8 <__assert_fail@plt+0xcbe8>
   1e854:	mov	r0, r4
   1e858:	ldr	r1, [sp, #92]	; 0x5c
   1e85c:	mov	r2, sl
   1e860:	bl	11820 <memcmp@plt>
   1e864:	cmp	r0, #0
   1e868:	bne	1e720 <__assert_fail@plt+0xcb40>
   1e86c:	mov	r9, #2
   1e870:	b	1e7c8 <__assert_fail@plt+0xcbe8>
   1e874:	ldr	r3, [sp, #40]	; 0x28
   1e878:	ldr	ip, [sp, #88]	; 0x58
   1e87c:	add	r2, r3, #1
   1e880:	add	ip, ip, #1
   1e884:	add	r2, r2, r6
   1e888:	str	ip, [sp, #88]	; 0x58
   1e88c:	str	r2, [sp, #40]	; 0x28
   1e890:	b	1e7a4 <__assert_fail@plt+0xcbc4>
   1e894:	ldr	r3, [sp, #40]	; 0x28
   1e898:	ldr	ip, [sp, #96]	; 0x60
   1e89c:	add	r2, r3, #1
   1e8a0:	add	ip, ip, #1
   1e8a4:	add	r2, r2, r6
   1e8a8:	str	ip, [sp, #96]	; 0x60
   1e8ac:	str	r2, [sp, #40]	; 0x28
   1e8b0:	b	1e7a4 <__assert_fail@plt+0xcbc4>
   1e8b4:	ldr	r0, [sp, #44]	; 0x2c
   1e8b8:	bl	1d7b0 <__assert_fail@plt+0xbbd0>
   1e8bc:	b	1e3c8 <__assert_fail@plt+0xc7e8>
   1e8c0:	ldr	r3, [sp, #40]	; 0x28
   1e8c4:	mov	r1, r4
   1e8c8:	ldr	r7, [sp, #96]	; 0x60
   1e8cc:	mov	r0, r6
   1e8d0:	mov	r2, sl
   1e8d4:	ldr	lr, [r3, #4]
   1e8d8:	str	r6, [lr, r7, lsl #2]
   1e8dc:	add	r7, r7, #1
   1e8e0:	str	r7, [sp, #96]	; 0x60
   1e8e4:	bl	117e4 <memcpy@plt>
   1e8e8:	add	r2, sl, #1
   1e8ec:	mov	ip, #0
   1e8f0:	strb	ip, [r6, sl]
   1e8f4:	add	r6, r6, r2
   1e8f8:	ldrb	r7, [r5, #-1]
   1e8fc:	b	1e7c8 <__assert_fail@plt+0xcbe8>
   1e900:	ldr	r3, [sp, #40]	; 0x28
   1e904:	mov	r1, r4
   1e908:	ldr	r7, [sp, #112]	; 0x70
   1e90c:	mov	r0, r6
   1e910:	mov	r2, sl
   1e914:	ldr	lr, [r3, #8]
   1e918:	str	r6, [lr, r7, lsl #2]
   1e91c:	add	r7, r7, #1
   1e920:	str	r7, [sp, #112]	; 0x70
   1e924:	b	1e8e4 <__assert_fail@plt+0xcd04>
   1e928:	mov	r8, r6
   1e92c:	b	1dbf8 <__assert_fail@plt+0xc018>
   1e930:	add	r7, sp, #4416	; 0x1140
   1e934:	mov	r3, r1
   1e938:	add	r7, r7, #48	; 0x30
   1e93c:	strb	r1, [r7, r2]
   1e940:	mov	r1, r4
   1e944:	mov	r2, r3
   1e948:	b	1e770 <__assert_fail@plt+0xcb90>
   1e94c:	ldr	r7, [sp, #44]	; 0x2c
   1e950:	ldr	r0, [r7]
   1e954:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1e958:	cmp	r0, #2
   1e95c:	ble	1dd40 <__assert_fail@plt+0xc160>
   1e960:	ldr	r2, [pc, #248]	; 1ea60 <__assert_fail@plt+0xce80>
   1e964:	mov	r1, #3
   1e968:	ldr	r0, [r7]
   1e96c:	movw	r3, #322	; 0x142
   1e970:	ldr	r7, [sp, #92]	; 0x5c
   1e974:	add	r2, pc, r2
   1e978:	ldr	ip, [pc, #228]	; 1ea64 <__assert_fail@plt+0xce84>
   1e97c:	str	r2, [sp, #4]
   1e980:	ldr	r2, [pc, #224]	; 1ea68 <__assert_fail@plt+0xce88>
   1e984:	add	ip, pc, ip
   1e988:	str	r7, [sp, #8]
   1e98c:	str	ip, [sp]
   1e990:	add	r2, pc, r2
   1e994:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1e998:	b	1dd40 <__assert_fail@plt+0xc160>
   1e99c:	mov	r4, r0
   1e9a0:	mov	r0, r7
   1e9a4:	bl	117c0 <free@plt>
   1e9a8:	mov	r0, r4
   1e9ac:	bl	11b8c <_Unwind_Resume@plt>
   1e9b0:	bl	11838 <__stack_chk_fail@plt>
   1e9b4:	andeq	r1, r2, ip, lsl #11
   1e9b8:	andeq	r0, r0, ip, lsr #3
   1e9bc:	andeq	lr, r0, ip, lsl #27
   1e9c0:	strdeq	lr, [r0], -r0
   1e9c4:	andeq	pc, r0, r8, ror #14
   1e9c8:	andeq	pc, r0, r4, ror #17
   1e9cc:	strdeq	lr, [r0], -ip
   1e9d0:			; <UNDEFINED> instruction: 0x0000f7bc
   1e9d4:	andeq	pc, r0, r8, lsr r7	; <UNPREDICTABLE>
   1e9d8:	andeq	pc, r0, r0, lsr r3	; <UNPREDICTABLE>
   1e9dc:	andeq	lr, r0, ip, ror #29
   1e9e0:	andeq	pc, r0, r8, ror #11
   1e9e4:	andeq	pc, r0, r8, lsr #11
   1e9e8:	andeq	pc, r0, r4, ror #12
   1e9ec:			; <UNDEFINED> instruction: 0x0000d4bc
   1e9f0:	andeq	lr, r0, r8, ror #10
   1e9f4:	andeq	pc, r0, r0, asr #10
   1e9f8:	andeq	pc, r0, r4, lsl #10
   1e9fc:	andeq	pc, r0, ip, lsr #12
   1ea00:			; <UNDEFINED> instruction: 0x0000d4bc
   1ea04:	andeq	sp, r0, r0, asr #7
   1ea08:	andeq	sp, r0, r0, lsr #7
   1ea0c:	andeq	ip, r0, r4, lsr sl
   1ea10:	andeq	lr, r0, r4, asr sl
   1ea14:	andeq	lr, r0, r8, lsr r5
   1ea18:	andeq	sp, r0, ip, lsl #8
   1ea1c:	andeq	pc, r0, r4, asr #9
   1ea20:			; <UNDEFINED> instruction: 0x0000f3b8
   1ea24:	ldrdeq	pc, [r0], -ip
   1ea28:	andeq	pc, r0, r8, lsl r2	; <UNPREDICTABLE>
   1ea2c:	andeq	pc, r0, ip, rrx
   1ea30:	andeq	lr, r0, r8, lsl #29
   1ea34:	strdeq	lr, [r0], -r8
   1ea38:	andeq	lr, r0, r8, lsl #27
   1ea3c:	andeq	lr, r0, r8, lsl #30
   1ea40:	andeq	lr, r0, r8, asr #27
   1ea44:	strdeq	lr, [r0], -r0
   1ea48:	andeq	lr, r0, ip, ror #27
   1ea4c:	andeq	lr, r0, r0, lsl #26
   1ea50:	andeq	lr, r0, r0, asr #27
   1ea54:			; <UNDEFINED> instruction: 0x0000edb4
   1ea58:	andeq	lr, r0, r8, ror #24
   1ea5c:	andeq	lr, r0, ip, asr #24
   1ea60:	andeq	lr, r0, ip, lsl #19
   1ea64:	andeq	lr, r0, r0, asr #20
   1ea68:	andeq	lr, r0, r0, asr #17
   1ea6c:	cmp	r0, #0
   1ea70:	bxeq	lr
   1ea74:	mov	r1, #0
   1ea78:	b	1d330 <__assert_fail@plt+0xb750>
   1ea7c:	cmp	r0, #0
   1ea80:	bxeq	lr
   1ea84:	mov	r1, #1
   1ea88:	b	1d330 <__assert_fail@plt+0xb750>
   1ea8c:	cmp	r0, #0
   1ea90:	bxeq	lr
   1ea94:	mov	r1, #2
   1ea98:	b	1d330 <__assert_fail@plt+0xb750>
   1ea9c:	cmp	r0, #0
   1eaa0:	bxeq	lr
   1eaa4:	mov	r1, #3
   1eaa8:	b	1d330 <__assert_fail@plt+0xb750>
   1eaac:	cmp	r0, #0
   1eab0:	bxeq	lr
   1eab4:	mov	r1, #4
   1eab8:	b	1d330 <__assert_fail@plt+0xb750>
   1eabc:	cmp	r0, #0
   1eac0:	bxeq	lr
   1eac4:	mov	r1, #5
   1eac8:	b	1d330 <__assert_fail@plt+0xb750>
   1eacc:	push	{r3, lr}
   1ead0:	subs	r3, r0, #0
   1ead4:	beq	1eaf0 <__assert_fail@plt+0xcf10>
   1ead8:	ldr	r0, [r3, #12]
   1eadc:	cmp	r0, #0
   1eae0:	popeq	{r3, pc}
   1eae4:	ldr	r3, [r3, #20]
   1eae8:	blx	r3
   1eaec:	pop	{r3, pc}
   1eaf0:	mov	r0, r3
   1eaf4:	pop	{r3, pc}
   1eaf8:	push	{r4, lr}
   1eafc:	subs	r4, r0, #0
   1eb00:	beq	1eb50 <__assert_fail@plt+0xcf70>
   1eb04:	ldr	r0, [r4, #12]
   1eb08:	cmp	r0, #0
   1eb0c:	popeq	{r4, pc}
   1eb10:	ldr	r3, [r4, #24]
   1eb14:	cmp	r3, #0
   1eb18:	beq	1eb58 <__assert_fail@plt+0xcf78>
   1eb1c:	ldrb	r2, [r4, #4]
   1eb20:	cmp	r2, #0
   1eb24:	beq	1eb48 <__assert_fail@plt+0xcf68>
   1eb28:	ldr	r0, [r4, #16]
   1eb2c:	bl	117c0 <free@plt>
   1eb30:	ldr	r3, [r4, #24]
   1eb34:	ldr	r0, [r4, #12]
   1eb38:	blx	r3
   1eb3c:	mov	r3, r0
   1eb40:	str	r3, [r4, #16]
   1eb44:	pop	{r4, pc}
   1eb48:	blx	r3
   1eb4c:	pop	{r4, pc}
   1eb50:	mov	r0, r4
   1eb54:	pop	{r4, pc}
   1eb58:	mov	r0, r3
   1eb5c:	pop	{r4, pc}
   1eb60:	push	{r4, lr}
   1eb64:	subs	r4, r0, #0
   1eb68:	beq	1eba4 <__assert_fail@plt+0xcfc4>
   1eb6c:	ldr	r1, [r4, #12]
   1eb70:	cmp	r1, #0
   1eb74:	beq	1eb90 <__assert_fail@plt+0xcfb0>
   1eb78:	ldr	r0, [r4, #8]
   1eb7c:	bl	1d0f4 <__assert_fail@plt+0xb514>
   1eb80:	str	r0, [r4, #12]
   1eb84:	adds	r0, r0, #0
   1eb88:	movne	r0, #1
   1eb8c:	pop	{r4, pc}
   1eb90:	ldr	r3, [r4, #8]
   1eb94:	adds	r0, r3, #0
   1eb98:	str	r3, [r4, #12]
   1eb9c:	movne	r0, #1
   1eba0:	pop	{r4, pc}
   1eba4:	mov	r0, r4
   1eba8:	pop	{r4, pc}
   1ebac:	push	{r4, lr}
   1ebb0:	mov	r4, r0
   1ebb4:	ldr	r0, [r0, #16]
   1ebb8:	bl	117c0 <free@plt>
   1ebbc:	mov	r0, r4
   1ebc0:	pop	{r4, lr}
   1ebc4:	b	117c0 <free@plt>
   1ebc8:	push	{r3, r4, r5, lr}
   1ebcc:	mov	r5, r0
   1ebd0:	ldr	r0, [r0, #4]
   1ebd4:	bl	117c0 <free@plt>
   1ebd8:	ldr	r0, [r5, #8]
   1ebdc:	cmp	r0, #0
   1ebe0:	beq	1ebf8 <__assert_fail@plt+0xd018>
   1ebe4:	ldr	r4, [r0]
   1ebe8:	bl	117c0 <free@plt>
   1ebec:	cmp	r4, #0
   1ebf0:	mov	r0, r4
   1ebf4:	bne	1ebe4 <__assert_fail@plt+0xd004>
   1ebf8:	mov	r0, r5
   1ebfc:	pop	{r3, r4, r5, lr}
   1ec00:	b	117c0 <free@plt>
   1ec04:	ldr	r2, [pc, #100]	; 1ec70 <__assert_fail@plt+0xd090>
   1ec08:	ldr	r3, [pc, #100]	; 1ec74 <__assert_fail@plt+0xd094>
   1ec0c:	add	r2, pc, r2
   1ec10:	push	{r4, r5, lr}
   1ec14:	sub	sp, sp, #12
   1ec18:	ldr	r4, [r2, r3]
   1ec1c:	mov	r5, r0
   1ec20:	ldr	r3, [r4]
   1ec24:	str	r3, [sp, #4]
   1ec28:	bl	119f4 <__errno_location@plt>
   1ec2c:	mov	r3, r5
   1ec30:	mov	ip, #0
   1ec34:	mov	r1, #4
   1ec38:	mov	r2, r0
   1ec3c:	mov	r0, sp
   1ec40:	str	ip, [r2]
   1ec44:	mov	r2, #1
   1ec48:	bl	118bc <fread@plt>
   1ec4c:	ldr	r2, [sp, #4]
   1ec50:	ldr	r3, [r4]
   1ec54:	ldr	r0, [sp]
   1ec58:	cmp	r2, r3
   1ec5c:	rev	r0, r0
   1ec60:	bne	1ec6c <__assert_fail@plt+0xd08c>
   1ec64:	add	sp, sp, #12
   1ec68:	pop	{r4, r5, pc}
   1ec6c:	bl	11838 <__stack_chk_fail@plt>
   1ec70:	andeq	r0, r2, ip, ror #7
   1ec74:	andeq	r0, r0, ip, lsr #3
   1ec78:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1ec7c:	mov	r5, r0
   1ec80:	ldr	r4, [r0]
   1ec84:	mov	r9, r1
   1ec88:	mov	r8, r2
   1ec8c:	mov	r6, r3
   1ec90:	cmp	r4, #0
   1ec94:	beq	1ecc4 <__assert_fail@plt+0xd0e4>
   1ec98:	ldr	r3, [r4, #4]
   1ec9c:	cmp	r6, r3
   1eca0:	bhi	1ecb4 <__assert_fail@plt+0xd0d4>
   1eca4:	b	1ecc4 <__assert_fail@plt+0xd0e4>
   1eca8:	ldr	ip, [r4, #4]
   1ecac:	cmp	ip, r6
   1ecb0:	bcs	1ecc4 <__assert_fail@plt+0xd0e4>
   1ecb4:	mov	r5, r4
   1ecb8:	ldr	r4, [r4]
   1ecbc:	cmp	r4, #0
   1ecc0:	bne	1eca8 <__assert_fail@plt+0xd0c8>
   1ecc4:	add	r0, r8, #13
   1ecc8:	bl	11910 <malloc@plt>
   1eccc:	subs	r7, r0, #0
   1ecd0:	beq	1ed0c <__assert_fail@plt+0xd12c>
   1ecd4:	str	r8, [r7, #8]
   1ecd8:	mov	r2, r8
   1ecdc:	str	r4, [r7]
   1ece0:	add	r8, r7, r8
   1ece4:	mov	r1, r9
   1ece8:	str	r6, [r7, #4]
   1ecec:	add	r0, r7, #12
   1ecf0:	add	r8, r8, #8
   1ecf4:	bl	117e4 <memcpy@plt>
   1ecf8:	mov	r3, #0
   1ecfc:	mov	r0, r3
   1ed00:	strb	r3, [r8, #4]
   1ed04:	str	r7, [r5]
   1ed08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ed0c:	mvn	r0, #0
   1ed10:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ed14:	push	{r3, r4, r5, r6, r7, lr}
   1ed18:	mov	r7, r0
   1ed1c:	ldr	r5, [r0, #12]
   1ed20:	mov	r6, r1
   1ed24:	ldr	r4, [r0, #8]
   1ed28:	add	r5, r5, r5, lsl #1
   1ed2c:	add	r5, r4, r5, lsl #2
   1ed30:	cmp	r4, r5
   1ed34:	addcc	r4, r4, #12
   1ed38:	bcs	1ed5c <__assert_fail@plt+0xd17c>
   1ed3c:	ldr	r1, [r4, #-4]
   1ed40:	mov	r0, r6
   1ed44:	ldr	r2, [r4, #-8]
   1ed48:	ldr	r3, [r4, #-12]
   1ed4c:	bl	1ec78 <__assert_fail@plt+0xd098>
   1ed50:	cmp	r5, r4
   1ed54:	add	r4, r4, #12
   1ed58:	bhi	1ed3c <__assert_fail@plt+0xd15c>
   1ed5c:	mov	r0, r7
   1ed60:	pop	{r3, r4, r5, r6, r7, lr}
   1ed64:	b	117c0 <free@plt>
   1ed68:	push	{r4, r5, r6, lr}
   1ed6c:	mov	r6, r0
   1ed70:	ldr	r4, [r0, #8]
   1ed74:	mov	r5, r1
   1ed78:	cmp	r4, #0
   1ed7c:	beq	1eda0 <__assert_fail@plt+0xd1c0>
   1ed80:	add	r1, r4, #12
   1ed84:	ldr	r2, [r4, #8]
   1ed88:	ldr	r3, [r4, #4]
   1ed8c:	mov	r0, r5
   1ed90:	bl	1ec78 <__assert_fail@plt+0xd098>
   1ed94:	ldr	r4, [r4]
   1ed98:	cmp	r4, #0
   1ed9c:	bne	1ed80 <__assert_fail@plt+0xd1a0>
   1eda0:	mov	r0, r6
   1eda4:	pop	{r4, r5, r6, lr}
   1eda8:	b	1ebc8 <__assert_fail@plt+0xcfe8>
   1edac:	push	{r4, lr}
   1edb0:	mov	r4, r0
   1edb4:	bl	119f4 <__errno_location@plt>
   1edb8:	ldr	r3, [r4, #4]
   1edbc:	mov	r1, #0
   1edc0:	ldr	r2, [r4, #8]
   1edc4:	cmp	r3, r2
   1edc8:	str	r1, [r0]
   1edcc:	bcs	1ede0 <__assert_fail@plt+0xd200>
   1edd0:	add	r2, r3, #1
   1edd4:	str	r2, [r4, #4]
   1edd8:	ldrb	r0, [r3]
   1eddc:	pop	{r4, pc}
   1ede0:	mov	r0, r4
   1ede4:	pop	{r4, lr}
   1ede8:	b	11ac0 <__uflow@plt>
   1edec:	push	{r4, r5, r6, lr}
   1edf0:	mov	r6, r0
   1edf4:	mov	r5, r1
   1edf8:	mov	r4, #0
   1edfc:	b	1ee10 <__assert_fail@plt+0xd230>
   1ee00:	bl	28958 <__assert_fail@plt+0x16d78>
   1ee04:	cmp	r0, #0
   1ee08:	beq	1ee28 <__assert_fail@plt+0xd248>
   1ee0c:	add	r4, r4, #1
   1ee10:	mov	r0, r5
   1ee14:	bl	1edac <__assert_fail@plt+0xd1cc>
   1ee18:	subs	r1, r0, #0
   1ee1c:	mov	r0, r6
   1ee20:	uxtb	r1, r1
   1ee24:	bne	1ee00 <__assert_fail@plt+0xd220>
   1ee28:	mov	r0, r4
   1ee2c:	pop	{r4, r5, r6, pc}
   1ee30:	ldr	r3, [pc, #444]	; 1eff4 <__assert_fail@plt+0xd414>
   1ee34:	ldr	r2, [pc, #444]	; 1eff8 <__assert_fail@plt+0xd418>
   1ee38:	add	r3, pc, r3
   1ee3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee40:	mov	sl, r1
   1ee44:	ldr	r8, [r3, r2]
   1ee48:	sub	sp, sp, #20
   1ee4c:	bics	r1, r1, #-268435456	; 0xf0000000
   1ee50:	mov	r6, r0
   1ee54:	ldr	r3, [r8]
   1ee58:	str	r3, [sp, #12]
   1ee5c:	beq	1efc4 <__assert_fail@plt+0xd3e4>
   1ee60:	mov	r2, #0
   1ee64:	bl	11b68 <fseek@plt>
   1ee68:	cmp	r0, #0
   1ee6c:	blt	1efc4 <__assert_fail@plt+0xd3e4>
   1ee70:	cmp	sl, #0
   1ee74:	blt	1efcc <__assert_fail@plt+0xd3ec>
   1ee78:	mov	r0, #1
   1ee7c:	mov	r1, r0
   1ee80:	bl	11718 <calloc@plt>
   1ee84:	mov	r9, r0
   1ee88:	ands	r4, sl, #536870912	; 0x20000000
   1ee8c:	bne	1eed8 <__assert_fail@plt+0xd2f8>
   1ee90:	mov	r0, #16
   1ee94:	bl	11910 <malloc@plt>
   1ee98:	mvn	r3, #127	; 0x7f
   1ee9c:	mov	r7, r0
   1eea0:	strb	r4, [r0, #13]
   1eea4:	strb	r3, [r0, #12]
   1eea8:	tst	sl, #1073741824	; 0x40000000
   1eeac:	mov	r3, #0
   1eeb0:	str	r3, [r7, #8]
   1eeb4:	bne	1ef54 <__assert_fail@plt+0xd374>
   1eeb8:	mov	r0, r7
   1eebc:	stm	r7, {r6, r9}
   1eec0:	ldr	r2, [sp, #12]
   1eec4:	ldr	r3, [r8]
   1eec8:	cmp	r2, r3
   1eecc:	bne	1eff0 <__assert_fail@plt+0xd410>
   1eed0:	add	sp, sp, #20
   1eed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eed8:	mov	r0, r6
   1eedc:	bl	1edac <__assert_fail@plt+0xd1cc>
   1eee0:	mov	r4, r0
   1eee4:	mov	r0, r6
   1eee8:	bl	1edac <__assert_fail@plt+0xd1cc>
   1eeec:	uxtb	r3, r4
   1eef0:	uxtb	fp, r0
   1eef4:	mov	r5, r0
   1eef8:	rsb	fp, r3, fp
   1eefc:	add	r0, fp, #5
   1ef00:	add	fp, fp, #1
   1ef04:	lsl	r0, r0, #2
   1ef08:	bl	11910 <malloc@plt>
   1ef0c:	cmp	fp, #0
   1ef10:	mov	r7, r0
   1ef14:	strb	r4, [r0, #12]
   1ef18:	strb	r5, [r0, #13]
   1ef1c:	ble	1eea8 <__assert_fail@plt+0xd2c8>
   1ef20:	mov	r5, r0
   1ef24:	mov	r4, #0
   1ef28:	mov	r0, r6
   1ef2c:	add	r4, r4, #1
   1ef30:	bl	1ec04 <__assert_fail@plt+0xd024>
   1ef34:	cmp	r4, fp
   1ef38:	add	r5, r5, #4
   1ef3c:	str	r0, [r5, #12]
   1ef40:	bne	1ef28 <__assert_fail@plt+0xd348>
   1ef44:	tst	sl, #1073741824	; 0x40000000
   1ef48:	mov	r3, #0
   1ef4c:	str	r3, [r7, #8]
   1ef50:	beq	1eeb8 <__assert_fail@plt+0xd2d8>
   1ef54:	mov	r0, r6
   1ef58:	bl	1ec04 <__assert_fail@plt+0xd024>
   1ef5c:	mov	r5, r0
   1ef60:	mov	r0, sp
   1ef64:	bl	288b8 <__assert_fail@plt+0x16cd8>
   1ef68:	cmp	r5, #0
   1ef6c:	addne	fp, r7, #8
   1ef70:	beq	1efb8 <__assert_fail@plt+0xd3d8>
   1ef74:	mov	r0, r6
   1ef78:	bl	1ec04 <__assert_fail@plt+0xd024>
   1ef7c:	mov	r1, r6
   1ef80:	mov	sl, r0
   1ef84:	mov	r0, sp
   1ef88:	bl	1edec <__assert_fail@plt+0xd20c>
   1ef8c:	mov	r0, sp
   1ef90:	bl	28914 <__assert_fail@plt+0x16d34>
   1ef94:	mov	r3, sl
   1ef98:	ldr	r2, [sp, #8]
   1ef9c:	mov	r1, r0
   1efa0:	mov	r0, fp
   1efa4:	bl	1ec78 <__assert_fail@plt+0xd098>
   1efa8:	mov	r0, sp
   1efac:	bl	28b04 <__assert_fail@plt+0x16f24>
   1efb0:	subs	r5, r5, #1
   1efb4:	bne	1ef74 <__assert_fail@plt+0xd394>
   1efb8:	mov	r0, sp
   1efbc:	bl	288cc <__assert_fail@plt+0x16cec>
   1efc0:	b	1eeb8 <__assert_fail@plt+0xd2d8>
   1efc4:	mov	r0, #0
   1efc8:	b	1eec0 <__assert_fail@plt+0xd2e0>
   1efcc:	mov	r0, sp
   1efd0:	bl	288b8 <__assert_fail@plt+0x16cd8>
   1efd4:	mov	r1, r6
   1efd8:	mov	r0, sp
   1efdc:	bl	1edec <__assert_fail@plt+0xd20c>
   1efe0:	mov	r0, sp
   1efe4:	bl	288d4 <__assert_fail@plt+0x16cf4>
   1efe8:	mov	r9, r0
   1efec:	b	1ee88 <__assert_fail@plt+0xd2a8>
   1eff0:	bl	11838 <__stack_chk_fail@plt>
   1eff4:	andeq	r0, r2, r0, asr #3
   1eff8:	andeq	r0, r0, ip, lsr #3
   1effc:	ldrb	r2, [r0, #12]
   1f000:	mov	r3, r0
   1f004:	cmp	r2, r1
   1f008:	bgt	1f02c <__assert_fail@plt+0xd44c>
   1f00c:	ldrb	r0, [r0, #13]
   1f010:	cmp	r1, r0
   1f014:	bgt	1f02c <__assert_fail@plt+0xd44c>
   1f018:	rsb	r1, r2, r1
   1f01c:	ldr	r0, [r3]
   1f020:	add	r1, r1, #4
   1f024:	ldr	r1, [r3, r1, lsl #2]
   1f028:	b	1ee30 <__assert_fail@plt+0xd250>
   1f02c:	mov	r0, #0
   1f030:	bx	lr
   1f034:	ldr	r3, [pc, #440]	; 1f1f4 <__assert_fail@plt+0xd614>
   1f038:	ldr	r2, [pc, #440]	; 1f1f8 <__assert_fail@plt+0xd618>
   1f03c:	add	r3, pc, r3
   1f040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f044:	mov	r7, r1
   1f048:	ldr	r2, [r3, r2]
   1f04c:	sub	sp, sp, #532	; 0x214
   1f050:	bics	r1, r1, #-268435456	; 0xf0000000
   1f054:	mov	fp, r0
   1f058:	ldr	r4, [r0, #4]
   1f05c:	ldr	r3, [r2]
   1f060:	str	r2, [sp, #4]
   1f064:	str	r3, [sp, #524]	; 0x20c
   1f068:	beq	1f1e8 <__assert_fail@plt+0xd608>
   1f06c:	ldr	r5, [pc, #392]	; 1f1fc <__assert_fail@plt+0xd61c>
   1f070:	cmp	r7, #0
   1f074:	add	r4, r4, r1
   1f078:	add	r5, pc, r5
   1f07c:	blt	1f1d0 <__assert_fail@plt+0xd5f0>
   1f080:	ands	r6, r7, #536870912	; 0x20000000
   1f084:	bne	1f10c <__assert_fail@plt+0xd52c>
   1f088:	mov	r1, #5
   1f08c:	mov	r9, r6
   1f090:	mov	sl, #128	; 0x80
   1f094:	ands	r7, r7, #1073741824	; 0x40000000
   1f098:	moveq	r0, r7
   1f09c:	ldrne	r7, [r4], #4
   1f0a0:	revne	r7, r7
   1f0a4:	addne	r0, r7, r7, lsl #1
   1f0a8:	add	r0, r0, r1
   1f0ac:	lsl	r0, r0, #2
   1f0b0:	bl	11910 <malloc@plt>
   1f0b4:	subs	r8, r0, #0
   1f0b8:	beq	1f1e8 <__assert_fail@plt+0xd608>
   1f0bc:	cmp	r7, #0
   1f0c0:	str	fp, [r8]
   1f0c4:	str	r5, [r8, #4]
   1f0c8:	bne	1f15c <__assert_fail@plt+0xd57c>
   1f0cc:	str	r7, [r8, #8]
   1f0d0:	lsl	r2, r6, #2
   1f0d4:	str	r7, [r8, #12]
   1f0d8:	add	r0, r8, #20
   1f0dc:	strb	sl, [r8, #16]
   1f0e0:	add	r1, sp, #12
   1f0e4:	strb	r9, [r8, #17]
   1f0e8:	bl	117e4 <memcpy@plt>
   1f0ec:	mov	r0, r8
   1f0f0:	ldr	r1, [sp, #4]
   1f0f4:	ldr	r2, [sp, #524]	; 0x20c
   1f0f8:	ldr	r3, [r1]
   1f0fc:	cmp	r2, r3
   1f100:	bne	1f1f0 <__assert_fail@plt+0xd610>
   1f104:	add	sp, sp, #532	; 0x214
   1f108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f10c:	ldrb	sl, [r4]
   1f110:	add	r3, r4, #2
   1f114:	ldrb	r9, [r4, #1]
   1f118:	rsb	r1, sl, r9
   1f11c:	add	r0, r1, #1
   1f120:	cmp	r0, #0
   1f124:	addle	r1, r1, #6
   1f128:	movle	r6, r0
   1f12c:	movle	r4, r3
   1f130:	ble	1f094 <__assert_fail@plt+0xd4b4>
   1f134:	add	r2, sp, #8
   1f138:	add	r4, r3, r0, lsl #2
   1f13c:	ldr	ip, [r3], #4
   1f140:	cmp	r3, r4
   1f144:	rev	ip, ip
   1f148:	str	ip, [r2, #4]!
   1f14c:	bne	1f13c <__assert_fail@plt+0xd55c>
   1f150:	mov	r6, r0
   1f154:	add	r1, r0, #5
   1f158:	b	1f094 <__assert_fail@plt+0xd4b4>
   1f15c:	lsl	r2, r6, #2
   1f160:	str	r7, [r8, #12]
   1f164:	add	r3, r2, #20
   1f168:	strb	sl, [r8, #16]
   1f16c:	add	r3, r8, r3
   1f170:	strb	r9, [r8, #17]
   1f174:	str	r3, [r8, #8]
   1f178:	add	r0, r8, #20
   1f17c:	add	r1, sp, #12
   1f180:	bl	117e4 <memcpy@plt>
   1f184:	cmp	r7, #0
   1f188:	ble	1f1c8 <__assert_fail@plt+0xd5e8>
   1f18c:	add	r7, r7, r7, lsl #1
   1f190:	ldr	r5, [r8, #8]
   1f194:	add	r7, r5, r7, lsl #2
   1f198:	ldr	r3, [r4], #4
   1f19c:	add	r5, r5, #12
   1f1a0:	rev	r3, r3
   1f1a4:	str	r3, [r5, #-12]
   1f1a8:	mov	r0, r4
   1f1ac:	bl	119a0 <strlen@plt>
   1f1b0:	str	r4, [r5, #-4]
   1f1b4:	str	r0, [r5, #-8]
   1f1b8:	cmp	r5, r7
   1f1bc:	add	r3, r0, #1
   1f1c0:	add	r4, r4, r3
   1f1c4:	bne	1f198 <__assert_fail@plt+0xd5b8>
   1f1c8:	mov	r0, r8
   1f1cc:	b	1f0f0 <__assert_fail@plt+0xd510>
   1f1d0:	mov	r0, r4
   1f1d4:	mov	r5, r4
   1f1d8:	bl	119a0 <strlen@plt>
   1f1dc:	add	r0, r0, #1
   1f1e0:	add	r4, r4, r0
   1f1e4:	b	1f080 <__assert_fail@plt+0xd4a0>
   1f1e8:	mov	r0, #0
   1f1ec:	b	1f0f0 <__assert_fail@plt+0xd510>
   1f1f0:	bl	11838 <__stack_chk_fail@plt>
   1f1f4:			; <UNDEFINED> instruction: 0x0001ffbc
   1f1f8:	andeq	r0, r0, ip, lsr #3
   1f1fc:	andeq	lr, r0, r4, lsr #7
   1f200:	ldrb	r2, [r0, #16]
   1f204:	mov	r3, r0
   1f208:	cmp	r2, r1
   1f20c:	bgt	1f230 <__assert_fail@plt+0xd650>
   1f210:	ldrb	r0, [r0, #17]
   1f214:	cmp	r1, r0
   1f218:	bgt	1f230 <__assert_fail@plt+0xd650>
   1f21c:	rsb	r1, r2, r1
   1f220:	ldr	r0, [r3]
   1f224:	add	r3, r3, r1, lsl #2
   1f228:	ldr	r1, [r3, #20]
   1f22c:	b	1f034 <__assert_fail@plt+0xd454>
   1f230:	mov	r0, #0
   1f234:	bx	lr
   1f238:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f23c:	mov	r7, r0
   1f240:	mov	r6, r1
   1f244:	mov	r0, r1
   1f248:	ldr	r1, [r7, #4]
   1f24c:	mov	r5, r2
   1f250:	bl	289ac <__assert_fail@plt+0x16dcc>
   1f254:	ldr	r8, [r7, #12]
   1f258:	ldr	r4, [r7, #8]
   1f25c:	ldr	fp, [pc, #216]	; 1f33c <__assert_fail@plt+0xd75c>
   1f260:	add	r8, r8, r8, lsl #1
   1f264:	ldr	sl, [pc, #212]	; 1f340 <__assert_fail@plt+0xd760>
   1f268:	add	fp, pc, fp
   1f26c:	add	r8, r4, r8, lsl #2
   1f270:	add	sl, pc, sl
   1f274:	cmp	r4, r8
   1f278:	mov	r9, r0
   1f27c:	bcs	1f2cc <__assert_fail@plt+0xd6ec>
   1f280:	ldr	r1, [r6]
   1f284:	mov	r0, r5
   1f288:	ldr	r2, [r6, #8]
   1f28c:	add	r4, r4, #12
   1f290:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f294:	mov	r1, fp
   1f298:	mov	r2, #1
   1f29c:	mov	r0, r5
   1f2a0:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f2a4:	ldr	r1, [r4, #-4]
   1f2a8:	ldr	r2, [r4, #-8]
   1f2ac:	mov	r0, r5
   1f2b0:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f2b4:	mov	r0, r5
   1f2b8:	mov	r1, sl
   1f2bc:	mov	r2, #1
   1f2c0:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f2c4:	cmp	r8, r4
   1f2c8:	bhi	1f280 <__assert_fail@plt+0xd6a0>
   1f2cc:	ldrb	r4, [r7, #16]
   1f2d0:	ldrb	r3, [r7, #17]
   1f2d4:	cmp	r4, r3
   1f2d8:	bgt	1f324 <__assert_fail@plt+0xd744>
   1f2dc:	mov	r1, r4
   1f2e0:	mov	r0, r7
   1f2e4:	bl	1f200 <__assert_fail@plt+0xd620>
   1f2e8:	uxtb	r1, r4
   1f2ec:	add	r4, r4, #1
   1f2f0:	subs	r8, r0, #0
   1f2f4:	mov	r0, r6
   1f2f8:	beq	1f318 <__assert_fail@plt+0xd738>
   1f2fc:	bl	28958 <__assert_fail@plt+0x16d78>
   1f300:	mov	r0, r8
   1f304:	mov	r1, r6
   1f308:	mov	r2, r5
   1f30c:	bl	1f238 <__assert_fail@plt+0xd658>
   1f310:	mov	r0, r6
   1f314:	bl	28a7c <__assert_fail@plt+0x16e9c>
   1f318:	ldrb	r3, [r7, #17]
   1f31c:	cmp	r3, r4
   1f320:	bge	1f2dc <__assert_fail@plt+0xd6fc>
   1f324:	mov	r0, r6
   1f328:	mov	r1, r9
   1f32c:	bl	28ac0 <__assert_fail@plt+0x16ee0>
   1f330:	mov	r0, r7
   1f334:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f338:	b	117c0 <free@plt>
   1f33c:	ldrdeq	sp, [r0], -r0
   1f340:	andeq	sp, r0, ip, asr #19
   1f344:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f348:	mov	r8, r0
   1f34c:	mov	r6, r1
   1f350:	mov	r0, r1
   1f354:	ldr	r1, [r8, #4]
   1f358:	mov	r5, r2
   1f35c:	bl	289ac <__assert_fail@plt+0x16dcc>
   1f360:	ldr	r4, [r8, #8]
   1f364:	ldr	fp, [pc, #220]	; 1f448 <__assert_fail@plt+0xd868>
   1f368:	ldr	r9, [pc, #220]	; 1f44c <__assert_fail@plt+0xd86c>
   1f36c:	cmp	r4, #0
   1f370:	add	fp, pc, fp
   1f374:	add	r9, pc, r9
   1f378:	mov	sl, r0
   1f37c:	beq	1f3d8 <__assert_fail@plt+0xd7f8>
   1f380:	add	r7, r4, #12
   1f384:	ldr	r1, [r6]
   1f388:	ldr	r2, [r6, #8]
   1f38c:	mov	r0, r5
   1f390:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f394:	mov	r1, fp
   1f398:	mov	r2, #1
   1f39c:	mov	r0, r5
   1f3a0:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f3a4:	mov	r0, r7
   1f3a8:	bl	119a0 <strlen@plt>
   1f3ac:	mov	r1, r7
   1f3b0:	mov	r2, r0
   1f3b4:	mov	r0, r5
   1f3b8:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f3bc:	mov	r0, r5
   1f3c0:	mov	r1, r9
   1f3c4:	mov	r2, #1
   1f3c8:	bl	1b4d8 <__assert_fail@plt+0x98f8>
   1f3cc:	ldr	r4, [r4]
   1f3d0:	cmp	r4, #0
   1f3d4:	bne	1f380 <__assert_fail@plt+0xd7a0>
   1f3d8:	ldrb	r4, [r8, #12]
   1f3dc:	ldrb	r3, [r8, #13]
   1f3e0:	cmp	r4, r3
   1f3e4:	bgt	1f430 <__assert_fail@plt+0xd850>
   1f3e8:	mov	r1, r4
   1f3ec:	mov	r0, r8
   1f3f0:	bl	1effc <__assert_fail@plt+0xd41c>
   1f3f4:	uxtb	r1, r4
   1f3f8:	add	r4, r4, #1
   1f3fc:	subs	r7, r0, #0
   1f400:	mov	r0, r6
   1f404:	beq	1f424 <__assert_fail@plt+0xd844>
   1f408:	bl	28958 <__assert_fail@plt+0x16d78>
   1f40c:	mov	r0, r7
   1f410:	mov	r1, r6
   1f414:	mov	r2, r5
   1f418:	bl	1f344 <__assert_fail@plt+0xd764>
   1f41c:	mov	r0, r6
   1f420:	bl	28a7c <__assert_fail@plt+0x16e9c>
   1f424:	ldrb	r3, [r8, #13]
   1f428:	cmp	r3, r4
   1f42c:	bge	1f3e8 <__assert_fail@plt+0xd808>
   1f430:	mov	r0, r6
   1f434:	mov	r1, sl
   1f438:	bl	28ac0 <__assert_fail@plt+0x16ee0>
   1f43c:	mov	r0, r8
   1f440:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f444:	b	1ebc8 <__assert_fail@plt+0xcfe8>
   1f448:	andeq	sp, r0, r8, asr #29
   1f44c:	andeq	sp, r0, r8, asr #17
   1f450:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f454:	mov	r9, r1
   1f458:	ldr	r1, [r0, #4]
   1f45c:	sub	sp, sp, #8
   1f460:	mov	r6, r0
   1f464:	mov	r5, r2
   1f468:	mov	r7, r3
   1f46c:	ldr	r8, [sp, #40]	; 0x28
   1f470:	ldrb	r1, [r1, r9]
   1f474:	cmp	r1, #0
   1f478:	beq	1f558 <__assert_fail@plt+0xd978>
   1f47c:	mov	r4, #0
   1f480:	mov	r0, r5
   1f484:	add	r4, r4, #1
   1f488:	bl	28958 <__assert_fail@plt+0x16d78>
   1f48c:	ldr	r3, [r6, #4]
   1f490:	add	r3, r3, r4
   1f494:	ldrb	r1, [r3, r9]
   1f498:	cmp	r1, #0
   1f49c:	bne	1f480 <__assert_fail@plt+0xd8a0>
   1f4a0:	mov	sl, r4
   1f4a4:	ldrb	r4, [r6, #16]
   1f4a8:	ldrb	r3, [r6, #17]
   1f4ac:	cmp	r4, r3
   1f4b0:	bgt	1f504 <__assert_fail@plt+0xd924>
   1f4b4:	mov	r1, r4
   1f4b8:	mov	r0, r6
   1f4bc:	bl	1f200 <__assert_fail@plt+0xd620>
   1f4c0:	uxtb	r1, r4
   1f4c4:	add	r4, r4, #1
   1f4c8:	subs	r9, r0, #0
   1f4cc:	mov	r0, r5
   1f4d0:	beq	1f4f8 <__assert_fail@plt+0xd918>
   1f4d4:	bl	28958 <__assert_fail@plt+0x16d78>
   1f4d8:	mov	r0, r9
   1f4dc:	str	r8, [sp]
   1f4e0:	mov	r1, #0
   1f4e4:	mov	r2, r5
   1f4e8:	mov	r3, r7
   1f4ec:	bl	1f450 <__assert_fail@plt+0xd870>
   1f4f0:	mov	r0, r5
   1f4f4:	bl	28a7c <__assert_fail@plt+0x16e9c>
   1f4f8:	ldrb	r2, [r6, #17]
   1f4fc:	cmp	r2, r4
   1f500:	bge	1f4b4 <__assert_fail@plt+0xd8d4>
   1f504:	ldr	r3, [r6, #12]
   1f508:	cmp	r3, #0
   1f50c:	beq	1f52c <__assert_fail@plt+0xd94c>
   1f510:	mov	r0, r5
   1f514:	bl	28914 <__assert_fail@plt+0x16d34>
   1f518:	mov	r1, r7
   1f51c:	mov	r2, #0
   1f520:	bl	118d4 <fnmatch@plt>
   1f524:	cmp	r0, #0
   1f528:	beq	1f548 <__assert_fail@plt+0xd968>
   1f52c:	mov	r0, r6
   1f530:	bl	117c0 <free@plt>
   1f534:	mov	r0, r5
   1f538:	mov	r1, sl
   1f53c:	add	sp, sp, #8
   1f540:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f544:	b	28ac0 <__assert_fail@plt+0x16ee0>
   1f548:	mov	r0, r6
   1f54c:	mov	r1, r8
   1f550:	bl	1ed14 <__assert_fail@plt+0xd134>
   1f554:	b	1f534 <__assert_fail@plt+0xd954>
   1f558:	mov	sl, r1
   1f55c:	b	1f4a4 <__assert_fail@plt+0xd8c4>
   1f560:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f564:	mov	r9, r1
   1f568:	ldr	r1, [r0, #4]
   1f56c:	sub	sp, sp, #8
   1f570:	mov	r6, r0
   1f574:	mov	r5, r2
   1f578:	mov	r7, r3
   1f57c:	ldr	r8, [sp, #40]	; 0x28
   1f580:	ldrb	r1, [r1, r9]
   1f584:	cmp	r1, #0
   1f588:	beq	1f668 <__assert_fail@plt+0xda88>
   1f58c:	mov	r4, #0
   1f590:	mov	r0, r5
   1f594:	add	r4, r4, #1
   1f598:	bl	28958 <__assert_fail@plt+0x16d78>
   1f59c:	ldr	r3, [r6, #4]
   1f5a0:	add	r3, r3, r4
   1f5a4:	ldrb	r1, [r3, r9]
   1f5a8:	cmp	r1, #0
   1f5ac:	bne	1f590 <__assert_fail@plt+0xd9b0>
   1f5b0:	mov	sl, r4
   1f5b4:	ldrb	r4, [r6, #12]
   1f5b8:	ldrb	r3, [r6, #13]
   1f5bc:	cmp	r4, r3
   1f5c0:	bgt	1f614 <__assert_fail@plt+0xda34>
   1f5c4:	mov	r1, r4
   1f5c8:	mov	r0, r6
   1f5cc:	bl	1effc <__assert_fail@plt+0xd41c>
   1f5d0:	uxtb	r1, r4
   1f5d4:	add	r4, r4, #1
   1f5d8:	subs	r9, r0, #0
   1f5dc:	mov	r0, r5
   1f5e0:	beq	1f608 <__assert_fail@plt+0xda28>
   1f5e4:	bl	28958 <__assert_fail@plt+0x16d78>
   1f5e8:	mov	r0, r9
   1f5ec:	str	r8, [sp]
   1f5f0:	mov	r1, #0
   1f5f4:	mov	r2, r5
   1f5f8:	mov	r3, r7
   1f5fc:	bl	1f560 <__assert_fail@plt+0xd980>
   1f600:	mov	r0, r5
   1f604:	bl	28a7c <__assert_fail@plt+0x16e9c>
   1f608:	ldrb	r2, [r6, #13]
   1f60c:	cmp	r2, r4
   1f610:	bge	1f5c4 <__assert_fail@plt+0xd9e4>
   1f614:	ldr	r3, [r6, #8]
   1f618:	cmp	r3, #0
   1f61c:	beq	1f63c <__assert_fail@plt+0xda5c>
   1f620:	mov	r0, r5
   1f624:	bl	28914 <__assert_fail@plt+0x16d34>
   1f628:	mov	r1, r7
   1f62c:	mov	r2, #0
   1f630:	bl	118d4 <fnmatch@plt>
   1f634:	cmp	r0, #0
   1f638:	beq	1f658 <__assert_fail@plt+0xda78>
   1f63c:	mov	r0, r6
   1f640:	bl	1ebc8 <__assert_fail@plt+0xcfe8>
   1f644:	mov	r0, r5
   1f648:	mov	r1, sl
   1f64c:	add	sp, sp, #8
   1f650:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f654:	b	28ac0 <__assert_fail@plt+0x16ee0>
   1f658:	mov	r0, r6
   1f65c:	mov	r1, r8
   1f660:	bl	1ed68 <__assert_fail@plt+0xd188>
   1f664:	b	1f644 <__assert_fail@plt+0xda64>
   1f668:	mov	sl, r1
   1f66c:	b	1f5b4 <__assert_fail@plt+0xd9d4>
   1f670:	cmp	r0, #0
   1f674:	push	{r4, lr}
   1f678:	popeq	{r4, pc}
   1f67c:	ldr	r4, [r0]
   1f680:	bl	117c0 <free@plt>
   1f684:	cmp	r4, #0
   1f688:	mov	r0, r4
   1f68c:	bne	1f67c <__assert_fail@plt+0xda9c>
   1f690:	pop	{r4, pc}
   1f694:	ldr	r1, [pc, #144]	; 1f72c <__assert_fail@plt+0xdb4c>
   1f698:	push	{r4, r5, r6, lr}
   1f69c:	add	r1, pc, r1
   1f6a0:	bl	11b44 <fopen64@plt>
   1f6a4:	subs	r4, r0, #0
   1f6a8:	beq	1f710 <__assert_fail@plt+0xdb30>
   1f6ac:	bl	119f4 <__errno_location@plt>
   1f6b0:	mov	r3, #22
   1f6b4:	mov	r5, r0
   1f6b8:	mov	r0, r4
   1f6bc:	str	r3, [r5]
   1f6c0:	bl	1ec04 <__assert_fail@plt+0xd024>
   1f6c4:	movw	r3, #62551	; 0xf457
   1f6c8:	movt	r3, #45063	; 0xb007
   1f6cc:	cmp	r0, r3
   1f6d0:	mov	r0, r4
   1f6d4:	bne	1f71c <__assert_fail@plt+0xdb3c>
   1f6d8:	bl	1ec04 <__assert_fail@plt+0xd024>
   1f6dc:	lsr	r0, r0, #16
   1f6e0:	cmp	r0, #2
   1f6e4:	bne	1f718 <__assert_fail@plt+0xdb38>
   1f6e8:	mov	r0, #8
   1f6ec:	bl	11910 <malloc@plt>
   1f6f0:	mov	r6, r0
   1f6f4:	mov	r0, r4
   1f6f8:	str	r4, [r6]
   1f6fc:	bl	1ec04 <__assert_fail@plt+0xd024>
   1f700:	mov	r4, r6
   1f704:	mov	r3, #0
   1f708:	str	r0, [r6, #4]
   1f70c:	str	r3, [r5]
   1f710:	mov	r0, r4
   1f714:	pop	{r4, r5, r6, pc}
   1f718:	mov	r0, r4
   1f71c:	mov	r4, #0
   1f720:	bl	11a84 <fclose@plt>
   1f724:	mov	r0, r4
   1f728:	pop	{r4, r5, r6, pc}
   1f72c:	andeq	sp, r0, r4, asr #11
   1f730:	push	{r4, lr}
   1f734:	mov	r4, r0
   1f738:	ldr	r0, [r0]
   1f73c:	bl	11a84 <fclose@plt>
   1f740:	mov	r0, r4
   1f744:	pop	{r4, lr}
   1f748:	b	117c0 <free@plt>
   1f74c:	push	{r4, r5, r6, r7, r8, lr}
   1f750:	mov	r3, r0
   1f754:	ldr	lr, [pc, #124]	; 1f7d8 <__assert_fail@plt+0xdbf8>
   1f758:	mov	r6, r1
   1f75c:	ldr	ip, [pc, #120]	; 1f7dc <__assert_fail@plt+0xdbfc>
   1f760:	sub	sp, sp, #16
   1f764:	add	lr, pc, lr
   1f768:	ldr	r1, [r3, #4]
   1f76c:	ldr	r0, [r0]
   1f770:	mov	r7, r2
   1f774:	ldr	r4, [lr, ip]
   1f778:	mov	r3, lr
   1f77c:	ldr	r3, [r4]
   1f780:	str	r3, [sp, #12]
   1f784:	bl	1ee30 <__assert_fail@plt+0xd250>
   1f788:	subs	r8, r0, #0
   1f78c:	beq	1f7bc <__assert_fail@plt+0xdbdc>
   1f790:	mov	r0, sp
   1f794:	bl	288b8 <__assert_fail@plt+0x16cd8>
   1f798:	mov	r1, r7
   1f79c:	mov	r0, sp
   1f7a0:	bl	289ac <__assert_fail@plt+0x16dcc>
   1f7a4:	mov	r0, r8
   1f7a8:	mov	r1, sp
   1f7ac:	mov	r2, r6
   1f7b0:	bl	1f344 <__assert_fail@plt+0xd764>
   1f7b4:	mov	r0, sp
   1f7b8:	bl	288cc <__assert_fail@plt+0x16cec>
   1f7bc:	ldr	r2, [sp, #12]
   1f7c0:	ldr	r3, [r4]
   1f7c4:	cmp	r2, r3
   1f7c8:	bne	1f7d4 <__assert_fail@plt+0xdbf4>
   1f7cc:	add	sp, sp, #16
   1f7d0:	pop	{r4, r5, r6, r7, r8, pc}
   1f7d4:	bl	11838 <__stack_chk_fail@plt>
   1f7d8:	muleq	r1, r4, r8
   1f7dc:	andeq	r0, r0, ip, lsr #3
   1f7e0:	push	{r3, r4, r5, r6, r7, lr}
   1f7e4:	mov	r7, r1
   1f7e8:	ldm	r0, {r0, r1}
   1f7ec:	bl	1ee30 <__assert_fail@plt+0xd250>
   1f7f0:	subs	r5, r0, #0
   1f7f4:	beq	1f888 <__assert_fail@plt+0xdca8>
   1f7f8:	mov	r6, #0
   1f7fc:	ldr	ip, [r5, #4]
   1f800:	ldrb	r2, [ip]
   1f804:	cmp	r2, #0
   1f808:	beq	1f840 <__assert_fail@plt+0xdc60>
   1f80c:	ldrb	r3, [r7, r6]
   1f810:	add	lr, r7, r6
   1f814:	cmp	r3, r2
   1f818:	bne	1f878 <__assert_fail@plt+0xdc98>
   1f81c:	mov	r2, #0
   1f820:	b	1f830 <__assert_fail@plt+0xdc50>
   1f824:	ldrb	r4, [lr, #1]!
   1f828:	cmp	r4, r3
   1f82c:	bne	1f878 <__assert_fail@plt+0xdc98>
   1f830:	ldrb	r3, [ip, #1]!
   1f834:	add	r2, r2, #1
   1f838:	cmp	r3, #0
   1f83c:	bne	1f824 <__assert_fail@plt+0xdc44>
   1f840:	add	r6, r6, r2
   1f844:	ldrb	r1, [r7, r6]
   1f848:	cmp	r1, #0
   1f84c:	beq	1f890 <__assert_fail@plt+0xdcb0>
   1f850:	mov	r0, r5
   1f854:	add	r6, r6, #1
   1f858:	bl	1effc <__assert_fail@plt+0xd41c>
   1f85c:	mov	r4, r0
   1f860:	mov	r0, r5
   1f864:	bl	1ebc8 <__assert_fail@plt+0xcfe8>
   1f868:	cmp	r4, #0
   1f86c:	beq	1f888 <__assert_fail@plt+0xdca8>
   1f870:	mov	r5, r4
   1f874:	b	1f7fc <__assert_fail@plt+0xdc1c>
   1f878:	mov	r0, r5
   1f87c:	bl	1ebc8 <__assert_fail@plt+0xcfe8>
   1f880:	mov	r0, #0
   1f884:	pop	{r3, r4, r5, r6, r7, pc}
   1f888:	mov	r0, #0
   1f88c:	pop	{r3, r4, r5, r6, r7, pc}
   1f890:	ldr	r0, [r5, #8]
   1f894:	cmp	r0, #0
   1f898:	moveq	r4, r0
   1f89c:	beq	1f8ac <__assert_fail@plt+0xdccc>
   1f8a0:	add	r0, r0, #12
   1f8a4:	bl	11a18 <__strdup@plt>
   1f8a8:	mov	r4, r0
   1f8ac:	mov	r0, r5
   1f8b0:	bl	1ebc8 <__assert_fail@plt+0xcfe8>
   1f8b4:	mov	r0, r4
   1f8b8:	pop	{r3, r4, r5, r6, r7, pc}
   1f8bc:	ldr	r3, [pc, #548]	; 1fae8 <__assert_fail@plt+0xdf08>
   1f8c0:	ldr	ip, [pc, #548]	; 1faec <__assert_fail@plt+0xdf0c>
   1f8c4:	add	r3, pc, r3
   1f8c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8cc:	sub	sp, sp, #36	; 0x24
   1f8d0:	ldr	r8, [r3, ip]
   1f8d4:	mov	r7, r1
   1f8d8:	ldm	r0, {r0, r1}
   1f8dc:	add	r6, sp, #16
   1f8e0:	mov	r4, #0
   1f8e4:	ldr	r3, [r8]
   1f8e8:	str	r3, [sp, #28]
   1f8ec:	bl	1ee30 <__assert_fail@plt+0xd250>
   1f8f0:	str	r4, [sp, #12]
   1f8f4:	mov	sl, r0
   1f8f8:	mov	r0, r6
   1f8fc:	bl	288b8 <__assert_fail@plt+0x16cd8>
   1f900:	cmp	sl, r4
   1f904:	beq	1faa0 <__assert_fail@plt+0xdec0>
   1f908:	add	r9, sp, #12
   1f90c:	mov	r2, r4
   1f910:	ldr	r4, [sl, #4]
   1f914:	ldrb	r3, [r4]
   1f918:	cmp	r3, #0
   1f91c:	beq	1fad0 <__assert_fail@plt+0xdef0>
   1f920:	cmp	r3, #42	; 0x2a
   1f924:	cmpne	r3, #63	; 0x3f
   1f928:	movne	lr, #0
   1f92c:	moveq	lr, #1
   1f930:	beq	1fa7c <__assert_fail@plt+0xde9c>
   1f934:	cmp	r3, #91	; 0x5b
   1f938:	beq	1fa80 <__assert_fail@plt+0xdea0>
   1f93c:	ldrb	r1, [r7, r2]
   1f940:	add	r5, r7, r2
   1f944:	cmp	r3, r1
   1f948:	beq	1f970 <__assert_fail@plt+0xdd90>
   1f94c:	b	1fac4 <__assert_fail@plt+0xdee4>
   1f950:	cmp	ip, #42	; 0x2a
   1f954:	cmpne	ip, #63	; 0x3f
   1f958:	beq	1fa80 <__assert_fail@plt+0xdea0>
   1f95c:	cmp	ip, #91	; 0x5b
   1f960:	beq	1fa80 <__assert_fail@plt+0xdea0>
   1f964:	ldrb	r3, [r5, #1]!
   1f968:	cmp	ip, r3
   1f96c:	bne	1fac4 <__assert_fail@plt+0xdee4>
   1f970:	ldrb	ip, [r4, #1]!
   1f974:	add	lr, lr, #1
   1f978:	cmp	ip, #0
   1f97c:	bne	1f950 <__assert_fail@plt+0xdd70>
   1f980:	mov	r0, sl
   1f984:	mov	r1, #42	; 0x2a
   1f988:	add	r5, r2, lr
   1f98c:	bl	1effc <__assert_fail@plt+0xd41c>
   1f990:	add	r4, r7, r5
   1f994:	subs	fp, r0, #0
   1f998:	beq	1f9c8 <__assert_fail@plt+0xdde8>
   1f99c:	mov	r1, #42	; 0x2a
   1f9a0:	mov	r0, r6
   1f9a4:	bl	28958 <__assert_fail@plt+0x16d78>
   1f9a8:	mov	r0, fp
   1f9ac:	str	r9, [sp]
   1f9b0:	mov	r3, r4
   1f9b4:	mov	r1, #0
   1f9b8:	mov	r2, r6
   1f9bc:	bl	1f560 <__assert_fail@plt+0xd980>
   1f9c0:	mov	r0, r6
   1f9c4:	bl	28a7c <__assert_fail@plt+0x16e9c>
   1f9c8:	mov	r0, sl
   1f9cc:	mov	r1, #63	; 0x3f
   1f9d0:	bl	1effc <__assert_fail@plt+0xd41c>
   1f9d4:	subs	fp, r0, #0
   1f9d8:	beq	1fa08 <__assert_fail@plt+0xde28>
   1f9dc:	mov	r1, #63	; 0x3f
   1f9e0:	mov	r0, r6
   1f9e4:	bl	28958 <__assert_fail@plt+0x16d78>
   1f9e8:	mov	r0, fp
   1f9ec:	str	r9, [sp]
   1f9f0:	mov	r1, #0
   1f9f4:	mov	r2, r6
   1f9f8:	mov	r3, r4
   1f9fc:	bl	1f560 <__assert_fail@plt+0xd980>
   1fa00:	mov	r0, r6
   1fa04:	bl	28a7c <__assert_fail@plt+0x16e9c>
   1fa08:	mov	r0, sl
   1fa0c:	mov	r1, #91	; 0x5b
   1fa10:	bl	1effc <__assert_fail@plt+0xd41c>
   1fa14:	subs	fp, r0, #0
   1fa18:	beq	1fa48 <__assert_fail@plt+0xde68>
   1fa1c:	mov	r1, #91	; 0x5b
   1fa20:	mov	r0, r6
   1fa24:	bl	28958 <__assert_fail@plt+0x16d78>
   1fa28:	mov	r0, fp
   1fa2c:	str	r9, [sp]
   1fa30:	mov	r1, #0
   1fa34:	mov	r2, r6
   1fa38:	mov	r3, r4
   1fa3c:	bl	1f560 <__assert_fail@plt+0xd980>
   1fa40:	mov	r0, r6
   1fa44:	bl	28a7c <__assert_fail@plt+0x16e9c>
   1fa48:	ldrb	r1, [r4]
   1fa4c:	mov	r0, sl
   1fa50:	cmp	r1, #0
   1fa54:	beq	1fad8 <__assert_fail@plt+0xdef8>
   1fa58:	bl	1effc <__assert_fail@plt+0xd41c>
   1fa5c:	mov	r4, r0
   1fa60:	mov	r0, sl
   1fa64:	bl	1ebc8 <__assert_fail@plt+0xcfe8>
   1fa68:	cmp	r4, #0
   1fa6c:	add	r2, r5, #1
   1fa70:	beq	1faa0 <__assert_fail@plt+0xdec0>
   1fa74:	mov	sl, r4
   1fa78:	b	1f910 <__assert_fail@plt+0xdd30>
   1fa7c:	mov	lr, #0
   1fa80:	add	r3, lr, r2
   1fa84:	add	ip, sp, #12
   1fa88:	mov	r0, sl
   1fa8c:	add	r3, r7, r3
   1fa90:	mov	r1, lr
   1fa94:	mov	r2, r6
   1fa98:	str	ip, [sp]
   1fa9c:	bl	1f560 <__assert_fail@plt+0xd980>
   1faa0:	mov	r0, r6
   1faa4:	bl	288cc <__assert_fail@plt+0x16cec>
   1faa8:	ldr	r2, [sp, #28]
   1faac:	ldr	r3, [r8]
   1fab0:	ldr	r0, [sp, #12]
   1fab4:	cmp	r2, r3
   1fab8:	bne	1fae4 <__assert_fail@plt+0xdf04>
   1fabc:	add	sp, sp, #36	; 0x24
   1fac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fac4:	mov	r0, sl
   1fac8:	bl	1ebc8 <__assert_fail@plt+0xcfe8>
   1facc:	b	1faa0 <__assert_fail@plt+0xdec0>
   1fad0:	mov	lr, r3
   1fad4:	b	1f980 <__assert_fail@plt+0xdda0>
   1fad8:	add	r1, sp, #12
   1fadc:	bl	1ed68 <__assert_fail@plt+0xd188>
   1fae0:	b	1faa0 <__assert_fail@plt+0xdec0>
   1fae4:	bl	11838 <__stack_chk_fail@plt>
   1fae8:	andeq	pc, r1, r4, lsr r7	; <UNPREDICTABLE>
   1faec:	andeq	r0, r0, ip, lsr #3
   1faf0:	ldr	r3, [pc, #616]	; 1fd60 <__assert_fail@plt+0xe180>
   1faf4:	ldr	ip, [pc, #616]	; 1fd64 <__assert_fail@plt+0xe184>
   1faf8:	add	r3, pc, r3
   1fafc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb00:	sub	sp, sp, #140	; 0x8c
   1fb04:	ldr	r8, [r3, ip]
   1fb08:	mov	sl, r0
   1fb0c:	mov	r0, #16
   1fb10:	mov	r4, r1
   1fb14:	mov	fp, r2
   1fb18:	ldr	r3, [r8]
   1fb1c:	str	r3, [sp, #132]	; 0x84
   1fb20:	bl	11910 <malloc@plt>
   1fb24:	subs	r6, r0, #0
   1fb28:	beq	1fc3c <__assert_fail@plt+0xe05c>
   1fb2c:	mov	r0, r4
   1fb30:	mov	r1, #524288	; 0x80000
   1fb34:	bl	118e0 <open64@plt>
   1fb38:	subs	r7, r0, #0
   1fb3c:	blt	1fc2c <__assert_fail@plt+0xe04c>
   1fb40:	add	r9, sp, #24
   1fb44:	mov	r0, #3
   1fb48:	mov	r1, r7
   1fb4c:	mov	r2, r9
   1fb50:	bl	11868 <__fxstat64@plt>
   1fb54:	cmp	r0, #0
   1fb58:	blt	1fc24 <__assert_fail@plt+0xe044>
   1fb5c:	ldr	r1, [sp, #72]	; 0x48
   1fb60:	cmp	r1, #11
   1fb64:	bls	1fc24 <__assert_fail@plt+0xe044>
   1fb68:	str	r7, [sp]
   1fb6c:	mov	r4, #0
   1fb70:	mov	r5, #0
   1fb74:	mov	r0, #0
   1fb78:	strd	r4, [sp, #8]
   1fb7c:	mov	r2, #1
   1fb80:	mov	r3, #2
   1fb84:	bl	117f0 <mmap64@plt>
   1fb88:	cmn	r0, #1
   1fb8c:	str	r0, [r6, #4]
   1fb90:	beq	1fd0c <__assert_fail@plt+0xe12c>
   1fb94:	ldr	r5, [r0]
   1fb98:	movw	r4, #62551	; 0xf457
   1fb9c:	movt	r4, #45063	; 0xb007
   1fba0:	ldr	r2, [r0, #4]
   1fba4:	rev	r5, r5
   1fba8:	ldr	r3, [r0, #8]
   1fbac:	cmp	r5, r4
   1fbb0:	rev	r2, r2
   1fbb4:	rev	r3, r3
   1fbb8:	bne	1fc80 <__assert_fail@plt+0xe0a0>
   1fbbc:	lsr	r4, r2, #16
   1fbc0:	cmp	r4, #2
   1fbc4:	bne	1fc08 <__assert_fail@plt+0xe028>
   1fbc8:	ldr	r2, [sp, #72]	; 0x48
   1fbcc:	mov	r0, r7
   1fbd0:	str	r3, [r6, #8]
   1fbd4:	str	sl, [r6]
   1fbd8:	str	r2, [r6, #12]
   1fbdc:	bl	11bbc <close@plt>
   1fbe0:	mov	r0, r9
   1fbe4:	bl	1b9f8 <__assert_fail@plt+0x9e18>
   1fbe8:	strd	r0, [fp]
   1fbec:	ldr	r2, [sp, #132]	; 0x84
   1fbf0:	mov	r0, r6
   1fbf4:	ldr	r3, [r8]
   1fbf8:	cmp	r2, r3
   1fbfc:	bne	1fd5c <__assert_fail@plt+0xe17c>
   1fc00:	add	sp, sp, #140	; 0x8c
   1fc04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc08:	mov	r0, sl
   1fc0c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1fc10:	cmp	r0, #2
   1fc14:	bgt	1fccc <__assert_fail@plt+0xe0ec>
   1fc18:	ldr	r0, [r6, #4]
   1fc1c:	ldr	r1, [sp, #72]	; 0x48
   1fc20:	bl	11a9c <munmap@plt>
   1fc24:	mov	r0, r7
   1fc28:	bl	11bbc <close@plt>
   1fc2c:	mov	r0, r6
   1fc30:	mov	r6, #0
   1fc34:	bl	117c0 <free@plt>
   1fc38:	b	1fbec <__assert_fail@plt+0xe00c>
   1fc3c:	mov	r0, sl
   1fc40:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1fc44:	cmp	r0, #2
   1fc48:	ble	1fbec <__assert_fail@plt+0xe00c>
   1fc4c:	ldr	lr, [pc, #276]	; 1fd68 <__assert_fail@plt+0xe188>
   1fc50:	mov	r0, sl
   1fc54:	ldr	ip, [pc, #272]	; 1fd6c <__assert_fail@plt+0xe18c>
   1fc58:	mov	r1, #3
   1fc5c:	ldr	r2, [pc, #268]	; 1fd70 <__assert_fail@plt+0xe190>
   1fc60:	add	lr, pc, lr
   1fc64:	add	ip, pc, ip
   1fc68:	movw	r3, #759	; 0x2f7
   1fc6c:	add	r2, pc, r2
   1fc70:	str	lr, [sp]
   1fc74:	str	ip, [sp, #4]
   1fc78:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1fc7c:	b	1fbec <__assert_fail@plt+0xe00c>
   1fc80:	mov	r0, sl
   1fc84:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1fc88:	cmp	r0, #2
   1fc8c:	ble	1fc18 <__assert_fail@plt+0xe038>
   1fc90:	ldr	r2, [pc, #220]	; 1fd74 <__assert_fail@plt+0xe194>
   1fc94:	mov	r0, sl
   1fc98:	ldr	ip, [pc, #216]	; 1fd78 <__assert_fail@plt+0xe198>
   1fc9c:	mov	r1, #3
   1fca0:	add	r2, pc, r2
   1fca4:	str	r2, [sp, #4]
   1fca8:	ldr	r2, [pc, #204]	; 1fd7c <__assert_fail@plt+0xe19c>
   1fcac:	add	ip, pc, ip
   1fcb0:	str	r5, [sp, #8]
   1fcb4:	movw	r3, #787	; 0x313
   1fcb8:	str	r4, [sp, #12]
   1fcbc:	add	r2, pc, r2
   1fcc0:	str	ip, [sp]
   1fcc4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1fcc8:	b	1fc18 <__assert_fail@plt+0xe038>
   1fccc:	mov	r2, #2
   1fcd0:	ldr	r3, [pc, #168]	; 1fd80 <__assert_fail@plt+0xe1a0>
   1fcd4:	str	r2, [sp, #12]
   1fcd8:	mov	r0, sl
   1fcdc:	ldr	ip, [pc, #160]	; 1fd84 <__assert_fail@plt+0xe1a4>
   1fce0:	add	r3, pc, r3
   1fce4:	ldr	r2, [pc, #156]	; 1fd88 <__assert_fail@plt+0xe1a8>
   1fce8:	mov	r1, #3
   1fcec:	add	ip, pc, ip
   1fcf0:	str	r3, [sp]
   1fcf4:	str	r4, [sp, #8]
   1fcf8:	movw	r3, #793	; 0x319
   1fcfc:	str	ip, [sp, #4]
   1fd00:	add	r2, pc, r2
   1fd04:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1fd08:	b	1fc18 <__assert_fail@plt+0xe038>
   1fd0c:	mov	r0, sl
   1fd10:	bl	1bc7c <__assert_fail@plt+0xa09c>
   1fd14:	cmp	r0, #2
   1fd18:	ble	1fc24 <__assert_fail@plt+0xe044>
   1fd1c:	ldr	r2, [pc, #104]	; 1fd8c <__assert_fail@plt+0xe1ac>
   1fd20:	mov	r0, sl
   1fd24:	ldrd	r4, [sp, #72]	; 0x48
   1fd28:	mov	r1, #3
   1fd2c:	add	r2, pc, r2
   1fd30:	ldr	ip, [pc, #88]	; 1fd90 <__assert_fail@plt+0xe1b0>
   1fd34:	str	r2, [sp, #4]
   1fd38:	mov	r3, #776	; 0x308
   1fd3c:	ldr	r2, [pc, #80]	; 1fd94 <__assert_fail@plt+0xe1b4>
   1fd40:	add	ip, pc, ip
   1fd44:	str	r7, [sp, #16]
   1fd48:	str	ip, [sp]
   1fd4c:	add	r2, pc, r2
   1fd50:	strd	r4, [sp, #8]
   1fd54:	bl	1bbe4 <__assert_fail@plt+0xa004>
   1fd58:	b	1fc24 <__assert_fail@plt+0xe044>
   1fd5c:	bl	11838 <__stack_chk_fail@plt>
   1fd60:	andeq	pc, r1, r0, lsl #10
   1fd64:	andeq	r0, r0, ip, lsr #3
   1fd68:	andeq	sp, r0, ip, lsr #15
   1fd6c:	ldrdeq	sp, [r0], -r4
   1fd70:			; <UNDEFINED> instruction: 0x0000d7b4
   1fd74:	ldrdeq	sp, [r0], -ip
   1fd78:	andeq	sp, r0, r0, ror #14
   1fd7c:	andeq	sp, r0, r4, ror #14
   1fd80:	andeq	sp, r0, ip, lsr #14
   1fd84:			; <UNDEFINED> instruction: 0x0000d7b4
   1fd88:	andeq	sp, r0, r0, lsr #14
   1fd8c:	andeq	sp, r0, r8, lsl r7
   1fd90:	andeq	sp, r0, ip, asr #13
   1fd94:	ldrdeq	sp, [r0], -r4
   1fd98:	push	{r4, lr}
   1fd9c:	mov	r4, r0
   1fda0:	ldr	r1, [r4, #12]
   1fda4:	ldr	r0, [r0, #4]
   1fda8:	bl	11a9c <munmap@plt>
   1fdac:	mov	r0, r4
   1fdb0:	pop	{r4, lr}
   1fdb4:	b	117c0 <free@plt>
   1fdb8:	ldr	r3, [pc, #120]	; 1fe38 <__assert_fail@plt+0xe258>
   1fdbc:	ldr	ip, [pc, #120]	; 1fe3c <__assert_fail@plt+0xe25c>
   1fdc0:	add	r3, pc, r3
   1fdc4:	push	{r4, r5, r6, r7, r8, lr}
   1fdc8:	sub	sp, sp, #16
   1fdcc:	ldr	r4, [r3, ip]
   1fdd0:	mov	r6, r1
   1fdd4:	ldr	r1, [r0, #8]
   1fdd8:	mov	r7, r2
   1fddc:	ldr	r3, [r4]
   1fde0:	str	r3, [sp, #12]
   1fde4:	bl	1f034 <__assert_fail@plt+0xd454>
   1fde8:	subs	r8, r0, #0
   1fdec:	beq	1fe1c <__assert_fail@plt+0xe23c>
   1fdf0:	mov	r0, sp
   1fdf4:	bl	288b8 <__assert_fail@plt+0x16cd8>
   1fdf8:	mov	r1, r7
   1fdfc:	mov	r0, sp
   1fe00:	bl	289ac <__assert_fail@plt+0x16dcc>
   1fe04:	mov	r0, r8
   1fe08:	mov	r1, sp
   1fe0c:	mov	r2, r6
   1fe10:	bl	1f238 <__assert_fail@plt+0xd658>
   1fe14:	mov	r0, sp
   1fe18:	bl	288cc <__assert_fail@plt+0x16cec>
   1fe1c:	ldr	r2, [sp, #12]
   1fe20:	ldr	r3, [r4]
   1fe24:	cmp	r2, r3
   1fe28:	bne	1fe34 <__assert_fail@plt+0xe254>
   1fe2c:	add	sp, sp, #16
   1fe30:	pop	{r4, r5, r6, r7, r8, pc}
   1fe34:	bl	11838 <__stack_chk_fail@plt>
   1fe38:	andeq	pc, r1, r8, lsr r2	; <UNPREDICTABLE>
   1fe3c:	andeq	r0, r0, ip, lsr #3
   1fe40:	push	{r3, r4, r5, r6, r7, lr}
   1fe44:	mov	r7, r1
   1fe48:	ldr	r1, [r0, #8]
   1fe4c:	bl	1f034 <__assert_fail@plt+0xd454>
   1fe50:	subs	r5, r0, #0
   1fe54:	beq	1fee8 <__assert_fail@plt+0xe308>
   1fe58:	mov	r6, #0
   1fe5c:	ldr	ip, [r5, #4]
   1fe60:	ldrb	r2, [ip]
   1fe64:	cmp	r2, #0
   1fe68:	beq	1fea0 <__assert_fail@plt+0xe2c0>
   1fe6c:	ldrb	r3, [r7, r6]
   1fe70:	add	lr, r7, r6
   1fe74:	cmp	r3, r2
   1fe78:	bne	1fed8 <__assert_fail@plt+0xe2f8>
   1fe7c:	mov	r2, #0
   1fe80:	b	1fe90 <__assert_fail@plt+0xe2b0>
   1fe84:	ldrb	r4, [lr, #1]!
   1fe88:	cmp	r4, r3
   1fe8c:	bne	1fed8 <__assert_fail@plt+0xe2f8>
   1fe90:	ldrb	r3, [ip, #1]!
   1fe94:	add	r2, r2, #1
   1fe98:	cmp	r3, #0
   1fe9c:	bne	1fe84 <__assert_fail@plt+0xe2a4>
   1fea0:	add	r6, r6, r2
   1fea4:	ldrb	r1, [r7, r6]
   1fea8:	cmp	r1, #0
   1feac:	beq	1fef0 <__assert_fail@plt+0xe310>
   1feb0:	mov	r0, r5
   1feb4:	add	r6, r6, #1
   1feb8:	bl	1f200 <__assert_fail@plt+0xd620>
   1febc:	mov	r4, r0
   1fec0:	mov	r0, r5
   1fec4:	bl	117c0 <free@plt>
   1fec8:	cmp	r4, #0
   1fecc:	beq	1fee8 <__assert_fail@plt+0xe308>
   1fed0:	mov	r5, r4
   1fed4:	b	1fe5c <__assert_fail@plt+0xe27c>
   1fed8:	mov	r0, r5
   1fedc:	bl	117c0 <free@plt>
   1fee0:	mov	r0, #0
   1fee4:	pop	{r3, r4, r5, r6, r7, pc}
   1fee8:	mov	r0, #0
   1feec:	pop	{r3, r4, r5, r6, r7, pc}
   1fef0:	ldr	r4, [r5, #12]
   1fef4:	cmp	r4, #0
   1fef8:	beq	1ff0c <__assert_fail@plt+0xe32c>
   1fefc:	ldr	r3, [r5, #8]
   1ff00:	ldr	r0, [r3, #8]
   1ff04:	bl	11a18 <__strdup@plt>
   1ff08:	mov	r4, r0
   1ff0c:	mov	r0, r5
   1ff10:	bl	117c0 <free@plt>
   1ff14:	mov	r0, r4
   1ff18:	pop	{r3, r4, r5, r6, r7, pc}
   1ff1c:	ldr	r3, [pc, #548]	; 20148 <__assert_fail@plt+0xe568>
   1ff20:	ldr	r2, [pc, #548]	; 2014c <__assert_fail@plt+0xe56c>
   1ff24:	add	r3, pc, r3
   1ff28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff2c:	sub	sp, sp, #36	; 0x24
   1ff30:	ldr	r8, [r3, r2]
   1ff34:	mov	r7, r1
   1ff38:	ldr	r1, [r0, #8]
   1ff3c:	add	r6, sp, #16
   1ff40:	mov	r4, #0
   1ff44:	ldr	r3, [r8]
   1ff48:	str	r3, [sp, #28]
   1ff4c:	bl	1f034 <__assert_fail@plt+0xd454>
   1ff50:	str	r4, [sp, #12]
   1ff54:	mov	sl, r0
   1ff58:	mov	r0, r6
   1ff5c:	bl	288b8 <__assert_fail@plt+0x16cd8>
   1ff60:	cmp	sl, r4
   1ff64:	beq	20100 <__assert_fail@plt+0xe520>
   1ff68:	add	r9, sp, #12
   1ff6c:	mov	r2, r4
   1ff70:	ldr	r4, [sl, #4]
   1ff74:	ldrb	r3, [r4]
   1ff78:	cmp	r3, #0
   1ff7c:	beq	20130 <__assert_fail@plt+0xe550>
   1ff80:	cmp	r3, #42	; 0x2a
   1ff84:	cmpne	r3, #63	; 0x3f
   1ff88:	movne	lr, #0
   1ff8c:	moveq	lr, #1
   1ff90:	beq	200dc <__assert_fail@plt+0xe4fc>
   1ff94:	cmp	r3, #91	; 0x5b
   1ff98:	beq	200e0 <__assert_fail@plt+0xe500>
   1ff9c:	ldrb	r1, [r7, r2]
   1ffa0:	add	r5, r7, r2
   1ffa4:	cmp	r3, r1
   1ffa8:	beq	1ffd0 <__assert_fail@plt+0xe3f0>
   1ffac:	b	20124 <__assert_fail@plt+0xe544>
   1ffb0:	cmp	ip, #42	; 0x2a
   1ffb4:	cmpne	ip, #63	; 0x3f
   1ffb8:	beq	200e0 <__assert_fail@plt+0xe500>
   1ffbc:	cmp	ip, #91	; 0x5b
   1ffc0:	beq	200e0 <__assert_fail@plt+0xe500>
   1ffc4:	ldrb	r3, [r5, #1]!
   1ffc8:	cmp	ip, r3
   1ffcc:	bne	20124 <__assert_fail@plt+0xe544>
   1ffd0:	ldrb	ip, [r4, #1]!
   1ffd4:	add	lr, lr, #1
   1ffd8:	cmp	ip, #0
   1ffdc:	bne	1ffb0 <__assert_fail@plt+0xe3d0>
   1ffe0:	mov	r0, sl
   1ffe4:	mov	r1, #42	; 0x2a
   1ffe8:	add	r5, r2, lr
   1ffec:	bl	1f200 <__assert_fail@plt+0xd620>
   1fff0:	add	r4, r7, r5
   1fff4:	subs	fp, r0, #0
   1fff8:	beq	20028 <__assert_fail@plt+0xe448>
   1fffc:	mov	r1, #42	; 0x2a
   20000:	mov	r0, r6
   20004:	bl	28958 <__assert_fail@plt+0x16d78>
   20008:	mov	r0, fp
   2000c:	str	r9, [sp]
   20010:	mov	r3, r4
   20014:	mov	r1, #0
   20018:	mov	r2, r6
   2001c:	bl	1f450 <__assert_fail@plt+0xd870>
   20020:	mov	r0, r6
   20024:	bl	28a7c <__assert_fail@plt+0x16e9c>
   20028:	mov	r0, sl
   2002c:	mov	r1, #63	; 0x3f
   20030:	bl	1f200 <__assert_fail@plt+0xd620>
   20034:	subs	fp, r0, #0
   20038:	beq	20068 <__assert_fail@plt+0xe488>
   2003c:	mov	r1, #63	; 0x3f
   20040:	mov	r0, r6
   20044:	bl	28958 <__assert_fail@plt+0x16d78>
   20048:	mov	r0, fp
   2004c:	str	r9, [sp]
   20050:	mov	r1, #0
   20054:	mov	r2, r6
   20058:	mov	r3, r4
   2005c:	bl	1f450 <__assert_fail@plt+0xd870>
   20060:	mov	r0, r6
   20064:	bl	28a7c <__assert_fail@plt+0x16e9c>
   20068:	mov	r0, sl
   2006c:	mov	r1, #91	; 0x5b
   20070:	bl	1f200 <__assert_fail@plt+0xd620>
   20074:	subs	fp, r0, #0
   20078:	beq	200a8 <__assert_fail@plt+0xe4c8>
   2007c:	mov	r1, #91	; 0x5b
   20080:	mov	r0, r6
   20084:	bl	28958 <__assert_fail@plt+0x16d78>
   20088:	mov	r0, fp
   2008c:	str	r9, [sp]
   20090:	mov	r1, #0
   20094:	mov	r2, r6
   20098:	mov	r3, r4
   2009c:	bl	1f450 <__assert_fail@plt+0xd870>
   200a0:	mov	r0, r6
   200a4:	bl	28a7c <__assert_fail@plt+0x16e9c>
   200a8:	ldrb	r1, [r4]
   200ac:	mov	r0, sl
   200b0:	cmp	r1, #0
   200b4:	beq	20138 <__assert_fail@plt+0xe558>
   200b8:	bl	1f200 <__assert_fail@plt+0xd620>
   200bc:	mov	r4, r0
   200c0:	mov	r0, sl
   200c4:	bl	117c0 <free@plt>
   200c8:	cmp	r4, #0
   200cc:	add	r2, r5, #1
   200d0:	beq	20100 <__assert_fail@plt+0xe520>
   200d4:	mov	sl, r4
   200d8:	b	1ff70 <__assert_fail@plt+0xe390>
   200dc:	mov	lr, #0
   200e0:	add	r3, lr, r2
   200e4:	add	ip, sp, #12
   200e8:	mov	r0, sl
   200ec:	add	r3, r7, r3
   200f0:	mov	r1, lr
   200f4:	mov	r2, r6
   200f8:	str	ip, [sp]
   200fc:	bl	1f450 <__assert_fail@plt+0xd870>
   20100:	mov	r0, r6
   20104:	bl	288cc <__assert_fail@plt+0x16cec>
   20108:	ldr	r2, [sp, #28]
   2010c:	ldr	r3, [r8]
   20110:	ldr	r0, [sp, #12]
   20114:	cmp	r2, r3
   20118:	bne	20144 <__assert_fail@plt+0xe564>
   2011c:	add	sp, sp, #36	; 0x24
   20120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20124:	mov	r0, sl
   20128:	bl	117c0 <free@plt>
   2012c:	b	20100 <__assert_fail@plt+0xe520>
   20130:	mov	lr, r3
   20134:	b	1ffe0 <__assert_fail@plt+0xe400>
   20138:	add	r1, sp, #12
   2013c:	bl	1ed14 <__assert_fail@plt+0xd134>
   20140:	b	20100 <__assert_fail@plt+0xe520>
   20144:	bl	11838 <__stack_chk_fail@plt>
   20148:	ldrdeq	pc, [r1], -r4
   2014c:	andeq	r0, r0, ip, lsr #3
   20150:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   20154:	mov	r8, r0
   20158:	ldr	r5, [sp, #32]
   2015c:	mov	r6, r2
   20160:	mov	r7, r1
   20164:	mov	r9, r3
   20168:	add	r0, r5, #6
   2016c:	add	r0, r0, r2
   20170:	bl	11910 <malloc@plt>
   20174:	subs	r4, r0, #0
   20178:	beq	201e8 <__assert_fail@plt+0xe608>
   2017c:	add	ip, r5, #5
   20180:	mov	r1, r7
   20184:	add	r0, r4, ip
   20188:	mov	r2, r6
   2018c:	str	r0, [r4]
   20190:	mov	r7, #0
   20194:	bl	117e4 <memcpy@plt>
   20198:	mov	r0, r4
   2019c:	ldr	r3, [r0], #4
   201a0:	mov	r2, r5
   201a4:	add	r5, r4, r5
   201a8:	mov	r1, r9
   201ac:	strb	r7, [r3, r6]
   201b0:	bl	117e4 <memcpy@plt>
   201b4:	strb	r7, [r5, #4]
   201b8:	mov	r1, r4
   201bc:	ldr	r0, [r8]
   201c0:	bl	1cf3c <__assert_fail@plt+0xb35c>
   201c4:	subs	r5, r0, #0
   201c8:	beq	201d8 <__assert_fail@plt+0xe5f8>
   201cc:	str	r5, [r8]
   201d0:	mov	r0, r5
   201d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   201d8:	mov	r0, r4
   201dc:	bl	117c0 <free@plt>
   201e0:	mov	r0, r5
   201e4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   201e8:	mov	r0, r4
   201ec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   201f0:	push	{r4, r5, r6, lr}
   201f4:	mov	r6, r1
   201f8:	bl	1cf34 <__assert_fail@plt+0xb354>
   201fc:	ldr	r5, [r0, #8]
   20200:	cmp	r5, #0
   20204:	movne	r4, r5
   20208:	bne	20218 <__assert_fail@plt+0xe638>
   2020c:	b	2023c <__assert_fail@plt+0xe65c>
   20210:	cmp	r4, #0
   20214:	beq	2023c <__assert_fail@plt+0xe65c>
   20218:	mov	r0, r4
   2021c:	bl	1d150 <__assert_fail@plt+0xb570>
   20220:	ldr	r1, [r6]
   20224:	bl	11754 <strcmp@plt>
   20228:	cmp	r0, #0
   2022c:	beq	20244 <__assert_fail@plt+0xe664>
   20230:	ldr	r4, [r4]
   20234:	cmp	r4, r5
   20238:	bne	20210 <__assert_fail@plt+0xe630>
   2023c:	mov	r0, #0
   20240:	pop	{r4, r5, r6, pc}
   20244:	mov	r0, #1
   20248:	pop	{r4, r5, r6, pc}
   2024c:	ldrb	r3, [r0, #56]	; 0x38
   20250:	bfi	r3, r1, #0, #1
   20254:	strb	r3, [r0, #56]	; 0x38
   20258:	bx	lr
   2025c:	cmp	r1, #0
   20260:	moveq	r1, #1
   20264:	movne	r1, #2
   20268:	str	r1, [r0, #52]	; 0x34
   2026c:	bx	lr
   20270:	ldrb	r3, [r0, #56]	; 0x38
   20274:	bfi	r3, r1, #2, #1
   20278:	strb	r3, [r0, #56]	; 0x38
   2027c:	bx	lr
   20280:	push	{r4, lr}
   20284:	mov	r4, r0
   20288:	ldr	r0, [r0, #52]	; 0x34
   2028c:	cmp	r0, #0
   20290:	beq	202a4 <__assert_fail@plt+0xe6c4>
   20294:	subs	r3, r0, #2
   20298:	rsbs	r0, r3, #0
   2029c:	adcs	r0, r0, r3
   202a0:	pop	{r4, pc}
   202a4:	ldr	r0, [r4]
   202a8:	ldr	r1, [r4, #8]
   202ac:	bl	1c3c0 <__assert_fail@plt+0xa7e0>
   202b0:	cmp	r0, #0
   202b4:	moveq	r3, #1
   202b8:	movne	r3, #2
   202bc:	str	r3, [r4, #52]	; 0x34
   202c0:	pop	{r4, pc}
   202c4:	cmp	r0, #0
   202c8:	ldrne	r3, [r0, #44]	; 0x2c
   202cc:	addne	r3, r3, #1
   202d0:	strne	r3, [r0, #44]	; 0x2c
   202d4:	bx	lr
   202d8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   202dc:	mov	r5, r2
   202e0:	mov	r6, r3
   202e4:	mov	r7, r0
   202e8:	mov	r9, r1
   202ec:	bl	1c1ec <__assert_fail@plt+0xa60c>
   202f0:	cmp	r0, #0
   202f4:	beq	20310 <__assert_fail@plt+0xe730>
   202f8:	bl	202c4 <__assert_fail@plt+0xe6e4>
   202fc:	ldr	r2, [sp, #36]	; 0x24
   20300:	mov	r3, #0
   20304:	str	r0, [r2]
   20308:	mov	r0, r3
   2030c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   20310:	cmp	r6, #0
   20314:	ldrne	r3, [sp, #32]
   20318:	moveq	r8, r5
   2031c:	movne	r0, #2
   20320:	moveq	r0, #1
   20324:	addne	r8, r3, #1
   20328:	addne	r8, r8, r5
   2032c:	add	r8, r8, #1
   20330:	mul	r0, r0, r8
   20334:	add	r0, r0, #60	; 0x3c
   20338:	bl	11910 <malloc@plt>
   2033c:	subs	r4, r0, #0
   20340:	beq	203e8 <__assert_fail@plt+0xe808>
   20344:	mov	r1, #0
   20348:	mov	r2, #60	; 0x3c
   2034c:	bl	11a3c <memset@plt>
   20350:	mov	r0, r7
   20354:	bl	1bc68 <__assert_fail@plt+0xa088>
   20358:	mov	ip, r4
   2035c:	mov	r1, r9
   20360:	mov	r2, r8
   20364:	str	r0, [ip], #60	; 0x3c
   20368:	mov	r0, ip
   2036c:	str	ip, [r4, #8]
   20370:	bl	117e4 <memcpy@plt>
   20374:	cmp	r6, #0
   20378:	beq	203d8 <__assert_fail@plt+0xe7f8>
   2037c:	ldr	r3, [r4, #8]
   20380:	mov	r0, #0
   20384:	add	ip, r5, #1
   20388:	mov	r2, r8
   2038c:	mov	r1, r9
   20390:	strb	r0, [r3, r5]
   20394:	ldr	r3, [r4, #8]
   20398:	add	r0, r3, r8
   2039c:	add	r3, r3, ip
   203a0:	str	r0, [r4, #4]
   203a4:	str	r3, [r4, #32]
   203a8:	bl	117e4 <memcpy@plt>
   203ac:	ldr	r2, [r4, #4]
   203b0:	mov	r0, r7
   203b4:	mov	r3, #1
   203b8:	mov	r1, r4
   203bc:	str	r3, [r4, #44]	; 0x2c
   203c0:	bl	1c1f4 <__assert_fail@plt+0xa614>
   203c4:	ldr	r2, [sp, #36]	; 0x24
   203c8:	mov	r3, #0
   203cc:	mov	r0, r3
   203d0:	str	r4, [r2]
   203d4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   203d8:	ldr	r2, [r4, #8]
   203dc:	str	r6, [r4, #32]
   203e0:	str	r2, [r4, #4]
   203e4:	b	203b0 <__assert_fail@plt+0xe7d0>
   203e8:	mvn	r3, #11
   203ec:	b	20308 <__assert_fail@plt+0xe728>
   203f0:	ldr	r3, [pc, #180]	; 204ac <__assert_fail@plt+0xe8cc>
   203f4:	cmp	r1, #0
   203f8:	cmpne	r0, #0
   203fc:	ldr	ip, [pc, #172]	; 204b0 <__assert_fail@plt+0xe8d0>
   20400:	add	r3, pc, r3
   20404:	push	{r4, r5, r6, r7, r8, lr}
   20408:	sub	sp, sp, #4096	; 0x1000
   2040c:	ldr	r5, [r3, ip]
   20410:	sub	sp, sp, #16
   20414:	mov	r4, r0
   20418:	mov	r0, r3
   2041c:	mov	r6, r2
   20420:	add	r2, sp, #8192	; 0x2000
   20424:	ldr	r3, [r5]
   20428:	movne	r7, #0
   2042c:	moveq	r7, #1
   20430:	str	r3, [r2, #-4084]	; 0xfffff00c
   20434:	beq	204a0 <__assert_fail@plt+0xe8c0>
   20438:	cmp	r6, #0
   2043c:	beq	204a0 <__assert_fail@plt+0xe8c0>
   20440:	add	r8, sp, #12
   20444:	mov	r0, r1
   20448:	add	r2, sp, #8
   2044c:	mov	r1, r8
   20450:	bl	1b360 <__assert_fail@plt+0x9780>
   20454:	add	ip, sp, #4096	; 0x1000
   20458:	movw	r3, #61432	; 0xeff8
   2045c:	add	ip, ip, #16
   20460:	movt	r3, #65535	; 0xffff
   20464:	str	r7, [sp]
   20468:	mov	r1, r8
   2046c:	mov	r0, r4
   20470:	ldr	r2, [ip, r3]
   20474:	mov	r3, r7
   20478:	str	r6, [sp, #4]
   2047c:	bl	202d8 <__assert_fail@plt+0xe6f8>
   20480:	add	r3, sp, #8192	; 0x2000
   20484:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   20488:	ldr	r3, [r5]
   2048c:	cmp	r2, r3
   20490:	bne	204a8 <__assert_fail@plt+0xe8c8>
   20494:	add	sp, sp, #4096	; 0x1000
   20498:	add	sp, sp, #16
   2049c:	pop	{r4, r5, r6, r7, r8, pc}
   204a0:	mvn	r0, #1
   204a4:	b	20480 <__assert_fail@plt+0xe8a0>
   204a8:	bl	11838 <__stack_chk_fail@plt>
   204ac:	strdeq	lr, [r1], -r8
   204b0:	andeq	r0, r0, ip, lsr #3
   204b4:	ldr	ip, [pc, #212]	; 20590 <__assert_fail@plt+0xe9b0>
   204b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   204bc:	mov	r5, r2
   204c0:	ldr	r2, [pc, #204]	; 20594 <__assert_fail@plt+0xe9b4>
   204c4:	add	ip, pc, ip
   204c8:	sub	sp, sp, #4096	; 0x1000
   204cc:	mov	sl, r3
   204d0:	sub	sp, sp, #16
   204d4:	mov	r9, r0
   204d8:	ldr	r8, [ip, r2]
   204dc:	add	r2, sp, #8192	; 0x2000
   204e0:	mov	r0, r5
   204e4:	mov	r6, r1
   204e8:	ldr	r3, [r8]
   204ec:	str	r3, [r2, #-4084]	; 0xfffff00c
   204f0:	bl	119a0 <strlen@plt>
   204f4:	mov	r4, r0
   204f8:	mov	r0, r6
   204fc:	bl	119a0 <strlen@plt>
   20500:	add	r3, r4, r0
   20504:	mov	r7, r0
   20508:	add	r3, r3, #2
   2050c:	cmp	r3, #4096	; 0x1000
   20510:	bhi	20584 <__assert_fail@plt+0xe9a4>
   20514:	mov	r1, r5
   20518:	add	r5, sp, #12
   2051c:	mov	r3, #4096	; 0x1000
   20520:	mov	r2, r4
   20524:	mov	r0, r5
   20528:	bl	11874 <__memcpy_chk@plt>
   2052c:	add	r0, r4, #1
   20530:	mov	r1, r6
   20534:	add	r2, r7, #1
   20538:	add	r0, r5, r0
   2053c:	bl	117e4 <memcpy@plt>
   20540:	stm	sp, {r7, sl}
   20544:	mov	ip, #92	; 0x5c
   20548:	mov	r0, r9
   2054c:	mov	r3, r6
   20550:	mov	r1, r5
   20554:	mov	r2, r4
   20558:	strb	ip, [r5, r4]
   2055c:	bl	202d8 <__assert_fail@plt+0xe6f8>
   20560:	and	r0, r0, r0, asr #31
   20564:	add	r3, sp, #8192	; 0x2000
   20568:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   2056c:	ldr	r3, [r8]
   20570:	cmp	r2, r3
   20574:	bne	2058c <__assert_fail@plt+0xe9ac>
   20578:	add	sp, sp, #4096	; 0x1000
   2057c:	add	sp, sp, #16
   20580:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20584:	mvn	r0, #35	; 0x23
   20588:	b	20564 <__assert_fail@plt+0xe984>
   2058c:	bl	11838 <__stack_chk_fail@plt>
   20590:	andeq	lr, r1, r4, lsr fp
   20594:	andeq	r0, r0, ip, lsr #3
   20598:	ldr	r3, [pc, #552]	; 207c8 <__assert_fail@plt+0xebe8>
   2059c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205a0:	mov	r8, r0
   205a4:	ldr	r0, [pc, #544]	; 207cc <__assert_fail@plt+0xebec>
   205a8:	add	r3, pc, r3
   205ac:	sub	sp, sp, #4224	; 0x1080
   205b0:	mov	r4, r1
   205b4:	sub	sp, sp, #20
   205b8:	cmp	r1, #0
   205bc:	cmpne	r8, #0
   205c0:	ldr	r6, [r3, r0]
   205c4:	add	r1, sp, #8192	; 0x2000
   205c8:	mov	r9, r2
   205cc:	ldr	r3, [r6]
   205d0:	str	r3, [r1, #-3956]	; 0xfffff08c
   205d4:	beq	206d8 <__assert_fail@plt+0xeaf8>
   205d8:	cmp	r2, #0
   205dc:	beq	206d8 <__assert_fail@plt+0xeaf8>
   205e0:	mov	r0, r4
   205e4:	bl	1b778 <__assert_fail@plt+0x9b98>
   205e8:	subs	r5, r0, #0
   205ec:	beq	207ac <__assert_fail@plt+0xebcc>
   205f0:	add	sl, sp, #80	; 0x50
   205f4:	mov	r0, #3
   205f8:	sub	r2, sl, #48	; 0x30
   205fc:	mov	r1, r5
   20600:	bl	11b74 <__xstat64@plt>
   20604:	cmp	r0, #0
   20608:	blt	206bc <__assert_fail@plt+0xeadc>
   2060c:	add	fp, sp, #140	; 0x8c
   20610:	mov	r0, r4
   20614:	sub	r2, sl, #52	; 0x34
   20618:	mov	r1, fp
   2061c:	bl	1b3bc <__assert_fail@plt+0x97dc>
   20620:	cmp	r0, #0
   20624:	beq	207b4 <__assert_fail@plt+0xebd4>
   20628:	mov	r0, r8
   2062c:	mov	r1, fp
   20630:	bl	1c1ec <__assert_fail@plt+0xa60c>
   20634:	add	r2, sp, #4224	; 0x1080
   20638:	movw	r7, #61320	; 0xef88
   2063c:	add	r2, r2, #16
   20640:	movt	r7, #65535	; 0xffff
   20644:	cmp	r0, #0
   20648:	mov	r4, r0
   2064c:	str	r0, [r2, r7]
   20650:	beq	206e0 <__assert_fail@plt+0xeb00>
   20654:	ldr	r0, [r0, #12]
   20658:	cmp	r0, #0
   2065c:	streq	r5, [r4, #12]
   20660:	beq	20688 <__assert_fail@plt+0xeaa8>
   20664:	mov	r1, r5
   20668:	bl	11754 <strcmp@plt>
   2066c:	cmp	r0, #0
   20670:	bne	20740 <__assert_fail@plt+0xeb60>
   20674:	mov	r0, r5
   20678:	bl	117c0 <free@plt>
   2067c:	add	r3, sp, #4224	; 0x1080
   20680:	add	r3, r3, #16
   20684:	ldr	r4, [r3, r7]
   20688:	mov	r0, r4
   2068c:	mov	r4, #0
   20690:	bl	202c4 <__assert_fail@plt+0xe6e4>
   20694:	str	r0, [r9]
   20698:	add	r3, sp, #8192	; 0x2000
   2069c:	mov	r0, r4
   206a0:	ldr	r2, [r3, #-3956]	; 0xfffff08c
   206a4:	ldr	r3, [r6]
   206a8:	cmp	r2, r3
   206ac:	bne	207c4 <__assert_fail@plt+0xebe4>
   206b0:	add	sp, sp, #4224	; 0x1080
   206b4:	add	sp, sp, #20
   206b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206bc:	bl	119f4 <__errno_location@plt>
   206c0:	ldr	r0, [r0]
   206c4:	rsb	r4, r0, #0
   206c8:	bl	11928 <strerror@plt>
   206cc:	mov	r0, r5
   206d0:	bl	117c0 <free@plt>
   206d4:	b	20698 <__assert_fail@plt+0xeab8>
   206d8:	mvn	r4, #1
   206dc:	b	20698 <__assert_fail@plt+0xeab8>
   206e0:	add	r1, sp, #4224	; 0x1080
   206e4:	movw	r3, #61324	; 0xef8c
   206e8:	add	r1, r1, #16
   206ec:	movt	r3, #65535	; 0xffff
   206f0:	str	r0, [sp]
   206f4:	sub	sl, sl, #56	; 0x38
   206f8:	ldr	r2, [r1, r3]
   206fc:	mov	r0, r8
   20700:	str	sl, [sp, #4]
   20704:	mov	r1, fp
   20708:	mov	r3, r4
   2070c:	bl	202d8 <__assert_fail@plt+0xe6f8>
   20710:	subs	r8, r0, #0
   20714:	blt	20730 <__assert_fail@plt+0xeb50>
   20718:	add	r2, sp, #4224	; 0x1080
   2071c:	add	r2, r2, #16
   20720:	ldr	r3, [r2, r7]
   20724:	str	r5, [r3, #12]
   20728:	str	r3, [r9]
   2072c:	b	20698 <__assert_fail@plt+0xeab8>
   20730:	mov	r0, r5
   20734:	mov	r4, r8
   20738:	bl	117c0 <free@plt>
   2073c:	b	20698 <__assert_fail@plt+0xeab8>
   20740:	mov	r0, r8
   20744:	bl	1bc7c <__assert_fail@plt+0xa09c>
   20748:	cmp	r0, #2
   2074c:	ble	2079c <__assert_fail@plt+0xebbc>
   20750:	add	r1, sp, #4224	; 0x1080
   20754:	ldr	lr, [pc, #116]	; 207d0 <__assert_fail@plt+0xebf0>
   20758:	add	r1, r1, #16
   2075c:	ldr	ip, [pc, #112]	; 207d4 <__assert_fail@plt+0xebf4>
   20760:	add	lr, pc, lr
   20764:	mov	r0, r8
   20768:	ldr	r2, [r1, r7]
   2076c:	add	ip, pc, ip
   20770:	str	fp, [sp, #8]
   20774:	mov	r1, #3
   20778:	str	r5, [sp, #12]
   2077c:	movw	r3, #429	; 0x1ad
   20780:	str	lr, [sp]
   20784:	str	ip, [sp, #4]
   20788:	ldr	ip, [r2, #12]
   2078c:	ldr	r2, [pc, #68]	; 207d8 <__assert_fail@plt+0xebf8>
   20790:	str	ip, [sp, #16]
   20794:	add	r2, pc, r2
   20798:	bl	1bbe4 <__assert_fail@plt+0xa004>
   2079c:	mov	r0, r5
   207a0:	mvn	r4, #16
   207a4:	bl	117c0 <free@plt>
   207a8:	b	20698 <__assert_fail@plt+0xeab8>
   207ac:	mvn	r4, #11
   207b0:	b	20698 <__assert_fail@plt+0xeab8>
   207b4:	mov	r0, r5
   207b8:	mvn	r4, #1
   207bc:	bl	117c0 <free@plt>
   207c0:	b	20698 <__assert_fail@plt+0xeab8>
   207c4:	bl	11838 <__stack_chk_fail@plt>
   207c8:	andeq	lr, r1, r0, asr sl
   207cc:	andeq	r0, r0, ip, lsr #3
   207d0:	andeq	ip, r0, ip, ror #27
   207d4:	andeq	ip, r0, ip, lsl #29
   207d8:	andeq	ip, r0, r8, asr #28
   207dc:	push	{r4, lr}
   207e0:	subs	r4, r0, #0
   207e4:	beq	20800 <__assert_fail@plt+0xec20>
   207e8:	ldr	r0, [r4, #8]
   207ec:	bl	20b98 <__assert_fail@plt+0xefb8>
   207f0:	mov	r0, r4
   207f4:	bl	1d06c <__assert_fail@plt+0xb48c>
   207f8:	subs	r4, r0, #0
   207fc:	bne	207e8 <__assert_fail@plt+0xec08>
   20800:	mov	r0, #0
   20804:	pop	{r4, pc}
   20808:	ldr	r3, [pc, #852]	; 20b64 <__assert_fail@plt+0xef84>
   2080c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20810:	mov	r4, r0
   20814:	ldr	r0, [pc, #844]	; 20b68 <__assert_fail@plt+0xef88>
   20818:	add	r3, pc, r3
   2081c:	sub	sp, sp, #4160	; 0x1040
   20820:	ldrb	r2, [r4, #48]	; 0x30
   20824:	sub	sp, sp, #20
   20828:	mov	r8, r1
   2082c:	ldr	r0, [r3, r0]
   20830:	add	r1, sp, #8192	; 0x2000
   20834:	tst	r2, #1
   20838:	ldr	r9, [r4]
   2083c:	ldr	r3, [r0]
   20840:	str	r0, [sp, #32]
   20844:	str	r3, [r1, #-4020]	; 0xfffff04c
   20848:	bne	208c0 <__assert_fail@plt+0xece0>
   2084c:	ldr	r5, [r4, #16]
   20850:	cmp	r5, #0
   20854:	bne	20b44 <__assert_fail@plt+0xef64>
   20858:	orr	r2, r2, #1
   2085c:	mov	r0, r8
   20860:	strb	r2, [r4, #48]	; 0x30
   20864:	mov	r1, #58	; 0x3a
   20868:	bl	119ac <strchr@plt>
   2086c:	subs	r6, r0, #0
   20870:	beq	20898 <__assert_fail@plt+0xecb8>
   20874:	strb	r5, [r6]
   20878:	ldr	r0, [r4]
   2087c:	bl	1bc60 <__assert_fail@plt+0xa080>
   20880:	str	r0, [sp, #56]	; 0x38
   20884:	bl	119a0 <strlen@plt>
   20888:	add	sl, r0, #2
   2088c:	mov	ip, r0
   20890:	cmp	sl, #4096	; 0x1000
   20894:	bcc	208c8 <__assert_fail@plt+0xece8>
   20898:	mov	r0, #0
   2089c:	ldr	r1, [sp, #32]
   208a0:	add	r3, sp, #8192	; 0x2000
   208a4:	ldr	r2, [r3, #-4020]	; 0xfffff04c
   208a8:	ldr	r3, [r1]
   208ac:	cmp	r2, r3
   208b0:	bne	20b40 <__assert_fail@plt+0xef60>
   208b4:	add	sp, sp, #4160	; 0x1040
   208b8:	add	sp, sp, #20
   208bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208c0:	ldr	r0, [r4, #40]	; 0x28
   208c4:	b	2089c <__assert_fail@plt+0xecbc>
   208c8:	add	r7, sp, #80	; 0x50
   208cc:	ldr	r1, [sp, #56]	; 0x38
   208d0:	sub	r2, r7, #4
   208d4:	mov	r3, #4096	; 0x1000
   208d8:	str	r2, [sp, #40]	; 0x28
   208dc:	add	fp, r0, #1
   208e0:	mov	r2, r0
   208e4:	add	r0, sp, #76	; 0x4c
   208e8:	str	ip, [sp, #28]
   208ec:	bl	11874 <__memcpy_chk@plt>
   208f0:	ldr	r3, [r4, #12]
   208f4:	add	r1, sp, #76	; 0x4c
   208f8:	ldr	ip, [sp, #28]
   208fc:	mov	r2, #47	; 0x2f
   20900:	cmp	r3, #0
   20904:	strb	r2, [r1, ip]
   20908:	strb	r5, [r1, fp]
   2090c:	beq	20aa8 <__assert_fail@plt+0xeec8>
   20910:	ldr	r1, [pc, #596]	; 20b6c <__assert_fail@plt+0xef8c>
   20914:	add	r0, r6, #1
   20918:	add	r2, sp, #68	; 0x44
   2091c:	sub	r3, r7, #12
   20920:	add	r1, pc, r1
   20924:	str	r3, [sp, #36]	; 0x24
   20928:	bl	11808 <__strtok_r@plt>
   2092c:	subs	r8, r0, #0
   20930:	beq	20b34 <__assert_fail@plt+0xef54>
   20934:	ldr	r3, [pc, #564]	; 20b70 <__assert_fail@plt+0xef90>
   20938:	mov	r5, #0
   2093c:	add	r1, sp, #76	; 0x4c
   20940:	sub	r7, r7, #8
   20944:	add	r3, pc, r3
   20948:	add	r1, r1, fp
   2094c:	str	r7, [sp, #48]	; 0x30
   20950:	movw	r6, #61432	; 0xeff8
   20954:	str	r4, [sp, #60]	; 0x3c
   20958:	movt	r6, #65535	; 0xffff
   2095c:	str	r1, [sp, #52]	; 0x34
   20960:	mov	r7, r5
   20964:	str	r5, [sp, #44]	; 0x2c
   20968:	mov	fp, r5
   2096c:	mov	r4, r3
   20970:	b	209d8 <__assert_fail@plt+0xedf8>
   20974:	mov	r1, r8
   20978:	add	r2, r0, #1
   2097c:	ldr	r0, [sp, #52]	; 0x34
   20980:	add	r8, sp, #76	; 0x4c
   20984:	bl	117e4 <memcpy@plt>
   20988:	mov	r0, r9
   2098c:	mov	r1, r8
   20990:	ldr	r2, [sp, #48]	; 0x30
   20994:	bl	20598 <__assert_fail@plt+0xe9b8>
   20998:	cmp	r0, #0
   2099c:	str	r0, [sp, #44]	; 0x2c
   209a0:	blt	20a48 <__assert_fail@plt+0xee68>
   209a4:	add	r2, sp, #4160	; 0x1040
   209a8:	mov	r0, r7
   209ac:	add	r2, r2, #16
   209b0:	add	r5, r5, #1
   209b4:	ldr	r1, [r2, r6]
   209b8:	bl	1d024 <__assert_fail@plt+0xb444>
   209bc:	mov	r1, r4
   209c0:	add	r2, sp, #68	; 0x44
   209c4:	mov	r7, r0
   209c8:	mov	r0, #0
   209cc:	bl	11808 <__strtok_r@plt>
   209d0:	subs	r8, r0, #0
   209d4:	beq	20a34 <__assert_fail@plt+0xee54>
   209d8:	add	r2, sp, #4160	; 0x1040
   209dc:	add	r2, r2, #16
   209e0:	str	fp, [r2, r6]
   209e4:	ldrb	r3, [r8]
   209e8:	cmp	r3, #47	; 0x2f
   209ec:	beq	20988 <__assert_fail@plt+0xeda8>
   209f0:	mov	r0, r8
   209f4:	bl	119a0 <strlen@plt>
   209f8:	add	r3, r0, sl
   209fc:	cmp	r3, #4096	; 0x1000
   20a00:	bcc	20974 <__assert_fail@plt+0xed94>
   20a04:	mov	r0, r9
   20a08:	ldr	r4, [sp, #60]	; 0x3c
   20a0c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   20a10:	cmp	r0, #2
   20a14:	bgt	20af4 <__assert_fail@plt+0xef14>
   20a18:	mov	r0, r7
   20a1c:	bl	207dc <__assert_fail@plt+0xebfc>
   20a20:	ldrb	r3, [r4, #48]	; 0x30
   20a24:	ldr	r0, [sp, #44]	; 0x2c
   20a28:	bfc	r3, #0, #1
   20a2c:	strb	r3, [r4, #48]	; 0x30
   20a30:	b	2089c <__assert_fail@plt+0xecbc>
   20a34:	ldr	r4, [sp, #60]	; 0x3c
   20a38:	mov	r0, r5
   20a3c:	str	r7, [r4, #16]
   20a40:	str	r5, [r4, #40]	; 0x28
   20a44:	b	2089c <__assert_fail@plt+0xecbc>
   20a48:	mov	r0, r9
   20a4c:	ldr	r4, [sp, #60]	; 0x3c
   20a50:	bl	1bc7c <__assert_fail@plt+0xa09c>
   20a54:	cmp	r0, #2
   20a58:	ble	20a18 <__assert_fail@plt+0xee38>
   20a5c:	ldr	r1, [sp, #44]	; 0x2c
   20a60:	rsb	r0, r1, #0
   20a64:	bl	11928 <strerror@plt>
   20a68:	ldr	r2, [pc, #260]	; 20b74 <__assert_fail@plt+0xef94>
   20a6c:	ldr	ip, [pc, #260]	; 20b78 <__assert_fail@plt+0xef98>
   20a70:	mov	r1, #3
   20a74:	add	r2, pc, r2
   20a78:	str	r2, [sp, #4]
   20a7c:	ldr	r2, [pc, #248]	; 20b7c <__assert_fail@plt+0xef9c>
   20a80:	add	ip, pc, ip
   20a84:	str	r9, [sp, #8]
   20a88:	mov	r3, #192	; 0xc0
   20a8c:	str	r8, [sp, #12]
   20a90:	add	r2, pc, r2
   20a94:	str	ip, [sp]
   20a98:	str	r0, [sp, #16]
   20a9c:	mov	r0, r9
   20aa0:	bl	1bbe4 <__assert_fail@plt+0xa004>
   20aa4:	b	20a18 <__assert_fail@plt+0xee38>
   20aa8:	ldrb	r3, [r8]
   20aac:	mov	r0, r8
   20ab0:	cmp	r3, r2
   20ab4:	beq	20ae0 <__assert_fail@plt+0xef00>
   20ab8:	bl	119a0 <strlen@plt>
   20abc:	add	r3, r0, sl
   20ac0:	cmp	r3, #4096	; 0x1000
   20ac4:	bcs	20898 <__assert_fail@plt+0xecb8>
   20ac8:	add	r3, sp, #76	; 0x4c
   20acc:	add	r2, r0, #1
   20ad0:	mov	r1, r8
   20ad4:	add	r0, r3, fp
   20ad8:	bl	117e4 <memcpy@plt>
   20adc:	add	r0, sp, #76	; 0x4c
   20ae0:	bl	11a18 <__strdup@plt>
   20ae4:	cmp	r0, #0
   20ae8:	str	r0, [r4, #12]
   20aec:	bne	20910 <__assert_fail@plt+0xed30>
   20af0:	b	20898 <__assert_fail@plt+0xecb8>
   20af4:	ldr	r2, [pc, #132]	; 20b80 <__assert_fail@plt+0xefa0>
   20af8:	mov	r0, r9
   20afc:	ldr	r3, [sp, #56]	; 0x38
   20b00:	mov	r1, #3
   20b04:	add	r2, pc, r2
   20b08:	ldr	ip, [pc, #116]	; 20b84 <__assert_fail@plt+0xefa4>
   20b0c:	str	r2, [sp, #4]
   20b10:	ldr	r2, [pc, #112]	; 20b88 <__assert_fail@plt+0xefa8>
   20b14:	add	ip, pc, ip
   20b18:	str	r3, [sp, #8]
   20b1c:	mov	r3, #185	; 0xb9
   20b20:	str	r8, [sp, #12]
   20b24:	add	r2, pc, r2
   20b28:	str	ip, [sp]
   20b2c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   20b30:	b	20a18 <__assert_fail@plt+0xee38>
   20b34:	mov	r5, r8
   20b38:	mov	r7, r8
   20b3c:	b	20a38 <__assert_fail@plt+0xee58>
   20b40:	bl	11838 <__stack_chk_fail@plt>
   20b44:	ldr	r0, [pc, #64]	; 20b8c <__assert_fail@plt+0xefac>
   20b48:	mov	r2, #149	; 0x95
   20b4c:	ldr	r1, [pc, #60]	; 20b90 <__assert_fail@plt+0xefb0>
   20b50:	ldr	r3, [pc, #60]	; 20b94 <__assert_fail@plt+0xefb4>
   20b54:	add	r0, pc, r0
   20b58:	add	r1, pc, r1
   20b5c:	add	r3, pc, r3
   20b60:	bl	11be0 <__assert_fail@plt>
   20b64:	andeq	lr, r1, r0, ror #15
   20b68:	andeq	r0, r0, ip, lsr #3
   20b6c:	andeq	fp, r0, r4, lsr #15
   20b70:	andeq	fp, r0, r0, lsl #15
   20b74:	andeq	ip, r0, r4, lsl ip
   20b78:	andeq	sp, r0, r8, asr r1
   20b7c:	andeq	ip, r0, ip, asr #22
   20b80:	andeq	ip, r0, r0, ror #22
   20b84:	andeq	sp, r0, r4, asr #1
   20b88:			; <UNDEFINED> instruction: 0x0000cab8
   20b8c:	strdeq	ip, [r0], -r8
   20b90:	andeq	ip, r0, r4, lsl #21
   20b94:	andeq	ip, r0, r0, lsl #31
   20b98:	push	{r4, lr}
   20b9c:	subs	r4, r0, #0
   20ba0:	beq	20c08 <__assert_fail@plt+0xf028>
   20ba4:	ldr	r3, [r4, #44]	; 0x2c
   20ba8:	sub	r3, r3, #1
   20bac:	str	r3, [r4, #44]	; 0x2c
   20bb0:	cmp	r3, #0
   20bb4:	ble	20bc0 <__assert_fail@plt+0xefe0>
   20bb8:	mov	r0, r4
   20bbc:	pop	{r4, pc}
   20bc0:	ldr	r0, [r4]
   20bc4:	mov	r1, r4
   20bc8:	ldr	r2, [r4, #4]
   20bcc:	bl	1c208 <__assert_fail@plt+0xa628>
   20bd0:	ldr	r0, [r4, #16]
   20bd4:	bl	207dc <__assert_fail@plt+0xebfc>
   20bd8:	ldr	r0, [r4, #36]	; 0x24
   20bdc:	cmp	r0, #0
   20be0:	beq	20be8 <__assert_fail@plt+0xf008>
   20be4:	bl	24490 <__assert_fail@plt+0x128b0>
   20be8:	ldr	r0, [r4]
   20bec:	bl	1cbd8 <__assert_fail@plt+0xaff8>
   20bf0:	ldr	r0, [r4, #20]
   20bf4:	bl	117c0 <free@plt>
   20bf8:	ldr	r0, [r4, #12]
   20bfc:	bl	117c0 <free@plt>
   20c00:	mov	r0, r4
   20c04:	bl	117c0 <free@plt>
   20c08:	mov	r0, #0
   20c0c:	pop	{r4, pc}
   20c10:	ldr	r3, [pc, #460]	; 20de4 <__assert_fail@plt+0xf204>
   20c14:	push	{r4, r5, r6, r7, r8, lr}
   20c18:	mov	r4, r0
   20c1c:	ldr	r0, [pc, #452]	; 20de8 <__assert_fail@plt+0xf208>
   20c20:	add	r3, pc, r3
   20c24:	sub	sp, sp, #4096	; 0x1000
   20c28:	mov	r6, r2
   20c2c:	sub	sp, sp, #16
   20c30:	cmp	r1, #0
   20c34:	cmpne	r4, #0
   20c38:	ldr	r5, [r3, r0]
   20c3c:	add	r2, sp, #8192	; 0x2000
   20c40:	ldr	r3, [r5]
   20c44:	str	r3, [r2, #-4084]	; 0xfffff00c
   20c48:	beq	20dd0 <__assert_fail@plt+0xf1f0>
   20c4c:	cmp	r6, #0
   20c50:	beq	20c60 <__assert_fail@plt+0xf080>
   20c54:	ldr	r2, [r6]
   20c58:	cmp	r2, #0
   20c5c:	beq	20ccc <__assert_fail@plt+0xf0ec>
   20c60:	mov	r0, r4
   20c64:	bl	1bc7c <__assert_fail@plt+0xa09c>
   20c68:	cmp	r0, #2
   20c6c:	mvnle	r0, #37	; 0x25
   20c70:	bgt	20c94 <__assert_fail@plt+0xf0b4>
   20c74:	add	r3, sp, #8192	; 0x2000
   20c78:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   20c7c:	ldr	r3, [r5]
   20c80:	cmp	r2, r3
   20c84:	bne	20de0 <__assert_fail@plt+0xf200>
   20c88:	add	sp, sp, #4096	; 0x1000
   20c8c:	add	sp, sp, #16
   20c90:	pop	{r4, r5, r6, r7, r8, pc}
   20c94:	ldr	lr, [pc, #336]	; 20dec <__assert_fail@plt+0xf20c>
   20c98:	mov	r0, r4
   20c9c:	ldr	ip, [pc, #332]	; 20df0 <__assert_fail@plt+0xf210>
   20ca0:	mov	r1, #3
   20ca4:	ldr	r2, [pc, #328]	; 20df4 <__assert_fail@plt+0xf214>
   20ca8:	add	lr, pc, lr
   20cac:	add	ip, pc, ip
   20cb0:	movw	r3, #547	; 0x223
   20cb4:	add	r2, pc, r2
   20cb8:	str	lr, [sp]
   20cbc:	str	ip, [sp, #4]
   20cc0:	bl	1bbe4 <__assert_fail@plt+0xa004>
   20cc4:	mvn	r0, #37	; 0x25
   20cc8:	b	20c74 <__assert_fail@plt+0xf094>
   20ccc:	add	r7, sp, #12
   20cd0:	mov	r0, r1
   20cd4:	mov	r1, r7
   20cd8:	bl	1b1fc <__assert_fail@plt+0x961c>
   20cdc:	cmp	r0, #0
   20ce0:	blt	20dd8 <__assert_fail@plt+0xf1f8>
   20ce4:	mov	r0, r4
   20ce8:	mov	r1, r7
   20cec:	mov	r2, r6
   20cf0:	bl	1c604 <__assert_fail@plt+0xaa24>
   20cf4:	subs	r8, r0, #0
   20cf8:	blt	20db8 <__assert_fail@plt+0xf1d8>
   20cfc:	ldr	r3, [r6]
   20d00:	cmp	r3, #0
   20d04:	beq	20d10 <__assert_fail@plt+0xf130>
   20d08:	mov	r0, r8
   20d0c:	b	20c74 <__assert_fail@plt+0xf094>
   20d10:	mov	r0, r4
   20d14:	mov	r1, r7
   20d18:	mov	r2, r6
   20d1c:	bl	1c4e0 <__assert_fail@plt+0xa900>
   20d20:	subs	r8, r0, #0
   20d24:	blt	20db8 <__assert_fail@plt+0xf1d8>
   20d28:	ldr	r3, [r6]
   20d2c:	cmp	r3, #0
   20d30:	bne	20d08 <__assert_fail@plt+0xf128>
   20d34:	mov	r0, r4
   20d38:	mov	r1, r7
   20d3c:	mov	r2, r6
   20d40:	bl	1c214 <__assert_fail@plt+0xa634>
   20d44:	subs	r8, r0, #0
   20d48:	blt	20db8 <__assert_fail@plt+0xf1d8>
   20d4c:	ldr	r3, [r6]
   20d50:	cmp	r3, #0
   20d54:	bne	20d08 <__assert_fail@plt+0xf128>
   20d58:	mov	r0, r4
   20d5c:	mov	r1, r7
   20d60:	mov	r2, r6
   20d64:	bl	1c78c <__assert_fail@plt+0xabac>
   20d68:	subs	r8, r0, #0
   20d6c:	blt	20db8 <__assert_fail@plt+0xf1d8>
   20d70:	ldr	r3, [r6]
   20d74:	cmp	r3, #0
   20d78:	bne	20d08 <__assert_fail@plt+0xf128>
   20d7c:	mov	r0, r4
   20d80:	mov	r1, r7
   20d84:	mov	r2, r6
   20d88:	bl	1c264 <__assert_fail@plt+0xa684>
   20d8c:	subs	r8, r0, #0
   20d90:	blt	20db8 <__assert_fail@plt+0xf1d8>
   20d94:	ldr	r3, [r6]
   20d98:	cmp	r3, #0
   20d9c:	bne	20d08 <__assert_fail@plt+0xf128>
   20da0:	mov	r0, r4
   20da4:	mov	r1, r7
   20da8:	mov	r2, r6
   20dac:	bl	1c274 <__assert_fail@plt+0xa694>
   20db0:	subs	r8, r0, #0
   20db4:	bge	20d08 <__assert_fail@plt+0xf128>
   20db8:	ldr	r0, [r6]
   20dbc:	bl	207dc <__assert_fail@plt+0xebfc>
   20dc0:	mov	r3, #0
   20dc4:	mov	r0, r8
   20dc8:	str	r3, [r6]
   20dcc:	b	20c74 <__assert_fail@plt+0xf094>
   20dd0:	mvn	r0, #1
   20dd4:	b	20c74 <__assert_fail@plt+0xf094>
   20dd8:	mvn	r0, #21
   20ddc:	b	20c74 <__assert_fail@plt+0xf094>
   20de0:	bl	11838 <__stack_chk_fail@plt>
   20de4:	ldrdeq	lr, [r1], -r8
   20de8:	andeq	r0, r0, ip, lsr #3
   20dec:	andeq	ip, r0, r4, ror #17
   20df0:	strdeq	ip, [r0], -r8
   20df4:	andeq	ip, r0, r8, lsr #18
   20df8:	ldr	r3, [pc, #280]	; 20f18 <__assert_fail@plt+0xf338>
   20dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e00:	subs	r9, r2, #0
   20e04:	ldr	r2, [pc, #272]	; 20f1c <__assert_fail@plt+0xf33c>
   20e08:	add	r3, pc, r3
   20e0c:	sub	sp, sp, #44	; 0x2c
   20e10:	mov	r8, r0
   20e14:	ldr	r2, [r3, r2]
   20e18:	ldr	r3, [r2]
   20e1c:	str	r2, [sp, #16]
   20e20:	str	r3, [sp, #36]	; 0x24
   20e24:	beq	20f0c <__assert_fail@plt+0xf32c>
   20e28:	ldr	r2, [pc, #240]	; 20f20 <__assert_fail@plt+0xf340>
   20e2c:	sub	r5, r1, #4
   20e30:	ldr	r3, [pc, #236]	; 20f24 <__assert_fail@plt+0xf344>
   20e34:	mov	r4, #0
   20e38:	ldr	r1, [pc, #232]	; 20f28 <__assert_fail@plt+0xf348>
   20e3c:	add	r2, pc, r2
   20e40:	add	r3, pc, r3
   20e44:	str	r2, [sp, #20]
   20e48:	add	r1, pc, r1
   20e4c:	str	r3, [sp, #24]
   20e50:	str	r1, [sp, #28]
   20e54:	add	fp, sp, #32
   20e58:	mov	r7, r4
   20e5c:	mov	sl, r4
   20e60:	b	20e88 <__assert_fail@plt+0xf2a8>
   20e64:	ldr	r1, [sp, #32]
   20e68:	cmp	r1, #0
   20e6c:	beq	20e7c <__assert_fail@plt+0xf29c>
   20e70:	mov	r0, r7
   20e74:	bl	1cfe4 <__assert_fail@plt+0xb404>
   20e78:	mov	r7, r0
   20e7c:	add	r4, r4, #1
   20e80:	cmp	r4, r9
   20e84:	beq	20eec <__assert_fail@plt+0xf30c>
   20e88:	ldr	r6, [r5, #4]!
   20e8c:	mov	r0, r8
   20e90:	mov	r2, fp
   20e94:	str	sl, [sp, #32]
   20e98:	mov	r1, r6
   20e9c:	bl	20c10 <__assert_fail@plt+0xf030>
   20ea0:	cmp	r0, #0
   20ea4:	bge	20e64 <__assert_fail@plt+0xf284>
   20ea8:	mov	r0, r8
   20eac:	bl	1bc7c <__assert_fail@plt+0xa09c>
   20eb0:	cmp	r0, #2
   20eb4:	ble	20e7c <__assert_fail@plt+0xf29c>
   20eb8:	ldr	r2, [sp, #24]
   20ebc:	mov	r0, r8
   20ec0:	ldr	r3, [sp, #28]
   20ec4:	mov	r1, #3
   20ec8:	str	r6, [sp, #8]
   20ecc:	add	r4, r4, #1
   20ed0:	str	r2, [sp]
   20ed4:	str	r3, [sp, #4]
   20ed8:	movw	r3, #1497	; 0x5d9
   20edc:	ldr	r2, [sp, #20]
   20ee0:	bl	1bbe4 <__assert_fail@plt+0xa004>
   20ee4:	cmp	r4, r9
   20ee8:	bne	20e88 <__assert_fail@plt+0xf2a8>
   20eec:	ldr	r1, [sp, #16]
   20ef0:	mov	r0, r7
   20ef4:	ldr	r2, [sp, #36]	; 0x24
   20ef8:	ldr	r3, [r1]
   20efc:	cmp	r2, r3
   20f00:	bne	20f14 <__assert_fail@plt+0xf334>
   20f04:	add	sp, sp, #44	; 0x2c
   20f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f0c:	mov	r7, r9
   20f10:	b	20eec <__assert_fail@plt+0xf30c>
   20f14:	bl	11838 <__stack_chk_fail@plt>
   20f18:	strdeq	lr, [r1], -r0
   20f1c:	andeq	r0, r0, ip, lsr #3
   20f20:	andeq	ip, r0, r0, lsr #15
   20f24:	ldrdeq	ip, [r0], -r4
   20f28:	andeq	ip, r0, r8, lsl #17
   20f2c:	push	{r4, r5, r6, lr}
   20f30:	subs	r6, r0, #0
   20f34:	sub	sp, sp, #8
   20f38:	beq	20fbc <__assert_fail@plt+0xf3dc>
   20f3c:	ldrb	r3, [r6, #48]	; 0x30
   20f40:	tst	r3, #1
   20f44:	beq	20fc8 <__assert_fail@plt+0xf3e8>
   20f48:	ldr	r4, [r6, #16]
   20f4c:	cmp	r4, #0
   20f50:	beq	20fbc <__assert_fail@plt+0xf3dc>
   20f54:	mov	r5, #0
   20f58:	b	20f64 <__assert_fail@plt+0xf384>
   20f5c:	cmp	r4, #0
   20f60:	beq	20f94 <__assert_fail@plt+0xf3b4>
   20f64:	ldr	r0, [r4, #8]
   20f68:	bl	202c4 <__assert_fail@plt+0xe6e4>
   20f6c:	mov	r1, r0
   20f70:	mov	r0, r5
   20f74:	bl	1cf3c <__assert_fail@plt+0xb35c>
   20f78:	cmp	r0, #0
   20f7c:	beq	20f9c <__assert_fail@plt+0xf3bc>
   20f80:	ldr	r4, [r4]
   20f84:	mov	r5, r0
   20f88:	ldr	r2, [r6, #16]
   20f8c:	cmp	r4, r2
   20f90:	bne	20f5c <__assert_fail@plt+0xf37c>
   20f94:	add	sp, sp, #8
   20f98:	pop	{r4, r5, r6, pc}
   20f9c:	ldr	r0, [r4, #8]
   20fa0:	bl	20b98 <__assert_fail@plt+0xefb8>
   20fa4:	ldr	r0, [r6]
   20fa8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   20fac:	cmp	r0, #2
   20fb0:	bgt	20ff4 <__assert_fail@plt+0xf414>
   20fb4:	mov	r0, r5
   20fb8:	bl	207dc <__assert_fail@plt+0xebfc>
   20fbc:	mov	r0, #0
   20fc0:	add	sp, sp, #8
   20fc4:	pop	{r4, r5, r6, pc}
   20fc8:	ldr	r0, [r6]
   20fcc:	ldr	r1, [r6, #8]
   20fd0:	bl	1c400 <__assert_fail@plt+0xa820>
   20fd4:	subs	r4, r0, #0
   20fd8:	beq	20f48 <__assert_fail@plt+0xf368>
   20fdc:	mov	r0, r6
   20fe0:	mov	r1, r4
   20fe4:	bl	20808 <__assert_fail@plt+0xec28>
   20fe8:	mov	r0, r4
   20fec:	bl	117c0 <free@plt>
   20ff0:	b	20f48 <__assert_fail@plt+0xf368>
   20ff4:	ldr	lr, [pc, #44]	; 21028 <__assert_fail@plt+0xf448>
   20ff8:	mov	r1, #3
   20ffc:	ldr	ip, [pc, #40]	; 2102c <__assert_fail@plt+0xf44c>
   21000:	movw	r3, #683	; 0x2ab
   21004:	ldr	r2, [pc, #36]	; 21030 <__assert_fail@plt+0xf450>
   21008:	add	lr, pc, lr
   2100c:	ldr	r0, [r6]
   21010:	add	ip, pc, ip
   21014:	add	r2, pc, r2
   21018:	str	lr, [sp]
   2101c:	str	ip, [sp, #4]
   21020:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21024:	b	20fb4 <__assert_fail@plt+0xf3d4>
   21028:	andeq	ip, r0, ip, lsl fp
   2102c:	strdeq	sl, [r0], -r0
   21030:	andeq	ip, r0, r8, asr #11
   21034:	subs	r3, r0, #0
   21038:	bxeq	lr
   2103c:	ldr	r0, [r3, #8]
   21040:	b	202c4 <__assert_fail@plt+0xe6e4>
   21044:	cmp	r0, #0
   21048:	ldrne	r0, [r0, #8]
   2104c:	bx	lr
   21050:	push	{r3, r4, r5, lr}
   21054:	subs	r4, r0, #0
   21058:	beq	210a4 <__assert_fail@plt+0xf4c4>
   2105c:	ldr	r0, [r4, #12]
   21060:	cmp	r0, #0
   21064:	popne	{r3, r4, r5, pc}
   21068:	ldrb	r3, [r4, #48]	; 0x30
   2106c:	tst	r3, #1
   21070:	popne	{r3, r4, r5, pc}
   21074:	ldr	r0, [r4]
   21078:	ldr	r1, [r4, #8]
   2107c:	bl	1c400 <__assert_fail@plt+0xa820>
   21080:	subs	r5, r0, #0
   21084:	beq	210ac <__assert_fail@plt+0xf4cc>
   21088:	mov	r1, r5
   2108c:	mov	r0, r4
   21090:	bl	20808 <__assert_fail@plt+0xec28>
   21094:	mov	r0, r5
   21098:	bl	117c0 <free@plt>
   2109c:	ldr	r0, [r4, #12]
   210a0:	pop	{r3, r4, r5, pc}
   210a4:	mov	r0, r4
   210a8:	pop	{r3, r4, r5, pc}
   210ac:	mov	r0, r5
   210b0:	pop	{r3, r4, r5, pc}
   210b4:	ldr	r3, [r0, #36]	; 0x24
   210b8:	push	{r4, lr}
   210bc:	cmp	r3, #0
   210c0:	mov	r4, r0
   210c4:	movne	r0, r3
   210c8:	beq	210d4 <__assert_fail@plt+0xf4f4>
   210cc:	pop	{r4, lr}
   210d0:	b	24280 <__assert_fail@plt+0x126a0>
   210d4:	bl	21050 <__assert_fail@plt+0xf470>
   210d8:	subs	r1, r0, #0
   210dc:	beq	210fc <__assert_fail@plt+0xf51c>
   210e0:	ldr	r0, [r4]
   210e4:	bl	242a8 <__assert_fail@plt+0x126c8>
   210e8:	cmp	r0, #0
   210ec:	str	r0, [r4, #36]	; 0x24
   210f0:	bne	210cc <__assert_fail@plt+0xf4ec>
   210f4:	mov	r0, #0
   210f8:	pop	{r4, pc}
   210fc:	bl	119f4 <__errno_location@plt>
   21100:	mov	r3, #2
   21104:	str	r3, [r0]
   21108:	b	210f4 <__assert_fail@plt+0xf514>
   2110c:	push	{r4, r5, lr}
   21110:	subs	r4, r0, #0
   21114:	sub	sp, sp, #20
   21118:	beq	2119c <__assert_fail@plt+0xf5bc>
   2111c:	and	r1, r1, #512	; 0x200
   21120:	ldr	r0, [r4, #8]
   21124:	orr	r1, r1, #2048	; 0x800
   21128:	bl	11ad8 <delete_module@plt>
   2112c:	cmp	r0, #0
   21130:	bne	2113c <__assert_fail@plt+0xf55c>
   21134:	add	sp, sp, #20
   21138:	pop	{r4, r5, pc}
   2113c:	bl	119f4 <__errno_location@plt>
   21140:	ldr	r5, [r0]
   21144:	ldr	r0, [r4]
   21148:	bl	1bc7c <__assert_fail@plt+0xa09c>
   2114c:	rsb	r5, r5, #0
   21150:	cmp	r0, #2
   21154:	movle	r0, r5
   21158:	ble	21134 <__assert_fail@plt+0xf554>
   2115c:	ldr	ip, [pc, #64]	; 211a4 <__assert_fail@plt+0xf5c4>
   21160:	mov	r1, #3
   21164:	ldr	r2, [pc, #60]	; 211a8 <__assert_fail@plt+0xf5c8>
   21168:	movw	r3, #793	; 0x319
   2116c:	ldr	r0, [r4]
   21170:	add	ip, pc, ip
   21174:	add	r2, pc, r2
   21178:	str	ip, [sp]
   2117c:	str	r2, [sp, #4]
   21180:	ldr	ip, [r4, #8]
   21184:	ldr	r2, [pc, #32]	; 211ac <__assert_fail@plt+0xf5cc>
   21188:	str	ip, [sp, #8]
   2118c:	add	r2, pc, r2
   21190:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21194:	mov	r0, r5
   21198:	b	21134 <__assert_fail@plt+0xf554>
   2119c:	mvn	r0, #1
   211a0:	b	21134 <__assert_fail@plt+0xf554>
   211a4:	andeq	ip, r0, r8, lsl #20
   211a8:	muleq	r0, r8, r5
   211ac:	andeq	ip, r0, r0, asr r4
   211b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   211b4:	subs	r7, r2, #0
   211b8:	sub	sp, sp, #20
   211bc:	mov	r4, r0
   211c0:	mov	r5, r1
   211c4:	beq	21330 <__assert_fail@plt+0xf750>
   211c8:	cmp	r4, #0
   211cc:	beq	21458 <__assert_fail@plt+0xf878>
   211d0:	mov	r0, r4
   211d4:	bl	21050 <__assert_fail@plt+0xf470>
   211d8:	subs	r6, r0, #0
   211dc:	ldr	r0, [r4]
   211e0:	beq	2133c <__assert_fail@plt+0xf75c>
   211e4:	mov	r1, r6
   211e8:	bl	242a8 <__assert_fail@plt+0x126c8>
   211ec:	cmp	r0, #0
   211f0:	str	r0, [r4, #36]	; 0x24
   211f4:	beq	2131c <__assert_fail@plt+0xf73c>
   211f8:	bl	24480 <__assert_fail@plt+0x128a0>
   211fc:	cmp	r0, #0
   21200:	beq	21258 <__assert_fail@plt+0xf678>
   21204:	tst	r5, #1
   21208:	ldr	r0, [r4, #36]	; 0x24
   2120c:	movne	r8, #2
   21210:	moveq	r8, #0
   21214:	tst	r5, #2
   21218:	orrne	r8, r8, #1
   2121c:	bl	24488 <__assert_fail@plt+0x128a8>
   21220:	mov	r2, r7
   21224:	mov	r3, r8
   21228:	mov	r1, r0
   2122c:	movw	r0, #379	; 0x17b
   21230:	bl	11994 <syscall@plt>
   21234:	subs	r8, r0, #0
   21238:	bne	21248 <__assert_fail@plt+0xf668>
   2123c:	mov	r0, r8
   21240:	add	sp, sp, #20
   21244:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21248:	bl	119f4 <__errno_location@plt>
   2124c:	ldr	r3, [r0]
   21250:	cmp	r3, #38	; 0x26
   21254:	bne	212b8 <__assert_fail@plt+0xf6d8>
   21258:	tst	r5, #3
   2125c:	beq	21290 <__assert_fail@plt+0xf6b0>
   21260:	ldr	r0, [r4, #36]	; 0x24
   21264:	bl	24280 <__assert_fail@plt+0x126a0>
   21268:	subs	r8, r0, #0
   2126c:	beq	2131c <__assert_fail@plt+0xf73c>
   21270:	tst	r5, #2
   21274:	bne	213f0 <__assert_fail@plt+0xf810>
   21278:	tst	r5, #1
   2127c:	bne	2138c <__assert_fail@plt+0xf7ac>
   21280:	mov	r0, r8
   21284:	bl	24e68 <__assert_fail@plt+0x13288>
   21288:	mov	r5, r0
   2128c:	b	2129c <__assert_fail@plt+0xf6bc>
   21290:	ldr	r0, [r4, #36]	; 0x24
   21294:	bl	24470 <__assert_fail@plt+0x12890>
   21298:	mov	r5, r0
   2129c:	ldr	r0, [r4, #36]	; 0x24
   212a0:	bl	24478 <__assert_fail@plt+0x12898>
   212a4:	mov	r2, r7
   212a8:	mov	r1, r0
   212ac:	mov	r0, r5
   212b0:	bl	11b2c <init_module@plt>
   212b4:	mov	r8, r0
   212b8:	cmp	r8, #0
   212bc:	bge	2123c <__assert_fail@plt+0xf65c>
   212c0:	bl	119f4 <__errno_location@plt>
   212c4:	ldr	r5, [r0]
   212c8:	ldr	r0, [r4]
   212cc:	bl	1bc7c <__assert_fail@plt+0xa09c>
   212d0:	rsb	r5, r5, #0
   212d4:	cmp	r0, #5
   212d8:	movle	r0, r5
   212dc:	ble	21240 <__assert_fail@plt+0xf660>
   212e0:	ldr	r2, [pc, #376]	; 21460 <__assert_fail@plt+0xf880>
   212e4:	mov	r1, #6
   212e8:	ldr	r0, [r4]
   212ec:	mov	r3, #884	; 0x374
   212f0:	add	r2, pc, r2
   212f4:	ldr	ip, [pc, #360]	; 21464 <__assert_fail@plt+0xf884>
   212f8:	str	r2, [sp, #4]
   212fc:	ldr	r2, [pc, #356]	; 21468 <__assert_fail@plt+0xf888>
   21300:	add	ip, pc, ip
   21304:	str	r6, [sp, #8]
   21308:	str	ip, [sp]
   2130c:	add	r2, pc, r2
   21310:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21314:	mov	r0, r5
   21318:	b	21240 <__assert_fail@plt+0xf660>
   2131c:	bl	119f4 <__errno_location@plt>
   21320:	ldr	r0, [r0]
   21324:	rsb	r0, r0, #0
   21328:	add	sp, sp, #20
   2132c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21330:	ldr	r7, [pc, #308]	; 2146c <__assert_fail@plt+0xf88c>
   21334:	add	r7, pc, r7
   21338:	b	211c8 <__assert_fail@plt+0xf5e8>
   2133c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   21340:	cmp	r0, #2
   21344:	mvnle	r0, #37	; 0x25
   21348:	ble	21240 <__assert_fail@plt+0xf660>
   2134c:	ldr	ip, [pc, #284]	; 21470 <__assert_fail@plt+0xf890>
   21350:	mov	r1, #3
   21354:	ldr	r2, [pc, #280]	; 21474 <__assert_fail@plt+0xf894>
   21358:	mov	r3, #832	; 0x340
   2135c:	ldr	r0, [r4]
   21360:	add	ip, pc, ip
   21364:	add	r2, pc, r2
   21368:	str	ip, [sp]
   2136c:	str	r2, [sp, #4]
   21370:	ldr	ip, [r4, #8]
   21374:	ldr	r2, [pc, #252]	; 21478 <__assert_fail@plt+0xf898>
   21378:	str	ip, [sp, #8]
   2137c:	add	r2, pc, r2
   21380:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21384:	mvn	r0, #37	; 0x25
   21388:	b	21240 <__assert_fail@plt+0xf660>
   2138c:	mov	r0, r8
   21390:	bl	262cc <__assert_fail@plt+0x146ec>
   21394:	subs	r5, r0, #0
   21398:	bge	21280 <__assert_fail@plt+0xf6a0>
   2139c:	ldr	r0, [r4]
   213a0:	bl	1bc7c <__assert_fail@plt+0xa09c>
   213a4:	cmp	r0, #5
   213a8:	ble	21280 <__assert_fail@plt+0xf6a0>
   213ac:	rsb	r0, r5, #0
   213b0:	ldr	r5, [r4]
   213b4:	bl	11928 <strerror@plt>
   213b8:	ldr	lr, [pc, #188]	; 2147c <__assert_fail@plt+0xf89c>
   213bc:	ldr	ip, [pc, #188]	; 21480 <__assert_fail@plt+0xf8a0>
   213c0:	mov	r1, #6
   213c4:	ldr	r2, [pc, #184]	; 21484 <__assert_fail@plt+0xf8a4>
   213c8:	add	lr, pc, lr
   213cc:	add	ip, pc, ip
   213d0:	movw	r3, #871	; 0x367
   213d4:	add	r2, pc, r2
   213d8:	str	lr, [sp]
   213dc:	str	ip, [sp, #4]
   213e0:	str	r0, [sp, #8]
   213e4:	mov	r0, r5
   213e8:	bl	1bbe4 <__assert_fail@plt+0xa004>
   213ec:	b	21280 <__assert_fail@plt+0xf6a0>
   213f0:	ldr	r1, [pc, #144]	; 21488 <__assert_fail@plt+0xf8a8>
   213f4:	add	r1, pc, r1
   213f8:	bl	25aec <__assert_fail@plt+0x13f0c>
   213fc:	subs	r9, r0, #0
   21400:	bge	21278 <__assert_fail@plt+0xf698>
   21404:	ldr	r0, [r4]
   21408:	bl	1bc7c <__assert_fail@plt+0xa09c>
   2140c:	cmp	r0, #5
   21410:	ble	21278 <__assert_fail@plt+0xf698>
   21414:	rsb	r0, r9, #0
   21418:	ldr	r9, [r4]
   2141c:	bl	11928 <strerror@plt>
   21420:	ldr	lr, [pc, #100]	; 2148c <__assert_fail@plt+0xf8ac>
   21424:	ldr	ip, [pc, #100]	; 21490 <__assert_fail@plt+0xf8b0>
   21428:	mov	r1, #6
   2142c:	ldr	r2, [pc, #96]	; 21494 <__assert_fail@plt+0xf8b4>
   21430:	add	lr, pc, lr
   21434:	add	ip, pc, ip
   21438:	movw	r3, #865	; 0x361
   2143c:	add	r2, pc, r2
   21440:	str	lr, [sp]
   21444:	str	ip, [sp, #4]
   21448:	str	r0, [sp, #8]
   2144c:	mov	r0, r9
   21450:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21454:	b	21278 <__assert_fail@plt+0xf698>
   21458:	mvn	r0, #1
   2145c:	b	21240 <__assert_fail@plt+0xf660>
   21460:	andeq	ip, r0, r8, lsr #9
   21464:	muleq	r0, r4, r8
   21468:	ldrdeq	ip, [r0], -r0
   2146c:	andeq	fp, r0, r0, lsl #1
   21470:	andeq	ip, r0, r4, lsr r8
   21474:	andeq	ip, r0, r4, asr #7
   21478:	andeq	ip, r0, r0, ror #4
   2147c:	andeq	ip, r0, ip, asr #15
   21480:	andeq	ip, r0, ip, lsr #7
   21484:	andeq	ip, r0, r8, lsl #4
   21488:	andeq	ip, r0, r8, asr r3
   2148c:	andeq	ip, r0, r4, ror #14
   21490:	andeq	ip, r0, r4, lsr #6
   21494:	andeq	ip, r0, r0, lsr #3
   21498:	cmp	r3, #0
   2149c:	cmpne	r0, #0
   214a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   214a4:	movne	r0, #0
   214a8:	moveq	r0, #1
   214ac:	mov	r6, r3
   214b0:	mov	r8, r2
   214b4:	beq	21568 <__assert_fail@plt+0xf988>
   214b8:	cmp	r2, #0
   214bc:	str	r0, [r3]
   214c0:	andne	r9, r1, #1
   214c4:	andne	sl, r1, #2
   214c8:	movne	r4, r2
   214cc:	bne	21520 <__assert_fail@plt+0xf940>
   214d0:	b	2154c <__assert_fail@plt+0xf96c>
   214d4:	cmp	sl, #0
   214d8:	beq	214ec <__assert_fail@plt+0xf90c>
   214dc:	mov	r0, r5
   214e0:	bl	20280 <__assert_fail@plt+0xe6a0>
   214e4:	cmp	r0, #0
   214e8:	bne	2150c <__assert_fail@plt+0xf92c>
   214ec:	ldr	r0, [r6]
   214f0:	mov	r1, r5
   214f4:	bl	1cf3c <__assert_fail@plt+0xb35c>
   214f8:	subs	r7, r0, #0
   214fc:	beq	21554 <__assert_fail@plt+0xf974>
   21500:	str	r7, [r6]
   21504:	mov	r0, r5
   21508:	bl	202c4 <__assert_fail@plt+0xe6e4>
   2150c:	ldr	r4, [r4]
   21510:	cmp	r4, r8
   21514:	beq	2154c <__assert_fail@plt+0xf96c>
   21518:	cmp	r4, #0
   2151c:	beq	2154c <__assert_fail@plt+0xf96c>
   21520:	cmp	r9, #0
   21524:	ldr	r5, [r4, #8]
   21528:	beq	214d4 <__assert_fail@plt+0xf8f4>
   2152c:	mov	r1, r5
   21530:	ldr	r0, [r1], #8
   21534:	bl	201f0 <__assert_fail@plt+0xe610>
   21538:	cmp	r0, #0
   2153c:	beq	214d4 <__assert_fail@plt+0xf8f4>
   21540:	ldr	r4, [r4]
   21544:	cmp	r4, r8
   21548:	bne	21518 <__assert_fail@plt+0xf938>
   2154c:	mov	r0, #0
   21550:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21554:	ldr	r0, [r6]
   21558:	bl	207dc <__assert_fail@plt+0xebfc>
   2155c:	str	r7, [r6]
   21560:	mvn	r0, #11
   21564:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21568:	mvn	r0, #1
   2156c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21574:	subs	r5, r0, #0
   21578:	sub	sp, sp, #12
   2157c:	beq	216b0 <__assert_fail@plt+0xfad0>
   21580:	ldrb	r6, [r5, #48]	; 0x30
   21584:	ubfx	r6, r6, #1, #1
   21588:	cmp	r6, #0
   2158c:	beq	2159c <__assert_fail@plt+0xf9bc>
   21590:	ldr	r0, [r5, #20]
   21594:	add	sp, sp, #12
   21598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2159c:	ldr	r0, [r5]
   215a0:	bl	1cf34 <__assert_fail@plt+0xb354>
   215a4:	ldr	r4, [r0, #12]
   215a8:	mov	r7, r0
   215ac:	cmp	r4, #0
   215b0:	beq	216f0 <__assert_fail@plt+0xfb10>
   215b4:	mov	r8, r6
   215b8:	mov	r9, r6
   215bc:	b	215d8 <__assert_fail@plt+0xf9f8>
   215c0:	ldr	r4, [r4]
   215c4:	ldr	r3, [r7, #12]
   215c8:	cmp	r4, r3
   215cc:	beq	2167c <__assert_fail@plt+0xfa9c>
   215d0:	cmp	r4, #0
   215d4:	beq	2167c <__assert_fail@plt+0xfa9c>
   215d8:	mov	r0, r4
   215dc:	bl	1d17c <__assert_fail@plt+0xb59c>
   215e0:	ldr	r1, [r5, #8]
   215e4:	mov	fp, r0
   215e8:	bl	11754 <strcmp@plt>
   215ec:	cmp	r0, #0
   215f0:	mov	r0, fp
   215f4:	beq	21610 <__assert_fail@plt+0xfa30>
   215f8:	ldr	r1, [r5, #32]
   215fc:	cmp	r1, #0
   21600:	beq	215c0 <__assert_fail@plt+0xf9e0>
   21604:	bl	11754 <strcmp@plt>
   21608:	cmp	r0, #0
   2160c:	bne	215c0 <__assert_fail@plt+0xf9e0>
   21610:	mov	r0, r4
   21614:	bl	1d170 <__assert_fail@plt+0xb590>
   21618:	mov	fp, r0
   2161c:	bl	119a0 <strlen@plt>
   21620:	subs	sl, r0, #0
   21624:	beq	215c0 <__assert_fail@plt+0xf9e0>
   21628:	add	r1, r6, #2
   2162c:	mov	r0, r8
   21630:	add	r1, r1, sl
   21634:	bl	11844 <realloc@plt>
   21638:	mov	r1, fp
   2163c:	mov	r2, sl
   21640:	subs	fp, r0, #0
   21644:	beq	21698 <__assert_fail@plt+0xfab8>
   21648:	cmp	r6, #0
   2164c:	mov	r8, fp
   21650:	movne	r3, #32
   21654:	strbne	r3, [fp, r6]
   21658:	addne	r6, r6, #1
   2165c:	add	r0, fp, r6
   21660:	add	r6, r6, sl
   21664:	bl	117e4 <memcpy@plt>
   21668:	strb	r9, [fp, r6]
   2166c:	ldr	r4, [r4]
   21670:	ldr	r3, [r7, #12]
   21674:	cmp	r4, r3
   21678:	bne	215d0 <__assert_fail@plt+0xf9f0>
   2167c:	ldrb	r3, [r5, #48]	; 0x30
   21680:	mov	r0, r8
   21684:	str	r8, [r5, #20]
   21688:	orr	r3, r3, #2
   2168c:	strb	r3, [r5, #48]	; 0x30
   21690:	add	sp, sp, #12
   21694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21698:	mov	r0, r8
   2169c:	bl	117c0 <free@plt>
   216a0:	ldr	r0, [r5]
   216a4:	bl	1bc7c <__assert_fail@plt+0xa09c>
   216a8:	cmp	r0, #2
   216ac:	bgt	216b8 <__assert_fail@plt+0xfad8>
   216b0:	mov	r0, #0
   216b4:	b	21594 <__assert_fail@plt+0xf9b4>
   216b8:	ldr	lr, [pc, #56]	; 216f8 <__assert_fail@plt+0xfb18>
   216bc:	mov	r1, #3
   216c0:	ldr	ip, [pc, #52]	; 216fc <__assert_fail@plt+0xfb1c>
   216c4:	movw	r3, #1427	; 0x593
   216c8:	ldr	r2, [pc, #48]	; 21700 <__assert_fail@plt+0xfb20>
   216cc:	add	lr, pc, lr
   216d0:	ldr	r0, [r5]
   216d4:	add	ip, pc, ip
   216d8:	add	r2, pc, r2
   216dc:	str	lr, [sp]
   216e0:	str	ip, [sp, #4]
   216e4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   216e8:	mov	r0, fp
   216ec:	b	21594 <__assert_fail@plt+0xf9b4>
   216f0:	mov	r8, r4
   216f4:	b	2167c <__assert_fail@plt+0xfa9c>
   216f8:	ldrdeq	fp, [r0], -ip
   216fc:	andeq	sl, r0, ip, lsr #4
   21700:	andeq	fp, r0, r4, lsl #30
   21704:	push	{r4, r5, r6, lr}
   21708:	subs	r4, r0, #0
   2170c:	beq	217a0 <__assert_fail@plt+0xfbc0>
   21710:	ldrb	r3, [r4, #48]	; 0x30
   21714:	tst	r3, #4
   21718:	beq	21728 <__assert_fail@plt+0xfb48>
   2171c:	ldr	r3, [r4, #24]
   21720:	mov	r0, r3
   21724:	pop	{r4, r5, r6, pc}
   21728:	ldr	r0, [r4]
   2172c:	bl	1cf34 <__assert_fail@plt+0xb354>
   21730:	ldr	r5, [r0, #20]
   21734:	mov	r6, r0
   21738:	cmp	r5, #0
   2173c:	beq	21774 <__assert_fail@plt+0xfb94>
   21740:	mov	r0, r5
   21744:	bl	1d194 <__assert_fail@plt+0xb5b4>
   21748:	ldr	r1, [r4, #8]
   2174c:	mov	r2, #0
   21750:	bl	118d4 <fnmatch@plt>
   21754:	cmp	r0, #0
   21758:	beq	2177c <__assert_fail@plt+0xfb9c>
   2175c:	ldr	r5, [r5]
   21760:	ldr	r3, [r6, #20]
   21764:	cmp	r5, r3
   21768:	beq	21774 <__assert_fail@plt+0xfb94>
   2176c:	cmp	r5, #0
   21770:	bne	21740 <__assert_fail@plt+0xfb60>
   21774:	ldr	r3, [r4, #24]
   21778:	b	2178c <__assert_fail@plt+0xfbac>
   2177c:	mov	r0, r5
   21780:	bl	1d188 <__assert_fail@plt+0xb5a8>
   21784:	mov	r3, r0
   21788:	str	r0, [r4, #24]
   2178c:	ldrb	r2, [r4, #48]	; 0x30
   21790:	mov	r0, r3
   21794:	orr	r2, r2, #4
   21798:	strb	r2, [r4, #48]	; 0x30
   2179c:	pop	{r4, r5, r6, pc}
   217a0:	mov	r0, r4
   217a4:	pop	{r4, r5, r6, pc}
   217a8:	ldrb	r3, [r0, #48]	; 0x30
   217ac:	str	r1, [r0, #24]
   217b0:	orr	r3, r3, #4
   217b4:	strb	r3, [r0, #48]	; 0x30
   217b8:	bx	lr
   217bc:	ldr	r3, [pc, #324]	; 21908 <__assert_fail@plt+0xfd28>
   217c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   217c4:	mov	r5, r0
   217c8:	ldr	r0, [pc, #316]	; 2190c <__assert_fail@plt+0xfd2c>
   217cc:	add	r3, pc, r3
   217d0:	sub	sp, sp, #8
   217d4:	cmp	r1, #0
   217d8:	cmpne	r5, #0
   217dc:	mov	r8, r1
   217e0:	mov	r9, r2
   217e4:	ldr	sl, [r3, r0]
   217e8:	ldr	r3, [sl]
   217ec:	str	r3, [sp, #4]
   217f0:	beq	218bc <__assert_fail@plt+0xfcdc>
   217f4:	cmp	r2, #0
   217f8:	beq	218bc <__assert_fail@plt+0xfcdc>
   217fc:	ldr	r3, [r1]
   21800:	cmp	r3, #0
   21804:	bne	218e8 <__assert_fail@plt+0xfd08>
   21808:	ldr	r3, [r2]
   2180c:	cmp	r3, #0
   21810:	bne	218c8 <__assert_fail@plt+0xfce8>
   21814:	ldr	r0, [r5]
   21818:	bl	1cf34 <__assert_fail@plt+0xb354>
   2181c:	ldr	r4, [r0, #24]
   21820:	mov	r7, r0
   21824:	cmp	r4, #0
   21828:	beq	21858 <__assert_fail@plt+0xfc78>
   2182c:	mov	r0, r4
   21830:	bl	1d1a0 <__assert_fail@plt+0xb5c0>
   21834:	ldr	r1, [r5, #8]
   21838:	mov	r2, #0
   2183c:	bl	118d4 <fnmatch@plt>
   21840:	subs	r6, r0, #0
   21844:	beq	21860 <__assert_fail@plt+0xfc80>
   21848:	ldr	r4, [r4]
   2184c:	ldr	r3, [r7, #24]
   21850:	cmp	r4, r3
   21854:	bne	21824 <__assert_fail@plt+0xfc44>
   21858:	mov	r6, #0
   2185c:	b	218a0 <__assert_fail@plt+0xfcc0>
   21860:	mov	r1, sp
   21864:	mov	r0, r4
   21868:	bl	1d8e8 <__assert_fail@plt+0xbd08>
   2186c:	ldr	r2, [sp]
   21870:	mov	r1, r0
   21874:	ldr	r0, [r5]
   21878:	bl	20df8 <__assert_fail@plt+0xf218>
   2187c:	mov	r1, sp
   21880:	str	r0, [r8]
   21884:	mov	r0, r4
   21888:	bl	1d8fc <__assert_fail@plt+0xbd1c>
   2188c:	ldr	r2, [sp]
   21890:	mov	r1, r0
   21894:	ldr	r0, [r5]
   21898:	bl	20df8 <__assert_fail@plt+0xf218>
   2189c:	str	r0, [r9]
   218a0:	ldr	r2, [sp, #4]
   218a4:	mov	r0, r6
   218a8:	ldr	r3, [sl]
   218ac:	cmp	r2, r3
   218b0:	bne	218c4 <__assert_fail@plt+0xfce4>
   218b4:	add	sp, sp, #8
   218b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   218bc:	mvn	r6, #1
   218c0:	b	218a0 <__assert_fail@plt+0xfcc0>
   218c4:	bl	11838 <__stack_chk_fail@plt>
   218c8:	ldr	r0, [pc, #64]	; 21910 <__assert_fail@plt+0xfd30>
   218cc:	movw	r2, #1533	; 0x5fd
   218d0:	ldr	r1, [pc, #60]	; 21914 <__assert_fail@plt+0xfd34>
   218d4:	ldr	r3, [pc, #60]	; 21918 <__assert_fail@plt+0xfd38>
   218d8:	add	r0, pc, r0
   218dc:	add	r1, pc, r1
   218e0:	add	r3, pc, r3
   218e4:	bl	11be0 <__assert_fail@plt>
   218e8:	ldr	r0, [pc, #44]	; 2191c <__assert_fail@plt+0xfd3c>
   218ec:	movw	r2, #1532	; 0x5fc
   218f0:	ldr	r1, [pc, #40]	; 21920 <__assert_fail@plt+0xfd40>
   218f4:	ldr	r3, [pc, #40]	; 21924 <__assert_fail@plt+0xfd44>
   218f8:	add	r0, pc, r0
   218fc:	add	r1, pc, r1
   21900:	add	r3, pc, r3
   21904:	bl	11be0 <__assert_fail@plt>
   21908:	andeq	sp, r1, ip, lsr #16
   2190c:	andeq	r0, r0, ip, lsr #3
   21910:	strdeq	fp, [r0], -r8
   21914:	andeq	fp, r0, r0, lsl #26
   21918:	andeq	fp, r0, r0, lsr #24
   2191c:	andeq	fp, r0, r4, asr #29
   21920:	andeq	fp, r0, r0, ror #25
   21924:	andeq	fp, r0, r0, lsl #24
   21928:	ldr	ip, [pc, #496]	; 21b20 <__assert_fail@plt+0xff40>
   2192c:	mov	r3, #0
   21930:	push	{r4, r5, r6, r7, r8, lr}
   21934:	add	ip, pc, ip
   21938:	ldr	lr, [pc, #484]	; 21b24 <__assert_fail@plt+0xff44>
   2193c:	sub	sp, sp, #32
   21940:	mov	r6, r1
   21944:	add	r2, sp, #24
   21948:	add	r1, sp, #20
   2194c:	mov	r8, r0
   21950:	ldr	r7, [ip, lr]
   21954:	str	r3, [sp, #20]
   21958:	str	r3, [sp, #24]
   2195c:	ldr	r3, [r7]
   21960:	str	r3, [sp, #28]
   21964:	bl	217bc <__assert_fail@plt+0xfbdc>
   21968:	subs	r5, r0, #0
   2196c:	blt	21a9c <__assert_fail@plt+0xfebc>
   21970:	ldr	r3, [sp, #20]
   21974:	cmp	r3, #0
   21978:	mov	r4, r3
   2197c:	bne	21998 <__assert_fail@plt+0xfdb8>
   21980:	b	219d0 <__assert_fail@plt+0xfdf0>
   21984:	ldr	r4, [r4]
   21988:	cmp	r4, r3
   2198c:	beq	219d0 <__assert_fail@plt+0xfdf0>
   21990:	cmp	r4, #0
   21994:	beq	219d0 <__assert_fail@plt+0xfdf0>
   21998:	ldr	r0, [r4, #8]
   2199c:	ldrb	r2, [r0, #56]	; 0x38
   219a0:	ands	r1, r2, #1
   219a4:	movne	r5, #0
   219a8:	bne	21984 <__assert_fail@plt+0xfda4>
   219ac:	mov	r2, r1
   219b0:	mov	r3, r6
   219b4:	bl	21b34 <__assert_fail@plt+0xff54>
   219b8:	subs	r5, r0, #0
   219bc:	blt	21a70 <__assert_fail@plt+0xfe90>
   219c0:	ldr	r3, [sp, #20]
   219c4:	ldr	r4, [r4]
   219c8:	cmp	r4, r3
   219cc:	bne	21990 <__assert_fail@plt+0xfdb0>
   219d0:	mov	r0, r8
   219d4:	ldr	r4, [r6]
   219d8:	bl	202c4 <__assert_fail@plt+0xe6e4>
   219dc:	mov	r1, r0
   219e0:	mov	r0, r4
   219e4:	bl	1cf3c <__assert_fail@plt+0xb35c>
   219e8:	cmp	r0, #0
   219ec:	beq	21b0c <__assert_fail@plt+0xff2c>
   219f0:	ldr	r1, [sp, #20]
   219f4:	str	r0, [r6]
   219f8:	cmp	r1, #0
   219fc:	ldr	r3, [sp, #24]
   21a00:	beq	21af0 <__assert_fail@plt+0xff10>
   21a04:	mov	r0, #1
   21a08:	mov	r4, r3
   21a0c:	ldrb	r2, [r8, #56]	; 0x38
   21a10:	cmp	r3, #0
   21a14:	bfi	r2, r0, #1, #1
   21a18:	strb	r2, [r8, #56]	; 0x38
   21a1c:	bne	21a38 <__assert_fail@plt+0xfe58>
   21a20:	b	21b00 <__assert_fail@plt+0xff20>
   21a24:	ldr	r4, [r4]
   21a28:	cmp	r4, r3
   21a2c:	beq	21a70 <__assert_fail@plt+0xfe90>
   21a30:	cmp	r4, #0
   21a34:	beq	21a70 <__assert_fail@plt+0xfe90>
   21a38:	ldr	r0, [r4, #8]
   21a3c:	ldrb	r1, [r0, #56]	; 0x38
   21a40:	ands	r1, r1, #1
   21a44:	movne	r5, #0
   21a48:	bne	21a24 <__assert_fail@plt+0xfe44>
   21a4c:	mov	r2, r1
   21a50:	mov	r3, r6
   21a54:	bl	21b34 <__assert_fail@plt+0xff54>
   21a58:	subs	r5, r0, #0
   21a5c:	blt	21a70 <__assert_fail@plt+0xfe90>
   21a60:	ldr	r3, [sp, #24]
   21a64:	ldr	r4, [r4]
   21a68:	cmp	r4, r3
   21a6c:	bne	21a30 <__assert_fail@plt+0xfe50>
   21a70:	ldr	r0, [sp, #20]
   21a74:	bl	207dc <__assert_fail@plt+0xebfc>
   21a78:	ldr	r0, [sp, #24]
   21a7c:	bl	207dc <__assert_fail@plt+0xebfc>
   21a80:	ldr	r2, [sp, #28]
   21a84:	ldr	r3, [r7]
   21a88:	mov	r0, r5
   21a8c:	cmp	r2, r3
   21a90:	bne	21b08 <__assert_fail@plt+0xff28>
   21a94:	add	sp, sp, #32
   21a98:	pop	{r4, r5, r6, r7, r8, pc}
   21a9c:	ldr	r0, [r8]
   21aa0:	bl	1bc7c <__assert_fail@plt+0xa09c>
   21aa4:	cmp	r0, #2
   21aa8:	ble	21a70 <__assert_fail@plt+0xfe90>
   21aac:	rsb	r0, r5, #0
   21ab0:	ldr	r4, [r8]
   21ab4:	bl	11928 <strerror@plt>
   21ab8:	ldr	lr, [pc, #104]	; 21b28 <__assert_fail@plt+0xff48>
   21abc:	ldr	ip, [pc, #104]	; 21b2c <__assert_fail@plt+0xff4c>
   21ac0:	mov	r1, #3
   21ac4:	ldr	r2, [pc, #100]	; 21b30 <__assert_fail@plt+0xff50>
   21ac8:	add	lr, pc, lr
   21acc:	add	ip, pc, ip
   21ad0:	movw	r3, #1081	; 0x439
   21ad4:	add	r2, pc, r2
   21ad8:	str	lr, [sp]
   21adc:	str	ip, [sp, #4]
   21ae0:	str	r0, [sp, #8]
   21ae4:	mov	r0, r4
   21ae8:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21aec:	b	21a70 <__assert_fail@plt+0xfe90>
   21af0:	adds	r0, r3, #0
   21af4:	mov	r4, r3
   21af8:	movne	r0, #1
   21afc:	b	21a0c <__assert_fail@plt+0xfe2c>
   21b00:	mov	r0, r1
   21b04:	b	21a74 <__assert_fail@plt+0xfe94>
   21b08:	bl	11838 <__stack_chk_fail@plt>
   21b0c:	mov	r0, r8
   21b10:	mvn	r5, #11
   21b14:	bl	20b98 <__assert_fail@plt+0xefb8>
   21b18:	ldr	r0, [sp, #20]
   21b1c:	b	21a74 <__assert_fail@plt+0xfe94>
   21b20:	andeq	sp, r1, r4, asr #13
   21b24:	andeq	r0, r0, ip, lsr #3
   21b28:	muleq	r0, r4, r0
   21b2c:	andeq	fp, r0, ip, lsl sp
   21b30:	andeq	fp, r0, r8, lsl #22
   21b34:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   21b38:	mov	r4, r1
   21b3c:	ldrb	r1, [r0, #56]	; 0x38
   21b40:	mov	r8, r0
   21b44:	mov	r9, r2
   21b48:	mov	r6, r3
   21b4c:	orr	r1, r1, #1
   21b50:	strb	r1, [r0, #56]	; 0x38
   21b54:	bl	20f2c <__assert_fail@plt+0xf34c>
   21b58:	cmp	r4, #0
   21b5c:	mov	r5, r0
   21b60:	bne	21be4 <__assert_fail@plt+0x10004>
   21b64:	cmp	r0, #0
   21b68:	beq	21c3c <__assert_fail@plt+0x1005c>
   21b6c:	mov	r4, r5
   21b70:	b	21b7c <__assert_fail@plt+0xff9c>
   21b74:	cmp	r4, #0
   21b78:	beq	21b9c <__assert_fail@plt+0xffbc>
   21b7c:	ldr	r0, [r4, #8]
   21b80:	mov	r1, r6
   21b84:	bl	21928 <__assert_fail@plt+0xfd48>
   21b88:	subs	r7, r0, #0
   21b8c:	blt	21bd4 <__assert_fail@plt+0xfff4>
   21b90:	ldr	r4, [r4]
   21b94:	cmp	r4, r5
   21b98:	bne	21b74 <__assert_fail@plt+0xff94>
   21b9c:	cmp	r9, #0
   21ba0:	beq	21c28 <__assert_fail@plt+0x10048>
   21ba4:	mov	r0, r8
   21ba8:	ldr	r4, [r6]
   21bac:	bl	202c4 <__assert_fail@plt+0xe6e4>
   21bb0:	mov	r1, r0
   21bb4:	mov	r0, r4
   21bb8:	bl	1cf3c <__assert_fail@plt+0xb35c>
   21bbc:	cmp	r0, #0
   21bc0:	beq	21c44 <__assert_fail@plt+0x10064>
   21bc4:	str	r0, [r6]
   21bc8:	ldrb	r3, [r8, #56]	; 0x38
   21bcc:	orr	r3, r3, #2
   21bd0:	strb	r3, [r8, #56]	; 0x38
   21bd4:	mov	r0, r5
   21bd8:	bl	207dc <__assert_fail@plt+0xebfc>
   21bdc:	mov	r0, r7
   21be0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   21be4:	ldrb	r3, [r8, #56]	; 0x38
   21be8:	cmp	r0, #0
   21bec:	orr	r3, r3, #4
   21bf0:	strb	r3, [r8, #56]	; 0x38
   21bf4:	beq	21c3c <__assert_fail@plt+0x1005c>
   21bf8:	mov	ip, r0
   21bfc:	b	21c08 <__assert_fail@plt+0x10028>
   21c00:	cmp	ip, #0
   21c04:	beq	21b6c <__assert_fail@plt+0xff8c>
   21c08:	ldr	lr, [ip, #8]
   21c0c:	ldr	ip, [ip]
   21c10:	ldrb	r3, [lr, #56]	; 0x38
   21c14:	cmp	ip, r5
   21c18:	orr	r3, r3, #4
   21c1c:	strb	r3, [lr, #56]	; 0x38
   21c20:	bne	21c00 <__assert_fail@plt+0x10020>
   21c24:	b	21b6c <__assert_fail@plt+0xff8c>
   21c28:	mov	r0, r8
   21c2c:	mov	r1, r6
   21c30:	bl	21928 <__assert_fail@plt+0xfd48>
   21c34:	mov	r7, r0
   21c38:	b	21bd4 <__assert_fail@plt+0xfff4>
   21c3c:	mov	r7, #0
   21c40:	b	21b9c <__assert_fail@plt+0xffbc>
   21c44:	mov	r0, r8
   21c48:	mvn	r7, #11
   21c4c:	bl	20b98 <__assert_fail@plt+0xefb8>
   21c50:	b	21bd4 <__assert_fail@plt+0xfff4>
   21c54:	push	{r4, r5, r6, lr}
   21c58:	subs	r4, r0, #0
   21c5c:	beq	21cf0 <__assert_fail@plt+0x10110>
   21c60:	ldrb	r3, [r4, #48]	; 0x30
   21c64:	tst	r3, #8
   21c68:	beq	21c78 <__assert_fail@plt+0x10098>
   21c6c:	ldr	r3, [r4, #28]
   21c70:	mov	r0, r3
   21c74:	pop	{r4, r5, r6, pc}
   21c78:	ldr	r0, [r4]
   21c7c:	bl	1cf34 <__assert_fail@plt+0xb354>
   21c80:	ldr	r5, [r0, #16]
   21c84:	mov	r6, r0
   21c88:	cmp	r5, #0
   21c8c:	beq	21cc4 <__assert_fail@plt+0x100e4>
   21c90:	mov	r0, r5
   21c94:	bl	1d194 <__assert_fail@plt+0xb5b4>
   21c98:	ldr	r1, [r4, #8]
   21c9c:	mov	r2, #0
   21ca0:	bl	118d4 <fnmatch@plt>
   21ca4:	cmp	r0, #0
   21ca8:	beq	21ccc <__assert_fail@plt+0x100ec>
   21cac:	ldr	r5, [r5]
   21cb0:	ldr	r3, [r6, #16]
   21cb4:	cmp	r5, r3
   21cb8:	beq	21cc4 <__assert_fail@plt+0x100e4>
   21cbc:	cmp	r5, #0
   21cc0:	bne	21c90 <__assert_fail@plt+0x100b0>
   21cc4:	ldr	r3, [r4, #28]
   21cc8:	b	21cdc <__assert_fail@plt+0x100fc>
   21ccc:	mov	r0, r5
   21cd0:	bl	1d188 <__assert_fail@plt+0xb5a8>
   21cd4:	mov	r3, r0
   21cd8:	str	r0, [r4, #28]
   21cdc:	ldrb	r2, [r4, #48]	; 0x30
   21ce0:	mov	r0, r3
   21ce4:	orr	r2, r2, #8
   21ce8:	strb	r2, [r4, #48]	; 0x30
   21cec:	pop	{r4, r5, r6, pc}
   21cf0:	mov	r0, r4
   21cf4:	pop	{r4, r5, r6, pc}
   21cf8:	ldrb	r3, [r0, #48]	; 0x30
   21cfc:	str	r1, [r0, #28]
   21d00:	orr	r3, r3, #8
   21d04:	strb	r3, [r0, #48]	; 0x30
   21d08:	bx	lr
   21d0c:	ldr	r3, [pc, #712]	; 21fdc <__assert_fail@plt+0x103fc>
   21d10:	cmp	r1, #0
   21d14:	cmpne	r0, #0
   21d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d1c:	sub	sp, sp, #4160	; 0x1040
   21d20:	ldr	r2, [pc, #696]	; 21fe0 <__assert_fail@plt+0x10400>
   21d24:	sub	sp, sp, #4
   21d28:	add	r3, pc, r3
   21d2c:	mov	r9, r0
   21d30:	str	r1, [sp, #20]
   21d34:	add	r1, sp, #8192	; 0x2000
   21d38:	ldr	r2, [r3, r2]
   21d3c:	movne	sl, #0
   21d40:	moveq	sl, #1
   21d44:	ldr	r3, [r2]
   21d48:	str	r2, [sp, #24]
   21d4c:	str	r3, [r1, #-4036]	; 0xfffff03c
   21d50:	beq	21f68 <__assert_fail@plt+0x10388>
   21d54:	ldr	r0, [pc, #648]	; 21fe4 <__assert_fail@plt+0x10404>
   21d58:	ldr	r1, [pc, #648]	; 21fe8 <__assert_fail@plt+0x10408>
   21d5c:	add	r0, pc, r0
   21d60:	add	r1, pc, r1
   21d64:	bl	11b44 <fopen64@plt>
   21d68:	subs	r5, r0, #0
   21d6c:	beq	21f70 <__assert_fail@plt+0x10390>
   21d70:	ldr	fp, [pc, #628]	; 21fec <__assert_fail@plt+0x1040c>
   21d74:	add	r6, sp, #64	; 0x40
   21d78:	ldr	r2, [pc, #624]	; 21ff0 <__assert_fail@plt+0x10410>
   21d7c:	add	r4, sp, #60	; 0x3c
   21d80:	ldr	r3, [pc, #620]	; 21ff4 <__assert_fail@plt+0x10414>
   21d84:	add	fp, pc, fp
   21d88:	add	r2, pc, r2
   21d8c:	ldr	r1, [pc, #612]	; 21ff8 <__assert_fail@plt+0x10418>
   21d90:	add	r3, pc, r3
   21d94:	str	r2, [sp, #36]	; 0x24
   21d98:	str	r3, [sp, #40]	; 0x28
   21d9c:	add	r1, pc, r1
   21da0:	ldr	r2, [pc, #596]	; 21ffc <__assert_fail@plt+0x1041c>
   21da4:	ldr	r3, [pc, #596]	; 22000 <__assert_fail@plt+0x10420>
   21da8:	add	r2, pc, r2
   21dac:	str	r1, [sp, #44]	; 0x2c
   21db0:	add	r3, pc, r3
   21db4:	str	r2, [sp, #28]
   21db8:	str	r3, [sp, #32]
   21dbc:	mov	r0, r4
   21dc0:	mov	r1, #4096	; 0x1000
   21dc4:	mov	r2, r5
   21dc8:	bl	117cc <fgets@plt>
   21dcc:	cmp	r0, #0
   21dd0:	beq	21edc <__assert_fail@plt+0x102fc>
   21dd4:	mov	r0, r4
   21dd8:	bl	119a0 <strlen@plt>
   21ddc:	mov	r1, fp
   21de0:	sub	r2, r6, #8
   21de4:	mov	r7, r0
   21de8:	mov	r0, r4
   21dec:	bl	11808 <__strtok_r@plt>
   21df0:	sub	r2, r6, #12
   21df4:	mov	r8, r0
   21df8:	mov	r0, r9
   21dfc:	mov	r1, r8
   21e00:	bl	203f0 <__assert_fail@plt+0xe810>
   21e04:	subs	r3, r0, #0
   21e08:	blt	21e88 <__assert_fail@plt+0x102a8>
   21e0c:	add	r2, sp, #4160	; 0x1040
   21e10:	movw	r3, #61428	; 0xeff4
   21e14:	movt	r3, #65535	; 0xffff
   21e18:	mov	r0, sl
   21e1c:	ldr	r1, [r2, r3]
   21e20:	bl	1cf3c <__assert_fail@plt+0xb35c>
   21e24:	cmp	r0, #0
   21e28:	beq	21f18 <__assert_fail@plt+0x10338>
   21e2c:	mov	sl, r0
   21e30:	add	r3, sp, #4160	; 0x1040
   21e34:	add	r0, r3, r7
   21e38:	sub	r0, r0, #4096	; 0x1000
   21e3c:	ldrb	r3, [r0, #-5]
   21e40:	cmp	r3, #10
   21e44:	beq	21dbc <__assert_fail@plt+0x101dc>
   21e48:	mov	r0, r4
   21e4c:	mov	r1, #4096	; 0x1000
   21e50:	mov	r2, r5
   21e54:	bl	117cc <fgets@plt>
   21e58:	cmp	r0, #0
   21e5c:	beq	21dbc <__assert_fail@plt+0x101dc>
   21e60:	mov	r0, r4
   21e64:	bl	119a0 <strlen@plt>
   21e68:	add	r2, sp, #4160	; 0x1040
   21e6c:	add	r0, r2, r0
   21e70:	sub	r3, r0, #4096	; 0x1000
   21e74:	sub	r3, r3, #4
   21e78:	ldrb	r3, [r3, #-1]
   21e7c:	cmp	r3, #10
   21e80:	bne	21e48 <__assert_fail@plt+0x10268>
   21e84:	b	21dbc <__assert_fail@plt+0x101dc>
   21e88:	mov	r0, r9
   21e8c:	str	r3, [sp, #16]
   21e90:	bl	1bc7c <__assert_fail@plt+0xa09c>
   21e94:	ldr	r3, [sp, #16]
   21e98:	cmp	r0, #2
   21e9c:	ble	21e30 <__assert_fail@plt+0x10250>
   21ea0:	rsb	r0, r3, #0
   21ea4:	bl	11928 <strerror@plt>
   21ea8:	ldr	r1, [sp, #32]
   21eac:	ldr	r3, [pc, #336]	; 22004 <__assert_fail@plt+0x10424>
   21eb0:	str	r8, [sp, #8]
   21eb4:	add	r3, pc, r3
   21eb8:	str	r1, [sp]
   21ebc:	str	r3, [sp, #4]
   21ec0:	mov	r1, #3
   21ec4:	ldr	r2, [sp, #28]
   21ec8:	movw	r3, #1669	; 0x685
   21ecc:	str	r0, [sp, #12]
   21ed0:	mov	r0, r9
   21ed4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21ed8:	b	21e30 <__assert_fail@plt+0x10250>
   21edc:	mov	r7, r0
   21ee0:	mov	r0, r5
   21ee4:	bl	11a84 <fclose@plt>
   21ee8:	ldr	r3, [sp, #20]
   21eec:	mov	r0, r7
   21ef0:	str	sl, [r3]
   21ef4:	add	r1, sp, #8192	; 0x2000
   21ef8:	ldr	r2, [r1, #-4036]	; 0xfffff03c
   21efc:	ldr	r1, [sp, #24]
   21f00:	ldr	r3, [r1]
   21f04:	cmp	r2, r3
   21f08:	bne	21fd8 <__assert_fail@plt+0x103f8>
   21f0c:	add	sp, sp, #4160	; 0x1040
   21f10:	add	sp, sp, #4
   21f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f18:	mov	r0, r9
   21f1c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   21f20:	cmp	r0, #2
   21f24:	bgt	21f40 <__assert_fail@plt+0x10360>
   21f28:	add	r1, sp, #4160	; 0x1040
   21f2c:	movw	r3, #61428	; 0xeff4
   21f30:	movt	r3, #65535	; 0xffff
   21f34:	ldr	r0, [r1, r3]
   21f38:	bl	20b98 <__assert_fail@plt+0xefb8>
   21f3c:	b	21e30 <__assert_fail@plt+0x10250>
   21f40:	ldr	r1, [sp, #40]	; 0x28
   21f44:	mov	r0, r9
   21f48:	ldr	r2, [sp, #44]	; 0x2c
   21f4c:	movw	r3, #1677	; 0x68d
   21f50:	str	r1, [sp]
   21f54:	mov	r1, #3
   21f58:	str	r2, [sp, #4]
   21f5c:	ldr	r2, [sp, #36]	; 0x24
   21f60:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21f64:	b	21f28 <__assert_fail@plt+0x10348>
   21f68:	mvn	r0, #1
   21f6c:	b	21ef4 <__assert_fail@plt+0x10314>
   21f70:	bl	119f4 <__errno_location@plt>
   21f74:	ldr	r4, [r0]
   21f78:	mov	r5, r0
   21f7c:	mov	r0, r9
   21f80:	bl	1bc7c <__assert_fail@plt+0xa09c>
   21f84:	rsb	r4, r4, #0
   21f88:	cmp	r0, #2
   21f8c:	movle	r0, r4
   21f90:	ble	21ef4 <__assert_fail@plt+0x10314>
   21f94:	ldr	r0, [r5]
   21f98:	bl	11928 <strerror@plt>
   21f9c:	ldr	lr, [pc, #100]	; 22008 <__assert_fail@plt+0x10428>
   21fa0:	ldr	ip, [pc, #100]	; 2200c <__assert_fail@plt+0x1042c>
   21fa4:	mov	r1, #3
   21fa8:	ldr	r2, [pc, #96]	; 22010 <__assert_fail@plt+0x10430>
   21fac:	add	lr, pc, lr
   21fb0:	add	ip, pc, ip
   21fb4:	movw	r3, #1655	; 0x677
   21fb8:	add	r2, pc, r2
   21fbc:	str	lr, [sp]
   21fc0:	str	ip, [sp, #4]
   21fc4:	str	r0, [sp, #8]
   21fc8:	mov	r0, r9
   21fcc:	bl	1bbe4 <__assert_fail@plt+0xa004>
   21fd0:	mov	r0, r4
   21fd4:	b	21ef4 <__assert_fail@plt+0x10314>
   21fd8:	bl	11838 <__stack_chk_fail@plt>
   21fdc:	ldrdeq	sp, [r1], -r0
   21fe0:	andeq	r0, r0, ip, lsr #3
   21fe4:	andeq	fp, r0, r8, lsr #21
   21fe8:	andeq	sl, r0, r0, lsl #30
   21fec:	andeq	sl, r0, r0, asr #6
   21ff0:	andeq	fp, r0, r4, asr r8
   21ff4:	andeq	fp, r0, ip, lsr r7
   21ff8:	andeq	r9, r0, r4, ror #22
   21ffc:	andeq	fp, r0, r4, lsr r8
   22000:	andeq	fp, r0, ip, lsl r7
   22004:	andeq	fp, r0, r4, lsl #19
   22008:	andeq	fp, r0, r0, lsr #10
   2200c:	andeq	fp, r0, r4, ror #16
   22010:	andeq	fp, r0, r4, lsr #12
   22014:	ldr	r3, [pc, #584]	; 22264 <__assert_fail@plt+0x10684>
   22018:	ldr	r2, [pc, #584]	; 22268 <__assert_fail@plt+0x10688>
   2201c:	add	r3, pc, r3
   22020:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22024:	sub	sp, sp, #4224	; 0x1080
   22028:	ldr	r4, [r3, r2]
   2202c:	sub	sp, sp, #32
   22030:	add	r2, sp, #8192	; 0x2000
   22034:	subs	r5, r0, #0
   22038:	ldr	r3, [r4]
   2203c:	str	r3, [r2, #-3940]	; 0xfffff09c
   22040:	beq	22258 <__assert_fail@plt+0x10678>
   22044:	bl	20280 <__assert_fail@plt+0xe6a0>
   22048:	subs	r7, r0, #0
   2204c:	movne	r0, #0
   22050:	beq	22074 <__assert_fail@plt+0x10494>
   22054:	add	r3, sp, #8192	; 0x2000
   22058:	ldr	r2, [r3, #-3940]	; 0xfffff09c
   2205c:	ldr	r3, [r4]
   22060:	cmp	r2, r3
   22064:	bne	22260 <__assert_fail@plt+0x10680>
   22068:	add	sp, sp, #4224	; 0x1080
   2206c:	add	sp, sp, #32
   22070:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22074:	ldr	r0, [pc, #496]	; 2226c <__assert_fail@plt+0x1068c>
   22078:	add	r8, sp, #160	; 0xa0
   2207c:	sub	r6, r8, #4
   22080:	mov	r1, #4096	; 0x1000
   22084:	add	r0, pc, r0
   22088:	str	r0, [sp]
   2208c:	ldr	ip, [r5, #8]
   22090:	mov	r3, r1
   22094:	mov	r2, #1
   22098:	mov	r0, r6
   2209c:	str	ip, [sp, #4]
   220a0:	bl	11bd4 <__snprintf_chk@plt>
   220a4:	mov	r1, #524288	; 0x80000
   220a8:	mov	sl, r0
   220ac:	mov	r0, r6
   220b0:	bl	118e0 <open64@plt>
   220b4:	subs	r9, r0, #0
   220b8:	blt	2211c <__assert_fail@plt+0x1053c>
   220bc:	sub	r8, r8, #36	; 0x24
   220c0:	mov	r2, #32
   220c4:	mov	r1, r8
   220c8:	bl	1b460 <__assert_fail@plt+0x9880>
   220cc:	mov	r7, r0
   220d0:	mov	r0, r9
   220d4:	bl	11bbc <close@plt>
   220d8:	cmp	r7, #0
   220dc:	blt	221f8 <__assert_fail@plt+0x10618>
   220e0:	ldr	r1, [pc, #392]	; 22270 <__assert_fail@plt+0x10690>
   220e4:	mov	r0, r8
   220e8:	add	r1, pc, r1
   220ec:	bl	11754 <strcmp@plt>
   220f0:	cmp	r0, #0
   220f4:	moveq	r0, #1
   220f8:	beq	22054 <__assert_fail@plt+0x10474>
   220fc:	ldr	r1, [pc, #368]	; 22274 <__assert_fail@plt+0x10694>
   22100:	mov	r0, r8
   22104:	add	r1, pc, r1
   22108:	bl	11754 <strcmp@plt>
   2210c:	cmp	r0, #0
   22110:	bne	22188 <__assert_fail@plt+0x105a8>
   22114:	mov	r0, #2
   22118:	b	22054 <__assert_fail@plt+0x10474>
   2211c:	bl	119f4 <__errno_location@plt>
   22120:	ldr	r5, [r0]
   22124:	rsb	r8, r5, #0
   22128:	mov	r0, r5
   2212c:	bl	11928 <strerror@plt>
   22130:	cmp	sl, #10
   22134:	ble	22178 <__assert_fail@plt+0x10598>
   22138:	add	r3, sp, #4224	; 0x1080
   2213c:	mov	r1, r6
   22140:	add	r3, r3, #32
   22144:	add	r2, sp, #16
   22148:	add	sl, r3, sl
   2214c:	mov	r0, #3
   22150:	sub	sl, sl, #4096	; 0x1000
   22154:	add	r9, sp, #32
   22158:	strb	r7, [sl, #-14]
   2215c:	bl	11b74 <__xstat64@plt>
   22160:	cmp	r0, #0
   22164:	bne	22178 <__assert_fail@plt+0x10598>
   22168:	ldr	r3, [r9]
   2216c:	and	r3, r3, #61440	; 0xf000
   22170:	cmp	r3, #16384	; 0x4000
   22174:	beq	22114 <__assert_fail@plt+0x10534>
   22178:	mov	r0, r5
   2217c:	bl	11928 <strerror@plt>
   22180:	mov	r0, r8
   22184:	b	22054 <__assert_fail@plt+0x10474>
   22188:	ldr	r1, [pc, #232]	; 22278 <__assert_fail@plt+0x10698>
   2218c:	mov	r0, r8
   22190:	add	r1, pc, r1
   22194:	bl	11754 <strcmp@plt>
   22198:	cmp	r0, #0
   2219c:	moveq	r0, #3
   221a0:	beq	22054 <__assert_fail@plt+0x10474>
   221a4:	ldr	r0, [r5]
   221a8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   221ac:	cmp	r0, #2
   221b0:	mvnle	r0, #21
   221b4:	ble	22054 <__assert_fail@plt+0x10474>
   221b8:	ldr	r2, [pc, #188]	; 2227c <__assert_fail@plt+0x1069c>
   221bc:	mov	r1, #3
   221c0:	ldr	r0, [r5]
   221c4:	movw	r3, #1777	; 0x6f1
   221c8:	add	r2, pc, r2
   221cc:	ldr	ip, [pc, #172]	; 22280 <__assert_fail@plt+0x106a0>
   221d0:	str	r2, [sp, #4]
   221d4:	ldr	r2, [pc, #168]	; 22284 <__assert_fail@plt+0x106a4>
   221d8:	add	ip, pc, ip
   221dc:	str	r6, [sp, #8]
   221e0:	str	r8, [sp, #12]
   221e4:	add	r2, pc, r2
   221e8:	str	ip, [sp]
   221ec:	bl	1bbe4 <__assert_fail@plt+0xa004>
   221f0:	mvn	r0, #21
   221f4:	b	22054 <__assert_fail@plt+0x10474>
   221f8:	ldr	r0, [r5]
   221fc:	bl	1bc7c <__assert_fail@plt+0xa09c>
   22200:	cmp	r0, #2
   22204:	movle	r0, r7
   22208:	ble	22054 <__assert_fail@plt+0x10474>
   2220c:	rsb	r0, r7, #0
   22210:	ldr	r5, [r5]
   22214:	bl	11928 <strerror@plt>
   22218:	ldr	r2, [pc, #104]	; 22288 <__assert_fail@plt+0x106a8>
   2221c:	ldr	ip, [pc, #104]	; 2228c <__assert_fail@plt+0x106ac>
   22220:	mov	r1, #3
   22224:	add	r2, pc, r2
   22228:	str	r2, [sp, #4]
   2222c:	ldr	r2, [pc, #92]	; 22290 <__assert_fail@plt+0x106b0>
   22230:	add	ip, pc, ip
   22234:	str	r6, [sp, #8]
   22238:	movw	r3, #1766	; 0x6e6
   2223c:	str	ip, [sp]
   22240:	add	r2, pc, r2
   22244:	str	r0, [sp, #12]
   22248:	mov	r0, r5
   2224c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   22250:	mov	r0, r7
   22254:	b	22054 <__assert_fail@plt+0x10474>
   22258:	mvn	r0, #1
   2225c:	b	22054 <__assert_fail@plt+0x10474>
   22260:	bl	11838 <__stack_chk_fail@plt>
   22264:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   22268:	andeq	r0, r0, ip, lsr #3
   2226c:	strdeq	fp, [r0], -r8
   22270:	ldrdeq	fp, [r0], -r0
   22274:			; <UNDEFINED> instruction: 0x0000b7bc
   22278:	andeq	fp, r0, r8, lsr r7
   2227c:	andeq	fp, r0, r8, lsl #14
   22280:	ldrdeq	fp, [r0], -r8
   22284:	strdeq	fp, [r0], -r8
   22288:	andeq	fp, r0, r4, ror r6
   2228c:	andeq	fp, r0, r0, lsl #19
   22290:	muleq	r0, ip, r3
   22294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22298:	sub	sp, sp, #116	; 0x74
   2229c:	ldr	r4, [pc, #1780]	; 22998 <__assert_fail@plt+0x10db8>
   222a0:	subs	ip, r0, #0
   222a4:	str	r1, [sp, #24]
   222a8:	str	ip, [sp, #28]
   222ac:	add	r4, pc, r4
   222b0:	ldr	ip, [pc, #1764]	; 2299c <__assert_fail@plt+0x10dbc>
   222b4:	ldr	r1, [sp, #152]	; 0x98
   222b8:	str	r2, [sp, #48]	; 0x30
   222bc:	mov	r2, #0
   222c0:	str	r3, [sp, #60]	; 0x3c
   222c4:	mov	r3, r4
   222c8:	str	r1, [sp, #76]	; 0x4c
   222cc:	ldr	ip, [r4, ip]
   222d0:	ldr	r3, [sp, #156]	; 0x9c
   222d4:	str	r2, [sp, #100]	; 0x64
   222d8:	str	ip, [sp, #56]	; 0x38
   222dc:	str	r3, [sp, #32]
   222e0:	ldr	r3, [ip]
   222e4:	str	r3, [sp, #108]	; 0x6c
   222e8:	beq	22918 <__assert_fail@plt+0x10d38>
   222ec:	ldr	ip, [sp, #24]
   222f0:	ands	ip, ip, #8
   222f4:	str	ip, [sp, #44]	; 0x2c
   222f8:	beq	22774 <__assert_fail@plt+0x10b94>
   222fc:	ldr	lr, [sp, #28]
   22300:	ldr	r3, [lr, #32]
   22304:	cmp	r3, #0
   22308:	beq	22318 <__assert_fail@plt+0x10738>
   2230c:	ldr	r2, [sp, #24]
   22310:	ands	r5, r2, #262144	; 0x40000
   22314:	bne	225b0 <__assert_fail@plt+0x109d0>
   22318:	ldr	r1, [sp, #24]
   2231c:	ands	r5, r1, #65536	; 0x10000
   22320:	bne	225b0 <__assert_fail@plt+0x109d0>
   22324:	ldr	r3, [sp, #24]
   22328:	ands	r5, r3, #131072	; 0x20000
   2232c:	bne	225b0 <__assert_fail@plt+0x109d0>
   22330:	ldr	r5, [sp, #100]	; 0x64
   22334:	cmp	r5, #0
   22338:	bne	22978 <__assert_fail@plt+0x10d98>
   2233c:	ldr	ip, [sp, #28]
   22340:	mov	r1, r5
   22344:	ldr	r0, [ip]
   22348:	bl	1ca80 <__assert_fail@plt+0xaea0>
   2234c:	ldr	lr, [sp, #28]
   22350:	mov	r1, r5
   22354:	ldr	r0, [lr]
   22358:	bl	1cb04 <__assert_fail@plt+0xaf24>
   2235c:	ldr	r1, [sp, #28]
   22360:	ldrb	r3, [r1, #56]	; 0x38
   22364:	tst	r3, #1
   22368:	beq	22790 <__assert_fail@plt+0x10bb0>
   2236c:	ldr	r2, [sp, #24]
   22370:	tst	r2, #65536	; 0x10000
   22374:	bne	227c0 <__assert_fail@plt+0x10be0>
   22378:	ldr	r0, [sp, #100]	; 0x64
   2237c:	cmp	r0, #0
   22380:	beq	22614 <__assert_fail@plt+0x10a34>
   22384:	str	r0, [sp, #20]
   22388:	ldr	lr, [pc, #1552]	; 229a0 <__assert_fail@plt+0x10dc0>
   2238c:	ldr	r1, [pc, #1552]	; 229a4 <__assert_fail@plt+0x10dc4>
   22390:	add	lr, pc, lr
   22394:	ldr	r2, [pc, #1548]	; 229a8 <__assert_fail@plt+0x10dc8>
   22398:	str	lr, [sp, #52]	; 0x34
   2239c:	add	r1, pc, r1
   223a0:	ldr	r3, [pc, #1540]	; 229ac <__assert_fail@plt+0x10dcc>
   223a4:	add	r2, pc, r2
   223a8:	ldr	ip, [pc, #1536]	; 229b0 <__assert_fail@plt+0x10dd0>
   223ac:	ldr	lr, [pc, #1536]	; 229b4 <__assert_fail@plt+0x10dd4>
   223b0:	add	r3, pc, r3
   223b4:	add	ip, pc, ip
   223b8:	str	r1, [sp, #36]	; 0x24
   223bc:	add	lr, pc, lr
   223c0:	str	r2, [sp, #80]	; 0x50
   223c4:	str	r3, [sp, #84]	; 0x54
   223c8:	str	ip, [sp, #88]	; 0x58
   223cc:	str	lr, [sp, #92]	; 0x5c
   223d0:	b	22448 <__assert_fail@plt+0x10868>
   223d4:	ldr	ip, [sp, #32]
   223d8:	cmp	ip, #0
   223dc:	beq	22400 <__assert_fail@plt+0x10820>
   223e0:	ldr	r2, [pc, #1488]	; 229b8 <__assert_fail@plt+0x10dd8>
   223e4:	cmp	fp, #0
   223e8:	mov	r0, sl
   223ec:	mov	r1, #1
   223f0:	add	r2, pc, r2
   223f4:	ldr	r3, [sp, #32]
   223f8:	movne	r2, fp
   223fc:	blx	r3
   22400:	ldr	ip, [sp, #24]
   22404:	tst	ip, #16
   22408:	beq	22628 <__assert_fail@plt+0x10a48>
   2240c:	mov	r0, fp
   22410:	bl	117c0 <free@plt>
   22414:	ldrb	r3, [sl, #56]	; 0x38
   22418:	tst	r3, #4
   2241c:	beq	225a8 <__assert_fail@plt+0x109c8>
   22420:	cmp	r5, #0
   22424:	blt	22828 <__assert_fail@plt+0x10c48>
   22428:	ldr	r2, [sp, #20]
   2242c:	ldr	r3, [sp, #100]	; 0x64
   22430:	ldr	r2, [r2]
   22434:	cmp	r2, r3
   22438:	str	r2, [sp, #20]
   2243c:	beq	22610 <__assert_fail@plt+0x10a30>
   22440:	cmp	r2, #0
   22444:	beq	22964 <__assert_fail@plt+0x10d84>
   22448:	ldr	r1, [sp, #20]
   2244c:	ldr	sl, [r1, #8]
   22450:	mov	r0, sl
   22454:	bl	21570 <__assert_fail@plt+0xf990>
   22458:	mov	r4, r0
   2245c:	mov	r0, sl
   22460:	bl	21704 <__assert_fail@plt+0xfb24>
   22464:	ldr	r2, [sp, #44]	; 0x2c
   22468:	cmp	r2, #0
   2246c:	mov	r7, r0
   22470:	beq	225f0 <__assert_fail@plt+0x10a10>
   22474:	ldr	r3, [sp, #28]
   22478:	ldr	r6, [sp, #48]	; 0x30
   2247c:	cmp	sl, r3
   22480:	movne	r6, #0
   22484:	cmp	r4, #0
   22488:	beq	22620 <__assert_fail@plt+0x10a40>
   2248c:	mov	r0, r4
   22490:	bl	119a0 <strlen@plt>
   22494:	mov	r8, r0
   22498:	cmp	r6, #0
   2249c:	moveq	r9, r6
   224a0:	beq	224b0 <__assert_fail@plt+0x108d0>
   224a4:	mov	r0, r6
   224a8:	bl	119a0 <strlen@plt>
   224ac:	mov	r9, r0
   224b0:	orrs	r3, r9, r8
   224b4:	moveq	fp, r3
   224b8:	beq	22510 <__assert_fail@plt+0x10930>
   224bc:	add	r0, r8, #2
   224c0:	add	r0, r0, r9
   224c4:	bl	11910 <malloc@plt>
   224c8:	cmp	r4, #0
   224cc:	mov	fp, r0
   224d0:	beq	224ec <__assert_fail@plt+0x1090c>
   224d4:	mov	r2, r8
   224d8:	mov	r1, r4
   224dc:	bl	117e4 <memcpy@plt>
   224e0:	mov	r3, #32
   224e4:	strb	r3, [fp, r8]
   224e8:	add	r8, r8, #1
   224ec:	cmp	r6, #0
   224f0:	add	r8, fp, r8
   224f4:	beq	22508 <__assert_fail@plt+0x10928>
   224f8:	mov	r1, r6
   224fc:	mov	r2, r9
   22500:	mov	r0, r8
   22504:	bl	117e4 <memcpy@plt>
   22508:	mov	r3, #0
   2250c:	strb	r3, [r8, r9]
   22510:	cmp	r7, #0
   22514:	beq	22528 <__assert_fail@plt+0x10948>
   22518:	ldrb	r3, [sl, #56]	; 0x38
   2251c:	ubfx	r8, r3, #1, #1
   22520:	cmp	r8, #0
   22524:	beq	223d4 <__assert_fail@plt+0x107f4>
   22528:	ldr	r2, [sp, #32]
   2252c:	cmp	r2, #0
   22530:	beq	22550 <__assert_fail@plt+0x10970>
   22534:	ldr	r2, [sp, #52]	; 0x34
   22538:	cmp	fp, #0
   2253c:	mov	r0, sl
   22540:	mov	r1, #0
   22544:	ldr	r3, [sp, #32]
   22548:	movne	r2, fp
   2254c:	blx	r3
   22550:	ldr	ip, [sp, #24]
   22554:	tst	ip, #16
   22558:	bne	2240c <__assert_fail@plt+0x1082c>
   2255c:	mov	r0, sl
   22560:	mov	r1, ip
   22564:	mov	r2, fp
   22568:	bl	211b0 <__assert_fail@plt+0xf5d0>
   2256c:	ldr	lr, [sp, #28]
   22570:	cmn	r0, #17
   22574:	mov	r5, r0
   22578:	movne	r6, #0
   2257c:	moveq	r6, #1
   22580:	cmp	lr, sl
   22584:	movne	r8, #0
   22588:	andeq	r8, r6, #1
   2258c:	mov	r0, fp
   22590:	bl	117c0 <free@plt>
   22594:	cmp	r8, #0
   22598:	beq	225e4 <__assert_fail@plt+0x10a04>
   2259c:	ldr	r1, [sp, #24]
   225a0:	tst	r1, #32
   225a4:	bne	2281c <__assert_fail@plt+0x10c3c>
   225a8:	mov	r5, #0
   225ac:	b	22428 <__assert_fail@plt+0x10848>
   225b0:	ldr	r1, [sp, #28]
   225b4:	ldr	r0, [r1], #8
   225b8:	bl	201f0 <__assert_fail@plt+0xe610>
   225bc:	cmp	r0, #0
   225c0:	beq	22330 <__assert_fail@plt+0x10750>
   225c4:	mov	r0, r5
   225c8:	ldr	ip, [sp, #56]	; 0x38
   225cc:	ldr	r2, [sp, #108]	; 0x6c
   225d0:	ldr	r3, [ip]
   225d4:	cmp	r2, r3
   225d8:	bne	2292c <__assert_fail@plt+0x10d4c>
   225dc:	add	sp, sp, #116	; 0x74
   225e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225e4:	cmp	r6, #0
   225e8:	beq	22414 <__assert_fail@plt+0x10834>
   225ec:	b	225a8 <__assert_fail@plt+0x109c8>
   225f0:	mov	r0, sl
   225f4:	bl	22014 <__assert_fail@plt+0x10434>
   225f8:	cmp	r0, #1
   225fc:	bhi	22474 <__assert_fail@plt+0x10894>
   22600:	ldr	r3, [sp, #28]
   22604:	cmp	r3, sl
   22608:	beq	2259c <__assert_fail@plt+0x109bc>
   2260c:	b	225a8 <__assert_fail@plt+0x109c8>
   22610:	ldr	r0, [sp, #20]
   22614:	bl	207dc <__assert_fail@plt+0xebfc>
   22618:	mov	r0, r5
   2261c:	b	225c8 <__assert_fail@plt+0x109e8>
   22620:	mov	r8, r4
   22624:	b	22498 <__assert_fail@plt+0x108b8>
   22628:	mov	r0, sl
   2262c:	bl	21704 <__assert_fail@plt+0xfb24>
   22630:	subs	r4, r0, #0
   22634:	beq	22930 <__assert_fail@plt+0x10d50>
   22638:	cmp	fp, #0
   2263c:	beq	22808 <__assert_fail@plt+0x10c28>
   22640:	mov	r0, fp
   22644:	str	fp, [sp, #40]	; 0x28
   22648:	bl	119a0 <strlen@plt>
   2264c:	mov	r6, r0
   22650:	mov	r0, r4
   22654:	bl	119a0 <strlen@plt>
   22658:	mov	r5, r0
   2265c:	mov	r0, r4
   22660:	add	r1, r5, #1
   22664:	bl	1b1a8 <__assert_fail@plt+0x95c8>
   22668:	subs	r4, r0, #0
   2266c:	beq	22920 <__assert_fail@plt+0x10d40>
   22670:	sub	r3, r6, #13
   22674:	str	sl, [sp, #64]	; 0x40
   22678:	str	fp, [sp, #68]	; 0x44
   2267c:	mov	sl, r6
   22680:	str	r8, [sp, #72]	; 0x48
   22684:	mov	fp, r3
   22688:	b	226f4 <__assert_fail@plt+0x10b14>
   2268c:	rsb	r7, r4, r0
   22690:	add	r9, r0, #13
   22694:	rsb	r8, r7, r5
   22698:	add	r5, r5, fp
   2269c:	add	r0, r5, #1
   226a0:	sub	r8, r8, #13
   226a4:	bl	11910 <malloc@plt>
   226a8:	subs	r6, r0, #0
   226ac:	beq	22760 <__assert_fail@plt+0x10b80>
   226b0:	mov	r1, r4
   226b4:	mov	r2, r7
   226b8:	bl	117e4 <memcpy@plt>
   226bc:	ldr	r1, [sp, #40]	; 0x28
   226c0:	mov	r2, sl
   226c4:	add	r0, r6, r7
   226c8:	bl	117e4 <memcpy@plt>
   226cc:	add	r0, r7, sl
   226d0:	mov	r1, r9
   226d4:	add	r0, r6, r0
   226d8:	mov	r2, r8
   226dc:	bl	117e4 <memcpy@plt>
   226e0:	mov	r1, #0
   226e4:	mov	r0, r4
   226e8:	strb	r1, [r6, r5]
   226ec:	mov	r4, r6
   226f0:	bl	117c0 <free@plt>
   226f4:	mov	r0, r4
   226f8:	ldr	r1, [sp, #36]	; 0x24
   226fc:	bl	11724 <strstr@plt>
   22700:	cmp	r0, #0
   22704:	bne	2268c <__assert_fail@plt+0x10aac>
   22708:	ldr	r2, [sp, #60]	; 0x3c
   2270c:	ldr	sl, [sp, #64]	; 0x40
   22710:	cmp	r2, #0
   22714:	ldr	fp, [sp, #68]	; 0x44
   22718:	ldr	r8, [sp, #72]	; 0x48
   2271c:	mov	r0, sl
   22720:	beq	22830 <__assert_fail@plt+0x10c50>
   22724:	mov	r1, r4
   22728:	ldr	r2, [sp, #76]	; 0x4c
   2272c:	ldr	r3, [sp, #60]	; 0x3c
   22730:	blx	r3
   22734:	cmn	r0, #17
   22738:	ldr	ip, [sp, #28]
   2273c:	mov	r5, r0
   22740:	movne	r6, #0
   22744:	moveq	r6, #1
   22748:	cmp	ip, sl
   2274c:	movne	r8, #0
   22750:	andeq	r8, r6, #1
   22754:	mov	r0, r4
   22758:	bl	117c0 <free@plt>
   2275c:	b	2258c <__assert_fail@plt+0x109ac>
   22760:	ldr	sl, [sp, #64]	; 0x40
   22764:	mvn	r5, #11
   22768:	ldr	fp, [sp, #68]	; 0x44
   2276c:	ldr	r8, [sp, #72]	; 0x48
   22770:	b	22754 <__assert_fail@plt+0x10b74>
   22774:	bl	22014 <__assert_fail@plt+0x10434>
   22778:	cmp	r0, #1
   2277c:	bhi	222fc <__assert_fail@plt+0x1071c>
   22780:	ldr	r1, [sp, #24]
   22784:	ands	r0, r1, #32
   22788:	mvnne	r0, #16
   2278c:	b	225c8 <__assert_fail@plt+0x109e8>
   22790:	ldr	r3, [sp, #24]
   22794:	mov	r0, r1
   22798:	mov	r1, #1
   2279c:	ubfx	r2, r3, #2, #1
   227a0:	add	r3, sp, #100	; 0x64
   227a4:	bl	21b34 <__assert_fail@plt+0xff54>
   227a8:	subs	r5, r0, #0
   227ac:	bge	2236c <__assert_fail@plt+0x1078c>
   227b0:	ldr	r0, [sp, #100]	; 0x64
   227b4:	bl	207dc <__assert_fail@plt+0xebfc>
   227b8:	mov	r0, r5
   227bc:	b	225c8 <__assert_fail@plt+0x109e8>
   227c0:	ldr	ip, [sp, #28]
   227c4:	mov	r1, #1
   227c8:	ldr	r2, [sp, #100]	; 0x64
   227cc:	add	r3, sp, #104	; 0x68
   227d0:	ldr	r0, [ip]
   227d4:	mov	ip, #0
   227d8:	str	ip, [sp, #104]	; 0x68
   227dc:	bl	21498 <__assert_fail@plt+0xf8b8>
   227e0:	subs	r5, r0, #0
   227e4:	blt	225c4 <__assert_fail@plt+0x109e4>
   227e8:	ldr	r0, [sp, #100]	; 0x64
   227ec:	bl	207dc <__assert_fail@plt+0xebfc>
   227f0:	ldr	r3, [sp, #104]	; 0x68
   227f4:	cmp	r3, #0
   227f8:	beq	22910 <__assert_fail@plt+0x10d30>
   227fc:	str	r3, [sp, #100]	; 0x64
   22800:	str	r3, [sp, #20]
   22804:	b	22388 <__assert_fail@plt+0x107a8>
   22808:	ldr	lr, [pc, #428]	; 229bc <__assert_fail@plt+0x10ddc>
   2280c:	mov	r6, fp
   22810:	add	lr, pc, lr
   22814:	str	lr, [sp, #40]	; 0x28
   22818:	b	22650 <__assert_fail@plt+0x10a70>
   2281c:	ldr	r0, [sp, #100]	; 0x64
   22820:	mvn	r5, #16
   22824:	b	22614 <__assert_fail@plt+0x10a34>
   22828:	ldr	r0, [sp, #100]	; 0x64
   2282c:	b	22614 <__assert_fail@plt+0x10a34>
   22830:	bl	21044 <__assert_fail@plt+0xf464>
   22834:	mov	r6, r0
   22838:	mov	r2, #1
   2283c:	ldr	r0, [sp, #80]	; 0x50
   22840:	mov	r1, r6
   22844:	bl	119b8 <setenv@plt>
   22848:	mov	r0, r4
   2284c:	bl	11934 <system@plt>
   22850:	mov	r5, r0
   22854:	ldr	r0, [sp, #84]	; 0x54
   22858:	bl	11b80 <unsetenv@plt>
   2285c:	cmn	r5, #1
   22860:	beq	22870 <__assert_fail@plt+0x10c90>
   22864:	ubfx	r3, r5, #8, #8
   22868:	cmp	r3, #0
   2286c:	beq	228b4 <__assert_fail@plt+0x10cd4>
   22870:	ldr	r0, [sl]
   22874:	bl	1bc7c <__assert_fail@plt+0xa09c>
   22878:	cmp	r0, #2
   2287c:	bgt	228d4 <__assert_fail@plt+0x10cf4>
   22880:	cmn	r5, #1
   22884:	moveq	r6, #0
   22888:	beq	22754 <__assert_fail@plt+0x10b74>
   2288c:	ubfx	r5, r5, #8, #8
   22890:	ldr	r1, [sp, #28]
   22894:	rsb	r5, r5, #0
   22898:	cmn	r5, #17
   2289c:	movne	r6, #0
   228a0:	moveq	r6, #1
   228a4:	cmp	r1, sl
   228a8:	movne	r8, #0
   228ac:	andeq	r8, r6, #1
   228b0:	b	22754 <__assert_fail@plt+0x10b74>
   228b4:	cmn	r5, #17
   228b8:	ldr	lr, [sp, #28]
   228bc:	movne	r6, #0
   228c0:	moveq	r6, #1
   228c4:	cmp	lr, sl
   228c8:	movne	r8, #0
   228cc:	andeq	r8, r6, #1
   228d0:	b	22754 <__assert_fail@plt+0x10b74>
   228d4:	ldr	lr, [sp, #92]	; 0x5c
   228d8:	mov	r1, #3
   228dc:	ldr	r3, [pc, #220]	; 229c0 <__assert_fail@plt+0x10de0>
   228e0:	ldr	ip, [pc, #220]	; 229c4 <__assert_fail@plt+0x10de4>
   228e4:	ldr	r0, [sl]
   228e8:	add	r3, pc, r3
   228ec:	add	ip, pc, ip
   228f0:	str	r3, [sp, #4]
   228f4:	ldr	r2, [sp, #88]	; 0x58
   228f8:	movw	r3, #977	; 0x3d1
   228fc:	str	lr, [sp]
   22900:	str	r6, [sp, #12]
   22904:	str	ip, [sp, #8]
   22908:	bl	1bbe4 <__assert_fail@plt+0xa004>
   2290c:	b	22880 <__assert_fail@plt+0x10ca0>
   22910:	mov	r0, #65536	; 0x10000
   22914:	b	225c8 <__assert_fail@plt+0x109e8>
   22918:	mvn	r0, #1
   2291c:	b	225c8 <__assert_fail@plt+0x109e8>
   22920:	mov	r6, r4
   22924:	mvn	r5, #11
   22928:	b	22754 <__assert_fail@plt+0x10b74>
   2292c:	bl	11838 <__stack_chk_fail@plt>
   22930:	ldr	r0, [pc, #144]	; 229c8 <__assert_fail@plt+0x10de8>
   22934:	mov	r2, #1000	; 0x3e8
   22938:	ldr	r1, [pc, #140]	; 229cc <__assert_fail@plt+0x10dec>
   2293c:	ldr	r3, [pc, #140]	; 229d0 <__assert_fail@plt+0x10df0>
   22940:	add	r0, pc, r0
   22944:	add	r1, pc, r1
   22948:	add	r3, pc, r3
   2294c:	bl	11be0 <__assert_fail@plt>
   22950:	mov	r5, r0
   22954:	mov	r0, r4
   22958:	bl	117c0 <free@plt>
   2295c:	mov	r0, r5
   22960:	bl	11b8c <_Unwind_Resume@plt>
   22964:	mov	r0, r3
   22968:	b	22614 <__assert_fail@plt+0x10a34>
   2296c:	mov	r5, r0
   22970:	mov	r4, #0
   22974:	b	22954 <__assert_fail@plt+0x10d74>
   22978:	ldr	r0, [pc, #84]	; 229d4 <__assert_fail@plt+0x10df4>
   2297c:	movw	r2, #1176	; 0x498
   22980:	ldr	r1, [pc, #80]	; 229d8 <__assert_fail@plt+0x10df8>
   22984:	ldr	r3, [pc, #80]	; 229dc <__assert_fail@plt+0x10dfc>
   22988:	add	r0, pc, r0
   2298c:	add	r1, pc, r1
   22990:	add	r3, pc, r3
   22994:	bl	11be0 <__assert_fail@plt>
   22998:	andeq	ip, r1, ip, asr #26
   2299c:	andeq	r0, r0, ip, lsr #3
   229a0:	andeq	sl, r0, r4, lsr #32
   229a4:	andeq	r8, r0, r8, ror #8
   229a8:	andeq	r8, r0, r8, ror r4
   229ac:	andeq	r8, r0, ip, ror #8
   229b0:	andeq	fp, r0, r8, lsr #4
   229b4:	andeq	fp, r0, r0, lsl r8
   229b8:	andeq	r9, r0, r4, asr #31
   229bc:	andeq	r9, r0, r4, lsr #23
   229c0:	andeq	r7, r0, r4, asr #30
   229c4:	andeq	r8, r0, ip, ror r8
   229c8:	andeq	r8, r0, r4, asr r8
   229cc:	muleq	r0, r8, ip
   229d0:	andeq	sl, r0, r8, ror ip
   229d4:	andeq	sl, r0, ip, asr pc
   229d8:	andeq	sl, r0, r0, asr ip
   229dc:	andeq	fp, r0, r0, lsr r1
   229e0:	ldr	r2, [pc, #928]	; 22d88 <__assert_fail@plt+0x111a8>
   229e4:	movw	r3, #61424	; 0xeff0
   229e8:	ldr	r1, [pc, #924]	; 22d8c <__assert_fail@plt+0x111ac>
   229ec:	movt	r3, #65535	; 0xffff
   229f0:	add	r2, pc, r2
   229f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229f8:	sub	sp, sp, #4096	; 0x1000
   229fc:	ldr	r1, [r2, r1]
   22a00:	sub	sp, sp, #44	; 0x2c
   22a04:	subs	r7, r0, #0
   22a08:	mvn	r0, #1
   22a0c:	str	r1, [sp, #16]
   22a10:	add	r1, sp, #4096	; 0x1000
   22a14:	ldr	r2, [sp, #16]
   22a18:	add	r1, r1, #40	; 0x28
   22a1c:	str	r0, [r1, r3]
   22a20:	add	r1, sp, #8192	; 0x2000
   22a24:	ldr	r3, [r2]
   22a28:	str	r3, [r1, #-4060]	; 0xfffff024
   22a2c:	beq	22ac8 <__assert_fail@plt+0x10ee8>
   22a30:	ldr	r0, [pc, #856]	; 22d90 <__assert_fail@plt+0x111b0>
   22a34:	add	r9, sp, #40	; 0x28
   22a38:	sub	r4, r9, #4
   22a3c:	mov	r1, #4096	; 0x1000
   22a40:	add	r0, pc, r0
   22a44:	str	r0, [sp]
   22a48:	ldr	ip, [r7, #8]
   22a4c:	mov	r3, r1
   22a50:	mov	r2, #1
   22a54:	mov	r0, r4
   22a58:	str	ip, [sp, #4]
   22a5c:	bl	11bd4 <__snprintf_chk@plt>
   22a60:	mov	r0, r4
   22a64:	mov	r1, #524288	; 0x80000
   22a68:	bl	118e0 <open64@plt>
   22a6c:	subs	r2, r0, #0
   22a70:	str	r2, [sp, #20]
   22a74:	blt	22aec <__assert_fail@plt+0x10f0c>
   22a78:	ldr	r1, [pc, #788]	; 22d94 <__assert_fail@plt+0x111b4>
   22a7c:	mov	r2, #524288	; 0x80000
   22a80:	add	r1, pc, r1
   22a84:	bl	119c4 <openat64@plt>
   22a88:	subs	r5, r0, #0
   22a8c:	blt	22afc <__assert_fail@plt+0x10f1c>
   22a90:	sub	r1, r9, #16
   22a94:	mov	r2, #10
   22a98:	bl	1b540 <__assert_fail@plt+0x9960>
   22a9c:	cmp	r0, #0
   22aa0:	blt	22c6c <__assert_fail@plt+0x1108c>
   22aa4:	mov	r0, r5
   22aa8:	bl	11bbc <close@plt>
   22aac:	ldr	r0, [sp, #20]
   22ab0:	bl	11bbc <close@plt>
   22ab4:	add	r1, sp, #4096	; 0x1000
   22ab8:	movw	r3, #61424	; 0xeff0
   22abc:	add	r1, r1, #40	; 0x28
   22ac0:	movt	r3, #65535	; 0xffff
   22ac4:	ldr	r0, [r1, r3]
   22ac8:	ldr	r1, [sp, #16]
   22acc:	add	r3, sp, #8192	; 0x2000
   22ad0:	ldr	r2, [r3, #-4060]	; 0xfffff024
   22ad4:	ldr	r3, [r1]
   22ad8:	cmp	r2, r3
   22adc:	bne	22d84 <__assert_fail@plt+0x111a4>
   22ae0:	add	sp, sp, #4096	; 0x1000
   22ae4:	add	sp, sp, #44	; 0x2c
   22ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22aec:	bl	119f4 <__errno_location@plt>
   22af0:	ldr	r0, [r0]
   22af4:	rsb	r0, r0, #0
   22af8:	b	22ac8 <__assert_fail@plt+0x10ee8>
   22afc:	ldr	r0, [pc, #660]	; 22d98 <__assert_fail@plt+0x111b8>
   22b00:	sub	sl, r9, #12
   22b04:	ldr	r1, [pc, #656]	; 22d9c <__assert_fail@plt+0x111bc>
   22b08:	mov	r6, #0
   22b0c:	add	r0, pc, r0
   22b10:	ldr	fp, [pc, #648]	; 22da0 <__assert_fail@plt+0x111c0>
   22b14:	add	r1, pc, r1
   22b18:	bl	11b44 <fopen64@plt>
   22b1c:	add	fp, pc, fp
   22b20:	subs	r5, r0, #0
   22b24:	beq	22ccc <__assert_fail@plt+0x110ec>
   22b28:	mov	r0, r4
   22b2c:	mov	r1, #4096	; 0x1000
   22b30:	mov	r2, r5
   22b34:	bl	117cc <fgets@plt>
   22b38:	cmp	r0, #0
   22b3c:	beq	22c60 <__assert_fail@plt+0x11080>
   22b40:	mov	r0, r4
   22b44:	add	r6, r6, #1
   22b48:	bl	119a0 <strlen@plt>
   22b4c:	mov	r1, fp
   22b50:	mov	r2, sl
   22b54:	mov	r8, r0
   22b58:	mov	r0, r4
   22b5c:	bl	11808 <__strtok_r@plt>
   22b60:	cmp	r0, #0
   22b64:	beq	22b78 <__assert_fail@plt+0x10f98>
   22b68:	ldr	r1, [r7, #8]
   22b6c:	bl	11754 <strcmp@plt>
   22b70:	cmp	r0, #0
   22b74:	beq	22bd4 <__assert_fail@plt+0x10ff4>
   22b78:	add	r3, sp, #4096	; 0x1000
   22b7c:	add	r3, r3, #40	; 0x28
   22b80:	add	r8, r3, r8
   22b84:	sub	r8, r8, #4096	; 0x1000
   22b88:	ldrb	r3, [r8, #-5]
   22b8c:	cmp	r3, #10
   22b90:	beq	22b28 <__assert_fail@plt+0x10f48>
   22b94:	mov	r0, r4
   22b98:	mov	r1, #4096	; 0x1000
   22b9c:	mov	r2, r5
   22ba0:	bl	117cc <fgets@plt>
   22ba4:	cmp	r0, #0
   22ba8:	beq	22b28 <__assert_fail@plt+0x10f48>
   22bac:	mov	r0, r4
   22bb0:	bl	119a0 <strlen@plt>
   22bb4:	add	r3, sp, #4096	; 0x1000
   22bb8:	add	r3, r3, #40	; 0x28
   22bbc:	add	r0, r3, r0
   22bc0:	sub	r0, r0, #4096	; 0x1000
   22bc4:	ldrb	r3, [r0, #-5]
   22bc8:	cmp	r3, #10
   22bcc:	bne	22b94 <__assert_fail@plt+0x10fb4>
   22bd0:	b	22b28 <__assert_fail@plt+0x10f48>
   22bd4:	mov	r1, fp
   22bd8:	mov	r2, sl
   22bdc:	bl	11808 <__strtok_r@plt>
   22be0:	subs	r4, r0, #0
   22be4:	beq	22d3c <__assert_fail@plt+0x1115c>
   22be8:	sub	r1, r9, #8
   22bec:	mov	r2, #10
   22bf0:	bl	11760 <strtol@plt>
   22bf4:	add	r1, sp, #4096	; 0x1000
   22bf8:	movw	r3, #61432	; 0xeff8
   22bfc:	add	r1, r1, #40	; 0x28
   22c00:	movt	r3, #65535	; 0xffff
   22c04:	ldr	r3, [r1, r3]
   22c08:	cmp	r4, r3
   22c0c:	beq	22c1c <__assert_fail@plt+0x1103c>
   22c10:	ldrb	r3, [r3]
   22c14:	cmp	r3, #0
   22c18:	beq	22cb4 <__assert_fail@plt+0x110d4>
   22c1c:	ldr	r0, [r7]
   22c20:	bl	1bc7c <__assert_fail@plt+0xa09c>
   22c24:	cmp	r0, #2
   22c28:	ble	22c60 <__assert_fail@plt+0x11080>
   22c2c:	ldr	r2, [pc, #368]	; 22da4 <__assert_fail@plt+0x111c4>
   22c30:	mov	r1, #3
   22c34:	ldr	r0, [r7]
   22c38:	movw	r3, #1850	; 0x73a
   22c3c:	add	r2, pc, r2
   22c40:	ldr	ip, [pc, #352]	; 22da8 <__assert_fail@plt+0x111c8>
   22c44:	str	r2, [sp, #4]
   22c48:	ldr	r2, [pc, #348]	; 22dac <__assert_fail@plt+0x111cc>
   22c4c:	add	ip, pc, ip
   22c50:	str	r6, [sp, #8]
   22c54:	str	ip, [sp]
   22c58:	add	r2, pc, r2
   22c5c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   22c60:	mov	r0, r5
   22c64:	bl	11a84 <fclose@plt>
   22c68:	b	22aac <__assert_fail@plt+0x10ecc>
   22c6c:	ldr	r0, [r7]
   22c70:	bl	1bc7c <__assert_fail@plt+0xa09c>
   22c74:	cmp	r0, #2
   22c78:	ble	22aa4 <__assert_fail@plt+0x10ec4>
   22c7c:	ldr	r2, [pc, #300]	; 22db0 <__assert_fail@plt+0x111d0>
   22c80:	mov	r1, #3
   22c84:	ldr	r0, [r7]
   22c88:	movw	r3, #1816	; 0x718
   22c8c:	add	r2, pc, r2
   22c90:	ldr	ip, [pc, #284]	; 22db4 <__assert_fail@plt+0x111d4>
   22c94:	str	r2, [sp, #4]
   22c98:	ldr	r2, [pc, #280]	; 22db8 <__assert_fail@plt+0x111d8>
   22c9c:	add	ip, pc, ip
   22ca0:	str	r4, [sp, #8]
   22ca4:	str	ip, [sp]
   22ca8:	add	r2, pc, r2
   22cac:	bl	1bbe4 <__assert_fail@plt+0xa004>
   22cb0:	b	22aa4 <__assert_fail@plt+0x10ec4>
   22cb4:	add	r2, sp, #4096	; 0x1000
   22cb8:	movw	r3, #61424	; 0xeff0
   22cbc:	add	r2, r2, #40	; 0x28
   22cc0:	movt	r3, #65535	; 0xffff
   22cc4:	str	r0, [r2, r3]
   22cc8:	b	22c60 <__assert_fail@plt+0x11080>
   22ccc:	bl	119f4 <__errno_location@plt>
   22cd0:	ldr	r5, [r0]
   22cd4:	mov	r4, r0
   22cd8:	ldr	r0, [r7]
   22cdc:	bl	1bc7c <__assert_fail@plt+0xa09c>
   22ce0:	rsb	r5, r5, #0
   22ce4:	cmp	r0, #2
   22ce8:	ble	22d2c <__assert_fail@plt+0x1114c>
   22cec:	ldr	r0, [r4]
   22cf0:	ldr	r4, [r7]
   22cf4:	bl	11928 <strerror@plt>
   22cf8:	ldr	lr, [pc, #188]	; 22dbc <__assert_fail@plt+0x111dc>
   22cfc:	mov	r1, #3
   22d00:	ldr	ip, [pc, #184]	; 22dc0 <__assert_fail@plt+0x111e0>
   22d04:	movw	r3, #1826	; 0x722
   22d08:	ldr	r2, [pc, #180]	; 22dc4 <__assert_fail@plt+0x111e4>
   22d0c:	add	lr, pc, lr
   22d10:	add	ip, pc, ip
   22d14:	str	lr, [sp]
   22d18:	add	r2, pc, r2
   22d1c:	str	ip, [sp, #4]
   22d20:	str	r0, [sp, #8]
   22d24:	mov	r0, r4
   22d28:	bl	1bbe4 <__assert_fail@plt+0xa004>
   22d2c:	ldr	r0, [sp, #20]
   22d30:	bl	11bbc <close@plt>
   22d34:	mov	r0, r5
   22d38:	b	22ac8 <__assert_fail@plt+0x10ee8>
   22d3c:	ldr	r0, [r7]
   22d40:	bl	1bc7c <__assert_fail@plt+0xa09c>
   22d44:	cmp	r0, #2
   22d48:	ble	22c60 <__assert_fail@plt+0x11080>
   22d4c:	ldr	r2, [pc, #116]	; 22dc8 <__assert_fail@plt+0x111e8>
   22d50:	mov	r1, #3
   22d54:	ldr	r0, [r7]
   22d58:	movw	r3, #1843	; 0x733
   22d5c:	add	r2, pc, r2
   22d60:	ldr	ip, [pc, #100]	; 22dcc <__assert_fail@plt+0x111ec>
   22d64:	str	r2, [sp, #4]
   22d68:	ldr	r2, [pc, #96]	; 22dd0 <__assert_fail@plt+0x111f0>
   22d6c:	add	ip, pc, ip
   22d70:	str	r6, [sp, #8]
   22d74:	str	ip, [sp]
   22d78:	add	r2, pc, r2
   22d7c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   22d80:	b	22c60 <__assert_fail@plt+0x11080>
   22d84:	bl	11838 <__stack_chk_fail@plt>
   22d88:	andeq	ip, r1, r8, lsl #12
   22d8c:	andeq	r0, r0, ip, lsr #3
   22d90:	ldrdeq	sl, [r0], -r0
   22d94:	andeq	sl, r0, r0, lsr #29
   22d98:	strdeq	sl, [r0], -r8
   22d9c:	andeq	sl, r0, ip, asr #2
   22da0:	andeq	r9, r0, r8, lsr #11
   22da4:	andeq	sl, r0, r4, lsl sp
   22da8:	ldrdeq	sl, [r0], -r0
   22dac:	andeq	sl, r0, r4, lsl #19
   22db0:	andeq	sl, r0, r0, lsr #25
   22db4:	andeq	sl, r0, r0, lsl #17
   22db8:	andeq	sl, r0, r4, lsr r9
   22dbc:	andeq	sl, r0, r0, lsl r8
   22dc0:	andeq	sl, r0, r4, lsl #22
   22dc4:	andeq	sl, r0, r4, asr #17
   22dc8:	strdeq	sl, [r0], -r4
   22dcc:			; <UNDEFINED> instruction: 0x0000a7b0
   22dd0:	andeq	sl, r0, r4, ror #16
   22dd4:	ldr	r3, [pc, #324]	; 22f20 <__assert_fail@plt+0x11340>
   22dd8:	ldr	r2, [pc, #324]	; 22f24 <__assert_fail@plt+0x11344>
   22ddc:	add	r3, pc, r3
   22de0:	push	{r4, r5, r6, r7, r8, lr}
   22de4:	sub	sp, sp, #4096	; 0x1000
   22de8:	ldr	r4, [r3, r2]
   22dec:	sub	sp, sp, #24
   22df0:	add	r2, sp, #8192	; 0x2000
   22df4:	subs	r7, r0, #0
   22df8:	ldr	r3, [r4]
   22dfc:	str	r3, [r2, #-4076]	; 0xfffff014
   22e00:	beq	22f14 <__assert_fail@plt+0x11334>
   22e04:	ldr	r0, [pc, #284]	; 22f28 <__assert_fail@plt+0x11348>
   22e08:	add	r6, sp, #24
   22e0c:	sub	r5, r6, #4
   22e10:	mov	r1, #4096	; 0x1000
   22e14:	add	r0, pc, r0
   22e18:	str	r0, [sp]
   22e1c:	ldr	ip, [r7, #8]
   22e20:	mov	r3, r1
   22e24:	mov	r2, #1
   22e28:	mov	r0, r5
   22e2c:	str	ip, [sp, #4]
   22e30:	bl	11bd4 <__snprintf_chk@plt>
   22e34:	mov	r0, r5
   22e38:	mov	r1, #524288	; 0x80000
   22e3c:	bl	118e0 <open64@plt>
   22e40:	subs	r8, r0, #0
   22e44:	blt	22e9c <__assert_fail@plt+0x112bc>
   22e48:	sub	r1, r6, #8
   22e4c:	mov	r2, #10
   22e50:	bl	1b540 <__assert_fail@plt+0x9960>
   22e54:	mov	r6, r0
   22e58:	mov	r0, r8
   22e5c:	bl	11bbc <close@plt>
   22e60:	cmp	r6, #0
   22e64:	blt	22eb4 <__assert_fail@plt+0x112d4>
   22e68:	add	r2, sp, #4096	; 0x1000
   22e6c:	movw	r3, #61432	; 0xeff8
   22e70:	add	r2, r2, #24
   22e74:	movt	r3, #65535	; 0xffff
   22e78:	ldr	r0, [r2, r3]
   22e7c:	add	r3, sp, #8192	; 0x2000
   22e80:	ldr	r2, [r3, #-4076]	; 0xfffff014
   22e84:	ldr	r3, [r4]
   22e88:	cmp	r2, r3
   22e8c:	bne	22f1c <__assert_fail@plt+0x1133c>
   22e90:	add	sp, sp, #4096	; 0x1000
   22e94:	add	sp, sp, #24
   22e98:	pop	{r4, r5, r6, r7, r8, pc}
   22e9c:	bl	119f4 <__errno_location@plt>
   22ea0:	ldr	r0, [r0]
   22ea4:	rsb	r5, r0, #0
   22ea8:	bl	11928 <strerror@plt>
   22eac:	mov	r0, r5
   22eb0:	b	22e7c <__assert_fail@plt+0x1129c>
   22eb4:	ldr	r0, [r7]
   22eb8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   22ebc:	cmp	r0, #2
   22ec0:	movle	r0, r6
   22ec4:	ble	22e7c <__assert_fail@plt+0x1129c>
   22ec8:	rsb	r0, r6, #0
   22ecc:	ldr	r7, [r7]
   22ed0:	bl	11928 <strerror@plt>
   22ed4:	ldr	r2, [pc, #80]	; 22f2c <__assert_fail@plt+0x1134c>
   22ed8:	ldr	ip, [pc, #80]	; 22f30 <__assert_fail@plt+0x11350>
   22edc:	mov	r1, #3
   22ee0:	add	r2, pc, r2
   22ee4:	str	r2, [sp, #4]
   22ee8:	ldr	r2, [pc, #68]	; 22f34 <__assert_fail@plt+0x11354>
   22eec:	add	ip, pc, ip
   22ef0:	str	r5, [sp, #8]
   22ef4:	movw	r3, #1898	; 0x76a
   22ef8:	str	ip, [sp]
   22efc:	add	r2, pc, r2
   22f00:	str	r0, [sp, #12]
   22f04:	mov	r0, r7
   22f08:	bl	1bbe4 <__assert_fail@plt+0xa004>
   22f0c:	mov	r0, r6
   22f10:	b	22e7c <__assert_fail@plt+0x1129c>
   22f14:	mvn	r0, #1
   22f18:	b	22e7c <__assert_fail@plt+0x1129c>
   22f1c:	bl	11838 <__stack_chk_fail@plt>
   22f20:	andeq	ip, r1, ip, lsl r2
   22f24:	andeq	r0, r0, ip, lsr #3
   22f28:	andeq	sl, r0, r8, ror #22
   22f2c:			; <UNDEFINED> instruction: 0x0000aab4
   22f30:	andeq	sl, r0, r8, asr #12
   22f34:	andeq	sl, r0, r0, ror #13
   22f38:	ldr	r3, [pc, #608]	; 231a0 <__assert_fail@plt+0x115c0>
   22f3c:	ldr	r2, [pc, #608]	; 231a4 <__assert_fail@plt+0x115c4>
   22f40:	add	r3, pc, r3
   22f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f48:	sub	sp, sp, #4096	; 0x1000
   22f4c:	ldr	r9, [r3, r2]
   22f50:	sub	sp, sp, #28
   22f54:	add	r2, sp, #8192	; 0x2000
   22f58:	subs	r6, r0, #0
   22f5c:	ldr	r3, [r9]
   22f60:	str	r3, [r2, #-4076]	; 0xfffff014
   22f64:	beq	230b8 <__assert_fail@plt+0x114d8>
   22f68:	ldr	r3, [r6]
   22f6c:	cmp	r3, #0
   22f70:	beq	230b8 <__assert_fail@plt+0x114d8>
   22f74:	ldr	r0, [pc, #556]	; 231a8 <__assert_fail@plt+0x115c8>
   22f78:	add	r8, sp, #24
   22f7c:	sub	r4, r8, #4
   22f80:	mov	r1, #4096	; 0x1000
   22f84:	add	r0, pc, r0
   22f88:	str	r0, [sp]
   22f8c:	ldr	ip, [r6, #8]
   22f90:	mov	r3, r1
   22f94:	mov	r2, #1
   22f98:	mov	r0, r4
   22f9c:	str	ip, [sp, #4]
   22fa0:	bl	11bd4 <__snprintf_chk@plt>
   22fa4:	mov	r0, r4
   22fa8:	bl	118c8 <opendir@plt>
   22fac:	subs	r5, r0, #0
   22fb0:	beq	23134 <__assert_fail@plt+0x11554>
   22fb4:	bl	11afc <readdir64@plt>
   22fb8:	cmp	r0, #0
   22fbc:	beq	23194 <__assert_fail@plt+0x115b4>
   22fc0:	movw	r7, #61432	; 0xeff8
   22fc4:	sub	r8, r8, #8
   22fc8:	movt	r7, #65535	; 0xffff
   22fcc:	mov	r4, #0
   22fd0:	ldrb	r3, [r0, #19]
   22fd4:	cmp	r3, #46	; 0x2e
   22fd8:	bne	22ff4 <__assert_fail@plt+0x11414>
   22fdc:	ldrb	r3, [r0, #20]
   22fe0:	cmp	r3, #0
   22fe4:	beq	23030 <__assert_fail@plt+0x11450>
   22fe8:	ldrh	r3, [r0, #20]
   22fec:	cmp	r3, #46	; 0x2e
   22ff0:	beq	23030 <__assert_fail@plt+0x11450>
   22ff4:	add	sl, r0, #19
   22ff8:	mov	r2, r8
   22ffc:	ldr	r0, [r6]
   23000:	mov	r1, sl
   23004:	bl	203f0 <__assert_fail@plt+0xe810>
   23008:	subs	fp, r0, #0
   2300c:	blt	230dc <__assert_fail@plt+0x114fc>
   23010:	add	r3, sp, #4096	; 0x1000
   23014:	mov	r0, r4
   23018:	add	r3, r3, #24
   2301c:	ldr	r1, [r3, r7]
   23020:	bl	1cf3c <__assert_fail@plt+0xb35c>
   23024:	cmp	r0, #0
   23028:	beq	23050 <__assert_fail@plt+0x11470>
   2302c:	mov	r4, r0
   23030:	mov	r0, r5
   23034:	bl	11afc <readdir64@plt>
   23038:	cmp	r0, #0
   2303c:	bne	22fd0 <__assert_fail@plt+0x113f0>
   23040:	mov	r0, r5
   23044:	bl	11bc8 <closedir@plt>
   23048:	mov	r0, r4
   2304c:	b	230bc <__assert_fail@plt+0x114dc>
   23050:	ldr	r0, [r6]
   23054:	bl	1bc7c <__assert_fail@plt+0xa09c>
   23058:	cmp	r0, #2
   2305c:	ble	23090 <__assert_fail@plt+0x114b0>
   23060:	ldr	lr, [pc, #324]	; 231ac <__assert_fail@plt+0x115cc>
   23064:	mov	r1, #3
   23068:	ldr	ip, [pc, #320]	; 231b0 <__assert_fail@plt+0x115d0>
   2306c:	movw	r3, #1956	; 0x7a4
   23070:	ldr	r2, [pc, #316]	; 231b4 <__assert_fail@plt+0x115d4>
   23074:	add	lr, pc, lr
   23078:	ldr	r0, [r6]
   2307c:	add	ip, pc, ip
   23080:	add	r2, pc, r2
   23084:	str	lr, [sp]
   23088:	str	ip, [sp, #4]
   2308c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   23090:	add	r2, sp, #4096	; 0x1000
   23094:	movw	r3, #61432	; 0xeff8
   23098:	add	r2, r2, #24
   2309c:	movt	r3, #65535	; 0xffff
   230a0:	ldr	r0, [r2, r3]
   230a4:	bl	20b98 <__assert_fail@plt+0xefb8>
   230a8:	mov	r0, r5
   230ac:	bl	11bc8 <closedir@plt>
   230b0:	mov	r0, r4
   230b4:	bl	207dc <__assert_fail@plt+0xebfc>
   230b8:	mov	r0, #0
   230bc:	add	r3, sp, #8192	; 0x2000
   230c0:	ldr	r2, [r3, #-4076]	; 0xfffff014
   230c4:	ldr	r3, [r9]
   230c8:	cmp	r2, r3
   230cc:	bne	2319c <__assert_fail@plt+0x115bc>
   230d0:	add	sp, sp, #4096	; 0x1000
   230d4:	add	sp, sp, #28
   230d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230dc:	ldr	r0, [r6]
   230e0:	bl	1bc7c <__assert_fail@plt+0xa09c>
   230e4:	cmp	r0, #2
   230e8:	ble	230a8 <__assert_fail@plt+0x114c8>
   230ec:	rsb	r0, fp, #0
   230f0:	ldr	r6, [r6]
   230f4:	bl	11928 <strerror@plt>
   230f8:	ldr	r2, [pc, #184]	; 231b8 <__assert_fail@plt+0x115d8>
   230fc:	ldr	ip, [pc, #184]	; 231bc <__assert_fail@plt+0x115dc>
   23100:	mov	r1, #3
   23104:	add	r2, pc, r2
   23108:	str	r2, [sp, #4]
   2310c:	ldr	r2, [pc, #172]	; 231c0 <__assert_fail@plt+0x115e0>
   23110:	add	ip, pc, ip
   23114:	str	sl, [sp, #8]
   23118:	movw	r3, #1948	; 0x79c
   2311c:	str	ip, [sp]
   23120:	add	r2, pc, r2
   23124:	str	r0, [sp, #12]
   23128:	mov	r0, r6
   2312c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   23130:	b	230a8 <__assert_fail@plt+0x114c8>
   23134:	ldr	r0, [r6]
   23138:	bl	1bc7c <__assert_fail@plt+0xa09c>
   2313c:	cmp	r0, #2
   23140:	ble	230b8 <__assert_fail@plt+0x114d8>
   23144:	bl	119f4 <__errno_location@plt>
   23148:	ldr	r6, [r6]
   2314c:	ldr	r0, [r0]
   23150:	bl	11928 <strerror@plt>
   23154:	ldr	r2, [pc, #104]	; 231c4 <__assert_fail@plt+0x115e4>
   23158:	ldr	ip, [pc, #104]	; 231c8 <__assert_fail@plt+0x115e8>
   2315c:	mov	r1, #3
   23160:	add	r2, pc, r2
   23164:	str	r2, [sp, #4]
   23168:	ldr	r2, [pc, #92]	; 231cc <__assert_fail@plt+0x115ec>
   2316c:	add	ip, pc, ip
   23170:	str	r4, [sp, #8]
   23174:	movw	r3, #1929	; 0x789
   23178:	str	ip, [sp]
   2317c:	add	r2, pc, r2
   23180:	str	r0, [sp, #12]
   23184:	mov	r0, r6
   23188:	bl	1bbe4 <__assert_fail@plt+0xa004>
   2318c:	mov	r0, r5
   23190:	b	230bc <__assert_fail@plt+0x114dc>
   23194:	mov	r4, r0
   23198:	b	23040 <__assert_fail@plt+0x11460>
   2319c:	bl	11838 <__stack_chk_fail@plt>
   231a0:	strheq	ip, [r1], -r8
   231a4:	andeq	r0, r0, ip, lsr #3
   231a8:	andeq	sl, r0, r8, lsr sl
   231ac:	ldrdeq	sl, [r0], -r0
   231b0:	andeq	r8, r0, r4, lsl #17
   231b4:	andeq	sl, r0, ip, asr r5
   231b8:	andeq	sl, r0, ip, ror #17
   231bc:	andeq	sl, r0, r4, lsr sl
   231c0:			; <UNDEFINED> instruction: 0x0000a4bc
   231c4:	andeq	sl, r0, r4, ror r8
   231c8:	ldrdeq	sl, [r0], -r8
   231cc:	andeq	sl, r0, r0, ror #8
   231d0:	cmp	r0, #0
   231d4:	ldrne	r3, [r0, #8]
   231d8:	ldrne	r0, [r3]
   231dc:	bx	lr
   231e0:	cmp	r0, #0
   231e4:	ldrne	r0, [r0, #8]
   231e8:	addne	r0, r0, #4
   231ec:	bx	lr
   231f0:	push	{r4, lr}
   231f4:	subs	r4, r0, #0
   231f8:	popeq	{r4, pc}
   231fc:	ldr	r0, [r4, #8]
   23200:	bl	117c0 <free@plt>
   23204:	mov	r0, r4
   23208:	bl	1d06c <__assert_fail@plt+0xb48c>
   2320c:	subs	r4, r0, #0
   23210:	bne	231fc <__assert_fail@plt+0x1161c>
   23214:	pop	{r4, pc}
   23218:	ldr	r3, [pc, #620]	; 2348c <__assert_fail@plt+0x118ac>
   2321c:	cmp	r1, #0
   23220:	cmpne	r0, #0
   23224:	ldr	r2, [pc, #612]	; 23490 <__assert_fail@plt+0x118b0>
   23228:	add	r3, pc, r3
   2322c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23230:	sub	sp, sp, #60	; 0x3c
   23234:	ldr	r2, [r3, r2]
   23238:	mov	r8, r1
   2323c:	mov	fp, r0
   23240:	ldr	r3, [r2]
   23244:	str	r2, [sp, #12]
   23248:	str	r3, [sp, #52]	; 0x34
   2324c:	beq	23460 <__assert_fail@plt+0x11880>
   23250:	ldr	r5, [r1]
   23254:	cmp	r5, #0
   23258:	bne	23468 <__assert_fail@plt+0x11888>
   2325c:	bl	210b4 <__assert_fail@plt+0xf4d4>
   23260:	cmp	r0, #0
   23264:	beq	23450 <__assert_fail@plt+0x11870>
   23268:	ldr	r1, [pc, #548]	; 23494 <__assert_fail@plt+0x118b4>
   2326c:	add	r2, sp, #20
   23270:	add	r1, pc, r1
   23274:	bl	254a4 <__assert_fail@plt+0x138c4>
   23278:	subs	r9, r0, #0
   2327c:	movlt	r0, r9
   23280:	blt	2341c <__assert_fail@plt+0x1183c>
   23284:	beq	232e0 <__assert_fail@plt+0x11700>
   23288:	ldr	r3, [sp, #20]
   2328c:	mov	r1, #61	; 0x3d
   23290:	ldr	r4, [r3, r5, lsl #2]
   23294:	mov	r0, r4
   23298:	bl	119ac <strchr@plt>
   2329c:	subs	r7, r0, #0
   232a0:	beq	23438 <__assert_fail@plt+0x11858>
   232a4:	add	r6, r7, #1
   232a8:	rsb	sl, r4, r7
   232ac:	mov	r0, r6
   232b0:	bl	119a0 <strlen@plt>
   232b4:	str	r0, [sp]
   232b8:	mov	r1, r4
   232bc:	mov	r2, sl
   232c0:	mov	r3, r6
   232c4:	mov	r0, r8
   232c8:	bl	20150 <__assert_fail@plt+0xe570>
   232cc:	cmp	r0, #0
   232d0:	beq	233fc <__assert_fail@plt+0x1181c>
   232d4:	add	r5, r5, #1
   232d8:	cmp	r5, r9
   232dc:	bne	23288 <__assert_fail@plt+0x116a8>
   232e0:	ldr	r0, [fp, #36]	; 0x24
   232e4:	add	r1, sp, #24
   232e8:	bl	28710 <__assert_fail@plt+0x16b30>
   232ec:	cmp	r0, #0
   232f0:	beq	23410 <__assert_fail@plt+0x11830>
   232f4:	ldr	ip, [sp, #28]
   232f8:	mov	r0, r8
   232fc:	ldr	r1, [pc, #404]	; 23498 <__assert_fail@plt+0x118b8>
   23300:	mov	r2, #6
   23304:	ldr	r3, [sp, #24]
   23308:	add	r1, pc, r1
   2330c:	str	ip, [sp]
   23310:	bl	20150 <__assert_fail@plt+0xe570>
   23314:	cmp	r0, #0
   23318:	beq	233fc <__assert_fail@plt+0x1181c>
   2331c:	ldr	r4, [sp, #36]	; 0x24
   23320:	add	r5, r4, r4, lsl #1
   23324:	mov	r0, r5
   23328:	bl	11910 <malloc@plt>
   2332c:	subs	fp, r0, #0
   23330:	beq	233fc <__assert_fail@plt+0x1181c>
   23334:	cmp	r4, #0
   23338:	ble	23394 <__assert_fail@plt+0x117b4>
   2333c:	ldr	r6, [pc, #344]	; 2349c <__assert_fail@plt+0x118bc>
   23340:	mov	r5, fp
   23344:	mov	r4, #0
   23348:	mov	r7, #58	; 0x3a
   2334c:	add	r6, pc, r6
   23350:	ldr	ip, [sp, #32]
   23354:	mov	r0, r5
   23358:	mvn	r2, #0
   2335c:	mov	r3, r6
   23360:	mov	r1, #1
   23364:	add	r5, r5, #3
   23368:	ldrb	ip, [ip, r4]
   2336c:	str	ip, [sp]
   23370:	bl	11a00 <__sprintf_chk@plt>
   23374:	ldr	r3, [sp, #36]	; 0x24
   23378:	sub	r2, r3, #1
   2337c:	cmp	r2, r4
   23380:	add	r4, r4, #1
   23384:	strbgt	r7, [r5, #-1]
   23388:	cmp	r3, r4
   2338c:	bgt	23350 <__assert_fail@plt+0x11770>
   23390:	add	r5, r3, r3, lsl #1
   23394:	ldr	r1, [pc, #260]	; 234a0 <__assert_fail@plt+0x118c0>
   23398:	mov	r2, #7
   2339c:	mov	r3, fp
   233a0:	sub	r5, r5, #1
   233a4:	add	r1, pc, r1
   233a8:	mov	r0, r8
   233ac:	str	r5, [sp]
   233b0:	bl	20150 <__assert_fail@plt+0xe570>
   233b4:	mov	r4, r0
   233b8:	mov	r0, fp
   233bc:	bl	117c0 <free@plt>
   233c0:	cmp	r4, #0
   233c4:	beq	233fc <__assert_fail@plt+0x1181c>
   233c8:	ldr	r4, [sp, #44]	; 0x2c
   233cc:	mov	r0, r4
   233d0:	bl	119a0 <strlen@plt>
   233d4:	ldr	r1, [pc, #200]	; 234a4 <__assert_fail@plt+0x118c4>
   233d8:	mov	r3, r4
   233dc:	mov	r2, #12
   233e0:	add	r1, pc, r1
   233e4:	str	r0, [sp]
   233e8:	mov	r0, r8
   233ec:	bl	20150 <__assert_fail@plt+0xe570>
   233f0:	cmp	r0, #0
   233f4:	addne	r9, r9, #3
   233f8:	bne	23410 <__assert_fail@plt+0x11830>
   233fc:	ldr	r0, [r8]
   23400:	mvn	r9, #11
   23404:	bl	231f0 <__assert_fail@plt+0x11610>
   23408:	mov	r3, #0
   2340c:	str	r3, [r8]
   23410:	ldr	r0, [sp, #20]
   23414:	bl	117c0 <free@plt>
   23418:	mov	r0, r9
   2341c:	ldr	r1, [sp, #12]
   23420:	ldr	r2, [sp, #52]	; 0x34
   23424:	ldr	r3, [r1]
   23428:	cmp	r2, r3
   2342c:	bne	23488 <__assert_fail@plt+0x118a8>
   23430:	add	sp, sp, #60	; 0x3c
   23434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23438:	mov	r0, r4
   2343c:	mov	r6, r4
   23440:	bl	119a0 <strlen@plt>
   23444:	mov	sl, r0
   23448:	mov	r0, r7
   2344c:	b	232b4 <__assert_fail@plt+0x116d4>
   23450:	bl	119f4 <__errno_location@plt>
   23454:	ldr	r0, [r0]
   23458:	rsb	r0, r0, #0
   2345c:	b	2341c <__assert_fail@plt+0x1183c>
   23460:	mvn	r0, #1
   23464:	b	2341c <__assert_fail@plt+0x1183c>
   23468:	ldr	r0, [pc, #56]	; 234a8 <__assert_fail@plt+0x118c8>
   2346c:	movw	r2, #2222	; 0x8ae
   23470:	ldr	r1, [pc, #52]	; 234ac <__assert_fail@plt+0x118cc>
   23474:	ldr	r3, [pc, #52]	; 234b0 <__assert_fail@plt+0x118d0>
   23478:	add	r0, pc, r0
   2347c:	add	r1, pc, r1
   23480:	add	r3, pc, r3
   23484:	bl	11be0 <__assert_fail@plt>
   23488:	bl	11838 <__stack_chk_fail@plt>
   2348c:	ldrdeq	fp, [r1], -r0
   23490:	andeq	r0, r0, ip, lsr #3
   23494:	andeq	sl, r0, r4, lsl #16
   23498:	andeq	sl, r0, r8, ror r7
   2349c:	andeq	sl, r0, ip, lsr r7
   234a0:	andeq	sl, r0, ip, ror #13
   234a4:			; <UNDEFINED> instruction: 0x0000a6b8
   234a8:	andeq	r9, r0, r8, lsl ip
   234ac:	andeq	sl, r0, r0, ror #2
   234b0:	andeq	sl, r0, r8, lsr #12
   234b4:	cmp	r0, #0
   234b8:	ldrne	r0, [r0, #8]
   234bc:	addne	r0, r0, #8
   234c0:	bx	lr
   234c4:	cmp	r0, #0
   234c8:	ldrne	r3, [r0, #8]
   234cc:	ldrdne	r0, [r3]
   234d0:	moveq	r0, #0
   234d4:	moveq	r1, #0
   234d8:	bx	lr
   234dc:	push	{r4, lr}
   234e0:	subs	r4, r0, #0
   234e4:	popeq	{r4, pc}
   234e8:	ldr	r0, [r4, #8]
   234ec:	bl	117c0 <free@plt>
   234f0:	mov	r0, r4
   234f4:	bl	1d06c <__assert_fail@plt+0xb48c>
   234f8:	subs	r4, r0, #0
   234fc:	bne	234e8 <__assert_fail@plt+0x11908>
   23500:	pop	{r4, pc}
   23504:	ldr	r3, [pc, #368]	; 2367c <__assert_fail@plt+0x11a9c>
   23508:	cmp	r1, #0
   2350c:	cmpne	r0, #0
   23510:	ldr	r2, [pc, #360]	; 23680 <__assert_fail@plt+0x11aa0>
   23514:	add	r3, pc, r3
   23518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2351c:	sub	sp, sp, #20
   23520:	ldr	r2, [r3, r2]
   23524:	mov	r7, r1
   23528:	ldr	r3, [r2]
   2352c:	str	r2, [sp, #4]
   23530:	str	r3, [sp, #12]
   23534:	beq	23650 <__assert_fail@plt+0x11a70>
   23538:	ldr	r6, [r1]
   2353c:	cmp	r6, #0
   23540:	bne	2365c <__assert_fail@plt+0x11a7c>
   23544:	bl	210b4 <__assert_fail@plt+0xf4d4>
   23548:	cmp	r0, #0
   2354c:	beq	23618 <__assert_fail@plt+0x11a38>
   23550:	add	r1, sp, #8
   23554:	bl	256f8 <__assert_fail@plt+0x13b18>
   23558:	subs	r8, r0, #0
   2355c:	movlt	r0, r8
   23560:	blt	235fc <__assert_fail@plt+0x11a1c>
   23564:	bne	235a4 <__assert_fail@plt+0x119c4>
   23568:	b	235f0 <__assert_fail@plt+0x11a10>
   2356c:	mov	r0, sl
   23570:	mov	r1, r9
   23574:	mov	r2, fp
   23578:	strd	r4, [r0], #8
   2357c:	bl	117e4 <memcpy@plt>
   23580:	ldr	r0, [r7]
   23584:	mov	r1, sl
   23588:	bl	1cf3c <__assert_fail@plt+0xb35c>
   2358c:	subs	r4, r0, #0
   23590:	beq	23628 <__assert_fail@plt+0x11a48>
   23594:	add	r6, r6, #1
   23598:	str	r4, [r7]
   2359c:	cmp	r6, r8
   235a0:	beq	235f0 <__assert_fail@plt+0x11a10>
   235a4:	ldr	r2, [sp, #8]
   235a8:	lsl	r3, r6, #4
   235ac:	add	r1, r2, r3
   235b0:	ldrd	r4, [r2, r3]
   235b4:	ldr	r9, [r1, #12]
   235b8:	mov	r0, r9
   235bc:	bl	119a0 <strlen@plt>
   235c0:	mov	r2, r0
   235c4:	add	r0, r0, #9
   235c8:	add	fp, r2, #1
   235cc:	bl	11910 <malloc@plt>
   235d0:	subs	sl, r0, #0
   235d4:	bne	2356c <__assert_fail@plt+0x1198c>
   235d8:	bl	119f4 <__errno_location@plt>
   235dc:	ldr	r8, [r0]
   235e0:	ldr	r0, [r7]
   235e4:	rsb	r8, r8, #0
   235e8:	bl	234dc <__assert_fail@plt+0x118fc>
   235ec:	str	sl, [r7]
   235f0:	ldr	r0, [sp, #8]
   235f4:	bl	117c0 <free@plt>
   235f8:	mov	r0, r8
   235fc:	ldr	r1, [sp, #4]
   23600:	ldr	r2, [sp, #12]
   23604:	ldr	r3, [r1]
   23608:	cmp	r2, r3
   2360c:	bne	23658 <__assert_fail@plt+0x11a78>
   23610:	add	sp, sp, #20
   23614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23618:	bl	119f4 <__errno_location@plt>
   2361c:	ldr	r0, [r0]
   23620:	rsb	r0, r0, #0
   23624:	b	235fc <__assert_fail@plt+0x11a1c>
   23628:	mov	r0, sl
   2362c:	mvn	r8, #11
   23630:	bl	117c0 <free@plt>
   23634:	ldr	r0, [r7]
   23638:	bl	234dc <__assert_fail@plt+0x118fc>
   2363c:	ldr	r0, [sp, #8]
   23640:	str	r4, [r7]
   23644:	bl	117c0 <free@plt>
   23648:	mov	r0, r8
   2364c:	b	235fc <__assert_fail@plt+0x11a1c>
   23650:	mvn	r0, #1
   23654:	b	235fc <__assert_fail@plt+0x11a1c>
   23658:	bl	11838 <__stack_chk_fail@plt>
   2365c:	ldr	r0, [pc, #32]	; 23684 <__assert_fail@plt+0x11aa4>
   23660:	movw	r2, #2405	; 0x965
   23664:	ldr	r1, [pc, #28]	; 23688 <__assert_fail@plt+0x11aa8>
   23668:	ldr	r3, [pc, #28]	; 2368c <__assert_fail@plt+0x11aac>
   2366c:	add	r0, pc, r0
   23670:	add	r1, pc, r1
   23674:	add	r3, pc, r3
   23678:	bl	11be0 <__assert_fail@plt>
   2367c:	andeq	fp, r1, r4, ror #21
   23680:	andeq	r0, r0, ip, lsr #3
   23684:	andeq	r9, r0, r4, lsr #20
   23688:	andeq	r9, r0, ip, ror #30
   2368c:	andeq	sl, r0, r4, lsl #9
   23690:	cmp	r0, #0
   23694:	ldrne	r0, [r0, #8]
   23698:	addne	r0, r0, #8
   2369c:	bx	lr
   236a0:	cmp	r0, #0
   236a4:	ldrne	r3, [r0, #8]
   236a8:	ldrdne	r0, [r3]
   236ac:	moveq	r0, #0
   236b0:	moveq	r1, #0
   236b4:	bx	lr
   236b8:	push	{r4, lr}
   236bc:	subs	r4, r0, #0
   236c0:	popeq	{r4, pc}
   236c4:	ldr	r0, [r4, #8]
   236c8:	bl	117c0 <free@plt>
   236cc:	mov	r0, r4
   236d0:	bl	1d06c <__assert_fail@plt+0xb48c>
   236d4:	subs	r4, r0, #0
   236d8:	bne	236c4 <__assert_fail@plt+0x11ae4>
   236dc:	pop	{r4, pc}
   236e0:	ldr	r3, [pc, #368]	; 23858 <__assert_fail@plt+0x11c78>
   236e4:	cmp	r1, #0
   236e8:	cmpne	r0, #0
   236ec:	ldr	r2, [pc, #360]	; 2385c <__assert_fail@plt+0x11c7c>
   236f0:	add	r3, pc, r3
   236f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236f8:	sub	sp, sp, #20
   236fc:	ldr	r2, [r3, r2]
   23700:	mov	r7, r1
   23704:	ldr	r3, [r2]
   23708:	str	r2, [sp, #4]
   2370c:	str	r3, [sp, #12]
   23710:	beq	2382c <__assert_fail@plt+0x11c4c>
   23714:	ldr	r6, [r1]
   23718:	cmp	r6, #0
   2371c:	bne	23838 <__assert_fail@plt+0x11c58>
   23720:	bl	210b4 <__assert_fail@plt+0xf4d4>
   23724:	cmp	r0, #0
   23728:	beq	237f4 <__assert_fail@plt+0x11c14>
   2372c:	add	r1, sp, #8
   23730:	bl	264d4 <__assert_fail@plt+0x148f4>
   23734:	subs	r8, r0, #0
   23738:	movlt	r0, r8
   2373c:	blt	237d8 <__assert_fail@plt+0x11bf8>
   23740:	bne	23780 <__assert_fail@plt+0x11ba0>
   23744:	b	237cc <__assert_fail@plt+0x11bec>
   23748:	mov	r0, sl
   2374c:	mov	r1, r9
   23750:	mov	r2, fp
   23754:	strd	r4, [r0], #8
   23758:	bl	117e4 <memcpy@plt>
   2375c:	ldr	r0, [r7]
   23760:	mov	r1, sl
   23764:	bl	1cf3c <__assert_fail@plt+0xb35c>
   23768:	subs	r4, r0, #0
   2376c:	beq	23804 <__assert_fail@plt+0x11c24>
   23770:	add	r6, r6, #1
   23774:	str	r4, [r7]
   23778:	cmp	r6, r8
   2377c:	beq	237cc <__assert_fail@plt+0x11bec>
   23780:	ldr	r2, [sp, #8]
   23784:	lsl	r3, r6, #4
   23788:	add	r1, r2, r3
   2378c:	ldrd	r4, [r2, r3]
   23790:	ldr	r9, [r1, #12]
   23794:	mov	r0, r9
   23798:	bl	119a0 <strlen@plt>
   2379c:	mov	r2, r0
   237a0:	add	r0, r0, #9
   237a4:	add	fp, r2, #1
   237a8:	bl	11910 <malloc@plt>
   237ac:	subs	sl, r0, #0
   237b0:	bne	23748 <__assert_fail@plt+0x11b68>
   237b4:	bl	119f4 <__errno_location@plt>
   237b8:	ldr	r8, [r0]
   237bc:	ldr	r0, [r7]
   237c0:	rsb	r8, r8, #0
   237c4:	bl	236b8 <__assert_fail@plt+0x11ad8>
   237c8:	str	sl, [r7]
   237cc:	ldr	r0, [sp, #8]
   237d0:	bl	117c0 <free@plt>
   237d4:	mov	r0, r8
   237d8:	ldr	r1, [sp, #4]
   237dc:	ldr	r2, [sp, #12]
   237e0:	ldr	r3, [r1]
   237e4:	cmp	r2, r3
   237e8:	bne	23834 <__assert_fail@plt+0x11c54>
   237ec:	add	sp, sp, #20
   237f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237f4:	bl	119f4 <__errno_location@plt>
   237f8:	ldr	r0, [r0]
   237fc:	rsb	r0, r0, #0
   23800:	b	237d8 <__assert_fail@plt+0x11bf8>
   23804:	mov	r0, sl
   23808:	mvn	r8, #11
   2380c:	bl	117c0 <free@plt>
   23810:	ldr	r0, [r7]
   23814:	bl	236b8 <__assert_fail@plt+0x11ad8>
   23818:	ldr	r0, [sp, #8]
   2381c:	str	r4, [r7]
   23820:	bl	117c0 <free@plt>
   23824:	mov	r0, r8
   23828:	b	237d8 <__assert_fail@plt+0x11bf8>
   2382c:	mvn	r0, #1
   23830:	b	237d8 <__assert_fail@plt+0x11bf8>
   23834:	bl	11838 <__stack_chk_fail@plt>
   23838:	ldr	r0, [pc, #32]	; 23860 <__assert_fail@plt+0x11c80>
   2383c:	movw	r2, #2546	; 0x9f2
   23840:	ldr	r1, [pc, #28]	; 23864 <__assert_fail@plt+0x11c84>
   23844:	ldr	r3, [pc, #28]	; 23868 <__assert_fail@plt+0x11c88>
   23848:	add	r0, pc, r0
   2384c:	add	r1, pc, r1
   23850:	add	r3, pc, r3
   23854:	bl	11be0 <__assert_fail@plt>
   23858:	andeq	fp, r1, r8, lsl #18
   2385c:	andeq	r0, r0, ip, lsr #3
   23860:	andeq	r9, r0, r8, asr #16
   23864:	muleq	r0, r0, sp
   23868:	muleq	r0, r8, ip
   2386c:	cmp	r0, #0
   23870:	ldrne	r0, [r0, #8]
   23874:	addne	r0, r0, #9
   23878:	bx	lr
   2387c:	cmp	r0, #0
   23880:	ldrne	r3, [r0, #8]
   23884:	ldrdne	r0, [r3]
   23888:	moveq	r0, #0
   2388c:	moveq	r1, #0
   23890:	bx	lr
   23894:	cmp	r0, #0
   23898:	ldrne	r3, [r0, #8]
   2389c:	ldrbne	r0, [r3, #8]
   238a0:	bx	lr
   238a4:	push	{r4, lr}
   238a8:	subs	r4, r0, #0
   238ac:	popeq	{r4, pc}
   238b0:	ldr	r0, [r4, #8]
   238b4:	bl	117c0 <free@plt>
   238b8:	mov	r0, r4
   238bc:	bl	1d06c <__assert_fail@plt+0xb48c>
   238c0:	subs	r4, r0, #0
   238c4:	bne	238b0 <__assert_fail@plt+0x11cd0>
   238c8:	pop	{r4, pc}
   238cc:	ldr	r3, [pc, #384]	; 23a54 <__assert_fail@plt+0x11e74>
   238d0:	cmp	r1, #0
   238d4:	cmpne	r0, #0
   238d8:	ldr	r2, [pc, #376]	; 23a58 <__assert_fail@plt+0x11e78>
   238dc:	add	r3, pc, r3
   238e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238e4:	sub	sp, sp, #20
   238e8:	ldr	r2, [r3, r2]
   238ec:	mov	r8, r1
   238f0:	ldr	r3, [r2]
   238f4:	str	r2, [sp, #4]
   238f8:	str	r3, [sp, #12]
   238fc:	beq	23a28 <__assert_fail@plt+0x11e48>
   23900:	ldr	r7, [r1]
   23904:	cmp	r7, #0
   23908:	bne	23a34 <__assert_fail@plt+0x11e54>
   2390c:	bl	210b4 <__assert_fail@plt+0xf4d4>
   23910:	cmp	r0, #0
   23914:	beq	239f0 <__assert_fail@plt+0x11e10>
   23918:	add	r1, sp, #8
   2391c:	bl	27680 <__assert_fail@plt+0x15aa0>
   23920:	cmp	r0, #0
   23924:	str	r0, [sp]
   23928:	blt	23a20 <__assert_fail@plt+0x11e40>
   2392c:	bne	23974 <__assert_fail@plt+0x11d94>
   23930:	b	239c8 <__assert_fail@plt+0x11de8>
   23934:	strd	r4, [r6]
   23938:	mov	r1, sl
   2393c:	mov	r2, fp
   23940:	strb	r9, [r6, #8]
   23944:	add	r0, r6, #9
   23948:	bl	117e4 <memcpy@plt>
   2394c:	ldr	r0, [r8]
   23950:	mov	r1, r6
   23954:	bl	1cf3c <__assert_fail@plt+0xb35c>
   23958:	subs	r4, r0, #0
   2395c:	beq	23a00 <__assert_fail@plt+0x11e20>
   23960:	ldr	r3, [sp]
   23964:	add	r7, r7, #1
   23968:	str	r4, [r8]
   2396c:	cmp	r7, r3
   23970:	beq	239c8 <__assert_fail@plt+0x11de8>
   23974:	ldr	r1, [sp, #8]
   23978:	lsl	r2, r7, #4
   2397c:	add	r3, r1, r2
   23980:	ldrd	r4, [r1, r2]
   23984:	ldr	sl, [r3, #12]
   23988:	ldrb	r9, [r3, #8]
   2398c:	mov	r0, sl
   23990:	bl	119a0 <strlen@plt>
   23994:	mov	r2, r0
   23998:	add	r0, r0, #17
   2399c:	add	fp, r2, #1
   239a0:	bl	11910 <malloc@plt>
   239a4:	subs	r6, r0, #0
   239a8:	bne	23934 <__assert_fail@plt+0x11d54>
   239ac:	bl	119f4 <__errno_location@plt>
   239b0:	ldr	sl, [r0]
   239b4:	ldr	r0, [r8]
   239b8:	rsb	sl, sl, #0
   239bc:	str	sl, [sp]
   239c0:	bl	238a4 <__assert_fail@plt+0x11cc4>
   239c4:	str	r6, [r8]
   239c8:	ldr	r0, [sp, #8]
   239cc:	bl	117c0 <free@plt>
   239d0:	ldr	r0, [sp]
   239d4:	ldr	r1, [sp, #4]
   239d8:	ldr	r2, [sp, #12]
   239dc:	ldr	r3, [r1]
   239e0:	cmp	r2, r3
   239e4:	bne	23a30 <__assert_fail@plt+0x11e50>
   239e8:	add	sp, sp, #20
   239ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239f0:	bl	119f4 <__errno_location@plt>
   239f4:	ldr	r0, [r0]
   239f8:	rsb	r0, r0, #0
   239fc:	b	239d4 <__assert_fail@plt+0x11df4>
   23a00:	mov	r0, r6
   23a04:	mvn	r3, #11
   23a08:	str	r3, [sp]
   23a0c:	bl	117c0 <free@plt>
   23a10:	ldr	r0, [r8]
   23a14:	bl	238a4 <__assert_fail@plt+0x11cc4>
   23a18:	str	r4, [r8]
   23a1c:	b	239c8 <__assert_fail@plt+0x11de8>
   23a20:	ldr	r0, [sp]
   23a24:	b	239d4 <__assert_fail@plt+0x11df4>
   23a28:	mvn	r0, #1
   23a2c:	b	239d4 <__assert_fail@plt+0x11df4>
   23a30:	bl	11838 <__stack_chk_fail@plt>
   23a34:	ldr	r0, [pc, #32]	; 23a5c <__assert_fail@plt+0x11e7c>
   23a38:	movw	r2, #2690	; 0xa82
   23a3c:	ldr	r1, [pc, #28]	; 23a60 <__assert_fail@plt+0x11e80>
   23a40:	ldr	r3, [pc, #28]	; 23a64 <__assert_fail@plt+0x11e84>
   23a44:	add	r0, pc, r0
   23a48:	add	r1, pc, r1
   23a4c:	add	r3, pc, r3
   23a50:	bl	11be0 <__assert_fail@plt>
   23a54:	andeq	fp, r1, ip, lsl r7
   23a58:	andeq	r0, r0, ip, lsr #3
   23a5c:	andeq	r9, r0, ip, asr #12
   23a60:	muleq	r0, r4, fp
   23a64:	andeq	r9, r0, ip, lsl fp
   23a68:	ldrb	r3, [r0]
   23a6c:	cmp	r3, #0
   23a70:	bxeq	lr
   23a74:	ldr	r0, [r0, #24]
   23a78:	b	117c0 <free@plt>
   23a7c:	mov	r3, r0
   23a80:	ldr	r0, [r0, #24]
   23a84:	ldr	r1, [r3, #16]
   23a88:	b	11a9c <munmap@plt>
   23a8c:	ldr	r3, [r0, #4]
   23a90:	push	{r4, lr}
   23a94:	cmp	r3, #0
   23a98:	mov	r4, r0
   23a9c:	popeq	{r4, pc}
   23aa0:	ldr	r0, [r0, #24]
   23aa4:	bl	117c0 <free@plt>
   23aa8:	ldr	r0, [r4, #4]
   23aac:	pop	{r4, lr}
   23ab0:	b	1173c <gzclose@plt>
   23ab4:	ldr	r3, [pc, #428]	; 23c68 <__assert_fail@plt+0x12088>
   23ab8:	ldr	r2, [pc, #428]	; 23c6c <__assert_fail@plt+0x1208c>
   23abc:	add	r3, pc, r3
   23ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ac4:	sub	sp, sp, #28
   23ac8:	ldr	sl, [r3, r2]
   23acc:	mov	r9, r0
   23ad0:	ldr	r3, [sl]
   23ad4:	str	r3, [sp, #20]
   23ad8:	bl	119f4 <__errno_location@plt>
   23adc:	ldr	r1, [pc, #396]	; 23c70 <__assert_fail@plt+0x12090>
   23ae0:	mov	r3, #0
   23ae4:	add	r1, pc, r1
   23ae8:	mov	fp, r0
   23aec:	str	r3, [r0]
   23af0:	ldr	r0, [r9, #8]
   23af4:	bl	117fc <gzdopen@plt>
   23af8:	cmp	r0, #0
   23afc:	str	r0, [r9, #4]
   23b00:	beq	23c34 <__assert_fail@plt+0x12054>
   23b04:	mov	r6, #0
   23b08:	mov	r7, #0
   23b0c:	mvn	r3, #0
   23b10:	mov	r8, #0
   23b14:	mov	r4, r6
   23b18:	mov	r5, r7
   23b1c:	str	r3, [r9, #8]
   23b20:	b	23b48 <__assert_fail@plt+0x11f68>
   23b24:	rsb	r2, r2, r6
   23b28:	ldr	r0, [r9, #4]
   23b2c:	add	r1, r8, r4
   23b30:	bl	1194c <gzread@plt>
   23b34:	cmp	r0, #0
   23b38:	beq	23b80 <__assert_fail@plt+0x11fa0>
   23b3c:	blt	23bb4 <__assert_fail@plt+0x11fd4>
   23b40:	adds	r4, r4, r0
   23b44:	adc	r5, r5, r0, asr #31
   23b48:	cmp	r5, r7
   23b4c:	cmpeq	r4, r6
   23b50:	movne	r2, r4
   23b54:	bne	23b24 <__assert_fail@plt+0x11f44>
   23b58:	mov	r0, r8
   23b5c:	add	r1, r4, #4194304	; 0x400000
   23b60:	bl	11844 <realloc@plt>
   23b64:	mov	r2, r4
   23b68:	cmp	r0, #0
   23b6c:	beq	23bf0 <__assert_fail@plt+0x12010>
   23b70:	adds	r6, r4, #4194304	; 0x400000
   23b74:	mov	r8, r0
   23b78:	adc	r7, r5, #0
   23b7c:	b	23b24 <__assert_fail@plt+0x11f44>
   23b80:	str	r8, [r9, #24]
   23b84:	mov	r8, r0
   23b88:	strd	r4, [r9, #16]
   23b8c:	mov	r4, r0
   23b90:	mov	r0, r8
   23b94:	bl	117c0 <free@plt>
   23b98:	ldr	r2, [sp, #20]
   23b9c:	ldr	r3, [sl]
   23ba0:	mov	r0, r4
   23ba4:	cmp	r2, r3
   23ba8:	bne	23c64 <__assert_fail@plt+0x12084>
   23bac:	add	sp, sp, #28
   23bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bb4:	ldr	r0, [r9, #4]
   23bb8:	add	r1, sp, #16
   23bbc:	bl	11a30 <gzerror@plt>
   23bc0:	mov	r4, r0
   23bc4:	ldr	r0, [r9, #32]
   23bc8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   23bcc:	cmp	r0, #2
   23bd0:	bgt	23bfc <__assert_fail@plt+0x1201c>
   23bd4:	ldr	r3, [sp, #16]
   23bd8:	cmn	r3, #1
   23bdc:	mvnne	r4, #21
   23be0:	beq	23bf0 <__assert_fail@plt+0x12010>
   23be4:	ldr	r0, [r9, #4]
   23be8:	bl	1173c <gzclose@plt>
   23bec:	b	23b90 <__assert_fail@plt+0x11fb0>
   23bf0:	ldr	r4, [fp]
   23bf4:	rsb	r4, r4, #0
   23bf8:	b	23be4 <__assert_fail@plt+0x12004>
   23bfc:	ldr	r2, [pc, #112]	; 23c74 <__assert_fail@plt+0x12094>
   23c00:	mov	r1, #3
   23c04:	ldr	r0, [r9, #32]
   23c08:	mov	r3, #206	; 0xce
   23c0c:	add	r2, pc, r2
   23c10:	ldr	ip, [pc, #96]	; 23c78 <__assert_fail@plt+0x12098>
   23c14:	str	r2, [sp, #4]
   23c18:	ldr	r2, [pc, #92]	; 23c7c <__assert_fail@plt+0x1209c>
   23c1c:	add	ip, pc, ip
   23c20:	str	r4, [sp, #8]
   23c24:	str	ip, [sp]
   23c28:	add	r2, pc, r2
   23c2c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   23c30:	b	23bd4 <__assert_fail@plt+0x11ff4>
   23c34:	ldr	r4, [fp]
   23c38:	mov	r8, r0
   23c3c:	rsb	r4, r4, #0
   23c40:	b	23b90 <__assert_fail@plt+0x11fb0>
   23c44:	mov	r4, r0
   23c48:	mov	r0, r8
   23c4c:	bl	117c0 <free@plt>
   23c50:	mov	r0, r4
   23c54:	bl	11b8c <_Unwind_Resume@plt>
   23c58:	mov	r4, r0
   23c5c:	mov	r8, #0
   23c60:	b	23c48 <__assert_fail@plt+0x12068>
   23c64:	bl	11838 <__stack_chk_fail@plt>
   23c68:	andeq	fp, r1, ip, lsr r5
   23c6c:	andeq	r0, r0, ip, lsr #3
   23c70:	andeq	sl, r0, ip, lsr #2
   23c74:	andeq	sl, r0, r0, lsr #32
   23c78:	andeq	r9, r0, r8, ror #31
   23c7c:	andeq	r9, r0, ip, ror #31
   23c80:	ldr	r3, [pc, #172]	; 23d34 <__assert_fail@plt+0x12154>
   23c84:	ldr	ip, [pc, #172]	; 23d38 <__assert_fail@plt+0x12158>
   23c88:	add	r3, pc, r3
   23c8c:	push	{r4, r5, r6, r7, lr}
   23c90:	mov	r6, r0
   23c94:	ldr	r7, [r3, ip]
   23c98:	sub	sp, sp, #132	; 0x84
   23c9c:	mov	r0, #3
   23ca0:	ldr	r1, [r6, #8]
   23ca4:	add	r2, sp, #16
   23ca8:	ldr	r3, [r7]
   23cac:	str	r3, [sp, #124]	; 0x7c
   23cb0:	bl	11868 <__fxstat64@plt>
   23cb4:	cmp	r0, #0
   23cb8:	blt	23d20 <__assert_fail@plt+0x12140>
   23cbc:	ldr	r3, [sp, #68]	; 0x44
   23cc0:	mov	r4, #0
   23cc4:	ldr	ip, [r6, #8]
   23cc8:	mov	r5, #0
   23ccc:	ldr	r1, [sp, #64]	; 0x40
   23cd0:	mov	r0, #0
   23cd4:	str	r3, [r6, #20]
   23cd8:	mov	r2, #1
   23cdc:	mov	r3, #2
   23ce0:	str	r1, [r6, #16]
   23ce4:	str	ip, [sp]
   23ce8:	strd	r4, [sp, #8]
   23cec:	bl	117f0 <mmap64@plt>
   23cf0:	cmn	r0, #1
   23cf4:	str	r0, [r6, #24]
   23cf8:	movne	r3, #1
   23cfc:	movne	r0, #0
   23d00:	strbne	r3, [r6, #12]
   23d04:	beq	23d20 <__assert_fail@plt+0x12140>
   23d08:	ldr	r2, [sp, #124]	; 0x7c
   23d0c:	ldr	r3, [r7]
   23d10:	cmp	r2, r3
   23d14:	bne	23d30 <__assert_fail@plt+0x12150>
   23d18:	add	sp, sp, #132	; 0x84
   23d1c:	pop	{r4, r5, r6, r7, pc}
   23d20:	bl	119f4 <__errno_location@plt>
   23d24:	ldr	r0, [r0]
   23d28:	rsb	r0, r0, #0
   23d2c:	b	23d08 <__assert_fail@plt+0x12128>
   23d30:	bl	11838 <__stack_chk_fail@plt>
   23d34:	andeq	fp, r1, r0, ror r3
   23d38:	andeq	r0, r0, ip, lsr #3
   23d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d40:	sub	sp, sp, #16384	; 0x4000
   23d44:	ldr	lr, [pc, #900]	; 240d0 <__assert_fail@plt+0x124f0>
   23d48:	sub	sp, sp, #44	; 0x2c
   23d4c:	ldr	ip, [pc, #896]	; 240d4 <__assert_fail@plt+0x124f4>
   23d50:	mov	r2, #0
   23d54:	add	lr, pc, lr
   23d58:	mov	r4, r0
   23d5c:	mov	r3, r2
   23d60:	mov	r5, r2
   23d64:	ldr	ip, [lr, ip]
   23d68:	mov	r8, r2
   23d6c:	str	r2, [r4, #4]
   23d70:	mov	r9, r2
   23d74:	str	r1, [sp, #24]
   23d78:	add	r7, sp, #8192	; 0x2000
   23d7c:	ldr	r2, [ip]
   23d80:	add	r1, sp, #16384	; 0x4000
   23d84:	add	r7, r7, #40	; 0x28
   23d88:	mov	fp, #8192	; 0x2000
   23d8c:	mov	r0, lr
   23d90:	sub	r7, r7, #4
   23d94:	add	sl, sp, #36	; 0x24
   23d98:	str	ip, [sp, #28]
   23d9c:	str	fp, [r4, #20]
   23da0:	str	r7, [r4, #16]
   23da4:	str	sl, [sp, #20]
   23da8:	str	r2, [r1, #36]	; 0x24
   23dac:	b	23dc4 <__assert_fail@plt+0x121e4>
   23db0:	cmp	sl, #0
   23db4:	bne	23ec0 <__assert_fail@plt+0x122e0>
   23db8:	mov	r5, r6
   23dbc:	mov	r8, fp
   23dc0:	ldr	r3, [r4, #4]
   23dc4:	cmp	r3, #0
   23dc8:	bne	23df8 <__assert_fail@plt+0x12218>
   23dcc:	ldr	r3, [sp, #24]
   23dd0:	mov	r2, #8192	; 0x2000
   23dd4:	ldr	r1, [sp, #20]
   23dd8:	ldr	r0, [r3, #8]
   23ddc:	bl	11790 <read@plt>
   23de0:	cmp	r0, #0
   23de4:	blt	23ea4 <__assert_fail@plt+0x122c4>
   23de8:	ldr	r3, [sp, #20]
   23dec:	moveq	r9, #3
   23df0:	str	r0, [r4, #4]
   23df4:	str	r3, [r4]
   23df8:	mov	r0, r4
   23dfc:	mov	r1, r9
   23e00:	bl	11778 <lzma_code@plt>
   23e04:	ldr	r2, [r4, #20]
   23e08:	cmp	r2, #0
   23e0c:	mov	sl, r0
   23e10:	beq	23e1c <__assert_fail@plt+0x1223c>
   23e14:	cmp	r0, #0
   23e18:	beq	23dc0 <__assert_fail@plt+0x121e0>
   23e1c:	rsb	r2, r2, #8192	; 0x2000
   23e20:	mov	r0, r8
   23e24:	add	r6, r5, r2
   23e28:	str	r2, [sp, #16]
   23e2c:	mov	r1, r6
   23e30:	bl	11844 <realloc@plt>
   23e34:	ldr	r2, [sp, #16]
   23e38:	subs	fp, r0, #0
   23e3c:	beq	23ea4 <__assert_fail@plt+0x122c4>
   23e40:	mov	r1, r7
   23e44:	add	r0, fp, r5
   23e48:	bl	117e4 <memcpy@plt>
   23e4c:	cmp	sl, #1
   23e50:	mov	r1, #8192	; 0x2000
   23e54:	str	r7, [r4, #16]
   23e58:	str	r1, [r4, #20]
   23e5c:	bne	23db0 <__assert_fail@plt+0x121d0>
   23e60:	ldr	r3, [sp, #24]
   23e64:	mov	r2, #0
   23e68:	mov	r4, r2
   23e6c:	strb	sl, [r3]
   23e70:	str	fp, [r3, #24]
   23e74:	str	r6, [r3, #16]
   23e78:	str	r2, [r3, #20]
   23e7c:	add	r1, sp, #16384	; 0x4000
   23e80:	mov	r0, r4
   23e84:	ldr	r2, [r1, #36]	; 0x24
   23e88:	ldr	r1, [sp, #28]
   23e8c:	ldr	r3, [r1]
   23e90:	cmp	r2, r3
   23e94:	bne	240cc <__assert_fail@plt+0x124ec>
   23e98:	add	sp, sp, #16384	; 0x4000
   23e9c:	add	sp, sp, #44	; 0x2c
   23ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ea4:	bl	119f4 <__errno_location@plt>
   23ea8:	mov	fp, r8
   23eac:	ldr	r4, [r0]
   23eb0:	rsb	r4, r4, #0
   23eb4:	mov	r0, fp
   23eb8:	bl	117c0 <free@plt>
   23ebc:	b	23e7c <__assert_fail@plt+0x1229c>
   23ec0:	sub	r3, sl, #5
   23ec4:	cmp	r3, #5
   23ec8:	addls	pc, pc, r3, lsl #2
   23ecc:	b	24048 <__assert_fail@plt+0x12468>
   23ed0:	b	23fe8 <__assert_fail@plt+0x12408>
   23ed4:	b	24048 <__assert_fail@plt+0x12468>
   23ed8:	b	23f9c <__assert_fail@plt+0x123bc>
   23edc:	b	23f50 <__assert_fail@plt+0x12370>
   23ee0:	b	23f04 <__assert_fail@plt+0x12324>
   23ee4:	b	23ee8 <__assert_fail@plt+0x12308>
   23ee8:	ldr	r3, [sp, #24]
   23eec:	ldr	r0, [r3, #32]
   23ef0:	bl	1bc7c <__assert_fail@plt+0xa09c>
   23ef4:	cmp	r0, #2
   23ef8:	bgt	24094 <__assert_fail@plt+0x124b4>
   23efc:	mvn	r4, #21
   23f00:	b	23eb4 <__assert_fail@plt+0x122d4>
   23f04:	ldr	r3, [sp, #24]
   23f08:	ldr	r0, [r3, #32]
   23f0c:	bl	1bc7c <__assert_fail@plt+0xa09c>
   23f10:	cmp	r0, #2
   23f14:	ble	23efc <__assert_fail@plt+0x1231c>
   23f18:	ldr	r3, [sp, #24]
   23f1c:	mov	r1, #3
   23f20:	ldr	r5, [pc, #432]	; 240d8 <__assert_fail@plt+0x124f8>
   23f24:	mvn	r4, #21
   23f28:	ldr	lr, [pc, #428]	; 240dc <__assert_fail@plt+0x124fc>
   23f2c:	ldr	r2, [pc, #428]	; 240e0 <__assert_fail@plt+0x12500>
   23f30:	add	r5, pc, r5
   23f34:	ldr	r0, [r3, #32]
   23f38:	add	lr, pc, lr
   23f3c:	mov	r3, #77	; 0x4d
   23f40:	add	r2, pc, r2
   23f44:	stm	sp, {r5, lr}
   23f48:	bl	1bbe4 <__assert_fail@plt+0xa004>
   23f4c:	b	23eb4 <__assert_fail@plt+0x122d4>
   23f50:	ldr	r3, [sp, #24]
   23f54:	ldr	r0, [r3, #32]
   23f58:	bl	1bc7c <__assert_fail@plt+0xa09c>
   23f5c:	cmp	r0, #2
   23f60:	ble	23efc <__assert_fail@plt+0x1231c>
   23f64:	ldr	r3, [sp, #24]
   23f68:	mov	r1, #3
   23f6c:	ldr	r5, [pc, #368]	; 240e4 <__assert_fail@plt+0x12504>
   23f70:	mvn	r4, #21
   23f74:	ldr	lr, [pc, #364]	; 240e8 <__assert_fail@plt+0x12508>
   23f78:	ldr	r2, [pc, #364]	; 240ec <__assert_fail@plt+0x1250c>
   23f7c:	add	r5, pc, r5
   23f80:	ldr	r0, [r3, #32]
   23f84:	add	lr, pc, lr
   23f88:	mov	r3, #74	; 0x4a
   23f8c:	add	r2, pc, r2
   23f90:	stm	sp, {r5, lr}
   23f94:	bl	1bbe4 <__assert_fail@plt+0xa004>
   23f98:	b	23eb4 <__assert_fail@plt+0x122d4>
   23f9c:	ldr	r3, [sp, #24]
   23fa0:	ldr	r0, [r3, #32]
   23fa4:	bl	1bc7c <__assert_fail@plt+0xa09c>
   23fa8:	cmp	r0, #2
   23fac:	ble	23efc <__assert_fail@plt+0x1231c>
   23fb0:	ldr	r3, [sp, #24]
   23fb4:	mov	r1, #3
   23fb8:	ldr	r5, [pc, #304]	; 240f0 <__assert_fail@plt+0x12510>
   23fbc:	mvn	r4, #21
   23fc0:	ldr	lr, [pc, #300]	; 240f4 <__assert_fail@plt+0x12514>
   23fc4:	ldr	r2, [pc, #300]	; 240f8 <__assert_fail@plt+0x12518>
   23fc8:	add	r5, pc, r5
   23fcc:	ldr	r0, [r3, #32]
   23fd0:	add	lr, pc, lr
   23fd4:	mov	r3, #71	; 0x47
   23fd8:	add	r2, pc, r2
   23fdc:	stm	sp, {r5, lr}
   23fe0:	bl	1bbe4 <__assert_fail@plt+0xa004>
   23fe4:	b	23eb4 <__assert_fail@plt+0x122d4>
   23fe8:	ldr	r3, [sp, #24]
   23fec:	ldr	r0, [r3, #32]
   23ff0:	bl	1bc7c <__assert_fail@plt+0xa09c>
   23ff4:	cmp	r0, #2
   23ff8:	ble	23efc <__assert_fail@plt+0x1231c>
   23ffc:	ldr	r3, [sp, #24]
   24000:	mov	r0, #12
   24004:	ldr	r4, [pc, #240]	; 240fc <__assert_fail@plt+0x1251c>
   24008:	ldr	r5, [r3, #32]
   2400c:	bl	11928 <strerror@plt>
   24010:	ldr	lr, [pc, #232]	; 24100 <__assert_fail@plt+0x12520>
   24014:	add	r4, pc, r4
   24018:	ldr	r2, [pc, #228]	; 24104 <__assert_fail@plt+0x12524>
   2401c:	mov	r1, #3
   24020:	add	lr, pc, lr
   24024:	str	r4, [sp]
   24028:	add	r2, pc, r2
   2402c:	mov	r3, #68	; 0x44
   24030:	str	lr, [sp, #4]
   24034:	mvn	r4, #21
   24038:	str	r0, [sp, #8]
   2403c:	mov	r0, r5
   24040:	bl	1bbe4 <__assert_fail@plt+0xa004>
   24044:	b	23eb4 <__assert_fail@plt+0x122d4>
   24048:	ldr	r3, [sp, #24]
   2404c:	ldr	r0, [r3, #32]
   24050:	bl	1bc7c <__assert_fail@plt+0xa09c>
   24054:	cmp	r0, #2
   24058:	ble	23efc <__assert_fail@plt+0x1231c>
   2405c:	ldr	r3, [sp, #24]
   24060:	mov	r1, #3
   24064:	ldr	r5, [pc, #156]	; 24108 <__assert_fail@plt+0x12528>
   24068:	mvn	r4, #21
   2406c:	ldr	lr, [pc, #152]	; 2410c <__assert_fail@plt+0x1252c>
   24070:	ldr	r2, [pc, #152]	; 24110 <__assert_fail@plt+0x12530>
   24074:	add	r5, pc, r5
   24078:	ldr	r0, [r3, #32]
   2407c:	add	lr, pc, lr
   24080:	mov	r3, #83	; 0x53
   24084:	add	r2, pc, r2
   24088:	stm	sp, {r5, lr}
   2408c:	bl	1bbe4 <__assert_fail@plt+0xa004>
   24090:	b	23eb4 <__assert_fail@plt+0x122d4>
   24094:	ldr	r3, [sp, #24]
   24098:	mov	r1, #3
   2409c:	ldr	r5, [pc, #112]	; 24114 <__assert_fail@plt+0x12534>
   240a0:	mvn	r4, #21
   240a4:	ldr	lr, [pc, #108]	; 24118 <__assert_fail@plt+0x12538>
   240a8:	ldr	r2, [pc, #108]	; 2411c <__assert_fail@plt+0x1253c>
   240ac:	add	r5, pc, r5
   240b0:	ldr	r0, [r3, #32]
   240b4:	add	lr, pc, lr
   240b8:	mov	r3, #80	; 0x50
   240bc:	add	r2, pc, r2
   240c0:	stm	sp, {r5, lr}
   240c4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   240c8:	b	23eb4 <__assert_fail@plt+0x122d4>
   240cc:	bl	11838 <__stack_chk_fail@plt>
   240d0:	andeq	fp, r1, r4, lsr #5
   240d4:	andeq	r0, r0, ip, lsr #3
   240d8:	andeq	r9, r0, ip, lsr #27
   240dc:	andeq	r9, r0, r0, asr sp
   240e0:	ldrdeq	r9, [r0], -r4
   240e4:	andeq	r9, r0, r0, ror #26
   240e8:	ldrdeq	r9, [r0], -ip
   240ec:	andeq	r9, r0, r8, lsl #25
   240f0:	andeq	r9, r0, r4, lsl sp
   240f4:	andeq	r9, r0, r0, ror ip
   240f8:	andeq	r9, r0, ip, lsr ip
   240fc:	andeq	r9, r0, r8, asr #25
   24100:	andeq	r9, r0, r8, lsl ip
   24104:	andeq	r9, r0, ip, ror #23
   24108:	andeq	r9, r0, r8, ror #24
   2410c:	andeq	r9, r0, r4, asr #24
   24110:	muleq	r0, r0, fp
   24114:	andeq	r9, r0, r0, lsr ip
   24118:	andeq	r9, r0, ip, ror #23
   2411c:	andeq	r9, r0, r8, asr fp
   24120:	ldr	r3, [pc, #312]	; 24260 <__assert_fail@plt+0x12680>
   24124:	mov	r1, #0
   24128:	ldr	ip, [pc, #308]	; 24264 <__assert_fail@plt+0x12684>
   2412c:	mov	r2, #88	; 0x58
   24130:	add	r3, pc, r3
   24134:	push	{r4, r5, r6, lr}
   24138:	sub	sp, sp, #112	; 0x70
   2413c:	ldr	r5, [r3, ip]
   24140:	add	r4, sp, #16
   24144:	mov	r6, r0
   24148:	mov	r0, r4
   2414c:	ldr	r3, [r5]
   24150:	str	r3, [sp, #108]	; 0x6c
   24154:	bl	11a3c <memset@plt>
   24158:	mov	r1, #8
   2415c:	mov	r0, r4
   24160:	mvn	r2, #0
   24164:	mvn	r3, #0
   24168:	str	r1, [sp]
   2416c:	bl	119d0 <lzma_stream_decoder@plt>
   24170:	cmp	r0, #5
   24174:	beq	24200 <__assert_fail@plt+0x12620>
   24178:	cmp	r0, #0
   2417c:	bne	241b4 <__assert_fail@plt+0x125d4>
   24180:	mov	r1, r6
   24184:	mov	r0, r4
   24188:	bl	23d3c <__assert_fail@plt+0x1215c>
   2418c:	mov	r6, r0
   24190:	mov	r0, r4
   24194:	bl	119dc <lzma_end@plt>
   24198:	mov	r0, r6
   2419c:	ldr	r2, [sp, #108]	; 0x6c
   241a0:	ldr	r3, [r5]
   241a4:	cmp	r2, r3
   241a8:	bne	2425c <__assert_fail@plt+0x1267c>
   241ac:	add	sp, sp, #112	; 0x70
   241b0:	pop	{r4, r5, r6, pc}
   241b4:	ldr	r0, [r6, #32]
   241b8:	bl	1bc7c <__assert_fail@plt+0xa09c>
   241bc:	cmp	r0, #2
   241c0:	mvnle	r0, #21
   241c4:	ble	2419c <__assert_fail@plt+0x125bc>
   241c8:	ldr	lr, [pc, #152]	; 24268 <__assert_fail@plt+0x12688>
   241cc:	mov	r1, #3
   241d0:	ldr	ip, [pc, #148]	; 2426c <__assert_fail@plt+0x1268c>
   241d4:	mov	r3, #154	; 0x9a
   241d8:	ldr	r2, [pc, #144]	; 24270 <__assert_fail@plt+0x12690>
   241dc:	add	lr, pc, lr
   241e0:	ldr	r0, [r6, #32]
   241e4:	add	ip, pc, ip
   241e8:	add	r2, pc, r2
   241ec:	str	lr, [sp]
   241f0:	str	ip, [sp, #4]
   241f4:	bl	1bbe4 <__assert_fail@plt+0xa004>
   241f8:	mvn	r0, #21
   241fc:	b	2419c <__assert_fail@plt+0x125bc>
   24200:	ldr	r0, [r6, #32]
   24204:	bl	1bc7c <__assert_fail@plt+0xa09c>
   24208:	cmp	r0, #2
   2420c:	mvnle	r0, #11
   24210:	ble	2419c <__assert_fail@plt+0x125bc>
   24214:	mov	r0, #12
   24218:	ldr	r4, [r6, #32]
   2421c:	bl	11928 <strerror@plt>
   24220:	ldr	lr, [pc, #76]	; 24274 <__assert_fail@plt+0x12694>
   24224:	ldr	ip, [pc, #76]	; 24278 <__assert_fail@plt+0x12698>
   24228:	mov	r1, #3
   2422c:	ldr	r2, [pc, #72]	; 2427c <__assert_fail@plt+0x1269c>
   24230:	add	lr, pc, lr
   24234:	add	ip, pc, ip
   24238:	mov	r3, #151	; 0x97
   2423c:	add	r2, pc, r2
   24240:	str	lr, [sp]
   24244:	str	ip, [sp, #4]
   24248:	str	r0, [sp, #8]
   2424c:	mov	r0, r4
   24250:	bl	1bbe4 <__assert_fail@plt+0xa004>
   24254:	mvn	r0, #11
   24258:	b	2419c <__assert_fail@plt+0x125bc>
   2425c:	bl	11838 <__stack_chk_fail@plt>
   24260:	andeq	sl, r1, r8, asr #29
   24264:	andeq	r0, r0, ip, lsr #3
   24268:	andeq	r9, r0, r8, lsl sl
   2426c:	ldrdeq	r9, [r0], -ip
   24270:	andeq	r9, r0, ip, lsr #20
   24274:	andeq	r9, r0, r4, asr #19
   24278:	andeq	r9, r0, r4, lsl #20
   2427c:	ldrdeq	r9, [r0], -r8
   24280:	push	{r4, lr}
   24284:	mov	r4, r0
   24288:	ldr	r0, [r0, #36]	; 0x24
   2428c:	cmp	r0, #0
   24290:	popne	{r4, pc}
   24294:	ldr	r0, [r4, #24]
   24298:	ldrd	r2, [r4, #16]
   2429c:	bl	24534 <__assert_fail@plt+0x12954>
   242a0:	str	r0, [r4, #36]	; 0x24
   242a4:	pop	{r4, pc}
   242a8:	ldr	r3, [pc, #432]	; 24460 <__assert_fail@plt+0x12880>
   242ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242b0:	add	fp, sp, #32
   242b4:	ldr	r2, [pc, #424]	; 24464 <__assert_fail@plt+0x12884>
   242b8:	sub	sp, sp, #28
   242bc:	add	r3, pc, r3
   242c0:	mov	r8, r0
   242c4:	mov	r4, r1
   242c8:	ldr	r7, [r3, r2]
   242cc:	mov	r0, #1
   242d0:	mov	r1, #40	; 0x28
   242d4:	ldr	r3, [r7]
   242d8:	str	r3, [fp, #-40]	; 0xffffffd8
   242dc:	bl	11718 <calloc@plt>
   242e0:	subs	r6, r0, #0
   242e4:	beq	24360 <__assert_fail@plt+0x12780>
   242e8:	mov	r0, r4
   242ec:	mov	r1, #524288	; 0x80000
   242f0:	bl	118e0 <open64@plt>
   242f4:	cmp	r0, #0
   242f8:	str	r0, [r6, #8]
   242fc:	blt	24428 <__assert_fail@plt+0x12848>
   24300:	ldr	r9, [pc, #352]	; 24468 <__assert_fail@plt+0x12888>
   24304:	mov	r4, #0
   24308:	add	r9, pc, r9
   2430c:	add	r9, r9, #16
   24310:	mov	r3, r9
   24314:	ldr	r2, [r3, #-16]
   24318:	add	r3, r3, #16
   2431c:	cmp	r4, r2
   24320:	movcc	r4, r2
   24324:	ldr	r5, [r3, #-8]
   24328:	cmp	r5, #0
   2432c:	bne	24314 <__assert_fail@plt+0x12734>
   24330:	cmp	r4, #0
   24334:	strb	r5, [r6, #12]
   24338:	bne	2437c <__assert_fail@plt+0x1279c>
   2433c:	ldr	r9, [r6, #28]
   24340:	cmp	r9, #0
   24344:	beq	24438 <__assert_fail@plt+0x12858>
   24348:	ldr	r3, [r9]
   2434c:	mov	r0, r6
   24350:	blx	r3
   24354:	str	r8, [r6, #32]
   24358:	cmp	r0, #0
   2435c:	blt	24458 <__assert_fail@plt+0x12878>
   24360:	ldr	r2, [fp, #-40]	; 0xffffffd8
   24364:	mov	r0, r6
   24368:	ldr	r3, [r7]
   2436c:	cmp	r2, r3
   24370:	bne	24454 <__assert_fail@plt+0x12874>
   24374:	sub	sp, fp, #32
   24378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2437c:	add	r3, r4, #15
   24380:	add	r2, r4, #1
   24384:	bic	r3, r3, #7
   24388:	sub	sp, sp, r3
   2438c:	add	sl, sp, #8
   24390:	mov	r1, sl
   24394:	bl	1b460 <__assert_fail@plt+0x9880>
   24398:	mov	r2, #0
   2439c:	mov	r3, #0
   243a0:	mov	ip, r0
   243a4:	ldr	r0, [r6, #8]
   243a8:	str	r5, [sp]
   243ac:	str	ip, [fp, #-48]	; 0xffffffd0
   243b0:	bl	11898 <lseek64@plt>
   243b4:	ldr	ip, [fp, #-48]	; 0xffffffd0
   243b8:	cmp	ip, r4
   243bc:	beq	24404 <__assert_fail@plt+0x12824>
   243c0:	cmp	ip, #0
   243c4:	movge	r4, #22
   243c8:	blt	2444c <__assert_fail@plt+0x1286c>
   243cc:	ldr	r0, [r6, #8]
   243d0:	cmp	r0, #0
   243d4:	blt	243dc <__assert_fail@plt+0x127fc>
   243d8:	bl	11bbc <close@plt>
   243dc:	mov	r0, r6
   243e0:	mov	r6, #0
   243e4:	bl	117c0 <free@plt>
   243e8:	bl	119f4 <__errno_location@plt>
   243ec:	str	r4, [r0]
   243f0:	b	24360 <__assert_fail@plt+0x12780>
   243f4:	add	r9, r9, #16
   243f8:	ldr	r3, [r9, #-8]
   243fc:	cmp	r3, #0
   24400:	beq	2433c <__assert_fail@plt+0x1275c>
   24404:	mov	r0, sl
   24408:	ldr	r1, [r9, #-12]
   2440c:	ldr	r2, [r9, #-16]
   24410:	bl	11820 <memcmp@plt>
   24414:	cmp	r0, #0
   24418:	bne	243f4 <__assert_fail@plt+0x12814>
   2441c:	sub	r9, r9, #8
   24420:	str	r9, [r6, #28]
   24424:	b	24340 <__assert_fail@plt+0x12760>
   24428:	bl	119f4 <__errno_location@plt>
   2442c:	ldr	r0, [r0]
   24430:	rsb	r0, r0, #0
   24434:	b	24358 <__assert_fail@plt+0x12778>
   24438:	ldr	r3, [pc, #44]	; 2446c <__assert_fail@plt+0x1288c>
   2443c:	add	r3, pc, r3
   24440:	str	r3, [r6, #28]
   24444:	mov	r9, r3
   24448:	b	24348 <__assert_fail@plt+0x12768>
   2444c:	rsb	r4, ip, #0
   24450:	b	243cc <__assert_fail@plt+0x127ec>
   24454:	bl	11838 <__stack_chk_fail@plt>
   24458:	rsb	r4, r0, #0
   2445c:	b	243cc <__assert_fail@plt+0x127ec>
   24460:	andeq	sl, r1, ip, lsr sp
   24464:	andeq	r0, r0, ip, lsr #3
   24468:	andeq	sl, r1, r0, lsl #23
   2446c:	andeq	sl, r1, ip, ror sl
   24470:	ldr	r0, [r0, #24]
   24474:	bx	lr
   24478:	ldrd	r0, [r0, #16]
   2447c:	bx	lr
   24480:	ldrb	r0, [r0, #12]
   24484:	bx	lr
   24488:	ldr	r0, [r0, #8]
   2448c:	bx	lr
   24490:	push	{r4, lr}
   24494:	mov	r4, r0
   24498:	ldr	r0, [r0, #36]	; 0x24
   2449c:	cmp	r0, #0
   244a0:	beq	244a8 <__assert_fail@plt+0x128c8>
   244a4:	bl	24e4c <__assert_fail@plt+0x1326c>
   244a8:	ldr	r3, [r4, #28]
   244ac:	mov	r0, r4
   244b0:	ldr	r3, [r3, #4]
   244b4:	blx	r3
   244b8:	ldr	r0, [r4, #8]
   244bc:	cmp	r0, #0
   244c0:	blt	244c8 <__assert_fail@plt+0x128e8>
   244c4:	bl	11bbc <close@plt>
   244c8:	mov	r0, r4
   244cc:	pop	{r4, lr}
   244d0:	b	117c0 <free@plt>
   244d4:	push	{r3, lr}
   244d8:	mov	r2, #202	; 0xca
   244dc:	ldr	r0, [pc, #20]	; 244f8 <__assert_fail@plt+0x12918>
   244e0:	ldr	r1, [pc, #20]	; 244fc <__assert_fail@plt+0x1291c>
   244e4:	ldr	r3, [pc, #20]	; 24500 <__assert_fail@plt+0x12920>
   244e8:	add	r0, pc, r0
   244ec:	add	r1, pc, r1
   244f0:	add	r3, pc, r3
   244f4:	bl	11be0 <__assert_fail@plt>
   244f8:	andeq	r9, r0, r4, lsr r8
   244fc:	andeq	r9, r0, r4, asr #16
   24500:	andeq	r9, r0, r0, lsr #16
   24504:	push	{r3, r4, r5, lr}
   24508:	ldrd	r2, [r0, #48]	; 0x30
   2450c:	strd	r2, [r1]
   24510:	ldrd	r2, [r0, #56]	; 0x38
   24514:	ldrd	r4, [r0, #8]
   24518:	cmp	r3, r5
   2451c:	cmpeq	r2, r4
   24520:	bcs	24530 <__assert_fail@plt+0x12950>
   24524:	ldr	r0, [r0]
   24528:	add	r0, r0, r2
   2452c:	pop	{r3, r4, r5, pc}
   24530:	bl	244d4 <__assert_fail@plt+0x128f4>
   24534:	ldr	r1, [pc, #2284]	; 24e28 <__assert_fail@plt+0x13248>
   24538:	ldr	ip, [pc, #2284]	; 24e2c <__assert_fail@plt+0x1324c>
   2453c:	add	r1, pc, r1
   24540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24544:	mov	sl, r2
   24548:	mov	r2, r1
   2454c:	sub	sp, sp, #148	; 0x94
   24550:	ldr	r1, [r2, ip]
   24554:	mov	fp, r3
   24558:	cmp	fp, #0
   2455c:	cmpeq	sl, #16
   24560:	ldr	r2, [r1]
   24564:	str	r1, [sp, #12]
   24568:	str	r2, [sp, #140]	; 0x8c
   2456c:	bls	247cc <__assert_fail@plt+0x12bec>
   24570:	ldr	r1, [pc, #2232]	; 24e30 <__assert_fail@plt+0x13250>
   24574:	mov	r2, #4
   24578:	str	r0, [sp, #4]
   2457c:	add	r1, pc, r1
   24580:	bl	11820 <memcmp@plt>
   24584:	ldr	r3, [sp, #4]
   24588:	cmp	r0, #0
   2458c:	bne	247cc <__assert_fail@plt+0x12bec>
   24590:	ldrb	r2, [r3, #4]
   24594:	cmp	r2, #1
   24598:	beq	246f0 <__assert_fail@plt+0x12b10>
   2459c:	cmp	r2, #2
   245a0:	bne	246c0 <__assert_fail@plt+0x12ae0>
   245a4:	cmp	fp, #0
   245a8:	cmpeq	sl, #64	; 0x40
   245ac:	bls	246c0 <__assert_fail@plt+0x12ae0>
   245b0:	ldrb	r2, [r3, #5]
   245b4:	mov	r1, #4
   245b8:	cmp	r2, #1
   245bc:	beq	2470c <__assert_fail@plt+0x12b2c>
   245c0:	cmp	r2, #2
   245c4:	bne	246c0 <__assert_fail@plt+0x12ae0>
   245c8:	orr	r1, r1, #16
   245cc:	mov	r0, #80	; 0x50
   245d0:	str	r1, [sp, #8]
   245d4:	str	r3, [sp, #4]
   245d8:	bl	11910 <malloc@plt>
   245dc:	ldr	r1, [sp, #8]
   245e0:	ldr	r3, [sp, #4]
   245e4:	subs	r2, r0, #0
   245e8:	beq	246d0 <__assert_fail@plt+0x12af0>
   245ec:	tst	r1, #2
   245f0:	mov	r0, #0
   245f4:	str	r3, [r2]
   245f8:	strd	sl, [r2, #8]
   245fc:	str	r1, [r2, #16]
   24600:	str	r0, [r2, #4]
   24604:	beq	24714 <__assert_fail@plt+0x12b34>
   24608:	cmp	fp, #0
   2460c:	cmpeq	sl, #35	; 0x23
   24610:	bls	24ddc <__assert_fail@plt+0x131fc>
   24614:	tst	r1, #16
   24618:	beq	247d4 <__assert_fail@plt+0x12bf4>
   2461c:	add	ip, r3, #31
   24620:	add	lr, r3, #35	; 0x23
   24624:	mov	r0, #0
   24628:	mov	r1, #0
   2462c:	ldrb	r6, [ip, #1]!
   24630:	lsl	r5, r1, #8
   24634:	orr	r5, r5, r0, lsr #24
   24638:	lsl	r4, r0, #8
   2463c:	cmp	ip, lr
   24640:	mov	r7, #0
   24644:	orr	r0, r6, r4
   24648:	orr	r1, r7, r5
   2464c:	bne	2462c <__assert_fail@plt+0x12a4c>
   24650:	cmp	fp, #0
   24654:	cmpeq	sl, #49	; 0x31
   24658:	strd	r0, [r2, #24]
   2465c:	bls	24ddc <__assert_fail@plt+0x131fc>
   24660:	ldrb	r4, [r3, #48]	; 0x30
   24664:	cmp	fp, #0
   24668:	cmpeq	sl, #51	; 0x33
   2466c:	ldrb	r6, [r3, #49]	; 0x31
   24670:	lsl	r0, r4, #8
   24674:	orr	r0, r0, r6
   24678:	strh	r0, [r2, #32]
   2467c:	ldrb	r0, [r3, #46]	; 0x2e
   24680:	ldrb	r4, [r3, #47]	; 0x2f
   24684:	lsl	r8, r0, #8
   24688:	orr	r8, r8, r4
   2468c:	uxth	r8, r8
   24690:	strh	r8, [r2, #34]	; 0x22
   24694:	bls	24ddc <__assert_fail@plt+0x131fc>
   24698:	ldrb	r4, [r3, #50]	; 0x32
   2469c:	ldrb	r6, [r3, #51]	; 0x33
   246a0:	lsl	r0, r4, #8
   246a4:	orr	r0, r0, r6
   246a8:	strh	r0, [r2, #40]	; 0x28
   246ac:	ldrb	r0, [r3, #18]
   246b0:	ldrb	r4, [r3, #19]
   246b4:	lsl	r0, r0, #8
   246b8:	orr	r0, r0, r4
   246bc:	b	24874 <__assert_fail@plt+0x12c94>
   246c0:	mov	r4, #22
   246c4:	bl	119f4 <__errno_location@plt>
   246c8:	mov	r2, #0
   246cc:	str	r4, [r0]
   246d0:	ldr	r5, [sp, #12]
   246d4:	mov	r0, r2
   246d8:	ldr	r1, [sp, #140]	; 0x8c
   246dc:	ldr	r3, [r5]
   246e0:	cmp	r1, r3
   246e4:	bne	24dfc <__assert_fail@plt+0x1321c>
   246e8:	add	sp, sp, #148	; 0x94
   246ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   246f0:	cmp	fp, #0
   246f4:	cmpeq	sl, #52	; 0x34
   246f8:	bls	246c0 <__assert_fail@plt+0x12ae0>
   246fc:	ldrb	r2, [r3, #5]
   24700:	mov	r1, #2
   24704:	cmp	r2, #1
   24708:	bne	245c0 <__assert_fail@plt+0x129e0>
   2470c:	orr	r1, r1, #8
   24710:	b	245cc <__assert_fail@plt+0x129ec>
   24714:	cmp	fp, #0
   24718:	cmpeq	sl, #47	; 0x2f
   2471c:	bls	24ddc <__assert_fail@plt+0x131fc>
   24720:	tst	r1, #16
   24724:	beq	24880 <__assert_fail@plt+0x12ca0>
   24728:	add	ip, r3, #39	; 0x27
   2472c:	add	lr, r3, #47	; 0x2f
   24730:	mov	r0, #0
   24734:	mov	r1, #0
   24738:	ldrb	r6, [ip, #1]!
   2473c:	lsl	r5, r1, #8
   24740:	orr	r5, r5, r0, lsr #24
   24744:	lsl	r4, r0, #8
   24748:	cmp	ip, lr
   2474c:	mov	r7, #0
   24750:	orr	r0, r6, r4
   24754:	orr	r1, r7, r5
   24758:	bne	24738 <__assert_fail@plt+0x12b58>
   2475c:	cmp	fp, #0
   24760:	cmpeq	sl, #61	; 0x3d
   24764:	strd	r0, [r2, #24]
   24768:	bls	24ddc <__assert_fail@plt+0x131fc>
   2476c:	ldrb	r4, [r3, #60]	; 0x3c
   24770:	cmp	fp, #0
   24774:	cmpeq	sl, #63	; 0x3f
   24778:	ldrb	r6, [r3, #61]	; 0x3d
   2477c:	lsl	r0, r4, #8
   24780:	orr	r0, r0, r6
   24784:	strh	r0, [r2, #32]
   24788:	ldrb	r0, [r3, #58]	; 0x3a
   2478c:	ldrb	r4, [r3, #59]	; 0x3b
   24790:	lsl	r8, r0, #8
   24794:	orr	r8, r8, r4
   24798:	uxth	r8, r8
   2479c:	strh	r8, [r2, #34]	; 0x22
   247a0:	bls	24ddc <__assert_fail@plt+0x131fc>
   247a4:	ldrb	r4, [r3, #62]	; 0x3e
   247a8:	ldrb	r6, [r3, #63]	; 0x3f
   247ac:	lsl	r0, r4, #8
   247b0:	orr	r0, r0, r6
   247b4:	strh	r0, [r2, #40]	; 0x28
   247b8:	ldrb	r0, [r3, #18]
   247bc:	ldrb	r4, [r3, #19]
   247c0:	lsl	r0, r0, #8
   247c4:	orr	r0, r0, r4
   247c8:	b	24920 <__assert_fail@plt+0x12d40>
   247cc:	mov	r4, #8
   247d0:	b	246c4 <__assert_fail@plt+0x12ae4>
   247d4:	add	ip, r3, #36	; 0x24
   247d8:	add	lr, r3, #32
   247dc:	mov	r0, #0
   247e0:	mov	r1, #0
   247e4:	ldrb	r4, [ip, #-1]!
   247e8:	lsl	r7, r1, #8
   247ec:	orr	r7, r7, r0, lsr #24
   247f0:	lsl	r6, r0, #8
   247f4:	cmp	ip, lr
   247f8:	mov	r5, #0
   247fc:	orr	r0, r4, r6
   24800:	orr	r1, r5, r7
   24804:	bne	247e4 <__assert_fail@plt+0x12c04>
   24808:	cmp	fp, #0
   2480c:	cmpeq	sl, #49	; 0x31
   24810:	strd	r0, [r2, #24]
   24814:	bls	24ddc <__assert_fail@plt+0x131fc>
   24818:	ldrb	r4, [r3, #49]	; 0x31
   2481c:	cmp	fp, #0
   24820:	cmpeq	sl, #51	; 0x33
   24824:	ldrb	r6, [r3, #48]	; 0x30
   24828:	lsl	r0, r4, #8
   2482c:	orr	r0, r0, r6
   24830:	strh	r0, [r2, #32]
   24834:	ldrb	r0, [r3, #47]	; 0x2f
   24838:	ldrb	r4, [r3, #46]	; 0x2e
   2483c:	lsl	r8, r0, #8
   24840:	orr	r8, r8, r4
   24844:	uxth	r8, r8
   24848:	strh	r8, [r2, #34]	; 0x22
   2484c:	bls	24ddc <__assert_fail@plt+0x131fc>
   24850:	ldrb	r6, [r3, #51]	; 0x33
   24854:	ldrb	r4, [r3, #50]	; 0x32
   24858:	lsl	r0, r6, #8
   2485c:	orr	r0, r0, r4
   24860:	strh	r0, [r2, #40]	; 0x28
   24864:	ldrb	r6, [r3, #19]
   24868:	ldrb	r0, [r3, #18]
   2486c:	lsl	r6, r6, #8
   24870:	orr	r0, r6, r0
   24874:	strh	r0, [r2, #72]	; 0x48
   24878:	mov	r3, #40	; 0x28
   2487c:	b	24928 <__assert_fail@plt+0x12d48>
   24880:	add	ip, r3, #48	; 0x30
   24884:	add	lr, r3, #40	; 0x28
   24888:	mov	r0, #0
   2488c:	mov	r1, #0
   24890:	ldrb	r4, [ip, #-1]!
   24894:	lsl	r9, r1, #8
   24898:	orr	r9, r9, r0, lsr #24
   2489c:	lsl	r8, r0, #8
   248a0:	cmp	ip, lr
   248a4:	mov	r5, #0
   248a8:	orr	r0, r4, r8
   248ac:	orr	r1, r5, r9
   248b0:	bne	24890 <__assert_fail@plt+0x12cb0>
   248b4:	cmp	fp, #0
   248b8:	cmpeq	sl, #61	; 0x3d
   248bc:	strd	r0, [r2, #24]
   248c0:	bls	24ddc <__assert_fail@plt+0x131fc>
   248c4:	ldrb	r4, [r3, #61]	; 0x3d
   248c8:	cmp	fp, #0
   248cc:	cmpeq	sl, #63	; 0x3f
   248d0:	ldrb	r6, [r3, #60]	; 0x3c
   248d4:	lsl	r0, r4, #8
   248d8:	orr	r0, r0, r6
   248dc:	strh	r0, [r2, #32]
   248e0:	ldrb	r0, [r3, #59]	; 0x3b
   248e4:	ldrb	r4, [r3, #58]	; 0x3a
   248e8:	lsl	r8, r0, #8
   248ec:	orr	r8, r8, r4
   248f0:	uxth	r8, r8
   248f4:	strh	r8, [r2, #34]	; 0x22
   248f8:	bls	24ddc <__assert_fail@plt+0x131fc>
   248fc:	ldrb	r6, [r3, #63]	; 0x3f
   24900:	ldrb	r4, [r3, #62]	; 0x3e
   24904:	lsl	r0, r6, #8
   24908:	orr	r0, r0, r4
   2490c:	strh	r0, [r2, #40]	; 0x28
   24910:	ldrb	r6, [r3, #19]
   24914:	ldrb	r0, [r3, #18]
   24918:	lsl	r6, r6, #8
   2491c:	orr	r0, r6, r0
   24920:	mov	r3, #64	; 0x40
   24924:	strh	r0, [r2, #72]	; 0x48
   24928:	cmp	r8, r3
   2492c:	bne	24b50 <__assert_fail@plt+0x12f70>
   24930:	ldrh	r3, [r2, #32]
   24934:	mov	r7, #0
   24938:	ldrd	r0, [r2, #24]
   2493c:	mvn	r7, r7
   24940:	mul	r6, r3, r8
   24944:	mov	r4, r0
   24948:	mov	r5, r1
   2494c:	umlal	r4, r5, r3, r8
   24950:	mvn	r6, r6
   24954:	cmp	r1, r7
   24958:	cmpeq	r0, r6
   2495c:	bhi	24b50 <__assert_fail@plt+0x12f70>
   24960:	ldrd	sl, [r2, #8]
   24964:	cmp	fp, r5
   24968:	cmpeq	sl, r4
   2496c:	bcc	24b50 <__assert_fail@plt+0x12f70>
   24970:	ldrh	ip, [r2, #40]	; 0x28
   24974:	cmp	ip, #0
   24978:	beq	24e04 <__assert_fail@plt+0x13224>
   2497c:	cmp	r3, ip
   24980:	bls	24e08 <__assert_fail@plt+0x13228>
   24984:	mul	r8, r8, ip
   24988:	adds	r0, r0, r8
   2498c:	adc	r1, r1, r8, asr #31
   24990:	cmp	fp, r1
   24994:	cmpeq	sl, r0
   24998:	bls	24e00 <__assert_fail@plt+0x13220>
   2499c:	ldr	r3, [r2]
   249a0:	add	r0, r3, r0
   249a4:	rsb	lr, r3, r0
   249a8:	cmp	r0, #0
   249ac:	mov	r4, lr
   249b0:	asr	r5, lr, #31
   249b4:	strd	r4, [sp, #16]
   249b8:	beq	24dc4 <__assert_fail@plt+0x131e4>
   249bc:	ldr	r8, [r2, #16]
   249c0:	ldrd	r0, [sp, #16]
   249c4:	tst	r8, #2
   249c8:	beq	24b6c <__assert_fail@plt+0x12f8c>
   249cc:	adds	r0, r0, #24
   249d0:	adc	r1, r1, #0
   249d4:	cmp	fp, r1
   249d8:	cmpeq	sl, r0
   249dc:	bcc	24ddc <__assert_fail@plt+0x131fc>
   249e0:	ldrd	r6, [sp, #16]
   249e4:	mov	r4, #0
   249e8:	mov	r5, #0
   249ec:	adds	r6, r6, #20
   249f0:	adc	r7, r7, #0
   249f4:	ands	r8, r8, #16
   249f8:	add	ip, r3, r6
   249fc:	beq	24d30 <__assert_fail@plt+0x13150>
   24a00:	mov	r9, #0
   24a04:	strd	sl, [sp, #24]
   24a08:	ldrb	sl, [ip, r9]
   24a0c:	add	r9, r9, #1
   24a10:	lsl	r1, r5, #8
   24a14:	cmp	r9, #4
   24a18:	orr	r1, r1, r4, lsr #24
   24a1c:	lsl	r0, r4, #8
   24a20:	mov	fp, #0
   24a24:	orr	r4, sl, r0
   24a28:	orr	r5, fp, r1
   24a2c:	bne	24a08 <__assert_fail@plt+0x12e28>
   24a30:	ldrd	sl, [sp, #24]
   24a34:	strd	r4, [r2, #48]	; 0x30
   24a38:	cmp	fp, r7
   24a3c:	cmpeq	sl, r6
   24a40:	bcc	24ddc <__assert_fail@plt+0x131fc>
   24a44:	ldrd	r0, [sp, #16]
   24a48:	mov	r1, #0
   24a4c:	adds	r0, r0, #16
   24a50:	cmp	r8, #0
   24a54:	add	ip, r3, r0
   24a58:	mov	r0, #0
   24a5c:	beq	24cfc <__assert_fail@plt+0x1311c>
   24a60:	mov	r9, #0
   24a64:	strd	sl, [sp, #24]
   24a68:	ldrb	sl, [ip, r9]
   24a6c:	add	r9, r9, #1
   24a70:	lsl	r7, r1, #8
   24a74:	cmp	r9, #4
   24a78:	orr	r7, r7, r0, lsr #24
   24a7c:	lsl	r6, r0, #8
   24a80:	mov	fp, #0
   24a84:	orr	r0, sl, r6
   24a88:	orr	r1, fp, r7
   24a8c:	bne	24a68 <__assert_fail@plt+0x12e88>
   24a90:	ldrd	r6, [sp, #16]
   24a94:	ldrd	sl, [sp, #24]
   24a98:	adds	r6, r6, #4
   24a9c:	strd	r0, [r2, #56]	; 0x38
   24aa0:	adc	r7, r7, #0
   24aa4:	cmp	fp, r7
   24aa8:	cmpeq	sl, r6
   24aac:	bcc	24ddc <__assert_fail@plt+0x131fc>
   24ab0:	cmp	r8, #0
   24ab4:	mov	r6, #0
   24ab8:	mov	r7, #0
   24abc:	add	r3, r3, lr
   24ac0:	beq	24d94 <__assert_fail@plt+0x131b4>
   24ac4:	mov	ip, #0
   24ac8:	ldrb	sl, [r3, ip]
   24acc:	add	ip, ip, #1
   24ad0:	lsl	r9, r7, #8
   24ad4:	cmp	ip, #4
   24ad8:	orr	r9, r9, r6, lsr #24
   24adc:	lsl	r8, r6, #8
   24ae0:	mov	fp, #0
   24ae4:	orr	r6, sl, r8
   24ae8:	orr	r7, fp, r9
   24aec:	bne	24ac8 <__assert_fail@plt+0x12ee8>
   24af0:	str	r6, [r2, #64]	; 0x40
   24af4:	mvn	r6, r0
   24af8:	adds	r0, r0, r4
   24afc:	mvn	r7, r1
   24b00:	adc	r1, r1, r5
   24b04:	cmp	r7, r5
   24b08:	cmpeq	r6, r4
   24b0c:	bcc	24b50 <__assert_fail@plt+0x12f70>
   24b10:	ldrd	r4, [r2, #8]
   24b14:	cmp	r1, r5
   24b18:	cmpeq	r0, r4
   24b1c:	bhi	24b50 <__assert_fail@plt+0x12f70>
   24b20:	mov	r0, r2
   24b24:	add	r1, sp, #128	; 0x80
   24b28:	str	r2, [sp, #8]
   24b2c:	bl	24504 <__assert_fail@plt+0x12924>
   24b30:	ldrd	r4, [sp, #128]	; 0x80
   24b34:	ldr	r2, [sp, #8]
   24b38:	orrs	r1, r4, r5
   24b3c:	beq	24b50 <__assert_fail@plt+0x12f70>
   24b40:	add	r4, r0, r4
   24b44:	ldrb	r3, [r4, #-1]
   24b48:	cmp	r3, #0
   24b4c:	beq	246d0 <__assert_fail@plt+0x12af0>
   24b50:	mov	r0, r2
   24b54:	bl	117c0 <free@plt>
   24b58:	bl	119f4 <__errno_location@plt>
   24b5c:	mov	r3, #22
   24b60:	mov	r2, #0
   24b64:	str	r3, [r0]
   24b68:	b	246d0 <__assert_fail@plt+0x12af0>
   24b6c:	adds	r0, r0, #40	; 0x28
   24b70:	adc	r1, r1, #0
   24b74:	cmp	fp, r1
   24b78:	cmpeq	sl, r0
   24b7c:	bcc	24ddc <__assert_fail@plt+0x131fc>
   24b80:	ldrd	r6, [sp, #16]
   24b84:	mov	r4, #0
   24b88:	mov	r5, #0
   24b8c:	adds	r6, r6, #32
   24b90:	adc	r7, r7, #0
   24b94:	ands	r8, r8, #16
   24b98:	add	ip, r3, r6
   24b9c:	beq	24cc8 <__assert_fail@plt+0x130e8>
   24ba0:	mov	r9, #0
   24ba4:	strd	sl, [sp, #24]
   24ba8:	ldrb	sl, [ip, r9]
   24bac:	add	r9, r9, #1
   24bb0:	lsl	r1, r5, #8
   24bb4:	cmp	r9, #8
   24bb8:	orr	r1, r1, r4, lsr #24
   24bbc:	lsl	r0, r4, #8
   24bc0:	mov	fp, #0
   24bc4:	orr	r4, sl, r0
   24bc8:	orr	r5, fp, r1
   24bcc:	bne	24ba8 <__assert_fail@plt+0x12fc8>
   24bd0:	ldrd	sl, [sp, #24]
   24bd4:	strd	r4, [r2, #48]	; 0x30
   24bd8:	cmp	fp, r7
   24bdc:	cmpeq	sl, r6
   24be0:	bcc	24ddc <__assert_fail@plt+0x131fc>
   24be4:	ldrd	r0, [sp, #16]
   24be8:	mov	r1, #0
   24bec:	adds	r0, r0, #24
   24bf0:	cmp	r8, #0
   24bf4:	add	ip, r3, r0
   24bf8:	mov	r0, #0
   24bfc:	beq	24c94 <__assert_fail@plt+0x130b4>
   24c00:	mov	r9, #0
   24c04:	strd	sl, [sp, #24]
   24c08:	ldrb	sl, [ip, r9]
   24c0c:	add	r9, r9, #1
   24c10:	lsl	r7, r1, #8
   24c14:	cmp	r9, #8
   24c18:	orr	r7, r7, r0, lsr #24
   24c1c:	lsl	r6, r0, #8
   24c20:	mov	fp, #0
   24c24:	orr	r0, sl, r6
   24c28:	orr	r1, fp, r7
   24c2c:	bne	24c08 <__assert_fail@plt+0x13028>
   24c30:	ldrd	r6, [sp, #16]
   24c34:	ldrd	sl, [sp, #24]
   24c38:	adds	r6, r6, #4
   24c3c:	strd	r0, [r2, #56]	; 0x38
   24c40:	adc	r7, r7, #0
   24c44:	cmp	fp, r7
   24c48:	cmpeq	sl, r6
   24c4c:	bcc	24ddc <__assert_fail@plt+0x131fc>
   24c50:	cmp	r8, #0
   24c54:	mov	r6, #0
   24c58:	mov	r7, #0
   24c5c:	add	r3, r3, lr
   24c60:	beq	24d64 <__assert_fail@plt+0x13184>
   24c64:	mov	ip, #0
   24c68:	ldrb	sl, [r3, ip]
   24c6c:	add	ip, ip, #1
   24c70:	lsl	r9, r7, #8
   24c74:	cmp	ip, #4
   24c78:	orr	r9, r9, r6, lsr #24
   24c7c:	lsl	r8, r6, #8
   24c80:	mov	fp, #0
   24c84:	orr	r6, sl, r8
   24c88:	orr	r7, fp, r9
   24c8c:	bne	24c68 <__assert_fail@plt+0x13088>
   24c90:	b	24af0 <__assert_fail@plt+0x12f10>
   24c94:	mov	r9, #7
   24c98:	strd	sl, [sp, #24]
   24c9c:	ldrb	sl, [ip, r9]
   24ca0:	sub	r9, r9, #1
   24ca4:	lsl	r7, r1, #8
   24ca8:	cmn	r9, #1
   24cac:	orr	r7, r7, r0, lsr #24
   24cb0:	lsl	r6, r0, #8
   24cb4:	mov	fp, #0
   24cb8:	orr	r0, sl, r6
   24cbc:	orr	r1, fp, r7
   24cc0:	bne	24c9c <__assert_fail@plt+0x130bc>
   24cc4:	b	24c30 <__assert_fail@plt+0x13050>
   24cc8:	mov	r9, #7
   24ccc:	strd	sl, [sp, #24]
   24cd0:	ldrb	sl, [ip, r9]
   24cd4:	sub	r9, r9, #1
   24cd8:	lsl	r1, r5, #8
   24cdc:	cmn	r9, #1
   24ce0:	orr	r1, r1, r4, lsr #24
   24ce4:	lsl	r0, r4, #8
   24ce8:	mov	fp, #0
   24cec:	orr	r4, sl, r0
   24cf0:	orr	r5, fp, r1
   24cf4:	bne	24cd0 <__assert_fail@plt+0x130f0>
   24cf8:	b	24bd0 <__assert_fail@plt+0x12ff0>
   24cfc:	mov	r9, #3
   24d00:	strd	sl, [sp, #24]
   24d04:	ldrb	sl, [ip, r9]
   24d08:	sub	r9, r9, #1
   24d0c:	lsl	r7, r1, #8
   24d10:	cmn	r9, #1
   24d14:	orr	r7, r7, r0, lsr #24
   24d18:	lsl	r6, r0, #8
   24d1c:	mov	fp, #0
   24d20:	orr	r0, sl, r6
   24d24:	orr	r1, fp, r7
   24d28:	bne	24d04 <__assert_fail@plt+0x13124>
   24d2c:	b	24a90 <__assert_fail@plt+0x12eb0>
   24d30:	mov	r9, #3
   24d34:	strd	sl, [sp, #24]
   24d38:	ldrb	sl, [ip, r9]
   24d3c:	sub	r9, r9, #1
   24d40:	lsl	r1, r5, #8
   24d44:	cmn	r9, #1
   24d48:	orr	r1, r1, r4, lsr #24
   24d4c:	lsl	r0, r4, #8
   24d50:	mov	fp, #0
   24d54:	orr	r4, sl, r0
   24d58:	orr	r5, fp, r1
   24d5c:	bne	24d38 <__assert_fail@plt+0x13158>
   24d60:	b	24a30 <__assert_fail@plt+0x12e50>
   24d64:	mov	ip, #3
   24d68:	ldrb	sl, [r3, ip]
   24d6c:	sub	ip, ip, #1
   24d70:	lsl	r9, r7, #8
   24d74:	cmn	ip, #1
   24d78:	orr	r9, r9, r6, lsr #24
   24d7c:	lsl	r8, r6, #8
   24d80:	mov	fp, #0
   24d84:	orr	r6, sl, r8
   24d88:	orr	r7, fp, r9
   24d8c:	bne	24d68 <__assert_fail@plt+0x13188>
   24d90:	b	24af0 <__assert_fail@plt+0x12f10>
   24d94:	mov	ip, #3
   24d98:	ldrb	sl, [r3, ip]
   24d9c:	sub	ip, ip, #1
   24da0:	lsl	r9, r7, #8
   24da4:	cmn	ip, #1
   24da8:	orr	r9, r9, r6, lsr #24
   24dac:	lsl	r8, r6, #8
   24db0:	mov	fp, #0
   24db4:	orr	r6, sl, r8
   24db8:	orr	r7, fp, r9
   24dbc:	bne	24d98 <__assert_fail@plt+0x131b8>
   24dc0:	b	24af0 <__assert_fail@plt+0x12f10>
   24dc4:	mov	r1, #0
   24dc8:	str	r0, [r2, #64]	; 0x40
   24dcc:	mov	r0, #0
   24dd0:	strd	r0, [r2, #56]	; 0x38
   24dd4:	strd	r0, [r2, #48]	; 0x30
   24dd8:	b	24b50 <__assert_fail@plt+0x12f70>
   24ddc:	ldr	r0, [pc, #80]	; 24e34 <__assert_fail@plt+0x13254>
   24de0:	mov	r2, #137	; 0x89
   24de4:	ldr	r1, [pc, #76]	; 24e38 <__assert_fail@plt+0x13258>
   24de8:	ldr	r3, [pc, #76]	; 24e3c <__assert_fail@plt+0x1325c>
   24dec:	add	r0, pc, r0
   24df0:	add	r1, pc, r1
   24df4:	add	r3, pc, r3
   24df8:	bl	11be0 <__assert_fail@plt>
   24dfc:	bl	11838 <__stack_chk_fail@plt>
   24e00:	bl	244d4 <__assert_fail@plt+0x128f4>
   24e04:	bl	11bec <__assert_fail@plt+0xc>
   24e08:	ldr	r0, [pc, #48]	; 24e40 <__assert_fail@plt+0x13260>
   24e0c:	mov	r2, #214	; 0xd6
   24e10:	ldr	r1, [pc, #44]	; 24e44 <__assert_fail@plt+0x13264>
   24e14:	ldr	r3, [pc, #44]	; 24e48 <__assert_fail@plt+0x13268>
   24e18:	add	r0, pc, r0
   24e1c:	add	r1, pc, r1
   24e20:	add	r3, pc, r3
   24e24:	bl	11be0 <__assert_fail@plt>
   24e28:			; <UNDEFINED> instruction: 0x0001aabc
   24e2c:	andeq	r0, r0, ip, lsr #3
   24e30:	strdeq	r9, [r0], -r4
   24e34:	andeq	r8, r0, ip, lsl #31
   24e38:	andeq	r8, r0, r0, asr #30
   24e3c:	andeq	r8, r0, r0, lsl #30
   24e40:	andeq	r8, r0, ip, ror pc
   24e44:	andeq	r8, r0, r4, lsl pc
   24e48:	andeq	r8, r0, r4, asr #31
   24e4c:	push	{r4, lr}
   24e50:	mov	r4, r0
   24e54:	ldr	r0, [r0, #4]
   24e58:	bl	117c0 <free@plt>
   24e5c:	mov	r0, r4
   24e60:	pop	{r4, lr}
   24e64:	b	117c0 <free@plt>
   24e68:	ldr	r0, [r0]
   24e6c:	bx	lr
   24e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e74:	sub	sp, sp, #180	; 0xb4
   24e78:	ldr	lr, [pc, #1552]	; 25490 <__assert_fail@plt+0x138b0>
   24e7c:	mov	sl, r0
   24e80:	ldr	ip, [pc, #1548]	; 25494 <__assert_fail@plt+0x138b4>
   24e84:	add	lr, pc, lr
   24e88:	str	r1, [sp, #52]	; 0x34
   24e8c:	str	r2, [sp, #56]	; 0x38
   24e90:	add	r1, sp, #160	; 0xa0
   24e94:	str	r3, [sp, #60]	; 0x3c
   24e98:	ldr	ip, [lr, ip]
   24e9c:	ldr	r3, [ip]
   24ea0:	str	ip, [sp, #44]	; 0x2c
   24ea4:	str	r3, [sp, #172]	; 0xac
   24ea8:	bl	24504 <__assert_fail@plt+0x12924>
   24eac:	ldrh	r2, [sl, #32]
   24eb0:	mov	r1, #0
   24eb4:	ldr	r4, [sp, #56]	; 0x38
   24eb8:	mov	r3, #0
   24ebc:	str	r2, [sp, #20]
   24ec0:	mov	r2, #0
   24ec4:	ldr	r5, [sp, #20]
   24ec8:	str	r1, [r4]
   24ecc:	ldr	r4, [sp, #60]	; 0x3c
   24ed0:	cmp	r5, #1
   24ed4:	strd	r2, [r4]
   24ed8:	str	r0, [sp, #48]	; 0x30
   24edc:	bls	25460 <__assert_fail@plt+0x13880>
   24ee0:	ldr	r5, [sp, #20]
   24ee4:	mov	r2, #1
   24ee8:	mov	fp, r2
   24eec:	sub	r3, r5, #2
   24ef0:	ldrd	r4, [sp, #160]	; 0xa0
   24ef4:	uxth	r3, r3
   24ef8:	add	r3, r3, r2
   24efc:	strd	r4, [sp, #32]
   24f00:	str	r3, [sp, #40]	; 0x28
   24f04:	ldr	r5, [sp, #20]
   24f08:	uxth	r3, fp
   24f0c:	cmp	r3, r5
   24f10:	bcs	24fe8 <__assert_fail@plt+0x13408>
   24f14:	ldrh	r1, [sl, #34]	; 0x22
   24f18:	ldrd	r2, [sl, #24]
   24f1c:	ldrd	r4, [sl, #8]
   24f20:	mul	r1, r1, fp
   24f24:	strd	r4, [sp]
   24f28:	adds	r2, r2, r1
   24f2c:	adc	r3, r3, r1, asr #31
   24f30:	cmp	r3, r5
   24f34:	cmpeq	r2, r4
   24f38:	bcs	25488 <__assert_fail@plt+0x138a8>
   24f3c:	ldr	r7, [sl]
   24f40:	add	ip, r7, r2
   24f44:	cmp	ip, #0
   24f48:	rsb	ip, r7, ip
   24f4c:	mov	r0, ip
   24f50:	asr	r1, ip, #31
   24f54:	strd	r0, [sp, #8]
   24f58:	beq	24fe8 <__assert_fail@plt+0x13408>
   24f5c:	ldr	r0, [sl, #16]
   24f60:	ldrd	r2, [sp, #8]
   24f64:	ands	r6, r0, #2
   24f68:	beq	24ffc <__assert_fail@plt+0x1341c>
   24f6c:	adds	r2, r2, #24
   24f70:	ldrd	r4, [sp]
   24f74:	adc	r3, r3, #0
   24f78:	cmp	r5, r3
   24f7c:	cmpeq	r4, r2
   24f80:	bcc	25468 <__assert_fail@plt+0x13888>
   24f84:	ldrd	r4, [sp, #8]
   24f88:	mov	r8, #0
   24f8c:	mov	r9, #0
   24f90:	adds	r4, r4, #20
   24f94:	adc	r5, r5, #0
   24f98:	ands	r0, r0, #16
   24f9c:	add	r1, r7, r4
   24fa0:	str	r0, [sp, #16]
   24fa4:	beq	25240 <__assert_fail@plt+0x13660>
   24fa8:	mov	r6, #0
   24fac:	strd	r4, [sp, #24]
   24fb0:	ldrb	r4, [r1, r6]
   24fb4:	add	r6, r6, #1
   24fb8:	lsl	r3, r9, #8
   24fbc:	cmp	r6, #4
   24fc0:	orr	r3, r3, r8, lsr #24
   24fc4:	lsl	r2, r8, #8
   24fc8:	mov	r5, #0
   24fcc:	orr	r8, r4, r2
   24fd0:	orr	r9, r5, r3
   24fd4:	bne	24fb0 <__assert_fail@plt+0x133d0>
   24fd8:	ldrd	r4, [sp, #24]
   24fdc:	str	r0, [sp, #16]
   24fe0:	strd	r2, [sp, #64]	; 0x40
   24fe4:	b	25280 <__assert_fail@plt+0x136a0>
   24fe8:	ldr	r3, [sp, #40]	; 0x28
   24fec:	cmp	fp, r3
   24ff0:	beq	25460 <__assert_fail@plt+0x13880>
   24ff4:	add	fp, fp, #1
   24ff8:	b	24f04 <__assert_fail@plt+0x13324>
   24ffc:	adds	r2, r2, #40	; 0x28
   25000:	ldrd	r4, [sp]
   25004:	adc	r3, r3, #0
   25008:	cmp	r5, r3
   2500c:	cmpeq	r4, r2
   25010:	bcc	25468 <__assert_fail@plt+0x13888>
   25014:	ldrd	r4, [sp, #8]
   25018:	mov	r8, #0
   2501c:	mov	r9, #0
   25020:	adds	r4, r4, #32
   25024:	adc	r5, r5, #0
   25028:	ands	r0, r0, #16
   2502c:	add	r1, r7, r4
   25030:	str	r0, [sp, #16]
   25034:	beq	25074 <__assert_fail@plt+0x13494>
   25038:	strd	r4, [sp, #24]
   2503c:	ldrb	r4, [r1, r6]
   25040:	add	r6, r6, #1
   25044:	lsl	r3, r9, #8
   25048:	cmp	r6, #8
   2504c:	orr	r3, r3, r8, lsr #24
   25050:	lsl	r2, r8, #8
   25054:	mov	r5, #0
   25058:	orr	r8, r4, r2
   2505c:	orr	r9, r5, r3
   25060:	bne	2503c <__assert_fail@plt+0x1345c>
   25064:	ldrd	r4, [sp, #24]
   25068:	str	r0, [sp, #16]
   2506c:	strd	r2, [sp, #112]	; 0x70
   25070:	b	250b4 <__assert_fail@plt+0x134d4>
   25074:	ldr	r0, [sp, #16]
   25078:	mov	r6, #7
   2507c:	strd	r4, [sp, #24]
   25080:	ldrb	r4, [r1, r6]
   25084:	sub	r6, r6, #1
   25088:	lsl	r3, r9, #8
   2508c:	cmn	r6, #1
   25090:	orr	r3, r3, r8, lsr #24
   25094:	lsl	r2, r8, #8
   25098:	mov	r5, #0
   2509c:	orr	r8, r4, r2
   250a0:	orr	r9, r5, r3
   250a4:	bne	25080 <__assert_fail@plt+0x134a0>
   250a8:	ldrd	r4, [sp, #24]
   250ac:	str	r0, [sp, #16]
   250b0:	strd	r2, [sp, #120]	; 0x78
   250b4:	ldrd	r2, [sp]
   250b8:	cmp	r5, r3
   250bc:	cmpeq	r4, r2
   250c0:	bhi	25468 <__assert_fail@plt+0x13888>
   250c4:	ldr	r4, [sp, #16]
   250c8:	mov	r5, #0
   250cc:	ldrd	r2, [sp, #8]
   250d0:	adds	r2, r2, #24
   250d4:	cmp	r4, #0
   250d8:	add	r1, r7, r2
   250dc:	mov	r4, #0
   250e0:	beq	2541c <__assert_fail@plt+0x1383c>
   250e4:	ldr	r0, [sp, #16]
   250e8:	mov	r6, #0
   250ec:	strd	r8, [sp, #24]
   250f0:	ldrb	r8, [r1, r6]
   250f4:	add	r6, r6, #1
   250f8:	lsl	r3, r5, #8
   250fc:	cmp	r6, #8
   25100:	orr	r3, r3, r4, lsr #24
   25104:	lsl	r2, r4, #8
   25108:	mov	r9, #0
   2510c:	orr	r4, r8, r2
   25110:	orr	r5, r9, r3
   25114:	bne	250f0 <__assert_fail@plt+0x13510>
   25118:	ldrd	r8, [sp, #24]
   2511c:	str	r0, [sp, #16]
   25120:	strd	r2, [sp, #128]	; 0x80
   25124:	ldrd	r0, [sp, #8]
   25128:	ldrd	r2, [sp]
   2512c:	adds	r0, r0, #4
   25130:	adc	r1, r1, #0
   25134:	cmp	r3, r1
   25138:	cmpeq	r2, r0
   2513c:	bcc	25468 <__assert_fail@plt+0x13888>
   25140:	ldr	r3, [sp, #16]
   25144:	mov	r2, #0
   25148:	add	ip, r7, ip
   2514c:	cmp	r3, #0
   25150:	mov	r3, #0
   25154:	beq	2539c <__assert_fail@plt+0x137bc>
   25158:	mov	r6, #0
   2515c:	strd	r8, [sp, #8]
   25160:	ldrb	r8, [ip, r6]
   25164:	add	r6, r6, #1
   25168:	lsl	r1, r3, #8
   2516c:	cmp	r6, #4
   25170:	orr	r1, r1, r2, lsr #24
   25174:	lsl	r0, r2, #8
   25178:	mov	r9, #0
   2517c:	orr	r2, r8, r0
   25180:	orr	r3, r9, r1
   25184:	bne	25160 <__assert_fail@plt+0x13580>
   25188:	ldrd	r8, [sp, #8]
   2518c:	strd	r0, [sp, #144]	; 0x90
   25190:	adds	r0, r4, r8
   25194:	mov	ip, r2
   25198:	mvn	r3, r5
   2519c:	mvn	r2, r4
   251a0:	adc	r1, r5, r9
   251a4:	strd	r0, [sp, #8]
   251a8:	mov	r0, r2
   251ac:	mov	r1, r3
   251b0:	cmp	r9, r1
   251b4:	cmpeq	r8, r0
   251b8:	bhi	24fe8 <__assert_fail@plt+0x13408>
   251bc:	ldrd	r2, [sp, #8]
   251c0:	ldrd	r0, [sp]
   251c4:	cmp	r3, r1
   251c8:	cmpeq	r2, r0
   251cc:	bhi	24fe8 <__assert_fail@plt+0x13408>
   251d0:	ldrd	r2, [sp, #32]
   251d4:	mov	r0, ip
   251d8:	mov	r1, #0
   251dc:	cmp	r1, r3
   251e0:	cmpeq	r0, r2
   251e4:	bcs	24fe8 <__assert_fail@plt+0x13408>
   251e8:	ldr	r2, [sp, #48]	; 0x30
   251ec:	ldr	r0, [sp, #52]	; 0x34
   251f0:	add	r1, r2, ip
   251f4:	bl	11754 <strcmp@plt>
   251f8:	cmp	r0, #0
   251fc:	bne	24fe8 <__assert_fail@plt+0x13408>
   25200:	ldrd	r2, [sp]
   25204:	cmp	r3, r5
   25208:	cmpeq	r2, r4
   2520c:	bls	25488 <__assert_fail@plt+0x138a8>
   25210:	ldr	r5, [sp, #56]	; 0x38
   25214:	add	r4, r7, r4
   25218:	ldr	r2, [sp, #60]	; 0x3c
   2521c:	str	r4, [r5]
   25220:	strd	r8, [r2]
   25224:	ldr	r4, [sp, #44]	; 0x2c
   25228:	ldr	r2, [sp, #172]	; 0xac
   2522c:	ldr	r3, [r4]
   25230:	cmp	r2, r3
   25234:	bne	2548c <__assert_fail@plt+0x138ac>
   25238:	add	sp, sp, #180	; 0xb4
   2523c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25240:	ldr	r0, [sp, #16]
   25244:	mov	r6, #3
   25248:	strd	r4, [sp, #24]
   2524c:	ldrb	r4, [r1, r6]
   25250:	sub	r6, r6, #1
   25254:	lsl	r3, r9, #8
   25258:	cmn	r6, #1
   2525c:	orr	r3, r3, r8, lsr #24
   25260:	lsl	r2, r8, #8
   25264:	mov	r5, #0
   25268:	orr	r8, r4, r2
   2526c:	orr	r9, r5, r3
   25270:	bne	2524c <__assert_fail@plt+0x1366c>
   25274:	ldrd	r4, [sp, #24]
   25278:	str	r0, [sp, #16]
   2527c:	strd	r2, [sp, #72]	; 0x48
   25280:	ldrd	r2, [sp]
   25284:	cmp	r5, r3
   25288:	cmpeq	r4, r2
   2528c:	bhi	25468 <__assert_fail@plt+0x13888>
   25290:	ldr	r4, [sp, #16]
   25294:	mov	r5, #0
   25298:	ldrd	r2, [sp, #8]
   2529c:	adds	r2, r2, #16
   252a0:	cmp	r4, #0
   252a4:	add	r1, r7, r2
   252a8:	mov	r4, #0
   252ac:	beq	253d8 <__assert_fail@plt+0x137f8>
   252b0:	ldr	r0, [sp, #16]
   252b4:	mov	r6, #0
   252b8:	strd	r8, [sp, #24]
   252bc:	ldrb	r8, [r1, r6]
   252c0:	add	r6, r6, #1
   252c4:	lsl	r3, r5, #8
   252c8:	cmp	r6, #4
   252cc:	orr	r3, r3, r4, lsr #24
   252d0:	lsl	r2, r4, #8
   252d4:	mov	r9, #0
   252d8:	orr	r4, r8, r2
   252dc:	orr	r5, r9, r3
   252e0:	bne	252bc <__assert_fail@plt+0x136dc>
   252e4:	ldrd	r8, [sp, #24]
   252e8:	str	r0, [sp, #16]
   252ec:	strd	r2, [sp, #80]	; 0x50
   252f0:	ldrd	r0, [sp, #8]
   252f4:	ldrd	r2, [sp]
   252f8:	adds	r0, r0, #4
   252fc:	adc	r1, r1, #0
   25300:	cmp	r3, r1
   25304:	cmpeq	r2, r0
   25308:	bcc	25468 <__assert_fail@plt+0x13888>
   2530c:	ldr	r3, [sp, #16]
   25310:	mov	r2, #0
   25314:	add	ip, r7, ip
   25318:	cmp	r3, #0
   2531c:	mov	r3, #0
   25320:	beq	25360 <__assert_fail@plt+0x13780>
   25324:	mov	r6, #0
   25328:	strd	r8, [sp, #8]
   2532c:	ldrb	r8, [ip, r6]
   25330:	add	r6, r6, #1
   25334:	lsl	r1, r3, #8
   25338:	cmp	r6, #4
   2533c:	orr	r1, r1, r2, lsr #24
   25340:	lsl	r0, r2, #8
   25344:	mov	r9, #0
   25348:	orr	r2, r8, r0
   2534c:	orr	r3, r9, r1
   25350:	bne	2532c <__assert_fail@plt+0x1374c>
   25354:	ldrd	r8, [sp, #8]
   25358:	strd	r0, [sp, #96]	; 0x60
   2535c:	b	25190 <__assert_fail@plt+0x135b0>
   25360:	mov	r6, #3
   25364:	strd	r8, [sp, #8]
   25368:	ldrb	r8, [ip, r6]
   2536c:	sub	r6, r6, #1
   25370:	lsl	r1, r3, #8
   25374:	cmn	r6, #1
   25378:	orr	r1, r1, r2, lsr #24
   2537c:	lsl	r0, r2, #8
   25380:	mov	r9, #0
   25384:	orr	r2, r8, r0
   25388:	orr	r3, r9, r1
   2538c:	bne	25368 <__assert_fail@plt+0x13788>
   25390:	ldrd	r8, [sp, #8]
   25394:	strd	r0, [sp, #104]	; 0x68
   25398:	b	25190 <__assert_fail@plt+0x135b0>
   2539c:	mov	r6, #3
   253a0:	strd	r8, [sp, #8]
   253a4:	ldrb	r8, [ip, r6]
   253a8:	sub	r6, r6, #1
   253ac:	lsl	r1, r3, #8
   253b0:	cmn	r6, #1
   253b4:	orr	r1, r1, r2, lsr #24
   253b8:	lsl	r0, r2, #8
   253bc:	mov	r9, #0
   253c0:	orr	r2, r8, r0
   253c4:	orr	r3, r9, r1
   253c8:	bne	253a4 <__assert_fail@plt+0x137c4>
   253cc:	ldrd	r8, [sp, #8]
   253d0:	strd	r0, [sp, #152]	; 0x98
   253d4:	b	25190 <__assert_fail@plt+0x135b0>
   253d8:	ldr	r0, [sp, #16]
   253dc:	mov	r6, #3
   253e0:	strd	r8, [sp, #24]
   253e4:	ldrb	r8, [r1, r6]
   253e8:	sub	r6, r6, #1
   253ec:	lsl	r3, r5, #8
   253f0:	cmn	r6, #1
   253f4:	orr	r3, r3, r4, lsr #24
   253f8:	lsl	r2, r4, #8
   253fc:	mov	r9, #0
   25400:	orr	r4, r8, r2
   25404:	orr	r5, r9, r3
   25408:	bne	253e4 <__assert_fail@plt+0x13804>
   2540c:	ldrd	r8, [sp, #24]
   25410:	str	r0, [sp, #16]
   25414:	strd	r2, [sp, #88]	; 0x58
   25418:	b	252f0 <__assert_fail@plt+0x13710>
   2541c:	ldr	r0, [sp, #16]
   25420:	mov	r6, #7
   25424:	strd	r8, [sp, #24]
   25428:	ldrb	r8, [r1, r6]
   2542c:	sub	r6, r6, #1
   25430:	lsl	r3, r5, #8
   25434:	cmn	r6, #1
   25438:	orr	r3, r3, r4, lsr #24
   2543c:	lsl	r2, r4, #8
   25440:	mov	r9, #0
   25444:	orr	r4, r8, r2
   25448:	orr	r5, r9, r3
   2544c:	bne	25428 <__assert_fail@plt+0x13848>
   25450:	ldrd	r8, [sp, #24]
   25454:	str	r0, [sp, #16]
   25458:	strd	r2, [sp, #136]	; 0x88
   2545c:	b	25124 <__assert_fail@plt+0x13544>
   25460:	mvn	r0, #1
   25464:	b	25224 <__assert_fail@plt+0x13644>
   25468:	ldr	r0, [pc, #40]	; 25498 <__assert_fail@plt+0x138b8>
   2546c:	mov	r2, #137	; 0x89
   25470:	ldr	r1, [pc, #36]	; 2549c <__assert_fail@plt+0x138bc>
   25474:	ldr	r3, [pc, #36]	; 254a0 <__assert_fail@plt+0x138c0>
   25478:	add	r0, pc, r0
   2547c:	add	r1, pc, r1
   25480:	add	r3, pc, r3
   25484:	bl	11be0 <__assert_fail@plt>
   25488:	bl	244d4 <__assert_fail@plt+0x128f4>
   2548c:	bl	11838 <__stack_chk_fail@plt>
   25490:	andeq	sl, r1, r4, ror r1
   25494:	andeq	r0, r0, ip, lsr #3
   25498:	andeq	r8, r0, r0, lsl #18
   2549c:			; <UNDEFINED> instruction: 0x000088b4
   254a0:	andeq	r8, r0, r4, ror r8
   254a4:	ldr	ip, [pc, #580]	; 256f0 <__assert_fail@plt+0x13b10>
   254a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254ac:	add	ip, pc, ip
   254b0:	ldr	r4, [pc, #572]	; 256f4 <__assert_fail@plt+0x13b14>
   254b4:	sub	sp, sp, #28
   254b8:	mov	sl, r2
   254bc:	mov	lr, #0
   254c0:	add	r2, sp, #4
   254c4:	add	r3, sp, #8
   254c8:	ldr	r9, [ip, r4]
   254cc:	ldr	ip, [r9]
   254d0:	str	lr, [sl]
   254d4:	str	ip, [sp, #20]
   254d8:	bl	24e70 <__assert_fail@plt+0x13290>
   254dc:	cmp	r0, #0
   254e0:	blt	25698 <__assert_fail@plt+0x13ab8>
   254e4:	ldr	r6, [sp, #4]
   254e8:	cmp	r6, #0
   254ec:	beq	25694 <__assert_fail@plt+0x13ab4>
   254f0:	ldrd	r4, [sp, #8]
   254f4:	orrs	r3, r4, r5
   254f8:	beq	25694 <__assert_fail@plt+0x13ab4>
   254fc:	ldrb	r3, [r6]
   25500:	cmp	r3, #0
   25504:	bne	25548 <__assert_fail@plt+0x13968>
   25508:	cmp	r5, #0
   2550c:	cmpeq	r4, #1
   25510:	bls	25694 <__assert_fail@plt+0x13ab4>
   25514:	add	r3, r6, #1
   25518:	b	25528 <__assert_fail@plt+0x13948>
   2551c:	cmp	r5, #0
   25520:	cmpeq	r4, #1
   25524:	beq	25694 <__assert_fail@plt+0x13ab4>
   25528:	subs	r4, r4, #1
   2552c:	mov	r6, r3
   25530:	sbc	r5, r5, #0
   25534:	strd	r4, [sp, #8]
   25538:	ldrb	r2, [r6]
   2553c:	add	r3, r3, #1
   25540:	cmp	r2, #0
   25544:	beq	2551c <__assert_fail@plt+0x1393c>
   25548:	cmp	r5, #0
   2554c:	cmpeq	r4, #1
   25550:	bls	25694 <__assert_fail@plt+0x13ab4>
   25554:	mov	r7, #0
   25558:	mov	r2, #0
   2555c:	mov	r3, #0
   25560:	mov	r1, r7
   25564:	cmp	r3, r5
   25568:	cmpeq	r2, r4
   2556c:	bcs	25598 <__assert_fail@plt+0x139b8>
   25570:	ldrb	r3, [r6, r1]
   25574:	add	r0, r6, r1
   25578:	cmp	r3, #0
   2557c:	beq	256bc <__assert_fail@plt+0x13adc>
   25580:	add	r1, r1, #1
   25584:	mov	r3, #0
   25588:	mov	r2, r1
   2558c:	cmp	r3, r5
   25590:	cmpeq	r2, r4
   25594:	bcc	25570 <__assert_fail@plt+0x13990>
   25598:	add	r1, r6, r1
   2559c:	add	r0, r4, #1
   255a0:	ldrb	r3, [r1, #-1]
   255a4:	cmp	r3, #0
   255a8:	addne	r7, r7, #1
   255ac:	add	fp, r7, #1
   255b0:	lsl	fp, fp, #2
   255b4:	add	r0, r0, fp
   255b8:	bl	11910 <malloc@plt>
   255bc:	cmp	r0, #0
   255c0:	mov	r8, r0
   255c4:	str	r0, [sl]
   255c8:	beq	256dc <__assert_fail@plt+0x13afc>
   255cc:	add	ip, r0, fp
   255d0:	mov	r1, r6
   255d4:	mov	r2, r4
   255d8:	mov	r0, ip
   255dc:	bl	117e4 <memcpy@plt>
   255e0:	cmp	r7, #1
   255e4:	mov	r1, #0
   255e8:	add	r3, r0, r4
   255ec:	mov	ip, r0
   255f0:	strb	r1, [r3]
   255f4:	str	r1, [r0, #-4]
   255f8:	str	r0, [r8]
   255fc:	movhi	r0, #1
   25600:	bls	2568c <__assert_fail@plt+0x13aac>
   25604:	ldrb	r3, [ip, r1]
   25608:	add	fp, ip, r1
   2560c:	cmp	r3, #0
   25610:	addne	r1, r1, #1
   25614:	bne	25670 <__assert_fail@plt+0x13a90>
   25618:	ldrb	r3, [r6, r1]
   2561c:	add	sl, r6, r1
   25620:	cmp	r3, #0
   25624:	bne	25668 <__assert_fail@plt+0x13a88>
   25628:	mov	r2, r1
   2562c:	mov	r3, #0
   25630:	cmp	r5, r3
   25634:	cmpeq	r4, r2
   25638:	bhi	25654 <__assert_fail@plt+0x13a74>
   2563c:	b	25668 <__assert_fail@plt+0x13a88>
   25640:	mov	r2, r1
   25644:	mov	r3, #0
   25648:	cmp	r3, r5
   2564c:	cmpeq	r2, r4
   25650:	bcs	25664 <__assert_fail@plt+0x13a84>
   25654:	ldrb	r3, [sl, #1]!
   25658:	add	r1, r1, #1
   2565c:	cmp	r3, #0
   25660:	beq	25640 <__assert_fail@plt+0x13a60>
   25664:	add	fp, ip, r1
   25668:	str	fp, [r8, r0, lsl #2]
   2566c:	add	r0, r0, #1
   25670:	cmp	r7, r0
   25674:	bls	2568c <__assert_fail@plt+0x13aac>
   25678:	mov	r2, r1
   2567c:	mov	r3, #0
   25680:	cmp	r3, r5
   25684:	cmpeq	r2, r4
   25688:	bcc	25604 <__assert_fail@plt+0x13a24>
   2568c:	mov	r0, r7
   25690:	b	25698 <__assert_fail@plt+0x13ab8>
   25694:	mov	r0, #0
   25698:	ldr	r2, [sp, #20]
   2569c:	ldr	r3, [r9]
   256a0:	cmp	r2, r3
   256a4:	bne	256ec <__assert_fail@plt+0x13b0c>
   256a8:	add	sp, sp, #28
   256ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256b0:	cmp	r3, r5
   256b4:	cmpeq	r2, r4
   256b8:	bcs	256d4 <__assert_fail@plt+0x13af4>
   256bc:	ldrb	r3, [r0, #1]!
   256c0:	add	r1, r1, #1
   256c4:	cmp	r3, #0
   256c8:	mov	r2, r1
   256cc:	mov	r3, #0
   256d0:	beq	256b0 <__assert_fail@plt+0x13ad0>
   256d4:	add	r7, r7, #1
   256d8:	b	25564 <__assert_fail@plt+0x13984>
   256dc:	bl	119f4 <__errno_location@plt>
   256e0:	ldr	r0, [r0]
   256e4:	rsb	r0, r0, #0
   256e8:	b	25698 <__assert_fail@plt+0x13ab8>
   256ec:	bl	11838 <__stack_chk_fail@plt>
   256f0:	andeq	r9, r1, ip, asr #22
   256f4:	andeq	r0, r0, ip, lsr #3
   256f8:	ldr	ip, [pc, #968]	; 25ac8 <__assert_fail@plt+0x13ee8>
   256fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25700:	add	ip, pc, ip
   25704:	ldr	lr, [pc, #960]	; 25acc <__assert_fail@plt+0x13eec>
   25708:	sub	sp, sp, #84	; 0x54
   2570c:	ldr	r3, [r0, #16]
   25710:	mov	r9, #0
   25714:	str	r1, [sp, #12]
   25718:	add	r2, sp, #60	; 0x3c
   2571c:	str	r0, [sp, #24]
   25720:	tst	r3, #2
   25724:	ldr	lr, [ip, lr]
   25728:	add	r3, sp, #64	; 0x40
   2572c:	ldr	fp, [sp, #12]
   25730:	moveq	sl, #8
   25734:	movne	sl, #4
   25738:	ldr	r1, [pc, #912]	; 25ad0 <__assert_fail@plt+0x13ef0>
   2573c:	ldr	ip, [lr]
   25740:	add	r1, pc, r1
   25744:	str	r9, [fp]
   25748:	str	lr, [sp, #44]	; 0x2c
   2574c:	str	sl, [sp, #28]
   25750:	str	ip, [sp, #76]	; 0x4c
   25754:	bl	24e70 <__assert_fail@plt+0x13290>
   25758:	cmp	r0, #0
   2575c:	blt	259f0 <__assert_fail@plt+0x13e10>
   25760:	ldr	ip, [sp, #60]	; 0x3c
   25764:	cmp	ip, r9
   25768:	str	ip, [sp, #8]
   2576c:	beq	25a64 <__assert_fail@plt+0x13e84>
   25770:	ldrd	r2, [sp, #64]	; 0x40
   25774:	orrs	r0, r2, r3
   25778:	beq	25a0c <__assert_fail@plt+0x13e2c>
   2577c:	mov	r0, #63	; 0x3f
   25780:	mov	r1, #0
   25784:	and	r0, r0, r2
   25788:	and	r1, r1, r3
   2578c:	orrs	sl, r0, r1
   25790:	bne	25a7c <__assert_fail@plt+0x13e9c>
   25794:	ldr	ip, [sp, #24]
   25798:	lsr	fp, r2, #6
   2579c:	orr	fp, fp, r3, lsl #26
   257a0:	ldr	r2, [sp, #8]
   257a4:	cmp	fp, r9
   257a8:	str	fp, [sp, #40]	; 0x28
   257ac:	ldr	r1, [ip]
   257b0:	rsb	fp, r1, r2
   257b4:	ble	25a6c <__assert_fail@plt+0x13e8c>
   257b8:	ldr	sl, [sp, #28]
   257bc:	mov	r3, #0
   257c0:	ldrd	r6, [ip, #8]
   257c4:	add	r0, sl, fp
   257c8:	mov	r2, r0
   257cc:	cmp	r7, r3
   257d0:	cmpeq	r6, r2
   257d4:	bls	25a84 <__assert_fail@plt+0x13ea4>
   257d8:	ldr	ip, [sp, #28]
   257dc:	add	fp, fp, #64	; 0x40
   257e0:	mov	r8, r9
   257e4:	strd	r4, [sp, #16]
   257e8:	add	fp, fp, ip
   257ec:	ldr	ip, [sp, #40]	; 0x28
   257f0:	mov	r4, r9
   257f4:	mov	r9, r1
   257f8:	sub	sl, ip, #1
   257fc:	b	25824 <__assert_fail@plt+0x13c44>
   25800:	mov	r2, fp
   25804:	mov	r3, #0
   25808:	cmp	r3, r7
   2580c:	cmpeq	r2, r6
   25810:	add	r8, r8, #1
   25814:	add	ip, fp, #64	; 0x40
   25818:	bcs	25a84 <__assert_fail@plt+0x13ea4>
   2581c:	mov	r0, fp
   25820:	mov	fp, ip
   25824:	cmp	r7, r3
   25828:	cmpeq	r6, r2
   2582c:	addhi	r0, r9, r0
   25830:	movls	r0, #0
   25834:	ldrb	r3, [r0]
   25838:	cmp	r3, #46	; 0x2e
   2583c:	addeq	r0, r0, #1
   25840:	bl	119a0 <strlen@plt>
   25844:	cmp	r8, sl
   25848:	add	r0, r0, #1
   2584c:	add	r4, r4, r0
   25850:	bne	25800 <__assert_fail@plt+0x13c20>
   25854:	mov	r8, r4
   25858:	ldrd	r4, [sp, #16]
   2585c:	ldr	r3, [sp, #40]	; 0x28
   25860:	lsl	r6, r3, #4
   25864:	add	r0, r8, r6
   25868:	bl	11910 <malloc@plt>
   2586c:	ldr	sl, [sp, #12]
   25870:	cmp	r0, #0
   25874:	str	r0, [sl]
   25878:	beq	259e4 <__assert_fail@plt+0x13e04>
   2587c:	ldr	ip, [sp, #24]
   25880:	add	r8, r0, r6
   25884:	ldr	fp, [sp, #40]	; 0x28
   25888:	ldr	r2, [sp, #8]
   2588c:	ldr	r1, [ip]
   25890:	cmp	fp, #0
   25894:	rsb	r7, r1, r2
   25898:	ble	25a74 <__assert_fail@plt+0x13e94>
   2589c:	ldrd	r2, [ip, #8]
   258a0:	mov	fp, #0
   258a4:	ldr	sl, [sp, #28]
   258a8:	strd	r2, [sp, #16]
   258ac:	adds	r2, sl, r7
   258b0:	adc	r3, fp, #0
   258b4:	strd	sl, [sp, #32]
   258b8:	ldrd	sl, [sp, #16]
   258bc:	cmp	fp, r3
   258c0:	cmpeq	sl, r2
   258c4:	bcc	25aa4 <__assert_fail@plt+0x13ec4>
   258c8:	mov	r6, r0
   258cc:	mov	r9, #0
   258d0:	str	r8, [sp, #8]
   258d4:	str	r9, [sp, #12]
   258d8:	strd	r4, [sp]
   258dc:	ldr	r5, [sp, #24]
   258e0:	add	r0, r1, r7
   258e4:	ldr	r3, [r5, #16]
   258e8:	tst	r3, #16
   258ec:	beq	25a14 <__assert_fail@plt+0x13e34>
   258f0:	ldr	sl, [sp, #28]
   258f4:	mov	r2, #0
   258f8:	mov	r3, #0
   258fc:	add	ip, r0, sl
   25900:	ldrb	sl, [r0], #1
   25904:	lsl	r5, r3, #8
   25908:	orr	r5, r5, r2, lsr #24
   2590c:	lsl	r4, r2, #8
   25910:	cmp	r0, ip
   25914:	mov	fp, #0
   25918:	orr	r2, sl, r4
   2591c:	orr	r3, fp, r5
   25920:	bne	25900 <__assert_fail@plt+0x13d20>
   25924:	strd	r4, [sp]
   25928:	mov	ip, r2
   2592c:	ldr	r4, [sp, #28]
   25930:	mov	lr, r3
   25934:	mov	r3, #0
   25938:	add	sl, r7, r4
   2593c:	ldrd	r4, [sp, #16]
   25940:	mov	r2, sl
   25944:	cmp	r3, r5
   25948:	cmpeq	r2, r4
   2594c:	bcs	25a84 <__assert_fail@plt+0x13ea4>
   25950:	ldrb	r3, [r1, sl]
   25954:	add	sl, r1, sl
   25958:	stm	r6, {ip, lr}
   2595c:	mov	fp, #85	; 0x55
   25960:	cmp	r3, #46	; 0x2e
   25964:	ldr	ip, [sp, #8]
   25968:	addeq	sl, sl, #1
   2596c:	ldr	r5, [sp, #12]
   25970:	str	fp, [r6, #8]
   25974:	add	r7, r7, #64	; 0x40
   25978:	str	ip, [r6, #12]
   2597c:	mov	r0, sl
   25980:	add	r5, r5, #1
   25984:	str	r5, [sp, #12]
   25988:	bl	119a0 <strlen@plt>
   2598c:	mov	r1, sl
   25990:	add	r2, r0, #1
   25994:	ldr	r0, [sp, #8]
   25998:	add	r3, r0, r2
   2599c:	str	r3, [sp, #8]
   259a0:	bl	117e4 <memcpy@plt>
   259a4:	ldr	r4, [sp, #40]	; 0x28
   259a8:	cmp	r4, r5
   259ac:	ble	25a5c <__assert_fail@plt+0x13e7c>
   259b0:	ldr	r1, [sp, #24]
   259b4:	add	r6, r6, #16
   259b8:	ldrd	r2, [sp, #32]
   259bc:	ldrd	r0, [r1, #8]
   259c0:	adds	r2, r2, r7
   259c4:	adc	r3, r3, #0
   259c8:	cmp	r3, r1
   259cc:	cmpeq	r2, r0
   259d0:	strd	r0, [sp, #16]
   259d4:	bhi	25aa4 <__assert_fail@plt+0x13ec4>
   259d8:	ldr	r4, [sp, #24]
   259dc:	ldr	r1, [r4]
   259e0:	b	258dc <__assert_fail@plt+0x13cfc>
   259e4:	bl	119f4 <__errno_location@plt>
   259e8:	ldr	r0, [r0]
   259ec:	rsb	r0, r0, #0
   259f0:	ldr	r5, [sp, #44]	; 0x2c
   259f4:	ldr	r2, [sp, #76]	; 0x4c
   259f8:	ldr	r3, [r5]
   259fc:	cmp	r2, r3
   25a00:	bne	25ac4 <__assert_fail@plt+0x13ee4>
   25a04:	add	sp, sp, #84	; 0x54
   25a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a0c:	mov	r0, r9
   25a10:	b	259f0 <__assert_fail@plt+0x13e10>
   25a14:	ldr	ip, [sp, #28]
   25a18:	mov	r2, #0
   25a1c:	ldr	lr, [sp, #28]
   25a20:	mov	r3, #0
   25a24:	ldrd	r4, [sp]
   25a28:	add	r0, r0, ip
   25a2c:	mov	ip, #1
   25a30:	lsl	r9, r3, #8
   25a34:	add	ip, ip, #1
   25a38:	orr	r9, r9, r2, lsr #24
   25a3c:	lsl	r8, r2, #8
   25a40:	cmp	lr, ip
   25a44:	ldrb	r2, [r0, #-1]!
   25a48:	mov	r3, #0
   25a4c:	orr	r3, r3, r9
   25a50:	orr	r2, r2, r8
   25a54:	bcs	25a30 <__assert_fail@plt+0x13e50>
   25a58:	b	25924 <__assert_fail@plt+0x13d44>
   25a5c:	mov	r0, r4
   25a60:	b	259f0 <__assert_fail@plt+0x13e10>
   25a64:	ldr	r0, [sp, #8]
   25a68:	b	259f0 <__assert_fail@plt+0x13e10>
   25a6c:	mov	r8, r9
   25a70:	b	2585c <__assert_fail@plt+0x13c7c>
   25a74:	ldr	r0, [sp, #40]	; 0x28
   25a78:	b	259f0 <__assert_fail@plt+0x13e10>
   25a7c:	mvn	r0, #21
   25a80:	b	259f0 <__assert_fail@plt+0x13e10>
   25a84:	ldr	r0, [pc, #72]	; 25ad4 <__assert_fail@plt+0x13ef4>
   25a88:	mov	r2, #202	; 0xca
   25a8c:	ldr	r1, [pc, #68]	; 25ad8 <__assert_fail@plt+0x13ef8>
   25a90:	ldr	r3, [pc, #68]	; 25adc <__assert_fail@plt+0x13efc>
   25a94:	add	r0, pc, r0
   25a98:	add	r1, pc, r1
   25a9c:	add	r3, pc, r3
   25aa0:	bl	11be0 <__assert_fail@plt>
   25aa4:	ldr	r0, [pc, #52]	; 25ae0 <__assert_fail@plt+0x13f00>
   25aa8:	mov	r2, #137	; 0x89
   25aac:	ldr	r1, [pc, #48]	; 25ae4 <__assert_fail@plt+0x13f04>
   25ab0:	ldr	r3, [pc, #48]	; 25ae8 <__assert_fail@plt+0x13f08>
   25ab4:	add	r0, pc, r0
   25ab8:	add	r1, pc, r1
   25abc:	add	r3, pc, r3
   25ac0:	bl	11be0 <__assert_fail@plt>
   25ac4:	bl	11838 <__stack_chk_fail@plt>
   25ac8:	strdeq	r9, [r1], -r8
   25acc:	andeq	r0, r0, ip, lsr #3
   25ad0:	andeq	r8, r0, ip
   25ad4:	andeq	r8, r0, r8, lsl #5
   25ad8:	muleq	r0, r8, r2
   25adc:	andeq	r8, r0, r4, ror r2
   25ae0:	andeq	r8, r0, r4, asr #5
   25ae4:	andeq	r8, r0, r8, ror r2
   25ae8:	andeq	r8, r0, r8, lsr r2
   25aec:	ldr	r3, [pc, #1976]	; 262ac <__assert_fail@plt+0x146cc>
   25af0:	ldr	r2, [pc, #1976]	; 262b0 <__assert_fail@plt+0x146d0>
   25af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25af8:	add	r3, pc, r3
   25afc:	sub	sp, sp, #204	; 0xcc
   25b00:	mov	r9, r0
   25b04:	str	r1, [sp, #68]	; 0x44
   25b08:	add	r1, sp, #184	; 0xb8
   25b0c:	ldr	r2, [r3, r2]
   25b10:	ldr	r3, [r2]
   25b14:	str	r2, [sp, #60]	; 0x3c
   25b18:	str	r3, [sp, #196]	; 0xc4
   25b1c:	bl	24504 <__assert_fail@plt+0x12924>
   25b20:	ldrh	r2, [r9, #32]
   25b24:	cmp	r2, #1
   25b28:	str	r2, [sp, #36]	; 0x24
   25b2c:	str	r0, [sp, #64]	; 0x40
   25b30:	bls	26180 <__assert_fail@plt+0x145a0>
   25b34:	ldr	r4, [sp, #36]	; 0x24
   25b38:	mov	r8, #1
   25b3c:	ldrd	r6, [sp, #184]	; 0xb8
   25b40:	sub	r3, r4, #2
   25b44:	uxth	r3, r3
   25b48:	strd	r6, [sp, #40]	; 0x28
   25b4c:	add	r3, r3, r8
   25b50:	str	r3, [sp, #56]	; 0x38
   25b54:	ldr	sl, [sp, #36]	; 0x24
   25b58:	uxth	r7, r8
   25b5c:	str	r7, [sp, #32]
   25b60:	cmp	sl, r7
   25b64:	bls	25c44 <__assert_fail@plt+0x14064>
   25b68:	ldrh	r3, [r9, #34]	; 0x22
   25b6c:	ldrd	r0, [r9, #24]
   25b70:	ldrd	r4, [r9, #8]
   25b74:	mul	r3, r3, r8
   25b78:	strd	r4, [sp]
   25b7c:	adds	r6, r0, r3
   25b80:	adc	r7, r1, r3, asr #31
   25b84:	strd	r6, [sp, #16]
   25b88:	cmp	r7, r5
   25b8c:	cmpeq	r6, r4
   25b90:	bcs	26284 <__assert_fail@plt+0x146a4>
   25b94:	ldr	sl, [r9]
   25b98:	ldr	r7, [sp, #16]
   25b9c:	add	ip, sl, r7
   25ba0:	cmp	ip, #0
   25ba4:	rsb	ip, sl, ip
   25ba8:	mov	r2, ip
   25bac:	asr	r3, ip, #31
   25bb0:	strd	r2, [sp, #8]
   25bb4:	beq	25c44 <__assert_fail@plt+0x14064>
   25bb8:	ldr	r1, [r9, #16]
   25bbc:	ands	r3, r1, #2
   25bc0:	str	r3, [sp, #48]	; 0x30
   25bc4:	ldrd	r2, [sp, #8]
   25bc8:	beq	25c58 <__assert_fail@plt+0x14078>
   25bcc:	adds	r2, r2, #24
   25bd0:	ldrd	r4, [sp]
   25bd4:	adc	r3, r3, #0
   25bd8:	cmp	r5, r3
   25bdc:	cmpeq	r4, r2
   25be0:	bcc	26260 <__assert_fail@plt+0x14680>
   25be4:	ldrd	r4, [sp, #8]
   25be8:	mov	r2, #0
   25bec:	mov	r3, #0
   25bf0:	adds	r4, r4, #20
   25bf4:	adc	r5, r5, #0
   25bf8:	ands	r1, r1, #16
   25bfc:	add	r6, sl, r4
   25c00:	str	r1, [sp, #52]	; 0x34
   25c04:	beq	25f80 <__assert_fail@plt+0x143a0>
   25c08:	mov	r7, #0
   25c0c:	strd	r4, [sp, #24]
   25c10:	ldrb	r4, [r6, r7]
   25c14:	add	r7, r7, #1
   25c18:	lsl	r1, r3, #8
   25c1c:	cmp	r7, #4
   25c20:	orr	r1, r1, r2, lsr #24
   25c24:	lsl	r0, r2, #8
   25c28:	mov	r5, #0
   25c2c:	orr	r2, r4, r0
   25c30:	orr	r3, r5, r1
   25c34:	bne	25c10 <__assert_fail@plt+0x14030>
   25c38:	ldrd	r4, [sp, #24]
   25c3c:	strd	r0, [sp, #72]	; 0x48
   25c40:	b	25fb8 <__assert_fail@plt+0x143d8>
   25c44:	ldr	r5, [sp, #56]	; 0x38
   25c48:	cmp	r8, r5
   25c4c:	beq	26180 <__assert_fail@plt+0x145a0>
   25c50:	add	r8, r8, #1
   25c54:	b	25b54 <__assert_fail@plt+0x13f74>
   25c58:	adds	r2, r2, #40	; 0x28
   25c5c:	ldrd	r4, [sp]
   25c60:	adc	r3, r3, #0
   25c64:	cmp	r5, r3
   25c68:	cmpeq	r4, r2
   25c6c:	bcc	26260 <__assert_fail@plt+0x14680>
   25c70:	ldrd	r4, [sp, #8]
   25c74:	mov	r2, #0
   25c78:	mov	r3, #0
   25c7c:	adds	r4, r4, #32
   25c80:	adc	r5, r5, #0
   25c84:	ands	r1, r1, #16
   25c88:	add	r6, sl, r4
   25c8c:	str	r1, [sp, #52]	; 0x34
   25c90:	beq	25cd0 <__assert_fail@plt+0x140f0>
   25c94:	ldr	r7, [sp, #48]	; 0x30
   25c98:	strd	r4, [sp, #24]
   25c9c:	ldrb	r4, [r6, r7]
   25ca0:	add	r7, r7, #1
   25ca4:	lsl	r1, r3, #8
   25ca8:	cmp	r7, #8
   25cac:	orr	r1, r1, r2, lsr #24
   25cb0:	lsl	r0, r2, #8
   25cb4:	mov	r5, #0
   25cb8:	orr	r2, r4, r0
   25cbc:	orr	r3, r5, r1
   25cc0:	bne	25c9c <__assert_fail@plt+0x140bc>
   25cc4:	ldrd	r4, [sp, #24]
   25cc8:	strd	r0, [sp, #120]	; 0x78
   25ccc:	b	25d08 <__assert_fail@plt+0x14128>
   25cd0:	mov	r7, #7
   25cd4:	strd	r4, [sp, #24]
   25cd8:	ldrb	r4, [r6, r7]
   25cdc:	sub	r7, r7, #1
   25ce0:	lsl	r1, r3, #8
   25ce4:	cmn	r7, #1
   25ce8:	orr	r1, r1, r2, lsr #24
   25cec:	lsl	r0, r2, #8
   25cf0:	mov	r5, #0
   25cf4:	orr	r2, r4, r0
   25cf8:	orr	r3, r5, r1
   25cfc:	bne	25cd8 <__assert_fail@plt+0x140f8>
   25d00:	ldrd	r4, [sp, #24]
   25d04:	strd	r0, [sp, #128]	; 0x80
   25d08:	ldrd	r6, [sp]
   25d0c:	cmp	r5, r7
   25d10:	cmpeq	r4, r6
   25d14:	bhi	26260 <__assert_fail@plt+0x14680>
   25d18:	ldrd	r0, [sp, #8]
   25d1c:	mov	r1, #0
   25d20:	ldr	r7, [sp, #52]	; 0x34
   25d24:	adds	r0, r0, #24
   25d28:	cmp	r7, #0
   25d2c:	add	r6, sl, r0
   25d30:	mov	r0, #0
   25d34:	beq	26144 <__assert_fail@plt+0x14564>
   25d38:	mov	r7, #0
   25d3c:	strd	r2, [sp, #24]
   25d40:	ldrb	r4, [r6, r7]
   25d44:	add	r7, r7, #1
   25d48:	lsl	r3, r1, #8
   25d4c:	cmp	r7, #8
   25d50:	orr	r3, r3, r0, lsr #24
   25d54:	lsl	r2, r0, #8
   25d58:	mov	r5, #0
   25d5c:	orr	r0, r4, r2
   25d60:	orr	r1, r5, r3
   25d64:	bne	25d40 <__assert_fail@plt+0x14160>
   25d68:	strd	r2, [sp, #136]	; 0x88
   25d6c:	ldrd	r2, [sp, #24]
   25d70:	ldrd	r4, [sp, #8]
   25d74:	ldrd	r6, [sp]
   25d78:	adds	r4, r4, #4
   25d7c:	adc	r5, r5, #0
   25d80:	cmp	r7, r5
   25d84:	cmpeq	r6, r4
   25d88:	bcc	26260 <__assert_fail@plt+0x14680>
   25d8c:	ldr	r7, [sp, #52]	; 0x34
   25d90:	mov	r4, #0
   25d94:	mov	r5, #0
   25d98:	add	ip, sl, ip
   25d9c:	cmp	r7, #0
   25da0:	beq	260cc <__assert_fail@plt+0x144ec>
   25da4:	mov	fp, #0
   25da8:	strd	r2, [sp, #24]
   25dac:	ldrb	r6, [ip, fp]
   25db0:	add	fp, fp, #1
   25db4:	lsl	r3, r5, #8
   25db8:	cmp	fp, #4
   25dbc:	orr	r3, r3, r4, lsr #24
   25dc0:	lsl	r2, r4, #8
   25dc4:	mov	r7, #0
   25dc8:	orr	r4, r6, r2
   25dcc:	orr	r5, r7, r3
   25dd0:	bne	25dac <__assert_fail@plt+0x141cc>
   25dd4:	strd	r2, [sp, #152]	; 0x98
   25dd8:	ldrd	r2, [sp, #24]
   25ddc:	mvn	r6, r0
   25de0:	adds	r0, r0, r2
   25de4:	mvn	r7, r1
   25de8:	adc	r1, r1, r3
   25dec:	cmp	r7, r3
   25df0:	cmpeq	r6, r2
   25df4:	bcc	25c44 <__assert_fail@plt+0x14064>
   25df8:	ldrd	r2, [sp]
   25dfc:	cmp	r1, r3
   25e00:	cmpeq	r0, r2
   25e04:	bhi	25c44 <__assert_fail@plt+0x14064>
   25e08:	ldrd	r6, [sp, #40]	; 0x28
   25e0c:	mov	r2, r4
   25e10:	mov	r3, #0
   25e14:	cmp	r3, r7
   25e18:	cmpeq	r2, r6
   25e1c:	bcs	25c44 <__assert_fail@plt+0x14064>
   25e20:	ldr	r3, [sp, #64]	; 0x40
   25e24:	ldr	r0, [sp, #68]	; 0x44
   25e28:	add	r1, r3, r4
   25e2c:	bl	11754 <strcmp@plt>
   25e30:	cmp	r0, #0
   25e34:	bne	25c44 <__assert_fail@plt+0x14064>
   25e38:	ldr	r4, [sp, #32]
   25e3c:	mov	r6, r0
   25e40:	str	sl, [sp, #24]
   25e44:	cmp	r4, #0
   25e48:	beq	26280 <__assert_fail@plt+0x146a0>
   25e4c:	ldr	r7, [sp, #36]	; 0x24
   25e50:	ldr	sl, [sp, #32]
   25e54:	cmp	r7, sl
   25e58:	bls	2628c <__assert_fail@plt+0x146ac>
   25e5c:	ldrd	r2, [sp]
   25e60:	ldrd	r4, [sp, #16]
   25e64:	cmp	r3, r5
   25e68:	cmpeq	r2, r4
   25e6c:	bls	26284 <__assert_fail@plt+0x146a4>
   25e70:	ldrd	r0, [sp, #8]
   25e74:	ldr	r5, [sp, #48]	; 0x30
   25e78:	adds	r0, r0, #8
   25e7c:	ldrd	r2, [sp]
   25e80:	adc	r1, r1, #0
   25e84:	cmp	r5, #0
   25e88:	movne	r5, #0
   25e8c:	moveq	r5, #0
   25e90:	movne	ip, #4
   25e94:	movne	r4, #4
   25e98:	moveq	r4, #8
   25e9c:	moveq	ip, #8
   25ea0:	adds	sl, r4, r0
   25ea4:	adc	fp, r5, r1
   25ea8:	cmp	fp, r3
   25eac:	cmpeq	sl, r2
   25eb0:	bhi	26260 <__assert_fail@plt+0x14680>
   25eb4:	ldr	r3, [sp, #52]	; 0x34
   25eb8:	mov	fp, r0
   25ebc:	ldr	r7, [sp, #24]
   25ec0:	cmp	r3, #0
   25ec4:	str	r3, [sp, #8]
   25ec8:	add	r8, r7, r0
   25ecc:	beq	261a4 <__assert_fail@plt+0x145c4>
   25ed0:	ldr	sl, [sp, #24]
   25ed4:	mov	r2, #0
   25ed8:	mov	r3, #0
   25edc:	mov	r7, #0
   25ee0:	strd	r4, [sp, #16]
   25ee4:	ldrb	r4, [r8, r7]
   25ee8:	add	r7, r7, #1
   25eec:	lsl	r1, r3, #8
   25ef0:	cmp	ip, r7
   25ef4:	orr	r1, r1, r2, lsr #24
   25ef8:	lsl	r0, r2, #8
   25efc:	mov	r5, #0
   25f00:	orr	r2, r4, r0
   25f04:	orr	r3, r5, r1
   25f08:	bhi	25ee4 <__assert_fail@plt+0x14304>
   25f0c:	mvn	r1, #0
   25f10:	and	r3, r3, r1
   25f14:	mvn	r0, #2
   25f18:	and	r2, r2, r0
   25f1c:	mov	r8, r3
   25f20:	ldr	r3, [r9, #4]
   25f24:	ldrd	r4, [sp, #16]
   25f28:	mov	r7, r2
   25f2c:	cmp	r3, #0
   25f30:	str	sl, [sp, #24]
   25f34:	beq	26218 <__assert_fail@plt+0x14638>
   25f38:	ldr	sl, [sp, #8]
   25f3c:	add	fp, r3, fp
   25f40:	cmp	sl, #0
   25f44:	beq	261e8 <__assert_fail@plt+0x14608>
   25f48:	add	fp, fp, r4
   25f4c:	mov	r1, #1
   25f50:	add	r1, r1, #1
   25f54:	mov	r3, #0
   25f58:	lsr	r0, r7, #8
   25f5c:	strb	r7, [fp, #-1]
   25f60:	mov	r2, r1
   25f64:	cmp	r5, r3
   25f68:	cmpeq	r4, r2
   25f6c:	orr	r7, r0, r8, lsl #24
   25f70:	sub	fp, fp, #1
   25f74:	lsr	r8, r8, #8
   25f78:	bcs	25f50 <__assert_fail@plt+0x14370>
   25f7c:	b	26184 <__assert_fail@plt+0x145a4>
   25f80:	mov	r7, #3
   25f84:	strd	r4, [sp, #24]
   25f88:	ldrb	r4, [r6, r7]
   25f8c:	sub	r7, r7, #1
   25f90:	lsl	r1, r3, #8
   25f94:	cmn	r7, #1
   25f98:	orr	r1, r1, r2, lsr #24
   25f9c:	lsl	r0, r2, #8
   25fa0:	mov	r5, #0
   25fa4:	orr	r2, r4, r0
   25fa8:	orr	r3, r5, r1
   25fac:	bne	25f88 <__assert_fail@plt+0x143a8>
   25fb0:	ldrd	r4, [sp, #24]
   25fb4:	strd	r0, [sp, #80]	; 0x50
   25fb8:	ldrd	r6, [sp]
   25fbc:	cmp	r5, r7
   25fc0:	cmpeq	r4, r6
   25fc4:	bhi	26260 <__assert_fail@plt+0x14680>
   25fc8:	ldrd	r0, [sp, #8]
   25fcc:	mov	r1, #0
   25fd0:	ldr	r7, [sp, #52]	; 0x34
   25fd4:	adds	r0, r0, #16
   25fd8:	cmp	r7, #0
   25fdc:	add	r6, sl, r0
   25fe0:	mov	r0, #0
   25fe4:	beq	26108 <__assert_fail@plt+0x14528>
   25fe8:	mov	r7, #0
   25fec:	strd	r2, [sp, #24]
   25ff0:	ldrb	r4, [r6, r7]
   25ff4:	add	r7, r7, #1
   25ff8:	lsl	r3, r1, #8
   25ffc:	cmp	r7, #4
   26000:	orr	r3, r3, r0, lsr #24
   26004:	lsl	r2, r0, #8
   26008:	mov	r5, #0
   2600c:	orr	r0, r4, r2
   26010:	orr	r1, r5, r3
   26014:	bne	25ff0 <__assert_fail@plt+0x14410>
   26018:	strd	r2, [sp, #88]	; 0x58
   2601c:	ldrd	r2, [sp, #24]
   26020:	ldrd	r4, [sp, #8]
   26024:	ldrd	r6, [sp]
   26028:	adds	r4, r4, #4
   2602c:	adc	r5, r5, #0
   26030:	cmp	r7, r5
   26034:	cmpeq	r6, r4
   26038:	bcc	26260 <__assert_fail@plt+0x14680>
   2603c:	ldr	r7, [sp, #52]	; 0x34
   26040:	mov	r4, #0
   26044:	mov	r5, #0
   26048:	add	ip, sl, ip
   2604c:	cmp	r7, #0
   26050:	beq	26090 <__assert_fail@plt+0x144b0>
   26054:	mov	fp, #0
   26058:	strd	r2, [sp, #24]
   2605c:	ldrb	r6, [ip, fp]
   26060:	add	fp, fp, #1
   26064:	lsl	r3, r5, #8
   26068:	cmp	fp, #4
   2606c:	orr	r3, r3, r4, lsr #24
   26070:	lsl	r2, r4, #8
   26074:	mov	r7, #0
   26078:	orr	r4, r6, r2
   2607c:	orr	r5, r7, r3
   26080:	bne	2605c <__assert_fail@plt+0x1447c>
   26084:	strd	r2, [sp, #104]	; 0x68
   26088:	ldrd	r2, [sp, #24]
   2608c:	b	25ddc <__assert_fail@plt+0x141fc>
   26090:	mov	fp, #3
   26094:	strd	r2, [sp, #24]
   26098:	ldrb	r6, [ip, fp]
   2609c:	sub	fp, fp, #1
   260a0:	lsl	r3, r5, #8
   260a4:	cmn	fp, #1
   260a8:	orr	r3, r3, r4, lsr #24
   260ac:	lsl	r2, r4, #8
   260b0:	mov	r7, #0
   260b4:	orr	r4, r6, r2
   260b8:	orr	r5, r7, r3
   260bc:	bne	26098 <__assert_fail@plt+0x144b8>
   260c0:	strd	r2, [sp, #112]	; 0x70
   260c4:	ldrd	r2, [sp, #24]
   260c8:	b	25ddc <__assert_fail@plt+0x141fc>
   260cc:	mov	fp, #3
   260d0:	strd	r2, [sp, #24]
   260d4:	ldrb	r6, [ip, fp]
   260d8:	sub	fp, fp, #1
   260dc:	lsl	r3, r5, #8
   260e0:	cmn	fp, #1
   260e4:	orr	r3, r3, r4, lsr #24
   260e8:	lsl	r2, r4, #8
   260ec:	mov	r7, #0
   260f0:	orr	r4, r6, r2
   260f4:	orr	r5, r7, r3
   260f8:	bne	260d4 <__assert_fail@plt+0x144f4>
   260fc:	strd	r2, [sp, #160]	; 0xa0
   26100:	ldrd	r2, [sp, #24]
   26104:	b	25ddc <__assert_fail@plt+0x141fc>
   26108:	mov	r7, #3
   2610c:	strd	r2, [sp, #24]
   26110:	ldrb	r4, [r6, r7]
   26114:	sub	r7, r7, #1
   26118:	lsl	r3, r1, #8
   2611c:	cmn	r7, #1
   26120:	orr	r3, r3, r0, lsr #24
   26124:	lsl	r2, r0, #8
   26128:	mov	r5, #0
   2612c:	orr	r0, r4, r2
   26130:	orr	r1, r5, r3
   26134:	bne	26110 <__assert_fail@plt+0x14530>
   26138:	strd	r2, [sp, #96]	; 0x60
   2613c:	ldrd	r2, [sp, #24]
   26140:	b	26020 <__assert_fail@plt+0x14440>
   26144:	mov	r7, #7
   26148:	strd	r2, [sp, #24]
   2614c:	ldrb	r4, [r6, r7]
   26150:	sub	r7, r7, #1
   26154:	lsl	r3, r1, #8
   26158:	cmn	r7, #1
   2615c:	orr	r3, r3, r0, lsr #24
   26160:	lsl	r2, r0, #8
   26164:	mov	r5, #0
   26168:	orr	r0, r4, r2
   2616c:	orr	r1, r5, r3
   26170:	bne	2614c <__assert_fail@plt+0x1456c>
   26174:	strd	r2, [sp, #144]	; 0x90
   26178:	ldrd	r2, [sp, #24]
   2617c:	b	25d70 <__assert_fail@plt+0x14190>
   26180:	mvn	r6, #1
   26184:	ldr	sl, [sp, #60]	; 0x3c
   26188:	mov	r0, r6
   2618c:	ldr	r2, [sp, #196]	; 0xc4
   26190:	ldr	r3, [sl]
   26194:	cmp	r2, r3
   26198:	bne	26288 <__assert_fail@plt+0x146a8>
   2619c:	add	sp, sp, #204	; 0xcc
   261a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261a4:	add	r0, r8, ip
   261a8:	mov	r1, #1
   261ac:	mov	r2, #0
   261b0:	mov	r3, #0
   261b4:	mov	sl, r7
   261b8:	strd	r4, [sp, #16]
   261bc:	lsl	r5, r3, #8
   261c0:	add	r1, r1, #1
   261c4:	orr	r5, r5, r2, lsr #24
   261c8:	lsl	r4, r2, #8
   261cc:	cmp	ip, r1
   261d0:	ldrb	r2, [r0, #-1]!
   261d4:	mov	r3, #0
   261d8:	orr	r3, r3, r5
   261dc:	orr	r2, r2, r4
   261e0:	bcs	261bc <__assert_fail@plt+0x145dc>
   261e4:	b	25f0c <__assert_fail@plt+0x1432c>
   261e8:	ldr	sl, [sp, #8]
   261ec:	strb	r7, [fp, sl]
   261f0:	add	sl, sl, #1
   261f4:	mov	r3, #0
   261f8:	lsr	r7, r7, #8
   261fc:	mov	r2, sl
   26200:	cmp	r5, r3
   26204:	cmpeq	r4, r2
   26208:	orr	r7, r7, r8, lsl #24
   2620c:	lsr	r8, r8, #8
   26210:	bhi	261ec <__assert_fail@plt+0x1460c>
   26214:	b	26184 <__assert_fail@plt+0x145a4>
   26218:	ldr	r0, [sp]
   2621c:	bl	11910 <malloc@plt>
   26220:	cmp	r0, #0
   26224:	str	r0, [r9, #4]
   26228:	beq	26250 <__assert_fail@plt+0x14670>
   2622c:	ldr	r1, [sp, #24]
   26230:	ldr	r2, [sp]
   26234:	bl	117e4 <memcpy@plt>
   26238:	ldr	r3, [r9, #4]
   2623c:	ldr	sl, [r9, #16]
   26240:	str	r3, [r9]
   26244:	and	sl, sl, #16
   26248:	str	sl, [sp, #8]
   2624c:	b	25f38 <__assert_fail@plt+0x14358>
   26250:	bl	119f4 <__errno_location@plt>
   26254:	ldr	r6, [r0]
   26258:	rsb	r6, r6, #0
   2625c:	b	26184 <__assert_fail@plt+0x145a4>
   26260:	ldr	r0, [pc, #76]	; 262b4 <__assert_fail@plt+0x146d4>
   26264:	mov	r2, #137	; 0x89
   26268:	ldr	r1, [pc, #72]	; 262b8 <__assert_fail@plt+0x146d8>
   2626c:	ldr	r3, [pc, #72]	; 262bc <__assert_fail@plt+0x146dc>
   26270:	add	r0, pc, r0
   26274:	add	r1, pc, r1
   26278:	add	r3, pc, r3
   2627c:	bl	11be0 <__assert_fail@plt>
   26280:	bl	11bec <__assert_fail@plt+0xc>
   26284:	bl	244d4 <__assert_fail@plt+0x128f4>
   26288:	bl	11838 <__stack_chk_fail@plt>
   2628c:	ldr	r0, [pc, #44]	; 262c0 <__assert_fail@plt+0x146e0>
   26290:	mov	r2, #214	; 0xd6
   26294:	ldr	r1, [pc, #40]	; 262c4 <__assert_fail@plt+0x146e4>
   26298:	ldr	r3, [pc, #40]	; 262c8 <__assert_fail@plt+0x146e8>
   2629c:	add	r0, pc, r0
   262a0:	add	r1, pc, r1
   262a4:	add	r3, pc, r3
   262a8:	bl	11be0 <__assert_fail@plt>
   262ac:	andeq	r9, r1, r0, lsl #10
   262b0:	andeq	r0, r0, ip, lsr #3
   262b4:	andeq	r7, r0, r8, lsl #22
   262b8:			; <UNDEFINED> instruction: 0x00007abc
   262bc:	andeq	r7, r0, ip, ror sl
   262c0:	strdeq	r7, [r0], -r8
   262c4:	muleq	r0, r0, sl
   262c8:	andeq	r7, r0, r0, asr #22
   262cc:	ldr	ip, [pc, #496]	; 264c4 <__assert_fail@plt+0x148e4>
   262d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262d4:	add	ip, pc, ip
   262d8:	ldr	lr, [pc, #488]	; 264c8 <__assert_fail@plt+0x148e8>
   262dc:	sub	sp, sp, #44	; 0x2c
   262e0:	ldr	r1, [pc, #484]	; 264cc <__assert_fail@plt+0x148ec>
   262e4:	add	r2, sp, #20
   262e8:	str	r0, [sp, #8]
   262ec:	add	r3, sp, #24
   262f0:	ldr	lr, [ip, lr]
   262f4:	add	r1, pc, r1
   262f8:	ldr	ip, [lr]
   262fc:	str	lr, [sp, #4]
   26300:	str	ip, [sp, #36]	; 0x24
   26304:	bl	24e70 <__assert_fail@plt+0x13290>
   26308:	cmp	r0, #0
   2630c:	movlt	r8, r0
   26310:	blt	26418 <__assert_fail@plt+0x14838>
   26314:	ldr	sl, [sp, #20]
   26318:	cmp	sl, #0
   2631c:	beq	26414 <__assert_fail@plt+0x14834>
   26320:	ldrd	r6, [sp, #24]
   26324:	orrs	r1, r6, r7
   26328:	beq	26414 <__assert_fail@plt+0x14834>
   2632c:	ldrb	r3, [sl]
   26330:	cmp	r3, #0
   26334:	bne	26378 <__assert_fail@plt+0x14798>
   26338:	cmp	r7, #0
   2633c:	cmpeq	r6, #1
   26340:	bls	26414 <__assert_fail@plt+0x14834>
   26344:	add	r3, sl, #1
   26348:	b	26358 <__assert_fail@plt+0x14778>
   2634c:	cmp	r7, #0
   26350:	cmpeq	r6, #1
   26354:	beq	26414 <__assert_fail@plt+0x14834>
   26358:	subs	r6, r6, #1
   2635c:	mov	sl, r3
   26360:	sbc	r7, r7, #0
   26364:	strd	r6, [sp, #24]
   26368:	ldrb	r2, [sl]
   2636c:	add	r3, r3, #1
   26370:	cmp	r2, #0
   26374:	beq	2634c <__assert_fail@plt+0x1476c>
   26378:	cmp	r7, #0
   2637c:	cmpeq	r6, #1
   26380:	bls	26414 <__assert_fail@plt+0x14834>
   26384:	ldr	r3, [pc, #324]	; 264d0 <__assert_fail@plt+0x148f0>
   26388:	mov	r4, #0
   2638c:	mov	r5, #0
   26390:	add	r3, pc, r3
   26394:	str	r3, [sp, #12]
   26398:	add	fp, sl, r4
   2639c:	ldrb	r3, [fp]
   263a0:	cmp	r3, #0
   263a4:	beq	263f8 <__assert_fail@plt+0x14818>
   263a8:	adds	r2, r4, #1
   263ac:	adc	r3, r5, #0
   263b0:	cmp	r3, r7
   263b4:	cmpeq	r2, r6
   263b8:	bcs	2640c <__assert_fail@plt+0x1482c>
   263bc:	adds	r8, r4, #9
   263c0:	adc	r9, r5, #0
   263c4:	cmp	r9, r7
   263c8:	cmpeq	r8, r6
   263cc:	bcs	26438 <__assert_fail@plt+0x14858>
   263d0:	mov	r0, fp
   263d4:	ldr	r1, [sp, #12]
   263d8:	mov	r2, #9
   263dc:	bl	11ba4 <strncmp@plt>
   263e0:	subs	r8, r0, #0
   263e4:	beq	26444 <__assert_fail@plt+0x14864>
   263e8:	mov	r0, fp
   263ec:	bl	119a0 <strlen@plt>
   263f0:	adds	r4, r4, r0
   263f4:	adc	r5, r5, #0
   263f8:	adds	r4, r4, #1
   263fc:	adc	r5, r5, #0
   26400:	cmp	r5, r7
   26404:	cmpeq	r4, r6
   26408:	bcc	26398 <__assert_fail@plt+0x147b8>
   2640c:	mvn	r8, #1
   26410:	b	26418 <__assert_fail@plt+0x14838>
   26414:	mov	r8, #0
   26418:	ldr	r1, [sp, #4]
   2641c:	mov	r0, r8
   26420:	ldr	r2, [sp, #36]	; 0x24
   26424:	ldr	r3, [r1]
   26428:	cmp	r2, r3
   2642c:	bne	264c0 <__assert_fail@plt+0x148e0>
   26430:	add	sp, sp, #44	; 0x2c
   26434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26438:	mov	r4, r2
   2643c:	mov	r5, r3
   26440:	b	26398 <__assert_fail@plt+0x147b8>
   26444:	ldr	lr, [sp, #8]
   26448:	ldr	r4, [lr, #4]
   2644c:	ldr	r5, [lr]
   26450:	cmp	r4, #0
   26454:	rsb	r6, r5, fp
   26458:	beq	26478 <__assert_fail@plt+0x14898>
   2645c:	mov	r0, fp
   26460:	bl	119a0 <strlen@plt>
   26464:	mov	r1, #0
   26468:	mov	r2, r0
   2646c:	add	r0, r4, r6
   26470:	bl	11a3c <memset@plt>
   26474:	b	26418 <__assert_fail@plt+0x14838>
   26478:	ldr	r4, [lr, #8]
   2647c:	mov	r0, r4
   26480:	bl	11910 <malloc@plt>
   26484:	ldr	r1, [sp, #8]
   26488:	cmp	r0, #0
   2648c:	str	r0, [r1, #4]
   26490:	beq	264b0 <__assert_fail@plt+0x148d0>
   26494:	mov	r2, r4
   26498:	mov	r1, r5
   2649c:	bl	117e4 <memcpy@plt>
   264a0:	ldr	r2, [sp, #8]
   264a4:	ldr	r4, [r2, #4]
   264a8:	str	r4, [r2]
   264ac:	b	2645c <__assert_fail@plt+0x1487c>
   264b0:	bl	119f4 <__errno_location@plt>
   264b4:	ldr	r8, [r0]
   264b8:	rsb	r8, r8, #0
   264bc:	b	26418 <__assert_fail@plt+0x14838>
   264c0:	bl	11838 <__stack_chk_fail@plt>
   264c4:	andeq	r8, r1, r4, lsr #26
   264c8:	andeq	r0, r0, ip, lsr #3
   264cc:	andeq	r7, r0, r0, lsl #15
   264d0:	andeq	r7, r0, r4, lsr #20
   264d4:	ldr	ip, [pc, #4024]	; 27494 <__assert_fail@plt+0x158b4>
   264d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264dc:	add	ip, pc, ip
   264e0:	ldr	lr, [pc, #4016]	; 27498 <__assert_fail@plt+0x158b8>
   264e4:	sub	sp, sp, #364	; 0x16c
   264e8:	add	r2, sp, #316	; 0x13c
   264ec:	add	r3, sp, #328	; 0x148
   264f0:	str	r1, [sp, #104]	; 0x68
   264f4:	str	r0, [sp, #88]	; 0x58
   264f8:	ldr	lr, [ip, lr]
   264fc:	ldr	r1, [pc, #3992]	; 2749c <__assert_fail@plt+0x158bc>
   26500:	ldr	ip, [lr]
   26504:	add	r1, pc, r1
   26508:	str	lr, [sp, #120]	; 0x78
   2650c:	str	ip, [sp, #356]	; 0x164
   26510:	bl	24e70 <__assert_fail@plt+0x13290>
   26514:	cmp	r0, #0
   26518:	blt	26764 <__assert_fail@plt+0x14b84>
   2651c:	ldr	r1, [pc, #3964]	; 274a0 <__assert_fail@plt+0x158c0>
   26520:	add	r2, sp, #320	; 0x140
   26524:	ldr	r0, [sp, #88]	; 0x58
   26528:	add	r3, sp, #336	; 0x150
   2652c:	add	r1, pc, r1
   26530:	bl	24e70 <__assert_fail@plt+0x13290>
   26534:	cmp	r0, #0
   26538:	blt	26764 <__assert_fail@plt+0x14b84>
   2653c:	ldr	r8, [sp, #88]	; 0x58
   26540:	add	ip, sp, #512	; 0x200
   26544:	ldr	r8, [r8, #16]
   26548:	ands	r9, r8, #2
   2654c:	str	r9, [sp, #52]	; 0x34
   26550:	str	r8, [sp, #112]	; 0x70
   26554:	movne	r9, #0
   26558:	moveq	r9, #0
   2655c:	movne	r8, #16
   26560:	moveq	r8, #24
   26564:	strdne	r8, [sp, #40]	; 0x28
   26568:	movne	r9, #16
   2656c:	strdeq	r8, [sp, #40]	; 0x28
   26570:	moveq	r9, #24
   26574:	str	r9, [sp, #128]	; 0x80
   26578:	ldrd	r8, [ip, #-176]	; 0xffffff50
   2657c:	ldrd	r2, [sp, #40]	; 0x28
   26580:	mov	r0, r8
   26584:	mov	r1, r9
   26588:	bl	28d1c <__assert_fail@plt+0x1713c>
   2658c:	orrs	lr, r2, r3
   26590:	bne	26764 <__assert_fail@plt+0x14b84>
   26594:	ldrd	r2, [sp, #40]	; 0x28
   26598:	mov	r0, r8
   2659c:	mov	r1, r9
   265a0:	bl	28d1c <__assert_fail@plt+0x1713c>
   265a4:	ldr	r3, [sp, #88]	; 0x58
   265a8:	ldr	r8, [sp, #320]	; 0x140
   265ac:	ldr	r9, [sp, #316]	; 0x13c
   265b0:	ldr	r3, [r3]
   265b4:	ldr	ip, [sp, #128]	; 0x80
   265b8:	rsb	r2, r3, r8
   265bc:	str	r8, [sp, #140]	; 0x8c
   265c0:	str	r3, [sp, #64]	; 0x40
   265c4:	add	r2, ip, r2
   265c8:	rsb	r3, r3, r9
   265cc:	str	r9, [sp, #136]	; 0x88
   265d0:	mov	r8, r2
   265d4:	mov	r9, #0
   265d8:	strd	r8, [sp, #16]
   265dc:	mov	r8, r3
   265e0:	asr	r9, r3, #31
   265e4:	strd	r8, [sp, #80]	; 0x50
   265e8:	cmp	r0, #1
   265ec:	ble	26764 <__assert_fail@plt+0x14b84>
   265f0:	ldr	r9, [sp, #88]	; 0x58
   265f4:	sub	r0, r0, #1
   265f8:	ldr	ip, [pc, #3748]	; 274a4 <__assert_fail@plt+0x158c4>
   265fc:	ldr	r3, [sp, #112]	; 0x70
   26600:	ldrd	r8, [r9, #8]
   26604:	add	ip, pc, ip
   26608:	and	r3, r3, #16
   2660c:	str	r0, [sp, #96]	; 0x60
   26610:	str	ip, [sp, #100]	; 0x64
   26614:	strd	r8, [sp, #32]
   26618:	add	r9, sp, #512	; 0x200
   2661c:	str	r3, [sp, #124]	; 0x7c
   26620:	ldrd	r8, [r9, #-184]	; 0xffffff48
   26624:	strd	r8, [sp, #56]	; 0x38
   26628:	mov	r8, #0
   2662c:	str	r8, [sp, #72]	; 0x48
   26630:	str	r8, [sp, #76]	; 0x4c
   26634:	str	r8, [sp, #24]
   26638:	ldrd	r2, [sp, #16]
   2663c:	ldr	ip, [sp, #52]	; 0x34
   26640:	adds	r2, r2, #4
   26644:	ldrd	r0, [sp, #32]
   26648:	adc	r3, r3, #0
   2664c:	cmp	ip, #0
   26650:	beq	26a14 <__assert_fail@plt+0x14e34>
   26654:	cmp	r3, r1
   26658:	cmpeq	r2, r0
   2665c:	bhi	272d4 <__assert_fail@plt+0x156f4>
   26660:	ldr	r3, [sp, #124]	; 0x7c
   26664:	mov	r2, #0
   26668:	ldr	lr, [sp, #16]
   2666c:	cmp	r3, #0
   26670:	ldr	r3, [sp, #64]	; 0x40
   26674:	add	ip, r3, lr
   26678:	mov	r3, #0
   2667c:	beq	26a70 <__assert_fail@plt+0x14e90>
   26680:	mov	lr, #0
   26684:	ldrb	r0, [ip, lr]
   26688:	add	lr, lr, #1
   2668c:	lsl	r7, r3, #8
   26690:	cmp	lr, #4
   26694:	orr	r7, r7, r2, lsr #24
   26698:	lsl	r6, r2, #8
   2669c:	mov	r1, #0
   266a0:	orr	r2, r0, r6
   266a4:	orr	r3, r1, r7
   266a8:	bne	26684 <__assert_fail@plt+0x14aa4>
   266ac:	ldrd	r0, [sp, #56]	; 0x38
   266b0:	mov	r3, #0
   266b4:	cmp	r3, r1
   266b8:	cmpeq	r2, r0
   266bc:	bcs	26764 <__assert_fail@plt+0x14b84>
   266c0:	ldrd	r0, [sp, #80]	; 0x50
   266c4:	adds	r2, r2, r0
   266c8:	adc	r3, r3, r1
   266cc:	ldrd	r0, [sp, #32]
   266d0:	cmp	r3, r1
   266d4:	cmpeq	r2, r0
   266d8:	bcs	27658 <__assert_fail@plt+0x15a78>
   266dc:	ldr	ip, [sp, #64]	; 0x40
   266e0:	ldr	r1, [sp, #100]	; 0x64
   266e4:	add	r3, ip, r2
   266e8:	mov	r2, #6
   266ec:	str	r3, [sp, #12]
   266f0:	mov	r0, r3
   266f4:	bl	11ba4 <strncmp@plt>
   266f8:	ldr	r3, [sp, #12]
   266fc:	cmp	r0, #0
   26700:	bne	26728 <__assert_fail@plt+0x14b48>
   26704:	add	r0, r3, #6
   26708:	ldr	r3, [sp, #72]	; 0x48
   2670c:	add	r3, r3, #1
   26710:	str	r3, [sp, #72]	; 0x48
   26714:	bl	119a0 <strlen@plt>
   26718:	ldr	ip, [sp, #76]	; 0x4c
   2671c:	add	r3, ip, #1
   26720:	add	r3, r3, r0
   26724:	str	r3, [sp, #76]	; 0x4c
   26728:	ldr	r3, [sp, #24]
   2672c:	ldrd	r0, [sp, #16]
   26730:	add	r3, r3, #1
   26734:	str	r3, [sp, #24]
   26738:	ldrd	r2, [sp, #40]	; 0x28
   2673c:	ldr	ip, [sp, #96]	; 0x60
   26740:	adds	r0, r0, r2
   26744:	adc	r1, r1, r3
   26748:	ldr	r3, [sp, #24]
   2674c:	strd	r0, [sp, #16]
   26750:	cmp	r3, ip
   26754:	bne	26638 <__assert_fail@plt+0x14a58>
   26758:	ldr	r3, [sp, #72]	; 0x48
   2675c:	cmp	r3, #0
   26760:	bne	26ad0 <__assert_fail@plt+0x14ef0>
   26764:	ldr	r4, [sp, #104]	; 0x68
   26768:	mov	r3, #0
   2676c:	ldr	r1, [pc, #3380]	; 274a8 <__assert_fail@plt+0x158c8>
   26770:	add	r2, sp, #324	; 0x144
   26774:	ldr	r0, [sp, #88]	; 0x58
   26778:	str	r3, [r4]
   2677c:	add	r1, pc, r1
   26780:	add	r3, sp, #344	; 0x158
   26784:	bl	24e70 <__assert_fail@plt+0x13290>
   26788:	cmp	r0, #0
   2678c:	blt	269f8 <__assert_fail@plt+0x14e18>
   26790:	ldr	r6, [sp, #324]	; 0x144
   26794:	cmp	r6, #0
   26798:	beq	269f4 <__assert_fail@plt+0x14e14>
   2679c:	add	r7, sp, #512	; 0x200
   267a0:	ldrd	r2, [r7, #-168]	; 0xffffff58
   267a4:	orrs	r8, r2, r3
   267a8:	beq	269f4 <__assert_fail@plt+0x14e14>
   267ac:	ldrb	r1, [r6]
   267b0:	cmp	r1, #0
   267b4:	bne	267fc <__assert_fail@plt+0x14c1c>
   267b8:	cmp	r3, #0
   267bc:	cmpeq	r2, #1
   267c0:	bls	269f4 <__assert_fail@plt+0x14e14>
   267c4:	add	r1, r6, #1
   267c8:	b	267d8 <__assert_fail@plt+0x14bf8>
   267cc:	cmp	r3, #0
   267d0:	cmpeq	r2, #1
   267d4:	beq	269f4 <__assert_fail@plt+0x14e14>
   267d8:	add	r9, sp, #512	; 0x200
   267dc:	subs	r2, r2, #1
   267e0:	mov	r6, r1
   267e4:	sbc	r3, r3, #0
   267e8:	strd	r2, [r9, #-168]	; 0xffffff58
   267ec:	add	r1, r1, #1
   267f0:	ldrb	r0, [r6]
   267f4:	cmp	r0, #0
   267f8:	beq	267cc <__assert_fail@plt+0x14bec>
   267fc:	strd	r2, [sp, #16]
   26800:	ldrd	sl, [sp, #16]
   26804:	cmp	fp, #0
   26808:	cmpeq	sl, #1
   2680c:	bls	269f4 <__assert_fail@plt+0x14e14>
   26810:	sub	lr, r6, #1
   26814:	mov	r2, #1
   26818:	mov	r3, #0
   2681c:	mov	r4, #0
   26820:	mov	r5, #0
   26824:	mov	ip, #0
   26828:	mov	r8, sl
   2682c:	mov	r9, fp
   26830:	b	2683c <__assert_fail@plt+0x14c5c>
   26834:	mov	r2, r0
   26838:	mov	r3, r1
   2683c:	ldrb	r7, [lr, #1]!
   26840:	subs	r0, r2, #1
   26844:	sbc	r1, r3, #0
   26848:	cmp	r7, #0
   2684c:	bne	26864 <__assert_fail@plt+0x14c84>
   26850:	cmp	r1, r5
   26854:	cmpeq	r0, r4
   26858:	mov	r4, r2
   2685c:	addne	ip, ip, #1
   26860:	mov	r5, r3
   26864:	adds	r0, r2, #1
   26868:	adc	r1, r3, #0
   2686c:	cmp	r9, r3
   26870:	cmpeq	r8, r2
   26874:	bhi	26834 <__assert_fail@plt+0x14c54>
   26878:	ldr	fp, [sp, #16]
   2687c:	sub	r3, fp, #1
   26880:	add	r7, r6, r3
   26884:	str	fp, [sp, #40]	; 0x28
   26888:	ldrb	r3, [r6, r3]
   2688c:	ldr	r8, [sp, #40]	; 0x28
   26890:	cmp	r3, #0
   26894:	str	r7, [sp, #52]	; 0x34
   26898:	addne	ip, ip, #1
   2689c:	add	r0, r8, #1
   268a0:	lsl	r4, ip, #4
   268a4:	add	r0, r0, r4
   268a8:	bl	11910 <malloc@plt>
   268ac:	ldr	r9, [sp, #104]	; 0x68
   268b0:	cmp	r0, #0
   268b4:	mov	r7, r0
   268b8:	str	r0, [r9]
   268bc:	beq	27404 <__assert_fail@plt+0x15824>
   268c0:	mov	r0, #0
   268c4:	mov	r1, #0
   268c8:	add	ip, r7, r4
   268cc:	mov	r5, #0
   268d0:	mov	r4, #1
   268d4:	mov	r8, #0
   268d8:	str	r0, [sp, #24]
   268dc:	str	r1, [sp, #32]
   268e0:	b	268ec <__assert_fail@plt+0x14d0c>
   268e4:	mov	r4, r2
   268e8:	mov	r5, r3
   268ec:	add	r9, r6, r4
   268f0:	subs	r2, r4, #1
   268f4:	sbc	r3, r5, #0
   268f8:	ldrb	r9, [r9, #-1]
   268fc:	cmp	r9, #0
   26900:	bne	2697c <__assert_fail@plt+0x14d9c>
   26904:	cmp	r3, r1
   26908:	cmpeq	r2, r0
   2690c:	moveq	r0, r4
   26910:	moveq	r1, r5
   26914:	beq	2697c <__assert_fail@plt+0x14d9c>
   26918:	sub	sl, r4, #1
   2691c:	add	r1, r6, r0
   26920:	rsb	sl, r0, sl
   26924:	ldr	r0, [sp, #24]
   26928:	lsl	r3, r8, #4
   2692c:	mov	r2, #4
   26930:	add	fp, r7, r3
   26934:	add	r8, r8, #1
   26938:	str	r0, [r7, r3]
   2693c:	mov	r0, ip
   26940:	ldr	r3, [sp, #32]
   26944:	mov	lr, fp
   26948:	add	fp, fp, r2
   2694c:	mov	r2, sl
   26950:	str	r3, [fp]
   26954:	mov	fp, #71	; 0x47
   26958:	str	ip, [lr, #12]
   2695c:	str	fp, [lr, #8]
   26960:	bl	117e4 <memcpy@plt>
   26964:	add	r3, sl, #1
   26968:	mov	r1, r5
   2696c:	mov	ip, r0
   26970:	add	ip, ip, r3
   26974:	strb	r9, [r0, sl]
   26978:	mov	r0, r4
   2697c:	ldrd	sl, [sp, #16]
   26980:	adds	r2, r4, #1
   26984:	adc	r3, r5, #0
   26988:	cmp	r5, fp
   2698c:	cmpeq	r4, sl
   26990:	bcc	268e4 <__assert_fail@plt+0x14d04>
   26994:	ldr	fp, [sp, #52]	; 0x34
   26998:	ldrb	r3, [fp]
   2699c:	cmp	r3, #0
   269a0:	moveq	r0, r8
   269a4:	beq	269f8 <__assert_fail@plt+0x14e18>
   269a8:	ldr	r3, [sp, #40]	; 0x28
   269ac:	lsl	lr, r8, #4
   269b0:	add	r1, r6, r0
   269b4:	mov	r4, #0
   269b8:	rsb	r9, r0, r3
   269bc:	add	r3, r7, lr
   269c0:	mov	r0, ip
   269c4:	mov	r5, #0
   269c8:	mov	r2, r9
   269cc:	strd	r4, [r7, lr]
   269d0:	mov	r6, #71	; 0x47
   269d4:	str	ip, [r3, #12]
   269d8:	str	r6, [r3, #8]
   269dc:	bl	117e4 <memcpy@plt>
   269e0:	mov	r3, #0
   269e4:	mov	ip, r0
   269e8:	add	r0, r8, #1
   269ec:	strb	r3, [ip, r9]
   269f0:	b	269f8 <__assert_fail@plt+0x14e18>
   269f4:	mov	r0, #0
   269f8:	ldr	r4, [sp, #120]	; 0x78
   269fc:	ldr	r2, [sp, #356]	; 0x164
   26a00:	ldr	r3, [r4]
   26a04:	cmp	r2, r3
   26a08:	bne	2765c <__assert_fail@plt+0x15a7c>
   26a0c:	add	sp, sp, #364	; 0x16c
   26a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a14:	cmp	r3, r1
   26a18:	cmpeq	r2, r0
   26a1c:	bhi	272d4 <__assert_fail@plt+0x156f4>
   26a20:	ldr	r3, [sp, #124]	; 0x7c
   26a24:	mov	r2, #0
   26a28:	ldr	lr, [sp, #16]
   26a2c:	cmp	r3, #0
   26a30:	ldr	r3, [sp, #64]	; 0x40
   26a34:	add	ip, r3, lr
   26a38:	mov	r3, #0
   26a3c:	beq	26aa0 <__assert_fail@plt+0x14ec0>
   26a40:	ldr	lr, [sp, #52]	; 0x34
   26a44:	ldrb	r0, [ip, lr]
   26a48:	add	lr, lr, #1
   26a4c:	lsl	r9, r3, #8
   26a50:	cmp	lr, #4
   26a54:	orr	r9, r9, r2, lsr #24
   26a58:	lsl	r8, r2, #8
   26a5c:	mov	r1, #0
   26a60:	orr	r2, r0, r8
   26a64:	orr	r3, r1, r9
   26a68:	bne	26a44 <__assert_fail@plt+0x14e64>
   26a6c:	b	266ac <__assert_fail@plt+0x14acc>
   26a70:	mov	lr, #3
   26a74:	ldrb	r0, [ip, lr]
   26a78:	sub	lr, lr, #1
   26a7c:	lsl	r5, r3, #8
   26a80:	cmn	lr, #1
   26a84:	orr	r5, r5, r2, lsr #24
   26a88:	lsl	r4, r2, #8
   26a8c:	mov	r1, #0
   26a90:	orr	r2, r0, r4
   26a94:	orr	r3, r1, r5
   26a98:	bne	26a74 <__assert_fail@plt+0x14e94>
   26a9c:	b	266ac <__assert_fail@plt+0x14acc>
   26aa0:	mov	lr, #3
   26aa4:	ldrb	r0, [ip, lr]
   26aa8:	sub	lr, lr, #1
   26aac:	lsl	fp, r3, #8
   26ab0:	cmn	lr, #1
   26ab4:	orr	fp, fp, r2, lsr #24
   26ab8:	lsl	sl, r2, #8
   26abc:	mov	r1, #0
   26ac0:	orr	r2, r0, sl
   26ac4:	orr	r3, r1, fp
   26ac8:	bne	26aa4 <__assert_fail@plt+0x14ec4>
   26acc:	b	266ac <__assert_fail@plt+0x14acc>
   26ad0:	ldr	r4, [sp, #76]	; 0x4c
   26ad4:	lsl	r5, r3, #4
   26ad8:	add	r0, r5, r4
   26adc:	bl	11910 <malloc@plt>
   26ae0:	ldr	r7, [sp, #104]	; 0x68
   26ae4:	cmp	r0, #0
   26ae8:	str	r0, [sp, #56]	; 0x38
   26aec:	str	r0, [r7]
   26af0:	beq	27404 <__assert_fail@plt+0x15824>
   26af4:	ldr	r8, [sp, #88]	; 0x58
   26af8:	ldr	ip, [sp, #140]	; 0x8c
   26afc:	ldr	r4, [sp, #136]	; 0x88
   26b00:	ldr	r3, [r8]
   26b04:	ldr	fp, [sp, #40]	; 0x28
   26b08:	rsb	r2, r3, ip
   26b0c:	ldr	sl, [pc, #2456]	; 274ac <__assert_fail@plt+0x158cc>
   26b10:	rsb	r3, r3, r4
   26b14:	ldr	r7, [sp, #128]	; 0x80
   26b18:	str	fp, [sp, #80]	; 0x50
   26b1c:	add	sl, pc, sl
   26b20:	asr	fp, r3, #31
   26b24:	str	sl, [sp, #124]	; 0x7c
   26b28:	mov	sl, r3
   26b2c:	strd	sl, [sp, #104]	; 0x68
   26b30:	ldrd	sl, [sp, #40]	; 0x28
   26b34:	add	r2, r7, r2
   26b38:	ldr	r9, [sp, #56]	; 0x38
   26b3c:	adds	sl, sl, r2
   26b40:	ldr	r8, [pc, #2408]	; 274b0 <__assert_fail@plt+0x158d0>
   26b44:	add	r5, r9, r5
   26b48:	mov	r9, #0
   26b4c:	adc	fp, fp, r9
   26b50:	strd	sl, [sp, #24]
   26b54:	add	fp, r2, #4
   26b58:	str	fp, [sp, #72]	; 0x48
   26b5c:	ldr	fp, [sp, #112]	; 0x70
   26b60:	add	r8, pc, r8
   26b64:	ldr	ip, [sp, #80]	; 0x50
   26b68:	mov	sl, #0
   26b6c:	ldr	r3, [sp, #80]	; 0x50
   26b70:	ands	r4, fp, #2
   26b74:	str	r8, [sp, #136]	; 0x88
   26b78:	mov	r8, r2
   26b7c:	strd	r8, [sp, #16]
   26b80:	rsb	r3, r3, #6
   26b84:	rsb	ip, ip, #8
   26b88:	str	r3, [sp, #144]	; 0x90
   26b8c:	str	r5, [sp, #52]	; 0x34
   26b90:	str	ip, [sp, #140]	; 0x8c
   26b94:	str	sl, [sp, #76]	; 0x4c
   26b98:	ldrd	r8, [sp, #32]
   26b9c:	ldr	r6, [sp, #88]	; 0x58
   26ba0:	str	r4, [sp, #64]	; 0x40
   26ba4:	ldrd	r2, [sp, #16]
   26ba8:	beq	26e54 <__assert_fail@plt+0x15274>
   26bac:	adds	r2, r2, #4
   26bb0:	adc	r3, r3, #0
   26bb4:	cmp	r9, r3
   26bb8:	cmpeq	r8, r2
   26bbc:	bcc	272d4 <__assert_fail@plt+0x156f4>
   26bc0:	ldr	r7, [r6]
   26bc4:	ands	fp, fp, #16
   26bc8:	str	fp, [sp, #100]	; 0x64
   26bcc:	mov	r2, #0
   26bd0:	ldr	fp, [sp, #16]
   26bd4:	mov	r3, #0
   26bd8:	str	r7, [sp, #32]
   26bdc:	add	ip, r7, fp
   26be0:	beq	27384 <__assert_fail@plt+0x157a4>
   26be4:	mov	lr, #0
   26be8:	ldrb	r4, [ip, lr]
   26bec:	add	lr, lr, #1
   26bf0:	lsl	r1, r3, #8
   26bf4:	cmp	lr, #4
   26bf8:	orr	r1, r1, r2, lsr #24
   26bfc:	lsl	r0, r2, #8
   26c00:	mov	r5, #0
   26c04:	orr	r2, r4, r0
   26c08:	orr	r3, r5, r1
   26c0c:	bne	26be8 <__assert_fail@plt+0x15008>
   26c10:	mov	ip, r2
   26c14:	strd	r0, [sp, #160]	; 0xa0
   26c18:	ldrd	r0, [sp, #16]
   26c1c:	adds	r0, r0, #8
   26c20:	adc	r1, r1, #0
   26c24:	cmp	r9, r1
   26c28:	cmpeq	r8, r0
   26c2c:	bcc	272d4 <__assert_fail@plt+0x156f4>
   26c30:	ldr	r3, [sp, #100]	; 0x64
   26c34:	mov	r5, #0
   26c38:	ldr	r4, [sp, #32]
   26c3c:	ldr	r7, [sp, #72]	; 0x48
   26c40:	cmp	r3, #0
   26c44:	add	r1, r4, r7
   26c48:	mov	r4, #0
   26c4c:	beq	273bc <__assert_fail@plt+0x157dc>
   26c50:	mov	r0, #0
   26c54:	mov	r7, r1
   26c58:	mov	lr, r0
   26c5c:	ldrb	r0, [r7, lr]
   26c60:	add	lr, lr, #1
   26c64:	lsl	r3, r5, #8
   26c68:	cmp	lr, #4
   26c6c:	orr	r3, r3, r4, lsr #24
   26c70:	lsl	r2, r4, #8
   26c74:	mov	r1, #0
   26c78:	orr	r4, r0, r2
   26c7c:	orr	r5, r1, r3
   26c80:	bne	26c5c <__assert_fail@plt+0x1507c>
   26c84:	strd	r2, [sp, #176]	; 0xb0
   26c88:	ldrd	r2, [sp, #16]
   26c8c:	adds	r2, r2, #13
   26c90:	adc	r3, r3, #0
   26c94:	cmp	r3, r9
   26c98:	cmpeq	r2, r8
   26c9c:	bhi	272d4 <__assert_fail@plt+0x156f4>
   26ca0:	ldrd	r2, [sp, #16]
   26ca4:	ldr	fp, [sp, #80]	; 0x50
   26ca8:	adds	r2, r2, #16
   26cac:	ldr	r7, [sp, #24]
   26cb0:	adc	r3, r3, #0
   26cb4:	rsb	r1, fp, #12
   26cb8:	cmp	r3, r9
   26cbc:	cmpeq	r2, r8
   26cc0:	ldr	r3, [sp, #32]
   26cc4:	add	r2, r3, r7
   26cc8:	ldrb	r2, [r2, r1]
   26ccc:	str	r2, [sp, #88]	; 0x58
   26cd0:	bhi	272d4 <__assert_fail@plt+0x156f4>
   26cd4:	ldr	fp, [sp, #100]	; 0x64
   26cd8:	ldr	r7, [sp, #80]	; 0x50
   26cdc:	cmp	fp, #0
   26ce0:	ldr	fp, [sp, #24]
   26ce4:	rsb	r3, r7, #14
   26ce8:	ldr	r7, [sp, #32]
   26cec:	add	r3, r3, fp
   26cf0:	add	r2, r7, r3
   26cf4:	bne	2736c <__assert_fail@plt+0x1578c>
   26cf8:	ldrb	r0, [r2, #1]
   26cfc:	ldrb	r2, [r7, r3]
   26d00:	lsl	r0, r0, #8
   26d04:	orr	r7, r0, r2
   26d08:	ldrd	r2, [sp, #104]	; 0x68
   26d0c:	uxth	r7, r7
   26d10:	adds	r2, r2, ip
   26d14:	adc	r3, r3, #0
   26d18:	cmp	r3, r9
   26d1c:	cmpeq	r2, r8
   26d20:	bcs	27658 <__assert_fail@plt+0x15a78>
   26d24:	ldr	ip, [sp, #32]
   26d28:	ldr	r1, [sp, #124]	; 0x7c
   26d2c:	add	fp, ip, r2
   26d30:	mov	r2, #6
   26d34:	mov	r0, fp
   26d38:	bl	11ba4 <strncmp@plt>
   26d3c:	cmp	r0, #0
   26d40:	bne	26df8 <__assert_fail@plt+0x15218>
   26d44:	ldr	r3, [sp, #76]	; 0x4c
   26d48:	movw	r1, #65521	; 0xfff1
   26d4c:	ldr	lr, [sp, #88]	; 0x58
   26d50:	cmp	r7, r1
   26d54:	cmpne	r7, #0
   26d58:	add	fp, fp, #6
   26d5c:	lsl	ip, r3, #4
   26d60:	ldr	r3, [sp, #56]	; 0x38
   26d64:	lsr	lr, lr, #4
   26d68:	movne	r1, #0
   26d6c:	moveq	r1, #1
   26d70:	str	lr, [sp, #88]	; 0x58
   26d74:	moveq	r1, r5
   26d78:	add	lr, r3, ip
   26d7c:	moveq	r3, r4
   26d80:	bne	26fb4 <__assert_fail@plt+0x153d4>
   26d84:	ldr	r0, [sp, #88]	; 0x58
   26d88:	ldr	r9, [sp, #56]	; 0x38
   26d8c:	cmp	r0, #2
   26d90:	ldr	r7, [sp, #52]	; 0x34
   26d94:	add	r2, r9, ip
   26d98:	ldrls	r4, [sp, #136]	; 0x88
   26d9c:	str	r3, [r9, ip]
   26da0:	mov	r3, #4
   26da4:	add	r2, r2, r3
   26da8:	movhi	r3, #0
   26dac:	ldrbls	r3, [r4, r0]
   26db0:	mov	r0, fp
   26db4:	str	r1, [r2]
   26db8:	str	r7, [lr, #12]
   26dbc:	str	r3, [lr, #8]
   26dc0:	bl	119a0 <strlen@plt>
   26dc4:	mov	r1, fp
   26dc8:	mov	r4, r0
   26dcc:	ldr	r0, [sp, #52]	; 0x34
   26dd0:	mov	r2, r4
   26dd4:	bl	117e4 <memcpy@plt>
   26dd8:	ldr	r8, [sp, #76]	; 0x4c
   26ddc:	add	r3, r4, #1
   26de0:	mov	r2, #0
   26de4:	add	r8, r8, #1
   26de8:	strb	r2, [r7, r4]
   26dec:	str	r8, [sp, #76]	; 0x4c
   26df0:	add	r7, r7, r3
   26df4:	str	r7, [sp, #52]	; 0x34
   26df8:	ldrd	r0, [sp, #40]	; 0x28
   26dfc:	add	sl, sl, #1
   26e00:	ldrd	r8, [sp, #16]
   26e04:	ldr	fp, [sp, #72]	; 0x48
   26e08:	adds	r8, r8, r0
   26e0c:	ldr	ip, [sp, #80]	; 0x50
   26e10:	adc	r9, r9, r1
   26e14:	strd	r8, [sp, #16]
   26e18:	ldrd	r8, [sp, #24]
   26e1c:	add	fp, fp, ip
   26e20:	str	fp, [sp, #72]	; 0x48
   26e24:	adds	r8, r8, r0
   26e28:	adc	r9, r9, r1
   26e2c:	strd	r8, [sp, #24]
   26e30:	ldr	r9, [sp, #96]	; 0x60
   26e34:	cmp	sl, r9
   26e38:	beq	27414 <__assert_fail@plt+0x15834>
   26e3c:	ldr	fp, [r6, #16]
   26e40:	ldrd	r8, [r6, #8]
   26e44:	ands	r4, fp, #2
   26e48:	ldrd	r2, [sp, #16]
   26e4c:	str	r4, [sp, #64]	; 0x40
   26e50:	bne	26bac <__assert_fail@plt+0x14fcc>
   26e54:	adds	r2, r2, #4
   26e58:	adc	r3, r3, #0
   26e5c:	cmp	r3, r9
   26e60:	cmpeq	r2, r8
   26e64:	bhi	272d4 <__assert_fail@plt+0x156f4>
   26e68:	ldr	ip, [r6]
   26e6c:	ands	fp, fp, #16
   26e70:	ldr	lr, [sp, #16]
   26e74:	mov	r2, #0
   26e78:	mov	r3, #0
   26e7c:	str	fp, [sp, #100]	; 0x64
   26e80:	str	ip, [sp, #32]
   26e84:	add	ip, ip, lr
   26e88:	beq	27334 <__assert_fail@plt+0x15754>
   26e8c:	ldr	lr, [sp, #64]	; 0x40
   26e90:	ldrb	r4, [ip, lr]
   26e94:	add	lr, lr, #1
   26e98:	lsl	r1, r3, #8
   26e9c:	cmp	lr, #4
   26ea0:	orr	r1, r1, r2, lsr #24
   26ea4:	lsl	r0, r2, #8
   26ea8:	mov	r5, #0
   26eac:	orr	r2, r4, r0
   26eb0:	orr	r3, r5, r1
   26eb4:	bne	26e90 <__assert_fail@plt+0x152b0>
   26eb8:	mov	ip, r2
   26ebc:	strd	r0, [sp, #192]	; 0xc0
   26ec0:	ldrd	r0, [sp, #16]
   26ec4:	adds	r0, r0, #16
   26ec8:	adc	r1, r1, #0
   26ecc:	cmp	r9, r1
   26ed0:	cmpeq	r8, r0
   26ed4:	bcc	272d4 <__assert_fail@plt+0x156f4>
   26ed8:	ldrd	r0, [sp, #16]
   26edc:	mov	r5, #0
   26ee0:	ldr	r3, [sp, #100]	; 0x64
   26ee4:	adds	r0, r0, #8
   26ee8:	ldr	r4, [sp, #140]	; 0x8c
   26eec:	ldr	r7, [sp, #24]
   26ef0:	adc	r1, r1, #0
   26ef4:	ldr	fp, [sp, #32]
   26ef8:	cmp	r3, #0
   26efc:	strd	r0, [sp, #88]	; 0x58
   26f00:	add	r0, r4, r7
   26f04:	add	r0, fp, r0
   26f08:	mov	r4, #0
   26f0c:	beq	272f4 <__assert_fail@plt+0x15714>
   26f10:	mov	fp, r7
   26f14:	mov	lr, #0
   26f18:	mov	r7, r0
   26f1c:	ldrb	r0, [r7, lr]
   26f20:	add	lr, lr, #1
   26f24:	lsl	r3, r5, #8
   26f28:	cmp	lr, #8
   26f2c:	orr	r3, r3, r4, lsr #24
   26f30:	lsl	r2, r4, #8
   26f34:	mov	r1, #0
   26f38:	orr	r4, r0, r2
   26f3c:	orr	r5, r1, r3
   26f40:	bne	26f1c <__assert_fail@plt+0x1533c>
   26f44:	mov	r1, fp
   26f48:	strd	r2, [sp, #208]	; 0xd0
   26f4c:	ldrd	r2, [sp, #16]
   26f50:	adds	r2, r2, #5
   26f54:	adc	r3, r3, #0
   26f58:	cmp	r3, r9
   26f5c:	cmpeq	r2, r8
   26f60:	bhi	272d4 <__assert_fail@plt+0x156f4>
   26f64:	ldrd	r2, [sp, #88]	; 0x58
   26f68:	ldr	r7, [sp, #32]
   26f6c:	cmp	r3, r9
   26f70:	cmpeq	r2, r8
   26f74:	ldr	r3, [sp, #72]	; 0x48
   26f78:	ldrb	r3, [r7, r3]
   26f7c:	str	r3, [sp, #88]	; 0x58
   26f80:	bhi	272d4 <__assert_fail@plt+0x156f4>
   26f84:	ldr	fp, [sp, #100]	; 0x64
   26f88:	ldr	r7, [sp, #144]	; 0x90
   26f8c:	cmp	fp, #0
   26f90:	ldr	fp, [sp, #32]
   26f94:	add	r3, r1, r7
   26f98:	add	r2, fp, r3
   26f9c:	bne	273f8 <__assert_fail@plt+0x15818>
   26fa0:	ldrb	r0, [r2, #1]
   26fa4:	ldrb	r2, [fp, r3]
   26fa8:	lsl	r0, r0, #8
   26fac:	orr	r7, r0, r2
   26fb0:	b	26d08 <__assert_fail@plt+0x15128>
   26fb4:	ldrh	r3, [r6, #32]
   26fb8:	cmp	r3, r7
   26fbc:	bls	27660 <__assert_fail@plt+0x15a80>
   26fc0:	ldrh	r0, [r6, #34]	; 0x22
   26fc4:	ldrd	r2, [r6, #24]
   26fc8:	mul	r7, r0, r7
   26fcc:	adds	r2, r2, r7
   26fd0:	adc	r3, r3, r7, asr #31
   26fd4:	strd	r2, [sp, #112]	; 0x70
   26fd8:	cmp	r3, r9
   26fdc:	cmpeq	r2, r8
   26fe0:	bcs	27658 <__assert_fail@plt+0x15a78>
   26fe4:	ldr	r3, [sp, #32]
   26fe8:	add	r7, r3, r2
   26fec:	ldr	r2, [sp, #112]	; 0x70
   26ff0:	cmp	r7, #0
   26ff4:	asr	r3, r2, #31
   26ff8:	strd	r2, [sp, #128]	; 0x80
   26ffc:	beq	27198 <__assert_fail@plt+0x155b8>
   27000:	ldr	r3, [sp, #64]	; 0x40
   27004:	cmp	r3, #0
   27008:	ldrd	r2, [sp, #128]	; 0x80
   2700c:	beq	271a4 <__assert_fail@plt+0x155c4>
   27010:	adds	r2, r2, #24
   27014:	adc	r3, r3, #0
   27018:	cmp	r3, r9
   2701c:	cmpeq	r2, r8
   27020:	bhi	272d4 <__assert_fail@plt+0x156f4>
   27024:	ldrd	r2, [sp, #128]	; 0x80
   27028:	ldr	r7, [sp, #32]
   2702c:	adds	r2, r2, #20
   27030:	adc	r3, r3, #0
   27034:	strd	r2, [sp, #64]	; 0x40
   27038:	ldr	r3, [sp, #100]	; 0x64
   2703c:	add	r0, r7, r2
   27040:	mov	r2, #0
   27044:	cmp	r3, #0
   27048:	mov	r3, #0
   2704c:	strd	r2, [sp, #112]	; 0x70
   27050:	beq	2757c <__assert_fail@plt+0x1599c>
   27054:	strd	r4, [sp, #152]	; 0x98
   27058:	mov	r4, #0
   2705c:	mov	r5, #0
   27060:	strd	r8, [sp, #224]	; 0xe0
   27064:	ldrb	r8, [r0, r1]
   27068:	add	r1, r1, #1
   2706c:	lsl	r3, r5, #8
   27070:	cmp	r1, #4
   27074:	orr	r3, r3, r4, lsr #24
   27078:	lsl	r2, r4, #8
   2707c:	mov	r9, #0
   27080:	orr	r4, r8, r2
   27084:	orr	r5, r9, r3
   27088:	bne	27064 <__assert_fail@plt+0x15484>
   2708c:	strd	r4, [sp, #112]	; 0x70
   27090:	ldrd	r8, [sp, #224]	; 0xe0
   27094:	ldrd	r4, [sp, #152]	; 0x98
   27098:	strd	r2, [sp, #232]	; 0xe8
   2709c:	ldrd	r0, [sp, #64]	; 0x40
   270a0:	cmp	r1, r9
   270a4:	cmpeq	r0, r8
   270a8:	bhi	272d4 <__assert_fail@plt+0x156f4>
   270ac:	ldrd	r2, [sp, #128]	; 0x80
   270b0:	ldr	r7, [sp, #100]	; 0x64
   270b4:	adds	r2, r2, #16
   270b8:	ldr	r0, [sp, #32]
   270bc:	cmp	r7, #0
   270c0:	add	r0, r0, r2
   270c4:	str	r0, [sp, #64]	; 0x40
   270c8:	beq	27520 <__assert_fail@plt+0x15940>
   270cc:	strd	r8, [sp, #224]	; 0xe0
   270d0:	mov	r7, #0
   270d4:	ldr	r8, [sp, #64]	; 0x40
   270d8:	mov	r2, #0
   270dc:	mov	r3, #0
   270e0:	strd	r4, [sp, #152]	; 0x98
   270e4:	strd	r2, [sp]
   270e8:	ldrb	r4, [r8, r7]
   270ec:	add	r7, r7, #1
   270f0:	lsl	r1, r3, #8
   270f4:	cmp	r7, #4
   270f8:	orr	r1, r1, r2, lsr #24
   270fc:	lsl	r0, r2, #8
   27100:	mov	r5, #0
   27104:	orr	r2, r4, r0
   27108:	orr	r3, r5, r1
   2710c:	bne	270e8 <__assert_fail@plt+0x15508>
   27110:	ldrd	r4, [sp, #152]	; 0x98
   27114:	strd	r0, [sp, #248]	; 0xf8
   27118:	ldrd	r0, [sp, #128]	; 0x80
   2711c:	ldrd	r8, [sp, #224]	; 0xe0
   27120:	adds	r0, r0, #4
   27124:	strd	r2, [sp]
   27128:	adc	r1, r1, #0
   2712c:	cmp	r1, r9
   27130:	cmpeq	r0, r8
   27134:	bhi	272d4 <__assert_fail@plt+0x156f4>
   27138:	ldrd	r0, [sp]
   2713c:	ldrd	r2, [sp, #112]	; 0x70
   27140:	mvn	r0, r0
   27144:	mvn	r1, r1
   27148:	strd	r0, [sp, #128]	; 0x80
   2714c:	ldrd	r0, [sp]
   27150:	adds	r2, r2, r0
   27154:	adc	r3, r3, r1
   27158:	ldrd	r0, [sp, #112]	; 0x70
   2715c:	strd	r2, [sp, #64]	; 0x40
   27160:	ldrd	r2, [sp, #128]	; 0x80
   27164:	cmp	r3, r1
   27168:	cmpeq	r2, r0
   2716c:	bcc	27198 <__assert_fail@plt+0x155b8>
   27170:	ldrd	r2, [sp, #64]	; 0x40
   27174:	cmp	r3, r9
   27178:	cmpeq	r2, r8
   2717c:	bhi	27198 <__assert_fail@plt+0x155b8>
   27180:	ldrd	r0, [sp, #112]	; 0x70
   27184:	subs	r0, r0, #4
   27188:	sbc	r1, r1, #0
   2718c:	cmp	r5, r1
   27190:	cmpeq	r4, r0
   27194:	bls	2741c <__assert_fail@plt+0x1583c>
   27198:	mvn	r3, #0
   2719c:	mov	r1, r3
   271a0:	b	26d84 <__assert_fail@plt+0x151a4>
   271a4:	adds	r2, r2, #40	; 0x28
   271a8:	adc	r3, r3, #0
   271ac:	cmp	r3, r9
   271b0:	cmpeq	r2, r8
   271b4:	bhi	272d4 <__assert_fail@plt+0x156f4>
   271b8:	ldrd	r0, [sp, #128]	; 0x80
   271bc:	mov	r2, #0
   271c0:	ldr	r3, [sp, #100]	; 0x64
   271c4:	adds	r0, r0, #32
   271c8:	ldr	r7, [sp, #32]
   271cc:	adc	r1, r1, #0
   271d0:	cmp	r3, #0
   271d4:	strd	r0, [sp, #152]	; 0x98
   271d8:	mov	r3, #0
   271dc:	add	r1, r7, r0
   271e0:	strd	r2, [sp, #112]	; 0x70
   271e4:	beq	274cc <__assert_fail@plt+0x158ec>
   271e8:	ldr	r0, [sp, #64]	; 0x40
   271ec:	strd	r4, [sp, #64]	; 0x40
   271f0:	mov	r4, r2
   271f4:	mov	r5, r3
   271f8:	strd	r8, [sp, #224]	; 0xe0
   271fc:	ldrb	r8, [r1, r0]
   27200:	add	r0, r0, #1
   27204:	lsl	r3, r5, #8
   27208:	cmp	r0, #8
   2720c:	orr	r3, r3, r4, lsr #24
   27210:	lsl	r2, r4, #8
   27214:	mov	r9, #0
   27218:	orr	r4, r8, r2
   2721c:	orr	r5, r9, r3
   27220:	bne	271fc <__assert_fail@plt+0x1561c>
   27224:	add	r8, sp, #512	; 0x200
   27228:	strd	r4, [sp, #112]	; 0x70
   2722c:	ldrd	r4, [sp, #64]	; 0x40
   27230:	strd	r2, [r8, #-248]	; 0xffffff08
   27234:	ldrd	r8, [sp, #224]	; 0xe0
   27238:	ldrd	r0, [sp, #152]	; 0x98
   2723c:	cmp	r1, r9
   27240:	cmpeq	r0, r8
   27244:	bhi	272d4 <__assert_fail@plt+0x156f4>
   27248:	ldrd	r2, [sp, #128]	; 0x80
   2724c:	mov	r3, #0
   27250:	ldr	r7, [sp, #100]	; 0x64
   27254:	adds	r2, r2, #24
   27258:	cmp	r7, #0
   2725c:	ldr	r7, [sp, #32]
   27260:	add	r1, r7, r2
   27264:	mov	r2, #0
   27268:	strd	r2, [sp]
   2726c:	beq	275cc <__assert_fail@plt+0x159ec>
   27270:	strd	r8, [sp, #152]	; 0x98
   27274:	mov	r7, #0
   27278:	mov	r8, r1
   2727c:	strd	r4, [sp, #64]	; 0x40
   27280:	ldrb	r4, [r8, r7]
   27284:	add	r7, r7, #1
   27288:	lsl	r1, r3, #8
   2728c:	cmp	r7, #8
   27290:	orr	r1, r1, r2, lsr #24
   27294:	lsl	r0, r2, #8
   27298:	mov	r5, #0
   2729c:	orr	r2, r4, r0
   272a0:	orr	r3, r5, r1
   272a4:	bne	27280 <__assert_fail@plt+0x156a0>
   272a8:	ldrd	r4, [sp, #64]	; 0x40
   272ac:	add	r7, sp, #512	; 0x200
   272b0:	ldrd	r8, [sp, #152]	; 0x98
   272b4:	strd	r2, [sp]
   272b8:	strd	r0, [r7, #-232]	; 0xffffff18
   272bc:	ldrd	r0, [sp, #128]	; 0x80
   272c0:	adds	r0, r0, #4
   272c4:	adc	r1, r1, #0
   272c8:	cmp	r9, r1
   272cc:	cmpeq	r8, r0
   272d0:	bcs	27138 <__assert_fail@plt+0x15558>
   272d4:	ldr	r0, [pc, #472]	; 274b4 <__assert_fail@plt+0x158d4>
   272d8:	mov	r2, #137	; 0x89
   272dc:	ldr	r1, [pc, #468]	; 274b8 <__assert_fail@plt+0x158d8>
   272e0:	ldr	r3, [pc, #468]	; 274bc <__assert_fail@plt+0x158dc>
   272e4:	add	r0, pc, r0
   272e8:	add	r1, pc, r1
   272ec:	add	r3, pc, r3
   272f0:	bl	11be0 <__assert_fail@plt>
   272f4:	mov	fp, r7
   272f8:	mov	lr, #7
   272fc:	mov	r7, r0
   27300:	ldrb	r0, [r7, lr]
   27304:	sub	lr, lr, #1
   27308:	lsl	r3, r5, #8
   2730c:	cmn	lr, #1
   27310:	orr	r3, r3, r4, lsr #24
   27314:	lsl	r2, r4, #8
   27318:	mov	r1, #0
   2731c:	orr	r4, r0, r2
   27320:	orr	r5, r1, r3
   27324:	bne	27300 <__assert_fail@plt+0x15720>
   27328:	mov	r1, fp
   2732c:	strd	r2, [sp, #216]	; 0xd8
   27330:	b	26f4c <__assert_fail@plt+0x1536c>
   27334:	mov	lr, #3
   27338:	ldrb	r4, [ip, lr]
   2733c:	sub	lr, lr, #1
   27340:	lsl	r1, r3, #8
   27344:	cmn	lr, #1
   27348:	orr	r1, r1, r2, lsr #24
   2734c:	lsl	r0, r2, #8
   27350:	mov	r5, #0
   27354:	orr	r2, r4, r0
   27358:	orr	r3, r5, r1
   2735c:	bne	27338 <__assert_fail@plt+0x15758>
   27360:	strd	r0, [sp, #200]	; 0xc8
   27364:	mov	ip, r2
   27368:	b	26ec0 <__assert_fail@plt+0x152e0>
   2736c:	ldr	fp, [sp, #32]
   27370:	ldrb	r0, [fp, r3]
   27374:	ldrb	r2, [r2, #1]
   27378:	lsl	r0, r0, #8
   2737c:	orr	r7, r0, r2
   27380:	b	26d08 <__assert_fail@plt+0x15128>
   27384:	mov	lr, #3
   27388:	ldrb	r4, [ip, lr]
   2738c:	sub	lr, lr, #1
   27390:	lsl	r1, r3, #8
   27394:	cmn	lr, #1
   27398:	orr	r1, r1, r2, lsr #24
   2739c:	lsl	r0, r2, #8
   273a0:	mov	r5, #0
   273a4:	orr	r2, r4, r0
   273a8:	orr	r3, r5, r1
   273ac:	bne	27388 <__assert_fail@plt+0x157a8>
   273b0:	strd	r0, [sp, #168]	; 0xa8
   273b4:	mov	ip, r2
   273b8:	b	26c18 <__assert_fail@plt+0x15038>
   273bc:	mov	r0, #3
   273c0:	mov	r7, r1
   273c4:	mov	lr, r0
   273c8:	ldrb	r0, [r7, lr]
   273cc:	sub	lr, lr, #1
   273d0:	lsl	r3, r5, #8
   273d4:	cmn	lr, #1
   273d8:	orr	r3, r3, r4, lsr #24
   273dc:	lsl	r2, r4, #8
   273e0:	mov	r1, #0
   273e4:	orr	r4, r0, r2
   273e8:	orr	r5, r1, r3
   273ec:	bne	273c8 <__assert_fail@plt+0x157e8>
   273f0:	strd	r2, [sp, #184]	; 0xb8
   273f4:	b	26c88 <__assert_fail@plt+0x150a8>
   273f8:	ldr	r7, [sp, #32]
   273fc:	ldrb	r0, [r7, r3]
   27400:	b	27374 <__assert_fail@plt+0x15794>
   27404:	bl	119f4 <__errno_location@plt>
   27408:	ldr	r0, [r0]
   2740c:	rsb	r0, r0, #0
   27410:	b	269f8 <__assert_fail@plt+0x14e18>
   27414:	ldr	r0, [sp, #76]	; 0x4c
   27418:	b	269f8 <__assert_fail@plt+0x14e18>
   2741c:	ldrd	r2, [sp]
   27420:	adds	r2, r2, r4
   27424:	adc	r3, r3, r5
   27428:	adds	r0, r2, #4
   2742c:	adc	r1, r3, #0
   27430:	cmp	r9, r1
   27434:	cmpeq	r8, r0
   27438:	bcc	272d4 <__assert_fail@plt+0x156f4>
   2743c:	ldr	r4, [sp, #100]	; 0x64
   27440:	mov	r0, #0
   27444:	ldr	r7, [sp, #32]
   27448:	mov	r1, #0
   2744c:	cmp	r4, #0
   27450:	add	r5, r7, r2
   27454:	beq	2761c <__assert_fail@plt+0x15a3c>
   27458:	mov	r4, #0
   2745c:	ldrb	r8, [r5, r4]
   27460:	add	r4, r4, #1
   27464:	lsl	r3, r1, #8
   27468:	cmp	r4, #4
   2746c:	orr	r3, r3, r0, lsr #24
   27470:	lsl	r2, r0, #8
   27474:	mov	r9, #0
   27478:	orr	r0, r8, r2
   2747c:	orr	r1, r9, r3
   27480:	bne	2745c <__assert_fail@plt+0x1587c>
   27484:	add	r9, sp, #512	; 0x200
   27488:	strd	r2, [r9, #-216]	; 0xffffff28
   2748c:	mov	r3, r0
   27490:	b	26d84 <__assert_fail@plt+0x151a4>
   27494:	andeq	r8, r1, ip, lsl fp
   27498:	andeq	r0, r0, ip, lsr #3
   2749c:			; <UNDEFINED> instruction: 0x000078bc
   274a0:	muleq	r0, ip, r8
   274a4:	andeq	r7, r0, r0, lsl #14
   274a8:	andeq	r7, r0, r4, asr r6
   274ac:	andeq	r7, r0, r8, ror #3
   274b0:	andeq	r7, r0, ip, lsr #3
   274b4:	muleq	r0, r4, sl
   274b8:	andeq	r6, r0, r8, asr #20
   274bc:	andeq	r6, r0, r8, lsl #20
   274c0:	andeq	r6, r0, r4, lsr #14
   274c4:			; <UNDEFINED> instruction: 0x000066bc
   274c8:	andeq	r6, r0, ip, ror #14
   274cc:	strd	r4, [sp, #64]	; 0x40
   274d0:	mov	r0, #7
   274d4:	mov	r4, r2
   274d8:	mov	r5, r3
   274dc:	strd	r8, [sp, #224]	; 0xe0
   274e0:	ldrb	r8, [r1, r0]
   274e4:	sub	r0, r0, #1
   274e8:	lsl	r3, r5, #8
   274ec:	cmn	r0, #1
   274f0:	orr	r3, r3, r4, lsr #24
   274f4:	lsl	r2, r4, #8
   274f8:	mov	r9, #0
   274fc:	orr	r4, r8, r2
   27500:	orr	r5, r9, r3
   27504:	bne	274e0 <__assert_fail@plt+0x15900>
   27508:	add	r8, sp, #512	; 0x200
   2750c:	strd	r4, [sp, #112]	; 0x70
   27510:	ldrd	r4, [sp, #64]	; 0x40
   27514:	strd	r2, [r8, #-240]	; 0xffffff10
   27518:	ldrd	r8, [sp, #224]	; 0xe0
   2751c:	b	27238 <__assert_fail@plt+0x15658>
   27520:	strd	r8, [sp, #224]	; 0xe0
   27524:	mov	r7, #3
   27528:	ldr	r8, [sp, #64]	; 0x40
   2752c:	mov	r2, #0
   27530:	mov	r3, #0
   27534:	mov	r0, #0
   27538:	mov	r1, #0
   2753c:	strd	r4, [sp, #152]	; 0x98
   27540:	strd	r0, [sp]
   27544:	ldrb	r4, [r8, r7]
   27548:	sub	r7, r7, #1
   2754c:	lsl	r1, r3, #8
   27550:	cmn	r7, #1
   27554:	orr	r1, r1, r2, lsr #24
   27558:	lsl	r0, r2, #8
   2755c:	mov	r5, #0
   27560:	orr	r2, r4, r0
   27564:	orr	r3, r5, r1
   27568:	bne	27544 <__assert_fail@plt+0x15964>
   2756c:	add	r7, sp, #256	; 0x100
   27570:	ldrd	r4, [sp, #152]	; 0x98
   27574:	strd	r0, [r7]
   27578:	b	27118 <__assert_fail@plt+0x15538>
   2757c:	strd	r4, [sp, #152]	; 0x98
   27580:	mov	r1, #3
   27584:	mov	r4, r2
   27588:	mov	r5, r3
   2758c:	strd	r8, [sp, #224]	; 0xe0
   27590:	ldrb	r8, [r0, r1]
   27594:	sub	r1, r1, #1
   27598:	lsl	r3, r5, #8
   2759c:	cmn	r1, #1
   275a0:	orr	r3, r3, r4, lsr #24
   275a4:	lsl	r2, r4, #8
   275a8:	mov	r9, #0
   275ac:	orr	r4, r8, r2
   275b0:	orr	r5, r9, r3
   275b4:	bne	27590 <__assert_fail@plt+0x159b0>
   275b8:	strd	r4, [sp, #112]	; 0x70
   275bc:	strd	r2, [sp, #240]	; 0xf0
   275c0:	ldrd	r4, [sp, #152]	; 0x98
   275c4:	ldrd	r8, [sp, #224]	; 0xe0
   275c8:	b	2709c <__assert_fail@plt+0x154bc>
   275cc:	strd	r8, [sp, #152]	; 0x98
   275d0:	mov	r7, #7
   275d4:	mov	r8, r1
   275d8:	strd	r4, [sp, #64]	; 0x40
   275dc:	ldrb	r4, [r8, r7]
   275e0:	sub	r7, r7, #1
   275e4:	lsl	r1, r3, #8
   275e8:	cmn	r7, #1
   275ec:	orr	r1, r1, r2, lsr #24
   275f0:	lsl	r0, r2, #8
   275f4:	mov	r5, #0
   275f8:	orr	r2, r4, r0
   275fc:	orr	r3, r5, r1
   27600:	bne	275dc <__assert_fail@plt+0x159fc>
   27604:	add	r7, sp, #512	; 0x200
   27608:	ldrd	r4, [sp, #64]	; 0x40
   2760c:	strd	r2, [sp]
   27610:	ldrd	r8, [sp, #152]	; 0x98
   27614:	strd	r0, [r7, #-224]	; 0xffffff20
   27618:	b	272bc <__assert_fail@plt+0x156dc>
   2761c:	mov	r4, #3
   27620:	ldrb	r8, [r5, r4]
   27624:	sub	r4, r4, #1
   27628:	lsl	r3, r1, #8
   2762c:	cmn	r4, #1
   27630:	orr	r3, r3, r0, lsr #24
   27634:	lsl	r2, r0, #8
   27638:	mov	r9, #0
   2763c:	orr	r0, r8, r2
   27640:	orr	r1, r9, r3
   27644:	bne	27620 <__assert_fail@plt+0x15a40>
   27648:	add	r8, sp, #512	; 0x200
   2764c:	strd	r2, [r8, #-208]	; 0xffffff30
   27650:	mov	r3, r0
   27654:	b	26d84 <__assert_fail@plt+0x151a4>
   27658:	bl	244d4 <__assert_fail@plt+0x128f4>
   2765c:	bl	11838 <__stack_chk_fail@plt>
   27660:	ldr	r0, [pc, #-424]	; 274c0 <__assert_fail@plt+0x158e0>
   27664:	mov	r2, #214	; 0xd6
   27668:	ldr	r1, [pc, #-428]	; 274c4 <__assert_fail@plt+0x158e4>
   2766c:	ldr	r3, [pc, #-428]	; 274c8 <__assert_fail@plt+0x158e8>
   27670:	add	r0, pc, r0
   27674:	add	r1, pc, r1
   27678:	add	r3, pc, r3
   2767c:	bl	11be0 <__assert_fail@plt>
   27680:	ldr	ip, [pc, #4076]	; 28674 <__assert_fail@plt+0x16a94>
   27684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27688:	add	ip, pc, ip
   2768c:	ldr	lr, [pc, #4068]	; 28678 <__assert_fail@plt+0x16a98>
   27690:	sub	sp, sp, #388	; 0x184
   27694:	add	r2, sp, #340	; 0x154
   27698:	add	r3, sp, #352	; 0x160
   2769c:	str	r1, [sp, #268]	; 0x10c
   276a0:	str	r0, [sp, #80]	; 0x50
   276a4:	ldr	lr, [ip, lr]
   276a8:	ldr	r1, [pc, #4044]	; 2867c <__assert_fail@plt+0x16a9c>
   276ac:	ldr	ip, [lr]
   276b0:	add	r1, pc, r1
   276b4:	str	lr, [sp, #244]	; 0xf4
   276b8:	str	ip, [sp, #380]	; 0x17c
   276bc:	bl	24e70 <__assert_fail@plt+0x13290>
   276c0:	cmp	r0, #0
   276c4:	blt	28604 <__assert_fail@plt+0x16a24>
   276c8:	ldr	r4, [sp, #80]	; 0x50
   276cc:	add	r5, sp, #512	; 0x200
   276d0:	mov	r1, #0
   276d4:	mov	r0, #63	; 0x3f
   276d8:	ldrd	r2, [r5, #-160]	; 0xffffff60
   276dc:	ldr	ip, [r4, #16]
   276e0:	and	r3, r3, r1
   276e4:	and	r2, r2, r0
   276e8:	tst	ip, #2
   276ec:	moveq	r6, #8
   276f0:	movne	r6, #4
   276f4:	orrs	r8, r2, r3
   276f8:	str	r6, [sp, #180]	; 0xb4
   276fc:	movne	r1, #0
   27700:	movne	r2, #0
   27704:	movne	r3, #0
   27708:	movne	r9, #64	; 0x40
   2770c:	moveq	sl, #64	; 0x40
   27710:	strne	r1, [sp, #340]	; 0x154
   27714:	strne	r9, [sp, #120]	; 0x78
   27718:	strdne	r2, [r5, #-160]	; 0xffffff60
   2771c:	streq	sl, [sp, #120]	; 0x78
   27720:	ldr	r1, [pc, #3928]	; 28680 <__assert_fail@plt+0x16aa0>
   27724:	add	r2, sp, #344	; 0x158
   27728:	ldr	r0, [sp, #80]	; 0x50
   2772c:	add	r3, sp, #360	; 0x168
   27730:	add	r1, pc, r1
   27734:	bl	24e70 <__assert_fail@plt+0x13290>
   27738:	cmp	r0, #0
   2773c:	blt	285a0 <__assert_fail@plt+0x169c0>
   27740:	ldr	r1, [pc, #3900]	; 28684 <__assert_fail@plt+0x16aa4>
   27744:	add	r2, sp, #348	; 0x15c
   27748:	ldr	r0, [sp, #80]	; 0x50
   2774c:	add	r3, sp, #368	; 0x170
   27750:	add	r1, pc, r1
   27754:	bl	24e70 <__assert_fail@plt+0x13290>
   27758:	cmp	r0, #0
   2775c:	blt	285a0 <__assert_fail@plt+0x169c0>
   27760:	ldr	fp, [sp, #80]	; 0x50
   27764:	add	sl, sp, #512	; 0x200
   27768:	ldr	fp, [fp, #16]
   2776c:	ands	ip, fp, #2
   27770:	str	ip, [sp, #60]	; 0x3c
   27774:	str	fp, [sp, #204]	; 0xcc
   27778:	movne	r5, #0
   2777c:	movne	r4, #16
   27780:	strdne	r4, [sp, #32]
   27784:	movne	r5, #16
   27788:	strne	r5, [sp, #256]	; 0x100
   2778c:	moveq	r9, #0
   27790:	ldrd	r4, [sl, #-144]	; 0xffffff70
   27794:	moveq	r8, #24
   27798:	strdeq	r8, [sp, #32]
   2779c:	moveq	r9, #24
   277a0:	ldrd	r2, [sp, #32]
   277a4:	mov	r0, r4
   277a8:	mov	r1, r5
   277ac:	streq	r9, [sp, #256]	; 0x100
   277b0:	bl	28d1c <__assert_fail@plt+0x1713c>
   277b4:	orrs	fp, r2, r3
   277b8:	bne	285a0 <__assert_fail@plt+0x169c0>
   277bc:	add	r9, sp, #512	; 0x200
   277c0:	ldrd	r8, [r9, #-160]	; 0xffffff60
   277c4:	orrs	sl, r8, r9
   277c8:	strd	r8, [sp, #88]	; 0x58
   277cc:	beq	27a14 <__assert_fail@plt+0x15e34>
   277d0:	ldr	r2, [sp, #120]	; 0x78
   277d4:	mov	r3, #0
   277d8:	mov	r0, r8
   277dc:	mov	r1, r9
   277e0:	bl	28d1c <__assert_fail@plt+0x1713c>
   277e4:	mov	r1, #1
   277e8:	mov	r6, r0
   277ec:	str	r6, [sp, #252]	; 0xfc
   277f0:	bl	11718 <calloc@plt>
   277f4:	cmp	r0, #0
   277f8:	str	r0, [sp, #128]	; 0x80
   277fc:	beq	286f4 <__assert_fail@plt+0x16b14>
   27800:	ldr	r6, [sp, #80]	; 0x50
   27804:	mov	r0, r4
   27808:	ldrd	r2, [sp, #32]
   2780c:	mov	r1, r5
   27810:	mov	r7, #0
   27814:	ldrh	ip, [r6, #72]	; 0x48
   27818:	cmp	ip, #2
   2781c:	cmpne	ip, #43	; 0x2b
   27820:	movne	ip, #0
   27824:	moveq	ip, #1
   27828:	str	ip, [sp, #84]	; 0x54
   2782c:	bl	28d1c <__assert_fail@plt+0x1713c>
   27830:	ldr	r8, [r6]
   27834:	ldr	sl, [sp, #344]	; 0x158
   27838:	mov	r1, #8
   2783c:	ldr	r9, [sp, #348]	; 0x15c
   27840:	rsb	r3, r8, sl
   27844:	ldr	fp, [sp, #256]	; 0x100
   27848:	str	r8, [sp, #56]	; 0x38
   2784c:	rsb	r6, r8, r9
   27850:	mov	r4, r3
   27854:	asr	r5, r3, #31
   27858:	str	r9, [sp, #264]	; 0x108
   2785c:	add	r6, fp, r6
   27860:	str	sl, [sp, #260]	; 0x104
   27864:	strd	r4, [sp, #112]	; 0x70
   27868:	str	r0, [sp, #200]	; 0xc8
   2786c:	str	r0, [sp, #64]	; 0x40
   27870:	bl	11718 <calloc@plt>
   27874:	cmp	r0, #0
   27878:	str	r0, [sp, #240]	; 0xf0
   2787c:	beq	286fc <__assert_fail@plt+0x16b1c>
   27880:	ldr	r5, [sp, #200]	; 0xc8
   27884:	cmp	r5, #1
   27888:	movle	r6, #0
   2788c:	strle	r6, [sp, #40]	; 0x28
   27890:	strle	r6, [sp, #160]	; 0xa0
   27894:	ble	27b80 <__assert_fail@plt+0x15fa0>
   27898:	ldr	r8, [sp, #60]	; 0x3c
   2789c:	mov	fp, #0
   278a0:	ldr	r3, [sp, #340]	; 0x154
   278a4:	mov	r9, #0
   278a8:	cmp	r8, #0
   278ac:	movne	r8, #4
   278b0:	moveq	r8, #8
   278b4:	mov	sl, r8
   278b8:	strd	sl, [sp, #144]	; 0x90
   278bc:	ldr	fp, [sp, #56]	; 0x38
   278c0:	adds	r0, r6, #6
   278c4:	str	r8, [sp, #248]	; 0xf8
   278c8:	rsb	r3, fp, r3
   278cc:	add	fp, sp, #512	; 0x200
   278d0:	ldrd	r4, [sp, #144]	; 0x90
   278d4:	mov	r8, r3
   278d8:	strd	r8, [sp, #96]	; 0x60
   278dc:	ldr	r9, [sp, #80]	; 0x50
   278e0:	adds	r4, r4, #64	; 0x40
   278e4:	ldrd	sl, [fp, #-152]	; 0xffffff68
   278e8:	adc	r5, r5, #0
   278ec:	adds	r2, r6, #14
   278f0:	str	r0, [sp, #132]	; 0x84
   278f4:	ldrd	r8, [r9, #8]
   278f8:	strd	sl, [sp, #104]	; 0x68
   278fc:	ldrd	sl, [sp, #96]	; 0x60
   27900:	strd	r8, [sp, #8]
   27904:	ldrd	r8, [sp, #144]	; 0x90
   27908:	adds	sl, sl, r8
   2790c:	adc	fp, fp, r9
   27910:	strd	sl, [sp, #136]	; 0x88
   27914:	ldrd	sl, [sp, #96]	; 0x60
   27918:	mov	r9, #1
   2791c:	adds	sl, sl, r4
   27920:	adc	fp, fp, r5
   27924:	strd	sl, [sp, #232]	; 0xe8
   27928:	ldr	fp, [sp, #56]	; 0x38
   2792c:	ldr	sl, [sp, #204]	; 0xcc
   27930:	add	r8, fp, r2
   27934:	add	ip, fp, r0
   27938:	ldr	fp, [sp, #240]	; 0xf0
   2793c:	adds	r2, r6, #4
   27940:	adc	r3, r7, #0
   27944:	and	sl, sl, #16
   27948:	strd	r2, [sp, #184]	; 0xb8
   2794c:	adds	r4, r6, #12
   27950:	str	sl, [sp, #124]	; 0x7c
   27954:	adc	r5, r7, #0
   27958:	str	fp, [sp, #16]
   2795c:	ldr	r2, [sp, #32]
   27960:	ldrd	sl, [sp, #48]	; 0x30
   27964:	strd	r4, [sp, #192]	; 0xc0
   27968:	mov	r5, #0
   2796c:	str	r2, [sp, #28]
   27970:	str	r5, [sp, #40]	; 0x28
   27974:	str	r5, [sp, #160]	; 0xa0
   27978:	ldr	r4, [sp, #60]	; 0x3c
   2797c:	adds	r2, r6, #4
   27980:	adc	r3, r7, #0
   27984:	cmp	r4, #0
   27988:	ldrd	r4, [sp, #8]
   2798c:	beq	27a24 <__assert_fail@plt+0x15e44>
   27990:	cmp	r5, r3
   27994:	cmpeq	r4, r2
   27998:	bcc	286ac <__assert_fail@plt+0x16acc>
   2799c:	ldr	r5, [sp, #124]	; 0x7c
   279a0:	mov	r3, #0
   279a4:	ldr	r2, [sp, #56]	; 0x38
   279a8:	cmp	r5, #0
   279ac:	add	lr, r2, r6
   279b0:	mov	r2, #0
   279b4:	beq	28244 <__assert_fail@plt+0x16664>
   279b8:	mov	r4, #0
   279bc:	ldrb	r0, [lr, r4]
   279c0:	add	r4, r4, #1
   279c4:	lsl	fp, r3, #8
   279c8:	cmp	r4, #4
   279cc:	orr	fp, fp, r2, lsr #24
   279d0:	lsl	sl, r2, #8
   279d4:	mov	r1, #0
   279d8:	orr	r2, r0, sl
   279dc:	orr	r3, r1, fp
   279e0:	bne	279bc <__assert_fail@plt+0x15ddc>
   279e4:	adds	r0, r6, #16
   279e8:	mov	lr, r2
   279ec:	ldrd	r2, [sp, #8]
   279f0:	adc	r1, r7, #0
   279f4:	cmp	r3, r1
   279f8:	cmpeq	r2, r0
   279fc:	bcc	286ac <__assert_fail@plt+0x16acc>
   27a00:	ldrb	r0, [r8]
   27a04:	ldrb	r2, [r8, #1]
   27a08:	lsl	r0, r0, #8
   27a0c:	orr	r2, r0, r2
   27a10:	b	282a8 <__assert_fail@plt+0x166c8>
   27a14:	mov	fp, #0
   27a18:	str	fp, [sp, #128]	; 0x80
   27a1c:	str	fp, [sp, #252]	; 0xfc
   27a20:	b	27800 <__assert_fail@plt+0x15c20>
   27a24:	cmp	r5, r3
   27a28:	cmpeq	r4, r2
   27a2c:	bcc	286ac <__assert_fail@plt+0x16acc>
   27a30:	ldr	r5, [sp, #124]	; 0x7c
   27a34:	mov	r3, #0
   27a38:	ldr	r2, [sp, #56]	; 0x38
   27a3c:	cmp	r5, #0
   27a40:	add	lr, r2, r6
   27a44:	mov	r2, #0
   27a48:	beq	281dc <__assert_fail@plt+0x165fc>
   27a4c:	ldr	r4, [sp, #60]	; 0x3c
   27a50:	strd	r6, [sp, #48]	; 0x30
   27a54:	ldrb	r6, [lr, r4]
   27a58:	add	r4, r4, #1
   27a5c:	lsl	r1, r3, #8
   27a60:	cmp	r4, #4
   27a64:	orr	r1, r1, r2, lsr #24
   27a68:	lsl	r0, r2, #8
   27a6c:	mov	r7, #0
   27a70:	orr	r2, r6, r0
   27a74:	orr	r3, r7, r1
   27a78:	bne	27a54 <__assert_fail@plt+0x15e74>
   27a7c:	ldrd	r6, [sp, #48]	; 0x30
   27a80:	mov	lr, r2
   27a84:	strd	r0, [sp, #216]	; 0xd8
   27a88:	ldrd	r4, [sp, #8]
   27a8c:	adds	r0, r6, #8
   27a90:	adc	r1, r7, #0
   27a94:	cmp	r5, r1
   27a98:	cmpeq	r4, r0
   27a9c:	bcc	286ac <__assert_fail@plt+0x16acc>
   27aa0:	ldrb	r0, [ip]
   27aa4:	ldrb	r2, [ip, #1]
   27aa8:	lsl	r0, r0, #8
   27aac:	orr	r2, r0, r2
   27ab0:	adds	r4, r6, #5
   27ab4:	ldrd	r0, [sp, #8]
   27ab8:	adc	r5, r7, #0
   27abc:	uxth	r2, r2
   27ac0:	cmp	r1, r5
   27ac4:	cmpeq	r0, r4
   27ac8:	bcc	286ac <__assert_fail@plt+0x16acc>
   27acc:	ldr	r4, [sp, #132]	; 0x84
   27ad0:	ldr	r5, [sp, #184]	; 0xb8
   27ad4:	rsb	r3, r4, ip
   27ad8:	add	r3, r3, r5
   27adc:	ldrb	r3, [r3]
   27ae0:	cmp	r2, #0
   27ae4:	bne	27b4c <__assert_fail@plt+0x15f6c>
   27ae8:	ldr	r4, [sp, #84]	; 0x54
   27aec:	cmp	r4, #0
   27af0:	beq	27b00 <__assert_fail@plt+0x15f20>
   27af4:	and	r3, r3, #15
   27af8:	cmp	r3, #13
   27afc:	beq	27b4c <__assert_fail@plt+0x15f6c>
   27b00:	ldrd	r4, [sp, #104]	; 0x68
   27b04:	mov	r2, lr
   27b08:	mov	r3, #0
   27b0c:	cmp	r3, r5
   27b10:	cmpeq	r2, r4
   27b14:	bcs	28590 <__assert_fail@plt+0x169b0>
   27b18:	ldrd	r4, [sp, #112]	; 0x70
   27b1c:	adds	r2, lr, r4
   27b20:	adc	r3, r3, r5
   27b24:	ldrd	r4, [sp, #8]
   27b28:	cmp	r3, r5
   27b2c:	cmpeq	r2, r4
   27b30:	bcs	27e1c <__assert_fail@plt+0x1623c>
   27b34:	ldr	r5, [sp, #56]	; 0x38
   27b38:	add	r5, r5, r2
   27b3c:	str	r5, [sp, #48]	; 0x30
   27b40:	ldrb	r3, [r5]
   27b44:	cmp	r3, #0
   27b48:	bne	27ff4 <__assert_fail@plt+0x16414>
   27b4c:	ldrd	r4, [sp, #32]
   27b50:	add	r9, r9, #1
   27b54:	ldr	r2, [sp, #16]
   27b58:	adds	r6, r6, r4
   27b5c:	ldr	r3, [sp, #28]
   27b60:	adc	r7, r7, r5
   27b64:	ldr	r5, [sp, #64]	; 0x40
   27b68:	add	r2, r2, #8
   27b6c:	add	ip, ip, r3
   27b70:	cmp	r5, r9
   27b74:	str	r2, [sp, #16]
   27b78:	add	r8, r8, r3
   27b7c:	bgt	27978 <__assert_fail@plt+0x15d98>
   27b80:	ldr	r4, [sp, #128]	; 0x80
   27b84:	cmp	r4, #0
   27b88:	beq	27c2c <__assert_fail@plt+0x1604c>
   27b8c:	ldr	r5, [sp, #252]	; 0xfc
   27b90:	ldr	r4, [sp, #340]	; 0x154
   27b94:	ldr	r6, [sp, #56]	; 0x38
   27b98:	cmp	r5, #0
   27b9c:	rsb	r4, r6, r4
   27ba0:	asr	r5, r4, #31
   27ba4:	ble	27c2c <__assert_fail@plt+0x1604c>
   27ba8:	ldr	sl, [sp, #128]	; 0x80
   27bac:	mov	r7, #0
   27bb0:	ldr	r8, [sp, #180]	; 0xb4
   27bb4:	ldr	r9, [sp, #252]	; 0xfc
   27bb8:	adds	r4, r4, r8
   27bbc:	mov	r6, sl
   27bc0:	add	r8, r9, sl
   27bc4:	ldr	r9, [sp, #160]	; 0xa0
   27bc8:	ldr	sl, [sp, #80]	; 0x50
   27bcc:	adc	r5, r5, #0
   27bd0:	mov	fp, r8
   27bd4:	ldr	r8, [sp, #120]	; 0x78
   27bd8:	ldrb	r3, [r6], #1
   27bdc:	cmp	r3, #0
   27be0:	bne	27c1c <__assert_fail@plt+0x1603c>
   27be4:	adds	r0, r4, r7
   27be8:	ldrd	r2, [sl, #8]
   27bec:	adc	r1, r5, #0
   27bf0:	cmp	r1, r3
   27bf4:	cmpeq	r0, r2
   27bf8:	bcs	27e1c <__assert_fail@plt+0x1623c>
   27bfc:	ldr	ip, [sp, #56]	; 0x38
   27c00:	add	r9, r9, #1
   27c04:	ldr	r2, [sp, #40]	; 0x28
   27c08:	add	r0, ip, r0
   27c0c:	add	r2, r2, #1
   27c10:	str	r2, [sp, #40]	; 0x28
   27c14:	bl	119a0 <strlen@plt>
   27c18:	add	r9, r9, r0
   27c1c:	cmp	r6, fp
   27c20:	add	r7, r7, r8
   27c24:	bne	27bd8 <__assert_fail@plt+0x15ff8>
   27c28:	str	r9, [sp, #160]	; 0xa0
   27c2c:	ldr	r3, [sp, #40]	; 0x28
   27c30:	cmp	r3, #0
   27c34:	beq	28628 <__assert_fail@plt+0x16a48>
   27c38:	ldr	r6, [sp, #40]	; 0x28
   27c3c:	ldr	r8, [sp, #160]	; 0xa0
   27c40:	lsl	r4, r6, #4
   27c44:	add	r0, r4, r8
   27c48:	bl	11910 <malloc@plt>
   27c4c:	ldr	r9, [sp, #268]	; 0x10c
   27c50:	cmp	r0, #0
   27c54:	str	r0, [sp, #56]	; 0x38
   27c58:	str	r0, [r9]
   27c5c:	beq	286d4 <__assert_fail@plt+0x16af4>
   27c60:	ldr	sl, [sp, #80]	; 0x50
   27c64:	ldr	ip, [sp, #56]	; 0x38
   27c68:	ldr	fp, [sp, #200]	; 0xc8
   27c6c:	ldr	r3, [sl]
   27c70:	add	r4, ip, r4
   27c74:	ldr	r5, [sp, #260]	; 0x104
   27c78:	cmp	fp, #1
   27c7c:	str	r4, [sp, #60]	; 0x3c
   27c80:	mov	fp, #0
   27c84:	ldr	r4, [sp, #264]	; 0x108
   27c88:	ldr	r6, [sp, #256]	; 0x100
   27c8c:	rsb	r2, r3, r4
   27c90:	rsb	r3, r3, r5
   27c94:	add	r2, r6, r2
   27c98:	mov	r8, r3
   27c9c:	asr	r9, r3, #31
   27ca0:	strd	r8, [sp, #48]	; 0x30
   27ca4:	ble	28378 <__assert_fail@plt+0x16798>
   27ca8:	ldrd	r4, [sp, #32]
   27cac:	mov	ip, #0
   27cb0:	ldr	r3, [sp, #32]
   27cb4:	ldr	r0, [sp, #204]	; 0xcc
   27cb8:	adds	r4, r4, r2
   27cbc:	ldr	r7, [sp, #240]	; 0xf0
   27cc0:	adc	r5, r5, fp
   27cc4:	ldr	r9, [sp, #200]	; 0xc8
   27cc8:	rsb	r6, r3, #6
   27ccc:	strd	r4, [sp, #16]
   27cd0:	rsb	r5, r3, #4
   27cd4:	str	r6, [sp, #88]	; 0x58
   27cd8:	mov	r4, r2
   27cdc:	str	r5, [sp, #96]	; 0x60
   27ce0:	mov	r6, #1
   27ce4:	mov	r5, fp
   27ce8:	sub	r9, r9, #1
   27cec:	str	ip, [sp, #28]
   27cf0:	str	r9, [sp, #64]	; 0x40
   27cf4:	str	r3, [sp, #72]	; 0x48
   27cf8:	adds	r2, r4, #4
   27cfc:	ldr	r8, [sp, #80]	; 0x50
   27d00:	adc	r3, r5, #0
   27d04:	ands	lr, r0, #2
   27d08:	ldrd	sl, [r8, #8]
   27d0c:	beq	27f1c <__assert_fail@plt+0x1633c>
   27d10:	cmp	r3, fp
   27d14:	cmpeq	r2, sl
   27d18:	bhi	286ac <__assert_fail@plt+0x16acc>
   27d1c:	ldr	r1, [r8]
   27d20:	ands	r0, r0, #16
   27d24:	mov	r2, #0
   27d28:	mov	r3, #0
   27d2c:	add	ip, r1, r4
   27d30:	beq	2831c <__assert_fail@plt+0x1673c>
   27d34:	mov	lr, #0
   27d38:	strd	r4, [sp, #40]	; 0x28
   27d3c:	ldrb	r8, [ip, lr]
   27d40:	add	lr, lr, #1
   27d44:	lsl	r5, r3, #8
   27d48:	cmp	lr, #4
   27d4c:	orr	r5, r5, r2, lsr #24
   27d50:	lsl	r4, r2, #8
   27d54:	mov	r9, #0
   27d58:	orr	r2, r8, r4
   27d5c:	orr	r3, r9, r5
   27d60:	bne	27d3c <__assert_fail@plt+0x1615c>
   27d64:	add	ip, sp, #512	; 0x200
   27d68:	strd	r4, [ip, #-240]	; 0xffffff10
   27d6c:	ldrd	r4, [sp, #40]	; 0x28
   27d70:	adds	r8, r4, #16
   27d74:	mov	lr, r2
   27d78:	adc	r9, r5, #0
   27d7c:	cmp	r9, fp
   27d80:	cmpeq	r8, sl
   27d84:	bhi	286ac <__assert_fail@plt+0x16acc>
   27d88:	ldr	ip, [sp, #32]
   27d8c:	cmp	r0, #0
   27d90:	ldr	r2, [sp, #16]
   27d94:	rsb	r0, ip, #14
   27d98:	add	r0, r0, r2
   27d9c:	add	ip, r1, r0
   27da0:	str	r2, [sp, #104]	; 0x68
   27da4:	ldrbne	r2, [r1, r0]
   27da8:	ldrbeq	r2, [ip, #1]
   27dac:	ldrbeq	r8, [r1, r0]
   27db0:	ldrbne	r8, [ip, #1]
   27db4:	lsl	r0, r2, #8
   27db8:	orr	r0, r0, r8
   27dbc:	adds	r8, r4, #13
   27dc0:	adc	r9, r5, #0
   27dc4:	strd	r8, [sp, #40]	; 0x28
   27dc8:	ldrd	r2, [sp, #40]	; 0x28
   27dcc:	uxth	r8, r0
   27dd0:	cmp	r3, fp
   27dd4:	cmpeq	r2, sl
   27dd8:	bhi	286ac <__assert_fail@plt+0x16acc>
   27ddc:	ldr	r9, [sp, #104]	; 0x68
   27de0:	ldr	ip, [sp, #72]	; 0x48
   27de4:	add	r3, r1, r9
   27de8:	rsb	r0, ip, #12
   27dec:	ldrb	r3, [r3, r0]
   27df0:	cmp	r8, #0
   27df4:	bne	27ee0 <__assert_fail@plt+0x16300>
   27df8:	ldr	r8, [sp, #84]	; 0x54
   27dfc:	cmp	r8, #0
   27e00:	bne	27e3c <__assert_fail@plt+0x1625c>
   27e04:	ldrd	r8, [sp, #48]	; 0x30
   27e08:	adds	r8, r8, lr
   27e0c:	adc	r9, r9, #0
   27e10:	cmp	fp, r9
   27e14:	cmpeq	sl, r8
   27e18:	bhi	27e60 <__assert_fail@plt+0x16280>
   27e1c:	ldr	r0, [pc, #2148]	; 28688 <__assert_fail@plt+0x16aa8>
   27e20:	mov	r2, #202	; 0xca
   27e24:	ldr	r1, [pc, #2144]	; 2868c <__assert_fail@plt+0x16aac>
   27e28:	ldr	r3, [pc, #2144]	; 28690 <__assert_fail@plt+0x16ab0>
   27e2c:	add	r0, pc, r0
   27e30:	add	r1, pc, r1
   27e34:	add	r3, pc, r3
   27e38:	bl	11be0 <__assert_fail@plt>
   27e3c:	and	r0, r3, #15
   27e40:	cmp	r0, #13
   27e44:	beq	27ee0 <__assert_fail@plt+0x16300>
   27e48:	ldrd	r8, [sp, #48]	; 0x30
   27e4c:	adds	r8, r8, lr
   27e50:	adc	r9, r9, #0
   27e54:	cmp	r9, fp
   27e58:	cmpeq	r8, sl
   27e5c:	bcs	27e1c <__assert_fail@plt+0x1623c>
   27e60:	add	r8, r1, r8
   27e64:	ldrb	r2, [r8]
   27e68:	cmp	r2, #0
   27e6c:	beq	27ee0 <__assert_fail@plt+0x16300>
   27e70:	lsr	r3, r3, #4
   27e74:	mov	r0, r8
   27e78:	cmp	r3, #2
   27e7c:	movne	fp, #85	; 0x55
   27e80:	moveq	fp, #87	; 0x57
   27e84:	bl	119a0 <strlen@plt>
   27e88:	ldr	r9, [sp, #28]
   27e8c:	mov	r1, r8
   27e90:	ldr	r8, [sp, #56]	; 0x38
   27e94:	ldr	lr, [sp, #56]	; 0x38
   27e98:	lsl	ip, r9, #4
   27e9c:	add	r9, r9, #1
   27ea0:	add	r3, r8, ip
   27ea4:	str	r9, [sp, #28]
   27ea8:	ldrd	r8, [r7, #8]
   27eac:	strd	r8, [lr, ip]
   27eb0:	mov	r9, #0
   27eb4:	str	fp, [r3, #8]
   27eb8:	mov	sl, r0
   27ebc:	ldr	r0, [sp, #60]	; 0x3c
   27ec0:	mov	r2, sl
   27ec4:	str	r0, [r3, #12]
   27ec8:	mov	r8, r0
   27ecc:	bl	117e4 <memcpy@plt>
   27ed0:	add	r3, sl, #1
   27ed4:	strb	r9, [r8, sl]
   27ed8:	add	r8, r8, r3
   27edc:	str	r8, [sp, #60]	; 0x3c
   27ee0:	ldrd	sl, [sp, #32]
   27ee4:	add	r7, r7, #8
   27ee8:	ldrd	r8, [sp, #16]
   27eec:	adds	r4, r4, sl
   27ef0:	adc	r5, r5, fp
   27ef4:	adds	r8, r8, sl
   27ef8:	adc	r9, r9, fp
   27efc:	strd	r8, [sp, #16]
   27f00:	ldr	r9, [sp, #64]	; 0x40
   27f04:	cmp	r6, r9
   27f08:	beq	28380 <__assert_fail@plt+0x167a0>
   27f0c:	ldr	sl, [sp, #80]	; 0x50
   27f10:	add	r6, r6, #1
   27f14:	ldr	r0, [sl, #16]
   27f18:	b	27cf8 <__assert_fail@plt+0x16118>
   27f1c:	cmp	r3, fp
   27f20:	cmpeq	r2, sl
   27f24:	bhi	286ac <__assert_fail@plt+0x16acc>
   27f28:	ldr	r1, [r8]
   27f2c:	ands	r0, r0, #16
   27f30:	mov	r2, #0
   27f34:	mov	r3, #0
   27f38:	add	ip, r1, r4
   27f3c:	beq	282dc <__assert_fail@plt+0x166fc>
   27f40:	strd	r4, [sp, #40]	; 0x28
   27f44:	ldrb	r8, [ip, lr]
   27f48:	add	lr, lr, #1
   27f4c:	lsl	r5, r3, #8
   27f50:	cmp	lr, #4
   27f54:	orr	r5, r5, r2, lsr #24
   27f58:	lsl	r4, r2, #8
   27f5c:	mov	r9, #0
   27f60:	orr	r2, r8, r4
   27f64:	orr	r3, r9, r5
   27f68:	bne	27f44 <__assert_fail@plt+0x16364>
   27f6c:	add	ip, sp, #512	; 0x200
   27f70:	strd	r4, [ip, #-224]	; 0xffffff20
   27f74:	ldrd	r4, [sp, #40]	; 0x28
   27f78:	adds	r8, r4, #8
   27f7c:	mov	lr, r2
   27f80:	adc	r9, r5, #0
   27f84:	cmp	r9, fp
   27f88:	cmpeq	r8, sl
   27f8c:	bhi	286ac <__assert_fail@plt+0x16acc>
   27f90:	ldr	ip, [sp, #88]	; 0x58
   27f94:	cmp	r0, #0
   27f98:	ldr	r2, [sp, #16]
   27f9c:	add	r0, ip, r2
   27fa0:	add	ip, r1, r0
   27fa4:	str	r2, [sp, #104]	; 0x68
   27fa8:	bne	2835c <__assert_fail@plt+0x1677c>
   27fac:	ldrb	r8, [ip, #1]
   27fb0:	mov	r9, #0
   27fb4:	strd	r8, [sp, #40]	; 0x28
   27fb8:	ldr	ip, [sp, #40]	; 0x28
   27fbc:	ldrb	r8, [r1, r0]
   27fc0:	lsl	r0, ip, #8
   27fc4:	orr	r8, r0, r8
   27fc8:	adds	r2, r4, #5
   27fcc:	uxth	r8, r8
   27fd0:	adc	r3, r5, #0
   27fd4:	cmp	r3, fp
   27fd8:	cmpeq	r2, sl
   27fdc:	bhi	286ac <__assert_fail@plt+0x16acc>
   27fe0:	ldr	r9, [sp, #104]	; 0x68
   27fe4:	ldr	ip, [sp, #96]	; 0x60
   27fe8:	add	r3, r1, r9
   27fec:	ldrb	r3, [r3, ip]
   27ff0:	b	27df0 <__assert_fail@plt+0x16210>
   27ff4:	ldr	r2, [sp, #40]	; 0x28
   27ff8:	mov	r0, r5
   27ffc:	str	ip, [sp, #4]
   28000:	add	r2, r2, #1
   28004:	str	r2, [sp, #40]	; 0x28
   28008:	bl	119a0 <strlen@plt>
   2800c:	ldrd	r4, [sp, #88]	; 0x58
   28010:	ldr	r2, [sp, #160]	; 0xa0
   28014:	orrs	r5, r4, r5
   28018:	ldr	ip, [sp, #4]
   2801c:	add	r3, r2, #1
   28020:	add	r3, r3, r0
   28024:	str	r3, [sp, #160]	; 0xa0
   28028:	ldrdeq	r2, [sp, #88]	; 0x58
   2802c:	beq	281d0 <__assert_fail@plt+0x165f0>
   28030:	ldrd	r2, [sp, #8]
   28034:	ldrd	r4, [sp, #136]	; 0x88
   28038:	cmp	r3, r5
   2803c:	cmpeq	r2, r4
   28040:	bls	27e1c <__assert_fail@plt+0x1623c>
   28044:	ldrd	r2, [sp, #232]	; 0xe8
   28048:	strd	r6, [sp, #168]	; 0xa8
   2804c:	mov	r6, ip
   28050:	str	r9, [sp, #164]	; 0xa4
   28054:	strd	r2, [sp, #152]	; 0x98
   28058:	mov	r2, r4
   2805c:	mov	r3, r5
   28060:	ldrd	r4, [sp, #96]	; 0x60
   28064:	ldr	r7, [sp, #48]	; 0x30
   28068:	str	r8, [sp, #176]	; 0xb0
   2806c:	strd	r4, [sp, #72]	; 0x48
   28070:	mov	r4, #0
   28074:	mov	r5, #0
   28078:	strd	sl, [sp, #48]	; 0x30
   2807c:	ldrd	r8, [sp, #8]
   28080:	mov	sl, r4
   28084:	mov	fp, r5
   28088:	ldrd	r4, [sp, #152]	; 0x98
   2808c:	cmp	r9, r3
   28090:	cmpeq	r8, r2
   28094:	mov	r0, r7
   28098:	ldrhi	ip, [sp, #56]	; 0x38
   2809c:	movls	r1, #0
   280a0:	addhi	r1, ip, r2
   280a4:	bl	11754 <strcmp@plt>
   280a8:	cmp	r0, #0
   280ac:	beq	28100 <__assert_fail@plt+0x16520>
   280b0:	adds	sl, sl, #64	; 0x40
   280b4:	ldrd	r0, [sp, #88]	; 0x58
   280b8:	adc	fp, fp, #0
   280bc:	cmp	r1, fp
   280c0:	cmpeq	r0, sl
   280c4:	bls	2864c <__assert_fail@plt+0x16a6c>
   280c8:	ldrd	r2, [sp, #96]	; 0x60
   280cc:	adds	r2, r2, sl
   280d0:	adc	r3, r3, fp
   280d4:	adds	r0, r4, #64	; 0x40
   280d8:	adc	r1, r5, #0
   280dc:	cmp	r5, r9
   280e0:	cmpeq	r4, r8
   280e4:	strd	r2, [sp, #72]	; 0x48
   280e8:	bcs	27e1c <__assert_fail@plt+0x1623c>
   280ec:	mov	r2, r4
   280f0:	mov	r3, r5
   280f4:	mov	r4, r0
   280f8:	mov	r5, r1
   280fc:	b	2808c <__assert_fail@plt+0x164ac>
   28100:	ldrd	r0, [sp, #72]	; 0x48
   28104:	mov	r4, sl
   28108:	ldrd	r2, [sp, #144]	; 0x90
   2810c:	mov	r5, fp
   28110:	mov	ip, r6
   28114:	ldr	r9, [sp, #164]	; 0xa4
   28118:	adds	r2, r2, r0
   2811c:	ldr	r8, [sp, #176]	; 0xb0
   28120:	adc	r3, r3, r1
   28124:	ldrd	r0, [sp, #8]
   28128:	ldrd	sl, [sp, #48]	; 0x30
   2812c:	cmp	r1, r3
   28130:	cmpeq	r0, r2
   28134:	ldrd	r6, [sp, #168]	; 0xa8
   28138:	bcc	286ac <__assert_fail@plt+0x16acc>
   2813c:	ldr	r2, [sp, #124]	; 0x7c
   28140:	ldr	r3, [sp, #56]	; 0x38
   28144:	ldr	r0, [sp, #72]	; 0x48
   28148:	cmp	r2, #0
   2814c:	add	lr, r3, r0
   28150:	beq	285a8 <__assert_fail@plt+0x169c8>
   28154:	ldr	r0, [sp, #248]	; 0xf8
   28158:	mov	r2, #0
   2815c:	strd	sl, [sp, #72]	; 0x48
   28160:	mov	r3, #0
   28164:	add	r1, lr, r0
   28168:	strd	r6, [sp, #48]	; 0x30
   2816c:	mov	sl, r1
   28170:	ldrb	r6, [lr], #1
   28174:	lsl	r1, r3, #8
   28178:	orr	r1, r1, r2, lsr #24
   2817c:	lsl	r0, r2, #8
   28180:	cmp	lr, sl
   28184:	mov	r7, #0
   28188:	orr	r2, r6, r0
   2818c:	orr	r3, r7, r1
   28190:	bne	28170 <__assert_fail@plt+0x16590>
   28194:	ldrd	r6, [sp, #48]	; 0x30
   28198:	add	lr, sp, #512	; 0x200
   2819c:	ldrd	sl, [sp, #72]	; 0x48
   281a0:	strd	r0, [lr, #-208]	; 0xffffff30
   281a4:	lsr	r1, r4, #6
   281a8:	ldr	r4, [sp, #128]	; 0x80
   281ac:	orr	r1, r1, r5, lsl #26
   281b0:	cmp	r4, #0
   281b4:	mvn	r0, r1
   281b8:	lsr	r0, r0, #31
   281bc:	moveq	r0, #0
   281c0:	cmp	r0, #0
   281c4:	ldrne	r4, [sp, #128]	; 0x80
   281c8:	movne	r5, #1
   281cc:	strbne	r5, [r4, r1]
   281d0:	ldr	r5, [sp, #16]
   281d4:	strd	r2, [r5, #8]
   281d8:	b	27b4c <__assert_fail@plt+0x15f6c>
   281dc:	mov	r4, #3
   281e0:	strd	r6, [sp, #48]	; 0x30
   281e4:	ldrb	r6, [lr, r4]
   281e8:	sub	r4, r4, #1
   281ec:	lsl	r1, r3, #8
   281f0:	cmn	r4, #1
   281f4:	orr	r1, r1, r2, lsr #24
   281f8:	lsl	r0, r2, #8
   281fc:	mov	r7, #0
   28200:	orr	r2, r6, r0
   28204:	orr	r3, r7, r1
   28208:	bne	281e4 <__assert_fail@plt+0x16604>
   2820c:	ldrd	r6, [sp, #48]	; 0x30
   28210:	mov	lr, r2
   28214:	strd	r0, [sp, #224]	; 0xe0
   28218:	ldrd	r2, [sp, #8]
   2821c:	adds	r0, r6, #8
   28220:	adc	r1, r7, #0
   28224:	cmp	r3, r1
   28228:	cmpeq	r2, r0
   2822c:	bcc	286ac <__assert_fail@plt+0x16acc>
   28230:	ldrb	r2, [ip, #1]
   28234:	ldrb	r0, [ip]
   28238:	lsl	r2, r2, #8
   2823c:	orr	r2, r2, r0
   28240:	b	27ab0 <__assert_fail@plt+0x15ed0>
   28244:	mov	r4, #3
   28248:	strd	r6, [sp, #48]	; 0x30
   2824c:	ldrb	r6, [lr, r4]
   28250:	sub	r4, r4, #1
   28254:	lsl	r1, r3, #8
   28258:	cmn	r4, #1
   2825c:	orr	r1, r1, r2, lsr #24
   28260:	lsl	r0, r2, #8
   28264:	mov	r7, #0
   28268:	orr	r2, r6, r0
   2826c:	orr	r3, r7, r1
   28270:	bne	2824c <__assert_fail@plt+0x1666c>
   28274:	ldrd	r6, [sp, #48]	; 0x30
   28278:	mov	lr, r2
   2827c:	strd	r0, [sp, #208]	; 0xd0
   28280:	ldrd	r4, [sp, #8]
   28284:	adds	r0, r6, #16
   28288:	adc	r1, r7, #0
   2828c:	cmp	r5, r1
   28290:	cmpeq	r4, r0
   28294:	bcc	286ac <__assert_fail@plt+0x16acc>
   28298:	ldrb	r2, [r8, #1]
   2829c:	ldrb	r0, [r8]
   282a0:	lsl	r2, r2, #8
   282a4:	orr	r2, r2, r0
   282a8:	adds	r4, r6, #13
   282ac:	ldrd	r0, [sp, #8]
   282b0:	adc	r5, r7, #0
   282b4:	uxth	r2, r2
   282b8:	cmp	r1, r5
   282bc:	cmpeq	r0, r4
   282c0:	bcc	286ac <__assert_fail@plt+0x16acc>
   282c4:	ldr	r4, [sp, #132]	; 0x84
   282c8:	ldr	r5, [sp, #192]	; 0xc0
   282cc:	rsb	r3, r4, ip
   282d0:	add	r3, r3, r5
   282d4:	ldrb	r3, [r3]
   282d8:	b	27ae0 <__assert_fail@plt+0x15f00>
   282dc:	mov	lr, #3
   282e0:	strd	r4, [sp, #40]	; 0x28
   282e4:	ldrb	r8, [ip, lr]
   282e8:	sub	lr, lr, #1
   282ec:	lsl	r5, r3, #8
   282f0:	cmn	lr, #1
   282f4:	orr	r5, r5, r2, lsr #24
   282f8:	lsl	r4, r2, #8
   282fc:	mov	r9, #0
   28300:	orr	r2, r8, r4
   28304:	orr	r3, r9, r5
   28308:	bne	282e4 <__assert_fail@plt+0x16704>
   2830c:	add	r9, sp, #512	; 0x200
   28310:	strd	r4, [r9, #-216]	; 0xffffff28
   28314:	ldrd	r4, [sp, #40]	; 0x28
   28318:	b	27f78 <__assert_fail@plt+0x16398>
   2831c:	mov	lr, #3
   28320:	strd	r4, [sp, #40]	; 0x28
   28324:	ldrb	r8, [ip, lr]
   28328:	sub	lr, lr, #1
   2832c:	lsl	r5, r3, #8
   28330:	cmn	lr, #1
   28334:	orr	r5, r5, r2, lsr #24
   28338:	lsl	r4, r2, #8
   2833c:	mov	r9, #0
   28340:	orr	r2, r8, r4
   28344:	orr	r3, r9, r5
   28348:	bne	28324 <__assert_fail@plt+0x16744>
   2834c:	add	r9, sp, #512	; 0x200
   28350:	strd	r4, [r9, #-232]	; 0xffffff18
   28354:	ldrd	r4, [sp, #40]	; 0x28
   28358:	b	27d70 <__assert_fail@plt+0x16190>
   2835c:	ldrb	r2, [r1, r0]
   28360:	mov	r3, #0
   28364:	ldrb	r8, [ip, #1]
   28368:	lsl	r0, r2, #8
   2836c:	strd	r2, [sp, #40]	; 0x28
   28370:	orr	r8, r0, r8
   28374:	b	27fc8 <__assert_fail@plt+0x163e8>
   28378:	mov	fp, #0
   2837c:	str	fp, [sp, #28]
   28380:	ldr	r0, [sp, #240]	; 0xf0
   28384:	bl	117c0 <free@plt>
   28388:	ldr	ip, [sp, #128]	; 0x80
   2838c:	cmp	ip, #0
   28390:	beq	286cc <__assert_fail@plt+0x16aec>
   28394:	ldr	r5, [sp, #80]	; 0x50
   28398:	ldr	r2, [sp, #340]	; 0x154
   2839c:	ldr	r4, [sp, #252]	; 0xfc
   283a0:	ldr	r3, [r5]
   283a4:	cmp	r4, #0
   283a8:	rsb	r3, r3, r2
   283ac:	mov	r8, r3
   283b0:	asr	r9, r3, #31
   283b4:	strd	r8, [sp, #32]
   283b8:	ble	2851c <__assert_fail@plt+0x1693c>
   283bc:	add	r6, r4, ip
   283c0:	ldr	sl, [sp, #180]	; 0xb4
   283c4:	str	r6, [sp, #16]
   283c8:	mov	r7, ip
   283cc:	ldr	r6, [sp, #60]	; 0x3c
   283d0:	mov	r8, #0
   283d4:	mov	fp, #0
   283d8:	str	r8, [sp, #8]
   283dc:	strd	sl, [sp, #64]	; 0x40
   283e0:	ldrb	r3, [r7], #1
   283e4:	cmp	r3, #0
   283e8:	bne	28500 <__assert_fail@plt+0x16920>
   283ec:	ldrd	r4, [sp, #32]
   283f0:	ldr	r3, [sp, #8]
   283f4:	ldr	ip, [sp, #80]	; 0x50
   283f8:	adds	r4, r4, r3
   283fc:	ldrd	r2, [sp, #64]	; 0x40
   28400:	adc	r5, r5, #0
   28404:	ldrd	r0, [ip, #8]
   28408:	adds	r2, r2, r4
   2840c:	adc	r3, r3, r5
   28410:	cmp	r3, r1
   28414:	cmpeq	r2, r0
   28418:	bcs	27e1c <__assert_fail@plt+0x1623c>
   2841c:	ldr	r5, [ip]
   28420:	add	r2, r5, r2
   28424:	str	r2, [sp, #4]
   28428:	mov	r0, r2
   2842c:	bl	119a0 <strlen@plt>
   28430:	ldr	ip, [sp, #80]	; 0x50
   28434:	ldr	r2, [sp, #4]
   28438:	mov	r3, r0
   2843c:	ldr	r0, [ip, #16]
   28440:	add	ip, r5, r4
   28444:	tst	r0, #16
   28448:	bne	28544 <__assert_fail@plt+0x16964>
   2844c:	ldr	r4, [sp, #180]	; 0xb4
   28450:	cmp	r4, #0
   28454:	beq	286a0 <__assert_fail@plt+0x16ac0>
   28458:	ldr	r4, [sp, #180]	; 0xb4
   2845c:	mov	r0, #0
   28460:	mov	r1, #0
   28464:	mov	lr, #1
   28468:	add	ip, ip, r4
   2846c:	lsl	r9, r1, #8
   28470:	add	lr, lr, #1
   28474:	orr	r9, r9, r0, lsr #24
   28478:	lsl	r8, r0, #8
   2847c:	cmp	r4, lr
   28480:	ldrb	r0, [ip, #-1]!
   28484:	mov	r1, #0
   28488:	orr	r1, r1, r9
   2848c:	orr	r0, r0, r8
   28490:	bcs	2846c <__assert_fail@plt+0x1688c>
   28494:	mov	lr, r1
   28498:	ldr	ip, [sp, #28]
   2849c:	ldr	r1, [sp, #56]	; 0x38
   284a0:	lsl	r5, ip, #4
   284a4:	mov	ip, #4
   284a8:	add	r4, r1, r5
   284ac:	mov	r1, r2
   284b0:	ldr	r2, [sp, #56]	; 0x38
   284b4:	add	r4, r4, ip
   284b8:	add	ip, r2, r5
   284bc:	str	r0, [r2, r5]
   284c0:	mov	r2, r3
   284c4:	ldr	r5, [sp, #28]
   284c8:	mov	r0, r6
   284cc:	str	lr, [r4]
   284d0:	mov	r4, #85	; 0x55
   284d4:	str	r6, [ip, #12]
   284d8:	add	r5, r5, #1
   284dc:	str	r4, [ip, #8]
   284e0:	str	r5, [sp, #28]
   284e4:	str	r3, [sp, #4]
   284e8:	bl	117e4 <memcpy@plt>
   284ec:	ldr	r3, [sp, #4]
   284f0:	mov	ip, #0
   284f4:	add	r2, r3, #1
   284f8:	strb	ip, [r6, r3]
   284fc:	add	r6, r6, r2
   28500:	ldr	r3, [sp, #16]
   28504:	ldr	r4, [sp, #8]
   28508:	ldr	r5, [sp, #120]	; 0x78
   2850c:	cmp	r7, r3
   28510:	add	r4, r4, r5
   28514:	str	r4, [sp, #8]
   28518:	bne	283e0 <__assert_fail@plt+0x16800>
   2851c:	ldr	r0, [sp, #128]	; 0x80
   28520:	bl	117c0 <free@plt>
   28524:	ldr	r0, [sp, #28]
   28528:	ldr	r6, [sp, #244]	; 0xf4
   2852c:	ldr	r2, [sp, #380]	; 0x17c
   28530:	ldr	r3, [r6]
   28534:	cmp	r2, r3
   28538:	bne	2870c <__assert_fail@plt+0x16b2c>
   2853c:	add	sp, sp, #388	; 0x184
   28540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28544:	ldr	r5, [sp, #180]	; 0xb4
   28548:	cmp	r5, #0
   2854c:	beq	286a0 <__assert_fail@plt+0x16ac0>
   28550:	ldr	r0, [sp, #180]	; 0xb4
   28554:	mov	r4, #0
   28558:	mov	r5, #0
   2855c:	add	lr, ip, r0
   28560:	ldrb	r0, [ip], #1
   28564:	lsl	fp, r5, #8
   28568:	orr	fp, fp, r4, lsr #24
   2856c:	lsl	sl, r4, #8
   28570:	cmp	ip, lr
   28574:	mov	r1, #0
   28578:	orr	r4, r0, sl
   2857c:	orr	r5, r1, fp
   28580:	bne	28560 <__assert_fail@plt+0x16980>
   28584:	mov	r0, r4
   28588:	mov	lr, r5
   2858c:	b	28498 <__assert_fail@plt+0x168b8>
   28590:	ldr	r0, [sp, #128]	; 0x80
   28594:	bl	117c0 <free@plt>
   28598:	ldr	r0, [sp, #240]	; 0xf0
   2859c:	bl	117c0 <free@plt>
   285a0:	mvn	r0, #21
   285a4:	b	28528 <__assert_fail@plt+0x16948>
   285a8:	ldr	r2, [sp, #248]	; 0xf8
   285ac:	mov	r3, #0
   285b0:	mov	r1, #1
   285b4:	strd	r6, [sp, #48]	; 0x30
   285b8:	add	r0, lr, r2
   285bc:	ldr	lr, [sp, #248]	; 0xf8
   285c0:	mov	r2, #0
   285c4:	str	ip, [sp, #72]	; 0x48
   285c8:	lsl	r7, r3, #8
   285cc:	add	r1, r1, #1
   285d0:	orr	r7, r7, r2, lsr #24
   285d4:	lsl	r6, r2, #8
   285d8:	cmp	lr, r1
   285dc:	ldrb	r2, [r0, #-1]!
   285e0:	mov	r3, #0
   285e4:	orr	r3, r3, r7
   285e8:	orr	r2, r2, r6
   285ec:	bcs	285c8 <__assert_fail@plt+0x169e8>
   285f0:	add	lr, sp, #512	; 0x200
   285f4:	ldr	ip, [sp, #72]	; 0x48
   285f8:	strd	r6, [lr, #-200]	; 0xffffff38
   285fc:	ldrd	r6, [sp, #48]	; 0x30
   28600:	b	281a4 <__assert_fail@plt+0x165c4>
   28604:	add	r0, sp, #512	; 0x200
   28608:	mov	r1, #0
   2860c:	mov	r2, #0
   28610:	mov	r3, #0
   28614:	str	r1, [sp, #180]	; 0xb4
   28618:	str	r1, [sp, #340]	; 0x154
   2861c:	str	r1, [sp, #120]	; 0x78
   28620:	strd	r2, [r0, #-160]	; 0xffffff60
   28624:	b	27720 <__assert_fail@plt+0x15b40>
   28628:	ldr	r0, [sp, #128]	; 0x80
   2862c:	bl	117c0 <free@plt>
   28630:	ldr	r0, [sp, #240]	; 0xf0
   28634:	bl	117c0 <free@plt>
   28638:	ldr	r4, [sp, #40]	; 0x28
   2863c:	ldr	r5, [sp, #268]	; 0x10c
   28640:	mov	r0, r4
   28644:	str	r4, [r5]
   28648:	b	28528 <__assert_fail@plt+0x16948>
   2864c:	ldr	r5, [sp, #16]
   28650:	mov	ip, r6
   28654:	mov	r2, #0
   28658:	mov	r3, #0
   2865c:	ldr	r9, [sp, #164]	; 0xa4
   28660:	ldrd	sl, [sp, #48]	; 0x30
   28664:	ldr	r8, [sp, #176]	; 0xb0
   28668:	ldrd	r6, [sp, #168]	; 0xa8
   2866c:	strd	r2, [r5, #8]
   28670:	b	27b4c <__assert_fail@plt+0x15f6c>
   28674:	andeq	r7, r1, r0, ror r9
   28678:	andeq	r0, r0, ip, lsr #3
   2867c:	muleq	r0, ip, r0
   28680:	muleq	r0, r0, r6
   28684:	andeq	r6, r0, r8, ror r6
   28688:	strdeq	r5, [r0], -r0
   2868c:	andeq	r5, r0, r0, lsl #30
   28690:	ldrdeq	r5, [r0], -ip
   28694:			; <UNDEFINED> instruction: 0x000056bc
   28698:	andeq	r5, r0, r0, ror r6
   2869c:	andeq	r5, r0, r0, lsr r6
   286a0:	mov	r0, #0
   286a4:	mov	lr, r0
   286a8:	b	28498 <__assert_fail@plt+0x168b8>
   286ac:	ldr	r0, [pc, #-32]	; 28694 <__assert_fail@plt+0x16ab4>
   286b0:	mov	r2, #137	; 0x89
   286b4:	ldr	r1, [pc, #-36]	; 28698 <__assert_fail@plt+0x16ab8>
   286b8:	ldr	r3, [pc, #-36]	; 2869c <__assert_fail@plt+0x16abc>
   286bc:	add	r0, pc, r0
   286c0:	add	r1, pc, r1
   286c4:	add	r3, pc, r3
   286c8:	bl	11be0 <__assert_fail@plt>
   286cc:	ldr	r0, [sp, #28]
   286d0:	b	28528 <__assert_fail@plt+0x16948>
   286d4:	ldr	r0, [sp, #128]	; 0x80
   286d8:	bl	117c0 <free@plt>
   286dc:	ldr	r0, [sp, #240]	; 0xf0
   286e0:	bl	117c0 <free@plt>
   286e4:	bl	119f4 <__errno_location@plt>
   286e8:	ldr	r0, [r0]
   286ec:	rsb	r0, r0, #0
   286f0:	b	28528 <__assert_fail@plt+0x16948>
   286f4:	mvn	r0, #11
   286f8:	b	28528 <__assert_fail@plt+0x16948>
   286fc:	ldr	r0, [sp, #128]	; 0x80
   28700:	bl	117c0 <free@plt>
   28704:	mvn	r0, #11
   28708:	b	28528 <__assert_fail@plt+0x16948>
   2870c:	bl	11838 <__stack_chk_fail@plt>
   28710:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   28714:	mov	r6, r0
   28718:	mov	r8, r1
   2871c:	bl	24478 <__assert_fail@plt+0x12898>
   28720:	mov	r4, r0
   28724:	mov	r0, r6
   28728:	mov	r5, r1
   2872c:	bl	24470 <__assert_fail@plt+0x12890>
   28730:	cmp	r4, #28
   28734:	sbcs	r3, r5, #0
   28738:	mov	r9, r0
   2873c:	blt	28850 <__assert_fail@plt+0x16c70>
   28740:	ldr	r0, [pc, #272]	; 28858 <__assert_fail@plt+0x16c78>
   28744:	subs	r6, r4, #28
   28748:	add	r1, r9, r6
   2874c:	mov	r2, #28
   28750:	add	r0, pc, r0
   28754:	sbc	r7, r5, #0
   28758:	bl	11820 <memcmp@plt>
   2875c:	cmp	r0, #0
   28760:	bne	28850 <__assert_fail@plt+0x16c70>
   28764:	cmp	r6, #12
   28768:	sbcs	r3, r7, #0
   2876c:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   28770:	subs	r4, r4, #40	; 0x28
   28774:	add	r1, r9, r4
   28778:	sbc	r5, r5, #0
   2877c:	ldrb	r3, [r1]
   28780:	cmp	r3, #1
   28784:	pophi	{r3, r4, r5, r6, r7, r8, r9, pc}
   28788:	ldrb	r3, [r1, #1]
   2878c:	cmp	r3, #7
   28790:	pophi	{r3, r4, r5, r6, r7, r8, r9, pc}
   28794:	ldrb	r3, [r1, #2]
   28798:	cmp	r3, #1
   2879c:	pophi	{r3, r4, r5, r6, r7, r8, r9, pc}
   287a0:	ldr	ip, [r1, #8]
   287a4:	rev	ip, ip
   287a8:	cmp	ip, #0
   287ac:	beq	28850 <__assert_fail@plt+0x16c70>
   287b0:	ldrb	r6, [r1, #4]
   287b4:	mov	r3, #0
   287b8:	ldrb	r2, [r1, #3]
   287bc:	add	r2, r2, r6
   287c0:	add	r2, ip, r2
   287c4:	cmp	r4, r2
   287c8:	sbcs	r7, r5, r3
   287cc:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   287d0:	add	ip, ip, r6
   287d4:	ldr	r7, [pc, #128]	; 2885c <__assert_fail@plt+0x16c7c>
   287d8:	subs	r4, r4, ip
   287dc:	sbc	r5, r5, #0
   287e0:	ldr	r6, [pc, #120]	; 28860 <__assert_fail@plt+0x16c80>
   287e4:	add	r3, r9, r4
   287e8:	str	r3, [r8, #8]
   287ec:	ldrb	r3, [r1, #4]
   287f0:	add	r7, pc, r7
   287f4:	add	r6, pc, r6
   287f8:	ldr	ip, [pc, #100]	; 28864 <__assert_fail@plt+0x16c84>
   287fc:	mov	r0, #1
   28800:	str	r3, [r8, #12]
   28804:	mov	r3, #0
   28808:	ldrb	r2, [r1, #3]
   2880c:	add	ip, pc, ip
   28810:	subs	r4, r4, r2
   28814:	sbc	r5, r5, r3
   28818:	add	r4, r9, r4
   2881c:	str	r4, [r8]
   28820:	ldrb	r3, [r1, #3]
   28824:	str	r3, [r8, #4]
   28828:	ldrb	r3, [r1]
   2882c:	ldr	r3, [r7, r3, lsl #2]
   28830:	str	r3, [r8, #16]
   28834:	ldrb	r2, [r1, #1]
   28838:	ldr	r3, [r6, r2, lsl #2]
   2883c:	str	r3, [r8, #20]
   28840:	ldrb	r2, [r1, #2]
   28844:	ldr	r3, [ip, r2, lsl #2]
   28848:	str	r3, [r8, #24]
   2884c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   28850:	mov	r0, #0
   28854:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   28858:	andeq	r5, r0, ip, lsr #13
   2885c:	strdeq	r6, [r1], -r0
   28860:	andeq	r6, r1, ip, asr #13
   28864:	ldrdeq	r6, [r1], -ip
   28868:	tst	r2, #127	; 0x7f
   2886c:	push	{r4, r5, r6, lr}
   28870:	mov	r4, r2
   28874:	bicne	r4, r2, #127	; 0x7f
   28878:	mov	r5, r0
   2887c:	addne	r4, r4, #128	; 0x80
   28880:	mov	r6, r1
   28884:	ldr	r0, [r0]
   28888:	mov	r1, r4
   2888c:	bl	11844 <realloc@plt>
   28890:	rsbs	r3, r0, #1
   28894:	movcc	r3, #0
   28898:	cmp	r4, #0
   2889c:	moveq	r3, #0
   288a0:	cmp	r3, #0
   288a4:	streq	r0, [r5]
   288a8:	moveq	r0, #1
   288ac:	streq	r4, [r6]
   288b0:	movne	r0, #0
   288b4:	pop	{r4, r5, r6, pc}
   288b8:	mov	r3, #0
   288bc:	str	r3, [r0]
   288c0:	str	r3, [r0, #4]
   288c4:	str	r3, [r0, #8]
   288c8:	bx	lr
   288cc:	ldr	r0, [r0]
   288d0:	b	117c0 <free@plt>
   288d4:	ldr	r1, [r0, #8]
   288d8:	push	{r3, r4, r5, lr}
   288dc:	add	r1, r1, #1
   288e0:	mov	r4, r0
   288e4:	ldr	r0, [r0]
   288e8:	bl	11844 <realloc@plt>
   288ec:	subs	r5, r0, #0
   288f0:	beq	28908 <__assert_fail@plt+0x16d28>
   288f4:	ldr	r3, [r4, #8]
   288f8:	mov	r2, #0
   288fc:	strb	r2, [r5, r3]
   28900:	mov	r0, r5
   28904:	pop	{r3, r4, r5, pc}
   28908:	ldr	r0, [r4]
   2890c:	bl	117c0 <free@plt>
   28910:	b	28900 <__assert_fail@plt+0x16d20>
   28914:	ldmib	r0, {r1, r3}
   28918:	push	{r4, lr}
   2891c:	add	r2, r3, #1
   28920:	cmp	r2, r1
   28924:	mov	r4, r0
   28928:	bhi	28940 <__assert_fail@plt+0x16d60>
   2892c:	ldr	r2, [r4]
   28930:	mov	r1, #0
   28934:	strb	r1, [r2, r3]
   28938:	ldr	r0, [r4]
   2893c:	pop	{r4, pc}
   28940:	add	r1, r0, #4
   28944:	bl	28868 <__assert_fail@plt+0x16c88>
   28948:	cmp	r0, #0
   2894c:	popeq	{r4, pc}
   28950:	ldr	r3, [r4, #8]
   28954:	b	2892c <__assert_fail@plt+0x16d4c>
   28958:	push	{r3, r4, r5, lr}
   2895c:	mov	r4, r0
   28960:	ldr	r3, [r0, #8]
   28964:	mov	r5, r1
   28968:	ldr	ip, [r0, #4]
   2896c:	add	r2, r3, #1
   28970:	cmp	r2, ip
   28974:	bhi	28994 <__assert_fail@plt+0x16db4>
   28978:	ldr	r2, [r4]
   2897c:	mov	r0, #1
   28980:	strb	r5, [r2, r3]
   28984:	ldr	r3, [r4, #8]
   28988:	add	r3, r3, r0
   2898c:	str	r3, [r4, #8]
   28990:	pop	{r3, r4, r5, pc}
   28994:	add	r1, r0, #4
   28998:	bl	28868 <__assert_fail@plt+0x16c88>
   2899c:	cmp	r0, #0
   289a0:	popeq	{r3, r4, r5, pc}
   289a4:	ldr	r3, [r4, #8]
   289a8:	b	28978 <__assert_fail@plt+0x16d98>
   289ac:	push	{r4, r5, r6, lr}
   289b0:	subs	r6, r1, #0
   289b4:	mov	r4, r0
   289b8:	beq	28a44 <__assert_fail@plt+0x16e64>
   289bc:	cmp	r0, #0
   289c0:	beq	28a24 <__assert_fail@plt+0x16e44>
   289c4:	mov	r0, r6
   289c8:	bl	119a0 <strlen@plt>
   289cc:	ldmib	r4, {r1, r3}
   289d0:	add	r2, r0, r3
   289d4:	mov	r5, r0
   289d8:	cmp	r2, r1
   289dc:	bhi	28a08 <__assert_fail@plt+0x16e28>
   289e0:	ldr	r0, [r4]
   289e4:	mov	r2, r5
   289e8:	mov	r1, r6
   289ec:	add	r0, r0, r3
   289f0:	bl	117e4 <memcpy@plt>
   289f4:	ldr	r3, [r4, #8]
   289f8:	mov	r0, r5
   289fc:	add	r5, r3, r5
   28a00:	str	r5, [r4, #8]
   28a04:	pop	{r4, r5, r6, pc}
   28a08:	mov	r0, r4
   28a0c:	add	r1, r4, #4
   28a10:	bl	28868 <__assert_fail@plt+0x16c88>
   28a14:	cmp	r0, #0
   28a18:	popeq	{r4, r5, r6, pc}
   28a1c:	ldr	r3, [r4, #8]
   28a20:	b	289e0 <__assert_fail@plt+0x16e00>
   28a24:	ldr	r0, [pc, #56]	; 28a64 <__assert_fail@plt+0x16e84>
   28a28:	mov	r2, #99	; 0x63
   28a2c:	ldr	r1, [pc, #52]	; 28a68 <__assert_fail@plt+0x16e88>
   28a30:	ldr	r3, [pc, #52]	; 28a6c <__assert_fail@plt+0x16e8c>
   28a34:	add	r0, pc, r0
   28a38:	add	r1, pc, r1
   28a3c:	add	r3, pc, r3
   28a40:	bl	11be0 <__assert_fail@plt>
   28a44:	ldr	r0, [pc, #36]	; 28a70 <__assert_fail@plt+0x16e90>
   28a48:	mov	r2, #98	; 0x62
   28a4c:	ldr	r1, [pc, #32]	; 28a74 <__assert_fail@plt+0x16e94>
   28a50:	ldr	r3, [pc, #32]	; 28a78 <__assert_fail@plt+0x16e98>
   28a54:	add	r0, pc, r0
   28a58:	add	r1, pc, r1
   28a5c:	add	r3, pc, r3
   28a60:	bl	11be0 <__assert_fail@plt>
   28a64:	andeq	r5, r0, r8, asr r4
   28a68:	andeq	r5, r0, r4, asr #8
   28a6c:	andeq	r5, r0, r4, lsl #9
   28a70:	andeq	r5, r0, r4, lsl r4
   28a74:	andeq	r5, r0, r4, lsr #8
   28a78:	andeq	r5, r0, r4, ror #8
   28a7c:	push	{r3, lr}
   28a80:	ldr	r3, [r0, #8]
   28a84:	cmp	r3, #0
   28a88:	subne	r3, r3, #1
   28a8c:	strne	r3, [r0, #8]
   28a90:	popne	{r3, pc}
   28a94:	ldr	r0, [pc, #24]	; 28ab4 <__assert_fail@plt+0x16ed4>
   28a98:	mov	r2, #114	; 0x72
   28a9c:	ldr	r1, [pc, #20]	; 28ab8 <__assert_fail@plt+0x16ed8>
   28aa0:	ldr	r3, [pc, #20]	; 28abc <__assert_fail@plt+0x16edc>
   28aa4:	add	r0, pc, r0
   28aa8:	add	r1, pc, r1
   28aac:	add	r3, pc, r3
   28ab0:	bl	11be0 <__assert_fail@plt>
   28ab4:	strdeq	r5, [r0], -ip
   28ab8:	ldrdeq	r5, [r0], -r4
   28abc:	andeq	r5, r0, r8, lsr #8
   28ac0:	push	{r3, lr}
   28ac4:	ldr	r3, [r0, #8]
   28ac8:	cmp	r3, r1
   28acc:	rsbcs	r1, r1, r3
   28ad0:	strcs	r1, [r0, #8]
   28ad4:	popcs	{r3, pc}
   28ad8:	ldr	r0, [pc, #24]	; 28af8 <__assert_fail@plt+0x16f18>
   28adc:	mov	r2, #120	; 0x78
   28ae0:	ldr	r1, [pc, #20]	; 28afc <__assert_fail@plt+0x16f1c>
   28ae4:	ldr	r3, [pc, #20]	; 28b00 <__assert_fail@plt+0x16f20>
   28ae8:	add	r0, pc, r0
   28aec:	add	r1, pc, r1
   28af0:	add	r3, pc, r3
   28af4:	bl	11be0 <__assert_fail@plt>
   28af8:	andeq	r5, r0, r8, asr #7
   28afc:	muleq	r0, r0, r3
   28b00:	strdeq	r5, [r0], -r4
   28b04:	mov	r3, #0
   28b08:	str	r3, [r0, #8]
   28b0c:	bx	lr
   28b10:	subs	r2, r1, #1
   28b14:	bxeq	lr
   28b18:	bcc	28cf0 <__assert_fail@plt+0x17110>
   28b1c:	cmp	r0, r1
   28b20:	bls	28cd4 <__assert_fail@plt+0x170f4>
   28b24:	tst	r1, r2
   28b28:	beq	28ce0 <__assert_fail@plt+0x17100>
   28b2c:	clz	r3, r0
   28b30:	clz	r2, r1
   28b34:	sub	r3, r2, r3
   28b38:	rsbs	r3, r3, #31
   28b3c:	addne	r3, r3, r3, lsl #1
   28b40:	mov	r2, #0
   28b44:	addne	pc, pc, r3, lsl #2
   28b48:	nop	{0}
   28b4c:	cmp	r0, r1, lsl #31
   28b50:	adc	r2, r2, r2
   28b54:	subcs	r0, r0, r1, lsl #31
   28b58:	cmp	r0, r1, lsl #30
   28b5c:	adc	r2, r2, r2
   28b60:	subcs	r0, r0, r1, lsl #30
   28b64:	cmp	r0, r1, lsl #29
   28b68:	adc	r2, r2, r2
   28b6c:	subcs	r0, r0, r1, lsl #29
   28b70:	cmp	r0, r1, lsl #28
   28b74:	adc	r2, r2, r2
   28b78:	subcs	r0, r0, r1, lsl #28
   28b7c:	cmp	r0, r1, lsl #27
   28b80:	adc	r2, r2, r2
   28b84:	subcs	r0, r0, r1, lsl #27
   28b88:	cmp	r0, r1, lsl #26
   28b8c:	adc	r2, r2, r2
   28b90:	subcs	r0, r0, r1, lsl #26
   28b94:	cmp	r0, r1, lsl #25
   28b98:	adc	r2, r2, r2
   28b9c:	subcs	r0, r0, r1, lsl #25
   28ba0:	cmp	r0, r1, lsl #24
   28ba4:	adc	r2, r2, r2
   28ba8:	subcs	r0, r0, r1, lsl #24
   28bac:	cmp	r0, r1, lsl #23
   28bb0:	adc	r2, r2, r2
   28bb4:	subcs	r0, r0, r1, lsl #23
   28bb8:	cmp	r0, r1, lsl #22
   28bbc:	adc	r2, r2, r2
   28bc0:	subcs	r0, r0, r1, lsl #22
   28bc4:	cmp	r0, r1, lsl #21
   28bc8:	adc	r2, r2, r2
   28bcc:	subcs	r0, r0, r1, lsl #21
   28bd0:	cmp	r0, r1, lsl #20
   28bd4:	adc	r2, r2, r2
   28bd8:	subcs	r0, r0, r1, lsl #20
   28bdc:	cmp	r0, r1, lsl #19
   28be0:	adc	r2, r2, r2
   28be4:	subcs	r0, r0, r1, lsl #19
   28be8:	cmp	r0, r1, lsl #18
   28bec:	adc	r2, r2, r2
   28bf0:	subcs	r0, r0, r1, lsl #18
   28bf4:	cmp	r0, r1, lsl #17
   28bf8:	adc	r2, r2, r2
   28bfc:	subcs	r0, r0, r1, lsl #17
   28c00:	cmp	r0, r1, lsl #16
   28c04:	adc	r2, r2, r2
   28c08:	subcs	r0, r0, r1, lsl #16
   28c0c:	cmp	r0, r1, lsl #15
   28c10:	adc	r2, r2, r2
   28c14:	subcs	r0, r0, r1, lsl #15
   28c18:	cmp	r0, r1, lsl #14
   28c1c:	adc	r2, r2, r2
   28c20:	subcs	r0, r0, r1, lsl #14
   28c24:	cmp	r0, r1, lsl #13
   28c28:	adc	r2, r2, r2
   28c2c:	subcs	r0, r0, r1, lsl #13
   28c30:	cmp	r0, r1, lsl #12
   28c34:	adc	r2, r2, r2
   28c38:	subcs	r0, r0, r1, lsl #12
   28c3c:	cmp	r0, r1, lsl #11
   28c40:	adc	r2, r2, r2
   28c44:	subcs	r0, r0, r1, lsl #11
   28c48:	cmp	r0, r1, lsl #10
   28c4c:	adc	r2, r2, r2
   28c50:	subcs	r0, r0, r1, lsl #10
   28c54:	cmp	r0, r1, lsl #9
   28c58:	adc	r2, r2, r2
   28c5c:	subcs	r0, r0, r1, lsl #9
   28c60:	cmp	r0, r1, lsl #8
   28c64:	adc	r2, r2, r2
   28c68:	subcs	r0, r0, r1, lsl #8
   28c6c:	cmp	r0, r1, lsl #7
   28c70:	adc	r2, r2, r2
   28c74:	subcs	r0, r0, r1, lsl #7
   28c78:	cmp	r0, r1, lsl #6
   28c7c:	adc	r2, r2, r2
   28c80:	subcs	r0, r0, r1, lsl #6
   28c84:	cmp	r0, r1, lsl #5
   28c88:	adc	r2, r2, r2
   28c8c:	subcs	r0, r0, r1, lsl #5
   28c90:	cmp	r0, r1, lsl #4
   28c94:	adc	r2, r2, r2
   28c98:	subcs	r0, r0, r1, lsl #4
   28c9c:	cmp	r0, r1, lsl #3
   28ca0:	adc	r2, r2, r2
   28ca4:	subcs	r0, r0, r1, lsl #3
   28ca8:	cmp	r0, r1, lsl #2
   28cac:	adc	r2, r2, r2
   28cb0:	subcs	r0, r0, r1, lsl #2
   28cb4:	cmp	r0, r1, lsl #1
   28cb8:	adc	r2, r2, r2
   28cbc:	subcs	r0, r0, r1, lsl #1
   28cc0:	cmp	r0, r1
   28cc4:	adc	r2, r2, r2
   28cc8:	subcs	r0, r0, r1
   28ccc:	mov	r0, r2
   28cd0:	bx	lr
   28cd4:	moveq	r0, #1
   28cd8:	movne	r0, #0
   28cdc:	bx	lr
   28ce0:	clz	r2, r1
   28ce4:	rsb	r2, r2, #31
   28ce8:	lsr	r0, r0, r2
   28cec:	bx	lr
   28cf0:	cmp	r0, #0
   28cf4:	mvnne	r0, #0
   28cf8:	b	28d58 <__assert_fail@plt+0x17178>
   28cfc:	cmp	r1, #0
   28d00:	beq	28cf0 <__assert_fail@plt+0x17110>
   28d04:	push	{r0, r1, lr}
   28d08:	bl	28b10 <__assert_fail@plt+0x16f30>
   28d0c:	pop	{r1, r2, lr}
   28d10:	mul	r3, r2, r0
   28d14:	sub	r1, r1, r3
   28d18:	bx	lr
   28d1c:	cmp	r3, #0
   28d20:	cmpeq	r2, #0
   28d24:	bne	28d3c <__assert_fail@plt+0x1715c>
   28d28:	cmp	r1, #0
   28d2c:	cmpeq	r0, #0
   28d30:	mvnne	r1, #0
   28d34:	mvnne	r0, #0
   28d38:	b	28d58 <__assert_fail@plt+0x17178>
   28d3c:	sub	sp, sp, #8
   28d40:	push	{sp, lr}
   28d44:	bl	28da4 <__assert_fail@plt+0x171c4>
   28d48:	ldr	lr, [sp, #4]
   28d4c:	add	sp, sp, #8
   28d50:	pop	{r2, r3}
   28d54:	bx	lr
   28d58:	push	{r1, lr}
   28d5c:	mov	r0, #8
   28d60:	bl	11730 <raise@plt>
   28d64:	pop	{r1, pc}
   28d68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28d6c:	mov	r8, r2
   28d70:	mov	r6, r0
   28d74:	mov	r7, r1
   28d78:	mov	sl, r3
   28d7c:	ldr	r9, [sp, #32]
   28d80:	bl	28de0 <__assert_fail@plt+0x17200>
   28d84:	umull	r4, r5, r8, r0
   28d88:	mul	r8, r8, r1
   28d8c:	mla	r2, r0, sl, r8
   28d90:	add	r5, r2, r5
   28d94:	subs	r4, r6, r4
   28d98:	sbc	r5, r7, r5
   28d9c:	strd	r4, [r9]
   28da0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28da4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   28da8:	mov	r8, r2
   28dac:	mov	r6, r0
   28db0:	mov	r7, r1
   28db4:	mov	r5, r3
   28db8:	ldr	r9, [sp, #32]
   28dbc:	bl	2926c <__assert_fail@plt+0x1768c>
   28dc0:	mul	r3, r0, r5
   28dc4:	umull	r4, r5, r0, r8
   28dc8:	mla	r8, r8, r1, r3
   28dcc:	add	r5, r8, r5
   28dd0:	subs	r4, r6, r4
   28dd4:	sbc	r5, r7, r5
   28dd8:	strd	r4, [r9]
   28ddc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   28de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28de4:	rsbs	r4, r0, #0
   28de8:	rsc	r5, r1, #0
   28dec:	cmp	r1, #0
   28df0:	mvn	r6, #0
   28df4:	sub	sp, sp, #12
   28df8:	movge	r4, r0
   28dfc:	movge	r5, r1
   28e00:	movge	r6, #0
   28e04:	cmp	r3, #0
   28e08:	blt	29040 <__assert_fail@plt+0x17460>
   28e0c:	cmp	r3, #0
   28e10:	mov	sl, r4
   28e14:	mov	ip, r5
   28e18:	mov	r0, r2
   28e1c:	mov	r1, r3
   28e20:	mov	r8, r2
   28e24:	mov	r7, r4
   28e28:	mov	r9, r5
   28e2c:	bne	28f24 <__assert_fail@plt+0x17344>
   28e30:	cmp	r2, r5
   28e34:	bls	28f60 <__assert_fail@plt+0x17380>
   28e38:	clz	r3, r2
   28e3c:	cmp	r3, #0
   28e40:	rsbne	r2, r3, #32
   28e44:	lslne	r8, r0, r3
   28e48:	lsrne	r2, r4, r2
   28e4c:	lslne	r7, r4, r3
   28e50:	orrne	r9, r2, r5, lsl r3
   28e54:	lsr	r4, r8, #16
   28e58:	uxth	sl, r8
   28e5c:	mov	r1, r4
   28e60:	mov	r0, r9
   28e64:	bl	28b10 <__assert_fail@plt+0x16f30>
   28e68:	mov	r1, r4
   28e6c:	mov	fp, r0
   28e70:	mov	r0, r9
   28e74:	bl	28cfc <__assert_fail@plt+0x1711c>
   28e78:	mul	r0, sl, fp
   28e7c:	lsr	r2, r7, #16
   28e80:	orr	r1, r2, r1, lsl #16
   28e84:	cmp	r0, r1
   28e88:	bls	28eac <__assert_fail@plt+0x172cc>
   28e8c:	adds	r1, r1, r8
   28e90:	sub	r3, fp, #1
   28e94:	bcs	28ea8 <__assert_fail@plt+0x172c8>
   28e98:	cmp	r0, r1
   28e9c:	subhi	fp, fp, #2
   28ea0:	addhi	r1, r1, r8
   28ea4:	bhi	28eac <__assert_fail@plt+0x172cc>
   28ea8:	mov	fp, r3
   28eac:	rsb	r9, r0, r1
   28eb0:	mov	r1, r4
   28eb4:	uxth	r7, r7
   28eb8:	mov	r0, r9
   28ebc:	bl	28b10 <__assert_fail@plt+0x16f30>
   28ec0:	mov	r1, r4
   28ec4:	mov	r5, r0
   28ec8:	mov	r0, r9
   28ecc:	bl	28cfc <__assert_fail@plt+0x1711c>
   28ed0:	mul	sl, sl, r5
   28ed4:	orr	r1, r7, r1, lsl #16
   28ed8:	cmp	sl, r1
   28edc:	bls	28efc <__assert_fail@plt+0x1731c>
   28ee0:	adds	r8, r1, r8
   28ee4:	sub	r3, r5, #1
   28ee8:	bcs	28ef8 <__assert_fail@plt+0x17318>
   28eec:	cmp	sl, r8
   28ef0:	subhi	r5, r5, #2
   28ef4:	bhi	28efc <__assert_fail@plt+0x1731c>
   28ef8:	mov	r5, r3
   28efc:	orr	r3, r5, fp, lsl #16
   28f00:	mov	r4, #0
   28f04:	cmp	r6, #0
   28f08:	mov	r0, r3
   28f0c:	mov	r1, r4
   28f10:	beq	28f1c <__assert_fail@plt+0x1733c>
   28f14:	rsbs	r0, r0, #0
   28f18:	rsc	r1, r1, #0
   28f1c:	add	sp, sp, #12
   28f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f24:	cmp	r3, r5
   28f28:	movhi	r4, #0
   28f2c:	movhi	r3, r4
   28f30:	bhi	28f04 <__assert_fail@plt+0x17324>
   28f34:	clz	r5, r1
   28f38:	cmp	r5, #0
   28f3c:	bne	2912c <__assert_fail@plt+0x1754c>
   28f40:	cmp	r1, ip
   28f44:	cmpcs	r2, sl
   28f48:	movhi	r4, #0
   28f4c:	movls	r4, #1
   28f50:	movls	r3, #1
   28f54:	movls	r4, r5
   28f58:	movhi	r3, r4
   28f5c:	b	28f04 <__assert_fail@plt+0x17324>
   28f60:	cmp	r2, #0
   28f64:	bne	28f78 <__assert_fail@plt+0x17398>
   28f68:	mov	r1, r2
   28f6c:	mov	r0, #1
   28f70:	bl	28b10 <__assert_fail@plt+0x16f30>
   28f74:	mov	r8, r0
   28f78:	clz	r3, r8
   28f7c:	cmp	r3, #0
   28f80:	bne	29050 <__assert_fail@plt+0x17470>
   28f84:	rsb	r9, r8, r9
   28f88:	lsr	r5, r8, #16
   28f8c:	uxth	sl, r8
   28f90:	mov	r4, #1
   28f94:	mov	r1, r5
   28f98:	mov	r0, r9
   28f9c:	bl	28b10 <__assert_fail@plt+0x16f30>
   28fa0:	mov	r1, r5
   28fa4:	mov	fp, r0
   28fa8:	mov	r0, r9
   28fac:	bl	28cfc <__assert_fail@plt+0x1711c>
   28fb0:	mul	r0, sl, fp
   28fb4:	lsr	r2, r7, #16
   28fb8:	orr	r1, r2, r1, lsl #16
   28fbc:	cmp	r0, r1
   28fc0:	bls	28fe0 <__assert_fail@plt+0x17400>
   28fc4:	adds	r1, r1, r8
   28fc8:	sub	r3, fp, #1
   28fcc:	bcs	2924c <__assert_fail@plt+0x1766c>
   28fd0:	cmp	r0, r1
   28fd4:	subhi	fp, fp, #2
   28fd8:	addhi	r1, r1, r8
   28fdc:	bls	2924c <__assert_fail@plt+0x1766c>
   28fe0:	rsb	r2, r0, r1
   28fe4:	mov	r1, r5
   28fe8:	str	r2, [sp]
   28fec:	uxth	r7, r7
   28ff0:	mov	r0, r2
   28ff4:	bl	28b10 <__assert_fail@plt+0x16f30>
   28ff8:	ldr	r2, [sp]
   28ffc:	mov	r1, r5
   29000:	mov	r9, r0
   29004:	mov	r0, r2
   29008:	bl	28cfc <__assert_fail@plt+0x1711c>
   2900c:	mul	sl, sl, r9
   29010:	orr	r1, r7, r1, lsl #16
   29014:	cmp	sl, r1
   29018:	bls	29038 <__assert_fail@plt+0x17458>
   2901c:	adds	r8, r1, r8
   29020:	sub	r3, r9, #1
   29024:	bcs	29034 <__assert_fail@plt+0x17454>
   29028:	cmp	sl, r8
   2902c:	subhi	r9, r9, #2
   29030:	bhi	29038 <__assert_fail@plt+0x17458>
   29034:	mov	r9, r3
   29038:	orr	r3, r9, fp, lsl #16
   2903c:	b	28f04 <__assert_fail@plt+0x17324>
   29040:	mvn	r6, r6
   29044:	rsbs	r2, r2, #0
   29048:	rsc	r3, r3, #0
   2904c:	b	28e0c <__assert_fail@plt+0x1722c>
   29050:	lsl	r8, r8, r3
   29054:	rsb	fp, r3, #32
   29058:	lsr	r4, r9, fp
   2905c:	lsr	fp, r7, fp
   29060:	lsr	r5, r8, #16
   29064:	orr	fp, fp, r9, lsl r3
   29068:	mov	r0, r4
   2906c:	lsl	r7, r7, r3
   29070:	mov	r1, r5
   29074:	uxth	sl, r8
   29078:	bl	28b10 <__assert_fail@plt+0x16f30>
   2907c:	mov	r1, r5
   29080:	mov	r3, r0
   29084:	mov	r0, r4
   29088:	str	r3, [sp]
   2908c:	bl	28cfc <__assert_fail@plt+0x1711c>
   29090:	ldr	r3, [sp]
   29094:	lsr	r2, fp, #16
   29098:	mul	r0, sl, r3
   2909c:	orr	r1, r2, r1, lsl #16
   290a0:	cmp	r0, r1
   290a4:	bls	290c4 <__assert_fail@plt+0x174e4>
   290a8:	adds	r1, r1, r8
   290ac:	sub	r2, r3, #1
   290b0:	bcs	29264 <__assert_fail@plt+0x17684>
   290b4:	cmp	r0, r1
   290b8:	subhi	r3, r3, #2
   290bc:	addhi	r1, r1, r8
   290c0:	bls	29264 <__assert_fail@plt+0x17684>
   290c4:	rsb	r9, r0, r1
   290c8:	mov	r1, r5
   290cc:	str	r3, [sp]
   290d0:	uxth	fp, fp
   290d4:	mov	r0, r9
   290d8:	bl	28b10 <__assert_fail@plt+0x16f30>
   290dc:	mov	r1, r5
   290e0:	mov	r4, r0
   290e4:	mov	r0, r9
   290e8:	bl	28cfc <__assert_fail@plt+0x1711c>
   290ec:	mul	r9, sl, r4
   290f0:	ldr	r3, [sp]
   290f4:	orr	r1, fp, r1, lsl #16
   290f8:	cmp	r9, r1
   290fc:	bls	29120 <__assert_fail@plt+0x17540>
   29100:	adds	r1, r1, r8
   29104:	sub	r2, r4, #1
   29108:	bcs	2911c <__assert_fail@plt+0x1753c>
   2910c:	cmp	r9, r1
   29110:	subhi	r4, r4, #2
   29114:	addhi	r1, r1, r8
   29118:	bhi	29120 <__assert_fail@plt+0x17540>
   2911c:	mov	r4, r2
   29120:	rsb	r9, r9, r1
   29124:	orr	r4, r4, r3, lsl #16
   29128:	b	28f94 <__assert_fail@plt+0x173b4>
   2912c:	rsb	sl, r5, #32
   29130:	lsl	r3, r2, r5
   29134:	lsr	r0, r2, sl
   29138:	lsr	r2, ip, sl
   2913c:	orr	r4, r0, r1, lsl r5
   29140:	lsr	sl, r7, sl
   29144:	mov	r0, r2
   29148:	orr	sl, sl, ip, lsl r5
   2914c:	lsr	r9, r4, #16
   29150:	str	r3, [sp, #4]
   29154:	str	r2, [sp]
   29158:	uxth	fp, r4
   2915c:	mov	r1, r9
   29160:	bl	28b10 <__assert_fail@plt+0x16f30>
   29164:	ldr	r2, [sp]
   29168:	mov	r1, r9
   2916c:	mov	r8, r0
   29170:	mov	r0, r2
   29174:	bl	28cfc <__assert_fail@plt+0x1711c>
   29178:	mul	r0, fp, r8
   2917c:	lsr	r2, sl, #16
   29180:	orr	r1, r2, r1, lsl #16
   29184:	cmp	r0, r1
   29188:	bls	291a8 <__assert_fail@plt+0x175c8>
   2918c:	adds	r1, r1, r4
   29190:	sub	r2, r8, #1
   29194:	bcs	2925c <__assert_fail@plt+0x1767c>
   29198:	cmp	r0, r1
   2919c:	subhi	r8, r8, #2
   291a0:	addhi	r1, r1, r4
   291a4:	bls	2925c <__assert_fail@plt+0x1767c>
   291a8:	rsb	ip, r0, r1
   291ac:	mov	r1, r9
   291b0:	str	ip, [sp]
   291b4:	mov	r0, ip
   291b8:	bl	28b10 <__assert_fail@plt+0x16f30>
   291bc:	ldr	ip, [sp]
   291c0:	mov	r1, r9
   291c4:	mov	r2, r0
   291c8:	mov	r0, ip
   291cc:	str	r2, [sp]
   291d0:	bl	28cfc <__assert_fail@plt+0x1711c>
   291d4:	ldr	r2, [sp]
   291d8:	uxth	ip, sl
   291dc:	mul	fp, fp, r2
   291e0:	orr	ip, ip, r1, lsl #16
   291e4:	cmp	fp, ip
   291e8:	bls	29208 <__assert_fail@plt+0x17628>
   291ec:	adds	ip, ip, r4
   291f0:	sub	r1, r2, #1
   291f4:	bcs	29254 <__assert_fail@plt+0x17674>
   291f8:	cmp	fp, ip
   291fc:	subhi	r2, r2, #2
   29200:	addhi	ip, ip, r4
   29204:	bls	29254 <__assert_fail@plt+0x17674>
   29208:	ldr	r0, [sp, #4]
   2920c:	orr	r1, r2, r8, lsl #16
   29210:	rsb	fp, fp, ip
   29214:	umull	r2, r3, r1, r0
   29218:	cmp	fp, r3
   2921c:	bcc	29240 <__assert_fail@plt+0x17660>
   29220:	movne	r4, #0
   29224:	moveq	r4, #1
   29228:	cmp	r2, r7, lsl r5
   2922c:	movls	r4, #0
   29230:	andhi	r4, r4, #1
   29234:	cmp	r4, #0
   29238:	moveq	r3, r1
   2923c:	beq	28f04 <__assert_fail@plt+0x17324>
   29240:	sub	r3, r1, #1
   29244:	mov	r4, #0
   29248:	b	28f04 <__assert_fail@plt+0x17324>
   2924c:	mov	fp, r3
   29250:	b	28fe0 <__assert_fail@plt+0x17400>
   29254:	mov	r2, r1
   29258:	b	29208 <__assert_fail@plt+0x17628>
   2925c:	mov	r8, r2
   29260:	b	291a8 <__assert_fail@plt+0x175c8>
   29264:	mov	r3, r2
   29268:	b	290c4 <__assert_fail@plt+0x174e4>
   2926c:	cmp	r3, #0
   29270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29274:	mov	r6, r0
   29278:	sub	sp, sp, #12
   2927c:	mov	r5, r1
   29280:	mov	r7, r0
   29284:	mov	r4, r2
   29288:	mov	r8, r1
   2928c:	bne	2936c <__assert_fail@plt+0x1778c>
   29290:	cmp	r2, r1
   29294:	bls	293a8 <__assert_fail@plt+0x177c8>
   29298:	clz	r3, r2
   2929c:	cmp	r3, #0
   292a0:	rsbne	r8, r3, #32
   292a4:	lslne	r4, r2, r3
   292a8:	lsrne	r8, r0, r8
   292ac:	lslne	r7, r0, r3
   292b0:	orrne	r8, r8, r1, lsl r3
   292b4:	lsr	r5, r4, #16
   292b8:	uxth	sl, r4
   292bc:	mov	r1, r5
   292c0:	mov	r0, r8
   292c4:	bl	28b10 <__assert_fail@plt+0x16f30>
   292c8:	mov	r1, r5
   292cc:	mov	r9, r0
   292d0:	mov	r0, r8
   292d4:	bl	28cfc <__assert_fail@plt+0x1711c>
   292d8:	mul	r0, sl, r9
   292dc:	lsr	r3, r7, #16
   292e0:	orr	r1, r3, r1, lsl #16
   292e4:	cmp	r0, r1
   292e8:	bls	2930c <__assert_fail@plt+0x1772c>
   292ec:	adds	r1, r1, r4
   292f0:	sub	r2, r9, #1
   292f4:	bcs	29308 <__assert_fail@plt+0x17728>
   292f8:	cmp	r0, r1
   292fc:	subhi	r9, r9, #2
   29300:	addhi	r1, r1, r4
   29304:	bhi	2930c <__assert_fail@plt+0x1772c>
   29308:	mov	r9, r2
   2930c:	rsb	r8, r0, r1
   29310:	mov	r1, r5
   29314:	uxth	r7, r7
   29318:	mov	r0, r8
   2931c:	bl	28b10 <__assert_fail@plt+0x16f30>
   29320:	mov	r1, r5
   29324:	mov	r6, r0
   29328:	mov	r0, r8
   2932c:	bl	28cfc <__assert_fail@plt+0x1711c>
   29330:	mul	sl, sl, r6
   29334:	orr	r1, r7, r1, lsl #16
   29338:	cmp	sl, r1
   2933c:	bls	29358 <__assert_fail@plt+0x17778>
   29340:	adds	r4, r1, r4
   29344:	sub	r3, r6, #1
   29348:	bcs	29654 <__assert_fail@plt+0x17a74>
   2934c:	cmp	sl, r4
   29350:	subhi	r6, r6, #2
   29354:	bls	29654 <__assert_fail@plt+0x17a74>
   29358:	orr	r0, r6, r9, lsl #16
   2935c:	mov	r6, #0
   29360:	mov	r1, r6
   29364:	add	sp, sp, #12
   29368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2936c:	cmp	r3, r1
   29370:	movhi	r6, #0
   29374:	movhi	r0, r6
   29378:	bhi	29360 <__assert_fail@plt+0x17780>
   2937c:	clz	r7, r3
   29380:	cmp	r7, #0
   29384:	bne	29484 <__assert_fail@plt+0x178a4>
   29388:	cmp	r3, r1
   2938c:	cmpcs	r2, r6
   29390:	movhi	r6, #0
   29394:	movls	r6, #1
   29398:	movls	r0, #1
   2939c:	movls	r6, r7
   293a0:	movhi	r0, r6
   293a4:	b	29360 <__assert_fail@plt+0x17780>
   293a8:	cmp	r2, #0
   293ac:	bne	293c0 <__assert_fail@plt+0x177e0>
   293b0:	mov	r1, r2
   293b4:	mov	r0, #1
   293b8:	bl	28b10 <__assert_fail@plt+0x16f30>
   293bc:	mov	r4, r0
   293c0:	clz	r3, r4
   293c4:	cmp	r3, #0
   293c8:	bne	29580 <__assert_fail@plt+0x179a0>
   293cc:	rsb	r5, r4, r5
   293d0:	lsr	r8, r4, #16
   293d4:	uxth	sl, r4
   293d8:	mov	r6, #1
   293dc:	mov	r1, r8
   293e0:	mov	r0, r5
   293e4:	bl	28b10 <__assert_fail@plt+0x16f30>
   293e8:	mov	r1, r8
   293ec:	mov	r9, r0
   293f0:	mov	r0, r5
   293f4:	bl	28cfc <__assert_fail@plt+0x1711c>
   293f8:	mul	r0, sl, r9
   293fc:	lsr	r3, r7, #16
   29400:	orr	r1, r3, r1, lsl #16
   29404:	cmp	r0, r1
   29408:	bls	29428 <__assert_fail@plt+0x17848>
   2940c:	adds	r1, r1, r4
   29410:	sub	r2, r9, #1
   29414:	bcs	2965c <__assert_fail@plt+0x17a7c>
   29418:	cmp	r0, r1
   2941c:	subhi	r9, r9, #2
   29420:	addhi	r1, r1, r4
   29424:	bls	2965c <__assert_fail@plt+0x17a7c>
   29428:	rsb	fp, r0, r1
   2942c:	mov	r1, r8
   29430:	uxth	r7, r7
   29434:	mov	r0, fp
   29438:	bl	28b10 <__assert_fail@plt+0x16f30>
   2943c:	mov	r1, r8
   29440:	mov	r5, r0
   29444:	mov	r0, fp
   29448:	bl	28cfc <__assert_fail@plt+0x1711c>
   2944c:	mul	sl, sl, r5
   29450:	orr	r1, r7, r1, lsl #16
   29454:	cmp	sl, r1
   29458:	bls	29474 <__assert_fail@plt+0x17894>
   2945c:	adds	r4, r1, r4
   29460:	sub	r3, r5, #1
   29464:	bcs	29664 <__assert_fail@plt+0x17a84>
   29468:	cmp	sl, r4
   2946c:	subhi	r5, r5, #2
   29470:	bls	29664 <__assert_fail@plt+0x17a84>
   29474:	orr	r0, r5, r9, lsl #16
   29478:	mov	r1, r6
   2947c:	add	sp, sp, #12
   29480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29484:	rsb	r1, r7, #32
   29488:	lsl	r0, r2, r7
   2948c:	lsr	r2, r2, r1
   29490:	lsr	fp, r5, r1
   29494:	orr	r8, r2, r3, lsl r7
   29498:	lsr	r1, r6, r1
   2949c:	str	r0, [sp, #4]
   294a0:	orr	r5, r1, r5, lsl r7
   294a4:	lsr	r9, r8, #16
   294a8:	mov	r0, fp
   294ac:	uxth	sl, r8
   294b0:	mov	r1, r9
   294b4:	bl	28b10 <__assert_fail@plt+0x16f30>
   294b8:	mov	r1, r9
   294bc:	mov	r4, r0
   294c0:	mov	r0, fp
   294c4:	bl	28cfc <__assert_fail@plt+0x1711c>
   294c8:	mul	r0, sl, r4
   294cc:	lsr	ip, r5, #16
   294d0:	orr	r1, ip, r1, lsl #16
   294d4:	cmp	r0, r1
   294d8:	bls	294ec <__assert_fail@plt+0x1790c>
   294dc:	adds	r1, r1, r8
   294e0:	sub	r2, r4, #1
   294e4:	bcc	29680 <__assert_fail@plt+0x17aa0>
   294e8:	mov	r4, r2
   294ec:	rsb	ip, r0, r1
   294f0:	mov	r1, r9
   294f4:	str	ip, [sp]
   294f8:	uxth	r5, r5
   294fc:	mov	r0, ip
   29500:	bl	28b10 <__assert_fail@plt+0x16f30>
   29504:	ldr	ip, [sp]
   29508:	mov	r1, r9
   2950c:	mov	fp, r0
   29510:	mov	r0, ip
   29514:	bl	28cfc <__assert_fail@plt+0x1711c>
   29518:	mul	sl, sl, fp
   2951c:	orr	r1, r5, r1, lsl #16
   29520:	cmp	sl, r1
   29524:	bls	29538 <__assert_fail@plt+0x17958>
   29528:	adds	r1, r1, r8
   2952c:	sub	r2, fp, #1
   29530:	bcc	2966c <__assert_fail@plt+0x17a8c>
   29534:	mov	fp, r2
   29538:	ldr	r3, [sp, #4]
   2953c:	orr	r0, fp, r4, lsl #16
   29540:	rsb	sl, sl, r1
   29544:	umull	r4, r5, r0, r3
   29548:	cmp	sl, r5
   2954c:	bcc	2956c <__assert_fail@plt+0x1798c>
   29550:	movne	r3, #0
   29554:	moveq	r3, #1
   29558:	cmp	r4, r6, lsl r7
   2955c:	movls	r6, #0
   29560:	andhi	r6, r3, #1
   29564:	cmp	r6, #0
   29568:	beq	29360 <__assert_fail@plt+0x17780>
   2956c:	mov	r6, #0
   29570:	sub	r0, r0, #1
   29574:	mov	r1, r6
   29578:	add	sp, sp, #12
   2957c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29580:	lsl	r4, r4, r3
   29584:	rsb	r9, r3, #32
   29588:	lsr	r2, r5, r9
   2958c:	lsr	r9, r6, r9
   29590:	lsr	r8, r4, #16
   29594:	orr	r9, r9, r5, lsl r3
   29598:	mov	r0, r2
   2959c:	lsl	r7, r6, r3
   295a0:	mov	r1, r8
   295a4:	str	r2, [sp]
   295a8:	bl	28b10 <__assert_fail@plt+0x16f30>
   295ac:	ldr	r2, [sp]
   295b0:	mov	r1, r8
   295b4:	uxth	sl, r4
   295b8:	mov	fp, r0
   295bc:	mov	r0, r2
   295c0:	bl	28cfc <__assert_fail@plt+0x1711c>
   295c4:	mul	r0, sl, fp
   295c8:	lsr	r3, r9, #16
   295cc:	orr	r1, r3, r1, lsl #16
   295d0:	cmp	r0, r1
   295d4:	bls	295f4 <__assert_fail@plt+0x17a14>
   295d8:	adds	r1, r1, r4
   295dc:	sub	r3, fp, #1
   295e0:	bcs	29694 <__assert_fail@plt+0x17ab4>
   295e4:	cmp	r0, r1
   295e8:	subhi	fp, fp, #2
   295ec:	addhi	r1, r1, r4
   295f0:	bls	29694 <__assert_fail@plt+0x17ab4>
   295f4:	rsb	r5, r0, r1
   295f8:	mov	r1, r8
   295fc:	uxth	r9, r9
   29600:	mov	r0, r5
   29604:	bl	28b10 <__assert_fail@plt+0x16f30>
   29608:	mov	r1, r8
   2960c:	mov	r6, r0
   29610:	mov	r0, r5
   29614:	bl	28cfc <__assert_fail@plt+0x1711c>
   29618:	mul	r5, sl, r6
   2961c:	orr	r1, r9, r1, lsl #16
   29620:	cmp	r5, r1
   29624:	bls	29648 <__assert_fail@plt+0x17a68>
   29628:	adds	r1, r1, r4
   2962c:	sub	r3, r6, #1
   29630:	bcs	29644 <__assert_fail@plt+0x17a64>
   29634:	cmp	r5, r1
   29638:	subhi	r6, r6, #2
   2963c:	addhi	r1, r1, r4
   29640:	bhi	29648 <__assert_fail@plt+0x17a68>
   29644:	mov	r6, r3
   29648:	rsb	r5, r5, r1
   2964c:	orr	r6, r6, fp, lsl #16
   29650:	b	293dc <__assert_fail@plt+0x177fc>
   29654:	mov	r6, r3
   29658:	b	29358 <__assert_fail@plt+0x17778>
   2965c:	mov	r9, r2
   29660:	b	29428 <__assert_fail@plt+0x17848>
   29664:	mov	r5, r3
   29668:	b	29474 <__assert_fail@plt+0x17894>
   2966c:	cmp	sl, r1
   29670:	subhi	fp, fp, #2
   29674:	addhi	r1, r1, r8
   29678:	bhi	29538 <__assert_fail@plt+0x17958>
   2967c:	b	29534 <__assert_fail@plt+0x17954>
   29680:	cmp	r0, r1
   29684:	subhi	r4, r4, #2
   29688:	addhi	r1, r1, r8
   2968c:	bhi	294ec <__assert_fail@plt+0x1790c>
   29690:	b	294e8 <__assert_fail@plt+0x17908>
   29694:	mov	fp, r3
   29698:	b	295f4 <__assert_fail@plt+0x17a14>
   2969c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   296a0:	mov	r7, r0
   296a4:	ldr	r6, [pc, #76]	; 296f8 <__assert_fail@plt+0x17b18>
   296a8:	mov	r8, r1
   296ac:	ldr	r5, [pc, #72]	; 296fc <__assert_fail@plt+0x17b1c>
   296b0:	mov	r9, r2
   296b4:	add	r6, pc, r6
   296b8:	bl	116ec <fdopen@plt-0x20>
   296bc:	add	r5, pc, r5
   296c0:	rsb	r6, r5, r6
   296c4:	asrs	r6, r6, #2
   296c8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   296cc:	sub	r5, r5, #4
   296d0:	mov	r4, #0
   296d4:	add	r4, r4, #1
   296d8:	ldr	r3, [r5, #4]!
   296dc:	mov	r0, r7
   296e0:	mov	r1, r8
   296e4:	mov	r2, r9
   296e8:	blx	r3
   296ec:	cmp	r4, r6
   296f0:	bne	296d4 <__assert_fail@plt+0x17af4>
   296f4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   296f8:	andeq	r5, r1, ip, lsl #15
   296fc:	andeq	r5, r1, r0, lsl #15
   29700:	bx	lr

Disassembly of section .fini:

00029704 <.fini>:
   29704:	push	{r3, lr}
   29708:	pop	{r3, pc}
