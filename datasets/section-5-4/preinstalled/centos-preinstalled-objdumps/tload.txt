
centos-preinstalled/tload:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <_init@@Base>:
   10c94:	push	{r3, lr}
   10c98:	bl	11440 <fputs@plt+0x5e8>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <open@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <_init@@Base+0x1c>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r1, r1, r0, asr r3

00010cb4 <open@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #69632	; 0x11000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <abort@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #69632	; 0x11000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <__longjmp_chk@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #69632	; 0x11000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <__libc_start_main@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #69632	; 0x11000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <signal@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #69632	; 0x11000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <__gmon_start__@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #69632	; 0x11000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <loadavg@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #69632	; 0x11000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <fclose@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #69632	; 0x11000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <__printf_chk@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #69632	; 0x11000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <strtod@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #69632	; 0x11000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <__cxa_atexit@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #69632	; 0x11000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <__fpending@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #69632	; 0x11000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <memset@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #69632	; 0x11000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <bindtextdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #69632	; 0x11000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <_exit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #69632	; 0x11000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <write@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #69632	; 0x11000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <getopt_long@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #69632	; 0x11000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <dcgettext@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #69632	; 0x11000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <_setjmp@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #69632	; 0x11000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <ioctl@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #69632	; 0x11000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <setlocale@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #69632	; 0x11000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <alarm@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #69632	; 0x11000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dbc <strtol@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #69632	; 0x11000
   10dc4:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc8 <malloc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #69632	; 0x11000
   10dd0:	ldr	pc, [ip, #664]!	; 0x298

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #69632	; 0x11000
   10ddc:	ldr	pc, [ip, #656]!	; 0x290

00010de0 <__stack_chk_fail@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #69632	; 0x11000
   10de8:	ldr	pc, [ip, #648]!	; 0x288

00010dec <__fprintf_chk@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #69632	; 0x11000
   10df4:	ldr	pc, [ip, #640]!	; 0x280

00010df8 <memmove@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #69632	; 0x11000
   10e00:	ldr	pc, [ip, #632]!	; 0x278

00010e04 <pause@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #69632	; 0x11000
   10e0c:	ldr	pc, [ip, #624]!	; 0x270

00010e10 <textdomain@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #69632	; 0x11000
   10e18:	ldr	pc, [ip, #616]!	; 0x268

00010e1c <__sprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #69632	; 0x11000
   10e24:	ldr	pc, [ip, #608]!	; 0x260

00010e28 <ferror@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #69632	; 0x11000
   10e30:	ldr	pc, [ip, #600]!	; 0x258

00010e34 <realloc@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #69632	; 0x11000
   10e3c:	ldr	pc, [ip, #592]!	; 0x250

00010e40 <exit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #69632	; 0x11000
   10e48:	ldr	pc, [ip, #584]!	; 0x248

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #69632	; 0x11000
   10e54:	ldr	pc, [ip, #576]!	; 0x240

00010e58 <fputs@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #69632	; 0x11000
   10e60:	ldr	pc, [ip, #568]!	; 0x238

Disassembly of section .text:

00010e68 <.text>:
   10e68:	movw	ip, #8392	; 0x20c8
   10e6c:	movw	r2, #8376	; 0x20b8
   10e70:	movt	ip, #2
   10e74:	movt	r2, #2
   10e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e7c:	vpush	{d8}
   10e80:	movw	r3, #8388	; 0x20c4
   10e84:	vldr	d8, [pc, #876]	; 111f8 <fputs@plt+0x3a0>
   10e88:	ldr	ip, [ip]
   10e8c:	sub	sp, sp, #76	; 0x4c
   10e90:	ldr	r2, [r2]
   10e94:	movt	r3, #2
   10e98:	movw	r4, #7348	; 0x1cb4
   10e9c:	movt	r4, #1
   10ea0:	mov	r9, r1
   10ea4:	mov	sl, r0
   10ea8:	movw	r1, #7052	; 0x1b8c
   10eac:	mov	r0, #6
   10eb0:	movt	r1, #1
   10eb4:	str	ip, [sp, #68]	; 0x44
   10eb8:	str	r2, [r3]
   10ebc:	bl	10da4 <setlocale@plt>
   10ec0:	mov	r0, r4
   10ec4:	movw	r1, #7360	; 0x1cc0
   10ec8:	movt	r1, #1
   10ecc:	movw	r8, #7500	; 0x1d4c
   10ed0:	bl	10d50 <bindtextdomain@plt>
   10ed4:	mov	r0, r4
   10ed8:	bl	10e10 <textdomain@plt>
   10edc:	movw	r0, #6668	; 0x1a0c
   10ee0:	movt	r0, #1
   10ee4:	movw	r7, #6964	; 0x1b34
   10ee8:	bl	11af8 <fputs@plt+0xca0>
   10eec:	movw	r5, #8408	; 0x20d8
   10ef0:	movw	r4, #7380	; 0x1cd4
   10ef4:	movw	r6, #8360	; 0x20a8
   10ef8:	movt	r8, #1
   10efc:	movt	r7, #1
   10f00:	movt	r5, #2
   10f04:	movt	r4, #1
   10f08:	movt	r6, #2
   10f0c:	mov	fp, #0
   10f10:	mov	r0, sl
   10f14:	str	fp, [sp]
   10f18:	mov	r1, r9
   10f1c:	mov	r2, r8
   10f20:	mov	r3, r7
   10f24:	bl	10d74 <getopt_long@plt>
   10f28:	cmn	r0, #1
   10f2c:	beq	110ac <fputs@plt+0x254>
   10f30:	sub	r0, r0, #86	; 0x56
   10f34:	cmp	r0, #29
   10f38:	ldrls	pc, [pc, r0, lsl #2]
   10f3c:	b	1109c <fputs@plt+0x244>
   10f40:	andeq	r1, r1, r0, asr #32
   10f44:	muleq	r1, ip, r0
   10f48:	muleq	r1, ip, r0
   10f4c:	muleq	r1, ip, r0
   10f50:	muleq	r1, ip, r0
   10f54:	muleq	r1, ip, r0
   10f58:	muleq	r1, ip, r0
   10f5c:	muleq	r1, ip, r0
   10f60:	muleq	r1, ip, r0
   10f64:	muleq	r1, ip, r0
   10f68:	muleq	r1, ip, r0
   10f6c:	muleq	r1, ip, r0
   10f70:	muleq	r1, ip, r0
   10f74:	muleq	r1, ip, r0
   10f78:	andeq	r1, r1, r0, lsl r0
   10f7c:	muleq	r1, ip, r0
   10f80:	muleq	r1, ip, r0
   10f84:	muleq	r1, ip, r0
   10f88:	andeq	r1, r1, r0
   10f8c:	muleq	r1, ip, r0
   10f90:	muleq	r1, ip, r0
   10f94:	muleq	r1, ip, r0
   10f98:	muleq	r1, ip, r0
   10f9c:	muleq	r1, ip, r0
   10fa0:	muleq	r1, ip, r0
   10fa4:	muleq	r1, ip, r0
   10fa8:	muleq	r1, ip, r0
   10fac:	muleq	r1, ip, r0
   10fb0:	muleq	r1, ip, r0
   10fb4:			; <UNDEFINED> instruction: 0x00010fb8
   10fb8:	mov	r1, r4
   10fbc:	mov	r2, #5
   10fc0:	mov	r0, #0
   10fc4:	ldr	fp, [r5]
   10fc8:	bl	10d80 <dcgettext@plt>
   10fcc:	mov	r1, r0
   10fd0:	mov	r0, fp
   10fd4:	bl	118c4 <fputs@plt+0xa6c>
   10fd8:	movw	r3, #8416	; 0x20e0
   10fdc:	movt	r3, #2
   10fe0:	vcmpe.f64	d0, d8
   10fe4:	vstr	d0, [r3, #400]	; 0x190
   10fe8:	vmrs	APSR_nzcv, fpscr
   10fec:	bpl	10f0c <fputs@plt+0xb4>
   10ff0:	movw	r1, #7408	; 0x1cf0
   10ff4:	mov	r0, #0
   10ff8:	movt	r1, #1
   10ffc:	b	113cc <fputs@plt+0x574>
   11000:	movw	r3, #8400	; 0x20d0
   11004:	movt	r3, #2
   11008:	ldr	r0, [r3]
   1100c:	bl	11538 <fputs@plt+0x6e0>
   11010:	mov	r1, r4
   11014:	mov	r2, #5
   11018:	mov	r0, #0
   1101c:	ldr	fp, [r5]
   11020:	bl	10d80 <dcgettext@plt>
   11024:	mov	r1, r0
   11028:	mov	r0, fp
   1102c:	bl	11808 <fputs@plt+0x9b0>
   11030:	cmp	r0, #0
   11034:	ble	113c0 <fputs@plt+0x568>
   11038:	str	r0, [r6]
   1103c:	b	10f0c <fputs@plt+0xb4>
   11040:	mov	r2, #5
   11044:	movw	r1, #7468	; 0x1d2c
   11048:	mov	r0, #0
   1104c:	movt	r1, #1
   11050:	bl	10d80 <dcgettext@plt>
   11054:	movw	r2, #8376	; 0x20b8
   11058:	movt	r2, #2
   1105c:	movw	r3, #7480	; 0x1d38
   11060:	movt	r3, #1
   11064:	ldr	r2, [r2]
   11068:	mov	r1, r0
   1106c:	mov	r0, #1
   11070:	bl	10d14 <__printf_chk@plt>
   11074:	movw	r3, #8392	; 0x20c8
   11078:	movt	r3, #2
   1107c:	ldr	r2, [sp, #68]	; 0x44
   11080:	mov	r0, #0
   11084:	ldr	r3, [r3]
   11088:	cmp	r2, r3
   1108c:	bne	113e4 <fputs@plt+0x58c>
   11090:	add	sp, sp, #76	; 0x4c
   11094:	vpop	{d8}
   11098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1109c:	movw	r3, #8404	; 0x20d4
   110a0:	movt	r3, #2
   110a4:	ldr	r0, [r3]
   110a8:	bl	11538 <fputs@plt+0x6e0>
   110ac:	movw	r3, #8384	; 0x20c0
   110b0:	movt	r3, #2
   110b4:	ldr	r3, [r3]
   110b8:	cmp	sl, r3
   110bc:	ble	110e0 <fputs@plt+0x288>
   110c0:	ldr	r0, [r9, r3, lsl #2]
   110c4:	mov	r1, #1
   110c8:	bl	10cb4 <open@plt>
   110cc:	movw	r3, #8360	; 0x20a8
   110d0:	movt	r3, #2
   110d4:	cmn	r0, #1
   110d8:	str	r0, [r3, #4]
   110dc:	beq	113e8 <fputs@plt+0x590>
   110e0:	mov	r0, #0
   110e4:	bl	116a4 <fputs@plt+0x84c>
   110e8:	movw	r3, #8416	; 0x20e0
   110ec:	movt	r3, #2
   110f0:	vldr	d7, [r3, #400]	; 0x190
   110f4:	vcmp.f64	d7, #0.0
   110f8:	movw	r1, #8416	; 0x20e0
   110fc:	movt	r1, #2
   11100:	add	r0, r1, #8
   11104:	vmrs	APSR_nzcv, fpscr
   11108:	movweq	r2, #8360	; 0x20a8
   1110c:	movteq	r2, #2
   11110:	vldreq	s14, [r2, #8]
   11114:	vcvteq.f64.s32	d7, s14
   11118:	vstreq	d7, [r3, #400]	; 0x190
   1111c:	add	r3, r1, #400	; 0x190
   11120:	ldrd	r2, [r3]
   11124:	str	r2, [r1, #408]	; 0x198
   11128:	str	r3, [r1, #412]	; 0x19c
   1112c:	bl	10d8c <_setjmp@plt>
   11130:	movw	r7, #8416	; 0x20e0
   11134:	movt	r7, #2
   11138:	mov	r0, #0
   1113c:	bl	1167c <fputs@plt+0x824>
   11140:	movw	r2, #8360	; 0x20a8
   11144:	movw	r3, #7528	; 0x1d68
   11148:	movt	r2, #2
   1114c:	movt	r3, #1
   11150:	str	r2, [sp, #28]
   11154:	movw	r2, #7548	; 0x1d7c
   11158:	str	r3, [sp, #32]
   1115c:	movt	r2, #1
   11160:	mov	r3, #0
   11164:	str	r2, [sp, #36]	; 0x24
   11168:	str	r3, [sp, #24]
   1116c:	vldr	d7, [r7, #408]	; 0x198
   11170:	vldr	d6, [r7, #400]	; 0x190
   11174:	vcmpe.f64	d7, d6
   11178:	add	r0, sp, #40	; 0x28
   1117c:	add	r2, sp, #56	; 0x38
   11180:	add	r1, sp, #48	; 0x30
   11184:	mov	sl, #0
   11188:	mov	r4, #42	; 0x2a
   1118c:	vmrs	APSR_nzcv, fpscr
   11190:	vaddmi.f64	d7, d7, d7
   11194:	vstrmi	d7, [r7, #408]	; 0x198
   11198:	bl	10cfc <loadavg@plt>
   1119c:	ldr	r2, [sp, #28]
   111a0:	vldr	s16, [r2, #8]
   111a4:	vmov	r3, s16
   111a8:	vldr	d7, [r7, #408]	; 0x198
   111ac:	vmov	fp, s16
   111b0:	vmov.f64	d5, #96	; 0x3f000000  0.5
   111b4:	ldr	r6, [r2, #12]
   111b8:	ldr	r8, [sp, #24]
   111bc:	ldr	r5, [r7, #4]
   111c0:	mov	r9, r6
   111c4:	sub	r0, r3, #1
   111c8:	mla	lr, r0, r6, r8
   111cc:	add	lr, r5, lr
   111d0:	vldr	d6, [sp, #40]	; 0x28
   111d4:	vmul.f64	d6, d7, d6
   111d8:	mov	ip, r9
   111dc:	mov	r3, r0
   111e0:	mov	r2, sl
   111e4:	vcvt.s32.f64	s8, d6
   111e8:	vmov	r1, s8
   111ec:	rsb	r1, fp, r1
   111f0:	b	11210 <fputs@plt+0x3b8>
   111f4:	nop	{0}
	...
   11200:	subs	r3, r3, #1
   11204:	strb	r4, [lr, r2]
   11208:	rsb	r2, ip, r2
   1120c:	bmi	11340 <fputs@plt+0x4e8>
   11210:	cmn	r1, r3
   11214:	bpl	11200 <fputs@plt+0x3a8>
   11218:	cmp	r3, #0
   1121c:	vstr	d7, [r7, #408]	; 0x198
   11220:	blt	1124c <fputs@plt+0x3f4>
   11224:	mla	r1, r6, r3, r8
   11228:	mov	ip, r6
   1122c:	mov	r2, #0
   11230:	mov	r0, #32
   11234:	add	r1, r5, r1
   11238:	sub	r3, r3, #1
   1123c:	strb	r0, [r1, r2]
   11240:	cmn	r3, #1
   11244:	rsb	r2, ip, r2
   11248:	bne	11238 <fputs@plt+0x3e0>
   1124c:	vcvt.f64.s32	d5, s16
   11250:	vsub.f64	d6, d5, d7
   11254:	vcvt.s32.f64	s9, d6
   11258:	vmov	r3, s9
   1125c:	cmp	r3, #0
   11260:	movge	r2, #1
   11264:	movge	ip, #61	; 0x3d
   11268:	movge	r0, #45	; 0x2d
   1126c:	blt	112ac <fputs@plt+0x454>
   11270:	add	r2, r2, #1
   11274:	mla	r3, r6, r3, r8
   11278:	vmov	s8, r2
   1127c:	vcvt.f64.s32	d6, s8
   11280:	ldrb	r1, [r5, r3]
   11284:	cmp	r1, #32
   11288:	vmov.f64	d4, d5
   1128c:	movne	r1, ip
   11290:	moveq	r1, r0
   11294:	strb	r1, [r5, r3]
   11298:	vmls.f64	d4, d6, d7
   1129c:	vcvt.s32.f64	s9, d4
   112a0:	vmov	r3, s9
   112a4:	cmp	r3, #0
   112a8:	bge	11270 <fputs@plt+0x418>
   112ac:	ldr	r3, [sp, #24]
   112b0:	add	r4, r3, #1
   112b4:	cmp	r4, r6
   112b8:	beq	11348 <fputs@plt+0x4f0>
   112bc:	ldrd	r2, [sp, #48]	; 0x30
   112c0:	mov	r1, #1
   112c4:	ldrd	r8, [sp, #40]	; 0x28
   112c8:	mov	r0, r5
   112cc:	strd	r2, [sp, #8]
   112d0:	ldrd	r2, [sp, #56]	; 0x38
   112d4:	strd	r8, [sp]
   112d8:	strd	r2, [sp, #16]
   112dc:	mvn	r2, #0
   112e0:	ldr	r3, [sp, #32]
   112e4:	bl	10e1c <__sprintf_chk@plt>
   112e8:	ldr	r1, [sp, #36]	; 0x24
   112ec:	cmp	r0, #0
   112f0:	ldrgt	r3, [r7, #4]
   112f4:	movgt	r2, #32
   112f8:	strbgt	r2, [r3, r0]
   112fc:	mov	r2, #3
   11300:	ldr	r3, [sp, #28]
   11304:	ldr	r0, [r3, #4]
   11308:	bl	10d68 <write@plt>
   1130c:	cmp	r0, #0
   11310:	blt	11394 <fputs@plt+0x53c>
   11314:	ldr	r3, [sp, #28]
   11318:	ldr	r2, [r7]
   1131c:	ldr	r1, [r7, #4]
   11320:	ldr	r0, [r3, #4]
   11324:	sub	r2, r2, #1
   11328:	bl	10d68 <write@plt>
   1132c:	cmp	r0, #0
   11330:	blt	11394 <fputs@plt+0x53c>
   11334:	bl	10e04 <pause@plt>
   11338:	str	r4, [sp, #24]
   1133c:	b	1116c <fputs@plt+0x314>
   11340:	vmul.f64	d7, d7, d5
   11344:	b	111d0 <fputs@plt+0x378>
   11348:	ldr	r2, [r7]
   1134c:	mov	r0, r5
   11350:	add	r1, r5, #1
   11354:	sub	r2, r2, #1
   11358:	bl	10df8 <memmove@plt>
   1135c:	vmov	r2, s16
   11360:	subs	r3, r2, #2
   11364:	bmi	1138c <fputs@plt+0x534>
   11368:	mla	r1, r3, r6, r8
   1136c:	mov	r2, #0
   11370:	mov	r0, #32
   11374:	add	r1, r5, r1
   11378:	sub	r3, r3, #1
   1137c:	strb	r0, [r1, r2]
   11380:	cmn	r3, #1
   11384:	rsb	r2, r6, r2
   11388:	bne	11378 <fputs@plt+0x520>
   1138c:	ldr	r4, [sp, #24]
   11390:	b	112bc <fputs@plt+0x464>
   11394:	bl	10e4c <__errno_location@plt>
   11398:	movw	r1, #7552	; 0x1d80
   1139c:	movt	r1, #1
   113a0:	mov	r2, #5
   113a4:	ldr	r4, [r0]
   113a8:	mov	r0, #0
   113ac:	bl	10d80 <dcgettext@plt>
   113b0:	mov	r1, r4
   113b4:	mov	r2, r0
   113b8:	mov	r0, #1
   113bc:	bl	10dd4 <error@plt>
   113c0:	movw	r1, #7436	; 0x1d0c
   113c4:	movt	r1, #1
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	bl	10d80 <dcgettext@plt>
   113d4:	mov	r1, #0
   113d8:	mov	r2, r0
   113dc:	mov	r0, #1
   113e0:	bl	10dd4 <error@plt>
   113e4:	bl	10de0 <__stack_chk_fail@plt>
   113e8:	bl	10e4c <__errno_location@plt>
   113ec:	movw	r1, #7508	; 0x1d54
   113f0:	mov	r2, #5
   113f4:	movt	r1, #1
   113f8:	ldr	r4, [r0]
   113fc:	mov	r0, fp
   11400:	b	113ac <fputs@plt+0x554>
   11404:	mov	fp, #0
   11408:	mov	lr, #0
   1140c:	pop	{r1}		; (ldr r1, [sp], #4)
   11410:	mov	r2, sp
   11414:	push	{r2}		; (str r2, [sp, #-4]!)
   11418:	push	{r0}		; (str r0, [sp, #-4]!)
   1141c:	ldr	ip, [pc, #16]	; 11434 <fputs@plt+0x5dc>
   11420:	push	{ip}		; (str ip, [sp, #-4]!)
   11424:	ldr	r0, [pc, #12]	; 11438 <fputs@plt+0x5e0>
   11428:	ldr	r3, [pc, #12]	; 1143c <fputs@plt+0x5e4>
   1142c:	bl	10cd8 <__libc_start_main@plt>
   11430:	bl	10cc0 <abort@plt>
   11434:	strdeq	r1, [r1], -r4
   11438:	andeq	r0, r1, r8, ror #28
   1143c:	muleq	r1, r0, sl
   11440:	ldr	r3, [pc, #20]	; 1145c <fputs@plt+0x604>
   11444:	ldr	r2, [pc, #20]	; 11460 <fputs@plt+0x608>
   11448:	add	r3, pc, r3
   1144c:	ldr	r2, [r3, r2]
   11450:	cmp	r2, #0
   11454:	bxeq	lr
   11458:	b	10cf0 <__gmon_start__@plt>
   1145c:			; <UNDEFINED> instruction: 0x00010bb0
   11460:	muleq	r0, ip, r0
   11464:	push	{r3, lr}
   11468:	movw	r0, #8376	; 0x20b8
   1146c:	ldr	r3, [pc, #36]	; 11498 <fputs@plt+0x640>
   11470:	movt	r0, #2
   11474:	rsb	r3, r0, r3
   11478:	cmp	r3, #6
   1147c:	popls	{r3, pc}
   11480:	movw	r3, #0
   11484:	movt	r3, #0
   11488:	cmp	r3, #0
   1148c:	popeq	{r3, pc}
   11490:	blx	r3
   11494:	pop	{r3, pc}
   11498:	strheq	r2, [r2], -fp
   1149c:	push	{r3, lr}
   114a0:	movw	r0, #8376	; 0x20b8
   114a4:	movw	r3, #8376	; 0x20b8
   114a8:	movt	r0, #2
   114ac:	movt	r3, #2
   114b0:	rsb	r3, r0, r3
   114b4:	asr	r3, r3, #2
   114b8:	add	r3, r3, r3, lsr #31
   114bc:	asrs	r1, r3, #1
   114c0:	popeq	{r3, pc}
   114c4:	movw	r2, #0
   114c8:	movt	r2, #0
   114cc:	cmp	r2, #0
   114d0:	popeq	{r3, pc}
   114d4:	blx	r2
   114d8:	pop	{r3, pc}
   114dc:	push	{r4, lr}
   114e0:	movw	r4, #8412	; 0x20dc
   114e4:	movt	r4, #2
   114e8:	ldrb	r3, [r4]
   114ec:	cmp	r3, #0
   114f0:	popne	{r4, pc}
   114f4:	bl	11464 <fputs@plt+0x60c>
   114f8:	mov	r3, #1
   114fc:	strb	r3, [r4]
   11500:	pop	{r4, pc}
   11504:	movw	r0, #7916	; 0x1eec
   11508:	movt	r0, #2
   1150c:	push	{r3, lr}
   11510:	ldr	r3, [r0]
   11514:	cmp	r3, #0
   11518:	beq	11530 <fputs@plt+0x6d8>
   1151c:	movw	r3, #0
   11520:	movt	r3, #0
   11524:	cmp	r3, #0
   11528:	beq	11530 <fputs@plt+0x6d8>
   1152c:	blx	r3
   11530:	pop	{r3, lr}
   11534:	b	1149c <fputs@plt+0x644>
   11538:	push	{r4, lr}
   1153c:	mov	r2, #5
   11540:	mov	r4, r0
   11544:	movw	r1, #7044	; 0x1b84
   11548:	mov	r0, #0
   1154c:	movt	r1, #1
   11550:	bl	10d80 <dcgettext@plt>
   11554:	mov	r1, r4
   11558:	bl	10e58 <fputs@plt>
   1155c:	mov	r2, #5
   11560:	movw	r1, #7056	; 0x1b90
   11564:	mov	r0, #0
   11568:	movt	r1, #1
   1156c:	bl	10d80 <dcgettext@plt>
   11570:	movw	r3, #8376	; 0x20b8
   11574:	movt	r3, #2
   11578:	mov	r1, #1
   1157c:	ldr	r3, [r3]
   11580:	mov	r2, r0
   11584:	mov	r0, r4
   11588:	bl	10dec <__fprintf_chk@plt>
   1158c:	mov	r2, #5
   11590:	movw	r1, #7080	; 0x1ba8
   11594:	mov	r0, #0
   11598:	movt	r1, #1
   1159c:	bl	10d80 <dcgettext@plt>
   115a0:	mov	r1, r4
   115a4:	bl	10e58 <fputs@plt>
   115a8:	mov	r2, #5
   115ac:	movw	r1, #7092	; 0x1bb4
   115b0:	mov	r0, #0
   115b4:	movt	r1, #1
   115b8:	bl	10d80 <dcgettext@plt>
   115bc:	mov	r1, r4
   115c0:	bl	10e58 <fputs@plt>
   115c4:	mov	r2, #5
   115c8:	movw	r1, #7140	; 0x1be4
   115cc:	mov	r0, #0
   115d0:	movt	r1, #1
   115d4:	bl	10d80 <dcgettext@plt>
   115d8:	mov	r1, r4
   115dc:	bl	10e58 <fputs@plt>
   115e0:	mov	r2, #5
   115e4:	movw	r1, #7136	; 0x1be0
   115e8:	mov	r0, #0
   115ec:	movt	r1, #1
   115f0:	bl	10d80 <dcgettext@plt>
   115f4:	mov	r1, r4
   115f8:	bl	10e58 <fputs@plt>
   115fc:	mov	r2, #5
   11600:	movw	r1, #7180	; 0x1c0c
   11604:	mov	r0, #0
   11608:	movt	r1, #1
   1160c:	bl	10d80 <dcgettext@plt>
   11610:	mov	r1, r4
   11614:	bl	10e58 <fputs@plt>
   11618:	mov	r2, #5
   1161c:	movw	r1, #7224	; 0x1c38
   11620:	mov	r0, #0
   11624:	movt	r1, #1
   11628:	bl	10d80 <dcgettext@plt>
   1162c:	mov	r1, r4
   11630:	bl	10e58 <fputs@plt>
   11634:	mov	r2, #5
   11638:	movw	r1, #7280	; 0x1c70
   1163c:	mov	r0, #0
   11640:	movt	r1, #1
   11644:	bl	10d80 <dcgettext@plt>
   11648:	movw	r3, #7308	; 0x1c8c
   1164c:	mov	r1, #1
   11650:	movt	r3, #1
   11654:	mov	r2, r0
   11658:	mov	r0, r4
   1165c:	bl	10dec <__fprintf_chk@plt>
   11660:	movw	r3, #8404	; 0x20d4
   11664:	movt	r3, #2
   11668:	ldr	r0, [r3]
   1166c:	subs	r3, r4, r0
   11670:	rsbs	r0, r3, #0
   11674:	adcs	r0, r0, r3
   11678:	bl	10e40 <exit@plt>
   1167c:	push	{r3, lr}
   11680:	movw	r1, #5756	; 0x167c
   11684:	mov	r0, #14
   11688:	movt	r1, #1
   1168c:	bl	10ce4 <signal@plt>
   11690:	movw	r3, #8360	; 0x20a8
   11694:	movt	r3, #2
   11698:	ldr	r0, [r3]
   1169c:	pop	{r3, lr}
   116a0:	b	10db0 <alarm@plt>
   116a4:	push	{r4, r5, r6, r7, r8, lr}
   116a8:	movw	r6, #8392	; 0x20c8
   116ac:	movt	r6, #2
   116b0:	sub	sp, sp, #16
   116b4:	movw	r4, #8360	; 0x20a8
   116b8:	movt	r4, #2
   116bc:	ldr	r3, [r6]
   116c0:	mov	r8, r0
   116c4:	movw	r1, #5796	; 0x16a4
   116c8:	mov	r0, #28
   116cc:	movt	r1, #1
   116d0:	str	r3, [sp, #12]
   116d4:	bl	10ce4 <signal@plt>
   116d8:	ldr	r0, [r4, #4]
   116dc:	movw	r1, #21523	; 0x5413
   116e0:	add	r2, sp, #4
   116e4:	bl	10d98 <ioctl@plt>
   116e8:	cmn	r0, #1
   116ec:	beq	11798 <fputs@plt+0x940>
   116f0:	ldrh	r3, [sp, #6]
   116f4:	cmp	r3, #0
   116f8:	strne	r3, [r4, #12]
   116fc:	ldrh	r3, [sp, #4]
   11700:	cmp	r3, #0
   11704:	strne	r3, [r4, #8]
   11708:	movne	r2, r3
   1170c:	beq	11798 <fputs@plt+0x940>
   11710:	ldr	r4, [r4, #12]
   11714:	movw	r5, #8416	; 0x20e0
   11718:	movt	r5, #2
   1171c:	mul	r4, r4, r2
   11720:	ldr	r7, [r5, #4]
   11724:	cmp	r7, #0
   11728:	str	r4, [r5]
   1172c:	beq	117a0 <fputs@plt+0x948>
   11730:	mov	r0, r7
   11734:	mov	r1, r4
   11738:	bl	10e34 <realloc@plt>
   1173c:	rsbs	r2, r0, #1
   11740:	movcc	r2, #0
   11744:	cmp	r4, #0
   11748:	moveq	r2, #0
   1174c:	cmp	r2, #0
   11750:	streq	r0, [r5, #4]
   11754:	moveq	ip, r0
   11758:	bne	117ec <fputs@plt+0x994>
   1175c:	mov	r1, #32
   11760:	sub	r2, r4, #1
   11764:	mov	r0, ip
   11768:	bl	10d44 <memset@plt>
   1176c:	cmp	r8, #0
   11770:	mov	r1, #0
   11774:	add	r4, r0, r4
   11778:	strb	r1, [r4, #-2]
   1177c:	bne	117e4 <fputs@plt+0x98c>
   11780:	ldr	r2, [sp, #12]
   11784:	ldr	r3, [r6]
   11788:	cmp	r2, r3
   1178c:	bne	117e0 <fputs@plt+0x988>
   11790:	add	sp, sp, #16
   11794:	pop	{r4, r5, r6, r7, r8, pc}
   11798:	ldr	r2, [r4, #8]
   1179c:	b	11710 <fputs@plt+0x8b8>
   117a0:	mov	r0, r4
   117a4:	bl	10dc8 <malloc@plt>
   117a8:	rsbs	r3, r0, #1
   117ac:	movcc	r3, #0
   117b0:	cmp	r4, #0
   117b4:	moveq	r3, #0
   117b8:	cmp	r3, #0
   117bc:	streq	r0, [r5, #4]
   117c0:	moveq	ip, r0
   117c4:	beq	1175c <fputs@plt+0x904>
   117c8:	movw	r2, #7320	; 0x1c98
   117cc:	mov	r1, r7
   117d0:	mov	r3, r4
   117d4:	mov	r0, #1
   117d8:	movt	r2, #1
   117dc:	bl	10dd4 <error@plt>
   117e0:	bl	10de0 <__stack_chk_fail@plt>
   117e4:	ldr	r0, [pc, #24]	; 11804 <fputs@plt+0x9ac>
   117e8:	bl	10ccc <__longjmp_chk@plt>
   117ec:	movw	r2, #7320	; 0x1c98
   117f0:	mov	r3, r4
   117f4:	mov	r0, #1
   117f8:	movt	r2, #1
   117fc:	mov	r1, #0
   11800:	bl	10dd4 <error@plt>
   11804:	andeq	r2, r2, r8, ror #1
   11808:	push	{r4, r5, r6, r7, r8, lr}
   1180c:	movw	r4, #8392	; 0x20c8
   11810:	movt	r4, #2
   11814:	sub	sp, sp, #16
   11818:	subs	r5, r0, #0
   1181c:	mov	r6, #0
   11820:	ldr	r2, [r4]
   11824:	mov	r8, r1
   11828:	str	r6, [sp, #8]
   1182c:	str	r2, [sp, #12]
   11830:	beq	118a0 <fputs@plt+0xa48>
   11834:	ldrb	r3, [r5]
   11838:	cmp	r3, #0
   1183c:	beq	118a0 <fputs@plt+0xa48>
   11840:	bl	10e4c <__errno_location@plt>
   11844:	mov	r2, #10
   11848:	add	r1, sp, #8
   1184c:	mov	r7, r0
   11850:	str	r6, [r0]
   11854:	mov	r0, r5
   11858:	bl	10dbc <strtol@plt>
   1185c:	ldr	r2, [r7]
   11860:	cmp	r2, #0
   11864:	bne	118a0 <fputs@plt+0xa48>
   11868:	ldr	r2, [sp, #8]
   1186c:	cmp	r5, r2
   11870:	beq	118a0 <fputs@plt+0xa48>
   11874:	cmp	r2, #0
   11878:	beq	118a0 <fputs@plt+0xa48>
   1187c:	ldrb	r3, [r2]
   11880:	cmp	r3, #0
   11884:	bne	118a0 <fputs@plt+0xa48>
   11888:	ldr	r2, [sp, #12]
   1188c:	ldr	r3, [r4]
   11890:	cmp	r2, r3
   11894:	bne	118c0 <fputs@plt+0xa68>
   11898:	add	sp, sp, #16
   1189c:	pop	{r4, r5, r6, r7, r8, pc}
   118a0:	bl	10e4c <__errno_location@plt>
   118a4:	movw	r2, #7608	; 0x1db8
   118a8:	mov	r3, r8
   118ac:	movt	r2, #1
   118b0:	ldr	r1, [r0]
   118b4:	mov	r0, #1
   118b8:	str	r5, [sp]
   118bc:	bl	10dd4 <error@plt>
   118c0:	bl	10de0 <__stack_chk_fail@plt>
   118c4:	push	{r4, r5, r6, r7, r8, lr}
   118c8:	movw	r4, #8392	; 0x20c8
   118cc:	movt	r4, #2
   118d0:	sub	sp, sp, #16
   118d4:	subs	r5, r0, #0
   118d8:	mov	r6, #0
   118dc:	ldr	r2, [r4]
   118e0:	mov	r8, r1
   118e4:	str	r6, [sp, #8]
   118e8:	str	r2, [sp, #12]
   118ec:	beq	11958 <fputs@plt+0xb00>
   118f0:	ldrb	r3, [r5]
   118f4:	cmp	r3, #0
   118f8:	beq	11958 <fputs@plt+0xb00>
   118fc:	bl	10e4c <__errno_location@plt>
   11900:	add	r1, sp, #8
   11904:	mov	r7, r0
   11908:	str	r6, [r0]
   1190c:	mov	r0, r5
   11910:	bl	10d20 <strtod@plt>
   11914:	ldr	r2, [r7]
   11918:	cmp	r2, #0
   1191c:	bne	11958 <fputs@plt+0xb00>
   11920:	ldr	r2, [sp, #8]
   11924:	cmp	r5, r2
   11928:	beq	11958 <fputs@plt+0xb00>
   1192c:	cmp	r2, #0
   11930:	beq	11958 <fputs@plt+0xb00>
   11934:	ldrb	r3, [r2]
   11938:	cmp	r3, #0
   1193c:	bne	11958 <fputs@plt+0xb00>
   11940:	ldr	r2, [sp, #12]
   11944:	ldr	r3, [r4]
   11948:	cmp	r2, r3
   1194c:	bne	11978 <fputs@plt+0xb20>
   11950:	add	sp, sp, #16
   11954:	pop	{r4, r5, r6, r7, r8, pc}
   11958:	bl	10e4c <__errno_location@plt>
   1195c:	movw	r2, #7608	; 0x1db8
   11960:	mov	r3, r8
   11964:	movt	r2, #1
   11968:	ldr	r1, [r0]
   1196c:	mov	r0, #1
   11970:	str	r5, [sp]
   11974:	bl	10dd4 <error@plt>
   11978:	bl	10de0 <__stack_chk_fail@plt>
   1197c:	push	{r4, r5, r6, lr}
   11980:	mov	r5, r0
   11984:	bl	10d38 <__fpending@plt>
   11988:	mov	r6, r0
   1198c:	mov	r0, r5
   11990:	bl	10e28 <ferror@plt>
   11994:	mov	r4, r0
   11998:	mov	r0, r5
   1199c:	bl	10d08 <fclose@plt>
   119a0:	adds	r5, r0, #0
   119a4:	movne	r5, #1
   119a8:	cmp	r4, #0
   119ac:	bne	119cc <fputs@plt+0xb74>
   119b0:	cmp	r5, #0
   119b4:	beq	119c4 <fputs@plt+0xb6c>
   119b8:	cmp	r6, #0
   119bc:	beq	119f4 <fputs@plt+0xb9c>
   119c0:	mvn	r4, #0
   119c4:	mov	r0, r4
   119c8:	pop	{r4, r5, r6, pc}
   119cc:	cmp	r5, #0
   119d0:	bne	119c0 <fputs@plt+0xb68>
   119d4:	bl	10e4c <__errno_location@plt>
   119d8:	ldr	r3, [r0]
   119dc:	cmp	r3, #32
   119e0:	beq	119c0 <fputs@plt+0xb68>
   119e4:	mvn	r4, #0
   119e8:	str	r5, [r0]
   119ec:	mov	r0, r4
   119f0:	pop	{r4, r5, r6, pc}
   119f4:	bl	10e4c <__errno_location@plt>
   119f8:	ldr	r4, [r0]
   119fc:	subs	r4, r4, #9
   11a00:	mvnne	r4, #0
   11a04:	mov	r0, r4
   11a08:	pop	{r4, r5, r6, pc}
   11a0c:	movw	r3, #8400	; 0x20d0
   11a10:	movt	r3, #2
   11a14:	push	{r4, lr}
   11a18:	ldr	r0, [r3]
   11a1c:	bl	1197c <fputs@plt+0xb24>
   11a20:	cmp	r0, #0
   11a24:	beq	11a3c <fputs@plt+0xbe4>
   11a28:	bl	10e4c <__errno_location@plt>
   11a2c:	ldr	r3, [r0]
   11a30:	mov	r4, r0
   11a34:	cmp	r3, #32
   11a38:	bne	11a5c <fputs@plt+0xc04>
   11a3c:	movw	r3, #8404	; 0x20d4
   11a40:	movt	r3, #2
   11a44:	ldr	r0, [r3]
   11a48:	bl	1197c <fputs@plt+0xb24>
   11a4c:	cmp	r0, #0
   11a50:	popeq	{r4, pc}
   11a54:	mov	r0, #1
   11a58:	bl	10d5c <_exit@plt>
   11a5c:	mov	r2, #5
   11a60:	movw	r1, #7620	; 0x1dc4
   11a64:	mov	r0, #0
   11a68:	movt	r1, #1
   11a6c:	bl	10d80 <dcgettext@plt>
   11a70:	ldr	r1, [r4]
   11a74:	movw	r2, #7632	; 0x1dd0
   11a78:	movt	r2, #1
   11a7c:	mov	r3, r0
   11a80:	mov	r0, #0
   11a84:	bl	10dd4 <error@plt>
   11a88:	mov	r0, #1
   11a8c:	bl	10d5c <_exit@plt>
   11a90:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11a94:	mov	r7, r0
   11a98:	ldr	r6, [pc, #76]	; 11aec <fputs@plt+0xc94>
   11a9c:	mov	r8, r1
   11aa0:	ldr	r5, [pc, #72]	; 11af0 <fputs@plt+0xc98>
   11aa4:	mov	r9, r2
   11aa8:	add	r6, pc, r6
   11aac:	bl	10c94 <_init@@Base>
   11ab0:	add	r5, pc, r5
   11ab4:	rsb	r6, r5, r6
   11ab8:	asrs	r6, r6, #2
   11abc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11ac0:	sub	r5, r5, #4
   11ac4:	mov	r4, #0
   11ac8:	add	r4, r4, #1
   11acc:	ldr	r3, [r5, #4]!
   11ad0:	mov	r0, r7
   11ad4:	mov	r1, r8
   11ad8:	mov	r2, r9
   11adc:	blx	r3
   11ae0:	cmp	r4, r6
   11ae4:	bne	11ac8 <fputs@plt+0xc70>
   11ae8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11aec:	andeq	r0, r1, r8, lsr r4
   11af0:	andeq	r0, r1, ip, lsr #8
   11af4:	bx	lr
   11af8:	ldr	r3, [pc, #28]	; 11b1c <fputs@plt+0xcc4>
   11afc:	mov	r1, #0
   11b00:	ldr	r2, [pc, #24]	; 11b20 <fputs@plt+0xcc8>
   11b04:	add	r3, pc, r3
   11b08:	ldr	r3, [r3, r2]
   11b0c:	cmp	r3, #0
   11b10:	ldrne	r2, [r3]
   11b14:	moveq	r2, r3
   11b18:	b	10d2c <__cxa_atexit@plt>
   11b1c:	strdeq	r0, [r1], -r4
   11b20:	andeq	r0, r0, r0, lsr #1

Disassembly of section .fini:

00011b24 <_fini@@Base>:
   11b24:	push	{r3, lr}
   11b28:	pop	{r3, pc}
