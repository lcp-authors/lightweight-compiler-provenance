
centos-preinstalled/lsns:     file format elf32-littlearm


Disassembly of section .init:

0001143c <.init>:
   1143c:	push	{r3, lr}
   11440:	bl	12818 <__assert_fail@plt+0xf9c>
   11444:	pop	{r3, pc}

Disassembly of section .plt:

00011448 <fdopen@plt-0x14>:
   11448:	push	{lr}		; (str lr, [sp, #-4]!)
   1144c:	ldr	lr, [pc, #4]	; 11458 <fdopen@plt-0x4>
   11450:	add	lr, pc, lr
   11454:	ldr	pc, [lr, #8]!
   11458:	andeq	r6, r1, r8, lsr #23

0001145c <fdopen@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #90112	; 0x16000
   11464:	ldr	pc, [ip, #2984]!	; 0xba8

00011468 <calloc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #90112	; 0x16000
   11470:	ldr	pc, [ip, #2976]!	; 0xba0

00011474 <raise@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #90112	; 0x16000
   1147c:	ldr	pc, [ip, #2968]!	; 0xb98

00011480 <__getdelim@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #90112	; 0x16000
   11488:	ldr	pc, [ip, #2960]!	; 0xb90

0001148c <scols_line_set_data@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #90112	; 0x16000
   11494:	ldr	pc, [ip, #2952]!	; 0xb88

00011498 <strcmp@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #90112	; 0x16000
   114a0:	ldr	pc, [ip, #2944]!	; 0xb80

000114a4 <strtol@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #90112	; 0x16000
   114ac:	ldr	pc, [ip, #2936]!	; 0xb78

000114b0 <getpwuid@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #90112	; 0x16000
   114b8:	ldr	pc, [ip, #2928]!	; 0xb70

000114bc <strcspn@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #90112	; 0x16000
   114c4:	ldr	pc, [ip, #2920]!	; 0xb68

000114c8 <scols_table_enable_noheadings@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #90112	; 0x16000
   114d0:	ldr	pc, [ip, #2912]!	; 0xb60

000114d4 <read@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #90112	; 0x16000
   114dc:	ldr	pc, [ip, #2904]!	; 0xb58

000114e0 <scols_table_new_column@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #90112	; 0x16000
   114e8:	ldr	pc, [ip, #2896]!	; 0xb50

000114ec <getuid@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #90112	; 0x16000
   114f4:	ldr	pc, [ip, #2888]!	; 0xb48

000114f8 <free@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #90112	; 0x16000
   11500:	ldr	pc, [ip, #2880]!	; 0xb40

00011504 <fgets@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #90112	; 0x16000
   1150c:	ldr	pc, [ip, #2872]!	; 0xb38

00011510 <scols_table_enable_raw@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #90112	; 0x16000
   11518:	ldr	pc, [ip, #2864]!	; 0xb30

0001151c <ferror@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #90112	; 0x16000
   11524:	ldr	pc, [ip, #2856]!	; 0xb28

00011528 <__openat64_2@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #90112	; 0x16000
   11530:	ldr	pc, [ip, #2848]!	; 0xb20

00011534 <_exit@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #90112	; 0x16000
   1153c:	ldr	pc, [ip, #2840]!	; 0xb18

00011540 <memcpy@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #90112	; 0x16000
   11548:	ldr	pc, [ip, #2832]!	; 0xb10

0001154c <__strtoull_internal@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #90112	; 0x16000
   11554:	ldr	pc, [ip, #2824]!	; 0xb08

00011558 <dcgettext@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #90112	; 0x16000
   11560:	ldr	pc, [ip, #2816]!	; 0xb00

00011564 <__stack_chk_fail@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #90112	; 0x16000
   1156c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011570 <textdomain@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #90112	; 0x16000
   11578:	ldr	pc, [ip, #2800]!	; 0xaf0

0001157c <__strndup@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #90112	; 0x16000
   11584:	ldr	pc, [ip, #2792]!	; 0xae8

00011588 <err@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #90112	; 0x16000
   11590:	ldr	pc, [ip, #2784]!	; 0xae0

00011594 <geteuid@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #90112	; 0x16000
   1159c:	ldr	pc, [ip, #2776]!	; 0xad8

000115a0 <__fxstatat64@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #90112	; 0x16000
   115a8:	ldr	pc, [ip, #2768]!	; 0xad0

000115ac <__fxstat64@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #90112	; 0x16000
   115b4:	ldr	pc, [ip, #2760]!	; 0xac8

000115b8 <getegid@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #90112	; 0x16000
   115c0:	ldr	pc, [ip, #2752]!	; 0xac0

000115c4 <scols_new_table@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #90112	; 0x16000
   115cc:	ldr	pc, [ip, #2744]!	; 0xab8

000115d0 <__fpending@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #90112	; 0x16000
   115d8:	ldr	pc, [ip, #2736]!	; 0xab0

000115dc <opendir@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #90112	; 0x16000
   115e4:	ldr	pc, [ip, #2728]!	; 0xaa8

000115e8 <open64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #90112	; 0x16000
   115f0:	ldr	pc, [ip, #2720]!	; 0xaa0

000115f4 <__asprintf_chk@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #90112	; 0x16000
   115fc:	ldr	pc, [ip, #2712]!	; 0xa98

00011600 <getenv@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #90112	; 0x16000
   11608:	ldr	pc, [ip, #2704]!	; 0xa90

0001160c <malloc@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #90112	; 0x16000
   11614:	ldr	pc, [ip, #2696]!	; 0xa88

00011618 <__libc_start_main@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #90112	; 0x16000
   11620:	ldr	pc, [ip, #2688]!	; 0xa80

00011624 <readlinkat@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #90112	; 0x16000
   1162c:	ldr	pc, [ip, #2680]!	; 0xa78

00011630 <scols_table_new_line@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #90112	; 0x16000
   11638:	ldr	pc, [ip, #2672]!	; 0xa70

0001163c <scols_unref_table@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #90112	; 0x16000
   11644:	ldr	pc, [ip, #2664]!	; 0xa68

00011648 <__vfprintf_chk@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #90112	; 0x16000
   11650:	ldr	pc, [ip, #2656]!	; 0xa60

00011654 <__gmon_start__@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #90112	; 0x16000
   1165c:	ldr	pc, [ip, #2648]!	; 0xa58

00011660 <getopt_long@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #90112	; 0x16000
   11668:	ldr	pc, [ip, #2640]!	; 0xa50

0001166c <__ctype_b_loc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #90112	; 0x16000
   11674:	ldr	pc, [ip, #2632]!	; 0xa48

00011678 <getpid@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #90112	; 0x16000
   11680:	ldr	pc, [ip, #2624]!	; 0xa40

00011684 <exit@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #90112	; 0x16000
   1168c:	ldr	pc, [ip, #2616]!	; 0xa38

00011690 <strtoul@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #90112	; 0x16000
   11698:	ldr	pc, [ip, #2608]!	; 0xa30

0001169c <strlen@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #90112	; 0x16000
   116a4:	ldr	pc, [ip, #2600]!	; 0xa28

000116a8 <strchr@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #90112	; 0x16000
   116b0:	ldr	pc, [ip, #2592]!	; 0xa20

000116b4 <openat64@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #90112	; 0x16000
   116bc:	ldr	pc, [ip, #2584]!	; 0xa18

000116c0 <warnx@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #90112	; 0x16000
   116c8:	ldr	pc, [ip, #2576]!	; 0xa10

000116cc <__errno_location@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #90112	; 0x16000
   116d4:	ldr	pc, [ip, #2568]!	; 0xa08

000116d8 <strncasecmp@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #90112	; 0x16000
   116e0:	ldr	pc, [ip, #2560]!	; 0xa00

000116e4 <__sprintf_chk@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #90112	; 0x16000
   116ec:	ldr	pc, [ip, #2552]!	; 0x9f8

000116f0 <__cxa_atexit@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #90112	; 0x16000
   116f8:	ldr	pc, [ip, #2544]!	; 0x9f0

000116fc <__vasprintf_chk@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #90112	; 0x16000
   11704:	ldr	pc, [ip, #2536]!	; 0x9e8

00011708 <__strdup@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #90112	; 0x16000
   11710:	ldr	pc, [ip, #2528]!	; 0x9e0

00011714 <getgid@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #90112	; 0x16000
   1171c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011720 <memset@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #90112	; 0x16000
   11728:	ldr	pc, [ip, #2512]!	; 0x9d0

0001172c <fgetc@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #90112	; 0x16000
   11734:	ldr	pc, [ip, #2504]!	; 0x9c8

00011738 <__printf_chk@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #90112	; 0x16000
   11740:	ldr	pc, [ip, #2496]!	; 0x9c0

00011744 <strtod@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #90112	; 0x16000
   1174c:	ldr	pc, [ip, #2488]!	; 0x9b8

00011750 <__fprintf_chk@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #90112	; 0x16000
   11758:	ldr	pc, [ip, #2480]!	; 0x9b0

0001175c <fclose@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #90112	; 0x16000
   11764:	ldr	pc, [ip, #2472]!	; 0x9a8

00011768 <setlocale@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #90112	; 0x16000
   11770:	ldr	pc, [ip, #2464]!	; 0x9a0

00011774 <errx@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #90112	; 0x16000
   1177c:	ldr	pc, [ip, #2456]!	; 0x998

00011780 <wcswidth@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #90112	; 0x16000
   11788:	ldr	pc, [ip, #2448]!	; 0x990

0001178c <strrchr@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #90112	; 0x16000
   11794:	ldr	pc, [ip, #2440]!	; 0x988

00011798 <warn@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #90112	; 0x16000
   117a0:	ldr	pc, [ip, #2432]!	; 0x980

000117a4 <scols_print_table@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #90112	; 0x16000
   117ac:	ldr	pc, [ip, #2424]!	; 0x978

000117b0 <fputc@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #90112	; 0x16000
   117b8:	ldr	pc, [ip, #2416]!	; 0x970

000117bc <sscanf@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #90112	; 0x16000
   117c4:	ldr	pc, [ip, #2408]!	; 0x968

000117c8 <localeconv@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #90112	; 0x16000
   117d0:	ldr	pc, [ip, #2400]!	; 0x960

000117d4 <mbstowcs@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #90112	; 0x16000
   117dc:	ldr	pc, [ip, #2392]!	; 0x958

000117e0 <readdir64@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #90112	; 0x16000
   117e8:	ldr	pc, [ip, #2384]!	; 0x950

000117ec <dirfd@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #90112	; 0x16000
   117f4:	ldr	pc, [ip, #2376]!	; 0x948

000117f8 <__strtoll_internal@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #90112	; 0x16000
   11800:	ldr	pc, [ip, #2368]!	; 0x940

00011804 <bindtextdomain@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #90112	; 0x16000
   1180c:	ldr	pc, [ip, #2360]!	; 0x938

00011810 <fputs@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #90112	; 0x16000
   11818:	ldr	pc, [ip, #2352]!	; 0x930

0001181c <strncmp@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #90112	; 0x16000
   11824:	ldr	pc, [ip, #2344]!	; 0x928

00011828 <abort@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #90112	; 0x16000
   11830:	ldr	pc, [ip, #2336]!	; 0x920

00011834 <close@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #90112	; 0x16000
   1183c:	ldr	pc, [ip, #2328]!	; 0x918

00011840 <closedir@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #90112	; 0x16000
   11848:	ldr	pc, [ip, #2320]!	; 0x910

0001184c <getgrgid@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #90112	; 0x16000
   11854:	ldr	pc, [ip, #2312]!	; 0x908

00011858 <__snprintf_chk@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #90112	; 0x16000
   11860:	ldr	pc, [ip, #2304]!	; 0x900

00011864 <scols_init_debug@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #90112	; 0x16000
   1186c:	ldr	pc, [ip, #2296]!	; 0x8f8

00011870 <strspn@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #90112	; 0x16000
   11878:	ldr	pc, [ip, #2288]!	; 0x8f0

0001187c <__assert_fail@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #90112	; 0x16000
   11884:	ldr	pc, [ip, #2280]!	; 0x8e8

Disassembly of section .text:

00011888 <.text>:
   11888:	push	{r3, lr}
   1188c:	movw	r0, #27588	; 0x6bc4
   11890:	movw	r1, #27600	; 0x6bd0
   11894:	movt	r0, #1
   11898:	movt	r1, #1
   1189c:	mov	r2, #195	; 0xc3
   118a0:	ldr	r3, [pc]	; 118a8 <__assert_fail@plt+0x2c>
   118a4:	bl	1187c <__assert_fail@plt>
   118a8:	andeq	r6, r1, r8, lsr #15
   118ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118b0:	movw	r2, #33160	; 0x8188
   118b4:	sub	sp, sp, #228	; 0xe4
   118b8:	movt	r2, #2
   118bc:	mov	r5, r1
   118c0:	mov	r4, r0
   118c4:	str	r2, [sp, #24]
   118c8:	movw	r1, #26976	; 0x6960
   118cc:	ldr	r2, [r2]
   118d0:	movt	r1, #1
   118d4:	mov	r0, #6
   118d8:	mov	r3, #0
   118dc:	str	r3, [sp, #56]	; 0x38
   118e0:	movw	sl, #33192	; 0x81a8
   118e4:	str	r3, [sp, #60]	; 0x3c
   118e8:	movt	sl, #2
   118ec:	str	r2, [sp, #220]	; 0xdc
   118f0:	bl	11768 <setlocale@plt>
   118f4:	movw	r0, #28100	; 0x6dc4
   118f8:	movw	r1, #28112	; 0x6dd0
   118fc:	movt	r0, #1
   11900:	movt	r1, #1
   11904:	bl	11804 <bindtextdomain@plt>
   11908:	movw	r0, #28100	; 0x6dc4
   1190c:	movt	r0, #1
   11910:	bl	11570 <textdomain@plt>
   11914:	movw	r0, #13952	; 0x3680
   11918:	movt	r0, #1
   1191c:	bl	16694 <__assert_fail@plt+0x4e18>
   11920:	ldr	r3, [sl]
   11924:	ands	r6, r3, #2
   11928:	beq	11c94 <__assert_fail@plt+0x418>
   1192c:	bl	114ec <getuid@plt>
   11930:	mov	r6, r0
   11934:	bl	11594 <geteuid@plt>
   11938:	cmp	r6, r0
   1193c:	beq	11d54 <__assert_fail@plt+0x4d8>
   11940:	ldr	r3, [sl]
   11944:	orr	r3, r3, #16777216	; 0x1000000
   11948:	str	r3, [sl]
   1194c:	ldr	r3, [sl]
   11950:	movw	r6, #33192	; 0x81a8
   11954:	movt	r6, #2
   11958:	orr	r3, r3, #2
   1195c:	str	r3, [sl]
   11960:	cmp	r3, #2
   11964:	beq	119b8 <__assert_fail@plt+0x13c>
   11968:	movw	r3, #33172	; 0x8194
   1196c:	movt	r3, #2
   11970:	ldr	r7, [r3]
   11974:	bl	11678 <getpid@plt>
   11978:	movw	r2, #27884	; 0x6cec
   1197c:	movw	r1, #28144	; 0x6df0
   11980:	movt	r2, #1
   11984:	movt	r1, #1
   11988:	str	r2, [sp]
   1198c:	movw	r2, #27868	; 0x6cdc
   11990:	str	r1, [sp, #4]
   11994:	movt	r2, #1
   11998:	mov	r1, #1
   1199c:	mov	r3, r0
   119a0:	mov	r0, r7
   119a4:	bl	11750 <__fprintf_chk@plt>
   119a8:	movw	r0, #28152	; 0x6df8
   119ac:	ldr	r1, [r6]
   119b0:	movt	r0, #1
   119b4:	bl	12940 <__assert_fail@plt+0x10c4>
   119b8:	add	r7, sp, #72	; 0x48
   119bc:	mov	r1, #0
   119c0:	mov	r2, #64	; 0x40
   119c4:	add	r3, sp, #80	; 0x50
   119c8:	mov	r0, r7
   119cc:	str	r3, [sp, #20]
   119d0:	movw	lr, #26320	; 0x66d0
   119d4:	movw	r6, #33184	; 0x81a0
   119d8:	str	lr, [sp, #28]
   119dc:	movt	r6, #2
   119e0:	bl	11720 <memset@plt>
   119e4:	ldr	r1, [sp, #28]
   119e8:	add	r2, sp, #80	; 0x50
   119ec:	mov	r3, #0
   119f0:	movt	r1, #1
   119f4:	str	r7, [sp, #72]	; 0x48
   119f8:	str	r1, [sp, #28]
   119fc:	str	r7, [sp, #76]	; 0x4c
   11a00:	str	r2, [sp, #80]	; 0x50
   11a04:	str	r3, [sp, #32]
   11a08:	str	r2, [sp, #84]	; 0x54
   11a0c:	mov	r8, #0
   11a10:	movw	r2, #28276	; 0x6e74
   11a14:	str	r8, [sp]
   11a18:	movt	r2, #1
   11a1c:	mov	r0, r4
   11a20:	mov	r1, r5
   11a24:	ldr	r3, [pc, #3484]	; 127c8 <__assert_fail@plt+0xf4c>
   11a28:	bl	11660 <getopt_long@plt>
   11a2c:	cmn	r0, #1
   11a30:	beq	11da0 <__assert_fail@plt+0x524>
   11a34:	cmp	r0, #73	; 0x49
   11a38:	ble	11ab8 <__assert_fail@plt+0x23c>
   11a3c:	ldr	r1, [pc, #3464]	; 127cc <__assert_fail@plt+0xf50>
   11a40:	mov	ip, r8
   11a44:	mov	lr, r8
   11a48:	add	r9, sp, #56	; 0x38
   11a4c:	sub	r8, r1, #64	; 0x40
   11a50:	mov	r3, #74	; 0x4a
   11a54:	cmp	r0, r3
   11a58:	blt	11a94 <__assert_fail@plt+0x218>
   11a5c:	movne	r2, r8
   11a60:	beq	11a7c <__assert_fail@plt+0x200>
   11a64:	ldr	r3, [r2, #4]!
   11a68:	cmp	r3, #0
   11a6c:	beq	11a94 <__assert_fail@plt+0x218>
   11a70:	cmp	r0, r3
   11a74:	blt	11a94 <__assert_fail@plt+0x218>
   11a78:	bne	11a64 <__assert_fail@plt+0x1e8>
   11a7c:	ldr	r3, [r9, lr, lsl #2]
   11a80:	cmp	r3, #0
   11a84:	streq	r0, [r9, lr, lsl #2]
   11a88:	beq	11a94 <__assert_fail@plt+0x218>
   11a8c:	cmp	r0, r3
   11a90:	bne	1222c <__assert_fail@plt+0x9b0>
   11a94:	ldr	r3, [r1]
   11a98:	add	ip, ip, #1
   11a9c:	mov	r8, r1
   11aa0:	cmp	r3, #0
   11aa4:	mov	lr, ip
   11aa8:	beq	11ab8 <__assert_fail@plt+0x23c>
   11aac:	cmp	r0, r3
   11ab0:	add	r1, r1, #64	; 0x40
   11ab4:	bge	11a54 <__assert_fail@plt+0x1d8>
   11ab8:	sub	r0, r0, #86	; 0x56
   11abc:	cmp	r0, #31
   11ac0:	ldrls	pc, [pc, r0, lsl #2]
   11ac4:	b	11c84 <__assert_fail@plt+0x408>
   11ac8:	andeq	r1, r1, r0, lsr ip
   11acc:	andeq	r1, r1, r4, lsl #25
   11ad0:	andeq	r1, r1, r4, lsl #25
   11ad4:	andeq	r1, r1, r4, lsl #25
   11ad8:	andeq	r1, r1, r4, lsl #25
   11adc:	andeq	r1, r1, r4, lsl #25
   11ae0:	andeq	r1, r1, r4, lsl #25
   11ae4:	andeq	r1, r1, r4, lsl #25
   11ae8:	andeq	r1, r1, r4, lsl #25
   11aec:	andeq	r1, r1, r4, lsl #25
   11af0:	andeq	r1, r1, r4, lsl #25
   11af4:	andeq	r1, r1, r4, lsl #25
   11af8:	andeq	r1, r1, r4, lsl #25
   11afc:	andeq	r1, r1, r4, lsl #25
   11b00:	andeq	r1, r1, r4, lsl #25
   11b04:	andeq	r1, r1, r4, lsl #25
   11b08:	andeq	r1, r1, r4, lsl #25
   11b0c:	andeq	r1, r1, r4, lsl #25
   11b10:	andeq	r1, r1, r0, lsr #24
   11b14:	andeq	r1, r1, r4, lsl #25
   11b18:	andeq	r1, r1, r4, lsl #25
   11b1c:	andeq	r1, r1, r4, lsl #25
   11b20:	andeq	r1, r1, r0, lsl ip
   11b24:	andeq	r1, r1, r4, lsl #25
   11b28:	andeq	r1, r1, r0, lsl #24
   11b2c:	strdeq	r1, [r1], -r4
   11b30:	andeq	r1, r1, r8, asr #23
   11b34:	andeq	r1, r1, r4, lsl #25
   11b38:			; <UNDEFINED> instruction: 0x00011bb8
   11b3c:	andeq	r1, r1, r4, lsl #25
   11b40:	andeq	r1, r1, r8, asr fp
   11b44:	andeq	r1, r1, r8, asr #22
   11b48:	ldrb	r3, [sp, #132]	; 0x84
   11b4c:	orr	r3, r3, #8
   11b50:	strb	r3, [sp, #132]	; 0x84
   11b54:	b	11a0c <__assert_fail@plt+0x190>
   11b58:	ldr	r9, [r6]
   11b5c:	mov	r8, #0
   11b60:	ldr	fp, [pc, #3176]	; 127d0 <__assert_fail@plt+0xf54>
   11b64:	movw	r3, #33184	; 0x81a0
   11b68:	movt	r3, #2
   11b6c:	str	r3, [sp, #36]	; 0x24
   11b70:	ldr	r0, [fp, #4]!
   11b74:	mov	r1, r9
   11b78:	bl	11498 <strcmp@plt>
   11b7c:	cmp	r0, #0
   11b80:	beq	11d80 <__assert_fail@plt+0x504>
   11b84:	add	r8, r8, #1
   11b88:	cmp	r8, #6
   11b8c:	bne	11b70 <__assert_fail@plt+0x2f4>
   11b90:	mov	r2, #5
   11b94:	movw	r1, #28548	; 0x6f84
   11b98:	mov	r0, #0
   11b9c:	movt	r1, #1
   11ba0:	bl	11558 <dcgettext@plt>
   11ba4:	ldr	r3, [sp, #36]	; 0x24
   11ba8:	ldr	r2, [r3]
   11bac:	mov	r1, r0
   11bb0:	mov	r0, #1
   11bb4:	bl	11774 <errx@plt>
   11bb8:	ldrb	r3, [sp, #132]	; 0x84
   11bbc:	orr	r3, r3, #1
   11bc0:	strb	r3, [sp, #132]	; 0x84
   11bc4:	b	11a0c <__assert_fail@plt+0x190>
   11bc8:	mov	r2, #5
   11bcc:	movw	r1, #28252	; 0x6e5c
   11bd0:	mov	r0, #0
   11bd4:	movt	r1, #1
   11bd8:	ldr	r8, [r6]
   11bdc:	bl	11558 <dcgettext@plt>
   11be0:	mov	r1, r0
   11be4:	mov	r0, r8
   11be8:	bl	147cc <__assert_fail@plt+0x2f50>
   11bec:	str	r0, [sp, #88]	; 0x58
   11bf0:	b	11a0c <__assert_fail@plt+0x190>
   11bf4:	ldr	lr, [r6]
   11bf8:	str	lr, [sp, #32]
   11bfc:	b	11a0c <__assert_fail@plt+0x190>
   11c00:	ldrb	r3, [sp, #132]	; 0x84
   11c04:	orr	r3, r3, #16
   11c08:	strb	r3, [sp, #132]	; 0x84
   11c0c:	b	11a0c <__assert_fail@plt+0x190>
   11c10:	ldrb	r3, [sp, #132]	; 0x84
   11c14:	orr	r3, r3, #4
   11c18:	strb	r3, [sp, #132]	; 0x84
   11c1c:	b	11a0c <__assert_fail@plt+0x190>
   11c20:	movw	r3, #33176	; 0x8198
   11c24:	movt	r3, #2
   11c28:	ldr	r0, [r3]
   11c2c:	bl	12a5c <__assert_fail@plt+0x11e0>
   11c30:	mov	r2, #5
   11c34:	movw	r1, #28220	; 0x6e3c
   11c38:	mov	r0, #0
   11c3c:	movt	r1, #1
   11c40:	bl	11558 <dcgettext@plt>
   11c44:	movw	r2, #33152	; 0x8180
   11c48:	movt	r2, #2
   11c4c:	movw	r3, #28232	; 0x6e48
   11c50:	movt	r3, #1
   11c54:	ldr	r2, [r2]
   11c58:	mov	r1, r0
   11c5c:	mov	r0, #1
   11c60:	bl	11738 <__printf_chk@plt>
   11c64:	mov	r0, #0
   11c68:	ldr	r1, [sp, #24]
   11c6c:	ldr	r2, [sp, #220]	; 0xdc
   11c70:	ldr	r3, [r1]
   11c74:	cmp	r2, r3
   11c78:	bne	12788 <__assert_fail@plt+0xf0c>
   11c7c:	add	sp, sp, #228	; 0xe4
   11c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c84:	movw	r3, #33172	; 0x8194
   11c88:	movt	r3, #2
   11c8c:	ldr	r0, [r3]
   11c90:	bl	12a5c <__assert_fail@plt+0x11e0>
   11c94:	movw	r0, #28132	; 0x6de4
   11c98:	movt	r0, #1
   11c9c:	bl	11600 <getenv@plt>
   11ca0:	subs	r7, r0, #0
   11ca4:	ldreq	r3, [sl]
   11ca8:	beq	11d40 <__assert_fail@plt+0x4c4>
   11cac:	add	r1, sp, #64	; 0x40
   11cb0:	mov	r2, r6
   11cb4:	bl	11690 <strtoul@plt>
   11cb8:	ldr	r3, [sp, #64]	; 0x40
   11cbc:	ldrsb	r3, [r3]
   11cc0:	cmp	r3, #0
   11cc4:	beq	11d34 <__assert_fail@plt+0x4b8>
   11cc8:	mov	r0, r7
   11ccc:	bl	11708 <__strdup@plt>
   11cd0:	cmp	r0, #0
   11cd4:	beq	11d34 <__assert_fail@plt+0x4b8>
   11cd8:	mov	ip, r6
   11cdc:	mov	r3, r0
   11ce0:	ldrb	r6, [r3]
   11ce4:	cmp	r6, #44	; 0x2c
   11ce8:	bne	11d00 <__assert_fail@plt+0x484>
   11cec:	add	r2, r3, #1
   11cf0:	mov	r3, r2
   11cf4:	ldrb	r6, [r2], #1
   11cf8:	cmp	r6, #44	; 0x2c
   11cfc:	beq	11cf0 <__assert_fail@plt+0x474>
   11d00:	cmp	r6, #0
   11d04:	beq	11d78 <__assert_fail@plt+0x4fc>
   11d08:	add	r1, r3, #1
   11d0c:	b	11d18 <__assert_fail@plt+0x49c>
   11d10:	cmp	r2, #44	; 0x2c
   11d14:	beq	11d6c <__assert_fail@plt+0x4f0>
   11d18:	mov	r3, r1
   11d1c:	add	r1, r1, #1
   11d20:	ldrb	r2, [r3]
   11d24:	cmp	r2, #0
   11d28:	bne	11d10 <__assert_fail@plt+0x494>
   11d2c:	str	r3, [sp, #64]	; 0x40
   11d30:	b	11ce0 <__assert_fail@plt+0x464>
   11d34:	mov	r6, r0
   11d38:	mov	r3, r6
   11d3c:	str	r6, [sl]
   11d40:	cmp	r3, #0
   11d44:	moveq	r3, #2
   11d48:	streq	r3, [sl]
   11d4c:	beq	119b8 <__assert_fail@plt+0x13c>
   11d50:	b	1192c <__assert_fail@plt+0xb0>
   11d54:	bl	11714 <getgid@plt>
   11d58:	mov	r6, r0
   11d5c:	bl	115b8 <getegid@plt>
   11d60:	cmp	r6, r0
   11d64:	bne	11940 <__assert_fail@plt+0xc4>
   11d68:	b	1194c <__assert_fail@plt+0xd0>
   11d6c:	strb	ip, [r3]
   11d70:	mov	r3, r1
   11d74:	b	11d2c <__assert_fail@plt+0x4b0>
   11d78:	bl	114f8 <free@plt>
   11d7c:	b	11d38 <__assert_fail@plt+0x4bc>
   11d80:	add	lr, sp, #224	; 0xe0
   11d84:	ldr	r3, [sp, #128]	; 0x80
   11d88:	add	r8, lr, r8, lsl #2
   11d8c:	mov	r1, #1
   11d90:	add	r3, r3, r1
   11d94:	str	r3, [sp, #128]	; 0x80
   11d98:	str	r1, [r8, #-120]	; 0xffffff88
   11d9c:	b	11a0c <__assert_fail@plt+0x190>
   11da0:	ldr	r3, [sp, #128]	; 0x80
   11da4:	cmp	r3, #0
   11da8:	bne	11dc8 <__assert_fail@plt+0x54c>
   11dac:	mov	r3, #1
   11db0:	str	r3, [sp, #104]	; 0x68
   11db4:	str	r3, [sp, #108]	; 0x6c
   11db8:	str	r3, [sp, #112]	; 0x70
   11dbc:	str	r3, [sp, #116]	; 0x74
   11dc0:	str	r3, [sp, #120]	; 0x78
   11dc4:	str	r3, [sp, #124]	; 0x7c
   11dc8:	movw	r3, #33168	; 0x8190
   11dcc:	movt	r3, #2
   11dd0:	ldr	r2, [r3]
   11dd4:	cmp	r4, r2
   11dd8:	ble	11e58 <__assert_fail@plt+0x5dc>
   11ddc:	ldr	r0, [sp, #88]	; 0x58
   11de0:	cmp	r0, #0
   11de4:	bne	1278c <__assert_fail@plt+0xf10>
   11de8:	ldr	r4, [r5, r2, lsl #2]
   11dec:	movw	r1, #28340	; 0x6eb4
   11df0:	mov	r2, #5
   11df4:	movt	r1, #1
   11df8:	bl	11558 <dcgettext@plt>
   11dfc:	mov	r1, r0
   11e00:	mov	r0, r4
   11e04:	bl	14854 <__assert_fail@plt+0x2fd8>
   11e08:	ldrb	r2, [sp, #132]	; 0x84
   11e0c:	ldr	lr, [sl, #4]
   11e10:	movw	r3, #33192	; 0x81a8
   11e14:	ubfx	ip, r2, #2, #1
   11e18:	movt	r3, #2
   11e1c:	cmp	lr, #0
   11e20:	eor	ip, ip, #1
   11e24:	bfi	r2, ip, #1, #1
   11e28:	strb	r2, [sp, #132]	; 0x84
   11e2c:	strd	r0, [sp, #96]	; 0x60
   11e30:	bne	11e9c <__assert_fail@plt+0x620>
   11e34:	mov	r2, #4
   11e38:	mov	r0, #5
   11e3c:	str	r2, [r3, #8]
   11e40:	mov	r1, #8
   11e44:	str	r2, [r3, #4]
   11e48:	mov	r2, #6
   11e4c:	str	r0, [r3, #12]
   11e50:	str	r1, [r3, #16]
   11e54:	str	r2, [r3, #20]
   11e58:	ldr	r2, [sl, #4]
   11e5c:	movw	r3, #33192	; 0x81a8
   11e60:	movt	r3, #2
   11e64:	cmp	r2, #0
   11e68:	bne	11e9c <__assert_fail@plt+0x620>
   11e6c:	mov	r1, #1
   11e70:	str	r2, [r3, #8]
   11e74:	str	r1, [r3, #12]
   11e78:	mov	r2, #3
   11e7c:	mov	r1, #4
   11e80:	str	r2, [r3, #16]
   11e84:	str	r1, [r3, #20]
   11e88:	mov	r2, #8
   11e8c:	str	r2, [r3, #24]
   11e90:	mov	r2, #6
   11e94:	str	r2, [r3, #4]
   11e98:	str	r2, [r3, #28]
   11e9c:	ldr	r2, [sp, #32]
   11ea0:	cmp	r2, #0
   11ea4:	beq	11ed0 <__assert_fail@plt+0x654>
   11ea8:	ldr	r1, [pc, #2340]	; 127d4 <__assert_fail@plt+0xf58>
   11eac:	movw	r3, #12396	; 0x306c
   11eb0:	ldr	r0, [sp, #32]
   11eb4:	movt	r3, #1
   11eb8:	mov	r2, #18
   11ebc:	str	r3, [sp]
   11ec0:	sub	r3, r1, #4
   11ec4:	bl	1518c <__assert_fail@plt+0x3910>
   11ec8:	cmp	r0, #0
   11ecc:	blt	121e4 <__assert_fail@plt+0x968>
   11ed0:	mov	r0, #0
   11ed4:	bl	11864 <scols_init_debug@plt>
   11ed8:	bl	13998 <__assert_fail@plt+0x211c>
   11edc:	movw	r3, #33192	; 0x81a8
   11ee0:	movt	r3, #2
   11ee4:	cmp	r0, #0
   11ee8:	str	r0, [sl, #80]	; 0x50
   11eec:	beq	127ac <__assert_fail@plt+0xf30>
   11ef0:	ldr	r3, [r3]
   11ef4:	tst	r3, #4
   11ef8:	bne	12118 <__assert_fail@plt+0x89c>
   11efc:	bl	13dcc <__assert_fail@plt+0x2550>
   11f00:	subs	r4, r0, #0
   11f04:	beq	121ec <__assert_fail@plt+0x970>
   11f08:	mov	r0, r4
   11f0c:	add	r1, sp, #64	; 0x40
   11f10:	bl	13e70 <__assert_fail@plt+0x25f4>
   11f14:	cmp	r0, #0
   11f18:	bne	121dc <__assert_fail@plt+0x960>
   11f1c:	mov	r0, r7
   11f20:	ldr	r1, [sp, #64]	; 0x40
   11f24:	bl	13110 <__assert_fail@plt+0x1894>
   11f28:	cmp	r0, #0
   11f2c:	cmnne	r0, #13
   11f30:	mov	r9, r0
   11f34:	beq	11f08 <__assert_fail@plt+0x68c>
   11f38:	cmn	r0, #2
   11f3c:	beq	11f08 <__assert_fail@plt+0x68c>
   11f40:	ldr	r3, [sl]
   11f44:	tst	r3, #4
   11f48:	bne	120c8 <__assert_fail@plt+0x84c>
   11f4c:	mov	r0, r4
   11f50:	bl	13e18 <__assert_fail@plt+0x259c>
   11f54:	cmp	r9, #0
   11f58:	beq	11f70 <__assert_fail@plt+0x6f4>
   11f5c:	ldr	r0, [sl, #80]	; 0x50
   11f60:	bl	139a4 <__assert_fail@plt+0x2128>
   11f64:	adds	r0, r9, #0
   11f68:	movne	r0, #1
   11f6c:	b	11c68 <__assert_fail@plt+0x3ec>
   11f70:	ldr	r3, [sl]
   11f74:	tst	r3, #8
   11f78:	bne	12364 <__assert_fail@plt+0xae8>
   11f7c:	ldr	fp, [sp, #72]	; 0x48
   11f80:	mov	ip, sl
   11f84:	movw	r3, #33172	; 0x8194
   11f88:	movw	lr, #27884	; 0x6cec
   11f8c:	movt	r3, #2
   11f90:	movt	lr, #1
   11f94:	movw	r1, #28432	; 0x6f10
   11f98:	str	r3, [sp, #32]
   11f9c:	movt	r1, #1
   11fa0:	str	lr, [sp, #36]	; 0x24
   11fa4:	str	r1, [sp, #40]	; 0x28
   11fa8:	str	r9, [sp, #52]	; 0x34
   11fac:	cmp	fp, r7
   11fb0:	beq	12410 <__assert_fail@plt+0xb94>
   11fb4:	sub	r8, fp, #120	; 0x78
   11fb8:	mov	r9, #0
   11fbc:	add	r2, r8, #16
   11fc0:	add	r3, r7, #8
   11fc4:	str	r2, [sp, #44]	; 0x2c
   11fc8:	str	r3, [sp, #48]	; 0x30
   11fcc:	ldr	lr, [sp, #44]	; 0x2c
   11fd0:	ldrd	r4, [lr, #8]!
   11fd4:	orrs	r1, r4, r5
   11fd8:	str	lr, [sp, #44]	; 0x2c
   11fdc:	beq	120b4 <__assert_fail@plt+0x838>
   11fe0:	ldr	sl, [sp, #80]	; 0x50
   11fe4:	ldr	r2, [sp, #48]	; 0x30
   11fe8:	cmp	sl, r2
   11fec:	bne	12004 <__assert_fail@plt+0x788>
   11ff0:	b	121fc <__assert_fail@plt+0x980>
   11ff4:	ldr	sl, [sl]
   11ff8:	ldr	r3, [sp, #20]
   11ffc:	cmp	sl, r3
   12000:	beq	121fc <__assert_fail@plt+0x980>
   12004:	ldrd	r2, [sl, #-20]	; 0xffffffec
   12008:	cmp	r5, r3
   1200c:	cmpeq	r4, r2
   12010:	bne	11ff4 <__assert_fail@plt+0x778>
   12014:	sub	r6, sl, #20
   12018:	add	sl, sl, #8
   1201c:	ldr	r3, [ip]
   12020:	tst	r3, #8
   12024:	bne	12168 <__assert_fail@plt+0x8ec>
   12028:	ldr	r3, [sp, #72]	; 0x48
   1202c:	cmp	r3, r7
   12030:	ldrne	r0, [fp, #-116]	; 0xffffff8c
   12034:	beq	12068 <__assert_fail@plt+0x7ec>
   12038:	ldr	r2, [r3, #-120]	; 0xffffff88
   1203c:	cmp	r2, r0
   12040:	subeq	r2, r3, #120	; 0x78
   12044:	streq	r2, [fp, #12]
   12048:	beq	1205c <__assert_fail@plt+0x7e0>
   1204c:	ldr	r2, [fp, #-120]	; 0xffffff88
   12050:	ldr	r1, [r3, #-116]	; 0xffffff8c
   12054:	cmp	r1, r2
   12058:	streq	r8, [r3, #12]
   1205c:	ldr	r3, [r3]
   12060:	cmp	r3, r7
   12064:	bne	12038 <__assert_fail@plt+0x7bc>
   12068:	ldr	r0, [r6, #8]
   1206c:	ldr	r2, [r6, #16]
   12070:	add	r0, r0, #9
   12074:	ldr	r1, [r6, #32]
   12078:	ldr	lr, [r6, #12]
   1207c:	cmp	r2, #0
   12080:	add	r3, r8, r0, lsl #3
   12084:	str	r3, [r6, #32]
   12088:	add	lr, lr, #1
   1208c:	str	sl, [r8, r0, lsl #3]
   12090:	str	r1, [r3, #4]
   12094:	str	r3, [r1]
   12098:	str	lr, [r6, #12]
   1209c:	beq	120b0 <__assert_fail@plt+0x834>
   120a0:	ldr	r2, [r2]
   120a4:	ldr	r3, [fp, #-120]	; 0xffffff88
   120a8:	cmp	r2, r3
   120ac:	ble	120b4 <__assert_fail@plt+0x838>
   120b0:	str	r8, [r6, #16]
   120b4:	add	r9, r9, #1
   120b8:	cmp	r9, #6
   120bc:	bne	11fcc <__assert_fail@plt+0x750>
   120c0:	ldr	fp, [fp]
   120c4:	b	11fac <__assert_fail@plt+0x730>
   120c8:	movw	r3, #33172	; 0x8194
   120cc:	movt	r3, #2
   120d0:	ldr	r5, [r3]
   120d4:	bl	11678 <getpid@plt>
   120d8:	movw	r2, #27884	; 0x6cec
   120dc:	movw	r1, #27892	; 0x6cf4
   120e0:	movt	r2, #1
   120e4:	movt	r1, #1
   120e8:	str	r2, [sp]
   120ec:	movw	r2, #27868	; 0x6cdc
   120f0:	str	r1, [sp, #4]
   120f4:	movt	r2, #1
   120f8:	mov	r1, #1
   120fc:	mov	r3, r0
   12100:	mov	r0, r5
   12104:	bl	11750 <__fprintf_chk@plt>
   12108:	movw	r0, #28416	; 0x6f00
   1210c:	movt	r0, #1
   12110:	bl	12940 <__assert_fail@plt+0x10c4>
   12114:	b	11f4c <__assert_fail@plt+0x6d0>
   12118:	movw	r3, #33172	; 0x8194
   1211c:	movt	r3, #2
   12120:	ldr	r4, [r3]
   12124:	bl	11678 <getpid@plt>
   12128:	movw	r2, #27884	; 0x6cec
   1212c:	movw	r1, #27892	; 0x6cf4
   12130:	movt	r2, #1
   12134:	movt	r1, #1
   12138:	str	r2, [sp]
   1213c:	movw	r2, #27868	; 0x6cdc
   12140:	str	r1, [sp, #4]
   12144:	movt	r2, #1
   12148:	mov	r1, #1
   1214c:	mov	r3, r0
   12150:	mov	r0, r4
   12154:	bl	11750 <__fprintf_chk@plt>
   12158:	movw	r0, #28400	; 0x6ef0
   1215c:	movt	r0, #1
   12160:	bl	12940 <__assert_fail@plt+0x10c4>
   12164:	b	11efc <__assert_fail@plt+0x680>
   12168:	ldr	r1, [sp, #32]
   1216c:	ldr	r4, [r1]
   12170:	str	ip, [sp, #16]
   12174:	bl	11678 <getpid@plt>
   12178:	ldr	r2, [sp, #36]	; 0x24
   1217c:	mov	r1, #1
   12180:	ldr	lr, [sp, #40]	; 0x28
   12184:	str	r2, [sp]
   12188:	movw	r2, #27868	; 0x6cdc
   1218c:	str	lr, [sp, #4]
   12190:	movt	r2, #1
   12194:	mov	r3, r0
   12198:	mov	r0, r4
   1219c:	bl	11750 <__fprintf_chk@plt>
   121a0:	ldr	r3, [r6, #8]
   121a4:	ldr	lr, [sp, #28]
   121a8:	movw	r1, #28468	; 0x6f34
   121ac:	mov	r0, r6
   121b0:	movt	r1, #1
   121b4:	add	r3, lr, r3, lsl #2
   121b8:	mov	r2, r8
   121bc:	ldr	r3, [r3, #248]	; 0xf8
   121c0:	str	r3, [sp]
   121c4:	ldrd	r4, [r6]
   121c8:	strd	r4, [sp, #8]
   121cc:	ldr	r3, [fp, #-120]	; 0xffffff88
   121d0:	bl	129b0 <__assert_fail@plt+0x1134>
   121d4:	ldr	ip, [sp, #16]
   121d8:	b	12028 <__assert_fail@plt+0x7ac>
   121dc:	mov	r9, #0
   121e0:	b	11f40 <__assert_fail@plt+0x6c4>
   121e4:	mov	r0, #1
   121e8:	b	11c68 <__assert_fail@plt+0x3ec>
   121ec:	bl	116cc <__errno_location@plt>
   121f0:	ldr	r3, [r0]
   121f4:	rsb	r9, r3, #0
   121f8:	b	11f40 <__assert_fail@plt+0x6c4>
   121fc:	mov	r0, #1
   12200:	mov	r1, #40	; 0x28
   12204:	str	ip, [sp, #16]
   12208:	bl	11468 <calloc@plt>
   1220c:	ldr	ip, [sp, #16]
   12210:	subs	r6, r0, #0
   12214:	bne	12324 <__assert_fail@plt+0xaa8>
   12218:	movw	r1, #27924	; 0x6d14
   1221c:	mov	r0, #1
   12220:	movt	r1, #1
   12224:	mov	r2, #40	; 0x28
   12228:	bl	11588 <err@plt>
   1222c:	movw	r4, #33172	; 0x8194
   12230:	movt	r4, #2
   12234:	mov	r0, #0
   12238:	mov	r2, #5
   1223c:	movw	r1, #28180	; 0x6e14
   12240:	movt	r1, #1
   12244:	ldr	r6, [r4]
   12248:	mov	r5, r0
   1224c:	bl	11558 <dcgettext@plt>
   12250:	movw	r3, #33152	; 0x8180
   12254:	movt	r3, #2
   12258:	mov	r1, #1
   1225c:	ldr	r3, [r3]
   12260:	mov	r2, r0
   12264:	mov	r0, r6
   12268:	bl	11750 <__fprintf_chk@plt>
   1226c:	ldr	r1, [r8, r5]
   12270:	cmp	r1, #0
   12274:	beq	122c8 <__assert_fail@plt+0xa4c>
   12278:	cmp	r1, #112	; 0x70
   1227c:	beq	12304 <__assert_fail@plt+0xa88>
   12280:	ldr	r2, [pc, #1344]	; 127c8 <__assert_fail@plt+0xf4c>
   12284:	b	12298 <__assert_fail@plt+0xa1c>
   12288:	add	r2, r2, #16
   1228c:	ldr	r0, [r2, #12]
   12290:	cmp	r0, r1
   12294:	beq	1230c <__assert_fail@plt+0xa90>
   12298:	ldr	r3, [r2, #16]
   1229c:	cmp	r3, #0
   122a0:	bne	12288 <__assert_fail@plt+0xa0c>
   122a4:	mov	r3, r1
   122a8:	movw	r2, #28540	; 0x6f7c
   122ac:	ldr	r0, [r4]
   122b0:	movt	r2, #1
   122b4:	mov	r1, #1
   122b8:	bl	11750 <__fprintf_chk@plt>
   122bc:	add	r5, r5, #4
   122c0:	cmp	r5, #60	; 0x3c
   122c4:	bne	1226c <__assert_fail@plt+0x9f0>
   122c8:	mov	r2, #5
   122cc:	movw	r1, #28196	; 0x6e24
   122d0:	mov	r0, #0
   122d4:	movt	r1, #1
   122d8:	ldr	r5, [r4]
   122dc:	bl	11558 <dcgettext@plt>
   122e0:	mov	r1, #1
   122e4:	mov	r2, r0
   122e8:	mov	r0, r5
   122ec:	bl	11750 <__fprintf_chk@plt>
   122f0:	ldr	r1, [r4]
   122f4:	mov	r0, #10
   122f8:	bl	117b0 <fputc@plt>
   122fc:	mov	r0, #1
   12300:	bl	11684 <exit@plt>
   12304:	movw	r3, #28092	; 0x6dbc
   12308:	movt	r3, #1
   1230c:	movw	r2, #28532	; 0x6f74
   12310:	ldr	r0, [r4]
   12314:	movt	r2, #1
   12318:	mov	r1, #1
   1231c:	bl	11750 <__fprintf_chk@plt>
   12320:	b	122bc <__assert_fail@plt+0xa40>
   12324:	ldr	r3, [ip]
   12328:	tst	r3, #8
   1232c:	bne	123b4 <__assert_fail@plt+0xb38>
   12330:	ldr	r3, [sp, #84]	; 0x54
   12334:	add	sl, r6, #28
   12338:	ldr	lr, [sp, #48]	; 0x30
   1233c:	add	r2, r6, #20
   12340:	str	r9, [r6, #8]
   12344:	strd	r4, [r6]
   12348:	str	lr, [r6, #20]
   1234c:	str	r3, [r6, #24]
   12350:	str	sl, [r6, #28]
   12354:	str	sl, [r6, #32]
   12358:	str	r2, [sp, #84]	; 0x54
   1235c:	str	r2, [r3]
   12360:	b	1201c <__assert_fail@plt+0x7a0>
   12364:	movw	r3, #33172	; 0x8194
   12368:	movt	r3, #2
   1236c:	ldr	r4, [r3]
   12370:	bl	11678 <getpid@plt>
   12374:	movw	r2, #27884	; 0x6cec
   12378:	movw	r1, #28432	; 0x6f10
   1237c:	movt	r2, #1
   12380:	movt	r1, #1
   12384:	str	r2, [sp]
   12388:	movw	r2, #27868	; 0x6cdc
   1238c:	str	r1, [sp, #4]
   12390:	movt	r2, #1
   12394:	mov	r1, #1
   12398:	mov	r3, r0
   1239c:	mov	r0, r4
   123a0:	bl	11750 <__fprintf_chk@plt>
   123a4:	movw	r0, #28436	; 0x6f14
   123a8:	movt	r0, #1
   123ac:	bl	12940 <__assert_fail@plt+0x10c4>
   123b0:	b	11f7c <__assert_fail@plt+0x700>
   123b4:	ldr	lr, [sp, #32]
   123b8:	ldr	sl, [lr]
   123bc:	str	ip, [sp, #16]
   123c0:	bl	11678 <getpid@plt>
   123c4:	ldr	r1, [sp, #36]	; 0x24
   123c8:	ldr	r2, [sp, #40]	; 0x28
   123cc:	str	r1, [sp]
   123d0:	mov	r1, #1
   123d4:	str	r2, [sp, #4]
   123d8:	movw	r2, #27868	; 0x6cdc
   123dc:	movt	r2, #1
   123e0:	mov	r3, r0
   123e4:	mov	r0, sl
   123e8:	bl	11750 <__fprintf_chk@plt>
   123ec:	ldr	r3, [pc, #996]	; 127d8 <__assert_fail@plt+0xf5c>
   123f0:	strd	r4, [sp]
   123f4:	movw	r1, #28456	; 0x6f28
   123f8:	mov	r0, r6
   123fc:	movt	r1, #1
   12400:	ldr	r2, [r3, r9, lsl #2]
   12404:	bl	129b0 <__assert_fail@plt+0x1134>
   12408:	ldr	ip, [sp, #16]
   1240c:	b	12330 <__assert_fail@plt+0xab4>
   12410:	ldr	r2, [sp, #80]	; 0x50
   12414:	add	r3, r7, #8
   12418:	ldr	r9, [sp, #52]	; 0x34
   1241c:	mov	sl, ip
   12420:	cmp	r2, r3
   12424:	beq	1260c <__assert_fail@plt+0xd90>
   12428:	mov	r2, #84	; 0x54
   1242c:	mov	r1, #0
   12430:	add	r0, sp, #136	; 0x88
   12434:	bl	11720 <memset@plt>
   12438:	ldr	r2, [sp, #84]	; 0x54
   1243c:	mov	r3, #0
   12440:	str	r9, [sp, #32]
   12444:	str	r3, [sp, #28]
   12448:	str	r3, [r2]
   1244c:	ldr	r4, [sp, #80]	; 0x50
   12450:	cmp	r4, #0
   12454:	beq	12510 <__assert_fail@plt+0xc94>
   12458:	mov	r1, #0
   1245c:	add	r6, sp, #132	; 0x84
   12460:	mov	r5, r1
   12464:	ldr	fp, [r4]
   12468:	str	r1, [r4]
   1246c:	ldr	r8, [r6, #4]
   12470:	cmp	r8, #0
   12474:	beq	124dc <__assert_fail@plt+0xc60>
   12478:	cmp	r4, #0
   1247c:	add	r9, sp, #64	; 0x40
   12480:	beq	124c4 <__assert_fail@plt+0xc48>
   12484:	mov	r0, r8
   12488:	mov	r1, r4
   1248c:	mov	r2, #0
   12490:	bl	12910 <__assert_fail@plt+0x1094>
   12494:	cmp	r0, #0
   12498:	strle	r8, [r9]
   1249c:	strgt	r4, [r9]
   124a0:	movle	r9, r8
   124a4:	movgt	r9, r4
   124a8:	ldrle	r8, [r8]
   124ac:	ldrgt	r4, [r4]
   124b0:	cmp	r4, #0
   124b4:	cmpne	r8, #0
   124b8:	bne	12484 <__assert_fail@plt+0xc08>
   124bc:	cmp	r8, #0
   124c0:	moveq	r8, r4
   124c4:	str	r8, [r9]
   124c8:	mov	r2, #0
   124cc:	add	r5, r5, #1
   124d0:	ldr	r4, [sp, #64]	; 0x40
   124d4:	str	r2, [r6, #4]!
   124d8:	b	1246c <__assert_fail@plt+0xbf0>
   124dc:	ldr	r3, [sp, #28]
   124e0:	cmp	r5, r3
   124e4:	bls	124fc <__assert_fail@plt+0xc80>
   124e8:	cmp	r5, #20
   124ec:	strne	r5, [sp, #28]
   124f0:	moveq	r3, #19
   124f4:	streq	r3, [sp, #28]
   124f8:	moveq	r5, r3
   124fc:	add	lr, sp, #224	; 0xe0
   12500:	add	r5, lr, r5, lsl #2
   12504:	str	r4, [r5, #-88]	; 0xffffffa8
   12508:	mov	r4, fp
   1250c:	b	12450 <__assert_fail@plt+0xbd4>
   12510:	ldr	r9, [sp, #32]
   12514:	mov	r6, r4
   12518:	ldr	r3, [sp, #28]
   1251c:	cmp	r6, r3
   12520:	beq	12588 <__assert_fail@plt+0xd0c>
   12524:	add	r1, sp, #136	; 0x88
   12528:	ldr	r5, [r1, r6, lsl #2]
   1252c:	cmp	r5, #0
   12530:	addne	r8, sp, #64	; 0x40
   12534:	bne	12564 <__assert_fail@plt+0xce8>
   12538:	b	12580 <__assert_fail@plt+0xd04>
   1253c:	mov	r0, r5
   12540:	mov	r1, r4
   12544:	mov	r2, #0
   12548:	bl	12910 <__assert_fail@plt+0x1094>
   1254c:	cmp	r0, #0
   12550:	strle	r5, [r8]
   12554:	strgt	r4, [r8]
   12558:	ldrle	r5, [r5]
   1255c:	ldrgt	r4, [r4]
   12560:	ldr	r8, [r8]
   12564:	cmp	r4, #0
   12568:	cmpne	r5, #0
   1256c:	bne	1253c <__assert_fail@plt+0xcc0>
   12570:	cmp	r5, #0
   12574:	moveq	r5, r4
   12578:	str	r5, [r8]
   1257c:	ldr	r4, [sp, #64]	; 0x40
   12580:	add	r6, r6, #1
   12584:	b	12518 <__assert_fail@plt+0xc9c>
   12588:	add	lr, sp, #224	; 0xe0
   1258c:	add	r5, r7, #8
   12590:	add	r3, lr, r6, lsl #2
   12594:	ldr	r6, [r3, #-88]	; 0xffffffa8
   12598:	b	125cc <__assert_fail@plt+0xd50>
   1259c:	mov	r0, r6
   125a0:	mov	r1, r4
   125a4:	mov	r2, #0
   125a8:	bl	12910 <__assert_fail@plt+0x1094>
   125ac:	cmp	r0, #0
   125b0:	strle	r6, [r5]
   125b4:	strgt	r4, [r5]
   125b8:	strle	r5, [r6, #4]
   125bc:	strgt	r5, [r4, #4]
   125c0:	ldrle	r6, [r6]
   125c4:	ldrgt	r4, [r4]
   125c8:	ldr	r5, [r5]
   125cc:	cmp	r4, #0
   125d0:	cmpne	r6, #0
   125d4:	bne	1259c <__assert_fail@plt+0xd20>
   125d8:	cmp	r6, #0
   125dc:	moveq	r6, r4
   125e0:	str	r6, [r5]
   125e4:	b	125ec <__assert_fail@plt+0xd70>
   125e8:	mov	r5, r3
   125ec:	ldr	r3, [r5]
   125f0:	ldr	r2, [r3]
   125f4:	str	r5, [r3, #4]
   125f8:	cmp	r2, #0
   125fc:	bne	125e8 <__assert_fail@plt+0xd6c>
   12600:	add	r2, r7, #8
   12604:	str	r2, [r3]
   12608:	str	r3, [sp, #84]	; 0x54
   1260c:	ldrd	r0, [sp, #96]	; 0x60
   12610:	orrs	r2, r0, r1
   12614:	beq	12664 <__assert_fail@plt+0xde8>
   12618:	ldr	r4, [sp, #80]	; 0x50
   1261c:	add	ip, r7, #8
   12620:	b	12638 <__assert_fail@plt+0xdbc>
   12624:	ldrd	r2, [r4, #-20]	; 0xffffffec
   12628:	cmp	r1, r3
   1262c:	cmpeq	r0, r2
   12630:	beq	12718 <__assert_fail@plt+0xe9c>
   12634:	ldr	r4, [r4]
   12638:	cmp	r4, ip
   1263c:	bne	12624 <__assert_fail@plt+0xda8>
   12640:	mov	r2, #5
   12644:	movw	r1, #28504	; 0x6f58
   12648:	mov	r0, #0
   1264c:	movt	r1, #1
   12650:	bl	11558 <dcgettext@plt>
   12654:	ldrd	r2, [sp, #96]	; 0x60
   12658:	mov	r1, r0
   1265c:	mov	r0, #1
   12660:	bl	11774 <errx@plt>
   12664:	mov	r0, r7
   12668:	bl	13558 <__assert_fail@plt+0x1cdc>
   1266c:	subs	r5, r0, #0
   12670:	beq	12710 <__assert_fail@plt+0xe94>
   12674:	ldr	r4, [sp, #80]	; 0x50
   12678:	add	r6, r7, #8
   1267c:	cmp	r4, r6
   12680:	beq	126fc <__assert_fail@plt+0xe80>
   12684:	ldr	r1, [sp, #88]	; 0x58
   12688:	cmp	r1, #0
   1268c:	beq	126e4 <__assert_fail@plt+0xe68>
   12690:	mov	r0, r4
   12694:	ldr	r3, [r0, #8]!
   12698:	cmp	r0, r3
   1269c:	beq	126dc <__assert_fail@plt+0xe60>
   126a0:	ldr	ip, [r4, #-12]
   126a4:	movw	r2, #65464	; 0xffb8
   126a8:	movt	r2, #65535	; 0xffff
   126ac:	lsl	ip, ip, #3
   126b0:	rsb	r2, ip, r2
   126b4:	ldr	ip, [r3, r2]
   126b8:	cmp	r1, ip
   126bc:	bne	126d0 <__assert_fail@plt+0xe54>
   126c0:	b	126e4 <__assert_fail@plt+0xe68>
   126c4:	ldr	ip, [r3, r2]
   126c8:	cmp	r1, ip
   126cc:	beq	126e4 <__assert_fail@plt+0xe68>
   126d0:	ldr	r3, [r3]
   126d4:	cmp	r0, r3
   126d8:	bne	126c4 <__assert_fail@plt+0xe48>
   126dc:	ldr	r4, [r4]
   126e0:	b	1267c <__assert_fail@plt+0xe00>
   126e4:	mov	r0, r7
   126e8:	mov	r1, r5
   126ec:	sub	r2, r4, #20
   126f0:	ldr	r3, [r4, #-4]
   126f4:	bl	12d3c <__assert_fail@plt+0x14c0>
   126f8:	b	126dc <__assert_fail@plt+0xe60>
   126fc:	mov	r0, r5
   12700:	bl	117a4 <scols_print_table@plt>
   12704:	mov	r0, r5
   12708:	bl	1163c <scols_unref_table@plt>
   1270c:	b	11f5c <__assert_fail@plt+0x6e0>
   12710:	mvn	r9, #11
   12714:	b	11f5c <__assert_fail@plt+0x6e0>
   12718:	mov	r0, r7
   1271c:	sub	fp, r4, #20
   12720:	bl	13558 <__assert_fail@plt+0x1cdc>
   12724:	subs	r6, r0, #0
   12728:	movne	r8, r4
   1272c:	ldrne	r5, [r8, #8]!
   12730:	bne	12758 <__assert_fail@plt+0xedc>
   12734:	b	12710 <__assert_fail@plt+0xe94>
   12738:	ldr	r2, [r4, #-12]
   1273c:	lsl	r2, r2, #3
   12740:	add	r2, r2, #72	; 0x48
   12744:	rsb	r2, r2, r5
   12748:	ldr	r3, [r2, #128]	; 0x80
   1274c:	cmp	r3, #0
   12750:	beq	12774 <__assert_fail@plt+0xef8>
   12754:	ldr	r5, [r5]
   12758:	cmp	r5, r8
   1275c:	bne	12738 <__assert_fail@plt+0xebc>
   12760:	mov	r0, r6
   12764:	bl	117a4 <scols_print_table@plt>
   12768:	mov	r0, r6
   1276c:	bl	1163c <scols_unref_table@plt>
   12770:	b	11f5c <__assert_fail@plt+0x6e0>
   12774:	mov	r0, r7
   12778:	mov	r1, r6
   1277c:	mov	r3, fp
   12780:	bl	12fec <__assert_fail@plt+0x1770>
   12784:	b	12754 <__assert_fail@plt+0xed8>
   12788:	bl	11564 <__stack_chk_fail@plt>
   1278c:	movw	r1, #28292	; 0x6e84
   12790:	mov	r0, #0
   12794:	movt	r1, #1
   12798:	mov	r2, #5
   1279c:	bl	11558 <dcgettext@plt>
   127a0:	mov	r1, r0
   127a4:	mov	r0, #1
   127a8:	bl	11774 <errx@plt>
   127ac:	movw	r1, #28368	; 0x6ed0
   127b0:	mov	r2, #5
   127b4:	movt	r1, #1
   127b8:	bl	11558 <dcgettext@plt>
   127bc:	mov	r1, r0
   127c0:	mov	r0, #1
   127c4:	bl	11588 <err@plt>
   127c8:	andeq	r6, r1, r4, ror r8
   127cc:	andeq	r6, r1, r4, lsr r8
   127d0:	andeq	r6, r1, r4, asr #15
   127d4:			; <UNDEFINED> instruction: 0x000281b0
   127d8:	andeq	r6, r1, r8, asr #15
   127dc:	mov	fp, #0
   127e0:	mov	lr, #0
   127e4:	pop	{r1}		; (ldr r1, [sp], #4)
   127e8:	mov	r2, sp
   127ec:	push	{r2}		; (str r2, [sp, #-4]!)
   127f0:	push	{r0}		; (str r0, [sp, #-4]!)
   127f4:	ldr	ip, [pc, #16]	; 1280c <__assert_fail@plt+0xf90>
   127f8:	push	{ip}		; (str ip, [sp, #-4]!)
   127fc:	ldr	r0, [pc, #12]	; 12810 <__assert_fail@plt+0xf94>
   12800:	ldr	r3, [pc, #12]	; 12814 <__assert_fail@plt+0xf98>
   12804:	bl	11618 <__libc_start_main@plt>
   12808:	bl	11828 <abort@plt>
   1280c:	muleq	r1, r0, r6
   12810:	andeq	r1, r1, ip, lsr #17
   12814:	andeq	r6, r1, ip, lsr #12
   12818:	ldr	r3, [pc, #20]	; 12834 <__assert_fail@plt+0xfb8>
   1281c:	ldr	r2, [pc, #20]	; 12838 <__assert_fail@plt+0xfbc>
   12820:	add	r3, pc, r3
   12824:	ldr	r2, [r3, r2]
   12828:	cmp	r2, #0
   1282c:	bxeq	lr
   12830:	b	11654 <__gmon_start__@plt>
   12834:	ldrdeq	r5, [r1], -r8
   12838:	andeq	r0, r0, r4, ror r1
   1283c:	push	{r3, lr}
   12840:	movw	r0, #33152	; 0x8180
   12844:	ldr	r3, [pc, #36]	; 12870 <__assert_fail@plt+0xff4>
   12848:	movt	r0, #2
   1284c:	rsb	r3, r0, r3
   12850:	cmp	r3, #6
   12854:	popls	{r3, pc}
   12858:	movw	r3, #0
   1285c:	movt	r3, #0
   12860:	cmp	r3, #0
   12864:	popeq	{r3, pc}
   12868:	blx	r3
   1286c:	pop	{r3, pc}
   12870:	andeq	r8, r2, r3, lsl #3
   12874:	push	{r3, lr}
   12878:	movw	r0, #33152	; 0x8180
   1287c:	movw	r3, #33152	; 0x8180
   12880:	movt	r0, #2
   12884:	movt	r3, #2
   12888:	rsb	r3, r0, r3
   1288c:	asr	r3, r3, #2
   12890:	add	r3, r3, r3, lsr #31
   12894:	asrs	r1, r3, #1
   12898:	popeq	{r3, pc}
   1289c:	movw	r2, #0
   128a0:	movt	r2, #0
   128a4:	cmp	r2, #0
   128a8:	popeq	{r3, pc}
   128ac:	blx	r2
   128b0:	pop	{r3, pc}
   128b4:	push	{r4, lr}
   128b8:	movw	r4, #33188	; 0x81a4
   128bc:	movt	r4, #2
   128c0:	ldrb	r3, [r4]
   128c4:	cmp	r3, #0
   128c8:	popne	{r4, pc}
   128cc:	bl	1283c <__assert_fail@plt+0xfc0>
   128d0:	mov	r3, #1
   128d4:	strb	r3, [r4]
   128d8:	pop	{r4, pc}
   128dc:	movw	r0, #32508	; 0x7efc
   128e0:	movt	r0, #2
   128e4:	push	{r3, lr}
   128e8:	ldr	r3, [r0]
   128ec:	cmp	r3, #0
   128f0:	beq	12908 <__assert_fail@plt+0x108c>
   128f4:	movw	r3, #0
   128f8:	movt	r3, #0
   128fc:	cmp	r3, #0
   12900:	beq	12908 <__assert_fail@plt+0x108c>
   12904:	blx	r3
   12908:	pop	{r3, lr}
   1290c:	b	12874 <__assert_fail@plt+0xff8>
   12910:	ldrd	r2, [r0, #-20]	; 0xffffffec
   12914:	ldrd	r0, [r1, #-20]	; 0xffffffec
   12918:	cmp	r3, r1
   1291c:	cmpeq	r2, r0
   12920:	beq	12938 <__assert_fail@plt+0x10bc>
   12924:	bls	12930 <__assert_fail@plt+0x10b4>
   12928:	mov	r0, #1
   1292c:	bx	lr
   12930:	mvn	r0, #0
   12934:	bx	lr
   12938:	mov	r0, #0
   1293c:	bx	lr
   12940:	push	{r0, r1, r2, r3}
   12944:	mov	r1, #1
   12948:	push	{r4, r5, lr}
   1294c:	movw	r4, #33160	; 0x8188
   12950:	movt	r4, #2
   12954:	sub	sp, sp, #12
   12958:	add	ip, sp, #28
   1295c:	movw	r5, #33172	; 0x8194
   12960:	ldr	lr, [r4]
   12964:	movt	r5, #2
   12968:	ldr	r2, [sp, #24]
   1296c:	mov	r3, ip
   12970:	ldr	r0, [r5]
   12974:	str	lr, [sp, #4]
   12978:	str	ip, [sp]
   1297c:	bl	11648 <__vfprintf_chk@plt>
   12980:	ldr	r1, [r5]
   12984:	mov	r0, #10
   12988:	bl	117b0 <fputc@plt>
   1298c:	ldr	r2, [sp, #4]
   12990:	ldr	r3, [r4]
   12994:	cmp	r2, r3
   12998:	bne	129ac <__assert_fail@plt+0x1130>
   1299c:	add	sp, sp, #12
   129a0:	pop	{r4, r5, lr}
   129a4:	add	sp, sp, #16
   129a8:	bx	lr
   129ac:	bl	11564 <__stack_chk_fail@plt>
   129b0:	push	{r1, r2, r3}
   129b4:	subs	r3, r0, #0
   129b8:	push	{r4, r5, r6, lr}
   129bc:	movw	r5, #33160	; 0x8188
   129c0:	movt	r5, #2
   129c4:	sub	sp, sp, #12
   129c8:	movweq	r4, #33172	; 0x8194
   129cc:	movteq	r4, #2
   129d0:	ldr	r2, [r5]
   129d4:	ldr	r6, [sp, #28]
   129d8:	str	r2, [sp, #4]
   129dc:	beq	12a10 <__assert_fail@plt+0x1194>
   129e0:	movw	r1, #33192	; 0x81a8
   129e4:	movt	r1, #2
   129e8:	movw	r4, #33172	; 0x8194
   129ec:	movt	r4, #2
   129f0:	ldr	r2, [r1]
   129f4:	tst	r2, #16777216	; 0x1000000
   129f8:	bne	12a10 <__assert_fail@plt+0x1194>
   129fc:	movw	r2, #26900	; 0x6914
   12a00:	ldr	r0, [r4]
   12a04:	movt	r2, #1
   12a08:	mov	r1, #1
   12a0c:	bl	11750 <__fprintf_chk@plt>
   12a10:	add	ip, sp, #32
   12a14:	mov	r2, r6
   12a18:	mov	r1, #1
   12a1c:	ldr	r0, [r4]
   12a20:	mov	r3, ip
   12a24:	str	ip, [sp]
   12a28:	bl	11648 <__vfprintf_chk@plt>
   12a2c:	ldr	r1, [r4]
   12a30:	mov	r0, #10
   12a34:	bl	117b0 <fputc@plt>
   12a38:	ldr	r2, [sp, #4]
   12a3c:	ldr	r3, [r5]
   12a40:	cmp	r2, r3
   12a44:	bne	12a58 <__assert_fail@plt+0x11dc>
   12a48:	add	sp, sp, #12
   12a4c:	pop	{r4, r5, r6, lr}
   12a50:	add	sp, sp, #12
   12a54:	bx	lr
   12a58:	bl	11564 <__stack_chk_fail@plt>
   12a5c:	push	{r4, r5, r6, r7, lr}
   12a60:	mov	r2, #5
   12a64:	sub	sp, sp, #12
   12a68:	mov	r5, r0
   12a6c:	movw	r1, #26908	; 0x691c
   12a70:	mov	r0, #0
   12a74:	movt	r1, #1
   12a78:	movw	r4, #26320	; 0x66d0
   12a7c:	bl	11558 <dcgettext@plt>
   12a80:	mov	r1, r5
   12a84:	bl	11810 <fputs@plt>
   12a88:	mov	r2, #5
   12a8c:	movw	r1, #26920	; 0x6928
   12a90:	mov	r0, #0
   12a94:	movt	r1, #1
   12a98:	movt	r4, #1
   12a9c:	bl	11558 <dcgettext@plt>
   12aa0:	movw	r3, #33152	; 0x8180
   12aa4:	movt	r3, #2
   12aa8:	mov	r1, #1
   12aac:	add	r7, r4, #216	; 0xd8
   12ab0:	ldr	r3, [r3]
   12ab4:	mov	r2, r0
   12ab8:	mov	r0, r5
   12abc:	bl	11750 <__fprintf_chk@plt>
   12ac0:	mov	r2, #5
   12ac4:	movw	r1, #27196	; 0x6a3c
   12ac8:	mov	r0, #0
   12acc:	movt	r1, #1
   12ad0:	bl	11558 <dcgettext@plt>
   12ad4:	mov	r1, r5
   12ad8:	bl	11810 <fputs@plt>
   12adc:	mov	r2, #5
   12ae0:	movw	r1, #26952	; 0x6948
   12ae4:	mov	r0, #0
   12ae8:	movt	r1, #1
   12aec:	bl	11558 <dcgettext@plt>
   12af0:	mov	r1, r5
   12af4:	bl	11810 <fputs@plt>
   12af8:	mov	r2, #5
   12afc:	movw	r1, #26980	; 0x6964
   12b00:	mov	r0, #0
   12b04:	movt	r1, #1
   12b08:	bl	11558 <dcgettext@plt>
   12b0c:	mov	r1, r5
   12b10:	bl	11810 <fputs@plt>
   12b14:	mov	r2, #5
   12b18:	movw	r1, #26992	; 0x6970
   12b1c:	mov	r0, #0
   12b20:	movt	r1, #1
   12b24:	bl	11558 <dcgettext@plt>
   12b28:	mov	r1, r5
   12b2c:	bl	11810 <fputs@plt>
   12b30:	mov	r2, #5
   12b34:	movw	r1, #27040	; 0x69a0
   12b38:	mov	r0, #0
   12b3c:	movt	r1, #1
   12b40:	bl	11558 <dcgettext@plt>
   12b44:	mov	r1, r5
   12b48:	bl	11810 <fputs@plt>
   12b4c:	mov	r2, #5
   12b50:	movw	r1, #27088	; 0x69d0
   12b54:	mov	r0, #0
   12b58:	movt	r1, #1
   12b5c:	bl	11558 <dcgettext@plt>
   12b60:	mov	r1, r5
   12b64:	bl	11810 <fputs@plt>
   12b68:	mov	r2, #5
   12b6c:	movw	r1, #27148	; 0x6a0c
   12b70:	mov	r0, #0
   12b74:	movt	r1, #1
   12b78:	bl	11558 <dcgettext@plt>
   12b7c:	mov	r1, r5
   12b80:	bl	11810 <fputs@plt>
   12b84:	mov	r2, #5
   12b88:	movw	r1, #27200	; 0x6a40
   12b8c:	mov	r0, #0
   12b90:	movt	r1, #1
   12b94:	bl	11558 <dcgettext@plt>
   12b98:	mov	r1, r5
   12b9c:	bl	11810 <fputs@plt>
   12ba0:	mov	r2, #5
   12ba4:	movw	r1, #27252	; 0x6a74
   12ba8:	mov	r0, #0
   12bac:	movt	r1, #1
   12bb0:	bl	11558 <dcgettext@plt>
   12bb4:	mov	r1, r5
   12bb8:	bl	11810 <fputs@plt>
   12bbc:	mov	r2, #5
   12bc0:	movw	r1, #27308	; 0x6aac
   12bc4:	mov	r0, #0
   12bc8:	movt	r1, #1
   12bcc:	bl	11558 <dcgettext@plt>
   12bd0:	mov	r1, r5
   12bd4:	bl	11810 <fputs@plt>
   12bd8:	mov	r2, #5
   12bdc:	movw	r1, #27196	; 0x6a3c
   12be0:	mov	r0, #0
   12be4:	movt	r1, #1
   12be8:	bl	11558 <dcgettext@plt>
   12bec:	mov	r1, r5
   12bf0:	bl	11810 <fputs@plt>
   12bf4:	mov	r2, #5
   12bf8:	movw	r1, #27380	; 0x6af4
   12bfc:	mov	r0, #0
   12c00:	movt	r1, #1
   12c04:	bl	11558 <dcgettext@plt>
   12c08:	mov	r1, r5
   12c0c:	bl	11810 <fputs@plt>
   12c10:	mov	r2, #5
   12c14:	movw	r1, #27424	; 0x6b20
   12c18:	mov	r0, #0
   12c1c:	movt	r1, #1
   12c20:	bl	11558 <dcgettext@plt>
   12c24:	mov	r1, r5
   12c28:	bl	11810 <fputs@plt>
   12c2c:	movw	r1, #27480	; 0x6b58
   12c30:	mov	r0, #0
   12c34:	movt	r1, #1
   12c38:	mov	r2, #5
   12c3c:	bl	11558 <dcgettext@plt>
   12c40:	mov	r1, r5
   12c44:	bl	11810 <fputs@plt>
   12c48:	ldr	r1, [r4, #20]
   12c4c:	mov	r2, #5
   12c50:	mov	r0, #0
   12c54:	ldr	r6, [r4]
   12c58:	bl	11558 <dcgettext@plt>
   12c5c:	add	r4, r4, #24
   12c60:	movw	r2, #27516	; 0x6b7c
   12c64:	mov	r1, #1
   12c68:	mov	r3, r6
   12c6c:	movt	r2, #1
   12c70:	str	r0, [sp]
   12c74:	mov	r0, r5
   12c78:	bl	11750 <__fprintf_chk@plt>
   12c7c:	cmp	r4, r7
   12c80:	bne	12c48 <__assert_fail@plt+0x13cc>
   12c84:	mov	r2, #5
   12c88:	movw	r1, #27528	; 0x6b88
   12c8c:	mov	r0, #0
   12c90:	movt	r1, #1
   12c94:	bl	11558 <dcgettext@plt>
   12c98:	movw	r3, #27556	; 0x6ba4
   12c9c:	mov	r1, #1
   12ca0:	movt	r3, #1
   12ca4:	mov	r2, r0
   12ca8:	mov	r0, r5
   12cac:	bl	11750 <__fprintf_chk@plt>
   12cb0:	movw	r3, #33172	; 0x8194
   12cb4:	movt	r3, #2
   12cb8:	ldr	r0, [r3]
   12cbc:	subs	r3, r5, r0
   12cc0:	rsbs	r0, r3, #0
   12cc4:	adcs	r0, r0, r3
   12cc8:	bl	11684 <exit@plt>
   12ccc:	push	{r1, r2, r3}
   12cd0:	mov	r1, #1
   12cd4:	push	{r4, lr}
   12cd8:	movw	r4, #33160	; 0x8188
   12cdc:	movt	r4, #2
   12ce0:	sub	sp, sp, #12
   12ce4:	add	ip, sp, #24
   12ce8:	ldr	lr, [r4]
   12cec:	ldr	r2, [sp, #20]
   12cf0:	mov	r3, ip
   12cf4:	str	ip, [sp]
   12cf8:	str	lr, [sp, #4]
   12cfc:	bl	116fc <__vasprintf_chk@plt>
   12d00:	cmp	r0, #0
   12d04:	blt	12d2c <__assert_fail@plt+0x14b0>
   12d08:	ldr	r2, [sp, #4]
   12d0c:	ldr	r3, [r4]
   12d10:	cmp	r2, r3
   12d14:	bne	12d28 <__assert_fail@plt+0x14ac>
   12d18:	add	sp, sp, #12
   12d1c:	pop	{r4, lr}
   12d20:	add	sp, sp, #12
   12d24:	bx	lr
   12d28:	bl	11564 <__stack_chk_fail@plt>
   12d2c:	movw	r1, #27564	; 0x6bac
   12d30:	mov	r0, #1
   12d34:	movt	r1, #1
   12d38:	bl	11588 <err@plt>
   12d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d40:	movw	r8, #33160	; 0x8188
   12d44:	movt	r8, #2
   12d48:	sub	sp, sp, #12
   12d4c:	subs	r9, r2, #0
   12d50:	mov	r7, r3
   12d54:	ldr	ip, [r8]
   12d58:	mov	r2, r1
   12d5c:	str	ip, [sp, #4]
   12d60:	beq	12fc8 <__assert_fail@plt+0x174c>
   12d64:	cmp	r1, #0
   12d68:	beq	12fac <__assert_fail@plt+0x1730>
   12d6c:	ldrb	r1, [r0, #60]	; 0x3c
   12d70:	ubfx	r1, r1, #1, #1
   12d74:	cmp	r1, #0
   12d78:	beq	12d88 <__assert_fail@plt+0x150c>
   12d7c:	ldr	r1, [r3, #132]	; 0x84
   12d80:	cmp	r1, #0
   12d84:	ldrne	r1, [r1, #128]	; 0x80
   12d88:	mov	r0, r2
   12d8c:	bl	11630 <scols_table_new_line@plt>
   12d90:	subs	r6, r0, #0
   12d94:	beq	12f90 <__assert_fail@plt+0x1714>
   12d98:	movw	r5, #33192	; 0x81a8
   12d9c:	movt	r5, #2
   12da0:	ldr	r3, [r5, #4]
   12da4:	cmp	r3, #0
   12da8:	ble	12f74 <__assert_fail@plt+0x16f8>
   12dac:	ldr	ip, [r5, #8]
   12db0:	mov	fp, #0
   12db4:	str	fp, [sp]
   12db8:	cmp	ip, #8
   12dbc:	addle	r4, r5, #8
   12dc0:	movwle	sl, #26320	; 0x66d0
   12dc4:	movtle	sl, #1
   12dc8:	bgt	12e5c <__assert_fail@plt+0x15e0>
   12dcc:	cmp	ip, #8
   12dd0:	ldrls	pc, [pc, ip, lsl #2]
   12dd4:	b	12e1c <__assert_fail@plt+0x15a0>
   12dd8:	andeq	r2, r1, r4, lsl pc
   12ddc:	strdeq	r2, [r1], -r0
   12de0:	andeq	r2, r1, ip, asr #30
   12de4:	andeq	r2, r1, r0, lsr pc
   12de8:	ldrdeq	r2, [r1], -r4
   12dec:			; <UNDEFINED> instruction: 0x00012eb8
   12df0:	muleq	r1, r4, lr
   12df4:	andeq	r2, r1, r8, ror lr
   12df8:	strdeq	r2, [r1], -ip
   12dfc:	ldr	r1, [r7, #16]
   12e00:	ldr	r0, [r5, #80]	; 0x50
   12e04:	bl	13954 <__assert_fail@plt+0x20d8>
   12e08:	movw	r1, #28572	; 0x6f9c
   12e0c:	movt	r1, #1
   12e10:	ldr	r2, [r0, #4]
   12e14:	mov	r0, sp
   12e18:	bl	12ccc <__assert_fail@plt+0x1450>
   12e1c:	ldr	r0, [sp]
   12e20:	cmp	r0, #0
   12e24:	beq	12e38 <__assert_fail@plt+0x15bc>
   12e28:	mov	r2, r0
   12e2c:	mov	r1, fp
   12e30:	mov	r0, r6
   12e34:	bl	1148c <scols_line_set_data@plt>
   12e38:	ldr	r3, [r5, #4]
   12e3c:	add	fp, fp, #1
   12e40:	cmp	r3, fp
   12e44:	ble	12f74 <__assert_fail@plt+0x16f8>
   12e48:	ldr	ip, [r4, #4]!
   12e4c:	mov	r3, #0
   12e50:	str	r3, [sp]
   12e54:	cmp	ip, #8
   12e58:	ble	12dcc <__assert_fail@plt+0x1550>
   12e5c:	movw	r0, #27624	; 0x6be8
   12e60:	movw	r1, #27600	; 0x6bd0
   12e64:	movt	r0, #1
   12e68:	movt	r1, #1
   12e6c:	mov	r2, #197	; 0xc5
   12e70:	ldr	r3, [pc, #364]	; 12fe4 <__assert_fail@plt+0x1768>
   12e74:	bl	1187c <__assert_fail@plt>
   12e78:	movw	r1, #27908	; 0x6d04
   12e7c:	mov	r0, sp
   12e80:	movt	r1, #1
   12e84:	ldr	r2, [r7, #16]
   12e88:	bl	12ccc <__assert_fail@plt+0x1450>
   12e8c:	ldr	r0, [sp]
   12e90:	b	12e20 <__assert_fail@plt+0x15a4>
   12e94:	ldr	r0, [r7]
   12e98:	bl	140f8 <__assert_fail@plt+0x287c>
   12e9c:	cmp	r0, #0
   12ea0:	str	r0, [sp]
   12ea4:	bne	12e28 <__assert_fail@plt+0x15ac>
   12ea8:	ldr	r0, [r7]
   12eac:	bl	14108 <__assert_fail@plt+0x288c>
   12eb0:	str	r0, [sp]
   12eb4:	b	12e20 <__assert_fail@plt+0x15a4>
   12eb8:	movw	r1, #27908	; 0x6d04
   12ebc:	mov	r0, sp
   12ec0:	movt	r1, #1
   12ec4:	ldr	r2, [r7, #4]
   12ec8:	bl	12ccc <__assert_fail@plt+0x1450>
   12ecc:	ldr	r0, [sp]
   12ed0:	b	12e20 <__assert_fail@plt+0x15a4>
   12ed4:	movw	r1, #27908	; 0x6d04
   12ed8:	mov	r0, sp
   12edc:	movt	r1, #1
   12ee0:	ldr	r2, [r7]
   12ee4:	bl	12ccc <__assert_fail@plt+0x1450>
   12ee8:	ldr	r0, [sp]
   12eec:	b	12e20 <__assert_fail@plt+0x15a4>
   12ef0:	ldr	r3, [r9, #8]
   12ef4:	movw	r1, #28572	; 0x6f9c
   12ef8:	mov	r0, sp
   12efc:	movt	r1, #1
   12f00:	add	r3, sl, r3, lsl #2
   12f04:	ldr	r2, [r3, #248]	; 0xf8
   12f08:	bl	12ccc <__assert_fail@plt+0x1450>
   12f0c:	ldr	r0, [sp]
   12f10:	b	12e20 <__assert_fail@plt+0x15a4>
   12f14:	movw	r1, #27820	; 0x6cac
   12f18:	mov	r0, sp
   12f1c:	movt	r1, #1
   12f20:	ldrd	r2, [r9]
   12f24:	bl	12ccc <__assert_fail@plt+0x1450>
   12f28:	ldr	r0, [sp]
   12f2c:	b	12e20 <__assert_fail@plt+0x15a4>
   12f30:	movw	r1, #27908	; 0x6d04
   12f34:	mov	r0, sp
   12f38:	movt	r1, #1
   12f3c:	ldr	r2, [r9, #12]
   12f40:	bl	12ccc <__assert_fail@plt+0x1450>
   12f44:	ldr	r0, [sp]
   12f48:	b	12e20 <__assert_fail@plt+0x15a4>
   12f4c:	ldr	r3, [r9, #8]
   12f50:	movw	r1, #27824	; 0x6cb0
   12f54:	mov	r0, sp
   12f58:	movt	r1, #1
   12f5c:	ldr	r2, [r7]
   12f60:	add	r3, sl, r3, lsl #2
   12f64:	ldr	r3, [r3, #248]	; 0xf8
   12f68:	bl	12ccc <__assert_fail@plt+0x1450>
   12f6c:	ldr	r0, [sp]
   12f70:	b	12e20 <__assert_fail@plt+0x15a4>
   12f74:	str	r6, [r7, #128]	; 0x80
   12f78:	ldr	r2, [sp, #4]
   12f7c:	ldr	r3, [r8]
   12f80:	cmp	r2, r3
   12f84:	bne	12fa8 <__assert_fail@plt+0x172c>
   12f88:	add	sp, sp, #12
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f90:	mov	r2, #5
   12f94:	movw	r1, #27788	; 0x6c8c
   12f98:	movt	r1, #1
   12f9c:	bl	11558 <dcgettext@plt>
   12fa0:	bl	11798 <warn@plt>
   12fa4:	b	12f78 <__assert_fail@plt+0x16fc>
   12fa8:	bl	11564 <__stack_chk_fail@plt>
   12fac:	movw	r0, #28036	; 0x6d84
   12fb0:	movw	r1, #27600	; 0x6bd0
   12fb4:	movt	r0, #1
   12fb8:	movt	r1, #1
   12fbc:	movw	r2, #451	; 0x1c3
   12fc0:	ldr	r3, [pc, #32]	; 12fe8 <__assert_fail@plt+0x176c>
   12fc4:	bl	1187c <__assert_fail@plt>
   12fc8:	movw	r0, #27620	; 0x6be4
   12fcc:	movw	r1, #27600	; 0x6bd0
   12fd0:	movt	r0, #1
   12fd4:	movt	r1, #1
   12fd8:	movw	r2, #450	; 0x1c2
   12fdc:	ldr	r3, [pc, #4]	; 12fe8 <__assert_fail@plt+0x176c>
   12fe0:	bl	1187c <__assert_fail@plt>
   12fe4:	andeq	r6, r1, r8, lsr #15
   12fe8:			; <UNDEFINED> instruction: 0x000167b8
   12fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff0:	mov	r9, r2
   12ff4:	ldrb	r2, [r0, #60]	; 0x3c
   12ff8:	sub	sp, sp, #4
   12ffc:	mov	r8, r0
   13000:	mov	fp, r1
   13004:	tst	r2, #2
   13008:	mov	sl, r3
   1300c:	beq	13028 <__assert_fail@plt+0x17ac>
   13010:	ldr	r2, [r9, #132]	; 0x84
   13014:	cmp	r2, #0
   13018:	beq	13028 <__assert_fail@plt+0x17ac>
   1301c:	ldr	ip, [r2, #128]	; 0x80
   13020:	cmp	ip, #0
   13024:	beq	13044 <__assert_fail@plt+0x17c8>
   13028:	mov	r0, r8
   1302c:	mov	r1, fp
   13030:	mov	r2, sl
   13034:	mov	r3, r9
   13038:	add	sp, sp, #4
   1303c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13040:	b	12d3c <__assert_fail@plt+0x14c0>
   13044:	ldr	ip, [r3, #8]
   13048:	add	ip, ip, #3
   1304c:	lsl	ip, ip, #3
   13050:	ldrd	r6, [r2, ip]
   13054:	ldrd	r4, [r9, ip]
   13058:	cmp	r7, r5
   1305c:	cmpeq	r6, r4
   13060:	bne	13028 <__assert_fail@plt+0x17ac>
   13064:	bl	12fec <__assert_fail@plt+0x1770>
   13068:	b	13028 <__assert_fail@plt+0x17ac>
   1306c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13070:	subs	r9, r0, #0
   13074:	mov	r7, r1
   13078:	movne	r4, #0
   1307c:	movwne	r8, #26320	; 0x66d0
   13080:	movne	r6, r4
   13084:	movtne	r8, #1
   13088:	beq	130f0 <__assert_fail@plt+0x1874>
   1308c:	ldr	r5, [r8, r4]
   13090:	mov	r0, r9
   13094:	mov	r2, r7
   13098:	mov	r1, r5
   1309c:	bl	116d8 <strncasecmp@plt>
   130a0:	cmp	r0, #0
   130a4:	bne	130b4 <__assert_fail@plt+0x1838>
   130a8:	ldrsb	r3, [r5, r7]
   130ac:	cmp	r3, #0
   130b0:	beq	130e8 <__assert_fail@plt+0x186c>
   130b4:	add	r4, r4, #24
   130b8:	add	r6, r6, #1
   130bc:	cmp	r4, #216	; 0xd8
   130c0:	bne	1308c <__assert_fail@plt+0x1810>
   130c4:	mov	r2, #5
   130c8:	movw	r1, #27848	; 0x6cc8
   130cc:	mov	r0, #0
   130d0:	movt	r1, #1
   130d4:	bl	11558 <dcgettext@plt>
   130d8:	mov	r1, r9
   130dc:	bl	116c0 <warnx@plt>
   130e0:	mvn	r0, #0
   130e4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   130e8:	mov	r0, r6
   130ec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   130f0:	movw	r0, #27840	; 0x6cc0
   130f4:	movw	r1, #27600	; 0x6bd0
   130f8:	movt	r0, #1
   130fc:	movt	r1, #1
   13100:	mov	r2, #181	; 0xb5
   13104:	ldr	r3, [pc]	; 1310c <__assert_fail@plt+0x1890>
   13108:	bl	1187c <__assert_fail@plt>
   1310c:	andeq	r6, r1, r0, ror #15
   13110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13114:	movw	r5, #33192	; 0x81a8
   13118:	movt	r5, #2
   1311c:	movw	r4, #33160	; 0x8188
   13120:	movt	r4, #2
   13124:	sub	sp, sp, #8448	; 0x2100
   13128:	ldr	r3, [r5]
   1312c:	sub	sp, sp, #20
   13130:	ldr	r2, [r4]
   13134:	mov	r9, r0
   13138:	tst	r3, #4
   1313c:	add	r3, sp, #8192	; 0x2000
   13140:	mov	r6, r1
   13144:	str	r2, [r3, #268]	; 0x10c
   13148:	bne	1336c <__assert_fail@plt+0x1af0>
   1314c:	mov	r1, #8192	; 0x2000
   13150:	str	r6, [sp, #4]
   13154:	mov	r3, r1
   13158:	mov	r2, #1
   1315c:	movw	ip, #27912	; 0x6d08
   13160:	add	r0, sp, #268	; 0x10c
   13164:	movt	ip, #1
   13168:	str	ip, [sp]
   1316c:	bl	11858 <__snprintf_chk@plt>
   13170:	add	r0, sp, #268	; 0x10c
   13174:	bl	115dc <opendir@plt>
   13178:	subs	r6, r0, #0
   1317c:	beq	133c0 <__assert_fail@plt+0x1b44>
   13180:	mov	r0, #1
   13184:	mov	r1, #136	; 0x88
   13188:	bl	11468 <calloc@plt>
   1318c:	subs	r8, r0, #0
   13190:	bne	131a8 <__assert_fail@plt+0x192c>
   13194:	movw	r1, #27924	; 0x6d14
   13198:	mov	r0, #1
   1319c:	movt	r1, #1
   131a0:	mov	r2, #136	; 0x88
   131a4:	bl	11588 <err@plt>
   131a8:	mov	r0, r6
   131ac:	bl	117ec <dirfd@plt>
   131b0:	add	r2, sp, #40	; 0x28
   131b4:	mov	r1, r0
   131b8:	mov	r0, #3
   131bc:	bl	115ac <__fxstat64@plt>
   131c0:	cmp	r0, #0
   131c4:	beq	1341c <__assert_fail@plt+0x1ba0>
   131c8:	mov	r0, r6
   131cc:	bl	117ec <dirfd@plt>
   131d0:	movw	r1, #27952	; 0x6d30
   131d4:	mov	r2, #0
   131d8:	movt	r1, #1
   131dc:	bl	116b4 <openat64@plt>
   131e0:	cmp	r0, #0
   131e4:	blt	133ec <__assert_fail@plt+0x1b70>
   131e8:	movw	r1, #27960	; 0x6d38
   131ec:	movt	r1, #1
   131f0:	bl	1145c <fdopen@plt>
   131f4:	cmp	r0, #0
   131f8:	str	r0, [sp, #12]
   131fc:	beq	133ec <__assert_fail@plt+0x1b70>
   13200:	add	lr, sp, #8448	; 0x2100
   13204:	movw	r3, #57216	; 0xdf80
   13208:	add	lr, lr, #16
   1320c:	movt	r3, #65535	; 0xffff
   13210:	movw	r7, #57108	; 0xdf14
   13214:	movt	r7, #65535	; 0xffff
   13218:	mov	ip, #0
   1321c:	add	r0, sp, #36	; 0x24
   13220:	str	ip, [lr, r3]
   13224:	add	r1, sp, #144	; 0x90
   13228:	mov	r2, #10
   1322c:	ldr	r3, [sp, #12]
   13230:	str	ip, [lr, r7]
   13234:	bl	11480 <__getdelim@plt>
   13238:	cmp	r0, #0
   1323c:	blt	13518 <__assert_fail@plt+0x1c9c>
   13240:	add	r3, sp, #8448	; 0x2100
   13244:	mov	r1, #41	; 0x29
   13248:	add	r3, r3, #16
   1324c:	ldr	fp, [r3, r7]
   13250:	mov	r0, fp
   13254:	bl	1178c <strrchr@plt>
   13258:	subs	sl, r0, #0
   1325c:	mov	r0, fp
   13260:	beq	1343c <__assert_fail@plt+0x1bc0>
   13264:	movw	r1, #27964	; 0x6d3c
   13268:	mov	r2, r8
   1326c:	movt	r1, #1
   13270:	bl	117bc <sscanf@plt>
   13274:	cmp	r0, #1
   13278:	bne	13430 <__assert_fail@plt+0x1bb4>
   1327c:	mov	r0, sl
   13280:	movw	r1, #27972	; 0x6d44
   13284:	add	r2, r8, #12
   13288:	movt	r1, #1
   1328c:	add	r3, r8, #4
   13290:	bl	117bc <sscanf@plt>
   13294:	cmp	r0, #2
   13298:	bne	13540 <__assert_fail@plt+0x1cc4>
   1329c:	add	lr, sp, #8448	; 0x2100
   132a0:	add	lr, lr, #16
   132a4:	ldr	r0, [lr, r7]
   132a8:	bl	114f8 <free@plt>
   132ac:	add	r3, sp, #252	; 0xfc
   132b0:	movw	lr, #27988	; 0x6d54
   132b4:	str	r5, [sp, #28]
   132b8:	movt	lr, #1
   132bc:	str	r3, [sp, #20]
   132c0:	mov	sl, #0
   132c4:	str	lr, [sp, #16]
   132c8:	mov	r7, r8
   132cc:	mov	fp, r9
   132d0:	str	r9, [sp, #24]
   132d4:	mov	r5, r3
   132d8:	b	132f0 <__assert_fail@plt+0x1a74>
   132dc:	add	sl, sl, #4
   132e0:	add	r7, r7, #8
   132e4:	cmp	sl, #24
   132e8:	add	fp, fp, #4
   132ec:	beq	13450 <__assert_fail@plt+0x1bd4>
   132f0:	add	r3, r7, #72	; 0x48
   132f4:	str	r3, [r7, #72]	; 0x48
   132f8:	str	r3, [r7, #76]	; 0x4c
   132fc:	ldr	r3, [fp, #32]
   13300:	cmp	r3, #0
   13304:	beq	132dc <__assert_fail@plt+0x1a60>
   13308:	mov	r0, r6
   1330c:	bl	117ec <dirfd@plt>
   13310:	ldr	r2, [pc, #572]	; 13554 <__assert_fail@plt+0x1cd8>
   13314:	ldr	r3, [sp, #16]
   13318:	mov	r1, #16
   1331c:	ldr	lr, [sl, r2]
   13320:	mov	r2, #1
   13324:	str	r3, [sp]
   13328:	mov	r3, r1
   1332c:	str	lr, [sp, #4]
   13330:	mov	r9, r0
   13334:	mov	r0, r5
   13338:	bl	11858 <__snprintf_chk@plt>
   1333c:	mov	lr, #0
   13340:	mov	r1, r9
   13344:	str	lr, [sp]
   13348:	mov	r0, #3
   1334c:	mov	r2, r5
   13350:	add	r3, sp, #144	; 0x90
   13354:	bl	115a0 <__fxstatat64@plt>
   13358:	cmp	r0, #0
   1335c:	bne	1348c <__assert_fail@plt+0x1c10>
   13360:	ldrd	r2, [sp, #240]	; 0xf0
   13364:	strd	r2, [r7, #24]
   13368:	b	132dc <__assert_fail@plt+0x1a60>
   1336c:	movw	r3, #33172	; 0x8194
   13370:	movt	r3, #2
   13374:	ldr	r7, [r3]
   13378:	bl	11678 <getpid@plt>
   1337c:	movw	r2, #27884	; 0x6cec
   13380:	movw	r1, #27892	; 0x6cf4
   13384:	movt	r2, #1
   13388:	movt	r1, #1
   1338c:	str	r2, [sp]
   13390:	movw	r2, #27868	; 0x6cdc
   13394:	str	r1, [sp, #4]
   13398:	movt	r2, #1
   1339c:	mov	r1, #1
   133a0:	mov	r3, r0
   133a4:	mov	r0, r7
   133a8:	bl	11750 <__fprintf_chk@plt>
   133ac:	movw	r0, #27900	; 0x6cfc
   133b0:	mov	r1, r6
   133b4:	movt	r0, #1
   133b8:	bl	12940 <__assert_fail@plt+0x10c4>
   133bc:	b	1314c <__assert_fail@plt+0x18d0>
   133c0:	bl	116cc <__errno_location@plt>
   133c4:	ldr	r0, [r0]
   133c8:	rsb	r0, r0, #0
   133cc:	add	r3, sp, #8192	; 0x2000
   133d0:	ldr	r2, [r3, #268]	; 0x10c
   133d4:	ldr	r3, [r4]
   133d8:	cmp	r2, r3
   133dc:	bne	13550 <__assert_fail@plt+0x1cd4>
   133e0:	add	sp, sp, #8448	; 0x2100
   133e4:	add	sp, sp, #20
   133e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ec:	bl	116cc <__errno_location@plt>
   133f0:	ldr	fp, [r0]
   133f4:	rsb	fp, fp, #0
   133f8:	mov	r0, r6
   133fc:	bl	11840 <closedir@plt>
   13400:	cmp	fp, #0
   13404:	moveq	r0, fp
   13408:	beq	133cc <__assert_fail@plt+0x1b50>
   1340c:	mov	r0, r8
   13410:	bl	114f8 <free@plt>
   13414:	mov	r0, fp
   13418:	b	133cc <__assert_fail@plt+0x1b50>
   1341c:	ldr	r1, [sp, #64]	; 0x40
   13420:	ldr	r0, [r5, #80]	; 0x50
   13424:	str	r1, [r8, #16]
   13428:	bl	139e0 <__assert_fail@plt+0x2164>
   1342c:	b	131c8 <__assert_fail@plt+0x194c>
   13430:	add	lr, sp, #8448	; 0x2100
   13434:	add	lr, lr, #16
   13438:	ldr	r0, [lr, r7]
   1343c:	mvn	fp, #21
   13440:	bl	114f8 <free@plt>
   13444:	ldr	r0, [sp, #12]
   13448:	bl	1175c <fclose@plt>
   1344c:	b	133f8 <__assert_fail@plt+0x1b7c>
   13450:	ldr	r5, [sp, #28]
   13454:	ldr	r9, [sp, #24]
   13458:	ldr	r3, [r5]
   1345c:	add	r5, r8, #120	; 0x78
   13460:	str	r5, [r8, #120]	; 0x78
   13464:	tst	r3, #4
   13468:	str	r5, [r8, #124]	; 0x7c
   1346c:	bne	134c0 <__assert_fail@plt+0x1c44>
   13470:	ldr	r3, [r9, #4]
   13474:	mov	fp, #0
   13478:	str	r5, [r9, #4]
   1347c:	str	r9, [r8, #120]	; 0x78
   13480:	str	r3, [r8, #124]	; 0x7c
   13484:	str	r5, [r3]
   13488:	b	13444 <__assert_fail@plt+0x1bc8>
   1348c:	bl	116cc <__errno_location@plt>
   13490:	ldr	r3, [r0]
   13494:	bics	r2, r3, #2
   13498:	rsb	r1, r3, #0
   1349c:	moveq	r2, #0
   134a0:	movne	r2, #1
   134a4:	cmp	r3, #13
   134a8:	moveq	r3, #0
   134ac:	andne	r3, r2, #1
   134b0:	cmp	r3, #0
   134b4:	beq	132dc <__assert_fail@plt+0x1a60>
   134b8:	mov	fp, r1
   134bc:	b	13444 <__assert_fail@plt+0x1bc8>
   134c0:	movw	r3, #33172	; 0x8194
   134c4:	movt	r3, #2
   134c8:	ldr	r7, [r3]
   134cc:	bl	11678 <getpid@plt>
   134d0:	movw	r2, #27884	; 0x6cec
   134d4:	movw	r1, #27892	; 0x6cf4
   134d8:	movt	r2, #1
   134dc:	movt	r1, #1
   134e0:	str	r2, [sp]
   134e4:	movw	r2, #27868	; 0x6cdc
   134e8:	str	r1, [sp, #4]
   134ec:	movt	r2, #1
   134f0:	mov	r1, #1
   134f4:	mov	r3, r0
   134f8:	mov	r0, r7
   134fc:	bl	11750 <__fprintf_chk@plt>
   13500:	mov	r0, r8
   13504:	movw	r1, #27996	; 0x6d5c
   13508:	ldr	r2, [r8]
   1350c:	movt	r1, #1
   13510:	bl	129b0 <__assert_fail@plt+0x1134>
   13514:	b	13470 <__assert_fail@plt+0x1bf4>
   13518:	bl	116cc <__errno_location@plt>
   1351c:	add	r2, sp, #8448	; 0x2100
   13520:	add	r2, r2, #16
   13524:	ldr	fp, [r0]
   13528:	ldr	r0, [r2, r7]
   1352c:	rsb	fp, fp, #0
   13530:	bl	114f8 <free@plt>
   13534:	cmp	fp, #0
   13538:	bge	132ac <__assert_fail@plt+0x1a30>
   1353c:	b	13444 <__assert_fail@plt+0x1bc8>
   13540:	add	r2, sp, #8448	; 0x2100
   13544:	add	r2, r2, #16
   13548:	ldr	r0, [r2, r7]
   1354c:	b	1343c <__assert_fail@plt+0x1bc0>
   13550:	bl	11564 <__stack_chk_fail@plt>
   13554:	andeq	r6, r1, r8, asr #15
   13558:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1355c:	mov	r6, r0
   13560:	bl	115c4 <scols_new_table@plt>
   13564:	subs	r7, r0, #0
   13568:	beq	13644 <__assert_fail@plt+0x1dc8>
   1356c:	ldrb	r1, [r6, #60]	; 0x3c
   13570:	movw	r9, #33192	; 0x81a8
   13574:	movt	r9, #2
   13578:	and	r1, r1, #1
   1357c:	bl	11510 <scols_table_enable_raw@plt>
   13580:	ldrb	r1, [r6, #60]	; 0x3c
   13584:	mov	r0, r7
   13588:	ubfx	r1, r1, #4, #1
   1358c:	bl	114c8 <scols_table_enable_noheadings@plt>
   13590:	ldr	r3, [r9, #4]
   13594:	cmp	r3, #0
   13598:	ble	1363c <__assert_fail@plt+0x1dc0>
   1359c:	ldr	r3, [r9, #8]
   135a0:	cmp	r3, #8
   135a4:	addle	r5, r9, #8
   135a8:	movwle	r8, #26320	; 0x66d0
   135ac:	movle	r4, #0
   135b0:	movtle	r8, #1
   135b4:	ble	135d8 <__assert_fail@plt+0x1d5c>
   135b8:	b	13660 <__assert_fail@plt+0x1de4>
   135bc:	ldr	r3, [r9, #4]
   135c0:	add	r4, r4, #1
   135c4:	cmp	r3, r4
   135c8:	ble	1363c <__assert_fail@plt+0x1dc0>
   135cc:	ldr	r3, [r5, #4]!
   135d0:	cmp	r3, #8
   135d4:	bgt	13660 <__assert_fail@plt+0x1de4>
   135d8:	add	r1, r3, r3, lsl #1
   135dc:	ldrb	r0, [r6, #60]	; 0x3c
   135e0:	add	ip, r8, r1, lsl #3
   135e4:	tst	r0, #8
   135e8:	ldr	r2, [ip, #16]
   135ec:	bicne	r2, r2, #1
   135f0:	tst	r0, #2
   135f4:	beq	13600 <__assert_fail@plt+0x1d84>
   135f8:	cmp	r3, #6
   135fc:	orreq	r2, r2, #2
   13600:	ldr	r1, [r8, r1, lsl #3]
   13604:	mov	r0, r7
   13608:	vldr	d0, [ip, #8]
   1360c:	bl	114e0 <scols_table_new_column@plt>
   13610:	subs	sl, r0, #0
   13614:	bne	135bc <__assert_fail@plt+0x1d40>
   13618:	mov	r2, #5
   1361c:	movw	r1, #28044	; 0x6d8c
   13620:	movt	r1, #1
   13624:	bl	11558 <dcgettext@plt>
   13628:	bl	116c0 <warnx@plt>
   1362c:	mov	r0, r7
   13630:	bl	1163c <scols_unref_table@plt>
   13634:	mov	r0, sl
   13638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1363c:	mov	r0, r7
   13640:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13644:	mov	r2, #5
   13648:	movw	r1, #28008	; 0x6d68
   1364c:	movt	r1, #1
   13650:	bl	11558 <dcgettext@plt>
   13654:	bl	11798 <warn@plt>
   13658:	mov	r0, r7
   1365c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13660:	movw	r0, #27624	; 0x6be8
   13664:	movw	r1, #27600	; 0x6bd0
   13668:	movt	r0, #1
   1366c:	movt	r1, #1
   13670:	mov	r2, #197	; 0xc5
   13674:	ldr	r3, [pc]	; 1367c <__assert_fail@plt+0x1e00>
   13678:	bl	1187c <__assert_fail@plt>
   1367c:	andeq	r6, r1, r8, lsr #15
   13680:	movw	r3, #33176	; 0x8198
   13684:	movt	r3, #2
   13688:	push	{r4, r5, r6, lr}
   1368c:	ldr	r4, [r3]
   13690:	mov	r0, r4
   13694:	bl	115d0 <__fpending@plt>
   13698:	mov	r6, r0
   1369c:	mov	r0, r4
   136a0:	bl	1151c <ferror@plt>
   136a4:	mov	r5, r0
   136a8:	mov	r0, r4
   136ac:	bl	1175c <fclose@plt>
   136b0:	adds	r4, r0, #0
   136b4:	movne	r4, #1
   136b8:	cmp	r5, #0
   136bc:	bne	13734 <__assert_fail@plt+0x1eb8>
   136c0:	cmp	r4, #0
   136c4:	beq	136e0 <__assert_fail@plt+0x1e64>
   136c8:	cmp	r6, #0
   136cc:	beq	13784 <__assert_fail@plt+0x1f08>
   136d0:	bl	116cc <__errno_location@plt>
   136d4:	ldr	r3, [r0]
   136d8:	cmp	r3, #32
   136dc:	bne	13798 <__assert_fail@plt+0x1f1c>
   136e0:	movw	r3, #33172	; 0x8194
   136e4:	movt	r3, #2
   136e8:	ldr	r4, [r3]
   136ec:	mov	r0, r4
   136f0:	bl	115d0 <__fpending@plt>
   136f4:	mov	r6, r0
   136f8:	mov	r0, r4
   136fc:	bl	1151c <ferror@plt>
   13700:	mov	r5, r0
   13704:	mov	r0, r4
   13708:	bl	1175c <fclose@plt>
   1370c:	adds	r4, r0, #0
   13710:	movne	r4, #1
   13714:	cmp	r5, #0
   13718:	beq	13760 <__assert_fail@plt+0x1ee4>
   1371c:	cmp	r4, #0
   13720:	bne	1372c <__assert_fail@plt+0x1eb0>
   13724:	bl	116cc <__errno_location@plt>
   13728:	str	r4, [r0]
   1372c:	mov	r0, #1
   13730:	bl	11534 <_exit@plt>
   13734:	cmp	r4, #0
   13738:	bne	136d0 <__assert_fail@plt+0x1e54>
   1373c:	bl	116cc <__errno_location@plt>
   13740:	str	r4, [r0]
   13744:	mov	r2, #5
   13748:	movw	r1, #28080	; 0x6db0
   1374c:	mov	r0, #0
   13750:	movt	r1, #1
   13754:	bl	11558 <dcgettext@plt>
   13758:	bl	116c0 <warnx@plt>
   1375c:	b	1372c <__assert_fail@plt+0x1eb0>
   13760:	cmp	r4, #0
   13764:	popeq	{r4, r5, r6, pc}
   13768:	cmp	r6, #0
   1376c:	bne	1372c <__assert_fail@plt+0x1eb0>
   13770:	bl	116cc <__errno_location@plt>
   13774:	ldr	r3, [r0]
   13778:	cmp	r3, #9
   1377c:	bne	1372c <__assert_fail@plt+0x1eb0>
   13780:	pop	{r4, r5, r6, pc}
   13784:	bl	116cc <__errno_location@plt>
   13788:	ldr	r3, [r0]
   1378c:	cmp	r3, #9
   13790:	bne	136d8 <__assert_fail@plt+0x1e5c>
   13794:	b	136e0 <__assert_fail@plt+0x1e64>
   13798:	cmp	r3, #0
   1379c:	beq	13744 <__assert_fail@plt+0x1ec8>
   137a0:	mov	r2, #5
   137a4:	movw	r1, #28080	; 0x6db0
   137a8:	mov	r0, #0
   137ac:	movt	r1, #1
   137b0:	bl	11558 <dcgettext@plt>
   137b4:	bl	11798 <warn@plt>
   137b8:	b	1372c <__assert_fail@plt+0x1eb0>
   137bc:	ldr	ip, [pc, #388]	; 13948 <__assert_fail@plt+0x20cc>
   137c0:	ldr	r3, [pc, #388]	; 1394c <__assert_fail@plt+0x20d0>
   137c4:	add	ip, pc, ip
   137c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   137cc:	sub	sp, sp, #1024	; 0x400
   137d0:	ldr	r8, [ip, r3]
   137d4:	sub	sp, sp, #12
   137d8:	mov	r4, r0
   137dc:	mov	r6, r1
   137e0:	mov	r0, #1
   137e4:	mov	r1, #12
   137e8:	ldr	r3, [r8]
   137ec:	mov	r9, r2
   137f0:	str	r3, [sp, #1028]	; 0x404
   137f4:	bl	11468 <calloc@plt>
   137f8:	subs	r5, r0, #0
   137fc:	beq	13894 <__assert_fail@plt+0x2018>
   13800:	cmp	r6, #0
   13804:	str	r9, [r5]
   13808:	beq	138d8 <__assert_fail@plt+0x205c>
   1380c:	mov	r1, r6
   13810:	mov	r2, #256	; 0x100
   13814:	mov	r0, sp
   13818:	bl	117d4 <mbstowcs@plt>
   1381c:	cmp	r0, #0
   13820:	bne	13920 <__assert_fail@plt+0x20a4>
   13824:	mov	r0, r6
   13828:	bl	1169c <strlen@plt>
   1382c:	mov	r7, r0
   13830:	cmp	r7, #0
   13834:	ble	138dc <__assert_fail@plt+0x2060>
   13838:	mov	r0, r6
   1383c:	bl	11708 <__strdup@plt>
   13840:	cmp	r0, #0
   13844:	str	r0, [r5, #4]
   13848:	beq	138fc <__assert_fail@plt+0x2080>
   1384c:	ldr	r3, [r4]
   13850:	cmp	r3, #0
   13854:	beq	138b0 <__assert_fail@plt+0x2034>
   13858:	ldr	r2, [r3, #8]
   1385c:	cmp	r2, #0
   13860:	bne	1386c <__assert_fail@plt+0x1ff0>
   13864:	b	1393c <__assert_fail@plt+0x20c0>
   13868:	mov	r2, r3
   1386c:	ldr	r3, [r2, #8]
   13870:	cmp	r3, #0
   13874:	bne	13868 <__assert_fail@plt+0x1fec>
   13878:	cmp	r7, #0
   1387c:	str	r5, [r2, #8]
   13880:	ble	138bc <__assert_fail@plt+0x2040>
   13884:	ldr	r3, [r4, #4]
   13888:	cmp	r3, r7
   1388c:	strge	r3, [r4, #4]
   13890:	strlt	r7, [r4, #4]
   13894:	ldr	r2, [sp, #1028]	; 0x404
   13898:	ldr	r3, [r8]
   1389c:	cmp	r2, r3
   138a0:	bne	13944 <__assert_fail@plt+0x20c8>
   138a4:	add	sp, sp, #1024	; 0x400
   138a8:	add	sp, sp, #12
   138ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   138b0:	cmp	r7, #0
   138b4:	str	r5, [r4]
   138b8:	bgt	13884 <__assert_fail@plt+0x2008>
   138bc:	ldr	r0, [r5, #4]
   138c0:	cmp	r0, #0
   138c4:	moveq	r7, r0
   138c8:	beq	13884 <__assert_fail@plt+0x2008>
   138cc:	bl	1169c <strlen@plt>
   138d0:	mov	r7, r0
   138d4:	b	13884 <__assert_fail@plt+0x2008>
   138d8:	mov	r7, r6
   138dc:	ldr	r2, [pc, #108]	; 13950 <__assert_fail@plt+0x20d4>
   138e0:	mov	r3, r9
   138e4:	add	r0, r5, #4
   138e8:	mov	r1, #1
   138ec:	add	r2, pc, r2
   138f0:	bl	115f4 <__asprintf_chk@plt>
   138f4:	cmp	r0, #0
   138f8:	bge	1384c <__assert_fail@plt+0x1fd0>
   138fc:	ldr	r2, [sp, #1028]	; 0x404
   13900:	ldr	r3, [r8]
   13904:	cmp	r2, r3
   13908:	bne	13944 <__assert_fail@plt+0x20c8>
   1390c:	mov	r0, r5
   13910:	add	sp, sp, #1024	; 0x400
   13914:	add	sp, sp, #12
   13918:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1391c:	b	114f8 <free@plt>
   13920:	mov	r0, sp
   13924:	mov	r1, #256	; 0x100
   13928:	mov	r3, #0
   1392c:	str	r3, [sp, #1024]	; 0x400
   13930:	bl	11780 <wcswidth@plt>
   13934:	mov	r7, r0
   13938:	b	13830 <__assert_fail@plt+0x1fb4>
   1393c:	mov	r2, r3
   13940:	b	13878 <__assert_fail@plt+0x1ffc>
   13944:	bl	11564 <__stack_chk_fail@plt>
   13948:	andeq	r4, r1, r4, lsr r8
   1394c:	andeq	r0, r0, r0, ror r1
   13950:	andeq	r3, r0, r0, lsr #16
   13954:	cmp	r0, #0
   13958:	bxeq	lr
   1395c:	ldr	r0, [r0]
   13960:	cmp	r0, #0
   13964:	bxeq	lr
   13968:	ldr	r3, [r0]
   1396c:	cmp	r3, r1
   13970:	bne	13984 <__assert_fail@plt+0x2108>
   13974:	b	13994 <__assert_fail@plt+0x2118>
   13978:	ldr	r3, [r0]
   1397c:	cmp	r3, r1
   13980:	bxeq	lr
   13984:	ldr	r0, [r0, #8]
   13988:	cmp	r0, #0
   1398c:	bne	13978 <__assert_fail@plt+0x20fc>
   13990:	bx	lr
   13994:	bx	lr
   13998:	mov	r0, #1
   1399c:	mov	r1, #8
   139a0:	b	11468 <calloc@plt>
   139a4:	push	{r4, r5, r6, lr}
   139a8:	mov	r6, r0
   139ac:	ldr	r4, [r0]
   139b0:	cmp	r4, #0
   139b4:	beq	139d4 <__assert_fail@plt+0x2158>
   139b8:	ldmib	r4, {r0, r5}
   139bc:	bl	114f8 <free@plt>
   139c0:	mov	r0, r4
   139c4:	bl	114f8 <free@plt>
   139c8:	cmp	r5, #0
   139cc:	mov	r4, r5
   139d0:	bne	139b8 <__assert_fail@plt+0x213c>
   139d4:	mov	r0, r6
   139d8:	pop	{r4, r5, r6, lr}
   139dc:	b	114f8 <free@plt>
   139e0:	push	{r3, r4, r5, lr}
   139e4:	mov	r5, r0
   139e8:	mov	r4, r1
   139ec:	bl	13954 <__assert_fail@plt+0x20d8>
   139f0:	cmp	r0, #0
   139f4:	popne	{r3, r4, r5, pc}
   139f8:	mov	r0, r4
   139fc:	bl	114b0 <getpwuid@plt>
   13a00:	mov	r2, r4
   13a04:	cmp	r0, #0
   13a08:	ldrne	r1, [r0]
   13a0c:	moveq	r1, r0
   13a10:	mov	r0, r5
   13a14:	pop	{r3, r4, r5, lr}
   13a18:	b	137bc <__assert_fail@plt+0x1f40>
   13a1c:	push	{r3, r4, r5, lr}
   13a20:	mov	r5, r0
   13a24:	mov	r4, r1
   13a28:	bl	13954 <__assert_fail@plt+0x20d8>
   13a2c:	cmp	r0, #0
   13a30:	popne	{r3, r4, r5, pc}
   13a34:	mov	r0, r4
   13a38:	bl	1184c <getgrgid@plt>
   13a3c:	mov	r2, r4
   13a40:	cmp	r0, #0
   13a44:	ldrne	r1, [r0]
   13a48:	moveq	r1, r0
   13a4c:	mov	r0, r5
   13a50:	pop	{r3, r4, r5, lr}
   13a54:	b	137bc <__assert_fail@plt+0x1f40>
   13a58:	ldr	r3, [pc, #368]	; 13bd0 <__assert_fail@plt+0x2354>
   13a5c:	mov	r2, #1
   13a60:	ldr	ip, [pc, #364]	; 13bd4 <__assert_fail@plt+0x2358>
   13a64:	add	r3, pc, r3
   13a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a6c:	sub	sp, sp, #8192	; 0x2000
   13a70:	ldr	r7, [r3, ip]
   13a74:	sub	sp, sp, #28
   13a78:	ldr	lr, [pc, #344]	; 13bd8 <__assert_fail@plt+0x235c>
   13a7c:	add	r6, sp, #20
   13a80:	str	r1, [sp, #8]
   13a84:	mov	r1, #8192	; 0x2000
   13a88:	str	r0, [sp, #4]
   13a8c:	add	lr, pc, lr
   13a90:	ldr	ip, [r7]
   13a94:	mov	r3, r1
   13a98:	str	lr, [sp]
   13a9c:	add	lr, sp, r1
   13aa0:	mov	r0, r6
   13aa4:	str	ip, [lr, #20]
   13aa8:	bl	11858 <__snprintf_chk@plt>
   13aac:	mov	r0, r6
   13ab0:	mov	r1, #0
   13ab4:	bl	115e8 <open64@plt>
   13ab8:	subs	r5, r0, #0
   13abc:	blt	13bc4 <__assert_fail@plt+0x2348>
   13ac0:	mov	r1, #0
   13ac4:	mov	r0, r6
   13ac8:	mov	r4, r1
   13acc:	mov	r2, #8192	; 0x2000
   13ad0:	bl	11720 <memset@plt>
   13ad4:	mov	fp, r4
   13ad8:	mov	r8, #8192	; 0x2000
   13adc:	mov	sl, r6
   13ae0:	b	13afc <__assert_fail@plt+0x2280>
   13ae4:	rsb	r8, r9, r8
   13ae8:	add	sl, sl, r9
   13aec:	cmp	r8, #0
   13af0:	add	r4, r4, r9
   13af4:	mov	fp, #0
   13af8:	beq	13b44 <__assert_fail@plt+0x22c8>
   13afc:	mov	r0, r5
   13b00:	mov	r1, sl
   13b04:	mov	r2, r8
   13b08:	bl	114d4 <read@plt>
   13b0c:	subs	r9, r0, #0
   13b10:	bgt	13ae4 <__assert_fail@plt+0x2268>
   13b14:	bl	116cc <__errno_location@plt>
   13b18:	ldr	r3, [r0]
   13b1c:	cmp	r3, #4
   13b20:	cmpne	r3, #11
   13b24:	beq	13b30 <__assert_fail@plt+0x22b4>
   13b28:	cmp	r9, #0
   13b2c:	bne	13b44 <__assert_fail@plt+0x22c8>
   13b30:	cmp	fp, #4
   13b34:	bgt	13b44 <__assert_fail@plt+0x22c8>
   13b38:	cmp	r8, #0
   13b3c:	add	fp, fp, #1
   13b40:	bne	13afc <__assert_fail@plt+0x2280>
   13b44:	cmp	r4, #0
   13b48:	beq	13b98 <__assert_fail@plt+0x231c>
   13b4c:	cmp	r4, #0
   13b50:	addne	r1, r4, r6
   13b54:	movne	r3, r6
   13b58:	movne	ip, #32
   13b5c:	beq	13b74 <__assert_fail@plt+0x22f8>
   13b60:	ldrb	r2, [r3], #1
   13b64:	cmp	r2, #0
   13b68:	strbeq	ip, [r3, #-1]
   13b6c:	cmp	r3, r1
   13b70:	bne	13b60 <__assert_fail@plt+0x22e4>
   13b74:	add	r2, sp, #8192	; 0x2000
   13b78:	mov	r0, r6
   13b7c:	add	r2, r2, #24
   13b80:	add	r3, r2, r4
   13b84:	mov	r2, #0
   13b88:	sub	r3, r3, #8192	; 0x2000
   13b8c:	strb	r2, [r3, #-5]
   13b90:	bl	11708 <__strdup@plt>
   13b94:	mov	r4, r0
   13b98:	mov	r0, r5
   13b9c:	bl	11834 <close@plt>
   13ba0:	add	r3, sp, #8192	; 0x2000
   13ba4:	mov	r0, r4
   13ba8:	ldr	r2, [r3, #20]
   13bac:	ldr	r3, [r7]
   13bb0:	cmp	r2, r3
   13bb4:	bne	13bcc <__assert_fail@plt+0x2350>
   13bb8:	add	sp, sp, #8192	; 0x2000
   13bbc:	add	sp, sp, #28
   13bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bc4:	mov	r4, #0
   13bc8:	b	13ba0 <__assert_fail@plt+0x2324>
   13bcc:	bl	11564 <__stack_chk_fail@plt>
   13bd0:	muleq	r1, r4, r5
   13bd4:	andeq	r0, r0, r0, ror r1
   13bd8:	andeq	r3, r0, r4, lsl #13
   13bdc:	ldr	ip, [pc, #156]	; 13c80 <__assert_fail@plt+0x2404>
   13be0:	mov	r1, #1
   13be4:	push	{r4, r5, r6, lr}
   13be8:	add	ip, pc, ip
   13bec:	ldr	lr, [pc, #144]	; 13c84 <__assert_fail@plt+0x2408>
   13bf0:	sub	sp, sp, #4096	; 0x1000
   13bf4:	sub	sp, sp, #16
   13bf8:	ldr	r3, [pc, #136]	; 13c88 <__assert_fail@plt+0x240c>
   13bfc:	add	r5, sp, #12
   13c00:	mov	r2, #4096	; 0x1000
   13c04:	ldr	r4, [ip, lr]
   13c08:	add	lr, sp, #8192	; 0x2000
   13c0c:	str	r0, [sp]
   13c10:	add	r3, pc, r3
   13c14:	mov	r0, r5
   13c18:	ldr	ip, [r4]
   13c1c:	str	ip, [lr, #-4084]	; 0xfffff00c
   13c20:	bl	116e4 <__sprintf_chk@plt>
   13c24:	mov	r0, #4
   13c28:	bl	1160c <malloc@plt>
   13c2c:	subs	r6, r0, #0
   13c30:	beq	13c6c <__assert_fail@plt+0x23f0>
   13c34:	mov	r0, r5
   13c38:	bl	115dc <opendir@plt>
   13c3c:	cmp	r0, #0
   13c40:	str	r0, [r6]
   13c44:	beq	13c6c <__assert_fail@plt+0x23f0>
   13c48:	mov	r0, r6
   13c4c:	add	r3, sp, #8192	; 0x2000
   13c50:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   13c54:	ldr	r3, [r4]
   13c58:	cmp	r2, r3
   13c5c:	bne	13c7c <__assert_fail@plt+0x2400>
   13c60:	add	sp, sp, #4096	; 0x1000
   13c64:	add	sp, sp, #16
   13c68:	pop	{r4, r5, r6, pc}
   13c6c:	mov	r0, r6
   13c70:	bl	114f8 <free@plt>
   13c74:	mov	r0, #0
   13c78:	b	13c4c <__assert_fail@plt+0x23d0>
   13c7c:	bl	11564 <__stack_chk_fail@plt>
   13c80:	andeq	r4, r1, r0, lsl r4
   13c84:	andeq	r0, r0, r0, ror r1
   13c88:	andeq	r3, r0, ip, lsl #10
   13c8c:	push	{r4, lr}
   13c90:	subs	r4, r0, #0
   13c94:	beq	13ca8 <__assert_fail@plt+0x242c>
   13c98:	ldr	r0, [r4]
   13c9c:	cmp	r0, #0
   13ca0:	beq	13ca8 <__assert_fail@plt+0x242c>
   13ca4:	bl	11840 <closedir@plt>
   13ca8:	mov	r0, r4
   13cac:	pop	{r4, lr}
   13cb0:	b	114f8 <free@plt>
   13cb4:	ldr	r3, [pc, #264]	; 13dc4 <__assert_fail@plt+0x2548>
   13cb8:	cmp	r1, #0
   13cbc:	cmpne	r0, #0
   13cc0:	ldr	r2, [pc, #256]	; 13dc8 <__assert_fail@plt+0x254c>
   13cc4:	add	r3, pc, r3
   13cc8:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ccc:	sub	sp, sp, #12
   13cd0:	ldr	r9, [r3, r2]
   13cd4:	mov	r6, r0
   13cd8:	mov	r5, r1
   13cdc:	movne	r4, #0
   13ce0:	moveq	r4, #1
   13ce4:	ldr	r3, [r9]
   13ce8:	str	r3, [sp, #4]
   13cec:	beq	13db8 <__assert_fail@plt+0x253c>
   13cf0:	str	r4, [r1]
   13cf4:	bl	116cc <__errno_location@plt>
   13cf8:	mov	r7, r0
   13cfc:	str	r4, [r0]
   13d00:	b	13d10 <__assert_fail@plt+0x2494>
   13d04:	ldr	r0, [r5]
   13d08:	cmp	r0, #0
   13d0c:	bne	13db0 <__assert_fail@plt+0x2534>
   13d10:	ldr	r0, [r6]
   13d14:	bl	117e0 <readdir64@plt>
   13d18:	subs	r4, r0, #0
   13d1c:	beq	13d9c <__assert_fail@plt+0x2520>
   13d20:	bl	1166c <__ctype_b_loc@plt>
   13d24:	ldrb	r3, [r4, #19]
   13d28:	lsl	r3, r3, #1
   13d2c:	ldr	r2, [r0]
   13d30:	ldrh	r3, [r2, r3]
   13d34:	tst	r3, #2048	; 0x800
   13d38:	beq	13d04 <__assert_fail@plt+0x2488>
   13d3c:	add	r4, r4, #19
   13d40:	mov	r1, sp
   13d44:	mov	r2, #10
   13d48:	mov	r0, r4
   13d4c:	bl	114a4 <strtol@plt>
   13d50:	str	r0, [r5]
   13d54:	ldr	r3, [r7]
   13d58:	cmp	r3, #0
   13d5c:	bne	13d80 <__assert_fail@plt+0x2504>
   13d60:	ldr	r3, [sp]
   13d64:	cmp	r4, r3
   13d68:	beq	13d80 <__assert_fail@plt+0x2504>
   13d6c:	cmp	r3, #0
   13d70:	beq	13d08 <__assert_fail@plt+0x248c>
   13d74:	ldrsb	r3, [r3]
   13d78:	cmp	r3, #0
   13d7c:	beq	13d08 <__assert_fail@plt+0x248c>
   13d80:	mvn	r0, #0
   13d84:	ldr	r2, [sp, #4]
   13d88:	ldr	r3, [r9]
   13d8c:	cmp	r2, r3
   13d90:	bne	13dc0 <__assert_fail@plt+0x2544>
   13d94:	add	sp, sp, #12
   13d98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13d9c:	ldr	r3, [r7]
   13da0:	cmp	r3, #0
   13da4:	moveq	r0, #1
   13da8:	beq	13d84 <__assert_fail@plt+0x2508>
   13dac:	b	13d80 <__assert_fail@plt+0x2504>
   13db0:	mov	r0, #0
   13db4:	b	13d84 <__assert_fail@plt+0x2508>
   13db8:	mvn	r0, #21
   13dbc:	b	13d84 <__assert_fail@plt+0x2508>
   13dc0:	bl	11564 <__stack_chk_fail@plt>
   13dc4:	andeq	r4, r1, r4, lsr r3
   13dc8:	andeq	r0, r0, r0, ror r1
   13dcc:	push	{r4, lr}
   13dd0:	mov	r0, #1
   13dd4:	mov	r1, #16
   13dd8:	bl	11468 <calloc@plt>
   13ddc:	subs	r4, r0, #0
   13de0:	beq	13e04 <__assert_fail@plt+0x2588>
   13de4:	ldr	r0, [pc, #40]	; 13e14 <__assert_fail@plt+0x2598>
   13de8:	add	r0, pc, r0
   13dec:	bl	115dc <opendir@plt>
   13df0:	cmp	r0, #0
   13df4:	str	r0, [r4]
   13df8:	beq	13e04 <__assert_fail@plt+0x2588>
   13dfc:	mov	r0, r4
   13e00:	pop	{r4, pc}
   13e04:	mov	r0, r4
   13e08:	bl	114f8 <free@plt>
   13e0c:	mov	r0, #0
   13e10:	pop	{r4, pc}
   13e14:	andeq	r3, r0, r8, lsl #2
   13e18:	push	{r4, lr}
   13e1c:	subs	r4, r0, #0
   13e20:	beq	13e34 <__assert_fail@plt+0x25b8>
   13e24:	ldr	r0, [r4]
   13e28:	cmp	r0, #0
   13e2c:	beq	13e34 <__assert_fail@plt+0x25b8>
   13e30:	bl	11840 <closedir@plt>
   13e34:	mov	r0, r4
   13e38:	pop	{r4, lr}
   13e3c:	b	114f8 <free@plt>
   13e40:	ldrb	r3, [r0, #12]
   13e44:	adds	r2, r1, #0
   13e48:	str	r1, [r0, #4]
   13e4c:	movne	r2, #1
   13e50:	bfi	r3, r2, #0, #1
   13e54:	strb	r3, [r0, #12]
   13e58:	bx	lr
   13e5c:	ldrb	r3, [r0, #12]
   13e60:	str	r1, [r0, #8]
   13e64:	orr	r3, r3, #2
   13e68:	strb	r3, [r0, #12]
   13e6c:	bx	lr
   13e70:	ldr	r3, [pc, #612]	; 140dc <__assert_fail@plt+0x2860>
   13e74:	cmp	r1, #0
   13e78:	cmpne	r0, #0
   13e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	sub	sp, sp, #8576	; 0x2180
   13e84:	ldr	r2, [pc, #596]	; 140e0 <__assert_fail@plt+0x2864>
   13e88:	sub	sp, sp, #20
   13e8c:	add	r3, pc, r3
   13e90:	mov	r4, r0
   13e94:	str	r1, [sp, #12]
   13e98:	add	r1, sp, #8192	; 0x2000
   13e9c:	ldr	r2, [r3, r2]
   13ea0:	movne	r5, #0
   13ea4:	moveq	r5, #1
   13ea8:	ldr	r3, [r2]
   13eac:	str	r2, [sp, #20]
   13eb0:	str	r3, [r1, #396]	; 0x18c
   13eb4:	beq	140d0 <__assert_fail@plt+0x2854>
   13eb8:	ldr	ip, [pc, #548]	; 140e4 <__assert_fail@plt+0x2868>
   13ebc:	movw	sl, #56976	; 0xde90
   13ec0:	ldr	r7, [pc, #544]	; 140e8 <__assert_fail@plt+0x286c>
   13ec4:	movt	sl, #65535	; 0xffff
   13ec8:	add	ip, pc, ip
   13ecc:	str	ip, [sp, #16]
   13ed0:	ldr	ip, [pc, #532]	; 140ec <__assert_fail@plt+0x2870>
   13ed4:	add	r7, pc, r7
   13ed8:	ldr	r9, [pc, #528]	; 140f0 <__assert_fail@plt+0x2874>
   13edc:	add	ip, pc, ip
   13ee0:	str	ip, [sp, #28]
   13ee4:	ldr	ip, [sp, #12]
   13ee8:	add	r9, pc, r9
   13eec:	ldr	r8, [pc, #512]	; 140f4 <__assert_fail@plt+0x2878>
   13ef0:	str	r5, [ip]
   13ef4:	add	r8, pc, r8
   13ef8:	bl	116cc <__errno_location@plt>
   13efc:	str	r0, [sp, #24]
   13f00:	str	r5, [r0]
   13f04:	ldr	r0, [r4]
   13f08:	bl	117e0 <readdir64@plt>
   13f0c:	subs	r5, r0, #0
   13f10:	beq	14098 <__assert_fail@plt+0x281c>
   13f14:	bl	1166c <__ctype_b_loc@plt>
   13f18:	ldrb	r3, [r5, #19]
   13f1c:	lsl	r3, r3, #1
   13f20:	ldr	r2, [r0]
   13f24:	ldrh	r3, [r2, r3]
   13f28:	tst	r3, #2048	; 0x800
   13f2c:	beq	13f04 <__assert_fail@plt+0x2688>
   13f30:	add	fp, sp, #396	; 0x18c
   13f34:	mov	r1, #8192	; 0x2000
   13f38:	mov	r3, r1
   13f3c:	add	r5, r5, #19
   13f40:	str	r7, [sp]
   13f44:	mov	r0, fp
   13f48:	str	r5, [sp, #4]
   13f4c:	mov	r2, #1
   13f50:	bl	11858 <__snprintf_chk@plt>
   13f54:	ldrb	r3, [r4, #12]
   13f58:	tst	r3, #2
   13f5c:	bne	14054 <__assert_fail@plt+0x27d8>
   13f60:	tst	r3, #1
   13f64:	beq	13fe0 <__assert_fail@plt+0x2764>
   13f68:	ldr	r0, [r4]
   13f6c:	bl	117ec <dirfd@plt>
   13f70:	str	r8, [sp]
   13f74:	mov	r1, r9
   13f78:	mov	r2, fp
   13f7c:	mov	r3, #524288	; 0x80000
   13f80:	bl	15a68 <__assert_fail@plt+0x41ec>
   13f84:	subs	r6, r0, #0
   13f88:	beq	13f04 <__assert_fail@plt+0x2688>
   13f8c:	mov	r2, r6
   13f90:	mov	r1, #8192	; 0x2000
   13f94:	mov	r0, fp
   13f98:	bl	11504 <fgets@plt>
   13f9c:	add	r1, sp, #8576	; 0x2180
   13fa0:	add	r1, r1, #16
   13fa4:	str	r0, [r1, sl]
   13fa8:	mov	r0, r6
   13fac:	add	r6, sp, #140	; 0x8c
   13fb0:	bl	1175c <fclose@plt>
   13fb4:	mov	r0, fp
   13fb8:	ldr	r1, [sp, #16]
   13fbc:	mov	r2, r6
   13fc0:	bl	117bc <sscanf@plt>
   13fc4:	cmp	r0, #1
   13fc8:	bne	13f04 <__assert_fail@plt+0x2688>
   13fcc:	mov	r0, r6
   13fd0:	ldr	r1, [r4, #4]
   13fd4:	bl	11498 <strcmp@plt>
   13fd8:	cmp	r0, #0
   13fdc:	bne	13f04 <__assert_fail@plt+0x2688>
   13fe0:	add	ip, sp, #8576	; 0x2180
   13fe4:	movw	r4, #56976	; 0xde90
   13fe8:	add	ip, ip, #16
   13fec:	movt	r4, #65535	; 0xffff
   13ff0:	add	r1, sp, #32
   13ff4:	mov	r0, r5
   13ff8:	mov	r2, #10
   13ffc:	mov	r3, #0
   14000:	str	r3, [ip, r4]
   14004:	bl	114a4 <strtol@plt>
   14008:	ldr	ip, [sp, #12]
   1400c:	str	r0, [ip]
   14010:	ldr	ip, [sp, #24]
   14014:	ldr	r0, [ip]
   14018:	cmp	r0, #0
   1401c:	rsbne	r0, r0, #0
   14020:	bne	140ac <__assert_fail@plt+0x2830>
   14024:	add	r1, sp, #8576	; 0x2180
   14028:	add	r1, r1, #16
   1402c:	ldr	r3, [r1, r4]
   14030:	cmp	r5, r3
   14034:	mvneq	r0, #0
   14038:	beq	140ac <__assert_fail@plt+0x2830>
   1403c:	cmp	r3, #0
   14040:	beq	140ac <__assert_fail@plt+0x2830>
   14044:	ldrsb	r0, [r3]
   14048:	subs	r0, r0, #0
   1404c:	mvnne	r0, #0
   14050:	b	140ac <__assert_fail@plt+0x2830>
   14054:	ldr	r0, [r4]
   14058:	add	r6, sp, #80	; 0x50
   1405c:	bl	117ec <dirfd@plt>
   14060:	mov	r2, #0
   14064:	sub	r3, r6, #48	; 0x30
   14068:	str	r2, [sp]
   1406c:	ldr	r1, [sp, #28]
   14070:	mov	r2, fp
   14074:	bl	15a3c <__assert_fail@plt+0x41c0>
   14078:	cmp	r0, #0
   1407c:	bne	13f04 <__assert_fail@plt+0x2688>
   14080:	ldr	r3, [r6, #-24]	; 0xffffffe8
   14084:	ldr	r2, [r4, #8]
   14088:	cmp	r2, r3
   1408c:	bne	13f04 <__assert_fail@plt+0x2688>
   14090:	ldrb	r3, [r4, #12]
   14094:	b	13f60 <__assert_fail@plt+0x26e4>
   14098:	ldr	ip, [sp, #24]
   1409c:	ldr	r3, [ip]
   140a0:	cmp	r3, #0
   140a4:	moveq	r0, #1
   140a8:	mvnne	r0, #0
   140ac:	ldr	ip, [sp, #20]
   140b0:	add	r3, sp, #8192	; 0x2000
   140b4:	ldr	r2, [r3, #396]	; 0x18c
   140b8:	ldr	r3, [ip]
   140bc:	cmp	r2, r3
   140c0:	bne	140d8 <__assert_fail@plt+0x285c>
   140c4:	add	sp, sp, #8576	; 0x2180
   140c8:	add	sp, sp, #20
   140cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d0:	mvn	r0, #21
   140d4:	b	140ac <__assert_fail@plt+0x2830>
   140d8:	bl	11564 <__stack_chk_fail@plt>
   140dc:	andeq	r4, r1, ip, ror #2
   140e0:	andeq	r0, r0, r0, ror r1
   140e4:	andeq	r3, r0, ip, ror #4
   140e8:	andeq	r3, r0, r8, asr r2
   140ec:	andeq	r3, r0, r4, lsl r0
   140f0:	andeq	r3, r0, r8
   140f4:	andeq	r2, r0, ip, lsr lr
   140f8:	ldr	r1, [pc, #4]	; 14104 <__assert_fail@plt+0x2888>
   140fc:	add	r1, pc, r1
   14100:	b	13a58 <__assert_fail@plt+0x21dc>
   14104:	andeq	r3, r0, r8, asr #32
   14108:	ldr	r1, [pc, #4]	; 14114 <__assert_fail@plt+0x2898>
   1410c:	add	r1, pc, r1
   14110:	b	13a58 <__assert_fail@plt+0x21dc>
   14114:	andeq	r3, r0, r0, asr #32
   14118:	cmp	r0, #0
   1411c:	mov	r3, #0
   14120:	str	r3, [r1]
   14124:	bxeq	lr
   14128:	ldrb	r2, [r0]
   1412c:	cmp	r2, #47	; 0x2f
   14130:	bne	14178 <__assert_fail@plt+0x28fc>
   14134:	ldrsb	r3, [r0, #1]
   14138:	cmp	r3, #47	; 0x2f
   1413c:	bne	14180 <__assert_fail@plt+0x2904>
   14140:	mov	r3, r0
   14144:	b	14164 <__assert_fail@plt+0x28e8>
   14148:	ldrb	r2, [r3, #1]
   1414c:	mov	r3, r0
   14150:	cmp	r2, #47	; 0x2f
   14154:	bne	14178 <__assert_fail@plt+0x28fc>
   14158:	ldrsb	r2, [r0, #1]
   1415c:	cmp	r2, #47	; 0x2f
   14160:	bne	14180 <__assert_fail@plt+0x2904>
   14164:	cmn	r3, #1
   14168:	add	r0, r0, #1
   1416c:	bne	14148 <__assert_fail@plt+0x28cc>
   14170:	mov	r0, #0
   14174:	bx	lr
   14178:	cmp	r2, #0
   1417c:	beq	14170 <__assert_fail@plt+0x28f4>
   14180:	mov	r3, #1
   14184:	str	r3, [r1]
   14188:	ldrsb	r3, [r0, #1]
   1418c:	cmp	r3, #47	; 0x2f
   14190:	cmpne	r3, #0
   14194:	bxeq	lr
   14198:	mov	r3, #2
   1419c:	str	r3, [r1]
   141a0:	ldrb	r2, [r0, r3]
   141a4:	add	r3, r3, #1
   141a8:	cmp	r2, #47	; 0x2f
   141ac:	cmpne	r2, #0
   141b0:	bne	1419c <__assert_fail@plt+0x2920>
   141b4:	bx	lr
   141b8:	push	{r3, r4, r5, r6, r7, lr}
   141bc:	mov	r7, r1
   141c0:	ldrb	r3, [r0]
   141c4:	cmp	r3, #0
   141c8:	beq	14240 <__assert_fail@plt+0x29c4>
   141cc:	mov	r4, #0
   141d0:	mov	r5, r0
   141d4:	mov	r6, r4
   141d8:	b	14208 <__assert_fail@plt+0x298c>
   141dc:	cmp	r3, #92	; 0x5c
   141e0:	mov	r0, r7
   141e4:	mov	r1, r3
   141e8:	beq	14230 <__assert_fail@plt+0x29b4>
   141ec:	bl	116a8 <strchr@plt>
   141f0:	cmp	r0, #0
   141f4:	bne	14238 <__assert_fail@plt+0x29bc>
   141f8:	ldrb	r3, [r5, #1]!
   141fc:	add	r4, r4, #1
   14200:	cmp	r3, #0
   14204:	beq	14228 <__assert_fail@plt+0x29ac>
   14208:	cmp	r6, #0
   1420c:	sxtb	r3, r3
   14210:	beq	141dc <__assert_fail@plt+0x2960>
   14214:	ldrb	r3, [r5, #1]!
   14218:	mov	r6, #0
   1421c:	add	r4, r4, #1
   14220:	cmp	r3, #0
   14224:	bne	14208 <__assert_fail@plt+0x298c>
   14228:	rsb	r0, r6, r4
   1422c:	pop	{r3, r4, r5, r6, r7, pc}
   14230:	mov	r6, #1
   14234:	b	141f8 <__assert_fail@plt+0x297c>
   14238:	mov	r0, r4
   1423c:	pop	{r3, r4, r5, r6, r7, pc}
   14240:	mov	r0, r3
   14244:	pop	{r3, r4, r5, r6, r7, pc}
   14248:	ldr	r3, [pc, #224]	; 14330 <__assert_fail@plt+0x2ab4>
   1424c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14250:	mov	r6, r0
   14254:	ldr	r0, [pc, #216]	; 14334 <__assert_fail@plt+0x2ab8>
   14258:	add	r3, pc, r3
   1425c:	sub	sp, sp, #12
   14260:	mov	r4, #0
   14264:	mov	r9, r1
   14268:	mov	r5, r2
   1426c:	ldr	r8, [r3, r0]
   14270:	str	r4, [sp]
   14274:	ldr	r3, [r8]
   14278:	str	r3, [sp, #4]
   1427c:	bl	116cc <__errno_location@plt>
   14280:	cmp	r6, r4
   14284:	mov	r7, r0
   14288:	str	r4, [r0]
   1428c:	beq	1429c <__assert_fail@plt+0x2a20>
   14290:	ldrsb	r3, [r6]
   14294:	cmp	r3, r4
   14298:	bne	142b4 <__assert_fail@plt+0x2a38>
   1429c:	ldr	r1, [pc, #148]	; 14338 <__assert_fail@plt+0x2abc>
   142a0:	mov	r2, r9
   142a4:	mov	r3, r6
   142a8:	mov	r0, #1
   142ac:	add	r1, pc, r1
   142b0:	bl	11774 <errx@plt>
   142b4:	mov	r3, r4
   142b8:	mov	r2, r5
   142bc:	mov	r0, r6
   142c0:	mov	r1, sp
   142c4:	bl	1154c <__strtoull_internal@plt>
   142c8:	ldr	r3, [r7]
   142cc:	cmp	r3, r4
   142d0:	bne	1430c <__assert_fail@plt+0x2a90>
   142d4:	ldr	r3, [sp]
   142d8:	cmp	r6, r3
   142dc:	beq	1429c <__assert_fail@plt+0x2a20>
   142e0:	cmp	r3, r4
   142e4:	beq	142f4 <__assert_fail@plt+0x2a78>
   142e8:	ldrsb	r3, [r3]
   142ec:	cmp	r3, r4
   142f0:	bne	1429c <__assert_fail@plt+0x2a20>
   142f4:	ldr	r2, [sp, #4]
   142f8:	ldr	r3, [r8]
   142fc:	cmp	r2, r3
   14300:	bne	1432c <__assert_fail@plt+0x2ab0>
   14304:	add	sp, sp, #12
   14308:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1430c:	cmp	r3, #34	; 0x22
   14310:	bne	1429c <__assert_fail@plt+0x2a20>
   14314:	ldr	r1, [pc, #32]	; 1433c <__assert_fail@plt+0x2ac0>
   14318:	mov	r2, r9
   1431c:	mov	r3, r6
   14320:	mov	r0, #1
   14324:	add	r1, pc, r1
   14328:	bl	11588 <err@plt>
   1432c:	bl	11564 <__stack_chk_fail@plt>
   14330:	andeq	r3, r1, r0, lsr #27
   14334:	andeq	r0, r0, r0, ror r1
   14338:	andeq	r2, r0, r8, lsr #29
   1433c:	andeq	r2, r0, r0, lsr lr
   14340:	ldr	r3, [pc, #596]	; 1459c <__assert_fail@plt+0x2d20>
   14344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14348:	add	r3, pc, r3
   1434c:	subs	r6, r0, #0
   14350:	ldr	r0, [pc, #584]	; 145a0 <__assert_fail@plt+0x2d24>
   14354:	mov	r8, r1
   14358:	mov	r1, r3
   1435c:	sub	sp, sp, #20
   14360:	mov	r9, r2
   14364:	ldr	sl, [r1, r0]
   14368:	mov	r2, #0
   1436c:	mov	r3, #0
   14370:	ldr	r1, [sl]
   14374:	strd	r2, [r8]
   14378:	str	r1, [sp, #12]
   1437c:	beq	14464 <__assert_fail@plt+0x2be8>
   14380:	ldrb	r5, [r6]
   14384:	cmp	r5, #0
   14388:	beq	14464 <__assert_fail@plt+0x2be8>
   1438c:	str	r6, [sp, #8]
   14390:	bl	1166c <__ctype_b_loc@plt>
   14394:	mov	r3, r6
   14398:	ldr	r1, [r0]
   1439c:	b	143b0 <__assert_fail@plt+0x2b34>
   143a0:	add	r2, r3, #1
   143a4:	str	r2, [sp, #8]
   143a8:	ldrb	r5, [r3, #1]
   143ac:	mov	r3, r2
   143b0:	lsl	r2, r5, #1
   143b4:	ldrh	r4, [r1, r2]
   143b8:	and	r4, r4, #8192	; 0x2000
   143bc:	uxth	r4, r4
   143c0:	cmp	r4, #0
   143c4:	bne	143a0 <__assert_fail@plt+0x2b24>
   143c8:	cmp	r5, #45	; 0x2d
   143cc:	beq	14464 <__assert_fail@plt+0x2be8>
   143d0:	add	r5, sp, #16
   143d4:	str	r4, [r5, #-8]!
   143d8:	bl	116cc <__errno_location@plt>
   143dc:	mov	r2, r4
   143e0:	mov	r1, r5
   143e4:	mov	r3, r4
   143e8:	mov	r7, r0
   143ec:	mov	r0, r6
   143f0:	str	r4, [r7]
   143f4:	bl	1154c <__strtoull_internal@plt>
   143f8:	mov	r5, r1
   143fc:	ldr	r1, [sp, #8]
   14400:	mov	r4, r0
   14404:	cmp	r1, r6
   14408:	beq	14464 <__assert_fail@plt+0x2be8>
   1440c:	ldr	r3, [r7]
   14410:	cmp	r3, #0
   14414:	bne	14448 <__assert_fail@plt+0x2bcc>
   14418:	cmp	r1, #0
   1441c:	beq	1454c <__assert_fail@plt+0x2cd0>
   14420:	ldrb	r0, [r1]
   14424:	cmp	r0, #0
   14428:	bne	1446c <__assert_fail@plt+0x2bf0>
   1442c:	strd	r4, [r8]
   14430:	ldr	r2, [sp, #12]
   14434:	ldr	r3, [sl]
   14438:	cmp	r2, r3
   1443c:	bne	14598 <__assert_fail@plt+0x2d1c>
   14440:	add	sp, sp, #20
   14444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14448:	subs	r2, r4, #1
   1444c:	mvn	r6, #2
   14450:	sbc	r3, r5, #0
   14454:	mvn	r7, #0
   14458:	cmp	r3, r7
   1445c:	cmpeq	r2, r6
   14460:	bls	14418 <__assert_fail@plt+0x2b9c>
   14464:	mvn	r0, #0
   14468:	b	14430 <__assert_fail@plt+0x2bb4>
   1446c:	ldrb	r2, [r1, #1]
   14470:	sxtb	r3, r2
   14474:	cmp	r3, #105	; 0x69
   14478:	beq	14554 <__assert_fail@plt+0x2cd8>
   1447c:	cmp	r3, #66	; 0x42
   14480:	beq	14530 <__assert_fail@plt+0x2cb4>
   14484:	cmp	r2, #0
   14488:	bne	14464 <__assert_fail@plt+0x2be8>
   1448c:	mov	r6, #1024	; 0x400
   14490:	ldr	r7, [pc, #268]	; 145a4 <__assert_fail@plt+0x2d28>
   14494:	sxtb	r3, r0
   14498:	str	r3, [sp, #4]
   1449c:	add	r7, pc, r7
   144a0:	mov	r1, r3
   144a4:	mov	r0, r7
   144a8:	bl	116a8 <strchr@plt>
   144ac:	ldr	r3, [sp, #4]
   144b0:	cmp	r0, #0
   144b4:	rsbne	fp, r7, r0
   144b8:	addne	fp, fp, #1
   144bc:	beq	14570 <__assert_fail@plt+0x2cf4>
   144c0:	cmp	fp, #0
   144c4:	beq	14520 <__assert_fail@plt+0x2ca4>
   144c8:	asr	r7, r6, #31
   144cc:	mvn	r0, #0
   144d0:	mvn	r1, #0
   144d4:	mov	r2, r6
   144d8:	mov	r3, r7
   144dc:	bl	15aa0 <__assert_fail@plt+0x4224>
   144e0:	cmp	r1, r5
   144e4:	cmpeq	r0, r4
   144e8:	bcc	14544 <__assert_fail@plt+0x2cc8>
   144ec:	sub	ip, fp, #1
   144f0:	mov	r3, #0
   144f4:	b	14508 <__assert_fail@plt+0x2c8c>
   144f8:	cmp	r1, r5
   144fc:	cmpeq	r0, r4
   14500:	add	r3, r3, #1
   14504:	bcc	14544 <__assert_fail@plt+0x2cc8>
   14508:	mul	r2, r4, r7
   1450c:	cmp	r3, ip
   14510:	mla	r2, r6, r5, r2
   14514:	umull	r4, r5, r4, r6
   14518:	add	r5, r2, r5
   1451c:	bne	144f8 <__assert_fail@plt+0x2c7c>
   14520:	mov	r0, #0
   14524:	cmp	r9, #0
   14528:	strne	fp, [r9]
   1452c:	b	1442c <__assert_fail@plt+0x2bb0>
   14530:	ldrsb	r3, [r1, #2]
   14534:	cmp	r3, #0
   14538:	bne	14464 <__assert_fail@plt+0x2be8>
   1453c:	mov	r6, #1000	; 0x3e8
   14540:	b	14490 <__assert_fail@plt+0x2c14>
   14544:	mvn	r0, #1
   14548:	b	14524 <__assert_fail@plt+0x2ca8>
   1454c:	mov	r0, r1
   14550:	b	1442c <__assert_fail@plt+0x2bb0>
   14554:	ldrsb	r3, [r1, #2]
   14558:	cmp	r3, #66	; 0x42
   1455c:	bne	14464 <__assert_fail@plt+0x2be8>
   14560:	ldrsb	r3, [r1, #3]
   14564:	cmp	r3, #0
   14568:	beq	1448c <__assert_fail@plt+0x2c10>
   1456c:	b	14464 <__assert_fail@plt+0x2be8>
   14570:	ldr	r7, [pc, #48]	; 145a8 <__assert_fail@plt+0x2d2c>
   14574:	mov	r1, r3
   14578:	add	r7, pc, r7
   1457c:	mov	r0, r7
   14580:	bl	116a8 <strchr@plt>
   14584:	cmp	r0, #0
   14588:	beq	14464 <__assert_fail@plt+0x2be8>
   1458c:	rsb	r7, r7, r0
   14590:	add	fp, r7, #1
   14594:	b	144c0 <__assert_fail@plt+0x2c44>
   14598:	bl	11564 <__stack_chk_fail@plt>
   1459c:			; <UNDEFINED> instruction: 0x00013cb0
   145a0:	andeq	r0, r0, r0, ror r1
   145a4:	andeq	r2, r0, r4, asr #25
   145a8:	strdeq	r2, [r0], -r4
   145ac:	mov	r2, #0
   145b0:	b	14340 <__assert_fail@plt+0x2ac4>
   145b4:	push	{r4, r5, r6, lr}
   145b8:	subs	r6, r0, #0
   145bc:	beq	14640 <__assert_fail@plt+0x2dc4>
   145c0:	ldrb	r4, [r6]
   145c4:	cmp	r4, #0
   145c8:	beq	14648 <__assert_fail@plt+0x2dcc>
   145cc:	bl	1166c <__ctype_b_loc@plt>
   145d0:	mov	r3, r6
   145d4:	ldr	r5, [r0]
   145d8:	b	145f4 <__assert_fail@plt+0x2d78>
   145dc:	cmn	r3, #1
   145e0:	beq	14630 <__assert_fail@plt+0x2db4>
   145e4:	ldrb	r4, [r3, #1]
   145e8:	mov	r3, r1
   145ec:	cmp	r4, #0
   145f0:	beq	14638 <__assert_fail@plt+0x2dbc>
   145f4:	lsl	r4, r4, #1
   145f8:	mov	ip, r3
   145fc:	add	r1, r3, #1
   14600:	ldrh	r2, [r5, r4]
   14604:	tst	r2, #2048	; 0x800
   14608:	bne	145dc <__assert_fail@plt+0x2d60>
   1460c:	cmp	ip, #0
   14610:	cmpne	ip, r6
   14614:	movls	r0, #0
   14618:	movhi	r0, #1
   1461c:	popls	{r4, r5, r6, pc}
   14620:	ldrsb	r0, [ip]
   14624:	rsbs	r0, r0, #1
   14628:	movcc	r0, #0
   1462c:	pop	{r4, r5, r6, pc}
   14630:	mov	r0, #0
   14634:	pop	{r4, r5, r6, pc}
   14638:	mov	ip, r1
   1463c:	b	1460c <__assert_fail@plt+0x2d90>
   14640:	mov	r0, r6
   14644:	pop	{r4, r5, r6, pc}
   14648:	mov	r0, r4
   1464c:	pop	{r4, r5, r6, pc}
   14650:	cmp	r1, #0
   14654:	push	{r4, r5}
   14658:	sub	r4, r1, #1
   1465c:	beq	146c8 <__assert_fail@plt+0x2e4c>
   14660:	ldrb	r1, [r0]
   14664:	cmp	r1, #0
   14668:	beq	146c8 <__assert_fail@plt+0x2e4c>
   1466c:	sxtb	r1, r1
   14670:	sxtb	r2, r2
   14674:	cmp	r1, r2
   14678:	beq	146b4 <__assert_fail@plt+0x2e38>
   1467c:	add	r1, r0, #1
   14680:	mov	r3, #0
   14684:	b	146a0 <__assert_fail@plt+0x2e24>
   14688:	ldrb	r0, [r1], #1
   1468c:	cmp	r0, #0
   14690:	sxtb	ip, r0
   14694:	beq	146b4 <__assert_fail@plt+0x2e38>
   14698:	cmp	ip, r2
   1469c:	beq	146bc <__assert_fail@plt+0x2e40>
   146a0:	cmp	r3, r4
   146a4:	mov	r5, r1
   146a8:	add	r3, r3, #1
   146ac:	bne	14688 <__assert_fail@plt+0x2e0c>
   146b0:	mov	r0, #0
   146b4:	pop	{r4, r5}
   146b8:	bx	lr
   146bc:	mov	r0, r5
   146c0:	pop	{r4, r5}
   146c4:	bx	lr
   146c8:	mov	r0, r1
   146cc:	b	146b4 <__assert_fail@plt+0x2e38>
   146d0:	ldr	r3, [pc, #228]	; 147bc <__assert_fail@plt+0x2f40>
   146d4:	ldr	r2, [pc, #228]	; 147c0 <__assert_fail@plt+0x2f44>
   146d8:	add	r3, pc, r3
   146dc:	push	{r4, r6, r7, r8, r9, lr}
   146e0:	subs	r6, r0, #0
   146e4:	ldr	r7, [r3, r2]
   146e8:	mov	r0, r3
   146ec:	sub	sp, sp, #8
   146f0:	mov	r4, #0
   146f4:	mov	r8, r1
   146f8:	ldr	r3, [r7]
   146fc:	str	r4, [sp]
   14700:	str	r3, [sp, #4]
   14704:	beq	14714 <__assert_fail@plt+0x2e98>
   14708:	ldrsb	r3, [r6]
   1470c:	cmp	r3, r4
   14710:	bne	1473c <__assert_fail@plt+0x2ec0>
   14714:	bl	116cc <__errno_location@plt>
   14718:	ldr	r3, [r0]
   1471c:	cmp	r3, #0
   14720:	bne	14768 <__assert_fail@plt+0x2eec>
   14724:	ldr	r1, [pc, #152]	; 147c4 <__assert_fail@plt+0x2f48>
   14728:	mov	r2, r8
   1472c:	mov	r3, r6
   14730:	mov	r0, #1
   14734:	add	r1, pc, r1
   14738:	bl	11774 <errx@plt>
   1473c:	bl	116cc <__errno_location@plt>
   14740:	mov	r3, r4
   14744:	mov	r1, sp
   14748:	mov	r2, #10
   1474c:	mov	r9, r0
   14750:	str	r4, [r0]
   14754:	mov	r0, r6
   14758:	bl	117f8 <__strtoll_internal@plt>
   1475c:	ldr	r3, [r9]
   14760:	cmp	r3, r4
   14764:	beq	14780 <__assert_fail@plt+0x2f04>
   14768:	ldr	r1, [pc, #88]	; 147c8 <__assert_fail@plt+0x2f4c>
   1476c:	mov	r2, r8
   14770:	mov	r3, r6
   14774:	mov	r0, #1
   14778:	add	r1, pc, r1
   1477c:	bl	11588 <err@plt>
   14780:	ldr	r3, [sp]
   14784:	cmp	r6, r3
   14788:	beq	14724 <__assert_fail@plt+0x2ea8>
   1478c:	cmp	r3, #0
   14790:	beq	147a0 <__assert_fail@plt+0x2f24>
   14794:	ldrsb	r3, [r3]
   14798:	cmp	r3, #0
   1479c:	bne	14724 <__assert_fail@plt+0x2ea8>
   147a0:	ldr	r2, [sp, #4]
   147a4:	ldr	r3, [r7]
   147a8:	cmp	r2, r3
   147ac:	bne	147b8 <__assert_fail@plt+0x2f3c>
   147b0:	add	sp, sp, #8
   147b4:	pop	{r4, r6, r7, r8, r9, pc}
   147b8:	bl	11564 <__stack_chk_fail@plt>
   147bc:	andeq	r3, r1, r0, lsr #18
   147c0:	andeq	r0, r0, r0, ror r1
   147c4:	andeq	r2, r0, r0, lsr #20
   147c8:	ldrdeq	r2, [r0], -ip
   147cc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   147d0:	mov	r8, r0
   147d4:	mov	r9, r1
   147d8:	bl	146d0 <__assert_fail@plt+0x2e54>
   147dc:	mvn	r4, #0
   147e0:	mov	r5, #0
   147e4:	adds	r6, r0, #-2147483648	; 0x80000000
   147e8:	adc	r7, r1, #0
   147ec:	cmp	r7, r5
   147f0:	cmpeq	r6, r4
   147f4:	popls	{r3, r4, r5, r6, r7, r8, r9, pc}
   147f8:	ldr	r1, [pc, #16]	; 14810 <__assert_fail@plt+0x2f94>
   147fc:	mov	r2, r9
   14800:	mov	r3, r8
   14804:	mov	r0, #1
   14808:	add	r1, pc, r1
   1480c:	bl	11774 <errx@plt>
   14810:	andeq	r2, r0, ip, asr #18
   14814:	push	{r3, r4, r5, lr}
   14818:	mov	r4, r0
   1481c:	mov	r5, r1
   14820:	bl	147cc <__assert_fail@plt+0x2f50>
   14824:	add	ip, r0, #32768	; 0x8000
   14828:	cmp	ip, #65536	; 0x10000
   1482c:	bcs	14838 <__assert_fail@plt+0x2fbc>
   14830:	sxth	r0, r0
   14834:	pop	{r3, r4, r5, pc}
   14838:	ldr	r1, [pc, #16]	; 14850 <__assert_fail@plt+0x2fd4>
   1483c:	mov	r2, r5
   14840:	mov	r3, r4
   14844:	mov	r0, #1
   14848:	add	r1, pc, r1
   1484c:	bl	11774 <errx@plt>
   14850:	andeq	r2, r0, ip, lsl #18
   14854:	mov	r2, #10
   14858:	b	14248 <__assert_fail@plt+0x29cc>
   1485c:	push	{r3, r4, r5, r6, r7, lr}
   14860:	mov	r6, r0
   14864:	mov	r7, r1
   14868:	bl	14854 <__assert_fail@plt+0x2fd8>
   1486c:	mvn	r4, #0
   14870:	mov	r5, #0
   14874:	cmp	r1, r5
   14878:	cmpeq	r0, r4
   1487c:	popls	{r3, r4, r5, r6, r7, pc}
   14880:	ldr	r1, [pc, #16]	; 14898 <__assert_fail@plt+0x301c>
   14884:	mov	r2, r7
   14888:	mov	r3, r6
   1488c:	mov	r0, #1
   14890:	add	r1, pc, r1
   14894:	bl	11774 <errx@plt>
   14898:	andeq	r2, r0, r4, asr #17
   1489c:	push	{r3, r4, r5, lr}
   148a0:	mov	r4, r0
   148a4:	mov	r5, r1
   148a8:	bl	1485c <__assert_fail@plt+0x2fe0>
   148ac:	cmp	r0, #65536	; 0x10000
   148b0:	bcs	148bc <__assert_fail@plt+0x3040>
   148b4:	uxth	r0, r0
   148b8:	pop	{r3, r4, r5, pc}
   148bc:	ldr	r1, [pc, #16]	; 148d4 <__assert_fail@plt+0x3058>
   148c0:	mov	r2, r5
   148c4:	mov	r3, r4
   148c8:	mov	r0, #1
   148cc:	add	r1, pc, r1
   148d0:	bl	11774 <errx@plt>
   148d4:	andeq	r2, r0, r8, lsl #17
   148d8:	mov	r2, #16
   148dc:	b	14248 <__assert_fail@plt+0x29cc>
   148e0:	ldr	r3, [pc, #216]	; 149c0 <__assert_fail@plt+0x3144>
   148e4:	push	{r4, r5, r6, r7, r8, lr}
   148e8:	subs	r4, r0, #0
   148ec:	ldr	r0, [pc, #208]	; 149c4 <__assert_fail@plt+0x3148>
   148f0:	add	r3, pc, r3
   148f4:	sub	sp, sp, #8
   148f8:	mov	r5, #0
   148fc:	mov	r7, r1
   14900:	ldr	r6, [r3, r0]
   14904:	str	r5, [sp]
   14908:	ldr	r3, [r6]
   1490c:	str	r3, [sp, #4]
   14910:	beq	14920 <__assert_fail@plt+0x30a4>
   14914:	ldrsb	r3, [r4]
   14918:	cmp	r3, r5
   1491c:	bne	14948 <__assert_fail@plt+0x30cc>
   14920:	bl	116cc <__errno_location@plt>
   14924:	ldr	r3, [r0]
   14928:	cmp	r3, #0
   1492c:	bne	1496c <__assert_fail@plt+0x30f0>
   14930:	ldr	r1, [pc, #144]	; 149c8 <__assert_fail@plt+0x314c>
   14934:	mov	r2, r7
   14938:	mov	r3, r4
   1493c:	mov	r0, #1
   14940:	add	r1, pc, r1
   14944:	bl	11774 <errx@plt>
   14948:	bl	116cc <__errno_location@plt>
   1494c:	mov	r1, sp
   14950:	mov	r8, r0
   14954:	str	r5, [r0]
   14958:	mov	r0, r4
   1495c:	bl	11744 <strtod@plt>
   14960:	ldr	r3, [r8]
   14964:	cmp	r3, r5
   14968:	beq	14984 <__assert_fail@plt+0x3108>
   1496c:	ldr	r1, [pc, #88]	; 149cc <__assert_fail@plt+0x3150>
   14970:	mov	r2, r7
   14974:	mov	r3, r4
   14978:	mov	r0, #1
   1497c:	add	r1, pc, r1
   14980:	bl	11588 <err@plt>
   14984:	ldr	r3, [sp]
   14988:	cmp	r4, r3
   1498c:	beq	14930 <__assert_fail@plt+0x30b4>
   14990:	cmp	r3, #0
   14994:	beq	149a4 <__assert_fail@plt+0x3128>
   14998:	ldrsb	r3, [r3]
   1499c:	cmp	r3, #0
   149a0:	bne	14930 <__assert_fail@plt+0x30b4>
   149a4:	ldr	r2, [sp, #4]
   149a8:	ldr	r3, [r6]
   149ac:	cmp	r2, r3
   149b0:	bne	149bc <__assert_fail@plt+0x3140>
   149b4:	add	sp, sp, #8
   149b8:	pop	{r4, r5, r6, r7, r8, pc}
   149bc:	bl	11564 <__stack_chk_fail@plt>
   149c0:	andeq	r3, r1, r8, lsl #14
   149c4:	andeq	r0, r0, r0, ror r1
   149c8:	andeq	r2, r0, r4, lsl r8
   149cc:	ldrdeq	r2, [r0], -r8
   149d0:	ldr	r3, [pc, #220]	; 14ab4 <__assert_fail@plt+0x3238>
   149d4:	push	{r4, r5, r6, r7, r8, lr}
   149d8:	subs	r4, r0, #0
   149dc:	ldr	r0, [pc, #212]	; 14ab8 <__assert_fail@plt+0x323c>
   149e0:	add	r3, pc, r3
   149e4:	sub	sp, sp, #8
   149e8:	mov	r5, #0
   149ec:	mov	r7, r1
   149f0:	ldr	r6, [r3, r0]
   149f4:	str	r5, [sp]
   149f8:	ldr	r3, [r6]
   149fc:	str	r3, [sp, #4]
   14a00:	beq	14a10 <__assert_fail@plt+0x3194>
   14a04:	ldrsb	r3, [r4]
   14a08:	cmp	r3, r5
   14a0c:	bne	14a38 <__assert_fail@plt+0x31bc>
   14a10:	bl	116cc <__errno_location@plt>
   14a14:	ldr	r3, [r0]
   14a18:	cmp	r3, #0
   14a1c:	bne	14a60 <__assert_fail@plt+0x31e4>
   14a20:	ldr	r1, [pc, #148]	; 14abc <__assert_fail@plt+0x3240>
   14a24:	mov	r2, r7
   14a28:	mov	r3, r4
   14a2c:	mov	r0, #1
   14a30:	add	r1, pc, r1
   14a34:	bl	11774 <errx@plt>
   14a38:	bl	116cc <__errno_location@plt>
   14a3c:	mov	r1, sp
   14a40:	mov	r2, #10
   14a44:	mov	r8, r0
   14a48:	str	r5, [r0]
   14a4c:	mov	r0, r4
   14a50:	bl	114a4 <strtol@plt>
   14a54:	ldr	r3, [r8]
   14a58:	cmp	r3, r5
   14a5c:	beq	14a78 <__assert_fail@plt+0x31fc>
   14a60:	ldr	r1, [pc, #88]	; 14ac0 <__assert_fail@plt+0x3244>
   14a64:	mov	r2, r7
   14a68:	mov	r3, r4
   14a6c:	mov	r0, #1
   14a70:	add	r1, pc, r1
   14a74:	bl	11588 <err@plt>
   14a78:	ldr	r3, [sp]
   14a7c:	cmp	r4, r3
   14a80:	beq	14a20 <__assert_fail@plt+0x31a4>
   14a84:	cmp	r3, #0
   14a88:	beq	14a98 <__assert_fail@plt+0x321c>
   14a8c:	ldrsb	r3, [r3]
   14a90:	cmp	r3, #0
   14a94:	bne	14a20 <__assert_fail@plt+0x31a4>
   14a98:	ldr	r2, [sp, #4]
   14a9c:	ldr	r3, [r6]
   14aa0:	cmp	r2, r3
   14aa4:	bne	14ab0 <__assert_fail@plt+0x3234>
   14aa8:	add	sp, sp, #8
   14aac:	pop	{r4, r5, r6, r7, r8, pc}
   14ab0:	bl	11564 <__stack_chk_fail@plt>
   14ab4:	andeq	r3, r1, r8, lsl r6
   14ab8:	andeq	r0, r0, r0, ror r1
   14abc:	andeq	r2, r0, r4, lsr #14
   14ac0:	andeq	r2, r0, r4, ror #13
   14ac4:	ldr	r3, [pc, #220]	; 14ba8 <__assert_fail@plt+0x332c>
   14ac8:	push	{r4, r5, r6, r7, r8, lr}
   14acc:	subs	r4, r0, #0
   14ad0:	ldr	r0, [pc, #212]	; 14bac <__assert_fail@plt+0x3330>
   14ad4:	add	r3, pc, r3
   14ad8:	sub	sp, sp, #8
   14adc:	mov	r5, #0
   14ae0:	mov	r7, r1
   14ae4:	ldr	r6, [r3, r0]
   14ae8:	str	r5, [sp]
   14aec:	ldr	r3, [r6]
   14af0:	str	r3, [sp, #4]
   14af4:	beq	14b04 <__assert_fail@plt+0x3288>
   14af8:	ldrsb	r3, [r4]
   14afc:	cmp	r3, r5
   14b00:	bne	14b2c <__assert_fail@plt+0x32b0>
   14b04:	bl	116cc <__errno_location@plt>
   14b08:	ldr	r3, [r0]
   14b0c:	cmp	r3, #0
   14b10:	bne	14b54 <__assert_fail@plt+0x32d8>
   14b14:	ldr	r1, [pc, #148]	; 14bb0 <__assert_fail@plt+0x3334>
   14b18:	mov	r2, r7
   14b1c:	mov	r3, r4
   14b20:	mov	r0, #1
   14b24:	add	r1, pc, r1
   14b28:	bl	11774 <errx@plt>
   14b2c:	bl	116cc <__errno_location@plt>
   14b30:	mov	r1, sp
   14b34:	mov	r2, #10
   14b38:	mov	r8, r0
   14b3c:	str	r5, [r0]
   14b40:	mov	r0, r4
   14b44:	bl	11690 <strtoul@plt>
   14b48:	ldr	r3, [r8]
   14b4c:	cmp	r3, r5
   14b50:	beq	14b6c <__assert_fail@plt+0x32f0>
   14b54:	ldr	r1, [pc, #88]	; 14bb4 <__assert_fail@plt+0x3338>
   14b58:	mov	r2, r7
   14b5c:	mov	r3, r4
   14b60:	mov	r0, #1
   14b64:	add	r1, pc, r1
   14b68:	bl	11588 <err@plt>
   14b6c:	ldr	r3, [sp]
   14b70:	cmp	r4, r3
   14b74:	beq	14b14 <__assert_fail@plt+0x3298>
   14b78:	cmp	r3, #0
   14b7c:	beq	14b8c <__assert_fail@plt+0x3310>
   14b80:	ldrsb	r3, [r3]
   14b84:	cmp	r3, #0
   14b88:	bne	14b14 <__assert_fail@plt+0x3298>
   14b8c:	ldr	r2, [sp, #4]
   14b90:	ldr	r3, [r6]
   14b94:	cmp	r2, r3
   14b98:	bne	14ba4 <__assert_fail@plt+0x3328>
   14b9c:	add	sp, sp, #8
   14ba0:	pop	{r4, r5, r6, r7, r8, pc}
   14ba4:	bl	11564 <__stack_chk_fail@plt>
   14ba8:	andeq	r3, r1, r4, lsr #10
   14bac:	andeq	r0, r0, r0, ror r1
   14bb0:	andeq	r2, r0, r0, lsr r6
   14bb4:	strdeq	r2, [r0], -r0
   14bb8:	ldr	ip, [pc, #132]	; 14c44 <__assert_fail@plt+0x33c8>
   14bbc:	push	{r4, r5, r6, lr}
   14bc0:	add	ip, pc, ip
   14bc4:	ldr	lr, [pc, #124]	; 14c48 <__assert_fail@plt+0x33cc>
   14bc8:	sub	sp, sp, #16
   14bcc:	mov	r6, r1
   14bd0:	mov	r5, r0
   14bd4:	mov	r1, sp
   14bd8:	ldr	r4, [ip, lr]
   14bdc:	ldr	ip, [r4]
   14be0:	str	ip, [sp, #12]
   14be4:	bl	145ac <__assert_fail@plt+0x2d30>
   14be8:	cmp	r0, #0
   14bec:	bne	14c0c <__assert_fail@plt+0x3390>
   14bf0:	ldr	r2, [sp, #12]
   14bf4:	ldr	r3, [r4]
   14bf8:	ldrd	r0, [sp]
   14bfc:	cmp	r2, r3
   14c00:	bne	14c40 <__assert_fail@plt+0x33c4>
   14c04:	add	sp, sp, #16
   14c08:	pop	{r4, r5, r6, pc}
   14c0c:	bl	116cc <__errno_location@plt>
   14c10:	mov	r2, r6
   14c14:	ldr	r3, [r0]
   14c18:	mov	r0, #1
   14c1c:	cmp	r3, #0
   14c20:	mov	r3, r5
   14c24:	beq	14c34 <__assert_fail@plt+0x33b8>
   14c28:	ldr	r1, [pc, #28]	; 14c4c <__assert_fail@plt+0x33d0>
   14c2c:	add	r1, pc, r1
   14c30:	bl	11588 <err@plt>
   14c34:	ldr	r1, [pc, #20]	; 14c50 <__assert_fail@plt+0x33d4>
   14c38:	add	r1, pc, r1
   14c3c:	bl	11774 <errx@plt>
   14c40:	bl	11564 <__stack_chk_fail@plt>
   14c44:	andeq	r3, r1, r8, lsr r4
   14c48:	andeq	r0, r0, r0, ror r1
   14c4c:	andeq	r2, r0, r8, lsr #10
   14c50:	andeq	r2, r0, ip, lsl r5
   14c54:	push	{r4, lr}
   14c58:	mov	r4, r1
   14c5c:	mov	r1, r2
   14c60:	bl	148e0 <__assert_fail@plt+0x3064>
   14c64:	vldr	d7, [pc, #28]	; 14c88 <__assert_fail@plt+0x340c>
   14c68:	vcvt.s32.f64	s11, d0
   14c6c:	vcvt.f64.s32	d6, s11
   14c70:	vstr	s11, [r4]
   14c74:	vsub.f64	d0, d0, d6
   14c78:	vmul.f64	d0, d0, d7
   14c7c:	vcvt.s32.f64	s0, d0
   14c80:	vstr	s0, [r4, #4]
   14c84:	pop	{r4, pc}
   14c88:	andeq	r0, r0, r0
   14c8c:	smlawbmi	lr, r0, r4, r8
   14c90:	and	r3, r0, #61440	; 0xf000
   14c94:	cmp	r3, #16384	; 0x4000
   14c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   14c9c:	moveq	r3, #100	; 0x64
   14ca0:	beq	14d18 <__assert_fail@plt+0x349c>
   14ca4:	cmp	r3, #40960	; 0xa000
   14ca8:	moveq	r3, #108	; 0x6c
   14cac:	beq	14d18 <__assert_fail@plt+0x349c>
   14cb0:	cmp	r3, #8192	; 0x2000
   14cb4:	moveq	r3, #99	; 0x63
   14cb8:	beq	14d18 <__assert_fail@plt+0x349c>
   14cbc:	cmp	r3, #24576	; 0x6000
   14cc0:	moveq	r3, #98	; 0x62
   14cc4:	beq	14d18 <__assert_fail@plt+0x349c>
   14cc8:	cmp	r3, #49152	; 0xc000
   14ccc:	moveq	r3, #115	; 0x73
   14cd0:	beq	14d18 <__assert_fail@plt+0x349c>
   14cd4:	cmp	r3, #4096	; 0x1000
   14cd8:	moveq	r3, #112	; 0x70
   14cdc:	beq	14d18 <__assert_fail@plt+0x349c>
   14ce0:	cmp	r3, #32768	; 0x8000
   14ce4:	beq	14d14 <__assert_fail@plt+0x3498>
   14ce8:	mov	r4, #9
   14cec:	mov	r3, #8
   14cf0:	mov	r6, #7
   14cf4:	mov	r7, #6
   14cf8:	mov	r2, #5
   14cfc:	mov	r8, #4
   14d00:	mov	r9, #3
   14d04:	mov	ip, #2
   14d08:	mov	sl, #1
   14d0c:	mov	fp, #0
   14d10:	b	14d44 <__assert_fail@plt+0x34c8>
   14d14:	mov	r3, #45	; 0x2d
   14d18:	strb	r3, [r1]
   14d1c:	mov	r4, #10
   14d20:	mov	r3, #9
   14d24:	mov	r6, #8
   14d28:	mov	r7, #7
   14d2c:	mov	r2, #6
   14d30:	mov	r8, #5
   14d34:	mov	r9, #4
   14d38:	mov	ip, #3
   14d3c:	mov	sl, #2
   14d40:	mov	fp, #1
   14d44:	tst	r0, #256	; 0x100
   14d48:	add	ip, r1, ip
   14d4c:	moveq	r5, #45	; 0x2d
   14d50:	movne	r5, #114	; 0x72
   14d54:	tst	r0, #128	; 0x80
   14d58:	strb	r5, [r1, fp]
   14d5c:	moveq	r5, #45	; 0x2d
   14d60:	movne	r5, #119	; 0x77
   14d64:	tst	r0, #2048	; 0x800
   14d68:	strb	r5, [r1, sl]
   14d6c:	beq	14e08 <__assert_fail@plt+0x358c>
   14d70:	tst	r0, #64	; 0x40
   14d74:	moveq	r5, #83	; 0x53
   14d78:	movne	r5, #115	; 0x73
   14d7c:	tst	r0, #32
   14d80:	strb	r5, [ip]
   14d84:	add	r2, r1, r2
   14d88:	moveq	ip, #45	; 0x2d
   14d8c:	movne	ip, #114	; 0x72
   14d90:	tst	r0, #16
   14d94:	strb	ip, [r1, r9]
   14d98:	moveq	ip, #45	; 0x2d
   14d9c:	movne	ip, #119	; 0x77
   14da0:	tst	r0, #1024	; 0x400
   14da4:	strb	ip, [r1, r8]
   14da8:	beq	14e28 <__assert_fail@plt+0x35ac>
   14dac:	tst	r0, #8
   14db0:	moveq	ip, #83	; 0x53
   14db4:	movne	ip, #115	; 0x73
   14db8:	tst	r0, #4
   14dbc:	strb	ip, [r2]
   14dc0:	add	r3, r1, r3
   14dc4:	moveq	r2, #45	; 0x2d
   14dc8:	movne	r2, #114	; 0x72
   14dcc:	tst	r0, #2
   14dd0:	strb	r2, [r1, r7]
   14dd4:	moveq	r2, #45	; 0x2d
   14dd8:	movne	r2, #119	; 0x77
   14ddc:	tst	r0, #512	; 0x200
   14de0:	strb	r2, [r1, r6]
   14de4:	beq	14e18 <__assert_fail@plt+0x359c>
   14de8:	tst	r0, #1
   14dec:	moveq	r2, #84	; 0x54
   14df0:	movne	r2, #116	; 0x74
   14df4:	strb	r2, [r3]
   14df8:	mov	r3, #0
   14dfc:	strb	r3, [r1, r4]
   14e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   14e04:	bx	lr
   14e08:	tst	r0, #64	; 0x40
   14e0c:	moveq	r5, #45	; 0x2d
   14e10:	movne	r5, #120	; 0x78
   14e14:	b	14d7c <__assert_fail@plt+0x3500>
   14e18:	tst	r0, #1
   14e1c:	moveq	r2, #45	; 0x2d
   14e20:	movne	r2, #120	; 0x78
   14e24:	b	14df4 <__assert_fail@plt+0x3578>
   14e28:	tst	r0, #8
   14e2c:	moveq	ip, #45	; 0x2d
   14e30:	movne	ip, #120	; 0x78
   14e34:	b	14db8 <__assert_fail@plt+0x353c>
   14e38:	ldr	r1, [pc, #580]	; 15084 <__assert_fail@plt+0x3808>
   14e3c:	tst	r0, #2
   14e40:	ldr	ip, [pc, #576]	; 15088 <__assert_fail@plt+0x380c>
   14e44:	add	r1, pc, r1
   14e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e4c:	sub	sp, sp, #100	; 0x64
   14e50:	ldr	r6, [r1, ip]
   14e54:	addeq	r7, sp, #52	; 0x34
   14e58:	addne	lr, sp, #53	; 0x35
   14e5c:	addne	r7, sp, #52	; 0x34
   14e60:	moveq	lr, r7
   14e64:	mov	ip, #10
   14e68:	ldr	r1, [r6]
   14e6c:	str	r1, [sp, #92]	; 0x5c
   14e70:	movne	r1, #32
   14e74:	strbne	r1, [sp, #52]	; 0x34
   14e78:	mov	r1, #1
   14e7c:	sub	r9, ip, #32
   14e80:	rsb	r8, ip, #32
   14e84:	lsl	r5, r1, r9
   14e88:	lsl	r4, r1, ip
   14e8c:	orr	r5, r5, r1, lsr r8
   14e90:	cmp	r3, r5
   14e94:	cmpeq	r2, r4
   14e98:	bcc	15004 <__assert_fail@plt+0x3788>
   14e9c:	add	ip, ip, #10
   14ea0:	cmp	ip, #70	; 0x46
   14ea4:	bne	14e7c <__assert_fail@plt+0x3600>
   14ea8:	mov	r1, #60	; 0x3c
   14eac:	movw	r5, #26215	; 0x6667
   14eb0:	movt	r5, #26214	; 0x6666
   14eb4:	ldr	r8, [pc, #464]	; 1508c <__assert_fail@plt+0x3810>
   14eb8:	mov	fp, #1
   14ebc:	smull	sl, r9, r5, r1
   14ec0:	add	r8, pc, r8
   14ec4:	str	r8, [sp, #36]	; 0x24
   14ec8:	sub	r8, r1, #32
   14ecc:	asr	r4, r1, #31
   14ed0:	lsl	r5, fp, r8
   14ed4:	str	r4, [sp, #44]	; 0x2c
   14ed8:	lsl	r4, fp, r1
   14edc:	subs	r4, r4, #1
   14ee0:	str	r9, [sp, #40]	; 0x28
   14ee4:	rsb	r9, r1, #32
   14ee8:	ldr	sl, [sp, #40]	; 0x28
   14eec:	orr	r5, r5, fp, lsr r9
   14ef0:	ldr	fp, [sp, #44]	; 0x2c
   14ef4:	sbc	r5, r5, #0
   14ef8:	tst	r0, #1
   14efc:	lsr	r1, r2, r1
   14f00:	rsb	fp, fp, sl, asr #2
   14f04:	ldr	sl, [sp, #36]	; 0x24
   14f08:	orr	r1, r1, r3, lsl r9
   14f0c:	and	r5, r5, r3
   14f10:	orr	r8, r1, r3, lsr r8
   14f14:	and	r4, r4, r2
   14f18:	ldrb	r0, [sl, fp]
   14f1c:	add	r3, lr, #1
   14f20:	strb	r0, [lr]
   14f24:	bne	14fe8 <__assert_fail@plt+0x376c>
   14f28:	orrs	fp, r4, r5
   14f2c:	mov	r2, #0
   14f30:	strb	r2, [r3]
   14f34:	beq	1501c <__assert_fail@plt+0x37a0>
   14f38:	sub	lr, ip, #20
   14f3c:	sub	ip, ip, #52	; 0x34
   14f40:	rsb	r3, lr, #32
   14f44:	lsr	r0, r4, lr
   14f48:	orr	r0, r0, r5, lsl r3
   14f4c:	lsr	r1, r5, lr
   14f50:	orr	r0, r0, r5, lsr ip
   14f54:	mov	r2, #100	; 0x64
   14f58:	adds	r0, r0, #50	; 0x32
   14f5c:	mov	r3, #0
   14f60:	adc	r1, r1, #0
   14f64:	bl	15aa0 <__assert_fail@plt+0x4224>
   14f68:	mov	r4, r0
   14f6c:	mov	r5, r1
   14f70:	cmp	r5, #0
   14f74:	cmpeq	r4, #10
   14f78:	addeq	r8, r8, #1
   14f7c:	beq	1501c <__assert_fail@plt+0x37a0>
   14f80:	orrs	r2, r4, r5
   14f84:	beq	1501c <__assert_fail@plt+0x37a0>
   14f88:	bl	117c8 <localeconv@plt>
   14f8c:	cmp	r0, #0
   14f90:	beq	15068 <__assert_fail@plt+0x37ec>
   14f94:	ldr	r3, [r0]
   14f98:	cmp	r3, #0
   14f9c:	beq	15078 <__assert_fail@plt+0x37fc>
   14fa0:	ldrsb	r2, [r3]
   14fa4:	cmp	r2, #0
   14fa8:	ldreq	r3, [pc, #224]	; 15090 <__assert_fail@plt+0x3814>
   14fac:	addeq	r3, pc, r3
   14fb0:	add	r9, sp, #60	; 0x3c
   14fb4:	ldr	ip, [pc, #216]	; 15094 <__assert_fail@plt+0x3818>
   14fb8:	mov	r1, #32
   14fbc:	str	r3, [sp, #8]
   14fc0:	add	ip, pc, ip
   14fc4:	str	r8, [sp, #4]
   14fc8:	mov	r0, r9
   14fcc:	strd	r4, [sp, #16]
   14fd0:	mov	r3, r1
   14fd4:	str	r7, [sp, #24]
   14fd8:	mov	r2, #1
   14fdc:	str	ip, [sp]
   14fe0:	bl	11858 <__snprintf_chk@plt>
   14fe4:	b	15048 <__assert_fail@plt+0x37cc>
   14fe8:	cmp	r0, #66	; 0x42
   14fec:	addne	r3, lr, #3
   14ff0:	movne	r1, #105	; 0x69
   14ff4:	movne	r2, #66	; 0x42
   14ff8:	strbne	r1, [lr, #1]
   14ffc:	strbne	r2, [lr, #2]
   15000:	b	14f28 <__assert_fail@plt+0x36ac>
   15004:	subs	r1, ip, #10
   15008:	strbeq	r1, [lr, #1]
   1500c:	moveq	r3, #66	; 0x42
   15010:	moveq	r8, r2
   15014:	strbeq	r3, [lr]
   15018:	bne	14eac <__assert_fail@plt+0x3630>
   1501c:	ldr	r3, [pc, #116]	; 15098 <__assert_fail@plt+0x381c>
   15020:	add	r9, sp, #60	; 0x3c
   15024:	mov	r1, #32
   15028:	str	r8, [sp, #4]
   1502c:	add	r3, pc, r3
   15030:	str	r7, [sp, #8]
   15034:	str	r3, [sp]
   15038:	mov	r0, r9
   1503c:	mov	r3, r1
   15040:	mov	r2, #1
   15044:	bl	11858 <__snprintf_chk@plt>
   15048:	mov	r0, r9
   1504c:	bl	11708 <__strdup@plt>
   15050:	ldr	r2, [sp, #92]	; 0x5c
   15054:	ldr	r3, [r6]
   15058:	cmp	r2, r3
   1505c:	bne	15074 <__assert_fail@plt+0x37f8>
   15060:	add	sp, sp, #100	; 0x64
   15064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15068:	ldr	r3, [pc, #44]	; 1509c <__assert_fail@plt+0x3820>
   1506c:	add	r3, pc, r3
   15070:	b	14fb0 <__assert_fail@plt+0x3734>
   15074:	bl	11564 <__stack_chk_fail@plt>
   15078:	ldr	r3, [pc, #32]	; 150a0 <__assert_fail@plt+0x3824>
   1507c:	add	r3, pc, r3
   15080:	b	14fb0 <__assert_fail@plt+0x3734>
   15084:			; <UNDEFINED> instruction: 0x000131b4
   15088:	andeq	r0, r0, r0, ror r1
   1508c:			; <UNDEFINED> instruction: 0x000022bc
   15090:	andeq	r2, r0, ip, asr #3
   15094:	andeq	r2, r0, r4, asr #3
   15098:	andeq	r2, r0, r4, ror #2
   1509c:	andeq	r2, r0, ip, lsl #2
   150a0:	strdeq	r2, [r0], -ip
   150a4:	cmp	r0, #0
   150a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150ac:	mov	r8, r1
   150b0:	mov	sl, r2
   150b4:	mov	r9, r3
   150b8:	beq	15174 <__assert_fail@plt+0x38f8>
   150bc:	ldrb	r5, [r0]
   150c0:	cmp	r5, #0
   150c4:	beq	15174 <__assert_fail@plt+0x38f8>
   150c8:	cmp	r2, #0
   150cc:	cmpne	r1, #0
   150d0:	movne	ip, #0
   150d4:	moveq	ip, #1
   150d8:	beq	15174 <__assert_fail@plt+0x38f8>
   150dc:	cmp	r3, #0
   150e0:	movne	r4, r0
   150e4:	movne	r6, ip
   150e8:	bne	150fc <__assert_fail@plt+0x3880>
   150ec:	b	15174 <__assert_fail@plt+0x38f8>
   150f0:	ldrb	r5, [r4, #1]!
   150f4:	cmp	r5, #0
   150f8:	beq	1516c <__assert_fail@plt+0x38f0>
   150fc:	cmp	sl, r6
   15100:	bls	1517c <__assert_fail@plt+0x3900>
   15104:	cmp	ip, #0
   15108:	ldrsb	r7, [r4, #1]
   1510c:	moveq	ip, r4
   15110:	cmp	r5, #44	; 0x2c
   15114:	mov	r0, ip
   15118:	moveq	r5, r4
   1511c:	movne	r5, #0
   15120:	cmp	r7, #0
   15124:	addeq	r5, r4, #1
   15128:	cmp	r5, #0
   1512c:	rsb	r1, ip, r5
   15130:	beq	15164 <__assert_fail@plt+0x38e8>
   15134:	cmp	ip, r5
   15138:	bcs	15174 <__assert_fail@plt+0x38f8>
   1513c:	blx	r9
   15140:	mov	ip, #0
   15144:	add	r3, r6, #1
   15148:	cmn	r0, #1
   1514c:	beq	15174 <__assert_fail@plt+0x38f8>
   15150:	str	r0, [r8, r6, lsl #2]
   15154:	mov	r6, r3
   15158:	ldrsb	r2, [r5]
   1515c:	cmp	r2, ip
   15160:	beq	15184 <__assert_fail@plt+0x3908>
   15164:	cmn	r4, #1
   15168:	bne	150f0 <__assert_fail@plt+0x3874>
   1516c:	mov	r0, r6
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15174:	mvn	r0, #0
   15178:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1517c:	mvn	r0, #1
   15180:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15184:	mov	r6, r3
   15188:	b	1516c <__assert_fail@plt+0x38f0>
   1518c:	cmp	r0, #0
   15190:	push	{r4, lr}
   15194:	mov	r4, r3
   15198:	beq	15210 <__assert_fail@plt+0x3994>
   1519c:	ldrb	ip, [r0]
   151a0:	cmp	ip, #0
   151a4:	beq	15210 <__assert_fail@plt+0x3994>
   151a8:	cmp	r3, #0
   151ac:	beq	15210 <__assert_fail@plt+0x3994>
   151b0:	ldr	r3, [r3]
   151b4:	cmp	r3, #0
   151b8:	blt	15210 <__assert_fail@plt+0x3994>
   151bc:	cmp	r3, r2
   151c0:	bhi	15210 <__assert_fail@plt+0x3994>
   151c4:	cmp	ip, #43	; 0x2b
   151c8:	lsleq	ip, r3, #2
   151cc:	addeq	r0, r0, #1
   151d0:	movne	ip, #0
   151d4:	strne	ip, [r4]
   151d8:	movne	r3, ip
   151dc:	add	r1, r1, ip
   151e0:	rsb	r2, r3, r2
   151e4:	ldr	r3, [sp, #8]
   151e8:	bl	150a4 <__assert_fail@plt+0x3828>
   151ec:	subs	r3, r0, #0
   151f0:	ble	15208 <__assert_fail@plt+0x398c>
   151f4:	ldr	r2, [r4]
   151f8:	mov	r0, r3
   151fc:	add	r3, r2, r3
   15200:	str	r3, [r4]
   15204:	pop	{r4, pc}
   15208:	mov	r0, r3
   1520c:	pop	{r4, pc}
   15210:	mvn	r0, #0
   15214:	pop	{r4, pc}
   15218:	cmp	r2, #0
   1521c:	cmpne	r0, #0
   15220:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15224:	mov	r4, r0
   15228:	mov	r7, r2
   1522c:	movne	r3, #0
   15230:	moveq	r3, #1
   15234:	mov	r9, r1
   15238:	beq	152d4 <__assert_fail@plt+0x3a58>
   1523c:	cmp	r1, #0
   15240:	beq	152d4 <__assert_fail@plt+0x3a58>
   15244:	mov	r6, r0
   15248:	mov	r8, #1
   1524c:	ldrb	r5, [r6], #1
   15250:	cmp	r5, #0
   15254:	beq	152c4 <__assert_fail@plt+0x3a48>
   15258:	cmp	r5, #44	; 0x2c
   1525c:	ldrsb	r0, [r4, #1]
   15260:	moveq	r5, r4
   15264:	movne	r5, #0
   15268:	cmp	r3, #0
   1526c:	moveq	r3, r4
   15270:	cmp	r0, #0
   15274:	mov	r0, r3
   15278:	moveq	r5, r6
   1527c:	cmp	r5, #0
   15280:	rsb	r1, r3, r5
   15284:	beq	152bc <__assert_fail@plt+0x3a40>
   15288:	cmp	r3, r5
   1528c:	bcs	152cc <__assert_fail@plt+0x3a50>
   15290:	blx	r7
   15294:	mov	r3, #0
   15298:	cmp	r0, #0
   1529c:	and	r2, r0, #7
   152a0:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   152a4:	ldrb	r1, [r9, r0, asr #3]
   152a8:	orr	r2, r1, r8, lsl r2
   152ac:	strb	r2, [r9, r0, asr #3]
   152b0:	ldrsb	r2, [r5]
   152b4:	cmp	r2, r3
   152b8:	beq	152c4 <__assert_fail@plt+0x3a48>
   152bc:	adds	r4, r4, #1
   152c0:	bne	1524c <__assert_fail@plt+0x39d0>
   152c4:	mov	r0, #0
   152c8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   152cc:	mvn	r0, #0
   152d0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   152d4:	mvn	r0, #21
   152d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   152dc:	cmp	r2, #0
   152e0:	cmpne	r0, #0
   152e4:	push	{r4, r5, r6, r7, r8, lr}
   152e8:	movne	r3, #0
   152ec:	moveq	r3, #1
   152f0:	mov	r4, r0
   152f4:	mov	r8, r2
   152f8:	mov	r7, r1
   152fc:	beq	15390 <__assert_fail@plt+0x3b14>
   15300:	cmp	r1, #0
   15304:	beq	15390 <__assert_fail@plt+0x3b14>
   15308:	mov	r6, r0
   1530c:	ldrb	r5, [r6], #1
   15310:	cmp	r5, #0
   15314:	beq	15380 <__assert_fail@plt+0x3b04>
   15318:	cmp	r5, #44	; 0x2c
   1531c:	ldrsb	r0, [r4, #1]
   15320:	moveq	r5, r4
   15324:	movne	r5, #0
   15328:	cmp	r3, #0
   1532c:	moveq	r3, r4
   15330:	cmp	r0, #0
   15334:	mov	r0, r3
   15338:	moveq	r5, r6
   1533c:	cmp	r5, #0
   15340:	rsb	r1, r3, r5
   15344:	beq	15378 <__assert_fail@plt+0x3afc>
   15348:	cmp	r3, r5
   1534c:	bcs	15388 <__assert_fail@plt+0x3b0c>
   15350:	blx	r8
   15354:	mov	r3, #0
   15358:	cmp	r0, #0
   1535c:	poplt	{r4, r5, r6, r7, r8, pc}
   15360:	ldr	r2, [r7]
   15364:	orr	r0, r2, r0
   15368:	str	r0, [r7]
   1536c:	ldrsb	r2, [r5]
   15370:	cmp	r2, r3
   15374:	beq	15380 <__assert_fail@plt+0x3b04>
   15378:	adds	r4, r4, #1
   1537c:	bne	1530c <__assert_fail@plt+0x3a90>
   15380:	mov	r0, #0
   15384:	pop	{r4, r5, r6, r7, r8, pc}
   15388:	mvn	r0, #0
   1538c:	pop	{r4, r5, r6, r7, r8, pc}
   15390:	mvn	r0, #21
   15394:	pop	{r4, r5, r6, r7, r8, pc}
   15398:	ldr	ip, [pc, #380]	; 1551c <__assert_fail@plt+0x3ca0>
   1539c:	push	{r4, r5, r6, r7, r8, r9, lr}
   153a0:	subs	r4, r0, #0
   153a4:	ldr	r0, [pc, #372]	; 15520 <__assert_fail@plt+0x3ca4>
   153a8:	add	ip, pc, ip
   153ac:	mov	r6, r2
   153b0:	sub	sp, sp, #12
   153b4:	mov	r2, ip
   153b8:	mov	r8, #0
   153bc:	ldr	r7, [ip, r0]
   153c0:	mov	r9, r1
   153c4:	str	r8, [sp]
   153c8:	ldr	r2, [r7]
   153cc:	str	r2, [sp, #4]
   153d0:	beq	15440 <__assert_fail@plt+0x3bc4>
   153d4:	str	r3, [r1]
   153d8:	str	r3, [r6]
   153dc:	bl	116cc <__errno_location@plt>
   153e0:	str	r8, [r0]
   153e4:	mov	r5, r0
   153e8:	ldrsb	r3, [r4]
   153ec:	cmp	r3, #58	; 0x3a
   153f0:	beq	1545c <__assert_fail@plt+0x3be0>
   153f4:	mov	r0, r4
   153f8:	mov	r2, #10
   153fc:	mov	r1, sp
   15400:	bl	114a4 <strtol@plt>
   15404:	str	r0, [r9]
   15408:	str	r0, [r6]
   1540c:	ldr	r0, [r5]
   15410:	cmp	r0, #0
   15414:	bne	15510 <__assert_fail@plt+0x3c94>
   15418:	ldr	r3, [sp]
   1541c:	cmp	r3, #0
   15420:	beq	15510 <__assert_fail@plt+0x3c94>
   15424:	cmp	r4, r3
   15428:	beq	15510 <__assert_fail@plt+0x3c94>
   1542c:	ldrsb	r2, [r3]
   15430:	cmp	r2, #58	; 0x3a
   15434:	beq	154a8 <__assert_fail@plt+0x3c2c>
   15438:	cmp	r2, #45	; 0x2d
   1543c:	beq	154b8 <__assert_fail@plt+0x3c3c>
   15440:	mov	r0, #0
   15444:	ldr	r2, [sp, #4]
   15448:	ldr	r3, [r7]
   1544c:	cmp	r2, r3
   15450:	bne	15518 <__assert_fail@plt+0x3c9c>
   15454:	add	sp, sp, #12
   15458:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1545c:	add	r4, r4, #1
   15460:	mov	r1, sp
   15464:	mov	r2, #10
   15468:	mov	r0, r4
   1546c:	bl	114a4 <strtol@plt>
   15470:	str	r0, [r6]
   15474:	ldr	r3, [r5]
   15478:	cmp	r3, #0
   1547c:	bne	15510 <__assert_fail@plt+0x3c94>
   15480:	ldr	r3, [sp]
   15484:	cmp	r3, #0
   15488:	beq	15510 <__assert_fail@plt+0x3c94>
   1548c:	ldrsb	r2, [r3]
   15490:	cmp	r2, #0
   15494:	bne	15510 <__assert_fail@plt+0x3c94>
   15498:	cmp	r4, r3
   1549c:	movne	r0, #0
   154a0:	mvneq	r0, #0
   154a4:	b	15444 <__assert_fail@plt+0x3bc8>
   154a8:	ldrsb	r2, [r3, #1]
   154ac:	cmp	r2, #0
   154b0:	streq	r0, [r6]
   154b4:	beq	15444 <__assert_fail@plt+0x3bc8>
   154b8:	add	r4, r3, #1
   154bc:	mov	ip, #0
   154c0:	mov	r1, sp
   154c4:	mov	r2, #10
   154c8:	mov	r0, r4
   154cc:	str	ip, [r5]
   154d0:	str	ip, [sp]
   154d4:	bl	114a4 <strtol@plt>
   154d8:	str	r0, [r6]
   154dc:	ldr	r3, [r5]
   154e0:	cmp	r3, #0
   154e4:	bne	15510 <__assert_fail@plt+0x3c94>
   154e8:	ldr	r2, [sp]
   154ec:	cmp	r2, #0
   154f0:	beq	15510 <__assert_fail@plt+0x3c94>
   154f4:	ldrsb	r3, [r2]
   154f8:	cmp	r3, #0
   154fc:	bne	15510 <__assert_fail@plt+0x3c94>
   15500:	cmp	r4, r2
   15504:	movne	r0, #0
   15508:	mvneq	r0, #0
   1550c:	b	15444 <__assert_fail@plt+0x3bc8>
   15510:	mvn	r0, #0
   15514:	b	15444 <__assert_fail@plt+0x3bc8>
   15518:	bl	11564 <__stack_chk_fail@plt>
   1551c:	andeq	r2, r1, r0, asr ip
   15520:	andeq	r0, r0, r0, ror r1
   15524:	rsbs	r2, r0, #1
   15528:	push	{r4, r5, r6, lr}
   1552c:	movcc	r2, #0
   15530:	rsbs	r3, r1, #1
   15534:	mov	r5, r0
   15538:	mov	r4, r1
   1553c:	movcc	r3, #0
   15540:	ands	ip, r2, r3
   15544:	bne	155b0 <__assert_fail@plt+0x3d34>
   15548:	orrs	r3, r2, r3
   1554c:	bne	155b8 <__assert_fail@plt+0x3d3c>
   15550:	bl	11498 <strcmp@plt>
   15554:	cmp	r0, #0
   15558:	beq	155b0 <__assert_fail@plt+0x3d34>
   1555c:	mov	r0, r5
   15560:	bl	1169c <strlen@plt>
   15564:	mov	r6, r0
   15568:	mov	r0, r4
   1556c:	bl	1169c <strlen@plt>
   15570:	cmp	r6, #0
   15574:	beq	15588 <__assert_fail@plt+0x3d0c>
   15578:	sub	r3, r6, #1
   1557c:	ldrsb	r2, [r5, r3]
   15580:	cmp	r2, #47	; 0x2f
   15584:	moveq	r6, r3
   15588:	cmp	r0, #0
   1558c:	beq	155a0 <__assert_fail@plt+0x3d24>
   15590:	sub	r3, r0, #1
   15594:	ldrsb	r2, [r4, r3]
   15598:	cmp	r2, #47	; 0x2f
   1559c:	moveq	r0, r3
   155a0:	cmp	r6, r0
   155a4:	beq	155c0 <__assert_fail@plt+0x3d44>
   155a8:	mov	r0, #0
   155ac:	pop	{r4, r5, r6, pc}
   155b0:	mov	r0, #1
   155b4:	pop	{r4, r5, r6, pc}
   155b8:	mov	r0, ip
   155bc:	pop	{r4, r5, r6, pc}
   155c0:	mov	r0, r5
   155c4:	mov	r1, r4
   155c8:	mov	r2, r6
   155cc:	bl	1181c <strncmp@plt>
   155d0:	rsbs	r0, r0, #1
   155d4:	movcc	r0, #0
   155d8:	pop	{r4, r5, r6, pc}
   155dc:	ldr	r3, [pc, #248]	; 156dc <__assert_fail@plt+0x3e60>
   155e0:	cmp	r0, #0
   155e4:	cmpne	r1, #0
   155e8:	ldr	r2, [pc, #240]	; 156e0 <__assert_fail@plt+0x3e64>
   155ec:	add	r3, pc, r3
   155f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   155f4:	sub	sp, sp, #20
   155f8:	ldr	r9, [r3, r2]
   155fc:	mov	r6, r1
   15600:	addne	r8, sp, #4
   15604:	addne	r7, sp, #8
   15608:	ldr	r3, [r9]
   1560c:	str	r3, [sp, #12]
   15610:	bne	15658 <__assert_fail@plt+0x3ddc>
   15614:	b	156d0 <__assert_fail@plt+0x3e54>
   15618:	cmp	r4, r3
   1561c:	bne	156d0 <__assert_fail@plt+0x3e54>
   15620:	mov	r0, r5
   15624:	mov	r1, r6
   15628:	mov	r2, r4
   1562c:	bl	1181c <strncmp@plt>
   15630:	cmp	r0, #0
   15634:	bne	156d0 <__assert_fail@plt+0x3e54>
   15638:	adds	r6, r6, r4
   1563c:	moveq	r3, #0
   15640:	movne	r3, #1
   15644:	adds	r0, r5, r4
   15648:	moveq	r3, #0
   1564c:	andne	r3, r3, #1
   15650:	cmp	r3, #0
   15654:	beq	156d0 <__assert_fail@plt+0x3e54>
   15658:	mov	r1, r8
   1565c:	bl	14118 <__assert_fail@plt+0x289c>
   15660:	mov	r1, r7
   15664:	mov	r5, r0
   15668:	mov	r0, r6
   1566c:	bl	14118 <__assert_fail@plt+0x289c>
   15670:	ldr	r4, [sp, #4]
   15674:	ldr	r3, [sp, #8]
   15678:	mov	r6, r0
   1567c:	adds	r0, r3, r4
   15680:	beq	156b4 <__assert_fail@plt+0x3e38>
   15684:	cmp	r0, #1
   15688:	bne	15618 <__assert_fail@plt+0x3d9c>
   1568c:	cmp	r5, #0
   15690:	beq	156a0 <__assert_fail@plt+0x3e24>
   15694:	ldrsb	r2, [r5]
   15698:	cmp	r2, #47	; 0x2f
   1569c:	beq	156b8 <__assert_fail@plt+0x3e3c>
   156a0:	cmp	r6, #0
   156a4:	beq	15618 <__assert_fail@plt+0x3d9c>
   156a8:	ldrsb	r2, [r6]
   156ac:	cmp	r2, #47	; 0x2f
   156b0:	bne	15618 <__assert_fail@plt+0x3d9c>
   156b4:	mov	r0, #1
   156b8:	ldr	r2, [sp, #12]
   156bc:	ldr	r3, [r9]
   156c0:	cmp	r2, r3
   156c4:	bne	156d8 <__assert_fail@plt+0x3e5c>
   156c8:	add	sp, sp, #20
   156cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   156d0:	mov	r0, #0
   156d4:	b	156b8 <__assert_fail@plt+0x3e3c>
   156d8:	bl	11564 <__stack_chk_fail@plt>
   156dc:	andeq	r2, r1, ip, lsl #20
   156e0:	andeq	r0, r0, r0, ror r1
   156e4:	rsbs	r3, r0, #1
   156e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156ec:	movcc	r3, #0
   156f0:	rsbs	r4, r1, #1
   156f4:	mov	r7, r1
   156f8:	mov	r6, r2
   156fc:	mov	sl, r0
   15700:	movcc	r4, #0
   15704:	tst	r3, r4
   15708:	bne	1576c <__assert_fail@plt+0x3ef0>
   1570c:	cmp	r3, #0
   15710:	bne	15784 <__assert_fail@plt+0x3f08>
   15714:	cmp	r4, #0
   15718:	bne	15794 <__assert_fail@plt+0x3f18>
   1571c:	bl	1169c <strlen@plt>
   15720:	mvn	r3, r0
   15724:	cmp	r6, r3
   15728:	mov	r5, r0
   1572c:	bhi	1577c <__assert_fail@plt+0x3f00>
   15730:	add	r9, r0, r6
   15734:	add	r0, r9, #1
   15738:	bl	1160c <malloc@plt>
   1573c:	subs	r8, r0, #0
   15740:	beq	1579c <__assert_fail@plt+0x3f20>
   15744:	mov	r1, sl
   15748:	mov	r2, r5
   1574c:	bl	11540 <memcpy@plt>
   15750:	add	r0, r8, r5
   15754:	mov	r1, r7
   15758:	mov	r2, r6
   1575c:	bl	11540 <memcpy@plt>
   15760:	strb	r4, [r8, r9]
   15764:	mov	r0, r8
   15768:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1576c:	mov	r0, #1
   15770:	mov	r1, r0
   15774:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15778:	b	11468 <calloc@plt>
   1577c:	mov	r0, r4
   15780:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15784:	mov	r0, r1
   15788:	mov	r1, r2
   1578c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15790:	b	1157c <__strndup@plt>
   15794:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15798:	b	11708 <__strdup@plt>
   1579c:	mov	r0, r8
   157a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157a4:	push	{r3, r4, r5, lr}
   157a8:	subs	r4, r1, #0
   157ac:	mov	r5, r0
   157b0:	beq	157d0 <__assert_fail@plt+0x3f54>
   157b4:	mov	r0, r4
   157b8:	bl	1169c <strlen@plt>
   157bc:	mov	r1, r4
   157c0:	mov	r2, r0
   157c4:	mov	r0, r5
   157c8:	pop	{r3, r4, r5, lr}
   157cc:	b	156e4 <__assert_fail@plt+0x3e68>
   157d0:	mov	r2, r4
   157d4:	mov	r0, r5
   157d8:	mov	r1, r4
   157dc:	pop	{r3, r4, r5, lr}
   157e0:	b	156e4 <__assert_fail@plt+0x3e68>
   157e4:	push	{r1, r2, r3}
   157e8:	mov	r1, #1
   157ec:	push	{r4, r5, lr}
   157f0:	sub	sp, sp, #16
   157f4:	ldr	lr, [pc, #124]	; 15878 <__assert_fail@plt+0x3ffc>
   157f8:	add	ip, sp, #32
   157fc:	ldr	r4, [pc, #120]	; 1587c <__assert_fail@plt+0x4000>
   15800:	mov	r5, r0
   15804:	add	lr, pc, lr
   15808:	mov	r3, ip
   1580c:	ldr	r2, [sp, #28]
   15810:	add	r0, sp, #8
   15814:	ldr	r4, [lr, r4]
   15818:	str	ip, [sp, #4]
   1581c:	ldr	ip, [r4]
   15820:	str	ip, [sp, #12]
   15824:	bl	116fc <__vasprintf_chk@plt>
   15828:	subs	r2, r0, #0
   1582c:	blt	1586c <__assert_fail@plt+0x3ff0>
   15830:	mov	r0, r5
   15834:	ldr	r1, [sp, #8]
   15838:	bl	156e4 <__assert_fail@plt+0x3e68>
   1583c:	mov	r5, r0
   15840:	ldr	r0, [sp, #8]
   15844:	bl	114f8 <free@plt>
   15848:	mov	r0, r5
   1584c:	ldr	r2, [sp, #12]
   15850:	ldr	r3, [r4]
   15854:	cmp	r2, r3
   15858:	bne	15874 <__assert_fail@plt+0x3ff8>
   1585c:	add	sp, sp, #16
   15860:	pop	{r4, r5, lr}
   15864:	add	sp, sp, #12
   15868:	bx	lr
   1586c:	mov	r0, #0
   15870:	b	1584c <__assert_fail@plt+0x3fd0>
   15874:	bl	11564 <__stack_chk_fail@plt>
   15878:	strdeq	r2, [r1], -r4
   1587c:	andeq	r0, r0, r0, ror r1
   15880:	ldr	ip, [pc, #372]	; 159fc <__assert_fail@plt+0x4180>
   15884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15888:	mov	r6, r0
   1588c:	ldr	r0, [pc, #364]	; 15a00 <__assert_fail@plt+0x4184>
   15890:	add	ip, pc, ip
   15894:	ldr	r4, [r6]
   15898:	mov	r9, r3
   1589c:	sub	sp, sp, #12
   158a0:	mov	r7, r1
   158a4:	ldr	r5, [ip, r0]
   158a8:	mov	r8, r2
   158ac:	ldrsb	ip, [r4]
   158b0:	ldr	r3, [r5]
   158b4:	cmp	ip, #0
   158b8:	moveq	r0, ip
   158bc:	str	r3, [sp, #4]
   158c0:	beq	15970 <__assert_fail@plt+0x40f4>
   158c4:	mov	r0, r4
   158c8:	mov	r1, r2
   158cc:	bl	11870 <strspn@plt>
   158d0:	ldrb	sl, [r4, r0]
   158d4:	add	r4, r4, r0
   158d8:	cmp	sl, #0
   158dc:	beq	159ec <__assert_fail@plt+0x4170>
   158e0:	cmp	r9, #0
   158e4:	beq	15988 <__assert_fail@plt+0x410c>
   158e8:	sxtb	r9, sl
   158ec:	ldr	r0, [pc, #272]	; 15a04 <__assert_fail@plt+0x4188>
   158f0:	mov	r1, r9
   158f4:	add	r0, pc, r0
   158f8:	bl	116a8 <strchr@plt>
   158fc:	cmp	r0, #0
   15900:	beq	159ac <__assert_fail@plt+0x4130>
   15904:	add	fp, r4, #1
   15908:	mov	r1, sp
   1590c:	mov	r3, #0
   15910:	strb	sl, [sp]
   15914:	mov	r0, fp
   15918:	strb	r3, [sp, #1]
   1591c:	bl	141b8 <__assert_fail@plt+0x293c>
   15920:	add	r3, r4, r0
   15924:	str	r0, [r7]
   15928:	ldrb	r3, [r3, #1]
   1592c:	cmp	r3, #0
   15930:	beq	159ec <__assert_fail@plt+0x4170>
   15934:	sxtb	r3, r3
   15938:	cmp	r9, r3
   1593c:	bne	159ec <__assert_fail@plt+0x4170>
   15940:	add	r0, r0, #2
   15944:	add	r7, r4, r0
   15948:	ldrb	r1, [r4, r0]
   1594c:	cmp	r1, #0
   15950:	beq	15968 <__assert_fail@plt+0x40ec>
   15954:	mov	r0, r8
   15958:	sxtb	r1, r1
   1595c:	bl	116a8 <strchr@plt>
   15960:	cmp	r0, #0
   15964:	beq	159ec <__assert_fail@plt+0x4170>
   15968:	mov	r0, fp
   1596c:	str	r7, [r6]
   15970:	ldr	r2, [sp, #4]
   15974:	ldr	r3, [r5]
   15978:	cmp	r2, r3
   1597c:	bne	159f8 <__assert_fail@plt+0x417c>
   15980:	add	sp, sp, #12
   15984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15988:	mov	r0, r4
   1598c:	mov	r1, r8
   15990:	bl	114bc <strcspn@plt>
   15994:	mov	r3, r0
   15998:	mov	r0, r4
   1599c:	add	r4, r4, r3
   159a0:	str	r3, [r7]
   159a4:	str	r4, [r6]
   159a8:	b	15970 <__assert_fail@plt+0x40f4>
   159ac:	mov	r1, r8
   159b0:	mov	r0, r4
   159b4:	bl	141b8 <__assert_fail@plt+0x293c>
   159b8:	str	r0, [r7]
   159bc:	add	r7, r4, r0
   159c0:	ldrb	r1, [r4, r0]
   159c4:	cmp	r1, #0
   159c8:	beq	159e0 <__assert_fail@plt+0x4164>
   159cc:	mov	r0, r8
   159d0:	sxtb	r1, r1
   159d4:	bl	116a8 <strchr@plt>
   159d8:	cmp	r0, #0
   159dc:	beq	159a4 <__assert_fail@plt+0x4128>
   159e0:	str	r7, [r6]
   159e4:	mov	r0, r4
   159e8:	b	15970 <__assert_fail@plt+0x40f4>
   159ec:	str	r4, [r6]
   159f0:	mov	r0, #0
   159f4:	b	15970 <__assert_fail@plt+0x40f4>
   159f8:	bl	11564 <__stack_chk_fail@plt>
   159fc:	andeq	r2, r1, r8, ror #14
   15a00:	andeq	r0, r0, r0, ror r1
   15a04:	andeq	r1, r0, r4, lsr #17
   15a08:	push	{r4, lr}
   15a0c:	mov	r4, r0
   15a10:	b	15a1c <__assert_fail@plt+0x41a0>
   15a14:	cmp	r0, #10
   15a18:	beq	15a34 <__assert_fail@plt+0x41b8>
   15a1c:	mov	r0, r4
   15a20:	bl	1172c <fgetc@plt>
   15a24:	cmn	r0, #1
   15a28:	bne	15a14 <__assert_fail@plt+0x4198>
   15a2c:	mov	r0, #1
   15a30:	pop	{r4, pc}
   15a34:	mov	r0, #0
   15a38:	pop	{r4, pc}
   15a3c:	ldr	ip, [sp]
   15a40:	mov	r1, r0
   15a44:	mov	r0, #3
   15a48:	cmp	ip, #0
   15a4c:	movne	ip, #256	; 0x100
   15a50:	moveq	ip, #0
   15a54:	str	ip, [sp]
   15a58:	b	115a0 <__fxstatat64@plt>
   15a5c:	mov	r1, r2
   15a60:	mov	r2, r3
   15a64:	b	11528 <__openat64_2@plt>
   15a68:	push	{r4, lr}
   15a6c:	ldr	r4, [sp, #8]
   15a70:	bl	15a5c <__assert_fail@plt+0x41e0>
   15a74:	cmp	r0, #0
   15a78:	blt	15a88 <__assert_fail@plt+0x420c>
   15a7c:	mov	r1, r4
   15a80:	pop	{r4, lr}
   15a84:	b	1145c <fdopen@plt>
   15a88:	mov	r0, #0
   15a8c:	pop	{r4, pc}
   15a90:	mov	r1, r2
   15a94:	mov	r2, r3
   15a98:	ldr	r3, [sp]
   15a9c:	b	11624 <readlinkat@plt>
   15aa0:	cmp	r3, #0
   15aa4:	cmpeq	r2, #0
   15aa8:	bne	15ac0 <__assert_fail@plt+0x4244>
   15aac:	cmp	r1, #0
   15ab0:	cmpeq	r0, #0
   15ab4:	mvnne	r1, #0
   15ab8:	mvnne	r0, #0
   15abc:	b	15adc <__assert_fail@plt+0x4260>
   15ac0:	sub	sp, sp, #8
   15ac4:	push	{sp, lr}
   15ac8:	bl	15b28 <__assert_fail@plt+0x42ac>
   15acc:	ldr	lr, [sp, #4]
   15ad0:	add	sp, sp, #8
   15ad4:	pop	{r2, r3}
   15ad8:	bx	lr
   15adc:	push	{r1, lr}
   15ae0:	mov	r0, #8
   15ae4:	bl	11474 <raise@plt>
   15ae8:	pop	{r1, pc}
   15aec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15af0:	mov	r8, r2
   15af4:	mov	r6, r0
   15af8:	mov	r7, r1
   15afc:	mov	sl, r3
   15b00:	ldr	r9, [sp, #32]
   15b04:	bl	15b64 <__assert_fail@plt+0x42e8>
   15b08:	umull	r4, r5, r8, r0
   15b0c:	mul	r8, r8, r1
   15b10:	mla	r2, r0, sl, r8
   15b14:	add	r5, r2, r5
   15b18:	subs	r4, r6, r4
   15b1c:	sbc	r5, r7, r5
   15b20:	strd	r4, [r9]
   15b24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b28:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15b2c:	mov	r8, r2
   15b30:	mov	r6, r0
   15b34:	mov	r7, r1
   15b38:	mov	r5, r3
   15b3c:	ldr	r9, [sp, #32]
   15b40:	bl	15ff0 <__assert_fail@plt+0x4774>
   15b44:	mul	r3, r0, r5
   15b48:	umull	r4, r5, r0, r8
   15b4c:	mla	r8, r8, r1, r3
   15b50:	add	r5, r8, r5
   15b54:	subs	r4, r6, r4
   15b58:	sbc	r5, r7, r5
   15b5c:	strd	r4, [r9]
   15b60:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b68:	rsbs	r4, r0, #0
   15b6c:	rsc	r5, r1, #0
   15b70:	cmp	r1, #0
   15b74:	mvn	r6, #0
   15b78:	sub	sp, sp, #12
   15b7c:	movge	r4, r0
   15b80:	movge	r5, r1
   15b84:	movge	r6, #0
   15b88:	cmp	r3, #0
   15b8c:	blt	15dc4 <__assert_fail@plt+0x4548>
   15b90:	cmp	r3, #0
   15b94:	mov	sl, r4
   15b98:	mov	ip, r5
   15b9c:	mov	r0, r2
   15ba0:	mov	r1, r3
   15ba4:	mov	r8, r2
   15ba8:	mov	r7, r4
   15bac:	mov	r9, r5
   15bb0:	bne	15ca8 <__assert_fail@plt+0x442c>
   15bb4:	cmp	r2, r5
   15bb8:	bls	15ce4 <__assert_fail@plt+0x4468>
   15bbc:	clz	r3, r2
   15bc0:	cmp	r3, #0
   15bc4:	rsbne	r2, r3, #32
   15bc8:	lslne	r8, r0, r3
   15bcc:	lsrne	r2, r4, r2
   15bd0:	lslne	r7, r4, r3
   15bd4:	orrne	r9, r2, r5, lsl r3
   15bd8:	lsr	r4, r8, #16
   15bdc:	uxth	sl, r8
   15be0:	mov	r1, r4
   15be4:	mov	r0, r9
   15be8:	bl	16420 <__assert_fail@plt+0x4ba4>
   15bec:	mov	r1, r4
   15bf0:	mov	fp, r0
   15bf4:	mov	r0, r9
   15bf8:	bl	1660c <__assert_fail@plt+0x4d90>
   15bfc:	mul	r0, sl, fp
   15c00:	lsr	r2, r7, #16
   15c04:	orr	r1, r2, r1, lsl #16
   15c08:	cmp	r0, r1
   15c0c:	bls	15c30 <__assert_fail@plt+0x43b4>
   15c10:	adds	r1, r1, r8
   15c14:	sub	r3, fp, #1
   15c18:	bcs	15c2c <__assert_fail@plt+0x43b0>
   15c1c:	cmp	r0, r1
   15c20:	subhi	fp, fp, #2
   15c24:	addhi	r1, r1, r8
   15c28:	bhi	15c30 <__assert_fail@plt+0x43b4>
   15c2c:	mov	fp, r3
   15c30:	rsb	r9, r0, r1
   15c34:	mov	r1, r4
   15c38:	uxth	r7, r7
   15c3c:	mov	r0, r9
   15c40:	bl	16420 <__assert_fail@plt+0x4ba4>
   15c44:	mov	r1, r4
   15c48:	mov	r5, r0
   15c4c:	mov	r0, r9
   15c50:	bl	1660c <__assert_fail@plt+0x4d90>
   15c54:	mul	sl, sl, r5
   15c58:	orr	r1, r7, r1, lsl #16
   15c5c:	cmp	sl, r1
   15c60:	bls	15c80 <__assert_fail@plt+0x4404>
   15c64:	adds	r8, r1, r8
   15c68:	sub	r3, r5, #1
   15c6c:	bcs	15c7c <__assert_fail@plt+0x4400>
   15c70:	cmp	sl, r8
   15c74:	subhi	r5, r5, #2
   15c78:	bhi	15c80 <__assert_fail@plt+0x4404>
   15c7c:	mov	r5, r3
   15c80:	orr	r3, r5, fp, lsl #16
   15c84:	mov	r4, #0
   15c88:	cmp	r6, #0
   15c8c:	mov	r0, r3
   15c90:	mov	r1, r4
   15c94:	beq	15ca0 <__assert_fail@plt+0x4424>
   15c98:	rsbs	r0, r0, #0
   15c9c:	rsc	r1, r1, #0
   15ca0:	add	sp, sp, #12
   15ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca8:	cmp	r3, r5
   15cac:	movhi	r4, #0
   15cb0:	movhi	r3, r4
   15cb4:	bhi	15c88 <__assert_fail@plt+0x440c>
   15cb8:	clz	r5, r1
   15cbc:	cmp	r5, #0
   15cc0:	bne	15eb0 <__assert_fail@plt+0x4634>
   15cc4:	cmp	r1, ip
   15cc8:	cmpcs	r2, sl
   15ccc:	movhi	r4, #0
   15cd0:	movls	r4, #1
   15cd4:	movls	r3, #1
   15cd8:	movls	r4, r5
   15cdc:	movhi	r3, r4
   15ce0:	b	15c88 <__assert_fail@plt+0x440c>
   15ce4:	cmp	r2, #0
   15ce8:	bne	15cfc <__assert_fail@plt+0x4480>
   15cec:	mov	r1, r2
   15cf0:	mov	r0, #1
   15cf4:	bl	16420 <__assert_fail@plt+0x4ba4>
   15cf8:	mov	r8, r0
   15cfc:	clz	r3, r8
   15d00:	cmp	r3, #0
   15d04:	bne	15dd4 <__assert_fail@plt+0x4558>
   15d08:	rsb	r9, r8, r9
   15d0c:	lsr	r5, r8, #16
   15d10:	uxth	sl, r8
   15d14:	mov	r4, #1
   15d18:	mov	r1, r5
   15d1c:	mov	r0, r9
   15d20:	bl	16420 <__assert_fail@plt+0x4ba4>
   15d24:	mov	r1, r5
   15d28:	mov	fp, r0
   15d2c:	mov	r0, r9
   15d30:	bl	1660c <__assert_fail@plt+0x4d90>
   15d34:	mul	r0, sl, fp
   15d38:	lsr	r2, r7, #16
   15d3c:	orr	r1, r2, r1, lsl #16
   15d40:	cmp	r0, r1
   15d44:	bls	15d64 <__assert_fail@plt+0x44e8>
   15d48:	adds	r1, r1, r8
   15d4c:	sub	r3, fp, #1
   15d50:	bcs	15fd0 <__assert_fail@plt+0x4754>
   15d54:	cmp	r0, r1
   15d58:	subhi	fp, fp, #2
   15d5c:	addhi	r1, r1, r8
   15d60:	bls	15fd0 <__assert_fail@plt+0x4754>
   15d64:	rsb	r2, r0, r1
   15d68:	mov	r1, r5
   15d6c:	str	r2, [sp]
   15d70:	uxth	r7, r7
   15d74:	mov	r0, r2
   15d78:	bl	16420 <__assert_fail@plt+0x4ba4>
   15d7c:	ldr	r2, [sp]
   15d80:	mov	r1, r5
   15d84:	mov	r9, r0
   15d88:	mov	r0, r2
   15d8c:	bl	1660c <__assert_fail@plt+0x4d90>
   15d90:	mul	sl, sl, r9
   15d94:	orr	r1, r7, r1, lsl #16
   15d98:	cmp	sl, r1
   15d9c:	bls	15dbc <__assert_fail@plt+0x4540>
   15da0:	adds	r8, r1, r8
   15da4:	sub	r3, r9, #1
   15da8:	bcs	15db8 <__assert_fail@plt+0x453c>
   15dac:	cmp	sl, r8
   15db0:	subhi	r9, r9, #2
   15db4:	bhi	15dbc <__assert_fail@plt+0x4540>
   15db8:	mov	r9, r3
   15dbc:	orr	r3, r9, fp, lsl #16
   15dc0:	b	15c88 <__assert_fail@plt+0x440c>
   15dc4:	mvn	r6, r6
   15dc8:	rsbs	r2, r2, #0
   15dcc:	rsc	r3, r3, #0
   15dd0:	b	15b90 <__assert_fail@plt+0x4314>
   15dd4:	lsl	r8, r8, r3
   15dd8:	rsb	fp, r3, #32
   15ddc:	lsr	r4, r9, fp
   15de0:	lsr	fp, r7, fp
   15de4:	lsr	r5, r8, #16
   15de8:	orr	fp, fp, r9, lsl r3
   15dec:	mov	r0, r4
   15df0:	lsl	r7, r7, r3
   15df4:	mov	r1, r5
   15df8:	uxth	sl, r8
   15dfc:	bl	16420 <__assert_fail@plt+0x4ba4>
   15e00:	mov	r1, r5
   15e04:	mov	r3, r0
   15e08:	mov	r0, r4
   15e0c:	str	r3, [sp]
   15e10:	bl	1660c <__assert_fail@plt+0x4d90>
   15e14:	ldr	r3, [sp]
   15e18:	lsr	r2, fp, #16
   15e1c:	mul	r0, sl, r3
   15e20:	orr	r1, r2, r1, lsl #16
   15e24:	cmp	r0, r1
   15e28:	bls	15e48 <__assert_fail@plt+0x45cc>
   15e2c:	adds	r1, r1, r8
   15e30:	sub	r2, r3, #1
   15e34:	bcs	15fe8 <__assert_fail@plt+0x476c>
   15e38:	cmp	r0, r1
   15e3c:	subhi	r3, r3, #2
   15e40:	addhi	r1, r1, r8
   15e44:	bls	15fe8 <__assert_fail@plt+0x476c>
   15e48:	rsb	r9, r0, r1
   15e4c:	mov	r1, r5
   15e50:	str	r3, [sp]
   15e54:	uxth	fp, fp
   15e58:	mov	r0, r9
   15e5c:	bl	16420 <__assert_fail@plt+0x4ba4>
   15e60:	mov	r1, r5
   15e64:	mov	r4, r0
   15e68:	mov	r0, r9
   15e6c:	bl	1660c <__assert_fail@plt+0x4d90>
   15e70:	mul	r9, sl, r4
   15e74:	ldr	r3, [sp]
   15e78:	orr	r1, fp, r1, lsl #16
   15e7c:	cmp	r9, r1
   15e80:	bls	15ea4 <__assert_fail@plt+0x4628>
   15e84:	adds	r1, r1, r8
   15e88:	sub	r2, r4, #1
   15e8c:	bcs	15ea0 <__assert_fail@plt+0x4624>
   15e90:	cmp	r9, r1
   15e94:	subhi	r4, r4, #2
   15e98:	addhi	r1, r1, r8
   15e9c:	bhi	15ea4 <__assert_fail@plt+0x4628>
   15ea0:	mov	r4, r2
   15ea4:	rsb	r9, r9, r1
   15ea8:	orr	r4, r4, r3, lsl #16
   15eac:	b	15d18 <__assert_fail@plt+0x449c>
   15eb0:	rsb	sl, r5, #32
   15eb4:	lsl	r3, r2, r5
   15eb8:	lsr	r0, r2, sl
   15ebc:	lsr	r2, ip, sl
   15ec0:	orr	r4, r0, r1, lsl r5
   15ec4:	lsr	sl, r7, sl
   15ec8:	mov	r0, r2
   15ecc:	orr	sl, sl, ip, lsl r5
   15ed0:	lsr	r9, r4, #16
   15ed4:	str	r3, [sp, #4]
   15ed8:	str	r2, [sp]
   15edc:	uxth	fp, r4
   15ee0:	mov	r1, r9
   15ee4:	bl	16420 <__assert_fail@plt+0x4ba4>
   15ee8:	ldr	r2, [sp]
   15eec:	mov	r1, r9
   15ef0:	mov	r8, r0
   15ef4:	mov	r0, r2
   15ef8:	bl	1660c <__assert_fail@plt+0x4d90>
   15efc:	mul	r0, fp, r8
   15f00:	lsr	r2, sl, #16
   15f04:	orr	r1, r2, r1, lsl #16
   15f08:	cmp	r0, r1
   15f0c:	bls	15f2c <__assert_fail@plt+0x46b0>
   15f10:	adds	r1, r1, r4
   15f14:	sub	r2, r8, #1
   15f18:	bcs	15fe0 <__assert_fail@plt+0x4764>
   15f1c:	cmp	r0, r1
   15f20:	subhi	r8, r8, #2
   15f24:	addhi	r1, r1, r4
   15f28:	bls	15fe0 <__assert_fail@plt+0x4764>
   15f2c:	rsb	ip, r0, r1
   15f30:	mov	r1, r9
   15f34:	str	ip, [sp]
   15f38:	mov	r0, ip
   15f3c:	bl	16420 <__assert_fail@plt+0x4ba4>
   15f40:	ldr	ip, [sp]
   15f44:	mov	r1, r9
   15f48:	mov	r2, r0
   15f4c:	mov	r0, ip
   15f50:	str	r2, [sp]
   15f54:	bl	1660c <__assert_fail@plt+0x4d90>
   15f58:	ldr	r2, [sp]
   15f5c:	uxth	ip, sl
   15f60:	mul	fp, fp, r2
   15f64:	orr	ip, ip, r1, lsl #16
   15f68:	cmp	fp, ip
   15f6c:	bls	15f8c <__assert_fail@plt+0x4710>
   15f70:	adds	ip, ip, r4
   15f74:	sub	r1, r2, #1
   15f78:	bcs	15fd8 <__assert_fail@plt+0x475c>
   15f7c:	cmp	fp, ip
   15f80:	subhi	r2, r2, #2
   15f84:	addhi	ip, ip, r4
   15f88:	bls	15fd8 <__assert_fail@plt+0x475c>
   15f8c:	ldr	r0, [sp, #4]
   15f90:	orr	r1, r2, r8, lsl #16
   15f94:	rsb	fp, fp, ip
   15f98:	umull	r2, r3, r1, r0
   15f9c:	cmp	fp, r3
   15fa0:	bcc	15fc4 <__assert_fail@plt+0x4748>
   15fa4:	movne	r4, #0
   15fa8:	moveq	r4, #1
   15fac:	cmp	r2, r7, lsl r5
   15fb0:	movls	r4, #0
   15fb4:	andhi	r4, r4, #1
   15fb8:	cmp	r4, #0
   15fbc:	moveq	r3, r1
   15fc0:	beq	15c88 <__assert_fail@plt+0x440c>
   15fc4:	sub	r3, r1, #1
   15fc8:	mov	r4, #0
   15fcc:	b	15c88 <__assert_fail@plt+0x440c>
   15fd0:	mov	fp, r3
   15fd4:	b	15d64 <__assert_fail@plt+0x44e8>
   15fd8:	mov	r2, r1
   15fdc:	b	15f8c <__assert_fail@plt+0x4710>
   15fe0:	mov	r8, r2
   15fe4:	b	15f2c <__assert_fail@plt+0x46b0>
   15fe8:	mov	r3, r2
   15fec:	b	15e48 <__assert_fail@plt+0x45cc>
   15ff0:	cmp	r3, #0
   15ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff8:	mov	r6, r0
   15ffc:	sub	sp, sp, #12
   16000:	mov	r5, r1
   16004:	mov	r7, r0
   16008:	mov	r4, r2
   1600c:	mov	r8, r1
   16010:	bne	160f0 <__assert_fail@plt+0x4874>
   16014:	cmp	r2, r1
   16018:	bls	1612c <__assert_fail@plt+0x48b0>
   1601c:	clz	r3, r2
   16020:	cmp	r3, #0
   16024:	rsbne	r8, r3, #32
   16028:	lslne	r4, r2, r3
   1602c:	lsrne	r8, r0, r8
   16030:	lslne	r7, r0, r3
   16034:	orrne	r8, r8, r1, lsl r3
   16038:	lsr	r5, r4, #16
   1603c:	uxth	sl, r4
   16040:	mov	r1, r5
   16044:	mov	r0, r8
   16048:	bl	16420 <__assert_fail@plt+0x4ba4>
   1604c:	mov	r1, r5
   16050:	mov	r9, r0
   16054:	mov	r0, r8
   16058:	bl	1660c <__assert_fail@plt+0x4d90>
   1605c:	mul	r0, sl, r9
   16060:	lsr	r3, r7, #16
   16064:	orr	r1, r3, r1, lsl #16
   16068:	cmp	r0, r1
   1606c:	bls	16090 <__assert_fail@plt+0x4814>
   16070:	adds	r1, r1, r4
   16074:	sub	r2, r9, #1
   16078:	bcs	1608c <__assert_fail@plt+0x4810>
   1607c:	cmp	r0, r1
   16080:	subhi	r9, r9, #2
   16084:	addhi	r1, r1, r4
   16088:	bhi	16090 <__assert_fail@plt+0x4814>
   1608c:	mov	r9, r2
   16090:	rsb	r8, r0, r1
   16094:	mov	r1, r5
   16098:	uxth	r7, r7
   1609c:	mov	r0, r8
   160a0:	bl	16420 <__assert_fail@plt+0x4ba4>
   160a4:	mov	r1, r5
   160a8:	mov	r6, r0
   160ac:	mov	r0, r8
   160b0:	bl	1660c <__assert_fail@plt+0x4d90>
   160b4:	mul	sl, sl, r6
   160b8:	orr	r1, r7, r1, lsl #16
   160bc:	cmp	sl, r1
   160c0:	bls	160dc <__assert_fail@plt+0x4860>
   160c4:	adds	r4, r1, r4
   160c8:	sub	r3, r6, #1
   160cc:	bcs	163d8 <__assert_fail@plt+0x4b5c>
   160d0:	cmp	sl, r4
   160d4:	subhi	r6, r6, #2
   160d8:	bls	163d8 <__assert_fail@plt+0x4b5c>
   160dc:	orr	r0, r6, r9, lsl #16
   160e0:	mov	r6, #0
   160e4:	mov	r1, r6
   160e8:	add	sp, sp, #12
   160ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f0:	cmp	r3, r1
   160f4:	movhi	r6, #0
   160f8:	movhi	r0, r6
   160fc:	bhi	160e4 <__assert_fail@plt+0x4868>
   16100:	clz	r7, r3
   16104:	cmp	r7, #0
   16108:	bne	16208 <__assert_fail@plt+0x498c>
   1610c:	cmp	r3, r1
   16110:	cmpcs	r2, r6
   16114:	movhi	r6, #0
   16118:	movls	r6, #1
   1611c:	movls	r0, #1
   16120:	movls	r6, r7
   16124:	movhi	r0, r6
   16128:	b	160e4 <__assert_fail@plt+0x4868>
   1612c:	cmp	r2, #0
   16130:	bne	16144 <__assert_fail@plt+0x48c8>
   16134:	mov	r1, r2
   16138:	mov	r0, #1
   1613c:	bl	16420 <__assert_fail@plt+0x4ba4>
   16140:	mov	r4, r0
   16144:	clz	r3, r4
   16148:	cmp	r3, #0
   1614c:	bne	16304 <__assert_fail@plt+0x4a88>
   16150:	rsb	r5, r4, r5
   16154:	lsr	r8, r4, #16
   16158:	uxth	sl, r4
   1615c:	mov	r6, #1
   16160:	mov	r1, r8
   16164:	mov	r0, r5
   16168:	bl	16420 <__assert_fail@plt+0x4ba4>
   1616c:	mov	r1, r8
   16170:	mov	r9, r0
   16174:	mov	r0, r5
   16178:	bl	1660c <__assert_fail@plt+0x4d90>
   1617c:	mul	r0, sl, r9
   16180:	lsr	r3, r7, #16
   16184:	orr	r1, r3, r1, lsl #16
   16188:	cmp	r0, r1
   1618c:	bls	161ac <__assert_fail@plt+0x4930>
   16190:	adds	r1, r1, r4
   16194:	sub	r2, r9, #1
   16198:	bcs	163e0 <__assert_fail@plt+0x4b64>
   1619c:	cmp	r0, r1
   161a0:	subhi	r9, r9, #2
   161a4:	addhi	r1, r1, r4
   161a8:	bls	163e0 <__assert_fail@plt+0x4b64>
   161ac:	rsb	fp, r0, r1
   161b0:	mov	r1, r8
   161b4:	uxth	r7, r7
   161b8:	mov	r0, fp
   161bc:	bl	16420 <__assert_fail@plt+0x4ba4>
   161c0:	mov	r1, r8
   161c4:	mov	r5, r0
   161c8:	mov	r0, fp
   161cc:	bl	1660c <__assert_fail@plt+0x4d90>
   161d0:	mul	sl, sl, r5
   161d4:	orr	r1, r7, r1, lsl #16
   161d8:	cmp	sl, r1
   161dc:	bls	161f8 <__assert_fail@plt+0x497c>
   161e0:	adds	r4, r1, r4
   161e4:	sub	r3, r5, #1
   161e8:	bcs	163e8 <__assert_fail@plt+0x4b6c>
   161ec:	cmp	sl, r4
   161f0:	subhi	r5, r5, #2
   161f4:	bls	163e8 <__assert_fail@plt+0x4b6c>
   161f8:	orr	r0, r5, r9, lsl #16
   161fc:	mov	r1, r6
   16200:	add	sp, sp, #12
   16204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16208:	rsb	r1, r7, #32
   1620c:	lsl	r0, r2, r7
   16210:	lsr	r2, r2, r1
   16214:	lsr	fp, r5, r1
   16218:	orr	r8, r2, r3, lsl r7
   1621c:	lsr	r1, r6, r1
   16220:	str	r0, [sp, #4]
   16224:	orr	r5, r1, r5, lsl r7
   16228:	lsr	r9, r8, #16
   1622c:	mov	r0, fp
   16230:	uxth	sl, r8
   16234:	mov	r1, r9
   16238:	bl	16420 <__assert_fail@plt+0x4ba4>
   1623c:	mov	r1, r9
   16240:	mov	r4, r0
   16244:	mov	r0, fp
   16248:	bl	1660c <__assert_fail@plt+0x4d90>
   1624c:	mul	r0, sl, r4
   16250:	lsr	ip, r5, #16
   16254:	orr	r1, ip, r1, lsl #16
   16258:	cmp	r0, r1
   1625c:	bls	16270 <__assert_fail@plt+0x49f4>
   16260:	adds	r1, r1, r8
   16264:	sub	r2, r4, #1
   16268:	bcc	16404 <__assert_fail@plt+0x4b88>
   1626c:	mov	r4, r2
   16270:	rsb	ip, r0, r1
   16274:	mov	r1, r9
   16278:	str	ip, [sp]
   1627c:	uxth	r5, r5
   16280:	mov	r0, ip
   16284:	bl	16420 <__assert_fail@plt+0x4ba4>
   16288:	ldr	ip, [sp]
   1628c:	mov	r1, r9
   16290:	mov	fp, r0
   16294:	mov	r0, ip
   16298:	bl	1660c <__assert_fail@plt+0x4d90>
   1629c:	mul	sl, sl, fp
   162a0:	orr	r1, r5, r1, lsl #16
   162a4:	cmp	sl, r1
   162a8:	bls	162bc <__assert_fail@plt+0x4a40>
   162ac:	adds	r1, r1, r8
   162b0:	sub	r2, fp, #1
   162b4:	bcc	163f0 <__assert_fail@plt+0x4b74>
   162b8:	mov	fp, r2
   162bc:	ldr	r3, [sp, #4]
   162c0:	orr	r0, fp, r4, lsl #16
   162c4:	rsb	sl, sl, r1
   162c8:	umull	r4, r5, r0, r3
   162cc:	cmp	sl, r5
   162d0:	bcc	162f0 <__assert_fail@plt+0x4a74>
   162d4:	movne	r3, #0
   162d8:	moveq	r3, #1
   162dc:	cmp	r4, r6, lsl r7
   162e0:	movls	r6, #0
   162e4:	andhi	r6, r3, #1
   162e8:	cmp	r6, #0
   162ec:	beq	160e4 <__assert_fail@plt+0x4868>
   162f0:	mov	r6, #0
   162f4:	sub	r0, r0, #1
   162f8:	mov	r1, r6
   162fc:	add	sp, sp, #12
   16300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16304:	lsl	r4, r4, r3
   16308:	rsb	r9, r3, #32
   1630c:	lsr	r2, r5, r9
   16310:	lsr	r9, r6, r9
   16314:	lsr	r8, r4, #16
   16318:	orr	r9, r9, r5, lsl r3
   1631c:	mov	r0, r2
   16320:	lsl	r7, r6, r3
   16324:	mov	r1, r8
   16328:	str	r2, [sp]
   1632c:	bl	16420 <__assert_fail@plt+0x4ba4>
   16330:	ldr	r2, [sp]
   16334:	mov	r1, r8
   16338:	uxth	sl, r4
   1633c:	mov	fp, r0
   16340:	mov	r0, r2
   16344:	bl	1660c <__assert_fail@plt+0x4d90>
   16348:	mul	r0, sl, fp
   1634c:	lsr	r3, r9, #16
   16350:	orr	r1, r3, r1, lsl #16
   16354:	cmp	r0, r1
   16358:	bls	16378 <__assert_fail@plt+0x4afc>
   1635c:	adds	r1, r1, r4
   16360:	sub	r3, fp, #1
   16364:	bcs	16418 <__assert_fail@plt+0x4b9c>
   16368:	cmp	r0, r1
   1636c:	subhi	fp, fp, #2
   16370:	addhi	r1, r1, r4
   16374:	bls	16418 <__assert_fail@plt+0x4b9c>
   16378:	rsb	r5, r0, r1
   1637c:	mov	r1, r8
   16380:	uxth	r9, r9
   16384:	mov	r0, r5
   16388:	bl	16420 <__assert_fail@plt+0x4ba4>
   1638c:	mov	r1, r8
   16390:	mov	r6, r0
   16394:	mov	r0, r5
   16398:	bl	1660c <__assert_fail@plt+0x4d90>
   1639c:	mul	r5, sl, r6
   163a0:	orr	r1, r9, r1, lsl #16
   163a4:	cmp	r5, r1
   163a8:	bls	163cc <__assert_fail@plt+0x4b50>
   163ac:	adds	r1, r1, r4
   163b0:	sub	r3, r6, #1
   163b4:	bcs	163c8 <__assert_fail@plt+0x4b4c>
   163b8:	cmp	r5, r1
   163bc:	subhi	r6, r6, #2
   163c0:	addhi	r1, r1, r4
   163c4:	bhi	163cc <__assert_fail@plt+0x4b50>
   163c8:	mov	r6, r3
   163cc:	rsb	r5, r5, r1
   163d0:	orr	r6, r6, fp, lsl #16
   163d4:	b	16160 <__assert_fail@plt+0x48e4>
   163d8:	mov	r6, r3
   163dc:	b	160dc <__assert_fail@plt+0x4860>
   163e0:	mov	r9, r2
   163e4:	b	161ac <__assert_fail@plt+0x4930>
   163e8:	mov	r5, r3
   163ec:	b	161f8 <__assert_fail@plt+0x497c>
   163f0:	cmp	sl, r1
   163f4:	subhi	fp, fp, #2
   163f8:	addhi	r1, r1, r8
   163fc:	bhi	162bc <__assert_fail@plt+0x4a40>
   16400:	b	162b8 <__assert_fail@plt+0x4a3c>
   16404:	cmp	r0, r1
   16408:	subhi	r4, r4, #2
   1640c:	addhi	r1, r1, r8
   16410:	bhi	16270 <__assert_fail@plt+0x49f4>
   16414:	b	1626c <__assert_fail@plt+0x49f0>
   16418:	mov	fp, r3
   1641c:	b	16378 <__assert_fail@plt+0x4afc>
   16420:	subs	r2, r1, #1
   16424:	bxeq	lr
   16428:	bcc	16600 <__assert_fail@plt+0x4d84>
   1642c:	cmp	r0, r1
   16430:	bls	165e4 <__assert_fail@plt+0x4d68>
   16434:	tst	r1, r2
   16438:	beq	165f0 <__assert_fail@plt+0x4d74>
   1643c:	clz	r3, r0
   16440:	clz	r2, r1
   16444:	sub	r3, r2, r3
   16448:	rsbs	r3, r3, #31
   1644c:	addne	r3, r3, r3, lsl #1
   16450:	mov	r2, #0
   16454:	addne	pc, pc, r3, lsl #2
   16458:	nop	{0}
   1645c:	cmp	r0, r1, lsl #31
   16460:	adc	r2, r2, r2
   16464:	subcs	r0, r0, r1, lsl #31
   16468:	cmp	r0, r1, lsl #30
   1646c:	adc	r2, r2, r2
   16470:	subcs	r0, r0, r1, lsl #30
   16474:	cmp	r0, r1, lsl #29
   16478:	adc	r2, r2, r2
   1647c:	subcs	r0, r0, r1, lsl #29
   16480:	cmp	r0, r1, lsl #28
   16484:	adc	r2, r2, r2
   16488:	subcs	r0, r0, r1, lsl #28
   1648c:	cmp	r0, r1, lsl #27
   16490:	adc	r2, r2, r2
   16494:	subcs	r0, r0, r1, lsl #27
   16498:	cmp	r0, r1, lsl #26
   1649c:	adc	r2, r2, r2
   164a0:	subcs	r0, r0, r1, lsl #26
   164a4:	cmp	r0, r1, lsl #25
   164a8:	adc	r2, r2, r2
   164ac:	subcs	r0, r0, r1, lsl #25
   164b0:	cmp	r0, r1, lsl #24
   164b4:	adc	r2, r2, r2
   164b8:	subcs	r0, r0, r1, lsl #24
   164bc:	cmp	r0, r1, lsl #23
   164c0:	adc	r2, r2, r2
   164c4:	subcs	r0, r0, r1, lsl #23
   164c8:	cmp	r0, r1, lsl #22
   164cc:	adc	r2, r2, r2
   164d0:	subcs	r0, r0, r1, lsl #22
   164d4:	cmp	r0, r1, lsl #21
   164d8:	adc	r2, r2, r2
   164dc:	subcs	r0, r0, r1, lsl #21
   164e0:	cmp	r0, r1, lsl #20
   164e4:	adc	r2, r2, r2
   164e8:	subcs	r0, r0, r1, lsl #20
   164ec:	cmp	r0, r1, lsl #19
   164f0:	adc	r2, r2, r2
   164f4:	subcs	r0, r0, r1, lsl #19
   164f8:	cmp	r0, r1, lsl #18
   164fc:	adc	r2, r2, r2
   16500:	subcs	r0, r0, r1, lsl #18
   16504:	cmp	r0, r1, lsl #17
   16508:	adc	r2, r2, r2
   1650c:	subcs	r0, r0, r1, lsl #17
   16510:	cmp	r0, r1, lsl #16
   16514:	adc	r2, r2, r2
   16518:	subcs	r0, r0, r1, lsl #16
   1651c:	cmp	r0, r1, lsl #15
   16520:	adc	r2, r2, r2
   16524:	subcs	r0, r0, r1, lsl #15
   16528:	cmp	r0, r1, lsl #14
   1652c:	adc	r2, r2, r2
   16530:	subcs	r0, r0, r1, lsl #14
   16534:	cmp	r0, r1, lsl #13
   16538:	adc	r2, r2, r2
   1653c:	subcs	r0, r0, r1, lsl #13
   16540:	cmp	r0, r1, lsl #12
   16544:	adc	r2, r2, r2
   16548:	subcs	r0, r0, r1, lsl #12
   1654c:	cmp	r0, r1, lsl #11
   16550:	adc	r2, r2, r2
   16554:	subcs	r0, r0, r1, lsl #11
   16558:	cmp	r0, r1, lsl #10
   1655c:	adc	r2, r2, r2
   16560:	subcs	r0, r0, r1, lsl #10
   16564:	cmp	r0, r1, lsl #9
   16568:	adc	r2, r2, r2
   1656c:	subcs	r0, r0, r1, lsl #9
   16570:	cmp	r0, r1, lsl #8
   16574:	adc	r2, r2, r2
   16578:	subcs	r0, r0, r1, lsl #8
   1657c:	cmp	r0, r1, lsl #7
   16580:	adc	r2, r2, r2
   16584:	subcs	r0, r0, r1, lsl #7
   16588:	cmp	r0, r1, lsl #6
   1658c:	adc	r2, r2, r2
   16590:	subcs	r0, r0, r1, lsl #6
   16594:	cmp	r0, r1, lsl #5
   16598:	adc	r2, r2, r2
   1659c:	subcs	r0, r0, r1, lsl #5
   165a0:	cmp	r0, r1, lsl #4
   165a4:	adc	r2, r2, r2
   165a8:	subcs	r0, r0, r1, lsl #4
   165ac:	cmp	r0, r1, lsl #3
   165b0:	adc	r2, r2, r2
   165b4:	subcs	r0, r0, r1, lsl #3
   165b8:	cmp	r0, r1, lsl #2
   165bc:	adc	r2, r2, r2
   165c0:	subcs	r0, r0, r1, lsl #2
   165c4:	cmp	r0, r1, lsl #1
   165c8:	adc	r2, r2, r2
   165cc:	subcs	r0, r0, r1, lsl #1
   165d0:	cmp	r0, r1
   165d4:	adc	r2, r2, r2
   165d8:	subcs	r0, r0, r1
   165dc:	mov	r0, r2
   165e0:	bx	lr
   165e4:	moveq	r0, #1
   165e8:	movne	r0, #0
   165ec:	bx	lr
   165f0:	clz	r2, r1
   165f4:	rsb	r2, r2, #31
   165f8:	lsr	r0, r0, r2
   165fc:	bx	lr
   16600:	cmp	r0, #0
   16604:	mvnne	r0, #0
   16608:	b	15adc <__assert_fail@plt+0x4260>
   1660c:	cmp	r1, #0
   16610:	beq	16600 <__assert_fail@plt+0x4d84>
   16614:	push	{r0, r1, lr}
   16618:	bl	16420 <__assert_fail@plt+0x4ba4>
   1661c:	pop	{r1, r2, lr}
   16620:	mul	r3, r2, r0
   16624:	sub	r1, r1, r3
   16628:	bx	lr
   1662c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16630:	mov	r7, r0
   16634:	ldr	r6, [pc, #76]	; 16688 <__assert_fail@plt+0x4e0c>
   16638:	mov	r8, r1
   1663c:	ldr	r5, [pc, #72]	; 1668c <__assert_fail@plt+0x4e10>
   16640:	mov	r9, r2
   16644:	add	r6, pc, r6
   16648:	bl	1143c <fdopen@plt-0x20>
   1664c:	add	r5, pc, r5
   16650:	rsb	r6, r5, r6
   16654:	asrs	r6, r6, #2
   16658:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1665c:	sub	r5, r5, #4
   16660:	mov	r4, #0
   16664:	add	r4, r4, #1
   16668:	ldr	r3, [r5, #4]!
   1666c:	mov	r0, r7
   16670:	mov	r1, r8
   16674:	mov	r2, r9
   16678:	blx	r3
   1667c:	cmp	r4, r6
   16680:	bne	16664 <__assert_fail@plt+0x4de8>
   16684:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16688:	andeq	r1, r1, ip, lsr #17
   1668c:	andeq	r1, r1, r0, lsr #17
   16690:	bx	lr
   16694:	ldr	r3, [pc, #28]	; 166b8 <__assert_fail@plt+0x4e3c>
   16698:	mov	r1, #0
   1669c:	ldr	r2, [pc, #24]	; 166bc <__assert_fail@plt+0x4e40>
   166a0:	add	r3, pc, r3
   166a4:	ldr	r3, [r3, r2]
   166a8:	cmp	r3, #0
   166ac:	ldrne	r2, [r3]
   166b0:	moveq	r2, r3
   166b4:	b	116f0 <__cxa_atexit@plt>
   166b8:	andeq	r1, r1, r8, asr r9
   166bc:	andeq	r0, r0, r8, ror r1

Disassembly of section .fini:

000166c0 <.fini>:
   166c0:	push	{r3, lr}
   166c4:	pop	{r3, pc}
