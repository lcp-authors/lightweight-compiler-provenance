
centos-preinstalled/stund:     file format elf32-littlearm


Disassembly of section .init:

000088b4 <.init>:
    88b4:	push	{r3, lr}
    88b8:	bl	8b28 <__assert_fail@plt+0xf8>
    88bc:	pop	{r3, pc}

Disassembly of section .plt:

000088c0 <strtol@plt-0x14>:
    88c0:	push	{lr}		; (str lr, [sp, #-4]!)
    88c4:	ldr	lr, [pc, #4]	; 88d0 <strtol@plt-0x4>
    88c8:	add	lr, pc, lr
    88cc:	ldr	pc, [lr, #8]!
    88d0:	andeq	pc, r0, r0, lsr r7	; <UNPREDICTABLE>

000088d4 <strtol@plt>:
    88d4:	add	ip, pc, #0, 12
    88d8:	add	ip, ip, #61440	; 0xf000
    88dc:	ldr	pc, [ip, #1840]!	; 0x730

000088e0 <setsockopt@plt>:
    88e0:	add	ip, pc, #0, 12
    88e4:	add	ip, ip, #61440	; 0xf000
    88e8:	ldr	pc, [ip, #1832]!	; 0x728

000088ec <fopen@plt>:
    88ec:	add	ip, pc, #0, 12
    88f0:	add	ip, ip, #61440	; 0xf000
    88f4:	ldr	pc, [ip, #1824]!	; 0x720

000088f8 <memmove@plt>:
    88f8:	add	ip, pc, #0, 12
    88fc:	add	ip, ip, #61440	; 0xf000
    8900:	ldr	pc, [ip, #1816]!	; 0x718

00008904 <memcpy@plt>:
    8904:	add	ip, pc, #0, 12
    8908:	add	ip, ip, #61440	; 0xf000
    890c:	ldr	pc, [ip, #1808]!	; 0x710

00008910 <signal@plt>:
    8910:	add	ip, pc, #0, 12
    8914:	add	ip, ip, #61440	; 0xf000
    8918:	ldr	pc, [ip, #1800]!	; 0x708

0000891c <time@plt>:
    891c:	add	ip, pc, #0, 12
    8920:	add	ip, ip, #61440	; 0xf000
    8924:	ldr	pc, [ip, #1792]!	; 0x700

00008928 <memcmp@plt>:
    8928:	add	ip, pc, #0, 12
    892c:	add	ip, ip, #61440	; 0xf000
    8930:	ldr	pc, [ip, #1784]!	; 0x6f8

00008934 <recvfrom@plt>:
    8934:	add	ip, pc, #0, 12
    8938:	add	ip, ip, #61440	; 0xf000
    893c:	ldr	pc, [ip, #1776]!	; 0x6f0

00008940 <__stack_chk_fail@plt>:
    8940:	add	ip, pc, #0, 12
    8944:	add	ip, ip, #61440	; 0xf000
    8948:	ldr	pc, [ip, #1768]!	; 0x6e8

0000894c <perror@plt>:
    894c:	add	ip, pc, #0, 12
    8950:	add	ip, ip, #61440	; 0xf000
    8954:	ldr	pc, [ip, #1760]!	; 0x6e0

00008958 <__memcpy_chk@plt>:
    8958:	add	ip, pc, #0, 12
    895c:	add	ip, ip, #61440	; 0xf000
    8960:	ldr	pc, [ip, #1752]!	; 0x6d8

00008964 <fread@plt>:
    8964:	add	ip, pc, #0, 12
    8968:	add	ip, ip, #61440	; 0xf000
    896c:	ldr	pc, [ip, #1744]!	; 0x6d0

00008970 <__libc_start_main@plt>:
    8970:	add	ip, pc, #0, 12
    8974:	add	ip, ip, #61440	; 0xf000
    8978:	ldr	pc, [ip, #1736]!	; 0x6c8

0000897c <__vfprintf_chk@plt>:
    897c:	add	ip, pc, #0, 12
    8980:	add	ip, ip, #61440	; 0xf000
    8984:	ldr	pc, [ip, #1728]!	; 0x6c0

00008988 <__gmon_start__@plt>:
    8988:	add	ip, pc, #0, 12
    898c:	add	ip, ip, #61440	; 0xf000
    8990:	ldr	pc, [ip, #1720]!	; 0x6b8

00008994 <clock@plt>:
    8994:	add	ip, pc, #0, 12
    8998:	add	ip, ip, #61440	; 0xf000
    899c:	ldr	pc, [ip, #1712]!	; 0x6b0

000089a0 <exit@plt>:
    89a0:	add	ip, pc, #0, 12
    89a4:	add	ip, ip, #61440	; 0xf000
    89a8:	ldr	pc, [ip, #1704]!	; 0x6a8

000089ac <strlen@plt>:
    89ac:	add	ip, pc, #0, 12
    89b0:	add	ip, ip, #61440	; 0xf000
    89b4:	ldr	pc, [ip, #1696]!	; 0x6a0

000089b8 <getopt@plt>:
    89b8:	add	ip, pc, #0, 12
    89bc:	add	ip, ip, #61440	; 0xf000
    89c0:	ldr	pc, [ip, #1688]!	; 0x698

000089c4 <bind@plt>:
    89c4:	add	ip, pc, #0, 12
    89c8:	add	ip, ip, #61440	; 0xf000
    89cc:	ldr	pc, [ip, #1680]!	; 0x690

000089d0 <memset@plt>:
    89d0:	add	ip, pc, #0, 12
    89d4:	add	ip, ip, #61440	; 0xf000
    89d8:	ldr	pc, [ip, #1672]!	; 0x688

000089dc <fclose@plt>:
    89dc:	add	ip, pc, #0, 12
    89e0:	add	ip, ip, #61440	; 0xf000
    89e4:	ldr	pc, [ip, #1664]!	; 0x680

000089e8 <sendto@plt>:
    89e8:	add	ip, pc, #0, 12
    89ec:	add	ip, ip, #61440	; 0xf000
    89f0:	ldr	pc, [ip, #1656]!	; 0x678

000089f4 <listen@plt>:
    89f4:	add	ip, pc, #0, 12
    89f8:	add	ip, ip, #61440	; 0xf000
    89fc:	ldr	pc, [ip, #1648]!	; 0x670

00008a00 <socket@plt>:
    8a00:	add	ip, pc, #0, 12
    8a04:	add	ip, ip, #61440	; 0xf000
    8a08:	ldr	pc, [ip, #1640]!	; 0x668

00008a0c <abort@plt>:
    8a0c:	add	ip, pc, #0, 12
    8a10:	add	ip, ip, #61440	; 0xf000
    8a14:	ldr	pc, [ip, #1632]!	; 0x660

00008a18 <close@plt>:
    8a18:	add	ip, pc, #0, 12
    8a1c:	add	ip, ip, #61440	; 0xf000
    8a20:	ldr	pc, [ip, #1624]!	; 0x658

00008a24 <div@plt>:
    8a24:	add	ip, pc, #0, 12
    8a28:	add	ip, ip, #61440	; 0xf000
    8a2c:	ldr	pc, [ip, #1616]!	; 0x650

00008a30 <__assert_fail@plt>:
    8a30:	add	ip, pc, #0, 12
    8a34:	add	ip, ip, #61440	; 0xf000
    8a38:	ldr	pc, [ip, #1608]!	; 0x648

Disassembly of section .text:

00008a3c <.text>:
    8a3c:	push	{r4, r5, r6, lr}
    8a40:	mov	r5, r0
    8a44:	mov	r6, r1
    8a48:	mov	r4, #2
    8a4c:	movw	r2, #60292	; 0xeb84
    8a50:	mov	r0, r5
    8a54:	movt	r2, #0
    8a58:	mov	r1, r6
    8a5c:	bl	89b8 <getopt@plt>
    8a60:	cmn	r0, #1
    8a64:	beq	8a80 <__assert_fail@plt+0x50>
    8a68:	cmp	r0, #52	; 0x34
    8a6c:	moveq	r4, #2
    8a70:	beq	8a4c <__assert_fail@plt+0x1c>
    8a74:	cmp	r0, #54	; 0x36
    8a78:	moveq	r4, #10
    8a7c:	b	8a4c <__assert_fail@plt+0x1c>
    8a80:	movw	r3, #32936	; 0x80a8
    8a84:	movt	r3, #1
    8a88:	ldr	r0, [r3]
    8a8c:	cmp	r5, r0
    8a90:	movwle	r5, #3478	; 0xd96
    8a94:	ble	8ab4 <__assert_fail@plt+0x84>
    8a98:	add	r2, r0, #1
    8a9c:	mov	r1, #0
    8aa0:	str	r2, [r3]
    8aa4:	mov	r2, #10
    8aa8:	ldr	r0, [r6, r0, lsl #2]
    8aac:	bl	88d4 <strtol@plt>
    8ab0:	mov	r5, r0
    8ab4:	movw	r1, #35872	; 0x8c20
    8ab8:	mov	r0, #2
    8abc:	movt	r1, #0
    8ac0:	bl	8910 <signal@plt>
    8ac4:	movw	r1, #35872	; 0x8c20
    8ac8:	mov	r0, #15
    8acc:	movt	r1, #0
    8ad0:	bl	8910 <signal@plt>
    8ad4:	mov	r0, r4
    8ad8:	mov	r1, r5
    8adc:	bl	8d9c <__assert_fail@plt+0x36c>
    8ae0:	adds	r0, r0, #0
    8ae4:	movne	r0, #1
    8ae8:	pop	{r4, r5, r6, pc}
    8aec:	mov	fp, #0
    8af0:	mov	lr, #0
    8af4:	pop	{r1}		; (ldr r1, [sp], #4)
    8af8:	mov	r2, sp
    8afc:	push	{r2}		; (str r2, [sp, #-4]!)
    8b00:	push	{r0}		; (str r0, [sp, #-4]!)
    8b04:	ldr	ip, [pc, #16]	; 8b1c <__assert_fail@plt+0xec>
    8b08:	push	{ip}		; (str ip, [sp, #-4]!)
    8b0c:	ldr	r0, [pc, #12]	; 8b20 <__assert_fail@plt+0xf0>
    8b10:	ldr	r3, [pc, #12]	; 8b24 <__assert_fail@plt+0xf4>
    8b14:	bl	8970 <__libc_start_main@plt>
    8b18:	bl	8a0c <abort@plt>
    8b1c:	andeq	lr, r0, r4, asr fp
    8b20:	andeq	r8, r0, ip, lsr sl
    8b24:	strdeq	lr, [r0], -r0
    8b28:	ldr	r3, [pc, #20]	; 8b44 <__assert_fail@plt+0x114>
    8b2c:	ldr	r2, [pc, #20]	; 8b48 <__assert_fail@plt+0x118>
    8b30:	add	r3, pc, r3
    8b34:	ldr	r2, [r3, r2]
    8b38:	cmp	r2, #0
    8b3c:	bxeq	lr
    8b40:	b	8988 <__gmon_start__@plt>
    8b44:	andeq	pc, r0, r8, asr #9
    8b48:	andeq	r0, r0, ip, lsl #1
    8b4c:	push	{r3, lr}
    8b50:	movw	r0, #32924	; 0x809c
    8b54:	ldr	r3, [pc, #36]	; 8b80 <__assert_fail@plt+0x150>
    8b58:	movt	r0, #1
    8b5c:	rsb	r3, r0, r3
    8b60:	cmp	r3, #6
    8b64:	popls	{r3, pc}
    8b68:	movw	r3, #0
    8b6c:	movt	r3, #0
    8b70:	cmp	r3, #0
    8b74:	popeq	{r3, pc}
    8b78:	blx	r3
    8b7c:	pop	{r3, pc}
    8b80:	muleq	r1, pc, r0	; <UNPREDICTABLE>
    8b84:	push	{r3, lr}
    8b88:	movw	r0, #32924	; 0x809c
    8b8c:	movw	r3, #32924	; 0x809c
    8b90:	movt	r0, #1
    8b94:	movt	r3, #1
    8b98:	rsb	r3, r0, r3
    8b9c:	asr	r3, r3, #2
    8ba0:	add	r3, r3, r3, lsr #31
    8ba4:	asrs	r1, r3, #1
    8ba8:	popeq	{r3, pc}
    8bac:	movw	r2, #0
    8bb0:	movt	r2, #0
    8bb4:	cmp	r2, #0
    8bb8:	popeq	{r3, pc}
    8bbc:	blx	r2
    8bc0:	pop	{r3, pc}
    8bc4:	push	{r4, lr}
    8bc8:	movw	r4, #32940	; 0x80ac
    8bcc:	movt	r4, #1
    8bd0:	ldrb	r3, [r4]
    8bd4:	cmp	r3, #0
    8bd8:	popne	{r4, pc}
    8bdc:	bl	8b4c <__assert_fail@plt+0x11c>
    8be0:	mov	r3, #1
    8be4:	strb	r3, [r4]
    8be8:	pop	{r4, pc}
    8bec:	movw	r0, #32508	; 0x7efc
    8bf0:	movt	r0, #1
    8bf4:	push	{r3, lr}
    8bf8:	ldr	r3, [r0]
    8bfc:	cmp	r3, #0
    8c00:	beq	8c18 <__assert_fail@plt+0x1e8>
    8c04:	movw	r3, #0
    8c08:	movt	r3, #0
    8c0c:	cmp	r3, #0
    8c10:	beq	8c18 <__assert_fail@plt+0x1e8>
    8c14:	blx	r3
    8c18:	pop	{r3, lr}
    8c1c:	b	8b84 <__assert_fail@plt+0x154>
    8c20:	push	{r3, lr}
    8c24:	mov	r0, #0
    8c28:	bl	89a0 <exit@plt>
    8c2c:	push	{r4, r5, r6, r7, r8, lr}
    8c30:	movw	r5, #32928	; 0x80a0
    8c34:	movt	r5, #1
    8c38:	mov	r7, r3
    8c3c:	sub	sp, sp, #144	; 0x90
    8c40:	mov	ip, #1
    8c44:	ldr	r3, [r5]
    8c48:	mov	r6, r0
    8c4c:	str	ip, [sp, #8]
    8c50:	mov	r8, r1
    8c54:	str	r3, [sp, #140]	; 0x8c
    8c58:	bl	8a00 <socket@plt>
    8c5c:	cmn	r0, #1
    8c60:	mov	r4, r0
    8c64:	beq	8d84 <__assert_fail@plt+0x354>
    8c68:	cmp	r0, #2
    8c6c:	ble	8d74 <__assert_fail@plt+0x344>
    8c70:	mov	r1, #0
    8c74:	mov	r2, #128	; 0x80
    8c78:	add	r0, sp, #12
    8c7c:	bl	89d0 <memset@plt>
    8c80:	cmp	r6, #2
    8c84:	strh	r6, [sp, #12]
    8c88:	beq	8d04 <__assert_fail@plt+0x2d4>
    8c8c:	cmp	r6, #10
    8c90:	beq	8ce8 <__assert_fail@plt+0x2b8>
    8c94:	add	r1, sp, #12
    8c98:	mov	r0, r4
    8c9c:	mov	r2, #16
    8ca0:	bl	89c4 <bind@plt>
    8ca4:	subs	r1, r0, #0
    8ca8:	bne	8d68 <__assert_fail@plt+0x338>
    8cac:	sub	r8, r8, #2
    8cb0:	cmp	r8, #1
    8cb4:	bls	8d14 <__assert_fail@plt+0x2e4>
    8cb8:	mov	r0, r4
    8cbc:	mvn	r1, #-2147483648	; 0x80000000
    8cc0:	bl	89f4 <listen@plt>
    8cc4:	cmp	r0, #0
    8cc8:	bne	8d68 <__assert_fail@plt+0x338>
    8ccc:	mov	r0, r4
    8cd0:	ldr	r2, [sp, #140]	; 0x8c
    8cd4:	ldr	r3, [r5]
    8cd8:	cmp	r2, r3
    8cdc:	bne	8d98 <__assert_fail@plt+0x368>
    8ce0:	add	sp, sp, #144	; 0x90
    8ce4:	pop	{r4, r5, r6, r7, r8, pc}
    8ce8:	mov	r3, #4
    8cec:	mov	r0, r4
    8cf0:	str	r3, [sp]
    8cf4:	mov	r1, #41	; 0x29
    8cf8:	mov	r2, #26
    8cfc:	add	r3, sp, #8
    8d00:	bl	88e0 <setsockopt@plt>
    8d04:	ubfx	r3, r7, #8, #8
    8d08:	orr	r7, r3, r7, lsl #8
    8d0c:	strh	r7, [sp, #14]
    8d10:	b	8c94 <__assert_fail@plt+0x264>
    8d14:	cmp	r6, #2
    8d18:	beq	8d48 <__assert_fail@plt+0x318>
    8d1c:	cmp	r6, #10
    8d20:	bne	8ccc <__assert_fail@plt+0x29c>
    8d24:	mov	r3, #4
    8d28:	mov	r0, r4
    8d2c:	str	r3, [sp]
    8d30:	mov	r1, #41	; 0x29
    8d34:	mov	r2, #25
    8d38:	add	r3, sp, #8
    8d3c:	bl	88e0 <setsockopt@plt>
    8d40:	mov	r0, r4
    8d44:	b	8cd0 <__assert_fail@plt+0x2a0>
    8d48:	mov	r3, #4
    8d4c:	mov	r0, r4
    8d50:	str	r3, [sp]
    8d54:	mov	r2, #11
    8d58:	add	r3, sp, #8
    8d5c:	bl	88e0 <setsockopt@plt>
    8d60:	mov	r0, r4
    8d64:	b	8cd0 <__assert_fail@plt+0x2a0>
    8d68:	movw	r0, #60268	; 0xeb6c
    8d6c:	movt	r0, #0
    8d70:	bl	894c <perror@plt>
    8d74:	mov	r0, r4
    8d78:	bl	8a18 <close@plt>
    8d7c:	mvn	r0, #0
    8d80:	b	8cd0 <__assert_fail@plt+0x2a0>
    8d84:	movw	r0, #60268	; 0xeb6c
    8d88:	movt	r0, #0
    8d8c:	bl	894c <perror@plt>
    8d90:	mov	r0, r4
    8d94:	b	8cd0 <__assert_fail@plt+0x2a0>
    8d98:	bl	8940 <__stack_chk_fail@plt>
    8d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8da0:	movw	r4, #32928	; 0x80a0
    8da4:	movt	r4, #1
    8da8:	sub	sp, sp, #84992	; 0x14c00
    8dac:	sub	sp, sp, #28
    8db0:	mov	r3, r1
    8db4:	ldr	ip, [r4]
    8db8:	add	lr, sp, #81920	; 0x14000
    8dbc:	mov	r2, #17
    8dc0:	mov	r1, #2
    8dc4:	str	ip, [lr, #3092]	; 0xc14
    8dc8:	bl	8c2c <__assert_fail@plt+0x1fc>
    8dcc:	cmn	r0, #1
    8dd0:	mov	r9, r0
    8dd4:	bne	8df8 <__assert_fail@plt+0x3c8>
    8dd8:	add	r3, sp, #81920	; 0x14000
    8ddc:	ldr	r2, [r3, #3092]	; 0xc14
    8de0:	ldr	r3, [r4]
    8de4:	cmp	r2, r3
    8de8:	bne	9020 <__assert_fail@plt+0x5f0>
    8dec:	add	sp, sp, #84992	; 0x14c00
    8df0:	add	sp, sp, #28
    8df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8df8:	mov	r2, #0
    8dfc:	add	r0, sp, #228	; 0xe4
    8e00:	mov	r3, r2
    8e04:	movw	r1, #60264	; 0xeb68
    8e08:	movt	r1, #0
    8e0c:	movw	r6, #46072	; 0xb3f8
    8e10:	bl	916c <__assert_fail@plt+0x73c>
    8e14:	add	r0, sp, #9792	; 0x2640
    8e18:	movw	r1, #60264	; 0xeb68
    8e1c:	mov	r2, #1
    8e20:	movt	r1, #0
    8e24:	add	r0, r0, #52	; 0x34
    8e28:	mov	r3, #4
    8e2c:	movt	r6, #65534	; 0xfffe
    8e30:	bl	916c <__assert_fail@plt+0x73c>
    8e34:	add	r7, sp, #100	; 0x64
    8e38:	add	fp, sp, #16
    8e3c:	add	r4, sp, #20
    8e40:	mov	sl, #16
    8e44:	mov	r5, #0
    8e48:	b	8ed8 <__assert_fail@plt+0x4a8>
    8e4c:	add	r2, sp, #19456	; 0x4c00
    8e50:	movt	r3, #1
    8e54:	add	r1, sp, #60	; 0x3c
    8e58:	add	r2, r2, #4
    8e5c:	mov	r0, r8
    8e60:	str	ip, [sp, #12]
    8e64:	bl	9d44 <__assert_fail@plt+0x1314>
    8e68:	mov	r0, r4
    8e6c:	bl	b444 <__assert_fail@plt+0x2a14>
    8e70:	ldr	ip, [sp, #12]
    8e74:	cmp	r0, #0
    8e78:	beq	8fd8 <__assert_fail@plt+0x5a8>
    8e7c:	add	lr, sp, #84992	; 0x14c00
    8e80:	add	r0, sp, #60	; 0x3c
    8e84:	add	lr, lr, #24
    8e88:	mov	r1, #32
    8e8c:	mov	r2, r7
    8e90:	ldr	r3, [lr, r6]
    8e94:	bl	af5c <__assert_fail@plt+0x252c>
    8e98:	mov	r2, #0
    8e9c:	mov	r0, r8
    8ea0:	mov	r3, r2
    8ea4:	add	r1, sp, #60	; 0x3c
    8ea8:	bl	9f90 <__assert_fail@plt+0x1560>
    8eac:	mov	r2, r0
    8eb0:	add	r3, sp, #84992	; 0x14c00
    8eb4:	add	r1, sp, #19456	; 0x4c00
    8eb8:	add	r3, r3, #24
    8ebc:	mov	r0, r9
    8ec0:	add	r1, r1, #4
    8ec4:	ldr	ip, [r3, r6]
    8ec8:	mov	r3, #0
    8ecc:	str	r7, [sp]
    8ed0:	str	ip, [sp, #4]
    8ed4:	bl	89e8 <sendto@plt>
    8ed8:	add	ip, sp, #84992	; 0x14c00
    8edc:	add	r1, sp, #19456	; 0x4c00
    8ee0:	add	ip, ip, #24
    8ee4:	str	r7, [sp]
    8ee8:	str	fp, [sp, #4]
    8eec:	mov	r2, #16
    8ef0:	mov	r0, r9
    8ef4:	movt	r2, #1
    8ef8:	add	r1, r1, #4
    8efc:	mov	r3, #0
    8f00:	str	sl, [ip, r6]
    8f04:	bl	8934 <recvfrom@plt>
    8f08:	cmn	r0, #1
    8f0c:	mov	r8, r0
    8f10:	beq	8ed8 <__assert_fail@plt+0x4a8>
    8f14:	add	r0, sp, #9792	; 0x2640
    8f18:	add	r2, sp, #19456	; 0x4c00
    8f1c:	mov	r3, r8
    8f20:	str	r5, [sp]
    8f24:	add	r0, r0, #52	; 0x34
    8f28:	str	r5, [sp, #4]
    8f2c:	mov	r1, r4
    8f30:	add	r2, r2, #4
    8f34:	bl	92c0 <__assert_fail@plt+0x890>
    8f38:	cmp	r0, #0
    8f3c:	addeq	r8, sp, #9792	; 0x2640
    8f40:	addeq	r8, r8, #52	; 0x34
    8f44:	bne	8fa0 <__assert_fail@plt+0x570>
    8f48:	mov	r0, r4
    8f4c:	bl	b248 <__assert_fail@plt+0x2818>
    8f50:	cmp	r0, #0
    8f54:	bne	8ed8 <__assert_fail@plt+0x4a8>
    8f58:	mov	r0, r4
    8f5c:	bl	b214 <__assert_fail@plt+0x27e4>
    8f60:	str	r4, [sp]
    8f64:	mov	r3, #16
    8f68:	cmp	r0, #1
    8f6c:	mov	ip, r0
    8f70:	beq	8e4c <__assert_fail@plt+0x41c>
    8f74:	add	r2, sp, #19456	; 0x4c00
    8f78:	mov	lr, #400	; 0x190
    8f7c:	movt	r3, #1
    8f80:	str	lr, [sp, #4]
    8f84:	mov	r0, r8
    8f88:	add	r1, sp, #60	; 0x3c
    8f8c:	add	r2, r2, #4
    8f90:	bl	9e60 <__assert_fail@plt+0x1430>
    8f94:	cmp	r0, #0
    8f98:	bne	8e98 <__assert_fail@plt+0x468>
    8f9c:	b	8ed8 <__assert_fail@plt+0x4a8>
    8fa0:	add	r2, sp, #19456	; 0x4c00
    8fa4:	str	r5, [sp]
    8fa8:	mov	r3, r8
    8fac:	str	r5, [sp, #4]
    8fb0:	add	r0, sp, #228	; 0xe4
    8fb4:	mov	r1, r4
    8fb8:	add	r2, r2, #4
    8fbc:	bl	92c0 <__assert_fail@plt+0x890>
    8fc0:	cmp	r0, #7
    8fc4:	beq	8ff8 <__assert_fail@plt+0x5c8>
    8fc8:	cmp	r0, #0
    8fcc:	addeq	r8, sp, #228	; 0xe4
    8fd0:	bne	8ed8 <__assert_fail@plt+0x4a8>
    8fd4:	b	8f48 <__assert_fail@plt+0x518>
    8fd8:	mov	r1, ip
    8fdc:	add	ip, sp, #84992	; 0x14c00
    8fe0:	add	ip, ip, #24
    8fe4:	add	r0, sp, #60	; 0x3c
    8fe8:	mov	r2, r7
    8fec:	ldr	r3, [ip, r6]
    8ff0:	bl	ae78 <__assert_fail@plt+0x2448>
    8ff4:	b	8e98 <__assert_fail@plt+0x468>
    8ff8:	add	r2, sp, #19456	; 0x4c00
    8ffc:	str	r4, [sp]
    9000:	add	r2, r2, #4
    9004:	mov	r3, #16
    9008:	add	r0, sp, #228	; 0xe4
    900c:	movt	r3, #1
    9010:	add	r1, sp, #60	; 0x3c
    9014:	bl	a4dc <__assert_fail@plt+0x1aac>
    9018:	mov	r2, r0
    901c:	b	8eb0 <__assert_fail@plt+0x480>
    9020:	bl	8940 <__stack_chk_fail@plt>
    9024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9028:	sub	sp, sp, #20
    902c:	mov	r8, r0
    9030:	mov	r0, r1
    9034:	mov	r6, r1
    9038:	str	r2, [sp, #8]
    903c:	str	r3, [sp, #4]
    9040:	bl	a664 <__assert_fail@plt+0x1c34>
    9044:	cmp	r0, #20
    9048:	str	r0, [sp]
    904c:	bls	915c <__assert_fail@plt+0x72c>
    9050:	ldr	r3, [sp, #4]
    9054:	cmp	r3, #0
    9058:	beq	915c <__assert_fail@plt+0x72c>
    905c:	ldr	r3, [pc, #256]	; 9164 <__assert_fail@plt+0x734>
    9060:	mov	r4, #20
    9064:	mov	r7, #0
    9068:	movw	fp, #9608	; 0x2588
    906c:	add	r3, pc, r3
    9070:	str	r3, [sp, #12]
    9074:	ldr	r0, [r6, #4]
    9078:	add	r2, r4, #2
    907c:	add	r0, r0, r2
    9080:	bl	b8cc <__assert_fail@plt+0x2e9c>
    9084:	mov	sl, r0
    9088:	ldr	r0, [r6, #4]
    908c:	mov	r9, sl
    9090:	add	r0, r0, r4
    9094:	bl	b8cc <__assert_fail@plt+0x2e9c>
    9098:	mov	r5, r0
    909c:	bl	b2c4 <__assert_fail@plt+0x2894>
    90a0:	cmp	r0, #0
    90a4:	bne	9104 <__assert_fail@plt+0x6d4>
    90a8:	movw	r3, #9604	; 0x2584
    90ac:	ldr	r1, [r8, r3]
    90b0:	ldrh	r2, [r1]
    90b4:	cmp	r2, #0
    90b8:	beq	90dc <__assert_fail@plt+0x6ac>
    90bc:	cmp	r5, r2
    90c0:	bne	90d0 <__assert_fail@plt+0x6a0>
    90c4:	b	9104 <__assert_fail@plt+0x6d4>
    90c8:	cmp	r5, r3
    90cc:	beq	9104 <__assert_fail@plt+0x6d4>
    90d0:	ldrh	r3, [r1, #2]!
    90d4:	cmp	r3, #0
    90d8:	bne	90c8 <__assert_fail@plt+0x698>
    90dc:	mov	r1, r5
    90e0:	mov	r2, sl
    90e4:	ldr	r0, [sp, #12]
    90e8:	bl	ba28 <__assert_fail@plt+0x2ff8>
    90ec:	ldr	r3, [sp, #8]
    90f0:	lsl	r2, r7, #1
    90f4:	add	r7, r7, #1
    90f8:	lsl	r1, r5, #8
    90fc:	orr	r5, r1, r5, lsr #8
    9100:	strh	r5, [r3, r2]
    9104:	ldr	r2, [r8, fp]
    9108:	tst	r2, #128	; 0x80
    910c:	beq	914c <__assert_fail@plt+0x71c>
    9110:	add	r9, r9, #4
    9114:	ldr	r3, [sp]
    9118:	add	r4, r4, r9
    911c:	cmp	r4, r3
    9120:	bcs	9130 <__assert_fail@plt+0x700>
    9124:	ldr	r3, [sp, #4]
    9128:	cmp	r7, r3
    912c:	bcc	9074 <__assert_fail@plt+0x644>
    9130:	ldr	r0, [pc, #48]	; 9168 <__assert_fail@plt+0x738>
    9134:	mov	r1, r7
    9138:	add	r0, pc, r0
    913c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9140:	mov	r0, r7
    9144:	add	sp, sp, #20
    9148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    914c:	mov	r0, sl
    9150:	bl	b8c0 <__assert_fail@plt+0x2e90>
    9154:	mov	r9, r0
    9158:	b	9110 <__assert_fail@plt+0x6e0>
    915c:	mov	r7, #0
    9160:	b	9130 <__assert_fail@plt+0x700>
    9164:	andeq	r5, r0, r0, asr #22
    9168:	andeq	r5, r0, r8, asr #20
    916c:	push	{r4, r5, r6, r7, r8, r9}
    9170:	mov	r6, #0
    9174:	movw	r9, #9604	; 0x2584
    9178:	movw	r8, #9608	; 0x2588
    917c:	movw	r7, #9612	; 0x258c
    9180:	mov	r4, r0
    9184:	mov	r5, r6
    9188:	mov	ip, #200	; 0xc8
    918c:	str	r2, [r0]
    9190:	str	r1, [r0, r9]
    9194:	str	r3, [r0, r8]
    9198:	str	r6, [r0, r7]
    919c:	subs	ip, ip, #1
    91a0:	strb	r5, [r4, #49]	; 0x31
    91a4:	add	r4, r4, #48	; 0x30
    91a8:	bne	919c <__assert_fail@plt+0x76c>
    91ac:	pop	{r4, r5, r6, r7, r8, r9}
    91b0:	bx	lr
    91b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    91b8:	mov	r7, r2
    91bc:	ldr	r4, [sp, #40]	; 0x28
    91c0:	mov	r5, r3
    91c4:	cmp	r4, #0
    91c8:	beq	92a8 <__assert_fail@plt+0x878>
    91cc:	ldr	r3, [r4]
    91d0:	cmp	r3, #0
    91d4:	beq	92a8 <__assert_fail@plt+0x878>
    91d8:	ldr	sl, [pc, #208]	; 92b0 <__assert_fail@plt+0x880>
    91dc:	add	r6, r4, #16
    91e0:	ldr	r9, [pc, #204]	; 92b4 <__assert_fail@plt+0x884>
    91e4:	ldr	r8, [pc, #204]	; 92b8 <__assert_fail@plt+0x888>
    91e8:	add	sl, pc, sl
    91ec:	add	r9, pc, r9
    91f0:	add	r8, pc, r8
    91f4:	b	9208 <__assert_fail@plt+0x7d8>
    91f8:	mov	r4, r6
    91fc:	ldr	r3, [r6], #16
    9200:	cmp	r3, #0
    9204:	beq	92a8 <__assert_fail@plt+0x878>
    9208:	mov	r0, sl
    920c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9210:	mov	r0, r7
    9214:	mov	r1, r5
    9218:	bl	bab4 <__assert_fail@plt+0x3084>
    921c:	mov	r0, r9
    9220:	mov	r1, r5
    9224:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9228:	ldm	r4, {r0, r1}
    922c:	bl	bab4 <__assert_fail@plt+0x3084>
    9230:	ldr	r1, [r4]
    9234:	mov	r2, r5
    9238:	mov	r0, r7
    923c:	bl	8928 <memcmp@plt>
    9240:	ldr	r1, [r4, #4]
    9244:	mov	r2, r0
    9248:	mov	r0, r8
    924c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9250:	ldr	r3, [r4, #4]
    9254:	cmp	r3, r5
    9258:	bne	91f8 <__assert_fail@plt+0x7c8>
    925c:	mov	r0, r7
    9260:	ldr	r1, [r4]
    9264:	mov	r2, r5
    9268:	bl	8928 <memcmp@plt>
    926c:	cmp	r0, #0
    9270:	bne	91f8 <__assert_fail@plt+0x7c8>
    9274:	ldr	r3, [r4, #8]
    9278:	ldr	r2, [sp, #32]
    927c:	ldr	r0, [pc, #56]	; 92bc <__assert_fail@plt+0x88c>
    9280:	str	r3, [r2]
    9284:	add	r0, pc, r0
    9288:	ldr	r3, [r4, #12]
    928c:	ldr	r2, [sp, #36]	; 0x24
    9290:	str	r3, [r2]
    9294:	ldr	r3, [sp, #32]
    9298:	ldr	r1, [r3]
    929c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    92a0:	mov	r0, #1
    92a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    92a8:	mov	r0, #0
    92ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    92b0:	strdeq	r5, [r0], -r0
    92b4:	andeq	r5, r0, r4, lsl #20
    92b8:	andeq	r5, r0, r0, lsl sl
    92bc:	andeq	r5, r0, ip, lsl #19
    92c0:	ldr	ip, [pc, #2064]	; 9ad8 <__assert_fail@plt+0x10a8>
    92c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92c8:	add	ip, pc, ip
    92cc:	ldr	lr, [pc, #2056]	; 9adc <__assert_fail@plt+0x10ac>
    92d0:	movw	sl, #9608	; 0x2588
    92d4:	mov	r6, r0
    92d8:	ldr	r0, [r0, sl]
    92dc:	sub	sp, sp, #124	; 0x7c
    92e0:	mov	r9, r2
    92e4:	ldr	lr, [ip, lr]
    92e8:	eor	r2, r0, #128	; 0x80
    92ec:	mov	r5, r1
    92f0:	ubfx	r2, r2, #7, #1
    92f4:	mov	r0, r9
    92f8:	mov	r1, r3
    92fc:	ldr	ip, [lr]
    9300:	mov	fp, r3
    9304:	str	lr, [sp, #20]
    9308:	mov	r4, #0
    930c:	ldr	r7, [sp, #160]	; 0xa0
    9310:	str	r4, [sp, #36]	; 0x24
    9314:	str	ip, [sp, #116]	; 0x74
    9318:	ldr	r8, [sp, #164]	; 0xa4
    931c:	bl	b0a4 <__assert_fail@plt+0x2674>
    9320:	cmn	r0, #1
    9324:	beq	9358 <__assert_fail@plt+0x928>
    9328:	cmp	r0, r4
    932c:	moveq	r0, #2
    9330:	bne	9350 <__assert_fail@plt+0x920>
    9334:	ldr	r1, [sp, #20]
    9338:	ldr	r2, [sp, #116]	; 0x74
    933c:	ldr	r3, [r1]
    9340:	cmp	r2, r3
    9344:	bne	9954 <__assert_fail@plt+0xf24>
    9348:	add	sp, sp, #124	; 0x7c
    934c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9350:	cmp	r0, fp
    9354:	beq	9360 <__assert_fail@plt+0x930>
    9358:	mov	r0, #1
    935c:	b	9334 <__assert_fail@plt+0x904>
    9360:	str	r9, [r5, #4]
    9364:	str	r0, [r5, #8]
    9368:	str	r6, [r5]
    936c:	str	r4, [r5, #12]
    9370:	str	r4, [r5, #16]
    9374:	strb	r4, [r5, #36]	; 0x24
    9378:	ldr	r3, [r6]
    937c:	sub	r3, r3, #1
    9380:	cmp	r3, #1
    9384:	bls	95c8 <__assert_fail@plt+0xb98>
    9388:	mov	r0, r5
    938c:	bl	b248 <__assert_fail@plt+0x2818>
    9390:	cmp	r0, #2
    9394:	beq	945c <__assert_fail@plt+0xa2c>
    9398:	mov	r0, r5
    939c:	bl	b248 <__assert_fail@plt+0x2818>
    93a0:	cmp	r0, #3
    93a4:	beq	945c <__assert_fail@plt+0xa2c>
    93a8:	mov	fp, #0
    93ac:	mvn	sl, #0
    93b0:	movw	r3, #9608	; 0x2588
    93b4:	ldr	r3, [r6, r3]
    93b8:	tst	r3, #16
    93bc:	beq	9560 <__assert_fail@plt+0xb30>
    93c0:	mov	r4, #0
    93c4:	mov	r9, #1
    93c8:	mov	r0, r5
    93cc:	mov	r1, #8
    93d0:	bl	b270 <__assert_fail@plt+0x2840>
    93d4:	cmp	r0, #0
    93d8:	beq	94f0 <__assert_fail@plt+0xac0>
    93dc:	ldr	r3, [sp, #36]	; 0x24
    93e0:	cmp	r3, #0
    93e4:	movne	r3, #0
    93e8:	andeq	r3, r4, #1
    93ec:	cmp	r3, #0
    93f0:	bne	9404 <__assert_fail@plt+0x9d4>
    93f4:	movw	r3, #9608	; 0x2588
    93f8:	ldr	r3, [r6, r3]
    93fc:	tst	r3, #64	; 0x40
    9400:	beq	94f0 <__assert_fail@plt+0xac0>
    9404:	add	r2, sp, #120	; 0x78
    9408:	mov	r3, #0
    940c:	mov	r0, r5
    9410:	mov	r1, #6
    9414:	strh	r3, [r2, #-96]!	; 0xffffffa0
    9418:	bl	a680 <__assert_fail@plt+0x1c50>
    941c:	cmp	r7, #0
    9420:	beq	9454 <__assert_fail@plt+0xa24>
    9424:	mov	r2, r0
    9428:	add	r1, sp, #36	; 0x24
    942c:	ldrh	r3, [sp, #24]
    9430:	mov	r0, r6
    9434:	str	r1, [sp]
    9438:	add	r1, sp, #40	; 0x28
    943c:	str	r8, [sp, #8]
    9440:	str	r1, [sp, #4]
    9444:	mov	r1, r5
    9448:	blx	r7
    944c:	cmp	r0, #0
    9450:	bne	94f0 <__assert_fail@plt+0xac0>
    9454:	mov	r0, #5
    9458:	b	9334 <__assert_fail@plt+0x904>
    945c:	add	r4, sp, #48	; 0x30
    9460:	mov	r0, r5
    9464:	add	r9, r6, #4
    9468:	mov	sl, #0
    946c:	mov	r1, r4
    9470:	bl	b1ec <__assert_fail@plt+0x27bc>
    9474:	b	9488 <__assert_fail@plt+0xa58>
    9478:	add	sl, sl, #1
    947c:	add	r9, r9, #48	; 0x30
    9480:	cmp	sl, #200	; 0xc8
    9484:	beq	9558 <__assert_fail@plt+0xb28>
    9488:	ldrb	r3, [r9, #45]	; 0x2d
    948c:	cmp	r3, #0
    9490:	beq	9478 <__assert_fail@plt+0xa48>
    9494:	mov	r0, r5
    9498:	ldr	fp, [r9, #16]
    949c:	bl	b214 <__assert_fail@plt+0x27e4>
    94a0:	cmp	fp, r0
    94a4:	bne	9478 <__assert_fail@plt+0xa48>
    94a8:	mov	r0, r4
    94ac:	mov	r1, r9
    94b0:	mov	r2, #16
    94b4:	bl	8928 <memcmp@plt>
    94b8:	cmp	r0, #0
    94bc:	bne	9478 <__assert_fail@plt+0xa48>
    94c0:	add	lr, sl, sl, lsl #1
    94c4:	add	lr, r6, lr, lsl #4
    94c8:	add	r3, lr, #32
    94cc:	ldr	ip, [lr, #24]
    94d0:	ldm	r3, {r0, r1, r2, r3}
    94d4:	ldr	r9, [lr, #28]
    94d8:	ldrb	fp, [lr, #48]	; 0x30
    94dc:	add	lr, sp, #64	; 0x40
    94e0:	str	ip, [sp, #36]	; 0x24
    94e4:	stm	lr, {r0, r1, r2, r3}
    94e8:	str	r9, [sp, #40]	; 0x28
    94ec:	b	93b0 <__assert_fail@plt+0x980>
    94f0:	cmp	r9, #0
    94f4:	bne	9510 <__assert_fail@plt+0xae0>
    94f8:	ldr	r3, [sp, #36]	; 0x24
    94fc:	cmp	r3, #0
    9500:	beq	9510 <__assert_fail@plt+0xae0>
    9504:	ldr	r3, [sp, #40]	; 0x28
    9508:	cmp	r3, #0
    950c:	bne	96e8 <__assert_fail@plt+0xcb8>
    9510:	cmn	sl, #1
    9514:	mov	r0, r6
    9518:	addne	ip, sl, sl, lsl #1
    951c:	mov	r1, r5
    9520:	movne	r2, #0
    9524:	addne	r3, r6, ip, lsl #4
    9528:	strbne	r2, [r3, #49]	; 0x31
    952c:	add	r2, sp, #30
    9530:	mov	r3, #1
    9534:	bl	9024 <__assert_fail@plt+0x5f4>
    9538:	cmp	r0, #0
    953c:	beq	9334 <__assert_fail@plt+0x904>
    9540:	mov	r0, r5
    9544:	bl	b248 <__assert_fail@plt+0x2818>
    9548:	cmp	r0, #0
    954c:	movne	r0, #8
    9550:	moveq	r0, #7
    9554:	b	9334 <__assert_fail@plt+0x904>
    9558:	mov	r0, #6
    955c:	b	9334 <__assert_fail@plt+0x904>
    9560:	mov	r0, r5
    9564:	bl	b248 <__assert_fail@plt+0x2818>
    9568:	cmp	r0, #3
    956c:	beq	9680 <__assert_fail@plt+0xc50>
    9570:	mov	r0, r5
    9574:	bl	b248 <__assert_fail@plt+0x2818>
    9578:	cmp	r0, #1
    957c:	beq	96d4 <__assert_fail@plt+0xca4>
    9580:	ldr	r3, [sp, #36]	; 0x24
    9584:	cmp	r3, #0
    9588:	bne	95bc <__assert_fail@plt+0xb8c>
    958c:	mov	r0, r5
    9590:	bl	b248 <__assert_fail@plt+0x2818>
    9594:	cmp	r0, #0
    9598:	bne	9620 <__assert_fail@plt+0xbf0>
    959c:	movw	r9, #9608	; 0x2588
    95a0:	ldr	r3, [r6, r9]
    95a4:	tst	r3, #1
    95a8:	bne	9634 <__assert_fail@plt+0xc04>
    95ac:	tst	r3, #2
    95b0:	bne	9664 <__assert_fail@plt+0xc34>
    95b4:	tst	r3, #16
    95b8:	beq	96a8 <__assert_fail@plt+0xc78>
    95bc:	mov	r4, #1
    95c0:	mov	r9, #0
    95c4:	b	93c8 <__assert_fail@plt+0x998>
    95c8:	mov	r0, r5
    95cc:	bl	b444 <__assert_fail@plt+0x2a14>
    95d0:	cmp	r0, r4
    95d4:	beq	9650 <__assert_fail@plt+0xc20>
    95d8:	ldr	r3, [r6]
    95dc:	sub	r3, r3, #1
    95e0:	cmp	r3, #1
    95e4:	bhi	9388 <__assert_fail@plt+0x958>
    95e8:	ldr	r3, [r6, sl]
    95ec:	tst	r3, #4
    95f0:	beq	9388 <__assert_fail@plt+0x958>
    95f4:	mov	r0, r5
    95f8:	movw	r1, #32808	; 0x8028
    95fc:	add	r2, sp, #32
    9600:	bl	a7f0 <__assert_fail@plt+0x1dc0>
    9604:	cmp	r0, #0
    9608:	beq	9824 <__assert_fail@plt+0xdf4>
    960c:	ldr	r0, [pc, #1228]	; 9ae0 <__assert_fail@plt+0x10b0>
    9610:	add	r0, pc, r0
    9614:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9618:	mov	r0, #3
    961c:	b	9334 <__assert_fail@plt+0x904>
    9620:	mov	r0, r5
    9624:	bl	b248 <__assert_fail@plt+0x2818>
    9628:	cmp	r0, #1
    962c:	bne	95bc <__assert_fail@plt+0xb8c>
    9630:	b	959c <__assert_fail@plt+0xb6c>
    9634:	mov	r0, r5
    9638:	mov	r1, #6
    963c:	bl	b270 <__assert_fail@plt+0x2840>
    9640:	cmp	r0, #0
    9644:	bne	9938 <__assert_fail@plt+0xf08>
    9648:	mov	r0, #4
    964c:	b	9334 <__assert_fail@plt+0x904>
    9650:	ldr	r0, [pc, #1164]	; 9ae4 <__assert_fail@plt+0x10b4>
    9654:	add	r0, pc, r0
    9658:	bl	ba28 <__assert_fail@plt+0x2ff8>
    965c:	mov	r0, #3
    9660:	b	9334 <__assert_fail@plt+0x904>
    9664:	mov	r0, r5
    9668:	bl	b248 <__assert_fail@plt+0x2818>
    966c:	cmp	r0, #0
    9670:	beq	98c4 <__assert_fail@plt+0xe94>
    9674:	movw	r3, #9608	; 0x2588
    9678:	ldr	r3, [r6, r3]
    967c:	b	95b4 <__assert_fail@plt+0xb84>
    9680:	mov	r0, r5
    9684:	add	r1, sp, #44	; 0x2c
    9688:	bl	aba4 <__assert_fail@plt+0x2174>
    968c:	cmp	r0, #0
    9690:	bne	9570 <__assert_fail@plt+0xb40>
    9694:	ldr	r3, [sp, #44]	; 0x2c
    9698:	sub	r3, r3, #400	; 0x190
    969c:	cmp	r3, #1
    96a0:	bhi	9570 <__assert_fail@plt+0xb40>
    96a4:	b	93c0 <__assert_fail@plt+0x990>
    96a8:	mov	r0, r5
    96ac:	mov	r1, #6
    96b0:	bl	b270 <__assert_fail@plt+0x2840>
    96b4:	cmp	r0, #0
    96b8:	beq	95bc <__assert_fail@plt+0xb8c>
    96bc:	mov	r0, r5
    96c0:	mov	r1, #8
    96c4:	bl	b270 <__assert_fail@plt+0x2840>
    96c8:	cmp	r0, #0
    96cc:	beq	9648 <__assert_fail@plt+0xc18>
    96d0:	b	95bc <__assert_fail@plt+0xb8c>
    96d4:	movw	r3, #9608	; 0x2588
    96d8:	ldr	r3, [r6, r3]
    96dc:	tst	r3, #32
    96e0:	bne	93c0 <__assert_fail@plt+0x990>
    96e4:	b	9580 <__assert_fail@plt+0xb50>
    96e8:	mov	r0, r5
    96ec:	mov	r1, #8
    96f0:	add	r2, sp, #26
    96f4:	bl	a680 <__assert_fail@plt+0x1c50>
    96f8:	subs	r8, r0, #0
    96fc:	beq	9a90 <__assert_fail@plt+0x1060>
    9700:	movw	r3, #9608	; 0x2588
    9704:	ldr	r3, [r6, r3]
    9708:	tst	r3, #2
    970c:	beq	9878 <__assert_fail@plt+0xe48>
    9710:	cmp	fp, #0
    9714:	beq	99e8 <__assert_fail@plt+0xfb8>
    9718:	add	r3, sp, #64	; 0x40
    971c:	add	r9, sp, #80	; 0x50
    9720:	ldm	r3, {r0, r1, r2, r3}
    9724:	stm	r9, {r0, r1, r2, r3}
    9728:	mov	lr, r9
    972c:	ldm	lr!, {r0, r1, r2, r3}
    9730:	add	r7, r5, #20
    9734:	mov	r4, #1
    9738:	str	r0, [r5, #20]
    973c:	str	r2, [r7, #8]
    9740:	str	r1, [r7, #4]
    9744:	str	r3, [r7, #12]
    9748:	strb	r4, [r5, #36]	; 0x24
    974c:	ldr	r3, [r6]
    9750:	cmp	r3, #0
    9754:	cmpne	r3, #3
    9758:	movne	r2, #0
    975c:	moveq	r2, #1
    9760:	beq	99d0 <__assert_fail@plt+0xfa0>
    9764:	cmp	r3, #2
    9768:	beq	9a54 <__assert_fail@plt+0x1024>
    976c:	add	r7, sp, #96	; 0x60
    9770:	add	r1, r8, #20
    9774:	ldr	r0, [r5, #4]
    9778:	str	r9, [sp]
    977c:	str	r2, [sp, #8]
    9780:	mov	lr, #16
    9784:	mov	r3, r7
    9788:	rsb	r1, r0, r1
    978c:	rsb	r2, r0, r8
    9790:	str	lr, [sp, #4]
    9794:	bl	b5c8 <__assert_fail@plt+0x2b98>
    9798:	ldr	r0, [pc, #840]	; 9ae8 <__assert_fail@plt+0x10b8>
    979c:	add	r0, pc, r0
    97a0:	bl	ba28 <__assert_fail@plt+0x2ff8>
    97a4:	ldr	r0, [pc, #832]	; 9aec <__assert_fail@plt+0x10bc>
    97a8:	add	r0, pc, r0
    97ac:	bl	ba28 <__assert_fail@plt+0x2ff8>
    97b0:	ldr	r1, [sp, #40]	; 0x28
    97b4:	ldr	r0, [sp, #36]	; 0x24
    97b8:	bl	bab4 <__assert_fail@plt+0x3084>
    97bc:	ldr	r0, [pc, #812]	; 9af0 <__assert_fail@plt+0x10c0>
    97c0:	add	r0, pc, r0
    97c4:	bl	ba28 <__assert_fail@plt+0x2ff8>
    97c8:	mov	r1, #20
    97cc:	mov	r0, r7
    97d0:	bl	bab4 <__assert_fail@plt+0x3084>
    97d4:	ldr	r0, [pc, #792]	; 9af4 <__assert_fail@plt+0x10c4>
    97d8:	add	r0, pc, r0
    97dc:	bl	ba28 <__assert_fail@plt+0x2ff8>
    97e0:	mov	r1, #20
    97e4:	mov	r0, r8
    97e8:	bl	bab4 <__assert_fail@plt+0x3084>
    97ec:	ldr	r0, [pc, #772]	; 9af8 <__assert_fail@plt+0x10c8>
    97f0:	add	r0, pc, r0
    97f4:	bl	ba28 <__assert_fail@plt+0x2ff8>
    97f8:	mov	r0, r7
    97fc:	mov	r1, r8
    9800:	mov	r2, #20
    9804:	bl	8928 <memcmp@plt>
    9808:	cmp	r0, #0
    980c:	beq	9918 <__assert_fail@plt+0xee8>
    9810:	ldr	r0, [pc, #740]	; 9afc <__assert_fail@plt+0x10cc>
    9814:	add	r0, pc, r0
    9818:	bl	ba28 <__assert_fail@plt+0x2ff8>
    981c:	mov	r0, #5
    9820:	b	9334 <__assert_fail@plt+0x904>
    9824:	mov	r0, r5
    9828:	ldr	r9, [r5, #4]
    982c:	bl	a664 <__assert_fail@plt+0x1c34>
    9830:	ldr	r2, [r6]
    9834:	subs	r3, r2, #2
    9838:	rsbs	r2, r3, #0
    983c:	adcs	r2, r2, r3
    9840:	mov	r1, r0
    9844:	mov	r0, r9
    9848:	bl	b3a4 <__assert_fail@plt+0x2974>
    984c:	ldr	r1, [sp, #32]
    9850:	rev	r1, r1
    9854:	str	r1, [sp, #32]
    9858:	cmp	r0, r1
    985c:	mov	r2, r0
    9860:	beq	9a44 <__assert_fail@plt+0x1014>
    9864:	ldr	r0, [pc, #660]	; 9b00 <__assert_fail@plt+0x10d0>
    9868:	add	r0, pc, r0
    986c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9870:	mov	r0, #3
    9874:	b	9334 <__assert_fail@plt+0x904>
    9878:	ldr	r3, [r6]
    987c:	cmp	r3, #0
    9880:	cmpne	r3, #3
    9884:	beq	999c <__assert_fail@plt+0xf6c>
    9888:	cmp	r3, #2
    988c:	beq	9958 <__assert_fail@plt+0xf28>
    9890:	ldr	r2, [sp, #36]	; 0x24
    9894:	add	r7, sp, #96	; 0x60
    9898:	ldr	lr, [sp, #40]	; 0x28
    989c:	add	r1, r8, #20
    98a0:	ldr	r0, [r5, #4]
    98a4:	mov	r3, r7
    98a8:	str	r2, [sp]
    98ac:	str	r9, [sp, #8]
    98b0:	rsb	r1, r0, r1
    98b4:	rsb	r2, r0, r8
    98b8:	str	lr, [sp, #4]
    98bc:	bl	b5c8 <__assert_fail@plt+0x2b98>
    98c0:	b	9798 <__assert_fail@plt+0xd68>
    98c4:	mov	r0, r5
    98c8:	mov	r1, #6
    98cc:	bl	b270 <__assert_fail@plt+0x2840>
    98d0:	cmp	r0, #0
    98d4:	beq	9648 <__assert_fail@plt+0xc18>
    98d8:	mov	r0, r5
    98dc:	mov	r1, #8
    98e0:	bl	b270 <__assert_fail@plt+0x2840>
    98e4:	cmp	r0, #0
    98e8:	beq	9648 <__assert_fail@plt+0xc18>
    98ec:	mov	r0, r5
    98f0:	mov	r1, #21
    98f4:	bl	b270 <__assert_fail@plt+0x2840>
    98f8:	cmp	r0, #0
    98fc:	beq	9648 <__assert_fail@plt+0xc18>
    9900:	mov	r0, r5
    9904:	mov	r1, #20
    9908:	bl	b270 <__assert_fail@plt+0x2840>
    990c:	cmp	r0, #0
    9910:	beq	9648 <__assert_fail@plt+0xc18>
    9914:	b	9674 <__assert_fail@plt+0xc44>
    9918:	ldr	r0, [pc, #484]	; 9b04 <__assert_fail@plt+0x10d4>
    991c:	add	r0, pc, r0
    9920:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9924:	ldr	r2, [sp, #36]	; 0x24
    9928:	ldr	r3, [sp, #40]	; 0x28
    992c:	str	r2, [r5, #12]
    9930:	str	r3, [r5, #16]
    9934:	b	9510 <__assert_fail@plt+0xae0>
    9938:	mov	r0, r5
    993c:	mov	r1, #8
    9940:	bl	b270 <__assert_fail@plt+0x2840>
    9944:	cmp	r0, #0
    9948:	beq	9648 <__assert_fail@plt+0xc18>
    994c:	ldr	r3, [r6, r9]
    9950:	b	95ac <__assert_fail@plt+0xb7c>
    9954:	bl	8940 <__stack_chk_fail@plt>
    9958:	mov	r0, r5
    995c:	ldr	r9, [r5, #4]
    9960:	bl	a664 <__assert_fail@plt+0x1c34>
    9964:	ldr	r3, [sp, #36]	; 0x24
    9968:	ldr	lr, [sp, #40]	; 0x28
    996c:	add	r7, sp, #96	; 0x60
    9970:	add	r1, r8, #20
    9974:	mov	r2, #1
    9978:	str	r3, [sp]
    997c:	rsb	r1, r9, r1
    9980:	str	r2, [sp, #8]
    9984:	mov	r3, r7
    9988:	str	lr, [sp, #4]
    998c:	sub	r2, r0, #20
    9990:	mov	r0, r9
    9994:	bl	b5c8 <__assert_fail@plt+0x2b98>
    9998:	b	9798 <__assert_fail@plt+0xd68>
    999c:	ldr	ip, [sp, #36]	; 0x24
    99a0:	add	r7, sp, #96	; 0x60
    99a4:	ldr	r9, [sp, #40]	; 0x28
    99a8:	add	r1, r8, #20
    99ac:	ldr	r0, [r5, #4]
    99b0:	mov	lr, #1
    99b4:	mov	r3, r7
    99b8:	str	ip, [sp]
    99bc:	rsb	r1, r0, r1
    99c0:	rsb	r2, r0, r8
    99c4:	stmib	sp, {r9, lr}
    99c8:	bl	b5c8 <__assert_fail@plt+0x2b98>
    99cc:	b	9798 <__assert_fail@plt+0xd68>
    99d0:	ldr	r0, [r5, #4]
    99d4:	add	r7, sp, #96	; 0x60
    99d8:	add	r1, r8, #20
    99dc:	str	r9, [sp]
    99e0:	str	r4, [sp, #8]
    99e4:	b	9780 <__assert_fail@plt+0xd50>
    99e8:	mov	r1, #20
    99ec:	add	r2, sp, #28
    99f0:	mov	r0, r5
    99f4:	bl	a680 <__assert_fail@plt+0x1c50>
    99f8:	add	r2, sp, #30
    99fc:	mov	r1, #6
    9a00:	mov	r7, r0
    9a04:	mov	r0, r5
    9a08:	bl	a680 <__assert_fail@plt+0x1c50>
    9a0c:	cmp	r0, #0
    9a10:	cmpne	r7, #0
    9a14:	mov	r2, r0
    9a18:	beq	9454 <__assert_fail@plt+0xa24>
    9a1c:	mov	r0, r7
    9a20:	ldr	lr, [sp, #40]	; 0x28
    9a24:	ldr	r7, [sp, #36]	; 0x24
    9a28:	add	r9, sp, #80	; 0x50
    9a2c:	ldrh	r1, [sp, #28]
    9a30:	ldrh	r3, [sp, #30]
    9a34:	str	r9, [sp, #8]
    9a38:	stm	sp, {r7, lr}
    9a3c:	bl	b6e8 <__assert_fail@plt+0x2cb8>
    9a40:	b	9728 <__assert_fail@plt+0xcf8>
    9a44:	ldr	r0, [pc, #188]	; 9b08 <__assert_fail@plt+0x10d8>
    9a48:	add	r0, pc, r0
    9a4c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9a50:	b	9388 <__assert_fail@plt+0x958>
    9a54:	mov	r0, r5
    9a58:	ldr	fp, [r5, #4]
    9a5c:	bl	a664 <__assert_fail@plt+0x1c34>
    9a60:	add	r7, sp, #96	; 0x60
    9a64:	add	r1, r8, #20
    9a68:	mov	r2, #16
    9a6c:	str	r9, [sp]
    9a70:	mov	r3, r7
    9a74:	str	r2, [sp, #4]
    9a78:	rsb	r1, fp, r1
    9a7c:	str	r4, [sp, #8]
    9a80:	sub	r2, r0, #20
    9a84:	mov	r0, fp
    9a88:	bl	b5c8 <__assert_fail@plt+0x2b98>
    9a8c:	b	9798 <__assert_fail@plt+0xd68>
    9a90:	mov	r0, r5
    9a94:	bl	b248 <__assert_fail@plt+0x2818>
    9a98:	cmp	r0, #3
    9a9c:	beq	9ab0 <__assert_fail@plt+0x1080>
    9aa0:	ldr	r0, [pc, #100]	; 9b0c <__assert_fail@plt+0x10dc>
    9aa4:	add	r0, pc, r0
    9aa8:	bl	ba28 <__assert_fail@plt+0x2ff8>
    9aac:	b	9454 <__assert_fail@plt+0xa24>
    9ab0:	mov	r0, r5
    9ab4:	add	r1, sp, #44	; 0x2c
    9ab8:	bl	aba4 <__assert_fail@plt+0x2174>
    9abc:	cmp	r0, #0
    9ac0:	bne	9aa0 <__assert_fail@plt+0x1070>
    9ac4:	ldr	r3, [sp, #44]	; 0x2c
    9ac8:	sub	r3, r3, #400	; 0x190
    9acc:	cmp	r3, #1
    9ad0:	bhi	9aa0 <__assert_fail@plt+0x1070>
    9ad4:	b	9510 <__assert_fail@plt+0xae0>
    9ad8:	andeq	lr, r0, r0, lsr sp
    9adc:	andeq	r0, r0, r4, lsl #1
    9ae0:	andeq	r5, r0, r4, asr r6
    9ae4:	strdeq	r5, [r0], -r0
    9ae8:	andeq	r5, r0, ip, asr #10
    9aec:	andeq	r5, r0, r0, ror #10
    9af0:	andeq	r5, r0, r4, asr r5
    9af4:	andeq	r5, r0, ip, asr #10
    9af8:			; <UNDEFINED> instruction: 0x000053b8
    9afc:	andeq	r5, r0, r0, lsr #10
    9b00:	andeq	r5, r0, ip, lsr #8
    9b04:	andeq	r5, r0, r8, asr #8
    9b08:	andeq	r5, r0, ip, lsl #5
    9b0c:	ldrdeq	r5, [r0], -r0
    9b10:	push	{r4, r5, r6, r7, r8, lr}
    9b14:	mov	r8, r0
    9b18:	add	r4, r0, #4
    9b1c:	mov	r7, r1
    9b20:	mov	r5, #0
    9b24:	b	9b34 <__assert_fail@plt+0x1104>
    9b28:	add	r5, r5, #1
    9b2c:	cmp	r5, #200	; 0xc8
    9b30:	beq	9b70 <__assert_fail@plt+0x1140>
    9b34:	ldrb	r6, [r4, #45]	; 0x2d
    9b38:	mov	r1, r4
    9b3c:	mov	r0, r7
    9b40:	mov	r2, #16
    9b44:	cmp	r6, #0
    9b48:	add	r4, r4, #48	; 0x30
    9b4c:	beq	9b28 <__assert_fail@plt+0x10f8>
    9b50:	bl	8928 <memcmp@plt>
    9b54:	cmp	r0, #0
    9b58:	bne	9b28 <__assert_fail@plt+0x10f8>
    9b5c:	add	r5, r5, r5, lsl #1
    9b60:	add	r8, r8, r5, lsl #4
    9b64:	strb	r0, [r8, #49]	; 0x31
    9b68:	mov	r0, r6
    9b6c:	pop	{r4, r5, r6, r7, r8, pc}
    9b70:	mov	r6, #0
    9b74:	mov	r0, r6
    9b78:	pop	{r4, r5, r6, r7, r8, pc}
    9b7c:	push	{r4, r5, r6, r7, r8, r9, lr}
    9b80:	sub	sp, sp, #28
    9b84:	ldr	lr, [pc, #236]	; 9c78 <__assert_fail@plt+0x1248>
    9b88:	mov	r4, r1
    9b8c:	ldr	ip, [pc, #232]	; 9c7c <__assert_fail@plt+0x124c>
    9b90:	add	r7, sp, #4
    9b94:	add	lr, pc, lr
    9b98:	ldr	r9, [sp, #56]	; 0x38
    9b9c:	mov	r5, #0
    9ba0:	mov	r8, r0
    9ba4:	ldr	r6, [lr, ip]
    9ba8:	mov	r0, r7
    9bac:	stmib	r4, {r2, r3}
    9bb0:	mov	r1, lr
    9bb4:	str	r5, [r4, #12]
    9bb8:	ldr	r3, [r6]
    9bbc:	str	r5, [r4, #16]
    9bc0:	strb	r5, [r4, #36]	; 0x24
    9bc4:	str	r8, [r4]
    9bc8:	str	r3, [sp, #20]
    9bcc:	bl	b8ac <__assert_fail@plt+0x2e7c>
    9bd0:	mov	r1, r5
    9bd4:	mov	r0, r4
    9bd8:	mov	r2, r9
    9bdc:	mov	r3, r7
    9be0:	bl	a5f0 <__assert_fail@plt+0x1bc0>
    9be4:	subs	r5, r0, #0
    9be8:	beq	9bfc <__assert_fail@plt+0x11cc>
    9bec:	ldr	r3, [r8]
    9bf0:	sub	r3, r3, #1
    9bf4:	cmp	r3, #1
    9bf8:	bls	9c18 <__assert_fail@plt+0x11e8>
    9bfc:	ldr	r2, [sp, #20]
    9c00:	mov	r0, r5
    9c04:	ldr	r3, [r6]
    9c08:	cmp	r2, r3
    9c0c:	bne	9c74 <__assert_fail@plt+0x1244>
    9c10:	add	sp, sp, #28
    9c14:	pop	{r4, r5, r6, r7, r8, r9, pc}
    9c18:	add	r3, sp, #24
    9c1c:	movw	r2, #4641	; 0x1221
    9c20:	ldr	r1, [r4, #4]
    9c24:	movt	r2, #17060	; 0x42a4
    9c28:	str	r2, [r3, #-24]!	; 0xffffffe8
    9c2c:	ldr	r0, [r3]
    9c30:	str	r0, [r1, #4]
    9c34:	ldr	r3, [r8]
    9c38:	sub	r3, r3, #1
    9c3c:	cmp	r3, #1
    9c40:	bhi	9bfc <__assert_fail@plt+0x11cc>
    9c44:	movw	r3, #9612	; 0x258c
    9c48:	ldr	r1, [r8, r3]
    9c4c:	cmp	r1, #0
    9c50:	beq	9c60 <__assert_fail@plt+0x1230>
    9c54:	mov	r0, r4
    9c58:	bl	b4b8 <__assert_fail@plt+0x2a88>
    9c5c:	b	9bfc <__assert_fail@plt+0x11cc>
    9c60:	movw	r3, #9608	; 0x2588
    9c64:	ldr	r3, [r8, r3]
    9c68:	tst	r3, #8
    9c6c:	bne	9c54 <__assert_fail@plt+0x1224>
    9c70:	b	9bfc <__assert_fail@plt+0x11cc>
    9c74:	bl	8940 <__stack_chk_fail@plt>
    9c78:	andeq	lr, r0, r4, ror #8
    9c7c:	andeq	r0, r0, r4, lsl #1
    9c80:	ldr	ip, [pc, #180]	; 9d3c <__assert_fail@plt+0x130c>
    9c84:	push	{r4, r5, r6, r7, r8, lr}
    9c88:	add	ip, pc, ip
    9c8c:	ldr	lr, [pc, #172]	; 9d40 <__assert_fail@plt+0x1310>
    9c90:	sub	sp, sp, #24
    9c94:	mov	r4, r1
    9c98:	add	r6, sp, #4
    9c9c:	ldr	r8, [sp, #48]	; 0x30
    9ca0:	mov	r1, #0
    9ca4:	ldr	r5, [ip, lr]
    9ca8:	mov	r7, r0
    9cac:	stmib	r4, {r2, r3}
    9cb0:	mov	r0, r6
    9cb4:	str	r1, [r4, #12]
    9cb8:	ldr	r3, [r5]
    9cbc:	str	r1, [r4, #16]
    9cc0:	strb	r1, [r4, #36]	; 0x24
    9cc4:	str	r7, [r4]
    9cc8:	str	r3, [sp, #20]
    9ccc:	bl	b8ac <__assert_fail@plt+0x2e7c>
    9cd0:	mov	r3, r6
    9cd4:	mov	r0, r4
    9cd8:	mov	r2, r8
    9cdc:	mov	r1, #1
    9ce0:	bl	a5f0 <__assert_fail@plt+0x1bc0>
    9ce4:	subs	r3, r0, #0
    9ce8:	beq	9cfc <__assert_fail@plt+0x12cc>
    9cec:	ldr	r2, [r7]
    9cf0:	sub	r2, r2, #1
    9cf4:	cmp	r2, #1
    9cf8:	bls	9d18 <__assert_fail@plt+0x12e8>
    9cfc:	ldr	r2, [sp, #20]
    9d00:	mov	r0, r3
    9d04:	ldr	r3, [r5]
    9d08:	cmp	r2, r3
    9d0c:	bne	9d38 <__assert_fail@plt+0x1308>
    9d10:	add	sp, sp, #24
    9d14:	pop	{r4, r5, r6, r7, r8, pc}
    9d18:	add	r2, sp, #24
    9d1c:	ldr	ip, [r4, #4]
    9d20:	movw	r1, #4641	; 0x1221
    9d24:	movt	r1, #17060	; 0x42a4
    9d28:	str	r1, [r2, #-24]!	; 0xffffffe8
    9d2c:	ldr	r0, [r2]
    9d30:	str	r0, [ip, #4]
    9d34:	b	9cfc <__assert_fail@plt+0x12cc>
    9d38:	bl	8940 <__stack_chk_fail@plt>
    9d3c:	andeq	lr, r0, r0, ror r3
    9d40:	andeq	r0, r0, r4, lsl #1
    9d44:	ldr	ip, [pc, #268]	; 9e58 <__assert_fail@plt+0x1428>
    9d48:	push	{r4, r5, r6, r7, r8, r9, lr}
    9d4c:	mov	r7, r0
    9d50:	ldr	r0, [pc, #260]	; 9e5c <__assert_fail@plt+0x142c>
    9d54:	add	ip, pc, ip
    9d58:	sub	sp, sp, #28
    9d5c:	mov	r8, r3
    9d60:	mov	r5, r1
    9d64:	mov	r9, r2
    9d68:	ldr	r6, [ip, r0]
    9d6c:	mov	r1, ip
    9d70:	ldr	r4, [sp, #56]	; 0x38
    9d74:	ldr	r3, [r6]
    9d78:	mov	r0, r4
    9d7c:	str	r3, [sp, #20]
    9d80:	bl	b248 <__assert_fail@plt+0x2818>
    9d84:	cmp	r0, #0
    9d88:	beq	9dac <__assert_fail@plt+0x137c>
    9d8c:	mov	r4, #0
    9d90:	ldr	r2, [sp, #20]
    9d94:	mov	r0, r4
    9d98:	ldr	r3, [r6]
    9d9c:	cmp	r2, r3
    9da0:	bne	9e54 <__assert_fail@plt+0x1424>
    9da4:	add	sp, sp, #28
    9da8:	pop	{r4, r5, r6, r7, r8, r9, pc}
    9dac:	str	r8, [r5, #8]
    9db0:	mov	r2, #16
    9db4:	str	r9, [r5, #4]
    9db8:	add	r1, r4, #20
    9dbc:	str	r7, [r5]
    9dc0:	add	r0, r5, #20
    9dc4:	ldr	r3, [r4, #12]
    9dc8:	add	r8, sp, #4
    9dcc:	str	r3, [r5, #12]
    9dd0:	ldr	r3, [r4, #16]
    9dd4:	str	r3, [r5, #16]
    9dd8:	bl	88f8 <memmove@plt>
    9ddc:	ldrb	r3, [r4, #36]	; 0x24
    9de0:	mov	r1, r8
    9de4:	mov	r0, r4
    9de8:	strb	r3, [r5, #36]	; 0x24
    9dec:	bl	b1ec <__assert_fail@plt+0x27bc>
    9df0:	mov	r0, r4
    9df4:	bl	b214 <__assert_fail@plt+0x27e4>
    9df8:	mov	r3, r8
    9dfc:	mov	r1, #2
    9e00:	mov	r2, r0
    9e04:	mov	r0, r5
    9e08:	bl	a5f0 <__assert_fail@plt+0x1bc0>
    9e0c:	subs	r4, r0, #0
    9e10:	beq	9d8c <__assert_fail@plt+0x135c>
    9e14:	ldr	r3, [r7]
    9e18:	sub	r3, r3, #1
    9e1c:	cmp	r3, #1
    9e20:	bhi	9d90 <__assert_fail@plt+0x1360>
    9e24:	movw	r3, #9612	; 0x258c
    9e28:	ldr	r1, [r7, r3]
    9e2c:	cmp	r1, #0
    9e30:	beq	9e40 <__assert_fail@plt+0x1410>
    9e34:	mov	r0, r5
    9e38:	bl	b4b8 <__assert_fail@plt+0x2a88>
    9e3c:	b	9d90 <__assert_fail@plt+0x1360>
    9e40:	movw	r3, #9608	; 0x2588
    9e44:	ldr	r3, [r7, r3]
    9e48:	tst	r3, #8
    9e4c:	bne	9e34 <__assert_fail@plt+0x1404>
    9e50:	b	9d90 <__assert_fail@plt+0x1360>
    9e54:	bl	8940 <__stack_chk_fail@plt>
    9e58:	andeq	lr, r0, r4, lsr #5
    9e5c:	andeq	r0, r0, r4, lsl #1
    9e60:	ldr	ip, [pc, #288]	; 9f88 <__assert_fail@plt+0x1558>
    9e64:	push	{r4, r5, r6, r7, r8, r9, lr}
    9e68:	mov	r7, r0
    9e6c:	ldr	r0, [pc, #280]	; 9f8c <__assert_fail@plt+0x155c>
    9e70:	add	ip, pc, ip
    9e74:	sub	sp, sp, #28
    9e78:	mov	r8, r3
    9e7c:	mov	r4, r1
    9e80:	mov	r9, r2
    9e84:	ldr	r6, [ip, r0]
    9e88:	mov	r1, ip
    9e8c:	ldr	r5, [sp, #56]	; 0x38
    9e90:	ldr	r3, [r6]
    9e94:	mov	r0, r5
    9e98:	str	r3, [sp, #20]
    9e9c:	bl	b248 <__assert_fail@plt+0x2818>
    9ea0:	cmp	r0, #0
    9ea4:	beq	9ec4 <__assert_fail@plt+0x1494>
    9ea8:	mov	r0, #0
    9eac:	ldr	r2, [sp, #20]
    9eb0:	ldr	r3, [r6]
    9eb4:	cmp	r2, r3
    9eb8:	bne	9f84 <__assert_fail@plt+0x1554>
    9ebc:	add	sp, sp, #28
    9ec0:	pop	{r4, r5, r6, r7, r8, r9, pc}
    9ec4:	str	r8, [r4, #8]
    9ec8:	mov	r2, #16
    9ecc:	str	r9, [r4, #4]
    9ed0:	add	r1, r5, #20
    9ed4:	str	r7, [r4]
    9ed8:	add	r0, r4, #20
    9edc:	ldr	r3, [r5, #12]
    9ee0:	add	r8, sp, #4
    9ee4:	str	r3, [r4, #12]
    9ee8:	ldr	r3, [r5, #16]
    9eec:	str	r3, [r4, #16]
    9ef0:	bl	88f8 <memmove@plt>
    9ef4:	ldrb	r3, [r5, #36]	; 0x24
    9ef8:	mov	r1, r8
    9efc:	mov	r0, r5
    9f00:	strb	r3, [r4, #36]	; 0x24
    9f04:	bl	b1ec <__assert_fail@plt+0x27bc>
    9f08:	mov	r0, r5
    9f0c:	bl	b214 <__assert_fail@plt+0x27e4>
    9f10:	mov	r3, r8
    9f14:	mov	r1, #3
    9f18:	mov	r2, r0
    9f1c:	mov	r0, r4
    9f20:	bl	a5f0 <__assert_fail@plt+0x1bc0>
    9f24:	cmp	r0, #0
    9f28:	beq	9ea8 <__assert_fail@plt+0x1478>
    9f2c:	ldr	r3, [r7]
    9f30:	sub	r3, r3, #1
    9f34:	cmp	r3, #1
    9f38:	bls	9f54 <__assert_fail@plt+0x1524>
    9f3c:	mov	r0, r4
    9f40:	ldr	r1, [sp, #60]	; 0x3c
    9f44:	bl	b31c <__assert_fail@plt+0x28ec>
    9f48:	rsbs	r0, r0, #1
    9f4c:	movcc	r0, #0
    9f50:	b	9eac <__assert_fail@plt+0x147c>
    9f54:	movw	r3, #9612	; 0x258c
    9f58:	ldr	r1, [r7, r3]
    9f5c:	cmp	r1, #0
    9f60:	beq	9f70 <__assert_fail@plt+0x1540>
    9f64:	mov	r0, r4
    9f68:	bl	b4b8 <__assert_fail@plt+0x2a88>
    9f6c:	b	9f3c <__assert_fail@plt+0x150c>
    9f70:	movw	r3, #9608	; 0x2588
    9f74:	ldr	r3, [r7, r3]
    9f78:	tst	r3, #8
    9f7c:	beq	9f3c <__assert_fail@plt+0x150c>
    9f80:	b	9f64 <__assert_fail@plt+0x1534>
    9f84:	bl	8940 <__stack_chk_fail@plt>
    9f88:	andeq	lr, r0, r8, lsl #3
    9f8c:	andeq	r0, r0, r4, lsl #1
    9f90:	ldr	ip, [pc, #1316]	; a4bc <__assert_fail@plt+0x1a8c>
    9f94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f98:	mov	r5, r1
    9f9c:	ldr	r1, [pc, #1308]	; a4c0 <__assert_fail@plt+0x1a90>
    9fa0:	add	ip, pc, ip
    9fa4:	mov	r7, r3
    9fa8:	sub	sp, sp, #60	; 0x3c
    9fac:	mov	r3, ip
    9fb0:	mov	r6, r0
    9fb4:	ldr	r8, [ip, r1]
    9fb8:	mov	r0, r5
    9fbc:	mov	r9, r2
    9fc0:	ldr	r3, [r8]
    9fc4:	str	r3, [sp, #52]	; 0x34
    9fc8:	bl	b248 <__assert_fail@plt+0x2818>
    9fcc:	cmp	r0, #0
    9fd0:	bne	a18c <__assert_fail@plt+0x175c>
    9fd4:	mov	r4, r0
    9fd8:	mov	ip, r6
    9fdc:	b	9ff0 <__assert_fail@plt+0x15c0>
    9fe0:	add	r4, r4, #1
    9fe4:	add	ip, ip, #48	; 0x30
    9fe8:	cmp	r4, #200	; 0xc8
    9fec:	beq	a25c <__assert_fail@plt+0x182c>
    9ff0:	ldrb	lr, [ip, #49]	; 0x31
    9ff4:	cmp	lr, #0
    9ff8:	bne	9fe0 <__assert_fail@plt+0x15b0>
    9ffc:	ldr	sl, [r5, #12]
    a000:	cmp	sl, #0
    a004:	ldrne	r7, [r5, #16]
    a008:	beq	a1a0 <__assert_fail@plt+0x1770>
    a00c:	ldrb	r3, [r5, #36]	; 0x24
    a010:	cmp	r3, #0
    a014:	bne	a1dc <__assert_fail@plt+0x17ac>
    a018:	movw	r3, #9608	; 0x2588
    a01c:	ldr	r3, [r6, r3]
    a020:	tst	r3, #2
    a024:	bne	a2f0 <__assert_fail@plt+0x18c0>
    a028:	mov	r0, r5
    a02c:	mov	r1, #8
    a030:	mov	r2, #20
    a034:	bl	ac54 <__assert_fail@plt+0x2224>
    a038:	subs	r9, r0, #0
    a03c:	beq	a268 <__assert_fail@plt+0x1838>
    a040:	movw	r3, #9608	; 0x2588
    a044:	ldr	r2, [r6, r3]
    a048:	ldr	r3, [r6]
    a04c:	tst	r2, #2
    a050:	beq	a1fc <__assert_fail@plt+0x17cc>
    a054:	cmp	r3, #0
    a058:	cmpne	r3, #3
    a05c:	movne	fp, #0
    a060:	moveq	fp, #1
    a064:	beq	a434 <__assert_fail@plt+0x1a04>
    a068:	cmp	r3, #2
    a06c:	beq	a3a4 <__assert_fail@plt+0x1974>
    a070:	ldr	ip, [r5, #4]
    a074:	mov	r0, r5
    a078:	str	ip, [sp, #20]
    a07c:	bl	a664 <__assert_fail@plt+0x1c34>
    a080:	mov	r1, r0
    a084:	mov	r0, r5
    a088:	str	r1, [sp, #16]
    a08c:	bl	a664 <__assert_fail@plt+0x1c34>
    a090:	ldr	ip, [sp, #20]
    a094:	mov	r3, #16
    a098:	add	r2, sp, #36	; 0x24
    a09c:	ldr	r1, [sp, #16]
    a0a0:	stm	sp, {r2, r3}
    a0a4:	mov	r3, r9
    a0a8:	str	fp, [sp, #8]
    a0ac:	sub	r2, r0, #20
    a0b0:	mov	r0, ip
    a0b4:	bl	b5c8 <__assert_fail@plt+0x2b98>
    a0b8:	ldr	r0, [pc, #1028]	; a4c4 <__assert_fail@plt+0x1a94>
    a0bc:	add	r0, pc, r0
    a0c0:	bl	ba28 <__assert_fail@plt+0x2ff8>
    a0c4:	mov	r1, r7
    a0c8:	mov	r0, sl
    a0cc:	bl	bab4 <__assert_fail@plt+0x3084>
    a0d0:	ldr	r0, [pc, #1008]	; a4c8 <__assert_fail@plt+0x1a98>
    a0d4:	add	r0, pc, r0
    a0d8:	bl	ba28 <__assert_fail@plt+0x2ff8>
    a0dc:	mov	r0, r9
    a0e0:	mov	r1, #20
    a0e4:	bl	bab4 <__assert_fail@plt+0x3084>
    a0e8:	ldr	r0, [pc, #988]	; a4cc <__assert_fail@plt+0x1a9c>
    a0ec:	add	r0, pc, r0
    a0f0:	bl	ba28 <__assert_fail@plt+0x2ff8>
    a0f4:	ldr	r3, [r6]
    a0f8:	sub	r3, r3, #1
    a0fc:	cmp	r3, #1
    a100:	bhi	a1b8 <__assert_fail@plt+0x1788>
    a104:	movw	r3, #9608	; 0x2588
    a108:	ldr	r3, [r6, r3]
    a10c:	tst	r3, #4
    a110:	beq	a1b8 <__assert_fail@plt+0x1788>
    a114:	mov	r0, r5
    a118:	movw	r1, #32808	; 0x8028
    a11c:	mov	r2, #4
    a120:	bl	ac54 <__assert_fail@plt+0x2224>
    a124:	subs	r9, r0, #0
    a128:	beq	a268 <__assert_fail@plt+0x1838>
    a12c:	mov	r0, r5
    a130:	ldr	fp, [r5, #4]
    a134:	bl	a664 <__assert_fail@plt+0x1c34>
    a138:	ldr	r2, [r6]
    a13c:	subs	r3, r2, #2
    a140:	rsbs	r2, r3, #0
    a144:	adcs	r2, r2, r3
    a148:	mov	r1, r0
    a14c:	mov	r0, fp
    a150:	bl	b3a4 <__assert_fail@plt+0x2974>
    a154:	add	r3, sp, #56	; 0x38
    a158:	str	r0, [r3, #-24]!	; 0xffffffe8
    a15c:	ldr	r0, [r3]
    a160:	str	r0, [r9]
    a164:	ldr	r0, [pc, #868]	; a4d0 <__assert_fail@plt+0x1aa0>
    a168:	add	r0, pc, r0
    a16c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    a170:	mov	r0, r9
    a174:	mov	r1, #4
    a178:	bl	bab4 <__assert_fail@plt+0x3084>
    a17c:	ldr	r0, [pc, #848]	; a4d4 <__assert_fail@plt+0x1aa4>
    a180:	add	r0, pc, r0
    a184:	bl	ba28 <__assert_fail@plt+0x2ff8>
    a188:	b	a1b8 <__assert_fail@plt+0x1788>
    a18c:	ldr	sl, [r5, #12]
    a190:	mov	r4, #0
    a194:	cmp	sl, #0
    a198:	ldrne	r7, [r5, #16]
    a19c:	bne	a00c <__assert_fail@plt+0x15dc>
    a1a0:	cmp	r9, #0
    a1a4:	bne	a4b4 <__assert_fail@plt+0x1a84>
    a1a8:	ldr	r3, [r6]
    a1ac:	sub	r3, r3, #1
    a1b0:	cmp	r3, #1
    a1b4:	bls	a104 <__assert_fail@plt+0x16d4>
    a1b8:	mov	r0, r5
    a1bc:	bl	b248 <__assert_fail@plt+0x2818>
    a1c0:	cmp	r0, #0
    a1c4:	beq	a284 <__assert_fail@plt+0x1854>
    a1c8:	str	sl, [r5, #12]
    a1cc:	mov	r0, r5
    a1d0:	str	r7, [r5, #16]
    a1d4:	bl	a664 <__assert_fail@plt+0x1c34>
    a1d8:	b	a26c <__assert_fail@plt+0x183c>
    a1dc:	mov	r3, r5
    a1e0:	add	ip, sp, #36	; 0x24
    a1e4:	ldr	r0, [r3, #20]!
    a1e8:	ldr	r1, [r3, #4]
    a1ec:	ldr	r2, [r3, #8]
    a1f0:	ldr	r3, [r3, #12]
    a1f4:	stmia	ip!, {r0, r1, r2, r3}
    a1f8:	b	a028 <__assert_fail@plt+0x15f8>
    a1fc:	cmp	r3, #0
    a200:	cmpne	r3, #3
    a204:	movne	fp, #0
    a208:	moveq	fp, #1
    a20c:	beq	a480 <__assert_fail@plt+0x1a50>
    a210:	cmp	r3, #2
    a214:	beq	a34c <__assert_fail@plt+0x191c>
    a218:	ldr	ip, [r5, #4]
    a21c:	mov	r0, r5
    a220:	str	ip, [sp, #20]
    a224:	bl	a664 <__assert_fail@plt+0x1c34>
    a228:	mov	r1, r0
    a22c:	mov	r0, r5
    a230:	str	r1, [sp, #16]
    a234:	bl	a664 <__assert_fail@plt+0x1c34>
    a238:	ldr	ip, [sp, #20]
    a23c:	mov	r3, r9
    a240:	ldr	r1, [sp, #16]
    a244:	str	sl, [sp]
    a248:	stmib	sp, {r7, fp}
    a24c:	sub	r2, r0, #20
    a250:	mov	r0, ip
    a254:	bl	b5c8 <__assert_fail@plt+0x2b98>
    a258:	b	a0b8 <__assert_fail@plt+0x1688>
    a25c:	ldr	r0, [pc, #628]	; a4d8 <__assert_fail@plt+0x1aa8>
    a260:	add	r0, pc, r0
    a264:	bl	ba28 <__assert_fail@plt+0x2ff8>
    a268:	mov	r0, #0
    a26c:	ldr	r2, [sp, #52]	; 0x34
    a270:	ldr	r3, [r8]
    a274:	cmp	r2, r3
    a278:	bne	a4b0 <__assert_fail@plt+0x1a80>
    a27c:	add	sp, sp, #60	; 0x3c
    a280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a284:	add	r4, r4, r4, lsl #1
    a288:	mov	r0, r5
    a28c:	lsl	r4, r4, #4
    a290:	add	r9, r6, r4
    a294:	add	r4, r4, #24
    a298:	add	r1, r9, #4
    a29c:	add	r6, r6, r4
    a2a0:	bl	b1ec <__assert_fail@plt+0x27bc>
    a2a4:	mov	r0, r5
    a2a8:	bl	b214 <__assert_fail@plt+0x27e4>
    a2ac:	mov	r3, r5
    a2b0:	str	sl, [r9, #24]
    a2b4:	mov	ip, #1
    a2b8:	str	r7, [r9, #28]
    a2bc:	str	r0, [r9, #20]
    a2c0:	ldr	r4, [r3, #20]!
    a2c4:	ldr	lr, [r3, #4]
    a2c8:	ldr	r0, [r3, #8]
    a2cc:	ldr	r3, [r3, #12]
    a2d0:	str	r4, [r6, #8]
    a2d4:	str	lr, [r6, #12]
    a2d8:	str	r0, [r6, #16]
    a2dc:	str	r3, [r6, #20]
    a2e0:	ldrb	r3, [r5, #36]	; 0x24
    a2e4:	strb	ip, [r9, #49]	; 0x31
    a2e8:	strb	r3, [r9, #48]	; 0x30
    a2ec:	b	a1c8 <__assert_fail@plt+0x1798>
    a2f0:	mov	r1, #20
    a2f4:	add	r2, sp, #30
    a2f8:	mov	r0, r5
    a2fc:	bl	a680 <__assert_fail@plt+0x1c50>
    a300:	add	r2, sp, #32
    a304:	mov	r1, #6
    a308:	mov	r9, r0
    a30c:	mov	r0, r5
    a310:	bl	a680 <__assert_fail@plt+0x1c50>
    a314:	cmp	r0, #0
    a318:	cmpne	r9, #0
    a31c:	mov	r2, r0
    a320:	bne	a3ec <__assert_fail@plt+0x19bc>
    a324:	add	ip, sp, #36	; 0x24
    a328:	add	r9, r5, #20
    a32c:	mov	lr, #1
    a330:	ldm	ip!, {r0, r1, r2, r3}
    a334:	str	r0, [r5, #20]
    a338:	str	r1, [r9, #4]
    a33c:	str	r2, [r9, #8]
    a340:	str	r3, [r9, #12]
    a344:	strb	lr, [r5, #36]	; 0x24
    a348:	b	a1a8 <__assert_fail@plt+0x1778>
    a34c:	tst	r2, #4
    a350:	mov	r0, r5
    a354:	ldr	fp, [r5, #4]
    a358:	moveq	r2, #20
    a35c:	movne	r2, #12
    a360:	str	r2, [sp, #20]
    a364:	bl	a664 <__assert_fail@plt+0x1c34>
    a368:	mov	r1, r0
    a36c:	mov	r0, r5
    a370:	str	r1, [sp, #16]
    a374:	bl	a664 <__assert_fail@plt+0x1c34>
    a378:	ldr	r1, [sp, #16]
    a37c:	mov	ip, #1
    a380:	str	sl, [sp]
    a384:	str	r7, [sp, #4]
    a388:	ldr	r2, [sp, #20]
    a38c:	mov	r3, r9
    a390:	str	ip, [sp, #8]
    a394:	rsb	r2, r2, r0
    a398:	mov	r0, fp
    a39c:	bl	b5c8 <__assert_fail@plt+0x2b98>
    a3a0:	b	a0b8 <__assert_fail@plt+0x1688>
    a3a4:	tst	r2, #4
    a3a8:	mov	r0, r5
    a3ac:	ldr	fp, [r5, #4]
    a3b0:	movne	r2, #12
    a3b4:	moveq	r2, #20
    a3b8:	str	r2, [sp, #20]
    a3bc:	bl	a664 <__assert_fail@plt+0x1c34>
    a3c0:	mov	r1, r0
    a3c4:	mov	r0, r5
    a3c8:	str	r1, [sp, #16]
    a3cc:	bl	a664 <__assert_fail@plt+0x1c34>
    a3d0:	add	ip, sp, #36	; 0x24
    a3d4:	mov	r3, #16
    a3d8:	str	ip, [sp]
    a3dc:	mov	ip, #1
    a3e0:	ldr	r1, [sp, #16]
    a3e4:	str	r3, [sp, #4]
    a3e8:	b	a388 <__assert_fail@plt+0x1958>
    a3ec:	mov	r0, r9
    a3f0:	add	r9, sp, #36	; 0x24
    a3f4:	ldrh	r1, [sp, #30]
    a3f8:	ldrh	r3, [sp, #32]
    a3fc:	str	sl, [sp]
    a400:	str	r7, [sp, #4]
    a404:	str	r9, [sp, #8]
    a408:	bl	b6e8 <__assert_fail@plt+0x2cb8>
    a40c:	mov	ip, r9
    a410:	ldm	ip!, {r0, r1, r2, r3}
    a414:	add	lr, r5, #20
    a418:	mov	ip, #1
    a41c:	str	r0, [r5, #20]
    a420:	str	r1, [lr, #4]
    a424:	str	r2, [lr, #8]
    a428:	str	r3, [lr, #12]
    a42c:	strb	ip, [r5, #36]	; 0x24
    a430:	b	a028 <__assert_fail@plt+0x15f8>
    a434:	mov	r0, r5
    a438:	ldr	fp, [r5, #4]
    a43c:	bl	a664 <__assert_fail@plt+0x1c34>
    a440:	mov	r1, r0
    a444:	mov	r0, r5
    a448:	str	r1, [sp, #16]
    a44c:	bl	a664 <__assert_fail@plt+0x1c34>
    a450:	ldr	r1, [sp, #16]
    a454:	add	r2, sp, #36	; 0x24
    a458:	str	r2, [sp]
    a45c:	mov	r2, #1
    a460:	mov	r3, #16
    a464:	str	r3, [sp, #4]
    a468:	str	r2, [sp, #8]
    a46c:	mov	r3, r9
    a470:	sub	r2, r0, #20
    a474:	mov	r0, fp
    a478:	bl	b5c8 <__assert_fail@plt+0x2b98>
    a47c:	b	a0b8 <__assert_fail@plt+0x1688>
    a480:	mov	r0, r5
    a484:	ldr	fp, [r5, #4]
    a488:	bl	a664 <__assert_fail@plt+0x1c34>
    a48c:	mov	r1, r0
    a490:	mov	r0, r5
    a494:	str	r1, [sp, #16]
    a498:	bl	a664 <__assert_fail@plt+0x1c34>
    a49c:	ldr	r1, [sp, #16]
    a4a0:	mov	r2, #1
    a4a4:	str	sl, [sp]
    a4a8:	str	r7, [sp, #4]
    a4ac:	b	a468 <__assert_fail@plt+0x1a38>
    a4b0:	bl	8940 <__stack_chk_fail@plt>
    a4b4:	mov	sl, r9
    a4b8:	b	a00c <__assert_fail@plt+0x15dc>
    a4bc:	andeq	lr, r0, r8, asr r0
    a4c0:	andeq	r0, r0, r4, lsl #1
    a4c4:	andeq	r4, r0, ip, ror #25
    a4c8:	andeq	r4, r0, r8, lsl #26
    a4cc:			; <UNDEFINED> instruction: 0x00004abc
    a4d0:	andeq	r4, r0, r4, lsl #25
    a4d4:	andeq	r4, r0, r8, lsr #20
    a4d8:			; <UNDEFINED> instruction: 0x00004bb0
    a4dc:	ldr	ip, [pc, #248]	; a5dc <__assert_fail@plt+0x1bac>
    a4e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4e4:	add	ip, pc, ip
    a4e8:	ldr	lr, [pc, #240]	; a5e0 <__assert_fail@plt+0x1bb0>
    a4ec:	sub	sp, sp, #532	; 0x214
    a4f0:	add	r7, sp, #12
    a4f4:	mov	r6, r1
    a4f8:	ldr	r4, [sp, #568]	; 0x238
    a4fc:	mov	sl, r2
    a500:	ldr	r5, [ip, lr]
    a504:	mov	r9, r3
    a508:	mov	r2, r7
    a50c:	mov	r3, #256	; 0x100
    a510:	mov	r1, r4
    a514:	mov	r8, r0
    a518:	ldr	ip, [r5]
    a51c:	str	ip, [sp, #524]	; 0x20c
    a520:	bl	9024 <__assert_fail@plt+0x5f4>
    a524:	mov	ip, #420	; 0x1a4
    a528:	str	r4, [sp]
    a52c:	mov	r2, sl
    a530:	mov	r3, r9
    a534:	mov	r1, r6
    a538:	str	ip, [sp, #4]
    a53c:	mov	fp, r0
    a540:	mov	r0, r8
    a544:	bl	9e60 <__assert_fail@plt+0x1430>
    a548:	cmp	r0, #0
    a54c:	bne	a56c <__assert_fail@plt+0x1b3c>
    a550:	mov	r0, #0
    a554:	ldr	r2, [sp, #524]	; 0x20c
    a558:	ldr	r3, [r5]
    a55c:	cmp	r2, r3
    a560:	bne	a5d8 <__assert_fail@plt+0x1ba8>
    a564:	add	sp, sp, #532	; 0x214
    a568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a56c:	mov	r0, r4
    a570:	bl	b444 <__assert_fail@plt+0x2a14>
    a574:	cmp	r0, #0
    a578:	bne	a5a4 <__assert_fail@plt+0x1b74>
    a57c:	tst	fp, #1
    a580:	beq	a5a4 <__assert_fail@plt+0x1b74>
    a584:	add	r1, sp, #528	; 0x210
    a588:	movw	r3, #65020	; 0xfdfc
    a58c:	movt	r3, #65535	; 0xffff
    a590:	ldrh	r2, [r1, r3]
    a594:	add	r3, r1, fp, lsl #1
    a598:	sub	r3, r3, #516	; 0x204
    a59c:	add	fp, fp, #1
    a5a0:	strh	r2, [r3]
    a5a4:	mov	r2, r7
    a5a8:	lsl	r3, fp, #1
    a5ac:	mov	r0, r6
    a5b0:	mov	r1, #10
    a5b4:	bl	ad80 <__assert_fail@plt+0x2350>
    a5b8:	cmp	r0, #0
    a5bc:	bne	a550 <__assert_fail@plt+0x1b20>
    a5c0:	mov	r0, r8
    a5c4:	mov	r1, r6
    a5c8:	ldr	r2, [r4, #12]
    a5cc:	ldr	r3, [r4, #16]
    a5d0:	bl	9f90 <__assert_fail@plt+0x1560>
    a5d4:	b	a554 <__assert_fail@plt+0x1b24>
    a5d8:	bl	8940 <__stack_chk_fail@plt>
    a5dc:	andeq	sp, r0, r4, lsl fp
    a5e0:	andeq	r0, r0, r4, lsl #1
    a5e4:	movw	r3, #9612	; 0x258c
    a5e8:	str	r1, [r0, r3]
    a5ec:	bx	lr
    a5f0:	push	{r4, r5, r6, lr}
    a5f4:	mov	r5, r3
    a5f8:	ldr	r3, [r0, #8]
    a5fc:	mov	r4, r0
    a600:	cmp	r3, #19
    a604:	bhi	a610 <__assert_fail@plt+0x1be0>
    a608:	mov	r0, #0
    a60c:	pop	{r4, r5, r6, pc}
    a610:	ldr	ip, [r0, #4]
    a614:	mov	r3, #0
    a618:	mov	r0, ip
    a61c:	strb	r3, [r0], #1
    a620:	add	r0, r0, #1
    a624:	strb	r3, [ip, #1]
    a628:	strb	r3, [r0], #1
    a62c:	strb	r3, [r0]
    a630:	ldr	r0, [r4, #4]
    a634:	bl	b8f4 <__assert_fail@plt+0x2ec4>
    a638:	ldr	r2, [r4, #4]
    a63c:	ldr	r6, [r5]
    a640:	mov	r0, #1
    a644:	ldr	r4, [r5, #4]
    a648:	ldr	ip, [r5, #8]
    a64c:	ldr	r1, [r5, #12]
    a650:	str	r6, [r2, #4]
    a654:	str	r4, [r2, #8]
    a658:	str	ip, [r2, #12]
    a65c:	str	r1, [r2, #16]
    a660:	pop	{r4, r5, r6, pc}
    a664:	push	{r3, lr}
    a668:	ldr	r0, [r0, #4]
    a66c:	add	r0, r0, #2
    a670:	bl	b8cc <__assert_fail@plt+0x2e9c>
    a674:	add	r0, r0, #20
    a678:	uxth	r0, r0
    a67c:	pop	{r3, pc}
    a680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a684:	sub	sp, sp, #12
    a688:	mov	r5, r0
    a68c:	mov	r6, r1
    a690:	str	r2, [sp, #4]
    a694:	bl	a664 <__assert_fail@plt+0x1c34>
    a698:	ldr	r3, [r5]
    a69c:	cmp	r3, #0
    a6a0:	mov	r8, r0
    a6a4:	beq	a6b4 <__assert_fail@plt+0x1c84>
    a6a8:	ldr	r3, [r3]
    a6ac:	cmp	r3, #3
    a6b0:	beq	a750 <__assert_fail@plt+0x1d20>
    a6b4:	cmp	r8, #20
    a6b8:	movhi	r4, #20
    a6bc:	movwhi	r9, #32808	; 0x8028
    a6c0:	movwhi	sl, #9608	; 0x2588
    a6c4:	bls	a708 <__assert_fail@plt+0x1cd8>
    a6c8:	ldr	r0, [r5, #4]
    a6cc:	add	r7, r4, #4
    a6d0:	add	r0, r0, r4
    a6d4:	add	r4, r4, #2
    a6d8:	bl	b8cc <__assert_fail@plt+0x2e9c>
    a6dc:	mov	fp, r0
    a6e0:	ldr	r0, [r5, #4]
    a6e4:	add	r0, r0, r4
    a6e8:	bl	b8cc <__assert_fail@plt+0x2e9c>
    a6ec:	cmp	fp, r6
    a6f0:	mov	r4, r0
    a6f4:	beq	a768 <__assert_fail@plt+0x1d38>
    a6f8:	cmp	fp, #8
    a6fc:	beq	a714 <__assert_fail@plt+0x1ce4>
    a700:	cmp	fp, r9
    a704:	bne	a71c <__assert_fail@plt+0x1cec>
    a708:	mov	r0, #0
    a70c:	add	sp, sp, #12
    a710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a714:	cmp	r6, r9
    a718:	bne	a708 <__assert_fail@plt+0x1cd8>
    a71c:	ldr	r3, [r5]
    a720:	mov	r0, r4
    a724:	cmp	r3, #0
    a728:	beq	a738 <__assert_fail@plt+0x1d08>
    a72c:	ldr	r3, [r3, sl]
    a730:	tst	r3, #128	; 0x80
    a734:	bne	a740 <__assert_fail@plt+0x1d10>
    a738:	bl	b8c0 <__assert_fail@plt+0x2e90>
    a73c:	mov	r4, r0
    a740:	add	r4, r4, r7
    a744:	cmp	r8, r4
    a748:	bhi	a6c8 <__assert_fail@plt+0x1c98>
    a74c:	b	a708 <__assert_fail@plt+0x1cd8>
    a750:	cmp	r6, #20
    a754:	moveq	r6, #21
    a758:	beq	a6b4 <__assert_fail@plt+0x1c84>
    a75c:	cmp	r6, #21
    a760:	moveq	r6, #20
    a764:	b	a6b4 <__assert_fail@plt+0x1c84>
    a768:	ldr	r3, [sp, #4]
    a76c:	strh	r0, [r3]
    a770:	ldr	r0, [r5, #4]
    a774:	add	r0, r0, r7
    a778:	b	a70c <__assert_fail@plt+0x1cdc>
    a77c:	ldr	r3, [pc, #100]	; a7e8 <__assert_fail@plt+0x1db8>
    a780:	mov	ip, #0
    a784:	push	{r4, lr}
    a788:	add	r3, pc, r3
    a78c:	ldr	lr, [pc, #88]	; a7ec <__assert_fail@plt+0x1dbc>
    a790:	sub	sp, sp, #8
    a794:	add	r2, sp, #8
    a798:	ldr	r4, [r3, lr]
    a79c:	strh	ip, [r2, #-6]!
    a7a0:	ldr	r3, [r4]
    a7a4:	str	r3, [sp, #4]
    a7a8:	bl	a680 <__assert_fail@plt+0x1c50>
    a7ac:	cmp	r0, #0
    a7b0:	beq	a7dc <__assert_fail@plt+0x1dac>
    a7b4:	ldrh	r0, [sp, #2]
    a7b8:	cmp	r0, #0
    a7bc:	movne	r0, #2
    a7c0:	moveq	r0, #0
    a7c4:	ldr	r2, [sp, #4]
    a7c8:	ldr	r3, [r4]
    a7cc:	cmp	r2, r3
    a7d0:	bne	a7e4 <__assert_fail@plt+0x1db4>
    a7d4:	add	sp, sp, #8
    a7d8:	pop	{r4, pc}
    a7dc:	mov	r0, #1
    a7e0:	b	a7c4 <__assert_fail@plt+0x1d94>
    a7e4:	bl	8940 <__stack_chk_fail@plt>
    a7e8:	andeq	sp, r0, r0, ror r8
    a7ec:	andeq	r0, r0, r4, lsl #1
    a7f0:	ldr	ip, [pc, #136]	; a880 <__assert_fail@plt+0x1e50>
    a7f4:	push	{r4, r5, r6, lr}
    a7f8:	add	ip, pc, ip
    a7fc:	ldr	lr, [pc, #128]	; a884 <__assert_fail@plt+0x1e54>
    a800:	sub	sp, sp, #16
    a804:	add	r3, sp, #16
    a808:	mov	r6, r2
    a80c:	mov	r5, #0
    a810:	ldr	r4, [ip, lr]
    a814:	strh	r5, [r3, #-10]!
    a818:	mov	r2, r3
    a81c:	ldr	r3, [r4]
    a820:	str	r3, [sp, #12]
    a824:	bl	a680 <__assert_fail@plt+0x1c50>
    a828:	cmp	r0, #0
    a82c:	beq	a85c <__assert_fail@plt+0x1e2c>
    a830:	ldrh	r3, [sp, #6]
    a834:	cmp	r3, #4
    a838:	movne	r5, #2
    a83c:	beq	a864 <__assert_fail@plt+0x1e34>
    a840:	ldr	r2, [sp, #12]
    a844:	mov	r0, r5
    a848:	ldr	r3, [r4]
    a84c:	cmp	r2, r3
    a850:	bne	a87c <__assert_fail@plt+0x1e4c>
    a854:	add	sp, sp, #16
    a858:	pop	{r4, r5, r6, pc}
    a85c:	mov	r5, #1
    a860:	b	a840 <__assert_fail@plt+0x1e10>
    a864:	ldr	r0, [r0]
    a868:	str	r0, [sp, #8]
    a86c:	ldr	r3, [sp, #8]
    a870:	rev	r3, r3
    a874:	str	r3, [r6]
    a878:	b	a840 <__assert_fail@plt+0x1e10>
    a87c:	bl	8940 <__stack_chk_fail@plt>
    a880:	andeq	sp, r0, r0, lsl #16
    a884:	andeq	r0, r0, r4, lsl #1
    a888:	ldr	ip, [pc, #156]	; a92c <__assert_fail@plt+0x1efc>
    a88c:	push	{r4, r5, r6, r7, r8, lr}
    a890:	add	ip, pc, ip
    a894:	ldr	lr, [pc, #148]	; a930 <__assert_fail@plt+0x1f00>
    a898:	sub	sp, sp, #16
    a89c:	add	r3, sp, #16
    a8a0:	mov	r7, r2
    a8a4:	mov	r8, #0
    a8a8:	ldr	r6, [ip, lr]
    a8ac:	strh	r8, [r3, #-14]!
    a8b0:	mov	r2, r3
    a8b4:	ldr	r3, [r6]
    a8b8:	str	r3, [sp, #12]
    a8bc:	bl	a680 <__assert_fail@plt+0x1c50>
    a8c0:	subs	r2, r0, #0
    a8c4:	beq	a8f4 <__assert_fail@plt+0x1ec4>
    a8c8:	ldrh	r3, [sp, #2]
    a8cc:	cmp	r3, #8
    a8d0:	movne	r3, #2
    a8d4:	beq	a8fc <__assert_fail@plt+0x1ecc>
    a8d8:	ldr	r2, [sp, #12]
    a8dc:	mov	r0, r3
    a8e0:	ldr	r3, [r6]
    a8e4:	cmp	r2, r3
    a8e8:	bne	a928 <__assert_fail@plt+0x1ef8>
    a8ec:	add	sp, sp, #16
    a8f0:	pop	{r4, r5, r6, r7, r8, pc}
    a8f4:	mov	r3, #1
    a8f8:	b	a8d8 <__assert_fail@plt+0x1ea8>
    a8fc:	ldr	r0, [r2]
    a900:	add	ip, sp, #4
    a904:	ldr	r1, [r2, #4]
    a908:	mov	r3, r8
    a90c:	rev	r5, r0
    a910:	stmia	ip!, {r0, r1}
    a914:	ldr	r2, [sp, #8]
    a918:	rev	r2, r2
    a91c:	orr	r4, r8, r2
    a920:	strd	r4, [r7]
    a924:	b	a8d8 <__assert_fail@plt+0x1ea8>
    a928:	bl	8940 <__stack_chk_fail@plt>
    a92c:	andeq	sp, r0, r8, ror #14
    a930:	andeq	r0, r0, r4, lsl #1
    a934:	push	{r4, r5, r6, r7, r8, lr}
    a938:	sub	sp, sp, #8
    a93c:	ldr	lr, [pc, #128]	; a9c4 <__assert_fail@plt+0x1f94>
    a940:	add	ip, sp, #8
    a944:	ldr	r4, [pc, #124]	; a9c8 <__assert_fail@plt+0x1f98>
    a948:	mov	r8, r3
    a94c:	add	lr, pc, lr
    a950:	mov	r7, r2
    a954:	mov	r5, #0
    a958:	ldr	r4, [lr, r4]
    a95c:	strh	r5, [ip, #-6]!
    a960:	mov	r2, ip
    a964:	ldr	r3, [r4]
    a968:	str	r3, [sp, #4]
    a96c:	bl	a680 <__assert_fail@plt+0x1c50>
    a970:	subs	r1, r0, #0
    a974:	beq	a9b8 <__assert_fail@plt+0x1f88>
    a978:	ldrh	r6, [sp, #2]
    a97c:	cmp	r6, r8
    a980:	movcs	r0, #3
    a984:	bcc	a9a0 <__assert_fail@plt+0x1f70>
    a988:	ldr	r2, [sp, #4]
    a98c:	ldr	r3, [r4]
    a990:	cmp	r2, r3
    a994:	bne	a9c0 <__assert_fail@plt+0x1f90>
    a998:	add	sp, sp, #8
    a99c:	pop	{r4, r5, r6, r7, r8, pc}
    a9a0:	mov	r0, r7
    a9a4:	mov	r2, r6
    a9a8:	bl	8904 <memcpy@plt>
    a9ac:	strb	r5, [r7, r6]
    a9b0:	mov	r0, r5
    a9b4:	b	a988 <__assert_fail@plt+0x1f58>
    a9b8:	mov	r0, #1
    a9bc:	b	a988 <__assert_fail@plt+0x1f58>
    a9c0:	bl	8940 <__stack_chk_fail@plt>
    a9c4:	andeq	sp, r0, ip, lsr #13
    a9c8:	andeq	r0, r0, r4, lsl #1
    a9cc:	push	{r4, r5, r6, r7, r8, lr}
    a9d0:	sub	sp, sp, #8
    a9d4:	ldr	lr, [pc, #336]	; ab2c <__assert_fail@plt+0x20fc>
    a9d8:	add	ip, sp, #8
    a9dc:	ldr	r4, [pc, #332]	; ab30 <__assert_fail@plt+0x2100>
    a9e0:	mov	r6, r3
    a9e4:	add	lr, pc, lr
    a9e8:	mov	r7, r2
    a9ec:	mov	r5, #0
    a9f0:	ldr	r4, [lr, r4]
    a9f4:	strh	r5, [ip, #-6]!
    a9f8:	mov	r2, ip
    a9fc:	ldr	r3, [r4]
    aa00:	str	r3, [sp, #4]
    aa04:	bl	a680 <__assert_fail@plt+0x1c50>
    aa08:	subs	r8, r0, #0
    aa0c:	beq	aa84 <__assert_fail@plt+0x2054>
    aa10:	ldrh	r3, [sp, #2]
    aa14:	cmp	r3, #3
    aa18:	movls	r0, #2
    aa1c:	bhi	aa38 <__assert_fail@plt+0x2008>
    aa20:	ldr	r2, [sp, #4]
    aa24:	ldr	r3, [r4]
    aa28:	cmp	r2, r3
    aa2c:	bne	ab28 <__assert_fail@plt+0x20f8>
    aa30:	add	sp, sp, #8
    aa34:	pop	{r4, r5, r6, r7, r8, pc}
    aa38:	ldrb	r2, [r8, #1]
    aa3c:	cmp	r2, #1
    aa40:	beq	aa68 <__assert_fail@plt+0x2038>
    aa44:	cmp	r2, #2
    aa48:	bne	aa8c <__assert_fail@plt+0x205c>
    aa4c:	ldr	r2, [r6]
    aa50:	cmp	r2, #27
    aa54:	bhi	aa94 <__assert_fail@plt+0x2064>
    aa58:	mov	r3, #28
    aa5c:	mov	r0, #2
    aa60:	str	r3, [r6]
    aa64:	b	aa20 <__assert_fail@plt+0x1ff0>
    aa68:	ldr	r2, [r6]
    aa6c:	cmp	r2, #15
    aa70:	bhi	aaec <__assert_fail@plt+0x20bc>
    aa74:	mov	r3, #16
    aa78:	mov	r0, #2
    aa7c:	str	r3, [r6]
    aa80:	b	aa20 <__assert_fail@plt+0x1ff0>
    aa84:	mov	r0, #1
    aa88:	b	aa20 <__assert_fail@plt+0x1ff0>
    aa8c:	mov	r0, #4
    aa90:	b	aa20 <__assert_fail@plt+0x1ff0>
    aa94:	cmp	r3, #20
    aa98:	bne	aa58 <__assert_fail@plt+0x2028>
    aa9c:	mov	r1, r5
    aaa0:	mov	r0, r7
    aaa4:	bl	89d0 <memset@plt>
    aaa8:	mov	r3, #28
    aaac:	mov	r2, #10
    aab0:	strh	r2, [r7]
    aab4:	str	r3, [r6]
    aab8:	mov	r3, r8
    aabc:	ldrh	r1, [r8, #2]
    aac0:	mov	r0, r5
    aac4:	strh	r1, [r7, #2]
    aac8:	ldr	r5, [r3, #4]!
    aacc:	ldr	ip, [r3, #4]
    aad0:	ldr	r1, [r3, #8]
    aad4:	ldr	r3, [r3, #12]
    aad8:	str	r5, [r7, #8]
    aadc:	str	ip, [r7, #12]
    aae0:	str	r1, [r7, #16]
    aae4:	str	r3, [r7, #20]
    aae8:	b	aa20 <__assert_fail@plt+0x1ff0>
    aaec:	cmp	r3, #8
    aaf0:	bne	aa74 <__assert_fail@plt+0x2044>
    aaf4:	mov	r0, r7
    aaf8:	mov	r1, r5
    aafc:	bl	89d0 <memset@plt>
    ab00:	mov	r3, #16
    ab04:	mov	r2, #2
    ab08:	strh	r2, [r7]
    ab0c:	str	r3, [r6]
    ab10:	mov	r0, r5
    ab14:	ldrh	r3, [r8, #2]
    ab18:	strh	r3, [r7, #2]
    ab1c:	ldr	r3, [r8, #4]
    ab20:	str	r3, [r7, #4]
    ab24:	b	aa20 <__assert_fail@plt+0x1ff0>
    ab28:	bl	8940 <__stack_chk_fail@plt>
    ab2c:	andeq	sp, r0, r4, lsl r6
    ab30:	andeq	r0, r0, r4, lsl #1
    ab34:	push	{r4, r5, r6, lr}
    ab38:	mov	r6, r0
    ab3c:	mov	r5, r2
    ab40:	mov	r4, r3
    ab44:	bl	a9cc <__assert_fail@plt+0x1f9c>
    ab48:	cmp	r0, #0
    ab4c:	popne	{r4, r5, r6, pc}
    ab50:	mov	r0, r6
    ab54:	mov	r1, r5
    ab58:	ldr	r2, [r4]
    ab5c:	movw	r3, #42050	; 0xa442
    ab60:	pop	{r4, r5, r6, lr}
    ab64:	movt	r3, #8466	; 0x2112
    ab68:	b	b934 <__assert_fail@plt+0x2f04>
    ab6c:	push	{r4, r5, r6, r7, r8, lr}
    ab70:	mov	r7, r0
    ab74:	mov	r6, r2
    ab78:	mov	r5, r3
    ab7c:	ldr	r4, [sp, #24]
    ab80:	bl	a9cc <__assert_fail@plt+0x1f9c>
    ab84:	cmp	r0, #0
    ab88:	popne	{r4, r5, r6, r7, r8, pc}
    ab8c:	mov	r0, r7
    ab90:	mov	r1, r6
    ab94:	ldr	r2, [r5]
    ab98:	mov	r3, r4
    ab9c:	pop	{r4, r5, r6, r7, r8, lr}
    aba0:	b	b934 <__assert_fail@plt+0x2f04>
    aba4:	ldr	r3, [pc, #160]	; ac4c <__assert_fail@plt+0x221c>
    aba8:	ldr	ip, [pc, #160]	; ac50 <__assert_fail@plt+0x2220>
    abac:	add	r3, pc, r3
    abb0:	push	{r4, r5, r6, lr}
    abb4:	sub	sp, sp, #8
    abb8:	ldr	r4, [r3, ip]
    abbc:	add	r2, sp, #8
    abc0:	mov	r6, r1
    abc4:	mov	r5, #0
    abc8:	mov	r1, #9
    abcc:	strh	r5, [r2, #-6]!
    abd0:	ldr	r3, [r4]
    abd4:	str	r3, [sp, #4]
    abd8:	bl	a680 <__assert_fail@plt+0x1c50>
    abdc:	cmp	r0, #0
    abe0:	beq	ac40 <__assert_fail@plt+0x2210>
    abe4:	ldrh	r3, [sp, #2]
    abe8:	cmp	r3, #3
    abec:	bhi	ac0c <__assert_fail@plt+0x21dc>
    abf0:	mov	r0, #2
    abf4:	ldr	r2, [sp, #4]
    abf8:	ldr	r3, [r4]
    abfc:	cmp	r2, r3
    ac00:	bne	ac48 <__assert_fail@plt+0x2218>
    ac04:	add	sp, sp, #8
    ac08:	pop	{r4, r5, r6, pc}
    ac0c:	ldrb	r3, [r0, #2]
    ac10:	ldrb	r1, [r0, #3]
    ac14:	and	r3, r3, #7
    ac18:	sub	r2, r3, #3
    ac1c:	cmp	r2, #3
    ac20:	bhi	abf0 <__assert_fail@plt+0x21c0>
    ac24:	cmp	r1, #99	; 0x63
    ac28:	bhi	abf0 <__assert_fail@plt+0x21c0>
    ac2c:	mov	r2, #100	; 0x64
    ac30:	mov	r0, r5
    ac34:	smlabb	r3, r2, r3, r1
    ac38:	str	r3, [r6]
    ac3c:	b	abf4 <__assert_fail@plt+0x21c4>
    ac40:	mov	r0, #1
    ac44:	b	abf4 <__assert_fail@plt+0x21c4>
    ac48:	bl	8940 <__stack_chk_fail@plt>
    ac4c:	andeq	sp, r0, ip, asr #8
    ac50:	andeq	r0, r0, r4, lsl #1
    ac54:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    ac58:	mov	r4, r0
    ac5c:	mov	r7, r1
    ac60:	mov	r6, r2
    ac64:	bl	a664 <__assert_fail@plt+0x1c34>
    ac68:	ldr	r3, [r4]
    ac6c:	cmp	r3, #0
    ac70:	mov	r5, r0
    ac74:	beq	ac84 <__assert_fail@plt+0x2254>
    ac78:	ldr	r3, [r3]
    ac7c:	cmp	r3, #3
    ac80:	beq	ad38 <__assert_fail@plt+0x2308>
    ac84:	add	r2, r6, #4
    ac88:	ldr	r3, [r4, #8]
    ac8c:	add	r2, r2, r5
    ac90:	cmp	r2, r3
    ac94:	bhi	ad50 <__assert_fail@plt+0x2320>
    ac98:	ldr	r0, [r4, #4]
    ac9c:	uxth	r1, r7
    aca0:	add	r0, r0, r5
    aca4:	bl	b8dc <__assert_fail@plt+0x2eac>
    aca8:	ldr	r3, [r4]
    acac:	cmp	r3, #0
    acb0:	mov	r7, r0
    acb4:	beq	acc8 <__assert_fail@plt+0x2298>
    acb8:	movw	r2, #9608	; 0x2588
    acbc:	ldr	r3, [r3, r2]
    acc0:	tst	r3, #128	; 0x80
    acc4:	bne	ad58 <__assert_fail@plt+0x2328>
    acc8:	mov	r0, r4
    accc:	bl	b444 <__assert_fail@plt+0x2a14>
    acd0:	cmp	r0, #0
    acd4:	beq	ad6c <__assert_fail@plt+0x233c>
    acd8:	uxth	r1, r6
    acdc:	mov	r8, r1
    ace0:	mov	r0, r7
    ace4:	bl	b8dc <__assert_fail@plt+0x2eac>
    ace8:	mov	r7, r0
    acec:	mov	r0, r6
    acf0:	bl	b8b4 <__assert_fail@plt+0x2e84>
    acf4:	add	r9, r7, r6
    acf8:	mov	r1, #32
    acfc:	mov	r2, r0
    ad00:	mov	r0, r9
    ad04:	bl	89d0 <memset@plt>
    ad08:	mov	r0, r6
    ad0c:	bl	b8b4 <__assert_fail@plt+0x2e84>
    ad10:	add	r0, r5, r0
    ad14:	uxth	r5, r0
    ad18:	add	r5, r5, r8
    ad1c:	ldr	r0, [r4, #4]
    ad20:	sub	r1, r5, #16
    ad24:	add	r0, r0, #2
    ad28:	uxth	r1, r1
    ad2c:	bl	b8dc <__assert_fail@plt+0x2eac>
    ad30:	mov	r0, r7
    ad34:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    ad38:	cmp	r7, #21
    ad3c:	moveq	r7, #20
    ad40:	beq	ac84 <__assert_fail@plt+0x2254>
    ad44:	cmp	r7, #20
    ad48:	moveq	r7, #21
    ad4c:	b	ac84 <__assert_fail@plt+0x2254>
    ad50:	mov	r0, #0
    ad54:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    ad58:	uxth	r8, r6
    ad5c:	mov	r1, r8
    ad60:	bl	b8dc <__assert_fail@plt+0x2eac>
    ad64:	mov	r7, r0
    ad68:	b	ad18 <__assert_fail@plt+0x22e8>
    ad6c:	mov	r0, r6
    ad70:	uxth	r8, r6
    ad74:	bl	b8c0 <__assert_fail@plt+0x2e90>
    ad78:	uxth	r1, r0
    ad7c:	b	ace0 <__assert_fail@plt+0x22b0>
    ad80:	push	{r3, r4, r5, lr}
    ad84:	mov	r5, r2
    ad88:	mov	r2, r3
    ad8c:	mov	r4, r3
    ad90:	bl	ac54 <__assert_fail@plt+0x2224>
    ad94:	cmp	r0, #0
    ad98:	beq	adb0 <__assert_fail@plt+0x2380>
    ad9c:	mov	r1, r5
    ada0:	mov	r2, r4
    ada4:	bl	8904 <memcpy@plt>
    ada8:	mov	r0, #0
    adac:	pop	{r3, r4, r5, pc}
    adb0:	mov	r0, #3
    adb4:	pop	{r3, r4, r5, pc}
    adb8:	mov	r2, #0
    adbc:	mov	r3, r2
    adc0:	b	ad80 <__assert_fail@plt+0x2350>
    adc4:	push	{lr}		; (str lr, [sp, #-4]!)
    adc8:	sub	sp, sp, #12
    adcc:	add	ip, sp, #8
    add0:	rev	r2, r2
    add4:	mov	r3, #4
    add8:	str	r2, [ip, #-4]!
    addc:	mov	r2, ip
    ade0:	bl	ad80 <__assert_fail@plt+0x2350>
    ade4:	add	sp, sp, #12
    ade8:	pop	{pc}		; (ldr pc, [sp], #4)
    adec:	ldr	ip, [pc, #76]	; ae40 <__assert_fail@plt+0x2410>
    adf0:	push	{r4, r5, lr}
    adf4:	add	ip, pc, ip
    adf8:	ldr	r4, [pc, #68]	; ae44 <__assert_fail@plt+0x2414>
    adfc:	sub	sp, sp, #20
    ae00:	rev	lr, r2
    ae04:	rev	r5, r3
    ae08:	add	r2, sp, #4
    ae0c:	mov	r3, #8
    ae10:	ldr	r4, [ip, r4]
    ae14:	stmib	sp, {r5, lr}
    ae18:	ldr	ip, [r4]
    ae1c:	str	ip, [sp, #12]
    ae20:	bl	ad80 <__assert_fail@plt+0x2350>
    ae24:	ldr	r2, [sp, #12]
    ae28:	ldr	r3, [r4]
    ae2c:	cmp	r2, r3
    ae30:	bne	ae3c <__assert_fail@plt+0x240c>
    ae34:	add	sp, sp, #20
    ae38:	pop	{r4, r5, pc}
    ae3c:	bl	8940 <__stack_chk_fail@plt>
    ae40:	andeq	sp, r0, r4, lsl #4
    ae44:	andeq	r0, r0, r4, lsl #1
    ae48:	push	{r4, r5, r6, lr}
    ae4c:	mov	r5, r0
    ae50:	mov	r0, r2
    ae54:	mov	r4, r2
    ae58:	mov	r6, r1
    ae5c:	bl	89ac <strlen@plt>
    ae60:	mov	r1, r6
    ae64:	mov	r2, r4
    ae68:	mov	r3, r0
    ae6c:	mov	r0, r5
    ae70:	pop	{r4, r5, r6, lr}
    ae74:	b	ad80 <__assert_fail@plt+0x2350>
    ae78:	ldr	ip, [pc, #212]	; af54 <__assert_fail@plt+0x2524>
    ae7c:	cmp	r3, #15
    ae80:	push	{r4, r5, r6, r7, lr}
    ae84:	add	ip, pc, ip
    ae88:	ldr	r4, [pc, #200]	; af58 <__assert_fail@plt+0x2528>
    ae8c:	sub	sp, sp, #12
    ae90:	ldr	r4, [ip, r4]
    ae94:	ldr	ip, [r4]
    ae98:	str	ip, [sp, #4]
    ae9c:	bhi	aebc <__assert_fail@plt+0x248c>
    aea0:	mov	r0, #2
    aea4:	ldr	r2, [sp, #4]
    aea8:	ldr	r3, [r4]
    aeac:	cmp	r2, r3
    aeb0:	bne	af50 <__assert_fail@plt+0x2520>
    aeb4:	add	sp, sp, #12
    aeb8:	pop	{r4, r5, r6, r7, pc}
    aebc:	ldrh	ip, [r2]
    aec0:	cmp	ip, #2
    aec4:	beq	aefc <__assert_fail@plt+0x24cc>
    aec8:	cmp	ip, #10
    aecc:	bne	aef4 <__assert_fail@plt+0x24c4>
    aed0:	cmp	r3, #27
    aed4:	bls	aea0 <__assert_fail@plt+0x2470>
    aed8:	ldrh	r3, [r2, #2]
    aedc:	add	r7, r2, #8
    aee0:	mov	r6, #2
    aee4:	mov	r2, #20
    aee8:	mov	r5, #16
    aeec:	strh	r3, [sp, #2]
    aef0:	b	af14 <__assert_fail@plt+0x24e4>
    aef4:	mov	r0, #4
    aef8:	b	aea4 <__assert_fail@plt+0x2474>
    aefc:	ldrh	r3, [r2, #2]
    af00:	add	r7, r2, #4
    af04:	mov	r6, #1
    af08:	mov	r2, #8
    af0c:	mov	r5, #4
    af10:	strh	r3, [sp, #2]
    af14:	bl	ac54 <__assert_fail@plt+0x2224>
    af18:	subs	r3, r0, #0
    af1c:	moveq	r0, #3
    af20:	beq	aea4 <__assert_fail@plt+0x2474>
    af24:	ldrh	ip, [sp, #2]
    af28:	mov	r2, r5
    af2c:	mov	r1, r7
    af30:	mov	r5, #0
    af34:	strb	r6, [r3, #1]
    af38:	add	r0, r3, #4
    af3c:	strh	ip, [r3, #2]
    af40:	strb	r5, [r3]
    af44:	bl	8904 <memcpy@plt>
    af48:	mov	r0, r5
    af4c:	b	aea4 <__assert_fail@plt+0x2474>
    af50:	bl	8940 <__stack_chk_fail@plt>
    af54:	andeq	sp, r0, r4, ror r1
    af58:	andeq	r0, r0, r4, lsl #1
    af5c:	ldr	ip, [pc, #148]	; aff8 <__assert_fail@plt+0x25c8>
    af60:	push	{r4, r5, r6, r7, r8, lr}
    af64:	cmp	r3, #128	; 0x80
    af68:	movcc	r4, r3
    af6c:	movcs	r4, #128	; 0x80
    af70:	ldr	r3, [pc, #132]	; affc <__assert_fail@plt+0x25cc>
    af74:	add	ip, pc, ip
    af78:	sub	sp, sp, #136	; 0x88
    af7c:	mov	r7, r0
    af80:	add	r5, sp, #4
    af84:	mov	r8, r1
    af88:	ldr	r6, [ip, r3]
    af8c:	mov	r1, r2
    af90:	mov	r3, #128	; 0x80
    af94:	mov	r2, r4
    af98:	mov	r0, r5
    af9c:	ldr	ip, [r6]
    afa0:	str	ip, [sp, #132]	; 0x84
    afa4:	bl	8958 <__memcpy_chk@plt>
    afa8:	mov	r0, r7
    afac:	mov	r1, r5
    afb0:	mov	r2, r4
    afb4:	movw	r3, #42050	; 0xa442
    afb8:	movt	r3, #8466	; 0x2112
    afbc:	bl	b934 <__assert_fail@plt+0x2f04>
    afc0:	cmp	r0, #0
    afc4:	bne	afdc <__assert_fail@plt+0x25ac>
    afc8:	mov	r0, r7
    afcc:	mov	r1, r8
    afd0:	mov	r2, r5
    afd4:	mov	r3, r4
    afd8:	bl	ae78 <__assert_fail@plt+0x2448>
    afdc:	ldr	r2, [sp, #132]	; 0x84
    afe0:	ldr	r3, [r6]
    afe4:	cmp	r2, r3
    afe8:	bne	aff4 <__assert_fail@plt+0x25c4>
    afec:	add	sp, sp, #136	; 0x88
    aff0:	pop	{r4, r5, r6, r7, r8, pc}
    aff4:	bl	8940 <__stack_chk_fail@plt>
    aff8:	andeq	sp, r0, r4, lsl #1
    affc:	andeq	r0, r0, r4, lsl #1
    b000:	ldr	ip, [pc, #148]	; b09c <__assert_fail@plt+0x266c>
    b004:	push	{r4, r5, r6, r7, r8, r9, lr}
    b008:	cmp	r3, #128	; 0x80
    b00c:	movcc	r4, r3
    b010:	movcs	r4, #128	; 0x80
    b014:	ldr	r3, [pc, #132]	; b0a0 <__assert_fail@plt+0x2670>
    b018:	add	ip, pc, ip
    b01c:	sub	sp, sp, #140	; 0x8c
    b020:	mov	r7, r0
    b024:	add	r5, sp, #4
    b028:	mov	r9, r1
    b02c:	ldr	r6, [ip, r3]
    b030:	mov	r1, r2
    b034:	ldr	r8, [sp, #168]	; 0xa8
    b038:	mov	r2, r4
    b03c:	mov	r3, #128	; 0x80
    b040:	mov	r0, r5
    b044:	ldr	ip, [r6]
    b048:	str	ip, [sp, #132]	; 0x84
    b04c:	bl	8958 <__memcpy_chk@plt>
    b050:	mov	r0, r7
    b054:	mov	r1, r5
    b058:	mov	r2, r4
    b05c:	mov	r3, r8
    b060:	bl	b934 <__assert_fail@plt+0x2f04>
    b064:	cmp	r0, #0
    b068:	bne	b080 <__assert_fail@plt+0x2650>
    b06c:	mov	r0, r7
    b070:	mov	r1, r9
    b074:	mov	r2, r5
    b078:	mov	r3, r4
    b07c:	bl	ae78 <__assert_fail@plt+0x2448>
    b080:	ldr	r2, [sp, #132]	; 0x84
    b084:	ldr	r3, [r6]
    b088:	cmp	r2, r3
    b08c:	bne	b098 <__assert_fail@plt+0x2668>
    b090:	add	sp, sp, #140	; 0x8c
    b094:	pop	{r4, r5, r6, r7, r8, r9, pc}
    b098:	bl	8940 <__stack_chk_fail@plt>
    b09c:	andeq	ip, r0, r0, ror #31
    b0a0:	andeq	r0, r0, r4, lsl #1
    b0a4:	push	{r3, r4, r5, r6, r7, lr}
    b0a8:	subs	r5, r1, #0
    b0ac:	mov	r4, r0
    b0b0:	mov	r6, r2
    b0b4:	beq	b134 <__assert_fail@plt+0x2704>
    b0b8:	ldrb	r7, [r0]
    b0bc:	lsrs	r7, r7, #6
    b0c0:	bne	b1c0 <__assert_fail@plt+0x2790>
    b0c4:	cmp	r5, #3
    b0c8:	bls	b14c <__assert_fail@plt+0x271c>
    b0cc:	add	r0, r0, #2
    b0d0:	bl	b8cc <__assert_fail@plt+0x2e9c>
    b0d4:	cmp	r6, #0
    b0d8:	add	r7, r0, #20
    b0dc:	bne	b178 <__assert_fail@plt+0x2748>
    b0e0:	cmp	r5, r7
    b0e4:	bcc	b1a0 <__assert_fail@plt+0x2770>
    b0e8:	subs	r5, r7, #20
    b0ec:	add	r4, r4, #20
    b0f0:	bne	b114 <__assert_fail@plt+0x26e4>
    b0f4:	b	b144 <__assert_fail@plt+0x2714>
    b0f8:	sub	r1, r5, #4
    b0fc:	add	ip, r2, #4
    b100:	cmp	r2, r1
    b104:	add	r4, r4, ip
    b108:	bhi	b160 <__assert_fail@plt+0x2730>
    b10c:	subs	r5, r1, r2
    b110:	beq	b144 <__assert_fail@plt+0x2714>
    b114:	add	r0, r4, #2
    b118:	bl	b8cc <__assert_fail@plt+0x2e9c>
    b11c:	cmp	r6, #0
    b120:	mov	r2, r0
    b124:	beq	b0f8 <__assert_fail@plt+0x26c8>
    b128:	bl	b8c0 <__assert_fail@plt+0x2e90>
    b12c:	mov	r2, r0
    b130:	b	b0f8 <__assert_fail@plt+0x26c8>
    b134:	ldr	r0, [pc, #152]	; b1d4 <__assert_fail@plt+0x27a4>
    b138:	mvn	r7, #0
    b13c:	add	r0, pc, r0
    b140:	bl	ba28 <__assert_fail@plt+0x2ff8>
    b144:	mov	r0, r7
    b148:	pop	{r3, r4, r5, r6, r7, pc}
    b14c:	ldr	r0, [pc, #132]	; b1d8 <__assert_fail@plt+0x27a8>
    b150:	add	r0, pc, r0
    b154:	bl	ba28 <__assert_fail@plt+0x2ff8>
    b158:	mov	r0, r7
    b15c:	pop	{r3, r4, r5, r6, r7, pc}
    b160:	ldr	r0, [pc, #116]	; b1dc <__assert_fail@plt+0x27ac>
    b164:	mvn	r7, #0
    b168:	add	r0, pc, r0
    b16c:	bl	ba28 <__assert_fail@plt+0x2ff8>
    b170:	mov	r0, r7
    b174:	pop	{r3, r4, r5, r6, r7, pc}
    b178:	mov	r0, r7
    b17c:	bl	b8b4 <__assert_fail@plt+0x2e84>
    b180:	cmp	r0, #0
    b184:	beq	b0e0 <__assert_fail@plt+0x26b0>
    b188:	ldr	r0, [pc, #80]	; b1e0 <__assert_fail@plt+0x27b0>
    b18c:	mov	r1, r7
    b190:	mvn	r7, #0
    b194:	add	r0, pc, r0
    b198:	bl	ba28 <__assert_fail@plt+0x2ff8>
    b19c:	b	b144 <__assert_fail@plt+0x2714>
    b1a0:	ldr	r0, [pc, #60]	; b1e4 <__assert_fail@plt+0x27b4>
    b1a4:	mov	r2, r7
    b1a8:	mov	r1, r5
    b1ac:	mov	r7, #0
    b1b0:	add	r0, pc, r0
    b1b4:	bl	ba28 <__assert_fail@plt+0x2ff8>
    b1b8:	mov	r0, r7
    b1bc:	pop	{r3, r4, r5, r6, r7, pc}
    b1c0:	ldr	r0, [pc, #32]	; b1e8 <__assert_fail@plt+0x27b8>
    b1c4:	mvn	r7, #0
    b1c8:	add	r0, pc, r0
    b1cc:	bl	ba28 <__assert_fail@plt+0x2ff8>
    b1d0:	b	b144 <__assert_fail@plt+0x2714>
    b1d4:	andeq	r3, r0, ip, ror #30
    b1d8:	andeq	r3, r0, r0, lsr #31
    b1dc:	andeq	r4, r0, r8, lsl r0
    b1e0:	andeq	r3, r0, ip, lsl #31
    b1e4:	muleq	r0, ip, pc	; <UNPREDICTABLE>
    b1e8:	strdeq	r3, [r0], -r8
    b1ec:	ldr	r3, [r0, #4]
    b1f0:	ldr	ip, [r3, #4]!
    b1f4:	ldr	r0, [r3, #4]
    b1f8:	ldr	r2, [r3, #8]
    b1fc:	ldr	r3, [r3, #12]
    b200:	str	ip, [r1]
    b204:	str	r0, [r1, #4]
    b208:	str	r2, [r1, #8]
    b20c:	str	r3, [r1, #12]
    b210:	bx	lr
    b214:	push	{r3, lr}
    b218:	ldr	r0, [r0, #4]
    b21c:	bl	b8cc <__assert_fail@plt+0x2e9c>
    b220:	movw	r3, #277	; 0x115
    b224:	cmp	r0, r3
    b228:	andne	r3, r0, #224	; 0xe0
    b22c:	andne	r2, r0, #15872	; 0x3e00
    b230:	andne	r0, r0, #15
    b234:	asrne	r3, r3, #1
    b238:	orrne	r3, r3, r2, lsr #2
    b23c:	orrne	r0, r3, r0
    b240:	moveq	r0, #7
    b244:	pop	{r3, pc}
    b248:	push	{r3, lr}
    b24c:	ldr	r0, [r0, #4]
    b250:	bl	b8cc <__assert_fail@plt+0x2e9c>
    b254:	movw	r3, #277	; 0x115
    b258:	cmp	r0, r3
    b25c:	andne	r3, r0, #256	; 0x100
    b260:	ubfxne	r0, r0, #4, #1
    b264:	orrne	r0, r0, r3, lsr #7
    b268:	moveq	r0, #1
    b26c:	pop	{r3, pc}
    b270:	ldr	r3, [pc, #68]	; b2bc <__assert_fail@plt+0x288c>
    b274:	ldr	ip, [pc, #68]	; b2c0 <__assert_fail@plt+0x2890>
    b278:	add	r3, pc, r3
    b27c:	push	{r4, lr}
    b280:	sub	sp, sp, #8
    b284:	ldr	r4, [r3, ip]
    b288:	add	r2, sp, #2
    b28c:	ldr	r3, [r4]
    b290:	str	r3, [sp, #4]
    b294:	bl	a680 <__assert_fail@plt+0x1c50>
    b298:	ldr	r2, [sp, #4]
    b29c:	ldr	r3, [r4]
    b2a0:	adds	r0, r0, #0
    b2a4:	movne	r0, #1
    b2a8:	cmp	r2, r3
    b2ac:	bne	b2b8 <__assert_fail@plt+0x2888>
    b2b0:	add	sp, sp, #8
    b2b4:	pop	{r4, pc}
    b2b8:	bl	8940 <__stack_chk_fail@plt>
    b2bc:	andeq	ip, r0, r0, lsl #27
    b2c0:	andeq	r0, r0, r4, lsl #1
    b2c4:	lsr	r0, r0, #15
    b2c8:	bx	lr
    b2cc:	ldr	ip, [pc, #64]	; b314 <__assert_fail@plt+0x28e4>
    b2d0:	mov	r3, #0
    b2d4:	mov	r2, r3
    b2d8:	add	ip, pc, ip
    b2dc:	ldr	r1, [r3, ip]
    b2e0:	add	r3, r3, #36	; 0x24
    b2e4:	cmp	r1, r0
    b2e8:	beq	b304 <__assert_fail@plt+0x28d4>
    b2ec:	add	r2, r2, #1
    b2f0:	cmp	r2, #18
    b2f4:	bne	b2dc <__assert_fail@plt+0x28ac>
    b2f8:	ldr	r0, [pc, #24]	; b318 <__assert_fail@plt+0x28e8>
    b2fc:	add	r0, pc, r0
    b300:	bx	lr
    b304:	add	r2, r2, r2, lsl #3
    b308:	add	r0, ip, r2, lsl #2
    b30c:	add	r0, r0, #4
    b310:	bx	lr
    b314:	andeq	r3, r0, r8, asr #22
    b318:			; <UNDEFINED> instruction: 0x00003eb8
    b31c:	push	{r4, r5, r6, r7, lr}
    b320:	mov	r6, r0
    b324:	sub	sp, sp, #12
    b328:	mov	r0, r1
    b32c:	mov	r4, r1
    b330:	bl	b2cc <__assert_fail@plt+0x289c>
    b334:	mov	r7, r0
    b338:	bl	89ac <strlen@plt>
    b33c:	mov	r1, r4
    b340:	mov	r2, #100	; 0x64
    b344:	mov	r5, r0
    b348:	mov	r0, sp
    b34c:	bl	8a24 <div@plt>
    b350:	mov	r0, r6
    b354:	add	r2, r5, #4
    b358:	mov	r1, #9
    b35c:	bl	ac54 <__assert_fail@plt+0x2224>
    b360:	subs	r3, r0, #0
    b364:	moveq	r0, #3
    b368:	beq	b39c <__assert_fail@plt+0x296c>
    b36c:	ldr	lr, [sp]
    b370:	mov	r4, #0
    b374:	ldr	ip, [sp, #4]
    b378:	mov	r1, r7
    b37c:	mov	r2, r5
    b380:	add	r0, r3, #4
    b384:	strb	lr, [r3, #2]
    b388:	strb	ip, [r3, #3]
    b38c:	strb	r4, [r3]
    b390:	strb	r4, [r3, #1]
    b394:	bl	8904 <memcpy@plt>
    b398:	mov	r0, r4
    b39c:	add	sp, sp, #12
    b3a0:	pop	{r4, r5, r6, r7, pc}
    b3a4:	push	{r4, r5, r6, lr}
    b3a8:	sub	sp, sp, #32
    b3ac:	ldr	lr, [pc, #136]	; b43c <__assert_fail@plt+0x2a0c>
    b3b0:	mov	ip, r0
    b3b4:	ldr	r4, [pc, #132]	; b440 <__assert_fail@plt+0x2a10>
    b3b8:	mov	r5, r1
    b3bc:	add	lr, pc, lr
    b3c0:	sub	r5, r5, #12
    b3c4:	sub	r3, r1, #20
    b3c8:	add	r0, sp, #4
    b3cc:	ldr	r4, [lr, r4]
    b3d0:	ubfx	r6, r3, #8, #8
    b3d4:	str	r5, [sp, #24]
    b3d8:	add	r5, ip, #4
    b3dc:	str	ip, [sp, #4]
    b3e0:	mov	r1, #3
    b3e4:	ldr	ip, [r4]
    b3e8:	orr	lr, r6, r3, lsl #8
    b3ec:	str	r5, [sp, #20]
    b3f0:	mov	r3, #2
    b3f4:	strh	lr, [sp, #2]
    b3f8:	str	r3, [sp, #8]
    b3fc:	str	r3, [sp, #16]
    b400:	add	r3, sp, r3
    b404:	str	ip, [sp, #28]
    b408:	str	r3, [sp, #12]
    b40c:	bl	b528 <__assert_fail@plt+0x2af8>
    b410:	ldr	r1, [sp, #28]
    b414:	movw	r3, #21838	; 0x554e
    b418:	ldr	r2, [r4]
    b41c:	movt	r3, #21332	; 0x5354
    b420:	cmp	r1, r2
    b424:	eor	r3, r0, r3
    b428:	rev	r0, r3
    b42c:	bne	b438 <__assert_fail@plt+0x2a08>
    b430:	add	sp, sp, #32
    b434:	pop	{r4, r5, r6, pc}
    b438:	bl	8940 <__stack_chk_fail@plt>
    b43c:	andeq	ip, r0, ip, lsr ip
    b440:	andeq	r0, r0, r4, lsl #1
    b444:	ldr	r2, [pc, #100]	; b4b0 <__assert_fail@plt+0x2a80>
    b448:	movw	r3, #4641	; 0x1221
    b44c:	ldr	ip, [pc, #96]	; b4b4 <__assert_fail@plt+0x2a84>
    b450:	movt	r3, #17060	; 0x42a4
    b454:	add	r2, pc, r2
    b458:	push	{r4, r5, lr}
    b45c:	sub	sp, sp, #28
    b460:	ldr	r4, [r2, ip]
    b464:	add	r5, sp, #4
    b468:	str	r3, [sp]
    b46c:	mov	r1, r5
    b470:	ldr	r3, [r4]
    b474:	str	r3, [sp, #20]
    b478:	bl	b1ec <__assert_fail@plt+0x27bc>
    b47c:	mov	r2, #4
    b480:	mov	r0, r5
    b484:	mov	r1, sp
    b488:	bl	8928 <memcmp@plt>
    b48c:	ldr	r2, [sp, #20]
    b490:	ldr	r3, [r4]
    b494:	rsbs	r0, r0, #1
    b498:	movcc	r0, #0
    b49c:	cmp	r2, r3
    b4a0:	bne	b4ac <__assert_fail@plt+0x2a7c>
    b4a4:	add	sp, sp, #28
    b4a8:	pop	{r4, r5, pc}
    b4ac:	bl	8940 <__stack_chk_fail@plt>
    b4b0:	andeq	ip, r0, r4, lsr #23
    b4b4:	andeq	r0, r0, r4, lsl #1
    b4b8:	subs	r2, r1, #0
    b4bc:	push	{r4, r5}
    b4c0:	beq	b50c <__assert_fail@plt+0x2adc>
    b4c4:	ldrb	ip, [r2]
    b4c8:	cmp	ip, #0
    b4cc:	beq	b518 <__assert_fail@plt+0x2ae8>
    b4d0:	ldr	r5, [pc, #72]	; b520 <__assert_fail@plt+0x2af0>
    b4d4:	mov	r3, r2
    b4d8:	mov	r4, #128	; 0x80
    b4dc:	add	r5, pc, r5
    b4e0:	b	b4ec <__assert_fail@plt+0x2abc>
    b4e4:	subs	r4, r4, #1
    b4e8:	beq	b4fc <__assert_fail@plt+0x2acc>
    b4ec:	ldrb	ip, [r5, ip]
    b4f0:	ldrb	ip, [r3, ip]!
    b4f4:	cmp	ip, #0
    b4f8:	bne	b4e4 <__assert_fail@plt+0x2ab4>
    b4fc:	rsb	r3, r2, r3
    b500:	movw	r1, #32802	; 0x8022
    b504:	pop	{r4, r5}
    b508:	b	ad80 <__assert_fail@plt+0x2350>
    b50c:	ldr	r2, [pc, #16]	; b524 <__assert_fail@plt+0x2af4>
    b510:	add	r2, pc, r2
    b514:	b	b4c4 <__assert_fail@plt+0x2a94>
    b518:	mov	r3, ip
    b51c:	b	b500 <__assert_fail@plt+0x2ad0>
    b520:	andeq	r3, r0, r8, ror #25
    b524:			; <UNDEFINED> instruction: 0x00003db4
    b528:	cmp	r1, #0
    b52c:	push	{r4, r5, r6, r7, r8, r9, sl}
    b530:	beq	b5b8 <__assert_fail@plt+0x2b88>
    b534:	ldr	r8, [pc, #136]	; b5c4 <__assert_fail@plt+0x2b94>
    b538:	movw	r7, #47338	; 0xb8ea
    b53c:	lsl	sl, r1, #3
    b540:	movt	r7, #35774	; 0x8bbe
    b544:	add	r8, pc, r8
    b548:	mov	r9, #0
    b54c:	mvn	ip, #0
    b550:	mov	r3, r0
    b554:	ldr	r1, [r3, r9]!
    b558:	ldr	r6, [r3, #4]
    b55c:	cmp	r6, #0
    b560:	beq	b5a0 <__assert_fail@plt+0x2b70>
    b564:	add	r6, r1, r6
    b568:	ldrb	r3, [r1], #1
    b56c:	movw	r4, #59626	; 0xe8ea
    b570:	movt	r4, #2235	; 0x8bb
    b574:	eor	r3, ip, r3
    b578:	uxtb	r3, r3
    b57c:	ldr	r3, [r8, r3, lsl #2]
    b580:	cmp	r3, r7
    b584:	movne	r5, #0
    b588:	andeq	r5, r2, #1
    b58c:	cmp	r5, #0
    b590:	movne	r3, r4
    b594:	cmp	r1, r6
    b598:	eor	ip, r3, ip, lsr #8
    b59c:	bne	b568 <__assert_fail@plt+0x2b38>
    b5a0:	add	r9, r9, #8
    b5a4:	cmp	r9, sl
    b5a8:	bne	b550 <__assert_fail@plt+0x2b20>
    b5ac:	mvn	r0, ip
    b5b0:	pop	{r4, r5, r6, r7, r8, r9, sl}
    b5b4:	bx	lr
    b5b8:	mov	r0, r1
    b5bc:	pop	{r4, r5, r6, r7, r8, r9, sl}
    b5c0:	bx	lr
    b5c4:	muleq	r0, r0, sp
    b5c8:	ldr	ip, [pc, #260]	; b6d4 <__assert_fail@plt+0x2ca4>
    b5cc:	push	{r4, r5, r6, r7, r8, r9, lr}
    b5d0:	add	ip, pc, ip
    b5d4:	ldr	r5, [pc, #252]	; b6d8 <__assert_fail@plt+0x2ca8>
    b5d8:	sub	sp, sp, #116	; 0x74
    b5dc:	add	r7, sp, #44	; 0x2c
    b5e0:	ubfx	lr, r2, #8, #8
    b5e4:	orr	lr, lr, r2, lsl #8
    b5e8:	mov	r4, r1
    b5ec:	ldr	r5, [ip, r5]
    b5f0:	mov	r6, r0
    b5f4:	mov	r1, #0
    b5f8:	mov	r0, r7
    b5fc:	mov	r2, #64	; 0x40
    b600:	mov	r8, r3
    b604:	ldr	ip, [r5]
    b608:	strh	lr, [sp, #10]
    b60c:	ldr	r9, [sp, #144]	; 0x90
    b610:	str	ip, [sp, #108]	; 0x6c
    b614:	bl	89d0 <memset@plt>
    b618:	cmp	r4, #43	; 0x2b
    b61c:	bls	b6b0 <__assert_fail@plt+0x2c80>
    b620:	ldr	r3, [sp, #152]	; 0x98
    b624:	mov	r2, #2
    b628:	str	r6, [sp, #12]
    b62c:	add	r6, r6, #4
    b630:	cmp	r3, #0
    b634:	str	r2, [sp, #28]
    b638:	sub	r3, r4, #28
    b63c:	str	r2, [sp, #32]
    b640:	str	r6, [sp, #20]
    b644:	add	r2, sp, #10
    b648:	str	r3, [sp, #36]	; 0x24
    b64c:	str	r2, [sp, #16]
    b650:	beq	b678 <__assert_fail@plt+0x2c48>
    b654:	sub	r4, r4, #24
    b658:	ands	r4, r4, #63	; 0x3f
    b65c:	beq	b678 <__assert_fail@plt+0x2c48>
    b660:	rsb	r4, r4, #64	; 0x40
    b664:	str	r7, [sp, #24]
    b668:	mov	r2, #4
    b66c:	uxth	r4, r4
    b670:	str	r4, [sp, #40]	; 0x28
    b674:	b	b67c <__assert_fail@plt+0x2c4c>
    b678:	mov	r2, #3
    b67c:	add	r3, sp, #28
    b680:	str	r8, [sp, #4]
    b684:	str	r3, [sp]
    b688:	mov	r0, r9
    b68c:	add	r3, sp, #12
    b690:	ldr	r1, [sp, #148]	; 0x94
    b694:	bl	d768 <__assert_fail@plt+0x4d38>
    b698:	ldr	r2, [sp, #108]	; 0x6c
    b69c:	ldr	r3, [r5]
    b6a0:	cmp	r2, r3
    b6a4:	bne	b6d0 <__assert_fail@plt+0x2ca0>
    b6a8:	add	sp, sp, #116	; 0x74
    b6ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
    b6b0:	ldr	r0, [pc, #36]	; b6dc <__assert_fail@plt+0x2cac>
    b6b4:	mov	r2, #62	; 0x3e
    b6b8:	ldr	r1, [pc, #32]	; b6e0 <__assert_fail@plt+0x2cb0>
    b6bc:	ldr	r3, [pc, #32]	; b6e4 <__assert_fail@plt+0x2cb4>
    b6c0:	add	r0, pc, r0
    b6c4:	add	r1, pc, r1
    b6c8:	add	r3, pc, r3
    b6cc:	bl	8a30 <__assert_fail@plt>
    b6d0:	bl	8940 <__stack_chk_fail@plt>
    b6d4:	andeq	ip, r0, r8, lsr #20
    b6d8:	andeq	r0, r0, r4, lsl #1
    b6dc:	andeq	r4, r0, r0, lsr #32
    b6e0:	andeq	r4, r0, r8, lsr #32
    b6e4:	andeq	r4, r0, ip
    b6e8:	ldr	ip, [pc, #432]	; b8a0 <__assert_fail@plt+0x2e70>
    b6ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6f0:	mov	r9, r2
    b6f4:	ldr	r2, [pc, #424]	; b8a4 <__assert_fail@plt+0x2e74>
    b6f8:	add	ip, pc, ip
    b6fc:	mov	r7, r0
    b700:	ldrb	r0, [r9]
    b704:	mov	r6, r3
    b708:	mov	r3, ip
    b70c:	ldr	r2, [ip, r2]
    b710:	sub	sp, sp, #108	; 0x6c
    b714:	cmp	r0, #34	; 0x22
    b718:	mov	r4, r1
    b71c:	ldr	r8, [sp, #144]	; 0x90
    b720:	ldr	r3, [r2]
    b724:	str	r2, [sp, #4]
    b728:	ldr	r5, [sp, #148]	; 0x94
    b72c:	ldr	sl, [sp, #152]	; 0x98
    b730:	str	r3, [sp, #100]	; 0x64
    b734:	bne	b754 <__assert_fail@plt+0x2d24>
    b738:	add	r3, r9, #1
    b73c:	ldrb	r2, [r3]
    b740:	mov	r9, r3
    b744:	sub	r6, r6, #1
    b748:	add	r3, r3, #1
    b74c:	cmp	r2, #34	; 0x22
    b750:	beq	b73c <__assert_fail@plt+0x2d0c>
    b754:	add	r2, r9, r6
    b758:	b	b760 <__assert_fail@plt+0x2d30>
    b75c:	mov	r6, r1
    b760:	ldrb	r3, [r2, #-1]!
    b764:	sub	r1, r6, #1
    b768:	cmp	r3, #34	; 0x22
    b76c:	cmpne	r3, #0
    b770:	beq	b75c <__assert_fail@plt+0x2d2c>
    b774:	ldrb	r3, [r8]
    b778:	cmp	r3, #34	; 0x22
    b77c:	bne	b79c <__assert_fail@plt+0x2d6c>
    b780:	add	r3, r8, #1
    b784:	ldrb	r2, [r3]
    b788:	mov	r8, r3
    b78c:	sub	r5, r5, #1
    b790:	add	r3, r3, #1
    b794:	cmp	r2, #34	; 0x22
    b798:	beq	b784 <__assert_fail@plt+0x2d54>
    b79c:	add	r2, r8, r5
    b7a0:	b	b7a8 <__assert_fail@plt+0x2d78>
    b7a4:	mov	r5, r1
    b7a8:	ldrb	r3, [r2, #-1]!
    b7ac:	sub	r1, r5, #1
    b7b0:	cmp	r3, #34	; 0x22
    b7b4:	cmpne	r3, #0
    b7b8:	beq	b7a4 <__assert_fail@plt+0x2d74>
    b7bc:	ldrb	r3, [r7]
    b7c0:	cmp	r3, #34	; 0x22
    b7c4:	bne	b7e4 <__assert_fail@plt+0x2db4>
    b7c8:	add	r3, r7, #1
    b7cc:	ldrb	r2, [r3]
    b7d0:	mov	r7, r3
    b7d4:	sub	r4, r4, #1
    b7d8:	add	r3, r3, #1
    b7dc:	cmp	r2, #34	; 0x22
    b7e0:	beq	b7cc <__assert_fail@plt+0x2d9c>
    b7e4:	add	r2, r7, r4
    b7e8:	b	b7f0 <__assert_fail@plt+0x2dc0>
    b7ec:	mov	r4, r1
    b7f0:	ldrb	r3, [r2, #-1]!
    b7f4:	sub	r1, r4, #1
    b7f8:	cmp	r3, #34	; 0x22
    b7fc:	cmpne	r3, #0
    b800:	beq	b7ec <__assert_fail@plt+0x2dbc>
    b804:	add	fp, sp, #12
    b808:	ldr	r3, [pc, #152]	; b8a8 <__assert_fail@plt+0x2e78>
    b80c:	mov	r0, fp
    b810:	add	r3, pc, r3
    b814:	str	r3, [sp]
    b818:	bl	e4c0 <__assert_fail@plt+0x5a90>
    b81c:	mov	r2, r6
    b820:	mov	r0, fp
    b824:	mov	r1, r9
    b828:	bl	e4fc <__assert_fail@plt+0x5acc>
    b82c:	ldr	r3, [sp]
    b830:	mov	r0, fp
    b834:	mov	r2, #1
    b838:	mov	r1, r3
    b83c:	mov	r6, r3
    b840:	bl	e4fc <__assert_fail@plt+0x5acc>
    b844:	mov	r0, fp
    b848:	mov	r1, r7
    b84c:	mov	r2, r4
    b850:	bl	e4fc <__assert_fail@plt+0x5acc>
    b854:	mov	r0, fp
    b858:	mov	r1, r6
    b85c:	mov	r2, #1
    b860:	bl	e4fc <__assert_fail@plt+0x5acc>
    b864:	mov	r2, r5
    b868:	mov	r0, fp
    b86c:	mov	r1, r8
    b870:	bl	e4fc <__assert_fail@plt+0x5acc>
    b874:	mov	r1, fp
    b878:	mov	r0, sl
    b87c:	bl	e5f8 <__assert_fail@plt+0x5bc8>
    b880:	ldr	r1, [sp, #4]
    b884:	ldr	r2, [sp, #100]	; 0x64
    b888:	ldr	r3, [r1]
    b88c:	cmp	r2, r3
    b890:	bne	b89c <__assert_fail@plt+0x2e6c>
    b894:	add	sp, sp, #108	; 0x6c
    b898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b89c:	bl	8940 <__stack_chk_fail@plt>
    b8a0:	andeq	ip, r0, r0, lsl #18
    b8a4:	andeq	r0, r0, r4, lsl #1
    b8a8:	andeq	r3, r0, r8, ror #29
    b8ac:	mov	r1, #16
    b8b0:	b	e710 <__assert_fail@plt+0x5ce0>
    b8b4:	rsb	r0, r0, #0
    b8b8:	and	r0, r0, #3
    b8bc:	bx	lr
    b8c0:	add	r0, r0, #3
    b8c4:	bic	r0, r0, #3
    b8c8:	bx	lr
    b8cc:	ldrb	r2, [r0]
    b8d0:	ldrb	r0, [r0, #1]
    b8d4:	orr	r0, r0, r2, lsl #8
    b8d8:	bx	lr
    b8dc:	mov	r3, r0
    b8e0:	strb	r1, [r0, #1]
    b8e4:	lsr	r1, r1, #8
    b8e8:	add	r0, r0, #2
    b8ec:	strb	r1, [r3]
    b8f0:	bx	lr
    b8f4:	uxtb	r3, r2
    b8f8:	lsr	r2, r2, #6
    b8fc:	and	ip, r3, #15
    b900:	and	r2, r2, #62	; 0x3e
    b904:	lsl	r3, r3, #1
    b908:	push	{r4}		; (str r4, [sp, #-4]!)
    b90c:	bic	r3, r3, #31
    b910:	lsl	r4, r1, #4
    b914:	orr	ip, r3, ip
    b918:	and	r4, r4, #16
    b91c:	orr	r1, r2, r1, lsr #1
    b920:	orr	ip, ip, r4
    b924:	strb	r1, [r0]
    b928:	strb	ip, [r0, #1]
    b92c:	pop	{r4}		; (ldr r4, [sp], #4)
    b930:	bx	lr
    b934:	push	{r4, r5}
    b938:	ldrh	ip, [r1]
    b93c:	cmp	ip, #2
    b940:	beq	b96c <__assert_fail@plt+0x2f3c>
    b944:	cmp	ip, #10
    b948:	bne	b960 <__assert_fail@plt+0x2f30>
    b94c:	cmp	r2, #27
    b950:	bhi	b9a8 <__assert_fail@plt+0x2f78>
    b954:	mov	r0, #2
    b958:	pop	{r4, r5}
    b95c:	bx	lr
    b960:	mov	r0, #4
    b964:	pop	{r4, r5}
    b968:	bx	lr
    b96c:	cmp	r2, #15
    b970:	bls	b954 <__assert_fail@plt+0x2f24>
    b974:	lsr	r2, r3, #16
    b978:	ldr	r4, [r1, #4]
    b97c:	ldrh	r0, [r1, #2]
    b980:	rev	r3, r3
    b984:	lsl	ip, r2, #8
    b988:	eor	r3, r4, r3
    b98c:	orr	r2, ip, r2, lsr #8
    b990:	str	r3, [r1, #4]
    b994:	eor	r2, r2, r0
    b998:	mov	r0, #0
    b99c:	strh	r2, [r1, #2]
    b9a0:	pop	{r4, r5}
    b9a4:	bx	lr
    b9a8:	lsr	r3, r3, #16
    b9ac:	ldrh	r4, [r1, #2]
    b9b0:	mov	ip, r1
    b9b4:	mov	r2, #4
    b9b8:	lsl	r5, r3, #8
    b9bc:	orr	r3, r5, r3, lsr #8
    b9c0:	eor	r3, r3, r4
    b9c4:	strh	r3, [r1, #2]
    b9c8:	ldr	r1, [r0, #4]
    b9cc:	add	ip, ip, #1
    b9d0:	ldrb	r3, [ip, #7]
    b9d4:	ldrb	r1, [r1, r2]
    b9d8:	add	r2, r2, #1
    b9dc:	cmp	r2, #20
    b9e0:	eor	r3, r1, r3
    b9e4:	strb	r3, [ip, #7]
    b9e8:	bne	b9c8 <__assert_fail@plt+0x2f98>
    b9ec:	mov	r0, #0
    b9f0:	pop	{r4, r5}
    b9f4:	bx	lr
    b9f8:	ldr	r3, [pc, #12]	; ba0c <__assert_fail@plt+0x2fdc>
    b9fc:	mov	r2, #1
    ba00:	add	r3, pc, r3
    ba04:	str	r2, [r3]
    ba08:	bx	lr
    ba0c:	andeq	ip, r0, ip, lsl #13
    ba10:	ldr	r3, [pc, #12]	; ba24 <__assert_fail@plt+0x2ff4>
    ba14:	mov	r2, #0
    ba18:	add	r3, pc, r3
    ba1c:	str	r2, [r3]
    ba20:	bx	lr
    ba24:	andeq	ip, r0, r4, ror r6
    ba28:	push	{r0, r1, r2, r3}
    ba2c:	ldr	r0, [pc, #112]	; baa4 <__assert_fail@plt+0x3074>
    ba30:	ldr	r1, [pc, #112]	; baa8 <__assert_fail@plt+0x3078>
    ba34:	add	r0, pc, r0
    ba38:	ldr	r3, [pc, #108]	; baac <__assert_fail@plt+0x307c>
    ba3c:	push	{r4, lr}
    ba40:	add	r3, pc, r3
    ba44:	ldr	r4, [r0, r1]
    ba48:	sub	sp, sp, #8
    ba4c:	ldr	r1, [r3]
    ba50:	ldr	r2, [sp, #16]
    ba54:	ldr	r3, [r4]
    ba58:	cmp	r1, #0
    ba5c:	str	r3, [sp, #4]
    ba60:	beq	ba80 <__assert_fail@plt+0x3050>
    ba64:	ldr	ip, [pc, #68]	; bab0 <__assert_fail@plt+0x3080>
    ba68:	add	r3, sp, #20
    ba6c:	str	r3, [sp]
    ba70:	mov	r1, #1
    ba74:	ldr	r0, [r0, ip]
    ba78:	ldr	r0, [r0]
    ba7c:	bl	897c <__vfprintf_chk@plt>
    ba80:	ldr	r2, [sp, #4]
    ba84:	ldr	r3, [r4]
    ba88:	cmp	r2, r3
    ba8c:	bne	baa0 <__assert_fail@plt+0x3070>
    ba90:	add	sp, sp, #8
    ba94:	pop	{r4, lr}
    ba98:	add	sp, sp, #16
    ba9c:	bx	lr
    baa0:	bl	8940 <__stack_chk_fail@plt>
    baa4:	andeq	ip, r0, r4, asr #11
    baa8:	andeq	r0, r0, r4, lsl #1
    baac:	andeq	ip, r0, ip, asr #12
    bab0:	andeq	r0, r0, r8, lsl #1
    bab4:	push	{r4, r5, r6, lr}
    bab8:	mov	r4, r0
    babc:	ldr	r0, [pc, #52]	; baf8 <__assert_fail@plt+0x30c8>
    bac0:	mov	r5, r1
    bac4:	add	r0, pc, r0
    bac8:	bl	ba28 <__assert_fail@plt+0x2ff8>
    bacc:	cmp	r5, #0
    bad0:	popeq	{r4, r5, r6, pc}
    bad4:	ldr	r6, [pc, #32]	; bafc <__assert_fail@plt+0x30cc>
    bad8:	add	r5, r4, r5
    badc:	add	r6, pc, r6
    bae0:	ldrb	r1, [r4], #1
    bae4:	mov	r0, r6
    bae8:	bl	ba28 <__assert_fail@plt+0x2ff8>
    baec:	cmp	r4, r5
    baf0:	bne	bae0 <__assert_fail@plt+0x30b0>
    baf4:	pop	{r4, r5, r6, pc}
    baf8:	andeq	r3, r0, r8, lsr ip
    bafc:	andeq	r3, r0, r4, lsr #24
    bb00:	ldr	r3, [pc, #52]	; bb3c <__assert_fail@plt+0x310c>
    bb04:	mov	ip, r1
    bb08:	ldr	r2, [pc, #48]	; bb40 <__assert_fail@plt+0x3110>
    bb0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb10:	add	r3, pc, r3
    bb14:	sub	sp, sp, #172	; 0xac
    bb18:	add	r5, r1, #64	; 0x40
    bb1c:	add	r4, sp, #100	; 0x64
    bb20:	str	r0, [sp, #76]	; 0x4c
    bb24:	str	r4, [sp, #88]	; 0x58
    bb28:	ldr	r2, [r3, r2]
    bb2c:	ldr	r3, [r2]
    bb30:	str	r2, [sp, #92]	; 0x5c
    bb34:	str	r3, [sp, #164]	; 0xa4
    bb38:	b	bb44 <__assert_fail@plt+0x3114>
    bb3c:	andeq	ip, r0, r8, ror #9
    bb40:	andeq	r0, r0, r4, lsl #1
    bb44:	ldr	r0, [ip]
    bb48:	add	ip, ip, #16
    bb4c:	ldr	r1, [ip, #-12]
    bb50:	mov	lr, r4
    bb54:	ldr	r2, [ip, #-8]
    bb58:	add	r4, r4, #16
    bb5c:	ldr	r3, [ip, #-4]
    bb60:	cmp	ip, r5
    bb64:	stmia	lr!, {r0, r1, r2, r3}
    bb68:	bne	bb44 <__assert_fail@plt+0x3114>
    bb6c:	ldr	r5, [sp, #76]	; 0x4c
    bb70:	movw	ip, #31129	; 0x7999
    bb74:	ldr	r6, [sp, #76]	; 0x4c
    bb78:	movt	ip, #23170	; 0x5a82
    bb7c:	ldr	r7, [sp, #76]	; 0x4c
    bb80:	movw	r1, #31129	; 0x7999
    bb84:	ldr	r8, [sp, #76]	; 0x4c
    bb88:	movt	r1, #23170	; 0x5a82
    bb8c:	ldr	r9, [sp, #76]	; 0x4c
    bb90:	ldr	r5, [r5, #4]
    bb94:	ldr	r6, [r6, #8]
    bb98:	ldr	r7, [r7, #12]
    bb9c:	ldr	r8, [r8]
    bba0:	ror	r0, r5, #2
    bba4:	ldr	r9, [r9, #16]
    bba8:	eor	r3, r7, r6
    bbac:	eor	r2, r0, r6
    bbb0:	and	r3, r3, r5
    bbb4:	add	ip, r9, ip
    bbb8:	ldr	sl, [sp, #100]	; 0x64
    bbbc:	add	ip, ip, r8, ror #27
    bbc0:	str	r9, [sp, #4]
    bbc4:	and	r2, r2, r8
    bbc8:	ldr	r9, [sp, #104]	; 0x68
    bbcc:	eor	r3, r3, r7
    bbd0:	add	r1, r7, r1
    bbd4:	eor	r2, r2, r6
    bbd8:	add	r3, ip, r3
    bbdc:	rev	sl, sl
    bbe0:	rev	r9, r9
    bbe4:	add	r3, r3, sl
    bbe8:	str	r7, [sp, #8]
    bbec:	add	r2, r1, r2
    bbf0:	ldr	r7, [sp, #108]	; 0x6c
    bbf4:	ror	r1, r8, #2
    bbf8:	add	r2, r2, r9
    bbfc:	eor	lr, r1, r0
    bc00:	movw	ip, #31129	; 0x7999
    bc04:	movt	ip, #23170	; 0x5a82
    bc08:	add	r2, r2, r3, ror #27
    bc0c:	rev	r7, r7
    bc10:	str	r5, [sp, #16]
    bc14:	add	ip, r6, ip
    bc18:	ror	r5, r3, #2
    bc1c:	and	r3, r3, lr
    bc20:	add	ip, ip, r7
    bc24:	eor	r3, r3, r0
    bc28:	eor	r4, r5, r1
    bc2c:	str	r8, [sp, #20]
    bc30:	add	ip, ip, r3
    bc34:	ldr	r8, [sp, #112]	; 0x70
    bc38:	ror	r3, r2, #2
    bc3c:	add	ip, ip, r2, ror #27
    bc40:	str	r6, [sp, #12]
    bc44:	and	r4, r4, r2
    bc48:	ldr	r6, [sp, #116]	; 0x74
    bc4c:	movw	lr, #31129	; 0x7999
    bc50:	movw	r2, #31129	; 0x7999
    bc54:	movt	lr, #23170	; 0x5a82
    bc58:	movt	r2, #23170	; 0x5a82
    bc5c:	rev	r8, r8
    bc60:	eor	r4, r4, r1
    bc64:	add	lr, r0, lr
    bc68:	add	r2, r1, r2
    bc6c:	eor	r0, r3, r5
    bc70:	ldr	r1, [sp, #120]	; 0x78
    bc74:	rev	r6, r6
    bc78:	add	lr, lr, r8
    bc7c:	and	r0, r0, ip
    bc80:	add	lr, lr, r4
    bc84:	eor	r0, r0, r5
    bc88:	add	r2, r2, r6
    bc8c:	rev	r1, r1
    bc90:	str	r1, [sp, #64]	; 0x40
    bc94:	add	lr, lr, ip, ror #27
    bc98:	add	r2, r2, r0
    bc9c:	ror	ip, ip, #2
    bca0:	ldr	r0, [sp, #64]	; 0x40
    bca4:	str	r6, [sp, #28]
    bca8:	movw	r1, #31129	; 0x7999
    bcac:	eor	r6, ip, r3
    bcb0:	ldr	fp, [sp, #124]	; 0x7c
    bcb4:	movt	r1, #23170	; 0x5a82
    bcb8:	and	r6, r6, lr
    bcbc:	add	r1, r0, r1
    bcc0:	add	r4, r2, lr, ror #27
    bcc4:	add	r5, r1, r5
    bcc8:	eor	r2, r6, r3
    bccc:	rev	fp, fp
    bcd0:	str	fp, [sp, #68]	; 0x44
    bcd4:	ror	lr, lr, #2
    bcd8:	add	r2, r5, r2
    bcdc:	ldr	r5, [sp, #68]	; 0x44
    bce0:	eor	r0, lr, ip
    bce4:	ldr	fp, [sp, #128]	; 0x80
    bce8:	movw	r1, #31129	; 0x7999
    bcec:	movt	r1, #23170	; 0x5a82
    bcf0:	ror	r6, r4, #2
    bcf4:	add	r1, r5, r1
    bcf8:	and	r0, r0, r4
    bcfc:	add	r2, r2, r4, ror #27
    bd00:	rev	fp, fp
    bd04:	add	r3, r1, r3
    bd08:	eor	r5, r0, ip
    bd0c:	eor	r1, r6, lr
    bd10:	movw	r0, #31129	; 0x7999
    bd14:	movt	r0, #23170	; 0x5a82
    bd18:	ldr	r4, [sp, #132]	; 0x84
    bd1c:	add	r5, r3, r5
    bd20:	add	r0, fp, r0
    bd24:	and	r1, r1, r2
    bd28:	add	r5, r5, r2, ror #27
    bd2c:	add	r0, r0, ip
    bd30:	ror	r2, r2, #2
    bd34:	eor	r1, r1, lr
    bd38:	rev	r4, r4
    bd3c:	eor	ip, r2, r6
    bd40:	ldr	r3, [sp, #136]	; 0x88
    bd44:	add	r1, r0, r1
    bd48:	movw	r0, #31129	; 0x7999
    bd4c:	movt	r0, #23170	; 0x5a82
    bd50:	and	ip, ip, r5
    bd54:	add	r0, r4, r0
    bd58:	eor	ip, ip, r6
    bd5c:	rev	r3, r3
    bd60:	add	r0, r0, lr
    bd64:	str	r3, [sp, #48]	; 0x30
    bd68:	add	r1, r1, r5, ror #27
    bd6c:	str	fp, [sp, #72]	; 0x48
    bd70:	ror	r5, r5, #2
    bd74:	ldr	fp, [sp, #140]	; 0x8c
    bd78:	add	r0, r0, ip
    bd7c:	ldr	ip, [sp, #48]	; 0x30
    bd80:	movw	r3, #31129	; 0x7999
    bd84:	str	r4, [sp, #24]
    bd88:	movt	r3, #23170	; 0x5a82
    bd8c:	eor	r4, r5, r2
    bd90:	ror	lr, r1, #2
    bd94:	add	r0, r0, r1, ror #27
    bd98:	add	r3, ip, r3
    bd9c:	and	r4, r4, r1
    bda0:	rev	fp, fp
    bda4:	str	fp, [sp, #52]	; 0x34
    bda8:	add	r6, r3, r6
    bdac:	ldr	r1, [sp, #144]	; 0x90
    bdb0:	eor	ip, r4, r2
    bdb4:	movw	r3, #31129	; 0x7999
    bdb8:	eor	r4, lr, r5
    bdbc:	movt	r3, #23170	; 0x5a82
    bdc0:	add	ip, r6, ip
    bdc4:	add	r3, fp, r3
    bdc8:	and	r4, r4, r0
    bdcc:	rev	r1, r1
    bdd0:	str	r1, [sp, #56]	; 0x38
    bdd4:	add	ip, ip, r0, ror #27
    bdd8:	add	r3, r3, r2
    bddc:	ror	r0, r0, #2
    bde0:	ldr	r6, [sp, #56]	; 0x38
    bde4:	eor	r4, r4, r5
    bde8:	eor	r2, r0, lr
    bdec:	ldr	r1, [sp, #148]	; 0x94
    bdf0:	add	r4, r3, r4
    bdf4:	movw	r3, #31129	; 0x7999
    bdf8:	movt	r3, #23170	; 0x5a82
    bdfc:	add	r3, r6, r3
    be00:	and	r2, r2, ip
    be04:	eor	r2, r2, lr
    be08:	rev	r1, r1
    be0c:	add	r3, r3, r5
    be10:	str	r1, [sp, #60]	; 0x3c
    be14:	add	r4, r4, ip, ror #27
    be18:	add	r3, r3, r2
    be1c:	ror	ip, ip, #2
    be20:	ldr	r2, [sp, #60]	; 0x3c
    be24:	eor	r6, ip, r0
    be28:	ldr	fp, [sp, #152]	; 0x98
    be2c:	movw	r1, #31129	; 0x7999
    be30:	movt	r1, #23170	; 0x5a82
    be34:	and	r6, r6, r4
    be38:	add	r1, r2, r1
    be3c:	ror	r2, r4, #2
    be40:	add	r3, r3, r4, ror #27
    be44:	rev	fp, fp
    be48:	add	r1, r1, lr
    be4c:	eor	r5, r6, r0
    be50:	eor	lr, r2, ip
    be54:	ldr	r6, [sp, #156]	; 0x9c
    be58:	movw	r4, #31129	; 0x7999
    be5c:	movt	r4, #23170	; 0x5a82
    be60:	and	lr, lr, r3
    be64:	add	r4, fp, r4
    be68:	eor	lr, lr, ip
    be6c:	add	r5, r1, r5
    be70:	rev	r6, r6
    be74:	add	r1, r4, r0
    be78:	str	r6, [sp, #40]	; 0x28
    be7c:	ldr	r6, [sp, #24]
    be80:	add	r5, r5, r3, ror #27
    be84:	str	fp, [sp, #36]	; 0x24
    be88:	ror	r3, r3, #2
    be8c:	eor	sl, r7, sl
    be90:	ldr	r4, [sp, #160]	; 0xa0
    be94:	add	r1, r1, lr
    be98:	ldr	lr, [sp, #40]	; 0x28
    be9c:	eor	r0, r3, r2
    bea0:	eor	sl, sl, r6
    bea4:	movw	fp, #31129	; 0x7999
    bea8:	ldr	r6, [sp, #36]	; 0x24
    beac:	movt	fp, #23170	; 0x5a82
    beb0:	and	r0, r0, r5
    beb4:	add	fp, lr, fp
    beb8:	rev	r4, r4
    bebc:	str	r4, [sp, #44]	; 0x2c
    bec0:	add	r1, r1, r5, ror #27
    bec4:	eor	r0, r0, r2
    bec8:	ror	r5, r5, #2
    becc:	eor	sl, sl, r6
    bed0:	add	fp, fp, ip
    bed4:	eor	ip, r8, r9
    bed8:	ldr	r9, [sp, #44]	; 0x2c
    bedc:	ldr	r6, [sp, #28]
    bee0:	eor	lr, r5, r3
    bee4:	add	fp, fp, r0
    bee8:	movw	r4, #31129	; 0x7999
    beec:	ldr	r0, [sp, #48]	; 0x30
    bef0:	movt	r4, #23170	; 0x5a82
    bef4:	add	fp, fp, r1, ror #27
    bef8:	ror	sl, sl, #31
    befc:	add	r4, r9, r4
    bf00:	and	lr, lr, r1
    bf04:	ror	r9, r1, #2
    bf08:	movw	r1, #31129	; 0x7999
    bf0c:	movt	r1, #23170	; 0x5a82
    bf10:	str	sl, [sp, #32]
    bf14:	eor	lr, lr, r3
    bf18:	add	r1, sl, r1
    bf1c:	eor	ip, ip, r0
    bf20:	ldr	sl, [sp, #52]	; 0x34
    bf24:	eor	r0, r6, r7
    bf28:	add	r4, r4, r2
    bf2c:	ldr	r7, [sp, #40]	; 0x28
    bf30:	eor	r2, r9, r5
    bf34:	ldr	r6, [sp, #44]	; 0x2c
    bf38:	add	r4, r4, lr
    bf3c:	ldr	lr, [sp, #64]	; 0x40
    bf40:	eor	ip, ip, r7
    bf44:	and	r2, r2, fp
    bf48:	ldr	r7, [sp, #56]	; 0x38
    bf4c:	eor	r0, r0, sl
    bf50:	add	r4, r4, fp, ror #27
    bf54:	add	r3, r1, r3
    bf58:	ror	fp, fp, #2
    bf5c:	eor	r2, r2, r5
    bf60:	eor	r1, lr, r8
    bf64:	ldr	sl, [sp, #68]	; 0x44
    bf68:	eor	r0, r0, r6
    bf6c:	ldr	r6, [sp, #28]
    bf70:	add	r8, r3, r2
    bf74:	eor	r1, r1, r7
    bf78:	eor	r3, fp, r9
    bf7c:	ldr	r7, [sp, #32]
    bf80:	add	r8, r8, r4, ror #27
    bf84:	eor	r2, sl, r6
    bf88:	and	r3, r3, r4
    bf8c:	ldr	sl, [sp, #60]	; 0x3c
    bf90:	ror	r4, r4, #2
    bf94:	ror	r0, r0, #31
    bf98:	eor	r1, r1, r7
    bf9c:	movw	r6, #31129	; 0x7999
    bfa0:	eor	r7, r4, fp
    bfa4:	movt	r6, #23170	; 0x5a82
    bfa8:	ror	ip, ip, #31
    bfac:	eor	r2, r2, sl
    bfb0:	add	r6, r0, r6
    bfb4:	and	r7, r7, r8
    bfb8:	movw	lr, #31129	; 0x7999
    bfbc:	movt	lr, #23170	; 0x5a82
    bfc0:	eor	r2, r2, ip
    bfc4:	ldr	sl, [sp, #64]	; 0x40
    bfc8:	eor	r7, r7, fp
    bfcc:	str	r2, [sp, #28]
    bfd0:	add	lr, ip, lr
    bfd4:	ldr	r2, [sp, #72]	; 0x48
    bfd8:	add	r6, r6, r9
    bfdc:	eor	r3, r3, r9
    bfe0:	add	lr, lr, r5
    bfe4:	add	r6, r6, r7
    bfe8:	ldr	r7, [sp, #28]
    bfec:	add	lr, lr, r3
    bff0:	eor	r3, r2, sl
    bff4:	ldr	r2, [sp, #36]	; 0x24
    bff8:	ror	r5, r8, #2
    bffc:	ror	r1, r1, #31
    c000:	add	lr, lr, r8, ror #27
    c004:	movw	r8, #31129	; 0x7999
    c008:	movt	r8, #23170	; 0x5a82
    c00c:	eor	r3, r3, r2
    c010:	add	r8, r1, r8
    c014:	ror	r2, r7, #31
    c018:	ldr	sl, [sp, #24]
    c01c:	ldr	r7, [sp, #68]	; 0x44
    c020:	eor	r9, r5, r4
    c024:	add	r8, r8, fp
    c028:	ldr	fp, [sp, #40]	; 0x28
    c02c:	and	r9, r9, lr
    c030:	eor	sl, sl, r7
    c034:	eor	r9, r9, r4
    c038:	eor	sl, sl, fp
    c03c:	movw	r7, #60321	; 0xeba1
    c040:	movt	r7, #28377	; 0x6ed9
    c044:	eor	sl, sl, r1
    c048:	add	r8, r8, r9
    c04c:	str	sl, [sp, #28]
    c050:	add	r7, r2, r7
    c054:	ldr	r9, [sp, #48]	; 0x30
    c058:	add	r6, r6, lr, ror #27
    c05c:	ldr	sl, [sp, #72]	; 0x48
    c060:	ror	lr, lr, #2
    c064:	add	r7, r7, r4
    c068:	str	r7, [sp, #68]	; 0x44
    c06c:	eor	fp, lr, r5
    c070:	ldr	r7, [sp, #44]	; 0x2c
    c074:	eor	r9, r9, sl
    c078:	ldr	sl, [sp, #68]	; 0x44
    c07c:	eor	fp, fp, r6
    c080:	eor	r3, r3, r0
    c084:	eor	r9, r9, r7
    c088:	add	r7, sl, fp
    c08c:	ldr	sl, [sp, #28]
    c090:	ror	r3, r3, #31
    c094:	movw	r4, #60321	; 0xeba1
    c098:	movt	r4, #28377	; 0x6ed9
    c09c:	eor	r9, r9, r2
    c0a0:	add	r4, r3, r4
    c0a4:	str	r9, [sp, #68]	; 0x44
    c0a8:	ror	sl, sl, #31
    c0ac:	ldr	r9, [sp, #52]	; 0x34
    c0b0:	add	r4, r4, r5
    c0b4:	str	sl, [sp, #28]
    c0b8:	add	r8, r8, r6, ror #27
    c0bc:	ldr	sl, [sp, #24]
    c0c0:	ror	r6, r6, #2
    c0c4:	ldr	r5, [sp, #32]
    c0c8:	eor	fp, r6, lr
    c0cc:	eor	r9, r9, sl
    c0d0:	str	r4, [sp, #64]	; 0x40
    c0d4:	eor	sl, r9, r5
    c0d8:	ldr	r5, [sp, #68]	; 0x44
    c0dc:	ldr	r9, [sp, #64]	; 0x40
    c0e0:	eor	fp, fp, r8
    c0e4:	add	r7, r7, r8, ror #27
    c0e8:	eor	sl, sl, r3
    c0ec:	add	fp, r9, fp
    c0f0:	ror	r5, r5, #31
    c0f4:	ldr	r9, [sp, #56]	; 0x38
    c0f8:	ror	r8, r8, #2
    c0fc:	str	r5, [sp, #24]
    c100:	movw	r4, #60321	; 0xeba1
    c104:	ldr	r5, [sp, #48]	; 0x30
    c108:	movt	r4, #28377	; 0x6ed9
    c10c:	str	fp, [sp, #64]	; 0x40
    c110:	eor	r9, r9, r5
    c114:	str	r9, [sp, #48]	; 0x30
    c118:	ldr	r9, [sp, #64]	; 0x40
    c11c:	str	sl, [sp, #68]	; 0x44
    c120:	ldr	sl, [sp, #48]	; 0x30
    c124:	add	r5, r9, r7, ror #27
    c128:	ldr	r9, [sp, #28]
    c12c:	eor	sl, sl, ip
    c130:	ldr	fp, [sp, #28]
    c134:	eor	r9, sl, r9
    c138:	ldr	sl, [sp, #68]	; 0x44
    c13c:	add	r4, fp, r4
    c140:	str	r9, [sp, #64]	; 0x40
    c144:	eor	fp, r8, r6
    c148:	ldr	r9, [sp, #60]	; 0x3c
    c14c:	ror	sl, sl, #31
    c150:	str	sl, [sp, #48]	; 0x30
    c154:	ldr	sl, [sp, #52]	; 0x34
    c158:	eor	fp, fp, r7
    c15c:	add	lr, r4, lr
    c160:	ror	r7, r7, #2
    c164:	add	lr, lr, fp
    c168:	eor	r9, r9, sl
    c16c:	ldr	fp, [sp, #24]
    c170:	eor	sl, r9, r0
    c174:	movw	r4, #60321	; 0xeba1
    c178:	ldr	r9, [sp, #64]	; 0x40
    c17c:	movt	r4, #28377	; 0x6ed9
    c180:	add	lr, lr, r5, ror #27
    c184:	add	r4, fp, r4
    c188:	eor	fp, r7, r8
    c18c:	eor	fp, fp, r5
    c190:	add	r6, r4, r6
    c194:	add	r6, r6, fp
    c198:	ror	r9, r9, #31
    c19c:	ldr	fp, [sp, #48]	; 0x30
    c1a0:	ror	r5, r5, #2
    c1a4:	str	r9, [sp, #52]	; 0x34
    c1a8:	movw	r4, #60321	; 0xeba1
    c1ac:	ldr	r9, [sp, #24]
    c1b0:	movt	r4, #28377	; 0x6ed9
    c1b4:	add	r4, fp, r4
    c1b8:	eor	fp, r5, r7
    c1bc:	eor	sl, sl, r9
    c1c0:	str	sl, [sp, #68]	; 0x44
    c1c4:	ldr	r9, [sp, #56]	; 0x38
    c1c8:	add	r8, r4, r8
    c1cc:	ldr	sl, [sp, #36]	; 0x24
    c1d0:	eor	fp, fp, lr
    c1d4:	add	fp, r8, fp
    c1d8:	ldr	r8, [sp, #68]	; 0x44
    c1dc:	eor	sl, sl, r9
    c1e0:	movw	r4, #60321	; 0xeba1
    c1e4:	eor	r9, sl, r1
    c1e8:	ldr	sl, [sp, #52]	; 0x34
    c1ec:	movt	r4, #28377	; 0x6ed9
    c1f0:	ror	r8, r8, #31
    c1f4:	add	r4, sl, r4
    c1f8:	str	r8, [sp, #56]	; 0x38
    c1fc:	ldr	sl, [sp, #40]	; 0x28
    c200:	add	r6, r6, lr, ror #27
    c204:	ldr	r8, [sp, #60]	; 0x3c
    c208:	ror	lr, lr, #2
    c20c:	str	fp, [sp, #64]	; 0x40
    c210:	eor	fp, lr, r5
    c214:	eor	sl, sl, r8
    c218:	str	sl, [sp, #60]	; 0x3c
    c21c:	ldr	sl, [sp, #48]	; 0x30
    c220:	eor	fp, fp, r6
    c224:	add	r7, r4, r7
    c228:	movw	r4, #60321	; 0xeba1
    c22c:	eor	r9, r9, sl
    c230:	str	r9, [sp, #68]	; 0x44
    c234:	ldr	r9, [sp, #64]	; 0x40
    c238:	add	r7, r7, fp
    c23c:	ldr	sl, [sp, #60]	; 0x3c
    c240:	movt	r4, #28377	; 0x6ed9
    c244:	add	r8, r9, r6, ror #27
    c248:	ldr	r9, [sp, #52]	; 0x34
    c24c:	eor	sl, sl, r2
    c250:	ldr	fp, [sp, #56]	; 0x38
    c254:	eor	r9, sl, r9
    c258:	ldr	sl, [sp, #68]	; 0x44
    c25c:	str	r9, [sp, #64]	; 0x40
    c260:	ror	r6, r6, #2
    c264:	ldr	r9, [sp, #44]	; 0x2c
    c268:	add	r4, fp, r4
    c26c:	ror	sl, sl, #31
    c270:	str	sl, [sp, #60]	; 0x3c
    c274:	ldr	sl, [sp, #36]	; 0x24
    c278:	eor	fp, r6, lr
    c27c:	eor	fp, fp, r8
    c280:	add	r5, r4, r5
    c284:	eor	r9, r9, sl
    c288:	ldr	sl, [sp, #64]	; 0x40
    c28c:	add	r5, r5, fp
    c290:	ldr	fp, [sp, #60]	; 0x3c
    c294:	eor	r9, r9, r3
    c298:	movw	r4, #60321	; 0xeba1
    c29c:	ror	sl, sl, #31
    c2a0:	str	sl, [sp, #36]	; 0x24
    c2a4:	ldr	sl, [sp, #56]	; 0x38
    c2a8:	movt	r4, #28377	; 0x6ed9
    c2ac:	add	r4, fp, r4
    c2b0:	add	r7, r7, r8, ror #27
    c2b4:	eor	r9, r9, sl
    c2b8:	ldr	sl, [sp, #40]	; 0x28
    c2bc:	str	r9, [sp, #64]	; 0x40
    c2c0:	add	r4, r4, lr
    c2c4:	ldr	r9, [sp, #32]
    c2c8:	ror	r8, r8, #2
    c2cc:	ldr	lr, [sp, #28]
    c2d0:	eor	fp, r8, r6
    c2d4:	str	r4, [sp, #68]	; 0x44
    c2d8:	eor	r9, r9, sl
    c2dc:	eor	sl, r9, lr
    c2e0:	ldr	r9, [sp, #68]	; 0x44
    c2e4:	eor	fp, fp, r7
    c2e8:	movw	r4, #60321	; 0xeba1
    c2ec:	add	lr, r9, fp
    c2f0:	ldr	r9, [sp, #64]	; 0x40
    c2f4:	ldr	fp, [sp, #36]	; 0x24
    c2f8:	movt	r4, #28377	; 0x6ed9
    c2fc:	add	r5, r5, r7, ror #27
    c300:	ror	r7, r7, #2
    c304:	ror	r9, r9, #31
    c308:	str	r9, [sp, #40]	; 0x28
    c30c:	ldr	r9, [sp, #44]	; 0x2c
    c310:	add	r4, fp, r4
    c314:	add	r4, r4, r6
    c318:	eor	fp, r7, r8
    c31c:	eor	r9, ip, r9
    c320:	str	r9, [sp, #64]	; 0x40
    c324:	ldr	r9, [sp, #60]	; 0x3c
    c328:	eor	fp, fp, r5
    c32c:	ldr	r6, [sp, #24]
    c330:	add	lr, lr, r5, ror #27
    c334:	eor	sl, sl, r9
    c338:	str	sl, [sp, #44]	; 0x2c
    c33c:	ldr	sl, [sp, #64]	; 0x40
    c340:	ror	r5, r5, #2
    c344:	str	r4, [sp, #68]	; 0x44
    c348:	movw	r4, #60321	; 0xeba1
    c34c:	eor	r9, sl, r6
    c350:	ldr	sl, [sp, #68]	; 0x44
    c354:	movt	r4, #28377	; 0x6ed9
    c358:	eor	ip, r1, ip
    c35c:	add	r6, sl, fp
    c360:	ldr	sl, [sp, #36]	; 0x24
    c364:	ldr	fp, [sp, #40]	; 0x28
    c368:	add	r6, r6, lr, ror #27
    c36c:	eor	r9, r9, sl
    c370:	str	r9, [sp, #64]	; 0x40
    c374:	ldr	r9, [sp, #44]	; 0x2c
    c378:	add	r4, fp, r4
    c37c:	eor	fp, r5, r7
    c380:	add	r4, r4, r8
    c384:	eor	fp, fp, lr
    c388:	ror	r8, lr, #2
    c38c:	ror	r9, r9, #31
    c390:	str	r9, [sp, #44]	; 0x2c
    c394:	ldr	r9, [sp, #32]
    c398:	add	r4, r4, fp
    c39c:	ldr	fp, [sp, #44]	; 0x2c
    c3a0:	movw	lr, #60321	; 0xeba1
    c3a4:	eor	sl, r0, r9
    c3a8:	ldr	r9, [sp, #48]	; 0x30
    c3ac:	movt	lr, #28377	; 0x6ed9
    c3b0:	add	r4, r4, r6, ror #27
    c3b4:	eor	sl, sl, r9
    c3b8:	ldr	r9, [sp, #64]	; 0x40
    c3bc:	add	lr, fp, lr
    c3c0:	eor	fp, r8, r5
    c3c4:	eor	fp, fp, r6
    c3c8:	add	lr, lr, r7
    c3cc:	ror	r9, r9, #31
    c3d0:	str	r9, [sp, #32]
    c3d4:	ldr	r9, [sp, #40]	; 0x28
    c3d8:	add	lr, lr, fp
    c3dc:	ldr	r7, [sp, #52]	; 0x34
    c3e0:	ror	r6, r6, #2
    c3e4:	ldr	fp, [sp, #32]
    c3e8:	eor	sl, sl, r9
    c3ec:	movw	r9, #60321	; 0xeba1
    c3f0:	movt	r9, #28377	; 0x6ed9
    c3f4:	add	r9, fp, r9
    c3f8:	eor	ip, ip, r7
    c3fc:	eor	r7, r6, r8
    c400:	ldr	fp, [sp, #56]	; 0x38
    c404:	eor	r7, r7, r4
    c408:	ror	sl, sl, #31
    c40c:	add	r5, r9, r5
    c410:	str	sl, [sp, #64]	; 0x40
    c414:	ldr	sl, [sp, #44]	; 0x2c
    c418:	eor	r0, r2, r0
    c41c:	ldr	r9, [sp, #32]
    c420:	add	r5, r5, r7
    c424:	ldr	r7, [sp, #64]	; 0x40
    c428:	add	lr, lr, r4, ror #27
    c42c:	eor	ip, ip, sl
    c430:	ror	r4, r4, #2
    c434:	eor	r0, r0, fp
    c438:	movw	sl, #60321	; 0xeba1
    c43c:	movt	sl, #28377	; 0x6ed9
    c440:	eor	fp, r4, r6
    c444:	add	sl, r7, sl
    c448:	eor	r0, r0, r9
    c44c:	eor	fp, fp, lr
    c450:	ror	ip, ip, #31
    c454:	add	r8, sl, r8
    c458:	str	ip, [sp, #68]	; 0x44
    c45c:	ldr	sl, [sp, #60]	; 0x3c
    c460:	eor	r1, r3, r1
    c464:	add	r8, r8, fp
    c468:	ror	r0, r0, #31
    c46c:	ldr	fp, [sp, #68]	; 0x44
    c470:	add	r5, r5, lr, ror #27
    c474:	str	r0, [sp, #72]	; 0x48
    c478:	ror	lr, lr, #2
    c47c:	ldr	r0, [sp, #64]	; 0x40
    c480:	eor	r1, r1, sl
    c484:	movw	ip, #60321	; 0xeba1
    c488:	movt	ip, #28377	; 0x6ed9
    c48c:	add	ip, fp, ip
    c490:	eor	r7, lr, r4
    c494:	ldr	fp, [sp, #72]	; 0x48
    c498:	eor	r1, r1, r0
    c49c:	ldr	r9, [sp, #28]
    c4a0:	add	r8, r8, r5, ror #27
    c4a4:	eor	r7, r7, r5
    c4a8:	ldr	sl, [sp, #36]	; 0x24
    c4ac:	ror	r5, r5, #2
    c4b0:	movw	r0, #60321	; 0xeba1
    c4b4:	movt	r0, #28377	; 0x6ed9
    c4b8:	eor	r2, r9, r2
    c4bc:	add	r0, fp, r0
    c4c0:	eor	r9, r5, lr
    c4c4:	add	r6, ip, r6
    c4c8:	ror	r1, r1, #31
    c4cc:	ldr	ip, [sp, #24]
    c4d0:	eor	r9, r9, r8
    c4d4:	str	r1, [sp, #80]	; 0x50
    c4d8:	eor	r2, r2, sl
    c4dc:	ldr	r1, [sp, #68]	; 0x44
    c4e0:	add	r6, r6, r7
    c4e4:	add	r4, r0, r4
    c4e8:	ldr	r7, [sp, #40]	; 0x28
    c4ec:	eor	r3, ip, r3
    c4f0:	eor	r2, r2, r1
    c4f4:	add	r4, r4, r9
    c4f8:	ldr	r9, [sp, #80]	; 0x50
    c4fc:	add	r6, r6, r8, ror #27
    c500:	eor	r3, r3, r7
    c504:	ror	r8, r8, #2
    c508:	movw	r1, #60321	; 0xeba1
    c50c:	movt	r1, #28377	; 0x6ed9
    c510:	eor	ip, r8, r5
    c514:	add	r1, r9, r1
    c518:	eor	r3, r3, fp
    c51c:	ror	r2, r2, #31
    c520:	str	r2, [sp, #84]	; 0x54
    c524:	ldr	sl, [sp, #48]	; 0x30
    c528:	eor	ip, ip, r6
    c52c:	ldr	fp, [sp, #28]
    c530:	add	lr, r1, lr
    c534:	ldr	r7, [sp, #84]	; 0x54
    c538:	movw	r0, #60321	; 0xeba1
    c53c:	ldr	r1, [sp, #44]	; 0x2c
    c540:	movt	r0, #28377	; 0x6ed9
    c544:	eor	r2, sl, fp
    c548:	add	r0, r7, r0
    c54c:	ldr	fp, [sp, #52]	; 0x34
    c550:	add	lr, lr, ip
    c554:	ror	r3, r3, #31
    c558:	ldr	ip, [sp, #24]
    c55c:	str	r3, [sp, #28]
    c560:	add	r4, r4, r6, ror #27
    c564:	eor	r2, r2, r1
    c568:	ror	r6, r6, #2
    c56c:	ldr	r1, [sp, #28]
    c570:	add	r5, r0, r5
    c574:	ldr	r0, [sp, #32]
    c578:	eor	sl, r6, r8
    c57c:	eor	r2, r2, r9
    c580:	movw	r3, #60321	; 0xeba1
    c584:	eor	r9, fp, ip
    c588:	movt	r3, #28377	; 0x6ed9
    c58c:	add	lr, lr, r4, ror #27
    c590:	eor	sl, sl, r4
    c594:	add	r3, r1, r3
    c598:	ror	r4, r4, #2
    c59c:	eor	r9, r9, r0
    c5a0:	eor	r1, r4, r6
    c5a4:	ror	r2, r2, #31
    c5a8:	eor	r9, r9, r7
    c5ac:	str	r2, [sp, #24]
    c5b0:	add	r8, r3, r8
    c5b4:	ldr	r7, [sp, #48]	; 0x30
    c5b8:	eor	r1, r1, lr
    c5bc:	ldr	r3, [sp, #56]	; 0x38
    c5c0:	add	r5, r5, sl
    c5c4:	ldr	fp, [sp, #24]
    c5c8:	add	r8, r8, r1
    c5cc:	ldr	ip, [sp, #64]	; 0x40
    c5d0:	eor	sl, r3, r7
    c5d4:	ldr	r1, [sp, #28]
    c5d8:	movw	r2, #60321	; 0xeba1
    c5dc:	movt	r2, #28377	; 0x6ed9
    c5e0:	add	r5, r5, lr, ror #27
    c5e4:	add	r2, fp, r2
    c5e8:	ror	lr, lr, #2
    c5ec:	eor	sl, sl, ip
    c5f0:	ldr	r7, [sp, #52]	; 0x34
    c5f4:	eor	r0, lr, r4
    c5f8:	ror	r9, r9, #31
    c5fc:	add	r6, r2, r6
    c600:	str	r9, [sp, #48]	; 0x30
    c604:	ldr	r2, [sp, #60]	; 0x3c
    c608:	eor	sl, sl, r1
    c60c:	eor	r0, r0, r5
    c610:	ldr	fp, [sp, #48]	; 0x30
    c614:	ldr	ip, [sp, #68]	; 0x44
    c618:	add	r8, r8, r5, ror #27
    c61c:	eor	r9, r2, r7
    c620:	ror	r5, r5, #2
    c624:	add	r6, r6, r0
    c628:	ror	sl, sl, #31
    c62c:	ldr	r0, [sp, #24]
    c630:	movw	r3, #60321	; 0xeba1
    c634:	str	sl, [sp, #52]	; 0x34
    c638:	movt	r3, #28377	; 0x6ed9
    c63c:	add	r3, fp, r3
    c640:	eor	r1, r5, lr
    c644:	ldr	r7, [sp, #52]	; 0x34
    c648:	eor	r9, r9, ip
    c64c:	add	r4, r3, r4
    c650:	eor	r1, r1, r8
    c654:	eor	r9, r9, r0
    c658:	movw	ip, #48348	; 0xbcdc
    c65c:	movt	ip, #36635	; 0x8f1b
    c660:	add	r6, r6, r8, ror #27
    c664:	ldr	r3, [sp, #36]	; 0x24
    c668:	ror	r8, r8, #2
    c66c:	add	ip, r7, ip
    c670:	add	r1, r4, r1
    c674:	ldr	r4, [sp, #56]	; 0x38
    c678:	orr	r2, r6, r8
    c67c:	ldr	fp, [sp, #40]	; 0x28
    c680:	ror	r9, r9, #31
    c684:	add	lr, ip, lr
    c688:	str	r9, [sp, #56]	; 0x38
    c68c:	ldr	ip, [sp, #60]	; 0x3c
    c690:	eor	sl, r3, r4
    c694:	ldr	r9, [sp, #72]	; 0x48
    c698:	and	r4, r6, r8
    c69c:	ldr	r3, [sp, #48]	; 0x30
    c6a0:	and	r2, r2, r5
    c6a4:	add	r1, r1, r6, ror #27
    c6a8:	orr	r2, r2, r4
    c6ac:	ror	r6, r6, #2
    c6b0:	ldr	r4, [sp, #56]	; 0x38
    c6b4:	eor	sl, sl, r9
    c6b8:	eor	r9, fp, ip
    c6bc:	ldr	fp, [sp, #80]	; 0x50
    c6c0:	orr	r7, r1, r6
    c6c4:	ldr	ip, [sp, #52]	; 0x34
    c6c8:	eor	sl, sl, r3
    c6cc:	movw	r0, #48348	; 0xbcdc
    c6d0:	movt	r0, #36635	; 0x8f1b
    c6d4:	and	r3, r1, r6
    c6d8:	add	r0, r4, r0
    c6dc:	and	r7, r7, r8
    c6e0:	eor	r9, r9, fp
    c6e4:	add	r5, r0, r5
    c6e8:	add	lr, lr, r2
    c6ec:	orr	r7, r7, r3
    c6f0:	eor	r9, r9, ip
    c6f4:	ror	sl, sl, #31
    c6f8:	str	sl, [sp, #60]	; 0x3c
    c6fc:	ldr	r0, [sp, #44]	; 0x2c
    c700:	add	lr, lr, r1, ror #27
    c704:	ldr	r3, [sp, #36]	; 0x24
    c708:	ror	r1, r1, #2
    c70c:	ldr	r4, [sp, #60]	; 0x3c
    c710:	add	r7, r5, r7
    c714:	ldr	r5, [sp, #84]	; 0x54
    c718:	orr	r2, lr, r1
    c71c:	eor	sl, r0, r3
    c720:	ror	r9, r9, #31
    c724:	movw	fp, #48348	; 0xbcdc
    c728:	str	r9, [sp, #36]	; 0x24
    c72c:	movt	fp, #36635	; 0x8f1b
    c730:	ldr	r9, [sp, #56]	; 0x38
    c734:	and	r3, lr, r1
    c738:	add	fp, r4, fp
    c73c:	and	r2, r2, r6
    c740:	eor	sl, sl, r5
    c744:	orr	r2, r2, r3
    c748:	add	r8, fp, r8
    c74c:	ldr	r3, [sp, #40]	; 0x28
    c750:	eor	sl, sl, r9
    c754:	ldr	fp, [sp, #32]
    c758:	add	r7, r7, lr, ror #27
    c75c:	ldr	r4, [sp, #36]	; 0x24
    c760:	ror	lr, lr, #2
    c764:	ldr	r5, [sp, #28]
    c768:	orr	ip, r7, lr
    c76c:	eor	r9, fp, r3
    c770:	ror	sl, sl, #31
    c774:	movw	r0, #48348	; 0xbcdc
    c778:	str	sl, [sp, #40]	; 0x28
    c77c:	movt	r0, #36635	; 0x8f1b
    c780:	ldr	sl, [sp, #60]	; 0x3c
    c784:	add	r0, r4, r0
    c788:	add	r8, r8, r2
    c78c:	and	r4, r7, lr
    c790:	and	ip, ip, r1
    c794:	eor	r9, r9, r5
    c798:	add	r8, r8, r7, ror #27
    c79c:	orr	ip, ip, r4
    c7a0:	ror	r7, r7, #2
    c7a4:	add	r6, r0, r6
    c7a8:	eor	r9, r9, sl
    c7ac:	ldr	r0, [sp, #40]	; 0x28
    c7b0:	orr	r3, r8, r7
    c7b4:	ldr	fp, [sp, #64]	; 0x40
    c7b8:	add	r6, r6, ip
    c7bc:	movw	r5, #48348	; 0xbcdc
    c7c0:	ldr	ip, [sp, #44]	; 0x2c
    c7c4:	movt	r5, #36635	; 0x8f1b
    c7c8:	ldr	r2, [sp, #24]
    c7cc:	add	r5, r0, r5
    c7d0:	and	r3, r3, lr
    c7d4:	and	r0, r8, r7
    c7d8:	ror	r9, r9, #31
    c7dc:	str	r9, [sp, #44]	; 0x2c
    c7e0:	eor	sl, fp, ip
    c7e4:	ldr	r9, [sp, #36]	; 0x24
    c7e8:	orr	r3, r3, r0
    c7ec:	ldr	r0, [sp, #44]	; 0x2c
    c7f0:	eor	sl, sl, r2
    c7f4:	ldr	ip, [sp, #32]
    c7f8:	movw	r2, #48348	; 0xbcdc
    c7fc:	ldr	fp, [sp, #68]	; 0x44
    c800:	movt	r2, #36635	; 0x8f1b
    c804:	add	r6, r6, r8, ror #27
    c808:	add	r5, r5, r1
    c80c:	ror	r8, r8, #2
    c810:	add	r2, r0, r2
    c814:	ldr	r1, [sp, #48]	; 0x30
    c818:	eor	sl, sl, r9
    c81c:	orr	r4, r6, r8
    c820:	eor	r9, fp, ip
    c824:	add	lr, r2, lr
    c828:	ldr	r2, [sp, #40]	; 0x28
    c82c:	and	fp, r6, r8
    c830:	and	r4, r4, r7
    c834:	eor	r9, r9, r1
    c838:	ror	sl, sl, #31
    c83c:	str	sl, [sp, #32]
    c840:	add	r3, r5, r3
    c844:	ldr	sl, [sp, #64]	; 0x40
    c848:	orr	fp, r4, fp
    c84c:	ldr	ip, [sp, #32]
    c850:	eor	r9, r9, r2
    c854:	ldr	r4, [sp, #72]	; 0x48
    c858:	add	r3, r3, r6, ror #27
    c85c:	add	fp, lr, fp
    c860:	ror	r6, r6, #2
    c864:	ldr	lr, [sp, #52]	; 0x34
    c868:	movw	r1, #48348	; 0xbcdc
    c86c:	movt	r1, #36635	; 0x8f1b
    c870:	orr	r0, r3, r6
    c874:	eor	r5, r4, sl
    c878:	add	r1, ip, r1
    c87c:	ror	r9, r9, #31
    c880:	str	r9, [sp, #64]	; 0x40
    c884:	and	r2, r3, r6
    c888:	ldr	r9, [sp, #68]	; 0x44
    c88c:	and	r0, r0, r8
    c890:	eor	r5, r5, lr
    c894:	add	r7, r1, r7
    c898:	ldr	lr, [sp, #64]	; 0x40
    c89c:	ldr	r1, [sp, #80]	; 0x50
    c8a0:	orr	r0, r0, r2
    c8a4:	movw	r2, #48348	; 0xbcdc
    c8a8:	movt	r2, #36635	; 0x8f1b
    c8ac:	add	fp, fp, r3, ror #27
    c8b0:	eor	ip, r1, r9
    c8b4:	ror	r3, r3, #2
    c8b8:	ldr	sl, [sp, #44]	; 0x2c
    c8bc:	add	r2, lr, r2
    c8c0:	ldr	r1, [sp, #56]	; 0x38
    c8c4:	orr	r4, fp, r3
    c8c8:	add	r8, r2, r8
    c8cc:	ldr	r2, [sp, #32]
    c8d0:	add	r7, r7, r0
    c8d4:	eor	r5, r5, sl
    c8d8:	and	r0, fp, r3
    c8dc:	and	r4, r4, r6
    c8e0:	eor	ip, ip, r1
    c8e4:	orr	r4, r4, r0
    c8e8:	eor	ip, ip, r2
    c8ec:	ror	r5, r5, #31
    c8f0:	add	r4, r8, r4
    c8f4:	str	r5, [sp, #68]	; 0x44
    c8f8:	ror	ip, ip, #31
    c8fc:	ldr	r5, [sp, #84]	; 0x54
    c900:	add	sl, r7, fp, ror #27
    c904:	ldr	r8, [sp, #72]	; 0x48
    c908:	ror	fp, fp, #2
    c90c:	str	ip, [sp, #72]	; 0x48
    c910:	movw	r2, #48348	; 0xbcdc
    c914:	ldr	ip, [sp, #60]	; 0x3c
    c918:	eor	r7, r5, r8
    c91c:	ldr	r9, [sp, #68]	; 0x44
    c920:	movt	r2, #36635	; 0x8f1b
    c924:	eor	r7, r7, ip
    c928:	ldr	r8, [sp, #80]	; 0x50
    c92c:	orr	r0, sl, fp
    c930:	add	r2, r9, r2
    c934:	eor	r7, r7, lr
    c938:	ldr	r9, [sp, #72]	; 0x48
    c93c:	ldr	lr, [sp, #28]
    c940:	and	r1, sl, fp
    c944:	add	r6, r2, r6
    c948:	and	r0, r0, r3
    c94c:	movw	r2, #48348	; 0xbcdc
    c950:	movt	r2, #36635	; 0x8f1b
    c954:	add	r2, r9, r2
    c958:	orr	r0, r0, r1
    c95c:	eor	r1, lr, r8
    c960:	ldr	lr, [sp, #36]	; 0x24
    c964:	add	r4, r4, sl, ror #27
    c968:	add	r3, r2, r3
    c96c:	ror	sl, sl, #2
    c970:	ldr	r2, [sp, #68]	; 0x44
    c974:	orr	r5, r4, sl
    c978:	eor	r1, r1, lr
    c97c:	and	ip, r4, sl
    c980:	add	r0, r6, r0
    c984:	and	r5, r5, fp
    c988:	ldr	r6, [sp, #24]
    c98c:	ror	r7, r7, #31
    c990:	eor	r1, r1, r2
    c994:	str	r7, [sp, #80]	; 0x50
    c998:	add	r0, r0, r4, ror #27
    c99c:	ldr	r7, [sp, #84]	; 0x54
    c9a0:	ror	r4, r4, #2
    c9a4:	ldr	r8, [sp, #80]	; 0x50
    c9a8:	orr	r5, r5, ip
    c9ac:	ldr	r9, [sp, #40]	; 0x28
    c9b0:	orr	lr, r0, r4
    c9b4:	eor	ip, r6, r7
    c9b8:	add	r5, r3, r5
    c9bc:	ror	r1, r1, #31
    c9c0:	movw	r3, #48348	; 0xbcdc
    c9c4:	str	r1, [sp, #84]	; 0x54
    c9c8:	movt	r3, #36635	; 0x8f1b
    c9cc:	ldr	r1, [sp, #72]	; 0x48
    c9d0:	and	r7, r0, r4
    c9d4:	add	r3, r8, r3
    c9d8:	and	lr, lr, sl
    c9dc:	eor	ip, ip, r9
    c9e0:	add	r5, r5, r0, ror #27
    c9e4:	ldr	r8, [sp, #28]
    c9e8:	ror	r0, r0, #2
    c9ec:	add	fp, r3, fp
    c9f0:	ldr	r2, [sp, #48]	; 0x30
    c9f4:	ldr	r9, [sp, #84]	; 0x54
    c9f8:	orr	lr, lr, r7
    c9fc:	eor	ip, ip, r1
    ca00:	orr	r6, r5, r0
    ca04:	add	lr, fp, lr
    ca08:	movw	r7, #48348	; 0xbcdc
    ca0c:	ldr	fp, [sp, #44]	; 0x2c
    ca10:	movt	r7, #36635	; 0x8f1b
    ca14:	eor	r3, r2, r8
    ca18:	add	r7, r9, r7
    ca1c:	and	r2, r5, r0
    ca20:	and	r6, r6, r4
    ca24:	ror	ip, ip, #31
    ca28:	str	ip, [sp, #28]
    ca2c:	ldr	ip, [sp, #80]	; 0x50
    ca30:	add	sl, r7, sl
    ca34:	orr	r6, r6, r2
    ca38:	eor	r3, r3, fp
    ca3c:	add	lr, lr, r5, ror #27
    ca40:	ldr	r2, [sp, #52]	; 0x34
    ca44:	ror	r5, r5, #2
    ca48:	ldr	r7, [sp, #28]
    ca4c:	eor	r3, r3, ip
    ca50:	add	ip, sl, r6
    ca54:	ldr	r6, [sp, #24]
    ca58:	orr	r1, lr, r5
    ca5c:	movw	sl, #48348	; 0xbcdc
    ca60:	movt	sl, #36635	; 0x8f1b
    ca64:	eor	fp, r2, r6
    ca68:	add	sl, r7, sl
    ca6c:	and	r6, lr, r5
    ca70:	and	r1, r1, r0
    ca74:	ldr	r8, [sp, #32]
    ca78:	add	r4, sl, r4
    ca7c:	ldr	r9, [sp, #56]	; 0x38
    ca80:	ror	r3, r3, #31
    ca84:	ldr	sl, [sp, #48]	; 0x30
    ca88:	orr	r1, r1, r6
    ca8c:	str	r3, [sp, #24]
    ca90:	add	ip, ip, lr, ror #27
    ca94:	ldr	r7, [sp, #64]	; 0x40
    ca98:	ror	lr, lr, #2
    ca9c:	add	r1, r4, r1
    caa0:	ldr	r4, [sp, #24]
    caa4:	orr	r3, ip, lr
    caa8:	eor	fp, fp, r8
    caac:	movw	r6, #48348	; 0xbcdc
    cab0:	eor	r8, r9, sl
    cab4:	movt	r6, #36635	; 0x8f1b
    cab8:	ldr	r9, [sp, #28]
    cabc:	ldr	r2, [sp, #84]	; 0x54
    cac0:	add	r6, r4, r6
    cac4:	and	r3, r3, r5
    cac8:	and	r4, ip, lr
    cacc:	eor	r8, r8, r7
    cad0:	add	r0, r6, r0
    cad4:	orr	r3, r3, r4
    cad8:	eor	r8, r8, r9
    cadc:	ldr	r4, [sp, #52]	; 0x34
    cae0:	eor	fp, fp, r2
    cae4:	add	r2, r0, r3
    cae8:	ldr	r3, [sp, #60]	; 0x3c
    caec:	add	r1, r1, ip, ror #27
    caf0:	ror	r8, r8, #31
    caf4:	ror	ip, ip, #2
    caf8:	str	r8, [sp, #48]	; 0x30
    cafc:	ldr	r6, [sp, #68]	; 0x44
    cb00:	ror	fp, fp, #31
    cb04:	orr	r0, r1, ip
    cb08:	eor	sl, r3, r4
    cb0c:	ldr	r7, [sp, #24]
    cb10:	movw	r9, #48348	; 0xbcdc
    cb14:	movt	r9, #36635	; 0x8f1b
    cb18:	and	r3, r1, ip
    cb1c:	add	r9, fp, r9
    cb20:	and	r0, r0, lr
    cb24:	eor	sl, sl, r6
    cb28:	add	r2, r2, r1, ror #27
    cb2c:	ldr	r6, [sp, #56]	; 0x38
    cb30:	ror	r1, r1, #2
    cb34:	orr	r0, r0, r3
    cb38:	add	r9, r9, r5
    cb3c:	eor	sl, sl, r7
    cb40:	ldr	r5, [sp, #36]	; 0x24
    cb44:	ldr	r7, [sp, #48]	; 0x30
    cb48:	orr	r3, r2, r1
    cb4c:	add	r9, r9, r0
    cb50:	movw	r8, #48348	; 0xbcdc
    cb54:	ldr	r0, [sp, #72]	; 0x48
    cb58:	movt	r8, #36635	; 0x8f1b
    cb5c:	add	r9, r9, r2, ror #27
    cb60:	eor	r4, r5, r6
    cb64:	add	r8, r7, r8
    cb68:	and	r5, r2, r1
    cb6c:	and	r3, r3, ip
    cb70:	ror	r2, r2, #2
    cb74:	ldr	r6, [sp, #60]	; 0x3c
    cb78:	orr	r3, r3, r5
    cb7c:	ror	sl, sl, #31
    cb80:	ldr	r5, [sp, #40]	; 0x28
    cb84:	eor	r4, r4, r0
    cb88:	add	lr, r8, lr
    cb8c:	orr	r0, r9, r2
    cb90:	movw	r7, #48348	; 0xbcdc
    cb94:	movt	r7, #36635	; 0x8f1b
    cb98:	str	sl, [sp, #52]	; 0x34
    cb9c:	add	r8, lr, r3
    cba0:	eor	r4, r4, fp
    cba4:	and	lr, r9, r2
    cba8:	add	r7, sl, r7
    cbac:	and	r0, r0, r1
    cbb0:	ldr	sl, [sp, #80]	; 0x50
    cbb4:	eor	r3, r5, r6
    cbb8:	orr	r0, r0, lr
    cbbc:	ldr	lr, [sp, #48]	; 0x30
    cbc0:	ror	r4, r4, #31
    cbc4:	eor	r3, r3, sl
    cbc8:	str	r4, [sp, #56]	; 0x38
    cbcc:	add	r8, r8, r9, ror #27
    cbd0:	ldr	sl, [sp, #36]	; 0x24
    cbd4:	ror	r9, r9, #2
    cbd8:	ldr	r4, [sp, #44]	; 0x2c
    cbdc:	eor	r3, r3, lr
    cbe0:	ldr	lr, [sp, #56]	; 0x38
    cbe4:	orr	r6, r8, r9
    cbe8:	add	r7, r7, ip
    cbec:	movw	ip, #48348	; 0xbcdc
    cbf0:	movt	ip, #36635	; 0x8f1b
    cbf4:	eor	r5, r4, sl
    cbf8:	add	ip, lr, ip
    cbfc:	ldr	r4, [sp, #84]	; 0x54
    cc00:	add	r7, r7, r0
    cc04:	and	r6, r6, r2
    cc08:	and	r0, r8, r9
    cc0c:	add	r1, ip, r1
    cc10:	ldr	sl, [sp, #52]	; 0x34
    cc14:	orr	r6, r6, r0
    cc18:	ror	r3, r3, #31
    cc1c:	str	r3, [sp, #60]	; 0x3c
    cc20:	add	r7, r7, r8, ror #27
    cc24:	ldr	lr, [sp, #40]	; 0x28
    cc28:	ror	r8, r8, #2
    cc2c:	ldr	ip, [sp, #32]
    cc30:	eor	r5, r5, r4
    cc34:	add	r6, r1, r6
    cc38:	ldr	r1, [sp, #60]	; 0x3c
    cc3c:	orr	r3, r7, r8
    cc40:	ldr	r0, [sp, #28]
    cc44:	eor	r5, r5, sl
    cc48:	movw	r4, #48348	; 0xbcdc
    cc4c:	movt	r4, #36635	; 0x8f1b
    cc50:	eor	sl, ip, lr
    cc54:	add	r4, r1, r4
    cc58:	and	r3, r3, r9
    cc5c:	and	r1, r7, r8
    cc60:	ldr	ip, [sp, #44]	; 0x2c
    cc64:	orr	r3, r3, r1
    cc68:	eor	sl, sl, r0
    cc6c:	ror	r5, r5, #31
    cc70:	ldr	r0, [sp, #56]	; 0x38
    cc74:	str	r5, [sp, #36]	; 0x24
    cc78:	add	r4, r4, r2
    cc7c:	ldr	r5, [sp, #64]	; 0x40
    cc80:	add	r6, r6, r7, ror #27
    cc84:	ldr	r1, [sp, #24]
    cc88:	ror	r7, r7, #2
    cc8c:	add	r4, r4, r3
    cc90:	ldr	r3, [sp, #36]	; 0x24
    cc94:	eor	lr, r5, ip
    cc98:	orr	r2, r6, r7
    cc9c:	ldr	r5, [sp, #60]	; 0x3c
    cca0:	eor	sl, sl, r0
    cca4:	movw	r0, #48348	; 0xbcdc
    cca8:	movt	r0, #36635	; 0x8f1b
    ccac:	eor	lr, lr, r1
    ccb0:	add	r0, r3, r0
    ccb4:	and	r2, r2, r8
    ccb8:	and	r3, r6, r7
    ccbc:	ldr	ip, [sp, #32]
    ccc0:	orr	r2, r2, r3
    ccc4:	eor	lr, lr, r5
    ccc8:	ror	sl, sl, #31
    cccc:	add	r0, r0, r9
    ccd0:	str	sl, [sp, #40]	; 0x28
    ccd4:	ldr	sl, [sp, #68]	; 0x44
    ccd8:	add	r0, r0, r2
    ccdc:	ldr	r2, [sp, #40]	; 0x28
    cce0:	ror	lr, lr, #31
    cce4:	eor	r1, sl, ip
    cce8:	str	lr, [sp, #32]
    ccec:	movw	r3, #49622	; 0xc1d6
    ccf0:	ldr	r5, [sp, #36]	; 0x24
    ccf4:	movt	r3, #51810	; 0xca62
    ccf8:	eor	r1, r1, fp
    ccfc:	add	r3, r2, r3
    cd00:	ldr	r9, [sp, #72]	; 0x48
    cd04:	ldr	sl, [sp, #64]	; 0x40
    cd08:	eor	r1, r1, r5
    cd0c:	add	r3, r3, r8
    cd10:	ldr	r8, [sp, #32]
    cd14:	ldr	r5, [sp, #48]	; 0x30
    cd18:	movw	lr, #49622	; 0xc1d6
    cd1c:	movt	lr, #51810	; 0xca62
    cd20:	add	r4, r4, r6, ror #27
    cd24:	eor	ip, r9, sl
    cd28:	ror	r6, r6, #2
    cd2c:	ldr	sl, [sp, #68]	; 0x44
    cd30:	add	lr, r8, lr
    cd34:	ldr	r9, [sp, #80]	; 0x50
    cd38:	ror	r1, r1, #31
    cd3c:	str	r1, [sp, #44]	; 0x2c
    cd40:	eor	r2, r6, r7
    cd44:	ldr	r1, [sp, #40]	; 0x28
    cd48:	eor	ip, ip, r5
    cd4c:	add	lr, lr, r7
    cd50:	ldr	r7, [sp, #52]	; 0x34
    cd54:	eor	r5, r9, sl
    cd58:	ldr	r8, [sp, #44]	; 0x2c
    cd5c:	ldr	r9, [sp, #32]
    cd60:	eor	ip, ip, r1
    cd64:	ldr	sl, [sp, #84]	; 0x54
    cd68:	eor	r5, r5, r7
    cd6c:	movw	r1, #49622	; 0xc1d6
    cd70:	ldr	r7, [sp, #72]	; 0x48
    cd74:	movt	r1, #51810	; 0xca62
    cd78:	eor	r5, r5, r9
    cd7c:	add	r1, r8, r1
    cd80:	ror	ip, ip, #31
    cd84:	ldr	r8, [sp, #56]	; 0x38
    cd88:	add	r0, r0, r4, ror #27
    cd8c:	str	ip, [sp, #64]	; 0x40
    cd90:	eor	r2, r2, r4
    cd94:	eor	ip, sl, r7
    cd98:	ror	r4, r4, #2
    cd9c:	ldr	r9, [sp, #64]	; 0x40
    cda0:	add	r3, r3, r2
    cda4:	ldr	sl, [sp, #44]	; 0x2c
    cda8:	eor	r2, r4, r6
    cdac:	eor	ip, ip, r8
    cdb0:	add	r6, r1, r6
    cdb4:	ldr	r8, [sp, #80]	; 0x50
    cdb8:	ror	r5, r5, #31
    cdbc:	movw	r1, #49622	; 0xc1d6
    cdc0:	str	r5, [sp, #68]	; 0x44
    cdc4:	movt	r1, #51810	; 0xca62
    cdc8:	ldr	r5, [sp, #28]
    cdcc:	add	r1, r9, r1
    cdd0:	eor	ip, ip, sl
    cdd4:	ldr	r9, [sp, #60]	; 0x3c
    cdd8:	add	r3, r3, r0, ror #27
    cddc:	eor	r2, r2, r0
    cde0:	eor	r7, r5, r8
    cde4:	ror	r0, r0, #2
    cde8:	ldr	sl, [sp, #68]	; 0x44
    cdec:	ldr	r8, [sp, #84]	; 0x54
    cdf0:	add	lr, lr, r2
    cdf4:	eor	r7, r7, r9
    cdf8:	eor	r2, r0, r4
    cdfc:	ldr	r9, [sp, #64]	; 0x40
    ce00:	add	r4, r1, r4
    ce04:	ror	ip, ip, #31
    ce08:	movw	r1, #49622	; 0xc1d6
    ce0c:	str	ip, [sp, #72]	; 0x48
    ce10:	movt	r1, #51810	; 0xca62
    ce14:	ldr	ip, [sp, #24]
    ce18:	add	r1, sl, r1
    ce1c:	ldr	sl, [sp, #36]	; 0x24
    ce20:	add	lr, lr, r3, ror #27
    ce24:	eor	r2, r2, r3
    ce28:	eor	r5, ip, r8
    ce2c:	ror	r3, r3, #2
    ce30:	ldr	ip, [sp, #72]	; 0x48
    ce34:	eor	r7, r7, r9
    ce38:	ldr	r9, [sp, #28]
    ce3c:	add	r6, r6, r2
    ce40:	eor	r5, r5, sl
    ce44:	eor	r2, r3, r0
    ce48:	ldr	sl, [sp, #40]	; 0x28
    ce4c:	add	r0, r1, r0
    ce50:	movw	r1, #49622	; 0xc1d6
    ce54:	movt	r1, #51810	; 0xca62
    ce58:	add	r6, r6, lr, ror #27
    ce5c:	eor	r2, r2, lr
    ce60:	add	r1, ip, r1
    ce64:	ror	lr, lr, #2
    ce68:	eor	ip, fp, r9
    ce6c:	add	r4, r4, r2
    ce70:	ldr	r9, [sp, #48]	; 0x30
    ce74:	eor	r2, lr, r3
    ce78:	eor	ip, ip, sl
    ce7c:	add	r3, r1, r3
    ce80:	ldr	sl, [sp, #24]
    ce84:	ldr	r1, [sp, #72]	; 0x48
    ce88:	add	r4, r4, r6, ror #27
    ce8c:	ldr	r8, [sp, #68]	; 0x44
    ce90:	eor	r2, r2, r6
    ce94:	eor	ip, ip, r1
    ce98:	eor	r1, r9, sl
    ce9c:	ldr	r9, [sp, #32]
    cea0:	ror	r6, r6, #2
    cea4:	ldr	sl, [sp, #52]	; 0x34
    cea8:	ror	r7, r7, #31
    ceac:	eor	r1, r1, r9
    ceb0:	add	r0, r0, r2
    ceb4:	eor	r9, sl, fp
    ceb8:	eor	r2, r6, lr
    cebc:	eor	r1, r1, r7
    cec0:	eor	r5, r5, r8
    cec4:	str	r1, [sp, #24]
    cec8:	movw	r8, #49622	; 0xc1d6
    cecc:	ldr	fp, [sp, #44]	; 0x2c
    ced0:	movt	r8, #51810	; 0xca62
    ced4:	add	r0, r0, r4, ror #27
    ced8:	eor	r2, r2, r4
    cedc:	add	r8, r7, r8
    cee0:	ror	r4, r4, #2
    cee4:	ror	r5, r5, #31
    cee8:	ldr	r1, [sp, #56]	; 0x38
    ceec:	add	r3, r3, r2
    cef0:	add	lr, r8, lr
    cef4:	eor	r2, r4, r6
    cef8:	eor	r9, r9, fp
    cefc:	movw	r8, #49622	; 0xc1d6
    cf00:	ldr	fp, [sp, #48]	; 0x30
    cf04:	movt	r8, #51810	; 0xca62
    cf08:	add	r3, r3, r0, ror #27
    cf0c:	eor	r2, r2, r0
    cf10:	add	r8, r5, r8
    cf14:	ror	r0, r0, #2
    cf18:	ror	ip, ip, #31
    cf1c:	movw	sl, #49622	; 0xc1d6
    cf20:	movt	sl, #51810	; 0xca62
    cf24:	add	sl, ip, sl
    cf28:	add	lr, lr, r2
    cf2c:	add	r6, r8, r6
    cf30:	eor	r2, r0, r4
    cf34:	eor	r8, r1, fp
    cf38:	ldr	fp, [sp, #24]
    cf3c:	add	lr, lr, r3, ror #27
    cf40:	eor	r2, r2, r3
    cf44:	add	r4, sl, r4
    cf48:	ror	r3, r3, #2
    cf4c:	ldr	sl, [sp, #64]	; 0x40
    cf50:	add	r6, r6, r2
    cf54:	eor	r2, r3, r0
    cf58:	ror	r1, fp, #31
    cf5c:	eor	r2, r2, lr
    cf60:	eor	r8, r8, sl
    cf64:	movw	fp, #49622	; 0xc1d6
    cf68:	movt	fp, #51810	; 0xca62
    cf6c:	add	fp, r1, fp
    cf70:	eor	r8, r8, ip
    cf74:	eor	r9, r9, r5
    cf78:	str	r8, [sp, #24]
    cf7c:	add	r4, r4, r2
    cf80:	ldr	r8, [sp, #52]	; 0x34
    cf84:	ldr	r2, [sp, #60]	; 0x3c
    cf88:	add	r0, fp, r0
    cf8c:	ldr	fp, [sp, #68]	; 0x44
    cf90:	ror	r9, r9, #31
    cf94:	str	r9, [sp, #28]
    cf98:	eor	r9, r2, r8
    cf9c:	add	r6, r6, lr, ror #27
    cfa0:	eor	r9, r9, fp
    cfa4:	ror	lr, lr, #2
    cfa8:	ldr	fp, [sp, #24]
    cfac:	eor	sl, lr, r3
    cfb0:	ldr	r8, [sp, #28]
    cfb4:	add	r4, r4, r6, ror #27
    cfb8:	eor	sl, sl, r6
    cfbc:	movw	r2, #49622	; 0xc1d6
    cfc0:	ror	r6, r6, #2
    cfc4:	movt	r2, #51810	; 0xca62
    cfc8:	add	r0, r0, sl
    cfcc:	add	r2, r8, r2
    cfd0:	eor	sl, r6, lr
    cfd4:	ldr	r8, [sp, #36]	; 0x24
    cfd8:	ror	fp, fp, #31
    cfdc:	str	fp, [sp, #24]
    cfe0:	eor	r9, r9, r1
    cfe4:	ldr	fp, [sp, #56]	; 0x38
    cfe8:	eor	sl, sl, r4
    cfec:	str	r9, [sp, #52]	; 0x34
    cff0:	add	r3, r2, r3
    cff4:	ldr	r9, [sp, #72]	; 0x48
    cff8:	eor	r8, r8, fp
    cffc:	add	r3, r3, sl
    d000:	ldr	fp, [sp, #28]
    d004:	ldr	sl, [sp, #24]
    d008:	add	r0, r0, r4, ror #27
    d00c:	eor	r8, r8, r9
    d010:	ror	r4, r4, #2
    d014:	movw	r2, #49622	; 0xc1d6
    d018:	movt	r2, #51810	; 0xca62
    d01c:	add	r2, sl, r2
    d020:	eor	r8, r8, fp
    d024:	eor	sl, r4, r6
    d028:	str	r8, [sp, #48]	; 0x30
    d02c:	ldr	r8, [sp, #52]	; 0x34
    d030:	eor	sl, sl, r0
    d034:	add	lr, r2, lr
    d038:	ldr	fp, [sp, #40]	; 0x28
    d03c:	add	lr, lr, sl
    d040:	ldr	sl, [sp, #48]	; 0x30
    d044:	ror	r9, r8, #31
    d048:	ldr	r8, [sp, #60]	; 0x3c
    d04c:	add	r3, r3, r0, ror #27
    d050:	movw	r2, #49622	; 0xc1d6
    d054:	eor	fp, fp, r8
    d058:	ror	r8, sl, #31
    d05c:	ldr	sl, [sp, #24]
    d060:	eor	r7, fp, r7
    d064:	ror	r0, r0, #2
    d068:	movt	r2, #51810	; 0xca62
    d06c:	eor	r7, r7, sl
    d070:	ldr	sl, [sp, #36]	; 0x24
    d074:	str	r7, [sp, #48]	; 0x30
    d078:	eor	fp, r0, r4
    d07c:	ldr	r7, [sp, #32]
    d080:	add	r2, r9, r2
    d084:	add	lr, lr, r3, ror #27
    d088:	eor	fp, fp, r3
    d08c:	eor	r7, r7, sl
    d090:	ldr	sl, [sp, #40]	; 0x28
    d094:	eor	r5, r7, r5
    d098:	ldr	r7, [sp, #44]	; 0x2c
    d09c:	add	r2, r2, r6
    d0a0:	ror	r6, r3, #2
    d0a4:	movw	r3, #49622	; 0xc1d6
    d0a8:	movt	r3, #51810	; 0xca62
    d0ac:	eor	r7, r7, sl
    d0b0:	add	r3, r8, r3
    d0b4:	str	r7, [sp, #36]	; 0x24
    d0b8:	add	r2, r2, fp
    d0bc:	ldr	sl, [sp, #48]	; 0x30
    d0c0:	eor	fp, r6, r0
    d0c4:	add	r3, r3, r4
    d0c8:	ldr	r4, [sp, #36]	; 0x24
    d0cc:	eor	fp, fp, lr
    d0d0:	add	r2, r2, lr, ror #27
    d0d4:	ror	r7, sl, #31
    d0d8:	ror	lr, lr, #2
    d0dc:	eor	r5, r5, r9
    d0e0:	eor	ip, r4, ip
    d0e4:	add	r3, r3, fp
    d0e8:	ldr	r4, [sp, #32]
    d0ec:	ldr	fp, [sp, #64]	; 0x40
    d0f0:	movw	r9, #49622	; 0xc1d6
    d0f4:	movt	r9, #51810	; 0xca62
    d0f8:	eor	sl, lr, r6
    d0fc:	add	r9, r7, r9
    d100:	eor	ip, ip, r8
    d104:	eor	sl, sl, r2
    d108:	eor	r8, fp, r4
    d10c:	ror	r5, r5, #31
    d110:	add	r0, r9, r0
    d114:	movw	r4, #49622	; 0xc1d6
    d118:	movt	r4, #51810	; 0xca62
    d11c:	add	r3, r3, r2, ror #27
    d120:	eor	r1, r8, r1
    d124:	ror	r2, r2, #2
    d128:	add	r4, r5, r4
    d12c:	ldr	r8, [sp, #68]	; 0x44
    d130:	add	r0, r0, sl
    d134:	ldr	r9, [sp, #44]	; 0x2c
    d138:	ror	ip, ip, #31
    d13c:	movw	sl, #49622	; 0xc1d6
    d140:	movt	sl, #51810	; 0xca62
    d144:	eor	fp, r2, lr
    d148:	add	sl, ip, sl
    d14c:	add	r6, r4, r6
    d150:	ldr	r4, [sp, #28]
    d154:	add	r0, r0, r3, ror #27
    d158:	eor	fp, fp, r3
    d15c:	eor	r7, r1, r7
    d160:	ror	r3, r3, #2
    d164:	eor	r1, r8, r9
    d168:	add	lr, sl, lr
    d16c:	ldr	r9, [sp, #72]	; 0x48
    d170:	eor	r1, r1, r4
    d174:	ldr	sl, [sp, #64]	; 0x40
    d178:	eor	r8, r3, r2
    d17c:	ldr	r4, [sp, #24]
    d180:	add	r6, r6, fp
    d184:	add	r6, r6, r0, ror #27
    d188:	eor	r8, r8, r0
    d18c:	eor	r5, r1, r5
    d190:	ror	r0, r0, #2
    d194:	eor	r1, r9, sl
    d198:	eor	fp, r0, r3
    d19c:	eor	r1, r1, r4
    d1a0:	ldr	sl, [sp, #20]
    d1a4:	add	lr, lr, r8
    d1a8:	ror	r4, r6, #2
    d1ac:	add	lr, lr, r6, ror #27
    d1b0:	eor	ip, r1, ip
    d1b4:	ror	r7, r7, #31
    d1b8:	eor	r6, fp, r6
    d1bc:	movw	r9, #49622	; 0xc1d6
    d1c0:	movw	fp, #49622	; 0xc1d6
    d1c4:	movt	r9, #51810	; 0xca62
    d1c8:	movt	fp, #51810	; 0xca62
    d1cc:	add	fp, r7, fp
    d1d0:	add	r9, sl, r9
    d1d4:	add	r2, fp, r2
    d1d8:	ror	r5, r5, #31
    d1dc:	add	r9, r9, ip, ror #31
    d1e0:	movw	ip, #49622	; 0xc1d6
    d1e4:	movt	ip, #51810	; 0xca62
    d1e8:	eor	r8, r4, r0
    d1ec:	add	r6, r2, r6
    d1f0:	add	ip, r5, ip
    d1f4:	ldr	r5, [sp, #76]	; 0x4c
    d1f8:	add	r3, ip, r3
    d1fc:	ror	sl, lr, #2
    d200:	eor	r8, r8, lr
    d204:	ldr	fp, [sp, #8]
    d208:	add	lr, r6, lr, ror #27
    d20c:	eor	r1, sl, r4
    d210:	add	r8, r3, r8
    d214:	eor	r1, r1, lr
    d218:	add	r8, r8, lr, ror #27
    d21c:	ldr	ip, [sp, #4]
    d220:	add	r9, r9, r0
    d224:	add	sl, sl, fp
    d228:	str	sl, [r5, #12]
    d22c:	ldr	r6, [sp, #12]
    d230:	add	r9, r9, r1
    d234:	ldr	r7, [sp, #16]
    d238:	add	r4, r4, ip
    d23c:	add	lr, r6, lr, ror #2
    d240:	add	r9, r9, r8, ror #27
    d244:	mov	r2, #64	; 0x40
    d248:	add	r8, r8, r7
    d24c:	add	r0, sp, #100	; 0x64
    d250:	str	r8, [r5, #4]
    d254:	str	r4, [r5, #16]
    d258:	mov	r1, #0
    d25c:	str	lr, [r5, #8]
    d260:	str	r9, [r5]
    d264:	bl	89d0 <memset@plt>
    d268:	ldr	r8, [sp, #92]	; 0x5c
    d26c:	ldr	r2, [sp, #164]	; 0xa4
    d270:	ldr	r3, [r8]
    d274:	cmp	r2, r3
    d278:	bne	d284 <__assert_fail@plt+0x4854>
    d27c:	add	sp, sp, #172	; 0xac
    d280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d284:	bl	8940 <__stack_chk_fail@plt>
    d288:	movw	r2, #8961	; 0x2301
    d28c:	movw	r3, #43913	; 0xab89
    d290:	movt	r2, #26437	; 0x6745
    d294:	movt	r3, #61389	; 0xefcd
    d298:	stm	r0, {r2, r3}
    d29c:	movw	r2, #56574	; 0xdcfe
    d2a0:	movw	r3, #21622	; 0x5476
    d2a4:	movt	r2, #39098	; 0x98ba
    d2a8:	movt	r3, #4146	; 0x1032
    d2ac:	str	r2, [r0, #8]
    d2b0:	str	r3, [r0, #12]
    d2b4:	movw	r2, #57840	; 0xe1f0
    d2b8:	mov	r3, #0
    d2bc:	movt	r2, #50130	; 0xc3d2
    d2c0:	str	r3, [r0, #24]
    d2c4:	str	r2, [r0, #16]
    d2c8:	str	r3, [r0, #20]
    d2cc:	bx	lr
    d2d0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    d2d4:	lsl	r3, r2, #3
    d2d8:	ldr	r8, [r0, #20]
    d2dc:	mov	r6, r2
    d2e0:	mov	r5, r0
    d2e4:	mov	r7, r1
    d2e8:	add	r2, r3, r8
    d2ec:	ubfx	r8, r8, #3, #6
    d2f0:	cmp	r3, r2
    d2f4:	ldr	r3, [r0, #24]
    d2f8:	str	r2, [r0, #20]
    d2fc:	add	r2, r6, r8
    d300:	addhi	r3, r3, #1
    d304:	cmp	r2, #63	; 0x3f
    d308:	add	r3, r3, r6, lsr #29
    d30c:	str	r3, [r0, #24]
    d310:	bhi	d330 <__assert_fail@plt+0x4900>
    d314:	add	r5, r0, r8
    d318:	mov	r2, #0
    d31c:	add	r0, r5, #28
    d320:	add	r1, r7, r2
    d324:	rsb	r2, r2, r6
    d328:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    d32c:	b	8904 <memcpy@plt>
    d330:	rsb	r4, r8, #64	; 0x40
    d334:	add	r0, r0, r8
    d338:	add	r9, r5, #28
    d33c:	add	r0, r0, #28
    d340:	mov	r2, r4
    d344:	rsb	r8, r8, #127	; 0x7f
    d348:	bl	8904 <memcpy@plt>
    d34c:	mov	r1, r9
    d350:	mov	r0, r5
    d354:	bl	bb00 <__assert_fail@plt+0x30d0>
    d358:	cmp	r6, r8
    d35c:	bls	d394 <__assert_fail@plt+0x4964>
    d360:	add	r1, r7, r4
    d364:	mov	r0, r5
    d368:	bl	bb00 <__assert_fail@plt+0x30d0>
    d36c:	add	r3, r4, #127	; 0x7f
    d370:	add	r2, r4, #64	; 0x40
    d374:	cmp	r3, r6
    d378:	mov	r4, r2
    d37c:	bcc	d360 <__assert_fail@plt+0x4930>
    d380:	add	r1, r7, r2
    d384:	mov	r0, r9
    d388:	rsb	r2, r2, r6
    d38c:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    d390:	b	8904 <memcpy@plt>
    d394:	mov	r0, r9
    d398:	mov	r2, r4
    d39c:	b	d320 <__assert_fail@plt+0x48f0>
    d3a0:	ldr	r2, [pc, #332]	; d4f4 <__assert_fail@plt+0x4ac4>
    d3a4:	mov	r3, #0
    d3a8:	ldr	ip, [pc, #328]	; d4f8 <__assert_fail@plt+0x4ac8>
    d3ac:	add	r2, pc, r2
    d3b0:	push	{r4, r5, r6, r7, r8, lr}
    d3b4:	sub	sp, sp, #16
    d3b8:	ldr	r8, [r2, ip]
    d3bc:	add	r7, sp, #4
    d3c0:	mov	r6, r0
    d3c4:	mov	r5, r1
    d3c8:	ldr	r2, [r8]
    d3cc:	str	r2, [sp, #12]
    d3d0:	cmp	r3, #3
    d3d4:	mvn	r2, r3
    d3d8:	and	r2, r2, #3
    d3dc:	movls	r1, #20
    d3e0:	movhi	r1, #16
    d3e4:	add	r1, r5, r1
    d3e8:	lsl	r2, r2, #3
    d3ec:	ldr	r1, [r1, #4]
    d3f0:	lsr	r2, r1, r2
    d3f4:	strb	r2, [r7, r3]
    d3f8:	add	r3, r3, #1
    d3fc:	cmp	r3, #8
    d400:	bne	d3d0 <__assert_fail@plt+0x49a0>
    d404:	ldr	r1, [pc, #240]	; d4fc <__assert_fail@plt+0x4acc>
    d408:	mov	r0, r5
    d40c:	mov	r2, #1
    d410:	ldr	r4, [pc, #232]	; d500 <__assert_fail@plt+0x4ad0>
    d414:	add	r1, pc, r1
    d418:	bl	d2d0 <__assert_fail@plt+0x48a0>
    d41c:	ldr	r3, [r5, #20]
    d420:	add	r4, pc, r4
    d424:	and	r3, r3, #504	; 0x1f8
    d428:	cmp	r3, #448	; 0x1c0
    d42c:	beq	d450 <__assert_fail@plt+0x4a20>
    d430:	mov	r0, r5
    d434:	mov	r1, r4
    d438:	mov	r2, #1
    d43c:	bl	d2d0 <__assert_fail@plt+0x48a0>
    d440:	ldr	r3, [r5, #20]
    d444:	and	r3, r3, #504	; 0x1f8
    d448:	cmp	r3, #448	; 0x1c0
    d44c:	bne	d430 <__assert_fail@plt+0x4a00>
    d450:	mov	r0, r5
    d454:	mov	r1, r7
    d458:	mov	r2, #8
    d45c:	mov	r4, #0
    d460:	bl	d2d0 <__assert_fail@plt+0x48a0>
    d464:	lsr	r2, r4, #2
    d468:	mvn	r3, r4
    d46c:	and	r3, r3, #3
    d470:	ldr	r2, [r5, r2, lsl #2]
    d474:	lsl	r3, r3, #3
    d478:	lsr	r3, r2, r3
    d47c:	strb	r3, [r6, r4]
    d480:	add	r4, r4, #1
    d484:	cmp	r4, #20
    d488:	bne	d464 <__assert_fail@plt+0x4a34>
    d48c:	mov	r1, #0
    d490:	mov	r2, #64	; 0x40
    d494:	add	r0, r5, #28
    d498:	bl	89d0 <memset@plt>
    d49c:	mov	r2, r4
    d4a0:	mov	r1, #0
    d4a4:	mov	r0, r5
    d4a8:	bl	89d0 <memset@plt>
    d4ac:	ldr	r1, [sp, #12]
    d4b0:	ldr	r2, [r8]
    d4b4:	mov	r3, #0
    d4b8:	str	r3, [sp, #4]
    d4bc:	cmp	r1, r2
    d4c0:	strb	r3, [r5, #20]
    d4c4:	strb	r3, [r5, #21]
    d4c8:	strb	r3, [r5, #22]
    d4cc:	strb	r3, [r5, #23]
    d4d0:	strb	r3, [r5, #24]
    d4d4:	strb	r3, [r5, #25]
    d4d8:	strb	r3, [r5, #26]
    d4dc:	strb	r3, [r5, #27]
    d4e0:	str	r3, [r7, #4]
    d4e4:	bne	d4f0 <__assert_fail@plt+0x4ac0>
    d4e8:	add	sp, sp, #16
    d4ec:	pop	{r4, r5, r6, r7, r8, pc}
    d4f0:	bl	8940 <__stack_chk_fail@plt>
    d4f4:	andeq	sl, r0, ip, asr #24
    d4f8:	andeq	r0, r0, r4, lsl #1
    d4fc:	strdeq	r2, [r0], -r8
    d500:	andeq	r2, r0, r8, ror #5
    d504:	b	d2d0 <__assert_fail@plt+0x48a0>
    d508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	mov	fp, r3
    d510:	ldr	lr, [pc, #132]	; d59c <__assert_fail@plt+0x4b6c>
    d514:	sub	sp, sp, #100	; 0x64
    d518:	ldr	ip, [pc, #128]	; d5a0 <__assert_fail@plt+0x4b70>
    d51c:	mov	r7, r0
    d520:	add	lr, pc, lr
    d524:	mov	r0, sp
    d528:	mov	r8, r1
    d52c:	mov	r9, r2
    d530:	ldr	sl, [lr, ip]
    d534:	mov	r3, lr
    d538:	ldr	r3, [sl]
    d53c:	str	r3, [sp, #92]	; 0x5c
    d540:	bl	d288 <__assert_fail@plt+0x4858>
    d544:	cmp	r7, #0
    d548:	movne	r4, #0
    d54c:	movne	r5, r4
    d550:	beq	d574 <__assert_fail@plt+0x4b44>
    d554:	ldr	r1, [r8, r4]
    d558:	add	r5, r5, #1
    d55c:	ldr	r2, [r9, r4]
    d560:	mov	r0, sp
    d564:	bl	d2d0 <__assert_fail@plt+0x48a0>
    d568:	cmp	r5, r7
    d56c:	add	r4, r4, #4
    d570:	bne	d554 <__assert_fail@plt+0x4b24>
    d574:	mov	r0, fp
    d578:	mov	r1, sp
    d57c:	bl	d3a0 <__assert_fail@plt+0x4970>
    d580:	ldr	r2, [sp, #92]	; 0x5c
    d584:	ldr	r3, [sl]
    d588:	cmp	r2, r3
    d58c:	bne	d598 <__assert_fail@plt+0x4b68>
    d590:	add	sp, sp, #100	; 0x64
    d594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d598:	bl	8940 <__stack_chk_fail@plt>
    d59c:	ldrdeq	sl, [r0], -r8
    d5a0:	andeq	r0, r0, r4, lsl #1
    d5a4:	ldr	r3, [pc, #236]	; d698 <__assert_fail@plt+0x4c68>
    d5a8:	cmp	r2, #64	; 0x40
    d5ac:	ldr	ip, [pc, #232]	; d69c <__assert_fail@plt+0x4c6c>
    d5b0:	push	{r4, r5, r6, r7, r8, lr}
    d5b4:	add	r3, pc, r3
    d5b8:	sub	sp, sp, #96	; 0x60
    d5bc:	mov	r6, r2
    d5c0:	mov	r5, r0
    d5c4:	movls	r8, r1
    d5c8:	str	r1, [sp, #4]
    d5cc:	str	r2, [sp]
    d5d0:	ldr	r7, [r3, ip]
    d5d4:	ldr	r3, [r7]
    d5d8:	str	r3, [sp, #92]	; 0x5c
    d5dc:	bhi	d668 <__assert_fail@plt+0x4c38>
    d5e0:	add	r4, sp, #28
    d5e4:	mov	r1, #0
    d5e8:	mov	r2, #64	; 0x40
    d5ec:	mov	r0, r4
    d5f0:	bl	89d0 <memset@plt>
    d5f4:	mov	r2, r6
    d5f8:	mov	r3, #64	; 0x40
    d5fc:	mov	r0, r4
    d600:	mov	r1, r8
    d604:	bl	8958 <__memcpy_chk@plt>
    d608:	add	r2, sp, #92	; 0x5c
    d60c:	mov	r3, r4
    d610:	ldrb	ip, [r3]
    d614:	eor	ip, ip, #54	; 0x36
    d618:	strb	ip, [r3], #1
    d61c:	cmp	r3, r2
    d620:	bne	d610 <__assert_fail@plt+0x4be0>
    d624:	mov	r1, r8
    d628:	mov	r2, r6
    d62c:	add	r0, r5, #92	; 0x5c
    d630:	bl	8904 <memcpy@plt>
    d634:	mov	r0, r5
    d638:	str	r6, [r5, #156]	; 0x9c
    d63c:	bl	d288 <__assert_fail@plt+0x4858>
    d640:	mov	r2, #64	; 0x40
    d644:	mov	r0, r5
    d648:	mov	r1, r4
    d64c:	bl	d2d0 <__assert_fail@plt+0x48a0>
    d650:	ldr	r2, [sp, #92]	; 0x5c
    d654:	ldr	r3, [r7]
    d658:	cmp	r2, r3
    d65c:	bne	d694 <__assert_fail@plt+0x4c64>
    d660:	add	sp, sp, #96	; 0x60
    d664:	pop	{r4, r5, r6, r7, r8, pc}
    d668:	add	r4, sp, #8
    d66c:	mov	r0, #1
    d670:	add	r1, sp, #4
    d674:	mov	r2, sp
    d678:	mov	r3, r4
    d67c:	mov	r8, r4
    d680:	bl	d508 <__assert_fail@plt+0x4ad8>
    d684:	mov	r3, #20
    d688:	mov	r6, r3
    d68c:	stm	sp, {r3, r4}
    d690:	b	d5e0 <__assert_fail@plt+0x4bb0>
    d694:	bl	8940 <__stack_chk_fail@plt>
    d698:	andeq	sl, r0, r4, asr #20
    d69c:	andeq	r0, r0, r4, lsl #1
    d6a0:	ldr	r3, [pc, #184]	; d760 <__assert_fail@plt+0x4d30>
    d6a4:	ldr	r2, [pc, #184]	; d764 <__assert_fail@plt+0x4d34>
    d6a8:	add	r3, pc, r3
    d6ac:	push	{r4, r5, r6, r7, r8, lr}
    d6b0:	sub	sp, sp, #104	; 0x68
    d6b4:	ldr	r5, [r3, r2]
    d6b8:	add	r6, sp, #16
    d6bc:	add	r4, sp, #36	; 0x24
    d6c0:	mov	r8, r0
    d6c4:	mov	r0, r6
    d6c8:	mov	r7, r1
    d6cc:	ldr	r3, [r5]
    d6d0:	str	r3, [sp, #100]	; 0x64
    d6d4:	bl	d3a0 <__assert_fail@plt+0x4970>
    d6d8:	mov	r1, #0
    d6dc:	mov	r2, #64	; 0x40
    d6e0:	mov	r0, r4
    d6e4:	bl	89d0 <memset@plt>
    d6e8:	ldr	r2, [r7, #156]	; 0x9c
    d6ec:	mov	r0, r4
    d6f0:	add	r1, r7, #92	; 0x5c
    d6f4:	mov	r3, #64	; 0x40
    d6f8:	bl	8958 <__memcpy_chk@plt>
    d6fc:	add	ip, sp, #100	; 0x64
    d700:	mov	r2, r4
    d704:	ldrb	r1, [r2]
    d708:	eor	r1, r1, #92	; 0x5c
    d70c:	strb	r1, [r2], #1
    d710:	cmp	r2, ip
    d714:	bne	d704 <__assert_fail@plt+0x4cd4>
    d718:	mov	r3, r8
    d71c:	add	r2, sp, #8
    d720:	mov	r0, #2
    d724:	mov	r1, sp
    d728:	mov	lr, #64	; 0x40
    d72c:	mov	ip, #20
    d730:	str	r4, [sp]
    d734:	str	r6, [sp, #4]
    d738:	str	lr, [sp, #8]
    d73c:	str	ip, [sp, #12]
    d740:	bl	d508 <__assert_fail@plt+0x4ad8>
    d744:	ldr	r2, [sp, #100]	; 0x64
    d748:	ldr	r3, [r5]
    d74c:	cmp	r2, r3
    d750:	bne	d75c <__assert_fail@plt+0x4d2c>
    d754:	add	sp, sp, #104	; 0x68
    d758:	pop	{r4, r5, r6, r7, r8, pc}
    d75c:	bl	8940 <__stack_chk_fail@plt>
    d760:	andeq	sl, r0, r0, asr r9
    d764:	andeq	r0, r0, r4, lsl #1
    d768:	ldr	ip, [pc, #436]	; d924 <__assert_fail@plt+0x4ef4>
    d76c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d770:	mov	r8, r2
    d774:	ldr	r2, [pc, #428]	; d928 <__assert_fail@plt+0x4ef8>
    d778:	sub	sp, sp, #156	; 0x9c
    d77c:	add	ip, pc, ip
    d780:	mov	r6, r3
    d784:	str	r0, [sp, #12]
    d788:	cmp	r8, #5
    d78c:	str	r1, [sp, #8]
    d790:	mov	r3, ip
    d794:	ldr	r2, [ip, r2]
    d798:	ldr	r7, [sp, #192]	; 0xc0
    d79c:	ldr	r9, [sp, #196]	; 0xc4
    d7a0:	ldr	r3, [r2]
    d7a4:	str	r2, [sp, #4]
    d7a8:	str	r3, [sp, #148]	; 0x94
    d7ac:	bhi	d8c8 <__assert_fail@plt+0x4e98>
    d7b0:	cmp	r1, #64	; 0x40
    d7b4:	bhi	d8e4 <__assert_fail@plt+0x4eb4>
    d7b8:	mov	fp, r0
    d7bc:	mov	sl, r1
    d7c0:	add	r5, sp, #84	; 0x54
    d7c4:	mov	r1, #0
    d7c8:	mov	r2, #64	; 0x40
    d7cc:	add	r4, sp, #148	; 0x94
    d7d0:	mov	r0, r5
    d7d4:	bl	89d0 <memset@plt>
    d7d8:	mov	r3, #64	; 0x40
    d7dc:	mov	r0, r5
    d7e0:	mov	r1, fp
    d7e4:	mov	r2, sl
    d7e8:	bl	8958 <__memcpy_chk@plt>
    d7ec:	mov	r3, r5
    d7f0:	ldrb	r2, [r3]
    d7f4:	eor	r2, r2, #54	; 0x36
    d7f8:	strb	r2, [r3], #1
    d7fc:	cmp	r3, r4
    d800:	bne	d7f0 <__assert_fail@plt+0x4dc0>
    d804:	cmp	r8, #0
    d808:	mov	r3, #64	; 0x40
    d80c:	str	r5, [sp, #16]
    d810:	str	r3, [sp, #40]	; 0x28
    d814:	beq	d914 <__assert_fail@plt+0x4ee4>
    d818:	mov	r2, #0
    d81c:	lsl	lr, r8, #2
    d820:	add	fp, sp, #16
    d824:	add	sl, sp, #40	; 0x28
    d828:	mov	r3, r2
    d82c:	ldr	r0, [r6, r3]
    d830:	add	r2, r2, #4
    d834:	ldr	r1, [r7, r3]
    d838:	add	r3, r3, #4
    d83c:	cmp	r3, lr
    d840:	str	r0, [fp, r2]
    d844:	str	r1, [sl, r2]
    d848:	bne	d82c <__assert_fail@plt+0x4dfc>
    d84c:	mov	r3, r9
    d850:	add	r0, r8, #1
    d854:	mov	r1, fp
    d858:	mov	r2, sl
    d85c:	bl	d508 <__assert_fail@plt+0x4ad8>
    d860:	mov	r1, #0
    d864:	mov	r2, #64	; 0x40
    d868:	mov	r0, r5
    d86c:	bl	89d0 <memset@plt>
    d870:	mov	r3, #64	; 0x40
    d874:	mov	r0, r5
    d878:	ldr	r1, [sp, #12]
    d87c:	ldr	r2, [sp, #8]
    d880:	bl	8958 <__memcpy_chk@plt>
    d884:	mov	r3, r5
    d888:	ldrb	r2, [r3]
    d88c:	eor	r2, r2, #92	; 0x5c
    d890:	strb	r2, [r3], #1
    d894:	cmp	r3, r4
    d898:	bne	d888 <__assert_fail@plt+0x4e58>
    d89c:	mov	r1, fp
    d8a0:	mov	r2, sl
    d8a4:	mov	r3, r9
    d8a8:	mov	r0, #2
    d8ac:	mov	lr, #64	; 0x40
    d8b0:	mov	ip, #20
    d8b4:	str	r5, [sp, #16]
    d8b8:	str	r9, [sp, #20]
    d8bc:	str	lr, [sp, #40]	; 0x28
    d8c0:	str	ip, [sp, #44]	; 0x2c
    d8c4:	bl	d508 <__assert_fail@plt+0x4ad8>
    d8c8:	ldr	r1, [sp, #4]
    d8cc:	ldr	r2, [sp, #148]	; 0x94
    d8d0:	ldr	r3, [r1]
    d8d4:	cmp	r2, r3
    d8d8:	bne	d920 <__assert_fail@plt+0x4ef0>
    d8dc:	add	sp, sp, #156	; 0x9c
    d8e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8e4:	add	r4, sp, #64	; 0x40
    d8e8:	mov	r0, #1
    d8ec:	add	r1, sp, #12
    d8f0:	add	r2, sp, #8
    d8f4:	mov	r3, r4
    d8f8:	mov	fp, r4
    d8fc:	bl	d508 <__assert_fail@plt+0x4ad8>
    d900:	mov	r3, #20
    d904:	mov	sl, r3
    d908:	str	r4, [sp, #12]
    d90c:	str	r3, [sp, #8]
    d910:	b	d7c0 <__assert_fail@plt+0x4d90>
    d914:	add	fp, sp, #16
    d918:	add	sl, sp, #40	; 0x28
    d91c:	b	d84c <__assert_fail@plt+0x4e1c>
    d920:	bl	8940 <__stack_chk_fail@plt>
    d924:	andeq	sl, r0, ip, ror r8
    d928:	andeq	r0, r0, r4, lsl #1
    d92c:	push	{lr}		; (str lr, [sp, #-4]!)
    d930:	sub	sp, sp, #20
    d934:	ldr	ip, [sp, #24]
    d938:	str	r2, [sp, #12]
    d93c:	mov	r2, #1
    d940:	str	r3, [sp, #8]
    d944:	add	r3, sp, #12
    d948:	str	ip, [sp, #4]
    d94c:	add	ip, sp, #8
    d950:	str	ip, [sp]
    d954:	bl	d768 <__assert_fail@plt+0x4d38>
    d958:	add	sp, sp, #20
    d95c:	pop	{pc}		; (ldr pc, [sp], #4)
    d960:	ldr	ip, [pc, #296]	; da90 <__assert_fail@plt+0x5060>
    d964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d968:	add	ip, pc, ip
    d96c:	ldr	lr, [pc, #288]	; da94 <__assert_fail@plt+0x5064>
    d970:	mov	r9, r2
    d974:	mov	r6, r0
    d978:	mov	r0, r2
    d97c:	mov	r2, ip
    d980:	sub	sp, sp, #76	; 0x4c
    d984:	ldr	fp, [ip, lr]
    d988:	mov	sl, r3
    d98c:	mov	r4, #0
    d990:	mov	r7, r1
    d994:	strb	r4, [sp, #23]
    d998:	ldr	r2, [fp]
    d99c:	ldr	r5, [sp, #120]	; 0x78
    d9a0:	ldr	r8, [sp, #116]	; 0x74
    d9a4:	str	r2, [sp, #68]	; 0x44
    d9a8:	bl	89ac <strlen@plt>
    d9ac:	ldr	r3, [sp, #112]	; 0x70
    d9b0:	cmp	r5, r4
    d9b4:	add	r2, sp, #23
    d9b8:	str	sl, [sp, #28]
    d9bc:	str	r9, [sp, #24]
    d9c0:	str	r3, [sp, #40]	; 0x28
    d9c4:	mov	r3, #1
    d9c8:	str	r2, [sp, #32]
    d9cc:	str	r3, [sp, #44]	; 0x2c
    d9d0:	add	r0, r0, r3
    d9d4:	str	r0, [sp, #36]	; 0x24
    d9d8:	beq	da34 <__assert_fail@plt+0x5004>
    d9dc:	cmp	r5, #19
    d9e0:	add	sl, sp, #24
    d9e4:	add	r9, sp, #36	; 0x24
    d9e8:	bhi	d9fc <__assert_fail@plt+0x4fcc>
    d9ec:	b	da4c <__assert_fail@plt+0x501c>
    d9f0:	rsb	ip, r4, r5
    d9f4:	cmp	ip, #19
    d9f8:	bls	da50 <__assert_fail@plt+0x5020>
    d9fc:	add	r3, r8, r4
    da00:	str	r9, [sp]
    da04:	str	r3, [sp, #4]
    da08:	mov	r0, r6
    da0c:	mov	r3, sl
    da10:	add	r4, r4, #20
    da14:	mov	r1, r7
    da18:	mov	r2, #3
    da1c:	bl	d768 <__assert_fail@plt+0x4d38>
    da20:	ldrb	r3, [sp, #23]
    da24:	cmp	r5, r4
    da28:	add	r3, r3, #1
    da2c:	strb	r3, [sp, #23]
    da30:	bhi	d9f0 <__assert_fail@plt+0x4fc0>
    da34:	ldr	r2, [sp, #68]	; 0x44
    da38:	ldr	r3, [fp]
    da3c:	cmp	r2, r3
    da40:	bne	da8c <__assert_fail@plt+0x505c>
    da44:	add	sp, sp, #76	; 0x4c
    da48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da4c:	mov	ip, r5
    da50:	mov	r0, r6
    da54:	mov	r1, r7
    da58:	add	r5, sp, #48	; 0x30
    da5c:	str	r9, [sp]
    da60:	mov	r3, sl
    da64:	str	r5, [sp, #4]
    da68:	mov	r2, #3
    da6c:	str	ip, [sp, #12]
    da70:	bl	d768 <__assert_fail@plt+0x4d38>
    da74:	ldr	ip, [sp, #12]
    da78:	mov	r1, r5
    da7c:	add	r0, r8, r4
    da80:	mov	r2, ip
    da84:	bl	8904 <memcpy@plt>
    da88:	b	da34 <__assert_fail@plt+0x5004>
    da8c:	bl	8940 <__stack_chk_fail@plt>
    da90:	muleq	r0, r0, r6
    da94:	andeq	r0, r0, r4, lsl #1
    da98:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
    da9c:	sub	sp, sp, #48	; 0x30
    daa0:	ldr	r3, [r1]
    daa4:	movw	ip, #42104	; 0xa478
    daa8:	ldr	r5, [r0, #8]
    daac:	movt	ip, #55146	; 0xd76a
    dab0:	ldr	r4, [r0, #12]
    dab4:	movw	r2, #46934	; 0xb756
    dab8:	str	r3, [sp]
    dabc:	movt	r2, #59591	; 0xe8c7
    dac0:	ldr	r6, [r0, #4]
    dac4:	eor	r3, r4, r5
    dac8:	ldr	r7, [sp]
    dacc:	movw	fp, #50730	; 0xc62a
    dad0:	ldr	r8, [r0]
    dad4:	and	r3, r3, r6
    dad8:	add	ip, r7, ip
    dadc:	eor	r3, r3, r4
    dae0:	add	ip, ip, r8
    dae4:	ldr	r9, [r1, #4]
    dae8:	add	r3, ip, r3
    daec:	ldr	ip, [r0, #4]
    daf0:	eor	r6, r5, r6
    daf4:	add	r2, r9, r2
    daf8:	add	r3, ip, r3, ror #25
    dafc:	ldr	sl, [r1, #8]
    db00:	and	r6, r3, r6
    db04:	add	r2, r2, r4
    db08:	eor	r6, r6, r5
    db0c:	movw	r4, #28891	; 0x70db
    db10:	add	r6, r2, r6
    db14:	movt	r4, #9248	; 0x2420
    db18:	add	r4, sl, r4
    db1c:	ldr	r2, [r1, #12]
    db20:	add	r6, r3, r6, ror #20
    db24:	add	r4, r4, r5
    db28:	eor	ip, r3, ip
    db2c:	ldr	r5, [r0, #4]
    db30:	and	ip, r6, ip
    db34:	str	r2, [sp, #12]
    db38:	eor	ip, ip, r5
    db3c:	ldr	r8, [sp, #12]
    db40:	add	ip, r4, ip
    db44:	eor	r2, r6, r3
    db48:	movw	r4, #52974	; 0xceee
    db4c:	movt	r4, #49597	; 0xc1bd
    db50:	add	ip, r6, ip, ror #15
    db54:	add	r4, r8, r4
    db58:	and	r2, ip, r2
    db5c:	add	r4, r4, r5
    db60:	eor	r2, r2, r3
    db64:	ldr	r7, [r1, #16]
    db68:	add	r2, r4, r2
    db6c:	movw	r5, #4015	; 0xfaf
    db70:	eor	r4, ip, r6
    db74:	movt	r5, #62844	; 0xf57c
    db78:	add	r2, ip, r2, ror #10
    db7c:	add	r5, r7, r5
    db80:	and	r4, r2, r4
    db84:	add	r3, r5, r3
    db88:	eor	r4, r4, r6
    db8c:	str	r9, [sp, #4]
    db90:	add	r3, r3, r4
    db94:	ldr	r9, [r1, #20]
    db98:	eor	r4, r2, ip
    db9c:	movt	fp, #18311	; 0x4787
    dba0:	add	r3, r2, r3, ror #25
    dba4:	add	fp, r9, fp
    dba8:	and	r4, r3, r4
    dbac:	add	r6, fp, r6
    dbb0:	eor	r4, r4, ip
    dbb4:	str	sl, [sp, #8]
    dbb8:	add	r6, r6, r4
    dbbc:	ldr	sl, [r1, #24]
    dbc0:	eor	r4, r3, r2
    dbc4:	movw	r5, #17939	; 0x4613
    dbc8:	add	r6, r3, r6, ror #20
    dbcc:	movt	r5, #43056	; 0xa830
    dbd0:	str	r7, [sp, #16]
    dbd4:	add	r5, sl, r5
    dbd8:	ldr	r7, [r1, #28]
    dbdc:	and	r4, r6, r4
    dbe0:	eor	r4, r4, r2
    dbe4:	add	ip, r5, ip
    dbe8:	movw	r5, #38145	; 0x9501
    dbec:	movt	r5, #64838	; 0xfd46
    dbf0:	add	r5, r7, r5
    dbf4:	add	ip, ip, r4
    dbf8:	add	r2, r5, r2
    dbfc:	ldr	r5, [r1, #32]
    dc00:	add	ip, r6, ip, ror #15
    dc04:	eor	r4, r6, r3
    dc08:	and	r4, ip, r4
    dc0c:	str	r9, [sp, #20]
    dc10:	str	r5, [sp, #28]
    dc14:	eor	r4, r4, r3
    dc18:	ldr	r9, [sp, #28]
    dc1c:	add	r2, r2, r4
    dc20:	movw	r5, #39128	; 0x98d8
    dc24:	movt	r5, #27008	; 0x6980
    dc28:	add	r2, ip, r2, ror #10
    dc2c:	eor	r8, ip, r6
    dc30:	add	r5, r9, r5
    dc34:	str	sl, [sp, #24]
    dc38:	add	r3, r5, r3
    dc3c:	and	r5, r2, r8
    dc40:	eor	r5, r5, r6
    dc44:	ldr	sl, [r1, #36]	; 0x24
    dc48:	add	r5, r3, r5
    dc4c:	ldr	r3, [r1, #40]	; 0x28
    dc50:	eor	r4, r2, ip
    dc54:	movw	fp, #63407	; 0xf7af
    dc58:	add	r5, r2, r5, ror #25
    dc5c:	movt	fp, #35652	; 0x8b44
    dc60:	add	fp, sl, fp
    dc64:	and	r4, r5, r4
    dc68:	str	r3, [sp, #36]	; 0x24
    dc6c:	eor	r4, r4, ip
    dc70:	add	fp, fp, r6
    dc74:	eor	r3, r5, r2
    dc78:	add	fp, fp, r4
    dc7c:	ldr	r4, [sp, #36]	; 0x24
    dc80:	ldr	r6, [r1, #44]	; 0x2c
    dc84:	add	fp, r5, fp, ror #20
    dc88:	sub	r9, r4, #41984	; 0xa400
    dc8c:	sub	r9, r9, #79	; 0x4f
    dc90:	and	r3, fp, r3
    dc94:	eor	r3, r3, r2
    dc98:	add	ip, r9, ip
    dc9c:	add	r9, ip, r3
    dca0:	movw	r4, #55230	; 0xd7be
    dca4:	movt	r4, #35164	; 0x895c
    dca8:	eor	r3, fp, r5
    dcac:	add	r9, fp, r9, ror #15
    dcb0:	add	r4, r6, r4
    dcb4:	add	r2, r4, r2
    dcb8:	and	r4, r9, r3
    dcbc:	eor	r4, r4, r5
    dcc0:	str	sl, [sp, #32]
    dcc4:	add	r4, r2, r4
    dcc8:	str	r6, [sp, #40]	; 0x28
    dccc:	ldr	ip, [r1, #48]	; 0x30
    dcd0:	movw	r3, #4386	; 0x1122
    dcd4:	ldr	r8, [r1, #52]	; 0x34
    dcd8:	movt	r3, #27536	; 0x6b90
    dcdc:	add	r4, r9, r4, ror #10
    dce0:	eor	r6, r9, fp
    dce4:	add	r3, ip, r3
    dce8:	eor	r2, r4, r9
    dcec:	add	r5, r3, r5
    dcf0:	and	r3, r4, r6
    dcf4:	str	r8, [sp, #44]	; 0x2c
    dcf8:	eor	r3, r3, fp
    dcfc:	ldr	sl, [sp, #44]	; 0x2c
    dd00:	add	r3, r5, r3
    dd04:	movw	r8, #29075	; 0x7193
    dd08:	movt	r8, #64920	; 0xfd98
    dd0c:	add	r3, r4, r3, ror #25
    dd10:	add	r8, sl, r8
    dd14:	add	fp, r8, fp
    dd18:	and	r8, r3, r2
    dd1c:	eor	r8, r8, r9
    dd20:	ldr	r5, [r1, #56]	; 0x38
    dd24:	add	r8, fp, r8
    dd28:	movw	r6, #17294	; 0x438e
    dd2c:	movt	r6, #42617	; 0xa679
    dd30:	eor	r2, r3, r4
    dd34:	add	r8, r3, r8, ror #20
    dd38:	add	r6, r5, r6
    dd3c:	add	r9, r6, r9
    dd40:	and	r6, r8, r2
    dd44:	eor	r6, r6, r4
    dd48:	ldr	r1, [r1, #60]	; 0x3c
    dd4c:	add	r6, r9, r6
    dd50:	movw	r2, #2081	; 0x821
    dd54:	movt	r2, #18868	; 0x49b4
    dd58:	eor	r9, r8, r3
    dd5c:	add	r6, r8, r6, ror #15
    dd60:	add	r2, r1, r2
    dd64:	add	r4, r2, r4
    dd68:	and	r2, r6, r9
    dd6c:	ldr	r9, [sp, #4]
    dd70:	eor	r2, r2, r3
    dd74:	movw	sl, #9570	; 0x2562
    dd78:	movt	sl, #63006	; 0xf61e
    dd7c:	add	sl, r9, sl
    dd80:	add	r2, r4, r2
    dd84:	add	r3, sl, r3
    dd88:	ldr	sl, [sp, #24]
    dd8c:	add	r2, r6, r2, ror #10
    dd90:	movw	r4, #45888	; 0xb340
    dd94:	movt	r4, #49216	; 0xc040
    dd98:	movw	fp, #23121	; 0x5a51
    dd9c:	add	r4, sl, r4
    dda0:	eor	sl, r2, r6
    dda4:	and	sl, sl, r8
    dda8:	movt	fp, #9822	; 0x265e
    ddac:	eor	sl, sl, r6
    ddb0:	add	r4, r4, r8
    ddb4:	add	sl, r3, sl
    ddb8:	ldr	r3, [sp, #40]	; 0x28
    ddbc:	ldr	r9, [sp]
    ddc0:	movw	r8, #51114	; 0xc7aa
    ddc4:	add	sl, r2, sl, ror #27
    ddc8:	add	fp, r3, fp
    ddcc:	eor	r3, sl, r2
    ddd0:	movt	r8, #59830	; 0xe9b6
    ddd4:	and	r3, r3, r6
    ddd8:	add	r8, r9, r8
    dddc:	eor	r3, r3, r2
    dde0:	add	fp, fp, r6
    dde4:	add	r3, r4, r3
    dde8:	ldr	r4, [sp, #20]
    ddec:	add	r8, r8, r2
    ddf0:	movw	r6, #4189	; 0x105d
    ddf4:	add	r3, sl, r3, ror #23
    ddf8:	movt	r6, #54831	; 0xd62f
    ddfc:	eor	r9, r3, sl
    de00:	add	r6, r4, r6
    de04:	and	r9, r9, r2
    de08:	ldr	r2, [sp, #36]	; 0x24
    de0c:	eor	r9, r9, sl
    de10:	movw	r4, #5203	; 0x1453
    de14:	add	r9, fp, r9
    de18:	movt	r4, #580	; 0x244
    de1c:	add	r4, r2, r4
    de20:	add	r6, r6, sl
    de24:	add	r9, r3, r9, ror #18
    de28:	add	r2, r4, r3
    de2c:	eor	r4, r9, r3
    de30:	movw	fp, #59009	; 0xe681
    de34:	and	r4, r4, sl
    de38:	movt	fp, #55457	; 0xd8a1
    de3c:	eor	r4, r4, r3
    de40:	add	fp, r1, fp
    de44:	add	r4, r8, r4
    de48:	add	fp, fp, r9
    de4c:	movw	sl, #64456	; 0xfbc8
    de50:	movt	sl, #59347	; 0xe7d3
    de54:	add	r4, r9, r4, ror #12
    de58:	eor	r8, r4, r9
    de5c:	and	r8, r8, r3
    de60:	ldr	r3, [sp, #16]
    de64:	eor	r8, r8, r9
    de68:	add	r8, r6, r8
    de6c:	add	sl, r3, sl
    de70:	movw	r3, #52710	; 0xcde6
    de74:	movt	r3, #8673	; 0x21e1
    de78:	add	r8, r4, r8, ror #27
    de7c:	add	sl, sl, r4
    de80:	eor	r6, r8, r4
    de84:	and	r6, r6, r9
    de88:	ldr	r9, [sp, #32]
    de8c:	eor	r6, r6, r4
    de90:	add	r6, r2, r6
    de94:	add	r3, r9, r3
    de98:	add	r9, r3, r8
    de9c:	movw	r3, #2006	; 0x7d6
    dea0:	add	r6, r8, r6, ror #23
    dea4:	movt	r3, #49975	; 0xc337
    dea8:	eor	r2, r6, r8
    deac:	add	r3, r5, r3
    deb0:	and	r2, r2, r4
    deb4:	add	r4, r3, r6
    deb8:	eor	r2, r2, r8
    debc:	add	r2, fp, r2
    dec0:	movw	fp, #3463	; 0xd87
    dec4:	movt	fp, #62677	; 0xf4d5
    dec8:	add	r2, r6, r2, ror #18
    decc:	eor	r3, r2, r6
    ded0:	and	r3, r3, r8
    ded4:	movw	r8, #5357	; 0x14ed
    ded8:	eor	r3, r3, r6
    dedc:	movt	r8, #17754	; 0x455a
    dee0:	add	r3, sl, r3
    dee4:	ldr	sl, [sp, #12]
    dee8:	add	r3, r2, r3, ror #12
    deec:	add	fp, sl, fp
    def0:	eor	sl, r3, r2
    def4:	add	fp, fp, r2
    def8:	and	sl, sl, r6
    defc:	ldr	r6, [sp, #28]
    df00:	eor	sl, sl, r2
    df04:	add	sl, r9, sl
    df08:	add	r8, r6, r8
    df0c:	add	r8, r8, r3
    df10:	movw	r6, #59653	; 0xe905
    df14:	add	sl, r3, sl, ror #27
    df18:	movt	r6, #43491	; 0xa9e3
    df1c:	eor	r9, sl, r3
    df20:	and	r9, r9, r2
    df24:	ldr	r2, [sp, #44]	; 0x2c
    df28:	eor	r9, r9, r3
    df2c:	add	r9, r4, r9
    df30:	add	r6, r2, r6
    df34:	movw	r2, #41976	; 0xa3f8
    df38:	movt	r2, #64751	; 0xfcef
    df3c:	add	r9, sl, r9, ror #23
    df40:	add	r6, r6, sl
    df44:	eor	r4, r9, sl
    df48:	and	r4, r4, r3
    df4c:	ldr	r3, [sp, #8]
    df50:	eor	r4, r4, sl
    df54:	add	r4, fp, r4
    df58:	add	r2, r3, r2
    df5c:	add	r2, r2, r9
    df60:	movw	fp, #729	; 0x2d9
    df64:	add	r4, r9, r4, ror #18
    df68:	movt	fp, #26479	; 0x676f
    df6c:	eor	r3, r4, r9
    df70:	add	fp, r7, fp
    df74:	and	sl, r3, sl
    df78:	add	fp, fp, r4
    df7c:	eor	sl, sl, r9
    df80:	add	r8, r8, sl
    df84:	movw	sl, #14658	; 0x3942
    df88:	movt	sl, #65530	; 0xfffa
    df8c:	add	r8, r4, r8, ror #12
    df90:	eor	r3, r8, r4
    df94:	and	r9, r3, r9
    df98:	movw	r3, #19594	; 0x4c8a
    df9c:	eor	r9, r9, r4
    dfa0:	movt	r3, #36138	; 0x8d2a
    dfa4:	add	r6, r6, r9
    dfa8:	add	r3, ip, r3
    dfac:	add	r9, r3, r8
    dfb0:	add	r6, r8, r6, ror #27
    dfb4:	eor	r3, r6, r8
    dfb8:	and	r3, r3, r4
    dfbc:	ldr	r4, [sp, #20]
    dfc0:	eor	r3, r3, r8
    dfc4:	add	r3, r2, r3
    dfc8:	add	sl, r4, sl
    dfcc:	movw	r4, #63105	; 0xf681
    dfd0:	movt	r4, #34673	; 0x8771
    dfd4:	add	r3, r6, r3, ror #23
    dfd8:	add	sl, sl, r6
    dfdc:	eor	r2, r3, r6
    dfe0:	and	r2, r2, r8
    dfe4:	ldr	r8, [sp, #28]
    dfe8:	eor	r2, r2, r6
    dfec:	add	r2, fp, r2
    dff0:	add	r4, r8, r4
    dff4:	add	r8, r4, r3
    dff8:	movw	fp, #53305	; 0xd039
    dffc:	add	r2, r3, r2, ror #18
    e000:	movt	fp, #55764	; 0xd9d4
    e004:	eor	r4, r2, r3
    e008:	and	r6, r4, r6
    e00c:	eor	r3, r6, r3
    e010:	movw	r6, #24866	; 0x6122
    e014:	add	r3, r9, r3
    e018:	ldr	r9, [sp, #40]	; 0x28
    e01c:	movt	r6, #28061	; 0x6d9d
    e020:	add	r3, r2, r3, ror #12
    e024:	add	r6, r9, r6
    e028:	eor	r4, r3, r4
    e02c:	add	r6, r6, r2
    e030:	add	r4, sl, r4
    e034:	eor	r2, r3, r2
    e038:	movw	r9, #14348	; 0x380c
    e03c:	movt	r9, #64997	; 0xfde5
    e040:	add	r4, r3, r4, ror #28
    e044:	add	r9, r5, r9
    e048:	eor	r2, r2, r4
    e04c:	add	r9, r9, r3
    e050:	add	r2, r8, r2
    e054:	eor	r3, r4, r3
    e058:	ldr	r8, [sp, #4]
    e05c:	movw	sl, #59972	; 0xea44
    e060:	add	r2, r4, r2, ror #21
    e064:	movt	sl, #42174	; 0xa4be
    e068:	eor	r3, r3, r2
    e06c:	add	sl, r8, sl
    e070:	add	r3, r6, r3
    e074:	add	sl, sl, r4
    e078:	eor	r4, r2, r4
    e07c:	ldr	r6, [sp, #16]
    e080:	add	r3, r2, r3, ror #16
    e084:	movw	r8, #53161	; 0xcfa9
    e088:	eor	r4, r4, r3
    e08c:	movt	r8, #19422	; 0x4bde
    e090:	add	r4, r9, r4
    e094:	add	r8, r6, r8
    e098:	add	r8, r8, r2
    e09c:	eor	r2, r3, r2
    e0a0:	add	r4, r3, r4, ror #9
    e0a4:	movw	r6, #19296	; 0x4b60
    e0a8:	eor	r2, r2, r4
    e0ac:	movt	r6, #63163	; 0xf6bb
    e0b0:	add	r2, sl, r2
    e0b4:	add	r6, r7, r6
    e0b8:	add	r6, r6, r3
    e0bc:	eor	r3, r4, r3
    e0c0:	add	r2, r4, r2, ror #28
    e0c4:	ldr	sl, [sp, #36]	; 0x24
    e0c8:	eor	r3, r3, r2
    e0cc:	movw	r9, #48240	; 0xbc70
    e0d0:	add	r3, r8, r3
    e0d4:	movt	r9, #48831	; 0xbebf
    e0d8:	add	r9, sl, r9
    e0dc:	ldr	r8, [sp, #44]	; 0x2c
    e0e0:	add	r3, r2, r3, ror #21
    e0e4:	add	r9, r9, r4
    e0e8:	eor	r4, r2, r4
    e0ec:	movw	sl, #32454	; 0x7ec6
    e0f0:	eor	r4, r4, r3
    e0f4:	movt	sl, #10395	; 0x289b
    e0f8:	add	r6, r6, r4
    e0fc:	add	sl, r8, sl
    e100:	add	sl, sl, r2
    e104:	eor	r2, r3, r2
    e108:	add	r6, r3, r6, ror #16
    e10c:	ldr	r4, [sp]
    e110:	eor	r2, r2, r6
    e114:	movw	r8, #10234	; 0x27fa
    e118:	add	r2, r9, r2
    e11c:	movt	r8, #60065	; 0xeaa1
    e120:	add	r8, r4, r8
    e124:	ldr	r9, [sp, #12]
    e128:	add	r2, r6, r2, ror #9
    e12c:	add	r8, r8, r3
    e130:	eor	r3, r6, r3
    e134:	movw	r4, #12421	; 0x3085
    e138:	eor	r3, r3, r2
    e13c:	movt	r4, #54511	; 0xd4ef
    e140:	add	r3, sl, r3
    e144:	add	r4, r9, r4
    e148:	add	r4, r4, r6
    e14c:	eor	r6, r2, r6
    e150:	add	r3, r2, r3, ror #28
    e154:	ldr	sl, [sp, #24]
    e158:	eor	r6, r6, r3
    e15c:	movw	r9, #7429	; 0x1d05
    e160:	add	r8, r8, r6
    e164:	movt	r9, #1160	; 0x488
    e168:	add	r9, sl, r9
    e16c:	ldr	r6, [sp, #32]
    e170:	add	r8, r3, r8, ror #21
    e174:	add	r9, r9, r2
    e178:	eor	r2, r3, r2
    e17c:	add	fp, r6, fp
    e180:	eor	r2, r2, r8
    e184:	add	fp, fp, r3
    e188:	add	r2, r4, r2
    e18c:	eor	r3, r8, r3
    e190:	movw	r6, #39397	; 0x99e5
    e194:	movt	r6, #59099	; 0xe6db
    e198:	add	r2, r8, r2, ror #16
    e19c:	add	r6, ip, r6
    e1a0:	eor	r3, r3, r2
    e1a4:	add	r6, r6, r8
    e1a8:	add	r3, r9, r3
    e1ac:	eor	r8, r2, r8
    e1b0:	movw	r4, #31992	; 0x7cf8
    e1b4:	movt	r4, #8098	; 0x1fa2
    e1b8:	add	r3, r2, r3, ror #9
    e1bc:	add	r4, r1, r4
    e1c0:	eor	r8, r8, r3
    e1c4:	add	r4, r4, r2
    e1c8:	add	fp, fp, r8
    e1cc:	eor	r2, r3, r2
    e1d0:	ldr	r8, [sp, #8]
    e1d4:	movw	sl, #22117	; 0x5665
    e1d8:	add	fp, r3, fp, ror #28
    e1dc:	movt	sl, #50348	; 0xc4ac
    e1e0:	eor	r2, r2, fp
    e1e4:	add	sl, r8, sl
    e1e8:	add	r2, r6, r2
    e1ec:	add	sl, sl, r3
    e1f0:	eor	r3, fp, r3
    e1f4:	ldr	r9, [sp]
    e1f8:	add	r2, fp, r2, ror #21
    e1fc:	movw	r8, #8772	; 0x2244
    e200:	eor	r3, r3, r2
    e204:	movt	r8, #62505	; 0xf429
    e208:	add	r3, r4, r3
    e20c:	add	r8, r9, r8
    e210:	add	r8, r8, fp
    e214:	eor	fp, r2, fp
    e218:	add	r3, r2, r3, ror #16
    e21c:	mvn	r9, r2
    e220:	eor	fp, fp, r3
    e224:	movw	r4, #9127	; 0x23a7
    e228:	add	sl, sl, fp
    e22c:	movt	r4, #43924	; 0xab94
    e230:	add	r4, r5, r4
    e234:	movw	r6, #65431	; 0xff97
    e238:	add	sl, r3, sl, ror #9
    e23c:	movt	r6, #17194	; 0x432a
    e240:	orr	r9, sl, r9
    e244:	add	r6, r7, r6
    e248:	eor	r9, r9, r3
    e24c:	mvn	r7, r3
    e250:	add	r9, r8, r9
    e254:	add	r4, r4, r3
    e258:	ldr	r3, [sp, #20]
    e25c:	add	r2, r6, r2
    e260:	add	r9, sl, r9, ror #26
    e264:	movw	r6, #41017	; 0xa039
    e268:	movt	r6, #64659	; 0xfc93
    e26c:	orr	r7, r9, r7
    e270:	add	r6, r3, r6
    e274:	mvn	r5, sl
    e278:	add	r6, r6, sl
    e27c:	eor	sl, r7, sl
    e280:	add	r2, r2, sl
    e284:	movw	fp, #22979	; 0x59c3
    e288:	movt	fp, #25947	; 0x655b
    e28c:	mvn	r3, r9
    e290:	add	r2, r9, r2, ror #22
    e294:	add	fp, ip, fp
    e298:	orr	r5, r2, r5
    e29c:	add	fp, fp, r9
    e2a0:	eor	r9, r5, r9
    e2a4:	ldr	r7, [sp, #12]
    e2a8:	add	r4, r4, r9
    e2ac:	movw	ip, #52370	; 0xcc92
    e2b0:	movt	ip, #36620	; 0x8f0c
    e2b4:	mvn	r8, r2
    e2b8:	add	r4, r2, r4, ror #17
    e2bc:	add	ip, r7, ip
    e2c0:	orr	r3, r4, r3
    e2c4:	add	ip, ip, r2
    e2c8:	eor	r2, r3, r2
    e2cc:	ldr	r9, [sp, #36]	; 0x24
    e2d0:	add	r6, r6, r2
    e2d4:	movw	r7, #62589	; 0xf47d
    e2d8:	movt	r7, #65519	; 0xffef
    e2dc:	movw	r5, #32335	; 0x7e4f
    e2e0:	add	r6, r4, r6, ror #11
    e2e4:	add	r7, r9, r7
    e2e8:	orr	r8, r6, r8
    e2ec:	add	r7, r7, r4
    e2f0:	mvn	r9, r4
    e2f4:	eor	r4, r8, r4
    e2f8:	add	r4, fp, r4
    e2fc:	ldr	r8, [sp, #28]
    e300:	movt	r5, #28584	; 0x6fa8
    e304:	mvn	r3, r6
    e308:	add	r4, r6, r4, ror #26
    e30c:	add	r5, r8, r5
    e310:	orr	r9, r4, r9
    e314:	add	r5, r5, r4
    e318:	eor	r9, r9, r6
    e31c:	mvn	r8, r4
    e320:	add	ip, ip, r9
    e324:	ldr	r2, [sp, #4]
    e328:	movw	sl, #24017	; 0x5dd1
    e32c:	movt	sl, #34180	; 0x8584
    e330:	add	ip, r4, ip, ror #22
    e334:	add	sl, r2, sl
    e338:	orr	r3, ip, r3
    e33c:	add	sl, sl, r6
    e340:	eor	r4, r3, r4
    e344:	ldr	r9, [sp, #24]
    e348:	add	r7, r7, r4
    e34c:	movw	r2, #59104	; 0xe6e0
    e350:	movt	r2, #65068	; 0xfe2c
    e354:	ldr	r3, [sp, #44]	; 0x2c
    e358:	add	r7, ip, r7, ror #17
    e35c:	add	r2, r1, r2
    e360:	orr	r8, r7, r8
    e364:	movw	r1, #17172	; 0x4314
    e368:	eor	r8, r8, ip
    e36c:	movt	r1, #41729	; 0xa301
    e370:	add	sl, sl, r8
    e374:	add	r1, r9, r1
    e378:	mvn	r9, ip
    e37c:	movw	fp, #4513	; 0x11a1
    e380:	add	sl, r7, sl, ror #11
    e384:	movt	fp, #19976	; 0x4e08
    e388:	orr	r9, sl, r9
    e38c:	add	fp, r3, fp
    e390:	eor	r9, r9, r7
    e394:	mvn	r3, r7
    e398:	add	r5, r5, r9
    e39c:	add	r2, r2, ip
    e3a0:	ldr	r4, [sp, #16]
    e3a4:	add	r1, r1, r7
    e3a8:	add	r5, sl, r5, ror #26
    e3ac:	ldr	r7, [sp, #40]	; 0x28
    e3b0:	orr	r3, r5, r3
    e3b4:	movw	r6, #32386	; 0x7e82
    e3b8:	eor	r3, r3, sl
    e3bc:	movt	r6, #63315	; 0xf753
    e3c0:	add	r2, r2, r3
    e3c4:	add	r6, r4, r6
    e3c8:	mvn	ip, sl
    e3cc:	movw	r4, #62005	; 0xf235
    e3d0:	add	r2, r5, r2, ror #22
    e3d4:	movt	r4, #48442	; 0xbd3a
    e3d8:	orr	ip, r2, ip
    e3dc:	add	r4, r7, r4
    e3e0:	add	r6, r6, r5
    e3e4:	mvn	r7, r5
    e3e8:	eor	r5, ip, r5
    e3ec:	add	fp, fp, sl
    e3f0:	add	r5, r1, r5
    e3f4:	mvn	r3, r2
    e3f8:	ldr	r9, [sp, #8]
    e3fc:	movw	r8, #53947	; 0xd2bb
    e400:	add	r5, r2, r5, ror #17
    e404:	ldr	sl, [sp, #32]
    e408:	orr	r7, r5, r7
    e40c:	movt	r8, #10967	; 0x2ad7
    e410:	eor	r7, r7, r2
    e414:	add	r8, r9, r8
    e418:	add	r7, fp, r7
    e41c:	movw	r9, #54161	; 0xd391
    e420:	movt	r9, #60294	; 0xeb86
    e424:	mvn	ip, r5
    e428:	add	r7, r5, r7, ror #11
    e42c:	add	r9, sl, r9
    e430:	orr	r3, r7, r3
    e434:	add	r4, r4, r2
    e438:	eor	r3, r3, r5
    e43c:	add	r9, r9, r7
    e440:	add	r6, r6, r3
    e444:	mvn	sl, r7
    e448:	ldr	r1, [r0]
    e44c:	add	r8, r8, r5
    e450:	add	r6, r7, r6, ror #26
    e454:	orr	ip, r6, ip
    e458:	add	r3, r6, r1
    e45c:	eor	r7, ip, r7
    e460:	mvn	r2, r6
    e464:	add	r4, r4, r7
    e468:	str	r3, [r0]
    e46c:	ldr	r5, [r0, #12]
    e470:	add	r4, r6, r4, ror #22
    e474:	ldr	r7, [r0, #8]
    e478:	orr	sl, r4, sl
    e47c:	add	r3, r4, r5
    e480:	eor	r6, sl, r6
    e484:	str	r3, [r0, #12]
    e488:	add	r8, r8, r6
    e48c:	ldr	r6, [r0, #4]
    e490:	add	r8, r4, r8, ror #17
    e494:	orr	r2, r8, r2
    e498:	add	r3, r8, r6
    e49c:	eor	r4, r2, r4
    e4a0:	add	r8, r8, r7
    e4a4:	add	r9, r9, r4
    e4a8:	str	r8, [r0, #8]
    e4ac:	add	r9, r3, r9, ror #11
    e4b0:	str	r9, [r0, #4]
    e4b4:	add	sp, sp, #48	; 0x30
    e4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
    e4bc:	bx	lr
    e4c0:	movw	r2, #8961	; 0x2301
    e4c4:	movw	r3, #43913	; 0xab89
    e4c8:	movt	r2, #26437	; 0x6745
    e4cc:	movt	r3, #61389	; 0xefcd
    e4d0:	stm	r0, {r2, r3}
    e4d4:	movw	r2, #56574	; 0xdcfe
    e4d8:	movw	r3, #21622	; 0x5476
    e4dc:	movt	r2, #39098	; 0x98ba
    e4e0:	movt	r3, #4146	; 0x1032
    e4e4:	str	r2, [r0, #8]
    e4e8:	str	r3, [r0, #12]
    e4ec:	mov	r3, #0
    e4f0:	str	r3, [r0, #16]
    e4f4:	str	r3, [r0, #20]
    e4f8:	bx	lr
    e4fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e500:	mov	sl, r2
    e504:	ldr	r3, [r0, #16]
    e508:	mov	r9, r0
    e50c:	mov	r8, r1
    e510:	add	r2, r3, r2, lsl #3
    e514:	str	r2, [r0, #16]
    e518:	cmp	r3, r2
    e51c:	ldr	r2, [r0, #20]
    e520:	ubfx	r3, r3, #3, #6
    e524:	addhi	r2, r2, #1
    e528:	cmp	r3, #0
    e52c:	add	r2, r2, sl, lsr #29
    e530:	addeq	r7, r0, #24
    e534:	str	r2, [r0, #20]
    e538:	beq	e570 <__assert_fail@plt+0x5b40>
    e53c:	rsb	r4, r3, #64	; 0x40
    e540:	add	r3, r3, #24
    e544:	cmp	sl, r4
    e548:	add	r0, r0, r3
    e54c:	bcc	e5e8 <__assert_fail@plt+0x5bb8>
    e550:	add	r7, r9, #24
    e554:	mov	r2, r4
    e558:	bl	8904 <memcpy@plt>
    e55c:	mov	r0, r9
    e560:	mov	r1, r7
    e564:	rsb	sl, r4, sl
    e568:	bl	da98 <__assert_fail@plt+0x5068>
    e56c:	add	r8, r8, r4
    e570:	cmp	sl, #63	; 0x3f
    e574:	bls	e5e4 <__assert_fail@plt+0x5bb4>
    e578:	mov	fp, sl
    e57c:	mov	r4, r8
    e580:	add	ip, r4, #64	; 0x40
    e584:	mov	r3, r7
    e588:	ldr	r2, [r4]
    e58c:	add	r4, r4, #16
    e590:	ldr	r6, [r4, #-12]
    e594:	add	r3, r3, #16
    e598:	ldr	r5, [r4, #-8]
    e59c:	ldr	lr, [r4, #-4]
    e5a0:	cmp	r4, ip
    e5a4:	str	r2, [r3, #-16]
    e5a8:	str	r6, [r3, #-12]
    e5ac:	str	r5, [r3, #-8]
    e5b0:	str	lr, [r3, #-4]
    e5b4:	bne	e588 <__assert_fail@plt+0x5b58>
    e5b8:	sub	fp, fp, #64	; 0x40
    e5bc:	mov	r0, r9
    e5c0:	mov	r1, r7
    e5c4:	bl	da98 <__assert_fail@plt+0x5068>
    e5c8:	cmp	fp, #63	; 0x3f
    e5cc:	bhi	e580 <__assert_fail@plt+0x5b50>
    e5d0:	sub	r3, sl, #64	; 0x40
    e5d4:	and	sl, sl, #63	; 0x3f
    e5d8:	bic	r3, r3, #63	; 0x3f
    e5dc:	add	r3, r3, #64	; 0x40
    e5e0:	add	r8, r8, r3
    e5e4:	mov	r0, r7
    e5e8:	mov	r1, r8
    e5ec:	mov	r2, sl
    e5f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5f4:	b	8904 <memcpy@plt>
    e5f8:	push	{r3, r4, r5, r6, r7, lr}
    e5fc:	mov	r4, r1
    e600:	ldr	r3, [r1, #16]
    e604:	mov	r5, r0
    e608:	mvn	ip, #127	; 0x7f
    e60c:	ubfx	r3, r3, #3, #6
    e610:	rsb	r2, r3, #63	; 0x3f
    e614:	add	r1, r1, r3
    e618:	cmp	r2, #7
    e61c:	add	r0, r1, #25
    e620:	strb	ip, [r1, #24]
    e624:	bls	e688 <__assert_fail@plt+0x5c58>
    e628:	rsb	r2, r3, #55	; 0x37
    e62c:	mov	r1, #0
    e630:	add	r6, r4, #24
    e634:	bl	89d0 <memset@plt>
    e638:	ldr	r2, [r4, #16]
    e63c:	mov	r1, r6
    e640:	ldr	r3, [r4, #20]
    e644:	mov	r0, r4
    e648:	str	r2, [r4, #80]	; 0x50
    e64c:	str	r3, [r4, #84]	; 0x54
    e650:	bl	da98 <__assert_fail@plt+0x5068>
    e654:	ldr	r7, [r4]
    e658:	ldr	r6, [r4, #4]
    e65c:	mov	r0, r4
    e660:	ldr	ip, [r4, #8]
    e664:	mov	r1, #0
    e668:	ldr	r3, [r4, #12]
    e66c:	mov	r2, #88	; 0x58
    e670:	str	r7, [r5]
    e674:	str	r6, [r5, #4]
    e678:	str	ip, [r5, #8]
    e67c:	str	r3, [r5, #12]
    e680:	pop	{r3, r4, r5, r6, r7, lr}
    e684:	b	89d0 <memset@plt>
    e688:	add	r6, r4, #24
    e68c:	mov	r1, #0
    e690:	bl	89d0 <memset@plt>
    e694:	mov	r0, r4
    e698:	mov	r1, r6
    e69c:	bl	da98 <__assert_fail@plt+0x5068>
    e6a0:	mov	r0, r6
    e6a4:	mov	r1, #0
    e6a8:	mov	r2, #56	; 0x38
    e6ac:	bl	89d0 <memset@plt>
    e6b0:	b	e638 <__assert_fail@plt+0x5c08>
    e6b4:	push	{r4}		; (str r4, [sp, #-4]!)
    e6b8:	movw	ip, #35173	; 0x8965
    e6bc:	ldr	r4, [pc, #68]	; e708 <__assert_fail@plt+0x5cd8>
    e6c0:	movt	ip, #27655	; 0x6c07
    e6c4:	mov	r2, r0
    e6c8:	mov	r3, #1
    e6cc:	add	r4, pc, r4
    e6d0:	mov	r1, r4
    e6d4:	str	r0, [r4]
    e6d8:	eor	r2, r2, r2, lsr #30
    e6dc:	add	r1, r1, #4
    e6e0:	mla	r2, ip, r2, r3
    e6e4:	add	r3, r3, #1
    e6e8:	cmp	r3, #624	; 0x270
    e6ec:	str	r2, [r1]
    e6f0:	bne	e6d8 <__assert_fail@plt+0x5ca8>
    e6f4:	ldr	r2, [pc, #16]	; e70c <__assert_fail@plt+0x5cdc>
    e6f8:	add	r2, pc, r2
    e6fc:	str	r3, [r2]
    e700:	pop	{r4}		; (ldr r4, [sp], #4)
    e704:	bx	lr
    e708:	ldrdeq	r9, [r0], -ip
    e70c:	muleq	r0, r8, r9
    e710:	ldr	r3, [pc, #916]	; eaac <__assert_fail@plt+0x607c>
    e714:	ldr	r2, [pc, #916]	; eab0 <__assert_fail@plt+0x6080>
    e718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e71c:	add	r3, pc, r3
    e720:	mov	sl, r1
    e724:	ldr	r1, [pc, #904]	; eab4 <__assert_fail@plt+0x6084>
    e728:	ldr	r2, [r3, r2]
    e72c:	sub	sp, sp, #60	; 0x3c
    e730:	add	r1, pc, r1
    e734:	mov	r7, r0
    e738:	ldr	r4, [r1, #2496]	; 0x9c0
    e73c:	ldr	r3, [r2]
    e740:	cmp	r4, #0
    e744:	str	r2, [sp, #4]
    e748:	str	r3, [sp, #52]	; 0x34
    e74c:	beq	e8ec <__assert_fail@plt+0x5ebc>
    e750:	cmp	sl, #0
    e754:	ble	e8b8 <__assert_fail@plt+0x5e88>
    e758:	ldr	r3, [pc, #856]	; eab8 <__assert_fail@plt+0x6088>
    e75c:	add	sl, r7, sl
    e760:	ldr	r9, [pc, #852]	; eabc <__assert_fail@plt+0x608c>
    e764:	add	r3, pc, r3
    e768:	ldr	r4, [pc, #848]	; eac0 <__assert_fail@plt+0x6090>
    e76c:	ldr	r6, [pc, #848]	; eac4 <__assert_fail@plt+0x6094>
    e770:	add	r9, pc, r9
    e774:	ldr	r5, [pc, #844]	; eac8 <__assert_fail@plt+0x6098>
    e778:	add	r4, pc, r4
    e77c:	ldr	r8, [pc, #840]	; eacc <__assert_fail@plt+0x609c>
    e780:	add	r6, pc, r6
    e784:	ldr	fp, [pc, #836]	; ead0 <__assert_fail@plt+0x60a0>
    e788:	add	r5, pc, r5
    e78c:	ldr	r1, [r3]
    e790:	add	r8, pc, r8
    e794:	add	fp, pc, fp
    e798:	cmp	r1, #624	; 0x270
    e79c:	blt	e8d4 <__assert_fail@plt+0x5ea4>
    e7a0:	movw	r3, #625	; 0x271
    e7a4:	cmp	r1, r3
    e7a8:	beq	e8e0 <__assert_fail@plt+0x5eb0>
    e7ac:	mov	r2, r9
    e7b0:	mov	r3, #0
    e7b4:	ldr	r0, [r2, #4]
    e7b8:	add	r2, r2, #4
    e7bc:	ldr	r1, [r3, r4]
    e7c0:	bic	r0, r0, #-2147483648	; 0x80000000
    e7c4:	ldr	ip, [r2, #1584]	; 0x630
    e7c8:	and	r1, r1, #-2147483648	; 0x80000000
    e7cc:	orr	r1, r0, r1
    e7d0:	and	r0, r1, #1
    e7d4:	eor	r1, ip, r1, lsr #1
    e7d8:	ldr	r0, [r6, r0, lsl #2]
    e7dc:	eor	r1, r1, r0
    e7e0:	str	r1, [r3, r4]
    e7e4:	add	r3, r3, #4
    e7e8:	cmp	r3, #908	; 0x38c
    e7ec:	bne	e7b4 <__assert_fail@plt+0x5d84>
    e7f0:	mov	r3, r9
    e7f4:	mov	r2, #227	; 0xe3
    e7f8:	movw	ip, #623	; 0x26f
    e7fc:	str	r4, [sp]
    e800:	ldr	r4, [r3, #908]	; 0x38c
    e804:	add	r2, r2, #1
    e808:	ldr	r0, [r3, #912]	; 0x390
    e80c:	cmp	r2, ip
    e810:	and	r1, r4, #-2147483648	; 0x80000000
    e814:	ldr	r4, [r3]
    e818:	bic	r0, r0, #-2147483648	; 0x80000000
    e81c:	add	r3, r3, #4
    e820:	orr	r1, r0, r1
    e824:	and	r0, r1, #1
    e828:	eor	r1, r4, r1, lsr #1
    e82c:	ldr	r0, [r5, r0, lsl #2]
    e830:	eor	r1, r1, r0
    e834:	str	r1, [r3, #904]	; 0x388
    e838:	bne	e800 <__assert_fail@plt+0x5dd0>
    e83c:	ldr	r2, [r8, #2492]	; 0x9bc
    e840:	mov	r1, #1
    e844:	ldr	r3, [r8]
    e848:	and	r2, r2, #-2147483648	; 0x80000000
    e84c:	ldr	ip, [r8, #1584]	; 0x630
    e850:	bic	r0, r3, #-2147483648	; 0x80000000
    e854:	ldr	r4, [sp]
    e858:	orr	r2, r0, r2
    e85c:	and	r0, r2, r1
    e860:	eor	r2, ip, r2, lsr r1
    e864:	ldr	r0, [r5, r0, lsl #2]
    e868:	eor	r2, r2, r0
    e86c:	str	r2, [r8, #2492]	; 0x9bc
    e870:	eor	ip, r3, r3, lsr #11
    e874:	movw	r2, #22144	; 0x5680
    e878:	movt	r2, #40236	; 0x9d2c
    e87c:	mov	r3, #0
    e880:	lsl	r0, ip, #7
    e884:	movt	r3, #61382	; 0xefc6
    e888:	and	r2, r0, r2
    e88c:	ldr	r0, [pc, #576]	; ead4 <__assert_fail@plt+0x60a4>
    e890:	eor	r2, r2, ip
    e894:	add	r0, pc, r0
    e898:	lsl	ip, r2, #15
    e89c:	and	r3, ip, r3
    e8a0:	str	r1, [r0]
    e8a4:	eor	r3, r3, r2
    e8a8:	eor	r3, r3, r3, lsr #18
    e8ac:	strb	r3, [r7], #1
    e8b0:	cmp	r7, sl
    e8b4:	bne	e798 <__assert_fail@plt+0x5d68>
    e8b8:	ldr	r5, [sp, #4]
    e8bc:	ldr	r2, [sp, #52]	; 0x34
    e8c0:	ldr	r3, [r5]
    e8c4:	cmp	r2, r3
    e8c8:	bne	eaa8 <__assert_fail@plt+0x6078>
    e8cc:	add	sp, sp, #60	; 0x3c
    e8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8d4:	ldr	r3, [fp, r1, lsl #2]
    e8d8:	add	r1, r1, #1
    e8dc:	b	e870 <__assert_fail@plt+0x5e40>
    e8e0:	movw	r0, #5489	; 0x1571
    e8e4:	bl	e6b4 <__assert_fail@plt+0x5c84>
    e8e8:	b	e7ac <__assert_fail@plt+0x5d7c>
    e8ec:	ldr	r0, [pc, #484]	; ead8 <__assert_fail@plt+0x60a8>
    e8f0:	ldr	r1, [pc, #484]	; eadc <__assert_fail@plt+0x60ac>
    e8f4:	add	r0, pc, r0
    e8f8:	add	r1, pc, r1
    e8fc:	bl	88ec <fopen@plt>
    e900:	str	r4, [sp, #12]
    e904:	str	r4, [sp, #16]
    e908:	str	r4, [sp, #20]
    e90c:	str	r4, [sp, #24]
    e910:	str	r4, [sp, #28]
    e914:	str	r4, [sp, #32]
    e918:	str	r4, [sp, #36]	; 0x24
    e91c:	str	r4, [sp, #40]	; 0x28
    e920:	str	r4, [sp, #44]	; 0x2c
    e924:	str	r4, [sp, #48]	; 0x30
    e928:	subs	r6, r0, #0
    e92c:	beq	ea60 <__assert_fail@plt+0x6030>
    e930:	add	r5, sp, #12
    e934:	mov	r0, r5
    e938:	mov	r1, #4
    e93c:	mov	r2, #1
    e940:	mov	r3, r6
    e944:	bl	8964 <fread@plt>
    e948:	add	r4, r4, #1
    e94c:	cmp	r0, #0
    e950:	beq	e960 <__assert_fail@plt+0x5f30>
    e954:	cmp	r4, #10
    e958:	add	r5, r5, #4
    e95c:	bne	e934 <__assert_fail@plt+0x5f04>
    e960:	mov	r0, r6
    e964:	bl	89dc <fclose@plt>
    e968:	movw	r0, #54954	; 0xd6aa
    e96c:	movt	r0, #299	; 0x12b
    e970:	bl	e6b4 <__assert_fail@plt+0x5c84>
    e974:	ldr	r0, [pc, #356]	; eae0 <__assert_fail@plt+0x60b0>
    e978:	movw	r6, #26125	; 0x660d
    e97c:	movt	r6, #25
    e980:	mov	ip, #624	; 0x270
    e984:	add	r0, pc, r0
    e988:	mov	r1, #0
    e98c:	mov	r3, #1
    e990:	ldr	r2, [r0]
    e994:	eor	r2, r2, r2, lsr #30
    e998:	add	r5, sp, #56	; 0x38
    e99c:	add	fp, r5, r1, lsl #2
    e9a0:	ldr	r8, [r0, r3, lsl #2]
    e9a4:	mul	r9, r6, r2
    e9a8:	add	r5, r3, #1
    e9ac:	ldr	r2, [fp, #-44]	; 0xffffffd4
    e9b0:	cmp	r5, #624	; 0x270
    e9b4:	eor	r8, r9, r8
    e9b8:	add	r2, r8, r2
    e9bc:	add	r2, r2, r1
    e9c0:	str	r2, [r0, r3, lsl #2]
    e9c4:	ldrge	r2, [r0, #2492]	; 0x9bc
    e9c8:	add	r1, r1, #1
    e9cc:	movlt	r3, r5
    e9d0:	movge	r3, #1
    e9d4:	strge	r2, [r0]
    e9d8:	cmp	r1, r4
    e9dc:	movge	r1, #0
    e9e0:	subs	ip, ip, #1
    e9e4:	bne	e994 <__assert_fail@plt+0x5f64>
    e9e8:	ldr	r4, [pc, #244]	; eae4 <__assert_fail@plt+0x60b4>
    e9ec:	movw	r0, #35685	; 0x8b65
    e9f0:	ldr	r5, [pc, #240]	; eae8 <__assert_fail@plt+0x60b8>
    e9f4:	movt	r0, #23896	; 0x5d58
    e9f8:	add	r4, pc, r4
    e9fc:	movw	ip, #623	; 0x26f
    ea00:	add	r5, pc, r5
    ea04:	b	ea10 <__assert_fail@plt+0x5fe0>
    ea08:	sub	r2, r3, #1
    ea0c:	ldr	r2, [r5, r2, lsl #2]
    ea10:	eor	r2, r2, r2, lsr #30
    ea14:	ldr	r1, [r4, r3, lsl #2]
    ea18:	mul	r2, r0, r2
    ea1c:	eor	r2, r2, r1
    ea20:	rsb	r2, r3, r2
    ea24:	str	r2, [r4, r3, lsl #2]
    ea28:	add	r3, r3, #1
    ea2c:	cmp	r3, #624	; 0x270
    ea30:	ldrge	r2, [r4, #2492]	; 0x9bc
    ea34:	movge	r3, #1
    ea38:	strge	r2, [r4]
    ea3c:	subs	ip, ip, #1
    ea40:	bne	ea08 <__assert_fail@plt+0x5fd8>
    ea44:	ldr	r3, [pc, #160]	; eaec <__assert_fail@plt+0x60bc>
    ea48:	mov	r1, #-2147483648	; 0x80000000
    ea4c:	mov	r2, #1
    ea50:	add	r3, pc, r3
    ea54:	str	r1, [r3]
    ea58:	str	r2, [r3, #2496]	; 0x9c0
    ea5c:	b	e750 <__assert_fail@plt+0x5d20>
    ea60:	bl	891c <time@plt>
    ea64:	mov	r4, r0
    ea68:	bl	8994 <clock@plt>
    ea6c:	ldr	r1, [r7]
    ea70:	movw	r2, #25198	; 0x626e
    ea74:	str	r4, [sp, #24]
    ea78:	movt	r2, #27753	; 0x6c69
    ea7c:	mov	r3, #25856	; 0x6500
    ea80:	str	r2, [sp, #16]
    ea84:	movt	r3, #26979	; 0x6963
    ea88:	mov	r4, #5
    ea8c:	str	r3, [sp, #20]
    ea90:	str	r1, [sp, #12]
    ea94:	str	r0, [sp, #28]
    ea98:	movw	r0, #54954	; 0xd6aa
    ea9c:	movt	r0, #299	; 0x12b
    eaa0:	bl	e6b4 <__assert_fail@plt+0x5c84>
    eaa4:	b	e974 <__assert_fail@plt+0x5f44>
    eaa8:	bl	8940 <__stack_chk_fail@plt>
    eaac:	ldrdeq	r9, [r0], -ip
    eab0:	andeq	r0, r0, r4, lsl #1
    eab4:	andeq	r9, r0, r8, ror r9
    eab8:	andeq	r9, r0, ip, lsr #18
    eabc:	andeq	r9, r0, r8, lsr r9
    eac0:	andeq	r9, r0, r0, lsr r9
    eac4:	muleq	r0, r0, pc	; <UNPREDICTABLE>
    eac8:	andeq	r0, r0, r8, lsl #31
    eacc:	andeq	r9, r0, r8, lsl r9
    ead0:	andeq	r9, r0, r4, lsl r9
    ead4:	strdeq	r9, [r0], -ip
    ead8:	andeq	r0, r0, r4, lsr #28
    eadc:	andeq	r0, r0, r0, lsr lr
    eae0:	andeq	r9, r0, r4, lsr #14
    eae4:			; <UNDEFINED> instruction: 0x000096b0
    eae8:	andeq	r9, r0, r8, lsr #13
    eaec:	andeq	r9, r0, r8, asr r6
    eaf0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    eaf4:	mov	r7, r0
    eaf8:	ldr	r6, [pc, #76]	; eb4c <__assert_fail@plt+0x611c>
    eafc:	mov	r8, r1
    eb00:	ldr	r5, [pc, #72]	; eb50 <__assert_fail@plt+0x6120>
    eb04:	mov	r9, r2
    eb08:	add	r6, pc, r6
    eb0c:	bl	88b4 <strtol@plt-0x20>
    eb10:	add	r5, pc, r5
    eb14:	rsb	r6, r5, r6
    eb18:	asrs	r6, r6, #2
    eb1c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    eb20:	sub	r5, r5, #4
    eb24:	mov	r4, #0
    eb28:	add	r4, r4, #1
    eb2c:	ldr	r3, [r5, #4]!
    eb30:	mov	r0, r7
    eb34:	mov	r1, r8
    eb38:	mov	r2, r9
    eb3c:	blx	r3
    eb40:	cmp	r4, r6
    eb44:	bne	eb28 <__assert_fail@plt+0x60f8>
    eb48:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    eb4c:	andeq	r9, r0, r8, ror #7
    eb50:	ldrdeq	r9, [r0], -ip
    eb54:	bx	lr

Disassembly of section .fini:

0000eb58 <.fini>:
    eb58:	push	{r3, lr}
    eb5c:	pop	{r3, pc}
