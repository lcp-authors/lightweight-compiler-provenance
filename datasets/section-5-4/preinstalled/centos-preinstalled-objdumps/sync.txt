
centos-preinstalled/sync:     file format elf32-littlearm


Disassembly of section .init:

00010e58 <.init>:
   10e58:	push	{r3, lr}
   10e5c:	bl	11268 <close@plt+0x18c>
   10e60:	pop	{r3, pc}

Disassembly of section .plt:

00010e64 <fdopen@plt-0x14>:
   10e64:	push	{lr}		; (str lr, [sp, #-4]!)
   10e68:	ldr	lr, [pc, #4]	; 10e74 <fdopen@plt-0x4>
   10e6c:	add	lr, pc, lr
   10e70:	ldr	pc, [lr, #8]!
   10e74:	andeq	r4, r1, ip, lsl #3

00010e78 <fdopen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #20, 20	; 0x14000
   10e80:	ldr	pc, [ip, #396]!	; 0x18c

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #20, 20	; 0x14000
   10e8c:	ldr	pc, [ip, #388]!	; 0x184

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #20, 20	; 0x14000
   10e98:	ldr	pc, [ip, #380]!	; 0x17c

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #20, 20	; 0x14000
   10ea4:	ldr	pc, [ip, #372]!	; 0x174

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #20, 20	; 0x14000
   10eb0:	ldr	pc, [ip, #364]!	; 0x16c

00010eb4 <fflush@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #20, 20	; 0x14000
   10ebc:	ldr	pc, [ip, #356]!	; 0x164

00010ec0 <free@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #20, 20	; 0x14000
   10ec8:	ldr	pc, [ip, #348]!	; 0x15c

00010ecc <_exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #20, 20	; 0x14000
   10ed4:	ldr	pc, [ip, #340]!	; 0x154

00010ed8 <memcpy@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #20, 20	; 0x14000
   10ee0:	ldr	pc, [ip, #332]!	; 0x14c

00010ee4 <mbsinit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #20, 20	; 0x14000
   10eec:	ldr	pc, [ip, #324]!	; 0x144

00010ef0 <memcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #20, 20	; 0x14000
   10ef8:	ldr	pc, [ip, #316]!	; 0x13c

00010efc <dcgettext@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #20, 20	; 0x14000
   10f04:	ldr	pc, [ip, #308]!	; 0x134

00010f08 <__stack_chk_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #20, 20	; 0x14000
   10f10:	ldr	pc, [ip, #300]!	; 0x12c

00010f14 <realloc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #20, 20	; 0x14000
   10f1c:	ldr	pc, [ip, #292]!	; 0x124

00010f20 <textdomain@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #20, 20	; 0x14000
   10f28:	ldr	pc, [ip, #284]!	; 0x11c

00010f2c <iswprint@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #20, 20	; 0x14000
   10f34:	ldr	pc, [ip, #276]!	; 0x114

00010f38 <fwrite@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #20, 20	; 0x14000
   10f40:	ldr	pc, [ip, #268]!	; 0x10c

00010f44 <lseek64@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #20, 20	; 0x14000
   10f4c:	ldr	pc, [ip, #260]!	; 0x104

00010f50 <__ctype_get_mb_cur_max@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #20, 20	; 0x14000
   10f58:	ldr	pc, [ip, #252]!	; 0xfc

00010f5c <strcpy@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #20, 20	; 0x14000
   10f64:	ldr	pc, [ip, #244]!	; 0xf4

00010f68 <__fpending@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #20, 20	; 0x14000
   10f70:	ldr	pc, [ip, #236]!	; 0xec

00010f74 <mbrtowc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #20, 20	; 0x14000
   10f7c:	ldr	pc, [ip, #228]!	; 0xe4

00010f80 <error@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #20, 20	; 0x14000
   10f88:	ldr	pc, [ip, #220]!	; 0xdc

00010f8c <open64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #20, 20	; 0x14000
   10f94:	ldr	pc, [ip, #212]!	; 0xd4

00010f98 <getenv@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #20, 20	; 0x14000
   10fa0:	ldr	pc, [ip, #204]!	; 0xcc

00010fa4 <malloc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #20, 20	; 0x14000
   10fac:	ldr	pc, [ip, #196]!	; 0xc4

00010fb0 <__libc_start_main@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #20, 20	; 0x14000
   10fb8:	ldr	pc, [ip, #188]!	; 0xbc

00010fbc <__freading@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #20, 20	; 0x14000
   10fc4:	ldr	pc, [ip, #180]!	; 0xb4

00010fc8 <__gmon_start__@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #20, 20	; 0x14000
   10fd0:	ldr	pc, [ip, #172]!	; 0xac

00010fd4 <getopt_long@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #20, 20	; 0x14000
   10fdc:	ldr	pc, [ip, #164]!	; 0xa4

00010fe0 <__ctype_b_loc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #20, 20	; 0x14000
   10fe8:	ldr	pc, [ip, #156]!	; 0x9c

00010fec <exit@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #20, 20	; 0x14000
   10ff4:	ldr	pc, [ip, #148]!	; 0x94

00010ff8 <strlen@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #20, 20	; 0x14000
   11000:	ldr	pc, [ip, #140]!	; 0x8c

00011004 <ungetc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #20, 20	; 0x14000
   1100c:	ldr	pc, [ip, #132]!	; 0x84

00011010 <__errno_location@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #20, 20	; 0x14000
   11018:	ldr	pc, [ip, #124]!	; 0x7c

0001101c <__cxa_atexit@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #20, 20	; 0x14000
   11024:	ldr	pc, [ip, #116]!	; 0x74

00011028 <memset@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #20, 20	; 0x14000
   11030:	ldr	pc, [ip, #108]!	; 0x6c

00011034 <fscanf@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #20, 20	; 0x14000
   1103c:	ldr	pc, [ip, #100]!	; 0x64

00011040 <__printf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #20, 20	; 0x14000
   11048:	ldr	pc, [ip, #92]!	; 0x5c

0001104c <fileno@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #20, 20	; 0x14000
   11054:	ldr	pc, [ip, #84]!	; 0x54

00011058 <__fprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #20, 20	; 0x14000
   11060:	ldr	pc, [ip, #76]!	; 0x4c

00011064 <fclose@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #20, 20	; 0x14000
   1106c:	ldr	pc, [ip, #68]!	; 0x44

00011070 <fseeko64@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #20, 20	; 0x14000
   11078:	ldr	pc, [ip, #60]!	; 0x3c

0001107c <__uflow@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #20, 20	; 0x14000
   11084:	ldr	pc, [ip, #52]!	; 0x34

00011088 <setlocale@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #20, 20	; 0x14000
   11090:	ldr	pc, [ip, #44]!	; 0x2c

00011094 <strrchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #20, 20	; 0x14000
   1109c:	ldr	pc, [ip, #36]!	; 0x24

000110a0 <nl_langinfo@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #28]!

000110ac <bindtextdomain@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #20]!

000110b8 <sync@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #12]!

000110c4 <strncmp@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #4]!

000110d0 <abort@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #77824	; 0x13000
   110d8:	ldr	pc, [ip, #4092]!	; 0xffc

000110dc <close@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #77824	; 0x13000
   110e4:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

000110e8 <usage@@Base-0x278>:
   110e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   110ec:	mov	r8, r0
   110f0:	ldr	r9, [pc, #264]	; 11200 <close@plt+0x124>
   110f4:	sub	sp, sp, #20
   110f8:	ldr	r0, [r1]
   110fc:	mov	r6, r1
   11100:	add	r9, pc, r9
   11104:	ldr	r7, [pc, #248]	; 11204 <close@plt+0x128>
   11108:	bl	1182c <close_stdout@@Base+0x2c8>
   1110c:	mov	r0, #6
   11110:	mov	r1, r9
   11114:	add	r7, pc, r7
   11118:	bl	11088 <setlocale@plt>
   1111c:	ldr	r1, [pc, #228]	; 11208 <close@plt+0x12c>
   11120:	mov	r0, r7
   11124:	ldr	r4, [pc, #224]	; 1120c <close@plt+0x130>
   11128:	add	r1, pc, r1
   1112c:	mov	r5, #0
   11130:	bl	110ac <bindtextdomain@plt>
   11134:	mov	r0, r7
   11138:	bl	10f20 <textdomain@plt>
   1113c:	ldr	r3, [pc, #204]	; 11210 <close@plt+0x134>
   11140:	add	r4, pc, r4
   11144:	ldr	r0, [r4, r3]
   11148:	bl	14160 <close_stdout@@Base+0x2bfc>
   1114c:	ldr	r2, [pc, #192]	; 11214 <close@plt+0x138>
   11150:	mov	r3, r7
   11154:	ldr	ip, [pc, #188]	; 11218 <close@plt+0x13c>
   11158:	ldr	lr, [pc, #188]	; 1121c <close@plt+0x140>
   1115c:	mov	r0, r8
   11160:	ldr	r7, [r4, r2]
   11164:	mov	r1, r6
   11168:	ldr	r2, [pc, #176]	; 11220 <close@plt+0x144>
   1116c:	add	lr, pc, lr
   11170:	ldr	r7, [r7]
   11174:	add	r2, pc, r2
   11178:	str	r7, [sp]
   1117c:	ldr	ip, [r4, ip]
   11180:	str	lr, [sp, #8]
   11184:	str	r5, [sp, #12]
   11188:	str	ip, [sp, #4]
   1118c:	bl	11720 <close_stdout@@Base+0x1bc>
   11190:	str	r5, [sp]
   11194:	mov	r1, r6
   11198:	mov	r2, r9
   1119c:	mov	r0, r8
   111a0:	mov	r3, r5
   111a4:	bl	10fd4 <getopt_long@plt>
   111a8:	cmn	r0, #1
   111ac:	beq	111b8 <close@plt+0xdc>
   111b0:	mov	r0, #1
   111b4:	bl	11360 <usage@@Base>
   111b8:	ldr	r3, [pc, #100]	; 11224 <close@plt+0x148>
   111bc:	ldr	r3, [r4, r3]
   111c0:	ldr	r3, [r3]
   111c4:	cmp	r8, r3
   111c8:	bgt	111d8 <close@plt+0xfc>
   111cc:	bl	110b8 <sync@plt>
   111d0:	mov	r0, #0
   111d4:	bl	10fec <exit@plt>
   111d8:	ldr	r1, [pc, #72]	; 11228 <close@plt+0x14c>
   111dc:	mov	r0, r5
   111e0:	mov	r2, #5
   111e4:	add	r1, pc, r1
   111e8:	bl	10efc <dcgettext@plt>
   111ec:	mov	r1, r5
   111f0:	mov	r2, r0
   111f4:	mov	r0, r5
   111f8:	bl	10f80 <error@plt>
   111fc:	b	111cc <close@plt+0xf0>
   11200:	andeq	r3, r0, ip, asr #4
   11204:	andeq	r3, r0, r8, ror r1
   11208:	andeq	r3, r0, r8, lsr #4
   1120c:			; <UNDEFINED> instruction: 0x00013eb8
   11210:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11214:	andeq	r0, r0, r8, ror #1
   11218:	andeq	r0, r0, r0, lsl #2
   1121c:	andeq	r3, r0, r0, lsl #4
   11220:	strdeq	r3, [r0], -r0
   11224:	andeq	r0, r0, r4, ror #1
   11228:	muleq	r0, r8, r1
   1122c:	mov	fp, #0
   11230:	mov	lr, #0
   11234:	pop	{r1}		; (ldr r1, [sp], #4)
   11238:	mov	r2, sp
   1123c:	push	{r2}		; (str r2, [sp, #-4]!)
   11240:	push	{r0}		; (str r0, [sp, #-4]!)
   11244:	ldr	ip, [pc, #16]	; 1125c <close@plt+0x180>
   11248:	push	{ip}		; (str ip, [sp, #-4]!)
   1124c:	ldr	r0, [pc, #12]	; 11260 <close@plt+0x184>
   11250:	ldr	r3, [pc, #12]	; 11264 <close@plt+0x188>
   11254:	bl	10fb0 <__libc_start_main@plt>
   11258:	bl	110d0 <abort@plt>
   1125c:	andeq	r4, r1, ip, asr r1
   11260:	andeq	r1, r1, r8, ror #1
   11264:	strdeq	r4, [r1], -r8
   11268:	ldr	r3, [pc, #20]	; 11284 <close@plt+0x1a8>
   1126c:	ldr	r2, [pc, #20]	; 11288 <close@plt+0x1ac>
   11270:	add	r3, pc, r3
   11274:	ldr	r2, [r3, r2]
   11278:	cmp	r2, #0
   1127c:	bxeq	lr
   11280:	b	10fc8 <__gmon_start__@plt>
   11284:	andeq	r3, r1, r8, lsl #27
   11288:	strdeq	r0, [r0], -r4
   1128c:	push	{r3, lr}
   11290:	movw	r0, #20840	; 0x5168
   11294:	ldr	r3, [pc, #36]	; 112c0 <close@plt+0x1e4>
   11298:	movt	r0, #2
   1129c:	rsb	r3, r0, r3
   112a0:	cmp	r3, #6
   112a4:	popls	{r3, pc}
   112a8:	movw	r3, #0
   112ac:	movt	r3, #0
   112b0:	cmp	r3, #0
   112b4:	popeq	{r3, pc}
   112b8:	blx	r3
   112bc:	pop	{r3, pc}
   112c0:	andeq	r5, r2, fp, ror #2
   112c4:	push	{r3, lr}
   112c8:	movw	r0, #20840	; 0x5168
   112cc:	movw	r3, #20840	; 0x5168
   112d0:	movt	r0, #2
   112d4:	movt	r3, #2
   112d8:	rsb	r3, r0, r3
   112dc:	asr	r3, r3, #2
   112e0:	add	r3, r3, r3, lsr #31
   112e4:	asrs	r1, r3, #1
   112e8:	popeq	{r3, pc}
   112ec:	movw	r2, #0
   112f0:	movt	r2, #0
   112f4:	cmp	r2, #0
   112f8:	popeq	{r3, pc}
   112fc:	blx	r2
   11300:	pop	{r3, pc}
   11304:	push	{r4, lr}
   11308:	movw	r4, #20840	; 0x5168
   1130c:	movt	r4, #2
   11310:	ldrb	r3, [r4]
   11314:	cmp	r3, #0
   11318:	popne	{r4, pc}
   1131c:	bl	1128c <close@plt+0x1b0>
   11320:	mov	r3, #1
   11324:	strb	r3, [r4]
   11328:	pop	{r4, pc}
   1132c:	movw	r0, #20144	; 0x4eb0
   11330:	movt	r0, #2
   11334:	push	{r3, lr}
   11338:	ldr	r3, [r0]
   1133c:	cmp	r3, #0
   11340:	beq	11358 <close@plt+0x27c>
   11344:	movw	r3, #0
   11348:	movt	r3, #0
   1134c:	cmp	r3, #0
   11350:	beq	11358 <close@plt+0x27c>
   11354:	blx	r3
   11358:	pop	{r3, lr}
   1135c:	b	112c4 <close@plt+0x1e8>

00011360 <usage@@Base>:
   11360:	push	{r4, r5, r6, lr}
   11364:	subs	r4, r0, #0
   11368:	ldr	r5, [pc, #400]	; 11500 <usage@@Base+0x1a0>
   1136c:	add	r5, pc, r5
   11370:	beq	113b8 <usage@@Base+0x58>
   11374:	ldr	r3, [pc, #392]	; 11504 <usage@@Base+0x1a4>
   11378:	mov	r2, #5
   1137c:	ldr	r1, [pc, #388]	; 11508 <usage@@Base+0x1a8>
   11380:	mov	r0, #0
   11384:	ldr	r3, [r5, r3]
   11388:	add	r1, pc, r1
   1138c:	ldr	r6, [r3]
   11390:	bl	10efc <dcgettext@plt>
   11394:	ldr	r3, [pc, #368]	; 1150c <usage@@Base+0x1ac>
   11398:	mov	r1, #1
   1139c:	ldr	r3, [r5, r3]
   113a0:	ldr	r3, [r3]
   113a4:	mov	r2, r0
   113a8:	mov	r0, r6
   113ac:	bl	11058 <__fprintf_chk@plt>
   113b0:	mov	r0, r4
   113b4:	bl	10fec <exit@plt>
   113b8:	ldr	r1, [pc, #336]	; 11510 <usage@@Base+0x1b0>
   113bc:	mov	r2, #5
   113c0:	add	r1, pc, r1
   113c4:	bl	10efc <dcgettext@plt>
   113c8:	ldr	r3, [pc, #316]	; 1150c <usage@@Base+0x1ac>
   113cc:	ldr	r6, [r5, r3]
   113d0:	ldr	r2, [r6]
   113d4:	mov	r1, r0
   113d8:	mov	r0, #1
   113dc:	bl	11040 <__printf_chk@plt>
   113e0:	ldr	r1, [pc, #300]	; 11514 <usage@@Base+0x1b4>
   113e4:	mov	r2, #5
   113e8:	mov	r0, r4
   113ec:	add	r1, pc, r1
   113f0:	bl	10efc <dcgettext@plt>
   113f4:	ldr	r3, [pc, #284]	; 11518 <usage@@Base+0x1b8>
   113f8:	ldr	r5, [r5, r3]
   113fc:	ldr	r1, [r5]
   11400:	bl	10e90 <fputs_unlocked@plt>
   11404:	ldr	r1, [pc, #272]	; 1151c <usage@@Base+0x1bc>
   11408:	mov	r2, #5
   1140c:	mov	r0, r4
   11410:	add	r1, pc, r1
   11414:	bl	10efc <dcgettext@plt>
   11418:	ldr	r1, [r5]
   1141c:	bl	10e90 <fputs_unlocked@plt>
   11420:	ldr	r1, [pc, #248]	; 11520 <usage@@Base+0x1c0>
   11424:	mov	r2, #5
   11428:	mov	r0, r4
   1142c:	add	r1, pc, r1
   11430:	bl	10efc <dcgettext@plt>
   11434:	ldr	r1, [r5]
   11438:	bl	10e90 <fputs_unlocked@plt>
   1143c:	ldr	r1, [pc, #224]	; 11524 <usage@@Base+0x1c4>
   11440:	mov	r2, #5
   11444:	mov	r0, r4
   11448:	add	r1, pc, r1
   1144c:	bl	10efc <dcgettext@plt>
   11450:	ldr	r2, [pc, #208]	; 11528 <usage@@Base+0x1c8>
   11454:	ldr	r3, [pc, #208]	; 1152c <usage@@Base+0x1cc>
   11458:	add	r2, pc, r2
   1145c:	add	r3, pc, r3
   11460:	mov	r1, r0
   11464:	mov	r0, #1
   11468:	bl	11040 <__printf_chk@plt>
   1146c:	mov	r0, #5
   11470:	mov	r1, r4
   11474:	bl	11088 <setlocale@plt>
   11478:	cmp	r0, #0
   1147c:	beq	11498 <usage@@Base+0x138>
   11480:	ldr	r1, [pc, #168]	; 11530 <usage@@Base+0x1d0>
   11484:	mov	r2, #3
   11488:	add	r1, pc, r1
   1148c:	bl	110c4 <strncmp@plt>
   11490:	cmp	r0, #0
   11494:	bne	114cc <usage@@Base+0x16c>
   11498:	ldr	r1, [pc, #148]	; 11534 <usage@@Base+0x1d4>
   1149c:	mov	r2, #5
   114a0:	mov	r0, #0
   114a4:	add	r1, pc, r1
   114a8:	bl	10efc <dcgettext@plt>
   114ac:	mov	r5, r0
   114b0:	ldr	r0, [r6]
   114b4:	bl	1167c <close_stdout@@Base+0x118>
   114b8:	mov	r1, r5
   114bc:	mov	r2, r0
   114c0:	mov	r0, #1
   114c4:	bl	11040 <__printf_chk@plt>
   114c8:	b	113b0 <usage@@Base+0x50>
   114cc:	ldr	r1, [pc, #100]	; 11538 <usage@@Base+0x1d8>
   114d0:	mov	r2, #5
   114d4:	mov	r0, r4
   114d8:	add	r1, pc, r1
   114dc:	bl	10efc <dcgettext@plt>
   114e0:	mov	r5, r0
   114e4:	ldr	r0, [r6]
   114e8:	bl	1167c <close_stdout@@Base+0x118>
   114ec:	mov	r1, r5
   114f0:	mov	r2, r0
   114f4:	mov	r0, #1
   114f8:	bl	11040 <__printf_chk@plt>
   114fc:	b	11498 <usage@@Base+0x138>
   11500:	andeq	r3, r1, ip, lsl #25
   11504:	andeq	r0, r0, ip, ror #1
   11508:	andeq	r2, r0, ip, lsl #28
   1150c:	andeq	r0, r0, ip, lsl #2
   11510:	strdeq	r2, [r0], -ip
   11514:	andeq	r2, r0, r4, ror #27
   11518:	strdeq	r0, [r0], -ip
   1151c:	strdeq	r2, [r0], -r8
   11520:	andeq	r2, r0, ip, lsl #28
   11524:	andeq	r2, r0, r8, lsr #28
   11528:	andeq	r2, r0, r0, lsr lr
   1152c:	andeq	r2, r0, ip, lsr lr
   11530:	andeq	r2, r0, r8, lsr lr
   11534:	andeq	r2, r0, r8, ror #28
   11538:	andeq	r2, r0, ip, ror #27
   1153c:	ldr	r3, [pc, #8]	; 1154c <usage@@Base+0x1ec>
   11540:	add	r3, pc, r3
   11544:	str	r0, [r3]
   11548:	bx	lr
   1154c:	andeq	r3, r1, r4, lsr #24
   11550:	ldr	r3, [pc, #8]	; 11560 <usage@@Base+0x200>
   11554:	add	r3, pc, r3
   11558:	strb	r0, [r3, #4]
   1155c:	bx	lr
   11560:	andeq	r3, r1, r0, lsl ip

00011564 <close_stdout@@Base>:
   11564:	push	{r4, r5, r6, r7, lr}
   11568:	sub	sp, sp, #12
   1156c:	ldr	r4, [pc, #228]	; 11658 <close_stdout@@Base+0xf4>
   11570:	ldr	r3, [pc, #228]	; 1165c <close_stdout@@Base+0xf8>
   11574:	add	r4, pc, r4
   11578:	ldr	r3, [r4, r3]
   1157c:	ldr	r0, [r3]
   11580:	bl	13894 <close_stdout@@Base+0x2330>
   11584:	cmp	r0, #0
   11588:	beq	115b0 <close_stdout@@Base+0x4c>
   1158c:	ldr	r3, [pc, #204]	; 11660 <close_stdout@@Base+0xfc>
   11590:	add	r3, pc, r3
   11594:	ldrb	r3, [r3, #4]
   11598:	cmp	r3, #0
   1159c:	beq	115d0 <close_stdout@@Base+0x6c>
   115a0:	bl	11010 <__errno_location@plt>
   115a4:	ldr	r3, [r0]
   115a8:	cmp	r3, #32
   115ac:	bne	115d0 <close_stdout@@Base+0x6c>
   115b0:	ldr	r3, [pc, #172]	; 11664 <close_stdout@@Base+0x100>
   115b4:	ldr	r3, [r4, r3]
   115b8:	ldr	r0, [r3]
   115bc:	bl	13894 <close_stdout@@Base+0x2330>
   115c0:	cmp	r0, #0
   115c4:	bne	11624 <close_stdout@@Base+0xc0>
   115c8:	add	sp, sp, #12
   115cc:	pop	{r4, r5, r6, r7, pc}
   115d0:	ldr	r1, [pc, #144]	; 11668 <close_stdout@@Base+0x104>
   115d4:	mov	r0, #0
   115d8:	mov	r2, #5
   115dc:	add	r1, pc, r1
   115e0:	bl	10efc <dcgettext@plt>
   115e4:	ldr	r3, [pc, #128]	; 1166c <close_stdout@@Base+0x108>
   115e8:	ldr	r5, [pc, r3]
   115ec:	cmp	r5, #0
   115f0:	mov	r6, r0
   115f4:	beq	11634 <close_stdout@@Base+0xd0>
   115f8:	bl	11010 <__errno_location@plt>
   115fc:	ldr	r7, [r0]
   11600:	mov	r0, r5
   11604:	bl	12f28 <close_stdout@@Base+0x19c4>
   11608:	ldr	r2, [pc, #96]	; 11670 <close_stdout@@Base+0x10c>
   1160c:	str	r6, [sp]
   11610:	mov	r1, r7
   11614:	add	r2, pc, r2
   11618:	mov	r3, r0
   1161c:	mov	r0, #0
   11620:	bl	10f80 <error@plt>
   11624:	ldr	r3, [pc, #72]	; 11674 <close_stdout@@Base+0x110>
   11628:	ldr	r3, [r4, r3]
   1162c:	ldr	r0, [r3]
   11630:	bl	10ecc <_exit@plt>
   11634:	bl	11010 <__errno_location@plt>
   11638:	ldr	r2, [pc, #56]	; 11678 <close_stdout@@Base+0x114>
   1163c:	add	r2, pc, r2
   11640:	mov	r3, r0
   11644:	mov	r0, r5
   11648:	ldr	r1, [r3]
   1164c:	mov	r3, r6
   11650:	bl	10f80 <error@plt>
   11654:	b	11624 <close_stdout@@Base+0xc0>
   11658:	andeq	r3, r1, r4, lsl #21
   1165c:	strdeq	r0, [r0], -ip
   11660:	ldrdeq	r3, [r1], -r4
   11664:	andeq	r0, r0, ip, ror #1
   11668:	andeq	r2, r0, r0, asr #27
   1166c:	andeq	r3, r1, ip, ror fp
   11670:	muleq	r0, r4, sp
   11674:	andeq	r0, r0, r4, lsl #2
   11678:	andeq	r2, r0, r0, ror sp
   1167c:	ldrb	r3, [r0]
   11680:	cmp	r3, #47	; 0x2f
   11684:	bne	116a0 <close_stdout@@Base+0x13c>
   11688:	add	r2, r0, #1
   1168c:	mov	r0, r2
   11690:	add	r2, r2, #1
   11694:	ldrb	r3, [r0]
   11698:	cmp	r3, #47	; 0x2f
   1169c:	beq	1168c <close_stdout@@Base+0x128>
   116a0:	cmp	r3, #0
   116a4:	bxeq	lr
   116a8:	mov	r2, r0
   116ac:	mov	r1, #0
   116b0:	cmp	r3, #47	; 0x2f
   116b4:	moveq	r1, #1
   116b8:	beq	116c8 <close_stdout@@Base+0x164>
   116bc:	cmp	r1, #0
   116c0:	movne	r0, r2
   116c4:	movne	r1, #0
   116c8:	ldrb	r3, [r2, #1]!
   116cc:	cmp	r3, #0
   116d0:	bne	116b0 <close_stdout@@Base+0x14c>
   116d4:	bx	lr
   116d8:	push	{r4, lr}
   116dc:	mov	r4, r0
   116e0:	bl	10ff8 <strlen@plt>
   116e4:	cmp	r0, #1
   116e8:	popls	{r4, pc}
   116ec:	sub	r3, r0, #1
   116f0:	ldrb	r2, [r4, r3]
   116f4:	cmp	r2, #47	; 0x2f
   116f8:	popne	{r4, pc}
   116fc:	mov	r0, r3
   11700:	cmp	r0, #1
   11704:	sub	r3, r3, #1
   11708:	beq	1171c <close_stdout@@Base+0x1b8>
   1170c:	ldrb	r2, [r4, r3]
   11710:	cmp	r2, #47	; 0x2f
   11714:	popne	{r4, pc}
   11718:	b	116fc <close_stdout@@Base+0x198>
   1171c:	pop	{r4, pc}
   11720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11724:	mov	r9, r3
   11728:	ldr	r4, [pc, #224]	; 11810 <close_stdout@@Base+0x2ac>
   1172c:	sub	sp, sp, #28
   11730:	ldr	ip, [pc, #220]	; 11814 <close_stdout@@Base+0x2b0>
   11734:	cmp	r0, #2
   11738:	add	r4, pc, r4
   1173c:	ldr	r5, [pc, #212]	; 11818 <close_stdout@@Base+0x2b4>
   11740:	mov	r7, #0
   11744:	mov	sl, r2
   11748:	ldr	r6, [r4, ip]
   1174c:	ldr	r8, [sp, #64]	; 0x40
   11750:	ldr	fp, [sp, #68]	; 0x44
   11754:	ldr	r3, [r6]
   11758:	str	r3, [sp, #20]
   1175c:	ldr	r5, [r4, r5]
   11760:	ldr	ip, [r5]
   11764:	str	r7, [r5]
   11768:	beq	11798 <close_stdout@@Base+0x234>
   1176c:	ldr	r3, [pc, #168]	; 1181c <close_stdout@@Base+0x2b8>
   11770:	mov	r2, #0
   11774:	ldr	r0, [sp, #20]
   11778:	ldr	r1, [r6]
   1177c:	str	ip, [r5]
   11780:	ldr	r3, [r4, r3]
   11784:	cmp	r0, r1
   11788:	str	r2, [r3]
   1178c:	bne	1180c <close_stdout@@Base+0x2a8>
   11790:	add	sp, sp, #28
   11794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11798:	ldr	r2, [pc, #128]	; 11820 <close_stdout@@Base+0x2bc>
   1179c:	ldr	r3, [pc, #128]	; 11824 <close_stdout@@Base+0x2c0>
   117a0:	str	r7, [sp]
   117a4:	add	r2, pc, r2
   117a8:	add	r3, pc, r3
   117ac:	str	ip, [sp, #12]
   117b0:	bl	10fd4 <getopt_long@plt>
   117b4:	ldr	ip, [sp, #12]
   117b8:	cmn	r0, #1
   117bc:	beq	1176c <close_stdout@@Base+0x208>
   117c0:	cmp	r0, #104	; 0x68
   117c4:	beq	11800 <close_stdout@@Base+0x29c>
   117c8:	cmp	r0, #118	; 0x76
   117cc:	bne	1176c <close_stdout@@Base+0x208>
   117d0:	ldr	ip, [pc, #80]	; 11828 <close_stdout@@Base+0x2c4>
   117d4:	add	r0, sp, #72	; 0x48
   117d8:	str	r0, [sp, #16]
   117dc:	mov	r1, sl
   117e0:	mov	r2, r9
   117e4:	mov	r3, r8
   117e8:	ldr	ip, [r4, ip]
   117ec:	str	r0, [sp]
   117f0:	ldr	r0, [ip]
   117f4:	bl	1349c <close_stdout@@Base+0x1f38>
   117f8:	mov	r0, #0
   117fc:	bl	10fec <exit@plt>
   11800:	mov	r0, r7
   11804:	blx	fp
   11808:	b	117d0 <close_stdout@@Base+0x26c>
   1180c:	bl	10f08 <__stack_chk_fail@plt>
   11810:	andeq	r3, r1, r0, asr #17
   11814:	andeq	r0, r0, r0, ror #1
   11818:	andeq	r0, r0, r4, lsl r1
   1181c:	andeq	r0, r0, r4, ror #1
   11820:	andeq	r2, r0, ip, lsl #24
   11824:	andeq	r3, r1, r4, lsl #14
   11828:	strdeq	r0, [r0], -ip
   1182c:	push	{r3, r4, r5, r6, r7, lr}
   11830:	subs	r4, r0, #0
   11834:	ldr	r5, [pc, #172]	; 118e8 <close_stdout@@Base+0x384>
   11838:	add	r5, pc, r5
   1183c:	beq	118c4 <close_stdout@@Base+0x360>
   11840:	mov	r1, #47	; 0x2f
   11844:	bl	11094 <strrchr@plt>
   11848:	subs	r6, r0, #0
   1184c:	beq	118a8 <close_stdout@@Base+0x344>
   11850:	add	r7, r6, #1
   11854:	rsb	r3, r4, r7
   11858:	cmp	r3, #6
   1185c:	ble	118a8 <close_stdout@@Base+0x344>
   11860:	ldr	r1, [pc, #132]	; 118ec <close_stdout@@Base+0x388>
   11864:	sub	r0, r6, #6
   11868:	mov	r2, #7
   1186c:	add	r1, pc, r1
   11870:	bl	110c4 <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	bne	118a8 <close_stdout@@Base+0x344>
   1187c:	ldr	r1, [pc, #108]	; 118f0 <close_stdout@@Base+0x38c>
   11880:	mov	r0, r7
   11884:	mov	r2, #3
   11888:	add	r1, pc, r1
   1188c:	bl	110c4 <strncmp@plt>
   11890:	cmp	r0, #0
   11894:	movne	r4, r7
   11898:	ldreq	r3, [pc, #84]	; 118f4 <close_stdout@@Base+0x390>
   1189c:	addeq	r4, r6, #4
   118a0:	ldreq	r3, [r5, r3]
   118a4:	streq	r4, [r3]
   118a8:	ldr	r2, [pc, #72]	; 118f8 <close_stdout@@Base+0x394>
   118ac:	ldr	r3, [pc, #72]	; 118fc <close_stdout@@Base+0x398>
   118b0:	ldr	r2, [r5, r2]
   118b4:	str	r4, [r2]
   118b8:	ldr	r3, [r5, r3]
   118bc:	str	r4, [r3]
   118c0:	pop	{r3, r4, r5, r6, r7, pc}
   118c4:	ldr	r3, [pc, #52]	; 11900 <close_stdout@@Base+0x39c>
   118c8:	mov	r1, #1
   118cc:	ldr	r0, [pc, #48]	; 11904 <close_stdout@@Base+0x3a0>
   118d0:	mov	r2, #55	; 0x37
   118d4:	ldr	r3, [r5, r3]
   118d8:	add	r0, pc, r0
   118dc:	ldr	r3, [r3]
   118e0:	bl	10f38 <fwrite@plt>
   118e4:	bl	110d0 <abort@plt>
   118e8:	andeq	r3, r1, r0, asr #15
   118ec:	muleq	r0, r0, fp
   118f0:	andeq	r2, r0, ip, ror fp
   118f4:	andeq	r0, r0, r8, lsl r1
   118f8:	andeq	r0, r0, ip, lsl #2
   118fc:	andeq	r0, r0, r8, lsl #2
   11900:	andeq	r0, r0, ip, ror #1
   11904:	andeq	r2, r0, ip, ror #21
   11908:	push	{r3, lr}
   1190c:	mov	r3, r0
   11910:	mov	r2, #0
   11914:	cmp	r1, #8
   11918:	str	r2, [r3], #4
   1191c:	add	r3, r3, #4
   11920:	str	r2, [r0, #4]
   11924:	str	r2, [r3], #4
   11928:	str	r2, [r3], #4
   1192c:	str	r2, [r3], #4
   11930:	str	r2, [r3], #4
   11934:	str	r2, [r3], #4
   11938:	str	r2, [r3], #4
   1193c:	str	r2, [r3], #4
   11940:	str	r2, [r3], #4
   11944:	str	r2, [r3], #4
   11948:	str	r2, [r3]
   1194c:	beq	11958 <close_stdout@@Base+0x3f4>
   11950:	str	r1, [r0]
   11954:	pop	{r3, pc}
   11958:	bl	110d0 <abort@plt>
   1195c:	push	{r4, r5, r6, lr}
   11960:	mov	r4, r0
   11964:	mov	r6, r1
   11968:	mov	r0, #0
   1196c:	mov	r1, r4
   11970:	mov	r2, #5
   11974:	bl	10efc <dcgettext@plt>
   11978:	cmp	r0, r4
   1197c:	mov	r5, r0
   11980:	beq	11988 <close_stdout@@Base+0x424>
   11984:	pop	{r4, r5, r6, pc}
   11988:	bl	13914 <close_stdout@@Base+0x23b0>
   1198c:	ldrb	r3, [r0]
   11990:	bic	r3, r3, #32
   11994:	cmp	r3, #85	; 0x55
   11998:	bne	11a0c <close_stdout@@Base+0x4a8>
   1199c:	ldrb	r3, [r0, #1]
   119a0:	bic	r3, r3, #32
   119a4:	cmp	r3, #84	; 0x54
   119a8:	bne	119f8 <close_stdout@@Base+0x494>
   119ac:	ldrb	r3, [r0, #2]
   119b0:	bic	r3, r3, #32
   119b4:	cmp	r3, #70	; 0x46
   119b8:	bne	119f8 <close_stdout@@Base+0x494>
   119bc:	ldrb	r3, [r0, #3]
   119c0:	cmp	r3, #45	; 0x2d
   119c4:	bne	119f8 <close_stdout@@Base+0x494>
   119c8:	ldrb	r3, [r0, #4]
   119cc:	cmp	r3, #56	; 0x38
   119d0:	bne	119f8 <close_stdout@@Base+0x494>
   119d4:	ldrb	r3, [r0, #5]
   119d8:	cmp	r3, #0
   119dc:	bne	119f8 <close_stdout@@Base+0x494>
   119e0:	ldrb	r3, [r5]
   119e4:	cmp	r3, #96	; 0x60
   119e8:	beq	11a84 <close_stdout@@Base+0x520>
   119ec:	ldr	r0, [pc, #180]	; 11aa8 <close_stdout@@Base+0x544>
   119f0:	add	r0, pc, r0
   119f4:	pop	{r4, r5, r6, pc}
   119f8:	cmp	r6, #7
   119fc:	beq	11a90 <close_stdout@@Base+0x52c>
   11a00:	ldr	r0, [pc, #164]	; 11aac <close_stdout@@Base+0x548>
   11a04:	add	r0, pc, r0
   11a08:	pop	{r4, r5, r6, pc}
   11a0c:	cmp	r3, #71	; 0x47
   11a10:	bne	119f8 <close_stdout@@Base+0x494>
   11a14:	ldrb	r3, [r0, #1]
   11a18:	bic	r3, r3, #32
   11a1c:	cmp	r3, #66	; 0x42
   11a20:	bne	119f8 <close_stdout@@Base+0x494>
   11a24:	ldrb	r3, [r0, #2]
   11a28:	cmp	r3, #49	; 0x31
   11a2c:	bne	119f8 <close_stdout@@Base+0x494>
   11a30:	ldrb	r3, [r0, #3]
   11a34:	cmp	r3, #56	; 0x38
   11a38:	bne	119f8 <close_stdout@@Base+0x494>
   11a3c:	ldrb	r3, [r0, #4]
   11a40:	cmp	r3, #48	; 0x30
   11a44:	bne	119f8 <close_stdout@@Base+0x494>
   11a48:	ldrb	r3, [r0, #5]
   11a4c:	cmp	r3, #51	; 0x33
   11a50:	bne	119f8 <close_stdout@@Base+0x494>
   11a54:	ldrb	r3, [r0, #6]
   11a58:	cmp	r3, #48	; 0x30
   11a5c:	bne	119f8 <close_stdout@@Base+0x494>
   11a60:	ldrb	r3, [r0, #7]
   11a64:	cmp	r3, #0
   11a68:	bne	119f8 <close_stdout@@Base+0x494>
   11a6c:	ldrb	r3, [r5]
   11a70:	cmp	r3, #96	; 0x60
   11a74:	beq	11a9c <close_stdout@@Base+0x538>
   11a78:	ldr	r0, [pc, #48]	; 11ab0 <close_stdout@@Base+0x54c>
   11a7c:	add	r0, pc, r0
   11a80:	pop	{r4, r5, r6, pc}
   11a84:	ldr	r0, [pc, #40]	; 11ab4 <close_stdout@@Base+0x550>
   11a88:	add	r0, pc, r0
   11a8c:	pop	{r4, r5, r6, pc}
   11a90:	ldr	r0, [pc, #32]	; 11ab8 <close_stdout@@Base+0x554>
   11a94:	add	r0, pc, r0
   11a98:	pop	{r4, r5, r6, pc}
   11a9c:	ldr	r0, [pc, #24]	; 11abc <close_stdout@@Base+0x558>
   11aa0:	add	r0, pc, r0
   11aa4:	pop	{r4, r5, r6, pc}
   11aa8:	andeq	r2, r0, r8, lsr sl
   11aac:	andeq	r2, r0, ip, lsr #20
   11ab0:			; <UNDEFINED> instruction: 0x000029b0
   11ab4:			; <UNDEFINED> instruction: 0x000029b4
   11ab8:	andeq	r2, r0, r0, lsr #19
   11abc:	muleq	r0, r8, r9
   11ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ac4:	sub	sp, sp, #124	; 0x7c
   11ac8:	ldr	ip, [pc, #3304]	; 127b8 <close_stdout@@Base+0x1254>
   11acc:	mov	sl, r1
   11ad0:	str	r0, [sp, #40]	; 0x28
   11ad4:	mov	r8, r3
   11ad8:	ldr	r0, [pc, #3292]	; 127bc <close_stdout@@Base+0x1258>
   11adc:	add	ip, pc, ip
   11ae0:	str	r2, [sp, #32]
   11ae4:	ldr	r1, [sp, #164]	; 0xa4
   11ae8:	mov	r3, ip
   11aec:	ldr	r0, [ip, r0]
   11af0:	ldr	r2, [sp, #172]	; 0xac
   11af4:	ubfx	r1, r1, #1, #1
   11af8:	str	r1, [sp, #36]	; 0x24
   11afc:	str	r0, [sp, #56]	; 0x38
   11b00:	ldr	r0, [sp, #168]	; 0xa8
   11b04:	ldr	r1, [sp, #176]	; 0xb0
   11b08:	str	r2, [sp, #72]	; 0x48
   11b0c:	str	r0, [sp, #48]	; 0x30
   11b10:	ldr	r0, [sp, #56]	; 0x38
   11b14:	str	r1, [sp, #68]	; 0x44
   11b18:	ldr	r3, [r0]
   11b1c:	str	r3, [sp, #116]	; 0x74
   11b20:	bl	10f50 <__ctype_get_mb_cur_max@plt>
   11b24:	ldr	r2, [sp, #160]	; 0xa0
   11b28:	str	r0, [sp, #64]	; 0x40
   11b2c:	cmp	r2, #8
   11b30:	addls	pc, pc, r2, lsl #2
   11b34:	b	12694 <close_stdout@@Base+0x1130>
   11b38:	b	11b5c <close_stdout@@Base+0x5f8>
   11b3c:	b	123ac <close_stdout@@Base+0xe48>
   11b40:	b	123dc <close_stdout@@Base+0xe78>
   11b44:	b	1228c <close_stdout@@Base+0xd28>
   11b48:	b	122cc <close_stdout@@Base+0xd68>
   11b4c:	b	122f8 <close_stdout@@Base+0xd94>
   11b50:	b	12318 <close_stdout@@Base+0xdb4>
   11b54:	b	12318 <close_stdout@@Base+0xdb4>
   11b58:	b	12318 <close_stdout@@Base+0xdb4>
   11b5c:	mov	r2, #0
   11b60:	str	r2, [sp, #36]	; 0x24
   11b64:	mov	r9, r2
   11b68:	str	r2, [sp, #24]
   11b6c:	str	r2, [sp, #28]
   11b70:	str	r2, [sp, #52]	; 0x34
   11b74:	ldr	r0, [sp, #36]	; 0x24
   11b78:	mov	fp, #0
   11b7c:	ldr	r1, [sp, #24]
   11b80:	eor	r2, r0, #1
   11b84:	eor	r3, r1, #1
   11b88:	and	r3, r2, r3
   11b8c:	and	r2, r1, r0
   11b90:	str	r3, [sp, #44]	; 0x2c
   11b94:	str	r2, [sp, #76]	; 0x4c
   11b98:	cmn	r8, #1
   11b9c:	beq	11f1c <close_stdout@@Base+0x9b8>
   11ba0:	subs	r3, fp, r8
   11ba4:	movne	r3, #1
   11ba8:	cmp	r3, #0
   11bac:	beq	11f34 <close_stdout@@Base+0x9d0>
   11bb0:	ldr	r3, [sp, #28]
   11bb4:	ldr	r0, [sp, #24]
   11bb8:	adds	r7, r3, #0
   11bbc:	movne	r7, #1
   11bc0:	ands	r6, r7, r0
   11bc4:	bne	12420 <close_stdout@@Base+0xebc>
   11bc8:	ldr	r1, [sp, #32]
   11bcc:	add	r5, r1, fp
   11bd0:	ldrb	r4, [r5]
   11bd4:	cmp	r4, #126	; 0x7e
   11bd8:	addls	pc, pc, r4, lsl #2
   11bdc:	b	121a0 <close_stdout@@Base+0xc3c>
   11be0:	b	120ac <close_stdout@@Base+0xb48>
   11be4:	b	121a0 <close_stdout@@Base+0xc3c>
   11be8:	b	121a0 <close_stdout@@Base+0xc3c>
   11bec:	b	121a0 <close_stdout@@Base+0xc3c>
   11bf0:	b	121a0 <close_stdout@@Base+0xc3c>
   11bf4:	b	121a0 <close_stdout@@Base+0xc3c>
   11bf8:	b	121a0 <close_stdout@@Base+0xc3c>
   11bfc:	b	12094 <close_stdout@@Base+0xb30>
   11c00:	b	1207c <close_stdout@@Base+0xb18>
   11c04:	b	120a4 <close_stdout@@Base+0xb40>
   11c08:	b	1209c <close_stdout@@Base+0xb38>
   11c0c:	b	1208c <close_stdout@@Base+0xb28>
   11c10:	b	12084 <close_stdout@@Base+0xb20>
   11c14:	b	12048 <close_stdout@@Base+0xae4>
   11c18:	b	121a0 <close_stdout@@Base+0xc3c>
   11c1c:	b	121a0 <close_stdout@@Base+0xc3c>
   11c20:	b	121a0 <close_stdout@@Base+0xc3c>
   11c24:	b	121a0 <close_stdout@@Base+0xc3c>
   11c28:	b	121a0 <close_stdout@@Base+0xc3c>
   11c2c:	b	121a0 <close_stdout@@Base+0xc3c>
   11c30:	b	121a0 <close_stdout@@Base+0xc3c>
   11c34:	b	121a0 <close_stdout@@Base+0xc3c>
   11c38:	b	121a0 <close_stdout@@Base+0xc3c>
   11c3c:	b	121a0 <close_stdout@@Base+0xc3c>
   11c40:	b	121a0 <close_stdout@@Base+0xc3c>
   11c44:	b	121a0 <close_stdout@@Base+0xc3c>
   11c48:	b	121a0 <close_stdout@@Base+0xc3c>
   11c4c:	b	121a0 <close_stdout@@Base+0xc3c>
   11c50:	b	121a0 <close_stdout@@Base+0xc3c>
   11c54:	b	121a0 <close_stdout@@Base+0xc3c>
   11c58:	b	121a0 <close_stdout@@Base+0xc3c>
   11c5c:	b	121a0 <close_stdout@@Base+0xc3c>
   11c60:	b	11fd4 <close_stdout@@Base+0xa70>
   11c64:	b	11fd4 <close_stdout@@Base+0xa70>
   11c68:	b	11fd4 <close_stdout@@Base+0xa70>
   11c6c:	b	11fcc <close_stdout@@Base+0xa68>
   11c70:	b	11fd4 <close_stdout@@Base+0xa70>
   11c74:	b	11ea8 <close_stdout@@Base+0x944>
   11c78:	b	11fd4 <close_stdout@@Base+0xa70>
   11c7c:	b	12148 <close_stdout@@Base+0xbe4>
   11c80:	b	11fd4 <close_stdout@@Base+0xa70>
   11c84:	b	11fd4 <close_stdout@@Base+0xa70>
   11c88:	b	11fd4 <close_stdout@@Base+0xa70>
   11c8c:	b	11ea8 <close_stdout@@Base+0x944>
   11c90:	b	11ea8 <close_stdout@@Base+0x944>
   11c94:	b	11ea8 <close_stdout@@Base+0x944>
   11c98:	b	11ea8 <close_stdout@@Base+0x944>
   11c9c:	b	11ea8 <close_stdout@@Base+0x944>
   11ca0:	b	11ea8 <close_stdout@@Base+0x944>
   11ca4:	b	11ea8 <close_stdout@@Base+0x944>
   11ca8:	b	11ea8 <close_stdout@@Base+0x944>
   11cac:	b	11ea8 <close_stdout@@Base+0x944>
   11cb0:	b	11ea8 <close_stdout@@Base+0x944>
   11cb4:	b	11ea8 <close_stdout@@Base+0x944>
   11cb8:	b	11ea8 <close_stdout@@Base+0x944>
   11cbc:	b	11ea8 <close_stdout@@Base+0x944>
   11cc0:	b	11ea8 <close_stdout@@Base+0x944>
   11cc4:	b	11ea8 <close_stdout@@Base+0x944>
   11cc8:	b	11ea8 <close_stdout@@Base+0x944>
   11ccc:	b	11fd4 <close_stdout@@Base+0xa70>
   11cd0:	b	11fd4 <close_stdout@@Base+0xa70>
   11cd4:	b	11fd4 <close_stdout@@Base+0xa70>
   11cd8:	b	11fd4 <close_stdout@@Base+0xa70>
   11cdc:	b	11ddc <close_stdout@@Base+0x878>
   11ce0:	b	121a0 <close_stdout@@Base+0xc3c>
   11ce4:	b	11ea8 <close_stdout@@Base+0x944>
   11ce8:	b	11ea8 <close_stdout@@Base+0x944>
   11cec:	b	11ea8 <close_stdout@@Base+0x944>
   11cf0:	b	11ea8 <close_stdout@@Base+0x944>
   11cf4:	b	11ea8 <close_stdout@@Base+0x944>
   11cf8:	b	11ea8 <close_stdout@@Base+0x944>
   11cfc:	b	11ea8 <close_stdout@@Base+0x944>
   11d00:	b	11ea8 <close_stdout@@Base+0x944>
   11d04:	b	11ea8 <close_stdout@@Base+0x944>
   11d08:	b	11ea8 <close_stdout@@Base+0x944>
   11d0c:	b	11ea8 <close_stdout@@Base+0x944>
   11d10:	b	11ea8 <close_stdout@@Base+0x944>
   11d14:	b	11ea8 <close_stdout@@Base+0x944>
   11d18:	b	11ea8 <close_stdout@@Base+0x944>
   11d1c:	b	11ea8 <close_stdout@@Base+0x944>
   11d20:	b	11ea8 <close_stdout@@Base+0x944>
   11d24:	b	11ea8 <close_stdout@@Base+0x944>
   11d28:	b	11ea8 <close_stdout@@Base+0x944>
   11d2c:	b	11ea8 <close_stdout@@Base+0x944>
   11d30:	b	11ea8 <close_stdout@@Base+0x944>
   11d34:	b	11ea8 <close_stdout@@Base+0x944>
   11d38:	b	11ea8 <close_stdout@@Base+0x944>
   11d3c:	b	11ea8 <close_stdout@@Base+0x944>
   11d40:	b	11ea8 <close_stdout@@Base+0x944>
   11d44:	b	11ea8 <close_stdout@@Base+0x944>
   11d48:	b	11ea8 <close_stdout@@Base+0x944>
   11d4c:	b	11fd4 <close_stdout@@Base+0xa70>
   11d50:	b	1212c <close_stdout@@Base+0xbc8>
   11d54:	b	11ea8 <close_stdout@@Base+0x944>
   11d58:	b	11fd4 <close_stdout@@Base+0xa70>
   11d5c:	b	11ea8 <close_stdout@@Base+0x944>
   11d60:	b	11fd4 <close_stdout@@Base+0xa70>
   11d64:	b	11ea8 <close_stdout@@Base+0x944>
   11d68:	b	11ea8 <close_stdout@@Base+0x944>
   11d6c:	b	11ea8 <close_stdout@@Base+0x944>
   11d70:	b	11ea8 <close_stdout@@Base+0x944>
   11d74:	b	11ea8 <close_stdout@@Base+0x944>
   11d78:	b	11ea8 <close_stdout@@Base+0x944>
   11d7c:	b	11ea8 <close_stdout@@Base+0x944>
   11d80:	b	11ea8 <close_stdout@@Base+0x944>
   11d84:	b	11ea8 <close_stdout@@Base+0x944>
   11d88:	b	11ea8 <close_stdout@@Base+0x944>
   11d8c:	b	11ea8 <close_stdout@@Base+0x944>
   11d90:	b	11ea8 <close_stdout@@Base+0x944>
   11d94:	b	11ea8 <close_stdout@@Base+0x944>
   11d98:	b	11ea8 <close_stdout@@Base+0x944>
   11d9c:	b	11ea8 <close_stdout@@Base+0x944>
   11da0:	b	11ea8 <close_stdout@@Base+0x944>
   11da4:	b	11ea8 <close_stdout@@Base+0x944>
   11da8:	b	11ea8 <close_stdout@@Base+0x944>
   11dac:	b	11ea8 <close_stdout@@Base+0x944>
   11db0:	b	11ea8 <close_stdout@@Base+0x944>
   11db4:	b	11ea8 <close_stdout@@Base+0x944>
   11db8:	b	11ea8 <close_stdout@@Base+0x944>
   11dbc:	b	11ea8 <close_stdout@@Base+0x944>
   11dc0:	b	11ea8 <close_stdout@@Base+0x944>
   11dc4:	b	11ea8 <close_stdout@@Base+0x944>
   11dc8:	b	11ea8 <close_stdout@@Base+0x944>
   11dcc:	b	11fb4 <close_stdout@@Base+0xa50>
   11dd0:	b	11fd4 <close_stdout@@Base+0xa70>
   11dd4:	b	11fb4 <close_stdout@@Base+0xa50>
   11dd8:	b	11fcc <close_stdout@@Base+0xa68>
   11ddc:	ldr	r3, [sp, #160]	; 0xa0
   11de0:	cmp	r3, #2
   11de4:	beq	12670 <close_stdout@@Base+0x110c>
   11de8:	cmp	r3, #3
   11dec:	bne	11ea8 <close_stdout@@Base+0x944>
   11df0:	ldr	r1, [sp, #164]	; 0xa4
   11df4:	tst	r1, #4
   11df8:	beq	11ea8 <close_stdout@@Base+0x944>
   11dfc:	add	r3, fp, #2
   11e00:	cmp	r8, r3
   11e04:	bls	11ea8 <close_stdout@@Base+0x944>
   11e08:	ldrb	r2, [r5, #1]
   11e0c:	mov	r1, #1
   11e10:	cmp	r2, #63	; 0x3f
   11e14:	bne	11ea8 <close_stdout@@Base+0x944>
   11e18:	ldr	r0, [sp, #32]
   11e1c:	ldrb	ip, [r0, r3]
   11e20:	sub	r0, ip, #33	; 0x21
   11e24:	uxtb	r0, r0
   11e28:	cmp	r0, #29
   11e2c:	bhi	11ea8 <close_stdout@@Base+0x944>
   11e30:	lsl	r1, r1, r0
   11e34:	movw	r0, #20929	; 0x51c1
   11e38:	movt	r0, #14336	; 0x3800
   11e3c:	and	r0, r1, r0
   11e40:	cmp	r0, #0
   11e44:	beq	11ea8 <close_stdout@@Base+0x944>
   11e48:	ldr	r1, [sp, #36]	; 0x24
   11e4c:	cmp	r1, #0
   11e50:	bne	11ff0 <close_stdout@@Base+0xa8c>
   11e54:	cmp	r9, sl
   11e58:	mov	r4, ip
   11e5c:	mov	fp, r3
   11e60:	ldrcc	r0, [sp, #40]	; 0x28
   11e64:	strbcc	r2, [r0, r9]
   11e68:	add	r2, r9, #1
   11e6c:	cmp	sl, r2
   11e70:	ldrhi	r0, [sp, #40]	; 0x28
   11e74:	movhi	r1, #34	; 0x22
   11e78:	strbhi	r1, [r0, r2]
   11e7c:	add	r2, r9, #2
   11e80:	cmp	sl, r2
   11e84:	ldrhi	r0, [sp, #40]	; 0x28
   11e88:	movhi	r1, #34	; 0x22
   11e8c:	strbhi	r1, [r0, r2]
   11e90:	add	r2, r9, #3
   11e94:	cmp	sl, r2
   11e98:	add	r9, r9, #4
   11e9c:	ldrhi	r0, [sp, #40]	; 0x28
   11ea0:	movhi	r1, #63	; 0x3f
   11ea4:	strbhi	r1, [r0, r2]
   11ea8:	ldr	r0, [sp, #44]	; 0x2c
   11eac:	cmp	r0, #0
   11eb0:	bne	11ed8 <close_stdout@@Base+0x974>
   11eb4:	ldr	r1, [sp, #48]	; 0x30
   11eb8:	cmp	r1, #0
   11ebc:	beq	11ed8 <close_stdout@@Base+0x974>
   11ec0:	ubfx	r2, r4, #5, #8
   11ec4:	and	r3, r4, #31
   11ec8:	ldr	r2, [r1, r2, lsl #2]
   11ecc:	lsr	r3, r2, r3
   11ed0:	tst	r3, #1
   11ed4:	bne	11ee0 <close_stdout@@Base+0x97c>
   11ed8:	cmp	r6, #0
   11edc:	beq	11f00 <close_stdout@@Base+0x99c>
   11ee0:	ldr	r2, [sp, #36]	; 0x24
   11ee4:	cmp	r2, #0
   11ee8:	bne	11ff0 <close_stdout@@Base+0xa8c>
   11eec:	cmp	r9, sl
   11ef0:	ldrcc	r0, [sp, #40]	; 0x28
   11ef4:	movcc	r3, #92	; 0x5c
   11ef8:	strbcc	r3, [r0, r9]
   11efc:	add	r9, r9, #1
   11f00:	add	fp, fp, #1
   11f04:	cmp	r9, sl
   11f08:	ldrcc	r1, [sp, #40]	; 0x28
   11f0c:	strbcc	r4, [r1, r9]
   11f10:	cmn	r8, #1
   11f14:	add	r9, r9, #1
   11f18:	bne	11ba0 <close_stdout@@Base+0x63c>
   11f1c:	ldr	r2, [sp, #32]
   11f20:	ldrb	r3, [r2, fp]
   11f24:	adds	r3, r3, #0
   11f28:	movne	r3, #1
   11f2c:	cmp	r3, #0
   11f30:	bne	11bb0 <close_stdout@@Base+0x64c>
   11f34:	ldr	r3, [sp, #160]	; 0xa0
   11f38:	cmp	r9, #0
   11f3c:	cmpeq	r3, #2
   11f40:	bne	11f50 <close_stdout@@Base+0x9ec>
   11f44:	ldr	r0, [sp, #36]	; 0x24
   11f48:	cmp	r0, #0
   11f4c:	bne	11ff0 <close_stdout@@Base+0xa8c>
   11f50:	ldr	r1, [sp, #36]	; 0x24
   11f54:	ldr	r2, [sp, #52]	; 0x34
   11f58:	eor	r3, r1, #1
   11f5c:	cmp	r2, #0
   11f60:	moveq	r3, #0
   11f64:	andne	r3, r3, #1
   11f68:	cmp	r3, #0
   11f6c:	beq	11f98 <close_stdout@@Base+0xa34>
   11f70:	ldrb	r3, [r2]
   11f74:	cmp	r3, #0
   11f78:	beq	11f98 <close_stdout@@Base+0xa34>
   11f7c:	ldr	r1, [sp, #40]	; 0x28
   11f80:	cmp	sl, r9
   11f84:	strbhi	r3, [r1, r9]
   11f88:	ldrb	r3, [r2, #1]!
   11f8c:	add	r9, r9, #1
   11f90:	cmp	r3, #0
   11f94:	bne	11f80 <close_stdout@@Base+0xa1c>
   11f98:	cmp	r9, sl
   11f9c:	movcs	r0, r9
   11fa0:	ldrcc	r1, [sp, #40]	; 0x28
   11fa4:	movcc	r3, #0
   11fa8:	movcc	r0, r9
   11fac:	strbcc	r3, [r1, r9]
   11fb0:	b	1202c <close_stdout@@Base+0xac8>
   11fb4:	cmn	r8, #1
   11fb8:	beq	12680 <close_stdout@@Base+0x111c>
   11fbc:	subs	r3, r8, #1
   11fc0:	movne	r3, #1
   11fc4:	cmp	r3, #0
   11fc8:	bne	11ea8 <close_stdout@@Base+0x944>
   11fcc:	cmp	fp, #0
   11fd0:	bne	11ea8 <close_stdout@@Base+0x944>
   11fd4:	ldr	r3, [sp, #36]	; 0x24
   11fd8:	ldr	r0, [sp, #160]	; 0xa0
   11fdc:	cmp	r0, #2
   11fe0:	movne	r3, #0
   11fe4:	andeq	r3, r3, #1
   11fe8:	cmp	r3, #0
   11fec:	beq	11ea8 <close_stdout@@Base+0x944>
   11ff0:	ldr	r2, [sp, #164]	; 0xa4
   11ff4:	mov	ip, #0
   11ff8:	ldr	r0, [sp, #160]	; 0xa0
   11ffc:	bic	r3, r2, #2
   12000:	ldr	r1, [sp, #72]	; 0x48
   12004:	ldr	r2, [sp, #68]	; 0x44
   12008:	stm	sp, {r0, r3}
   1200c:	mov	r3, r8
   12010:	str	r1, [sp, #12]
   12014:	mov	r1, sl
   12018:	str	r2, [sp, #16]
   1201c:	ldr	r0, [sp, #40]	; 0x28
   12020:	ldr	r2, [sp, #32]
   12024:	str	ip, [sp, #8]
   12028:	bl	11ac0 <close_stdout@@Base+0x55c>
   1202c:	ldr	r1, [sp, #56]	; 0x38
   12030:	ldr	r2, [sp, #116]	; 0x74
   12034:	ldr	r3, [r1]
   12038:	cmp	r2, r3
   1203c:	bne	12770 <close_stdout@@Base+0x120c>
   12040:	add	sp, sp, #124	; 0x7c
   12044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12048:	mov	r3, #114	; 0x72
   1204c:	ldr	r2, [sp, #36]	; 0x24
   12050:	ldr	r0, [sp, #160]	; 0xa0
   12054:	cmp	r0, #2
   12058:	movne	r2, #0
   1205c:	andeq	r2, r2, #1
   12060:	cmp	r2, #0
   12064:	bne	11ff0 <close_stdout@@Base+0xa8c>
   12068:	ldr	r1, [sp, #24]
   1206c:	cmp	r1, #0
   12070:	beq	11ea8 <close_stdout@@Base+0x944>
   12074:	mov	r4, r3
   12078:	b	11ee0 <close_stdout@@Base+0x97c>
   1207c:	mov	r3, #98	; 0x62
   12080:	b	12068 <close_stdout@@Base+0xb04>
   12084:	mov	r3, #102	; 0x66
   12088:	b	12068 <close_stdout@@Base+0xb04>
   1208c:	mov	r3, #118	; 0x76
   12090:	b	12068 <close_stdout@@Base+0xb04>
   12094:	mov	r3, #97	; 0x61
   12098:	b	12068 <close_stdout@@Base+0xb04>
   1209c:	mov	r3, #110	; 0x6e
   120a0:	b	1204c <close_stdout@@Base+0xae8>
   120a4:	mov	r3, #116	; 0x74
   120a8:	b	1204c <close_stdout@@Base+0xae8>
   120ac:	ldr	r2, [sp, #24]
   120b0:	cmp	r2, #0
   120b4:	beq	1265c <close_stdout@@Base+0x10f8>
   120b8:	ldr	r3, [sp, #36]	; 0x24
   120bc:	cmp	r3, #0
   120c0:	bne	11ff0 <close_stdout@@Base+0xa8c>
   120c4:	cmp	r9, sl
   120c8:	add	r2, r9, #1
   120cc:	ldrcc	r0, [sp, #40]	; 0x28
   120d0:	movcc	r3, #92	; 0x5c
   120d4:	strbcc	r3, [r0, r9]
   120d8:	add	r3, fp, #1
   120dc:	cmp	r8, r3
   120e0:	bls	12120 <close_stdout@@Base+0xbbc>
   120e4:	ldr	r1, [sp, #32]
   120e8:	ldrb	r3, [r1, r3]
   120ec:	sub	r3, r3, #48	; 0x30
   120f0:	cmp	r3, #9
   120f4:	bhi	12120 <close_stdout@@Base+0xbbc>
   120f8:	cmp	sl, r2
   120fc:	ldrhi	r0, [sp, #40]	; 0x28
   12100:	movhi	r3, #48	; 0x30
   12104:	strbhi	r3, [r0, r2]
   12108:	add	r3, r9, #2
   1210c:	cmp	sl, r3
   12110:	ldrhi	r1, [sp, #40]	; 0x28
   12114:	movhi	r2, #48	; 0x30
   12118:	strbhi	r2, [r1, r3]
   1211c:	add	r2, r9, #3
   12120:	mov	r9, r2
   12124:	mov	r4, #48	; 0x30
   12128:	b	11eb4 <close_stdout@@Base+0x950>
   1212c:	ldr	r1, [sp, #76]	; 0x4c
   12130:	cmp	r1, #0
   12134:	beq	12140 <close_stdout@@Base+0xbdc>
   12138:	cmp	r7, #0
   1213c:	bne	11f00 <close_stdout@@Base+0x99c>
   12140:	mov	r3, r4
   12144:	b	1204c <close_stdout@@Base+0xae8>
   12148:	ldr	r1, [sp, #160]	; 0xa0
   1214c:	cmp	r1, #2
   12150:	bne	11ea8 <close_stdout@@Base+0x944>
   12154:	ldr	r2, [sp, #36]	; 0x24
   12158:	cmp	r2, #0
   1215c:	bne	11ff0 <close_stdout@@Base+0xa8c>
   12160:	cmp	r9, sl
   12164:	ldrcc	r0, [sp, #40]	; 0x28
   12168:	movcc	r3, #39	; 0x27
   1216c:	strbcc	r3, [r0, r9]
   12170:	add	r3, r9, #1
   12174:	cmp	sl, r3
   12178:	ldrhi	r1, [sp, #40]	; 0x28
   1217c:	movhi	r2, #92	; 0x5c
   12180:	strbhi	r2, [r1, r3]
   12184:	add	r3, r9, #2
   12188:	cmp	sl, r3
   1218c:	add	r9, r9, #3
   12190:	ldrhi	r0, [sp, #40]	; 0x28
   12194:	movhi	r2, #39	; 0x27
   12198:	strbhi	r2, [r0, r3]
   1219c:	b	11ea8 <close_stdout@@Base+0x944>
   121a0:	ldr	r1, [sp, #64]	; 0x40
   121a4:	cmp	r1, #1
   121a8:	bne	124a0 <close_stdout@@Base+0xf3c>
   121ac:	bl	10fe0 <__ctype_b_loc@plt>
   121b0:	ldr	r2, [sp, #64]	; 0x40
   121b4:	sxth	r3, r4
   121b8:	str	r2, [sp, #60]	; 0x3c
   121bc:	lsl	r3, r3, #1
   121c0:	ldr	r2, [r0]
   121c4:	ldrh	r2, [r2, r3]
   121c8:	eor	r2, r2, #16384	; 0x4000
   121cc:	ubfx	r2, r2, #14, #1
   121d0:	ldr	r1, [sp, #24]
   121d4:	ands	r2, r2, r1
   121d8:	beq	11ea8 <close_stdout@@Base+0x944>
   121dc:	ldr	r3, [sp, #60]	; 0x3c
   121e0:	mov	r0, #92	; 0x5c
   121e4:	ldr	r7, [sp, #36]	; 0x24
   121e8:	add	r1, r3, fp
   121ec:	str	r8, [sp, #60]	; 0x3c
   121f0:	ldr	r3, [sp, #40]	; 0x28
   121f4:	b	12258 <close_stdout@@Base+0xcf4>
   121f8:	cmp	r7, #0
   121fc:	bne	12698 <close_stdout@@Base+0x1134>
   12200:	add	ip, r9, #1
   12204:	cmp	r9, sl
   12208:	strbcc	r0, [r3, r9]
   1220c:	cmp	sl, ip
   12210:	lsrhi	r8, r4, #6
   12214:	addhi	r8, r8, #48	; 0x30
   12218:	strbhi	r8, [r3, ip]
   1221c:	add	ip, r9, #2
   12220:	add	r9, r9, #3
   12224:	cmp	sl, ip
   12228:	ubfxhi	r8, r4, #3, #3
   1222c:	and	r4, r4, #7
   12230:	add	r4, r4, #48	; 0x30
   12234:	addhi	r8, r8, #48	; 0x30
   12238:	strbhi	r8, [r3, ip]
   1223c:	add	fp, fp, #1
   12240:	cmp	r1, fp
   12244:	bls	12284 <close_stdout@@Base+0xd20>
   12248:	cmp	r9, sl
   1224c:	strbcc	r4, [r3, r9]
   12250:	ldrb	r4, [r5, #1]!
   12254:	add	r9, r9, #1
   12258:	cmp	r2, #0
   1225c:	bne	121f8 <close_stdout@@Base+0xc94>
   12260:	cmp	r6, #0
   12264:	beq	1223c <close_stdout@@Base+0xcd8>
   12268:	add	fp, fp, #1
   1226c:	cmp	r9, sl
   12270:	strbcc	r0, [r3, r9]
   12274:	cmp	r1, fp
   12278:	add	r9, r9, #1
   1227c:	mov	r6, #0
   12280:	bhi	12248 <close_stdout@@Base+0xce4>
   12284:	ldr	r8, [sp, #60]	; 0x3c
   12288:	b	11f04 <close_stdout@@Base+0x9a0>
   1228c:	ldr	r3, [sp, #36]	; 0x24
   12290:	cmp	r3, #0
   12294:	bne	12798 <close_stdout@@Base+0x1234>
   12298:	cmp	sl, #0
   1229c:	beq	126b0 <close_stdout@@Base+0x114c>
   122a0:	ldr	r1, [sp, #40]	; 0x28
   122a4:	mov	r0, #1
   122a8:	ldr	r2, [pc, #1296]	; 127c0 <close_stdout@@Base+0x125c>
   122ac:	mov	r3, #34	; 0x22
   122b0:	str	r0, [sp, #24]
   122b4:	mov	r9, r0
   122b8:	add	r2, pc, r2
   122bc:	str	r0, [sp, #28]
   122c0:	strb	r3, [r1]
   122c4:	str	r2, [sp, #52]	; 0x34
   122c8:	b	11b74 <close_stdout@@Base+0x610>
   122cc:	ldr	r3, [pc, #1264]	; 127c4 <close_stdout@@Base+0x1260>
   122d0:	mov	r2, #1
   122d4:	mov	r0, #3
   122d8:	str	r2, [sp, #36]	; 0x24
   122dc:	add	r3, pc, r3
   122e0:	str	r2, [sp, #24]
   122e4:	str	r3, [sp, #52]	; 0x34
   122e8:	mov	r9, #0
   122ec:	str	r2, [sp, #28]
   122f0:	str	r0, [sp, #160]	; 0xa0
   122f4:	b	11b74 <close_stdout@@Base+0x610>
   122f8:	mov	r0, #0
   122fc:	mov	r1, #1
   12300:	str	r0, [sp, #36]	; 0x24
   12304:	mov	r9, r0
   12308:	str	r1, [sp, #24]
   1230c:	str	r0, [sp, #28]
   12310:	str	r0, [sp, #52]	; 0x34
   12314:	b	11b74 <close_stdout@@Base+0x610>
   12318:	ldr	r3, [sp, #160]	; 0xa0
   1231c:	cmp	r3, #8
   12320:	beq	1234c <close_stdout@@Base+0xde8>
   12324:	ldr	r0, [pc, #1180]	; 127c8 <close_stdout@@Base+0x1264>
   12328:	mov	r1, r3
   1232c:	add	r0, pc, r0
   12330:	bl	1195c <close_stdout@@Base+0x3f8>
   12334:	ldr	r1, [sp, #160]	; 0xa0
   12338:	str	r0, [sp, #72]	; 0x48
   1233c:	ldr	r0, [pc, #1160]	; 127cc <close_stdout@@Base+0x1268>
   12340:	add	r0, pc, r0
   12344:	bl	1195c <close_stdout@@Base+0x3f8>
   12348:	str	r0, [sp, #68]	; 0x44
   1234c:	ldr	r0, [sp, #36]	; 0x24
   12350:	cmp	r0, #0
   12354:	movne	r9, #0
   12358:	bne	12390 <close_stdout@@Base+0xe2c>
   1235c:	ldr	r1, [sp, #72]	; 0x48
   12360:	ldrb	r3, [r1]
   12364:	cmp	r3, #0
   12368:	beq	12768 <close_stdout@@Base+0x1204>
   1236c:	mov	r2, r1
   12370:	ldr	r1, [sp, #40]	; 0x28
   12374:	mov	r9, r0
   12378:	cmp	r9, sl
   1237c:	strbcc	r3, [r1, r9]
   12380:	ldrb	r3, [r2, #1]!
   12384:	add	r9, r9, #1
   12388:	cmp	r3, #0
   1238c:	bne	12378 <close_stdout@@Base+0xe14>
   12390:	ldr	r0, [sp, #68]	; 0x44
   12394:	str	r0, [sp, #52]	; 0x34
   12398:	bl	10ff8 <strlen@plt>
   1239c:	mov	r2, #1
   123a0:	str	r2, [sp, #24]
   123a4:	str	r0, [sp, #28]
   123a8:	b	11b74 <close_stdout@@Base+0x610>
   123ac:	ldr	r3, [pc, #1052]	; 127d0 <close_stdout@@Base+0x126c>
   123b0:	mov	r2, #0
   123b4:	mov	r1, #1
   123b8:	mov	r0, #2
   123bc:	add	r3, pc, r3
   123c0:	str	r1, [sp, #36]	; 0x24
   123c4:	str	r2, [sp, #24]
   123c8:	mov	r9, r2
   123cc:	str	r1, [sp, #28]
   123d0:	str	r3, [sp, #52]	; 0x34
   123d4:	str	r0, [sp, #160]	; 0xa0
   123d8:	b	11b74 <close_stdout@@Base+0x610>
   123dc:	ldr	r3, [sp, #36]	; 0x24
   123e0:	cmp	r3, #0
   123e4:	bne	12774 <close_stdout@@Base+0x1210>
   123e8:	cmp	sl, #0
   123ec:	beq	126d0 <close_stdout@@Base+0x116c>
   123f0:	ldr	r1, [sp, #40]	; 0x28
   123f4:	mov	r3, #39	; 0x27
   123f8:	ldr	r2, [sp, #36]	; 0x24
   123fc:	mov	r0, #1
   12400:	mov	r9, r0
   12404:	str	r0, [sp, #28]
   12408:	strb	r3, [r1]
   1240c:	ldr	r3, [pc, #960]	; 127d4 <close_stdout@@Base+0x1270>
   12410:	str	r2, [sp, #24]
   12414:	add	r3, pc, r3
   12418:	str	r3, [sp, #52]	; 0x34
   1241c:	b	11b74 <close_stdout@@Base+0x610>
   12420:	ldr	r2, [sp, #28]
   12424:	cmp	r2, #1
   12428:	add	r4, fp, r2
   1242c:	movls	r3, #0
   12430:	movhi	r3, #1
   12434:	cmn	r8, #1
   12438:	movne	r3, #0
   1243c:	cmp	r3, #0
   12440:	beq	12450 <close_stdout@@Base+0xeec>
   12444:	ldr	r0, [sp, #32]
   12448:	bl	10ff8 <strlen@plt>
   1244c:	mov	r8, r0
   12450:	cmp	r8, r4
   12454:	ldrcc	r3, [sp, #32]
   12458:	movcc	r6, #0
   1245c:	addcc	r5, r3, fp
   12460:	bcc	11bd0 <close_stdout@@Base+0x66c>
   12464:	ldr	r0, [sp, #32]
   12468:	ldr	r1, [sp, #52]	; 0x34
   1246c:	add	r5, r0, fp
   12470:	ldr	r2, [sp, #28]
   12474:	mov	r0, r5
   12478:	bl	10ef0 <memcmp@plt>
   1247c:	cmp	r0, #0
   12480:	bne	12498 <close_stdout@@Base+0xf34>
   12484:	ldr	r1, [sp, #36]	; 0x24
   12488:	cmp	r1, #0
   1248c:	bne	11ff0 <close_stdout@@Base+0xa8c>
   12490:	mov	r6, #1
   12494:	b	11bd0 <close_stdout@@Base+0x66c>
   12498:	mov	r6, #0
   1249c:	b	11bd0 <close_stdout@@Base+0x66c>
   124a0:	add	r7, sp, #108	; 0x6c
   124a4:	cmn	r8, #1
   124a8:	mov	r3, #0
   124ac:	str	r3, [sp, #108]	; 0x6c
   124b0:	str	r3, [r7, #4]
   124b4:	beq	126a0 <close_stdout@@Base+0x113c>
   124b8:	mov	r1, #0
   124bc:	ldr	r0, [sp, #32]
   124c0:	mov	ip, #1
   124c4:	str	r9, [sp, #88]	; 0x58
   124c8:	str	r6, [sp, #96]	; 0x60
   124cc:	mov	r9, r1
   124d0:	str	r5, [sp, #100]	; 0x64
   124d4:	mov	r6, ip
   124d8:	mov	r5, r7
   124dc:	add	r3, sp, #104	; 0x68
   124e0:	sub	r0, r0, #1
   124e4:	str	r3, [sp, #80]	; 0x50
   124e8:	str	r0, [sp, #84]	; 0x54
   124ec:	str	r1, [sp, #60]	; 0x3c
   124f0:	str	r4, [sp, #92]	; 0x5c
   124f4:	ldr	r2, [sp, #32]
   124f8:	add	r7, r9, fp
   124fc:	add	r0, sp, #104	; 0x68
   12500:	mov	r3, r5
   12504:	add	r4, r2, r7
   12508:	rsb	r2, r7, r8
   1250c:	mov	r1, r4
   12510:	bl	10f74 <mbrtowc@plt>
   12514:	subs	r2, r0, #0
   12518:	beq	12624 <close_stdout@@Base+0x10c0>
   1251c:	cmn	r2, #1
   12520:	beq	1274c <close_stdout@@Base+0x11e8>
   12524:	cmn	r2, #2
   12528:	beq	126f0 <close_stdout@@Base+0x118c>
   1252c:	ldr	r3, [sp, #36]	; 0x24
   12530:	ldr	r0, [sp, #160]	; 0xa0
   12534:	cmp	r0, #2
   12538:	movne	r3, #0
   1253c:	andeq	r3, r3, #1
   12540:	cmp	r3, #0
   12544:	beq	12600 <close_stdout@@Base+0x109c>
   12548:	cmp	r2, #1
   1254c:	beq	12600 <close_stdout@@Base+0x109c>
   12550:	ldr	r1, [sp, #84]	; 0x54
   12554:	add	r3, r1, r2
   12558:	add	r7, r3, r7
   1255c:	ldrb	r3, [r4, #1]!
   12560:	sub	r3, r3, #91	; 0x5b
   12564:	cmp	r3, #33	; 0x21
   12568:	addls	pc, pc, r3, lsl #2
   1256c:	b	125f8 <close_stdout@@Base+0x1094>
   12570:	b	11ff0 <close_stdout@@Base+0xa8c>
   12574:	b	11ff0 <close_stdout@@Base+0xa8c>
   12578:	b	125f8 <close_stdout@@Base+0x1094>
   1257c:	b	11ff0 <close_stdout@@Base+0xa8c>
   12580:	b	125f8 <close_stdout@@Base+0x1094>
   12584:	b	11ff0 <close_stdout@@Base+0xa8c>
   12588:	b	125f8 <close_stdout@@Base+0x1094>
   1258c:	b	125f8 <close_stdout@@Base+0x1094>
   12590:	b	125f8 <close_stdout@@Base+0x1094>
   12594:	b	125f8 <close_stdout@@Base+0x1094>
   12598:	b	125f8 <close_stdout@@Base+0x1094>
   1259c:	b	125f8 <close_stdout@@Base+0x1094>
   125a0:	b	125f8 <close_stdout@@Base+0x1094>
   125a4:	b	125f8 <close_stdout@@Base+0x1094>
   125a8:	b	125f8 <close_stdout@@Base+0x1094>
   125ac:	b	125f8 <close_stdout@@Base+0x1094>
   125b0:	b	125f8 <close_stdout@@Base+0x1094>
   125b4:	b	125f8 <close_stdout@@Base+0x1094>
   125b8:	b	125f8 <close_stdout@@Base+0x1094>
   125bc:	b	125f8 <close_stdout@@Base+0x1094>
   125c0:	b	125f8 <close_stdout@@Base+0x1094>
   125c4:	b	125f8 <close_stdout@@Base+0x1094>
   125c8:	b	125f8 <close_stdout@@Base+0x1094>
   125cc:	b	125f8 <close_stdout@@Base+0x1094>
   125d0:	b	125f8 <close_stdout@@Base+0x1094>
   125d4:	b	125f8 <close_stdout@@Base+0x1094>
   125d8:	b	125f8 <close_stdout@@Base+0x1094>
   125dc:	b	125f8 <close_stdout@@Base+0x1094>
   125e0:	b	125f8 <close_stdout@@Base+0x1094>
   125e4:	b	125f8 <close_stdout@@Base+0x1094>
   125e8:	b	125f8 <close_stdout@@Base+0x1094>
   125ec:	b	125f8 <close_stdout@@Base+0x1094>
   125f0:	b	125f8 <close_stdout@@Base+0x1094>
   125f4:	b	11ff0 <close_stdout@@Base+0xa8c>
   125f8:	cmp	r4, r7
   125fc:	bne	1255c <close_stdout@@Base+0xff8>
   12600:	ldr	r0, [sp, #104]	; 0x68
   12604:	add	r9, r9, r2
   12608:	bl	10f2c <iswprint@plt>
   1260c:	cmp	r0, #0
   12610:	mov	r0, r5
   12614:	moveq	r6, #0
   12618:	bl	10ee4 <mbsinit@plt>
   1261c:	cmp	r0, #0
   12620:	beq	124f4 <close_stdout@@Base+0xf90>
   12624:	mov	ip, r6
   12628:	eor	r2, ip, #1
   1262c:	str	r9, [sp, #60]	; 0x3c
   12630:	ldr	r4, [sp, #92]	; 0x5c
   12634:	uxtb	r2, r2
   12638:	ldr	r9, [sp, #88]	; 0x58
   1263c:	ldr	r6, [sp, #96]	; 0x60
   12640:	ldr	r5, [sp, #100]	; 0x64
   12644:	ldr	r3, [sp, #60]	; 0x3c
   12648:	cmp	r3, #1
   1264c:	bls	121d0 <close_stdout@@Base+0xc6c>
   12650:	ldr	r0, [sp, #24]
   12654:	and	r2, r2, r0
   12658:	b	121dc <close_stdout@@Base+0xc78>
   1265c:	ldr	r2, [sp, #164]	; 0xa4
   12660:	tst	r2, #1
   12664:	addne	fp, fp, #1
   12668:	bne	11b98 <close_stdout@@Base+0x634>
   1266c:	b	11ea8 <close_stdout@@Base+0x944>
   12670:	ldr	r0, [sp, #36]	; 0x24
   12674:	cmp	r0, #0
   12678:	beq	11ea8 <close_stdout@@Base+0x944>
   1267c:	b	11ff0 <close_stdout@@Base+0xa8c>
   12680:	ldr	r2, [sp, #32]
   12684:	ldrb	r3, [r2, #1]
   12688:	adds	r3, r3, #0
   1268c:	movne	r3, #1
   12690:	b	11fc4 <close_stdout@@Base+0xa60>
   12694:	bl	110d0 <abort@plt>
   12698:	ldr	r8, [sp, #60]	; 0x3c
   1269c:	b	11ff0 <close_stdout@@Base+0xa8c>
   126a0:	ldr	r0, [sp, #32]
   126a4:	bl	10ff8 <strlen@plt>
   126a8:	mov	r8, r0
   126ac:	b	124b8 <close_stdout@@Base+0xf54>
   126b0:	ldr	r2, [pc, #288]	; 127d8 <close_stdout@@Base+0x1274>
   126b4:	mov	r1, #1
   126b8:	mov	r9, r1
   126bc:	str	r1, [sp, #24]
   126c0:	add	r2, pc, r2
   126c4:	str	r1, [sp, #28]
   126c8:	str	r2, [sp, #52]	; 0x34
   126cc:	b	11b74 <close_stdout@@Base+0x610>
   126d0:	ldr	r2, [pc, #260]	; 127dc <close_stdout@@Base+0x1278>
   126d4:	mov	r3, #1
   126d8:	mov	r9, r3
   126dc:	str	r3, [sp, #28]
   126e0:	add	r2, pc, r2
   126e4:	str	sl, [sp, #24]
   126e8:	str	r2, [sp, #52]	; 0x34
   126ec:	b	11b74 <close_stdout@@Base+0x610>
   126f0:	cmp	r8, r7
   126f4:	str	r9, [sp, #60]	; 0x3c
   126f8:	mov	ip, r4
   126fc:	ldr	r6, [sp, #96]	; 0x60
   12700:	ldr	r9, [sp, #88]	; 0x58
   12704:	ldr	r4, [sp, #92]	; 0x5c
   12708:	ldr	r5, [sp, #100]	; 0x64
   1270c:	bls	12744 <close_stdout@@Base+0x11e0>
   12710:	ldrb	r3, [ip]
   12714:	cmp	r3, #0
   12718:	beq	12744 <close_stdout@@Base+0x11e0>
   1271c:	ldr	r3, [sp, #60]	; 0x3c
   12720:	b	12730 <close_stdout@@Base+0x11cc>
   12724:	ldrb	r2, [r5, r3]
   12728:	cmp	r2, #0
   1272c:	beq	12740 <close_stdout@@Base+0x11dc>
   12730:	add	r3, r3, #1
   12734:	add	r2, fp, r3
   12738:	cmp	r8, r2
   1273c:	bhi	12724 <close_stdout@@Base+0x11c0>
   12740:	str	r3, [sp, #60]	; 0x3c
   12744:	mov	r2, #1
   12748:	b	12644 <close_stdout@@Base+0x10e0>
   1274c:	str	r9, [sp, #60]	; 0x3c
   12750:	mov	r2, #1
   12754:	ldr	r4, [sp, #92]	; 0x5c
   12758:	ldr	r6, [sp, #96]	; 0x60
   1275c:	ldr	r9, [sp, #88]	; 0x58
   12760:	ldr	r5, [sp, #100]	; 0x64
   12764:	b	12644 <close_stdout@@Base+0x10e0>
   12768:	ldr	r9, [sp, #36]	; 0x24
   1276c:	b	12390 <close_stdout@@Base+0xe2c>
   12770:	bl	10f08 <__stack_chk_fail@plt>
   12774:	ldr	r1, [pc, #100]	; 127e0 <close_stdout@@Base+0x127c>
   12778:	mov	r3, #0
   1277c:	mov	r0, #1
   12780:	str	r3, [sp, #24]
   12784:	add	r1, pc, r1
   12788:	str	r0, [sp, #28]
   1278c:	mov	r9, r3
   12790:	str	r1, [sp, #52]	; 0x34
   12794:	b	11b74 <close_stdout@@Base+0x610>
   12798:	ldr	r0, [pc, #68]	; 127e4 <close_stdout@@Base+0x1280>
   1279c:	mov	r3, #1
   127a0:	mov	r9, #0
   127a4:	str	r3, [sp, #24]
   127a8:	add	r0, pc, r0
   127ac:	str	r3, [sp, #28]
   127b0:	str	r0, [sp, #52]	; 0x34
   127b4:	b	11b74 <close_stdout@@Base+0x610>
   127b8:	andeq	r3, r1, ip, lsl r5
   127bc:	andeq	r0, r0, r0, ror #1
   127c0:	andeq	r2, r0, ip, ror r1
   127c4:	andeq	r2, r0, r8, asr r1
   127c8:	andeq	r2, r0, r4, lsl r1
   127cc:	strdeq	r2, [r0], -r0
   127d0:	andeq	r2, r0, r4, ror r0
   127d4:	andeq	r2, r0, ip, lsl r0
   127d8:	andeq	r1, r0, r4, ror sp
   127dc:	andeq	r1, r0, r0, asr sp
   127e0:	andeq	r1, r0, ip, lsr #25
   127e4:	andeq	r1, r0, ip, lsl #25
   127e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127ec:	sub	sp, sp, #44	; 0x2c
   127f0:	mov	r6, r0
   127f4:	mov	r9, r1
   127f8:	mov	sl, r2
   127fc:	mov	r4, r3
   12800:	bl	11010 <__errno_location@plt>
   12804:	ldr	fp, [pc, #412]	; 129a8 <close_stdout@@Base+0x1444>
   12808:	cmp	r6, #0
   1280c:	add	fp, pc, fp
   12810:	ldr	r5, [fp]
   12814:	ldr	r1, [r0]
   12818:	mov	r8, r0
   1281c:	str	r1, [sp, #36]	; 0x24
   12820:	blt	129a0 <close_stdout@@Base+0x143c>
   12824:	ldr	r3, [pc, #384]	; 129ac <close_stdout@@Base+0x1448>
   12828:	add	r3, pc, r3
   1282c:	ldr	r3, [r3]
   12830:	cmp	r6, r3
   12834:	bcc	12888 <close_stdout@@Base+0x1324>
   12838:	add	r7, r6, #1
   1283c:	cmn	r7, #-536870911	; 0xe0000001
   12840:	bhi	129a4 <close_stdout@@Base+0x1440>
   12844:	add	r3, fp, #4
   12848:	cmp	r5, r3
   1284c:	beq	12978 <close_stdout@@Base+0x1414>
   12850:	mov	r0, r5
   12854:	lsl	r1, r7, #3
   12858:	bl	13680 <close_stdout@@Base+0x211c>
   1285c:	mov	r5, r0
   12860:	str	r0, [fp]
   12864:	ldr	fp, [pc, #324]	; 129b0 <close_stdout@@Base+0x144c>
   12868:	mov	r1, #0
   1286c:	add	fp, pc, fp
   12870:	ldr	r0, [fp]
   12874:	rsb	r2, r0, r7
   12878:	add	r0, r5, r0, lsl #3
   1287c:	lsl	r2, r2, #3
   12880:	bl	11028 <memset@plt>
   12884:	str	r7, [fp]
   12888:	add	r2, r4, #8
   1288c:	str	r2, [sp, #32]
   12890:	ldr	r1, [r4]
   12894:	add	fp, r5, r6, lsl #3
   12898:	ldr	lr, [sp, #32]
   1289c:	mov	r2, r9
   128a0:	ldr	r3, [r4, #4]
   128a4:	ldr	ip, [r5, r6, lsl #3]
   128a8:	ldr	r7, [fp, #4]
   128ac:	orr	r3, r3, #1
   128b0:	str	r1, [sp]
   128b4:	str	r3, [sp, #4]
   128b8:	mov	r1, ip
   128bc:	str	lr, [sp, #8]
   128c0:	mov	r0, r7
   128c4:	ldr	lr, [r4, #40]	; 0x28
   128c8:	str	r3, [sp, #28]
   128cc:	mov	r3, sl
   128d0:	str	lr, [sp, #12]
   128d4:	ldr	lr, [r4, #44]	; 0x2c
   128d8:	str	ip, [sp, #24]
   128dc:	str	lr, [sp, #16]
   128e0:	bl	11ac0 <close_stdout@@Base+0x55c>
   128e4:	ldr	ip, [sp, #24]
   128e8:	cmp	ip, r0
   128ec:	bhi	12964 <close_stdout@@Base+0x1400>
   128f0:	ldr	r3, [pc, #188]	; 129b4 <close_stdout@@Base+0x1450>
   128f4:	add	r1, r0, #1
   128f8:	str	r1, [r5, r6, lsl #3]
   128fc:	add	r3, pc, r3
   12900:	cmp	r7, r3
   12904:	beq	12918 <close_stdout@@Base+0x13b4>
   12908:	mov	r0, r7
   1290c:	str	r1, [sp, #24]
   12910:	bl	10ec0 <free@plt>
   12914:	ldr	r1, [sp, #24]
   12918:	mov	r0, r1
   1291c:	str	r1, [sp, #24]
   12920:	bl	13628 <close_stdout@@Base+0x20c4>
   12924:	ldr	r3, [sp, #28]
   12928:	ldr	lr, [sp, #32]
   1292c:	mov	r2, r9
   12930:	str	r0, [fp, #4]
   12934:	mov	r7, r0
   12938:	ldr	ip, [r4]
   1293c:	str	r3, [sp, #4]
   12940:	mov	r3, sl
   12944:	str	lr, [sp, #8]
   12948:	str	ip, [sp]
   1294c:	ldr	ip, [r4, #40]	; 0x28
   12950:	ldr	r1, [sp, #24]
   12954:	str	ip, [sp, #12]
   12958:	ldr	ip, [r4, #44]	; 0x2c
   1295c:	str	ip, [sp, #16]
   12960:	bl	11ac0 <close_stdout@@Base+0x55c>
   12964:	ldr	r1, [sp, #36]	; 0x24
   12968:	mov	r0, r7
   1296c:	str	r1, [r8]
   12970:	add	sp, sp, #44	; 0x2c
   12974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12978:	lsl	r1, r7, #3
   1297c:	mov	r0, #0
   12980:	str	r3, [sp, #24]
   12984:	bl	13680 <close_stdout@@Base+0x211c>
   12988:	ldr	r3, [sp, #24]
   1298c:	mov	r5, r0
   12990:	ldm	r3, {r0, r1}
   12994:	str	r5, [fp]
   12998:	stm	r5, {r0, r1}
   1299c:	b	12864 <close_stdout@@Base+0x1300>
   129a0:	bl	110d0 <abort@plt>
   129a4:	bl	1383c <close_stdout@@Base+0x22d8>
   129a8:	andeq	r2, r1, r8, asr #18
   129ac:	strdeq	r2, [r1], -r8
   129b0:			; <UNDEFINED> instruction: 0x000128b4
   129b4:	andeq	r2, r1, r4, ror r8
   129b8:	push	{r4, r5, r6, lr}
   129bc:	mov	r5, r0
   129c0:	bl	11010 <__errno_location@plt>
   129c4:	cmp	r5, #0
   129c8:	mov	r1, #48	; 0x30
   129cc:	mov	r4, r0
   129d0:	ldr	r0, [pc, #24]	; 129f0 <close_stdout@@Base+0x148c>
   129d4:	ldr	r6, [r4]
   129d8:	add	r0, pc, r0
   129dc:	add	r0, r0, #256	; 0x100
   129e0:	movne	r0, r5
   129e4:	bl	137fc <close_stdout@@Base+0x2298>
   129e8:	str	r6, [r4]
   129ec:	pop	{r4, r5, r6, pc}
   129f0:	muleq	r1, r8, r7
   129f4:	cmp	r0, #0
   129f8:	beq	12a04 <close_stdout@@Base+0x14a0>
   129fc:	ldr	r0, [r0]
   12a00:	bx	lr
   12a04:	ldr	r0, [pc, #12]	; 12a18 <close_stdout@@Base+0x14b4>
   12a08:	add	r0, pc, r0
   12a0c:	add	r0, r0, #256	; 0x100
   12a10:	ldr	r0, [r0]
   12a14:	bx	lr
   12a18:	andeq	r2, r1, r8, ror #14
   12a1c:	cmp	r0, #0
   12a20:	beq	12a2c <close_stdout@@Base+0x14c8>
   12a24:	str	r1, [r0]
   12a28:	bx	lr
   12a2c:	ldr	r0, [pc, #12]	; 12a40 <close_stdout@@Base+0x14dc>
   12a30:	add	r0, pc, r0
   12a34:	add	r0, r0, #256	; 0x100
   12a38:	str	r1, [r0]
   12a3c:	bx	lr
   12a40:	andeq	r2, r1, r0, asr #14
   12a44:	cmp	r0, #0
   12a48:	movne	r3, r0
   12a4c:	beq	12a7c <close_stdout@@Base+0x1518>
   12a50:	lsr	ip, r1, #5
   12a54:	and	r1, r1, #31
   12a58:	add	r3, r3, ip, lsl #2
   12a5c:	ldr	ip, [r3, #8]
   12a60:	lsr	r0, ip, r1
   12a64:	eor	r2, r0, r2
   12a68:	and	r0, r0, #1
   12a6c:	and	r2, r2, #1
   12a70:	eor	ip, ip, r2, lsl r1
   12a74:	str	ip, [r3, #8]
   12a78:	bx	lr
   12a7c:	ldr	r3, [pc, #8]	; 12a8c <close_stdout@@Base+0x1528>
   12a80:	add	r3, pc, r3
   12a84:	add	r3, r3, #256	; 0x100
   12a88:	b	12a50 <close_stdout@@Base+0x14ec>
   12a8c:	strdeq	r2, [r1], -r0
   12a90:	subs	r3, r0, #0
   12a94:	beq	12aa4 <close_stdout@@Base+0x1540>
   12a98:	ldr	r0, [r3, #4]
   12a9c:	str	r1, [r3, #4]
   12aa0:	bx	lr
   12aa4:	ldr	r3, [pc, #8]	; 12ab4 <close_stdout@@Base+0x1550>
   12aa8:	add	r3, pc, r3
   12aac:	add	r3, r3, #256	; 0x100
   12ab0:	b	12a98 <close_stdout@@Base+0x1534>
   12ab4:	andeq	r2, r1, r8, asr #13
   12ab8:	cmp	r0, #0
   12abc:	push	{r3, lr}
   12ac0:	beq	12ae4 <close_stdout@@Base+0x1580>
   12ac4:	cmp	r2, #0
   12ac8:	cmpne	r1, #0
   12acc:	mov	r3, #8
   12ad0:	strne	r1, [r0, #40]	; 0x28
   12ad4:	str	r3, [r0]
   12ad8:	strne	r2, [r0, #44]	; 0x2c
   12adc:	popne	{r3, pc}
   12ae0:	bl	110d0 <abort@plt>
   12ae4:	ldr	r0, [pc, #8]	; 12af4 <close_stdout@@Base+0x1590>
   12ae8:	add	r0, pc, r0
   12aec:	add	r0, r0, #256	; 0x100
   12af0:	b	12ac4 <close_stdout@@Base+0x1560>
   12af4:	andeq	r2, r1, r8, lsl #13
   12af8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12afc:	sub	sp, sp, #24
   12b00:	mov	r7, r0
   12b04:	mov	sl, r1
   12b08:	ldr	r4, [sp, #56]	; 0x38
   12b0c:	mov	r9, r2
   12b10:	mov	r8, r3
   12b14:	cmp	r4, #0
   12b18:	beq	12b6c <close_stdout@@Base+0x1608>
   12b1c:	bl	11010 <__errno_location@plt>
   12b20:	ldr	r3, [r4]
   12b24:	add	lr, r4, #8
   12b28:	mov	r1, sl
   12b2c:	mov	r2, r9
   12b30:	ldr	r6, [r0]
   12b34:	mov	r5, r0
   12b38:	str	r3, [sp]
   12b3c:	mov	r0, r7
   12b40:	ldr	ip, [r4, #4]
   12b44:	mov	r3, r8
   12b48:	stmib	sp, {ip, lr}
   12b4c:	ldr	ip, [r4, #40]	; 0x28
   12b50:	str	ip, [sp, #12]
   12b54:	ldr	ip, [r4, #44]	; 0x2c
   12b58:	str	ip, [sp, #16]
   12b5c:	bl	11ac0 <close_stdout@@Base+0x55c>
   12b60:	str	r6, [r5]
   12b64:	add	sp, sp, #24
   12b68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b6c:	ldr	r4, [pc, #8]	; 12b7c <close_stdout@@Base+0x1618>
   12b70:	add	r4, pc, r4
   12b74:	add	r4, r4, #256	; 0x100
   12b78:	b	12b1c <close_stdout@@Base+0x15b8>
   12b7c:	andeq	r2, r1, r0, lsl #12
   12b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	subs	r4, r3, #0
   12b88:	sub	sp, sp, #36	; 0x24
   12b8c:	mov	r7, r0
   12b90:	mov	r6, r1
   12b94:	mov	r5, r2
   12b98:	beq	12c54 <close_stdout@@Base+0x16f0>
   12b9c:	bl	11010 <__errno_location@plt>
   12ba0:	ldr	r3, [r4]
   12ba4:	ldr	sl, [r4, #4]
   12ba8:	add	r9, r4, #8
   12bac:	mov	r8, r0
   12bb0:	mov	r0, #0
   12bb4:	ldr	r2, [r8]
   12bb8:	cmp	r5, r0
   12bbc:	orreq	sl, sl, #1
   12bc0:	str	r9, [sp, #8]
   12bc4:	mov	r1, r0
   12bc8:	stm	sp, {r3, sl}
   12bcc:	mov	r3, r6
   12bd0:	ldr	ip, [r4, #40]	; 0x28
   12bd4:	str	r2, [sp, #28]
   12bd8:	mov	r2, r7
   12bdc:	str	ip, [sp, #12]
   12be0:	ldr	ip, [r4, #44]	; 0x2c
   12be4:	str	ip, [sp, #16]
   12be8:	bl	11ac0 <close_stdout@@Base+0x55c>
   12bec:	add	r1, r0, #1
   12bf0:	mov	fp, r0
   12bf4:	str	r1, [sp, #24]
   12bf8:	mov	r0, r1
   12bfc:	bl	13628 <close_stdout@@Base+0x20c4>
   12c00:	ldr	lr, [r4]
   12c04:	str	sl, [sp, #4]
   12c08:	mov	r3, r6
   12c0c:	str	r9, [sp, #8]
   12c10:	mov	r2, r7
   12c14:	str	lr, [sp]
   12c18:	ldr	lr, [r4, #40]	; 0x28
   12c1c:	ldr	r1, [sp, #24]
   12c20:	str	lr, [sp, #12]
   12c24:	ldr	lr, [r4, #44]	; 0x2c
   12c28:	str	lr, [sp, #16]
   12c2c:	str	r0, [sp, #24]
   12c30:	bl	11ac0 <close_stdout@@Base+0x55c>
   12c34:	ldr	r3, [sp, #28]
   12c38:	cmp	r5, #0
   12c3c:	str	r3, [r8]
   12c40:	ldr	ip, [sp, #24]
   12c44:	strne	fp, [r5]
   12c48:	mov	r0, ip
   12c4c:	add	sp, sp, #36	; 0x24
   12c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c54:	ldr	r4, [pc, #8]	; 12c64 <close_stdout@@Base+0x1700>
   12c58:	add	r4, pc, r4
   12c5c:	add	r4, r4, #256	; 0x100
   12c60:	b	12b9c <close_stdout@@Base+0x1638>
   12c64:	andeq	r2, r1, r8, lsl r5
   12c68:	mov	r3, r2
   12c6c:	mov	r2, #0
   12c70:	b	12b80 <close_stdout@@Base+0x161c>
   12c74:	ldr	r2, [pc, #152]	; 12d14 <close_stdout@@Base+0x17b0>
   12c78:	push	{r3, r4, r5, r6, r7, lr}
   12c7c:	add	r2, pc, r2
   12c80:	ldr	r3, [pc, #144]	; 12d18 <close_stdout@@Base+0x17b4>
   12c84:	ldr	r6, [r2]
   12c88:	add	r3, pc, r3
   12c8c:	cmp	r6, #1
   12c90:	ldr	r7, [r3]
   12c94:	movhi	r4, #1
   12c98:	movhi	r5, r7
   12c9c:	bls	12cb8 <close_stdout@@Base+0x1754>
   12ca0:	ldr	r0, [r5, #12]
   12ca4:	add	r4, r4, #1
   12ca8:	bl	10ec0 <free@plt>
   12cac:	cmp	r4, r6
   12cb0:	add	r5, r5, #8
   12cb4:	bne	12ca0 <close_stdout@@Base+0x173c>
   12cb8:	ldr	r4, [pc, #92]	; 12d1c <close_stdout@@Base+0x17b8>
   12cbc:	ldr	r0, [r7, #4]
   12cc0:	add	r4, pc, r4
   12cc4:	cmp	r0, r4
   12cc8:	beq	12ce0 <close_stdout@@Base+0x177c>
   12ccc:	bl	10ec0 <free@plt>
   12cd0:	ldr	r3, [pc, #72]	; 12d20 <close_stdout@@Base+0x17bc>
   12cd4:	mov	r2, #256	; 0x100
   12cd8:	add	r3, pc, r3
   12cdc:	stmib	r3, {r2, r4}
   12ce0:	ldr	r4, [pc, #60]	; 12d24 <close_stdout@@Base+0x17c0>
   12ce4:	add	r4, pc, r4
   12ce8:	add	r5, r4, #4
   12cec:	cmp	r7, r5
   12cf0:	beq	12d00 <close_stdout@@Base+0x179c>
   12cf4:	mov	r0, r7
   12cf8:	bl	10ec0 <free@plt>
   12cfc:	str	r5, [r4]
   12d00:	ldr	r3, [pc, #32]	; 12d28 <close_stdout@@Base+0x17c4>
   12d04:	mov	r2, #1
   12d08:	add	r3, pc, r3
   12d0c:	str	r2, [r3]
   12d10:	pop	{r3, r4, r5, r6, r7, pc}
   12d14:	andeq	r2, r1, r4, lsr #9
   12d18:	andeq	r2, r1, ip, asr #9
   12d1c:			; <UNDEFINED> instruction: 0x000124b0
   12d20:	andeq	r2, r1, ip, ror r4
   12d24:	andeq	r2, r1, r0, ror r4
   12d28:	andeq	r2, r1, r8, lsl r4
   12d2c:	ldr	r3, [pc, #12]	; 12d40 <close_stdout@@Base+0x17dc>
   12d30:	mvn	r2, #0
   12d34:	add	r3, pc, r3
   12d38:	add	r3, r3, #256	; 0x100
   12d3c:	b	127e8 <close_stdout@@Base+0x1284>
   12d40:	andeq	r2, r1, ip, lsr r4
   12d44:	ldr	r3, [pc, #8]	; 12d54 <close_stdout@@Base+0x17f0>
   12d48:	add	r3, pc, r3
   12d4c:	add	r3, r3, #256	; 0x100
   12d50:	b	127e8 <close_stdout@@Base+0x1284>
   12d54:	andeq	r2, r1, r8, lsr #8
   12d58:	mov	r1, r0
   12d5c:	mov	r0, #0
   12d60:	b	12d2c <close_stdout@@Base+0x17c8>
   12d64:	mov	r2, r1
   12d68:	mov	r1, r0
   12d6c:	mov	r0, #0
   12d70:	b	12d44 <close_stdout@@Base+0x17e0>
   12d74:	ldr	r3, [pc, #92]	; 12dd8 <close_stdout@@Base+0x1874>
   12d78:	ldr	ip, [pc, #92]	; 12ddc <close_stdout@@Base+0x1878>
   12d7c:	add	r3, pc, r3
   12d80:	push	{r4, r5, r6, r7, lr}
   12d84:	sub	sp, sp, #60	; 0x3c
   12d88:	ldr	r4, [r3, ip]
   12d8c:	add	r5, sp, #4
   12d90:	mov	r7, r2
   12d94:	mov	r6, r0
   12d98:	mov	r0, r5
   12d9c:	ldr	r3, [r4]
   12da0:	str	r3, [sp, #52]	; 0x34
   12da4:	bl	11908 <close_stdout@@Base+0x3a4>
   12da8:	mov	r3, r5
   12dac:	mvn	r2, #0
   12db0:	mov	r0, r6
   12db4:	mov	r1, r7
   12db8:	bl	127e8 <close_stdout@@Base+0x1284>
   12dbc:	ldr	r2, [sp, #52]	; 0x34
   12dc0:	ldr	r3, [r4]
   12dc4:	cmp	r2, r3
   12dc8:	bne	12dd4 <close_stdout@@Base+0x1870>
   12dcc:	add	sp, sp, #60	; 0x3c
   12dd0:	pop	{r4, r5, r6, r7, pc}
   12dd4:	bl	10f08 <__stack_chk_fail@plt>
   12dd8:	andeq	r2, r1, ip, ror r2
   12ddc:	andeq	r0, r0, r0, ror #1
   12de0:	ldr	ip, [pc, #96]	; 12e48 <close_stdout@@Base+0x18e4>
   12de4:	push	{r4, r5, r6, r7, r8, lr}
   12de8:	add	ip, pc, ip
   12dec:	ldr	lr, [pc, #88]	; 12e4c <close_stdout@@Base+0x18e8>
   12df0:	sub	sp, sp, #56	; 0x38
   12df4:	mov	r8, r3
   12df8:	add	r5, sp, #4
   12dfc:	mov	r7, r2
   12e00:	mov	r6, r0
   12e04:	ldr	r4, [ip, lr]
   12e08:	mov	r0, r5
   12e0c:	ldr	r3, [r4]
   12e10:	str	r3, [sp, #52]	; 0x34
   12e14:	bl	11908 <close_stdout@@Base+0x3a4>
   12e18:	mov	r2, r8
   12e1c:	mov	r3, r5
   12e20:	mov	r0, r6
   12e24:	mov	r1, r7
   12e28:	bl	127e8 <close_stdout@@Base+0x1284>
   12e2c:	ldr	r2, [sp, #52]	; 0x34
   12e30:	ldr	r3, [r4]
   12e34:	cmp	r2, r3
   12e38:	bne	12e44 <close_stdout@@Base+0x18e0>
   12e3c:	add	sp, sp, #56	; 0x38
   12e40:	pop	{r4, r5, r6, r7, r8, pc}
   12e44:	bl	10f08 <__stack_chk_fail@plt>
   12e48:	andeq	r2, r1, r0, lsl r2
   12e4c:	andeq	r0, r0, r0, ror #1
   12e50:	mov	r2, r1
   12e54:	mov	r1, r0
   12e58:	mov	r0, #0
   12e5c:	b	12d74 <close_stdout@@Base+0x1810>
   12e60:	mov	ip, r1
   12e64:	mov	r3, r2
   12e68:	mov	r1, r0
   12e6c:	mov	r2, ip
   12e70:	mov	r0, #0
   12e74:	b	12de0 <close_stdout@@Base+0x187c>
   12e78:	push	{r4, r5, r6, r7, r8, lr}
   12e7c:	mov	r5, r2
   12e80:	ldr	lr, [pc, #136]	; 12f10 <close_stdout@@Base+0x19ac>
   12e84:	mov	r7, r0
   12e88:	mov	r6, r1
   12e8c:	ldr	r4, [pc, #128]	; 12f14 <close_stdout@@Base+0x19b0>
   12e90:	add	lr, pc, lr
   12e94:	sub	sp, sp, #56	; 0x38
   12e98:	add	lr, lr, #256	; 0x100
   12e9c:	ldr	r8, [pc, #116]	; 12f18 <close_stdout@@Base+0x19b4>
   12ea0:	add	r4, pc, r4
   12ea4:	add	ip, sp, #4
   12ea8:	ldm	lr!, {r0, r1, r2, r3}
   12eac:	ldr	r4, [r4, r8]
   12eb0:	stmia	ip!, {r0, r1, r2, r3}
   12eb4:	ldm	lr!, {r0, r1, r2, r3}
   12eb8:	ldr	r8, [r4]
   12ebc:	stmia	ip!, {r0, r1, r2, r3}
   12ec0:	ldm	lr, {r0, r1, r2, r3}
   12ec4:	str	r8, [sp, #52]	; 0x34
   12ec8:	stm	ip, {r0, r1, r2, r3}
   12ecc:	mov	r1, r5
   12ed0:	add	r5, sp, #4
   12ed4:	mov	r2, #1
   12ed8:	mov	r0, r5
   12edc:	bl	12a44 <close_stdout@@Base+0x14e0>
   12ee0:	mov	r2, r6
   12ee4:	mov	r3, r5
   12ee8:	mov	r1, r7
   12eec:	mov	r0, #0
   12ef0:	bl	127e8 <close_stdout@@Base+0x1284>
   12ef4:	ldr	r2, [sp, #52]	; 0x34
   12ef8:	ldr	r3, [r4]
   12efc:	cmp	r2, r3
   12f00:	bne	12f0c <close_stdout@@Base+0x19a8>
   12f04:	add	sp, sp, #56	; 0x38
   12f08:	pop	{r4, r5, r6, r7, r8, pc}
   12f0c:	bl	10f08 <__stack_chk_fail@plt>
   12f10:	andeq	r2, r1, r0, ror #5
   12f14:	andeq	r2, r1, r8, asr r1
   12f18:	andeq	r0, r0, r0, ror #1
   12f1c:	mov	r2, r1
   12f20:	mvn	r1, #0
   12f24:	b	12e78 <close_stdout@@Base+0x1914>
   12f28:	mov	r1, #58	; 0x3a
   12f2c:	b	12f1c <close_stdout@@Base+0x19b8>
   12f30:	mov	r2, #58	; 0x3a
   12f34:	b	12e78 <close_stdout@@Base+0x1914>
   12f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f3c:	mov	r5, r2
   12f40:	ldr	lr, [pc, #144]	; 12fd8 <close_stdout@@Base+0x1a74>
   12f44:	mov	r8, r0
   12f48:	mov	r9, r1
   12f4c:	mov	r7, r3
   12f50:	add	lr, pc, lr
   12f54:	ldr	r4, [pc, #128]	; 12fdc <close_stdout@@Base+0x1a78>
   12f58:	add	lr, lr, #256	; 0x100
   12f5c:	sub	sp, sp, #56	; 0x38
   12f60:	ldr	sl, [pc, #120]	; 12fe0 <close_stdout@@Base+0x1a7c>
   12f64:	add	r4, pc, r4
   12f68:	ldm	lr!, {r0, r1, r2, r3}
   12f6c:	add	ip, sp, #4
   12f70:	ldr	r4, [r4, sl]
   12f74:	ldr	r6, [sp, #88]	; 0x58
   12f78:	stmia	ip!, {r0, r1, r2, r3}
   12f7c:	ldm	lr!, {r0, r1, r2, r3}
   12f80:	ldr	sl, [r4]
   12f84:	stmia	ip!, {r0, r1, r2, r3}
   12f88:	ldm	lr, {r0, r1, r2, r3}
   12f8c:	str	sl, [sp, #52]	; 0x34
   12f90:	stm	ip, {r0, r1, r2, r3}
   12f94:	mov	r2, r5
   12f98:	add	r5, sp, #4
   12f9c:	mov	r1, r9
   12fa0:	mov	r0, r5
   12fa4:	bl	12ab8 <close_stdout@@Base+0x1554>
   12fa8:	mov	r2, r6
   12fac:	mov	r3, r5
   12fb0:	mov	r0, r8
   12fb4:	mov	r1, r7
   12fb8:	bl	127e8 <close_stdout@@Base+0x1284>
   12fbc:	ldr	r2, [sp, #52]	; 0x34
   12fc0:	ldr	r3, [r4]
   12fc4:	cmp	r2, r3
   12fc8:	bne	12fd4 <close_stdout@@Base+0x1a70>
   12fcc:	add	sp, sp, #56	; 0x38
   12fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fd4:	bl	10f08 <__stack_chk_fail@plt>
   12fd8:	andeq	r2, r1, r0, lsr #4
   12fdc:	muleq	r1, r4, r0
   12fe0:	andeq	r0, r0, r0, ror #1
   12fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   12fe8:	sub	sp, sp, #12
   12fec:	mvn	ip, #0
   12ff0:	str	ip, [sp]
   12ff4:	bl	12f38 <close_stdout@@Base+0x19d4>
   12ff8:	add	sp, sp, #12
   12ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   13000:	mov	ip, r1
   13004:	mov	r3, r2
   13008:	mov	r1, r0
   1300c:	mov	r2, ip
   13010:	mov	r0, #0
   13014:	b	12fe4 <close_stdout@@Base+0x1a80>
   13018:	push	{lr}		; (str lr, [sp, #-4]!)
   1301c:	sub	sp, sp, #12
   13020:	mov	lr, r1
   13024:	mov	ip, r2
   13028:	mov	r1, r0
   1302c:	str	r3, [sp]
   13030:	mov	r2, lr
   13034:	mov	r3, ip
   13038:	mov	r0, #0
   1303c:	bl	12f38 <close_stdout@@Base+0x19d4>
   13040:	add	sp, sp, #12
   13044:	pop	{pc}		; (ldr pc, [sp], #4)
   13048:	ldr	r3, [pc, #12]	; 1305c <close_stdout@@Base+0x1af8>
   1304c:	ldr	ip, [pc, #12]	; 13060 <close_stdout@@Base+0x1afc>
   13050:	add	r3, pc, r3
   13054:	ldr	r3, [r3, ip]
   13058:	b	127e8 <close_stdout@@Base+0x1284>
   1305c:	andeq	r1, r1, r8, lsr #31
   13060:	ldrdeq	r0, [r0], -ip
   13064:	mov	r2, r1
   13068:	mov	r1, r0
   1306c:	mov	r0, #0
   13070:	b	13048 <close_stdout@@Base+0x1ae4>
   13074:	mvn	r2, #0
   13078:	b	13048 <close_stdout@@Base+0x1ae4>
   1307c:	mov	r1, r0
   13080:	mov	r0, #0
   13084:	b	13074 <close_stdout@@Base+0x1b10>
   13088:	push	{r4, r5, r6, r7, lr}
   1308c:	cmp	r1, #0
   13090:	sub	sp, sp, #36	; 0x24
   13094:	ldr	r7, [pc, #896]	; 1341c <close_stdout@@Base+0x1eb8>
   13098:	mov	ip, r3
   1309c:	mov	r5, r0
   130a0:	add	r7, pc, r7
   130a4:	ldr	r4, [sp, #56]	; 0x38
   130a8:	ldr	r6, [sp, #60]	; 0x3c
   130ac:	beq	133f0 <close_stdout@@Base+0x1e8c>
   130b0:	str	r2, [sp]
   130b4:	mov	r3, r1
   130b8:	ldr	r2, [pc, #864]	; 13420 <close_stdout@@Base+0x1ebc>
   130bc:	mov	r1, #1
   130c0:	str	ip, [sp, #4]
   130c4:	add	r2, pc, r2
   130c8:	bl	11058 <__fprintf_chk@plt>
   130cc:	ldr	r1, [pc, #848]	; 13424 <close_stdout@@Base+0x1ec0>
   130d0:	mov	r2, #5
   130d4:	mov	r0, #0
   130d8:	add	r1, pc, r1
   130dc:	bl	10efc <dcgettext@plt>
   130e0:	ldr	r2, [pc, #832]	; 13428 <close_stdout@@Base+0x1ec4>
   130e4:	movw	ip, #2013	; 0x7dd
   130e8:	mov	r1, #1
   130ec:	ldr	r2, [r7, r2]
   130f0:	str	ip, [sp]
   130f4:	mov	r3, r0
   130f8:	mov	r0, r5
   130fc:	bl	11058 <__fprintf_chk@plt>
   13100:	ldr	r1, [pc, #804]	; 1342c <close_stdout@@Base+0x1ec8>
   13104:	mov	r0, #0
   13108:	mov	r2, #5
   1310c:	add	r1, pc, r1
   13110:	bl	10efc <dcgettext@plt>
   13114:	mov	r1, r5
   13118:	bl	10e90 <fputs_unlocked@plt>
   1311c:	cmp	r6, #9
   13120:	addls	pc, pc, r6, lsl #2
   13124:	b	1340c <close_stdout@@Base+0x1ea8>
   13128:	b	131bc <close_stdout@@Base+0x1c58>
   1312c:	b	131c0 <close_stdout@@Base+0x1c5c>
   13130:	b	131f0 <close_stdout@@Base+0x1c8c>
   13134:	b	13224 <close_stdout@@Base+0x1cc0>
   13138:	b	13260 <close_stdout@@Base+0x1cfc>
   1313c:	b	132a0 <close_stdout@@Base+0x1d3c>
   13140:	b	132e8 <close_stdout@@Base+0x1d84>
   13144:	b	13338 <close_stdout@@Base+0x1dd4>
   13148:	b	13390 <close_stdout@@Base+0x1e2c>
   1314c:	b	13150 <close_stdout@@Base+0x1bec>
   13150:	ldr	r1, [pc, #728]	; 13430 <close_stdout@@Base+0x1ecc>
   13154:	mov	r0, #0
   13158:	add	r1, pc, r1
   1315c:	mov	r2, #5
   13160:	bl	10efc <dcgettext@plt>
   13164:	ldm	r4, {r3, ip}
   13168:	mov	r1, #1
   1316c:	str	ip, [sp]
   13170:	ldr	ip, [r4, #8]
   13174:	str	ip, [sp, #4]
   13178:	ldr	ip, [r4, #12]
   1317c:	str	ip, [sp, #8]
   13180:	ldr	ip, [r4, #16]
   13184:	str	ip, [sp, #12]
   13188:	ldr	ip, [r4, #20]
   1318c:	str	ip, [sp, #16]
   13190:	ldr	ip, [r4, #24]
   13194:	str	ip, [sp, #20]
   13198:	ldr	ip, [r4, #28]
   1319c:	str	ip, [sp, #24]
   131a0:	ldr	ip, [r4, #32]
   131a4:	str	ip, [sp, #28]
   131a8:	mov	r2, r0
   131ac:	mov	r0, r5
   131b0:	bl	11058 <__fprintf_chk@plt>
   131b4:	add	sp, sp, #36	; 0x24
   131b8:	pop	{r4, r5, r6, r7, pc}
   131bc:	bl	110d0 <abort@plt>
   131c0:	ldr	r1, [pc, #620]	; 13434 <close_stdout@@Base+0x1ed0>
   131c4:	mov	r2, #5
   131c8:	mov	r0, #0
   131cc:	add	r1, pc, r1
   131d0:	bl	10efc <dcgettext@plt>
   131d4:	ldr	r3, [r4]
   131d8:	mov	r1, #1
   131dc:	mov	r2, r0
   131e0:	mov	r0, r5
   131e4:	add	sp, sp, #36	; 0x24
   131e8:	pop	{r4, r5, r6, r7, lr}
   131ec:	b	11058 <__fprintf_chk@plt>
   131f0:	ldr	r1, [pc, #576]	; 13438 <close_stdout@@Base+0x1ed4>
   131f4:	mov	r2, #5
   131f8:	mov	r0, #0
   131fc:	add	r1, pc, r1
   13200:	bl	10efc <dcgettext@plt>
   13204:	ldm	r4, {r3, ip}
   13208:	mov	r1, #1
   1320c:	str	ip, [sp, #56]	; 0x38
   13210:	mov	r2, r0
   13214:	mov	r0, r5
   13218:	add	sp, sp, #36	; 0x24
   1321c:	pop	{r4, r5, r6, r7, lr}
   13220:	b	11058 <__fprintf_chk@plt>
   13224:	ldr	r1, [pc, #528]	; 1343c <close_stdout@@Base+0x1ed8>
   13228:	mov	r2, #5
   1322c:	mov	r0, #0
   13230:	add	r1, pc, r1
   13234:	bl	10efc <dcgettext@plt>
   13238:	ldm	r4, {r3, ip}
   1323c:	mov	r1, #1
   13240:	str	ip, [sp, #56]	; 0x38
   13244:	ldr	ip, [r4, #8]
   13248:	str	ip, [sp, #60]	; 0x3c
   1324c:	mov	r2, r0
   13250:	mov	r0, r5
   13254:	add	sp, sp, #36	; 0x24
   13258:	pop	{r4, r5, r6, r7, lr}
   1325c:	b	11058 <__fprintf_chk@plt>
   13260:	ldr	r1, [pc, #472]	; 13440 <close_stdout@@Base+0x1edc>
   13264:	mov	r2, #5
   13268:	mov	r0, #0
   1326c:	add	r1, pc, r1
   13270:	bl	10efc <dcgettext@plt>
   13274:	ldm	r4, {r3, ip}
   13278:	mov	r1, #1
   1327c:	str	ip, [sp]
   13280:	ldr	ip, [r4, #8]
   13284:	str	ip, [sp, #4]
   13288:	ldr	ip, [r4, #12]
   1328c:	str	ip, [sp, #8]
   13290:	mov	r2, r0
   13294:	mov	r0, r5
   13298:	bl	11058 <__fprintf_chk@plt>
   1329c:	b	131b4 <close_stdout@@Base+0x1c50>
   132a0:	ldr	r1, [pc, #412]	; 13444 <close_stdout@@Base+0x1ee0>
   132a4:	mov	r2, #5
   132a8:	mov	r0, #0
   132ac:	add	r1, pc, r1
   132b0:	bl	10efc <dcgettext@plt>
   132b4:	ldm	r4, {r3, ip}
   132b8:	mov	r1, #1
   132bc:	str	ip, [sp]
   132c0:	ldr	ip, [r4, #8]
   132c4:	str	ip, [sp, #4]
   132c8:	ldr	ip, [r4, #12]
   132cc:	str	ip, [sp, #8]
   132d0:	ldr	ip, [r4, #16]
   132d4:	str	ip, [sp, #12]
   132d8:	mov	r2, r0
   132dc:	mov	r0, r5
   132e0:	bl	11058 <__fprintf_chk@plt>
   132e4:	b	131b4 <close_stdout@@Base+0x1c50>
   132e8:	ldr	r1, [pc, #344]	; 13448 <close_stdout@@Base+0x1ee4>
   132ec:	mov	r2, #5
   132f0:	mov	r0, #0
   132f4:	add	r1, pc, r1
   132f8:	bl	10efc <dcgettext@plt>
   132fc:	ldm	r4, {r3, ip}
   13300:	mov	r1, #1
   13304:	str	ip, [sp]
   13308:	ldr	ip, [r4, #8]
   1330c:	str	ip, [sp, #4]
   13310:	ldr	ip, [r4, #12]
   13314:	str	ip, [sp, #8]
   13318:	ldr	ip, [r4, #16]
   1331c:	str	ip, [sp, #12]
   13320:	ldr	ip, [r4, #20]
   13324:	str	ip, [sp, #16]
   13328:	mov	r2, r0
   1332c:	mov	r0, r5
   13330:	bl	11058 <__fprintf_chk@plt>
   13334:	b	131b4 <close_stdout@@Base+0x1c50>
   13338:	ldr	r1, [pc, #268]	; 1344c <close_stdout@@Base+0x1ee8>
   1333c:	mov	r2, #5
   13340:	mov	r0, #0
   13344:	add	r1, pc, r1
   13348:	bl	10efc <dcgettext@plt>
   1334c:	ldm	r4, {r3, ip}
   13350:	mov	r1, #1
   13354:	str	ip, [sp]
   13358:	ldr	ip, [r4, #8]
   1335c:	str	ip, [sp, #4]
   13360:	ldr	ip, [r4, #12]
   13364:	str	ip, [sp, #8]
   13368:	ldr	ip, [r4, #16]
   1336c:	str	ip, [sp, #12]
   13370:	ldr	ip, [r4, #20]
   13374:	str	ip, [sp, #16]
   13378:	ldr	ip, [r4, #24]
   1337c:	str	ip, [sp, #20]
   13380:	mov	r2, r0
   13384:	mov	r0, r5
   13388:	bl	11058 <__fprintf_chk@plt>
   1338c:	b	131b4 <close_stdout@@Base+0x1c50>
   13390:	ldr	r1, [pc, #184]	; 13450 <close_stdout@@Base+0x1eec>
   13394:	mov	r2, #5
   13398:	mov	r0, #0
   1339c:	add	r1, pc, r1
   133a0:	bl	10efc <dcgettext@plt>
   133a4:	ldm	r4, {r3, ip}
   133a8:	mov	r1, #1
   133ac:	str	ip, [sp]
   133b0:	ldr	ip, [r4, #8]
   133b4:	str	ip, [sp, #4]
   133b8:	ldr	ip, [r4, #12]
   133bc:	str	ip, [sp, #8]
   133c0:	ldr	ip, [r4, #16]
   133c4:	str	ip, [sp, #12]
   133c8:	ldr	ip, [r4, #20]
   133cc:	str	ip, [sp, #16]
   133d0:	ldr	ip, [r4, #24]
   133d4:	str	ip, [sp, #20]
   133d8:	ldr	ip, [r4, #28]
   133dc:	str	ip, [sp, #24]
   133e0:	mov	r2, r0
   133e4:	mov	r0, r5
   133e8:	bl	11058 <__fprintf_chk@plt>
   133ec:	b	131b4 <close_stdout@@Base+0x1c50>
   133f0:	str	r3, [sp]
   133f4:	mov	r3, r2
   133f8:	ldr	r2, [pc, #84]	; 13454 <close_stdout@@Base+0x1ef0>
   133fc:	mov	r1, #1
   13400:	add	r2, pc, r2
   13404:	bl	11058 <__fprintf_chk@plt>
   13408:	b	130cc <close_stdout@@Base+0x1b68>
   1340c:	ldr	r1, [pc, #68]	; 13458 <close_stdout@@Base+0x1ef4>
   13410:	mov	r0, #0
   13414:	add	r1, pc, r1
   13418:	b	1315c <close_stdout@@Base+0x1bf8>
   1341c:	andeq	r1, r1, r8, asr pc
   13420:	andeq	r1, r0, r4, asr #7
   13424:	andeq	r1, r0, r4, asr #7
   13428:	andeq	r0, r0, r0, lsl r1
   1342c:	muleq	r0, r4, r3
   13430:	andeq	r1, r0, r0, lsr #10
   13434:	andeq	r1, r0, r0, lsr #7
   13438:	andeq	r1, r0, r0, lsl #7
   1343c:	andeq	r1, r0, r4, ror #6
   13440:	andeq	r1, r0, r4, asr #6
   13444:	andeq	r1, r0, r4, lsr #6
   13448:	andeq	r1, r0, r0, lsl #6
   1344c:	ldrdeq	r1, [r0], -r8
   13450:	andeq	r1, r0, ip, lsr #5
   13454:	muleq	r0, r4, r0
   13458:	muleq	r0, r8, r2
   1345c:	push	{r4, r5, lr}
   13460:	sub	sp, sp, #12
   13464:	ldr	r5, [sp, #24]
   13468:	ldr	ip, [r5]
   1346c:	cmp	ip, #0
   13470:	beq	1348c <close_stdout@@Base+0x1f28>
   13474:	mov	lr, r5
   13478:	mov	ip, #0
   1347c:	ldr	r4, [lr, #4]!
   13480:	add	ip, ip, #1
   13484:	cmp	r4, #0
   13488:	bne	1347c <close_stdout@@Base+0x1f18>
   1348c:	stm	sp, {r5, ip}
   13490:	bl	13088 <close_stdout@@Base+0x1b24>
   13494:	add	sp, sp, #12
   13498:	pop	{r4, r5, pc}
   1349c:	push	{r4, r5, r6, r7, lr}
   134a0:	sub	sp, sp, #60	; 0x3c
   134a4:	ldr	r4, [pc, #100]	; 13510 <close_stdout@@Base+0x1fac>
   134a8:	mov	ip, #0
   134ac:	ldr	r5, [pc, #96]	; 13514 <close_stdout@@Base+0x1fb0>
   134b0:	mov	lr, ip
   134b4:	add	r4, pc, r4
   134b8:	ldr	r6, [sp, #80]	; 0x50
   134bc:	ldr	r7, [r4, r5]
   134c0:	add	r5, sp, #12
   134c4:	ldr	r4, [r7]
   134c8:	str	r4, [sp, #52]	; 0x34
   134cc:	ldr	r4, [r6, ip]
   134d0:	cmp	r4, #0
   134d4:	str	r4, [r5, ip]
   134d8:	beq	134ec <close_stdout@@Base+0x1f88>
   134dc:	add	lr, lr, #1
   134e0:	add	ip, ip, #4
   134e4:	cmp	lr, #10
   134e8:	bne	134cc <close_stdout@@Base+0x1f68>
   134ec:	stm	sp, {r5, lr}
   134f0:	bl	13088 <close_stdout@@Base+0x1b24>
   134f4:	ldr	r2, [sp, #52]	; 0x34
   134f8:	ldr	r3, [r7]
   134fc:	cmp	r2, r3
   13500:	bne	1350c <close_stdout@@Base+0x1fa8>
   13504:	add	sp, sp, #60	; 0x3c
   13508:	pop	{r4, r5, r6, r7, pc}
   1350c:	bl	10f08 <__stack_chk_fail@plt>
   13510:	andeq	r1, r1, r4, asr #22
   13514:	andeq	r0, r0, r0, ror #1
   13518:	push	{r3}		; (str r3, [sp, #-4]!)
   1351c:	push	{r4, lr}
   13520:	sub	sp, sp, #20
   13524:	ldr	lr, [pc, #72]	; 13574 <close_stdout@@Base+0x2010>
   13528:	add	ip, sp, #32
   1352c:	ldr	r4, [pc, #68]	; 13578 <close_stdout@@Base+0x2014>
   13530:	add	lr, pc, lr
   13534:	ldr	r3, [sp, #28]
   13538:	ldr	r4, [lr, r4]
   1353c:	str	ip, [sp]
   13540:	str	ip, [sp, #8]
   13544:	ldr	ip, [r4]
   13548:	str	ip, [sp, #12]
   1354c:	bl	1349c <close_stdout@@Base+0x1f38>
   13550:	ldr	r2, [sp, #12]
   13554:	ldr	r3, [r4]
   13558:	cmp	r2, r3
   1355c:	bne	13570 <close_stdout@@Base+0x200c>
   13560:	add	sp, sp, #20
   13564:	pop	{r4, lr}
   13568:	add	sp, sp, #4
   1356c:	bx	lr
   13570:	bl	10f08 <__stack_chk_fail@plt>
   13574:	andeq	r1, r1, r8, asr #21
   13578:	andeq	r0, r0, r0, ror #1
   1357c:	ldr	r1, [pc, #132]	; 13608 <close_stdout@@Base+0x20a4>
   13580:	mov	r2, #5
   13584:	push	{r4, lr}
   13588:	add	r1, pc, r1
   1358c:	mov	r0, #0
   13590:	ldr	r4, [pc, #116]	; 1360c <close_stdout@@Base+0x20a8>
   13594:	bl	10efc <dcgettext@plt>
   13598:	ldr	r2, [pc, #112]	; 13610 <close_stdout@@Base+0x20ac>
   1359c:	add	r4, pc, r4
   135a0:	add	r2, pc, r2
   135a4:	mov	r1, r0
   135a8:	mov	r0, #1
   135ac:	bl	11040 <__printf_chk@plt>
   135b0:	ldr	r1, [pc, #92]	; 13614 <close_stdout@@Base+0x20b0>
   135b4:	mov	r2, #5
   135b8:	mov	r0, #0
   135bc:	add	r1, pc, r1
   135c0:	bl	10efc <dcgettext@plt>
   135c4:	ldr	r2, [pc, #76]	; 13618 <close_stdout@@Base+0x20b4>
   135c8:	ldr	r3, [pc, #76]	; 1361c <close_stdout@@Base+0x20b8>
   135cc:	add	r2, pc, r2
   135d0:	add	r3, pc, r3
   135d4:	mov	r1, r0
   135d8:	mov	r0, #1
   135dc:	bl	11040 <__printf_chk@plt>
   135e0:	ldr	r1, [pc, #56]	; 13620 <close_stdout@@Base+0x20bc>
   135e4:	mov	r0, #0
   135e8:	mov	r2, #5
   135ec:	add	r1, pc, r1
   135f0:	bl	10efc <dcgettext@plt>
   135f4:	ldr	r3, [pc, #40]	; 13624 <close_stdout@@Base+0x20c0>
   135f8:	ldr	r3, [r4, r3]
   135fc:	pop	{r4, lr}
   13600:	ldr	r1, [r3]
   13604:	b	10e90 <fputs_unlocked@plt>
   13608:	andeq	r1, r0, r0, ror #2
   1360c:	andeq	r1, r1, ip, asr sl
   13610:	andeq	r1, r0, r0, ror #2
   13614:	andeq	r1, r0, ip, asr r1
   13618:			; <UNDEFINED> instruction: 0x00000cbc
   1361c:	andeq	r0, r0, r8, asr #25
   13620:	andeq	r1, r0, r0, asr #2
   13624:	strdeq	r0, [r0], -ip
   13628:	push	{r4, lr}
   1362c:	mov	r4, r0
   13630:	bl	10fa4 <malloc@plt>
   13634:	rsbs	r3, r0, #1
   13638:	movcc	r3, #0
   1363c:	cmp	r4, #0
   13640:	moveq	r3, #0
   13644:	cmp	r3, #0
   13648:	popeq	{r4, pc}
   1364c:	bl	1383c <close_stdout@@Base+0x22d8>
   13650:	push	{r3, r4, r5, lr}
   13654:	mov	r4, r0
   13658:	mvn	r0, #0
   1365c:	mov	r5, r1
   13660:	bl	13edc <close_stdout@@Base+0x2978>
   13664:	cmp	r0, r4
   13668:	bcc	13678 <close_stdout@@Base+0x2114>
   1366c:	mul	r0, r4, r5
   13670:	pop	{r3, r4, r5, lr}
   13674:	b	13628 <close_stdout@@Base+0x20c4>
   13678:	bl	1383c <close_stdout@@Base+0x22d8>
   1367c:	b	13628 <close_stdout@@Base+0x20c4>
   13680:	rsbs	r3, r1, #1
   13684:	push	{r4, lr}
   13688:	movcc	r3, #0
   1368c:	cmp	r0, #0
   13690:	mov	r4, r1
   13694:	moveq	r3, #0
   13698:	cmp	r3, #0
   1369c:	bne	136c0 <close_stdout@@Base+0x215c>
   136a0:	bl	10f14 <realloc@plt>
   136a4:	rsbs	r3, r0, #1
   136a8:	movcc	r3, #0
   136ac:	cmp	r4, #0
   136b0:	moveq	r3, #0
   136b4:	cmp	r3, #0
   136b8:	popeq	{r4, pc}
   136bc:	bl	1383c <close_stdout@@Base+0x22d8>
   136c0:	bl	10ec0 <free@plt>
   136c4:	mov	r0, #0
   136c8:	pop	{r4, pc}
   136cc:	push	{r4, r5, r6, lr}
   136d0:	mov	r5, r1
   136d4:	mov	r6, r0
   136d8:	mov	r1, r2
   136dc:	mvn	r0, #0
   136e0:	mov	r4, r2
   136e4:	bl	13edc <close_stdout@@Base+0x2978>
   136e8:	cmp	r0, r5
   136ec:	bcc	13700 <close_stdout@@Base+0x219c>
   136f0:	mov	r0, r6
   136f4:	mul	r1, r5, r4
   136f8:	pop	{r4, r5, r6, lr}
   136fc:	b	13680 <close_stdout@@Base+0x211c>
   13700:	bl	1383c <close_stdout@@Base+0x22d8>
   13704:	push	{r3, r4, r5, r6, r7, lr}
   13708:	subs	r7, r0, #0
   1370c:	mov	r5, r1
   13710:	mov	r6, r2
   13714:	ldr	r4, [r1]
   13718:	beq	13750 <close_stdout@@Base+0x21ec>
   1371c:	movw	r0, #43690	; 0xaaaa
   13720:	mov	r1, r2
   13724:	bfi	r0, r0, #16, #16
   13728:	bl	13edc <close_stdout@@Base+0x2978>
   1372c:	cmp	r4, r0
   13730:	addcc	r3, r4, #1
   13734:	addcc	r4, r4, r3, lsr #1
   13738:	bcs	13774 <close_stdout@@Base+0x2210>
   1373c:	str	r4, [r5]
   13740:	mov	r0, r7
   13744:	mul	r1, r6, r4
   13748:	pop	{r3, r4, r5, r6, r7, lr}
   1374c:	b	13680 <close_stdout@@Base+0x211c>
   13750:	cmp	r4, #0
   13754:	bne	1373c <close_stdout@@Base+0x21d8>
   13758:	mov	r0, #64	; 0x40
   1375c:	mov	r1, r2
   13760:	bl	13edc <close_stdout@@Base+0x2978>
   13764:	cmp	r0, #0
   13768:	movne	r4, r0
   1376c:	addeq	r4, r0, #1
   13770:	b	1373c <close_stdout@@Base+0x21d8>
   13774:	bl	1383c <close_stdout@@Base+0x22d8>
   13778:	cmp	r0, #0
   1377c:	push	{r3, lr}
   13780:	ldr	r3, [r1]
   13784:	beq	137b0 <close_stdout@@Base+0x224c>
   13788:	movw	r2, #43689	; 0xaaa9
   1378c:	movt	r2, #43690	; 0xaaaa
   13790:	cmp	r3, r2
   13794:	addls	r2, r3, #1
   13798:	addls	r3, r3, r2, lsr #1
   1379c:	bhi	137c8 <close_stdout@@Base+0x2264>
   137a0:	str	r3, [r1]
   137a4:	mov	r1, r3
   137a8:	pop	{r3, lr}
   137ac:	b	13680 <close_stdout@@Base+0x211c>
   137b0:	cmp	r3, #0
   137b4:	moveq	r3, #64	; 0x40
   137b8:	str	r3, [r1]
   137bc:	mov	r1, r3
   137c0:	pop	{r3, lr}
   137c4:	b	13680 <close_stdout@@Base+0x211c>
   137c8:	bl	1383c <close_stdout@@Base+0x22d8>
   137cc:	push	{r4, lr}
   137d0:	mov	r4, r0
   137d4:	bl	13628 <close_stdout@@Base+0x20c4>
   137d8:	mov	r2, r4
   137dc:	mov	r1, #0
   137e0:	pop	{r4, lr}
   137e4:	b	11028 <memset@plt>
   137e8:	push	{r3, lr}
   137ec:	bl	10e84 <calloc@plt>
   137f0:	cmp	r0, #0
   137f4:	popne	{r3, pc}
   137f8:	bl	1383c <close_stdout@@Base+0x22d8>
   137fc:	push	{r3, r4, r5, lr}
   13800:	mov	r4, r1
   13804:	mov	r5, r0
   13808:	mov	r0, r1
   1380c:	bl	13628 <close_stdout@@Base+0x20c4>
   13810:	mov	r1, r5
   13814:	mov	r2, r4
   13818:	pop	{r3, r4, r5, lr}
   1381c:	b	10ed8 <memcpy@plt>
   13820:	push	{r4, lr}
   13824:	mov	r4, r0
   13828:	bl	10ff8 <strlen@plt>
   1382c:	add	r1, r0, #1
   13830:	mov	r0, r4
   13834:	pop	{r4, lr}
   13838:	b	137fc <close_stdout@@Base+0x2298>
   1383c:	ldr	r3, [pc, #64]	; 13884 <close_stdout@@Base+0x2320>
   13840:	mov	r2, #5
   13844:	ldr	ip, [pc, #60]	; 13888 <close_stdout@@Base+0x2324>
   13848:	mov	r0, #0
   1384c:	add	r3, pc, r3
   13850:	ldr	r1, [pc, #52]	; 1388c <close_stdout@@Base+0x2328>
   13854:	push	{r4, lr}
   13858:	add	r1, pc, r1
   1385c:	ldr	r3, [r3, ip]
   13860:	ldr	r4, [r3]
   13864:	bl	10efc <dcgettext@plt>
   13868:	ldr	r2, [pc, #32]	; 13890 <close_stdout@@Base+0x232c>
   1386c:	mov	r1, #0
   13870:	add	r2, pc, r2
   13874:	mov	r3, r0
   13878:	mov	r0, r4
   1387c:	bl	10f80 <error@plt>
   13880:	bl	110d0 <abort@plt>
   13884:	andeq	r1, r1, ip, lsr #15
   13888:	andeq	r0, r0, r4, lsl #2
   1388c:	andeq	r0, r0, r4, asr #30
   13890:	andeq	r0, r0, ip, lsr fp
   13894:	push	{r4, r5, r6, lr}
   13898:	mov	r4, r0
   1389c:	bl	10f68 <__fpending@plt>
   138a0:	mov	r6, r0
   138a4:	mov	r0, r4
   138a8:	ldr	r4, [r4]
   138ac:	bl	13d34 <close_stdout@@Base+0x27d0>
   138b0:	and	r4, r4, #32
   138b4:	adds	r5, r0, #0
   138b8:	movne	r5, #1
   138bc:	cmp	r4, #0
   138c0:	bne	138e0 <close_stdout@@Base+0x237c>
   138c4:	cmp	r5, #0
   138c8:	beq	138d8 <close_stdout@@Base+0x2374>
   138cc:	cmp	r6, #0
   138d0:	beq	138fc <close_stdout@@Base+0x2398>
   138d4:	mvn	r4, #0
   138d8:	mov	r0, r4
   138dc:	pop	{r4, r5, r6, pc}
   138e0:	cmp	r5, #0
   138e4:	bne	138d4 <close_stdout@@Base+0x2370>
   138e8:	bl	11010 <__errno_location@plt>
   138ec:	mvn	r4, #0
   138f0:	str	r5, [r0]
   138f4:	mov	r0, r4
   138f8:	pop	{r4, r5, r6, pc}
   138fc:	bl	11010 <__errno_location@plt>
   13900:	ldr	r4, [r0]
   13904:	subs	r4, r4, #9
   13908:	mvnne	r4, #0
   1390c:	mov	r0, r4
   13910:	pop	{r4, r5, r6, pc}
   13914:	ldr	r3, [pc, #984]	; 13cf4 <close_stdout@@Base+0x2790>
   13918:	mov	r0, #14
   1391c:	ldr	r2, [pc, #980]	; 13cf8 <close_stdout@@Base+0x2794>
   13920:	add	r3, pc, r3
   13924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13928:	sub	sp, sp, #132	; 0x84
   1392c:	ldr	r6, [r3, r2]
   13930:	ldr	r3, [r6]
   13934:	str	r3, [sp, #124]	; 0x7c
   13938:	bl	110a0 <nl_langinfo@plt>
   1393c:	subs	r5, r0, #0
   13940:	beq	139f4 <close_stdout@@Base+0x2490>
   13944:	ldr	r3, [pc, #944]	; 13cfc <close_stdout@@Base+0x2798>
   13948:	ldr	r4, [pc, r3]
   1394c:	cmp	r4, #0
   13950:	beq	13a00 <close_stdout@@Base+0x249c>
   13954:	ldrb	r7, [r4]
   13958:	cmp	r7, #0
   1395c:	bne	13990 <close_stdout@@Base+0x242c>
   13960:	b	139c8 <close_stdout@@Base+0x2464>
   13964:	mov	r0, r4
   13968:	bl	10ff8 <strlen@plt>
   1396c:	add	r0, r0, #1
   13970:	add	r7, r4, r0
   13974:	mov	r0, r7
   13978:	bl	10ff8 <strlen@plt>
   1397c:	add	r0, r0, #1
   13980:	add	r4, r7, r0
   13984:	ldrb	r7, [r7, r0]
   13988:	cmp	r7, #0
   1398c:	beq	139c8 <close_stdout@@Base+0x2464>
   13990:	mov	r0, r5
   13994:	mov	r1, r4
   13998:	bl	10ea8 <strcmp@plt>
   1399c:	cmp	r0, #0
   139a0:	beq	139b8 <close_stdout@@Base+0x2454>
   139a4:	cmp	r7, #42	; 0x2a
   139a8:	bne	13964 <close_stdout@@Base+0x2400>
   139ac:	ldrb	r3, [r4, #1]
   139b0:	cmp	r3, #0
   139b4:	bne	13964 <close_stdout@@Base+0x2400>
   139b8:	mov	r0, r4
   139bc:	bl	10ff8 <strlen@plt>
   139c0:	add	r0, r0, #1
   139c4:	add	r5, r4, r0
   139c8:	ldrb	r3, [r5]
   139cc:	cmp	r3, #0
   139d0:	ldreq	r5, [pc, #808]	; 13d00 <close_stdout@@Base+0x279c>
   139d4:	addeq	r5, pc, r5
   139d8:	ldr	r2, [sp, #124]	; 0x7c
   139dc:	mov	r0, r5
   139e0:	ldr	r3, [r6]
   139e4:	cmp	r2, r3
   139e8:	bne	13cc8 <close_stdout@@Base+0x2764>
   139ec:	add	sp, sp, #132	; 0x84
   139f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f4:	ldr	r5, [pc, #776]	; 13d04 <close_stdout@@Base+0x27a0>
   139f8:	add	r5, pc, r5
   139fc:	b	13944 <close_stdout@@Base+0x23e0>
   13a00:	ldr	r0, [pc, #768]	; 13d08 <close_stdout@@Base+0x27a4>
   13a04:	add	r0, pc, r0
   13a08:	bl	10f98 <getenv@plt>
   13a0c:	subs	r8, r0, #0
   13a10:	beq	13ca0 <close_stdout@@Base+0x273c>
   13a14:	ldrb	r3, [r8]
   13a18:	cmp	r3, #0
   13a1c:	beq	13c34 <close_stdout@@Base+0x26d0>
   13a20:	bl	10ff8 <strlen@plt>
   13a24:	subs	sl, r0, #0
   13a28:	subne	r3, sl, #1
   13a2c:	bne	13c44 <close_stdout@@Base+0x26e0>
   13a30:	mov	r9, #0
   13a34:	mov	fp, r9
   13a38:	add	r9, sl, r9
   13a3c:	add	r0, r9, #14
   13a40:	bl	10fa4 <malloc@plt>
   13a44:	subs	r7, r0, #0
   13a48:	beq	13c94 <close_stdout@@Base+0x2730>
   13a4c:	mov	r1, r8
   13a50:	mov	r2, sl
   13a54:	bl	10ed8 <memcpy@plt>
   13a58:	cmp	fp, #0
   13a5c:	add	ip, r7, r9
   13a60:	movne	r3, #47	; 0x2f
   13a64:	strbne	r3, [r7, sl]
   13a68:	ldr	r3, [pc, #668]	; 13d0c <close_stdout@@Base+0x27a8>
   13a6c:	add	r3, pc, r3
   13a70:	ldm	r3!, {r0, r1, r2}
   13a74:	ldrh	r3, [r3]
   13a78:	str	r0, [r7, r9]
   13a7c:	mov	r0, r7
   13a80:	str	r1, [ip, #4]
   13a84:	mov	r1, #32768	; 0x8000
   13a88:	strh	r3, [ip, #12]
   13a8c:	str	r2, [ip, #8]
   13a90:	bl	10f8c <open64@plt>
   13a94:	subs	r8, r0, #0
   13a98:	blt	13c5c <close_stdout@@Base+0x26f8>
   13a9c:	ldr	r1, [pc, #620]	; 13d10 <close_stdout@@Base+0x27ac>
   13aa0:	add	r1, pc, r1
   13aa4:	bl	10e78 <fdopen@plt>
   13aa8:	subs	fp, r0, #0
   13aac:	beq	13cb4 <close_stdout@@Base+0x2750>
   13ab0:	ldr	r0, [pc, #604]	; 13d14 <close_stdout@@Base+0x27b0>
   13ab4:	add	sl, sp, #20
   13ab8:	add	r9, sp, #72	; 0x48
   13abc:	mov	r8, #0
   13ac0:	add	r0, pc, r0
   13ac4:	str	r0, [sp, #12]
   13ac8:	ldr	r3, [fp, #4]
   13acc:	ldr	r2, [fp, #8]
   13ad0:	cmp	r3, r2
   13ad4:	bcs	13bc0 <close_stdout@@Base+0x265c>
   13ad8:	add	r2, r3, #1
   13adc:	str	r2, [fp, #4]
   13ae0:	ldrb	r0, [r3]
   13ae4:	cmp	r0, #32
   13ae8:	beq	13ac8 <close_stdout@@Base+0x2564>
   13aec:	sub	r3, r0, #9
   13af0:	cmp	r3, #1
   13af4:	bls	13ac8 <close_stdout@@Base+0x2564>
   13af8:	cmp	r0, #35	; 0x23
   13afc:	beq	13bd4 <close_stdout@@Base+0x2670>
   13b00:	mov	r1, fp
   13b04:	bl	11004 <ungetc@plt>
   13b08:	mov	r0, fp
   13b0c:	ldr	r1, [sp, #12]
   13b10:	mov	r2, sl
   13b14:	mov	r3, r9
   13b18:	bl	11034 <fscanf@plt>
   13b1c:	cmp	r0, #1
   13b20:	ble	13c04 <close_stdout@@Base+0x26a0>
   13b24:	mov	r0, sl
   13b28:	bl	10ff8 <strlen@plt>
   13b2c:	str	r0, [sp, #8]
   13b30:	mov	r0, r9
   13b34:	bl	10ff8 <strlen@plt>
   13b38:	cmp	r8, #0
   13b3c:	mov	r2, r0
   13b40:	bne	13c68 <close_stdout@@Base+0x2704>
   13b44:	ldr	r3, [sp, #8]
   13b48:	str	r2, [sp]
   13b4c:	add	r8, r0, r3
   13b50:	add	r0, r8, #3
   13b54:	add	r8, r8, #2
   13b58:	bl	10fa4 <malloc@plt>
   13b5c:	ldr	r2, [sp]
   13b60:	mov	r3, r0
   13b64:	cmp	r3, #0
   13b68:	beq	13ccc <close_stdout@@Base+0x2768>
   13b6c:	ldr	r0, [sp, #8]
   13b70:	movw	r1, #65534	; 0xfffe
   13b74:	movt	r1, #65535	; 0xffff
   13b78:	rsb	r2, r2, r8
   13b7c:	rsb	r1, r0, r1
   13b80:	stm	sp, {r2, r3}
   13b84:	add	r0, r1, r2
   13b88:	mov	r1, sl
   13b8c:	add	r0, r3, r0
   13b90:	mov	r4, r3
   13b94:	bl	10f5c <strcpy@plt>
   13b98:	ldr	r2, [sp]
   13b9c:	ldr	r3, [sp, #4]
   13ba0:	mov	r1, r9
   13ba4:	sub	r0, r2, #1
   13ba8:	add	r0, r3, r0
   13bac:	bl	10f5c <strcpy@plt>
   13bb0:	ldr	r3, [fp, #4]
   13bb4:	ldr	r2, [fp, #8]
   13bb8:	cmp	r3, r2
   13bbc:	bcc	13ad8 <close_stdout@@Base+0x2574>
   13bc0:	mov	r0, fp
   13bc4:	bl	1107c <__uflow@plt>
   13bc8:	cmn	r0, #1
   13bcc:	beq	13c04 <close_stdout@@Base+0x26a0>
   13bd0:	b	13ae4 <close_stdout@@Base+0x2580>
   13bd4:	ldr	r3, [fp, #4]
   13bd8:	ldr	r2, [fp, #8]
   13bdc:	cmp	r3, r2
   13be0:	bcs	13ce8 <close_stdout@@Base+0x2784>
   13be4:	add	r2, r3, #1
   13be8:	str	r2, [fp, #4]
   13bec:	ldrb	r0, [r3]
   13bf0:	cmp	r0, #10
   13bf4:	cmnne	r0, #1
   13bf8:	bne	13bd4 <close_stdout@@Base+0x2670>
   13bfc:	cmn	r0, #1
   13c00:	bne	13ac8 <close_stdout@@Base+0x2564>
   13c04:	mov	r0, fp
   13c08:	bl	13d34 <close_stdout@@Base+0x27d0>
   13c0c:	cmp	r8, #0
   13c10:	beq	13c5c <close_stdout@@Base+0x26f8>
   13c14:	mov	r3, #0
   13c18:	strb	r3, [r4, r8]
   13c1c:	mov	r0, r7
   13c20:	bl	10ec0 <free@plt>
   13c24:	ldr	r3, [pc, #236]	; 13d18 <close_stdout@@Base+0x27b4>
   13c28:	add	r3, pc, r3
   13c2c:	str	r4, [r3]
   13c30:	b	13954 <close_stdout@@Base+0x23f0>
   13c34:	ldr	r8, [pc, #224]	; 13d1c <close_stdout@@Base+0x27b8>
   13c38:	mov	r3, #7
   13c3c:	mov	sl, #8
   13c40:	add	r8, pc, r8
   13c44:	ldrb	r3, [r8, r3]
   13c48:	cmp	r3, #47	; 0x2f
   13c4c:	movne	r9, #1
   13c50:	movne	fp, r9
   13c54:	bne	13a38 <close_stdout@@Base+0x24d4>
   13c58:	b	13a30 <close_stdout@@Base+0x24cc>
   13c5c:	ldr	r4, [pc, #188]	; 13d20 <close_stdout@@Base+0x27bc>
   13c60:	add	r4, pc, r4
   13c64:	b	13c1c <close_stdout@@Base+0x26b8>
   13c68:	ldr	r0, [sp, #8]
   13c6c:	str	r2, [sp]
   13c70:	add	r3, r0, r2
   13c74:	mov	r0, r4
   13c78:	add	r8, r3, r8
   13c7c:	add	r1, r8, #3
   13c80:	add	r8, r8, #2
   13c84:	bl	10f14 <realloc@plt>
   13c88:	ldr	r2, [sp]
   13c8c:	mov	r3, r0
   13c90:	b	13b64 <close_stdout@@Base+0x2600>
   13c94:	ldr	r4, [pc, #136]	; 13d24 <close_stdout@@Base+0x27c0>
   13c98:	add	r4, pc, r4
   13c9c:	b	13c24 <close_stdout@@Base+0x26c0>
   13ca0:	ldr	r8, [pc, #128]	; 13d28 <close_stdout@@Base+0x27c4>
   13ca4:	mov	r3, #7
   13ca8:	mov	sl, #8
   13cac:	add	r8, pc, r8
   13cb0:	b	13c44 <close_stdout@@Base+0x26e0>
   13cb4:	ldr	r4, [pc, #112]	; 13d2c <close_stdout@@Base+0x27c8>
   13cb8:	mov	r0, r8
   13cbc:	add	r4, pc, r4
   13cc0:	bl	110dc <close@plt>
   13cc4:	b	13c1c <close_stdout@@Base+0x26b8>
   13cc8:	bl	10f08 <__stack_chk_fail@plt>
   13ccc:	mov	r0, r4
   13cd0:	ldr	r4, [pc, #88]	; 13d30 <close_stdout@@Base+0x27cc>
   13cd4:	bl	10ec0 <free@plt>
   13cd8:	mov	r0, fp
   13cdc:	add	r4, pc, r4
   13ce0:	bl	13d34 <close_stdout@@Base+0x27d0>
   13ce4:	b	13c1c <close_stdout@@Base+0x26b8>
   13ce8:	mov	r0, fp
   13cec:	bl	1107c <__uflow@plt>
   13cf0:	b	13bf0 <close_stdout@@Base+0x268c>
   13cf4:	ldrdeq	r1, [r1], -r8
   13cf8:	andeq	r0, r0, r0, ror #1
   13cfc:	andeq	r1, r1, r8, asr r9
   13d00:	andeq	r0, r0, r8, ror #27
   13d04:	andeq	r0, r0, r4, asr r9
   13d08:	andeq	r0, r0, r0, asr #27
   13d0c:	andeq	r0, r0, r8, ror #26
   13d10:	andeq	r0, r0, r4, asr #26
   13d14:	andeq	r0, r0, r8, lsr #26
   13d18:	andeq	r1, r1, r8, ror r6
   13d1c:	andeq	r0, r0, r0, ror fp
   13d20:	andeq	r0, r0, ip, ror #13
   13d24:			; <UNDEFINED> instruction: 0x000006b4
   13d28:	andeq	r0, r0, r4, lsl #22
   13d2c:	muleq	r0, r0, r6
   13d30:	andeq	r0, r0, r0, ror r6
   13d34:	push	{r4, r5, r6, lr}
   13d38:	sub	sp, sp, #8
   13d3c:	mov	r4, r0
   13d40:	bl	1104c <fileno@plt>
   13d44:	cmp	r0, #0
   13d48:	mov	r0, r4
   13d4c:	blt	13dc8 <close_stdout@@Base+0x2864>
   13d50:	bl	10fbc <__freading@plt>
   13d54:	cmp	r0, #0
   13d58:	bne	13d94 <close_stdout@@Base+0x2830>
   13d5c:	mov	r0, r4
   13d60:	bl	13dd4 <close_stdout@@Base+0x2870>
   13d64:	cmp	r0, #0
   13d68:	beq	13dc4 <close_stdout@@Base+0x2860>
   13d6c:	bl	11010 <__errno_location@plt>
   13d70:	ldr	r6, [r0]
   13d74:	mov	r5, r0
   13d78:	mov	r0, r4
   13d7c:	bl	11064 <fclose@plt>
   13d80:	cmp	r6, #0
   13d84:	mvnne	r0, #0
   13d88:	strne	r6, [r5]
   13d8c:	add	sp, sp, #8
   13d90:	pop	{r4, r5, r6, pc}
   13d94:	mov	r0, r4
   13d98:	bl	1104c <fileno@plt>
   13d9c:	mov	r1, #1
   13da0:	mov	r2, #0
   13da4:	mov	r3, #0
   13da8:	str	r1, [sp]
   13dac:	bl	10f44 <lseek64@plt>
   13db0:	mvn	r2, #0
   13db4:	mvn	r3, #0
   13db8:	cmp	r1, r3
   13dbc:	cmpeq	r0, r2
   13dc0:	bne	13d5c <close_stdout@@Base+0x27f8>
   13dc4:	mov	r0, r4
   13dc8:	add	sp, sp, #8
   13dcc:	pop	{r4, r5, r6, lr}
   13dd0:	b	11064 <fclose@plt>
   13dd4:	push	{r4, lr}
   13dd8:	subs	r4, r0, #0
   13ddc:	sub	sp, sp, #8
   13de0:	beq	13df0 <close_stdout@@Base+0x288c>
   13de4:	bl	10fbc <__freading@plt>
   13de8:	cmp	r0, #0
   13dec:	bne	13e00 <close_stdout@@Base+0x289c>
   13df0:	mov	r0, r4
   13df4:	add	sp, sp, #8
   13df8:	pop	{r4, lr}
   13dfc:	b	10eb4 <fflush@plt>
   13e00:	ldr	r3, [r4]
   13e04:	tst	r3, #256	; 0x100
   13e08:	beq	13df0 <close_stdout@@Base+0x288c>
   13e0c:	mov	r3, #1
   13e10:	mov	r0, r4
   13e14:	str	r3, [sp]
   13e18:	mov	r2, #0
   13e1c:	mov	r3, #0
   13e20:	bl	13e34 <close_stdout@@Base+0x28d0>
   13e24:	mov	r0, r4
   13e28:	add	sp, sp, #8
   13e2c:	pop	{r4, lr}
   13e30:	b	10eb4 <fflush@plt>
   13e34:	push	{r4, r5, r6, r7, lr}
   13e38:	sub	sp, sp, #20
   13e3c:	ldmib	r0, {r1, ip}
   13e40:	mov	r6, r0
   13e44:	ldr	r4, [sp, #40]	; 0x28
   13e48:	cmp	ip, r1
   13e4c:	beq	13e64 <close_stdout@@Base+0x2900>
   13e50:	str	r4, [sp, #40]	; 0x28
   13e54:	mov	r0, r6
   13e58:	add	sp, sp, #20
   13e5c:	pop	{r4, r5, r6, r7, lr}
   13e60:	b	11070 <fseeko64@plt>
   13e64:	ldr	ip, [r0, #20]
   13e68:	ldr	r1, [r0, #16]
   13e6c:	cmp	ip, r1
   13e70:	bne	13e50 <close_stdout@@Base+0x28ec>
   13e74:	ldr	r7, [r0, #36]	; 0x24
   13e78:	cmp	r7, #0
   13e7c:	bne	13e50 <close_stdout@@Base+0x28ec>
   13e80:	str	r2, [sp, #12]
   13e84:	mvn	r5, #0
   13e88:	str	r3, [sp, #8]
   13e8c:	bl	1104c <fileno@plt>
   13e90:	str	r4, [sp]
   13e94:	mvn	r4, #0
   13e98:	ldr	r2, [sp, #12]
   13e9c:	ldr	r3, [sp, #8]
   13ea0:	bl	10f44 <lseek64@plt>
   13ea4:	mov	r2, r0
   13ea8:	mov	r3, r1
   13eac:	cmp	r3, r5
   13eb0:	cmpeq	r2, r4
   13eb4:	beq	13ed4 <close_stdout@@Base+0x2970>
   13eb8:	ldr	r1, [r6]
   13ebc:	mov	r0, r7
   13ec0:	strd	r2, [r6, #80]	; 0x50
   13ec4:	bic	r3, r1, #16
   13ec8:	str	r3, [r6]
   13ecc:	add	sp, sp, #20
   13ed0:	pop	{r4, r5, r6, r7, pc}
   13ed4:	mvn	r0, #0
   13ed8:	b	13ecc <close_stdout@@Base+0x2968>
   13edc:	subs	r2, r1, #1
   13ee0:	bxeq	lr
   13ee4:	bcc	140bc <close_stdout@@Base+0x2b58>
   13ee8:	cmp	r0, r1
   13eec:	bls	140a0 <close_stdout@@Base+0x2b3c>
   13ef0:	tst	r1, r2
   13ef4:	beq	140ac <close_stdout@@Base+0x2b48>
   13ef8:	clz	r3, r0
   13efc:	clz	r2, r1
   13f00:	sub	r3, r2, r3
   13f04:	rsbs	r3, r3, #31
   13f08:	addne	r3, r3, r3, lsl #1
   13f0c:	mov	r2, #0
   13f10:	addne	pc, pc, r3, lsl #2
   13f14:	nop	{0}
   13f18:	cmp	r0, r1, lsl #31
   13f1c:	adc	r2, r2, r2
   13f20:	subcs	r0, r0, r1, lsl #31
   13f24:	cmp	r0, r1, lsl #30
   13f28:	adc	r2, r2, r2
   13f2c:	subcs	r0, r0, r1, lsl #30
   13f30:	cmp	r0, r1, lsl #29
   13f34:	adc	r2, r2, r2
   13f38:	subcs	r0, r0, r1, lsl #29
   13f3c:	cmp	r0, r1, lsl #28
   13f40:	adc	r2, r2, r2
   13f44:	subcs	r0, r0, r1, lsl #28
   13f48:	cmp	r0, r1, lsl #27
   13f4c:	adc	r2, r2, r2
   13f50:	subcs	r0, r0, r1, lsl #27
   13f54:	cmp	r0, r1, lsl #26
   13f58:	adc	r2, r2, r2
   13f5c:	subcs	r0, r0, r1, lsl #26
   13f60:	cmp	r0, r1, lsl #25
   13f64:	adc	r2, r2, r2
   13f68:	subcs	r0, r0, r1, lsl #25
   13f6c:	cmp	r0, r1, lsl #24
   13f70:	adc	r2, r2, r2
   13f74:	subcs	r0, r0, r1, lsl #24
   13f78:	cmp	r0, r1, lsl #23
   13f7c:	adc	r2, r2, r2
   13f80:	subcs	r0, r0, r1, lsl #23
   13f84:	cmp	r0, r1, lsl #22
   13f88:	adc	r2, r2, r2
   13f8c:	subcs	r0, r0, r1, lsl #22
   13f90:	cmp	r0, r1, lsl #21
   13f94:	adc	r2, r2, r2
   13f98:	subcs	r0, r0, r1, lsl #21
   13f9c:	cmp	r0, r1, lsl #20
   13fa0:	adc	r2, r2, r2
   13fa4:	subcs	r0, r0, r1, lsl #20
   13fa8:	cmp	r0, r1, lsl #19
   13fac:	adc	r2, r2, r2
   13fb0:	subcs	r0, r0, r1, lsl #19
   13fb4:	cmp	r0, r1, lsl #18
   13fb8:	adc	r2, r2, r2
   13fbc:	subcs	r0, r0, r1, lsl #18
   13fc0:	cmp	r0, r1, lsl #17
   13fc4:	adc	r2, r2, r2
   13fc8:	subcs	r0, r0, r1, lsl #17
   13fcc:	cmp	r0, r1, lsl #16
   13fd0:	adc	r2, r2, r2
   13fd4:	subcs	r0, r0, r1, lsl #16
   13fd8:	cmp	r0, r1, lsl #15
   13fdc:	adc	r2, r2, r2
   13fe0:	subcs	r0, r0, r1, lsl #15
   13fe4:	cmp	r0, r1, lsl #14
   13fe8:	adc	r2, r2, r2
   13fec:	subcs	r0, r0, r1, lsl #14
   13ff0:	cmp	r0, r1, lsl #13
   13ff4:	adc	r2, r2, r2
   13ff8:	subcs	r0, r0, r1, lsl #13
   13ffc:	cmp	r0, r1, lsl #12
   14000:	adc	r2, r2, r2
   14004:	subcs	r0, r0, r1, lsl #12
   14008:	cmp	r0, r1, lsl #11
   1400c:	adc	r2, r2, r2
   14010:	subcs	r0, r0, r1, lsl #11
   14014:	cmp	r0, r1, lsl #10
   14018:	adc	r2, r2, r2
   1401c:	subcs	r0, r0, r1, lsl #10
   14020:	cmp	r0, r1, lsl #9
   14024:	adc	r2, r2, r2
   14028:	subcs	r0, r0, r1, lsl #9
   1402c:	cmp	r0, r1, lsl #8
   14030:	adc	r2, r2, r2
   14034:	subcs	r0, r0, r1, lsl #8
   14038:	cmp	r0, r1, lsl #7
   1403c:	adc	r2, r2, r2
   14040:	subcs	r0, r0, r1, lsl #7
   14044:	cmp	r0, r1, lsl #6
   14048:	adc	r2, r2, r2
   1404c:	subcs	r0, r0, r1, lsl #6
   14050:	cmp	r0, r1, lsl #5
   14054:	adc	r2, r2, r2
   14058:	subcs	r0, r0, r1, lsl #5
   1405c:	cmp	r0, r1, lsl #4
   14060:	adc	r2, r2, r2
   14064:	subcs	r0, r0, r1, lsl #4
   14068:	cmp	r0, r1, lsl #3
   1406c:	adc	r2, r2, r2
   14070:	subcs	r0, r0, r1, lsl #3
   14074:	cmp	r0, r1, lsl #2
   14078:	adc	r2, r2, r2
   1407c:	subcs	r0, r0, r1, lsl #2
   14080:	cmp	r0, r1, lsl #1
   14084:	adc	r2, r2, r2
   14088:	subcs	r0, r0, r1, lsl #1
   1408c:	cmp	r0, r1
   14090:	adc	r2, r2, r2
   14094:	subcs	r0, r0, r1
   14098:	mov	r0, r2
   1409c:	bx	lr
   140a0:	moveq	r0, #1
   140a4:	movne	r0, #0
   140a8:	bx	lr
   140ac:	clz	r2, r1
   140b0:	rsb	r2, r2, #31
   140b4:	lsr	r0, r0, r2
   140b8:	bx	lr
   140bc:	cmp	r0, #0
   140c0:	mvnne	r0, #0
   140c4:	b	140e8 <close_stdout@@Base+0x2b84>
   140c8:	cmp	r1, #0
   140cc:	beq	140bc <close_stdout@@Base+0x2b58>
   140d0:	push	{r0, r1, lr}
   140d4:	bl	13edc <close_stdout@@Base+0x2978>
   140d8:	pop	{r1, r2, lr}
   140dc:	mul	r3, r2, r0
   140e0:	sub	r1, r1, r3
   140e4:	bx	lr
   140e8:	push	{r1, lr}
   140ec:	mov	r0, #8
   140f0:	bl	10e9c <raise@plt>
   140f4:	pop	{r1, pc}
   140f8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   140fc:	mov	r7, r0
   14100:	ldr	r6, [pc, #76]	; 14154 <close_stdout@@Base+0x2bf0>
   14104:	mov	r8, r1
   14108:	ldr	r5, [pc, #72]	; 14158 <close_stdout@@Base+0x2bf4>
   1410c:	mov	r9, r2
   14110:	add	r6, pc, r6
   14114:	bl	10e58 <fdopen@plt-0x20>
   14118:	add	r5, pc, r5
   1411c:	rsb	r6, r5, r6
   14120:	asrs	r6, r6, #2
   14124:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14128:	sub	r5, r5, #4
   1412c:	mov	r4, #0
   14130:	add	r4, r4, #1
   14134:	ldr	r3, [r5, #4]!
   14138:	mov	r0, r7
   1413c:	mov	r1, r8
   14140:	mov	r2, r9
   14144:	blx	r3
   14148:	cmp	r4, r6
   1414c:	bne	14130 <close_stdout@@Base+0x2bcc>
   14150:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14154:	muleq	r1, r4, sp
   14158:	andeq	r0, r1, r8, lsl #27
   1415c:	bx	lr
   14160:	ldr	r3, [pc, #28]	; 14184 <close_stdout@@Base+0x2c20>
   14164:	mov	r1, #0
   14168:	ldr	r2, [pc, #24]	; 14188 <close_stdout@@Base+0x2c24>
   1416c:	add	r3, pc, r3
   14170:	ldr	r3, [r3, r2]
   14174:	cmp	r3, #0
   14178:	ldrne	r2, [r3]
   1417c:	moveq	r2, r3
   14180:	b	1101c <__cxa_atexit@plt>
   14184:	andeq	r0, r1, ip, lsl #29
   14188:	strdeq	r0, [r0], -r8

Disassembly of section .fini:

0001418c <.fini>:
   1418c:	push	{r3, lr}
   14190:	pop	{r3, pc}
