
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000086c <_init>:
 86c:	push	{r3, lr}
 870:	bl	a00 <call_weak_fn>
 874:	pop	{r3, pc}

Disassembly of section .plt:

00000878 <.plt>:
 878:	push	{lr}		; (str lr, [sp, #-4]!)
 87c:	ldr	lr, [pc, #4]	; 888 <.plt+0x10>
 880:	add	lr, pc, lr
 884:	ldr	pc, [lr, #8]!
 888:	.word	0x00011778

0000088c <calloc@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1912]!	; 0x778

00000898 <rb_current_time@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1904]!	; 0x770

000008a4 <__cxa_finalize@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1896]!	; 0x768

000008b0 <RSA_public_encrypt@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1888]!	; 0x760

000008bc <sendto_one@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1880]!	; 0x758

000008c8 <free@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1872]!	; 0x750

000008d4 <rb_strcasecmp@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1864]!	; 0x748

000008e0 <RSA_size@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1856]!	; 0x740

000008ec <rb_outofmemory@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1848]!	; 0x738

000008f8 <memcmp@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1840]!	; 0x730

00000904 <sendto_realops_snomask@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1832]!	; 0x728

00000910 <rb_base64_decode@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1824]!	; 0x720

0000091c <strcpy@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1816]!	; 0x718

00000928 <malloc@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1808]!	; 0x710

00000934 <rb_get_random@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1800]!	; 0x708

00000940 <__gmon_start__@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1792]!	; 0x700

0000094c <OPENSSL_init_crypto@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1784]!	; 0x6f8

00000958 <send_oper_motd@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1776]!	; 0x6f0

00000964 <sendto_one_numeric@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1768]!	; 0x6e8

00000970 <strlen@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1760]!	; 0x6e0

0000097c <SHA1_Update@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1752]!	; 0x6d8

00000988 <ERR_error_string@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1744]!	; 0x6d0

00000994 <ilog@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1736]!	; 0x6c8

000009a0 <SHA1_Init@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1728]!	; 0x6c0

000009ac <ERR_get_error@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1720]!	; 0x6b8

000009b8 <sendto_one_notice@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1712]!	; 0x6b0

000009c4 <rb_strlcpy@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1704]!	; 0x6a8

000009d0 <find_oper_conf@plt>:
 9d0:	add	ip, pc, #0, 12
 9d4:	add	ip, ip, #69632	; 0x11000
 9d8:	ldr	pc, [ip, #1696]!	; 0x6a0

000009dc <oper_up@plt>:
 9dc:	add	ip, pc, #0, 12
 9e0:	add	ip, ip, #69632	; 0x11000
 9e4:	ldr	pc, [ip, #1688]!	; 0x698

000009e8 <rb_base64_encode@plt>:
 9e8:	add	ip, pc, #0, 12
 9ec:	add	ip, ip, #69632	; 0x11000
 9f0:	ldr	pc, [ip, #1680]!	; 0x690

000009f4 <SHA1_Final@plt>:
 9f4:	add	ip, pc, #0, 12
 9f8:	add	ip, ip, #69632	; 0x11000
 9fc:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

00000a00 <call_weak_fn>:
     a00:	ldr	r3, [pc, #20]	; a1c <call_weak_fn+0x1c>
     a04:	ldr	r2, [pc, #20]	; a20 <call_weak_fn+0x20>
     a08:	add	r3, pc, r3
     a0c:	ldr	r2, [r3, r2]
     a10:	cmp	r2, #0
     a14:	bxeq	lr
     a18:	b	940 <__gmon_start__@plt>
     a1c:	.word	0x000115f0
     a20:	.word	0x00000090

00000a24 <deregister_tm_clones>:
     a24:	ldr	r3, [pc, #52]	; a60 <deregister_tm_clones+0x3c>
     a28:	ldr	r0, [pc, #52]	; a64 <deregister_tm_clones+0x40>
     a2c:	add	r3, pc, r3
     a30:	add	r0, pc, r0
     a34:	add	r3, r3, #3
     a38:	sub	r3, r3, r0
     a3c:	cmp	r3, #6
     a40:	ldr	r3, [pc, #32]	; a68 <deregister_tm_clones+0x44>
     a44:	add	r3, pc, r3
     a48:	bxls	lr
     a4c:	ldr	r2, [pc, #24]	; a6c <deregister_tm_clones+0x48>
     a50:	ldr	r3, [r3, r2]
     a54:	cmp	r3, #0
     a58:	bxeq	lr
     a5c:	bx	r3
     a60:	.word	0x000116e8
     a64:	.word	0x000116e4
     a68:	.word	0x000115b4
     a6c:	.word	0x0000008c

00000a70 <register_tm_clones>:
     a70:	ldr	r1, [pc, #56]	; ab0 <register_tm_clones+0x40>
     a74:	ldr	r0, [pc, #56]	; ab4 <register_tm_clones+0x44>
     a78:	add	r1, pc, r1
     a7c:	add	r0, pc, r0
     a80:	sub	r1, r1, r0
     a84:	ldr	r3, [pc, #44]	; ab8 <register_tm_clones+0x48>
     a88:	asr	r1, r1, #2
     a8c:	add	r3, pc, r3
     a90:	add	r1, r1, r1, lsr #31
     a94:	asrs	r1, r1, #1
     a98:	bxeq	lr
     a9c:	ldr	r2, [pc, #24]	; abc <register_tm_clones+0x4c>
     aa0:	ldr	r3, [r3, r2]
     aa4:	cmp	r3, #0
     aa8:	bxeq	lr
     aac:	bx	r3
     ab0:	.word	0x0001169c
     ab4:	.word	0x00011698
     ab8:	.word	0x0001156c
     abc:	.word	0x00000098

00000ac0 <__do_global_dtors_aux>:
     ac0:	ldr	r3, [pc, #76]	; b14 <__do_global_dtors_aux+0x54>
     ac4:	ldr	r2, [pc, #76]	; b18 <__do_global_dtors_aux+0x58>
     ac8:	add	r3, pc, r3
     acc:	add	r2, pc, r2
     ad0:	ldrb	r3, [r3]
     ad4:	cmp	r3, #0
     ad8:	bxne	lr
     adc:	ldr	r3, [pc, #56]	; b1c <__do_global_dtors_aux+0x5c>
     ae0:	push	{r4, lr}
     ae4:	ldr	r3, [r2, r3]
     ae8:	cmp	r3, #0
     aec:	beq	afc <__do_global_dtors_aux+0x3c>
     af0:	ldr	r3, [pc, #40]	; b20 <__do_global_dtors_aux+0x60>
     af4:	ldr	r0, [pc, r3]
     af8:	bl	8a4 <__cxa_finalize@plt>
     afc:	bl	a24 <deregister_tm_clones>
     b00:	ldr	r3, [pc, #28]	; b24 <__do_global_dtors_aux+0x64>
     b04:	mov	r2, #1
     b08:	add	r3, pc, r3
     b0c:	strb	r2, [r3]
     b10:	pop	{r4, pc}
     b14:	.word	0x0001164c
     b18:	.word	0x0001152c
     b1c:	.word	0x00000088
     b20:	.word	0x000115a8
     b24:	.word	0x0001160c

00000b28 <frame_dummy>:
     b28:	ldr	r0, [pc, #56]	; b68 <frame_dummy+0x40>
     b2c:	ldr	r3, [pc, #56]	; b6c <frame_dummy+0x44>
     b30:	add	r0, pc, r0
     b34:	ldr	r2, [r0]
     b38:	add	r3, pc, r3
     b3c:	cmp	r2, #0
     b40:	bne	b48 <frame_dummy+0x20>
     b44:	b	a70 <register_tm_clones>
     b48:	ldr	r2, [pc, #32]	; b70 <frame_dummy+0x48>
     b4c:	ldr	r3, [r3, r2]
     b50:	cmp	r3, #0
     b54:	beq	b44 <frame_dummy+0x1c>
     b58:	push	{r4, lr}
     b5c:	blx	r3
     b60:	pop	{r4, lr}
     b64:	b	a70 <register_tm_clones>
     b68:	.word	0x000113c4
     b6c:	.word	0x000114c0
     b70:	.word	0x00000094

00000b74 <cleanup_challenge>:
     b74:	ldr	r3, [r0, #432]	; 0x1b0
     b78:	cmp	r3, #0
     b7c:	bxeq	lr
     b80:	push	{r4, lr}
     b84:	mov	r4, r0
     b88:	ldr	r0, [r3, #284]	; 0x11c
     b8c:	cmp	r0, #0
     b90:	beq	b98 <cleanup_challenge+0x24>
     b94:	bl	8c8 <free@plt>
     b98:	ldr	r3, [r4, #24]
     b9c:	ldr	r0, [r3, #32]
     ba0:	cmp	r0, #0
     ba4:	beq	bac <cleanup_challenge+0x38>
     ba8:	bl	8c8 <free@plt>
     bac:	ldr	r2, [r4, #432]	; 0x1b0
     bb0:	mov	r3, #0
     bb4:	str	r3, [r2, #284]	; 0x11c
     bb8:	ldr	r2, [r4, #24]
     bbc:	str	r3, [r2, #32]
     bc0:	ldr	r2, [r4, #432]	; 0x1b0
     bc4:	str	r3, [r2, #304]	; 0x130
     bc8:	pop	{r4, pc}

00000bcc <m_challenge>:
     bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bd0:	sub	sp, sp, #668	; 0x29c
     bd4:	mov	r4, r2
     bd8:	ldr	r6, [sp, #704]	; 0x2c0
     bdc:	ldr	r5, [pc, #1820]	; 1300 <m_challenge+0x734>
     be0:	add	r5, pc, r5
     be4:	mov	r3, #0
     be8:	str	r3, [sp, #252]	; 0xfc
     bec:	ldr	r3, [r2, #56]	; 0x38
     bf0:	tst	r3, #4096	; 0x1000
     bf4:	bne	cf8 <m_challenge+0x12c>
     bf8:	ldr	r3, [r6, #4]
     bfc:	ldrb	r3, [r3]
     c00:	cmp	r3, #43	; 0x2b
     c04:	beq	d28 <m_challenge+0x15c>
     c08:	mov	r0, r2
     c0c:	bl	b74 <cleanup_challenge>
     c10:	add	r9, r4, #152	; 0x98
     c14:	add	r8, r4, #288	; 0x120
     c18:	add	r8, r8, #3
     c1c:	ldr	r3, [r6, #4]
     c20:	mov	r2, r8
     c24:	add	r1, r4, #227	; 0xe3
     c28:	mov	r0, r9
     c2c:	bl	9d0 <find_oper_conf@plt>
     c30:	subs	r7, r0, #0
     c34:	beq	fec <m_challenge+0x420>
     c38:	ldr	sl, [r7, #40]	; 0x28
     c3c:	cmp	sl, #0
     c40:	beq	1064 <m_challenge+0x498>
     c44:	ldr	r3, [r7, #20]
     c48:	tst	r3, #524288	; 0x80000
     c4c:	beq	c5c <m_challenge+0x90>
     c50:	ldr	r3, [r4, #56]	; 0x38
     c54:	tst	r3, #16384	; 0x4000
     c58:	beq	1078 <m_challenge+0x4ac>
     c5c:	ldr	r1, [r7, #16]
     c60:	cmp	r1, #0
     c64:	beq	12f8 <m_challenge+0x72c>
     c68:	ldr	r0, [r4, #444]	; 0x1bc
     c6c:	cmp	r0, #0
     c70:	beq	c80 <m_challenge+0xb4>
     c74:	bl	8d4 <rb_strcasecmp@plt>
     c78:	cmp	r0, #0
     c7c:	beq	10f0 <m_challenge+0x524>
     c80:	ldr	r2, [pc, #1660]	; 1304 <m_challenge+0x738>
     c84:	add	r2, pc, r2
     c88:	ldr	r1, [pc, #1656]	; 1308 <m_challenge+0x73c>
     c8c:	mov	r0, r4
     c90:	bl	964 <sendto_one_numeric@plt>
     c94:	add	r7, r4, #88	; 0x58
     c98:	add	r4, r4, #163	; 0xa3
     c9c:	ldr	r2, [r6, #4]
     ca0:	str	r8, [sp, #8]
     ca4:	str	r4, [sp, #4]
     ca8:	str	r9, [sp]
     cac:	mov	r3, r7
     cb0:	ldr	r1, [pc, #1620]	; 130c <m_challenge+0x740>
     cb4:	add	r1, pc, r1
     cb8:	mov	r0, #4
     cbc:	bl	994 <ilog@plt>
     cc0:	ldr	r3, [pc, #1608]	; 1310 <m_challenge+0x744>
     cc4:	ldr	r3, [r5, r3]
     cc8:	ldr	r3, [r3, #84]	; 0x54
     ccc:	cmp	r3, #0
     cd0:	beq	d20 <m_challenge+0x154>
     cd4:	str	r4, [sp, #4]
     cd8:	str	r9, [sp]
     cdc:	mov	r3, r7
     ce0:	ldr	r2, [pc, #1580]	; 1314 <m_challenge+0x748>
     ce4:	add	r2, pc, r2
     ce8:	mov	r1, #0
     cec:	mov	r0, #256	; 0x100
     cf0:	bl	904 <sendto_realops_snomask@plt>
     cf4:	b	d20 <m_challenge+0x154>
     cf8:	ldr	r3, [pc, #1560]	; 1318 <m_challenge+0x74c>
     cfc:	ldr	r2, [r5, r3]
     d00:	add	r3, r4, #88	; 0x58
     d04:	add	r2, r2, #88	; 0x58
     d08:	ldr	r1, [pc, #1548]	; 131c <m_challenge+0x750>
     d0c:	add	r1, pc, r1
     d10:	mov	r0, r4
     d14:	bl	8bc <sendto_one@plt>
     d18:	mov	r0, r4
     d1c:	bl	958 <send_oper_motd@plt>
     d20:	add	sp, sp, #668	; 0x29c
     d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d28:	ldr	r3, [r2, #432]	; 0x1b0
     d2c:	ldr	r3, [r3, #284]	; 0x11c
     d30:	cmp	r3, #0
     d34:	beq	d20 <m_challenge+0x154>
     d38:	bl	898 <rb_current_time@plt>
     d3c:	ldr	r3, [r4, #432]	; 0x1b0
     d40:	ldr	r3, [r3, #304]	; 0x130
     d44:	sub	r0, r0, r3
     d48:	cmp	r0, #180	; 0xb4
     d4c:	ble	df0 <m_challenge+0x224>
     d50:	add	r6, r4, #88	; 0x58
     d54:	ldr	r3, [pc, #1468]	; 1318 <m_challenge+0x74c>
     d58:	ldr	r2, [r5, r3]
     d5c:	mov	r3, r6
     d60:	add	r2, r2, #88	; 0x58
     d64:	ldr	r1, [pc, #1460]	; 1320 <m_challenge+0x754>
     d68:	add	r1, pc, r1
     d6c:	mov	r0, r4
     d70:	bl	8bc <sendto_one@plt>
     d74:	add	r7, r4, #152	; 0x98
     d78:	add	r8, r4, #163	; 0xa3
     d7c:	ldr	r3, [r4, #24]
     d80:	ldr	r2, [r3, #32]
     d84:	add	r3, r4, #288	; 0x120
     d88:	add	r3, r3, #3
     d8c:	str	r3, [sp, #8]
     d90:	str	r8, [sp, #4]
     d94:	str	r7, [sp]
     d98:	mov	r3, r6
     d9c:	ldr	r1, [pc, #1408]	; 1324 <m_challenge+0x758>
     da0:	add	r1, pc, r1
     da4:	mov	r0, #4
     da8:	bl	994 <ilog@plt>
     dac:	ldr	r3, [pc, #1372]	; 1310 <m_challenge+0x744>
     db0:	ldr	r3, [r5, r3]
     db4:	ldr	r3, [r3, #84]	; 0x54
     db8:	cmp	r3, #0
     dbc:	bne	dcc <m_challenge+0x200>
     dc0:	mov	r0, r4
     dc4:	bl	b74 <cleanup_challenge>
     dc8:	b	d20 <m_challenge+0x154>
     dcc:	str	r8, [sp, #4]
     dd0:	str	r7, [sp]
     dd4:	mov	r3, r6
     dd8:	ldr	r2, [pc, #1352]	; 1328 <m_challenge+0x75c>
     ddc:	add	r2, pc, r2
     de0:	mov	r1, #256	; 0x100
     de4:	mov	r0, r1
     de8:	bl	904 <sendto_realops_snomask@plt>
     dec:	b	dc0 <m_challenge+0x1f4>
     df0:	ldr	r7, [r6, #4]
     df4:	add	r7, r7, #1
     df8:	str	r7, [r6, #4]
     dfc:	mov	r0, r7
     e00:	bl	970 <strlen@plt>
     e04:	add	r2, sp, #252	; 0xfc
     e08:	mov	r1, r0
     e0c:	mov	r0, r7
     e10:	bl	910 <rb_base64_decode@plt>
     e14:	mov	r6, r0
     e18:	ldr	r3, [sp, #252]	; 0xfc
     e1c:	cmp	r3, #20
     e20:	beq	eb0 <m_challenge+0x2e4>
     e24:	add	r7, r4, #88	; 0x58
     e28:	ldr	r3, [pc, #1256]	; 1318 <m_challenge+0x74c>
     e2c:	ldr	r2, [r5, r3]
     e30:	mov	r3, r7
     e34:	add	r2, r2, #88	; 0x58
     e38:	ldr	r1, [pc, #1260]	; 132c <m_challenge+0x760>
     e3c:	add	r1, pc, r1
     e40:	mov	r0, r4
     e44:	bl	8bc <sendto_one@plt>
     e48:	add	r8, r4, #152	; 0x98
     e4c:	add	r9, r4, #163	; 0xa3
     e50:	ldr	r3, [r4, #24]
     e54:	ldr	r2, [r3, #32]
     e58:	add	r3, r4, #288	; 0x120
     e5c:	add	r3, r3, #3
     e60:	str	r3, [sp, #8]
     e64:	str	r9, [sp, #4]
     e68:	str	r8, [sp]
     e6c:	mov	r3, r7
     e70:	ldr	r1, [pc, #1208]	; 1330 <m_challenge+0x764>
     e74:	add	r1, pc, r1
     e78:	mov	r0, #4
     e7c:	bl	994 <ilog@plt>
     e80:	ldr	r3, [pc, #1160]	; 1310 <m_challenge+0x744>
     e84:	ldr	r3, [r5, r3]
     e88:	ldr	r3, [r3, #84]	; 0x54
     e8c:	cmp	r3, #0
     e90:	bne	f4c <m_challenge+0x380>
     e94:	cmp	r6, #0
     e98:	beq	ea4 <m_challenge+0x2d8>
     e9c:	mov	r0, r6
     ea0:	bl	8c8 <free@plt>
     ea4:	mov	r0, r4
     ea8:	bl	b74 <cleanup_challenge>
     eac:	b	d20 <m_challenge+0x154>
     eb0:	ldr	r3, [r4, #432]	; 0x1b0
     eb4:	mov	r2, #20
     eb8:	mov	r1, r0
     ebc:	ldr	r0, [r3, #284]	; 0x11c
     ec0:	bl	8f8 <memcmp@plt>
     ec4:	cmp	r0, #0
     ec8:	bne	e24 <m_challenge+0x258>
     ecc:	cmp	r6, #0
     ed0:	beq	edc <m_challenge+0x310>
     ed4:	mov	r0, r6
     ed8:	bl	8c8 <free@plt>
     edc:	add	r7, r4, #152	; 0x98
     ee0:	add	r6, r4, #288	; 0x120
     ee4:	add	r6, r6, #3
     ee8:	ldr	r3, [r4, #24]
     eec:	ldr	r3, [r3, #32]
     ef0:	mov	r2, r6
     ef4:	add	r1, r4, #227	; 0xe3
     ef8:	mov	r0, r7
     efc:	bl	9d0 <find_oper_conf@plt>
     f00:	subs	r8, r0, #0
     f04:	beq	f70 <m_challenge+0x3a4>
     f08:	mov	r0, r4
     f0c:	bl	b74 <cleanup_challenge>
     f10:	mov	r1, r8
     f14:	mov	r0, r4
     f18:	bl	9dc <oper_up@plt>
     f1c:	ldr	r3, [r4, #24]
     f20:	ldr	r2, [r3, #32]
     f24:	str	r6, [sp, #8]
     f28:	add	r3, r4, #163	; 0xa3
     f2c:	str	r3, [sp, #4]
     f30:	str	r7, [sp]
     f34:	add	r3, r4, #88	; 0x58
     f38:	ldr	r1, [pc, #1012]	; 1334 <m_challenge+0x768>
     f3c:	add	r1, pc, r1
     f40:	mov	r0, #3
     f44:	bl	994 <ilog@plt>
     f48:	b	d20 <m_challenge+0x154>
     f4c:	str	r9, [sp, #4]
     f50:	str	r8, [sp]
     f54:	mov	r3, r7
     f58:	ldr	r2, [pc, #984]	; 1338 <m_challenge+0x76c>
     f5c:	add	r2, pc, r2
     f60:	mov	r1, #256	; 0x100
     f64:	mov	r0, r1
     f68:	bl	904 <sendto_realops_snomask@plt>
     f6c:	b	e94 <m_challenge+0x2c8>
     f70:	ldr	r2, [pc, #964]	; 133c <m_challenge+0x770>
     f74:	add	r2, pc, r2
     f78:	ldr	r1, [pc, #904]	; 1308 <m_challenge+0x73c>
     f7c:	mov	r0, r4
     f80:	bl	964 <sendto_one_numeric@plt>
     f84:	add	r8, r4, #88	; 0x58
     f88:	add	r9, r4, #163	; 0xa3
     f8c:	ldr	r3, [r4, #24]
     f90:	ldr	r2, [r3, #32]
     f94:	str	r6, [sp, #8]
     f98:	str	r9, [sp, #4]
     f9c:	str	r7, [sp]
     fa0:	mov	r3, r8
     fa4:	ldr	r1, [pc, #916]	; 1340 <m_challenge+0x774>
     fa8:	add	r1, pc, r1
     fac:	mov	r0, #4
     fb0:	bl	994 <ilog@plt>
     fb4:	ldr	r3, [pc, #852]	; 1310 <m_challenge+0x744>
     fb8:	ldr	r3, [r5, r3]
     fbc:	ldr	r3, [r3, #84]	; 0x54
     fc0:	cmp	r3, #0
     fc4:	beq	d20 <m_challenge+0x154>
     fc8:	str	r9, [sp, #4]
     fcc:	str	r7, [sp]
     fd0:	mov	r3, r8
     fd4:	ldr	r2, [pc, #872]	; 1344 <m_challenge+0x778>
     fd8:	add	r2, pc, r2
     fdc:	mov	r1, #256	; 0x100
     fe0:	mov	r0, r1
     fe4:	bl	904 <sendto_realops_snomask@plt>
     fe8:	b	d20 <m_challenge+0x154>
     fec:	ldr	r2, [pc, #852]	; 1348 <m_challenge+0x77c>
     ff0:	add	r2, pc, r2
     ff4:	ldr	r1, [pc, #780]	; 1308 <m_challenge+0x73c>
     ff8:	mov	r0, r4
     ffc:	bl	964 <sendto_one_numeric@plt>
    1000:	add	r7, r4, #88	; 0x58
    1004:	add	r4, r4, #163	; 0xa3
    1008:	ldr	r2, [r6, #4]
    100c:	str	r8, [sp, #8]
    1010:	str	r4, [sp, #4]
    1014:	str	r9, [sp]
    1018:	mov	r3, r7
    101c:	ldr	r1, [pc, #808]	; 134c <m_challenge+0x780>
    1020:	add	r1, pc, r1
    1024:	mov	r0, #4
    1028:	bl	994 <ilog@plt>
    102c:	ldr	r3, [pc, #732]	; 1310 <m_challenge+0x744>
    1030:	ldr	r3, [r5, r3]
    1034:	ldr	r3, [r3, #84]	; 0x54
    1038:	cmp	r3, #0
    103c:	beq	d20 <m_challenge+0x154>
    1040:	str	r4, [sp, #4]
    1044:	str	r9, [sp]
    1048:	mov	r3, r7
    104c:	ldr	r2, [pc, #764]	; 1350 <m_challenge+0x784>
    1050:	add	r2, pc, r2
    1054:	mov	r1, #256	; 0x100
    1058:	mov	r0, r1
    105c:	bl	904 <sendto_realops_snomask@plt>
    1060:	b	d20 <m_challenge+0x154>
    1064:	ldr	r1, [pc, #744]	; 1354 <m_challenge+0x788>
    1068:	add	r1, pc, r1
    106c:	mov	r0, r4
    1070:	bl	9b8 <sendto_one_notice@plt>
    1074:	b	d20 <m_challenge+0x154>
    1078:	ldr	r2, [pc, #728]	; 1358 <m_challenge+0x78c>
    107c:	add	r2, pc, r2
    1080:	ldr	r1, [pc, #640]	; 1308 <m_challenge+0x73c>
    1084:	mov	r0, r4
    1088:	bl	964 <sendto_one_numeric@plt>
    108c:	add	r7, r4, #88	; 0x58
    1090:	add	r4, r4, #163	; 0xa3
    1094:	ldr	r2, [r6, #4]
    1098:	str	r8, [sp, #8]
    109c:	str	r4, [sp, #4]
    10a0:	str	r9, [sp]
    10a4:	mov	r3, r7
    10a8:	ldr	r1, [pc, #684]	; 135c <m_challenge+0x790>
    10ac:	add	r1, pc, r1
    10b0:	mov	r0, #4
    10b4:	bl	994 <ilog@plt>
    10b8:	ldr	r3, [pc, #592]	; 1310 <m_challenge+0x744>
    10bc:	ldr	r3, [r5, r3]
    10c0:	ldr	r3, [r3, #84]	; 0x54
    10c4:	cmp	r3, #0
    10c8:	beq	d20 <m_challenge+0x154>
    10cc:	str	r4, [sp, #4]
    10d0:	str	r9, [sp]
    10d4:	mov	r3, r7
    10d8:	ldr	r2, [pc, #640]	; 1360 <m_challenge+0x794>
    10dc:	add	r2, pc, r2
    10e0:	mov	r1, #0
    10e4:	mov	r0, #256	; 0x100
    10e8:	bl	904 <sendto_realops_snomask@plt>
    10ec:	b	d20 <m_challenge+0x154>
    10f0:	ldr	sl, [r7, #40]	; 0x28
    10f4:	cmp	sl, #0
    10f8:	beq	1278 <m_challenge+0x6ac>
    10fc:	ldr	r8, [r4, #432]	; 0x1b0
    1100:	mov	r1, #128	; 0x80
    1104:	add	r0, sp, #124	; 0x7c
    1108:	bl	934 <rb_get_random@plt>
    110c:	cmp	r0, #0
    1110:	beq	122c <m_challenge+0x660>
    1114:	add	r6, sp, #28
    1118:	mov	r0, r6
    111c:	bl	9a0 <SHA1_Init@plt>
    1120:	mov	r2, #128	; 0x80
    1124:	add	r1, sp, #124	; 0x7c
    1128:	mov	r0, r6
    112c:	bl	97c <SHA1_Update@plt>
    1130:	mov	r0, #20
    1134:	bl	928 <malloc@plt>
    1138:	str	r0, [r8, #284]	; 0x11c
    113c:	mov	r1, r6
    1140:	bl	9f4 <SHA1_Final@plt>
    1144:	mov	r0, sl
    1148:	bl	8e0 <RSA_size@plt>
    114c:	mov	r1, r0
    1150:	mov	r0, #1
    1154:	bl	88c <calloc@plt>
    1158:	subs	r6, r0, #0
    115c:	beq	1208 <m_challenge+0x63c>
    1160:	mov	r3, #4
    1164:	str	r3, [sp]
    1168:	mov	r3, sl
    116c:	mov	r2, r6
    1170:	add	r1, sp, #124	; 0x7c
    1174:	mov	r0, #128	; 0x80
    1178:	bl	8b0 <RSA_public_encrypt@plt>
    117c:	subs	r1, r0, #0
    1180:	blt	120c <m_challenge+0x640>
    1184:	mov	r0, r6
    1188:	bl	9e8 <rb_base64_encode@plt>
    118c:	mov	r8, r0
    1190:	str	r0, [sp, #20]
    1194:	mov	r0, r6
    1198:	bl	8c8 <free@plt>
    119c:	ldr	r6, [r4, #432]	; 0x1b0
    11a0:	bl	898 <rb_current_time@plt>
    11a4:	str	r0, [r6, #304]	; 0x130
    11a8:	mov	r6, r8
    11ac:	ldr	r9, [pc, #432]	; 1364 <m_challenge+0x798>
    11b0:	add	r8, sp, #256	; 0x100
    11b4:	add	fp, r4, #88	; 0x58
    11b8:	ldr	r3, [pc, #424]	; 1368 <m_challenge+0x79c>
    11bc:	add	r3, pc, r3
    11c0:	str	r3, [sp, #16]
    11c4:	mov	r2, r9
    11c8:	mov	r1, r6
    11cc:	mov	r0, r8
    11d0:	bl	9c4 <rb_strlcpy@plt>
    11d4:	mov	sl, r0
    11d8:	ldr	r3, [pc, #312]	; 1318 <m_challenge+0x74c>
    11dc:	ldr	r2, [r5, r3]
    11e0:	str	r8, [sp]
    11e4:	mov	r3, fp
    11e8:	add	r2, r2, #88	; 0x58
    11ec:	ldr	r1, [sp, #16]
    11f0:	mov	r0, r4
    11f4:	bl	8bc <sendto_one@plt>
    11f8:	cmp	sl, r9
    11fc:	bls	128c <m_challenge+0x6c0>
    1200:	add	r6, r6, #404	; 0x194
    1204:	b	11c4 <m_challenge+0x5f8>
    1208:	bl	8ec <rb_outofmemory@plt>
    120c:	mov	r0, r6
    1210:	bl	8c8 <free@plt>
    1214:	ldr	r0, [r8, #284]	; 0x11c
    1218:	cmp	r0, #0
    121c:	beq	1224 <m_challenge+0x658>
    1220:	bl	8c8 <free@plt>
    1224:	mov	r3, #0
    1228:	str	r3, [r8, #284]	; 0x11c
    122c:	mov	r2, #0
    1230:	mov	r0, #2
    1234:	mov	r1, #0
    1238:	bl	94c <OPENSSL_init_crypto@plt>
    123c:	mov	r5, #100	; 0x64
    1240:	mov	r6, #0
    1244:	ldr	r7, [pc, #288]	; 136c <m_challenge+0x7a0>
    1248:	add	r7, pc, r7
    124c:	bl	9ac <ERR_get_error@plt>
    1250:	cmp	r0, #0
    1254:	beq	1278 <m_challenge+0x6ac>
    1258:	mov	r1, r6
    125c:	bl	988 <ERR_error_string@plt>
    1260:	mov	r2, r0
    1264:	mov	r1, r7
    1268:	mov	r0, r6
    126c:	bl	994 <ilog@plt>
    1270:	subs	r5, r5, #1
    1274:	bne	124c <m_challenge+0x680>
    1278:	ldr	r1, [pc, #240]	; 1370 <m_challenge+0x7a4>
    127c:	add	r1, pc, r1
    1280:	mov	r0, r4
    1284:	bl	9b8 <sendto_one_notice@plt>
    1288:	b	d20 <m_challenge+0x154>
    128c:	ldr	r3, [pc, #132]	; 1318 <m_challenge+0x74c>
    1290:	ldr	r2, [r5, r3]
    1294:	mov	r3, fp
    1298:	add	r2, r2, #88	; 0x58
    129c:	ldr	r1, [pc, #208]	; 1374 <m_challenge+0x7a8>
    12a0:	add	r1, pc, r1
    12a4:	mov	r0, r4
    12a8:	bl	8bc <sendto_one@plt>
    12ac:	ldr	r3, [sp, #20]
    12b0:	cmp	r3, #0
    12b4:	beq	12c0 <m_challenge+0x6f4>
    12b8:	mov	r0, r3
    12bc:	bl	8c8 <free@plt>
    12c0:	ldr	r6, [r4, #24]
    12c4:	ldr	r4, [r7]
    12c8:	mov	r0, r4
    12cc:	bl	970 <strlen@plt>
    12d0:	add	r0, r0, #1
    12d4:	bl	928 <malloc@plt>
    12d8:	subs	r5, r0, #0
    12dc:	beq	12f4 <m_challenge+0x728>
    12e0:	mov	r1, r4
    12e4:	mov	r0, r5
    12e8:	bl	91c <strcpy@plt>
    12ec:	str	r5, [r6, #32]
    12f0:	b	d20 <m_challenge+0x154>
    12f4:	bl	8ec <rb_outofmemory@plt>
    12f8:	ldr	r8, [r4, #432]	; 0x1b0
    12fc:	b	1100 <m_challenge+0x534>
    1300:	.word	0x00011418
    1304:	.word	0x00000894
    1308:	.word	0x000001eb
    130c:	.word	0x000009d8
    1310:	.word	0x000000a0
    1314:	.word	0x000009f8
    1318:	.word	0x0000009c
    131c:	.word	0x000006b8
    1320:	.word	0x000006e8
    1324:	.word	0x000006d0
    1328:	.word	0x000006c0
    132c:	.word	0x00000614
    1330:	.word	0x00000650
    1334:	.word	0x00000674
    1338:	.word	0x00000594
    133c:	.word	0x000005a4
    1340:	.word	0x000005ac
    1344:	.word	0x000005a0
    1348:	.word	0x00000528
    134c:	.word	0x00000534
    1350:	.word	0x00000528
    1354:	.word	0x00000564
    1358:	.word	0x0000049c
    135c:	.word	0x00000564
    1360:	.word	0x00000574
    1364:	.word	0x00000195
    1368:	.word	0x0000057c
    136c:	.word	0x000004e0
    1370:	.word	0x000004ec
    1374:	.word	0x000004a8

Disassembly of section .fini:

00001378 <_fini>:
    1378:	push	{r3, lr}
    137c:	pop	{r3, pc}
