
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

0001120c <.init>:
   1120c:	push	{r3, lr}
   11210:	bl	12478 <__assert_fail@plt+0xe74>
   11214:	pop	{r3, pc}

Disassembly of section .plt:

00011218 <fstatfs64@plt-0x14>:
   11218:	push	{lr}		; (str lr, [sp, #-4]!)
   1121c:	ldr	lr, [pc, #4]	; 11228 <fstatfs64@plt-0x4>
   11220:	add	lr, pc, lr
   11224:	ldr	pc, [lr, #8]!
   11228:	ldrdeq	sp, [r1], -r8

0001122c <fstatfs64@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #118784	; 0x1d000
   11234:	ldr	pc, [ip, #3544]!	; 0xdd8

00011238 <calloc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #118784	; 0x1d000
   11240:	ldr	pc, [ip, #3536]!	; 0xdd0

00011244 <fputs_unlocked@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #118784	; 0x1d000
   1124c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011250 <raise@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #118784	; 0x1d000
   11258:	ldr	pc, [ip, #3520]!	; 0xdc0

0001125c <is_selinux_enabled@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #118784	; 0x1d000
   11264:	ldr	pc, [ip, #3512]!	; 0xdb8

00011268 <strcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #118784	; 0x1d000
   11270:	ldr	pc, [ip, #3504]!	; 0xdb0

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #118784	; 0x1d000
   1127c:	ldr	pc, [ip, #3496]!	; 0xda8

00011280 <lsetfilecon@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #118784	; 0x1d000
   11288:	ldr	pc, [ip, #3488]!	; 0xda0

0001128c <memmove@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #118784	; 0x1d000
   11294:	ldr	pc, [ip, #3480]!	; 0xd98

00011298 <free@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #118784	; 0x1d000
   112a0:	ldr	pc, [ip, #3472]!	; 0xd90

000112a4 <_exit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #118784	; 0x1d000
   112ac:	ldr	pc, [ip, #3464]!	; 0xd88

000112b0 <memcpy@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #118784	; 0x1d000
   112b8:	ldr	pc, [ip, #3456]!	; 0xd80

000112bc <mbsinit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #118784	; 0x1d000
   112c4:	ldr	pc, [ip, #3448]!	; 0xd78

000112c8 <context_new@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #118784	; 0x1d000
   112d0:	ldr	pc, [ip, #3440]!	; 0xd70

000112d4 <memcmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #118784	; 0x1d000
   112dc:	ldr	pc, [ip, #3432]!	; 0xd68

000112e0 <fputc_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #118784	; 0x1d000
   112e8:	ldr	pc, [ip, #3424]!	; 0xd60

000112ec <context_role_set@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #118784	; 0x1d000
   112f4:	ldr	pc, [ip, #3416]!	; 0xd58

000112f8 <dcgettext@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #118784	; 0x1d000
   11300:	ldr	pc, [ip, #3408]!	; 0xd50

00011304 <context_type_set@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #118784	; 0x1d000
   1130c:	ldr	pc, [ip, #3400]!	; 0xd48

00011310 <realloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #118784	; 0x1d000
   11318:	ldr	pc, [ip, #3392]!	; 0xd40

0001131c <fgetfilecon@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #118784	; 0x1d000
   11324:	ldr	pc, [ip, #3384]!	; 0xd38

00011328 <textdomain@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #118784	; 0x1d000
   11330:	ldr	pc, [ip, #3376]!	; 0xd30

00011334 <chdir@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #118784	; 0x1d000
   1133c:	ldr	pc, [ip, #3368]!	; 0xd28

00011340 <__fxstatat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #118784	; 0x1d000
   11348:	ldr	pc, [ip, #3360]!	; 0xd20

0001134c <iswprint@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #118784	; 0x1d000
   11354:	ldr	pc, [ip, #3352]!	; 0xd18

00011358 <__fxstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #118784	; 0x1d000
   11360:	ldr	pc, [ip, #3344]!	; 0xd10

00011364 <fwrite@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #118784	; 0x1d000
   1136c:	ldr	pc, [ip, #3336]!	; 0xd08

00011370 <lseek64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #118784	; 0x1d000
   11378:	ldr	pc, [ip, #3328]!	; 0xd00

0001137c <__ctype_get_mb_cur_max@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #118784	; 0x1d000
   11384:	ldr	pc, [ip, #3320]!	; 0xcf8

00011388 <strcpy@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #118784	; 0x1d000
   11390:	ldr	pc, [ip, #3312]!	; 0xcf0

00011394 <__fpending@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #118784	; 0x1d000
   1139c:	ldr	pc, [ip, #3304]!	; 0xce8

000113a0 <mbrtowc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #118784	; 0x1d000
   113a8:	ldr	pc, [ip, #3296]!	; 0xce0

000113ac <error@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #118784	; 0x1d000
   113b4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113b8 <security_check_context@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #118784	; 0x1d000
   113c0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #118784	; 0x1d000
   113cc:	ldr	pc, [ip, #3272]!	; 0xcc8

000113d0 <lgetfilecon@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #118784	; 0x1d000
   113d8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #118784	; 0x1d000
   113e4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #118784	; 0x1d000
   113f0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113f4 <__freading@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #118784	; 0x1d000
   113fc:	ldr	pc, [ip, #3240]!	; 0xca8

00011400 <__gmon_start__@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #118784	; 0x1d000
   11408:	ldr	pc, [ip, #3232]!	; 0xca0

0001140c <context_free@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #118784	; 0x1d000
   11414:	ldr	pc, [ip, #3224]!	; 0xc98

00011418 <getopt_long@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #118784	; 0x1d000
   11420:	ldr	pc, [ip, #3216]!	; 0xc90

00011424 <__ctype_b_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #118784	; 0x1d000
   1142c:	ldr	pc, [ip, #3208]!	; 0xc88

00011430 <getcwd@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #118784	; 0x1d000
   11438:	ldr	pc, [ip, #3200]!	; 0xc80

0001143c <exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #118784	; 0x1d000
   11444:	ldr	pc, [ip, #3192]!	; 0xc78

00011448 <context_user_set@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #118784	; 0x1d000
   11450:	ldr	pc, [ip, #3184]!	; 0xc70

00011454 <getfilecon@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #118784	; 0x1d000
   1145c:	ldr	pc, [ip, #3176]!	; 0xc68

00011460 <strlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #118784	; 0x1d000
   11468:	ldr	pc, [ip, #3168]!	; 0xc60

0001146c <openat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #118784	; 0x1d000
   11474:	ldr	pc, [ip, #3160]!	; 0xc58

00011478 <memrchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #118784	; 0x1d000
   11480:	ldr	pc, [ip, #3152]!	; 0xc50

00011484 <__errno_location@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #118784	; 0x1d000
   1148c:	ldr	pc, [ip, #3144]!	; 0xc48

00011490 <__sprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #118784	; 0x1d000
   11498:	ldr	pc, [ip, #3136]!	; 0xc40

0001149c <__cxa_atexit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #118784	; 0x1d000
   114a4:	ldr	pc, [ip, #3128]!	; 0xc38

000114a8 <memset@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #118784	; 0x1d000
   114b0:	ldr	pc, [ip, #3120]!	; 0xc30

000114b4 <__printf_chk@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #118784	; 0x1d000
   114bc:	ldr	pc, [ip, #3112]!	; 0xc28

000114c0 <fileno@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #118784	; 0x1d000
   114c8:	ldr	pc, [ip, #3104]!	; 0xc20

000114cc <__fprintf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #118784	; 0x1d000
   114d4:	ldr	pc, [ip, #3096]!	; 0xc18

000114d8 <memchr@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #118784	; 0x1d000
   114e0:	ldr	pc, [ip, #3088]!	; 0xc10

000114e4 <setfilecon@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #118784	; 0x1d000
   114ec:	ldr	pc, [ip, #3080]!	; 0xc08

000114f0 <access@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #118784	; 0x1d000
   114f8:	ldr	pc, [ip, #3072]!	; 0xc00

000114fc <fclose@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #118784	; 0x1d000
   11504:	ldr	pc, [ip, #3064]!	; 0xbf8

00011508 <fseeko64@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #118784	; 0x1d000
   11510:	ldr	pc, [ip, #3056]!	; 0xbf0

00011514 <fcntl64@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #118784	; 0x1d000
   1151c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011520 <setlocale@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #118784	; 0x1d000
   11528:	ldr	pc, [ip, #3040]!	; 0xbe0

0001152c <strrchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #3032]!	; 0xbd8

00011538 <nl_langinfo@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #3024]!	; 0xbd0

00011544 <readdir64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011550 <fdopendir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #3008]!	; 0xbc0

0001155c <dirfd@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #3000]!	; 0xbb8

00011568 <fchdir@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2992]!	; 0xbb0

00011574 <qsort@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2984]!	; 0xba8

00011580 <freecon@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2976]!	; 0xba0

0001158c <bindtextdomain@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2968]!	; 0xb98

00011598 <context_range_set@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2960]!	; 0xb90

000115a4 <context_str@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2952]!	; 0xb88

000115b0 <__xstat64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2944]!	; 0xb80

000115bc <strncmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2936]!	; 0xb78

000115c8 <abort@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2928]!	; 0xb70

000115d4 <close@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2920]!	; 0xb68

000115e0 <__lxstat64@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2912]!	; 0xb60

000115ec <closedir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2904]!	; 0xb58

000115f8 <strspn@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2896]!	; 0xb50

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00011610 <.text>:
   11610:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11614:	mvn	r5, #0
   11618:	strd	r6, [sp, #8]
   1161c:	movw	r7, #54952	; 0xd6a8
   11620:	movt	r7, #1
   11624:	strd	r8, [sp, #16]
   11628:	mov	r9, r0
   1162c:	mov	r8, r1
   11630:	strd	sl, [sp, #24]
   11634:	mov	fp, #0
   11638:	mov	r6, #16
   1163c:	str	lr, [sp, #32]
   11640:	sub	sp, sp, #52	; 0x34
   11644:	ldr	r0, [r1]
   11648:	str	fp, [sp, #20]
   1164c:	str	fp, [sp, #24]
   11650:	bl	16960 <__assert_fail@plt+0x535c>
   11654:	movw	r1, #54552	; 0xd518
   11658:	movt	r1, #1
   1165c:	ldr	sl, [pc, #3536]	; 12434 <__assert_fail@plt+0xe30>
   11660:	mov	r0, #6
   11664:	bl	11520 <setlocale@plt>
   11668:	movw	r1, #54896	; 0xd670
   1166c:	movt	r1, #1
   11670:	movw	r0, #54728	; 0xd5c8
   11674:	movt	r0, #1
   11678:	bl	1158c <bindtextdomain@plt>
   1167c:	movw	r0, #54728	; 0xd5c8
   11680:	movt	r0, #1
   11684:	bl	11328 <textdomain@plt>
   11688:	movw	r0, #10576	; 0x2950
   1168c:	movt	r0, #1
   11690:	bl	1ccd8 <__assert_fail@plt+0xb6d4>
   11694:	movw	r3, #61904	; 0xf1d0
   11698:	movt	r3, #2
   1169c:	str	r3, [sp, #16]
   116a0:	mov	r4, #0
   116a4:	mov	r3, sl
   116a8:	mov	r2, r7
   116ac:	mov	r1, r8
   116b0:	mov	r0, r9
   116b4:	str	r4, [sp]
   116b8:	bl	11418 <getopt_long@plt>
   116bc:	cmn	r0, #1
   116c0:	beq	118a8 <__assert_fail@plt+0x2a4>
   116c4:	cmp	r0, #108	; 0x6c
   116c8:	beq	1180c <__assert_fail@plt+0x208>
   116cc:	ble	11700 <__assert_fail@plt+0xfc>
   116d0:	cmp	r0, #118	; 0x76
   116d4:	beq	117fc <__assert_fail@plt+0x1f8>
   116d8:	ble	11788 <__assert_fail@plt+0x184>
   116dc:	movw	r3, #257	; 0x101
   116e0:	cmp	r0, r3
   116e4:	beq	117ec <__assert_fail@plt+0x1e8>
   116e8:	ble	11778 <__assert_fail@plt+0x174>
   116ec:	movw	r3, #258	; 0x102
   116f0:	cmp	r0, r3
   116f4:	bne	11730 <__assert_fail@plt+0x12c>
   116f8:	mov	fp, #1
   116fc:	b	116a0 <__assert_fail@plt+0x9c>
   11700:	cmp	r0, #76	; 0x4c
   11704:	beq	117f4 <__assert_fail@plt+0x1f0>
   11708:	ble	11760 <__assert_fail@plt+0x15c>
   1170c:	cmp	r0, #82	; 0x52
   11710:	beq	1182c <__assert_fail@plt+0x228>
   11714:	ble	11750 <__assert_fail@plt+0x14c>
   11718:	cmp	r0, #102	; 0x66
   1171c:	beq	116a0 <__assert_fail@plt+0x9c>
   11720:	cmp	r0, #104	; 0x68
   11724:	bne	117bc <__assert_fail@plt+0x1b8>
   11728:	mov	r5, r4
   1172c:	b	116a0 <__assert_fail@plt+0x9c>
   11730:	movw	r3, #259	; 0x103
   11734:	cmp	r0, r3
   11738:	bne	117bc <__assert_fail@plt+0x1b8>
   1173c:	movw	r3, #61896	; 0xf1c8
   11740:	movt	r3, #2
   11744:	ldr	r3, [r3]
   11748:	str	r3, [sp, #24]
   1174c:	b	116a0 <__assert_fail@plt+0x9c>
   11750:	cmp	r0, #80	; 0x50
   11754:	bne	117bc <__assert_fail@plt+0x1b8>
   11758:	mov	r6, #16
   1175c:	b	116a0 <__assert_fail@plt+0x9c>
   11760:	cmn	r0, #2
   11764:	beq	123a0 <__assert_fail@plt+0xd9c>
   11768:	cmp	r0, #72	; 0x48
   1176c:	bne	117b4 <__assert_fail@plt+0x1b0>
   11770:	mov	r6, #17
   11774:	b	116a0 <__assert_fail@plt+0x9c>
   11778:	cmp	r0, #256	; 0x100
   1177c:	bne	117bc <__assert_fail@plt+0x1b8>
   11780:	mov	r5, #1
   11784:	b	116a0 <__assert_fail@plt+0x9c>
   11788:	cmp	r0, #116	; 0x74
   1178c:	beq	1183c <__assert_fail@plt+0x238>
   11790:	ble	117c4 <__assert_fail@plt+0x1c0>
   11794:	mov	r2, #1
   11798:	movw	r3, #61896	; 0xf1c8
   1179c:	movt	r3, #2
   117a0:	str	r2, [sp, #20]
   117a4:	ldr	r3, [r3]
   117a8:	ldr	r2, [sp, #16]
   117ac:	str	r3, [r2, #4]
   117b0:	b	116a0 <__assert_fail@plt+0x9c>
   117b4:	cmn	r0, #3
   117b8:	beq	1185c <__assert_fail@plt+0x258>
   117bc:	mov	r0, #1
   117c0:	bl	1252c <__assert_fail@plt+0xf28>
   117c4:	cmp	r0, #114	; 0x72
   117c8:	bne	117bc <__assert_fail@plt+0x1b8>
   117cc:	mov	r2, #1
   117d0:	movw	r3, #61896	; 0xf1c8
   117d4:	movt	r3, #2
   117d8:	str	r2, [sp, #20]
   117dc:	ldr	r3, [r3]
   117e0:	ldr	r2, [sp, #16]
   117e4:	str	r3, [r2, #8]
   117e8:	b	116a0 <__assert_fail@plt+0x9c>
   117ec:	mov	fp, r4
   117f0:	b	116a0 <__assert_fail@plt+0x9c>
   117f4:	mov	r6, #2
   117f8:	b	116a0 <__assert_fail@plt+0x9c>
   117fc:	ldr	r2, [sp, #16]
   11800:	mov	r3, #1
   11804:	strb	r3, [r2, #1]
   11808:	b	116a0 <__assert_fail@plt+0x9c>
   1180c:	mov	r2, #1
   11810:	movw	r3, #61896	; 0xf1c8
   11814:	movt	r3, #2
   11818:	str	r2, [sp, #20]
   1181c:	ldr	r3, [r3]
   11820:	ldr	r2, [sp, #16]
   11824:	str	r3, [r2, #16]
   11828:	b	116a0 <__assert_fail@plt+0x9c>
   1182c:	ldr	r2, [sp, #16]
   11830:	mov	r3, #1
   11834:	strb	r3, [r2]
   11838:	b	116a0 <__assert_fail@plt+0x9c>
   1183c:	mov	r2, #1
   11840:	movw	r3, #61896	; 0xf1c8
   11844:	movt	r3, #2
   11848:	str	r2, [sp, #20]
   1184c:	ldr	r3, [r3]
   11850:	ldr	r2, [sp, #16]
   11854:	str	r3, [r2, #12]
   11858:	b	116a0 <__assert_fail@plt+0x9c>
   1185c:	movw	r1, #54920	; 0xd688
   11860:	movt	r1, #1
   11864:	movw	r2, #54936	; 0xd698
   11868:	movt	r2, #1
   1186c:	movw	r3, #61796	; 0xf164
   11870:	movt	r3, #2
   11874:	movw	r0, #61892	; 0xf1c4
   11878:	movt	r0, #2
   1187c:	str	r2, [sp]
   11880:	movw	r2, #54724	; 0xd5c4
   11884:	movt	r2, #1
   11888:	stmib	sp, {r1, r4}
   1188c:	movw	r1, #52756	; 0xce14
   11890:	movt	r1, #1
   11894:	ldr	r0, [r0]
   11898:	ldr	r3, [r3]
   1189c:	bl	1b34c <__assert_fail@plt+0x9d48>
   118a0:	mov	r0, r4
   118a4:	bl	1143c <exit@plt>
   118a8:	movw	r7, #61904	; 0xf1d0
   118ac:	movt	r7, #2
   118b0:	ldrb	r3, [r7]
   118b4:	cmp	r3, r4
   118b8:	bne	11cd8 <__assert_fail@plt+0x6d4>
   118bc:	adds	r5, r5, #0
   118c0:	mov	r6, #16
   118c4:	movne	r5, #1
   118c8:	strb	r5, [r7, #20]
   118cc:	movw	r4, #61880	; 0xf1b8
   118d0:	movt	r4, #2
   118d4:	ldr	r5, [sp, #20]
   118d8:	ldr	r2, [sp, #24]
   118dc:	ldr	r3, [r4]
   118e0:	cmp	r2, #0
   118e4:	movne	r5, #1
   118e8:	cmp	r5, #0
   118ec:	sub	r2, r9, r3
   118f0:	beq	11ebc <__assert_fail@plt+0x8b8>
   118f4:	cmp	r2, #0
   118f8:	ble	11ec4 <__assert_fail@plt+0x8c0>
   118fc:	ldr	r0, [sp, #24]
   11900:	cmp	r0, #0
   11904:	beq	11fa0 <__assert_fail@plt+0x99c>
   11908:	mov	r5, #0
   1190c:	add	r1, sp, #44	; 0x2c
   11910:	str	r5, [sp, #44]	; 0x2c
   11914:	bl	1ac10 <__assert_fail@plt+0x960c>
   11918:	cmp	r0, r5
   1191c:	blt	123d0 <__assert_fail@plt+0xdcc>
   11920:	ldr	r2, [sp, #20]
   11924:	ldr	r3, [sp, #44]	; 0x2c
   11928:	cmp	r2, #0
   1192c:	str	r3, [r7, #24]
   11930:	bne	123a8 <__assert_fail@plt+0xda4>
   11934:	ldrb	r3, [r7]
   11938:	and	fp, fp, r3
   1193c:	bl	11484 <__errno_location@plt>
   11940:	cmp	fp, #0
   11944:	str	r0, [sp, #16]
   11948:	streq	fp, [r7, #48]	; 0x30
   1194c:	bne	120d0 <__assert_fail@plt+0xacc>
   11950:	movw	r3, #55840	; 0xda20
   11954:	movt	r3, #1
   11958:	ldr	r0, [r4]
   1195c:	orr	r1, r6, #8
   11960:	mov	r2, #0
   11964:	str	r3, [sp, #20]
   11968:	movw	r3, #55756	; 0xd9cc
   1196c:	movt	r3, #1
   11970:	mov	r9, #1
   11974:	str	r3, [sp, #24]
   11978:	movw	r3, #55832	; 0xda18
   1197c:	movt	r3, #1
   11980:	add	r0, r8, r0, lsl #2
   11984:	str	r3, [sp, #32]
   11988:	bl	1bb58 <__assert_fail@plt+0xa554>
   1198c:	mov	r8, r0
   11990:	mov	r0, r8
   11994:	bl	14684 <__assert_fail@plt+0x3080>
   11998:	subs	r5, r0, #0
   1199c:	beq	11a58 <__assert_fail@plt+0x454>
   119a0:	ldrh	r3, [r5, #56]	; 0x38
   119a4:	ldr	r4, [r5, #28]
   119a8:	sub	r3, r3, #1
   119ac:	cmp	r3, #9
   119b0:	ldrls	pc, [pc, r3, lsl #2]
   119b4:	b	11aec <__assert_fail@plt+0x4e8>
   119b8:	andeq	r1, r1, r8, lsl #24
   119bc:	ldrdeq	r1, [r1], -r8
   119c0:	andeq	r1, r1, ip, ror #21
   119c4:	andeq	r1, r1, ip, asr #21
   119c8:	andeq	r1, r1, ip, ror #21
   119cc:	andeq	r1, r1, ip, asr #22
   119d0:	muleq	r1, r8, sl
   119d4:	andeq	r1, r1, ip, ror #21
   119d8:	andeq	r1, r1, ip, ror #21
   119dc:	andeq	r1, r1, r0, ror #19
   119e0:	ldr	r3, [r5, #48]	; 0x30
   119e4:	cmp	r3, #0
   119e8:	bne	119f8 <__assert_fail@plt+0x3f4>
   119ec:	ldr	r3, [r5, #16]
   119f0:	cmp	r3, #0
   119f4:	beq	12114 <__assert_fail@plt+0xb10>
   119f8:	movw	r1, #55392	; 0xd860
   119fc:	movt	r1, #1
   11a00:	ldr	sl, [r5, #32]
   11a04:	mov	r2, #5
   11a08:	mov	r0, #0
   11a0c:	bl	112f8 <dcgettext@plt>
   11a10:	mov	fp, r0
   11a14:	mov	r1, r4
   11a18:	mov	r0, #4
   11a1c:	mov	r6, #0
   11a20:	bl	18fa4 <__assert_fail@plt+0x79a0>
   11a24:	mov	r3, r0
   11a28:	mov	r2, fp
   11a2c:	mov	r1, sl
   11a30:	mov	r0, r6
   11a34:	bl	113ac <error@plt>
   11a38:	ldrb	r3, [r7]
   11a3c:	cmp	r3, #0
   11a40:	beq	11d14 <__assert_fail@plt+0x710>
   11a44:	mov	r0, r8
   11a48:	and	r9, r9, r6
   11a4c:	bl	14684 <__assert_fail@plt+0x3080>
   11a50:	subs	r5, r0, #0
   11a54:	bne	119a0 <__assert_fail@plt+0x39c>
   11a58:	ldr	r3, [sp, #16]
   11a5c:	ldr	r4, [r3]
   11a60:	cmp	r4, #0
   11a64:	bne	11f78 <__assert_fail@plt+0x974>
   11a68:	mov	r0, r8
   11a6c:	bl	1447c <__assert_fail@plt+0x2e78>
   11a70:	cmp	r0, #0
   11a74:	bne	11f44 <__assert_fail@plt+0x940>
   11a78:	eor	r0, r9, #1
   11a7c:	add	sp, sp, #52	; 0x34
   11a80:	ldrd	r4, [sp]
   11a84:	ldrd	r6, [sp, #8]
   11a88:	ldrd	r8, [sp, #16]
   11a8c:	ldrd	sl, [sp, #24]
   11a90:	add	sp, sp, #32
   11a94:	pop	{pc}		; (ldr pc, [sp], #4)
   11a98:	ldr	sl, [r5, #32]
   11a9c:	mov	r2, r4
   11aa0:	mov	r1, #3
   11aa4:	mov	r0, #0
   11aa8:	mov	r6, r0
   11aac:	bl	19b24 <__assert_fail@plt+0x8520>
   11ab0:	mov	r3, r0
   11ab4:	movw	r2, #56152	; 0xdb58
   11ab8:	movt	r2, #1
   11abc:	mov	r0, r6
   11ac0:	mov	r1, sl
   11ac4:	bl	113ac <error@plt>
   11ac8:	b	11a38 <__assert_fail@plt+0x434>
   11acc:	movw	r1, #55412	; 0xd874
   11ad0:	movt	r1, #1
   11ad4:	b	11a00 <__assert_fail@plt+0x3fc>
   11ad8:	mov	r1, r5
   11adc:	mov	r0, r8
   11ae0:	bl	1bbb0 <__assert_fail@plt+0xa5ac>
   11ae4:	cmp	r0, #0
   11ae8:	bne	1205c <__assert_fail@plt+0xa58>
   11aec:	ldrb	r3, [r7, #1]
   11af0:	ldr	r6, [r5, #24]
   11af4:	cmp	r3, #0
   11af8:	bne	11d28 <__assert_fail@plt+0x724>
   11afc:	ldr	sl, [r7, #24]
   11b00:	mov	r4, #0
   11b04:	ldrb	r2, [r7, #20]
   11b08:	str	r4, [sp, #44]	; 0x2c
   11b0c:	ldr	fp, [r8, #32]
   11b10:	cmp	sl, r4
   11b14:	beq	11d60 <__assert_fail@plt+0x75c>
   11b18:	cmp	r2, #0
   11b1c:	mov	r0, fp
   11b20:	mov	r2, sl
   11b24:	mov	r1, r6
   11b28:	beq	11e40 <__assert_fail@plt+0x83c>
   11b2c:	bl	1a868 <__assert_fail@plt+0x9264>
   11b30:	cmp	r0, #0
   11b34:	bne	11e48 <__assert_fail@plt+0x844>
   11b38:	ldr	r3, [r7, #24]
   11b3c:	cmp	r3, #0
   11b40:	beq	12294 <__assert_fail@plt+0xc90>
   11b44:	mov	r6, #1
   11b48:	b	11a38 <__assert_fail@plt+0x434>
   11b4c:	ldrb	r3, [r7]
   11b50:	cmp	r3, #0
   11b54:	moveq	r6, #1
   11b58:	beq	11a44 <__assert_fail@plt+0x440>
   11b5c:	ldr	ip, [r7, #48]	; 0x30
   11b60:	cmp	ip, #0
   11b64:	beq	11aec <__assert_fail@plt+0x4e8>
   11b68:	ldrd	r2, [ip]
   11b6c:	ldrd	r0, [r5, #160]	; 0xa0
   11b70:	cmp	r1, r3
   11b74:	cmpeq	r0, r2
   11b78:	bne	11aec <__assert_fail@plt+0x4e8>
   11b7c:	ldrd	r0, [ip, #8]
   11b80:	ldrd	r2, [r5, #64]	; 0x40
   11b84:	cmp	r3, r1
   11b88:	cmpeq	r2, r0
   11b8c:	bne	11aec <__assert_fail@plt+0x4e8>
   11b90:	movw	r1, #57544	; 0xe0c8
   11b94:	movt	r1, #1
   11b98:	mov	r0, r4
   11b9c:	bl	11268 <strcmp@plt>
   11ba0:	subs	r6, r0, #0
   11ba4:	bne	122e8 <__assert_fail@plt+0xce4>
   11ba8:	mov	r2, #5
   11bac:	movw	r1, #55232	; 0xd7c0
   11bb0:	movt	r1, #1
   11bb4:	bl	112f8 <dcgettext@plt>
   11bb8:	mov	sl, r0
   11bbc:	mov	r1, r4
   11bc0:	mov	r0, #4
   11bc4:	bl	18fa4 <__assert_fail@plt+0x79a0>
   11bc8:	mov	r3, r0
   11bcc:	mov	r2, sl
   11bd0:	mov	r1, r6
   11bd4:	mov	r0, r6
   11bd8:	bl	113ac <error@plt>
   11bdc:	mov	r2, #5
   11be0:	movw	r1, #55340	; 0xd82c
   11be4:	movt	r1, #1
   11be8:	mov	r0, #0
   11bec:	bl	112f8 <dcgettext@plt>
   11bf0:	mov	r1, #0
   11bf4:	mov	r2, r0
   11bf8:	mov	r0, r1
   11bfc:	mov	r6, r1
   11c00:	bl	113ac <error@plt>
   11c04:	b	11a38 <__assert_fail@plt+0x434>
   11c08:	ldrb	r6, [r7]
   11c0c:	cmp	r6, #0
   11c10:	beq	11aec <__assert_fail@plt+0x4e8>
   11c14:	ldr	ip, [r7, #48]	; 0x30
   11c18:	cmp	ip, #0
   11c1c:	beq	11a44 <__assert_fail@plt+0x440>
   11c20:	ldrd	r2, [ip]
   11c24:	ldrd	r0, [r5, #160]	; 0xa0
   11c28:	cmp	r1, r3
   11c2c:	cmpeq	r0, r2
   11c30:	bne	11a44 <__assert_fail@plt+0x440>
   11c34:	ldrd	r0, [ip, #8]
   11c38:	ldrd	r2, [r5, #64]	; 0x40
   11c3c:	cmp	r3, r1
   11c40:	cmpeq	r2, r0
   11c44:	bne	11a44 <__assert_fail@plt+0x440>
   11c48:	movw	r1, #57544	; 0xe0c8
   11c4c:	movt	r1, #1
   11c50:	mov	r0, r4
   11c54:	bl	11268 <strcmp@plt>
   11c58:	subs	r6, r0, #0
   11c5c:	bne	12344 <__assert_fail@plt+0xd40>
   11c60:	mov	r2, #5
   11c64:	movw	r1, #55232	; 0xd7c0
   11c68:	movt	r1, #1
   11c6c:	bl	112f8 <dcgettext@plt>
   11c70:	mov	sl, r0
   11c74:	mov	r1, r4
   11c78:	mov	r0, #4
   11c7c:	bl	18fa4 <__assert_fail@plt+0x79a0>
   11c80:	mov	r3, r0
   11c84:	mov	r2, sl
   11c88:	mov	r1, r6
   11c8c:	mov	r0, r6
   11c90:	bl	113ac <error@plt>
   11c94:	mov	r2, #5
   11c98:	movw	r1, #55340	; 0xd82c
   11c9c:	movt	r1, #1
   11ca0:	mov	r0, #0
   11ca4:	bl	112f8 <dcgettext@plt>
   11ca8:	mov	r1, #0
   11cac:	mov	r2, r0
   11cb0:	mov	r0, r1
   11cb4:	mov	r6, r1
   11cb8:	bl	113ac <error@plt>
   11cbc:	mov	r1, r5
   11cc0:	mov	r2, #4
   11cc4:	mov	r0, r8
   11cc8:	bl	14e98 <__assert_fail@plt+0x3894>
   11ccc:	mov	r0, r8
   11cd0:	bl	14684 <__assert_fail@plt+0x3080>
   11cd4:	b	11a44 <__assert_fail@plt+0x440>
   11cd8:	cmp	r6, #16
   11cdc:	beq	120a0 <__assert_fail@plt+0xa9c>
   11ce0:	cmp	r5, #0
   11ce4:	movne	r3, #1
   11ce8:	strbne	r3, [r7, #20]
   11cec:	bne	118cc <__assert_fail@plt+0x2c8>
   11cf0:	mov	r2, #5
   11cf4:	movw	r1, #55012	; 0xd6e4
   11cf8:	movt	r1, #1
   11cfc:	mov	r0, r5
   11d00:	bl	112f8 <dcgettext@plt>
   11d04:	mov	r2, r0
   11d08:	mov	r1, r5
   11d0c:	mov	r0, #1
   11d10:	bl	113ac <error@plt>
   11d14:	mov	r1, r5
   11d18:	mov	r2, #4
   11d1c:	mov	r0, r8
   11d20:	bl	14e98 <__assert_fail@plt+0x3894>
   11d24:	b	11a44 <__assert_fail@plt+0x440>
   11d28:	mov	r2, #5
   11d2c:	movw	r1, #55628	; 0xd94c
   11d30:	movt	r1, #1
   11d34:	mov	r0, #0
   11d38:	bl	112f8 <dcgettext@plt>
   11d3c:	mov	sl, r0
   11d40:	mov	r1, r4
   11d44:	mov	r0, #4
   11d48:	bl	18fa4 <__assert_fail@plt+0x79a0>
   11d4c:	mov	r2, r0
   11d50:	mov	r1, sl
   11d54:	mov	r0, #1
   11d58:	bl	114b4 <__printf_chk@plt>
   11d5c:	b	11afc <__assert_fail@plt+0x4f8>
   11d60:	cmp	r2, r4
   11d64:	mov	r1, r6
   11d68:	add	r2, sp, #44	; 0x2c
   11d6c:	mov	r0, fp
   11d70:	beq	11eb4 <__assert_fail@plt+0x8b0>
   11d74:	bl	1a4c0 <__assert_fail@plt+0x8ebc>
   11d78:	cmp	r0, #0
   11d7c:	blt	11ef4 <__assert_fail@plt+0x8f0>
   11d80:	ldr	sl, [sp, #44]	; 0x2c
   11d84:	cmp	sl, #0
   11d88:	beq	12130 <__assert_fail@plt+0xb2c>
   11d8c:	mov	r0, sl
   11d90:	bl	112c8 <context_new@plt>
   11d94:	subs	r4, r0, #0
   11d98:	beq	122ac <__assert_fail@plt+0xca8>
   11d9c:	ldr	r1, [r7, #4]
   11da0:	cmp	r1, #0
   11da4:	beq	11db4 <__assert_fail@plt+0x7b0>
   11da8:	bl	11448 <context_user_set@plt>
   11dac:	cmp	r0, #0
   11db0:	bne	1222c <__assert_fail@plt+0xc28>
   11db4:	mov	sl, #1
   11db8:	ldr	r1, [r7, #16]
   11dbc:	cmp	r1, #0
   11dc0:	beq	11dd4 <__assert_fail@plt+0x7d0>
   11dc4:	mov	r0, r4
   11dc8:	bl	11598 <context_range_set@plt>
   11dcc:	cmp	r0, #0
   11dd0:	bne	121d8 <__assert_fail@plt+0xbd4>
   11dd4:	ldr	r1, [r7, #8]
   11dd8:	cmp	r1, #0
   11ddc:	beq	11df0 <__assert_fail@plt+0x7ec>
   11de0:	mov	r0, r4
   11de4:	bl	112ec <context_role_set@plt>
   11de8:	cmp	r0, #0
   11dec:	bne	11fac <__assert_fail@plt+0x9a8>
   11df0:	ldr	r1, [r7, #12]
   11df4:	cmp	r1, #0
   11df8:	beq	11e0c <__assert_fail@plt+0x808>
   11dfc:	mov	r0, r4
   11e00:	bl	11304 <context_type_set@plt>
   11e04:	cmp	r0, #0
   11e08:	bne	12008 <__assert_fail@plt+0xa04>
   11e0c:	cmp	sl, #0
   11e10:	beq	12044 <__assert_fail@plt+0xa40>
   11e14:	mov	r0, r4
   11e18:	bl	115a4 <context_str@plt>
   11e1c:	ldr	r1, [sp, #44]	; 0x2c
   11e20:	mov	sl, r0
   11e24:	cmp	r1, #0
   11e28:	beq	11e38 <__assert_fail@plt+0x834>
   11e2c:	bl	11268 <strcmp@plt>
   11e30:	cmp	r0, #0
   11e34:	beq	11b38 <__assert_fail@plt+0x534>
   11e38:	ldrb	r2, [r7, #20]
   11e3c:	b	11b18 <__assert_fail@plt+0x514>
   11e40:	bl	1aa3c <__assert_fail@plt+0x9438>
   11e44:	b	11b30 <__assert_fail@plt+0x52c>
   11e48:	ldr	r3, [sp, #16]
   11e4c:	mov	r2, #5
   11e50:	mov	r0, #0
   11e54:	ldr	r1, [sp, #20]
   11e58:	ldr	r3, [r3]
   11e5c:	str	r3, [sp, #28]
   11e60:	bl	112f8 <dcgettext@plt>
   11e64:	mov	fp, r0
   11e68:	mov	r2, r6
   11e6c:	mov	r1, #4
   11e70:	mov	r0, #0
   11e74:	bl	18ec8 <__assert_fail@plt+0x78c4>
   11e78:	mov	r6, r0
   11e7c:	mov	r1, sl
   11e80:	mov	r0, #1
   11e84:	bl	1a2c0 <__assert_fail@plt+0x8cbc>
   11e88:	mov	r3, r6
   11e8c:	mov	r2, fp
   11e90:	str	r0, [sp]
   11e94:	mov	r0, #0
   11e98:	ldr	r1, [sp, #28]
   11e9c:	bl	113ac <error@plt>
   11ea0:	ldr	r6, [r7, #24]
   11ea4:	cmp	r6, #0
   11ea8:	beq	12280 <__assert_fail@plt+0xc7c>
   11eac:	mov	r6, #0
   11eb0:	b	11a38 <__assert_fail@plt+0x434>
   11eb4:	bl	1a694 <__assert_fail@plt+0x9090>
   11eb8:	b	11d78 <__assert_fail@plt+0x774>
   11ebc:	cmp	r2, #1
   11ec0:	bgt	12170 <__assert_fail@plt+0xb6c>
   11ec4:	cmp	r3, r9
   11ec8:	blt	123f8 <__assert_fail@plt+0xdf4>
   11ecc:	mov	r2, #5
   11ed0:	movw	r1, #55032	; 0xd6f8
   11ed4:	movt	r1, #1
   11ed8:	mov	r0, #0
   11edc:	bl	112f8 <dcgettext@plt>
   11ee0:	mov	r1, #0
   11ee4:	mov	r2, r0
   11ee8:	mov	r0, r1
   11eec:	bl	113ac <error@plt>
   11ef0:	b	117bc <__assert_fail@plt+0x1b8>
   11ef4:	ldr	r3, [sp, #16]
   11ef8:	ldr	r4, [r3]
   11efc:	cmp	r4, #61	; 0x3d
   11f00:	beq	11d80 <__assert_fail@plt+0x77c>
   11f04:	mov	r2, #5
   11f08:	movw	r1, #55076	; 0xd724
   11f0c:	movt	r1, #1
   11f10:	mov	r0, #0
   11f14:	bl	112f8 <dcgettext@plt>
   11f18:	mov	sl, r0
   11f1c:	mov	r1, r6
   11f20:	mov	r0, #4
   11f24:	mov	r6, #0
   11f28:	bl	18fa4 <__assert_fail@plt+0x79a0>
   11f2c:	mov	r3, r0
   11f30:	mov	r2, sl
   11f34:	mov	r1, r4
   11f38:	mov	r0, r6
   11f3c:	bl	113ac <error@plt>
   11f40:	b	11a38 <__assert_fail@plt+0x434>
   11f44:	ldr	r3, [sp, #16]
   11f48:	mov	r2, #5
   11f4c:	movw	r1, #55880	; 0xda48
   11f50:	movt	r1, #1
   11f54:	mov	r0, #0
   11f58:	ldr	r4, [r3]
   11f5c:	bl	112f8 <dcgettext@plt>
   11f60:	mov	r2, r0
   11f64:	mov	r0, #0
   11f68:	mov	r9, r0
   11f6c:	mov	r1, r4
   11f70:	bl	113ac <error@plt>
   11f74:	b	11a78 <__assert_fail@plt+0x474>
   11f78:	mov	r2, #5
   11f7c:	movw	r1, #55216	; 0xd7b0
   11f80:	movt	r1, #1
   11f84:	mov	r9, r5
   11f88:	bl	112f8 <dcgettext@plt>
   11f8c:	mov	r2, r0
   11f90:	mov	r1, r4
   11f94:	mov	r0, r5
   11f98:	bl	113ac <error@plt>
   11f9c:	b	11a68 <__assert_fail@plt+0x464>
   11fa0:	ldr	r3, [sp, #24]
   11fa4:	str	r3, [r7, #24]
   11fa8:	b	11934 <__assert_fail@plt+0x330>
   11fac:	ldr	r3, [sp, #16]
   11fb0:	mov	r2, #5
   11fb4:	mov	r0, #0
   11fb8:	ldr	r1, [sp, #24]
   11fbc:	ldr	r6, [r3]
   11fc0:	bl	112f8 <dcgettext@plt>
   11fc4:	mov	sl, r0
   11fc8:	ldr	r0, [r7, #8]
   11fcc:	bl	1a2d0 <__assert_fail@plt+0x8ccc>
   11fd0:	mov	r2, sl
   11fd4:	movw	r3, #55824	; 0xda10
   11fd8:	movt	r3, #1
   11fdc:	mov	r1, r6
   11fe0:	str	r0, [sp]
   11fe4:	mov	r0, #0
   11fe8:	bl	113ac <error@plt>
   11fec:	ldr	r1, [r7, #12]
   11ff0:	cmp	r1, #0
   11ff4:	beq	12044 <__assert_fail@plt+0xa40>
   11ff8:	mov	r0, r4
   11ffc:	bl	11304 <context_type_set@plt>
   12000:	cmp	r0, #0
   12004:	beq	12044 <__assert_fail@plt+0xa40>
   12008:	ldr	r3, [sp, #16]
   1200c:	mov	r2, #5
   12010:	mov	r0, #0
   12014:	ldr	r1, [sp, #24]
   12018:	ldr	r6, [r3]
   1201c:	bl	112f8 <dcgettext@plt>
   12020:	mov	sl, r0
   12024:	ldr	r0, [r7, #12]
   12028:	bl	1a2d0 <__assert_fail@plt+0x8ccc>
   1202c:	mov	r2, sl
   12030:	str	r0, [sp]
   12034:	mov	r0, #0
   12038:	mov	r1, r6
   1203c:	ldr	r3, [sp, #32]
   12040:	bl	113ac <error@plt>
   12044:	ldr	sl, [sp, #16]
   12048:	mov	r0, r4
   1204c:	ldr	r6, [sl]
   12050:	bl	1140c <context_free@plt>
   12054:	str	r6, [sl]
   12058:	b	11eac <__assert_fail@plt+0x8a8>
   1205c:	mov	r2, #5
   12060:	movw	r1, #55440	; 0xd890
   12064:	movt	r1, #1
   12068:	mov	r0, #0
   1206c:	bl	112f8 <dcgettext@plt>
   12070:	mov	r5, r0
   12074:	mov	r2, r4
   12078:	mov	r1, #3
   1207c:	mov	r0, #0
   12080:	bl	19b24 <__assert_fail@plt+0x8520>
   12084:	mov	r1, #0
   12088:	mov	r3, r0
   1208c:	mov	r2, r5
   12090:	mov	r0, r1
   12094:	mov	r6, r1
   12098:	bl	113ac <error@plt>
   1209c:	b	11a44 <__assert_fail@plt+0x440>
   120a0:	cmp	r5, #1
   120a4:	strbne	r4, [r7, #20]
   120a8:	bne	118cc <__assert_fail@plt+0x2c8>
   120ac:	mov	r2, #5
   120b0:	movw	r1, #54968	; 0xd6b8
   120b4:	movt	r1, #1
   120b8:	mov	r0, r4
   120bc:	bl	112f8 <dcgettext@plt>
   120c0:	mov	r2, r0
   120c4:	mov	r1, r4
   120c8:	mov	r0, r5
   120cc:	bl	113ac <error@plt>
   120d0:	ldr	r0, [pc, #864]	; 12438 <__assert_fail@plt+0xe34>
   120d4:	bl	1a464 <__assert_fail@plt+0x8e60>
   120d8:	cmp	r0, #0
   120dc:	str	r0, [r7, #48]	; 0x30
   120e0:	bne	11950 <__assert_fail@plt+0x34c>
   120e4:	ldr	r3, [sp, #16]
   120e8:	movw	r1, #55184	; 0xd790
   120ec:	movt	r1, #1
   120f0:	mov	r2, #5
   120f4:	ldr	r4, [r3]
   120f8:	bl	112f8 <dcgettext@plt>
   120fc:	mov	r5, r0
   12100:	movw	r1, #57544	; 0xe0c8
   12104:	movt	r1, #1
   12108:	mov	r0, #4
   1210c:	bl	18fa4 <__assert_fail@plt+0x79a0>
   12110:	b	121c4 <__assert_fail@plt+0xbc0>
   12114:	mov	r2, #1
   12118:	mov	r1, r5
   1211c:	mov	r0, r8
   12120:	mov	r6, r2
   12124:	str	r2, [r5, #16]
   12128:	bl	14e98 <__assert_fail@plt+0x3894>
   1212c:	b	11a44 <__assert_fail@plt+0x440>
   12130:	mov	r2, #5
   12134:	mov	r0, sl
   12138:	movw	r1, #55664	; 0xd970
   1213c:	movt	r1, #1
   12140:	bl	112f8 <dcgettext@plt>
   12144:	mov	r4, r0
   12148:	mov	r1, r6
   1214c:	mov	r0, #4
   12150:	mov	r6, sl
   12154:	bl	18fa4 <__assert_fail@plt+0x79a0>
   12158:	mov	r3, r0
   1215c:	mov	r2, r4
   12160:	mov	r1, sl
   12164:	mov	r0, sl
   12168:	bl	113ac <error@plt>
   1216c:	b	11a38 <__assert_fail@plt+0x434>
   12170:	ldr	r2, [r8, r3, lsl #2]
   12174:	add	r3, r3, #1
   12178:	str	r3, [r4]
   1217c:	str	r2, [r7, #24]
   12180:	bl	1125c <is_selinux_enabled@plt>
   12184:	cmp	r0, #0
   12188:	ble	11934 <__assert_fail@plt+0x330>
   1218c:	ldr	r0, [r7, #24]
   12190:	bl	113b8 <security_check_context@plt>
   12194:	cmp	r0, #0
   12198:	bge	11934 <__assert_fail@plt+0x330>
   1219c:	bl	11484 <__errno_location@plt>
   121a0:	movw	r1, #55116	; 0xd74c
   121a4:	movt	r1, #1
   121a8:	ldr	r4, [r0]
   121ac:	mov	r2, #5
   121b0:	mov	r0, r5
   121b4:	bl	112f8 <dcgettext@plt>
   121b8:	mov	r5, r0
   121bc:	ldr	r0, [r7, #24]
   121c0:	bl	1a2d0 <__assert_fail@plt+0x8ccc>
   121c4:	mov	r3, r0
   121c8:	mov	r2, r5
   121cc:	mov	r1, r4
   121d0:	mov	r0, #1
   121d4:	bl	113ac <error@plt>
   121d8:	ldr	r3, [sp, #16]
   121dc:	mov	r2, #5
   121e0:	mov	r0, #0
   121e4:	mov	sl, r0
   121e8:	ldr	r1, [sp, #24]
   121ec:	ldr	r3, [r3]
   121f0:	str	r3, [sp, #36]	; 0x24
   121f4:	bl	112f8 <dcgettext@plt>
   121f8:	mov	r2, r0
   121fc:	ldr	r0, [r7, #16]
   12200:	str	r2, [sp, #28]
   12204:	bl	1a2d0 <__assert_fail@plt+0x8ccc>
   12208:	str	r0, [sp]
   1220c:	mov	r0, sl
   12210:	ldr	r3, [sp, #36]	; 0x24
   12214:	ldr	r2, [sp, #28]
   12218:	mov	r1, r3
   1221c:	movw	r3, #55816	; 0xda08
   12220:	movt	r3, #1
   12224:	bl	113ac <error@plt>
   12228:	b	11dd4 <__assert_fail@plt+0x7d0>
   1222c:	ldr	r3, [sp, #16]
   12230:	mov	r2, #5
   12234:	mov	r0, #0
   12238:	mov	sl, r0
   1223c:	ldr	r1, [sp, #24]
   12240:	ldr	r3, [r3]
   12244:	str	r3, [sp, #36]	; 0x24
   12248:	bl	112f8 <dcgettext@plt>
   1224c:	mov	r2, r0
   12250:	ldr	r0, [r7, #4]
   12254:	str	r2, [sp, #28]
   12258:	bl	1a2d0 <__assert_fail@plt+0x8ccc>
   1225c:	str	r0, [sp]
   12260:	mov	r0, sl
   12264:	ldr	r3, [sp, #36]	; 0x24
   12268:	ldr	r2, [sp, #28]
   1226c:	mov	r1, r3
   12270:	movw	r3, #55808	; 0xda00
   12274:	movt	r3, #1
   12278:	bl	113ac <error@plt>
   1227c:	b	11db8 <__assert_fail@plt+0x7b4>
   12280:	mov	r0, r4
   12284:	bl	1140c <context_free@plt>
   12288:	ldr	r0, [sp, #44]	; 0x2c
   1228c:	bl	11580 <freecon@plt>
   12290:	b	11a38 <__assert_fail@plt+0x434>
   12294:	mov	r0, r4
   12298:	mov	r6, #1
   1229c:	bl	1140c <context_free@plt>
   122a0:	ldr	r0, [sp, #44]	; 0x2c
   122a4:	bl	11580 <freecon@plt>
   122a8:	b	11a38 <__assert_fail@plt+0x434>
   122ac:	ldr	r3, [sp, #16]
   122b0:	mov	r2, #5
   122b4:	movw	r1, #55716	; 0xd9a4
   122b8:	movt	r1, #1
   122bc:	ldr	r6, [r3]
   122c0:	bl	112f8 <dcgettext@plt>
   122c4:	mov	fp, r0
   122c8:	mov	r0, sl
   122cc:	bl	1a2d0 <__assert_fail@plt+0x8ccc>
   122d0:	mov	r3, r0
   122d4:	mov	r2, fp
   122d8:	mov	r1, r6
   122dc:	mov	r0, r4
   122e0:	bl	113ac <error@plt>
   122e4:	b	11eac <__assert_fail@plt+0x8a8>
   122e8:	mov	r2, #5
   122ec:	movw	r1, #55280	; 0xd7f0
   122f0:	movt	r1, #1
   122f4:	mov	r0, #0
   122f8:	bl	112f8 <dcgettext@plt>
   122fc:	mov	r6, r0
   12300:	mov	r2, r4
   12304:	mov	r1, #4
   12308:	mov	r0, #0
   1230c:	bl	18ec8 <__assert_fail@plt+0x78c4>
   12310:	mov	r4, r0
   12314:	mov	r1, #4
   12318:	movw	r2, #57544	; 0xe0c8
   1231c:	movt	r2, #1
   12320:	mov	r0, #1
   12324:	bl	18ec8 <__assert_fail@plt+0x78c4>
   12328:	mov	r1, #0
   1232c:	mov	r3, r4
   12330:	str	r0, [sp]
   12334:	mov	r2, r6
   12338:	mov	r0, r1
   1233c:	bl	113ac <error@plt>
   12340:	b	11bdc <__assert_fail@plt+0x5d8>
   12344:	mov	r2, #5
   12348:	movw	r1, #55280	; 0xd7f0
   1234c:	movt	r1, #1
   12350:	mov	r0, #0
   12354:	bl	112f8 <dcgettext@plt>
   12358:	mov	r6, r0
   1235c:	mov	r2, r4
   12360:	mov	r1, #4
   12364:	mov	r0, #0
   12368:	bl	18ec8 <__assert_fail@plt+0x78c4>
   1236c:	mov	r4, r0
   12370:	mov	r1, #4
   12374:	movw	r2, #57544	; 0xe0c8
   12378:	movt	r2, #1
   1237c:	mov	r0, #1
   12380:	bl	18ec8 <__assert_fail@plt+0x78c4>
   12384:	mov	r1, #0
   12388:	mov	r3, r4
   1238c:	str	r0, [sp]
   12390:	mov	r2, r6
   12394:	mov	r0, r1
   12398:	bl	113ac <error@plt>
   1239c:	b	11c94 <__assert_fail@plt+0x690>
   123a0:	mov	r0, r4
   123a4:	bl	1252c <__assert_fail@plt+0xf28>
   123a8:	mov	r2, #5
   123ac:	mov	r0, r5
   123b0:	movw	r1, #55136	; 0xd760
   123b4:	movt	r1, #1
   123b8:	bl	112f8 <dcgettext@plt>
   123bc:	mov	r2, r0
   123c0:	mov	r1, r5
   123c4:	mov	r0, r5
   123c8:	bl	113ac <error@plt>
   123cc:	b	117bc <__assert_fail@plt+0x1b8>
   123d0:	bl	11484 <__errno_location@plt>
   123d4:	movw	r1, #55076	; 0xd724
   123d8:	movt	r1, #1
   123dc:	ldr	r4, [r0]
   123e0:	mov	r2, #5
   123e4:	mov	r0, r5
   123e8:	bl	112f8 <dcgettext@plt>
   123ec:	mov	r5, r0
   123f0:	ldr	r1, [sp, #24]
   123f4:	b	12108 <__assert_fail@plt+0xb04>
   123f8:	mov	r2, #5
   123fc:	movw	r1, #55048	; 0xd708
   12400:	movt	r1, #1
   12404:	mov	r0, #0
   12408:	bl	112f8 <dcgettext@plt>
   1240c:	sub	r9, r9, #-1073741823	; 0xc0000001
   12410:	mov	r4, r0
   12414:	ldr	r0, [r8, r9, lsl #2]
   12418:	bl	1a2d0 <__assert_fail@plt+0x8ccc>
   1241c:	mov	r1, #0
   12420:	mov	r3, r0
   12424:	mov	r2, r4
   12428:	mov	r0, r1
   1242c:	bl	113ac <error@plt>
   12430:	b	117bc <__assert_fail@plt+0x1b8>
   12434:	andeq	ip, r1, r4, lsr sp
   12438:	strdeq	pc, [r2], -r0
   1243c:	mov	fp, #0
   12440:	mov	lr, #0
   12444:	pop	{r1}		; (ldr r1, [sp], #4)
   12448:	mov	r2, sp
   1244c:	push	{r2}		; (str r2, [sp, #-4]!)
   12450:	push	{r0}		; (str r0, [sp, #-4]!)
   12454:	ldr	ip, [pc, #16]	; 1246c <__assert_fail@plt+0xe68>
   12458:	push	{ip}		; (str ip, [sp, #-4]!)
   1245c:	ldr	r0, [pc, #12]	; 12470 <__assert_fail@plt+0xe6c>
   12460:	ldr	r3, [pc, #12]	; 12474 <__assert_fail@plt+0xe70>
   12464:	bl	113e8 <__libc_start_main@plt>
   12468:	bl	115c8 <abort@plt>
   1246c:	ldrdeq	ip, [r1], -r4
   12470:	andeq	r1, r1, r0, lsl r6
   12474:	andeq	ip, r1, r4, ror ip
   12478:	ldr	r3, [pc, #20]	; 12494 <__assert_fail@plt+0xe90>
   1247c:	ldr	r2, [pc, #20]	; 12498 <__assert_fail@plt+0xe94>
   12480:	add	r3, pc, r3
   12484:	ldr	r2, [r3, r2]
   12488:	cmp	r2, #0
   1248c:	bxeq	lr
   12490:	b	11400 <__gmon_start__@plt>
   12494:	andeq	ip, r1, r8, ror fp
   12498:	andeq	r0, r0, r8, asr r1
   1249c:	ldr	r0, [pc, #24]	; 124bc <__assert_fail@plt+0xeb8>
   124a0:	ldr	r3, [pc, #24]	; 124c0 <__assert_fail@plt+0xebc>
   124a4:	cmp	r3, r0
   124a8:	bxeq	lr
   124ac:	ldr	r3, [pc, #16]	; 124c4 <__assert_fail@plt+0xec0>
   124b0:	cmp	r3, #0
   124b4:	bxeq	lr
   124b8:	bx	r3
   124bc:	andeq	pc, r2, ip, lsr #3
   124c0:	andeq	pc, r2, ip, lsr #3
   124c4:	andeq	r0, r0, r0
   124c8:	ldr	r0, [pc, #36]	; 124f4 <__assert_fail@plt+0xef0>
   124cc:	ldr	r1, [pc, #36]	; 124f8 <__assert_fail@plt+0xef4>
   124d0:	sub	r1, r1, r0
   124d4:	asr	r1, r1, #2
   124d8:	add	r1, r1, r1, lsr #31
   124dc:	asrs	r1, r1, #1
   124e0:	bxeq	lr
   124e4:	ldr	r3, [pc, #16]	; 124fc <__assert_fail@plt+0xef8>
   124e8:	cmp	r3, #0
   124ec:	bxeq	lr
   124f0:	bx	r3
   124f4:	andeq	pc, r2, ip, lsr #3
   124f8:	andeq	pc, r2, ip, lsr #3
   124fc:	andeq	r0, r0, r0
   12500:	push	{r4, lr}
   12504:	ldr	r4, [pc, #24]	; 12524 <__assert_fail@plt+0xf20>
   12508:	ldrb	r3, [r4]
   1250c:	cmp	r3, #0
   12510:	popne	{r4, pc}
   12514:	bl	1249c <__assert_fail@plt+0xe98>
   12518:	mov	r3, #1
   1251c:	strb	r3, [r4]
   12520:	pop	{r4, pc}
   12524:	andeq	pc, r2, ip, asr #3
   12528:	b	124c8 <__assert_fail@plt+0xec4>
   1252c:	subs	r6, r0, #0
   12530:	str	r7, [sp, #-8]!
   12534:	str	lr, [sp, #4]
   12538:	sub	sp, sp, #64	; 0x40
   1253c:	beq	12584 <__assert_fail@plt+0xf80>
   12540:	movw	r3, #61888	; 0xf1c0
   12544:	movt	r3, #2
   12548:	ldr	r4, [r3]
   1254c:	mov	r2, #5
   12550:	movw	r1, #52764	; 0xce1c
   12554:	movt	r1, #1
   12558:	mov	r0, #0
   1255c:	bl	112f8 <dcgettext@plt>
   12560:	movw	r3, #61964	; 0xf20c
   12564:	movt	r3, #2
   12568:	mov	r2, r0
   1256c:	mov	r1, #1
   12570:	ldr	r3, [r3]
   12574:	mov	r0, r4
   12578:	bl	114cc <__fprintf_chk@plt>
   1257c:	mov	r0, r6
   12580:	bl	1143c <exit@plt>
   12584:	mov	r2, #5
   12588:	movw	r1, #52804	; 0xce44
   1258c:	movt	r1, #1
   12590:	movw	r7, #61892	; 0xf1c4
   12594:	movt	r7, #2
   12598:	bl	112f8 <dcgettext@plt>
   1259c:	movw	r3, #61964	; 0xf20c
   125a0:	movt	r3, #2
   125a4:	ldr	ip, [r3]
   125a8:	mov	r1, r0
   125ac:	mov	r0, #1
   125b0:	mov	r3, ip
   125b4:	mov	r2, ip
   125b8:	str	ip, [sp]
   125bc:	bl	114b4 <__printf_chk@plt>
   125c0:	mov	r2, #5
   125c4:	movw	r1, #52964	; 0xcee4
   125c8:	movt	r1, #1
   125cc:	mov	r0, r6
   125d0:	bl	112f8 <dcgettext@plt>
   125d4:	ldr	r1, [r7]
   125d8:	bl	11244 <fputs_unlocked@plt>
   125dc:	mov	r2, #5
   125e0:	movw	r1, #53104	; 0xcf70
   125e4:	movt	r1, #1
   125e8:	mov	r0, r6
   125ec:	bl	112f8 <dcgettext@plt>
   125f0:	ldr	r1, [r7]
   125f4:	bl	11244 <fputs_unlocked@plt>
   125f8:	mov	r2, #5
   125fc:	movw	r1, #53180	; 0xcfbc
   12600:	movt	r1, #1
   12604:	mov	r0, r6
   12608:	bl	112f8 <dcgettext@plt>
   1260c:	ldr	r1, [r7]
   12610:	bl	11244 <fputs_unlocked@plt>
   12614:	mov	r2, #5
   12618:	movw	r1, #53412	; 0xd0a4
   1261c:	movt	r1, #1
   12620:	mov	r0, r6
   12624:	bl	112f8 <dcgettext@plt>
   12628:	ldr	r1, [r7]
   1262c:	bl	11244 <fputs_unlocked@plt>
   12630:	mov	r2, #5
   12634:	movw	r1, #53696	; 0xd1c0
   12638:	movt	r1, #1
   1263c:	mov	r0, r6
   12640:	bl	112f8 <dcgettext@plt>
   12644:	ldr	r1, [r7]
   12648:	bl	11244 <fputs_unlocked@plt>
   1264c:	mov	r2, #5
   12650:	movw	r1, #53824	; 0xd240
   12654:	movt	r1, #1
   12658:	mov	r0, r6
   1265c:	bl	112f8 <dcgettext@plt>
   12660:	ldr	r1, [r7]
   12664:	bl	11244 <fputs_unlocked@plt>
   12668:	mov	r2, #5
   1266c:	movw	r1, #53944	; 0xd2b8
   12670:	movt	r1, #1
   12674:	mov	r0, r6
   12678:	bl	112f8 <dcgettext@plt>
   1267c:	ldr	r1, [r7]
   12680:	bl	11244 <fputs_unlocked@plt>
   12684:	mov	r2, #5
   12688:	movw	r1, #54016	; 0xd300
   1268c:	movt	r1, #1
   12690:	mov	r0, r6
   12694:	bl	112f8 <dcgettext@plt>
   12698:	ldr	r1, [r7]
   1269c:	bl	11244 <fputs_unlocked@plt>
   126a0:	mov	r2, #5
   126a4:	movw	r1, #54088	; 0xd348
   126a8:	movt	r1, #1
   126ac:	mov	r0, r6
   126b0:	bl	112f8 <dcgettext@plt>
   126b4:	ldr	r1, [r7]
   126b8:	bl	11244 <fputs_unlocked@plt>
   126bc:	mov	r2, #5
   126c0:	movw	r1, #54556	; 0xd51c
   126c4:	movt	r1, #1
   126c8:	mov	r0, r6
   126cc:	bl	112f8 <dcgettext@plt>
   126d0:	ldr	r1, [r7]
   126d4:	bl	11244 <fputs_unlocked@plt>
   126d8:	mov	r2, #5
   126dc:	movw	r1, #54604	; 0xd54c
   126e0:	movt	r1, #1
   126e4:	mov	r0, r6
   126e8:	bl	112f8 <dcgettext@plt>
   126ec:	ldr	r1, [r7]
   126f0:	bl	11244 <fputs_unlocked@plt>
   126f4:	movw	lr, #52476	; 0xccfc
   126f8:	movt	lr, #1
   126fc:	ldr	ip, [lr]
   12700:	ldr	r4, [lr, #4]
   12704:	ldrd	r8, [lr, #8]
   12708:	subs	r1, ip, #0
   1270c:	str	ip, [sp, #8]
   12710:	ldrd	r2, [lr, #16]
   12714:	str	r4, [sp, #12]
   12718:	ldrd	r4, [lr, #24]
   1271c:	strd	r8, [sp, #16]
   12720:	ldrd	r8, [lr, #32]
   12724:	strd	r2, [sp, #24]
   12728:	ldrd	r2, [lr, #40]	; 0x28
   1272c:	strd	r4, [sp, #32]
   12730:	ldrd	r4, [lr, #48]	; 0x30
   12734:	strd	r8, [sp, #40]	; 0x28
   12738:	strd	r2, [sp, #48]	; 0x30
   1273c:	strd	r4, [sp, #56]	; 0x38
   12740:	movwne	r5, #52756	; 0xce14
   12744:	add	r4, sp, #8
   12748:	movtne	r5, #1
   1274c:	bne	12844 <__assert_fail@plt+0x1240>
   12750:	ldr	r4, [r4, #4]
   12754:	movw	r1, #54660	; 0xd584
   12758:	movt	r1, #1
   1275c:	mov	r2, #5
   12760:	cmp	r4, #0
   12764:	beq	12858 <__assert_fail@plt+0x1254>
   12768:	mov	r0, #0
   1276c:	bl	112f8 <dcgettext@plt>
   12770:	mov	r1, r0
   12774:	movw	r3, #54684	; 0xd59c
   12778:	movt	r3, #1
   1277c:	movw	r2, #54724	; 0xd5c4
   12780:	movt	r2, #1
   12784:	mov	r0, #1
   12788:	bl	114b4 <__printf_chk@plt>
   1278c:	mov	r1, #0
   12790:	mov	r0, #5
   12794:	bl	11520 <setlocale@plt>
   12798:	cmp	r0, #0
   1279c:	movweq	r5, #52756	; 0xce14
   127a0:	movteq	r5, #1
   127a4:	beq	127c8 <__assert_fail@plt+0x11c4>
   127a8:	movw	r1, #54740	; 0xd5d4
   127ac:	movt	r1, #1
   127b0:	mov	r2, #3
   127b4:	movw	r5, #52756	; 0xce14
   127b8:	movt	r5, #1
   127bc:	bl	115bc <strncmp@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	12910 <__assert_fail@plt+0x130c>
   127c8:	mov	r2, #5
   127cc:	movw	r1, #54816	; 0xd620
   127d0:	movt	r1, #1
   127d4:	mov	r0, #0
   127d8:	bl	112f8 <dcgettext@plt>
   127dc:	mov	r1, r0
   127e0:	movw	r3, #52756	; 0xce14
   127e4:	movt	r3, #1
   127e8:	movw	r2, #54684	; 0xd59c
   127ec:	movt	r2, #1
   127f0:	mov	r0, #1
   127f4:	bl	114b4 <__printf_chk@plt>
   127f8:	mov	r2, #5
   127fc:	movw	r1, #54844	; 0xd63c
   12800:	movt	r1, #1
   12804:	mov	r0, #0
   12808:	bl	112f8 <dcgettext@plt>
   1280c:	movw	r2, #55908	; 0xda64
   12810:	movt	r2, #1
   12814:	cmp	r4, r5
   12818:	movw	r3, #54552	; 0xd518
   1281c:	movt	r3, #1
   12820:	mov	r1, r0
   12824:	moveq	r3, r2
   12828:	mov	r2, r4
   1282c:	mov	r0, #1
   12830:	bl	114b4 <__printf_chk@plt>
   12834:	b	1257c <__assert_fail@plt+0xf78>
   12838:	ldr	r1, [r4, #8]!
   1283c:	cmp	r1, #0
   12840:	beq	12750 <__assert_fail@plt+0x114c>
   12844:	mov	r0, r5
   12848:	bl	11268 <strcmp@plt>
   1284c:	cmp	r0, #0
   12850:	bne	12838 <__assert_fail@plt+0x1234>
   12854:	b	12750 <__assert_fail@plt+0x114c>
   12858:	mov	r0, r4
   1285c:	bl	112f8 <dcgettext@plt>
   12860:	mov	r1, r0
   12864:	movw	r3, #54684	; 0xd59c
   12868:	movt	r3, #1
   1286c:	movw	r2, #54724	; 0xd5c4
   12870:	movt	r2, #1
   12874:	mov	r0, #1
   12878:	bl	114b4 <__printf_chk@plt>
   1287c:	mov	r1, r4
   12880:	mov	r0, #5
   12884:	bl	11520 <setlocale@plt>
   12888:	cmp	r0, #0
   1288c:	beq	128a8 <__assert_fail@plt+0x12a4>
   12890:	movw	r1, #54740	; 0xd5d4
   12894:	movt	r1, #1
   12898:	mov	r2, #3
   1289c:	bl	115bc <strncmp@plt>
   128a0:	cmp	r0, #0
   128a4:	bne	12904 <__assert_fail@plt+0x1300>
   128a8:	mov	r2, #5
   128ac:	movw	r1, #54816	; 0xd620
   128b0:	movt	r1, #1
   128b4:	mov	r0, #0
   128b8:	bl	112f8 <dcgettext@plt>
   128bc:	mov	r1, r0
   128c0:	movw	r3, #52756	; 0xce14
   128c4:	movt	r3, #1
   128c8:	movw	r2, #54684	; 0xd59c
   128cc:	movt	r2, #1
   128d0:	mov	r0, #1
   128d4:	bl	114b4 <__printf_chk@plt>
   128d8:	movw	r1, #54844	; 0xd63c
   128dc:	movt	r1, #1
   128e0:	mov	r2, #5
   128e4:	mov	r0, #0
   128e8:	bl	112f8 <dcgettext@plt>
   128ec:	movw	r4, #52756	; 0xce14
   128f0:	movt	r4, #1
   128f4:	movw	r3, #55908	; 0xda64
   128f8:	movt	r3, #1
   128fc:	mov	r1, r0
   12900:	b	12828 <__assert_fail@plt+0x1224>
   12904:	movw	r5, #52756	; 0xce14
   12908:	movt	r5, #1
   1290c:	mov	r4, r5
   12910:	mov	r2, #5
   12914:	movw	r1, #54744	; 0xd5d8
   12918:	movt	r1, #1
   1291c:	mov	r0, #0
   12920:	bl	112f8 <dcgettext@plt>
   12924:	ldr	r1, [r7]
   12928:	bl	11244 <fputs_unlocked@plt>
   1292c:	b	127c8 <__assert_fail@plt+0x11c4>
   12930:	movw	r3, #61956	; 0xf204
   12934:	movt	r3, #2
   12938:	str	r0, [r3]
   1293c:	bx	lr
   12940:	movw	r3, #61956	; 0xf204
   12944:	movt	r3, #2
   12948:	strb	r0, [r3, #4]
   1294c:	bx	lr
   12950:	movw	r3, #61892	; 0xf1c4
   12954:	movt	r3, #2
   12958:	strd	r4, [sp, #-16]!
   1295c:	ldr	r0, [r3]
   12960:	str	r6, [sp, #8]
   12964:	str	lr, [sp, #12]
   12968:	sub	sp, sp, #8
   1296c:	bl	1be1c <__assert_fail@plt+0xa818>
   12970:	cmp	r0, #0
   12974:	beq	129a0 <__assert_fail@plt+0x139c>
   12978:	movw	r4, #61956	; 0xf204
   1297c:	movt	r4, #2
   12980:	ldrb	r6, [r4, #4]
   12984:	bl	11484 <__errno_location@plt>
   12988:	mov	r5, r0
   1298c:	cmp	r6, #0
   12990:	beq	129cc <__assert_fail@plt+0x13c8>
   12994:	ldr	r3, [r0]
   12998:	cmp	r3, #32
   1299c:	bne	129cc <__assert_fail@plt+0x13c8>
   129a0:	movw	r3, #61888	; 0xf1c0
   129a4:	movt	r3, #2
   129a8:	ldr	r0, [r3]
   129ac:	bl	1be1c <__assert_fail@plt+0xa818>
   129b0:	cmp	r0, #0
   129b4:	bne	12a14 <__assert_fail@plt+0x1410>
   129b8:	add	sp, sp, #8
   129bc:	ldrd	r4, [sp]
   129c0:	ldr	r6, [sp, #8]
   129c4:	add	sp, sp, #12
   129c8:	pop	{pc}		; (ldr pc, [sp], #4)
   129cc:	movw	r1, #56136	; 0xdb48
   129d0:	movt	r1, #1
   129d4:	mov	r2, #5
   129d8:	mov	r0, #0
   129dc:	bl	112f8 <dcgettext@plt>
   129e0:	mov	r6, r0
   129e4:	ldr	r0, [r4]
   129e8:	cmp	r0, #0
   129ec:	beq	12a24 <__assert_fail@plt+0x1420>
   129f0:	ldr	r4, [r5]
   129f4:	bl	19754 <__assert_fail@plt+0x8150>
   129f8:	mov	r3, r0
   129fc:	movw	r2, #56148	; 0xdb54
   12a00:	movt	r2, #1
   12a04:	mov	r0, #0
   12a08:	str	r6, [sp]
   12a0c:	mov	r1, r4
   12a10:	bl	113ac <error@plt>
   12a14:	movw	r3, #61800	; 0xf168
   12a18:	movt	r3, #2
   12a1c:	ldr	r0, [r3]
   12a20:	bl	112a4 <_exit@plt>
   12a24:	mov	r3, r6
   12a28:	movw	r2, #56152	; 0xdb58
   12a2c:	movt	r2, #1
   12a30:	ldr	r1, [r5]
   12a34:	bl	113ac <error@plt>
   12a38:	b	12a14 <__assert_fail@plt+0x1410>
   12a3c:	strd	r4, [sp, #-8]!
   12a40:	ldrd	r2, [r1, #8]
   12a44:	ldrd	r4, [r0, #8]
   12a48:	cmp	r5, r3
   12a4c:	cmpeq	r4, r2
   12a50:	movne	r0, #0
   12a54:	bne	12a70 <__assert_fail@plt+0x146c>
   12a58:	ldrd	r4, [r0]
   12a5c:	ldrd	r2, [r1]
   12a60:	cmp	r5, r3
   12a64:	cmpeq	r4, r2
   12a68:	moveq	r0, #1
   12a6c:	movne	r0, #0
   12a70:	ldrd	r4, [sp]
   12a74:	add	sp, sp, #8
   12a78:	bx	lr
   12a7c:	mov	r2, r1
   12a80:	mov	r3, #0
   12a84:	str	r4, [sp, #-8]!
   12a88:	ldrd	r0, [r0, #8]
   12a8c:	str	lr, [sp, #4]
   12a90:	bl	1cb00 <__assert_fail@plt+0xb4fc>
   12a94:	ldr	r4, [sp]
   12a98:	add	sp, sp, #4
   12a9c:	mov	r0, r2
   12aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12aa4:	mov	r2, r1
   12aa8:	mov	r3, #0
   12aac:	str	r4, [sp, #-8]!
   12ab0:	ldrd	r0, [r0]
   12ab4:	str	lr, [sp, #4]
   12ab8:	bl	1cb00 <__assert_fail@plt+0xb4fc>
   12abc:	ldr	r4, [sp]
   12ac0:	add	sp, sp, #4
   12ac4:	mov	r0, r2
   12ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   12acc:	strd	r4, [sp, #-8]!
   12ad0:	ldrd	r2, [r1]
   12ad4:	ldrd	r4, [r0]
   12ad8:	cmp	r5, r3
   12adc:	cmpeq	r4, r2
   12ae0:	ldrd	r4, [sp]
   12ae4:	add	sp, sp, #8
   12ae8:	moveq	r0, #1
   12aec:	movne	r0, #0
   12af0:	bx	lr
   12af4:	ldr	r2, [r0]
   12af8:	ldr	r3, [r1]
   12afc:	ldrd	r0, [r2, #160]	; 0xa0
   12b00:	ldrd	r2, [r3, #160]	; 0xa0
   12b04:	cmp	r1, r3
   12b08:	cmpeq	r0, r2
   12b0c:	movhi	r0, #1
   12b10:	movls	r0, #0
   12b14:	movcc	r3, #1
   12b18:	movcs	r3, #0
   12b1c:	sub	r0, r0, r3
   12b20:	bx	lr
   12b24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12b28:	mov	r5, r2
   12b2c:	mov	r4, r1
   12b30:	ldr	r2, [r0, #40]	; 0x28
   12b34:	strd	r6, [sp, #8]
   12b38:	mov	r6, r0
   12b3c:	str	r8, [sp, #16]
   12b40:	str	lr, [sp, #20]
   12b44:	ldr	r0, [r0, #8]
   12b48:	cmp	r2, r5
   12b4c:	ldr	r7, [r6, #44]	; 0x2c
   12b50:	bcs	12b78 <__assert_fail@plt+0x1574>
   12b54:	add	r1, r5, #40	; 0x28
   12b58:	cmn	r1, #-1073741823	; 0xc0000001
   12b5c:	str	r1, [r6, #40]	; 0x28
   12b60:	bhi	12bf8 <__assert_fail@plt+0x15f4>
   12b64:	lsl	r1, r1, #2
   12b68:	bl	1bc98 <__assert_fail@plt+0xa694>
   12b6c:	cmp	r0, #0
   12b70:	strne	r0, [r6, #8]
   12b74:	beq	12bf4 <__assert_fail@plt+0x15f0>
   12b78:	cmp	r4, #0
   12b7c:	movne	r2, r0
   12b80:	beq	12b94 <__assert_fail@plt+0x1590>
   12b84:	str	r4, [r2], #4
   12b88:	ldr	r4, [r4, #8]
   12b8c:	cmp	r4, #0
   12b90:	bne	12b84 <__assert_fail@plt+0x1580>
   12b94:	mov	r3, r7
   12b98:	mov	r2, #4
   12b9c:	mov	r1, r5
   12ba0:	bl	11574 <qsort@plt>
   12ba4:	ldr	lr, [r6, #8]
   12ba8:	subs	r3, r5, #1
   12bac:	ldr	r0, [lr]
   12bb0:	moveq	r2, r0
   12bb4:	beq	12bd8 <__assert_fail@plt+0x15d4>
   12bb8:	mov	r2, lr
   12bbc:	ldr	r1, [r2]
   12bc0:	subs	r3, r3, #1
   12bc4:	ldr	ip, [r2, #4]!
   12bc8:	str	ip, [r1, #8]
   12bcc:	bne	12bbc <__assert_fail@plt+0x15b8>
   12bd0:	add	r5, lr, r5, lsl #2
   12bd4:	ldr	r2, [r5, #-4]
   12bd8:	mov	r3, #0
   12bdc:	str	r3, [r2, #8]
   12be0:	ldrd	r4, [sp]
   12be4:	ldrd	r6, [sp, #8]
   12be8:	ldr	r8, [sp, #16]
   12bec:	add	sp, sp, #20
   12bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf4:	ldr	r0, [r6, #8]
   12bf8:	bl	1c300 <__assert_fail@plt+0xacfc>
   12bfc:	mov	r3, #0
   12c00:	mov	r0, r4
   12c04:	str	r3, [r6, #8]
   12c08:	str	r3, [r6, #40]	; 0x28
   12c0c:	b	12be0 <__assert_fail@plt+0x15dc>
   12c10:	strd	r4, [sp, #-20]!	; 0xffffffec
   12c14:	ldr	r5, [r0, #44]	; 0x2c
   12c18:	ldr	r3, [r5, #48]	; 0x30
   12c1c:	strd	r6, [sp, #8]
   12c20:	str	lr, [sp, #16]
   12c24:	sub	sp, sp, #100	; 0x64
   12c28:	tst	r3, #512	; 0x200
   12c2c:	beq	12cbc <__assert_fail@plt+0x16b8>
   12c30:	ldr	r4, [r5, #52]	; 0x34
   12c34:	mov	r7, r1
   12c38:	mov	r6, r0
   12c3c:	cmp	r4, #0
   12c40:	beq	12c68 <__assert_fail@plt+0x1664>
   12c44:	ldrd	r2, [r6, #64]	; 0x40
   12c48:	add	r1, sp, #8
   12c4c:	mov	r0, r4
   12c50:	strd	r2, [sp, #8]
   12c54:	bl	156a0 <__assert_fail@plt+0x409c>
   12c58:	cmp	r0, #0
   12c5c:	beq	12ca0 <__assert_fail@plt+0x169c>
   12c60:	ldr	r0, [r0, #8]
   12c64:	b	12cc0 <__assert_fail@plt+0x16bc>
   12c68:	movw	r0, #49920	; 0xc300
   12c6c:	movt	r0, #1
   12c70:	mov	r1, r4
   12c74:	movw	r3, #10956	; 0x2acc
   12c78:	movt	r3, #1
   12c7c:	movw	r2, #10916	; 0x2aa4
   12c80:	movt	r2, #1
   12c84:	str	r0, [sp]
   12c88:	mov	r0, #13
   12c8c:	bl	15a24 <__assert_fail@plt+0x4420>
   12c90:	cmp	r0, #0
   12c94:	mov	r4, r0
   12c98:	str	r0, [r5, #52]	; 0x34
   12c9c:	bne	12c44 <__assert_fail@plt+0x1640>
   12ca0:	cmp	r7, #0
   12ca4:	blt	12cbc <__assert_fail@plt+0x16b8>
   12ca8:	mov	r0, r7
   12cac:	add	r1, sp, #8
   12cb0:	bl	1122c <fstatfs64@plt>
   12cb4:	cmp	r0, #0
   12cb8:	beq	12cd4 <__assert_fail@plt+0x16d0>
   12cbc:	mov	r0, #0
   12cc0:	add	sp, sp, #100	; 0x64
   12cc4:	ldrd	r4, [sp]
   12cc8:	ldrd	r6, [sp, #8]
   12ccc:	add	sp, sp, #16
   12cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd4:	cmp	r4, #0
   12cd8:	beq	12d18 <__assert_fail@plt+0x1714>
   12cdc:	mov	r0, #16
   12ce0:	bl	1bc5c <__assert_fail@plt+0xa658>
   12ce4:	subs	r5, r0, #0
   12ce8:	beq	12d18 <__assert_fail@plt+0x1714>
   12cec:	ldr	ip, [sp, #8]
   12cf0:	mov	r0, r4
   12cf4:	mov	r1, r5
   12cf8:	ldrd	r2, [r6, #64]	; 0x40
   12cfc:	strd	r2, [r5]
   12d00:	str	ip, [r5, #8]
   12d04:	bl	1628c <__assert_fail@plt+0x4c88>
   12d08:	cmp	r0, #0
   12d0c:	beq	12d20 <__assert_fail@plt+0x171c>
   12d10:	cmp	r5, r0
   12d14:	bne	12d2c <__assert_fail@plt+0x1728>
   12d18:	ldr	r0, [sp, #8]
   12d1c:	b	12cc0 <__assert_fail@plt+0x16bc>
   12d20:	mov	r0, r5
   12d24:	bl	1c300 <__assert_fail@plt+0xacfc>
   12d28:	b	12d18 <__assert_fail@plt+0x1714>
   12d2c:	bl	115c8 <abort@plt>
   12d30:	ldr	ip, [r2, #48]	; 0x30
   12d34:	strd	r4, [sp, #-16]!
   12d38:	mov	r4, r2
   12d3c:	add	r5, r2, #64	; 0x40
   12d40:	ldr	r2, [r2, #24]
   12d44:	str	r6, [sp, #8]
   12d48:	str	lr, [sp, #12]
   12d4c:	sub	sp, sp, #8
   12d50:	cmp	ip, #0
   12d54:	bne	12dcc <__assert_fail@plt+0x17c8>
   12d58:	tst	r1, #1
   12d5c:	beq	12dcc <__assert_fail@plt+0x17c8>
   12d60:	mov	r1, r2
   12d64:	mov	r0, #3
   12d68:	mov	r2, r5
   12d6c:	bl	115b0 <__xstat64@plt>
   12d70:	cmp	r0, #0
   12d74:	beq	12df8 <__assert_fail@plt+0x17f4>
   12d78:	bl	11484 <__errno_location@plt>
   12d7c:	ldr	r3, [r0]
   12d80:	mov	r6, r0
   12d84:	cmp	r3, #2
   12d88:	bne	12db0 <__assert_fail@plt+0x17ac>
   12d8c:	mov	r2, r5
   12d90:	mov	r0, #3
   12d94:	ldr	r1, [r4, #24]
   12d98:	bl	115e0 <__lxstat64@plt>
   12d9c:	subs	r3, r0, #0
   12da0:	moveq	r0, #13
   12da4:	streq	r3, [r6]
   12da8:	beq	12e1c <__assert_fail@plt+0x1818>
   12dac:	ldr	r3, [r6]
   12db0:	mov	r0, r5
   12db4:	mov	r2, #104	; 0x68
   12db8:	str	r3, [r4, #32]
   12dbc:	mov	r1, #0
   12dc0:	bl	114a8 <memset@plt>
   12dc4:	mov	r0, #10
   12dc8:	b	12e1c <__assert_fail@plt+0x1818>
   12dcc:	ubfx	ip, r1, #1, #1
   12dd0:	orrs	r3, r3, ip
   12dd4:	bne	12d60 <__assert_fail@plt+0x175c>
   12dd8:	mov	ip, #256	; 0x100
   12ddc:	mov	r1, r0
   12de0:	mov	r3, r5
   12de4:	mov	r0, #3
   12de8:	str	ip, [sp]
   12dec:	bl	11340 <__fxstatat64@plt>
   12df0:	cmp	r0, #0
   12df4:	bne	12e78 <__assert_fail@plt+0x1874>
   12df8:	ldr	r3, [r4, #80]	; 0x50
   12dfc:	and	r3, r3, #61440	; 0xf000
   12e00:	cmp	r3, #16384	; 0x4000
   12e04:	beq	12e30 <__assert_fail@plt+0x182c>
   12e08:	cmp	r3, #40960	; 0xa000
   12e0c:	beq	12e84 <__assert_fail@plt+0x1880>
   12e10:	cmp	r3, #32768	; 0x8000
   12e14:	movne	r0, #3
   12e18:	moveq	r0, #8
   12e1c:	add	sp, sp, #8
   12e20:	ldrd	r4, [sp]
   12e24:	ldr	r6, [sp, #8]
   12e28:	add	sp, sp, #12
   12e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12e30:	ldrb	r3, [r4, #168]	; 0xa8
   12e34:	cmp	r3, #46	; 0x2e
   12e38:	bne	12e5c <__assert_fail@plt+0x1858>
   12e3c:	ldrb	r3, [r4, #169]	; 0xa9
   12e40:	cmp	r3, #0
   12e44:	beq	12e64 <__assert_fail@plt+0x1860>
   12e48:	ldr	r3, [r4, #168]	; 0xa8
   12e4c:	bic	r3, r3, #-16777216	; 0xff000000
   12e50:	bic	r3, r3, #255	; 0xff
   12e54:	cmp	r3, #11776	; 0x2e00
   12e58:	beq	12e64 <__assert_fail@plt+0x1860>
   12e5c:	mov	r0, #1
   12e60:	b	12e1c <__assert_fail@plt+0x1818>
   12e64:	ldr	r3, [r4, #48]	; 0x30
   12e68:	cmp	r3, #0
   12e6c:	moveq	r0, #1
   12e70:	movne	r0, #5
   12e74:	b	12e1c <__assert_fail@plt+0x1818>
   12e78:	bl	11484 <__errno_location@plt>
   12e7c:	ldr	r3, [r0]
   12e80:	b	12db0 <__assert_fail@plt+0x17ac>
   12e84:	mov	r0, #12
   12e88:	b	12e1c <__assert_fail@plt+0x1818>
   12e8c:	movw	r3, #258	; 0x102
   12e90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12e94:	tst	r0, r3
   12e98:	strd	r6, [sp, #8]
   12e9c:	strd	r8, [sp, #16]
   12ea0:	mov	r8, r2
   12ea4:	str	sl, [sp, #24]
   12ea8:	mov	sl, r1
   12eac:	str	lr, [sp, #28]
   12eb0:	beq	12f34 <__assert_fail@plt+0x1930>
   12eb4:	mov	r0, #24
   12eb8:	bl	1bc5c <__assert_fail@plt+0xa658>
   12ebc:	subs	r9, r0, #0
   12ec0:	beq	12f58 <__assert_fail@plt+0x1954>
   12ec4:	ldrd	r6, [r8, #64]	; 0x40
   12ec8:	mov	r1, r9
   12ecc:	ldrd	r4, [r8, #160]	; 0xa0
   12ed0:	ldr	r0, [sl]
   12ed4:	strd	r6, [r9]
   12ed8:	str	r8, [r9, #16]
   12edc:	strd	r4, [r9, #8]
   12ee0:	bl	1628c <__assert_fail@plt+0x4c88>
   12ee4:	cmp	r9, r0
   12ee8:	mov	r4, r0
   12eec:	beq	12f18 <__assert_fail@plt+0x1914>
   12ef0:	mov	r0, r9
   12ef4:	bl	1c300 <__assert_fail@plt+0xacfc>
   12ef8:	cmp	r4, #0
   12efc:	beq	12f58 <__assert_fail@plt+0x1954>
   12f00:	ldr	r3, [r4, #16]
   12f04:	mov	r2, #2
   12f08:	mov	r0, #1
   12f0c:	str	r3, [r8]
   12f10:	strh	r2, [r8, #56]	; 0x38
   12f14:	b	12f1c <__assert_fail@plt+0x1918>
   12f18:	mov	r0, #1
   12f1c:	ldrd	r4, [sp]
   12f20:	ldrd	r6, [sp, #8]
   12f24:	ldrd	r8, [sp, #16]
   12f28:	ldr	sl, [sp, #24]
   12f2c:	add	sp, sp, #28
   12f30:	pop	{pc}		; (ldr pc, [sp], #4)
   12f34:	add	r1, r2, #64	; 0x40
   12f38:	ldr	r0, [sl]
   12f3c:	bl	1becc <__assert_fail@plt+0xa8c8>
   12f40:	cmp	r0, #0
   12f44:	beq	12f18 <__assert_fail@plt+0x1914>
   12f48:	mov	r3, #2
   12f4c:	str	r8, [r8]
   12f50:	strh	r3, [r8, #56]	; 0x38
   12f54:	b	12f1c <__assert_fail@plt+0x1918>
   12f58:	mov	r0, #0
   12f5c:	b	12f1c <__assert_fail@plt+0x1918>
   12f60:	movw	r3, #258	; 0x102
   12f64:	mov	ip, r1
   12f68:	strd	r4, [sp, #-12]!
   12f6c:	tst	r0, r3
   12f70:	str	lr, [sp, #8]
   12f74:	sub	sp, sp, #28
   12f78:	bne	12fc8 <__assert_fail@plt+0x19c4>
   12f7c:	ldr	r3, [r2, #4]
   12f80:	cmp	r3, #0
   12f84:	beq	12fb8 <__assert_fail@plt+0x19b4>
   12f88:	ldr	r1, [r3, #48]	; 0x30
   12f8c:	cmp	r1, #0
   12f90:	blt	12fb8 <__assert_fail@plt+0x19b4>
   12f94:	ldr	ip, [ip]
   12f98:	ldrd	r0, [ip, #16]
   12f9c:	orrs	r1, r0, r1
   12fa0:	beq	13028 <__assert_fail@plt+0x1a24>
   12fa4:	ldrd	r4, [ip]
   12fa8:	ldrd	r0, [r2, #160]	; 0xa0
   12fac:	cmp	r5, r1
   12fb0:	cmpeq	r4, r0
   12fb4:	beq	13000 <__assert_fail@plt+0x19fc>
   12fb8:	add	sp, sp, #28
   12fbc:	ldrd	r4, [sp]
   12fc0:	add	sp, sp, #8
   12fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc8:	ldrd	r4, [r2, #64]	; 0x40
   12fcc:	mov	r1, sp
   12fd0:	ldrd	r2, [r2, #160]	; 0xa0
   12fd4:	ldr	r0, [ip]
   12fd8:	strd	r4, [sp]
   12fdc:	strd	r2, [sp, #8]
   12fe0:	bl	164b0 <__assert_fail@plt+0x4eac>
   12fe4:	cmp	r0, #0
   12fe8:	beq	13028 <__assert_fail@plt+0x1a24>
   12fec:	bl	1c300 <__assert_fail@plt+0xacfc>
   12ff0:	add	sp, sp, #28
   12ff4:	ldrd	r4, [sp]
   12ff8:	add	sp, sp, #8
   12ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   13000:	ldrd	r0, [ip, #8]
   13004:	ldrd	r4, [r2, #64]	; 0x40
   13008:	cmp	r1, r5
   1300c:	cmpeq	r0, r4
   13010:	bne	12fb8 <__assert_fail@plt+0x19b4>
   13014:	ldrd	r0, [r3, #64]	; 0x40
   13018:	ldrd	r2, [r3, #160]	; 0xa0
   1301c:	strd	r2, [ip]
   13020:	strd	r0, [ip, #8]
   13024:	b	12fb8 <__assert_fail@plt+0x19b4>
   13028:	bl	115c8 <abort@plt>
   1302c:	ldr	r3, [r0, #48]	; 0x30
   13030:	strd	r4, [sp, #-16]!
   13034:	add	r5, r0, #60	; 0x3c
   13038:	str	r6, [sp, #8]
   1303c:	str	lr, [sp, #12]
   13040:	ands	r6, r3, #4
   13044:	movne	r6, #0
   13048:	bne	13084 <__assert_fail@plt+0x1a80>
   1304c:	tst	r3, #512	; 0x200
   13050:	mov	r4, r0
   13054:	beq	130b4 <__assert_fail@plt+0x1ab0>
   13058:	mov	r0, r5
   1305c:	ldr	r1, [r4, #32]
   13060:	bl	16824 <__assert_fail@plt+0x5220>
   13064:	cmp	r0, #0
   13068:	bge	130c8 <__assert_fail@plt+0x1ac4>
   1306c:	mvn	r3, #99	; 0x63
   13070:	str	r3, [r4, #32]
   13074:	b	13084 <__assert_fail@plt+0x1a80>
   13078:	bl	1686c <__assert_fail@plt+0x5268>
   1307c:	cmp	r0, #0
   13080:	bge	130ac <__assert_fail@plt+0x1aa8>
   13084:	mov	r0, r5
   13088:	bl	1681c <__assert_fail@plt+0x5218>
   1308c:	cmp	r0, #0
   13090:	mov	r0, r5
   13094:	beq	13078 <__assert_fail@plt+0x1a74>
   13098:	mov	r0, r6
   1309c:	ldrd	r4, [sp]
   130a0:	ldr	r6, [sp, #8]
   130a4:	add	sp, sp, #12
   130a8:	pop	{pc}		; (ldr pc, [sp], #4)
   130ac:	bl	115d4 <close@plt>
   130b0:	b	13084 <__assert_fail@plt+0x1a80>
   130b4:	ldr	r0, [r0, #28]
   130b8:	bl	11568 <fchdir@plt>
   130bc:	adds	r6, r0, #0
   130c0:	movne	r6, #1
   130c4:	b	13084 <__assert_fail@plt+0x1a80>
   130c8:	bl	115d4 <close@plt>
   130cc:	mvn	r3, #99	; 0x63
   130d0:	str	r3, [r4, #32]
   130d4:	b	13084 <__assert_fail@plt+0x1a80>
   130d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   130dc:	mov	r5, r0
   130e0:	mov	r4, r2
   130e4:	strd	r6, [sp, #8]
   130e8:	strd	r8, [sp, #16]
   130ec:	mov	r8, r1
   130f0:	ldr	r9, [r0, #48]	; 0x30
   130f4:	str	sl, [sp, #24]
   130f8:	subs	sl, r3, #0
   130fc:	str	lr, [sp, #28]
   13100:	sub	sp, sp, #104	; 0x68
   13104:	and	r6, r9, #4
   13108:	beq	13204 <__assert_fail@plt+0x1c00>
   1310c:	movw	r1, #56204	; 0xdb8c
   13110:	movt	r1, #1
   13114:	mov	r0, sl
   13118:	bl	11268 <strcmp@plt>
   1311c:	cmp	r0, #0
   13120:	bne	13204 <__assert_fail@plt+0x1c00>
   13124:	cmp	r6, #0
   13128:	bne	13244 <__assert_fail@plt+0x1c40>
   1312c:	cmp	r4, #0
   13130:	bge	13380 <__assert_fail@plt+0x1d7c>
   13134:	tst	r9, #512	; 0x200
   13138:	beq	13288 <__assert_fail@plt+0x1c84>
   1313c:	add	r6, r5, #60	; 0x3c
   13140:	mov	r0, r6
   13144:	bl	1681c <__assert_fail@plt+0x5218>
   13148:	cmp	r0, #0
   1314c:	beq	13308 <__assert_fail@plt+0x1d04>
   13150:	lsl	r2, r9, #11
   13154:	mov	r6, #1
   13158:	and	r2, r2, #32768	; 0x8000
   1315c:	orr	r2, r2, #540672	; 0x84000
   13160:	orr	r2, r2, #2304	; 0x900
   13164:	mov	r1, sl
   13168:	ldr	r0, [r5, #32]
   1316c:	bl	168bc <__assert_fail@plt+0x52b8>
   13170:	mov	r7, r0
   13174:	cmp	r7, #0
   13178:	blt	13378 <__assert_fail@plt+0x1d74>
   1317c:	ldr	r9, [r5, #48]	; 0x30
   13180:	tst	r9, #2
   13184:	beq	13220 <__assert_fail@plt+0x1c1c>
   13188:	mov	r2, sp
   1318c:	mov	r1, r7
   13190:	mov	r0, #3
   13194:	bl	11358 <__fxstat64@plt>
   13198:	cmp	r0, #0
   1319c:	bne	13280 <__assert_fail@plt+0x1c7c>
   131a0:	ldrd	r2, [sp]
   131a4:	ldrd	r0, [r8, #64]	; 0x40
   131a8:	cmp	r1, r3
   131ac:	cmpeq	r0, r2
   131b0:	bne	13274 <__assert_fail@plt+0x1c70>
   131b4:	ldrd	r2, [sp, #96]	; 0x60
   131b8:	ldrd	r0, [r8, #160]	; 0xa0
   131bc:	cmp	r1, r3
   131c0:	cmpeq	r0, r2
   131c4:	bne	13274 <__assert_fail@plt+0x1c70>
   131c8:	ldr	r9, [r5, #48]	; 0x30
   131cc:	tst	r9, #512	; 0x200
   131d0:	bne	132b0 <__assert_fail@plt+0x1cac>
   131d4:	mov	r0, r7
   131d8:	bl	11568 <fchdir@plt>
   131dc:	mov	r9, r0
   131e0:	cmp	r4, #0
   131e4:	bge	13254 <__assert_fail@plt+0x1c50>
   131e8:	bl	11484 <__errno_location@plt>
   131ec:	mov	r4, r0
   131f0:	mov	r0, r7
   131f4:	ldr	r5, [r4]
   131f8:	bl	115d4 <close@plt>
   131fc:	str	r5, [r4]
   13200:	b	13254 <__assert_fail@plt+0x1c50>
   13204:	cmp	r6, #0
   13208:	bne	13244 <__assert_fail@plt+0x1c40>
   1320c:	cmp	r4, #0
   13210:	movge	r7, r4
   13214:	blt	13338 <__assert_fail@plt+0x1d34>
   13218:	tst	r9, #2
   1321c:	bne	13188 <__assert_fail@plt+0x1b84>
   13220:	cmp	sl, #0
   13224:	beq	131cc <__assert_fail@plt+0x1bc8>
   13228:	mov	r0, sl
   1322c:	movw	r1, #56204	; 0xdb8c
   13230:	movt	r1, #1
   13234:	bl	11268 <strcmp@plt>
   13238:	cmp	r0, #0
   1323c:	bne	131cc <__assert_fail@plt+0x1bc8>
   13240:	b	13188 <__assert_fail@plt+0x1b84>
   13244:	mvn	r3, r4
   13248:	lsr	r3, r3, #31
   1324c:	ands	r9, r3, r9, lsr #9
   13250:	bne	132f8 <__assert_fail@plt+0x1cf4>
   13254:	mov	r0, r9
   13258:	add	sp, sp, #104	; 0x68
   1325c:	ldrd	r4, [sp]
   13260:	ldrd	r6, [sp, #8]
   13264:	ldrd	r8, [sp, #16]
   13268:	ldr	sl, [sp, #24]
   1326c:	add	sp, sp, #28
   13270:	pop	{pc}		; (ldr pc, [sp], #4)
   13274:	bl	11484 <__errno_location@plt>
   13278:	mov	r3, #2
   1327c:	str	r3, [r0]
   13280:	mvn	r9, #0
   13284:	b	131e0 <__assert_fail@plt+0x1bdc>
   13288:	lsl	r2, r9, #11
   1328c:	mov	r6, #1
   13290:	and	r2, r2, #32768	; 0x8000
   13294:	orr	r2, r2, #540672	; 0x84000
   13298:	orr	r2, r2, #2304	; 0x900
   1329c:	mov	r1, r2
   132a0:	mov	r0, sl
   132a4:	bl	1c260 <__assert_fail@plt+0xac5c>
   132a8:	mov	r7, r0
   132ac:	b	13174 <__assert_fail@plt+0x1b70>
   132b0:	ldr	r1, [r5, #32]
   132b4:	sub	r3, r1, r7
   132b8:	cmn	r1, #100	; 0x64
   132bc:	clz	r3, r3
   132c0:	lsr	r3, r3, #5
   132c4:	moveq	r3, #0
   132c8:	cmp	r3, #0
   132cc:	bne	13394 <__assert_fail@plt+0x1d90>
   132d0:	cmp	r6, #0
   132d4:	beq	13358 <__assert_fail@plt+0x1d54>
   132d8:	mvn	r3, r1
   132dc:	eor	r9, r9, #4
   132e0:	lsr	r3, r3, #31
   132e4:	ands	r3, r3, r9, lsr #2
   132e8:	bne	13370 <__assert_fail@plt+0x1d6c>
   132ec:	mov	r9, #0
   132f0:	str	r7, [r5, #32]
   132f4:	b	13254 <__assert_fail@plt+0x1c50>
   132f8:	mov	r0, r4
   132fc:	mov	r9, #0
   13300:	bl	115d4 <close@plt>
   13304:	b	13254 <__assert_fail@plt+0x1c50>
   13308:	mov	r0, r6
   1330c:	bl	1686c <__assert_fail@plt+0x5268>
   13310:	ldr	r9, [r5, #48]	; 0x30
   13314:	subs	r7, r0, #0
   13318:	movlt	r6, #1
   1331c:	andlt	r3, r9, #512	; 0x200
   13320:	blt	1333c <__assert_fail@plt+0x1d38>
   13324:	tst	r9, #2
   13328:	mov	r4, r7
   1332c:	mov	r6, #1
   13330:	beq	131cc <__assert_fail@plt+0x1bc8>
   13334:	b	13188 <__assert_fail@plt+0x1b84>
   13338:	and	r3, r9, #512	; 0x200
   1333c:	lsl	r2, r9, #11
   13340:	cmp	r3, #0
   13344:	and	r2, r2, #32768	; 0x8000
   13348:	orr	r2, r2, #540672	; 0x84000
   1334c:	orr	r2, r2, #2304	; 0x900
   13350:	bne	13164 <__assert_fail@plt+0x1b60>
   13354:	b	1329c <__assert_fail@plt+0x1c98>
   13358:	add	r0, r5, #60	; 0x3c
   1335c:	bl	16824 <__assert_fail@plt+0x5220>
   13360:	cmp	r0, #0
   13364:	blt	132ec <__assert_fail@plt+0x1ce8>
   13368:	bl	115d4 <close@plt>
   1336c:	b	132ec <__assert_fail@plt+0x1ce8>
   13370:	mov	r0, r1
   13374:	b	13368 <__assert_fail@plt+0x1d64>
   13378:	mvn	r9, #0
   1337c:	b	13254 <__assert_fail@plt+0x1c50>
   13380:	tst	r9, #2
   13384:	mov	r7, r4
   13388:	mov	r6, #1
   1338c:	beq	13228 <__assert_fail@plt+0x1c24>
   13390:	b	13188 <__assert_fail@plt+0x1b84>
   13394:	bl	115c8 <abort@plt>
   13398:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1339c:	strd	r6, [sp, #8]
   133a0:	mov	r6, r0
   133a4:	strd	sl, [sp, #24]
   133a8:	ldr	fp, [r0]
   133ac:	strd	r8, [sp, #16]
   133b0:	str	lr, [sp, #32]
   133b4:	sub	sp, sp, #76	; 0x4c
   133b8:	str	r1, [sp, #40]	; 0x28
   133bc:	ldr	r0, [fp, #12]
   133c0:	cmp	r0, #0
   133c4:	str	r0, [sp, #48]	; 0x30
   133c8:	beq	13838 <__assert_fail@plt+0x2234>
   133cc:	bl	1155c <dirfd@plt>
   133d0:	cmp	r0, #0
   133d4:	str	r0, [sp, #68]	; 0x44
   133d8:	blt	13dac <__assert_fail@plt+0x27a8>
   133dc:	ldr	r3, [r6, #44]	; 0x2c
   133e0:	cmp	r3, #0
   133e4:	beq	13c58 <__assert_fail@plt+0x2654>
   133e8:	ldr	r3, [r6, #48]	; 0x30
   133ec:	mvn	r2, #0
   133f0:	str	r2, [sp, #28]
   133f4:	mov	r2, #1
   133f8:	str	r2, [sp, #60]	; 0x3c
   133fc:	ldr	r1, [fp, #28]
   13400:	ldr	r0, [fp, #40]	; 0x28
   13404:	sub	r2, r0, #1
   13408:	str	r0, [sp, #4]
   1340c:	ldrb	r1, [r1, r2]
   13410:	cmp	r1, #47	; 0x2f
   13414:	beq	13424 <__assert_fail@plt+0x1e20>
   13418:	add	r1, r0, #1
   1341c:	mov	r2, r0
   13420:	str	r1, [sp, #4]
   13424:	ands	r3, r3, #4
   13428:	streq	r3, [sp, #32]
   1342c:	beq	13448 <__assert_fail@plt+0x1e44>
   13430:	ldr	r3, [r6, #24]
   13434:	mov	r0, #47	; 0x2f
   13438:	add	r1, r3, r2
   1343c:	strb	r0, [r3, r2]
   13440:	add	r3, r1, #1
   13444:	str	r3, [sp, #32]
   13448:	movw	r3, #6548	; 0x1994
   1344c:	movt	r3, #258	; 0x102
   13450:	ldr	r2, [r6, #36]	; 0x24
   13454:	movw	r0, #19778	; 0x4d42
   13458:	movt	r0, #65363	; 0xff53
   1345c:	str	fp, [sp, #16]
   13460:	str	r3, [sp, #52]	; 0x34
   13464:	mov	r1, #0
   13468:	ldr	r3, [fp, #48]	; 0x30
   1346c:	mov	r9, r1
   13470:	mov	fp, r1
   13474:	str	r0, [sp, #56]	; 0x38
   13478:	ldr	r0, [sp, #4]
   1347c:	str	r1, [sp, #12]
   13480:	str	r1, [sp, #36]	; 0x24
   13484:	add	r3, r3, #1
   13488:	sub	r2, r2, r0
   1348c:	str	r1, [sp, #44]	; 0x2c
   13490:	str	r2, [sp, #20]
   13494:	str	r3, [sp, #24]
   13498:	b	134b0 <__assert_fail@plt+0x1eac>
   1349c:	ldr	r3, [sp, #28]
   134a0:	add	r9, r9, #1
   134a4:	cmp	r9, r3
   134a8:	bcs	13994 <__assert_fail@plt+0x2390>
   134ac:	mov	fp, r4
   134b0:	ldr	r3, [sp, #16]
   134b4:	ldr	r4, [r3, #12]
   134b8:	cmp	r4, #0
   134bc:	beq	13ad4 <__assert_fail@plt+0x24d0>
   134c0:	bl	11484 <__errno_location@plt>
   134c4:	mov	sl, r0
   134c8:	mov	r3, #0
   134cc:	mov	r0, r4
   134d0:	str	r3, [sl]
   134d4:	bl	11544 <readdir64@plt>
   134d8:	subs	r7, r0, #0
   134dc:	beq	13ba8 <__assert_fail@plt+0x25a4>
   134e0:	ldr	r3, [r6, #48]	; 0x30
   134e4:	tst	r3, #32
   134e8:	bne	134f8 <__assert_fail@plt+0x1ef4>
   134ec:	ldrb	r3, [r7, #19]
   134f0:	cmp	r3, #46	; 0x2e
   134f4:	beq	136f8 <__assert_fail@plt+0x20f4>
   134f8:	add	r1, r7, #19
   134fc:	mov	r0, r1
   13500:	str	r1, [sp, #8]
   13504:	bl	11460 <strlen@plt>
   13508:	mov	r5, r0
   1350c:	add	r0, r0, #176	; 0xb0
   13510:	bic	r0, r0, #7
   13514:	bl	1bc5c <__assert_fail@plt+0xa658>
   13518:	subs	r4, r0, #0
   1351c:	beq	1372c <__assert_fail@plt+0x2128>
   13520:	add	r8, r4, #168	; 0xa8
   13524:	mov	r2, r5
   13528:	ldr	r1, [sp, #8]
   1352c:	mov	r0, r8
   13530:	bl	112b0 <memcpy@plt>
   13534:	ldr	r3, [sp, #20]
   13538:	mov	r1, #0
   1353c:	add	r0, r4, r5
   13540:	mov	ip, #196608	; 0x30000
   13544:	ldr	r2, [r6, #24]
   13548:	strb	r1, [r0, #168]	; 0xa8
   1354c:	str	r1, [r4, #12]
   13550:	cmp	r3, r5
   13554:	str	r1, [r4, #16]
   13558:	str	r1, [r4, #20]
   1355c:	str	r2, [r4, #28]
   13560:	str	r1, [r4, #32]
   13564:	str	r6, [r4, #44]	; 0x2c
   13568:	str	r5, [r4, #52]	; 0x34
   1356c:	str	ip, [r4, #58]	; 0x3a
   13570:	bls	13634 <__assert_fail@plt+0x2030>
   13574:	ldr	r3, [sp, #4]
   13578:	adds	r5, r5, r3
   1357c:	bcs	13e94 <__assert_fail@plt+0x2890>
   13580:	ldr	r3, [sp, #24]
   13584:	str	r5, [r4, #40]	; 0x28
   13588:	ldr	ip, [r6]
   1358c:	ldr	r1, [r6, #48]	; 0x30
   13590:	str	r3, [r4, #48]	; 0x30
   13594:	ldrd	r2, [r7]
   13598:	str	ip, [r4, #4]
   1359c:	tst	r1, #4
   135a0:	streq	r8, [r4, #24]
   135a4:	strd	r2, [r4, #160]	; 0xa0
   135a8:	bne	136d4 <__assert_fail@plt+0x20d0>
   135ac:	ldr	r3, [r6, #44]	; 0x2c
   135b0:	cmp	r3, #0
   135b4:	beq	135c0 <__assert_fail@plt+0x1fbc>
   135b8:	ands	r3, r1, #1024	; 0x400
   135bc:	beq	13718 <__assert_fail@plt+0x2114>
   135c0:	ldrb	r3, [r7, #18]
   135c4:	tst	r1, #8
   135c8:	sub	r0, r3, #1
   135cc:	beq	135d8 <__assert_fail@plt+0x1fd4>
   135d0:	tst	r3, #251	; 0xfb
   135d4:	bne	137d4 <__assert_fail@plt+0x21d0>
   135d8:	mov	r3, #11
   135dc:	cmp	r0, r3
   135e0:	strh	r3, [r4, #56]	; 0x38
   135e4:	bls	136b8 <__assert_fail@plt+0x20b4>
   135e8:	mov	r1, #0
   135ec:	mov	r2, #2
   135f0:	mov	r3, #0
   135f4:	str	r1, [r4, #80]	; 0x50
   135f8:	strd	r2, [r4, #112]	; 0x70
   135fc:	ldr	r2, [sp, #12]
   13600:	mov	r3, #0
   13604:	str	r3, [r4, #8]
   13608:	cmp	r2, r3
   1360c:	movw	r3, #10000	; 0x2710
   13610:	strne	r4, [fp, #8]
   13614:	streq	r4, [sp, #12]
   13618:	cmp	r9, r3
   1361c:	bne	1349c <__assert_fail@plt+0x1e98>
   13620:	ldr	r5, [r6, #44]	; 0x2c
   13624:	cmp	r5, #0
   13628:	beq	13948 <__assert_fail@plt+0x2344>
   1362c:	movw	r9, #10001	; 0x2711
   13630:	b	134ac <__assert_fail@plt+0x1ea8>
   13634:	ldr	ip, [r6, #36]	; 0x24
   13638:	ldr	r3, [sp, #4]
   1363c:	add	r0, ip, #256	; 0x100
   13640:	add	r0, r0, #1
   13644:	add	r0, r0, r3
   13648:	add	r0, r0, r5
   1364c:	cmp	ip, r0
   13650:	bhi	13810 <__assert_fail@plt+0x220c>
   13654:	mov	r1, r0
   13658:	str	r0, [r6, #36]	; 0x24
   1365c:	mov	r0, r2
   13660:	str	r2, [sp, #8]
   13664:	bl	1bc98 <__assert_fail@plt+0xa694>
   13668:	cmp	r0, #0
   1366c:	ldr	r2, [sp, #8]
   13670:	beq	13c04 <__assert_fail@plt+0x2600>
   13674:	cmp	r2, r0
   13678:	str	r0, [r6, #24]
   1367c:	beq	1369c <__assert_fail@plt+0x2098>
   13680:	ldr	r2, [r6, #48]	; 0x30
   13684:	tst	r2, #4
   13688:	ldrne	r3, [sp, #4]
   1368c:	addne	r3, r0, r3
   13690:	strne	r3, [sp, #32]
   13694:	mov	r3, #1
   13698:	str	r3, [sp, #36]	; 0x24
   1369c:	ldr	r3, [sp, #4]
   136a0:	ldr	r2, [r6, #36]	; 0x24
   136a4:	sub	r3, r2, r3
   136a8:	str	r3, [sp, #20]
   136ac:	b	13574 <__assert_fail@plt+0x1f70>
   136b0:	mov	r3, #11
   136b4:	strh	r3, [r4, #56]	; 0x38
   136b8:	movw	r3, #56156	; 0xdb5c
   136bc:	movt	r3, #1
   136c0:	ldr	r1, [r3, r0, lsl #2]
   136c4:	mov	r2, #2
   136c8:	mov	r3, #0
   136cc:	str	r1, [r4, #80]	; 0x50
   136d0:	b	135f8 <__assert_fail@plt+0x1ff4>
   136d4:	ldr	ip, [r4, #28]
   136d8:	mov	r1, r8
   136dc:	ldr	r2, [r4, #52]	; 0x34
   136e0:	ldr	r0, [sp, #32]
   136e4:	str	ip, [r4, #24]
   136e8:	add	r2, r2, #1
   136ec:	bl	1128c <memmove@plt>
   136f0:	ldr	r1, [r6, #48]	; 0x30
   136f4:	b	135ac <__assert_fail@plt+0x1fa8>
   136f8:	ldrb	r3, [r7, #20]
   136fc:	cmp	r3, #0
   13700:	beq	13710 <__assert_fail@plt+0x210c>
   13704:	ldrh	r3, [r7, #20]
   13708:	cmp	r3, #46	; 0x2e
   1370c:	bne	134f8 <__assert_fail@plt+0x1ef4>
   13710:	mov	r4, fp
   13714:	b	134ac <__assert_fail@plt+0x1ea8>
   13718:	mov	r2, r4
   1371c:	ldr	r0, [r6, #32]
   13720:	bl	12d30 <__assert_fail@plt+0x172c>
   13724:	strh	r0, [r4, #56]	; 0x38
   13728:	b	135fc <__assert_fail@plt+0x1ff8>
   1372c:	ldr	r5, [sl]
   13730:	ldr	r8, [sp, #12]
   13734:	ldr	fp, [sp, #16]
   13738:	mov	r0, r4
   1373c:	bl	1c300 <__assert_fail@plt+0xacfc>
   13740:	cmp	r8, #0
   13744:	bne	137b0 <__assert_fail@plt+0x21ac>
   13748:	ldr	r0, [fp, #12]
   1374c:	bl	115ec <closedir@plt>
   13750:	ldr	r3, [r6, #48]	; 0x30
   13754:	mov	r2, #0
   13758:	mov	r1, #7
   1375c:	mov	r8, r2
   13760:	str	r2, [fp, #12]
   13764:	strh	r1, [fp, #56]	; 0x38
   13768:	orr	r3, r3, #8192	; 0x2000
   1376c:	str	r3, [r6, #48]	; 0x30
   13770:	str	r5, [sl]
   13774:	mov	r0, r8
   13778:	add	sp, sp, #76	; 0x4c
   1377c:	ldrd	r4, [sp]
   13780:	ldrd	r6, [sp, #8]
   13784:	ldrd	r8, [sp, #16]
   13788:	ldrd	sl, [sp, #24]
   1378c:	add	sp, sp, #32
   13790:	pop	{pc}		; (ldr pc, [sp], #4)
   13794:	mov	r0, r3
   13798:	bl	115ec <closedir@plt>
   1379c:	mov	r0, r8
   137a0:	bl	1c300 <__assert_fail@plt+0xacfc>
   137a4:	cmp	r4, #0
   137a8:	beq	13748 <__assert_fail@plt+0x2144>
   137ac:	mov	r8, r4
   137b0:	mov	r0, r8
   137b4:	ldr	r4, [r8, #8]
   137b8:	ldr	r3, [r8, #12]
   137bc:	cmp	r3, #0
   137c0:	bne	13794 <__assert_fail@plt+0x2190>
   137c4:	bl	1c300 <__assert_fail@plt+0xacfc>
   137c8:	cmp	r4, #0
   137cc:	bne	137ac <__assert_fail@plt+0x21a8>
   137d0:	b	13748 <__assert_fail@plt+0x2144>
   137d4:	ubfx	r2, r1, #4, #1
   137d8:	cmp	r3, #10
   137dc:	moveq	r3, r2
   137e0:	orrne	r3, r2, #1
   137e4:	cmp	r3, #0
   137e8:	beq	136b0 <__assert_fail@plt+0x20ac>
   137ec:	mov	r3, #11
   137f0:	cmp	r0, r3
   137f4:	strh	r3, [r4, #56]	; 0x38
   137f8:	bls	13a50 <__assert_fail@plt+0x244c>
   137fc:	mov	r1, #0
   13800:	mov	r2, #1
   13804:	mov	r3, #0
   13808:	str	r1, [r4, #80]	; 0x50
   1380c:	b	135f8 <__assert_fail@plt+0x1ff4>
   13810:	mov	r0, r2
   13814:	ldr	r8, [sp, #12]
   13818:	ldr	fp, [sp, #16]
   1381c:	bl	1c300 <__assert_fail@plt+0xacfc>
   13820:	mov	r3, #36	; 0x24
   13824:	mov	r1, #0
   13828:	mov	r5, r3
   1382c:	str	r1, [r6, #24]
   13830:	str	r3, [sl]
   13834:	b	13738 <__assert_fail@plt+0x2134>
   13838:	ldr	r3, [r6, #48]	; 0x30
   1383c:	ldr	r1, [fp, #24]
   13840:	and	r2, r3, #516	; 0x204
   13844:	cmp	r2, #512	; 0x200
   13848:	ldreq	r0, [r6, #32]
   1384c:	mvnne	r0, #99	; 0x63
   13850:	ands	r2, r3, #16
   13854:	beq	13864 <__assert_fail@plt+0x2260>
   13858:	tst	r3, #1
   1385c:	moveq	r2, #32768	; 0x8000
   13860:	bne	13a6c <__assert_fail@plt+0x2468>
   13864:	add	r3, sp, #68	; 0x44
   13868:	bl	168fc <__assert_fail@plt+0x52f8>
   1386c:	cmp	r0, #0
   13870:	mov	r8, r0
   13874:	str	r0, [fp, #12]
   13878:	beq	13e00 <__assert_fail@plt+0x27fc>
   1387c:	ldrh	r3, [fp, #56]	; 0x38
   13880:	ldr	r0, [r6, #48]	; 0x30
   13884:	cmp	r3, #11
   13888:	beq	13d40 <__assert_fail@plt+0x273c>
   1388c:	tst	r0, #256	; 0x100
   13890:	bne	13c84 <__assert_fail@plt+0x2680>
   13894:	ldr	r2, [r6, #44]	; 0x2c
   13898:	movw	r3, #34464	; 0x86a0
   1389c:	movt	r3, #1
   138a0:	cmp	r2, #0
   138a4:	mvnne	r3, #0
   138a8:	str	r3, [sp, #28]
   138ac:	ldr	r3, [sp, #40]	; 0x28
   138b0:	cmp	r3, #2
   138b4:	beq	13c74 <__assert_fail@plt+0x2670>
   138b8:	ldr	r3, [r6, #48]	; 0x30
   138bc:	ldr	r0, [sp, #68]	; 0x44
   138c0:	and	r3, r3, #56	; 0x38
   138c4:	cmp	r3, #24
   138c8:	beq	13a7c <__assert_fail@plt+0x2478>
   138cc:	ldr	r3, [sp, #40]	; 0x28
   138d0:	sub	r4, r3, #3
   138d4:	clz	r4, r4
   138d8:	lsr	r4, r4, #5
   138dc:	ldr	r3, [r6, #48]	; 0x30
   138e0:	tst	r3, #512	; 0x200
   138e4:	bne	13dec <__assert_fail@plt+0x27e8>
   138e8:	cmp	r0, #0
   138ec:	bge	13d80 <__assert_fail@plt+0x277c>
   138f0:	cmp	r4, #0
   138f4:	beq	13904 <__assert_fail@plt+0x2300>
   138f8:	bl	11484 <__errno_location@plt>
   138fc:	ldr	r3, [r0]
   13900:	str	r3, [fp, #32]
   13904:	ldrh	r3, [fp, #58]	; 0x3a
   13908:	ldr	r0, [fp, #12]
   1390c:	orr	r3, r3, #1
   13910:	strh	r3, [fp, #58]	; 0x3a
   13914:	bl	115ec <closedir@plt>
   13918:	ldr	r3, [r6, #48]	; 0x30
   1391c:	mov	r2, #0
   13920:	str	r2, [fp, #12]
   13924:	tst	r3, #512	; 0x200
   13928:	beq	13938 <__assert_fail@plt+0x2334>
   1392c:	ldr	r0, [sp, #68]	; 0x44
   13930:	cmp	r0, r2
   13934:	bge	13de0 <__assert_fail@plt+0x27dc>
   13938:	mov	r2, #0
   1393c:	str	r2, [fp, #12]
   13940:	str	r2, [sp, #60]	; 0x3c
   13944:	b	133fc <__assert_fail@plt+0x1df8>
   13948:	ldr	r0, [sp, #16]
   1394c:	ldr	r1, [sp, #68]	; 0x44
   13950:	bl	12c10 <__assert_fail@plt+0x160c>
   13954:	movw	r3, #26985	; 0x6969
   13958:	cmp	r0, r3
   1395c:	beq	13980 <__assert_fail@plt+0x237c>
   13960:	ldr	r3, [sp, #52]	; 0x34
   13964:	cmp	r0, r3
   13968:	beq	13980 <__assert_fail@plt+0x237c>
   1396c:	ldr	r3, [sp, #56]	; 0x38
   13970:	cmp	r0, r3
   13974:	movne	r3, #1
   13978:	strne	r3, [sp, #44]	; 0x2c
   1397c:	bne	1362c <__assert_fail@plt+0x2028>
   13980:	ldr	r3, [sp, #28]
   13984:	add	r9, r9, #1
   13988:	str	r5, [sp, #44]	; 0x2c
   1398c:	cmp	r9, r3
   13990:	bcc	134ac <__assert_fail@plt+0x1ea8>
   13994:	ldr	r8, [sp, #12]
   13998:	ldr	r3, [sp, #36]	; 0x24
   1399c:	ldr	fp, [sp, #16]
   139a0:	cmp	r3, #0
   139a4:	beq	13ae8 <__assert_fail@plt+0x24e4>
   139a8:	ldr	r3, [r6, #4]
   139ac:	ldr	r1, [r6, #24]
   139b0:	cmp	r3, #0
   139b4:	beq	139e8 <__assert_fail@plt+0x23e4>
   139b8:	ldr	r2, [r3, #24]
   139bc:	add	r0, r3, #168	; 0xa8
   139c0:	cmp	r2, r0
   139c4:	beq	13bf0 <__assert_fail@plt+0x25ec>
   139c8:	ldr	r0, [r3, #28]
   139cc:	str	r1, [r3, #28]
   139d0:	sub	r2, r2, r0
   139d4:	add	r2, r1, r2
   139d8:	str	r2, [r3, #24]
   139dc:	ldr	r3, [r3, #8]
   139e0:	cmp	r3, #0
   139e4:	bne	139b8 <__assert_fail@plt+0x23b4>
   139e8:	ldr	r3, [r8, #48]	; 0x30
   139ec:	cmp	r3, #0
   139f0:	movge	r3, r8
   139f4:	bge	13a0c <__assert_fail@plt+0x2408>
   139f8:	b	13ae8 <__assert_fail@plt+0x24e4>
   139fc:	ldr	r3, [r2, #48]	; 0x30
   13a00:	cmp	r3, #0
   13a04:	blt	13ae8 <__assert_fail@plt+0x24e4>
   13a08:	mov	r3, r2
   13a0c:	ldr	r2, [r3, #24]
   13a10:	add	r0, r3, #168	; 0xa8
   13a14:	cmp	r2, r0
   13a18:	beq	13a2c <__assert_fail@plt+0x2428>
   13a1c:	ldr	r0, [r3, #28]
   13a20:	sub	r2, r2, r0
   13a24:	add	r2, r1, r2
   13a28:	str	r2, [r3, #24]
   13a2c:	ldr	r2, [r3, #8]
   13a30:	str	r1, [r3, #28]
   13a34:	cmp	r2, #0
   13a38:	bne	139fc <__assert_fail@plt+0x23f8>
   13a3c:	ldr	r2, [r3, #4]
   13a40:	ldr	r3, [r2, #48]	; 0x30
   13a44:	cmp	r3, #0
   13a48:	bge	13a08 <__assert_fail@plt+0x2404>
   13a4c:	b	13ae8 <__assert_fail@plt+0x24e4>
   13a50:	movw	r3, #56156	; 0xdb5c
   13a54:	movt	r3, #1
   13a58:	ldr	r1, [r3, r0, lsl #2]
   13a5c:	mov	r2, #1
   13a60:	mov	r3, #0
   13a64:	str	r1, [r4, #80]	; 0x50
   13a68:	b	135f8 <__assert_fail@plt+0x1ff4>
   13a6c:	ldr	r2, [fp, #48]	; 0x30
   13a70:	cmp	r2, #0
   13a74:	movne	r2, #32768	; 0x8000
   13a78:	b	13864 <__assert_fail@plt+0x2260>
   13a7c:	ldr	r3, [fp, #84]	; 0x54
   13a80:	cmp	r3, #2
   13a84:	bne	138cc <__assert_fail@plt+0x22c8>
   13a88:	mov	r1, r0
   13a8c:	mov	r0, fp
   13a90:	bl	12c10 <__assert_fail@plt+0x160c>
   13a94:	movw	r3, #26985	; 0x6969
   13a98:	cmp	r0, r3
   13a9c:	beq	13e8c <__assert_fail@plt+0x2888>
   13aa0:	bgt	13e70 <__assert_fail@plt+0x286c>
   13aa4:	movw	r3, #19778	; 0x4d42
   13aa8:	movt	r3, #65363	; 0xff53
   13aac:	cmp	r0, r3
   13ab0:	beq	13e8c <__assert_fail@plt+0x2888>
   13ab4:	cmp	r0, #0
   13ab8:	beq	13e8c <__assert_fail@plt+0x2888>
   13abc:	ldr	r3, [sp, #40]	; 0x28
   13ac0:	cmp	r3, #3
   13ac4:	bne	13c74 <__assert_fail@plt+0x2670>
   13ac8:	mov	r4, #0
   13acc:	ldr	r0, [sp, #68]	; 0x44
   13ad0:	b	138dc <__assert_fail@plt+0x22d8>
   13ad4:	ldr	r8, [sp, #12]
   13ad8:	mov	fp, r3
   13adc:	ldr	r3, [sp, #36]	; 0x24
   13ae0:	cmp	r3, #0
   13ae4:	bne	139a8 <__assert_fail@plt+0x23a4>
   13ae8:	ldr	r3, [r6, #48]	; 0x30
   13aec:	tst	r3, #4
   13af0:	beq	13b20 <__assert_fail@plt+0x251c>
   13af4:	ldr	r2, [sp, #4]
   13af8:	ldr	r3, [r6, #36]	; 0x24
   13afc:	cmp	r9, #0
   13b00:	cmpne	r3, r2
   13b04:	bne	13b14 <__assert_fail@plt+0x2510>
   13b08:	ldr	r3, [sp, #32]
   13b0c:	sub	r3, r3, #1
   13b10:	str	r3, [sp, #32]
   13b14:	ldr	r2, [sp, #32]
   13b18:	mov	r3, #0
   13b1c:	strb	r3, [r2]
   13b20:	ldr	r2, [sp, #48]	; 0x30
   13b24:	ldr	r3, [sp, #60]	; 0x3c
   13b28:	cmp	r2, #0
   13b2c:	movne	r3, #0
   13b30:	cmp	r3, #0
   13b34:	beq	13b6c <__assert_fail@plt+0x2568>
   13b38:	ldr	r3, [sp, #40]	; 0x28
   13b3c:	cmp	r9, #0
   13b40:	cmpne	r3, #1
   13b44:	bne	13b74 <__assert_fail@plt+0x2570>
   13b48:	ldr	r3, [fp, #48]	; 0x30
   13b4c:	cmp	r3, #0
   13b50:	bne	13d5c <__assert_fail@plt+0x2758>
   13b54:	mov	r0, r6
   13b58:	bl	1302c <__assert_fail@plt+0x1a28>
   13b5c:	adds	r0, r0, #0
   13b60:	movne	r0, #1
   13b64:	cmp	r0, #0
   13b68:	bne	13e10 <__assert_fail@plt+0x280c>
   13b6c:	cmp	r9, #0
   13b70:	beq	13cd0 <__assert_fail@plt+0x26cc>
   13b74:	ldr	r3, [sp, #44]	; 0x2c
   13b78:	cmp	r3, #0
   13b7c:	bne	13c2c <__assert_fail@plt+0x2628>
   13b80:	ldr	r3, [r6, #44]	; 0x2c
   13b84:	cmp	r3, #0
   13b88:	cmpne	r9, #1
   13b8c:	beq	13774 <__assert_fail@plt+0x2170>
   13b90:	mov	r1, r8
   13b94:	mov	r2, r9
   13b98:	mov	r0, r6
   13b9c:	bl	12b24 <__assert_fail@plt+0x1520>
   13ba0:	mov	r8, r0
   13ba4:	b	13774 <__assert_fail@plt+0x2170>
   13ba8:	ldr	r3, [sl]
   13bac:	ldr	r8, [sp, #12]
   13bb0:	ldr	fp, [sp, #16]
   13bb4:	cmp	r3, #0
   13bb8:	beq	13bd4 <__assert_fail@plt+0x25d0>
   13bbc:	ldr	r2, [sp, #48]	; 0x30
   13bc0:	str	r3, [fp, #32]
   13bc4:	orrs	r2, r2, r9
   13bc8:	moveq	r3, #4
   13bcc:	movne	r3, #7
   13bd0:	strh	r3, [fp, #56]	; 0x38
   13bd4:	ldr	r0, [fp, #12]
   13bd8:	cmp	r0, #0
   13bdc:	beq	13adc <__assert_fail@plt+0x24d8>
   13be0:	bl	115ec <closedir@plt>
   13be4:	mov	r3, #0
   13be8:	str	r3, [fp, #12]
   13bec:	b	13adc <__assert_fail@plt+0x24d8>
   13bf0:	str	r1, [r3, #28]
   13bf4:	ldr	r3, [r3, #8]
   13bf8:	cmp	r3, #0
   13bfc:	bne	139b8 <__assert_fail@plt+0x23b4>
   13c00:	b	139e8 <__assert_fail@plt+0x23e4>
   13c04:	mov	r1, r0
   13c08:	ldr	r0, [r6, #24]
   13c0c:	str	r1, [sp, #4]
   13c10:	ldr	r8, [sp, #12]
   13c14:	ldr	fp, [sp, #16]
   13c18:	bl	1c300 <__assert_fail@plt+0xacfc>
   13c1c:	ldr	r1, [sp, #4]
   13c20:	ldr	r5, [sl]
   13c24:	str	r1, [r6, #24]
   13c28:	b	13738 <__assert_fail@plt+0x2134>
   13c2c:	movw	r3, #10996	; 0x2af4
   13c30:	movt	r3, #1
   13c34:	mov	r1, r8
   13c38:	mov	r2, r9
   13c3c:	mov	r0, r6
   13c40:	str	r3, [r6, #44]	; 0x2c
   13c44:	bl	12b24 <__assert_fail@plt+0x1520>
   13c48:	mov	r3, #0
   13c4c:	mov	r8, r0
   13c50:	str	r3, [r6, #44]	; 0x2c
   13c54:	b	13774 <__assert_fail@plt+0x2170>
   13c58:	movw	r3, #34464	; 0x86a0
   13c5c:	movt	r3, #1
   13c60:	mov	r2, #1
   13c64:	str	r3, [sp, #28]
   13c68:	str	r2, [sp, #60]	; 0x3c
   13c6c:	ldr	r3, [r6, #48]	; 0x30
   13c70:	b	133fc <__assert_fail@plt+0x1df8>
   13c74:	mov	r3, #0
   13c78:	str	r3, [sp, #60]	; 0x3c
   13c7c:	ldr	r3, [r6, #48]	; 0x30
   13c80:	b	133fc <__assert_fail@plt+0x1df8>
   13c84:	add	r4, r6, #56	; 0x38
   13c88:	mov	r2, fp
   13c8c:	mov	r1, r4
   13c90:	bl	12f60 <__assert_fail@plt+0x195c>
   13c94:	mov	r3, #0
   13c98:	mov	r2, fp
   13c9c:	ldr	r0, [r6, #32]
   13ca0:	ldr	r1, [r6, #48]	; 0x30
   13ca4:	bl	12d30 <__assert_fail@plt+0x172c>
   13ca8:	mov	r2, fp
   13cac:	mov	r1, r4
   13cb0:	ldr	r0, [r6, #48]	; 0x30
   13cb4:	bl	12e8c <__assert_fail@plt+0x1888>
   13cb8:	subs	r8, r0, #0
   13cbc:	bne	13894 <__assert_fail@plt+0x2290>
   13cc0:	bl	11484 <__errno_location@plt>
   13cc4:	mov	r3, #12
   13cc8:	str	r3, [r0]
   13ccc:	b	13774 <__assert_fail@plt+0x2170>
   13cd0:	ldr	r3, [sp, #40]	; 0x28
   13cd4:	cmp	r3, #3
   13cd8:	bne	13cf0 <__assert_fail@plt+0x26ec>
   13cdc:	ldrh	r3, [fp, #56]	; 0x38
   13ce0:	cmp	r3, #4
   13ce4:	cmpne	r3, #7
   13ce8:	movne	r3, #6
   13cec:	strhne	r3, [fp, #56]	; 0x38
   13cf0:	cmp	r8, #0
   13cf4:	bne	13d18 <__assert_fail@plt+0x2714>
   13cf8:	b	13d38 <__assert_fail@plt+0x2734>
   13cfc:	mov	r0, r3
   13d00:	bl	115ec <closedir@plt>
   13d04:	mov	r0, r8
   13d08:	bl	1c300 <__assert_fail@plt+0xacfc>
   13d0c:	cmp	r4, #0
   13d10:	beq	13d38 <__assert_fail@plt+0x2734>
   13d14:	mov	r8, r4
   13d18:	mov	r0, r8
   13d1c:	ldr	r4, [r8, #8]
   13d20:	ldr	r3, [r8, #12]
   13d24:	cmp	r3, #0
   13d28:	bne	13cfc <__assert_fail@plt+0x26f8>
   13d2c:	bl	1c300 <__assert_fail@plt+0xacfc>
   13d30:	cmp	r4, #0
   13d34:	bne	13d14 <__assert_fail@plt+0x2710>
   13d38:	mov	r8, #0
   13d3c:	b	13774 <__assert_fail@plt+0x2170>
   13d40:	mov	r1, r0
   13d44:	mov	r3, #0
   13d48:	ldr	r0, [r6, #32]
   13d4c:	mov	r2, fp
   13d50:	bl	12d30 <__assert_fail@plt+0x172c>
   13d54:	strh	r0, [fp, #56]	; 0x38
   13d58:	b	13894 <__assert_fail@plt+0x2290>
   13d5c:	movw	r3, #56204	; 0xdb8c
   13d60:	movt	r3, #1
   13d64:	ldr	r1, [fp, #4]
   13d68:	mvn	r2, #0
   13d6c:	mov	r0, r6
   13d70:	bl	130d8 <__assert_fail@plt+0x1ad4>
   13d74:	adds	r0, r0, #0
   13d78:	movne	r0, #1
   13d7c:	b	13b64 <__assert_fail@plt+0x2560>
   13d80:	mov	r2, r0
   13d84:	mov	r3, #0
   13d88:	mov	r1, fp
   13d8c:	mov	r0, r6
   13d90:	bl	130d8 <__assert_fail@plt+0x1ad4>
   13d94:	cmp	r0, #0
   13d98:	bne	138f0 <__assert_fail@plt+0x22ec>
   13d9c:	mov	r3, #1
   13da0:	str	r3, [sp, #60]	; 0x3c
   13da4:	ldr	r3, [r6, #48]	; 0x30
   13da8:	b	133fc <__assert_fail@plt+0x1df8>
   13dac:	ldr	r0, [fp, #12]
   13db0:	mov	r8, #0
   13db4:	bl	115ec <closedir@plt>
   13db8:	ldr	r3, [sp, #40]	; 0x28
   13dbc:	str	r8, [fp, #12]
   13dc0:	cmp	r3, #3
   13dc4:	bne	13d38 <__assert_fail@plt+0x2734>
   13dc8:	mov	r3, #4
   13dcc:	strh	r3, [fp, #56]	; 0x38
   13dd0:	bl	11484 <__errno_location@plt>
   13dd4:	ldr	r3, [r0]
   13dd8:	str	r3, [fp, #32]
   13ddc:	b	13774 <__assert_fail@plt+0x2170>
   13de0:	bl	115d4 <close@plt>
   13de4:	ldr	r3, [r6, #48]	; 0x30
   13de8:	b	13938 <__assert_fail@plt+0x2334>
   13dec:	mov	r2, #3
   13df0:	movw	r1, #1030	; 0x406
   13df4:	bl	1c078 <__assert_fail@plt+0xaa74>
   13df8:	str	r0, [sp, #68]	; 0x44
   13dfc:	b	138e8 <__assert_fail@plt+0x22e4>
   13e00:	ldr	r3, [sp, #40]	; 0x28
   13e04:	cmp	r3, #3
   13e08:	bne	13d38 <__assert_fail@plt+0x2734>
   13e0c:	b	13dc8 <__assert_fail@plt+0x27c4>
   13e10:	ldr	r3, [r6, #48]	; 0x30
   13e14:	mov	r2, #7
   13e18:	cmp	r8, #0
   13e1c:	strh	r2, [fp, #56]	; 0x38
   13e20:	orr	r3, r3, #8192	; 0x2000
   13e24:	str	r3, [r6, #48]	; 0x30
   13e28:	bne	13e4c <__assert_fail@plt+0x2848>
   13e2c:	b	13d38 <__assert_fail@plt+0x2734>
   13e30:	mov	r0, r3
   13e34:	bl	115ec <closedir@plt>
   13e38:	mov	r0, r8
   13e3c:	bl	1c300 <__assert_fail@plt+0xacfc>
   13e40:	cmp	r4, #0
   13e44:	beq	13d38 <__assert_fail@plt+0x2734>
   13e48:	mov	r8, r4
   13e4c:	mov	r0, r8
   13e50:	ldr	r4, [r8, #8]
   13e54:	ldr	r3, [r8, #12]
   13e58:	cmp	r3, #0
   13e5c:	bne	13e30 <__assert_fail@plt+0x282c>
   13e60:	bl	1c300 <__assert_fail@plt+0xacfc>
   13e64:	cmp	r4, #0
   13e68:	bne	13e48 <__assert_fail@plt+0x2844>
   13e6c:	b	13d38 <__assert_fail@plt+0x2734>
   13e70:	movw	r3, #40864	; 0x9fa0
   13e74:	cmp	r0, r3
   13e78:	beq	13e8c <__assert_fail@plt+0x2888>
   13e7c:	movw	r3, #16719	; 0x414f
   13e80:	movt	r3, #21318	; 0x5346
   13e84:	cmp	r0, r3
   13e88:	bne	13abc <__assert_fail@plt+0x24b8>
   13e8c:	ldr	r0, [sp, #68]	; 0x44
   13e90:	b	138cc <__assert_fail@plt+0x22c8>
   13e94:	ldr	r8, [sp, #12]
   13e98:	mov	r0, r4
   13e9c:	ldr	fp, [sp, #16]
   13ea0:	bl	1c300 <__assert_fail@plt+0xacfc>
   13ea4:	cmp	r8, #0
   13ea8:	bne	13ecc <__assert_fail@plt+0x28c8>
   13eac:	b	13eec <__assert_fail@plt+0x28e8>
   13eb0:	mov	r0, r3
   13eb4:	bl	115ec <closedir@plt>
   13eb8:	mov	r0, r8
   13ebc:	bl	1c300 <__assert_fail@plt+0xacfc>
   13ec0:	cmp	r4, #0
   13ec4:	beq	13eec <__assert_fail@plt+0x28e8>
   13ec8:	mov	r8, r4
   13ecc:	mov	r0, r8
   13ed0:	ldr	r4, [r8, #8]
   13ed4:	ldr	r3, [r8, #12]
   13ed8:	cmp	r3, #0
   13edc:	bne	13eb0 <__assert_fail@plt+0x28ac>
   13ee0:	bl	1c300 <__assert_fail@plt+0xacfc>
   13ee4:	cmp	r4, #0
   13ee8:	bne	13ec8 <__assert_fail@plt+0x28c4>
   13eec:	ldr	r0, [fp, #12]
   13ef0:	mov	r8, #0
   13ef4:	bl	115ec <closedir@plt>
   13ef8:	ldr	r3, [r6, #48]	; 0x30
   13efc:	mov	r1, #7
   13f00:	mov	r2, #36	; 0x24
   13f04:	str	r8, [fp, #12]
   13f08:	strh	r1, [fp, #56]	; 0x38
   13f0c:	orr	r3, r3, #8192	; 0x2000
   13f10:	str	r3, [r6, #48]	; 0x30
   13f14:	str	r2, [sl]
   13f18:	b	13774 <__assert_fail@plt+0x2170>
   13f1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f20:	strd	r6, [sp, #8]
   13f24:	bic	r7, r1, #4080	; 0xff0
   13f28:	bic	r7, r7, #15
   13f2c:	strd	r8, [sp, #16]
   13f30:	strd	sl, [sp, #24]
   13f34:	cmp	r7, #0
   13f38:	str	lr, [sp, #32]
   13f3c:	sub	sp, sp, #36	; 0x24
   13f40:	str	r2, [sp, #12]
   13f44:	bne	143b0 <__assert_fail@plt+0x2dac>
   13f48:	and	r3, r1, #516	; 0x204
   13f4c:	mov	r5, r1
   13f50:	cmp	r3, #516	; 0x204
   13f54:	beq	14344 <__assert_fail@plt+0x2d40>
   13f58:	ands	r7, r1, #18
   13f5c:	beq	14344 <__assert_fail@plt+0x2d40>
   13f60:	mov	r9, r0
   13f64:	mov	r1, #96	; 0x60
   13f68:	mov	r0, #1
   13f6c:	bl	1bbe8 <__assert_fail@plt+0xa5e4>
   13f70:	subs	r7, r0, #0
   13f74:	beq	142bc <__assert_fail@plt+0x2cb8>
   13f78:	ldr	r3, [sp, #12]
   13f7c:	tst	r5, #2
   13f80:	mvn	r2, #99	; 0x63
   13f84:	streq	r5, [r7, #48]	; 0x30
   13f88:	str	r2, [r7, #32]
   13f8c:	str	r3, [r7, #44]	; 0x2c
   13f90:	bicne	r3, r5, #512	; 0x200
   13f94:	orrne	r3, r3, #4
   13f98:	strne	r3, [r7, #48]	; 0x30
   13f9c:	ldr	r3, [r9]
   13fa0:	cmp	r3, #0
   13fa4:	beq	143fc <__assert_fail@plt+0x2df8>
   13fa8:	mov	r6, r9
   13fac:	mov	r4, #0
   13fb0:	mov	r0, r3
   13fb4:	bl	11460 <strlen@plt>
   13fb8:	ldr	r3, [r6, #4]!
   13fbc:	cmp	r4, r0
   13fc0:	movcc	r4, r0
   13fc4:	cmp	r3, #0
   13fc8:	bne	13fb0 <__assert_fail@plt+0x29ac>
   13fcc:	add	r4, r4, #1
   13fd0:	cmp	r4, #4096	; 0x1000
   13fd4:	movcc	r4, #4096	; 0x1000
   13fd8:	ldr	r0, [r7, #24]
   13fdc:	ldr	r3, [r7, #36]	; 0x24
   13fe0:	add	r1, r3, #256	; 0x100
   13fe4:	add	r1, r1, r4
   13fe8:	cmp	r3, r1
   13fec:	bhi	143c4 <__assert_fail@plt+0x2dc0>
   13ff0:	str	r1, [r7, #36]	; 0x24
   13ff4:	bl	1bc98 <__assert_fail@plt+0xa694>
   13ff8:	subs	r4, r0, #0
   13ffc:	beq	14448 <__assert_fail@plt+0x2e44>
   14000:	ldr	r3, [r9]
   14004:	str	r4, [r7, #24]
   14008:	cmp	r3, #0
   1400c:	str	r3, [sp, #16]
   14010:	beq	1439c <__assert_fail@plt+0x2d98>
   14014:	mov	r0, #176	; 0xb0
   14018:	bl	1bc5c <__assert_fail@plt+0xa658>
   1401c:	subs	ip, r0, #0
   14020:	str	ip, [sp, #16]
   14024:	beq	1432c <__assert_fail@plt+0x2d28>
   14028:	ldr	r2, [sp, #12]
   1402c:	mov	r3, #0
   14030:	mvn	r1, #0
   14034:	ldr	r0, [r7, #24]
   14038:	str	r3, [ip, #12]
   1403c:	str	r3, [ip, #16]
   14040:	cmp	r2, r3
   14044:	mov	r2, #196608	; 0x30000
   14048:	str	r3, [ip, #20]
   1404c:	str	r7, [ip, #44]	; 0x2c
   14050:	str	r3, [ip, #32]
   14054:	str	r3, [ip, #52]	; 0x34
   14058:	strb	r3, [ip, #168]	; 0xa8
   1405c:	moveq	r3, #1
   14060:	str	r0, [ip, #28]
   14064:	streq	r3, [sp, #24]
   14068:	str	r1, [ip, #48]	; 0x30
   1406c:	str	r2, [ip, #58]	; 0x3a
   14070:	ldr	fp, [r9]
   14074:	beq	14084 <__assert_fail@plt+0x2a80>
   14078:	ldr	r3, [r7, #48]	; 0x30
   1407c:	ubfx	r3, r3, #10, #1
   14080:	str	r3, [sp, #24]
   14084:	cmp	fp, #0
   14088:	beq	14474 <__assert_fail@plt+0x2e70>
   1408c:	eor	r5, r5, #2048	; 0x800
   14090:	mov	r3, #0
   14094:	ubfx	r2, r5, #11, #1
   14098:	mov	r6, r3
   1409c:	mov	sl, r3
   140a0:	mov	r8, r3
   140a4:	str	r2, [sp, #20]
   140a8:	str	r3, [sp, #28]
   140ac:	b	140e8 <__assert_fail@plt+0x2ae4>
   140b0:	ldr	r2, [sp, #12]
   140b4:	mov	r3, #11
   140b8:	mov	r0, #2
   140bc:	mov	r1, #0
   140c0:	strh	r3, [r4, #56]	; 0x38
   140c4:	strd	r0, [r4, #112]	; 0x70
   140c8:	cmp	r2, #0
   140cc:	beq	14388 <__assert_fail@plt+0x2d84>
   140d0:	str	r8, [r4, #8]
   140d4:	mov	r8, r4
   140d8:	ldr	fp, [r9, #4]!
   140dc:	add	sl, sl, #1
   140e0:	cmp	fp, #0
   140e4:	beq	141e4 <__assert_fail@plt+0x2be0>
   140e8:	mov	r0, fp
   140ec:	bl	11460 <strlen@plt>
   140f0:	ldr	r3, [sp, #20]
   140f4:	mov	r5, r0
   140f8:	cmp	r0, #2
   140fc:	movls	r3, #0
   14100:	andhi	r3, r3, #1
   14104:	cmp	r3, #0
   14108:	bne	14354 <__assert_fail@plt+0x2d50>
   1410c:	add	r0, r5, #176	; 0xb0
   14110:	bic	r0, r0, #7
   14114:	bl	1bc5c <__assert_fail@plt+0xa658>
   14118:	subs	r4, r0, #0
   1411c:	beq	142dc <__assert_fail@plt+0x2cd8>
   14120:	add	r3, r4, #168	; 0xa8
   14124:	mov	r1, fp
   14128:	mov	r0, r3
   1412c:	mov	r2, r5
   14130:	bl	112b0 <memcpy@plt>
   14134:	add	ip, r4, r5
   14138:	ldr	r2, [sp, #24]
   1413c:	mov	r3, r0
   14140:	cmp	r8, #0
   14144:	mov	r1, #3
   14148:	strb	r6, [ip, #168]	; 0xa8
   1414c:	moveq	r2, #0
   14150:	ldr	ip, [sp, #16]
   14154:	ldr	r0, [r7, #24]
   14158:	cmp	r2, #0
   1415c:	str	ip, [r4, #4]
   14160:	str	r6, [r4, #12]
   14164:	str	r6, [r4, #16]
   14168:	str	r6, [r4, #20]
   1416c:	str	r3, [r4, #24]
   14170:	str	r0, [r4, #28]
   14174:	str	r6, [r4, #32]
   14178:	str	r7, [r4, #44]	; 0x2c
   1417c:	str	r6, [r4, #48]	; 0x30
   14180:	str	r5, [r4, #52]	; 0x34
   14184:	strh	r6, [r4, #58]	; 0x3a
   14188:	strh	r1, [r4, #60]	; 0x3c
   1418c:	bne	140b0 <__assert_fail@plt+0x2aac>
   14190:	mov	r3, r2
   14194:	mov	r2, r4
   14198:	ldr	r0, [r7, #32]
   1419c:	ldr	r1, [r7, #48]	; 0x30
   141a0:	bl	12d30 <__assert_fail@plt+0x172c>
   141a4:	ldr	r3, [sp, #12]
   141a8:	strh	r0, [r4, #56]	; 0x38
   141ac:	cmp	r3, #0
   141b0:	bne	140d0 <__assert_fail@plt+0x2acc>
   141b4:	cmp	r8, #0
   141b8:	str	r3, [r4, #8]
   141bc:	moveq	r8, r4
   141c0:	streq	r4, [sp, #28]
   141c4:	beq	140d8 <__assert_fail@plt+0x2ad4>
   141c8:	ldr	r3, [sp, #28]
   141cc:	str	r4, [sp, #28]
   141d0:	str	r4, [r3, #8]
   141d4:	ldr	fp, [r9, #4]!
   141d8:	add	sl, sl, #1
   141dc:	cmp	fp, #0
   141e0:	bne	140e8 <__assert_fail@plt+0x2ae4>
   141e4:	ldr	r3, [sp, #12]
   141e8:	cmp	r3, #0
   141ec:	cmpne	sl, #1
   141f0:	bls	14208 <__assert_fail@plt+0x2c04>
   141f4:	mov	r1, r8
   141f8:	mov	r2, sl
   141fc:	mov	r0, r7
   14200:	bl	12b24 <__assert_fail@plt+0x1520>
   14204:	mov	r8, r0
   14208:	mov	r0, #176	; 0xb0
   1420c:	bl	1bc5c <__assert_fail@plt+0xa658>
   14210:	cmp	r0, #0
   14214:	streq	r0, [r7]
   14218:	beq	142dc <__assert_fail@plt+0x2cd8>
   1421c:	ldr	lr, [r7, #24]
   14220:	movw	r4, #258	; 0x102
   14224:	mov	r1, #0
   14228:	mov	ip, #1
   1422c:	mov	r2, #9
   14230:	str	r0, [r7]
   14234:	ldr	r3, [r7, #48]	; 0x30
   14238:	str	r8, [r0, #8]
   1423c:	str	r1, [r0, #12]
   14240:	str	r1, [r0, #16]
   14244:	str	r1, [r0, #20]
   14248:	tst	r4, r3
   1424c:	mov	r3, #3
   14250:	str	lr, [r0, #28]
   14254:	str	r1, [r0, #32]
   14258:	str	r7, [r0, #44]	; 0x2c
   1425c:	str	ip, [r0, #48]	; 0x30
   14260:	str	r1, [r0, #52]	; 0x34
   14264:	str	r2, [r0, #56]	; 0x38
   14268:	strh	r3, [r0, #60]	; 0x3c
   1426c:	strb	r1, [r0, #168]	; 0xa8
   14270:	beq	143e0 <__assert_fail@plt+0x2ddc>
   14274:	movw	r0, #49920	; 0xc300
   14278:	movt	r0, #1
   1427c:	movw	r3, #10812	; 0x2a3c
   14280:	movt	r3, #1
   14284:	movw	r2, #10876	; 0x2a7c
   14288:	movt	r2, #1
   1428c:	str	r0, [sp]
   14290:	mov	r0, #31
   14294:	bl	15a24 <__assert_fail@plt+0x4420>
   14298:	cmp	r0, #0
   1429c:	str	r0, [r7, #56]	; 0x38
   142a0:	beq	142dc <__assert_fail@plt+0x2cd8>
   142a4:	ldr	r3, [r7, #48]	; 0x30
   142a8:	tst	r3, #516	; 0x204
   142ac:	beq	14404 <__assert_fail@plt+0x2e00>
   142b0:	mvn	r1, #0
   142b4:	add	r0, r7, #60	; 0x3c
   142b8:	bl	167f0 <__assert_fail@plt+0x51ec>
   142bc:	mov	r0, r7
   142c0:	add	sp, sp, #36	; 0x24
   142c4:	ldrd	r4, [sp]
   142c8:	ldrd	r6, [sp, #8]
   142cc:	ldrd	r8, [sp, #16]
   142d0:	ldrd	sl, [sp, #24]
   142d4:	add	sp, sp, #32
   142d8:	pop	{pc}		; (ldr pc, [sp], #4)
   142dc:	cmp	r8, #0
   142e0:	bne	14304 <__assert_fail@plt+0x2d00>
   142e4:	b	14324 <__assert_fail@plt+0x2d20>
   142e8:	mov	r0, r3
   142ec:	bl	115ec <closedir@plt>
   142f0:	mov	r0, r8
   142f4:	bl	1c300 <__assert_fail@plt+0xacfc>
   142f8:	cmp	r4, #0
   142fc:	beq	14324 <__assert_fail@plt+0x2d20>
   14300:	mov	r8, r4
   14304:	mov	r0, r8
   14308:	ldr	r4, [r8, #8]
   1430c:	ldr	r3, [r8, #12]
   14310:	cmp	r3, #0
   14314:	bne	142e8 <__assert_fail@plt+0x2ce4>
   14318:	bl	1c300 <__assert_fail@plt+0xacfc>
   1431c:	cmp	r4, #0
   14320:	bne	14300 <__assert_fail@plt+0x2cfc>
   14324:	ldr	r0, [sp, #16]
   14328:	bl	1c300 <__assert_fail@plt+0xacfc>
   1432c:	ldr	r0, [r7, #24]
   14330:	bl	1c300 <__assert_fail@plt+0xacfc>
   14334:	mov	r0, r7
   14338:	mov	r7, #0
   1433c:	bl	1c300 <__assert_fail@plt+0xacfc>
   14340:	b	142bc <__assert_fail@plt+0x2cb8>
   14344:	bl	11484 <__errno_location@plt>
   14348:	mov	r3, #22
   1434c:	str	r3, [r0]
   14350:	b	142bc <__assert_fail@plt+0x2cb8>
   14354:	sub	r3, r0, #1
   14358:	ldrb	r2, [fp, r3]
   1435c:	add	r3, fp, r3
   14360:	cmp	r2, #47	; 0x2f
   14364:	bne	1410c <__assert_fail@plt+0x2b08>
   14368:	ldrb	r2, [r3, #-1]!
   1436c:	cmp	r2, #47	; 0x2f
   14370:	bne	1410c <__assert_fail@plt+0x2b08>
   14374:	sub	r5, r5, #1
   14378:	cmp	r5, #1
   1437c:	bne	14368 <__assert_fail@plt+0x2d64>
   14380:	mov	r0, #176	; 0xb0
   14384:	b	14114 <__assert_fail@plt+0x2b10>
   14388:	ldr	r3, [sp, #28]
   1438c:	str	r2, [r4, #8]
   14390:	str	r4, [sp, #28]
   14394:	str	r4, [r3, #8]
   14398:	b	141d4 <__assert_fail@plt+0x2bd0>
   1439c:	ldr	r3, [sp, #12]
   143a0:	cmp	r3, #0
   143a4:	beq	1446c <__assert_fail@plt+0x2e68>
   143a8:	ldr	fp, [sp, #16]
   143ac:	b	14078 <__assert_fail@plt+0x2a74>
   143b0:	bl	11484 <__errno_location@plt>
   143b4:	mov	r3, #22
   143b8:	mov	r7, #0
   143bc:	str	r3, [r0]
   143c0:	b	142bc <__assert_fail@plt+0x2cb8>
   143c4:	bl	1c300 <__assert_fail@plt+0xacfc>
   143c8:	mov	r3, #0
   143cc:	str	r3, [r7, #24]
   143d0:	bl	11484 <__errno_location@plt>
   143d4:	mov	r3, #36	; 0x24
   143d8:	str	r3, [r0]
   143dc:	b	14334 <__assert_fail@plt+0x2d30>
   143e0:	mov	r0, #32
   143e4:	bl	1bc5c <__assert_fail@plt+0xa658>
   143e8:	cmp	r0, #0
   143ec:	str	r0, [r7, #56]	; 0x38
   143f0:	beq	142dc <__assert_fail@plt+0x2cd8>
   143f4:	bl	1bea4 <__assert_fail@plt+0xa8a0>
   143f8:	b	142a4 <__assert_fail@plt+0x2ca0>
   143fc:	mov	r4, #4096	; 0x1000
   14400:	b	13fd8 <__assert_fail@plt+0x29d4>
   14404:	lsl	r2, r3, #11
   14408:	tst	r3, #512	; 0x200
   1440c:	and	r2, r2, #32768	; 0x8000
   14410:	orr	r2, r2, #540672	; 0x84000
   14414:	orr	r2, r2, #2304	; 0x900
   14418:	beq	14458 <__assert_fail@plt+0x2e54>
   1441c:	movw	r1, #56208	; 0xdb90
   14420:	movt	r1, #1
   14424:	ldr	r0, [r7, #32]
   14428:	bl	168bc <__assert_fail@plt+0x52b8>
   1442c:	cmp	r0, #0
   14430:	str	r0, [r7, #28]
   14434:	bge	142b0 <__assert_fail@plt+0x2cac>
   14438:	ldr	r3, [r7, #48]	; 0x30
   1443c:	orr	r3, r3, #4
   14440:	str	r3, [r7, #48]	; 0x30
   14444:	b	142b0 <__assert_fail@plt+0x2cac>
   14448:	ldr	r0, [r7, #24]
   1444c:	bl	1c300 <__assert_fail@plt+0xacfc>
   14450:	str	r4, [r7, #24]
   14454:	b	14334 <__assert_fail@plt+0x2d30>
   14458:	mov	r1, r2
   1445c:	movw	r0, #56208	; 0xdb90
   14460:	movt	r0, #1
   14464:	bl	1c260 <__assert_fail@plt+0xac5c>
   14468:	b	1442c <__assert_fail@plt+0x2e28>
   1446c:	ldr	r8, [sp, #16]
   14470:	b	14208 <__assert_fail@plt+0x2c04>
   14474:	mov	r8, fp
   14478:	b	14208 <__assert_fail@plt+0x2c04>
   1447c:	ldr	r3, [r0]
   14480:	strd	r4, [sp, #-16]!
   14484:	str	r6, [sp, #8]
   14488:	mov	r6, r0
   1448c:	str	lr, [sp, #12]
   14490:	cmp	r3, #0
   14494:	beq	144e8 <__assert_fail@plt+0x2ee4>
   14498:	ldr	r2, [r3, #48]	; 0x30
   1449c:	cmp	r2, #0
   144a0:	bge	144bc <__assert_fail@plt+0x2eb8>
   144a4:	b	1466c <__assert_fail@plt+0x3068>
   144a8:	bl	1c300 <__assert_fail@plt+0xacfc>
   144ac:	ldr	r3, [r4, #48]	; 0x30
   144b0:	cmp	r3, #0
   144b4:	blt	144e0 <__assert_fail@plt+0x2edc>
   144b8:	mov	r3, r4
   144bc:	ldr	r4, [r3, #8]
   144c0:	mov	r0, r3
   144c4:	cmp	r4, #0
   144c8:	bne	144a8 <__assert_fail@plt+0x2ea4>
   144cc:	ldr	r4, [r3, #4]
   144d0:	bl	1c300 <__assert_fail@plt+0xacfc>
   144d4:	ldr	r3, [r4, #48]	; 0x30
   144d8:	cmp	r3, #0
   144dc:	bge	144b8 <__assert_fail@plt+0x2eb4>
   144e0:	mov	r0, r4
   144e4:	bl	1c300 <__assert_fail@plt+0xacfc>
   144e8:	ldr	r4, [r6, #4]
   144ec:	cmp	r4, #0
   144f0:	bne	14514 <__assert_fail@plt+0x2f10>
   144f4:	b	14534 <__assert_fail@plt+0x2f30>
   144f8:	mov	r0, r3
   144fc:	bl	115ec <closedir@plt>
   14500:	mov	r0, r4
   14504:	bl	1c300 <__assert_fail@plt+0xacfc>
   14508:	cmp	r5, #0
   1450c:	beq	14534 <__assert_fail@plt+0x2f30>
   14510:	mov	r4, r5
   14514:	mov	r0, r4
   14518:	ldr	r5, [r4, #8]
   1451c:	ldr	r3, [r4, #12]
   14520:	cmp	r3, #0
   14524:	bne	144f8 <__assert_fail@plt+0x2ef4>
   14528:	bl	1c300 <__assert_fail@plt+0xacfc>
   1452c:	cmp	r5, #0
   14530:	bne	14510 <__assert_fail@plt+0x2f0c>
   14534:	ldr	r0, [r6, #8]
   14538:	bl	1c300 <__assert_fail@plt+0xacfc>
   1453c:	ldr	r0, [r6, #24]
   14540:	bl	1c300 <__assert_fail@plt+0xacfc>
   14544:	ldr	r3, [r6, #48]	; 0x30
   14548:	tst	r3, #512	; 0x200
   1454c:	beq	145fc <__assert_fail@plt+0x2ff8>
   14550:	ldr	r0, [r6, #32]
   14554:	cmp	r0, #0
   14558:	bge	145e4 <__assert_fail@plt+0x2fe0>
   1455c:	mov	r5, #0
   14560:	add	r4, r6, #60	; 0x3c
   14564:	b	14574 <__assert_fail@plt+0x2f70>
   14568:	bl	1686c <__assert_fail@plt+0x5268>
   1456c:	cmp	r0, #0
   14570:	bge	145dc <__assert_fail@plt+0x2fd8>
   14574:	mov	r0, r4
   14578:	bl	1681c <__assert_fail@plt+0x5218>
   1457c:	cmp	r0, #0
   14580:	mov	r0, r4
   14584:	beq	14568 <__assert_fail@plt+0x2f64>
   14588:	ldr	r0, [r6, #52]	; 0x34
   1458c:	cmp	r0, #0
   14590:	beq	14598 <__assert_fail@plt+0x2f94>
   14594:	bl	15d64 <__assert_fail@plt+0x4760>
   14598:	ldr	r3, [r6, #48]	; 0x30
   1459c:	movw	r2, #258	; 0x102
   145a0:	ldr	r0, [r6, #56]	; 0x38
   145a4:	tst	r2, r3
   145a8:	beq	14634 <__assert_fail@plt+0x3030>
   145ac:	cmp	r0, #0
   145b0:	beq	145b8 <__assert_fail@plt+0x2fb4>
   145b4:	bl	15d64 <__assert_fail@plt+0x4760>
   145b8:	mov	r0, r6
   145bc:	bl	1c300 <__assert_fail@plt+0xacfc>
   145c0:	cmp	r5, #0
   145c4:	bne	14674 <__assert_fail@plt+0x3070>
   145c8:	mov	r0, r5
   145cc:	ldrd	r4, [sp]
   145d0:	ldr	r6, [sp, #8]
   145d4:	add	sp, sp, #12
   145d8:	pop	{pc}		; (ldr pc, [sp], #4)
   145dc:	bl	115d4 <close@plt>
   145e0:	b	14574 <__assert_fail@plt+0x2f70>
   145e4:	bl	115d4 <close@plt>
   145e8:	cmp	r0, #0
   145ec:	beq	1455c <__assert_fail@plt+0x2f58>
   145f0:	bl	11484 <__errno_location@plt>
   145f4:	ldr	r5, [r0]
   145f8:	b	14560 <__assert_fail@plt+0x2f5c>
   145fc:	tst	r3, #4
   14600:	bne	1455c <__assert_fail@plt+0x2f58>
   14604:	ldr	r0, [r6, #28]
   14608:	bl	11568 <fchdir@plt>
   1460c:	cmp	r0, #0
   14610:	bne	1463c <__assert_fail@plt+0x3038>
   14614:	ldr	r0, [r6, #28]
   14618:	bl	115d4 <close@plt>
   1461c:	cmp	r0, #0
   14620:	beq	1455c <__assert_fail@plt+0x2f58>
   14624:	bl	11484 <__errno_location@plt>
   14628:	mov	r4, r0
   1462c:	ldr	r5, [r4]
   14630:	b	14560 <__assert_fail@plt+0x2f5c>
   14634:	bl	1c300 <__assert_fail@plt+0xacfc>
   14638:	b	145b8 <__assert_fail@plt+0x2fb4>
   1463c:	bl	11484 <__errno_location@plt>
   14640:	ldr	r5, [r0]
   14644:	mov	r4, r0
   14648:	ldr	r0, [r6, #28]
   1464c:	bl	115d4 <close@plt>
   14650:	adds	r3, r0, #0
   14654:	movne	r3, #1
   14658:	cmp	r5, #0
   1465c:	movne	r3, #0
   14660:	cmp	r3, #0
   14664:	beq	14560 <__assert_fail@plt+0x2f5c>
   14668:	b	1462c <__assert_fail@plt+0x3028>
   1466c:	mov	r4, r3
   14670:	b	144e0 <__assert_fail@plt+0x2edc>
   14674:	bl	11484 <__errno_location@plt>
   14678:	str	r5, [r0]
   1467c:	mvn	r5, #0
   14680:	b	145c8 <__assert_fail@plt+0x2fc4>
   14684:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14688:	ldr	r4, [r0]
   1468c:	strd	r6, [sp, #8]
   14690:	str	r8, [sp, #16]
   14694:	str	lr, [sp, #20]
   14698:	sub	sp, sp, #8
   1469c:	cmp	r4, #0
   146a0:	beq	148b0 <__assert_fail@plt+0x32ac>
   146a4:	ldr	r1, [r0, #48]	; 0x30
   146a8:	ands	r3, r1, #8192	; 0x2000
   146ac:	bne	148b0 <__assert_fail@plt+0x32ac>
   146b0:	ldrh	r2, [r4, #60]	; 0x3c
   146b4:	mov	r8, r0
   146b8:	mov	r0, #3
   146bc:	strh	r0, [r4, #60]	; 0x3c
   146c0:	cmp	r2, #1
   146c4:	beq	14b08 <__assert_fail@plt+0x3504>
   146c8:	cmp	r2, #2
   146cc:	ldrh	r3, [r4, #56]	; 0x38
   146d0:	beq	147d0 <__assert_fail@plt+0x31cc>
   146d4:	cmp	r3, #1
   146d8:	bne	14708 <__assert_fail@plt+0x3104>
   146dc:	b	148d0 <__assert_fail@plt+0x32cc>
   146e0:	mov	r0, r4
   146e4:	str	r5, [r8]
   146e8:	bl	1c300 <__assert_fail@plt+0xacfc>
   146ec:	ldr	r4, [r5, #48]	; 0x30
   146f0:	cmp	r4, #0
   146f4:	beq	14950 <__assert_fail@plt+0x334c>
   146f8:	ldrh	r3, [r5, #60]	; 0x3c
   146fc:	mov	r4, r5
   14700:	cmp	r3, #4
   14704:	bne	14a24 <__assert_fail@plt+0x3420>
   14708:	ldr	r5, [r4, #8]
   1470c:	cmp	r5, #0
   14710:	bne	146e0 <__assert_fail@plt+0x30dc>
   14714:	ldr	r6, [r4, #4]
   14718:	ldr	r3, [r6, #12]
   1471c:	cmp	r3, #0
   14720:	bne	14c80 <__assert_fail@plt+0x367c>
   14724:	mov	r0, r4
   14728:	str	r6, [r8]
   1472c:	bl	1c300 <__assert_fail@plt+0xacfc>
   14730:	ldr	r3, [r6, #48]	; 0x30
   14734:	cmn	r3, #1
   14738:	beq	14c60 <__assert_fail@plt+0x365c>
   1473c:	ldrh	r3, [r6, #56]	; 0x38
   14740:	cmp	r3, #11
   14744:	beq	14b04 <__assert_fail@plt+0x3500>
   14748:	ldr	r2, [r8, #24]
   1474c:	mov	r1, #0
   14750:	ldr	r3, [r6, #40]	; 0x28
   14754:	strb	r1, [r2, r3]
   14758:	ldr	r3, [r6, #48]	; 0x30
   1475c:	cmp	r3, r1
   14760:	beq	1487c <__assert_fail@plt+0x3278>
   14764:	ldrh	r3, [r6, #58]	; 0x3a
   14768:	tst	r3, #2
   1476c:	beq	14bbc <__assert_fail@plt+0x35b8>
   14770:	ldr	r3, [r8, #48]	; 0x30
   14774:	ldr	r4, [r6, #36]	; 0x24
   14778:	tst	r3, #4
   1477c:	bne	147c4 <__assert_fail@plt+0x31c0>
   14780:	tst	r3, #512	; 0x200
   14784:	beq	14d5c <__assert_fail@plt+0x3758>
   14788:	ldr	r1, [r8, #32]
   1478c:	sub	r3, r4, r1
   14790:	cmn	r1, #100	; 0x64
   14794:	clz	r3, r3
   14798:	lsr	r3, r3, #5
   1479c:	moveq	r3, #0
   147a0:	cmp	r3, #0
   147a4:	bne	14b04 <__assert_fail@plt+0x3500>
   147a8:	add	r0, r8, #60	; 0x3c
   147ac:	bl	16824 <__assert_fail@plt+0x5220>
   147b0:	cmp	r0, #0
   147b4:	blt	147bc <__assert_fail@plt+0x31b8>
   147b8:	bl	115d4 <close@plt>
   147bc:	str	r4, [r8, #32]
   147c0:	ldr	r4, [r6, #36]	; 0x24
   147c4:	mov	r0, r4
   147c8:	bl	115d4 <close@plt>
   147cc:	b	14bc4 <__assert_fail@plt+0x35c0>
   147d0:	sub	r2, r3, #12
   147d4:	cmp	r2, #1
   147d8:	bls	14ac0 <__assert_fail@plt+0x34bc>
   147dc:	cmp	r3, #1
   147e0:	bne	14708 <__assert_fail@plt+0x3104>
   147e4:	tst	r1, #64	; 0x40
   147e8:	beq	14800 <__assert_fail@plt+0x31fc>
   147ec:	ldrd	r2, [r8, #16]
   147f0:	ldrd	r6, [r4, #64]	; 0x40
   147f4:	cmp	r7, r3
   147f8:	cmpeq	r6, r2
   147fc:	bne	148d8 <__assert_fail@plt+0x32d4>
   14800:	ldr	r5, [r8, #4]
   14804:	cmp	r5, #0
   14808:	beq	14b68 <__assert_fail@plt+0x3564>
   1480c:	tst	r1, #4096	; 0x1000
   14810:	bne	14b1c <__assert_fail@plt+0x3518>
   14814:	mvn	r2, #0
   14818:	mov	r1, r4
   1481c:	ldr	r3, [r4, #24]
   14820:	mov	r0, r8
   14824:	bl	130d8 <__assert_fail@plt+0x1ad4>
   14828:	cmp	r0, #0
   1482c:	beq	14c48 <__assert_fail@plt+0x3644>
   14830:	bl	11484 <__errno_location@plt>
   14834:	ldrh	r3, [r4, #58]	; 0x3a
   14838:	ldr	r2, [r0]
   1483c:	orr	r3, r3, #1
   14840:	str	r2, [r4, #32]
   14844:	strh	r3, [r4, #58]	; 0x3a
   14848:	ldr	r4, [r8, #4]
   1484c:	cmp	r4, #0
   14850:	beq	14870 <__assert_fail@plt+0x326c>
   14854:	mov	r3, r4
   14858:	ldr	r2, [r3, #4]
   1485c:	ldr	r2, [r2, #24]
   14860:	str	r2, [r3, #24]
   14864:	ldr	r3, [r3, #8]
   14868:	cmp	r3, #0
   1486c:	bne	14858 <__assert_fail@plt+0x3254>
   14870:	mov	r3, #0
   14874:	str	r3, [r8, #4]
   14878:	b	14a2c <__assert_fail@plt+0x3428>
   1487c:	mov	r0, r8
   14880:	bl	1302c <__assert_fail@plt+0x1a28>
   14884:	cmp	r0, #0
   14888:	beq	14bc4 <__assert_fail@plt+0x35c0>
   1488c:	bl	11484 <__errno_location@plt>
   14890:	ldr	r3, [r8, #48]	; 0x30
   14894:	ldr	r2, [r0]
   14898:	orr	r0, r3, #8192	; 0x2000
   1489c:	ldrh	r3, [r6, #56]	; 0x38
   148a0:	str	r2, [r6, #32]
   148a4:	str	r0, [r8, #48]	; 0x30
   148a8:	cmp	r3, #2
   148ac:	bne	14bd8 <__assert_fail@plt+0x35d4>
   148b0:	mov	r4, #0
   148b4:	mov	r0, r4
   148b8:	add	sp, sp, #8
   148bc:	ldrd	r4, [sp]
   148c0:	ldrd	r6, [sp, #8]
   148c4:	ldr	r8, [sp, #16]
   148c8:	add	sp, sp, #20
   148cc:	pop	{pc}		; (ldr pc, [sp], #4)
   148d0:	cmp	r2, #4
   148d4:	bne	147e4 <__assert_fail@plt+0x31e0>
   148d8:	ldrh	r3, [r4, #58]	; 0x3a
   148dc:	tst	r3, #2
   148e0:	bne	14cc0 <__assert_fail@plt+0x36bc>
   148e4:	ldr	r5, [r8, #4]
   148e8:	cmp	r5, #0
   148ec:	bne	14924 <__assert_fail@plt+0x3320>
   148f0:	mov	r3, #6
   148f4:	mov	r2, r4
   148f8:	ldr	r0, [r8, #48]	; 0x30
   148fc:	add	r1, r8, #56	; 0x38
   14900:	strh	r3, [r4, #56]	; 0x38
   14904:	bl	12f60 <__assert_fail@plt+0x195c>
   14908:	b	148b4 <__assert_fail@plt+0x32b0>
   1490c:	bl	115ec <closedir@plt>
   14910:	mov	r0, r5
   14914:	bl	1c300 <__assert_fail@plt+0xacfc>
   14918:	cmp	r6, #0
   1491c:	beq	14944 <__assert_fail@plt+0x3340>
   14920:	mov	r5, r6
   14924:	ldr	r6, [r5, #8]
   14928:	ldr	r0, [r5, #12]
   1492c:	cmp	r0, #0
   14930:	bne	1490c <__assert_fail@plt+0x3308>
   14934:	mov	r0, r5
   14938:	bl	1c300 <__assert_fail@plt+0xacfc>
   1493c:	cmp	r6, #0
   14940:	bne	14920 <__assert_fail@plt+0x331c>
   14944:	mov	r3, #0
   14948:	str	r3, [r8, #4]
   1494c:	b	148f0 <__assert_fail@plt+0x32ec>
   14950:	mov	r0, r8
   14954:	bl	1302c <__assert_fail@plt+0x1a28>
   14958:	ldr	r3, [r8, #48]	; 0x30
   1495c:	cmp	r0, #0
   14960:	orrne	r3, r3, #8192	; 0x2000
   14964:	strne	r3, [r8, #48]	; 0x30
   14968:	bne	148b4 <__assert_fail@plt+0x32b0>
   1496c:	movw	r2, #258	; 0x102
   14970:	ldr	r0, [r8, #56]	; 0x38
   14974:	tst	r2, r3
   14978:	beq	14cb8 <__assert_fail@plt+0x36b4>
   1497c:	cmp	r0, #0
   14980:	beq	14988 <__assert_fail@plt+0x3384>
   14984:	bl	15d64 <__assert_fail@plt+0x4760>
   14988:	ldr	r2, [r5, #52]	; 0x34
   1498c:	add	r4, r5, #168	; 0xa8
   14990:	mov	r1, r4
   14994:	ldr	r0, [r8, #24]
   14998:	str	r2, [r5, #40]	; 0x28
   1499c:	add	r2, r2, #1
   149a0:	bl	1128c <memmove@plt>
   149a4:	mov	r0, r4
   149a8:	mov	r1, #47	; 0x2f
   149ac:	bl	1152c <strrchr@plt>
   149b0:	cmp	r0, #0
   149b4:	beq	149e4 <__assert_fail@plt+0x33e0>
   149b8:	cmp	r4, r0
   149bc:	beq	14c50 <__assert_fail@plt+0x364c>
   149c0:	add	r6, r0, #1
   149c4:	mov	r0, r6
   149c8:	bl	11460 <strlen@plt>
   149cc:	mov	r7, r0
   149d0:	mov	r1, r6
   149d4:	mov	r0, r4
   149d8:	add	r2, r7, #1
   149dc:	bl	1128c <memmove@plt>
   149e0:	str	r7, [r5, #52]	; 0x34
   149e4:	ldr	r3, [r8, #24]
   149e8:	movw	r1, #258	; 0x102
   149ec:	ldr	r2, [r8, #48]	; 0x30
   149f0:	str	r3, [r5, #24]
   149f4:	str	r3, [r5, #28]
   149f8:	tst	r1, r2
   149fc:	bne	14c10 <__assert_fail@plt+0x360c>
   14a00:	mov	r0, #32
   14a04:	bl	1bc5c <__assert_fail@plt+0xa658>
   14a08:	cmp	r0, #0
   14a0c:	str	r0, [r8, #56]	; 0x38
   14a10:	beq	14d50 <__assert_fail@plt+0x374c>
   14a14:	bl	1bea4 <__assert_fail@plt+0xa8a0>
   14a18:	mov	r4, r5
   14a1c:	ldrh	r3, [r5, #56]	; 0x38
   14a20:	b	14a70 <__assert_fail@plt+0x346c>
   14a24:	cmp	r3, #2
   14a28:	beq	14ccc <__assert_fail@plt+0x36c8>
   14a2c:	ldr	r0, [r4, #4]
   14a30:	mov	ip, #47	; 0x2f
   14a34:	add	r1, r4, #168	; 0xa8
   14a38:	ldr	r3, [r8, #24]
   14a3c:	ldr	lr, [r0, #28]
   14a40:	ldr	r2, [r0, #40]	; 0x28
   14a44:	sub	r0, r2, #1
   14a48:	ldrb	lr, [lr, r0]
   14a4c:	cmp	lr, ip
   14a50:	movne	r0, r2
   14a54:	strb	ip, [r3, r0]
   14a58:	add	r0, r3, r0
   14a5c:	ldr	r2, [r4, #52]	; 0x34
   14a60:	add	r0, r0, #1
   14a64:	add	r2, r2, #1
   14a68:	bl	1128c <memmove@plt>
   14a6c:	ldrh	r3, [r4, #56]	; 0x38
   14a70:	cmp	r3, #11
   14a74:	str	r4, [r8]
   14a78:	beq	14ae8 <__assert_fail@plt+0x34e4>
   14a7c:	cmp	r3, #1
   14a80:	bne	148b4 <__assert_fail@plt+0x32b0>
   14a84:	ldr	r3, [r4, #48]	; 0x30
   14a88:	add	r1, r8, #56	; 0x38
   14a8c:	ldr	r0, [r8, #48]	; 0x30
   14a90:	cmp	r3, #0
   14a94:	ldrdeq	r2, [r4, #64]	; 0x40
   14a98:	strdeq	r2, [r8, #16]
   14a9c:	mov	r2, r4
   14aa0:	bl	12e8c <__assert_fail@plt+0x1888>
   14aa4:	subs	r5, r0, #0
   14aa8:	bne	148b4 <__assert_fail@plt+0x32b0>
   14aac:	bl	11484 <__errno_location@plt>
   14ab0:	mov	r3, #12
   14ab4:	mov	r4, r5
   14ab8:	str	r3, [r0]
   14abc:	b	148b4 <__assert_fail@plt+0x32b0>
   14ac0:	mov	r3, #1
   14ac4:	mov	r2, r4
   14ac8:	ldr	r0, [r8, #32]
   14acc:	bl	12d30 <__assert_fail@plt+0x172c>
   14ad0:	cmp	r0, #1
   14ad4:	strh	r0, [r4, #56]	; 0x38
   14ad8:	beq	14d74 <__assert_fail@plt+0x3770>
   14adc:	cmp	r0, #11
   14ae0:	str	r4, [r8]
   14ae4:	bne	148b4 <__assert_fail@plt+0x32b0>
   14ae8:	ldrd	r2, [r4, #112]	; 0x70
   14aec:	cmp	r3, #0
   14af0:	cmpeq	r2, #2
   14af4:	beq	14cfc <__assert_fail@plt+0x36f8>
   14af8:	cmp	r3, #0
   14afc:	cmpeq	r2, #1
   14b00:	beq	148b4 <__assert_fail@plt+0x32b0>
   14b04:	bl	115c8 <abort@plt>
   14b08:	mov	r2, r4
   14b0c:	ldr	r0, [r8, #32]
   14b10:	bl	12d30 <__assert_fail@plt+0x172c>
   14b14:	strh	r0, [r4, #56]	; 0x38
   14b18:	b	148b4 <__assert_fail@plt+0x32b0>
   14b1c:	bic	r1, r1, #4096	; 0x1000
   14b20:	str	r1, [r8, #48]	; 0x30
   14b24:	b	14b40 <__assert_fail@plt+0x353c>
   14b28:	bl	115ec <closedir@plt>
   14b2c:	mov	r0, r5
   14b30:	bl	1c300 <__assert_fail@plt+0xacfc>
   14b34:	cmp	r6, #0
   14b38:	beq	14b60 <__assert_fail@plt+0x355c>
   14b3c:	mov	r5, r6
   14b40:	ldr	r6, [r5, #8]
   14b44:	ldr	r0, [r5, #12]
   14b48:	cmp	r0, #0
   14b4c:	bne	14b28 <__assert_fail@plt+0x3524>
   14b50:	mov	r0, r5
   14b54:	bl	1c300 <__assert_fail@plt+0xacfc>
   14b58:	cmp	r6, #0
   14b5c:	bne	14b3c <__assert_fail@plt+0x3538>
   14b60:	mov	r3, #0
   14b64:	str	r3, [r8, #4]
   14b68:	mov	r1, #3
   14b6c:	mov	r0, r8
   14b70:	bl	13398 <__assert_fail@plt+0x1d94>
   14b74:	cmp	r0, #0
   14b78:	str	r0, [r8, #4]
   14b7c:	movne	r4, r0
   14b80:	bne	14870 <__assert_fail@plt+0x326c>
   14b84:	ldr	r0, [r8, #48]	; 0x30
   14b88:	tst	r0, #8192	; 0x2000
   14b8c:	bne	148b0 <__assert_fail@plt+0x32ac>
   14b90:	ldr	r3, [r4, #32]
   14b94:	cmp	r3, #0
   14b98:	beq	14bac <__assert_fail@plt+0x35a8>
   14b9c:	ldrh	r3, [r4, #56]	; 0x38
   14ba0:	cmp	r3, #4
   14ba4:	movne	r3, #7
   14ba8:	strhne	r3, [r4, #56]	; 0x38
   14bac:	add	r1, r8, #56	; 0x38
   14bb0:	mov	r2, r4
   14bb4:	bl	12f60 <__assert_fail@plt+0x195c>
   14bb8:	b	148b4 <__assert_fail@plt+0x32b0>
   14bbc:	tst	r3, #1
   14bc0:	beq	14d1c <__assert_fail@plt+0x3718>
   14bc4:	ldrh	r3, [r6, #56]	; 0x38
   14bc8:	ldr	r0, [r8, #48]	; 0x30
   14bcc:	cmp	r3, #2
   14bd0:	beq	14c00 <__assert_fail@plt+0x35fc>
   14bd4:	ldr	r2, [r6, #32]
   14bd8:	cmp	r2, #0
   14bdc:	movne	r3, #7
   14be0:	strhne	r3, [r6, #56]	; 0x38
   14be4:	bne	14c00 <__assert_fail@plt+0x35fc>
   14be8:	mov	r3, #6
   14bec:	mov	r2, r6
   14bf0:	add	r1, r8, #56	; 0x38
   14bf4:	strh	r3, [r6, #56]	; 0x38
   14bf8:	bl	12f60 <__assert_fail@plt+0x195c>
   14bfc:	ldr	r0, [r8, #48]	; 0x30
   14c00:	tst	r0, #8192	; 0x2000
   14c04:	moveq	r4, r6
   14c08:	beq	148b4 <__assert_fail@plt+0x32b0>
   14c0c:	b	148b0 <__assert_fail@plt+0x32ac>
   14c10:	movw	r1, #49920	; 0xc300
   14c14:	movt	r1, #1
   14c18:	movw	r3, #10812	; 0x2a3c
   14c1c:	movt	r3, #1
   14c20:	movw	r2, #10876	; 0x2a7c
   14c24:	movt	r2, #1
   14c28:	str	r1, [sp]
   14c2c:	mov	r0, #31
   14c30:	mov	r1, #0
   14c34:	bl	15a24 <__assert_fail@plt+0x4420>
   14c38:	mov	r4, r5
   14c3c:	ldrh	r3, [r5, #56]	; 0x38
   14c40:	str	r0, [r8, #56]	; 0x38
   14c44:	b	14a70 <__assert_fail@plt+0x346c>
   14c48:	ldr	r4, [r8, #4]
   14c4c:	b	14870 <__assert_fail@plt+0x326c>
   14c50:	ldrb	r3, [r4, #1]
   14c54:	cmp	r3, #0
   14c58:	beq	149e4 <__assert_fail@plt+0x33e0>
   14c5c:	b	149c0 <__assert_fail@plt+0x33bc>
   14c60:	mov	r0, r6
   14c64:	bl	1c300 <__assert_fail@plt+0xacfc>
   14c68:	bl	11484 <__errno_location@plt>
   14c6c:	mov	r3, #0
   14c70:	mov	r4, r3
   14c74:	str	r3, [r0]
   14c78:	str	r3, [r8]
   14c7c:	b	148b4 <__assert_fail@plt+0x32b0>
   14c80:	ldr	r2, [r8, #24]
   14c84:	mov	r1, #3
   14c88:	mov	r0, r8
   14c8c:	ldr	r3, [r6, #40]	; 0x28
   14c90:	str	r6, [r8]
   14c94:	strb	r5, [r2, r3]
   14c98:	bl	13398 <__assert_fail@plt+0x1d94>
   14c9c:	subs	r3, r0, #0
   14ca0:	bne	14d40 <__assert_fail@plt+0x373c>
   14ca4:	ldr	r3, [r8, #48]	; 0x30
   14ca8:	tst	r3, #8192	; 0x2000
   14cac:	bne	148b0 <__assert_fail@plt+0x32ac>
   14cb0:	ldr	r6, [r4, #4]
   14cb4:	b	14724 <__assert_fail@plt+0x3120>
   14cb8:	bl	1c300 <__assert_fail@plt+0xacfc>
   14cbc:	b	14988 <__assert_fail@plt+0x3384>
   14cc0:	ldr	r0, [r4, #36]	; 0x24
   14cc4:	bl	115d4 <close@plt>
   14cc8:	b	148e4 <__assert_fail@plt+0x32e0>
   14ccc:	mov	r3, #1
   14cd0:	mov	r2, r5
   14cd4:	ldr	r0, [r8, #32]
   14cd8:	ldr	r1, [r8, #48]	; 0x30
   14cdc:	bl	12d30 <__assert_fail@plt+0x172c>
   14ce0:	cmp	r0, #1
   14ce4:	strh	r0, [r5, #56]	; 0x38
   14ce8:	beq	14dcc <__assert_fail@plt+0x37c8>
   14cec:	mov	r3, #3
   14cf0:	mov	r4, r5
   14cf4:	strh	r3, [r5, #60]	; 0x3c
   14cf8:	b	14a2c <__assert_fail@plt+0x3428>
   14cfc:	mov	r3, #0
   14d00:	mov	r2, r4
   14d04:	ldr	r0, [r8, #32]
   14d08:	ldr	r1, [r8, #48]	; 0x30
   14d0c:	bl	12d30 <__assert_fail@plt+0x172c>
   14d10:	mov	r3, r0
   14d14:	strh	r0, [r4, #56]	; 0x38
   14d18:	b	14a7c <__assert_fail@plt+0x3478>
   14d1c:	movw	r3, #56204	; 0xdb8c
   14d20:	movt	r3, #1
   14d24:	ldr	r1, [r6, #4]
   14d28:	mvn	r2, #0
   14d2c:	mov	r0, r8
   14d30:	bl	130d8 <__assert_fail@plt+0x1ad4>
   14d34:	cmp	r0, #0
   14d38:	beq	14bc4 <__assert_fail@plt+0x35c0>
   14d3c:	b	1488c <__assert_fail@plt+0x3288>
   14d40:	mov	r0, r4
   14d44:	mov	r4, r3
   14d48:	bl	1c300 <__assert_fail@plt+0xacfc>
   14d4c:	b	14a2c <__assert_fail@plt+0x3428>
   14d50:	ldrh	r3, [r5, #56]	; 0x38
   14d54:	mov	r4, r5
   14d58:	b	14a70 <__assert_fail@plt+0x346c>
   14d5c:	mov	r0, r4
   14d60:	bl	11568 <fchdir@plt>
   14d64:	cmp	r0, #0
   14d68:	bne	14e1c <__assert_fail@plt+0x3818>
   14d6c:	ldr	r4, [r6, #36]	; 0x24
   14d70:	b	147c4 <__assert_fail@plt+0x31c0>
   14d74:	ldr	r3, [r8, #48]	; 0x30
   14d78:	tst	r3, #4
   14d7c:	strne	r4, [r8]
   14d80:	bne	14a84 <__assert_fail@plt+0x3480>
   14d84:	lsl	r2, r3, #11
   14d88:	tst	r3, #512	; 0x200
   14d8c:	and	r2, r2, #32768	; 0x8000
   14d90:	orr	r2, r2, #540672	; 0x84000
   14d94:	orr	r2, r2, #2304	; 0x900
   14d98:	beq	14e3c <__assert_fail@plt+0x3838>
   14d9c:	movw	r1, #56208	; 0xdb90
   14da0:	movt	r1, #1
   14da4:	ldr	r0, [r8, #32]
   14da8:	bl	168bc <__assert_fail@plt+0x52b8>
   14dac:	cmp	r0, #0
   14db0:	str	r0, [r4, #36]	; 0x24
   14db4:	blt	14e50 <__assert_fail@plt+0x384c>
   14db8:	ldrh	r2, [r4, #58]	; 0x3a
   14dbc:	ldrh	r3, [r4, #56]	; 0x38
   14dc0:	orr	r2, r2, #2
   14dc4:	strh	r2, [r4, #58]	; 0x3a
   14dc8:	b	14a70 <__assert_fail@plt+0x346c>
   14dcc:	ldr	r3, [r8, #48]	; 0x30
   14dd0:	tst	r3, #4
   14dd4:	bne	14cec <__assert_fail@plt+0x36e8>
   14dd8:	lsl	r2, r3, #11
   14ddc:	tst	r3, #512	; 0x200
   14de0:	and	r2, r2, #32768	; 0x8000
   14de4:	orr	r2, r2, #540672	; 0x84000
   14de8:	orr	r2, r2, #2304	; 0x900
   14dec:	beq	14e6c <__assert_fail@plt+0x3868>
   14df0:	movw	r1, #56208	; 0xdb90
   14df4:	movt	r1, #1
   14df8:	ldr	r0, [r8, #32]
   14dfc:	bl	168bc <__assert_fail@plt+0x52b8>
   14e00:	cmp	r0, #0
   14e04:	str	r0, [r5, #36]	; 0x24
   14e08:	blt	14e80 <__assert_fail@plt+0x387c>
   14e0c:	ldrh	r3, [r5, #58]	; 0x3a
   14e10:	orr	r3, r3, #2
   14e14:	strh	r3, [r5, #58]	; 0x3a
   14e18:	b	14cec <__assert_fail@plt+0x36e8>
   14e1c:	bl	11484 <__errno_location@plt>
   14e20:	ldr	r3, [r8, #48]	; 0x30
   14e24:	ldr	r2, [r0]
   14e28:	ldr	r4, [r6, #36]	; 0x24
   14e2c:	orr	r3, r3, #8192	; 0x2000
   14e30:	str	r2, [r6, #32]
   14e34:	str	r3, [r8, #48]	; 0x30
   14e38:	b	147c4 <__assert_fail@plt+0x31c0>
   14e3c:	mov	r1, r2
   14e40:	movw	r0, #56208	; 0xdb90
   14e44:	movt	r0, #1
   14e48:	bl	1c260 <__assert_fail@plt+0xac5c>
   14e4c:	b	14dac <__assert_fail@plt+0x37a8>
   14e50:	bl	11484 <__errno_location@plt>
   14e54:	ldr	r3, [r0]
   14e58:	mov	r2, #7
   14e5c:	str	r3, [r4, #32]
   14e60:	strh	r2, [r4, #56]	; 0x38
   14e64:	str	r4, [r8]
   14e68:	b	148b4 <__assert_fail@plt+0x32b0>
   14e6c:	mov	r1, r2
   14e70:	movw	r0, #56208	; 0xdb90
   14e74:	movt	r0, #1
   14e78:	bl	1c260 <__assert_fail@plt+0xac5c>
   14e7c:	b	14e00 <__assert_fail@plt+0x37fc>
   14e80:	bl	11484 <__errno_location@plt>
   14e84:	ldr	r3, [r0]
   14e88:	mov	r2, #7
   14e8c:	str	r3, [r5, #32]
   14e90:	strh	r2, [r5, #56]	; 0x38
   14e94:	b	14cec <__assert_fail@plt+0x36e8>
   14e98:	cmp	r2, #4
   14e9c:	bhi	14eb0 <__assert_fail@plt+0x38ac>
   14ea0:	mov	r3, #0
   14ea4:	strh	r2, [r1, #60]	; 0x3c
   14ea8:	mov	r0, r3
   14eac:	bx	lr
   14eb0:	str	r4, [sp, #-8]!
   14eb4:	str	lr, [sp, #4]
   14eb8:	bl	11484 <__errno_location@plt>
   14ebc:	mov	r2, #22
   14ec0:	mov	r3, #1
   14ec4:	ldr	r4, [sp]
   14ec8:	add	sp, sp, #4
   14ecc:	str	r2, [r0]
   14ed0:	mov	r0, r3
   14ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14edc:	mov	r5, r0
   14ee0:	strd	r6, [sp, #8]
   14ee4:	strd	r8, [sp, #16]
   14ee8:	mov	r8, r1
   14eec:	str	sl, [sp, #24]
   14ef0:	str	lr, [sp, #28]
   14ef4:	bl	11484 <__errno_location@plt>
   14ef8:	bics	r2, r8, #4096	; 0x1000
   14efc:	mov	r6, r0
   14f00:	movne	r3, #22
   14f04:	movne	r0, #0
   14f08:	strne	r3, [r6]
   14f0c:	bne	14fd4 <__assert_fail@plt+0x39d0>
   14f10:	ldr	r9, [r5]
   14f14:	str	r2, [r6]
   14f18:	ldr	r3, [r5, #48]	; 0x30
   14f1c:	ands	r0, r3, #8192	; 0x2000
   14f20:	bne	15084 <__assert_fail@plt+0x3a80>
   14f24:	ldrh	r3, [r9, #56]	; 0x38
   14f28:	cmp	r3, #9
   14f2c:	beq	1508c <__assert_fail@plt+0x3a88>
   14f30:	cmp	r3, #1
   14f34:	bne	14fd4 <__assert_fail@plt+0x39d0>
   14f38:	ldr	r4, [r5, #4]
   14f3c:	cmp	r4, #0
   14f40:	bne	14f60 <__assert_fail@plt+0x395c>
   14f44:	b	14f80 <__assert_fail@plt+0x397c>
   14f48:	bl	115ec <closedir@plt>
   14f4c:	mov	r0, r4
   14f50:	bl	1c300 <__assert_fail@plt+0xacfc>
   14f54:	cmp	r7, #0
   14f58:	beq	14f80 <__assert_fail@plt+0x397c>
   14f5c:	mov	r4, r7
   14f60:	ldr	r7, [r4, #8]
   14f64:	ldr	r0, [r4, #12]
   14f68:	cmp	r0, #0
   14f6c:	bne	14f48 <__assert_fail@plt+0x3944>
   14f70:	mov	r0, r4
   14f74:	bl	1c300 <__assert_fail@plt+0xacfc>
   14f78:	cmp	r7, #0
   14f7c:	bne	14f5c <__assert_fail@plt+0x3958>
   14f80:	cmp	r8, #4096	; 0x1000
   14f84:	movne	r4, #1
   14f88:	bne	14f9c <__assert_fail@plt+0x3998>
   14f8c:	ldr	r3, [r5, #48]	; 0x30
   14f90:	mov	r4, #2
   14f94:	orr	r3, r3, #4096	; 0x1000
   14f98:	str	r3, [r5, #48]	; 0x30
   14f9c:	ldr	r3, [r9, #48]	; 0x30
   14fa0:	cmp	r3, #0
   14fa4:	bne	14fc4 <__assert_fail@plt+0x39c0>
   14fa8:	ldr	r3, [r9, #24]
   14fac:	ldrb	r3, [r3]
   14fb0:	cmp	r3, #47	; 0x2f
   14fb4:	beq	14fc4 <__assert_fail@plt+0x39c0>
   14fb8:	ldr	r3, [r5, #48]	; 0x30
   14fbc:	tst	r3, #4
   14fc0:	beq	14fec <__assert_fail@plt+0x39e8>
   14fc4:	mov	r1, r4
   14fc8:	mov	r0, r5
   14fcc:	bl	13398 <__assert_fail@plt+0x1d94>
   14fd0:	str	r0, [r5, #4]
   14fd4:	ldrd	r4, [sp]
   14fd8:	ldrd	r6, [sp, #8]
   14fdc:	ldrd	r8, [sp, #16]
   14fe0:	ldr	sl, [sp, #24]
   14fe4:	add	sp, sp, #28
   14fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fec:	lsl	r2, r3, #11
   14ff0:	tst	r3, #512	; 0x200
   14ff4:	and	r2, r2, #32768	; 0x8000
   14ff8:	orr	r2, r2, #540672	; 0x84000
   14ffc:	orr	r2, r2, #2304	; 0x900
   15000:	beq	15094 <__assert_fail@plt+0x3a90>
   15004:	movw	r1, #56208	; 0xdb90
   15008:	movt	r1, #1
   1500c:	ldr	r0, [r5, #32]
   15010:	bl	168bc <__assert_fail@plt+0x52b8>
   15014:	mov	r7, r0
   15018:	cmp	r7, #0
   1501c:	movlt	r3, #0
   15020:	movlt	r0, r3
   15024:	strlt	r3, [r5, #4]
   15028:	blt	14fd4 <__assert_fail@plt+0x39d0>
   1502c:	mov	r1, r4
   15030:	mov	r0, r5
   15034:	bl	13398 <__assert_fail@plt+0x1d94>
   15038:	ldr	r3, [r5, #48]	; 0x30
   1503c:	str	r0, [r5, #4]
   15040:	ands	r4, r3, #512	; 0x200
   15044:	beq	150ac <__assert_fail@plt+0x3aa8>
   15048:	ldr	r1, [r5, #32]
   1504c:	sub	r3, r7, r1
   15050:	cmn	r1, #100	; 0x64
   15054:	clz	r3, r3
   15058:	lsr	r3, r3, #5
   1505c:	moveq	r3, #0
   15060:	cmp	r3, #0
   15064:	bne	150e4 <__assert_fail@plt+0x3ae0>
   15068:	add	r0, r5, #60	; 0x3c
   1506c:	bl	16824 <__assert_fail@plt+0x5220>
   15070:	cmp	r0, #0
   15074:	blt	1507c <__assert_fail@plt+0x3a78>
   15078:	bl	115d4 <close@plt>
   1507c:	str	r7, [r5, #32]
   15080:	b	150c4 <__assert_fail@plt+0x3ac0>
   15084:	mov	r0, r2
   15088:	b	14fd4 <__assert_fail@plt+0x39d0>
   1508c:	ldr	r0, [r9, #8]
   15090:	b	14fd4 <__assert_fail@plt+0x39d0>
   15094:	mov	r1, r2
   15098:	movw	r0, #56208	; 0xdb90
   1509c:	movt	r0, #1
   150a0:	bl	1c260 <__assert_fail@plt+0xac5c>
   150a4:	mov	r7, r0
   150a8:	b	15018 <__assert_fail@plt+0x3a14>
   150ac:	mov	r0, r7
   150b0:	bl	11568 <fchdir@plt>
   150b4:	cmp	r0, #0
   150b8:	bne	150cc <__assert_fail@plt+0x3ac8>
   150bc:	mov	r0, r7
   150c0:	bl	115d4 <close@plt>
   150c4:	ldr	r0, [r5, #4]
   150c8:	b	14fd4 <__assert_fail@plt+0x39d0>
   150cc:	ldr	r5, [r6]
   150d0:	mov	r0, r7
   150d4:	bl	115d4 <close@plt>
   150d8:	mov	r0, r4
   150dc:	str	r5, [r6]
   150e0:	b	14fd4 <__assert_fail@plt+0x39d0>
   150e4:	bl	115c8 <abort@plt>
   150e8:	ror	r0, r0, #3
   150ec:	udiv	r3, r0, r1
   150f0:	mls	r0, r3, r1, r0
   150f4:	bx	lr
   150f8:	sub	r0, r1, r0
   150fc:	clz	r0, r0
   15100:	lsr	r0, r0, #5
   15104:	bx	lr
   15108:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1510c:	mov	r5, r1
   15110:	strd	r6, [sp, #8]
   15114:	mov	r6, r0
   15118:	mov	r7, r3
   1511c:	mov	r0, r1
   15120:	strd	r8, [sp, #16]
   15124:	strd	sl, [sp, #24]
   15128:	mov	fp, r2
   1512c:	str	lr, [sp, #32]
   15130:	sub	sp, sp, #4
   15134:	ldr	r1, [r6, #8]
   15138:	ldr	r3, [r6, #24]
   1513c:	blx	r3
   15140:	ldr	r3, [r6, #8]
   15144:	cmp	r0, r3
   15148:	bcs	15264 <__assert_fail@plt+0x3c60>
   1514c:	ldr	r8, [r6]
   15150:	lsl	r9, r0, #3
   15154:	mov	sl, r0
   15158:	add	r4, r8, r9
   1515c:	str	r4, [fp]
   15160:	ldr	r1, [r8, r0, lsl #3]
   15164:	cmp	r1, #0
   15168:	beq	1525c <__assert_fail@plt+0x3c58>
   1516c:	cmp	r1, r5
   15170:	beq	15224 <__assert_fail@plt+0x3c20>
   15174:	mov	r0, r5
   15178:	ldr	r3, [r6, #28]
   1517c:	blx	r3
   15180:	cmp	r0, #0
   15184:	bne	15220 <__assert_fail@plt+0x3c1c>
   15188:	ldr	r3, [r4, #4]
   1518c:	cmp	r3, #0
   15190:	beq	1525c <__assert_fail@plt+0x3c58>
   15194:	ldr	r1, [r3]
   15198:	cmp	r5, r1
   1519c:	bne	151c0 <__assert_fail@plt+0x3bbc>
   151a0:	b	151dc <__assert_fail@plt+0x3bd8>
   151a4:	ldr	r4, [r4, #4]
   151a8:	ldr	r3, [r4, #4]
   151ac:	cmp	r3, #0
   151b0:	beq	1525c <__assert_fail@plt+0x3c58>
   151b4:	ldr	r1, [r3]
   151b8:	cmp	r1, r5
   151bc:	beq	151dc <__assert_fail@plt+0x3bd8>
   151c0:	mov	r0, r5
   151c4:	ldr	r3, [r6, #28]
   151c8:	blx	r3
   151cc:	cmp	r0, #0
   151d0:	beq	151a4 <__assert_fail@plt+0x3ba0>
   151d4:	ldr	r3, [r4, #4]
   151d8:	ldr	r1, [r3]
   151dc:	cmp	r7, #0
   151e0:	beq	15200 <__assert_fail@plt+0x3bfc>
   151e4:	ldr	r0, [r3, #4]
   151e8:	mov	r2, #0
   151ec:	str	r0, [r4, #4]
   151f0:	str	r2, [r3]
   151f4:	ldr	r2, [r6, #36]	; 0x24
   151f8:	str	r2, [r3, #4]
   151fc:	str	r3, [r6, #36]	; 0x24
   15200:	mov	r0, r1
   15204:	add	sp, sp, #4
   15208:	ldrd	r4, [sp]
   1520c:	ldrd	r6, [sp, #8]
   15210:	ldrd	r8, [sp, #16]
   15214:	ldrd	sl, [sp, #24]
   15218:	add	sp, sp, #32
   1521c:	pop	{pc}		; (ldr pc, [sp], #4)
   15220:	ldr	r1, [r8, sl, lsl #3]
   15224:	cmp	r7, #0
   15228:	beq	15200 <__assert_fail@plt+0x3bfc>
   1522c:	ldr	r0, [r4, #4]
   15230:	cmp	r0, #0
   15234:	streq	r0, [r8, sl, lsl #3]
   15238:	beq	15200 <__assert_fail@plt+0x3bfc>
   1523c:	ldrd	r2, [r0]
   15240:	mov	ip, #0
   15244:	strd	r2, [r8, r9]
   15248:	str	ip, [r0]
   1524c:	ldr	r3, [r6, #36]	; 0x24
   15250:	str	r3, [r0, #4]
   15254:	str	r0, [r6, #36]	; 0x24
   15258:	b	15200 <__assert_fail@plt+0x3bfc>
   1525c:	mov	r1, #0
   15260:	b	15200 <__assert_fail@plt+0x3bfc>
   15264:	bl	115c8 <abort@plt>
   15268:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1526c:	ldr	r3, [r1, #4]
   15270:	strd	r6, [sp, #8]
   15274:	ldr	r6, [r1]
   15278:	strd	r8, [sp, #16]
   1527c:	str	sl, [sp, #24]
   15280:	str	lr, [sp, #28]
   15284:	cmp	r6, r3
   15288:	bcs	15368 <__assert_fail@plt+0x3d64>
   1528c:	mov	r8, r2
   15290:	mov	r5, r0
   15294:	mov	r7, r1
   15298:	add	r6, r6, #8
   1529c:	mov	r9, #0
   152a0:	b	152b0 <__assert_fail@plt+0x3cac>
   152a4:	cmp	r3, r6
   152a8:	add	r6, r6, #8
   152ac:	bls	15368 <__assert_fail@plt+0x3d64>
   152b0:	ldr	sl, [r6, #-8]
   152b4:	cmp	sl, #0
   152b8:	beq	152a4 <__assert_fail@plt+0x3ca0>
   152bc:	ldr	r4, [r6, #-4]
   152c0:	cmp	r4, #0
   152c4:	beq	1534c <__assert_fail@plt+0x3d48>
   152c8:	ldr	r1, [r5, #8]
   152cc:	b	152e8 <__assert_fail@plt+0x3ce4>
   152d0:	ldr	r3, [ip, #4]
   152d4:	cmp	r2, #0
   152d8:	str	r3, [r4, #4]
   152dc:	str	r4, [ip, #4]
   152e0:	mov	r4, r2
   152e4:	beq	15348 <__assert_fail@plt+0x3d44>
   152e8:	ldr	sl, [r4]
   152ec:	ldr	r3, [r5, #24]
   152f0:	mov	r0, sl
   152f4:	blx	r3
   152f8:	ldr	r1, [r5, #8]
   152fc:	cmp	r0, r1
   15300:	bcs	1541c <__assert_fail@plt+0x3e18>
   15304:	ldr	r3, [r5]
   15308:	ldr	r2, [r4, #4]
   1530c:	ldr	lr, [r3, r0, lsl #3]
   15310:	add	ip, r3, r0, lsl #3
   15314:	cmp	lr, #0
   15318:	bne	152d0 <__assert_fail@plt+0x3ccc>
   1531c:	ldr	ip, [r5, #12]
   15320:	cmp	r2, #0
   15324:	str	sl, [r3, r0, lsl #3]
   15328:	add	ip, ip, #1
   1532c:	str	ip, [r5, #12]
   15330:	str	lr, [r4]
   15334:	ldr	r3, [r5, #36]	; 0x24
   15338:	str	r3, [r4, #4]
   1533c:	str	r4, [r5, #36]	; 0x24
   15340:	mov	r4, r2
   15344:	bne	152e8 <__assert_fail@plt+0x3ce4>
   15348:	ldr	sl, [r6, #-8]
   1534c:	cmp	r8, #0
   15350:	str	r9, [r6, #-4]
   15354:	beq	15384 <__assert_fail@plt+0x3d80>
   15358:	ldr	r3, [r7, #4]
   1535c:	cmp	r3, r6
   15360:	add	r6, r6, #8
   15364:	bhi	152b0 <__assert_fail@plt+0x3cac>
   15368:	mov	r0, #1
   1536c:	ldrd	r4, [sp]
   15370:	ldrd	r6, [sp, #8]
   15374:	ldrd	r8, [sp, #16]
   15378:	ldr	sl, [sp, #24]
   1537c:	add	sp, sp, #28
   15380:	pop	{pc}		; (ldr pc, [sp], #4)
   15384:	mov	r0, sl
   15388:	ldr	r1, [r5, #8]
   1538c:	ldr	r3, [r5, #24]
   15390:	blx	r3
   15394:	ldr	r3, [r5, #8]
   15398:	cmp	r0, r3
   1539c:	bcs	1541c <__assert_fail@plt+0x3e18>
   153a0:	ldr	r3, [r5]
   153a4:	ldr	r2, [r3, r0, lsl #3]
   153a8:	add	r4, r3, r0, lsl #3
   153ac:	cmp	r2, #0
   153b0:	beq	153f0 <__assert_fail@plt+0x3dec>
   153b4:	ldr	r0, [r5, #36]	; 0x24
   153b8:	cmp	r0, #0
   153bc:	beq	15404 <__assert_fail@plt+0x3e00>
   153c0:	ldr	r3, [r0, #4]
   153c4:	str	r3, [r5, #36]	; 0x24
   153c8:	ldr	r3, [r4, #4]
   153cc:	str	sl, [r0]
   153d0:	str	r3, [r0, #4]
   153d4:	str	r0, [r4, #4]
   153d8:	ldr	r2, [r7, #12]
   153dc:	str	r9, [r6, #-8]
   153e0:	ldr	r3, [r7, #4]
   153e4:	sub	r2, r2, #1
   153e8:	str	r2, [r7, #12]
   153ec:	b	152a4 <__assert_fail@plt+0x3ca0>
   153f0:	ldr	r2, [r5, #12]
   153f4:	str	sl, [r3, r0, lsl #3]
   153f8:	add	r2, r2, #1
   153fc:	str	r2, [r5, #12]
   15400:	b	153d8 <__assert_fail@plt+0x3dd4>
   15404:	mov	r0, #8
   15408:	bl	1bc5c <__assert_fail@plt+0xa658>
   1540c:	cmp	r0, #0
   15410:	bne	153c8 <__assert_fail@plt+0x3dc4>
   15414:	mov	r0, r8
   15418:	b	1536c <__assert_fail@plt+0x3d68>
   1541c:	bl	115c8 <abort@plt>
   15420:	ldr	r0, [r0, #8]
   15424:	bx	lr
   15428:	ldr	r0, [r0, #12]
   1542c:	bx	lr
   15430:	ldr	r0, [r0, #16]
   15434:	bx	lr
   15438:	ldm	r0, {r1, r3}
   1543c:	cmp	r1, r3
   15440:	bcs	154b4 <__assert_fail@plt+0x3eb0>
   15444:	sub	ip, r3, #1
   15448:	add	r3, r1, #16
   1544c:	sub	ip, ip, r1
   15450:	mov	r0, #0
   15454:	bic	ip, ip, #7
   15458:	add	r1, r1, #8
   1545c:	add	ip, ip, r3
   15460:	b	15470 <__assert_fail@plt+0x3e6c>
   15464:	add	r1, r1, #8
   15468:	cmp	r1, ip
   1546c:	beq	154b0 <__assert_fail@plt+0x3eac>
   15470:	ldr	r3, [r1, #-8]
   15474:	cmp	r3, #0
   15478:	beq	15464 <__assert_fail@plt+0x3e60>
   1547c:	ldr	r3, [r1, #-4]
   15480:	mov	r2, #1
   15484:	cmp	r3, #0
   15488:	beq	1549c <__assert_fail@plt+0x3e98>
   1548c:	ldr	r3, [r3, #4]
   15490:	add	r2, r2, #1
   15494:	cmp	r3, #0
   15498:	bne	1548c <__assert_fail@plt+0x3e88>
   1549c:	cmp	r0, r2
   154a0:	add	r1, r1, #8
   154a4:	movcc	r0, r2
   154a8:	cmp	r1, ip
   154ac:	bne	15470 <__assert_fail@plt+0x3e6c>
   154b0:	bx	lr
   154b4:	mov	r0, #0
   154b8:	bx	lr
   154bc:	ldm	r0, {r1, r3}
   154c0:	push	{lr}		; (str lr, [sp, #-4]!)
   154c4:	cmp	r1, r3
   154c8:	bcs	1555c <__assert_fail@plt+0x3f58>
   154cc:	sub	ip, r3, #1
   154d0:	mov	r2, #0
   154d4:	sub	ip, ip, r1
   154d8:	add	r3, r1, #16
   154dc:	bic	ip, ip, #7
   154e0:	add	r1, r1, #8
   154e4:	add	ip, ip, r3
   154e8:	mov	lr, r2
   154ec:	b	154fc <__assert_fail@plt+0x3ef8>
   154f0:	add	r1, r1, #8
   154f4:	cmp	r1, ip
   154f8:	beq	15538 <__assert_fail@plt+0x3f34>
   154fc:	ldr	r3, [r1, #-8]
   15500:	cmp	r3, #0
   15504:	beq	154f0 <__assert_fail@plt+0x3eec>
   15508:	ldr	r3, [r1, #-4]
   1550c:	add	lr, lr, #1
   15510:	add	r2, r2, #1
   15514:	cmp	r3, #0
   15518:	beq	154f0 <__assert_fail@plt+0x3eec>
   1551c:	ldr	r3, [r3, #4]
   15520:	add	r2, r2, #1
   15524:	cmp	r3, #0
   15528:	bne	1551c <__assert_fail@plt+0x3f18>
   1552c:	add	r1, r1, #8
   15530:	cmp	r1, ip
   15534:	bne	154fc <__assert_fail@plt+0x3ef8>
   15538:	ldr	r3, [r0, #12]
   1553c:	cmp	r3, lr
   15540:	movne	r0, #0
   15544:	bne	15558 <__assert_fail@plt+0x3f54>
   15548:	ldr	r0, [r0, #16]
   1554c:	sub	r0, r0, r2
   15550:	clz	r0, r0
   15554:	lsr	r0, r0, #5
   15558:	pop	{pc}		; (ldr pc, [sp], #4)
   1555c:	mov	r2, #0
   15560:	mov	lr, r2
   15564:	b	15538 <__assert_fail@plt+0x3f34>
   15568:	strd	r4, [sp, #-20]!	; 0xffffffec
   1556c:	mov	r4, r1
   15570:	ldr	r2, [r0]
   15574:	ldr	r1, [r0, #4]
   15578:	ldr	r3, [r0, #16]
   1557c:	strd	r6, [sp, #8]
   15580:	str	lr, [sp, #16]
   15584:	sub	sp, sp, #12
   15588:	cmp	r2, r1
   1558c:	ldrd	r6, [r0, #8]
   15590:	bcs	15690 <__assert_fail@plt+0x408c>
   15594:	sub	ip, r1, #1
   15598:	add	r1, r2, #16
   1559c:	sub	ip, ip, r2
   155a0:	add	r0, r2, #8
   155a4:	bic	ip, ip, #7
   155a8:	mov	r5, #0
   155ac:	add	ip, ip, r1
   155b0:	b	155c0 <__assert_fail@plt+0x3fbc>
   155b4:	add	r0, r0, #8
   155b8:	cmp	r0, ip
   155bc:	beq	15600 <__assert_fail@plt+0x3ffc>
   155c0:	ldr	r2, [r0, #-8]
   155c4:	cmp	r2, #0
   155c8:	beq	155b4 <__assert_fail@plt+0x3fb0>
   155cc:	ldr	r2, [r0, #-4]
   155d0:	mov	r1, #1
   155d4:	cmp	r2, #0
   155d8:	beq	155ec <__assert_fail@plt+0x3fe8>
   155dc:	ldr	r2, [r2, #4]
   155e0:	add	r1, r1, #1
   155e4:	cmp	r2, #0
   155e8:	bne	155dc <__assert_fail@plt+0x3fd8>
   155ec:	cmp	r5, r1
   155f0:	add	r0, r0, #8
   155f4:	movcc	r5, r1
   155f8:	cmp	r0, ip
   155fc:	bne	155c0 <__assert_fail@plt+0x3fbc>
   15600:	mov	r1, #1
   15604:	mov	r0, r4
   15608:	movw	r2, #56232	; 0xdba8
   1560c:	movt	r2, #1
   15610:	bl	114cc <__fprintf_chk@plt>
   15614:	mov	r3, r6
   15618:	mov	r1, #1
   1561c:	mov	r0, r4
   15620:	movw	r2, #56256	; 0xdbc0
   15624:	movt	r2, #1
   15628:	bl	114cc <__fprintf_chk@plt>
   1562c:	vmov	s15, r7
   15630:	mov	r3, r7
   15634:	mov	r1, #1
   15638:	vldr	d5, [pc, #88]	; 15698 <__assert_fail@plt+0x4094>
   1563c:	mov	r0, r4
   15640:	movw	r2, #56280	; 0xdbd8
   15644:	movt	r2, #1
   15648:	vcvt.f64.u32	d6, s15
   1564c:	vmov	s15, r6
   15650:	vmul.f64	d6, d6, d5
   15654:	vcvt.f64.u32	d7, s15
   15658:	vdiv.f64	d5, d6, d7
   1565c:	vstr	d5, [sp]
   15660:	bl	114cc <__fprintf_chk@plt>
   15664:	mov	r3, r5
   15668:	mov	r0, r4
   1566c:	movw	r2, #56316	; 0xdbfc
   15670:	movt	r2, #1
   15674:	mov	r1, #1
   15678:	add	sp, sp, #12
   1567c:	ldrd	r4, [sp]
   15680:	ldrd	r6, [sp, #8]
   15684:	ldr	lr, [sp, #16]
   15688:	add	sp, sp, #20
   1568c:	b	114cc <__fprintf_chk@plt>
   15690:	mov	r5, #0
   15694:	b	15600 <__assert_fail@plt+0x3ffc>
   15698:	andeq	r0, r0, r0
   1569c:	subsmi	r0, r9, r0
   156a0:	strd	r4, [sp, #-16]!
   156a4:	mov	r5, r1
   156a8:	str	r6, [sp, #8]
   156ac:	mov	r6, r0
   156b0:	mov	r0, r1
   156b4:	str	lr, [sp, #12]
   156b8:	ldr	r1, [r6, #8]
   156bc:	ldr	r3, [r6, #24]
   156c0:	blx	r3
   156c4:	ldr	r3, [r6, #8]
   156c8:	cmp	r0, r3
   156cc:	bcs	1573c <__assert_fail@plt+0x4138>
   156d0:	ldr	r4, [r6]
   156d4:	ldr	r1, [r4, r0, lsl #3]
   156d8:	add	r4, r4, r0, lsl #3
   156dc:	cmp	r1, #0
   156e0:	beq	1571c <__assert_fail@plt+0x4118>
   156e4:	cmp	r1, r5
   156e8:	bne	156fc <__assert_fail@plt+0x40f8>
   156ec:	b	15720 <__assert_fail@plt+0x411c>
   156f0:	ldr	r1, [r4]
   156f4:	cmp	r5, r1
   156f8:	beq	15720 <__assert_fail@plt+0x411c>
   156fc:	mov	r0, r5
   15700:	ldr	r3, [r6, #28]
   15704:	blx	r3
   15708:	cmp	r0, #0
   1570c:	bne	15734 <__assert_fail@plt+0x4130>
   15710:	ldr	r4, [r4, #4]
   15714:	cmp	r4, #0
   15718:	bne	156f0 <__assert_fail@plt+0x40ec>
   1571c:	mov	r1, #0
   15720:	ldrd	r4, [sp]
   15724:	mov	r0, r1
   15728:	ldr	r6, [sp, #8]
   1572c:	add	sp, sp, #12
   15730:	pop	{pc}		; (ldr pc, [sp], #4)
   15734:	ldr	r1, [r4]
   15738:	b	15720 <__assert_fail@plt+0x411c>
   1573c:	bl	115c8 <abort@plt>
   15740:	ldr	r3, [r0, #16]
   15744:	cmp	r3, #0
   15748:	beq	1579c <__assert_fail@plt+0x4198>
   1574c:	ldr	r3, [r0]
   15750:	ldr	r2, [r0, #4]
   15754:	cmp	r3, r2
   15758:	bcs	15790 <__assert_fail@plt+0x418c>
   1575c:	ldr	r0, [r3]
   15760:	cmp	r0, #0
   15764:	bxne	lr
   15768:	sub	r2, r2, #1
   1576c:	sub	r2, r2, r3
   15770:	bic	r2, r2, #7
   15774:	add	r2, r3, r2
   15778:	b	15788 <__assert_fail@plt+0x4184>
   1577c:	ldr	r0, [r3, #8]!
   15780:	cmp	r0, #0
   15784:	bxne	lr
   15788:	cmp	r3, r2
   1578c:	bne	1577c <__assert_fail@plt+0x4178>
   15790:	str	r4, [sp, #-8]!
   15794:	str	lr, [sp, #4]
   15798:	bl	115c8 <abort@plt>
   1579c:	mov	r0, r3
   157a0:	bx	lr
   157a4:	strd	r4, [sp, #-16]!
   157a8:	mov	r5, r0
   157ac:	mov	r4, r1
   157b0:	mov	r0, r1
   157b4:	ldr	r1, [r5, #8]
   157b8:	ldr	r3, [r5, #24]
   157bc:	str	r6, [sp, #8]
   157c0:	str	lr, [sp, #12]
   157c4:	blx	r3
   157c8:	ldr	r3, [r5, #8]
   157cc:	cmp	r0, r3
   157d0:	bcs	15838 <__assert_fail@plt+0x4234>
   157d4:	ldr	r2, [r5]
   157d8:	add	r2, r2, r0, lsl #3
   157dc:	mov	r3, r2
   157e0:	b	157ec <__assert_fail@plt+0x41e8>
   157e4:	cmp	r3, #0
   157e8:	beq	15804 <__assert_fail@plt+0x4200>
   157ec:	ldm	r3, {r1, r3}
   157f0:	cmp	r1, r4
   157f4:	bne	157e4 <__assert_fail@plt+0x41e0>
   157f8:	cmp	r3, #0
   157fc:	ldrne	r0, [r3]
   15800:	bne	15828 <__assert_fail@plt+0x4224>
   15804:	ldr	r3, [r5, #4]
   15808:	b	15818 <__assert_fail@plt+0x4214>
   1580c:	ldr	r0, [r2]
   15810:	cmp	r0, #0
   15814:	bne	15828 <__assert_fail@plt+0x4224>
   15818:	add	r2, r2, #8
   1581c:	cmp	r3, r2
   15820:	bhi	1580c <__assert_fail@plt+0x4208>
   15824:	mov	r0, #0
   15828:	ldrd	r4, [sp]
   1582c:	ldr	r6, [sp, #8]
   15830:	add	sp, sp, #12
   15834:	pop	{pc}		; (ldr pc, [sp], #4)
   15838:	bl	115c8 <abort@plt>
   1583c:	strd	r4, [sp, #-16]!
   15840:	mov	r3, #0
   15844:	ldr	r5, [r0]
   15848:	str	r6, [sp, #8]
   1584c:	str	lr, [sp, #12]
   15850:	ldr	lr, [r0, #4]
   15854:	cmp	lr, r5
   15858:	bls	15874 <__assert_fail@plt+0x4270>
   1585c:	ldr	ip, [r5]
   15860:	cmp	ip, #0
   15864:	bne	15888 <__assert_fail@plt+0x4284>
   15868:	add	r5, r5, #8
   1586c:	cmp	r5, lr
   15870:	bcc	1585c <__assert_fail@plt+0x4258>
   15874:	ldrd	r4, [sp]
   15878:	mov	r0, r3
   1587c:	ldr	r6, [sp, #8]
   15880:	add	sp, sp, #12
   15884:	pop	{pc}		; (ldr pc, [sp], #4)
   15888:	cmp	r2, r3
   1588c:	bls	15874 <__assert_fail@plt+0x4270>
   15890:	str	ip, [r1, r3, lsl #2]
   15894:	add	r4, r3, #1
   15898:	lsl	lr, r3, #2
   1589c:	ldr	ip, [r5, #4]
   158a0:	cmp	ip, #0
   158a4:	beq	15904 <__assert_fail@plt+0x4300>
   158a8:	cmp	r2, r4
   158ac:	bls	158f8 <__assert_fail@plt+0x42f4>
   158b0:	ldr	r6, [ip]
   158b4:	add	r3, r3, #2
   158b8:	str	r6, [r1, r4, lsl #2]
   158bc:	ldr	ip, [ip, #4]
   158c0:	cmp	ip, #0
   158c4:	beq	158f0 <__assert_fail@plt+0x42ec>
   158c8:	add	lr, lr, #4
   158cc:	add	lr, r1, lr
   158d0:	cmp	r2, r3
   158d4:	add	r3, r3, #1
   158d8:	beq	158fc <__assert_fail@plt+0x42f8>
   158dc:	ldr	r4, [ip]
   158e0:	str	r4, [lr, #4]!
   158e4:	ldr	ip, [ip, #4]
   158e8:	cmp	ip, #0
   158ec:	bne	158d0 <__assert_fail@plt+0x42cc>
   158f0:	ldr	lr, [r0, #4]
   158f4:	b	15868 <__assert_fail@plt+0x4264>
   158f8:	mov	r2, r4
   158fc:	mov	r3, r2
   15900:	b	15874 <__assert_fail@plt+0x4270>
   15904:	mov	r3, r4
   15908:	ldr	lr, [r0, #4]
   1590c:	b	15868 <__assert_fail@plt+0x4264>
   15910:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15914:	ldr	r3, [r0, #4]
   15918:	strd	r6, [sp, #8]
   1591c:	strd	r8, [sp, #16]
   15920:	ldr	r8, [r0]
   15924:	str	sl, [sp, #24]
   15928:	str	lr, [sp, #28]
   1592c:	cmp	r3, r8
   15930:	bls	159ac <__assert_fail@plt+0x43a8>
   15934:	mov	r7, r2
   15938:	mov	r6, r1
   1593c:	mov	r9, r0
   15940:	mov	r5, #0
   15944:	ldr	r0, [r8]
   15948:	cmp	r0, #0
   1594c:	bne	15978 <__assert_fail@plt+0x4374>
   15950:	add	r8, r8, #8
   15954:	cmp	r8, r3
   15958:	bcc	15944 <__assert_fail@plt+0x4340>
   1595c:	mov	r0, r5
   15960:	ldrd	r4, [sp]
   15964:	ldrd	r6, [sp, #8]
   15968:	ldrd	r8, [sp, #16]
   1596c:	ldr	sl, [sp, #24]
   15970:	add	sp, sp, #28
   15974:	pop	{pc}		; (ldr pc, [sp], #4)
   15978:	mov	r4, r8
   1597c:	b	15984 <__assert_fail@plt+0x4380>
   15980:	ldr	r0, [r4]
   15984:	mov	r1, r7
   15988:	blx	r6
   1598c:	cmp	r0, #0
   15990:	beq	1595c <__assert_fail@plt+0x4358>
   15994:	ldr	r4, [r4, #4]
   15998:	add	r5, r5, #1
   1599c:	cmp	r4, #0
   159a0:	bne	15980 <__assert_fail@plt+0x437c>
   159a4:	ldr	r3, [r9, #4]
   159a8:	b	15950 <__assert_fail@plt+0x434c>
   159ac:	mov	r5, #0
   159b0:	b	1595c <__assert_fail@plt+0x4358>
   159b4:	ldrb	r2, [r0]
   159b8:	cmp	r2, #0
   159bc:	beq	159e8 <__assert_fail@plt+0x43e4>
   159c0:	mov	r3, #0
   159c4:	rsb	r3, r3, r3, lsl #5
   159c8:	add	r3, r3, r2
   159cc:	ldrb	r2, [r0, #1]!
   159d0:	udiv	ip, r3, r1
   159d4:	cmp	r2, #0
   159d8:	mls	r3, r1, ip, r3
   159dc:	bne	159c4 <__assert_fail@plt+0x43c0>
   159e0:	mov	r0, r3
   159e4:	bx	lr
   159e8:	mov	r3, r2
   159ec:	mov	r0, r3
   159f0:	bx	lr
   159f4:	movw	r3, #56212	; 0xdb94
   159f8:	movt	r3, #1
   159fc:	strd	r4, [sp, #-8]!
   15a00:	ldrd	r4, [r3]
   15a04:	ldr	r1, [r3, #16]
   15a08:	ldrd	r2, [r3, #8]
   15a0c:	strd	r4, [r0]
   15a10:	ldrd	r4, [sp]
   15a14:	add	sp, sp, #8
   15a18:	strd	r2, [r0, #8]
   15a1c:	str	r1, [r0, #16]
   15a20:	bx	lr
   15a24:	cmp	r2, #0
   15a28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a2c:	movw	r4, #20712	; 0x50e8
   15a30:	movt	r4, #1
   15a34:	movne	r4, r2
   15a38:	strd	r6, [sp, #8]
   15a3c:	cmp	r3, #0
   15a40:	str	r8, [sp, #16]
   15a44:	mov	r8, r0
   15a48:	mov	r0, #40	; 0x28
   15a4c:	movw	r5, #20728	; 0x50f8
   15a50:	movt	r5, #1
   15a54:	mov	r7, r1
   15a58:	str	lr, [sp, #20]
   15a5c:	movne	r5, r3
   15a60:	bl	1bc5c <__assert_fail@plt+0xa658>
   15a64:	subs	r6, r0, #0
   15a68:	beq	15aac <__assert_fail@plt+0x44a8>
   15a6c:	cmp	r7, #0
   15a70:	movw	r3, #56212	; 0xdb94
   15a74:	movt	r3, #1
   15a78:	beq	15b38 <__assert_fail@plt+0x4534>
   15a7c:	cmp	r7, r3
   15a80:	str	r7, [r6, #20]
   15a84:	beq	15b3c <__assert_fail@plt+0x4538>
   15a88:	vldr	s14, [pc, #456]	; 15c58 <__assert_fail@plt+0x4654>
   15a8c:	vldr	s15, [r7, #8]
   15a90:	vcmpe.f32	s15, s14
   15a94:	vmrs	APSR_nzcv, fpscr
   15a98:	bgt	15ac4 <__assert_fail@plt+0x44c0>
   15a9c:	str	r3, [r6, #20]
   15aa0:	mov	r0, r6
   15aa4:	mov	r6, #0
   15aa8:	bl	1c300 <__assert_fail@plt+0xacfc>
   15aac:	mov	r0, r6
   15ab0:	ldrd	r4, [sp]
   15ab4:	ldrd	r6, [sp, #8]
   15ab8:	ldr	r8, [sp, #16]
   15abc:	add	sp, sp, #20
   15ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac4:	vldr	s13, [pc, #400]	; 15c5c <__assert_fail@plt+0x4658>
   15ac8:	vcmpe.f32	s15, s13
   15acc:	vmrs	APSR_nzcv, fpscr
   15ad0:	bpl	15a9c <__assert_fail@plt+0x4498>
   15ad4:	vldr	s13, [pc, #388]	; 15c60 <__assert_fail@plt+0x465c>
   15ad8:	vldr	s12, [r7, #12]
   15adc:	vcmpe.f32	s12, s13
   15ae0:	vmrs	APSR_nzcv, fpscr
   15ae4:	ble	15a9c <__assert_fail@plt+0x4498>
   15ae8:	vldr	s13, [r7]
   15aec:	vcmpe.f32	s13, #0.0
   15af0:	vmrs	APSR_nzcv, fpscr
   15af4:	blt	15a9c <__assert_fail@plt+0x4498>
   15af8:	vadd.f32	s14, s13, s14
   15afc:	vldr	s13, [r7, #4]
   15b00:	vcmpe.f32	s14, s13
   15b04:	vmrs	APSR_nzcv, fpscr
   15b08:	bpl	15a9c <__assert_fail@plt+0x4498>
   15b0c:	vldr	s12, [pc, #336]	; 15c64 <__assert_fail@plt+0x4660>
   15b10:	vcmpe.f32	s13, s12
   15b14:	vmrs	APSR_nzcv, fpscr
   15b18:	bhi	15a9c <__assert_fail@plt+0x4498>
   15b1c:	vcmpe.f32	s15, s14
   15b20:	vmrs	APSR_nzcv, fpscr
   15b24:	ble	15a9c <__assert_fail@plt+0x4498>
   15b28:	ldrb	r3, [r7, #16]
   15b2c:	cmp	r3, #0
   15b30:	bne	15b64 <__assert_fail@plt+0x4560>
   15b34:	b	15b40 <__assert_fail@plt+0x453c>
   15b38:	str	r3, [r6, #20]
   15b3c:	vldr	s15, [pc, #292]	; 15c68 <__assert_fail@plt+0x4664>
   15b40:	vmov	s14, r8
   15b44:	vldr	s13, [pc, #288]	; 15c6c <__assert_fail@plt+0x4668>
   15b48:	vcvt.f32.u32	s12, s14
   15b4c:	vdiv.f32	s14, s12, s15
   15b50:	vcmpe.f32	s14, s13
   15b54:	vmrs	APSR_nzcv, fpscr
   15b58:	bge	15bec <__assert_fail@plt+0x45e8>
   15b5c:	vcvt.u32.f32	s15, s14
   15b60:	vmov	r8, s15
   15b64:	cmp	r8, #10
   15b68:	movcs	r3, r8
   15b6c:	movcc	r3, #10
   15b70:	orr	r3, r3, #1
   15b74:	cmn	r3, #1
   15b78:	beq	15bec <__assert_fail@plt+0x45e8>
   15b7c:	movw	lr, #43691	; 0xaaab
   15b80:	movt	lr, #43690	; 0xaaaa
   15b84:	umull	r1, r2, lr, r3
   15b88:	cmp	r3, #9
   15b8c:	lsr	r2, r2, #1
   15b90:	add	r2, r2, r2, lsl #1
   15b94:	sub	r2, r3, r2
   15b98:	bls	15bd8 <__assert_fail@plt+0x45d4>
   15b9c:	cmp	r2, #0
   15ba0:	beq	15be0 <__assert_fail@plt+0x45dc>
   15ba4:	mov	ip, #16
   15ba8:	mov	r0, #9
   15bac:	mov	r1, #3
   15bb0:	b	15bbc <__assert_fail@plt+0x45b8>
   15bb4:	cmp	r2, #0
   15bb8:	beq	15be0 <__assert_fail@plt+0x45dc>
   15bbc:	add	r1, r1, #2
   15bc0:	add	r0, r0, ip
   15bc4:	cmp	r0, r3
   15bc8:	add	ip, ip, #8
   15bcc:	udiv	r2, r3, r1
   15bd0:	mls	r2, r1, r2, r3
   15bd4:	bcc	15bb4 <__assert_fail@plt+0x45b0>
   15bd8:	cmp	r2, #0
   15bdc:	bne	15bf8 <__assert_fail@plt+0x45f4>
   15be0:	add	r3, r3, #2
   15be4:	cmn	r3, #1
   15be8:	bne	15b84 <__assert_fail@plt+0x4580>
   15bec:	mov	r3, #0
   15bf0:	str	r3, [r6, #8]
   15bf4:	b	15aa0 <__assert_fail@plt+0x449c>
   15bf8:	lsrs	r2, r3, #30
   15bfc:	movne	r7, #1
   15c00:	moveq	r7, #0
   15c04:	tst	r3, #536870912	; 0x20000000
   15c08:	bne	15bec <__assert_fail@plt+0x45e8>
   15c0c:	cmp	r7, #0
   15c10:	bne	15bec <__assert_fail@plt+0x45e8>
   15c14:	mov	r0, r3
   15c18:	mov	r1, #8
   15c1c:	str	r3, [r6, #8]
   15c20:	bl	1bbe8 <__assert_fail@plt+0xa5e4>
   15c24:	cmp	r0, #0
   15c28:	str	r0, [r6]
   15c2c:	beq	15aa0 <__assert_fail@plt+0x449c>
   15c30:	ldr	r3, [r6, #8]
   15c34:	str	r7, [r6, #12]
   15c38:	str	r7, [r6, #16]
   15c3c:	strd	r4, [r6, #24]
   15c40:	str	r7, [r6, #36]	; 0x24
   15c44:	add	r0, r0, r3, lsl #3
   15c48:	ldr	r3, [sp, #24]
   15c4c:	str	r0, [r6, #4]
   15c50:	str	r3, [r6, #32]
   15c54:	b	15aac <__assert_fail@plt+0x44a8>
   15c58:	stclcc	12, cr12, [ip, #820]	; 0x334
   15c5c:	svccc	0x00666666
   15c60:	svccc	0x008ccccd
   15c64:	svccc	0x00800000
   15c68:	svccc	0x004ccccd
   15c6c:	svcmi	0x00800000
   15c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c74:	mov	r5, r0
   15c78:	ldr	r2, [r0, #4]
   15c7c:	strd	r6, [sp, #8]
   15c80:	ldr	r6, [r0]
   15c84:	str	r8, [sp, #16]
   15c88:	str	lr, [sp, #20]
   15c8c:	cmp	r6, r2
   15c90:	addcc	r6, r6, #8
   15c94:	movcc	r7, #0
   15c98:	bcc	15cac <__assert_fail@plt+0x46a8>
   15c9c:	b	15d20 <__assert_fail@plt+0x471c>
   15ca0:	cmp	r2, r6
   15ca4:	add	r6, r6, #8
   15ca8:	bls	15d20 <__assert_fail@plt+0x471c>
   15cac:	ldr	r3, [r6, #-8]
   15cb0:	cmp	r3, #0
   15cb4:	beq	15ca0 <__assert_fail@plt+0x469c>
   15cb8:	ldr	r4, [r6, #-4]
   15cbc:	ldr	r3, [r5, #32]
   15cc0:	cmp	r4, #0
   15cc4:	beq	15cf8 <__assert_fail@plt+0x46f4>
   15cc8:	cmp	r3, #0
   15ccc:	beq	15d40 <__assert_fail@plt+0x473c>
   15cd0:	ldr	r0, [r4]
   15cd4:	blx	r3
   15cd8:	ldr	r1, [r4, #4]
   15cdc:	ldr	r3, [r5, #32]
   15ce0:	ldr	r2, [r5, #36]	; 0x24
   15ce4:	str	r7, [r4]
   15ce8:	str	r2, [r4, #4]
   15cec:	str	r4, [r5, #36]	; 0x24
   15cf0:	subs	r4, r1, #0
   15cf4:	bne	15cc8 <__assert_fail@plt+0x46c4>
   15cf8:	cmp	r3, #0
   15cfc:	beq	15d08 <__assert_fail@plt+0x4704>
   15d00:	ldr	r0, [r6, #-8]
   15d04:	blx	r3
   15d08:	str	r7, [r6, #-8]
   15d0c:	str	r7, [r6, #-4]
   15d10:	ldr	r2, [r5, #4]
   15d14:	cmp	r2, r6
   15d18:	add	r6, r6, #8
   15d1c:	bhi	15cac <__assert_fail@plt+0x46a8>
   15d20:	mov	r3, #0
   15d24:	ldrd	r6, [sp, #8]
   15d28:	ldr	r8, [sp, #16]
   15d2c:	str	r3, [r5, #12]
   15d30:	str	r3, [r5, #16]
   15d34:	ldrd	r4, [sp]
   15d38:	add	sp, sp, #20
   15d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d40:	ldr	r2, [r5, #36]	; 0x24
   15d44:	str	r7, [r4]
   15d48:	ldr	r3, [r4, #4]
   15d4c:	str	r2, [r4, #4]
   15d50:	mov	r2, r4
   15d54:	str	r2, [r5, #36]	; 0x24
   15d58:	subs	r4, r3, #0
   15d5c:	bne	15d44 <__assert_fail@plt+0x4740>
   15d60:	b	15d08 <__assert_fail@plt+0x4704>
   15d64:	strd	r4, [sp, #-16]!
   15d68:	ldr	r2, [r0, #32]
   15d6c:	ldr	r5, [r0]
   15d70:	ldr	r3, [r0, #4]
   15d74:	cmp	r2, #0
   15d78:	str	r6, [sp, #8]
   15d7c:	mov	r6, r0
   15d80:	str	lr, [sp, #12]
   15d84:	beq	15dec <__assert_fail@plt+0x47e8>
   15d88:	ldr	r2, [r0, #16]
   15d8c:	cmp	r2, #0
   15d90:	beq	15dec <__assert_fail@plt+0x47e8>
   15d94:	cmp	r5, r3
   15d98:	bcc	15dac <__assert_fail@plt+0x47a8>
   15d9c:	b	15e20 <__assert_fail@plt+0x481c>
   15da0:	add	r5, r5, #8
   15da4:	cmp	r5, r3
   15da8:	bcs	15de8 <__assert_fail@plt+0x47e4>
   15dac:	ldr	r0, [r5]
   15db0:	cmp	r0, #0
   15db4:	beq	15da0 <__assert_fail@plt+0x479c>
   15db8:	mov	r4, r5
   15dbc:	b	15dc4 <__assert_fail@plt+0x47c0>
   15dc0:	ldr	r0, [r4]
   15dc4:	ldr	r3, [r6, #32]
   15dc8:	blx	r3
   15dcc:	ldr	r4, [r4, #4]
   15dd0:	cmp	r4, #0
   15dd4:	bne	15dc0 <__assert_fail@plt+0x47bc>
   15dd8:	ldr	r3, [r6, #4]
   15ddc:	add	r5, r5, #8
   15de0:	cmp	r5, r3
   15de4:	bcc	15dac <__assert_fail@plt+0x47a8>
   15de8:	ldr	r5, [r6]
   15dec:	cmp	r3, r5
   15df0:	bls	15e20 <__assert_fail@plt+0x481c>
   15df4:	ldr	r0, [r5, #4]
   15df8:	cmp	r0, #0
   15dfc:	beq	15e14 <__assert_fail@plt+0x4810>
   15e00:	ldr	r4, [r0, #4]
   15e04:	bl	1c300 <__assert_fail@plt+0xacfc>
   15e08:	subs	r0, r4, #0
   15e0c:	bne	15e00 <__assert_fail@plt+0x47fc>
   15e10:	ldr	r3, [r6, #4]
   15e14:	add	r5, r5, #8
   15e18:	cmp	r5, r3
   15e1c:	bcc	15df4 <__assert_fail@plt+0x47f0>
   15e20:	ldr	r0, [r6, #36]	; 0x24
   15e24:	cmp	r0, #0
   15e28:	beq	15e3c <__assert_fail@plt+0x4838>
   15e2c:	ldr	r4, [r0, #4]
   15e30:	bl	1c300 <__assert_fail@plt+0xacfc>
   15e34:	subs	r0, r4, #0
   15e38:	bne	15e2c <__assert_fail@plt+0x4828>
   15e3c:	ldr	r0, [r6]
   15e40:	bl	1c300 <__assert_fail@plt+0xacfc>
   15e44:	mov	r0, r6
   15e48:	ldrd	r4, [sp]
   15e4c:	ldr	r6, [sp, #8]
   15e50:	ldr	lr, [sp, #12]
   15e54:	add	sp, sp, #16
   15e58:	b	1c300 <__assert_fail@plt+0xacfc>
   15e5c:	ldr	r3, [r0, #20]
   15e60:	strd	r4, [sp, #-20]!	; 0xffffffec
   15e64:	mov	r5, r0
   15e68:	ldrb	r2, [r3, #16]
   15e6c:	strd	r6, [sp, #8]
   15e70:	str	lr, [sp, #16]
   15e74:	sub	sp, sp, #44	; 0x2c
   15e78:	cmp	r2, #0
   15e7c:	bne	15ea8 <__assert_fail@plt+0x48a4>
   15e80:	vmov	s15, r1
   15e84:	vldr	s12, [r3, #8]
   15e88:	vldr	s13, [pc, #444]	; 1604c <__assert_fail@plt+0x4a48>
   15e8c:	vcvt.f32.u32	s15, s15
   15e90:	vdiv.f32	s14, s15, s12
   15e94:	vcmpe.f32	s14, s13
   15e98:	vmrs	APSR_nzcv, fpscr
   15e9c:	vcvtlt.u32.f32	s15, s14
   15ea0:	vmovlt	r1, s15
   15ea4:	bge	15f2c <__assert_fail@plt+0x4928>
   15ea8:	cmp	r1, #10
   15eac:	movcc	r1, #10
   15eb0:	orr	r4, r1, #1
   15eb4:	cmn	r4, #1
   15eb8:	beq	15f2c <__assert_fail@plt+0x4928>
   15ebc:	movw	ip, #43691	; 0xaaab
   15ec0:	movt	ip, #43690	; 0xaaaa
   15ec4:	umull	r2, r3, ip, r4
   15ec8:	cmp	r4, #9
   15ecc:	lsr	r3, r3, #1
   15ed0:	add	r3, r3, r3, lsl #1
   15ed4:	sub	r3, r4, r3
   15ed8:	bls	15f18 <__assert_fail@plt+0x4914>
   15edc:	cmp	r3, #0
   15ee0:	beq	15f20 <__assert_fail@plt+0x491c>
   15ee4:	mov	r0, #16
   15ee8:	mov	r1, #9
   15eec:	mov	r2, #3
   15ef0:	b	15f00 <__assert_fail@plt+0x48fc>
   15ef4:	cmp	r3, #0
   15ef8:	add	r0, r0, #8
   15efc:	beq	15f20 <__assert_fail@plt+0x491c>
   15f00:	add	r2, r2, #2
   15f04:	add	r1, r1, r0
   15f08:	cmp	r1, r4
   15f0c:	udiv	r3, r4, r2
   15f10:	mls	r3, r2, r3, r4
   15f14:	bcc	15ef4 <__assert_fail@plt+0x48f0>
   15f18:	cmp	r3, #0
   15f1c:	bne	15f48 <__assert_fail@plt+0x4944>
   15f20:	add	r4, r4, #2
   15f24:	cmn	r4, #1
   15f28:	bne	15ec4 <__assert_fail@plt+0x48c0>
   15f2c:	mov	r4, #0
   15f30:	mov	r0, r4
   15f34:	add	sp, sp, #44	; 0x2c
   15f38:	ldrd	r4, [sp]
   15f3c:	ldrd	r6, [sp, #8]
   15f40:	add	sp, sp, #16
   15f44:	pop	{pc}		; (ldr pc, [sp], #4)
   15f48:	lsrs	r3, r4, #30
   15f4c:	movne	r6, #1
   15f50:	moveq	r6, #0
   15f54:	tst	r4, #536870912	; 0x20000000
   15f58:	bne	15f2c <__assert_fail@plt+0x4928>
   15f5c:	cmp	r6, #0
   15f60:	bne	15f2c <__assert_fail@plt+0x4928>
   15f64:	ldr	r3, [r5, #8]
   15f68:	cmp	r3, r4
   15f6c:	beq	16014 <__assert_fail@plt+0x4a10>
   15f70:	mov	r1, #8
   15f74:	mov	r0, r4
   15f78:	bl	1bbe8 <__assert_fail@plt+0xa5e4>
   15f7c:	cmp	r0, #0
   15f80:	str	r0, [sp]
   15f84:	beq	15f2c <__assert_fail@plt+0x4928>
   15f88:	add	r3, r0, r4, lsl #3
   15f8c:	ldr	r7, [r5, #20]
   15f90:	mov	r2, r6
   15f94:	mov	r0, sp
   15f98:	mov	r1, r5
   15f9c:	ldr	lr, [r5, #28]
   15fa0:	stmib	sp, {r3, r4, r6}
   15fa4:	ldr	r4, [r5, #24]
   15fa8:	strd	r6, [sp, #16]
   15fac:	ldr	ip, [r5, #32]
   15fb0:	ldr	r3, [r5, #36]	; 0x24
   15fb4:	str	r4, [sp, #24]
   15fb8:	str	lr, [sp, #28]
   15fbc:	str	ip, [sp, #32]
   15fc0:	str	r3, [sp, #36]	; 0x24
   15fc4:	bl	15268 <__assert_fail@plt+0x3c64>
   15fc8:	subs	r4, r0, #0
   15fcc:	bne	1601c <__assert_fail@plt+0x4a18>
   15fd0:	ldr	r3, [sp, #36]	; 0x24
   15fd4:	mov	r2, #1
   15fd8:	mov	r1, sp
   15fdc:	mov	r0, r5
   15fe0:	str	r3, [r5, #36]	; 0x24
   15fe4:	bl	15268 <__assert_fail@plt+0x3c64>
   15fe8:	cmp	r0, #0
   15fec:	beq	16048 <__assert_fail@plt+0x4a44>
   15ff0:	mov	r1, sp
   15ff4:	mov	r0, r5
   15ff8:	mov	r2, r4
   15ffc:	bl	15268 <__assert_fail@plt+0x3c64>
   16000:	cmp	r0, #0
   16004:	beq	16048 <__assert_fail@plt+0x4a44>
   16008:	ldr	r0, [sp]
   1600c:	bl	1c300 <__assert_fail@plt+0xacfc>
   16010:	b	15f30 <__assert_fail@plt+0x492c>
   16014:	mov	r4, #1
   16018:	b	15f30 <__assert_fail@plt+0x492c>
   1601c:	ldr	r0, [r5]
   16020:	bl	1c300 <__assert_fail@plt+0xacfc>
   16024:	ldrd	r2, [sp]
   16028:	ldr	r1, [sp, #8]
   1602c:	strd	r2, [r5]
   16030:	ldr	r2, [sp, #12]
   16034:	str	r1, [r5, #8]
   16038:	ldr	r3, [sp, #36]	; 0x24
   1603c:	str	r2, [r5, #12]
   16040:	str	r3, [r5, #36]	; 0x24
   16044:	b	15f30 <__assert_fail@plt+0x492c>
   16048:	bl	115c8 <abort@plt>
   1604c:	svcmi	0x00800000
   16050:	strd	r4, [sp, #-16]!
   16054:	str	r6, [sp, #8]
   16058:	subs	r6, r1, #0
   1605c:	str	lr, [sp, #12]
   16060:	sub	sp, sp, #8
   16064:	beq	161f0 <__assert_fail@plt+0x4bec>
   16068:	mov	r3, #0
   1606c:	mov	r5, r2
   16070:	add	r2, sp, #4
   16074:	mov	r4, r0
   16078:	bl	15108 <__assert_fail@plt+0x3b04>
   1607c:	subs	r3, r0, #0
   16080:	beq	160ac <__assert_fail@plt+0x4aa8>
   16084:	cmp	r5, #0
   16088:	moveq	r0, r5
   1608c:	beq	16098 <__assert_fail@plt+0x4a94>
   16090:	mov	r0, #0
   16094:	str	r3, [r5]
   16098:	add	sp, sp, #8
   1609c:	ldrd	r4, [sp]
   160a0:	ldr	r6, [sp, #8]
   160a4:	add	sp, sp, #12
   160a8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ac:	vldr	s15, [r4, #8]
   160b0:	vldr	s14, [r4, #12]
   160b4:	ldr	r3, [r4, #20]
   160b8:	vcvt.f32.u32	s15, s15
   160bc:	vcvt.f32.u32	s14, s14
   160c0:	vldr	s13, [r3, #8]
   160c4:	vmul.f32	s12, s13, s15
   160c8:	vcmpe.f32	s14, s12
   160cc:	vmrs	APSR_nzcv, fpscr
   160d0:	bgt	16118 <__assert_fail@plt+0x4b14>
   160d4:	ldr	r2, [sp, #4]
   160d8:	ldr	r3, [r2]
   160dc:	cmp	r3, #0
   160e0:	beq	1621c <__assert_fail@plt+0x4c18>
   160e4:	ldr	r3, [r4, #36]	; 0x24
   160e8:	cmp	r3, #0
   160ec:	beq	16240 <__assert_fail@plt+0x4c3c>
   160f0:	ldr	r1, [r3, #4]
   160f4:	str	r1, [r4, #36]	; 0x24
   160f8:	ldr	r1, [r4, #16]
   160fc:	mov	r0, #1
   16100:	ldr	ip, [r2, #4]
   16104:	add	r1, r1, r0
   16108:	stm	r3, {r6, ip}
   1610c:	str	r3, [r2, #4]
   16110:	str	r1, [r4, #16]
   16114:	b	16098 <__assert_fail@plt+0x4a94>
   16118:	movw	r2, #56212	; 0xdb94
   1611c:	movt	r2, #1
   16120:	cmp	r3, r2
   16124:	beq	16258 <__assert_fail@plt+0x4c54>
   16128:	vldr	s12, [pc, #320]	; 16270 <__assert_fail@plt+0x4c6c>
   1612c:	vcmpe.f32	s13, s12
   16130:	vmrs	APSR_nzcv, fpscr
   16134:	ble	161f4 <__assert_fail@plt+0x4bf0>
   16138:	vldr	s11, [pc, #308]	; 16274 <__assert_fail@plt+0x4c70>
   1613c:	vcmpe.f32	s13, s11
   16140:	vmrs	APSR_nzcv, fpscr
   16144:	bpl	161f4 <__assert_fail@plt+0x4bf0>
   16148:	vldr	s10, [pc, #296]	; 16278 <__assert_fail@plt+0x4c74>
   1614c:	vldr	s11, [r3, #12]
   16150:	vcmpe.f32	s11, s10
   16154:	vmrs	APSR_nzcv, fpscr
   16158:	ble	161f4 <__assert_fail@plt+0x4bf0>
   1615c:	vldr	s10, [r3]
   16160:	vcmpe.f32	s10, #0.0
   16164:	vmrs	APSR_nzcv, fpscr
   16168:	blt	161f4 <__assert_fail@plt+0x4bf0>
   1616c:	vadd.f32	s12, s10, s12
   16170:	vldr	s10, [r3, #4]
   16174:	vcmpe.f32	s12, s10
   16178:	vmrs	APSR_nzcv, fpscr
   1617c:	bpl	161f4 <__assert_fail@plt+0x4bf0>
   16180:	vldr	s9, [pc, #244]	; 1627c <__assert_fail@plt+0x4c78>
   16184:	vcmpe.f32	s10, s9
   16188:	vmrs	APSR_nzcv, fpscr
   1618c:	bhi	161f4 <__assert_fail@plt+0x4bf0>
   16190:	vcmpe.f32	s13, s12
   16194:	vmrs	APSR_nzcv, fpscr
   16198:	ble	161f4 <__assert_fail@plt+0x4bf0>
   1619c:	ldrb	r3, [r3, #16]
   161a0:	vmul.f32	s15, s15, s11
   161a4:	cmp	r3, #0
   161a8:	beq	16214 <__assert_fail@plt+0x4c10>
   161ac:	vldr	s14, [pc, #204]	; 16280 <__assert_fail@plt+0x4c7c>
   161b0:	vcmpe.f32	s15, s14
   161b4:	vmrs	APSR_nzcv, fpscr
   161b8:	bge	16250 <__assert_fail@plt+0x4c4c>
   161bc:	vcvt.u32.f32	s15, s15
   161c0:	mov	r0, r4
   161c4:	vmov	r1, s15
   161c8:	bl	15e5c <__assert_fail@plt+0x4858>
   161cc:	cmp	r0, #0
   161d0:	beq	16250 <__assert_fail@plt+0x4c4c>
   161d4:	add	r2, sp, #4
   161d8:	mov	r3, #0
   161dc:	mov	r1, r6
   161e0:	mov	r0, r4
   161e4:	bl	15108 <__assert_fail@plt+0x3b04>
   161e8:	cmp	r0, #0
   161ec:	beq	160d4 <__assert_fail@plt+0x4ad0>
   161f0:	bl	115c8 <abort@plt>
   161f4:	vldr	s13, [pc, #136]	; 16284 <__assert_fail@plt+0x4c80>
   161f8:	str	r2, [r4, #20]
   161fc:	vmul.f32	s12, s15, s13
   16200:	vcmpe.f32	s14, s12
   16204:	vmrs	APSR_nzcv, fpscr
   16208:	ble	160d4 <__assert_fail@plt+0x4ad0>
   1620c:	vldr	s14, [pc, #116]	; 16288 <__assert_fail@plt+0x4c84>
   16210:	vmul.f32	s15, s15, s14
   16214:	vmul.f32	s15, s15, s13
   16218:	b	161ac <__assert_fail@plt+0x4ba8>
   1621c:	ldr	r1, [r4, #12]
   16220:	mov	r0, #1
   16224:	ldr	r3, [r4, #16]
   16228:	str	r6, [r2]
   1622c:	add	r2, r1, r0
   16230:	add	r3, r3, r0
   16234:	str	r2, [r4, #12]
   16238:	str	r3, [r4, #16]
   1623c:	b	16098 <__assert_fail@plt+0x4a94>
   16240:	mov	r0, #8
   16244:	bl	1bc5c <__assert_fail@plt+0xa658>
   16248:	subs	r3, r0, #0
   1624c:	bne	16268 <__assert_fail@plt+0x4c64>
   16250:	mvn	r0, #0
   16254:	b	16098 <__assert_fail@plt+0x4a94>
   16258:	vldr	s14, [pc, #40]	; 16288 <__assert_fail@plt+0x4c84>
   1625c:	vldr	s13, [pc, #32]	; 16284 <__assert_fail@plt+0x4c80>
   16260:	vmul.f32	s15, s15, s14
   16264:	b	16214 <__assert_fail@plt+0x4c10>
   16268:	ldr	r2, [sp, #4]
   1626c:	b	160f8 <__assert_fail@plt+0x4af4>
   16270:	stclcc	12, cr12, [ip, #820]	; 0x334
   16274:	svccc	0x00666666
   16278:	svccc	0x008ccccd
   1627c:	svccc	0x00800000
   16280:	svcmi	0x00800000
   16284:	svccc	0x004ccccd
   16288:	svccc	0x00b4fdf4
   1628c:	strd	r4, [sp, #-16]!
   16290:	str	r6, [sp, #8]
   16294:	subs	r6, r1, #0
   16298:	str	lr, [sp, #12]
   1629c:	sub	sp, sp, #8
   162a0:	beq	1641c <__assert_fail@plt+0x4e18>
   162a4:	mov	r3, #0
   162a8:	add	r2, sp, #4
   162ac:	mov	r4, r0
   162b0:	bl	15108 <__assert_fail@plt+0x3b04>
   162b4:	subs	r5, r0, #0
   162b8:	beq	162d4 <__assert_fail@plt+0x4cd0>
   162bc:	mov	r0, r5
   162c0:	add	sp, sp, #8
   162c4:	ldrd	r4, [sp]
   162c8:	ldr	r6, [sp, #8]
   162cc:	add	sp, sp, #12
   162d0:	pop	{pc}		; (ldr pc, [sp], #4)
   162d4:	vldr	s15, [r4, #8]
   162d8:	vldr	s14, [r4, #12]
   162dc:	ldr	r3, [r4, #20]
   162e0:	vcvt.f32.u32	s15, s15
   162e4:	vcvt.f32.u32	s14, s14
   162e8:	vldr	s13, [r3, #8]
   162ec:	vmul.f32	s12, s13, s15
   162f0:	vcmpe.f32	s14, s12
   162f4:	vmrs	APSR_nzcv, fpscr
   162f8:	bgt	16344 <__assert_fail@plt+0x4d40>
   162fc:	ldr	r3, [sp, #4]
   16300:	ldr	r2, [r3]
   16304:	cmp	r2, #0
   16308:	beq	16448 <__assert_fail@plt+0x4e44>
   1630c:	ldr	r0, [r4, #36]	; 0x24
   16310:	cmp	r0, #0
   16314:	beq	1646c <__assert_fail@plt+0x4e68>
   16318:	ldr	r2, [r0, #4]
   1631c:	str	r2, [r4, #36]	; 0x24
   16320:	ldr	r2, [r4, #16]
   16324:	mov	r5, r6
   16328:	ldr	r1, [r3, #4]
   1632c:	str	r6, [r0]
   16330:	add	r2, r2, #1
   16334:	str	r1, [r0, #4]
   16338:	str	r0, [r3, #4]
   1633c:	str	r2, [r4, #16]
   16340:	b	162bc <__assert_fail@plt+0x4cb8>
   16344:	movw	r2, #56212	; 0xdb94
   16348:	movt	r2, #1
   1634c:	cmp	r3, r2
   16350:	beq	16484 <__assert_fail@plt+0x4e80>
   16354:	vldr	s12, [pc, #312]	; 16494 <__assert_fail@plt+0x4e90>
   16358:	vcmpe.f32	s13, s12
   1635c:	vmrs	APSR_nzcv, fpscr
   16360:	ble	16420 <__assert_fail@plt+0x4e1c>
   16364:	vldr	s11, [pc, #300]	; 16498 <__assert_fail@plt+0x4e94>
   16368:	vcmpe.f32	s13, s11
   1636c:	vmrs	APSR_nzcv, fpscr
   16370:	bpl	16420 <__assert_fail@plt+0x4e1c>
   16374:	vldr	s10, [pc, #288]	; 1649c <__assert_fail@plt+0x4e98>
   16378:	vldr	s11, [r3, #12]
   1637c:	vcmpe.f32	s11, s10
   16380:	vmrs	APSR_nzcv, fpscr
   16384:	ble	16420 <__assert_fail@plt+0x4e1c>
   16388:	vldr	s10, [r3]
   1638c:	vcmpe.f32	s10, #0.0
   16390:	vmrs	APSR_nzcv, fpscr
   16394:	blt	16420 <__assert_fail@plt+0x4e1c>
   16398:	vadd.f32	s12, s10, s12
   1639c:	vldr	s10, [r3, #4]
   163a0:	vcmpe.f32	s12, s10
   163a4:	vmrs	APSR_nzcv, fpscr
   163a8:	bpl	16420 <__assert_fail@plt+0x4e1c>
   163ac:	vldr	s9, [pc, #236]	; 164a0 <__assert_fail@plt+0x4e9c>
   163b0:	vcmpe.f32	s10, s9
   163b4:	vmrs	APSR_nzcv, fpscr
   163b8:	bhi	16420 <__assert_fail@plt+0x4e1c>
   163bc:	vcmpe.f32	s13, s12
   163c0:	vmrs	APSR_nzcv, fpscr
   163c4:	ble	16420 <__assert_fail@plt+0x4e1c>
   163c8:	ldrb	r3, [r3, #16]
   163cc:	vmul.f32	s15, s15, s11
   163d0:	cmp	r3, #0
   163d4:	beq	16440 <__assert_fail@plt+0x4e3c>
   163d8:	vldr	s14, [pc, #196]	; 164a4 <__assert_fail@plt+0x4ea0>
   163dc:	vcmpe.f32	s15, s14
   163e0:	vmrs	APSR_nzcv, fpscr
   163e4:	bge	162bc <__assert_fail@plt+0x4cb8>
   163e8:	vcvt.u32.f32	s15, s15
   163ec:	mov	r0, r4
   163f0:	vmov	r1, s15
   163f4:	bl	15e5c <__assert_fail@plt+0x4858>
   163f8:	cmp	r0, #0
   163fc:	beq	162bc <__assert_fail@plt+0x4cb8>
   16400:	add	r2, sp, #4
   16404:	mov	r3, #0
   16408:	mov	r1, r6
   1640c:	mov	r0, r4
   16410:	bl	15108 <__assert_fail@plt+0x3b04>
   16414:	cmp	r0, #0
   16418:	beq	162fc <__assert_fail@plt+0x4cf8>
   1641c:	bl	115c8 <abort@plt>
   16420:	vldr	s13, [pc, #128]	; 164a8 <__assert_fail@plt+0x4ea4>
   16424:	str	r2, [r4, #20]
   16428:	vmul.f32	s12, s15, s13
   1642c:	vcmpe.f32	s14, s12
   16430:	vmrs	APSR_nzcv, fpscr
   16434:	ble	162fc <__assert_fail@plt+0x4cf8>
   16438:	vldr	s14, [pc, #108]	; 164ac <__assert_fail@plt+0x4ea8>
   1643c:	vmul.f32	s15, s15, s14
   16440:	vmul.f32	s15, s15, s13
   16444:	b	163d8 <__assert_fail@plt+0x4dd4>
   16448:	ldr	r2, [r4, #12]
   1644c:	mov	r5, r6
   16450:	str	r6, [r3]
   16454:	ldr	r3, [r4, #16]
   16458:	add	r2, r2, #1
   1645c:	add	r3, r3, #1
   16460:	str	r2, [r4, #12]
   16464:	str	r3, [r4, #16]
   16468:	b	162bc <__assert_fail@plt+0x4cb8>
   1646c:	mov	r0, #8
   16470:	bl	1bc5c <__assert_fail@plt+0xa658>
   16474:	cmp	r0, #0
   16478:	beq	162bc <__assert_fail@plt+0x4cb8>
   1647c:	ldr	r3, [sp, #4]
   16480:	b	16320 <__assert_fail@plt+0x4d1c>
   16484:	vldr	s14, [pc, #32]	; 164ac <__assert_fail@plt+0x4ea8>
   16488:	vldr	s13, [pc, #24]	; 164a8 <__assert_fail@plt+0x4ea4>
   1648c:	vmul.f32	s15, s15, s14
   16490:	b	16440 <__assert_fail@plt+0x4e3c>
   16494:	stclcc	12, cr12, [ip, #820]	; 0x334
   16498:	svccc	0x00666666
   1649c:	svccc	0x008ccccd
   164a0:	svccc	0x00800000
   164a4:	svcmi	0x00800000
   164a8:	svccc	0x004ccccd
   164ac:	svccc	0x00b4fdf4
   164b0:	strd	r4, [sp, #-16]!
   164b4:	mov	r3, #1
   164b8:	mov	r4, r0
   164bc:	str	r6, [sp, #8]
   164c0:	str	lr, [sp, #12]
   164c4:	sub	sp, sp, #8
   164c8:	add	r2, sp, #4
   164cc:	bl	15108 <__assert_fail@plt+0x3b04>
   164d0:	subs	r5, r0, #0
   164d4:	beq	164f4 <__assert_fail@plt+0x4ef0>
   164d8:	ldr	r2, [sp, #4]
   164dc:	ldr	r3, [r4, #16]
   164e0:	ldr	r2, [r2]
   164e4:	sub	r3, r3, #1
   164e8:	str	r3, [r4, #16]
   164ec:	cmp	r2, #0
   164f0:	beq	1650c <__assert_fail@plt+0x4f08>
   164f4:	mov	r0, r5
   164f8:	add	sp, sp, #8
   164fc:	ldrd	r4, [sp]
   16500:	ldr	r6, [sp, #8]
   16504:	add	sp, sp, #12
   16508:	pop	{pc}		; (ldr pc, [sp], #4)
   1650c:	vldr	s15, [r4, #8]
   16510:	ldr	r3, [r4, #12]
   16514:	ldr	r2, [r4, #20]
   16518:	vcvt.f32.u32	s15, s15
   1651c:	sub	r3, r3, #1
   16520:	vmov	s14, r3
   16524:	vldr	s13, [r2]
   16528:	str	r3, [r4, #12]
   1652c:	vmul.f32	s12, s13, s15
   16530:	vcvt.f32.u32	s14, s14
   16534:	vcmpe.f32	s14, s12
   16538:	vmrs	APSR_nzcv, fpscr
   1653c:	bpl	164f4 <__assert_fail@plt+0x4ef0>
   16540:	movw	r3, #56212	; 0xdb94
   16544:	movt	r3, #1
   16548:	cmp	r2, r3
   1654c:	beq	1662c <__assert_fail@plt+0x5028>
   16550:	vldr	s11, [pc, #224]	; 16638 <__assert_fail@plt+0x5034>
   16554:	vldr	s12, [r2, #8]
   16558:	vcmpe.f32	s12, s11
   1655c:	vmrs	APSR_nzcv, fpscr
   16560:	ble	16614 <__assert_fail@plt+0x5010>
   16564:	vldr	s10, [pc, #208]	; 1663c <__assert_fail@plt+0x5038>
   16568:	vcmpe.f32	s12, s10
   1656c:	vmrs	APSR_nzcv, fpscr
   16570:	bpl	16614 <__assert_fail@plt+0x5010>
   16574:	vldr	s10, [pc, #196]	; 16640 <__assert_fail@plt+0x503c>
   16578:	vldr	s9, [r2, #12]
   1657c:	vcmpe.f32	s9, s10
   16580:	vmrs	APSR_nzcv, fpscr
   16584:	ble	16614 <__assert_fail@plt+0x5010>
   16588:	vcmpe.f32	s13, #0.0
   1658c:	vmrs	APSR_nzcv, fpscr
   16590:	blt	16614 <__assert_fail@plt+0x5010>
   16594:	vadd.f32	s13, s13, s11
   16598:	vldr	s11, [r2, #4]
   1659c:	vcmpe.f32	s13, s11
   165a0:	vmrs	APSR_nzcv, fpscr
   165a4:	bpl	16614 <__assert_fail@plt+0x5010>
   165a8:	vldr	s10, [pc, #148]	; 16644 <__assert_fail@plt+0x5040>
   165ac:	vcmpe.f32	s11, s10
   165b0:	vmrs	APSR_nzcv, fpscr
   165b4:	bhi	16614 <__assert_fail@plt+0x5010>
   165b8:	vcmpe.f32	s12, s13
   165bc:	vmrs	APSR_nzcv, fpscr
   165c0:	ble	16614 <__assert_fail@plt+0x5010>
   165c4:	ldrb	r3, [r2, #16]
   165c8:	vmul.f32	s15, s15, s11
   165cc:	cmp	r3, #0
   165d0:	beq	16630 <__assert_fail@plt+0x502c>
   165d4:	vcvt.u32.f32	s15, s15
   165d8:	mov	r0, r4
   165dc:	vmov	r1, s15
   165e0:	bl	15e5c <__assert_fail@plt+0x4858>
   165e4:	cmp	r0, #0
   165e8:	bne	164f4 <__assert_fail@plt+0x4ef0>
   165ec:	ldr	r0, [r4, #36]	; 0x24
   165f0:	cmp	r0, #0
   165f4:	beq	16608 <__assert_fail@plt+0x5004>
   165f8:	ldr	r6, [r0, #4]
   165fc:	bl	1c300 <__assert_fail@plt+0xacfc>
   16600:	subs	r0, r6, #0
   16604:	bne	165f8 <__assert_fail@plt+0x4ff4>
   16608:	mov	r3, #0
   1660c:	str	r3, [r4, #36]	; 0x24
   16610:	b	164f4 <__assert_fail@plt+0x4ef0>
   16614:	vldr	s13, [pc, #44]	; 16648 <__assert_fail@plt+0x5044>
   16618:	str	r3, [r4, #20]
   1661c:	vmul.f32	s13, s15, s13
   16620:	vcmpe.f32	s14, s13
   16624:	vmrs	APSR_nzcv, fpscr
   16628:	bpl	164f4 <__assert_fail@plt+0x4ef0>
   1662c:	vldr	s12, [pc, #24]	; 1664c <__assert_fail@plt+0x5048>
   16630:	vmul.f32	s15, s15, s12
   16634:	b	165d4 <__assert_fail@plt+0x4fd0>
   16638:	stclcc	12, cr12, [ip, #820]	; 0x334
   1663c:	svccc	0x00666666
   16640:	svccc	0x008ccccd
   16644:	svccc	0x00800000
   16648:	andeq	r0, r0, r0
   1664c:	svccc	0x004ccccd
   16650:	strd	r4, [sp, #-16]!
   16654:	mov	r3, #1
   16658:	mov	r4, r0
   1665c:	str	r6, [sp, #8]
   16660:	str	lr, [sp, #12]
   16664:	sub	sp, sp, #8
   16668:	add	r2, sp, #4
   1666c:	bl	15108 <__assert_fail@plt+0x3b04>
   16670:	subs	r5, r0, #0
   16674:	beq	16694 <__assert_fail@plt+0x5090>
   16678:	ldr	r2, [sp, #4]
   1667c:	ldr	r3, [r4, #16]
   16680:	ldr	r2, [r2]
   16684:	sub	r3, r3, #1
   16688:	str	r3, [r4, #16]
   1668c:	cmp	r2, #0
   16690:	beq	166ac <__assert_fail@plt+0x50a8>
   16694:	mov	r0, r5
   16698:	add	sp, sp, #8
   1669c:	ldrd	r4, [sp]
   166a0:	ldr	r6, [sp, #8]
   166a4:	add	sp, sp, #12
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	vldr	s15, [r4, #8]
   166b0:	ldr	r3, [r4, #12]
   166b4:	ldr	r2, [r4, #20]
   166b8:	vcvt.f32.u32	s15, s15
   166bc:	sub	r3, r3, #1
   166c0:	vmov	s14, r3
   166c4:	vldr	s13, [r2]
   166c8:	str	r3, [r4, #12]
   166cc:	vmul.f32	s12, s13, s15
   166d0:	vcvt.f32.u32	s14, s14
   166d4:	vcmpe.f32	s14, s12
   166d8:	vmrs	APSR_nzcv, fpscr
   166dc:	bpl	16694 <__assert_fail@plt+0x5090>
   166e0:	movw	r3, #56212	; 0xdb94
   166e4:	movt	r3, #1
   166e8:	cmp	r2, r3
   166ec:	beq	167cc <__assert_fail@plt+0x51c8>
   166f0:	vldr	s11, [pc, #224]	; 167d8 <__assert_fail@plt+0x51d4>
   166f4:	vldr	s12, [r2, #8]
   166f8:	vcmpe.f32	s12, s11
   166fc:	vmrs	APSR_nzcv, fpscr
   16700:	ble	167b4 <__assert_fail@plt+0x51b0>
   16704:	vldr	s10, [pc, #208]	; 167dc <__assert_fail@plt+0x51d8>
   16708:	vcmpe.f32	s12, s10
   1670c:	vmrs	APSR_nzcv, fpscr
   16710:	bpl	167b4 <__assert_fail@plt+0x51b0>
   16714:	vldr	s10, [pc, #196]	; 167e0 <__assert_fail@plt+0x51dc>
   16718:	vldr	s9, [r2, #12]
   1671c:	vcmpe.f32	s9, s10
   16720:	vmrs	APSR_nzcv, fpscr
   16724:	ble	167b4 <__assert_fail@plt+0x51b0>
   16728:	vcmpe.f32	s13, #0.0
   1672c:	vmrs	APSR_nzcv, fpscr
   16730:	blt	167b4 <__assert_fail@plt+0x51b0>
   16734:	vadd.f32	s13, s13, s11
   16738:	vldr	s11, [r2, #4]
   1673c:	vcmpe.f32	s13, s11
   16740:	vmrs	APSR_nzcv, fpscr
   16744:	bpl	167b4 <__assert_fail@plt+0x51b0>
   16748:	vldr	s10, [pc, #148]	; 167e4 <__assert_fail@plt+0x51e0>
   1674c:	vcmpe.f32	s11, s10
   16750:	vmrs	APSR_nzcv, fpscr
   16754:	bhi	167b4 <__assert_fail@plt+0x51b0>
   16758:	vcmpe.f32	s12, s13
   1675c:	vmrs	APSR_nzcv, fpscr
   16760:	ble	167b4 <__assert_fail@plt+0x51b0>
   16764:	ldrb	r3, [r2, #16]
   16768:	vmul.f32	s15, s15, s11
   1676c:	cmp	r3, #0
   16770:	beq	167d0 <__assert_fail@plt+0x51cc>
   16774:	vcvt.u32.f32	s15, s15
   16778:	mov	r0, r4
   1677c:	vmov	r1, s15
   16780:	bl	15e5c <__assert_fail@plt+0x4858>
   16784:	cmp	r0, #0
   16788:	bne	16694 <__assert_fail@plt+0x5090>
   1678c:	ldr	r0, [r4, #36]	; 0x24
   16790:	cmp	r0, #0
   16794:	beq	167a8 <__assert_fail@plt+0x51a4>
   16798:	ldr	r6, [r0, #4]
   1679c:	bl	1c300 <__assert_fail@plt+0xacfc>
   167a0:	subs	r0, r6, #0
   167a4:	bne	16798 <__assert_fail@plt+0x5194>
   167a8:	mov	r3, #0
   167ac:	str	r3, [r4, #36]	; 0x24
   167b0:	b	16694 <__assert_fail@plt+0x5090>
   167b4:	vldr	s13, [pc, #44]	; 167e8 <__assert_fail@plt+0x51e4>
   167b8:	str	r3, [r4, #20]
   167bc:	vmul.f32	s13, s15, s13
   167c0:	vcmpe.f32	s14, s13
   167c4:	vmrs	APSR_nzcv, fpscr
   167c8:	bpl	16694 <__assert_fail@plt+0x5090>
   167cc:	vldr	s12, [pc, #24]	; 167ec <__assert_fail@plt+0x51e8>
   167d0:	vmul.f32	s15, s15, s12
   167d4:	b	16774 <__assert_fail@plt+0x5170>
   167d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   167dc:	svccc	0x00666666
   167e0:	svccc	0x008ccccd
   167e4:	svccc	0x00800000
   167e8:	andeq	r0, r0, r0
   167ec:	svccc	0x004ccccd
   167f0:	mov	r3, #0
   167f4:	mov	r2, #1
   167f8:	str	r1, [r0]
   167fc:	str	r1, [r0, #4]
   16800:	str	r1, [r0, #8]
   16804:	str	r1, [r0, #12]
   16808:	str	r1, [r0, #16]
   1680c:	str	r3, [r0, #20]
   16810:	str	r3, [r0, #24]
   16814:	strb	r2, [r0, #28]
   16818:	bx	lr
   1681c:	ldrb	r0, [r0, #28]
   16820:	bx	lr
   16824:	ldrb	ip, [r0, #28]
   16828:	mov	r2, r0
   1682c:	ldr	r3, [r0, #20]
   16830:	eor	ip, ip, #1
   16834:	add	r3, ip, r3
   16838:	and	r3, r3, #3
   1683c:	ldr	r0, [r0, r3, lsl #2]
   16840:	str	r1, [r2, r3, lsl #2]
   16844:	ldr	r1, [r2, #24]
   16848:	str	r3, [r2, #20]
   1684c:	cmp	r1, r3
   16850:	bne	16860 <__assert_fail@plt+0x525c>
   16854:	add	ip, ip, r1
   16858:	and	ip, ip, #3
   1685c:	str	ip, [r2, #24]
   16860:	mov	r3, #0
   16864:	strb	r3, [r2, #28]
   16868:	bx	lr
   1686c:	ldrb	r3, [r0, #28]
   16870:	cmp	r3, #0
   16874:	bne	168b0 <__assert_fail@plt+0x52ac>
   16878:	ldr	r1, [r0, #16]
   1687c:	ldr	r3, [r0, #20]
   16880:	ldr	r2, [r0, r3, lsl #2]
   16884:	str	r1, [r0, r3, lsl #2]
   16888:	ldr	r1, [r0, #24]
   1688c:	cmp	r3, r1
   16890:	moveq	r3, #1
   16894:	strbeq	r3, [r0, #28]
   16898:	beq	168a8 <__assert_fail@plt+0x52a4>
   1689c:	add	r3, r3, #3
   168a0:	and	r3, r3, #3
   168a4:	str	r3, [r0, #20]
   168a8:	mov	r0, r2
   168ac:	bx	lr
   168b0:	str	r4, [sp, #-8]!
   168b4:	str	lr, [sp, #4]
   168b8:	bl	115c8 <abort@plt>
   168bc:	push	{r2, r3}
   168c0:	push	{lr}		; (str lr, [sp, #-4]!)
   168c4:	sub	sp, sp, #12
   168c8:	ldr	r2, [sp, #16]
   168cc:	ands	r3, r2, #64	; 0x40
   168d0:	bne	168ec <__assert_fail@plt+0x52e8>
   168d4:	bl	1146c <openat64@plt>
   168d8:	bl	1adc0 <__assert_fail@plt+0x97bc>
   168dc:	add	sp, sp, #12
   168e0:	pop	{lr}		; (ldr lr, [sp], #4)
   168e4:	add	sp, sp, #8
   168e8:	bx	lr
   168ec:	add	ip, sp, #20
   168f0:	ldr	r3, [sp, #20]
   168f4:	str	ip, [sp, #4]
   168f8:	b	168d4 <__assert_fail@plt+0x52d0>
   168fc:	orr	r2, r2, #540672	; 0x84000
   16900:	strd	r4, [sp, #-16]!
   16904:	orr	r2, r2, #2304	; 0x900
   16908:	str	r6, [sp, #8]
   1690c:	mov	r6, r3
   16910:	str	lr, [sp, #12]
   16914:	bl	168bc <__assert_fail@plt+0x52b8>
   16918:	subs	r5, r0, #0
   1691c:	movlt	r4, #0
   16920:	blt	16934 <__assert_fail@plt+0x5330>
   16924:	bl	11550 <fdopendir@plt>
   16928:	subs	r4, r0, #0
   1692c:	beq	16948 <__assert_fail@plt+0x5344>
   16930:	str	r5, [r6]
   16934:	mov	r0, r4
   16938:	ldrd	r4, [sp]
   1693c:	ldr	r6, [sp, #8]
   16940:	add	sp, sp, #12
   16944:	pop	{pc}		; (ldr pc, [sp], #4)
   16948:	bl	11484 <__errno_location@plt>
   1694c:	mov	r6, r0
   16950:	mov	r0, r5
   16954:	ldr	r5, [r6]
   16958:	bl	115d4 <close@plt>
   1695c:	b	16930 <__assert_fail@plt+0x532c>
   16960:	strd	r4, [sp, #-16]!
   16964:	subs	r4, r0, #0
   16968:	str	r6, [sp, #8]
   1696c:	str	lr, [sp, #12]
   16970:	beq	16a08 <__assert_fail@plt+0x5404>
   16974:	mov	r1, #47	; 0x2f
   16978:	bl	1152c <strrchr@plt>
   1697c:	subs	r5, r0, #0
   16980:	beq	169e0 <__assert_fail@plt+0x53dc>
   16984:	add	r6, r5, #1
   16988:	sub	r3, r6, r4
   1698c:	cmp	r3, #6
   16990:	ble	169e0 <__assert_fail@plt+0x53dc>
   16994:	movw	r1, #56396	; 0xdc4c
   16998:	movt	r1, #1
   1699c:	mov	r2, #7
   169a0:	sub	r0, r5, #6
   169a4:	bl	115bc <strncmp@plt>
   169a8:	cmp	r0, #0
   169ac:	bne	169e0 <__assert_fail@plt+0x53dc>
   169b0:	movw	r1, #56404	; 0xdc54
   169b4:	movt	r1, #1
   169b8:	mov	r2, #3
   169bc:	mov	r0, r6
   169c0:	bl	115bc <strncmp@plt>
   169c4:	cmp	r0, #0
   169c8:	movne	r4, r6
   169cc:	bne	169e0 <__assert_fail@plt+0x53dc>
   169d0:	add	r4, r5, #4
   169d4:	movw	r3, #61872	; 0xf1b0
   169d8:	movt	r3, #2
   169dc:	str	r4, [r3]
   169e0:	movw	r2, #61964	; 0xf20c
   169e4:	movt	r2, #2
   169e8:	ldr	r6, [sp, #8]
   169ec:	movw	r3, #61876	; 0xf1b4
   169f0:	movt	r3, #2
   169f4:	str	r4, [r2]
   169f8:	str	r4, [r3]
   169fc:	ldrd	r4, [sp]
   16a00:	add	sp, sp, #12
   16a04:	pop	{pc}		; (ldr pc, [sp], #4)
   16a08:	movw	r3, #61888	; 0xf1c0
   16a0c:	movt	r3, #2
   16a10:	movw	r0, #56340	; 0xdc14
   16a14:	movt	r0, #1
   16a18:	ldr	r3, [r3]
   16a1c:	mov	r2, #55	; 0x37
   16a20:	mov	r1, #1
   16a24:	bl	11364 <fwrite@plt>
   16a28:	bl	115c8 <abort@plt>
   16a2c:	mov	r2, #5
   16a30:	strd	r4, [sp, #-16]!
   16a34:	mov	r5, r0
   16a38:	str	r6, [sp, #8]
   16a3c:	mov	r6, r1
   16a40:	mov	r1, r0
   16a44:	mov	r0, #0
   16a48:	str	lr, [sp, #12]
   16a4c:	bl	112f8 <dcgettext@plt>
   16a50:	cmp	r5, r0
   16a54:	mov	r4, r0
   16a58:	beq	16a70 <__assert_fail@plt+0x546c>
   16a5c:	mov	r0, r4
   16a60:	ldrd	r4, [sp]
   16a64:	ldr	r6, [sp, #8]
   16a68:	add	sp, sp, #12
   16a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a70:	bl	1c430 <__assert_fail@plt+0xae2c>
   16a74:	ldrb	r3, [r0]
   16a78:	bic	r3, r3, #32
   16a7c:	cmp	r3, #85	; 0x55
   16a80:	bne	16ae8 <__assert_fail@plt+0x54e4>
   16a84:	ldrb	r3, [r0, #1]
   16a88:	bic	r3, r3, #32
   16a8c:	cmp	r3, #84	; 0x54
   16a90:	bne	16b68 <__assert_fail@plt+0x5564>
   16a94:	ldrb	r3, [r0, #2]
   16a98:	bic	r3, r3, #32
   16a9c:	cmp	r3, #70	; 0x46
   16aa0:	bne	16b68 <__assert_fail@plt+0x5564>
   16aa4:	ldrb	r3, [r0, #3]
   16aa8:	cmp	r3, #45	; 0x2d
   16aac:	bne	16b68 <__assert_fail@plt+0x5564>
   16ab0:	ldrb	r3, [r0, #4]
   16ab4:	cmp	r3, #56	; 0x38
   16ab8:	bne	16b68 <__assert_fail@plt+0x5564>
   16abc:	ldrb	r3, [r0, #5]
   16ac0:	cmp	r3, #0
   16ac4:	bne	16b68 <__assert_fail@plt+0x5564>
   16ac8:	ldrb	r2, [r4]
   16acc:	movw	r3, #56496	; 0xdcb0
   16ad0:	movt	r3, #1
   16ad4:	movw	r4, #56508	; 0xdcbc
   16ad8:	movt	r4, #1
   16adc:	cmp	r2, #96	; 0x60
   16ae0:	movne	r4, r3
   16ae4:	b	16a5c <__assert_fail@plt+0x5458>
   16ae8:	cmp	r3, #71	; 0x47
   16aec:	bne	16b68 <__assert_fail@plt+0x5564>
   16af0:	ldrb	r3, [r0, #1]
   16af4:	bic	r3, r3, #32
   16af8:	cmp	r3, #66	; 0x42
   16afc:	bne	16b68 <__assert_fail@plt+0x5564>
   16b00:	ldrb	r3, [r0, #2]
   16b04:	cmp	r3, #49	; 0x31
   16b08:	bne	16b68 <__assert_fail@plt+0x5564>
   16b0c:	ldrb	r3, [r0, #3]
   16b10:	cmp	r3, #56	; 0x38
   16b14:	bne	16b68 <__assert_fail@plt+0x5564>
   16b18:	ldrb	r3, [r0, #4]
   16b1c:	cmp	r3, #48	; 0x30
   16b20:	bne	16b68 <__assert_fail@plt+0x5564>
   16b24:	ldrb	r3, [r0, #5]
   16b28:	cmp	r3, #51	; 0x33
   16b2c:	bne	16b68 <__assert_fail@plt+0x5564>
   16b30:	ldrb	r3, [r0, #6]
   16b34:	cmp	r3, #48	; 0x30
   16b38:	bne	16b68 <__assert_fail@plt+0x5564>
   16b3c:	ldrb	r3, [r0, #7]
   16b40:	cmp	r3, #0
   16b44:	bne	16b68 <__assert_fail@plt+0x5564>
   16b48:	ldrb	r2, [r4]
   16b4c:	movw	r3, #56500	; 0xdcb4
   16b50:	movt	r3, #1
   16b54:	movw	r4, #56504	; 0xdcb8
   16b58:	movt	r4, #1
   16b5c:	cmp	r2, #96	; 0x60
   16b60:	movne	r4, r3
   16b64:	b	16a5c <__assert_fail@plt+0x5458>
   16b68:	movw	r3, #56512	; 0xdcc0
   16b6c:	movt	r3, #1
   16b70:	cmp	r6, #9
   16b74:	movw	r4, #56492	; 0xdcac
   16b78:	movt	r4, #1
   16b7c:	movne	r4, r3
   16b80:	b	16a5c <__assert_fail@plt+0x5458>
   16b84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16b88:	strd	r6, [sp, #8]
   16b8c:	strd	r8, [sp, #16]
   16b90:	mov	r8, r3
   16b94:	strd	sl, [sp, #24]
   16b98:	mov	fp, r0
   16b9c:	mov	sl, r1
   16ba0:	str	lr, [sp, #32]
   16ba4:	sub	sp, sp, #140	; 0x8c
   16ba8:	ldr	r3, [sp, #180]	; 0xb4
   16bac:	str	r2, [sp, #28]
   16bb0:	and	r4, r3, #2
   16bb4:	ubfx	r3, r3, #1, #1
   16bb8:	str	r3, [sp, #44]	; 0x2c
   16bbc:	bl	1137c <__ctype_get_mb_cur_max@plt>
   16bc0:	ldr	r3, [sp, #176]	; 0xb0
   16bc4:	str	r0, [sp, #76]	; 0x4c
   16bc8:	cmp	r3, #10
   16bcc:	ldrls	pc, [pc, r3, lsl #2]
   16bd0:	b	1856c <__assert_fail@plt+0x6f68>
   16bd4:	andeq	r7, r1, r4, asr r0
   16bd8:	andeq	r7, r1, r0, ror r1
   16bdc:	andeq	r7, r1, ip, ror #13
   16be0:	ldrdeq	r7, [r1], -ip
   16be4:	andeq	r6, r1, ip, asr pc
   16be8:	ldrdeq	r6, [r1], -r8
   16bec:	strheq	r7, [r1], -r0
   16bf0:	andeq	r7, r1, r8, lsl r1
   16bf4:	andeq	r6, r1, r0, lsl #24
   16bf8:	andeq	r6, r1, r0, lsl #24
   16bfc:	andeq	r6, r1, r0, lsl #24
   16c00:	ldr	r3, [sp, #176]	; 0xb0
   16c04:	cmp	r3, #10
   16c08:	beq	16c34 <__assert_fail@plt+0x5630>
   16c0c:	mov	r1, r3
   16c10:	movw	r0, #56516	; 0xdcc4
   16c14:	movt	r0, #1
   16c18:	bl	16a2c <__assert_fail@plt+0x5428>
   16c1c:	str	r0, [sp, #188]	; 0xbc
   16c20:	movw	r0, #56512	; 0xdcc0
   16c24:	movt	r0, #1
   16c28:	ldr	r1, [sp, #176]	; 0xb0
   16c2c:	bl	16a2c <__assert_fail@plt+0x5428>
   16c30:	str	r0, [sp, #192]	; 0xc0
   16c34:	cmp	r4, #0
   16c38:	movne	r4, #0
   16c3c:	beq	182f8 <__assert_fail@plt+0x6cf4>
   16c40:	mov	r5, #0
   16c44:	ldr	r0, [sp, #192]	; 0xc0
   16c48:	mov	r9, r5
   16c4c:	str	r5, [sp, #64]	; 0x40
   16c50:	bl	11460 <strlen@plt>
   16c54:	mov	r3, #1
   16c58:	ldr	r2, [sp, #44]	; 0x2c
   16c5c:	cmp	r0, r5
   16c60:	moveq	r2, r5
   16c64:	str	r3, [sp, #32]
   16c68:	str	r3, [sp, #48]	; 0x30
   16c6c:	str	r5, [sp, #52]	; 0x34
   16c70:	str	r3, [sp, #60]	; 0x3c
   16c74:	ldr	r3, [sp, #180]	; 0xb4
   16c78:	str	r0, [sp, #56]	; 0x38
   16c7c:	str	r5, [sp, #68]	; 0x44
   16c80:	str	r5, [sp, #80]	; 0x50
   16c84:	str	r5, [sp, #84]	; 0x54
   16c88:	and	r3, r3, #1
   16c8c:	str	r2, [sp, #88]	; 0x58
   16c90:	str	r3, [sp, #92]	; 0x5c
   16c94:	ldr	r3, [sp, #180]	; 0xb4
   16c98:	and	r3, r3, #4
   16c9c:	str	r3, [sp, #96]	; 0x60
   16ca0:	ldr	r3, [sp, #192]	; 0xc0
   16ca4:	str	r3, [sp, #72]	; 0x48
   16ca8:	mov	r3, fp
   16cac:	mov	r7, #0
   16cb0:	mov	fp, r9
   16cb4:	mov	r9, r3
   16cb8:	cmn	r8, #1
   16cbc:	beq	172c0 <__assert_fail@plt+0x5cbc>
   16cc0:	subs	r6, r8, r7
   16cc4:	movne	r6, #1
   16cc8:	cmp	r6, #0
   16ccc:	beq	172d8 <__assert_fail@plt+0x5cd4>
   16cd0:	ldr	r0, [sp, #28]
   16cd4:	ldr	r3, [sp, #48]	; 0x30
   16cd8:	cmp	r3, #0
   16cdc:	add	r3, r0, r7
   16ce0:	str	r3, [sp, #36]	; 0x24
   16ce4:	beq	17764 <__assert_fail@plt+0x6160>
   16ce8:	ldr	r2, [sp, #56]	; 0x38
   16cec:	cmp	r2, #0
   16cf0:	beq	17c64 <__assert_fail@plt+0x6660>
   16cf4:	cmp	r2, #1
   16cf8:	mov	r3, r2
   16cfc:	movls	r3, #0
   16d00:	movhi	r3, #1
   16d04:	cmn	r8, #1
   16d08:	add	r5, r7, r2
   16d0c:	movne	r3, #0
   16d10:	cmp	r3, #0
   16d14:	beq	16d20 <__assert_fail@plt+0x571c>
   16d18:	bl	11460 <strlen@plt>
   16d1c:	mov	r8, r0
   16d20:	cmp	r5, r8
   16d24:	bhi	17c64 <__assert_fail@plt+0x6660>
   16d28:	ldr	r0, [sp, #36]	; 0x24
   16d2c:	ldr	r2, [sp, #56]	; 0x38
   16d30:	ldr	r1, [sp, #72]	; 0x48
   16d34:	bl	112d4 <memcmp@plt>
   16d38:	cmp	r0, #0
   16d3c:	bne	17c64 <__assert_fail@plt+0x6660>
   16d40:	ldr	r3, [sp, #44]	; 0x2c
   16d44:	cmp	r3, #0
   16d48:	bne	18410 <__assert_fail@plt+0x6e0c>
   16d4c:	ldr	r3, [sp, #36]	; 0x24
   16d50:	ldrb	r5, [r3]
   16d54:	cmp	r5, #126	; 0x7e
   16d58:	ldrls	pc, [pc, r5, lsl #2]
   16d5c:	b	181f8 <__assert_fail@plt+0x6bf4>
   16d60:	andeq	r7, r1, r4, lsr r4
   16d64:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d68:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d6c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d70:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d74:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d78:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d7c:	andeq	r7, r1, ip, lsl #7
   16d80:	andeq	r7, r1, r4, lsl #7
   16d84:	muleq	r1, r4, r3
   16d88:	andeq	r7, r1, r8, lsl r5
   16d8c:	andeq	r7, r1, r8, lsl #10
   16d90:	andeq	r7, r1, r0, lsr r2
   16d94:	andeq	r7, r1, r4, ror #9
   16d98:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16d9c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16da0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16da4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16da8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16db0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16db4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16db8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dbc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dc0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dc4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dc8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dcc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dd0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dd4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dd8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16ddc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16de0:	muleq	r1, r0, r5
   16de4:	andeq	r7, r1, r4, lsl #11
   16de8:	andeq	r7, r1, r4, lsl #11
   16dec:	andeq	r7, r1, r8, ror r5
   16df0:	andeq	r7, r1, r4, lsl #11
   16df4:	andeq	r7, r1, ip, asr r6
   16df8:	andeq	r7, r1, r4, lsl #11
   16dfc:	andeq	r7, r1, ip, asr #13
   16e00:	andeq	r7, r1, r4, lsl #11
   16e04:	andeq	r7, r1, r4, lsl #11
   16e08:	andeq	r7, r1, r4, lsl #11
   16e0c:	andeq	r7, r1, ip, asr r6
   16e10:	andeq	r7, r1, ip, asr r6
   16e14:	andeq	r7, r1, ip, asr r6
   16e18:	andeq	r7, r1, ip, asr r6
   16e1c:	andeq	r7, r1, ip, asr r6
   16e20:	andeq	r7, r1, ip, asr r6
   16e24:	andeq	r7, r1, ip, asr r6
   16e28:	andeq	r7, r1, ip, asr r6
   16e2c:	andeq	r7, r1, ip, asr r6
   16e30:	andeq	r7, r1, ip, asr r6
   16e34:	andeq	r7, r1, ip, asr r6
   16e38:	andeq	r7, r1, ip, asr r6
   16e3c:	andeq	r7, r1, ip, asr r6
   16e40:	andeq	r7, r1, ip, asr r6
   16e44:	andeq	r7, r1, ip, asr r6
   16e48:	andeq	r7, r1, ip, asr r6
   16e4c:	andeq	r7, r1, r4, lsl #11
   16e50:	andeq	r7, r1, r4, lsl #11
   16e54:	andeq	r7, r1, r4, lsl #11
   16e58:	andeq	r7, r1, r4, lsl #11
   16e5c:	andeq	r7, r1, ip, ror r6
   16e60:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16e64:	andeq	r7, r1, ip, asr r6
   16e68:	andeq	r7, r1, ip, asr r6
   16e6c:	andeq	r7, r1, ip, asr r6
   16e70:	andeq	r7, r1, ip, asr r6
   16e74:	andeq	r7, r1, ip, asr r6
   16e78:	andeq	r7, r1, ip, asr r6
   16e7c:	andeq	r7, r1, ip, asr r6
   16e80:	andeq	r7, r1, ip, asr r6
   16e84:	andeq	r7, r1, ip, asr r6
   16e88:	andeq	r7, r1, ip, asr r6
   16e8c:	andeq	r7, r1, ip, asr r6
   16e90:	andeq	r7, r1, ip, asr r6
   16e94:	andeq	r7, r1, ip, asr r6
   16e98:	andeq	r7, r1, ip, asr r6
   16e9c:	andeq	r7, r1, ip, asr r6
   16ea0:	andeq	r7, r1, ip, asr r6
   16ea4:	andeq	r7, r1, ip, asr r6
   16ea8:	andeq	r7, r1, ip, asr r6
   16eac:	andeq	r7, r1, ip, asr r6
   16eb0:	andeq	r7, r1, ip, asr r6
   16eb4:	andeq	r7, r1, ip, asr r6
   16eb8:	andeq	r7, r1, ip, asr r6
   16ebc:	andeq	r7, r1, ip, asr r6
   16ec0:	andeq	r7, r1, ip, asr r6
   16ec4:	andeq	r7, r1, ip, asr r6
   16ec8:	andeq	r7, r1, ip, asr r6
   16ecc:	andeq	r7, r1, r4, lsl #11
   16ed0:	andeq	r7, r1, r0, lsr #12
   16ed4:	andeq	r7, r1, ip, asr r6
   16ed8:	andeq	r7, r1, r4, lsl #11
   16edc:	andeq	r7, r1, ip, asr r6
   16ee0:	andeq	r7, r1, r4, lsl #11
   16ee4:	andeq	r7, r1, ip, asr r6
   16ee8:	andeq	r7, r1, ip, asr r6
   16eec:	andeq	r7, r1, ip, asr r6
   16ef0:	andeq	r7, r1, ip, asr r6
   16ef4:	andeq	r7, r1, ip, asr r6
   16ef8:	andeq	r7, r1, ip, asr r6
   16efc:	andeq	r7, r1, ip, asr r6
   16f00:	andeq	r7, r1, ip, asr r6
   16f04:	andeq	r7, r1, ip, asr r6
   16f08:	andeq	r7, r1, ip, asr r6
   16f0c:	andeq	r7, r1, ip, asr r6
   16f10:	andeq	r7, r1, ip, asr r6
   16f14:	andeq	r7, r1, ip, asr r6
   16f18:	andeq	r7, r1, ip, asr r6
   16f1c:	andeq	r7, r1, ip, asr r6
   16f20:	andeq	r7, r1, ip, asr r6
   16f24:	andeq	r7, r1, ip, asr r6
   16f28:	andeq	r7, r1, ip, asr r6
   16f2c:	andeq	r7, r1, ip, asr r6
   16f30:	andeq	r7, r1, ip, asr r6
   16f34:	andeq	r7, r1, ip, asr r6
   16f38:	andeq	r7, r1, ip, asr r6
   16f3c:	andeq	r7, r1, ip, asr r6
   16f40:	andeq	r7, r1, ip, asr r6
   16f44:	andeq	r7, r1, ip, asr r6
   16f48:	andeq	r7, r1, ip, asr r6
   16f4c:	andeq	r7, r1, ip, lsr #10
   16f50:	andeq	r7, r1, r4, lsl #11
   16f54:	andeq	r7, r1, ip, lsr #10
   16f58:	andeq	r7, r1, r8, ror r5
   16f5c:	ldr	r3, [sp, #180]	; 0xb4
   16f60:	cmp	r4, #0
   16f64:	and	r3, r3, #1
   16f68:	str	r3, [sp, #92]	; 0x5c
   16f6c:	ldr	r3, [sp, #180]	; 0xb4
   16f70:	and	r3, r3, #4
   16f74:	str	r3, [sp, #96]	; 0x60
   16f78:	moveq	r3, #1
   16f7c:	streq	r3, [sp, #60]	; 0x3c
   16f80:	beq	17710 <__assert_fail@plt+0x610c>
   16f84:	mov	r3, #0
   16f88:	mov	r2, #1
   16f8c:	mov	r4, r3
   16f90:	mov	r9, r3
   16f94:	str	r2, [sp, #32]
   16f98:	str	r2, [sp, #44]	; 0x2c
   16f9c:	str	r3, [sp, #48]	; 0x30
   16fa0:	str	r2, [sp, #52]	; 0x34
   16fa4:	str	r2, [sp, #56]	; 0x38
   16fa8:	str	r3, [sp, #60]	; 0x3c
   16fac:	str	r2, [sp, #64]	; 0x40
   16fb0:	str	r2, [sp, #68]	; 0x44
   16fb4:	str	r3, [sp, #80]	; 0x50
   16fb8:	str	r3, [sp, #84]	; 0x54
   16fbc:	str	r3, [sp, #88]	; 0x58
   16fc0:	movw	r3, #56512	; 0xdcc0
   16fc4:	movt	r3, #1
   16fc8:	str	r3, [sp, #72]	; 0x48
   16fcc:	mov	r3, #2
   16fd0:	str	r3, [sp, #176]	; 0xb0
   16fd4:	b	16ca8 <__assert_fail@plt+0x56a4>
   16fd8:	ldr	r3, [sp, #180]	; 0xb4
   16fdc:	cmp	r4, #0
   16fe0:	and	r3, r3, #1
   16fe4:	str	r3, [sp, #92]	; 0x5c
   16fe8:	ldr	r3, [sp, #180]	; 0xb4
   16fec:	and	r3, r3, #4
   16ff0:	str	r3, [sp, #96]	; 0x60
   16ff4:	bne	183c8 <__assert_fail@plt+0x6dc4>
   16ff8:	cmp	sl, #0
   16ffc:	beq	18174 <__assert_fail@plt+0x6b70>
   17000:	mov	r3, #34	; 0x22
   17004:	mov	r2, r4
   17008:	mov	r1, #1
   1700c:	mov	r9, r2
   17010:	strb	r3, [fp]
   17014:	movw	r3, #56492	; 0xdcac
   17018:	movt	r3, #1
   1701c:	mov	r4, r1
   17020:	str	r1, [sp, #32]
   17024:	str	r2, [sp, #44]	; 0x2c
   17028:	str	r1, [sp, #48]	; 0x30
   1702c:	str	r2, [sp, #52]	; 0x34
   17030:	str	r1, [sp, #56]	; 0x38
   17034:	str	r1, [sp, #60]	; 0x3c
   17038:	str	r2, [sp, #64]	; 0x40
   1703c:	str	r2, [sp, #68]	; 0x44
   17040:	str	r3, [sp, #72]	; 0x48
   17044:	str	r2, [sp, #80]	; 0x50
   17048:	str	r2, [sp, #84]	; 0x54
   1704c:	str	r2, [sp, #88]	; 0x58
   17050:	b	16ca8 <__assert_fail@plt+0x56a4>
   17054:	mov	r3, #0
   17058:	mov	r2, #1
   1705c:	mov	r9, r3
   17060:	str	r2, [sp, #32]
   17064:	str	r3, [sp, #44]	; 0x2c
   17068:	str	r3, [sp, #48]	; 0x30
   1706c:	str	r3, [sp, #52]	; 0x34
   17070:	str	r3, [sp, #60]	; 0x3c
   17074:	strd	r2, [sp, #64]	; 0x40
   17078:	str	r3, [sp, #72]	; 0x48
   1707c:	str	r3, [sp, #80]	; 0x50
   17080:	str	r3, [sp, #88]	; 0x58
   17084:	ldr	r3, [sp, #180]	; 0xb4
   17088:	and	r3, r3, r2
   1708c:	str	r3, [sp, #92]	; 0x5c
   17090:	ldr	r3, [sp, #180]	; 0xb4
   17094:	and	r3, r3, #4
   17098:	str	r3, [sp, #96]	; 0x60
   1709c:	ldr	r3, [sp, #176]	; 0xb0
   170a0:	mov	r4, r3
   170a4:	str	r3, [sp, #56]	; 0x38
   170a8:	str	r3, [sp, #84]	; 0x54
   170ac:	b	16ca8 <__assert_fail@plt+0x56a4>
   170b0:	mov	r3, #1
   170b4:	mov	r4, #0
   170b8:	mov	r9, r4
   170bc:	str	r3, [sp, #32]
   170c0:	str	r3, [sp, #44]	; 0x2c
   170c4:	str	r3, [sp, #48]	; 0x30
   170c8:	str	r4, [sp, #52]	; 0x34
   170cc:	str	r3, [sp, #56]	; 0x38
   170d0:	str	r3, [sp, #60]	; 0x3c
   170d4:	str	r3, [sp, #88]	; 0x58
   170d8:	movw	r3, #56492	; 0xdcac
   170dc:	movt	r3, #1
   170e0:	str	r4, [sp, #64]	; 0x40
   170e4:	str	r4, [sp, #68]	; 0x44
   170e8:	str	r3, [sp, #72]	; 0x48
   170ec:	ldr	r3, [sp, #180]	; 0xb4
   170f0:	str	r4, [sp, #80]	; 0x50
   170f4:	str	r4, [sp, #84]	; 0x54
   170f8:	and	r3, r3, #1
   170fc:	str	r3, [sp, #92]	; 0x5c
   17100:	ldr	r3, [sp, #180]	; 0xb4
   17104:	and	r3, r3, #4
   17108:	str	r3, [sp, #96]	; 0x60
   1710c:	mov	r3, #5
   17110:	str	r3, [sp, #176]	; 0xb0
   17114:	b	16ca8 <__assert_fail@plt+0x56a4>
   17118:	mov	r3, #1
   1711c:	mov	r4, #0
   17120:	mov	r9, r4
   17124:	str	r3, [sp, #32]
   17128:	str	r4, [sp, #44]	; 0x2c
   1712c:	str	r3, [sp, #48]	; 0x30
   17130:	str	r3, [sp, #60]	; 0x3c
   17134:	ldr	r3, [sp, #180]	; 0xb4
   17138:	str	r4, [sp, #52]	; 0x34
   1713c:	str	r4, [sp, #56]	; 0x38
   17140:	str	r4, [sp, #64]	; 0x40
   17144:	str	r4, [sp, #68]	; 0x44
   17148:	and	r3, r3, #1
   1714c:	str	r4, [sp, #72]	; 0x48
   17150:	str	r4, [sp, #80]	; 0x50
   17154:	str	r4, [sp, #84]	; 0x54
   17158:	str	r3, [sp, #92]	; 0x5c
   1715c:	ldr	r3, [sp, #180]	; 0xb4
   17160:	str	r4, [sp, #88]	; 0x58
   17164:	and	r3, r3, #4
   17168:	str	r3, [sp, #96]	; 0x60
   1716c:	b	16ca8 <__assert_fail@plt+0x56a4>
   17170:	mov	r3, #0
   17174:	mov	r2, #1
   17178:	ldr	r1, [sp, #176]	; 0xb0
   1717c:	mov	r4, r3
   17180:	mov	r9, r3
   17184:	movw	r3, #56512	; 0xdcc0
   17188:	movt	r3, #1
   1718c:	str	r2, [sp, #32]
   17190:	str	r2, [sp, #44]	; 0x2c
   17194:	str	r4, [sp, #48]	; 0x30
   17198:	strd	r2, [sp, #68]	; 0x44
   1719c:	ldr	r3, [sp, #180]	; 0xb4
   171a0:	str	r2, [sp, #52]	; 0x34
   171a4:	str	r1, [sp, #56]	; 0x38
   171a8:	str	r4, [sp, #60]	; 0x3c
   171ac:	str	r2, [sp, #64]	; 0x40
   171b0:	and	r3, r3, r2
   171b4:	str	r4, [sp, #80]	; 0x50
   171b8:	str	r4, [sp, #84]	; 0x54
   171bc:	str	r4, [sp, #88]	; 0x58
   171c0:	str	r3, [sp, #92]	; 0x5c
   171c4:	ldr	r3, [sp, #180]	; 0xb4
   171c8:	and	r3, r3, #4
   171cc:	str	r3, [sp, #96]	; 0x60
   171d0:	mov	r3, #2
   171d4:	str	r3, [sp, #176]	; 0xb0
   171d8:	b	16ca8 <__assert_fail@plt+0x56a4>
   171dc:	mov	r3, #1
   171e0:	mov	r2, #0
   171e4:	mov	r4, r2
   171e8:	mov	r9, r2
   171ec:	str	r3, [sp, #32]
   171f0:	str	r3, [sp, #44]	; 0x2c
   171f4:	str	r2, [sp, #48]	; 0x30
   171f8:	str	r3, [sp, #52]	; 0x34
   171fc:	str	r3, [sp, #56]	; 0x38
   17200:	str	r3, [sp, #60]	; 0x3c
   17204:	str	r3, [sp, #64]	; 0x40
   17208:	str	r3, [sp, #68]	; 0x44
   1720c:	str	r3, [sp, #88]	; 0x58
   17210:	movw	r3, #56512	; 0xdcc0
   17214:	movt	r3, #1
   17218:	str	r3, [sp, #72]	; 0x48
   1721c:	ldr	r3, [sp, #180]	; 0xb4
   17220:	str	r2, [sp, #80]	; 0x50
   17224:	str	r2, [sp, #84]	; 0x54
   17228:	and	r3, r3, #1
   1722c:	b	171c0 <__assert_fail@plt+0x5bbc>
   17230:	mov	r5, #102	; 0x66
   17234:	mov	r6, #0
   17238:	ldr	r3, [sp, #44]	; 0x2c
   1723c:	cmp	r3, #0
   17240:	bne	180f0 <__assert_fail@plt+0x6aec>
   17244:	ldr	r2, [sp, #52]	; 0x34
   17248:	eor	r3, fp, #1
   1724c:	ands	r3, r2, r3
   17250:	beq	17288 <__assert_fail@plt+0x5c84>
   17254:	cmp	sl, r4
   17258:	mov	fp, r3
   1725c:	movhi	r2, #39	; 0x27
   17260:	strbhi	r2, [r9, r4]
   17264:	add	r2, r4, #1
   17268:	cmp	sl, r2
   1726c:	movhi	r1, #36	; 0x24
   17270:	strbhi	r1, [r9, r2]
   17274:	add	r2, r4, #2
   17278:	add	r4, r4, #3
   1727c:	cmp	sl, r2
   17280:	movhi	r1, #39	; 0x27
   17284:	strbhi	r1, [r9, r2]
   17288:	cmp	sl, r4
   1728c:	add	r7, r7, #1
   17290:	movhi	r3, #92	; 0x5c
   17294:	strbhi	r3, [r9, r4]
   17298:	add	r4, r4, #1
   1729c:	cmp	r4, sl
   172a0:	ldr	r3, [sp, #32]
   172a4:	strbcc	r5, [r9, r4]
   172a8:	cmp	r6, #0
   172ac:	add	r4, r4, #1
   172b0:	moveq	r3, #0
   172b4:	cmn	r8, #1
   172b8:	str	r3, [sp, #32]
   172bc:	bne	16cc0 <__assert_fail@plt+0x56bc>
   172c0:	ldr	r3, [sp, #28]
   172c4:	ldrb	r6, [r3, r7]
   172c8:	adds	r6, r6, #0
   172cc:	movne	r6, #1
   172d0:	cmp	r6, #0
   172d4:	bne	16cd0 <__assert_fail@plt+0x56cc>
   172d8:	mov	r3, r9
   172dc:	mov	r9, fp
   172e0:	mov	fp, r3
   172e4:	ldr	r3, [sp, #68]	; 0x44
   172e8:	cmp	r4, #0
   172ec:	movne	r3, #0
   172f0:	cmp	r3, #0
   172f4:	bne	184e8 <__assert_fail@plt+0x6ee4>
   172f8:	ldr	r3, [sp, #44]	; 0x2c
   172fc:	ldr	r2, [sp, #52]	; 0x34
   17300:	eor	r3, r3, #1
   17304:	ands	r2, r3, r2
   17308:	beq	18420 <__assert_fail@plt+0x6e1c>
   1730c:	ldr	r3, [sp, #80]	; 0x50
   17310:	cmp	r3, #0
   17314:	beq	18424 <__assert_fail@plt+0x6e20>
   17318:	ldr	r3, [sp, #32]
   1731c:	cmp	r3, #0
   17320:	bne	18498 <__assert_fail@plt+0x6e94>
   17324:	ldr	r3, [sp, #84]	; 0x54
   17328:	adds	r3, r3, #0
   1732c:	movne	r3, #1
   17330:	cmp	sl, #0
   17334:	movne	r3, #0
   17338:	cmp	r3, #0
   1733c:	ldreq	r2, [sp, #80]	; 0x50
   17340:	beq	18424 <__assert_fail@plt+0x6e20>
   17344:	ldr	r2, [sp, #84]	; 0x54
   17348:	mov	sl, r2
   1734c:	mov	r0, #0
   17350:	mov	r4, #1
   17354:	mov	r1, #39	; 0x27
   17358:	str	r0, [sp, #44]	; 0x2c
   1735c:	strb	r1, [fp]
   17360:	str	r0, [sp, #48]	; 0x30
   17364:	str	r4, [sp, #52]	; 0x34
   17368:	str	r4, [sp, #56]	; 0x38
   1736c:	str	r4, [sp, #64]	; 0x40
   17370:	str	r0, [sp, #68]	; 0x44
   17374:	str	r3, [sp, #80]	; 0x50
   17378:	str	r2, [sp, #84]	; 0x54
   1737c:	str	r0, [sp, #88]	; 0x58
   17380:	b	16fc0 <__assert_fail@plt+0x59bc>
   17384:	mov	r5, #98	; 0x62
   17388:	b	17234 <__assert_fail@plt+0x5c30>
   1738c:	mov	r5, #97	; 0x61
   17390:	b	17234 <__assert_fail@plt+0x5c30>
   17394:	ldr	r3, [sp, #48]	; 0x30
   17398:	str	r3, [sp, #40]	; 0x28
   1739c:	mov	r3, #116	; 0x74
   173a0:	ldr	r2, [sp, #68]	; 0x44
   173a4:	cmp	r2, #0
   173a8:	bne	175a4 <__assert_fail@plt+0x5fa0>
   173ac:	ldr	r2, [sp, #60]	; 0x3c
   173b0:	cmp	r2, #0
   173b4:	bne	17500 <__assert_fail@plt+0x5efc>
   173b8:	ldr	r3, [sp, #44]	; 0x2c
   173bc:	mov	r6, #0
   173c0:	cmp	r3, #0
   173c4:	beq	17570 <__assert_fail@plt+0x5f6c>
   173c8:	mov	r3, fp
   173cc:	ldr	r2, [sp, #184]	; 0xb8
   173d0:	cmp	r2, #0
   173d4:	beq	173f4 <__assert_fail@plt+0x5df0>
   173d8:	ubfx	r1, r5, #5, #8
   173dc:	mov	r0, r2
   173e0:	and	r2, r5, #31
   173e4:	ldr	r1, [r0, r1, lsl #2]
   173e8:	lsr	r2, r1, r2
   173ec:	tst	r2, #1
   173f0:	bne	17238 <__assert_fail@plt+0x5c34>
   173f4:	ldr	r2, [sp, #40]	; 0x28
   173f8:	cmp	r2, #0
   173fc:	addeq	r7, r7, #1
   17400:	bne	17238 <__assert_fail@plt+0x5c34>
   17404:	cmp	r3, #0
   17408:	beq	1729c <__assert_fail@plt+0x5c98>
   1740c:	cmp	sl, r4
   17410:	mov	fp, #0
   17414:	movhi	r3, #39	; 0x27
   17418:	strbhi	r3, [r9, r4]
   1741c:	add	r3, r4, #1
   17420:	add	r4, r4, #2
   17424:	cmp	sl, r3
   17428:	movhi	r2, #39	; 0x27
   1742c:	strbhi	r2, [r9, r3]
   17430:	b	1729c <__assert_fail@plt+0x5c98>
   17434:	ldr	r3, [sp, #48]	; 0x30
   17438:	str	r3, [sp, #40]	; 0x28
   1743c:	eor	r3, fp, #1
   17440:	ldr	r2, [sp, #52]	; 0x34
   17444:	ands	r2, r2, r3
   17448:	beq	18108 <__assert_fail@plt+0x6b04>
   1744c:	cmp	sl, r4
   17450:	movhi	r3, #39	; 0x27
   17454:	strbhi	r3, [r9, r4]
   17458:	add	r3, r4, #1
   1745c:	cmp	sl, r3
   17460:	movhi	r1, #36	; 0x24
   17464:	strbhi	r1, [r9, r3]
   17468:	add	r3, r4, #2
   1746c:	cmp	sl, r3
   17470:	movhi	r1, #39	; 0x27
   17474:	strbhi	r1, [r9, r3]
   17478:	add	r3, r4, #3
   1747c:	cmp	sl, r3
   17480:	bls	18154 <__assert_fail@plt+0x6b50>
   17484:	mov	r4, r3
   17488:	mov	r3, #92	; 0x5c
   1748c:	mov	fp, r2
   17490:	mov	r2, r4
   17494:	strb	r3, [r9, r4]
   17498:	ldr	r3, [sp, #176]	; 0xb0
   1749c:	add	r4, r4, #1
   174a0:	cmp	r3, #2
   174a4:	beq	181bc <__assert_fail@plt+0x6bb8>
   174a8:	add	r3, r7, #1
   174ac:	cmp	r3, r8
   174b0:	bcs	174c8 <__assert_fail@plt+0x5ec4>
   174b4:	ldr	r1, [sp, #28]
   174b8:	ldrb	r3, [r1, r3]
   174bc:	sub	r3, r3, #48	; 0x30
   174c0:	cmp	r3, #9
   174c4:	bls	181cc <__assert_fail@plt+0x6bc8>
   174c8:	mov	r3, #0
   174cc:	mov	r5, #48	; 0x30
   174d0:	ldr	r6, [sp, #64]	; 0x40
   174d4:	cmp	r6, #0
   174d8:	beq	173cc <__assert_fail@plt+0x5dc8>
   174dc:	mov	r6, #0
   174e0:	b	173f4 <__assert_fail@plt+0x5df0>
   174e4:	ldr	r3, [sp, #48]	; 0x30
   174e8:	str	r3, [sp, #40]	; 0x28
   174ec:	ldr	r2, [sp, #60]	; 0x3c
   174f0:	mov	r5, #13
   174f4:	mov	r3, #114	; 0x72
   174f8:	cmp	r2, #0
   174fc:	beq	173b8 <__assert_fail@plt+0x5db4>
   17500:	mov	r5, r3
   17504:	b	17234 <__assert_fail@plt+0x5c30>
   17508:	ldr	r3, [sp, #48]	; 0x30
   1750c:	str	r3, [sp, #40]	; 0x28
   17510:	mov	r3, #118	; 0x76
   17514:	b	173ac <__assert_fail@plt+0x5da8>
   17518:	ldr	r3, [sp, #48]	; 0x30
   1751c:	str	r3, [sp, #40]	; 0x28
   17520:	mov	r5, #10
   17524:	mov	r3, #110	; 0x6e
   17528:	b	173ac <__assert_fail@plt+0x5da8>
   1752c:	ldr	r3, [sp, #48]	; 0x30
   17530:	cmn	r8, #1
   17534:	str	r3, [sp, #40]	; 0x28
   17538:	beq	17980 <__assert_fail@plt+0x637c>
   1753c:	subs	r3, r8, #1
   17540:	movne	r3, #1
   17544:	cmp	r3, #0
   17548:	bne	17554 <__assert_fail@plt+0x5f50>
   1754c:	cmp	r7, #0
   17550:	beq	17598 <__assert_fail@plt+0x5f94>
   17554:	mov	r6, #0
   17558:	ldr	r3, [sp, #64]	; 0x40
   1755c:	cmp	r3, #0
   17560:	beq	173c8 <__assert_fail@plt+0x5dc4>
   17564:	ldr	r3, [sp, #44]	; 0x2c
   17568:	cmp	r3, #0
   1756c:	bne	173c8 <__assert_fail@plt+0x5dc4>
   17570:	mov	r3, fp
   17574:	b	173f4 <__assert_fail@plt+0x5df0>
   17578:	ldr	r3, [sp, #48]	; 0x30
   1757c:	str	r3, [sp, #40]	; 0x28
   17580:	b	1754c <__assert_fail@plt+0x5f48>
   17584:	ldr	r3, [sp, #48]	; 0x30
   17588:	str	r3, [sp, #40]	; 0x28
   1758c:	b	17554 <__assert_fail@plt+0x5f50>
   17590:	ldr	r6, [sp, #48]	; 0x30
   17594:	str	r6, [sp, #40]	; 0x28
   17598:	ldr	r3, [sp, #68]	; 0x44
   1759c:	cmp	r3, #0
   175a0:	beq	17558 <__assert_fail@plt+0x5f54>
   175a4:	mov	r3, #2
   175a8:	mov	fp, r9
   175ac:	str	r3, [sp, #176]	; 0xb0
   175b0:	ldr	r3, [sp, #60]	; 0x3c
   175b4:	cmp	r3, #0
   175b8:	ldr	r3, [sp, #176]	; 0xb0
   175bc:	movne	r3, #4
   175c0:	str	r3, [sp, #176]	; 0xb0
   175c4:	mov	lr, #0
   175c8:	mov	r0, fp
   175cc:	ldr	r2, [sp, #28]
   175d0:	ldr	r3, [sp, #180]	; 0xb4
   175d4:	ldr	r1, [sp, #188]	; 0xbc
   175d8:	bic	ip, r3, #2
   175dc:	ldr	r3, [sp, #176]	; 0xb0
   175e0:	stm	sp, {r3, ip, lr}
   175e4:	mov	r3, r8
   175e8:	ldr	ip, [sp, #192]	; 0xc0
   175ec:	str	r1, [sp, #12]
   175f0:	mov	r1, sl
   175f4:	str	ip, [sp, #16]
   175f8:	bl	16b84 <__assert_fail@plt+0x5580>
   175fc:	mov	r4, r0
   17600:	mov	r0, r4
   17604:	add	sp, sp, #140	; 0x8c
   17608:	ldrd	r4, [sp]
   1760c:	ldrd	r6, [sp, #8]
   17610:	ldrd	r8, [sp, #16]
   17614:	ldrd	sl, [sp, #24]
   17618:	add	sp, sp, #32
   1761c:	pop	{pc}		; (ldr pc, [sp], #4)
   17620:	ldr	r3, [sp, #48]	; 0x30
   17624:	str	r3, [sp, #40]	; 0x28
   17628:	ldr	r3, [sp, #176]	; 0xb0
   1762c:	cmp	r3, #2
   17630:	beq	179a8 <__assert_fail@plt+0x63a4>
   17634:	ldr	r3, [sp, #88]	; 0x58
   17638:	cmp	r3, #0
   1763c:	moveq	r5, #92	; 0x5c
   17640:	moveq	r3, r5
   17644:	beq	173ac <__assert_fail@plt+0x5da8>
   17648:	add	r7, r7, #1
   1764c:	mov	r3, fp
   17650:	mov	r6, #0
   17654:	mov	r5, #92	; 0x5c
   17658:	b	17404 <__assert_fail@plt+0x5e00>
   1765c:	ldr	r3, [sp, #64]	; 0x40
   17660:	cmp	r3, #0
   17664:	bne	184dc <__assert_fail@plt+0x6ed8>
   17668:	ldr	r2, [sp, #48]	; 0x30
   1766c:	mov	r3, fp
   17670:	mov	r6, r2
   17674:	str	r2, [sp, #40]	; 0x28
   17678:	b	173cc <__assert_fail@plt+0x5dc8>
   1767c:	ldr	r3, [sp, #176]	; 0xb0
   17680:	cmp	r3, #2
   17684:	beq	18418 <__assert_fail@plt+0x6e14>
   17688:	cmp	r3, #5
   1768c:	ldr	r3, [sp, #48]	; 0x30
   17690:	str	r3, [sp, #40]	; 0x28
   17694:	bne	176c0 <__assert_fail@plt+0x60bc>
   17698:	ldr	r3, [sp, #96]	; 0x60
   1769c:	cmp	r3, #0
   176a0:	beq	1811c <__assert_fail@plt+0x6b18>
   176a4:	add	r3, r7, #2
   176a8:	cmp	r3, r8
   176ac:	bcs	176c0 <__assert_fail@plt+0x60bc>
   176b0:	ldr	r2, [sp, #36]	; 0x24
   176b4:	ldrb	r5, [r2, #1]
   176b8:	cmp	r5, #63	; 0x3f
   176bc:	beq	18204 <__assert_fail@plt+0x6c00>
   176c0:	mov	r6, #0
   176c4:	mov	r5, #63	; 0x3f
   176c8:	b	17558 <__assert_fail@plt+0x5f54>
   176cc:	ldr	r3, [sp, #176]	; 0xb0
   176d0:	cmp	r3, #2
   176d4:	ldr	r3, [sp, #48]	; 0x30
   176d8:	beq	17ec0 <__assert_fail@plt+0x68bc>
   176dc:	mov	r5, #39	; 0x27
   176e0:	str	r3, [sp, #40]	; 0x28
   176e4:	str	r6, [sp, #80]	; 0x50
   176e8:	b	17558 <__assert_fail@plt+0x5f54>
   176ec:	ldr	r3, [sp, #180]	; 0xb4
   176f0:	cmp	r4, #0
   176f4:	and	r3, r3, #1
   176f8:	str	r3, [sp, #92]	; 0x5c
   176fc:	ldr	r3, [sp, #180]	; 0xb4
   17700:	and	r3, r3, #4
   17704:	str	r3, [sp, #96]	; 0x60
   17708:	bne	18528 <__assert_fail@plt+0x6f24>
   1770c:	str	r4, [sp, #60]	; 0x3c
   17710:	cmp	sl, #0
   17714:	bne	1850c <__assert_fail@plt+0x6f08>
   17718:	mov	r3, #1
   1771c:	movw	r2, #56512	; 0xdcc0
   17720:	movt	r2, #1
   17724:	mov	r4, r3
   17728:	mov	r3, #2
   1772c:	mov	r9, sl
   17730:	str	r4, [sp, #32]
   17734:	str	sl, [sp, #44]	; 0x2c
   17738:	str	sl, [sp, #48]	; 0x30
   1773c:	str	r4, [sp, #52]	; 0x34
   17740:	str	r4, [sp, #56]	; 0x38
   17744:	str	r4, [sp, #64]	; 0x40
   17748:	str	sl, [sp, #68]	; 0x44
   1774c:	str	r2, [sp, #72]	; 0x48
   17750:	str	sl, [sp, #80]	; 0x50
   17754:	str	sl, [sp, #84]	; 0x54
   17758:	str	sl, [sp, #88]	; 0x58
   1775c:	str	r3, [sp, #176]	; 0xb0
   17760:	b	16ca8 <__assert_fail@plt+0x56a4>
   17764:	ldrb	r5, [r0, r7]
   17768:	cmp	r5, #126	; 0x7e
   1776c:	ldrls	pc, [pc, r5, lsl #2]
   17770:	b	17ad4 <__assert_fail@plt+0x64d0>
   17774:	andeq	r7, r1, r0, lsr #21
   17778:	ldrdeq	r7, [r1], -r4
   1777c:	ldrdeq	r7, [r1], -r4
   17780:	ldrdeq	r7, [r1], -r4
   17784:	ldrdeq	r7, [r1], -r4
   17788:	ldrdeq	r7, [r1], -r4
   1778c:	ldrdeq	r7, [r1], -r4
   17790:	muleq	r1, r0, sl
   17794:	andeq	r7, r1, r0, lsl #21
   17798:	andeq	r7, r1, r4, lsl #20
   1779c:	andeq	r7, r1, r0, ror sl
   177a0:	andeq	r7, r1, r4, ror #19
   177a4:	andeq	r7, r1, r4, asr #21
   177a8:	andeq	r7, r1, r0, asr sl
   177ac:	ldrdeq	r7, [r1], -r4
   177b0:	ldrdeq	r7, [r1], -r4
   177b4:	ldrdeq	r7, [r1], -r4
   177b8:	ldrdeq	r7, [r1], -r4
   177bc:	ldrdeq	r7, [r1], -r4
   177c0:	ldrdeq	r7, [r1], -r4
   177c4:	ldrdeq	r7, [r1], -r4
   177c8:	ldrdeq	r7, [r1], -r4
   177cc:	ldrdeq	r7, [r1], -r4
   177d0:	ldrdeq	r7, [r1], -r4
   177d4:	ldrdeq	r7, [r1], -r4
   177d8:	ldrdeq	r7, [r1], -r4
   177dc:	ldrdeq	r7, [r1], -r4
   177e0:	ldrdeq	r7, [r1], -r4
   177e4:	ldrdeq	r7, [r1], -r4
   177e8:	ldrdeq	r7, [r1], -r4
   177ec:	ldrdeq	r7, [r1], -r4
   177f0:	ldrdeq	r7, [r1], -r4
   177f4:	strdeq	r7, [r1], -r8
   177f8:	andeq	r7, r1, r0, ror #20
   177fc:	andeq	r7, r1, r0, ror #20
   17800:	ldrdeq	r7, [r1], -r8
   17804:	andeq	r7, r1, r0, ror #20
   17808:	andeq	r7, r1, ip, asr #19
   1780c:	andeq	r7, r1, r0, ror #20
   17810:	andeq	r7, r1, ip, lsr sl
   17814:	andeq	r7, r1, r0, ror #20
   17818:	andeq	r7, r1, r0, ror #20
   1781c:	andeq	r7, r1, r0, ror #20
   17820:	andeq	r7, r1, ip, asr #19
   17824:	andeq	r7, r1, ip, asr #19
   17828:	andeq	r7, r1, ip, asr #19
   1782c:	andeq	r7, r1, ip, asr #19
   17830:	andeq	r7, r1, ip, asr #19
   17834:	andeq	r7, r1, ip, asr #19
   17838:	andeq	r7, r1, ip, asr #19
   1783c:	andeq	r7, r1, ip, asr #19
   17840:	andeq	r7, r1, ip, asr #19
   17844:	andeq	r7, r1, ip, asr #19
   17848:	andeq	r7, r1, ip, asr #19
   1784c:	andeq	r7, r1, ip, asr #19
   17850:	andeq	r7, r1, ip, asr #19
   17854:	andeq	r7, r1, ip, asr #19
   17858:	andeq	r7, r1, ip, asr #19
   1785c:	andeq	r7, r1, ip, asr #19
   17860:	andeq	r7, r1, r0, ror #20
   17864:	andeq	r7, r1, r0, ror #20
   17868:	andeq	r7, r1, r0, ror #20
   1786c:	andeq	r7, r1, r0, ror #20
   17870:	andeq	r7, r1, r4, lsl sl
   17874:	ldrdeq	r7, [r1], -r4
   17878:	andeq	r7, r1, ip, asr #19
   1787c:	andeq	r7, r1, ip, asr #19
   17880:	andeq	r7, r1, ip, asr #19
   17884:	andeq	r7, r1, ip, asr #19
   17888:	andeq	r7, r1, ip, asr #19
   1788c:	andeq	r7, r1, ip, asr #19
   17890:	andeq	r7, r1, ip, asr #19
   17894:	andeq	r7, r1, ip, asr #19
   17898:	andeq	r7, r1, ip, asr #19
   1789c:	andeq	r7, r1, ip, asr #19
   178a0:	andeq	r7, r1, ip, asr #19
   178a4:	andeq	r7, r1, ip, asr #19
   178a8:	andeq	r7, r1, ip, asr #19
   178ac:	andeq	r7, r1, ip, asr #19
   178b0:	andeq	r7, r1, ip, asr #19
   178b4:	andeq	r7, r1, ip, asr #19
   178b8:	andeq	r7, r1, ip, asr #19
   178bc:	andeq	r7, r1, ip, asr #19
   178c0:	andeq	r7, r1, ip, asr #19
   178c4:	andeq	r7, r1, ip, asr #19
   178c8:	andeq	r7, r1, ip, asr #19
   178cc:	andeq	r7, r1, ip, asr #19
   178d0:	andeq	r7, r1, ip, asr #19
   178d4:	andeq	r7, r1, ip, asr #19
   178d8:	andeq	r7, r1, ip, asr #19
   178dc:	andeq	r7, r1, ip, asr #19
   178e0:	andeq	r7, r1, r0, ror #20
   178e4:	muleq	r1, r4, r9
   178e8:	andeq	r7, r1, ip, asr #19
   178ec:	andeq	r7, r1, r0, ror #20
   178f0:	andeq	r7, r1, ip, asr #19
   178f4:	andeq	r7, r1, r0, ror #20
   178f8:	andeq	r7, r1, ip, asr #19
   178fc:	andeq	r7, r1, ip, asr #19
   17900:	andeq	r7, r1, ip, asr #19
   17904:	andeq	r7, r1, ip, asr #19
   17908:	andeq	r7, r1, ip, asr #19
   1790c:	andeq	r7, r1, ip, asr #19
   17910:	andeq	r7, r1, ip, asr #19
   17914:	andeq	r7, r1, ip, asr #19
   17918:	andeq	r7, r1, ip, asr #19
   1791c:	andeq	r7, r1, ip, asr #19
   17920:	andeq	r7, r1, ip, asr #19
   17924:	andeq	r7, r1, ip, asr #19
   17928:	andeq	r7, r1, ip, asr #19
   1792c:	andeq	r7, r1, ip, asr #19
   17930:	andeq	r7, r1, ip, asr #19
   17934:	andeq	r7, r1, ip, asr #19
   17938:	andeq	r7, r1, ip, asr #19
   1793c:	andeq	r7, r1, ip, asr #19
   17940:	andeq	r7, r1, ip, asr #19
   17944:	andeq	r7, r1, ip, asr #19
   17948:	andeq	r7, r1, ip, asr #19
   1794c:	andeq	r7, r1, ip, asr #19
   17950:	andeq	r7, r1, ip, asr #19
   17954:	andeq	r7, r1, ip, asr #19
   17958:	andeq	r7, r1, ip, asr #19
   1795c:	andeq	r7, r1, ip, asr #19
   17960:	andeq	r7, r1, r0, ror r9
   17964:	andeq	r7, r1, r0, ror #20
   17968:	andeq	r7, r1, r0, ror r9
   1796c:	ldrdeq	r7, [r1], -r8
   17970:	mov	r3, #0
   17974:	cmn	r8, #1
   17978:	str	r3, [sp, #40]	; 0x28
   1797c:	bne	1753c <__assert_fail@plt+0x5f38>
   17980:	ldr	r3, [sp, #28]
   17984:	ldrb	r3, [r3, #1]
   17988:	adds	r3, r3, #0
   1798c:	movne	r3, #1
   17990:	b	17544 <__assert_fail@plt+0x5f40>
   17994:	mov	r3, #0
   17998:	str	r3, [sp, #40]	; 0x28
   1799c:	ldr	r3, [sp, #176]	; 0xb0
   179a0:	cmp	r3, #2
   179a4:	bne	17634 <__assert_fail@plt+0x6030>
   179a8:	ldr	r3, [sp, #44]	; 0x2c
   179ac:	cmp	r3, #0
   179b0:	bne	182f0 <__assert_fail@plt+0x6cec>
   179b4:	mov	r6, r3
   179b8:	add	r7, r7, #1
   179bc:	mov	r3, fp
   179c0:	mov	r5, #92	; 0x5c
   179c4:	b	17404 <__assert_fail@plt+0x5e00>
   179c8:	ldr	r6, [sp, #48]	; 0x30
   179cc:	mov	r3, #0
   179d0:	str	r3, [sp, #40]	; 0x28
   179d4:	b	17558 <__assert_fail@plt+0x5f54>
   179d8:	mov	r3, #0
   179dc:	str	r3, [sp, #40]	; 0x28
   179e0:	b	1754c <__assert_fail@plt+0x5f48>
   179e4:	mov	r3, #0
   179e8:	str	r3, [sp, #40]	; 0x28
   179ec:	mov	r3, #118	; 0x76
   179f0:	b	173ac <__assert_fail@plt+0x5da8>
   179f4:	ldr	r6, [sp, #48]	; 0x30
   179f8:	mov	r3, #0
   179fc:	str	r3, [sp, #40]	; 0x28
   17a00:	b	17598 <__assert_fail@plt+0x5f94>
   17a04:	mov	r3, #0
   17a08:	str	r3, [sp, #40]	; 0x28
   17a0c:	mov	r3, #116	; 0x74
   17a10:	b	173a0 <__assert_fail@plt+0x5d9c>
   17a14:	ldr	r3, [sp, #176]	; 0xb0
   17a18:	cmp	r3, #2
   17a1c:	beq	17f2c <__assert_fail@plt+0x6928>
   17a20:	cmp	r3, #5
   17a24:	mov	r3, #0
   17a28:	str	r3, [sp, #40]	; 0x28
   17a2c:	beq	17698 <__assert_fail@plt+0x6094>
   17a30:	mov	r6, #0
   17a34:	mov	r5, #63	; 0x3f
   17a38:	b	17558 <__assert_fail@plt+0x5f54>
   17a3c:	ldr	r3, [sp, #176]	; 0xb0
   17a40:	cmp	r3, #2
   17a44:	beq	17eb4 <__assert_fail@plt+0x68b0>
   17a48:	mov	r3, #0
   17a4c:	b	176dc <__assert_fail@plt+0x60d8>
   17a50:	mov	r3, #0
   17a54:	str	r3, [sp, #40]	; 0x28
   17a58:	mov	r3, #114	; 0x72
   17a5c:	b	173a0 <__assert_fail@plt+0x5d9c>
   17a60:	mov	r3, #0
   17a64:	mov	r6, r3
   17a68:	str	r3, [sp, #40]	; 0x28
   17a6c:	b	17598 <__assert_fail@plt+0x5f94>
   17a70:	mov	r3, #0
   17a74:	str	r3, [sp, #40]	; 0x28
   17a78:	mov	r3, #110	; 0x6e
   17a7c:	b	173a0 <__assert_fail@plt+0x5d9c>
   17a80:	mov	r3, #0
   17a84:	str	r3, [sp, #40]	; 0x28
   17a88:	mov	r3, #98	; 0x62
   17a8c:	b	173ac <__assert_fail@plt+0x5da8>
   17a90:	mov	r3, #0
   17a94:	str	r3, [sp, #40]	; 0x28
   17a98:	mov	r3, #97	; 0x61
   17a9c:	b	173ac <__assert_fail@plt+0x5da8>
   17aa0:	ldr	r3, [sp, #60]	; 0x3c
   17aa4:	cmp	r3, #0
   17aa8:	bne	17e98 <__assert_fail@plt+0x6894>
   17aac:	ldr	r3, [sp, #92]	; 0x5c
   17ab0:	cmp	r3, #0
   17ab4:	addne	r7, r7, #1
   17ab8:	bne	16cb8 <__assert_fail@plt+0x56b4>
   17abc:	str	r3, [sp, #40]	; 0x28
   17ac0:	b	173b8 <__assert_fail@plt+0x5db4>
   17ac4:	mov	r3, #0
   17ac8:	str	r3, [sp, #40]	; 0x28
   17acc:	mov	r3, #102	; 0x66
   17ad0:	b	173ac <__assert_fail@plt+0x5da8>
   17ad4:	mov	r3, #0
   17ad8:	str	r3, [sp, #40]	; 0x28
   17adc:	ldr	r3, [sp, #76]	; 0x4c
   17ae0:	cmp	r3, #1
   17ae4:	bne	17f4c <__assert_fail@plt+0x6948>
   17ae8:	bl	11424 <__ctype_b_loc@plt>
   17aec:	ldr	r2, [r0]
   17af0:	sxth	r3, r5
   17af4:	lsl	r3, r3, #1
   17af8:	ldr	r1, [sp, #76]	; 0x4c
   17afc:	ldrh	r3, [r2, r3]
   17b00:	mov	r0, r1
   17b04:	and	r3, r3, #16384	; 0x4000
   17b08:	cmp	r3, #0
   17b0c:	ldr	r3, [sp, #60]	; 0x3c
   17b10:	movne	r6, #1
   17b14:	moveq	r6, #0
   17b18:	movne	r2, #0
   17b1c:	andeq	r2, r3, #1
   17b20:	cmp	r2, #0
   17b24:	beq	17558 <__assert_fail@plt+0x5f54>
   17b28:	ldr	r2, [sp, #60]	; 0x3c
   17b2c:	mov	r6, #0
   17b30:	add	r1, r0, r7
   17b34:	mov	ip, #39	; 0x27
   17b38:	str	r6, [sp, #100]	; 0x64
   17b3c:	mov	r0, #0
   17b40:	ldr	lr, [sp, #36]	; 0x24
   17b44:	str	r8, [sp, #36]	; 0x24
   17b48:	ldr	r6, [sp, #40]	; 0x28
   17b4c:	ldr	r8, [sp, #44]	; 0x2c
   17b50:	b	17c00 <__assert_fail@plt+0x65fc>
   17b54:	cmp	r8, #0
   17b58:	bne	18134 <__assert_fail@plt+0x6b30>
   17b5c:	ldr	r0, [sp, #52]	; 0x34
   17b60:	eor	r3, fp, #1
   17b64:	ands	r3, r0, r3
   17b68:	beq	17b98 <__assert_fail@plt+0x6594>
   17b6c:	cmp	sl, r4
   17b70:	add	r0, r4, #1
   17b74:	strbhi	ip, [r9, r4]
   17b78:	cmp	sl, r0
   17b7c:	movhi	fp, #36	; 0x24
   17b80:	strbhi	fp, [r9, r0]
   17b84:	add	r0, r4, #2
   17b88:	mov	fp, r3
   17b8c:	cmp	sl, r0
   17b90:	add	r4, r4, #3
   17b94:	strbhi	ip, [r9, r0]
   17b98:	cmp	sl, r4
   17b9c:	movhi	r3, #92	; 0x5c
   17ba0:	strbhi	r3, [r9, r4]
   17ba4:	add	r3, r4, #1
   17ba8:	cmp	sl, r3
   17bac:	bls	17bbc <__assert_fail@plt+0x65b8>
   17bb0:	lsr	r0, r5, #6
   17bb4:	add	r0, r0, #48	; 0x30
   17bb8:	strb	r0, [r9, r3]
   17bbc:	add	r3, r4, #2
   17bc0:	cmp	sl, r3
   17bc4:	bls	17bd4 <__assert_fail@plt+0x65d0>
   17bc8:	ubfx	r0, r5, #3, #3
   17bcc:	add	r0, r0, #48	; 0x30
   17bd0:	strb	r0, [r9, r3]
   17bd4:	add	r7, r7, #1
   17bd8:	and	r5, r5, #7
   17bdc:	cmp	r1, r7
   17be0:	add	r5, r5, #48	; 0x30
   17be4:	add	r4, r4, #3
   17be8:	bls	18148 <__assert_fail@plt+0x6b44>
   17bec:	mov	r0, r2
   17bf0:	cmp	sl, r4
   17bf4:	strbhi	r5, [r9, r4]
   17bf8:	add	r4, r4, #1
   17bfc:	ldrb	r5, [lr, #1]!
   17c00:	cmp	r2, #0
   17c04:	bne	17b54 <__assert_fail@plt+0x6550>
   17c08:	eor	r3, r0, #1
   17c0c:	cmp	r6, #0
   17c10:	and	r3, r3, fp
   17c14:	uxtb	r3, r3
   17c18:	beq	17c2c <__assert_fail@plt+0x6628>
   17c1c:	cmp	sl, r4
   17c20:	movhi	r6, #92	; 0x5c
   17c24:	strbhi	r6, [r9, r4]
   17c28:	add	r4, r4, #1
   17c2c:	add	r7, r7, #1
   17c30:	cmp	r7, r1
   17c34:	bcs	18128 <__assert_fail@plt+0x6b24>
   17c38:	cmp	r3, #0
   17c3c:	beq	1816c <__assert_fail@plt+0x6b68>
   17c40:	cmp	sl, r4
   17c44:	add	r3, r4, #1
   17c48:	mov	r6, #0
   17c4c:	strbhi	ip, [r9, r4]
   17c50:	cmp	sl, r3
   17c54:	add	r4, r4, #2
   17c58:	mov	fp, r6
   17c5c:	strbhi	ip, [r9, r3]
   17c60:	b	17bf0 <__assert_fail@plt+0x65ec>
   17c64:	ldr	r3, [sp, #36]	; 0x24
   17c68:	ldrb	r5, [r3]
   17c6c:	cmp	r5, #126	; 0x7e
   17c70:	ldrls	pc, [pc, r5, lsl #2]
   17c74:	b	17ad4 <__assert_fail@plt+0x64d0>
   17c78:	muleq	r1, r8, lr
   17c7c:	ldrdeq	r7, [r1], -r4
   17c80:	ldrdeq	r7, [r1], -r4
   17c84:	ldrdeq	r7, [r1], -r4
   17c88:	ldrdeq	r7, [r1], -r4
   17c8c:	ldrdeq	r7, [r1], -r4
   17c90:	ldrdeq	r7, [r1], -r4
   17c94:	andeq	r7, r1, ip, lsl #7
   17c98:	andeq	r7, r1, r4, lsl #7
   17c9c:	andeq	r7, r1, r4, lsl #20
   17ca0:	andeq	r7, r1, ip, lsl #29
   17ca4:	andeq	r7, r1, r4, ror #19
   17ca8:	andeq	r7, r1, r0, lsr r2
   17cac:	andeq	r7, r1, r0, lsl #29
   17cb0:	ldrdeq	r7, [r1], -r4
   17cb4:	ldrdeq	r7, [r1], -r4
   17cb8:	ldrdeq	r7, [r1], -r4
   17cbc:	ldrdeq	r7, [r1], -r4
   17cc0:	ldrdeq	r7, [r1], -r4
   17cc4:	ldrdeq	r7, [r1], -r4
   17cc8:	ldrdeq	r7, [r1], -r4
   17ccc:	ldrdeq	r7, [r1], -r4
   17cd0:	ldrdeq	r7, [r1], -r4
   17cd4:	ldrdeq	r7, [r1], -r4
   17cd8:	ldrdeq	r7, [r1], -r4
   17cdc:	ldrdeq	r7, [r1], -r4
   17ce0:	ldrdeq	r7, [r1], -r4
   17ce4:	ldrdeq	r7, [r1], -r4
   17ce8:	ldrdeq	r7, [r1], -r4
   17cec:	ldrdeq	r7, [r1], -r4
   17cf0:	ldrdeq	r7, [r1], -r4
   17cf4:	ldrdeq	r7, [r1], -r4
   17cf8:	strdeq	r7, [r1], -r4
   17cfc:	andeq	r7, r1, r4, ror lr
   17d00:	andeq	r7, r1, r4, ror lr
   17d04:	ldrdeq	r7, [r1], -r8
   17d08:	andeq	r7, r1, r4, ror lr
   17d0c:	andeq	r7, r1, r8, asr #19
   17d10:	andeq	r7, r1, r4, ror lr
   17d14:	andeq	r7, r1, ip, lsr sl
   17d18:	andeq	r7, r1, r4, ror lr
   17d1c:	andeq	r7, r1, r4, ror lr
   17d20:	andeq	r7, r1, r4, ror lr
   17d24:	andeq	r7, r1, r8, asr #19
   17d28:	andeq	r7, r1, r8, asr #19
   17d2c:	andeq	r7, r1, r8, asr #19
   17d30:	andeq	r7, r1, r8, asr #19
   17d34:	andeq	r7, r1, r8, asr #19
   17d38:	andeq	r7, r1, r8, asr #19
   17d3c:	andeq	r7, r1, r8, asr #19
   17d40:	andeq	r7, r1, r8, asr #19
   17d44:	andeq	r7, r1, r8, asr #19
   17d48:	andeq	r7, r1, r8, asr #19
   17d4c:	andeq	r7, r1, r8, asr #19
   17d50:	andeq	r7, r1, r8, asr #19
   17d54:	andeq	r7, r1, r8, asr #19
   17d58:	andeq	r7, r1, r8, asr #19
   17d5c:	andeq	r7, r1, r8, asr #19
   17d60:	andeq	r7, r1, r8, asr #19
   17d64:	andeq	r7, r1, r4, ror lr
   17d68:	andeq	r7, r1, r4, ror lr
   17d6c:	andeq	r7, r1, r4, ror lr
   17d70:	andeq	r7, r1, r4, ror lr
   17d74:	andeq	r7, r1, r4, lsl sl
   17d78:	ldrdeq	r7, [r1], -r4
   17d7c:	andeq	r7, r1, r8, asr #19
   17d80:	andeq	r7, r1, r8, asr #19
   17d84:	andeq	r7, r1, r8, asr #19
   17d88:	andeq	r7, r1, r8, asr #19
   17d8c:	andeq	r7, r1, r8, asr #19
   17d90:	andeq	r7, r1, r8, asr #19
   17d94:	andeq	r7, r1, r8, asr #19
   17d98:	andeq	r7, r1, r8, asr #19
   17d9c:	andeq	r7, r1, r8, asr #19
   17da0:	andeq	r7, r1, r8, asr #19
   17da4:	andeq	r7, r1, r8, asr #19
   17da8:	andeq	r7, r1, r8, asr #19
   17dac:	andeq	r7, r1, r8, asr #19
   17db0:	andeq	r7, r1, r8, asr #19
   17db4:	andeq	r7, r1, r8, asr #19
   17db8:	andeq	r7, r1, r8, asr #19
   17dbc:	andeq	r7, r1, r8, asr #19
   17dc0:	andeq	r7, r1, r8, asr #19
   17dc4:	andeq	r7, r1, r8, asr #19
   17dc8:	andeq	r7, r1, r8, asr #19
   17dcc:	andeq	r7, r1, r8, asr #19
   17dd0:	andeq	r7, r1, r8, asr #19
   17dd4:	andeq	r7, r1, r8, asr #19
   17dd8:	andeq	r7, r1, r8, asr #19
   17ddc:	andeq	r7, r1, r8, asr #19
   17de0:	andeq	r7, r1, r8, asr #19
   17de4:	andeq	r7, r1, r4, ror lr
   17de8:	muleq	r1, r4, r9
   17dec:	andeq	r7, r1, r8, asr #19
   17df0:	andeq	r7, r1, r4, ror lr
   17df4:	andeq	r7, r1, r8, asr #19
   17df8:	andeq	r7, r1, r4, ror lr
   17dfc:	andeq	r7, r1, r8, asr #19
   17e00:	andeq	r7, r1, r8, asr #19
   17e04:	andeq	r7, r1, r8, asr #19
   17e08:	andeq	r7, r1, r8, asr #19
   17e0c:	andeq	r7, r1, r8, asr #19
   17e10:	andeq	r7, r1, r8, asr #19
   17e14:	andeq	r7, r1, r8, asr #19
   17e18:	andeq	r7, r1, r8, asr #19
   17e1c:	andeq	r7, r1, r8, asr #19
   17e20:	andeq	r7, r1, r8, asr #19
   17e24:	andeq	r7, r1, r8, asr #19
   17e28:	andeq	r7, r1, r8, asr #19
   17e2c:	andeq	r7, r1, r8, asr #19
   17e30:	andeq	r7, r1, r8, asr #19
   17e34:	andeq	r7, r1, r8, asr #19
   17e38:	andeq	r7, r1, r8, asr #19
   17e3c:	andeq	r7, r1, r8, asr #19
   17e40:	andeq	r7, r1, r8, asr #19
   17e44:	andeq	r7, r1, r8, asr #19
   17e48:	andeq	r7, r1, r8, asr #19
   17e4c:	andeq	r7, r1, r8, asr #19
   17e50:	andeq	r7, r1, r8, asr #19
   17e54:	andeq	r7, r1, r8, asr #19
   17e58:	andeq	r7, r1, r8, asr #19
   17e5c:	andeq	r7, r1, r8, asr #19
   17e60:	andeq	r7, r1, r8, asr #19
   17e64:	andeq	r7, r1, r0, ror r9
   17e68:	andeq	r7, r1, r4, ror lr
   17e6c:	andeq	r7, r1, r0, ror r9
   17e70:	ldrdeq	r7, [r1], -r8
   17e74:	mov	r3, #0
   17e78:	str	r3, [sp, #40]	; 0x28
   17e7c:	b	17554 <__assert_fail@plt+0x5f50>
   17e80:	mov	r3, #0
   17e84:	str	r3, [sp, #40]	; 0x28
   17e88:	b	174ec <__assert_fail@plt+0x5ee8>
   17e8c:	mov	r3, #0
   17e90:	str	r3, [sp, #40]	; 0x28
   17e94:	b	17520 <__assert_fail@plt+0x5f1c>
   17e98:	ldr	r3, [sp, #44]	; 0x2c
   17e9c:	cmp	r3, #0
   17ea0:	beq	17438 <__assert_fail@plt+0x5e34>
   17ea4:	ldr	r3, [sp, #52]	; 0x34
   17ea8:	mov	fp, r9
   17eac:	str	r3, [sp, #60]	; 0x3c
   17eb0:	b	175b0 <__assert_fail@plt+0x5fac>
   17eb4:	ldr	r3, [sp, #44]	; 0x2c
   17eb8:	cmp	r3, #0
   17ebc:	bne	182f0 <__assert_fail@plt+0x6cec>
   17ec0:	str	r3, [sp, #40]	; 0x28
   17ec4:	cmp	sl, #0
   17ec8:	ldr	r3, [sp, #84]	; 0x54
   17ecc:	clz	r3, r3
   17ed0:	lsr	r3, r3, #5
   17ed4:	moveq	r3, #0
   17ed8:	cmp	r3, #0
   17edc:	strne	sl, [sp, #84]	; 0x54
   17ee0:	movne	sl, #0
   17ee4:	bne	17f14 <__assert_fail@plt+0x6910>
   17ee8:	cmp	sl, r4
   17eec:	movhi	r3, #39	; 0x27
   17ef0:	strbhi	r3, [r9, r4]
   17ef4:	add	r3, r4, #1
   17ef8:	cmp	sl, r3
   17efc:	movhi	r2, #92	; 0x5c
   17f00:	strbhi	r2, [r9, r3]
   17f04:	add	r3, r4, #2
   17f08:	cmp	sl, r3
   17f0c:	movhi	r2, #39	; 0x27
   17f10:	strbhi	r2, [r9, r3]
   17f14:	mov	r3, #0
   17f18:	add	r4, r4, #3
   17f1c:	str	r6, [sp, #80]	; 0x50
   17f20:	mov	fp, r3
   17f24:	mov	r5, #39	; 0x27
   17f28:	b	173f4 <__assert_fail@plt+0x5df0>
   17f2c:	ldr	r3, [sp, #44]	; 0x2c
   17f30:	cmp	r3, #0
   17f34:	bne	182f0 <__assert_fail@plt+0x6cec>
   17f38:	mov	r6, #0
   17f3c:	mov	r5, #63	; 0x3f
   17f40:	str	r3, [sp, #40]	; 0x28
   17f44:	mov	r3, fp
   17f48:	b	173f4 <__assert_fail@plt+0x5df0>
   17f4c:	mov	r2, #0
   17f50:	mov	r3, #0
   17f54:	cmn	r8, #1
   17f58:	strd	r2, [sp, #128]	; 0x80
   17f5c:	bne	17f6c <__assert_fail@plt+0x6968>
   17f60:	ldr	r0, [sp, #28]
   17f64:	bl	11460 <strlen@plt>
   17f68:	mov	r8, r0
   17f6c:	str	r9, [sp, #100]	; 0x64
   17f70:	mov	r3, #0
   17f74:	strd	sl, [sp, #104]	; 0x68
   17f78:	ldr	sl, [sp, #28]
   17f7c:	str	r5, [sp, #112]	; 0x70
   17f80:	mov	r5, r3
   17f84:	ldr	r9, [sp, #68]	; 0x44
   17f88:	str	r4, [sp, #116]	; 0x74
   17f8c:	add	r4, r7, r5
   17f90:	add	r3, sp, #128	; 0x80
   17f94:	add	fp, sl, r4
   17f98:	sub	r2, r8, r4
   17f9c:	mov	r1, fp
   17fa0:	add	r0, sp, #124	; 0x7c
   17fa4:	bl	1c47c <__assert_fail@plt+0xae78>
   17fa8:	subs	r1, r0, #0
   17fac:	beq	17fec <__assert_fail@plt+0x69e8>
   17fb0:	cmn	r1, #1
   17fb4:	beq	18344 <__assert_fail@plt+0x6d40>
   17fb8:	cmn	r1, #2
   17fbc:	beq	18364 <__assert_fail@plt+0x6d60>
   17fc0:	cmp	r9, #0
   17fc4:	bne	1801c <__assert_fail@plt+0x6a18>
   17fc8:	ldr	r0, [sp, #124]	; 0x7c
   17fcc:	add	r5, r5, r1
   17fd0:	bl	1134c <iswprint@plt>
   17fd4:	cmp	r0, #0
   17fd8:	add	r0, sp, #128	; 0x80
   17fdc:	moveq	r6, #0
   17fe0:	bl	112bc <mbsinit@plt>
   17fe4:	cmp	r0, #0
   17fe8:	beq	17f8c <__assert_fail@plt+0x6988>
   17fec:	ldr	r3, [sp, #60]	; 0x3c
   17ff0:	add	r9, sp, #100	; 0x64
   17ff4:	mov	r0, r5
   17ff8:	ldm	r9, {r9, sl, fp}
   17ffc:	eor	r2, r6, #1
   18000:	ldr	r5, [sp, #112]	; 0x70
   18004:	and	r2, r2, r3
   18008:	uxtb	r2, r2
   1800c:	ldr	r4, [sp, #116]	; 0x74
   18010:	cmp	r0, #1
   18014:	bhi	17b30 <__assert_fail@plt+0x652c>
   18018:	b	17b20 <__assert_fail@plt+0x651c>
   1801c:	cmp	r1, #1
   18020:	beq	17fc8 <__assert_fail@plt+0x69c4>
   18024:	add	r2, r4, #1
   18028:	add	r3, sl, r1
   1802c:	add	r2, sl, r2
   18030:	add	r4, r3, r4
   18034:	ldrb	r3, [r2], #1
   18038:	sub	r3, r3, #91	; 0x5b
   1803c:	cmp	r3, #33	; 0x21
   18040:	ldrls	pc, [pc, r3, lsl #2]
   18044:	b	180d0 <__assert_fail@plt+0x6acc>
   18048:	ldrdeq	r8, [r1], -ip
   1804c:	ldrdeq	r8, [r1], -ip
   18050:	ldrdeq	r8, [r1], -r0
   18054:	ldrdeq	r8, [r1], -ip
   18058:	ldrdeq	r8, [r1], -r0
   1805c:	ldrdeq	r8, [r1], -ip
   18060:	ldrdeq	r8, [r1], -r0
   18064:	ldrdeq	r8, [r1], -r0
   18068:	ldrdeq	r8, [r1], -r0
   1806c:	ldrdeq	r8, [r1], -r0
   18070:	ldrdeq	r8, [r1], -r0
   18074:	ldrdeq	r8, [r1], -r0
   18078:	ldrdeq	r8, [r1], -r0
   1807c:	ldrdeq	r8, [r1], -r0
   18080:	ldrdeq	r8, [r1], -r0
   18084:	ldrdeq	r8, [r1], -r0
   18088:	ldrdeq	r8, [r1], -r0
   1808c:	ldrdeq	r8, [r1], -r0
   18090:	ldrdeq	r8, [r1], -r0
   18094:	ldrdeq	r8, [r1], -r0
   18098:	ldrdeq	r8, [r1], -r0
   1809c:	ldrdeq	r8, [r1], -r0
   180a0:	ldrdeq	r8, [r1], -r0
   180a4:	ldrdeq	r8, [r1], -r0
   180a8:	ldrdeq	r8, [r1], -r0
   180ac:	ldrdeq	r8, [r1], -r0
   180b0:	ldrdeq	r8, [r1], -r0
   180b4:	ldrdeq	r8, [r1], -r0
   180b8:	ldrdeq	r8, [r1], -r0
   180bc:	ldrdeq	r8, [r1], -r0
   180c0:	ldrdeq	r8, [r1], -r0
   180c4:	ldrdeq	r8, [r1], -r0
   180c8:	ldrdeq	r8, [r1], -r0
   180cc:	ldrdeq	r8, [r1], -ip
   180d0:	cmp	r4, r2
   180d4:	bne	18034 <__assert_fail@plt+0x6a30>
   180d8:	b	17fc8 <__assert_fail@plt+0x69c4>
   180dc:	mov	r3, #2
   180e0:	ldr	fp, [sp, #100]	; 0x64
   180e4:	str	r3, [sp, #176]	; 0xb0
   180e8:	ldr	sl, [sp, #104]	; 0x68
   180ec:	b	175b0 <__assert_fail@plt+0x5fac>
   180f0:	ldr	r2, [sp, #52]	; 0x34
   180f4:	mov	fp, r9
   180f8:	ldr	r3, [sp, #60]	; 0x3c
   180fc:	and	r3, r3, r2
   18100:	str	r3, [sp, #60]	; 0x3c
   18104:	b	175b0 <__assert_fail@plt+0x5fac>
   18108:	cmp	sl, r4
   1810c:	movhi	r2, fp
   18110:	bhi	17488 <__assert_fail@plt+0x5e84>
   18114:	mov	r2, r4
   18118:	b	17498 <__assert_fail@plt+0x5e94>
   1811c:	mov	r6, r3
   18120:	mov	r5, #63	; 0x3f
   18124:	b	17558 <__assert_fail@plt+0x5f54>
   18128:	ldr	r8, [sp, #36]	; 0x24
   1812c:	ldr	r6, [sp, #100]	; 0x64
   18130:	b	17404 <__assert_fail@plt+0x5e00>
   18134:	mov	fp, r9
   18138:	ldr	r8, [sp, #36]	; 0x24
   1813c:	ldr	r3, [sp, #52]	; 0x34
   18140:	str	r3, [sp, #60]	; 0x3c
   18144:	b	175b0 <__assert_fail@plt+0x5fac>
   18148:	ldr	r8, [sp, #36]	; 0x24
   1814c:	ldr	r6, [sp, #100]	; 0x64
   18150:	b	1729c <__assert_fail@plt+0x5c98>
   18154:	mov	r3, #0
   18158:	add	r4, r4, #4
   1815c:	mov	fp, r2
   18160:	mov	r6, r3
   18164:	mov	r5, #48	; 0x30
   18168:	b	173f4 <__assert_fail@plt+0x5df0>
   1816c:	mov	r6, r3
   18170:	b	17bf0 <__assert_fail@plt+0x65ec>
   18174:	mov	r3, #1
   18178:	movw	r2, #56492	; 0xdcac
   1817c:	movt	r2, #1
   18180:	mov	r4, r3
   18184:	mov	r9, sl
   18188:	str	r3, [sp, #32]
   1818c:	str	sl, [sp, #44]	; 0x2c
   18190:	str	r3, [sp, #48]	; 0x30
   18194:	str	sl, [sp, #52]	; 0x34
   18198:	str	r3, [sp, #56]	; 0x38
   1819c:	str	r3, [sp, #60]	; 0x3c
   181a0:	str	sl, [sp, #64]	; 0x40
   181a4:	str	sl, [sp, #68]	; 0x44
   181a8:	str	r2, [sp, #72]	; 0x48
   181ac:	str	sl, [sp, #80]	; 0x50
   181b0:	str	sl, [sp, #84]	; 0x54
   181b4:	str	sl, [sp, #88]	; 0x58
   181b8:	b	16ca8 <__assert_fail@plt+0x56a4>
   181bc:	mov	r3, #0
   181c0:	mov	r5, #48	; 0x30
   181c4:	mov	r6, r3
   181c8:	b	173f4 <__assert_fail@plt+0x5df0>
   181cc:	cmp	sl, r4
   181d0:	mov	r5, #48	; 0x30
   181d4:	movhi	r3, #48	; 0x30
   181d8:	strbhi	r3, [r9, r4]
   181dc:	add	r3, r2, #2
   181e0:	add	r4, r2, #3
   181e4:	cmp	sl, r3
   181e8:	movhi	r1, #48	; 0x30
   181ec:	strbhi	r1, [r9, r3]
   181f0:	mov	r3, #0
   181f4:	b	174d0 <__assert_fail@plt+0x5ecc>
   181f8:	ldr	r3, [sp, #48]	; 0x30
   181fc:	str	r3, [sp, #40]	; 0x28
   18200:	b	17adc <__assert_fail@plt+0x64d8>
   18204:	ldr	r2, [sp, #28]
   18208:	ldrb	r2, [r2, r3]
   1820c:	sub	r1, r2, #33	; 0x21
   18210:	cmp	r1, #29
   18214:	ldrls	pc, [pc, r1, lsl #2]
   18218:	b	17554 <__assert_fail@plt+0x5f50>
   1821c:	muleq	r1, r4, r2
   18220:	andeq	r7, r1, r4, asr r5
   18224:	andeq	r7, r1, r4, asr r5
   18228:	andeq	r7, r1, r4, asr r5
   1822c:	andeq	r7, r1, r4, asr r5
   18230:	andeq	r7, r1, r4, asr r5
   18234:	muleq	r1, r4, r2
   18238:	muleq	r1, r4, r2
   1823c:	muleq	r1, r4, r2
   18240:	andeq	r7, r1, r4, asr r5
   18244:	andeq	r7, r1, r4, asr r5
   18248:	andeq	r7, r1, r4, asr r5
   1824c:	muleq	r1, r4, r2
   18250:	andeq	r7, r1, r4, asr r5
   18254:	muleq	r1, r4, r2
   18258:	andeq	r7, r1, r4, asr r5
   1825c:	andeq	r7, r1, r4, asr r5
   18260:	andeq	r7, r1, r4, asr r5
   18264:	andeq	r7, r1, r4, asr r5
   18268:	andeq	r7, r1, r4, asr r5
   1826c:	andeq	r7, r1, r4, asr r5
   18270:	andeq	r7, r1, r4, asr r5
   18274:	andeq	r7, r1, r4, asr r5
   18278:	andeq	r7, r1, r4, asr r5
   1827c:	andeq	r7, r1, r4, asr r5
   18280:	andeq	r7, r1, r4, asr r5
   18284:	andeq	r7, r1, r4, asr r5
   18288:	muleq	r1, r4, r2
   1828c:	muleq	r1, r4, r2
   18290:	muleq	r1, r4, r2
   18294:	ldr	r1, [sp, #44]	; 0x2c
   18298:	cmp	r1, #0
   1829c:	bne	184fc <__assert_fail@plt+0x6ef8>
   182a0:	cmp	sl, r4
   182a4:	mov	r7, r3
   182a8:	movhi	r1, #63	; 0x3f
   182ac:	mov	r5, r2
   182b0:	mov	r3, fp
   182b4:	strbhi	r1, [r9, r4]
   182b8:	add	r1, r4, #1
   182bc:	cmp	sl, r1
   182c0:	movhi	r0, #34	; 0x22
   182c4:	strbhi	r0, [r9, r1]
   182c8:	add	r1, r4, #2
   182cc:	cmp	sl, r1
   182d0:	movhi	r0, #34	; 0x22
   182d4:	strbhi	r0, [r9, r1]
   182d8:	add	r1, r4, #3
   182dc:	add	r4, r4, #4
   182e0:	cmp	sl, r1
   182e4:	movhi	r0, #63	; 0x3f
   182e8:	strbhi	r0, [r9, r1]
   182ec:	b	174d0 <__assert_fail@plt+0x5ecc>
   182f0:	mov	fp, r9
   182f4:	b	175b0 <__assert_fail@plt+0x5fac>
   182f8:	ldr	r3, [sp, #188]	; 0xbc
   182fc:	ldrb	r3, [r3]
   18300:	cmp	r3, #0
   18304:	beq	16c40 <__assert_fail@plt+0x563c>
   18308:	ldr	r2, [sp, #188]	; 0xbc
   1830c:	cmp	sl, r4
   18310:	bls	18330 <__assert_fail@plt+0x6d2c>
   18314:	strb	r3, [fp, r4]
   18318:	add	r4, r4, #1
   1831c:	ldrb	r3, [r2, #1]!
   18320:	cmp	r3, #0
   18324:	beq	16c40 <__assert_fail@plt+0x563c>
   18328:	cmp	sl, r4
   1832c:	bhi	18314 <__assert_fail@plt+0x6d10>
   18330:	ldrb	r3, [r2, #1]!
   18334:	add	r4, r4, #1
   18338:	cmp	r3, #0
   1833c:	bne	1830c <__assert_fail@plt+0x6d08>
   18340:	b	16c40 <__assert_fail@plt+0x563c>
   18344:	add	r9, sp, #100	; 0x64
   18348:	mov	r0, r5
   1834c:	ldr	r2, [sp, #60]	; 0x3c
   18350:	mov	r6, #0
   18354:	ldm	r9, {r9, sl, fp}
   18358:	ldr	r5, [sp, #112]	; 0x70
   1835c:	ldr	r4, [sp, #116]	; 0x74
   18360:	b	18010 <__assert_fail@plt+0x6a0c>
   18364:	cmp	r4, r8
   18368:	add	r9, sp, #100	; 0x64
   1836c:	mov	r1, r4
   18370:	mov	r2, fp
   18374:	ldm	r9, {r9, sl, fp}
   18378:	mov	r3, r5
   1837c:	mov	r0, r5
   18380:	ldr	r5, [sp, #112]	; 0x70
   18384:	ldr	r4, [sp, #116]	; 0x74
   18388:	bcs	183bc <__assert_fail@plt+0x6db8>
   1838c:	ldrb	r6, [r2]
   18390:	cmp	r6, #0
   18394:	bne	183a8 <__assert_fail@plt+0x6da4>
   18398:	b	184f4 <__assert_fail@plt+0x6ef0>
   1839c:	ldrb	r6, [r2, #1]!
   183a0:	cmp	r6, #0
   183a4:	beq	1848c <__assert_fail@plt+0x6e88>
   183a8:	add	r3, r3, #1
   183ac:	add	r1, r7, r3
   183b0:	cmp	r8, r1
   183b4:	bhi	1839c <__assert_fail@plt+0x6d98>
   183b8:	mov	r0, r3
   183bc:	mov	r6, #0
   183c0:	ldr	r2, [sp, #60]	; 0x3c
   183c4:	b	18010 <__assert_fail@plt+0x6a0c>
   183c8:	mov	r3, #1
   183cc:	mov	r4, #0
   183d0:	mov	r9, r4
   183d4:	str	r3, [sp, #32]
   183d8:	str	r3, [sp, #44]	; 0x2c
   183dc:	str	r3, [sp, #48]	; 0x30
   183e0:	str	r4, [sp, #52]	; 0x34
   183e4:	str	r3, [sp, #56]	; 0x38
   183e8:	str	r3, [sp, #60]	; 0x3c
   183ec:	str	r3, [sp, #88]	; 0x58
   183f0:	movw	r3, #56492	; 0xdcac
   183f4:	movt	r3, #1
   183f8:	str	r4, [sp, #64]	; 0x40
   183fc:	str	r4, [sp, #68]	; 0x44
   18400:	str	r3, [sp, #72]	; 0x48
   18404:	str	r4, [sp, #80]	; 0x50
   18408:	str	r4, [sp, #84]	; 0x54
   1840c:	b	16ca8 <__assert_fail@plt+0x56a4>
   18410:	mov	fp, r9
   18414:	b	175c4 <__assert_fail@plt+0x5fc0>
   18418:	ldr	r3, [sp, #48]	; 0x30
   1841c:	b	17f38 <__assert_fail@plt+0x6934>
   18420:	mov	r2, r3
   18424:	ldr	r3, [sp, #72]	; 0x48
   18428:	cmp	r3, #0
   1842c:	moveq	r2, #0
   18430:	andne	r2, r2, #1
   18434:	cmp	r2, #0
   18438:	beq	18468 <__assert_fail@plt+0x6e64>
   1843c:	mov	r2, r3
   18440:	ldrb	r3, [r3]
   18444:	cmp	r3, #0
   18448:	beq	18468 <__assert_fail@plt+0x6e64>
   1844c:	cmp	sl, r4
   18450:	bls	18478 <__assert_fail@plt+0x6e74>
   18454:	strb	r3, [fp, r4]
   18458:	add	r4, r4, #1
   1845c:	ldrb	r3, [r2, #1]!
   18460:	cmp	r3, #0
   18464:	bne	1844c <__assert_fail@plt+0x6e48>
   18468:	cmp	sl, r4
   1846c:	movhi	r3, #0
   18470:	strbhi	r3, [fp, r4]
   18474:	b	17600 <__assert_fail@plt+0x5ffc>
   18478:	ldrb	r3, [r2, #1]!
   1847c:	add	r4, r4, #1
   18480:	cmp	r3, #0
   18484:	bne	1844c <__assert_fail@plt+0x6e48>
   18488:	b	18468 <__assert_fail@plt+0x6e64>
   1848c:	mov	r0, r3
   18490:	ldr	r2, [sp, #60]	; 0x3c
   18494:	b	18010 <__assert_fail@plt+0x6a0c>
   18498:	mov	ip, #5
   1849c:	mov	r3, r8
   184a0:	ldr	r1, [sp, #84]	; 0x54
   184a4:	str	ip, [sp]
   184a8:	ldr	r2, [sp, #180]	; 0xb4
   184ac:	ldr	ip, [sp, #188]	; 0xbc
   184b0:	ldr	r0, [sp, #184]	; 0xb8
   184b4:	str	r2, [sp, #4]
   184b8:	ldr	r2, [sp, #28]
   184bc:	str	ip, [sp, #12]
   184c0:	ldr	ip, [sp, #192]	; 0xc0
   184c4:	str	r0, [sp, #8]
   184c8:	mov	r0, fp
   184cc:	str	ip, [sp, #16]
   184d0:	bl	16b84 <__assert_fail@plt+0x5580>
   184d4:	mov	r4, r0
   184d8:	b	17600 <__assert_fail@plt+0x5ffc>
   184dc:	mov	r6, r3
   184e0:	str	r3, [sp, #40]	; 0x28
   184e4:	b	17570 <__assert_fail@plt+0x5f6c>
   184e8:	mov	r3, #2
   184ec:	str	r3, [sp, #176]	; 0xb0
   184f0:	b	175b0 <__assert_fail@plt+0x5fac>
   184f4:	ldr	r2, [sp, #60]	; 0x3c
   184f8:	b	18010 <__assert_fail@plt+0x6a0c>
   184fc:	mov	r3, #5
   18500:	mov	fp, r9
   18504:	str	r3, [sp, #176]	; 0xb0
   18508:	b	175c4 <__assert_fail@plt+0x5fc0>
   1850c:	mov	r1, #1
   18510:	mov	r9, #0
   18514:	mov	r3, r9
   18518:	mov	r2, r9
   1851c:	str	r1, [sp, #32]
   18520:	str	sl, [sp, #84]	; 0x54
   18524:	b	1734c <__assert_fail@plt+0x5d48>
   18528:	mov	r3, #0
   1852c:	mov	r2, #1
   18530:	mov	r9, r3
   18534:	mov	r4, r3
   18538:	str	r2, [sp, #32]
   1853c:	strd	r2, [sp, #44]	; 0x2c
   18540:	strd	r2, [sp, #56]	; 0x38
   18544:	str	r3, [sp, #80]	; 0x50
   18548:	str	r3, [sp, #84]	; 0x54
   1854c:	str	r3, [sp, #88]	; 0x58
   18550:	movw	r3, #56512	; 0xdcc0
   18554:	movt	r3, #1
   18558:	str	r2, [sp, #52]	; 0x34
   1855c:	str	r2, [sp, #64]	; 0x40
   18560:	str	r2, [sp, #68]	; 0x44
   18564:	str	r3, [sp, #72]	; 0x48
   18568:	b	16ca8 <__assert_fail@plt+0x56a4>
   1856c:	bl	115c8 <abort@plt>
   18570:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18574:	mov	r4, r0
   18578:	mov	r5, r3
   1857c:	strd	r6, [sp, #8]
   18580:	movw	r7, #61804	; 0xf16c
   18584:	movt	r7, #2
   18588:	strd	r8, [sp, #16]
   1858c:	strd	sl, [sp, #24]
   18590:	mov	sl, r1
   18594:	mov	fp, r2
   18598:	str	lr, [sp, #32]
   1859c:	sub	sp, sp, #60	; 0x3c
   185a0:	bl	11484 <__errno_location@plt>
   185a4:	mov	r8, r0
   185a8:	cmn	r4, #-2147483647	; 0x80000001
   185ac:	ldr	r6, [r7]
   185b0:	movne	r0, #0
   185b4:	moveq	r0, #1
   185b8:	ldr	r3, [r8]
   185bc:	orrs	r0, r0, r4, lsr #31
   185c0:	str	r3, [sp, #28]
   185c4:	bne	18754 <__assert_fail@plt+0x7150>
   185c8:	ldr	r3, [r7, #4]
   185cc:	cmp	r3, r4
   185d0:	bgt	18630 <__assert_fail@plt+0x702c>
   185d4:	add	r1, r7, #8
   185d8:	sub	r2, r4, r3
   185dc:	str	r3, [sp, #52]	; 0x34
   185e0:	cmp	r6, r1
   185e4:	add	r2, r2, #1
   185e8:	beq	1872c <__assert_fail@plt+0x7128>
   185ec:	mov	r1, #8
   185f0:	mov	r0, r6
   185f4:	mvn	r3, #-2147483648	; 0x80000000
   185f8:	str	r1, [sp]
   185fc:	add	r1, sp, #52	; 0x34
   18600:	bl	1b848 <__assert_fail@plt+0xa244>
   18604:	mov	r6, r0
   18608:	str	r0, [r7]
   1860c:	ldr	r0, [r7, #4]
   18610:	mov	r1, #0
   18614:	ldr	r2, [sp, #52]	; 0x34
   18618:	sub	r2, r2, r0
   1861c:	add	r0, r6, r0, lsl #3
   18620:	lsl	r2, r2, #3
   18624:	bl	114a8 <memset@plt>
   18628:	ldr	r3, [sp, #52]	; 0x34
   1862c:	str	r3, [r7, #4]
   18630:	ldr	r1, [r5, #4]
   18634:	add	r0, r6, r4, lsl #3
   18638:	add	ip, r5, #8
   1863c:	mov	r3, fp
   18640:	mov	r2, sl
   18644:	ldr	r7, [r0, #4]
   18648:	str	r0, [sp, #36]	; 0x24
   1864c:	str	ip, [sp, #40]	; 0x28
   18650:	orr	r0, r1, #1
   18654:	ldr	r9, [r6, r4, lsl #3]
   18658:	str	ip, [sp, #8]
   1865c:	ldr	lr, [r5, #44]	; 0x2c
   18660:	str	r0, [sp, #4]
   18664:	ldr	ip, [r5]
   18668:	mov	r1, r9
   1866c:	str	ip, [sp, #32]
   18670:	ldr	ip, [r5, #40]	; 0x28
   18674:	str	ip, [sp, #12]
   18678:	ldr	ip, [sp, #32]
   1867c:	str	lr, [sp, #16]
   18680:	str	r0, [sp, #44]	; 0x2c
   18684:	mov	r0, r7
   18688:	str	ip, [sp]
   1868c:	bl	16b84 <__assert_fail@plt+0x5580>
   18690:	cmp	r9, r0
   18694:	bhi	18704 <__assert_fail@plt+0x7100>
   18698:	add	r9, r0, #1
   1869c:	movw	r3, #61968	; 0xf210
   186a0:	movt	r3, #2
   186a4:	cmp	r7, r3
   186a8:	str	r9, [r6, r4, lsl #3]
   186ac:	beq	186b8 <__assert_fail@plt+0x70b4>
   186b0:	mov	r0, r7
   186b4:	bl	1c300 <__assert_fail@plt+0xacfc>
   186b8:	mov	r0, r9
   186bc:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   186c0:	ldr	ip, [r5]
   186c4:	mov	r3, fp
   186c8:	mov	r2, sl
   186cc:	mov	r1, r9
   186d0:	mov	r7, r0
   186d4:	ldr	lr, [sp, #36]	; 0x24
   186d8:	ldr	r4, [r5, #40]	; 0x28
   186dc:	str	r0, [lr, #4]
   186e0:	ldr	lr, [r5, #44]	; 0x2c
   186e4:	str	ip, [sp]
   186e8:	ldr	ip, [sp, #44]	; 0x2c
   186ec:	str	ip, [sp, #4]
   186f0:	ldr	ip, [sp, #40]	; 0x28
   186f4:	str	r4, [sp, #12]
   186f8:	str	lr, [sp, #16]
   186fc:	str	ip, [sp, #8]
   18700:	bl	16b84 <__assert_fail@plt+0x5580>
   18704:	ldr	r3, [sp, #28]
   18708:	mov	r0, r7
   1870c:	str	r3, [r8]
   18710:	add	sp, sp, #60	; 0x3c
   18714:	ldrd	r4, [sp]
   18718:	ldrd	r6, [sp, #8]
   1871c:	ldrd	r8, [sp, #16]
   18720:	ldrd	sl, [sp, #24]
   18724:	add	sp, sp, #32
   18728:	pop	{pc}		; (ldr pc, [sp], #4)
   1872c:	mov	r1, #8
   18730:	mvn	r3, #-2147483648	; 0x80000000
   18734:	str	r1, [sp]
   18738:	add	r1, sp, #52	; 0x34
   1873c:	bl	1b848 <__assert_fail@plt+0xa244>
   18740:	ldrd	r2, [r7, #8]
   18744:	mov	r6, r0
   18748:	str	r0, [r7]
   1874c:	strd	r2, [r0]
   18750:	b	1860c <__assert_fail@plt+0x7008>
   18754:	bl	115c8 <abort@plt>
   18758:	strd	r4, [sp, #-16]!
   1875c:	mov	r5, r0
   18760:	str	r6, [sp, #8]
   18764:	str	lr, [sp, #12]
   18768:	bl	11484 <__errno_location@plt>
   1876c:	mov	r4, r0
   18770:	cmp	r5, #0
   18774:	ldr	r0, [pc, #32]	; 1879c <__assert_fail@plt+0x7198>
   18778:	mov	r1, #48	; 0x30
   1877c:	movne	r0, r5
   18780:	ldr	r6, [r4]
   18784:	bl	1b9e8 <__assert_fail@plt+0xa3e4>
   18788:	str	r6, [r4]
   1878c:	ldrd	r4, [sp]
   18790:	ldr	r6, [sp, #8]
   18794:	add	sp, sp, #12
   18798:	pop	{pc}		; (ldr pc, [sp], #4)
   1879c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   187a0:	ldr	r3, [pc, #12]	; 187b4 <__assert_fail@plt+0x71b0>
   187a4:	cmp	r0, #0
   187a8:	moveq	r0, r3
   187ac:	ldr	r0, [r0]
   187b0:	bx	lr
   187b4:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   187b8:	ldr	r3, [pc, #12]	; 187cc <__assert_fail@plt+0x71c8>
   187bc:	cmp	r0, #0
   187c0:	moveq	r0, r3
   187c4:	str	r1, [r0]
   187c8:	bx	lr
   187cc:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   187d0:	ldr	r3, [pc, #52]	; 1880c <__assert_fail@plt+0x7208>
   187d4:	cmp	r0, #0
   187d8:	push	{lr}		; (str lr, [sp, #-4]!)
   187dc:	lsr	lr, r1, #5
   187e0:	and	r1, r1, #31
   187e4:	moveq	r0, r3
   187e8:	add	r3, r0, #8
   187ec:	ldr	ip, [r3, lr, lsl #2]
   187f0:	lsr	r0, ip, r1
   187f4:	eor	r2, r2, r0
   187f8:	and	r0, r0, #1
   187fc:	and	r2, r2, #1
   18800:	eor	r1, ip, r2, lsl r1
   18804:	str	r1, [r3, lr, lsl #2]
   18808:	pop	{pc}		; (ldr pc, [sp], #4)
   1880c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18810:	ldr	r3, [pc, #16]	; 18828 <__assert_fail@plt+0x7224>
   18814:	cmp	r0, #0
   18818:	movne	r3, r0
   1881c:	ldr	r0, [r3, #4]
   18820:	str	r1, [r3, #4]
   18824:	bx	lr
   18828:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   1882c:	ldr	r3, [pc, #48]	; 18864 <__assert_fail@plt+0x7260>
   18830:	cmp	r0, #0
   18834:	mov	ip, #10
   18838:	moveq	r0, r3
   1883c:	cmp	r2, #0
   18840:	cmpne	r1, #0
   18844:	str	ip, [r0]
   18848:	beq	18858 <__assert_fail@plt+0x7254>
   1884c:	str	r1, [r0, #40]	; 0x28
   18850:	str	r2, [r0, #44]	; 0x2c
   18854:	bx	lr
   18858:	str	r4, [sp, #-8]!
   1885c:	str	lr, [sp, #4]
   18860:	bl	115c8 <abort@plt>
   18864:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18868:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1886c:	strd	r6, [sp, #8]
   18870:	mov	r7, r0
   18874:	mov	r6, r1
   18878:	strd	r8, [sp, #16]
   1887c:	mov	r8, r2
   18880:	mov	r9, r3
   18884:	str	lr, [sp, #24]
   18888:	sub	sp, sp, #28
   1888c:	ldr	r4, [sp, #56]	; 0x38
   18890:	ldr	ip, [pc, #104]	; 18900 <__assert_fail@plt+0x72fc>
   18894:	cmp	r4, #0
   18898:	moveq	r4, ip
   1889c:	bl	11484 <__errno_location@plt>
   188a0:	ldr	ip, [r4, #44]	; 0x2c
   188a4:	mov	r5, r0
   188a8:	mov	r1, r6
   188ac:	add	lr, r4, #8
   188b0:	mov	r3, r9
   188b4:	ldr	r6, [r5]
   188b8:	mov	r2, r8
   188bc:	mov	r0, r7
   188c0:	str	ip, [sp, #16]
   188c4:	ldr	ip, [r4, #40]	; 0x28
   188c8:	str	lr, [sp, #8]
   188cc:	str	ip, [sp, #12]
   188d0:	ldr	ip, [r4, #4]
   188d4:	str	ip, [sp, #4]
   188d8:	ldr	ip, [r4]
   188dc:	str	ip, [sp]
   188e0:	bl	16b84 <__assert_fail@plt+0x5580>
   188e4:	str	r6, [r5]
   188e8:	add	sp, sp, #28
   188ec:	ldrd	r4, [sp]
   188f0:	ldrd	r6, [sp, #8]
   188f4:	ldrd	r8, [sp, #16]
   188f8:	add	sp, sp, #24
   188fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18900:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18904:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18908:	cmp	r2, #0
   1890c:	ldr	r4, [pc, #192]	; 189d4 <__assert_fail@plt+0x73d0>
   18910:	movne	r4, r2
   18914:	strd	r6, [sp, #8]
   18918:	strd	r8, [sp, #16]
   1891c:	mov	r9, r1
   18920:	mov	r8, r0
   18924:	strd	sl, [sp, #24]
   18928:	str	lr, [sp, #32]
   1892c:	sub	sp, sp, #36	; 0x24
   18930:	bl	11484 <__errno_location@plt>
   18934:	ldr	r5, [r4, #4]
   18938:	mov	r6, r0
   1893c:	add	r7, r4, #8
   18940:	mov	r1, #0
   18944:	mov	r3, r9
   18948:	ldr	ip, [r4, #44]	; 0x2c
   1894c:	mov	r2, r8
   18950:	mov	r0, r1
   18954:	ldr	sl, [r6]
   18958:	orr	r5, r5, #1
   1895c:	str	ip, [sp, #16]
   18960:	ldr	ip, [r4, #40]	; 0x28
   18964:	stmib	sp, {r5, r7, ip}
   18968:	ldr	ip, [r4]
   1896c:	str	ip, [sp]
   18970:	bl	16b84 <__assert_fail@plt+0x5580>
   18974:	add	r1, r0, #1
   18978:	mov	r0, r1
   1897c:	str	r1, [sp, #28]
   18980:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   18984:	ldr	ip, [r4, #44]	; 0x2c
   18988:	mov	fp, r0
   1898c:	mov	r3, r9
   18990:	mov	r2, r8
   18994:	ldr	r1, [sp, #28]
   18998:	str	ip, [sp, #16]
   1899c:	ldr	ip, [r4, #40]	; 0x28
   189a0:	stmib	sp, {r5, r7, ip}
   189a4:	ldr	ip, [r4]
   189a8:	str	ip, [sp]
   189ac:	bl	16b84 <__assert_fail@plt+0x5580>
   189b0:	mov	r0, fp
   189b4:	str	sl, [r6]
   189b8:	add	sp, sp, #36	; 0x24
   189bc:	ldrd	r4, [sp]
   189c0:	ldrd	r6, [sp, #8]
   189c4:	ldrd	r8, [sp, #16]
   189c8:	ldrd	sl, [sp, #24]
   189cc:	add	sp, sp, #32
   189d0:	pop	{pc}		; (ldr pc, [sp], #4)
   189d4:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   189d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   189dc:	cmp	r3, #0
   189e0:	ldr	r4, [pc, #220]	; 18ac4 <__assert_fail@plt+0x74c0>
   189e4:	movne	r4, r3
   189e8:	strd	r6, [sp, #8]
   189ec:	mov	r6, r2
   189f0:	strd	r8, [sp, #16]
   189f4:	mov	r9, r0
   189f8:	strd	sl, [sp, #24]
   189fc:	mov	sl, r1
   18a00:	str	lr, [sp, #32]
   18a04:	sub	sp, sp, #44	; 0x2c
   18a08:	bl	11484 <__errno_location@plt>
   18a0c:	ldr	r5, [r4, #4]
   18a10:	mov	r7, r0
   18a14:	mov	r1, #0
   18a18:	add	r8, r4, #8
   18a1c:	mov	r3, sl
   18a20:	ldr	ip, [r4, #44]	; 0x2c
   18a24:	mov	r2, r9
   18a28:	mov	r0, r1
   18a2c:	ldr	lr, [r7]
   18a30:	cmp	r6, r1
   18a34:	orreq	r5, r5, #1
   18a38:	str	ip, [sp, #16]
   18a3c:	ldr	ip, [r4, #40]	; 0x28
   18a40:	stmib	sp, {r5, r8, ip}
   18a44:	ldr	ip, [r4]
   18a48:	str	lr, [sp, #28]
   18a4c:	str	ip, [sp]
   18a50:	bl	16b84 <__assert_fail@plt+0x5580>
   18a54:	add	r1, r0, #1
   18a58:	mov	fp, r0
   18a5c:	mov	r0, r1
   18a60:	str	r1, [sp, #36]	; 0x24
   18a64:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   18a68:	ldr	ip, [r4, #44]	; 0x2c
   18a6c:	mov	r3, sl
   18a70:	mov	r2, r9
   18a74:	ldr	r1, [sp, #36]	; 0x24
   18a78:	str	ip, [sp, #16]
   18a7c:	ldr	ip, [r4, #40]	; 0x28
   18a80:	str	r0, [sp, #32]
   18a84:	stmib	sp, {r5, r8, ip}
   18a88:	ldr	ip, [r4]
   18a8c:	str	ip, [sp]
   18a90:	bl	16b84 <__assert_fail@plt+0x5580>
   18a94:	ldr	lr, [sp, #28]
   18a98:	cmp	r6, #0
   18a9c:	ldr	r0, [sp, #32]
   18aa0:	str	lr, [r7]
   18aa4:	strne	fp, [r6]
   18aa8:	add	sp, sp, #44	; 0x2c
   18aac:	ldrd	r4, [sp]
   18ab0:	ldrd	r6, [sp, #8]
   18ab4:	ldrd	r8, [sp, #16]
   18ab8:	ldrd	sl, [sp, #24]
   18abc:	add	sp, sp, #32
   18ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ac4:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18ac8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18acc:	movw	r5, #61804	; 0xf16c
   18ad0:	movt	r5, #2
   18ad4:	ldr	r3, [r5, #4]
   18ad8:	strd	r6, [sp, #8]
   18adc:	str	r8, [sp, #16]
   18ae0:	str	lr, [sp, #20]
   18ae4:	ldr	r7, [r5]
   18ae8:	cmp	r3, #1
   18aec:	ble	18b10 <__assert_fail@plt+0x750c>
   18af0:	mov	r4, #1
   18af4:	add	r6, r7, #4
   18af8:	ldr	r0, [r6, r4, lsl #3]
   18afc:	add	r4, r4, #1
   18b00:	bl	1c300 <__assert_fail@plt+0xacfc>
   18b04:	ldr	r3, [r5, #4]
   18b08:	cmp	r3, r4
   18b0c:	bgt	18af8 <__assert_fail@plt+0x74f4>
   18b10:	ldr	r0, [r7, #4]
   18b14:	movw	r4, #61968	; 0xf210
   18b18:	movt	r4, #2
   18b1c:	cmp	r0, r4
   18b20:	beq	18b34 <__assert_fail@plt+0x7530>
   18b24:	bl	1c300 <__assert_fail@plt+0xacfc>
   18b28:	mov	r3, #256	; 0x100
   18b2c:	str	r3, [r5, #8]
   18b30:	str	r4, [r5, #12]
   18b34:	ldr	r4, [pc, #44]	; 18b68 <__assert_fail@plt+0x7564>
   18b38:	cmp	r7, r4
   18b3c:	beq	18b4c <__assert_fail@plt+0x7548>
   18b40:	mov	r0, r7
   18b44:	bl	1c300 <__assert_fail@plt+0xacfc>
   18b48:	str	r4, [r5]
   18b4c:	mov	r3, #1
   18b50:	ldrd	r6, [sp, #8]
   18b54:	str	r3, [r5, #4]
   18b58:	ldrd	r4, [sp]
   18b5c:	ldr	r8, [sp, #16]
   18b60:	add	sp, sp, #20
   18b64:	pop	{pc}		; (ldr pc, [sp], #4)
   18b68:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18b6c:	ldr	r3, [pc, #4]	; 18b78 <__assert_fail@plt+0x7574>
   18b70:	mvn	r2, #0
   18b74:	b	18570 <__assert_fail@plt+0x6f6c>
   18b78:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18b7c:	ldr	r3, [pc]	; 18b84 <__assert_fail@plt+0x7580>
   18b80:	b	18570 <__assert_fail@plt+0x6f6c>
   18b84:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18b88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18b8c:	movw	r4, #61804	; 0xf16c
   18b90:	movt	r4, #2
   18b94:	strd	r6, [sp, #8]
   18b98:	strd	r8, [sp, #16]
   18b9c:	strd	sl, [sp, #24]
   18ba0:	mov	sl, r0
   18ba4:	str	lr, [sp, #32]
   18ba8:	sub	sp, sp, #44	; 0x2c
   18bac:	bl	11484 <__errno_location@plt>
   18bb0:	ldr	r3, [r0]
   18bb4:	mov	r8, r0
   18bb8:	ldr	r2, [r4, #4]
   18bbc:	ldr	r5, [r4]
   18bc0:	str	r3, [sp, #28]
   18bc4:	cmp	r2, #0
   18bc8:	bgt	18c24 <__assert_fail@plt+0x7620>
   18bcc:	add	r3, r4, #8
   18bd0:	str	r2, [sp, #36]	; 0x24
   18bd4:	rsb	r2, r2, #1
   18bd8:	cmp	r5, r3
   18bdc:	beq	18cf0 <__assert_fail@plt+0x76ec>
   18be0:	mov	r1, #8
   18be4:	mov	r0, r5
   18be8:	mvn	r3, #-2147483648	; 0x80000000
   18bec:	str	r1, [sp]
   18bf0:	add	r1, sp, #36	; 0x24
   18bf4:	bl	1b848 <__assert_fail@plt+0xa244>
   18bf8:	mov	r5, r0
   18bfc:	str	r0, [r4]
   18c00:	ldr	r0, [r4, #4]
   18c04:	mov	r1, #0
   18c08:	ldr	r2, [sp, #36]	; 0x24
   18c0c:	sub	r2, r2, r0
   18c10:	add	r0, r5, r0, lsl #3
   18c14:	lsl	r2, r2, #3
   18c18:	bl	114a8 <memset@plt>
   18c1c:	ldr	r3, [sp, #36]	; 0x24
   18c20:	str	r3, [r4, #4]
   18c24:	movw	r4, #61968	; 0xf210
   18c28:	movt	r4, #2
   18c2c:	ldr	r9, [r5]
   18c30:	add	fp, r4, #264	; 0x108
   18c34:	mvn	r3, #0
   18c38:	ldr	r7, [r4, #260]	; 0x104
   18c3c:	mov	r2, sl
   18c40:	ldr	r6, [r5, #4]
   18c44:	str	fp, [sp, #8]
   18c48:	mov	r1, r9
   18c4c:	ldr	ip, [r4, #256]	; 0x100
   18c50:	orr	r7, r7, #1
   18c54:	ldr	lr, [r4, #300]	; 0x12c
   18c58:	mov	r0, r6
   18c5c:	str	ip, [sp]
   18c60:	str	r7, [sp, #4]
   18c64:	str	lr, [sp, #16]
   18c68:	ldr	ip, [r4, #296]	; 0x128
   18c6c:	str	ip, [sp, #12]
   18c70:	bl	16b84 <__assert_fail@plt+0x5580>
   18c74:	cmp	r9, r0
   18c78:	bhi	18cc8 <__assert_fail@plt+0x76c4>
   18c7c:	add	r9, r0, #1
   18c80:	cmp	r6, r4
   18c84:	str	r9, [r5]
   18c88:	beq	18c94 <__assert_fail@plt+0x7690>
   18c8c:	mov	r0, r6
   18c90:	bl	1c300 <__assert_fail@plt+0xacfc>
   18c94:	mov	r0, r9
   18c98:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   18c9c:	ldr	r3, [r4, #256]	; 0x100
   18ca0:	mov	r2, sl
   18ca4:	mov	r1, r9
   18ca8:	mov	r6, r0
   18cac:	ldr	lr, [r4, #296]	; 0x128
   18cb0:	ldr	ip, [r4, #300]	; 0x12c
   18cb4:	str	r0, [r5, #4]
   18cb8:	stm	sp, {r3, r7, fp, lr}
   18cbc:	mvn	r3, #0
   18cc0:	str	ip, [sp, #16]
   18cc4:	bl	16b84 <__assert_fail@plt+0x5580>
   18cc8:	ldr	r3, [sp, #28]
   18ccc:	mov	r0, r6
   18cd0:	str	r3, [r8]
   18cd4:	add	sp, sp, #44	; 0x2c
   18cd8:	ldrd	r4, [sp]
   18cdc:	ldrd	r6, [sp, #8]
   18ce0:	ldrd	r8, [sp, #16]
   18ce4:	ldrd	sl, [sp, #24]
   18ce8:	add	sp, sp, #32
   18cec:	pop	{pc}		; (ldr pc, [sp], #4)
   18cf0:	mov	r0, #8
   18cf4:	mvn	r3, #-2147483648	; 0x80000000
   18cf8:	add	r1, sp, #36	; 0x24
   18cfc:	str	r0, [sp]
   18d00:	mov	r0, #0
   18d04:	bl	1b848 <__assert_fail@plt+0xa244>
   18d08:	ldrd	r2, [r4, #8]
   18d0c:	mov	r5, r0
   18d10:	str	r0, [r4]
   18d14:	strd	r2, [r0]
   18d18:	b	18c00 <__assert_fail@plt+0x75fc>
   18d1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d20:	movw	r4, #61804	; 0xf16c
   18d24:	movt	r4, #2
   18d28:	strd	r6, [sp, #8]
   18d2c:	strd	r8, [sp, #16]
   18d30:	strd	sl, [sp, #24]
   18d34:	mov	sl, r0
   18d38:	mov	fp, r1
   18d3c:	str	lr, [sp, #32]
   18d40:	sub	sp, sp, #44	; 0x2c
   18d44:	bl	11484 <__errno_location@plt>
   18d48:	ldr	r3, [r0]
   18d4c:	mov	r8, r0
   18d50:	ldr	r2, [r4, #4]
   18d54:	ldr	r5, [r4]
   18d58:	str	r3, [sp, #28]
   18d5c:	cmp	r2, #0
   18d60:	bgt	18dbc <__assert_fail@plt+0x77b8>
   18d64:	add	r3, r4, #8
   18d68:	str	r2, [sp, #36]	; 0x24
   18d6c:	rsb	r2, r2, #1
   18d70:	cmp	r5, r3
   18d74:	beq	18e98 <__assert_fail@plt+0x7894>
   18d78:	mov	r1, #8
   18d7c:	mov	r0, r5
   18d80:	mvn	r3, #-2147483648	; 0x80000000
   18d84:	str	r1, [sp]
   18d88:	add	r1, sp, #36	; 0x24
   18d8c:	bl	1b848 <__assert_fail@plt+0xa244>
   18d90:	mov	r5, r0
   18d94:	str	r0, [r4]
   18d98:	ldr	r0, [r4, #4]
   18d9c:	mov	r1, #0
   18da0:	ldr	r2, [sp, #36]	; 0x24
   18da4:	sub	r2, r2, r0
   18da8:	add	r0, r5, r0, lsl #3
   18dac:	lsl	r2, r2, #3
   18db0:	bl	114a8 <memset@plt>
   18db4:	ldr	r3, [sp, #36]	; 0x24
   18db8:	str	r3, [r4, #4]
   18dbc:	movw	r4, #61968	; 0xf210
   18dc0:	movt	r4, #2
   18dc4:	ldr	r9, [r5]
   18dc8:	add	r0, r4, #264	; 0x108
   18dcc:	mov	r3, fp
   18dd0:	ldr	r7, [r4, #260]	; 0x104
   18dd4:	mov	r2, sl
   18dd8:	ldr	r6, [r5, #4]
   18ddc:	str	r0, [sp, #8]
   18de0:	mov	r1, r9
   18de4:	ldr	ip, [r4, #256]	; 0x100
   18de8:	orr	r7, r7, #1
   18dec:	ldr	lr, [r4, #300]	; 0x12c
   18df0:	mov	r0, r6
   18df4:	str	ip, [sp]
   18df8:	str	r7, [sp, #4]
   18dfc:	str	lr, [sp, #16]
   18e00:	ldr	ip, [r4, #296]	; 0x128
   18e04:	str	ip, [sp, #12]
   18e08:	bl	16b84 <__assert_fail@plt+0x5580>
   18e0c:	cmp	r9, r0
   18e10:	bhi	18e70 <__assert_fail@plt+0x786c>
   18e14:	add	r9, r0, #1
   18e18:	cmp	r6, r4
   18e1c:	str	r9, [r5]
   18e20:	beq	18e2c <__assert_fail@plt+0x7828>
   18e24:	mov	r0, r6
   18e28:	bl	1c300 <__assert_fail@plt+0xacfc>
   18e2c:	mov	r0, r9
   18e30:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   18e34:	ldr	ip, [r4, #256]	; 0x100
   18e38:	mov	r1, r9
   18e3c:	mov	r3, fp
   18e40:	mov	r2, sl
   18e44:	mov	r6, r0
   18e48:	ldr	r9, [r4, #296]	; 0x128
   18e4c:	ldr	lr, [r4, #300]	; 0x12c
   18e50:	str	r0, [r5, #4]
   18e54:	str	ip, [sp]
   18e58:	ldr	ip, [pc, #100]	; 18ec4 <__assert_fail@plt+0x78c0>
   18e5c:	str	r7, [sp, #4]
   18e60:	str	ip, [sp, #8]
   18e64:	str	r9, [sp, #12]
   18e68:	str	lr, [sp, #16]
   18e6c:	bl	16b84 <__assert_fail@plt+0x5580>
   18e70:	ldr	r3, [sp, #28]
   18e74:	mov	r0, r6
   18e78:	str	r3, [r8]
   18e7c:	add	sp, sp, #44	; 0x2c
   18e80:	ldrd	r4, [sp]
   18e84:	ldrd	r6, [sp, #8]
   18e88:	ldrd	r8, [sp, #16]
   18e8c:	ldrd	sl, [sp, #24]
   18e90:	add	sp, sp, #32
   18e94:	pop	{pc}		; (ldr pc, [sp], #4)
   18e98:	mov	r0, #8
   18e9c:	mvn	r3, #-2147483648	; 0x80000000
   18ea0:	add	r1, sp, #36	; 0x24
   18ea4:	str	r0, [sp]
   18ea8:	mov	r0, #0
   18eac:	bl	1b848 <__assert_fail@plt+0xa244>
   18eb0:	ldrd	r2, [r4, #8]
   18eb4:	mov	r5, r0
   18eb8:	str	r0, [r4]
   18ebc:	strd	r2, [r0]
   18ec0:	b	18d98 <__assert_fail@plt+0x7794>
   18ec4:	andeq	pc, r2, r8, lsl r3	; <UNPREDICTABLE>
   18ec8:	strd	r4, [sp, #-20]!	; 0xffffffec
   18ecc:	mov	r4, #0
   18ed0:	mov	r5, #0
   18ed4:	strd	r6, [sp, #8]
   18ed8:	cmp	r1, #10
   18edc:	str	lr, [sp, #16]
   18ee0:	sub	sp, sp, #100	; 0x64
   18ee4:	strd	r4, [sp, #48]	; 0x30
   18ee8:	beq	18f30 <__assert_fail@plt+0x792c>
   18eec:	mov	r3, sp
   18ef0:	strd	r4, [sp, #8]
   18ef4:	str	r1, [sp, #48]	; 0x30
   18ef8:	mov	r1, r2
   18efc:	mvn	r2, #0
   18f00:	ldrd	r6, [sp, #48]	; 0x30
   18f04:	strd	r6, [sp]
   18f08:	strd	r4, [sp, #16]
   18f0c:	strd	r4, [sp, #24]
   18f10:	strd	r4, [sp, #32]
   18f14:	strd	r4, [sp, #40]	; 0x28
   18f18:	bl	18570 <__assert_fail@plt+0x6f6c>
   18f1c:	add	sp, sp, #100	; 0x64
   18f20:	ldrd	r4, [sp]
   18f24:	ldrd	r6, [sp, #8]
   18f28:	add	sp, sp, #16
   18f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f30:	bl	115c8 <abort@plt>
   18f34:	strd	r4, [sp, #-20]!	; 0xffffffec
   18f38:	mov	r4, #0
   18f3c:	mov	r5, #0
   18f40:	strd	r6, [sp, #8]
   18f44:	cmp	r1, #10
   18f48:	str	lr, [sp, #16]
   18f4c:	sub	sp, sp, #100	; 0x64
   18f50:	strd	r4, [sp, #48]	; 0x30
   18f54:	beq	18fa0 <__assert_fail@plt+0x799c>
   18f58:	mov	ip, r2
   18f5c:	mov	r2, r3
   18f60:	strd	r4, [sp, #8]
   18f64:	str	r1, [sp, #48]	; 0x30
   18f68:	mov	r3, sp
   18f6c:	mov	r1, ip
   18f70:	ldrd	r6, [sp, #48]	; 0x30
   18f74:	strd	r6, [sp]
   18f78:	strd	r4, [sp, #16]
   18f7c:	strd	r4, [sp, #24]
   18f80:	strd	r4, [sp, #32]
   18f84:	strd	r4, [sp, #40]	; 0x28
   18f88:	bl	18570 <__assert_fail@plt+0x6f6c>
   18f8c:	add	sp, sp, #100	; 0x64
   18f90:	ldrd	r4, [sp]
   18f94:	ldrd	r6, [sp, #8]
   18f98:	add	sp, sp, #16
   18f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18fa0:	bl	115c8 <abort@plt>
   18fa4:	mov	r2, #0
   18fa8:	mov	r3, #0
   18fac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18fb0:	strd	r6, [sp, #8]
   18fb4:	cmp	r0, #10
   18fb8:	strd	r8, [sp, #16]
   18fbc:	strd	sl, [sp, #24]
   18fc0:	str	lr, [sp, #32]
   18fc4:	sub	sp, sp, #124	; 0x7c
   18fc8:	strd	r2, [sp, #72]	; 0x48
   18fcc:	strd	r2, [sp, #80]	; 0x50
   18fd0:	strd	r2, [sp, #88]	; 0x58
   18fd4:	strd	r2, [sp, #96]	; 0x60
   18fd8:	strd	r2, [sp, #104]	; 0x68
   18fdc:	strd	r2, [sp, #112]	; 0x70
   18fe0:	beq	19184 <__assert_fail@plt+0x7b80>
   18fe4:	mov	r6, r1
   18fe8:	movw	r4, #61804	; 0xf16c
   18fec:	movt	r4, #2
   18ff0:	str	r0, [sp, #72]	; 0x48
   18ff4:	ldrd	r0, [sp, #72]	; 0x48
   18ff8:	strd	r0, [sp, #24]
   18ffc:	strd	r2, [sp, #32]
   19000:	strd	r2, [sp, #40]	; 0x28
   19004:	strd	r2, [sp, #48]	; 0x30
   19008:	strd	r2, [sp, #56]	; 0x38
   1900c:	strd	r2, [sp, #64]	; 0x40
   19010:	bl	11484 <__errno_location@plt>
   19014:	mov	r8, r0
   19018:	ldr	r5, [r4]
   1901c:	ldr	r2, [r4, #4]
   19020:	ldr	r9, [r0]
   19024:	cmp	r2, #0
   19028:	bgt	19084 <__assert_fail@plt+0x7a80>
   1902c:	add	r3, r4, #8
   19030:	str	r2, [sp, #72]	; 0x48
   19034:	rsb	r2, r2, #1
   19038:	cmp	r5, r3
   1903c:	beq	19158 <__assert_fail@plt+0x7b54>
   19040:	mov	r3, #8
   19044:	mov	r0, r5
   19048:	add	r1, sp, #72	; 0x48
   1904c:	str	r3, [sp]
   19050:	mvn	r3, #-2147483648	; 0x80000000
   19054:	bl	1b848 <__assert_fail@plt+0xa244>
   19058:	mov	r5, r0
   1905c:	str	r0, [r4]
   19060:	ldr	r0, [r4, #4]
   19064:	mov	r1, #0
   19068:	ldr	r2, [sp, #72]	; 0x48
   1906c:	sub	r2, r2, r0
   19070:	add	r0, r5, r0, lsl #3
   19074:	lsl	r2, r2, #3
   19078:	bl	114a8 <memset@plt>
   1907c:	ldr	r3, [sp, #72]	; 0x48
   19080:	str	r3, [r4, #4]
   19084:	ldr	sl, [r5]
   19088:	add	r0, sp, #32
   1908c:	mvn	r3, #0
   19090:	mov	r2, r6
   19094:	ldr	r7, [sp, #28]
   19098:	ldr	r4, [r5, #4]
   1909c:	mov	r1, sl
   190a0:	str	r0, [sp, #8]
   190a4:	ldr	lr, [sp, #24]
   190a8:	orr	r7, r7, #1
   190ac:	ldr	ip, [sp, #64]	; 0x40
   190b0:	mov	r0, r4
   190b4:	ldr	fp, [sp, #68]	; 0x44
   190b8:	str	lr, [sp]
   190bc:	str	r7, [sp, #4]
   190c0:	str	ip, [sp, #12]
   190c4:	str	fp, [sp, #16]
   190c8:	bl	16b84 <__assert_fail@plt+0x5580>
   190cc:	cmp	sl, r0
   190d0:	bhi	19134 <__assert_fail@plt+0x7b30>
   190d4:	add	sl, r0, #1
   190d8:	movw	r3, #61968	; 0xf210
   190dc:	movt	r3, #2
   190e0:	cmp	r4, r3
   190e4:	str	sl, [r5]
   190e8:	beq	190f4 <__assert_fail@plt+0x7af0>
   190ec:	mov	r0, r4
   190f0:	bl	1c300 <__assert_fail@plt+0xacfc>
   190f4:	mov	r0, sl
   190f8:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   190fc:	ldr	r3, [sp, #24]
   19100:	mov	r2, r6
   19104:	mov	r1, sl
   19108:	mov	r4, r0
   1910c:	ldr	lr, [sp, #64]	; 0x40
   19110:	ldr	ip, [sp, #68]	; 0x44
   19114:	str	r0, [r5, #4]
   19118:	add	r5, sp, #32
   1911c:	stm	sp, {r3, r7}
   19120:	mvn	r3, #0
   19124:	str	r5, [sp, #8]
   19128:	str	lr, [sp, #12]
   1912c:	str	ip, [sp, #16]
   19130:	bl	16b84 <__assert_fail@plt+0x5580>
   19134:	mov	r0, r4
   19138:	str	r9, [r8]
   1913c:	add	sp, sp, #124	; 0x7c
   19140:	ldrd	r4, [sp]
   19144:	ldrd	r6, [sp, #8]
   19148:	ldrd	r8, [sp, #16]
   1914c:	ldrd	sl, [sp, #24]
   19150:	add	sp, sp, #32
   19154:	pop	{pc}		; (ldr pc, [sp], #4)
   19158:	mov	r0, #8
   1915c:	mvn	r3, #-2147483648	; 0x80000000
   19160:	add	r1, sp, #72	; 0x48
   19164:	str	r0, [sp]
   19168:	mov	r0, #0
   1916c:	bl	1b848 <__assert_fail@plt+0xa244>
   19170:	ldrd	r2, [r4, #8]
   19174:	mov	r5, r0
   19178:	str	r0, [r4]
   1917c:	strd	r2, [r0]
   19180:	b	19060 <__assert_fail@plt+0x7a5c>
   19184:	bl	115c8 <abort@plt>
   19188:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1918c:	cmp	r0, #10
   19190:	strd	r6, [sp, #8]
   19194:	mov	r6, #0
   19198:	mov	r7, #0
   1919c:	strd	r8, [sp, #16]
   191a0:	strd	sl, [sp, #24]
   191a4:	str	lr, [sp, #32]
   191a8:	sub	sp, sp, #124	; 0x7c
   191ac:	strd	r6, [sp, #72]	; 0x48
   191b0:	strd	r6, [sp, #80]	; 0x50
   191b4:	strd	r6, [sp, #88]	; 0x58
   191b8:	strd	r6, [sp, #96]	; 0x60
   191bc:	strd	r6, [sp, #104]	; 0x68
   191c0:	strd	r6, [sp, #112]	; 0x70
   191c4:	beq	19370 <__assert_fail@plt+0x7d6c>
   191c8:	mov	sl, r2
   191cc:	movw	r5, #61804	; 0xf16c
   191d0:	movt	r5, #2
   191d4:	str	r0, [sp, #72]	; 0x48
   191d8:	mov	r9, r1
   191dc:	ldrd	r2, [sp, #72]	; 0x48
   191e0:	strd	r2, [sp, #24]
   191e4:	strd	r6, [sp, #32]
   191e8:	strd	r6, [sp, #40]	; 0x28
   191ec:	strd	r6, [sp, #48]	; 0x30
   191f0:	strd	r6, [sp, #56]	; 0x38
   191f4:	strd	r6, [sp, #64]	; 0x40
   191f8:	bl	11484 <__errno_location@plt>
   191fc:	mov	r7, r0
   19200:	ldr	r4, [r5]
   19204:	ldr	r2, [r5, #4]
   19208:	ldr	fp, [r0]
   1920c:	cmp	r2, #0
   19210:	bgt	1926c <__assert_fail@plt+0x7c68>
   19214:	add	r3, r5, #8
   19218:	str	r2, [sp, #72]	; 0x48
   1921c:	rsb	r2, r2, #1
   19220:	cmp	r4, r3
   19224:	beq	19344 <__assert_fail@plt+0x7d40>
   19228:	mov	r3, #8
   1922c:	mov	r0, r4
   19230:	add	r1, sp, #72	; 0x48
   19234:	str	r3, [sp]
   19238:	mvn	r3, #-2147483648	; 0x80000000
   1923c:	bl	1b848 <__assert_fail@plt+0xa244>
   19240:	mov	r4, r0
   19244:	str	r0, [r5]
   19248:	ldr	r0, [r5, #4]
   1924c:	mov	r1, #0
   19250:	ldr	r2, [sp, #72]	; 0x48
   19254:	sub	r2, r2, r0
   19258:	add	r0, r4, r0, lsl #3
   1925c:	lsl	r2, r2, #3
   19260:	bl	114a8 <memset@plt>
   19264:	ldr	r3, [sp, #72]	; 0x48
   19268:	str	r3, [r5, #4]
   1926c:	ldr	ip, [sp, #24]
   19270:	add	r0, sp, #32
   19274:	mov	r3, sl
   19278:	mov	r2, r9
   1927c:	ldr	r6, [sp, #28]
   19280:	ldr	r8, [r4]
   19284:	ldr	r5, [r4, #4]
   19288:	str	ip, [sp]
   1928c:	orr	r6, r6, #1
   19290:	ldr	ip, [sp, #64]	; 0x40
   19294:	mov	r1, r8
   19298:	str	r6, [sp, #4]
   1929c:	ldr	lr, [sp, #68]	; 0x44
   192a0:	str	r0, [sp, #8]
   192a4:	mov	r0, r5
   192a8:	str	ip, [sp, #12]
   192ac:	str	lr, [sp, #16]
   192b0:	bl	16b84 <__assert_fail@plt+0x5580>
   192b4:	cmp	r8, r0
   192b8:	bhi	19320 <__assert_fail@plt+0x7d1c>
   192bc:	add	r8, r0, #1
   192c0:	movw	r3, #61968	; 0xf210
   192c4:	movt	r3, #2
   192c8:	cmp	r5, r3
   192cc:	str	r8, [r4]
   192d0:	beq	192dc <__assert_fail@plt+0x7cd8>
   192d4:	mov	r0, r5
   192d8:	bl	1c300 <__assert_fail@plt+0xacfc>
   192dc:	mov	r0, r8
   192e0:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   192e4:	ldr	lr, [sp, #24]
   192e8:	mov	r1, r8
   192ec:	mov	r3, sl
   192f0:	mov	r2, r9
   192f4:	mov	r5, r0
   192f8:	ldr	r8, [sp, #64]	; 0x40
   192fc:	ldr	ip, [sp, #68]	; 0x44
   19300:	str	r0, [r4, #4]
   19304:	str	lr, [sp]
   19308:	add	lr, sp, #32
   1930c:	str	r6, [sp, #4]
   19310:	str	lr, [sp, #8]
   19314:	str	r8, [sp, #12]
   19318:	str	ip, [sp, #16]
   1931c:	bl	16b84 <__assert_fail@plt+0x5580>
   19320:	mov	r0, r5
   19324:	str	fp, [r7]
   19328:	add	sp, sp, #124	; 0x7c
   1932c:	ldrd	r4, [sp]
   19330:	ldrd	r6, [sp, #8]
   19334:	ldrd	r8, [sp, #16]
   19338:	ldrd	sl, [sp, #24]
   1933c:	add	sp, sp, #32
   19340:	pop	{pc}		; (ldr pc, [sp], #4)
   19344:	mov	r0, #8
   19348:	mvn	r3, #-2147483648	; 0x80000000
   1934c:	add	r1, sp, #72	; 0x48
   19350:	str	r0, [sp]
   19354:	mov	r0, #0
   19358:	bl	1b848 <__assert_fail@plt+0xa244>
   1935c:	ldrd	r2, [r5, #8]
   19360:	mov	r4, r0
   19364:	str	r0, [r5]
   19368:	strd	r2, [r0]
   1936c:	b	19248 <__assert_fail@plt+0x7c44>
   19370:	bl	115c8 <abort@plt>
   19374:	ldr	r3, [pc, #492]	; 19568 <__assert_fail@plt+0x7f64>
   19378:	lsr	ip, r2, #5
   1937c:	and	r2, r2, #31
   19380:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19384:	movw	r5, #61804	; 0xf16c
   19388:	movt	r5, #2
   1938c:	strd	r6, [sp, #8]
   19390:	strd	r8, [sp, #16]
   19394:	strd	sl, [sp, #24]
   19398:	mov	sl, r0
   1939c:	mov	fp, r1
   193a0:	ldrd	r0, [r3]
   193a4:	str	lr, [sp, #32]
   193a8:	sub	sp, sp, #92	; 0x5c
   193ac:	ldrd	r8, [r3, #8]
   193b0:	add	r6, sp, #48	; 0x30
   193b4:	strd	r0, [sp, #40]	; 0x28
   193b8:	ldrd	r0, [r3, #16]
   193bc:	strd	r8, [sp, #48]	; 0x30
   193c0:	ldrd	r8, [r3, #24]
   193c4:	strd	r0, [sp, #56]	; 0x38
   193c8:	ldrd	r0, [r3, #32]
   193cc:	strd	r8, [sp, #64]	; 0x40
   193d0:	ldrd	r8, [r3, #40]	; 0x28
   193d4:	strd	r0, [sp, #72]	; 0x48
   193d8:	strd	r8, [sp, #80]	; 0x50
   193dc:	ldr	r3, [r6, ip, lsl #2]
   193e0:	mvn	r1, r3, lsr r2
   193e4:	and	r1, r1, #1
   193e8:	eor	r2, r3, r1, lsl r2
   193ec:	str	r2, [r6, ip, lsl #2]
   193f0:	bl	11484 <__errno_location@plt>
   193f4:	ldr	r3, [r0]
   193f8:	mov	r8, r0
   193fc:	ldr	r2, [r5, #4]
   19400:	ldr	r4, [r5]
   19404:	str	r3, [sp, #28]
   19408:	cmp	r2, #0
   1940c:	bgt	19468 <__assert_fail@plt+0x7e64>
   19410:	add	r3, r5, #8
   19414:	str	r2, [sp, #36]	; 0x24
   19418:	rsb	r2, r2, #1
   1941c:	cmp	r4, r3
   19420:	beq	1953c <__assert_fail@plt+0x7f38>
   19424:	mov	r1, #8
   19428:	mov	r0, r4
   1942c:	mvn	r3, #-2147483648	; 0x80000000
   19430:	str	r1, [sp]
   19434:	add	r1, sp, #36	; 0x24
   19438:	bl	1b848 <__assert_fail@plt+0xa244>
   1943c:	mov	r4, r0
   19440:	str	r0, [r5]
   19444:	ldr	r0, [r5, #4]
   19448:	mov	r1, #0
   1944c:	ldr	r2, [sp, #36]	; 0x24
   19450:	sub	r2, r2, r0
   19454:	add	r0, r4, r0, lsl #3
   19458:	lsl	r2, r2, #3
   1945c:	bl	114a8 <memset@plt>
   19460:	ldr	r3, [sp, #36]	; 0x24
   19464:	str	r3, [r5, #4]
   19468:	ldr	ip, [sp, #40]	; 0x28
   1946c:	mov	r3, fp
   19470:	mov	r2, sl
   19474:	ldr	r7, [sp, #44]	; 0x2c
   19478:	ldr	r9, [r4]
   1947c:	ldr	r5, [r4, #4]
   19480:	str	ip, [sp]
   19484:	orr	r7, r7, #1
   19488:	ldr	ip, [sp, #80]	; 0x50
   1948c:	mov	r1, r9
   19490:	str	r7, [sp, #4]
   19494:	ldr	lr, [sp, #84]	; 0x54
   19498:	mov	r0, r5
   1949c:	str	r6, [sp, #8]
   194a0:	str	ip, [sp, #12]
   194a4:	str	lr, [sp, #16]
   194a8:	bl	16b84 <__assert_fail@plt+0x5580>
   194ac:	cmp	r9, r0
   194b0:	bhi	19514 <__assert_fail@plt+0x7f10>
   194b4:	add	r9, r0, #1
   194b8:	movw	r3, #61968	; 0xf210
   194bc:	movt	r3, #2
   194c0:	cmp	r5, r3
   194c4:	str	r9, [r4]
   194c8:	beq	194d4 <__assert_fail@plt+0x7ed0>
   194cc:	mov	r0, r5
   194d0:	bl	1c300 <__assert_fail@plt+0xacfc>
   194d4:	mov	r0, r9
   194d8:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   194dc:	mov	r1, r9
   194e0:	ldr	ip, [sp, #40]	; 0x28
   194e4:	mov	r3, fp
   194e8:	mov	r2, sl
   194ec:	mov	r5, r0
   194f0:	ldr	r9, [sp, #80]	; 0x50
   194f4:	ldr	lr, [sp, #84]	; 0x54
   194f8:	str	r0, [r4, #4]
   194fc:	str	ip, [sp]
   19500:	str	r7, [sp, #4]
   19504:	str	r6, [sp, #8]
   19508:	str	r9, [sp, #12]
   1950c:	str	lr, [sp, #16]
   19510:	bl	16b84 <__assert_fail@plt+0x5580>
   19514:	ldr	r3, [sp, #28]
   19518:	mov	r0, r5
   1951c:	str	r3, [r8]
   19520:	add	sp, sp, #92	; 0x5c
   19524:	ldrd	r4, [sp]
   19528:	ldrd	r6, [sp, #8]
   1952c:	ldrd	r8, [sp, #16]
   19530:	ldrd	sl, [sp, #24]
   19534:	add	sp, sp, #32
   19538:	pop	{pc}		; (ldr pc, [sp], #4)
   1953c:	mov	r0, #8
   19540:	mvn	r3, #-2147483648	; 0x80000000
   19544:	add	r1, sp, #36	; 0x24
   19548:	str	r0, [sp]
   1954c:	mov	r0, #0
   19550:	bl	1b848 <__assert_fail@plt+0xa244>
   19554:	ldrd	r2, [r5, #8]
   19558:	mov	r4, r0
   1955c:	str	r0, [r5]
   19560:	strd	r2, [r0]
   19564:	b	19444 <__assert_fail@plt+0x7e40>
   19568:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   1956c:	ldr	ip, [pc, #476]	; 19750 <__assert_fail@plt+0x814c>
   19570:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19574:	movw	r4, #61804	; 0xf16c
   19578:	movt	r4, #2
   1957c:	ldrd	r2, [ip, #8]
   19580:	strd	r6, [sp, #8]
   19584:	lsr	r7, r1, #5
   19588:	mov	r6, r0
   1958c:	strd	r8, [sp, #16]
   19590:	str	lr, [sp, #32]
   19594:	and	lr, r1, #31
   19598:	ldrd	r0, [ip]
   1959c:	strd	sl, [sp, #24]
   195a0:	sub	sp, sp, #84	; 0x54
   195a4:	add	r5, sp, #40	; 0x28
   195a8:	strd	r0, [sp, #32]
   195ac:	strd	r2, [sp, #40]	; 0x28
   195b0:	ldrd	r0, [ip, #16]
   195b4:	ldrd	r2, [ip, #24]
   195b8:	strd	r0, [sp, #48]	; 0x30
   195bc:	ldrd	r0, [ip, #32]
   195c0:	strd	r2, [sp, #56]	; 0x38
   195c4:	ldrd	r2, [ip, #40]	; 0x28
   195c8:	strd	r0, [sp, #64]	; 0x40
   195cc:	strd	r2, [sp, #72]	; 0x48
   195d0:	ldr	r1, [r5, r7, lsl #2]
   195d4:	mvn	r3, r1, lsr lr
   195d8:	and	r3, r3, #1
   195dc:	eor	r1, r1, r3, lsl lr
   195e0:	str	r1, [r5, r7, lsl #2]
   195e4:	bl	11484 <__errno_location@plt>
   195e8:	mov	r9, r0
   195ec:	ldr	sl, [r0]
   195f0:	ldr	r2, [r4, #4]
   195f4:	ldr	r7, [r4]
   195f8:	cmp	r2, #0
   195fc:	bgt	19658 <__assert_fail@plt+0x8054>
   19600:	add	r3, r4, #8
   19604:	str	r2, [sp, #28]
   19608:	rsb	r2, r2, #1
   1960c:	cmp	r7, r3
   19610:	beq	19724 <__assert_fail@plt+0x8120>
   19614:	mov	r1, #8
   19618:	mov	r0, r7
   1961c:	mvn	r3, #-2147483648	; 0x80000000
   19620:	str	r1, [sp]
   19624:	add	r1, sp, #28
   19628:	bl	1b848 <__assert_fail@plt+0xa244>
   1962c:	mov	r7, r0
   19630:	str	r0, [r4]
   19634:	ldr	r0, [r4, #4]
   19638:	mov	r1, #0
   1963c:	ldr	r2, [sp, #28]
   19640:	sub	r2, r2, r0
   19644:	add	r0, r7, r0, lsl #3
   19648:	lsl	r2, r2, #3
   1964c:	bl	114a8 <memset@plt>
   19650:	ldr	r3, [sp, #28]
   19654:	str	r3, [r4, #4]
   19658:	ldr	ip, [sp, #32]
   1965c:	mvn	r3, #0
   19660:	mov	r2, r6
   19664:	ldr	r8, [sp, #36]	; 0x24
   19668:	ldr	fp, [r7]
   1966c:	ldr	r4, [r7, #4]
   19670:	str	ip, [sp]
   19674:	orr	r8, r8, #1
   19678:	ldr	ip, [sp, #72]	; 0x48
   1967c:	mov	r1, fp
   19680:	str	r8, [sp, #4]
   19684:	ldr	lr, [sp, #76]	; 0x4c
   19688:	mov	r0, r4
   1968c:	str	r5, [sp, #8]
   19690:	str	ip, [sp, #12]
   19694:	str	lr, [sp, #16]
   19698:	bl	16b84 <__assert_fail@plt+0x5580>
   1969c:	cmp	fp, r0
   196a0:	bhi	19700 <__assert_fail@plt+0x80fc>
   196a4:	add	fp, r0, #1
   196a8:	movw	r3, #61968	; 0xf210
   196ac:	movt	r3, #2
   196b0:	cmp	r4, r3
   196b4:	str	fp, [r7]
   196b8:	beq	196c4 <__assert_fail@plt+0x80c0>
   196bc:	mov	r0, r4
   196c0:	bl	1c300 <__assert_fail@plt+0xacfc>
   196c4:	mov	r0, fp
   196c8:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   196cc:	ldr	r3, [sp, #32]
   196d0:	mov	r2, r6
   196d4:	mov	r1, fp
   196d8:	mov	r4, r0
   196dc:	ldr	lr, [sp, #72]	; 0x48
   196e0:	ldr	ip, [sp, #76]	; 0x4c
   196e4:	str	r0, [r7, #4]
   196e8:	stm	sp, {r3, r8}
   196ec:	mvn	r3, #0
   196f0:	str	r5, [sp, #8]
   196f4:	str	lr, [sp, #12]
   196f8:	str	ip, [sp, #16]
   196fc:	bl	16b84 <__assert_fail@plt+0x5580>
   19700:	mov	r0, r4
   19704:	str	sl, [r9]
   19708:	add	sp, sp, #84	; 0x54
   1970c:	ldrd	r4, [sp]
   19710:	ldrd	r6, [sp, #8]
   19714:	ldrd	r8, [sp, #16]
   19718:	ldrd	sl, [sp, #24]
   1971c:	add	sp, sp, #32
   19720:	pop	{pc}		; (ldr pc, [sp], #4)
   19724:	mov	r0, #8
   19728:	mvn	r3, #-2147483648	; 0x80000000
   1972c:	add	r1, sp, #28
   19730:	str	r0, [sp]
   19734:	mov	r0, #0
   19738:	bl	1b848 <__assert_fail@plt+0xa244>
   1973c:	ldrd	r2, [r4, #8]
   19740:	mov	r7, r0
   19744:	str	r0, [r4]
   19748:	strd	r2, [r0]
   1974c:	b	19634 <__assert_fail@plt+0x8030>
   19750:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   19754:	ldr	ip, [pc, #472]	; 19934 <__assert_fail@plt+0x8330>
   19758:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1975c:	mov	r5, r0
   19760:	movw	r4, #61804	; 0xf16c
   19764:	movt	r4, #2
   19768:	ldrd	r2, [ip]
   1976c:	ldrd	r0, [ip, #8]
   19770:	strd	r6, [sp, #8]
   19774:	strd	r8, [sp, #16]
   19778:	strd	sl, [sp, #24]
   1977c:	str	lr, [sp, #32]
   19780:	sub	sp, sp, #84	; 0x54
   19784:	strd	r2, [sp, #32]
   19788:	strd	r0, [sp, #40]	; 0x28
   1978c:	ldr	r6, [sp, #44]	; 0x2c
   19790:	ldrd	r2, [ip, #16]
   19794:	ldrd	r0, [ip, #24]
   19798:	mvn	lr, r6
   1979c:	and	lr, lr, #67108864	; 0x4000000
   197a0:	eor	lr, lr, r6
   197a4:	ldrd	r6, [ip, #40]	; 0x28
   197a8:	strd	r2, [sp, #48]	; 0x30
   197ac:	ldrd	r2, [ip, #32]
   197b0:	str	lr, [sp, #44]	; 0x2c
   197b4:	strd	r0, [sp, #56]	; 0x38
   197b8:	strd	r2, [sp, #64]	; 0x40
   197bc:	strd	r6, [sp, #72]	; 0x48
   197c0:	bl	11484 <__errno_location@plt>
   197c4:	mov	r8, r0
   197c8:	ldr	r9, [r0]
   197cc:	ldr	r2, [r4, #4]
   197d0:	ldr	r6, [r4]
   197d4:	cmp	r2, #0
   197d8:	bgt	19834 <__assert_fail@plt+0x8230>
   197dc:	add	r3, r4, #8
   197e0:	str	r2, [sp, #28]
   197e4:	rsb	r2, r2, #1
   197e8:	cmp	r6, r3
   197ec:	beq	19908 <__assert_fail@plt+0x8304>
   197f0:	mov	r1, #8
   197f4:	mov	r0, r6
   197f8:	mvn	r3, #-2147483648	; 0x80000000
   197fc:	str	r1, [sp]
   19800:	add	r1, sp, #28
   19804:	bl	1b848 <__assert_fail@plt+0xa244>
   19808:	mov	r6, r0
   1980c:	str	r0, [r4]
   19810:	ldr	r0, [r4, #4]
   19814:	mov	r1, #0
   19818:	ldr	r2, [sp, #28]
   1981c:	sub	r2, r2, r0
   19820:	add	r0, r6, r0, lsl #3
   19824:	lsl	r2, r2, #3
   19828:	bl	114a8 <memset@plt>
   1982c:	ldr	r3, [sp, #28]
   19830:	str	r3, [r4, #4]
   19834:	ldr	sl, [r6]
   19838:	add	r0, sp, #40	; 0x28
   1983c:	mvn	r3, #0
   19840:	mov	r2, r5
   19844:	ldr	r7, [sp, #36]	; 0x24
   19848:	ldr	r4, [r6, #4]
   1984c:	mov	r1, sl
   19850:	str	r0, [sp, #8]
   19854:	ldr	lr, [sp, #32]
   19858:	orr	r7, r7, #1
   1985c:	ldr	ip, [sp, #72]	; 0x48
   19860:	mov	r0, r4
   19864:	ldr	fp, [sp, #76]	; 0x4c
   19868:	str	lr, [sp]
   1986c:	str	r7, [sp, #4]
   19870:	str	ip, [sp, #12]
   19874:	str	fp, [sp, #16]
   19878:	bl	16b84 <__assert_fail@plt+0x5580>
   1987c:	cmp	sl, r0
   19880:	bhi	198e4 <__assert_fail@plt+0x82e0>
   19884:	add	sl, r0, #1
   19888:	movw	r3, #61968	; 0xf210
   1988c:	movt	r3, #2
   19890:	cmp	r4, r3
   19894:	str	sl, [r6]
   19898:	beq	198a4 <__assert_fail@plt+0x82a0>
   1989c:	mov	r0, r4
   198a0:	bl	1c300 <__assert_fail@plt+0xacfc>
   198a4:	mov	r0, sl
   198a8:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   198ac:	ldr	r3, [sp, #32]
   198b0:	mov	r2, r5
   198b4:	add	r5, sp, #40	; 0x28
   198b8:	mov	r1, sl
   198bc:	mov	r4, r0
   198c0:	ldr	lr, [sp, #72]	; 0x48
   198c4:	ldr	ip, [sp, #76]	; 0x4c
   198c8:	str	r0, [r6, #4]
   198cc:	stm	sp, {r3, r7}
   198d0:	mvn	r3, #0
   198d4:	str	r5, [sp, #8]
   198d8:	str	lr, [sp, #12]
   198dc:	str	ip, [sp, #16]
   198e0:	bl	16b84 <__assert_fail@plt+0x5580>
   198e4:	mov	r0, r4
   198e8:	str	r9, [r8]
   198ec:	add	sp, sp, #84	; 0x54
   198f0:	ldrd	r4, [sp]
   198f4:	ldrd	r6, [sp, #8]
   198f8:	ldrd	r8, [sp, #16]
   198fc:	ldrd	sl, [sp, #24]
   19900:	add	sp, sp, #32
   19904:	pop	{pc}		; (ldr pc, [sp], #4)
   19908:	mov	r0, #8
   1990c:	mvn	r3, #-2147483648	; 0x80000000
   19910:	add	r1, sp, #28
   19914:	str	r0, [sp]
   19918:	mov	r0, #0
   1991c:	bl	1b848 <__assert_fail@plt+0xa244>
   19920:	ldrd	r2, [r4, #8]
   19924:	mov	r6, r0
   19928:	str	r0, [r4]
   1992c:	strd	r2, [r0]
   19930:	b	19810 <__assert_fail@plt+0x820c>
   19934:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   19938:	ldr	ip, [pc, #480]	; 19b20 <__assert_fail@plt+0x851c>
   1993c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19940:	mov	r5, r0
   19944:	movw	r4, #61804	; 0xf16c
   19948:	movt	r4, #2
   1994c:	ldrd	r2, [ip]
   19950:	strd	r6, [sp, #8]
   19954:	mov	r6, r1
   19958:	ldrd	r0, [ip, #8]
   1995c:	strd	r8, [sp, #16]
   19960:	strd	sl, [sp, #24]
   19964:	str	lr, [sp, #32]
   19968:	sub	sp, sp, #84	; 0x54
   1996c:	ldrd	r8, [ip, #40]	; 0x28
   19970:	strd	r2, [sp, #32]
   19974:	strd	r0, [sp, #40]	; 0x28
   19978:	ldrd	r2, [ip, #16]
   1997c:	ldr	r7, [sp, #44]	; 0x2c
   19980:	ldrd	r0, [ip, #24]
   19984:	strd	r2, [sp, #48]	; 0x30
   19988:	ldrd	r2, [ip, #32]
   1998c:	mvn	lr, r7
   19990:	and	lr, lr, #67108864	; 0x4000000
   19994:	eor	lr, lr, r7
   19998:	str	lr, [sp, #44]	; 0x2c
   1999c:	strd	r0, [sp, #56]	; 0x38
   199a0:	strd	r2, [sp, #64]	; 0x40
   199a4:	strd	r8, [sp, #72]	; 0x48
   199a8:	bl	11484 <__errno_location@plt>
   199ac:	mov	r9, r0
   199b0:	ldr	sl, [r0]
   199b4:	ldr	r2, [r4, #4]
   199b8:	ldr	r7, [r4]
   199bc:	cmp	r2, #0
   199c0:	bgt	19a1c <__assert_fail@plt+0x8418>
   199c4:	add	r3, r4, #8
   199c8:	str	r2, [sp, #28]
   199cc:	rsb	r2, r2, #1
   199d0:	cmp	r7, r3
   199d4:	beq	19af4 <__assert_fail@plt+0x84f0>
   199d8:	mov	r1, #8
   199dc:	mov	r0, r7
   199e0:	mvn	r3, #-2147483648	; 0x80000000
   199e4:	str	r1, [sp]
   199e8:	add	r1, sp, #28
   199ec:	bl	1b848 <__assert_fail@plt+0xa244>
   199f0:	mov	r7, r0
   199f4:	str	r0, [r4]
   199f8:	ldr	r0, [r4, #4]
   199fc:	mov	r1, #0
   19a00:	ldr	r2, [sp, #28]
   19a04:	sub	r2, r2, r0
   19a08:	add	r0, r7, r0, lsl #3
   19a0c:	lsl	r2, r2, #3
   19a10:	bl	114a8 <memset@plt>
   19a14:	ldr	r3, [sp, #28]
   19a18:	str	r3, [r4, #4]
   19a1c:	ldr	ip, [sp, #32]
   19a20:	add	r0, sp, #40	; 0x28
   19a24:	mov	r3, r6
   19a28:	mov	r2, r5
   19a2c:	ldr	r8, [sp, #36]	; 0x24
   19a30:	ldr	fp, [r7]
   19a34:	ldr	r4, [r7, #4]
   19a38:	str	ip, [sp]
   19a3c:	orr	r8, r8, #1
   19a40:	ldr	ip, [sp, #72]	; 0x48
   19a44:	mov	r1, fp
   19a48:	str	r8, [sp, #4]
   19a4c:	ldr	lr, [sp, #76]	; 0x4c
   19a50:	str	r0, [sp, #8]
   19a54:	mov	r0, r4
   19a58:	str	ip, [sp, #12]
   19a5c:	str	lr, [sp, #16]
   19a60:	bl	16b84 <__assert_fail@plt+0x5580>
   19a64:	cmp	fp, r0
   19a68:	bhi	19ad0 <__assert_fail@plt+0x84cc>
   19a6c:	add	fp, r0, #1
   19a70:	movw	r3, #61968	; 0xf210
   19a74:	movt	r3, #2
   19a78:	cmp	r4, r3
   19a7c:	str	fp, [r7]
   19a80:	beq	19a8c <__assert_fail@plt+0x8488>
   19a84:	mov	r0, r4
   19a88:	bl	1c300 <__assert_fail@plt+0xacfc>
   19a8c:	mov	r0, fp
   19a90:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   19a94:	ldr	lr, [sp, #32]
   19a98:	mov	r2, r5
   19a9c:	mov	r3, r6
   19aa0:	mov	r1, fp
   19aa4:	mov	r4, r0
   19aa8:	ldr	r5, [sp, #72]	; 0x48
   19aac:	ldr	ip, [sp, #76]	; 0x4c
   19ab0:	str	r0, [r7, #4]
   19ab4:	str	lr, [sp]
   19ab8:	add	lr, sp, #40	; 0x28
   19abc:	str	r8, [sp, #4]
   19ac0:	str	lr, [sp, #8]
   19ac4:	str	r5, [sp, #12]
   19ac8:	str	ip, [sp, #16]
   19acc:	bl	16b84 <__assert_fail@plt+0x5580>
   19ad0:	mov	r0, r4
   19ad4:	str	sl, [r9]
   19ad8:	add	sp, sp, #84	; 0x54
   19adc:	ldrd	r4, [sp]
   19ae0:	ldrd	r6, [sp, #8]
   19ae4:	ldrd	r8, [sp, #16]
   19ae8:	ldrd	sl, [sp, #24]
   19aec:	add	sp, sp, #32
   19af0:	pop	{pc}		; (ldr pc, [sp], #4)
   19af4:	mov	r0, #8
   19af8:	mvn	r3, #-2147483648	; 0x80000000
   19afc:	add	r1, sp, #28
   19b00:	str	r0, [sp]
   19b04:	mov	r0, #0
   19b08:	bl	1b848 <__assert_fail@plt+0xa244>
   19b0c:	ldrd	r2, [r4, #8]
   19b10:	mov	r7, r0
   19b14:	str	r0, [r4]
   19b18:	strd	r2, [r0]
   19b1c:	b	199f8 <__assert_fail@plt+0x83f4>
   19b20:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   19b24:	strd	r4, [sp, #-12]!
   19b28:	mov	r4, #0
   19b2c:	mov	r5, #0
   19b30:	str	lr, [sp, #8]
   19b34:	sub	sp, sp, #100	; 0x64
   19b38:	cmp	r1, #10
   19b3c:	strd	r4, [sp]
   19b40:	strd	r4, [sp, #8]
   19b44:	strd	r4, [sp, #16]
   19b48:	strd	r4, [sp, #24]
   19b4c:	strd	r4, [sp, #32]
   19b50:	strd	r4, [sp, #40]	; 0x28
   19b54:	beq	19b84 <__assert_fail@plt+0x8580>
   19b58:	mov	ip, #67108864	; 0x4000000
   19b5c:	mov	r3, sp
   19b60:	str	r1, [sp]
   19b64:	mov	r1, r2
   19b68:	mvn	r2, #0
   19b6c:	str	ip, [sp, #12]
   19b70:	bl	18570 <__assert_fail@plt+0x6f6c>
   19b74:	add	sp, sp, #100	; 0x64
   19b78:	ldrd	r4, [sp]
   19b7c:	add	sp, sp, #8
   19b80:	pop	{pc}		; (ldr pc, [sp], #4)
   19b84:	bl	115c8 <abort@plt>
   19b88:	ldr	ip, [pc, #156]	; 19c2c <__assert_fail@plt+0x8628>
   19b8c:	cmp	r2, #0
   19b90:	cmpne	r1, #0
   19b94:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19b98:	strd	r6, [sp, #8]
   19b9c:	mov	r6, r2
   19ba0:	str	r8, [sp, #16]
   19ba4:	mov	r8, r3
   19ba8:	strd	sl, [sp, #20]
   19bac:	ldrd	r4, [ip]
   19bb0:	str	lr, [sp, #28]
   19bb4:	sub	sp, sp, #48	; 0x30
   19bb8:	mov	lr, #10
   19bbc:	ldrd	r2, [ip, #8]
   19bc0:	ldrd	sl, [ip, #16]
   19bc4:	strd	r4, [sp]
   19bc8:	ldrd	r4, [ip, #32]
   19bcc:	str	lr, [sp]
   19bd0:	strd	r2, [sp, #8]
   19bd4:	strd	sl, [sp, #16]
   19bd8:	ldrd	r2, [ip, #24]
   19bdc:	ldrd	sl, [ip, #40]	; 0x28
   19be0:	strd	r2, [sp, #24]
   19be4:	strd	r4, [sp, #32]
   19be8:	strd	sl, [sp, #40]	; 0x28
   19bec:	beq	19c28 <__assert_fail@plt+0x8624>
   19bf0:	mov	r7, r1
   19bf4:	mov	r3, sp
   19bf8:	mov	r1, r8
   19bfc:	mvn	r2, #0
   19c00:	str	r7, [sp, #40]	; 0x28
   19c04:	str	r6, [sp, #44]	; 0x2c
   19c08:	bl	18570 <__assert_fail@plt+0x6f6c>
   19c0c:	add	sp, sp, #48	; 0x30
   19c10:	ldrd	r4, [sp]
   19c14:	ldrd	r6, [sp, #8]
   19c18:	ldr	r8, [sp, #16]
   19c1c:	ldrd	sl, [sp, #20]
   19c20:	add	sp, sp, #28
   19c24:	pop	{pc}		; (ldr pc, [sp], #4)
   19c28:	bl	115c8 <abort@plt>
   19c2c:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   19c30:	ldr	ip, [pc, #156]	; 19cd4 <__assert_fail@plt+0x86d0>
   19c34:	cmp	r2, #0
   19c38:	cmpne	r1, #0
   19c3c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19c40:	strd	r6, [sp, #8]
   19c44:	mov	r6, r2
   19c48:	str	r8, [sp, #16]
   19c4c:	mov	r8, r3
   19c50:	strd	sl, [sp, #20]
   19c54:	ldrd	r4, [ip]
   19c58:	str	lr, [sp, #28]
   19c5c:	sub	sp, sp, #48	; 0x30
   19c60:	mov	lr, #10
   19c64:	ldrd	r2, [ip, #8]
   19c68:	ldrd	sl, [ip, #16]
   19c6c:	strd	r4, [sp]
   19c70:	ldrd	r4, [ip, #32]
   19c74:	str	lr, [sp]
   19c78:	strd	r2, [sp, #8]
   19c7c:	strd	sl, [sp, #16]
   19c80:	ldrd	r2, [ip, #24]
   19c84:	ldrd	sl, [ip, #40]	; 0x28
   19c88:	strd	r2, [sp, #24]
   19c8c:	strd	r4, [sp, #32]
   19c90:	strd	sl, [sp, #40]	; 0x28
   19c94:	beq	19cd0 <__assert_fail@plt+0x86cc>
   19c98:	ldr	r2, [sp, #80]	; 0x50
   19c9c:	mov	r7, r1
   19ca0:	mov	r3, sp
   19ca4:	mov	r1, r8
   19ca8:	str	r7, [sp, #40]	; 0x28
   19cac:	str	r6, [sp, #44]	; 0x2c
   19cb0:	bl	18570 <__assert_fail@plt+0x6f6c>
   19cb4:	add	sp, sp, #48	; 0x30
   19cb8:	ldrd	r4, [sp]
   19cbc:	ldrd	r6, [sp, #8]
   19cc0:	ldr	r8, [sp, #16]
   19cc4:	ldrd	sl, [sp, #20]
   19cc8:	add	sp, sp, #28
   19ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   19cd0:	bl	115c8 <abort@plt>
   19cd4:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   19cd8:	ldr	ip, [pc, #512]	; 19ee0 <__assert_fail@plt+0x88dc>
   19cdc:	cmp	r0, #0
   19ce0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19ce4:	ldrd	r4, [ip, #16]
   19ce8:	strd	r6, [sp, #8]
   19cec:	clz	r6, r1
   19cf0:	mov	r7, r1
   19cf4:	strd	r8, [sp, #16]
   19cf8:	mov	r8, r0
   19cfc:	lsr	r6, r6, #5
   19d00:	strd	sl, [sp, #24]
   19d04:	mov	fp, r2
   19d08:	mov	sl, #10
   19d0c:	ldrd	r2, [ip]
   19d10:	moveq	r6, #1
   19d14:	str	lr, [sp, #32]
   19d18:	sub	sp, sp, #92	; 0x5c
   19d1c:	cmp	r6, #0
   19d20:	ldrd	r0, [ip, #8]
   19d24:	strd	r2, [sp, #40]	; 0x28
   19d28:	strd	r4, [sp, #56]	; 0x38
   19d2c:	ldrd	r2, [ip, #24]
   19d30:	strd	r0, [sp, #48]	; 0x30
   19d34:	ldrd	r0, [ip, #32]
   19d38:	str	sl, [sp, #40]	; 0x28
   19d3c:	ldrd	r4, [ip, #40]	; 0x28
   19d40:	strd	r2, [sp, #64]	; 0x40
   19d44:	strd	r0, [sp, #72]	; 0x48
   19d48:	strd	r4, [sp, #80]	; 0x50
   19d4c:	bne	19edc <__assert_fail@plt+0x88d8>
   19d50:	movw	r5, #61804	; 0xf16c
   19d54:	movt	r5, #2
   19d58:	str	r8, [sp, #80]	; 0x50
   19d5c:	str	r7, [sp, #84]	; 0x54
   19d60:	bl	11484 <__errno_location@plt>
   19d64:	ldr	r3, [r0]
   19d68:	mov	r9, r0
   19d6c:	ldr	r2, [r5, #4]
   19d70:	ldr	r4, [r5]
   19d74:	str	r3, [sp, #28]
   19d78:	cmp	r2, #0
   19d7c:	movgt	r1, sl
   19d80:	bgt	19de8 <__assert_fail@plt+0x87e4>
   19d84:	add	r3, r5, #8
   19d88:	str	r2, [sp, #36]	; 0x24
   19d8c:	rsb	r2, r2, #1
   19d90:	cmp	r4, r3
   19d94:	beq	19eb0 <__assert_fail@plt+0x88ac>
   19d98:	mov	r1, #8
   19d9c:	mov	r0, r4
   19da0:	mvn	r3, #-2147483648	; 0x80000000
   19da4:	str	r1, [sp]
   19da8:	add	r1, sp, #36	; 0x24
   19dac:	bl	1b848 <__assert_fail@plt+0xa244>
   19db0:	mov	r4, r0
   19db4:	str	r0, [r5]
   19db8:	ldr	r0, [r5, #4]
   19dbc:	mov	r1, #0
   19dc0:	ldr	r2, [sp, #36]	; 0x24
   19dc4:	sub	r2, r2, r0
   19dc8:	add	r0, r4, r0, lsl #3
   19dcc:	lsl	r2, r2, #3
   19dd0:	bl	114a8 <memset@plt>
   19dd4:	ldr	r3, [sp, #36]	; 0x24
   19dd8:	ldr	r1, [sp, #40]	; 0x28
   19ddc:	ldr	r8, [sp, #80]	; 0x50
   19de0:	str	r3, [r5, #4]
   19de4:	ldr	r7, [sp, #84]	; 0x54
   19de8:	mvn	r3, #0
   19dec:	mov	r2, fp
   19df0:	ldr	r6, [sp, #44]	; 0x2c
   19df4:	ldr	sl, [r4]
   19df8:	ldr	r5, [r4, #4]
   19dfc:	orr	r6, r6, #1
   19e00:	stm	sp, {r1, r6}
   19e04:	add	r1, sp, #48	; 0x30
   19e08:	str	r8, [sp, #12]
   19e0c:	mov	r0, r5
   19e10:	str	r1, [sp, #8]
   19e14:	mov	r1, sl
   19e18:	str	r7, [sp, #16]
   19e1c:	bl	16b84 <__assert_fail@plt+0x5580>
   19e20:	cmp	sl, r0
   19e24:	bhi	19e88 <__assert_fail@plt+0x8884>
   19e28:	add	r7, r0, #1
   19e2c:	movw	r3, #61968	; 0xf210
   19e30:	movt	r3, #2
   19e34:	cmp	r5, r3
   19e38:	str	r7, [r4]
   19e3c:	beq	19e48 <__assert_fail@plt+0x8844>
   19e40:	mov	r0, r5
   19e44:	bl	1c300 <__assert_fail@plt+0xacfc>
   19e48:	mov	r0, r7
   19e4c:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   19e50:	ldr	r3, [sp, #40]	; 0x28
   19e54:	mov	r2, fp
   19e58:	mov	r1, r7
   19e5c:	mov	r5, r0
   19e60:	ldr	lr, [sp, #80]	; 0x50
   19e64:	ldr	ip, [sp, #84]	; 0x54
   19e68:	str	r0, [r4, #4]
   19e6c:	add	r4, sp, #48	; 0x30
   19e70:	stm	sp, {r3, r6}
   19e74:	mvn	r3, #0
   19e78:	str	r4, [sp, #8]
   19e7c:	str	lr, [sp, #12]
   19e80:	str	ip, [sp, #16]
   19e84:	bl	16b84 <__assert_fail@plt+0x5580>
   19e88:	ldr	r3, [sp, #28]
   19e8c:	mov	r0, r5
   19e90:	str	r3, [r9]
   19e94:	add	sp, sp, #92	; 0x5c
   19e98:	ldrd	r4, [sp]
   19e9c:	ldrd	r6, [sp, #8]
   19ea0:	ldrd	r8, [sp, #16]
   19ea4:	ldrd	sl, [sp, #24]
   19ea8:	add	sp, sp, #32
   19eac:	pop	{pc}		; (ldr pc, [sp], #4)
   19eb0:	mov	r1, #8
   19eb4:	mvn	r3, #-2147483648	; 0x80000000
   19eb8:	mov	r0, r6
   19ebc:	str	r1, [sp]
   19ec0:	add	r1, sp, #36	; 0x24
   19ec4:	bl	1b848 <__assert_fail@plt+0xa244>
   19ec8:	ldrd	r2, [r5, #8]
   19ecc:	mov	r4, r0
   19ed0:	str	r0, [r5]
   19ed4:	strd	r2, [r0]
   19ed8:	b	19db8 <__assert_fail@plt+0x87b4>
   19edc:	bl	115c8 <abort@plt>
   19ee0:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   19ee4:	ldr	ip, [pc, #536]	; 1a104 <__assert_fail@plt+0x8b00>
   19ee8:	cmp	r0, #0
   19eec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19ef0:	ldrd	r4, [ip, #16]
   19ef4:	strd	r6, [sp, #8]
   19ef8:	mov	r6, r1
   19efc:	mov	r7, r0
   19f00:	strd	r8, [sp, #16]
   19f04:	mov	r9, #10
   19f08:	strd	sl, [sp, #24]
   19f0c:	mov	sl, r2
   19f10:	mov	fp, r3
   19f14:	str	lr, [sp, #32]
   19f18:	clz	lr, r1
   19f1c:	sub	sp, sp, #92	; 0x5c
   19f20:	ldrd	r2, [ip]
   19f24:	lsr	lr, lr, #5
   19f28:	moveq	lr, #1
   19f2c:	ldrd	r0, [ip, #8]
   19f30:	cmp	lr, #0
   19f34:	strd	r4, [sp, #56]	; 0x38
   19f38:	ldrd	r4, [ip, #40]	; 0x28
   19f3c:	str	lr, [sp, #28]
   19f40:	strd	r2, [sp, #40]	; 0x28
   19f44:	ldrd	r2, [ip, #24]
   19f48:	strd	r0, [sp, #48]	; 0x30
   19f4c:	ldrd	r0, [ip, #32]
   19f50:	str	r9, [sp, #40]	; 0x28
   19f54:	strd	r2, [sp, #64]	; 0x40
   19f58:	strd	r4, [sp, #80]	; 0x50
   19f5c:	strd	r0, [sp, #72]	; 0x48
   19f60:	bne	1a100 <__assert_fail@plt+0x8afc>
   19f64:	movw	r5, #61804	; 0xf16c
   19f68:	movt	r5, #2
   19f6c:	str	r7, [sp, #80]	; 0x50
   19f70:	str	r6, [sp, #84]	; 0x54
   19f74:	bl	11484 <__errno_location@plt>
   19f78:	ldr	r3, [r0]
   19f7c:	mov	r8, r0
   19f80:	ldr	r2, [r5, #4]
   19f84:	ldr	r4, [r5]
   19f88:	str	r3, [sp, #24]
   19f8c:	cmp	r2, #0
   19f90:	movgt	r1, r9
   19f94:	bgt	19ffc <__assert_fail@plt+0x89f8>
   19f98:	add	r3, r5, #8
   19f9c:	str	r2, [sp, #36]	; 0x24
   19fa0:	rsb	r2, r2, #1
   19fa4:	cmp	r4, r3
   19fa8:	beq	1a0d4 <__assert_fail@plt+0x8ad0>
   19fac:	mov	r1, #8
   19fb0:	mov	r0, r4
   19fb4:	mvn	r3, #-2147483648	; 0x80000000
   19fb8:	str	r1, [sp]
   19fbc:	add	r1, sp, #36	; 0x24
   19fc0:	bl	1b848 <__assert_fail@plt+0xa244>
   19fc4:	mov	r4, r0
   19fc8:	str	r0, [r5]
   19fcc:	ldr	r0, [r5, #4]
   19fd0:	mov	r1, #0
   19fd4:	ldr	r2, [sp, #36]	; 0x24
   19fd8:	sub	r2, r2, r0
   19fdc:	add	r0, r4, r0, lsl #3
   19fe0:	lsl	r2, r2, #3
   19fe4:	bl	114a8 <memset@plt>
   19fe8:	ldr	r3, [sp, #36]	; 0x24
   19fec:	ldr	r1, [sp, #40]	; 0x28
   19ff0:	ldr	r7, [sp, #80]	; 0x50
   19ff4:	str	r3, [r5, #4]
   19ff8:	ldr	r6, [sp, #84]	; 0x54
   19ffc:	mov	r3, fp
   1a000:	mov	r2, sl
   1a004:	ldr	r0, [sp, #44]	; 0x2c
   1a008:	ldr	r9, [r4]
   1a00c:	ldr	r5, [r4, #4]
   1a010:	orr	r0, r0, #1
   1a014:	str	r1, [sp]
   1a018:	add	r1, sp, #48	; 0x30
   1a01c:	str	r0, [sp, #4]
   1a020:	str	r1, [sp, #8]
   1a024:	mov	r1, r9
   1a028:	str	r7, [sp, #12]
   1a02c:	str	r6, [sp, #16]
   1a030:	str	r0, [sp, #28]
   1a034:	mov	r0, r5
   1a038:	bl	16b84 <__assert_fail@plt+0x5580>
   1a03c:	cmp	r9, r0
   1a040:	bhi	1a0ac <__assert_fail@plt+0x8aa8>
   1a044:	add	r6, r0, #1
   1a048:	movw	r3, #61968	; 0xf210
   1a04c:	movt	r3, #2
   1a050:	cmp	r5, r3
   1a054:	str	r6, [r4]
   1a058:	beq	1a064 <__assert_fail@plt+0x8a60>
   1a05c:	mov	r0, r5
   1a060:	bl	1c300 <__assert_fail@plt+0xacfc>
   1a064:	mov	r0, r6
   1a068:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   1a06c:	ldr	lr, [sp, #40]	; 0x28
   1a070:	mov	r1, r6
   1a074:	mov	r3, fp
   1a078:	mov	r2, sl
   1a07c:	mov	r5, r0
   1a080:	ldr	r6, [sp, #80]	; 0x50
   1a084:	ldr	ip, [sp, #84]	; 0x54
   1a088:	str	r0, [r4, #4]
   1a08c:	str	lr, [sp]
   1a090:	ldr	lr, [sp, #28]
   1a094:	str	lr, [sp, #4]
   1a098:	add	lr, sp, #48	; 0x30
   1a09c:	str	r6, [sp, #12]
   1a0a0:	str	lr, [sp, #8]
   1a0a4:	str	ip, [sp, #16]
   1a0a8:	bl	16b84 <__assert_fail@plt+0x5580>
   1a0ac:	ldr	r3, [sp, #24]
   1a0b0:	mov	r0, r5
   1a0b4:	str	r3, [r8]
   1a0b8:	add	sp, sp, #92	; 0x5c
   1a0bc:	ldrd	r4, [sp]
   1a0c0:	ldrd	r6, [sp, #8]
   1a0c4:	ldrd	r8, [sp, #16]
   1a0c8:	ldrd	sl, [sp, #24]
   1a0cc:	add	sp, sp, #32
   1a0d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0d4:	mov	r1, #8
   1a0d8:	mvn	r3, #-2147483648	; 0x80000000
   1a0dc:	ldr	r0, [sp, #28]
   1a0e0:	str	r1, [sp]
   1a0e4:	add	r1, sp, #36	; 0x24
   1a0e8:	bl	1b848 <__assert_fail@plt+0xa244>
   1a0ec:	ldrd	r2, [r5, #8]
   1a0f0:	mov	r4, r0
   1a0f4:	str	r0, [r5]
   1a0f8:	strd	r2, [r0]
   1a0fc:	b	19fcc <__assert_fail@plt+0x89c8>
   1a100:	bl	115c8 <abort@plt>
   1a104:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   1a108:	ldr	r3, [pc]	; 1a110 <__assert_fail@plt+0x8b0c>
   1a10c:	b	18570 <__assert_fail@plt+0x6f6c>
   1a110:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   1a114:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a118:	movw	r4, #61804	; 0xf16c
   1a11c:	movt	r4, #2
   1a120:	strd	r6, [sp, #8]
   1a124:	strd	r8, [sp, #16]
   1a128:	strd	sl, [sp, #24]
   1a12c:	mov	sl, r0
   1a130:	mov	fp, r1
   1a134:	str	lr, [sp, #32]
   1a138:	sub	sp, sp, #44	; 0x2c
   1a13c:	bl	11484 <__errno_location@plt>
   1a140:	ldr	r3, [r0]
   1a144:	mov	r8, r0
   1a148:	ldr	r2, [r4, #4]
   1a14c:	ldr	r5, [r4]
   1a150:	str	r3, [sp, #28]
   1a154:	cmp	r2, #0
   1a158:	bgt	1a1b4 <__assert_fail@plt+0x8bb0>
   1a15c:	add	r3, r4, #8
   1a160:	str	r2, [sp, #36]	; 0x24
   1a164:	rsb	r2, r2, #1
   1a168:	cmp	r5, r3
   1a16c:	beq	1a290 <__assert_fail@plt+0x8c8c>
   1a170:	mov	r1, #8
   1a174:	mov	r0, r5
   1a178:	mvn	r3, #-2147483648	; 0x80000000
   1a17c:	str	r1, [sp]
   1a180:	add	r1, sp, #36	; 0x24
   1a184:	bl	1b848 <__assert_fail@plt+0xa244>
   1a188:	mov	r5, r0
   1a18c:	str	r0, [r4]
   1a190:	ldr	r0, [r4, #4]
   1a194:	mov	r1, #0
   1a198:	ldr	r2, [sp, #36]	; 0x24
   1a19c:	sub	r2, r2, r0
   1a1a0:	add	r0, r5, r0, lsl #3
   1a1a4:	lsl	r2, r2, #3
   1a1a8:	bl	114a8 <memset@plt>
   1a1ac:	ldr	r3, [sp, #36]	; 0x24
   1a1b0:	str	r3, [r4, #4]
   1a1b4:	ldr	ip, [r4, #16]
   1a1b8:	mov	r3, fp
   1a1bc:	mov	r2, sl
   1a1c0:	ldr	r7, [r4, #20]
   1a1c4:	ldr	r0, [pc, #240]	; 1a2bc <__assert_fail@plt+0x8cb8>
   1a1c8:	ldr	r9, [r5]
   1a1cc:	orr	r7, r7, #1
   1a1d0:	ldr	r6, [r5, #4]
   1a1d4:	str	ip, [sp]
   1a1d8:	ldr	ip, [r4, #56]	; 0x38
   1a1dc:	mov	r1, r9
   1a1e0:	str	r7, [sp, #4]
   1a1e4:	ldr	lr, [r4, #60]	; 0x3c
   1a1e8:	str	r0, [sp, #8]
   1a1ec:	mov	r0, r6
   1a1f0:	str	ip, [sp, #12]
   1a1f4:	str	lr, [sp, #16]
   1a1f8:	bl	16b84 <__assert_fail@plt+0x5580>
   1a1fc:	cmp	r9, r0
   1a200:	bhi	1a268 <__assert_fail@plt+0x8c64>
   1a204:	add	r9, r0, #1
   1a208:	movw	r3, #61968	; 0xf210
   1a20c:	movt	r3, #2
   1a210:	cmp	r6, r3
   1a214:	str	r9, [r5]
   1a218:	beq	1a224 <__assert_fail@plt+0x8c20>
   1a21c:	mov	r0, r6
   1a220:	bl	1c300 <__assert_fail@plt+0xacfc>
   1a224:	mov	r0, r9
   1a228:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   1a22c:	ldr	ip, [r4, #16]
   1a230:	mov	r1, r9
   1a234:	mov	r3, fp
   1a238:	mov	r2, sl
   1a23c:	mov	r6, r0
   1a240:	ldr	r9, [r4, #56]	; 0x38
   1a244:	ldr	lr, [r4, #60]	; 0x3c
   1a248:	str	r0, [r5, #4]
   1a24c:	str	ip, [sp]
   1a250:	ldr	ip, [pc, #100]	; 1a2bc <__assert_fail@plt+0x8cb8>
   1a254:	str	r7, [sp, #4]
   1a258:	str	ip, [sp, #8]
   1a25c:	str	r9, [sp, #12]
   1a260:	str	lr, [sp, #16]
   1a264:	bl	16b84 <__assert_fail@plt+0x5580>
   1a268:	ldr	r3, [sp, #28]
   1a26c:	mov	r0, r6
   1a270:	str	r3, [r8]
   1a274:	add	sp, sp, #44	; 0x2c
   1a278:	ldrd	r4, [sp]
   1a27c:	ldrd	r6, [sp, #8]
   1a280:	ldrd	r8, [sp, #16]
   1a284:	ldrd	sl, [sp, #24]
   1a288:	add	sp, sp, #32
   1a28c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a290:	mov	r0, #8
   1a294:	mvn	r3, #-2147483648	; 0x80000000
   1a298:	add	r1, sp, #36	; 0x24
   1a29c:	str	r0, [sp]
   1a2a0:	mov	r0, #0
   1a2a4:	bl	1b848 <__assert_fail@plt+0xa244>
   1a2a8:	ldrd	r2, [r4, #8]
   1a2ac:	mov	r5, r0
   1a2b0:	str	r0, [r4]
   1a2b4:	strd	r2, [r0]
   1a2b8:	b	1a190 <__assert_fail@plt+0x8b8c>
   1a2bc:	andeq	pc, r2, r4, lsl #3
   1a2c0:	ldr	r3, [pc, #4]	; 1a2cc <__assert_fail@plt+0x8cc8>
   1a2c4:	mvn	r2, #0
   1a2c8:	b	18570 <__assert_fail@plt+0x6f6c>
   1a2cc:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   1a2d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2d4:	movw	r4, #61804	; 0xf16c
   1a2d8:	movt	r4, #2
   1a2dc:	strd	r6, [sp, #8]
   1a2e0:	strd	r8, [sp, #16]
   1a2e4:	strd	sl, [sp, #24]
   1a2e8:	mov	sl, r0
   1a2ec:	str	lr, [sp, #32]
   1a2f0:	sub	sp, sp, #44	; 0x2c
   1a2f4:	bl	11484 <__errno_location@plt>
   1a2f8:	ldr	r3, [r0]
   1a2fc:	mov	r8, r0
   1a300:	ldr	r2, [r4, #4]
   1a304:	ldr	r5, [r4]
   1a308:	str	r3, [sp, #28]
   1a30c:	cmp	r2, #0
   1a310:	bgt	1a36c <__assert_fail@plt+0x8d68>
   1a314:	add	r3, r4, #8
   1a318:	str	r2, [sp, #36]	; 0x24
   1a31c:	rsb	r2, r2, #1
   1a320:	cmp	r5, r3
   1a324:	beq	1a434 <__assert_fail@plt+0x8e30>
   1a328:	mov	r1, #8
   1a32c:	mov	r0, r5
   1a330:	mvn	r3, #-2147483648	; 0x80000000
   1a334:	str	r1, [sp]
   1a338:	add	r1, sp, #36	; 0x24
   1a33c:	bl	1b848 <__assert_fail@plt+0xa244>
   1a340:	mov	r5, r0
   1a344:	str	r0, [r4]
   1a348:	ldr	r0, [r4, #4]
   1a34c:	mov	r1, #0
   1a350:	ldr	r2, [sp, #36]	; 0x24
   1a354:	sub	r2, r2, r0
   1a358:	add	r0, r5, r0, lsl #3
   1a35c:	lsl	r2, r2, #3
   1a360:	bl	114a8 <memset@plt>
   1a364:	ldr	r3, [sp, #36]	; 0x24
   1a368:	str	r3, [r4, #4]
   1a36c:	ldr	ip, [r4, #16]
   1a370:	mvn	r3, #0
   1a374:	mov	r2, sl
   1a378:	ldr	r7, [r4, #20]
   1a37c:	ldr	fp, [pc, #220]	; 1a460 <__assert_fail@plt+0x8e5c>
   1a380:	ldr	r9, [r5]
   1a384:	orr	r7, r7, #1
   1a388:	ldr	r6, [r5, #4]
   1a38c:	str	ip, [sp]
   1a390:	ldr	ip, [r4, #56]	; 0x38
   1a394:	mov	r1, r9
   1a398:	stmib	sp, {r7, fp}
   1a39c:	ldr	lr, [r4, #60]	; 0x3c
   1a3a0:	mov	r0, r6
   1a3a4:	str	ip, [sp, #12]
   1a3a8:	str	lr, [sp, #16]
   1a3ac:	bl	16b84 <__assert_fail@plt+0x5580>
   1a3b0:	cmp	r9, r0
   1a3b4:	bhi	1a40c <__assert_fail@plt+0x8e08>
   1a3b8:	add	r9, r0, #1
   1a3bc:	movw	r3, #61968	; 0xf210
   1a3c0:	movt	r3, #2
   1a3c4:	cmp	r6, r3
   1a3c8:	str	r9, [r5]
   1a3cc:	beq	1a3d8 <__assert_fail@plt+0x8dd4>
   1a3d0:	mov	r0, r6
   1a3d4:	bl	1c300 <__assert_fail@plt+0xacfc>
   1a3d8:	mov	r0, r9
   1a3dc:	bl	1b5a4 <__assert_fail@plt+0x9fa0>
   1a3e0:	ldr	r3, [r4, #16]
   1a3e4:	mov	r2, sl
   1a3e8:	mov	r1, r9
   1a3ec:	mov	r6, r0
   1a3f0:	ldr	lr, [r4, #56]	; 0x38
   1a3f4:	ldr	ip, [r4, #60]	; 0x3c
   1a3f8:	str	r0, [r5, #4]
   1a3fc:	stm	sp, {r3, r7, fp, lr}
   1a400:	mvn	r3, #0
   1a404:	str	ip, [sp, #16]
   1a408:	bl	16b84 <__assert_fail@plt+0x5580>
   1a40c:	ldr	r3, [sp, #28]
   1a410:	mov	r0, r6
   1a414:	str	r3, [r8]
   1a418:	add	sp, sp, #44	; 0x2c
   1a41c:	ldrd	r4, [sp]
   1a420:	ldrd	r6, [sp, #8]
   1a424:	ldrd	r8, [sp, #16]
   1a428:	ldrd	sl, [sp, #24]
   1a42c:	add	sp, sp, #32
   1a430:	pop	{pc}		; (ldr pc, [sp], #4)
   1a434:	mov	r0, #8
   1a438:	mvn	r3, #-2147483648	; 0x80000000
   1a43c:	add	r1, sp, #36	; 0x24
   1a440:	str	r0, [sp]
   1a444:	mov	r0, #0
   1a448:	bl	1b848 <__assert_fail@plt+0xa244>
   1a44c:	ldrd	r2, [r4, #8]
   1a450:	mov	r5, r0
   1a454:	str	r0, [r4]
   1a458:	strd	r2, [r0]
   1a45c:	b	1a348 <__assert_fail@plt+0x8d44>
   1a460:	andeq	pc, r2, r4, lsl #3
   1a464:	str	r4, [sp, #-16]!
   1a468:	movw	r1, #57544	; 0xe0c8
   1a46c:	movt	r1, #1
   1a470:	strd	r6, [sp, #4]
   1a474:	mov	r4, r0
   1a478:	mov	r0, #3
   1a47c:	str	lr, [sp, #12]
   1a480:	sub	sp, sp, #104	; 0x68
   1a484:	mov	r2, sp
   1a488:	bl	115e0 <__lxstat64@plt>
   1a48c:	cmp	r0, #0
   1a490:	movne	r0, #0
   1a494:	bne	1a4ac <__assert_fail@plt+0x8ea8>
   1a498:	ldrd	r6, [sp]
   1a49c:	mov	r0, r4
   1a4a0:	ldrd	r2, [sp, #96]	; 0x60
   1a4a4:	strd	r2, [r4]
   1a4a8:	strd	r6, [r4, #8]
   1a4ac:	add	sp, sp, #104	; 0x68
   1a4b0:	ldr	r4, [sp]
   1a4b4:	ldrd	r6, [sp, #4]
   1a4b8:	add	sp, sp, #12
   1a4bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4c0:	cmn	r0, #100	; 0x64
   1a4c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4c8:	mov	r5, r1
   1a4cc:	strd	r6, [sp, #8]
   1a4d0:	strd	r8, [sp, #16]
   1a4d4:	mov	r8, r2
   1a4d8:	strd	sl, [sp, #24]
   1a4dc:	str	lr, [sp, #32]
   1a4e0:	sub	sp, sp, #4032	; 0xfc0
   1a4e4:	sub	sp, sp, #4
   1a4e8:	beq	1a5d8 <__assert_fail@plt+0x8fd4>
   1a4ec:	ldrb	r3, [r1]
   1a4f0:	cmp	r3, #47	; 0x2f
   1a4f4:	beq	1a5d8 <__assert_fail@plt+0x8fd4>
   1a4f8:	mov	r4, r0
   1a4fc:	mov	r7, sp
   1a500:	mov	r2, r1
   1a504:	mov	r0, r7
   1a508:	mov	r1, r4
   1a50c:	bl	1bcf0 <__assert_fail@plt+0xa6ec>
   1a510:	subs	r9, r0, #0
   1a514:	beq	1a550 <__assert_fail@plt+0x8f4c>
   1a518:	mov	r1, r8
   1a51c:	bl	1ac10 <__assert_fail@plt+0x960c>
   1a520:	mov	r6, r0
   1a524:	bl	11484 <__errno_location@plt>
   1a528:	cmp	r9, r7
   1a52c:	mov	fp, r0
   1a530:	ldr	sl, [r0]
   1a534:	beq	1a540 <__assert_fail@plt+0x8f3c>
   1a538:	mov	r0, r9
   1a53c:	bl	1c300 <__assert_fail@plt+0xacfc>
   1a540:	cmn	r6, #1
   1a544:	bne	1a5b4 <__assert_fail@plt+0x8fb0>
   1a548:	cmp	sl, #20
   1a54c:	bne	1a5ec <__assert_fail@plt+0x8fe8>
   1a550:	mov	r0, r7
   1a554:	bl	1c5a4 <__assert_fail@plt+0xafa0>
   1a558:	cmp	r0, #0
   1a55c:	bne	1a688 <__assert_fail@plt+0x9084>
   1a560:	cmp	r4, #0
   1a564:	blt	1a574 <__assert_fail@plt+0x8f70>
   1a568:	ldr	r3, [sp]
   1a56c:	cmp	r3, r4
   1a570:	beq	1a660 <__assert_fail@plt+0x905c>
   1a574:	mov	r0, r4
   1a578:	bl	11568 <fchdir@plt>
   1a57c:	cmp	r0, #0
   1a580:	bne	1a640 <__assert_fail@plt+0x903c>
   1a584:	mov	r1, r8
   1a588:	mov	r0, r5
   1a58c:	bl	1ac10 <__assert_fail@plt+0x960c>
   1a590:	cmn	r0, #1
   1a594:	mov	r6, r0
   1a598:	beq	1a610 <__assert_fail@plt+0x900c>
   1a59c:	mov	r0, r7
   1a5a0:	bl	1c618 <__assert_fail@plt+0xb014>
   1a5a4:	cmp	r0, #0
   1a5a8:	bne	1a67c <__assert_fail@plt+0x9078>
   1a5ac:	mov	r0, r7
   1a5b0:	bl	1c634 <__assert_fail@plt+0xb030>
   1a5b4:	mov	r0, r6
   1a5b8:	add	sp, sp, #4032	; 0xfc0
   1a5bc:	add	sp, sp, #4
   1a5c0:	ldrd	r4, [sp]
   1a5c4:	ldrd	r6, [sp, #8]
   1a5c8:	ldrd	r8, [sp, #16]
   1a5cc:	ldrd	sl, [sp, #24]
   1a5d0:	add	sp, sp, #32
   1a5d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5d8:	mov	r1, r8
   1a5dc:	mov	r0, r5
   1a5e0:	bl	1ac10 <__assert_fail@plt+0x960c>
   1a5e4:	mov	r6, r0
   1a5e8:	b	1a5b4 <__assert_fail@plt+0x8fb0>
   1a5ec:	sub	r3, sl, #1
   1a5f0:	cmp	sl, #13
   1a5f4:	cmpne	r3, #1
   1a5f8:	bls	1a550 <__assert_fail@plt+0x8f4c>
   1a5fc:	cmp	sl, #38	; 0x26
   1a600:	cmpne	sl, #95	; 0x5f
   1a604:	strne	sl, [fp]
   1a608:	beq	1a550 <__assert_fail@plt+0x8f4c>
   1a60c:	b	1a5b4 <__assert_fail@plt+0x8fb0>
   1a610:	bl	11484 <__errno_location@plt>
   1a614:	mov	r4, r0
   1a618:	mov	r0, r7
   1a61c:	ldr	r5, [r4]
   1a620:	bl	1c618 <__assert_fail@plt+0xb014>
   1a624:	cmp	r0, #0
   1a628:	bne	1a67c <__assert_fail@plt+0x9078>
   1a62c:	mov	r0, r7
   1a630:	bl	1c634 <__assert_fail@plt+0xb030>
   1a634:	cmp	r5, #0
   1a638:	strne	r5, [r4]
   1a63c:	b	1a5b4 <__assert_fail@plt+0x8fb0>
   1a640:	bl	11484 <__errno_location@plt>
   1a644:	mov	r4, r0
   1a648:	mov	r0, r7
   1a64c:	ldr	r5, [r4]
   1a650:	mvn	r6, #0
   1a654:	bl	1c634 <__assert_fail@plt+0xb030>
   1a658:	str	r5, [r4]
   1a65c:	b	1a5b4 <__assert_fail@plt+0x8fb0>
   1a660:	mov	r0, r7
   1a664:	mvn	r6, #0
   1a668:	bl	1c634 <__assert_fail@plt+0xb030>
   1a66c:	bl	11484 <__errno_location@plt>
   1a670:	mov	r3, #9
   1a674:	str	r3, [r0]
   1a678:	b	1a5b4 <__assert_fail@plt+0x8fb0>
   1a67c:	bl	11484 <__errno_location@plt>
   1a680:	ldr	r0, [r0]
   1a684:	bl	1c52c <__assert_fail@plt+0xaf28>
   1a688:	bl	11484 <__errno_location@plt>
   1a68c:	ldr	r0, [r0]
   1a690:	bl	1c4ec <__assert_fail@plt+0xaee8>
   1a694:	cmn	r0, #100	; 0x64
   1a698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a69c:	mov	r5, r1
   1a6a0:	strd	r6, [sp, #8]
   1a6a4:	strd	r8, [sp, #16]
   1a6a8:	mov	r8, r2
   1a6ac:	strd	sl, [sp, #24]
   1a6b0:	str	lr, [sp, #32]
   1a6b4:	sub	sp, sp, #4032	; 0xfc0
   1a6b8:	sub	sp, sp, #4
   1a6bc:	beq	1a7ac <__assert_fail@plt+0x91a8>
   1a6c0:	ldrb	r3, [r1]
   1a6c4:	cmp	r3, #47	; 0x2f
   1a6c8:	beq	1a7ac <__assert_fail@plt+0x91a8>
   1a6cc:	mov	r4, r0
   1a6d0:	mov	r7, sp
   1a6d4:	mov	r2, r1
   1a6d8:	mov	r0, r7
   1a6dc:	mov	r1, r4
   1a6e0:	bl	1bcf0 <__assert_fail@plt+0xa6ec>
   1a6e4:	subs	r9, r0, #0
   1a6e8:	beq	1a724 <__assert_fail@plt+0x9120>
   1a6ec:	mov	r1, r8
   1a6f0:	bl	1aca0 <__assert_fail@plt+0x969c>
   1a6f4:	mov	r6, r0
   1a6f8:	bl	11484 <__errno_location@plt>
   1a6fc:	cmp	r9, r7
   1a700:	mov	fp, r0
   1a704:	ldr	sl, [r0]
   1a708:	beq	1a714 <__assert_fail@plt+0x9110>
   1a70c:	mov	r0, r9
   1a710:	bl	1c300 <__assert_fail@plt+0xacfc>
   1a714:	cmn	r6, #1
   1a718:	bne	1a788 <__assert_fail@plt+0x9184>
   1a71c:	cmp	sl, #20
   1a720:	bne	1a7c0 <__assert_fail@plt+0x91bc>
   1a724:	mov	r0, r7
   1a728:	bl	1c5a4 <__assert_fail@plt+0xafa0>
   1a72c:	cmp	r0, #0
   1a730:	bne	1a85c <__assert_fail@plt+0x9258>
   1a734:	cmp	r4, #0
   1a738:	blt	1a748 <__assert_fail@plt+0x9144>
   1a73c:	ldr	r3, [sp]
   1a740:	cmp	r3, r4
   1a744:	beq	1a834 <__assert_fail@plt+0x9230>
   1a748:	mov	r0, r4
   1a74c:	bl	11568 <fchdir@plt>
   1a750:	cmp	r0, #0
   1a754:	bne	1a814 <__assert_fail@plt+0x9210>
   1a758:	mov	r1, r8
   1a75c:	mov	r0, r5
   1a760:	bl	1aca0 <__assert_fail@plt+0x969c>
   1a764:	cmn	r0, #1
   1a768:	mov	r6, r0
   1a76c:	beq	1a7e4 <__assert_fail@plt+0x91e0>
   1a770:	mov	r0, r7
   1a774:	bl	1c618 <__assert_fail@plt+0xb014>
   1a778:	cmp	r0, #0
   1a77c:	bne	1a850 <__assert_fail@plt+0x924c>
   1a780:	mov	r0, r7
   1a784:	bl	1c634 <__assert_fail@plt+0xb030>
   1a788:	mov	r0, r6
   1a78c:	add	sp, sp, #4032	; 0xfc0
   1a790:	add	sp, sp, #4
   1a794:	ldrd	r4, [sp]
   1a798:	ldrd	r6, [sp, #8]
   1a79c:	ldrd	r8, [sp, #16]
   1a7a0:	ldrd	sl, [sp, #24]
   1a7a4:	add	sp, sp, #32
   1a7a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7ac:	mov	r1, r8
   1a7b0:	mov	r0, r5
   1a7b4:	bl	1aca0 <__assert_fail@plt+0x969c>
   1a7b8:	mov	r6, r0
   1a7bc:	b	1a788 <__assert_fail@plt+0x9184>
   1a7c0:	sub	r3, sl, #1
   1a7c4:	cmp	sl, #13
   1a7c8:	cmpne	r3, #1
   1a7cc:	bls	1a724 <__assert_fail@plt+0x9120>
   1a7d0:	cmp	sl, #38	; 0x26
   1a7d4:	cmpne	sl, #95	; 0x5f
   1a7d8:	strne	sl, [fp]
   1a7dc:	beq	1a724 <__assert_fail@plt+0x9120>
   1a7e0:	b	1a788 <__assert_fail@plt+0x9184>
   1a7e4:	bl	11484 <__errno_location@plt>
   1a7e8:	mov	r4, r0
   1a7ec:	mov	r0, r7
   1a7f0:	ldr	r5, [r4]
   1a7f4:	bl	1c618 <__assert_fail@plt+0xb014>
   1a7f8:	cmp	r0, #0
   1a7fc:	bne	1a850 <__assert_fail@plt+0x924c>
   1a800:	mov	r0, r7
   1a804:	bl	1c634 <__assert_fail@plt+0xb030>
   1a808:	cmp	r5, #0
   1a80c:	strne	r5, [r4]
   1a810:	b	1a788 <__assert_fail@plt+0x9184>
   1a814:	bl	11484 <__errno_location@plt>
   1a818:	mov	r4, r0
   1a81c:	mov	r0, r7
   1a820:	ldr	r5, [r4]
   1a824:	mvn	r6, #0
   1a828:	bl	1c634 <__assert_fail@plt+0xb030>
   1a82c:	str	r5, [r4]
   1a830:	b	1a788 <__assert_fail@plt+0x9184>
   1a834:	mov	r0, r7
   1a838:	mvn	r6, #0
   1a83c:	bl	1c634 <__assert_fail@plt+0xb030>
   1a840:	bl	11484 <__errno_location@plt>
   1a844:	mov	r3, #9
   1a848:	str	r3, [r0]
   1a84c:	b	1a788 <__assert_fail@plt+0x9184>
   1a850:	bl	11484 <__errno_location@plt>
   1a854:	ldr	r0, [r0]
   1a858:	bl	1c52c <__assert_fail@plt+0xaf28>
   1a85c:	bl	11484 <__errno_location@plt>
   1a860:	ldr	r0, [r0]
   1a864:	bl	1c4ec <__assert_fail@plt+0xaee8>
   1a868:	cmn	r0, #100	; 0x64
   1a86c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a870:	mov	r5, r1
   1a874:	strd	r6, [sp, #8]
   1a878:	strd	r8, [sp, #16]
   1a87c:	mov	r8, r2
   1a880:	strd	sl, [sp, #24]
   1a884:	str	lr, [sp, #32]
   1a888:	sub	sp, sp, #4032	; 0xfc0
   1a88c:	sub	sp, sp, #4
   1a890:	beq	1a980 <__assert_fail@plt+0x937c>
   1a894:	ldrb	r3, [r1]
   1a898:	cmp	r3, #47	; 0x2f
   1a89c:	beq	1a980 <__assert_fail@plt+0x937c>
   1a8a0:	mov	r4, r0
   1a8a4:	mov	r7, sp
   1a8a8:	mov	r2, r1
   1a8ac:	mov	r0, r7
   1a8b0:	mov	r1, r4
   1a8b4:	bl	1bcf0 <__assert_fail@plt+0xa6ec>
   1a8b8:	subs	r9, r0, #0
   1a8bc:	beq	1a8f8 <__assert_fail@plt+0x92f4>
   1a8c0:	mov	r1, r8
   1a8c4:	bl	114e4 <setfilecon@plt>
   1a8c8:	mov	r6, r0
   1a8cc:	bl	11484 <__errno_location@plt>
   1a8d0:	cmp	r9, r7
   1a8d4:	mov	fp, r0
   1a8d8:	ldr	sl, [r0]
   1a8dc:	beq	1a8e8 <__assert_fail@plt+0x92e4>
   1a8e0:	mov	r0, r9
   1a8e4:	bl	1c300 <__assert_fail@plt+0xacfc>
   1a8e8:	cmn	r6, #1
   1a8ec:	bne	1a95c <__assert_fail@plt+0x9358>
   1a8f0:	cmp	sl, #20
   1a8f4:	bne	1a994 <__assert_fail@plt+0x9390>
   1a8f8:	mov	r0, r7
   1a8fc:	bl	1c5a4 <__assert_fail@plt+0xafa0>
   1a900:	cmp	r0, #0
   1a904:	bne	1aa30 <__assert_fail@plt+0x942c>
   1a908:	cmp	r4, #0
   1a90c:	blt	1a91c <__assert_fail@plt+0x9318>
   1a910:	ldr	r3, [sp]
   1a914:	cmp	r3, r4
   1a918:	beq	1aa08 <__assert_fail@plt+0x9404>
   1a91c:	mov	r0, r4
   1a920:	bl	11568 <fchdir@plt>
   1a924:	cmp	r0, #0
   1a928:	bne	1a9e8 <__assert_fail@plt+0x93e4>
   1a92c:	mov	r1, r8
   1a930:	mov	r0, r5
   1a934:	bl	114e4 <setfilecon@plt>
   1a938:	cmn	r0, #1
   1a93c:	mov	r6, r0
   1a940:	beq	1a9b8 <__assert_fail@plt+0x93b4>
   1a944:	mov	r0, r7
   1a948:	bl	1c618 <__assert_fail@plt+0xb014>
   1a94c:	cmp	r0, #0
   1a950:	bne	1aa24 <__assert_fail@plt+0x9420>
   1a954:	mov	r0, r7
   1a958:	bl	1c634 <__assert_fail@plt+0xb030>
   1a95c:	mov	r0, r6
   1a960:	add	sp, sp, #4032	; 0xfc0
   1a964:	add	sp, sp, #4
   1a968:	ldrd	r4, [sp]
   1a96c:	ldrd	r6, [sp, #8]
   1a970:	ldrd	r8, [sp, #16]
   1a974:	ldrd	sl, [sp, #24]
   1a978:	add	sp, sp, #32
   1a97c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a980:	mov	r1, r8
   1a984:	mov	r0, r5
   1a988:	bl	114e4 <setfilecon@plt>
   1a98c:	mov	r6, r0
   1a990:	b	1a95c <__assert_fail@plt+0x9358>
   1a994:	sub	r3, sl, #1
   1a998:	cmp	sl, #13
   1a99c:	cmpne	r3, #1
   1a9a0:	bls	1a8f8 <__assert_fail@plt+0x92f4>
   1a9a4:	cmp	sl, #38	; 0x26
   1a9a8:	cmpne	sl, #95	; 0x5f
   1a9ac:	strne	sl, [fp]
   1a9b0:	beq	1a8f8 <__assert_fail@plt+0x92f4>
   1a9b4:	b	1a95c <__assert_fail@plt+0x9358>
   1a9b8:	bl	11484 <__errno_location@plt>
   1a9bc:	mov	r4, r0
   1a9c0:	mov	r0, r7
   1a9c4:	ldr	r5, [r4]
   1a9c8:	bl	1c618 <__assert_fail@plt+0xb014>
   1a9cc:	cmp	r0, #0
   1a9d0:	bne	1aa24 <__assert_fail@plt+0x9420>
   1a9d4:	mov	r0, r7
   1a9d8:	bl	1c634 <__assert_fail@plt+0xb030>
   1a9dc:	cmp	r5, #0
   1a9e0:	strne	r5, [r4]
   1a9e4:	b	1a95c <__assert_fail@plt+0x9358>
   1a9e8:	bl	11484 <__errno_location@plt>
   1a9ec:	mov	r4, r0
   1a9f0:	mov	r0, r7
   1a9f4:	ldr	r5, [r4]
   1a9f8:	mvn	r6, #0
   1a9fc:	bl	1c634 <__assert_fail@plt+0xb030>
   1aa00:	str	r5, [r4]
   1aa04:	b	1a95c <__assert_fail@plt+0x9358>
   1aa08:	mov	r0, r7
   1aa0c:	mvn	r6, #0
   1aa10:	bl	1c634 <__assert_fail@plt+0xb030>
   1aa14:	bl	11484 <__errno_location@plt>
   1aa18:	mov	r3, #9
   1aa1c:	str	r3, [r0]
   1aa20:	b	1a95c <__assert_fail@plt+0x9358>
   1aa24:	bl	11484 <__errno_location@plt>
   1aa28:	ldr	r0, [r0]
   1aa2c:	bl	1c52c <__assert_fail@plt+0xaf28>
   1aa30:	bl	11484 <__errno_location@plt>
   1aa34:	ldr	r0, [r0]
   1aa38:	bl	1c4ec <__assert_fail@plt+0xaee8>
   1aa3c:	cmn	r0, #100	; 0x64
   1aa40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa44:	mov	r5, r1
   1aa48:	strd	r6, [sp, #8]
   1aa4c:	strd	r8, [sp, #16]
   1aa50:	mov	r8, r2
   1aa54:	strd	sl, [sp, #24]
   1aa58:	str	lr, [sp, #32]
   1aa5c:	sub	sp, sp, #4032	; 0xfc0
   1aa60:	sub	sp, sp, #4
   1aa64:	beq	1ab54 <__assert_fail@plt+0x9550>
   1aa68:	ldrb	r3, [r1]
   1aa6c:	cmp	r3, #47	; 0x2f
   1aa70:	beq	1ab54 <__assert_fail@plt+0x9550>
   1aa74:	mov	r4, r0
   1aa78:	mov	r7, sp
   1aa7c:	mov	r2, r1
   1aa80:	mov	r0, r7
   1aa84:	mov	r1, r4
   1aa88:	bl	1bcf0 <__assert_fail@plt+0xa6ec>
   1aa8c:	subs	r9, r0, #0
   1aa90:	beq	1aacc <__assert_fail@plt+0x94c8>
   1aa94:	mov	r1, r8
   1aa98:	bl	11280 <lsetfilecon@plt>
   1aa9c:	mov	r6, r0
   1aaa0:	bl	11484 <__errno_location@plt>
   1aaa4:	cmp	r9, r7
   1aaa8:	mov	fp, r0
   1aaac:	ldr	sl, [r0]
   1aab0:	beq	1aabc <__assert_fail@plt+0x94b8>
   1aab4:	mov	r0, r9
   1aab8:	bl	1c300 <__assert_fail@plt+0xacfc>
   1aabc:	cmn	r6, #1
   1aac0:	bne	1ab30 <__assert_fail@plt+0x952c>
   1aac4:	cmp	sl, #20
   1aac8:	bne	1ab68 <__assert_fail@plt+0x9564>
   1aacc:	mov	r0, r7
   1aad0:	bl	1c5a4 <__assert_fail@plt+0xafa0>
   1aad4:	cmp	r0, #0
   1aad8:	bne	1ac04 <__assert_fail@plt+0x9600>
   1aadc:	cmp	r4, #0
   1aae0:	blt	1aaf0 <__assert_fail@plt+0x94ec>
   1aae4:	ldr	r3, [sp]
   1aae8:	cmp	r3, r4
   1aaec:	beq	1abdc <__assert_fail@plt+0x95d8>
   1aaf0:	mov	r0, r4
   1aaf4:	bl	11568 <fchdir@plt>
   1aaf8:	cmp	r0, #0
   1aafc:	bne	1abbc <__assert_fail@plt+0x95b8>
   1ab00:	mov	r1, r8
   1ab04:	mov	r0, r5
   1ab08:	bl	11280 <lsetfilecon@plt>
   1ab0c:	cmn	r0, #1
   1ab10:	mov	r6, r0
   1ab14:	beq	1ab8c <__assert_fail@plt+0x9588>
   1ab18:	mov	r0, r7
   1ab1c:	bl	1c618 <__assert_fail@plt+0xb014>
   1ab20:	cmp	r0, #0
   1ab24:	bne	1abf8 <__assert_fail@plt+0x95f4>
   1ab28:	mov	r0, r7
   1ab2c:	bl	1c634 <__assert_fail@plt+0xb030>
   1ab30:	mov	r0, r6
   1ab34:	add	sp, sp, #4032	; 0xfc0
   1ab38:	add	sp, sp, #4
   1ab3c:	ldrd	r4, [sp]
   1ab40:	ldrd	r6, [sp, #8]
   1ab44:	ldrd	r8, [sp, #16]
   1ab48:	ldrd	sl, [sp, #24]
   1ab4c:	add	sp, sp, #32
   1ab50:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab54:	mov	r1, r8
   1ab58:	mov	r0, r5
   1ab5c:	bl	11280 <lsetfilecon@plt>
   1ab60:	mov	r6, r0
   1ab64:	b	1ab30 <__assert_fail@plt+0x952c>
   1ab68:	sub	r3, sl, #1
   1ab6c:	cmp	sl, #13
   1ab70:	cmpne	r3, #1
   1ab74:	bls	1aacc <__assert_fail@plt+0x94c8>
   1ab78:	cmp	sl, #38	; 0x26
   1ab7c:	cmpne	sl, #95	; 0x5f
   1ab80:	strne	sl, [fp]
   1ab84:	beq	1aacc <__assert_fail@plt+0x94c8>
   1ab88:	b	1ab30 <__assert_fail@plt+0x952c>
   1ab8c:	bl	11484 <__errno_location@plt>
   1ab90:	mov	r4, r0
   1ab94:	mov	r0, r7
   1ab98:	ldr	r5, [r4]
   1ab9c:	bl	1c618 <__assert_fail@plt+0xb014>
   1aba0:	cmp	r0, #0
   1aba4:	bne	1abf8 <__assert_fail@plt+0x95f4>
   1aba8:	mov	r0, r7
   1abac:	bl	1c634 <__assert_fail@plt+0xb030>
   1abb0:	cmp	r5, #0
   1abb4:	strne	r5, [r4]
   1abb8:	b	1ab30 <__assert_fail@plt+0x952c>
   1abbc:	bl	11484 <__errno_location@plt>
   1abc0:	mov	r4, r0
   1abc4:	mov	r0, r7
   1abc8:	ldr	r5, [r4]
   1abcc:	mvn	r6, #0
   1abd0:	bl	1c634 <__assert_fail@plt+0xb030>
   1abd4:	str	r5, [r4]
   1abd8:	b	1ab30 <__assert_fail@plt+0x952c>
   1abdc:	mov	r0, r7
   1abe0:	mvn	r6, #0
   1abe4:	bl	1c634 <__assert_fail@plt+0xb030>
   1abe8:	bl	11484 <__errno_location@plt>
   1abec:	mov	r3, #9
   1abf0:	str	r3, [r0]
   1abf4:	b	1ab30 <__assert_fail@plt+0x952c>
   1abf8:	bl	11484 <__errno_location@plt>
   1abfc:	ldr	r0, [r0]
   1ac00:	bl	1c52c <__assert_fail@plt+0xaf28>
   1ac04:	bl	11484 <__errno_location@plt>
   1ac08:	ldr	r0, [r0]
   1ac0c:	bl	1c4ec <__assert_fail@plt+0xaee8>
   1ac10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ac14:	mov	r5, r1
   1ac18:	strd	r6, [sp, #8]
   1ac1c:	str	r8, [sp, #16]
   1ac20:	str	lr, [sp, #20]
   1ac24:	bl	11454 <getfilecon@plt>
   1ac28:	subs	r4, r0, #0
   1ac2c:	beq	1ac8c <__assert_fail@plt+0x9688>
   1ac30:	cmp	r4, #10
   1ac34:	beq	1ac50 <__assert_fail@plt+0x964c>
   1ac38:	mov	r0, r4
   1ac3c:	ldrd	r4, [sp]
   1ac40:	ldrd	r6, [sp, #8]
   1ac44:	ldr	r8, [sp, #16]
   1ac48:	add	sp, sp, #20
   1ac4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac50:	ldr	r6, [r5]
   1ac54:	movw	r1, #56620	; 0xdd2c
   1ac58:	movt	r1, #1
   1ac5c:	mov	r0, r6
   1ac60:	bl	11268 <strcmp@plt>
   1ac64:	subs	r7, r0, #0
   1ac68:	bne	1ac38 <__assert_fail@plt+0x9634>
   1ac6c:	mov	r0, r6
   1ac70:	mvn	r4, #0
   1ac74:	bl	11580 <freecon@plt>
   1ac78:	str	r7, [r5]
   1ac7c:	bl	11484 <__errno_location@plt>
   1ac80:	mov	r3, #61	; 0x3d
   1ac84:	str	r3, [r0]
   1ac88:	b	1ac38 <__assert_fail@plt+0x9634>
   1ac8c:	bl	11484 <__errno_location@plt>
   1ac90:	mov	r3, #95	; 0x5f
   1ac94:	mvn	r4, #0
   1ac98:	str	r3, [r0]
   1ac9c:	b	1ac38 <__assert_fail@plt+0x9634>
   1aca0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aca4:	mov	r5, r1
   1aca8:	strd	r6, [sp, #8]
   1acac:	str	r8, [sp, #16]
   1acb0:	str	lr, [sp, #20]
   1acb4:	bl	113d0 <lgetfilecon@plt>
   1acb8:	subs	r4, r0, #0
   1acbc:	beq	1ad1c <__assert_fail@plt+0x9718>
   1acc0:	cmp	r4, #10
   1acc4:	beq	1ace0 <__assert_fail@plt+0x96dc>
   1acc8:	mov	r0, r4
   1accc:	ldrd	r4, [sp]
   1acd0:	ldrd	r6, [sp, #8]
   1acd4:	ldr	r8, [sp, #16]
   1acd8:	add	sp, sp, #20
   1acdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ace0:	ldr	r6, [r5]
   1ace4:	movw	r1, #56620	; 0xdd2c
   1ace8:	movt	r1, #1
   1acec:	mov	r0, r6
   1acf0:	bl	11268 <strcmp@plt>
   1acf4:	subs	r7, r0, #0
   1acf8:	bne	1acc8 <__assert_fail@plt+0x96c4>
   1acfc:	mov	r0, r6
   1ad00:	mvn	r4, #0
   1ad04:	bl	11580 <freecon@plt>
   1ad08:	str	r7, [r5]
   1ad0c:	bl	11484 <__errno_location@plt>
   1ad10:	mov	r3, #61	; 0x3d
   1ad14:	str	r3, [r0]
   1ad18:	b	1acc8 <__assert_fail@plt+0x96c4>
   1ad1c:	bl	11484 <__errno_location@plt>
   1ad20:	mov	r3, #95	; 0x5f
   1ad24:	mvn	r4, #0
   1ad28:	str	r3, [r0]
   1ad2c:	b	1acc8 <__assert_fail@plt+0x96c4>
   1ad30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ad34:	mov	r5, r1
   1ad38:	strd	r6, [sp, #8]
   1ad3c:	str	r8, [sp, #16]
   1ad40:	str	lr, [sp, #20]
   1ad44:	bl	1131c <fgetfilecon@plt>
   1ad48:	subs	r4, r0, #0
   1ad4c:	beq	1adac <__assert_fail@plt+0x97a8>
   1ad50:	cmp	r4, #10
   1ad54:	beq	1ad70 <__assert_fail@plt+0x976c>
   1ad58:	mov	r0, r4
   1ad5c:	ldrd	r4, [sp]
   1ad60:	ldrd	r6, [sp, #8]
   1ad64:	ldr	r8, [sp, #16]
   1ad68:	add	sp, sp, #20
   1ad6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad70:	ldr	r6, [r5]
   1ad74:	movw	r1, #56620	; 0xdd2c
   1ad78:	movt	r1, #1
   1ad7c:	mov	r0, r6
   1ad80:	bl	11268 <strcmp@plt>
   1ad84:	subs	r7, r0, #0
   1ad88:	bne	1ad58 <__assert_fail@plt+0x9754>
   1ad8c:	mov	r0, r6
   1ad90:	mvn	r4, #0
   1ad94:	bl	11580 <freecon@plt>
   1ad98:	str	r7, [r5]
   1ad9c:	bl	11484 <__errno_location@plt>
   1ada0:	mov	r3, #61	; 0x3d
   1ada4:	str	r3, [r0]
   1ada8:	b	1ad58 <__assert_fail@plt+0x9754>
   1adac:	bl	11484 <__errno_location@plt>
   1adb0:	mov	r3, #95	; 0x5f
   1adb4:	mvn	r4, #0
   1adb8:	str	r3, [r0]
   1adbc:	b	1ad58 <__assert_fail@plt+0x9754>
   1adc0:	cmp	r0, #2
   1adc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1adc8:	mov	r4, r0
   1adcc:	strd	r6, [sp, #8]
   1add0:	str	r8, [sp, #16]
   1add4:	str	lr, [sp, #20]
   1add8:	bls	1adf4 <__assert_fail@plt+0x97f0>
   1addc:	mov	r0, r4
   1ade0:	ldrd	r4, [sp]
   1ade4:	ldrd	r6, [sp, #8]
   1ade8:	ldr	r8, [sp, #16]
   1adec:	add	sp, sp, #20
   1adf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf4:	bl	1c664 <__assert_fail@plt+0xb060>
   1adf8:	mov	r7, r0
   1adfc:	bl	11484 <__errno_location@plt>
   1ae00:	mov	r5, r0
   1ae04:	mov	r0, r4
   1ae08:	ldr	r6, [r5]
   1ae0c:	mov	r4, r7
   1ae10:	bl	115d4 <close@plt>
   1ae14:	str	r6, [r5]
   1ae18:	b	1addc <__assert_fail@plt+0x97d8>
   1ae1c:	cmp	r1, #0
   1ae20:	strd	r4, [sp, #-16]!
   1ae24:	mov	ip, r3
   1ae28:	str	r6, [sp, #8]
   1ae2c:	mov	r4, r0
   1ae30:	str	lr, [sp, #12]
   1ae34:	sub	sp, sp, #32
   1ae38:	ldr	r5, [sp, #48]	; 0x30
   1ae3c:	ldr	r6, [sp, #52]	; 0x34
   1ae40:	beq	1af84 <__assert_fail@plt+0x9980>
   1ae44:	mov	r3, r1
   1ae48:	mov	r1, #1
   1ae4c:	stm	sp, {r2, ip}
   1ae50:	movw	r2, #56632	; 0xdd38
   1ae54:	movt	r2, #1
   1ae58:	bl	114cc <__fprintf_chk@plt>
   1ae5c:	mov	r2, #5
   1ae60:	movw	r1, #56652	; 0xdd4c
   1ae64:	movt	r1, #1
   1ae68:	mov	r0, #0
   1ae6c:	bl	112f8 <dcgettext@plt>
   1ae70:	movw	ip, #2022	; 0x7e6
   1ae74:	mov	r3, r0
   1ae78:	mov	r1, #1
   1ae7c:	movw	r2, #57380	; 0xe024
   1ae80:	movt	r2, #1
   1ae84:	mov	r0, r4
   1ae88:	str	ip, [sp]
   1ae8c:	bl	114cc <__fprintf_chk@plt>
   1ae90:	mov	r1, r4
   1ae94:	mov	r0, #10
   1ae98:	bl	112e0 <fputc_unlocked@plt>
   1ae9c:	mov	r2, #5
   1aea0:	movw	r1, #56656	; 0xdd50
   1aea4:	movt	r1, #1
   1aea8:	mov	r0, #0
   1aeac:	bl	112f8 <dcgettext@plt>
   1aeb0:	mov	r2, r0
   1aeb4:	mov	r1, #1
   1aeb8:	movw	r3, #56828	; 0xddfc
   1aebc:	movt	r3, #1
   1aec0:	mov	r0, r4
   1aec4:	bl	114cc <__fprintf_chk@plt>
   1aec8:	mov	r1, r4
   1aecc:	mov	r0, #10
   1aed0:	bl	112e0 <fputc_unlocked@plt>
   1aed4:	cmp	r6, #9
   1aed8:	ldrls	pc, [pc, r6, lsl #2]
   1aedc:	b	1b1f0 <__assert_fail@plt+0x9bec>
   1aee0:	andeq	sl, r1, r0, ror pc
   1aee4:	andeq	sl, r1, r0, lsr #31
   1aee8:	ldrdeq	sl, [r1], -ip
   1aeec:	andeq	fp, r1, ip, lsl r0
   1aef0:	andeq	fp, r1, r4, rrx
   1aef4:	muleq	r1, ip, r0
   1aef8:	andeq	fp, r1, r4, ror #1
   1aefc:	andeq	fp, r1, r8, lsr r1
   1af00:	muleq	r1, r0, r1
   1af04:	andeq	sl, r1, r8, lsl #30
   1af08:	movw	r1, #57132	; 0xdf2c
   1af0c:	movt	r1, #1
   1af10:	mov	r2, #5
   1af14:	mov	r0, #0
   1af18:	bl	112f8 <dcgettext@plt>
   1af1c:	ldr	lr, [r5, #4]
   1af20:	mov	r2, r0
   1af24:	mov	r1, #1
   1af28:	mov	r0, r4
   1af2c:	ldr	r3, [r5, #8]
   1af30:	ldr	ip, [r5, #32]
   1af34:	str	lr, [sp]
   1af38:	ldr	lr, [r5, #12]
   1af3c:	str	ip, [sp, #28]
   1af40:	ldr	ip, [r5, #28]
   1af44:	str	r3, [sp, #4]
   1af48:	ldr	r3, [r5, #16]
   1af4c:	str	lr, [sp, #8]
   1af50:	ldr	lr, [r5, #20]
   1af54:	str	ip, [sp, #24]
   1af58:	ldr	ip, [r5, #24]
   1af5c:	str	r3, [sp, #12]
   1af60:	ldr	r3, [r5]
   1af64:	str	lr, [sp, #16]
   1af68:	str	ip, [sp, #20]
   1af6c:	bl	114cc <__fprintf_chk@plt>
   1af70:	add	sp, sp, #32
   1af74:	ldrd	r4, [sp]
   1af78:	ldr	r6, [sp, #8]
   1af7c:	add	sp, sp, #12
   1af80:	pop	{pc}		; (ldr pc, [sp], #4)
   1af84:	mov	r3, r2
   1af88:	mov	r1, #1
   1af8c:	str	ip, [sp]
   1af90:	movw	r2, #56644	; 0xdd44
   1af94:	movt	r2, #1
   1af98:	bl	114cc <__fprintf_chk@plt>
   1af9c:	b	1ae5c <__assert_fail@plt+0x9858>
   1afa0:	mov	r2, #5
   1afa4:	movw	r1, #56864	; 0xde20
   1afa8:	movt	r1, #1
   1afac:	mov	r0, #0
   1afb0:	bl	112f8 <dcgettext@plt>
   1afb4:	ldr	r3, [r5]
   1afb8:	mov	r2, r0
   1afbc:	mov	r1, #1
   1afc0:	mov	r0, r4
   1afc4:	add	sp, sp, #32
   1afc8:	ldrd	r4, [sp]
   1afcc:	ldr	r6, [sp, #8]
   1afd0:	ldr	lr, [sp, #12]
   1afd4:	add	sp, sp, #16
   1afd8:	b	114cc <__fprintf_chk@plt>
   1afdc:	mov	r2, #5
   1afe0:	movw	r1, #56880	; 0xde30
   1afe4:	movt	r1, #1
   1afe8:	mov	r0, #0
   1afec:	bl	112f8 <dcgettext@plt>
   1aff0:	ldm	r5, {r3, ip}
   1aff4:	mov	r2, r0
   1aff8:	mov	r1, #1
   1affc:	mov	r0, r4
   1b000:	str	ip, [sp, #48]	; 0x30
   1b004:	add	sp, sp, #32
   1b008:	ldrd	r4, [sp]
   1b00c:	ldr	r6, [sp, #8]
   1b010:	ldr	lr, [sp, #12]
   1b014:	add	sp, sp, #16
   1b018:	b	114cc <__fprintf_chk@plt>
   1b01c:	mov	r2, #5
   1b020:	movw	r1, #56904	; 0xde48
   1b024:	movt	r1, #1
   1b028:	mov	r0, #0
   1b02c:	bl	112f8 <dcgettext@plt>
   1b030:	ldm	r5, {r3, lr}
   1b034:	mov	r2, r0
   1b038:	mov	r1, #1
   1b03c:	mov	r0, r4
   1b040:	ldr	ip, [r5, #8]
   1b044:	str	lr, [sp, #48]	; 0x30
   1b048:	str	ip, [sp, #52]	; 0x34
   1b04c:	add	sp, sp, #32
   1b050:	ldrd	r4, [sp]
   1b054:	ldr	r6, [sp, #8]
   1b058:	ldr	lr, [sp, #12]
   1b05c:	add	sp, sp, #16
   1b060:	b	114cc <__fprintf_chk@plt>
   1b064:	mov	r2, #5
   1b068:	movw	r1, #56932	; 0xde64
   1b06c:	movt	r1, #1
   1b070:	mov	r0, #0
   1b074:	bl	112f8 <dcgettext@plt>
   1b078:	ldmib	r5, {r3, ip, lr}
   1b07c:	mov	r2, r0
   1b080:	mov	r1, #1
   1b084:	mov	r0, r4
   1b088:	str	r3, [sp]
   1b08c:	ldr	r3, [r5]
   1b090:	stmib	sp, {ip, lr}
   1b094:	bl	114cc <__fprintf_chk@plt>
   1b098:	b	1af70 <__assert_fail@plt+0x996c>
   1b09c:	mov	r2, #5
   1b0a0:	movw	r1, #56964	; 0xde84
   1b0a4:	movt	r1, #1
   1b0a8:	mov	r0, #0
   1b0ac:	bl	112f8 <dcgettext@plt>
   1b0b0:	ldmib	r5, {ip, lr}
   1b0b4:	mov	r2, r0
   1b0b8:	mov	r1, #1
   1b0bc:	mov	r0, r4
   1b0c0:	ldr	r3, [r5, #16]
   1b0c4:	str	ip, [sp]
   1b0c8:	ldr	ip, [r5, #12]
   1b0cc:	str	r3, [sp, #12]
   1b0d0:	ldr	r3, [r5]
   1b0d4:	str	lr, [sp, #4]
   1b0d8:	str	ip, [sp, #8]
   1b0dc:	bl	114cc <__fprintf_chk@plt>
   1b0e0:	b	1af70 <__assert_fail@plt+0x996c>
   1b0e4:	mov	r2, #5
   1b0e8:	movw	r1, #57000	; 0xdea8
   1b0ec:	movt	r1, #1
   1b0f0:	mov	r0, #0
   1b0f4:	bl	112f8 <dcgettext@plt>
   1b0f8:	ldr	lr, [r5, #4]
   1b0fc:	mov	r2, r0
   1b100:	mov	r1, #1
   1b104:	mov	r0, r4
   1b108:	ldr	r3, [r5, #8]
   1b10c:	ldr	ip, [r5, #20]
   1b110:	str	lr, [sp]
   1b114:	ldr	lr, [r5, #12]
   1b118:	str	ip, [sp, #16]
   1b11c:	ldr	ip, [r5, #16]
   1b120:	str	r3, [sp, #4]
   1b124:	ldr	r3, [r5]
   1b128:	str	lr, [sp, #8]
   1b12c:	str	ip, [sp, #12]
   1b130:	bl	114cc <__fprintf_chk@plt>
   1b134:	b	1af70 <__assert_fail@plt+0x996c>
   1b138:	mov	r2, #5
   1b13c:	movw	r1, #57040	; 0xded0
   1b140:	movt	r1, #1
   1b144:	mov	r0, #0
   1b148:	bl	112f8 <dcgettext@plt>
   1b14c:	ldmib	r5, {r3, ip}
   1b150:	mov	r2, r0
   1b154:	mov	r1, #1
   1b158:	mov	r0, r4
   1b15c:	ldr	lr, [r5, #24]
   1b160:	str	r3, [sp]
   1b164:	ldr	r3, [r5, #12]
   1b168:	str	lr, [sp, #20]
   1b16c:	ldr	lr, [r5, #20]
   1b170:	str	ip, [sp, #4]
   1b174:	ldr	ip, [r5, #16]
   1b178:	str	r3, [sp, #8]
   1b17c:	ldr	r3, [r5]
   1b180:	str	ip, [sp, #12]
   1b184:	str	lr, [sp, #16]
   1b188:	bl	114cc <__fprintf_chk@plt>
   1b18c:	b	1af70 <__assert_fail@plt+0x996c>
   1b190:	mov	r2, #5
   1b194:	movw	r1, #57084	; 0xdefc
   1b198:	movt	r1, #1
   1b19c:	mov	r0, #0
   1b1a0:	bl	112f8 <dcgettext@plt>
   1b1a4:	ldmib	r5, {ip, lr}
   1b1a8:	mov	r2, r0
   1b1ac:	mov	r1, #1
   1b1b0:	mov	r0, r4
   1b1b4:	ldr	r3, [r5, #28]
   1b1b8:	str	ip, [sp]
   1b1bc:	ldr	ip, [r5, #12]
   1b1c0:	str	r3, [sp, #24]
   1b1c4:	ldr	r3, [r5, #24]
   1b1c8:	str	lr, [sp, #4]
   1b1cc:	ldr	lr, [r5, #16]
   1b1d0:	str	ip, [sp, #8]
   1b1d4:	ldr	ip, [r5, #20]
   1b1d8:	str	r3, [sp, #20]
   1b1dc:	ldr	r3, [r5]
   1b1e0:	str	lr, [sp, #12]
   1b1e4:	str	ip, [sp, #16]
   1b1e8:	bl	114cc <__fprintf_chk@plt>
   1b1ec:	b	1af70 <__assert_fail@plt+0x996c>
   1b1f0:	movw	r1, #57184	; 0xdf60
   1b1f4:	movt	r1, #1
   1b1f8:	b	1af10 <__assert_fail@plt+0x990c>
   1b1fc:	strd	r4, [sp, #-12]!
   1b200:	str	lr, [sp, #8]
   1b204:	sub	sp, sp, #12
   1b208:	ldr	r5, [sp, #24]
   1b20c:	ldr	ip, [r5]
   1b210:	cmp	ip, #0
   1b214:	beq	1b230 <__assert_fail@plt+0x9c2c>
   1b218:	mov	lr, r5
   1b21c:	mov	ip, #0
   1b220:	ldr	r4, [lr, #4]!
   1b224:	add	ip, ip, #1
   1b228:	cmp	r4, #0
   1b22c:	bne	1b220 <__assert_fail@plt+0x9c1c>
   1b230:	stm	sp, {r5, ip}
   1b234:	bl	1ae1c <__assert_fail@plt+0x9818>
   1b238:	add	sp, sp, #12
   1b23c:	ldrd	r4, [sp]
   1b240:	add	sp, sp, #8
   1b244:	pop	{pc}		; (ldr pc, [sp], #4)
   1b248:	push	{lr}		; (str lr, [sp, #-4]!)
   1b24c:	sub	sp, sp, #52	; 0x34
   1b250:	ldr	ip, [sp, #56]	; 0x38
   1b254:	ldr	lr, [ip]
   1b258:	cmp	lr, #0
   1b25c:	str	lr, [sp, #8]
   1b260:	beq	1b2f8 <__assert_fail@plt+0x9cf4>
   1b264:	ldr	lr, [ip, #4]
   1b268:	cmp	lr, #0
   1b26c:	str	lr, [sp, #12]
   1b270:	beq	1b30c <__assert_fail@plt+0x9d08>
   1b274:	ldr	lr, [ip, #8]
   1b278:	cmp	lr, #0
   1b27c:	str	lr, [sp, #16]
   1b280:	beq	1b314 <__assert_fail@plt+0x9d10>
   1b284:	ldr	lr, [ip, #12]
   1b288:	cmp	lr, #0
   1b28c:	str	lr, [sp, #20]
   1b290:	beq	1b31c <__assert_fail@plt+0x9d18>
   1b294:	ldr	lr, [ip, #16]
   1b298:	cmp	lr, #0
   1b29c:	str	lr, [sp, #24]
   1b2a0:	beq	1b324 <__assert_fail@plt+0x9d20>
   1b2a4:	ldr	lr, [ip, #20]
   1b2a8:	cmp	lr, #0
   1b2ac:	str	lr, [sp, #28]
   1b2b0:	beq	1b32c <__assert_fail@plt+0x9d28>
   1b2b4:	ldr	lr, [ip, #24]
   1b2b8:	cmp	lr, #0
   1b2bc:	str	lr, [sp, #32]
   1b2c0:	beq	1b334 <__assert_fail@plt+0x9d30>
   1b2c4:	ldr	lr, [ip, #28]
   1b2c8:	cmp	lr, #0
   1b2cc:	str	lr, [sp, #36]	; 0x24
   1b2d0:	beq	1b33c <__assert_fail@plt+0x9d38>
   1b2d4:	ldr	lr, [ip, #32]
   1b2d8:	cmp	lr, #0
   1b2dc:	str	lr, [sp, #40]	; 0x28
   1b2e0:	beq	1b344 <__assert_fail@plt+0x9d40>
   1b2e4:	ldr	ip, [ip, #36]	; 0x24
   1b2e8:	cmp	ip, #0
   1b2ec:	str	ip, [sp, #44]	; 0x2c
   1b2f0:	movne	lr, #10
   1b2f4:	moveq	lr, #9
   1b2f8:	add	ip, sp, #8
   1b2fc:	stm	sp, {ip, lr}
   1b300:	bl	1ae1c <__assert_fail@plt+0x9818>
   1b304:	add	sp, sp, #52	; 0x34
   1b308:	pop	{pc}		; (ldr pc, [sp], #4)
   1b30c:	mov	lr, #1
   1b310:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b314:	mov	lr, #2
   1b318:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b31c:	mov	lr, #3
   1b320:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b324:	mov	lr, #4
   1b328:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b32c:	mov	lr, #5
   1b330:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b334:	mov	lr, #6
   1b338:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b33c:	mov	lr, #7
   1b340:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b344:	mov	lr, #8
   1b348:	b	1b2f8 <__assert_fail@plt+0x9cf4>
   1b34c:	push	{r3}		; (str r3, [sp, #-4]!)
   1b350:	push	{lr}		; (str lr, [sp, #-4]!)
   1b354:	sub	sp, sp, #56	; 0x38
   1b358:	ldr	ip, [sp, #64]	; 0x40
   1b35c:	add	r3, sp, #64	; 0x40
   1b360:	str	r3, [sp, #12]
   1b364:	cmp	ip, #0
   1b368:	str	ip, [sp, #16]
   1b36c:	beq	1b404 <__assert_fail@plt+0x9e00>
   1b370:	ldr	ip, [sp, #68]	; 0x44
   1b374:	cmp	ip, #0
   1b378:	str	ip, [sp, #20]
   1b37c:	beq	1b428 <__assert_fail@plt+0x9e24>
   1b380:	ldr	ip, [sp, #72]	; 0x48
   1b384:	cmp	ip, #0
   1b388:	str	ip, [sp, #24]
   1b38c:	beq	1b430 <__assert_fail@plt+0x9e2c>
   1b390:	ldr	ip, [sp, #76]	; 0x4c
   1b394:	cmp	ip, #0
   1b398:	str	ip, [sp, #28]
   1b39c:	beq	1b438 <__assert_fail@plt+0x9e34>
   1b3a0:	ldr	ip, [sp, #80]	; 0x50
   1b3a4:	cmp	ip, #0
   1b3a8:	str	ip, [sp, #32]
   1b3ac:	beq	1b440 <__assert_fail@plt+0x9e3c>
   1b3b0:	ldr	ip, [sp, #84]	; 0x54
   1b3b4:	cmp	ip, #0
   1b3b8:	str	ip, [sp, #36]	; 0x24
   1b3bc:	beq	1b448 <__assert_fail@plt+0x9e44>
   1b3c0:	ldr	ip, [sp, #88]	; 0x58
   1b3c4:	cmp	ip, #0
   1b3c8:	str	ip, [sp, #40]	; 0x28
   1b3cc:	beq	1b450 <__assert_fail@plt+0x9e4c>
   1b3d0:	ldr	ip, [sp, #92]	; 0x5c
   1b3d4:	cmp	ip, #0
   1b3d8:	str	ip, [sp, #44]	; 0x2c
   1b3dc:	beq	1b458 <__assert_fail@plt+0x9e54>
   1b3e0:	ldr	ip, [sp, #96]	; 0x60
   1b3e4:	cmp	ip, #0
   1b3e8:	str	ip, [sp, #48]	; 0x30
   1b3ec:	beq	1b460 <__assert_fail@plt+0x9e5c>
   1b3f0:	ldr	r3, [sp, #100]	; 0x64
   1b3f4:	cmp	r3, #0
   1b3f8:	str	r3, [sp, #52]	; 0x34
   1b3fc:	movne	ip, #10
   1b400:	moveq	ip, #9
   1b404:	ldr	r3, [sp, #60]	; 0x3c
   1b408:	add	lr, sp, #16
   1b40c:	str	lr, [sp]
   1b410:	str	ip, [sp, #4]
   1b414:	bl	1ae1c <__assert_fail@plt+0x9818>
   1b418:	add	sp, sp, #56	; 0x38
   1b41c:	pop	{lr}		; (ldr lr, [sp], #4)
   1b420:	add	sp, sp, #4
   1b424:	bx	lr
   1b428:	mov	ip, #1
   1b42c:	b	1b404 <__assert_fail@plt+0x9e00>
   1b430:	mov	ip, #2
   1b434:	b	1b404 <__assert_fail@plt+0x9e00>
   1b438:	mov	ip, #3
   1b43c:	b	1b404 <__assert_fail@plt+0x9e00>
   1b440:	mov	ip, #4
   1b444:	b	1b404 <__assert_fail@plt+0x9e00>
   1b448:	mov	ip, #5
   1b44c:	b	1b404 <__assert_fail@plt+0x9e00>
   1b450:	mov	ip, #6
   1b454:	b	1b404 <__assert_fail@plt+0x9e00>
   1b458:	mov	ip, #7
   1b45c:	b	1b404 <__assert_fail@plt+0x9e00>
   1b460:	mov	ip, #8
   1b464:	b	1b404 <__assert_fail@plt+0x9e00>
   1b468:	movw	r3, #61892	; 0xf1c4
   1b46c:	movt	r3, #2
   1b470:	str	r4, [sp, #-8]!
   1b474:	mov	r0, #10
   1b478:	ldr	r1, [r3]
   1b47c:	str	lr, [sp, #4]
   1b480:	bl	112e0 <fputc_unlocked@plt>
   1b484:	mov	r2, #5
   1b488:	movw	r1, #57244	; 0xdf9c
   1b48c:	movt	r1, #1
   1b490:	mov	r0, #0
   1b494:	bl	112f8 <dcgettext@plt>
   1b498:	mov	r1, r0
   1b49c:	movw	r2, #57264	; 0xdfb0
   1b4a0:	movt	r2, #1
   1b4a4:	mov	r0, #1
   1b4a8:	bl	114b4 <__printf_chk@plt>
   1b4ac:	mov	r2, #5
   1b4b0:	movw	r1, #57288	; 0xdfc8
   1b4b4:	movt	r1, #1
   1b4b8:	mov	r0, #0
   1b4bc:	bl	112f8 <dcgettext@plt>
   1b4c0:	mov	r1, r0
   1b4c4:	movw	r3, #54684	; 0xd59c
   1b4c8:	movt	r3, #1
   1b4cc:	movw	r2, #54724	; 0xd5c4
   1b4d0:	movt	r2, #1
   1b4d4:	mov	r0, #1
   1b4d8:	bl	114b4 <__printf_chk@plt>
   1b4dc:	mov	r2, #5
   1b4e0:	movw	r1, #57308	; 0xdfdc
   1b4e4:	movt	r1, #1
   1b4e8:	mov	r0, #0
   1b4ec:	bl	112f8 <dcgettext@plt>
   1b4f0:	mov	r1, r0
   1b4f4:	movw	r2, #57348	; 0xe004
   1b4f8:	movt	r2, #1
   1b4fc:	mov	r0, #1
   1b500:	ldr	r4, [sp]
   1b504:	ldr	lr, [sp, #4]
   1b508:	add	sp, sp, #8
   1b50c:	b	114b4 <__printf_chk@plt>
   1b510:	strd	r4, [sp, #-16]!
   1b514:	mov	r4, r0
   1b518:	mov	r5, r2
   1b51c:	str	r6, [sp, #8]
   1b520:	mov	r6, r1
   1b524:	str	lr, [sp, #12]
   1b528:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b52c:	cmp	r0, #0
   1b530:	beq	1b544 <__assert_fail@plt+0x9f40>
   1b534:	ldrd	r4, [sp]
   1b538:	ldr	r6, [sp, #8]
   1b53c:	add	sp, sp, #12
   1b540:	pop	{pc}		; (ldr pc, [sp], #4)
   1b544:	cmp	r4, #0
   1b548:	beq	1b558 <__assert_fail@plt+0x9f54>
   1b54c:	cmp	r6, #0
   1b550:	cmpne	r5, #0
   1b554:	beq	1b534 <__assert_fail@plt+0x9f30>
   1b558:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b55c:	str	r4, [sp, #-8]!
   1b560:	str	lr, [sp, #4]
   1b564:	bl	1bc5c <__assert_fail@plt+0xa658>
   1b568:	cmp	r0, #0
   1b56c:	beq	1b57c <__assert_fail@plt+0x9f78>
   1b570:	ldr	r4, [sp]
   1b574:	add	sp, sp, #4
   1b578:	pop	{pc}		; (ldr pc, [sp], #4)
   1b57c:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b580:	str	r4, [sp, #-8]!
   1b584:	str	lr, [sp, #4]
   1b588:	bl	1bc5c <__assert_fail@plt+0xa658>
   1b58c:	cmp	r0, #0
   1b590:	beq	1b5a0 <__assert_fail@plt+0x9f9c>
   1b594:	ldr	r4, [sp]
   1b598:	add	sp, sp, #4
   1b59c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5a0:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b5a4:	str	r4, [sp, #-8]!
   1b5a8:	str	lr, [sp, #4]
   1b5ac:	bl	1bc5c <__assert_fail@plt+0xa658>
   1b5b0:	cmp	r0, #0
   1b5b4:	beq	1b5c4 <__assert_fail@plt+0x9fc0>
   1b5b8:	ldr	r4, [sp]
   1b5bc:	add	sp, sp, #4
   1b5c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5c4:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b5c8:	strd	r4, [sp, #-16]!
   1b5cc:	mov	r5, r0
   1b5d0:	mov	r4, r1
   1b5d4:	str	r6, [sp, #8]
   1b5d8:	str	lr, [sp, #12]
   1b5dc:	bl	1bc98 <__assert_fail@plt+0xa694>
   1b5e0:	cmp	r0, #0
   1b5e4:	beq	1b5f8 <__assert_fail@plt+0x9ff4>
   1b5e8:	ldrd	r4, [sp]
   1b5ec:	ldr	r6, [sp, #8]
   1b5f0:	add	sp, sp, #12
   1b5f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5f8:	adds	r4, r4, #0
   1b5fc:	movne	r4, #1
   1b600:	cmp	r5, #0
   1b604:	moveq	r4, #1
   1b608:	cmp	r4, #0
   1b60c:	beq	1b5e8 <__assert_fail@plt+0x9fe4>
   1b610:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b614:	cmp	r1, #0
   1b618:	orreq	r1, r1, #1
   1b61c:	str	r4, [sp, #-8]!
   1b620:	str	lr, [sp, #4]
   1b624:	bl	1bc98 <__assert_fail@plt+0xa694>
   1b628:	cmp	r0, #0
   1b62c:	beq	1b63c <__assert_fail@plt+0xa038>
   1b630:	ldr	r4, [sp]
   1b634:	add	sp, sp, #4
   1b638:	pop	{pc}		; (ldr pc, [sp], #4)
   1b63c:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b640:	strd	r4, [sp, #-16]!
   1b644:	mov	r4, r0
   1b648:	mov	r5, r2
   1b64c:	str	r6, [sp, #8]
   1b650:	mov	r6, r1
   1b654:	str	lr, [sp, #12]
   1b658:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b65c:	cmp	r0, #0
   1b660:	beq	1b674 <__assert_fail@plt+0xa070>
   1b664:	ldrd	r4, [sp]
   1b668:	ldr	r6, [sp, #8]
   1b66c:	add	sp, sp, #12
   1b670:	pop	{pc}		; (ldr pc, [sp], #4)
   1b674:	cmp	r4, #0
   1b678:	beq	1b688 <__assert_fail@plt+0xa084>
   1b67c:	cmp	r6, #0
   1b680:	cmpne	r5, #0
   1b684:	beq	1b664 <__assert_fail@plt+0xa060>
   1b688:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b68c:	cmp	r2, #0
   1b690:	cmpne	r1, #0
   1b694:	str	r4, [sp, #-8]!
   1b698:	moveq	r2, #1
   1b69c:	str	lr, [sp, #4]
   1b6a0:	moveq	r1, r2
   1b6a4:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b6a8:	cmp	r0, #0
   1b6ac:	beq	1b6bc <__assert_fail@plt+0xa0b8>
   1b6b0:	ldr	r4, [sp]
   1b6b4:	add	sp, sp, #4
   1b6b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6bc:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b6c0:	mov	r2, r1
   1b6c4:	mov	r1, r0
   1b6c8:	str	r4, [sp, #-8]!
   1b6cc:	mov	r0, #0
   1b6d0:	str	lr, [sp, #4]
   1b6d4:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b6d8:	cmp	r0, #0
   1b6dc:	beq	1b6ec <__assert_fail@plt+0xa0e8>
   1b6e0:	ldr	r4, [sp]
   1b6e4:	add	sp, sp, #4
   1b6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6ec:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b6f0:	cmp	r1, #0
   1b6f4:	cmpne	r0, #0
   1b6f8:	str	r4, [sp, #-8]!
   1b6fc:	moveq	r2, #1
   1b700:	movne	r2, r1
   1b704:	str	lr, [sp, #4]
   1b708:	movne	r1, r0
   1b70c:	moveq	r1, r2
   1b710:	mov	r0, #0
   1b714:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b718:	cmp	r0, #0
   1b71c:	beq	1b72c <__assert_fail@plt+0xa128>
   1b720:	ldr	r4, [sp]
   1b724:	add	sp, sp, #4
   1b728:	pop	{pc}		; (ldr pc, [sp], #4)
   1b72c:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b730:	cmp	r0, #0
   1b734:	strd	r4, [sp, #-16]!
   1b738:	mov	r5, r1
   1b73c:	ldr	r4, [r1]
   1b740:	str	r6, [sp, #8]
   1b744:	str	lr, [sp, #12]
   1b748:	beq	1b790 <__assert_fail@plt+0xa18c>
   1b74c:	lsr	r3, r4, #1
   1b750:	add	r3, r3, #1
   1b754:	adds	r4, r4, r3
   1b758:	bcs	1b78c <__assert_fail@plt+0xa188>
   1b75c:	mov	r2, #1
   1b760:	mov	r1, r4
   1b764:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b768:	cmp	r0, #0
   1b76c:	beq	1b784 <__assert_fail@plt+0xa180>
   1b770:	ldr	r6, [sp, #8]
   1b774:	str	r4, [r5]
   1b778:	ldrd	r4, [sp]
   1b77c:	add	sp, sp, #12
   1b780:	pop	{pc}		; (ldr pc, [sp], #4)
   1b784:	cmp	r4, #0
   1b788:	beq	1b770 <__assert_fail@plt+0xa16c>
   1b78c:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b790:	cmp	r4, #0
   1b794:	mov	r2, #1
   1b798:	moveq	r4, #64	; 0x40
   1b79c:	mov	r1, r4
   1b7a0:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b7a4:	cmp	r0, #0
   1b7a8:	bne	1b770 <__assert_fail@plt+0xa16c>
   1b7ac:	b	1b78c <__assert_fail@plt+0xa188>
   1b7b0:	cmp	r0, #0
   1b7b4:	strd	r4, [sp, #-16]!
   1b7b8:	mov	r5, r1
   1b7bc:	ldr	r4, [r1]
   1b7c0:	str	r6, [sp, #8]
   1b7c4:	mov	r6, r2
   1b7c8:	str	lr, [sp, #12]
   1b7cc:	beq	1b814 <__assert_fail@plt+0xa210>
   1b7d0:	lsr	r3, r4, #1
   1b7d4:	add	r3, r3, #1
   1b7d8:	adds	r4, r4, r3
   1b7dc:	bcs	1b810 <__assert_fail@plt+0xa20c>
   1b7e0:	mov	r1, r4
   1b7e4:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b7e8:	cmp	r0, #0
   1b7ec:	beq	1b804 <__assert_fail@plt+0xa200>
   1b7f0:	ldr	r6, [sp, #8]
   1b7f4:	str	r4, [r5]
   1b7f8:	ldrd	r4, [sp]
   1b7fc:	add	sp, sp, #12
   1b800:	pop	{pc}		; (ldr pc, [sp], #4)
   1b804:	cmp	r4, #0
   1b808:	cmpne	r6, #0
   1b80c:	beq	1b7f0 <__assert_fail@plt+0xa1ec>
   1b810:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b814:	cmp	r4, #0
   1b818:	bne	1b82c <__assert_fail@plt+0xa228>
   1b81c:	mov	r4, #64	; 0x40
   1b820:	udiv	r4, r4, r2
   1b824:	cmp	r2, #64	; 0x40
   1b828:	addhi	r4, r4, #1
   1b82c:	mov	r2, r6
   1b830:	mov	r1, r4
   1b834:	mov	r0, #0
   1b838:	bl	1c56c <__assert_fail@plt+0xaf68>
   1b83c:	cmp	r0, #0
   1b840:	bne	1b7f0 <__assert_fail@plt+0xa1ec>
   1b844:	b	1b810 <__assert_fail@plt+0xa20c>
   1b848:	ldr	ip, [r1]
   1b84c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b850:	strd	r6, [sp, #8]
   1b854:	mov	r7, r1
   1b858:	mov	r6, r0
   1b85c:	str	r8, [sp, #16]
   1b860:	mvn	r8, r3
   1b864:	lsr	r8, r8, #31
   1b868:	str	lr, [sp, #20]
   1b86c:	asr	r1, ip, #1
   1b870:	ldr	lr, [sp, #24]
   1b874:	adds	r4, ip, r1
   1b878:	mvnvs	r4, #-2147483648	; 0x80000000
   1b87c:	cmp	r3, r4
   1b880:	movge	r1, #0
   1b884:	andlt	r1, r8, #1
   1b888:	cmp	r1, #0
   1b88c:	movne	r4, r3
   1b890:	smull	r0, r1, r4, lr
   1b894:	cmp	r1, r0, asr #31
   1b898:	bne	1b948 <__assert_fail@plt+0xa344>
   1b89c:	cmp	r0, #63	; 0x3f
   1b8a0:	mov	r5, r0
   1b8a4:	ble	1b914 <__assert_fail@plt+0xa310>
   1b8a8:	cmp	r6, #0
   1b8ac:	sub	r1, r4, ip
   1b8b0:	streq	r6, [r7]
   1b8b4:	cmp	r1, r2
   1b8b8:	bge	1b8e8 <__assert_fail@plt+0xa2e4>
   1b8bc:	adds	r4, ip, r2
   1b8c0:	bvs	1b944 <__assert_fail@plt+0xa340>
   1b8c4:	cmp	r4, r3
   1b8c8:	movle	r3, #0
   1b8cc:	andgt	r3, r8, #1
   1b8d0:	cmp	r3, #0
   1b8d4:	bne	1b944 <__assert_fail@plt+0xa340>
   1b8d8:	smull	r0, r1, r4, lr
   1b8dc:	cmp	r1, r0, asr #31
   1b8e0:	mov	r5, r0
   1b8e4:	bne	1b944 <__assert_fail@plt+0xa340>
   1b8e8:	mov	r1, r5
   1b8ec:	mov	r0, r6
   1b8f0:	bl	1bc98 <__assert_fail@plt+0xa694>
   1b8f4:	cmp	r0, #0
   1b8f8:	beq	1b928 <__assert_fail@plt+0xa324>
   1b8fc:	ldr	r8, [sp, #16]
   1b900:	str	r4, [r7]
   1b904:	ldrd	r4, [sp]
   1b908:	ldrd	r6, [sp, #8]
   1b90c:	add	sp, sp, #20
   1b910:	pop	{pc}		; (ldr pc, [sp], #4)
   1b914:	mov	r0, #64	; 0x40
   1b918:	sdiv	r4, r0, lr
   1b91c:	mls	r5, lr, r4, r0
   1b920:	sub	r5, r0, r5
   1b924:	b	1b8a8 <__assert_fail@plt+0xa2a4>
   1b928:	adds	r5, r5, #0
   1b92c:	movne	r5, #1
   1b930:	cmp	r6, #0
   1b934:	movne	r6, r5
   1b938:	moveq	r6, #1
   1b93c:	cmp	r6, #0
   1b940:	beq	1b8fc <__assert_fail@plt+0xa2f8>
   1b944:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b948:	mvn	r0, #-2147483648	; 0x80000000
   1b94c:	b	1b918 <__assert_fail@plt+0xa314>
   1b950:	mov	r1, #1
   1b954:	str	r4, [sp, #-8]!
   1b958:	str	lr, [sp, #4]
   1b95c:	bl	1bbe8 <__assert_fail@plt+0xa5e4>
   1b960:	cmp	r0, #0
   1b964:	beq	1b974 <__assert_fail@plt+0xa370>
   1b968:	ldr	r4, [sp]
   1b96c:	add	sp, sp, #4
   1b970:	pop	{pc}		; (ldr pc, [sp], #4)
   1b974:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b978:	mov	r1, #1
   1b97c:	str	r4, [sp, #-8]!
   1b980:	str	lr, [sp, #4]
   1b984:	bl	1bbe8 <__assert_fail@plt+0xa5e4>
   1b988:	cmp	r0, #0
   1b98c:	beq	1b99c <__assert_fail@plt+0xa398>
   1b990:	ldr	r4, [sp]
   1b994:	add	sp, sp, #4
   1b998:	pop	{pc}		; (ldr pc, [sp], #4)
   1b99c:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b9a0:	str	r4, [sp, #-8]!
   1b9a4:	str	lr, [sp, #4]
   1b9a8:	bl	1bbe8 <__assert_fail@plt+0xa5e4>
   1b9ac:	cmp	r0, #0
   1b9b0:	beq	1b9c0 <__assert_fail@plt+0xa3bc>
   1b9b4:	ldr	r4, [sp]
   1b9b8:	add	sp, sp, #4
   1b9bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9c0:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b9c4:	str	r4, [sp, #-8]!
   1b9c8:	str	lr, [sp, #4]
   1b9cc:	bl	1bbe8 <__assert_fail@plt+0xa5e4>
   1b9d0:	cmp	r0, #0
   1b9d4:	beq	1b9e4 <__assert_fail@plt+0xa3e0>
   1b9d8:	ldr	r4, [sp]
   1b9dc:	add	sp, sp, #4
   1b9e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9e4:	bl	1bb14 <__assert_fail@plt+0xa510>
   1b9e8:	strd	r4, [sp, #-16]!
   1b9ec:	mov	r4, r1
   1b9f0:	str	r6, [sp, #8]
   1b9f4:	mov	r6, r0
   1b9f8:	mov	r0, r1
   1b9fc:	str	lr, [sp, #12]
   1ba00:	bl	1bc5c <__assert_fail@plt+0xa658>
   1ba04:	subs	r5, r0, #0
   1ba08:	beq	1ba2c <__assert_fail@plt+0xa428>
   1ba0c:	mov	r2, r4
   1ba10:	mov	r1, r6
   1ba14:	bl	112b0 <memcpy@plt>
   1ba18:	mov	r0, r5
   1ba1c:	ldrd	r4, [sp]
   1ba20:	ldr	r6, [sp, #8]
   1ba24:	add	sp, sp, #12
   1ba28:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba2c:	bl	1bb14 <__assert_fail@plt+0xa510>
   1ba30:	strd	r4, [sp, #-16]!
   1ba34:	mov	r4, r1
   1ba38:	str	r6, [sp, #8]
   1ba3c:	mov	r6, r0
   1ba40:	mov	r0, r1
   1ba44:	str	lr, [sp, #12]
   1ba48:	bl	1bc5c <__assert_fail@plt+0xa658>
   1ba4c:	subs	r5, r0, #0
   1ba50:	beq	1ba74 <__assert_fail@plt+0xa470>
   1ba54:	mov	r2, r4
   1ba58:	mov	r1, r6
   1ba5c:	bl	112b0 <memcpy@plt>
   1ba60:	mov	r0, r5
   1ba64:	ldrd	r4, [sp]
   1ba68:	ldr	r6, [sp, #8]
   1ba6c:	add	sp, sp, #12
   1ba70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba74:	bl	1bb14 <__assert_fail@plt+0xa510>
   1ba78:	strd	r4, [sp, #-16]!
   1ba7c:	mov	r4, r1
   1ba80:	str	r6, [sp, #8]
   1ba84:	mov	r6, r0
   1ba88:	add	r0, r1, #1
   1ba8c:	str	lr, [sp, #12]
   1ba90:	bl	1bc5c <__assert_fail@plt+0xa658>
   1ba94:	subs	r5, r0, #0
   1ba98:	beq	1bac4 <__assert_fail@plt+0xa4c0>
   1ba9c:	mov	r3, #0
   1baa0:	mov	r1, r6
   1baa4:	mov	r2, r4
   1baa8:	strb	r3, [r5, r4]
   1baac:	bl	112b0 <memcpy@plt>
   1bab0:	mov	r0, r5
   1bab4:	ldrd	r4, [sp]
   1bab8:	ldr	r6, [sp, #8]
   1babc:	add	sp, sp, #12
   1bac0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bac4:	bl	1bb14 <__assert_fail@plt+0xa510>
   1bac8:	strd	r4, [sp, #-16]!
   1bacc:	str	r6, [sp, #8]
   1bad0:	mov	r6, r0
   1bad4:	str	lr, [sp, #12]
   1bad8:	bl	11460 <strlen@plt>
   1badc:	add	r4, r0, #1
   1bae0:	mov	r0, r4
   1bae4:	bl	1bc5c <__assert_fail@plt+0xa658>
   1bae8:	subs	r5, r0, #0
   1baec:	beq	1bb10 <__assert_fail@plt+0xa50c>
   1baf0:	mov	r2, r4
   1baf4:	mov	r1, r6
   1baf8:	bl	112b0 <memcpy@plt>
   1bafc:	mov	r0, r5
   1bb00:	ldrd	r4, [sp]
   1bb04:	ldr	r6, [sp, #8]
   1bb08:	add	sp, sp, #12
   1bb0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb10:	bl	1bb14 <__assert_fail@plt+0xa510>
   1bb14:	movw	r3, #61800	; 0xf168
   1bb18:	movt	r3, #2
   1bb1c:	str	r4, [sp, #-8]!
   1bb20:	ldr	r4, [r3]
   1bb24:	mov	r2, #5
   1bb28:	movw	r1, #57428	; 0xe054
   1bb2c:	movt	r1, #1
   1bb30:	mov	r0, #0
   1bb34:	str	lr, [sp, #4]
   1bb38:	bl	112f8 <dcgettext@plt>
   1bb3c:	mov	r3, r0
   1bb40:	movw	r2, #56152	; 0xdb58
   1bb44:	movt	r2, #1
   1bb48:	mov	r1, #0
   1bb4c:	mov	r0, r4
   1bb50:	bl	113ac <error@plt>
   1bb54:	bl	115c8 <abort@plt>
   1bb58:	orr	r1, r1, #512	; 0x200
   1bb5c:	str	r4, [sp, #-8]!
   1bb60:	str	lr, [sp, #4]
   1bb64:	bl	13f1c <__assert_fail@plt+0x2918>
   1bb68:	cmp	r0, #0
   1bb6c:	beq	1bb7c <__assert_fail@plt+0xa578>
   1bb70:	ldr	r4, [sp]
   1bb74:	add	sp, sp, #4
   1bb78:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb7c:	bl	11484 <__errno_location@plt>
   1bb80:	ldr	r3, [r0]
   1bb84:	cmp	r3, #22
   1bb88:	beq	1bb90 <__assert_fail@plt+0xa58c>
   1bb8c:	bl	1bb14 <__assert_fail@plt+0xa510>
   1bb90:	movw	r3, #57448	; 0xe068
   1bb94:	movt	r3, #1
   1bb98:	movw	r1, #57460	; 0xe074
   1bb9c:	movt	r1, #1
   1bba0:	movw	r0, #57472	; 0xe080
   1bba4:	movt	r0, #1
   1bba8:	mov	r2, #41	; 0x29
   1bbac:	bl	11604 <__assert_fail@plt>
   1bbb0:	ldr	r3, [r0, #48]	; 0x30
   1bbb4:	and	r3, r3, #17
   1bbb8:	cmp	r3, #16
   1bbbc:	beq	1bbe0 <__assert_fail@plt+0xa5dc>
   1bbc0:	cmp	r3, #17
   1bbc4:	beq	1bbd0 <__assert_fail@plt+0xa5cc>
   1bbc8:	mov	r0, #0
   1bbcc:	bx	lr
   1bbd0:	ldr	r0, [r1, #48]	; 0x30
   1bbd4:	adds	r0, r0, #0
   1bbd8:	movne	r0, #1
   1bbdc:	bx	lr
   1bbe0:	mov	r0, #1
   1bbe4:	bx	lr
   1bbe8:	cmp	r1, #0
   1bbec:	cmpne	r0, #0
   1bbf0:	beq	1bc3c <__assert_fail@plt+0xa638>
   1bbf4:	strd	r4, [sp, #-16]!
   1bbf8:	umull	r4, r5, r0, r1
   1bbfc:	str	r6, [sp, #8]
   1bc00:	str	lr, [sp, #12]
   1bc04:	adds	r3, r5, #0
   1bc08:	movne	r3, #1
   1bc0c:	cmp	r4, #0
   1bc10:	blt	1bc1c <__assert_fail@plt+0xa618>
   1bc14:	cmp	r3, #0
   1bc18:	beq	1bc48 <__assert_fail@plt+0xa644>
   1bc1c:	bl	11484 <__errno_location@plt>
   1bc20:	mov	r3, #12
   1bc24:	ldrd	r4, [sp]
   1bc28:	ldr	r6, [sp, #8]
   1bc2c:	add	sp, sp, #12
   1bc30:	str	r3, [r0]
   1bc34:	mov	r0, #0
   1bc38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc3c:	mov	r1, #1
   1bc40:	mov	r0, r1
   1bc44:	b	11238 <calloc@plt>
   1bc48:	ldrd	r4, [sp]
   1bc4c:	ldr	r6, [sp, #8]
   1bc50:	ldr	lr, [sp, #12]
   1bc54:	add	sp, sp, #16
   1bc58:	b	11238 <calloc@plt>
   1bc5c:	cmp	r0, #0
   1bc60:	beq	1bc6c <__assert_fail@plt+0xa668>
   1bc64:	blt	1bc74 <__assert_fail@plt+0xa670>
   1bc68:	b	113dc <malloc@plt>
   1bc6c:	mov	r0, #1
   1bc70:	b	113dc <malloc@plt>
   1bc74:	str	r4, [sp, #-8]!
   1bc78:	str	lr, [sp, #4]
   1bc7c:	bl	11484 <__errno_location@plt>
   1bc80:	mov	r3, #12
   1bc84:	ldr	r4, [sp]
   1bc88:	add	sp, sp, #4
   1bc8c:	str	r3, [r0]
   1bc90:	mov	r0, #0
   1bc94:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc98:	cmp	r0, #0
   1bc9c:	beq	1bcc4 <__assert_fail@plt+0xa6c0>
   1bca0:	cmp	r1, #0
   1bca4:	str	r4, [sp, #-8]!
   1bca8:	str	lr, [sp, #4]
   1bcac:	beq	1bccc <__assert_fail@plt+0xa6c8>
   1bcb0:	blt	1bce0 <__assert_fail@plt+0xa6dc>
   1bcb4:	ldr	r4, [sp]
   1bcb8:	ldr	lr, [sp, #4]
   1bcbc:	add	sp, sp, #8
   1bcc0:	b	11310 <realloc@plt>
   1bcc4:	mov	r0, r1
   1bcc8:	b	1bc5c <__assert_fail@plt+0xa658>
   1bccc:	bl	1c300 <__assert_fail@plt+0xacfc>
   1bcd0:	ldr	r4, [sp]
   1bcd4:	add	sp, sp, #4
   1bcd8:	mov	r0, #0
   1bcdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bce0:	bl	11484 <__errno_location@plt>
   1bce4:	mov	r3, #12
   1bce8:	str	r3, [r0]
   1bcec:	b	1bcd0 <__assert_fail@plt+0xa6cc>
   1bcf0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1bcf4:	mov	r5, r0
   1bcf8:	strd	r6, [sp, #8]
   1bcfc:	strd	r8, [sp, #16]
   1bd00:	str	lr, [sp, #24]
   1bd04:	sub	sp, sp, #44	; 0x2c
   1bd08:	ldrb	r3, [r2]
   1bd0c:	cmp	r3, #0
   1bd10:	strbeq	r3, [r5]
   1bd14:	beq	1bd7c <__assert_fail@plt+0xa778>
   1bd18:	movw	r7, #62272	; 0xf340
   1bd1c:	movt	r7, #2
   1bd20:	ldr	r4, [r7]
   1bd24:	mov	r6, r2
   1bd28:	mov	r8, r1
   1bd2c:	cmp	r4, #0
   1bd30:	beq	1bda8 <__assert_fail@plt+0xa7a4>
   1bd34:	cmp	r4, #0
   1bd38:	blt	1bda0 <__assert_fail@plt+0xa79c>
   1bd3c:	mov	r0, r6
   1bd40:	bl	11460 <strlen@plt>
   1bd44:	add	r0, r0, #27
   1bd48:	cmp	r0, #4032	; 0xfc0
   1bd4c:	bhi	1bd94 <__assert_fail@plt+0xa790>
   1bd50:	mvn	r2, #0
   1bd54:	mov	r1, #1
   1bd58:	str	r8, [sp]
   1bd5c:	movw	r3, #57528	; 0xe0b8
   1bd60:	movt	r3, #1
   1bd64:	mov	r0, r5
   1bd68:	bl	11490 <__sprintf_chk@plt>
   1bd6c:	add	r0, r5, r0
   1bd70:	mov	r1, r6
   1bd74:	bl	11388 <strcpy@plt>
   1bd78:	mov	r0, r5
   1bd7c:	add	sp, sp, #44	; 0x2c
   1bd80:	ldrd	r4, [sp]
   1bd84:	ldrd	r6, [sp, #8]
   1bd88:	ldrd	r8, [sp, #16]
   1bd8c:	add	sp, sp, #24
   1bd90:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd94:	bl	1bc5c <__assert_fail@plt+0xa658>
   1bd98:	subs	r5, r0, #0
   1bd9c:	bne	1bd50 <__assert_fail@plt+0xa74c>
   1bda0:	mov	r0, #0
   1bda4:	b	1bd7c <__assert_fail@plt+0xa778>
   1bda8:	mov	r1, #18688	; 0x4900
   1bdac:	movt	r1, #8
   1bdb0:	movw	r0, #57488	; 0xe090
   1bdb4:	movt	r0, #1
   1bdb8:	bl	113c4 <open64@plt>
   1bdbc:	subs	r9, r0, #0
   1bdc0:	bge	1bdd4 <__assert_fail@plt+0xa7d0>
   1bdc4:	mvn	r3, #0
   1bdc8:	mov	r0, r4
   1bdcc:	str	r3, [r7]
   1bdd0:	b	1bd7c <__assert_fail@plt+0xa778>
   1bdd4:	mov	r2, #32
   1bdd8:	mov	r1, #1
   1bddc:	str	r9, [sp]
   1bde0:	movw	r3, #57504	; 0xe0a0
   1bde4:	movt	r3, #1
   1bde8:	add	r0, sp, #8
   1bdec:	bl	11490 <__sprintf_chk@plt>
   1bdf0:	mov	r1, r4
   1bdf4:	add	r0, sp, #8
   1bdf8:	bl	114f0 <access@plt>
   1bdfc:	cmp	r0, #0
   1be00:	mov	r0, r9
   1be04:	mvnne	r3, #0
   1be08:	moveq	r3, #1
   1be0c:	str	r3, [r7]
   1be10:	bl	115d4 <close@plt>
   1be14:	ldr	r4, [r7]
   1be18:	b	1bd34 <__assert_fail@plt+0xa730>
   1be1c:	strd	r4, [sp, #-16]!
   1be20:	mov	r4, r0
   1be24:	str	r6, [sp, #8]
   1be28:	str	lr, [sp, #12]
   1be2c:	bl	11394 <__fpending@plt>
   1be30:	ldr	r5, [r4]
   1be34:	mov	r6, r0
   1be38:	mov	r0, r4
   1be3c:	bl	1bfc4 <__assert_fail@plt+0xa9c0>
   1be40:	mov	r4, r0
   1be44:	and	r5, r5, #32
   1be48:	cmp	r5, #0
   1be4c:	bne	1be84 <__assert_fail@plt+0xa880>
   1be50:	cmp	r0, #0
   1be54:	beq	1be70 <__assert_fail@plt+0xa86c>
   1be58:	cmp	r6, #0
   1be5c:	bne	1be9c <__assert_fail@plt+0xa898>
   1be60:	bl	11484 <__errno_location@plt>
   1be64:	ldr	r4, [r0]
   1be68:	subs	r4, r4, #9
   1be6c:	mvnne	r4, #0
   1be70:	mov	r0, r4
   1be74:	ldrd	r4, [sp]
   1be78:	ldr	r6, [sp, #8]
   1be7c:	add	sp, sp, #12
   1be80:	pop	{pc}		; (ldr pc, [sp], #4)
   1be84:	cmp	r0, #0
   1be88:	bne	1be9c <__assert_fail@plt+0xa898>
   1be8c:	bl	11484 <__errno_location@plt>
   1be90:	str	r4, [r0]
   1be94:	mvn	r4, #0
   1be98:	b	1be70 <__assert_fail@plt+0xa86c>
   1be9c:	mvn	r4, #0
   1bea0:	b	1be70 <__assert_fail@plt+0xa86c>
   1bea4:	movw	r3, #62998	; 0xf616
   1bea8:	movt	r3, #149	; 0x95
   1beac:	strd	r4, [sp, #-8]!
   1beb0:	mov	r4, #0
   1beb4:	mov	r5, #0
   1beb8:	strd	r4, [r0, #16]
   1bebc:	str	r3, [r0, #24]
   1bec0:	ldrd	r4, [sp]
   1bec4:	add	sp, sp, #8
   1bec8:	bx	lr
   1becc:	ldr	r2, [r0, #24]
   1bed0:	movw	r3, #62998	; 0xf616
   1bed4:	movt	r3, #149	; 0x95
   1bed8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bedc:	strd	r6, [sp, #8]
   1bee0:	strd	r8, [sp, #16]
   1bee4:	strd	sl, [sp, #24]
   1bee8:	cmp	r2, r3
   1beec:	str	lr, [sp, #32]
   1bef0:	sub	sp, sp, #4
   1bef4:	bne	1bfa4 <__assert_fail@plt+0xa9a0>
   1bef8:	ldrd	r6, [r0, #16]
   1befc:	ldrd	sl, [r1, #96]	; 0x60
   1bf00:	orrs	r3, r6, r7
   1bf04:	beq	1bf58 <__assert_fail@plt+0xa954>
   1bf08:	ldrd	r2, [r0]
   1bf0c:	cmp	r3, fp
   1bf10:	cmpeq	r2, sl
   1bf14:	beq	1bf78 <__assert_fail@plt+0xa974>
   1bf18:	adds	r8, r6, #1
   1bf1c:	adc	r9, r7, #0
   1bf20:	and	r2, r6, r8
   1bf24:	and	r3, r7, r9
   1bf28:	orrs	r3, r2, r3
   1bf2c:	strd	r8, [r0, #16]
   1bf30:	movne	r1, #0
   1bf34:	beq	1bf94 <__assert_fail@plt+0xa990>
   1bf38:	mov	r0, r1
   1bf3c:	add	sp, sp, #4
   1bf40:	ldrd	r4, [sp]
   1bf44:	ldrd	r6, [sp, #8]
   1bf48:	ldrd	r8, [sp, #16]
   1bf4c:	ldrd	sl, [sp, #24]
   1bf50:	add	sp, sp, #32
   1bf54:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf58:	mov	r2, #1
   1bf5c:	mov	r3, #0
   1bf60:	strd	r2, [r0, #16]
   1bf64:	ldrd	r2, [r1]
   1bf68:	mov	r1, #0
   1bf6c:	strd	sl, [r0]
   1bf70:	strd	r2, [r0, #8]
   1bf74:	b	1bf38 <__assert_fail@plt+0xa934>
   1bf78:	ldrd	r4, [r1]
   1bf7c:	ldrd	r2, [r0, #8]
   1bf80:	cmp	r5, r3
   1bf84:	cmpeq	r4, r2
   1bf88:	bne	1bf18 <__assert_fail@plt+0xa914>
   1bf8c:	mov	r1, #1
   1bf90:	b	1bf38 <__assert_fail@plt+0xa934>
   1bf94:	orrs	r3, r8, r9
   1bf98:	bne	1bf64 <__assert_fail@plt+0xa960>
   1bf9c:	mov	r1, #1
   1bfa0:	b	1bf38 <__assert_fail@plt+0xa934>
   1bfa4:	movw	r3, #57548	; 0xe0cc
   1bfa8:	movt	r3, #1
   1bfac:	movw	r1, #57560	; 0xe0d8
   1bfb0:	movt	r1, #1
   1bfb4:	movw	r0, #57580	; 0xe0ec
   1bfb8:	movt	r0, #1
   1bfbc:	mov	r2, #60	; 0x3c
   1bfc0:	bl	11604 <__assert_fail@plt>
   1bfc4:	strd	r4, [sp, #-12]!
   1bfc8:	mov	r4, r0
   1bfcc:	str	lr, [sp, #8]
   1bfd0:	sub	sp, sp, #12
   1bfd4:	bl	114c0 <fileno@plt>
   1bfd8:	cmp	r0, #0
   1bfdc:	mov	r0, r4
   1bfe0:	blt	1c064 <__assert_fail@plt+0xaa60>
   1bfe4:	bl	113f4 <__freading@plt>
   1bfe8:	cmp	r0, #0
   1bfec:	bne	1c030 <__assert_fail@plt+0xaa2c>
   1bff0:	mov	r0, r4
   1bff4:	bl	1c2a0 <__assert_fail@plt+0xac9c>
   1bff8:	cmp	r0, #0
   1bffc:	beq	1c060 <__assert_fail@plt+0xaa5c>
   1c000:	bl	11484 <__errno_location@plt>
   1c004:	mov	r5, r0
   1c008:	mov	r0, r4
   1c00c:	ldr	r4, [r5]
   1c010:	bl	114fc <fclose@plt>
   1c014:	cmp	r4, #0
   1c018:	mvnne	r0, #0
   1c01c:	strne	r4, [r5]
   1c020:	add	sp, sp, #12
   1c024:	ldrd	r4, [sp]
   1c028:	add	sp, sp, #8
   1c02c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c030:	mov	r0, r4
   1c034:	bl	114c0 <fileno@plt>
   1c038:	mov	r1, #1
   1c03c:	mov	r2, #0
   1c040:	mov	r3, #0
   1c044:	str	r1, [sp]
   1c048:	bl	11370 <lseek64@plt>
   1c04c:	mvn	r3, #0
   1c050:	mvn	r2, #0
   1c054:	cmp	r1, r3
   1c058:	cmpeq	r0, r2
   1c05c:	bne	1bff0 <__assert_fail@plt+0xa9ec>
   1c060:	mov	r0, r4
   1c064:	add	sp, sp, #12
   1c068:	ldrd	r4, [sp]
   1c06c:	ldr	lr, [sp, #8]
   1c070:	add	sp, sp, #12
   1c074:	b	114fc <fclose@plt>
   1c078:	push	{r1, r2, r3}
   1c07c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c080:	strd	r6, [sp, #8]
   1c084:	str	lr, [sp, #16]
   1c088:	sub	sp, sp, #8
   1c08c:	ldr	r1, [sp, #28]
   1c090:	add	r2, sp, #32
   1c094:	str	r2, [sp, #4]
   1c098:	cmp	r1, #0
   1c09c:	beq	1c178 <__assert_fail@plt+0xab74>
   1c0a0:	movw	r3, #1030	; 0x406
   1c0a4:	mov	r6, r0
   1c0a8:	cmp	r1, r3
   1c0ac:	beq	1c188 <__assert_fail@plt+0xab84>
   1c0b0:	cmp	r1, #11
   1c0b4:	beq	1c130 <__assert_fail@plt+0xab2c>
   1c0b8:	ble	1c110 <__assert_fail@plt+0xab0c>
   1c0bc:	movw	r2, #1031	; 0x407
   1c0c0:	cmp	r1, r2
   1c0c4:	bgt	1c14c <__assert_fail@plt+0xab48>
   1c0c8:	cmp	r1, r3
   1c0cc:	bge	1c0dc <__assert_fail@plt+0xaad8>
   1c0d0:	movw	r3, #1025	; 0x401
   1c0d4:	cmp	r1, r3
   1c0d8:	beq	1c130 <__assert_fail@plt+0xab2c>
   1c0dc:	ldr	r3, [sp, #4]
   1c0e0:	mov	r0, r6
   1c0e4:	ldr	r2, [r3]
   1c0e8:	bl	11514 <fcntl64@plt>
   1c0ec:	mov	r4, r0
   1c0f0:	mov	r0, r4
   1c0f4:	add	sp, sp, #8
   1c0f8:	ldrd	r4, [sp]
   1c0fc:	ldrd	r6, [sp, #8]
   1c100:	ldr	lr, [sp, #16]
   1c104:	add	sp, sp, #20
   1c108:	add	sp, sp, #12
   1c10c:	bx	lr
   1c110:	cmp	r1, #4
   1c114:	beq	1c0dc <__assert_fail@plt+0xaad8>
   1c118:	bgt	1c140 <__assert_fail@plt+0xab3c>
   1c11c:	cmp	r1, #2
   1c120:	beq	1c0dc <__assert_fail@plt+0xaad8>
   1c124:	bgt	1c130 <__assert_fail@plt+0xab2c>
   1c128:	cmp	r1, #1
   1c12c:	bne	1c0dc <__assert_fail@plt+0xaad8>
   1c130:	mov	r0, r6
   1c134:	bl	11514 <fcntl64@plt>
   1c138:	mov	r4, r0
   1c13c:	b	1c0f0 <__assert_fail@plt+0xaaec>
   1c140:	cmp	r1, #9
   1c144:	bne	1c0dc <__assert_fail@plt+0xaad8>
   1c148:	b	1c130 <__assert_fail@plt+0xab2c>
   1c14c:	movw	r3, #1033	; 0x409
   1c150:	cmp	r1, r3
   1c154:	beq	1c0dc <__assert_fail@plt+0xaad8>
   1c158:	blt	1c130 <__assert_fail@plt+0xab2c>
   1c15c:	movw	r3, #1034	; 0x40a
   1c160:	cmp	r1, r3
   1c164:	bne	1c0dc <__assert_fail@plt+0xaad8>
   1c168:	mov	r0, r6
   1c16c:	bl	11514 <fcntl64@plt>
   1c170:	mov	r4, r0
   1c174:	b	1c0f0 <__assert_fail@plt+0xaaec>
   1c178:	ldr	r2, [sp, #32]
   1c17c:	bl	11514 <fcntl64@plt>
   1c180:	mov	r4, r0
   1c184:	b	1c0f0 <__assert_fail@plt+0xaaec>
   1c188:	movw	r5, #62276	; 0xf344
   1c18c:	movt	r5, #2
   1c190:	ldr	r7, [r2]
   1c194:	add	r2, sp, #36	; 0x24
   1c198:	ldr	r3, [r5]
   1c19c:	str	r2, [sp, #4]
   1c1a0:	mov	r2, r7
   1c1a4:	cmp	r3, #0
   1c1a8:	blt	1c1c4 <__assert_fail@plt+0xabc0>
   1c1ac:	bl	11514 <fcntl64@plt>
   1c1b0:	subs	r4, r0, #0
   1c1b4:	blt	1c22c <__assert_fail@plt+0xac28>
   1c1b8:	mov	r3, #1
   1c1bc:	str	r3, [r5]
   1c1c0:	b	1c0f0 <__assert_fail@plt+0xaaec>
   1c1c4:	mov	r1, #0
   1c1c8:	bl	11514 <fcntl64@plt>
   1c1cc:	subs	r4, r0, #0
   1c1d0:	blt	1c0f0 <__assert_fail@plt+0xaaec>
   1c1d4:	ldr	r3, [r5]
   1c1d8:	cmn	r3, #1
   1c1dc:	bne	1c0f0 <__assert_fail@plt+0xaaec>
   1c1e0:	mov	r1, #1
   1c1e4:	mov	r0, r4
   1c1e8:	bl	11514 <fcntl64@plt>
   1c1ec:	subs	r2, r0, #0
   1c1f0:	blt	1c20c <__assert_fail@plt+0xac08>
   1c1f4:	orr	r2, r2, #1
   1c1f8:	mov	r1, #2
   1c1fc:	mov	r0, r4
   1c200:	bl	11514 <fcntl64@plt>
   1c204:	cmn	r0, #1
   1c208:	bne	1c0f0 <__assert_fail@plt+0xaaec>
   1c20c:	bl	11484 <__errno_location@plt>
   1c210:	mov	r5, r0
   1c214:	mov	r0, r4
   1c218:	ldr	r6, [r5]
   1c21c:	mvn	r4, #0
   1c220:	bl	115d4 <close@plt>
   1c224:	str	r6, [r5]
   1c228:	b	1c0f0 <__assert_fail@plt+0xaaec>
   1c22c:	bl	11484 <__errno_location@plt>
   1c230:	ldr	r3, [r0]
   1c234:	cmp	r3, #22
   1c238:	bne	1c1b8 <__assert_fail@plt+0xabb4>
   1c23c:	mov	r2, r7
   1c240:	mov	r0, r6
   1c244:	mov	r1, #0
   1c248:	bl	11514 <fcntl64@plt>
   1c24c:	subs	r4, r0, #0
   1c250:	mvnge	r3, #0
   1c254:	strge	r3, [r5]
   1c258:	bge	1c1e0 <__assert_fail@plt+0xabdc>
   1c25c:	b	1c0f0 <__assert_fail@plt+0xaaec>
   1c260:	push	{r1, r2, r3}
   1c264:	push	{lr}		; (str lr, [sp, #-4]!)
   1c268:	sub	sp, sp, #8
   1c26c:	ldr	r1, [sp, #12]
   1c270:	ands	r2, r1, #64	; 0x40
   1c274:	bne	1c290 <__assert_fail@plt+0xac8c>
   1c278:	bl	113c4 <open64@plt>
   1c27c:	bl	1adc0 <__assert_fail@plt+0x97bc>
   1c280:	add	sp, sp, #8
   1c284:	pop	{lr}		; (ldr lr, [sp], #4)
   1c288:	add	sp, sp, #12
   1c28c:	bx	lr
   1c290:	add	r3, sp, #16
   1c294:	ldr	r2, [sp, #16]
   1c298:	str	r3, [sp, #4]
   1c29c:	b	1c278 <__assert_fail@plt+0xac74>
   1c2a0:	str	r4, [sp, #-8]!
   1c2a4:	subs	r4, r0, #0
   1c2a8:	str	lr, [sp, #4]
   1c2ac:	sub	sp, sp, #8
   1c2b0:	beq	1c2cc <__assert_fail@plt+0xacc8>
   1c2b4:	bl	113f4 <__freading@plt>
   1c2b8:	cmp	r0, #0
   1c2bc:	beq	1c2cc <__assert_fail@plt+0xacc8>
   1c2c0:	ldr	r3, [r4]
   1c2c4:	tst	r3, #256	; 0x100
   1c2c8:	bne	1c2e4 <__assert_fail@plt+0xace0>
   1c2cc:	mov	r0, r4
   1c2d0:	add	sp, sp, #8
   1c2d4:	ldr	r4, [sp]
   1c2d8:	ldr	lr, [sp, #4]
   1c2dc:	add	sp, sp, #8
   1c2e0:	b	11274 <fflush@plt>
   1c2e4:	mov	r1, #1
   1c2e8:	mov	r2, #0
   1c2ec:	mov	r3, #0
   1c2f0:	mov	r0, r4
   1c2f4:	str	r1, [sp]
   1c2f8:	bl	1c360 <__assert_fail@plt+0xad5c>
   1c2fc:	b	1c2cc <__assert_fail@plt+0xacc8>
   1c300:	strd	r4, [sp, #-12]!
   1c304:	mov	r5, r0
   1c308:	str	lr, [sp, #8]
   1c30c:	sub	sp, sp, #12
   1c310:	bl	11484 <__errno_location@plt>
   1c314:	mov	r4, r0
   1c318:	mov	r2, #0
   1c31c:	ldr	r3, [r4]
   1c320:	mov	r0, r5
   1c324:	str	r2, [r4]
   1c328:	str	r3, [sp]
   1c32c:	str	r3, [sp, #4]
   1c330:	bl	11298 <free@plt>
   1c334:	ldr	r3, [r4]
   1c338:	add	r2, sp, #8
   1c33c:	clz	r3, r3
   1c340:	lsr	r3, r3, #5
   1c344:	add	r3, r2, r3, lsl #2
   1c348:	ldr	r3, [r3, #-8]
   1c34c:	str	r3, [r4]
   1c350:	add	sp, sp, #12
   1c354:	ldrd	r4, [sp]
   1c358:	add	sp, sp, #8
   1c35c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c360:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c364:	mov	r4, r0
   1c368:	ldr	ip, [r0, #4]
   1c36c:	strd	r6, [sp, #8]
   1c370:	str	lr, [sp, #20]
   1c374:	ldr	lr, [r0, #8]
   1c378:	str	r8, [sp, #16]
   1c37c:	sub	sp, sp, #8
   1c380:	ldr	r5, [sp, #32]
   1c384:	cmp	lr, ip
   1c388:	beq	1c3b0 <__assert_fail@plt+0xadac>
   1c38c:	mov	r0, r4
   1c390:	str	r5, [sp, #32]
   1c394:	add	sp, sp, #8
   1c398:	ldrd	r4, [sp]
   1c39c:	ldrd	r6, [sp, #8]
   1c3a0:	ldr	r8, [sp, #16]
   1c3a4:	ldr	lr, [sp, #20]
   1c3a8:	add	sp, sp, #24
   1c3ac:	b	11508 <fseeko64@plt>
   1c3b0:	ldr	ip, [r0, #16]
   1c3b4:	ldr	lr, [r0, #20]
   1c3b8:	cmp	lr, ip
   1c3bc:	bne	1c38c <__assert_fail@plt+0xad88>
   1c3c0:	ldr	r8, [r0, #36]	; 0x24
   1c3c4:	cmp	r8, #0
   1c3c8:	bne	1c38c <__assert_fail@plt+0xad88>
   1c3cc:	mov	r6, r2
   1c3d0:	mov	r7, r3
   1c3d4:	bl	114c0 <fileno@plt>
   1c3d8:	mov	r2, r6
   1c3dc:	mov	r3, r7
   1c3e0:	str	r5, [sp]
   1c3e4:	bl	11370 <lseek64@plt>
   1c3e8:	mvn	r3, #0
   1c3ec:	mvn	r2, #0
   1c3f0:	cmp	r1, r3
   1c3f4:	cmpeq	r0, r2
   1c3f8:	beq	1c428 <__assert_fail@plt+0xae24>
   1c3fc:	ldr	r3, [r4]
   1c400:	strd	r0, [r4, #80]	; 0x50
   1c404:	bic	r3, r3, #16
   1c408:	str	r3, [r4]
   1c40c:	mov	r0, r8
   1c410:	add	sp, sp, #8
   1c414:	ldrd	r4, [sp]
   1c418:	ldrd	r6, [sp, #8]
   1c41c:	ldr	r8, [sp, #16]
   1c420:	add	sp, sp, #20
   1c424:	pop	{pc}		; (ldr pc, [sp], #4)
   1c428:	mvn	r8, #0
   1c42c:	b	1c40c <__assert_fail@plt+0xae08>
   1c430:	mov	r0, #14
   1c434:	str	r4, [sp, #-8]!
   1c438:	str	lr, [sp, #4]
   1c43c:	bl	11538 <nl_langinfo@plt>
   1c440:	cmp	r0, #0
   1c444:	beq	1c468 <__assert_fail@plt+0xae64>
   1c448:	ldrb	r2, [r0]
   1c44c:	movw	r3, #57604	; 0xe104
   1c450:	movt	r3, #1
   1c454:	ldr	r4, [sp]
   1c458:	add	sp, sp, #4
   1c45c:	cmp	r2, #0
   1c460:	moveq	r0, r3
   1c464:	pop	{pc}		; (ldr pc, [sp], #4)
   1c468:	ldr	r4, [sp]
   1c46c:	add	sp, sp, #4
   1c470:	movw	r0, #57604	; 0xe104
   1c474:	movt	r0, #1
   1c478:	pop	{pc}		; (ldr pc, [sp], #4)
   1c47c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c480:	mov	r5, r2
   1c484:	strd	r6, [sp, #8]
   1c488:	subs	r6, r0, #0
   1c48c:	mov	r7, r1
   1c490:	str	lr, [sp, #16]
   1c494:	sub	sp, sp, #12
   1c498:	addeq	r6, sp, #4
   1c49c:	mov	r0, r6
   1c4a0:	bl	113a0 <mbrtowc@plt>
   1c4a4:	cmp	r5, #0
   1c4a8:	cmnne	r0, #3
   1c4ac:	mov	r4, r0
   1c4b0:	bhi	1c4cc <__assert_fail@plt+0xaec8>
   1c4b4:	mov	r0, r4
   1c4b8:	add	sp, sp, #12
   1c4bc:	ldrd	r4, [sp]
   1c4c0:	ldrd	r6, [sp, #8]
   1c4c4:	add	sp, sp, #16
   1c4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4cc:	mov	r0, #0
   1c4d0:	bl	1c9e4 <__assert_fail@plt+0xb3e0>
   1c4d4:	cmp	r0, #0
   1c4d8:	bne	1c4b4 <__assert_fail@plt+0xaeb0>
   1c4dc:	ldrb	r3, [r7]
   1c4e0:	mov	r4, #1
   1c4e4:	str	r3, [r6]
   1c4e8:	b	1c4b4 <__assert_fail@plt+0xaeb0>
   1c4ec:	movw	r3, #61800	; 0xf168
   1c4f0:	movt	r3, #2
   1c4f4:	str	r4, [sp, #-8]!
   1c4f8:	ldr	r4, [r3]
   1c4fc:	mov	r5, r0
   1c500:	mov	r2, #5
   1c504:	movw	r1, #57612	; 0xe10c
   1c508:	movt	r1, #1
   1c50c:	str	lr, [sp, #4]
   1c510:	mov	r0, #0
   1c514:	bl	112f8 <dcgettext@plt>
   1c518:	mov	r2, r0
   1c51c:	mov	r1, r5
   1c520:	mov	r0, r4
   1c524:	bl	113ac <error@plt>
   1c528:	bl	115c8 <abort@plt>
   1c52c:	movw	r3, #61800	; 0xf168
   1c530:	movt	r3, #2
   1c534:	str	r4, [sp, #-8]!
   1c538:	ldr	r4, [r3]
   1c53c:	mov	r5, r0
   1c540:	mov	r2, #5
   1c544:	movw	r1, #57656	; 0xe138
   1c548:	movt	r1, #1
   1c54c:	str	lr, [sp, #4]
   1c550:	mov	r0, #0
   1c554:	bl	112f8 <dcgettext@plt>
   1c558:	mov	r2, r0
   1c55c:	mov	r1, r5
   1c560:	mov	r0, r4
   1c564:	bl	113ac <error@plt>
   1c568:	bl	115c8 <abort@plt>
   1c56c:	umull	r2, r3, r1, r2
   1c570:	cmp	r3, #0
   1c574:	bne	1c580 <__assert_fail@plt+0xaf7c>
   1c578:	mov	r1, r2
   1c57c:	b	1bc98 <__assert_fail@plt+0xa694>
   1c580:	str	r4, [sp, #-8]!
   1c584:	str	lr, [sp, #4]
   1c588:	bl	11484 <__errno_location@plt>
   1c58c:	mov	r3, #12
   1c590:	ldr	r4, [sp]
   1c594:	add	sp, sp, #4
   1c598:	str	r3, [r0]
   1c59c:	mov	r0, #0
   1c5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5a4:	strd	r4, [sp, #-16]!
   1c5a8:	mov	r5, r0
   1c5ac:	mov	r4, #0
   1c5b0:	movw	r0, #56208	; 0xdb90
   1c5b4:	movt	r0, #1
   1c5b8:	str	r6, [sp, #8]
   1c5bc:	mov	r1, #524288	; 0x80000
   1c5c0:	str	lr, [sp, #12]
   1c5c4:	str	r4, [r5, #4]
   1c5c8:	bl	1c260 <__assert_fail@plt+0xac5c>
   1c5cc:	cmp	r0, r4
   1c5d0:	str	r0, [r5]
   1c5d4:	movge	r0, r4
   1c5d8:	blt	1c5ec <__assert_fail@plt+0xafe8>
   1c5dc:	ldrd	r4, [sp]
   1c5e0:	ldr	r6, [sp, #8]
   1c5e4:	add	sp, sp, #12
   1c5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5ec:	mov	r1, r4
   1c5f0:	mov	r0, r4
   1c5f4:	bl	11430 <getcwd@plt>
   1c5f8:	clz	r4, r0
   1c5fc:	str	r0, [r5, #4]
   1c600:	lsr	r4, r4, #5
   1c604:	ldr	r6, [sp, #8]
   1c608:	rsb	r0, r4, #0
   1c60c:	ldrd	r4, [sp]
   1c610:	add	sp, sp, #12
   1c614:	pop	{pc}		; (ldr pc, [sp], #4)
   1c618:	ldr	r3, [r0]
   1c61c:	cmp	r3, #0
   1c620:	blt	1c62c <__assert_fail@plt+0xb028>
   1c624:	mov	r0, r3
   1c628:	b	11568 <fchdir@plt>
   1c62c:	ldr	r0, [r0, #4]
   1c630:	b	1c698 <__assert_fail@plt+0xb094>
   1c634:	str	r4, [sp, #-8]!
   1c638:	mov	r4, r0
   1c63c:	ldr	r0, [r0]
   1c640:	str	lr, [sp, #4]
   1c644:	cmp	r0, #0
   1c648:	blt	1c650 <__assert_fail@plt+0xb04c>
   1c64c:	bl	115d4 <close@plt>
   1c650:	ldr	r0, [r4, #4]
   1c654:	ldr	r4, [sp]
   1c658:	ldr	lr, [sp, #4]
   1c65c:	add	sp, sp, #8
   1c660:	b	1c300 <__assert_fail@plt+0xacfc>
   1c664:	mov	r2, #3
   1c668:	mov	r1, #0
   1c66c:	b	1c078 <__assert_fail@plt+0xaa74>
   1c670:	movw	r3, #57704	; 0xe168
   1c674:	movt	r3, #1
   1c678:	str	r4, [sp, #-8]!
   1c67c:	movw	r1, #57728	; 0xe180
   1c680:	movt	r1, #1
   1c684:	str	lr, [sp, #4]
   1c688:	movw	r0, #57748	; 0xe194
   1c68c:	movt	r0, #1
   1c690:	mov	r2, #64	; 0x40
   1c694:	bl	11604 <__assert_fail@plt>
   1c698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c69c:	strd	r6, [sp, #8]
   1c6a0:	mov	r6, r0
   1c6a4:	strd	r8, [sp, #16]
   1c6a8:	strd	sl, [sp, #24]
   1c6ac:	str	lr, [sp, #32]
   1c6b0:	sub	sp, sp, #4
   1c6b4:	bl	11334 <chdir@plt>
   1c6b8:	subs	r4, r0, #0
   1c6bc:	beq	1c820 <__assert_fail@plt+0xb21c>
   1c6c0:	bl	11484 <__errno_location@plt>
   1c6c4:	ldr	r3, [r0]
   1c6c8:	mov	sl, r0
   1c6cc:	cmp	r3, #36	; 0x24
   1c6d0:	bne	1c820 <__assert_fail@plt+0xb21c>
   1c6d4:	mov	r0, r6
   1c6d8:	bl	11460 <strlen@plt>
   1c6dc:	subs	r7, r0, #0
   1c6e0:	beq	1c970 <__assert_fail@plt+0xb36c>
   1c6e4:	cmp	r7, #4096	; 0x1000
   1c6e8:	bcc	1c98c <__assert_fail@plt+0xb388>
   1c6ec:	movw	r1, #57544	; 0xe0c8
   1c6f0:	movt	r1, #1
   1c6f4:	mov	r0, r6
   1c6f8:	bl	115f8 <strspn@plt>
   1c6fc:	cmp	r0, #2
   1c700:	mov	r4, r0
   1c704:	beq	1c864 <__assert_fail@plt+0xb260>
   1c708:	cmp	r0, #0
   1c70c:	moveq	r4, r6
   1c710:	mvneq	r5, #99	; 0x63
   1c714:	bne	1c840 <__assert_fail@plt+0xb23c>
   1c718:	ldrb	r3, [r4]
   1c71c:	cmp	r3, #47	; 0x2f
   1c720:	beq	1c9a8 <__assert_fail@plt+0xb3a4>
   1c724:	add	r6, r6, r7
   1c728:	cmp	r4, r6
   1c72c:	bhi	1c9c4 <__assert_fail@plt+0xb3c0>
   1c730:	sub	r3, r6, r4
   1c734:	cmp	r3, #4096	; 0x1000
   1c738:	blt	1c7d0 <__assert_fail@plt+0xb1cc>
   1c73c:	movw	r8, #57544	; 0xe0c8
   1c740:	movt	r8, #1
   1c744:	mov	r9, #47	; 0x2f
   1c748:	b	1c770 <__assert_fail@plt+0xb16c>
   1c74c:	mov	r1, r8
   1c750:	strb	r9, [fp], #1
   1c754:	mov	r0, fp
   1c758:	bl	115f8 <strspn@plt>
   1c75c:	add	r4, fp, r0
   1c760:	mov	r5, r7
   1c764:	sub	r3, r6, r4
   1c768:	cmp	r3, #4096	; 0x1000
   1c76c:	blt	1c7d4 <__assert_fail@plt+0xb1d0>
   1c770:	mov	r2, #4096	; 0x1000
   1c774:	mov	r1, #47	; 0x2f
   1c778:	mov	r0, r4
   1c77c:	bl	11478 <memrchr@plt>
   1c780:	subs	fp, r0, #0
   1c784:	beq	1c8c0 <__assert_fail@plt+0xb2bc>
   1c788:	mov	r3, #0
   1c78c:	sub	r2, fp, r4
   1c790:	cmp	r2, #4096	; 0x1000
   1c794:	strb	r3, [fp]
   1c798:	bge	1c954 <__assert_fail@plt+0xb350>
   1c79c:	mov	r1, r4
   1c7a0:	mov	r2, #18688	; 0x4900
   1c7a4:	mov	r0, r5
   1c7a8:	bl	1146c <openat64@plt>
   1c7ac:	subs	r7, r0, #0
   1c7b0:	blt	1c914 <__assert_fail@plt+0xb310>
   1c7b4:	cmp	r5, #0
   1c7b8:	blt	1c74c <__assert_fail@plt+0xb148>
   1c7bc:	mov	r0, r5
   1c7c0:	bl	115d4 <close@plt>
   1c7c4:	cmp	r0, #0
   1c7c8:	beq	1c74c <__assert_fail@plt+0xb148>
   1c7cc:	bl	1c670 <__assert_fail@plt+0xb06c>
   1c7d0:	mov	r7, r5
   1c7d4:	cmp	r6, r4
   1c7d8:	bls	1c8d0 <__assert_fail@plt+0xb2cc>
   1c7dc:	mov	r1, r4
   1c7e0:	mov	r2, #18688	; 0x4900
   1c7e4:	mov	r0, r7
   1c7e8:	bl	1146c <openat64@plt>
   1c7ec:	subs	r5, r0, #0
   1c7f0:	blt	1c8e0 <__assert_fail@plt+0xb2dc>
   1c7f4:	cmp	r7, #0
   1c7f8:	bge	1c938 <__assert_fail@plt+0xb334>
   1c7fc:	mov	r0, r5
   1c800:	bl	11568 <fchdir@plt>
   1c804:	cmp	r0, #0
   1c808:	bne	1c8fc <__assert_fail@plt+0xb2f8>
   1c80c:	mov	r0, r5
   1c810:	bl	115d4 <close@plt>
   1c814:	cmp	r0, #0
   1c818:	bne	1c7cc <__assert_fail@plt+0xb1c8>
   1c81c:	mov	r4, #0
   1c820:	mov	r0, r4
   1c824:	add	sp, sp, #4
   1c828:	ldrd	r4, [sp]
   1c82c:	ldrd	r6, [sp, #8]
   1c830:	ldrd	r8, [sp, #16]
   1c834:	ldrd	sl, [sp, #24]
   1c838:	add	sp, sp, #32
   1c83c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c840:	movw	r1, #57544	; 0xe0c8
   1c844:	movt	r1, #1
   1c848:	mov	r2, #18688	; 0x4900
   1c84c:	mvn	r0, #99	; 0x63
   1c850:	bl	1146c <openat64@plt>
   1c854:	subs	r5, r0, #0
   1c858:	blt	1c94c <__assert_fail@plt+0xb348>
   1c85c:	add	r4, r6, r4
   1c860:	b	1c718 <__assert_fail@plt+0xb114>
   1c864:	sub	r2, r7, #3
   1c868:	mov	r1, #47	; 0x2f
   1c86c:	add	r0, r6, #3
   1c870:	bl	114d8 <memchr@plt>
   1c874:	subs	r4, r0, #0
   1c878:	beq	1c920 <__assert_fail@plt+0xb31c>
   1c87c:	mov	r3, #0
   1c880:	mov	r2, #18688	; 0x4900
   1c884:	mov	r1, r6
   1c888:	mvn	r0, #99	; 0x63
   1c88c:	strb	r3, [r4]
   1c890:	bl	1146c <openat64@plt>
   1c894:	subs	r5, r0, #0
   1c898:	mov	r3, #47	; 0x2f
   1c89c:	strblt	r3, [r4]
   1c8a0:	blt	1c94c <__assert_fail@plt+0xb348>
   1c8a4:	movw	r1, #57544	; 0xe0c8
   1c8a8:	movt	r1, #1
   1c8ac:	strb	r3, [r4], #1
   1c8b0:	mov	r0, r4
   1c8b4:	bl	115f8 <strspn@plt>
   1c8b8:	add	r4, r4, r0
   1c8bc:	b	1c718 <__assert_fail@plt+0xb114>
   1c8c0:	mov	r3, #36	; 0x24
   1c8c4:	mvn	r4, #0
   1c8c8:	str	r3, [sl]
   1c8cc:	b	1c820 <__assert_fail@plt+0xb21c>
   1c8d0:	mov	r0, r7
   1c8d4:	bl	11568 <fchdir@plt>
   1c8d8:	cmp	r0, #0
   1c8dc:	beq	1c928 <__assert_fail@plt+0xb324>
   1c8e0:	mov	r5, r7
   1c8e4:	cmp	r5, #0
   1c8e8:	ldr	r6, [sl]
   1c8ec:	bge	1c900 <__assert_fail@plt+0xb2fc>
   1c8f0:	mvn	r4, #0
   1c8f4:	str	r6, [sl]
   1c8f8:	b	1c820 <__assert_fail@plt+0xb21c>
   1c8fc:	ldr	r6, [sl]
   1c900:	mov	r0, r5
   1c904:	bl	115d4 <close@plt>
   1c908:	cmp	r0, #0
   1c90c:	beq	1c8f0 <__assert_fail@plt+0xb2ec>
   1c910:	b	1c7cc <__assert_fail@plt+0xb1c8>
   1c914:	mov	r3, #47	; 0x2f
   1c918:	strb	r3, [fp]
   1c91c:	b	1c8e4 <__assert_fail@plt+0xb2e0>
   1c920:	mvn	r4, #0
   1c924:	b	1c820 <__assert_fail@plt+0xb21c>
   1c928:	cmp	r7, #0
   1c92c:	blt	1c81c <__assert_fail@plt+0xb218>
   1c930:	mov	r5, r7
   1c934:	b	1c80c <__assert_fail@plt+0xb208>
   1c938:	mov	r0, r7
   1c93c:	bl	115d4 <close@plt>
   1c940:	cmp	r0, #0
   1c944:	beq	1c7fc <__assert_fail@plt+0xb1f8>
   1c948:	b	1c7cc <__assert_fail@plt+0xb1c8>
   1c94c:	ldr	r6, [sl]
   1c950:	b	1c8f0 <__assert_fail@plt+0xb2ec>
   1c954:	movw	r1, #57728	; 0xe180
   1c958:	movt	r1, #1
   1c95c:	ldr	r3, [pc, #124]	; 1c9e0 <__assert_fail@plt+0xb3dc>
   1c960:	movw	r0, #57812	; 0xe1d4
   1c964:	movt	r0, #1
   1c968:	mov	r2, #179	; 0xb3
   1c96c:	bl	11604 <__assert_fail@plt>
   1c970:	movw	r1, #57728	; 0xe180
   1c974:	movt	r1, #1
   1c978:	ldr	r3, [pc, #96]	; 1c9e0 <__assert_fail@plt+0xb3dc>
   1c97c:	movw	r0, #57764	; 0xe1a4
   1c980:	movt	r0, #1
   1c984:	mov	r2, #126	; 0x7e
   1c988:	bl	11604 <__assert_fail@plt>
   1c98c:	movw	r1, #57728	; 0xe180
   1c990:	movt	r1, #1
   1c994:	ldr	r3, [pc, #68]	; 1c9e0 <__assert_fail@plt+0xb3dc>
   1c998:	movw	r0, #57772	; 0xe1ac
   1c99c:	movt	r0, #1
   1c9a0:	mov	r2, #127	; 0x7f
   1c9a4:	bl	11604 <__assert_fail@plt>
   1c9a8:	movw	r1, #57728	; 0xe180
   1c9ac:	movt	r1, #1
   1c9b0:	ldr	r3, [pc, #40]	; 1c9e0 <__assert_fail@plt+0xb3dc>
   1c9b4:	movw	r0, #57784	; 0xe1b8
   1c9b8:	movt	r0, #1
   1c9bc:	mov	r2, #162	; 0xa2
   1c9c0:	bl	11604 <__assert_fail@plt>
   1c9c4:	movw	r1, #57728	; 0xe180
   1c9c8:	movt	r1, #1
   1c9cc:	ldr	r3, [pc, #12]	; 1c9e0 <__assert_fail@plt+0xb3dc>
   1c9d0:	movw	r0, #57796	; 0xe1c4
   1c9d4:	movt	r0, #1
   1c9d8:	mov	r2, #163	; 0xa3
   1c9dc:	bl	11604 <__assert_fail@plt>
   1c9e0:	andeq	lr, r1, r4, ror r1
   1c9e4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c9e8:	sub	sp, sp, #268	; 0x10c
   1c9ec:	movw	r2, #257	; 0x101
   1c9f0:	add	r1, sp, #4
   1c9f4:	bl	1ca3c <__assert_fail@plt+0xb438>
   1c9f8:	cmp	r0, #0
   1c9fc:	movne	r0, #0
   1ca00:	bne	1ca34 <__assert_fail@plt+0xb430>
   1ca04:	movw	r1, #57832	; 0xe1e8
   1ca08:	movt	r1, #1
   1ca0c:	add	r0, sp, #4
   1ca10:	bl	11268 <strcmp@plt>
   1ca14:	cmp	r0, #0
   1ca18:	beq	1ca34 <__assert_fail@plt+0xb430>
   1ca1c:	add	r0, sp, #4
   1ca20:	movw	r1, #57836	; 0xe1ec
   1ca24:	movt	r1, #1
   1ca28:	bl	11268 <strcmp@plt>
   1ca2c:	adds	r0, r0, #0
   1ca30:	movne	r0, #1
   1ca34:	add	sp, sp, #268	; 0x10c
   1ca38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca3c:	strd	r4, [sp, #-16]!
   1ca40:	mov	r5, r1
   1ca44:	mov	r1, #0
   1ca48:	mov	r4, r2
   1ca4c:	str	r6, [sp, #8]
   1ca50:	str	lr, [sp, #12]
   1ca54:	bl	11520 <setlocale@plt>
   1ca58:	subs	r6, r0, #0
   1ca5c:	beq	1cadc <__assert_fail@plt+0xb4d8>
   1ca60:	bl	11460 <strlen@plt>
   1ca64:	cmp	r4, r0
   1ca68:	bhi	1ca88 <__assert_fail@plt+0xb484>
   1ca6c:	cmp	r4, #0
   1ca70:	moveq	r0, #34	; 0x22
   1ca74:	bne	1caac <__assert_fail@plt+0xb4a8>
   1ca78:	ldrd	r4, [sp]
   1ca7c:	ldr	r6, [sp, #8]
   1ca80:	add	sp, sp, #12
   1ca84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca88:	add	r2, r0, #1
   1ca8c:	mov	r1, r6
   1ca90:	mov	r0, r5
   1ca94:	bl	112b0 <memcpy@plt>
   1ca98:	ldrd	r4, [sp]
   1ca9c:	mov	r0, #0
   1caa0:	ldr	r6, [sp, #8]
   1caa4:	add	sp, sp, #12
   1caa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1caac:	sub	r4, r4, #1
   1cab0:	mov	r1, r6
   1cab4:	mov	r2, r4
   1cab8:	mov	r0, r5
   1cabc:	bl	112b0 <memcpy@plt>
   1cac0:	mov	r3, #0
   1cac4:	mov	r0, #34	; 0x22
   1cac8:	strb	r3, [r5, r4]
   1cacc:	ldrd	r4, [sp]
   1cad0:	ldr	r6, [sp, #8]
   1cad4:	add	sp, sp, #12
   1cad8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cadc:	cmp	r4, #0
   1cae0:	mov	r0, #22
   1cae4:	strbne	r6, [r5]
   1cae8:	ldrd	r4, [sp]
   1caec:	ldr	r6, [sp, #8]
   1caf0:	add	sp, sp, #12
   1caf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1caf8:	mov	r1, #0
   1cafc:	b	11520 <setlocale@plt>
   1cb00:	cmp	r3, #0
   1cb04:	cmpeq	r2, #0
   1cb08:	bne	1cb20 <__assert_fail@plt+0xb51c>
   1cb0c:	cmp	r1, #0
   1cb10:	cmpeq	r0, #0
   1cb14:	mvnne	r1, #0
   1cb18:	mvnne	r0, #0
   1cb1c:	b	1cb3c <__assert_fail@plt+0xb538>
   1cb20:	sub	sp, sp, #8
   1cb24:	push	{sp, lr}
   1cb28:	bl	1cb4c <__assert_fail@plt+0xb548>
   1cb2c:	ldr	lr, [sp, #4]
   1cb30:	add	sp, sp, #8
   1cb34:	pop	{r2, r3}
   1cb38:	bx	lr
   1cb3c:	push	{r1, lr}
   1cb40:	mov	r0, #8
   1cb44:	bl	11250 <raise@plt>
   1cb48:	pop	{r1, pc}
   1cb4c:	cmp	r1, r3
   1cb50:	cmpeq	r0, r2
   1cb54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb58:	mov	r4, r0
   1cb5c:	movcc	r0, #0
   1cb60:	mov	r5, r1
   1cb64:	ldr	lr, [sp, #36]	; 0x24
   1cb68:	movcc	r1, r0
   1cb6c:	bcc	1cc68 <__assert_fail@plt+0xb664>
   1cb70:	cmp	r3, #0
   1cb74:	clzeq	ip, r2
   1cb78:	clzne	ip, r3
   1cb7c:	addeq	ip, ip, #32
   1cb80:	cmp	r5, #0
   1cb84:	clzeq	r1, r4
   1cb88:	addeq	r1, r1, #32
   1cb8c:	clzne	r1, r5
   1cb90:	sub	ip, ip, r1
   1cb94:	sub	sl, ip, #32
   1cb98:	lsl	r9, r3, ip
   1cb9c:	rsb	fp, ip, #32
   1cba0:	orr	r9, r9, r2, lsl sl
   1cba4:	orr	r9, r9, r2, lsr fp
   1cba8:	lsl	r8, r2, ip
   1cbac:	cmp	r5, r9
   1cbb0:	cmpeq	r4, r8
   1cbb4:	movcc	r0, #0
   1cbb8:	movcc	r1, r0
   1cbbc:	bcc	1cbd8 <__assert_fail@plt+0xb5d4>
   1cbc0:	mov	r0, #1
   1cbc4:	subs	r4, r4, r8
   1cbc8:	lsl	r1, r0, sl
   1cbcc:	orr	r1, r1, r0, lsr fp
   1cbd0:	lsl	r0, r0, ip
   1cbd4:	sbc	r5, r5, r9
   1cbd8:	cmp	ip, #0
   1cbdc:	beq	1cc68 <__assert_fail@plt+0xb664>
   1cbe0:	lsr	r6, r8, #1
   1cbe4:	orr	r6, r6, r9, lsl #31
   1cbe8:	lsr	r7, r9, #1
   1cbec:	mov	r2, ip
   1cbf0:	b	1cc14 <__assert_fail@plt+0xb610>
   1cbf4:	subs	r3, r4, r6
   1cbf8:	sbc	r8, r5, r7
   1cbfc:	adds	r3, r3, r3
   1cc00:	adc	r8, r8, r8
   1cc04:	adds	r4, r3, #1
   1cc08:	adc	r5, r8, #0
   1cc0c:	subs	r2, r2, #1
   1cc10:	beq	1cc30 <__assert_fail@plt+0xb62c>
   1cc14:	cmp	r5, r7
   1cc18:	cmpeq	r4, r6
   1cc1c:	bcs	1cbf4 <__assert_fail@plt+0xb5f0>
   1cc20:	adds	r4, r4, r4
   1cc24:	adc	r5, r5, r5
   1cc28:	subs	r2, r2, #1
   1cc2c:	bne	1cc14 <__assert_fail@plt+0xb610>
   1cc30:	lsr	r3, r4, ip
   1cc34:	orr	r3, r3, r5, lsl fp
   1cc38:	lsr	r2, r5, ip
   1cc3c:	orr	r3, r3, r5, lsr sl
   1cc40:	adds	r0, r0, r4
   1cc44:	mov	r4, r3
   1cc48:	lsl	r3, r2, ip
   1cc4c:	orr	r3, r3, r4, lsl sl
   1cc50:	lsl	ip, r4, ip
   1cc54:	orr	r3, r3, r4, lsr fp
   1cc58:	adc	r1, r1, r5
   1cc5c:	subs	r0, r0, ip
   1cc60:	mov	r5, r2
   1cc64:	sbc	r1, r1, r3
   1cc68:	cmp	lr, #0
   1cc6c:	strdne	r4, [lr]
   1cc70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cc78:	mov	r7, r0
   1cc7c:	ldr	r6, [pc, #72]	; 1cccc <__assert_fail@plt+0xb6c8>
   1cc80:	ldr	r5, [pc, #72]	; 1ccd0 <__assert_fail@plt+0xb6cc>
   1cc84:	add	r6, pc, r6
   1cc88:	add	r5, pc, r5
   1cc8c:	sub	r6, r6, r5
   1cc90:	mov	r8, r1
   1cc94:	mov	r9, r2
   1cc98:	bl	1120c <fstatfs64@plt-0x20>
   1cc9c:	asrs	r6, r6, #2
   1cca0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cca4:	mov	r4, #0
   1cca8:	add	r4, r4, #1
   1ccac:	ldr	r3, [r5], #4
   1ccb0:	mov	r2, r9
   1ccb4:	mov	r1, r8
   1ccb8:	mov	r0, r7
   1ccbc:	blx	r3
   1ccc0:	cmp	r6, r4
   1ccc4:	bne	1cca8 <__assert_fail@plt+0xb6a4>
   1ccc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cccc:	andeq	r2, r1, r0, lsl #5
   1ccd0:	andeq	r2, r1, r8, ror r2
   1ccd4:	bx	lr
   1ccd8:	ldr	r3, [pc, #12]	; 1ccec <__assert_fail@plt+0xb6e8>
   1ccdc:	mov	r1, #0
   1cce0:	add	r3, pc, r3
   1cce4:	ldr	r2, [r3]
   1cce8:	b	1149c <__cxa_atexit@plt>
   1ccec:	andeq	r2, r1, r8, ror r4

Disassembly of section .fini:

0001ccf0 <.fini>:
   1ccf0:	push	{r3, lr}
   1ccf4:	pop	{r3, pc}
