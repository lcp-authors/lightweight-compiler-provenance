
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	111cc <__assert_fail@plt+0x48>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <calloc@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <calloc@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r9, r1, r0, lsl #3

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <printf@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <utmpxname@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <free@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <gai_strerror@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <_exit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <memcpy@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <mbsinit@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <time@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <memcmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <stpcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <fputc_unlocked@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <strdup@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <setutxent@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <realloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <textdomain@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <iswprint@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <fwrite@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <lseek64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <__ctype_get_mb_cur_max@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <__fpending@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <ferror_unlocked@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <mbrtowc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <error@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <puts@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <malloc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <__libc_start_main@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <strftime@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <__freading@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <localtime@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <__gmon_start__@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <getopt_long@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <kill@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <__ctype_b_loc@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <exit@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <gettext@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <ttyname@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <strchr@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <fprintf@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <__errno_location@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <__cxa_atexit@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #24]!

000110ac <memset@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <strncpy@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <fileno@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <asprintf@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #24, 20	; 0x18000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <fclose@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #24, 20	; 0x18000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <fseeko64@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #24, 20	; 0x18000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f4 <endutxent@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #24, 20	; 0x18000
   110fc:	ldr	pc, [ip, #4064]!	; 0xfe0

00011100 <setlocale@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #24, 20	; 0x18000
   11108:	ldr	pc, [ip, #4056]!	; 0xfd8

0001110c <strrchr@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #24, 20	; 0x18000
   11114:	ldr	pc, [ip, #4048]!	; 0xfd0

00011118 <nl_langinfo@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #24, 20	; 0x18000
   11120:	ldr	pc, [ip, #4040]!	; 0xfc8

00011124 <sprintf@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #24, 20	; 0x18000
   1112c:	ldr	pc, [ip, #4032]!	; 0xfc0

00011130 <freeaddrinfo@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #24, 20	; 0x18000
   11138:	ldr	pc, [ip, #4024]!	; 0xfb8

0001113c <getaddrinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #24, 20	; 0x18000
   11144:	ldr	pc, [ip, #4016]!	; 0xfb0

00011148 <bindtextdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #24, 20	; 0x18000
   11150:	ldr	pc, [ip, #4008]!	; 0xfa8

00011154 <__xstat64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #24, 20	; 0x18000
   1115c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011160 <strncmp@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #24, 20	; 0x18000
   11168:	ldr	pc, [ip, #3992]!	; 0xf98

0001116c <abort@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #24, 20	; 0x18000
   11174:	ldr	pc, [ip, #3984]!	; 0xf90

00011178 <getutxent@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #24, 20	; 0x18000
   11180:	ldr	pc, [ip, #3976]!	; 0xf88

00011184 <__assert_fail@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #24, 20	; 0x18000
   1118c:	ldr	pc, [ip, #3968]!	; 0xf80

Disassembly of section .text:

00011190 <.text>:
   11190:	mov	fp, #0
   11194:	mov	lr, #0
   11198:	pop	{r1}		; (ldr r1, [sp], #4)
   1119c:	mov	r2, sp
   111a0:	push	{r2}		; (str r2, [sp, #-4]!)
   111a4:	push	{r0}		; (str r0, [sp, #-4]!)
   111a8:	ldr	ip, [pc, #16]	; 111c0 <__assert_fail@plt+0x3c>
   111ac:	push	{ip}		; (str ip, [sp, #-4]!)
   111b0:	ldr	r0, [pc, #12]	; 111c4 <__assert_fail@plt+0x40>
   111b4:	ldr	r3, [pc, #12]	; 111c8 <__assert_fail@plt+0x44>
   111b8:	bl	10fec <__libc_start_main@plt>
   111bc:	bl	1116c <abort@plt>
   111c0:	andeq	r8, r1, r8, asr #17
   111c4:	strdeq	r2, [r1], -r8
   111c8:	andeq	r8, r1, r8, ror #16
   111cc:	ldr	r3, [pc, #20]	; 111e8 <__assert_fail@plt+0x64>
   111d0:	ldr	r2, [pc, #20]	; 111ec <__assert_fail@plt+0x68>
   111d4:	add	r3, pc, r3
   111d8:	ldr	r2, [r3, r2]
   111dc:	cmp	r2, #0
   111e0:	bxeq	lr
   111e4:	b	1101c <__gmon_start__@plt>
   111e8:	andeq	r8, r1, r4, lsr #28
   111ec:	andeq	r0, r0, r0, lsl r1
   111f0:	ldr	r0, [pc, #24]	; 11210 <__assert_fail@plt+0x8c>
   111f4:	ldr	r3, [pc, #24]	; 11214 <__assert_fail@plt+0x90>
   111f8:	cmp	r3, r0
   111fc:	bxeq	lr
   11200:	ldr	r3, [pc, #16]	; 11218 <__assert_fail@plt+0x94>
   11204:	cmp	r3, #0
   11208:	bxeq	lr
   1120c:	bx	r3
   11210:	andeq	sl, r2, ip, ror #2
   11214:	andeq	sl, r2, ip, ror #2
   11218:	andeq	r0, r0, r0
   1121c:	ldr	r0, [pc, #36]	; 11248 <__assert_fail@plt+0xc4>
   11220:	ldr	r1, [pc, #36]	; 1124c <__assert_fail@plt+0xc8>
   11224:	sub	r1, r1, r0
   11228:	asr	r1, r1, #2
   1122c:	add	r1, r1, r1, lsr #31
   11230:	asrs	r1, r1, #1
   11234:	bxeq	lr
   11238:	ldr	r3, [pc, #16]	; 11250 <__assert_fail@plt+0xcc>
   1123c:	cmp	r3, #0
   11240:	bxeq	lr
   11244:	bx	r3
   11248:	andeq	sl, r2, ip, ror #2
   1124c:	andeq	sl, r2, ip, ror #2
   11250:	andeq	r0, r0, r0
   11254:	push	{r4, lr}
   11258:	ldr	r4, [pc, #24]	; 11278 <__assert_fail@plt+0xf4>
   1125c:	ldrb	r3, [r4]
   11260:	cmp	r3, #0
   11264:	popne	{r4, pc}
   11268:	bl	111f0 <__assert_fail@plt+0x6c>
   1126c:	mov	r3, #1
   11270:	strb	r3, [r4]
   11274:	pop	{r4, pc}
   11278:	andeq	sl, r2, r8, lsl #3
   1127c:	b	1121c <__assert_fail@plt+0x98>
   11280:	str	fp, [sp, #-8]!
   11284:	str	lr, [sp, #4]
   11288:	add	fp, sp, #4
   1128c:	sub	sp, sp, #80	; 0x50
   11290:	str	r0, [fp, #-80]	; 0xffffffb0
   11294:	movw	r2, #35444	; 0x8a74
   11298:	movt	r2, #1
   1129c:	sub	r3, fp, #72	; 0x48
   112a0:	ldrd	r0, [r2]
   112a4:	strd	r0, [r3]
   112a8:	ldrd	r0, [r2, #8]
   112ac:	strd	r0, [r3, #8]
   112b0:	ldrd	r0, [r2, #16]
   112b4:	strd	r0, [r3, #16]
   112b8:	ldrd	r0, [r2, #24]
   112bc:	strd	r0, [r3, #24]
   112c0:	ldrd	r0, [r2, #32]
   112c4:	strd	r0, [r3, #32]
   112c8:	ldrd	r0, [r2, #40]	; 0x28
   112cc:	strd	r0, [r3, #40]	; 0x28
   112d0:	ldrd	r0, [r2, #48]	; 0x30
   112d4:	strd	r0, [r3, #48]	; 0x30
   112d8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   112dc:	str	r3, [fp, #-8]
   112e0:	sub	r3, fp, #72	; 0x48
   112e4:	str	r3, [fp, #-12]
   112e8:	b	112f8 <__assert_fail@plt+0x174>
   112ec:	ldr	r3, [fp, #-12]
   112f0:	add	r3, r3, #8
   112f4:	str	r3, [fp, #-12]
   112f8:	ldr	r3, [fp, #-12]
   112fc:	ldr	r3, [r3]
   11300:	cmp	r3, #0
   11304:	beq	11328 <__assert_fail@plt+0x1a4>
   11308:	ldr	r3, [fp, #-12]
   1130c:	ldr	r3, [r3]
   11310:	mov	r1, r3
   11314:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11318:	bl	10ea8 <strcmp@plt>
   1131c:	mov	r3, r0
   11320:	cmp	r3, #0
   11324:	bne	112ec <__assert_fail@plt+0x168>
   11328:	ldr	r3, [fp, #-12]
   1132c:	ldr	r3, [r3, #4]
   11330:	cmp	r3, #0
   11334:	beq	11344 <__assert_fail@plt+0x1c0>
   11338:	ldr	r3, [fp, #-12]
   1133c:	ldr	r3, [r3, #4]
   11340:	str	r3, [fp, #-8]
   11344:	movw	r0, #35072	; 0x8900
   11348:	movt	r0, #1
   1134c:	bl	11058 <gettext@plt>
   11350:	mov	r3, r0
   11354:	movw	r2, #35096	; 0x8918
   11358:	movt	r2, #1
   1135c:	movw	r1, #35136	; 0x8940
   11360:	movt	r1, #1
   11364:	mov	r0, r3
   11368:	bl	10eb4 <printf@plt>
   1136c:	mov	r1, #0
   11370:	mov	r0, #5
   11374:	bl	11100 <setlocale@plt>
   11378:	str	r0, [fp, #-16]
   1137c:	ldr	r3, [fp, #-16]
   11380:	cmp	r3, #0
   11384:	beq	113d0 <__assert_fail@plt+0x24c>
   11388:	mov	r2, #3
   1138c:	movw	r1, #35152	; 0x8950
   11390:	movt	r1, #1
   11394:	ldr	r0, [fp, #-16]
   11398:	bl	11160 <strncmp@plt>
   1139c:	mov	r3, r0
   113a0:	cmp	r3, #0
   113a4:	beq	113d0 <__assert_fail@plt+0x24c>
   113a8:	movw	r0, #35156	; 0x8954
   113ac:	movt	r0, #1
   113b0:	bl	11058 <gettext@plt>
   113b4:	mov	r2, r0
   113b8:	movw	r3, #41348	; 0xa184
   113bc:	movt	r3, #2
   113c0:	ldr	r3, [r3]
   113c4:	mov	r1, r3
   113c8:	mov	r0, r2
   113cc:	bl	10e90 <fputs_unlocked@plt>
   113d0:	movw	r0, #35228	; 0x899c
   113d4:	movt	r0, #1
   113d8:	bl	11058 <gettext@plt>
   113dc:	mov	r3, r0
   113e0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   113e4:	movw	r1, #35096	; 0x8918
   113e8:	movt	r1, #1
   113ec:	mov	r0, r3
   113f0:	bl	10eb4 <printf@plt>
   113f4:	movw	r0, #35256	; 0x89b8
   113f8:	movt	r0, #1
   113fc:	bl	11058 <gettext@plt>
   11400:	ldr	r2, [fp, #-8]
   11404:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11408:	cmp	r2, r3
   1140c:	bne	1141c <__assert_fail@plt+0x298>
   11410:	movw	r3, #35308	; 0x89ec
   11414:	movt	r3, #1
   11418:	b	11424 <__assert_fail@plt+0x2a0>
   1141c:	movw	r3, #35320	; 0x89f8
   11420:	movt	r3, #1
   11424:	mov	r2, r3
   11428:	ldr	r1, [fp, #-8]
   1142c:	bl	10eb4 <printf@plt>
   11430:	nop	{0}
   11434:	sub	sp, fp, #4
   11438:	ldr	fp, [sp]
   1143c:	add	sp, sp, #4
   11440:	pop	{pc}		; (ldr pc, [sp], #4)
   11444:	str	fp, [sp, #-8]!
   11448:	str	lr, [sp, #4]
   1144c:	add	fp, sp, #4
   11450:	sub	sp, sp, #8
   11454:	str	r0, [fp, #-8]
   11458:	str	r1, [fp, #-12]
   1145c:	ldr	r3, [fp, #-8]
   11460:	mov	r0, r3
   11464:	asr	r1, r0, #31
   11468:	ldr	r2, [fp, #-12]
   1146c:	bl	13c8c <__assert_fail@plt+0x2b08>
   11470:	mov	r3, r0
   11474:	mov	r0, r3
   11478:	sub	sp, fp, #4
   1147c:	ldr	fp, [sp]
   11480:	add	sp, sp, #4
   11484:	pop	{pc}		; (ldr pc, [sp], #4)
   11488:	push	{fp}		; (str fp, [sp, #-4]!)
   1148c:	add	fp, sp, #0
   11490:	sub	sp, sp, #28
   11494:	str	r0, [fp, #-16]
   11498:	str	r1, [fp, #-20]	; 0xffffffec
   1149c:	str	r2, [fp, #-24]	; 0xffffffe8
   114a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   114a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114a8:	add	r3, r2, r3
   114ac:	str	r3, [fp, #-8]
   114b0:	b	114d4 <__assert_fail@plt+0x350>
   114b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   114b8:	add	r3, r2, #1
   114bc:	str	r3, [fp, #-20]	; 0xffffffec
   114c0:	ldr	r3, [fp, #-16]
   114c4:	add	r1, r3, #1
   114c8:	str	r1, [fp, #-16]
   114cc:	ldrb	r2, [r2]
   114d0:	strb	r2, [r3]
   114d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   114d8:	ldr	r3, [fp, #-8]
   114dc:	cmp	r2, r3
   114e0:	bcs	114f4 <__assert_fail@plt+0x370>
   114e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   114e8:	ldrb	r3, [r3]
   114ec:	cmp	r3, #0
   114f0:	bne	114b4 <__assert_fail@plt+0x330>
   114f4:	ldr	r3, [fp, #-16]
   114f8:	mov	r2, #0
   114fc:	strb	r2, [r3]
   11500:	ldr	r3, [fp, #-16]
   11504:	mov	r0, r3
   11508:	add	sp, fp, #0
   1150c:	pop	{fp}		; (ldr fp, [sp], #4)
   11510:	bx	lr
   11514:	str	fp, [sp, #-8]!
   11518:	str	lr, [sp, #4]
   1151c:	add	fp, sp, #4
   11520:	sub	sp, sp, #16
   11524:	str	r0, [fp, #-16]
   11528:	str	r1, [fp, #-20]	; 0xffffffec
   1152c:	movw	r3, #41244	; 0xa11c
   11530:	movt	r3, #2
   11534:	ldr	r3, [r3]
   11538:	cmp	r3, #-2147483648	; 0x80000000
   1153c:	bne	1154c <__assert_fail@plt+0x3c8>
   11540:	movw	r0, #41244	; 0xa11c
   11544:	movt	r0, #2
   11548:	bl	10f14 <time@plt>
   1154c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11550:	ldr	r3, [fp, #-16]
   11554:	cmp	r2, r3
   11558:	bge	11688 <__assert_fail@plt+0x504>
   1155c:	movw	r3, #41244	; 0xa11c
   11560:	movt	r3, #2
   11564:	ldr	r2, [r3]
   11568:	movw	r3, #44673	; 0xae81
   1156c:	movt	r3, #65534	; 0xfffe
   11570:	add	r3, r2, r3
   11574:	ldr	r2, [fp, #-16]
   11578:	cmp	r2, r3
   1157c:	blt	11688 <__assert_fail@plt+0x504>
   11580:	movw	r3, #41244	; 0xa11c
   11584:	movt	r3, #2
   11588:	ldr	r3, [r3]
   1158c:	ldr	r2, [fp, #-16]
   11590:	cmp	r2, r3
   11594:	bgt	11688 <__assert_fail@plt+0x504>
   11598:	movw	r3, #41244	; 0xa11c
   1159c:	movt	r3, #2
   115a0:	ldr	r2, [r3]
   115a4:	ldr	r3, [fp, #-16]
   115a8:	sub	r3, r2, r3
   115ac:	str	r3, [fp, #-8]
   115b0:	ldr	r3, [fp, #-8]
   115b4:	cmp	r3, #59	; 0x3b
   115b8:	bgt	115c8 <__assert_fail@plt+0x444>
   115bc:	movw	r3, #35928	; 0x8c58
   115c0:	movt	r3, #1
   115c4:	b	11698 <__assert_fail@plt+0x514>
   115c8:	ldr	r2, [fp, #-8]
   115cc:	movw	r3, #20863	; 0x517f
   115d0:	movt	r3, #1
   115d4:	cmp	r2, r3
   115d8:	ble	115fc <__assert_fail@plt+0x478>
   115dc:	movw	r3, #37672	; 0x9328
   115e0:	movt	r3, #1
   115e4:	mov	r2, #205	; 0xcd
   115e8:	movw	r1, #35936	; 0x8c60
   115ec:	movt	r1, #1
   115f0:	movw	r0, #35948	; 0x8c6c
   115f4:	movt	r0, #1
   115f8:	bl	11184 <__assert_fail@plt>
   115fc:	ldr	r3, [fp, #-8]
   11600:	movw	r2, #46021	; 0xb3c5
   11604:	movt	r2, #37282	; 0x91a2
   11608:	smull	r1, r2, r2, r3
   1160c:	add	r2, r2, r3
   11610:	asr	r2, r2, #11
   11614:	asr	r3, r3, #31
   11618:	sub	r0, r2, r3
   1161c:	ldr	r2, [fp, #-8]
   11620:	movw	r3, #46021	; 0xb3c5
   11624:	movt	r3, #37282	; 0x91a2
   11628:	smull	r1, r3, r3, r2
   1162c:	add	r3, r3, r2
   11630:	asr	r1, r3, #11
   11634:	asr	r3, r2, #31
   11638:	sub	r3, r1, r3
   1163c:	mov	r1, #3600	; 0xe10
   11640:	mul	r3, r1, r3
   11644:	sub	r3, r2, r3
   11648:	movw	r2, #34953	; 0x8889
   1164c:	movt	r2, #34952	; 0x8888
   11650:	smull	r1, r2, r2, r3
   11654:	add	r2, r2, r3
   11658:	asr	r2, r2, #5
   1165c:	asr	r3, r3, #31
   11660:	sub	r3, r2, r3
   11664:	mov	r2, r0
   11668:	movw	r1, #35980	; 0x8c8c
   1166c:	movt	r1, #1
   11670:	movw	r0, #41380	; 0xa1a4
   11674:	movt	r0, #2
   11678:	bl	11124 <sprintf@plt>
   1167c:	movw	r3, #41380	; 0xa1a4
   11680:	movt	r3, #2
   11684:	b	11698 <__assert_fail@plt+0x514>
   11688:	movw	r0, #35992	; 0x8c98
   1168c:	movt	r0, #1
   11690:	bl	11058 <gettext@plt>
   11694:	mov	r3, r0
   11698:	mov	r0, r3
   1169c:	sub	sp, fp, #4
   116a0:	ldr	fp, [sp]
   116a4:	add	sp, sp, #4
   116a8:	pop	{pc}		; (ldr pc, [sp], #4)
   116ac:	str	fp, [sp, #-8]!
   116b0:	str	lr, [sp, #4]
   116b4:	add	fp, sp, #4
   116b8:	sub	sp, sp, #16
   116bc:	str	r0, [fp, #-16]
   116c0:	ldr	r3, [fp, #-16]
   116c4:	ldr	r3, [r3, #340]	; 0x154
   116c8:	str	r3, [fp, #-12]
   116cc:	sub	r3, fp, #12
   116d0:	mov	r0, r3
   116d4:	bl	11010 <localtime@plt>
   116d8:	str	r0, [fp, #-8]
   116dc:	ldr	r3, [fp, #-8]
   116e0:	cmp	r3, #0
   116e4:	beq	11714 <__assert_fail@plt+0x590>
   116e8:	movw	r3, #41372	; 0xa19c
   116ec:	movt	r3, #2
   116f0:	ldr	r2, [r3]
   116f4:	ldr	r3, [fp, #-8]
   116f8:	mov	r1, #33	; 0x21
   116fc:	movw	r0, #41388	; 0xa1ac
   11700:	movt	r0, #2
   11704:	bl	10ff8 <strftime@plt>
   11708:	movw	r3, #41388	; 0xa1ac
   1170c:	movt	r3, #2
   11710:	b	1172c <__assert_fail@plt+0x5a8>
   11714:	ldr	r3, [fp, #-12]
   11718:	movw	r1, #41388	; 0xa1ac
   1171c:	movt	r1, #2
   11720:	mov	r0, r3
   11724:	bl	11444 <__assert_fail@plt+0x2c0>
   11728:	mov	r3, r0
   1172c:	mov	r0, r3
   11730:	sub	sp, fp, #4
   11734:	ldr	fp, [sp]
   11738:	add	sp, sp, #4
   1173c:	pop	{pc}		; (ldr pc, [sp], #4)
   11740:	str	r4, [sp, #-12]!
   11744:	str	fp, [sp, #4]
   11748:	str	lr, [sp, #8]
   1174c:	add	fp, sp, #8
   11750:	sub	sp, sp, #100	; 0x64
   11754:	str	r0, [fp, #-56]	; 0xffffffc8
   11758:	str	r1, [fp, #-60]	; 0xffffffc4
   1175c:	str	r3, [fp, #-68]	; 0xffffffbc
   11760:	mov	r3, r2
   11764:	strb	r3, [fp, #-61]	; 0xffffffc3
   11768:	movw	r3, #41248	; 0xa120
   1176c:	movt	r3, #2
   11770:	ldrb	r2, [fp, #-61]	; 0xffffffc3
   11774:	strb	r2, [r3, #1]
   11778:	movw	r3, #41359	; 0xa18f
   1177c:	movt	r3, #2
   11780:	ldrb	r3, [r3]
   11784:	cmp	r3, #0
   11788:	beq	117d8 <__assert_fail@plt+0x654>
   1178c:	movw	r3, #41358	; 0xa18e
   11790:	movt	r3, #2
   11794:	ldrb	r3, [r3]
   11798:	eor	r3, r3, #1
   1179c:	uxtb	r3, r3
   117a0:	cmp	r3, #0
   117a4:	beq	117d8 <__assert_fail@plt+0x654>
   117a8:	ldr	r0, [fp, #12]
   117ac:	bl	11070 <strlen@plt>
   117b0:	mov	r3, r0
   117b4:	cmp	r3, #6
   117b8:	bhi	117d8 <__assert_fail@plt+0x654>
   117bc:	sub	r3, fp, #36	; 0x24
   117c0:	ldr	r2, [fp, #12]
   117c4:	movw	r1, #36000	; 0x8ca0
   117c8:	movt	r1, #1
   117cc:	mov	r0, r3
   117d0:	bl	11124 <sprintf@plt>
   117d4:	b	117e0 <__assert_fail@plt+0x65c>
   117d8:	mov	r3, #0
   117dc:	strb	r3, [fp, #-36]	; 0xffffffdc
   117e0:	movw	r3, #41358	; 0xa18e
   117e4:	movt	r3, #2
   117e8:	ldrb	r3, [r3]
   117ec:	eor	r3, r3, #1
   117f0:	uxtb	r3, r3
   117f4:	cmp	r3, #0
   117f8:	beq	1182c <__assert_fail@plt+0x6a8>
   117fc:	ldr	r0, [fp, #16]
   11800:	bl	11070 <strlen@plt>
   11804:	mov	r3, r0
   11808:	cmp	r3, #11
   1180c:	bhi	1182c <__assert_fail@plt+0x6a8>
   11810:	sub	r3, fp, #52	; 0x34
   11814:	ldr	r2, [fp, #16]
   11818:	movw	r1, #36008	; 0x8ca8
   1181c:	movt	r1, #1
   11820:	mov	r0, r3
   11824:	bl	11124 <sprintf@plt>
   11828:	b	11834 <__assert_fail@plt+0x6b0>
   1182c:	mov	r3, #0
   11830:	strb	r3, [fp, #-52]	; 0xffffffcc
   11834:	movw	r3, #41362	; 0xa192
   11838:	movt	r3, #2
   1183c:	ldrb	r3, [r3]
   11840:	cmp	r3, #0
   11844:	beq	11878 <__assert_fail@plt+0x6f4>
   11848:	ldr	r0, [fp, #24]
   1184c:	bl	11070 <strlen@plt>
   11850:	mov	r3, r0
   11854:	cmp	r3, #11
   11858:	bls	11870 <__assert_fail@plt+0x6ec>
   1185c:	ldr	r0, [fp, #24]
   11860:	bl	11070 <strlen@plt>
   11864:	mov	r3, r0
   11868:	add	r3, r3, #2
   1186c:	b	1187c <__assert_fail@plt+0x6f8>
   11870:	mov	r3, #14
   11874:	b	1187c <__assert_fail@plt+0x6f8>
   11878:	mov	r3, #1
   1187c:	mov	r0, r3
   11880:	bl	17408 <__assert_fail@plt+0x6284>
   11884:	mov	r3, r0
   11888:	str	r3, [fp, #-20]	; 0xffffffec
   1188c:	movw	r3, #41362	; 0xa192
   11890:	movt	r3, #2
   11894:	ldrb	r3, [r3]
   11898:	cmp	r3, #0
   1189c:	beq	118b8 <__assert_fail@plt+0x734>
   118a0:	ldr	r2, [fp, #24]
   118a4:	movw	r1, #36016	; 0x8cb0
   118a8:	movt	r1, #1
   118ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   118b0:	bl	11124 <sprintf@plt>
   118b4:	b	118c4 <__assert_fail@plt+0x740>
   118b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   118bc:	mov	r2, #0
   118c0:	strb	r2, [r3]
   118c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   118c8:	cmp	r3, #0
   118cc:	beq	118d8 <__assert_fail@plt+0x754>
   118d0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   118d4:	b	118e0 <__assert_fail@plt+0x75c>
   118d8:	movw	r2, #36024	; 0x8cb8
   118dc:	movt	r2, #1
   118e0:	movw	r3, #41361	; 0xa191
   118e4:	movt	r3, #2
   118e8:	ldrb	r3, [r3]
   118ec:	cmp	r3, #0
   118f0:	beq	11900 <__assert_fail@plt+0x77c>
   118f4:	movw	r3, #41248	; 0xa120
   118f8:	movt	r3, #2
   118fc:	b	11908 <__assert_fail@plt+0x784>
   11900:	movw	r3, #35320	; 0x89f8
   11904:	movt	r3, #1
   11908:	movw	r1, #41376	; 0xa1a0
   1190c:	movt	r1, #2
   11910:	ldr	r1, [r1]
   11914:	sub	ip, fp, #28
   11918:	ldr	r0, [fp, #-20]	; 0xffffffec
   1191c:	str	r0, [sp, #32]
   11920:	ldr	r0, [fp, #20]
   11924:	str	r0, [sp, #28]
   11928:	sub	r0, fp, #52	; 0x34
   1192c:	str	r0, [sp, #24]
   11930:	sub	r0, fp, #36	; 0x24
   11934:	str	r0, [sp, #20]
   11938:	ldr	r0, [fp, #8]
   1193c:	str	r0, [sp, #16]
   11940:	str	r1, [sp, #12]
   11944:	ldr	r1, [fp, #4]
   11948:	str	r1, [sp, #8]
   1194c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   11950:	str	r1, [sp, #4]
   11954:	str	r3, [sp]
   11958:	mov	r3, r2
   1195c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11960:	movw	r1, #36032	; 0x8cc0
   11964:	movt	r1, #1
   11968:	mov	r0, ip
   1196c:	bl	110d0 <asprintf@plt>
   11970:	str	r0, [fp, #-24]	; 0xffffffe8
   11974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11978:	cmn	r3, #1
   1197c:	bne	11984 <__assert_fail@plt+0x800>
   11980:	bl	17c7c <__assert_fail@plt+0x6af8>
   11984:	ldr	r4, [fp, #-28]	; 0xffffffe4
   11988:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1198c:	mov	r0, r3
   11990:	bl	11070 <strlen@plt>
   11994:	mov	r3, r0
   11998:	add	r3, r4, r3
   1199c:	str	r3, [fp, #-16]
   119a0:	ldr	r3, [fp, #-16]
   119a4:	sub	r3, r3, #1
   119a8:	str	r3, [fp, #-16]
   119ac:	ldr	r3, [fp, #-16]
   119b0:	ldrb	r3, [r3]
   119b4:	cmp	r3, #32
   119b8:	beq	119a0 <__assert_fail@plt+0x81c>
   119bc:	ldr	r3, [fp, #-16]
   119c0:	add	r3, r3, #1
   119c4:	mov	r2, #0
   119c8:	strb	r2, [r3]
   119cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   119d0:	mov	r0, r3
   119d4:	bl	10fd4 <puts@plt>
   119d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   119dc:	mov	r0, r3
   119e0:	bl	13b44 <__assert_fail@plt+0x29c0>
   119e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   119e8:	bl	13b44 <__assert_fail@plt+0x29c0>
   119ec:	nop	{0}
   119f0:	sub	sp, fp, #8
   119f4:	ldr	r4, [sp]
   119f8:	ldr	fp, [sp, #4]
   119fc:	add	sp, sp, #8
   11a00:	pop	{pc}		; (ldr pc, [sp], #4)
   11a04:	push	{fp}		; (str fp, [sp, #-4]!)
   11a08:	add	fp, sp, #0
   11a0c:	sub	sp, sp, #12
   11a10:	str	r0, [fp, #-8]
   11a14:	ldr	r3, [fp, #-8]
   11a18:	ldr	r3, [r3, #16]
   11a1c:	and	r3, r3, #16
   11a20:	cmp	r3, #0
   11a24:	movne	r3, #1
   11a28:	moveq	r3, #0
   11a2c:	uxtb	r3, r3
   11a30:	mov	r0, r3
   11a34:	add	sp, fp, #0
   11a38:	pop	{fp}		; (ldr fp, [sp], #4)
   11a3c:	bx	lr
   11a40:	strd	r4, [sp, #-16]!
   11a44:	str	fp, [sp, #8]
   11a48:	str	lr, [sp, #12]
   11a4c:	add	fp, sp, #12
   11a50:	sub	sp, sp, #480	; 0x1e0
   11a54:	str	r0, [fp, #-464]	; 0xfffffe30
   11a58:	str	r1, [fp, #-468]	; 0xfffffe2c
   11a5c:	sub	r3, fp, #188	; 0xbc
   11a60:	str	r3, [fp, #-24]	; 0xffffffe8
   11a64:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11a68:	ldr	r2, [r3, #4]
   11a6c:	sub	r3, fp, #200	; 0xc8
   11a70:	movw	r1, #36068	; 0x8ce4
   11a74:	movt	r1, #1
   11a78:	mov	r0, r3
   11a7c:	bl	11124 <sprintf@plt>
   11a80:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11a84:	ldrb	r3, [r3, #8]
   11a88:	cmp	r3, #47	; 0x2f
   11a8c:	beq	11ab8 <__assert_fail@plt+0x934>
   11a90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11a94:	movw	r3, #36072	; 0x8ce8
   11a98:	movt	r3, #1
   11a9c:	ldr	r1, [r3]
   11aa0:	str	r1, [r2]
   11aa4:	ldrh	r3, [r3, #4]
   11aa8:	strh	r3, [r2, #4]
   11aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ab0:	add	r3, r3, #5
   11ab4:	str	r3, [fp, #-24]	; 0xffffffe8
   11ab8:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11abc:	add	r3, r3, #8
   11ac0:	mov	r2, #32
   11ac4:	mov	r1, r3
   11ac8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11acc:	bl	11488 <__assert_fail@plt+0x304>
   11ad0:	sub	r2, fp, #140	; 0x8c
   11ad4:	sub	r3, fp, #188	; 0xbc
   11ad8:	mov	r1, r2
   11adc:	mov	r0, r3
   11ae0:	bl	188e4 <__assert_fail@plt+0x7760>
   11ae4:	mov	r3, r0
   11ae8:	cmp	r3, #0
   11aec:	bne	11b24 <__assert_fail@plt+0x9a0>
   11af0:	sub	r3, fp, #140	; 0x8c
   11af4:	mov	r0, r3
   11af8:	bl	11a04 <__assert_fail@plt+0x880>
   11afc:	mov	r3, r0
   11b00:	cmp	r3, #0
   11b04:	beq	11b10 <__assert_fail@plt+0x98c>
   11b08:	mov	r3, #43	; 0x2b
   11b0c:	b	11b14 <__assert_fail@plt+0x990>
   11b10:	mov	r3, #45	; 0x2d
   11b14:	strb	r3, [fp, #-17]	; 0xffffffef
   11b18:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11b1c:	str	r3, [fp, #-16]
   11b20:	b	11b34 <__assert_fail@plt+0x9b0>
   11b24:	mov	r3, #63	; 0x3f
   11b28:	strb	r3, [fp, #-17]	; 0xffffffef
   11b2c:	mov	r3, #0
   11b30:	str	r3, [fp, #-16]
   11b34:	ldr	r3, [fp, #-16]
   11b38:	cmp	r3, #0
   11b3c:	beq	11b68 <__assert_fail@plt+0x9e4>
   11b40:	ldr	r1, [fp, #-468]	; 0xfffffe2c
   11b44:	ldr	r0, [fp, #-16]
   11b48:	bl	11514 <__assert_fail@plt+0x390>
   11b4c:	mov	r3, r0
   11b50:	sub	r0, fp, #148	; 0x94
   11b54:	mov	r2, #6
   11b58:	movw	r1, #36080	; 0x8cf0
   11b5c:	movt	r1, #1
   11b60:	bl	11124 <sprintf@plt>
   11b64:	b	11b7c <__assert_fail@plt+0x9f8>
   11b68:	sub	r3, fp, #148	; 0x94
   11b6c:	movw	r1, #36088	; 0x8cf8
   11b70:	movt	r1, #1
   11b74:	mov	r0, r3
   11b78:	bl	11124 <sprintf@plt>
   11b7c:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11b80:	ldrb	r3, [r3, #76]	; 0x4c
   11b84:	cmp	r3, #0
   11b88:	beq	11db4 <__assert_fail@plt+0xc30>
   11b8c:	mov	r3, #0
   11b90:	str	r3, [fp, #-28]	; 0xffffffe4
   11b94:	mov	r3, #0
   11b98:	str	r3, [fp, #-32]	; 0xffffffe0
   11b9c:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11ba0:	add	r1, r3, #76	; 0x4c
   11ba4:	sub	r3, fp, #460	; 0x1cc
   11ba8:	mov	r2, #256	; 0x100
   11bac:	mov	r0, r3
   11bb0:	bl	11488 <__assert_fail@plt+0x304>
   11bb4:	sub	r3, fp, #460	; 0x1cc
   11bb8:	mov	r1, #58	; 0x3a
   11bbc:	mov	r0, r3
   11bc0:	bl	1107c <strchr@plt>
   11bc4:	str	r0, [fp, #-32]	; 0xffffffe0
   11bc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11bcc:	cmp	r3, #0
   11bd0:	beq	11be8 <__assert_fail@plt+0xa64>
   11bd4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11bd8:	add	r2, r3, #1
   11bdc:	str	r2, [fp, #-32]	; 0xffffffe0
   11be0:	mov	r2, #0
   11be4:	strb	r2, [r3]
   11be8:	ldrb	r3, [fp, #-460]	; 0xfffffe34
   11bec:	cmp	r3, #0
   11bf0:	beq	11c1c <__assert_fail@plt+0xa98>
   11bf4:	movw	r3, #41356	; 0xa18c
   11bf8:	movt	r3, #2
   11bfc:	ldrb	r3, [r3]
   11c00:	cmp	r3, #0
   11c04:	beq	11c1c <__assert_fail@plt+0xa98>
   11c08:	sub	r3, fp, #460	; 0x1cc
   11c0c:	mov	r0, r3
   11c10:	bl	13828 <__assert_fail@plt+0x26a4>
   11c14:	mov	r3, r0
   11c18:	str	r3, [fp, #-28]	; 0xffffffe4
   11c1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11c20:	cmp	r3, #0
   11c24:	bne	11c30 <__assert_fail@plt+0xaac>
   11c28:	sub	r3, fp, #460	; 0x1cc
   11c2c:	str	r3, [fp, #-28]	; 0xffffffe4
   11c30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c34:	cmp	r3, #0
   11c38:	beq	11cfc <__assert_fail@plt+0xb78>
   11c3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c40:	bl	11070 <strlen@plt>
   11c44:	mov	r4, r0
   11c48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11c4c:	bl	11070 <strlen@plt>
   11c50:	mov	r3, r0
   11c54:	add	r3, r4, r3
   11c58:	add	r2, r3, #4
   11c5c:	movw	r3, #41424	; 0xa1d0
   11c60:	movt	r3, #2
   11c64:	ldr	r3, [r3]
   11c68:	cmp	r2, r3
   11c6c:	bls	11cd8 <__assert_fail@plt+0xb54>
   11c70:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11c74:	bl	11070 <strlen@plt>
   11c78:	mov	r4, r0
   11c7c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11c80:	bl	11070 <strlen@plt>
   11c84:	mov	r3, r0
   11c88:	add	r3, r4, r3
   11c8c:	add	r2, r3, #4
   11c90:	movw	r3, #41424	; 0xa1d0
   11c94:	movt	r3, #2
   11c98:	str	r2, [r3]
   11c9c:	movw	r3, #41428	; 0xa1d4
   11ca0:	movt	r3, #2
   11ca4:	ldr	r3, [r3]
   11ca8:	mov	r0, r3
   11cac:	bl	13b44 <__assert_fail@plt+0x29c0>
   11cb0:	movw	r3, #41424	; 0xa1d0
   11cb4:	movt	r3, #2
   11cb8:	ldr	r3, [r3]
   11cbc:	mov	r0, r3
   11cc0:	bl	17408 <__assert_fail@plt+0x6284>
   11cc4:	mov	r3, r0
   11cc8:	mov	r2, r3
   11ccc:	movw	r3, #41428	; 0xa1d4
   11cd0:	movt	r3, #2
   11cd4:	str	r2, [r3]
   11cd8:	movw	r3, #41428	; 0xa1d4
   11cdc:	movt	r3, #2
   11ce0:	ldr	r0, [r3]
   11ce4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ce8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11cec:	movw	r1, #36092	; 0x8cfc
   11cf0:	movt	r1, #1
   11cf4:	bl	11124 <sprintf@plt>
   11cf8:	b	11d98 <__assert_fail@plt+0xc14>
   11cfc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11d00:	bl	11070 <strlen@plt>
   11d04:	mov	r3, r0
   11d08:	add	r2, r3, #3
   11d0c:	movw	r3, #41424	; 0xa1d0
   11d10:	movt	r3, #2
   11d14:	ldr	r3, [r3]
   11d18:	cmp	r2, r3
   11d1c:	bls	11d78 <__assert_fail@plt+0xbf4>
   11d20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11d24:	bl	11070 <strlen@plt>
   11d28:	mov	r3, r0
   11d2c:	add	r2, r3, #3
   11d30:	movw	r3, #41424	; 0xa1d0
   11d34:	movt	r3, #2
   11d38:	str	r2, [r3]
   11d3c:	movw	r3, #41428	; 0xa1d4
   11d40:	movt	r3, #2
   11d44:	ldr	r3, [r3]
   11d48:	mov	r0, r3
   11d4c:	bl	13b44 <__assert_fail@plt+0x29c0>
   11d50:	movw	r3, #41424	; 0xa1d0
   11d54:	movt	r3, #2
   11d58:	ldr	r3, [r3]
   11d5c:	mov	r0, r3
   11d60:	bl	17408 <__assert_fail@plt+0x6284>
   11d64:	mov	r3, r0
   11d68:	mov	r2, r3
   11d6c:	movw	r3, #41428	; 0xa1d4
   11d70:	movt	r3, #2
   11d74:	str	r2, [r3]
   11d78:	movw	r3, #41428	; 0xa1d4
   11d7c:	movt	r3, #2
   11d80:	ldr	r3, [r3]
   11d84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11d88:	movw	r1, #36100	; 0x8d04
   11d8c:	movt	r1, #1
   11d90:	mov	r0, r3
   11d94:	bl	11124 <sprintf@plt>
   11d98:	sub	r3, fp, #460	; 0x1cc
   11d9c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11da0:	cmp	r2, r3
   11da4:	beq	11e28 <__assert_fail@plt+0xca4>
   11da8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11dac:	bl	13b44 <__assert_fail@plt+0x29c0>
   11db0:	b	11e28 <__assert_fail@plt+0xca4>
   11db4:	movw	r3, #41424	; 0xa1d0
   11db8:	movt	r3, #2
   11dbc:	ldr	r3, [r3]
   11dc0:	cmp	r3, #0
   11dc4:	bne	11e14 <__assert_fail@plt+0xc90>
   11dc8:	movw	r3, #41424	; 0xa1d0
   11dcc:	movt	r3, #2
   11dd0:	mov	r2, #1
   11dd4:	str	r2, [r3]
   11dd8:	movw	r3, #41428	; 0xa1d4
   11ddc:	movt	r3, #2
   11de0:	ldr	r3, [r3]
   11de4:	mov	r0, r3
   11de8:	bl	13b44 <__assert_fail@plt+0x29c0>
   11dec:	movw	r3, #41424	; 0xa1d0
   11df0:	movt	r3, #2
   11df4:	ldr	r3, [r3]
   11df8:	mov	r0, r3
   11dfc:	bl	17408 <__assert_fail@plt+0x6284>
   11e00:	mov	r3, r0
   11e04:	mov	r2, r3
   11e08:	movw	r3, #41428	; 0xa1d4
   11e0c:	movt	r3, #2
   11e10:	str	r2, [r3]
   11e14:	movw	r3, #41428	; 0xa1d4
   11e18:	movt	r3, #2
   11e1c:	ldr	r3, [r3]
   11e20:	mov	r2, #0
   11e24:	strb	r2, [r3]
   11e28:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11e2c:	add	r5, r3, #44	; 0x2c
   11e30:	ldr	r3, [fp, #-464]	; 0xfffffe30
   11e34:	add	r4, r3, #8
   11e38:	ldr	r0, [fp, #-464]	; 0xfffffe30
   11e3c:	bl	116ac <__assert_fail@plt+0x528>
   11e40:	movw	r3, #41428	; 0xa1d4
   11e44:	movt	r3, #2
   11e48:	ldr	r3, [r3]
   11e4c:	cmp	r3, #0
   11e50:	beq	11e64 <__assert_fail@plt+0xce0>
   11e54:	movw	r3, #41428	; 0xa1d4
   11e58:	movt	r3, #2
   11e5c:	ldr	r3, [r3]
   11e60:	b	11e6c <__assert_fail@plt+0xce8>
   11e64:	movw	r3, #35320	; 0x89f8
   11e68:	movt	r3, #1
   11e6c:	ldrb	r1, [fp, #-17]	; 0xffffffef
   11e70:	movw	r2, #35320	; 0x89f8
   11e74:	movt	r2, #1
   11e78:	str	r2, [sp, #20]
   11e7c:	str	r3, [sp, #16]
   11e80:	sub	r3, fp, #200	; 0xc8
   11e84:	str	r3, [sp, #12]
   11e88:	sub	r3, fp, #148	; 0x94
   11e8c:	str	r3, [sp, #8]
   11e90:	str	r0, [sp, #4]
   11e94:	str	r4, [sp]
   11e98:	mov	r3, #32
   11e9c:	mov	r2, r1
   11ea0:	mov	r1, r5
   11ea4:	mov	r0, #32
   11ea8:	bl	11740 <__assert_fail@plt+0x5bc>
   11eac:	nop	{0}
   11eb0:	sub	sp, fp, #12
   11eb4:	ldrd	r4, [sp]
   11eb8:	ldr	fp, [sp, #8]
   11ebc:	add	sp, sp, #12
   11ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ec4:	str	r4, [sp, #-12]!
   11ec8:	str	fp, [sp, #4]
   11ecc:	str	lr, [sp, #8]
   11ed0:	add	fp, sp, #8
   11ed4:	sub	sp, sp, #36	; 0x24
   11ed8:	str	r0, [fp, #-16]
   11edc:	movw	r0, #36108	; 0x8d0c
   11ee0:	movt	r0, #1
   11ee4:	bl	11058 <gettext@plt>
   11ee8:	mov	r4, r0
   11eec:	ldr	r0, [fp, #-16]
   11ef0:	bl	116ac <__assert_fail@plt+0x528>
   11ef4:	mov	r2, r0
   11ef8:	movw	r3, #35320	; 0x89f8
   11efc:	movt	r3, #1
   11f00:	str	r3, [sp, #20]
   11f04:	movw	r3, #35320	; 0x89f8
   11f08:	movt	r3, #1
   11f0c:	str	r3, [sp, #16]
   11f10:	movw	r3, #35320	; 0x89f8
   11f14:	movt	r3, #1
   11f18:	str	r3, [sp, #12]
   11f1c:	movw	r3, #35320	; 0x89f8
   11f20:	movt	r3, #1
   11f24:	str	r3, [sp, #8]
   11f28:	str	r2, [sp, #4]
   11f2c:	str	r4, [sp]
   11f30:	mvn	r3, #0
   11f34:	mov	r2, #32
   11f38:	movw	r1, #35320	; 0x89f8
   11f3c:	movt	r1, #1
   11f40:	mvn	r0, #0
   11f44:	bl	11740 <__assert_fail@plt+0x5bc>
   11f48:	nop	{0}
   11f4c:	sub	sp, fp, #8
   11f50:	ldr	r4, [sp]
   11f54:	ldr	fp, [sp, #4]
   11f58:	add	sp, sp, #8
   11f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f60:	str	fp, [sp, #-8]!
   11f64:	str	lr, [sp, #4]
   11f68:	add	fp, sp, #4
   11f6c:	sub	sp, sp, #24
   11f70:	str	r0, [fp, #-24]	; 0xffffffe8
   11f74:	mov	r3, #4
   11f78:	str	r3, [fp, #-8]
   11f7c:	movw	r0, #36120	; 0x8d18
   11f80:	movt	r0, #1
   11f84:	bl	11058 <gettext@plt>
   11f88:	mov	r3, r0
   11f8c:	mov	r0, r3
   11f90:	bl	11070 <strlen@plt>
   11f94:	mov	r2, r0
   11f98:	ldr	r3, [fp, #-8]
   11f9c:	add	r3, r2, r3
   11fa0:	add	r3, r3, #1
   11fa4:	mov	r0, r3
   11fa8:	bl	17408 <__assert_fail@plt+0x6284>
   11fac:	mov	r3, r0
   11fb0:	str	r3, [fp, #-12]
   11fb4:	movw	r0, #36120	; 0x8d18
   11fb8:	movt	r0, #1
   11fbc:	bl	11058 <gettext@plt>
   11fc0:	mov	r3, r0
   11fc4:	mov	r1, r3
   11fc8:	ldr	r0, [fp, #-12]
   11fcc:	bl	10f2c <stpcpy@plt>
   11fd0:	str	r0, [fp, #-16]
   11fd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fd8:	add	r3, r3, #40	; 0x28
   11fdc:	ldr	r2, [fp, #-8]
   11fe0:	mov	r1, r3
   11fe4:	ldr	r0, [fp, #-16]
   11fe8:	bl	11488 <__assert_fail@plt+0x304>
   11fec:	ldr	r3, [fp, #-12]
   11ff0:	mov	r0, r3
   11ff4:	sub	sp, fp, #4
   11ff8:	ldr	fp, [sp]
   11ffc:	add	sp, sp, #4
   12000:	pop	{pc}		; (ldr pc, [sp], #4)
   12004:	strd	r4, [sp, #-20]!	; 0xffffffec
   12008:	str	r6, [sp, #8]
   1200c:	str	fp, [sp, #12]
   12010:	str	lr, [sp, #16]
   12014:	add	fp, sp, #16
   12018:	sub	sp, sp, #52	; 0x34
   1201c:	str	r0, [fp, #-40]	; 0xffffffd8
   12020:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12024:	bl	11f60 <__assert_fail@plt+0xddc>
   12028:	str	r0, [fp, #-24]	; 0xffffffe8
   1202c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12030:	ldr	r2, [r3, #4]
   12034:	sub	r3, fp, #36	; 0x24
   12038:	movw	r1, #36068	; 0x8ce4
   1203c:	movt	r1, #1
   12040:	mov	r0, r3
   12044:	bl	11124 <sprintf@plt>
   12048:	movw	r3, #41432	; 0xa1d8
   1204c:	movt	r3, #2
   12050:	ldr	r3, [r3]
   12054:	cmp	r3, #0
   12058:	bne	120b8 <__assert_fail@plt+0xf34>
   1205c:	movw	r0, #36124	; 0x8d1c
   12060:	movt	r0, #1
   12064:	bl	11058 <gettext@plt>
   12068:	mov	r3, r0
   1206c:	mov	r0, r3
   12070:	bl	11070 <strlen@plt>
   12074:	mov	r4, r0
   12078:	movw	r0, #36132	; 0x8d24
   1207c:	movt	r0, #1
   12080:	bl	11058 <gettext@plt>
   12084:	mov	r3, r0
   12088:	mov	r0, r3
   1208c:	bl	11070 <strlen@plt>
   12090:	mov	r3, r0
   12094:	add	r3, r4, r3
   12098:	add	r3, r3, #14
   1209c:	mov	r0, r3
   120a0:	bl	17408 <__assert_fail@plt+0x6284>
   120a4:	mov	r3, r0
   120a8:	mov	r2, r3
   120ac:	movw	r3, #41432	; 0xa1d8
   120b0:	movt	r3, #2
   120b4:	str	r2, [r3]
   120b8:	movw	r3, #41432	; 0xa1d8
   120bc:	movt	r3, #2
   120c0:	ldr	r4, [r3]
   120c4:	movw	r0, #36124	; 0x8d1c
   120c8:	movt	r0, #1
   120cc:	bl	11058 <gettext@plt>
   120d0:	mov	r5, r0
   120d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   120d8:	add	r3, r3, #332	; 0x14c
   120dc:	ldrsh	r3, [r3]
   120e0:	mov	r6, r3
   120e4:	movw	r0, #36132	; 0x8d24
   120e8:	movt	r0, #1
   120ec:	bl	11058 <gettext@plt>
   120f0:	mov	r2, r0
   120f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   120f8:	add	r3, r3, #332	; 0x14c
   120fc:	add	r3, r3, #2
   12100:	ldrsh	r3, [r3]
   12104:	str	r3, [sp, #4]
   12108:	str	r2, [sp]
   1210c:	mov	r3, r6
   12110:	mov	r2, r5
   12114:	movw	r1, #36140	; 0x8d2c
   12118:	movt	r1, #1
   1211c:	mov	r0, r4
   12120:	bl	11124 <sprintf@plt>
   12124:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12128:	add	r4, r3, #8
   1212c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12130:	bl	116ac <__assert_fail@plt+0x528>
   12134:	mov	r2, r0
   12138:	movw	r3, #41432	; 0xa1d8
   1213c:	movt	r3, #2
   12140:	ldr	r3, [r3]
   12144:	str	r3, [sp, #20]
   12148:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1214c:	str	r3, [sp, #16]
   12150:	sub	r3, fp, #36	; 0x24
   12154:	str	r3, [sp, #12]
   12158:	movw	r3, #35320	; 0x89f8
   1215c:	movt	r3, #1
   12160:	str	r3, [sp, #8]
   12164:	str	r2, [sp, #4]
   12168:	str	r4, [sp]
   1216c:	mov	r3, #32
   12170:	mov	r2, #32
   12174:	movw	r1, #35320	; 0x89f8
   12178:	movt	r1, #1
   1217c:	mvn	r0, #0
   12180:	bl	11740 <__assert_fail@plt+0x5bc>
   12184:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12188:	bl	13b44 <__assert_fail@plt+0x29c0>
   1218c:	nop	{0}
   12190:	sub	sp, fp, #16
   12194:	ldrd	r4, [sp]
   12198:	ldr	r6, [sp, #8]
   1219c:	ldr	fp, [sp, #12]
   121a0:	add	sp, sp, #16
   121a4:	pop	{pc}		; (ldr pc, [sp], #4)
   121a8:	strd	r4, [sp, #-16]!
   121ac:	str	fp, [sp, #8]
   121b0:	str	lr, [sp, #12]
   121b4:	add	fp, sp, #12
   121b8:	sub	sp, sp, #48	; 0x30
   121bc:	str	r0, [fp, #-32]	; 0xffffffe0
   121c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   121c4:	bl	11f60 <__assert_fail@plt+0xddc>
   121c8:	str	r0, [fp, #-16]
   121cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121d0:	ldr	r2, [r3, #4]
   121d4:	sub	r3, fp, #28
   121d8:	movw	r1, #36068	; 0x8ce4
   121dc:	movt	r1, #1
   121e0:	mov	r0, r3
   121e4:	bl	11124 <sprintf@plt>
   121e8:	movw	r0, #36152	; 0x8d38
   121ec:	movt	r0, #1
   121f0:	bl	11058 <gettext@plt>
   121f4:	mov	r5, r0
   121f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121fc:	add	r4, r3, #8
   12200:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12204:	bl	116ac <__assert_fail@plt+0x528>
   12208:	mov	r2, r0
   1220c:	movw	r3, #35320	; 0x89f8
   12210:	movt	r3, #1
   12214:	str	r3, [sp, #20]
   12218:	ldr	r3, [fp, #-16]
   1221c:	str	r3, [sp, #16]
   12220:	sub	r3, fp, #28
   12224:	str	r3, [sp, #12]
   12228:	movw	r3, #35320	; 0x89f8
   1222c:	movt	r3, #1
   12230:	str	r3, [sp, #8]
   12234:	str	r2, [sp, #4]
   12238:	str	r4, [sp]
   1223c:	mov	r3, #32
   12240:	mov	r2, #32
   12244:	mov	r1, r5
   12248:	mvn	r0, #0
   1224c:	bl	11740 <__assert_fail@plt+0x5bc>
   12250:	ldr	r0, [fp, #-16]
   12254:	bl	13b44 <__assert_fail@plt+0x29c0>
   12258:	nop	{0}
   1225c:	sub	sp, fp, #12
   12260:	ldrd	r4, [sp]
   12264:	ldr	fp, [sp, #8]
   12268:	add	sp, sp, #12
   1226c:	pop	{pc}		; (ldr pc, [sp], #4)
   12270:	str	r4, [sp, #-12]!
   12274:	str	fp, [sp, #4]
   12278:	str	lr, [sp, #8]
   1227c:	add	fp, sp, #8
   12280:	sub	sp, sp, #52	; 0x34
   12284:	str	r0, [fp, #-32]	; 0xffffffe0
   12288:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1228c:	bl	11f60 <__assert_fail@plt+0xddc>
   12290:	str	r0, [fp, #-16]
   12294:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12298:	ldr	r2, [r3, #4]
   1229c:	sub	r3, fp, #28
   122a0:	movw	r1, #36068	; 0x8ce4
   122a4:	movt	r1, #1
   122a8:	mov	r0, r3
   122ac:	bl	11124 <sprintf@plt>
   122b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122b4:	add	r4, r3, #8
   122b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   122bc:	bl	116ac <__assert_fail@plt+0x528>
   122c0:	mov	r2, r0
   122c4:	movw	r3, #35320	; 0x89f8
   122c8:	movt	r3, #1
   122cc:	str	r3, [sp, #20]
   122d0:	ldr	r3, [fp, #-16]
   122d4:	str	r3, [sp, #16]
   122d8:	sub	r3, fp, #28
   122dc:	str	r3, [sp, #12]
   122e0:	movw	r3, #35320	; 0x89f8
   122e4:	movt	r3, #1
   122e8:	str	r3, [sp, #8]
   122ec:	str	r2, [sp, #4]
   122f0:	str	r4, [sp]
   122f4:	mov	r3, #32
   122f8:	mov	r2, #32
   122fc:	movw	r1, #35320	; 0x89f8
   12300:	movt	r1, #1
   12304:	mvn	r0, #0
   12308:	bl	11740 <__assert_fail@plt+0x5bc>
   1230c:	ldr	r0, [fp, #-16]
   12310:	bl	13b44 <__assert_fail@plt+0x29c0>
   12314:	nop	{0}
   12318:	sub	sp, fp, #8
   1231c:	ldr	r4, [sp]
   12320:	ldr	fp, [sp, #4]
   12324:	add	sp, sp, #8
   12328:	pop	{pc}		; (ldr pc, [sp], #4)
   1232c:	str	r4, [sp, #-12]!
   12330:	str	fp, [sp, #4]
   12334:	str	lr, [sp, #8]
   12338:	add	fp, sp, #8
   1233c:	sub	sp, sp, #36	; 0x24
   12340:	str	r0, [fp, #-16]
   12344:	movw	r0, #36160	; 0x8d40
   12348:	movt	r0, #1
   1234c:	bl	11058 <gettext@plt>
   12350:	mov	r4, r0
   12354:	ldr	r0, [fp, #-16]
   12358:	bl	116ac <__assert_fail@plt+0x528>
   1235c:	mov	r2, r0
   12360:	movw	r3, #35320	; 0x89f8
   12364:	movt	r3, #1
   12368:	str	r3, [sp, #20]
   1236c:	movw	r3, #35320	; 0x89f8
   12370:	movt	r3, #1
   12374:	str	r3, [sp, #16]
   12378:	movw	r3, #35320	; 0x89f8
   1237c:	movt	r3, #1
   12380:	str	r3, [sp, #12]
   12384:	movw	r3, #35320	; 0x89f8
   12388:	movt	r3, #1
   1238c:	str	r3, [sp, #8]
   12390:	str	r2, [sp, #4]
   12394:	str	r4, [sp]
   12398:	mvn	r3, #0
   1239c:	mov	r2, #32
   123a0:	movw	r1, #35320	; 0x89f8
   123a4:	movt	r1, #1
   123a8:	mvn	r0, #0
   123ac:	bl	11740 <__assert_fail@plt+0x5bc>
   123b0:	nop	{0}
   123b4:	sub	sp, fp, #8
   123b8:	ldr	r4, [sp]
   123bc:	ldr	fp, [sp, #4]
   123c0:	add	sp, sp, #8
   123c4:	pop	{pc}		; (ldr pc, [sp], #4)
   123c8:	strd	r4, [sp, #-16]!
   123cc:	str	fp, [sp, #8]
   123d0:	str	lr, [sp, #12]
   123d4:	add	fp, sp, #12
   123d8:	sub	sp, sp, #40	; 0x28
   123dc:	str	r0, [fp, #-24]	; 0xffffffe8
   123e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123e4:	ldr	r3, [r3, #4]
   123e8:	add	r2, r3, #255	; 0xff
   123ec:	cmp	r3, #0
   123f0:	movlt	r3, r2
   123f4:	movge	r3, r3
   123f8:	asr	r3, r3, #8
   123fc:	strb	r3, [fp, #-13]
   12400:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12404:	ldr	r3, [r3, #4]
   12408:	rsbs	r2, r3, #0
   1240c:	uxtb	r3, r3
   12410:	uxtb	r2, r2
   12414:	rsbpl	r3, r2, #0
   12418:	strb	r3, [fp, #-14]
   1241c:	movw	r3, #41436	; 0xa1dc
   12420:	movt	r3, #2
   12424:	ldr	r3, [r3]
   12428:	cmp	r3, #0
   1242c:	bne	1246c <__assert_fail@plt+0x12e8>
   12430:	movw	r0, #36176	; 0x8d50
   12434:	movt	r0, #1
   12438:	bl	11058 <gettext@plt>
   1243c:	mov	r3, r0
   12440:	mov	r0, r3
   12444:	bl	11070 <strlen@plt>
   12448:	mov	r3, r0
   1244c:	add	r3, r3, #3
   12450:	mov	r0, r3
   12454:	bl	17408 <__assert_fail@plt+0x6284>
   12458:	mov	r3, r0
   1245c:	mov	r2, r3
   12460:	movw	r3, #41436	; 0xa1dc
   12464:	movt	r3, #2
   12468:	str	r2, [r3]
   1246c:	movw	r3, #41436	; 0xa1dc
   12470:	movt	r3, #2
   12474:	ldr	r4, [r3]
   12478:	movw	r0, #36176	; 0x8d50
   1247c:	movt	r0, #1
   12480:	bl	11058 <gettext@plt>
   12484:	mov	r2, r0
   12488:	ldrb	r3, [fp, #-14]
   1248c:	movw	r1, #36188	; 0x8d5c
   12490:	movt	r1, #1
   12494:	mov	r0, r4
   12498:	bl	11124 <sprintf@plt>
   1249c:	movw	r3, #41440	; 0xa1e0
   124a0:	movt	r3, #2
   124a4:	ldr	r3, [r3]
   124a8:	cmp	r3, #0
   124ac:	bne	124ec <__assert_fail@plt+0x1368>
   124b0:	movw	r0, #36196	; 0x8d64
   124b4:	movt	r0, #1
   124b8:	bl	11058 <gettext@plt>
   124bc:	mov	r3, r0
   124c0:	mov	r0, r3
   124c4:	bl	11070 <strlen@plt>
   124c8:	mov	r3, r0
   124cc:	add	r3, r3, #2
   124d0:	mov	r0, r3
   124d4:	bl	17408 <__assert_fail@plt+0x6284>
   124d8:	mov	r3, r0
   124dc:	mov	r2, r3
   124e0:	movw	r3, #41440	; 0xa1e0
   124e4:	movt	r3, #2
   124e8:	str	r2, [r3]
   124ec:	movw	r3, #41440	; 0xa1e0
   124f0:	movt	r3, #2
   124f4:	ldr	r4, [r3]
   124f8:	movw	r0, #36196	; 0x8d64
   124fc:	movt	r0, #1
   12500:	bl	11058 <gettext@plt>
   12504:	mov	r2, r0
   12508:	ldrb	r3, [fp, #-13]
   1250c:	cmp	r3, #78	; 0x4e
   12510:	beq	1251c <__assert_fail@plt+0x1398>
   12514:	ldrb	r3, [fp, #-13]
   12518:	b	12520 <__assert_fail@plt+0x139c>
   1251c:	mov	r3, #83	; 0x53
   12520:	movw	r1, #36204	; 0x8d6c
   12524:	movt	r1, #1
   12528:	mov	r0, r4
   1252c:	bl	11124 <sprintf@plt>
   12530:	movw	r3, #41436	; 0xa1dc
   12534:	movt	r3, #2
   12538:	ldr	r4, [r3]
   1253c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12540:	bl	116ac <__assert_fail@plt+0x528>
   12544:	mov	r5, r0
   12548:	ldrb	r3, [fp, #-13]
   1254c:	mov	r0, r3
   12550:	bl	13544 <__assert_fail@plt+0x23c0>
   12554:	mov	r3, r0
   12558:	cmp	r3, #0
   1255c:	beq	12570 <__assert_fail@plt+0x13ec>
   12560:	movw	r3, #41440	; 0xa1e0
   12564:	movt	r3, #2
   12568:	ldr	r3, [r3]
   1256c:	b	12578 <__assert_fail@plt+0x13f4>
   12570:	movw	r3, #35320	; 0x89f8
   12574:	movt	r3, #1
   12578:	movw	r2, #35320	; 0x89f8
   1257c:	movt	r2, #1
   12580:	str	r2, [sp, #20]
   12584:	str	r3, [sp, #16]
   12588:	movw	r3, #35320	; 0x89f8
   1258c:	movt	r3, #1
   12590:	str	r3, [sp, #12]
   12594:	movw	r3, #35320	; 0x89f8
   12598:	movt	r3, #1
   1259c:	str	r3, [sp, #8]
   125a0:	str	r5, [sp, #4]
   125a4:	str	r4, [sp]
   125a8:	mvn	r3, #0
   125ac:	mov	r2, #32
   125b0:	movw	r1, #35320	; 0x89f8
   125b4:	movt	r1, #1
   125b8:	mvn	r0, #0
   125bc:	bl	11740 <__assert_fail@plt+0x5bc>
   125c0:	nop	{0}
   125c4:	sub	sp, fp, #12
   125c8:	ldrd	r4, [sp]
   125cc:	ldr	fp, [sp, #8]
   125d0:	add	sp, sp, #12
   125d4:	pop	{pc}		; (ldr pc, [sp], #4)
   125d8:	str	fp, [sp, #-8]!
   125dc:	str	lr, [sp, #4]
   125e0:	add	fp, sp, #4
   125e4:	sub	sp, sp, #24
   125e8:	str	r0, [fp, #-24]	; 0xffffffe8
   125ec:	str	r1, [fp, #-28]	; 0xffffffe4
   125f0:	mov	r3, #0
   125f4:	str	r3, [fp, #-8]
   125f8:	movw	r3, #35320	; 0x89f8
   125fc:	movt	r3, #1
   12600:	str	r3, [fp, #-12]
   12604:	b	12678 <__assert_fail@plt+0x14f4>
   12608:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1260c:	ldrb	r3, [r3, #44]	; 0x2c
   12610:	cmp	r3, #0
   12614:	beq	1266c <__assert_fail@plt+0x14e8>
   12618:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1261c:	ldrsh	r3, [r3]
   12620:	cmp	r3, #7
   12624:	bne	1266c <__assert_fail@plt+0x14e8>
   12628:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1262c:	bl	16748 <__assert_fail@plt+0x55c4>
   12630:	mov	r3, r0
   12634:	str	r3, [fp, #-16]
   12638:	ldr	r2, [fp, #-16]
   1263c:	ldr	r1, [fp, #-12]
   12640:	movw	r0, #36212	; 0x8d74
   12644:	movt	r0, #1
   12648:	bl	10eb4 <printf@plt>
   1264c:	ldr	r0, [fp, #-16]
   12650:	bl	13b44 <__assert_fail@plt+0x29c0>
   12654:	movw	r3, #36220	; 0x8d7c
   12658:	movt	r3, #1
   1265c:	str	r3, [fp, #-12]
   12660:	ldr	r3, [fp, #-8]
   12664:	add	r3, r3, #1
   12668:	str	r3, [fp, #-8]
   1266c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12670:	add	r3, r3, #384	; 0x180
   12674:	str	r3, [fp, #-28]	; 0xffffffe4
   12678:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1267c:	sub	r2, r3, #1
   12680:	str	r2, [fp, #-24]	; 0xffffffe8
   12684:	cmp	r3, #0
   12688:	bne	12608 <__assert_fail@plt+0x1484>
   1268c:	movw	r0, #36224	; 0x8d80
   12690:	movt	r0, #1
   12694:	bl	11058 <gettext@plt>
   12698:	mov	r3, r0
   1269c:	ldr	r1, [fp, #-8]
   126a0:	mov	r0, r3
   126a4:	bl	10eb4 <printf@plt>
   126a8:	nop	{0}
   126ac:	sub	sp, fp, #4
   126b0:	ldr	fp, [sp]
   126b4:	add	sp, sp, #4
   126b8:	pop	{pc}		; (ldr pc, [sp], #4)
   126bc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   126c0:	strd	r6, [sp, #8]
   126c4:	strd	r8, [sp, #16]
   126c8:	str	fp, [sp, #24]
   126cc:	str	lr, [sp, #28]
   126d0:	add	fp, sp, #28
   126d4:	sub	sp, sp, #24
   126d8:	movw	r0, #36240	; 0x8d90
   126dc:	movt	r0, #1
   126e0:	bl	11058 <gettext@plt>
   126e4:	mov	r9, r0
   126e8:	movw	r0, #36248	; 0x8d98
   126ec:	movt	r0, #1
   126f0:	bl	11058 <gettext@plt>
   126f4:	mov	r4, r0
   126f8:	movw	r0, #36256	; 0x8da0
   126fc:	movt	r0, #1
   12700:	bl	11058 <gettext@plt>
   12704:	mov	r5, r0
   12708:	movw	r0, #36264	; 0x8da8
   1270c:	movt	r0, #1
   12710:	bl	11058 <gettext@plt>
   12714:	mov	r6, r0
   12718:	movw	r0, #36272	; 0x8db0
   1271c:	movt	r0, #1
   12720:	bl	11058 <gettext@plt>
   12724:	mov	r7, r0
   12728:	movw	r0, #36276	; 0x8db4
   1272c:	movt	r0, #1
   12730:	bl	11058 <gettext@plt>
   12734:	mov	r8, r0
   12738:	movw	r0, #36284	; 0x8dbc
   1273c:	movt	r0, #1
   12740:	bl	11058 <gettext@plt>
   12744:	mov	r3, r0
   12748:	str	r3, [sp, #20]
   1274c:	str	r8, [sp, #16]
   12750:	str	r7, [sp, #12]
   12754:	str	r6, [sp, #8]
   12758:	str	r5, [sp, #4]
   1275c:	str	r4, [sp]
   12760:	mvn	r3, #0
   12764:	mov	r2, #32
   12768:	mov	r1, r9
   1276c:	mvn	r0, #0
   12770:	bl	11740 <__assert_fail@plt+0x5bc>
   12774:	nop	{0}
   12778:	sub	sp, fp, #28
   1277c:	ldrd	r4, [sp]
   12780:	ldrd	r6, [sp, #8]
   12784:	ldrd	r8, [sp, #16]
   12788:	ldr	fp, [sp, #24]
   1278c:	add	sp, sp, #28
   12790:	pop	{pc}		; (ldr pc, [sp], #4)
   12794:	str	fp, [sp, #-8]!
   12798:	str	lr, [sp, #4]
   1279c:	add	fp, sp, #4
   127a0:	sub	sp, sp, #16
   127a4:	str	r0, [fp, #-16]
   127a8:	str	r1, [fp, #-20]	; 0xffffffec
   127ac:	mov	r3, #0
   127b0:	str	r3, [fp, #-8]
   127b4:	mov	r3, #-2147483648	; 0x80000000
   127b8:	str	r3, [fp, #-12]
   127bc:	movw	r3, #41360	; 0xa190
   127c0:	movt	r3, #2
   127c4:	ldrb	r3, [r3]
   127c8:	cmp	r3, #0
   127cc:	beq	127d4 <__assert_fail@plt+0x1650>
   127d0:	bl	126bc <__assert_fail@plt+0x1538>
   127d4:	movw	r3, #41370	; 0xa19a
   127d8:	movt	r3, #2
   127dc:	ldrb	r3, [r3]
   127e0:	cmp	r3, #0
   127e4:	beq	129f8 <__assert_fail@plt+0x1874>
   127e8:	mov	r0, #0
   127ec:	bl	11064 <ttyname@plt>
   127f0:	str	r0, [fp, #-8]
   127f4:	ldr	r3, [fp, #-8]
   127f8:	cmp	r3, #0
   127fc:	beq	12a10 <__assert_fail@plt+0x188c>
   12800:	mov	r2, #5
   12804:	movw	r1, #36072	; 0x8ce8
   12808:	movt	r1, #1
   1280c:	ldr	r0, [fp, #-8]
   12810:	bl	11160 <strncmp@plt>
   12814:	mov	r3, r0
   12818:	cmp	r3, #0
   1281c:	bne	129f8 <__assert_fail@plt+0x1874>
   12820:	ldr	r3, [fp, #-8]
   12824:	add	r3, r3, #5
   12828:	str	r3, [fp, #-8]
   1282c:	b	129f8 <__assert_fail@plt+0x1874>
   12830:	movw	r3, #41370	; 0xa19a
   12834:	movt	r3, #2
   12838:	ldrb	r3, [r3]
   1283c:	eor	r3, r3, #1
   12840:	uxtb	r3, r3
   12844:	cmp	r3, #0
   12848:	bne	12870 <__assert_fail@plt+0x16ec>
   1284c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12850:	add	r3, r3, #8
   12854:	mov	r2, #32
   12858:	mov	r1, r3
   1285c:	ldr	r0, [fp, #-8]
   12860:	bl	11160 <strncmp@plt>
   12864:	mov	r3, r0
   12868:	cmp	r3, #0
   1286c:	bne	129d0 <__assert_fail@plt+0x184c>
   12870:	movw	r3, #41369	; 0xa199
   12874:	movt	r3, #2
   12878:	ldrb	r3, [r3]
   1287c:	cmp	r3, #0
   12880:	beq	128b4 <__assert_fail@plt+0x1730>
   12884:	ldr	r3, [fp, #-20]	; 0xffffffec
   12888:	ldrb	r3, [r3, #44]	; 0x2c
   1288c:	cmp	r3, #0
   12890:	beq	128b4 <__assert_fail@plt+0x1730>
   12894:	ldr	r3, [fp, #-20]	; 0xffffffec
   12898:	ldrsh	r3, [r3]
   1289c:	cmp	r3, #7
   128a0:	bne	128b4 <__assert_fail@plt+0x1730>
   128a4:	ldr	r1, [fp, #-12]
   128a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   128ac:	bl	11a40 <__assert_fail@plt+0x8bc>
   128b0:	b	129d0 <__assert_fail@plt+0x184c>
   128b4:	movw	r3, #41368	; 0xa198
   128b8:	movt	r3, #2
   128bc:	ldrb	r3, [r3]
   128c0:	cmp	r3, #0
   128c4:	beq	128e4 <__assert_fail@plt+0x1760>
   128c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   128cc:	ldrsh	r3, [r3]
   128d0:	cmp	r3, #1
   128d4:	bne	128e4 <__assert_fail@plt+0x1760>
   128d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   128dc:	bl	123c8 <__assert_fail@plt+0x1244>
   128e0:	b	129d0 <__assert_fail@plt+0x184c>
   128e4:	movw	r3, #41363	; 0xa193
   128e8:	movt	r3, #2
   128ec:	ldrb	r3, [r3]
   128f0:	cmp	r3, #0
   128f4:	beq	12914 <__assert_fail@plt+0x1790>
   128f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   128fc:	ldrsh	r3, [r3]
   12900:	cmp	r3, #2
   12904:	bne	12914 <__assert_fail@plt+0x1790>
   12908:	ldr	r0, [fp, #-20]	; 0xffffffec
   1290c:	bl	11ec4 <__assert_fail@plt+0xd40>
   12910:	b	129d0 <__assert_fail@plt+0x184c>
   12914:	movw	r3, #41367	; 0xa197
   12918:	movt	r3, #2
   1291c:	ldrb	r3, [r3]
   12920:	cmp	r3, #0
   12924:	beq	12944 <__assert_fail@plt+0x17c0>
   12928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1292c:	ldrsh	r3, [r3]
   12930:	cmp	r3, #3
   12934:	bne	12944 <__assert_fail@plt+0x17c0>
   12938:	ldr	r0, [fp, #-20]	; 0xffffffec
   1293c:	bl	1232c <__assert_fail@plt+0x11a8>
   12940:	b	129d0 <__assert_fail@plt+0x184c>
   12944:	movw	r3, #41366	; 0xa196
   12948:	movt	r3, #2
   1294c:	ldrb	r3, [r3]
   12950:	cmp	r3, #0
   12954:	beq	12974 <__assert_fail@plt+0x17f0>
   12958:	ldr	r3, [fp, #-20]	; 0xffffffec
   1295c:	ldrsh	r3, [r3]
   12960:	cmp	r3, #5
   12964:	bne	12974 <__assert_fail@plt+0x17f0>
   12968:	ldr	r0, [fp, #-20]	; 0xffffffec
   1296c:	bl	12270 <__assert_fail@plt+0x10ec>
   12970:	b	129d0 <__assert_fail@plt+0x184c>
   12974:	movw	r3, #41365	; 0xa195
   12978:	movt	r3, #2
   1297c:	ldrb	r3, [r3]
   12980:	cmp	r3, #0
   12984:	beq	129a4 <__assert_fail@plt+0x1820>
   12988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1298c:	ldrsh	r3, [r3]
   12990:	cmp	r3, #6
   12994:	bne	129a4 <__assert_fail@plt+0x1820>
   12998:	ldr	r0, [fp, #-20]	; 0xffffffec
   1299c:	bl	121a8 <__assert_fail@plt+0x1024>
   129a0:	b	129d0 <__assert_fail@plt+0x184c>
   129a4:	movw	r3, #41364	; 0xa194
   129a8:	movt	r3, #2
   129ac:	ldrb	r3, [r3]
   129b0:	cmp	r3, #0
   129b4:	beq	129d0 <__assert_fail@plt+0x184c>
   129b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129bc:	ldrsh	r3, [r3]
   129c0:	cmp	r3, #8
   129c4:	bne	129d0 <__assert_fail@plt+0x184c>
   129c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   129cc:	bl	12004 <__assert_fail@plt+0xe80>
   129d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   129d4:	ldrsh	r3, [r3]
   129d8:	cmp	r3, #2
   129dc:	bne	129ec <__assert_fail@plt+0x1868>
   129e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   129e4:	ldr	r3, [r3, #340]	; 0x154
   129e8:	str	r3, [fp, #-12]
   129ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   129f0:	add	r3, r3, #384	; 0x180
   129f4:	str	r3, [fp, #-20]	; 0xffffffec
   129f8:	ldr	r3, [fp, #-16]
   129fc:	sub	r2, r3, #1
   12a00:	str	r2, [fp, #-16]
   12a04:	cmp	r3, #0
   12a08:	bne	12830 <__assert_fail@plt+0x16ac>
   12a0c:	b	12a14 <__assert_fail@plt+0x1890>
   12a10:	nop	{0}
   12a14:	sub	sp, fp, #4
   12a18:	ldr	fp, [sp]
   12a1c:	add	sp, sp, #4
   12a20:	pop	{pc}		; (ldr pc, [sp], #4)
   12a24:	str	r4, [sp, #-12]!
   12a28:	str	fp, [sp, #4]
   12a2c:	str	lr, [sp, #8]
   12a30:	add	fp, sp, #8
   12a34:	sub	sp, sp, #20
   12a38:	str	r0, [fp, #-24]	; 0xffffffe8
   12a3c:	str	r1, [fp, #-28]	; 0xffffffe4
   12a40:	sub	r2, fp, #20
   12a44:	sub	r1, fp, #16
   12a48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a4c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12a50:	bl	16904 <__assert_fail@plt+0x5780>
   12a54:	mov	r3, r0
   12a58:	cmp	r3, #0
   12a5c:	beq	12a94 <__assert_fail@plt+0x1910>
   12a60:	bl	11094 <__errno_location@plt>
   12a64:	mov	r3, r0
   12a68:	ldr	r4, [r3]
   12a6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12a70:	mov	r1, #3
   12a74:	mov	r0, #0
   12a78:	bl	16414 <__assert_fail@plt+0x5290>
   12a7c:	mov	r3, r0
   12a80:	movw	r2, #36292	; 0x8dc4
   12a84:	movt	r2, #1
   12a88:	mov	r1, r4
   12a8c:	mov	r0, #1
   12a90:	bl	10fc8 <error@plt>
   12a94:	movw	r3, #41357	; 0xa18d
   12a98:	movt	r3, #2
   12a9c:	ldrb	r3, [r3]
   12aa0:	cmp	r3, #0
   12aa4:	beq	12ac0 <__assert_fail@plt+0x193c>
   12aa8:	ldr	r3, [fp, #-16]
   12aac:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ab0:	mov	r1, r2
   12ab4:	mov	r0, r3
   12ab8:	bl	125d8 <__assert_fail@plt+0x1454>
   12abc:	b	12ad4 <__assert_fail@plt+0x1950>
   12ac0:	ldr	r3, [fp, #-16]
   12ac4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ac8:	mov	r1, r2
   12acc:	mov	r0, r3
   12ad0:	bl	12794 <__assert_fail@plt+0x1610>
   12ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ad8:	mov	r0, r3
   12adc:	bl	13b44 <__assert_fail@plt+0x29c0>
   12ae0:	nop	{0}
   12ae4:	sub	sp, fp, #8
   12ae8:	ldr	r4, [sp]
   12aec:	ldr	fp, [sp, #4]
   12af0:	add	sp, sp, #8
   12af4:	pop	{pc}		; (ldr pc, [sp], #4)
   12af8:	str	r4, [sp, #-12]!
   12afc:	str	fp, [sp, #4]
   12b00:	str	lr, [sp, #8]
   12b04:	add	fp, sp, #8
   12b08:	sub	sp, sp, #12
   12b0c:	str	r0, [fp, #-16]
   12b10:	ldr	r3, [fp, #-16]
   12b14:	cmp	r3, #0
   12b18:	beq	12b54 <__assert_fail@plt+0x19d0>
   12b1c:	movw	r3, #41344	; 0xa180
   12b20:	movt	r3, #2
   12b24:	ldr	r4, [r3]
   12b28:	movw	r0, #36296	; 0x8dc8
   12b2c:	movt	r0, #1
   12b30:	bl	11058 <gettext@plt>
   12b34:	mov	r1, r0
   12b38:	movw	r3, #41488	; 0xa210
   12b3c:	movt	r3, #2
   12b40:	ldr	r3, [r3]
   12b44:	mov	r2, r3
   12b48:	mov	r0, r4
   12b4c:	bl	11088 <fprintf@plt>
   12b50:	b	12cf0 <__assert_fail@plt+0x1b6c>
   12b54:	movw	r0, #36336	; 0x8df0
   12b58:	movt	r0, #1
   12b5c:	bl	11058 <gettext@plt>
   12b60:	mov	r2, r0
   12b64:	movw	r3, #41488	; 0xa210
   12b68:	movt	r3, #2
   12b6c:	ldr	r3, [r3]
   12b70:	mov	r1, r3
   12b74:	mov	r0, r2
   12b78:	bl	10eb4 <printf@plt>
   12b7c:	movw	r0, #36380	; 0x8e1c
   12b80:	movt	r0, #1
   12b84:	bl	11058 <gettext@plt>
   12b88:	mov	r2, r0
   12b8c:	movw	r3, #41348	; 0xa184
   12b90:	movt	r3, #2
   12b94:	ldr	r3, [r3]
   12b98:	mov	r1, r3
   12b9c:	mov	r0, r2
   12ba0:	bl	10e90 <fputs_unlocked@plt>
   12ba4:	movw	r0, #36440	; 0x8e58
   12ba8:	movt	r0, #1
   12bac:	bl	11058 <gettext@plt>
   12bb0:	mov	r2, r0
   12bb4:	movw	r3, #41348	; 0xa184
   12bb8:	movt	r3, #2
   12bbc:	ldr	r3, [r3]
   12bc0:	mov	r1, r3
   12bc4:	mov	r0, r2
   12bc8:	bl	10e90 <fputs_unlocked@plt>
   12bcc:	movw	r0, #36636	; 0x8f1c
   12bd0:	movt	r0, #1
   12bd4:	bl	11058 <gettext@plt>
   12bd8:	mov	r2, r0
   12bdc:	movw	r3, #41348	; 0xa184
   12be0:	movt	r3, #2
   12be4:	ldr	r3, [r3]
   12be8:	mov	r1, r3
   12bec:	mov	r0, r2
   12bf0:	bl	10e90 <fputs_unlocked@plt>
   12bf4:	movw	r0, #36688	; 0x8f50
   12bf8:	movt	r0, #1
   12bfc:	bl	11058 <gettext@plt>
   12c00:	mov	r2, r0
   12c04:	movw	r3, #41348	; 0xa184
   12c08:	movt	r3, #2
   12c0c:	ldr	r3, [r3]
   12c10:	mov	r1, r3
   12c14:	mov	r0, r2
   12c18:	bl	10e90 <fputs_unlocked@plt>
   12c1c:	movw	r0, #36876	; 0x900c
   12c20:	movt	r0, #1
   12c24:	bl	11058 <gettext@plt>
   12c28:	mov	r2, r0
   12c2c:	movw	r3, #41348	; 0xa184
   12c30:	movt	r3, #2
   12c34:	ldr	r3, [r3]
   12c38:	mov	r1, r3
   12c3c:	mov	r0, r2
   12c40:	bl	10e90 <fputs_unlocked@plt>
   12c44:	movw	r0, #37100	; 0x90ec
   12c48:	movt	r0, #1
   12c4c:	bl	11058 <gettext@plt>
   12c50:	mov	r2, r0
   12c54:	movw	r3, #41348	; 0xa184
   12c58:	movt	r3, #2
   12c5c:	ldr	r3, [r3]
   12c60:	mov	r1, r3
   12c64:	mov	r0, r2
   12c68:	bl	10e90 <fputs_unlocked@plt>
   12c6c:	movw	r0, #37264	; 0x9190
   12c70:	movt	r0, #1
   12c74:	bl	11058 <gettext@plt>
   12c78:	mov	r2, r0
   12c7c:	movw	r3, #41348	; 0xa184
   12c80:	movt	r3, #2
   12c84:	ldr	r3, [r3]
   12c88:	mov	r1, r3
   12c8c:	mov	r0, r2
   12c90:	bl	10e90 <fputs_unlocked@plt>
   12c94:	movw	r0, #37312	; 0x91c0
   12c98:	movt	r0, #1
   12c9c:	bl	11058 <gettext@plt>
   12ca0:	mov	r2, r0
   12ca4:	movw	r3, #41348	; 0xa184
   12ca8:	movt	r3, #2
   12cac:	ldr	r3, [r3]
   12cb0:	mov	r1, r3
   12cb4:	mov	r0, r2
   12cb8:	bl	10e90 <fputs_unlocked@plt>
   12cbc:	movw	r0, #37368	; 0x91f8
   12cc0:	movt	r0, #1
   12cc4:	bl	11058 <gettext@plt>
   12cc8:	mov	r3, r0
   12ccc:	movw	r2, #37496	; 0x9278
   12cd0:	movt	r2, #1
   12cd4:	movw	r1, #37512	; 0x9288
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, r3
   12ce0:	bl	10eb4 <printf@plt>
   12ce4:	movw	r0, #37528	; 0x9298
   12ce8:	movt	r0, #1
   12cec:	bl	11280 <__assert_fail@plt+0xfc>
   12cf0:	ldr	r0, [fp, #-16]
   12cf4:	bl	1104c <exit@plt>
   12cf8:	str	r4, [sp, #-12]!
   12cfc:	str	fp, [sp, #4]
   12d00:	str	lr, [sp, #8]
   12d04:	add	fp, sp, #8
   12d08:	sub	sp, sp, #36	; 0x24
   12d0c:	str	r0, [fp, #-24]	; 0xffffffe8
   12d10:	str	r1, [fp, #-28]	; 0xffffffe4
   12d14:	mov	r3, #1
   12d18:	strb	r3, [fp, #-13]
   12d1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d20:	ldr	r3, [r3]
   12d24:	mov	r0, r3
   12d28:	bl	13db0 <__assert_fail@plt+0x2c2c>
   12d2c:	movw	r1, #35320	; 0x89f8
   12d30:	movt	r1, #1
   12d34:	mov	r0, #6
   12d38:	bl	11100 <setlocale@plt>
   12d3c:	movw	r1, #37532	; 0x929c
   12d40:	movt	r1, #1
   12d44:	movw	r0, #35344	; 0x8a10
   12d48:	movt	r0, #1
   12d4c:	bl	11148 <bindtextdomain@plt>
   12d50:	movw	r0, #35344	; 0x8a10
   12d54:	movt	r0, #1
   12d58:	bl	10f68 <textdomain@plt>
   12d5c:	movw	r0, #14836	; 0x39f4
   12d60:	movt	r0, #1
   12d64:	bl	188cc <__assert_fail@plt+0x7748>
   12d68:	b	13128 <__assert_fail@plt+0x1fa4>
   12d6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d70:	cmp	r3, #109	; 0x6d
   12d74:	beq	12fc0 <__assert_fail@plt+0x1e3c>
   12d78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d7c:	cmp	r3, #109	; 0x6d
   12d80:	bgt	12e08 <__assert_fail@plt+0x1c84>
   12d84:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d88:	cmp	r3, #84	; 0x54
   12d8c:	beq	13060 <__assert_fail@plt+0x1edc>
   12d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d94:	cmp	r3, #84	; 0x54
   12d98:	bgt	12dc4 <__assert_fail@plt+0x1c40>
   12d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12da0:	cmn	r3, #2
   12da4:	beq	130b4 <__assert_fail@plt+0x1f30>
   12da8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dac:	cmp	r3, #72	; 0x48
   12db0:	beq	12f80 <__assert_fail@plt+0x1dfc>
   12db4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12db8:	cmn	r3, #3
   12dbc:	beq	130bc <__assert_fail@plt+0x1f38>
   12dc0:	b	13120 <__assert_fail@plt+0x1f9c>
   12dc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dc8:	cmp	r3, #98	; 0x62
   12dcc:	beq	12f28 <__assert_fail@plt+0x1da4>
   12dd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dd4:	cmp	r3, #98	; 0x62
   12dd8:	bgt	12dec <__assert_fail@plt+0x1c68>
   12ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12de0:	cmp	r3, #97	; 0x61
   12de4:	beq	12e7c <__assert_fail@plt+0x1cf8>
   12de8:	b	13120 <__assert_fail@plt+0x1f9c>
   12dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   12df0:	cmp	r3, #100	; 0x64
   12df4:	beq	12f44 <__assert_fail@plt+0x1dc0>
   12df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dfc:	cmp	r3, #108	; 0x6c
   12e00:	beq	12f94 <__assert_fail@plt+0x1e10>
   12e04:	b	13120 <__assert_fail@plt+0x1f9c>
   12e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e0c:	cmp	r3, #115	; 0x73
   12e10:	beq	13030 <__assert_fail@plt+0x1eac>
   12e14:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e18:	cmp	r3, #115	; 0x73
   12e1c:	bgt	12e48 <__assert_fail@plt+0x1cc4>
   12e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e24:	cmp	r3, #113	; 0x71
   12e28:	beq	12ff0 <__assert_fail@plt+0x1e6c>
   12e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e30:	cmp	r3, #113	; 0x71
   12e34:	bgt	13004 <__assert_fail@plt+0x1e80>
   12e38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e3c:	cmp	r3, #112	; 0x70
   12e40:	beq	12fd4 <__assert_fail@plt+0x1e50>
   12e44:	b	13120 <__assert_fail@plt+0x1f9c>
   12e48:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e4c:	cmp	r3, #117	; 0x75
   12e50:	beq	13074 <__assert_fail@plt+0x1ef0>
   12e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e58:	cmp	r3, #117	; 0x75
   12e5c:	blt	13044 <__assert_fail@plt+0x1ec0>
   12e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e64:	cmp	r3, #119	; 0x77
   12e68:	beq	13060 <__assert_fail@plt+0x1edc>
   12e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e70:	cmp	r3, #256	; 0x100
   12e74:	beq	130a0 <__assert_fail@plt+0x1f1c>
   12e78:	b	13120 <__assert_fail@plt+0x1f9c>
   12e7c:	movw	r3, #41363	; 0xa193
   12e80:	movt	r3, #2
   12e84:	mov	r2, #1
   12e88:	strb	r2, [r3]
   12e8c:	movw	r3, #41364	; 0xa194
   12e90:	movt	r3, #2
   12e94:	mov	r2, #1
   12e98:	strb	r2, [r3]
   12e9c:	movw	r3, #41365	; 0xa195
   12ea0:	movt	r3, #2
   12ea4:	mov	r2, #1
   12ea8:	strb	r2, [r3]
   12eac:	movw	r3, #41366	; 0xa196
   12eb0:	movt	r3, #2
   12eb4:	mov	r2, #1
   12eb8:	strb	r2, [r3]
   12ebc:	movw	r3, #41368	; 0xa198
   12ec0:	movt	r3, #2
   12ec4:	mov	r2, #1
   12ec8:	strb	r2, [r3]
   12ecc:	movw	r3, #41367	; 0xa197
   12ed0:	movt	r3, #2
   12ed4:	mov	r2, #1
   12ed8:	strb	r2, [r3]
   12edc:	movw	r3, #41369	; 0xa199
   12ee0:	movt	r3, #2
   12ee4:	mov	r2, #1
   12ee8:	strb	r2, [r3]
   12eec:	movw	r3, #41361	; 0xa191
   12ef0:	movt	r3, #2
   12ef4:	mov	r2, #1
   12ef8:	strb	r2, [r3]
   12efc:	movw	r3, #41359	; 0xa18f
   12f00:	movt	r3, #2
   12f04:	mov	r2, #1
   12f08:	strb	r2, [r3]
   12f0c:	movw	r3, #41362	; 0xa192
   12f10:	movt	r3, #2
   12f14:	mov	r2, #1
   12f18:	strb	r2, [r3]
   12f1c:	mov	r3, #0
   12f20:	strb	r3, [fp, #-13]
   12f24:	b	13128 <__assert_fail@plt+0x1fa4>
   12f28:	movw	r3, #41363	; 0xa193
   12f2c:	movt	r3, #2
   12f30:	mov	r2, #1
   12f34:	strb	r2, [r3]
   12f38:	mov	r3, #0
   12f3c:	strb	r3, [fp, #-13]
   12f40:	b	13128 <__assert_fail@plt+0x1fa4>
   12f44:	movw	r3, #41364	; 0xa194
   12f48:	movt	r3, #2
   12f4c:	mov	r2, #1
   12f50:	strb	r2, [r3]
   12f54:	movw	r3, #41359	; 0xa18f
   12f58:	movt	r3, #2
   12f5c:	mov	r2, #1
   12f60:	strb	r2, [r3]
   12f64:	movw	r3, #41362	; 0xa192
   12f68:	movt	r3, #2
   12f6c:	mov	r2, #1
   12f70:	strb	r2, [r3]
   12f74:	mov	r3, #0
   12f78:	strb	r3, [fp, #-13]
   12f7c:	b	13128 <__assert_fail@plt+0x1fa4>
   12f80:	movw	r3, #41360	; 0xa190
   12f84:	movt	r3, #2
   12f88:	mov	r2, #1
   12f8c:	strb	r2, [r3]
   12f90:	b	13128 <__assert_fail@plt+0x1fa4>
   12f94:	movw	r3, #41365	; 0xa195
   12f98:	movt	r3, #2
   12f9c:	mov	r2, #1
   12fa0:	strb	r2, [r3]
   12fa4:	movw	r3, #41359	; 0xa18f
   12fa8:	movt	r3, #2
   12fac:	mov	r2, #1
   12fb0:	strb	r2, [r3]
   12fb4:	mov	r3, #0
   12fb8:	strb	r3, [fp, #-13]
   12fbc:	b	13128 <__assert_fail@plt+0x1fa4>
   12fc0:	movw	r3, #41370	; 0xa19a
   12fc4:	movt	r3, #2
   12fc8:	mov	r2, #1
   12fcc:	strb	r2, [r3]
   12fd0:	b	13128 <__assert_fail@plt+0x1fa4>
   12fd4:	movw	r3, #41366	; 0xa196
   12fd8:	movt	r3, #2
   12fdc:	mov	r2, #1
   12fe0:	strb	r2, [r3]
   12fe4:	mov	r3, #0
   12fe8:	strb	r3, [fp, #-13]
   12fec:	b	13128 <__assert_fail@plt+0x1fa4>
   12ff0:	movw	r3, #41357	; 0xa18d
   12ff4:	movt	r3, #2
   12ff8:	mov	r2, #1
   12ffc:	strb	r2, [r3]
   13000:	b	13128 <__assert_fail@plt+0x1fa4>
   13004:	movw	r3, #41368	; 0xa198
   13008:	movt	r3, #2
   1300c:	mov	r2, #1
   13010:	strb	r2, [r3]
   13014:	movw	r3, #41359	; 0xa18f
   13018:	movt	r3, #2
   1301c:	mov	r2, #1
   13020:	strb	r2, [r3]
   13024:	mov	r3, #0
   13028:	strb	r3, [fp, #-13]
   1302c:	b	13128 <__assert_fail@plt+0x1fa4>
   13030:	movw	r3, #41358	; 0xa18e
   13034:	movt	r3, #2
   13038:	mov	r2, #1
   1303c:	strb	r2, [r3]
   13040:	b	13128 <__assert_fail@plt+0x1fa4>
   13044:	movw	r3, #41367	; 0xa197
   13048:	movt	r3, #2
   1304c:	mov	r2, #1
   13050:	strb	r2, [r3]
   13054:	mov	r3, #0
   13058:	strb	r3, [fp, #-13]
   1305c:	b	13128 <__assert_fail@plt+0x1fa4>
   13060:	movw	r3, #41361	; 0xa191
   13064:	movt	r3, #2
   13068:	mov	r2, #1
   1306c:	strb	r2, [r3]
   13070:	b	13128 <__assert_fail@plt+0x1fa4>
   13074:	movw	r3, #41369	; 0xa199
   13078:	movt	r3, #2
   1307c:	mov	r2, #1
   13080:	strb	r2, [r3]
   13084:	movw	r3, #41359	; 0xa18f
   13088:	movt	r3, #2
   1308c:	mov	r2, #1
   13090:	strb	r2, [r3]
   13094:	mov	r3, #0
   13098:	strb	r3, [fp, #-13]
   1309c:	b	13128 <__assert_fail@plt+0x1fa4>
   130a0:	movw	r3, #41356	; 0xa18c
   130a4:	movt	r3, #2
   130a8:	mov	r2, #1
   130ac:	strb	r2, [r3]
   130b0:	b	13128 <__assert_fail@plt+0x1fa4>
   130b4:	mov	r0, #0
   130b8:	bl	12af8 <__assert_fail@plt+0x1974>
   130bc:	movw	r3, #41348	; 0xa184
   130c0:	movt	r3, #2
   130c4:	ldr	r0, [r3]
   130c8:	movw	r3, #41252	; 0xa124
   130cc:	movt	r3, #2
   130d0:	ldr	r2, [r3]
   130d4:	mov	r3, #0
   130d8:	str	r3, [sp, #12]
   130dc:	movw	r3, #37556	; 0x92b4
   130e0:	movt	r3, #1
   130e4:	str	r3, [sp, #8]
   130e8:	movw	r3, #37572	; 0x92c4
   130ec:	movt	r3, #1
   130f0:	str	r3, [sp, #4]
   130f4:	movw	r3, #37588	; 0x92d4
   130f8:	movt	r3, #1
   130fc:	str	r3, [sp]
   13100:	mov	r3, r2
   13104:	movw	r2, #35136	; 0x8940
   13108:	movt	r2, #1
   1310c:	movw	r1, #37528	; 0x9298
   13110:	movt	r1, #1
   13114:	bl	17288 <__assert_fail@plt+0x6104>
   13118:	mov	r0, #0
   1311c:	bl	1104c <exit@plt>
   13120:	mov	r0, #1
   13124:	bl	12af8 <__assert_fail@plt+0x1974>
   13128:	mov	r3, #0
   1312c:	str	r3, [sp]
   13130:	movw	r3, #35640	; 0x8b38
   13134:	movt	r3, #1
   13138:	movw	r2, #37608	; 0x92e8
   1313c:	movt	r2, #1
   13140:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13144:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13148:	bl	11028 <getopt_long@plt>
   1314c:	str	r0, [fp, #-20]	; 0xffffffec
   13150:	ldr	r3, [fp, #-20]	; 0xffffffec
   13154:	cmn	r3, #1
   13158:	bne	12d6c <__assert_fail@plt+0x1be8>
   1315c:	ldrb	r3, [fp, #-13]
   13160:	cmp	r3, #0
   13164:	beq	13188 <__assert_fail@plt+0x2004>
   13168:	movw	r3, #41369	; 0xa199
   1316c:	movt	r3, #2
   13170:	mov	r2, #1
   13174:	strb	r2, [r3]
   13178:	movw	r3, #41358	; 0xa18e
   1317c:	movt	r3, #2
   13180:	mov	r2, #1
   13184:	strb	r2, [r3]
   13188:	movw	r3, #41362	; 0xa192
   1318c:	movt	r3, #2
   13190:	ldrb	r3, [r3]
   13194:	cmp	r3, #0
   13198:	beq	131ac <__assert_fail@plt+0x2028>
   1319c:	movw	r3, #41358	; 0xa18e
   131a0:	movt	r3, #2
   131a4:	mov	r2, #0
   131a8:	strb	r2, [r3]
   131ac:	mov	r0, #2
   131b0:	bl	13be8 <__assert_fail@plt+0x2a64>
   131b4:	mov	r3, r0
   131b8:	cmp	r3, #0
   131bc:	beq	131e8 <__assert_fail@plt+0x2064>
   131c0:	movw	r3, #41372	; 0xa19c
   131c4:	movt	r3, #2
   131c8:	movw	r2, #37624	; 0x92f8
   131cc:	movt	r2, #1
   131d0:	str	r2, [r3]
   131d4:	movw	r3, #41376	; 0xa1a0
   131d8:	movt	r3, #2
   131dc:	mov	r2, #16
   131e0:	str	r2, [r3]
   131e4:	b	1320c <__assert_fail@plt+0x2088>
   131e8:	movw	r3, #41372	; 0xa19c
   131ec:	movt	r3, #2
   131f0:	movw	r2, #37640	; 0x9308
   131f4:	movt	r2, #1
   131f8:	str	r2, [r3]
   131fc:	movw	r3, #41376	; 0xa1a0
   13200:	movt	r3, #2
   13204:	mov	r2, #12
   13208:	str	r2, [r3]
   1320c:	movw	r3, #41336	; 0xa178
   13210:	movt	r3, #2
   13214:	ldr	r3, [r3]
   13218:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1321c:	sub	r3, r2, r3
   13220:	add	r3, r3, #1
   13224:	cmp	r3, #3
   13228:	ldrls	pc, [pc, r3, lsl #2]
   1322c:	b	13290 <__assert_fail@plt+0x210c>
   13230:	andeq	r3, r1, r0, asr r2
   13234:	andeq	r3, r1, r0, asr r2
   13238:	andeq	r3, r1, r4, ror #4
   1323c:	andeq	r3, r1, r0, asr #4
   13240:	movw	r3, #41370	; 0xa19a
   13244:	movt	r3, #2
   13248:	mov	r2, #1
   1324c:	strb	r2, [r3]
   13250:	mov	r1, #1
   13254:	movw	r0, #37512	; 0x9288
   13258:	movt	r0, #1
   1325c:	bl	12a24 <__assert_fail@plt+0x18a0>
   13260:	b	132e4 <__assert_fail@plt+0x2160>
   13264:	movw	r3, #41336	; 0xa178
   13268:	movt	r3, #2
   1326c:	ldr	r3, [r3]
   13270:	lsl	r3, r3, #2
   13274:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13278:	add	r3, r2, r3
   1327c:	ldr	r3, [r3]
   13280:	mov	r1, #0
   13284:	mov	r0, r3
   13288:	bl	12a24 <__assert_fail@plt+0x18a0>
   1328c:	b	132e4 <__assert_fail@plt+0x2160>
   13290:	movw	r0, #37652	; 0x9314
   13294:	movt	r0, #1
   13298:	bl	11058 <gettext@plt>
   1329c:	mov	r4, r0
   132a0:	movw	r3, #41336	; 0xa178
   132a4:	movt	r3, #2
   132a8:	ldr	r3, [r3]
   132ac:	add	r3, r3, #2
   132b0:	lsl	r3, r3, #2
   132b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   132b8:	add	r3, r2, r3
   132bc:	ldr	r3, [r3]
   132c0:	mov	r0, r3
   132c4:	bl	16710 <__assert_fail@plt+0x558c>
   132c8:	mov	r3, r0
   132cc:	mov	r2, r4
   132d0:	mov	r1, #0
   132d4:	mov	r0, #0
   132d8:	bl	10fc8 <error@plt>
   132dc:	mov	r0, #1
   132e0:	bl	12af8 <__assert_fail@plt+0x1974>
   132e4:	mov	r3, #0
   132e8:	mov	r0, r3
   132ec:	sub	sp, fp, #8
   132f0:	ldr	r4, [sp]
   132f4:	ldr	fp, [sp, #4]
   132f8:	add	sp, sp, #8
   132fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13300:	push	{fp}		; (str fp, [sp, #-4]!)
   13304:	add	fp, sp, #0
   13308:	sub	sp, sp, #12
   1330c:	str	r0, [fp, #-8]
   13310:	ldr	r3, [fp, #-8]
   13314:	cmp	r3, #90	; 0x5a
   13318:	bgt	1333c <__assert_fail@plt+0x21b8>
   1331c:	ldr	r3, [fp, #-8]
   13320:	cmp	r3, #65	; 0x41
   13324:	bge	1334c <__assert_fail@plt+0x21c8>
   13328:	ldr	r3, [fp, #-8]
   1332c:	sub	r3, r3, #48	; 0x30
   13330:	cmp	r3, #9
   13334:	bhi	13354 <__assert_fail@plt+0x21d0>
   13338:	b	1334c <__assert_fail@plt+0x21c8>
   1333c:	ldr	r3, [fp, #-8]
   13340:	sub	r3, r3, #97	; 0x61
   13344:	cmp	r3, #25
   13348:	bhi	13354 <__assert_fail@plt+0x21d0>
   1334c:	mov	r3, #1
   13350:	b	13358 <__assert_fail@plt+0x21d4>
   13354:	mov	r3, #0
   13358:	mov	r0, r3
   1335c:	add	sp, fp, #0
   13360:	pop	{fp}		; (ldr fp, [sp], #4)
   13364:	bx	lr
   13368:	push	{fp}		; (str fp, [sp, #-4]!)
   1336c:	add	fp, sp, #0
   13370:	sub	sp, sp, #12
   13374:	str	r0, [fp, #-8]
   13378:	ldr	r3, [fp, #-8]
   1337c:	cmp	r3, #65	; 0x41
   13380:	blt	133a8 <__assert_fail@plt+0x2224>
   13384:	ldr	r3, [fp, #-8]
   13388:	cmp	r3, #90	; 0x5a
   1338c:	ble	133a0 <__assert_fail@plt+0x221c>
   13390:	ldr	r3, [fp, #-8]
   13394:	sub	r3, r3, #97	; 0x61
   13398:	cmp	r3, #25
   1339c:	bhi	133a8 <__assert_fail@plt+0x2224>
   133a0:	mov	r3, #1
   133a4:	b	133ac <__assert_fail@plt+0x2228>
   133a8:	mov	r3, #0
   133ac:	mov	r0, r3
   133b0:	add	sp, fp, #0
   133b4:	pop	{fp}		; (ldr fp, [sp], #4)
   133b8:	bx	lr
   133bc:	push	{fp}		; (str fp, [sp, #-4]!)
   133c0:	add	fp, sp, #0
   133c4:	sub	sp, sp, #12
   133c8:	str	r0, [fp, #-8]
   133cc:	ldr	r3, [fp, #-8]
   133d0:	cmp	r3, #127	; 0x7f
   133d4:	bhi	133e0 <__assert_fail@plt+0x225c>
   133d8:	mov	r3, #1
   133dc:	b	133e4 <__assert_fail@plt+0x2260>
   133e0:	mov	r3, #0
   133e4:	mov	r0, r3
   133e8:	add	sp, fp, #0
   133ec:	pop	{fp}		; (ldr fp, [sp], #4)
   133f0:	bx	lr
   133f4:	push	{fp}		; (str fp, [sp, #-4]!)
   133f8:	add	fp, sp, #0
   133fc:	sub	sp, sp, #12
   13400:	str	r0, [fp, #-8]
   13404:	ldr	r3, [fp, #-8]
   13408:	cmp	r3, #32
   1340c:	beq	1341c <__assert_fail@plt+0x2298>
   13410:	ldr	r3, [fp, #-8]
   13414:	cmp	r3, #9
   13418:	bne	13424 <__assert_fail@plt+0x22a0>
   1341c:	mov	r3, #1
   13420:	b	13428 <__assert_fail@plt+0x22a4>
   13424:	mov	r3, #0
   13428:	and	r3, r3, #1
   1342c:	uxtb	r3, r3
   13430:	mov	r0, r3
   13434:	add	sp, fp, #0
   13438:	pop	{fp}		; (ldr fp, [sp], #4)
   1343c:	bx	lr
   13440:	push	{fp}		; (str fp, [sp, #-4]!)
   13444:	add	fp, sp, #0
   13448:	sub	sp, sp, #12
   1344c:	str	r0, [fp, #-8]
   13450:	ldr	r3, [fp, #-8]
   13454:	cmp	r3, #0
   13458:	blt	1347c <__assert_fail@plt+0x22f8>
   1345c:	ldr	r3, [fp, #-8]
   13460:	cmp	r3, #31
   13464:	ble	13474 <__assert_fail@plt+0x22f0>
   13468:	ldr	r3, [fp, #-8]
   1346c:	cmp	r3, #127	; 0x7f
   13470:	bne	1347c <__assert_fail@plt+0x22f8>
   13474:	mov	r3, #1
   13478:	b	13480 <__assert_fail@plt+0x22fc>
   1347c:	mov	r3, #0
   13480:	mov	r0, r3
   13484:	add	sp, fp, #0
   13488:	pop	{fp}		; (ldr fp, [sp], #4)
   1348c:	bx	lr
   13490:	push	{fp}		; (str fp, [sp, #-4]!)
   13494:	add	fp, sp, #0
   13498:	sub	sp, sp, #12
   1349c:	str	r0, [fp, #-8]
   134a0:	ldr	r3, [fp, #-8]
   134a4:	sub	r3, r3, #48	; 0x30
   134a8:	cmp	r3, #9
   134ac:	bhi	134b8 <__assert_fail@plt+0x2334>
   134b0:	mov	r3, #1
   134b4:	b	134bc <__assert_fail@plt+0x2338>
   134b8:	mov	r3, #0
   134bc:	mov	r0, r3
   134c0:	add	sp, fp, #0
   134c4:	pop	{fp}		; (ldr fp, [sp], #4)
   134c8:	bx	lr
   134cc:	push	{fp}		; (str fp, [sp, #-4]!)
   134d0:	add	fp, sp, #0
   134d4:	sub	sp, sp, #12
   134d8:	str	r0, [fp, #-8]
   134dc:	ldr	r3, [fp, #-8]
   134e0:	sub	r3, r3, #33	; 0x21
   134e4:	cmp	r3, #93	; 0x5d
   134e8:	bhi	134f4 <__assert_fail@plt+0x2370>
   134ec:	mov	r3, #1
   134f0:	b	134f8 <__assert_fail@plt+0x2374>
   134f4:	mov	r3, #0
   134f8:	mov	r0, r3
   134fc:	add	sp, fp, #0
   13500:	pop	{fp}		; (ldr fp, [sp], #4)
   13504:	bx	lr
   13508:	push	{fp}		; (str fp, [sp, #-4]!)
   1350c:	add	fp, sp, #0
   13510:	sub	sp, sp, #12
   13514:	str	r0, [fp, #-8]
   13518:	ldr	r3, [fp, #-8]
   1351c:	sub	r3, r3, #97	; 0x61
   13520:	cmp	r3, #25
   13524:	bhi	13530 <__assert_fail@plt+0x23ac>
   13528:	mov	r3, #1
   1352c:	b	13534 <__assert_fail@plt+0x23b0>
   13530:	mov	r3, #0
   13534:	mov	r0, r3
   13538:	add	sp, fp, #0
   1353c:	pop	{fp}		; (ldr fp, [sp], #4)
   13540:	bx	lr
   13544:	push	{fp}		; (str fp, [sp, #-4]!)
   13548:	add	fp, sp, #0
   1354c:	sub	sp, sp, #12
   13550:	str	r0, [fp, #-8]
   13554:	ldr	r3, [fp, #-8]
   13558:	sub	r3, r3, #32
   1355c:	cmp	r3, #94	; 0x5e
   13560:	bhi	1356c <__assert_fail@plt+0x23e8>
   13564:	mov	r3, #1
   13568:	b	13570 <__assert_fail@plt+0x23ec>
   1356c:	mov	r3, #0
   13570:	mov	r0, r3
   13574:	add	sp, fp, #0
   13578:	pop	{fp}		; (ldr fp, [sp], #4)
   1357c:	bx	lr
   13580:	push	{fp}		; (str fp, [sp, #-4]!)
   13584:	add	fp, sp, #0
   13588:	sub	sp, sp, #12
   1358c:	str	r0, [fp, #-8]
   13590:	ldr	r3, [fp, #-8]
   13594:	cmp	r3, #64	; 0x40
   13598:	bgt	135bc <__assert_fail@plt+0x2438>
   1359c:	ldr	r3, [fp, #-8]
   135a0:	cmp	r3, #58	; 0x3a
   135a4:	bge	135e4 <__assert_fail@plt+0x2460>
   135a8:	ldr	r3, [fp, #-8]
   135ac:	sub	r3, r3, #33	; 0x21
   135b0:	cmp	r3, #14
   135b4:	bhi	135ec <__assert_fail@plt+0x2468>
   135b8:	b	135e4 <__assert_fail@plt+0x2460>
   135bc:	ldr	r3, [fp, #-8]
   135c0:	cmp	r3, #91	; 0x5b
   135c4:	blt	135ec <__assert_fail@plt+0x2468>
   135c8:	ldr	r3, [fp, #-8]
   135cc:	cmp	r3, #96	; 0x60
   135d0:	ble	135e4 <__assert_fail@plt+0x2460>
   135d4:	ldr	r3, [fp, #-8]
   135d8:	sub	r3, r3, #123	; 0x7b
   135dc:	cmp	r3, #3
   135e0:	bhi	135ec <__assert_fail@plt+0x2468>
   135e4:	mov	r3, #1
   135e8:	b	135f0 <__assert_fail@plt+0x246c>
   135ec:	mov	r3, #0
   135f0:	mov	r0, r3
   135f4:	add	sp, fp, #0
   135f8:	pop	{fp}		; (ldr fp, [sp], #4)
   135fc:	bx	lr
   13600:	push	{fp}		; (str fp, [sp, #-4]!)
   13604:	add	fp, sp, #0
   13608:	sub	sp, sp, #12
   1360c:	str	r0, [fp, #-8]
   13610:	ldr	r3, [fp, #-8]
   13614:	cmp	r3, #9
   13618:	blt	1363c <__assert_fail@plt+0x24b8>
   1361c:	ldr	r3, [fp, #-8]
   13620:	cmp	r3, #13
   13624:	ble	13634 <__assert_fail@plt+0x24b0>
   13628:	ldr	r3, [fp, #-8]
   1362c:	cmp	r3, #32
   13630:	bne	1363c <__assert_fail@plt+0x24b8>
   13634:	mov	r3, #1
   13638:	b	13640 <__assert_fail@plt+0x24bc>
   1363c:	mov	r3, #0
   13640:	mov	r0, r3
   13644:	add	sp, fp, #0
   13648:	pop	{fp}		; (ldr fp, [sp], #4)
   1364c:	bx	lr
   13650:	push	{fp}		; (str fp, [sp, #-4]!)
   13654:	add	fp, sp, #0
   13658:	sub	sp, sp, #12
   1365c:	str	r0, [fp, #-8]
   13660:	ldr	r3, [fp, #-8]
   13664:	sub	r3, r3, #65	; 0x41
   13668:	cmp	r3, #25
   1366c:	bhi	13678 <__assert_fail@plt+0x24f4>
   13670:	mov	r3, #1
   13674:	b	1367c <__assert_fail@plt+0x24f8>
   13678:	mov	r3, #0
   1367c:	mov	r0, r3
   13680:	add	sp, fp, #0
   13684:	pop	{fp}		; (ldr fp, [sp], #4)
   13688:	bx	lr
   1368c:	push	{fp}		; (str fp, [sp, #-4]!)
   13690:	add	fp, sp, #0
   13694:	sub	sp, sp, #12
   13698:	str	r0, [fp, #-8]
   1369c:	ldr	r3, [fp, #-8]
   136a0:	sub	r3, r3, #48	; 0x30
   136a4:	cmp	r3, #54	; 0x36
   136a8:	ldrls	pc, [pc, r3, lsl #2]
   136ac:	b	13794 <__assert_fail@plt+0x2610>
   136b0:	andeq	r3, r1, ip, lsl #15
   136b4:	andeq	r3, r1, ip, lsl #15
   136b8:	andeq	r3, r1, ip, lsl #15
   136bc:	andeq	r3, r1, ip, lsl #15
   136c0:	andeq	r3, r1, ip, lsl #15
   136c4:	andeq	r3, r1, ip, lsl #15
   136c8:	andeq	r3, r1, ip, lsl #15
   136cc:	andeq	r3, r1, ip, lsl #15
   136d0:	andeq	r3, r1, ip, lsl #15
   136d4:	andeq	r3, r1, ip, lsl #15
   136d8:	muleq	r1, r4, r7
   136dc:	muleq	r1, r4, r7
   136e0:	muleq	r1, r4, r7
   136e4:	muleq	r1, r4, r7
   136e8:	muleq	r1, r4, r7
   136ec:	muleq	r1, r4, r7
   136f0:	muleq	r1, r4, r7
   136f4:	andeq	r3, r1, ip, lsl #15
   136f8:	andeq	r3, r1, ip, lsl #15
   136fc:	andeq	r3, r1, ip, lsl #15
   13700:	andeq	r3, r1, ip, lsl #15
   13704:	andeq	r3, r1, ip, lsl #15
   13708:	andeq	r3, r1, ip, lsl #15
   1370c:	muleq	r1, r4, r7
   13710:	muleq	r1, r4, r7
   13714:	muleq	r1, r4, r7
   13718:	muleq	r1, r4, r7
   1371c:	muleq	r1, r4, r7
   13720:	muleq	r1, r4, r7
   13724:	muleq	r1, r4, r7
   13728:	muleq	r1, r4, r7
   1372c:	muleq	r1, r4, r7
   13730:	muleq	r1, r4, r7
   13734:	muleq	r1, r4, r7
   13738:	muleq	r1, r4, r7
   1373c:	muleq	r1, r4, r7
   13740:	muleq	r1, r4, r7
   13744:	muleq	r1, r4, r7
   13748:	muleq	r1, r4, r7
   1374c:	muleq	r1, r4, r7
   13750:	muleq	r1, r4, r7
   13754:	muleq	r1, r4, r7
   13758:	muleq	r1, r4, r7
   1375c:	muleq	r1, r4, r7
   13760:	muleq	r1, r4, r7
   13764:	muleq	r1, r4, r7
   13768:	muleq	r1, r4, r7
   1376c:	muleq	r1, r4, r7
   13770:	muleq	r1, r4, r7
   13774:	andeq	r3, r1, ip, lsl #15
   13778:	andeq	r3, r1, ip, lsl #15
   1377c:	andeq	r3, r1, ip, lsl #15
   13780:	andeq	r3, r1, ip, lsl #15
   13784:	andeq	r3, r1, ip, lsl #15
   13788:	andeq	r3, r1, ip, lsl #15
   1378c:	mov	r3, #1
   13790:	b	13798 <__assert_fail@plt+0x2614>
   13794:	mov	r3, #0
   13798:	mov	r0, r3
   1379c:	add	sp, fp, #0
   137a0:	pop	{fp}		; (ldr fp, [sp], #4)
   137a4:	bx	lr
   137a8:	push	{fp}		; (str fp, [sp, #-4]!)
   137ac:	add	fp, sp, #0
   137b0:	sub	sp, sp, #12
   137b4:	str	r0, [fp, #-8]
   137b8:	ldr	r3, [fp, #-8]
   137bc:	sub	r3, r3, #65	; 0x41
   137c0:	cmp	r3, #25
   137c4:	bhi	137d4 <__assert_fail@plt+0x2650>
   137c8:	ldr	r3, [fp, #-8]
   137cc:	add	r3, r3, #32
   137d0:	b	137d8 <__assert_fail@plt+0x2654>
   137d4:	ldr	r3, [fp, #-8]
   137d8:	mov	r0, r3
   137dc:	add	sp, fp, #0
   137e0:	pop	{fp}		; (ldr fp, [sp], #4)
   137e4:	bx	lr
   137e8:	push	{fp}		; (str fp, [sp, #-4]!)
   137ec:	add	fp, sp, #0
   137f0:	sub	sp, sp, #12
   137f4:	str	r0, [fp, #-8]
   137f8:	ldr	r3, [fp, #-8]
   137fc:	sub	r3, r3, #97	; 0x61
   13800:	cmp	r3, #25
   13804:	bhi	13814 <__assert_fail@plt+0x2690>
   13808:	ldr	r3, [fp, #-8]
   1380c:	sub	r3, r3, #32
   13810:	b	13818 <__assert_fail@plt+0x2694>
   13814:	ldr	r3, [fp, #-8]
   13818:	mov	r0, r3
   1381c:	add	sp, fp, #0
   13820:	pop	{fp}		; (ldr fp, [sp], #4)
   13824:	bx	lr
   13828:	str	fp, [sp, #-8]!
   1382c:	str	lr, [sp, #4]
   13830:	add	fp, sp, #4
   13834:	sub	sp, sp, #8
   13838:	str	r0, [fp, #-8]
   1383c:	movw	r1, #41444	; 0xa1e4
   13840:	movt	r1, #2
   13844:	ldr	r0, [fp, #-8]
   13848:	bl	13864 <__assert_fail@plt+0x26e0>
   1384c:	mov	r3, r0
   13850:	mov	r0, r3
   13854:	sub	sp, fp, #4
   13858:	ldr	fp, [sp]
   1385c:	add	sp, sp, #4
   13860:	pop	{pc}		; (ldr pc, [sp], #4)
   13864:	str	fp, [sp, #-8]!
   13868:	str	lr, [sp, #4]
   1386c:	add	fp, sp, #4
   13870:	sub	sp, sp, #24
   13874:	str	r0, [fp, #-24]	; 0xffffffe8
   13878:	str	r1, [fp, #-28]	; 0xffffffe4
   1387c:	mov	r3, #0
   13880:	str	r3, [fp, #-8]
   13884:	mov	r3, #0
   13888:	str	r3, [fp, #-16]
   1388c:	movw	r3, #41448	; 0xa1e8
   13890:	movt	r3, #2
   13894:	mov	r2, #2
   13898:	str	r2, [r3]
   1389c:	sub	r3, fp, #16
   138a0:	movw	r2, #41448	; 0xa1e8
   138a4:	movt	r2, #2
   138a8:	mov	r1, #0
   138ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   138b0:	bl	1113c <getaddrinfo@plt>
   138b4:	str	r0, [fp, #-12]
   138b8:	ldr	r3, [fp, #-12]
   138bc:	cmp	r3, #0
   138c0:	bne	13928 <__assert_fail@plt+0x27a4>
   138c4:	ldr	r3, [fp, #-16]
   138c8:	ldr	r3, [r3, #24]
   138cc:	cmp	r3, #0
   138d0:	beq	138e0 <__assert_fail@plt+0x275c>
   138d4:	ldr	r3, [fp, #-16]
   138d8:	ldr	r3, [r3, #24]
   138dc:	b	138e4 <__assert_fail@plt+0x2760>
   138e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   138e4:	mov	r0, r3
   138e8:	bl	10f44 <strdup@plt>
   138ec:	mov	r3, r0
   138f0:	str	r3, [fp, #-8]
   138f4:	ldr	r3, [fp, #-8]
   138f8:	cmp	r3, #0
   138fc:	bne	13918 <__assert_fail@plt+0x2794>
   13900:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13904:	cmp	r3, #0
   13908:	beq	13918 <__assert_fail@plt+0x2794>
   1390c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13910:	mvn	r2, #9
   13914:	str	r2, [r3]
   13918:	ldr	r3, [fp, #-16]
   1391c:	mov	r0, r3
   13920:	bl	11130 <freeaddrinfo@plt>
   13924:	b	13940 <__assert_fail@plt+0x27bc>
   13928:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1392c:	cmp	r3, #0
   13930:	beq	13940 <__assert_fail@plt+0x27bc>
   13934:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13938:	ldr	r2, [fp, #-12]
   1393c:	str	r2, [r3]
   13940:	ldr	r3, [fp, #-8]
   13944:	mov	r0, r3
   13948:	sub	sp, fp, #4
   1394c:	ldr	fp, [sp]
   13950:	add	sp, sp, #4
   13954:	pop	{pc}		; (ldr pc, [sp], #4)
   13958:	str	fp, [sp, #-8]!
   1395c:	str	lr, [sp, #4]
   13960:	add	fp, sp, #4
   13964:	movw	r3, #41444	; 0xa1e4
   13968:	movt	r3, #2
   1396c:	ldr	r3, [r3]
   13970:	mov	r0, r3
   13974:	bl	10ee4 <gai_strerror@plt>
   13978:	mov	r3, r0
   1397c:	mov	r0, r3
   13980:	sub	sp, fp, #4
   13984:	ldr	fp, [sp]
   13988:	add	sp, sp, #4
   1398c:	pop	{pc}		; (ldr pc, [sp], #4)
   13990:	push	{fp}		; (str fp, [sp, #-4]!)
   13994:	add	fp, sp, #0
   13998:	sub	sp, sp, #12
   1399c:	str	r0, [fp, #-8]
   139a0:	movw	r3, #41480	; 0xa208
   139a4:	movt	r3, #2
   139a8:	ldr	r2, [fp, #-8]
   139ac:	str	r2, [r3]
   139b0:	nop	{0}
   139b4:	add	sp, fp, #0
   139b8:	pop	{fp}		; (ldr fp, [sp], #4)
   139bc:	bx	lr
   139c0:	push	{fp}		; (str fp, [sp, #-4]!)
   139c4:	add	fp, sp, #0
   139c8:	sub	sp, sp, #12
   139cc:	mov	r3, r0
   139d0:	strb	r3, [fp, #-5]
   139d4:	movw	r3, #41484	; 0xa20c
   139d8:	movt	r3, #2
   139dc:	ldrb	r2, [fp, #-5]
   139e0:	strb	r2, [r3]
   139e4:	nop	{0}
   139e8:	add	sp, fp, #0
   139ec:	pop	{fp}		; (ldr fp, [sp], #4)
   139f0:	bx	lr
   139f4:	str	r4, [sp, #-12]!
   139f8:	str	fp, [sp, #4]
   139fc:	str	lr, [sp, #8]
   13a00:	add	fp, sp, #8
   13a04:	sub	sp, sp, #20
   13a08:	movw	r3, #41348	; 0xa184
   13a0c:	movt	r3, #2
   13a10:	ldr	r3, [r3]
   13a14:	mov	r0, r3
   13a18:	bl	17f84 <__assert_fail@plt+0x6e00>
   13a1c:	mov	r3, r0
   13a20:	cmp	r3, #0
   13a24:	beq	13af8 <__assert_fail@plt+0x2974>
   13a28:	movw	r3, #41484	; 0xa20c
   13a2c:	movt	r3, #2
   13a30:	ldrb	r3, [r3]
   13a34:	eor	r3, r3, #1
   13a38:	uxtb	r3, r3
   13a3c:	cmp	r3, #0
   13a40:	bne	13a58 <__assert_fail@plt+0x28d4>
   13a44:	bl	11094 <__errno_location@plt>
   13a48:	mov	r3, r0
   13a4c:	ldr	r3, [r3]
   13a50:	cmp	r3, #32
   13a54:	beq	13af8 <__assert_fail@plt+0x2974>
   13a58:	movw	r0, #37700	; 0x9344
   13a5c:	movt	r0, #1
   13a60:	bl	11058 <gettext@plt>
   13a64:	str	r0, [fp, #-16]
   13a68:	movw	r3, #41480	; 0xa208
   13a6c:	movt	r3, #2
   13a70:	ldr	r3, [r3]
   13a74:	cmp	r3, #0
   13a78:	beq	13ac4 <__assert_fail@plt+0x2940>
   13a7c:	bl	11094 <__errno_location@plt>
   13a80:	mov	r3, r0
   13a84:	ldr	r4, [r3]
   13a88:	movw	r3, #41480	; 0xa208
   13a8c:	movt	r3, #2
   13a90:	ldr	r3, [r3]
   13a94:	mov	r0, r3
   13a98:	bl	1639c <__assert_fail@plt+0x5218>
   13a9c:	mov	r2, r0
   13aa0:	ldr	r3, [fp, #-16]
   13aa4:	str	r3, [sp]
   13aa8:	mov	r3, r2
   13aac:	movw	r2, #37712	; 0x9350
   13ab0:	movt	r2, #1
   13ab4:	mov	r1, r4
   13ab8:	mov	r0, #0
   13abc:	bl	10fc8 <error@plt>
   13ac0:	b	13ae4 <__assert_fail@plt+0x2960>
   13ac4:	bl	11094 <__errno_location@plt>
   13ac8:	mov	r3, r0
   13acc:	ldr	r1, [r3]
   13ad0:	ldr	r3, [fp, #-16]
   13ad4:	movw	r2, #37720	; 0x9358
   13ad8:	movt	r2, #1
   13adc:	mov	r0, #0
   13ae0:	bl	10fc8 <error@plt>
   13ae4:	movw	r3, #41256	; 0xa128
   13ae8:	movt	r3, #2
   13aec:	ldr	r3, [r3]
   13af0:	mov	r0, r3
   13af4:	bl	10ef0 <_exit@plt>
   13af8:	movw	r3, #41344	; 0xa180
   13afc:	movt	r3, #2
   13b00:	ldr	r3, [r3]
   13b04:	mov	r0, r3
   13b08:	bl	17f84 <__assert_fail@plt+0x6e00>
   13b0c:	mov	r3, r0
   13b10:	cmp	r3, #0
   13b14:	beq	13b2c <__assert_fail@plt+0x29a8>
   13b18:	movw	r3, #41256	; 0xa128
   13b1c:	movt	r3, #2
   13b20:	ldr	r3, [r3]
   13b24:	mov	r0, r3
   13b28:	bl	10ef0 <_exit@plt>
   13b2c:	nop	{0}
   13b30:	sub	sp, fp, #8
   13b34:	ldr	r4, [sp]
   13b38:	ldr	fp, [sp, #4]
   13b3c:	add	sp, sp, #8
   13b40:	pop	{pc}		; (ldr pc, [sp], #4)
   13b44:	str	r4, [sp, #-12]!
   13b48:	str	fp, [sp, #4]
   13b4c:	str	lr, [sp, #8]
   13b50:	add	fp, sp, #8
   13b54:	sub	sp, sp, #20
   13b58:	str	r0, [fp, #-24]	; 0xffffffe8
   13b5c:	bl	11094 <__errno_location@plt>
   13b60:	mov	r3, r0
   13b64:	ldr	r3, [r3]
   13b68:	str	r3, [fp, #-20]	; 0xffffffec
   13b6c:	bl	11094 <__errno_location@plt>
   13b70:	mov	r3, r0
   13b74:	ldr	r3, [r3]
   13b78:	str	r3, [fp, #-16]
   13b7c:	bl	11094 <__errno_location@plt>
   13b80:	mov	r2, r0
   13b84:	mov	r3, #0
   13b88:	str	r3, [r2]
   13b8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13b90:	bl	10ed8 <free@plt>
   13b94:	bl	11094 <__errno_location@plt>
   13b98:	mov	r3, r0
   13b9c:	ldr	r3, [r3]
   13ba0:	cmp	r3, #0
   13ba4:	moveq	r3, #1
   13ba8:	movne	r3, #0
   13bac:	uxtb	r3, r3
   13bb0:	mov	r4, r3
   13bb4:	bl	11094 <__errno_location@plt>
   13bb8:	mov	r2, r0
   13bbc:	lsl	r3, r4, #2
   13bc0:	sub	r1, fp, #12
   13bc4:	add	r3, r1, r3
   13bc8:	ldr	r3, [r3, #-8]
   13bcc:	str	r3, [r2]
   13bd0:	nop	{0}
   13bd4:	sub	sp, fp, #8
   13bd8:	ldr	r4, [sp]
   13bdc:	ldr	fp, [sp, #4]
   13be0:	add	sp, sp, #8
   13be4:	pop	{pc}		; (ldr pc, [sp], #4)
   13be8:	str	fp, [sp, #-8]!
   13bec:	str	lr, [sp, #4]
   13bf0:	add	fp, sp, #4
   13bf4:	sub	sp, sp, #272	; 0x110
   13bf8:	str	r0, [fp, #-272]	; 0xfffffef0
   13bfc:	sub	r3, fp, #264	; 0x108
   13c00:	movw	r2, #257	; 0x101
   13c04:	mov	r1, r3
   13c08:	ldr	r0, [fp, #-272]	; 0xfffffef0
   13c0c:	bl	16b40 <__assert_fail@plt+0x59bc>
   13c10:	mov	r3, r0
   13c14:	cmp	r3, #0
   13c18:	beq	13c24 <__assert_fail@plt+0x2aa0>
   13c1c:	mov	r3, #0
   13c20:	b	13c78 <__assert_fail@plt+0x2af4>
   13c24:	sub	r3, fp, #264	; 0x108
   13c28:	movw	r1, #37724	; 0x935c
   13c2c:	movt	r1, #1
   13c30:	mov	r0, r3
   13c34:	bl	10ea8 <strcmp@plt>
   13c38:	mov	r3, r0
   13c3c:	cmp	r3, #0
   13c40:	beq	13c6c <__assert_fail@plt+0x2ae8>
   13c44:	sub	r3, fp, #264	; 0x108
   13c48:	movw	r1, #37728	; 0x9360
   13c4c:	movt	r1, #1
   13c50:	mov	r0, r3
   13c54:	bl	10ea8 <strcmp@plt>
   13c58:	mov	r3, r0
   13c5c:	cmp	r3, #0
   13c60:	beq	13c6c <__assert_fail@plt+0x2ae8>
   13c64:	mov	r3, #1
   13c68:	b	13c70 <__assert_fail@plt+0x2aec>
   13c6c:	mov	r3, #0
   13c70:	and	r3, r3, #1
   13c74:	uxtb	r3, r3
   13c78:	mov	r0, r3
   13c7c:	sub	sp, fp, #4
   13c80:	ldr	fp, [sp]
   13c84:	add	sp, sp, #4
   13c88:	pop	{pc}		; (ldr pc, [sp], #4)
   13c8c:	str	fp, [sp, #-8]!
   13c90:	str	lr, [sp, #4]
   13c94:	add	fp, sp, #4
   13c98:	sub	sp, sp, #24
   13c9c:	strd	r0, [fp, #-20]	; 0xffffffec
   13ca0:	str	r2, [fp, #-24]	; 0xffffffe8
   13ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ca8:	add	r3, r3, #20
   13cac:	str	r3, [fp, #-8]
   13cb0:	ldr	r3, [fp, #-8]
   13cb4:	mov	r2, #0
   13cb8:	strb	r2, [r3]
   13cbc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13cc0:	cmp	r2, #0
   13cc4:	sbcs	r3, r3, #0
   13cc8:	bge	13d40 <__assert_fail@plt+0x2bbc>
   13ccc:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13cd0:	mov	r2, #10
   13cd4:	mov	r3, #0
   13cd8:	bl	1865c <__assert_fail@plt+0x74d8>
   13cdc:	uxtb	r3, r2
   13ce0:	ldr	r2, [fp, #-8]
   13ce4:	sub	r2, r2, #1
   13ce8:	str	r2, [fp, #-8]
   13cec:	rsb	r3, r3, #48	; 0x30
   13cf0:	uxtb	r2, r3
   13cf4:	ldr	r3, [fp, #-8]
   13cf8:	strb	r2, [r3]
   13cfc:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13d00:	mov	r2, #10
   13d04:	mov	r3, #0
   13d08:	bl	1865c <__assert_fail@plt+0x74d8>
   13d0c:	mov	r2, r0
   13d10:	mov	r3, r1
   13d14:	strd	r2, [fp, #-20]	; 0xffffffec
   13d18:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13d1c:	orrs	r3, r2, r3
   13d20:	bne	13ccc <__assert_fail@plt+0x2b48>
   13d24:	ldr	r3, [fp, #-8]
   13d28:	sub	r3, r3, #1
   13d2c:	str	r3, [fp, #-8]
   13d30:	ldr	r3, [fp, #-8]
   13d34:	mov	r2, #45	; 0x2d
   13d38:	strb	r2, [r3]
   13d3c:	b	13d98 <__assert_fail@plt+0x2c14>
   13d40:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13d44:	mov	r2, #10
   13d48:	mov	r3, #0
   13d4c:	bl	1865c <__assert_fail@plt+0x74d8>
   13d50:	uxtb	r3, r2
   13d54:	ldr	r2, [fp, #-8]
   13d58:	sub	r2, r2, #1
   13d5c:	str	r2, [fp, #-8]
   13d60:	add	r3, r3, #48	; 0x30
   13d64:	uxtb	r2, r3
   13d68:	ldr	r3, [fp, #-8]
   13d6c:	strb	r2, [r3]
   13d70:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13d74:	mov	r2, #10
   13d78:	mov	r3, #0
   13d7c:	bl	1865c <__assert_fail@plt+0x74d8>
   13d80:	mov	r2, r0
   13d84:	mov	r3, r1
   13d88:	strd	r2, [fp, #-20]	; 0xffffffec
   13d8c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13d90:	orrs	r3, r2, r3
   13d94:	bne	13d40 <__assert_fail@plt+0x2bbc>
   13d98:	ldr	r3, [fp, #-8]
   13d9c:	mov	r0, r3
   13da0:	sub	sp, fp, #4
   13da4:	ldr	fp, [sp]
   13da8:	add	sp, sp, #4
   13dac:	pop	{pc}		; (ldr pc, [sp], #4)
   13db0:	str	fp, [sp, #-8]!
   13db4:	str	lr, [sp, #4]
   13db8:	add	fp, sp, #4
   13dbc:	sub	sp, sp, #16
   13dc0:	str	r0, [fp, #-16]
   13dc4:	ldr	r3, [fp, #-16]
   13dc8:	cmp	r3, #0
   13dcc:	bne	13df4 <__assert_fail@plt+0x2c70>
   13dd0:	movw	r3, #41344	; 0xa180
   13dd4:	movt	r3, #2
   13dd8:	ldr	r3, [r3]
   13ddc:	mov	r2, #55	; 0x37
   13de0:	mov	r1, #1
   13de4:	movw	r0, #37736	; 0x9368
   13de8:	movt	r0, #1
   13dec:	bl	10f80 <fwrite@plt>
   13df0:	bl	1116c <abort@plt>
   13df4:	mov	r1, #47	; 0x2f
   13df8:	ldr	r0, [fp, #-16]
   13dfc:	bl	1110c <strrchr@plt>
   13e00:	str	r0, [fp, #-8]
   13e04:	ldr	r3, [fp, #-8]
   13e08:	cmp	r3, #0
   13e0c:	beq	13e1c <__assert_fail@plt+0x2c98>
   13e10:	ldr	r3, [fp, #-8]
   13e14:	add	r3, r3, #1
   13e18:	b	13e20 <__assert_fail@plt+0x2c9c>
   13e1c:	ldr	r3, [fp, #-16]
   13e20:	str	r3, [fp, #-12]
   13e24:	ldr	r2, [fp, #-12]
   13e28:	ldr	r3, [fp, #-16]
   13e2c:	sub	r3, r2, r3
   13e30:	cmp	r3, #6
   13e34:	ble	13ea4 <__assert_fail@plt+0x2d20>
   13e38:	ldr	r3, [fp, #-12]
   13e3c:	sub	r3, r3, #7
   13e40:	mov	r2, #7
   13e44:	movw	r1, #37792	; 0x93a0
   13e48:	movt	r1, #1
   13e4c:	mov	r0, r3
   13e50:	bl	11160 <strncmp@plt>
   13e54:	mov	r3, r0
   13e58:	cmp	r3, #0
   13e5c:	bne	13ea4 <__assert_fail@plt+0x2d20>
   13e60:	ldr	r3, [fp, #-12]
   13e64:	str	r3, [fp, #-16]
   13e68:	mov	r2, #3
   13e6c:	movw	r1, #37800	; 0x93a8
   13e70:	movt	r1, #1
   13e74:	ldr	r0, [fp, #-12]
   13e78:	bl	11160 <strncmp@plt>
   13e7c:	mov	r3, r0
   13e80:	cmp	r3, #0
   13e84:	bne	13ea4 <__assert_fail@plt+0x2d20>
   13e88:	ldr	r3, [fp, #-12]
   13e8c:	add	r3, r3, #3
   13e90:	str	r3, [fp, #-16]
   13e94:	movw	r3, #41328	; 0xa170
   13e98:	movt	r3, #2
   13e9c:	ldr	r2, [fp, #-16]
   13ea0:	str	r2, [r3]
   13ea4:	movw	r3, #41488	; 0xa210
   13ea8:	movt	r3, #2
   13eac:	ldr	r2, [fp, #-16]
   13eb0:	str	r2, [r3]
   13eb4:	movw	r3, #41332	; 0xa174
   13eb8:	movt	r3, #2
   13ebc:	ldr	r2, [fp, #-16]
   13ec0:	str	r2, [r3]
   13ec4:	nop	{0}
   13ec8:	sub	sp, fp, #4
   13ecc:	ldr	fp, [sp]
   13ed0:	add	sp, sp, #4
   13ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ed8:	str	fp, [sp, #-8]!
   13edc:	str	lr, [sp, #4]
   13ee0:	add	fp, sp, #4
   13ee4:	sub	sp, sp, #16
   13ee8:	str	r0, [fp, #-16]
   13eec:	bl	11094 <__errno_location@plt>
   13ef0:	mov	r3, r0
   13ef4:	ldr	r3, [r3]
   13ef8:	str	r3, [fp, #-8]
   13efc:	ldr	r3, [fp, #-16]
   13f00:	cmp	r3, #0
   13f04:	beq	13f10 <__assert_fail@plt+0x2d8c>
   13f08:	ldr	r3, [fp, #-16]
   13f0c:	b	13f18 <__assert_fail@plt+0x2d94>
   13f10:	movw	r3, #41492	; 0xa214
   13f14:	movt	r3, #2
   13f18:	mov	r1, #48	; 0x30
   13f1c:	mov	r0, r3
   13f20:	bl	17b28 <__assert_fail@plt+0x69a4>
   13f24:	mov	r3, r0
   13f28:	str	r3, [fp, #-12]
   13f2c:	bl	11094 <__errno_location@plt>
   13f30:	mov	r2, r0
   13f34:	ldr	r3, [fp, #-8]
   13f38:	str	r3, [r2]
   13f3c:	ldr	r3, [fp, #-12]
   13f40:	mov	r0, r3
   13f44:	sub	sp, fp, #4
   13f48:	ldr	fp, [sp]
   13f4c:	add	sp, sp, #4
   13f50:	pop	{pc}		; (ldr pc, [sp], #4)
   13f54:	push	{fp}		; (str fp, [sp, #-4]!)
   13f58:	add	fp, sp, #0
   13f5c:	sub	sp, sp, #12
   13f60:	str	r0, [fp, #-8]
   13f64:	ldr	r3, [fp, #-8]
   13f68:	cmp	r3, #0
   13f6c:	beq	13f78 <__assert_fail@plt+0x2df4>
   13f70:	ldr	r3, [fp, #-8]
   13f74:	b	13f80 <__assert_fail@plt+0x2dfc>
   13f78:	movw	r3, #41492	; 0xa214
   13f7c:	movt	r3, #2
   13f80:	ldr	r3, [r3]
   13f84:	mov	r0, r3
   13f88:	add	sp, fp, #0
   13f8c:	pop	{fp}		; (ldr fp, [sp], #4)
   13f90:	bx	lr
   13f94:	push	{fp}		; (str fp, [sp, #-4]!)
   13f98:	add	fp, sp, #0
   13f9c:	sub	sp, sp, #12
   13fa0:	str	r0, [fp, #-8]
   13fa4:	str	r1, [fp, #-12]
   13fa8:	ldr	r3, [fp, #-8]
   13fac:	cmp	r3, #0
   13fb0:	beq	13fbc <__assert_fail@plt+0x2e38>
   13fb4:	ldr	r3, [fp, #-8]
   13fb8:	b	13fc4 <__assert_fail@plt+0x2e40>
   13fbc:	movw	r3, #41492	; 0xa214
   13fc0:	movt	r3, #2
   13fc4:	ldr	r2, [fp, #-12]
   13fc8:	str	r2, [r3]
   13fcc:	nop	{0}
   13fd0:	add	sp, fp, #0
   13fd4:	pop	{fp}		; (ldr fp, [sp], #4)
   13fd8:	bx	lr
   13fdc:	push	{fp}		; (str fp, [sp, #-4]!)
   13fe0:	add	fp, sp, #0
   13fe4:	sub	sp, sp, #36	; 0x24
   13fe8:	str	r0, [fp, #-24]	; 0xffffffe8
   13fec:	mov	r3, r1
   13ff0:	str	r2, [fp, #-32]	; 0xffffffe0
   13ff4:	strb	r3, [fp, #-25]	; 0xffffffe7
   13ff8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13ffc:	strb	r3, [fp, #-5]
   14000:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14004:	cmp	r3, #0
   14008:	beq	14014 <__assert_fail@plt+0x2e90>
   1400c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14010:	b	1401c <__assert_fail@plt+0x2e98>
   14014:	movw	r3, #41492	; 0xa214
   14018:	movt	r3, #2
   1401c:	add	r2, r3, #8
   14020:	ldrb	r3, [fp, #-5]
   14024:	lsr	r3, r3, #5
   14028:	uxtb	r3, r3
   1402c:	lsl	r3, r3, #2
   14030:	add	r3, r2, r3
   14034:	str	r3, [fp, #-12]
   14038:	ldrb	r3, [fp, #-5]
   1403c:	and	r3, r3, #31
   14040:	str	r3, [fp, #-16]
   14044:	ldr	r3, [fp, #-12]
   14048:	ldr	r2, [r3]
   1404c:	ldr	r3, [fp, #-16]
   14050:	lsr	r3, r2, r3
   14054:	and	r3, r3, #1
   14058:	str	r3, [fp, #-20]	; 0xffffffec
   1405c:	ldr	r3, [fp, #-12]
   14060:	ldr	r3, [r3]
   14064:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14068:	and	r1, r2, #1
   1406c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14070:	eor	r1, r1, r2
   14074:	ldr	r2, [fp, #-16]
   14078:	lsl	r2, r1, r2
   1407c:	eor	r2, r2, r3
   14080:	ldr	r3, [fp, #-12]
   14084:	str	r2, [r3]
   14088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1408c:	mov	r0, r3
   14090:	add	sp, fp, #0
   14094:	pop	{fp}		; (ldr fp, [sp], #4)
   14098:	bx	lr
   1409c:	push	{fp}		; (str fp, [sp, #-4]!)
   140a0:	add	fp, sp, #0
   140a4:	sub	sp, sp, #20
   140a8:	str	r0, [fp, #-16]
   140ac:	str	r1, [fp, #-20]	; 0xffffffec
   140b0:	ldr	r3, [fp, #-16]
   140b4:	cmp	r3, #0
   140b8:	bne	140c8 <__assert_fail@plt+0x2f44>
   140bc:	movw	r3, #41492	; 0xa214
   140c0:	movt	r3, #2
   140c4:	str	r3, [fp, #-16]
   140c8:	ldr	r3, [fp, #-16]
   140cc:	ldr	r3, [r3, #4]
   140d0:	str	r3, [fp, #-8]
   140d4:	ldr	r3, [fp, #-16]
   140d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   140dc:	str	r2, [r3, #4]
   140e0:	ldr	r3, [fp, #-8]
   140e4:	mov	r0, r3
   140e8:	add	sp, fp, #0
   140ec:	pop	{fp}		; (ldr fp, [sp], #4)
   140f0:	bx	lr
   140f4:	str	fp, [sp, #-8]!
   140f8:	str	lr, [sp, #4]
   140fc:	add	fp, sp, #4
   14100:	sub	sp, sp, #16
   14104:	str	r0, [fp, #-8]
   14108:	str	r1, [fp, #-12]
   1410c:	str	r2, [fp, #-16]
   14110:	ldr	r3, [fp, #-8]
   14114:	cmp	r3, #0
   14118:	bne	14128 <__assert_fail@plt+0x2fa4>
   1411c:	movw	r3, #41492	; 0xa214
   14120:	movt	r3, #2
   14124:	str	r3, [fp, #-8]
   14128:	ldr	r3, [fp, #-8]
   1412c:	mov	r2, #10
   14130:	str	r2, [r3]
   14134:	ldr	r3, [fp, #-12]
   14138:	cmp	r3, #0
   1413c:	beq	1414c <__assert_fail@plt+0x2fc8>
   14140:	ldr	r3, [fp, #-16]
   14144:	cmp	r3, #0
   14148:	bne	14150 <__assert_fail@plt+0x2fcc>
   1414c:	bl	1116c <abort@plt>
   14150:	ldr	r3, [fp, #-8]
   14154:	ldr	r2, [fp, #-12]
   14158:	str	r2, [r3, #40]	; 0x28
   1415c:	ldr	r3, [fp, #-8]
   14160:	ldr	r2, [fp, #-16]
   14164:	str	r2, [r3, #44]	; 0x2c
   14168:	nop	{0}
   1416c:	sub	sp, fp, #4
   14170:	ldr	fp, [sp]
   14174:	add	sp, sp, #4
   14178:	pop	{pc}		; (ldr pc, [sp], #4)
   1417c:	str	fp, [sp, #-8]!
   14180:	str	lr, [sp, #4]
   14184:	add	fp, sp, #4
   14188:	sub	sp, sp, #56	; 0x38
   1418c:	str	r0, [fp, #-56]	; 0xffffffc8
   14190:	str	r1, [fp, #-60]	; 0xffffffc4
   14194:	sub	r1, fp, #52	; 0x34
   14198:	mov	r2, #0
   1419c:	mov	r3, #0
   141a0:	strd	r2, [r1]
   141a4:	strd	r2, [r1, #8]
   141a8:	strd	r2, [r1, #16]
   141ac:	strd	r2, [r1, #24]
   141b0:	strd	r2, [r1, #32]
   141b4:	strd	r2, [r1, #40]	; 0x28
   141b8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   141bc:	cmp	r3, #10
   141c0:	bne	141c8 <__assert_fail@plt+0x3044>
   141c4:	bl	1116c <abort@plt>
   141c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   141cc:	str	r3, [fp, #-52]	; 0xffffffcc
   141d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   141d4:	mov	r2, r3
   141d8:	sub	r3, fp, #52	; 0x34
   141dc:	ldrd	r0, [r3]
   141e0:	strd	r0, [r2]
   141e4:	ldrd	r0, [r3, #8]
   141e8:	strd	r0, [r2, #8]
   141ec:	ldrd	r0, [r3, #16]
   141f0:	strd	r0, [r2, #16]
   141f4:	ldrd	r0, [r3, #24]
   141f8:	strd	r0, [r2, #24]
   141fc:	ldrd	r0, [r3, #32]
   14200:	strd	r0, [r2, #32]
   14204:	ldrd	r0, [r3, #40]	; 0x28
   14208:	strd	r0, [r2, #40]	; 0x28
   1420c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14210:	sub	sp, fp, #4
   14214:	ldr	fp, [sp]
   14218:	add	sp, sp, #4
   1421c:	pop	{pc}		; (ldr pc, [sp], #4)
   14220:	str	fp, [sp, #-8]!
   14224:	str	lr, [sp, #4]
   14228:	add	fp, sp, #4
   1422c:	sub	sp, sp, #16
   14230:	str	r0, [fp, #-16]
   14234:	str	r1, [fp, #-20]	; 0xffffffec
   14238:	ldr	r0, [fp, #-16]
   1423c:	bl	11058 <gettext@plt>
   14240:	str	r0, [fp, #-8]
   14244:	ldr	r2, [fp, #-8]
   14248:	ldr	r3, [fp, #-16]
   1424c:	cmp	r2, r3
   14250:	beq	1425c <__assert_fail@plt+0x30d8>
   14254:	ldr	r3, [fp, #-8]
   14258:	b	1430c <__assert_fail@plt+0x3188>
   1425c:	bl	18498 <__assert_fail@plt+0x7314>
   14260:	str	r0, [fp, #-12]
   14264:	movw	r1, #37992	; 0x9468
   14268:	movt	r1, #1
   1426c:	ldr	r0, [fp, #-12]
   14270:	bl	17ed8 <__assert_fail@plt+0x6d54>
   14274:	mov	r3, r0
   14278:	cmp	r3, #0
   1427c:	bne	142a8 <__assert_fail@plt+0x3124>
   14280:	ldr	r3, [fp, #-16]
   14284:	ldrb	r3, [r3]
   14288:	cmp	r3, #96	; 0x60
   1428c:	bne	1429c <__assert_fail@plt+0x3118>
   14290:	movw	r3, #38000	; 0x9470
   14294:	movt	r3, #1
   14298:	b	1430c <__assert_fail@plt+0x3188>
   1429c:	movw	r3, #38004	; 0x9474
   142a0:	movt	r3, #1
   142a4:	b	1430c <__assert_fail@plt+0x3188>
   142a8:	movw	r1, #38008	; 0x9478
   142ac:	movt	r1, #1
   142b0:	ldr	r0, [fp, #-12]
   142b4:	bl	17ed8 <__assert_fail@plt+0x6d54>
   142b8:	mov	r3, r0
   142bc:	cmp	r3, #0
   142c0:	bne	142ec <__assert_fail@plt+0x3168>
   142c4:	ldr	r3, [fp, #-16]
   142c8:	ldrb	r3, [r3]
   142cc:	cmp	r3, #96	; 0x60
   142d0:	bne	142e0 <__assert_fail@plt+0x315c>
   142d4:	movw	r3, #38016	; 0x9480
   142d8:	movt	r3, #1
   142dc:	b	1430c <__assert_fail@plt+0x3188>
   142e0:	movw	r3, #38020	; 0x9484
   142e4:	movt	r3, #1
   142e8:	b	1430c <__assert_fail@plt+0x3188>
   142ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f0:	cmp	r3, #9
   142f4:	bne	14304 <__assert_fail@plt+0x3180>
   142f8:	movw	r3, #38024	; 0x9488
   142fc:	movt	r3, #1
   14300:	b	1430c <__assert_fail@plt+0x3188>
   14304:	movw	r3, #38028	; 0x948c
   14308:	movt	r3, #1
   1430c:	mov	r0, r3
   14310:	sub	sp, fp, #4
   14314:	ldr	fp, [sp]
   14318:	add	sp, sp, #4
   1431c:	pop	{pc}		; (ldr pc, [sp], #4)
   14320:	str	r4, [sp, #-12]!
   14324:	str	fp, [sp, #4]
   14328:	str	lr, [sp, #8]
   1432c:	add	fp, sp, #8
   14330:	sub	sp, sp, #116	; 0x74
   14334:	str	r0, [fp, #-88]	; 0xffffffa8
   14338:	str	r1, [fp, #-92]	; 0xffffffa4
   1433c:	str	r2, [fp, #-96]	; 0xffffffa0
   14340:	str	r3, [fp, #-100]	; 0xffffff9c
   14344:	mov	r3, #0
   14348:	str	r3, [fp, #-20]	; 0xffffffec
   1434c:	mov	r3, #0
   14350:	str	r3, [fp, #-24]	; 0xffffffe8
   14354:	mov	r3, #0
   14358:	str	r3, [fp, #-28]	; 0xffffffe4
   1435c:	mov	r3, #0
   14360:	str	r3, [fp, #-32]	; 0xffffffe0
   14364:	mov	r3, #0
   14368:	strb	r3, [fp, #-33]	; 0xffffffdf
   1436c:	bl	10f98 <__ctype_get_mb_cur_max@plt>
   14370:	mov	r3, r0
   14374:	cmp	r3, #1
   14378:	moveq	r3, #1
   1437c:	movne	r3, #0
   14380:	strb	r3, [fp, #-57]	; 0xffffffc7
   14384:	ldr	r3, [fp, #8]
   14388:	and	r3, r3, #2
   1438c:	cmp	r3, #0
   14390:	movne	r3, #1
   14394:	moveq	r3, #0
   14398:	strb	r3, [fp, #-34]	; 0xffffffde
   1439c:	mov	r3, #0
   143a0:	strb	r3, [fp, #-35]	; 0xffffffdd
   143a4:	mov	r3, #0
   143a8:	strb	r3, [fp, #-36]	; 0xffffffdc
   143ac:	mov	r3, #1
   143b0:	strb	r3, [fp, #-37]	; 0xffffffdb
   143b4:	ldr	r3, [fp, #4]
   143b8:	cmp	r3, #10
   143bc:	ldrls	pc, [pc, r3, lsl #2]
   143c0:	b	145d8 <__assert_fail@plt+0x3454>
   143c4:	andeq	r4, r1, ip, asr #11
   143c8:	andeq	r4, r1, r4, asr #10
   143cc:	andeq	r4, r1, r8, ror #10
   143d0:	andeq	r4, r1, ip, lsr r5
   143d4:	andeq	r4, r1, ip, asr #10
   143d8:	andeq	r4, r1, r0, lsl #8
   143dc:	strdeq	r4, [r1], -r0
   143e0:	andeq	r4, r1, r4, ror #8
   143e4:	andeq	r4, r1, r8, ror r4
   143e8:	andeq	r4, r1, r8, ror r4
   143ec:	andeq	r4, r1, r8, ror r4
   143f0:	mov	r3, #5
   143f4:	str	r3, [fp, #4]
   143f8:	mov	r3, #1
   143fc:	strb	r3, [fp, #-34]	; 0xffffffde
   14400:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14404:	eor	r3, r3, #1
   14408:	uxtb	r3, r3
   1440c:	cmp	r3, #0
   14410:	beq	14444 <__assert_fail@plt+0x32c0>
   14414:	ldr	r2, [fp, #-20]	; 0xffffffec
   14418:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1441c:	cmp	r2, r3
   14420:	bcs	14438 <__assert_fail@plt+0x32b4>
   14424:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14428:	ldr	r3, [fp, #-20]	; 0xffffffec
   1442c:	add	r3, r2, r3
   14430:	mov	r2, #34	; 0x22
   14434:	strb	r2, [r3]
   14438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1443c:	add	r3, r3, #1
   14440:	str	r3, [fp, #-20]	; 0xffffffec
   14444:	mov	r3, #1
   14448:	strb	r3, [fp, #-33]	; 0xffffffdf
   1444c:	movw	r3, #38024	; 0x9488
   14450:	movt	r3, #1
   14454:	str	r3, [fp, #-28]	; 0xffffffe4
   14458:	mov	r3, #1
   1445c:	str	r3, [fp, #-32]	; 0xffffffe0
   14460:	b	145dc <__assert_fail@plt+0x3458>
   14464:	mov	r3, #1
   14468:	strb	r3, [fp, #-33]	; 0xffffffdf
   1446c:	mov	r3, #0
   14470:	strb	r3, [fp, #-34]	; 0xffffffde
   14474:	b	145dc <__assert_fail@plt+0x3458>
   14478:	ldr	r3, [fp, #4]
   1447c:	cmp	r3, #10
   14480:	beq	144ac <__assert_fail@plt+0x3328>
   14484:	ldr	r1, [fp, #4]
   14488:	movw	r0, #38032	; 0x9490
   1448c:	movt	r0, #1
   14490:	bl	14220 <__assert_fail@plt+0x309c>
   14494:	str	r0, [fp, #16]
   14498:	ldr	r1, [fp, #4]
   1449c:	movw	r0, #38028	; 0x948c
   144a0:	movt	r0, #1
   144a4:	bl	14220 <__assert_fail@plt+0x309c>
   144a8:	str	r0, [fp, #20]
   144ac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   144b0:	eor	r3, r3, #1
   144b4:	uxtb	r3, r3
   144b8:	cmp	r3, #0
   144bc:	beq	1451c <__assert_fail@plt+0x3398>
   144c0:	ldr	r3, [fp, #16]
   144c4:	str	r3, [fp, #-28]	; 0xffffffe4
   144c8:	b	1450c <__assert_fail@plt+0x3388>
   144cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   144d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144d4:	cmp	r2, r3
   144d8:	bcs	144f4 <__assert_fail@plt+0x3370>
   144dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144e4:	add	r3, r2, r3
   144e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   144ec:	ldrb	r2, [r2]
   144f0:	strb	r2, [r3]
   144f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144f8:	add	r3, r3, #1
   144fc:	str	r3, [fp, #-20]	; 0xffffffec
   14500:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14504:	add	r3, r3, #1
   14508:	str	r3, [fp, #-28]	; 0xffffffe4
   1450c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14510:	ldrb	r3, [r3]
   14514:	cmp	r3, #0
   14518:	bne	144cc <__assert_fail@plt+0x3348>
   1451c:	mov	r3, #1
   14520:	strb	r3, [fp, #-33]	; 0xffffffdf
   14524:	ldr	r3, [fp, #20]
   14528:	str	r3, [fp, #-28]	; 0xffffffe4
   1452c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14530:	bl	11070 <strlen@plt>
   14534:	str	r0, [fp, #-32]	; 0xffffffe0
   14538:	b	145dc <__assert_fail@plt+0x3458>
   1453c:	mov	r3, #1
   14540:	strb	r3, [fp, #-33]	; 0xffffffdf
   14544:	mov	r3, #1
   14548:	strb	r3, [fp, #-34]	; 0xffffffde
   1454c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14550:	eor	r3, r3, #1
   14554:	uxtb	r3, r3
   14558:	cmp	r3, #0
   1455c:	beq	14568 <__assert_fail@plt+0x33e4>
   14560:	mov	r3, #1
   14564:	strb	r3, [fp, #-33]	; 0xffffffdf
   14568:	mov	r3, #2
   1456c:	str	r3, [fp, #4]
   14570:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14574:	eor	r3, r3, #1
   14578:	uxtb	r3, r3
   1457c:	cmp	r3, #0
   14580:	beq	145b4 <__assert_fail@plt+0x3430>
   14584:	ldr	r2, [fp, #-20]	; 0xffffffec
   14588:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1458c:	cmp	r2, r3
   14590:	bcs	145a8 <__assert_fail@plt+0x3424>
   14594:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1459c:	add	r3, r2, r3
   145a0:	mov	r2, #39	; 0x27
   145a4:	strb	r2, [r3]
   145a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145ac:	add	r3, r3, #1
   145b0:	str	r3, [fp, #-20]	; 0xffffffec
   145b4:	movw	r3, #38028	; 0x948c
   145b8:	movt	r3, #1
   145bc:	str	r3, [fp, #-28]	; 0xffffffe4
   145c0:	mov	r3, #1
   145c4:	str	r3, [fp, #-32]	; 0xffffffe0
   145c8:	b	145dc <__assert_fail@plt+0x3458>
   145cc:	mov	r3, #0
   145d0:	strb	r3, [fp, #-34]	; 0xffffffde
   145d4:	b	145dc <__assert_fail@plt+0x3458>
   145d8:	bl	1116c <abort@plt>
   145dc:	mov	r3, #0
   145e0:	str	r3, [fp, #-16]
   145e4:	b	15780 <__assert_fail@plt+0x45fc>
   145e8:	mov	r3, #0
   145ec:	strb	r3, [fp, #-40]	; 0xffffffd8
   145f0:	mov	r3, #0
   145f4:	strb	r3, [fp, #-41]	; 0xffffffd7
   145f8:	mov	r3, #0
   145fc:	strb	r3, [fp, #-42]	; 0xffffffd6
   14600:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14604:	cmp	r3, #0
   14608:	beq	146a4 <__assert_fail@plt+0x3520>
   1460c:	ldr	r3, [fp, #4]
   14610:	cmp	r3, #2
   14614:	beq	146a4 <__assert_fail@plt+0x3520>
   14618:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1461c:	cmp	r3, #0
   14620:	beq	146a4 <__assert_fail@plt+0x3520>
   14624:	ldr	r2, [fp, #-16]
   14628:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1462c:	add	r4, r2, r3
   14630:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14634:	cmn	r3, #1
   14638:	bne	1465c <__assert_fail@plt+0x34d8>
   1463c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14640:	cmp	r3, #1
   14644:	bls	1465c <__assert_fail@plt+0x34d8>
   14648:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1464c:	bl	11070 <strlen@plt>
   14650:	str	r0, [fp, #-100]	; 0xffffff9c
   14654:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14658:	b	14660 <__assert_fail@plt+0x34dc>
   1465c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14660:	cmp	r3, r4
   14664:	bcc	146a4 <__assert_fail@plt+0x3520>
   14668:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1466c:	ldr	r3, [fp, #-16]
   14670:	add	r3, r2, r3
   14674:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14678:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1467c:	mov	r0, r3
   14680:	bl	10f20 <memcmp@plt>
   14684:	mov	r3, r0
   14688:	cmp	r3, #0
   1468c:	bne	146a4 <__assert_fail@plt+0x3520>
   14690:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14694:	cmp	r3, #0
   14698:	bne	1593c <__assert_fail@plt+0x47b8>
   1469c:	mov	r3, #1
   146a0:	strb	r3, [fp, #-40]	; 0xffffffd8
   146a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   146a8:	ldr	r3, [fp, #-16]
   146ac:	add	r3, r2, r3
   146b0:	ldrb	r3, [r3]
   146b4:	strb	r3, [fp, #-38]	; 0xffffffda
   146b8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   146bc:	cmp	r3, #126	; 0x7e
   146c0:	ldrls	pc, [pc, r3, lsl #2]
   146c4:	b	14efc <__assert_fail@plt+0x3d78>
   146c8:	andeq	r4, r1, r4, asr #17
   146cc:	strdeq	r4, [r1], -ip
   146d0:	strdeq	r4, [r1], -ip
   146d4:	strdeq	r4, [r1], -ip
   146d8:	strdeq	r4, [r1], -ip
   146dc:	strdeq	r4, [r1], -ip
   146e0:	strdeq	r4, [r1], -ip
   146e4:			; <UNDEFINED> instruction: 0x00014cb8
   146e8:	andeq	r4, r1, r4, asr #25
   146ec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146f0:	ldrdeq	r4, [r1], -ip
   146f4:	andeq	r4, r1, r0, lsl #26
   146f8:	ldrdeq	r4, [r1], -r0
   146fc:	andeq	r4, r1, r8, ror #25
   14700:	strdeq	r4, [r1], -ip
   14704:	strdeq	r4, [r1], -ip
   14708:	strdeq	r4, [r1], -ip
   1470c:	strdeq	r4, [r1], -ip
   14710:	strdeq	r4, [r1], -ip
   14714:	strdeq	r4, [r1], -ip
   14718:	strdeq	r4, [r1], -ip
   1471c:	strdeq	r4, [r1], -ip
   14720:	strdeq	r4, [r1], -ip
   14724:	strdeq	r4, [r1], -ip
   14728:	strdeq	r4, [r1], -ip
   1472c:	strdeq	r4, [r1], -ip
   14730:	strdeq	r4, [r1], -ip
   14734:	strdeq	r4, [r1], -ip
   14738:	strdeq	r4, [r1], -ip
   1473c:	strdeq	r4, [r1], -ip
   14740:	strdeq	r4, [r1], -ip
   14744:	strdeq	r4, [r1], -ip
   14748:	andeq	r4, r1, r0, ror #27
   1474c:	andeq	r4, r1, r8, ror #27
   14750:	andeq	r4, r1, r8, ror #27
   14754:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14758:	andeq	r4, r1, r8, ror #27
   1475c:	strdeq	r4, [r1], -r0
   14760:	andeq	r4, r1, r8, ror #27
   14764:	andeq	r4, r1, r4, lsl #28
   14768:	andeq	r4, r1, r8, ror #27
   1476c:	andeq	r4, r1, r8, ror #27
   14770:	andeq	r4, r1, r8, ror #27
   14774:	strdeq	r4, [r1], -r0
   14778:	strdeq	r4, [r1], -r0
   1477c:	strdeq	r4, [r1], -r0
   14780:	strdeq	r4, [r1], -r0
   14784:	strdeq	r4, [r1], -r0
   14788:	strdeq	r4, [r1], -r0
   1478c:	strdeq	r4, [r1], -r0
   14790:	strdeq	r4, [r1], -r0
   14794:	strdeq	r4, [r1], -r0
   14798:	strdeq	r4, [r1], -r0
   1479c:	strdeq	r4, [r1], -r0
   147a0:	strdeq	r4, [r1], -r0
   147a4:	strdeq	r4, [r1], -r0
   147a8:	strdeq	r4, [r1], -r0
   147ac:	strdeq	r4, [r1], -r0
   147b0:	strdeq	r4, [r1], -r0
   147b4:	andeq	r4, r1, r8, ror #27
   147b8:	andeq	r4, r1, r8, ror #27
   147bc:	andeq	r4, r1, r8, ror #27
   147c0:	andeq	r4, r1, r8, ror #27
   147c4:	andeq	r4, r1, r4, lsr #21
   147c8:	strdeq	r4, [r1], -ip
   147cc:	strdeq	r4, [r1], -r0
   147d0:	strdeq	r4, [r1], -r0
   147d4:	strdeq	r4, [r1], -r0
   147d8:	strdeq	r4, [r1], -r0
   147dc:	strdeq	r4, [r1], -r0
   147e0:	strdeq	r4, [r1], -r0
   147e4:	strdeq	r4, [r1], -r0
   147e8:	strdeq	r4, [r1], -r0
   147ec:	strdeq	r4, [r1], -r0
   147f0:	strdeq	r4, [r1], -r0
   147f4:	strdeq	r4, [r1], -r0
   147f8:	strdeq	r4, [r1], -r0
   147fc:	strdeq	r4, [r1], -r0
   14800:	strdeq	r4, [r1], -r0
   14804:	strdeq	r4, [r1], -r0
   14808:	strdeq	r4, [r1], -r0
   1480c:	strdeq	r4, [r1], -r0
   14810:	strdeq	r4, [r1], -r0
   14814:	strdeq	r4, [r1], -r0
   14818:	strdeq	r4, [r1], -r0
   1481c:	strdeq	r4, [r1], -r0
   14820:	strdeq	r4, [r1], -r0
   14824:	strdeq	r4, [r1], -r0
   14828:	strdeq	r4, [r1], -r0
   1482c:	strdeq	r4, [r1], -r0
   14830:	strdeq	r4, [r1], -r0
   14834:	andeq	r4, r1, r8, ror #27
   14838:	andeq	r4, r1, ip, lsl #26
   1483c:	strdeq	r4, [r1], -r0
   14840:	andeq	r4, r1, r8, ror #27
   14844:	strdeq	r4, [r1], -r0
   14848:	andeq	r4, r1, r8, ror #27
   1484c:	strdeq	r4, [r1], -r0
   14850:	strdeq	r4, [r1], -r0
   14854:	strdeq	r4, [r1], -r0
   14858:	strdeq	r4, [r1], -r0
   1485c:	strdeq	r4, [r1], -r0
   14860:	strdeq	r4, [r1], -r0
   14864:	strdeq	r4, [r1], -r0
   14868:	strdeq	r4, [r1], -r0
   1486c:	strdeq	r4, [r1], -r0
   14870:	strdeq	r4, [r1], -r0
   14874:	strdeq	r4, [r1], -r0
   14878:	strdeq	r4, [r1], -r0
   1487c:	strdeq	r4, [r1], -r0
   14880:	strdeq	r4, [r1], -r0
   14884:	strdeq	r4, [r1], -r0
   14888:	strdeq	r4, [r1], -r0
   1488c:	strdeq	r4, [r1], -r0
   14890:	strdeq	r4, [r1], -r0
   14894:	strdeq	r4, [r1], -r0
   14898:	strdeq	r4, [r1], -r0
   1489c:	strdeq	r4, [r1], -r0
   148a0:	strdeq	r4, [r1], -r0
   148a4:	strdeq	r4, [r1], -r0
   148a8:	strdeq	r4, [r1], -r0
   148ac:	strdeq	r4, [r1], -r0
   148b0:	strdeq	r4, [r1], -r0
   148b4:	andeq	r4, r1, ip, lsl #27
   148b8:	andeq	r4, r1, r8, ror #27
   148bc:	andeq	r4, r1, ip, lsl #27
   148c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148c4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   148c8:	cmp	r3, #0
   148cc:	beq	14a90 <__assert_fail@plt+0x390c>
   148d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   148d4:	cmp	r3, #0
   148d8:	bne	15944 <__assert_fail@plt+0x47c0>
   148dc:	mov	r3, #1
   148e0:	strb	r3, [fp, #-41]	; 0xffffffd7
   148e4:	ldr	r3, [fp, #4]
   148e8:	cmp	r3, #2
   148ec:	bne	1499c <__assert_fail@plt+0x3818>
   148f0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   148f4:	eor	r3, r3, #1
   148f8:	uxtb	r3, r3
   148fc:	cmp	r3, #0
   14900:	beq	1499c <__assert_fail@plt+0x3818>
   14904:	ldr	r2, [fp, #-20]	; 0xffffffec
   14908:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1490c:	cmp	r2, r3
   14910:	bcs	14928 <__assert_fail@plt+0x37a4>
   14914:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1491c:	add	r3, r2, r3
   14920:	mov	r2, #39	; 0x27
   14924:	strb	r2, [r3]
   14928:	ldr	r3, [fp, #-20]	; 0xffffffec
   1492c:	add	r3, r3, #1
   14930:	str	r3, [fp, #-20]	; 0xffffffec
   14934:	ldr	r2, [fp, #-20]	; 0xffffffec
   14938:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1493c:	cmp	r2, r3
   14940:	bcs	14958 <__assert_fail@plt+0x37d4>
   14944:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14948:	ldr	r3, [fp, #-20]	; 0xffffffec
   1494c:	add	r3, r2, r3
   14950:	mov	r2, #36	; 0x24
   14954:	strb	r2, [r3]
   14958:	ldr	r3, [fp, #-20]	; 0xffffffec
   1495c:	add	r3, r3, #1
   14960:	str	r3, [fp, #-20]	; 0xffffffec
   14964:	ldr	r2, [fp, #-20]	; 0xffffffec
   14968:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1496c:	cmp	r2, r3
   14970:	bcs	14988 <__assert_fail@plt+0x3804>
   14974:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14978:	ldr	r3, [fp, #-20]	; 0xffffffec
   1497c:	add	r3, r2, r3
   14980:	mov	r2, #39	; 0x27
   14984:	strb	r2, [r3]
   14988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1498c:	add	r3, r3, #1
   14990:	str	r3, [fp, #-20]	; 0xffffffec
   14994:	mov	r3, #1
   14998:	strb	r3, [fp, #-35]	; 0xffffffdd
   1499c:	ldr	r2, [fp, #-20]	; 0xffffffec
   149a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   149a4:	cmp	r2, r3
   149a8:	bcs	149c0 <__assert_fail@plt+0x383c>
   149ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   149b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149b4:	add	r3, r2, r3
   149b8:	mov	r2, #92	; 0x5c
   149bc:	strb	r2, [r3]
   149c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149c4:	add	r3, r3, #1
   149c8:	str	r3, [fp, #-20]	; 0xffffffec
   149cc:	ldr	r3, [fp, #4]
   149d0:	cmp	r3, #2
   149d4:	beq	14a84 <__assert_fail@plt+0x3900>
   149d8:	ldr	r3, [fp, #-16]
   149dc:	add	r3, r3, #1
   149e0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   149e4:	cmp	r2, r3
   149e8:	bls	14a84 <__assert_fail@plt+0x3900>
   149ec:	ldr	r3, [fp, #-16]
   149f0:	add	r3, r3, #1
   149f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   149f8:	add	r3, r2, r3
   149fc:	ldrb	r3, [r3]
   14a00:	cmp	r3, #47	; 0x2f
   14a04:	bls	14a84 <__assert_fail@plt+0x3900>
   14a08:	ldr	r3, [fp, #-16]
   14a0c:	add	r3, r3, #1
   14a10:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14a14:	add	r3, r2, r3
   14a18:	ldrb	r3, [r3]
   14a1c:	cmp	r3, #57	; 0x39
   14a20:	bhi	14a84 <__assert_fail@plt+0x3900>
   14a24:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a28:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a2c:	cmp	r2, r3
   14a30:	bcs	14a48 <__assert_fail@plt+0x38c4>
   14a34:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a3c:	add	r3, r2, r3
   14a40:	mov	r2, #48	; 0x30
   14a44:	strb	r2, [r3]
   14a48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a4c:	add	r3, r3, #1
   14a50:	str	r3, [fp, #-20]	; 0xffffffec
   14a54:	ldr	r2, [fp, #-20]	; 0xffffffec
   14a58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a5c:	cmp	r2, r3
   14a60:	bcs	14a78 <__assert_fail@plt+0x38f4>
   14a64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a6c:	add	r3, r2, r3
   14a70:	mov	r2, #48	; 0x30
   14a74:	strb	r2, [r3]
   14a78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a7c:	add	r3, r3, #1
   14a80:	str	r3, [fp, #-20]	; 0xffffffec
   14a84:	mov	r3, #48	; 0x30
   14a88:	strb	r3, [fp, #-38]	; 0xffffffda
   14a8c:	b	154cc <__assert_fail@plt+0x4348>
   14a90:	ldr	r3, [fp, #8]
   14a94:	and	r3, r3, #1
   14a98:	cmp	r3, #0
   14a9c:	beq	154cc <__assert_fail@plt+0x4348>
   14aa0:	b	15774 <__assert_fail@plt+0x45f0>
   14aa4:	ldr	r3, [fp, #4]
   14aa8:	cmp	r3, #2
   14aac:	beq	14ac0 <__assert_fail@plt+0x393c>
   14ab0:	ldr	r3, [fp, #4]
   14ab4:	cmp	r3, #5
   14ab8:	beq	14ad0 <__assert_fail@plt+0x394c>
   14abc:	b	14cb4 <__assert_fail@plt+0x3b30>
   14ac0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14ac4:	cmp	r3, #0
   14ac8:	beq	14ca8 <__assert_fail@plt+0x3b24>
   14acc:	b	15978 <__assert_fail@plt+0x47f4>
   14ad0:	ldr	r3, [fp, #8]
   14ad4:	and	r3, r3, #4
   14ad8:	cmp	r3, #0
   14adc:	beq	14cb0 <__assert_fail@plt+0x3b2c>
   14ae0:	ldr	r3, [fp, #-16]
   14ae4:	add	r3, r3, #2
   14ae8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14aec:	cmp	r2, r3
   14af0:	bls	14cb0 <__assert_fail@plt+0x3b2c>
   14af4:	ldr	r3, [fp, #-16]
   14af8:	add	r3, r3, #1
   14afc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14b00:	add	r3, r2, r3
   14b04:	ldrb	r3, [r3]
   14b08:	cmp	r3, #63	; 0x3f
   14b0c:	bne	14cb0 <__assert_fail@plt+0x3b2c>
   14b10:	ldr	r3, [fp, #-16]
   14b14:	add	r3, r3, #2
   14b18:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14b1c:	add	r3, r2, r3
   14b20:	ldrb	r3, [r3]
   14b24:	sub	r3, r3, #33	; 0x21
   14b28:	cmp	r3, #29
   14b2c:	ldrls	pc, [pc, r3, lsl #2]
   14b30:	b	14ca0 <__assert_fail@plt+0x3b1c>
   14b34:	andeq	r4, r1, ip, lsr #23
   14b38:	andeq	r4, r1, r0, lsr #25
   14b3c:	andeq	r4, r1, r0, lsr #25
   14b40:	andeq	r4, r1, r0, lsr #25
   14b44:	andeq	r4, r1, r0, lsr #25
   14b48:	andeq	r4, r1, r0, lsr #25
   14b4c:	andeq	r4, r1, ip, lsr #23
   14b50:	andeq	r4, r1, ip, lsr #23
   14b54:	andeq	r4, r1, ip, lsr #23
   14b58:	andeq	r4, r1, r0, lsr #25
   14b5c:	andeq	r4, r1, r0, lsr #25
   14b60:	andeq	r4, r1, r0, lsr #25
   14b64:	andeq	r4, r1, ip, lsr #23
   14b68:	andeq	r4, r1, r0, lsr #25
   14b6c:	andeq	r4, r1, ip, lsr #23
   14b70:	andeq	r4, r1, r0, lsr #25
   14b74:	andeq	r4, r1, r0, lsr #25
   14b78:	andeq	r4, r1, r0, lsr #25
   14b7c:	andeq	r4, r1, r0, lsr #25
   14b80:	andeq	r4, r1, r0, lsr #25
   14b84:	andeq	r4, r1, r0, lsr #25
   14b88:	andeq	r4, r1, r0, lsr #25
   14b8c:	andeq	r4, r1, r0, lsr #25
   14b90:	andeq	r4, r1, r0, lsr #25
   14b94:	andeq	r4, r1, r0, lsr #25
   14b98:	andeq	r4, r1, r0, lsr #25
   14b9c:	andeq	r4, r1, r0, lsr #25
   14ba0:	andeq	r4, r1, ip, lsr #23
   14ba4:	andeq	r4, r1, ip, lsr #23
   14ba8:	andeq	r4, r1, ip, lsr #23
   14bac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14bb0:	cmp	r3, #0
   14bb4:	bne	1594c <__assert_fail@plt+0x47c8>
   14bb8:	ldr	r3, [fp, #-16]
   14bbc:	add	r3, r3, #2
   14bc0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14bc4:	add	r3, r2, r3
   14bc8:	ldrb	r3, [r3]
   14bcc:	strb	r3, [fp, #-38]	; 0xffffffda
   14bd0:	ldr	r3, [fp, #-16]
   14bd4:	add	r3, r3, #2
   14bd8:	str	r3, [fp, #-16]
   14bdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14be0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14be4:	cmp	r2, r3
   14be8:	bcs	14c00 <__assert_fail@plt+0x3a7c>
   14bec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bf4:	add	r3, r2, r3
   14bf8:	mov	r2, #63	; 0x3f
   14bfc:	strb	r2, [r3]
   14c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c04:	add	r3, r3, #1
   14c08:	str	r3, [fp, #-20]	; 0xffffffec
   14c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c14:	cmp	r2, r3
   14c18:	bcs	14c30 <__assert_fail@plt+0x3aac>
   14c1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c24:	add	r3, r2, r3
   14c28:	mov	r2, #34	; 0x22
   14c2c:	strb	r2, [r3]
   14c30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c34:	add	r3, r3, #1
   14c38:	str	r3, [fp, #-20]	; 0xffffffec
   14c3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c44:	cmp	r2, r3
   14c48:	bcs	14c60 <__assert_fail@plt+0x3adc>
   14c4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c50:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c54:	add	r3, r2, r3
   14c58:	mov	r2, #34	; 0x22
   14c5c:	strb	r2, [r3]
   14c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c64:	add	r3, r3, #1
   14c68:	str	r3, [fp, #-20]	; 0xffffffec
   14c6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c74:	cmp	r2, r3
   14c78:	bcs	14c90 <__assert_fail@plt+0x3b0c>
   14c7c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c84:	add	r3, r2, r3
   14c88:	mov	r2, #63	; 0x3f
   14c8c:	strb	r2, [r3]
   14c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c94:	add	r3, r3, #1
   14c98:	str	r3, [fp, #-20]	; 0xffffffec
   14c9c:	b	14ca4 <__assert_fail@plt+0x3b20>
   14ca0:	nop	{0}
   14ca4:	b	14cb0 <__assert_fail@plt+0x3b2c>
   14ca8:	nop	{0}
   14cac:	b	15500 <__assert_fail@plt+0x437c>
   14cb0:	nop	{0}
   14cb4:	b	15500 <__assert_fail@plt+0x437c>
   14cb8:	mov	r3, #97	; 0x61
   14cbc:	strb	r3, [fp, #-39]	; 0xffffffd9
   14cc0:	b	14d74 <__assert_fail@plt+0x3bf0>
   14cc4:	mov	r3, #98	; 0x62
   14cc8:	strb	r3, [fp, #-39]	; 0xffffffd9
   14ccc:	b	14d74 <__assert_fail@plt+0x3bf0>
   14cd0:	mov	r3, #102	; 0x66
   14cd4:	strb	r3, [fp, #-39]	; 0xffffffd9
   14cd8:	b	14d74 <__assert_fail@plt+0x3bf0>
   14cdc:	mov	r3, #110	; 0x6e
   14ce0:	strb	r3, [fp, #-39]	; 0xffffffd9
   14ce4:	b	14d58 <__assert_fail@plt+0x3bd4>
   14ce8:	mov	r3, #114	; 0x72
   14cec:	strb	r3, [fp, #-39]	; 0xffffffd9
   14cf0:	b	14d58 <__assert_fail@plt+0x3bd4>
   14cf4:	mov	r3, #116	; 0x74
   14cf8:	strb	r3, [fp, #-39]	; 0xffffffd9
   14cfc:	b	14d58 <__assert_fail@plt+0x3bd4>
   14d00:	mov	r3, #118	; 0x76
   14d04:	strb	r3, [fp, #-39]	; 0xffffffd9
   14d08:	b	14d74 <__assert_fail@plt+0x3bf0>
   14d0c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14d10:	strb	r3, [fp, #-39]	; 0xffffffd9
   14d14:	ldr	r3, [fp, #4]
   14d18:	cmp	r3, #2
   14d1c:	bne	14d30 <__assert_fail@plt+0x3bac>
   14d20:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14d24:	cmp	r3, #0
   14d28:	beq	1568c <__assert_fail@plt+0x4508>
   14d2c:	b	15978 <__assert_fail@plt+0x47f4>
   14d30:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14d34:	cmp	r3, #0
   14d38:	beq	14d54 <__assert_fail@plt+0x3bd0>
   14d3c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14d40:	cmp	r3, #0
   14d44:	beq	14d54 <__assert_fail@plt+0x3bd0>
   14d48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14d4c:	cmp	r3, #0
   14d50:	bne	15694 <__assert_fail@plt+0x4510>
   14d54:	nop	{0}
   14d58:	ldr	r3, [fp, #4]
   14d5c:	cmp	r3, #2
   14d60:	bne	14d70 <__assert_fail@plt+0x3bec>
   14d64:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14d68:	cmp	r3, #0
   14d6c:	bne	15954 <__assert_fail@plt+0x47d0>
   14d70:	nop	{0}
   14d74:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14d78:	cmp	r3, #0
   14d7c:	beq	154d4 <__assert_fail@plt+0x4350>
   14d80:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   14d84:	strb	r3, [fp, #-38]	; 0xffffffda
   14d88:	b	1558c <__assert_fail@plt+0x4408>
   14d8c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14d90:	cmn	r3, #1
   14d94:	bne	14db8 <__assert_fail@plt+0x3c34>
   14d98:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14d9c:	add	r3, r3, #1
   14da0:	ldrb	r3, [r3]
   14da4:	cmp	r3, #0
   14da8:	movne	r3, #1
   14dac:	moveq	r3, #0
   14db0:	uxtb	r3, r3
   14db4:	b	14dcc <__assert_fail@plt+0x3c48>
   14db8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14dbc:	cmp	r3, #1
   14dc0:	movne	r3, #1
   14dc4:	moveq	r3, #0
   14dc8:	uxtb	r3, r3
   14dcc:	cmp	r3, #0
   14dd0:	bne	154dc <__assert_fail@plt+0x4358>
   14dd4:	ldr	r3, [fp, #-16]
   14dd8:	cmp	r3, #0
   14ddc:	bne	154e4 <__assert_fail@plt+0x4360>
   14de0:	mov	r3, #1
   14de4:	strb	r3, [fp, #-42]	; 0xffffffd6
   14de8:	ldr	r3, [fp, #4]
   14dec:	cmp	r3, #2
   14df0:	bne	154ec <__assert_fail@plt+0x4368>
   14df4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14df8:	cmp	r3, #0
   14dfc:	beq	154ec <__assert_fail@plt+0x4368>
   14e00:	b	15978 <__assert_fail@plt+0x47f4>
   14e04:	mov	r3, #1
   14e08:	strb	r3, [fp, #-36]	; 0xffffffdc
   14e0c:	mov	r3, #1
   14e10:	strb	r3, [fp, #-42]	; 0xffffffd6
   14e14:	ldr	r3, [fp, #4]
   14e18:	cmp	r3, #2
   14e1c:	bne	154f4 <__assert_fail@plt+0x4370>
   14e20:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14e24:	cmp	r3, #0
   14e28:	bne	1595c <__assert_fail@plt+0x47d8>
   14e2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e30:	cmp	r3, #0
   14e34:	beq	14e54 <__assert_fail@plt+0x3cd0>
   14e38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e3c:	cmp	r3, #0
   14e40:	bne	14e54 <__assert_fail@plt+0x3cd0>
   14e44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e48:	str	r3, [fp, #-24]	; 0xffffffe8
   14e4c:	mov	r3, #0
   14e50:	str	r3, [fp, #-92]	; 0xffffffa4
   14e54:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e5c:	cmp	r2, r3
   14e60:	bcs	14e78 <__assert_fail@plt+0x3cf4>
   14e64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e6c:	add	r3, r2, r3
   14e70:	mov	r2, #39	; 0x27
   14e74:	strb	r2, [r3]
   14e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e7c:	add	r3, r3, #1
   14e80:	str	r3, [fp, #-20]	; 0xffffffec
   14e84:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e8c:	cmp	r2, r3
   14e90:	bcs	14ea8 <__assert_fail@plt+0x3d24>
   14e94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e9c:	add	r3, r2, r3
   14ea0:	mov	r2, #92	; 0x5c
   14ea4:	strb	r2, [r3]
   14ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14eac:	add	r3, r3, #1
   14eb0:	str	r3, [fp, #-20]	; 0xffffffec
   14eb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14eb8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ebc:	cmp	r2, r3
   14ec0:	bcs	14ed8 <__assert_fail@plt+0x3d54>
   14ec4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ecc:	add	r3, r2, r3
   14ed0:	mov	r2, #39	; 0x27
   14ed4:	strb	r2, [r3]
   14ed8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14edc:	add	r3, r3, #1
   14ee0:	str	r3, [fp, #-20]	; 0xffffffec
   14ee4:	mov	r3, #0
   14ee8:	strb	r3, [fp, #-35]	; 0xffffffdd
   14eec:	b	154f4 <__assert_fail@plt+0x4370>
   14ef0:	mov	r3, #1
   14ef4:	strb	r3, [fp, #-42]	; 0xffffffd6
   14ef8:	b	15500 <__assert_fail@plt+0x437c>
   14efc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   14f00:	cmp	r3, #0
   14f04:	beq	14f44 <__assert_fail@plt+0x3dc0>
   14f08:	mov	r3, #1
   14f0c:	str	r3, [fp, #-48]	; 0xffffffd0
   14f10:	bl	11040 <__ctype_b_loc@plt>
   14f14:	mov	r3, r0
   14f18:	ldr	r2, [r3]
   14f1c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f20:	lsl	r3, r3, #1
   14f24:	add	r3, r2, r3
   14f28:	ldrh	r3, [r3]
   14f2c:	and	r3, r3, #16384	; 0x4000
   14f30:	cmp	r3, #0
   14f34:	movne	r3, #1
   14f38:	moveq	r3, #0
   14f3c:	strb	r3, [fp, #-49]	; 0xffffffcf
   14f40:	b	15190 <__assert_fail@plt+0x400c>
   14f44:	sub	r3, fp, #76	; 0x4c
   14f48:	mov	r2, #8
   14f4c:	mov	r1, #0
   14f50:	mov	r0, r3
   14f54:	bl	110ac <memset@plt>
   14f58:	mov	r3, #0
   14f5c:	str	r3, [fp, #-48]	; 0xffffffd0
   14f60:	mov	r3, #1
   14f64:	strb	r3, [fp, #-49]	; 0xffffffcf
   14f68:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14f6c:	cmn	r3, #1
   14f70:	bne	14f80 <__assert_fail@plt+0x3dfc>
   14f74:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14f78:	bl	11070 <strlen@plt>
   14f7c:	str	r0, [fp, #-100]	; 0xffffff9c
   14f80:	ldr	r2, [fp, #-16]
   14f84:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14f88:	add	r3, r2, r3
   14f8c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14f90:	add	r1, r2, r3
   14f94:	ldr	r2, [fp, #-16]
   14f98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14f9c:	add	r3, r2, r3
   14fa0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14fa4:	sub	r2, r2, r3
   14fa8:	sub	r3, fp, #76	; 0x4c
   14fac:	sub	r0, fp, #80	; 0x50
   14fb0:	bl	18500 <__assert_fail@plt+0x737c>
   14fb4:	str	r0, [fp, #-64]	; 0xffffffc0
   14fb8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14fbc:	cmp	r3, #0
   14fc0:	beq	15184 <__assert_fail@plt+0x4000>
   14fc4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14fc8:	cmn	r3, #1
   14fcc:	bne	14fdc <__assert_fail@plt+0x3e58>
   14fd0:	mov	r3, #0
   14fd4:	strb	r3, [fp, #-49]	; 0xffffffcf
   14fd8:	b	15190 <__assert_fail@plt+0x400c>
   14fdc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14fe0:	cmn	r3, #2
   14fe4:	bne	1503c <__assert_fail@plt+0x3eb8>
   14fe8:	mov	r3, #0
   14fec:	strb	r3, [fp, #-49]	; 0xffffffcf
   14ff0:	b	15000 <__assert_fail@plt+0x3e7c>
   14ff4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14ff8:	add	r3, r3, #1
   14ffc:	str	r3, [fp, #-48]	; 0xffffffd0
   15000:	ldr	r2, [fp, #-16]
   15004:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15008:	add	r3, r2, r3
   1500c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15010:	cmp	r2, r3
   15014:	bls	1518c <__assert_fail@plt+0x4008>
   15018:	ldr	r2, [fp, #-16]
   1501c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15020:	add	r3, r2, r3
   15024:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15028:	add	r3, r2, r3
   1502c:	ldrb	r3, [r3]
   15030:	cmp	r3, #0
   15034:	bne	14ff4 <__assert_fail@plt+0x3e70>
   15038:	b	1518c <__assert_fail@plt+0x4008>
   1503c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15040:	cmp	r3, #0
   15044:	beq	15138 <__assert_fail@plt+0x3fb4>
   15048:	ldr	r3, [fp, #4]
   1504c:	cmp	r3, #2
   15050:	bne	15138 <__assert_fail@plt+0x3fb4>
   15054:	mov	r3, #1
   15058:	str	r3, [fp, #-56]	; 0xffffffc8
   1505c:	b	15128 <__assert_fail@plt+0x3fa4>
   15060:	ldr	r2, [fp, #-16]
   15064:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15068:	add	r2, r2, r3
   1506c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15070:	add	r3, r2, r3
   15074:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15078:	add	r3, r2, r3
   1507c:	ldrb	r3, [r3]
   15080:	sub	r3, r3, #91	; 0x5b
   15084:	cmp	r3, #33	; 0x21
   15088:	ldrls	pc, [pc, r3, lsl #2]
   1508c:	b	15118 <__assert_fail@plt+0x3f94>
   15090:	andeq	r5, r1, r8, ror r9
   15094:	andeq	r5, r1, r8, ror r9
   15098:	andeq	r5, r1, r8, lsl r1
   1509c:	andeq	r5, r1, r8, ror r9
   150a0:	andeq	r5, r1, r8, lsl r1
   150a4:	andeq	r5, r1, r8, ror r9
   150a8:	andeq	r5, r1, r8, lsl r1
   150ac:	andeq	r5, r1, r8, lsl r1
   150b0:	andeq	r5, r1, r8, lsl r1
   150b4:	andeq	r5, r1, r8, lsl r1
   150b8:	andeq	r5, r1, r8, lsl r1
   150bc:	andeq	r5, r1, r8, lsl r1
   150c0:	andeq	r5, r1, r8, lsl r1
   150c4:	andeq	r5, r1, r8, lsl r1
   150c8:	andeq	r5, r1, r8, lsl r1
   150cc:	andeq	r5, r1, r8, lsl r1
   150d0:	andeq	r5, r1, r8, lsl r1
   150d4:	andeq	r5, r1, r8, lsl r1
   150d8:	andeq	r5, r1, r8, lsl r1
   150dc:	andeq	r5, r1, r8, lsl r1
   150e0:	andeq	r5, r1, r8, lsl r1
   150e4:	andeq	r5, r1, r8, lsl r1
   150e8:	andeq	r5, r1, r8, lsl r1
   150ec:	andeq	r5, r1, r8, lsl r1
   150f0:	andeq	r5, r1, r8, lsl r1
   150f4:	andeq	r5, r1, r8, lsl r1
   150f8:	andeq	r5, r1, r8, lsl r1
   150fc:	andeq	r5, r1, r8, lsl r1
   15100:	andeq	r5, r1, r8, lsl r1
   15104:	andeq	r5, r1, r8, lsl r1
   15108:	andeq	r5, r1, r8, lsl r1
   1510c:	andeq	r5, r1, r8, lsl r1
   15110:	andeq	r5, r1, r8, lsl r1
   15114:	andeq	r5, r1, r8, ror r9
   15118:	nop	{0}
   1511c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15120:	add	r3, r3, #1
   15124:	str	r3, [fp, #-56]	; 0xffffffc8
   15128:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1512c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15130:	cmp	r2, r3
   15134:	bcc	15060 <__assert_fail@plt+0x3edc>
   15138:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1513c:	mov	r0, r3
   15140:	bl	10f74 <iswprint@plt>
   15144:	mov	r3, r0
   15148:	cmp	r3, #0
   1514c:	bne	15158 <__assert_fail@plt+0x3fd4>
   15150:	mov	r3, #0
   15154:	strb	r3, [fp, #-49]	; 0xffffffcf
   15158:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1515c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15160:	add	r3, r2, r3
   15164:	str	r3, [fp, #-48]	; 0xffffffd0
   15168:	sub	r3, fp, #76	; 0x4c
   1516c:	mov	r0, r3
   15170:	bl	10f08 <mbsinit@plt>
   15174:	mov	r3, r0
   15178:	cmp	r3, #0
   1517c:	beq	14f80 <__assert_fail@plt+0x3dfc>
   15180:	b	15190 <__assert_fail@plt+0x400c>
   15184:	nop	{0}
   15188:	b	15190 <__assert_fail@plt+0x400c>
   1518c:	nop	{0}
   15190:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   15194:	strb	r3, [fp, #-42]	; 0xffffffd6
   15198:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1519c:	cmp	r3, #1
   151a0:	bhi	151c4 <__assert_fail@plt+0x4040>
   151a4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   151a8:	cmp	r3, #0
   151ac:	beq	154fc <__assert_fail@plt+0x4378>
   151b0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   151b4:	eor	r3, r3, #1
   151b8:	uxtb	r3, r3
   151bc:	cmp	r3, #0
   151c0:	beq	154fc <__assert_fail@plt+0x4378>
   151c4:	ldr	r2, [fp, #-16]
   151c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   151cc:	add	r3, r2, r3
   151d0:	str	r3, [fp, #-68]	; 0xffffffbc
   151d4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   151d8:	cmp	r3, #0
   151dc:	beq	15390 <__assert_fail@plt+0x420c>
   151e0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   151e4:	eor	r3, r3, #1
   151e8:	uxtb	r3, r3
   151ec:	cmp	r3, #0
   151f0:	beq	15390 <__assert_fail@plt+0x420c>
   151f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   151f8:	cmp	r3, #0
   151fc:	bne	15964 <__assert_fail@plt+0x47e0>
   15200:	mov	r3, #1
   15204:	strb	r3, [fp, #-41]	; 0xffffffd7
   15208:	ldr	r3, [fp, #4]
   1520c:	cmp	r3, #2
   15210:	bne	152c0 <__assert_fail@plt+0x413c>
   15214:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15218:	eor	r3, r3, #1
   1521c:	uxtb	r3, r3
   15220:	cmp	r3, #0
   15224:	beq	152c0 <__assert_fail@plt+0x413c>
   15228:	ldr	r2, [fp, #-20]	; 0xffffffec
   1522c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15230:	cmp	r2, r3
   15234:	bcs	1524c <__assert_fail@plt+0x40c8>
   15238:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1523c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15240:	add	r3, r2, r3
   15244:	mov	r2, #39	; 0x27
   15248:	strb	r2, [r3]
   1524c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15250:	add	r3, r3, #1
   15254:	str	r3, [fp, #-20]	; 0xffffffec
   15258:	ldr	r2, [fp, #-20]	; 0xffffffec
   1525c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15260:	cmp	r2, r3
   15264:	bcs	1527c <__assert_fail@plt+0x40f8>
   15268:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1526c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15270:	add	r3, r2, r3
   15274:	mov	r2, #36	; 0x24
   15278:	strb	r2, [r3]
   1527c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15280:	add	r3, r3, #1
   15284:	str	r3, [fp, #-20]	; 0xffffffec
   15288:	ldr	r2, [fp, #-20]	; 0xffffffec
   1528c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15290:	cmp	r2, r3
   15294:	bcs	152ac <__assert_fail@plt+0x4128>
   15298:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1529c:	ldr	r3, [fp, #-20]	; 0xffffffec
   152a0:	add	r3, r2, r3
   152a4:	mov	r2, #39	; 0x27
   152a8:	strb	r2, [r3]
   152ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   152b0:	add	r3, r3, #1
   152b4:	str	r3, [fp, #-20]	; 0xffffffec
   152b8:	mov	r3, #1
   152bc:	strb	r3, [fp, #-35]	; 0xffffffdd
   152c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   152c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152c8:	cmp	r2, r3
   152cc:	bcs	152e4 <__assert_fail@plt+0x4160>
   152d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   152d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   152d8:	add	r3, r2, r3
   152dc:	mov	r2, #92	; 0x5c
   152e0:	strb	r2, [r3]
   152e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   152e8:	add	r3, r3, #1
   152ec:	str	r3, [fp, #-20]	; 0xffffffec
   152f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   152f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152f8:	cmp	r2, r3
   152fc:	bcs	15324 <__assert_fail@plt+0x41a0>
   15300:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15304:	lsr	r3, r3, #6
   15308:	uxtb	r2, r3
   1530c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15310:	ldr	r3, [fp, #-20]	; 0xffffffec
   15314:	add	r3, r1, r3
   15318:	add	r2, r2, #48	; 0x30
   1531c:	uxtb	r2, r2
   15320:	strb	r2, [r3]
   15324:	ldr	r3, [fp, #-20]	; 0xffffffec
   15328:	add	r3, r3, #1
   1532c:	str	r3, [fp, #-20]	; 0xffffffec
   15330:	ldr	r2, [fp, #-20]	; 0xffffffec
   15334:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15338:	cmp	r2, r3
   1533c:	bcs	1536c <__assert_fail@plt+0x41e8>
   15340:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15344:	lsr	r3, r3, #3
   15348:	uxtb	r3, r3
   1534c:	and	r3, r3, #7
   15350:	uxtb	r2, r3
   15354:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15358:	ldr	r3, [fp, #-20]	; 0xffffffec
   1535c:	add	r3, r1, r3
   15360:	add	r2, r2, #48	; 0x30
   15364:	uxtb	r2, r2
   15368:	strb	r2, [r3]
   1536c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15370:	add	r3, r3, #1
   15374:	str	r3, [fp, #-20]	; 0xffffffec
   15378:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1537c:	and	r3, r3, #7
   15380:	uxtb	r3, r3
   15384:	add	r3, r3, #48	; 0x30
   15388:	strb	r3, [fp, #-38]	; 0xffffffda
   1538c:	b	153d4 <__assert_fail@plt+0x4250>
   15390:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15394:	cmp	r3, #0
   15398:	beq	153d4 <__assert_fail@plt+0x4250>
   1539c:	ldr	r2, [fp, #-20]	; 0xffffffec
   153a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   153a4:	cmp	r2, r3
   153a8:	bcs	153c0 <__assert_fail@plt+0x423c>
   153ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   153b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153b4:	add	r3, r2, r3
   153b8:	mov	r2, #92	; 0x5c
   153bc:	strb	r2, [r3]
   153c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   153c4:	add	r3, r3, #1
   153c8:	str	r3, [fp, #-20]	; 0xffffffec
   153cc:	mov	r3, #0
   153d0:	strb	r3, [fp, #-40]	; 0xffffffd8
   153d4:	ldr	r3, [fp, #-16]
   153d8:	add	r3, r3, #1
   153dc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   153e0:	cmp	r2, r3
   153e4:	bls	154c4 <__assert_fail@plt+0x4340>
   153e8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   153ec:	cmp	r3, #0
   153f0:	beq	15470 <__assert_fail@plt+0x42ec>
   153f4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   153f8:	eor	r3, r3, #1
   153fc:	uxtb	r3, r3
   15400:	cmp	r3, #0
   15404:	beq	15470 <__assert_fail@plt+0x42ec>
   15408:	ldr	r2, [fp, #-20]	; 0xffffffec
   1540c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15410:	cmp	r2, r3
   15414:	bcs	1542c <__assert_fail@plt+0x42a8>
   15418:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1541c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15420:	add	r3, r2, r3
   15424:	mov	r2, #39	; 0x27
   15428:	strb	r2, [r3]
   1542c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15430:	add	r3, r3, #1
   15434:	str	r3, [fp, #-20]	; 0xffffffec
   15438:	ldr	r2, [fp, #-20]	; 0xffffffec
   1543c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15440:	cmp	r2, r3
   15444:	bcs	1545c <__assert_fail@plt+0x42d8>
   15448:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1544c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15450:	add	r3, r2, r3
   15454:	mov	r2, #39	; 0x27
   15458:	strb	r2, [r3]
   1545c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15460:	add	r3, r3, #1
   15464:	str	r3, [fp, #-20]	; 0xffffffec
   15468:	mov	r3, #0
   1546c:	strb	r3, [fp, #-35]	; 0xffffffdd
   15470:	ldr	r2, [fp, #-20]	; 0xffffffec
   15474:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15478:	cmp	r2, r3
   1547c:	bcs	15494 <__assert_fail@plt+0x4310>
   15480:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15484:	ldr	r3, [fp, #-20]	; 0xffffffec
   15488:	add	r3, r2, r3
   1548c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15490:	strb	r2, [r3]
   15494:	ldr	r3, [fp, #-20]	; 0xffffffec
   15498:	add	r3, r3, #1
   1549c:	str	r3, [fp, #-20]	; 0xffffffec
   154a0:	ldr	r3, [fp, #-16]
   154a4:	add	r3, r3, #1
   154a8:	str	r3, [fp, #-16]
   154ac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   154b0:	ldr	r3, [fp, #-16]
   154b4:	add	r3, r2, r3
   154b8:	ldrb	r3, [r3]
   154bc:	strb	r3, [fp, #-38]	; 0xffffffda
   154c0:	b	151d4 <__assert_fail@plt+0x4050>
   154c4:	nop	{0}
   154c8:	b	156a0 <__assert_fail@plt+0x451c>
   154cc:	nop	{0}
   154d0:	b	15500 <__assert_fail@plt+0x437c>
   154d4:	nop	{0}
   154d8:	b	15500 <__assert_fail@plt+0x437c>
   154dc:	nop	{0}
   154e0:	b	15500 <__assert_fail@plt+0x437c>
   154e4:	nop	{0}
   154e8:	b	15500 <__assert_fail@plt+0x437c>
   154ec:	nop	{0}
   154f0:	b	15500 <__assert_fail@plt+0x437c>
   154f4:	nop	{0}
   154f8:	b	15500 <__assert_fail@plt+0x437c>
   154fc:	nop	{0}
   15500:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15504:	eor	r3, r3, #1
   15508:	uxtb	r3, r3
   1550c:	cmp	r3, #0
   15510:	bne	15520 <__assert_fail@plt+0x439c>
   15514:	ldr	r3, [fp, #4]
   15518:	cmp	r3, #2
   1551c:	bne	15534 <__assert_fail@plt+0x43b0>
   15520:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15524:	eor	r3, r3, #1
   15528:	uxtb	r3, r3
   1552c:	cmp	r3, #0
   15530:	bne	15574 <__assert_fail@plt+0x43f0>
   15534:	ldr	r3, [fp, #12]
   15538:	cmp	r3, #0
   1553c:	beq	15574 <__assert_fail@plt+0x43f0>
   15540:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15544:	lsr	r3, r3, #5
   15548:	uxtb	r3, r3
   1554c:	lsl	r3, r3, #2
   15550:	ldr	r2, [fp, #12]
   15554:	add	r3, r2, r3
   15558:	ldr	r2, [r3]
   1555c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15560:	and	r3, r3, #31
   15564:	lsr	r3, r2, r3
   15568:	and	r3, r3, #1
   1556c:	cmp	r3, #0
   15570:	bne	15588 <__assert_fail@plt+0x4404>
   15574:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15578:	eor	r3, r3, #1
   1557c:	uxtb	r3, r3
   15580:	cmp	r3, #0
   15584:	bne	1569c <__assert_fail@plt+0x4518>
   15588:	nop	{0}
   1558c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15590:	cmp	r3, #0
   15594:	bne	1596c <__assert_fail@plt+0x47e8>
   15598:	mov	r3, #1
   1559c:	strb	r3, [fp, #-41]	; 0xffffffd7
   155a0:	ldr	r3, [fp, #4]
   155a4:	cmp	r3, #2
   155a8:	bne	15658 <__assert_fail@plt+0x44d4>
   155ac:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   155b0:	eor	r3, r3, #1
   155b4:	uxtb	r3, r3
   155b8:	cmp	r3, #0
   155bc:	beq	15658 <__assert_fail@plt+0x44d4>
   155c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   155c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155c8:	cmp	r2, r3
   155cc:	bcs	155e4 <__assert_fail@plt+0x4460>
   155d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   155d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   155d8:	add	r3, r2, r3
   155dc:	mov	r2, #39	; 0x27
   155e0:	strb	r2, [r3]
   155e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   155e8:	add	r3, r3, #1
   155ec:	str	r3, [fp, #-20]	; 0xffffffec
   155f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   155f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155f8:	cmp	r2, r3
   155fc:	bcs	15614 <__assert_fail@plt+0x4490>
   15600:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15604:	ldr	r3, [fp, #-20]	; 0xffffffec
   15608:	add	r3, r2, r3
   1560c:	mov	r2, #36	; 0x24
   15610:	strb	r2, [r3]
   15614:	ldr	r3, [fp, #-20]	; 0xffffffec
   15618:	add	r3, r3, #1
   1561c:	str	r3, [fp, #-20]	; 0xffffffec
   15620:	ldr	r2, [fp, #-20]	; 0xffffffec
   15624:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15628:	cmp	r2, r3
   1562c:	bcs	15644 <__assert_fail@plt+0x44c0>
   15630:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15634:	ldr	r3, [fp, #-20]	; 0xffffffec
   15638:	add	r3, r2, r3
   1563c:	mov	r2, #39	; 0x27
   15640:	strb	r2, [r3]
   15644:	ldr	r3, [fp, #-20]	; 0xffffffec
   15648:	add	r3, r3, #1
   1564c:	str	r3, [fp, #-20]	; 0xffffffec
   15650:	mov	r3, #1
   15654:	strb	r3, [fp, #-35]	; 0xffffffdd
   15658:	ldr	r2, [fp, #-20]	; 0xffffffec
   1565c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15660:	cmp	r2, r3
   15664:	bcs	1567c <__assert_fail@plt+0x44f8>
   15668:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1566c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15670:	add	r3, r2, r3
   15674:	mov	r2, #92	; 0x5c
   15678:	strb	r2, [r3]
   1567c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15680:	add	r3, r3, #1
   15684:	str	r3, [fp, #-20]	; 0xffffffec
   15688:	b	156a0 <__assert_fail@plt+0x451c>
   1568c:	nop	{0}
   15690:	b	156a0 <__assert_fail@plt+0x451c>
   15694:	nop	{0}
   15698:	b	156a0 <__assert_fail@plt+0x451c>
   1569c:	nop	{0}
   156a0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   156a4:	cmp	r3, #0
   156a8:	beq	15728 <__assert_fail@plt+0x45a4>
   156ac:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   156b0:	eor	r3, r3, #1
   156b4:	uxtb	r3, r3
   156b8:	cmp	r3, #0
   156bc:	beq	15728 <__assert_fail@plt+0x45a4>
   156c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   156c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   156c8:	cmp	r2, r3
   156cc:	bcs	156e4 <__assert_fail@plt+0x4560>
   156d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   156d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   156d8:	add	r3, r2, r3
   156dc:	mov	r2, #39	; 0x27
   156e0:	strb	r2, [r3]
   156e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   156e8:	add	r3, r3, #1
   156ec:	str	r3, [fp, #-20]	; 0xffffffec
   156f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   156f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   156f8:	cmp	r2, r3
   156fc:	bcs	15714 <__assert_fail@plt+0x4590>
   15700:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15704:	ldr	r3, [fp, #-20]	; 0xffffffec
   15708:	add	r3, r2, r3
   1570c:	mov	r2, #39	; 0x27
   15710:	strb	r2, [r3]
   15714:	ldr	r3, [fp, #-20]	; 0xffffffec
   15718:	add	r3, r3, #1
   1571c:	str	r3, [fp, #-20]	; 0xffffffec
   15720:	mov	r3, #0
   15724:	strb	r3, [fp, #-35]	; 0xffffffdd
   15728:	ldr	r2, [fp, #-20]	; 0xffffffec
   1572c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15730:	cmp	r2, r3
   15734:	bcs	1574c <__assert_fail@plt+0x45c8>
   15738:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1573c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15740:	add	r3, r2, r3
   15744:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15748:	strb	r2, [r3]
   1574c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15750:	add	r3, r3, #1
   15754:	str	r3, [fp, #-20]	; 0xffffffec
   15758:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1575c:	eor	r3, r3, #1
   15760:	uxtb	r3, r3
   15764:	cmp	r3, #0
   15768:	beq	15774 <__assert_fail@plt+0x45f0>
   1576c:	mov	r3, #0
   15770:	strb	r3, [fp, #-37]	; 0xffffffdb
   15774:	ldr	r3, [fp, #-16]
   15778:	add	r3, r3, #1
   1577c:	str	r3, [fp, #-16]
   15780:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15784:	cmn	r3, #1
   15788:	bne	157b0 <__assert_fail@plt+0x462c>
   1578c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15790:	ldr	r3, [fp, #-16]
   15794:	add	r3, r2, r3
   15798:	ldrb	r3, [r3]
   1579c:	cmp	r3, #0
   157a0:	movne	r3, #1
   157a4:	moveq	r3, #0
   157a8:	uxtb	r3, r3
   157ac:	b	157c8 <__assert_fail@plt+0x4644>
   157b0:	ldr	r2, [fp, #-16]
   157b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   157b8:	cmp	r2, r3
   157bc:	movne	r3, #1
   157c0:	moveq	r3, #0
   157c4:	uxtb	r3, r3
   157c8:	cmp	r3, #0
   157cc:	bne	145e8 <__assert_fail@plt+0x3464>
   157d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   157d4:	cmp	r3, #0
   157d8:	bne	157f4 <__assert_fail@plt+0x4670>
   157dc:	ldr	r3, [fp, #4]
   157e0:	cmp	r3, #2
   157e4:	bne	157f4 <__assert_fail@plt+0x4670>
   157e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   157ec:	cmp	r3, #0
   157f0:	bne	15974 <__assert_fail@plt+0x47f0>
   157f4:	ldr	r3, [fp, #4]
   157f8:	cmp	r3, #2
   157fc:	bne	1589c <__assert_fail@plt+0x4718>
   15800:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15804:	eor	r3, r3, #1
   15808:	uxtb	r3, r3
   1580c:	cmp	r3, #0
   15810:	beq	1589c <__assert_fail@plt+0x4718>
   15814:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   15818:	cmp	r3, #0
   1581c:	beq	1589c <__assert_fail@plt+0x4718>
   15820:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15824:	cmp	r3, #0
   15828:	beq	15870 <__assert_fail@plt+0x46ec>
   1582c:	ldr	r3, [fp, #20]
   15830:	str	r3, [sp, #16]
   15834:	ldr	r3, [fp, #16]
   15838:	str	r3, [sp, #12]
   1583c:	ldr	r3, [fp, #12]
   15840:	str	r3, [sp, #8]
   15844:	ldr	r3, [fp, #8]
   15848:	str	r3, [sp, #4]
   1584c:	mov	r3, #5
   15850:	str	r3, [sp]
   15854:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15858:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1585c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15860:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15864:	bl	14320 <__assert_fail@plt+0x319c>
   15868:	mov	r3, r0
   1586c:	b	159dc <__assert_fail@plt+0x4858>
   15870:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15874:	cmp	r3, #0
   15878:	bne	1589c <__assert_fail@plt+0x4718>
   1587c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15880:	cmp	r3, #0
   15884:	beq	1589c <__assert_fail@plt+0x4718>
   15888:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1588c:	str	r3, [fp, #-92]	; 0xffffffa4
   15890:	mov	r3, #0
   15894:	str	r3, [fp, #-20]	; 0xffffffec
   15898:	b	143b4 <__assert_fail@plt+0x3230>
   1589c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158a0:	cmp	r3, #0
   158a4:	beq	15910 <__assert_fail@plt+0x478c>
   158a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   158ac:	eor	r3, r3, #1
   158b0:	uxtb	r3, r3
   158b4:	cmp	r3, #0
   158b8:	beq	15910 <__assert_fail@plt+0x478c>
   158bc:	b	15900 <__assert_fail@plt+0x477c>
   158c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   158c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158c8:	cmp	r2, r3
   158cc:	bcs	158e8 <__assert_fail@plt+0x4764>
   158d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   158d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   158d8:	add	r3, r2, r3
   158dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   158e0:	ldrb	r2, [r2]
   158e4:	strb	r2, [r3]
   158e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   158ec:	add	r3, r3, #1
   158f0:	str	r3, [fp, #-20]	; 0xffffffec
   158f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   158f8:	add	r3, r3, #1
   158fc:	str	r3, [fp, #-28]	; 0xffffffe4
   15900:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15904:	ldrb	r3, [r3]
   15908:	cmp	r3, #0
   1590c:	bne	158c0 <__assert_fail@plt+0x473c>
   15910:	ldr	r2, [fp, #-20]	; 0xffffffec
   15914:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15918:	cmp	r2, r3
   1591c:	bcs	15934 <__assert_fail@plt+0x47b0>
   15920:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15924:	ldr	r3, [fp, #-20]	; 0xffffffec
   15928:	add	r3, r2, r3
   1592c:	mov	r2, #0
   15930:	strb	r2, [r3]
   15934:	ldr	r3, [fp, #-20]	; 0xffffffec
   15938:	b	159dc <__assert_fail@plt+0x4858>
   1593c:	nop	{0}
   15940:	b	15978 <__assert_fail@plt+0x47f4>
   15944:	nop	{0}
   15948:	b	15978 <__assert_fail@plt+0x47f4>
   1594c:	nop	{0}
   15950:	b	15978 <__assert_fail@plt+0x47f4>
   15954:	nop	{0}
   15958:	b	15978 <__assert_fail@plt+0x47f4>
   1595c:	nop	{0}
   15960:	b	15978 <__assert_fail@plt+0x47f4>
   15964:	nop	{0}
   15968:	b	15978 <__assert_fail@plt+0x47f4>
   1596c:	nop	{0}
   15970:	b	15978 <__assert_fail@plt+0x47f4>
   15974:	nop	{0}
   15978:	ldr	r3, [fp, #4]
   1597c:	cmp	r3, #2
   15980:	bne	15998 <__assert_fail@plt+0x4814>
   15984:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15988:	cmp	r3, #0
   1598c:	beq	15998 <__assert_fail@plt+0x4814>
   15990:	mov	r3, #4
   15994:	str	r3, [fp, #4]
   15998:	ldr	r3, [fp, #8]
   1599c:	bic	r3, r3, #2
   159a0:	ldr	r2, [fp, #20]
   159a4:	str	r2, [sp, #16]
   159a8:	ldr	r2, [fp, #16]
   159ac:	str	r2, [sp, #12]
   159b0:	mov	r2, #0
   159b4:	str	r2, [sp, #8]
   159b8:	str	r3, [sp, #4]
   159bc:	ldr	r3, [fp, #4]
   159c0:	str	r3, [sp]
   159c4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   159c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   159cc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   159d0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   159d4:	bl	14320 <__assert_fail@plt+0x319c>
   159d8:	mov	r3, r0
   159dc:	mov	r0, r3
   159e0:	sub	sp, fp, #8
   159e4:	ldr	r4, [sp]
   159e8:	ldr	fp, [sp, #4]
   159ec:	add	sp, sp, #8
   159f0:	pop	{pc}		; (ldr pc, [sp], #4)
   159f4:	str	fp, [sp, #-8]!
   159f8:	str	lr, [sp, #4]
   159fc:	add	fp, sp, #4
   15a00:	sub	sp, sp, #56	; 0x38
   15a04:	str	r0, [fp, #-24]	; 0xffffffe8
   15a08:	str	r1, [fp, #-28]	; 0xffffffe4
   15a0c:	str	r2, [fp, #-32]	; 0xffffffe0
   15a10:	str	r3, [fp, #-36]	; 0xffffffdc
   15a14:	ldr	r3, [fp, #4]
   15a18:	cmp	r3, #0
   15a1c:	beq	15a28 <__assert_fail@plt+0x48a4>
   15a20:	ldr	r3, [fp, #4]
   15a24:	b	15a30 <__assert_fail@plt+0x48ac>
   15a28:	movw	r3, #41492	; 0xa214
   15a2c:	movt	r3, #2
   15a30:	str	r3, [fp, #-8]
   15a34:	bl	11094 <__errno_location@plt>
   15a38:	mov	r3, r0
   15a3c:	ldr	r3, [r3]
   15a40:	str	r3, [fp, #-12]
   15a44:	ldr	r3, [fp, #-8]
   15a48:	ldr	r3, [r3]
   15a4c:	ldr	r2, [fp, #-8]
   15a50:	ldr	r2, [r2, #4]
   15a54:	ldr	r1, [fp, #-8]
   15a58:	add	r1, r1, #8
   15a5c:	ldr	r0, [fp, #-8]
   15a60:	ldr	r0, [r0, #40]	; 0x28
   15a64:	ldr	ip, [fp, #-8]
   15a68:	ldr	ip, [ip, #44]	; 0x2c
   15a6c:	str	ip, [sp, #16]
   15a70:	str	r0, [sp, #12]
   15a74:	str	r1, [sp, #8]
   15a78:	str	r2, [sp, #4]
   15a7c:	str	r3, [sp]
   15a80:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a84:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15a88:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15a8c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a90:	bl	14320 <__assert_fail@plt+0x319c>
   15a94:	str	r0, [fp, #-16]
   15a98:	bl	11094 <__errno_location@plt>
   15a9c:	mov	r2, r0
   15aa0:	ldr	r3, [fp, #-12]
   15aa4:	str	r3, [r2]
   15aa8:	ldr	r3, [fp, #-16]
   15aac:	mov	r0, r3
   15ab0:	sub	sp, fp, #4
   15ab4:	ldr	fp, [sp]
   15ab8:	add	sp, sp, #4
   15abc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac0:	str	fp, [sp, #-8]!
   15ac4:	str	lr, [sp, #4]
   15ac8:	add	fp, sp, #4
   15acc:	sub	sp, sp, #16
   15ad0:	str	r0, [fp, #-8]
   15ad4:	str	r1, [fp, #-12]
   15ad8:	str	r2, [fp, #-16]
   15adc:	ldr	r3, [fp, #-16]
   15ae0:	mov	r2, #0
   15ae4:	ldr	r1, [fp, #-12]
   15ae8:	ldr	r0, [fp, #-8]
   15aec:	bl	15b08 <__assert_fail@plt+0x4984>
   15af0:	mov	r3, r0
   15af4:	mov	r0, r3
   15af8:	sub	sp, fp, #4
   15afc:	ldr	fp, [sp]
   15b00:	add	sp, sp, #4
   15b04:	pop	{pc}		; (ldr pc, [sp], #4)
   15b08:	str	fp, [sp, #-8]!
   15b0c:	str	lr, [sp, #4]
   15b10:	add	fp, sp, #4
   15b14:	sub	sp, sp, #64	; 0x40
   15b18:	str	r0, [fp, #-32]	; 0xffffffe0
   15b1c:	str	r1, [fp, #-36]	; 0xffffffdc
   15b20:	str	r2, [fp, #-40]	; 0xffffffd8
   15b24:	str	r3, [fp, #-44]	; 0xffffffd4
   15b28:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b2c:	cmp	r3, #0
   15b30:	beq	15b3c <__assert_fail@plt+0x49b8>
   15b34:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15b38:	b	15b44 <__assert_fail@plt+0x49c0>
   15b3c:	movw	r3, #41492	; 0xa214
   15b40:	movt	r3, #2
   15b44:	str	r3, [fp, #-8]
   15b48:	bl	11094 <__errno_location@plt>
   15b4c:	mov	r3, r0
   15b50:	ldr	r3, [r3]
   15b54:	str	r3, [fp, #-12]
   15b58:	ldr	r3, [fp, #-8]
   15b5c:	ldr	r3, [r3, #4]
   15b60:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15b64:	cmp	r2, #0
   15b68:	moveq	r2, #1
   15b6c:	movne	r2, #0
   15b70:	uxtb	r2, r2
   15b74:	orr	r3, r3, r2
   15b78:	str	r3, [fp, #-16]
   15b7c:	ldr	r3, [fp, #-8]
   15b80:	ldr	r3, [r3]
   15b84:	ldr	r2, [fp, #-8]
   15b88:	add	r2, r2, #8
   15b8c:	ldr	r1, [fp, #-8]
   15b90:	ldr	r1, [r1, #40]	; 0x28
   15b94:	ldr	r0, [fp, #-8]
   15b98:	ldr	r0, [r0, #44]	; 0x2c
   15b9c:	str	r0, [sp, #16]
   15ba0:	str	r1, [sp, #12]
   15ba4:	str	r2, [sp, #8]
   15ba8:	ldr	r2, [fp, #-16]
   15bac:	str	r2, [sp, #4]
   15bb0:	str	r3, [sp]
   15bb4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15bb8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15bbc:	mov	r1, #0
   15bc0:	mov	r0, #0
   15bc4:	bl	14320 <__assert_fail@plt+0x319c>
   15bc8:	mov	r3, r0
   15bcc:	add	r3, r3, #1
   15bd0:	str	r3, [fp, #-20]	; 0xffffffec
   15bd4:	ldr	r0, [fp, #-20]	; 0xffffffec
   15bd8:	bl	17488 <__assert_fail@plt+0x6304>
   15bdc:	mov	r3, r0
   15be0:	str	r3, [fp, #-24]	; 0xffffffe8
   15be4:	ldr	r3, [fp, #-8]
   15be8:	ldr	r3, [r3]
   15bec:	ldr	r2, [fp, #-8]
   15bf0:	add	r2, r2, #8
   15bf4:	ldr	r1, [fp, #-8]
   15bf8:	ldr	r1, [r1, #40]	; 0x28
   15bfc:	ldr	r0, [fp, #-8]
   15c00:	ldr	r0, [r0, #44]	; 0x2c
   15c04:	str	r0, [sp, #16]
   15c08:	str	r1, [sp, #12]
   15c0c:	str	r2, [sp, #8]
   15c10:	ldr	r2, [fp, #-16]
   15c14:	str	r2, [sp, #4]
   15c18:	str	r3, [sp]
   15c1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15c20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c24:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c2c:	bl	14320 <__assert_fail@plt+0x319c>
   15c30:	bl	11094 <__errno_location@plt>
   15c34:	mov	r2, r0
   15c38:	ldr	r3, [fp, #-12]
   15c3c:	str	r3, [r2]
   15c40:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c44:	cmp	r3, #0
   15c48:	beq	15c5c <__assert_fail@plt+0x4ad8>
   15c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c50:	sub	r2, r3, #1
   15c54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15c58:	str	r2, [r3]
   15c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c60:	mov	r0, r3
   15c64:	sub	sp, fp, #4
   15c68:	ldr	fp, [sp]
   15c6c:	add	sp, sp, #4
   15c70:	pop	{pc}		; (ldr pc, [sp], #4)
   15c74:	str	fp, [sp, #-8]!
   15c78:	str	lr, [sp, #4]
   15c7c:	add	fp, sp, #4
   15c80:	sub	sp, sp, #8
   15c84:	movw	r3, #41272	; 0xa138
   15c88:	movt	r3, #2
   15c8c:	ldr	r3, [r3]
   15c90:	str	r3, [fp, #-12]
   15c94:	mov	r3, #1
   15c98:	str	r3, [fp, #-8]
   15c9c:	b	15cc8 <__assert_fail@plt+0x4b44>
   15ca0:	ldr	r3, [fp, #-8]
   15ca4:	lsl	r3, r3, #3
   15ca8:	ldr	r2, [fp, #-12]
   15cac:	add	r3, r2, r3
   15cb0:	ldr	r3, [r3, #4]
   15cb4:	mov	r0, r3
   15cb8:	bl	13b44 <__assert_fail@plt+0x29c0>
   15cbc:	ldr	r3, [fp, #-8]
   15cc0:	add	r3, r3, #1
   15cc4:	str	r3, [fp, #-8]
   15cc8:	movw	r3, #41260	; 0xa12c
   15ccc:	movt	r3, #2
   15cd0:	ldr	r3, [r3]
   15cd4:	ldr	r2, [fp, #-8]
   15cd8:	cmp	r2, r3
   15cdc:	blt	15ca0 <__assert_fail@plt+0x4b1c>
   15ce0:	ldr	r3, [fp, #-12]
   15ce4:	ldr	r2, [r3, #4]
   15ce8:	movw	r3, #41540	; 0xa244
   15cec:	movt	r3, #2
   15cf0:	cmp	r2, r3
   15cf4:	beq	15d2c <__assert_fail@plt+0x4ba8>
   15cf8:	ldr	r3, [fp, #-12]
   15cfc:	ldr	r3, [r3, #4]
   15d00:	mov	r0, r3
   15d04:	bl	13b44 <__assert_fail@plt+0x29c0>
   15d08:	movw	r3, #41264	; 0xa130
   15d0c:	movt	r3, #2
   15d10:	mov	r2, #256	; 0x100
   15d14:	str	r2, [r3]
   15d18:	movw	r3, #41264	; 0xa130
   15d1c:	movt	r3, #2
   15d20:	movw	r2, #41540	; 0xa244
   15d24:	movt	r2, #2
   15d28:	str	r2, [r3, #4]
   15d2c:	ldr	r2, [fp, #-12]
   15d30:	movw	r3, #41264	; 0xa130
   15d34:	movt	r3, #2
   15d38:	cmp	r2, r3
   15d3c:	beq	15d5c <__assert_fail@plt+0x4bd8>
   15d40:	ldr	r0, [fp, #-12]
   15d44:	bl	13b44 <__assert_fail@plt+0x29c0>
   15d48:	movw	r3, #41272	; 0xa138
   15d4c:	movt	r3, #2
   15d50:	movw	r2, #41264	; 0xa130
   15d54:	movt	r2, #2
   15d58:	str	r2, [r3]
   15d5c:	movw	r3, #41260	; 0xa12c
   15d60:	movt	r3, #2
   15d64:	mov	r2, #1
   15d68:	str	r2, [r3]
   15d6c:	nop	{0}
   15d70:	sub	sp, fp, #4
   15d74:	ldr	fp, [sp]
   15d78:	add	sp, sp, #4
   15d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d80:	str	fp, [sp, #-8]!
   15d84:	str	lr, [sp, #4]
   15d88:	add	fp, sp, #4
   15d8c:	sub	sp, sp, #80	; 0x50
   15d90:	str	r0, [fp, #-48]	; 0xffffffd0
   15d94:	str	r1, [fp, #-52]	; 0xffffffcc
   15d98:	str	r2, [fp, #-56]	; 0xffffffc8
   15d9c:	str	r3, [fp, #-60]	; 0xffffffc4
   15da0:	bl	11094 <__errno_location@plt>
   15da4:	mov	r3, r0
   15da8:	ldr	r3, [r3]
   15dac:	str	r3, [fp, #-16]
   15db0:	movw	r3, #41272	; 0xa138
   15db4:	movt	r3, #2
   15db8:	ldr	r3, [r3]
   15dbc:	str	r3, [fp, #-8]
   15dc0:	mvn	r3, #-2147483648	; 0x80000000
   15dc4:	str	r3, [fp, #-20]	; 0xffffffec
   15dc8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15dcc:	cmp	r3, #0
   15dd0:	blt	15de4 <__assert_fail@plt+0x4c60>
   15dd4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15dd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ddc:	cmp	r2, r3
   15de0:	blt	15de8 <__assert_fail@plt+0x4c64>
   15de4:	bl	1116c <abort@plt>
   15de8:	movw	r3, #41260	; 0xa12c
   15dec:	movt	r3, #2
   15df0:	ldr	r3, [r3]
   15df4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15df8:	cmp	r2, r3
   15dfc:	blt	15ef4 <__assert_fail@plt+0x4d70>
   15e00:	ldr	r2, [fp, #-8]
   15e04:	movw	r3, #41264	; 0xa130
   15e08:	movt	r3, #2
   15e0c:	cmp	r2, r3
   15e10:	moveq	r3, #1
   15e14:	movne	r3, #0
   15e18:	strb	r3, [fp, #-21]	; 0xffffffeb
   15e1c:	movw	r3, #41260	; 0xa12c
   15e20:	movt	r3, #2
   15e24:	ldr	r3, [r3]
   15e28:	str	r3, [fp, #-40]	; 0xffffffd8
   15e2c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15e30:	cmp	r3, #0
   15e34:	beq	15e40 <__assert_fail@plt+0x4cbc>
   15e38:	mov	r0, #0
   15e3c:	b	15e44 <__assert_fail@plt+0x4cc0>
   15e40:	ldr	r0, [fp, #-8]
   15e44:	movw	r3, #41260	; 0xa12c
   15e48:	movt	r3, #2
   15e4c:	ldr	r3, [r3]
   15e50:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15e54:	sub	r3, r2, r3
   15e58:	add	r2, r3, #1
   15e5c:	sub	r1, fp, #40	; 0x28
   15e60:	mov	r3, #8
   15e64:	str	r3, [sp]
   15e68:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e6c:	bl	177e8 <__assert_fail@plt+0x6664>
   15e70:	str	r0, [fp, #-8]
   15e74:	movw	r3, #41272	; 0xa138
   15e78:	movt	r3, #2
   15e7c:	ldr	r2, [fp, #-8]
   15e80:	str	r2, [r3]
   15e84:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15e88:	cmp	r3, #0
   15e8c:	beq	15ea8 <__assert_fail@plt+0x4d24>
   15e90:	ldr	r2, [fp, #-8]
   15e94:	movw	r3, #41264	; 0xa130
   15e98:	movt	r3, #2
   15e9c:	mov	r1, r2
   15ea0:	ldrd	r2, [r3]
   15ea4:	strd	r2, [r1]
   15ea8:	movw	r3, #41260	; 0xa12c
   15eac:	movt	r3, #2
   15eb0:	ldr	r3, [r3]
   15eb4:	lsl	r3, r3, #3
   15eb8:	ldr	r2, [fp, #-8]
   15ebc:	add	r0, r2, r3
   15ec0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15ec4:	movw	r3, #41260	; 0xa12c
   15ec8:	movt	r3, #2
   15ecc:	ldr	r3, [r3]
   15ed0:	sub	r3, r2, r3
   15ed4:	lsl	r3, r3, #3
   15ed8:	mov	r2, r3
   15edc:	mov	r1, #0
   15ee0:	bl	110ac <memset@plt>
   15ee4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15ee8:	movw	r3, #41260	; 0xa12c
   15eec:	movt	r3, #2
   15ef0:	str	r2, [r3]
   15ef4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15ef8:	lsl	r3, r3, #3
   15efc:	ldr	r2, [fp, #-8]
   15f00:	add	r3, r2, r3
   15f04:	ldr	r3, [r3]
   15f08:	str	r3, [fp, #-28]	; 0xffffffe4
   15f0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15f10:	lsl	r3, r3, #3
   15f14:	ldr	r2, [fp, #-8]
   15f18:	add	r3, r2, r3
   15f1c:	ldr	r3, [r3, #4]
   15f20:	str	r3, [fp, #-12]
   15f24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15f28:	ldr	r3, [r3, #4]
   15f2c:	orr	r3, r3, #1
   15f30:	str	r3, [fp, #-32]	; 0xffffffe0
   15f34:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15f38:	ldr	r3, [r3]
   15f3c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15f40:	add	r2, r2, #8
   15f44:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15f48:	ldr	r1, [r1, #40]	; 0x28
   15f4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15f50:	ldr	r0, [r0, #44]	; 0x2c
   15f54:	str	r0, [sp, #16]
   15f58:	str	r1, [sp, #12]
   15f5c:	str	r2, [sp, #8]
   15f60:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15f64:	str	r2, [sp, #4]
   15f68:	str	r3, [sp]
   15f6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15f70:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15f74:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15f78:	ldr	r0, [fp, #-12]
   15f7c:	bl	14320 <__assert_fail@plt+0x319c>
   15f80:	str	r0, [fp, #-36]	; 0xffffffdc
   15f84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15f88:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f8c:	cmp	r2, r3
   15f90:	bhi	16048 <__assert_fail@plt+0x4ec4>
   15f94:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f98:	add	r3, r3, #1
   15f9c:	str	r3, [fp, #-28]	; 0xffffffe4
   15fa0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15fa4:	lsl	r3, r3, #3
   15fa8:	ldr	r2, [fp, #-8]
   15fac:	add	r3, r2, r3
   15fb0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15fb4:	str	r2, [r3]
   15fb8:	ldr	r2, [fp, #-12]
   15fbc:	movw	r3, #41540	; 0xa244
   15fc0:	movt	r3, #2
   15fc4:	cmp	r2, r3
   15fc8:	beq	15fd4 <__assert_fail@plt+0x4e50>
   15fcc:	ldr	r0, [fp, #-12]
   15fd0:	bl	13b44 <__assert_fail@plt+0x29c0>
   15fd4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15fd8:	bl	17488 <__assert_fail@plt+0x6304>
   15fdc:	mov	r3, r0
   15fe0:	str	r3, [fp, #-12]
   15fe4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15fe8:	lsl	r3, r3, #3
   15fec:	ldr	r2, [fp, #-8]
   15ff0:	add	r3, r2, r3
   15ff4:	ldr	r2, [fp, #-12]
   15ff8:	str	r2, [r3, #4]
   15ffc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   16000:	ldr	r3, [r3]
   16004:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16008:	add	r2, r2, #8
   1600c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16010:	ldr	r1, [r1, #40]	; 0x28
   16014:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16018:	ldr	r0, [r0, #44]	; 0x2c
   1601c:	str	r0, [sp, #16]
   16020:	str	r1, [sp, #12]
   16024:	str	r2, [sp, #8]
   16028:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1602c:	str	r2, [sp, #4]
   16030:	str	r3, [sp]
   16034:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16038:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1603c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16040:	ldr	r0, [fp, #-12]
   16044:	bl	14320 <__assert_fail@plt+0x319c>
   16048:	bl	11094 <__errno_location@plt>
   1604c:	mov	r2, r0
   16050:	ldr	r3, [fp, #-16]
   16054:	str	r3, [r2]
   16058:	ldr	r3, [fp, #-12]
   1605c:	mov	r0, r3
   16060:	sub	sp, fp, #4
   16064:	ldr	fp, [sp]
   16068:	add	sp, sp, #4
   1606c:	pop	{pc}		; (ldr pc, [sp], #4)
   16070:	str	fp, [sp, #-8]!
   16074:	str	lr, [sp, #4]
   16078:	add	fp, sp, #4
   1607c:	sub	sp, sp, #8
   16080:	str	r0, [fp, #-8]
   16084:	str	r1, [fp, #-12]
   16088:	movw	r3, #41492	; 0xa214
   1608c:	movt	r3, #2
   16090:	mvn	r2, #0
   16094:	ldr	r1, [fp, #-12]
   16098:	ldr	r0, [fp, #-8]
   1609c:	bl	15d80 <__assert_fail@plt+0x4bfc>
   160a0:	mov	r3, r0
   160a4:	mov	r0, r3
   160a8:	sub	sp, fp, #4
   160ac:	ldr	fp, [sp]
   160b0:	add	sp, sp, #4
   160b4:	pop	{pc}		; (ldr pc, [sp], #4)
   160b8:	str	fp, [sp, #-8]!
   160bc:	str	lr, [sp, #4]
   160c0:	add	fp, sp, #4
   160c4:	sub	sp, sp, #16
   160c8:	str	r0, [fp, #-8]
   160cc:	str	r1, [fp, #-12]
   160d0:	str	r2, [fp, #-16]
   160d4:	movw	r3, #41492	; 0xa214
   160d8:	movt	r3, #2
   160dc:	ldr	r2, [fp, #-16]
   160e0:	ldr	r1, [fp, #-12]
   160e4:	ldr	r0, [fp, #-8]
   160e8:	bl	15d80 <__assert_fail@plt+0x4bfc>
   160ec:	mov	r3, r0
   160f0:	mov	r0, r3
   160f4:	sub	sp, fp, #4
   160f8:	ldr	fp, [sp]
   160fc:	add	sp, sp, #4
   16100:	pop	{pc}		; (ldr pc, [sp], #4)
   16104:	str	fp, [sp, #-8]!
   16108:	str	lr, [sp, #4]
   1610c:	add	fp, sp, #4
   16110:	sub	sp, sp, #8
   16114:	str	r0, [fp, #-8]
   16118:	ldr	r1, [fp, #-8]
   1611c:	mov	r0, #0
   16120:	bl	16070 <__assert_fail@plt+0x4eec>
   16124:	mov	r3, r0
   16128:	mov	r0, r3
   1612c:	sub	sp, fp, #4
   16130:	ldr	fp, [sp]
   16134:	add	sp, sp, #4
   16138:	pop	{pc}		; (ldr pc, [sp], #4)
   1613c:	str	fp, [sp, #-8]!
   16140:	str	lr, [sp, #4]
   16144:	add	fp, sp, #4
   16148:	sub	sp, sp, #8
   1614c:	str	r0, [fp, #-8]
   16150:	str	r1, [fp, #-12]
   16154:	ldr	r2, [fp, #-12]
   16158:	ldr	r1, [fp, #-8]
   1615c:	mov	r0, #0
   16160:	bl	160b8 <__assert_fail@plt+0x4f34>
   16164:	mov	r3, r0
   16168:	mov	r0, r3
   1616c:	sub	sp, fp, #4
   16170:	ldr	fp, [sp]
   16174:	add	sp, sp, #4
   16178:	pop	{pc}		; (ldr pc, [sp], #4)
   1617c:	str	fp, [sp, #-8]!
   16180:	str	lr, [sp, #4]
   16184:	add	fp, sp, #4
   16188:	sub	sp, sp, #64	; 0x40
   1618c:	str	r0, [fp, #-56]	; 0xffffffc8
   16190:	str	r1, [fp, #-60]	; 0xffffffc4
   16194:	str	r2, [fp, #-64]	; 0xffffffc0
   16198:	sub	r3, fp, #52	; 0x34
   1619c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   161a0:	mov	r0, r3
   161a4:	bl	1417c <__assert_fail@plt+0x2ff8>
   161a8:	sub	r3, fp, #52	; 0x34
   161ac:	mvn	r2, #0
   161b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   161b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   161b8:	bl	15d80 <__assert_fail@plt+0x4bfc>
   161bc:	mov	r3, r0
   161c0:	mov	r0, r3
   161c4:	sub	sp, fp, #4
   161c8:	ldr	fp, [sp]
   161cc:	add	sp, sp, #4
   161d0:	pop	{pc}		; (ldr pc, [sp], #4)
   161d4:	str	fp, [sp, #-8]!
   161d8:	str	lr, [sp, #4]
   161dc:	add	fp, sp, #4
   161e0:	sub	sp, sp, #64	; 0x40
   161e4:	str	r0, [fp, #-56]	; 0xffffffc8
   161e8:	str	r1, [fp, #-60]	; 0xffffffc4
   161ec:	str	r2, [fp, #-64]	; 0xffffffc0
   161f0:	str	r3, [fp, #-68]	; 0xffffffbc
   161f4:	sub	r3, fp, #52	; 0x34
   161f8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   161fc:	mov	r0, r3
   16200:	bl	1417c <__assert_fail@plt+0x2ff8>
   16204:	sub	r3, fp, #52	; 0x34
   16208:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1620c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16210:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16214:	bl	15d80 <__assert_fail@plt+0x4bfc>
   16218:	mov	r3, r0
   1621c:	mov	r0, r3
   16220:	sub	sp, fp, #4
   16224:	ldr	fp, [sp]
   16228:	add	sp, sp, #4
   1622c:	pop	{pc}		; (ldr pc, [sp], #4)
   16230:	str	fp, [sp, #-8]!
   16234:	str	lr, [sp, #4]
   16238:	add	fp, sp, #4
   1623c:	sub	sp, sp, #8
   16240:	str	r0, [fp, #-8]
   16244:	str	r1, [fp, #-12]
   16248:	ldr	r2, [fp, #-12]
   1624c:	ldr	r1, [fp, #-8]
   16250:	mov	r0, #0
   16254:	bl	1617c <__assert_fail@plt+0x4ff8>
   16258:	mov	r3, r0
   1625c:	mov	r0, r3
   16260:	sub	sp, fp, #4
   16264:	ldr	fp, [sp]
   16268:	add	sp, sp, #4
   1626c:	pop	{pc}		; (ldr pc, [sp], #4)
   16270:	str	fp, [sp, #-8]!
   16274:	str	lr, [sp, #4]
   16278:	add	fp, sp, #4
   1627c:	sub	sp, sp, #16
   16280:	str	r0, [fp, #-8]
   16284:	str	r1, [fp, #-12]
   16288:	str	r2, [fp, #-16]
   1628c:	ldr	r3, [fp, #-16]
   16290:	ldr	r2, [fp, #-12]
   16294:	ldr	r1, [fp, #-8]
   16298:	mov	r0, #0
   1629c:	bl	161d4 <__assert_fail@plt+0x5050>
   162a0:	mov	r3, r0
   162a4:	mov	r0, r3
   162a8:	sub	sp, fp, #4
   162ac:	ldr	fp, [sp]
   162b0:	add	sp, sp, #4
   162b4:	pop	{pc}		; (ldr pc, [sp], #4)
   162b8:	str	fp, [sp, #-8]!
   162bc:	str	lr, [sp, #4]
   162c0:	add	fp, sp, #4
   162c4:	sub	sp, sp, #64	; 0x40
   162c8:	str	r0, [fp, #-56]	; 0xffffffc8
   162cc:	str	r1, [fp, #-60]	; 0xffffffc4
   162d0:	mov	r3, r2
   162d4:	strb	r3, [fp, #-61]	; 0xffffffc3
   162d8:	movw	r2, #41492	; 0xa214
   162dc:	movt	r2, #2
   162e0:	sub	r3, fp, #52	; 0x34
   162e4:	ldrd	r0, [r2]
   162e8:	strd	r0, [r3]
   162ec:	ldrd	r0, [r2, #8]
   162f0:	strd	r0, [r3, #8]
   162f4:	ldrd	r0, [r2, #16]
   162f8:	strd	r0, [r3, #16]
   162fc:	ldrd	r0, [r2, #24]
   16300:	strd	r0, [r3, #24]
   16304:	ldrd	r0, [r2, #32]
   16308:	strd	r0, [r3, #32]
   1630c:	ldrd	r0, [r2, #40]	; 0x28
   16310:	strd	r0, [r3, #40]	; 0x28
   16314:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   16318:	sub	r3, fp, #52	; 0x34
   1631c:	mov	r2, #1
   16320:	mov	r0, r3
   16324:	bl	13fdc <__assert_fail@plt+0x2e58>
   16328:	sub	r3, fp, #52	; 0x34
   1632c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16330:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16334:	mov	r0, #0
   16338:	bl	15d80 <__assert_fail@plt+0x4bfc>
   1633c:	mov	r3, r0
   16340:	mov	r0, r3
   16344:	sub	sp, fp, #4
   16348:	ldr	fp, [sp]
   1634c:	add	sp, sp, #4
   16350:	pop	{pc}		; (ldr pc, [sp], #4)
   16354:	str	fp, [sp, #-8]!
   16358:	str	lr, [sp, #4]
   1635c:	add	fp, sp, #4
   16360:	sub	sp, sp, #8
   16364:	str	r0, [fp, #-8]
   16368:	mov	r3, r1
   1636c:	strb	r3, [fp, #-9]
   16370:	ldrb	r3, [fp, #-9]
   16374:	mov	r2, r3
   16378:	mvn	r1, #0
   1637c:	ldr	r0, [fp, #-8]
   16380:	bl	162b8 <__assert_fail@plt+0x5134>
   16384:	mov	r3, r0
   16388:	mov	r0, r3
   1638c:	sub	sp, fp, #4
   16390:	ldr	fp, [sp]
   16394:	add	sp, sp, #4
   16398:	pop	{pc}		; (ldr pc, [sp], #4)
   1639c:	str	fp, [sp, #-8]!
   163a0:	str	lr, [sp, #4]
   163a4:	add	fp, sp, #4
   163a8:	sub	sp, sp, #8
   163ac:	str	r0, [fp, #-8]
   163b0:	mov	r1, #58	; 0x3a
   163b4:	ldr	r0, [fp, #-8]
   163b8:	bl	16354 <__assert_fail@plt+0x51d0>
   163bc:	mov	r3, r0
   163c0:	mov	r0, r3
   163c4:	sub	sp, fp, #4
   163c8:	ldr	fp, [sp]
   163cc:	add	sp, sp, #4
   163d0:	pop	{pc}		; (ldr pc, [sp], #4)
   163d4:	str	fp, [sp, #-8]!
   163d8:	str	lr, [sp, #4]
   163dc:	add	fp, sp, #4
   163e0:	sub	sp, sp, #8
   163e4:	str	r0, [fp, #-8]
   163e8:	str	r1, [fp, #-12]
   163ec:	mov	r2, #58	; 0x3a
   163f0:	ldr	r1, [fp, #-12]
   163f4:	ldr	r0, [fp, #-8]
   163f8:	bl	162b8 <__assert_fail@plt+0x5134>
   163fc:	mov	r3, r0
   16400:	mov	r0, r3
   16404:	sub	sp, fp, #4
   16408:	ldr	fp, [sp]
   1640c:	add	sp, sp, #4
   16410:	pop	{pc}		; (ldr pc, [sp], #4)
   16414:	str	fp, [sp, #-8]!
   16418:	str	lr, [sp, #4]
   1641c:	add	fp, sp, #4
   16420:	sub	sp, sp, #112	; 0x70
   16424:	str	r0, [fp, #-56]	; 0xffffffc8
   16428:	str	r1, [fp, #-60]	; 0xffffffc4
   1642c:	str	r2, [fp, #-64]	; 0xffffffc0
   16430:	sub	r3, fp, #116	; 0x74
   16434:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16438:	mov	r0, r3
   1643c:	bl	1417c <__assert_fail@plt+0x2ff8>
   16440:	sub	r3, fp, #52	; 0x34
   16444:	sub	r2, fp, #116	; 0x74
   16448:	ldrd	r0, [r2]
   1644c:	strd	r0, [r3]
   16450:	ldrd	r0, [r2, #8]
   16454:	strd	r0, [r3, #8]
   16458:	ldrd	r0, [r2, #16]
   1645c:	strd	r0, [r3, #16]
   16460:	ldrd	r0, [r2, #24]
   16464:	strd	r0, [r3, #24]
   16468:	ldrd	r0, [r2, #32]
   1646c:	strd	r0, [r3, #32]
   16470:	ldrd	r0, [r2, #40]	; 0x28
   16474:	strd	r0, [r3, #40]	; 0x28
   16478:	sub	r3, fp, #52	; 0x34
   1647c:	mov	r2, #1
   16480:	mov	r1, #58	; 0x3a
   16484:	mov	r0, r3
   16488:	bl	13fdc <__assert_fail@plt+0x2e58>
   1648c:	sub	r3, fp, #52	; 0x34
   16490:	mvn	r2, #0
   16494:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16498:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1649c:	bl	15d80 <__assert_fail@plt+0x4bfc>
   164a0:	mov	r3, r0
   164a4:	mov	r0, r3
   164a8:	sub	sp, fp, #4
   164ac:	ldr	fp, [sp]
   164b0:	add	sp, sp, #4
   164b4:	pop	{pc}		; (ldr pc, [sp], #4)
   164b8:	str	fp, [sp, #-8]!
   164bc:	str	lr, [sp, #4]
   164c0:	add	fp, sp, #4
   164c4:	sub	sp, sp, #24
   164c8:	str	r0, [fp, #-8]
   164cc:	str	r1, [fp, #-12]
   164d0:	str	r2, [fp, #-16]
   164d4:	str	r3, [fp, #-20]	; 0xffffffec
   164d8:	mvn	r3, #0
   164dc:	str	r3, [sp]
   164e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164e4:	ldr	r2, [fp, #-16]
   164e8:	ldr	r1, [fp, #-12]
   164ec:	ldr	r0, [fp, #-8]
   164f0:	bl	1650c <__assert_fail@plt+0x5388>
   164f4:	mov	r3, r0
   164f8:	mov	r0, r3
   164fc:	sub	sp, fp, #4
   16500:	ldr	fp, [sp]
   16504:	add	sp, sp, #4
   16508:	pop	{pc}		; (ldr pc, [sp], #4)
   1650c:	str	fp, [sp, #-8]!
   16510:	str	lr, [sp, #4]
   16514:	add	fp, sp, #4
   16518:	sub	sp, sp, #64	; 0x40
   1651c:	str	r0, [fp, #-56]	; 0xffffffc8
   16520:	str	r1, [fp, #-60]	; 0xffffffc4
   16524:	str	r2, [fp, #-64]	; 0xffffffc0
   16528:	str	r3, [fp, #-68]	; 0xffffffbc
   1652c:	movw	r2, #41492	; 0xa214
   16530:	movt	r2, #2
   16534:	sub	r3, fp, #52	; 0x34
   16538:	ldrd	r0, [r2]
   1653c:	strd	r0, [r3]
   16540:	ldrd	r0, [r2, #8]
   16544:	strd	r0, [r3, #8]
   16548:	ldrd	r0, [r2, #16]
   1654c:	strd	r0, [r3, #16]
   16550:	ldrd	r0, [r2, #24]
   16554:	strd	r0, [r3, #24]
   16558:	ldrd	r0, [r2, #32]
   1655c:	strd	r0, [r3, #32]
   16560:	ldrd	r0, [r2, #40]	; 0x28
   16564:	strd	r0, [r3, #40]	; 0x28
   16568:	sub	r3, fp, #52	; 0x34
   1656c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16570:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16574:	mov	r0, r3
   16578:	bl	140f4 <__assert_fail@plt+0x2f70>
   1657c:	sub	r3, fp, #52	; 0x34
   16580:	ldr	r2, [fp, #4]
   16584:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16588:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1658c:	bl	15d80 <__assert_fail@plt+0x4bfc>
   16590:	mov	r3, r0
   16594:	mov	r0, r3
   16598:	sub	sp, fp, #4
   1659c:	ldr	fp, [sp]
   165a0:	add	sp, sp, #4
   165a4:	pop	{pc}		; (ldr pc, [sp], #4)
   165a8:	str	fp, [sp, #-8]!
   165ac:	str	lr, [sp, #4]
   165b0:	add	fp, sp, #4
   165b4:	sub	sp, sp, #16
   165b8:	str	r0, [fp, #-8]
   165bc:	str	r1, [fp, #-12]
   165c0:	str	r2, [fp, #-16]
   165c4:	ldr	r3, [fp, #-16]
   165c8:	ldr	r2, [fp, #-12]
   165cc:	ldr	r1, [fp, #-8]
   165d0:	mov	r0, #0
   165d4:	bl	164b8 <__assert_fail@plt+0x5334>
   165d8:	mov	r3, r0
   165dc:	mov	r0, r3
   165e0:	sub	sp, fp, #4
   165e4:	ldr	fp, [sp]
   165e8:	add	sp, sp, #4
   165ec:	pop	{pc}		; (ldr pc, [sp], #4)
   165f0:	str	fp, [sp, #-8]!
   165f4:	str	lr, [sp, #4]
   165f8:	add	fp, sp, #4
   165fc:	sub	sp, sp, #24
   16600:	str	r0, [fp, #-8]
   16604:	str	r1, [fp, #-12]
   16608:	str	r2, [fp, #-16]
   1660c:	str	r3, [fp, #-20]	; 0xffffffec
   16610:	ldr	r3, [fp, #-20]	; 0xffffffec
   16614:	str	r3, [sp]
   16618:	ldr	r3, [fp, #-16]
   1661c:	ldr	r2, [fp, #-12]
   16620:	ldr	r1, [fp, #-8]
   16624:	mov	r0, #0
   16628:	bl	1650c <__assert_fail@plt+0x5388>
   1662c:	mov	r3, r0
   16630:	mov	r0, r3
   16634:	sub	sp, fp, #4
   16638:	ldr	fp, [sp]
   1663c:	add	sp, sp, #4
   16640:	pop	{pc}		; (ldr pc, [sp], #4)
   16644:	str	fp, [sp, #-8]!
   16648:	str	lr, [sp, #4]
   1664c:	add	fp, sp, #4
   16650:	sub	sp, sp, #16
   16654:	str	r0, [fp, #-8]
   16658:	str	r1, [fp, #-12]
   1665c:	str	r2, [fp, #-16]
   16660:	movw	r3, #41276	; 0xa13c
   16664:	movt	r3, #2
   16668:	ldr	r2, [fp, #-16]
   1666c:	ldr	r1, [fp, #-12]
   16670:	ldr	r0, [fp, #-8]
   16674:	bl	15d80 <__assert_fail@plt+0x4bfc>
   16678:	mov	r3, r0
   1667c:	mov	r0, r3
   16680:	sub	sp, fp, #4
   16684:	ldr	fp, [sp]
   16688:	add	sp, sp, #4
   1668c:	pop	{pc}		; (ldr pc, [sp], #4)
   16690:	str	fp, [sp, #-8]!
   16694:	str	lr, [sp, #4]
   16698:	add	fp, sp, #4
   1669c:	sub	sp, sp, #8
   166a0:	str	r0, [fp, #-8]
   166a4:	str	r1, [fp, #-12]
   166a8:	ldr	r2, [fp, #-12]
   166ac:	ldr	r1, [fp, #-8]
   166b0:	mov	r0, #0
   166b4:	bl	16644 <__assert_fail@plt+0x54c0>
   166b8:	mov	r3, r0
   166bc:	mov	r0, r3
   166c0:	sub	sp, fp, #4
   166c4:	ldr	fp, [sp]
   166c8:	add	sp, sp, #4
   166cc:	pop	{pc}		; (ldr pc, [sp], #4)
   166d0:	str	fp, [sp, #-8]!
   166d4:	str	lr, [sp, #4]
   166d8:	add	fp, sp, #4
   166dc:	sub	sp, sp, #8
   166e0:	str	r0, [fp, #-8]
   166e4:	str	r1, [fp, #-12]
   166e8:	mvn	r2, #0
   166ec:	ldr	r1, [fp, #-12]
   166f0:	ldr	r0, [fp, #-8]
   166f4:	bl	16644 <__assert_fail@plt+0x54c0>
   166f8:	mov	r3, r0
   166fc:	mov	r0, r3
   16700:	sub	sp, fp, #4
   16704:	ldr	fp, [sp]
   16708:	add	sp, sp, #4
   1670c:	pop	{pc}		; (ldr pc, [sp], #4)
   16710:	str	fp, [sp, #-8]!
   16714:	str	lr, [sp, #4]
   16718:	add	fp, sp, #4
   1671c:	sub	sp, sp, #8
   16720:	str	r0, [fp, #-8]
   16724:	ldr	r1, [fp, #-8]
   16728:	mov	r0, #0
   1672c:	bl	166d0 <__assert_fail@plt+0x554c>
   16730:	mov	r3, r0
   16734:	mov	r0, r3
   16738:	sub	sp, fp, #4
   1673c:	ldr	fp, [sp]
   16740:	add	sp, sp, #4
   16744:	pop	{pc}		; (ldr pc, [sp], #4)
   16748:	str	fp, [sp, #-8]!
   1674c:	str	lr, [sp, #4]
   16750:	add	fp, sp, #4
   16754:	sub	sp, sp, #16
   16758:	str	r0, [fp, #-16]
   1675c:	mov	r0, #33	; 0x21
   16760:	bl	17408 <__assert_fail@plt+0x6284>
   16764:	mov	r3, r0
   16768:	str	r3, [fp, #-12]
   1676c:	ldr	r3, [fp, #-16]
   16770:	add	r3, r3, #44	; 0x2c
   16774:	mov	r2, #32
   16778:	mov	r1, r3
   1677c:	ldr	r0, [fp, #-12]
   16780:	bl	110b8 <strncpy@plt>
   16784:	ldr	r3, [fp, #-12]
   16788:	add	r3, r3, #32
   1678c:	mov	r2, #0
   16790:	strb	r2, [r3]
   16794:	ldr	r0, [fp, #-12]
   16798:	bl	11070 <strlen@plt>
   1679c:	mov	r2, r0
   167a0:	ldr	r3, [fp, #-12]
   167a4:	add	r3, r3, r2
   167a8:	str	r3, [fp, #-8]
   167ac:	b	167c8 <__assert_fail@plt+0x5644>
   167b0:	ldr	r3, [fp, #-8]
   167b4:	sub	r3, r3, #1
   167b8:	str	r3, [fp, #-8]
   167bc:	ldr	r3, [fp, #-8]
   167c0:	mov	r2, #0
   167c4:	strb	r2, [r3]
   167c8:	ldr	r2, [fp, #-12]
   167cc:	ldr	r3, [fp, #-8]
   167d0:	cmp	r2, r3
   167d4:	bcs	167ec <__assert_fail@plt+0x5668>
   167d8:	ldr	r3, [fp, #-8]
   167dc:	sub	r3, r3, #1
   167e0:	ldrb	r3, [r3]
   167e4:	cmp	r3, #32
   167e8:	beq	167b0 <__assert_fail@plt+0x562c>
   167ec:	ldr	r3, [fp, #-12]
   167f0:	mov	r0, r3
   167f4:	sub	sp, fp, #4
   167f8:	ldr	fp, [sp]
   167fc:	add	sp, sp, #4
   16800:	pop	{pc}		; (ldr pc, [sp], #4)
   16804:	str	fp, [sp, #-8]!
   16808:	str	lr, [sp, #4]
   1680c:	add	fp, sp, #4
   16810:	sub	sp, sp, #16
   16814:	str	r0, [fp, #-16]
   16818:	str	r1, [fp, #-20]	; 0xffffffec
   1681c:	ldr	r3, [fp, #-16]
   16820:	ldrb	r3, [r3, #44]	; 0x2c
   16824:	cmp	r3, #0
   16828:	beq	16844 <__assert_fail@plt+0x56c0>
   1682c:	ldr	r3, [fp, #-16]
   16830:	ldrsh	r3, [r3]
   16834:	cmp	r3, #7
   16838:	bne	16844 <__assert_fail@plt+0x56c0>
   1683c:	mov	r3, #1
   16840:	b	16848 <__assert_fail@plt+0x56c4>
   16844:	mov	r3, #0
   16848:	strb	r3, [fp, #-5]
   1684c:	ldrb	r3, [fp, #-5]
   16850:	and	r3, r3, #1
   16854:	strb	r3, [fp, #-5]
   16858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1685c:	and	r3, r3, #2
   16860:	cmp	r3, #0
   16864:	beq	16884 <__assert_fail@plt+0x5700>
   16868:	ldrb	r3, [fp, #-5]
   1686c:	eor	r3, r3, #1
   16870:	uxtb	r3, r3
   16874:	cmp	r3, #0
   16878:	beq	16884 <__assert_fail@plt+0x5700>
   1687c:	mov	r3, #0
   16880:	b	168f0 <__assert_fail@plt+0x576c>
   16884:	ldr	r3, [fp, #-20]	; 0xffffffec
   16888:	and	r3, r3, #1
   1688c:	cmp	r3, #0
   16890:	beq	168ec <__assert_fail@plt+0x5768>
   16894:	ldrb	r3, [fp, #-5]
   16898:	cmp	r3, #0
   1689c:	beq	168ec <__assert_fail@plt+0x5768>
   168a0:	ldr	r3, [fp, #-16]
   168a4:	ldr	r3, [r3, #4]
   168a8:	cmp	r3, #0
   168ac:	ble	168ec <__assert_fail@plt+0x5768>
   168b0:	ldr	r3, [fp, #-16]
   168b4:	ldr	r3, [r3, #4]
   168b8:	mov	r1, #0
   168bc:	mov	r0, r3
   168c0:	bl	11034 <kill@plt>
   168c4:	mov	r3, r0
   168c8:	cmp	r3, #0
   168cc:	bge	168ec <__assert_fail@plt+0x5768>
   168d0:	bl	11094 <__errno_location@plt>
   168d4:	mov	r3, r0
   168d8:	ldr	r3, [r3]
   168dc:	cmp	r3, #3
   168e0:	bne	168ec <__assert_fail@plt+0x5768>
   168e4:	mov	r3, #0
   168e8:	b	168f0 <__assert_fail@plt+0x576c>
   168ec:	mov	r3, #1
   168f0:	mov	r0, r3
   168f4:	sub	sp, fp, #4
   168f8:	ldr	fp, [sp]
   168fc:	add	sp, sp, #4
   16900:	pop	{pc}		; (ldr pc, [sp], #4)
   16904:	str	fp, [sp, #-8]!
   16908:	str	lr, [sp, #4]
   1690c:	add	fp, sp, #4
   16910:	sub	sp, sp, #40	; 0x28
   16914:	str	r0, [fp, #-24]	; 0xffffffe8
   16918:	str	r1, [fp, #-28]	; 0xffffffe4
   1691c:	str	r2, [fp, #-32]	; 0xffffffe0
   16920:	str	r3, [fp, #-36]	; 0xffffffdc
   16924:	mov	r3, #0
   16928:	str	r3, [fp, #-8]
   1692c:	mov	r3, #0
   16930:	str	r3, [fp, #-20]	; 0xffffffec
   16934:	mov	r3, #0
   16938:	str	r3, [fp, #-12]
   1693c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16940:	bl	10ecc <utmpxname@plt>
   16944:	bl	10f50 <setutxent@plt>
   16948:	b	169d8 <__assert_fail@plt+0x5854>
   1694c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16950:	ldr	r0, [fp, #-16]
   16954:	bl	16804 <__assert_fail@plt+0x5680>
   16958:	mov	r3, r0
   1695c:	cmp	r3, #0
   16960:	beq	169d8 <__assert_fail@plt+0x5854>
   16964:	ldr	r3, [fp, #-20]	; 0xffffffec
   16968:	ldr	r2, [fp, #-8]
   1696c:	cmp	r2, r3
   16970:	bne	16994 <__assert_fail@plt+0x5810>
   16974:	sub	r1, fp, #20
   16978:	mov	r3, #384	; 0x180
   1697c:	str	r3, [sp]
   16980:	mvn	r3, #0
   16984:	mov	r2, #1
   16988:	ldr	r0, [fp, #-12]
   1698c:	bl	177e8 <__assert_fail@plt+0x6664>
   16990:	str	r0, [fp, #-12]
   16994:	ldr	r3, [fp, #-8]
   16998:	add	r2, r3, #1
   1699c:	str	r2, [fp, #-8]
   169a0:	mov	r2, r3
   169a4:	mov	r3, r2
   169a8:	lsl	r3, r3, #1
   169ac:	add	r3, r3, r2
   169b0:	lsl	r3, r3, #7
   169b4:	mov	r2, r3
   169b8:	ldr	r3, [fp, #-12]
   169bc:	add	r2, r3, r2
   169c0:	ldr	r3, [fp, #-16]
   169c4:	mov	r0, r2
   169c8:	mov	r1, r3
   169cc:	mov	r3, #384	; 0x180
   169d0:	mov	r2, r3
   169d4:	bl	10efc <memcpy@plt>
   169d8:	bl	11178 <getutxent@plt>
   169dc:	str	r0, [fp, #-16]
   169e0:	ldr	r3, [fp, #-16]
   169e4:	cmp	r3, #0
   169e8:	bne	1694c <__assert_fail@plt+0x57c8>
   169ec:	bl	110f4 <endutxent@plt>
   169f0:	ldr	r2, [fp, #-8]
   169f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   169f8:	str	r2, [r3]
   169fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a00:	ldr	r2, [fp, #-12]
   16a04:	str	r2, [r3]
   16a08:	mov	r3, #0
   16a0c:	mov	r0, r3
   16a10:	sub	sp, fp, #4
   16a14:	ldr	fp, [sp]
   16a18:	add	sp, sp, #4
   16a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a20:	str	fp, [sp, #-8]!
   16a24:	str	lr, [sp, #4]
   16a28:	add	fp, sp, #4
   16a2c:	sub	sp, sp, #16
   16a30:	str	r0, [fp, #-16]
   16a34:	mov	r1, #0
   16a38:	ldr	r0, [fp, #-16]
   16a3c:	bl	11100 <setlocale@plt>
   16a40:	str	r0, [fp, #-8]
   16a44:	ldr	r3, [fp, #-8]
   16a48:	mov	r0, r3
   16a4c:	sub	sp, fp, #4
   16a50:	ldr	fp, [sp]
   16a54:	add	sp, sp, #4
   16a58:	pop	{pc}		; (ldr pc, [sp], #4)
   16a5c:	str	fp, [sp, #-8]!
   16a60:	str	lr, [sp, #4]
   16a64:	add	fp, sp, #4
   16a68:	sub	sp, sp, #24
   16a6c:	str	r0, [fp, #-16]
   16a70:	str	r1, [fp, #-20]	; 0xffffffec
   16a74:	str	r2, [fp, #-24]	; 0xffffffe8
   16a78:	ldr	r0, [fp, #-16]
   16a7c:	bl	16a20 <__assert_fail@plt+0x589c>
   16a80:	str	r0, [fp, #-8]
   16a84:	ldr	r3, [fp, #-8]
   16a88:	cmp	r3, #0
   16a8c:	bne	16ab0 <__assert_fail@plt+0x592c>
   16a90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a94:	cmp	r3, #0
   16a98:	beq	16aa8 <__assert_fail@plt+0x5924>
   16a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16aa0:	mov	r2, #0
   16aa4:	strb	r2, [r3]
   16aa8:	mov	r3, #22
   16aac:	b	16b2c <__assert_fail@plt+0x59a8>
   16ab0:	ldr	r0, [fp, #-8]
   16ab4:	bl	11070 <strlen@plt>
   16ab8:	str	r0, [fp, #-12]
   16abc:	ldr	r2, [fp, #-12]
   16ac0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ac4:	cmp	r2, r3
   16ac8:	bcs	16aec <__assert_fail@plt+0x5968>
   16acc:	ldr	r3, [fp, #-12]
   16ad0:	add	r3, r3, #1
   16ad4:	mov	r2, r3
   16ad8:	ldr	r1, [fp, #-8]
   16adc:	ldr	r0, [fp, #-20]	; 0xffffffec
   16ae0:	bl	10efc <memcpy@plt>
   16ae4:	mov	r3, #0
   16ae8:	b	16b2c <__assert_fail@plt+0x59a8>
   16aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16af0:	cmp	r3, #0
   16af4:	beq	16b28 <__assert_fail@plt+0x59a4>
   16af8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16afc:	sub	r3, r3, #1
   16b00:	mov	r2, r3
   16b04:	ldr	r1, [fp, #-8]
   16b08:	ldr	r0, [fp, #-20]	; 0xffffffec
   16b0c:	bl	10efc <memcpy@plt>
   16b10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b14:	sub	r3, r3, #1
   16b18:	ldr	r2, [fp, #-20]	; 0xffffffec
   16b1c:	add	r3, r2, r3
   16b20:	mov	r2, #0
   16b24:	strb	r2, [r3]
   16b28:	mov	r3, #34	; 0x22
   16b2c:	mov	r0, r3
   16b30:	sub	sp, fp, #4
   16b34:	ldr	fp, [sp]
   16b38:	add	sp, sp, #4
   16b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b40:	str	fp, [sp, #-8]!
   16b44:	str	lr, [sp, #4]
   16b48:	add	fp, sp, #4
   16b4c:	sub	sp, sp, #16
   16b50:	str	r0, [fp, #-8]
   16b54:	str	r1, [fp, #-12]
   16b58:	str	r2, [fp, #-16]
   16b5c:	ldr	r2, [fp, #-16]
   16b60:	ldr	r1, [fp, #-12]
   16b64:	ldr	r0, [fp, #-8]
   16b68:	bl	16a5c <__assert_fail@plt+0x58d8>
   16b6c:	mov	r3, r0
   16b70:	mov	r0, r3
   16b74:	sub	sp, fp, #4
   16b78:	ldr	fp, [sp]
   16b7c:	add	sp, sp, #4
   16b80:	pop	{pc}		; (ldr pc, [sp], #4)
   16b84:	str	fp, [sp, #-8]!
   16b88:	str	lr, [sp, #4]
   16b8c:	add	fp, sp, #4
   16b90:	sub	sp, sp, #8
   16b94:	str	r0, [fp, #-8]
   16b98:	ldr	r0, [fp, #-8]
   16b9c:	bl	16a20 <__assert_fail@plt+0x589c>
   16ba0:	mov	r3, r0
   16ba4:	mov	r0, r3
   16ba8:	sub	sp, fp, #4
   16bac:	ldr	fp, [sp]
   16bb0:	add	sp, sp, #4
   16bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16bbc:	strd	r6, [sp, #8]
   16bc0:	str	fp, [sp, #16]
   16bc4:	str	lr, [sp, #20]
   16bc8:	add	fp, sp, #20
   16bcc:	sub	sp, sp, #48	; 0x30
   16bd0:	str	r0, [fp, #-24]	; 0xffffffe8
   16bd4:	str	r1, [fp, #-28]	; 0xffffffe4
   16bd8:	str	r2, [fp, #-32]	; 0xffffffe0
   16bdc:	str	r3, [fp, #-36]	; 0xffffffdc
   16be0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16be4:	cmp	r3, #0
   16be8:	beq	16c10 <__assert_fail@plt+0x5a8c>
   16bec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16bf0:	str	r3, [sp]
   16bf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bf8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16bfc:	movw	r1, #38036	; 0x9494
   16c00:	movt	r1, #1
   16c04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c08:	bl	11088 <fprintf@plt>
   16c0c:	b	16c28 <__assert_fail@plt+0x5aa4>
   16c10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16c14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16c18:	movw	r1, #38048	; 0x94a0
   16c1c:	movt	r1, #1
   16c20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c24:	bl	11088 <fprintf@plt>
   16c28:	movw	r0, #38056	; 0x94a8
   16c2c:	movt	r0, #1
   16c30:	bl	11058 <gettext@plt>
   16c34:	mov	r2, r0
   16c38:	movw	r3, #2022	; 0x7e6
   16c3c:	movw	r1, #38840	; 0x97b8
   16c40:	movt	r1, #1
   16c44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c48:	bl	11088 <fprintf@plt>
   16c4c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c50:	mov	r0, #10
   16c54:	bl	10f38 <fputc_unlocked@plt>
   16c58:	movw	r0, #38060	; 0x94ac
   16c5c:	movt	r0, #1
   16c60:	bl	11058 <gettext@plt>
   16c64:	mov	r3, r0
   16c68:	movw	r2, #38232	; 0x9558
   16c6c:	movt	r2, #1
   16c70:	mov	r1, r3
   16c74:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c78:	bl	11088 <fprintf@plt>
   16c7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c80:	mov	r0, #10
   16c84:	bl	10f38 <fputc_unlocked@plt>
   16c88:	ldr	r3, [fp, #8]
   16c8c:	cmp	r3, #9
   16c90:	ldrls	pc, [pc, r3, lsl #2]
   16c94:	b	17074 <__assert_fail@plt+0x5ef0>
   16c98:	andeq	r7, r1, r0, lsr #2
   16c9c:	andeq	r6, r1, r0, asr #25
   16ca0:	andeq	r6, r1, r8, ror #25
   16ca4:	andeq	r6, r1, r8, lsl sp
   16ca8:	andeq	r6, r1, ip, asr sp
   16cac:			; <UNDEFINED> instruction: 0x00016db8
   16cb0:	andeq	r6, r1, r4, lsr #28
   16cb4:	andeq	r6, r1, r0, lsr #29
   16cb8:	andeq	r6, r1, ip, lsr #30
   16cbc:	andeq	r6, r1, r8, asr #31
   16cc0:	movw	r0, #38268	; 0x957c
   16cc4:	movt	r0, #1
   16cc8:	bl	11058 <gettext@plt>
   16ccc:	mov	r1, r0
   16cd0:	ldr	r3, [fp, #4]
   16cd4:	ldr	r3, [r3]
   16cd8:	mov	r2, r3
   16cdc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ce0:	bl	11088 <fprintf@plt>
   16ce4:	b	17124 <__assert_fail@plt+0x5fa0>
   16ce8:	movw	r0, #38284	; 0x958c
   16cec:	movt	r0, #1
   16cf0:	bl	11058 <gettext@plt>
   16cf4:	mov	r1, r0
   16cf8:	ldr	r3, [fp, #4]
   16cfc:	ldr	r2, [r3]
   16d00:	ldr	r3, [fp, #4]
   16d04:	add	r3, r3, #4
   16d08:	ldr	r3, [r3]
   16d0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d10:	bl	11088 <fprintf@plt>
   16d14:	b	17124 <__assert_fail@plt+0x5fa0>
   16d18:	movw	r0, #38308	; 0x95a4
   16d1c:	movt	r0, #1
   16d20:	bl	11058 <gettext@plt>
   16d24:	ldr	r3, [fp, #4]
   16d28:	ldr	r2, [r3]
   16d2c:	ldr	r3, [fp, #4]
   16d30:	add	r3, r3, #4
   16d34:	ldr	r1, [r3]
   16d38:	ldr	r3, [fp, #4]
   16d3c:	add	r3, r3, #8
   16d40:	ldr	r3, [r3]
   16d44:	str	r3, [sp]
   16d48:	mov	r3, r1
   16d4c:	mov	r1, r0
   16d50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d54:	bl	11088 <fprintf@plt>
   16d58:	b	17124 <__assert_fail@plt+0x5fa0>
   16d5c:	movw	r0, #38336	; 0x95c0
   16d60:	movt	r0, #1
   16d64:	bl	11058 <gettext@plt>
   16d68:	mov	ip, r0
   16d6c:	ldr	r3, [fp, #4]
   16d70:	ldr	r1, [r3]
   16d74:	ldr	r3, [fp, #4]
   16d78:	add	r3, r3, #4
   16d7c:	ldr	r0, [r3]
   16d80:	ldr	r3, [fp, #4]
   16d84:	add	r3, r3, #8
   16d88:	ldr	r3, [r3]
   16d8c:	ldr	r2, [fp, #4]
   16d90:	add	r2, r2, #12
   16d94:	ldr	r2, [r2]
   16d98:	str	r2, [sp, #4]
   16d9c:	str	r3, [sp]
   16da0:	mov	r3, r0
   16da4:	mov	r2, r1
   16da8:	mov	r1, ip
   16dac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16db0:	bl	11088 <fprintf@plt>
   16db4:	b	17124 <__assert_fail@plt+0x5fa0>
   16db8:	movw	r0, #38368	; 0x95e0
   16dbc:	movt	r0, #1
   16dc0:	bl	11058 <gettext@plt>
   16dc4:	mov	lr, r0
   16dc8:	ldr	r3, [fp, #4]
   16dcc:	ldr	r0, [r3]
   16dd0:	ldr	r3, [fp, #4]
   16dd4:	add	r3, r3, #4
   16dd8:	ldr	ip, [r3]
   16ddc:	ldr	r3, [fp, #4]
   16de0:	add	r3, r3, #8
   16de4:	ldr	r3, [r3]
   16de8:	ldr	r2, [fp, #4]
   16dec:	add	r2, r2, #12
   16df0:	ldr	r2, [r2]
   16df4:	ldr	r1, [fp, #4]
   16df8:	add	r1, r1, #16
   16dfc:	ldr	r1, [r1]
   16e00:	str	r1, [sp, #8]
   16e04:	str	r2, [sp, #4]
   16e08:	str	r3, [sp]
   16e0c:	mov	r3, ip
   16e10:	mov	r2, r0
   16e14:	mov	r1, lr
   16e18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e1c:	bl	11088 <fprintf@plt>
   16e20:	b	17124 <__assert_fail@plt+0x5fa0>
   16e24:	movw	r0, #38404	; 0x9604
   16e28:	movt	r0, #1
   16e2c:	bl	11058 <gettext@plt>
   16e30:	mov	r4, r0
   16e34:	ldr	r3, [fp, #4]
   16e38:	ldr	ip, [r3]
   16e3c:	ldr	r3, [fp, #4]
   16e40:	add	r3, r3, #4
   16e44:	ldr	lr, [r3]
   16e48:	ldr	r3, [fp, #4]
   16e4c:	add	r3, r3, #8
   16e50:	ldr	r3, [r3]
   16e54:	ldr	r2, [fp, #4]
   16e58:	add	r2, r2, #12
   16e5c:	ldr	r2, [r2]
   16e60:	ldr	r1, [fp, #4]
   16e64:	add	r1, r1, #16
   16e68:	ldr	r1, [r1]
   16e6c:	ldr	r0, [fp, #4]
   16e70:	add	r0, r0, #20
   16e74:	ldr	r0, [r0]
   16e78:	str	r0, [sp, #12]
   16e7c:	str	r1, [sp, #8]
   16e80:	str	r2, [sp, #4]
   16e84:	str	r3, [sp]
   16e88:	mov	r3, lr
   16e8c:	mov	r2, ip
   16e90:	mov	r1, r4
   16e94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e98:	bl	11088 <fprintf@plt>
   16e9c:	b	17124 <__assert_fail@plt+0x5fa0>
   16ea0:	movw	r0, #38444	; 0x962c
   16ea4:	movt	r0, #1
   16ea8:	bl	11058 <gettext@plt>
   16eac:	mov	r5, r0
   16eb0:	ldr	r3, [fp, #4]
   16eb4:	ldr	lr, [r3]
   16eb8:	ldr	r3, [fp, #4]
   16ebc:	add	r3, r3, #4
   16ec0:	ldr	r4, [r3]
   16ec4:	ldr	r3, [fp, #4]
   16ec8:	add	r3, r3, #8
   16ecc:	ldr	r3, [r3]
   16ed0:	ldr	r2, [fp, #4]
   16ed4:	add	r2, r2, #12
   16ed8:	ldr	r2, [r2]
   16edc:	ldr	r1, [fp, #4]
   16ee0:	add	r1, r1, #16
   16ee4:	ldr	r1, [r1]
   16ee8:	ldr	r0, [fp, #4]
   16eec:	add	r0, r0, #20
   16ef0:	ldr	r0, [r0]
   16ef4:	ldr	ip, [fp, #4]
   16ef8:	add	ip, ip, #24
   16efc:	ldr	ip, [ip]
   16f00:	str	ip, [sp, #16]
   16f04:	str	r0, [sp, #12]
   16f08:	str	r1, [sp, #8]
   16f0c:	str	r2, [sp, #4]
   16f10:	str	r3, [sp]
   16f14:	mov	r3, r4
   16f18:	mov	r2, lr
   16f1c:	mov	r1, r5
   16f20:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f24:	bl	11088 <fprintf@plt>
   16f28:	b	17124 <__assert_fail@plt+0x5fa0>
   16f2c:	movw	r0, #38488	; 0x9658
   16f30:	movt	r0, #1
   16f34:	bl	11058 <gettext@plt>
   16f38:	mov	r6, r0
   16f3c:	ldr	r3, [fp, #4]
   16f40:	ldr	r4, [r3]
   16f44:	ldr	r3, [fp, #4]
   16f48:	add	r3, r3, #4
   16f4c:	ldr	r5, [r3]
   16f50:	ldr	r3, [fp, #4]
   16f54:	add	r3, r3, #8
   16f58:	ldr	r3, [r3]
   16f5c:	ldr	r2, [fp, #4]
   16f60:	add	r2, r2, #12
   16f64:	ldr	r2, [r2]
   16f68:	ldr	r1, [fp, #4]
   16f6c:	add	r1, r1, #16
   16f70:	ldr	r1, [r1]
   16f74:	ldr	r0, [fp, #4]
   16f78:	add	r0, r0, #20
   16f7c:	ldr	r0, [r0]
   16f80:	ldr	ip, [fp, #4]
   16f84:	add	ip, ip, #24
   16f88:	ldr	ip, [ip]
   16f8c:	ldr	lr, [fp, #4]
   16f90:	add	lr, lr, #28
   16f94:	ldr	lr, [lr]
   16f98:	str	lr, [sp, #20]
   16f9c:	str	ip, [sp, #16]
   16fa0:	str	r0, [sp, #12]
   16fa4:	str	r1, [sp, #8]
   16fa8:	str	r2, [sp, #4]
   16fac:	str	r3, [sp]
   16fb0:	mov	r3, r5
   16fb4:	mov	r2, r4
   16fb8:	mov	r1, r6
   16fbc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16fc0:	bl	11088 <fprintf@plt>
   16fc4:	b	17124 <__assert_fail@plt+0x5fa0>
   16fc8:	movw	r0, #38536	; 0x9688
   16fcc:	movt	r0, #1
   16fd0:	bl	11058 <gettext@plt>
   16fd4:	mov	r7, r0
   16fd8:	ldr	r3, [fp, #4]
   16fdc:	ldr	r5, [r3]
   16fe0:	ldr	r3, [fp, #4]
   16fe4:	add	r3, r3, #4
   16fe8:	ldr	r6, [r3]
   16fec:	ldr	r3, [fp, #4]
   16ff0:	add	r3, r3, #8
   16ff4:	ldr	r3, [r3]
   16ff8:	ldr	r2, [fp, #4]
   16ffc:	add	r2, r2, #12
   17000:	ldr	r2, [r2]
   17004:	ldr	r1, [fp, #4]
   17008:	add	r1, r1, #16
   1700c:	ldr	r1, [r1]
   17010:	ldr	r0, [fp, #4]
   17014:	add	r0, r0, #20
   17018:	ldr	r0, [r0]
   1701c:	ldr	ip, [fp, #4]
   17020:	add	ip, ip, #24
   17024:	ldr	ip, [ip]
   17028:	ldr	lr, [fp, #4]
   1702c:	add	lr, lr, #28
   17030:	ldr	lr, [lr]
   17034:	ldr	r4, [fp, #4]
   17038:	add	r4, r4, #32
   1703c:	ldr	r4, [r4]
   17040:	str	r4, [sp, #24]
   17044:	str	lr, [sp, #20]
   17048:	str	ip, [sp, #16]
   1704c:	str	r0, [sp, #12]
   17050:	str	r1, [sp, #8]
   17054:	str	r2, [sp, #4]
   17058:	str	r3, [sp]
   1705c:	mov	r3, r6
   17060:	mov	r2, r5
   17064:	mov	r1, r7
   17068:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1706c:	bl	11088 <fprintf@plt>
   17070:	b	17124 <__assert_fail@plt+0x5fa0>
   17074:	movw	r0, #38588	; 0x96bc
   17078:	movt	r0, #1
   1707c:	bl	11058 <gettext@plt>
   17080:	mov	r7, r0
   17084:	ldr	r3, [fp, #4]
   17088:	ldr	r5, [r3]
   1708c:	ldr	r3, [fp, #4]
   17090:	add	r3, r3, #4
   17094:	ldr	r6, [r3]
   17098:	ldr	r3, [fp, #4]
   1709c:	add	r3, r3, #8
   170a0:	ldr	r3, [r3]
   170a4:	ldr	r2, [fp, #4]
   170a8:	add	r2, r2, #12
   170ac:	ldr	r2, [r2]
   170b0:	ldr	r1, [fp, #4]
   170b4:	add	r1, r1, #16
   170b8:	ldr	r1, [r1]
   170bc:	ldr	r0, [fp, #4]
   170c0:	add	r0, r0, #20
   170c4:	ldr	r0, [r0]
   170c8:	ldr	ip, [fp, #4]
   170cc:	add	ip, ip, #24
   170d0:	ldr	ip, [ip]
   170d4:	ldr	lr, [fp, #4]
   170d8:	add	lr, lr, #28
   170dc:	ldr	lr, [lr]
   170e0:	ldr	r4, [fp, #4]
   170e4:	add	r4, r4, #32
   170e8:	ldr	r4, [r4]
   170ec:	str	r4, [sp, #24]
   170f0:	str	lr, [sp, #20]
   170f4:	str	ip, [sp, #16]
   170f8:	str	r0, [sp, #12]
   170fc:	str	r1, [sp, #8]
   17100:	str	r2, [sp, #4]
   17104:	str	r3, [sp]
   17108:	mov	r3, r6
   1710c:	mov	r2, r5
   17110:	mov	r1, r7
   17114:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17118:	bl	11088 <fprintf@plt>
   1711c:	b	17124 <__assert_fail@plt+0x5fa0>
   17120:	nop	{0}
   17124:	nop	{0}
   17128:	sub	sp, fp, #20
   1712c:	ldrd	r4, [sp]
   17130:	ldrd	r6, [sp, #8]
   17134:	ldr	fp, [sp, #16]
   17138:	add	sp, sp, #20
   1713c:	pop	{pc}		; (ldr pc, [sp], #4)
   17140:	str	fp, [sp, #-8]!
   17144:	str	lr, [sp, #4]
   17148:	add	fp, sp, #4
   1714c:	sub	sp, sp, #32
   17150:	str	r0, [fp, #-16]
   17154:	str	r1, [fp, #-20]	; 0xffffffec
   17158:	str	r2, [fp, #-24]	; 0xffffffe8
   1715c:	str	r3, [fp, #-28]	; 0xffffffe4
   17160:	mov	r3, #0
   17164:	str	r3, [fp, #-8]
   17168:	b	17178 <__assert_fail@plt+0x5ff4>
   1716c:	ldr	r3, [fp, #-8]
   17170:	add	r3, r3, #1
   17174:	str	r3, [fp, #-8]
   17178:	ldr	r3, [fp, #-8]
   1717c:	lsl	r3, r3, #2
   17180:	ldr	r2, [fp, #4]
   17184:	add	r3, r2, r3
   17188:	ldr	r3, [r3]
   1718c:	cmp	r3, #0
   17190:	bne	1716c <__assert_fail@plt+0x5fe8>
   17194:	ldr	r3, [fp, #-8]
   17198:	str	r3, [sp, #4]
   1719c:	ldr	r3, [fp, #4]
   171a0:	str	r3, [sp]
   171a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   171b0:	ldr	r0, [fp, #-16]
   171b4:	bl	16bb8 <__assert_fail@plt+0x5a34>
   171b8:	nop	{0}
   171bc:	sub	sp, fp, #4
   171c0:	ldr	fp, [sp]
   171c4:	add	sp, sp, #4
   171c8:	pop	{pc}		; (ldr pc, [sp], #4)
   171cc:	str	fp, [sp, #-8]!
   171d0:	str	lr, [sp, #4]
   171d4:	add	fp, sp, #4
   171d8:	sub	sp, sp, #72	; 0x48
   171dc:	str	r0, [fp, #-56]	; 0xffffffc8
   171e0:	str	r1, [fp, #-60]	; 0xffffffc4
   171e4:	str	r2, [fp, #-64]	; 0xffffffc0
   171e8:	str	r3, [fp, #-68]	; 0xffffffbc
   171ec:	mov	r3, #0
   171f0:	str	r3, [fp, #-8]
   171f4:	b	17204 <__assert_fail@plt+0x6080>
   171f8:	ldr	r3, [fp, #-8]
   171fc:	add	r3, r3, #1
   17200:	str	r3, [fp, #-8]
   17204:	ldr	r3, [fp, #-8]
   17208:	cmp	r3, #9
   1720c:	bhi	17250 <__assert_fail@plt+0x60cc>
   17210:	ldr	r3, [fp, #4]
   17214:	add	r2, r3, #4
   17218:	str	r2, [fp, #4]
   1721c:	ldr	r2, [r3]
   17220:	ldr	r3, [fp, #-8]
   17224:	lsl	r3, r3, #2
   17228:	sub	r1, fp, #4
   1722c:	add	r3, r1, r3
   17230:	str	r2, [r3, #-44]	; 0xffffffd4
   17234:	ldr	r3, [fp, #-8]
   17238:	lsl	r3, r3, #2
   1723c:	sub	r2, fp, #4
   17240:	add	r3, r2, r3
   17244:	ldr	r3, [r3, #-44]	; 0xffffffd4
   17248:	cmp	r3, #0
   1724c:	bne	171f8 <__assert_fail@plt+0x6074>
   17250:	ldr	r3, [fp, #-8]
   17254:	str	r3, [sp, #4]
   17258:	sub	r3, fp, #48	; 0x30
   1725c:	str	r3, [sp]
   17260:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17264:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17268:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1726c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17270:	bl	16bb8 <__assert_fail@plt+0x5a34>
   17274:	nop	{0}
   17278:	sub	sp, fp, #4
   1727c:	ldr	fp, [sp]
   17280:	add	sp, sp, #4
   17284:	pop	{pc}		; (ldr pc, [sp], #4)
   17288:	push	{r3}		; (str r3, [sp, #-4]!)
   1728c:	str	fp, [sp, #-8]!
   17290:	str	lr, [sp, #4]
   17294:	add	fp, sp, #4
   17298:	sub	sp, sp, #36	; 0x24
   1729c:	str	r0, [fp, #-20]	; 0xffffffec
   172a0:	str	r1, [fp, #-24]	; 0xffffffe8
   172a4:	str	r2, [fp, #-28]	; 0xffffffe4
   172a8:	add	r3, fp, #8
   172ac:	str	r3, [fp, #-12]
   172b0:	ldr	r3, [fp, #-12]
   172b4:	str	r3, [sp]
   172b8:	ldr	r3, [fp, #4]
   172bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   172c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   172c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   172c8:	bl	171cc <__assert_fail@plt+0x6048>
   172cc:	nop	{0}
   172d0:	sub	sp, fp, #4
   172d4:	ldr	fp, [sp]
   172d8:	ldr	lr, [sp, #4]
   172dc:	add	sp, sp, #8
   172e0:	add	sp, sp, #4
   172e4:	bx	lr
   172e8:	str	fp, [sp, #-8]!
   172ec:	str	lr, [sp, #4]
   172f0:	add	fp, sp, #4
   172f4:	movw	r3, #41348	; 0xa184
   172f8:	movt	r3, #2
   172fc:	ldr	r3, [r3]
   17300:	mov	r1, r3
   17304:	mov	r0, #10
   17308:	bl	10f38 <fputc_unlocked@plt>
   1730c:	movw	r0, #38648	; 0x96f8
   17310:	movt	r0, #1
   17314:	bl	11058 <gettext@plt>
   17318:	mov	r3, r0
   1731c:	movw	r1, #38668	; 0x970c
   17320:	movt	r1, #1
   17324:	mov	r0, r3
   17328:	bl	10eb4 <printf@plt>
   1732c:	movw	r0, #38692	; 0x9724
   17330:	movt	r0, #1
   17334:	bl	11058 <gettext@plt>
   17338:	mov	r3, r0
   1733c:	movw	r2, #38712	; 0x9738
   17340:	movt	r2, #1
   17344:	movw	r1, #38752	; 0x9760
   17348:	movt	r1, #1
   1734c:	mov	r0, r3
   17350:	bl	10eb4 <printf@plt>
   17354:	movw	r0, #38768	; 0x9770
   17358:	movt	r0, #1
   1735c:	bl	11058 <gettext@plt>
   17360:	mov	r3, r0
   17364:	movw	r1, #38808	; 0x9798
   17368:	movt	r1, #1
   1736c:	mov	r0, r3
   17370:	bl	10eb4 <printf@plt>
   17374:	nop	{0}
   17378:	sub	sp, fp, #4
   1737c:	ldr	fp, [sp]
   17380:	add	sp, sp, #4
   17384:	pop	{pc}		; (ldr pc, [sp], #4)
   17388:	str	fp, [sp, #-8]!
   1738c:	str	lr, [sp, #4]
   17390:	add	fp, sp, #4
   17394:	sub	sp, sp, #16
   17398:	str	r0, [fp, #-8]
   1739c:	str	r1, [fp, #-12]
   173a0:	str	r2, [fp, #-16]
   173a4:	ldr	r2, [fp, #-16]
   173a8:	ldr	r1, [fp, #-12]
   173ac:	ldr	r0, [fp, #-8]
   173b0:	bl	1756c <__assert_fail@plt+0x63e8>
   173b4:	mov	r3, r0
   173b8:	mov	r0, r3
   173bc:	sub	sp, fp, #4
   173c0:	ldr	fp, [sp]
   173c4:	add	sp, sp, #4
   173c8:	pop	{pc}		; (ldr pc, [sp], #4)
   173cc:	str	fp, [sp, #-8]!
   173d0:	str	lr, [sp, #4]
   173d4:	add	fp, sp, #4
   173d8:	sub	sp, sp, #8
   173dc:	str	r0, [fp, #-8]
   173e0:	ldr	r3, [fp, #-8]
   173e4:	cmp	r3, #0
   173e8:	bne	173f0 <__assert_fail@plt+0x626c>
   173ec:	bl	17c7c <__assert_fail@plt+0x6af8>
   173f0:	ldr	r3, [fp, #-8]
   173f4:	mov	r0, r3
   173f8:	sub	sp, fp, #4
   173fc:	ldr	fp, [sp]
   17400:	add	sp, sp, #4
   17404:	pop	{pc}		; (ldr pc, [sp], #4)
   17408:	str	fp, [sp, #-8]!
   1740c:	str	lr, [sp, #4]
   17410:	add	fp, sp, #4
   17414:	sub	sp, sp, #8
   17418:	str	r0, [fp, #-8]
   1741c:	ldr	r0, [fp, #-8]
   17420:	bl	17d90 <__assert_fail@plt+0x6c0c>
   17424:	mov	r3, r0
   17428:	mov	r0, r3
   1742c:	bl	173cc <__assert_fail@plt+0x6248>
   17430:	mov	r3, r0
   17434:	mov	r0, r3
   17438:	sub	sp, fp, #4
   1743c:	ldr	fp, [sp]
   17440:	add	sp, sp, #4
   17444:	pop	{pc}		; (ldr pc, [sp], #4)
   17448:	str	fp, [sp, #-8]!
   1744c:	str	lr, [sp, #4]
   17450:	add	fp, sp, #4
   17454:	sub	sp, sp, #8
   17458:	str	r0, [fp, #-8]
   1745c:	ldr	r0, [fp, #-8]
   17460:	bl	18350 <__assert_fail@plt+0x71cc>
   17464:	mov	r3, r0
   17468:	mov	r0, r3
   1746c:	bl	173cc <__assert_fail@plt+0x6248>
   17470:	mov	r3, r0
   17474:	mov	r0, r3
   17478:	sub	sp, fp, #4
   1747c:	ldr	fp, [sp]
   17480:	add	sp, sp, #4
   17484:	pop	{pc}		; (ldr pc, [sp], #4)
   17488:	str	fp, [sp, #-8]!
   1748c:	str	lr, [sp, #4]
   17490:	add	fp, sp, #4
   17494:	sub	sp, sp, #8
   17498:	str	r0, [fp, #-8]
   1749c:	ldr	r0, [fp, #-8]
   174a0:	bl	17408 <__assert_fail@plt+0x6284>
   174a4:	mov	r3, r0
   174a8:	mov	r0, r3
   174ac:	sub	sp, fp, #4
   174b0:	ldr	fp, [sp]
   174b4:	add	sp, sp, #4
   174b8:	pop	{pc}		; (ldr pc, [sp], #4)
   174bc:	str	fp, [sp, #-8]!
   174c0:	str	lr, [sp, #4]
   174c4:	add	fp, sp, #4
   174c8:	sub	sp, sp, #16
   174cc:	str	r0, [fp, #-16]
   174d0:	str	r1, [fp, #-20]	; 0xffffffec
   174d4:	ldr	r1, [fp, #-20]	; 0xffffffec
   174d8:	ldr	r0, [fp, #-16]
   174dc:	bl	17e20 <__assert_fail@plt+0x6c9c>
   174e0:	str	r0, [fp, #-8]
   174e4:	ldr	r3, [fp, #-8]
   174e8:	cmp	r3, #0
   174ec:	bne	1750c <__assert_fail@plt+0x6388>
   174f0:	ldr	r3, [fp, #-16]
   174f4:	cmp	r3, #0
   174f8:	beq	17508 <__assert_fail@plt+0x6384>
   174fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17500:	cmp	r3, #0
   17504:	beq	1750c <__assert_fail@plt+0x6388>
   17508:	bl	17c7c <__assert_fail@plt+0x6af8>
   1750c:	ldr	r3, [fp, #-8]
   17510:	mov	r0, r3
   17514:	sub	sp, fp, #4
   17518:	ldr	fp, [sp]
   1751c:	add	sp, sp, #4
   17520:	pop	{pc}		; (ldr pc, [sp], #4)
   17524:	str	fp, [sp, #-8]!
   17528:	str	lr, [sp, #4]
   1752c:	add	fp, sp, #4
   17530:	sub	sp, sp, #8
   17534:	str	r0, [fp, #-8]
   17538:	str	r1, [fp, #-12]
   1753c:	ldr	r1, [fp, #-12]
   17540:	ldr	r0, [fp, #-8]
   17544:	bl	18388 <__assert_fail@plt+0x7204>
   17548:	mov	r3, r0
   1754c:	mov	r0, r3
   17550:	bl	173cc <__assert_fail@plt+0x6248>
   17554:	mov	r3, r0
   17558:	mov	r0, r3
   1755c:	sub	sp, fp, #4
   17560:	ldr	fp, [sp]
   17564:	add	sp, sp, #4
   17568:	pop	{pc}		; (ldr pc, [sp], #4)
   1756c:	str	fp, [sp, #-8]!
   17570:	str	lr, [sp, #4]
   17574:	add	fp, sp, #4
   17578:	sub	sp, sp, #24
   1757c:	str	r0, [fp, #-16]
   17580:	str	r1, [fp, #-20]	; 0xffffffec
   17584:	str	r2, [fp, #-24]	; 0xffffffe8
   17588:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1758c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17590:	ldr	r0, [fp, #-16]
   17594:	bl	185b8 <__assert_fail@plt+0x7434>
   17598:	str	r0, [fp, #-8]
   1759c:	ldr	r3, [fp, #-8]
   175a0:	cmp	r3, #0
   175a4:	bne	175d0 <__assert_fail@plt+0x644c>
   175a8:	ldr	r3, [fp, #-16]
   175ac:	cmp	r3, #0
   175b0:	beq	175cc <__assert_fail@plt+0x6448>
   175b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   175b8:	cmp	r3, #0
   175bc:	beq	175d0 <__assert_fail@plt+0x644c>
   175c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175c4:	cmp	r3, #0
   175c8:	beq	175d0 <__assert_fail@plt+0x644c>
   175cc:	bl	17c7c <__assert_fail@plt+0x6af8>
   175d0:	ldr	r3, [fp, #-8]
   175d4:	mov	r0, r3
   175d8:	sub	sp, fp, #4
   175dc:	ldr	fp, [sp]
   175e0:	add	sp, sp, #4
   175e4:	pop	{pc}		; (ldr pc, [sp], #4)
   175e8:	str	fp, [sp, #-8]!
   175ec:	str	lr, [sp, #4]
   175f0:	add	fp, sp, #4
   175f4:	sub	sp, sp, #16
   175f8:	str	r0, [fp, #-8]
   175fc:	str	r1, [fp, #-12]
   17600:	str	r2, [fp, #-16]
   17604:	ldr	r2, [fp, #-16]
   17608:	ldr	r1, [fp, #-12]
   1760c:	ldr	r0, [fp, #-8]
   17610:	bl	18428 <__assert_fail@plt+0x72a4>
   17614:	mov	r3, r0
   17618:	mov	r0, r3
   1761c:	bl	173cc <__assert_fail@plt+0x6248>
   17620:	mov	r3, r0
   17624:	mov	r0, r3
   17628:	sub	sp, fp, #4
   1762c:	ldr	fp, [sp]
   17630:	add	sp, sp, #4
   17634:	pop	{pc}		; (ldr pc, [sp], #4)
   17638:	str	fp, [sp, #-8]!
   1763c:	str	lr, [sp, #4]
   17640:	add	fp, sp, #4
   17644:	sub	sp, sp, #8
   17648:	str	r0, [fp, #-8]
   1764c:	str	r1, [fp, #-12]
   17650:	ldr	r2, [fp, #-12]
   17654:	ldr	r1, [fp, #-8]
   17658:	mov	r0, #0
   1765c:	bl	1756c <__assert_fail@plt+0x63e8>
   17660:	mov	r3, r0
   17664:	mov	r0, r3
   17668:	sub	sp, fp, #4
   1766c:	ldr	fp, [sp]
   17670:	add	sp, sp, #4
   17674:	pop	{pc}		; (ldr pc, [sp], #4)
   17678:	str	fp, [sp, #-8]!
   1767c:	str	lr, [sp, #4]
   17680:	add	fp, sp, #4
   17684:	sub	sp, sp, #8
   17688:	str	r0, [fp, #-8]
   1768c:	str	r1, [fp, #-12]
   17690:	ldr	r2, [fp, #-12]
   17694:	ldr	r1, [fp, #-8]
   17698:	mov	r0, #0
   1769c:	bl	175e8 <__assert_fail@plt+0x6464>
   176a0:	mov	r3, r0
   176a4:	mov	r0, r3
   176a8:	sub	sp, fp, #4
   176ac:	ldr	fp, [sp]
   176b0:	add	sp, sp, #4
   176b4:	pop	{pc}		; (ldr pc, [sp], #4)
   176b8:	str	fp, [sp, #-8]!
   176bc:	str	lr, [sp, #4]
   176c0:	add	fp, sp, #4
   176c4:	sub	sp, sp, #8
   176c8:	str	r0, [fp, #-8]
   176cc:	str	r1, [fp, #-12]
   176d0:	mov	r2, #1
   176d4:	ldr	r1, [fp, #-12]
   176d8:	ldr	r0, [fp, #-8]
   176dc:	bl	176f8 <__assert_fail@plt+0x6574>
   176e0:	mov	r3, r0
   176e4:	mov	r0, r3
   176e8:	sub	sp, fp, #4
   176ec:	ldr	fp, [sp]
   176f0:	add	sp, sp, #4
   176f4:	pop	{pc}		; (ldr pc, [sp], #4)
   176f8:	str	fp, [sp, #-8]!
   176fc:	str	lr, [sp, #4]
   17700:	add	fp, sp, #4
   17704:	sub	sp, sp, #24
   17708:	str	r0, [fp, #-16]
   1770c:	str	r1, [fp, #-20]	; 0xffffffec
   17710:	str	r2, [fp, #-24]	; 0xffffffe8
   17714:	ldr	r3, [fp, #-20]	; 0xffffffec
   17718:	ldr	r3, [r3]
   1771c:	str	r3, [fp, #-8]
   17720:	ldr	r3, [fp, #-16]
   17724:	cmp	r3, #0
   17728:	bne	17770 <__assert_fail@plt+0x65ec>
   1772c:	ldr	r3, [fp, #-8]
   17730:	cmp	r3, #0
   17734:	bne	177ac <__assert_fail@plt+0x6628>
   17738:	mov	r2, #64	; 0x40
   1773c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17740:	udiv	r3, r2, r3
   17744:	str	r3, [fp, #-8]
   17748:	ldr	r3, [fp, #-8]
   1774c:	cmp	r3, #0
   17750:	moveq	r3, #1
   17754:	movne	r3, #0
   17758:	uxtb	r3, r3
   1775c:	mov	r2, r3
   17760:	ldr	r3, [fp, #-8]
   17764:	add	r3, r2, r3
   17768:	str	r3, [fp, #-8]
   1776c:	b	177ac <__assert_fail@plt+0x6628>
   17770:	ldr	r2, [fp, #-8]
   17774:	ldr	r3, [fp, #-8]
   17778:	lsr	r3, r3, #1
   1777c:	add	r3, r3, #1
   17780:	mov	r1, #0
   17784:	adds	r3, r2, r3
   17788:	bcc	17790 <__assert_fail@plt+0x660c>
   1778c:	mov	r1, #1
   17790:	str	r3, [fp, #-8]
   17794:	mov	r3, r1
   17798:	and	r3, r3, #1
   1779c:	uxtb	r3, r3
   177a0:	cmp	r3, #0
   177a4:	beq	177ac <__assert_fail@plt+0x6628>
   177a8:	bl	17c7c <__assert_fail@plt+0x6af8>
   177ac:	ldr	r3, [fp, #-8]
   177b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   177b4:	mov	r1, r3
   177b8:	ldr	r0, [fp, #-16]
   177bc:	bl	1756c <__assert_fail@plt+0x63e8>
   177c0:	str	r0, [fp, #-16]
   177c4:	ldr	r2, [fp, #-8]
   177c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   177cc:	str	r2, [r3]
   177d0:	ldr	r3, [fp, #-16]
   177d4:	mov	r0, r3
   177d8:	sub	sp, fp, #4
   177dc:	ldr	fp, [sp]
   177e0:	add	sp, sp, #4
   177e4:	pop	{pc}		; (ldr pc, [sp], #4)
   177e8:	str	fp, [sp, #-8]!
   177ec:	str	lr, [sp, #4]
   177f0:	add	fp, sp, #4
   177f4:	sub	sp, sp, #32
   177f8:	str	r0, [fp, #-24]	; 0xffffffe8
   177fc:	str	r1, [fp, #-28]	; 0xffffffe4
   17800:	str	r2, [fp, #-32]	; 0xffffffe0
   17804:	str	r3, [fp, #-36]	; 0xffffffdc
   17808:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1780c:	ldr	r3, [r3]
   17810:	str	r3, [fp, #-8]
   17814:	ldr	r3, [fp, #-8]
   17818:	asr	r3, r3, #1
   1781c:	mov	r1, #0
   17820:	ldr	r2, [fp, #-8]
   17824:	adds	r3, r2, r3
   17828:	bvc	17830 <__assert_fail@plt+0x66ac>
   1782c:	mov	r1, #1
   17830:	str	r3, [fp, #-16]
   17834:	mov	r3, r1
   17838:	and	r3, r3, #1
   1783c:	uxtb	r3, r3
   17840:	cmp	r3, #0
   17844:	beq	17850 <__assert_fail@plt+0x66cc>
   17848:	mvn	r3, #-2147483648	; 0x80000000
   1784c:	str	r3, [fp, #-16]
   17850:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17854:	cmp	r3, #0
   17858:	blt	17874 <__assert_fail@plt+0x66f0>
   1785c:	ldr	r3, [fp, #-16]
   17860:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17864:	cmp	r2, r3
   17868:	bge	17874 <__assert_fail@plt+0x66f0>
   1786c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17870:	str	r3, [fp, #-16]
   17874:	ldr	r2, [fp, #-16]
   17878:	mov	lr, #0
   1787c:	ldr	r3, [fp, #4]
   17880:	smull	r2, r3, r2, r3
   17884:	mov	r0, #0
   17888:	mov	r1, #0
   1788c:	mov	r0, r3
   17890:	asr	r1, r3, #31
   17894:	asr	ip, r2, #31
   17898:	cmp	ip, r0
   1789c:	beq	178a4 <__assert_fail@plt+0x6720>
   178a0:	mov	lr, #1
   178a4:	mov	r3, r2
   178a8:	str	r3, [fp, #-20]	; 0xffffffec
   178ac:	mov	r3, lr
   178b0:	and	r3, r3, #1
   178b4:	uxtb	r3, r3
   178b8:	cmp	r3, #0
   178bc:	beq	178c8 <__assert_fail@plt+0x6744>
   178c0:	mvn	r3, #-2147483648	; 0x80000000
   178c4:	b	178e0 <__assert_fail@plt+0x675c>
   178c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   178cc:	cmp	r3, #63	; 0x3f
   178d0:	bgt	178dc <__assert_fail@plt+0x6758>
   178d4:	mov	r3, #64	; 0x40
   178d8:	b	178e0 <__assert_fail@plt+0x675c>
   178dc:	mov	r3, #0
   178e0:	str	r3, [fp, #-12]
   178e4:	ldr	r3, [fp, #-12]
   178e8:	cmp	r3, #0
   178ec:	beq	17924 <__assert_fail@plt+0x67a0>
   178f0:	ldr	r2, [fp, #-12]
   178f4:	ldr	r3, [fp, #4]
   178f8:	sdiv	r3, r2, r3
   178fc:	str	r3, [fp, #-16]
   17900:	ldr	r3, [fp, #-12]
   17904:	ldr	r2, [fp, #4]
   17908:	sdiv	r2, r3, r2
   1790c:	ldr	r1, [fp, #4]
   17910:	mul	r2, r1, r2
   17914:	sub	r3, r3, r2
   17918:	ldr	r2, [fp, #-12]
   1791c:	sub	r3, r2, r3
   17920:	str	r3, [fp, #-20]	; 0xffffffec
   17924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17928:	cmp	r3, #0
   1792c:	bne	1793c <__assert_fail@plt+0x67b8>
   17930:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17934:	mov	r2, #0
   17938:	str	r2, [r3]
   1793c:	ldr	r2, [fp, #-16]
   17940:	ldr	r3, [fp, #-8]
   17944:	sub	r3, r2, r3
   17948:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1794c:	cmp	r2, r3
   17950:	ble	179f0 <__assert_fail@plt+0x686c>
   17954:	mov	r1, #0
   17958:	ldr	r2, [fp, #-8]
   1795c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17960:	adds	r3, r2, r3
   17964:	bvc	1796c <__assert_fail@plt+0x67e8>
   17968:	mov	r1, #1
   1796c:	str	r3, [fp, #-16]
   17970:	mov	r3, r1
   17974:	and	r3, r3, #1
   17978:	uxtb	r3, r3
   1797c:	cmp	r3, #0
   17980:	bne	179ec <__assert_fail@plt+0x6868>
   17984:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17988:	cmp	r3, #0
   1798c:	blt	179a0 <__assert_fail@plt+0x681c>
   17990:	ldr	r3, [fp, #-16]
   17994:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17998:	cmp	r2, r3
   1799c:	blt	179ec <__assert_fail@plt+0x6868>
   179a0:	ldr	r2, [fp, #-16]
   179a4:	mov	lr, #0
   179a8:	ldr	r3, [fp, #4]
   179ac:	smull	r2, r3, r2, r3
   179b0:	mov	r0, #0
   179b4:	mov	r1, #0
   179b8:	mov	r0, r3
   179bc:	asr	r1, r3, #31
   179c0:	asr	ip, r2, #31
   179c4:	cmp	ip, r0
   179c8:	beq	179d0 <__assert_fail@plt+0x684c>
   179cc:	mov	lr, #1
   179d0:	mov	r3, r2
   179d4:	str	r3, [fp, #-20]	; 0xffffffec
   179d8:	mov	r3, lr
   179dc:	and	r3, r3, #1
   179e0:	uxtb	r3, r3
   179e4:	cmp	r3, #0
   179e8:	beq	179f0 <__assert_fail@plt+0x686c>
   179ec:	bl	17c7c <__assert_fail@plt+0x6af8>
   179f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   179f4:	mov	r1, r3
   179f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179fc:	bl	174bc <__assert_fail@plt+0x6338>
   17a00:	str	r0, [fp, #-24]	; 0xffffffe8
   17a04:	ldr	r2, [fp, #-16]
   17a08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a0c:	str	r2, [r3]
   17a10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a14:	mov	r0, r3
   17a18:	sub	sp, fp, #4
   17a1c:	ldr	fp, [sp]
   17a20:	add	sp, sp, #4
   17a24:	pop	{pc}		; (ldr pc, [sp], #4)
   17a28:	str	fp, [sp, #-8]!
   17a2c:	str	lr, [sp, #4]
   17a30:	add	fp, sp, #4
   17a34:	sub	sp, sp, #8
   17a38:	str	r0, [fp, #-8]
   17a3c:	mov	r1, #1
   17a40:	ldr	r0, [fp, #-8]
   17a44:	bl	17a98 <__assert_fail@plt+0x6914>
   17a48:	mov	r3, r0
   17a4c:	mov	r0, r3
   17a50:	sub	sp, fp, #4
   17a54:	ldr	fp, [sp]
   17a58:	add	sp, sp, #4
   17a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a60:	str	fp, [sp, #-8]!
   17a64:	str	lr, [sp, #4]
   17a68:	add	fp, sp, #4
   17a6c:	sub	sp, sp, #8
   17a70:	str	r0, [fp, #-8]
   17a74:	mov	r1, #1
   17a78:	ldr	r0, [fp, #-8]
   17a7c:	bl	17ae0 <__assert_fail@plt+0x695c>
   17a80:	mov	r3, r0
   17a84:	mov	r0, r3
   17a88:	sub	sp, fp, #4
   17a8c:	ldr	fp, [sp]
   17a90:	add	sp, sp, #4
   17a94:	pop	{pc}		; (ldr pc, [sp], #4)
   17a98:	str	fp, [sp, #-8]!
   17a9c:	str	lr, [sp, #4]
   17aa0:	add	fp, sp, #4
   17aa4:	sub	sp, sp, #8
   17aa8:	str	r0, [fp, #-8]
   17aac:	str	r1, [fp, #-12]
   17ab0:	ldr	r1, [fp, #-12]
   17ab4:	ldr	r0, [fp, #-8]
   17ab8:	bl	17cc0 <__assert_fail@plt+0x6b3c>
   17abc:	mov	r3, r0
   17ac0:	mov	r0, r3
   17ac4:	bl	173cc <__assert_fail@plt+0x6248>
   17ac8:	mov	r3, r0
   17acc:	mov	r0, r3
   17ad0:	sub	sp, fp, #4
   17ad4:	ldr	fp, [sp]
   17ad8:	add	sp, sp, #4
   17adc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ae0:	str	fp, [sp, #-8]!
   17ae4:	str	lr, [sp, #4]
   17ae8:	add	fp, sp, #4
   17aec:	sub	sp, sp, #8
   17af0:	str	r0, [fp, #-8]
   17af4:	str	r1, [fp, #-12]
   17af8:	ldr	r1, [fp, #-12]
   17afc:	ldr	r0, [fp, #-8]
   17b00:	bl	183e4 <__assert_fail@plt+0x7260>
   17b04:	mov	r3, r0
   17b08:	mov	r0, r3
   17b0c:	bl	173cc <__assert_fail@plt+0x6248>
   17b10:	mov	r3, r0
   17b14:	mov	r0, r3
   17b18:	sub	sp, fp, #4
   17b1c:	ldr	fp, [sp]
   17b20:	add	sp, sp, #4
   17b24:	pop	{pc}		; (ldr pc, [sp], #4)
   17b28:	str	fp, [sp, #-8]!
   17b2c:	str	lr, [sp, #4]
   17b30:	add	fp, sp, #4
   17b34:	sub	sp, sp, #8
   17b38:	str	r0, [fp, #-8]
   17b3c:	str	r1, [fp, #-12]
   17b40:	ldr	r0, [fp, #-12]
   17b44:	bl	17408 <__assert_fail@plt+0x6284>
   17b48:	mov	r3, r0
   17b4c:	ldr	r2, [fp, #-12]
   17b50:	ldr	r1, [fp, #-8]
   17b54:	mov	r0, r3
   17b58:	bl	10efc <memcpy@plt>
   17b5c:	mov	r3, r0
   17b60:	mov	r0, r3
   17b64:	sub	sp, fp, #4
   17b68:	ldr	fp, [sp]
   17b6c:	add	sp, sp, #4
   17b70:	pop	{pc}		; (ldr pc, [sp], #4)
   17b74:	str	fp, [sp, #-8]!
   17b78:	str	lr, [sp, #4]
   17b7c:	add	fp, sp, #4
   17b80:	sub	sp, sp, #8
   17b84:	str	r0, [fp, #-8]
   17b88:	str	r1, [fp, #-12]
   17b8c:	ldr	r0, [fp, #-12]
   17b90:	bl	17448 <__assert_fail@plt+0x62c4>
   17b94:	mov	r3, r0
   17b98:	mov	r0, r3
   17b9c:	ldr	r3, [fp, #-12]
   17ba0:	mov	r2, r3
   17ba4:	ldr	r1, [fp, #-8]
   17ba8:	bl	10efc <memcpy@plt>
   17bac:	mov	r3, r0
   17bb0:	mov	r0, r3
   17bb4:	sub	sp, fp, #4
   17bb8:	ldr	fp, [sp]
   17bbc:	add	sp, sp, #4
   17bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bc4:	str	fp, [sp, #-8]!
   17bc8:	str	lr, [sp, #4]
   17bcc:	add	fp, sp, #4
   17bd0:	sub	sp, sp, #16
   17bd4:	str	r0, [fp, #-16]
   17bd8:	str	r1, [fp, #-20]	; 0xffffffec
   17bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17be0:	add	r3, r3, #1
   17be4:	mov	r0, r3
   17be8:	bl	17448 <__assert_fail@plt+0x62c4>
   17bec:	mov	r3, r0
   17bf0:	str	r3, [fp, #-8]
   17bf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bf8:	ldr	r2, [fp, #-8]
   17bfc:	add	r3, r2, r3
   17c00:	mov	r2, #0
   17c04:	strb	r2, [r3]
   17c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c0c:	mov	r2, r3
   17c10:	ldr	r1, [fp, #-16]
   17c14:	ldr	r0, [fp, #-8]
   17c18:	bl	10efc <memcpy@plt>
   17c1c:	mov	r3, r0
   17c20:	mov	r0, r3
   17c24:	sub	sp, fp, #4
   17c28:	ldr	fp, [sp]
   17c2c:	add	sp, sp, #4
   17c30:	pop	{pc}		; (ldr pc, [sp], #4)
   17c34:	str	fp, [sp, #-8]!
   17c38:	str	lr, [sp, #4]
   17c3c:	add	fp, sp, #4
   17c40:	sub	sp, sp, #8
   17c44:	str	r0, [fp, #-8]
   17c48:	ldr	r0, [fp, #-8]
   17c4c:	bl	11070 <strlen@plt>
   17c50:	mov	r3, r0
   17c54:	add	r3, r3, #1
   17c58:	mov	r1, r3
   17c5c:	ldr	r0, [fp, #-8]
   17c60:	bl	17b28 <__assert_fail@plt+0x69a4>
   17c64:	mov	r3, r0
   17c68:	mov	r0, r3
   17c6c:	sub	sp, fp, #4
   17c70:	ldr	fp, [sp]
   17c74:	add	sp, sp, #4
   17c78:	pop	{pc}		; (ldr pc, [sp], #4)
   17c7c:	strd	r4, [sp, #-16]!
   17c80:	str	fp, [sp, #8]
   17c84:	str	lr, [sp, #12]
   17c88:	add	fp, sp, #12
   17c8c:	movw	r3, #41256	; 0xa128
   17c90:	movt	r3, #2
   17c94:	ldr	r4, [r3]
   17c98:	movw	r0, #38888	; 0x97e8
   17c9c:	movt	r0, #1
   17ca0:	bl	11058 <gettext@plt>
   17ca4:	mov	r3, r0
   17ca8:	movw	r2, #38908	; 0x97fc
   17cac:	movt	r2, #1
   17cb0:	mov	r1, #0
   17cb4:	mov	r0, r4
   17cb8:	bl	10fc8 <error@plt>
   17cbc:	bl	1116c <abort@plt>
   17cc0:	str	fp, [sp, #-8]!
   17cc4:	str	lr, [sp, #4]
   17cc8:	add	fp, sp, #4
   17ccc:	sub	sp, sp, #16
   17cd0:	str	r0, [fp, #-16]
   17cd4:	str	r1, [fp, #-20]	; 0xffffffec
   17cd8:	ldr	r3, [fp, #-16]
   17cdc:	cmp	r3, #0
   17ce0:	beq	17cf0 <__assert_fail@plt+0x6b6c>
   17ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ce8:	cmp	r3, #0
   17cec:	bne	17d00 <__assert_fail@plt+0x6b7c>
   17cf0:	mov	r3, #1
   17cf4:	str	r3, [fp, #-20]	; 0xffffffec
   17cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17cfc:	str	r3, [fp, #-16]
   17d00:	mov	ip, #0
   17d04:	ldr	r2, [fp, #-16]
   17d08:	ldr	r3, [fp, #-20]	; 0xffffffec
   17d0c:	umull	r0, r1, r2, r3
   17d10:	mov	r2, #0
   17d14:	mov	r3, #0
   17d18:	mov	r2, r1
   17d1c:	mov	r3, #0
   17d20:	cmp	r2, #0
   17d24:	beq	17d2c <__assert_fail@plt+0x6ba8>
   17d28:	mov	ip, #1
   17d2c:	cmp	r0, #0
   17d30:	bge	17d38 <__assert_fail@plt+0x6bb4>
   17d34:	mov	ip, #1
   17d38:	mov	r3, ip
   17d3c:	and	r3, r3, #1
   17d40:	uxtb	r3, r3
   17d44:	cmp	r3, #0
   17d48:	beq	17d64 <__assert_fail@plt+0x6be0>
   17d4c:	bl	11094 <__errno_location@plt>
   17d50:	mov	r2, r0
   17d54:	mov	r3, #12
   17d58:	str	r3, [r2]
   17d5c:	mov	r3, #0
   17d60:	b	17d7c <__assert_fail@plt+0x6bf8>
   17d64:	ldr	r1, [fp, #-20]	; 0xffffffec
   17d68:	ldr	r0, [fp, #-16]
   17d6c:	bl	10e84 <calloc@plt>
   17d70:	mov	r3, r0
   17d74:	str	r3, [fp, #-8]
   17d78:	ldr	r3, [fp, #-8]
   17d7c:	mov	r0, r3
   17d80:	sub	sp, fp, #4
   17d84:	ldr	fp, [sp]
   17d88:	add	sp, sp, #4
   17d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d90:	str	fp, [sp, #-8]!
   17d94:	str	lr, [sp, #4]
   17d98:	add	fp, sp, #4
   17d9c:	sub	sp, sp, #16
   17da0:	str	r0, [fp, #-16]
   17da4:	ldr	r3, [fp, #-16]
   17da8:	cmp	r3, #0
   17dac:	bne	17db8 <__assert_fail@plt+0x6c34>
   17db0:	mov	r3, #1
   17db4:	str	r3, [fp, #-16]
   17db8:	mov	r2, #0
   17dbc:	ldr	r3, [fp, #-16]
   17dc0:	cmp	r3, #0
   17dc4:	bge	17dcc <__assert_fail@plt+0x6c48>
   17dc8:	mov	r2, #1
   17dcc:	mov	r3, r2
   17dd0:	and	r3, r3, #1
   17dd4:	uxtb	r3, r3
   17dd8:	cmp	r3, #0
   17ddc:	beq	17df8 <__assert_fail@plt+0x6c74>
   17de0:	bl	11094 <__errno_location@plt>
   17de4:	mov	r2, r0
   17de8:	mov	r3, #12
   17dec:	str	r3, [r2]
   17df0:	mov	r3, #0
   17df4:	b	17e0c <__assert_fail@plt+0x6c88>
   17df8:	ldr	r0, [fp, #-16]
   17dfc:	bl	10fe0 <malloc@plt>
   17e00:	mov	r3, r0
   17e04:	str	r3, [fp, #-8]
   17e08:	ldr	r3, [fp, #-8]
   17e0c:	mov	r0, r3
   17e10:	sub	sp, fp, #4
   17e14:	ldr	fp, [sp]
   17e18:	add	sp, sp, #4
   17e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e20:	str	fp, [sp, #-8]!
   17e24:	str	lr, [sp, #4]
   17e28:	add	fp, sp, #4
   17e2c:	sub	sp, sp, #16
   17e30:	str	r0, [fp, #-16]
   17e34:	str	r1, [fp, #-20]	; 0xffffffec
   17e38:	ldr	r3, [fp, #-16]
   17e3c:	cmp	r3, #0
   17e40:	bne	17e54 <__assert_fail@plt+0x6cd0>
   17e44:	ldr	r0, [fp, #-20]	; 0xffffffec
   17e48:	bl	17d90 <__assert_fail@plt+0x6c0c>
   17e4c:	mov	r3, r0
   17e50:	b	17ec4 <__assert_fail@plt+0x6d40>
   17e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e58:	cmp	r3, #0
   17e5c:	bne	17e70 <__assert_fail@plt+0x6cec>
   17e60:	ldr	r0, [fp, #-16]
   17e64:	bl	13b44 <__assert_fail@plt+0x29c0>
   17e68:	mov	r3, #0
   17e6c:	b	17ec4 <__assert_fail@plt+0x6d40>
   17e70:	mov	r2, #0
   17e74:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e78:	cmp	r3, #0
   17e7c:	bge	17e84 <__assert_fail@plt+0x6d00>
   17e80:	mov	r2, #1
   17e84:	mov	r3, r2
   17e88:	and	r3, r3, #1
   17e8c:	uxtb	r3, r3
   17e90:	cmp	r3, #0
   17e94:	beq	17eb0 <__assert_fail@plt+0x6d2c>
   17e98:	bl	11094 <__errno_location@plt>
   17e9c:	mov	r2, r0
   17ea0:	mov	r3, #12
   17ea4:	str	r3, [r2]
   17ea8:	mov	r3, #0
   17eac:	b	17ec4 <__assert_fail@plt+0x6d40>
   17eb0:	ldr	r1, [fp, #-20]	; 0xffffffec
   17eb4:	ldr	r0, [fp, #-16]
   17eb8:	bl	10f5c <realloc@plt>
   17ebc:	str	r0, [fp, #-8]
   17ec0:	ldr	r3, [fp, #-8]
   17ec4:	mov	r0, r3
   17ec8:	sub	sp, fp, #4
   17ecc:	ldr	fp, [sp]
   17ed0:	add	sp, sp, #4
   17ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ed8:	strd	r4, [sp, #-16]!
   17edc:	str	fp, [sp, #8]
   17ee0:	str	lr, [sp, #12]
   17ee4:	add	fp, sp, #12
   17ee8:	sub	sp, sp, #16
   17eec:	str	r0, [fp, #-24]	; 0xffffffe8
   17ef0:	str	r1, [fp, #-28]	; 0xffffffe4
   17ef4:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17ef8:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17efc:	cmp	r5, r4
   17f00:	bne	17f0c <__assert_fail@plt+0x6d88>
   17f04:	mov	r3, #0
   17f08:	b	17f6c <__assert_fail@plt+0x6de8>
   17f0c:	ldrb	r3, [r5]
   17f10:	mov	r0, r3
   17f14:	bl	137a8 <__assert_fail@plt+0x2624>
   17f18:	mov	r3, r0
   17f1c:	strb	r3, [fp, #-13]
   17f20:	ldrb	r3, [r4]
   17f24:	mov	r0, r3
   17f28:	bl	137a8 <__assert_fail@plt+0x2624>
   17f2c:	mov	r3, r0
   17f30:	strb	r3, [fp, #-14]
   17f34:	ldrb	r3, [fp, #-13]
   17f38:	cmp	r3, #0
   17f3c:	beq	17f5c <__assert_fail@plt+0x6dd8>
   17f40:	add	r5, r5, #1
   17f44:	add	r4, r4, #1
   17f48:	ldrb	r2, [fp, #-13]
   17f4c:	ldrb	r3, [fp, #-14]
   17f50:	cmp	r2, r3
   17f54:	beq	17f0c <__assert_fail@plt+0x6d88>
   17f58:	b	17f60 <__assert_fail@plt+0x6ddc>
   17f5c:	nop	{0}
   17f60:	ldrb	r2, [fp, #-13]
   17f64:	ldrb	r3, [fp, #-14]
   17f68:	sub	r3, r2, r3
   17f6c:	mov	r0, r3
   17f70:	sub	sp, fp, #12
   17f74:	ldrd	r4, [sp]
   17f78:	ldr	fp, [sp, #8]
   17f7c:	add	sp, sp, #12
   17f80:	pop	{pc}		; (ldr pc, [sp], #4)
   17f84:	str	fp, [sp, #-8]!
   17f88:	str	lr, [sp, #4]
   17f8c:	add	fp, sp, #4
   17f90:	sub	sp, sp, #16
   17f94:	str	r0, [fp, #-16]
   17f98:	ldr	r0, [fp, #-16]
   17f9c:	bl	10fa4 <__fpending@plt>
   17fa0:	mov	r3, r0
   17fa4:	cmp	r3, #0
   17fa8:	movne	r3, #1
   17fac:	moveq	r3, #0
   17fb0:	strb	r3, [fp, #-5]
   17fb4:	ldr	r0, [fp, #-16]
   17fb8:	bl	10fb0 <ferror_unlocked@plt>
   17fbc:	mov	r3, r0
   17fc0:	cmp	r3, #0
   17fc4:	movne	r3, #1
   17fc8:	moveq	r3, #0
   17fcc:	strb	r3, [fp, #-6]
   17fd0:	ldr	r0, [fp, #-16]
   17fd4:	bl	18068 <__assert_fail@plt+0x6ee4>
   17fd8:	mov	r3, r0
   17fdc:	cmp	r3, #0
   17fe0:	movne	r3, #1
   17fe4:	moveq	r3, #0
   17fe8:	strb	r3, [fp, #-7]
   17fec:	ldrb	r3, [fp, #-6]
   17ff0:	cmp	r3, #0
   17ff4:	bne	18024 <__assert_fail@plt+0x6ea0>
   17ff8:	ldrb	r3, [fp, #-7]
   17ffc:	cmp	r3, #0
   18000:	beq	18050 <__assert_fail@plt+0x6ecc>
   18004:	ldrb	r3, [fp, #-5]
   18008:	cmp	r3, #0
   1800c:	bne	18024 <__assert_fail@plt+0x6ea0>
   18010:	bl	11094 <__errno_location@plt>
   18014:	mov	r3, r0
   18018:	ldr	r3, [r3]
   1801c:	cmp	r3, #9
   18020:	beq	18050 <__assert_fail@plt+0x6ecc>
   18024:	ldrb	r3, [fp, #-7]
   18028:	eor	r3, r3, #1
   1802c:	uxtb	r3, r3
   18030:	cmp	r3, #0
   18034:	beq	18048 <__assert_fail@plt+0x6ec4>
   18038:	bl	11094 <__errno_location@plt>
   1803c:	mov	r2, r0
   18040:	mov	r3, #0
   18044:	str	r3, [r2]
   18048:	mvn	r3, #0
   1804c:	b	18054 <__assert_fail@plt+0x6ed0>
   18050:	mov	r3, #0
   18054:	mov	r0, r3
   18058:	sub	sp, fp, #4
   1805c:	ldr	fp, [sp]
   18060:	add	sp, sp, #4
   18064:	pop	{pc}		; (ldr pc, [sp], #4)
   18068:	str	fp, [sp, #-8]!
   1806c:	str	lr, [sp, #4]
   18070:	add	fp, sp, #4
   18074:	sub	sp, sp, #32
   18078:	str	r0, [fp, #-24]	; 0xffffffe8
   1807c:	mov	r3, #0
   18080:	str	r3, [fp, #-8]
   18084:	mov	r3, #0
   18088:	str	r3, [fp, #-12]
   1808c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18090:	bl	110c4 <fileno@plt>
   18094:	str	r0, [fp, #-16]
   18098:	ldr	r3, [fp, #-16]
   1809c:	cmp	r3, #0
   180a0:	bge	180b4 <__assert_fail@plt+0x6f30>
   180a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   180a8:	bl	110dc <fclose@plt>
   180ac:	mov	r3, r0
   180b0:	b	18158 <__assert_fail@plt+0x6fd4>
   180b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   180b8:	bl	11004 <__freading@plt>
   180bc:	mov	r3, r0
   180c0:	cmp	r3, #0
   180c4:	beq	18100 <__assert_fail@plt+0x6f7c>
   180c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   180cc:	bl	110c4 <fileno@plt>
   180d0:	mov	r1, r0
   180d4:	mov	r3, #1
   180d8:	str	r3, [sp]
   180dc:	mov	r2, #0
   180e0:	mov	r3, #0
   180e4:	mov	r0, r1
   180e8:	bl	10f8c <lseek64@plt>
   180ec:	mvn	r2, #0
   180f0:	mvn	r3, #0
   180f4:	cmp	r1, r3
   180f8:	cmpeq	r0, r2
   180fc:	beq	18124 <__assert_fail@plt+0x6fa0>
   18100:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18104:	bl	181c0 <__assert_fail@plt+0x703c>
   18108:	mov	r3, r0
   1810c:	cmp	r3, #0
   18110:	beq	18124 <__assert_fail@plt+0x6fa0>
   18114:	bl	11094 <__errno_location@plt>
   18118:	mov	r3, r0
   1811c:	ldr	r3, [r3]
   18120:	str	r3, [fp, #-8]
   18124:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18128:	bl	110dc <fclose@plt>
   1812c:	str	r0, [fp, #-12]
   18130:	ldr	r3, [fp, #-8]
   18134:	cmp	r3, #0
   18138:	beq	18154 <__assert_fail@plt+0x6fd0>
   1813c:	bl	11094 <__errno_location@plt>
   18140:	mov	r2, r0
   18144:	ldr	r3, [fp, #-8]
   18148:	str	r3, [r2]
   1814c:	mvn	r3, #0
   18150:	str	r3, [fp, #-12]
   18154:	ldr	r3, [fp, #-12]
   18158:	mov	r0, r3
   1815c:	sub	sp, fp, #4
   18160:	ldr	fp, [sp]
   18164:	add	sp, sp, #4
   18168:	pop	{pc}		; (ldr pc, [sp], #4)
   1816c:	str	fp, [sp, #-8]!
   18170:	str	lr, [sp, #4]
   18174:	add	fp, sp, #4
   18178:	sub	sp, sp, #16
   1817c:	str	r0, [fp, #-8]
   18180:	ldr	r3, [fp, #-8]
   18184:	ldr	r3, [r3]
   18188:	and	r3, r3, #256	; 0x100
   1818c:	cmp	r3, #0
   18190:	beq	181ac <__assert_fail@plt+0x7028>
   18194:	mov	r3, #1
   18198:	str	r3, [sp]
   1819c:	mov	r2, #0
   181a0:	mov	r3, #0
   181a4:	ldr	r0, [fp, #-8]
   181a8:	bl	1822c <__assert_fail@plt+0x70a8>
   181ac:	nop	{0}
   181b0:	sub	sp, fp, #4
   181b4:	ldr	fp, [sp]
   181b8:	add	sp, sp, #4
   181bc:	pop	{pc}		; (ldr pc, [sp], #4)
   181c0:	str	fp, [sp, #-8]!
   181c4:	str	lr, [sp, #4]
   181c8:	add	fp, sp, #4
   181cc:	sub	sp, sp, #8
   181d0:	str	r0, [fp, #-8]
   181d4:	ldr	r3, [fp, #-8]
   181d8:	cmp	r3, #0
   181dc:	beq	181f4 <__assert_fail@plt+0x7070>
   181e0:	ldr	r0, [fp, #-8]
   181e4:	bl	11004 <__freading@plt>
   181e8:	mov	r3, r0
   181ec:	cmp	r3, #0
   181f0:	bne	18204 <__assert_fail@plt+0x7080>
   181f4:	ldr	r0, [fp, #-8]
   181f8:	bl	10ec0 <fflush@plt>
   181fc:	mov	r3, r0
   18200:	b	18218 <__assert_fail@plt+0x7094>
   18204:	ldr	r0, [fp, #-8]
   18208:	bl	1816c <__assert_fail@plt+0x6fe8>
   1820c:	ldr	r0, [fp, #-8]
   18210:	bl	10ec0 <fflush@plt>
   18214:	mov	r3, r0
   18218:	mov	r0, r3
   1821c:	sub	sp, fp, #4
   18220:	ldr	fp, [sp]
   18224:	add	sp, sp, #4
   18228:	pop	{pc}		; (ldr pc, [sp], #4)
   1822c:	str	fp, [sp, #-8]!
   18230:	str	lr, [sp, #4]
   18234:	add	fp, sp, #4
   18238:	sub	sp, sp, #32
   1823c:	str	r0, [fp, #-16]
   18240:	strd	r2, [fp, #-28]	; 0xffffffe4
   18244:	ldr	r3, [fp, #-16]
   18248:	ldr	r2, [r3, #8]
   1824c:	ldr	r3, [fp, #-16]
   18250:	ldr	r3, [r3, #4]
   18254:	cmp	r2, r3
   18258:	bne	182f0 <__assert_fail@plt+0x716c>
   1825c:	ldr	r3, [fp, #-16]
   18260:	ldr	r2, [r3, #20]
   18264:	ldr	r3, [fp, #-16]
   18268:	ldr	r3, [r3, #16]
   1826c:	cmp	r2, r3
   18270:	bne	182f0 <__assert_fail@plt+0x716c>
   18274:	ldr	r3, [fp, #-16]
   18278:	ldr	r3, [r3, #36]	; 0x24
   1827c:	cmp	r3, #0
   18280:	bne	182f0 <__assert_fail@plt+0x716c>
   18284:	ldr	r0, [fp, #-16]
   18288:	bl	110c4 <fileno@plt>
   1828c:	mov	r1, r0
   18290:	ldr	r3, [fp, #4]
   18294:	str	r3, [sp]
   18298:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1829c:	mov	r0, r1
   182a0:	bl	10f8c <lseek64@plt>
   182a4:	strd	r0, [fp, #-12]
   182a8:	ldrd	r2, [fp, #-12]
   182ac:	mvn	r0, #0
   182b0:	mvn	r1, #0
   182b4:	cmp	r3, r1
   182b8:	cmpeq	r2, r0
   182bc:	bne	182c8 <__assert_fail@plt+0x7144>
   182c0:	mvn	r3, #0
   182c4:	b	18308 <__assert_fail@plt+0x7184>
   182c8:	ldr	r3, [fp, #-16]
   182cc:	ldr	r3, [r3]
   182d0:	bic	r2, r3, #16
   182d4:	ldr	r3, [fp, #-16]
   182d8:	str	r2, [r3]
   182dc:	ldr	r1, [fp, #-16]
   182e0:	ldrd	r2, [fp, #-12]
   182e4:	strd	r2, [r1, #80]	; 0x50
   182e8:	mov	r3, #0
   182ec:	b	18308 <__assert_fail@plt+0x7184>
   182f0:	ldr	r3, [fp, #4]
   182f4:	str	r3, [sp]
   182f8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   182fc:	ldr	r0, [fp, #-16]
   18300:	bl	110e8 <fseeko64@plt>
   18304:	mov	r3, r0
   18308:	mov	r0, r3
   1830c:	sub	sp, fp, #4
   18310:	ldr	fp, [sp]
   18314:	add	sp, sp, #4
   18318:	pop	{pc}		; (ldr pc, [sp], #4)
   1831c:	str	fp, [sp, #-8]!
   18320:	str	lr, [sp, #4]
   18324:	add	fp, sp, #4
   18328:	bl	11094 <__errno_location@plt>
   1832c:	mov	r2, r0
   18330:	mov	r3, #12
   18334:	str	r3, [r2]
   18338:	mov	r3, #0
   1833c:	mov	r0, r3
   18340:	sub	sp, fp, #4
   18344:	ldr	fp, [sp]
   18348:	add	sp, sp, #4
   1834c:	pop	{pc}		; (ldr pc, [sp], #4)
   18350:	str	fp, [sp, #-8]!
   18354:	str	lr, [sp, #4]
   18358:	add	fp, sp, #4
   1835c:	sub	sp, sp, #8
   18360:	str	r0, [fp, #-8]
   18364:	ldr	r3, [fp, #-8]
   18368:	mov	r0, r3
   1836c:	bl	17d90 <__assert_fail@plt+0x6c0c>
   18370:	mov	r3, r0
   18374:	mov	r0, r3
   18378:	sub	sp, fp, #4
   1837c:	ldr	fp, [sp]
   18380:	add	sp, sp, #4
   18384:	pop	{pc}		; (ldr pc, [sp], #4)
   18388:	str	fp, [sp, #-8]!
   1838c:	str	lr, [sp, #4]
   18390:	add	fp, sp, #4
   18394:	sub	sp, sp, #8
   18398:	str	r0, [fp, #-8]
   1839c:	str	r1, [fp, #-12]
   183a0:	ldr	r3, [fp, #-12]
   183a4:	cmp	r3, #0
   183a8:	moveq	r3, #1
   183ac:	movne	r3, #0
   183b0:	uxtb	r3, r3
   183b4:	mov	r2, r3
   183b8:	ldr	r3, [fp, #-12]
   183bc:	orr	r3, r2, r3
   183c0:	mov	r1, r3
   183c4:	ldr	r0, [fp, #-8]
   183c8:	bl	17e20 <__assert_fail@plt+0x6c9c>
   183cc:	mov	r3, r0
   183d0:	mov	r0, r3
   183d4:	sub	sp, fp, #4
   183d8:	ldr	fp, [sp]
   183dc:	add	sp, sp, #4
   183e0:	pop	{pc}		; (ldr pc, [sp], #4)
   183e4:	str	fp, [sp, #-8]!
   183e8:	str	lr, [sp, #4]
   183ec:	add	fp, sp, #4
   183f0:	sub	sp, sp, #8
   183f4:	str	r0, [fp, #-8]
   183f8:	str	r1, [fp, #-12]
   183fc:	ldr	r3, [fp, #-8]
   18400:	ldr	r2, [fp, #-12]
   18404:	mov	r1, r2
   18408:	mov	r0, r3
   1840c:	bl	17cc0 <__assert_fail@plt+0x6b3c>
   18410:	mov	r3, r0
   18414:	mov	r0, r3
   18418:	sub	sp, fp, #4
   1841c:	ldr	fp, [sp]
   18420:	add	sp, sp, #4
   18424:	pop	{pc}		; (ldr pc, [sp], #4)
   18428:	str	fp, [sp, #-8]!
   1842c:	str	lr, [sp, #4]
   18430:	add	fp, sp, #4
   18434:	sub	sp, sp, #16
   18438:	str	r0, [fp, #-8]
   1843c:	str	r1, [fp, #-12]
   18440:	str	r2, [fp, #-16]
   18444:	ldr	r3, [fp, #-12]
   18448:	cmp	r3, #0
   1844c:	beq	1845c <__assert_fail@plt+0x72d8>
   18450:	ldr	r3, [fp, #-16]
   18454:	cmp	r3, #0
   18458:	bne	1846c <__assert_fail@plt+0x72e8>
   1845c:	mov	r3, #1
   18460:	str	r3, [fp, #-16]
   18464:	ldr	r3, [fp, #-16]
   18468:	str	r3, [fp, #-12]
   1846c:	ldr	r3, [fp, #-12]
   18470:	ldr	r2, [fp, #-16]
   18474:	mov	r1, r3
   18478:	ldr	r0, [fp, #-8]
   1847c:	bl	185b8 <__assert_fail@plt+0x7434>
   18480:	mov	r3, r0
   18484:	mov	r0, r3
   18488:	sub	sp, fp, #4
   1848c:	ldr	fp, [sp]
   18490:	add	sp, sp, #4
   18494:	pop	{pc}		; (ldr pc, [sp], #4)
   18498:	str	fp, [sp, #-8]!
   1849c:	str	lr, [sp, #4]
   184a0:	add	fp, sp, #4
   184a4:	sub	sp, sp, #8
   184a8:	mov	r0, #14
   184ac:	bl	11118 <nl_langinfo@plt>
   184b0:	str	r0, [fp, #-8]
   184b4:	ldr	r3, [fp, #-8]
   184b8:	cmp	r3, #0
   184bc:	bne	184cc <__assert_fail@plt+0x7348>
   184c0:	movw	r3, #38912	; 0x9800
   184c4:	movt	r3, #1
   184c8:	str	r3, [fp, #-8]
   184cc:	ldr	r3, [fp, #-8]
   184d0:	ldrb	r3, [r3]
   184d4:	cmp	r3, #0
   184d8:	bne	184e8 <__assert_fail@plt+0x7364>
   184dc:	movw	r3, #38916	; 0x9804
   184e0:	movt	r3, #1
   184e4:	str	r3, [fp, #-8]
   184e8:	ldr	r3, [fp, #-8]
   184ec:	mov	r0, r3
   184f0:	sub	sp, fp, #4
   184f4:	ldr	fp, [sp]
   184f8:	add	sp, sp, #4
   184fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18500:	str	fp, [sp, #-8]!
   18504:	str	lr, [sp, #4]
   18508:	add	fp, sp, #4
   1850c:	sub	sp, sp, #32
   18510:	str	r0, [fp, #-24]	; 0xffffffe8
   18514:	str	r1, [fp, #-28]	; 0xffffffe4
   18518:	str	r2, [fp, #-32]	; 0xffffffe0
   1851c:	str	r3, [fp, #-36]	; 0xffffffdc
   18520:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18524:	cmp	r3, #0
   18528:	bne	18534 <__assert_fail@plt+0x73b0>
   1852c:	sub	r3, fp, #16
   18530:	str	r3, [fp, #-24]	; 0xffffffe8
   18534:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18538:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1853c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18540:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18544:	bl	10fbc <mbrtowc@plt>
   18548:	str	r0, [fp, #-8]
   1854c:	ldr	r3, [fp, #-8]
   18550:	cmn	r3, #3
   18554:	bls	185a0 <__assert_fail@plt+0x741c>
   18558:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1855c:	cmp	r3, #0
   18560:	beq	185a0 <__assert_fail@plt+0x741c>
   18564:	mov	r0, #0
   18568:	bl	13be8 <__assert_fail@plt+0x2a64>
   1856c:	mov	r3, r0
   18570:	eor	r3, r3, #1
   18574:	uxtb	r3, r3
   18578:	cmp	r3, #0
   1857c:	beq	185a0 <__assert_fail@plt+0x741c>
   18580:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18584:	ldrb	r3, [r3]
   18588:	strb	r3, [fp, #-9]
   1858c:	ldrb	r2, [fp, #-9]
   18590:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18594:	str	r2, [r3]
   18598:	mov	r3, #1
   1859c:	b	185a4 <__assert_fail@plt+0x7420>
   185a0:	ldr	r3, [fp, #-8]
   185a4:	mov	r0, r3
   185a8:	sub	sp, fp, #4
   185ac:	ldr	fp, [sp]
   185b0:	add	sp, sp, #4
   185b4:	pop	{pc}		; (ldr pc, [sp], #4)
   185b8:	str	fp, [sp, #-8]!
   185bc:	str	lr, [sp, #4]
   185c0:	add	fp, sp, #4
   185c4:	sub	sp, sp, #24
   185c8:	str	r0, [fp, #-16]
   185cc:	str	r1, [fp, #-20]	; 0xffffffec
   185d0:	str	r2, [fp, #-24]	; 0xffffffe8
   185d4:	mov	ip, #0
   185d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   185dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185e0:	umull	r0, r1, r2, r3
   185e4:	mov	r2, #0
   185e8:	mov	r3, #0
   185ec:	mov	r2, r1
   185f0:	mov	r3, #0
   185f4:	cmp	r2, #0
   185f8:	beq	18600 <__assert_fail@plt+0x747c>
   185fc:	mov	ip, #1
   18600:	mov	r3, r0
   18604:	str	r3, [fp, #-8]
   18608:	mov	r3, ip
   1860c:	and	r3, r3, #1
   18610:	uxtb	r3, r3
   18614:	cmp	r3, #0
   18618:	beq	18634 <__assert_fail@plt+0x74b0>
   1861c:	bl	11094 <__errno_location@plt>
   18620:	mov	r2, r0
   18624:	mov	r3, #12
   18628:	str	r3, [r2]
   1862c:	mov	r3, #0
   18630:	b	18648 <__assert_fail@plt+0x74c4>
   18634:	ldr	r3, [fp, #-8]
   18638:	mov	r1, r3
   1863c:	ldr	r0, [fp, #-16]
   18640:	bl	17e20 <__assert_fail@plt+0x6c9c>
   18644:	mov	r3, r0
   18648:	mov	r0, r3
   1864c:	sub	sp, fp, #4
   18650:	ldr	fp, [sp]
   18654:	add	sp, sp, #4
   18658:	pop	{pc}		; (ldr pc, [sp], #4)
   1865c:	cmp	r3, #0
   18660:	cmpeq	r2, #0
   18664:	bne	18688 <__assert_fail@plt+0x7504>
   18668:	cmp	r1, #0
   1866c:	movlt	r1, #-2147483648	; 0x80000000
   18670:	movlt	r0, #0
   18674:	blt	18684 <__assert_fail@plt+0x7500>
   18678:	cmpeq	r0, #0
   1867c:	mvnne	r1, #-2147483648	; 0x80000000
   18680:	mvnne	r0, #0
   18684:	b	18730 <__assert_fail@plt+0x75ac>
   18688:	sub	sp, sp, #8
   1868c:	push	{sp, lr}
   18690:	cmp	r1, #0
   18694:	blt	186b4 <__assert_fail@plt+0x7530>
   18698:	cmp	r3, #0
   1869c:	blt	186e8 <__assert_fail@plt+0x7564>
   186a0:	bl	18740 <__assert_fail@plt+0x75bc>
   186a4:	ldr	lr, [sp, #4]
   186a8:	add	sp, sp, #8
   186ac:	pop	{r2, r3}
   186b0:	bx	lr
   186b4:	rsbs	r0, r0, #0
   186b8:	sbc	r1, r1, r1, lsl #1
   186bc:	cmp	r3, #0
   186c0:	blt	1870c <__assert_fail@plt+0x7588>
   186c4:	bl	18740 <__assert_fail@plt+0x75bc>
   186c8:	ldr	lr, [sp, #4]
   186cc:	add	sp, sp, #8
   186d0:	pop	{r2, r3}
   186d4:	rsbs	r0, r0, #0
   186d8:	sbc	r1, r1, r1, lsl #1
   186dc:	rsbs	r2, r2, #0
   186e0:	sbc	r3, r3, r3, lsl #1
   186e4:	bx	lr
   186e8:	rsbs	r2, r2, #0
   186ec:	sbc	r3, r3, r3, lsl #1
   186f0:	bl	18740 <__assert_fail@plt+0x75bc>
   186f4:	ldr	lr, [sp, #4]
   186f8:	add	sp, sp, #8
   186fc:	pop	{r2, r3}
   18700:	rsbs	r0, r0, #0
   18704:	sbc	r1, r1, r1, lsl #1
   18708:	bx	lr
   1870c:	rsbs	r2, r2, #0
   18710:	sbc	r3, r3, r3, lsl #1
   18714:	bl	18740 <__assert_fail@plt+0x75bc>
   18718:	ldr	lr, [sp, #4]
   1871c:	add	sp, sp, #8
   18720:	pop	{r2, r3}
   18724:	rsbs	r2, r2, #0
   18728:	sbc	r3, r3, r3, lsl #1
   1872c:	bx	lr
   18730:	push	{r1, lr}
   18734:	mov	r0, #8
   18738:	bl	10e9c <raise@plt>
   1873c:	pop	{r1, pc}
   18740:	cmp	r1, r3
   18744:	cmpeq	r0, r2
   18748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1874c:	mov	r4, r0
   18750:	movcc	r0, #0
   18754:	mov	r5, r1
   18758:	ldr	lr, [sp, #36]	; 0x24
   1875c:	movcc	r1, r0
   18760:	bcc	1885c <__assert_fail@plt+0x76d8>
   18764:	cmp	r3, #0
   18768:	clzeq	ip, r2
   1876c:	clzne	ip, r3
   18770:	addeq	ip, ip, #32
   18774:	cmp	r5, #0
   18778:	clzeq	r1, r4
   1877c:	addeq	r1, r1, #32
   18780:	clzne	r1, r5
   18784:	sub	ip, ip, r1
   18788:	sub	sl, ip, #32
   1878c:	lsl	r9, r3, ip
   18790:	rsb	fp, ip, #32
   18794:	orr	r9, r9, r2, lsl sl
   18798:	orr	r9, r9, r2, lsr fp
   1879c:	lsl	r8, r2, ip
   187a0:	cmp	r5, r9
   187a4:	cmpeq	r4, r8
   187a8:	movcc	r0, #0
   187ac:	movcc	r1, r0
   187b0:	bcc	187cc <__assert_fail@plt+0x7648>
   187b4:	mov	r0, #1
   187b8:	subs	r4, r4, r8
   187bc:	lsl	r1, r0, sl
   187c0:	orr	r1, r1, r0, lsr fp
   187c4:	lsl	r0, r0, ip
   187c8:	sbc	r5, r5, r9
   187cc:	cmp	ip, #0
   187d0:	beq	1885c <__assert_fail@plt+0x76d8>
   187d4:	lsr	r6, r8, #1
   187d8:	orr	r6, r6, r9, lsl #31
   187dc:	lsr	r7, r9, #1
   187e0:	mov	r2, ip
   187e4:	b	18808 <__assert_fail@plt+0x7684>
   187e8:	subs	r3, r4, r6
   187ec:	sbc	r8, r5, r7
   187f0:	adds	r3, r3, r3
   187f4:	adc	r8, r8, r8
   187f8:	adds	r4, r3, #1
   187fc:	adc	r5, r8, #0
   18800:	subs	r2, r2, #1
   18804:	beq	18824 <__assert_fail@plt+0x76a0>
   18808:	cmp	r5, r7
   1880c:	cmpeq	r4, r6
   18810:	bcs	187e8 <__assert_fail@plt+0x7664>
   18814:	adds	r4, r4, r4
   18818:	adc	r5, r5, r5
   1881c:	subs	r2, r2, #1
   18820:	bne	18808 <__assert_fail@plt+0x7684>
   18824:	lsr	r3, r4, ip
   18828:	orr	r3, r3, r5, lsl fp
   1882c:	lsr	r2, r5, ip
   18830:	orr	r3, r3, r5, lsr sl
   18834:	adds	r0, r0, r4
   18838:	mov	r4, r3
   1883c:	lsl	r3, r2, ip
   18840:	orr	r3, r3, r4, lsl sl
   18844:	lsl	ip, r4, ip
   18848:	orr	r3, r3, r4, lsr fp
   1884c:	adc	r1, r1, r5
   18850:	subs	r0, r0, ip
   18854:	mov	r5, r2
   18858:	sbc	r1, r1, r3
   1885c:	cmp	lr, #0
   18860:	strdne	r4, [lr]
   18864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1886c:	mov	r7, r0
   18870:	ldr	r6, [pc, #72]	; 188c0 <__assert_fail@plt+0x773c>
   18874:	ldr	r5, [pc, #72]	; 188c4 <__assert_fail@plt+0x7740>
   18878:	add	r6, pc, r6
   1887c:	add	r5, pc, r5
   18880:	sub	r6, r6, r5
   18884:	mov	r8, r1
   18888:	mov	r9, r2
   1888c:	bl	10e64 <calloc@plt-0x20>
   18890:	asrs	r6, r6, #2
   18894:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18898:	mov	r4, #0
   1889c:	add	r4, r4, #1
   188a0:	ldr	r3, [r5], #4
   188a4:	mov	r2, r9
   188a8:	mov	r1, r8
   188ac:	mov	r0, r7
   188b0:	blx	r3
   188b4:	cmp	r6, r4
   188b8:	bne	1889c <__assert_fail@plt+0x7718>
   188bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188c0:	muleq	r1, r4, r6
   188c4:	andeq	r1, r1, ip, lsl #13
   188c8:	bx	lr
   188cc:	ldr	r3, [pc, #12]	; 188e0 <__assert_fail@plt+0x775c>
   188d0:	mov	r1, #0
   188d4:	add	r3, pc, r3
   188d8:	ldr	r2, [r3]
   188dc:	b	110a0 <__cxa_atexit@plt>
   188e0:	andeq	r1, r1, ip, lsr r8
   188e4:	mov	r2, r1
   188e8:	mov	r1, r0
   188ec:	mov	r0, #3
   188f0:	b	11154 <__xstat64@plt>

Disassembly of section .fini:

000188f4 <.fini>:
   188f4:	push	{r3, lr}
   188f8:	pop	{r3, pc}
