
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c50 <.init>:
   10c50:	push	{r3, lr}
   10c54:	bl	115b8 <__assert_fail@plt+0x6e4>
   10c58:	pop	{r3, pc}

Disassembly of section .plt:

00010c5c <calloc@plt-0x14>:
   10c5c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c60:	ldr	lr, [pc, #4]	; 10c6c <calloc@plt-0x4>
   10c64:	add	lr, pc, lr
   10c68:	ldr	pc, [lr, #8]!
   10c6c:	muleq	r1, r4, r3

00010c70 <calloc@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #916]!	; 0x394

00010c7c <fputs_unlocked@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #908]!	; 0x38c

00010c88 <raise@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #900]!	; 0x384

00010c94 <strcmp@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #892]!	; 0x37c

00010ca0 <posix_fadvise64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #884]!	; 0x374

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #876]!	; 0x36c

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #868]!	; 0x364

00010cc4 <_exit@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #860]!	; 0x35c

00010cd0 <memcpy@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #852]!	; 0x354

00010cdc <mbsinit@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #844]!	; 0x34c

00010ce8 <memcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #836]!	; 0x344

00010cf4 <fputc_unlocked@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #828]!	; 0x33c

00010d00 <getc_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #820]!	; 0x334

00010d0c <dcgettext@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #812]!	; 0x32c

00010d18 <dup2@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #804]!	; 0x324

00010d24 <realloc@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #796]!	; 0x31c

00010d30 <textdomain@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #788]!	; 0x314

00010d3c <iswprint@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #780]!	; 0x30c

00010d48 <lseek64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #772]!	; 0x304

00010d54 <__ctype_get_mb_cur_max@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d60 <__fpending@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #756]!	; 0x2f4

00010d6c <ferror_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #748]!	; 0x2ec

00010d78 <mbrtowc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #740]!	; 0x2e4

00010d84 <error@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d90 <open64@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #724]!	; 0x2d4

00010d9c <puts@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #716]!	; 0x2cc

00010da8 <malloc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #708]!	; 0x2c4

00010db4 <__libc_start_main@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #700]!	; 0x2bc

00010dc0 <__freading@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dcc <__gmon_start__@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #684]!	; 0x2ac

00010dd8 <freopen64@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #676]!	; 0x2a4

00010de4 <getopt_long@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #668]!	; 0x29c

00010df0 <__ctype_b_loc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #660]!	; 0x294

00010dfc <exit@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #652]!	; 0x28c

00010e08 <strlen@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #644]!	; 0x284

00010e14 <__errno_location@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #636]!	; 0x27c

00010e20 <__cxa_atexit@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #628]!	; 0x274

00010e2c <memset@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #620]!	; 0x26c

00010e38 <__printf_chk@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #612]!	; 0x264

00010e44 <fileno@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #604]!	; 0x25c

00010e50 <__fprintf_chk@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #596]!	; 0x254

00010e5c <fclose@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #588]!	; 0x24c

00010e68 <fseeko64@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #580]!	; 0x244

00010e74 <setlocale@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #572]!	; 0x23c

00010e80 <strrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #564]!	; 0x234

00010e8c <nl_langinfo@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #556]!	; 0x22c

00010e98 <bindtextdomain@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #548]!	; 0x224

00010ea4 <fputs@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #540]!	; 0x21c

00010eb0 <strncmp@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #532]!	; 0x214

00010ebc <abort@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #524]!	; 0x20c

00010ec8 <close@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #516]!	; 0x204

00010ed4 <__assert_fail@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #508]!	; 0x1fc

Disassembly of section .text:

00010ee0 <.text>:
   10ee0:	push	{r7, fp, lr}
   10ee4:	mov	r5, r0
   10ee8:	sub	sp, sp, #52	; 0x34
   10eec:	ldr	r0, [r1]
   10ef0:	mov	r4, r1
   10ef4:	bl	12100 <__assert_fail@plt+0x122c>
   10ef8:	ldr	r1, [pc, #1536]	; 11500 <__assert_fail@plt+0x62c>
   10efc:	mov	r0, #6
   10f00:	bl	10e74 <setlocale@plt>
   10f04:	ldr	r1, [pc, #1528]	; 11504 <__assert_fail@plt+0x630>
   10f08:	ldr	r0, [pc, #1528]	; 11508 <__assert_fail@plt+0x634>
   10f0c:	bl	10e98 <bindtextdomain@plt>
   10f10:	ldr	r0, [pc, #1520]	; 11508 <__assert_fail@plt+0x634>
   10f14:	bl	10d30 <textdomain@plt>
   10f18:	ldr	r0, [pc, #1516]	; 1150c <__assert_fail@plt+0x638>
   10f1c:	bl	14b5c <__assert_fail@plt+0x3c88>
   10f20:	ldr	r3, [pc, #1512]	; 11510 <__assert_fail@plt+0x63c>
   10f24:	mov	r7, #1
   10f28:	str	r3, [sp, #12]
   10f2c:	ldr	r3, [pc, #1504]	; 11514 <__assert_fail@plt+0x640>
   10f30:	mov	r6, #0
   10f34:	str	r3, [sp, #8]
   10f38:	ldr	r3, [pc, #1496]	; 11518 <__assert_fail@plt+0x644>
   10f3c:	str	r6, [sp, #16]
   10f40:	str	r7, [sp, #4]
   10f44:	ldr	r8, [pc, #1488]	; 1151c <__assert_fail@plt+0x648>
   10f48:	ldr	r3, [r3]
   10f4c:	ldr	r2, [pc, #1484]	; 11520 <__assert_fail@plt+0x64c>
   10f50:	str	r3, [sp]
   10f54:	mov	r1, r4
   10f58:	ldr	r3, [pc, #1476]	; 11524 <__assert_fail@plt+0x650>
   10f5c:	mov	r0, r5
   10f60:	bl	12038 <__assert_fail@plt+0x1164>
   10f64:	ldr	r3, [r8]
   10f68:	sub	r2, r5, r3
   10f6c:	cmp	r2, r7
   10f70:	ble	10fb4 <__assert_fail@plt+0xe0>
   10f74:	mov	r2, #5
   10f78:	ldr	r1, [pc, #1448]	; 11528 <__assert_fail@plt+0x654>
   10f7c:	mov	r0, r6
   10f80:	bl	10d0c <dcgettext@plt>
   10f84:	ldr	r3, [r8]
   10f88:	add	r3, r3, r7
   10f8c:	mov	r5, r0
   10f90:	ldr	r0, [r4, r3, lsl #2]
   10f94:	bl	13730 <__assert_fail@plt+0x285c>
   10f98:	mov	r2, r5
   10f9c:	mov	r1, r6
   10fa0:	mov	r3, r0
   10fa4:	mov	r0, r6
   10fa8:	bl	10d84 <error@plt>
   10fac:	mov	r0, r7
   10fb0:	bl	11898 <__assert_fail@plt+0x9c4>
   10fb4:	cmp	r5, r3
   10fb8:	ldr	r1, [pc, #1388]	; 1152c <__assert_fail@plt+0x658>
   10fbc:	ldrne	r6, [r4, r3, lsl #2]
   10fc0:	ldreq	r6, [pc, #1380]	; 1152c <__assert_fail@plt+0x658>
   10fc4:	mov	r0, r6
   10fc8:	bl	10c94 <strcmp@plt>
   10fcc:	str	r0, [sp, #28]
   10fd0:	mov	r0, #28
   10fd4:	bl	142a4 <__assert_fail@plt+0x33d0>
   10fd8:	ldr	r3, [sp, #28]
   10fdc:	cmp	r3, #0
   10fe0:	str	r0, [sp, #24]
   10fe4:	beq	11020 <__assert_fail@plt+0x14c>
   10fe8:	ldr	r3, [pc, #1344]	; 11530 <__assert_fail@plt+0x65c>
   10fec:	ldr	r1, [pc, #1344]	; 11534 <__assert_fail@plt+0x660>
   10ff0:	mov	r0, r6
   10ff4:	ldr	r2, [r3]
   10ff8:	bl	11dac <__assert_fail@plt+0xed8>
   10ffc:	subs	r5, r0, #0
   11000:	bne	11020 <__assert_fail@plt+0x14c>
   11004:	bl	10e14 <__errno_location@plt>
   11008:	ldr	r4, [r0]
   1100c:	mov	r2, r6
   11010:	mov	r1, #3
   11014:	mov	r0, r5
   11018:	bl	135f0 <__assert_fail@plt+0x271c>
   1101c:	b	1146c <__assert_fail@plt+0x598>
   11020:	ldr	r3, [pc, #1288]	; 11530 <__assert_fail@plt+0x65c>
   11024:	mov	r1, #2
   11028:	mov	r9, #0
   1102c:	ldr	r0, [r3]
   11030:	bl	11be8 <__assert_fail@plt+0xd14>
   11034:	add	r0, sp, #40	; 0x28
   11038:	bl	1373c <__assert_fail@plt+0x2868>
   1103c:	mov	r8, r9
   11040:	ldr	r0, [pc, #1256]	; 11530 <__assert_fail@plt+0x65c>
   11044:	add	r3, sp, #40	; 0x28
   11048:	mov	r2, #3
   1104c:	ldr	r1, [pc, #1252]	; 11538 <__assert_fail@plt+0x664>
   11050:	ldr	r0, [r0]
   11054:	bl	1374c <__assert_fail@plt+0x2878>
   11058:	cmn	r0, #1
   1105c:	beq	11324 <__assert_fail@plt+0x450>
   11060:	cmp	r0, #0
   11064:	bne	11084 <__assert_fail@plt+0x1b0>
   11068:	ldr	r3, [pc, #1228]	; 1153c <__assert_fail@plt+0x668>
   1106c:	ldr	r2, [pc, #1228]	; 11540 <__assert_fail@plt+0x66c>
   11070:	ldr	r1, [pc, #1228]	; 11544 <__assert_fail@plt+0x670>
   11074:	ldr	r0, [pc, #1228]	; 11548 <__assert_fail@plt+0x674>
   11078:	bl	10ed4 <__assert_fail@plt>
   1107c:	mov	r8, r4
   11080:	b	11040 <__assert_fail@plt+0x16c>
   11084:	ldr	r3, [sp, #24]
   11088:	ldr	r7, [sp, #44]	; 0x2c
   1108c:	ldr	r4, [r3, #8]
   11090:	cmp	r4, #0
   11094:	movne	sl, r3
   11098:	movne	r5, r4
   1109c:	bne	112fc <__assert_fail@plt+0x428>
   110a0:	mov	r0, #28
   110a4:	bl	142a4 <__assert_fail@plt+0x33d0>
   110a8:	cmp	r7, #0
   110ac:	mov	r4, r0
   110b0:	beq	110c0 <__assert_fail@plt+0x1ec>
   110b4:	mov	r0, r7
   110b8:	bl	1433c <__assert_fail@plt+0x3468>
   110bc:	str	r0, [r4]
   110c0:	ldr	r3, [sp, #24]
   110c4:	str	r4, [r3, #8]
   110c8:	cmp	r8, #0
   110cc:	beq	1107c <__assert_fail@plt+0x1a8>
   110d0:	ldr	r1, [r4]
   110d4:	ldr	r0, [r8]
   110d8:	bl	10c94 <strcmp@plt>
   110dc:	cmp	r0, #0
   110e0:	beq	1103c <__assert_fail@plt+0x168>
   110e4:	ldr	r3, [r4, #16]
   110e8:	mov	r0, #8
   110ec:	add	r3, r3, #1
   110f0:	str	r3, [r4, #16]
   110f4:	bl	13ec4 <__assert_fail@plt+0x2ff0>
   110f8:	ldr	r3, [r8, #24]
   110fc:	str	r4, [r0]
   11100:	str	r3, [r0, #4]
   11104:	str	r0, [r8, #24]
   11108:	b	1103c <__assert_fail@plt+0x168>
   1110c:	mov	r0, r7
   11110:	bl	10c94 <strcmp@plt>
   11114:	subs	r3, r0, #0
   11118:	beq	110c8 <__assert_fail@plt+0x1f4>
   1111c:	ldmib	r4, {r1, r2}
   11120:	movlt	r2, r1
   11124:	cmp	r2, #0
   11128:	bne	112e8 <__assert_fail@plt+0x414>
   1112c:	mov	r0, #28
   11130:	str	r3, [sp, #32]
   11134:	bl	142a4 <__assert_fail@plt+0x33d0>
   11138:	mov	fp, r0
   1113c:	mov	r0, r7
   11140:	bl	1433c <__assert_fail@plt+0x3468>
   11144:	ldr	r3, [sp, #32]
   11148:	cmp	r3, #0
   1114c:	str	r0, [fp]
   11150:	ldr	r1, [r5]
   11154:	strlt	fp, [r4, #4]
   11158:	strge	fp, [r4, #8]
   1115c:	cmp	r1, #0
   11160:	beq	11174 <__assert_fail@plt+0x2a0>
   11164:	mov	r0, r7
   11168:	bl	10c94 <strcmp@plt>
   1116c:	cmp	r0, #0
   11170:	bne	11188 <__assert_fail@plt+0x2b4>
   11174:	ldr	r3, [pc, #976]	; 1154c <__assert_fail@plt+0x678>
   11178:	mov	r2, #163	; 0xa3
   1117c:	ldr	r1, [pc, #960]	; 11544 <__assert_fail@plt+0x670>
   11180:	ldr	r0, [pc, #968]	; 11550 <__assert_fail@plt+0x67c>
   11184:	b	11078 <__assert_fail@plt+0x1a4>
   11188:	ldr	r2, [r5, #8]
   1118c:	ldr	r3, [r5, #4]
   11190:	movge	r3, r2
   11194:	mvnlt	r2, #0
   11198:	movge	r2, #1
   1119c:	mov	r4, r3
   111a0:	cmp	r4, fp
   111a4:	bne	111cc <__assert_fail@plt+0x2f8>
   111a8:	ldrsb	r1, [r5, #12]
   111ac:	cmp	r1, #0
   111b0:	beq	111c0 <__assert_fail@plt+0x2ec>
   111b4:	rsb	ip, r2, #0
   111b8:	cmp	r1, ip
   111bc:	bne	11230 <__assert_fail@plt+0x35c>
   111c0:	add	r2, r1, r2
   111c4:	strb	r2, [r5, #12]
   111c8:	b	110c8 <__assert_fail@plt+0x1f4>
   111cc:	cmp	r4, #0
   111d0:	str	r2, [sp, #36]	; 0x24
   111d4:	str	r3, [sp, #32]
   111d8:	beq	11200 <__assert_fail@plt+0x32c>
   111dc:	ldr	r1, [r4]
   111e0:	cmp	r1, #0
   111e4:	beq	11200 <__assert_fail@plt+0x32c>
   111e8:	mov	r0, r7
   111ec:	bl	10c94 <strcmp@plt>
   111f0:	ldr	r3, [sp, #32]
   111f4:	ldr	r2, [sp, #36]	; 0x24
   111f8:	cmp	r0, #0
   111fc:	bne	11214 <__assert_fail@plt+0x340>
   11200:	ldr	r3, [pc, #836]	; 1154c <__assert_fail@plt+0x678>
   11204:	mov	r2, #177	; 0xb1
   11208:	ldr	r1, [pc, #820]	; 11544 <__assert_fail@plt+0x670>
   1120c:	ldr	r0, [pc, #832]	; 11554 <__assert_fail@plt+0x680>
   11210:	b	11078 <__assert_fail@plt+0x1a4>
   11214:	mvnlt	r1, #0
   11218:	movge	r1, #1
   1121c:	strblt	r1, [r4, #12]
   11220:	strbge	r1, [r4, #12]
   11224:	ldrlt	r4, [r4, #4]
   11228:	ldrge	r4, [r4, #8]
   1122c:	b	111a0 <__assert_fail@plt+0x2cc>
   11230:	ldrsb	r1, [r3, #12]
   11234:	cmp	r1, r2
   11238:	bne	11278 <__assert_fail@plt+0x3a4>
   1123c:	cmn	r2, #1
   11240:	mov	r1, r3
   11244:	ldreq	r2, [r3, #8]
   11248:	ldrne	r2, [r3, #4]
   1124c:	streq	r2, [r5, #4]
   11250:	strne	r2, [r5, #8]
   11254:	streq	r5, [r3, #8]
   11258:	strne	r5, [r3, #4]
   1125c:	strb	r9, [r3, #12]
   11260:	strb	r9, [r5, #12]
   11264:	ldr	r3, [sl, #8]
   11268:	cmp	r5, r3
   1126c:	streq	r1, [sl, #8]
   11270:	strne	r1, [sl, #4]
   11274:	b	110c8 <__assert_fail@plt+0x1f4>
   11278:	cmp	r2, #0
   1127c:	ldmib	r3, {r0, r1}
   11280:	bge	112c8 <__assert_fail@plt+0x3f4>
   11284:	ldr	r0, [r1, #4]
   11288:	str	r0, [r3, #8]
   1128c:	ldr	r0, [r1, #8]
   11290:	str	r3, [r1, #4]
   11294:	str	r0, [r5, #4]
   11298:	str	r5, [r1, #8]
   1129c:	strb	r9, [r5, #12]
   112a0:	strb	r9, [r3, #12]
   112a4:	ldrsb	r0, [r1, #12]
   112a8:	cmp	r0, r2
   112ac:	rsbeq	r2, r2, #0
   112b0:	strbeq	r2, [r5, #12]
   112b4:	beq	112c0 <__assert_fail@plt+0x3ec>
   112b8:	cmp	ip, r0
   112bc:	strbeq	r2, [r3, #12]
   112c0:	strb	r9, [r1, #12]
   112c4:	b	11264 <__assert_fail@plt+0x390>
   112c8:	ldr	r1, [r0, #8]
   112cc:	str	r1, [r3, #4]
   112d0:	ldr	r1, [r0, #4]
   112d4:	str	r3, [r0, #8]
   112d8:	str	r1, [r5, #8]
   112dc:	str	r5, [r0, #4]
   112e0:	mov	r1, r0
   112e4:	b	1129c <__assert_fail@plt+0x3c8>
   112e8:	ldrsb	r3, [r2, #12]
   112ec:	cmp	r3, #0
   112f0:	movne	sl, r4
   112f4:	movne	r5, r2
   112f8:	mov	r4, r2
   112fc:	cmp	r7, #0
   11300:	beq	11310 <__assert_fail@plt+0x43c>
   11304:	ldr	r1, [r4]
   11308:	cmp	r1, #0
   1130c:	bne	1110c <__assert_fail@plt+0x238>
   11310:	ldr	r3, [pc, #564]	; 1154c <__assert_fail@plt+0x678>
   11314:	mov	r2, #140	; 0x8c
   11318:	ldr	r1, [pc, #548]	; 11544 <__assert_fail@plt+0x670>
   1131c:	ldr	r0, [pc, #564]	; 11558 <__assert_fail@plt+0x684>
   11320:	b	11078 <__assert_fail@plt+0x1a4>
   11324:	cmp	r8, #0
   11328:	beq	11364 <__assert_fail@plt+0x490>
   1132c:	mov	r2, #5
   11330:	ldr	r1, [pc, #548]	; 1155c <__assert_fail@plt+0x688>
   11334:	mov	r0, #0
   11338:	bl	10d0c <dcgettext@plt>
   1133c:	mov	r2, r6
   11340:	mov	r1, #3
   11344:	mov	r4, r0
   11348:	mov	r0, #0
   1134c:	bl	135f0 <__assert_fail@plt+0x271c>
   11350:	mov	r2, r4
   11354:	mov	r1, #0
   11358:	mov	r3, r0
   1135c:	mov	r0, #1
   11360:	bl	10d84 <error@plt>
   11364:	ldr	r3, [sp, #24]
   11368:	ldr	r7, [r3, #8]
   1136c:	cmp	r7, #0
   11370:	beq	11380 <__assert_fail@plt+0x4ac>
   11374:	ldr	r1, [pc, #484]	; 11560 <__assert_fail@plt+0x68c>
   11378:	mov	r0, r7
   1137c:	bl	116c0 <__assert_fail@plt+0x7ec>
   11380:	ldr	sl, [pc, #476]	; 11564 <__assert_fail@plt+0x690>
   11384:	mov	r9, #1
   11388:	mov	r4, sl
   1138c:	ldr	fp, [pc, #468]	; 11568 <__assert_fail@plt+0x694>
   11390:	b	11428 <__assert_fail@plt+0x554>
   11394:	cmp	r7, #0
   11398:	beq	113a8 <__assert_fail@plt+0x4d4>
   1139c:	mov	r1, fp
   113a0:	mov	r0, r7
   113a4:	bl	116c0 <__assert_fail@plt+0x7ec>
   113a8:	mov	r2, #1
   113ac:	mov	r1, #0
   113b0:	ldr	r5, [r4, #4]
   113b4:	cmp	r5, #0
   113b8:	bne	1147c <__assert_fail@plt+0x5a8>
   113bc:	ldr	r3, [r4]
   113c0:	cmp	r3, #0
   113c4:	beq	11428 <__assert_fail@plt+0x554>
   113c8:	mov	r2, #5
   113cc:	ldr	r1, [pc, #408]	; 1156c <__assert_fail@plt+0x698>
   113d0:	mov	r0, r5
   113d4:	bl	10d0c <dcgettext@plt>
   113d8:	mov	r2, r6
   113dc:	mov	r1, #3
   113e0:	mov	r9, r5
   113e4:	mov	r8, r0
   113e8:	mov	r0, r5
   113ec:	bl	135f0 <__assert_fail@plt+0x271c>
   113f0:	mov	r2, r8
   113f4:	mov	r1, r5
   113f8:	ldr	r8, [pc, #368]	; 11570 <__assert_fail@plt+0x69c>
   113fc:	mov	r3, r0
   11400:	mov	r0, r5
   11404:	bl	10d84 <error@plt>
   11408:	cmp	r7, #0
   1140c:	beq	1141c <__assert_fail@plt+0x548>
   11410:	mov	r1, r8
   11414:	mov	r0, r7
   11418:	bl	116c0 <__assert_fail@plt+0x7ec>
   1141c:	ldr	r3, [r4, #12]
   11420:	cmp	r3, #0
   11424:	bne	11408 <__assert_fail@plt+0x534>
   11428:	ldr	r5, [sl]
   1142c:	cmp	r5, #0
   11430:	bne	11394 <__assert_fail@plt+0x4c0>
   11434:	ldr	r3, [pc, #244]	; 11530 <__assert_fail@plt+0x65c>
   11438:	ldr	r0, [r3]
   1143c:	bl	11c18 <__assert_fail@plt+0xd44>
   11440:	cmp	r0, #0
   11444:	beq	114f8 <__assert_fail@plt+0x624>
   11448:	bl	10e14 <__errno_location@plt>
   1144c:	ldr	r3, [sp, #28]
   11450:	cmp	r3, #0
   11454:	ldr	r4, [r0]
   11458:	bne	1100c <__assert_fail@plt+0x138>
   1145c:	mov	r2, #5
   11460:	ldr	r1, [pc, #268]	; 11574 <__assert_fail@plt+0x6a0>
   11464:	mov	r0, r3
   11468:	bl	10d0c <dcgettext@plt>
   1146c:	mov	r3, r0
   11470:	ldr	r2, [pc, #256]	; 11578 <__assert_fail@plt+0x6a4>
   11474:	mov	r1, r4
   11478:	b	1135c <__assert_fail@plt+0x488>
   1147c:	ldr	r0, [r5]
   11480:	str	r1, [sp, #32]
   11484:	str	r2, [sp, #24]
   11488:	ldr	r8, [r5, #24]
   1148c:	bl	10d9c <puts@plt>
   11490:	ldr	r1, [sp, #32]
   11494:	ldr	r3, [r4]
   11498:	ldr	lr, [r4, #4]
   1149c:	ldr	ip, [r4, #8]
   114a0:	ldr	r2, [sp, #24]
   114a4:	mov	r5, r1
   114a8:	sub	r3, r3, #1
   114ac:	strb	r2, [lr, #13]
   114b0:	str	r3, [r4]
   114b4:	cmp	r8, #0
   114b8:	bne	114d0 <__assert_fail@plt+0x5fc>
   114bc:	ldr	r3, [lr, #20]
   114c0:	cmp	r5, #0
   114c4:	strne	ip, [r4, #8]
   114c8:	str	r3, [r4, #4]
   114cc:	b	113b0 <__assert_fail@plt+0x4dc>
   114d0:	ldr	r3, [r8]
   114d4:	ldr	r8, [r8, #4]
   114d8:	ldr	r0, [r3, #16]
   114dc:	sub	r0, r0, #1
   114e0:	cmp	r0, #0
   114e4:	str	r0, [r3, #16]
   114e8:	moveq	r5, r2
   114ec:	streq	r3, [ip, #20]
   114f0:	moveq	ip, r3
   114f4:	b	114b4 <__assert_fail@plt+0x5e0>
   114f8:	eor	r0, r9, #1
   114fc:	bl	10dfc <exit@plt>
   11500:	andeq	r4, r1, r6, lsl lr
   11504:	ldrdeq	r4, [r1], -ip
   11508:	andeq	r4, r1, r9, lsr sp
   1150c:	strdeq	r1, [r1], -r8
   11510:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11514:	muleq	r1, r8, r8
   11518:	andeq	r6, r2, r8, ror #1
   1151c:	andeq	r6, r2, r8, lsr r1
   11520:	andeq	r4, r1, sl, asr #23
   11524:	andeq	r4, r1, r5, lsr sp
   11528:	andeq	r4, r1, r2, lsl #28
   1152c:	strdeq	r4, [r1], -r9
   11530:	andeq	r6, r2, r8, asr #2
   11534:	andeq	r4, r1, r2, ror #30
   11538:	andeq	r4, r1, r3, lsl lr
   1153c:			; <UNDEFINED> instruction: 0x00014bb8
   11540:	andeq	r0, r0, sl, asr #3
   11544:	andeq	r4, r1, r7, lsl lr
   11548:	andeq	r4, r1, r3, lsr #28
   1154c:			; <UNDEFINED> instruction: 0x00014bbe
   11550:	andeq	r4, r1, pc, lsr lr
   11554:	andeq	r4, r1, sl, ror #28
   11558:	andeq	r4, r1, ip, lsr #28
   1155c:	muleq	r1, r5, lr
   11560:	andeq	r1, r1, r4, lsr #13
   11564:	andeq	r6, r2, r8, asr r1
   11568:	andeq	r1, r1, r0, lsr r7
   1156c:	andeq	r4, r1, r0, asr #29
   11570:	andeq	r1, r1, r0, ror r7
   11574:	ldrdeq	r4, [r1], -fp
   11578:	andeq	r4, r1, r8, ror #30
   1157c:	mov	fp, #0
   11580:	mov	lr, #0
   11584:	pop	{r1}		; (ldr r1, [sp], #4)
   11588:	mov	r2, sp
   1158c:	push	{r2}		; (str r2, [sp, #-4]!)
   11590:	push	{r0}		; (str r0, [sp, #-4]!)
   11594:	ldr	ip, [pc, #16]	; 115ac <__assert_fail@plt+0x6d8>
   11598:	push	{ip}		; (str ip, [sp, #-4]!)
   1159c:	ldr	r0, [pc, #12]	; 115b0 <__assert_fail@plt+0x6dc>
   115a0:	ldr	r3, [pc, #12]	; 115b4 <__assert_fail@plt+0x6e0>
   115a4:	bl	10db4 <__libc_start_main@plt>
   115a8:	bl	10ebc <abort@plt>
   115ac:	andeq	r4, r1, r8, asr fp
   115b0:	andeq	r0, r1, r0, ror #29
   115b4:	strdeq	r4, [r1], -r8
   115b8:	ldr	r3, [pc, #20]	; 115d4 <__assert_fail@plt+0x700>
   115bc:	ldr	r2, [pc, #20]	; 115d8 <__assert_fail@plt+0x704>
   115c0:	add	r3, pc, r3
   115c4:	ldr	r2, [r3, r2]
   115c8:	cmp	r2, #0
   115cc:	bxeq	lr
   115d0:	b	10dcc <__gmon_start__@plt>
   115d4:	andeq	r4, r1, r8, lsr sl
   115d8:	ldrdeq	r0, [r0], -ip
   115dc:	ldr	r3, [pc, #28]	; 11600 <__assert_fail@plt+0x72c>
   115e0:	ldr	r0, [pc, #28]	; 11604 <__assert_fail@plt+0x730>
   115e4:	sub	r3, r3, r0
   115e8:	cmp	r3, #6
   115ec:	bxls	lr
   115f0:	ldr	r3, [pc, #16]	; 11608 <__assert_fail@plt+0x734>
   115f4:	cmp	r3, #0
   115f8:	bxeq	lr
   115fc:	bx	r3
   11600:	andeq	r6, r2, r3, lsr r1
   11604:	andeq	r6, r2, r0, lsr r1
   11608:	andeq	r0, r0, r0
   1160c:	ldr	r1, [pc, #36]	; 11638 <__assert_fail@plt+0x764>
   11610:	ldr	r0, [pc, #36]	; 1163c <__assert_fail@plt+0x768>
   11614:	sub	r1, r1, r0
   11618:	asr	r1, r1, #2
   1161c:	add	r1, r1, r1, lsr #31
   11620:	asrs	r1, r1, #1
   11624:	bxeq	lr
   11628:	ldr	r3, [pc, #16]	; 11640 <__assert_fail@plt+0x76c>
   1162c:	cmp	r3, #0
   11630:	bxeq	lr
   11634:	bx	r3
   11638:	andeq	r6, r2, r0, lsr r1
   1163c:	andeq	r6, r2, r0, lsr r1
   11640:	andeq	r0, r0, r0
   11644:	push	{r4, lr}
   11648:	ldr	r4, [pc, #24]	; 11668 <__assert_fail@plt+0x794>
   1164c:	ldrb	r3, [r4]
   11650:	cmp	r3, #0
   11654:	popne	{r4, pc}
   11658:	bl	115dc <__assert_fail@plt+0x708>
   1165c:	mov	r3, #1
   11660:	strb	r3, [r4]
   11664:	pop	{r4, pc}
   11668:	andeq	r6, r2, r4, asr r1
   1166c:	ldr	r0, [pc, #40]	; 1169c <__assert_fail@plt+0x7c8>
   11670:	ldr	r3, [r0]
   11674:	cmp	r3, #0
   11678:	bne	11680 <__assert_fail@plt+0x7ac>
   1167c:	b	1160c <__assert_fail@plt+0x738>
   11680:	ldr	r3, [pc, #24]	; 116a0 <__assert_fail@plt+0x7cc>
   11684:	cmp	r3, #0
   11688:	beq	1167c <__assert_fail@plt+0x7a8>
   1168c:	push	{r4, lr}
   11690:	blx	r3
   11694:	pop	{r4, lr}
   11698:	b	1160c <__assert_fail@plt+0x738>
   1169c:	andeq	r5, r2, r4, lsl pc
   116a0:	andeq	r0, r0, r0
   116a4:	ldr	r2, [pc, #16]	; 116bc <__assert_fail@plt+0x7e8>
   116a8:	mov	r0, #0
   116ac:	ldr	r3, [r2]
   116b0:	add	r3, r3, #1
   116b4:	str	r3, [r2]
   116b8:	bx	lr
   116bc:	andeq	r6, r2, r8, asr r1
   116c0:	push	{r4, r5, r6, lr}
   116c4:	mov	r4, r0
   116c8:	mov	r5, r1
   116cc:	ldr	r0, [r4, #4]
   116d0:	cmp	r0, #0
   116d4:	bne	1170c <__assert_fail@plt+0x838>
   116d8:	ldr	r3, [r4, #8]
   116dc:	cmp	r3, #0
   116e0:	beq	116fc <__assert_fail@plt+0x828>
   116e4:	mov	r0, r4
   116e8:	blx	r5
   116ec:	cmp	r0, #0
   116f0:	beq	11720 <__assert_fail@plt+0x84c>
   116f4:	mov	r0, #1
   116f8:	pop	{r4, r5, r6, pc}
   116fc:	mov	r0, r4
   11700:	mov	r3, r5
   11704:	pop	{r4, r5, r6, lr}
   11708:	bx	r3
   1170c:	mov	r1, r5
   11710:	bl	116c0 <__assert_fail@plt+0x7ec>
   11714:	cmp	r0, #0
   11718:	beq	116e4 <__assert_fail@plt+0x810>
   1171c:	b	116f4 <__assert_fail@plt+0x820>
   11720:	ldr	r4, [r4, #8]
   11724:	cmp	r4, #0
   11728:	bne	116cc <__assert_fail@plt+0x7f8>
   1172c:	pop	{r4, r5, r6, pc}
   11730:	ldr	r3, [r0, #16]
   11734:	cmp	r3, #0
   11738:	bne	11764 <__assert_fail@plt+0x890>
   1173c:	ldrb	r3, [r0, #13]
   11740:	cmp	r3, #0
   11744:	bne	11764 <__assert_fail@plt+0x890>
   11748:	ldr	r3, [pc, #28]	; 1176c <__assert_fail@plt+0x898>
   1174c:	ldr	r2, [r3, #4]
   11750:	cmp	r2, #0
   11754:	streq	r0, [r3, #4]
   11758:	ldrne	r2, [r3, #8]
   1175c:	str	r0, [r3, #8]
   11760:	strne	r0, [r2, #20]
   11764:	mov	r0, #0
   11768:	bx	lr
   1176c:	andeq	r6, r2, r8, asr r1
   11770:	ldr	r3, [r0, #16]
   11774:	cmp	r3, #0
   11778:	beq	11888 <__assert_fail@plt+0x9b4>
   1177c:	ldr	r3, [pc, #268]	; 11890 <__assert_fail@plt+0x9bc>
   11780:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11784:	mov	r5, r3
   11788:	ldr	r2, [r3, #12]
   1178c:	cmp	r2, #0
   11790:	streq	r0, [r3, #12]
   11794:	addne	r6, r0, #24
   11798:	moveq	r3, r2
   1179c:	ldrne	r3, [r0, #24]
   117a0:	bne	1185c <__assert_fail@plt+0x988>
   117a4:	mov	r0, r3
   117a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   117ac:	ldr	r9, [r3, #20]
   117b0:	mov	r2, r8
   117b4:	ldr	r3, [r3]
   117b8:	mov	r1, r7
   117bc:	mov	r0, #0
   117c0:	bl	10d84 <error@plt>
   117c4:	ldr	r3, [r5, #12]
   117c8:	cmp	r4, r3
   117cc:	bne	11814 <__assert_fail@plt+0x940>
   117d0:	ldr	r0, [r6]
   117d4:	ldr	r2, [r0]
   117d8:	ldr	r3, [r2, #16]
   117dc:	sub	r3, r3, #1
   117e0:	str	r3, [r2, #16]
   117e4:	ldr	r3, [r0, #4]
   117e8:	str	r3, [r6]
   117ec:	bl	11d10 <__assert_fail@plt+0xe3c>
   117f0:	mov	r2, #0
   117f4:	ldr	r3, [r5, #12]
   117f8:	mov	r1, r2
   117fc:	mov	r0, #1
   11800:	cmp	r3, #0
   11804:	bne	11840 <__assert_fail@plt+0x96c>
   11808:	cmp	r2, #0
   1180c:	strne	r3, [r5, #12]
   11810:	b	11828 <__assert_fail@plt+0x954>
   11814:	str	r7, [r3, #20]
   11818:	str	r9, [r5, #12]
   1181c:	ldr	r3, [r5, #12]
   11820:	cmp	r3, #0
   11824:	bne	117ac <__assert_fail@plt+0x8d8>
   11828:	mov	r3, #1
   1182c:	b	117a4 <__assert_fail@plt+0x8d0>
   11830:	mov	r4, r0
   11834:	ldr	r8, [pc, #88]	; 11894 <__assert_fail@plt+0x9c0>
   11838:	mov	r7, #0
   1183c:	b	1181c <__assert_fail@plt+0x948>
   11840:	ldr	ip, [r3, #20]
   11844:	mov	r2, r0
   11848:	str	r1, [r3, #20]
   1184c:	mov	r3, ip
   11850:	b	11800 <__assert_fail@plt+0x92c>
   11854:	add	r6, r3, #4
   11858:	ldr	r3, [r3, #4]
   1185c:	cmp	r3, #0
   11860:	beq	117a4 <__assert_fail@plt+0x8d0>
   11864:	ldr	r1, [r3]
   11868:	cmp	r2, r1
   1186c:	bne	11854 <__assert_fail@plt+0x980>
   11870:	ldr	r3, [r0, #20]
   11874:	cmp	r3, #0
   11878:	bne	11830 <__assert_fail@plt+0x95c>
   1187c:	str	r2, [r0, #20]
   11880:	str	r0, [r5, #12]
   11884:	b	117a4 <__assert_fail@plt+0x8d0>
   11888:	mov	r0, r3
   1188c:	bx	lr
   11890:	andeq	r6, r2, r8, asr r1
   11894:	andeq	r4, r1, r8, ror #30
   11898:	subs	r5, r0, #0
   1189c:	push	{r7, lr}
   118a0:	sub	sp, sp, #56	; 0x38
   118a4:	ldr	r4, [pc, #476]	; 11a88 <__assert_fail@plt+0xbb4>
   118a8:	beq	118e0 <__assert_fail@plt+0xa0c>
   118ac:	ldr	r3, [pc, #472]	; 11a8c <__assert_fail@plt+0xbb8>
   118b0:	mov	r2, #5
   118b4:	ldr	r1, [pc, #468]	; 11a90 <__assert_fail@plt+0xbbc>
   118b8:	mov	r0, #0
   118bc:	ldr	r6, [r3]
   118c0:	bl	10d0c <dcgettext@plt>
   118c4:	ldr	r3, [r4]
   118c8:	mov	r1, #1
   118cc:	mov	r2, r0
   118d0:	mov	r0, r6
   118d4:	bl	10e50 <__fprintf_chk@plt>
   118d8:	mov	r0, r5
   118dc:	bl	10dfc <exit@plt>
   118e0:	mov	r2, #5
   118e4:	ldr	r1, [pc, #424]	; 11a94 <__assert_fail@plt+0xbc0>
   118e8:	bl	10d0c <dcgettext@plt>
   118ec:	ldr	r2, [r4]
   118f0:	ldr	r4, [pc, #416]	; 11a98 <__assert_fail@plt+0xbc4>
   118f4:	ldr	r8, [pc, #416]	; 11a9c <__assert_fail@plt+0xbc8>
   118f8:	mov	r6, r5
   118fc:	mov	r1, r0
   11900:	mov	r0, #1
   11904:	bl	10e38 <__printf_chk@plt>
   11908:	mov	r2, #5
   1190c:	ldr	r1, [pc, #396]	; 11aa0 <__assert_fail@plt+0xbcc>
   11910:	mov	r0, r5
   11914:	bl	10d0c <dcgettext@plt>
   11918:	ldr	r1, [r4]
   1191c:	bl	10c7c <fputs_unlocked@plt>
   11920:	mov	r2, #5
   11924:	ldr	r1, [pc, #376]	; 11aa4 <__assert_fail@plt+0xbd0>
   11928:	mov	r0, r5
   1192c:	bl	10d0c <dcgettext@plt>
   11930:	ldr	r1, [r4]
   11934:	bl	10c7c <fputs_unlocked@plt>
   11938:	mov	r2, #5
   1193c:	ldr	r1, [pc, #356]	; 11aa8 <__assert_fail@plt+0xbd4>
   11940:	mov	r0, r5
   11944:	bl	10d0c <dcgettext@plt>
   11948:	ldr	r1, [r4]
   1194c:	bl	10c7c <fputs_unlocked@plt>
   11950:	mov	r2, #5
   11954:	ldr	r1, [pc, #336]	; 11aac <__assert_fail@plt+0xbd8>
   11958:	mov	r0, r5
   1195c:	bl	10d0c <dcgettext@plt>
   11960:	ldr	r1, [r4]
   11964:	bl	10c7c <fputs_unlocked@plt>
   11968:	ldr	lr, [pc, #320]	; 11ab0 <__assert_fail@plt+0xbdc>
   1196c:	mov	ip, sp
   11970:	ldm	lr!, {r0, r1, r2, r3}
   11974:	stmia	ip!, {r0, r1, r2, r3}
   11978:	ldm	lr!, {r0, r1, r2, r3}
   1197c:	stmia	ip!, {r0, r1, r2, r3}
   11980:	ldm	lr!, {r0, r1, r2, r3}
   11984:	stmia	ip!, {r0, r1, r2, r3}
   11988:	ldm	lr, {r0, r1}
   1198c:	stm	ip, {r0, r1}
   11990:	ldr	r1, [sp, r6]
   11994:	add	r7, sp, r6
   11998:	cmp	r1, #0
   1199c:	bne	11a40 <__assert_fail@plt+0xb6c>
   119a0:	ldr	r6, [r7, #4]
   119a4:	ldr	r7, [pc, #240]	; 11a9c <__assert_fail@plt+0xbc8>
   119a8:	cmp	r6, #0
   119ac:	mov	r2, #5
   119b0:	ldr	r1, [pc, #252]	; 11ab4 <__assert_fail@plt+0xbe0>
   119b4:	mov	r0, #0
   119b8:	moveq	r6, r7
   119bc:	bl	10d0c <dcgettext@plt>
   119c0:	ldr	r3, [pc, #240]	; 11ab8 <__assert_fail@plt+0xbe4>
   119c4:	ldr	r2, [pc, #240]	; 11abc <__assert_fail@plt+0xbe8>
   119c8:	mov	r1, r0
   119cc:	mov	r0, #1
   119d0:	bl	10e38 <__printf_chk@plt>
   119d4:	mov	r1, #0
   119d8:	mov	r0, #5
   119dc:	bl	10e74 <setlocale@plt>
   119e0:	cmp	r0, #0
   119e4:	bne	11a58 <__assert_fail@plt+0xb84>
   119e8:	mov	r2, #5
   119ec:	ldr	r1, [pc, #204]	; 11ac0 <__assert_fail@plt+0xbec>
   119f0:	mov	r0, #0
   119f4:	bl	10d0c <dcgettext@plt>
   119f8:	ldr	r3, [pc, #156]	; 11a9c <__assert_fail@plt+0xbc8>
   119fc:	ldr	r2, [pc, #180]	; 11ab8 <__assert_fail@plt+0xbe4>
   11a00:	mov	r1, r0
   11a04:	mov	r0, #1
   11a08:	bl	10e38 <__printf_chk@plt>
   11a0c:	mov	r2, #5
   11a10:	ldr	r1, [pc, #172]	; 11ac4 <__assert_fail@plt+0xbf0>
   11a14:	mov	r0, #0
   11a18:	bl	10d0c <dcgettext@plt>
   11a1c:	ldr	r2, [pc, #164]	; 11ac8 <__assert_fail@plt+0xbf4>
   11a20:	cmp	r6, r7
   11a24:	ldr	r3, [pc, #160]	; 11acc <__assert_fail@plt+0xbf8>
   11a28:	moveq	r3, r2
   11a2c:	mov	r2, r6
   11a30:	mov	r1, r0
   11a34:	mov	r0, #1
   11a38:	bl	10e38 <__printf_chk@plt>
   11a3c:	b	118d8 <__assert_fail@plt+0xa04>
   11a40:	mov	r0, r8
   11a44:	bl	10c94 <strcmp@plt>
   11a48:	add	r6, r6, #8
   11a4c:	cmp	r0, #0
   11a50:	bne	11990 <__assert_fail@plt+0xabc>
   11a54:	b	119a0 <__assert_fail@plt+0xacc>
   11a58:	mov	r2, #3
   11a5c:	ldr	r1, [pc, #108]	; 11ad0 <__assert_fail@plt+0xbfc>
   11a60:	bl	10eb0 <strncmp@plt>
   11a64:	cmp	r0, #0
   11a68:	beq	119e8 <__assert_fail@plt+0xb14>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #92]	; 11ad4 <__assert_fail@plt+0xc00>
   11a74:	mov	r0, #0
   11a78:	bl	10d0c <dcgettext@plt>
   11a7c:	ldr	r1, [r4]
   11a80:	bl	10c7c <fputs_unlocked@plt>
   11a84:	b	119e8 <__assert_fail@plt+0xb14>
   11a88:	andeq	r6, r2, r0, ror r1
   11a8c:	andeq	r6, r2, r0, asr #2
   11a90:	ldrdeq	r4, [r1], -r0
   11a94:	strdeq	r4, [r1], -r7
   11a98:	andeq	r6, r2, ip, asr #2
   11a9c:	andeq	r4, r1, sl, asr #23
   11aa0:	andeq	r4, r1, fp, asr ip
   11aa4:	andeq	r4, r1, r5, lsl lr
   11aa8:	muleq	r1, r3, ip
   11aac:	andeq	r4, r1, r0, asr #25
   11ab0:	andeq	r4, r1, r0, lsl #23
   11ab4:	strdeq	r4, [r1], -r6
   11ab8:	andeq	r4, r1, sp, lsl #26
   11abc:	andeq	r4, r1, r5, lsr sp
   11ac0:	andeq	r4, r1, lr, lsl #27
   11ac4:	andeq	r4, r1, r9, lsr #27
   11ac8:	andeq	r4, r1, r6, lsl #30
   11acc:	andeq	r4, r1, r6, lsl lr
   11ad0:	andeq	r4, r1, r3, asr #26
   11ad4:	andeq	r4, r1, r7, asr #26
   11ad8:	ldr	r3, [pc, #4]	; 11ae4 <__assert_fail@plt+0xc10>
   11adc:	str	r0, [r3]
   11ae0:	bx	lr
   11ae4:	andeq	r6, r2, r8, ror #2
   11ae8:	ldr	r3, [pc, #4]	; 11af4 <__assert_fail@plt+0xc20>
   11aec:	strb	r0, [r3, #4]
   11af0:	bx	lr
   11af4:	andeq	r6, r2, r8, ror #2
   11af8:	ldr	r3, [pc, #192]	; 11bc0 <__assert_fail@plt+0xcec>
   11afc:	push	{r0, r1, r4, r5, r6, lr}
   11b00:	ldr	r0, [r3]
   11b04:	bl	1447c <__assert_fail@plt+0x35a8>
   11b08:	cmp	r0, #0
   11b0c:	beq	11ba4 <__assert_fail@plt+0xcd0>
   11b10:	ldr	r3, [pc, #172]	; 11bc4 <__assert_fail@plt+0xcf0>
   11b14:	mov	r4, r3
   11b18:	ldrb	r2, [r3, #4]
   11b1c:	cmp	r2, #0
   11b20:	beq	11b34 <__assert_fail@plt+0xc60>
   11b24:	bl	10e14 <__errno_location@plt>
   11b28:	ldr	r3, [r0]
   11b2c:	cmp	r3, #32
   11b30:	beq	11ba4 <__assert_fail@plt+0xcd0>
   11b34:	mov	r2, #5
   11b38:	ldr	r1, [pc, #136]	; 11bc8 <__assert_fail@plt+0xcf4>
   11b3c:	mov	r0, #0
   11b40:	bl	10d0c <dcgettext@plt>
   11b44:	ldr	r4, [r4]
   11b48:	cmp	r4, #0
   11b4c:	mov	r5, r0
   11b50:	beq	11b88 <__assert_fail@plt+0xcb4>
   11b54:	bl	10e14 <__errno_location@plt>
   11b58:	ldr	r6, [r0]
   11b5c:	mov	r0, r4
   11b60:	bl	135e0 <__assert_fail@plt+0x270c>
   11b64:	str	r5, [sp]
   11b68:	ldr	r2, [pc, #92]	; 11bcc <__assert_fail@plt+0xcf8>
   11b6c:	mov	r1, r6
   11b70:	mov	r3, r0
   11b74:	mov	r0, #0
   11b78:	bl	10d84 <error@plt>
   11b7c:	ldr	r3, [pc, #76]	; 11bd0 <__assert_fail@plt+0xcfc>
   11b80:	ldr	r0, [r3]
   11b84:	bl	10cc4 <_exit@plt>
   11b88:	bl	10e14 <__errno_location@plt>
   11b8c:	mov	r3, r5
   11b90:	ldr	r2, [pc, #60]	; 11bd4 <__assert_fail@plt+0xd00>
   11b94:	ldr	r1, [r0]
   11b98:	mov	r0, r4
   11b9c:	bl	10d84 <error@plt>
   11ba0:	b	11b7c <__assert_fail@plt+0xca8>
   11ba4:	ldr	r3, [pc, #44]	; 11bd8 <__assert_fail@plt+0xd04>
   11ba8:	ldr	r0, [r3]
   11bac:	bl	1447c <__assert_fail@plt+0x35a8>
   11bb0:	cmp	r0, #0
   11bb4:	bne	11b7c <__assert_fail@plt+0xca8>
   11bb8:	add	sp, sp, #8
   11bbc:	pop	{r4, r5, r6, pc}
   11bc0:	andeq	r6, r2, ip, asr #2
   11bc4:	andeq	r6, r2, r8, ror #2
   11bc8:	andeq	r4, r1, r8, asr pc
   11bcc:	andeq	r4, r1, r4, ror #30
   11bd0:	andeq	r6, r2, ip, ror #1
   11bd4:	andeq	r4, r1, r8, ror #30
   11bd8:	andeq	r6, r2, r0, asr #2
   11bdc:	push	{r4, r5}
   11be0:	pop	{r4, r5}
   11be4:	b	10ca0 <posix_fadvise64@plt>
   11be8:	cmp	r0, #0
   11bec:	bxeq	lr
   11bf0:	push	{r0, r1, r2, r3, r4, lr}
   11bf4:	mov	r4, r1
   11bf8:	bl	10e44 <fileno@plt>
   11bfc:	mov	r2, #0
   11c00:	mov	r3, #0
   11c04:	str	r4, [sp, #8]
   11c08:	strd	r2, [sp]
   11c0c:	bl	10ca0 <posix_fadvise64@plt>
   11c10:	add	sp, sp, #16
   11c14:	pop	{r4, pc}
   11c18:	push	{r0, r1, r2, r4, r5, lr}
   11c1c:	mov	r4, r0
   11c20:	bl	10e44 <fileno@plt>
   11c24:	cmp	r0, #0
   11c28:	mov	r0, r4
   11c2c:	bge	11c3c <__assert_fail@plt+0xd68>
   11c30:	add	sp, sp, #12
   11c34:	pop	{r4, r5, lr}
   11c38:	b	10e5c <fclose@plt>
   11c3c:	bl	10dc0 <__freading@plt>
   11c40:	cmp	r0, #0
   11c44:	bne	11c80 <__assert_fail@plt+0xdac>
   11c48:	mov	r0, r4
   11c4c:	bl	11cc0 <__assert_fail@plt+0xdec>
   11c50:	cmp	r0, #0
   11c54:	bne	11cb4 <__assert_fail@plt+0xde0>
   11c58:	mov	r5, #0
   11c5c:	mov	r0, r4
   11c60:	bl	10e5c <fclose@plt>
   11c64:	cmp	r5, #0
   11c68:	beq	11c78 <__assert_fail@plt+0xda4>
   11c6c:	bl	10e14 <__errno_location@plt>
   11c70:	str	r5, [r0]
   11c74:	mvn	r0, #0
   11c78:	add	sp, sp, #12
   11c7c:	pop	{r4, r5, pc}
   11c80:	mov	r0, r4
   11c84:	bl	10e44 <fileno@plt>
   11c88:	mov	r3, #1
   11c8c:	str	r3, [sp]
   11c90:	mov	r2, #0
   11c94:	mov	r3, #0
   11c98:	bl	10d48 <lseek64@plt>
   11c9c:	mvn	r3, #0
   11ca0:	mvn	r2, #0
   11ca4:	cmp	r1, r3
   11ca8:	cmpeq	r0, r2
   11cac:	bne	11c48 <__assert_fail@plt+0xd74>
   11cb0:	b	11c58 <__assert_fail@plt+0xd84>
   11cb4:	bl	10e14 <__errno_location@plt>
   11cb8:	ldr	r5, [r0]
   11cbc:	b	11c5c <__assert_fail@plt+0xd88>
   11cc0:	push	{r0, r1, r4, lr}
   11cc4:	subs	r4, r0, #0
   11cc8:	bne	11cdc <__assert_fail@plt+0xe08>
   11ccc:	mov	r0, r4
   11cd0:	add	sp, sp, #8
   11cd4:	pop	{r4, lr}
   11cd8:	b	10cac <fflush@plt>
   11cdc:	bl	10dc0 <__freading@plt>
   11ce0:	cmp	r0, #0
   11ce4:	beq	11ccc <__assert_fail@plt+0xdf8>
   11ce8:	ldr	r3, [r4]
   11cec:	tst	r3, #256	; 0x100
   11cf0:	beq	11ccc <__assert_fail@plt+0xdf8>
   11cf4:	mov	r3, #1
   11cf8:	str	r3, [sp]
   11cfc:	mov	r2, #0
   11d00:	mov	r3, #0
   11d04:	mov	r0, r4
   11d08:	bl	11eec <__assert_fail@plt+0x1018>
   11d0c:	b	11ccc <__assert_fail@plt+0xdf8>
   11d10:	push	{r0, r1, r2, r4, r5, lr}
   11d14:	mov	r5, r0
   11d18:	bl	10e14 <__errno_location@plt>
   11d1c:	ldr	r3, [r0]
   11d20:	mov	r4, r0
   11d24:	str	r3, [sp]
   11d28:	str	r3, [sp, #4]
   11d2c:	mov	r3, #0
   11d30:	str	r3, [r0]
   11d34:	mov	r0, r5
   11d38:	bl	10cb8 <free@plt>
   11d3c:	ldr	r3, [r4]
   11d40:	add	r2, sp, #8
   11d44:	cmp	r3, #0
   11d48:	moveq	r3, #4
   11d4c:	movne	r3, #0
   11d50:	add	r3, r2, r3
   11d54:	ldr	r3, [r3, #-8]
   11d58:	str	r3, [r4]
   11d5c:	add	sp, sp, #12
   11d60:	pop	{r4, r5, pc}
   11d64:	push	{r4, lr}
   11d68:	mov	r1, #0
   11d6c:	mov	r4, r0
   11d70:	ldr	r0, [pc, #48]	; 11da8 <__assert_fail@plt+0xed4>
   11d74:	bl	10d90 <open64@plt>
   11d78:	cmp	r4, r0
   11d7c:	beq	11da0 <__assert_fail@plt+0xecc>
   11d80:	cmp	r0, #0
   11d84:	blt	11d98 <__assert_fail@plt+0xec4>
   11d88:	bl	10ec8 <close@plt>
   11d8c:	bl	10e14 <__errno_location@plt>
   11d90:	mov	r3, #9
   11d94:	str	r3, [r0]
   11d98:	mov	r0, #0
   11d9c:	pop	{r4, pc}
   11da0:	mov	r0, #1
   11da4:	pop	{r4, pc}
   11da8:	andeq	r4, r1, fp, ror #30
   11dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11db0:	mov	r9, r0
   11db4:	mov	r0, r2
   11db8:	mov	sl, r1
   11dbc:	mov	r8, r2
   11dc0:	bl	10e44 <fileno@plt>
   11dc4:	cmp	r0, #1
   11dc8:	beq	11e84 <__assert_fail@plt+0xfb0>
   11dcc:	cmp	r0, #2
   11dd0:	beq	11e7c <__assert_fail@plt+0xfa8>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11e90 <__assert_fail@plt+0xfbc>
   11ddc:	mov	r1, #2
   11de0:	mov	r0, r1
   11de4:	bl	10d18 <dup2@plt>
   11de8:	subs	r4, r0, #2
   11dec:	movne	r4, #1
   11df0:	mov	r1, #1
   11df4:	mov	r0, r1
   11df8:	bl	10d18 <dup2@plt>
   11dfc:	subs	r7, r0, #1
   11e00:	movne	r7, #1
   11e04:	mov	r1, #0
   11e08:	mov	r0, r1
   11e0c:	bl	10d18 <dup2@plt>
   11e10:	subs	r6, r0, #0
   11e14:	bne	11ed0 <__assert_fail@plt+0xffc>
   11e18:	cmp	r7, #0
   11e1c:	beq	11eb4 <__assert_fail@plt+0xfe0>
   11e20:	mov	r0, #1
   11e24:	bl	11d64 <__assert_fail@plt+0xe90>
   11e28:	subs	r5, r0, #0
   11e2c:	bne	11eb4 <__assert_fail@plt+0xfe0>
   11e30:	bl	10e14 <__errno_location@plt>
   11e34:	cmp	r4, #0
   11e38:	mov	r8, r0
   11e3c:	ldr	r9, [r0]
   11e40:	beq	11e4c <__assert_fail@plt+0xf78>
   11e44:	mov	r0, #2
   11e48:	bl	10ec8 <close@plt>
   11e4c:	cmp	r7, #0
   11e50:	beq	11e5c <__assert_fail@plt+0xf88>
   11e54:	mov	r0, #1
   11e58:	bl	10ec8 <close@plt>
   11e5c:	cmp	r6, #0
   11e60:	beq	11e6c <__assert_fail@plt+0xf98>
   11e64:	mov	r0, #0
   11e68:	bl	10ec8 <close@plt>
   11e6c:	cmp	r5, #0
   11e70:	streq	r9, [r8]
   11e74:	mov	r0, r5
   11e78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e7c:	mov	r4, #0
   11e80:	b	11df0 <__assert_fail@plt+0xf1c>
   11e84:	mov	r4, #0
   11e88:	mov	r7, r4
   11e8c:	b	11e04 <__assert_fail@plt+0xf30>
   11e90:	mov	r4, r0
   11e94:	mov	r7, r0
   11e98:	mov	r6, r0
   11e9c:	mov	r2, r8
   11ea0:	mov	r1, sl
   11ea4:	mov	r0, r9
   11ea8:	bl	10dd8 <freopen64@plt>
   11eac:	mov	r5, r0
   11eb0:	b	11e30 <__assert_fail@plt+0xf5c>
   11eb4:	cmp	r4, #0
   11eb8:	beq	11e9c <__assert_fail@plt+0xfc8>
   11ebc:	mov	r0, #2
   11ec0:	bl	11d64 <__assert_fail@plt+0xe90>
   11ec4:	subs	r5, r0, #0
   11ec8:	bne	11e9c <__assert_fail@plt+0xfc8>
   11ecc:	b	11e30 <__assert_fail@plt+0xf5c>
   11ed0:	mov	r0, #0
   11ed4:	bl	11d64 <__assert_fail@plt+0xe90>
   11ed8:	subs	r5, r0, #0
   11edc:	mov	r6, r0
   11ee0:	moveq	r6, #1
   11ee4:	bne	11e18 <__assert_fail@plt+0xf44>
   11ee8:	b	11e30 <__assert_fail@plt+0xf5c>
   11eec:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11ef0:	mov	r4, r0
   11ef4:	ldmib	r0, {ip, lr}
   11ef8:	ldr	r8, [sp, #32]
   11efc:	cmp	lr, ip
   11f00:	bne	11f6c <__assert_fail@plt+0x1098>
   11f04:	ldr	lr, [r0, #20]
   11f08:	ldr	ip, [r0, #16]
   11f0c:	cmp	lr, ip
   11f10:	bne	11f6c <__assert_fail@plt+0x1098>
   11f14:	ldr	r5, [r0, #36]	; 0x24
   11f18:	cmp	r5, #0
   11f1c:	bne	11f6c <__assert_fail@plt+0x1098>
   11f20:	mov	r6, r2
   11f24:	mov	r7, r3
   11f28:	bl	10e44 <fileno@plt>
   11f2c:	mov	r2, r6
   11f30:	mov	r3, r7
   11f34:	str	r8, [sp]
   11f38:	bl	10d48 <lseek64@plt>
   11f3c:	mvn	r3, #0
   11f40:	mvn	r2, #0
   11f44:	cmp	r1, r3
   11f48:	cmpeq	r0, r2
   11f4c:	mvneq	r0, #0
   11f50:	ldrne	r3, [r4]
   11f54:	strdne	r0, [r4, #80]	; 0x50
   11f58:	movne	r0, r5
   11f5c:	bicne	r3, r3, #16
   11f60:	strne	r3, [r4]
   11f64:	add	sp, sp, #8
   11f68:	pop	{r4, r5, r6, r7, r8, pc}
   11f6c:	str	r8, [sp, #32]
   11f70:	mov	r0, r4
   11f74:	add	sp, sp, #8
   11f78:	pop	{r4, r5, r6, r7, r8, lr}
   11f7c:	b	10e68 <fseeko64@plt>
   11f80:	ldr	ip, [pc, #156]	; 12024 <__assert_fail@plt+0x1150>
   11f84:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11f88:	cmp	r0, #2
   11f8c:	mov	r6, #0
   11f90:	ldr	r7, [ip]
   11f94:	mov	r8, ip
   11f98:	str	r6, [ip]
   11f9c:	bne	11fd0 <__assert_fail@plt+0x10fc>
   11fa0:	mov	r5, r3
   11fa4:	mov	r4, r2
   11fa8:	str	r6, [sp]
   11fac:	ldr	r3, [pc, #116]	; 12028 <__assert_fail@plt+0x1154>
   11fb0:	ldr	r2, [pc, #116]	; 1202c <__assert_fail@plt+0x1158>
   11fb4:	bl	10de4 <getopt_long@plt>
   11fb8:	cmn	r0, #1
   11fbc:	beq	11fd0 <__assert_fail@plt+0x10fc>
   11fc0:	cmp	r0, #104	; 0x68
   11fc4:	beq	11fe8 <__assert_fail@plt+0x1114>
   11fc8:	cmp	r0, #118	; 0x76
   11fcc:	beq	11ff8 <__assert_fail@plt+0x1124>
   11fd0:	ldr	r3, [pc, #88]	; 12030 <__assert_fail@plt+0x115c>
   11fd4:	mov	r2, #0
   11fd8:	str	r7, [r8]
   11fdc:	str	r2, [r3]
   11fe0:	add	sp, sp, #16
   11fe4:	pop	{r4, r5, r6, r7, r8, pc}
   11fe8:	mov	r0, r6
   11fec:	ldr	r3, [sp, #44]	; 0x2c
   11ff0:	blx	r3
   11ff4:	b	11fd0 <__assert_fail@plt+0x10fc>
   11ff8:	ldr	r0, [pc, #52]	; 12034 <__assert_fail@plt+0x1160>
   11ffc:	add	r3, sp, #48	; 0x30
   12000:	str	r3, [sp]
   12004:	str	r3, [sp, #12]
   12008:	ldr	r0, [r0]
   1200c:	ldr	r3, [sp, #40]	; 0x28
   12010:	mov	r2, r5
   12014:	mov	r1, r4
   12018:	bl	13db8 <__assert_fail@plt+0x2ee4>
   1201c:	mov	r0, r6
   12020:	bl	10dfc <exit@plt>
   12024:	andeq	r6, r2, r0, asr r1
   12028:	andeq	r4, r1, r8, ror pc
   1202c:	andeq	r4, r1, r8, lsr #31
   12030:	andeq	r6, r2, r8, lsr r1
   12034:	andeq	r6, r2, ip, asr #2
   12038:	push	{r4, r5, r6, r7, r8, r9, lr}
   1203c:	sub	sp, sp, #20
   12040:	mov	r8, r3
   12044:	ldrb	lr, [sp, #52]	; 0x34
   12048:	ldr	r3, [pc, #152]	; 120e8 <__assert_fail@plt+0x1214>
   1204c:	mov	r4, #0
   12050:	ldr	ip, [pc, #148]	; 120ec <__assert_fail@plt+0x1218>
   12054:	cmp	lr, r4
   12058:	mov	r7, r2
   1205c:	mov	r2, #1
   12060:	ldr	r9, [r3]
   12064:	mov	r5, r3
   12068:	str	r2, [r3]
   1206c:	ldr	r2, [pc, #124]	; 120f0 <__assert_fail@plt+0x121c>
   12070:	str	r4, [sp]
   12074:	moveq	r2, ip
   12078:	ldr	r3, [pc, #116]	; 120f4 <__assert_fail@plt+0x1220>
   1207c:	ldr	r6, [sp, #56]	; 0x38
   12080:	bl	10de4 <getopt_long@plt>
   12084:	cmn	r0, #1
   12088:	beq	120b0 <__assert_fail@plt+0x11dc>
   1208c:	cmp	r0, #104	; 0x68
   12090:	beq	120a8 <__assert_fail@plt+0x11d4>
   12094:	cmp	r0, #118	; 0x76
   12098:	beq	120bc <__assert_fail@plt+0x11e8>
   1209c:	ldr	r3, [pc, #84]	; 120f8 <__assert_fail@plt+0x1224>
   120a0:	ldr	r0, [r3]
   120a4:	b	120ac <__assert_fail@plt+0x11d8>
   120a8:	mov	r0, r4
   120ac:	blx	r6
   120b0:	str	r9, [r5]
   120b4:	add	sp, sp, #20
   120b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   120bc:	ldr	r0, [pc, #56]	; 120fc <__assert_fail@plt+0x1228>
   120c0:	add	r3, sp, #60	; 0x3c
   120c4:	str	r3, [sp]
   120c8:	str	r3, [sp, #12]
   120cc:	ldr	r0, [r0]
   120d0:	ldr	r3, [sp, #48]	; 0x30
   120d4:	mov	r2, r8
   120d8:	mov	r1, r7
   120dc:	bl	13db8 <__assert_fail@plt+0x2ee4>
   120e0:	mov	r0, r4
   120e4:	bl	10dfc <exit@plt>
   120e8:	andeq	r6, r2, r0, asr r1
   120ec:	andeq	r4, r1, r8, lsr #31
   120f0:	andeq	r4, r1, r6, lsl lr
   120f4:	andeq	r4, r1, r8, ror pc
   120f8:	andeq	r6, r2, ip, ror #1
   120fc:	andeq	r6, r2, ip, asr #2
   12100:	push	{r4, r5, r6, lr}
   12104:	subs	r5, r0, #0
   12108:	bne	12120 <__assert_fail@plt+0x124c>
   1210c:	ldr	r3, [pc, #124]	; 12190 <__assert_fail@plt+0x12bc>
   12110:	ldr	r0, [pc, #124]	; 12194 <__assert_fail@plt+0x12c0>
   12114:	ldr	r1, [r3]
   12118:	bl	10ea4 <fputs@plt>
   1211c:	bl	10ebc <abort@plt>
   12120:	mov	r1, #47	; 0x2f
   12124:	bl	10e80 <strrchr@plt>
   12128:	cmp	r0, #0
   1212c:	addne	r4, r0, #1
   12130:	moveq	r4, r5
   12134:	sub	r3, r4, r5
   12138:	cmp	r3, #6
   1213c:	ble	1217c <__assert_fail@plt+0x12a8>
   12140:	mov	r2, #7
   12144:	ldr	r1, [pc, #76]	; 12198 <__assert_fail@plt+0x12c4>
   12148:	sub	r0, r4, #7
   1214c:	bl	10eb0 <strncmp@plt>
   12150:	cmp	r0, #0
   12154:	bne	1217c <__assert_fail@plt+0x12a8>
   12158:	mov	r2, #3
   1215c:	ldr	r1, [pc, #56]	; 1219c <__assert_fail@plt+0x12c8>
   12160:	mov	r0, r4
   12164:	bl	10eb0 <strncmp@plt>
   12168:	cmp	r0, #0
   1216c:	movne	r5, r4
   12170:	ldreq	r3, [pc, #40]	; 121a0 <__assert_fail@plt+0x12cc>
   12174:	addeq	r5, r4, #3
   12178:	streq	r5, [r3]
   1217c:	ldr	r3, [pc, #32]	; 121a4 <__assert_fail@plt+0x12d0>
   12180:	str	r5, [r3]
   12184:	ldr	r3, [pc, #28]	; 121a8 <__assert_fail@plt+0x12d4>
   12188:	str	r5, [r3]
   1218c:	pop	{r4, r5, r6, pc}
   12190:	andeq	r6, r2, r0, asr #2
   12194:			; <UNDEFINED> instruction: 0x00014fb7
   12198:	andeq	r4, r1, pc, ror #31
   1219c:	strdeq	r4, [r1], -r7
   121a0:	andeq	r6, r2, r0, lsr r1
   121a4:	andeq	r6, r2, r0, ror r1
   121a8:	andeq	r6, r2, r4, lsr r1
   121ac:	push	{r4, r5, r6, lr}
   121b0:	mov	r2, #48	; 0x30
   121b4:	mov	r5, r1
   121b8:	mov	r1, #0
   121bc:	mov	r4, r0
   121c0:	bl	10e2c <memset@plt>
   121c4:	cmp	r5, #10
   121c8:	bne	121d0 <__assert_fail@plt+0x12fc>
   121cc:	bl	10ebc <abort@plt>
   121d0:	str	r5, [r4]
   121d4:	mov	r0, r4
   121d8:	pop	{r4, r5, r6, pc}
   121dc:	push	{r4, r5, r6, lr}
   121e0:	mov	r4, r0
   121e4:	mov	r5, r1
   121e8:	bl	144ec <__assert_fail@plt+0x3618>
   121ec:	ldrb	r3, [r0]
   121f0:	bic	r3, r3, #32
   121f4:	cmp	r3, #85	; 0x55
   121f8:	bne	12268 <__assert_fail@plt+0x1394>
   121fc:	ldrb	r3, [r0, #1]
   12200:	bic	r3, r3, #32
   12204:	cmp	r3, #84	; 0x54
   12208:	bne	12240 <__assert_fail@plt+0x136c>
   1220c:	ldrb	r3, [r0, #2]
   12210:	bic	r3, r3, #32
   12214:	cmp	r3, #70	; 0x46
   12218:	bne	12240 <__assert_fail@plt+0x136c>
   1221c:	ldrb	r3, [r0, #3]
   12220:	cmp	r3, #45	; 0x2d
   12224:	bne	12240 <__assert_fail@plt+0x136c>
   12228:	ldrb	r3, [r0, #4]
   1222c:	cmp	r3, #56	; 0x38
   12230:	bne	12240 <__assert_fail@plt+0x136c>
   12234:	ldrb	r3, [r0, #5]
   12238:	cmp	r3, #0
   1223c:	beq	12254 <__assert_fail@plt+0x1380>
   12240:	ldr	r1, [pc, #144]	; 122d8 <__assert_fail@plt+0x1404>
   12244:	ldr	r0, [pc, #144]	; 122dc <__assert_fail@plt+0x1408>
   12248:	cmp	r5, #9
   1224c:	movne	r0, r1
   12250:	pop	{r4, r5, r6, pc}
   12254:	ldrb	r3, [r4]
   12258:	ldr	r1, [pc, #128]	; 122e0 <__assert_fail@plt+0x140c>
   1225c:	ldr	r0, [pc, #128]	; 122e4 <__assert_fail@plt+0x1410>
   12260:	cmp	r3, #96	; 0x60
   12264:	b	1224c <__assert_fail@plt+0x1378>
   12268:	cmp	r3, #71	; 0x47
   1226c:	bne	12240 <__assert_fail@plt+0x136c>
   12270:	ldrb	r3, [r0, #1]
   12274:	bic	r3, r3, #32
   12278:	cmp	r3, #66	; 0x42
   1227c:	bne	12240 <__assert_fail@plt+0x136c>
   12280:	ldrb	r3, [r0, #2]
   12284:	cmp	r3, #49	; 0x31
   12288:	bne	12240 <__assert_fail@plt+0x136c>
   1228c:	ldrb	r3, [r0, #3]
   12290:	cmp	r3, #56	; 0x38
   12294:	bne	12240 <__assert_fail@plt+0x136c>
   12298:	ldrb	r3, [r0, #4]
   1229c:	cmp	r3, #48	; 0x30
   122a0:	bne	12240 <__assert_fail@plt+0x136c>
   122a4:	ldrb	r3, [r0, #5]
   122a8:	cmp	r3, #51	; 0x33
   122ac:	bne	12240 <__assert_fail@plt+0x136c>
   122b0:	ldrb	r3, [r0, #6]
   122b4:	cmp	r3, #48	; 0x30
   122b8:	bne	12240 <__assert_fail@plt+0x136c>
   122bc:	ldrb	r3, [r0, #7]
   122c0:	cmp	r3, #0
   122c4:	bne	12240 <__assert_fail@plt+0x136c>
   122c8:	ldrb	r3, [r4]
   122cc:	ldr	r1, [pc, #20]	; 122e8 <__assert_fail@plt+0x1414>
   122d0:	ldr	r0, [pc, #20]	; 122ec <__assert_fail@plt+0x1418>
   122d4:	b	12260 <__assert_fail@plt+0x138c>
   122d8:	andeq	r5, r1, r1, rrx
   122dc:	andeq	r5, r1, pc, asr r0
   122e0:	andeq	r5, r1, r4, asr r0
   122e4:	andeq	r5, r1, r0, asr r0
   122e8:	andeq	r5, r1, ip, asr r0
   122ec:	andeq	r5, r1, r8, asr r0
   122f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f4:	sub	sp, sp, #108	; 0x6c
   122f8:	mov	r8, r0
   122fc:	str	r3, [sp, #36]	; 0x24
   12300:	mov	r5, r1
   12304:	str	r2, [sp, #44]	; 0x2c
   12308:	ldr	sl, [sp, #144]	; 0x90
   1230c:	bl	10d54 <__ctype_get_mb_cur_max@plt>
   12310:	ldr	r3, [sp, #148]	; 0x94
   12314:	mov	r7, #0
   12318:	str	r7, [sp, #48]	; 0x30
   1231c:	lsr	r6, r3, #1
   12320:	and	r6, r6, #1
   12324:	mov	r3, #1
   12328:	str	r3, [sp, #72]	; 0x48
   1232c:	str	r7, [sp, #24]
   12330:	str	r7, [sp, #32]
   12334:	str	r7, [sp, #40]	; 0x28
   12338:	str	r7, [sp, #60]	; 0x3c
   1233c:	str	r0, [sp, #76]	; 0x4c
   12340:	cmp	sl, #10
   12344:	ldrls	pc, [pc, sl, lsl #2]
   12348:	b	12584 <__assert_fail@plt+0x16b0>
   1234c:	andeq	r2, r1, r8, ror r3
   12350:	andeq	r3, r1, ip
   12354:	andeq	r2, r1, r0, asr r5
   12358:	muleq	r1, ip, r5
   1235c:	andeq	r2, r1, ip, lsr #10
   12360:	andeq	r2, r1, r4, lsl #7
   12364:	andeq	r2, r1, ip, ror #31
   12368:	andeq	r2, r1, r8, lsl #11
   1236c:	andeq	r2, r1, ip, ror r4
   12370:	andeq	r2, r1, ip, ror r4
   12374:	andeq	r2, r1, ip, ror r4
   12378:	mov	r6, #0
   1237c:	mov	r4, #0
   12380:	b	123b0 <__assert_fail@plt+0x14dc>
   12384:	cmp	r6, #0
   12388:	bne	125ac <__assert_fail@plt+0x16d8>
   1238c:	cmp	r5, #0
   12390:	movne	r3, #34	; 0x22
   12394:	strbne	r3, [r8]
   12398:	mov	r3, #1
   1239c:	str	r3, [sp, #24]
   123a0:	str	r3, [sp, #32]
   123a4:	mov	r4, #1
   123a8:	ldr	r3, [pc, #3172]	; 13014 <__assert_fail@plt+0x2140>
   123ac:	str	r3, [sp, #40]	; 0x28
   123b0:	mov	r9, r5
   123b4:	mov	r3, #0
   123b8:	str	r7, [sp, #68]	; 0x44
   123bc:	str	r3, [sp, #28]
   123c0:	ldr	r3, [sp, #36]	; 0x24
   123c4:	cmn	r3, #1
   123c8:	bne	12f58 <__assert_fail@plt+0x2084>
   123cc:	ldr	r3, [sp, #44]	; 0x2c
   123d0:	ldr	r2, [sp, #28]
   123d4:	ldrb	r3, [r3, r2]
   123d8:	adds	r3, r3, #0
   123dc:	movne	r3, #1
   123e0:	str	r3, [sp, #52]	; 0x34
   123e4:	ldr	r3, [sp, #52]	; 0x34
   123e8:	cmp	r3, #0
   123ec:	bne	125d4 <__assert_fail@plt+0x1700>
   123f0:	sub	r2, sl, #2
   123f4:	clz	r2, r2
   123f8:	lsr	r2, r2, #5
   123fc:	and	r3, r6, r2
   12400:	cmp	r4, #0
   12404:	movne	r3, #0
   12408:	andeq	r3, r3, #1
   1240c:	cmp	r3, #0
   12410:	bne	1279c <__assert_fail@plt+0x18c8>
   12414:	eor	r3, r6, #1
   12418:	ands	r2, r2, r3
   1241c:	beq	12f90 <__assert_fail@plt+0x20bc>
   12420:	ldr	r3, [sp, #68]	; 0x44
   12424:	cmp	r3, #0
   12428:	beq	12fc8 <__assert_fail@plt+0x20f4>
   1242c:	ldr	r3, [sp, #72]	; 0x48
   12430:	cmp	r3, #0
   12434:	beq	12f6c <__assert_fail@plt+0x2098>
   12438:	ldr	r3, [sp, #160]	; 0xa0
   1243c:	ldr	r2, [sp, #44]	; 0x2c
   12440:	str	r3, [sp, #16]
   12444:	ldr	r3, [sp, #156]	; 0x9c
   12448:	ldr	r1, [sp, #60]	; 0x3c
   1244c:	str	r3, [sp, #12]
   12450:	ldr	r3, [sp, #152]	; 0x98
   12454:	str	r3, [sp, #8]
   12458:	ldr	r3, [sp, #148]	; 0x94
   1245c:	str	r3, [sp, #4]
   12460:	mov	r3, #5
   12464:	str	r3, [sp]
   12468:	ldr	r3, [sp, #36]	; 0x24
   1246c:	mov	r0, r8
   12470:	bl	122f0 <__assert_fail@plt+0x141c>
   12474:	mov	r4, r0
   12478:	b	12fbc <__assert_fail@plt+0x20e8>
   1247c:	cmp	sl, #10
   12480:	beq	124dc <__assert_fail@plt+0x1608>
   12484:	ldr	r4, [pc, #2956]	; 13018 <__assert_fail@plt+0x2144>
   12488:	mov	r2, #5
   1248c:	mov	r1, r4
   12490:	mov	r0, #0
   12494:	bl	10d0c <dcgettext@plt>
   12498:	cmp	r0, r4
   1249c:	str	r0, [sp, #156]	; 0x9c
   124a0:	bne	124b0 <__assert_fail@plt+0x15dc>
   124a4:	mov	r1, sl
   124a8:	bl	121dc <__assert_fail@plt+0x1308>
   124ac:	str	r0, [sp, #156]	; 0x9c
   124b0:	ldr	r4, [pc, #2916]	; 1301c <__assert_fail@plt+0x2148>
   124b4:	mov	r2, #5
   124b8:	mov	r1, r4
   124bc:	mov	r0, #0
   124c0:	bl	10d0c <dcgettext@plt>
   124c4:	cmp	r0, r4
   124c8:	str	r0, [sp, #160]	; 0xa0
   124cc:	bne	124dc <__assert_fail@plt+0x1608>
   124d0:	mov	r1, sl
   124d4:	bl	121dc <__assert_fail@plt+0x1308>
   124d8:	str	r0, [sp, #160]	; 0xa0
   124dc:	cmp	r6, #0
   124e0:	moveq	r4, r6
   124e4:	beq	124fc <__assert_fail@plt+0x1628>
   124e8:	mov	r4, #0
   124ec:	b	1250c <__assert_fail@plt+0x1638>
   124f0:	cmp	r5, r4
   124f4:	strbhi	r3, [r8, r4]
   124f8:	add	r4, r4, #1
   124fc:	ldr	r3, [sp, #156]	; 0x9c
   12500:	ldrb	r3, [r3, r4]
   12504:	cmp	r3, #0
   12508:	bne	124f0 <__assert_fail@plt+0x161c>
   1250c:	ldr	r0, [sp, #160]	; 0xa0
   12510:	bl	10e08 <strlen@plt>
   12514:	ldr	r3, [sp, #160]	; 0xa0
   12518:	str	r3, [sp, #40]	; 0x28
   1251c:	mov	r3, #1
   12520:	str	r3, [sp, #24]
   12524:	str	r0, [sp, #32]
   12528:	b	123b0 <__assert_fail@plt+0x14dc>
   1252c:	mov	r3, #1
   12530:	cmp	r6, #0
   12534:	streq	r3, [sp, #24]
   12538:	beq	12558 <__assert_fail@plt+0x1684>
   1253c:	str	r3, [sp, #32]
   12540:	ldr	r3, [pc, #2772]	; 1301c <__assert_fail@plt+0x2148>
   12544:	mov	r4, #0
   12548:	str	r3, [sp, #40]	; 0x28
   1254c:	b	1257c <__assert_fail@plt+0x16a8>
   12550:	cmp	r6, #0
   12554:	bne	125c4 <__assert_fail@plt+0x16f0>
   12558:	cmp	r5, #0
   1255c:	movne	r3, #39	; 0x27
   12560:	strbne	r3, [r8]
   12564:	mov	r3, #1
   12568:	str	r3, [sp, #32]
   1256c:	mov	r6, #0
   12570:	ldr	r3, [pc, #2724]	; 1301c <__assert_fail@plt+0x2148>
   12574:	mov	r4, #1
   12578:	str	r3, [sp, #40]	; 0x28
   1257c:	mov	sl, #2
   12580:	b	123b0 <__assert_fail@plt+0x14dc>
   12584:	bl	10ebc <abort@plt>
   12588:	mov	r6, #0
   1258c:	mov	r3, #1
   12590:	str	r3, [sp, #24]
   12594:	mov	r4, r6
   12598:	b	123b0 <__assert_fail@plt+0x14dc>
   1259c:	mov	r6, #1
   125a0:	str	r6, [sp, #24]
   125a4:	str	r6, [sp, #32]
   125a8:	b	12540 <__assert_fail@plt+0x166c>
   125ac:	mov	r3, #1
   125b0:	str	r3, [sp, #32]
   125b4:	ldr	r3, [pc, #2648]	; 13014 <__assert_fail@plt+0x2140>
   125b8:	str	r6, [sp, #24]
   125bc:	str	r3, [sp, #40]	; 0x28
   125c0:	b	1237c <__assert_fail@plt+0x14a8>
   125c4:	mov	r3, #1
   125c8:	str	r3, [sp, #32]
   125cc:	ldr	r3, [pc, #2632]	; 1301c <__assert_fail@plt+0x2148>
   125d0:	b	125bc <__assert_fail@plt+0x16e8>
   125d4:	ldr	r3, [sp, #32]
   125d8:	ldr	fp, [sp, #24]
   125dc:	cmp	sl, #2
   125e0:	moveq	fp, #0
   125e4:	andne	fp, fp, #1
   125e8:	adds	r5, r3, #0
   125ec:	movne	r5, #1
   125f0:	ands	r3, r5, fp
   125f4:	str	r3, [sp, #64]	; 0x40
   125f8:	beq	126c8 <__assert_fail@plt+0x17f4>
   125fc:	ldr	r2, [sp, #32]
   12600:	ldr	r3, [sp, #28]
   12604:	add	r7, r3, r2
   12608:	mov	r3, r2
   1260c:	ldr	r2, [sp, #36]	; 0x24
   12610:	cmp	r3, #1
   12614:	movls	r3, #0
   12618:	movhi	r3, #1
   1261c:	cmn	r2, #1
   12620:	movne	r3, #0
   12624:	cmp	r3, #0
   12628:	beq	12638 <__assert_fail@plt+0x1764>
   1262c:	ldr	r0, [sp, #44]	; 0x2c
   12630:	bl	10e08 <strlen@plt>
   12634:	str	r0, [sp, #36]	; 0x24
   12638:	ldr	r3, [sp, #36]	; 0x24
   1263c:	cmp	r3, r7
   12640:	bcc	126c0 <__assert_fail@plt+0x17ec>
   12644:	ldr	r3, [sp, #44]	; 0x2c
   12648:	ldr	r0, [sp, #28]
   1264c:	ldr	r2, [sp, #32]
   12650:	ldr	r1, [sp, #40]	; 0x28
   12654:	add	r0, r3, r0
   12658:	bl	10ce8 <memcmp@plt>
   1265c:	cmp	r0, #0
   12660:	bne	126c0 <__assert_fail@plt+0x17ec>
   12664:	cmp	r6, #0
   12668:	beq	126c8 <__assert_fail@plt+0x17f4>
   1266c:	str	r6, [sp, #24]
   12670:	ldr	r3, [sp, #24]
   12674:	ldr	r2, [sp, #44]	; 0x2c
   12678:	cmp	sl, #2
   1267c:	movne	r3, #0
   12680:	andeq	r3, r3, #1
   12684:	cmp	r3, #0
   12688:	ldr	r3, [sp, #160]	; 0xa0
   1268c:	movne	sl, #4
   12690:	str	r3, [sp, #16]
   12694:	ldr	r3, [sp, #156]	; 0x9c
   12698:	str	sl, [sp]
   1269c:	str	r3, [sp, #12]
   126a0:	mov	r3, #0
   126a4:	str	r3, [sp, #8]
   126a8:	ldr	r3, [sp, #148]	; 0x94
   126ac:	mov	r1, r9
   126b0:	bic	r3, r3, #2
   126b4:	str	r3, [sp, #4]
   126b8:	ldr	r3, [sp, #36]	; 0x24
   126bc:	b	1246c <__assert_fail@plt+0x1598>
   126c0:	mov	r3, #0
   126c4:	str	r3, [sp, #64]	; 0x40
   126c8:	ldr	r2, [sp, #28]
   126cc:	ldr	r3, [sp, #44]	; 0x2c
   126d0:	add	r3, r3, r2
   126d4:	str	r3, [sp, #80]	; 0x50
   126d8:	ldr	r3, [sp, #44]	; 0x2c
   126dc:	ldrb	r7, [r3, r2]
   126e0:	cmp	r7, #58	; 0x3a
   126e4:	bhi	1284c <__assert_fail@plt+0x1978>
   126e8:	cmp	r7, #43	; 0x2b
   126ec:	bcs	128a0 <__assert_fail@plt+0x19cc>
   126f0:	cmp	r7, #32
   126f4:	beq	128f8 <__assert_fail@plt+0x1a24>
   126f8:	bhi	127a4 <__assert_fail@plt+0x18d0>
   126fc:	cmp	r7, #9
   12700:	beq	12bac <__assert_fail@plt+0x1cd8>
   12704:	bhi	12768 <__assert_fail@plt+0x1894>
   12708:	cmp	r7, #7
   1270c:	beq	12c58 <__assert_fail@plt+0x1d84>
   12710:	bhi	12914 <__assert_fail@plt+0x1a40>
   12714:	cmp	r7, #0
   12718:	beq	12930 <__assert_fail@plt+0x1a5c>
   1271c:	ldr	r3, [sp, #76]	; 0x4c
   12720:	cmp	r3, #1
   12724:	bne	12c9c <__assert_fail@plt+0x1dc8>
   12728:	bl	10df0 <__ctype_b_loc@plt>
   1272c:	sxth	r3, r7
   12730:	lsl	r3, r3, #1
   12734:	ldr	r2, [r0]
   12738:	ldrh	r5, [r2, r3]
   1273c:	ldr	r3, [sp, #76]	; 0x4c
   12740:	str	r3, [sp, #56]	; 0x38
   12744:	lsr	r5, r5, #14
   12748:	and	r5, r5, #1
   1274c:	ldr	r3, [sp, #24]
   12750:	eor	fp, r5, #1
   12754:	and	fp, fp, r3
   12758:	ands	fp, fp, #255	; 0xff
   1275c:	beq	12ae4 <__assert_fail@plt+0x1c10>
   12760:	mov	r5, #0
   12764:	b	12d48 <__assert_fail@plt+0x1e74>
   12768:	cmp	r7, #11
   1276c:	beq	12bb4 <__assert_fail@plt+0x1ce0>
   12770:	bcc	12c50 <__assert_fail@plt+0x1d7c>
   12774:	cmp	r7, #12
   12778:	beq	12c60 <__assert_fail@plt+0x1d8c>
   1277c:	cmp	r7, #13
   12780:	moveq	r3, #114	; 0x72
   12784:	bne	1271c <__assert_fail@plt+0x1848>
   12788:	cmp	sl, #2
   1278c:	movne	r2, #0
   12790:	andeq	r2, r6, #1
   12794:	cmp	r2, #0
   12798:	beq	12918 <__assert_fail@plt+0x1a44>
   1279c:	mov	sl, #2
   127a0:	b	12670 <__assert_fail@plt+0x179c>
   127a4:	cmp	r7, #37	; 0x25
   127a8:	beq	128a0 <__assert_fail@plt+0x19cc>
   127ac:	bhi	127c0 <__assert_fail@plt+0x18ec>
   127b0:	cmp	r7, #35	; 0x23
   127b4:	beq	128ec <__assert_fail@plt+0x1a18>
   127b8:	mov	r5, #0
   127bc:	b	128fc <__assert_fail@plt+0x1a28>
   127c0:	cmp	r7, #39	; 0x27
   127c4:	bne	127b8 <__assert_fail@plt+0x18e4>
   127c8:	cmp	sl, #2
   127cc:	ldrne	r5, [sp, #52]	; 0x34
   127d0:	movne	r3, r5
   127d4:	strne	r3, [sp, #68]	; 0x44
   127d8:	bne	128a4 <__assert_fail@plt+0x19d0>
   127dc:	cmp	r6, #0
   127e0:	bne	12670 <__assert_fail@plt+0x179c>
   127e4:	ldr	r2, [sp, #60]	; 0x3c
   127e8:	adds	r3, r9, #0
   127ec:	movne	r3, #1
   127f0:	cmp	r2, #0
   127f4:	movne	r3, #0
   127f8:	cmp	r3, #0
   127fc:	strne	r9, [sp, #60]	; 0x3c
   12800:	movne	r9, #0
   12804:	bne	12814 <__assert_fail@plt+0x1940>
   12808:	cmp	r9, r4
   1280c:	movhi	r3, #39	; 0x27
   12810:	strbhi	r3, [r8, r4]
   12814:	add	r3, r4, #1
   12818:	cmp	r3, r9
   1281c:	movcc	r2, #92	; 0x5c
   12820:	strbcc	r2, [r8, r3]
   12824:	add	r3, r4, #2
   12828:	cmp	r3, r9
   1282c:	ldr	r5, [sp, #52]	; 0x34
   12830:	movcc	r2, #39	; 0x27
   12834:	strbcc	r2, [r8, r3]
   12838:	add	r4, r4, #3
   1283c:	mov	fp, r6
   12840:	str	r5, [sp, #68]	; 0x44
   12844:	str	r6, [sp, #48]	; 0x30
   12848:	b	12ae4 <__assert_fail@plt+0x1c10>
   1284c:	cmp	r7, #94	; 0x5e
   12850:	beq	127b8 <__assert_fail@plt+0x18e4>
   12854:	bhi	128ac <__assert_fail@plt+0x19d8>
   12858:	cmp	r7, #90	; 0x5a
   1285c:	bhi	12894 <__assert_fail@plt+0x19c0>
   12860:	cmp	r7, #65	; 0x41
   12864:	bcs	128a0 <__assert_fail@plt+0x19cc>
   12868:	cmp	r7, #62	; 0x3e
   1286c:	bls	127b8 <__assert_fail@plt+0x18e4>
   12870:	cmp	r7, #63	; 0x3f
   12874:	bne	1271c <__assert_fail@plt+0x1848>
   12878:	cmp	sl, #2
   1287c:	beq	12a20 <__assert_fail@plt+0x1b4c>
   12880:	cmp	sl, #5
   12884:	beq	12a30 <__assert_fail@plt+0x1b5c>
   12888:	mov	fp, #0
   1288c:	mov	r5, fp
   12890:	b	12ae4 <__assert_fail@plt+0x1c10>
   12894:	cmp	r7, #92	; 0x5c
   12898:	beq	12bbc <__assert_fail@plt+0x1ce8>
   1289c:	bls	127b8 <__assert_fail@plt+0x18e4>
   128a0:	ldr	r5, [sp, #52]	; 0x34
   128a4:	mov	fp, #0
   128a8:	b	12ae4 <__assert_fail@plt+0x1c10>
   128ac:	cmp	r7, #122	; 0x7a
   128b0:	bhi	128d0 <__assert_fail@plt+0x19fc>
   128b4:	cmp	r7, #97	; 0x61
   128b8:	bcs	128a0 <__assert_fail@plt+0x19cc>
   128bc:	cmp	r7, #95	; 0x5f
   128c0:	beq	128a0 <__assert_fail@plt+0x19cc>
   128c4:	cmp	r7, #96	; 0x60
   128c8:	bne	1271c <__assert_fail@plt+0x1848>
   128cc:	b	127b8 <__assert_fail@plt+0x18e4>
   128d0:	cmp	r7, #124	; 0x7c
   128d4:	beq	127b8 <__assert_fail@plt+0x18e4>
   128d8:	bcc	12c68 <__assert_fail@plt+0x1d94>
   128dc:	cmp	r7, #125	; 0x7d
   128e0:	beq	12c68 <__assert_fail@plt+0x1d94>
   128e4:	cmp	r7, #126	; 0x7e
   128e8:	bne	1271c <__assert_fail@plt+0x1848>
   128ec:	ldr	r3, [sp, #28]
   128f0:	cmp	r3, #0
   128f4:	bne	12a28 <__assert_fail@plt+0x1b54>
   128f8:	ldr	r5, [sp, #52]	; 0x34
   128fc:	cmp	sl, #2
   12900:	movne	fp, #0
   12904:	andeq	fp, r6, #1
   12908:	cmp	fp, #0
   1290c:	beq	12ae4 <__assert_fail@plt+0x1c10>
   12910:	b	1279c <__assert_fail@plt+0x18c8>
   12914:	mov	r3, #98	; 0x62
   12918:	ldr	r2, [sp, #24]
   1291c:	cmp	r2, #0
   12920:	beq	12a28 <__assert_fail@plt+0x1b54>
   12924:	mov	r7, r3
   12928:	mov	r5, #0
   1292c:	b	12b3c <__assert_fail@plt+0x1c68>
   12930:	ldr	r3, [sp, #24]
   12934:	cmp	r3, #0
   12938:	beq	12a04 <__assert_fail@plt+0x1b30>
   1293c:	cmp	r6, #0
   12940:	bne	1266c <__assert_fail@plt+0x1798>
   12944:	ldr	r3, [sp, #48]	; 0x30
   12948:	eor	r2, r3, #1
   1294c:	cmp	sl, #2
   12950:	movne	r2, #0
   12954:	andeq	r2, r2, #1
   12958:	cmp	r2, #0
   1295c:	moveq	r3, r4
   12960:	beq	12998 <__assert_fail@plt+0x1ac4>
   12964:	cmp	r9, r4
   12968:	movhi	r3, #39	; 0x27
   1296c:	strbhi	r3, [r8, r4]
   12970:	add	r3, r4, #1
   12974:	cmp	r9, r3
   12978:	movhi	r1, #36	; 0x24
   1297c:	strbhi	r1, [r8, r3]
   12980:	add	r3, r4, #2
   12984:	cmp	r9, r3
   12988:	movhi	r1, #39	; 0x27
   1298c:	strbhi	r1, [r8, r3]
   12990:	add	r3, r4, #3
   12994:	str	r2, [sp, #48]	; 0x30
   12998:	cmp	r9, r3
   1299c:	movhi	r2, #92	; 0x5c
   129a0:	strbhi	r2, [r8, r3]
   129a4:	cmp	fp, #0
   129a8:	add	r4, r3, #1
   129ac:	beq	12f3c <__assert_fail@plt+0x2068>
   129b0:	ldr	r2, [sp, #28]
   129b4:	ldr	r1, [sp, #36]	; 0x24
   129b8:	add	r2, r2, #1
   129bc:	cmp	r1, r2
   129c0:	bls	129fc <__assert_fail@plt+0x1b28>
   129c4:	ldr	r1, [sp, #44]	; 0x2c
   129c8:	mov	r7, #48	; 0x30
   129cc:	ldrb	r2, [r1, r2]
   129d0:	sub	r2, r2, #48	; 0x30
   129d4:	cmp	r2, #9
   129d8:	movhi	r5, r6
   129dc:	bhi	12ae4 <__assert_fail@plt+0x1c10>
   129e0:	cmp	r9, r4
   129e4:	add	r2, r3, #2
   129e8:	strbhi	r7, [r8, r4]
   129ec:	cmp	r9, r2
   129f0:	add	r4, r3, #3
   129f4:	movhi	r1, #48	; 0x30
   129f8:	strbhi	r1, [r8, r2]
   129fc:	mov	r5, r6
   12a00:	b	12f44 <__assert_fail@plt+0x2070>
   12a04:	ldr	r3, [sp, #148]	; 0x94
   12a08:	tst	r3, #1
   12a0c:	ldreq	r5, [sp, #24]
   12a10:	beq	12f50 <__assert_fail@plt+0x207c>
   12a14:	ldr	r3, [sp, #28]
   12a18:	add	r3, r3, #1
   12a1c:	b	123bc <__assert_fail@plt+0x14e8>
   12a20:	cmp	r6, #0
   12a24:	bne	12670 <__assert_fail@plt+0x179c>
   12a28:	mov	r5, #0
   12a2c:	b	128a4 <__assert_fail@plt+0x19d0>
   12a30:	ldr	r3, [sp, #148]	; 0x94
   12a34:	tst	r3, #4
   12a38:	beq	12a28 <__assert_fail@plt+0x1b54>
   12a3c:	ldr	r3, [sp, #28]
   12a40:	add	r2, r3, #2
   12a44:	ldr	r3, [sp, #36]	; 0x24
   12a48:	cmp	r3, r2
   12a4c:	bls	12a28 <__assert_fail@plt+0x1b54>
   12a50:	ldr	r3, [sp, #44]	; 0x2c
   12a54:	ldr	r1, [sp, #28]
   12a58:	add	r3, r3, r1
   12a5c:	ldrb	r0, [r3, #1]
   12a60:	cmp	r0, #63	; 0x3f
   12a64:	bne	12a28 <__assert_fail@plt+0x1b54>
   12a68:	ldr	r3, [sp, #44]	; 0x2c
   12a6c:	ldrb	r1, [r3, r2]
   12a70:	sub	r3, r1, #33	; 0x21
   12a74:	uxtb	r3, r3
   12a78:	cmp	r3, #29
   12a7c:	bhi	12f4c <__assert_fail@plt+0x2078>
   12a80:	mov	ip, #1
   12a84:	ldr	r5, [pc, #1428]	; 13020 <__assert_fail@plt+0x214c>
   12a88:	ands	r5, r5, ip, lsl r3
   12a8c:	beq	128a4 <__assert_fail@plt+0x19d0>
   12a90:	cmp	r6, #0
   12a94:	bne	12670 <__assert_fail@plt+0x179c>
   12a98:	add	r3, r4, #1
   12a9c:	cmp	r9, r4
   12aa0:	strbhi	r0, [r8, r4]
   12aa4:	cmp	r9, r3
   12aa8:	movhi	r0, #34	; 0x22
   12aac:	strbhi	r0, [r8, r3]
   12ab0:	add	r3, r4, #2
   12ab4:	cmp	r9, r3
   12ab8:	movhi	r0, #34	; 0x22
   12abc:	strbhi	r0, [r8, r3]
   12ac0:	add	r3, r4, #3
   12ac4:	cmp	r9, r3
   12ac8:	add	r4, r4, #4
   12acc:	mov	r5, r6
   12ad0:	mov	fp, r6
   12ad4:	mov	r7, r1
   12ad8:	movhi	r0, #63	; 0x3f
   12adc:	strbhi	r0, [r8, r3]
   12ae0:	str	r2, [sp, #28]
   12ae4:	ldr	r3, [sp, #24]
   12ae8:	eor	r3, r3, #1
   12aec:	cmp	sl, #2
   12af0:	orreq	r3, r3, #1
   12af4:	eor	r3, r3, #1
   12af8:	orr	r3, r6, r3
   12afc:	tst	r3, #255	; 0xff
   12b00:	beq	12b30 <__assert_fail@plt+0x1c5c>
   12b04:	ldr	r3, [sp, #152]	; 0x98
   12b08:	cmp	r3, #0
   12b0c:	beq	12b30 <__assert_fail@plt+0x1c5c>
   12b10:	lsr	r2, r7, #5
   12b14:	ldr	r1, [sp, #152]	; 0x98
   12b18:	uxtb	r2, r2
   12b1c:	and	r3, r7, #31
   12b20:	ldr	r2, [r1, r2, lsl #2]
   12b24:	lsr	r3, r2, r3
   12b28:	tst	r3, #1
   12b2c:	bne	12b3c <__assert_fail@plt+0x1c68>
   12b30:	ldr	r3, [sp, #64]	; 0x40
   12b34:	cmp	r3, #0
   12b38:	beq	12bd4 <__assert_fail@plt+0x1d00>
   12b3c:	cmp	r6, #0
   12b40:	bne	12670 <__assert_fail@plt+0x179c>
   12b44:	ldr	r3, [sp, #48]	; 0x30
   12b48:	eor	r3, r3, #1
   12b4c:	cmp	sl, #2
   12b50:	movne	r3, #0
   12b54:	andeq	r3, r3, #1
   12b58:	cmp	r3, #0
   12b5c:	beq	12b94 <__assert_fail@plt+0x1cc0>
   12b60:	cmp	r9, r4
   12b64:	movhi	r2, #39	; 0x27
   12b68:	strbhi	r2, [r8, r4]
   12b6c:	add	r2, r4, #1
   12b70:	cmp	r9, r2
   12b74:	movhi	r1, #36	; 0x24
   12b78:	strbhi	r1, [r8, r2]
   12b7c:	add	r2, r4, #2
   12b80:	cmp	r9, r2
   12b84:	add	r4, r4, #3
   12b88:	movhi	r1, #39	; 0x27
   12b8c:	strbhi	r1, [r8, r2]
   12b90:	str	r3, [sp, #48]	; 0x30
   12b94:	cmp	r9, r4
   12b98:	movhi	r3, #92	; 0x5c
   12b9c:	strbhi	r3, [r8, r4]
   12ba0:	ldr	fp, [sp, #52]	; 0x34
   12ba4:	add	r4, r4, #1
   12ba8:	b	12bd4 <__assert_fail@plt+0x1d00>
   12bac:	mov	r3, #116	; 0x74
   12bb0:	b	12788 <__assert_fail@plt+0x18b4>
   12bb4:	mov	r3, #118	; 0x76
   12bb8:	b	12918 <__assert_fail@plt+0x1a44>
   12bbc:	cmp	sl, #2
   12bc0:	bne	12c30 <__assert_fail@plt+0x1d5c>
   12bc4:	cmp	r6, #0
   12bc8:	bne	12670 <__assert_fail@plt+0x179c>
   12bcc:	mov	r5, r6
   12bd0:	mov	fp, r6
   12bd4:	ldr	r3, [sp, #48]	; 0x30
   12bd8:	eor	fp, fp, #1
   12bdc:	and	fp, fp, r3
   12be0:	tst	fp, #255	; 0xff
   12be4:	beq	12c10 <__assert_fail@plt+0x1d3c>
   12be8:	cmp	r9, r4
   12bec:	movhi	r3, #39	; 0x27
   12bf0:	strbhi	r3, [r8, r4]
   12bf4:	add	r3, r4, #1
   12bf8:	cmp	r9, r3
   12bfc:	movhi	r2, #39	; 0x27
   12c00:	add	r4, r4, #2
   12c04:	strbhi	r2, [r8, r3]
   12c08:	mov	r3, #0
   12c0c:	str	r3, [sp, #48]	; 0x30
   12c10:	cmp	r9, r4
   12c14:	strbhi	r7, [r8, r4]
   12c18:	ldr	r3, [sp, #72]	; 0x48
   12c1c:	cmp	r5, #0
   12c20:	moveq	r3, #0
   12c24:	add	r4, r4, #1
   12c28:	str	r3, [sp, #72]	; 0x48
   12c2c:	b	12a14 <__assert_fail@plt+0x1b40>
   12c30:	ldr	r3, [sp, #24]
   12c34:	and	r3, r3, r6
   12c38:	tst	r5, r3
   12c3c:	moveq	r3, r7
   12c40:	beq	12788 <__assert_fail@plt+0x18b4>
   12c44:	mov	fp, #0
   12c48:	mov	r5, fp
   12c4c:	b	12bd4 <__assert_fail@plt+0x1d00>
   12c50:	mov	r3, #110	; 0x6e
   12c54:	b	12788 <__assert_fail@plt+0x18b4>
   12c58:	mov	r3, #97	; 0x61
   12c5c:	b	12918 <__assert_fail@plt+0x1a44>
   12c60:	mov	r3, #102	; 0x66
   12c64:	b	12918 <__assert_fail@plt+0x1a44>
   12c68:	ldr	r3, [sp, #36]	; 0x24
   12c6c:	cmn	r3, #1
   12c70:	bne	12c90 <__assert_fail@plt+0x1dbc>
   12c74:	ldr	r3, [sp, #44]	; 0x2c
   12c78:	ldrb	r3, [r3, #1]
   12c7c:	adds	r3, r3, #0
   12c80:	movne	r3, #1
   12c84:	cmp	r3, #0
   12c88:	bne	12a28 <__assert_fail@plt+0x1b54>
   12c8c:	b	128ec <__assert_fail@plt+0x1a18>
   12c90:	ldr	r3, [sp, #36]	; 0x24
   12c94:	subs	r3, r3, #1
   12c98:	b	12c80 <__assert_fail@plt+0x1dac>
   12c9c:	mov	r3, #0
   12ca0:	str	r3, [sp, #96]	; 0x60
   12ca4:	str	r3, [sp, #100]	; 0x64
   12ca8:	ldr	r3, [sp, #36]	; 0x24
   12cac:	cmn	r3, #1
   12cb0:	bne	12cc0 <__assert_fail@plt+0x1dec>
   12cb4:	ldr	r0, [sp, #44]	; 0x2c
   12cb8:	bl	10e08 <strlen@plt>
   12cbc:	str	r0, [sp, #36]	; 0x24
   12cc0:	ldr	r5, [sp, #52]	; 0x34
   12cc4:	mov	r3, #0
   12cc8:	str	r3, [sp, #56]	; 0x38
   12ccc:	ldr	r3, [sp, #28]
   12cd0:	ldr	r2, [sp, #56]	; 0x38
   12cd4:	ldr	r1, [sp, #36]	; 0x24
   12cd8:	add	r2, r3, r2
   12cdc:	ldr	r3, [sp, #44]	; 0x2c
   12ce0:	add	r0, sp, #92	; 0x5c
   12ce4:	add	fp, r3, r2
   12ce8:	sub	r2, r1, r2
   12cec:	add	r3, sp, #96	; 0x60
   12cf0:	mov	r1, fp
   12cf4:	bl	14520 <__assert_fail@plt+0x364c>
   12cf8:	subs	r2, r0, #0
   12cfc:	beq	12d3c <__assert_fail@plt+0x1e68>
   12d00:	cmn	r2, #1
   12d04:	beq	12f14 <__assert_fail@plt+0x2040>
   12d08:	cmn	r2, #2
   12d0c:	bne	12e84 <__assert_fail@plt+0x1fb0>
   12d10:	ldr	r2, [sp, #56]	; 0x38
   12d14:	ldr	r3, [sp, #28]
   12d18:	add	r3, r3, r2
   12d1c:	ldr	r2, [sp, #36]	; 0x24
   12d20:	cmp	r2, r3
   12d24:	bls	12f14 <__assert_fail@plt+0x2040>
   12d28:	ldr	r3, [sp, #80]	; 0x50
   12d2c:	ldr	r2, [sp, #56]	; 0x38
   12d30:	ldrb	r5, [r3, r2]
   12d34:	cmp	r5, #0
   12d38:	bne	12e74 <__assert_fail@plt+0x1fa0>
   12d3c:	ldr	r3, [sp, #56]	; 0x38
   12d40:	cmp	r3, #1
   12d44:	bls	1274c <__assert_fail@plt+0x1878>
   12d48:	ldr	r2, [sp, #56]	; 0x38
   12d4c:	ldr	r3, [sp, #28]
   12d50:	mov	fp, #0
   12d54:	add	r3, r3, r2
   12d58:	ldr	r2, [sp, #24]
   12d5c:	str	r3, [sp, #52]	; 0x34
   12d60:	eor	r3, r5, #1
   12d64:	and	r3, r3, r2
   12d68:	mov	ip, #92	; 0x5c
   12d6c:	uxtb	r3, r3
   12d70:	mov	r2, #39	; 0x27
   12d74:	cmp	r3, #0
   12d78:	beq	12f1c <__assert_fail@plt+0x2048>
   12d7c:	cmp	r6, #0
   12d80:	bne	1266c <__assert_fail@plt+0x1798>
   12d84:	ldr	r1, [sp, #48]	; 0x30
   12d88:	eor	r1, r1, #1
   12d8c:	cmp	sl, #2
   12d90:	movne	r1, #0
   12d94:	andeq	r1, r1, #1
   12d98:	cmp	r1, #0
   12d9c:	beq	12dcc <__assert_fail@plt+0x1ef8>
   12da0:	add	r0, r4, #1
   12da4:	cmp	r9, r4
   12da8:	strbhi	r2, [r8, r4]
   12dac:	cmp	r9, r0
   12db0:	movhi	lr, #36	; 0x24
   12db4:	strbhi	lr, [r8, r0]
   12db8:	add	r0, r4, #2
   12dbc:	add	r4, r4, #3
   12dc0:	cmp	r9, r0
   12dc4:	strbhi	r2, [r8, r0]
   12dc8:	str	r1, [sp, #48]	; 0x30
   12dcc:	add	r0, r4, #1
   12dd0:	cmp	r9, r4
   12dd4:	strbhi	ip, [r8, r4]
   12dd8:	cmp	r9, r0
   12ddc:	lsrhi	r1, r7, #6
   12de0:	addhi	r1, r1, #48	; 0x30
   12de4:	strbhi	r1, [r8, r0]
   12de8:	add	r0, r4, #2
   12dec:	cmp	r9, r0
   12df0:	lsrhi	r1, r7, #3
   12df4:	and	r7, r7, #7
   12df8:	andhi	r1, r1, #7
   12dfc:	add	r4, r4, #3
   12e00:	add	r7, r7, #48	; 0x30
   12e04:	mov	fp, r3
   12e08:	addhi	r1, r1, #48	; 0x30
   12e0c:	strbhi	r1, [r8, r0]
   12e10:	ldr	r1, [sp, #28]
   12e14:	ldr	r0, [sp, #52]	; 0x34
   12e18:	add	r1, r1, #1
   12e1c:	cmp	r0, r1
   12e20:	bls	12bd4 <__assert_fail@plt+0x1d00>
   12e24:	ldr	lr, [sp, #48]	; 0x30
   12e28:	eor	r0, fp, #1
   12e2c:	and	r0, r0, lr
   12e30:	tst	r0, #255	; 0xff
   12e34:	beq	12e58 <__assert_fail@plt+0x1f84>
   12e38:	add	r0, r4, #1
   12e3c:	cmp	r9, r4
   12e40:	strbhi	r2, [r8, r4]
   12e44:	cmp	r9, r0
   12e48:	add	r4, r4, #2
   12e4c:	strbhi	r2, [r8, r0]
   12e50:	mov	r0, #0
   12e54:	str	r0, [sp, #48]	; 0x30
   12e58:	ldr	r0, [sp, #44]	; 0x2c
   12e5c:	cmp	r9, r4
   12e60:	strbhi	r7, [r8, r4]
   12e64:	str	r1, [sp, #28]
   12e68:	add	r4, r4, #1
   12e6c:	ldrb	r7, [r0, r1]
   12e70:	b	12d74 <__assert_fail@plt+0x1ea0>
   12e74:	ldr	r3, [sp, #56]	; 0x38
   12e78:	add	r3, r3, #1
   12e7c:	str	r3, [sp, #56]	; 0x38
   12e80:	b	12d10 <__assert_fail@plt+0x1e3c>
   12e84:	cmp	sl, #2
   12e88:	movne	r3, #0
   12e8c:	andeq	r3, r6, #1
   12e90:	cmp	r3, #0
   12e94:	movne	r1, #1
   12e98:	bne	12ef4 <__assert_fail@plt+0x2020>
   12e9c:	ldr	r0, [sp, #92]	; 0x5c
   12ea0:	str	r2, [sp, #84]	; 0x54
   12ea4:	bl	10d3c <iswprint@plt>
   12ea8:	ldr	r3, [sp, #56]	; 0x38
   12eac:	ldr	r2, [sp, #84]	; 0x54
   12eb0:	add	r3, r3, r2
   12eb4:	str	r3, [sp, #56]	; 0x38
   12eb8:	cmp	r0, #0
   12ebc:	add	r0, sp, #96	; 0x60
   12ec0:	moveq	r5, #0
   12ec4:	bl	10cdc <mbsinit@plt>
   12ec8:	cmp	r0, #0
   12ecc:	beq	12ccc <__assert_fail@plt+0x1df8>
   12ed0:	b	12d3c <__assert_fail@plt+0x1e68>
   12ed4:	ldrb	r3, [fp, r1]
   12ed8:	cmp	r3, #94	; 0x5e
   12edc:	beq	1279c <__assert_fail@plt+0x18c8>
   12ee0:	bhi	12f00 <__assert_fail@plt+0x202c>
   12ee4:	sub	r3, r3, #91	; 0x5b
   12ee8:	cmp	r3, #1
   12eec:	bls	1279c <__assert_fail@plt+0x18c8>
   12ef0:	add	r1, r1, #1
   12ef4:	cmp	r1, r2
   12ef8:	bne	12ed4 <__assert_fail@plt+0x2000>
   12efc:	b	12e9c <__assert_fail@plt+0x1fc8>
   12f00:	cmp	r3, #96	; 0x60
   12f04:	beq	1279c <__assert_fail@plt+0x18c8>
   12f08:	cmp	r3, #124	; 0x7c
   12f0c:	bne	12ef0 <__assert_fail@plt+0x201c>
   12f10:	b	1279c <__assert_fail@plt+0x18c8>
   12f14:	mov	r5, #0
   12f18:	b	12d3c <__assert_fail@plt+0x1e68>
   12f1c:	ldr	r1, [sp, #64]	; 0x40
   12f20:	cmp	r1, #0
   12f24:	beq	12e10 <__assert_fail@plt+0x1f3c>
   12f28:	cmp	r9, r4
   12f2c:	strbhi	ip, [r8, r4]
   12f30:	str	r3, [sp, #64]	; 0x40
   12f34:	add	r4, r4, #1
   12f38:	b	12e10 <__assert_fail@plt+0x1f3c>
   12f3c:	mov	r5, fp
   12f40:	ldr	fp, [sp, #24]
   12f44:	mov	r7, #48	; 0x30
   12f48:	b	12ae4 <__assert_fail@plt+0x1c10>
   12f4c:	mov	r5, #0
   12f50:	mov	fp, r5
   12f54:	b	12ae4 <__assert_fail@plt+0x1c10>
   12f58:	ldr	r3, [sp, #36]	; 0x24
   12f5c:	ldr	r2, [sp, #28]
   12f60:	subs	r3, r3, r2
   12f64:	movne	r3, #1
   12f68:	b	123e0 <__assert_fail@plt+0x150c>
   12f6c:	ldr	r3, [sp, #60]	; 0x3c
   12f70:	clz	r7, r9
   12f74:	cmp	r3, #0
   12f78:	lsr	r7, r7, #5
   12f7c:	moveq	r7, #0
   12f80:	cmp	r7, #0
   12f84:	mov	r5, r3
   12f88:	bne	12340 <__assert_fail@plt+0x146c>
   12f8c:	ldr	r3, [sp, #68]	; 0x44
   12f90:	ldr	r2, [sp, #40]	; 0x28
   12f94:	cmp	r2, #0
   12f98:	moveq	r3, #0
   12f9c:	andne	r3, r3, #1
   12fa0:	cmp	r3, #0
   12fa4:	movne	r3, r2
   12fa8:	subne	r2, r3, #1
   12fac:	bne	12fdc <__assert_fail@plt+0x2108>
   12fb0:	cmp	r9, r4
   12fb4:	movhi	r3, #0
   12fb8:	strbhi	r3, [r8, r4]
   12fbc:	mov	r0, r4
   12fc0:	add	sp, sp, #108	; 0x6c
   12fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fc8:	mov	r3, r2
   12fcc:	b	12f90 <__assert_fail@plt+0x20bc>
   12fd0:	cmp	r9, r4
   12fd4:	strbhi	r3, [r8, r4]
   12fd8:	add	r4, r4, #1
   12fdc:	ldrb	r3, [r2, #1]!
   12fe0:	cmp	r3, #0
   12fe4:	bne	12fd0 <__assert_fail@plt+0x20fc>
   12fe8:	b	12fb0 <__assert_fail@plt+0x20dc>
   12fec:	ldr	r3, [pc, #32]	; 13014 <__assert_fail@plt+0x2140>
   12ff0:	mov	r6, #1
   12ff4:	str	r6, [sp, #24]
   12ff8:	str	r6, [sp, #32]
   12ffc:	str	r3, [sp, #40]	; 0x28
   13000:	mov	r4, #0
   13004:	mov	sl, #5
   13008:	b	123b0 <__assert_fail@plt+0x14dc>
   1300c:	mov	r6, #1
   13010:	b	125a4 <__assert_fail@plt+0x16d0>
   13014:	andeq	r5, r1, pc, asr r0
   13018:	andeq	r5, r1, r3, rrx
   1301c:	andeq	r5, r1, r1, rrx
   13020:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13028:	sub	sp, sp, #52	; 0x34
   1302c:	mov	r6, r0
   13030:	mov	r5, r3
   13034:	mov	r8, r1
   13038:	mov	r9, r2
   1303c:	bl	10e14 <__errno_location@plt>
   13040:	ldr	r7, [pc, #380]	; 131c4 <__assert_fail@plt+0x22f0>
   13044:	cmn	r6, #-2147483647	; 0x80000001
   13048:	ldr	r4, [r7]
   1304c:	ldr	r3, [r0]
   13050:	str	r0, [sp, #24]
   13054:	str	r3, [sp, #32]
   13058:	movne	r3, #0
   1305c:	moveq	r3, #1
   13060:	orrs	r3, r3, r6, lsr #31
   13064:	beq	1306c <__assert_fail@plt+0x2198>
   13068:	bl	10ebc <abort@plt>
   1306c:	ldr	r2, [r7, #4]
   13070:	cmp	r6, r2
   13074:	blt	130e4 <__assert_fail@plt+0x2210>
   13078:	add	r1, sp, #48	; 0x30
   1307c:	add	sl, r7, #8
   13080:	str	r2, [r1, #-4]!
   13084:	cmp	r4, sl
   13088:	mov	r3, #8
   1308c:	sub	r2, r6, r2
   13090:	movne	r0, r4
   13094:	str	r3, [sp]
   13098:	add	r2, r2, #1
   1309c:	mvn	r3, #-2147483648	; 0x80000000
   130a0:	moveq	r0, #0
   130a4:	bl	14034 <__assert_fail@plt+0x3160>
   130a8:	cmp	r4, sl
   130ac:	ldr	r2, [sp, #44]	; 0x2c
   130b0:	mov	fp, r0
   130b4:	str	r0, [r7]
   130b8:	ldmeq	r4, {r0, r1}
   130bc:	mov	r4, fp
   130c0:	stmeq	fp, {r0, r1}
   130c4:	ldr	r0, [r7, #4]
   130c8:	mov	r1, #0
   130cc:	sub	r2, r2, r0
   130d0:	add	r0, fp, r0, lsl #3
   130d4:	lsl	r2, r2, #3
   130d8:	bl	10e2c <memset@plt>
   130dc:	ldr	r3, [sp, #44]	; 0x2c
   130e0:	str	r3, [r7, #4]
   130e4:	ldr	r3, [r5, #4]
   130e8:	add	sl, r4, r6, lsl #3
   130ec:	orr	r3, r3, #1
   130f0:	str	r3, [sp, #28]
   130f4:	add	r3, r5, #8
   130f8:	str	r3, [sp, #36]	; 0x24
   130fc:	ldr	r3, [r5, #44]	; 0x2c
   13100:	ldr	fp, [r4, r6, lsl #3]
   13104:	ldr	r7, [sl, #4]
   13108:	str	r3, [sp, #16]
   1310c:	ldr	r3, [r5, #40]	; 0x28
   13110:	mov	r2, r8
   13114:	str	r3, [sp, #12]
   13118:	add	r3, r5, #8
   1311c:	str	r3, [sp, #8]
   13120:	ldr	r3, [sp, #28]
   13124:	mov	r1, fp
   13128:	str	r3, [sp, #4]
   1312c:	ldr	r3, [r5]
   13130:	mov	r0, r7
   13134:	str	r3, [sp]
   13138:	mov	r3, r9
   1313c:	bl	122f0 <__assert_fail@plt+0x141c>
   13140:	cmp	fp, r0
   13144:	bhi	131ac <__assert_fail@plt+0x22d8>
   13148:	ldr	r3, [pc, #120]	; 131c8 <__assert_fail@plt+0x22f4>
   1314c:	add	fp, r0, #1
   13150:	cmp	r7, r3
   13154:	str	fp, [r4, r6, lsl #3]
   13158:	beq	13164 <__assert_fail@plt+0x2290>
   1315c:	mov	r0, r7
   13160:	bl	11d10 <__assert_fail@plt+0xe3c>
   13164:	mov	r0, fp
   13168:	bl	13eec <__assert_fail@plt+0x3018>
   1316c:	ldr	r3, [r5, #44]	; 0x2c
   13170:	mov	r2, r8
   13174:	mov	r1, fp
   13178:	str	r0, [sl, #4]
   1317c:	str	r3, [sp, #16]
   13180:	ldr	r3, [r5, #40]	; 0x28
   13184:	mov	r7, r0
   13188:	str	r3, [sp, #12]
   1318c:	add	r3, r5, #8
   13190:	str	r3, [sp, #8]
   13194:	ldr	r3, [sp, #28]
   13198:	str	r3, [sp, #4]
   1319c:	ldr	r3, [r5]
   131a0:	str	r3, [sp]
   131a4:	mov	r3, r9
   131a8:	bl	122f0 <__assert_fail@plt+0x141c>
   131ac:	ldr	r3, [sp, #24]
   131b0:	ldr	r2, [sp, #32]
   131b4:	mov	r0, r7
   131b8:	str	r2, [r3]
   131bc:	add	sp, sp, #52	; 0x34
   131c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c4:	strdeq	r6, [r2], -r0
   131c8:	andeq	r6, r2, r4, ror r1
   131cc:	push	{r4, r5, r6, lr}
   131d0:	mov	r5, r0
   131d4:	bl	10e14 <__errno_location@plt>
   131d8:	cmp	r5, #0
   131dc:	mov	r1, #48	; 0x30
   131e0:	ldr	r6, [r0]
   131e4:	mov	r4, r0
   131e8:	ldr	r0, [pc, #12]	; 131fc <__assert_fail@plt+0x2328>
   131ec:	movne	r0, r5
   131f0:	bl	142c8 <__assert_fail@plt+0x33f4>
   131f4:	str	r6, [r4]
   131f8:	pop	{r4, r5, r6, pc}
   131fc:	andeq	r6, r2, r4, ror r2
   13200:	ldr	r3, [pc, #12]	; 13214 <__assert_fail@plt+0x2340>
   13204:	cmp	r0, #0
   13208:	moveq	r0, r3
   1320c:	ldr	r0, [r0]
   13210:	bx	lr
   13214:	andeq	r6, r2, r4, ror r2
   13218:	ldr	r3, [pc, #12]	; 1322c <__assert_fail@plt+0x2358>
   1321c:	cmp	r0, #0
   13220:	moveq	r0, r3
   13224:	str	r1, [r0]
   13228:	bx	lr
   1322c:	andeq	r6, r2, r4, ror r2
   13230:	ldr	r3, [pc, #52]	; 1326c <__assert_fail@plt+0x2398>
   13234:	cmp	r0, #0
   13238:	moveq	r0, r3
   1323c:	add	r3, r0, #8
   13240:	push	{lr}		; (str lr, [sp, #-4]!)
   13244:	lsr	lr, r1, #5
   13248:	and	r1, r1, #31
   1324c:	ldr	ip, [r3, lr, lsl #2]
   13250:	lsr	r0, ip, r1
   13254:	eor	r2, r2, r0
   13258:	and	r2, r2, #1
   1325c:	and	r0, r0, #1
   13260:	eor	r1, ip, r2, lsl r1
   13264:	str	r1, [r3, lr, lsl #2]
   13268:	pop	{pc}		; (ldr pc, [sp], #4)
   1326c:	andeq	r6, r2, r4, ror r2
   13270:	ldr	r3, [pc, #16]	; 13288 <__assert_fail@plt+0x23b4>
   13274:	cmp	r0, #0
   13278:	movne	r3, r0
   1327c:	ldr	r0, [r3, #4]
   13280:	str	r1, [r3, #4]
   13284:	bx	lr
   13288:	andeq	r6, r2, r4, ror r2
   1328c:	ldr	r3, [pc, #44]	; 132c0 <__assert_fail@plt+0x23ec>
   13290:	cmp	r0, #0
   13294:	moveq	r0, r3
   13298:	mov	r3, #10
   1329c:	cmp	r2, #0
   132a0:	cmpne	r1, #0
   132a4:	str	r3, [r0]
   132a8:	bne	132b4 <__assert_fail@plt+0x23e0>
   132ac:	push	{r4, lr}
   132b0:	bl	10ebc <abort@plt>
   132b4:	str	r1, [r0, #40]	; 0x28
   132b8:	str	r2, [r0, #44]	; 0x2c
   132bc:	bx	lr
   132c0:	andeq	r6, r2, r4, ror r2
   132c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132c8:	sub	sp, sp, #24
   132cc:	mov	sl, r3
   132d0:	ldr	r4, [sp, #56]	; 0x38
   132d4:	ldr	r3, [pc, #100]	; 13340 <__assert_fail@plt+0x246c>
   132d8:	cmp	r4, #0
   132dc:	moveq	r4, r3
   132e0:	mov	r7, r0
   132e4:	mov	r8, r1
   132e8:	mov	r9, r2
   132ec:	bl	10e14 <__errno_location@plt>
   132f0:	ldr	r3, [r4, #44]	; 0x2c
   132f4:	mov	r2, r9
   132f8:	mov	r1, r8
   132fc:	ldr	r6, [r0]
   13300:	str	r3, [sp, #16]
   13304:	ldr	r3, [r4, #40]	; 0x28
   13308:	mov	r5, r0
   1330c:	str	r3, [sp, #12]
   13310:	add	r3, r4, #8
   13314:	str	r3, [sp, #8]
   13318:	ldr	r3, [r4, #4]
   1331c:	mov	r0, r7
   13320:	str	r3, [sp, #4]
   13324:	ldr	r3, [r4]
   13328:	str	r3, [sp]
   1332c:	mov	r3, sl
   13330:	bl	122f0 <__assert_fail@plt+0x141c>
   13334:	str	r6, [r5]
   13338:	add	sp, sp, #24
   1333c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13340:	andeq	r6, r2, r4, ror r2
   13344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13348:	cmp	r3, #0
   1334c:	sub	sp, sp, #44	; 0x2c
   13350:	ldr	r4, [pc, #188]	; 13414 <__assert_fail@plt+0x2540>
   13354:	mov	r6, r2
   13358:	movne	r4, r3
   1335c:	mov	sl, r1
   13360:	mov	r9, r0
   13364:	bl	10e14 <__errno_location@plt>
   13368:	ldr	r5, [r4, #4]
   1336c:	add	fp, r4, #8
   13370:	cmp	r6, #0
   13374:	orreq	r5, r5, #1
   13378:	mov	r1, #0
   1337c:	mov	r2, r9
   13380:	ldr	r3, [r0]
   13384:	mov	r8, r0
   13388:	str	r3, [sp, #28]
   1338c:	ldr	r3, [r4, #44]	; 0x2c
   13390:	mov	r0, r1
   13394:	str	r3, [sp, #16]
   13398:	ldr	r3, [r4, #40]	; 0x28
   1339c:	stmib	sp, {r5, fp}
   133a0:	str	r3, [sp, #12]
   133a4:	ldr	r3, [r4]
   133a8:	str	r3, [sp]
   133ac:	mov	r3, sl
   133b0:	bl	122f0 <__assert_fail@plt+0x141c>
   133b4:	add	r1, r0, #1
   133b8:	mov	r7, r0
   133bc:	mov	r0, r1
   133c0:	str	r1, [sp, #36]	; 0x24
   133c4:	bl	13eec <__assert_fail@plt+0x3018>
   133c8:	ldr	r3, [r4, #44]	; 0x2c
   133cc:	mov	r2, r9
   133d0:	str	r3, [sp, #16]
   133d4:	ldr	r3, [r4, #40]	; 0x28
   133d8:	stmib	sp, {r5, fp}
   133dc:	str	r3, [sp, #12]
   133e0:	ldr	r3, [r4]
   133e4:	ldr	r1, [sp, #36]	; 0x24
   133e8:	str	r3, [sp]
   133ec:	mov	r3, sl
   133f0:	str	r0, [sp, #32]
   133f4:	bl	122f0 <__assert_fail@plt+0x141c>
   133f8:	ldr	r3, [sp, #28]
   133fc:	cmp	r6, #0
   13400:	str	r3, [r8]
   13404:	ldr	r0, [sp, #32]
   13408:	strne	r7, [r6]
   1340c:	add	sp, sp, #44	; 0x2c
   13410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13414:	andeq	r6, r2, r4, ror r2
   13418:	mov	r3, r2
   1341c:	mov	r2, #0
   13420:	b	13344 <__assert_fail@plt+0x2470>
   13424:	push	{r4, r5, r6, r7, r8, lr}
   13428:	mov	r6, #1
   1342c:	ldr	r4, [pc, #104]	; 1349c <__assert_fail@plt+0x25c8>
   13430:	ldr	r5, [r4]
   13434:	add	r7, r5, #12
   13438:	ldr	r3, [r4, #4]
   1343c:	add	r7, r7, #8
   13440:	cmp	r6, r3
   13444:	blt	1348c <__assert_fail@plt+0x25b8>
   13448:	ldr	r0, [r5, #4]
   1344c:	ldr	r6, [pc, #76]	; 134a0 <__assert_fail@plt+0x25cc>
   13450:	cmp	r0, r6
   13454:	beq	13468 <__assert_fail@plt+0x2594>
   13458:	bl	11d10 <__assert_fail@plt+0xe3c>
   1345c:	mov	r3, #256	; 0x100
   13460:	str	r3, [r4, #8]
   13464:	str	r6, [r4, #12]
   13468:	ldr	r6, [pc, #52]	; 134a4 <__assert_fail@plt+0x25d0>
   1346c:	cmp	r5, r6
   13470:	beq	13480 <__assert_fail@plt+0x25ac>
   13474:	mov	r0, r5
   13478:	bl	11d10 <__assert_fail@plt+0xe3c>
   1347c:	str	r6, [r4]
   13480:	mov	r3, #1
   13484:	str	r3, [r4, #4]
   13488:	pop	{r4, r5, r6, r7, r8, pc}
   1348c:	ldr	r0, [r7, #-8]
   13490:	bl	11d10 <__assert_fail@plt+0xe3c>
   13494:	add	r6, r6, #1
   13498:	b	13438 <__assert_fail@plt+0x2564>
   1349c:	strdeq	r6, [r2], -r0
   134a0:	andeq	r6, r2, r4, ror r1
   134a4:	strdeq	r6, [r2], -r8
   134a8:	ldr	r3, [pc, #4]	; 134b4 <__assert_fail@plt+0x25e0>
   134ac:	mvn	r2, #0
   134b0:	b	13024 <__assert_fail@plt+0x2150>
   134b4:	andeq	r6, r2, r4, ror r2
   134b8:	ldr	r3, [pc]	; 134c0 <__assert_fail@plt+0x25ec>
   134bc:	b	13024 <__assert_fail@plt+0x2150>
   134c0:	andeq	r6, r2, r4, ror r2
   134c4:	mov	r1, r0
   134c8:	mov	r0, #0
   134cc:	b	134a8 <__assert_fail@plt+0x25d4>
   134d0:	mov	r2, r1
   134d4:	mov	r1, r0
   134d8:	mov	r0, #0
   134dc:	b	134b8 <__assert_fail@plt+0x25e4>
   134e0:	push	{r4, r5, lr}
   134e4:	sub	sp, sp, #52	; 0x34
   134e8:	mov	r5, r2
   134ec:	mov	r4, r0
   134f0:	mov	r0, sp
   134f4:	bl	121ac <__assert_fail@plt+0x12d8>
   134f8:	mov	r3, sp
   134fc:	mvn	r2, #0
   13500:	mov	r1, r5
   13504:	mov	r0, r4
   13508:	bl	13024 <__assert_fail@plt+0x2150>
   1350c:	add	sp, sp, #52	; 0x34
   13510:	pop	{r4, r5, pc}
   13514:	push	{r4, r5, r6, lr}
   13518:	sub	sp, sp, #48	; 0x30
   1351c:	mov	r5, r2
   13520:	mov	r6, r3
   13524:	mov	r4, r0
   13528:	mov	r0, sp
   1352c:	bl	121ac <__assert_fail@plt+0x12d8>
   13530:	mov	r3, sp
   13534:	mov	r2, r6
   13538:	mov	r1, r5
   1353c:	mov	r0, r4
   13540:	bl	13024 <__assert_fail@plt+0x2150>
   13544:	add	sp, sp, #48	; 0x30
   13548:	pop	{r4, r5, r6, pc}
   1354c:	mov	r2, r1
   13550:	mov	r1, r0
   13554:	mov	r0, #0
   13558:	b	134e0 <__assert_fail@plt+0x260c>
   1355c:	mov	r3, r2
   13560:	mov	r2, r1
   13564:	mov	r1, r0
   13568:	mov	r0, #0
   1356c:	b	13514 <__assert_fail@plt+0x2640>
   13570:	push	{r4, r5, r6, lr}
   13574:	mov	r4, r0
   13578:	ldr	lr, [pc, #80]	; 135d0 <__assert_fail@plt+0x26fc>
   1357c:	mov	r5, r1
   13580:	mov	r6, r2
   13584:	ldm	lr!, {r0, r1, r2, r3}
   13588:	sub	sp, sp, #48	; 0x30
   1358c:	mov	ip, sp
   13590:	stmia	ip!, {r0, r1, r2, r3}
   13594:	ldm	lr!, {r0, r1, r2, r3}
   13598:	stmia	ip!, {r0, r1, r2, r3}
   1359c:	ldm	lr, {r0, r1, r2, r3}
   135a0:	stm	ip, {r0, r1, r2, r3}
   135a4:	mov	r1, r6
   135a8:	mov	r2, #1
   135ac:	mov	r0, sp
   135b0:	bl	13230 <__assert_fail@plt+0x235c>
   135b4:	mov	r3, sp
   135b8:	mov	r2, r5
   135bc:	mov	r1, r4
   135c0:	mov	r0, #0
   135c4:	bl	13024 <__assert_fail@plt+0x2150>
   135c8:	add	sp, sp, #48	; 0x30
   135cc:	pop	{r4, r5, r6, pc}
   135d0:	andeq	r6, r2, r4, ror r2
   135d4:	mov	r2, r1
   135d8:	mvn	r1, #0
   135dc:	b	13570 <__assert_fail@plt+0x269c>
   135e0:	mov	r1, #58	; 0x3a
   135e4:	b	135d4 <__assert_fail@plt+0x2700>
   135e8:	mov	r2, #58	; 0x3a
   135ec:	b	13570 <__assert_fail@plt+0x269c>
   135f0:	push	{r4, r5, lr}
   135f4:	sub	sp, sp, #100	; 0x64
   135f8:	mov	r4, r0
   135fc:	mov	r0, sp
   13600:	mov	r5, r2
   13604:	bl	121ac <__assert_fail@plt+0x12d8>
   13608:	mov	ip, sp
   1360c:	add	lr, sp, #48	; 0x30
   13610:	ldm	ip!, {r0, r1, r2, r3}
   13614:	stmia	lr!, {r0, r1, r2, r3}
   13618:	ldm	ip!, {r0, r1, r2, r3}
   1361c:	stmia	lr!, {r0, r1, r2, r3}
   13620:	ldm	ip, {r0, r1, r2, r3}
   13624:	stm	lr, {r0, r1, r2, r3}
   13628:	mov	r2, #1
   1362c:	mov	r1, #58	; 0x3a
   13630:	add	r0, sp, #48	; 0x30
   13634:	bl	13230 <__assert_fail@plt+0x235c>
   13638:	add	r3, sp, #48	; 0x30
   1363c:	mvn	r2, #0
   13640:	mov	r1, r5
   13644:	mov	r0, r4
   13648:	bl	13024 <__assert_fail@plt+0x2150>
   1364c:	add	sp, sp, #100	; 0x64
   13650:	pop	{r4, r5, pc}
   13654:	push	{r4, r5, r6, r7, lr}
   13658:	mov	r4, r0
   1365c:	ldr	lr, [pc, #84]	; 136b8 <__assert_fail@plt+0x27e4>
   13660:	mov	r6, r1
   13664:	mov	r7, r2
   13668:	mov	r5, r3
   1366c:	ldm	lr!, {r0, r1, r2, r3}
   13670:	sub	sp, sp, #52	; 0x34
   13674:	mov	ip, sp
   13678:	stmia	ip!, {r0, r1, r2, r3}
   1367c:	ldm	lr!, {r0, r1, r2, r3}
   13680:	stmia	ip!, {r0, r1, r2, r3}
   13684:	ldm	lr, {r0, r1, r2, r3}
   13688:	stm	ip, {r0, r1, r2, r3}
   1368c:	mov	r2, r7
   13690:	mov	r1, r6
   13694:	mov	r0, sp
   13698:	bl	1328c <__assert_fail@plt+0x23b8>
   1369c:	mov	r3, sp
   136a0:	ldr	r2, [sp, #72]	; 0x48
   136a4:	mov	r1, r5
   136a8:	mov	r0, r4
   136ac:	bl	13024 <__assert_fail@plt+0x2150>
   136b0:	add	sp, sp, #52	; 0x34
   136b4:	pop	{r4, r5, r6, r7, pc}
   136b8:	andeq	r6, r2, r4, ror r2
   136bc:	mvn	ip, #0
   136c0:	push	{r0, r1, r2, lr}
   136c4:	str	ip, [sp]
   136c8:	bl	13654 <__assert_fail@plt+0x2780>
   136cc:	add	sp, sp, #12
   136d0:	pop	{pc}		; (ldr pc, [sp], #4)
   136d4:	mov	r3, r2
   136d8:	mov	r2, r1
   136dc:	mov	r1, r0
   136e0:	mov	r0, #0
   136e4:	b	136bc <__assert_fail@plt+0x27e8>
   136e8:	push	{r0, r1, r2, lr}
   136ec:	str	r3, [sp]
   136f0:	mov	r3, r2
   136f4:	mov	r2, r1
   136f8:	mov	r1, r0
   136fc:	mov	r0, #0
   13700:	bl	13654 <__assert_fail@plt+0x2780>
   13704:	add	sp, sp, #12
   13708:	pop	{pc}		; (ldr pc, [sp], #4)
   1370c:	ldr	r3, [pc]	; 13714 <__assert_fail@plt+0x2840>
   13710:	b	13024 <__assert_fail@plt+0x2150>
   13714:	andeq	r6, r2, r0, lsl #2
   13718:	mov	r2, r1
   1371c:	mov	r1, r0
   13720:	mov	r0, #0
   13724:	b	1370c <__assert_fail@plt+0x2838>
   13728:	mvn	r2, #0
   1372c:	b	1370c <__assert_fail@plt+0x2838>
   13730:	mov	r1, r0
   13734:	mov	r0, #0
   13738:	b	13728 <__assert_fail@plt+0x2854>
   1373c:	mov	r3, #0
   13740:	str	r3, [r0]
   13744:	str	r3, [r0, #4]
   13748:	bx	lr
   1374c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13750:	sub	sp, sp, #52	; 0x34
   13754:	add	r6, sp, #16
   13758:	mov	r4, r1
   1375c:	mov	r5, r2
   13760:	mov	r1, #0
   13764:	mov	r8, r0
   13768:	mov	r2, #32
   1376c:	mov	r0, r6
   13770:	mov	r7, r3
   13774:	add	r5, r4, r5
   13778:	bl	10e2c <memset@plt>
   1377c:	mov	r1, r4
   13780:	mov	ip, #1
   13784:	cmp	r1, r5
   13788:	bne	13818 <__assert_fail@plt+0x2944>
   1378c:	mov	r0, r8
   13790:	bl	10d00 <getc_unlocked@plt>
   13794:	cmp	r0, #0
   13798:	mov	r5, r0
   1379c:	bge	13834 <__assert_fail@plt+0x2960>
   137a0:	ldm	r7, {r3, r6}
   137a4:	add	r9, sp, #48	; 0x30
   137a8:	mov	r4, #0
   137ac:	mov	sl, #1
   137b0:	mvn	fp, #0
   137b4:	str	r3, [r9, #-36]!	; 0xffffffdc
   137b8:	clz	r3, r4
   137bc:	lsr	r3, r3, #5
   137c0:	ands	r3, r3, r5, lsr #31
   137c4:	bne	13890 <__assert_fail@plt+0x29bc>
   137c8:	ldr	r3, [sp, #12]
   137cc:	cmp	r4, r3
   137d0:	bne	137f0 <__assert_fail@plt+0x291c>
   137d4:	mov	r0, r6
   137d8:	str	sl, [sp]
   137dc:	mov	r3, fp
   137e0:	mov	r2, #1
   137e4:	mov	r1, r9
   137e8:	bl	14034 <__assert_fail@plt+0x3160>
   137ec:	mov	r6, r0
   137f0:	cmp	r5, #0
   137f4:	bge	13858 <__assert_fail@plt+0x2984>
   137f8:	mov	r3, #0
   137fc:	strb	r3, [r6, r4]
   13800:	ldr	r3, [sp, #12]
   13804:	mov	r0, r4
   13808:	str	r6, [r7, #4]
   1380c:	str	r3, [r7]
   13810:	add	sp, sp, #52	; 0x34
   13814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13818:	ldrb	r3, [r1], #1
   1381c:	lsr	r0, r3, #5
   13820:	and	r3, r3, #31
   13824:	ldr	r2, [r6, r0, lsl #2]
   13828:	orr	r3, r2, ip, lsl r3
   1382c:	str	r3, [r6, r0, lsl #2]
   13830:	b	13784 <__assert_fail@plt+0x28b0>
   13834:	lsr	r2, r0, #5
   13838:	add	r3, sp, #48	; 0x30
   1383c:	add	r2, r3, r2, lsl #2
   13840:	and	r3, r0, #31
   13844:	ldr	r2, [r2, #-32]	; 0xffffffe0
   13848:	lsr	r3, r2, r3
   1384c:	tst	r3, #1
   13850:	bne	1378c <__assert_fail@plt+0x28b8>
   13854:	b	137a0 <__assert_fail@plt+0x28cc>
   13858:	lsr	r2, r5, #5
   1385c:	add	r3, sp, #48	; 0x30
   13860:	add	r2, r3, r2, lsl #2
   13864:	and	r3, r5, #31
   13868:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1386c:	lsr	r3, r2, r3
   13870:	tst	r3, #1
   13874:	bne	137f8 <__assert_fail@plt+0x2924>
   13878:	strb	r5, [r6, r4]
   1387c:	mov	r0, r8
   13880:	bl	10d00 <getc_unlocked@plt>
   13884:	add	r4, r4, #1
   13888:	mov	r5, r0
   1388c:	b	137b8 <__assert_fail@plt+0x28e4>
   13890:	mvn	r0, #0
   13894:	b	13810 <__assert_fail@plt+0x293c>
   13898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1389c:	cmp	r1, #0
   138a0:	sub	sp, sp, #36	; 0x24
   138a4:	mov	r8, r0
   138a8:	addne	r0, r1, #1
   138ac:	moveq	r0, #64	; 0x40
   138b0:	mov	r1, #4
   138b4:	mov	r9, r2
   138b8:	mov	sl, r3
   138bc:	str	r0, [sp, #20]
   138c0:	bl	13f9c <__assert_fail@plt+0x30c8>
   138c4:	mov	r1, #4
   138c8:	mov	fp, #4
   138cc:	mov	r4, #0
   138d0:	mov	r6, r0
   138d4:	ldr	r0, [sp, #20]
   138d8:	bl	13f9c <__assert_fail@plt+0x30c8>
   138dc:	str	r4, [sp, #24]
   138e0:	str	r4, [sp, #28]
   138e4:	mov	r5, r0
   138e8:	add	r3, sp, #24
   138ec:	mov	r2, sl
   138f0:	mov	r1, r9
   138f4:	mov	r0, r8
   138f8:	bl	1374c <__assert_fail@plt+0x2878>
   138fc:	ldr	r3, [sp, #20]
   13900:	cmp	r4, r3
   13904:	mov	r7, r0
   13908:	blt	1393c <__assert_fail@plt+0x2a68>
   1390c:	mvn	r3, #0
   13910:	mov	r2, #1
   13914:	add	r1, sp, #20
   13918:	mov	r0, r6
   1391c:	str	fp, [sp]
   13920:	bl	14034 <__assert_fail@plt+0x3160>
   13924:	mov	r2, #4
   13928:	ldr	r1, [sp, #20]
   1392c:	mov	r6, r0
   13930:	mov	r0, r5
   13934:	bl	13f40 <__assert_fail@plt+0x306c>
   13938:	mov	r5, r0
   1393c:	cmn	r7, #1
   13940:	bne	13988 <__assert_fail@plt+0x2ab4>
   13944:	mov	r3, #0
   13948:	str	r3, [r6, r4, lsl #2]
   1394c:	ldr	r0, [sp, #28]
   13950:	str	r3, [r5, r4, lsl #2]
   13954:	bl	11d10 <__assert_fail@plt+0xe3c>
   13958:	ldr	r3, [sp, #72]	; 0x48
   1395c:	str	r6, [r3]
   13960:	ldr	r3, [sp, #76]	; 0x4c
   13964:	cmp	r3, #0
   13968:	ldrne	r3, [sp, #76]	; 0x4c
   1396c:	strne	r5, [r3]
   13970:	bne	1397c <__assert_fail@plt+0x2aa8>
   13974:	mov	r0, r5
   13978:	bl	11d10 <__assert_fail@plt+0xe3c>
   1397c:	mov	r0, r4
   13980:	add	sp, sp, #36	; 0x24
   13984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13988:	add	r2, r7, #1
   1398c:	mov	r1, #1
   13990:	mov	r0, r2
   13994:	str	r2, [sp, #12]
   13998:	bl	13f9c <__assert_fail@plt+0x30c8>
   1399c:	str	r7, [r5, r4, lsl #2]
   139a0:	ldr	r2, [sp, #12]
   139a4:	ldr	r1, [sp, #28]
   139a8:	bl	10cd0 <memcpy@plt>
   139ac:	str	r0, [r6, r4, lsl #2]
   139b0:	add	r4, r4, #1
   139b4:	b	138e8 <__assert_fail@plt+0x2a14>
   139b8:	push	{r4, r5, r6, lr}
   139bc:	sub	sp, sp, #32
   139c0:	cmp	r1, #0
   139c4:	mov	r5, r0
   139c8:	ldr	r4, [sp, #48]	; 0x30
   139cc:	ldr	r6, [sp, #52]	; 0x34
   139d0:	beq	13a84 <__assert_fail@plt+0x2bb0>
   139d4:	stm	sp, {r2, r3}
   139d8:	mov	r3, r1
   139dc:	ldr	r2, [pc, #860]	; 13d40 <__assert_fail@plt+0x2e6c>
   139e0:	mov	r1, #1
   139e4:	bl	10e50 <__fprintf_chk@plt>
   139e8:	mov	r2, #5
   139ec:	ldr	r1, [pc, #848]	; 13d44 <__assert_fail@plt+0x2e70>
   139f0:	mov	r0, #0
   139f4:	bl	10d0c <dcgettext@plt>
   139f8:	ldr	r3, [pc, #840]	; 13d48 <__assert_fail@plt+0x2e74>
   139fc:	ldr	r2, [pc, #840]	; 13d4c <__assert_fail@plt+0x2e78>
   13a00:	str	r3, [sp]
   13a04:	mov	r1, #1
   13a08:	mov	r3, r0
   13a0c:	mov	r0, r5
   13a10:	bl	10e50 <__fprintf_chk@plt>
   13a14:	mov	r1, r5
   13a18:	mov	r0, #10
   13a1c:	bl	10cf4 <fputc_unlocked@plt>
   13a20:	mov	r2, #5
   13a24:	ldr	r1, [pc, #804]	; 13d50 <__assert_fail@plt+0x2e7c>
   13a28:	mov	r0, #0
   13a2c:	bl	10d0c <dcgettext@plt>
   13a30:	mov	r1, #1
   13a34:	ldr	r3, [pc, #792]	; 13d54 <__assert_fail@plt+0x2e80>
   13a38:	mov	r2, r0
   13a3c:	mov	r0, r5
   13a40:	bl	10e50 <__fprintf_chk@plt>
   13a44:	mov	r1, r5
   13a48:	mov	r0, #10
   13a4c:	bl	10cf4 <fputc_unlocked@plt>
   13a50:	cmp	r6, #9
   13a54:	ldrls	pc, [pc, r6, lsl #2]
   13a58:	b	13d34 <__assert_fail@plt+0x2e60>
   13a5c:	andeq	r3, r1, r4, ror fp
   13a60:	muleq	r1, ip, sl
   13a64:	andeq	r3, r1, r8, asr #21
   13a68:	strdeq	r3, [r1], -ip
   13a6c:	andeq	r3, r1, r8, lsr fp
   13a70:	andeq	r3, r1, ip, ror fp
   13a74:	andeq	r3, r1, r4, asr #23
   13a78:	andeq	r3, r1, r4, lsl ip
   13a7c:	andeq	r3, r1, ip, ror #24
   13a80:	andeq	r3, r1, ip, asr #25
   13a84:	str	r3, [sp]
   13a88:	mov	r1, #1
   13a8c:	mov	r3, r2
   13a90:	ldr	r2, [pc, #704]	; 13d58 <__assert_fail@plt+0x2e84>
   13a94:	bl	10e50 <__fprintf_chk@plt>
   13a98:	b	139e8 <__assert_fail@plt+0x2b14>
   13a9c:	mov	r2, #5
   13aa0:	ldr	r1, [pc, #692]	; 13d5c <__assert_fail@plt+0x2e88>
   13aa4:	mov	r0, #0
   13aa8:	bl	10d0c <dcgettext@plt>
   13aac:	ldr	r3, [r4]
   13ab0:	mov	r1, #1
   13ab4:	mov	r2, r0
   13ab8:	mov	r0, r5
   13abc:	add	sp, sp, #32
   13ac0:	pop	{r4, r5, r6, lr}
   13ac4:	b	10e50 <__fprintf_chk@plt>
   13ac8:	mov	r2, #5
   13acc:	ldr	r1, [pc, #652]	; 13d60 <__assert_fail@plt+0x2e8c>
   13ad0:	mov	r0, #0
   13ad4:	bl	10d0c <dcgettext@plt>
   13ad8:	ldr	r3, [r4, #4]
   13adc:	mov	r1, #1
   13ae0:	str	r3, [sp, #48]	; 0x30
   13ae4:	ldr	r3, [r4]
   13ae8:	mov	r2, r0
   13aec:	mov	r0, r5
   13af0:	add	sp, sp, #32
   13af4:	pop	{r4, r5, r6, lr}
   13af8:	b	10e50 <__fprintf_chk@plt>
   13afc:	mov	r2, #5
   13b00:	ldr	r1, [pc, #604]	; 13d64 <__assert_fail@plt+0x2e90>
   13b04:	mov	r0, #0
   13b08:	bl	10d0c <dcgettext@plt>
   13b0c:	ldr	r3, [r4, #8]
   13b10:	mov	r1, #1
   13b14:	str	r3, [sp, #52]	; 0x34
   13b18:	ldr	r3, [r4, #4]
   13b1c:	str	r3, [sp, #48]	; 0x30
   13b20:	ldr	r3, [r4]
   13b24:	mov	r2, r0
   13b28:	mov	r0, r5
   13b2c:	add	sp, sp, #32
   13b30:	pop	{r4, r5, r6, lr}
   13b34:	b	10e50 <__fprintf_chk@plt>
   13b38:	mov	r2, #5
   13b3c:	ldr	r1, [pc, #548]	; 13d68 <__assert_fail@plt+0x2e94>
   13b40:	mov	r0, #0
   13b44:	bl	10d0c <dcgettext@plt>
   13b48:	ldr	r3, [r4, #12]
   13b4c:	mov	r1, #1
   13b50:	str	r3, [sp, #8]
   13b54:	ldr	r3, [r4, #8]
   13b58:	str	r3, [sp, #4]
   13b5c:	ldr	r3, [r4, #4]
   13b60:	str	r3, [sp]
   13b64:	ldr	r3, [r4]
   13b68:	mov	r2, r0
   13b6c:	mov	r0, r5
   13b70:	bl	10e50 <__fprintf_chk@plt>
   13b74:	add	sp, sp, #32
   13b78:	pop	{r4, r5, r6, pc}
   13b7c:	mov	r2, #5
   13b80:	ldr	r1, [pc, #484]	; 13d6c <__assert_fail@plt+0x2e98>
   13b84:	mov	r0, #0
   13b88:	bl	10d0c <dcgettext@plt>
   13b8c:	ldr	r3, [r4, #16]
   13b90:	mov	r1, #1
   13b94:	str	r3, [sp, #12]
   13b98:	ldr	r3, [r4, #12]
   13b9c:	str	r3, [sp, #8]
   13ba0:	ldr	r3, [r4, #8]
   13ba4:	str	r3, [sp, #4]
   13ba8:	ldr	r3, [r4, #4]
   13bac:	str	r3, [sp]
   13bb0:	ldr	r3, [r4]
   13bb4:	mov	r2, r0
   13bb8:	mov	r0, r5
   13bbc:	bl	10e50 <__fprintf_chk@plt>
   13bc0:	b	13b74 <__assert_fail@plt+0x2ca0>
   13bc4:	mov	r2, #5
   13bc8:	ldr	r1, [pc, #416]	; 13d70 <__assert_fail@plt+0x2e9c>
   13bcc:	mov	r0, #0
   13bd0:	bl	10d0c <dcgettext@plt>
   13bd4:	ldr	r3, [r4, #20]
   13bd8:	mov	r1, #1
   13bdc:	str	r3, [sp, #16]
   13be0:	ldr	r3, [r4, #16]
   13be4:	str	r3, [sp, #12]
   13be8:	ldr	r3, [r4, #12]
   13bec:	str	r3, [sp, #8]
   13bf0:	ldr	r3, [r4, #8]
   13bf4:	str	r3, [sp, #4]
   13bf8:	ldr	r3, [r4, #4]
   13bfc:	str	r3, [sp]
   13c00:	ldr	r3, [r4]
   13c04:	mov	r2, r0
   13c08:	mov	r0, r5
   13c0c:	bl	10e50 <__fprintf_chk@plt>
   13c10:	b	13b74 <__assert_fail@plt+0x2ca0>
   13c14:	mov	r2, #5
   13c18:	ldr	r1, [pc, #340]	; 13d74 <__assert_fail@plt+0x2ea0>
   13c1c:	mov	r0, #0
   13c20:	bl	10d0c <dcgettext@plt>
   13c24:	ldr	r3, [r4, #24]
   13c28:	mov	r1, #1
   13c2c:	str	r3, [sp, #20]
   13c30:	ldr	r3, [r4, #20]
   13c34:	str	r3, [sp, #16]
   13c38:	ldr	r3, [r4, #16]
   13c3c:	str	r3, [sp, #12]
   13c40:	ldr	r3, [r4, #12]
   13c44:	str	r3, [sp, #8]
   13c48:	ldr	r3, [r4, #8]
   13c4c:	str	r3, [sp, #4]
   13c50:	ldr	r3, [r4, #4]
   13c54:	str	r3, [sp]
   13c58:	ldr	r3, [r4]
   13c5c:	mov	r2, r0
   13c60:	mov	r0, r5
   13c64:	bl	10e50 <__fprintf_chk@plt>
   13c68:	b	13b74 <__assert_fail@plt+0x2ca0>
   13c6c:	mov	r2, #5
   13c70:	ldr	r1, [pc, #256]	; 13d78 <__assert_fail@plt+0x2ea4>
   13c74:	mov	r0, #0
   13c78:	bl	10d0c <dcgettext@plt>
   13c7c:	ldr	r3, [r4, #28]
   13c80:	mov	r1, #1
   13c84:	str	r3, [sp, #24]
   13c88:	ldr	r3, [r4, #24]
   13c8c:	str	r3, [sp, #20]
   13c90:	ldr	r3, [r4, #20]
   13c94:	str	r3, [sp, #16]
   13c98:	ldr	r3, [r4, #16]
   13c9c:	str	r3, [sp, #12]
   13ca0:	ldr	r3, [r4, #12]
   13ca4:	str	r3, [sp, #8]
   13ca8:	ldr	r3, [r4, #8]
   13cac:	str	r3, [sp, #4]
   13cb0:	ldr	r3, [r4, #4]
   13cb4:	str	r3, [sp]
   13cb8:	ldr	r3, [r4]
   13cbc:	mov	r2, r0
   13cc0:	mov	r0, r5
   13cc4:	bl	10e50 <__fprintf_chk@plt>
   13cc8:	b	13b74 <__assert_fail@plt+0x2ca0>
   13ccc:	ldr	r1, [pc, #168]	; 13d7c <__assert_fail@plt+0x2ea8>
   13cd0:	mov	r2, #5
   13cd4:	mov	r0, #0
   13cd8:	bl	10d0c <dcgettext@plt>
   13cdc:	ldr	r3, [r4, #32]
   13ce0:	mov	r1, #1
   13ce4:	str	r3, [sp, #28]
   13ce8:	ldr	r3, [r4, #28]
   13cec:	str	r3, [sp, #24]
   13cf0:	ldr	r3, [r4, #24]
   13cf4:	str	r3, [sp, #20]
   13cf8:	ldr	r3, [r4, #20]
   13cfc:	str	r3, [sp, #16]
   13d00:	ldr	r3, [r4, #16]
   13d04:	str	r3, [sp, #12]
   13d08:	ldr	r3, [r4, #12]
   13d0c:	str	r3, [sp, #8]
   13d10:	ldr	r3, [r4, #8]
   13d14:	str	r3, [sp, #4]
   13d18:	ldr	r3, [r4, #4]
   13d1c:	str	r3, [sp]
   13d20:	ldr	r3, [r4]
   13d24:	mov	r2, r0
   13d28:	mov	r0, r5
   13d2c:	bl	10e50 <__fprintf_chk@plt>
   13d30:	b	13b74 <__assert_fail@plt+0x2ca0>
   13d34:	mov	r2, #5
   13d38:	ldr	r1, [pc, #64]	; 13d80 <__assert_fail@plt+0x2eac>
   13d3c:	b	13cd4 <__assert_fail@plt+0x2e00>
   13d40:	strheq	r5, [r1], -r1
   13d44:	andeq	r5, r1, r4, asr #1
   13d48:	andeq	r0, r0, r6, ror #15
   13d4c:	muleq	r1, r2, r3
   13d50:	andeq	r5, r1, r8, asr #1
   13d54:	andeq	r5, r1, r3, ror r1
   13d58:	strheq	r5, [r1], -sp
   13d5c:	muleq	r1, r5, r1
   13d60:	andeq	r5, r1, r5, lsr #3
   13d64:			; <UNDEFINED> instruction: 0x000151bc
   13d68:	ldrdeq	r5, [r1], -r8
   13d6c:	strdeq	r5, [r1], -r8
   13d70:	andeq	r5, r1, ip, lsl r2
   13d74:	andeq	r5, r1, r4, asr #4
   13d78:	andeq	r5, r1, r0, ror r2
   13d7c:	andeq	r5, r1, r0, lsr #5
   13d80:	ldrdeq	r5, [r1], -r4
   13d84:	push	{r0, r1, r4, lr}
   13d88:	mov	ip, #0
   13d8c:	ldr	lr, [sp, #16]
   13d90:	ldr	r4, [lr, ip, lsl #2]
   13d94:	cmp	r4, #0
   13d98:	bne	13db0 <__assert_fail@plt+0x2edc>
   13d9c:	str	ip, [sp, #4]
   13da0:	str	lr, [sp]
   13da4:	bl	139b8 <__assert_fail@plt+0x2ae4>
   13da8:	add	sp, sp, #8
   13dac:	pop	{r4, pc}
   13db0:	add	ip, ip, #1
   13db4:	b	13d90 <__assert_fail@plt+0x2ebc>
   13db8:	push	{r4, r5, lr}
   13dbc:	sub	sp, sp, #52	; 0x34
   13dc0:	mov	ip, #0
   13dc4:	ldr	r5, [sp, #64]	; 0x40
   13dc8:	add	lr, sp, #8
   13dcc:	ldr	r4, [r5, ip, lsl #2]
   13dd0:	cmp	r4, #0
   13dd4:	str	r4, [lr, ip, lsl #2]
   13dd8:	beq	13de8 <__assert_fail@plt+0x2f14>
   13ddc:	add	ip, ip, #1
   13de0:	cmp	ip, #10
   13de4:	bne	13dcc <__assert_fail@plt+0x2ef8>
   13de8:	str	ip, [sp, #4]
   13dec:	str	lr, [sp]
   13df0:	bl	139b8 <__assert_fail@plt+0x2ae4>
   13df4:	add	sp, sp, #52	; 0x34
   13df8:	pop	{r4, r5, pc}
   13dfc:	push	{r3}		; (str r3, [sp, #-4]!)
   13e00:	push	{r0, r1, r2, r3, lr}
   13e04:	add	r3, sp, #24
   13e08:	str	r3, [sp, #12]
   13e0c:	str	r3, [sp]
   13e10:	ldr	r3, [sp, #20]
   13e14:	bl	13db8 <__assert_fail@plt+0x2ee4>
   13e18:	add	sp, sp, #16
   13e1c:	pop	{lr}		; (ldr lr, [sp], #4)
   13e20:	add	sp, sp, #4
   13e24:	bx	lr
   13e28:	ldr	r3, [pc, #116]	; 13ea4 <__assert_fail@plt+0x2fd0>
   13e2c:	push	{r4, lr}
   13e30:	mov	r0, #10
   13e34:	ldr	r1, [r3]
   13e38:	bl	10cf4 <fputc_unlocked@plt>
   13e3c:	mov	r2, #5
   13e40:	ldr	r1, [pc, #96]	; 13ea8 <__assert_fail@plt+0x2fd4>
   13e44:	mov	r0, #0
   13e48:	bl	10d0c <dcgettext@plt>
   13e4c:	ldr	r2, [pc, #88]	; 13eac <__assert_fail@plt+0x2fd8>
   13e50:	mov	r1, r0
   13e54:	mov	r0, #1
   13e58:	bl	10e38 <__printf_chk@plt>
   13e5c:	mov	r2, #5
   13e60:	ldr	r1, [pc, #72]	; 13eb0 <__assert_fail@plt+0x2fdc>
   13e64:	mov	r0, #0
   13e68:	bl	10d0c <dcgettext@plt>
   13e6c:	ldr	r3, [pc, #64]	; 13eb4 <__assert_fail@plt+0x2fe0>
   13e70:	ldr	r2, [pc, #64]	; 13eb8 <__assert_fail@plt+0x2fe4>
   13e74:	mov	r1, r0
   13e78:	mov	r0, #1
   13e7c:	bl	10e38 <__printf_chk@plt>
   13e80:	mov	r2, #5
   13e84:	ldr	r1, [pc, #48]	; 13ebc <__assert_fail@plt+0x2fe8>
   13e88:	mov	r0, #0
   13e8c:	bl	10d0c <dcgettext@plt>
   13e90:	ldr	r2, [pc, #40]	; 13ec0 <__assert_fail@plt+0x2fec>
   13e94:	pop	{r4, lr}
   13e98:	mov	r1, r0
   13e9c:	mov	r0, #1
   13ea0:	b	10e38 <__printf_chk@plt>
   13ea4:	andeq	r6, r2, ip, asr #2
   13ea8:	andeq	r5, r1, r0, lsl r3
   13eac:	andeq	r5, r1, r4, lsr #6
   13eb0:	andeq	r5, r1, sl, lsr r3
   13eb4:	andeq	r4, r1, sp, lsl #26
   13eb8:	andeq	r4, r1, r5, lsr sp
   13ebc:	andeq	r5, r1, lr, asr #6
   13ec0:	andeq	r5, r1, r5, ror r3
   13ec4:	push	{r4, lr}
   13ec8:	bl	143e0 <__assert_fail@plt+0x350c>
   13ecc:	cmp	r0, #0
   13ed0:	popne	{r4, pc}
   13ed4:	bl	14358 <__assert_fail@plt+0x3484>
   13ed8:	push	{r4, lr}
   13edc:	bl	143e0 <__assert_fail@plt+0x350c>
   13ee0:	cmp	r0, #0
   13ee4:	popne	{r4, pc}
   13ee8:	bl	14358 <__assert_fail@plt+0x3484>
   13eec:	b	13ec4 <__assert_fail@plt+0x2ff0>
   13ef0:	push	{r4, r5, r6, lr}
   13ef4:	mov	r5, r0
   13ef8:	mov	r4, r1
   13efc:	bl	14420 <__assert_fail@plt+0x354c>
   13f00:	cmp	r0, #0
   13f04:	popne	{r4, r5, r6, pc}
   13f08:	adds	r4, r4, #0
   13f0c:	movne	r4, #1
   13f10:	cmp	r5, #0
   13f14:	orreq	r4, r4, #1
   13f18:	cmp	r4, #0
   13f1c:	popeq	{r4, r5, r6, pc}
   13f20:	bl	14358 <__assert_fail@plt+0x3484>
   13f24:	push	{r4, lr}
   13f28:	cmp	r1, #0
   13f2c:	orreq	r1, r1, #1
   13f30:	bl	14420 <__assert_fail@plt+0x354c>
   13f34:	cmp	r0, #0
   13f38:	popne	{r4, pc}
   13f3c:	bl	14358 <__assert_fail@plt+0x3484>
   13f40:	push	{r4, r5, r6, lr}
   13f44:	mov	r6, r0
   13f48:	mov	r5, r1
   13f4c:	mov	r4, r2
   13f50:	bl	14570 <__assert_fail@plt+0x369c>
   13f54:	cmp	r0, #0
   13f58:	popne	{r4, r5, r6, pc}
   13f5c:	cmp	r6, #0
   13f60:	beq	13f70 <__assert_fail@plt+0x309c>
   13f64:	cmp	r5, #0
   13f68:	cmpne	r4, #0
   13f6c:	popeq	{r4, r5, r6, pc}
   13f70:	bl	14358 <__assert_fail@plt+0x3484>
   13f74:	b	13f40 <__assert_fail@plt+0x306c>
   13f78:	cmp	r2, #0
   13f7c:	cmpne	r1, #0
   13f80:	moveq	r2, #1
   13f84:	moveq	r1, r2
   13f88:	push	{r4, lr}
   13f8c:	bl	14570 <__assert_fail@plt+0x369c>
   13f90:	cmp	r0, #0
   13f94:	popne	{r4, pc}
   13f98:	bl	14358 <__assert_fail@plt+0x3484>
   13f9c:	mov	r2, r1
   13fa0:	mov	r1, r0
   13fa4:	mov	r0, #0
   13fa8:	b	13f40 <__assert_fail@plt+0x306c>
   13fac:	mov	r2, r1
   13fb0:	mov	r1, r0
   13fb4:	mov	r0, #0
   13fb8:	b	13f78 <__assert_fail@plt+0x30a4>
   13fbc:	push	{r4, r5, r6, r7, r8, lr}
   13fc0:	subs	r7, r0, #0
   13fc4:	mov	r5, r1
   13fc8:	mov	r6, r2
   13fcc:	ldr	r4, [r1]
   13fd0:	bne	1400c <__assert_fail@plt+0x3138>
   13fd4:	cmp	r4, #0
   13fd8:	bne	13ff4 <__assert_fail@plt+0x3120>
   13fdc:	mov	r1, r2
   13fe0:	mov	r0, #64	; 0x40
   13fe4:	bl	1469c <__assert_fail@plt+0x37c8>
   13fe8:	cmp	r0, #0
   13fec:	movne	r4, r0
   13ff0:	addeq	r4, r0, #1
   13ff4:	mov	r2, r6
   13ff8:	mov	r1, r4
   13ffc:	mov	r0, r7
   14000:	bl	13f40 <__assert_fail@plt+0x306c>
   14004:	str	r4, [r5]
   14008:	pop	{r4, r5, r6, r7, r8, pc}
   1400c:	lsr	r2, r4, #1
   14010:	add	r3, r2, #1
   14014:	mvn	r3, r3
   14018:	cmp	r4, r3
   1401c:	addls	r4, r4, #1
   14020:	addls	r4, r4, r2
   14024:	bls	13ff4 <__assert_fail@plt+0x3120>
   14028:	bl	14358 <__assert_fail@plt+0x3484>
   1402c:	mov	r2, #1
   14030:	b	13fbc <__assert_fail@plt+0x30e8>
   14034:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14038:	mov	sl, r0
   1403c:	ldr	r8, [r1]
   14040:	mov	fp, r1
   14044:	mov	r5, r2
   14048:	asrs	r4, r8, #1
   1404c:	mov	r9, r3
   14050:	ldr	r7, [sp, #48]	; 0x30
   14054:	bpl	140f0 <__assert_fail@plt+0x321c>
   14058:	rsb	r2, r4, #-2147483648	; 0x80000000
   1405c:	cmp	r8, r2
   14060:	movge	r2, #0
   14064:	movlt	r2, #1
   14068:	mvn	r3, r9
   1406c:	cmp	r2, #0
   14070:	lsr	r3, r3, #31
   14074:	addeq	r4, r4, r8
   14078:	mvnne	r4, #-2147483648	; 0x80000000
   1407c:	mov	r0, r3
   14080:	cmp	r9, r4
   14084:	movge	r0, #0
   14088:	andlt	r0, r0, #1
   1408c:	cmp	r0, #0
   14090:	str	r3, [sp, #4]
   14094:	bne	14264 <__assert_fail@plt+0x3390>
   14098:	cmp	r7, #0
   1409c:	bge	141b0 <__assert_fail@plt+0x32dc>
   140a0:	cmp	r4, #0
   140a4:	bge	14108 <__assert_fail@plt+0x3234>
   140a8:	mov	r1, r7
   140ac:	mvn	r0, #-2147483648	; 0x80000000
   140b0:	bl	148a8 <__assert_fail@plt+0x39d4>
   140b4:	cmp	r0, r4
   140b8:	movle	r0, #0
   140bc:	movgt	r0, #1
   140c0:	cmp	r0, #0
   140c4:	mvnne	r6, #-2147483648	; 0x80000000
   140c8:	beq	14118 <__assert_fail@plt+0x3244>
   140cc:	mov	r1, r7
   140d0:	mov	r0, r6
   140d4:	bl	148a8 <__assert_fail@plt+0x39d4>
   140d8:	mov	r1, r7
   140dc:	mov	r4, r0
   140e0:	mov	r0, r6
   140e4:	bl	14ac8 <__assert_fail@plt+0x3bf4>
   140e8:	sub	r1, r6, r1
   140ec:	b	14128 <__assert_fail@plt+0x3254>
   140f0:	mvn	r2, #-2147483648	; 0x80000000
   140f4:	sub	r2, r2, r4
   140f8:	cmp	r8, r2
   140fc:	movle	r2, #0
   14100:	movgt	r2, #1
   14104:	b	14068 <__assert_fail@plt+0x3194>
   14108:	cmn	r7, #1
   1410c:	movne	r1, r7
   14110:	movne	r0, #-2147483648	; 0x80000000
   14114:	bne	1427c <__assert_fail@plt+0x33a8>
   14118:	mul	r1, r7, r4
   1411c:	cmp	r1, #63	; 0x3f
   14120:	movle	r6, #64	; 0x40
   14124:	ble	140cc <__assert_fail@plt+0x31f8>
   14128:	cmp	sl, #0
   1412c:	sub	r2, r4, r8
   14130:	streq	sl, [fp]
   14134:	cmp	r2, r5
   14138:	bge	1420c <__assert_fail@plt+0x3338>
   1413c:	cmp	r5, #0
   14140:	bge	141d8 <__assert_fail@plt+0x3304>
   14144:	rsb	r2, r5, #-2147483648	; 0x80000000
   14148:	cmp	r8, r2
   1414c:	movge	r2, #0
   14150:	movlt	r2, #1
   14154:	cmp	r2, #0
   14158:	bne	141ac <__assert_fail@plt+0x32d8>
   1415c:	ldr	r0, [sp, #4]
   14160:	add	r5, r8, r5
   14164:	cmp	r9, r5
   14168:	movge	r0, #0
   1416c:	andlt	r0, r0, #1
   14170:	cmp	r0, #0
   14174:	mov	r4, r5
   14178:	bne	141ac <__assert_fail@plt+0x32d8>
   1417c:	cmp	r7, #0
   14180:	bge	14220 <__assert_fail@plt+0x334c>
   14184:	cmp	r5, #0
   14188:	bge	141f8 <__assert_fail@plt+0x3324>
   1418c:	mov	r1, r7
   14190:	mvn	r0, #-2147483648	; 0x80000000
   14194:	bl	148a8 <__assert_fail@plt+0x39d4>
   14198:	cmp	r5, r0
   1419c:	movge	r0, #0
   141a0:	movlt	r0, #1
   141a4:	cmp	r0, #0
   141a8:	beq	14208 <__assert_fail@plt+0x3334>
   141ac:	bl	14358 <__assert_fail@plt+0x3484>
   141b0:	beq	14118 <__assert_fail@plt+0x3244>
   141b4:	cmp	r4, #0
   141b8:	bge	14274 <__assert_fail@plt+0x33a0>
   141bc:	cmn	r4, #1
   141c0:	beq	14118 <__assert_fail@plt+0x3244>
   141c4:	mov	r1, r4
   141c8:	mov	r0, #-2147483648	; 0x80000000
   141cc:	bl	148a8 <__assert_fail@plt+0x39d4>
   141d0:	cmp	r7, r0
   141d4:	b	140b8 <__assert_fail@plt+0x31e4>
   141d8:	cmp	r8, #0
   141dc:	blt	1415c <__assert_fail@plt+0x3288>
   141e0:	mvn	r2, #-2147483648	; 0x80000000
   141e4:	sub	r2, r2, r5
   141e8:	cmp	r8, r2
   141ec:	movle	r2, #0
   141f0:	movgt	r2, #1
   141f4:	b	14154 <__assert_fail@plt+0x3280>
   141f8:	cmn	r7, #1
   141fc:	movne	r1, r7
   14200:	movne	r0, #-2147483648	; 0x80000000
   14204:	bne	14258 <__assert_fail@plt+0x3384>
   14208:	mul	r1, r5, r7
   1420c:	mov	r0, sl
   14210:	bl	13ef0 <__assert_fail@plt+0x301c>
   14214:	str	r4, [fp]
   14218:	add	sp, sp, #12
   1421c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14220:	beq	14208 <__assert_fail@plt+0x3334>
   14224:	cmp	r5, #0
   14228:	movge	r1, r7
   1422c:	mvnge	r0, #-2147483648	; 0x80000000
   14230:	bge	14258 <__assert_fail@plt+0x3384>
   14234:	cmn	r5, #1
   14238:	beq	14208 <__assert_fail@plt+0x3334>
   1423c:	mov	r1, r5
   14240:	mov	r0, #-2147483648	; 0x80000000
   14244:	bl	148a8 <__assert_fail@plt+0x39d4>
   14248:	cmp	r7, r0
   1424c:	movle	r0, #0
   14250:	movgt	r0, #1
   14254:	b	141a4 <__assert_fail@plt+0x32d0>
   14258:	bl	148a8 <__assert_fail@plt+0x39d4>
   1425c:	cmp	r5, r0
   14260:	b	1424c <__assert_fail@plt+0x3378>
   14264:	cmp	r7, #0
   14268:	mov	r4, r9
   1426c:	blt	14108 <__assert_fail@plt+0x3234>
   14270:	beq	14118 <__assert_fail@plt+0x3244>
   14274:	mov	r1, r7
   14278:	mvn	r0, #-2147483648	; 0x80000000
   1427c:	bl	148a8 <__assert_fail@plt+0x39d4>
   14280:	cmp	r0, r4
   14284:	movge	r0, #0
   14288:	movlt	r0, #1
   1428c:	b	140c0 <__assert_fail@plt+0x31ec>
   14290:	push	{r4, lr}
   14294:	bl	14398 <__assert_fail@plt+0x34c4>
   14298:	cmp	r0, #0
   1429c:	popne	{r4, pc}
   142a0:	bl	14358 <__assert_fail@plt+0x3484>
   142a4:	mov	r1, #1
   142a8:	b	14290 <__assert_fail@plt+0x33bc>
   142ac:	push	{r4, lr}
   142b0:	bl	14398 <__assert_fail@plt+0x34c4>
   142b4:	cmp	r0, #0
   142b8:	popne	{r4, pc}
   142bc:	bl	14358 <__assert_fail@plt+0x3484>
   142c0:	mov	r1, #1
   142c4:	b	142ac <__assert_fail@plt+0x33d8>
   142c8:	push	{r4, r5, r6, lr}
   142cc:	mov	r4, r1
   142d0:	mov	r5, r0
   142d4:	mov	r0, r1
   142d8:	bl	13ec4 <__assert_fail@plt+0x2ff0>
   142dc:	mov	r2, r4
   142e0:	mov	r1, r5
   142e4:	pop	{r4, r5, r6, lr}
   142e8:	b	10cd0 <memcpy@plt>
   142ec:	push	{r4, r5, r6, lr}
   142f0:	mov	r4, r1
   142f4:	mov	r5, r0
   142f8:	mov	r0, r1
   142fc:	bl	13ed8 <__assert_fail@plt+0x3004>
   14300:	mov	r2, r4
   14304:	mov	r1, r5
   14308:	pop	{r4, r5, r6, lr}
   1430c:	b	10cd0 <memcpy@plt>
   14310:	push	{r4, r5, r6, lr}
   14314:	mov	r5, r0
   14318:	add	r0, r1, #1
   1431c:	mov	r4, r1
   14320:	bl	13ed8 <__assert_fail@plt+0x3004>
   14324:	mov	r2, #0
   14328:	mov	r1, r5
   1432c:	strb	r2, [r0, r4]
   14330:	mov	r2, r4
   14334:	pop	{r4, r5, r6, lr}
   14338:	b	10cd0 <memcpy@plt>
   1433c:	push	{r4, lr}
   14340:	mov	r4, r0
   14344:	bl	10e08 <strlen@plt>
   14348:	add	r1, r0, #1
   1434c:	mov	r0, r4
   14350:	pop	{r4, lr}
   14354:	b	142c8 <__assert_fail@plt+0x33f4>
   14358:	ldr	r3, [pc, #44]	; 1438c <__assert_fail@plt+0x34b8>
   1435c:	push	{r4, lr}
   14360:	mov	r2, #5
   14364:	ldr	r1, [pc, #36]	; 14390 <__assert_fail@plt+0x34bc>
   14368:	mov	r0, #0
   1436c:	ldr	r4, [r3]
   14370:	bl	10d0c <dcgettext@plt>
   14374:	ldr	r2, [pc, #24]	; 14394 <__assert_fail@plt+0x34c0>
   14378:	mov	r1, #0
   1437c:	mov	r3, r0
   14380:	mov	r0, r4
   14384:	bl	10d84 <error@plt>
   14388:	bl	10ebc <abort@plt>
   1438c:	andeq	r6, r2, ip, ror #1
   14390:	andeq	r5, r1, r1, asr #7
   14394:	andeq	r4, r1, r8, ror #30
   14398:	cmp	r1, #0
   1439c:	cmpne	r0, #0
   143a0:	moveq	r1, #1
   143a4:	moveq	r0, r1
   143a8:	umull	r2, r3, r0, r1
   143ac:	adds	r3, r3, #0
   143b0:	movne	r3, #1
   143b4:	cmp	r2, #0
   143b8:	blt	143c8 <__assert_fail@plt+0x34f4>
   143bc:	cmp	r3, #0
   143c0:	bne	143c8 <__assert_fail@plt+0x34f4>
   143c4:	b	10c70 <calloc@plt>
   143c8:	push	{r4, lr}
   143cc:	bl	10e14 <__errno_location@plt>
   143d0:	mov	r3, #12
   143d4:	str	r3, [r0]
   143d8:	mov	r0, #0
   143dc:	pop	{r4, pc}
   143e0:	cmp	r0, #0
   143e4:	mov	r3, #0
   143e8:	moveq	r0, #1
   143ec:	adds	r3, r3, #0
   143f0:	movne	r3, #1
   143f4:	cmp	r0, #0
   143f8:	blt	14408 <__assert_fail@plt+0x3534>
   143fc:	cmp	r3, #0
   14400:	bne	14408 <__assert_fail@plt+0x3534>
   14404:	b	10da8 <malloc@plt>
   14408:	push	{r4, lr}
   1440c:	bl	10e14 <__errno_location@plt>
   14410:	mov	r3, #12
   14414:	str	r3, [r0]
   14418:	mov	r0, #0
   1441c:	pop	{r4, pc}
   14420:	cmp	r0, #0
   14424:	push	{r4, lr}
   14428:	mov	r4, r1
   1442c:	bne	1443c <__assert_fail@plt+0x3568>
   14430:	mov	r0, r1
   14434:	pop	{r4, lr}
   14438:	b	143e0 <__assert_fail@plt+0x350c>
   1443c:	cmp	r1, #0
   14440:	bne	14450 <__assert_fail@plt+0x357c>
   14444:	bl	11d10 <__assert_fail@plt+0xe3c>
   14448:	mov	r0, #0
   1444c:	pop	{r4, pc}
   14450:	cmp	r1, #0
   14454:	blt	14464 <__assert_fail@plt+0x3590>
   14458:	mov	r3, #0
   1445c:	cmp	r3, r3
   14460:	beq	14474 <__assert_fail@plt+0x35a0>
   14464:	bl	10e14 <__errno_location@plt>
   14468:	mov	r3, #12
   1446c:	str	r3, [r0]
   14470:	b	14448 <__assert_fail@plt+0x3574>
   14474:	pop	{r4, lr}
   14478:	b	10d24 <realloc@plt>
   1447c:	push	{r4, r5, r6, lr}
   14480:	mov	r4, r0
   14484:	bl	10d60 <__fpending@plt>
   14488:	mov	r5, r0
   1448c:	mov	r0, r4
   14490:	bl	10d6c <ferror_unlocked@plt>
   14494:	mov	r6, r0
   14498:	mov	r0, r4
   1449c:	bl	11c18 <__assert_fail@plt+0xd44>
   144a0:	cmp	r6, #0
   144a4:	mov	r4, r0
   144a8:	bne	144d4 <__assert_fail@plt+0x3600>
   144ac:	cmp	r0, #0
   144b0:	beq	144cc <__assert_fail@plt+0x35f8>
   144b4:	cmp	r5, #0
   144b8:	bne	144e4 <__assert_fail@plt+0x3610>
   144bc:	bl	10e14 <__errno_location@plt>
   144c0:	ldr	r4, [r0]
   144c4:	subs	r4, r4, #9
   144c8:	mvnne	r4, #0
   144cc:	mov	r0, r4
   144d0:	pop	{r4, r5, r6, pc}
   144d4:	cmp	r0, #0
   144d8:	bne	144e4 <__assert_fail@plt+0x3610>
   144dc:	bl	10e14 <__errno_location@plt>
   144e0:	str	r4, [r0]
   144e4:	mvn	r4, #0
   144e8:	b	144cc <__assert_fail@plt+0x35f8>
   144ec:	push	{r4, lr}
   144f0:	mov	r0, #14
   144f4:	bl	10e8c <nl_langinfo@plt>
   144f8:	ldr	r3, [pc, #24]	; 14518 <__assert_fail@plt+0x3644>
   144fc:	cmp	r0, #0
   14500:	moveq	r0, r3
   14504:	ldr	r3, [pc, #16]	; 1451c <__assert_fail@plt+0x3648>
   14508:	ldrb	r2, [r0]
   1450c:	cmp	r2, #0
   14510:	moveq	r0, r3
   14514:	pop	{r4, pc}
   14518:	andeq	r4, r1, r6, lsl lr
   1451c:	ldrdeq	r5, [r1], -r2
   14520:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14524:	subs	r5, r0, #0
   14528:	addeq	r5, sp, #4
   1452c:	mov	r0, r5
   14530:	mov	r7, r2
   14534:	mov	r6, r1
   14538:	bl	10d78 <mbrtowc@plt>
   1453c:	cmp	r7, #0
   14540:	cmnne	r0, #3
   14544:	mov	r4, r0
   14548:	bls	14564 <__assert_fail@plt+0x3690>
   1454c:	mov	r0, #0
   14550:	bl	145bc <__assert_fail@plt+0x36e8>
   14554:	cmp	r0, #0
   14558:	moveq	r4, #1
   1455c:	ldrbeq	r3, [r6]
   14560:	streq	r3, [r5]
   14564:	mov	r0, r4
   14568:	add	sp, sp, #12
   1456c:	pop	{r4, r5, r6, r7, pc}
   14570:	push	{r4, r5, r6, lr}
   14574:	subs	r4, r2, #0
   14578:	mov	r6, r0
   1457c:	mov	r5, r1
   14580:	beq	14598 <__assert_fail@plt+0x36c4>
   14584:	mov	r1, r4
   14588:	mvn	r0, #0
   1458c:	bl	1469c <__assert_fail@plt+0x37c8>
   14590:	cmp	r0, r5
   14594:	bcc	145a8 <__assert_fail@plt+0x36d4>
   14598:	mul	r1, r5, r4
   1459c:	mov	r0, r6
   145a0:	pop	{r4, r5, r6, lr}
   145a4:	b	14420 <__assert_fail@plt+0x354c>
   145a8:	bl	10e14 <__errno_location@plt>
   145ac:	mov	r3, #12
   145b0:	str	r3, [r0]
   145b4:	mov	r0, #0
   145b8:	pop	{r4, r5, r6, pc}
   145bc:	push	{lr}		; (str lr, [sp, #-4]!)
   145c0:	sub	sp, sp, #268	; 0x10c
   145c4:	ldr	r2, [pc, #64]	; 1460c <__assert_fail@plt+0x3738>
   145c8:	add	r1, sp, #4
   145cc:	bl	14618 <__assert_fail@plt+0x3744>
   145d0:	cmp	r0, #0
   145d4:	movne	r0, #0
   145d8:	bne	14604 <__assert_fail@plt+0x3730>
   145dc:	ldr	r1, [pc, #44]	; 14610 <__assert_fail@plt+0x373c>
   145e0:	add	r0, sp, #4
   145e4:	bl	10c94 <strcmp@plt>
   145e8:	cmp	r0, #0
   145ec:	beq	14604 <__assert_fail@plt+0x3730>
   145f0:	ldr	r1, [pc, #28]	; 14614 <__assert_fail@plt+0x3740>
   145f4:	add	r0, sp, #4
   145f8:	bl	10c94 <strcmp@plt>
   145fc:	adds	r0, r0, #0
   14600:	movne	r0, #1
   14604:	add	sp, sp, #268	; 0x10c
   14608:	pop	{pc}		; (ldr pc, [sp], #4)
   1460c:	andeq	r0, r0, r1, lsl #2
   14610:	ldrdeq	r5, [r1], -r8
   14614:	ldrdeq	r5, [r1], -sl
   14618:	push	{r4, r5, r6, lr}
   1461c:	mov	r5, r1
   14620:	mov	r1, #0
   14624:	mov	r4, r2
   14628:	bl	10e74 <setlocale@plt>
   1462c:	subs	r6, r0, #0
   14630:	bne	14644 <__assert_fail@plt+0x3770>
   14634:	cmp	r4, #0
   14638:	strbne	r6, [r5]
   1463c:	mov	r0, #22
   14640:	pop	{r4, r5, r6, pc}
   14644:	bl	10e08 <strlen@plt>
   14648:	cmp	r4, r0
   1464c:	bls	14668 <__assert_fail@plt+0x3794>
   14650:	add	r2, r0, #1
   14654:	mov	r1, r6
   14658:	mov	r0, r5
   1465c:	bl	10cd0 <memcpy@plt>
   14660:	mov	r0, #0
   14664:	pop	{r4, r5, r6, pc}
   14668:	cmp	r4, #0
   1466c:	beq	1468c <__assert_fail@plt+0x37b8>
   14670:	sub	r4, r4, #1
   14674:	mov	r2, r4
   14678:	mov	r1, r6
   1467c:	mov	r0, r5
   14680:	bl	10cd0 <memcpy@plt>
   14684:	mov	r3, #0
   14688:	strb	r3, [r5, r4]
   1468c:	mov	r0, #34	; 0x22
   14690:	pop	{r4, r5, r6, pc}
   14694:	mov	r1, #0
   14698:	b	10e74 <setlocale@plt>
   1469c:	subs	r2, r1, #1
   146a0:	bxeq	lr
   146a4:	bcc	1487c <__assert_fail@plt+0x39a8>
   146a8:	cmp	r0, r1
   146ac:	bls	14860 <__assert_fail@plt+0x398c>
   146b0:	tst	r1, r2
   146b4:	beq	1486c <__assert_fail@plt+0x3998>
   146b8:	clz	r3, r0
   146bc:	clz	r2, r1
   146c0:	sub	r3, r2, r3
   146c4:	rsbs	r3, r3, #31
   146c8:	addne	r3, r3, r3, lsl #1
   146cc:	mov	r2, #0
   146d0:	addne	pc, pc, r3, lsl #2
   146d4:	nop			; (mov r0, r0)
   146d8:	cmp	r0, r1, lsl #31
   146dc:	adc	r2, r2, r2
   146e0:	subcs	r0, r0, r1, lsl #31
   146e4:	cmp	r0, r1, lsl #30
   146e8:	adc	r2, r2, r2
   146ec:	subcs	r0, r0, r1, lsl #30
   146f0:	cmp	r0, r1, lsl #29
   146f4:	adc	r2, r2, r2
   146f8:	subcs	r0, r0, r1, lsl #29
   146fc:	cmp	r0, r1, lsl #28
   14700:	adc	r2, r2, r2
   14704:	subcs	r0, r0, r1, lsl #28
   14708:	cmp	r0, r1, lsl #27
   1470c:	adc	r2, r2, r2
   14710:	subcs	r0, r0, r1, lsl #27
   14714:	cmp	r0, r1, lsl #26
   14718:	adc	r2, r2, r2
   1471c:	subcs	r0, r0, r1, lsl #26
   14720:	cmp	r0, r1, lsl #25
   14724:	adc	r2, r2, r2
   14728:	subcs	r0, r0, r1, lsl #25
   1472c:	cmp	r0, r1, lsl #24
   14730:	adc	r2, r2, r2
   14734:	subcs	r0, r0, r1, lsl #24
   14738:	cmp	r0, r1, lsl #23
   1473c:	adc	r2, r2, r2
   14740:	subcs	r0, r0, r1, lsl #23
   14744:	cmp	r0, r1, lsl #22
   14748:	adc	r2, r2, r2
   1474c:	subcs	r0, r0, r1, lsl #22
   14750:	cmp	r0, r1, lsl #21
   14754:	adc	r2, r2, r2
   14758:	subcs	r0, r0, r1, lsl #21
   1475c:	cmp	r0, r1, lsl #20
   14760:	adc	r2, r2, r2
   14764:	subcs	r0, r0, r1, lsl #20
   14768:	cmp	r0, r1, lsl #19
   1476c:	adc	r2, r2, r2
   14770:	subcs	r0, r0, r1, lsl #19
   14774:	cmp	r0, r1, lsl #18
   14778:	adc	r2, r2, r2
   1477c:	subcs	r0, r0, r1, lsl #18
   14780:	cmp	r0, r1, lsl #17
   14784:	adc	r2, r2, r2
   14788:	subcs	r0, r0, r1, lsl #17
   1478c:	cmp	r0, r1, lsl #16
   14790:	adc	r2, r2, r2
   14794:	subcs	r0, r0, r1, lsl #16
   14798:	cmp	r0, r1, lsl #15
   1479c:	adc	r2, r2, r2
   147a0:	subcs	r0, r0, r1, lsl #15
   147a4:	cmp	r0, r1, lsl #14
   147a8:	adc	r2, r2, r2
   147ac:	subcs	r0, r0, r1, lsl #14
   147b0:	cmp	r0, r1, lsl #13
   147b4:	adc	r2, r2, r2
   147b8:	subcs	r0, r0, r1, lsl #13
   147bc:	cmp	r0, r1, lsl #12
   147c0:	adc	r2, r2, r2
   147c4:	subcs	r0, r0, r1, lsl #12
   147c8:	cmp	r0, r1, lsl #11
   147cc:	adc	r2, r2, r2
   147d0:	subcs	r0, r0, r1, lsl #11
   147d4:	cmp	r0, r1, lsl #10
   147d8:	adc	r2, r2, r2
   147dc:	subcs	r0, r0, r1, lsl #10
   147e0:	cmp	r0, r1, lsl #9
   147e4:	adc	r2, r2, r2
   147e8:	subcs	r0, r0, r1, lsl #9
   147ec:	cmp	r0, r1, lsl #8
   147f0:	adc	r2, r2, r2
   147f4:	subcs	r0, r0, r1, lsl #8
   147f8:	cmp	r0, r1, lsl #7
   147fc:	adc	r2, r2, r2
   14800:	subcs	r0, r0, r1, lsl #7
   14804:	cmp	r0, r1, lsl #6
   14808:	adc	r2, r2, r2
   1480c:	subcs	r0, r0, r1, lsl #6
   14810:	cmp	r0, r1, lsl #5
   14814:	adc	r2, r2, r2
   14818:	subcs	r0, r0, r1, lsl #5
   1481c:	cmp	r0, r1, lsl #4
   14820:	adc	r2, r2, r2
   14824:	subcs	r0, r0, r1, lsl #4
   14828:	cmp	r0, r1, lsl #3
   1482c:	adc	r2, r2, r2
   14830:	subcs	r0, r0, r1, lsl #3
   14834:	cmp	r0, r1, lsl #2
   14838:	adc	r2, r2, r2
   1483c:	subcs	r0, r0, r1, lsl #2
   14840:	cmp	r0, r1, lsl #1
   14844:	adc	r2, r2, r2
   14848:	subcs	r0, r0, r1, lsl #1
   1484c:	cmp	r0, r1
   14850:	adc	r2, r2, r2
   14854:	subcs	r0, r0, r1
   14858:	mov	r0, r2
   1485c:	bx	lr
   14860:	moveq	r0, #1
   14864:	movne	r0, #0
   14868:	bx	lr
   1486c:	clz	r2, r1
   14870:	rsb	r2, r2, #31
   14874:	lsr	r0, r0, r2
   14878:	bx	lr
   1487c:	cmp	r0, #0
   14880:	mvnne	r0, #0
   14884:	b	14ae8 <__assert_fail@plt+0x3c14>
   14888:	cmp	r1, #0
   1488c:	beq	1487c <__assert_fail@plt+0x39a8>
   14890:	push	{r0, r1, lr}
   14894:	bl	1469c <__assert_fail@plt+0x37c8>
   14898:	pop	{r1, r2, lr}
   1489c:	mul	r3, r2, r0
   148a0:	sub	r1, r1, r3
   148a4:	bx	lr
   148a8:	cmp	r1, #0
   148ac:	beq	14ab8 <__assert_fail@plt+0x3be4>
   148b0:	eor	ip, r0, r1
   148b4:	rsbmi	r1, r1, #0
   148b8:	subs	r2, r1, #1
   148bc:	beq	14a84 <__assert_fail@plt+0x3bb0>
   148c0:	movs	r3, r0
   148c4:	rsbmi	r3, r0, #0
   148c8:	cmp	r3, r1
   148cc:	bls	14a90 <__assert_fail@plt+0x3bbc>
   148d0:	tst	r1, r2
   148d4:	beq	14aa0 <__assert_fail@plt+0x3bcc>
   148d8:	clz	r2, r3
   148dc:	clz	r0, r1
   148e0:	sub	r2, r0, r2
   148e4:	rsbs	r2, r2, #31
   148e8:	addne	r2, r2, r2, lsl #1
   148ec:	mov	r0, #0
   148f0:	addne	pc, pc, r2, lsl #2
   148f4:	nop			; (mov r0, r0)
   148f8:	cmp	r3, r1, lsl #31
   148fc:	adc	r0, r0, r0
   14900:	subcs	r3, r3, r1, lsl #31
   14904:	cmp	r3, r1, lsl #30
   14908:	adc	r0, r0, r0
   1490c:	subcs	r3, r3, r1, lsl #30
   14910:	cmp	r3, r1, lsl #29
   14914:	adc	r0, r0, r0
   14918:	subcs	r3, r3, r1, lsl #29
   1491c:	cmp	r3, r1, lsl #28
   14920:	adc	r0, r0, r0
   14924:	subcs	r3, r3, r1, lsl #28
   14928:	cmp	r3, r1, lsl #27
   1492c:	adc	r0, r0, r0
   14930:	subcs	r3, r3, r1, lsl #27
   14934:	cmp	r3, r1, lsl #26
   14938:	adc	r0, r0, r0
   1493c:	subcs	r3, r3, r1, lsl #26
   14940:	cmp	r3, r1, lsl #25
   14944:	adc	r0, r0, r0
   14948:	subcs	r3, r3, r1, lsl #25
   1494c:	cmp	r3, r1, lsl #24
   14950:	adc	r0, r0, r0
   14954:	subcs	r3, r3, r1, lsl #24
   14958:	cmp	r3, r1, lsl #23
   1495c:	adc	r0, r0, r0
   14960:	subcs	r3, r3, r1, lsl #23
   14964:	cmp	r3, r1, lsl #22
   14968:	adc	r0, r0, r0
   1496c:	subcs	r3, r3, r1, lsl #22
   14970:	cmp	r3, r1, lsl #21
   14974:	adc	r0, r0, r0
   14978:	subcs	r3, r3, r1, lsl #21
   1497c:	cmp	r3, r1, lsl #20
   14980:	adc	r0, r0, r0
   14984:	subcs	r3, r3, r1, lsl #20
   14988:	cmp	r3, r1, lsl #19
   1498c:	adc	r0, r0, r0
   14990:	subcs	r3, r3, r1, lsl #19
   14994:	cmp	r3, r1, lsl #18
   14998:	adc	r0, r0, r0
   1499c:	subcs	r3, r3, r1, lsl #18
   149a0:	cmp	r3, r1, lsl #17
   149a4:	adc	r0, r0, r0
   149a8:	subcs	r3, r3, r1, lsl #17
   149ac:	cmp	r3, r1, lsl #16
   149b0:	adc	r0, r0, r0
   149b4:	subcs	r3, r3, r1, lsl #16
   149b8:	cmp	r3, r1, lsl #15
   149bc:	adc	r0, r0, r0
   149c0:	subcs	r3, r3, r1, lsl #15
   149c4:	cmp	r3, r1, lsl #14
   149c8:	adc	r0, r0, r0
   149cc:	subcs	r3, r3, r1, lsl #14
   149d0:	cmp	r3, r1, lsl #13
   149d4:	adc	r0, r0, r0
   149d8:	subcs	r3, r3, r1, lsl #13
   149dc:	cmp	r3, r1, lsl #12
   149e0:	adc	r0, r0, r0
   149e4:	subcs	r3, r3, r1, lsl #12
   149e8:	cmp	r3, r1, lsl #11
   149ec:	adc	r0, r0, r0
   149f0:	subcs	r3, r3, r1, lsl #11
   149f4:	cmp	r3, r1, lsl #10
   149f8:	adc	r0, r0, r0
   149fc:	subcs	r3, r3, r1, lsl #10
   14a00:	cmp	r3, r1, lsl #9
   14a04:	adc	r0, r0, r0
   14a08:	subcs	r3, r3, r1, lsl #9
   14a0c:	cmp	r3, r1, lsl #8
   14a10:	adc	r0, r0, r0
   14a14:	subcs	r3, r3, r1, lsl #8
   14a18:	cmp	r3, r1, lsl #7
   14a1c:	adc	r0, r0, r0
   14a20:	subcs	r3, r3, r1, lsl #7
   14a24:	cmp	r3, r1, lsl #6
   14a28:	adc	r0, r0, r0
   14a2c:	subcs	r3, r3, r1, lsl #6
   14a30:	cmp	r3, r1, lsl #5
   14a34:	adc	r0, r0, r0
   14a38:	subcs	r3, r3, r1, lsl #5
   14a3c:	cmp	r3, r1, lsl #4
   14a40:	adc	r0, r0, r0
   14a44:	subcs	r3, r3, r1, lsl #4
   14a48:	cmp	r3, r1, lsl #3
   14a4c:	adc	r0, r0, r0
   14a50:	subcs	r3, r3, r1, lsl #3
   14a54:	cmp	r3, r1, lsl #2
   14a58:	adc	r0, r0, r0
   14a5c:	subcs	r3, r3, r1, lsl #2
   14a60:	cmp	r3, r1, lsl #1
   14a64:	adc	r0, r0, r0
   14a68:	subcs	r3, r3, r1, lsl #1
   14a6c:	cmp	r3, r1
   14a70:	adc	r0, r0, r0
   14a74:	subcs	r3, r3, r1
   14a78:	cmp	ip, #0
   14a7c:	rsbmi	r0, r0, #0
   14a80:	bx	lr
   14a84:	teq	ip, r0
   14a88:	rsbmi	r0, r0, #0
   14a8c:	bx	lr
   14a90:	movcc	r0, #0
   14a94:	asreq	r0, ip, #31
   14a98:	orreq	r0, r0, #1
   14a9c:	bx	lr
   14aa0:	clz	r2, r1
   14aa4:	rsb	r2, r2, #31
   14aa8:	cmp	ip, #0
   14aac:	lsr	r0, r3, r2
   14ab0:	rsbmi	r0, r0, #0
   14ab4:	bx	lr
   14ab8:	cmp	r0, #0
   14abc:	mvngt	r0, #-2147483648	; 0x80000000
   14ac0:	movlt	r0, #-2147483648	; 0x80000000
   14ac4:	b	14ae8 <__assert_fail@plt+0x3c14>
   14ac8:	cmp	r1, #0
   14acc:	beq	14ab8 <__assert_fail@plt+0x3be4>
   14ad0:	push	{r0, r1, lr}
   14ad4:	bl	148b0 <__assert_fail@plt+0x39dc>
   14ad8:	pop	{r1, r2, lr}
   14adc:	mul	r3, r2, r0
   14ae0:	sub	r1, r1, r3
   14ae4:	bx	lr
   14ae8:	push	{r1, lr}
   14aec:	mov	r0, #8
   14af0:	bl	10c88 <raise@plt>
   14af4:	pop	{r1, pc}
   14af8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14afc:	mov	r7, r0
   14b00:	ldr	r6, [pc, #72]	; 14b50 <__assert_fail@plt+0x3c7c>
   14b04:	ldr	r5, [pc, #72]	; 14b54 <__assert_fail@plt+0x3c80>
   14b08:	add	r6, pc, r6
   14b0c:	add	r5, pc, r5
   14b10:	sub	r6, r6, r5
   14b14:	mov	r8, r1
   14b18:	mov	r9, r2
   14b1c:	bl	10c50 <calloc@plt-0x20>
   14b20:	asrs	r6, r6, #2
   14b24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b28:	mov	r4, #0
   14b2c:	add	r4, r4, #1
   14b30:	ldr	r3, [r5], #4
   14b34:	mov	r2, r9
   14b38:	mov	r1, r8
   14b3c:	mov	r0, r7
   14b40:	blx	r3
   14b44:	cmp	r6, r4
   14b48:	bne	14b2c <__assert_fail@plt+0x3c58>
   14b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b50:	andeq	r1, r1, r0, lsl #8
   14b54:	strdeq	r1, [r1], -r8
   14b58:	bx	lr
   14b5c:	ldr	r3, [pc, #12]	; 14b70 <__assert_fail@plt+0x3c9c>
   14b60:	mov	r1, #0
   14b64:	add	r3, pc, r3
   14b68:	ldr	r2, [r3]
   14b6c:	b	10e20 <__cxa_atexit@plt>
   14b70:	andeq	r1, r1, r8, ror r5

Disassembly of section .fini:

00014b74 <.fini>:
   14b74:	push	{r3, lr}
   14b78:	pop	{r3, pc}
