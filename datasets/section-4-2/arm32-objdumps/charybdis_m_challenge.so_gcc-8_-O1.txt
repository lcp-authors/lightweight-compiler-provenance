
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000083c <_init>:
 83c:	push	{r3, lr}
 840:	bl	9d0 <call_weak_fn>
 844:	pop	{r3, pc}

Disassembly of section .plt:

00000848 <.plt>:
 848:	push	{lr}		; (str lr, [sp, #-4]!)
 84c:	ldr	lr, [pc, #4]	; 858 <.plt+0x10>
 850:	add	lr, pc, lr
 854:	ldr	pc, [lr, #8]!
 858:	.word	0x000117a8

0000085c <calloc@plt>:
 85c:	add	ip, pc, #0, 12
 860:	add	ip, ip, #69632	; 0x11000
 864:	ldr	pc, [ip, #1960]!	; 0x7a8

00000868 <rb_current_time@plt>:
 868:	add	ip, pc, #0, 12
 86c:	add	ip, ip, #69632	; 0x11000
 870:	ldr	pc, [ip, #1952]!	; 0x7a0

00000874 <__cxa_finalize@plt>:
 874:	add	ip, pc, #0, 12
 878:	add	ip, ip, #69632	; 0x11000
 87c:	ldr	pc, [ip, #1944]!	; 0x798

00000880 <RSA_public_encrypt@plt>:
 880:	add	ip, pc, #0, 12
 884:	add	ip, ip, #69632	; 0x11000
 888:	ldr	pc, [ip, #1936]!	; 0x790

0000088c <sendto_one@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1928]!	; 0x788

00000898 <free@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1920]!	; 0x780

000008a4 <rb_strcasecmp@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1912]!	; 0x778

000008b0 <RSA_size@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1904]!	; 0x770

000008bc <rb_outofmemory@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1896]!	; 0x768

000008c8 <memcmp@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1888]!	; 0x760

000008d4 <sendto_realops_snomask@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1880]!	; 0x758

000008e0 <rb_base64_decode@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1872]!	; 0x750

000008ec <strcpy@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1864]!	; 0x748

000008f8 <malloc@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1856]!	; 0x740

00000904 <rb_get_random@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1848]!	; 0x738

00000910 <__gmon_start__@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1840]!	; 0x730

0000091c <OPENSSL_init_crypto@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1832]!	; 0x728

00000928 <send_oper_motd@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1824]!	; 0x720

00000934 <sendto_one_numeric@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1816]!	; 0x718

00000940 <strlen@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1808]!	; 0x710

0000094c <SHA1_Update@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1800]!	; 0x708

00000958 <ERR_error_string@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1792]!	; 0x700

00000964 <ilog@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1784]!	; 0x6f8

00000970 <SHA1_Init@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1776]!	; 0x6f0

0000097c <ERR_get_error@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1768]!	; 0x6e8

00000988 <sendto_one_notice@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1760]!	; 0x6e0

00000994 <rb_strlcpy@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1752]!	; 0x6d8

000009a0 <find_oper_conf@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1744]!	; 0x6d0

000009ac <oper_up@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1736]!	; 0x6c8

000009b8 <rb_base64_encode@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1728]!	; 0x6c0

000009c4 <SHA1_Final@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1720]!	; 0x6b8

Disassembly of section .text:

000009d0 <call_weak_fn>:
     9d0:	ldr	r3, [pc, #20]	; 9ec <call_weak_fn+0x1c>
     9d4:	ldr	r2, [pc, #20]	; 9f0 <call_weak_fn+0x20>
     9d8:	add	r3, pc, r3
     9dc:	ldr	r2, [r3, r2]
     9e0:	cmp	r2, #0
     9e4:	bxeq	lr
     9e8:	b	910 <__gmon_start__@plt>
     9ec:	.word	0x00011620
     9f0:	.word	0x00000090

000009f4 <deregister_tm_clones>:
     9f4:	ldr	r0, [pc, #44]	; a28 <deregister_tm_clones+0x34>
     9f8:	ldr	r3, [pc, #44]	; a2c <deregister_tm_clones+0x38>
     9fc:	add	r0, pc, r0
     a00:	add	r3, pc, r3
     a04:	cmp	r3, r0
     a08:	ldr	r3, [pc, #32]	; a30 <deregister_tm_clones+0x3c>
     a0c:	add	r3, pc, r3
     a10:	bxeq	lr
     a14:	ldr	r2, [pc, #24]	; a34 <deregister_tm_clones+0x40>
     a18:	ldr	r3, [r3, r2]
     a1c:	cmp	r3, #0
     a20:	bxeq	lr
     a24:	bx	r3
     a28:	.word	0x00011714
     a2c:	.word	0x00011710
     a30:	.word	0x000115ec
     a34:	.word	0x0000008c

00000a38 <register_tm_clones>:
     a38:	ldr	r0, [pc, #56]	; a78 <register_tm_clones+0x40>
     a3c:	ldr	r3, [pc, #56]	; a7c <register_tm_clones+0x44>
     a40:	add	r0, pc, r0
     a44:	add	r3, pc, r3
     a48:	sub	r1, r3, r0
     a4c:	ldr	r3, [pc, #44]	; a80 <register_tm_clones+0x48>
     a50:	asr	r1, r1, #2
     a54:	add	r3, pc, r3
     a58:	add	r1, r1, r1, lsr #31
     a5c:	asrs	r1, r1, #1
     a60:	bxeq	lr
     a64:	ldr	r2, [pc, #24]	; a84 <register_tm_clones+0x4c>
     a68:	ldr	r3, [r3, r2]
     a6c:	cmp	r3, #0
     a70:	bxeq	lr
     a74:	bx	r3
     a78:	.word	0x000116d0
     a7c:	.word	0x000116cc
     a80:	.word	0x000115a4
     a84:	.word	0x00000094

00000a88 <__do_global_dtors_aux>:
     a88:	ldr	r3, [pc, #76]	; adc <__do_global_dtors_aux+0x54>
     a8c:	ldr	r2, [pc, #76]	; ae0 <__do_global_dtors_aux+0x58>
     a90:	add	r3, pc, r3
     a94:	add	r2, pc, r2
     a98:	ldrb	r3, [r3]
     a9c:	cmp	r3, #0
     aa0:	bxne	lr
     aa4:	ldr	r3, [pc, #56]	; ae4 <__do_global_dtors_aux+0x5c>
     aa8:	push	{r4, lr}
     aac:	ldr	r3, [r2, r3]
     ab0:	cmp	r3, #0
     ab4:	beq	ac4 <__do_global_dtors_aux+0x3c>
     ab8:	ldr	r3, [pc, #40]	; ae8 <__do_global_dtors_aux+0x60>
     abc:	ldr	r0, [pc, r3]
     ac0:	bl	874 <__cxa_finalize@plt>
     ac4:	bl	9f4 <deregister_tm_clones>
     ac8:	ldr	r3, [pc, #28]	; aec <__do_global_dtors_aux+0x64>
     acc:	mov	r2, #1
     ad0:	add	r3, pc, r3
     ad4:	strb	r2, [r3]
     ad8:	pop	{r4, pc}
     adc:	.word	0x00011680
     ae0:	.word	0x00011564
     ae4:	.word	0x00000088
     ae8:	.word	0x000115dc
     aec:	.word	0x00011640

00000af0 <frame_dummy>:
     af0:	b	a38 <register_tm_clones>

00000af4 <cleanup_challenge>:
     af4:	ldr	r3, [r0, #432]	; 0x1b0
     af8:	cmp	r3, #0
     afc:	bxeq	lr
     b00:	str	r4, [sp, #-8]!
     b04:	str	lr, [sp, #4]
     b08:	mov	r4, r0
     b0c:	ldr	r0, [r3, #284]	; 0x11c
     b10:	cmp	r0, #0
     b14:	beq	b1c <cleanup_challenge+0x28>
     b18:	bl	898 <free@plt>
     b1c:	ldr	r3, [r4, #24]
     b20:	ldr	r0, [r3, #32]
     b24:	cmp	r0, #0
     b28:	beq	b30 <cleanup_challenge+0x3c>
     b2c:	bl	898 <free@plt>
     b30:	ldr	r2, [r4, #432]	; 0x1b0
     b34:	mov	r3, #0
     b38:	str	r3, [r2, #284]	; 0x11c
     b3c:	ldr	r2, [r4, #24]
     b40:	str	r3, [r2, #32]
     b44:	ldr	r2, [r4, #432]	; 0x1b0
     b48:	str	r3, [r2, #304]	; 0x130
     b4c:	ldr	r4, [sp]
     b50:	add	sp, sp, #4
     b54:	pop	{pc}		; (ldr pc, [sp], #4)

00000b58 <m_challenge>:
     b58:	strd	r4, [sp, #-36]!	; 0xffffffdc
     b5c:	strd	r6, [sp, #8]
     b60:	strd	r8, [sp, #16]
     b64:	strd	sl, [sp, #24]
     b68:	str	lr, [sp, #32]
     b6c:	sub	sp, sp, #668	; 0x29c
     b70:	mov	r4, r2
     b74:	ldr	r6, [sp, #704]	; 0x2c0
     b78:	ldr	r5, [pc, #1944]	; 1318 <m_challenge+0x7c0>
     b7c:	add	r5, pc, r5
     b80:	mov	r3, #0
     b84:	str	r3, [sp, #252]	; 0xfc
     b88:	ldr	r3, [r2, #56]	; 0x38
     b8c:	tst	r3, #4096	; 0x1000
     b90:	bne	c94 <m_challenge+0x13c>
     b94:	ldr	r3, [r6, #4]
     b98:	ldrb	r3, [r3]
     b9c:	cmp	r3, #43	; 0x2b
     ba0:	bne	e80 <m_challenge+0x328>
     ba4:	ldr	r3, [r2, #432]	; 0x1b0
     ba8:	ldr	r3, [r3, #284]	; 0x11c
     bac:	cmp	r3, #0
     bb0:	beq	cbc <m_challenge+0x164>
     bb4:	bl	868 <rb_current_time@plt>
     bb8:	ldr	r3, [r4, #432]	; 0x1b0
     bbc:	ldr	r3, [r3, #304]	; 0x130
     bc0:	sub	r0, r0, r3
     bc4:	cmp	r0, #180	; 0xb4
     bc8:	bgt	cd8 <m_challenge+0x180>
     bcc:	ldr	r7, [r6, #4]
     bd0:	add	r7, r7, #1
     bd4:	str	r7, [r6, #4]
     bd8:	mov	r0, r7
     bdc:	bl	940 <strlen@plt>
     be0:	add	r2, sp, #252	; 0xfc
     be4:	mov	r1, r0
     be8:	mov	r0, r7
     bec:	bl	8e0 <rb_base64_decode@plt>
     bf0:	mov	r6, r0
     bf4:	ldr	r3, [sp, #252]	; 0xfc
     bf8:	cmp	r3, #20
     bfc:	bne	d78 <m_challenge+0x220>
     c00:	ldr	r3, [r4, #432]	; 0x1b0
     c04:	mov	r2, #20
     c08:	mov	r1, r0
     c0c:	ldr	r0, [r3, #284]	; 0x11c
     c10:	bl	8c8 <memcmp@plt>
     c14:	cmp	r0, #0
     c18:	bne	127c <m_challenge+0x724>
     c1c:	mov	r0, r6
     c20:	bl	898 <free@plt>
     c24:	add	r7, r4, #152	; 0x98
     c28:	add	r6, r4, #288	; 0x120
     c2c:	add	r6, r6, #3
     c30:	ldr	r3, [r4, #24]
     c34:	ldr	r3, [r3, #32]
     c38:	mov	r2, r6
     c3c:	add	r1, r4, #227	; 0xe3
     c40:	mov	r0, r7
     c44:	bl	9a0 <find_oper_conf@plt>
     c48:	subs	r8, r0, #0
     c4c:	beq	e04 <m_challenge+0x2ac>
     c50:	mov	r0, r4
     c54:	bl	af4 <cleanup_challenge>
     c58:	mov	r1, r8
     c5c:	mov	r0, r4
     c60:	bl	9ac <oper_up@plt>
     c64:	ldr	r3, [r4, #24]
     c68:	ldr	r2, [r3, #32]
     c6c:	str	r6, [sp, #8]
     c70:	add	r3, r4, #163	; 0xa3
     c74:	str	r3, [sp, #4]
     c78:	str	r7, [sp]
     c7c:	add	r3, r4, #88	; 0x58
     c80:	ldr	r1, [pc, #1684]	; 131c <m_challenge+0x7c4>
     c84:	add	r1, pc, r1
     c88:	mov	r0, #3
     c8c:	bl	964 <ilog@plt>
     c90:	b	cbc <m_challenge+0x164>
     c94:	ldr	r3, [pc, #1668]	; 1320 <m_challenge+0x7c8>
     c98:	ldr	r2, [r5, r3]
     c9c:	add	r3, r4, #88	; 0x58
     ca0:	add	r2, r2, #88	; 0x58
     ca4:	ldr	r1, [pc, #1656]	; 1324 <m_challenge+0x7cc>
     ca8:	add	r1, pc, r1
     cac:	mov	r0, r4
     cb0:	bl	88c <sendto_one@plt>
     cb4:	mov	r0, r4
     cb8:	bl	928 <send_oper_motd@plt>
     cbc:	add	sp, sp, #668	; 0x29c
     cc0:	ldrd	r4, [sp]
     cc4:	ldrd	r6, [sp, #8]
     cc8:	ldrd	r8, [sp, #16]
     ccc:	ldrd	sl, [sp, #24]
     cd0:	add	sp, sp, #32
     cd4:	pop	{pc}		; (ldr pc, [sp], #4)
     cd8:	add	r6, r4, #88	; 0x58
     cdc:	ldr	r3, [pc, #1596]	; 1320 <m_challenge+0x7c8>
     ce0:	ldr	r2, [r5, r3]
     ce4:	mov	r3, r6
     ce8:	add	r2, r2, #88	; 0x58
     cec:	ldr	r1, [pc, #1588]	; 1328 <m_challenge+0x7d0>
     cf0:	add	r1, pc, r1
     cf4:	mov	r0, r4
     cf8:	bl	88c <sendto_one@plt>
     cfc:	add	r7, r4, #152	; 0x98
     d00:	add	r8, r4, #163	; 0xa3
     d04:	ldr	r3, [r4, #24]
     d08:	ldr	r2, [r3, #32]
     d0c:	add	r3, r4, #288	; 0x120
     d10:	add	r3, r3, #3
     d14:	str	r3, [sp, #8]
     d18:	str	r8, [sp, #4]
     d1c:	str	r7, [sp]
     d20:	mov	r3, r6
     d24:	ldr	r1, [pc, #1536]	; 132c <m_challenge+0x7d4>
     d28:	add	r1, pc, r1
     d2c:	mov	r0, #4
     d30:	bl	964 <ilog@plt>
     d34:	ldr	r3, [pc, #1524]	; 1330 <m_challenge+0x7d8>
     d38:	ldr	r3, [r5, r3]
     d3c:	ldr	r3, [r3, #84]	; 0x54
     d40:	cmp	r3, #0
     d44:	bne	d54 <m_challenge+0x1fc>
     d48:	mov	r0, r4
     d4c:	bl	af4 <cleanup_challenge>
     d50:	b	cbc <m_challenge+0x164>
     d54:	str	r8, [sp, #4]
     d58:	str	r7, [sp]
     d5c:	mov	r3, r6
     d60:	ldr	r2, [pc, #1484]	; 1334 <m_challenge+0x7dc>
     d64:	add	r2, pc, r2
     d68:	mov	r1, #256	; 0x100
     d6c:	mov	r0, r1
     d70:	bl	8d4 <sendto_realops_snomask@plt>
     d74:	b	d48 <m_challenge+0x1f0>
     d78:	add	r7, r4, #88	; 0x58
     d7c:	ldr	r3, [pc, #1436]	; 1320 <m_challenge+0x7c8>
     d80:	ldr	r2, [r5, r3]
     d84:	mov	r3, r7
     d88:	add	r2, r2, #88	; 0x58
     d8c:	ldr	r1, [pc, #1444]	; 1338 <m_challenge+0x7e0>
     d90:	add	r1, pc, r1
     d94:	mov	r0, r4
     d98:	bl	88c <sendto_one@plt>
     d9c:	add	r8, r4, #152	; 0x98
     da0:	add	r9, r4, #163	; 0xa3
     da4:	ldr	r3, [r4, #24]
     da8:	ldr	r2, [r3, #32]
     dac:	add	r3, r4, #288	; 0x120
     db0:	add	r3, r3, #3
     db4:	str	r3, [sp, #8]
     db8:	str	r9, [sp, #4]
     dbc:	str	r8, [sp]
     dc0:	mov	r3, r7
     dc4:	ldr	r1, [pc, #1392]	; 133c <m_challenge+0x7e4>
     dc8:	add	r1, pc, r1
     dcc:	mov	r0, #4
     dd0:	bl	964 <ilog@plt>
     dd4:	ldr	r3, [pc, #1364]	; 1330 <m_challenge+0x7d8>
     dd8:	ldr	r3, [r5, r3]
     ddc:	ldr	r3, [r3, #84]	; 0x54
     de0:	cmp	r3, #0
     de4:	bne	12ec <m_challenge+0x794>
     de8:	cmp	r6, #0
     dec:	beq	df8 <m_challenge+0x2a0>
     df0:	mov	r0, r6
     df4:	bl	898 <free@plt>
     df8:	mov	r0, r4
     dfc:	bl	af4 <cleanup_challenge>
     e00:	b	cbc <m_challenge+0x164>
     e04:	ldr	r2, [pc, #1332]	; 1340 <m_challenge+0x7e8>
     e08:	add	r2, pc, r2
     e0c:	movw	r1, #491	; 0x1eb
     e10:	mov	r0, r4
     e14:	bl	934 <sendto_one_numeric@plt>
     e18:	add	r8, r4, #88	; 0x58
     e1c:	add	r9, r4, #163	; 0xa3
     e20:	ldr	r3, [r4, #24]
     e24:	ldr	r2, [r3, #32]
     e28:	str	r6, [sp, #8]
     e2c:	str	r9, [sp, #4]
     e30:	str	r7, [sp]
     e34:	mov	r3, r8
     e38:	ldr	r1, [pc, #1284]	; 1344 <m_challenge+0x7ec>
     e3c:	add	r1, pc, r1
     e40:	mov	r0, #4
     e44:	bl	964 <ilog@plt>
     e48:	ldr	r3, [pc, #1248]	; 1330 <m_challenge+0x7d8>
     e4c:	ldr	r3, [r5, r3]
     e50:	ldr	r3, [r3, #84]	; 0x54
     e54:	cmp	r3, #0
     e58:	beq	cbc <m_challenge+0x164>
     e5c:	str	r9, [sp, #4]
     e60:	str	r7, [sp]
     e64:	mov	r3, r8
     e68:	ldr	r2, [pc, #1240]	; 1348 <m_challenge+0x7f0>
     e6c:	add	r2, pc, r2
     e70:	mov	r1, #256	; 0x100
     e74:	mov	r0, r1
     e78:	bl	8d4 <sendto_realops_snomask@plt>
     e7c:	b	cbc <m_challenge+0x164>
     e80:	mov	r0, r2
     e84:	bl	af4 <cleanup_challenge>
     e88:	add	r9, r4, #152	; 0x98
     e8c:	add	r7, r4, #288	; 0x120
     e90:	add	r7, r7, #3
     e94:	ldr	r3, [r6, #4]
     e98:	mov	r2, r7
     e9c:	add	r1, r4, #227	; 0xe3
     ea0:	mov	r0, r9
     ea4:	bl	9a0 <find_oper_conf@plt>
     ea8:	subs	sl, r0, #0
     eac:	beq	100c <m_challenge+0x4b4>
     eb0:	ldr	r8, [sl, #40]	; 0x28
     eb4:	cmp	r8, #0
     eb8:	beq	1084 <m_challenge+0x52c>
     ebc:	ldr	r3, [sl, #20]
     ec0:	tst	r3, #524288	; 0x80000
     ec4:	beq	ed4 <m_challenge+0x37c>
     ec8:	ldr	r3, [r4, #56]	; 0x38
     ecc:	tst	r3, #16384	; 0x4000
     ed0:	beq	1098 <m_challenge+0x540>
     ed4:	ldr	r1, [sl, #16]
     ed8:	cmp	r1, #0
     edc:	beq	1310 <m_challenge+0x7b8>
     ee0:	ldr	r0, [r4, #444]	; 0x1bc
     ee4:	cmp	r0, #0
     ee8:	beq	1110 <m_challenge+0x5b8>
     eec:	bl	8a4 <rb_strcasecmp@plt>
     ef0:	cmp	r0, #0
     ef4:	bne	1110 <m_challenge+0x5b8>
     ef8:	ldr	r8, [sl, #40]	; 0x28
     efc:	cmp	r8, #0
     f00:	beq	ff8 <m_challenge+0x4a0>
     f04:	ldr	r7, [r4, #432]	; 0x1b0
     f08:	mov	r1, #128	; 0x80
     f0c:	add	r0, sp, #124	; 0x7c
     f10:	bl	904 <rb_get_random@plt>
     f14:	cmp	r0, #0
     f18:	beq	fac <m_challenge+0x454>
     f1c:	add	r6, sp, #28
     f20:	mov	r0, r6
     f24:	bl	970 <SHA1_Init@plt>
     f28:	mov	r2, #128	; 0x80
     f2c:	add	r1, sp, #124	; 0x7c
     f30:	mov	r0, r6
     f34:	bl	94c <SHA1_Update@plt>
     f38:	mov	r0, #20
     f3c:	bl	8f8 <malloc@plt>
     f40:	str	r0, [r7, #284]	; 0x11c
     f44:	mov	r1, r6
     f48:	bl	9c4 <SHA1_Final@plt>
     f4c:	mov	r0, r8
     f50:	bl	8b0 <RSA_size@plt>
     f54:	mov	r1, r0
     f58:	mov	r0, #1
     f5c:	bl	85c <calloc@plt>
     f60:	subs	r6, r0, #0
     f64:	beq	1188 <m_challenge+0x630>
     f68:	mov	r3, #4
     f6c:	str	r3, [sp]
     f70:	mov	r3, r8
     f74:	mov	r2, r6
     f78:	add	r1, sp, #124	; 0x7c
     f7c:	mov	r0, #128	; 0x80
     f80:	bl	880 <RSA_public_encrypt@plt>
     f84:	subs	r1, r0, #0
     f88:	bge	118c <m_challenge+0x634>
     f8c:	mov	r0, r6
     f90:	bl	898 <free@plt>
     f94:	ldr	r0, [r7, #284]	; 0x11c
     f98:	cmp	r0, #0
     f9c:	beq	fa4 <m_challenge+0x44c>
     fa0:	bl	898 <free@plt>
     fa4:	mov	r3, #0
     fa8:	str	r3, [r7, #284]	; 0x11c
     fac:	mov	r2, #0
     fb0:	mov	r0, #2
     fb4:	mov	r1, #0
     fb8:	bl	91c <OPENSSL_init_crypto@plt>
     fbc:	mov	r5, #100	; 0x64
     fc0:	mov	r6, #0
     fc4:	ldr	r7, [pc, #896]	; 134c <m_challenge+0x7f4>
     fc8:	add	r7, pc, r7
     fcc:	bl	97c <ERR_get_error@plt>
     fd0:	cmp	r0, #0
     fd4:	beq	ff8 <m_challenge+0x4a0>
     fd8:	mov	r1, r6
     fdc:	bl	958 <ERR_error_string@plt>
     fe0:	mov	r2, r0
     fe4:	mov	r1, r7
     fe8:	mov	r0, r6
     fec:	bl	964 <ilog@plt>
     ff0:	subs	r5, r5, #1
     ff4:	bne	fcc <m_challenge+0x474>
     ff8:	ldr	r1, [pc, #848]	; 1350 <m_challenge+0x7f8>
     ffc:	add	r1, pc, r1
    1000:	mov	r0, r4
    1004:	bl	988 <sendto_one_notice@plt>
    1008:	b	cbc <m_challenge+0x164>
    100c:	ldr	r2, [pc, #832]	; 1354 <m_challenge+0x7fc>
    1010:	add	r2, pc, r2
    1014:	movw	r1, #491	; 0x1eb
    1018:	mov	r0, r4
    101c:	bl	934 <sendto_one_numeric@plt>
    1020:	add	r8, r4, #88	; 0x58
    1024:	add	r4, r4, #163	; 0xa3
    1028:	str	r7, [sp, #8]
    102c:	str	r4, [sp, #4]
    1030:	str	r9, [sp]
    1034:	mov	r3, r8
    1038:	ldr	r2, [r6, #4]
    103c:	ldr	r1, [pc, #788]	; 1358 <m_challenge+0x800>
    1040:	add	r1, pc, r1
    1044:	mov	r0, #4
    1048:	bl	964 <ilog@plt>
    104c:	ldr	r3, [pc, #732]	; 1330 <m_challenge+0x7d8>
    1050:	ldr	r3, [r5, r3]
    1054:	ldr	r3, [r3, #84]	; 0x54
    1058:	cmp	r3, #0
    105c:	beq	cbc <m_challenge+0x164>
    1060:	str	r4, [sp, #4]
    1064:	str	r9, [sp]
    1068:	mov	r3, r8
    106c:	ldr	r2, [pc, #744]	; 135c <m_challenge+0x804>
    1070:	add	r2, pc, r2
    1074:	mov	r1, #256	; 0x100
    1078:	mov	r0, r1
    107c:	bl	8d4 <sendto_realops_snomask@plt>
    1080:	b	cbc <m_challenge+0x164>
    1084:	ldr	r1, [pc, #724]	; 1360 <m_challenge+0x808>
    1088:	add	r1, pc, r1
    108c:	mov	r0, r4
    1090:	bl	988 <sendto_one_notice@plt>
    1094:	b	cbc <m_challenge+0x164>
    1098:	ldr	r2, [pc, #708]	; 1364 <m_challenge+0x80c>
    109c:	add	r2, pc, r2
    10a0:	movw	r1, #491	; 0x1eb
    10a4:	mov	r0, r4
    10a8:	bl	934 <sendto_one_numeric@plt>
    10ac:	add	r8, r4, #88	; 0x58
    10b0:	add	r4, r4, #163	; 0xa3
    10b4:	str	r7, [sp, #8]
    10b8:	str	r4, [sp, #4]
    10bc:	str	r9, [sp]
    10c0:	mov	r3, r8
    10c4:	ldr	r2, [r6, #4]
    10c8:	ldr	r1, [pc, #664]	; 1368 <m_challenge+0x810>
    10cc:	add	r1, pc, r1
    10d0:	mov	r0, #4
    10d4:	bl	964 <ilog@plt>
    10d8:	ldr	r3, [pc, #592]	; 1330 <m_challenge+0x7d8>
    10dc:	ldr	r3, [r5, r3]
    10e0:	ldr	r3, [r3, #84]	; 0x54
    10e4:	cmp	r3, #0
    10e8:	beq	cbc <m_challenge+0x164>
    10ec:	str	r4, [sp, #4]
    10f0:	str	r9, [sp]
    10f4:	mov	r3, r8
    10f8:	ldr	r2, [pc, #620]	; 136c <m_challenge+0x814>
    10fc:	add	r2, pc, r2
    1100:	mov	r1, #0
    1104:	mov	r0, #256	; 0x100
    1108:	bl	8d4 <sendto_realops_snomask@plt>
    110c:	b	cbc <m_challenge+0x164>
    1110:	ldr	r2, [pc, #600]	; 1370 <m_challenge+0x818>
    1114:	add	r2, pc, r2
    1118:	movw	r1, #491	; 0x1eb
    111c:	mov	r0, r4
    1120:	bl	934 <sendto_one_numeric@plt>
    1124:	add	r8, r4, #88	; 0x58
    1128:	add	r4, r4, #163	; 0xa3
    112c:	str	r7, [sp, #8]
    1130:	str	r4, [sp, #4]
    1134:	str	r9, [sp]
    1138:	mov	r3, r8
    113c:	ldr	r2, [r6, #4]
    1140:	ldr	r1, [pc, #556]	; 1374 <m_challenge+0x81c>
    1144:	add	r1, pc, r1
    1148:	mov	r0, #4
    114c:	bl	964 <ilog@plt>
    1150:	ldr	r3, [pc, #472]	; 1330 <m_challenge+0x7d8>
    1154:	ldr	r3, [r5, r3]
    1158:	ldr	r3, [r3, #84]	; 0x54
    115c:	cmp	r3, #0
    1160:	beq	cbc <m_challenge+0x164>
    1164:	str	r4, [sp, #4]
    1168:	str	r9, [sp]
    116c:	mov	r3, r8
    1170:	ldr	r2, [pc, #512]	; 1378 <m_challenge+0x820>
    1174:	add	r2, pc, r2
    1178:	mov	r1, #0
    117c:	mov	r0, #256	; 0x100
    1180:	bl	8d4 <sendto_realops_snomask@plt>
    1184:	b	cbc <m_challenge+0x164>
    1188:	bl	8bc <rb_outofmemory@plt>
    118c:	mov	r0, r6
    1190:	bl	9b8 <rb_base64_encode@plt>
    1194:	mov	r7, r0
    1198:	str	r0, [sp, #20]
    119c:	mov	r0, r6
    11a0:	bl	898 <free@plt>
    11a4:	ldr	r6, [r4, #432]	; 0x1b0
    11a8:	bl	868 <rb_current_time@plt>
    11ac:	str	r0, [r6, #304]	; 0x130
    11b0:	mov	r6, r7
    11b4:	add	r9, sp, #256	; 0x100
    11b8:	movw	r8, #405	; 0x195
    11bc:	ldr	r3, [pc, #440]	; 137c <m_challenge+0x824>
    11c0:	add	r3, pc, r3
    11c4:	str	r3, [sp, #16]
    11c8:	mov	r2, r8
    11cc:	mov	r1, r6
    11d0:	mov	r0, r9
    11d4:	bl	994 <rb_strlcpy@plt>
    11d8:	mov	fp, r0
    11dc:	add	r7, r4, #88	; 0x58
    11e0:	ldr	r3, [pc, #312]	; 1320 <m_challenge+0x7c8>
    11e4:	ldr	r2, [r5, r3]
    11e8:	str	r9, [sp]
    11ec:	mov	r3, r7
    11f0:	add	r2, r2, #88	; 0x58
    11f4:	ldr	r1, [sp, #16]
    11f8:	mov	r0, r4
    11fc:	bl	88c <sendto_one@plt>
    1200:	cmp	fp, r8
    1204:	bls	1210 <m_challenge+0x6b8>
    1208:	add	r6, r6, #404	; 0x194
    120c:	b	11c8 <m_challenge+0x670>
    1210:	ldr	r3, [pc, #264]	; 1320 <m_challenge+0x7c8>
    1214:	ldr	r2, [r5, r3]
    1218:	mov	r3, r7
    121c:	add	r2, r2, #88	; 0x58
    1220:	ldr	r1, [pc, #344]	; 1380 <m_challenge+0x828>
    1224:	add	r1, pc, r1
    1228:	mov	r0, r4
    122c:	bl	88c <sendto_one@plt>
    1230:	ldr	r3, [sp, #20]
    1234:	cmp	r3, #0
    1238:	beq	1244 <m_challenge+0x6ec>
    123c:	mov	r0, r3
    1240:	bl	898 <free@plt>
    1244:	ldr	r5, [sl]
    1248:	ldr	r6, [r4, #24]
    124c:	mov	r0, r5
    1250:	bl	940 <strlen@plt>
    1254:	add	r0, r0, #1
    1258:	bl	8f8 <malloc@plt>
    125c:	subs	r4, r0, #0
    1260:	beq	1278 <m_challenge+0x720>
    1264:	mov	r1, r5
    1268:	mov	r0, r4
    126c:	bl	8ec <strcpy@plt>
    1270:	str	r4, [r6, #32]
    1274:	b	cbc <m_challenge+0x164>
    1278:	bl	8bc <rb_outofmemory@plt>
    127c:	add	r7, r4, #88	; 0x58
    1280:	ldr	r3, [pc, #152]	; 1320 <m_challenge+0x7c8>
    1284:	ldr	r2, [r5, r3]
    1288:	mov	r3, r7
    128c:	add	r2, r2, #88	; 0x58
    1290:	ldr	r1, [pc, #236]	; 1384 <m_challenge+0x82c>
    1294:	add	r1, pc, r1
    1298:	mov	r0, r4
    129c:	bl	88c <sendto_one@plt>
    12a0:	add	r8, r4, #152	; 0x98
    12a4:	add	r9, r4, #163	; 0xa3
    12a8:	ldr	r3, [r4, #24]
    12ac:	ldr	r2, [r3, #32]
    12b0:	add	r3, r4, #288	; 0x120
    12b4:	add	r3, r3, #3
    12b8:	str	r3, [sp, #8]
    12bc:	str	r9, [sp, #4]
    12c0:	str	r8, [sp]
    12c4:	mov	r3, r7
    12c8:	ldr	r1, [pc, #184]	; 1388 <m_challenge+0x830>
    12cc:	add	r1, pc, r1
    12d0:	mov	r0, #4
    12d4:	bl	964 <ilog@plt>
    12d8:	ldr	r3, [pc, #80]	; 1330 <m_challenge+0x7d8>
    12dc:	ldr	r3, [r5, r3]
    12e0:	ldr	r3, [r3, #84]	; 0x54
    12e4:	cmp	r3, #0
    12e8:	beq	df0 <m_challenge+0x298>
    12ec:	str	r9, [sp, #4]
    12f0:	str	r8, [sp]
    12f4:	mov	r3, r7
    12f8:	ldr	r2, [pc, #140]	; 138c <m_challenge+0x834>
    12fc:	add	r2, pc, r2
    1300:	mov	r1, #256	; 0x100
    1304:	mov	r0, r1
    1308:	bl	8d4 <sendto_realops_snomask@plt>
    130c:	b	de8 <m_challenge+0x290>
    1310:	ldr	r7, [r4, #432]	; 0x1b0
    1314:	b	f08 <m_challenge+0x3b0>
    1318:	.word	0x0001147c
    131c:	.word	0x00000944
    1320:	.word	0x00000098
    1324:	.word	0x00000734
    1328:	.word	0x00000778
    132c:	.word	0x00000760
    1330:	.word	0x0000009c
    1334:	.word	0x00000750
    1338:	.word	0x000006d8
    133c:	.word	0x00000714
    1340:	.word	0x00000728
    1344:	.word	0x00000730
    1348:	.word	0x00000724
    134c:	.word	0x00000778
    1350:	.word	0x00000784
    1354:	.word	0x00000520
    1358:	.word	0x0000052c
    135c:	.word	0x00000520
    1360:	.word	0x0000055c
    1364:	.word	0x00000494
    1368:	.word	0x0000055c
    136c:	.word	0x0000056c
    1370:	.word	0x0000041c
    1374:	.word	0x00000560
    1378:	.word	0x00000580
    137c:	.word	0x00000590
    1380:	.word	0x0000053c
    1384:	.word	0x000001d4
    1388:	.word	0x00000210
    138c:	.word	0x0000020c

Disassembly of section .fini:

00001390 <_fini>:
    1390:	push	{r3, lr}
    1394:	pop	{r3, pc}
