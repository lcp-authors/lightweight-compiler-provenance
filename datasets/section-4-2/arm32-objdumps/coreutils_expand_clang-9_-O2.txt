
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010d78 <.init>:
   10d78:	push	{r3, lr}
   10d7c:	bl	11020 <__assert_fail@plt+0x48>
   10d80:	pop	{r3, pc}

Disassembly of section .plt:

00010d84 <calloc@plt-0x14>:
   10d84:	push	{lr}		; (str lr, [sp, #-4]!)
   10d88:	ldr	lr, [pc, #4]	; 10d94 <calloc@plt-0x4>
   10d8c:	add	lr, pc, lr
   10d90:	ldr	pc, [lr, #8]!
   10d94:	andeq	r5, r1, ip, ror #4

00010d98 <calloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #620]!	; 0x26c

00010da4 <fputs_unlocked@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #612]!	; 0x264

00010db0 <raise@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #604]!	; 0x25c

00010dbc <strcmp@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #596]!	; 0x254

00010dc8 <posix_fadvise64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #588]!	; 0x24c

00010dd4 <fflush@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #580]!	; 0x244

00010de0 <free@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #572]!	; 0x23c

00010dec <_exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #564]!	; 0x234

00010df8 <memcpy@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #556]!	; 0x22c

00010e04 <mbsinit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #548]!	; 0x224

00010e10 <dcgettext@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #540]!	; 0x21c

00010e1c <realloc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #532]!	; 0x214

00010e28 <textdomain@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #524]!	; 0x20c

00010e34 <iswprint@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #516]!	; 0x204

00010e40 <fwrite@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #508]!	; 0x1fc

00010e4c <lseek64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #500]!	; 0x1f4

00010e58 <__ctype_get_mb_cur_max@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #492]!	; 0x1ec

00010e64 <__fpending@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e70 <mbrtowc@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #476]!	; 0x1dc

00010e7c <error@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #468]!	; 0x1d4

00010e88 <malloc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #460]!	; 0x1cc

00010e94 <__libc_start_main@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #452]!	; 0x1c4

00010ea0 <__freading@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #444]!	; 0x1bc

00010eac <__gmon_start__@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #436]!	; 0x1b4

00010eb8 <getopt_long@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ec4 <__ctype_b_loc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ed0 <exit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #412]!	; 0x19c

00010edc <bcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #404]!	; 0x194

00010ee8 <strlen@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #396]!	; 0x18c

00010ef4 <__errno_location@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #388]!	; 0x184

00010f00 <__cxa_atexit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #380]!	; 0x17c

00010f0c <memset@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #372]!	; 0x174

00010f18 <__printf_chk@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #364]!	; 0x16c

00010f24 <fileno@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #356]!	; 0x164

00010f30 <__fprintf_chk@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #348]!	; 0x15c

00010f3c <fclose@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #340]!	; 0x154

00010f48 <fseeko64@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #332]!	; 0x14c

00010f54 <__uflow@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #324]!	; 0x144

00010f60 <__overflow@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #316]!	; 0x13c

00010f6c <setlocale@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #308]!	; 0x134

00010f78 <strrchr@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #300]!	; 0x12c

00010f84 <nl_langinfo@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #292]!	; 0x124

00010f90 <clearerr_unlocked@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #284]!	; 0x11c

00010f9c <fopen64@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #276]!	; 0x114

00010fa8 <bindtextdomain@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #268]!	; 0x10c

00010fb4 <strncmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #260]!	; 0x104

00010fc0 <abort@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #252]!	; 0xfc

00010fcc <strspn@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #244]!	; 0xf4

00010fd8 <__assert_fail@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #236]!	; 0xec

Disassembly of section .text:

00010fe4 <.text>:
   10fe4:	mov	fp, #0
   10fe8:	mov	lr, #0
   10fec:	pop	{r1}		; (ldr r1, [sp], #4)
   10ff0:	mov	r2, sp
   10ff4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ff8:	push	{r0}		; (str r0, [sp, #-4]!)
   10ffc:	ldr	ip, [pc, #16]	; 11014 <__assert_fail@plt+0x3c>
   11000:	push	{ip}		; (str ip, [sp, #-4]!)
   11004:	ldr	r0, [pc, #12]	; 11018 <__assert_fail@plt+0x40>
   11008:	ldr	r3, [pc, #12]	; 1101c <__assert_fail@plt+0x44>
   1100c:	bl	10e94 <__libc_start_main@plt>
   11010:	bl	10fc0 <abort@plt>
   11014:	andeq	r5, r1, ip, asr #5
   11018:	andeq	r1, r1, r0, ror r3
   1101c:	andeq	r5, r1, ip, ror #4
   11020:	ldr	r3, [pc, #20]	; 1103c <__assert_fail@plt+0x64>
   11024:	ldr	r2, [pc, #20]	; 11040 <__assert_fail@plt+0x68>
   11028:	add	r3, pc, r3
   1102c:	ldr	r2, [r3, r2]
   11030:	cmp	r2, #0
   11034:	bxeq	lr
   11038:	b	10eac <__gmon_start__@plt>
   1103c:	ldrdeq	r4, [r1], -r0
   11040:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11044:	ldr	r0, [pc, #24]	; 11064 <__assert_fail@plt+0x8c>
   11048:	ldr	r3, [pc, #24]	; 11068 <__assert_fail@plt+0x90>
   1104c:	cmp	r3, r0
   11050:	bxeq	lr
   11054:	ldr	r3, [pc, #16]	; 1106c <__assert_fail@plt+0x94>
   11058:	cmp	r3, #0
   1105c:	bxeq	lr
   11060:	bx	r3
   11064:	andeq	r6, r2, r0, lsr r1
   11068:	andeq	r6, r2, r0, lsr r1
   1106c:	andeq	r0, r0, r0
   11070:	ldr	r0, [pc, #36]	; 1109c <__assert_fail@plt+0xc4>
   11074:	ldr	r1, [pc, #36]	; 110a0 <__assert_fail@plt+0xc8>
   11078:	sub	r1, r1, r0
   1107c:	asr	r1, r1, #2
   11080:	add	r1, r1, r1, lsr #31
   11084:	asrs	r1, r1, #1
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0xcc>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r6, r2, r0, lsr r1
   110a0:	andeq	r6, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	push	{r4, lr}
   110ac:	ldr	r4, [pc, #24]	; 110cc <__assert_fail@plt+0xf4>
   110b0:	ldrb	r3, [r4]
   110b4:	cmp	r3, #0
   110b8:	popne	{r4, pc}
   110bc:	bl	11044 <__assert_fail@plt+0x6c>
   110c0:	mov	r3, #1
   110c4:	strb	r3, [r4]
   110c8:	pop	{r4, pc}
   110cc:	andeq	r6, r2, r4, asr r1
   110d0:	b	11070 <__assert_fail@plt+0x98>
   110d4:	push	{fp, lr}
   110d8:	mov	fp, sp
   110dc:	sub	sp, sp, #56	; 0x38
   110e0:	mov	r4, r0
   110e4:	cmp	r0, #0
   110e8:	bne	1132c <__assert_fail@plt+0x354>
   110ec:	movw	r1, #21275	; 0x531b
   110f0:	mov	r0, #0
   110f4:	mov	r2, #5
   110f8:	movt	r1, #1
   110fc:	bl	10e10 <dcgettext@plt>
   11100:	mov	r1, r0
   11104:	movw	r0, #24988	; 0x619c
   11108:	movt	r0, #2
   1110c:	ldr	r2, [r0]
   11110:	mov	r0, #1
   11114:	bl	10f18 <__printf_chk@plt>
   11118:	movw	r1, #21308	; 0x533c
   1111c:	mov	r0, #0
   11120:	mov	r2, #5
   11124:	movt	r1, #1
   11128:	bl	10e10 <dcgettext@plt>
   1112c:	movw	r7, #24908	; 0x614c
   11130:	movt	r7, #2
   11134:	ldr	r1, [r7]
   11138:	bl	10da4 <fputs_unlocked@plt>
   1113c:	movw	r1, #21646	; 0x548e
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	movt	r1, #1
   1114c:	bl	10e10 <dcgettext@plt>
   11150:	ldr	r1, [r7]
   11154:	bl	10da4 <fputs_unlocked@plt>
   11158:	movw	r1, #21702	; 0x54c6
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10e10 <dcgettext@plt>
   1116c:	ldr	r1, [r7]
   11170:	bl	10da4 <fputs_unlocked@plt>
   11174:	movw	r1, #21374	; 0x537e
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	movt	r1, #1
   11184:	bl	10e10 <dcgettext@plt>
   11188:	ldr	r1, [r7]
   1118c:	bl	10da4 <fputs_unlocked@plt>
   11190:	bl	12084 <__assert_fail@plt+0x10ac>
   11194:	movw	r1, #21486	; 0x53ee
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e10 <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10da4 <fputs_unlocked@plt>
   111b0:	movw	r1, #21531	; 0x541b
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e10 <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10da4 <fputs_unlocked@plt>
   111cc:	movw	r0, #22272	; 0x5700
   111d0:	mov	r2, #48	; 0x30
   111d4:	mov	r6, sp
   111d8:	movw	r5, #21585	; 0x5451
   111dc:	movt	r0, #1
   111e0:	movt	r5, #1
   111e4:	add	r1, r0, #32
   111e8:	add	r3, r0, #16
   111ec:	vld1.64	{d18-d19}, [r0], r2
   111f0:	vld1.64	{d16-d17}, [r1]
   111f4:	vld1.64	{d20-d21}, [r3]
   111f8:	vldr	d22, [r0]
   111fc:	add	r1, r6, #32
   11200:	add	r0, r6, #16
   11204:	vst1.64	{d16-d17}, [r1]
   11208:	movw	r1, #21777	; 0x5511
   1120c:	vst1.64	{d20-d21}, [r0]
   11210:	mov	r0, r6
   11214:	movt	r1, #1
   11218:	vst1.64	{d18-d19}, [r0], r2
   1121c:	vstr	d22, [r0]
   11220:	mov	r0, r5
   11224:	bl	10dbc <strcmp@plt>
   11228:	cmp	r0, #0
   1122c:	ldrne	r1, [r6, #8]!
   11230:	cmpne	r1, #0
   11234:	bne	11220 <__assert_fail@plt+0x248>
   11238:	movw	r1, #21872	; 0x5570
   1123c:	ldr	r6, [r6, #4]
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10e10 <dcgettext@plt>
   11250:	movw	r2, #21616	; 0x5470
   11254:	movw	r3, #21895	; 0x5587
   11258:	mov	r1, r0
   1125c:	mov	r0, #1
   11260:	movt	r2, #1
   11264:	movt	r3, #1
   11268:	bl	10f18 <__printf_chk@plt>
   1126c:	cmp	r6, #0
   11270:	mov	r0, #5
   11274:	mov	r1, #0
   11278:	moveq	r6, r5
   1127c:	bl	10f6c <setlocale@plt>
   11280:	cmp	r0, #0
   11284:	beq	112bc <__assert_fail@plt+0x2e4>
   11288:	movw	r1, #21935	; 0x55af
   1128c:	mov	r2, #3
   11290:	movt	r1, #1
   11294:	bl	10fb4 <strncmp@plt>
   11298:	cmp	r0, #0
   1129c:	beq	112bc <__assert_fail@plt+0x2e4>
   112a0:	movw	r1, #21939	; 0x55b3
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10e10 <dcgettext@plt>
   112b4:	ldr	r1, [r7]
   112b8:	bl	10da4 <fputs_unlocked@plt>
   112bc:	movw	r1, #22010	; 0x55fa
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10e10 <dcgettext@plt>
   112d0:	movw	r2, #21895	; 0x5587
   112d4:	mov	r1, r0
   112d8:	mov	r0, #1
   112dc:	mov	r3, r5
   112e0:	movt	r2, #1
   112e4:	bl	10f18 <__printf_chk@plt>
   112e8:	movw	r1, #22037	; 0x5615
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10e10 <dcgettext@plt>
   112fc:	mov	r1, r0
   11300:	movw	r0, #21805	; 0x552d
   11304:	movw	r3, #22087	; 0x5647
   11308:	cmp	r6, r5
   1130c:	mov	r2, r6
   11310:	movt	r0, #1
   11314:	movt	r3, #1
   11318:	moveq	r3, r0
   1131c:	mov	r0, #1
   11320:	bl	10f18 <__printf_chk@plt>
   11324:	mov	r0, r4
   11328:	bl	10ed0 <exit@plt>
   1132c:	movw	r0, #24896	; 0x6140
   11330:	movw	r1, #21236	; 0x52f4
   11334:	mov	r2, #5
   11338:	movt	r0, #2
   1133c:	movt	r1, #1
   11340:	ldr	r5, [r0]
   11344:	mov	r0, #0
   11348:	bl	10e10 <dcgettext@plt>
   1134c:	mov	r2, r0
   11350:	movw	r0, #24988	; 0x619c
   11354:	mov	r1, #1
   11358:	movt	r0, #2
   1135c:	ldr	r3, [r0]
   11360:	mov	r0, r5
   11364:	bl	10f30 <__fprintf_chk@plt>
   11368:	mov	r0, r4
   1136c:	bl	10ed0 <exit@plt>
   11370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11374:	add	fp, sp, #28
   11378:	sub	sp, sp, #20
   1137c:	mov	r5, r0
   11380:	ldr	r0, [r1]
   11384:	mov	r4, r1
   11388:	bl	123e0 <__assert_fail@plt+0x1408>
   1138c:	movw	r1, #22087	; 0x5647
   11390:	mov	r0, #6
   11394:	movt	r1, #1
   11398:	bl	10f6c <setlocale@plt>
   1139c:	movw	r6, #21620	; 0x5474
   113a0:	movw	r1, #21592	; 0x5458
   113a4:	movt	r6, #1
   113a8:	movt	r1, #1
   113ac:	mov	r0, r6
   113b0:	bl	10fa8 <bindtextdomain@plt>
   113b4:	mov	r0, r6
   113b8:	bl	10e28 <textdomain@plt>
   113bc:	movw	r0, #8432	; 0x20f0
   113c0:	movt	r0, #1
   113c4:	bl	152d0 <__assert_fail@plt+0x42f8>
   113c8:	movw	r1, #24920	; 0x6158
   113cc:	movw	r9, #22152	; 0x5688
   113d0:	movw	r7, #22188	; 0x56ac
   113d4:	movw	sl, #24912	; 0x6150
   113d8:	mov	r0, #1
   113dc:	mov	r6, #0
   113e0:	add	r8, sp, #13
   113e4:	movt	r1, #2
   113e8:	movt	r9, #1
   113ec:	movt	r7, #1
   113f0:	movt	sl, #2
   113f4:	strb	r0, [r1]
   113f8:	b	11418 <__assert_fail@plt+0x440>
   113fc:	ldr	r1, [sl]
   11400:	cmp	r1, #0
   11404:	subne	r0, r1, #1
   11408:	strbeq	r6, [sp, #14]
   1140c:	strbeq	r0, [sp, #13]
   11410:	moveq	r0, r8
   11414:	bl	11850 <__assert_fail@plt+0x878>
   11418:	mov	r0, r5
   1141c:	mov	r1, r4
   11420:	mov	r2, r9
   11424:	mov	r3, r7
   11428:	str	r6, [sp]
   1142c:	bl	10eb8 <getopt_long@plt>
   11430:	sub	r1, r0, #48	; 0x30
   11434:	cmp	r1, #10
   11438:	bcc	113fc <__assert_fail@plt+0x424>
   1143c:	cmp	r0, #104	; 0x68
   11440:	ble	11470 <__assert_fail@plt+0x498>
   11444:	cmp	r0, #116	; 0x74
   11448:	beq	11464 <__assert_fail@plt+0x48c>
   1144c:	cmp	r0, #105	; 0x69
   11450:	bne	11730 <__assert_fail@plt+0x758>
   11454:	movw	r0, #24920	; 0x6158
   11458:	movt	r0, #2
   1145c:	strb	r6, [r0]
   11460:	b	11418 <__assert_fail@plt+0x440>
   11464:	ldr	r0, [sl]
   11468:	bl	11850 <__assert_fail@plt+0x878>
   1146c:	b	11418 <__assert_fail@plt+0x440>
   11470:	cmn	r0, #1
   11474:	bne	116d0 <__assert_fail@plt+0x6f8>
   11478:	bl	11be4 <__assert_fail@plt+0xc0c>
   1147c:	movw	r0, #24888	; 0x6138
   11480:	movt	r0, #2
   11484:	ldr	r1, [r0]
   11488:	mov	r0, #0
   1148c:	cmp	r1, r5
   11490:	addlt	r0, r4, r1, lsl #2
   11494:	bl	11e18 <__assert_fail@plt+0xe40>
   11498:	mov	r0, #0
   1149c:	bl	11e48 <__assert_fail@plt+0xe70>
   114a0:	cmp	r0, #0
   114a4:	beq	116b8 <__assert_fail@plt+0x6e0>
   114a8:	movw	r9, #24908	; 0x614c
   114ac:	movw	r4, #24920	; 0x6158
   114b0:	mov	sl, r0
   114b4:	movt	r9, #2
   114b8:	movt	r4, #2
   114bc:	mov	r7, #0
   114c0:	mov	r8, #1
   114c4:	mov	r5, #0
   114c8:	str	r7, [sp, #16]
   114cc:	ldmib	sl, {r0, r1}
   114d0:	cmp	r0, r1
   114d4:	bcs	11610 <__assert_fail@plt+0x638>
   114d8:	add	r1, r0, #1
   114dc:	str	r1, [sl, #4]
   114e0:	ldrb	r6, [r0]
   114e4:	tst	r8, #1
   114e8:	beq	11644 <__assert_fail@plt+0x66c>
   114ec:	cmp	r6, #8
   114f0:	beq	1158c <__assert_fail@plt+0x5b4>
   114f4:	cmp	r6, #9
   114f8:	bne	115bc <__assert_fail@plt+0x5e4>
   114fc:	mov	r0, r7
   11500:	mov	r1, r5
   11504:	add	r2, sp, #16
   11508:	add	r3, sp, #15
   1150c:	bl	11d14 <__assert_fail@plt+0xd3c>
   11510:	ldrb	r2, [sp, #15]
   11514:	adds	r6, r7, #1
   11518:	adc	r4, r5, #0
   1151c:	cmp	r2, #0
   11520:	moveq	r6, r0
   11524:	moveq	r4, r1
   11528:	subs	r0, r6, r7
   1152c:	sbcs	r0, r4, r5
   11530:	bcc	11738 <__assert_fail@plt+0x760>
   11534:	adds	r7, r7, #1
   11538:	adc	r5, r5, #0
   1153c:	subs	r0, r7, r6
   11540:	sbcs	r0, r5, r4
   11544:	bcs	115d8 <__assert_fail@plt+0x600>
   11548:	ldr	r0, [r9]
   1154c:	ldr	r1, [r0, #20]
   11550:	ldr	r2, [r0, #24]
   11554:	cmp	r1, r2
   11558:	bcs	11578 <__assert_fail@plt+0x5a0>
   1155c:	add	r2, r1, #1
   11560:	str	r2, [r0, #20]
   11564:	mov	r0, #32
   11568:	strb	r0, [r1]
   1156c:	cmn	r0, #1
   11570:	bgt	11534 <__assert_fail@plt+0x55c>
   11574:	b	1168c <__assert_fail@plt+0x6b4>
   11578:	mov	r1, #32
   1157c:	bl	10f60 <__overflow@plt>
   11580:	cmn	r0, #1
   11584:	bgt	11534 <__assert_fail@plt+0x55c>
   11588:	b	1168c <__assert_fail@plt+0x6b4>
   1158c:	ldr	r0, [sp, #16]
   11590:	mov	r6, #8
   11594:	cmp	r0, #0
   11598:	subne	r0, r0, #1
   1159c:	subs	r1, r7, #1
   115a0:	str	r0, [sp, #16]
   115a4:	orr	r0, r7, r5
   115a8:	sbc	r2, r5, #0
   115ac:	cmp	r0, #0
   115b0:	movne	r5, r2
   115b4:	movne	r7, r1
   115b8:	b	115e4 <__assert_fail@plt+0x60c>
   115bc:	adds	r7, r7, #1
   115c0:	mov	r0, #0
   115c4:	adcs	r5, r5, #0
   115c8:	adc	r0, r0, #0
   115cc:	cmp	r0, #1
   115d0:	bne	115e4 <__assert_fail@plt+0x60c>
   115d4:	b	11738 <__assert_fail@plt+0x760>
   115d8:	movw	r4, #24920	; 0x6158
   115dc:	mov	r6, #32
   115e0:	movt	r4, #2
   115e4:	ldrb	r0, [r4]
   115e8:	mov	r8, #1
   115ec:	cmp	r0, #0
   115f0:	bne	11648 <__assert_fail@plt+0x670>
   115f4:	bl	10ec4 <__ctype_b_loc@plt>
   115f8:	ldr	r0, [r0]
   115fc:	ldrb	r0, [r0, r6, lsl #1]
   11600:	and	r8, r0, #1
   11604:	cmp	r6, #0
   11608:	bpl	11650 <__assert_fail@plt+0x678>
   1160c:	b	116b8 <__assert_fail@plt+0x6e0>
   11610:	mov	r0, sl
   11614:	bl	10f54 <__uflow@plt>
   11618:	mov	r6, r0
   1161c:	cmn	r0, #1
   11620:	bgt	114e4 <__assert_fail@plt+0x50c>
   11624:	mov	r0, sl
   11628:	bl	11e48 <__assert_fail@plt+0xe70>
   1162c:	mov	sl, r0
   11630:	cmp	r0, #0
   11634:	bne	114cc <__assert_fail@plt+0x4f4>
   11638:	mov	sl, #0
   1163c:	tst	r8, #1
   11640:	bne	114ec <__assert_fail@plt+0x514>
   11644:	mov	r8, #0
   11648:	cmp	r6, #0
   1164c:	bmi	116b8 <__assert_fail@plt+0x6e0>
   11650:	ldr	r0, [r9]
   11654:	ldr	r1, [r0, #20]
   11658:	ldr	r2, [r0, #24]
   1165c:	cmp	r1, r2
   11660:	bcs	1167c <__assert_fail@plt+0x6a4>
   11664:	add	r2, r1, #1
   11668:	str	r2, [r0, #20]
   1166c:	strb	r6, [r1]
   11670:	cmp	r6, #10
   11674:	bne	114cc <__assert_fail@plt+0x4f4>
   11678:	b	114bc <__assert_fail@plt+0x4e4>
   1167c:	uxtb	r1, r6
   11680:	bl	10f60 <__overflow@plt>
   11684:	cmn	r0, #1
   11688:	bgt	11670 <__assert_fail@plt+0x698>
   1168c:	bl	10ef4 <__errno_location@plt>
   11690:	movw	r1, #22137	; 0x5679
   11694:	ldr	r4, [r0]
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #1
   116a4:	bl	10e10 <dcgettext@plt>
   116a8:	mov	r2, r0
   116ac:	mov	r0, #1
   116b0:	mov	r1, r4
   116b4:	bl	10e7c <error@plt>
   116b8:	bl	12034 <__assert_fail@plt+0x105c>
   116bc:	movw	r0, #24924	; 0x615c
   116c0:	movt	r0, #2
   116c4:	ldr	r0, [r0]
   116c8:	sub	sp, fp, #28
   116cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116d0:	cmn	r0, #3
   116d4:	beq	116e8 <__assert_fail@plt+0x710>
   116d8:	cmn	r0, #2
   116dc:	bne	11730 <__assert_fail@plt+0x758>
   116e0:	mov	r0, #0
   116e4:	bl	110d4 <__assert_fail@plt+0xfc>
   116e8:	movw	r0, #24808	; 0x60e8
   116ec:	movw	r2, #21630	; 0x547e
   116f0:	mov	r1, #0
   116f4:	movt	r0, #2
   116f8:	movt	r2, #1
   116fc:	str	r1, [sp, #4]
   11700:	movw	r1, #21585	; 0x5451
   11704:	movt	r1, #1
   11708:	ldr	r3, [r0]
   1170c:	movw	r0, #24908	; 0x614c
   11710:	str	r2, [sp]
   11714:	movw	r2, #21616	; 0x5470
   11718:	movt	r0, #2
   1171c:	movt	r2, #1
   11720:	ldr	r0, [r0]
   11724:	bl	14604 <__assert_fail@plt+0x362c>
   11728:	mov	r0, #0
   1172c:	bl	10ed0 <exit@plt>
   11730:	mov	r0, #1
   11734:	bl	110d4 <__assert_fail@plt+0xfc>
   11738:	movw	r1, #22114	; 0x5662
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	10e10 <dcgettext@plt>
   1174c:	mov	r2, r0
   11750:	mov	r0, #1
   11754:	mov	r1, #0
   11758:	bl	10e7c <error@plt>
   1175c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11760:	add	fp, sp, #24
   11764:	movw	r8, #24928	; 0x6160
   11768:	mov	r4, r1
   1176c:	movw	r9, #24932	; 0x6164
   11770:	mov	r5, r0
   11774:	mov	r0, #0
   11778:	movt	r8, #2
   1177c:	movt	r9, #2
   11780:	ldr	r1, [r8]
   11784:	cmp	r1, #0
   11788:	beq	1179c <__assert_fail@plt+0x7c4>
   1178c:	ldr	r2, [r9]
   11790:	add	r2, r2, r1, lsl #3
   11794:	ldrd	r2, [r2, #-8]
   11798:	b	117a4 <__assert_fail@plt+0x7cc>
   1179c:	mov	r2, #0
   117a0:	mov	r3, #0
   117a4:	subs	r7, r5, r2
   117a8:	sbcs	r6, r4, r3
   117ac:	adc	r0, r0, #0
   117b0:	rsbs	r0, r0, #1
   117b4:	movw	r0, #24936	; 0x6168
   117b8:	movt	r0, #2
   117bc:	movwne	r6, #0
   117c0:	movwne	r7, #0
   117c4:	ldr	r0, [r0]
   117c8:	cmp	r1, r0
   117cc:	bne	117f0 <__assert_fail@plt+0x818>
   117d0:	ldr	r0, [r9]
   117d4:	movw	r1, #24936	; 0x6168
   117d8:	mov	r2, #8
   117dc:	movt	r1, #2
   117e0:	bl	149e4 <__assert_fail@plt+0x3a0c>
   117e4:	ldr	r1, [r8]
   117e8:	str	r0, [r9]
   117ec:	b	117f4 <__assert_fail@plt+0x81c>
   117f0:	ldr	r0, [r9]
   117f4:	add	r2, r1, #1
   117f8:	str	r2, [r8]
   117fc:	str	r5, [r0, r1, lsl #3]!
   11800:	str	r4, [r0, #4]
   11804:	movw	r0, #25296	; 0x62d0
   11808:	movt	r0, #2
   1180c:	ldr	r1, [r0]
   11810:	subs	r1, r1, r7
   11814:	rscs	r1, r6, #0
   11818:	bcs	11828 <__assert_fail@plt+0x850>
   1181c:	cmp	r6, #0
   11820:	bne	1182c <__assert_fail@plt+0x854>
   11824:	str	r7, [r0]
   11828:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1182c:	movw	r1, #22328	; 0x5738
   11830:	mov	r0, #0
   11834:	mov	r2, #5
   11838:	movt	r1, #1
   1183c:	bl	10e10 <dcgettext@plt>
   11840:	mov	r2, r0
   11844:	mov	r0, #1
   11848:	mov	r1, #0
   1184c:	bl	10e7c <error@plt>
   11850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11854:	add	fp, sp, #28
   11858:	sub	sp, sp, #12
   1185c:	mov	r5, r0
   11860:	mov	r0, #1
   11864:	mov	r7, #0
   11868:	mov	r8, #0
   1186c:	mov	r9, #0
   11870:	mov	sl, #0
   11874:	mov	r6, #0
   11878:	str	r0, [sp, #4]
   1187c:	mov	r0, #0
   11880:	str	r0, [sp, #8]
   11884:	b	118a4 <__assert_fail@plt+0x8cc>
   11888:	mov	r0, r7
   1188c:	mov	r1, r8
   11890:	bl	1175c <__assert_fail@plt+0x784>
   11894:	mov	r9, #0
   11898:	mov	sl, #0
   1189c:	mov	r6, #0
   118a0:	add	r5, r5, #1
   118a4:	ldrb	r4, [r5]
   118a8:	cmp	r4, #44	; 0x2c
   118ac:	beq	11924 <__assert_fail@plt+0x94c>
   118b0:	cmp	r4, #0
   118b4:	beq	11af0 <__assert_fail@plt+0xb18>
   118b8:	bl	10ec4 <__ctype_b_loc@plt>
   118bc:	ldr	r0, [r0]
   118c0:	ldrb	r0, [r0, r4, lsl #1]
   118c4:	tst	r0, #1
   118c8:	bne	11924 <__assert_fail@plt+0x94c>
   118cc:	cmp	r4, #43	; 0x2b
   118d0:	beq	11978 <__assert_fail@plt+0x9a0>
   118d4:	cmp	r4, #47	; 0x2f
   118d8:	bne	119d4 <__assert_fail@plt+0x9fc>
   118dc:	mov	sl, #0
   118e0:	tst	r6, #1
   118e4:	beq	11ad8 <__assert_fail@plt+0xb00>
   118e8:	movw	r1, #22351	; 0x574f
   118ec:	mov	r0, #0
   118f0:	mov	r2, #5
   118f4:	movt	r1, #1
   118f8:	bl	10e10 <dcgettext@plt>
   118fc:	mov	r6, r0
   11900:	mov	r0, r5
   11904:	bl	14034 <__assert_fail@plt+0x305c>
   11908:	mov	r3, r0
   1190c:	mov	r0, #0
   11910:	mov	r1, #0
   11914:	mov	r2, r6
   11918:	bl	10e7c <error@plt>
   1191c:	mov	r9, #1
   11920:	b	119bc <__assert_fail@plt+0x9e4>
   11924:	tst	r6, #1
   11928:	beq	1189c <__assert_fail@plt+0x8c4>
   1192c:	tst	r9, #1
   11930:	beq	11954 <__assert_fail@plt+0x97c>
   11934:	movw	r4, #24944	; 0x6170
   11938:	movt	r4, #2
   1193c:	ldrd	r0, [r4]
   11940:	orrs	r0, r0, r1
   11944:	bne	11b1c <__assert_fail@plt+0xb44>
   11948:	stm	r4, {r7, r8}
   1194c:	mov	r9, #1
   11950:	b	1189c <__assert_fail@plt+0x8c4>
   11954:	tst	sl, #1
   11958:	beq	11888 <__assert_fail@plt+0x8b0>
   1195c:	movw	r4, #24952	; 0x6178
   11960:	movt	r4, #2
   11964:	ldrd	r0, [r4]
   11968:	orrs	r0, r0, r1
   1196c:	bne	11bb4 <__assert_fail@plt+0xbdc>
   11970:	stm	r4, {r7, r8}
   11974:	b	119c8 <__assert_fail@plt+0x9f0>
   11978:	tst	r6, #1
   1197c:	beq	119c8 <__assert_fail@plt+0x9f0>
   11980:	movw	r1, #22392	; 0x5778
   11984:	mov	r0, #0
   11988:	mov	r2, #5
   1198c:	mov	r9, #0
   11990:	movt	r1, #1
   11994:	bl	10e10 <dcgettext@plt>
   11998:	mov	r6, r0
   1199c:	mov	r0, r5
   119a0:	bl	14034 <__assert_fail@plt+0x305c>
   119a4:	mov	r3, r0
   119a8:	mov	r0, #0
   119ac:	mov	r1, #0
   119b0:	mov	r2, r6
   119b4:	bl	10e7c <error@plt>
   119b8:	mov	sl, #1
   119bc:	mov	r0, #0
   119c0:	str	r0, [sp, #4]
   119c4:	b	11acc <__assert_fail@plt+0xaf4>
   119c8:	mov	sl, #1
   119cc:	mov	r9, #0
   119d0:	b	1189c <__assert_fail@plt+0x8c4>
   119d4:	sub	r0, r4, #48	; 0x30
   119d8:	cmp	r0, #9
   119dc:	bhi	11b78 <__assert_fail@plt+0xba0>
   119e0:	movw	r3, #39321	; 0x9999
   119e4:	ands	r1, r6, #1
   119e8:	ldr	r2, [sp, #8]
   119ec:	moveq	r2, r5
   119f0:	movt	r3, #39321	; 0x9999
   119f4:	str	r2, [sp, #8]
   119f8:	mov	r2, r1
   119fc:	movne	r1, r7
   11a00:	movne	r2, r8
   11a04:	subs	r3, r3, r1
   11a08:	movw	r3, #39321	; 0x9999
   11a0c:	movt	r3, #6553	; 0x1999
   11a10:	sbcs	r3, r3, r2
   11a14:	bcc	11a48 <__assert_fail@plt+0xa70>
   11a18:	mov	r3, #10
   11a1c:	add	r6, r2, r2, lsl #2
   11a20:	mov	r8, r2
   11a24:	umull	r3, r7, r1, r3
   11a28:	add	r7, r7, r6, lsl #1
   11a2c:	adds	r3, r3, r0
   11a30:	mov	r6, #1
   11a34:	adc	r0, r7, r0, asr #31
   11a38:	subs	r7, r3, r1
   11a3c:	sbcs	r7, r0, r2
   11a40:	mov	r7, r1
   11a44:	bcs	11ae0 <__assert_fail@plt+0xb08>
   11a48:	str	sl, [sp]
   11a4c:	movw	r1, #22433	; 0x57a1
   11a50:	ldr	sl, [sp, #8]
   11a54:	movt	r1, #1
   11a58:	mov	r0, sl
   11a5c:	bl	10fcc <strspn@plt>
   11a60:	mov	r5, r0
   11a64:	mov	r0, sl
   11a68:	mov	r1, r5
   11a6c:	bl	14d00 <__assert_fail@plt+0x3d28>
   11a70:	movw	r1, #22444	; 0x57ac
   11a74:	mov	r6, r0
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #1
   11a84:	str	r0, [sp, #4]
   11a88:	mov	r0, #0
   11a8c:	bl	10e10 <dcgettext@plt>
   11a90:	mov	r4, r8
   11a94:	mov	r8, r0
   11a98:	mov	r0, r6
   11a9c:	bl	14034 <__assert_fail@plt+0x305c>
   11aa0:	mov	r3, r0
   11aa4:	mov	r2, r8
   11aa8:	mov	r0, #0
   11aac:	mov	r1, #0
   11ab0:	mov	r8, r4
   11ab4:	bl	10e7c <error@plt>
   11ab8:	mov	r0, r6
   11abc:	bl	12310 <__assert_fail@plt+0x1338>
   11ac0:	add	r0, sl, r5
   11ac4:	ldr	sl, [sp]
   11ac8:	sub	r5, r0, #1
   11acc:	mov	r6, #1
   11ad0:	add	r5, r5, #1
   11ad4:	b	118a4 <__assert_fail@plt+0x8cc>
   11ad8:	mov	r9, #1
   11adc:	b	1189c <__assert_fail@plt+0x8c4>
   11ae0:	mov	r7, r3
   11ae4:	mov	r8, r0
   11ae8:	add	r5, r5, #1
   11aec:	b	118a4 <__assert_fail@plt+0x8cc>
   11af0:	ldr	r1, [sp, #4]
   11af4:	and	r0, r1, r6
   11af8:	tst	r0, #1
   11afc:	beq	11b28 <__assert_fail@plt+0xb50>
   11b00:	tst	r9, #1
   11b04:	beq	11b3c <__assert_fail@plt+0xb64>
   11b08:	movw	r4, #24944	; 0x6170
   11b0c:	movt	r4, #2
   11b10:	ldrd	r0, [r4]
   11b14:	orrs	r0, r0, r1
   11b18:	beq	11b58 <__assert_fail@plt+0xb80>
   11b1c:	movw	r1, #22994	; 0x59d2
   11b20:	movt	r1, #1
   11b24:	b	11bbc <__assert_fail@plt+0xbe4>
   11b28:	tst	r1, #1
   11b2c:	subne	sp, fp, #28
   11b30:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b34:	mov	r0, #1
   11b38:	bl	10ed0 <exit@plt>
   11b3c:	tst	sl, #1
   11b40:	beq	11b64 <__assert_fail@plt+0xb8c>
   11b44:	movw	r4, #24952	; 0x6178
   11b48:	movt	r4, #2
   11b4c:	ldrd	r0, [r4]
   11b50:	orrs	r0, r0, r1
   11b54:	bne	11bb4 <__assert_fail@plt+0xbdc>
   11b58:	stm	r4, {r7, r8}
   11b5c:	sub	sp, fp, #28
   11b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b64:	mov	r0, r7
   11b68:	mov	r1, r8
   11b6c:	sub	sp, fp, #28
   11b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b74:	b	1175c <__assert_fail@plt+0x784>
   11b78:	movw	r1, #22469	; 0x57c5
   11b7c:	mov	r0, #0
   11b80:	mov	r2, #5
   11b84:	movt	r1, #1
   11b88:	bl	10e10 <dcgettext@plt>
   11b8c:	mov	r4, r0
   11b90:	mov	r0, r5
   11b94:	bl	14034 <__assert_fail@plt+0x305c>
   11b98:	mov	r3, r0
   11b9c:	mov	r0, #0
   11ba0:	mov	r1, #0
   11ba4:	mov	r2, r4
   11ba8:	bl	10e7c <error@plt>
   11bac:	mov	r0, #1
   11bb0:	bl	10ed0 <exit@plt>
   11bb4:	movw	r1, #23041	; 0x5a01
   11bb8:	movt	r1, #1
   11bbc:	mov	r0, #0
   11bc0:	mov	r2, #5
   11bc4:	bl	10e10 <dcgettext@plt>
   11bc8:	mov	r2, r0
   11bcc:	mov	r0, #0
   11bd0:	mov	r1, #0
   11bd4:	bl	10e7c <error@plt>
   11bd8:	mov	r0, #1
   11bdc:	stm	r4, {r7, r8}
   11be0:	bl	10ed0 <exit@plt>
   11be4:	push	{r4, r5, r6, r7, fp, lr}
   11be8:	add	fp, sp, #16
   11bec:	movw	r0, #24928	; 0x6160
   11bf0:	movt	r0, #2
   11bf4:	ldr	r1, [r0]
   11bf8:	movw	r0, #24932	; 0x6164
   11bfc:	movt	r0, #2
   11c00:	ldr	ip, [r0]
   11c04:	cmp	r1, #0
   11c08:	beq	11c48 <__assert_fail@plt+0xc70>
   11c0c:	mov	r6, #0
   11c10:	mov	r2, ip
   11c14:	mov	r3, r1
   11c18:	mov	r5, #0
   11c1c:	ldm	r2, {r4, r7}
   11c20:	orrs	r0, r4, r7
   11c24:	beq	11cd8 <__assert_fail@plt+0xd00>
   11c28:	subs	r0, r6, r4
   11c2c:	sbcs	r0, r5, r7
   11c30:	bcs	11ce4 <__assert_fail@plt+0xd0c>
   11c34:	add	r2, r2, #8
   11c38:	subs	r3, r3, #1
   11c3c:	mov	r6, r4
   11c40:	mov	r5, r7
   11c44:	bne	11c1c <__assert_fail@plt+0xc44>
   11c48:	movw	r2, #24944	; 0x6170
   11c4c:	movt	r2, #2
   11c50:	ldrd	r4, [r2]
   11c54:	movw	r2, #24952	; 0x6178
   11c58:	movt	r2, #2
   11c5c:	ldrd	r2, [r2]
   11c60:	orrs	r7, r2, r3
   11c64:	orrsne	r6, r4, r5
   11c68:	bne	11d08 <__assert_fail@plt+0xd30>
   11c6c:	cmp	r1, #0
   11c70:	beq	11c98 <__assert_fail@plt+0xcc0>
   11c74:	mov	r6, #0
   11c78:	cmp	r1, #1
   11c7c:	bne	11cc4 <__assert_fail@plt+0xcec>
   11c80:	orr	r0, r4, r2
   11c84:	orr	r1, r5, r3
   11c88:	mov	r7, #0
   11c8c:	orrs	r0, r0, r1
   11c90:	ldrdeq	r6, [ip]
   11c94:	b	11cc8 <__assert_fail@plt+0xcf0>
   11c98:	cmp	r7, #0
   11c9c:	orr	r0, r4, r5
   11ca0:	mov	r7, #0
   11ca4:	movweq	r2, #8
   11ca8:	cmp	r0, #0
   11cac:	movw	r0, #25296	; 0x62d0
   11cb0:	movt	r0, #2
   11cb4:	movne	r2, r4
   11cb8:	mov	r6, r2
   11cbc:	str	r2, [r0]
   11cc0:	b	11cc8 <__assert_fail@plt+0xcf0>
   11cc4:	mov	r7, #0
   11cc8:	movw	r0, #24960	; 0x6180
   11ccc:	movt	r0, #2
   11cd0:	strd	r6, [r0]
   11cd4:	pop	{r4, r5, r6, r7, fp, pc}
   11cd8:	movw	r1, #23088	; 0x5a30
   11cdc:	movt	r1, #1
   11ce0:	b	11cec <__assert_fail@plt+0xd14>
   11ce4:	movw	r1, #23109	; 0x5a45
   11ce8:	movt	r1, #1
   11cec:	mov	r0, #0
   11cf0:	mov	r2, #5
   11cf4:	bl	10e10 <dcgettext@plt>
   11cf8:	mov	r2, r0
   11cfc:	mov	r0, #1
   11d00:	mov	r1, #0
   11d04:	bl	10e7c <error@plt>
   11d08:	movw	r1, #23137	; 0x5a61
   11d0c:	movt	r1, #1
   11d10:	b	11cec <__assert_fail@plt+0xd14>
   11d14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d18:	add	fp, sp, #24
   11d1c:	mov	r9, r0
   11d20:	mov	r0, #0
   11d24:	mov	r8, r1
   11d28:	strb	r0, [r3]
   11d2c:	movw	r0, #24960	; 0x6180
   11d30:	movt	r0, #2
   11d34:	ldrd	r6, [r0]
   11d38:	orrs	r0, r6, r7
   11d3c:	bne	11da0 <__assert_fail@plt+0xdc8>
   11d40:	movw	r0, #24928	; 0x6160
   11d44:	ldr	r1, [r2]
   11d48:	movt	r0, #2
   11d4c:	ldr	r0, [r0]
   11d50:	cmp	r1, r0
   11d54:	bcs	11d8c <__assert_fail@plt+0xdb4>
   11d58:	movw	r7, #24932	; 0x6164
   11d5c:	movt	r7, #2
   11d60:	ldr	r7, [r7]
   11d64:	add	r4, r7, r1, lsl #3
   11d68:	ldrd	r6, [r4]
   11d6c:	subs	r5, r9, r6
   11d70:	sbcs	r5, r8, r7
   11d74:	bcc	11dc4 <__assert_fail@plt+0xdec>
   11d78:	add	r1, r1, #1
   11d7c:	add	r4, r4, #8
   11d80:	cmp	r1, r0
   11d84:	str	r1, [r2]
   11d88:	bcc	11d68 <__assert_fail@plt+0xd90>
   11d8c:	movw	r1, #24944	; 0x6170
   11d90:	movt	r1, #2
   11d94:	ldrd	r6, [r1]
   11d98:	orrs	r1, r6, r7
   11d9c:	beq	11dd0 <__assert_fail@plt+0xdf8>
   11da0:	mov	r0, r9
   11da4:	mov	r1, r8
   11da8:	mov	r2, r6
   11dac:	mov	r3, r7
   11db0:	bl	150f8 <__assert_fail@plt+0x4120>
   11db4:	adds	r0, r6, r9
   11db8:	adc	r1, r7, r8
   11dbc:	subs	r6, r0, r2
   11dc0:	sbc	r7, r1, r3
   11dc4:	mov	r0, r6
   11dc8:	mov	r1, r7
   11dcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11dd0:	movw	r1, #24952	; 0x6178
   11dd4:	movt	r1, #2
   11dd8:	ldrd	r6, [r1]
   11ddc:	orrs	r1, r6, r7
   11de0:	beq	11e04 <__assert_fail@plt+0xe2c>
   11de4:	movw	r1, #24932	; 0x6164
   11de8:	movt	r1, #2
   11dec:	ldr	r1, [r1]
   11df0:	add	r0, r1, r0, lsl #3
   11df4:	ldrd	r0, [r0, #-8]
   11df8:	subs	r0, r9, r0
   11dfc:	sbc	r1, r8, r1
   11e00:	b	11da8 <__assert_fail@plt+0xdd0>
   11e04:	mov	r0, #1
   11e08:	mov	r6, #0
   11e0c:	mov	r7, #0
   11e10:	strb	r0, [r3]
   11e14:	b	11dc4 <__assert_fail@plt+0xdec>
   11e18:	movw	r1, #24968	; 0x6188
   11e1c:	mov	r2, #0
   11e20:	cmp	r0, #0
   11e24:	movt	r1, #2
   11e28:	strb	r2, [r1]
   11e2c:	movw	r1, #24800	; 0x60e0
   11e30:	movt	r1, #2
   11e34:	movne	r1, r0
   11e38:	movw	r0, #24972	; 0x618c
   11e3c:	movt	r0, #2
   11e40:	str	r1, [r0]
   11e44:	bx	lr
   11e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e4c:	add	fp, sp, #28
   11e50:	sub	sp, sp, #4
   11e54:	cmp	r0, #0
   11e58:	beq	11ef4 <__assert_fail@plt+0xf1c>
   11e5c:	movw	r8, #24976	; 0x6190
   11e60:	movt	r8, #2
   11e64:	ldr	r7, [r8]
   11e68:	cmp	r7, #0
   11e6c:	beq	12014 <__assert_fail@plt+0x103c>
   11e70:	mov	r5, r0
   11e74:	bl	10ef4 <__errno_location@plt>
   11e78:	ldr	r1, [r5]
   11e7c:	mov	r6, r0
   11e80:	ldr	r0, [r0]
   11e84:	lsl	r1, r1, #26
   11e88:	and	r4, r0, r1, asr #31
   11e8c:	movw	r1, #23270	; 0x5ae6
   11e90:	mov	r0, r7
   11e94:	movt	r1, #1
   11e98:	bl	10dbc <strcmp@plt>
   11e9c:	cmp	r0, #0
   11ea0:	beq	12000 <__assert_fail@plt+0x1028>
   11ea4:	mov	r0, r5
   11ea8:	bl	12218 <__assert_fail@plt+0x1240>
   11eac:	cmp	r0, #0
   11eb0:	ldrne	r4, [r6]
   11eb4:	cmp	r4, #0
   11eb8:	beq	11ef4 <__assert_fail@plt+0xf1c>
   11ebc:	ldr	r2, [r8]
   11ec0:	mov	r0, #0
   11ec4:	mov	r1, #3
   11ec8:	bl	13d88 <__assert_fail@plt+0x2db0>
   11ecc:	movw	r2, #22509	; 0x57ed
   11ed0:	mov	r3, r0
   11ed4:	mov	r0, #0
   11ed8:	mov	r1, r4
   11edc:	movt	r2, #1
   11ee0:	bl	10e7c <error@plt>
   11ee4:	movw	r1, #24924	; 0x615c
   11ee8:	mov	r0, #1
   11eec:	movt	r1, #2
   11ef0:	str	r0, [r1]
   11ef4:	movw	sl, #24972	; 0x618c
   11ef8:	movt	sl, #2
   11efc:	ldr	r0, [sl]
   11f00:	add	r1, r0, #4
   11f04:	str	r1, [sl]
   11f08:	ldr	r7, [r0]
   11f0c:	cmp	r7, #0
   11f10:	beq	11fd4 <__assert_fail@plt+0xffc>
   11f14:	movw	r9, #23270	; 0x5ae6
   11f18:	movw	r5, #22509	; 0x57ed
   11f1c:	mov	r8, #1
   11f20:	movt	r9, #1
   11f24:	movt	r5, #1
   11f28:	mov	r0, r7
   11f2c:	mov	r1, r9
   11f30:	bl	10dbc <strcmp@plt>
   11f34:	cmp	r0, #0
   11f38:	beq	11f5c <__assert_fail@plt+0xf84>
   11f3c:	movw	r1, #22147	; 0x5683
   11f40:	mov	r0, r7
   11f44:	movt	r1, #1
   11f48:	bl	10f9c <fopen64@plt>
   11f4c:	mov	r6, r0
   11f50:	cmp	r6, #0
   11f54:	beq	11f7c <__assert_fail@plt+0xfa4>
   11f58:	b	11fdc <__assert_fail@plt+0x1004>
   11f5c:	movw	r0, #24968	; 0x6188
   11f60:	movt	r0, #2
   11f64:	strb	r8, [r0]
   11f68:	movw	r0, #24904	; 0x6148
   11f6c:	movt	r0, #2
   11f70:	ldr	r6, [r0]
   11f74:	cmp	r6, #0
   11f78:	bne	11fdc <__assert_fail@plt+0x1004>
   11f7c:	bl	10ef4 <__errno_location@plt>
   11f80:	ldr	r4, [r0]
   11f84:	mov	r0, #0
   11f88:	mov	r1, #3
   11f8c:	mov	r2, r7
   11f90:	mov	r6, #0
   11f94:	bl	13d88 <__assert_fail@plt+0x2db0>
   11f98:	mov	r3, r0
   11f9c:	mov	r0, #0
   11fa0:	mov	r1, r4
   11fa4:	mov	r2, r5
   11fa8:	bl	10e7c <error@plt>
   11fac:	movw	r0, #24924	; 0x615c
   11fb0:	movt	r0, #2
   11fb4:	str	r8, [r0]
   11fb8:	ldr	r0, [sl]
   11fbc:	add	r1, r0, #4
   11fc0:	str	r1, [sl]
   11fc4:	ldr	r7, [r0]
   11fc8:	cmp	r7, #0
   11fcc:	bne	11f28 <__assert_fail@plt+0xf50>
   11fd0:	b	11ff4 <__assert_fail@plt+0x101c>
   11fd4:	mov	r6, #0
   11fd8:	b	11ff4 <__assert_fail@plt+0x101c>
   11fdc:	movw	r0, #24976	; 0x6190
   11fe0:	mov	r1, #2
   11fe4:	movt	r0, #2
   11fe8:	str	r7, [r0]
   11fec:	mov	r0, r6
   11ff0:	bl	121dc <__assert_fail@plt+0x1204>
   11ff4:	mov	r0, r6
   11ff8:	sub	sp, fp, #28
   11ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12000:	mov	r0, r5
   12004:	bl	10f90 <clearerr_unlocked@plt>
   12008:	cmp	r4, #0
   1200c:	bne	11ebc <__assert_fail@plt+0xee4>
   12010:	b	11ef4 <__assert_fail@plt+0xf1c>
   12014:	movw	r0, #22512	; 0x57f0
   12018:	movw	r1, #22522	; 0x57fa
   1201c:	movw	r3, #22542	; 0x580e
   12020:	mov	r2, #340	; 0x154
   12024:	movt	r0, #1
   12028:	movt	r1, #1
   1202c:	movt	r3, #1
   12030:	bl	10fd8 <__assert_fail@plt>
   12034:	push	{fp, lr}
   12038:	mov	fp, sp
   1203c:	movw	r0, #24968	; 0x6188
   12040:	movt	r0, #2
   12044:	ldrb	r0, [r0]
   12048:	cmp	r0, #1
   1204c:	popne	{fp, pc}
   12050:	movw	r0, #24904	; 0x6148
   12054:	movt	r0, #2
   12058:	ldr	r0, [r0]
   1205c:	bl	12218 <__assert_fail@plt+0x1240>
   12060:	cmp	r0, #0
   12064:	bne	1206c <__assert_fail@plt+0x1094>
   12068:	pop	{fp, pc}
   1206c:	bl	10ef4 <__errno_location@plt>
   12070:	ldr	r1, [r0]
   12074:	movw	r2, #23270	; 0x5ae6
   12078:	mov	r0, #1
   1207c:	movt	r2, #1
   12080:	bl	10e7c <error@plt>
   12084:	push	{r4, sl, fp, lr}
   12088:	add	fp, sp, #8
   1208c:	movw	r1, #22566	; 0x5826
   12090:	mov	r0, #0
   12094:	mov	r2, #5
   12098:	movt	r1, #1
   1209c:	bl	10e10 <dcgettext@plt>
   120a0:	movw	r4, #24908	; 0x614c
   120a4:	movt	r4, #2
   120a8:	ldr	r1, [r4]
   120ac:	bl	10da4 <fputs_unlocked@plt>
   120b0:	movw	r1, #22629	; 0x5865
   120b4:	mov	r0, #0
   120b8:	mov	r2, #5
   120bc:	movt	r1, #1
   120c0:	bl	10e10 <dcgettext@plt>
   120c4:	ldr	r1, [r4]
   120c8:	pop	{r4, sl, fp, lr}
   120cc:	b	10da4 <fputs_unlocked@plt>
   120d0:	movw	r1, #24980	; 0x6194
   120d4:	movt	r1, #2
   120d8:	str	r0, [r1]
   120dc:	bx	lr
   120e0:	movw	r1, #24984	; 0x6198
   120e4:	movt	r1, #2
   120e8:	strb	r0, [r1]
   120ec:	bx	lr
   120f0:	push	{r4, r5, r6, sl, fp, lr}
   120f4:	add	fp, sp, #16
   120f8:	sub	sp, sp, #8
   120fc:	movw	r0, #24908	; 0x614c
   12100:	movt	r0, #2
   12104:	ldr	r0, [r0]
   12108:	bl	14e90 <__assert_fail@plt+0x3eb8>
   1210c:	cmp	r0, #0
   12110:	beq	12138 <__assert_fail@plt+0x1160>
   12114:	movw	r0, #24984	; 0x6198
   12118:	movt	r0, #2
   1211c:	ldrb	r0, [r0]
   12120:	cmp	r0, #0
   12124:	beq	12158 <__assert_fail@plt+0x1180>
   12128:	bl	10ef4 <__errno_location@plt>
   1212c:	ldr	r0, [r0]
   12130:	cmp	r0, #32
   12134:	bne	12158 <__assert_fail@plt+0x1180>
   12138:	movw	r0, #24896	; 0x6140
   1213c:	movt	r0, #2
   12140:	ldr	r0, [r0]
   12144:	bl	14e90 <__assert_fail@plt+0x3eb8>
   12148:	cmp	r0, #0
   1214c:	subeq	sp, fp, #16
   12150:	popeq	{r4, r5, r6, sl, fp, pc}
   12154:	b	121c8 <__assert_fail@plt+0x11f0>
   12158:	movw	r1, #22137	; 0x5679
   1215c:	mov	r0, #0
   12160:	mov	r2, #5
   12164:	movt	r1, #1
   12168:	bl	10e10 <dcgettext@plt>
   1216c:	mov	r4, r0
   12170:	movw	r0, #24980	; 0x6194
   12174:	movt	r0, #2
   12178:	ldr	r6, [r0]
   1217c:	bl	10ef4 <__errno_location@plt>
   12180:	ldr	r5, [r0]
   12184:	cmp	r6, #0
   12188:	bne	121a4 <__assert_fail@plt+0x11cc>
   1218c:	movw	r2, #22509	; 0x57ed
   12190:	mov	r0, #0
   12194:	mov	r1, r5
   12198:	mov	r3, r4
   1219c:	movt	r2, #1
   121a0:	b	121c4 <__assert_fail@plt+0x11ec>
   121a4:	mov	r0, r6
   121a8:	bl	13cac <__assert_fail@plt+0x2cd4>
   121ac:	movw	r2, #23197	; 0x5a9d
   121b0:	mov	r3, r0
   121b4:	str	r4, [sp]
   121b8:	mov	r0, #0
   121bc:	mov	r1, r5
   121c0:	movt	r2, #1
   121c4:	bl	10e7c <error@plt>
   121c8:	movw	r0, #24812	; 0x60ec
   121cc:	movt	r0, #2
   121d0:	ldr	r0, [r0]
   121d4:	bl	10dec <_exit@plt>
   121d8:	b	10dc8 <posix_fadvise64@plt>
   121dc:	cmp	r0, #0
   121e0:	bxeq	lr
   121e4:	push	{r4, sl, fp, lr}
   121e8:	add	fp, sp, #8
   121ec:	sub	sp, sp, #16
   121f0:	mov	r4, r1
   121f4:	bl	10f24 <fileno@plt>
   121f8:	mov	r1, #0
   121fc:	mov	r2, #0
   12200:	mov	r3, #0
   12204:	str	r1, [sp]
   12208:	stmib	sp, {r1, r4}
   1220c:	bl	10dc8 <posix_fadvise64@plt>
   12210:	sub	sp, fp, #8
   12214:	pop	{r4, sl, fp, pc}
   12218:	push	{r4, r5, r6, sl, fp, lr}
   1221c:	add	fp, sp, #16
   12220:	sub	sp, sp, #8
   12224:	mov	r4, r0
   12228:	bl	10f24 <fileno@plt>
   1222c:	cmn	r0, #1
   12230:	ble	122a4 <__assert_fail@plt+0x12cc>
   12234:	mov	r0, r4
   12238:	bl	10ea0 <__freading@plt>
   1223c:	cmp	r0, #0
   12240:	beq	1226c <__assert_fail@plt+0x1294>
   12244:	mov	r0, r4
   12248:	bl	10f24 <fileno@plt>
   1224c:	mov	r1, #1
   12250:	mov	r2, #0
   12254:	mov	r3, #0
   12258:	str	r1, [sp]
   1225c:	bl	10e4c <lseek64@plt>
   12260:	and	r0, r0, r1
   12264:	cmn	r0, #1
   12268:	beq	122a4 <__assert_fail@plt+0x12cc>
   1226c:	mov	r0, r4
   12270:	bl	122b4 <__assert_fail@plt+0x12dc>
   12274:	cmp	r0, #0
   12278:	beq	122a4 <__assert_fail@plt+0x12cc>
   1227c:	bl	10ef4 <__errno_location@plt>
   12280:	ldr	r6, [r0]
   12284:	mov	r5, r0
   12288:	mov	r0, r4
   1228c:	bl	10f3c <fclose@plt>
   12290:	cmp	r6, #0
   12294:	strne	r6, [r5]
   12298:	mvnne	r0, #0
   1229c:	sub	sp, fp, #16
   122a0:	pop	{r4, r5, r6, sl, fp, pc}
   122a4:	mov	r0, r4
   122a8:	sub	sp, fp, #16
   122ac:	pop	{r4, r5, r6, sl, fp, lr}
   122b0:	b	10f3c <fclose@plt>
   122b4:	push	{r4, sl, fp, lr}
   122b8:	add	fp, sp, #8
   122bc:	sub	sp, sp, #8
   122c0:	mov	r4, r0
   122c4:	cmp	r0, #0
   122c8:	beq	12300 <__assert_fail@plt+0x1328>
   122cc:	mov	r0, r4
   122d0:	bl	10ea0 <__freading@plt>
   122d4:	cmp	r0, #0
   122d8:	beq	12300 <__assert_fail@plt+0x1328>
   122dc:	ldrb	r0, [r4, #1]
   122e0:	tst	r0, #1
   122e4:	beq	12300 <__assert_fail@plt+0x1328>
   122e8:	mov	r0, #1
   122ec:	mov	r2, #0
   122f0:	mov	r3, #0
   122f4:	str	r0, [sp]
   122f8:	mov	r0, r4
   122fc:	bl	12338 <__assert_fail@plt+0x1360>
   12300:	mov	r0, r4
   12304:	sub	sp, fp, #8
   12308:	pop	{r4, sl, fp, lr}
   1230c:	b	10dd4 <fflush@plt>
   12310:	push	{r4, r5, r6, sl, fp, lr}
   12314:	add	fp, sp, #16
   12318:	mov	r4, r0
   1231c:	bl	10ef4 <__errno_location@plt>
   12320:	ldr	r6, [r0]
   12324:	mov	r5, r0
   12328:	mov	r0, r4
   1232c:	bl	10de0 <free@plt>
   12330:	str	r6, [r5]
   12334:	pop	{r4, r5, r6, sl, fp, pc}
   12338:	push	{r4, r5, r6, r7, fp, lr}
   1233c:	add	fp, sp, #16
   12340:	sub	sp, sp, #8
   12344:	mov	r4, r0
   12348:	ldr	r0, [r0, #4]
   1234c:	mov	r5, r3
   12350:	mov	r6, r2
   12354:	ldr	r1, [r4, #8]
   12358:	cmp	r1, r0
   1235c:	bne	12378 <__assert_fail@plt+0x13a0>
   12360:	ldrd	r0, [r4, #16]
   12364:	cmp	r1, r0
   12368:	bne	12378 <__assert_fail@plt+0x13a0>
   1236c:	ldr	r0, [r4, #36]	; 0x24
   12370:	cmp	r0, #0
   12374:	beq	12390 <__assert_fail@plt+0x13b8>
   12378:	mov	r0, r4
   1237c:	mov	r2, r6
   12380:	mov	r3, r5
   12384:	sub	sp, fp, #16
   12388:	pop	{r4, r5, r6, r7, fp, lr}
   1238c:	b	10f48 <fseeko64@plt>
   12390:	ldr	r7, [fp, #8]
   12394:	mov	r0, r4
   12398:	bl	10f24 <fileno@plt>
   1239c:	mov	r2, r6
   123a0:	mov	r3, r5
   123a4:	str	r7, [sp]
   123a8:	bl	10e4c <lseek64@plt>
   123ac:	and	r2, r0, r1
   123b0:	cmn	r2, #1
   123b4:	beq	123d4 <__assert_fail@plt+0x13fc>
   123b8:	strd	r0, [r4, #80]	; 0x50
   123bc:	ldr	r0, [r4]
   123c0:	bic	r0, r0, #16
   123c4:	str	r0, [r4]
   123c8:	mov	r0, #0
   123cc:	sub	sp, fp, #16
   123d0:	pop	{r4, r5, r6, r7, fp, pc}
   123d4:	mvn	r0, #0
   123d8:	sub	sp, fp, #16
   123dc:	pop	{r4, r5, r6, r7, fp, pc}
   123e0:	push	{r4, r5, fp, lr}
   123e4:	add	fp, sp, #8
   123e8:	cmp	r0, #0
   123ec:	beq	12480 <__assert_fail@plt+0x14a8>
   123f0:	mov	r1, #47	; 0x2f
   123f4:	mov	r4, r0
   123f8:	bl	10f78 <strrchr@plt>
   123fc:	cmp	r0, #0
   12400:	mov	r5, r4
   12404:	addne	r5, r0, #1
   12408:	sub	r0, r5, r4
   1240c:	cmp	r0, #7
   12410:	blt	12464 <__assert_fail@plt+0x148c>
   12414:	movw	r1, #23260	; 0x5adc
   12418:	sub	r0, r5, #7
   1241c:	mov	r2, #7
   12420:	movt	r1, #1
   12424:	bl	10fb4 <strncmp@plt>
   12428:	cmp	r0, #0
   1242c:	bne	12464 <__assert_fail@plt+0x148c>
   12430:	movw	r1, #23268	; 0x5ae4
   12434:	mov	r0, r5
   12438:	mov	r2, #3
   1243c:	movt	r1, #1
   12440:	bl	10fb4 <strncmp@plt>
   12444:	cmp	r0, #0
   12448:	beq	12454 <__assert_fail@plt+0x147c>
   1244c:	mov	r4, r5
   12450:	b	12464 <__assert_fail@plt+0x148c>
   12454:	movw	r0, #24880	; 0x6130
   12458:	add	r4, r5, #3
   1245c:	movt	r0, #2
   12460:	str	r4, [r0]
   12464:	movw	r0, #24884	; 0x6134
   12468:	movt	r0, #2
   1246c:	str	r4, [r0]
   12470:	movw	r0, #24988	; 0x619c
   12474:	movt	r0, #2
   12478:	str	r4, [r0]
   1247c:	pop	{r4, r5, fp, pc}
   12480:	movw	r0, #24896	; 0x6140
   12484:	mov	r1, #55	; 0x37
   12488:	mov	r2, #1
   1248c:	movt	r0, #2
   12490:	ldr	r3, [r0]
   12494:	movw	r0, #23204	; 0x5aa4
   12498:	movt	r0, #1
   1249c:	bl	10e40 <fwrite@plt>
   124a0:	bl	10fc0 <abort@plt>
   124a4:	push	{r4, r5, r6, sl, fp, lr}
   124a8:	add	fp, sp, #16
   124ac:	mov	r4, r0
   124b0:	movw	r0, #24992	; 0x61a0
   124b4:	movt	r0, #2
   124b8:	cmp	r4, #0
   124bc:	moveq	r4, r0
   124c0:	bl	10ef4 <__errno_location@plt>
   124c4:	ldr	r6, [r0]
   124c8:	mov	r5, r0
   124cc:	mov	r0, r4
   124d0:	mov	r1, #48	; 0x30
   124d4:	bl	14c98 <__assert_fail@plt+0x3cc0>
   124d8:	str	r6, [r5]
   124dc:	pop	{r4, r5, r6, sl, fp, pc}
   124e0:	movw	r1, #24992	; 0x61a0
   124e4:	cmp	r0, #0
   124e8:	movt	r1, #2
   124ec:	movne	r1, r0
   124f0:	ldr	r0, [r1]
   124f4:	bx	lr
   124f8:	movw	r2, #24992	; 0x61a0
   124fc:	cmp	r0, #0
   12500:	movt	r2, #2
   12504:	movne	r2, r0
   12508:	str	r1, [r2]
   1250c:	bx	lr
   12510:	movw	r3, #24992	; 0x61a0
   12514:	cmp	r0, #0
   12518:	and	r2, r2, #1
   1251c:	movt	r3, #2
   12520:	movne	r3, r0
   12524:	ubfx	r0, r1, #5, #3
   12528:	and	r1, r1, #31
   1252c:	add	ip, r3, r0, lsl #2
   12530:	mov	r0, #1
   12534:	ldr	r3, [ip, #8]
   12538:	and	r0, r0, r3, lsr r1
   1253c:	eor	r2, r0, r2
   12540:	eor	r1, r3, r2, lsl r1
   12544:	str	r1, [ip, #8]
   12548:	bx	lr
   1254c:	movw	r2, #24992	; 0x61a0
   12550:	cmp	r0, #0
   12554:	movt	r2, #2
   12558:	movne	r2, r0
   1255c:	ldr	r0, [r2, #4]
   12560:	str	r1, [r2, #4]
   12564:	bx	lr
   12568:	push	{fp, lr}
   1256c:	mov	fp, sp
   12570:	movw	r3, #24992	; 0x61a0
   12574:	cmp	r0, #0
   12578:	movt	r3, #2
   1257c:	movne	r3, r0
   12580:	cmp	r1, #0
   12584:	mov	r0, #10
   12588:	cmpne	r2, #0
   1258c:	str	r0, [r3]
   12590:	bne	12598 <__assert_fail@plt+0x15c0>
   12594:	bl	10fc0 <abort@plt>
   12598:	str	r1, [r3, #40]	; 0x28
   1259c:	str	r2, [r3, #44]	; 0x2c
   125a0:	pop	{fp, pc}
   125a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125a8:	add	fp, sp, #28
   125ac:	sub	sp, sp, #20
   125b0:	mov	r7, r0
   125b4:	ldr	r0, [fp, #8]
   125b8:	movw	r5, #24992	; 0x61a0
   125bc:	mov	r8, r3
   125c0:	mov	r9, r2
   125c4:	mov	sl, r1
   125c8:	movt	r5, #2
   125cc:	cmp	r0, #0
   125d0:	movne	r5, r0
   125d4:	bl	10ef4 <__errno_location@plt>
   125d8:	ldr	r2, [r5, #40]	; 0x28
   125dc:	ldr	r3, [r5, #44]	; 0x2c
   125e0:	mov	r4, r0
   125e4:	ldm	r5, {r0, r1}
   125e8:	add	r5, r5, #8
   125ec:	ldr	r6, [r4]
   125f0:	stm	sp, {r0, r1, r5}
   125f4:	mov	r0, r7
   125f8:	mov	r1, sl
   125fc:	str	r2, [sp, #12]
   12600:	str	r3, [sp, #16]
   12604:	mov	r2, r9
   12608:	mov	r3, r8
   1260c:	bl	1261c <__assert_fail@plt+0x1644>
   12610:	str	r6, [r4]
   12614:	sub	sp, fp, #28
   12618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1261c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12620:	add	fp, sp, #28
   12624:	sub	sp, sp, #156	; 0x9c
   12628:	mov	r5, r0
   1262c:	add	r0, r2, #1
   12630:	mov	r6, r1
   12634:	mov	sl, r3
   12638:	str	r2, [fp, #-80]	; 0xffffffb0
   1263c:	str	r0, [sp, #72]	; 0x48
   12640:	ldr	r0, [fp, #12]
   12644:	and	r1, r0, #1
   12648:	str	r1, [sp, #36]	; 0x24
   1264c:	and	r1, r0, #4
   12650:	str	r1, [sp, #32]
   12654:	ubfx	r9, r0, #1, #1
   12658:	bl	10e58 <__ctype_get_mb_cur_max@plt>
   1265c:	str	r0, [sp, #40]	; 0x28
   12660:	ldr	r0, [fp, #24]
   12664:	ldr	r7, [fp, #8]
   12668:	mov	r1, #0
   1266c:	str	r5, [fp, #-84]	; 0xffffffac
   12670:	str	r1, [fp, #-56]	; 0xffffffc8
   12674:	mov	r1, #0
   12678:	str	r1, [sp, #60]	; 0x3c
   1267c:	mov	r1, #1
   12680:	str	r1, [fp, #-48]	; 0xffffffd0
   12684:	str	r0, [sp, #80]	; 0x50
   12688:	ldr	r0, [fp, #20]
   1268c:	str	r0, [sp, #76]	; 0x4c
   12690:	mov	r0, #0
   12694:	str	r0, [sp, #56]	; 0x38
   12698:	mov	r0, #0
   1269c:	str	r0, [fp, #-88]	; 0xffffffa8
   126a0:	mov	r0, #0
   126a4:	str	r0, [fp, #-72]	; 0xffffffb8
   126a8:	mov	r0, #0
   126ac:	cmp	r7, #10
   126b0:	bhi	13644 <__assert_fail@plt+0x266c>
   126b4:	add	r1, pc, #24
   126b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   126bc:	mov	r4, r6
   126c0:	mov	r8, #0
   126c4:	mov	r2, #1
   126c8:	mov	r3, #0
   126cc:	mov	lr, sl
   126d0:	ldr	pc, [r1, r7, lsl #2]
   126d4:	muleq	r1, r8, r7
   126d8:	andeq	r2, r1, ip, ror #15
   126dc:	andeq	r2, r1, ip, lsr #15
   126e0:	muleq	r1, r0, r7
   126e4:	andeq	r2, r1, r0, ror #15
   126e8:	andeq	r2, r1, r4, lsl r8
   126ec:			; <UNDEFINED> instruction: 0x000127bc
   126f0:	muleq	r1, r8, r8
   126f4:	andeq	r2, r1, r0, lsl #14
   126f8:	andeq	r2, r1, r0, lsl #14
   126fc:	andeq	r2, r1, r8, lsr #14
   12700:	movw	r0, #23350	; 0x5b36
   12704:	mov	r1, r7
   12708:	movt	r0, #1
   1270c:	bl	1404c <__assert_fail@plt+0x3074>
   12710:	str	r0, [sp, #76]	; 0x4c
   12714:	movw	r0, #23180	; 0x5a8c
   12718:	mov	r1, r7
   1271c:	movt	r0, #1
   12720:	bl	1404c <__assert_fail@plt+0x3074>
   12724:	str	r0, [sp, #80]	; 0x50
   12728:	mov	r8, #0
   1272c:	tst	r9, #1
   12730:	bne	12768 <__assert_fail@plt+0x1790>
   12734:	ldr	r0, [sp, #76]	; 0x4c
   12738:	ldrb	r0, [r0]
   1273c:	cmp	r0, #0
   12740:	beq	12768 <__assert_fail@plt+0x1790>
   12744:	ldr	r1, [sp, #76]	; 0x4c
   12748:	mov	r8, #0
   1274c:	add	r1, r1, #1
   12750:	cmp	r8, r4
   12754:	strbcc	r0, [r5, r8]
   12758:	ldrb	r0, [r1, r8]
   1275c:	add	r8, r8, #1
   12760:	cmp	r0, #0
   12764:	bne	12750 <__assert_fail@plt+0x1778>
   12768:	ldr	r6, [sp, #80]	; 0x50
   1276c:	mov	r0, r6
   12770:	bl	10ee8 <strlen@plt>
   12774:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12778:	str	r0, [fp, #-72]	; 0xffffffb8
   1277c:	str	r6, [fp, #-88]	; 0xffffffa8
   12780:	mov	r2, #1
   12784:	mov	r3, r9
   12788:	mov	lr, sl
   1278c:	b	12898 <__assert_fail@plt+0x18c0>
   12790:	mov	r0, #1
   12794:	b	127ec <__assert_fail@plt+0x1814>
   12798:	mov	r7, #0
   1279c:	mov	r8, #0
   127a0:	mov	r2, r0
   127a4:	mov	r3, #0
   127a8:	b	12898 <__assert_fail@plt+0x18c0>
   127ac:	tst	r9, #1
   127b0:	bne	127ec <__assert_fail@plt+0x1814>
   127b4:	mov	r2, r0
   127b8:	b	12844 <__assert_fail@plt+0x186c>
   127bc:	mov	r0, #1
   127c0:	mov	r8, #0
   127c4:	mov	r7, #5
   127c8:	mov	r2, #1
   127cc:	str	r0, [fp, #-72]	; 0xffffffb8
   127d0:	movw	r0, #23348	; 0x5b34
   127d4:	movt	r0, #1
   127d8:	str	r0, [fp, #-88]	; 0xffffffa8
   127dc:	b	1280c <__assert_fail@plt+0x1834>
   127e0:	mov	r2, #1
   127e4:	tst	r9, #1
   127e8:	beq	12844 <__assert_fail@plt+0x186c>
   127ec:	mov	r1, #1
   127f0:	mov	r8, #0
   127f4:	mov	r7, #2
   127f8:	mov	r2, r0
   127fc:	str	r1, [fp, #-72]	; 0xffffffb8
   12800:	movw	r1, #23180	; 0x5a8c
   12804:	movt	r1, #1
   12808:	str	r1, [fp, #-88]	; 0xffffffa8
   1280c:	mov	r3, #1
   12810:	b	12898 <__assert_fail@plt+0x18c0>
   12814:	tst	r9, #1
   12818:	beq	12868 <__assert_fail@plt+0x1890>
   1281c:	mov	r0, #1
   12820:	mov	r8, #0
   12824:	mov	r2, #1
   12828:	mov	r3, #1
   1282c:	mov	r7, #5
   12830:	str	r0, [fp, #-72]	; 0xffffffb8
   12834:	movw	r0, #23348	; 0x5b34
   12838:	movt	r0, #1
   1283c:	str	r0, [fp, #-88]	; 0xffffffa8
   12840:	b	12898 <__assert_fail@plt+0x18c0>
   12844:	cmp	r4, #0
   12848:	mov	r8, #1
   1284c:	mov	r3, #0
   12850:	mov	r7, #2
   12854:	movne	r0, #39	; 0x27
   12858:	strbne	r0, [r5]
   1285c:	movw	r0, #23180	; 0x5a8c
   12860:	movt	r0, #1
   12864:	b	1288c <__assert_fail@plt+0x18b4>
   12868:	cmp	r4, #0
   1286c:	mov	r8, #1
   12870:	mov	r2, #1
   12874:	mov	r7, #5
   12878:	mov	r3, #0
   1287c:	movne	r0, #34	; 0x22
   12880:	strbne	r0, [r5]
   12884:	movw	r0, #23348	; 0x5b34
   12888:	movt	r0, #1
   1288c:	str	r0, [fp, #-88]	; 0xffffffa8
   12890:	mov	r0, #1
   12894:	str	r0, [fp, #-72]	; 0xffffffb8
   12898:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1289c:	eor	r6, r3, #1
   128a0:	str	r7, [fp, #-68]	; 0xffffffbc
   128a4:	str	r3, [fp, #-76]	; 0xffffffb4
   128a8:	str	r2, [sp, #84]	; 0x54
   128ac:	str	r6, [sp, #92]	; 0x5c
   128b0:	cmp	r0, #0
   128b4:	movwne	r0, #1
   128b8:	and	r1, r0, r3
   128bc:	and	r1, r2, r1
   128c0:	str	r1, [sp, #48]	; 0x30
   128c4:	sub	r1, r7, #2
   128c8:	clz	r1, r1
   128cc:	lsr	r1, r1, #5
   128d0:	and	r1, r1, r3
   128d4:	str	r1, [sp, #64]	; 0x40
   128d8:	subs	r1, r7, #2
   128dc:	mov	r7, #0
   128e0:	movwne	r1, #1
   128e4:	orr	r6, r1, r6
   128e8:	and	r1, r1, r2
   128ec:	and	r0, r0, r1
   128f0:	str	r6, [sp, #68]	; 0x44
   128f4:	str	r0, [fp, #-60]	; 0xffffffc4
   128f8:	orr	r0, r1, r3
   128fc:	ldr	r1, [fp, #16]
   12900:	eor	r0, r0, #1
   12904:	clz	r1, r1
   12908:	lsr	r1, r1, #5
   1290c:	orr	r0, r1, r0
   12910:	str	r0, [fp, #-64]	; 0xffffffc0
   12914:	eor	r0, r2, #1
   12918:	str	r0, [sp, #52]	; 0x34
   1291c:	cmn	lr, #1
   12920:	beq	12930 <__assert_fail@plt+0x1958>
   12924:	cmp	r7, lr
   12928:	bne	1293c <__assert_fail@plt+0x1964>
   1292c:	b	13484 <__assert_fail@plt+0x24ac>
   12930:	ldrb	r0, [ip, r7]
   12934:	cmp	r0, #0
   12938:	beq	1348c <__assert_fail@plt+0x24b4>
   1293c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12940:	mov	sl, #0
   12944:	cmp	r0, #0
   12948:	beq	12980 <__assert_fail@plt+0x19a8>
   1294c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12950:	add	r5, r7, r0
   12954:	cmp	r0, #2
   12958:	bcc	12974 <__assert_fail@plt+0x199c>
   1295c:	cmn	lr, #1
   12960:	bne	12974 <__assert_fail@plt+0x199c>
   12964:	mov	r0, ip
   12968:	bl	10ee8 <strlen@plt>
   1296c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12970:	mov	lr, r0
   12974:	cmp	r5, lr
   12978:	bls	12988 <__assert_fail@plt+0x19b0>
   1297c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12980:	mov	r0, #0
   12984:	b	129d4 <__assert_fail@plt+0x19fc>
   12988:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1298c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12990:	add	r0, ip, r7
   12994:	mov	r6, r4
   12998:	mov	r4, lr
   1299c:	bl	10edc <bcmp@plt>
   129a0:	ldr	r2, [sp, #92]	; 0x5c
   129a4:	cmp	r0, #0
   129a8:	ldr	r5, [fp, #-84]	; 0xffffffac
   129ac:	mov	r1, r0
   129b0:	movwne	r1, #1
   129b4:	orr	r1, r1, r2
   129b8:	tst	r1, #1
   129bc:	beq	13514 <__assert_fail@plt+0x253c>
   129c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   129c4:	clz	r0, r0
   129c8:	mov	lr, r4
   129cc:	mov	r4, r6
   129d0:	lsr	r0, r0, #5
   129d4:	str	r0, [fp, #-52]	; 0xffffffcc
   129d8:	ldrb	r6, [ip, r7]
   129dc:	cmp	r6, #126	; 0x7e
   129e0:	bhi	12f10 <__assert_fail@plt+0x1f38>
   129e4:	add	r3, pc, #16
   129e8:	mov	r9, #1
   129ec:	mov	r2, #110	; 0x6e
   129f0:	mov	r0, #97	; 0x61
   129f4:	mov	r1, #0
   129f8:	ldr	pc, [r3, r6, lsl #2]
   129fc:	andeq	r2, r1, r0, ror sp
   12a00:	andeq	r2, r1, r0, lsl pc
   12a04:	andeq	r2, r1, r0, lsl pc
   12a08:	andeq	r2, r1, r0, lsl pc
   12a0c:	andeq	r2, r1, r0, lsl pc
   12a10:	andeq	r2, r1, r0, lsl pc
   12a14:	andeq	r2, r1, r0, lsl pc
   12a18:	andeq	r2, r1, ip, ror #31
   12a1c:	andeq	r2, r1, r0, asr sp
   12a20:	andeq	r2, r1, r8, asr #26
   12a24:	andeq	r2, r1, ip, asr sp
   12a28:	andeq	r2, r1, r8, ror lr
   12a2c:	andeq	r2, r1, r0, asr #26
   12a30:	andeq	r2, r1, r8, asr sp
   12a34:	andeq	r2, r1, r0, lsl pc
   12a38:	andeq	r2, r1, r0, lsl pc
   12a3c:	andeq	r2, r1, r0, lsl pc
   12a40:	andeq	r2, r1, r0, lsl pc
   12a44:	andeq	r2, r1, r0, lsl pc
   12a48:	andeq	r2, r1, r0, lsl pc
   12a4c:	andeq	r2, r1, r0, lsl pc
   12a50:	andeq	r2, r1, r0, lsl pc
   12a54:	andeq	r2, r1, r0, lsl pc
   12a58:	andeq	r2, r1, r0, lsl pc
   12a5c:	andeq	r2, r1, r0, lsl pc
   12a60:	andeq	r2, r1, r0, lsl pc
   12a64:	andeq	r2, r1, r0, lsl pc
   12a68:	andeq	r2, r1, r0, lsl pc
   12a6c:	andeq	r2, r1, r0, lsl pc
   12a70:	andeq	r2, r1, r0, lsl pc
   12a74:	andeq	r2, r1, r0, lsl pc
   12a78:	andeq	r2, r1, r0, lsl pc
   12a7c:	strdeq	r2, [r1], -r4
   12a80:	strdeq	r2, [r1], -r8
   12a84:	strdeq	r2, [r1], -r8
   12a88:	andeq	r2, r1, r0, ror #25
   12a8c:	strdeq	r2, [r1], -r8
   12a90:	strdeq	r2, [r1], -r8
   12a94:	strdeq	r2, [r1], -r8
   12a98:	andeq	r2, r1, r0, lsl #29
   12a9c:	strdeq	r2, [r1], -r8
   12aa0:	strdeq	r2, [r1], -r8
   12aa4:	strdeq	r2, [r1], -r8
   12aa8:	strdeq	r2, [r1], -r8
   12aac:	strdeq	r2, [r1], -r8
   12ab0:	strdeq	r2, [r1], -r8
   12ab4:	strdeq	r2, [r1], -r8
   12ab8:	strdeq	r2, [r1], -r8
   12abc:	strdeq	r2, [r1], -r8
   12ac0:	strdeq	r2, [r1], -r8
   12ac4:	strdeq	r2, [r1], -r8
   12ac8:	strdeq	r2, [r1], -r8
   12acc:	strdeq	r2, [r1], -r8
   12ad0:	strdeq	r2, [r1], -r8
   12ad4:	strdeq	r2, [r1], -r8
   12ad8:	strdeq	r2, [r1], -r8
   12adc:	strdeq	r2, [r1], -r8
   12ae0:	strdeq	r2, [r1], -r8
   12ae4:	strdeq	r2, [r1], -r8
   12ae8:	strdeq	r2, [r1], -r8
   12aec:	strdeq	r2, [r1], -r8
   12af0:	strdeq	r2, [r1], -r8
   12af4:	strdeq	r2, [r1], -r8
   12af8:	andeq	r2, r1, r8, asr #28
   12afc:	andeq	r2, r1, r0, lsl pc
   12b00:	strdeq	r2, [r1], -r8
   12b04:	strdeq	r2, [r1], -r8
   12b08:	strdeq	r2, [r1], -r8
   12b0c:	strdeq	r2, [r1], -r8
   12b10:	strdeq	r2, [r1], -r8
   12b14:	strdeq	r2, [r1], -r8
   12b18:	strdeq	r2, [r1], -r8
   12b1c:	strdeq	r2, [r1], -r8
   12b20:	strdeq	r2, [r1], -r8
   12b24:	strdeq	r2, [r1], -r8
   12b28:	strdeq	r2, [r1], -r8
   12b2c:	strdeq	r2, [r1], -r8
   12b30:	strdeq	r2, [r1], -r8
   12b34:	strdeq	r2, [r1], -r8
   12b38:	strdeq	r2, [r1], -r8
   12b3c:	strdeq	r2, [r1], -r8
   12b40:	strdeq	r2, [r1], -r8
   12b44:	strdeq	r2, [r1], -r8
   12b48:	strdeq	r2, [r1], -r8
   12b4c:	strdeq	r2, [r1], -r8
   12b50:	strdeq	r2, [r1], -r8
   12b54:	strdeq	r2, [r1], -r8
   12b58:	strdeq	r2, [r1], -r8
   12b5c:	strdeq	r2, [r1], -r8
   12b60:	strdeq	r2, [r1], -r8
   12b64:	strdeq	r2, [r1], -r8
   12b68:	strdeq	r2, [r1], -r8
   12b6c:	andeq	r2, r1, r0, lsr #26
   12b70:	strdeq	r2, [r1], -r8
   12b74:	strdeq	r2, [r1], -r8
   12b78:	strdeq	r2, [r1], -r8
   12b7c:	strdeq	r2, [r1], -r8
   12b80:	strdeq	r2, [r1], -r8
   12b84:	strdeq	r2, [r1], -r8
   12b88:	strdeq	r2, [r1], -r8
   12b8c:	strdeq	r2, [r1], -r8
   12b90:	strdeq	r2, [r1], -r8
   12b94:	strdeq	r2, [r1], -r8
   12b98:	strdeq	r2, [r1], -r8
   12b9c:	strdeq	r2, [r1], -r8
   12ba0:	strdeq	r2, [r1], -r8
   12ba4:	strdeq	r2, [r1], -r8
   12ba8:	strdeq	r2, [r1], -r8
   12bac:	strdeq	r2, [r1], -r8
   12bb0:	strdeq	r2, [r1], -r8
   12bb4:	strdeq	r2, [r1], -r8
   12bb8:	strdeq	r2, [r1], -r8
   12bbc:	strdeq	r2, [r1], -r8
   12bc0:	strdeq	r2, [r1], -r8
   12bc4:	strdeq	r2, [r1], -r8
   12bc8:	strdeq	r2, [r1], -r8
   12bcc:	strdeq	r2, [r1], -r8
   12bd0:	strdeq	r2, [r1], -r8
   12bd4:	strdeq	r2, [r1], -r8
   12bd8:	strdeq	r2, [r1], -r8
   12bdc:	strdeq	r2, [r1], -r8
   12be0:	strdeq	r2, [r1], -r8
   12be4:	strdeq	r2, [r1], -r8
   12be8:			; <UNDEFINED> instruction: 0x00012cb4
   12bec:	strdeq	r2, [r1], -r8
   12bf0:			; <UNDEFINED> instruction: 0x00012cb4
   12bf4:	andeq	r2, r1, r0, ror #25
   12bf8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bfc:	tst	r0, #1
   12c00:	bne	12c2c <__assert_fail@plt+0x1c54>
   12c04:	ldr	r1, [fp, #16]
   12c08:	ubfx	r0, r6, #5, #3
   12c0c:	mov	r2, #1
   12c10:	ldr	r0, [r1, r0, lsl #2]
   12c14:	and	r1, r6, #31
   12c18:	tst	r0, r2, lsl r1
   12c1c:	beq	12c2c <__assert_fail@plt+0x1c54>
   12c20:	mov	r0, r6
   12c24:	mov	r1, r9
   12c28:	b	12c40 <__assert_fail@plt+0x1c68>
   12c2c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12c30:	mov	r1, r9
   12c34:	cmp	r0, #0
   12c38:	mov	r0, r6
   12c3c:	beq	12f80 <__assert_fail@plt+0x1fa8>
   12c40:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c44:	tst	r2, #1
   12c48:	bne	13550 <__assert_fail@plt+0x2578>
   12c4c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12c50:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c54:	subs	r2, r2, #2
   12c58:	movwne	r2, #1
   12c5c:	orr	r2, r2, r3
   12c60:	tst	r2, #1
   12c64:	bne	12ca0 <__assert_fail@plt+0x1cc8>
   12c68:	cmp	r8, r4
   12c6c:	movcc	r2, #39	; 0x27
   12c70:	strbcc	r2, [r5, r8]
   12c74:	add	r2, r8, #1
   12c78:	cmp	r2, r4
   12c7c:	movcc	r3, #36	; 0x24
   12c80:	strbcc	r3, [r5, r2]
   12c84:	add	r2, r8, #2
   12c88:	add	r8, r8, #3
   12c8c:	cmp	r2, r4
   12c90:	movcc	r3, #39	; 0x27
   12c94:	strbcc	r3, [r5, r2]
   12c98:	mov	r2, #1
   12c9c:	str	r2, [fp, #-56]	; 0xffffffc8
   12ca0:	cmp	r8, r4
   12ca4:	movcc	r2, #92	; 0x5c
   12ca8:	strbcc	r2, [r5, r8]
   12cac:	add	r8, r8, #1
   12cb0:	b	12fc4 <__assert_fail@plt+0x1fec>
   12cb4:	cmp	lr, #1
   12cb8:	beq	12ce0 <__assert_fail@plt+0x1d08>
   12cbc:	mov	r9, #0
   12cc0:	cmn	lr, #1
   12cc4:	bne	12cec <__assert_fail@plt+0x1d14>
   12cc8:	ldrb	r0, [ip, #1]
   12ccc:	cmp	r0, #0
   12cd0:	beq	12ce0 <__assert_fail@plt+0x1d08>
   12cd4:	mvn	lr, #0
   12cd8:	mov	sl, #0
   12cdc:	b	12bf8 <__assert_fail@plt+0x1c20>
   12ce0:	mov	r9, #0
   12ce4:	cmp	r7, #0
   12ce8:	beq	12cf4 <__assert_fail@plt+0x1d1c>
   12cec:	mov	sl, #0
   12cf0:	b	12bf8 <__assert_fail@plt+0x1c20>
   12cf4:	mov	r1, #1
   12cf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12cfc:	cmp	r0, #2
   12d00:	bne	12d18 <__assert_fail@plt+0x1d40>
   12d04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d08:	mov	r9, r1
   12d0c:	tst	r0, #1
   12d10:	beq	12bf8 <__assert_fail@plt+0x1c20>
   12d14:	b	13550 <__assert_fail@plt+0x2578>
   12d18:	mov	r9, r1
   12d1c:	b	12bf8 <__assert_fail@plt+0x1c20>
   12d20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d24:	cmp	r0, #2
   12d28:	bne	12f64 <__assert_fail@plt+0x1f8c>
   12d2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d30:	tst	r0, #1
   12d34:	bne	13550 <__assert_fail@plt+0x2578>
   12d38:	mov	sl, #0
   12d3c:	b	12f78 <__assert_fail@plt+0x1fa0>
   12d40:	mov	r0, #102	; 0x66
   12d44:	b	12fec <__assert_fail@plt+0x2014>
   12d48:	mov	r2, #116	; 0x74
   12d4c:	b	12d5c <__assert_fail@plt+0x1d84>
   12d50:	mov	r0, #98	; 0x62
   12d54:	b	12fec <__assert_fail@plt+0x2014>
   12d58:	mov	r2, #114	; 0x72
   12d5c:	ldr	r0, [sp, #68]	; 0x44
   12d60:	tst	r0, #1
   12d64:	mov	r0, r2
   12d68:	bne	12fec <__assert_fail@plt+0x2014>
   12d6c:	b	13550 <__assert_fail@plt+0x2578>
   12d70:	ldr	r0, [sp, #84]	; 0x54
   12d74:	tst	r0, #1
   12d78:	beq	13008 <__assert_fail@plt+0x2030>
   12d7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d80:	tst	r0, #1
   12d84:	bne	1363c <__assert_fail@plt+0x2664>
   12d88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12d8c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12d90:	subs	r0, r0, #2
   12d94:	movwne	r0, #1
   12d98:	orr	r0, r0, r1
   12d9c:	tst	r0, #1
   12da0:	bne	12ddc <__assert_fail@plt+0x1e04>
   12da4:	cmp	r8, r4
   12da8:	movcc	r0, #39	; 0x27
   12dac:	strbcc	r0, [r5, r8]
   12db0:	add	r0, r8, #1
   12db4:	cmp	r0, r4
   12db8:	movcc	r1, #36	; 0x24
   12dbc:	strbcc	r1, [r5, r0]
   12dc0:	add	r0, r8, #2
   12dc4:	add	r8, r8, #3
   12dc8:	cmp	r0, r4
   12dcc:	movcc	r1, #39	; 0x27
   12dd0:	strbcc	r1, [r5, r0]
   12dd4:	mov	r0, #1
   12dd8:	str	r0, [fp, #-56]	; 0xffffffc8
   12ddc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12de0:	cmp	r8, r4
   12de4:	mov	r9, #0
   12de8:	mov	sl, #1
   12dec:	mov	r6, #48	; 0x30
   12df0:	movcc	r0, #92	; 0x5c
   12df4:	strbcc	r0, [r5, r8]
   12df8:	add	r0, r8, #1
   12dfc:	cmp	r1, #2
   12e00:	beq	131d0 <__assert_fail@plt+0x21f8>
   12e04:	add	r1, r7, #1
   12e08:	cmp	r1, lr
   12e0c:	bcs	131d0 <__assert_fail@plt+0x21f8>
   12e10:	ldrb	r1, [ip, r1]
   12e14:	sub	r1, r1, #48	; 0x30
   12e18:	uxtb	r1, r1
   12e1c:	cmp	r1, #9
   12e20:	bhi	131d0 <__assert_fail@plt+0x21f8>
   12e24:	cmp	r0, r4
   12e28:	movcc	r1, #48	; 0x30
   12e2c:	strbcc	r1, [r5, r0]
   12e30:	add	r0, r8, #2
   12e34:	add	r8, r8, #3
   12e38:	cmp	r0, r4
   12e3c:	movcc	r1, #48	; 0x30
   12e40:	strbcc	r1, [r5, r0]
   12e44:	b	12bf8 <__assert_fail@plt+0x1c20>
   12e48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e4c:	mov	sl, #0
   12e50:	mov	r6, #63	; 0x3f
   12e54:	cmp	r0, #5
   12e58:	beq	131d8 <__assert_fail@plt+0x2200>
   12e5c:	cmp	r0, #2
   12e60:	bne	13280 <__assert_fail@plt+0x22a8>
   12e64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e68:	mov	r9, #0
   12e6c:	tst	r0, #1
   12e70:	beq	12bf8 <__assert_fail@plt+0x1c20>
   12e74:	b	13550 <__assert_fail@plt+0x2578>
   12e78:	mov	r0, #118	; 0x76
   12e7c:	b	12fec <__assert_fail@plt+0x2014>
   12e80:	mov	r0, #1
   12e84:	mov	r6, #39	; 0x27
   12e88:	str	r0, [sp, #60]	; 0x3c
   12e8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e90:	cmp	r0, #2
   12e94:	bne	13024 <__assert_fail@plt+0x204c>
   12e98:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e9c:	tst	r0, #1
   12ea0:	bne	13550 <__assert_fail@plt+0x2578>
   12ea4:	ldr	r2, [sp, #56]	; 0x38
   12ea8:	clz	r1, r4
   12eac:	mov	sl, #0
   12eb0:	mov	r9, #1
   12eb4:	lsr	r1, r1, #5
   12eb8:	cmp	r2, #0
   12ebc:	mov	r0, r2
   12ec0:	movwne	r0, #1
   12ec4:	orrs	r0, r0, r1
   12ec8:	moveq	r2, r4
   12ecc:	moveq	r4, r0
   12ed0:	cmp	r8, r4
   12ed4:	str	r2, [sp, #56]	; 0x38
   12ed8:	movcc	r0, #39	; 0x27
   12edc:	strbcc	r0, [r5, r8]
   12ee0:	add	r0, r8, #1
   12ee4:	cmp	r0, r4
   12ee8:	movcc	r1, #92	; 0x5c
   12eec:	strbcc	r1, [r5, r0]
   12ef0:	add	r0, r8, #2
   12ef4:	add	r8, r8, #3
   12ef8:	cmp	r0, r4
   12efc:	movcc	r1, #39	; 0x27
   12f00:	strbcc	r1, [r5, r0]
   12f04:	mov	r0, #0
   12f08:	str	r0, [fp, #-56]	; 0xffffffc8
   12f0c:	b	12bf8 <__assert_fail@plt+0x1c20>
   12f10:	ldr	r0, [sp, #40]	; 0x28
   12f14:	str	r4, [sp, #88]	; 0x58
   12f18:	cmp	r0, #1
   12f1c:	bne	1302c <__assert_fail@plt+0x2054>
   12f20:	str	lr, [sp, #28]
   12f24:	bl	10ec4 <__ctype_b_loc@plt>
   12f28:	ldr	r0, [r0]
   12f2c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f30:	mov	r2, #1
   12f34:	add	r0, r0, r6, lsl #1
   12f38:	ldrb	r0, [r0, #1]
   12f3c:	ubfx	r9, r0, #6, #1
   12f40:	ldr	r0, [sp, #52]	; 0x34
   12f44:	cmp	r2, #1
   12f48:	orr	r0, r9, r0
   12f4c:	bhi	13288 <__assert_fail@plt+0x22b0>
   12f50:	tst	r0, #1
   12f54:	beq	13288 <__assert_fail@plt+0x22b0>
   12f58:	ldr	lr, [sp, #28]
   12f5c:	ldr	r4, [sp, #88]	; 0x58
   12f60:	b	12bf8 <__assert_fail@plt+0x1c20>
   12f64:	ldr	r1, [sp, #48]	; 0x30
   12f68:	mov	sl, #0
   12f6c:	mov	r0, #92	; 0x5c
   12f70:	cmp	r1, #0
   12f74:	beq	12fec <__assert_fail@plt+0x2014>
   12f78:	mov	r6, #92	; 0x5c
   12f7c:	mov	r9, #0
   12f80:	cmp	sl, #0
   12f84:	bne	12fbc <__assert_fail@plt+0x1fe4>
   12f88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f8c:	tst	r0, #1
   12f90:	beq	12fbc <__assert_fail@plt+0x1fe4>
   12f94:	cmp	r8, r4
   12f98:	movcc	r0, #39	; 0x27
   12f9c:	strbcc	r0, [r5, r8]
   12fa0:	add	r0, r8, #1
   12fa4:	add	r8, r8, #2
   12fa8:	cmp	r0, r4
   12fac:	movcc	r1, #39	; 0x27
   12fb0:	strbcc	r1, [r5, r0]
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [fp, #-56]	; 0xffffffc8
   12fbc:	mov	r1, r9
   12fc0:	mov	r0, r6
   12fc4:	cmp	r8, r4
   12fc8:	strbcc	r0, [r5, r8]
   12fcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12fd0:	add	r8, r8, #1
   12fd4:	and	r0, r0, r1
   12fd8:	str	r0, [fp, #-48]	; 0xffffffd0
   12fdc:	add	r7, r7, #1
   12fe0:	cmn	lr, #1
   12fe4:	bne	12924 <__assert_fail@plt+0x194c>
   12fe8:	b	12930 <__assert_fail@plt+0x1958>
   12fec:	ldr	r1, [sp, #84]	; 0x54
   12ff0:	mov	sl, #0
   12ff4:	mov	r9, #0
   12ff8:	tst	r1, #1
   12ffc:	mov	r1, #0
   13000:	beq	12bf8 <__assert_fail@plt+0x1c20>
   13004:	b	12c40 <__assert_fail@plt+0x1c68>
   13008:	ldr	r0, [sp, #36]	; 0x24
   1300c:	mov	r6, #0
   13010:	mov	sl, #0
   13014:	mov	r9, #0
   13018:	cmp	r0, #0
   1301c:	beq	12bf8 <__assert_fail@plt+0x1c20>
   13020:	b	12fdc <__assert_fail@plt+0x2004>
   13024:	mov	r9, #1
   13028:	b	12bf8 <__assert_fail@plt+0x1c20>
   1302c:	mov	r0, #0
   13030:	cmn	lr, #1
   13034:	sub	r4, fp, #40	; 0x28
   13038:	str	r0, [fp, #-36]	; 0xffffffdc
   1303c:	str	r0, [fp, #-40]	; 0xffffffd8
   13040:	bne	13054 <__assert_fail@plt+0x207c>
   13044:	mov	r0, ip
   13048:	bl	10ee8 <strlen@plt>
   1304c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13050:	mov	lr, r0
   13054:	ldr	r0, [sp, #72]	; 0x48
   13058:	mov	r9, #1
   1305c:	mov	r2, #0
   13060:	str	lr, [sp, #28]
   13064:	add	r0, r0, r7
   13068:	str	r0, [sp, #20]
   1306c:	b	130b0 <__assert_fail@plt+0x20d8>
   13070:	ldr	r5, [sp, #44]	; 0x2c
   13074:	add	r5, r0, r5
   13078:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1307c:	bl	10e34 <iswprint@plt>
   13080:	cmp	r0, #0
   13084:	sub	r4, fp, #40	; 0x28
   13088:	movwne	r0, #1
   1308c:	and	r9, r9, r0
   13090:	mov	r0, r4
   13094:	bl	10e04 <mbsinit@plt>
   13098:	mov	r2, r5
   1309c:	ldr	lr, [sp, #28]
   130a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   130a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   130a8:	cmp	r0, #0
   130ac:	bne	12f40 <__assert_fail@plt+0x1f68>
   130b0:	add	r0, r2, r7
   130b4:	str	r2, [sp, #44]	; 0x2c
   130b8:	mov	r3, r4
   130bc:	add	r1, ip, r0
   130c0:	str	r0, [sp, #24]
   130c4:	sub	r2, lr, r0
   130c8:	sub	r0, fp, #44	; 0x2c
   130cc:	bl	14f4c <__assert_fail@plt+0x3f74>
   130d0:	cmp	r0, #0
   130d4:	beq	13478 <__assert_fail@plt+0x24a0>
   130d8:	cmn	r0, #1
   130dc:	beq	13434 <__assert_fail@plt+0x245c>
   130e0:	ldr	lr, [sp, #28]
   130e4:	cmn	r0, #2
   130e8:	beq	1343c <__assert_fail@plt+0x2464>
   130ec:	ldr	r2, [sp, #64]	; 0x40
   130f0:	ldr	r4, [sp, #88]	; 0x58
   130f4:	ldr	ip, [sp, #84]	; 0x54
   130f8:	cmp	r0, #2
   130fc:	mov	r1, #0
   13100:	movwcc	r1, #1
   13104:	eor	r2, r2, #1
   13108:	orrs	r1, r2, r1
   1310c:	bne	13070 <__assert_fail@plt+0x2098>
   13110:	ldr	r1, [sp, #44]	; 0x2c
   13114:	ldr	r2, [sp, #20]
   13118:	add	r1, r2, r1
   1311c:	sub	r2, r0, #1
   13120:	b	13130 <__assert_fail@plt+0x2158>
   13124:	add	r1, r1, #1
   13128:	subs	r2, r2, #1
   1312c:	beq	13070 <__assert_fail@plt+0x2098>
   13130:	ldrb	r3, [r1]
   13134:	sub	r3, r3, #91	; 0x5b
   13138:	cmp	r3, #33	; 0x21
   1313c:	bhi	13124 <__assert_fail@plt+0x214c>
   13140:	add	r5, pc, #0
   13144:	ldr	pc, [r5, r3, lsl #2]
   13148:	andeq	r3, r1, ip, lsr #10
   1314c:	andeq	r3, r1, ip, lsr #10
   13150:	andeq	r3, r1, r4, lsr #2
   13154:	andeq	r3, r1, ip, lsr #10
   13158:	andeq	r3, r1, r4, lsr #2
   1315c:	andeq	r3, r1, ip, lsr #10
   13160:	andeq	r3, r1, r4, lsr #2
   13164:	andeq	r3, r1, r4, lsr #2
   13168:	andeq	r3, r1, r4, lsr #2
   1316c:	andeq	r3, r1, r4, lsr #2
   13170:	andeq	r3, r1, r4, lsr #2
   13174:	andeq	r3, r1, r4, lsr #2
   13178:	andeq	r3, r1, r4, lsr #2
   1317c:	andeq	r3, r1, r4, lsr #2
   13180:	andeq	r3, r1, r4, lsr #2
   13184:	andeq	r3, r1, r4, lsr #2
   13188:	andeq	r3, r1, r4, lsr #2
   1318c:	andeq	r3, r1, r4, lsr #2
   13190:	andeq	r3, r1, r4, lsr #2
   13194:	andeq	r3, r1, r4, lsr #2
   13198:	andeq	r3, r1, r4, lsr #2
   1319c:	andeq	r3, r1, r4, lsr #2
   131a0:	andeq	r3, r1, r4, lsr #2
   131a4:	andeq	r3, r1, r4, lsr #2
   131a8:	andeq	r3, r1, r4, lsr #2
   131ac:	andeq	r3, r1, r4, lsr #2
   131b0:	andeq	r3, r1, r4, lsr #2
   131b4:	andeq	r3, r1, r4, lsr #2
   131b8:	andeq	r3, r1, r4, lsr #2
   131bc:	andeq	r3, r1, r4, lsr #2
   131c0:	andeq	r3, r1, r4, lsr #2
   131c4:	andeq	r3, r1, r4, lsr #2
   131c8:	andeq	r3, r1, r4, lsr #2
   131cc:	andeq	r3, r1, ip, lsr #10
   131d0:	mov	r8, r0
   131d4:	b	12bf8 <__assert_fail@plt+0x1c20>
   131d8:	ldr	r0, [sp, #32]
   131dc:	cmp	r0, #0
   131e0:	beq	13280 <__assert_fail@plt+0x22a8>
   131e4:	add	r0, r7, #2
   131e8:	cmp	r0, lr
   131ec:	bcs	13280 <__assert_fail@plt+0x22a8>
   131f0:	add	r1, r7, ip
   131f4:	ldrb	r1, [r1, #1]
   131f8:	cmp	r1, #63	; 0x3f
   131fc:	bne	13280 <__assert_fail@plt+0x22a8>
   13200:	ldrb	r9, [ip, r0]
   13204:	sub	r2, r9, #33	; 0x21
   13208:	cmp	r2, #29
   1320c:	bhi	13280 <__assert_fail@plt+0x22a8>
   13210:	movw	r1, #20929	; 0x51c1
   13214:	mov	r3, #1
   13218:	movt	r1, #14336	; 0x3800
   1321c:	tst	r1, r3, lsl r2
   13220:	beq	13280 <__assert_fail@plt+0x22a8>
   13224:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13228:	tst	r1, #1
   1322c:	bne	13550 <__assert_fail@plt+0x2578>
   13230:	cmp	r8, r4
   13234:	add	r2, r8, #1
   13238:	mov	r6, r9
   1323c:	mov	r7, r0
   13240:	mov	r9, #0
   13244:	movcc	r1, #63	; 0x3f
   13248:	strbcc	r1, [r5, r8]
   1324c:	cmp	r2, r4
   13250:	movcc	r1, #34	; 0x22
   13254:	strbcc	r1, [r5, r2]
   13258:	add	r2, r8, #2
   1325c:	cmp	r2, r4
   13260:	movcc	r1, #34	; 0x22
   13264:	strbcc	r1, [r5, r2]
   13268:	add	r2, r8, #3
   1326c:	add	r8, r8, #4
   13270:	cmp	r2, r4
   13274:	movcc	r1, #63	; 0x3f
   13278:	strbcc	r1, [r5, r2]
   1327c:	b	12bf8 <__assert_fail@plt+0x1c20>
   13280:	mov	r9, #0
   13284:	b	12bf8 <__assert_fail@plt+0x1c20>
   13288:	ldr	lr, [sp, #28]
   1328c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13290:	add	r1, r2, r7
   13294:	mov	r2, #0
   13298:	str	r1, [sp, #44]	; 0x2c
   1329c:	tst	r0, #1
   132a0:	bne	133bc <__assert_fail@plt+0x23e4>
   132a4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   132a8:	tst	r1, #1
   132ac:	bne	1354c <__assert_fail@plt+0x2574>
   132b0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   132b4:	subs	r2, r1, #2
   132b8:	movwne	r2, #1
   132bc:	orr	r2, r2, r4
   132c0:	tst	r2, #1
   132c4:	bne	13308 <__assert_fail@plt+0x2330>
   132c8:	ldr	r1, [sp, #88]	; 0x58
   132cc:	add	r2, r8, #1
   132d0:	mov	r4, #1
   132d4:	cmp	r8, r1
   132d8:	movcc	r1, #39	; 0x27
   132dc:	strbcc	r1, [r5, r8]
   132e0:	ldr	r1, [sp, #88]	; 0x58
   132e4:	cmp	r2, r1
   132e8:	movcc	r1, #36	; 0x24
   132ec:	strbcc	r1, [r5, r2]
   132f0:	ldr	r1, [sp, #88]	; 0x58
   132f4:	add	r2, r8, #2
   132f8:	add	r8, r8, #3
   132fc:	cmp	r2, r1
   13300:	movcc	r1, #39	; 0x27
   13304:	strbcc	r1, [r5, r2]
   13308:	ldr	r1, [sp, #88]	; 0x58
   1330c:	add	r2, r8, #1
   13310:	cmp	r8, r1
   13314:	movcc	r1, #92	; 0x5c
   13318:	strbcc	r1, [r5, r8]
   1331c:	ldr	r1, [sp, #88]	; 0x58
   13320:	cmp	r2, r1
   13324:	bcs	13338 <__assert_fail@plt+0x2360>
   13328:	uxtb	r3, r6
   1332c:	mov	r1, #48	; 0x30
   13330:	orr	r3, r1, r3, lsr #6
   13334:	strb	r3, [r5, r2]
   13338:	ldr	r1, [sp, #88]	; 0x58
   1333c:	add	r2, r8, #2
   13340:	add	r8, r8, #3
   13344:	cmp	r2, r1
   13348:	lsrcc	r3, r6, #3
   1334c:	movcc	r1, #6
   13350:	bficc	r3, r1, #3, #29
   13354:	mov	r1, #6
   13358:	bfi	r6, r1, #3, #29
   1335c:	strbcc	r3, [r5, r2]
   13360:	mov	r2, #1
   13364:	b	133e4 <__assert_fail@plt+0x240c>
   13368:	ldr	r1, [sp, #88]	; 0x58
   1336c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13370:	ldr	r4, [sp, #88]	; 0x58
   13374:	cmp	r8, r1
   13378:	movcc	r1, #39	; 0x27
   1337c:	strbcc	r1, [r5, r8]
   13380:	add	r1, r8, #1
   13384:	add	r8, r8, #2
   13388:	cmp	r1, r4
   1338c:	movcc	r4, #39	; 0x27
   13390:	strbcc	r4, [r5, r1]
   13394:	mov	r4, #0
   13398:	ldr	r1, [sp, #88]	; 0x58
   1339c:	cmp	r8, r1
   133a0:	ldr	r1, [sp, #72]	; 0x48
   133a4:	strbcc	r6, [r5, r8]
   133a8:	add	r8, r8, #1
   133ac:	ldrb	r6, [r1, r7]
   133b0:	mov	r7, r3
   133b4:	tst	r0, #1
   133b8:	beq	132a4 <__assert_fail@plt+0x22cc>
   133bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   133c0:	tst	r1, #1
   133c4:	beq	133dc <__assert_fail@plt+0x2404>
   133c8:	ldr	r1, [sp, #88]	; 0x58
   133cc:	cmp	r8, r1
   133d0:	movcc	r1, #92	; 0x5c
   133d4:	strbcc	r1, [r5, r8]
   133d8:	add	r8, r8, #1
   133dc:	mov	r1, #0
   133e0:	str	r1, [fp, #-52]	; 0xffffffcc
   133e4:	ldr	r1, [sp, #44]	; 0x2c
   133e8:	add	r3, r7, #1
   133ec:	and	sl, r2, #1
   133f0:	cmp	r1, r3
   133f4:	bls	13418 <__assert_fail@plt+0x2440>
   133f8:	cmp	sl, #0
   133fc:	mvn	r5, r4
   13400:	movwne	sl, #1
   13404:	orr	r5, r5, sl
   13408:	tst	r5, #1
   1340c:	beq	13368 <__assert_fail@plt+0x2390>
   13410:	ldr	r5, [fp, #-84]	; 0xffffffac
   13414:	b	13398 <__assert_fail@plt+0x23c0>
   13418:	str	r4, [fp, #-56]	; 0xffffffc8
   1341c:	ldr	r4, [sp, #88]	; 0x58
   13420:	cmp	sl, #0
   13424:	movwne	sl, #1
   13428:	cmp	sl, #0
   1342c:	beq	12f88 <__assert_fail@plt+0x1fb0>
   13430:	b	12fbc <__assert_fail@plt+0x1fe4>
   13434:	mov	r9, #0
   13438:	b	13478 <__assert_fail@plt+0x24a0>
   1343c:	ldr	r0, [sp, #24]
   13440:	mov	r9, #0
   13444:	cmp	lr, r0
   13448:	bls	13478 <__assert_fail@plt+0x24a0>
   1344c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13450:	ldr	r2, [sp, #44]	; 0x2c
   13454:	add	r0, ip, r7
   13458:	ldrb	r1, [r0, r2]
   1345c:	cmp	r1, #0
   13460:	beq	12f40 <__assert_fail@plt+0x1f68>
   13464:	add	r2, r2, #1
   13468:	add	r1, r7, r2
   1346c:	cmp	r1, lr
   13470:	bcc	13458 <__assert_fail@plt+0x2480>
   13474:	b	12f40 <__assert_fail@plt+0x1f68>
   13478:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1347c:	ldr	r2, [sp, #44]	; 0x2c
   13480:	b	12f40 <__assert_fail@plt+0x1f68>
   13484:	mov	lr, r7
   13488:	b	13490 <__assert_fail@plt+0x24b8>
   1348c:	mvn	lr, #0
   13490:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13494:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13498:	eor	r0, r1, #2
   1349c:	orr	r0, r0, r8
   134a0:	clz	r0, r0
   134a4:	lsr	r0, r0, #5
   134a8:	tst	r2, r0
   134ac:	bne	13550 <__assert_fail@plt+0x2578>
   134b0:	subs	r0, r1, #2
   134b4:	movwne	r0, #1
   134b8:	orr	r0, r2, r0
   134bc:	tst	r0, #1
   134c0:	ldreq	r0, [sp, #60]	; 0x3c
   134c4:	eoreq	r0, r0, #1
   134c8:	tsteq	r0, #1
   134cc:	bne	135e4 <__assert_fail@plt+0x260c>
   134d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   134d4:	mov	sl, lr
   134d8:	tst	r0, #1
   134dc:	bne	135b0 <__assert_fail@plt+0x25d8>
   134e0:	ldr	r6, [sp, #56]	; 0x38
   134e4:	mov	r9, #0
   134e8:	cmp	r6, #0
   134ec:	beq	135dc <__assert_fail@plt+0x2604>
   134f0:	ldr	r0, [sp, #84]	; 0x54
   134f4:	mov	r1, #0
   134f8:	mov	r7, #2
   134fc:	cmp	r4, #0
   13500:	str	r1, [fp, #-48]	; 0xffffffd0
   13504:	mov	r1, #0
   13508:	str	r1, [fp, #-76]	; 0xffffffb4
   1350c:	beq	126ac <__assert_fail@plt+0x16d4>
   13510:	b	135e4 <__assert_fail@plt+0x260c>
   13514:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13518:	ldr	r1, [fp, #12]
   1351c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13520:	mov	lr, r4
   13524:	mov	r4, r6
   13528:	b	13570 <__assert_fail@plt+0x2598>
   1352c:	tst	ip, #1
   13530:	ldr	r5, [fp, #-84]	; 0xffffffac
   13534:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13538:	ldr	r1, [fp, #12]
   1353c:	mov	r0, #2
   13540:	movwne	r0, #4
   13544:	mov	r2, r0
   13548:	b	13570 <__assert_fail@plt+0x2598>
   1354c:	ldr	r4, [sp, #88]	; 0x58
   13550:	ldr	r1, [sp, #84]	; 0x54
   13554:	mov	r0, #2
   13558:	tst	r1, #1
   1355c:	movwne	r0, #4
   13560:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13564:	ldr	r1, [fp, #12]
   13568:	cmp	r2, #2
   1356c:	moveq	r2, r0
   13570:	mov	r0, #0
   13574:	bic	r1, r1, #2
   13578:	str	r2, [sp]
   1357c:	mov	r2, ip
   13580:	mov	r3, lr
   13584:	str	r0, [sp, #8]
   13588:	ldr	r0, [sp, #76]	; 0x4c
   1358c:	str	r1, [sp, #4]
   13590:	mov	r1, r4
   13594:	str	r0, [sp, #12]
   13598:	ldr	r0, [sp, #80]	; 0x50
   1359c:	str	r0, [sp, #16]
   135a0:	mov	r0, r5
   135a4:	bl	1261c <__assert_fail@plt+0x1644>
   135a8:	mov	r8, r0
   135ac:	b	13630 <__assert_fail@plt+0x2658>
   135b0:	mov	r0, #5
   135b4:	ldr	r1, [sp, #56]	; 0x38
   135b8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   135bc:	mov	r3, sl
   135c0:	str	r0, [sp]
   135c4:	ldr	r0, [fp, #12]
   135c8:	str	r0, [sp, #4]
   135cc:	ldr	r0, [fp, #16]
   135d0:	str	r0, [sp, #8]
   135d4:	ldr	r0, [sp, #76]	; 0x4c
   135d8:	b	13594 <__assert_fail@plt+0x25bc>
   135dc:	mov	r0, #0
   135e0:	str	r0, [fp, #-76]	; 0xffffffb4
   135e4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   135e8:	cmp	r1, #0
   135ec:	beq	13624 <__assert_fail@plt+0x264c>
   135f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   135f4:	tst	r0, #1
   135f8:	bne	13624 <__assert_fail@plt+0x264c>
   135fc:	ldrb	r0, [r1]
   13600:	cmp	r0, #0
   13604:	beq	13624 <__assert_fail@plt+0x264c>
   13608:	add	r1, r1, #1
   1360c:	cmp	r8, r4
   13610:	strbcc	r0, [r5, r8]
   13614:	add	r8, r8, #1
   13618:	ldrb	r0, [r1], #1
   1361c:	cmp	r0, #0
   13620:	bne	1360c <__assert_fail@plt+0x2634>
   13624:	cmp	r8, r4
   13628:	movcc	r0, #0
   1362c:	strbcc	r0, [r5, r8]
   13630:	mov	r0, r8
   13634:	sub	sp, fp, #28
   13638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1363c:	mov	r0, #4
   13640:	b	13560 <__assert_fail@plt+0x2588>
   13644:	bl	10fc0 <abort@plt>
   13648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1364c:	add	fp, sp, #28
   13650:	sub	sp, sp, #28
   13654:	movw	r5, #24992	; 0x61a0
   13658:	cmp	r2, #0
   1365c:	mov	r4, r1
   13660:	mov	r7, r0
   13664:	str	r0, [sp, #20]
   13668:	movt	r5, #2
   1366c:	movne	r5, r2
   13670:	bl	10ef4 <__errno_location@plt>
   13674:	mov	sl, r0
   13678:	ldr	r2, [r5, #40]	; 0x28
   1367c:	ldr	r3, [r5, #44]	; 0x2c
   13680:	ldm	r5, {r0, r1}
   13684:	orr	r8, r1, #1
   13688:	add	r9, r5, #8
   1368c:	mov	r1, #0
   13690:	ldr	r6, [sl]
   13694:	stm	sp, {r0, r8, r9}
   13698:	mov	r0, #0
   1369c:	str	r2, [sp, #12]
   136a0:	str	r3, [sp, #16]
   136a4:	mov	r2, r7
   136a8:	mov	r3, r4
   136ac:	str	r6, [sp, #24]
   136b0:	mov	r6, r4
   136b4:	bl	1261c <__assert_fail@plt+0x1644>
   136b8:	add	r7, r0, #1
   136bc:	mov	r0, r7
   136c0:	bl	14868 <__assert_fail@plt+0x3890>
   136c4:	mov	r4, r0
   136c8:	ldr	r0, [r5]
   136cc:	ldr	r2, [r5, #44]	; 0x2c
   136d0:	ldr	r1, [r5, #40]	; 0x28
   136d4:	mov	r3, r6
   136d8:	stm	sp, {r0, r8, r9}
   136dc:	str	r2, [sp, #16]
   136e0:	ldr	r2, [sp, #20]
   136e4:	str	r1, [sp, #12]
   136e8:	mov	r0, r4
   136ec:	mov	r1, r7
   136f0:	bl	1261c <__assert_fail@plt+0x1644>
   136f4:	ldr	r0, [sp, #24]
   136f8:	str	r0, [sl]
   136fc:	mov	r0, r4
   13700:	sub	sp, fp, #28
   13704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1370c:	add	fp, sp, #28
   13710:	sub	sp, sp, #36	; 0x24
   13714:	movw	r8, #24992	; 0x61a0
   13718:	cmp	r3, #0
   1371c:	mov	r4, r2
   13720:	str	r2, [sp, #24]
   13724:	mov	r5, r1
   13728:	mov	r6, r0
   1372c:	str	r0, [sp, #20]
   13730:	movt	r8, #2
   13734:	movne	r8, r3
   13738:	bl	10ef4 <__errno_location@plt>
   1373c:	str	r0, [sp, #28]
   13740:	ldr	r1, [r8, #40]	; 0x28
   13744:	ldr	r2, [r8, #44]	; 0x2c
   13748:	ldr	r7, [r0]
   1374c:	cmp	r4, #0
   13750:	add	sl, r8, #8
   13754:	mov	r0, #0
   13758:	ldm	r8, {r3, r9}
   1375c:	orreq	r9, r9, #1
   13760:	stm	sp, {r3, r9, sl}
   13764:	str	r1, [sp, #12]
   13768:	str	r2, [sp, #16]
   1376c:	mov	r1, #0
   13770:	mov	r2, r6
   13774:	mov	r3, r5
   13778:	str	r7, [sp, #32]
   1377c:	mov	r7, r5
   13780:	bl	1261c <__assert_fail@plt+0x1644>
   13784:	add	r4, r0, #1
   13788:	mov	r5, r0
   1378c:	mov	r0, r4
   13790:	bl	14868 <__assert_fail@plt+0x3890>
   13794:	mov	r6, r0
   13798:	ldr	r0, [r8]
   1379c:	ldr	r2, [r8, #44]	; 0x2c
   137a0:	ldr	r1, [r8, #40]	; 0x28
   137a4:	mov	r3, r7
   137a8:	stm	sp, {r0, r9, sl}
   137ac:	str	r2, [sp, #16]
   137b0:	ldr	r2, [sp, #20]
   137b4:	str	r1, [sp, #12]
   137b8:	mov	r0, r6
   137bc:	mov	r1, r4
   137c0:	bl	1261c <__assert_fail@plt+0x1644>
   137c4:	ldr	r0, [sp, #24]
   137c8:	ldr	r1, [sp, #32]
   137cc:	ldr	r2, [sp, #28]
   137d0:	cmp	r0, #0
   137d4:	str	r1, [r2]
   137d8:	strne	r5, [r0]
   137dc:	mov	r0, r6
   137e0:	sub	sp, fp, #28
   137e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137ec:	add	fp, sp, #24
   137f0:	movw	r5, #24820	; 0x60f4
   137f4:	movw	r8, #24816	; 0x60f0
   137f8:	movt	r5, #2
   137fc:	movt	r8, #2
   13800:	ldr	r0, [r5]
   13804:	ldr	r4, [r8]
   13808:	cmp	r0, #2
   1380c:	blt	13838 <__assert_fail@plt+0x2860>
   13810:	add	r7, r4, #12
   13814:	mov	r6, #0
   13818:	ldr	r0, [r7, r6, lsl #3]
   1381c:	bl	12310 <__assert_fail@plt+0x1338>
   13820:	ldr	r1, [r5]
   13824:	add	r2, r6, #2
   13828:	add	r0, r6, #1
   1382c:	mov	r6, r0
   13830:	cmp	r2, r1
   13834:	blt	13818 <__assert_fail@plt+0x2840>
   13838:	ldr	r0, [r4, #4]
   1383c:	movw	r9, #25040	; 0x61d0
   13840:	movw	r7, #24824	; 0x60f8
   13844:	movt	r9, #2
   13848:	movt	r7, #2
   1384c:	cmp	r0, r9
   13850:	beq	13860 <__assert_fail@plt+0x2888>
   13854:	bl	12310 <__assert_fail@plt+0x1338>
   13858:	mov	r0, #256	; 0x100
   1385c:	stm	r7, {r0, r9}
   13860:	cmp	r4, r7
   13864:	beq	13874 <__assert_fail@plt+0x289c>
   13868:	mov	r0, r4
   1386c:	bl	12310 <__assert_fail@plt+0x1338>
   13870:	str	r7, [r8]
   13874:	mov	r0, #1
   13878:	str	r0, [r5]
   1387c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13880:	movw	r3, #24992	; 0x61a0
   13884:	mvn	r2, #0
   13888:	movt	r3, #2
   1388c:	b	13890 <__assert_fail@plt+0x28b8>
   13890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13894:	add	fp, sp, #28
   13898:	sub	sp, sp, #44	; 0x2c
   1389c:	mov	r7, r3
   138a0:	str	r2, [sp, #36]	; 0x24
   138a4:	str	r1, [sp, #32]
   138a8:	mov	r5, r0
   138ac:	bl	10ef4 <__errno_location@plt>
   138b0:	cmp	r5, #0
   138b4:	bmi	13a24 <__assert_fail@plt+0x2a4c>
   138b8:	cmn	r5, #-2147483647	; 0x80000001
   138bc:	beq	13a24 <__assert_fail@plt+0x2a4c>
   138c0:	movw	r8, #24820	; 0x60f4
   138c4:	movw	r4, #24816	; 0x60f0
   138c8:	str	r0, [sp, #28]
   138cc:	ldr	r0, [r0]
   138d0:	movt	r8, #2
   138d4:	movt	r4, #2
   138d8:	ldr	r1, [r8]
   138dc:	ldr	r6, [r4]
   138e0:	str	r0, [sp, #24]
   138e4:	cmp	r1, r5
   138e8:	ble	138f4 <__assert_fail@plt+0x291c>
   138ec:	mov	sl, r6
   138f0:	b	13960 <__assert_fail@plt+0x2988>
   138f4:	movw	r9, #24824	; 0x60f8
   138f8:	mov	r0, #8
   138fc:	str	r1, [fp, #-32]	; 0xffffffe0
   13900:	sub	r1, r5, r1
   13904:	mvn	r3, #-2147483648	; 0x80000000
   13908:	movt	r9, #2
   1390c:	str	r0, [sp]
   13910:	add	r2, r1, #1
   13914:	sub	r1, fp, #32
   13918:	subs	r0, r6, r9
   1391c:	movne	r0, r6
   13920:	bl	14a68 <__assert_fail@plt+0x3a90>
   13924:	mov	sl, r0
   13928:	cmp	r6, r9
   1392c:	str	r0, [r4]
   13930:	bne	1393c <__assert_fail@plt+0x2964>
   13934:	ldrd	r0, [r9]
   13938:	stm	sl, {r0, r1}
   1393c:	ldr	r1, [r8]
   13940:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13944:	add	r0, sl, r1, lsl #3
   13948:	sub	r1, r2, r1
   1394c:	lsl	r2, r1, #3
   13950:	mov	r1, #0
   13954:	bl	10f0c <memset@plt>
   13958:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1395c:	str	r0, [r8]
   13960:	mov	r9, sl
   13964:	ldm	r7, {r0, r1}
   13968:	orr	r8, r1, #1
   1396c:	add	r1, r7, #8
   13970:	ldr	r2, [r7, #40]	; 0x28
   13974:	ldr	r3, [r7, #44]	; 0x2c
   13978:	ldr	r6, [r9, r5, lsl #3]!
   1397c:	str	r1, [sp, #20]
   13980:	ldr	r4, [r9, #4]!
   13984:	stm	sp, {r0, r8}
   13988:	add	r0, sp, #8
   1398c:	stm	r0, {r1, r2, r3}
   13990:	ldr	r2, [sp, #32]
   13994:	ldr	r3, [sp, #36]	; 0x24
   13998:	mov	r1, r6
   1399c:	mov	r0, r4
   139a0:	bl	1261c <__assert_fail@plt+0x1644>
   139a4:	cmp	r6, r0
   139a8:	bhi	13a0c <__assert_fail@plt+0x2a34>
   139ac:	add	r6, r0, #1
   139b0:	movw	r0, #25040	; 0x61d0
   139b4:	movt	r0, #2
   139b8:	str	r6, [sl, r5, lsl #3]
   139bc:	cmp	r4, r0
   139c0:	beq	139cc <__assert_fail@plt+0x29f4>
   139c4:	mov	r0, r4
   139c8:	bl	12310 <__assert_fail@plt+0x1338>
   139cc:	mov	r0, r6
   139d0:	bl	14868 <__assert_fail@plt+0x3890>
   139d4:	str	r0, [r9]
   139d8:	mov	r4, r0
   139dc:	add	r3, sp, #8
   139e0:	ldr	r0, [r7]
   139e4:	ldr	r1, [r7, #40]	; 0x28
   139e8:	ldr	r2, [r7, #44]	; 0x2c
   139ec:	stm	sp, {r0, r8}
   139f0:	ldr	r0, [sp, #20]
   139f4:	stm	r3, {r0, r1, r2}
   139f8:	ldr	r2, [sp, #32]
   139fc:	ldr	r3, [sp, #36]	; 0x24
   13a00:	mov	r0, r4
   13a04:	mov	r1, r6
   13a08:	bl	1261c <__assert_fail@plt+0x1644>
   13a0c:	ldr	r0, [sp, #28]
   13a10:	ldr	r1, [sp, #24]
   13a14:	str	r1, [r0]
   13a18:	mov	r0, r4
   13a1c:	sub	sp, fp, #28
   13a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a24:	bl	10fc0 <abort@plt>
   13a28:	movw	r3, #24992	; 0x61a0
   13a2c:	movt	r3, #2
   13a30:	b	13890 <__assert_fail@plt+0x28b8>
   13a34:	movw	r3, #24992	; 0x61a0
   13a38:	mov	r1, r0
   13a3c:	mov	r0, #0
   13a40:	mvn	r2, #0
   13a44:	movt	r3, #2
   13a48:	b	13890 <__assert_fail@plt+0x28b8>
   13a4c:	movw	r3, #24992	; 0x61a0
   13a50:	mov	r2, r1
   13a54:	mov	r1, r0
   13a58:	mov	r0, #0
   13a5c:	movt	r3, #2
   13a60:	b	13890 <__assert_fail@plt+0x28b8>
   13a64:	push	{fp, lr}
   13a68:	mov	fp, sp
   13a6c:	sub	sp, sp, #48	; 0x30
   13a70:	vmov.i32	q8, #0	; 0x00000000
   13a74:	mov	ip, #32
   13a78:	mov	r3, sp
   13a7c:	mov	lr, r2
   13a80:	cmp	r1, #10
   13a84:	add	r2, r3, #16
   13a88:	vst1.64	{d16-d17}, [r3], ip
   13a8c:	vst1.64	{d16-d17}, [r2]
   13a90:	vst1.64	{d16-d17}, [r3]
   13a94:	beq	13ab4 <__assert_fail@plt+0x2adc>
   13a98:	str	r1, [sp]
   13a9c:	mov	r3, sp
   13aa0:	mov	r1, lr
   13aa4:	mvn	r2, #0
   13aa8:	bl	13890 <__assert_fail@plt+0x28b8>
   13aac:	mov	sp, fp
   13ab0:	pop	{fp, pc}
   13ab4:	bl	10fc0 <abort@plt>
   13ab8:	push	{r4, sl, fp, lr}
   13abc:	add	fp, sp, #8
   13ac0:	sub	sp, sp, #48	; 0x30
   13ac4:	vmov.i32	q8, #0	; 0x00000000
   13ac8:	mov	ip, r3
   13acc:	mov	r3, sp
   13ad0:	mov	lr, #32
   13ad4:	cmp	r1, #10
   13ad8:	add	r4, r3, #16
   13adc:	vst1.64	{d16-d17}, [r3], lr
   13ae0:	vst1.64	{d16-d17}, [r4]
   13ae4:	vst1.64	{d16-d17}, [r3]
   13ae8:	beq	13b08 <__assert_fail@plt+0x2b30>
   13aec:	str	r1, [sp]
   13af0:	mov	r1, r2
   13af4:	mov	r3, sp
   13af8:	mov	r2, ip
   13afc:	bl	13890 <__assert_fail@plt+0x28b8>
   13b00:	sub	sp, fp, #8
   13b04:	pop	{r4, sl, fp, pc}
   13b08:	bl	10fc0 <abort@plt>
   13b0c:	push	{fp, lr}
   13b10:	mov	fp, sp
   13b14:	sub	sp, sp, #48	; 0x30
   13b18:	vmov.i32	q8, #0	; 0x00000000
   13b1c:	mov	r3, sp
   13b20:	mov	ip, #32
   13b24:	cmp	r0, #10
   13b28:	add	r2, r3, #16
   13b2c:	vst1.64	{d16-d17}, [r3], ip
   13b30:	vst1.64	{d16-d17}, [r2]
   13b34:	vst1.64	{d16-d17}, [r3]
   13b38:	beq	13b58 <__assert_fail@plt+0x2b80>
   13b3c:	str	r0, [sp]
   13b40:	mov	r3, sp
   13b44:	mov	r0, #0
   13b48:	mvn	r2, #0
   13b4c:	bl	13890 <__assert_fail@plt+0x28b8>
   13b50:	mov	sp, fp
   13b54:	pop	{fp, pc}
   13b58:	bl	10fc0 <abort@plt>
   13b5c:	push	{fp, lr}
   13b60:	mov	fp, sp
   13b64:	sub	sp, sp, #48	; 0x30
   13b68:	vmov.i32	q8, #0	; 0x00000000
   13b6c:	mov	r3, sp
   13b70:	mov	ip, #32
   13b74:	cmp	r0, #10
   13b78:	add	lr, r3, #16
   13b7c:	vst1.64	{d16-d17}, [r3], ip
   13b80:	vst1.64	{d16-d17}, [lr]
   13b84:	vst1.64	{d16-d17}, [r3]
   13b88:	beq	13ba4 <__assert_fail@plt+0x2bcc>
   13b8c:	str	r0, [sp]
   13b90:	mov	r3, sp
   13b94:	mov	r0, #0
   13b98:	bl	13890 <__assert_fail@plt+0x28b8>
   13b9c:	mov	sp, fp
   13ba0:	pop	{fp, pc}
   13ba4:	bl	10fc0 <abort@plt>
   13ba8:	push	{r4, sl, fp, lr}
   13bac:	add	fp, sp, #8
   13bb0:	sub	sp, sp, #48	; 0x30
   13bb4:	mov	lr, r0
   13bb8:	movw	r0, #24992	; 0x61a0
   13bbc:	mov	ip, r1
   13bc0:	mov	r1, #32
   13bc4:	mov	r4, #1
   13bc8:	movt	r0, #2
   13bcc:	add	r3, r0, #16
   13bd0:	vld1.64	{d16-d17}, [r0], r1
   13bd4:	vld1.64	{d20-d21}, [r0]
   13bd8:	vld1.64	{d18-d19}, [r3]
   13bdc:	mov	r3, sp
   13be0:	add	r0, r3, #32
   13be4:	add	r1, r3, #16
   13be8:	vst1.64	{d20-d21}, [r0]
   13bec:	mov	r0, #28
   13bf0:	vst1.64	{d18-d19}, [r1]
   13bf4:	mov	r1, r3
   13bf8:	and	r0, r0, r2, lsr #3
   13bfc:	and	r2, r2, #31
   13c00:	vst1.64	{d16-d17}, [r1], r0
   13c04:	ldr	r0, [r1, #8]
   13c08:	bic	r4, r4, r0, lsr r2
   13c0c:	eor	r0, r0, r4, lsl r2
   13c10:	mov	r2, ip
   13c14:	str	r0, [r1, #8]
   13c18:	mov	r0, #0
   13c1c:	mov	r1, lr
   13c20:	bl	13890 <__assert_fail@plt+0x28b8>
   13c24:	sub	sp, fp, #8
   13c28:	pop	{r4, sl, fp, pc}
   13c2c:	push	{fp, lr}
   13c30:	mov	fp, sp
   13c34:	sub	sp, sp, #48	; 0x30
   13c38:	mov	ip, r0
   13c3c:	movw	r0, #24992	; 0x61a0
   13c40:	mov	r2, #32
   13c44:	movt	r0, #2
   13c48:	add	r3, r0, #16
   13c4c:	vld1.64	{d16-d17}, [r0], r2
   13c50:	vld1.64	{d20-d21}, [r0]
   13c54:	vld1.64	{d18-d19}, [r3]
   13c58:	mov	r3, sp
   13c5c:	add	r0, r3, #32
   13c60:	add	r2, r3, #16
   13c64:	vst1.64	{d20-d21}, [r0]
   13c68:	mov	r0, #28
   13c6c:	vst1.64	{d18-d19}, [r2]
   13c70:	mov	r2, r3
   13c74:	and	r0, r0, r1, lsr #3
   13c78:	and	r1, r1, #31
   13c7c:	vst1.64	{d16-d17}, [r2], r0
   13c80:	mov	r0, #1
   13c84:	ldr	lr, [r2, #8]
   13c88:	bic	r0, r0, lr, lsr r1
   13c8c:	eor	r0, lr, r0, lsl r1
   13c90:	mov	r1, ip
   13c94:	str	r0, [r2, #8]
   13c98:	mov	r0, #0
   13c9c:	mvn	r2, #0
   13ca0:	bl	13890 <__assert_fail@plt+0x28b8>
   13ca4:	mov	sp, fp
   13ca8:	pop	{fp, pc}
   13cac:	push	{fp, lr}
   13cb0:	mov	fp, sp
   13cb4:	sub	sp, sp, #48	; 0x30
   13cb8:	mov	r1, r0
   13cbc:	movw	r0, #24992	; 0x61a0
   13cc0:	mov	r3, #32
   13cc4:	movt	r0, #2
   13cc8:	add	r2, r0, #16
   13ccc:	vld1.64	{d16-d17}, [r0], r3
   13cd0:	mov	r3, sp
   13cd4:	vld1.64	{d18-d19}, [r2]
   13cd8:	vld1.64	{d20-d21}, [r0]
   13cdc:	add	r2, r3, #16
   13ce0:	add	r0, r3, #32
   13ce4:	vst1.64	{d18-d19}, [r2]
   13ce8:	vst1.64	{d20-d21}, [r0]
   13cec:	mov	r0, #12
   13cf0:	mov	r2, r3
   13cf4:	vst1.64	{d16-d17}, [r2], r0
   13cf8:	ldr	r0, [r2]
   13cfc:	orr	r0, r0, #67108864	; 0x4000000
   13d00:	str	r0, [r2]
   13d04:	mov	r0, #0
   13d08:	mvn	r2, #0
   13d0c:	bl	13890 <__assert_fail@plt+0x28b8>
   13d10:	mov	sp, fp
   13d14:	pop	{fp, pc}
   13d18:	push	{fp, lr}
   13d1c:	mov	fp, sp
   13d20:	sub	sp, sp, #48	; 0x30
   13d24:	mov	ip, r1
   13d28:	mov	r1, r0
   13d2c:	movw	r0, #24992	; 0x61a0
   13d30:	mov	r2, #32
   13d34:	movt	r0, #2
   13d38:	add	r3, r0, #16
   13d3c:	vld1.64	{d16-d17}, [r0], r2
   13d40:	vld1.64	{d18-d19}, [r3]
   13d44:	vld1.64	{d20-d21}, [r0]
   13d48:	mov	r3, sp
   13d4c:	add	r2, r3, #16
   13d50:	add	r0, r3, #32
   13d54:	vst1.64	{d18-d19}, [r2]
   13d58:	vst1.64	{d20-d21}, [r0]
   13d5c:	mov	r0, #12
   13d60:	mov	r2, r3
   13d64:	vst1.64	{d16-d17}, [r2], r0
   13d68:	ldr	r0, [r2]
   13d6c:	orr	r0, r0, #67108864	; 0x4000000
   13d70:	str	r0, [r2]
   13d74:	mov	r0, #0
   13d78:	mov	r2, ip
   13d7c:	bl	13890 <__assert_fail@plt+0x28b8>
   13d80:	mov	sp, fp
   13d84:	pop	{fp, pc}
   13d88:	push	{r4, sl, fp, lr}
   13d8c:	add	fp, sp, #8
   13d90:	sub	sp, sp, #96	; 0x60
   13d94:	vmov.i32	q8, #0	; 0x00000000
   13d98:	mov	ip, r2
   13d9c:	mov	r2, sp
   13da0:	mov	r4, #28
   13da4:	cmp	r1, #10
   13da8:	mov	r3, r2
   13dac:	add	lr, r2, #16
   13db0:	vst1.64	{d16-d17}, [r3], r4
   13db4:	vst1.64	{d16-d17}, [lr]
   13db8:	vst1.32	{d16-d17}, [r3]
   13dbc:	beq	13e0c <__assert_fail@plt+0x2e34>
   13dc0:	vld1.64	{d16-d17}, [r2], r4
   13dc4:	vld1.64	{d18-d19}, [lr]
   13dc8:	add	r3, sp, #48	; 0x30
   13dcc:	vld1.32	{d20-d21}, [r2]
   13dd0:	add	r2, r3, #20
   13dd4:	add	r4, r3, #4
   13dd8:	vst1.32	{d18-d19}, [r2]
   13ddc:	add	r2, r3, #32
   13de0:	vst1.32	{d16-d17}, [r4]
   13de4:	vst1.32	{d20-d21}, [r2]
   13de8:	str	r1, [sp, #48]	; 0x30
   13dec:	mvn	r2, #0
   13df0:	ldr	r1, [sp, #60]	; 0x3c
   13df4:	orr	r1, r1, #67108864	; 0x4000000
   13df8:	str	r1, [sp, #60]	; 0x3c
   13dfc:	mov	r1, ip
   13e00:	bl	13890 <__assert_fail@plt+0x28b8>
   13e04:	sub	sp, fp, #8
   13e08:	pop	{r4, sl, fp, pc}
   13e0c:	bl	10fc0 <abort@plt>
   13e10:	push	{r4, r5, r6, sl, fp, lr}
   13e14:	add	fp, sp, #16
   13e18:	sub	sp, sp, #48	; 0x30
   13e1c:	mov	ip, r3
   13e20:	movw	r3, #24992	; 0x61a0
   13e24:	mov	r6, #32
   13e28:	cmp	r1, #0
   13e2c:	mov	r4, sp
   13e30:	movt	r3, #2
   13e34:	cmpne	r2, #0
   13e38:	add	r5, r4, #16
   13e3c:	add	lr, r3, #16
   13e40:	vld1.64	{d16-d17}, [r3], r6
   13e44:	vld1.64	{d18-d19}, [lr]
   13e48:	vld1.64	{d20-d21}, [r3]
   13e4c:	mov	r3, #10
   13e50:	vst1.64	{d16-d17}, [r4], r6
   13e54:	vst1.64	{d18-d19}, [r5]
   13e58:	vst1.64	{d20-d21}, [r4]
   13e5c:	str	r3, [sp]
   13e60:	bne	13e68 <__assert_fail@plt+0x2e90>
   13e64:	bl	10fc0 <abort@plt>
   13e68:	str	r2, [sp, #44]	; 0x2c
   13e6c:	str	r1, [sp, #40]	; 0x28
   13e70:	mov	r3, sp
   13e74:	mov	r1, ip
   13e78:	mvn	r2, #0
   13e7c:	bl	13890 <__assert_fail@plt+0x28b8>
   13e80:	sub	sp, fp, #16
   13e84:	pop	{r4, r5, r6, sl, fp, pc}
   13e88:	push	{r4, r5, r6, sl, fp, lr}
   13e8c:	add	fp, sp, #16
   13e90:	sub	sp, sp, #48	; 0x30
   13e94:	mov	lr, r3
   13e98:	movw	r3, #24992	; 0x61a0
   13e9c:	mov	r6, #32
   13ea0:	cmp	r1, #0
   13ea4:	mov	r4, sp
   13ea8:	movt	r3, #2
   13eac:	cmpne	r2, #0
   13eb0:	add	r5, r4, #16
   13eb4:	add	ip, r3, #16
   13eb8:	vld1.64	{d16-d17}, [r3], r6
   13ebc:	vld1.64	{d18-d19}, [ip]
   13ec0:	vld1.64	{d20-d21}, [r3]
   13ec4:	mov	r3, #10
   13ec8:	vst1.64	{d16-d17}, [r4], r6
   13ecc:	vst1.64	{d18-d19}, [r5]
   13ed0:	vst1.64	{d20-d21}, [r4]
   13ed4:	str	r3, [sp]
   13ed8:	bne	13ee0 <__assert_fail@plt+0x2f08>
   13edc:	bl	10fc0 <abort@plt>
   13ee0:	ldr	ip, [fp, #8]
   13ee4:	str	r2, [sp, #44]	; 0x2c
   13ee8:	str	r1, [sp, #40]	; 0x28
   13eec:	mov	r3, sp
   13ef0:	mov	r1, lr
   13ef4:	mov	r2, ip
   13ef8:	bl	13890 <__assert_fail@plt+0x28b8>
   13efc:	sub	sp, fp, #16
   13f00:	pop	{r4, r5, r6, sl, fp, pc}
   13f04:	push	{r4, sl, fp, lr}
   13f08:	add	fp, sp, #8
   13f0c:	sub	sp, sp, #48	; 0x30
   13f10:	movw	r3, #24992	; 0x61a0
   13f14:	mov	lr, #32
   13f18:	mov	ip, r2
   13f1c:	cmp	r0, #0
   13f20:	movt	r3, #2
   13f24:	cmpne	r1, #0
   13f28:	add	r2, r3, #16
   13f2c:	vld1.64	{d16-d17}, [r3], lr
   13f30:	vld1.64	{d20-d21}, [r3]
   13f34:	vld1.64	{d18-d19}, [r2]
   13f38:	mov	r2, sp
   13f3c:	add	r4, r2, #16
   13f40:	vst1.64	{d16-d17}, [r2], lr
   13f44:	vst1.64	{d20-d21}, [r2]
   13f48:	mov	r2, #10
   13f4c:	vst1.64	{d18-d19}, [r4]
   13f50:	str	r2, [sp]
   13f54:	bne	13f5c <__assert_fail@plt+0x2f84>
   13f58:	bl	10fc0 <abort@plt>
   13f5c:	str	r1, [sp, #44]	; 0x2c
   13f60:	str	r0, [sp, #40]	; 0x28
   13f64:	mov	r3, sp
   13f68:	mov	r0, #0
   13f6c:	mov	r1, ip
   13f70:	mvn	r2, #0
   13f74:	bl	13890 <__assert_fail@plt+0x28b8>
   13f78:	sub	sp, fp, #8
   13f7c:	pop	{r4, sl, fp, pc}
   13f80:	push	{r4, r5, fp, lr}
   13f84:	add	fp, sp, #8
   13f88:	sub	sp, sp, #48	; 0x30
   13f8c:	mov	ip, r3
   13f90:	movw	r3, #24992	; 0x61a0
   13f94:	mov	r4, #32
   13f98:	mov	lr, r2
   13f9c:	cmp	r0, #0
   13fa0:	movt	r3, #2
   13fa4:	cmpne	r1, #0
   13fa8:	add	r2, r3, #16
   13fac:	vld1.64	{d16-d17}, [r3], r4
   13fb0:	vld1.64	{d20-d21}, [r3]
   13fb4:	vld1.64	{d18-d19}, [r2]
   13fb8:	mov	r2, sp
   13fbc:	add	r5, r2, #16
   13fc0:	vst1.64	{d16-d17}, [r2], r4
   13fc4:	vst1.64	{d20-d21}, [r2]
   13fc8:	mov	r2, #10
   13fcc:	vst1.64	{d18-d19}, [r5]
   13fd0:	str	r2, [sp]
   13fd4:	bne	13fdc <__assert_fail@plt+0x3004>
   13fd8:	bl	10fc0 <abort@plt>
   13fdc:	str	r1, [sp, #44]	; 0x2c
   13fe0:	str	r0, [sp, #40]	; 0x28
   13fe4:	mov	r3, sp
   13fe8:	mov	r0, #0
   13fec:	mov	r1, lr
   13ff0:	mov	r2, ip
   13ff4:	bl	13890 <__assert_fail@plt+0x28b8>
   13ff8:	sub	sp, fp, #8
   13ffc:	pop	{r4, r5, fp, pc}
   14000:	movw	r3, #24832	; 0x6100
   14004:	movt	r3, #2
   14008:	b	13890 <__assert_fail@plt+0x28b8>
   1400c:	movw	r3, #24832	; 0x6100
   14010:	mov	r2, r1
   14014:	mov	r1, r0
   14018:	mov	r0, #0
   1401c:	movt	r3, #2
   14020:	b	13890 <__assert_fail@plt+0x28b8>
   14024:	movw	r3, #24832	; 0x6100
   14028:	mvn	r2, #0
   1402c:	movt	r3, #2
   14030:	b	13890 <__assert_fail@plt+0x28b8>
   14034:	movw	r3, #24832	; 0x6100
   14038:	mov	r1, r0
   1403c:	mov	r0, #0
   14040:	mvn	r2, #0
   14044:	movt	r3, #2
   14048:	b	13890 <__assert_fail@plt+0x28b8>
   1404c:	push	{r4, r5, fp, lr}
   14050:	add	fp, sp, #8
   14054:	mov	r5, r0
   14058:	mov	r4, r1
   1405c:	mov	r0, #0
   14060:	mov	r2, #5
   14064:	mov	r1, r5
   14068:	bl	10e10 <dcgettext@plt>
   1406c:	cmp	r0, r5
   14070:	popne	{r4, r5, fp, pc}
   14074:	bl	14f14 <__assert_fail@plt+0x3f3c>
   14078:	ldrb	r1, [r0]
   1407c:	and	r1, r1, #223	; 0xdf
   14080:	cmp	r1, #71	; 0x47
   14084:	beq	140ec <__assert_fail@plt+0x3114>
   14088:	cmp	r1, #85	; 0x55
   1408c:	bne	14144 <__assert_fail@plt+0x316c>
   14090:	ldrb	r1, [r0, #1]
   14094:	and	r1, r1, #223	; 0xdf
   14098:	cmp	r1, #84	; 0x54
   1409c:	bne	14144 <__assert_fail@plt+0x316c>
   140a0:	ldrb	r1, [r0, #2]
   140a4:	and	r1, r1, #223	; 0xdf
   140a8:	cmp	r1, #70	; 0x46
   140ac:	bne	14144 <__assert_fail@plt+0x316c>
   140b0:	ldrb	r1, [r0, #3]
   140b4:	cmp	r1, #45	; 0x2d
   140b8:	bne	14144 <__assert_fail@plt+0x316c>
   140bc:	ldrb	r1, [r0, #4]
   140c0:	cmp	r1, #56	; 0x38
   140c4:	bne	14144 <__assert_fail@plt+0x316c>
   140c8:	ldrb	r0, [r0, #5]
   140cc:	cmp	r0, #0
   140d0:	bne	14144 <__assert_fail@plt+0x316c>
   140d4:	ldrb	r1, [r5]
   140d8:	movw	r2, #23352	; 0x5b38
   140dc:	movw	r0, #23356	; 0x5b3c
   140e0:	movt	r2, #1
   140e4:	movt	r0, #1
   140e8:	b	14174 <__assert_fail@plt+0x319c>
   140ec:	ldrb	r1, [r0, #1]
   140f0:	and	r1, r1, #223	; 0xdf
   140f4:	cmp	r1, #66	; 0x42
   140f8:	bne	14144 <__assert_fail@plt+0x316c>
   140fc:	ldrb	r1, [r0, #2]
   14100:	cmp	r1, #49	; 0x31
   14104:	bne	14144 <__assert_fail@plt+0x316c>
   14108:	ldrb	r1, [r0, #3]
   1410c:	cmp	r1, #56	; 0x38
   14110:	bne	14144 <__assert_fail@plt+0x316c>
   14114:	ldrb	r1, [r0, #4]
   14118:	cmp	r1, #48	; 0x30
   1411c:	bne	14144 <__assert_fail@plt+0x316c>
   14120:	ldrb	r1, [r0, #5]
   14124:	cmp	r1, #51	; 0x33
   14128:	bne	14144 <__assert_fail@plt+0x316c>
   1412c:	ldrb	r1, [r0, #6]
   14130:	cmp	r1, #48	; 0x30
   14134:	bne	14144 <__assert_fail@plt+0x316c>
   14138:	ldrb	r0, [r0, #7]
   1413c:	cmp	r0, #0
   14140:	beq	14160 <__assert_fail@plt+0x3188>
   14144:	movw	r1, #23348	; 0x5b34
   14148:	movw	r0, #23180	; 0x5a8c
   1414c:	cmp	r4, #9
   14150:	movt	r1, #1
   14154:	movt	r0, #1
   14158:	moveq	r0, r1
   1415c:	pop	{r4, r5, fp, pc}
   14160:	ldrb	r1, [r5]
   14164:	movw	r2, #23360	; 0x5b40
   14168:	movw	r0, #23364	; 0x5b44
   1416c:	movt	r2, #1
   14170:	movt	r0, #1
   14174:	cmp	r1, #96	; 0x60
   14178:	moveq	r0, r2
   1417c:	pop	{r4, r5, fp, pc}
   14180:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14184:	add	fp, sp, #24
   14188:	sub	sp, sp, #32
   1418c:	ldr	r6, [fp, #12]
   14190:	ldr	r7, [fp, #8]
   14194:	mov	r4, r2
   14198:	mov	r8, r0
   1419c:	cmp	r1, #0
   141a0:	beq	141c8 <__assert_fail@plt+0x31f0>
   141a4:	movw	r2, #23452	; 0x5b9c
   141a8:	mov	r5, r1
   141ac:	str	r3, [sp, #4]
   141b0:	str	r4, [sp]
   141b4:	mov	r0, r8
   141b8:	mov	r1, #1
   141bc:	movt	r2, #1
   141c0:	mov	r3, r5
   141c4:	b	141e0 <__assert_fail@plt+0x3208>
   141c8:	movw	r2, #23464	; 0x5ba8
   141cc:	str	r3, [sp]
   141d0:	mov	r0, r8
   141d4:	mov	r1, #1
   141d8:	mov	r3, r4
   141dc:	movt	r2, #1
   141e0:	bl	10f30 <__fprintf_chk@plt>
   141e4:	movw	r1, #23471	; 0x5baf
   141e8:	mov	r0, #0
   141ec:	mov	r2, #5
   141f0:	movt	r1, #1
   141f4:	bl	10e10 <dcgettext@plt>
   141f8:	movw	r2, #24189	; 0x5e7d
   141fc:	mov	r3, r0
   14200:	movw	r0, #2022	; 0x7e6
   14204:	mov	r1, #1
   14208:	movt	r2, #1
   1420c:	str	r0, [sp]
   14210:	mov	r0, r8
   14214:	bl	10f30 <__fprintf_chk@plt>
   14218:	movw	r4, #22086	; 0x5646
   1421c:	mov	r1, r8
   14220:	movt	r4, #1
   14224:	mov	r0, r4
   14228:	bl	10da4 <fputs_unlocked@plt>
   1422c:	movw	r1, #23475	; 0x5bb3
   14230:	mov	r0, #0
   14234:	mov	r2, #5
   14238:	movt	r1, #1
   1423c:	bl	10e10 <dcgettext@plt>
   14240:	movw	r3, #23646	; 0x5c5e
   14244:	mov	r2, r0
   14248:	mov	r0, r8
   1424c:	mov	r1, #1
   14250:	movt	r3, #1
   14254:	bl	10f30 <__fprintf_chk@plt>
   14258:	mov	r0, r4
   1425c:	mov	r1, r8
   14260:	bl	10da4 <fputs_unlocked@plt>
   14264:	cmp	r6, #9
   14268:	bhi	142a4 <__assert_fail@plt+0x32cc>
   1426c:	add	r0, pc, #0
   14270:	ldr	pc, [r0, r6, lsl #2]
   14274:	muleq	r1, ip, r2
   14278:			; <UNDEFINED> instruction: 0x000142b0
   1427c:	andeq	r4, r1, r0, ror #5
   14280:	andeq	r4, r1, r8, lsl #6
   14284:	andeq	r4, r1, r0, lsr r3
   14288:	andeq	r4, r1, r8, asr r3
   1428c:	andeq	r4, r1, r0, lsl #7
   14290:			; <UNDEFINED> instruction: 0x000143b8
   14294:	andeq	r4, r1, r8, asr r4
   14298:	andeq	r4, r1, r0, lsl #8
   1429c:	sub	sp, fp, #24
   142a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142a4:	movw	r1, #23999	; 0x5dbf
   142a8:	movt	r1, #1
   142ac:	b	14408 <__assert_fail@plt+0x3430>
   142b0:	movw	r1, #23680	; 0x5c80
   142b4:	mov	r0, #0
   142b8:	mov	r2, #5
   142bc:	movt	r1, #1
   142c0:	bl	10e10 <dcgettext@plt>
   142c4:	ldr	r3, [r7]
   142c8:	mov	r2, r0
   142cc:	mov	r0, r8
   142d0:	mov	r1, #1
   142d4:	sub	sp, fp, #24
   142d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   142dc:	b	10f30 <__fprintf_chk@plt>
   142e0:	movw	r1, #23696	; 0x5c90
   142e4:	mov	r0, #0
   142e8:	mov	r2, #5
   142ec:	movt	r1, #1
   142f0:	bl	10e10 <dcgettext@plt>
   142f4:	mov	r2, r0
   142f8:	ldr	r3, [r7]
   142fc:	ldr	r0, [r7, #4]
   14300:	str	r0, [sp]
   14304:	b	143f4 <__assert_fail@plt+0x341c>
   14308:	movw	r1, #23719	; 0x5ca7
   1430c:	mov	r0, #0
   14310:	mov	r2, #5
   14314:	movt	r1, #1
   14318:	bl	10e10 <dcgettext@plt>
   1431c:	mov	r2, r0
   14320:	ldr	r3, [r7]
   14324:	ldmib	r7, {r0, r1}
   14328:	stm	sp, {r0, r1}
   1432c:	b	143f4 <__assert_fail@plt+0x341c>
   14330:	movw	r1, #23747	; 0x5cc3
   14334:	mov	r0, #0
   14338:	mov	r2, #5
   1433c:	movt	r1, #1
   14340:	bl	10e10 <dcgettext@plt>
   14344:	ldr	r3, [r7]
   14348:	mov	r2, r0
   1434c:	ldmib	r7, {r0, r1, r7}
   14350:	stm	sp, {r0, r1, r7}
   14354:	b	143f4 <__assert_fail@plt+0x341c>
   14358:	movw	r1, #23779	; 0x5ce3
   1435c:	mov	r0, #0
   14360:	mov	r2, #5
   14364:	movt	r1, #1
   14368:	bl	10e10 <dcgettext@plt>
   1436c:	ldr	r3, [r7]
   14370:	mov	r2, r0
   14374:	ldmib	r7, {r0, r1, r6, r7}
   14378:	stm	sp, {r0, r1, r6, r7}
   1437c:	b	143f4 <__assert_fail@plt+0x341c>
   14380:	movw	r1, #23815	; 0x5d07
   14384:	mov	r0, #0
   14388:	mov	r2, #5
   1438c:	movt	r1, #1
   14390:	bl	10e10 <dcgettext@plt>
   14394:	mov	r2, r0
   14398:	ldr	r3, [r7]
   1439c:	ldmib	r7, {r0, r1, r6}
   143a0:	ldr	r5, [r7, #16]
   143a4:	ldr	r7, [r7, #20]
   143a8:	stm	sp, {r0, r1, r6}
   143ac:	str	r5, [sp, #12]
   143b0:	str	r7, [sp, #16]
   143b4:	b	143f4 <__assert_fail@plt+0x341c>
   143b8:	movw	r1, #23855	; 0x5d2f
   143bc:	mov	r0, #0
   143c0:	mov	r2, #5
   143c4:	movt	r1, #1
   143c8:	bl	10e10 <dcgettext@plt>
   143cc:	mov	r2, r0
   143d0:	ldr	r3, [r7]
   143d4:	ldmib	r7, {r0, r1, r6}
   143d8:	ldr	r5, [r7, #16]
   143dc:	ldr	r4, [r7, #20]
   143e0:	ldr	r7, [r7, #24]
   143e4:	stm	sp, {r0, r1, r6}
   143e8:	str	r5, [sp, #12]
   143ec:	str	r4, [sp, #16]
   143f0:	str	r7, [sp, #20]
   143f4:	mov	r0, r8
   143f8:	mov	r1, #1
   143fc:	b	144a8 <__assert_fail@plt+0x34d0>
   14400:	movw	r1, #23947	; 0x5d8b
   14404:	movt	r1, #1
   14408:	mov	r0, #0
   1440c:	mov	r2, #5
   14410:	bl	10e10 <dcgettext@plt>
   14414:	mov	ip, r0
   14418:	ldr	r3, [r7]
   1441c:	ldr	r0, [r7, #4]
   14420:	ldr	r1, [r7, #8]
   14424:	ldr	r6, [r7, #12]
   14428:	ldr	r5, [r7, #16]
   1442c:	ldr	r4, [r7, #20]
   14430:	ldr	r2, [r7, #24]
   14434:	ldr	lr, [r7, #28]
   14438:	ldr	r7, [r7, #32]
   1443c:	stm	sp, {r0, r1, r6}
   14440:	str	r5, [sp, #12]
   14444:	str	r4, [sp, #16]
   14448:	str	r2, [sp, #20]
   1444c:	str	lr, [sp, #24]
   14450:	str	r7, [sp, #28]
   14454:	b	1449c <__assert_fail@plt+0x34c4>
   14458:	movw	r1, #23899	; 0x5d5b
   1445c:	mov	r0, #0
   14460:	mov	r2, #5
   14464:	movt	r1, #1
   14468:	bl	10e10 <dcgettext@plt>
   1446c:	mov	ip, r0
   14470:	ldr	r3, [r7]
   14474:	ldmib	r7, {r0, r1, r6}
   14478:	ldr	r5, [r7, #16]
   1447c:	ldr	r4, [r7, #20]
   14480:	ldr	r2, [r7, #24]
   14484:	ldr	r7, [r7, #28]
   14488:	stm	sp, {r0, r1, r6}
   1448c:	str	r5, [sp, #12]
   14490:	str	r4, [sp, #16]
   14494:	str	r2, [sp, #20]
   14498:	str	r7, [sp, #24]
   1449c:	mov	r0, r8
   144a0:	mov	r1, #1
   144a4:	mov	r2, ip
   144a8:	bl	10f30 <__fprintf_chk@plt>
   144ac:	sub	sp, fp, #24
   144b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144b4:	push	{r4, sl, fp, lr}
   144b8:	add	fp, sp, #8
   144bc:	sub	sp, sp, #8
   144c0:	ldr	ip, [fp, #8]
   144c4:	mov	lr, #0
   144c8:	ldr	r4, [ip, lr, lsl #2]
   144cc:	add	lr, lr, #1
   144d0:	cmp	r4, #0
   144d4:	bne	144c8 <__assert_fail@plt+0x34f0>
   144d8:	sub	r4, lr, #1
   144dc:	str	ip, [sp]
   144e0:	str	r4, [sp, #4]
   144e4:	bl	14180 <__assert_fail@plt+0x31a8>
   144e8:	sub	sp, fp, #8
   144ec:	pop	{r4, sl, fp, pc}
   144f0:	push	{fp, lr}
   144f4:	mov	fp, sp
   144f8:	sub	sp, sp, #48	; 0x30
   144fc:	ldr	ip, [fp, #8]
   14500:	ldr	lr, [ip]
   14504:	cmp	lr, #0
   14508:	str	lr, [sp, #8]
   1450c:	beq	145a8 <__assert_fail@plt+0x35d0>
   14510:	ldr	lr, [ip, #4]
   14514:	cmp	lr, #0
   14518:	str	lr, [sp, #12]
   1451c:	beq	145b0 <__assert_fail@plt+0x35d8>
   14520:	ldr	lr, [ip, #8]
   14524:	cmp	lr, #0
   14528:	str	lr, [sp, #16]
   1452c:	beq	145b8 <__assert_fail@plt+0x35e0>
   14530:	ldr	lr, [ip, #12]
   14534:	cmp	lr, #0
   14538:	str	lr, [sp, #20]
   1453c:	beq	145c0 <__assert_fail@plt+0x35e8>
   14540:	ldr	lr, [ip, #16]
   14544:	cmp	lr, #0
   14548:	str	lr, [sp, #24]
   1454c:	beq	145c8 <__assert_fail@plt+0x35f0>
   14550:	ldr	lr, [ip, #20]
   14554:	cmp	lr, #0
   14558:	str	lr, [sp, #28]
   1455c:	beq	145d0 <__assert_fail@plt+0x35f8>
   14560:	ldr	lr, [ip, #24]
   14564:	cmp	lr, #0
   14568:	str	lr, [sp, #32]
   1456c:	beq	145d8 <__assert_fail@plt+0x3600>
   14570:	ldr	lr, [ip, #28]
   14574:	cmp	lr, #0
   14578:	str	lr, [sp, #36]	; 0x24
   1457c:	beq	145e0 <__assert_fail@plt+0x3608>
   14580:	ldr	lr, [ip, #32]
   14584:	cmp	lr, #0
   14588:	str	lr, [sp, #40]	; 0x28
   1458c:	beq	145e8 <__assert_fail@plt+0x3610>
   14590:	ldr	lr, [ip, #36]	; 0x24
   14594:	mov	ip, #10
   14598:	cmp	lr, #0
   1459c:	str	lr, [sp, #44]	; 0x2c
   145a0:	movweq	ip, #9
   145a4:	b	145ec <__assert_fail@plt+0x3614>
   145a8:	mov	ip, #0
   145ac:	b	145ec <__assert_fail@plt+0x3614>
   145b0:	mov	ip, #1
   145b4:	b	145ec <__assert_fail@plt+0x3614>
   145b8:	mov	ip, #2
   145bc:	b	145ec <__assert_fail@plt+0x3614>
   145c0:	mov	ip, #3
   145c4:	b	145ec <__assert_fail@plt+0x3614>
   145c8:	mov	ip, #4
   145cc:	b	145ec <__assert_fail@plt+0x3614>
   145d0:	mov	ip, #5
   145d4:	b	145ec <__assert_fail@plt+0x3614>
   145d8:	mov	ip, #6
   145dc:	b	145ec <__assert_fail@plt+0x3614>
   145e0:	mov	ip, #7
   145e4:	b	145ec <__assert_fail@plt+0x3614>
   145e8:	mov	ip, #8
   145ec:	add	lr, sp, #8
   145f0:	str	ip, [sp, #4]
   145f4:	str	lr, [sp]
   145f8:	bl	14180 <__assert_fail@plt+0x31a8>
   145fc:	mov	sp, fp
   14600:	pop	{fp, pc}
   14604:	push	{fp, lr}
   14608:	mov	fp, sp
   1460c:	sub	sp, sp, #56	; 0x38
   14610:	add	ip, fp, #8
   14614:	str	ip, [sp, #12]
   14618:	ldr	lr, [fp, #8]
   1461c:	cmp	lr, #0
   14620:	str	lr, [sp, #16]
   14624:	beq	146c0 <__assert_fail@plt+0x36e8>
   14628:	ldr	lr, [ip, #4]
   1462c:	cmp	lr, #0
   14630:	str	lr, [sp, #20]
   14634:	beq	146c8 <__assert_fail@plt+0x36f0>
   14638:	ldr	lr, [ip, #8]
   1463c:	cmp	lr, #0
   14640:	str	lr, [sp, #24]
   14644:	beq	146d0 <__assert_fail@plt+0x36f8>
   14648:	ldr	lr, [ip, #12]
   1464c:	cmp	lr, #0
   14650:	str	lr, [sp, #28]
   14654:	beq	146d8 <__assert_fail@plt+0x3700>
   14658:	ldr	lr, [ip, #16]
   1465c:	cmp	lr, #0
   14660:	str	lr, [sp, #32]
   14664:	beq	146e0 <__assert_fail@plt+0x3708>
   14668:	ldr	lr, [ip, #20]
   1466c:	cmp	lr, #0
   14670:	str	lr, [sp, #36]	; 0x24
   14674:	beq	146e8 <__assert_fail@plt+0x3710>
   14678:	ldr	lr, [ip, #24]
   1467c:	cmp	lr, #0
   14680:	str	lr, [sp, #40]	; 0x28
   14684:	beq	146f0 <__assert_fail@plt+0x3718>
   14688:	ldr	lr, [ip, #28]
   1468c:	cmp	lr, #0
   14690:	str	lr, [sp, #44]	; 0x2c
   14694:	beq	146f8 <__assert_fail@plt+0x3720>
   14698:	ldr	lr, [ip, #32]
   1469c:	cmp	lr, #0
   146a0:	str	lr, [sp, #48]	; 0x30
   146a4:	beq	14700 <__assert_fail@plt+0x3728>
   146a8:	ldr	lr, [ip, #36]	; 0x24
   146ac:	mov	ip, #10
   146b0:	cmp	lr, #0
   146b4:	str	lr, [sp, #52]	; 0x34
   146b8:	movweq	ip, #9
   146bc:	b	14704 <__assert_fail@plt+0x372c>
   146c0:	mov	ip, #0
   146c4:	b	14704 <__assert_fail@plt+0x372c>
   146c8:	mov	ip, #1
   146cc:	b	14704 <__assert_fail@plt+0x372c>
   146d0:	mov	ip, #2
   146d4:	b	14704 <__assert_fail@plt+0x372c>
   146d8:	mov	ip, #3
   146dc:	b	14704 <__assert_fail@plt+0x372c>
   146e0:	mov	ip, #4
   146e4:	b	14704 <__assert_fail@plt+0x372c>
   146e8:	mov	ip, #5
   146ec:	b	14704 <__assert_fail@plt+0x372c>
   146f0:	mov	ip, #6
   146f4:	b	14704 <__assert_fail@plt+0x372c>
   146f8:	mov	ip, #7
   146fc:	b	14704 <__assert_fail@plt+0x372c>
   14700:	mov	ip, #8
   14704:	add	lr, sp, #16
   14708:	str	ip, [sp, #4]
   1470c:	str	lr, [sp]
   14710:	bl	14180 <__assert_fail@plt+0x31a8>
   14714:	mov	sp, fp
   14718:	pop	{fp, pc}
   1471c:	push	{fp, lr}
   14720:	mov	fp, sp
   14724:	movw	r0, #24908	; 0x614c
   14728:	movt	r0, #2
   1472c:	ldr	r1, [r0]
   14730:	movw	r0, #22086	; 0x5646
   14734:	movt	r0, #1
   14738:	bl	10da4 <fputs_unlocked@plt>
   1473c:	movw	r1, #24059	; 0x5dfb
   14740:	mov	r0, #0
   14744:	mov	r2, #5
   14748:	movt	r1, #1
   1474c:	bl	10e10 <dcgettext@plt>
   14750:	movw	r2, #24079	; 0x5e0f
   14754:	mov	r1, r0
   14758:	mov	r0, #1
   1475c:	movt	r2, #1
   14760:	bl	10f18 <__printf_chk@plt>
   14764:	movw	r1, #24101	; 0x5e25
   14768:	mov	r0, #0
   1476c:	mov	r2, #5
   14770:	movt	r1, #1
   14774:	bl	10e10 <dcgettext@plt>
   14778:	movw	r2, #21616	; 0x5470
   1477c:	movw	r3, #21895	; 0x5587
   14780:	mov	r1, r0
   14784:	mov	r0, #1
   14788:	movt	r2, #1
   1478c:	movt	r3, #1
   14790:	bl	10f18 <__printf_chk@plt>
   14794:	movw	r1, #24121	; 0x5e39
   14798:	mov	r0, #0
   1479c:	mov	r2, #5
   147a0:	movt	r1, #1
   147a4:	bl	10e10 <dcgettext@plt>
   147a8:	movw	r2, #24160	; 0x5e60
   147ac:	mov	r1, r0
   147b0:	mov	r0, #1
   147b4:	movt	r2, #1
   147b8:	pop	{fp, lr}
   147bc:	b	10f18 <__printf_chk@plt>
   147c0:	push	{r4, r5, r6, sl, fp, lr}
   147c4:	add	fp, sp, #16
   147c8:	mov	r4, r2
   147cc:	mov	r5, r1
   147d0:	mov	r6, r0
   147d4:	bl	14fb0 <__assert_fail@plt+0x3fd8>
   147d8:	cmp	r0, #0
   147dc:	popne	{r4, r5, r6, sl, fp, pc}
   147e0:	cmp	r6, #0
   147e4:	beq	147f8 <__assert_fail@plt+0x3820>
   147e8:	cmp	r5, #0
   147ec:	cmpne	r4, #0
   147f0:	bne	147f8 <__assert_fail@plt+0x3820>
   147f4:	pop	{r4, r5, r6, sl, fp, pc}
   147f8:	bl	14d74 <__assert_fail@plt+0x3d9c>
   147fc:	push	{r4, r5, r6, sl, fp, lr}
   14800:	add	fp, sp, #16
   14804:	mov	r4, r2
   14808:	mov	r5, r1
   1480c:	mov	r6, r0
   14810:	bl	14fb0 <__assert_fail@plt+0x3fd8>
   14814:	cmp	r0, #0
   14818:	popne	{r4, r5, r6, sl, fp, pc}
   1481c:	cmp	r6, #0
   14820:	beq	14834 <__assert_fail@plt+0x385c>
   14824:	cmp	r5, #0
   14828:	cmpne	r4, #0
   1482c:	bne	14834 <__assert_fail@plt+0x385c>
   14830:	pop	{r4, r5, r6, sl, fp, pc}
   14834:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14838:	push	{fp, lr}
   1483c:	mov	fp, sp
   14840:	bl	14e0c <__assert_fail@plt+0x3e34>
   14844:	cmp	r0, #0
   14848:	popne	{fp, pc}
   1484c:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14850:	push	{fp, lr}
   14854:	mov	fp, sp
   14858:	bl	14e0c <__assert_fail@plt+0x3e34>
   1485c:	cmp	r0, #0
   14860:	popne	{fp, pc}
   14864:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14868:	push	{fp, lr}
   1486c:	mov	fp, sp
   14870:	bl	14e0c <__assert_fail@plt+0x3e34>
   14874:	cmp	r0, #0
   14878:	popne	{fp, pc}
   1487c:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14880:	push	{r4, r5, fp, lr}
   14884:	add	fp, sp, #8
   14888:	mov	r4, r1
   1488c:	mov	r5, r0
   14890:	bl	14e3c <__assert_fail@plt+0x3e64>
   14894:	cmp	r0, #0
   14898:	popne	{r4, r5, fp, pc}
   1489c:	cmp	r5, #0
   148a0:	beq	148b0 <__assert_fail@plt+0x38d8>
   148a4:	cmp	r4, #0
   148a8:	bne	148b0 <__assert_fail@plt+0x38d8>
   148ac:	pop	{r4, r5, fp, pc}
   148b0:	bl	14d74 <__assert_fail@plt+0x3d9c>
   148b4:	push	{fp, lr}
   148b8:	mov	fp, sp
   148bc:	cmp	r1, #0
   148c0:	orreq	r1, r1, #1
   148c4:	bl	14e3c <__assert_fail@plt+0x3e64>
   148c8:	cmp	r0, #0
   148cc:	popne	{fp, pc}
   148d0:	bl	14d74 <__assert_fail@plt+0x3d9c>
   148d4:	push	{fp, lr}
   148d8:	mov	fp, sp
   148dc:	clz	r3, r2
   148e0:	lsr	ip, r3, #5
   148e4:	clz	r3, r1
   148e8:	lsr	r3, r3, #5
   148ec:	orrs	r3, r3, ip
   148f0:	movwne	r1, #1
   148f4:	movwne	r2, #1
   148f8:	bl	14fb0 <__assert_fail@plt+0x3fd8>
   148fc:	cmp	r0, #0
   14900:	popne	{fp, pc}
   14904:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14908:	push	{fp, lr}
   1490c:	mov	fp, sp
   14910:	mov	r2, r1
   14914:	mov	r1, r0
   14918:	mov	r0, #0
   1491c:	bl	14fb0 <__assert_fail@plt+0x3fd8>
   14920:	cmp	r0, #0
   14924:	popne	{fp, pc}
   14928:	bl	14d74 <__assert_fail@plt+0x3d9c>
   1492c:	push	{fp, lr}
   14930:	mov	fp, sp
   14934:	mov	r2, r1
   14938:	mov	r1, r0
   1493c:	clz	r0, r2
   14940:	clz	r3, r1
   14944:	lsr	r0, r0, #5
   14948:	lsr	r3, r3, #5
   1494c:	orrs	r0, r3, r0
   14950:	mov	r0, #0
   14954:	movwne	r1, #1
   14958:	movwne	r2, #1
   1495c:	bl	14fb0 <__assert_fail@plt+0x3fd8>
   14960:	cmp	r0, #0
   14964:	popne	{fp, pc}
   14968:	bl	14d74 <__assert_fail@plt+0x3d9c>
   1496c:	push	{r4, r5, r6, sl, fp, lr}
   14970:	add	fp, sp, #16
   14974:	ldr	r5, [r1]
   14978:	mov	r4, r1
   1497c:	mov	r6, r0
   14980:	cmp	r0, #0
   14984:	beq	1499c <__assert_fail@plt+0x39c4>
   14988:	mov	r0, #1
   1498c:	add	r0, r0, r5, lsr #1
   14990:	adds	r5, r5, r0
   14994:	bcc	149a4 <__assert_fail@plt+0x39cc>
   14998:	b	149e0 <__assert_fail@plt+0x3a08>
   1499c:	cmp	r5, #0
   149a0:	movweq	r5, #64	; 0x40
   149a4:	mov	r0, r6
   149a8:	mov	r1, r5
   149ac:	mov	r2, #1
   149b0:	bl	14fb0 <__assert_fail@plt+0x3fd8>
   149b4:	cmp	r5, #0
   149b8:	mov	r1, r5
   149bc:	movwne	r1, #1
   149c0:	cmp	r0, #0
   149c4:	bne	149d8 <__assert_fail@plt+0x3a00>
   149c8:	clz	r2, r6
   149cc:	lsr	r2, r2, #5
   149d0:	orrs	r1, r2, r1
   149d4:	bne	149e0 <__assert_fail@plt+0x3a08>
   149d8:	str	r5, [r4]
   149dc:	pop	{r4, r5, r6, sl, fp, pc}
   149e0:	bl	14d74 <__assert_fail@plt+0x3d9c>
   149e4:	push	{r4, r5, r6, r7, fp, lr}
   149e8:	add	fp, sp, #16
   149ec:	ldr	r5, [r1]
   149f0:	mov	r6, r2
   149f4:	mov	r4, r1
   149f8:	mov	r7, r0
   149fc:	cmp	r0, #0
   14a00:	beq	14a18 <__assert_fail@plt+0x3a40>
   14a04:	mov	r0, #1
   14a08:	add	r0, r0, r5, lsr #1
   14a0c:	adds	r5, r5, r0
   14a10:	bcc	14a30 <__assert_fail@plt+0x3a58>
   14a14:	b	14a64 <__assert_fail@plt+0x3a8c>
   14a18:	cmp	r5, #0
   14a1c:	bne	14a30 <__assert_fail@plt+0x3a58>
   14a20:	mov	r0, #64	; 0x40
   14a24:	cmp	r6, #64	; 0x40
   14a28:	udiv	r5, r0, r6
   14a2c:	addhi	r5, r5, #1
   14a30:	mov	r0, r7
   14a34:	mov	r1, r5
   14a38:	mov	r2, r6
   14a3c:	bl	14fb0 <__assert_fail@plt+0x3fd8>
   14a40:	cmp	r0, #0
   14a44:	bne	14a5c <__assert_fail@plt+0x3a84>
   14a48:	cmp	r7, #0
   14a4c:	beq	14a64 <__assert_fail@plt+0x3a8c>
   14a50:	cmp	r6, #0
   14a54:	cmpne	r5, #0
   14a58:	bne	14a64 <__assert_fail@plt+0x3a8c>
   14a5c:	str	r5, [r4]
   14a60:	pop	{r4, r5, r6, r7, fp, pc}
   14a64:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14a68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a6c:	add	fp, sp, #24
   14a70:	mov	r8, r1
   14a74:	ldr	r1, [r1]
   14a78:	mov	r5, r0
   14a7c:	add	r0, r1, r1, asr #1
   14a80:	cmp	r0, r1
   14a84:	mvnvs	r0, #-2147483648	; 0x80000000
   14a88:	cmp	r0, r3
   14a8c:	mov	r7, r0
   14a90:	movgt	r7, r3
   14a94:	cmn	r3, #1
   14a98:	movle	r7, r0
   14a9c:	ldr	r0, [fp, #8]
   14aa0:	cmn	r0, #1
   14aa4:	ble	14acc <__assert_fail@plt+0x3af4>
   14aa8:	cmp	r0, #0
   14aac:	beq	14b20 <__assert_fail@plt+0x3b48>
   14ab0:	cmn	r7, #1
   14ab4:	ble	14af4 <__assert_fail@plt+0x3b1c>
   14ab8:	mvn	r4, #-2147483648	; 0x80000000
   14abc:	udiv	r6, r4, r0
   14ac0:	cmp	r6, r7
   14ac4:	bge	14b20 <__assert_fail@plt+0x3b48>
   14ac8:	b	14b30 <__assert_fail@plt+0x3b58>
   14acc:	cmn	r7, #1
   14ad0:	ble	14b10 <__assert_fail@plt+0x3b38>
   14ad4:	cmn	r0, #1
   14ad8:	beq	14b20 <__assert_fail@plt+0x3b48>
   14adc:	mov	r6, #-2147483648	; 0x80000000
   14ae0:	mvn	r4, #-2147483648	; 0x80000000
   14ae4:	sdiv	r6, r6, r0
   14ae8:	cmp	r6, r7
   14aec:	bge	14b20 <__assert_fail@plt+0x3b48>
   14af0:	b	14b30 <__assert_fail@plt+0x3b58>
   14af4:	beq	14b20 <__assert_fail@plt+0x3b48>
   14af8:	mov	r6, #-2147483648	; 0x80000000
   14afc:	mvn	r4, #-2147483648	; 0x80000000
   14b00:	sdiv	r6, r6, r7
   14b04:	cmp	r6, r0
   14b08:	bge	14b20 <__assert_fail@plt+0x3b48>
   14b0c:	b	14b30 <__assert_fail@plt+0x3b58>
   14b10:	mvn	r4, #-2147483648	; 0x80000000
   14b14:	sdiv	r6, r4, r0
   14b18:	cmp	r7, r6
   14b1c:	blt	14b30 <__assert_fail@plt+0x3b58>
   14b20:	mul	r6, r7, r0
   14b24:	mov	r4, #64	; 0x40
   14b28:	cmp	r6, #63	; 0x3f
   14b2c:	bgt	14b38 <__assert_fail@plt+0x3b60>
   14b30:	sdiv	r7, r4, r0
   14b34:	mul	r6, r7, r0
   14b38:	cmp	r5, #0
   14b3c:	moveq	r4, #0
   14b40:	streq	r4, [r8]
   14b44:	sub	r4, r7, r1
   14b48:	cmp	r4, r2
   14b4c:	bge	14bf8 <__assert_fail@plt+0x3c20>
   14b50:	add	r7, r1, r2
   14b54:	mov	r6, #0
   14b58:	mov	r2, #0
   14b5c:	cmp	r7, r3
   14b60:	movwgt	r6, #1
   14b64:	cmn	r3, #1
   14b68:	movwgt	r2, #1
   14b6c:	cmp	r7, r1
   14b70:	bvs	14c2c <__assert_fail@plt+0x3c54>
   14b74:	ands	r1, r2, r6
   14b78:	bne	14c2c <__assert_fail@plt+0x3c54>
   14b7c:	cmn	r0, #1
   14b80:	ble	14ba8 <__assert_fail@plt+0x3bd0>
   14b84:	cmp	r0, #0
   14b88:	beq	14bf4 <__assert_fail@plt+0x3c1c>
   14b8c:	cmn	r7, #1
   14b90:	ble	14bcc <__assert_fail@plt+0x3bf4>
   14b94:	mvn	r1, #-2147483648	; 0x80000000
   14b98:	udiv	r1, r1, r0
   14b9c:	cmp	r1, r7
   14ba0:	bge	14bf4 <__assert_fail@plt+0x3c1c>
   14ba4:	b	14c2c <__assert_fail@plt+0x3c54>
   14ba8:	cmn	r7, #1
   14bac:	ble	14be4 <__assert_fail@plt+0x3c0c>
   14bb0:	cmn	r0, #1
   14bb4:	beq	14bf4 <__assert_fail@plt+0x3c1c>
   14bb8:	mov	r1, #-2147483648	; 0x80000000
   14bbc:	sdiv	r1, r1, r0
   14bc0:	cmp	r1, r7
   14bc4:	bge	14bf4 <__assert_fail@plt+0x3c1c>
   14bc8:	b	14c2c <__assert_fail@plt+0x3c54>
   14bcc:	beq	14bf4 <__assert_fail@plt+0x3c1c>
   14bd0:	mov	r1, #-2147483648	; 0x80000000
   14bd4:	sdiv	r1, r1, r7
   14bd8:	cmp	r1, r0
   14bdc:	bge	14bf4 <__assert_fail@plt+0x3c1c>
   14be0:	b	14c2c <__assert_fail@plt+0x3c54>
   14be4:	mvn	r1, #-2147483648	; 0x80000000
   14be8:	sdiv	r1, r1, r0
   14bec:	cmp	r7, r1
   14bf0:	blt	14c2c <__assert_fail@plt+0x3c54>
   14bf4:	mul	r6, r7, r0
   14bf8:	mov	r0, r5
   14bfc:	mov	r1, r6
   14c00:	bl	14e3c <__assert_fail@plt+0x3e64>
   14c04:	cmp	r6, #0
   14c08:	movwne	r6, #1
   14c0c:	cmp	r0, #0
   14c10:	bne	14c24 <__assert_fail@plt+0x3c4c>
   14c14:	clz	r1, r5
   14c18:	lsr	r1, r1, #5
   14c1c:	orrs	r1, r1, r6
   14c20:	bne	14c2c <__assert_fail@plt+0x3c54>
   14c24:	str	r7, [r8]
   14c28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c2c:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14c30:	push	{fp, lr}
   14c34:	mov	fp, sp
   14c38:	mov	r1, #1
   14c3c:	bl	14db8 <__assert_fail@plt+0x3de0>
   14c40:	cmp	r0, #0
   14c44:	popne	{fp, pc}
   14c48:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14c4c:	push	{fp, lr}
   14c50:	mov	fp, sp
   14c54:	bl	14db8 <__assert_fail@plt+0x3de0>
   14c58:	cmp	r0, #0
   14c5c:	popne	{fp, pc}
   14c60:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14c64:	push	{fp, lr}
   14c68:	mov	fp, sp
   14c6c:	mov	r1, #1
   14c70:	bl	14db8 <__assert_fail@plt+0x3de0>
   14c74:	cmp	r0, #0
   14c78:	popne	{fp, pc}
   14c7c:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14c80:	push	{fp, lr}
   14c84:	mov	fp, sp
   14c88:	bl	14db8 <__assert_fail@plt+0x3de0>
   14c8c:	cmp	r0, #0
   14c90:	popne	{fp, pc}
   14c94:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14c98:	push	{r4, r5, fp, lr}
   14c9c:	add	fp, sp, #8
   14ca0:	mov	r5, r0
   14ca4:	mov	r0, r1
   14ca8:	mov	r4, r1
   14cac:	bl	14e0c <__assert_fail@plt+0x3e34>
   14cb0:	cmp	r0, #0
   14cb4:	beq	14cc8 <__assert_fail@plt+0x3cf0>
   14cb8:	mov	r1, r5
   14cbc:	mov	r2, r4
   14cc0:	pop	{r4, r5, fp, lr}
   14cc4:	b	10df8 <memcpy@plt>
   14cc8:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14ccc:	push	{r4, r5, fp, lr}
   14cd0:	add	fp, sp, #8
   14cd4:	mov	r5, r0
   14cd8:	mov	r0, r1
   14cdc:	mov	r4, r1
   14ce0:	bl	14e0c <__assert_fail@plt+0x3e34>
   14ce4:	cmp	r0, #0
   14ce8:	beq	14cfc <__assert_fail@plt+0x3d24>
   14cec:	mov	r1, r5
   14cf0:	mov	r2, r4
   14cf4:	pop	{r4, r5, fp, lr}
   14cf8:	b	10df8 <memcpy@plt>
   14cfc:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14d00:	push	{r4, r5, fp, lr}
   14d04:	add	fp, sp, #8
   14d08:	mov	r5, r0
   14d0c:	add	r0, r1, #1
   14d10:	mov	r4, r1
   14d14:	bl	14e0c <__assert_fail@plt+0x3e34>
   14d18:	cmp	r0, #0
   14d1c:	beq	14d38 <__assert_fail@plt+0x3d60>
   14d20:	mov	r1, #0
   14d24:	mov	r2, r4
   14d28:	strb	r1, [r0, r4]
   14d2c:	mov	r1, r5
   14d30:	pop	{r4, r5, fp, lr}
   14d34:	b	10df8 <memcpy@plt>
   14d38:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14d3c:	push	{r4, r5, fp, lr}
   14d40:	add	fp, sp, #8
   14d44:	mov	r4, r0
   14d48:	bl	10ee8 <strlen@plt>
   14d4c:	add	r5, r0, #1
   14d50:	mov	r0, r5
   14d54:	bl	14e0c <__assert_fail@plt+0x3e34>
   14d58:	cmp	r0, #0
   14d5c:	beq	14d70 <__assert_fail@plt+0x3d98>
   14d60:	mov	r1, r4
   14d64:	mov	r2, r5
   14d68:	pop	{r4, r5, fp, lr}
   14d6c:	b	10df8 <memcpy@plt>
   14d70:	bl	14d74 <__assert_fail@plt+0x3d9c>
   14d74:	push	{fp, lr}
   14d78:	mov	fp, sp
   14d7c:	movw	r0, #24812	; 0x60ec
   14d80:	movw	r1, #24236	; 0x5eac
   14d84:	mov	r2, #5
   14d88:	movt	r0, #2
   14d8c:	movt	r1, #1
   14d90:	ldr	r4, [r0]
   14d94:	mov	r0, #0
   14d98:	bl	10e10 <dcgettext@plt>
   14d9c:	movw	r2, #22509	; 0x57ed
   14da0:	mov	r3, r0
   14da4:	mov	r0, r4
   14da8:	mov	r1, #0
   14dac:	movt	r2, #1
   14db0:	bl	10e7c <error@plt>
   14db4:	bl	10fc0 <abort@plt>
   14db8:	clz	r2, r1
   14dbc:	clz	r3, r0
   14dc0:	lsr	r2, r2, #5
   14dc4:	lsr	r3, r3, #5
   14dc8:	orrs	r2, r3, r2
   14dcc:	movwne	r1, #1
   14dd0:	movwne	r0, #1
   14dd4:	cmp	r1, #0
   14dd8:	beq	14e08 <__assert_fail@plt+0x3e30>
   14ddc:	mvn	r2, #-2147483648	; 0x80000000
   14de0:	udiv	r2, r2, r1
   14de4:	cmp	r2, r0
   14de8:	bcs	14e08 <__assert_fail@plt+0x3e30>
   14dec:	push	{fp, lr}
   14df0:	mov	fp, sp
   14df4:	bl	10ef4 <__errno_location@plt>
   14df8:	mov	r1, #12
   14dfc:	str	r1, [r0]
   14e00:	mov	r0, #0
   14e04:	pop	{fp, pc}
   14e08:	b	10d98 <calloc@plt>
   14e0c:	cmp	r0, #0
   14e10:	movweq	r0, #1
   14e14:	cmn	r0, #1
   14e18:	ble	14e20 <__assert_fail@plt+0x3e48>
   14e1c:	b	10e88 <malloc@plt>
   14e20:	push	{fp, lr}
   14e24:	mov	fp, sp
   14e28:	bl	10ef4 <__errno_location@plt>
   14e2c:	mov	r1, #12
   14e30:	str	r1, [r0]
   14e34:	mov	r0, #0
   14e38:	pop	{fp, pc}
   14e3c:	push	{fp, lr}
   14e40:	mov	fp, sp
   14e44:	cmp	r0, #0
   14e48:	beq	14e64 <__assert_fail@plt+0x3e8c>
   14e4c:	cmp	r1, #0
   14e50:	beq	14e70 <__assert_fail@plt+0x3e98>
   14e54:	cmn	r1, #1
   14e58:	ble	14e7c <__assert_fail@plt+0x3ea4>
   14e5c:	pop	{fp, lr}
   14e60:	b	10e1c <realloc@plt>
   14e64:	mov	r0, r1
   14e68:	pop	{fp, lr}
   14e6c:	b	14e0c <__assert_fail@plt+0x3e34>
   14e70:	bl	12310 <__assert_fail@plt+0x1338>
   14e74:	mov	r0, #0
   14e78:	pop	{fp, pc}
   14e7c:	bl	10ef4 <__errno_location@plt>
   14e80:	mov	r1, #12
   14e84:	str	r1, [r0]
   14e88:	mov	r0, #0
   14e8c:	pop	{fp, pc}
   14e90:	push	{r4, r5, r6, sl, fp, lr}
   14e94:	add	fp, sp, #16
   14e98:	mov	r4, r0
   14e9c:	bl	10e64 <__fpending@plt>
   14ea0:	ldr	r6, [r4]
   14ea4:	mov	r5, r0
   14ea8:	mov	r0, r4
   14eac:	bl	12218 <__assert_fail@plt+0x1240>
   14eb0:	tst	r6, #32
   14eb4:	bne	14eec <__assert_fail@plt+0x3f14>
   14eb8:	cmp	r0, #0
   14ebc:	mov	r4, r0
   14ec0:	mvnne	r4, #0
   14ec4:	cmp	r5, #0
   14ec8:	bne	14ef8 <__assert_fail@plt+0x3f20>
   14ecc:	cmp	r0, #0
   14ed0:	beq	14ef8 <__assert_fail@plt+0x3f20>
   14ed4:	bl	10ef4 <__errno_location@plt>
   14ed8:	ldr	r0, [r0]
   14edc:	subs	r4, r0, #9
   14ee0:	mvnne	r4, #0
   14ee4:	mov	r0, r4
   14ee8:	pop	{r4, r5, r6, sl, fp, pc}
   14eec:	mvn	r4, #0
   14ef0:	cmp	r0, #0
   14ef4:	beq	14f00 <__assert_fail@plt+0x3f28>
   14ef8:	mov	r0, r4
   14efc:	pop	{r4, r5, r6, sl, fp, pc}
   14f00:	bl	10ef4 <__errno_location@plt>
   14f04:	mov	r1, #0
   14f08:	str	r1, [r0]
   14f0c:	mov	r0, r4
   14f10:	pop	{r4, r5, r6, sl, fp, pc}
   14f14:	push	{fp, lr}
   14f18:	mov	fp, sp
   14f1c:	mov	r0, #14
   14f20:	bl	10f84 <nl_langinfo@plt>
   14f24:	movw	r1, #22087	; 0x5647
   14f28:	cmp	r0, #0
   14f2c:	movt	r1, #1
   14f30:	movne	r1, r0
   14f34:	movw	r0, #24253	; 0x5ebd
   14f38:	ldrb	r2, [r1]
   14f3c:	movt	r0, #1
   14f40:	cmp	r2, #0
   14f44:	movne	r0, r1
   14f48:	pop	{fp, pc}
   14f4c:	push	{r4, r5, r6, r7, fp, lr}
   14f50:	add	fp, sp, #16
   14f54:	sub	sp, sp, #8
   14f58:	cmp	r0, #0
   14f5c:	add	r5, sp, #4
   14f60:	mov	r7, r2
   14f64:	mov	r4, r1
   14f68:	movne	r5, r0
   14f6c:	mov	r0, r5
   14f70:	bl	10e70 <mbrtowc@plt>
   14f74:	mov	r6, r0
   14f78:	cmp	r7, #0
   14f7c:	beq	14fa4 <__assert_fail@plt+0x3fcc>
   14f80:	cmn	r6, #2
   14f84:	bcc	14fa4 <__assert_fail@plt+0x3fcc>
   14f88:	mov	r0, #0
   14f8c:	bl	14fec <__assert_fail@plt+0x4014>
   14f90:	cmp	r0, #0
   14f94:	bne	14fa4 <__assert_fail@plt+0x3fcc>
   14f98:	ldrb	r0, [r4]
   14f9c:	mov	r6, #1
   14fa0:	str	r0, [r5]
   14fa4:	mov	r0, r6
   14fa8:	sub	sp, fp, #16
   14fac:	pop	{r4, r5, r6, r7, fp, pc}
   14fb0:	cmp	r2, #0
   14fb4:	beq	14fe4 <__assert_fail@plt+0x400c>
   14fb8:	mvn	r3, #0
   14fbc:	udiv	r3, r3, r2
   14fc0:	cmp	r3, r1
   14fc4:	bcs	14fe4 <__assert_fail@plt+0x400c>
   14fc8:	push	{fp, lr}
   14fcc:	mov	fp, sp
   14fd0:	bl	10ef4 <__errno_location@plt>
   14fd4:	mov	r1, #12
   14fd8:	str	r1, [r0]
   14fdc:	mov	r0, #0
   14fe0:	pop	{fp, pc}
   14fe4:	mul	r1, r2, r1
   14fe8:	b	14e3c <__assert_fail@plt+0x3e64>
   14fec:	push	{r4, sl, fp, lr}
   14ff0:	add	fp, sp, #8
   14ff4:	sub	sp, sp, #264	; 0x108
   14ff8:	add	r1, sp, #7
   14ffc:	movw	r2, #257	; 0x101
   15000:	bl	15058 <__assert_fail@plt+0x4080>
   15004:	mov	r4, #0
   15008:	cmp	r0, #0
   1500c:	bne	1504c <__assert_fail@plt+0x4074>
   15010:	movw	r1, #24259	; 0x5ec3
   15014:	add	r0, sp, #7
   15018:	mov	r2, #2
   1501c:	movt	r1, #1
   15020:	bl	10edc <bcmp@plt>
   15024:	cmp	r0, #0
   15028:	beq	1504c <__assert_fail@plt+0x4074>
   1502c:	movw	r1, #24261	; 0x5ec5
   15030:	add	r0, sp, #7
   15034:	mov	r2, #6
   15038:	movt	r1, #1
   1503c:	bl	10edc <bcmp@plt>
   15040:	cmp	r0, #0
   15044:	mov	r4, r0
   15048:	movwne	r4, #1
   1504c:	mov	r0, r4
   15050:	sub	sp, fp, #8
   15054:	pop	{r4, sl, fp, pc}
   15058:	push	{r4, r5, r6, r7, fp, lr}
   1505c:	add	fp, sp, #16
   15060:	mov	r4, r1
   15064:	mov	r1, #0
   15068:	mov	r6, r2
   1506c:	bl	10f6c <setlocale@plt>
   15070:	cmp	r0, #0
   15074:	beq	150a4 <__assert_fail@plt+0x40cc>
   15078:	mov	r7, r0
   1507c:	bl	10ee8 <strlen@plt>
   15080:	cmp	r0, r6
   15084:	bcs	150c0 <__assert_fail@plt+0x40e8>
   15088:	add	r2, r0, #1
   1508c:	mov	r0, r4
   15090:	mov	r1, r7
   15094:	bl	10df8 <memcpy@plt>
   15098:	mov	r5, #0
   1509c:	mov	r0, r5
   150a0:	pop	{r4, r5, r6, r7, fp, pc}
   150a4:	mov	r5, #22
   150a8:	cmp	r6, #0
   150ac:	beq	150e8 <__assert_fail@plt+0x4110>
   150b0:	mov	r0, #0
   150b4:	strb	r0, [r4]
   150b8:	mov	r0, r5
   150bc:	pop	{r4, r5, r6, r7, fp, pc}
   150c0:	mov	r5, #34	; 0x22
   150c4:	cmp	r6, #0
   150c8:	beq	150e8 <__assert_fail@plt+0x4110>
   150cc:	sub	r6, r6, #1
   150d0:	mov	r0, r4
   150d4:	mov	r1, r7
   150d8:	mov	r2, r6
   150dc:	bl	10df8 <memcpy@plt>
   150e0:	mov	r0, #0
   150e4:	strb	r0, [r4, r6]
   150e8:	mov	r0, r5
   150ec:	pop	{r4, r5, r6, r7, fp, pc}
   150f0:	mov	r1, #0
   150f4:	b	10f6c <setlocale@plt>
   150f8:	cmp	r3, #0
   150fc:	cmpeq	r2, #0
   15100:	bne	15118 <__assert_fail@plt+0x4140>
   15104:	cmp	r1, #0
   15108:	cmpeq	r0, #0
   1510c:	mvnne	r1, #0
   15110:	mvnne	r0, #0
   15114:	b	15134 <__assert_fail@plt+0x415c>
   15118:	sub	sp, sp, #8
   1511c:	push	{sp, lr}
   15120:	bl	15144 <__assert_fail@plt+0x416c>
   15124:	ldr	lr, [sp, #4]
   15128:	add	sp, sp, #8
   1512c:	pop	{r2, r3}
   15130:	bx	lr
   15134:	push	{r1, lr}
   15138:	mov	r0, #8
   1513c:	bl	10db0 <raise@plt>
   15140:	pop	{r1, pc}
   15144:	cmp	r1, r3
   15148:	cmpeq	r0, r2
   1514c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15150:	mov	r4, r0
   15154:	movcc	r0, #0
   15158:	mov	r5, r1
   1515c:	ldr	lr, [sp, #36]	; 0x24
   15160:	movcc	r1, r0
   15164:	bcc	15260 <__assert_fail@plt+0x4288>
   15168:	cmp	r3, #0
   1516c:	clzeq	ip, r2
   15170:	clzne	ip, r3
   15174:	addeq	ip, ip, #32
   15178:	cmp	r5, #0
   1517c:	clzeq	r1, r4
   15180:	addeq	r1, r1, #32
   15184:	clzne	r1, r5
   15188:	sub	ip, ip, r1
   1518c:	sub	sl, ip, #32
   15190:	lsl	r9, r3, ip
   15194:	rsb	fp, ip, #32
   15198:	orr	r9, r9, r2, lsl sl
   1519c:	orr	r9, r9, r2, lsr fp
   151a0:	lsl	r8, r2, ip
   151a4:	cmp	r5, r9
   151a8:	cmpeq	r4, r8
   151ac:	movcc	r0, #0
   151b0:	movcc	r1, r0
   151b4:	bcc	151d0 <__assert_fail@plt+0x41f8>
   151b8:	mov	r0, #1
   151bc:	subs	r4, r4, r8
   151c0:	lsl	r1, r0, sl
   151c4:	orr	r1, r1, r0, lsr fp
   151c8:	lsl	r0, r0, ip
   151cc:	sbc	r5, r5, r9
   151d0:	cmp	ip, #0
   151d4:	beq	15260 <__assert_fail@plt+0x4288>
   151d8:	lsr	r6, r8, #1
   151dc:	orr	r6, r6, r9, lsl #31
   151e0:	lsr	r7, r9, #1
   151e4:	mov	r2, ip
   151e8:	b	1520c <__assert_fail@plt+0x4234>
   151ec:	subs	r3, r4, r6
   151f0:	sbc	r8, r5, r7
   151f4:	adds	r3, r3, r3
   151f8:	adc	r8, r8, r8
   151fc:	adds	r4, r3, #1
   15200:	adc	r5, r8, #0
   15204:	subs	r2, r2, #1
   15208:	beq	15228 <__assert_fail@plt+0x4250>
   1520c:	cmp	r5, r7
   15210:	cmpeq	r4, r6
   15214:	bcs	151ec <__assert_fail@plt+0x4214>
   15218:	adds	r4, r4, r4
   1521c:	adc	r5, r5, r5
   15220:	subs	r2, r2, #1
   15224:	bne	1520c <__assert_fail@plt+0x4234>
   15228:	lsr	r3, r4, ip
   1522c:	orr	r3, r3, r5, lsl fp
   15230:	lsr	r2, r5, ip
   15234:	orr	r3, r3, r5, lsr sl
   15238:	adds	r0, r0, r4
   1523c:	mov	r4, r3
   15240:	lsl	r3, r2, ip
   15244:	orr	r3, r3, r4, lsl sl
   15248:	lsl	ip, r4, ip
   1524c:	orr	r3, r3, r4, lsr fp
   15250:	adc	r1, r1, r5
   15254:	subs	r0, r0, ip
   15258:	mov	r5, r2
   1525c:	sbc	r1, r1, r3
   15260:	cmp	lr, #0
   15264:	strdne	r4, [lr]
   15268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1526c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15270:	mov	r7, r0
   15274:	ldr	r6, [pc, #72]	; 152c4 <__assert_fail@plt+0x42ec>
   15278:	ldr	r5, [pc, #72]	; 152c8 <__assert_fail@plt+0x42f0>
   1527c:	add	r6, pc, r6
   15280:	add	r5, pc, r5
   15284:	sub	r6, r6, r5
   15288:	mov	r8, r1
   1528c:	mov	r9, r2
   15290:	bl	10d78 <calloc@plt-0x20>
   15294:	asrs	r6, r6, #2
   15298:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1529c:	mov	r4, #0
   152a0:	add	r4, r4, #1
   152a4:	ldr	r3, [r5], #4
   152a8:	mov	r2, r9
   152ac:	mov	r1, r8
   152b0:	mov	r0, r7
   152b4:	blx	r3
   152b8:	cmp	r6, r4
   152bc:	bne	152a0 <__assert_fail@plt+0x42c8>
   152c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152c4:	andeq	r0, r1, r8, lsl #25
   152c8:	andeq	r0, r1, r0, lsl #25
   152cc:	bx	lr
   152d0:	ldr	r3, [pc, #12]	; 152e4 <__assert_fail@plt+0x430c>
   152d4:	mov	r1, #0
   152d8:	add	r3, pc, r3
   152dc:	ldr	r2, [r3]
   152e0:	b	10f00 <__cxa_atexit@plt>
   152e4:	strdeq	r0, [r1], -ip

Disassembly of section .fini:

000152e8 <.fini>:
   152e8:	push	{r3, lr}
   152ec:	pop	{r3, pc}
