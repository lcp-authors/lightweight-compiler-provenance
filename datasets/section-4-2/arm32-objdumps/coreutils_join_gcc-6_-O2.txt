
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010e14 <.init>:
   10e14:	push	{r3, lr}
   10e18:	bl	11e04 <__assert_fail@plt+0xd18>
   10e1c:	pop	{r3, pc}

Disassembly of section .plt:

00010e20 <fdopen@plt-0x14>:
   10e20:	push	{lr}		; (str lr, [sp, #-4]!)
   10e24:	ldr	lr, [pc, #4]	; 10e30 <fdopen@plt-0x4>
   10e28:	add	lr, pc, lr
   10e2c:	ldr	pc, [lr, #8]!
   10e30:	ldrdeq	r8, [r1], -r0

00010e34 <fdopen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #456]!	; 0x1c8

00010e4c <fputs_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #448]!	; 0x1c0

00010e58 <raise@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #440]!	; 0x1b8

00010e64 <strcmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e70 <posix_fadvise64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #424]!	; 0x1a8

00010e7c <fflush@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #416]!	; 0x1a0

00010e88 <free@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #408]!	; 0x198

00010e94 <_exit@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #400]!	; 0x190

00010ea0 <memcpy@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #392]!	; 0x188

00010eac <__strtoull_internal@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #384]!	; 0x180

00010eb8 <mbsinit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #376]!	; 0x178

00010ec4 <fwrite_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #368]!	; 0x170

00010ed0 <memcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #360]!	; 0x168

00010edc <fputc_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #352]!	; 0x160

00010ee8 <dcgettext@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #344]!	; 0x158

00010ef4 <realloc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #336]!	; 0x150

00010f00 <textdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #328]!	; 0x148

00010f0c <iswprint@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #320]!	; 0x140

00010f18 <fwrite@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #312]!	; 0x138

00010f24 <lseek64@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #304]!	; 0x130

00010f30 <__ctype_get_mb_cur_max@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #296]!	; 0x128

00010f3c <__fpending@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #288]!	; 0x120

00010f48 <mbrtowc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #280]!	; 0x118

00010f54 <error@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #272]!	; 0x110

00010f60 <strcoll@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #264]!	; 0x108

00010f6c <malloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #256]!	; 0x100

00010f78 <__libc_start_main@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #248]!	; 0xf8

00010f84 <__freading@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #240]!	; 0xf0

00010f90 <__ctype_toupper_loc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #232]!	; 0xe8

00010f9c <__gmon_start__@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #224]!	; 0xe0

00010fa8 <getopt_long@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #216]!	; 0xd8

00010fb4 <__ctype_b_loc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #208]!	; 0xd0

00010fc0 <exit@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #200]!	; 0xc8

00010fcc <strtoul@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #192]!	; 0xc0

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #184]!	; 0xb8

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #176]!	; 0xb0

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #24, 20	; 0x18000
   10ff8:	ldr	pc, [ip, #168]!	; 0xa8

00010ffc <__cxa_atexit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #24, 20	; 0x18000
   11004:	ldr	pc, [ip, #160]!	; 0xa0

00011008 <memset@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #24, 20	; 0x18000
   11010:	ldr	pc, [ip, #152]!	; 0x98

00011014 <__printf_chk@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #144]!	; 0x90

00011020 <fileno@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #136]!	; 0x88

0001102c <__fprintf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #128]!	; 0x80

00011038 <memchr@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #120]!	; 0x78

00011044 <fclose@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #112]!	; 0x70

00011050 <fseeko64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #104]!	; 0x68

0001105c <fcntl64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #96]!	; 0x60

00011068 <__uflow@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #88]!	; 0x58

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #80]!	; 0x50

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #72]!	; 0x48

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #64]!	; 0x40

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #56]!	; 0x38

000110a4 <fopen64@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #48]!	; 0x30

000110b0 <strpbrk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #40]!	; 0x28

000110bc <bindtextdomain@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #32]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #24]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #16]!

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #8]!

000110ec <__assert_fail@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #0]!

Disassembly of section .text:

000110f8 <.text>:
   110f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110fc:	sub	sp, sp, #76	; 0x4c
   11100:	mov	r4, #0
   11104:	mov	r7, r0
   11108:	ldr	r0, [r1]
   1110c:	mov	r6, r1
   11110:	str	r4, [sp, #20]
   11114:	str	r4, [sp, #40]	; 0x28
   11118:	str	r4, [sp, #44]	; 0x2c
   1111c:	str	r4, [sp, #24]
   11120:	bl	134a4 <__assert_fail@plt+0x23b8>
   11124:	ldr	r1, [pc, #3092]	; 11d40 <__assert_fail@plt+0xc54>
   11128:	mov	r0, #6
   1112c:	bl	11080 <setlocale@plt>
   11130:	ldr	r1, [pc, #3084]	; 11d44 <__assert_fail@plt+0xc58>
   11134:	ldr	r0, [pc, #3084]	; 11d48 <__assert_fail@plt+0xc5c>
   11138:	bl	110bc <bindtextdomain@plt>
   1113c:	ldr	r0, [pc, #3076]	; 11d48 <__assert_fail@plt+0xc5c>
   11140:	bl	10f00 <textdomain@plt>
   11144:	mov	r0, #3
   11148:	bl	132c4 <__assert_fail@plt+0x21d8>
   1114c:	ldr	r5, [pc, #3064]	; 11d4c <__assert_fail@plt+0xc60>
   11150:	ldr	fp, [pc, #3064]	; 11d50 <__assert_fail@plt+0xc64>
   11154:	ldr	r9, [pc, #3064]	; 11d54 <__assert_fail@plt+0xc68>
   11158:	ldr	r8, [pc, #3064]	; 11d58 <__assert_fail@plt+0xc6c>
   1115c:	ldr	sl, [pc, #3064]	; 11d5c <__assert_fail@plt+0xc70>
   11160:	strb	r0, [r5, #9]
   11164:	ldr	r0, [pc, #3060]	; 11d60 <__assert_fail@plt+0xc74>
   11168:	bl	176f8 <__assert_fail@plt+0x660c>
   1116c:	ldr	r0, [pc, #3056]	; 11d64 <__assert_fail@plt+0xc78>
   11170:	bl	176f8 <__assert_fail@plt+0x660c>
   11174:	mov	r3, #1
   11178:	strb	r4, [r5, #92]	; 0x5c
   1117c:	strb	r4, [r5, #97]	; 0x61
   11180:	strb	r4, [r5, #96]	; 0x60
   11184:	str	r4, [r5, #88]	; 0x58
   11188:	strb	r3, [r5, #108]	; 0x6c
   1118c:	mov	r4, #0
   11190:	str	r4, [sp]
   11194:	mov	r3, r9
   11198:	mov	r2, r8
   1119c:	mov	r1, r6
   111a0:	mov	r0, r7
   111a4:	bl	10fa8 <getopt_long@plt>
   111a8:	cmn	r0, #1
   111ac:	beq	11498 <__assert_fail@plt+0x3ac>
   111b0:	cmp	r0, #105	; 0x69
   111b4:	str	r4, [sp, #16]
   111b8:	beq	11430 <__assert_fail@plt+0x344>
   111bc:	ble	111fc <__assert_fail@plt+0x110>
   111c0:	cmp	r0, #118	; 0x76
   111c4:	beq	112bc <__assert_fail@plt+0x1d0>
   111c8:	ble	11250 <__assert_fail@plt+0x164>
   111cc:	cmp	r0, #256	; 0x100
   111d0:	beq	113c8 <__assert_fail@plt+0x2dc>
   111d4:	ble	113b8 <__assert_fail@plt+0x2cc>
   111d8:	ldr	r3, [pc, #2952]	; 11d68 <__assert_fail@plt+0xc7c>
   111dc:	cmp	r0, r3
   111e0:	beq	113ac <__assert_fail@plt+0x2c0>
   111e4:	add	r3, r3, #1
   111e8:	cmp	r0, r3
   111ec:	bne	112b4 <__assert_fail@plt+0x1c8>
   111f0:	mov	r3, #1
   111f4:	strb	r3, [r5, #111]	; 0x6f
   111f8:	b	11304 <__assert_fail@plt+0x218>
   111fc:	cmp	r0, #49	; 0x31
   11200:	beq	11418 <__assert_fail@plt+0x32c>
   11204:	bgt	1129c <__assert_fail@plt+0x1b0>
   11208:	cmn	r0, #2
   1120c:	beq	11410 <__assert_fail@plt+0x324>
   11210:	cmp	r0, #1
   11214:	beq	11384 <__assert_fail@plt+0x298>
   11218:	cmn	r0, #3
   1121c:	bne	112b4 <__assert_fail@plt+0x1c8>
   11220:	ldr	r1, [pc, #2884]	; 11d6c <__assert_fail@plt+0xc80>
   11224:	ldr	r3, [pc, #2884]	; 11d70 <__assert_fail@plt+0xc84>
   11228:	ldr	r2, [pc, #2884]	; 11d74 <__assert_fail@plt+0xc88>
   1122c:	str	r4, [sp, #4]
   11230:	ldr	r0, [r1]
   11234:	ldr	r3, [r3]
   11238:	ldr	r1, [pc, #2872]	; 11d78 <__assert_fail@plt+0xc8c>
   1123c:	str	r2, [sp]
   11240:	ldr	r2, [pc, #2868]	; 11d7c <__assert_fail@plt+0xc90>
   11244:	bl	15844 <__assert_fail@plt+0x4758>
   11248:	mov	r0, r4
   1124c:	bl	10fc0 <exit@plt>
   11250:	cmp	r0, #111	; 0x6f
   11254:	beq	113d4 <__assert_fail@plt+0x2e8>
   11258:	cmp	r0, #116	; 0x74
   1125c:	beq	11310 <__assert_fail@plt+0x224>
   11260:	cmp	r0, #106	; 0x6a
   11264:	bne	112b4 <__assert_fail@plt+0x1c8>
   11268:	ldr	r0, [sl]
   1126c:	ldrb	r3, [r0]
   11270:	sub	r2, r3, #49	; 0x31
   11274:	cmp	r2, #1
   11278:	bls	11444 <__assert_fail@plt+0x358>
   1127c:	bl	12060 <__assert_fail@plt+0xf74>
   11280:	mov	r1, r0
   11284:	ldr	r0, [pc, #2804]	; 11d80 <__assert_fail@plt+0xc94>
   11288:	bl	11ef0 <__assert_fail@plt+0xe04>
   1128c:	ldr	r1, [fp, #12]
   11290:	ldr	r0, [pc, #2796]	; 11d84 <__assert_fail@plt+0xc98>
   11294:	bl	11ef0 <__assert_fail@plt+0xe04>
   11298:	b	11304 <__assert_fail@plt+0x218>
   1129c:	cmp	r0, #97	; 0x61
   112a0:	beq	112c0 <__assert_fail@plt+0x1d4>
   112a4:	cmp	r0, #101	; 0x65
   112a8:	beq	1135c <__assert_fail@plt+0x270>
   112ac:	cmp	r0, #50	; 0x32
   112b0:	beq	113f8 <__assert_fail@plt+0x30c>
   112b4:	mov	r0, #1
   112b8:	bl	12a2c <__assert_fail@plt+0x1940>
   112bc:	strb	r4, [r5, #108]	; 0x6c
   112c0:	ldr	r2, [pc, #2680]	; 11d40 <__assert_fail@plt+0xc54>
   112c4:	add	r3, sp, #60	; 0x3c
   112c8:	str	r2, [sp]
   112cc:	mov	r1, #0
   112d0:	mov	r2, #10
   112d4:	ldr	r0, [sl]
   112d8:	bl	160e0 <__assert_fail@plt+0x4ff4>
   112dc:	cmp	r0, #0
   112e0:	bne	11c64 <__assert_fail@plt+0xb78>
   112e4:	ldr	r3, [sp, #60]	; 0x3c
   112e8:	sub	r2, r3, #1
   112ec:	cmp	r2, #1
   112f0:	bhi	11c64 <__assert_fail@plt+0xb78>
   112f4:	cmp	r3, #1
   112f8:	movne	r3, #1
   112fc:	strbeq	r3, [r5, #109]	; 0x6d
   11300:	strbne	r3, [r5, #110]	; 0x6e
   11304:	ldr	r3, [sp, #16]
   11308:	str	r3, [sp, #20]
   1130c:	b	1118c <__assert_fail@plt+0xa0>
   11310:	ldr	r0, [sl]
   11314:	ldrb	r3, [r0]
   11318:	cmp	r3, #0
   1131c:	beq	1143c <__assert_fail@plt+0x350>
   11320:	ldrb	r2, [r0, #1]
   11324:	cmp	r2, #0
   11328:	beq	11340 <__assert_fail@plt+0x254>
   1132c:	ldr	r1, [pc, #2644]	; 11d88 <__assert_fail@plt+0xc9c>
   11330:	bl	10e64 <strcmp@plt>
   11334:	cmp	r0, #0
   11338:	bne	11cd8 <__assert_fail@plt+0xbec>
   1133c:	mov	r3, #0
   11340:	ldr	r2, [fp, #4]
   11344:	cmp	r2, #0
   11348:	blt	11354 <__assert_fail@plt+0x268>
   1134c:	cmp	r2, r3
   11350:	bne	11ccc <__assert_fail@plt+0xbe0>
   11354:	str	r3, [fp, #4]
   11358:	b	11304 <__assert_fail@plt+0x218>
   1135c:	ldr	r0, [r5, #12]
   11360:	cmp	r0, #0
   11364:	beq	11378 <__assert_fail@plt+0x28c>
   11368:	ldr	r1, [sl]
   1136c:	bl	10e64 <strcmp@plt>
   11370:	cmp	r0, #0
   11374:	bne	11c44 <__assert_fail@plt+0xb58>
   11378:	ldr	r3, [sl]
   1137c:	str	r3, [r5, #12]
   11380:	b	11304 <__assert_fail@plt+0x218>
   11384:	add	r2, sp, #16
   11388:	add	r3, sp, #20
   1138c:	str	r2, [sp, #4]
   11390:	str	r3, [sp]
   11394:	add	r2, sp, #40	; 0x28
   11398:	add	r3, sp, #24
   1139c:	add	r1, sp, #32
   113a0:	ldr	r0, [sl]
   113a4:	bl	12d9c <__assert_fail@plt+0x1cb0>
   113a8:	b	11304 <__assert_fail@plt+0x218>
   113ac:	mov	r3, #2
   113b0:	str	r3, [r5, #88]	; 0x58
   113b4:	b	11304 <__assert_fail@plt+0x218>
   113b8:	cmp	r0, #122	; 0x7a
   113bc:	bne	112b4 <__assert_fail@plt+0x1c8>
   113c0:	strb	r4, [fp, #16]
   113c4:	b	11304 <__assert_fail@plt+0x218>
   113c8:	mov	r3, #1
   113cc:	str	r3, [r5, #88]	; 0x58
   113d0:	b	11304 <__assert_fail@plt+0x218>
   113d4:	ldr	r4, [sl]
   113d8:	ldr	r1, [pc, #2476]	; 11d8c <__assert_fail@plt+0xca0>
   113dc:	mov	r0, r4
   113e0:	bl	10e64 <strcmp@plt>
   113e4:	cmp	r0, #0
   113e8:	bne	11a80 <__assert_fail@plt+0x994>
   113ec:	mov	r3, #1
   113f0:	strb	r3, [r5, #16]
   113f4:	b	11304 <__assert_fail@plt+0x218>
   113f8:	ldr	r0, [sl]
   113fc:	bl	12060 <__assert_fail@plt+0xf74>
   11400:	mov	r1, r0
   11404:	ldr	r0, [pc, #2424]	; 11d84 <__assert_fail@plt+0xc98>
   11408:	bl	11ef0 <__assert_fail@plt+0xe04>
   1140c:	b	11304 <__assert_fail@plt+0x218>
   11410:	mov	r0, r4
   11414:	bl	12a2c <__assert_fail@plt+0x1940>
   11418:	ldr	r0, [sl]
   1141c:	bl	12060 <__assert_fail@plt+0xf74>
   11420:	mov	r1, r0
   11424:	ldr	r0, [pc, #2388]	; 11d80 <__assert_fail@plt+0xc94>
   11428:	bl	11ef0 <__assert_fail@plt+0xe04>
   1142c:	b	11304 <__assert_fail@plt+0x218>
   11430:	mov	r3, #1
   11434:	strb	r3, [r5, #8]
   11438:	b	11304 <__assert_fail@plt+0x218>
   1143c:	mov	r3, #10
   11440:	b	11340 <__assert_fail@plt+0x254>
   11444:	ldrb	r2, [r0, #1]
   11448:	cmp	r2, #0
   1144c:	bne	1127c <__assert_fail@plt+0x190>
   11450:	ldr	r2, [pc, #2360]	; 11d90 <__assert_fail@plt+0xca4>
   11454:	ldr	r2, [r2]
   11458:	sub	r2, r2, #-1073741823	; 0xc0000001
   1145c:	ldr	r2, [r6, r2, lsl #2]
   11460:	add	r2, r2, #2
   11464:	cmp	r0, r2
   11468:	bne	1127c <__assert_fail@plt+0x190>
   1146c:	sub	r3, r3, #50	; 0x32
   11470:	clz	r3, r3
   11474:	lsr	r3, r3, #5
   11478:	add	r1, sp, #72	; 0x48
   1147c:	add	r2, r3, #1
   11480:	add	r3, r1, r3, lsl #2
   11484:	str	r2, [sp, #16]
   11488:	ldr	r2, [r3, #-32]	; 0xffffffe0
   1148c:	add	r2, r2, #1
   11490:	str	r2, [r3, #-32]	; 0xffffffe0
   11494:	b	11304 <__assert_fail@plt+0x218>
   11498:	ldr	r8, [pc, #2288]	; 11d90 <__assert_fail@plt+0xca4>
   1149c:	str	r4, [sp, #20]
   114a0:	ldr	r3, [r8]
   114a4:	cmp	r7, r3
   114a8:	addgt	r9, sp, #16
   114ac:	addgt	r4, sp, #20
   114b0:	ble	114e0 <__assert_fail@plt+0x3f4>
   114b4:	add	ip, r3, #1
   114b8:	ldr	r0, [r6, r3, lsl #2]
   114bc:	add	r2, sp, #40	; 0x28
   114c0:	stm	sp, {r4, r9}
   114c4:	add	r3, sp, #24
   114c8:	add	r1, sp, #32
   114cc:	str	ip, [r8]
   114d0:	bl	12d9c <__assert_fail@plt+0x1cb0>
   114d4:	ldr	r3, [r8]
   114d8:	cmp	r7, r3
   114dc:	bgt	114b4 <__assert_fail@plt+0x3c8>
   114e0:	ldr	r4, [sp, #24]
   114e4:	cmp	r4, #2
   114e8:	bne	11c18 <__assert_fail@plt+0xb2c>
   114ec:	ldr	r3, [sp, #40]	; 0x28
   114f0:	cmp	r3, #0
   114f4:	bne	11b30 <__assert_fail@plt+0xa44>
   114f8:	ldr	r3, [sp, #44]	; 0x2c
   114fc:	cmp	r3, #0
   11500:	bne	11b14 <__assert_fail@plt+0xa28>
   11504:	ldr	r6, [pc, #2116]	; 11d50 <__assert_fail@plt+0xc64>
   11508:	ldr	r4, [r5, #100]	; 0x64
   1150c:	ldr	r1, [pc, #2176]	; 11d94 <__assert_fail@plt+0xca8>
   11510:	ldr	r3, [r6, #12]
   11514:	mov	r0, r4
   11518:	cmn	r3, #1
   1151c:	moveq	r3, #0
   11520:	streq	r3, [r6, #12]
   11524:	ldr	r3, [r6, #8]
   11528:	cmn	r3, #1
   1152c:	moveq	r3, #0
   11530:	streq	r3, [r6, #8]
   11534:	bl	10e64 <strcmp@plt>
   11538:	cmp	r0, #0
   1153c:	ldreq	r3, [pc, #2132]	; 11d98 <__assert_fail@plt+0xcac>
   11540:	ldreq	r9, [r3]
   11544:	bne	11b4c <__assert_fail@plt+0xa60>
   11548:	cmp	r9, #0
   1154c:	beq	11be0 <__assert_fail@plt+0xaf4>
   11550:	ldr	r4, [r5, #104]	; 0x68
   11554:	ldr	r1, [pc, #2104]	; 11d94 <__assert_fail@plt+0xca8>
   11558:	mov	r0, r4
   1155c:	bl	10e64 <strcmp@plt>
   11560:	cmp	r0, #0
   11564:	ldreq	r3, [pc, #2092]	; 11d98 <__assert_fail@plt+0xcac>
   11568:	ldreq	r8, [r3]
   1156c:	bne	11b60 <__assert_fail@plt+0xa74>
   11570:	cmp	r8, #0
   11574:	beq	11c0c <__assert_fail@plt+0xb20>
   11578:	cmp	r9, r8
   1157c:	beq	11ce4 <__assert_fail@plt+0xbf8>
   11580:	mov	r1, #2
   11584:	mov	r0, r9
   11588:	bl	13000 <__assert_fail@plt+0x1f14>
   1158c:	mov	r1, #2
   11590:	mov	r0, r8
   11594:	bl	13000 <__assert_fail@plt+0x1f14>
   11598:	mov	r4, #0
   1159c:	add	r1, sp, #48	; 0x30
   115a0:	mov	r2, #1
   115a4:	mov	r0, r9
   115a8:	str	r4, [sp, #48]	; 0x30
   115ac:	str	r4, [sp, #52]	; 0x34
   115b0:	str	r4, [sp, #56]	; 0x38
   115b4:	bl	1299c <__assert_fail@plt+0x18b0>
   115b8:	add	r1, sp, #60	; 0x3c
   115bc:	mov	r2, #2
   115c0:	mov	r0, r8
   115c4:	str	r4, [sp, #60]	; 0x3c
   115c8:	str	r4, [sp, #64]	; 0x40
   115cc:	str	r4, [sp, #68]	; 0x44
   115d0:	bl	1299c <__assert_fail@plt+0x18b0>
   115d4:	ldrb	r3, [r5, #16]
   115d8:	cmp	r3, r4
   115dc:	ldr	r3, [sp, #48]	; 0x30
   115e0:	beq	11614 <__assert_fail@plt+0x528>
   115e4:	cmp	r3, #0
   115e8:	mov	r1, r3
   115ec:	ldrne	r2, [sp, #56]	; 0x38
   115f0:	ldrne	r2, [r2]
   115f4:	ldrne	r1, [r2, #12]
   115f8:	ldr	r2, [sp, #60]	; 0x3c
   115fc:	str	r1, [r5, #56]	; 0x38
   11600:	cmp	r2, #0
   11604:	ldrne	r2, [sp, #68]	; 0x44
   11608:	ldrne	r2, [r2]
   1160c:	ldrne	r2, [r2, #12]
   11610:	str	r2, [r5, #60]	; 0x3c
   11614:	ldrb	r2, [r5, #111]	; 0x6f
   11618:	cmp	r2, #0
   1161c:	beq	1166c <__assert_fail@plt+0x580>
   11620:	cmp	r3, #0
   11624:	bne	11aa8 <__assert_fail@plt+0x9bc>
   11628:	ldr	r3, [sp, #60]	; 0x3c
   1162c:	cmp	r3, #0
   11630:	beq	118f8 <__assert_fail@plt+0x80c>
   11634:	ldr	r0, [pc, #1888]	; 11d9c <__assert_fail@plt+0xcb0>
   11638:	ldr	r3, [sp, #68]	; 0x44
   1163c:	ldr	r1, [r3]
   11640:	bl	12490 <__assert_fail@plt+0x13a4>
   11644:	ldr	r3, [sp, #48]	; 0x30
   11648:	mov	ip, #0
   1164c:	cmp	r3, ip
   11650:	str	ip, [r5, #64]	; 0x40
   11654:	str	ip, [r5, #68]	; 0x44
   11658:	bne	11b90 <__assert_fail@plt+0xaa4>
   1165c:	ldr	r3, [sp, #60]	; 0x3c
   11660:	cmp	r3, #0
   11664:	bne	11b74 <__assert_fail@plt+0xa88>
   11668:	ldr	r3, [sp, #48]	; 0x30
   1166c:	mov	fp, #1
   11670:	cmp	r3, #0
   11674:	beq	118f8 <__assert_fail@plt+0x80c>
   11678:	ldr	r2, [sp, #60]	; 0x3c
   1167c:	cmp	r2, #0
   11680:	beq	118fc <__assert_fail@plt+0x810>
   11684:	ldr	r2, [sp, #56]	; 0x38
   11688:	ldr	r3, [sp, #68]	; 0x44
   1168c:	ldr	lr, [r6, #8]
   11690:	ldr	r1, [r2]
   11694:	ldr	r3, [r3]
   11698:	ldr	ip, [r6, #12]
   1169c:	ldr	r0, [r1, #12]
   116a0:	ldr	r2, [r3, #12]
   116a4:	add	r1, r1, #20
   116a8:	add	r3, r3, #20
   116ac:	stm	sp, {ip, lr}
   116b0:	bl	12200 <__assert_fail@plt+0x1114>
   116b4:	cmp	r0, #0
   116b8:	blt	11890 <__assert_fail@plt+0x7a4>
   116bc:	beq	1172c <__assert_fail@plt+0x640>
   116c0:	ldrb	r3, [r5, #110]	; 0x6e
   116c4:	cmp	r3, #0
   116c8:	bne	118c0 <__assert_fail@plt+0x7d4>
   116cc:	mov	r3, #0
   116d0:	mov	r2, #2
   116d4:	add	r1, sp, #60	; 0x3c
   116d8:	mov	r0, r8
   116dc:	str	r3, [sp, #60]	; 0x3c
   116e0:	bl	1299c <__assert_fail@plt+0x18b0>
   116e4:	strb	fp, [r5, #92]	; 0x5c
   116e8:	ldr	r3, [sp, #48]	; 0x30
   116ec:	b	11670 <__assert_fail@plt+0x584>
   116f0:	ldr	r2, [sp, #68]	; 0x44
   116f4:	ldr	r1, [sp, #56]	; 0x38
   116f8:	sub	r3, r3, #-1073741823	; 0xc0000001
   116fc:	ldr	lr, [r6, #8]
   11700:	ldr	r1, [r1, r3, lsl #2]
   11704:	ldr	ip, [r6, #12]
   11708:	ldr	r3, [r2]
   1170c:	ldr	r0, [r1, #12]
   11710:	add	r3, r3, #20
   11714:	ldr	r2, [r3, #-8]
   11718:	add	r1, r1, #20
   1171c:	stm	sp, {ip, lr}
   11720:	bl	12200 <__assert_fail@plt+0x1114>
   11724:	cmp	r0, #0
   11728:	bne	118ec <__assert_fail@plt+0x800>
   1172c:	mov	r2, fp
   11730:	add	r1, sp, #48	; 0x30
   11734:	mov	r0, r9
   11738:	bl	1299c <__assert_fail@plt+0x18b0>
   1173c:	ldr	r3, [sp, #48]	; 0x30
   11740:	cmp	r0, #0
   11744:	bne	116f0 <__assert_fail@plt+0x604>
   11748:	add	r3, r3, #1
   1174c:	str	fp, [sp, #8]
   11750:	str	r3, [sp, #48]	; 0x30
   11754:	b	11798 <__assert_fail@plt+0x6ac>
   11758:	ldr	r3, [sp, #60]	; 0x3c
   1175c:	ldr	r1, [sp, #68]	; 0x44
   11760:	ldr	r2, [sp, #56]	; 0x38
   11764:	sub	r3, r3, #-1073741823	; 0xc0000001
   11768:	ldr	lr, [r6, #8]
   1176c:	ldr	r3, [r1, r3, lsl #2]
   11770:	ldr	ip, [r6, #12]
   11774:	ldr	r1, [r2]
   11778:	add	r3, r3, #20
   1177c:	ldr	r2, [r3, #-8]
   11780:	ldr	r0, [r1, #12]
   11784:	add	r1, r1, #20
   11788:	stm	sp, {ip, lr}
   1178c:	bl	12200 <__assert_fail@plt+0x1114>
   11790:	cmp	r0, #0
   11794:	bne	118e0 <__assert_fail@plt+0x7f4>
   11798:	mov	r2, #2
   1179c:	add	r1, sp, #60	; 0x3c
   117a0:	mov	r0, r8
   117a4:	bl	1299c <__assert_fail@plt+0x18b0>
   117a8:	cmp	r0, #0
   117ac:	bne	11758 <__assert_fail@plt+0x66c>
   117b0:	ldr	r2, [sp, #60]	; 0x3c
   117b4:	str	fp, [sp, #12]
   117b8:	add	r2, r2, #1
   117bc:	str	r2, [sp, #60]	; 0x3c
   117c0:	ldrb	r3, [r5, #108]	; 0x6c
   117c4:	cmp	r3, #0
   117c8:	beq	1182c <__assert_fail@plt+0x740>
   117cc:	ldr	r3, [sp, #48]	; 0x30
   117d0:	cmp	r3, #1
   117d4:	movne	r7, #0
   117d8:	ldrne	r2, [sp, #60]	; 0x3c
   117dc:	beq	1182c <__assert_fail@plt+0x740>
   117e0:	cmp	r2, #1
   117e4:	beq	1181c <__assert_fail@plt+0x730>
   117e8:	lsl	sl, r7, #2
   117ec:	mov	r4, #0
   117f0:	ldr	r2, [sp, #68]	; 0x44
   117f4:	ldr	r3, [sp, #56]	; 0x38
   117f8:	ldr	r1, [r2, r4, lsl #2]
   117fc:	ldr	r0, [r3, sl]
   11800:	bl	12490 <__assert_fail@plt+0x13a4>
   11804:	ldr	r2, [sp, #60]	; 0x3c
   11808:	add	r4, r4, #1
   1180c:	sub	r3, r2, #1
   11810:	cmp	r4, r3
   11814:	bcc	117f0 <__assert_fail@plt+0x704>
   11818:	ldr	r3, [sp, #48]	; 0x30
   1181c:	add	r7, r7, #1
   11820:	sub	r1, r3, #1
   11824:	cmp	r7, r1
   11828:	bcc	117e0 <__assert_fail@plt+0x6f4>
   1182c:	ldr	r3, [sp, #8]
   11830:	cmp	r3, #0
   11834:	bne	118d4 <__assert_fail@plt+0x7e8>
   11838:	ldr	r3, [sp, #48]	; 0x30
   1183c:	ldr	r2, [sp, #56]	; 0x38
   11840:	sub	r1, r3, #-1073741823	; 0xc0000001
   11844:	mov	r3, fp
   11848:	ldr	ip, [r2, r1, lsl #2]
   1184c:	ldr	r0, [r2]
   11850:	str	ip, [r2]
   11854:	str	r0, [r2, r1, lsl #2]
   11858:	str	fp, [sp, #48]	; 0x30
   1185c:	ldr	r2, [sp, #12]
   11860:	cmp	r2, #0
   11864:	movne	r2, #0
   11868:	ldreq	r1, [sp, #60]	; 0x3c
   1186c:	ldreq	r2, [sp, #68]	; 0x44
   11870:	subeq	r1, r1, #-1073741823	; 0xc0000001
   11874:	strne	r2, [sp, #60]	; 0x3c
   11878:	ldreq	r0, [r2]
   1187c:	ldreq	ip, [r2, r1, lsl #2]
   11880:	streq	ip, [r2]
   11884:	streq	r0, [r2, r1, lsl #2]
   11888:	streq	fp, [sp, #60]	; 0x3c
   1188c:	b	11670 <__assert_fail@plt+0x584>
   11890:	ldrb	r3, [r5, #109]	; 0x6d
   11894:	cmp	r3, #0
   11898:	bne	11a94 <__assert_fail@plt+0x9a8>
   1189c:	mov	r3, #0
   118a0:	mov	r2, fp
   118a4:	add	r1, sp, #48	; 0x30
   118a8:	mov	r0, r9
   118ac:	str	r3, [sp, #48]	; 0x30
   118b0:	bl	1299c <__assert_fail@plt+0x18b0>
   118b4:	strb	fp, [r5, #92]	; 0x5c
   118b8:	ldr	r3, [sp, #48]	; 0x30
   118bc:	b	11670 <__assert_fail@plt+0x584>
   118c0:	ldr	r3, [sp, #68]	; 0x44
   118c4:	ldr	r0, [pc, #1232]	; 11d9c <__assert_fail@plt+0xcb0>
   118c8:	ldr	r1, [r3]
   118cc:	bl	12490 <__assert_fail@plt+0x13a4>
   118d0:	b	116cc <__assert_fail@plt+0x5e0>
   118d4:	mov	r3, #0
   118d8:	str	r3, [sp, #48]	; 0x30
   118dc:	b	1185c <__assert_fail@plt+0x770>
   118e0:	mov	r3, #0
   118e4:	str	r3, [sp, #12]
   118e8:	b	117c0 <__assert_fail@plt+0x6d4>
   118ec:	mov	r3, #0
   118f0:	str	r3, [sp, #8]
   118f4:	b	11798 <__assert_fail@plt+0x6ac>
   118f8:	mov	r3, #0
   118fc:	ldr	r1, [r5, #88]	; 0x58
   11900:	mov	r2, #0
   11904:	cmp	r1, #2
   11908:	str	r2, [sp, #28]
   1190c:	beq	11928 <__assert_fail@plt+0x83c>
   11910:	ldrb	r2, [r5, #96]	; 0x60
   11914:	cmp	r2, #0
   11918:	beq	119b0 <__assert_fail@plt+0x8c4>
   1191c:	ldrb	r2, [r5, #97]	; 0x61
   11920:	cmp	r2, #0
   11924:	beq	119b0 <__assert_fail@plt+0x8c4>
   11928:	ldrb	r7, [r5, #109]	; 0x6d
   1192c:	cmp	r7, #0
   11930:	bne	11bbc <__assert_fail@plt+0xad0>
   11934:	ldrb	r3, [r5, #110]	; 0x6e
   11938:	orrs	r2, r3, r7
   1193c:	bne	11a1c <__assert_fail@plt+0x930>
   11940:	ldr	r0, [sp, #28]
   11944:	bl	11f48 <__assert_fail@plt+0xe5c>
   11948:	ldr	r0, [sp, #28]
   1194c:	bl	131cc <__assert_fail@plt+0x20e0>
   11950:	add	r3, sp, #48	; 0x30
   11954:	add	r0, r3, #4
   11958:	add	r1, sp, #56	; 0x38
   1195c:	bl	12010 <__assert_fail@plt+0xf24>
   11960:	add	r3, sp, #60	; 0x3c
   11964:	add	r0, r3, #4
   11968:	add	r1, sp, #68	; 0x44
   1196c:	bl	12010 <__assert_fail@plt+0xf24>
   11970:	mov	r0, r9
   11974:	bl	13034 <__assert_fail@plt+0x1f48>
   11978:	subs	r4, r0, #0
   1197c:	bne	11be0 <__assert_fail@plt+0xaf4>
   11980:	mov	r0, r8
   11984:	bl	13034 <__assert_fail@plt+0x1f48>
   11988:	cmp	r0, #0
   1198c:	bne	11ca0 <__assert_fail@plt+0xbb4>
   11990:	ldrb	r3, [r5, #96]	; 0x60
   11994:	cmp	r3, #0
   11998:	bne	11c94 <__assert_fail@plt+0xba8>
   1199c:	ldrb	r3, [r5, #97]	; 0x61
   119a0:	cmp	r3, #0
   119a4:	bne	11c94 <__assert_fail@plt+0xba8>
   119a8:	add	sp, sp, #76	; 0x4c
   119ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b0:	cmp	r3, #0
   119b4:	ldrbeq	r3, [r5, #110]	; 0x6e
   119b8:	beq	11a1c <__assert_fail@plt+0x930>
   119bc:	ldrb	r7, [r5, #109]	; 0x6d
   119c0:	cmp	r7, #0
   119c4:	moveq	r7, #1
   119c8:	bne	11bcc <__assert_fail@plt+0xae0>
   119cc:	ldr	r3, [sp, #60]	; 0x3c
   119d0:	ldr	sl, [pc, #964]	; 11d9c <__assert_fail@plt+0xcb0>
   119d4:	cmp	r3, #0
   119d8:	add	r4, sp, #28
   119dc:	mov	r6, #1
   119e0:	movne	r3, #1
   119e4:	strbne	r3, [r5, #92]	; 0x5c
   119e8:	mov	r2, r6
   119ec:	mov	r1, r4
   119f0:	mov	r0, r9
   119f4:	bl	125e4 <__assert_fail@plt+0x14f8>
   119f8:	cmp	r0, #0
   119fc:	beq	11934 <__assert_fail@plt+0x848>
   11a00:	ldrb	r3, [r5, #109]	; 0x6d
   11a04:	cmp	r3, #0
   11a08:	bne	11aec <__assert_fail@plt+0xa00>
   11a0c:	ldrb	r3, [r5, #96]	; 0x60
   11a10:	cmp	r3, #0
   11a14:	beq	119e8 <__assert_fail@plt+0x8fc>
   11a18:	b	11934 <__assert_fail@plt+0x848>
   11a1c:	ldr	r2, [sp, #60]	; 0x3c
   11a20:	cmp	r2, #0
   11a24:	beq	11940 <__assert_fail@plt+0x854>
   11a28:	cmp	r3, #0
   11a2c:	bne	11ba8 <__assert_fail@plt+0xabc>
   11a30:	ldr	r3, [sp, #48]	; 0x30
   11a34:	ldr	r7, [pc, #864]	; 11d9c <__assert_fail@plt+0xcb0>
   11a38:	cmp	r3, #0
   11a3c:	add	r4, sp, #28
   11a40:	mov	r6, #2
   11a44:	movne	r3, #1
   11a48:	strbne	r3, [r5, #92]	; 0x5c
   11a4c:	mov	r2, r6
   11a50:	mov	r1, r4
   11a54:	mov	r0, r8
   11a58:	bl	125e4 <__assert_fail@plt+0x14f8>
   11a5c:	cmp	r0, #0
   11a60:	beq	11940 <__assert_fail@plt+0x854>
   11a64:	ldrb	r3, [r5, #110]	; 0x6e
   11a68:	cmp	r3, #0
   11a6c:	bne	11ac4 <__assert_fail@plt+0x9d8>
   11a70:	ldrb	r3, [r5, #97]	; 0x61
   11a74:	cmp	r3, #0
   11a78:	beq	11a4c <__assert_fail@plt+0x960>
   11a7c:	b	11940 <__assert_fail@plt+0x854>
   11a80:	mov	r0, r4
   11a84:	bl	12104 <__assert_fail@plt+0x1018>
   11a88:	mov	r3, #3
   11a8c:	str	r3, [sp, #16]
   11a90:	b	11304 <__assert_fail@plt+0x218>
   11a94:	ldr	r3, [sp, #56]	; 0x38
   11a98:	ldr	r1, [pc, #764]	; 11d9c <__assert_fail@plt+0xcb0>
   11a9c:	ldr	r0, [r3]
   11aa0:	bl	12490 <__assert_fail@plt+0x13a4>
   11aa4:	b	1189c <__assert_fail@plt+0x7b0>
   11aa8:	ldr	r2, [sp, #60]	; 0x3c
   11aac:	ldr	r3, [sp, #56]	; 0x38
   11ab0:	cmp	r2, #0
   11ab4:	ldr	r0, [r3]
   11ab8:	ldreq	r1, [pc, #732]	; 11d9c <__assert_fail@plt+0xcb0>
   11abc:	beq	11640 <__assert_fail@plt+0x554>
   11ac0:	b	11638 <__assert_fail@plt+0x54c>
   11ac4:	ldr	r1, [sp, #28]
   11ac8:	mov	r0, r7
   11acc:	bl	12490 <__assert_fail@plt+0x13a4>
   11ad0:	ldrb	r3, [r5, #97]	; 0x61
   11ad4:	cmp	r3, #0
   11ad8:	beq	11a4c <__assert_fail@plt+0x960>
   11adc:	ldrb	r3, [r5, #110]	; 0x6e
   11ae0:	cmp	r3, #0
   11ae4:	bne	11a4c <__assert_fail@plt+0x960>
   11ae8:	b	11940 <__assert_fail@plt+0x854>
   11aec:	mov	r1, sl
   11af0:	ldr	r0, [sp, #28]
   11af4:	bl	12490 <__assert_fail@plt+0x13a4>
   11af8:	ldrb	r3, [r5, #96]	; 0x60
   11afc:	cmp	r3, #0
   11b00:	beq	119e8 <__assert_fail@plt+0x8fc>
   11b04:	ldrb	r3, [r5, #109]	; 0x6d
   11b08:	cmp	r3, #0
   11b0c:	bne	119e8 <__assert_fail@plt+0x8fc>
   11b10:	b	11934 <__assert_fail@plt+0x848>
   11b14:	mov	r1, #1
   11b18:	ldr	r0, [pc, #608]	; 11d80 <__assert_fail@plt+0xc94>
   11b1c:	bl	11ef0 <__assert_fail@plt+0xe04>
   11b20:	mov	r1, #1
   11b24:	ldr	r0, [pc, #600]	; 11d84 <__assert_fail@plt+0xc98>
   11b28:	bl	11ef0 <__assert_fail@plt+0xe04>
   11b2c:	b	11504 <__assert_fail@plt+0x418>
   11b30:	mov	r1, #0
   11b34:	ldr	r0, [pc, #580]	; 11d80 <__assert_fail@plt+0xc94>
   11b38:	bl	11ef0 <__assert_fail@plt+0xe04>
   11b3c:	mov	r1, #0
   11b40:	ldr	r0, [pc, #572]	; 11d84 <__assert_fail@plt+0xc98>
   11b44:	bl	11ef0 <__assert_fail@plt+0xe04>
   11b48:	b	114f8 <__assert_fail@plt+0x40c>
   11b4c:	mov	r0, r4
   11b50:	ldr	r1, [pc, #584]	; 11da0 <__assert_fail@plt+0xcb4>
   11b54:	bl	13134 <__assert_fail@plt+0x2048>
   11b58:	mov	r9, r0
   11b5c:	b	11548 <__assert_fail@plt+0x45c>
   11b60:	mov	r0, r4
   11b64:	ldr	r1, [pc, #564]	; 11da0 <__assert_fail@plt+0xcb4>
   11b68:	bl	13134 <__assert_fail@plt+0x2048>
   11b6c:	mov	r8, r0
   11b70:	b	11570 <__assert_fail@plt+0x484>
   11b74:	mov	r3, #0
   11b78:	mov	r2, #2
   11b7c:	add	r1, sp, #60	; 0x3c
   11b80:	mov	r0, r8
   11b84:	str	r3, [sp, #60]	; 0x3c
   11b88:	bl	1299c <__assert_fail@plt+0x18b0>
   11b8c:	b	11668 <__assert_fail@plt+0x57c>
   11b90:	mov	r2, #1
   11b94:	add	r1, sp, #48	; 0x30
   11b98:	mov	r0, r9
   11b9c:	str	ip, [sp, #48]	; 0x30
   11ba0:	bl	1299c <__assert_fail@plt+0x18b0>
   11ba4:	b	1165c <__assert_fail@plt+0x570>
   11ba8:	ldr	r3, [sp, #68]	; 0x44
   11bac:	ldr	r0, [pc, #488]	; 11d9c <__assert_fail@plt+0xcb0>
   11bb0:	ldr	r1, [r3]
   11bb4:	bl	12490 <__assert_fail@plt+0x13a4>
   11bb8:	b	11a30 <__assert_fail@plt+0x944>
   11bbc:	cmp	r3, #0
   11bc0:	moveq	r7, r3
   11bc4:	beq	11934 <__assert_fail@plt+0x848>
   11bc8:	mov	r7, #0
   11bcc:	ldr	r3, [sp, #56]	; 0x38
   11bd0:	ldr	r1, [pc, #452]	; 11d9c <__assert_fail@plt+0xcb0>
   11bd4:	ldr	r0, [r3]
   11bd8:	bl	12490 <__assert_fail@plt+0x13a4>
   11bdc:	b	119cc <__assert_fail@plt+0x8e0>
   11be0:	bl	10ff0 <__errno_location@plt>
   11be4:	ldr	r2, [r5, #100]	; 0x64
   11be8:	ldr	r4, [r0]
   11bec:	mov	r1, #3
   11bf0:	mov	r0, #0
   11bf4:	bl	151e0 <__assert_fail@plt+0x40f4>
   11bf8:	mov	r1, r4
   11bfc:	ldr	r2, [pc, #416]	; 11da4 <__assert_fail@plt+0xcb8>
   11c00:	mov	r3, r0
   11c04:	mov	r0, #1
   11c08:	bl	10f54 <error@plt>
   11c0c:	bl	10ff0 <__errno_location@plt>
   11c10:	ldr	r2, [r5, #104]	; 0x68
   11c14:	b	11be8 <__assert_fail@plt+0xafc>
   11c18:	cmp	r4, #0
   11c1c:	mov	r2, #5
   11c20:	bne	11d0c <__assert_fail@plt+0xc20>
   11c24:	ldr	r1, [pc, #380]	; 11da8 <__assert_fail@plt+0xcbc>
   11c28:	mov	r0, r4
   11c2c:	bl	10ee8 <dcgettext@plt>
   11c30:	mov	r1, r4
   11c34:	mov	r2, r0
   11c38:	mov	r0, r4
   11c3c:	bl	10f54 <error@plt>
   11c40:	b	112b4 <__assert_fail@plt+0x1c8>
   11c44:	ldr	r1, [pc, #352]	; 11dac <__assert_fail@plt+0xcc0>
   11c48:	mov	r2, #5
   11c4c:	mov	r0, #0
   11c50:	bl	10ee8 <dcgettext@plt>
   11c54:	mov	r1, #0
   11c58:	mov	r2, r0
   11c5c:	mov	r0, #1
   11c60:	bl	10f54 <error@plt>
   11c64:	ldr	r1, [pc, #324]	; 11db0 <__assert_fail@plt+0xcc4>
   11c68:	mov	r2, #5
   11c6c:	mov	r0, #0
   11c70:	bl	10ee8 <dcgettext@plt>
   11c74:	mov	r4, r0
   11c78:	ldr	r0, [sl]
   11c7c:	bl	15364 <__assert_fail@plt+0x4278>
   11c80:	mov	r2, r4
   11c84:	mov	r1, #0
   11c88:	mov	r3, r0
   11c8c:	mov	r0, #1
   11c90:	bl	10f54 <error@plt>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #276]	; 11db4 <__assert_fail@plt+0xcc8>
   11c9c:	b	11c4c <__assert_fail@plt+0xb60>
   11ca0:	bl	10ff0 <__errno_location@plt>
   11ca4:	ldr	r2, [r5, #104]	; 0x68
   11ca8:	mov	r1, #3
   11cac:	ldr	r5, [r0]
   11cb0:	mov	r0, r4
   11cb4:	bl	151e0 <__assert_fail@plt+0x40f4>
   11cb8:	mov	r1, r5
   11cbc:	ldr	r2, [pc, #224]	; 11da4 <__assert_fail@plt+0xcb8>
   11cc0:	mov	r3, r0
   11cc4:	mov	r0, #1
   11cc8:	bl	10f54 <error@plt>
   11ccc:	mov	r2, #5
   11cd0:	ldr	r1, [pc, #224]	; 11db8 <__assert_fail@plt+0xccc>
   11cd4:	b	11c4c <__assert_fail@plt+0xb60>
   11cd8:	mov	r2, #5
   11cdc:	ldr	r1, [pc, #216]	; 11dbc <__assert_fail@plt+0xcd0>
   11ce0:	b	11c6c <__assert_fail@plt+0xb80>
   11ce4:	bl	10ff0 <__errno_location@plt>
   11ce8:	mov	r2, #5
   11cec:	ldr	r1, [pc, #204]	; 11dc0 <__assert_fail@plt+0xcd4>
   11cf0:	ldr	r4, [r0]
   11cf4:	mov	r0, #0
   11cf8:	bl	10ee8 <dcgettext@plt>
   11cfc:	mov	r1, r4
   11d00:	mov	r2, r0
   11d04:	mov	r0, #1
   11d08:	bl	10f54 <error@plt>
   11d0c:	ldr	r1, [pc, #176]	; 11dc4 <__assert_fail@plt+0xcd8>
   11d10:	mov	r0, #0
   11d14:	bl	10ee8 <dcgettext@plt>
   11d18:	sub	r7, r7, #-1073741823	; 0xc0000001
   11d1c:	mov	r4, r0
   11d20:	ldr	r0, [r6, r7, lsl #2]
   11d24:	bl	15364 <__assert_fail@plt+0x4278>
   11d28:	mov	r1, #0
   11d2c:	mov	r2, r4
   11d30:	mov	r3, r0
   11d34:	mov	r0, r1
   11d38:	bl	10f54 <error@plt>
   11d3c:	b	112b4 <__assert_fail@plt+0x1c8>
   11d40:	strdeq	r7, [r1], -r0
   11d44:	muleq	r1, r0, r2
   11d48:	ldrdeq	r8, [r1], -r4
   11d4c:	andeq	r9, r2, r8, lsl #3
   11d50:	andeq	r9, r2, r4, lsl #2
   11d54:	andeq	r7, r1, r4, asr r7
   11d58:	andeq	r8, r1, ip, lsl r3
   11d5c:	andeq	r9, r2, r0, lsl #3
   11d60:	andeq	r2, r1, r0, lsl pc
   11d64:	andeq	r1, r1, r4, ror pc
   11d68:	andeq	r0, r0, r1, lsl #2
   11d6c:	andeq	r9, r2, ip, ror r1
   11d70:	andeq	r9, r2, r8, lsl r1
   11d74:	andeq	r8, r1, ip, lsl #6
   11d78:	andeq	r7, r1, r8, lsl #17
   11d7c:	ldrdeq	r8, [r1], -r0
   11d80:	andeq	r9, r2, r0, lsl r1
   11d84:	andeq	r9, r2, ip, lsl #2
   11d88:	ldrdeq	r8, [r1], -ip
   11d8c:	ldrdeq	r8, [r1], -r4
   11d90:	andeq	r9, r2, r8, ror #2
   11d94:	andeq	r8, r1, ip, asr r3
   11d98:	andeq	r9, r2, r8, ror r1
   11d9c:	andeq	r9, r2, r8, lsr #3
   11da0:	andeq	r8, r1, r4, lsr r4
   11da4:	andeq	r8, r1, r0, lsl #9
   11da8:	andeq	r8, r1, r0, lsr r3
   11dac:	andeq	r8, r1, r8, lsr #5
   11db0:	strdeq	r7, [r1], -r8
   11db4:	andeq	r8, r1, r4, lsl #7
   11db8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11dbc:	andeq	r8, r1, r0, ror #5
   11dc0:	andeq	r8, r1, r0, ror #6
   11dc4:	andeq	r8, r1, r0, asr #6
   11dc8:	mov	fp, #0
   11dcc:	mov	lr, #0
   11dd0:	pop	{r1}		; (ldr r1, [sp], #4)
   11dd4:	mov	r2, sp
   11dd8:	push	{r2}		; (str r2, [sp, #-4]!)
   11ddc:	push	{r0}		; (str r0, [sp, #-4]!)
   11de0:	ldr	ip, [pc, #16]	; 11df8 <__assert_fail@plt+0xd0c>
   11de4:	push	{ip}		; (str ip, [sp, #-4]!)
   11de8:	ldr	r0, [pc, #12]	; 11dfc <__assert_fail@plt+0xd10>
   11dec:	ldr	r3, [pc, #12]	; 11e00 <__assert_fail@plt+0xd14>
   11df0:	bl	10f78 <__libc_start_main@plt>
   11df4:	bl	110d4 <abort@plt>
   11df8:	strdeq	r7, [r1], -r4
   11dfc:	strdeq	r1, [r1], -r8
   11e00:	muleq	r1, r4, r6
   11e04:	ldr	r3, [pc, #20]	; 11e20 <__assert_fail@plt+0xd34>
   11e08:	ldr	r2, [pc, #20]	; 11e24 <__assert_fail@plt+0xd38>
   11e0c:	add	r3, pc, r3
   11e10:	ldr	r2, [r3, r2]
   11e14:	cmp	r2, #0
   11e18:	bxeq	lr
   11e1c:	b	10f9c <__gmon_start__@plt>
   11e20:	andeq	r7, r1, ip, ror #3
   11e24:	strdeq	r0, [r0], -r8
   11e28:	ldr	r3, [pc, #28]	; 11e4c <__assert_fail@plt+0xd60>
   11e2c:	ldr	r0, [pc, #28]	; 11e50 <__assert_fail@plt+0xd64>
   11e30:	sub	r3, r3, r0
   11e34:	cmp	r3, #6
   11e38:	bxls	lr
   11e3c:	ldr	r3, [pc, #16]	; 11e54 <__assert_fail@plt+0xd68>
   11e40:	cmp	r3, #0
   11e44:	bxeq	lr
   11e48:	bx	r3
   11e4c:	andeq	r9, r2, r3, ror #2
   11e50:	andeq	r9, r2, r0, ror #2
   11e54:	andeq	r0, r0, r0
   11e58:	ldr	r1, [pc, #36]	; 11e84 <__assert_fail@plt+0xd98>
   11e5c:	ldr	r0, [pc, #36]	; 11e88 <__assert_fail@plt+0xd9c>
   11e60:	sub	r1, r1, r0
   11e64:	asr	r1, r1, #2
   11e68:	add	r1, r1, r1, lsr #31
   11e6c:	asrs	r1, r1, #1
   11e70:	bxeq	lr
   11e74:	ldr	r3, [pc, #16]	; 11e8c <__assert_fail@plt+0xda0>
   11e78:	cmp	r3, #0
   11e7c:	bxeq	lr
   11e80:	bx	r3
   11e84:	andeq	r9, r2, r0, ror #2
   11e88:	andeq	r9, r2, r0, ror #2
   11e8c:	andeq	r0, r0, r0
   11e90:	push	{r4, lr}
   11e94:	ldr	r4, [pc, #24]	; 11eb4 <__assert_fail@plt+0xdc8>
   11e98:	ldrb	r3, [r4]
   11e9c:	cmp	r3, #0
   11ea0:	popne	{r4, pc}
   11ea4:	bl	11e28 <__assert_fail@plt+0xd3c>
   11ea8:	mov	r3, #1
   11eac:	strb	r3, [r4]
   11eb0:	pop	{r4, pc}
   11eb4:	andeq	r9, r2, r4, lsl #3
   11eb8:	ldr	r0, [pc, #40]	; 11ee8 <__assert_fail@plt+0xdfc>
   11ebc:	ldr	r3, [r0]
   11ec0:	cmp	r3, #0
   11ec4:	bne	11ecc <__assert_fail@plt+0xde0>
   11ec8:	b	11e58 <__assert_fail@plt+0xd6c>
   11ecc:	ldr	r3, [pc, #24]	; 11eec <__assert_fail@plt+0xe00>
   11ed0:	cmp	r3, #0
   11ed4:	beq	11ec8 <__assert_fail@plt+0xddc>
   11ed8:	push	{r4, lr}
   11edc:	blx	r3
   11ee0:	pop	{r4, lr}
   11ee4:	b	11e58 <__assert_fail@plt+0xd6c>
   11ee8:	andeq	r8, r2, r4, lsl pc
   11eec:	andeq	r0, r0, r0
   11ef0:	push	{r4, r5, lr}
   11ef4:	sub	sp, sp, #12
   11ef8:	ldr	r5, [r0]
   11efc:	cmp	r5, r1
   11f00:	cmnne	r5, #1
   11f04:	bne	11f14 <__assert_fail@plt+0xe28>
   11f08:	str	r1, [r0]
   11f0c:	add	sp, sp, #12
   11f10:	pop	{r4, r5, pc}
   11f14:	mov	r4, r1
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #32]	; 11f44 <__assert_fail@plt+0xe58>
   11f20:	mov	r0, #0
   11f24:	bl	10ee8 <dcgettext@plt>
   11f28:	add	r1, r4, #1
   11f2c:	str	r1, [sp]
   11f30:	add	r3, r5, #1
   11f34:	mov	r1, #0
   11f38:	mov	r2, r0
   11f3c:	mov	r0, #1
   11f40:	bl	10f54 <error@plt>
   11f44:	ldrdeq	r7, [r1], -r4
   11f48:	push	{r4, r5, r6, lr}
   11f4c:	subs	r4, r0, #0
   11f50:	popeq	{r4, r5, r6, pc}
   11f54:	ldr	r0, [r4, #20]
   11f58:	mov	r5, #0
   11f5c:	bl	131cc <__assert_fail@plt+0x20e0>
   11f60:	str	r5, [r4, #20]
   11f64:	ldr	r0, [r4, #8]
   11f68:	bl	131cc <__assert_fail@plt+0x20e0>
   11f6c:	str	r5, [r4, #8]
   11f70:	pop	{r4, r5, r6, pc}
   11f74:	push	{r4, lr}
   11f78:	ldr	r4, [pc, #48]	; 11fb0 <__assert_fail@plt+0xec4>
   11f7c:	ldr	r0, [r4]
   11f80:	cmp	r0, #0
   11f84:	beq	11f94 <__assert_fail@plt+0xea8>
   11f88:	bl	11f48 <__assert_fail@plt+0xe5c>
   11f8c:	ldr	r0, [r4]
   11f90:	bl	131cc <__assert_fail@plt+0x20e0>
   11f94:	ldr	r0, [r4, #4]
   11f98:	cmp	r0, #0
   11f9c:	popeq	{r4, pc}
   11fa0:	bl	11f48 <__assert_fail@plt+0xe5c>
   11fa4:	ldr	r0, [r4, #4]
   11fa8:	pop	{r4, lr}
   11fac:	b	131cc <__assert_fail@plt+0x20e0>
   11fb0:	andeq	r9, r2, r8, lsl #3
   11fb4:	push	{r4, r5, r6, lr}
   11fb8:	mov	r6, r1
   11fbc:	ldr	r3, [r0, #12]
   11fc0:	ldr	r1, [r0, #16]
   11fc4:	mov	r4, r0
   11fc8:	cmp	r3, r1
   11fcc:	mov	r5, r2
   11fd0:	bcs	11ff0 <__assert_fail@plt+0xf04>
   11fd4:	ldr	r2, [r0, #20]
   11fd8:	add	r0, r2, r3, lsl #3
   11fdc:	add	r1, r3, #1
   11fe0:	str	r6, [r2, r3, lsl #3]
   11fe4:	str	r5, [r0, #4]
   11fe8:	str	r1, [r4, #12]
   11fec:	pop	{r4, r5, r6, pc}
   11ff0:	mov	r2, #8
   11ff4:	add	r1, r0, #16
   11ff8:	ldr	r0, [r0, #20]
   11ffc:	bl	15a48 <__assert_fail@plt+0x495c>
   12000:	ldr	r3, [r4, #12]
   12004:	mov	r2, r0
   12008:	str	r0, [r4, #20]
   1200c:	b	11fd8 <__assert_fail@plt+0xeec>
   12010:	ldr	r3, [r0]
   12014:	push	{r4, r5, r6, lr}
   12018:	cmp	r3, #0
   1201c:	mov	r5, r1
   12020:	movne	r6, r0
   12024:	movne	r4, #0
   12028:	beq	12054 <__assert_fail@plt+0xf68>
   1202c:	ldr	r3, [r5]
   12030:	ldr	r0, [r3, r4, lsl #2]
   12034:	bl	11f48 <__assert_fail@plt+0xe5c>
   12038:	ldr	r3, [r5]
   1203c:	ldr	r0, [r3, r4, lsl #2]
   12040:	bl	131cc <__assert_fail@plt+0x20e0>
   12044:	ldr	r3, [r6]
   12048:	add	r4, r4, #1
   1204c:	cmp	r4, r3
   12050:	bcc	1202c <__assert_fail@plt+0xf40>
   12054:	ldr	r0, [r5]
   12058:	pop	{r4, r5, r6, lr}
   1205c:	b	131cc <__assert_fail@plt+0x20e0>
   12060:	push	{r4, r5, lr}
   12064:	sub	sp, sp, #20
   12068:	ldr	r2, [pc, #140]	; 120fc <__assert_fail@plt+0x1010>
   1206c:	add	r3, sp, #8
   12070:	str	r2, [sp]
   12074:	mov	r1, #0
   12078:	mov	r2, #10
   1207c:	mov	r4, r0
   12080:	bl	165d0 <__assert_fail@plt+0x54e4>
   12084:	cmp	r0, #1
   12088:	beq	120c0 <__assert_fail@plt+0xfd4>
   1208c:	cmp	r0, #0
   12090:	bne	120cc <__assert_fail@plt+0xfe0>
   12094:	ldrd	r0, [sp, #8]
   12098:	mov	r3, #0
   1209c:	mvn	r2, #0
   120a0:	cmp	r1, r3
   120a4:	cmpeq	r0, r2
   120a8:	bhi	120c0 <__assert_fail@plt+0xfd4>
   120ac:	orrs	r3, r0, r1
   120b0:	subne	r0, r0, #1
   120b4:	beq	120cc <__assert_fail@plt+0xfe0>
   120b8:	add	sp, sp, #20
   120bc:	pop	{r4, r5, pc}
   120c0:	mvn	r0, #1
   120c4:	add	sp, sp, #20
   120c8:	pop	{r4, r5, pc}
   120cc:	mov	r2, #5
   120d0:	ldr	r1, [pc, #40]	; 12100 <__assert_fail@plt+0x1014>
   120d4:	mov	r0, #0
   120d8:	bl	10ee8 <dcgettext@plt>
   120dc:	mov	r5, r0
   120e0:	mov	r0, r4
   120e4:	bl	15364 <__assert_fail@plt+0x4278>
   120e8:	mov	r2, r5
   120ec:	mov	r1, #0
   120f0:	mov	r3, r0
   120f4:	mov	r0, #1
   120f8:	bl	10f54 <error@plt>
   120fc:	strdeq	r7, [r1], -r0
   12100:	strdeq	r7, [r1], -r8
   12104:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12108:	mov	r4, r0
   1210c:	ldr	r7, [pc, #220]	; 121f0 <__assert_fail@plt+0x1104>
   12110:	ldr	r6, [pc, #220]	; 121f4 <__assert_fail@plt+0x1108>
   12114:	mov	r5, #0
   12118:	mov	r8, #12
   1211c:	mov	r1, r7
   12120:	mov	r0, r4
   12124:	bl	110b0 <strpbrk@plt>
   12128:	cmp	r0, #0
   1212c:	addne	r9, r0, #1
   12130:	strbne	r5, [r0]
   12134:	ldrb	r3, [r4]
   12138:	moveq	r9, r5
   1213c:	cmp	r3, #48	; 0x30
   12140:	beq	12198 <__assert_fail@plt+0x10ac>
   12144:	bcc	121b0 <__assert_fail@plt+0x10c4>
   12148:	cmp	r3, #50	; 0x32
   1214c:	bhi	121b0 <__assert_fail@plt+0x10c4>
   12150:	ldrb	r2, [r4, #1]
   12154:	cmp	r2, #46	; 0x2e
   12158:	bne	121e4 <__assert_fail@plt+0x10f8>
   1215c:	add	r0, r4, #2
   12160:	sub	r4, r3, #48	; 0x30
   12164:	bl	12060 <__assert_fail@plt+0xf74>
   12168:	mov	sl, r0
   1216c:	mov	r0, r8
   12170:	bl	15940 <__assert_fail@plt+0x4854>
   12174:	ldr	r3, [r6]
   12178:	cmp	r9, #0
   1217c:	stm	r0, {r4, sl}
   12180:	str	r5, [r0, #8]
   12184:	str	r0, [r6]
   12188:	str	r0, [r3, #8]
   1218c:	beq	121e0 <__assert_fail@plt+0x10f4>
   12190:	mov	r4, r9
   12194:	b	1211c <__assert_fail@plt+0x1030>
   12198:	ldrb	r3, [r4, #1]
   1219c:	cmp	r3, #0
   121a0:	bne	121e4 <__assert_fail@plt+0x10f8>
   121a4:	mov	r4, r3
   121a8:	mov	sl, r5
   121ac:	b	1216c <__assert_fail@plt+0x1080>
   121b0:	ldr	r1, [pc, #64]	; 121f8 <__assert_fail@plt+0x110c>
   121b4:	mov	r2, #5
   121b8:	mov	r0, #0
   121bc:	bl	10ee8 <dcgettext@plt>
   121c0:	mov	r5, r0
   121c4:	mov	r0, r4
   121c8:	bl	15364 <__assert_fail@plt+0x4278>
   121cc:	mov	r2, r5
   121d0:	mov	r1, #0
   121d4:	mov	r3, r0
   121d8:	mov	r0, #1
   121dc:	bl	10f54 <error@plt>
   121e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121e4:	mov	r2, #5
   121e8:	ldr	r1, [pc, #12]	; 121fc <__assert_fail@plt+0x1110>
   121ec:	b	121b8 <__assert_fail@plt+0x10cc>
   121f0:	andeq	r7, r1, r4, lsl r8
   121f4:	andeq	r9, r2, r4, lsl #2
   121f8:	andeq	r7, r1, r4, lsr r8
   121fc:	andeq	r7, r1, r8, lsl r8
   12200:	push	{r4, r5, r6, lr}
   12204:	ldr	ip, [sp, #16]
   12208:	cmp	ip, r0
   1220c:	ldr	r0, [sp, #20]
   12210:	bcs	12294 <__assert_fail@plt+0x11a8>
   12214:	ldr	lr, [r1]
   12218:	cmp	r0, r2
   1221c:	add	r2, lr, ip, lsl #3
   12220:	ldr	r5, [r2, #4]
   12224:	bcs	122bc <__assert_fail@plt+0x11d0>
   12228:	ldr	r3, [r3]
   1222c:	cmp	r5, #0
   12230:	add	r2, r3, r0, lsl #3
   12234:	ldr	r1, [r3, r0, lsl #3]
   12238:	ldr	r4, [r2, #4]
   1223c:	beq	122a8 <__assert_fail@plt+0x11bc>
   12240:	cmp	r4, #0
   12244:	beq	12300 <__assert_fail@plt+0x1214>
   12248:	ldr	r3, [pc, #184]	; 12308 <__assert_fail@plt+0x121c>
   1224c:	ldr	r0, [lr, ip, lsl #3]
   12250:	ldrb	ip, [r3, #8]
   12254:	cmp	ip, #0
   12258:	bne	122c8 <__assert_fail@plt+0x11dc>
   1225c:	ldrb	r3, [r3, #9]
   12260:	cmp	r3, #0
   12264:	bne	122e4 <__assert_fail@plt+0x11f8>
   12268:	cmp	r5, r4
   1226c:	movcc	r2, r5
   12270:	movcs	r2, r4
   12274:	bl	10ed0 <memcmp@plt>
   12278:	cmp	r0, #0
   1227c:	popne	{r4, r5, r6, pc}
   12280:	cmp	r5, r4
   12284:	bcc	122f8 <__assert_fail@plt+0x120c>
   12288:	movne	r0, #1
   1228c:	moveq	r0, #0
   12290:	pop	{r4, r5, r6, pc}
   12294:	cmp	r0, r2
   12298:	bcs	122b4 <__assert_fail@plt+0x11c8>
   1229c:	ldr	r3, [r3]
   122a0:	add	r0, r3, r0, lsl #3
   122a4:	ldr	r4, [r0, #4]
   122a8:	adds	r0, r4, #0
   122ac:	mvnne	r0, #0
   122b0:	pop	{r4, r5, r6, pc}
   122b4:	mov	r0, #0
   122b8:	pop	{r4, r5, r6, pc}
   122bc:	adds	r0, r5, #0
   122c0:	movne	r0, #1
   122c4:	pop	{r4, r5, r6, pc}
   122c8:	cmp	r5, r4
   122cc:	movcc	r2, r5
   122d0:	movcs	r2, r4
   122d4:	bl	13450 <__assert_fail@plt+0x2364>
   122d8:	cmp	r0, #0
   122dc:	beq	12280 <__assert_fail@plt+0x1194>
   122e0:	pop	{r4, r5, r6, pc}
   122e4:	mov	r3, r4
   122e8:	mov	r2, r1
   122ec:	mov	r1, r5
   122f0:	pop	{r4, r5, r6, lr}
   122f4:	b	15f94 <__assert_fail@plt+0x4ea8>
   122f8:	mvn	r0, #0
   122fc:	pop	{r4, r5, r6, pc}
   12300:	mov	r0, #1
   12304:	pop	{r4, r5, r6, pc}
   12308:	andeq	r9, r2, r8, lsl #3
   1230c:	cmp	r0, r1
   12310:	bcs	12328 <__assert_fail@plt+0x123c>
   12314:	ldr	r3, [r2]
   12318:	add	r2, r3, r0, lsl #3
   1231c:	ldr	r2, [r2, #4]
   12320:	cmp	r2, #0
   12324:	bne	12344 <__assert_fail@plt+0x1258>
   12328:	ldr	r3, [pc, #40]	; 12358 <__assert_fail@plt+0x126c>
   1232c:	ldr	r0, [r3, #12]
   12330:	cmp	r0, #0
   12334:	bxeq	lr
   12338:	ldr	r3, [pc, #28]	; 1235c <__assert_fail@plt+0x1270>
   1233c:	ldr	r1, [r3]
   12340:	b	10e4c <fputs_unlocked@plt>
   12344:	ldr	r1, [pc, #16]	; 1235c <__assert_fail@plt+0x1270>
   12348:	ldr	r0, [r3, r0, lsl #3]
   1234c:	ldr	r3, [r1]
   12350:	mov	r1, #1
   12354:	b	10ec4 <fwrite_unlocked@plt>
   12358:	andeq	r9, r2, r8, lsl #3
   1235c:	andeq	r9, r2, ip, ror r1
   12360:	ldr	r3, [pc, #284]	; 12484 <__assert_fail@plt+0x1398>
   12364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12368:	sub	sp, sp, #12
   1236c:	ldrb	r3, [r3, #16]
   12370:	str	r1, [sp]
   12374:	mov	r5, r0
   12378:	cmp	r3, #0
   1237c:	ldr	r3, [pc, #260]	; 12488 <__assert_fail@plt+0x139c>
   12380:	ldreq	r8, [r0, #12]
   12384:	movne	r8, r2
   12388:	ldr	fp, [r3, #4]
   1238c:	ldr	r3, [sp]
   12390:	cmp	fp, #0
   12394:	movlt	r7, #32
   12398:	uxtbge	r7, fp
   1239c:	movlt	fp, r7
   123a0:	cmp	r8, r3
   123a4:	movcc	r9, r8
   123a8:	movcs	r9, r3
   123ac:	cmp	r9, #0
   123b0:	beq	12414 <__assert_fail@plt+0x1328>
   123b4:	uxtb	r3, fp
   123b8:	ldr	r6, [pc, #204]	; 1248c <__assert_fail@plt+0x13a0>
   123bc:	str	r3, [sp, #4]
   123c0:	add	sl, r0, #20
   123c4:	mov	r4, #0
   123c8:	b	123e8 <__assert_fail@plt+0x12fc>
   123cc:	mov	r0, r4
   123d0:	mov	r2, sl
   123d4:	ldr	r1, [r5, #12]
   123d8:	add	r4, r4, #1
   123dc:	bl	1230c <__assert_fail@plt+0x1220>
   123e0:	cmp	r4, r9
   123e4:	beq	12414 <__assert_fail@plt+0x1328>
   123e8:	ldr	r0, [r6]
   123ec:	ldr	r3, [r0, #20]
   123f0:	ldr	r2, [r0, #24]
   123f4:	add	r1, r3, #1
   123f8:	cmp	r3, r2
   123fc:	strcc	r1, [r0, #20]
   12400:	strbcc	r7, [r3]
   12404:	bcc	123cc <__assert_fail@plt+0x12e0>
   12408:	ldr	r1, [sp, #4]
   1240c:	bl	11074 <__overflow@plt>
   12410:	b	123cc <__assert_fail@plt+0x12e0>
   12414:	ldr	r3, [sp]
   12418:	add	r4, r3, #1
   1241c:	cmp	r8, r4
   12420:	bls	1247c <__assert_fail@plt+0x1390>
   12424:	ldr	r6, [pc, #96]	; 1248c <__assert_fail@plt+0x13a0>
   12428:	uxtb	fp, fp
   1242c:	add	r9, r5, #20
   12430:	b	12450 <__assert_fail@plt+0x1364>
   12434:	mov	r0, r4
   12438:	mov	r2, r9
   1243c:	ldr	r1, [r5, #12]
   12440:	add	r4, r4, #1
   12444:	bl	1230c <__assert_fail@plt+0x1220>
   12448:	cmp	r8, r4
   1244c:	bls	1247c <__assert_fail@plt+0x1390>
   12450:	ldr	r0, [r6]
   12454:	ldr	r3, [r0, #20]
   12458:	ldr	r2, [r0, #24]
   1245c:	add	r1, r3, #1
   12460:	cmp	r3, r2
   12464:	strcc	r1, [r0, #20]
   12468:	strbcc	r7, [r3]
   1246c:	bcc	12434 <__assert_fail@plt+0x1348>
   12470:	mov	r1, fp
   12474:	bl	11074 <__overflow@plt>
   12478:	b	12434 <__assert_fail@plt+0x1348>
   1247c:	add	sp, sp, #12
   12480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12484:	andeq	r9, r2, r8, lsl #3
   12488:	andeq	r9, r2, r4, lsl #2
   1248c:	andeq	r9, r2, ip, ror r1
   12490:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12494:	mov	fp, r0
   12498:	ldr	r8, [pc, #312]	; 125d8 <__assert_fail@plt+0x14ec>
   1249c:	ldr	r7, [pc, #312]	; 125dc <__assert_fail@plt+0x14f0>
   124a0:	mov	r9, r1
   124a4:	ldr	sl, [r8, #4]
   124a8:	ldr	r4, [r7, #28]
   124ac:	cmp	sl, #0
   124b0:	movlt	r6, #32
   124b4:	uxtbge	r6, sl
   124b8:	movlt	sl, r6
   124bc:	cmp	r4, #0
   124c0:	beq	12570 <__assert_fail@plt+0x1484>
   124c4:	ldr	r5, [pc, #276]	; 125e0 <__assert_fail@plt+0x14f4>
   124c8:	add	r7, r7, #32
   124cc:	uxtb	sl, sl
   124d0:	b	1251c <__assert_fail@plt+0x1430>
   124d4:	cmp	fp, r7
   124d8:	moveq	r3, r9
   124dc:	ldreq	r0, [r8, #8]
   124e0:	ldrne	r0, [r8, #12]
   124e4:	add	r2, r3, #20
   124e8:	ldr	r1, [r3, #12]
   124ec:	bl	1230c <__assert_fail@plt+0x1220>
   124f0:	ldr	r4, [r4, #8]
   124f4:	ldr	r0, [r5]
   124f8:	cmp	r4, #0
   124fc:	beq	1254c <__assert_fail@plt+0x1460>
   12500:	ldr	r3, [r0, #20]
   12504:	ldr	r2, [r0, #24]
   12508:	add	r1, r3, #1
   1250c:	cmp	r3, r2
   12510:	strcc	r1, [r0, #20]
   12514:	strbcc	r6, [r3]
   12518:	bcs	12540 <__assert_fail@plt+0x1454>
   1251c:	ldr	r2, [r4]
   12520:	mov	r3, fp
   12524:	cmp	r2, #0
   12528:	beq	124d4 <__assert_fail@plt+0x13e8>
   1252c:	cmp	r2, #1
   12530:	ldr	r0, [r4, #4]
   12534:	movne	r3, r9
   12538:	moveq	r3, fp
   1253c:	b	124e4 <__assert_fail@plt+0x13f8>
   12540:	mov	r1, sl
   12544:	bl	11074 <__overflow@plt>
   12548:	b	1251c <__assert_fail@plt+0x1430>
   1254c:	ldr	r3, [r0, #20]
   12550:	ldr	r2, [r0, #24]
   12554:	ldrb	r1, [r8, #16]
   12558:	cmp	r3, r2
   1255c:	bcs	125d0 <__assert_fail@plt+0x14e4>
   12560:	add	r2, r3, #1
   12564:	str	r2, [r0, #20]
   12568:	strb	r1, [r3]
   1256c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12570:	add	r3, r7, #32
   12574:	cmp	r0, r3
   12578:	moveq	r3, r1
   1257c:	movne	r3, fp
   12580:	ldreq	r0, [r8, #8]
   12584:	ldrne	r0, [r8, #12]
   12588:	add	r2, r3, #20
   1258c:	ldr	r1, [r3, #12]
   12590:	bl	1230c <__assert_fail@plt+0x1220>
   12594:	mov	r0, fp
   12598:	ldr	r2, [r7, #56]	; 0x38
   1259c:	ldr	r1, [r8, #12]
   125a0:	bl	12360 <__assert_fail@plt+0x1274>
   125a4:	ldr	r2, [r7, #60]	; 0x3c
   125a8:	mov	r0, r9
   125ac:	ldr	r1, [r8, #8]
   125b0:	bl	12360 <__assert_fail@plt+0x1274>
   125b4:	ldr	r3, [pc, #36]	; 125e0 <__assert_fail@plt+0x14f4>
   125b8:	ldrb	r1, [r8, #16]
   125bc:	ldr	r0, [r3]
   125c0:	ldr	r3, [r0, #20]
   125c4:	ldr	r2, [r0, #24]
   125c8:	cmp	r3, r2
   125cc:	bcc	12560 <__assert_fail@plt+0x1474>
   125d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d4:	b	11074 <__overflow@plt>
   125d8:	andeq	r9, r2, r4, lsl #2
   125dc:	andeq	r9, r2, r8, lsl #3
   125e0:	andeq	r9, r2, ip, ror r1
   125e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e8:	sub	fp, r2, #1
   125ec:	ldr	r8, [pc, #920]	; 1298c <__assert_fail@plt+0x18a0>
   125f0:	sub	sp, sp, #36	; 0x24
   125f4:	lsl	r3, fp, #2
   125f8:	str	r3, [sp, #20]
   125fc:	add	r3, r8, r3
   12600:	ldr	r5, [r1]
   12604:	ldr	r3, [r3, #64]	; 0x40
   12608:	str	r2, [sp, #24]
   1260c:	cmp	r5, r3
   12610:	mov	r6, r1
   12614:	ldreq	r3, [r8, fp, lsl #2]
   12618:	streq	r5, [r8, fp, lsl #2]
   1261c:	moveq	r5, r3
   12620:	streq	r3, [r1]
   12624:	cmp	r5, #0
   12628:	mov	r4, r0
   1262c:	beq	12930 <__assert_fail@plt+0x1844>
   12630:	mov	r3, #0
   12634:	str	r3, [r5, #12]
   12638:	ldr	r9, [pc, #848]	; 12990 <__assert_fail@plt+0x18a4>
   1263c:	mov	r1, r4
   12640:	mov	r0, r5
   12644:	ldrb	r2, [r9, #16]
   12648:	bl	13334 <__assert_fail@plt+0x2248>
   1264c:	subs	r6, r0, #0
   12650:	beq	12814 <__assert_fail@plt+0x1728>
   12654:	lsl	r3, fp, #3
   12658:	add	r1, r8, r3
   1265c:	str	r3, [sp, #28]
   12660:	ldrd	r2, [r1, #72]	; 0x48
   12664:	ldr	r6, [r5, #4]
   12668:	ldr	r4, [r5, #8]
   1266c:	adds	r2, r2, #1
   12670:	sub	r6, r6, #1
   12674:	adc	r3, r3, #0
   12678:	add	r7, r4, r6
   1267c:	cmp	r4, r7
   12680:	strd	r2, [r1, #72]	; 0x48
   12684:	beq	126bc <__assert_fail@plt+0x15d0>
   12688:	ldr	r1, [r9, #4]
   1268c:	mvn	r3, r1
   12690:	cmp	r1, #10
   12694:	lsr	r3, r3, #31
   12698:	moveq	r3, #0
   1269c:	cmp	r3, #0
   126a0:	bne	127f8 <__assert_fail@plt+0x170c>
   126a4:	cmp	r1, #0
   126a8:	blt	12834 <__assert_fail@plt+0x1748>
   126ac:	mov	r2, r6
   126b0:	mov	r1, r4
   126b4:	mov	r0, r5
   126b8:	bl	11fb4 <__assert_fail@plt+0xec8>
   126bc:	ldr	r3, [sp, #20]
   126c0:	add	r3, r8, r3
   126c4:	ldr	r1, [r3, #64]	; 0x40
   126c8:	cmp	r1, #0
   126cc:	beq	127c8 <__assert_fail@plt+0x16dc>
   126d0:	ldr	r3, [r8, #88]	; 0x58
   126d4:	cmp	r3, #2
   126d8:	beq	127c8 <__assert_fail@plt+0x16dc>
   126dc:	cmp	r3, #1
   126e0:	beq	126f0 <__assert_fail@plt+0x1604>
   126e4:	ldrb	r3, [r8, #92]	; 0x5c
   126e8:	cmp	r3, #0
   126ec:	beq	127c8 <__assert_fail@plt+0x16dc>
   126f0:	add	r3, r8, fp
   126f4:	ldrb	r3, [r3, #96]	; 0x60
   126f8:	cmp	r3, #0
   126fc:	bne	127c8 <__assert_fail@plt+0x16dc>
   12700:	ldr	r3, [sp, #24]
   12704:	ldr	r0, [r1, #12]
   12708:	cmp	r3, #1
   1270c:	ldr	r2, [r5, #12]
   12710:	ldreq	r3, [r9, #12]
   12714:	ldrne	r3, [r9, #8]
   12718:	add	r1, r1, #20
   1271c:	str	r3, [sp, #4]
   12720:	str	r3, [sp]
   12724:	add	r3, r5, #20
   12728:	bl	12200 <__assert_fail@plt+0x1114>
   1272c:	cmp	r0, #0
   12730:	ble	127c8 <__assert_fail@plt+0x16dc>
   12734:	ldr	r3, [r5, #4]
   12738:	cmp	r3, #0
   1273c:	moveq	r4, r3
   12740:	beq	12764 <__assert_fail@plt+0x1678>
   12744:	ldr	r1, [r5, #8]
   12748:	sub	r2, r3, #1
   1274c:	ldrb	r1, [r1, r2]
   12750:	cmp	r1, #10
   12754:	moveq	r3, r2
   12758:	cmp	r3, #0
   1275c:	movge	r4, r3
   12760:	mvnlt	r4, #-2147483648	; 0x80000000
   12764:	mov	r2, #5
   12768:	ldr	r1, [pc, #548]	; 12994 <__assert_fail@plt+0x18a8>
   1276c:	mov	r0, #0
   12770:	ldr	r6, [r8, #88]	; 0x58
   12774:	bl	10ee8 <dcgettext@plt>
   12778:	ldr	r3, [sp, #28]
   1277c:	sub	r9, r6, #1
   12780:	add	r2, r8, r3
   12784:	ldr	r3, [sp, #20]
   12788:	ldrd	r6, [r2, #72]	; 0x48
   1278c:	add	r3, r8, r3
   12790:	ldr	r2, [r5, #8]
   12794:	clz	r9, r9
   12798:	lsr	r9, r9, #5
   1279c:	ldr	r3, [r3, #100]	; 0x64
   127a0:	mov	r1, #0
   127a4:	str	r2, [sp, #12]
   127a8:	strd	r6, [sp]
   127ac:	str	r4, [sp, #8]
   127b0:	add	fp, r8, fp
   127b4:	mov	r2, r0
   127b8:	mov	r0, r9
   127bc:	bl	10f54 <error@plt>
   127c0:	mov	r3, #1
   127c4:	strb	r3, [fp, #96]	; 0x60
   127c8:	ldr	r3, [sp, #20]
   127cc:	mov	r0, #1
   127d0:	add	r8, r8, r3
   127d4:	str	r5, [r8, #64]	; 0x40
   127d8:	add	sp, sp, #36	; 0x24
   127dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e0:	mov	r1, r4
   127e4:	sub	r2, sl, r4
   127e8:	mov	r0, r5
   127ec:	bl	11fb4 <__assert_fail@plt+0xec8>
   127f0:	ldr	r1, [r9, #4]
   127f4:	add	r4, sl, #1
   127f8:	sub	r6, r7, r4
   127fc:	mov	r2, r6
   12800:	mov	r0, r4
   12804:	bl	11038 <memchr@plt>
   12808:	subs	sl, r0, #0
   1280c:	bne	127e0 <__assert_fail@plt+0x16f4>
   12810:	b	126ac <__assert_fail@plt+0x15c0>
   12814:	ldr	r0, [r4]
   12818:	ands	r4, r0, #32
   1281c:	bne	12964 <__assert_fail@plt+0x1878>
   12820:	mov	r0, r5
   12824:	bl	11f48 <__assert_fail@plt+0xe5c>
   12828:	mov	r0, r4
   1282c:	add	sp, sp, #36	; 0x24
   12830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12834:	bl	10fb4 <__ctype_b_loc@plt>
   12838:	mov	r1, r4
   1283c:	mov	sl, r0
   12840:	ldr	r0, [r0]
   12844:	mov	r4, r1
   12848:	ldrb	r2, [r1], #1
   1284c:	lsl	r3, r2, #1
   12850:	ldrh	r3, [r0, r3]
   12854:	cmp	r2, #10
   12858:	orreq	r3, r3, #1
   1285c:	tst	r3, #1
   12860:	bne	12924 <__assert_fail@plt+0x1838>
   12864:	add	r6, r4, #1
   12868:	cmp	r7, r6
   1286c:	beq	12948 <__assert_fail@plt+0x185c>
   12870:	ldrb	r2, [r4, #1]
   12874:	lsl	r3, r2, #1
   12878:	ldrh	r3, [r0, r3]
   1287c:	cmp	r2, #10
   12880:	orreq	r3, r3, #1
   12884:	tst	r3, #1
   12888:	addeq	r1, r4, #2
   1288c:	bne	128b8 <__assert_fail@plt+0x17cc>
   12890:	cmp	r7, r1
   12894:	mov	r6, r1
   12898:	beq	12948 <__assert_fail@plt+0x185c>
   1289c:	ldrb	r2, [r1], #1
   128a0:	lsl	r3, r2, #1
   128a4:	ldrh	r3, [r0, r3]
   128a8:	cmp	r2, #10
   128ac:	orreq	r3, r3, #1
   128b0:	tst	r3, #1
   128b4:	beq	12890 <__assert_fail@plt+0x17a4>
   128b8:	sub	r2, r6, r4
   128bc:	mov	r1, r4
   128c0:	mov	r0, r5
   128c4:	add	r4, r6, #1
   128c8:	bl	11fb4 <__assert_fail@plt+0xec8>
   128cc:	cmp	r7, r4
   128d0:	beq	1295c <__assert_fail@plt+0x1870>
   128d4:	ldrb	r2, [r6, #1]
   128d8:	ldr	r0, [sl]
   128dc:	lsl	r3, r2, #1
   128e0:	ldrh	r3, [r0, r3]
   128e4:	cmp	r2, #10
   128e8:	orreq	r3, r3, #1
   128ec:	tst	r3, #1
   128f0:	beq	12864 <__assert_fail@plt+0x1778>
   128f4:	add	r6, r6, #2
   128f8:	cmp	r6, r7
   128fc:	mov	r4, r6
   12900:	beq	1295c <__assert_fail@plt+0x1870>
   12904:	ldrb	r2, [r6], #1
   12908:	lsl	r3, r2, #1
   1290c:	ldrh	r3, [r0, r3]
   12910:	cmp	r2, #10
   12914:	orreq	r3, r3, #1
   12918:	tst	r3, #1
   1291c:	beq	12864 <__assert_fail@plt+0x1778>
   12920:	b	128f8 <__assert_fail@plt+0x180c>
   12924:	cmp	r7, r1
   12928:	bne	12844 <__assert_fail@plt+0x1758>
   1292c:	b	126bc <__assert_fail@plt+0x15d0>
   12930:	mov	r1, #24
   12934:	mov	r0, #1
   12938:	bl	15da0 <__assert_fail@plt+0x4cb4>
   1293c:	mov	r5, r0
   12940:	str	r0, [r6]
   12944:	b	12638 <__assert_fail@plt+0x154c>
   12948:	sub	r2, r6, r4
   1294c:	mov	r1, r4
   12950:	mov	r0, r5
   12954:	bl	11fb4 <__assert_fail@plt+0xec8>
   12958:	b	126bc <__assert_fail@plt+0x15d0>
   1295c:	mov	r6, #0
   12960:	b	126ac <__assert_fail@plt+0x15c0>
   12964:	bl	10ff0 <__errno_location@plt>
   12968:	mov	r2, #5
   1296c:	ldr	r1, [pc, #36]	; 12998 <__assert_fail@plt+0x18ac>
   12970:	ldr	r4, [r0]
   12974:	mov	r0, r6
   12978:	bl	10ee8 <dcgettext@plt>
   1297c:	mov	r1, r4
   12980:	mov	r2, r0
   12984:	mov	r0, #1
   12988:	bl	10f54 <error@plt>
   1298c:	andeq	r9, r2, r8, lsl #3
   12990:	andeq	r9, r2, r4, lsl #2
   12994:	andeq	r7, r1, r8, ror #16
   12998:	andeq	r7, r1, ip, asr r8
   1299c:	push	{r4, r5, r6, lr}
   129a0:	mov	r4, r1
   129a4:	ldr	r3, [r1]
   129a8:	ldr	r1, [r1, #4]
   129ac:	mov	r5, r0
   129b0:	cmp	r3, r1
   129b4:	mov	r6, r2
   129b8:	beq	129e8 <__assert_fail@plt+0x18fc>
   129bc:	ldr	r0, [r4, #8]
   129c0:	lsl	r3, r3, #2
   129c4:	add	r1, r0, r3
   129c8:	mov	r2, r6
   129cc:	mov	r0, r5
   129d0:	bl	125e4 <__assert_fail@plt+0x14f8>
   129d4:	cmp	r0, #0
   129d8:	ldrne	r3, [r4]
   129dc:	addne	r3, r3, #1
   129e0:	strne	r3, [r4]
   129e4:	pop	{r4, r5, r6, pc}
   129e8:	mov	r2, #4
   129ec:	add	r1, r4, r2
   129f0:	ldr	r0, [r4, #8]
   129f4:	bl	15a48 <__assert_fail@plt+0x495c>
   129f8:	ldr	r3, [r4]
   129fc:	ldr	r1, [r4, #4]
   12a00:	cmp	r3, r1
   12a04:	lsl	r3, r3, #2
   12a08:	str	r0, [r4, #8]
   12a0c:	bcs	129c4 <__assert_fail@plt+0x18d8>
   12a10:	add	r1, r0, r1, lsl #2
   12a14:	add	r2, r0, r3
   12a18:	mov	ip, #0
   12a1c:	str	ip, [r2], #4
   12a20:	cmp	r2, r1
   12a24:	bne	12a1c <__assert_fail@plt+0x1930>
   12a28:	b	129c4 <__assert_fail@plt+0x18d8>
   12a2c:	subs	r5, r0, #0
   12a30:	push	{r7, lr}
   12a34:	sub	sp, sp, #56	; 0x38
   12a38:	beq	12a74 <__assert_fail@plt+0x1988>
   12a3c:	ldr	r3, [pc, #756]	; 12d38 <__assert_fail@plt+0x1c4c>
   12a40:	mov	r2, #5
   12a44:	ldr	r1, [pc, #752]	; 12d3c <__assert_fail@plt+0x1c50>
   12a48:	mov	r0, #0
   12a4c:	ldr	r4, [r3]
   12a50:	bl	10ee8 <dcgettext@plt>
   12a54:	ldr	r3, [pc, #740]	; 12d40 <__assert_fail@plt+0x1c54>
   12a58:	mov	r1, #1
   12a5c:	ldr	r3, [r3]
   12a60:	mov	r2, r0
   12a64:	mov	r0, r4
   12a68:	bl	1102c <__fprintf_chk@plt>
   12a6c:	mov	r0, r5
   12a70:	bl	10fc0 <exit@plt>
   12a74:	mov	r2, #5
   12a78:	ldr	r1, [pc, #708]	; 12d44 <__assert_fail@plt+0x1c58>
   12a7c:	bl	10ee8 <dcgettext@plt>
   12a80:	ldr	r3, [pc, #696]	; 12d40 <__assert_fail@plt+0x1c54>
   12a84:	ldr	r7, [pc, #700]	; 12d48 <__assert_fail@plt+0x1c5c>
   12a88:	ldr	r4, [pc, #700]	; 12d4c <__assert_fail@plt+0x1c60>
   12a8c:	ldr	r2, [r3]
   12a90:	mov	r1, r0
   12a94:	mov	r0, #1
   12a98:	bl	11014 <__printf_chk@plt>
   12a9c:	mov	r2, #5
   12aa0:	ldr	r1, [pc, #680]	; 12d50 <__assert_fail@plt+0x1c64>
   12aa4:	mov	r0, r5
   12aa8:	bl	10ee8 <dcgettext@plt>
   12aac:	ldr	r1, [r7]
   12ab0:	bl	10e4c <fputs_unlocked@plt>
   12ab4:	mov	r2, #5
   12ab8:	ldr	r1, [pc, #660]	; 12d54 <__assert_fail@plt+0x1c68>
   12abc:	mov	r0, r5
   12ac0:	bl	10ee8 <dcgettext@plt>
   12ac4:	ldr	r1, [r7]
   12ac8:	bl	10e4c <fputs_unlocked@plt>
   12acc:	mov	r2, #5
   12ad0:	ldr	r1, [pc, #640]	; 12d58 <__assert_fail@plt+0x1c6c>
   12ad4:	mov	r0, r5
   12ad8:	bl	10ee8 <dcgettext@plt>
   12adc:	ldr	r1, [r7]
   12ae0:	bl	10e4c <fputs_unlocked@plt>
   12ae4:	mov	r2, #5
   12ae8:	ldr	r1, [pc, #620]	; 12d5c <__assert_fail@plt+0x1c70>
   12aec:	mov	r0, r5
   12af0:	bl	10ee8 <dcgettext@plt>
   12af4:	ldr	r1, [r7]
   12af8:	bl	10e4c <fputs_unlocked@plt>
   12afc:	mov	r2, #5
   12b00:	ldr	r1, [pc, #600]	; 12d60 <__assert_fail@plt+0x1c74>
   12b04:	mov	r0, r5
   12b08:	bl	10ee8 <dcgettext@plt>
   12b0c:	ldr	r1, [r7]
   12b10:	bl	10e4c <fputs_unlocked@plt>
   12b14:	mov	r2, #5
   12b18:	ldr	r1, [pc, #580]	; 12d64 <__assert_fail@plt+0x1c78>
   12b1c:	mov	r0, r5
   12b20:	bl	10ee8 <dcgettext@plt>
   12b24:	ldr	r1, [r7]
   12b28:	bl	10e4c <fputs_unlocked@plt>
   12b2c:	mov	r2, #5
   12b30:	ldr	r1, [pc, #560]	; 12d68 <__assert_fail@plt+0x1c7c>
   12b34:	mov	r0, r5
   12b38:	bl	10ee8 <dcgettext@plt>
   12b3c:	ldr	r1, [r7]
   12b40:	bl	10e4c <fputs_unlocked@plt>
   12b44:	mov	r2, #5
   12b48:	ldr	r1, [pc, #540]	; 12d6c <__assert_fail@plt+0x1c80>
   12b4c:	mov	r0, r5
   12b50:	bl	10ee8 <dcgettext@plt>
   12b54:	ldr	r1, [r7]
   12b58:	bl	10e4c <fputs_unlocked@plt>
   12b5c:	mov	r2, #5
   12b60:	ldr	r1, [pc, #520]	; 12d70 <__assert_fail@plt+0x1c84>
   12b64:	mov	r0, r5
   12b68:	bl	10ee8 <dcgettext@plt>
   12b6c:	ldr	r1, [r7]
   12b70:	bl	10e4c <fputs_unlocked@plt>
   12b74:	ldm	r4!, {r0, r1, r2, r3}
   12b78:	mov	lr, sp
   12b7c:	stmia	lr!, {r0, r1, r2, r3}
   12b80:	ldm	r4!, {r0, r1, r2, r3}
   12b84:	ldr	ip, [sp]
   12b88:	stmia	lr!, {r0, r1, r2, r3}
   12b8c:	cmp	ip, #0
   12b90:	ldm	r4!, {r0, r1, r2, r3}
   12b94:	stmia	lr!, {r0, r1, r2, r3}
   12b98:	ldm	r4, {r0, r1}
   12b9c:	moveq	r4, sp
   12ba0:	stm	lr, {r0, r1}
   12ba4:	beq	12bd4 <__assert_fail@plt+0x1ae8>
   12ba8:	ldr	r6, [pc, #452]	; 12d74 <__assert_fail@plt+0x1c88>
   12bac:	mov	r4, sp
   12bb0:	b	12bc0 <__assert_fail@plt+0x1ad4>
   12bb4:	ldr	ip, [r4, #8]!
   12bb8:	cmp	ip, #0
   12bbc:	beq	12bd4 <__assert_fail@plt+0x1ae8>
   12bc0:	mov	r1, ip
   12bc4:	mov	r0, r6
   12bc8:	bl	10e64 <strcmp@plt>
   12bcc:	cmp	r0, #0
   12bd0:	bne	12bb4 <__assert_fail@plt+0x1ac8>
   12bd4:	ldr	r4, [r4, #4]
   12bd8:	mov	r2, #5
   12bdc:	cmp	r4, #0
   12be0:	ldr	r1, [pc, #400]	; 12d78 <__assert_fail@plt+0x1c8c>
   12be4:	beq	12c8c <__assert_fail@plt+0x1ba0>
   12be8:	mov	r0, #0
   12bec:	bl	10ee8 <dcgettext@plt>
   12bf0:	ldr	r3, [pc, #388]	; 12d7c <__assert_fail@plt+0x1c90>
   12bf4:	ldr	r2, [pc, #388]	; 12d80 <__assert_fail@plt+0x1c94>
   12bf8:	mov	r1, r0
   12bfc:	mov	r0, #1
   12c00:	bl	11014 <__printf_chk@plt>
   12c04:	mov	r1, #0
   12c08:	mov	r0, #5
   12c0c:	bl	11080 <setlocale@plt>
   12c10:	cmp	r0, #0
   12c14:	ldreq	r6, [pc, #344]	; 12d74 <__assert_fail@plt+0x1c88>
   12c18:	beq	12c34 <__assert_fail@plt+0x1b48>
   12c1c:	mov	r2, #3
   12c20:	ldr	r1, [pc, #348]	; 12d84 <__assert_fail@plt+0x1c98>
   12c24:	bl	110c8 <strncmp@plt>
   12c28:	ldr	r6, [pc, #324]	; 12d74 <__assert_fail@plt+0x1c88>
   12c2c:	cmp	r0, #0
   12c30:	bne	12d1c <__assert_fail@plt+0x1c30>
   12c34:	mov	r2, #5
   12c38:	ldr	r1, [pc, #328]	; 12d88 <__assert_fail@plt+0x1c9c>
   12c3c:	mov	r0, #0
   12c40:	bl	10ee8 <dcgettext@plt>
   12c44:	ldr	r3, [pc, #296]	; 12d74 <__assert_fail@plt+0x1c88>
   12c48:	ldr	r2, [pc, #300]	; 12d7c <__assert_fail@plt+0x1c90>
   12c4c:	mov	r1, r0
   12c50:	mov	r0, #1
   12c54:	bl	11014 <__printf_chk@plt>
   12c58:	mov	r2, #5
   12c5c:	ldr	r1, [pc, #296]	; 12d8c <__assert_fail@plt+0x1ca0>
   12c60:	mov	r0, #0
   12c64:	bl	10ee8 <dcgettext@plt>
   12c68:	ldr	r2, [pc, #288]	; 12d90 <__assert_fail@plt+0x1ca4>
   12c6c:	cmp	r4, r6
   12c70:	ldr	r3, [pc, #284]	; 12d94 <__assert_fail@plt+0x1ca8>
   12c74:	movne	r3, r2
   12c78:	mov	r1, r0
   12c7c:	mov	r2, r4
   12c80:	mov	r0, #1
   12c84:	bl	11014 <__printf_chk@plt>
   12c88:	b	12a6c <__assert_fail@plt+0x1980>
   12c8c:	mov	r0, r4
   12c90:	bl	10ee8 <dcgettext@plt>
   12c94:	ldr	r3, [pc, #224]	; 12d7c <__assert_fail@plt+0x1c90>
   12c98:	ldr	r2, [pc, #224]	; 12d80 <__assert_fail@plt+0x1c94>
   12c9c:	mov	r1, r0
   12ca0:	mov	r0, #1
   12ca4:	bl	11014 <__printf_chk@plt>
   12ca8:	mov	r1, r4
   12cac:	mov	r0, #5
   12cb0:	bl	11080 <setlocale@plt>
   12cb4:	cmp	r0, #0
   12cb8:	beq	12cd0 <__assert_fail@plt+0x1be4>
   12cbc:	mov	r2, #3
   12cc0:	ldr	r1, [pc, #188]	; 12d84 <__assert_fail@plt+0x1c98>
   12cc4:	bl	110c8 <strncmp@plt>
   12cc8:	cmp	r0, #0
   12ccc:	bne	12d14 <__assert_fail@plt+0x1c28>
   12cd0:	mov	r2, #5
   12cd4:	ldr	r1, [pc, #172]	; 12d88 <__assert_fail@plt+0x1c9c>
   12cd8:	mov	r0, #0
   12cdc:	bl	10ee8 <dcgettext@plt>
   12ce0:	ldr	r3, [pc, #140]	; 12d74 <__assert_fail@plt+0x1c88>
   12ce4:	ldr	r2, [pc, #144]	; 12d7c <__assert_fail@plt+0x1c90>
   12ce8:	mov	r4, r3
   12cec:	mov	r1, r0
   12cf0:	mov	r0, #1
   12cf4:	bl	11014 <__printf_chk@plt>
   12cf8:	ldr	r1, [pc, #140]	; 12d8c <__assert_fail@plt+0x1ca0>
   12cfc:	mov	r2, #5
   12d00:	mov	r0, #0
   12d04:	bl	10ee8 <dcgettext@plt>
   12d08:	ldr	r3, [pc, #132]	; 12d94 <__assert_fail@plt+0x1ca8>
   12d0c:	mov	r1, r0
   12d10:	b	12c7c <__assert_fail@plt+0x1b90>
   12d14:	ldr	r6, [pc, #88]	; 12d74 <__assert_fail@plt+0x1c88>
   12d18:	mov	r4, r6
   12d1c:	mov	r2, #5
   12d20:	ldr	r1, [pc, #112]	; 12d98 <__assert_fail@plt+0x1cac>
   12d24:	mov	r0, #0
   12d28:	bl	10ee8 <dcgettext@plt>
   12d2c:	ldr	r1, [r7]
   12d30:	bl	10e4c <fputs_unlocked@plt>
   12d34:	b	12c34 <__assert_fail@plt+0x1b48>
   12d38:	andeq	r9, r2, r0, ror r1
   12d3c:	muleq	r1, r0, r8
   12d40:	andeq	r9, r2, r0, lsl #4
   12d44:			; <UNDEFINED> instruction: 0x000178b8
   12d48:	andeq	r9, r2, ip, ror r1
   12d4c:	andeq	r7, r1, ip, lsl r7
   12d50:	ldrdeq	r7, [r1], -ip
   12d54:	andeq	r7, r1, r4, ror r9
   12d58:			; <UNDEFINED> instruction: 0x000179b0
   12d5c:	muleq	r1, r0, sl
   12d60:	andeq	r7, r1, r0, lsr #23
   12d64:			; <UNDEFINED> instruction: 0x00017db4
   12d68:	strdeq	r7, [r1], -r4
   12d6c:	andeq	r7, r1, r4, lsr #28
   12d70:	andeq	r7, r1, ip, asr lr
   12d74:	andeq	r7, r1, r8, lsl #17
   12d78:	muleq	r1, r0, r1
   12d7c:	andeq	r8, r1, r8, lsr #3
   12d80:	ldrdeq	r8, [r1], -r0
   12d84:	andeq	r8, r1, r0, ror #3
   12d88:	andeq	r8, r1, ip, lsr #4
   12d8c:	andeq	r8, r1, r8, asr #4
   12d90:	strdeq	r7, [r1], -r0
   12d94:	andeq	r8, r1, ip, lsr #7
   12d98:	andeq	r8, r1, r4, ror #3
   12d9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12da0:	sub	sp, sp, #12
   12da4:	ldr	r4, [r3]
   12da8:	mov	r8, r0
   12dac:	cmp	r4, #2
   12db0:	mov	r7, r1
   12db4:	ldr	r6, [sp, #40]	; 0x28
   12db8:	beq	12df4 <__assert_fail@plt+0x1d08>
   12dbc:	ldr	r5, [pc, #284]	; 12ee0 <__assert_fail@plt+0x1df4>
   12dc0:	lsl	r2, r4, #2
   12dc4:	add	r4, r4, #1
   12dc8:	ldr	r1, [r6]
   12dcc:	add	r5, r5, r2
   12dd0:	str	r1, [r7, r2]
   12dd4:	str	r8, [r5, #100]	; 0x64
   12dd8:	str	r4, [r3]
   12ddc:	ldr	r3, [r6]
   12de0:	cmp	r3, #3
   12de4:	ldreq	r2, [sp, #44]	; 0x2c
   12de8:	streq	r3, [r2]
   12dec:	add	sp, sp, #12
   12df0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12df4:	ldr	r9, [r1]
   12df8:	ldr	r5, [pc, #224]	; 12ee0 <__assert_fail@plt+0x1df4>
   12dfc:	clz	r1, r9
   12e00:	lsr	r1, r1, #5
   12e04:	add	r0, r5, r1, lsl #2
   12e08:	ldr	r1, [r7, r1, lsl #2]
   12e0c:	ldr	r0, [r0, #100]	; 0x64
   12e10:	cmp	r1, #3
   12e14:	ldrls	pc, [pc, r1, lsl #2]
   12e18:	b	12e38 <__assert_fail@plt+0x1d4c>
   12e1c:	andeq	r2, r1, r4, lsr #29
   12e20:	andeq	r2, r1, ip, ror lr
   12e24:	andeq	r2, r1, r4, asr lr
   12e28:	andeq	r2, r1, ip, lsr #28
   12e2c:	str	r3, [sp, #4]
   12e30:	bl	12104 <__assert_fail@plt+0x1018>
   12e34:	ldr	r3, [sp, #4]
   12e38:	cmp	r9, #0
   12e3c:	ldrne	r2, [r5, #104]	; 0x68
   12e40:	ldrne	r1, [r7, #4]
   12e44:	strne	r1, [r7]
   12e48:	strne	r2, [r5, #100]	; 0x64
   12e4c:	mov	r2, #4
   12e50:	b	12dc8 <__assert_fail@plt+0x1cdc>
   12e54:	ldr	r1, [r2, #4]
   12e58:	str	r3, [sp, #4]
   12e5c:	sub	r1, r1, #1
   12e60:	str	r1, [r2, #4]
   12e64:	bl	12060 <__assert_fail@plt+0xf74>
   12e68:	mov	r1, r0
   12e6c:	ldr	r0, [pc, #112]	; 12ee4 <__assert_fail@plt+0x1df8>
   12e70:	bl	11ef0 <__assert_fail@plt+0xe04>
   12e74:	ldr	r3, [sp, #4]
   12e78:	b	12e38 <__assert_fail@plt+0x1d4c>
   12e7c:	ldr	r1, [r2]
   12e80:	str	r3, [sp, #4]
   12e84:	sub	r1, r1, #1
   12e88:	str	r1, [r2]
   12e8c:	bl	12060 <__assert_fail@plt+0xf74>
   12e90:	mov	r1, r0
   12e94:	ldr	r0, [pc, #76]	; 12ee8 <__assert_fail@plt+0x1dfc>
   12e98:	bl	11ef0 <__assert_fail@plt+0xe04>
   12e9c:	ldr	r3, [sp, #4]
   12ea0:	b	12e38 <__assert_fail@plt+0x1d4c>
   12ea4:	mov	r2, #5
   12ea8:	ldr	r1, [pc, #60]	; 12eec <__assert_fail@plt+0x1e00>
   12eac:	mov	r0, #0
   12eb0:	bl	10ee8 <dcgettext@plt>
   12eb4:	mov	r1, r8
   12eb8:	mov	r4, r0
   12ebc:	mov	r0, #4
   12ec0:	bl	15124 <__assert_fail@plt+0x4038>
   12ec4:	mov	r1, #0
   12ec8:	mov	r2, r4
   12ecc:	mov	r3, r0
   12ed0:	mov	r0, r1
   12ed4:	bl	10f54 <error@plt>
   12ed8:	mov	r0, #1
   12edc:	bl	12a2c <__assert_fail@plt+0x1940>
   12ee0:	andeq	r9, r2, r8, lsl #3
   12ee4:	andeq	r9, r2, ip, lsl #2
   12ee8:	andeq	r9, r2, r0, lsl r1
   12eec:	andeq	r8, r1, ip, ror r2
   12ef0:	ldr	r3, [pc, #4]	; 12efc <__assert_fail@plt+0x1e10>
   12ef4:	str	r0, [r3]
   12ef8:	bx	lr
   12efc:	strdeq	r9, [r2], -r8
   12f00:	ldr	r3, [pc, #4]	; 12f0c <__assert_fail@plt+0x1e20>
   12f04:	strb	r0, [r3, #4]
   12f08:	bx	lr
   12f0c:	strdeq	r9, [r2], -r8
   12f10:	ldr	r3, [pc, #192]	; 12fd8 <__assert_fail@plt+0x1eec>
   12f14:	push	{r4, r5, r6, lr}
   12f18:	sub	sp, sp, #8
   12f1c:	ldr	r0, [r3]
   12f20:	bl	16c48 <__assert_fail@plt+0x5b5c>
   12f24:	cmp	r0, #0
   12f28:	beq	12f4c <__assert_fail@plt+0x1e60>
   12f2c:	ldr	r4, [pc, #168]	; 12fdc <__assert_fail@plt+0x1ef0>
   12f30:	ldrb	r3, [r4, #4]
   12f34:	cmp	r3, #0
   12f38:	beq	12f68 <__assert_fail@plt+0x1e7c>
   12f3c:	bl	10ff0 <__errno_location@plt>
   12f40:	ldr	r3, [r0]
   12f44:	cmp	r3, #32
   12f48:	bne	12f68 <__assert_fail@plt+0x1e7c>
   12f4c:	ldr	r3, [pc, #140]	; 12fe0 <__assert_fail@plt+0x1ef4>
   12f50:	ldr	r0, [r3]
   12f54:	bl	16c48 <__assert_fail@plt+0x5b5c>
   12f58:	cmp	r0, #0
   12f5c:	bne	12fb0 <__assert_fail@plt+0x1ec4>
   12f60:	add	sp, sp, #8
   12f64:	pop	{r4, r5, r6, pc}
   12f68:	mov	r2, #5
   12f6c:	ldr	r1, [pc, #112]	; 12fe4 <__assert_fail@plt+0x1ef8>
   12f70:	mov	r0, #0
   12f74:	bl	10ee8 <dcgettext@plt>
   12f78:	ldr	r4, [r4]
   12f7c:	cmp	r4, #0
   12f80:	mov	r5, r0
   12f84:	beq	12fbc <__assert_fail@plt+0x1ed0>
   12f88:	bl	10ff0 <__errno_location@plt>
   12f8c:	ldr	r6, [r0]
   12f90:	mov	r0, r4
   12f94:	bl	151cc <__assert_fail@plt+0x40e0>
   12f98:	mov	r1, r6
   12f9c:	str	r5, [sp]
   12fa0:	ldr	r2, [pc, #64]	; 12fe8 <__assert_fail@plt+0x1efc>
   12fa4:	mov	r3, r0
   12fa8:	mov	r0, #0
   12fac:	bl	10f54 <error@plt>
   12fb0:	ldr	r3, [pc, #52]	; 12fec <__assert_fail@plt+0x1f00>
   12fb4:	ldr	r0, [r3]
   12fb8:	bl	10e94 <_exit@plt>
   12fbc:	bl	10ff0 <__errno_location@plt>
   12fc0:	mov	r3, r5
   12fc4:	ldr	r2, [pc, #36]	; 12ff0 <__assert_fail@plt+0x1f04>
   12fc8:	ldr	r1, [r0]
   12fcc:	mov	r0, r4
   12fd0:	bl	10f54 <error@plt>
   12fd4:	b	12fb0 <__assert_fail@plt+0x1ec4>
   12fd8:	andeq	r9, r2, ip, ror r1
   12fdc:	strdeq	r9, [r2], -r8
   12fe0:	andeq	r9, r2, r0, ror r1
   12fe4:	andeq	r8, r1, r0, ror r4
   12fe8:	andeq	r8, r1, ip, ror r4
   12fec:	andeq	r9, r2, ip, lsl r1
   12ff0:	andeq	r8, r1, r0, lsl #9
   12ff4:	push	{r4, r5}
   12ff8:	pop	{r4, r5}
   12ffc:	b	10e70 <posix_fadvise64@plt>
   13000:	cmp	r0, #0
   13004:	bxeq	lr
   13008:	push	{r4, lr}
   1300c:	sub	sp, sp, #16
   13010:	mov	r4, r1
   13014:	bl	11020 <fileno@plt>
   13018:	mov	r2, #0
   1301c:	mov	r3, #0
   13020:	str	r4, [sp, #8]
   13024:	strd	r2, [sp]
   13028:	bl	10e70 <posix_fadvise64@plt>
   1302c:	add	sp, sp, #16
   13030:	pop	{r4, pc}
   13034:	push	{r4, r5, lr}
   13038:	sub	sp, sp, #12
   1303c:	mov	r4, r0
   13040:	bl	11020 <fileno@plt>
   13044:	cmp	r0, #0
   13048:	mov	r0, r4
   1304c:	blt	130c8 <__assert_fail@plt+0x1fdc>
   13050:	bl	10f84 <__freading@plt>
   13054:	cmp	r0, #0
   13058:	bne	13094 <__assert_fail@plt+0x1fa8>
   1305c:	mov	r0, r4
   13060:	bl	130d4 <__assert_fail@plt+0x1fe8>
   13064:	cmp	r0, #0
   13068:	beq	130c4 <__assert_fail@plt+0x1fd8>
   1306c:	bl	10ff0 <__errno_location@plt>
   13070:	mov	r5, r0
   13074:	mov	r0, r4
   13078:	ldr	r4, [r5]
   1307c:	bl	11044 <fclose@plt>
   13080:	cmp	r4, #0
   13084:	mvnne	r0, #0
   13088:	strne	r4, [r5]
   1308c:	add	sp, sp, #12
   13090:	pop	{r4, r5, pc}
   13094:	mov	r0, r4
   13098:	bl	11020 <fileno@plt>
   1309c:	mov	r3, #1
   130a0:	str	r3, [sp]
   130a4:	mov	r2, #0
   130a8:	mov	r3, #0
   130ac:	bl	10f24 <lseek64@plt>
   130b0:	mvn	r3, #0
   130b4:	mvn	r2, #0
   130b8:	cmp	r1, r3
   130bc:	cmpeq	r0, r2
   130c0:	bne	1305c <__assert_fail@plt+0x1f70>
   130c4:	mov	r0, r4
   130c8:	add	sp, sp, #12
   130cc:	pop	{r4, r5, lr}
   130d0:	b	11044 <fclose@plt>
   130d4:	push	{r4, lr}
   130d8:	subs	r4, r0, #0
   130dc:	sub	sp, sp, #8
   130e0:	beq	130fc <__assert_fail@plt+0x2010>
   130e4:	bl	10f84 <__freading@plt>
   130e8:	cmp	r0, #0
   130ec:	beq	130fc <__assert_fail@plt+0x2010>
   130f0:	ldr	r3, [r4]
   130f4:	tst	r3, #256	; 0x100
   130f8:	bne	1310c <__assert_fail@plt+0x2020>
   130fc:	mov	r0, r4
   13100:	add	sp, sp, #8
   13104:	pop	{r4, lr}
   13108:	b	10e7c <fflush@plt>
   1310c:	mov	r3, #1
   13110:	str	r3, [sp]
   13114:	mov	r2, #0
   13118:	mov	r3, #0
   1311c:	mov	r0, r4
   13120:	bl	13224 <__assert_fail@plt+0x2138>
   13124:	mov	r0, r4
   13128:	add	sp, sp, #8
   1312c:	pop	{r4, lr}
   13130:	b	10e7c <fflush@plt>
   13134:	push	{r4, r5, r6, lr}
   13138:	mov	r5, r1
   1313c:	bl	110a4 <fopen64@plt>
   13140:	subs	r4, r0, #0
   13144:	beq	13154 <__assert_fail@plt+0x2068>
   13148:	bl	11020 <fileno@plt>
   1314c:	cmp	r0, #2
   13150:	bls	1315c <__assert_fail@plt+0x2070>
   13154:	mov	r0, r4
   13158:	pop	{r4, r5, r6, pc}
   1315c:	bl	15414 <__assert_fail@plt+0x4328>
   13160:	subs	r6, r0, #0
   13164:	blt	131ac <__assert_fail@plt+0x20c0>
   13168:	mov	r0, r4
   1316c:	bl	13034 <__assert_fail@plt+0x1f48>
   13170:	cmp	r0, #0
   13174:	bne	1318c <__assert_fail@plt+0x20a0>
   13178:	mov	r1, r5
   1317c:	mov	r0, r6
   13180:	bl	10e34 <fdopen@plt>
   13184:	subs	r4, r0, #0
   13188:	bne	13154 <__assert_fail@plt+0x2068>
   1318c:	bl	10ff0 <__errno_location@plt>
   13190:	mov	r4, #0
   13194:	mov	r5, r0
   13198:	mov	r0, r6
   1319c:	ldr	r6, [r5]
   131a0:	bl	110e0 <close@plt>
   131a4:	str	r6, [r5]
   131a8:	b	13154 <__assert_fail@plt+0x2068>
   131ac:	bl	10ff0 <__errno_location@plt>
   131b0:	mov	r5, r0
   131b4:	mov	r0, r4
   131b8:	ldr	r6, [r5]
   131bc:	mov	r4, #0
   131c0:	bl	13034 <__assert_fail@plt+0x1f48>
   131c4:	str	r6, [r5]
   131c8:	b	13154 <__assert_fail@plt+0x2068>
   131cc:	push	{r4, r5, lr}
   131d0:	sub	sp, sp, #12
   131d4:	mov	r5, r0
   131d8:	bl	10ff0 <__errno_location@plt>
   131dc:	mov	r2, #0
   131e0:	mov	r4, r0
   131e4:	ldr	r3, [r0]
   131e8:	str	r2, [r4]
   131ec:	mov	r0, r5
   131f0:	str	r3, [sp]
   131f4:	str	r3, [sp, #4]
   131f8:	bl	10e88 <free@plt>
   131fc:	ldr	r3, [r4]
   13200:	add	r2, sp, #8
   13204:	cmp	r3, #0
   13208:	moveq	r3, #4
   1320c:	movne	r3, #0
   13210:	add	r3, r2, r3
   13214:	ldr	r3, [r3, #-8]
   13218:	str	r3, [r4]
   1321c:	add	sp, sp, #12
   13220:	pop	{r4, r5, pc}
   13224:	push	{r4, r5, r6, r7, r8, lr}
   13228:	sub	sp, sp, #8
   1322c:	ldmib	r0, {ip, lr}
   13230:	mov	r4, r0
   13234:	ldr	r5, [sp, #32]
   13238:	cmp	lr, ip
   1323c:	beq	13254 <__assert_fail@plt+0x2168>
   13240:	str	r5, [sp, #32]
   13244:	mov	r0, r4
   13248:	add	sp, sp, #8
   1324c:	pop	{r4, r5, r6, r7, r8, lr}
   13250:	b	11050 <fseeko64@plt>
   13254:	ldr	lr, [r0, #20]
   13258:	ldr	ip, [r0, #16]
   1325c:	cmp	lr, ip
   13260:	bne	13240 <__assert_fail@plt+0x2154>
   13264:	ldr	r8, [r0, #36]	; 0x24
   13268:	cmp	r8, #0
   1326c:	bne	13240 <__assert_fail@plt+0x2154>
   13270:	mov	r6, r2
   13274:	mov	r7, r3
   13278:	bl	11020 <fileno@plt>
   1327c:	mov	r2, r6
   13280:	mov	r3, r7
   13284:	str	r5, [sp]
   13288:	bl	10f24 <lseek64@plt>
   1328c:	mvn	r3, #0
   13290:	mvn	r2, #0
   13294:	cmp	r1, r3
   13298:	cmpeq	r0, r2
   1329c:	beq	132bc <__assert_fail@plt+0x21d0>
   132a0:	ldr	r3, [r4]
   132a4:	strd	r0, [r4, #80]	; 0x50
   132a8:	mov	r0, r8
   132ac:	bic	r3, r3, #16
   132b0:	str	r3, [r4]
   132b4:	add	sp, sp, #8
   132b8:	pop	{r4, r5, r6, r7, r8, pc}
   132bc:	mvn	r0, #0
   132c0:	b	132b4 <__assert_fail@plt+0x21c8>
   132c4:	push	{lr}		; (str lr, [sp, #-4]!)
   132c8:	sub	sp, sp, #268	; 0x10c
   132cc:	add	r1, sp, #4
   132d0:	ldr	r2, [pc, #60]	; 13314 <__assert_fail@plt+0x2228>
   132d4:	bl	1537c <__assert_fail@plt+0x4290>
   132d8:	cmp	r0, #0
   132dc:	movne	r0, #0
   132e0:	bne	1330c <__assert_fail@plt+0x2220>
   132e4:	ldr	r1, [pc, #44]	; 13318 <__assert_fail@plt+0x222c>
   132e8:	add	r0, sp, #4
   132ec:	bl	10e64 <strcmp@plt>
   132f0:	cmp	r0, #0
   132f4:	beq	1330c <__assert_fail@plt+0x2220>
   132f8:	add	r0, sp, #4
   132fc:	ldr	r1, [pc, #24]	; 1331c <__assert_fail@plt+0x2230>
   13300:	bl	10e64 <strcmp@plt>
   13304:	adds	r0, r0, #0
   13308:	movne	r0, #1
   1330c:	add	sp, sp, #268	; 0x10c
   13310:	pop	{pc}		; (ldr pc, [sp], #4)
   13314:	andeq	r0, r0, r1, lsl #2
   13318:	andeq	r8, r1, r4, lsl #9
   1331c:	andeq	r8, r1, r8, lsl #9
   13320:	mov	r3, #0
   13324:	str	r3, [r0]
   13328:	str	r3, [r0, #4]
   1332c:	str	r3, [r0, #8]
   13330:	bx	lr
   13334:	ldr	ip, [r1]
   13338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1333c:	tst	ip, #16
   13340:	ldr	fp, [r0, #8]
   13344:	ldr	r3, [r0]
   13348:	sub	sp, sp, #12
   1334c:	add	r8, fp, r3
   13350:	bne	13434 <__assert_fail@plt+0x2348>
   13354:	mov	r6, r2
   13358:	mov	r7, r0
   1335c:	mov	r5, r1
   13360:	mov	r4, fp
   13364:	mov	r9, #1
   13368:	b	13390 <__assert_fail@plt+0x22a4>
   1336c:	add	r1, r3, #1
   13370:	str	r1, [r5, #4]
   13374:	ldrb	sl, [r3]
   13378:	cmp	r4, r8
   1337c:	beq	133e0 <__assert_fail@plt+0x22f4>
   13380:	cmp	sl, r6
   13384:	strb	sl, [r4]
   13388:	add	r4, r4, #1
   1338c:	beq	13420 <__assert_fail@plt+0x2334>
   13390:	ldr	r3, [r5, #4]
   13394:	ldr	r1, [r5, #8]
   13398:	cmp	r3, r1
   1339c:	bcc	1336c <__assert_fail@plt+0x2280>
   133a0:	mov	r0, r5
   133a4:	bl	11068 <__uflow@plt>
   133a8:	cmn	r0, #1
   133ac:	mov	sl, r0
   133b0:	bne	13378 <__assert_fail@plt+0x228c>
   133b4:	cmp	fp, r4
   133b8:	beq	13434 <__assert_fail@plt+0x2348>
   133bc:	ldr	r3, [r5]
   133c0:	tst	r3, #32
   133c4:	bne	13434 <__assert_fail@plt+0x2348>
   133c8:	ldrb	r3, [r4, #-1]
   133cc:	cmp	r3, r6
   133d0:	beq	13420 <__assert_fail@plt+0x2334>
   133d4:	cmp	r4, r8
   133d8:	mov	sl, r6
   133dc:	bne	13380 <__assert_fail@plt+0x2294>
   133e0:	str	r9, [sp]
   133e4:	mov	r0, fp
   133e8:	mov	r2, #1
   133ec:	mvn	r3, #0
   133f0:	mov	r1, r7
   133f4:	ldr	r4, [r7]
   133f8:	bl	15acc <__assert_fail@plt+0x49e0>
   133fc:	ldr	r2, [r7]
   13400:	cmp	sl, r6
   13404:	add	r4, r0, r4
   13408:	str	r0, [r7, #8]
   1340c:	mov	fp, r0
   13410:	strb	sl, [r4]
   13414:	add	r8, r0, r2
   13418:	add	r4, r4, #1
   1341c:	bne	13390 <__assert_fail@plt+0x22a4>
   13420:	sub	r4, r4, fp
   13424:	mov	r0, r7
   13428:	str	r4, [r7, #4]
   1342c:	add	sp, sp, #12
   13430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13434:	mov	r0, #0
   13438:	add	sp, sp, #12
   1343c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13440:	mov	r2, #10
   13444:	b	13334 <__assert_fail@plt+0x2248>
   13448:	ldr	r0, [r0, #8]
   1344c:	b	131cc <__assert_fail@plt+0x20e0>
   13450:	push	{r4, r5, r6, lr}
   13454:	subs	r6, r2, #0
   13458:	beq	1349c <__assert_fail@plt+0x23b0>
   1345c:	mov	r4, r0
   13460:	mov	r5, r1
   13464:	bl	10f90 <__ctype_toupper_loc@plt>
   13468:	mov	r3, r4
   1346c:	sub	r1, r5, #1
   13470:	add	r4, r4, r6
   13474:	ldr	ip, [r0]
   13478:	ldrb	lr, [r3], #1
   1347c:	ldrb	r2, [r1, #1]!
   13480:	ldr	r0, [ip, lr, lsl #2]
   13484:	ldr	r2, [ip, r2, lsl #2]
   13488:	subs	r0, r0, r2
   1348c:	popne	{r4, r5, r6, pc}
   13490:	cmp	r4, r3
   13494:	bne	13478 <__assert_fail@plt+0x238c>
   13498:	pop	{r4, r5, r6, pc}
   1349c:	mov	r0, r6
   134a0:	pop	{r4, r5, r6, pc}
   134a4:	push	{r4, r5, r6, lr}
   134a8:	subs	r4, r0, #0
   134ac:	beq	13520 <__assert_fail@plt+0x2434>
   134b0:	mov	r1, #47	; 0x2f
   134b4:	bl	1108c <strrchr@plt>
   134b8:	subs	r5, r0, #0
   134bc:	beq	1350c <__assert_fail@plt+0x2420>
   134c0:	add	r6, r5, #1
   134c4:	sub	r3, r6, r4
   134c8:	cmp	r3, #6
   134cc:	ble	1350c <__assert_fail@plt+0x2420>
   134d0:	mov	r2, #7
   134d4:	ldr	r1, [pc, #96]	; 1353c <__assert_fail@plt+0x2450>
   134d8:	sub	r0, r5, #6
   134dc:	bl	110c8 <strncmp@plt>
   134e0:	cmp	r0, #0
   134e4:	bne	1350c <__assert_fail@plt+0x2420>
   134e8:	mov	r2, #3
   134ec:	ldr	r1, [pc, #76]	; 13540 <__assert_fail@plt+0x2454>
   134f0:	mov	r0, r6
   134f4:	bl	110c8 <strncmp@plt>
   134f8:	cmp	r0, #0
   134fc:	movne	r4, r6
   13500:	ldreq	r3, [pc, #60]	; 13544 <__assert_fail@plt+0x2458>
   13504:	addeq	r4, r5, #4
   13508:	streq	r4, [r3]
   1350c:	ldr	r2, [pc, #52]	; 13548 <__assert_fail@plt+0x245c>
   13510:	ldr	r3, [pc, #52]	; 1354c <__assert_fail@plt+0x2460>
   13514:	str	r4, [r2]
   13518:	str	r4, [r3]
   1351c:	pop	{r4, r5, r6, pc}
   13520:	ldr	r3, [pc, #40]	; 13550 <__assert_fail@plt+0x2464>
   13524:	mov	r2, #55	; 0x37
   13528:	mov	r1, #1
   1352c:	ldr	r3, [r3]
   13530:	ldr	r0, [pc, #28]	; 13554 <__assert_fail@plt+0x2468>
   13534:	bl	10f18 <fwrite@plt>
   13538:	bl	110d4 <abort@plt>
   1353c:	andeq	r8, r1, r8, asr #9
   13540:	ldrdeq	r8, [r1], -r0
   13544:	andeq	r9, r2, r0, ror #2
   13548:	andeq	r9, r2, r0, lsl #4
   1354c:	andeq	r9, r2, r4, ror #2
   13550:	andeq	r9, r2, r0, ror r1
   13554:	muleq	r1, r0, r4
   13558:	push	{r4, r5, r6, lr}
   1355c:	mov	r2, #48	; 0x30
   13560:	mov	r4, r1
   13564:	mov	r1, #0
   13568:	mov	r5, r0
   1356c:	bl	11008 <memset@plt>
   13570:	cmp	r4, #10
   13574:	beq	13584 <__assert_fail@plt+0x2498>
   13578:	str	r4, [r5]
   1357c:	mov	r0, r5
   13580:	pop	{r4, r5, r6, pc}
   13584:	bl	110d4 <abort@plt>
   13588:	push	{r4, r5, r6, lr}
   1358c:	mov	r4, r0
   13590:	mov	r5, r1
   13594:	bl	16e98 <__assert_fail@plt+0x5dac>
   13598:	ldrb	r3, [r0]
   1359c:	bic	r3, r3, #32
   135a0:	cmp	r3, #85	; 0x55
   135a4:	bne	13604 <__assert_fail@plt+0x2518>
   135a8:	ldrb	r3, [r0, #1]
   135ac:	bic	r3, r3, #32
   135b0:	cmp	r3, #84	; 0x54
   135b4:	bne	13640 <__assert_fail@plt+0x2554>
   135b8:	ldrb	r3, [r0, #2]
   135bc:	bic	r3, r3, #32
   135c0:	cmp	r3, #70	; 0x46
   135c4:	bne	13640 <__assert_fail@plt+0x2554>
   135c8:	ldrb	r3, [r0, #3]
   135cc:	cmp	r3, #45	; 0x2d
   135d0:	bne	13640 <__assert_fail@plt+0x2554>
   135d4:	ldrb	r3, [r0, #4]
   135d8:	cmp	r3, #56	; 0x38
   135dc:	bne	13640 <__assert_fail@plt+0x2554>
   135e0:	ldrb	r3, [r0, #5]
   135e4:	cmp	r3, #0
   135e8:	bne	13640 <__assert_fail@plt+0x2554>
   135ec:	ldrb	r2, [r4]
   135f0:	ldr	r3, [pc, #152]	; 13690 <__assert_fail@plt+0x25a4>
   135f4:	ldr	r0, [pc, #152]	; 13694 <__assert_fail@plt+0x25a8>
   135f8:	cmp	r2, #96	; 0x60
   135fc:	movne	r0, r3
   13600:	pop	{r4, r5, r6, pc}
   13604:	cmp	r3, #71	; 0x47
   13608:	bne	13640 <__assert_fail@plt+0x2554>
   1360c:	ldrb	r3, [r0, #1]
   13610:	bic	r3, r3, #32
   13614:	cmp	r3, #66	; 0x42
   13618:	bne	13640 <__assert_fail@plt+0x2554>
   1361c:	ldrb	r3, [r0, #2]
   13620:	cmp	r3, #49	; 0x31
   13624:	bne	13640 <__assert_fail@plt+0x2554>
   13628:	ldrb	r3, [r0, #3]
   1362c:	cmp	r3, #56	; 0x38
   13630:	bne	13640 <__assert_fail@plt+0x2554>
   13634:	ldrb	r3, [r0, #4]
   13638:	cmp	r3, #48	; 0x30
   1363c:	beq	13654 <__assert_fail@plt+0x2568>
   13640:	ldr	r3, [pc, #80]	; 13698 <__assert_fail@plt+0x25ac>
   13644:	cmp	r5, #9
   13648:	ldr	r0, [pc, #76]	; 1369c <__assert_fail@plt+0x25b0>
   1364c:	movne	r0, r3
   13650:	pop	{r4, r5, r6, pc}
   13654:	ldrb	r3, [r0, #5]
   13658:	cmp	r3, #51	; 0x33
   1365c:	bne	13640 <__assert_fail@plt+0x2554>
   13660:	ldrb	r3, [r0, #6]
   13664:	cmp	r3, #48	; 0x30
   13668:	bne	13640 <__assert_fail@plt+0x2554>
   1366c:	ldrb	r3, [r0, #7]
   13670:	cmp	r3, #0
   13674:	bne	13640 <__assert_fail@plt+0x2554>
   13678:	ldrb	r2, [r4]
   1367c:	ldr	r3, [pc, #28]	; 136a0 <__assert_fail@plt+0x25b4>
   13680:	ldr	r0, [pc, #28]	; 136a4 <__assert_fail@plt+0x25b8>
   13684:	cmp	r2, #96	; 0x60
   13688:	movne	r0, r3
   1368c:	pop	{r4, r5, r6, pc}
   13690:	andeq	r8, r1, ip, lsr #10
   13694:	andeq	r8, r1, r8, lsr #10
   13698:	andeq	r8, r1, ip, lsr r5
   1369c:	andeq	r8, r1, r8, lsr r5
   136a0:	andeq	r8, r1, r4, lsr r5
   136a4:	andeq	r8, r1, r0, lsr r5
   136a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136ac:	sub	sp, sp, #116	; 0x74
   136b0:	mov	sl, r0
   136b4:	str	r3, [sp, #24]
   136b8:	mov	r3, #1
   136bc:	mov	r8, r1
   136c0:	str	r2, [sp, #56]	; 0x38
   136c4:	str	r3, [sp, #36]	; 0x24
   136c8:	bl	10f30 <__ctype_get_mb_cur_max@plt>
   136cc:	ldr	r3, [sp, #156]	; 0x9c
   136d0:	mov	fp, r8
   136d4:	mov	r2, #0
   136d8:	lsr	r3, r3, #1
   136dc:	and	r3, r3, #1
   136e0:	str	r2, [sp, #68]	; 0x44
   136e4:	str	r3, [sp, #28]
   136e8:	str	r2, [sp, #40]	; 0x28
   136ec:	str	r2, [sp, #44]	; 0x2c
   136f0:	str	r2, [sp, #52]	; 0x34
   136f4:	str	r2, [sp, #64]	; 0x40
   136f8:	str	r2, [sp, #72]	; 0x48
   136fc:	str	sl, [sp, #32]
   13700:	str	r0, [sp, #76]	; 0x4c
   13704:	ldr	r3, [sp, #152]	; 0x98
   13708:	cmp	r3, #10
   1370c:	ldrls	pc, [pc, r3, lsl #2]
   13710:	b	148d0 <__assert_fail@plt+0x37e4>
   13714:	andeq	r3, r1, r0, asr #14
   13718:	andeq	r3, r1, r8, lsr #20
   1371c:	andeq	r3, r1, ip, asr #20
   13720:	andeq	r3, r1, r0, ror sl
   13724:	muleq	r1, ip, fp
   13728:	andeq	r3, r1, r0, ror fp
   1372c:	andeq	r3, r1, r8, asr #22
   13730:	andeq	r3, r1, r4, lsl #21
   13734:	muleq	r1, ip, sl
   13738:	muleq	r1, ip, sl
   1373c:	muleq	r1, ip, sl
   13740:	mov	r3, #0
   13744:	mov	r7, r3
   13748:	str	r3, [sp, #28]
   1374c:	ldr	r3, [sp, #44]	; 0x2c
   13750:	mov	sl, #0
   13754:	eor	r3, r3, #1
   13758:	str	r3, [sp, #60]	; 0x3c
   1375c:	ldr	r3, [sp, #24]
   13760:	cmn	r3, #1
   13764:	beq	13cc8 <__assert_fail@plt+0x2bdc>
   13768:	ldr	r3, [sp, #24]
   1376c:	subs	r5, r3, sl
   13770:	movne	r5, #1
   13774:	cmp	r5, #0
   13778:	beq	13ce0 <__assert_fail@plt+0x2bf4>
   1377c:	ldr	r3, [sp, #152]	; 0x98
   13780:	ldr	r8, [sp, #44]	; 0x2c
   13784:	cmp	r3, #2
   13788:	moveq	r8, #0
   1378c:	andne	r8, r8, #1
   13790:	ldr	r3, [sp, #52]	; 0x34
   13794:	adds	r9, r3, #0
   13798:	movne	r9, #1
   1379c:	ands	r6, r9, r8
   137a0:	beq	14148 <__assert_fail@plt+0x305c>
   137a4:	ldr	r2, [sp, #52]	; 0x34
   137a8:	ldr	r1, [sp, #24]
   137ac:	cmp	r2, #1
   137b0:	mov	r3, r2
   137b4:	movls	r3, #0
   137b8:	movhi	r3, #1
   137bc:	cmn	r1, #1
   137c0:	movne	r3, #0
   137c4:	cmp	r3, #0
   137c8:	add	r4, sl, r2
   137cc:	beq	137dc <__assert_fail@plt+0x26f0>
   137d0:	ldr	r0, [sp, #56]	; 0x38
   137d4:	bl	10fd8 <strlen@plt>
   137d8:	str	r0, [sp, #24]
   137dc:	ldr	r3, [sp, #24]
   137e0:	cmp	r3, r4
   137e4:	ldr	r3, [sp, #56]	; 0x38
   137e8:	add	r3, r3, sl
   137ec:	str	r3, [sp, #48]	; 0x30
   137f0:	bcc	14154 <__assert_fail@plt+0x3068>
   137f4:	mov	r0, r3
   137f8:	ldr	r2, [sp, #52]	; 0x34
   137fc:	ldr	r1, [sp, #64]	; 0x40
   13800:	bl	10ed0 <memcmp@plt>
   13804:	cmp	r0, #0
   13808:	bne	14154 <__assert_fail@plt+0x3068>
   1380c:	ldr	r3, [sp, #28]
   13810:	cmp	r3, #0
   13814:	bne	149d0 <__assert_fail@plt+0x38e4>
   13818:	ldr	r3, [sp, #48]	; 0x30
   1381c:	ldrb	r4, [r3]
   13820:	cmp	r4, #126	; 0x7e
   13824:	ldrls	pc, [pc, r4, lsl #2]
   13828:	b	140e8 <__assert_fail@plt+0x2ffc>
   1382c:	andeq	r3, r1, ip, lsl #30
   13830:	andeq	r4, r1, r8, ror #1
   13834:	andeq	r4, r1, r8, ror #1
   13838:	andeq	r4, r1, r8, ror #1
   1383c:	andeq	r4, r1, r8, ror #1
   13840:	andeq	r4, r1, r8, ror #1
   13844:	andeq	r4, r1, r8, ror #1
   13848:	strdeq	r3, [r1], -r0
   1384c:	ldrdeq	r3, [r1], -r4
   13850:	ldrdeq	r4, [r1], -r0
   13854:	andeq	r3, r1, r4, lsr lr
   13858:	andeq	r3, r1, r8, lsl lr
   1385c:	andeq	r4, r1, ip, lsr #1
   13860:	andeq	r4, r1, r8, lsl #1
   13864:	andeq	r4, r1, r8, ror #1
   13868:	andeq	r4, r1, r8, ror #1
   1386c:	andeq	r4, r1, r8, ror #1
   13870:	andeq	r4, r1, r8, ror #1
   13874:	andeq	r4, r1, r8, ror #1
   13878:	andeq	r4, r1, r8, ror #1
   1387c:	andeq	r4, r1, r8, ror #1
   13880:	andeq	r4, r1, r8, ror #1
   13884:	andeq	r4, r1, r8, ror #1
   13888:	andeq	r4, r1, r8, ror #1
   1388c:	andeq	r4, r1, r8, ror #1
   13890:	andeq	r4, r1, r8, ror #1
   13894:	andeq	r4, r1, r8, ror #1
   13898:	andeq	r4, r1, r8, ror #1
   1389c:	andeq	r4, r1, r8, ror #1
   138a0:	andeq	r4, r1, r8, ror #1
   138a4:	andeq	r4, r1, r8, ror #1
   138a8:	andeq	r4, r1, r8, ror #1
   138ac:	andeq	r4, r1, r8, asr #1
   138b0:	strdeq	r3, [r1], -ip
   138b4:	strdeq	r3, [r1], -ip
   138b8:	andeq	r3, r1, ip, lsl #24
   138bc:	strdeq	r3, [r1], -ip
   138c0:	muleq	r1, r4, r0
   138c4:	strdeq	r3, [r1], -ip
   138c8:	andeq	r4, r1, r8, rrx
   138cc:	strdeq	r3, [r1], -ip
   138d0:	strdeq	r3, [r1], -ip
   138d4:	strdeq	r3, [r1], -ip
   138d8:	muleq	r1, r4, r0
   138dc:	muleq	r1, r4, r0
   138e0:	muleq	r1, r4, r0
   138e4:	muleq	r1, r4, r0
   138e8:	muleq	r1, r4, r0
   138ec:	muleq	r1, r4, r0
   138f0:	muleq	r1, r4, r0
   138f4:	muleq	r1, r4, r0
   138f8:	muleq	r1, r4, r0
   138fc:	muleq	r1, r4, r0
   13900:	muleq	r1, r4, r0
   13904:	muleq	r1, r4, r0
   13908:	muleq	r1, r4, r0
   1390c:	muleq	r1, r4, r0
   13910:	muleq	r1, r4, r0
   13914:	muleq	r1, r4, r0
   13918:	strdeq	r3, [r1], -ip
   1391c:	strdeq	r3, [r1], -ip
   13920:	strdeq	r3, [r1], -ip
   13924:	strdeq	r3, [r1], -ip
   13928:	andeq	r4, r1, r8, lsr r0
   1392c:	andeq	r4, r1, r8, ror #1
   13930:	muleq	r1, r4, r0
   13934:	muleq	r1, r4, r0
   13938:	muleq	r1, r4, r0
   1393c:	muleq	r1, r4, r0
   13940:	muleq	r1, r4, r0
   13944:	muleq	r1, r4, r0
   13948:	muleq	r1, r4, r0
   1394c:	muleq	r1, r4, r0
   13950:	muleq	r1, r4, r0
   13954:	muleq	r1, r4, r0
   13958:	muleq	r1, r4, r0
   1395c:	muleq	r1, r4, r0
   13960:	muleq	r1, r4, r0
   13964:	muleq	r1, r4, r0
   13968:	muleq	r1, r4, r0
   1396c:	muleq	r1, r4, r0
   13970:	muleq	r1, r4, r0
   13974:	muleq	r1, r4, r0
   13978:	muleq	r1, r4, r0
   1397c:	muleq	r1, r4, r0
   13980:	muleq	r1, r4, r0
   13984:	muleq	r1, r4, r0
   13988:	muleq	r1, r4, r0
   1398c:	muleq	r1, r4, r0
   13990:	muleq	r1, r4, r0
   13994:	muleq	r1, r4, r0
   13998:	strdeq	r3, [r1], -ip
   1399c:	andeq	r3, r1, r8, asr sp
   139a0:	muleq	r1, r4, r0
   139a4:	strdeq	r3, [r1], -ip
   139a8:	muleq	r1, r4, r0
   139ac:	strdeq	r3, [r1], -ip
   139b0:	muleq	r1, r4, r0
   139b4:	muleq	r1, r4, r0
   139b8:	muleq	r1, r4, r0
   139bc:	muleq	r1, r4, r0
   139c0:	muleq	r1, r4, r0
   139c4:	muleq	r1, r4, r0
   139c8:	muleq	r1, r4, r0
   139cc:	muleq	r1, r4, r0
   139d0:	muleq	r1, r4, r0
   139d4:	muleq	r1, r4, r0
   139d8:	muleq	r1, r4, r0
   139dc:	muleq	r1, r4, r0
   139e0:	muleq	r1, r4, r0
   139e4:	muleq	r1, r4, r0
   139e8:	muleq	r1, r4, r0
   139ec:	muleq	r1, r4, r0
   139f0:	muleq	r1, r4, r0
   139f4:	muleq	r1, r4, r0
   139f8:	muleq	r1, r4, r0
   139fc:	muleq	r1, r4, r0
   13a00:	muleq	r1, r4, r0
   13a04:	muleq	r1, r4, r0
   13a08:	muleq	r1, r4, r0
   13a0c:	muleq	r1, r4, r0
   13a10:	muleq	r1, r4, r0
   13a14:	muleq	r1, r4, r0
   13a18:	andeq	r3, r1, ip, ror #23
   13a1c:	strdeq	r3, [r1], -ip
   13a20:	andeq	r3, r1, ip, ror #23
   13a24:	andeq	r3, r1, ip, lsl #24
   13a28:	mov	r3, #1
   13a2c:	str	r3, [sp, #28]
   13a30:	str	r3, [sp, #52]	; 0x34
   13a34:	ldr	r3, [pc, #4000]	; 149dc <__assert_fail@plt+0x38f0>
   13a38:	mov	r7, #0
   13a3c:	str	r3, [sp, #64]	; 0x40
   13a40:	mov	r3, #2
   13a44:	str	r3, [sp, #152]	; 0x98
   13a48:	b	1374c <__assert_fail@plt+0x2660>
   13a4c:	ldr	r3, [sp, #28]
   13a50:	cmp	r3, #0
   13a54:	beq	13bb0 <__assert_fail@plt+0x2ac4>
   13a58:	mov	r3, #1
   13a5c:	str	r3, [sp, #52]	; 0x34
   13a60:	ldr	r3, [pc, #3956]	; 149dc <__assert_fail@plt+0x38f0>
   13a64:	mov	r7, #0
   13a68:	str	r3, [sp, #64]	; 0x40
   13a6c:	b	1374c <__assert_fail@plt+0x2660>
   13a70:	mov	r3, #1
   13a74:	str	r3, [sp, #44]	; 0x2c
   13a78:	str	r3, [sp, #52]	; 0x34
   13a7c:	str	r3, [sp, #28]
   13a80:	b	13a34 <__assert_fail@plt+0x2948>
   13a84:	mov	r3, #0
   13a88:	str	r3, [sp, #28]
   13a8c:	mov	r3, #1
   13a90:	str	r3, [sp, #44]	; 0x2c
   13a94:	mov	r7, #0
   13a98:	b	1374c <__assert_fail@plt+0x2660>
   13a9c:	ldr	r3, [sp, #152]	; 0x98
   13aa0:	cmp	r3, #10
   13aa4:	beq	13ae8 <__assert_fail@plt+0x29fc>
   13aa8:	mov	r2, #5
   13aac:	ldr	r1, [pc, #3884]	; 149e0 <__assert_fail@plt+0x38f4>
   13ab0:	mov	r0, #0
   13ab4:	bl	10ee8 <dcgettext@plt>
   13ab8:	ldr	r2, [pc, #3872]	; 149e0 <__assert_fail@plt+0x38f4>
   13abc:	cmp	r0, r2
   13ac0:	str	r0, [sp, #164]	; 0xa4
   13ac4:	beq	14acc <__assert_fail@plt+0x39e0>
   13ac8:	mov	r2, #5
   13acc:	ldr	r1, [pc, #3848]	; 149dc <__assert_fail@plt+0x38f0>
   13ad0:	mov	r0, #0
   13ad4:	bl	10ee8 <dcgettext@plt>
   13ad8:	ldr	r2, [pc, #3836]	; 149dc <__assert_fail@plt+0x38f0>
   13adc:	cmp	r0, r2
   13ae0:	str	r0, [sp, #168]	; 0xa8
   13ae4:	beq	14abc <__assert_fail@plt+0x39d0>
   13ae8:	ldr	r7, [sp, #28]
   13aec:	cmp	r7, #0
   13af0:	movne	r7, #0
   13af4:	bne	13b28 <__assert_fail@plt+0x2a3c>
   13af8:	ldr	r3, [sp, #164]	; 0xa4
   13afc:	ldrb	r3, [r3]
   13b00:	cmp	r3, #0
   13b04:	beq	14adc <__assert_fail@plt+0x39f0>
   13b08:	ldr	r2, [sp, #164]	; 0xa4
   13b0c:	ldr	r1, [sp, #32]
   13b10:	cmp	fp, r7
   13b14:	strbhi	r3, [r1, r7]
   13b18:	ldrb	r3, [r2, #1]!
   13b1c:	add	r7, r7, #1
   13b20:	cmp	r3, #0
   13b24:	bne	13b10 <__assert_fail@plt+0x2a24>
   13b28:	ldr	r0, [sp, #168]	; 0xa8
   13b2c:	bl	10fd8 <strlen@plt>
   13b30:	ldr	r3, [sp, #168]	; 0xa8
   13b34:	str	r3, [sp, #64]	; 0x40
   13b38:	mov	r3, #1
   13b3c:	str	r3, [sp, #44]	; 0x2c
   13b40:	str	r0, [sp, #52]	; 0x34
   13b44:	b	1374c <__assert_fail@plt+0x2660>
   13b48:	mov	r3, #1
   13b4c:	str	r3, [sp, #44]	; 0x2c
   13b50:	str	r3, [sp, #52]	; 0x34
   13b54:	str	r3, [sp, #28]
   13b58:	ldr	r3, [pc, #3716]	; 149e4 <__assert_fail@plt+0x38f8>
   13b5c:	mov	r7, #0
   13b60:	str	r3, [sp, #64]	; 0x40
   13b64:	mov	r3, #5
   13b68:	str	r3, [sp, #152]	; 0x98
   13b6c:	b	1374c <__assert_fail@plt+0x2660>
   13b70:	ldr	r3, [sp, #28]
   13b74:	cmp	r3, #0
   13b78:	beq	14878 <__assert_fail@plt+0x378c>
   13b7c:	ldr	r3, [sp, #28]
   13b80:	mov	r7, #0
   13b84:	str	r3, [sp, #44]	; 0x2c
   13b88:	mov	r3, #1
   13b8c:	str	r3, [sp, #52]	; 0x34
   13b90:	ldr	r3, [pc, #3660]	; 149e4 <__assert_fail@plt+0x38f8>
   13b94:	str	r3, [sp, #64]	; 0x40
   13b98:	b	1374c <__assert_fail@plt+0x2660>
   13b9c:	ldr	r3, [sp, #28]
   13ba0:	cmp	r3, #0
   13ba4:	mov	r3, #1
   13ba8:	streq	r3, [sp, #44]	; 0x2c
   13bac:	bne	13a30 <__assert_fail@plt+0x2944>
   13bb0:	cmp	fp, #0
   13bb4:	beq	148a8 <__assert_fail@plt+0x37bc>
   13bb8:	ldr	r3, [sp, #32]
   13bbc:	mov	r2, #39	; 0x27
   13bc0:	mov	r7, #1
   13bc4:	strb	r2, [r3]
   13bc8:	mov	r3, #0
   13bcc:	str	r3, [sp, #28]
   13bd0:	mov	r3, #1
   13bd4:	str	r3, [sp, #52]	; 0x34
   13bd8:	ldr	r3, [pc, #3580]	; 149dc <__assert_fail@plt+0x38f0>
   13bdc:	str	r3, [sp, #64]	; 0x40
   13be0:	mov	r3, #2
   13be4:	str	r3, [sp, #152]	; 0x98
   13be8:	b	1374c <__assert_fail@plt+0x2660>
   13bec:	ldr	r3, [sp, #24]
   13bf0:	cmn	r3, #1
   13bf4:	beq	1480c <__assert_fail@plt+0x3720>
   13bf8:	ldr	r3, [sp, #24]
   13bfc:	subs	r3, r3, #1
   13c00:	movne	r3, #1
   13c04:	cmp	r3, #0
   13c08:	bne	13c14 <__assert_fail@plt+0x2b28>
   13c0c:	cmp	sl, #0
   13c10:	beq	14000 <__assert_fail@plt+0x2f14>
   13c14:	ldr	r3, [sp, #152]	; 0x98
   13c18:	mov	r5, #0
   13c1c:	sub	r2, r3, #2
   13c20:	mov	r8, r5
   13c24:	clz	r2, r2
   13c28:	lsr	r2, r2, #5
   13c2c:	ldr	r3, [sp, #60]	; 0x3c
   13c30:	ldr	r1, [sp, #28]
   13c34:	orr	r3, r2, r3
   13c38:	eor	r3, r3, #1
   13c3c:	orr	r3, r1, r3
   13c40:	tst	r3, #255	; 0xff
   13c44:	bne	14370 <__assert_fail@plt+0x3284>
   13c48:	cmp	r6, #0
   13c4c:	bne	13d9c <__assert_fail@plt+0x2cb0>
   13c50:	ldr	r3, [sp, #40]	; 0x28
   13c54:	eor	r8, r8, #1
   13c58:	and	r8, r8, r3
   13c5c:	add	sl, sl, #1
   13c60:	uxtb	r6, r8
   13c64:	cmp	r6, #0
   13c68:	beq	13c9c <__assert_fail@plt+0x2bb0>
   13c6c:	cmp	fp, r7
   13c70:	movhi	r2, #39	; 0x27
   13c74:	ldrhi	r3, [sp, #32]
   13c78:	strbhi	r2, [r3, r7]
   13c7c:	add	r3, r7, #1
   13c80:	cmp	fp, r3
   13c84:	movhi	r1, #39	; 0x27
   13c88:	ldrhi	r2, [sp, #32]
   13c8c:	add	r7, r7, #2
   13c90:	strbhi	r1, [r2, r3]
   13c94:	mov	r3, #0
   13c98:	str	r3, [sp, #40]	; 0x28
   13c9c:	cmp	r7, fp
   13ca0:	ldrcc	r3, [sp, #32]
   13ca4:	strbcc	r4, [r3, r7]
   13ca8:	ldr	r3, [sp, #36]	; 0x24
   13cac:	cmp	r5, #0
   13cb0:	moveq	r3, #0
   13cb4:	str	r3, [sp, #36]	; 0x24
   13cb8:	ldr	r3, [sp, #24]
   13cbc:	add	r7, r7, #1
   13cc0:	cmn	r3, #1
   13cc4:	bne	13768 <__assert_fail@plt+0x267c>
   13cc8:	ldr	r3, [sp, #56]	; 0x38
   13ccc:	ldrb	r5, [r3, sl]
   13cd0:	adds	r5, r5, #0
   13cd4:	movne	r5, #1
   13cd8:	cmp	r5, #0
   13cdc:	bne	1377c <__assert_fail@plt+0x2690>
   13ce0:	ldr	r3, [sp, #152]	; 0x98
   13ce4:	ldr	r1, [sp, #28]
   13ce8:	sub	r3, r3, #2
   13cec:	clz	r3, r3
   13cf0:	lsr	r3, r3, #5
   13cf4:	and	r9, r1, r3
   13cf8:	cmp	r7, #0
   13cfc:	movne	r2, #0
   13d00:	andeq	r2, r9, #1
   13d04:	cmp	r2, #0
   13d08:	bne	146e4 <__assert_fail@plt+0x35f8>
   13d0c:	eor	r2, r1, #1
   13d10:	ands	r3, r3, r2
   13d14:	beq	14ba0 <__assert_fail@plt+0x3ab4>
   13d18:	ldr	r2, [sp, #68]	; 0x44
   13d1c:	cmp	r2, #0
   13d20:	beq	14b8c <__assert_fail@plt+0x3aa0>
   13d24:	ldr	r3, [sp, #36]	; 0x24
   13d28:	cmp	r3, #0
   13d2c:	bne	14b44 <__assert_fail@plt+0x3a58>
   13d30:	ldr	r2, [sp, #72]	; 0x48
   13d34:	clz	r3, fp
   13d38:	cmp	r2, #0
   13d3c:	lsr	r3, r3, #5
   13d40:	moveq	r3, #0
   13d44:	cmp	r3, #0
   13d48:	beq	14ae4 <__assert_fail@plt+0x39f8>
   13d4c:	str	r3, [sp, #68]	; 0x44
   13d50:	ldr	fp, [sp, #72]	; 0x48
   13d54:	b	13704 <__assert_fail@plt+0x2618>
   13d58:	ldr	r3, [sp, #152]	; 0x98
   13d5c:	cmp	r3, #2
   13d60:	beq	143b4 <__assert_fail@plt+0x32c8>
   13d64:	ldr	r3, [sp, #44]	; 0x2c
   13d68:	ldr	r2, [sp, #28]
   13d6c:	and	r2, r3, r2
   13d70:	ands	r2, r9, r2
   13d74:	bne	143c0 <__assert_fail@plt+0x32d4>
   13d78:	mov	r4, #92	; 0x5c
   13d7c:	mov	r3, r4
   13d80:	ldr	r1, [sp, #44]	; 0x2c
   13d84:	cmp	r1, #0
   13d88:	moveq	r5, #0
   13d8c:	moveq	r8, r1
   13d90:	beq	13c2c <__assert_fail@plt+0x2b40>
   13d94:	mov	r4, r3
   13d98:	mov	r5, #0
   13d9c:	ldr	r3, [sp, #28]
   13da0:	cmp	r3, #0
   13da4:	bne	143a8 <__assert_fail@plt+0x32bc>
   13da8:	ldr	r3, [sp, #40]	; 0x28
   13dac:	eor	r9, r3, #1
   13db0:	and	r9, r9, r2
   13db4:	ands	r9, r9, #255	; 0xff
   13db8:	beq	13dfc <__assert_fail@plt+0x2d10>
   13dbc:	cmp	fp, r7
   13dc0:	movhi	r2, #39	; 0x27
   13dc4:	ldrhi	r3, [sp, #32]
   13dc8:	str	r9, [sp, #40]	; 0x28
   13dcc:	strbhi	r2, [r3, r7]
   13dd0:	add	r3, r7, #1
   13dd4:	cmp	fp, r3
   13dd8:	movhi	r1, #36	; 0x24
   13ddc:	ldrhi	r2, [sp, #32]
   13de0:	strbhi	r1, [r2, r3]
   13de4:	add	r3, r7, #2
   13de8:	cmp	fp, r3
   13dec:	add	r7, r7, #3
   13df0:	ldrhi	r2, [sp, #32]
   13df4:	movhi	r1, #39	; 0x27
   13df8:	strbhi	r1, [r2, r3]
   13dfc:	cmp	fp, r7
   13e00:	movhi	r2, #92	; 0x5c
   13e04:	ldrhi	r3, [sp, #32]
   13e08:	add	sl, sl, #1
   13e0c:	strbhi	r2, [r3, r7]
   13e10:	add	r7, r7, #1
   13e14:	b	13c9c <__assert_fail@plt+0x2bb0>
   13e18:	ldr	r3, [sp, #152]	; 0x98
   13e1c:	mov	r4, #11
   13e20:	sub	r2, r3, #2
   13e24:	mov	r3, #118	; 0x76
   13e28:	clz	r2, r2
   13e2c:	lsr	r2, r2, #5
   13e30:	b	13d80 <__assert_fail@plt+0x2c94>
   13e34:	mov	r4, #10
   13e38:	mov	r3, #110	; 0x6e
   13e3c:	ldr	r2, [sp, #152]	; 0x98
   13e40:	ldr	r1, [sp, #28]
   13e44:	sub	r2, r2, #2
   13e48:	clz	r2, r2
   13e4c:	lsr	r2, r2, #5
   13e50:	ands	r1, r1, r2
   13e54:	beq	13d80 <__assert_fail@plt+0x2c94>
   13e58:	ldr	sl, [sp, #32]
   13e5c:	mov	r8, fp
   13e60:	mov	r2, r1
   13e64:	mov	r3, #2
   13e68:	str	r3, [sp, #152]	; 0x98
   13e6c:	ldr	r9, [sp, #44]	; 0x2c
   13e70:	ldr	r3, [sp, #152]	; 0x98
   13e74:	and	r9, r9, r2
   13e78:	tst	r9, #255	; 0xff
   13e7c:	movne	r3, #4
   13e80:	str	r3, [sp, #152]	; 0x98
   13e84:	ldr	r3, [sp, #156]	; 0x9c
   13e88:	mov	ip, #0
   13e8c:	bic	r3, r3, #2
   13e90:	str	r3, [sp, #4]
   13e94:	ldr	r3, [sp, #168]	; 0xa8
   13e98:	ldr	r2, [sp, #56]	; 0x38
   13e9c:	str	r3, [sp, #16]
   13ea0:	ldr	r3, [sp, #164]	; 0xa4
   13ea4:	mov	r1, r8
   13ea8:	str	r3, [sp, #12]
   13eac:	ldr	r3, [sp, #152]	; 0x98
   13eb0:	mov	r0, sl
   13eb4:	str	r3, [sp]
   13eb8:	str	ip, [sp, #8]
   13ebc:	ldr	r3, [sp, #24]
   13ec0:	bl	136a8 <__assert_fail@plt+0x25bc>
   13ec4:	mov	fp, r0
   13ec8:	mov	r0, fp
   13ecc:	add	sp, sp, #116	; 0x74
   13ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed4:	ldr	r3, [sp, #152]	; 0x98
   13ed8:	mov	r4, #8
   13edc:	sub	r2, r3, #2
   13ee0:	mov	r3, #98	; 0x62
   13ee4:	clz	r2, r2
   13ee8:	lsr	r2, r2, #5
   13eec:	b	13d80 <__assert_fail@plt+0x2c94>
   13ef0:	ldr	r3, [sp, #152]	; 0x98
   13ef4:	mov	r4, #7
   13ef8:	sub	r2, r3, #2
   13efc:	mov	r3, #97	; 0x61
   13f00:	clz	r2, r2
   13f04:	lsr	r2, r2, #5
   13f08:	b	13d80 <__assert_fail@plt+0x2c94>
   13f0c:	ldr	r3, [sp, #44]	; 0x2c
   13f10:	cmp	r3, #0
   13f14:	beq	146f8 <__assert_fail@plt+0x360c>
   13f18:	ldr	r3, [sp, #28]
   13f1c:	cmp	r3, #0
   13f20:	bne	149d0 <__assert_fail@plt+0x38e4>
   13f24:	ldr	r3, [sp, #152]	; 0x98
   13f28:	sub	r2, r3, #2
   13f2c:	ldr	r3, [sp, #40]	; 0x28
   13f30:	clz	r2, r2
   13f34:	eor	r3, r3, #1
   13f38:	lsr	r2, r2, #5
   13f3c:	ands	r3, r2, r3
   13f40:	moveq	r1, r7
   13f44:	beq	13f88 <__assert_fail@plt+0x2e9c>
   13f48:	cmp	fp, r7
   13f4c:	movhi	r0, #39	; 0x27
   13f50:	ldrhi	r1, [sp, #32]
   13f54:	str	r3, [sp, #40]	; 0x28
   13f58:	strbhi	r0, [r1, r7]
   13f5c:	add	r1, r7, #1
   13f60:	cmp	fp, r1
   13f64:	movhi	ip, #36	; 0x24
   13f68:	ldrhi	r0, [sp, #32]
   13f6c:	strbhi	ip, [r0, r1]
   13f70:	add	r1, r7, #2
   13f74:	cmp	fp, r1
   13f78:	movhi	ip, #39	; 0x27
   13f7c:	ldrhi	r0, [sp, #32]
   13f80:	strbhi	ip, [r0, r1]
   13f84:	add	r1, r7, #3
   13f88:	cmp	fp, r1
   13f8c:	movhi	r0, #92	; 0x5c
   13f90:	ldrhi	r3, [sp, #32]
   13f94:	add	r7, r1, #1
   13f98:	strbhi	r0, [r3, r1]
   13f9c:	cmp	r8, #0
   13fa0:	beq	148e4 <__assert_fail@plt+0x37f8>
   13fa4:	ldr	r0, [sp, #24]
   13fa8:	add	r3, sl, #1
   13fac:	cmp	r3, r0
   13fb0:	bcs	14820 <__assert_fail@plt+0x3734>
   13fb4:	ldr	r0, [sp, #56]	; 0x38
   13fb8:	ldrb	r3, [r0, r3]
   13fbc:	sub	r3, r3, #48	; 0x30
   13fc0:	cmp	r3, #9
   13fc4:	bhi	14820 <__assert_fail@plt+0x3734>
   13fc8:	cmp	fp, r7
   13fcc:	movhi	r3, #48	; 0x30
   13fd0:	ldrhi	r0, [sp, #32]
   13fd4:	ldr	r5, [sp, #28]
   13fd8:	mov	r4, #48	; 0x30
   13fdc:	strbhi	r3, [r0, r7]
   13fe0:	add	r3, r1, #2
   13fe4:	cmp	fp, r3
   13fe8:	movhi	r0, #48	; 0x30
   13fec:	ldrhi	ip, [sp, #32]
   13ff0:	add	r7, r1, #3
   13ff4:	strbhi	r0, [ip, r3]
   13ff8:	b	13c2c <__assert_fail@plt+0x2b40>
   13ffc:	mov	r5, #0
   14000:	ldr	r3, [sp, #152]	; 0x98
   14004:	sub	r2, r3, #2
   14008:	ldr	r3, [sp, #28]
   1400c:	clz	r2, r2
   14010:	lsr	r2, r2, #5
   14014:	ands	r8, r3, r2
   14018:	beq	13c2c <__assert_fail@plt+0x2b40>
   1401c:	mov	r3, r8
   14020:	mov	r2, r3
   14024:	mov	r3, #2
   14028:	ldr	sl, [sp, #32]
   1402c:	mov	r8, fp
   14030:	str	r3, [sp, #152]	; 0x98
   14034:	b	13e6c <__assert_fail@plt+0x2d80>
   14038:	ldr	r3, [sp, #152]	; 0x98
   1403c:	cmp	r3, #2
   14040:	beq	14764 <__assert_fail@plt+0x3678>
   14044:	cmp	r3, #5
   14048:	beq	14724 <__assert_fail@plt+0x3638>
   1404c:	mov	r5, #0
   14050:	sub	r2, r3, #2
   14054:	mov	r8, r5
   14058:	clz	r2, r2
   1405c:	mov	r4, #63	; 0x3f
   14060:	lsr	r2, r2, #5
   14064:	b	13c2c <__assert_fail@plt+0x2b40>
   14068:	ldr	r3, [sp, #152]	; 0x98
   1406c:	cmp	r3, #2
   14070:	beq	14784 <__assert_fail@plt+0x3698>
   14074:	mov	r2, #0
   14078:	str	r5, [sp, #68]	; 0x44
   1407c:	mov	r8, r2
   14080:	mov	r4, #39	; 0x27
   14084:	b	13c2c <__assert_fail@plt+0x2b40>
   14088:	mov	r4, #13
   1408c:	mov	r3, #114	; 0x72
   14090:	b	13e3c <__assert_fail@plt+0x2d50>
   14094:	ldr	r3, [sp, #152]	; 0x98
   14098:	mov	r8, #0
   1409c:	sub	r2, r3, #2
   140a0:	clz	r2, r2
   140a4:	lsr	r2, r2, #5
   140a8:	b	13c2c <__assert_fail@plt+0x2b40>
   140ac:	ldr	r3, [sp, #152]	; 0x98
   140b0:	mov	r4, #12
   140b4:	sub	r2, r3, #2
   140b8:	mov	r3, #102	; 0x66
   140bc:	clz	r2, r2
   140c0:	lsr	r2, r2, #5
   140c4:	b	13d80 <__assert_fail@plt+0x2c94>
   140c8:	mov	r5, r6
   140cc:	b	14000 <__assert_fail@plt+0x2f14>
   140d0:	ldr	r3, [sp, #152]	; 0x98
   140d4:	sub	r2, r3, #2
   140d8:	mov	r3, #116	; 0x74
   140dc:	clz	r2, r2
   140e0:	lsr	r2, r2, #5
   140e4:	b	13d80 <__assert_fail@plt+0x2c94>
   140e8:	ldr	r8, [sp, #76]	; 0x4c
   140ec:	cmp	r8, #1
   140f0:	bne	145a0 <__assert_fail@plt+0x34b4>
   140f4:	bl	10fb4 <__ctype_b_loc@plt>
   140f8:	sxth	r3, r4
   140fc:	mov	ip, r8
   14100:	lsl	r3, r3, #1
   14104:	ldr	r2, [r0]
   14108:	ldrh	r3, [r2, r3]
   1410c:	and	r3, r3, #16384	; 0x4000
   14110:	cmp	r3, #0
   14114:	movne	r5, #1
   14118:	moveq	r5, #0
   1411c:	moveq	r3, #1
   14120:	movne	r3, #0
   14124:	ldr	r2, [sp, #44]	; 0x2c
   14128:	and	r3, r3, r2
   1412c:	ands	r8, r3, #255	; 0xff
   14130:	bne	14434 <__assert_fail@plt+0x3348>
   14134:	ldr	r3, [sp, #152]	; 0x98
   14138:	sub	r2, r3, #2
   1413c:	clz	r2, r2
   14140:	lsr	r2, r2, #5
   14144:	b	13c2c <__assert_fail@plt+0x2b40>
   14148:	ldr	r3, [sp, #56]	; 0x38
   1414c:	add	r3, r3, sl
   14150:	str	r3, [sp, #48]	; 0x30
   14154:	ldr	r3, [sp, #48]	; 0x30
   14158:	mov	r6, #0
   1415c:	ldrb	r4, [r3]
   14160:	cmp	r4, #126	; 0x7e
   14164:	ldrls	pc, [pc, r4, lsl #2]
   14168:	b	140e8 <__assert_fail@plt+0x2ffc>
   1416c:	andeq	r3, r1, ip, lsl #30
   14170:	andeq	r4, r1, r8, ror #1
   14174:	andeq	r4, r1, r8, ror #1
   14178:	andeq	r4, r1, r8, ror #1
   1417c:	andeq	r4, r1, r8, ror #1
   14180:	andeq	r4, r1, r8, ror #1
   14184:	andeq	r4, r1, r8, ror #1
   14188:	strdeq	r3, [r1], -r0
   1418c:	ldrdeq	r3, [r1], -r4
   14190:	andeq	r4, r1, r8, ror #6
   14194:	andeq	r3, r1, r4, lsr lr
   14198:	andeq	r3, r1, r8, lsl lr
   1419c:	andeq	r4, r1, ip, lsr #1
   141a0:	andeq	r4, r1, r8, lsl #1
   141a4:	andeq	r4, r1, r8, ror #1
   141a8:	andeq	r4, r1, r8, ror #1
   141ac:	andeq	r4, r1, r8, ror #1
   141b0:	andeq	r4, r1, r8, ror #1
   141b4:	andeq	r4, r1, r8, ror #1
   141b8:	andeq	r4, r1, r8, ror #1
   141bc:	andeq	r4, r1, r8, ror #1
   141c0:	andeq	r4, r1, r8, ror #1
   141c4:	andeq	r4, r1, r8, ror #1
   141c8:	andeq	r4, r1, r8, ror #1
   141cc:	andeq	r4, r1, r8, ror #1
   141d0:	andeq	r4, r1, r8, ror #1
   141d4:	andeq	r4, r1, r8, ror #1
   141d8:	andeq	r4, r1, r8, ror #1
   141dc:	andeq	r4, r1, r8, ror #1
   141e0:	andeq	r4, r1, r8, ror #1
   141e4:	andeq	r4, r1, r8, ror #1
   141e8:	andeq	r4, r1, r8, ror #1
   141ec:	andeq	r4, r1, r0
   141f0:	strdeq	r3, [r1], -ip
   141f4:	strdeq	r3, [r1], -ip
   141f8:	andeq	r3, r1, ip, lsl #24
   141fc:	strdeq	r3, [r1], -ip
   14200:	muleq	r1, r4, r0
   14204:	strdeq	r3, [r1], -ip
   14208:	andeq	r4, r1, r8, rrx
   1420c:	strdeq	r3, [r1], -ip
   14210:	strdeq	r3, [r1], -ip
   14214:	strdeq	r3, [r1], -ip
   14218:	muleq	r1, r4, r0
   1421c:	muleq	r1, r4, r0
   14220:	muleq	r1, r4, r0
   14224:	muleq	r1, r4, r0
   14228:	muleq	r1, r4, r0
   1422c:	muleq	r1, r4, r0
   14230:	muleq	r1, r4, r0
   14234:	muleq	r1, r4, r0
   14238:	muleq	r1, r4, r0
   1423c:	muleq	r1, r4, r0
   14240:	muleq	r1, r4, r0
   14244:	muleq	r1, r4, r0
   14248:	muleq	r1, r4, r0
   1424c:	muleq	r1, r4, r0
   14250:	muleq	r1, r4, r0
   14254:	muleq	r1, r4, r0
   14258:	strdeq	r3, [r1], -ip
   1425c:	strdeq	r3, [r1], -ip
   14260:	strdeq	r3, [r1], -ip
   14264:	strdeq	r3, [r1], -ip
   14268:	andeq	r4, r1, r8, lsr r0
   1426c:	andeq	r4, r1, r8, ror #1
   14270:	muleq	r1, r4, r0
   14274:	muleq	r1, r4, r0
   14278:	muleq	r1, r4, r0
   1427c:	muleq	r1, r4, r0
   14280:	muleq	r1, r4, r0
   14284:	muleq	r1, r4, r0
   14288:	muleq	r1, r4, r0
   1428c:	muleq	r1, r4, r0
   14290:	muleq	r1, r4, r0
   14294:	muleq	r1, r4, r0
   14298:	muleq	r1, r4, r0
   1429c:	muleq	r1, r4, r0
   142a0:	muleq	r1, r4, r0
   142a4:	muleq	r1, r4, r0
   142a8:	muleq	r1, r4, r0
   142ac:	muleq	r1, r4, r0
   142b0:	muleq	r1, r4, r0
   142b4:	muleq	r1, r4, r0
   142b8:	muleq	r1, r4, r0
   142bc:	muleq	r1, r4, r0
   142c0:	muleq	r1, r4, r0
   142c4:	muleq	r1, r4, r0
   142c8:	muleq	r1, r4, r0
   142cc:	muleq	r1, r4, r0
   142d0:	muleq	r1, r4, r0
   142d4:	muleq	r1, r4, r0
   142d8:	strdeq	r3, [r1], -ip
   142dc:	andeq	r3, r1, r8, asr sp
   142e0:	muleq	r1, r4, r0
   142e4:	strdeq	r3, [r1], -ip
   142e8:	muleq	r1, r4, r0
   142ec:	strdeq	r3, [r1], -ip
   142f0:	muleq	r1, r4, r0
   142f4:	muleq	r1, r4, r0
   142f8:	muleq	r1, r4, r0
   142fc:	muleq	r1, r4, r0
   14300:	muleq	r1, r4, r0
   14304:	muleq	r1, r4, r0
   14308:	muleq	r1, r4, r0
   1430c:	muleq	r1, r4, r0
   14310:	muleq	r1, r4, r0
   14314:	muleq	r1, r4, r0
   14318:	muleq	r1, r4, r0
   1431c:	muleq	r1, r4, r0
   14320:	muleq	r1, r4, r0
   14324:	muleq	r1, r4, r0
   14328:	muleq	r1, r4, r0
   1432c:	muleq	r1, r4, r0
   14330:	muleq	r1, r4, r0
   14334:	muleq	r1, r4, r0
   14338:	muleq	r1, r4, r0
   1433c:	muleq	r1, r4, r0
   14340:	muleq	r1, r4, r0
   14344:	muleq	r1, r4, r0
   14348:	muleq	r1, r4, r0
   1434c:	muleq	r1, r4, r0
   14350:	muleq	r1, r4, r0
   14354:	muleq	r1, r4, r0
   14358:	andeq	r3, r1, ip, ror #23
   1435c:	strdeq	r3, [r1], -ip
   14360:	andeq	r3, r1, ip, ror #23
   14364:	andeq	r3, r1, ip, lsl #24
   14368:	mov	r3, #116	; 0x74
   1436c:	b	13e3c <__assert_fail@plt+0x2d50>
   14370:	ldr	r3, [sp, #160]	; 0xa0
   14374:	cmp	r3, #0
   14378:	beq	13c48 <__assert_fail@plt+0x2b5c>
   1437c:	lsr	r3, r4, #5
   14380:	ldr	r0, [sp, #160]	; 0xa0
   14384:	uxtb	r3, r3
   14388:	and	r1, r4, #31
   1438c:	ldr	r0, [r0, r3, lsl #2]
   14390:	lsr	r3, r0, r1
   14394:	tst	r3, #1
   14398:	beq	13c48 <__assert_fail@plt+0x2b5c>
   1439c:	ldr	r3, [sp, #28]
   143a0:	cmp	r3, #0
   143a4:	beq	13da8 <__assert_fail@plt+0x2cbc>
   143a8:	ldr	sl, [sp, #32]
   143ac:	mov	r8, fp
   143b0:	b	13e6c <__assert_fail@plt+0x2d80>
   143b4:	ldr	r3, [sp, #28]
   143b8:	cmp	r3, #0
   143bc:	bne	14910 <__assert_fail@plt+0x3824>
   143c0:	add	sl, sl, #1
   143c4:	ldr	r6, [sp, #40]	; 0x28
   143c8:	mov	r5, #0
   143cc:	mov	r4, #92	; 0x5c
   143d0:	b	13c64 <__assert_fail@plt+0x2b78>
   143d4:	cmp	r9, r8
   143d8:	bne	14648 <__assert_fail@plt+0x355c>
   143dc:	ldr	r0, [sp, #100]	; 0x64
   143e0:	bl	10f0c <iswprint@plt>
   143e4:	add	r5, r5, r4
   143e8:	cmp	r0, #0
   143ec:	add	r0, sp, #104	; 0x68
   143f0:	moveq	r6, #0
   143f4:	bl	10eb8 <mbsinit@plt>
   143f8:	cmp	r0, #0
   143fc:	beq	145dc <__assert_fail@plt+0x34f0>
   14400:	mov	r2, r6
   14404:	mov	ip, r5
   14408:	eor	r5, r2, #1
   1440c:	ldr	r4, [sp, #80]	; 0x50
   14410:	ldr	r6, [sp, #84]	; 0x54
   14414:	ldr	r7, [sp, #88]	; 0x58
   14418:	uxtb	r5, r5
   1441c:	cmp	ip, #1
   14420:	bls	14920 <__assert_fail@plt+0x3834>
   14424:	ldr	r3, [sp, #44]	; 0x2c
   14428:	and	r8, r3, r5
   1442c:	mov	r5, r2
   14430:	uxtb	r8, r8
   14434:	add	r2, sl, ip
   14438:	ldr	r0, [sp, #48]	; 0x30
   1443c:	mov	r1, #0
   14440:	str	r5, [sp, #48]	; 0x30
   14444:	ldr	r9, [sp, #28]
   14448:	ldr	ip, [sp, #40]	; 0x28
   1444c:	ldr	r3, [sp, #32]
   14450:	ldr	r5, [sp, #152]	; 0x98
   14454:	b	14510 <__assert_fail@plt+0x3424>
   14458:	cmp	r9, #0
   1445c:	bne	14834 <__assert_fail@plt+0x3748>
   14460:	eor	r1, ip, #1
   14464:	cmp	r5, #2
   14468:	movne	r1, #0
   1446c:	andeq	r1, r1, #1
   14470:	cmp	r1, #0
   14474:	beq	144ac <__assert_fail@plt+0x33c0>
   14478:	cmp	fp, r7
   1447c:	movhi	ip, #39	; 0x27
   14480:	strbhi	ip, [r3, r7]
   14484:	add	ip, r7, #1
   14488:	cmp	fp, ip
   1448c:	movhi	lr, #36	; 0x24
   14490:	strbhi	lr, [r3, ip]
   14494:	add	ip, r7, #2
   14498:	cmp	fp, ip
   1449c:	movhi	lr, #39	; 0x27
   144a0:	strbhi	lr, [r3, ip]
   144a4:	add	r7, r7, #3
   144a8:	mov	ip, r1
   144ac:	cmp	fp, r7
   144b0:	movhi	r1, #92	; 0x5c
   144b4:	strbhi	r1, [r3, r7]
   144b8:	add	r1, r7, #1
   144bc:	cmp	fp, r1
   144c0:	lsrhi	lr, r4, #6
   144c4:	addhi	lr, lr, #48	; 0x30
   144c8:	strbhi	lr, [r3, r1]
   144cc:	add	lr, r7, #2
   144d0:	cmp	fp, lr
   144d4:	lsrhi	r1, r4, #3
   144d8:	andhi	r1, r1, #7
   144dc:	addhi	r1, r1, #48	; 0x30
   144e0:	add	sl, sl, #1
   144e4:	strbhi	r1, [r3, lr]
   144e8:	and	r4, r4, #7
   144ec:	cmp	r2, sl
   144f0:	add	r4, r4, #48	; 0x30
   144f4:	add	r7, r7, #3
   144f8:	bls	14858 <__assert_fail@plt+0x376c>
   144fc:	mov	r1, r8
   14500:	cmp	fp, r7
   14504:	strbhi	r4, [r3, r7]
   14508:	ldrb	r4, [r0, #1]!
   1450c:	add	r7, r7, #1
   14510:	cmp	r8, #0
   14514:	bne	14458 <__assert_fail@plt+0x336c>
   14518:	cmp	r6, #0
   1451c:	bne	1456c <__assert_fail@plt+0x3480>
   14520:	eor	r6, r1, #1
   14524:	and	r6, r6, ip
   14528:	add	sl, sl, #1
   1452c:	cmp	r2, sl
   14530:	uxtb	r6, r6
   14534:	bls	14594 <__assert_fail@plt+0x34a8>
   14538:	cmp	r6, #0
   1453c:	beq	14500 <__assert_fail@plt+0x3414>
   14540:	cmp	fp, r7
   14544:	movhi	ip, #39	; 0x27
   14548:	strbhi	ip, [r3, r7]
   1454c:	add	ip, r7, #1
   14550:	cmp	fp, ip
   14554:	movhi	lr, #39	; 0x27
   14558:	strbhi	lr, [r3, ip]
   1455c:	add	r7, r7, #2
   14560:	mov	r6, r8
   14564:	mov	ip, r8
   14568:	b	14500 <__assert_fail@plt+0x3414>
   1456c:	cmp	fp, r7
   14570:	eor	r6, r1, #1
   14574:	movhi	lr, #92	; 0x5c
   14578:	and	r6, r6, ip
   1457c:	add	sl, sl, #1
   14580:	strbhi	lr, [r3, r7]
   14584:	cmp	r2, sl
   14588:	add	r7, r7, #1
   1458c:	uxtb	r6, r6
   14590:	bhi	14538 <__assert_fail@plt+0x344c>
   14594:	str	ip, [sp, #40]	; 0x28
   14598:	ldr	r5, [sp, #48]	; 0x30
   1459c:	b	13c64 <__assert_fail@plt+0x2b78>
   145a0:	ldr	r3, [sp, #24]
   145a4:	cmn	r3, #1
   145a8:	mov	r3, #0
   145ac:	str	r3, [sp, #104]	; 0x68
   145b0:	str	r3, [sp, #108]	; 0x6c
   145b4:	beq	148d4 <__assert_fail@plt+0x37e8>
   145b8:	mov	r2, r5
   145bc:	mov	r3, #0
   145c0:	str	r7, [sp, #88]	; 0x58
   145c4:	ldr	r7, [sp, #152]	; 0x98
   145c8:	str	r5, [sp, #92]	; 0x5c
   145cc:	str	r6, [sp, #84]	; 0x54
   145d0:	mov	r5, r3
   145d4:	mov	r6, r2
   145d8:	str	r4, [sp, #80]	; 0x50
   145dc:	ldr	r3, [sp, #56]	; 0x38
   145e0:	add	r9, sl, r5
   145e4:	add	r8, r3, r9
   145e8:	ldr	r3, [sp, #24]
   145ec:	mov	r1, r8
   145f0:	sub	r2, r3, r9
   145f4:	add	r0, sp, #100	; 0x64
   145f8:	add	r3, sp, #104	; 0x68
   145fc:	bl	16ecc <__assert_fail@plt+0x5de0>
   14600:	subs	r4, r0, #0
   14604:	beq	149ac <__assert_fail@plt+0x38c0>
   14608:	cmn	r4, #1
   1460c:	beq	1498c <__assert_fail@plt+0x38a0>
   14610:	cmn	r4, #2
   14614:	beq	1492c <__assert_fail@plt+0x3840>
   14618:	ldr	r2, [sp, #28]
   1461c:	cmp	r7, #2
   14620:	movne	r2, #0
   14624:	andeq	r2, r2, #1
   14628:	cmp	r2, #0
   1462c:	beq	143dc <__assert_fail@plt+0x32f0>
   14630:	cmp	r4, #1
   14634:	beq	143dc <__assert_fail@plt+0x32f0>
   14638:	sub	r3, r4, #1
   1463c:	add	r9, r3, r9
   14640:	ldr	r3, [sp, #56]	; 0x38
   14644:	add	r9, r3, r9
   14648:	ldrb	r3, [r8, #1]!
   1464c:	sub	r3, r3, #91	; 0x5b
   14650:	cmp	r3, #33	; 0x21
   14654:	ldrls	pc, [pc, r3, lsl #2]
   14658:	b	143d4 <__assert_fail@plt+0x32e8>
   1465c:	andeq	r4, r1, r4, ror #13
   14660:	andeq	r4, r1, r4, ror #13
   14664:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14668:	andeq	r4, r1, r4, ror #13
   1466c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14670:	andeq	r4, r1, r4, ror #13
   14674:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14678:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1467c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14680:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14684:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14688:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1468c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14690:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14694:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14698:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1469c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146cc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146d4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146d8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146dc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146e0:	andeq	r4, r1, r4, ror #13
   146e4:	mov	r3, #2
   146e8:	ldr	sl, [sp, #32]
   146ec:	mov	r8, fp
   146f0:	str	r3, [sp, #152]	; 0x98
   146f4:	b	13e6c <__assert_fail@plt+0x2d80>
   146f8:	ldr	r3, [sp, #156]	; 0x9c
   146fc:	tst	r3, #1
   14700:	bne	1482c <__assert_fail@plt+0x3740>
   14704:	ldr	r3, [sp, #152]	; 0x98
   14708:	ldr	r4, [sp, #44]	; 0x2c
   1470c:	sub	r2, r3, #2
   14710:	mov	r5, #0
   14714:	clz	r2, r2
   14718:	mov	r8, r4
   1471c:	lsr	r2, r2, #5
   14720:	b	13c2c <__assert_fail@plt+0x2b40>
   14724:	ldr	r3, [sp, #156]	; 0x9c
   14728:	ands	r9, r3, #4
   1472c:	beq	14864 <__assert_fail@plt+0x3778>
   14730:	ldr	r2, [sp, #24]
   14734:	add	r3, sl, #2
   14738:	cmp	r3, r2
   1473c:	bcs	14750 <__assert_fail@plt+0x3664>
   14740:	ldr	r2, [sp, #48]	; 0x30
   14744:	ldrb	r4, [r2, #1]
   14748:	cmp	r4, #63	; 0x3f
   1474c:	beq	149ec <__assert_fail@plt+0x3900>
   14750:	mov	r2, #0
   14754:	mov	r8, r2
   14758:	mov	r5, r2
   1475c:	mov	r4, #63	; 0x3f
   14760:	b	13c2c <__assert_fail@plt+0x2b40>
   14764:	ldr	r3, [sp, #28]
   14768:	cmp	r3, #0
   1476c:	bne	14a90 <__assert_fail@plt+0x39a4>
   14770:	mov	r2, r5
   14774:	mov	r8, r3
   14778:	mov	r5, #0
   1477c:	mov	r4, #63	; 0x3f
   14780:	b	13c2c <__assert_fail@plt+0x2b40>
   14784:	ldr	r3, [sp, #28]
   14788:	cmp	r3, #0
   1478c:	bne	14a90 <__assert_fail@plt+0x39a4>
   14790:	ldr	r2, [sp, #72]	; 0x48
   14794:	adds	r3, fp, #0
   14798:	movne	r3, #1
   1479c:	cmp	r2, #0
   147a0:	movne	r3, #0
   147a4:	cmp	r3, #0
   147a8:	strne	fp, [sp, #72]	; 0x48
   147ac:	movne	fp, #0
   147b0:	bne	147ec <__assert_fail@plt+0x3700>
   147b4:	cmp	fp, r7
   147b8:	movhi	r2, #39	; 0x27
   147bc:	ldrhi	r3, [sp, #32]
   147c0:	strbhi	r2, [r3, r7]
   147c4:	add	r3, r7, #1
   147c8:	cmp	fp, r3
   147cc:	movhi	r1, #92	; 0x5c
   147d0:	ldrhi	r2, [sp, #32]
   147d4:	strbhi	r1, [r2, r3]
   147d8:	add	r3, r7, #2
   147dc:	cmp	fp, r3
   147e0:	movhi	r1, #39	; 0x27
   147e4:	ldrhi	r2, [sp, #32]
   147e8:	strbhi	r1, [r2, r3]
   147ec:	ldr	r3, [sp, #28]
   147f0:	add	r7, r7, #3
   147f4:	mov	r2, r5
   147f8:	mov	r8, r3
   147fc:	str	r5, [sp, #68]	; 0x44
   14800:	str	r3, [sp, #40]	; 0x28
   14804:	mov	r4, #39	; 0x27
   14808:	b	13c2c <__assert_fail@plt+0x2b40>
   1480c:	ldr	r3, [sp, #56]	; 0x38
   14810:	ldrb	r3, [r3, #1]
   14814:	adds	r3, r3, #0
   14818:	movne	r3, #1
   1481c:	b	13c04 <__assert_fail@plt+0x2b18>
   14820:	ldr	r5, [sp, #28]
   14824:	mov	r4, #48	; 0x30
   14828:	b	13c2c <__assert_fail@plt+0x2b40>
   1482c:	add	sl, sl, #1
   14830:	b	1375c <__assert_fail@plt+0x2670>
   14834:	mov	sl, r3
   14838:	ldr	r3, [sp, #28]
   1483c:	mov	r8, fp
   14840:	str	r3, [sp, #44]	; 0x2c
   14844:	ldr	r3, [sp, #152]	; 0x98
   14848:	sub	r2, r3, #2
   1484c:	clz	r2, r2
   14850:	lsr	r2, r2, #5
   14854:	b	13e6c <__assert_fail@plt+0x2d80>
   14858:	str	ip, [sp, #40]	; 0x28
   1485c:	ldr	r5, [sp, #48]	; 0x30
   14860:	b	13c9c <__assert_fail@plt+0x2bb0>
   14864:	mov	r2, r9
   14868:	mov	r8, r9
   1486c:	mov	r5, #0
   14870:	mov	r4, #63	; 0x3f
   14874:	b	13c2c <__assert_fail@plt+0x2b40>
   14878:	cmp	fp, #0
   1487c:	beq	148f4 <__assert_fail@plt+0x3808>
   14880:	ldr	r1, [sp, #32]
   14884:	mov	r3, #34	; 0x22
   14888:	mov	r2, #1
   1488c:	strb	r3, [r1]
   14890:	ldr	r3, [pc, #332]	; 149e4 <__assert_fail@plt+0x38f8>
   14894:	str	r2, [sp, #52]	; 0x34
   14898:	mov	r7, r2
   1489c:	str	r2, [sp, #44]	; 0x2c
   148a0:	str	r3, [sp, #64]	; 0x40
   148a4:	b	1374c <__assert_fail@plt+0x2660>
   148a8:	ldr	r3, [pc, #300]	; 149dc <__assert_fail@plt+0x38f0>
   148ac:	str	r3, [sp, #64]	; 0x40
   148b0:	mov	r3, #0
   148b4:	str	r3, [sp, #28]
   148b8:	mov	r3, #1
   148bc:	str	r3, [sp, #52]	; 0x34
   148c0:	mov	r7, r3
   148c4:	mov	r3, #2
   148c8:	str	r3, [sp, #152]	; 0x98
   148cc:	b	1374c <__assert_fail@plt+0x2660>
   148d0:	bl	110d4 <abort@plt>
   148d4:	ldr	r0, [sp, #56]	; 0x38
   148d8:	bl	10fd8 <strlen@plt>
   148dc:	str	r0, [sp, #24]
   148e0:	b	145b8 <__assert_fail@plt+0x34cc>
   148e4:	mov	r5, r8
   148e8:	mov	r4, #48	; 0x30
   148ec:	ldr	r8, [sp, #44]	; 0x2c
   148f0:	b	13c2c <__assert_fail@plt+0x2b40>
   148f4:	mov	r3, #1
   148f8:	str	r3, [sp, #52]	; 0x34
   148fc:	mov	r7, r3
   14900:	str	r3, [sp, #44]	; 0x2c
   14904:	ldr	r3, [pc, #216]	; 149e4 <__assert_fail@plt+0x38f8>
   14908:	str	r3, [sp, #64]	; 0x40
   1490c:	b	1374c <__assert_fail@plt+0x2660>
   14910:	ldr	sl, [sp, #32]
   14914:	mov	r8, fp
   14918:	mov	r2, r3
   1491c:	b	13e6c <__assert_fail@plt+0x2d80>
   14920:	mov	r3, r5
   14924:	mov	r5, r2
   14928:	b	14124 <__assert_fail@plt+0x3038>
   1492c:	ldr	r1, [sp, #24]
   14930:	mov	r2, r5
   14934:	cmp	r1, r9
   14938:	mov	ip, r5
   1493c:	ldr	r4, [sp, #80]	; 0x50
   14940:	ldr	r5, [sp, #92]	; 0x5c
   14944:	ldr	r6, [sp, #84]	; 0x54
   14948:	ldr	r7, [sp, #88]	; 0x58
   1494c:	bls	14980 <__assert_fail@plt+0x3894>
   14950:	ldrb	r3, [r8]
   14954:	cmp	r3, #0
   14958:	bne	1496c <__assert_fail@plt+0x3880>
   1495c:	b	14984 <__assert_fail@plt+0x3898>
   14960:	ldrb	r3, [r8, #1]!
   14964:	cmp	r3, #0
   14968:	beq	14a84 <__assert_fail@plt+0x3998>
   1496c:	add	r2, r2, #1
   14970:	add	r3, sl, r2
   14974:	cmp	r1, r3
   14978:	bhi	14960 <__assert_fail@plt+0x3874>
   1497c:	mov	ip, r2
   14980:	mov	r3, #0
   14984:	mov	r2, r3
   14988:	b	1441c <__assert_fail@plt+0x3330>
   1498c:	mov	r3, #0
   14990:	mov	ip, r5
   14994:	ldr	r4, [sp, #80]	; 0x50
   14998:	ldr	r5, [sp, #92]	; 0x5c
   1499c:	ldr	r6, [sp, #84]	; 0x54
   149a0:	ldr	r7, [sp, #88]	; 0x58
   149a4:	mov	r2, r3
   149a8:	b	1441c <__assert_fail@plt+0x3330>
   149ac:	mov	r3, r6
   149b0:	mov	ip, r5
   149b4:	eor	r5, r3, #1
   149b8:	mov	r2, r6
   149bc:	ldr	r4, [sp, #80]	; 0x50
   149c0:	ldr	r6, [sp, #84]	; 0x54
   149c4:	ldr	r7, [sp, #88]	; 0x58
   149c8:	uxtb	r5, r5
   149cc:	b	1441c <__assert_fail@plt+0x3330>
   149d0:	ldr	sl, [sp, #32]
   149d4:	mov	r8, fp
   149d8:	b	14840 <__assert_fail@plt+0x3754>
   149dc:	andeq	r8, r1, ip, lsr r5
   149e0:	andeq	r8, r1, r0, asr #10
   149e4:	andeq	r8, r1, r8, lsr r5
   149e8:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   149ec:	ldr	r2, [sp, #56]	; 0x38
   149f0:	ldrb	r1, [r2, r3]
   149f4:	sub	r2, r1, #33	; 0x21
   149f8:	uxtb	r2, r2
   149fc:	cmp	r2, #29
   14a00:	bhi	14aa0 <__assert_fail@plt+0x39b4>
   14a04:	ldr	r0, [pc, #-36]	; 149e8 <__assert_fail@plt+0x38fc>
   14a08:	mov	ip, #1
   14a0c:	ands	r2, r0, ip, lsl r2
   14a10:	beq	14ab0 <__assert_fail@plt+0x39c4>
   14a14:	ldr	r2, [sp, #28]
   14a18:	cmp	r2, #0
   14a1c:	bne	14bb0 <__assert_fail@plt+0x3ac4>
   14a20:	cmp	fp, r7
   14a24:	ldr	r8, [sp, #28]
   14a28:	ldrhi	r2, [sp, #32]
   14a2c:	mov	sl, r3
   14a30:	mov	r5, r8
   14a34:	strbhi	r4, [r2, r7]
   14a38:	add	r2, r7, #1
   14a3c:	cmp	fp, r2
   14a40:	movhi	r0, #34	; 0x22
   14a44:	ldrhi	ip, [sp, #32]
   14a48:	mov	r4, r1
   14a4c:	strbhi	r0, [ip, r2]
   14a50:	add	r2, r7, #2
   14a54:	cmp	fp, r2
   14a58:	movhi	r0, #34	; 0x22
   14a5c:	ldrhi	ip, [sp, #32]
   14a60:	strbhi	r0, [ip, r2]
   14a64:	add	r2, r7, #3
   14a68:	cmp	fp, r2
   14a6c:	movhi	r0, #63	; 0x3f
   14a70:	ldrhi	ip, [sp, #32]
   14a74:	add	r7, r7, #4
   14a78:	strbhi	r0, [ip, r2]
   14a7c:	mov	r2, r8
   14a80:	b	13c2c <__assert_fail@plt+0x2b40>
   14a84:	mov	ip, r2
   14a88:	mov	r2, r3
   14a8c:	b	1441c <__assert_fail@plt+0x3330>
   14a90:	ldr	sl, [sp, #32]
   14a94:	mov	r8, fp
   14a98:	ldr	r2, [sp, #28]
   14a9c:	b	13e6c <__assert_fail@plt+0x2d80>
   14aa0:	mov	r2, #0
   14aa4:	mov	r8, r2
   14aa8:	mov	r5, r2
   14aac:	b	13c2c <__assert_fail@plt+0x2b40>
   14ab0:	mov	r8, r2
   14ab4:	mov	r5, #0
   14ab8:	b	13c2c <__assert_fail@plt+0x2b40>
   14abc:	ldr	r1, [sp, #152]	; 0x98
   14ac0:	bl	13588 <__assert_fail@plt+0x249c>
   14ac4:	str	r0, [sp, #168]	; 0xa8
   14ac8:	b	13ae8 <__assert_fail@plt+0x29fc>
   14acc:	ldr	r1, [sp, #152]	; 0x98
   14ad0:	bl	13588 <__assert_fail@plt+0x249c>
   14ad4:	str	r0, [sp, #164]	; 0xa4
   14ad8:	b	13ac8 <__assert_fail@plt+0x29dc>
   14adc:	ldr	r7, [sp, #28]
   14ae0:	b	13b28 <__assert_fail@plt+0x2a3c>
   14ae4:	ldr	sl, [sp, #32]
   14ae8:	ldr	r2, [sp, #68]	; 0x44
   14aec:	mov	r8, fp
   14af0:	mov	fp, r7
   14af4:	ldr	r3, [sp, #64]	; 0x40
   14af8:	cmp	r3, #0
   14afc:	moveq	r2, #0
   14b00:	andne	r2, r2, #1
   14b04:	cmp	r2, #0
   14b08:	beq	14b34 <__assert_fail@plt+0x3a48>
   14b0c:	mov	r2, r3
   14b10:	ldrb	r3, [r3]
   14b14:	cmp	r3, #0
   14b18:	beq	14b34 <__assert_fail@plt+0x3a48>
   14b1c:	cmp	r8, fp
   14b20:	strbhi	r3, [sl, fp]
   14b24:	ldrb	r3, [r2, #1]!
   14b28:	add	fp, fp, #1
   14b2c:	cmp	r3, #0
   14b30:	bne	14b1c <__assert_fail@plt+0x3a30>
   14b34:	cmp	r8, fp
   14b38:	movhi	r3, #0
   14b3c:	strbhi	r3, [sl, fp]
   14b40:	b	13ec8 <__assert_fail@plt+0x2ddc>
   14b44:	ldr	r3, [sp, #168]	; 0xa8
   14b48:	ldr	sl, [sp, #32]
   14b4c:	str	r3, [sp, #16]
   14b50:	ldr	r3, [sp, #164]	; 0xa4
   14b54:	mov	ip, #5
   14b58:	str	r3, [sp, #12]
   14b5c:	ldr	r3, [sp, #160]	; 0xa0
   14b60:	ldr	r2, [sp, #56]	; 0x38
   14b64:	str	r3, [sp, #8]
   14b68:	ldr	r3, [sp, #156]	; 0x9c
   14b6c:	ldr	r1, [sp, #72]	; 0x48
   14b70:	str	r3, [sp, #4]
   14b74:	mov	r0, sl
   14b78:	ldr	r3, [sp, #24]
   14b7c:	str	ip, [sp]
   14b80:	bl	136a8 <__assert_fail@plt+0x25bc>
   14b84:	mov	fp, r0
   14b88:	b	13ec8 <__assert_fail@plt+0x2ddc>
   14b8c:	mov	r8, fp
   14b90:	ldr	sl, [sp, #32]
   14b94:	mov	fp, r7
   14b98:	mov	r2, r3
   14b9c:	b	14af4 <__assert_fail@plt+0x3a08>
   14ba0:	mov	r8, fp
   14ba4:	ldr	sl, [sp, #32]
   14ba8:	mov	fp, r7
   14bac:	b	14af4 <__assert_fail@plt+0x3a08>
   14bb0:	ldr	sl, [sp, #32]
   14bb4:	mov	r8, fp
   14bb8:	b	13e84 <__assert_fail@plt+0x2d98>
   14bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc0:	sub	sp, sp, #52	; 0x34
   14bc4:	mov	r4, r0
   14bc8:	mov	r5, r3
   14bcc:	mov	sl, r1
   14bd0:	mov	fp, r2
   14bd4:	bl	10ff0 <__errno_location@plt>
   14bd8:	ldr	r7, [pc, #412]	; 14d7c <__assert_fail@plt+0x3c90>
   14bdc:	cmn	r4, #-2147483647	; 0x80000001
   14be0:	ldr	r6, [r7]
   14be4:	mov	r8, r0
   14be8:	movne	r0, #0
   14bec:	moveq	r0, #1
   14bf0:	ldr	r3, [r8]
   14bf4:	orrs	r0, r0, r4, lsr #31
   14bf8:	str	r3, [sp, #24]
   14bfc:	bne	14d78 <__assert_fail@plt+0x3c8c>
   14c00:	ldr	r2, [r7, #4]
   14c04:	cmp	r4, r2
   14c08:	blt	14c68 <__assert_fail@plt+0x3b7c>
   14c0c:	add	r9, r7, #8
   14c10:	cmp	r6, r9
   14c14:	str	r2, [sp, #44]	; 0x2c
   14c18:	beq	14d48 <__assert_fail@plt+0x3c5c>
   14c1c:	mov	r3, #8
   14c20:	sub	r2, r4, r2
   14c24:	mov	r0, r6
   14c28:	str	r3, [sp]
   14c2c:	add	r2, r2, #1
   14c30:	mvn	r3, #-2147483648	; 0x80000000
   14c34:	add	r1, sp, #44	; 0x2c
   14c38:	bl	15acc <__assert_fail@plt+0x49e0>
   14c3c:	mov	r6, r0
   14c40:	str	r0, [r7]
   14c44:	ldr	r0, [r7, #4]
   14c48:	ldr	r2, [sp, #44]	; 0x2c
   14c4c:	mov	r1, #0
   14c50:	sub	r2, r2, r0
   14c54:	add	r0, r6, r0, lsl #3
   14c58:	lsl	r2, r2, #3
   14c5c:	bl	11008 <memset@plt>
   14c60:	ldr	r3, [sp, #44]	; 0x2c
   14c64:	str	r3, [r7, #4]
   14c68:	add	r3, r6, r4, lsl #3
   14c6c:	ldr	r1, [r5, #4]
   14c70:	ldr	r7, [r3, #4]
   14c74:	ldr	r9, [r6, r4, lsl #3]
   14c78:	ldr	r2, [r5, #40]	; 0x28
   14c7c:	ldr	ip, [r5, #44]	; 0x2c
   14c80:	add	r0, r5, #8
   14c84:	str	r3, [sp, #28]
   14c88:	ldr	r3, [r5]
   14c8c:	orr	r1, r1, #1
   14c90:	mov	lr, r0
   14c94:	str	r1, [sp, #32]
   14c98:	str	r0, [sp, #36]	; 0x24
   14c9c:	str	r1, [sp, #4]
   14ca0:	str	r2, [sp, #12]
   14ca4:	str	r3, [sp]
   14ca8:	mov	r0, r7
   14cac:	mov	r1, r9
   14cb0:	str	ip, [sp, #16]
   14cb4:	str	lr, [sp, #8]
   14cb8:	mov	r3, fp
   14cbc:	mov	r2, sl
   14cc0:	bl	136a8 <__assert_fail@plt+0x25bc>
   14cc4:	cmp	r9, r0
   14cc8:	bhi	14d34 <__assert_fail@plt+0x3c48>
   14ccc:	ldr	r3, [pc, #172]	; 14d80 <__assert_fail@plt+0x3c94>
   14cd0:	add	r9, r0, #1
   14cd4:	cmp	r7, r3
   14cd8:	str	r9, [r6, r4, lsl #3]
   14cdc:	beq	14ce8 <__assert_fail@plt+0x3bfc>
   14ce0:	mov	r0, r7
   14ce4:	bl	131cc <__assert_fail@plt+0x20e0>
   14ce8:	mov	r0, r9
   14cec:	bl	15968 <__assert_fail@plt+0x487c>
   14cf0:	ldr	lr, [sp, #28]
   14cf4:	ldr	ip, [r5, #44]	; 0x2c
   14cf8:	ldr	r4, [r5, #40]	; 0x28
   14cfc:	mov	r3, fp
   14d00:	mov	r2, sl
   14d04:	mov	r1, r9
   14d08:	str	r0, [lr, #4]
   14d0c:	ldr	lr, [r5]
   14d10:	ldr	r5, [sp, #36]	; 0x24
   14d14:	str	ip, [sp, #16]
   14d18:	str	r5, [sp, #8]
   14d1c:	ldr	r5, [sp, #32]
   14d20:	str	r4, [sp, #12]
   14d24:	str	r5, [sp, #4]
   14d28:	str	lr, [sp]
   14d2c:	mov	r7, r0
   14d30:	bl	136a8 <__assert_fail@plt+0x25bc>
   14d34:	ldr	r3, [sp, #24]
   14d38:	mov	r0, r7
   14d3c:	str	r3, [r8]
   14d40:	add	sp, sp, #52	; 0x34
   14d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d48:	mov	r3, #8
   14d4c:	sub	r2, r4, r2
   14d50:	str	r3, [sp]
   14d54:	add	r1, sp, #44	; 0x2c
   14d58:	add	r2, r2, #1
   14d5c:	mvn	r3, #-2147483648	; 0x80000000
   14d60:	bl	15acc <__assert_fail@plt+0x49e0>
   14d64:	mov	r6, r0
   14d68:	ldm	r9, {r0, r1}
   14d6c:	str	r6, [r7]
   14d70:	stm	r6, {r0, r1}
   14d74:	b	14c44 <__assert_fail@plt+0x3b58>
   14d78:	bl	110d4 <abort@plt>
   14d7c:	andeq	r9, r2, r0, lsr #2
   14d80:	andeq	r9, r2, r4, lsl #4
   14d84:	push	{r4, r5, r6, lr}
   14d88:	mov	r5, r0
   14d8c:	bl	10ff0 <__errno_location@plt>
   14d90:	cmp	r5, #0
   14d94:	mov	r1, #48	; 0x30
   14d98:	mov	r4, r0
   14d9c:	ldr	r0, [pc, #16]	; 14db4 <__assert_fail@plt+0x3cc8>
   14da0:	ldr	r6, [r4]
   14da4:	movne	r0, r5
   14da8:	bl	15dc8 <__assert_fail@plt+0x4cdc>
   14dac:	str	r6, [r4]
   14db0:	pop	{r4, r5, r6, pc}
   14db4:	andeq	r9, r2, r4, lsl #6
   14db8:	ldr	r3, [pc, #12]	; 14dcc <__assert_fail@plt+0x3ce0>
   14dbc:	cmp	r0, #0
   14dc0:	moveq	r0, r3
   14dc4:	ldr	r0, [r0]
   14dc8:	bx	lr
   14dcc:	andeq	r9, r2, r4, lsl #6
   14dd0:	ldr	r3, [pc, #12]	; 14de4 <__assert_fail@plt+0x3cf8>
   14dd4:	cmp	r0, #0
   14dd8:	moveq	r0, r3
   14ddc:	str	r1, [r0]
   14de0:	bx	lr
   14de4:	andeq	r9, r2, r4, lsl #6
   14de8:	ldr	r3, [pc, #52]	; 14e24 <__assert_fail@plt+0x3d38>
   14dec:	cmp	r0, #0
   14df0:	moveq	r0, r3
   14df4:	add	r3, r0, #8
   14df8:	push	{lr}		; (str lr, [sp, #-4]!)
   14dfc:	lsr	lr, r1, #5
   14e00:	and	r1, r1, #31
   14e04:	ldr	ip, [r3, lr, lsl #2]
   14e08:	lsr	r0, ip, r1
   14e0c:	eor	r2, r2, r0
   14e10:	and	r2, r2, #1
   14e14:	and	r0, r0, #1
   14e18:	eor	r1, ip, r2, lsl r1
   14e1c:	str	r1, [r3, lr, lsl #2]
   14e20:	pop	{pc}		; (ldr pc, [sp], #4)
   14e24:	andeq	r9, r2, r4, lsl #6
   14e28:	ldr	r3, [pc, #16]	; 14e40 <__assert_fail@plt+0x3d54>
   14e2c:	cmp	r0, #0
   14e30:	movne	r3, r0
   14e34:	ldr	r0, [r3, #4]
   14e38:	str	r1, [r3, #4]
   14e3c:	bx	lr
   14e40:	andeq	r9, r2, r4, lsl #6
   14e44:	ldr	r3, [pc, #44]	; 14e78 <__assert_fail@plt+0x3d8c>
   14e48:	cmp	r0, #0
   14e4c:	moveq	r0, r3
   14e50:	mov	ip, #10
   14e54:	cmp	r2, #0
   14e58:	cmpne	r1, #0
   14e5c:	str	ip, [r0]
   14e60:	beq	14e70 <__assert_fail@plt+0x3d84>
   14e64:	str	r1, [r0, #40]	; 0x28
   14e68:	str	r2, [r0, #44]	; 0x2c
   14e6c:	bx	lr
   14e70:	push	{r4, lr}
   14e74:	bl	110d4 <abort@plt>
   14e78:	andeq	r9, r2, r4, lsl #6
   14e7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e80:	sub	sp, sp, #24
   14e84:	ldr	ip, [pc, #108]	; 14ef8 <__assert_fail@plt+0x3e0c>
   14e88:	ldr	r4, [sp, #56]	; 0x38
   14e8c:	mov	r9, r2
   14e90:	cmp	r4, #0
   14e94:	moveq	r4, ip
   14e98:	mov	sl, r3
   14e9c:	mov	r7, r0
   14ea0:	mov	r8, r1
   14ea4:	bl	10ff0 <__errno_location@plt>
   14ea8:	ldr	r3, [r4, #44]	; 0x2c
   14eac:	mov	r1, r8
   14eb0:	ldr	r6, [r0]
   14eb4:	str	r3, [sp, #16]
   14eb8:	ldr	r2, [r4, #40]	; 0x28
   14ebc:	add	r3, r4, #8
   14ec0:	str	r3, [sp, #8]
   14ec4:	str	r2, [sp, #12]
   14ec8:	ldr	r2, [r4, #4]
   14ecc:	mov	r5, r0
   14ed0:	str	r2, [sp, #4]
   14ed4:	ldr	ip, [r4]
   14ed8:	mov	r3, sl
   14edc:	mov	r2, r9
   14ee0:	mov	r0, r7
   14ee4:	str	ip, [sp]
   14ee8:	bl	136a8 <__assert_fail@plt+0x25bc>
   14eec:	str	r6, [r5]
   14ef0:	add	sp, sp, #24
   14ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ef8:	andeq	r9, r2, r4, lsl #6
   14efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f00:	cmp	r3, #0
   14f04:	sub	sp, sp, #44	; 0x2c
   14f08:	ldr	r4, [pc, #192]	; 14fd0 <__assert_fail@plt+0x3ee4>
   14f0c:	mov	r6, r2
   14f10:	movne	r4, r3
   14f14:	mov	r9, r1
   14f18:	mov	r8, r0
   14f1c:	bl	10ff0 <__errno_location@plt>
   14f20:	ldr	r3, [r4, #44]	; 0x2c
   14f24:	ldr	r5, [r4, #4]
   14f28:	add	sl, r4, #8
   14f2c:	cmp	r6, #0
   14f30:	orreq	r5, r5, #1
   14f34:	mov	r1, #0
   14f38:	ldr	r2, [r0]
   14f3c:	str	r3, [sp, #16]
   14f40:	ldr	r3, [r4, #40]	; 0x28
   14f44:	stmib	sp, {r5, sl}
   14f48:	str	r3, [sp, #12]
   14f4c:	ldr	r3, [r4]
   14f50:	mov	r7, r0
   14f54:	str	r2, [sp, #28]
   14f58:	str	r3, [sp]
   14f5c:	mov	r2, r8
   14f60:	mov	r3, r9
   14f64:	mov	r0, r1
   14f68:	bl	136a8 <__assert_fail@plt+0x25bc>
   14f6c:	add	r1, r0, #1
   14f70:	mov	fp, r0
   14f74:	mov	r0, r1
   14f78:	str	r1, [sp, #36]	; 0x24
   14f7c:	bl	15968 <__assert_fail@plt+0x487c>
   14f80:	ldr	r3, [r4, #44]	; 0x2c
   14f84:	mov	r2, r8
   14f88:	str	r3, [sp, #16]
   14f8c:	ldr	r3, [r4, #40]	; 0x28
   14f90:	str	r5, [sp, #4]
   14f94:	str	r3, [sp, #12]
   14f98:	str	sl, [sp, #8]
   14f9c:	ldr	ip, [r4]
   14fa0:	ldr	r1, [sp, #36]	; 0x24
   14fa4:	mov	r3, r9
   14fa8:	str	ip, [sp]
   14fac:	str	r0, [sp, #32]
   14fb0:	bl	136a8 <__assert_fail@plt+0x25bc>
   14fb4:	ldr	r2, [sp, #28]
   14fb8:	cmp	r6, #0
   14fbc:	str	r2, [r7]
   14fc0:	ldr	r0, [sp, #32]
   14fc4:	strne	fp, [r6]
   14fc8:	add	sp, sp, #44	; 0x2c
   14fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fd0:	andeq	r9, r2, r4, lsl #6
   14fd4:	mov	r3, r2
   14fd8:	mov	r2, #0
   14fdc:	b	14efc <__assert_fail@plt+0x3e10>
   14fe0:	push	{r4, r5, r6, r7, r8, lr}
   14fe4:	ldr	r6, [pc, #116]	; 15060 <__assert_fail@plt+0x3f74>
   14fe8:	ldr	r3, [r6, #4]
   14fec:	ldr	r7, [r6]
   14ff0:	cmp	r3, #1
   14ff4:	movgt	r5, r7
   14ff8:	movgt	r4, #1
   14ffc:	ble	1501c <__assert_fail@plt+0x3f30>
   15000:	ldr	r0, [r5, #12]
   15004:	bl	131cc <__assert_fail@plt+0x20e0>
   15008:	ldr	r3, [r6, #4]
   1500c:	add	r4, r4, #1
   15010:	cmp	r3, r4
   15014:	add	r5, r5, #8
   15018:	bgt	15000 <__assert_fail@plt+0x3f14>
   1501c:	ldr	r0, [r7, #4]
   15020:	ldr	r4, [pc, #60]	; 15064 <__assert_fail@plt+0x3f78>
   15024:	cmp	r0, r4
   15028:	beq	1503c <__assert_fail@plt+0x3f50>
   1502c:	bl	131cc <__assert_fail@plt+0x20e0>
   15030:	mov	r3, #256	; 0x100
   15034:	str	r4, [r6, #12]
   15038:	str	r3, [r6, #8]
   1503c:	ldr	r4, [pc, #36]	; 15068 <__assert_fail@plt+0x3f7c>
   15040:	cmp	r7, r4
   15044:	beq	15054 <__assert_fail@plt+0x3f68>
   15048:	mov	r0, r7
   1504c:	bl	131cc <__assert_fail@plt+0x20e0>
   15050:	str	r4, [r6]
   15054:	mov	r3, #1
   15058:	str	r3, [r6, #4]
   1505c:	pop	{r4, r5, r6, r7, r8, pc}
   15060:	andeq	r9, r2, r0, lsr #2
   15064:	andeq	r9, r2, r4, lsl #4
   15068:	andeq	r9, r2, r8, lsr #2
   1506c:	ldr	r3, [pc, #4]	; 15078 <__assert_fail@plt+0x3f8c>
   15070:	mvn	r2, #0
   15074:	b	14bbc <__assert_fail@plt+0x3ad0>
   15078:	andeq	r9, r2, r4, lsl #6
   1507c:	ldr	r3, [pc]	; 15084 <__assert_fail@plt+0x3f98>
   15080:	b	14bbc <__assert_fail@plt+0x3ad0>
   15084:	andeq	r9, r2, r4, lsl #6
   15088:	mov	r1, r0
   1508c:	ldr	r3, [pc, #8]	; 1509c <__assert_fail@plt+0x3fb0>
   15090:	mvn	r2, #0
   15094:	mov	r0, #0
   15098:	b	14bbc <__assert_fail@plt+0x3ad0>
   1509c:	andeq	r9, r2, r4, lsl #6
   150a0:	mov	r2, r1
   150a4:	ldr	r3, [pc, #8]	; 150b4 <__assert_fail@plt+0x3fc8>
   150a8:	mov	r1, r0
   150ac:	mov	r0, #0
   150b0:	b	14bbc <__assert_fail@plt+0x3ad0>
   150b4:	andeq	r9, r2, r4, lsl #6
   150b8:	push	{r4, r5, lr}
   150bc:	sub	sp, sp, #52	; 0x34
   150c0:	mov	r5, r2
   150c4:	mov	r4, r0
   150c8:	mov	r0, sp
   150cc:	bl	13558 <__assert_fail@plt+0x246c>
   150d0:	mov	r3, sp
   150d4:	mov	r1, r5
   150d8:	mov	r0, r4
   150dc:	mvn	r2, #0
   150e0:	bl	14bbc <__assert_fail@plt+0x3ad0>
   150e4:	add	sp, sp, #52	; 0x34
   150e8:	pop	{r4, r5, pc}
   150ec:	push	{r4, r5, r6, lr}
   150f0:	sub	sp, sp, #48	; 0x30
   150f4:	mov	r5, r2
   150f8:	mov	r6, r3
   150fc:	mov	r4, r0
   15100:	mov	r0, sp
   15104:	bl	13558 <__assert_fail@plt+0x246c>
   15108:	mov	r3, sp
   1510c:	mov	r2, r6
   15110:	mov	r1, r5
   15114:	mov	r0, r4
   15118:	bl	14bbc <__assert_fail@plt+0x3ad0>
   1511c:	add	sp, sp, #48	; 0x30
   15120:	pop	{r4, r5, r6, pc}
   15124:	mov	r2, r1
   15128:	mov	r1, r0
   1512c:	mov	r0, #0
   15130:	b	150b8 <__assert_fail@plt+0x3fcc>
   15134:	mov	r3, r2
   15138:	mov	r2, r1
   1513c:	mov	r1, r0
   15140:	mov	r0, #0
   15144:	b	150ec <__assert_fail@plt+0x4000>
   15148:	push	{r4, r5, r6, r7, r8, lr}
   1514c:	mov	r7, r0
   15150:	ldr	lr, [pc, #100]	; 151bc <__assert_fail@plt+0x40d0>
   15154:	mov	r8, r1
   15158:	mov	r4, r2
   1515c:	ldm	lr!, {r0, r1, r2, r3}
   15160:	sub	sp, sp, #48	; 0x30
   15164:	mov	ip, sp
   15168:	lsr	r5, r4, #5
   1516c:	stmia	ip!, {r0, r1, r2, r3}
   15170:	add	r6, sp, #8
   15174:	ldm	lr!, {r0, r1, r2, r3}
   15178:	and	r4, r4, #31
   1517c:	stmia	ip!, {r0, r1, r2, r3}
   15180:	ldm	lr, {r0, r1, r2, r3}
   15184:	stm	ip, {r0, r1, r2, r3}
   15188:	mov	r2, r8
   1518c:	ldr	lr, [r6, r5, lsl #2]
   15190:	mov	r1, r7
   15194:	mov	r3, sp
   15198:	lsr	ip, lr, r4
   1519c:	eor	ip, ip, #1
   151a0:	and	ip, ip, #1
   151a4:	mov	r0, #0
   151a8:	eor	r4, lr, ip, lsl r4
   151ac:	str	r4, [r6, r5, lsl #2]
   151b0:	bl	14bbc <__assert_fail@plt+0x3ad0>
   151b4:	add	sp, sp, #48	; 0x30
   151b8:	pop	{r4, r5, r6, r7, r8, pc}
   151bc:	andeq	r9, r2, r4, lsl #6
   151c0:	mov	r2, r1
   151c4:	mvn	r1, #0
   151c8:	b	15148 <__assert_fail@plt+0x405c>
   151cc:	mov	r2, #58	; 0x3a
   151d0:	mvn	r1, #0
   151d4:	b	15148 <__assert_fail@plt+0x405c>
   151d8:	mov	r2, #58	; 0x3a
   151dc:	b	15148 <__assert_fail@plt+0x405c>
   151e0:	push	{r4, r5, r6, r7, lr}
   151e4:	sub	sp, sp, #100	; 0x64
   151e8:	mov	r6, r0
   151ec:	mov	r0, sp
   151f0:	mov	r7, r2
   151f4:	bl	13558 <__assert_fail@plt+0x246c>
   151f8:	mov	ip, sp
   151fc:	add	lr, sp, #48	; 0x30
   15200:	ldm	ip!, {r0, r1, r2, r3}
   15204:	stmia	lr!, {r0, r1, r2, r3}
   15208:	ldm	ip!, {r0, r1, r2, r3}
   1520c:	ldr	r5, [sp, #60]	; 0x3c
   15210:	stmia	lr!, {r0, r1, r2, r3}
   15214:	mvn	r4, r5
   15218:	ldm	ip, {r0, r1, r2, r3}
   1521c:	and	ip, r4, #67108864	; 0x4000000
   15220:	eor	ip, ip, r5
   15224:	str	ip, [sp, #60]	; 0x3c
   15228:	stm	lr, {r0, r1, r2, r3}
   1522c:	mov	r1, r7
   15230:	mov	r0, r6
   15234:	add	r3, sp, #48	; 0x30
   15238:	mvn	r2, #0
   1523c:	bl	14bbc <__assert_fail@plt+0x3ad0>
   15240:	add	sp, sp, #100	; 0x64
   15244:	pop	{r4, r5, r6, r7, pc}
   15248:	push	{r4, r5, r6, r7, r8, lr}
   1524c:	mov	r5, r1
   15250:	ldr	lr, [pc, #100]	; 152bc <__assert_fail@plt+0x41d0>
   15254:	mov	r4, r2
   15258:	mov	r7, r0
   1525c:	mov	r8, r3
   15260:	ldm	lr!, {r0, r1, r2, r3}
   15264:	sub	sp, sp, #48	; 0x30
   15268:	mov	ip, sp
   1526c:	mov	r6, #10
   15270:	stmia	ip!, {r0, r1, r2, r3}
   15274:	cmp	r4, #0
   15278:	cmpne	r5, #0
   1527c:	ldm	lr!, {r0, r1, r2, r3}
   15280:	str	r6, [sp]
   15284:	stmia	ip!, {r0, r1, r2, r3}
   15288:	ldm	lr, {r0, r1, r2, r3}
   1528c:	stm	ip, {r0, r1, r2, r3}
   15290:	beq	152b8 <__assert_fail@plt+0x41cc>
   15294:	mov	r3, sp
   15298:	mov	r1, r8
   1529c:	mov	r0, r7
   152a0:	ldr	r2, [sp, #72]	; 0x48
   152a4:	str	r5, [sp, #40]	; 0x28
   152a8:	str	r4, [sp, #44]	; 0x2c
   152ac:	bl	14bbc <__assert_fail@plt+0x3ad0>
   152b0:	add	sp, sp, #48	; 0x30
   152b4:	pop	{r4, r5, r6, r7, r8, pc}
   152b8:	bl	110d4 <abort@plt>
   152bc:	andeq	r9, r2, r4, lsl #6
   152c0:	push	{lr}		; (str lr, [sp, #-4]!)
   152c4:	sub	sp, sp, #12
   152c8:	mvn	ip, #0
   152cc:	str	ip, [sp]
   152d0:	bl	15248 <__assert_fail@plt+0x415c>
   152d4:	add	sp, sp, #12
   152d8:	pop	{pc}		; (ldr pc, [sp], #4)
   152dc:	push	{lr}		; (str lr, [sp, #-4]!)
   152e0:	sub	sp, sp, #12
   152e4:	mvn	ip, #0
   152e8:	mov	r3, r2
   152ec:	str	ip, [sp]
   152f0:	mov	r2, r1
   152f4:	mov	r1, r0
   152f8:	mov	r0, #0
   152fc:	bl	15248 <__assert_fail@plt+0x415c>
   15300:	add	sp, sp, #12
   15304:	pop	{pc}		; (ldr pc, [sp], #4)
   15308:	push	{lr}		; (str lr, [sp, #-4]!)
   1530c:	sub	sp, sp, #12
   15310:	str	r3, [sp]
   15314:	mov	r3, r2
   15318:	mov	r2, r1
   1531c:	mov	r1, r0
   15320:	mov	r0, #0
   15324:	bl	15248 <__assert_fail@plt+0x415c>
   15328:	add	sp, sp, #12
   1532c:	pop	{pc}		; (ldr pc, [sp], #4)
   15330:	ldr	r3, [pc]	; 15338 <__assert_fail@plt+0x424c>
   15334:	b	14bbc <__assert_fail@plt+0x3ad0>
   15338:	andeq	r9, r2, r0, lsr r1
   1533c:	mov	r2, r1
   15340:	ldr	r3, [pc, #8]	; 15350 <__assert_fail@plt+0x4264>
   15344:	mov	r1, r0
   15348:	mov	r0, #0
   1534c:	b	14bbc <__assert_fail@plt+0x3ad0>
   15350:	andeq	r9, r2, r0, lsr r1
   15354:	ldr	r3, [pc, #4]	; 15360 <__assert_fail@plt+0x4274>
   15358:	mvn	r2, #0
   1535c:	b	14bbc <__assert_fail@plt+0x3ad0>
   15360:	andeq	r9, r2, r0, lsr r1
   15364:	mov	r1, r0
   15368:	ldr	r3, [pc, #8]	; 15378 <__assert_fail@plt+0x428c>
   1536c:	mvn	r2, #0
   15370:	mov	r0, #0
   15374:	b	14bbc <__assert_fail@plt+0x3ad0>
   15378:	andeq	r9, r2, r0, lsr r1
   1537c:	push	{r4, r5, r6, lr}
   15380:	mov	r5, r1
   15384:	mov	r1, #0
   15388:	mov	r4, r2
   1538c:	bl	11080 <setlocale@plt>
   15390:	subs	r6, r0, #0
   15394:	beq	153f0 <__assert_fail@plt+0x4304>
   15398:	bl	10fd8 <strlen@plt>
   1539c:	cmp	r4, r0
   153a0:	bhi	153d8 <__assert_fail@plt+0x42ec>
   153a4:	cmp	r4, #0
   153a8:	bne	153b4 <__assert_fail@plt+0x42c8>
   153ac:	mov	r0, #34	; 0x22
   153b0:	pop	{r4, r5, r6, pc}
   153b4:	sub	r4, r4, #1
   153b8:	mov	r1, r6
   153bc:	mov	r2, r4
   153c0:	mov	r0, r5
   153c4:	bl	10ea0 <memcpy@plt>
   153c8:	mov	r3, #0
   153cc:	strb	r3, [r5, r4]
   153d0:	mov	r0, #34	; 0x22
   153d4:	pop	{r4, r5, r6, pc}
   153d8:	add	r2, r0, #1
   153dc:	mov	r1, r6
   153e0:	mov	r0, r5
   153e4:	bl	10ea0 <memcpy@plt>
   153e8:	mov	r0, #0
   153ec:	pop	{r4, r5, r6, pc}
   153f0:	cmp	r4, #0
   153f4:	beq	15404 <__assert_fail@plt+0x4318>
   153f8:	strb	r6, [r5]
   153fc:	mov	r0, #22
   15400:	pop	{r4, r5, r6, pc}
   15404:	mov	r0, #22
   15408:	pop	{r4, r5, r6, pc}
   1540c:	mov	r1, #0
   15410:	b	11080 <setlocale@plt>
   15414:	mov	r2, #3
   15418:	mov	r1, #0
   1541c:	b	16cc4 <__assert_fail@plt+0x5bd8>
   15420:	push	{r4, r5, r6, lr}
   15424:	sub	sp, sp, #32
   15428:	cmp	r1, #0
   1542c:	mov	r4, r0
   15430:	ldr	r5, [sp, #48]	; 0x30
   15434:	ldr	r6, [sp, #52]	; 0x34
   15438:	beq	15750 <__assert_fail@plt+0x4664>
   1543c:	stm	sp, {r2, r3}
   15440:	mov	r3, r1
   15444:	ldr	r2, [pc, #808]	; 15774 <__assert_fail@plt+0x4688>
   15448:	mov	r1, #1
   1544c:	bl	1102c <__fprintf_chk@plt>
   15450:	mov	r2, #5
   15454:	ldr	r1, [pc, #796]	; 15778 <__assert_fail@plt+0x468c>
   15458:	mov	r0, #0
   1545c:	bl	10ee8 <dcgettext@plt>
   15460:	ldr	r3, [pc, #788]	; 1577c <__assert_fail@plt+0x4690>
   15464:	ldr	r2, [pc, #788]	; 15780 <__assert_fail@plt+0x4694>
   15468:	str	r3, [sp]
   1546c:	mov	r1, #1
   15470:	mov	r3, r0
   15474:	mov	r0, r4
   15478:	bl	1102c <__fprintf_chk@plt>
   1547c:	mov	r1, r4
   15480:	mov	r0, #10
   15484:	bl	10edc <fputc_unlocked@plt>
   15488:	mov	r2, #5
   1548c:	ldr	r1, [pc, #752]	; 15784 <__assert_fail@plt+0x4698>
   15490:	mov	r0, #0
   15494:	bl	10ee8 <dcgettext@plt>
   15498:	mov	r1, #1
   1549c:	ldr	r3, [pc, #740]	; 15788 <__assert_fail@plt+0x469c>
   154a0:	mov	r2, r0
   154a4:	mov	r0, r4
   154a8:	bl	1102c <__fprintf_chk@plt>
   154ac:	mov	r1, r4
   154b0:	mov	r0, #10
   154b4:	bl	10edc <fputc_unlocked@plt>
   154b8:	cmp	r6, #9
   154bc:	ldrls	pc, [pc, r6, lsl #2]
   154c0:	b	15768 <__assert_fail@plt+0x467c>
   154c4:	andeq	r5, r1, r8, asr #10
   154c8:	andeq	r5, r1, r0, asr r5
   154cc:	andeq	r5, r1, ip, ror r5
   154d0:			; <UNDEFINED> instruction: 0x000155b0
   154d4:	andeq	r5, r1, ip, ror #11
   154d8:	andeq	r5, r1, r8, lsr #12
   154dc:	andeq	r5, r1, r4, ror #12
   154e0:	andeq	r5, r1, r8, lsr #13
   154e4:	strdeq	r5, [r1], -r8
   154e8:	andeq	r5, r1, ip, ror #9
   154ec:	ldr	r1, [pc, #664]	; 1578c <__assert_fail@plt+0x46a0>
   154f0:	mov	r2, #5
   154f4:	mov	r0, #0
   154f8:	bl	10ee8 <dcgettext@plt>
   154fc:	ldr	ip, [r5, #32]
   15500:	ldr	r1, [r5, #28]
   15504:	ldr	r2, [r5, #24]
   15508:	ldr	r3, [r5]
   1550c:	ldr	r6, [r5, #20]
   15510:	str	ip, [sp, #28]
   15514:	ldr	lr, [r5, #16]
   15518:	str	r1, [sp, #24]
   1551c:	ldr	ip, [r5, #12]
   15520:	str	r2, [sp, #20]
   15524:	ldr	r1, [r5, #8]
   15528:	ldr	r2, [r5, #4]
   1552c:	str	r6, [sp, #16]
   15530:	stmib	sp, {r1, ip, lr}
   15534:	mov	r1, #1
   15538:	str	r2, [sp]
   1553c:	mov	r2, r0
   15540:	mov	r0, r4
   15544:	bl	1102c <__fprintf_chk@plt>
   15548:	add	sp, sp, #32
   1554c:	pop	{r4, r5, r6, pc}
   15550:	mov	r2, #5
   15554:	ldr	r1, [pc, #564]	; 15790 <__assert_fail@plt+0x46a4>
   15558:	mov	r0, #0
   1555c:	bl	10ee8 <dcgettext@plt>
   15560:	ldr	r3, [r5]
   15564:	mov	r1, #1
   15568:	mov	r2, r0
   1556c:	mov	r0, r4
   15570:	add	sp, sp, #32
   15574:	pop	{r4, r5, r6, lr}
   15578:	b	1102c <__fprintf_chk@plt>
   1557c:	mov	r2, #5
   15580:	ldr	r1, [pc, #524]	; 15794 <__assert_fail@plt+0x46a8>
   15584:	mov	r0, #0
   15588:	bl	10ee8 <dcgettext@plt>
   1558c:	ldr	r2, [r5, #4]
   15590:	ldr	r3, [r5]
   15594:	mov	r1, #1
   15598:	str	r2, [sp, #48]	; 0x30
   1559c:	mov	r2, r0
   155a0:	mov	r0, r4
   155a4:	add	sp, sp, #32
   155a8:	pop	{r4, r5, r6, lr}
   155ac:	b	1102c <__fprintf_chk@plt>
   155b0:	mov	r2, #5
   155b4:	ldr	r1, [pc, #476]	; 15798 <__assert_fail@plt+0x46ac>
   155b8:	mov	r0, #0
   155bc:	bl	10ee8 <dcgettext@plt>
   155c0:	ldr	r1, [r5, #8]
   155c4:	ldr	r2, [r5, #4]
   155c8:	ldr	r3, [r5]
   155cc:	str	r1, [sp, #52]	; 0x34
   155d0:	str	r2, [sp, #48]	; 0x30
   155d4:	mov	r1, #1
   155d8:	mov	r2, r0
   155dc:	mov	r0, r4
   155e0:	add	sp, sp, #32
   155e4:	pop	{r4, r5, r6, lr}
   155e8:	b	1102c <__fprintf_chk@plt>
   155ec:	mov	r2, #5
   155f0:	ldr	r1, [pc, #420]	; 1579c <__assert_fail@plt+0x46b0>
   155f4:	mov	r0, #0
   155f8:	bl	10ee8 <dcgettext@plt>
   155fc:	ldr	r1, [r5, #8]
   15600:	ldr	ip, [r5, #12]
   15604:	ldr	r2, [r5, #4]
   15608:	ldr	r3, [r5]
   1560c:	stmib	sp, {r1, ip}
   15610:	str	r2, [sp]
   15614:	mov	r1, #1
   15618:	mov	r2, r0
   1561c:	mov	r0, r4
   15620:	bl	1102c <__fprintf_chk@plt>
   15624:	b	15548 <__assert_fail@plt+0x445c>
   15628:	mov	r2, #5
   1562c:	ldr	r1, [pc, #364]	; 157a0 <__assert_fail@plt+0x46b4>
   15630:	mov	r0, #0
   15634:	bl	10ee8 <dcgettext@plt>
   15638:	add	r1, r5, #8
   1563c:	ldr	r2, [r5, #4]
   15640:	ldm	r1, {r1, ip, lr}
   15644:	ldr	r3, [r5]
   15648:	str	r2, [sp]
   1564c:	stmib	sp, {r1, ip, lr}
   15650:	mov	r1, #1
   15654:	mov	r2, r0
   15658:	mov	r0, r4
   1565c:	bl	1102c <__fprintf_chk@plt>
   15660:	b	15548 <__assert_fail@plt+0x445c>
   15664:	mov	r2, #5
   15668:	ldr	r1, [pc, #308]	; 157a4 <__assert_fail@plt+0x46b8>
   1566c:	mov	r0, #0
   15670:	bl	10ee8 <dcgettext@plt>
   15674:	add	r1, r5, #8
   15678:	ldr	r2, [r5, #4]
   1567c:	ldm	r1, {r1, ip, lr}
   15680:	ldr	r6, [r5, #20]
   15684:	ldr	r3, [r5]
   15688:	stmib	sp, {r1, ip, lr}
   1568c:	mov	r1, #1
   15690:	str	r2, [sp]
   15694:	str	r6, [sp, #16]
   15698:	mov	r2, r0
   1569c:	mov	r0, r4
   156a0:	bl	1102c <__fprintf_chk@plt>
   156a4:	b	15548 <__assert_fail@plt+0x445c>
   156a8:	mov	r2, #5
   156ac:	ldr	r1, [pc, #244]	; 157a8 <__assert_fail@plt+0x46bc>
   156b0:	mov	r0, #0
   156b4:	bl	10ee8 <dcgettext@plt>
   156b8:	ldr	r2, [r5, #24]
   156bc:	ldr	r3, [r5]
   156c0:	ldr	r6, [r5, #20]
   156c4:	ldr	lr, [r5, #16]
   156c8:	ldr	ip, [r5, #12]
   156cc:	str	r2, [sp, #20]
   156d0:	ldr	r1, [r5, #8]
   156d4:	ldr	r2, [r5, #4]
   156d8:	str	r6, [sp, #16]
   156dc:	stmib	sp, {r1, ip, lr}
   156e0:	mov	r1, #1
   156e4:	str	r2, [sp]
   156e8:	mov	r2, r0
   156ec:	mov	r0, r4
   156f0:	bl	1102c <__fprintf_chk@plt>
   156f4:	b	15548 <__assert_fail@plt+0x445c>
   156f8:	mov	r2, #5
   156fc:	ldr	r1, [pc, #168]	; 157ac <__assert_fail@plt+0x46c0>
   15700:	mov	r0, #0
   15704:	bl	10ee8 <dcgettext@plt>
   15708:	ldr	r1, [r5, #28]
   1570c:	ldr	r2, [r5, #24]
   15710:	ldr	r3, [r5]
   15714:	ldr	r6, [r5, #20]
   15718:	ldr	lr, [r5, #16]
   1571c:	str	r1, [sp, #24]
   15720:	ldr	ip, [r5, #12]
   15724:	str	r2, [sp, #20]
   15728:	ldr	r1, [r5, #8]
   1572c:	ldr	r2, [r5, #4]
   15730:	str	r6, [sp, #16]
   15734:	stmib	sp, {r1, ip, lr}
   15738:	mov	r1, #1
   1573c:	str	r2, [sp]
   15740:	mov	r2, r0
   15744:	mov	r0, r4
   15748:	bl	1102c <__fprintf_chk@plt>
   1574c:	b	15548 <__assert_fail@plt+0x445c>
   15750:	str	r3, [sp]
   15754:	mov	r1, #1
   15758:	mov	r3, r2
   1575c:	ldr	r2, [pc, #76]	; 157b0 <__assert_fail@plt+0x46c4>
   15760:	bl	1102c <__fprintf_chk@plt>
   15764:	b	15450 <__assert_fail@plt+0x4364>
   15768:	mov	r2, #5
   1576c:	ldr	r1, [pc, #64]	; 157b4 <__assert_fail@plt+0x46c8>
   15770:	b	154f4 <__assert_fail@plt+0x4408>
   15774:	andeq	r8, r1, r8, lsr #11
   15778:			; <UNDEFINED> instruction: 0x000185bc
   1577c:	andeq	r0, r0, r6, ror #15
   15780:	muleq	r1, r4, r8
   15784:	andeq	r8, r1, r0, asr #11
   15788:	andeq	r8, r1, ip, ror #12
   1578c:	muleq	r1, ip, r7
   15790:	muleq	r1, r0, r6
   15794:	andeq	r8, r1, r0, lsr #13
   15798:			; <UNDEFINED> instruction: 0x000186b8
   1579c:	ldrdeq	r8, [r1], -r4
   157a0:	strdeq	r8, [r1], -r4
   157a4:	andeq	r8, r1, r8, lsl r7
   157a8:	andeq	r8, r1, r0, asr #14
   157ac:	andeq	r8, r1, ip, ror #14
   157b0:			; <UNDEFINED> instruction: 0x000185b4
   157b4:	ldrdeq	r8, [r1], -r0
   157b8:	push	{r4, r5, lr}
   157bc:	sub	sp, sp, #12
   157c0:	ldr	r5, [sp, #24]
   157c4:	ldr	ip, [r5]
   157c8:	cmp	ip, #0
   157cc:	beq	157e8 <__assert_fail@plt+0x46fc>
   157d0:	mov	lr, r5
   157d4:	mov	ip, #0
   157d8:	ldr	r4, [lr, #4]!
   157dc:	add	ip, ip, #1
   157e0:	cmp	r4, #0
   157e4:	bne	157d8 <__assert_fail@plt+0x46ec>
   157e8:	stm	sp, {r5, ip}
   157ec:	bl	15420 <__assert_fail@plt+0x4334>
   157f0:	add	sp, sp, #12
   157f4:	pop	{r4, r5, pc}
   157f8:	push	{r4, r5, lr}
   157fc:	sub	sp, sp, #52	; 0x34
   15800:	add	r5, sp, #4
   15804:	ldr	r4, [sp, #64]	; 0x40
   15808:	mov	ip, #0
   1580c:	sub	r4, r4, #4
   15810:	ldr	lr, [r4, #4]!
   15814:	cmp	lr, #0
   15818:	str	lr, [r5, #4]!
   1581c:	beq	1582c <__assert_fail@plt+0x4740>
   15820:	add	ip, ip, #1
   15824:	cmp	ip, #10
   15828:	bne	15810 <__assert_fail@plt+0x4724>
   1582c:	add	lr, sp, #8
   15830:	str	ip, [sp, #4]
   15834:	str	lr, [sp]
   15838:	bl	15420 <__assert_fail@plt+0x4334>
   1583c:	add	sp, sp, #52	; 0x34
   15840:	pop	{r4, r5, pc}
   15844:	push	{r3}		; (str r3, [sp, #-4]!)
   15848:	push	{r4, lr}
   1584c:	sub	sp, sp, #60	; 0x3c
   15850:	add	lr, sp, #56	; 0x38
   15854:	add	r3, sp, #72	; 0x48
   15858:	str	r3, [lr, #-44]!	; 0xffffffd4
   1585c:	add	r4, sp, #68	; 0x44
   15860:	mov	r3, #0
   15864:	ldr	ip, [r4, #4]!
   15868:	cmp	ip, #0
   1586c:	str	ip, [lr, #4]!
   15870:	beq	15880 <__assert_fail@plt+0x4794>
   15874:	add	r3, r3, #1
   15878:	cmp	r3, #10
   1587c:	bne	15864 <__assert_fail@plt+0x4778>
   15880:	add	ip, sp, #16
   15884:	str	r3, [sp, #4]
   15888:	str	ip, [sp]
   1588c:	ldr	r3, [sp, #68]	; 0x44
   15890:	bl	15420 <__assert_fail@plt+0x4334>
   15894:	add	sp, sp, #60	; 0x3c
   15898:	pop	{r4, lr}
   1589c:	add	sp, sp, #4
   158a0:	bx	lr
   158a4:	ldr	r3, [pc, #116]	; 15920 <__assert_fail@plt+0x4834>
   158a8:	push	{r4, lr}
   158ac:	mov	r0, #10
   158b0:	ldr	r1, [r3]
   158b4:	bl	10edc <fputc_unlocked@plt>
   158b8:	mov	r2, #5
   158bc:	ldr	r1, [pc, #96]	; 15924 <__assert_fail@plt+0x4838>
   158c0:	mov	r0, #0
   158c4:	bl	10ee8 <dcgettext@plt>
   158c8:	ldr	r2, [pc, #88]	; 15928 <__assert_fail@plt+0x483c>
   158cc:	mov	r1, r0
   158d0:	mov	r0, #1
   158d4:	bl	11014 <__printf_chk@plt>
   158d8:	mov	r2, #5
   158dc:	ldr	r1, [pc, #72]	; 1592c <__assert_fail@plt+0x4840>
   158e0:	mov	r0, #0
   158e4:	bl	10ee8 <dcgettext@plt>
   158e8:	ldr	r3, [pc, #64]	; 15930 <__assert_fail@plt+0x4844>
   158ec:	ldr	r2, [pc, #64]	; 15934 <__assert_fail@plt+0x4848>
   158f0:	mov	r1, r0
   158f4:	mov	r0, #1
   158f8:	bl	11014 <__printf_chk@plt>
   158fc:	mov	r2, #5
   15900:	ldr	r1, [pc, #48]	; 15938 <__assert_fail@plt+0x484c>
   15904:	mov	r0, #0
   15908:	bl	10ee8 <dcgettext@plt>
   1590c:	ldr	r2, [pc, #40]	; 1593c <__assert_fail@plt+0x4850>
   15910:	pop	{r4, lr}
   15914:	mov	r1, r0
   15918:	mov	r0, #1
   1591c:	b	11014 <__printf_chk@plt>
   15920:	andeq	r9, r2, ip, ror r1
   15924:	andeq	r8, r1, ip, lsl #16
   15928:	andeq	r8, r1, r0, lsr #16
   1592c:	andeq	r8, r1, r8, lsr r8
   15930:	andeq	r8, r1, r8, lsr #3
   15934:	ldrdeq	r8, [r1], -r0
   15938:	andeq	r8, r1, ip, asr #16
   1593c:	andeq	r8, r1, r4, ror r8
   15940:	push	{r4, lr}
   15944:	bl	16bc0 <__assert_fail@plt+0x5ad4>
   15948:	cmp	r0, #0
   1594c:	popne	{r4, pc}
   15950:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15954:	push	{r4, lr}
   15958:	bl	16bc0 <__assert_fail@plt+0x5ad4>
   1595c:	cmp	r0, #0
   15960:	popne	{r4, pc}
   15964:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15968:	push	{r4, lr}
   1596c:	bl	16bc0 <__assert_fail@plt+0x5ad4>
   15970:	cmp	r0, #0
   15974:	popne	{r4, pc}
   15978:	bl	15e88 <__assert_fail@plt+0x4d9c>
   1597c:	push	{r4, r5, r6, lr}
   15980:	mov	r5, r0
   15984:	mov	r4, r1
   15988:	bl	16bec <__assert_fail@plt+0x5b00>
   1598c:	cmp	r0, #0
   15990:	popne	{r4, r5, r6, pc}
   15994:	adds	r4, r4, #0
   15998:	movne	r4, #1
   1599c:	cmp	r5, #0
   159a0:	orreq	r4, r4, #1
   159a4:	cmp	r4, #0
   159a8:	popeq	{r4, r5, r6, pc}
   159ac:	bl	15e88 <__assert_fail@plt+0x4d9c>
   159b0:	push	{r4, lr}
   159b4:	cmp	r1, #0
   159b8:	orreq	r1, r1, #1
   159bc:	bl	16bec <__assert_fail@plt+0x5b00>
   159c0:	cmp	r0, #0
   159c4:	popne	{r4, pc}
   159c8:	bl	15e88 <__assert_fail@plt+0x4d9c>
   159cc:	push	{r4, r5, r6, lr}
   159d0:	mov	r6, r0
   159d4:	mov	r5, r1
   159d8:	mov	r4, r2
   159dc:	bl	17088 <__assert_fail@plt+0x5f9c>
   159e0:	cmp	r0, #0
   159e4:	popne	{r4, r5, r6, pc}
   159e8:	cmp	r6, #0
   159ec:	beq	159fc <__assert_fail@plt+0x4910>
   159f0:	cmp	r5, #0
   159f4:	cmpne	r4, #0
   159f8:	popeq	{r4, r5, r6, pc}
   159fc:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15a00:	b	159cc <__assert_fail@plt+0x48e0>
   15a04:	cmp	r2, #0
   15a08:	cmpne	r1, #0
   15a0c:	moveq	r2, #1
   15a10:	moveq	r1, r2
   15a14:	push	{r4, lr}
   15a18:	bl	17088 <__assert_fail@plt+0x5f9c>
   15a1c:	cmp	r0, #0
   15a20:	popne	{r4, pc}
   15a24:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15a28:	mov	r2, r1
   15a2c:	mov	r1, r0
   15a30:	mov	r0, #0
   15a34:	b	159cc <__assert_fail@plt+0x48e0>
   15a38:	mov	r2, r1
   15a3c:	mov	r1, r0
   15a40:	mov	r0, #0
   15a44:	b	15a04 <__assert_fail@plt+0x4918>
   15a48:	push	{r4, r5, r6, lr}
   15a4c:	subs	r6, r0, #0
   15a50:	sub	sp, sp, #8
   15a54:	mov	r5, r1
   15a58:	ldr	r4, [r1]
   15a5c:	beq	15a98 <__assert_fail@plt+0x49ac>
   15a60:	lsr	r1, r4, #1
   15a64:	add	r3, r1, #1
   15a68:	mvn	r3, r3
   15a6c:	cmp	r4, r3
   15a70:	bhi	15a94 <__assert_fail@plt+0x49a8>
   15a74:	add	r4, r4, #1
   15a78:	add	r4, r4, r1
   15a7c:	mov	r0, r6
   15a80:	mov	r1, r4
   15a84:	bl	159cc <__assert_fail@plt+0x48e0>
   15a88:	str	r4, [r5]
   15a8c:	add	sp, sp, #8
   15a90:	pop	{r4, r5, r6, pc}
   15a94:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15a98:	cmp	r4, #0
   15a9c:	bne	15a7c <__assert_fail@plt+0x4990>
   15aa0:	mov	r1, r2
   15aa4:	mov	r0, #64	; 0x40
   15aa8:	str	r2, [sp, #4]
   15aac:	bl	170d4 <__assert_fail@plt+0x5fe8>
   15ab0:	ldr	r2, [sp, #4]
   15ab4:	cmp	r0, #0
   15ab8:	movne	r4, r0
   15abc:	addeq	r4, r0, #1
   15ac0:	b	15a7c <__assert_fail@plt+0x4990>
   15ac4:	mov	r2, #1
   15ac8:	b	15a48 <__assert_fail@plt+0x495c>
   15acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ad0:	sub	sp, sp, #12
   15ad4:	ldr	r6, [r1]
   15ad8:	mov	sl, r1
   15adc:	mov	r9, r0
   15ae0:	asrs	r4, r6, #1
   15ae4:	mov	r5, r2
   15ae8:	mov	fp, r3
   15aec:	ldr	r7, [sp, #48]	; 0x30
   15af0:	bmi	15c5c <__assert_fail@plt+0x4b70>
   15af4:	mvn	r3, #-2147483648	; 0x80000000
   15af8:	sub	r3, r3, r4
   15afc:	cmp	r6, r3
   15b00:	movle	r3, #0
   15b04:	movgt	r3, #1
   15b08:	mvn	r8, fp
   15b0c:	cmp	r3, #0
   15b10:	addeq	r4, r4, r6
   15b14:	mvnne	r4, #-2147483648	; 0x80000000
   15b18:	lsr	r8, r8, #31
   15b1c:	cmp	fp, r4
   15b20:	movge	r3, #0
   15b24:	andlt	r3, r8, #1
   15b28:	cmp	r3, #0
   15b2c:	beq	15c14 <__assert_fail@plt+0x4b28>
   15b30:	cmp	r7, #0
   15b34:	blt	15ce4 <__assert_fail@plt+0x4bf8>
   15b38:	bne	15cdc <__assert_fail@plt+0x4bf0>
   15b3c:	mov	r2, #64	; 0x40
   15b40:	mov	r1, r7
   15b44:	mov	r0, r2
   15b48:	str	r2, [sp, #4]
   15b4c:	bl	172e0 <__assert_fail@plt+0x61f4>
   15b50:	ldr	r2, [sp, #4]
   15b54:	mov	r1, r7
   15b58:	mov	r4, r0
   15b5c:	mov	r0, r2
   15b60:	bl	17500 <__assert_fail@plt+0x6414>
   15b64:	ldr	r2, [sp, #4]
   15b68:	sub	r1, r2, r1
   15b6c:	cmp	r9, #0
   15b70:	sub	r3, r4, r6
   15b74:	streq	r9, [sl]
   15b78:	cmp	r3, r5
   15b7c:	bge	15c00 <__assert_fail@plt+0x4b14>
   15b80:	cmp	r5, #0
   15b84:	blt	15c70 <__assert_fail@plt+0x4b84>
   15b88:	cmp	r6, #0
   15b8c:	blt	15bac <__assert_fail@plt+0x4ac0>
   15b90:	mvn	r3, #-2147483648	; 0x80000000
   15b94:	sub	r3, r3, r5
   15b98:	cmp	r6, r3
   15b9c:	movle	r3, #0
   15ba0:	movgt	r3, #1
   15ba4:	cmp	r3, #0
   15ba8:	bne	15d6c <__assert_fail@plt+0x4c80>
   15bac:	add	r5, r6, r5
   15bb0:	cmp	fp, r5
   15bb4:	movge	r8, #0
   15bb8:	andlt	r8, r8, #1
   15bbc:	cmp	r8, #0
   15bc0:	mov	r4, r5
   15bc4:	bne	15d6c <__assert_fail@plt+0x4c80>
   15bc8:	cmp	r7, #0
   15bcc:	blt	15c84 <__assert_fail@plt+0x4b98>
   15bd0:	beq	15bfc <__assert_fail@plt+0x4b10>
   15bd4:	cmp	r5, #0
   15bd8:	blt	15d2c <__assert_fail@plt+0x4c40>
   15bdc:	mov	r1, r7
   15be0:	mvn	r0, #-2147483648	; 0x80000000
   15be4:	bl	172e0 <__assert_fail@plt+0x61f4>
   15be8:	cmp	r5, r0
   15bec:	movle	r0, #0
   15bf0:	movgt	r0, #1
   15bf4:	cmp	r0, #0
   15bf8:	bne	15d6c <__assert_fail@plt+0x4c80>
   15bfc:	mul	r1, r5, r7
   15c00:	mov	r0, r9
   15c04:	bl	1597c <__assert_fail@plt+0x4890>
   15c08:	str	r4, [sl]
   15c0c:	add	sp, sp, #12
   15c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c14:	cmp	r7, #0
   15c18:	blt	15cb0 <__assert_fail@plt+0x4bc4>
   15c1c:	beq	15b3c <__assert_fail@plt+0x4a50>
   15c20:	cmp	r4, #0
   15c24:	blt	15cec <__assert_fail@plt+0x4c00>
   15c28:	mov	r1, r7
   15c2c:	mvn	r0, #-2147483648	; 0x80000000
   15c30:	bl	172e0 <__assert_fail@plt+0x61f4>
   15c34:	cmp	r0, r4
   15c38:	movge	r0, #0
   15c3c:	movlt	r0, #1
   15c40:	cmp	r0, #0
   15c44:	mvnne	r2, #-2147483648	; 0x80000000
   15c48:	bne	15b40 <__assert_fail@plt+0x4a54>
   15c4c:	mul	r1, r7, r4
   15c50:	cmp	r1, #63	; 0x3f
   15c54:	bgt	15b6c <__assert_fail@plt+0x4a80>
   15c58:	b	15b3c <__assert_fail@plt+0x4a50>
   15c5c:	rsb	r3, r4, #-2147483648	; 0x80000000
   15c60:	cmp	r6, r3
   15c64:	movge	r3, #0
   15c68:	movlt	r3, #1
   15c6c:	b	15b08 <__assert_fail@plt+0x4a1c>
   15c70:	rsb	r3, r5, #-2147483648	; 0x80000000
   15c74:	cmp	r6, r3
   15c78:	movge	r3, #0
   15c7c:	movlt	r3, #1
   15c80:	b	15ba4 <__assert_fail@plt+0x4ab8>
   15c84:	cmp	r5, #0
   15c88:	blt	15d10 <__assert_fail@plt+0x4c24>
   15c8c:	cmn	r7, #1
   15c90:	beq	15bfc <__assert_fail@plt+0x4b10>
   15c94:	mov	r1, r7
   15c98:	mov	r0, #-2147483648	; 0x80000000
   15c9c:	bl	172e0 <__assert_fail@plt+0x61f4>
   15ca0:	cmp	r5, r0
   15ca4:	movle	r0, #0
   15ca8:	movgt	r0, #1
   15cac:	b	15bf4 <__assert_fail@plt+0x4b08>
   15cb0:	cmp	r4, #0
   15cb4:	blt	15d50 <__assert_fail@plt+0x4c64>
   15cb8:	cmn	r7, #1
   15cbc:	beq	15c4c <__assert_fail@plt+0x4b60>
   15cc0:	mov	r1, r7
   15cc4:	mov	r0, #-2147483648	; 0x80000000
   15cc8:	bl	172e0 <__assert_fail@plt+0x61f4>
   15ccc:	cmp	r0, r4
   15cd0:	movge	r0, #0
   15cd4:	movlt	r0, #1
   15cd8:	b	15c40 <__assert_fail@plt+0x4b54>
   15cdc:	mov	r4, fp
   15ce0:	b	15c28 <__assert_fail@plt+0x4b3c>
   15ce4:	mov	r4, fp
   15ce8:	b	15cb8 <__assert_fail@plt+0x4bcc>
   15cec:	cmn	r4, #1
   15cf0:	beq	15c4c <__assert_fail@plt+0x4b60>
   15cf4:	mov	r1, r4
   15cf8:	mov	r0, #-2147483648	; 0x80000000
   15cfc:	bl	172e0 <__assert_fail@plt+0x61f4>
   15d00:	cmp	r7, r0
   15d04:	movle	r0, #0
   15d08:	movgt	r0, #1
   15d0c:	b	15c40 <__assert_fail@plt+0x4b54>
   15d10:	mov	r1, r7
   15d14:	mvn	r0, #-2147483648	; 0x80000000
   15d18:	bl	172e0 <__assert_fail@plt+0x61f4>
   15d1c:	cmp	r5, r0
   15d20:	movge	r0, #0
   15d24:	movlt	r0, #1
   15d28:	b	15bf4 <__assert_fail@plt+0x4b08>
   15d2c:	cmn	r5, #1
   15d30:	beq	15bfc <__assert_fail@plt+0x4b10>
   15d34:	mov	r1, r5
   15d38:	mov	r0, #-2147483648	; 0x80000000
   15d3c:	bl	172e0 <__assert_fail@plt+0x61f4>
   15d40:	cmp	r7, r0
   15d44:	movle	r0, #0
   15d48:	movgt	r0, #1
   15d4c:	b	15bf4 <__assert_fail@plt+0x4b08>
   15d50:	mov	r1, r7
   15d54:	mvn	r0, #-2147483648	; 0x80000000
   15d58:	bl	172e0 <__assert_fail@plt+0x61f4>
   15d5c:	cmp	r0, r4
   15d60:	movle	r0, #0
   15d64:	movgt	r0, #1
   15d68:	b	15c40 <__assert_fail@plt+0x4b54>
   15d6c:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15d70:	push	{r4, lr}
   15d74:	mov	r1, #1
   15d78:	bl	16b78 <__assert_fail@plt+0x5a8c>
   15d7c:	cmp	r0, #0
   15d80:	popne	{r4, pc}
   15d84:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15d88:	push	{r4, lr}
   15d8c:	mov	r1, #1
   15d90:	bl	16b78 <__assert_fail@plt+0x5a8c>
   15d94:	cmp	r0, #0
   15d98:	popne	{r4, pc}
   15d9c:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15da0:	push	{r4, lr}
   15da4:	bl	16b78 <__assert_fail@plt+0x5a8c>
   15da8:	cmp	r0, #0
   15dac:	popne	{r4, pc}
   15db0:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15db4:	push	{r4, lr}
   15db8:	bl	16b78 <__assert_fail@plt+0x5a8c>
   15dbc:	cmp	r0, #0
   15dc0:	popne	{r4, pc}
   15dc4:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15dc8:	push	{r4, r5, r6, lr}
   15dcc:	mov	r6, r0
   15dd0:	mov	r0, r1
   15dd4:	mov	r4, r1
   15dd8:	bl	16bc0 <__assert_fail@plt+0x5ad4>
   15ddc:	subs	r5, r0, #0
   15de0:	beq	15df8 <__assert_fail@plt+0x4d0c>
   15de4:	mov	r2, r4
   15de8:	mov	r1, r6
   15dec:	bl	10ea0 <memcpy@plt>
   15df0:	mov	r0, r5
   15df4:	pop	{r4, r5, r6, pc}
   15df8:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15dfc:	push	{r4, r5, r6, lr}
   15e00:	mov	r6, r0
   15e04:	mov	r0, r1
   15e08:	mov	r4, r1
   15e0c:	bl	16bc0 <__assert_fail@plt+0x5ad4>
   15e10:	subs	r5, r0, #0
   15e14:	beq	15e2c <__assert_fail@plt+0x4d40>
   15e18:	mov	r2, r4
   15e1c:	mov	r1, r6
   15e20:	bl	10ea0 <memcpy@plt>
   15e24:	mov	r0, r5
   15e28:	pop	{r4, r5, r6, pc}
   15e2c:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15e30:	push	{r4, r5, r6, lr}
   15e34:	mov	r6, r0
   15e38:	add	r0, r1, #1
   15e3c:	mov	r4, r1
   15e40:	bl	16bc0 <__assert_fail@plt+0x5ad4>
   15e44:	subs	r5, r0, #0
   15e48:	beq	15e68 <__assert_fail@plt+0x4d7c>
   15e4c:	mov	r3, #0
   15e50:	mov	r1, r6
   15e54:	strb	r3, [r5, r4]
   15e58:	mov	r2, r4
   15e5c:	bl	10ea0 <memcpy@plt>
   15e60:	mov	r0, r5
   15e64:	pop	{r4, r5, r6, pc}
   15e68:	bl	15e88 <__assert_fail@plt+0x4d9c>
   15e6c:	push	{r4, lr}
   15e70:	mov	r4, r0
   15e74:	bl	10fd8 <strlen@plt>
   15e78:	add	r1, r0, #1
   15e7c:	mov	r0, r4
   15e80:	pop	{r4, lr}
   15e84:	b	15dc8 <__assert_fail@plt+0x4cdc>
   15e88:	ldr	r3, [pc, #44]	; 15ebc <__assert_fail@plt+0x4dd0>
   15e8c:	push	{r4, lr}
   15e90:	mov	r2, #5
   15e94:	ldr	r1, [pc, #36]	; 15ec0 <__assert_fail@plt+0x4dd4>
   15e98:	mov	r0, #0
   15e9c:	ldr	r4, [r3]
   15ea0:	bl	10ee8 <dcgettext@plt>
   15ea4:	ldr	r2, [pc, #24]	; 15ec4 <__assert_fail@plt+0x4dd8>
   15ea8:	mov	r1, #0
   15eac:	mov	r3, r0
   15eb0:	mov	r0, r4
   15eb4:	bl	10f54 <error@plt>
   15eb8:	bl	110d4 <abort@plt>
   15ebc:	andeq	r9, r2, ip, lsl r1
   15ec0:	andeq	r8, r1, r4, asr #17
   15ec4:	andeq	r8, r1, r0, lsl #9
   15ec8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ecc:	mov	r4, r0
   15ed0:	mov	r6, r1
   15ed4:	mov	r9, r2
   15ed8:	ldr	r1, [pc, #164]	; 15f84 <__assert_fail@plt+0x4e98>
   15edc:	mov	r2, #5
   15ee0:	mov	r0, #0
   15ee4:	mov	r7, r3
   15ee8:	ldr	r8, [sp, #32]
   15eec:	bl	10ee8 <dcgettext@plt>
   15ef0:	mov	r1, r4
   15ef4:	mov	r2, r0
   15ef8:	mov	r0, #0
   15efc:	bl	10f54 <error@plt>
   15f00:	mov	r2, #5
   15f04:	ldr	r1, [pc, #124]	; 15f88 <__assert_fail@plt+0x4e9c>
   15f08:	mov	r0, #0
   15f0c:	bl	10ee8 <dcgettext@plt>
   15f10:	mov	r1, #0
   15f14:	mov	r2, r0
   15f18:	mov	r0, r1
   15f1c:	bl	10f54 <error@plt>
   15f20:	ldr	r3, [pc, #100]	; 15f8c <__assert_fail@plt+0x4ea0>
   15f24:	mov	r2, #5
   15f28:	ldr	r1, [pc, #96]	; 15f90 <__assert_fail@plt+0x4ea4>
   15f2c:	mov	r0, #0
   15f30:	ldr	r4, [r3]
   15f34:	bl	10ee8 <dcgettext@plt>
   15f38:	mov	r3, r9
   15f3c:	mov	r2, r6
   15f40:	mov	r1, #8
   15f44:	mov	r5, r0
   15f48:	mov	r0, #0
   15f4c:	bl	150ec <__assert_fail@plt+0x4000>
   15f50:	mov	r3, r8
   15f54:	mov	r2, r7
   15f58:	mov	r1, #8
   15f5c:	mov	r6, r0
   15f60:	mov	r0, #1
   15f64:	bl	150ec <__assert_fail@plt+0x4000>
   15f68:	mov	r3, r6
   15f6c:	mov	r2, r5
   15f70:	mov	r1, #0
   15f74:	str	r0, [sp, #32]
   15f78:	mov	r0, r4
   15f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f80:	b	10f54 <error@plt>
   15f84:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   15f88:	strdeq	r8, [r1], -r4
   15f8c:	andeq	r9, r2, ip, lsl r1
   15f90:	andeq	r8, r1, r0, lsr #18
   15f94:	push	{r4, r5, r6, r7, r8, lr}
   15f98:	sub	sp, sp, #8
   15f9c:	mov	r6, r1
   15fa0:	mov	r7, r2
   15fa4:	mov	r8, r3
   15fa8:	mov	r5, r0
   15fac:	bl	16fb4 <__assert_fail@plt+0x5ec8>
   15fb0:	mov	r4, r0
   15fb4:	bl	10ff0 <__errno_location@plt>
   15fb8:	ldr	r0, [r0]
   15fbc:	cmp	r0, #0
   15fc0:	beq	15fd8 <__assert_fail@plt+0x4eec>
   15fc4:	str	r8, [sp]
   15fc8:	mov	r3, r7
   15fcc:	mov	r2, r6
   15fd0:	mov	r1, r5
   15fd4:	bl	15ec8 <__assert_fail@plt+0x4ddc>
   15fd8:	mov	r0, r4
   15fdc:	add	sp, sp, #8
   15fe0:	pop	{r4, r5, r6, r7, r8, pc}
   15fe4:	push	{r4, r5, r6, r7, r8, lr}
   15fe8:	sub	sp, sp, #8
   15fec:	mov	r7, r1
   15ff0:	mov	r8, r2
   15ff4:	mov	r4, r3
   15ff8:	mov	r6, r0
   15ffc:	bl	17030 <__assert_fail@plt+0x5f44>
   16000:	mov	r5, r0
   16004:	bl	10ff0 <__errno_location@plt>
   16008:	ldr	r0, [r0]
   1600c:	cmp	r0, #0
   16010:	beq	1602c <__assert_fail@plt+0x4f40>
   16014:	sub	r4, r4, #1
   16018:	str	r4, [sp]
   1601c:	mov	r3, r8
   16020:	sub	r2, r7, #1
   16024:	mov	r1, r6
   16028:	bl	15ec8 <__assert_fail@plt+0x4ddc>
   1602c:	mov	r0, r5
   16030:	add	sp, sp, #8
   16034:	pop	{r4, r5, r6, r7, r8, pc}
   16038:	cmp	r2, #0
   1603c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16040:	beq	160d8 <__assert_fail@plt+0x4fec>
   16044:	mov	r5, #0
   16048:	sub	r4, r2, #1
   1604c:	mov	r6, r1
   16050:	mov	r7, r0
   16054:	mov	r9, r5
   16058:	mvn	sl, #0
   1605c:	mov	r8, #1
   16060:	b	16084 <__assert_fail@plt+0x4f98>
   16064:	ldr	r3, [r7]
   16068:	mul	r3, r6, r3
   1606c:	sub	r4, r4, #1
   16070:	mov	r2, r9
   16074:	cmn	r4, #1
   16078:	str	r3, [r7]
   1607c:	orr	r5, r5, r2
   16080:	beq	160c0 <__assert_fail@plt+0x4fd4>
   16084:	cmp	r6, #0
   16088:	blt	160c8 <__assert_fail@plt+0x4fdc>
   1608c:	mov	r1, r6
   16090:	mov	r0, sl
   16094:	beq	16064 <__assert_fail@plt+0x4f78>
   16098:	bl	170d4 <__assert_fail@plt+0x5fe8>
   1609c:	ldr	r3, [r7]
   160a0:	cmp	r0, r3
   160a4:	bcs	16068 <__assert_fail@plt+0x4f7c>
   160a8:	sub	r4, r4, #1
   160ac:	mov	r2, r8
   160b0:	cmn	r4, #1
   160b4:	str	sl, [r7]
   160b8:	orr	r5, r5, r2
   160bc:	bne	16084 <__assert_fail@plt+0x4f98>
   160c0:	mov	r0, r5
   160c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160c8:	ldr	r3, [r7]
   160cc:	cmp	r3, #0
   160d0:	bne	160a8 <__assert_fail@plt+0x4fbc>
   160d4:	b	16068 <__assert_fail@plt+0x4f7c>
   160d8:	mov	r5, r2
   160dc:	b	160c0 <__assert_fail@plt+0x4fd4>
   160e0:	cmp	r2, #36	; 0x24
   160e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   160e8:	sub	sp, sp, #12
   160ec:	bhi	16518 <__assert_fail@plt+0x542c>
   160f0:	cmp	r1, #0
   160f4:	mov	r6, r1
   160f8:	mov	r9, r2
   160fc:	mov	r5, r0
   16100:	mov	r8, r3
   16104:	moveq	r6, sp
   16108:	bl	10ff0 <__errno_location@plt>
   1610c:	mov	r3, #0
   16110:	str	r3, [r0]
   16114:	mov	r7, r0
   16118:	bl	10fb4 <__ctype_b_loc@plt>
   1611c:	ldrb	r1, [r5]
   16120:	mov	r2, r5
   16124:	ldr	r0, [r0]
   16128:	b	16130 <__assert_fail@plt+0x5044>
   1612c:	ldrb	r1, [r2, #1]!
   16130:	lsl	r3, r1, #1
   16134:	ldrh	r3, [r0, r3]
   16138:	ands	r4, r3, #8192	; 0x2000
   1613c:	bne	1612c <__assert_fail@plt+0x5040>
   16140:	cmp	r1, #45	; 0x2d
   16144:	bne	16158 <__assert_fail@plt+0x506c>
   16148:	mov	r4, #4
   1614c:	mov	r0, r4
   16150:	add	sp, sp, #12
   16154:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16158:	mov	r2, r9
   1615c:	mov	r1, r6
   16160:	mov	r0, r5
   16164:	bl	10fcc <strtoul@plt>
   16168:	ldr	r9, [r6]
   1616c:	cmp	r5, r9
   16170:	str	r0, [sp, #4]
   16174:	beq	161bc <__assert_fail@plt+0x50d0>
   16178:	ldr	r4, [r7]
   1617c:	cmp	r4, #0
   16180:	bne	161ac <__assert_fail@plt+0x50c0>
   16184:	ldr	r3, [sp, #40]	; 0x28
   16188:	cmp	r3, #0
   1618c:	beq	1619c <__assert_fail@plt+0x50b0>
   16190:	ldrb	r7, [r9]
   16194:	cmp	r7, #0
   16198:	bne	161f0 <__assert_fail@plt+0x5104>
   1619c:	str	r0, [r8]
   161a0:	mov	r0, r4
   161a4:	add	sp, sp, #12
   161a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   161ac:	cmp	r4, #34	; 0x22
   161b0:	bne	16148 <__assert_fail@plt+0x505c>
   161b4:	mov	r4, #1
   161b8:	b	16184 <__assert_fail@plt+0x5098>
   161bc:	ldr	r3, [sp, #40]	; 0x28
   161c0:	cmp	r3, #0
   161c4:	beq	16148 <__assert_fail@plt+0x505c>
   161c8:	ldrb	r1, [r9]
   161cc:	cmp	r1, #0
   161d0:	beq	16148 <__assert_fail@plt+0x505c>
   161d4:	mov	r0, r3
   161d8:	bl	10fe4 <strchr@plt>
   161dc:	cmp	r0, #0
   161e0:	beq	16148 <__assert_fail@plt+0x505c>
   161e4:	ldrb	r7, [r9]
   161e8:	mov	r3, #1
   161ec:	str	r3, [sp, #4]
   161f0:	mov	r1, r7
   161f4:	ldr	r0, [sp, #40]	; 0x28
   161f8:	bl	10fe4 <strchr@plt>
   161fc:	cmp	r0, #0
   16200:	beq	164e0 <__assert_fail@plt+0x53f4>
   16204:	sub	r3, r7, #69	; 0x45
   16208:	cmp	r3, #47	; 0x2f
   1620c:	ldrls	pc, [pc, r3, lsl #2]
   16210:	b	162d4 <__assert_fail@plt+0x51e8>
   16214:	andeq	r6, r1, r4, asr #7
   16218:	ldrdeq	r6, [r1], -r4
   1621c:	andeq	r6, r1, r4, asr #7
   16220:	ldrdeq	r6, [r1], -r4
   16224:	ldrdeq	r6, [r1], -r4
   16228:	ldrdeq	r6, [r1], -r4
   1622c:	andeq	r6, r1, r4, asr #7
   16230:	ldrdeq	r6, [r1], -r4
   16234:	andeq	r6, r1, r4, asr #7
   16238:	ldrdeq	r6, [r1], -r4
   1623c:	ldrdeq	r6, [r1], -r4
   16240:	andeq	r6, r1, r4, asr #7
   16244:	ldrdeq	r6, [r1], -r4
   16248:	ldrdeq	r6, [r1], -r4
   1624c:	ldrdeq	r6, [r1], -r4
   16250:	andeq	r6, r1, r4, asr #7
   16254:	ldrdeq	r6, [r1], -r4
   16258:	ldrdeq	r6, [r1], -r4
   1625c:	ldrdeq	r6, [r1], -r4
   16260:	ldrdeq	r6, [r1], -r4
   16264:	andeq	r6, r1, r4, asr #7
   16268:	andeq	r6, r1, r4, asr #7
   1626c:	ldrdeq	r6, [r1], -r4
   16270:	ldrdeq	r6, [r1], -r4
   16274:	ldrdeq	r6, [r1], -r4
   16278:	ldrdeq	r6, [r1], -r4
   1627c:	ldrdeq	r6, [r1], -r4
   16280:	ldrdeq	r6, [r1], -r4
   16284:	ldrdeq	r6, [r1], -r4
   16288:	ldrdeq	r6, [r1], -r4
   1628c:	ldrdeq	r6, [r1], -r4
   16290:	ldrdeq	r6, [r1], -r4
   16294:	ldrdeq	r6, [r1], -r4
   16298:	ldrdeq	r6, [r1], -r4
   1629c:	andeq	r6, r1, r4, asr #7
   162a0:	ldrdeq	r6, [r1], -r4
   162a4:	ldrdeq	r6, [r1], -r4
   162a8:	ldrdeq	r6, [r1], -r4
   162ac:	andeq	r6, r1, r4, asr #7
   162b0:	ldrdeq	r6, [r1], -r4
   162b4:	andeq	r6, r1, r4, asr #7
   162b8:	ldrdeq	r6, [r1], -r4
   162bc:	ldrdeq	r6, [r1], -r4
   162c0:	ldrdeq	r6, [r1], -r4
   162c4:	ldrdeq	r6, [r1], -r4
   162c8:	ldrdeq	r6, [r1], -r4
   162cc:	ldrdeq	r6, [r1], -r4
   162d0:	andeq	r6, r1, r4, asr #7
   162d4:	mov	r5, #1
   162d8:	mov	r1, #1024	; 0x400
   162dc:	sub	r7, r7, #66	; 0x42
   162e0:	cmp	r7, #53	; 0x35
   162e4:	ldrls	pc, [pc, r7, lsl #2]
   162e8:	b	164e0 <__assert_fail@plt+0x53f4>
   162ec:	andeq	r6, r1, r4, asr #9
   162f0:	andeq	r6, r1, r0, ror #9
   162f4:	andeq	r6, r1, r0, ror #9
   162f8:			; <UNDEFINED> instruction: 0x000164bc
   162fc:	andeq	r6, r1, r0, ror #9
   16300:			; <UNDEFINED> instruction: 0x000164b4
   16304:	andeq	r6, r1, r0, ror #9
   16308:	andeq	r6, r1, r0, ror #9
   1630c:	andeq	r6, r1, r0, ror #9
   16310:	andeq	r6, r1, ip, lsr #9
   16314:	andeq	r6, r1, r0, ror #9
   16318:	andeq	r6, r1, r4, lsr #9
   1631c:	andeq	r6, r1, r0, ror #9
   16320:	andeq	r6, r1, r0, ror #9
   16324:	muleq	r1, ip, r4
   16328:	andeq	r6, r1, r0, ror #9
   1632c:	andeq	r6, r1, r0, ror #9
   16330:	andeq	r6, r1, r0, ror #9
   16334:	andeq	r6, r1, r0, lsl #9
   16338:	andeq	r6, r1, r0, ror #9
   1633c:	andeq	r6, r1, r0, ror #9
   16340:	andeq	r6, r1, r0, ror #9
   16344:	andeq	r6, r1, r0, ror #9
   16348:	andeq	r6, r1, r8, ror r4
   1634c:	andeq	r6, r1, ip, asr r4
   16350:	andeq	r6, r1, r0, ror #9
   16354:	andeq	r6, r1, r0, ror #9
   16358:	andeq	r6, r1, r0, ror #9
   1635c:	andeq	r6, r1, r0, ror #9
   16360:	andeq	r6, r1, r0, ror #9
   16364:	andeq	r6, r1, r0, ror #9
   16368:	andeq	r6, r1, r0, ror #9
   1636c:	andeq	r6, r1, r0, asr #8
   16370:	andeq	r6, r1, r4, lsr r4
   16374:	andeq	r6, r1, r0, ror #9
   16378:	andeq	r6, r1, r0, ror #9
   1637c:	andeq	r6, r1, r0, ror #9
   16380:			; <UNDEFINED> instruction: 0x000164b4
   16384:	andeq	r6, r1, r0, ror #9
   16388:	andeq	r6, r1, r0, ror #9
   1638c:	andeq	r6, r1, r0, ror #9
   16390:	andeq	r6, r1, ip, lsr #9
   16394:	andeq	r6, r1, r0, ror #9
   16398:	andeq	r6, r1, r4, lsr #9
   1639c:	andeq	r6, r1, r0, ror #9
   163a0:	andeq	r6, r1, r0, ror #9
   163a4:	andeq	r6, r1, r0, ror #9
   163a8:	andeq	r6, r1, r0, ror #9
   163ac:	andeq	r6, r1, r0, ror #9
   163b0:	andeq	r6, r1, r0, ror #9
   163b4:	andeq	r6, r1, r0, lsl #9
   163b8:	andeq	r6, r1, r0, ror #9
   163bc:	andeq	r6, r1, r0, ror #9
   163c0:	andeq	r6, r1, r0, lsl #8
   163c4:	mov	r1, #48	; 0x30
   163c8:	ldr	r0, [sp, #40]	; 0x28
   163cc:	bl	10fe4 <strchr@plt>
   163d0:	cmp	r0, #0
   163d4:	beq	162d4 <__assert_fail@plt+0x51e8>
   163d8:	ldrb	r3, [r9, #1]
   163dc:	cmp	r3, #68	; 0x44
   163e0:	beq	163f4 <__assert_fail@plt+0x5308>
   163e4:	cmp	r3, #105	; 0x69
   163e8:	beq	164f0 <__assert_fail@plt+0x5404>
   163ec:	cmp	r3, #66	; 0x42
   163f0:	bne	162d4 <__assert_fail@plt+0x51e8>
   163f4:	mov	r5, #2
   163f8:	mov	r1, #1000	; 0x3e8
   163fc:	b	162dc <__assert_fail@plt+0x51f0>
   16400:	ldr	r0, [sp, #4]
   16404:	cmp	r0, #0
   16408:	lslge	r0, r0, #1
   1640c:	strge	r0, [sp, #4]
   16410:	movge	r3, #0
   16414:	blt	16508 <__assert_fail@plt+0x541c>
   16418:	add	r2, r9, r5
   1641c:	str	r2, [r6]
   16420:	ldrb	r2, [r9, r5]
   16424:	orr	r4, r4, r3
   16428:	cmp	r2, #0
   1642c:	orrne	r4, r4, #2
   16430:	b	1619c <__assert_fail@plt+0x50b0>
   16434:	ldr	r0, [sp, #4]
   16438:	mov	r3, #0
   1643c:	b	16418 <__assert_fail@plt+0x532c>
   16440:	ldr	r0, [sp, #4]
   16444:	cmp	r0, #8388608	; 0x800000
   16448:	bcs	16508 <__assert_fail@plt+0x541c>
   1644c:	lsl	r0, r0, #9
   16450:	str	r0, [sp, #4]
   16454:	mov	r3, #0
   16458:	b	16418 <__assert_fail@plt+0x532c>
   1645c:	mov	r2, #7
   16460:	add	r0, sp, #4
   16464:	bl	16038 <__assert_fail@plt+0x4f4c>
   16468:	ldr	r9, [r6]
   1646c:	mov	r3, r0
   16470:	ldr	r0, [sp, #4]
   16474:	b	16418 <__assert_fail@plt+0x532c>
   16478:	mov	r2, #8
   1647c:	b	16460 <__assert_fail@plt+0x5374>
   16480:	mov	r2, #4
   16484:	add	r0, sp, r2
   16488:	bl	16038 <__assert_fail@plt+0x4f4c>
   1648c:	ldr	r9, [r6]
   16490:	mov	r3, r0
   16494:	ldr	r0, [sp, #4]
   16498:	b	16418 <__assert_fail@plt+0x532c>
   1649c:	mov	r2, #5
   164a0:	b	16460 <__assert_fail@plt+0x5374>
   164a4:	mov	r2, #2
   164a8:	b	16460 <__assert_fail@plt+0x5374>
   164ac:	mov	r2, #1
   164b0:	b	16460 <__assert_fail@plt+0x5374>
   164b4:	mov	r2, #3
   164b8:	b	16460 <__assert_fail@plt+0x5374>
   164bc:	mov	r2, #6
   164c0:	b	16460 <__assert_fail@plt+0x5374>
   164c4:	ldr	r0, [sp, #4]
   164c8:	cmp	r0, #4194304	; 0x400000
   164cc:	bcs	16508 <__assert_fail@plt+0x541c>
   164d0:	lsl	r0, r0, #10
   164d4:	str	r0, [sp, #4]
   164d8:	mov	r3, #0
   164dc:	b	16418 <__assert_fail@plt+0x532c>
   164e0:	ldr	r3, [sp, #4]
   164e4:	orr	r4, r4, #2
   164e8:	str	r3, [r8]
   164ec:	b	1614c <__assert_fail@plt+0x5060>
   164f0:	ldrb	r5, [r9, #2]
   164f4:	mov	r1, #1024	; 0x400
   164f8:	cmp	r5, #66	; 0x42
   164fc:	movne	r5, #1
   16500:	moveq	r5, #3
   16504:	b	162dc <__assert_fail@plt+0x51f0>
   16508:	mvn	r0, #0
   1650c:	str	r0, [sp, #4]
   16510:	mov	r3, #1
   16514:	b	16418 <__assert_fail@plt+0x532c>
   16518:	ldr	r3, [pc, #12]	; 1652c <__assert_fail@plt+0x5440>
   1651c:	mov	r2, #85	; 0x55
   16520:	ldr	r1, [pc, #8]	; 16530 <__assert_fail@plt+0x5444>
   16524:	ldr	r0, [pc, #8]	; 16534 <__assert_fail@plt+0x5448>
   16528:	bl	110ec <__assert_fail@plt>
   1652c:	andeq	r8, r1, r8, asr #18
   16530:	andeq	r8, r1, r4, asr r9
   16534:	andeq	r8, r1, r4, ror #18
   16538:	push	{r4, r5, r6, r7, r8, lr}
   1653c:	subs	r5, r1, #0
   16540:	mov	r4, r0
   16544:	blt	165b8 <__assert_fail@plt+0x54cc>
   16548:	moveq	r6, #0
   1654c:	moveq	r7, #0
   16550:	bne	16578 <__assert_fail@plt+0x548c>
   16554:	ldr	r2, [r4]
   16558:	ldr	r1, [r4, #4]
   1655c:	mov	r0, #0
   16560:	mul	ip, r2, r7
   16564:	umull	r2, r3, r2, r5
   16568:	mla	r5, r5, r1, ip
   1656c:	add	r3, r5, r3
   16570:	strd	r2, [r4]
   16574:	pop	{r4, r5, r6, r7, r8, pc}
   16578:	asr	r7, r5, #31
   1657c:	mov	r2, r5
   16580:	mov	r3, r7
   16584:	mvn	r0, #0
   16588:	mvn	r1, #0
   1658c:	bl	17520 <__assert_fail@plt+0x6434>
   16590:	ldrd	r2, [r4]
   16594:	mov	r6, r5
   16598:	cmp	r1, r3
   1659c:	cmpeq	r0, r2
   165a0:	bcs	16554 <__assert_fail@plt+0x5468>
   165a4:	mvn	r2, #0
   165a8:	mvn	r3, #0
   165ac:	mov	r0, #1
   165b0:	strd	r2, [r4]
   165b4:	pop	{r4, r5, r6, r7, r8, pc}
   165b8:	ldrd	r2, [r0]
   165bc:	orrs	r3, r2, r3
   165c0:	moveq	r6, r5
   165c4:	asreq	r7, r6, #31
   165c8:	bne	165a4 <__assert_fail@plt+0x54b8>
   165cc:	b	16554 <__assert_fail@plt+0x5468>
   165d0:	cmp	r2, #36	; 0x24
   165d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165d8:	sub	sp, sp, #20
   165dc:	bhi	16b50 <__assert_fail@plt+0x5a64>
   165e0:	cmp	r1, #0
   165e4:	mov	r8, r2
   165e8:	mov	r7, r0
   165ec:	mov	r5, r1
   165f0:	mov	r6, r3
   165f4:	addeq	r5, sp, #4
   165f8:	bl	10ff0 <__errno_location@plt>
   165fc:	mov	r3, #0
   16600:	str	r3, [r0]
   16604:	mov	r9, r0
   16608:	bl	10fb4 <__ctype_b_loc@plt>
   1660c:	ldrb	r3, [r7]
   16610:	mov	r2, r7
   16614:	ldr	r0, [r0]
   16618:	b	16620 <__assert_fail@plt+0x5534>
   1661c:	ldrb	r3, [r2, #1]!
   16620:	lsl	r1, r3, #1
   16624:	ldrh	r4, [r0, r1]
   16628:	ands	r4, r4, #8192	; 0x2000
   1662c:	bne	1661c <__assert_fail@plt+0x5530>
   16630:	cmp	r3, #45	; 0x2d
   16634:	bne	16648 <__assert_fail@plt+0x555c>
   16638:	mov	r4, #4
   1663c:	mov	r0, r4
   16640:	add	sp, sp, #20
   16644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16648:	mov	r2, r8
   1664c:	mov	r3, r4
   16650:	mov	r1, r5
   16654:	mov	r0, r7
   16658:	bl	10eac <__strtoull_internal@plt>
   1665c:	ldr	r8, [r5]
   16660:	cmp	r7, r8
   16664:	mov	r2, r0
   16668:	str	r0, [sp, #8]
   1666c:	str	r1, [sp, #12]
   16670:	beq	166bc <__assert_fail@plt+0x55d0>
   16674:	ldr	r4, [r9]
   16678:	cmp	r4, #0
   1667c:	bne	166ac <__assert_fail@plt+0x55c0>
   16680:	ldr	r3, [sp, #56]	; 0x38
   16684:	cmp	r3, #0
   16688:	beq	16698 <__assert_fail@plt+0x55ac>
   1668c:	ldrb	r9, [r8]
   16690:	cmp	r9, #0
   16694:	bne	166f4 <__assert_fail@plt+0x5608>
   16698:	mov	r0, r4
   1669c:	str	r2, [r6]
   166a0:	str	r1, [r6, #4]
   166a4:	add	sp, sp, #20
   166a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ac:	cmp	r4, #34	; 0x22
   166b0:	bne	16638 <__assert_fail@plt+0x554c>
   166b4:	mov	r4, #1
   166b8:	b	16680 <__assert_fail@plt+0x5594>
   166bc:	ldr	r3, [sp, #56]	; 0x38
   166c0:	cmp	r3, #0
   166c4:	beq	16638 <__assert_fail@plt+0x554c>
   166c8:	ldrb	r1, [r8]
   166cc:	cmp	r1, #0
   166d0:	beq	16638 <__assert_fail@plt+0x554c>
   166d4:	mov	r0, r3
   166d8:	bl	10fe4 <strchr@plt>
   166dc:	cmp	r0, #0
   166e0:	beq	16638 <__assert_fail@plt+0x554c>
   166e4:	ldrb	r9, [r8]
   166e8:	mov	r2, #1
   166ec:	mov	r3, #0
   166f0:	strd	r2, [sp, #8]
   166f4:	mov	r1, r9
   166f8:	ldr	r0, [sp, #56]	; 0x38
   166fc:	bl	10fe4 <strchr@plt>
   16700:	cmp	r0, #0
   16704:	beq	16b0c <__assert_fail@plt+0x5a20>
   16708:	sub	r3, r9, #69	; 0x45
   1670c:	cmp	r3, #47	; 0x2f
   16710:	ldrls	pc, [pc, r3, lsl #2]
   16714:	b	167d8 <__assert_fail@plt+0x56ec>
   16718:	andeq	r6, r1, r8, asr #17
   1671c:	ldrdeq	r6, [r1], -r8
   16720:	andeq	r6, r1, r8, asr #17
   16724:	ldrdeq	r6, [r1], -r8
   16728:	ldrdeq	r6, [r1], -r8
   1672c:	ldrdeq	r6, [r1], -r8
   16730:	andeq	r6, r1, r8, asr #17
   16734:	ldrdeq	r6, [r1], -r8
   16738:	andeq	r6, r1, r8, asr #17
   1673c:	ldrdeq	r6, [r1], -r8
   16740:	ldrdeq	r6, [r1], -r8
   16744:	andeq	r6, r1, r8, asr #17
   16748:	ldrdeq	r6, [r1], -r8
   1674c:	ldrdeq	r6, [r1], -r8
   16750:	ldrdeq	r6, [r1], -r8
   16754:	andeq	r6, r1, r8, asr #17
   16758:	ldrdeq	r6, [r1], -r8
   1675c:	ldrdeq	r6, [r1], -r8
   16760:	ldrdeq	r6, [r1], -r8
   16764:	ldrdeq	r6, [r1], -r8
   16768:	andeq	r6, r1, r8, asr #17
   1676c:	andeq	r6, r1, r8, asr #17
   16770:	ldrdeq	r6, [r1], -r8
   16774:	ldrdeq	r6, [r1], -r8
   16778:	ldrdeq	r6, [r1], -r8
   1677c:	ldrdeq	r6, [r1], -r8
   16780:	ldrdeq	r6, [r1], -r8
   16784:	ldrdeq	r6, [r1], -r8
   16788:	ldrdeq	r6, [r1], -r8
   1678c:	ldrdeq	r6, [r1], -r8
   16790:	ldrdeq	r6, [r1], -r8
   16794:	ldrdeq	r6, [r1], -r8
   16798:	ldrdeq	r6, [r1], -r8
   1679c:	ldrdeq	r6, [r1], -r8
   167a0:	andeq	r6, r1, r8, asr #17
   167a4:	ldrdeq	r6, [r1], -r8
   167a8:	ldrdeq	r6, [r1], -r8
   167ac:	ldrdeq	r6, [r1], -r8
   167b0:	andeq	r6, r1, r8, asr #17
   167b4:	ldrdeq	r6, [r1], -r8
   167b8:	andeq	r6, r1, r8, asr #17
   167bc:	ldrdeq	r6, [r1], -r8
   167c0:	ldrdeq	r6, [r1], -r8
   167c4:	ldrdeq	r6, [r1], -r8
   167c8:	ldrdeq	r6, [r1], -r8
   167cc:	ldrdeq	r6, [r1], -r8
   167d0:	ldrdeq	r6, [r1], -r8
   167d4:	andeq	r6, r1, r8, asr #17
   167d8:	mov	r7, #1
   167dc:	mov	sl, #1024	; 0x400
   167e0:	sub	r9, r9, #66	; 0x42
   167e4:	cmp	r9, #53	; 0x35
   167e8:	ldrls	pc, [pc, r9, lsl #2]
   167ec:	b	16b0c <__assert_fail@plt+0x5a20>
   167f0:	andeq	r6, r1, r8, asr sl
   167f4:	andeq	r6, r1, ip, lsl #22
   167f8:	andeq	r6, r1, ip, lsl #22
   167fc:	andeq	r6, r1, r0, lsr sl
   16800:	andeq	r6, r1, ip, lsl #22
   16804:	andeq	r6, r1, r8, lsl #20
   16808:	andeq	r6, r1, ip, lsl #22
   1680c:	andeq	r6, r1, ip, lsl #22
   16810:	andeq	r6, r1, ip, lsl #22
   16814:	andeq	r6, r1, r8, ror #19
   16818:	andeq	r6, r1, ip, lsl #22
   1681c:			; <UNDEFINED> instruction: 0x00016ab4
   16820:	andeq	r6, r1, ip, lsl #22
   16824:	andeq	r6, r1, ip, lsl #22
   16828:	andeq	r6, r1, ip, lsl #21
   1682c:	andeq	r6, r1, ip, lsl #22
   16830:	andeq	r6, r1, ip, lsl #22
   16834:	andeq	r6, r1, ip, lsl #22
   16838:	andeq	r6, r1, r4, ror #21
   1683c:	andeq	r6, r1, ip, lsl #22
   16840:	andeq	r6, r1, ip, lsl #22
   16844:	andeq	r6, r1, ip, lsl #22
   16848:	andeq	r6, r1, ip, lsl #22
   1684c:	andeq	r6, r1, r0, asr #19
   16850:	andeq	r6, r1, ip, lsl #19
   16854:	andeq	r6, r1, ip, lsl #22
   16858:	andeq	r6, r1, ip, lsl #22
   1685c:	andeq	r6, r1, ip, lsl #22
   16860:	andeq	r6, r1, ip, lsl #22
   16864:	andeq	r6, r1, ip, lsl #22
   16868:	andeq	r6, r1, ip, lsl #22
   1686c:	andeq	r6, r1, ip, lsl #22
   16870:	andeq	r6, r1, r8, asr r9
   16874:	andeq	r6, r1, r8, asr #18
   16878:	andeq	r6, r1, ip, lsl #22
   1687c:	andeq	r6, r1, ip, lsl #22
   16880:	andeq	r6, r1, ip, lsl #22
   16884:	andeq	r6, r1, r8, lsl #20
   16888:	andeq	r6, r1, ip, lsl #22
   1688c:	andeq	r6, r1, ip, lsl #22
   16890:	andeq	r6, r1, ip, lsl #22
   16894:	andeq	r6, r1, r8, ror #19
   16898:	andeq	r6, r1, ip, lsl #22
   1689c:			; <UNDEFINED> instruction: 0x00016ab4
   168a0:	andeq	r6, r1, ip, lsl #22
   168a4:	andeq	r6, r1, ip, lsl #22
   168a8:	andeq	r6, r1, ip, lsl #22
   168ac:	andeq	r6, r1, ip, lsl #22
   168b0:	andeq	r6, r1, ip, lsl #22
   168b4:	andeq	r6, r1, ip, lsl #22
   168b8:	andeq	r6, r1, r4, ror #21
   168bc:	andeq	r6, r1, ip, lsl #22
   168c0:	andeq	r6, r1, ip, lsl #22
   168c4:	andeq	r6, r1, r4, lsl #18
   168c8:	mov	r1, #48	; 0x30
   168cc:	ldr	r0, [sp, #56]	; 0x38
   168d0:	bl	10fe4 <strchr@plt>
   168d4:	cmp	r0, #0
   168d8:	beq	167d8 <__assert_fail@plt+0x56ec>
   168dc:	ldrb	r3, [r8, #1]
   168e0:	cmp	r3, #68	; 0x44
   168e4:	beq	168f8 <__assert_fail@plt+0x580c>
   168e8:	cmp	r3, #105	; 0x69
   168ec:	beq	16b1c <__assert_fail@plt+0x5a30>
   168f0:	cmp	r3, #66	; 0x42
   168f4:	bne	167d8 <__assert_fail@plt+0x56ec>
   168f8:	mov	r7, #2
   168fc:	mov	sl, #1000	; 0x3e8
   16900:	b	167e0 <__assert_fail@plt+0x56f4>
   16904:	ldrd	r2, [sp, #8]
   16908:	cmp	r2, #0
   1690c:	sbcs	r1, r3, #0
   16910:	blt	16b34 <__assert_fail@plt+0x5a48>
   16914:	adds	r2, r2, r2
   16918:	adc	r3, r3, r3
   1691c:	mov	r1, r3
   16920:	mov	r9, #0
   16924:	str	r2, [sp, #8]
   16928:	str	r3, [sp, #12]
   1692c:	add	r3, r8, r7
   16930:	str	r3, [r5]
   16934:	ldrb	r3, [r8, r7]
   16938:	orr	r4, r4, r9
   1693c:	cmp	r3, #0
   16940:	orrne	r4, r4, #2
   16944:	b	16698 <__assert_fail@plt+0x55ac>
   16948:	ldr	r2, [sp, #8]
   1694c:	ldr	r1, [sp, #12]
   16950:	mov	r9, #0
   16954:	b	1692c <__assert_fail@plt+0x5840>
   16958:	ldrd	r2, [sp, #8]
   1695c:	ldr	r1, [pc, #512]	; 16b64 <__assert_fail@plt+0x5a78>
   16960:	mvn	r0, #0
   16964:	cmp	r3, r1
   16968:	cmpeq	r2, r0
   1696c:	bhi	16b34 <__assert_fail@plt+0x5a48>
   16970:	lsl	r1, r3, #9
   16974:	orr	r1, r1, r2, lsr #23
   16978:	lsl	r2, r2, #9
   1697c:	str	r1, [sp, #12]
   16980:	str	r2, [sp, #8]
   16984:	mov	r9, #0
   16988:	b	1692c <__assert_fail@plt+0x5840>
   1698c:	mov	fp, #7
   16990:	mov	r9, #0
   16994:	add	r8, sp, #8
   16998:	mov	r1, sl
   1699c:	mov	r0, r8
   169a0:	bl	16538 <__assert_fail@plt+0x544c>
   169a4:	subs	fp, fp, #1
   169a8:	orr	r9, r9, r0
   169ac:	bne	16998 <__assert_fail@plt+0x58ac>
   169b0:	ldr	r8, [r5]
   169b4:	ldr	r2, [sp, #8]
   169b8:	ldr	r1, [sp, #12]
   169bc:	b	1692c <__assert_fail@plt+0x5840>
   169c0:	mov	fp, #8
   169c4:	mov	r9, #0
   169c8:	add	r8, sp, fp
   169cc:	mov	r1, sl
   169d0:	mov	r0, r8
   169d4:	bl	16538 <__assert_fail@plt+0x544c>
   169d8:	subs	fp, fp, #1
   169dc:	orr	r9, r9, r0
   169e0:	bne	169cc <__assert_fail@plt+0x58e0>
   169e4:	b	169b0 <__assert_fail@plt+0x58c4>
   169e8:	mov	r1, sl
   169ec:	add	r0, sp, #8
   169f0:	bl	16538 <__assert_fail@plt+0x544c>
   169f4:	ldr	r8, [r5]
   169f8:	ldr	r2, [sp, #8]
   169fc:	ldr	r1, [sp, #12]
   16a00:	mov	r9, r0
   16a04:	b	1692c <__assert_fail@plt+0x5840>
   16a08:	mov	fp, #3
   16a0c:	mov	r9, #0
   16a10:	add	r8, sp, #8
   16a14:	mov	r1, sl
   16a18:	mov	r0, r8
   16a1c:	bl	16538 <__assert_fail@plt+0x544c>
   16a20:	subs	fp, fp, #1
   16a24:	orr	r9, r9, r0
   16a28:	bne	16a14 <__assert_fail@plt+0x5928>
   16a2c:	b	169b0 <__assert_fail@plt+0x58c4>
   16a30:	mov	fp, #6
   16a34:	mov	r9, #0
   16a38:	add	r8, sp, #8
   16a3c:	mov	r1, sl
   16a40:	mov	r0, r8
   16a44:	bl	16538 <__assert_fail@plt+0x544c>
   16a48:	subs	fp, fp, #1
   16a4c:	orr	r9, r9, r0
   16a50:	bne	16a3c <__assert_fail@plt+0x5950>
   16a54:	b	169b0 <__assert_fail@plt+0x58c4>
   16a58:	ldrd	r0, [sp, #8]
   16a5c:	ldr	r3, [pc, #260]	; 16b68 <__assert_fail@plt+0x5a7c>
   16a60:	mvn	r2, #0
   16a64:	cmp	r1, r3
   16a68:	cmpeq	r0, r2
   16a6c:	bhi	16b34 <__assert_fail@plt+0x5a48>
   16a70:	lsl	r1, r1, #10
   16a74:	orr	r1, r1, r0, lsr #22
   16a78:	lsl	r2, r0, #10
   16a7c:	str	r1, [sp, #12]
   16a80:	str	r2, [sp, #8]
   16a84:	mov	r9, #0
   16a88:	b	1692c <__assert_fail@plt+0x5840>
   16a8c:	mov	fp, #5
   16a90:	mov	r9, #0
   16a94:	add	r8, sp, #8
   16a98:	mov	r1, sl
   16a9c:	mov	r0, r8
   16aa0:	bl	16538 <__assert_fail@plt+0x544c>
   16aa4:	subs	fp, fp, #1
   16aa8:	orr	r9, r9, r0
   16aac:	bne	16a98 <__assert_fail@plt+0x59ac>
   16ab0:	b	169b0 <__assert_fail@plt+0x58c4>
   16ab4:	mov	r1, sl
   16ab8:	add	r0, sp, #8
   16abc:	bl	16538 <__assert_fail@plt+0x544c>
   16ac0:	mov	r1, sl
   16ac4:	mov	r9, r0
   16ac8:	add	r0, sp, #8
   16acc:	bl	16538 <__assert_fail@plt+0x544c>
   16ad0:	ldr	r8, [r5]
   16ad4:	ldr	r2, [sp, #8]
   16ad8:	ldr	r1, [sp, #12]
   16adc:	orr	r9, r9, r0
   16ae0:	b	1692c <__assert_fail@plt+0x5840>
   16ae4:	mov	fp, #4
   16ae8:	mov	r9, #0
   16aec:	add	r8, sp, #8
   16af0:	mov	r1, sl
   16af4:	mov	r0, r8
   16af8:	bl	16538 <__assert_fail@plt+0x544c>
   16afc:	subs	fp, fp, #1
   16b00:	orr	r9, r9, r0
   16b04:	bne	16af0 <__assert_fail@plt+0x5a04>
   16b08:	b	169b0 <__assert_fail@plt+0x58c4>
   16b0c:	ldrd	r2, [sp, #8]
   16b10:	orr	r4, r4, #2
   16b14:	strd	r2, [r6]
   16b18:	b	1663c <__assert_fail@plt+0x5550>
   16b1c:	ldrb	r7, [r8, #2]
   16b20:	mov	sl, #1024	; 0x400
   16b24:	cmp	r7, #66	; 0x42
   16b28:	movne	r7, #1
   16b2c:	moveq	r7, #3
   16b30:	b	167e0 <__assert_fail@plt+0x56f4>
   16b34:	mvn	r1, #0
   16b38:	mvn	r0, #0
   16b3c:	mvn	r2, #0
   16b40:	strd	r0, [sp, #8]
   16b44:	mov	r9, #1
   16b48:	mov	r1, r2
   16b4c:	b	1692c <__assert_fail@plt+0x5840>
   16b50:	ldr	r3, [pc, #20]	; 16b6c <__assert_fail@plt+0x5a80>
   16b54:	mov	r2, #85	; 0x55
   16b58:	ldr	r1, [pc, #16]	; 16b70 <__assert_fail@plt+0x5a84>
   16b5c:	ldr	r0, [pc, #16]	; 16b74 <__assert_fail@plt+0x5a88>
   16b60:	bl	110ec <__assert_fail@plt>
   16b64:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   16b68:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   16b6c:	andeq	r8, r1, ip, lsl #19
   16b70:	andeq	r8, r1, r4, asr r9
   16b74:	andeq	r8, r1, r4, ror #18
   16b78:	cmp	r1, #0
   16b7c:	cmpne	r0, #0
   16b80:	moveq	r1, #1
   16b84:	moveq	r0, r1
   16b88:	umull	r2, r3, r0, r1
   16b8c:	adds	r3, r3, #0
   16b90:	movne	r3, #1
   16b94:	cmp	r2, #0
   16b98:	blt	16ba8 <__assert_fail@plt+0x5abc>
   16b9c:	cmp	r3, #0
   16ba0:	bne	16ba8 <__assert_fail@plt+0x5abc>
   16ba4:	b	10e40 <calloc@plt>
   16ba8:	push	{r4, lr}
   16bac:	bl	10ff0 <__errno_location@plt>
   16bb0:	mov	r3, #12
   16bb4:	str	r3, [r0]
   16bb8:	mov	r0, #0
   16bbc:	pop	{r4, pc}
   16bc0:	cmp	r0, #0
   16bc4:	moveq	r0, #1
   16bc8:	cmp	r0, #0
   16bcc:	blt	16bd4 <__assert_fail@plt+0x5ae8>
   16bd0:	b	10f6c <malloc@plt>
   16bd4:	push	{r4, lr}
   16bd8:	bl	10ff0 <__errno_location@plt>
   16bdc:	mov	r3, #12
   16be0:	str	r3, [r0]
   16be4:	mov	r0, #0
   16be8:	pop	{r4, pc}
   16bec:	cmp	r0, #0
   16bf0:	beq	16c14 <__assert_fail@plt+0x5b28>
   16bf4:	cmp	r1, #0
   16bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   16bfc:	sub	sp, sp, #12
   16c00:	beq	16c1c <__assert_fail@plt+0x5b30>
   16c04:	blt	16c34 <__assert_fail@plt+0x5b48>
   16c08:	add	sp, sp, #12
   16c0c:	pop	{lr}		; (ldr lr, [sp], #4)
   16c10:	b	10ef4 <realloc@plt>
   16c14:	mov	r0, r1
   16c18:	b	16bc0 <__assert_fail@plt+0x5ad4>
   16c1c:	str	r1, [sp, #4]
   16c20:	bl	131cc <__assert_fail@plt+0x20e0>
   16c24:	ldr	r3, [sp, #4]
   16c28:	mov	r0, r3
   16c2c:	add	sp, sp, #12
   16c30:	pop	{pc}		; (ldr pc, [sp], #4)
   16c34:	bl	10ff0 <__errno_location@plt>
   16c38:	mov	r2, #12
   16c3c:	mov	r3, #0
   16c40:	str	r2, [r0]
   16c44:	b	16c28 <__assert_fail@plt+0x5b3c>
   16c48:	push	{r4, r5, r6, lr}
   16c4c:	mov	r4, r0
   16c50:	bl	10f3c <__fpending@plt>
   16c54:	ldr	r5, [r4]
   16c58:	and	r5, r5, #32
   16c5c:	mov	r6, r0
   16c60:	mov	r0, r4
   16c64:	bl	13034 <__assert_fail@plt+0x1f48>
   16c68:	cmp	r5, #0
   16c6c:	mov	r4, r0
   16c70:	bne	16c90 <__assert_fail@plt+0x5ba4>
   16c74:	cmp	r0, #0
   16c78:	beq	16c88 <__assert_fail@plt+0x5b9c>
   16c7c:	cmp	r6, #0
   16c80:	beq	16cac <__assert_fail@plt+0x5bc0>
   16c84:	mvn	r4, #0
   16c88:	mov	r0, r4
   16c8c:	pop	{r4, r5, r6, pc}
   16c90:	cmp	r0, #0
   16c94:	bne	16c84 <__assert_fail@plt+0x5b98>
   16c98:	bl	10ff0 <__errno_location@plt>
   16c9c:	str	r4, [r0]
   16ca0:	mvn	r4, #0
   16ca4:	mov	r0, r4
   16ca8:	pop	{r4, r5, r6, pc}
   16cac:	bl	10ff0 <__errno_location@plt>
   16cb0:	ldr	r4, [r0]
   16cb4:	subs	r4, r4, #9
   16cb8:	mvnne	r4, #0
   16cbc:	mov	r0, r4
   16cc0:	pop	{r4, r5, r6, pc}
   16cc4:	push	{r1, r2, r3}
   16cc8:	push	{r4, r5, r6, r7, lr}
   16ccc:	sub	sp, sp, #8
   16cd0:	add	r3, sp, #32
   16cd4:	ldr	r1, [sp, #28]
   16cd8:	str	r3, [sp, #4]
   16cdc:	cmp	r1, #0
   16ce0:	beq	16d78 <__assert_fail@plt+0x5c8c>
   16ce4:	ldr	r2, [pc, #412]	; 16e88 <__assert_fail@plt+0x5d9c>
   16ce8:	mov	r5, r0
   16cec:	cmp	r1, r2
   16cf0:	bne	16d3c <__assert_fail@plt+0x5c50>
   16cf4:	ldr	r6, [pc, #400]	; 16e8c <__assert_fail@plt+0x5da0>
   16cf8:	ldr	r7, [r3]
   16cfc:	add	r2, sp, #36	; 0x24
   16d00:	ldr	r3, [r6]
   16d04:	str	r2, [sp, #4]
   16d08:	cmp	r3, #0
   16d0c:	mov	r2, r7
   16d10:	blt	16e3c <__assert_fail@plt+0x5d50>
   16d14:	bl	1105c <fcntl64@plt>
   16d18:	subs	r4, r0, #0
   16d1c:	blt	16dc0 <__assert_fail@plt+0x5cd4>
   16d20:	mov	r3, #1
   16d24:	str	r3, [r6]
   16d28:	mov	r0, r4
   16d2c:	add	sp, sp, #8
   16d30:	pop	{r4, r5, r6, r7, lr}
   16d34:	add	sp, sp, #12
   16d38:	bx	lr
   16d3c:	cmp	r1, #11
   16d40:	beq	16d68 <__assert_fail@plt+0x5c7c>
   16d44:	bgt	16d88 <__assert_fail@plt+0x5c9c>
   16d48:	cmp	r1, #3
   16d4c:	beq	16d68 <__assert_fail@plt+0x5c7c>
   16d50:	ble	16e7c <__assert_fail@plt+0x5d90>
   16d54:	cmp	r1, #8
   16d58:	beq	16da8 <__assert_fail@plt+0x5cbc>
   16d5c:	ble	16da8 <__assert_fail@plt+0x5cbc>
   16d60:	cmp	r1, #9
   16d64:	bne	16da8 <__assert_fail@plt+0x5cbc>
   16d68:	mov	r0, r5
   16d6c:	bl	1105c <fcntl64@plt>
   16d70:	mov	r4, r0
   16d74:	b	16d28 <__assert_fail@plt+0x5c3c>
   16d78:	ldr	r2, [sp, #32]
   16d7c:	bl	1105c <fcntl64@plt>
   16d80:	mov	r4, r0
   16d84:	b	16d28 <__assert_fail@plt+0x5c3c>
   16d88:	ldr	r3, [pc, #256]	; 16e90 <__assert_fail@plt+0x5da4>
   16d8c:	cmp	r1, r3
   16d90:	bgt	16e5c <__assert_fail@plt+0x5d70>
   16d94:	cmp	r1, r2
   16d98:	bge	16da8 <__assert_fail@plt+0x5cbc>
   16d9c:	sub	r3, r3, #6
   16da0:	cmp	r1, r3
   16da4:	beq	16d68 <__assert_fail@plt+0x5c7c>
   16da8:	ldr	r3, [sp, #4]
   16dac:	mov	r0, r5
   16db0:	ldr	r2, [r3]
   16db4:	bl	1105c <fcntl64@plt>
   16db8:	mov	r4, r0
   16dbc:	b	16d28 <__assert_fail@plt+0x5c3c>
   16dc0:	bl	10ff0 <__errno_location@plt>
   16dc4:	ldr	r3, [r0]
   16dc8:	cmp	r3, #22
   16dcc:	bne	16d20 <__assert_fail@plt+0x5c34>
   16dd0:	mov	r2, r7
   16dd4:	mov	r0, r5
   16dd8:	mov	r1, #0
   16ddc:	bl	1105c <fcntl64@plt>
   16de0:	subs	r4, r0, #0
   16de4:	blt	16d28 <__assert_fail@plt+0x5c3c>
   16de8:	mvn	r3, #0
   16dec:	str	r3, [r6]
   16df0:	mov	r1, #1
   16df4:	mov	r0, r4
   16df8:	bl	1105c <fcntl64@plt>
   16dfc:	subs	r2, r0, #0
   16e00:	blt	16e1c <__assert_fail@plt+0x5d30>
   16e04:	orr	r2, r2, #1
   16e08:	mov	r1, #2
   16e0c:	mov	r0, r4
   16e10:	bl	1105c <fcntl64@plt>
   16e14:	cmn	r0, #1
   16e18:	bne	16d28 <__assert_fail@plt+0x5c3c>
   16e1c:	bl	10ff0 <__errno_location@plt>
   16e20:	mov	r5, r0
   16e24:	mov	r0, r4
   16e28:	ldr	r6, [r5]
   16e2c:	mvn	r4, #0
   16e30:	bl	110e0 <close@plt>
   16e34:	str	r6, [r5]
   16e38:	b	16d28 <__assert_fail@plt+0x5c3c>
   16e3c:	mov	r1, #0
   16e40:	bl	1105c <fcntl64@plt>
   16e44:	subs	r4, r0, #0
   16e48:	blt	16d28 <__assert_fail@plt+0x5c3c>
   16e4c:	ldr	r3, [r6]
   16e50:	cmn	r3, #1
   16e54:	beq	16df0 <__assert_fail@plt+0x5d04>
   16e58:	b	16d28 <__assert_fail@plt+0x5c3c>
   16e5c:	ldr	r3, [pc, #48]	; 16e94 <__assert_fail@plt+0x5da8>
   16e60:	cmp	r1, r3
   16e64:	beq	16da8 <__assert_fail@plt+0x5cbc>
   16e68:	blt	16d68 <__assert_fail@plt+0x5c7c>
   16e6c:	add	r3, r3, #1
   16e70:	cmp	r1, r3
   16e74:	bne	16da8 <__assert_fail@plt+0x5cbc>
   16e78:	b	16d68 <__assert_fail@plt+0x5c7c>
   16e7c:	cmp	r1, #1
   16e80:	bne	16da8 <__assert_fail@plt+0x5cbc>
   16e84:	b	16d68 <__assert_fail@plt+0x5c7c>
   16e88:	andeq	r0, r0, r6, lsl #8
   16e8c:	andeq	r9, r2, r4, lsr r3
   16e90:	andeq	r0, r0, r7, lsl #8
   16e94:	andeq	r0, r0, r9, lsl #8
   16e98:	push	{r4, lr}
   16e9c:	mov	r0, #14
   16ea0:	bl	11098 <nl_langinfo@plt>
   16ea4:	cmp	r0, #0
   16ea8:	beq	16ec0 <__assert_fail@plt+0x5dd4>
   16eac:	ldrb	r2, [r0]
   16eb0:	ldr	r3, [pc, #16]	; 16ec8 <__assert_fail@plt+0x5ddc>
   16eb4:	cmp	r2, #0
   16eb8:	moveq	r0, r3
   16ebc:	pop	{r4, pc}
   16ec0:	ldr	r0, [pc]	; 16ec8 <__assert_fail@plt+0x5ddc>
   16ec4:	pop	{r4, pc}
   16ec8:	muleq	r1, r8, r9
   16ecc:	push	{r4, r5, r6, r7, lr}
   16ed0:	subs	r6, r0, #0
   16ed4:	sub	sp, sp, #12
   16ed8:	addeq	r6, sp, #4
   16edc:	mov	r0, r6
   16ee0:	mov	r5, r2
   16ee4:	mov	r7, r1
   16ee8:	bl	10f48 <mbrtowc@plt>
   16eec:	cmp	r5, #0
   16ef0:	cmnne	r0, #3
   16ef4:	mov	r4, r0
   16ef8:	bls	16f14 <__assert_fail@plt+0x5e28>
   16efc:	mov	r0, #0
   16f00:	bl	132c4 <__assert_fail@plt+0x21d8>
   16f04:	cmp	r0, #0
   16f08:	moveq	r4, #1
   16f0c:	ldrbeq	r3, [r7]
   16f10:	streq	r3, [r6]
   16f14:	mov	r0, r4
   16f18:	add	sp, sp, #12
   16f1c:	pop	{r4, r5, r6, r7, pc}
   16f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f24:	mov	r4, r0
   16f28:	mov	r7, r1
   16f2c:	mov	r5, r2
   16f30:	mov	r8, r3
   16f34:	bl	10ff0 <__errno_location@plt>
   16f38:	mov	sl, #0
   16f3c:	mov	r9, r0
   16f40:	b	16f74 <__assert_fail@plt+0x5e88>
   16f44:	bl	10fd8 <strlen@plt>
   16f48:	add	r6, r0, #1
   16f4c:	mov	r0, r5
   16f50:	bl	10fd8 <strlen@plt>
   16f54:	subs	r7, r7, r6
   16f58:	add	r4, r4, r6
   16f5c:	add	r0, r0, #1
   16f60:	add	r5, r5, r0
   16f64:	sub	r8, r8, r0
   16f68:	beq	16f98 <__assert_fail@plt+0x5eac>
   16f6c:	cmp	r8, #0
   16f70:	beq	16fa8 <__assert_fail@plt+0x5ebc>
   16f74:	str	sl, [r9]
   16f78:	mov	r1, r5
   16f7c:	mov	r0, r4
   16f80:	bl	10f60 <strcoll@plt>
   16f84:	subs	r3, r0, #0
   16f88:	mov	r0, r4
   16f8c:	beq	16f44 <__assert_fail@plt+0x5e58>
   16f90:	mov	r0, r3
   16f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f98:	adds	r3, r8, #0
   16f9c:	mvnne	r3, #0
   16fa0:	mov	r0, r3
   16fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fa8:	mov	r3, #1
   16fac:	mov	r0, r3
   16fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fb4:	cmp	r1, r3
   16fb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fbc:	mov	r4, r1
   16fc0:	mov	r5, r3
   16fc4:	mov	r6, r2
   16fc8:	mov	r7, r0
   16fcc:	beq	1700c <__assert_fail@plt+0x5f20>
   16fd0:	mov	r1, #0
   16fd4:	ldrb	sl, [r7, r4]
   16fd8:	ldrb	r9, [r6, r5]
   16fdc:	add	r3, r5, #1
   16fe0:	strb	r1, [r7, r4]
   16fe4:	mov	r2, r6
   16fe8:	strb	r1, [r6, r5]
   16fec:	mov	r0, r7
   16ff0:	add	r1, r4, #1
   16ff4:	bl	16f20 <__assert_fail@plt+0x5e34>
   16ff8:	strb	sl, [r7, r4]
   16ffc:	strb	r9, [r6, r5]
   17000:	mov	r8, r0
   17004:	mov	r0, r8
   17008:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1700c:	mov	r2, r1
   17010:	mov	r1, r6
   17014:	bl	10ed0 <memcmp@plt>
   17018:	subs	r8, r0, #0
   1701c:	bne	16fd0 <__assert_fail@plt+0x5ee4>
   17020:	bl	10ff0 <__errno_location@plt>
   17024:	str	r8, [r0]
   17028:	mov	r0, r8
   1702c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17030:	cmp	r1, r3
   17034:	push	{r4, r5, r6, r7, r8, lr}
   17038:	mov	r4, r1
   1703c:	mov	r5, r3
   17040:	mov	r6, r2
   17044:	mov	r7, r0
   17048:	beq	17064 <__assert_fail@plt+0x5f78>
   1704c:	mov	r3, r5
   17050:	mov	r2, r6
   17054:	mov	r1, r4
   17058:	mov	r0, r7
   1705c:	pop	{r4, r5, r6, r7, r8, lr}
   17060:	b	16f20 <__assert_fail@plt+0x5e34>
   17064:	mov	r2, r1
   17068:	mov	r1, r6
   1706c:	bl	10ed0 <memcmp@plt>
   17070:	subs	r8, r0, #0
   17074:	bne	1704c <__assert_fail@plt+0x5f60>
   17078:	bl	10ff0 <__errno_location@plt>
   1707c:	str	r8, [r0]
   17080:	mov	r0, r8
   17084:	pop	{r4, r5, r6, r7, r8, pc}
   17088:	push	{r4, r5, r6, lr}
   1708c:	subs	r4, r2, #0
   17090:	mov	r6, r0
   17094:	mov	r5, r1
   17098:	beq	170c4 <__assert_fail@plt+0x5fd8>
   1709c:	mov	r1, r4
   170a0:	mvn	r0, #0
   170a4:	bl	170d4 <__assert_fail@plt+0x5fe8>
   170a8:	cmp	r0, r5
   170ac:	bcs	170c4 <__assert_fail@plt+0x5fd8>
   170b0:	bl	10ff0 <__errno_location@plt>
   170b4:	mov	r3, #12
   170b8:	str	r3, [r0]
   170bc:	mov	r0, #0
   170c0:	pop	{r4, r5, r6, pc}
   170c4:	mul	r1, r5, r4
   170c8:	mov	r0, r6
   170cc:	pop	{r4, r5, r6, lr}
   170d0:	b	16bec <__assert_fail@plt+0x5b00>
   170d4:	subs	r2, r1, #1
   170d8:	bxeq	lr
   170dc:	bcc	172b4 <__assert_fail@plt+0x61c8>
   170e0:	cmp	r0, r1
   170e4:	bls	17298 <__assert_fail@plt+0x61ac>
   170e8:	tst	r1, r2
   170ec:	beq	172a4 <__assert_fail@plt+0x61b8>
   170f0:	clz	r3, r0
   170f4:	clz	r2, r1
   170f8:	sub	r3, r2, r3
   170fc:	rsbs	r3, r3, #31
   17100:	addne	r3, r3, r3, lsl #1
   17104:	mov	r2, #0
   17108:	addne	pc, pc, r3, lsl #2
   1710c:	nop			; (mov r0, r0)
   17110:	cmp	r0, r1, lsl #31
   17114:	adc	r2, r2, r2
   17118:	subcs	r0, r0, r1, lsl #31
   1711c:	cmp	r0, r1, lsl #30
   17120:	adc	r2, r2, r2
   17124:	subcs	r0, r0, r1, lsl #30
   17128:	cmp	r0, r1, lsl #29
   1712c:	adc	r2, r2, r2
   17130:	subcs	r0, r0, r1, lsl #29
   17134:	cmp	r0, r1, lsl #28
   17138:	adc	r2, r2, r2
   1713c:	subcs	r0, r0, r1, lsl #28
   17140:	cmp	r0, r1, lsl #27
   17144:	adc	r2, r2, r2
   17148:	subcs	r0, r0, r1, lsl #27
   1714c:	cmp	r0, r1, lsl #26
   17150:	adc	r2, r2, r2
   17154:	subcs	r0, r0, r1, lsl #26
   17158:	cmp	r0, r1, lsl #25
   1715c:	adc	r2, r2, r2
   17160:	subcs	r0, r0, r1, lsl #25
   17164:	cmp	r0, r1, lsl #24
   17168:	adc	r2, r2, r2
   1716c:	subcs	r0, r0, r1, lsl #24
   17170:	cmp	r0, r1, lsl #23
   17174:	adc	r2, r2, r2
   17178:	subcs	r0, r0, r1, lsl #23
   1717c:	cmp	r0, r1, lsl #22
   17180:	adc	r2, r2, r2
   17184:	subcs	r0, r0, r1, lsl #22
   17188:	cmp	r0, r1, lsl #21
   1718c:	adc	r2, r2, r2
   17190:	subcs	r0, r0, r1, lsl #21
   17194:	cmp	r0, r1, lsl #20
   17198:	adc	r2, r2, r2
   1719c:	subcs	r0, r0, r1, lsl #20
   171a0:	cmp	r0, r1, lsl #19
   171a4:	adc	r2, r2, r2
   171a8:	subcs	r0, r0, r1, lsl #19
   171ac:	cmp	r0, r1, lsl #18
   171b0:	adc	r2, r2, r2
   171b4:	subcs	r0, r0, r1, lsl #18
   171b8:	cmp	r0, r1, lsl #17
   171bc:	adc	r2, r2, r2
   171c0:	subcs	r0, r0, r1, lsl #17
   171c4:	cmp	r0, r1, lsl #16
   171c8:	adc	r2, r2, r2
   171cc:	subcs	r0, r0, r1, lsl #16
   171d0:	cmp	r0, r1, lsl #15
   171d4:	adc	r2, r2, r2
   171d8:	subcs	r0, r0, r1, lsl #15
   171dc:	cmp	r0, r1, lsl #14
   171e0:	adc	r2, r2, r2
   171e4:	subcs	r0, r0, r1, lsl #14
   171e8:	cmp	r0, r1, lsl #13
   171ec:	adc	r2, r2, r2
   171f0:	subcs	r0, r0, r1, lsl #13
   171f4:	cmp	r0, r1, lsl #12
   171f8:	adc	r2, r2, r2
   171fc:	subcs	r0, r0, r1, lsl #12
   17200:	cmp	r0, r1, lsl #11
   17204:	adc	r2, r2, r2
   17208:	subcs	r0, r0, r1, lsl #11
   1720c:	cmp	r0, r1, lsl #10
   17210:	adc	r2, r2, r2
   17214:	subcs	r0, r0, r1, lsl #10
   17218:	cmp	r0, r1, lsl #9
   1721c:	adc	r2, r2, r2
   17220:	subcs	r0, r0, r1, lsl #9
   17224:	cmp	r0, r1, lsl #8
   17228:	adc	r2, r2, r2
   1722c:	subcs	r0, r0, r1, lsl #8
   17230:	cmp	r0, r1, lsl #7
   17234:	adc	r2, r2, r2
   17238:	subcs	r0, r0, r1, lsl #7
   1723c:	cmp	r0, r1, lsl #6
   17240:	adc	r2, r2, r2
   17244:	subcs	r0, r0, r1, lsl #6
   17248:	cmp	r0, r1, lsl #5
   1724c:	adc	r2, r2, r2
   17250:	subcs	r0, r0, r1, lsl #5
   17254:	cmp	r0, r1, lsl #4
   17258:	adc	r2, r2, r2
   1725c:	subcs	r0, r0, r1, lsl #4
   17260:	cmp	r0, r1, lsl #3
   17264:	adc	r2, r2, r2
   17268:	subcs	r0, r0, r1, lsl #3
   1726c:	cmp	r0, r1, lsl #2
   17270:	adc	r2, r2, r2
   17274:	subcs	r0, r0, r1, lsl #2
   17278:	cmp	r0, r1, lsl #1
   1727c:	adc	r2, r2, r2
   17280:	subcs	r0, r0, r1, lsl #1
   17284:	cmp	r0, r1
   17288:	adc	r2, r2, r2
   1728c:	subcs	r0, r0, r1
   17290:	mov	r0, r2
   17294:	bx	lr
   17298:	moveq	r0, #1
   1729c:	movne	r0, #0
   172a0:	bx	lr
   172a4:	clz	r2, r1
   172a8:	rsb	r2, r2, #31
   172ac:	lsr	r0, r0, r2
   172b0:	bx	lr
   172b4:	cmp	r0, #0
   172b8:	mvnne	r0, #0
   172bc:	b	1755c <__assert_fail@plt+0x6470>
   172c0:	cmp	r1, #0
   172c4:	beq	172b4 <__assert_fail@plt+0x61c8>
   172c8:	push	{r0, r1, lr}
   172cc:	bl	170d4 <__assert_fail@plt+0x5fe8>
   172d0:	pop	{r1, r2, lr}
   172d4:	mul	r3, r2, r0
   172d8:	sub	r1, r1, r3
   172dc:	bx	lr
   172e0:	cmp	r1, #0
   172e4:	beq	174f0 <__assert_fail@plt+0x6404>
   172e8:	eor	ip, r0, r1
   172ec:	rsbmi	r1, r1, #0
   172f0:	subs	r2, r1, #1
   172f4:	beq	174bc <__assert_fail@plt+0x63d0>
   172f8:	movs	r3, r0
   172fc:	rsbmi	r3, r0, #0
   17300:	cmp	r3, r1
   17304:	bls	174c8 <__assert_fail@plt+0x63dc>
   17308:	tst	r1, r2
   1730c:	beq	174d8 <__assert_fail@plt+0x63ec>
   17310:	clz	r2, r3
   17314:	clz	r0, r1
   17318:	sub	r2, r0, r2
   1731c:	rsbs	r2, r2, #31
   17320:	addne	r2, r2, r2, lsl #1
   17324:	mov	r0, #0
   17328:	addne	pc, pc, r2, lsl #2
   1732c:	nop			; (mov r0, r0)
   17330:	cmp	r3, r1, lsl #31
   17334:	adc	r0, r0, r0
   17338:	subcs	r3, r3, r1, lsl #31
   1733c:	cmp	r3, r1, lsl #30
   17340:	adc	r0, r0, r0
   17344:	subcs	r3, r3, r1, lsl #30
   17348:	cmp	r3, r1, lsl #29
   1734c:	adc	r0, r0, r0
   17350:	subcs	r3, r3, r1, lsl #29
   17354:	cmp	r3, r1, lsl #28
   17358:	adc	r0, r0, r0
   1735c:	subcs	r3, r3, r1, lsl #28
   17360:	cmp	r3, r1, lsl #27
   17364:	adc	r0, r0, r0
   17368:	subcs	r3, r3, r1, lsl #27
   1736c:	cmp	r3, r1, lsl #26
   17370:	adc	r0, r0, r0
   17374:	subcs	r3, r3, r1, lsl #26
   17378:	cmp	r3, r1, lsl #25
   1737c:	adc	r0, r0, r0
   17380:	subcs	r3, r3, r1, lsl #25
   17384:	cmp	r3, r1, lsl #24
   17388:	adc	r0, r0, r0
   1738c:	subcs	r3, r3, r1, lsl #24
   17390:	cmp	r3, r1, lsl #23
   17394:	adc	r0, r0, r0
   17398:	subcs	r3, r3, r1, lsl #23
   1739c:	cmp	r3, r1, lsl #22
   173a0:	adc	r0, r0, r0
   173a4:	subcs	r3, r3, r1, lsl #22
   173a8:	cmp	r3, r1, lsl #21
   173ac:	adc	r0, r0, r0
   173b0:	subcs	r3, r3, r1, lsl #21
   173b4:	cmp	r3, r1, lsl #20
   173b8:	adc	r0, r0, r0
   173bc:	subcs	r3, r3, r1, lsl #20
   173c0:	cmp	r3, r1, lsl #19
   173c4:	adc	r0, r0, r0
   173c8:	subcs	r3, r3, r1, lsl #19
   173cc:	cmp	r3, r1, lsl #18
   173d0:	adc	r0, r0, r0
   173d4:	subcs	r3, r3, r1, lsl #18
   173d8:	cmp	r3, r1, lsl #17
   173dc:	adc	r0, r0, r0
   173e0:	subcs	r3, r3, r1, lsl #17
   173e4:	cmp	r3, r1, lsl #16
   173e8:	adc	r0, r0, r0
   173ec:	subcs	r3, r3, r1, lsl #16
   173f0:	cmp	r3, r1, lsl #15
   173f4:	adc	r0, r0, r0
   173f8:	subcs	r3, r3, r1, lsl #15
   173fc:	cmp	r3, r1, lsl #14
   17400:	adc	r0, r0, r0
   17404:	subcs	r3, r3, r1, lsl #14
   17408:	cmp	r3, r1, lsl #13
   1740c:	adc	r0, r0, r0
   17410:	subcs	r3, r3, r1, lsl #13
   17414:	cmp	r3, r1, lsl #12
   17418:	adc	r0, r0, r0
   1741c:	subcs	r3, r3, r1, lsl #12
   17420:	cmp	r3, r1, lsl #11
   17424:	adc	r0, r0, r0
   17428:	subcs	r3, r3, r1, lsl #11
   1742c:	cmp	r3, r1, lsl #10
   17430:	adc	r0, r0, r0
   17434:	subcs	r3, r3, r1, lsl #10
   17438:	cmp	r3, r1, lsl #9
   1743c:	adc	r0, r0, r0
   17440:	subcs	r3, r3, r1, lsl #9
   17444:	cmp	r3, r1, lsl #8
   17448:	adc	r0, r0, r0
   1744c:	subcs	r3, r3, r1, lsl #8
   17450:	cmp	r3, r1, lsl #7
   17454:	adc	r0, r0, r0
   17458:	subcs	r3, r3, r1, lsl #7
   1745c:	cmp	r3, r1, lsl #6
   17460:	adc	r0, r0, r0
   17464:	subcs	r3, r3, r1, lsl #6
   17468:	cmp	r3, r1, lsl #5
   1746c:	adc	r0, r0, r0
   17470:	subcs	r3, r3, r1, lsl #5
   17474:	cmp	r3, r1, lsl #4
   17478:	adc	r0, r0, r0
   1747c:	subcs	r3, r3, r1, lsl #4
   17480:	cmp	r3, r1, lsl #3
   17484:	adc	r0, r0, r0
   17488:	subcs	r3, r3, r1, lsl #3
   1748c:	cmp	r3, r1, lsl #2
   17490:	adc	r0, r0, r0
   17494:	subcs	r3, r3, r1, lsl #2
   17498:	cmp	r3, r1, lsl #1
   1749c:	adc	r0, r0, r0
   174a0:	subcs	r3, r3, r1, lsl #1
   174a4:	cmp	r3, r1
   174a8:	adc	r0, r0, r0
   174ac:	subcs	r3, r3, r1
   174b0:	cmp	ip, #0
   174b4:	rsbmi	r0, r0, #0
   174b8:	bx	lr
   174bc:	teq	ip, r0
   174c0:	rsbmi	r0, r0, #0
   174c4:	bx	lr
   174c8:	movcc	r0, #0
   174cc:	asreq	r0, ip, #31
   174d0:	orreq	r0, r0, #1
   174d4:	bx	lr
   174d8:	clz	r2, r1
   174dc:	rsb	r2, r2, #31
   174e0:	cmp	ip, #0
   174e4:	lsr	r0, r3, r2
   174e8:	rsbmi	r0, r0, #0
   174ec:	bx	lr
   174f0:	cmp	r0, #0
   174f4:	mvngt	r0, #-2147483648	; 0x80000000
   174f8:	movlt	r0, #-2147483648	; 0x80000000
   174fc:	b	1755c <__assert_fail@plt+0x6470>
   17500:	cmp	r1, #0
   17504:	beq	174f0 <__assert_fail@plt+0x6404>
   17508:	push	{r0, r1, lr}
   1750c:	bl	172e8 <__assert_fail@plt+0x61fc>
   17510:	pop	{r1, r2, lr}
   17514:	mul	r3, r2, r0
   17518:	sub	r1, r1, r3
   1751c:	bx	lr
   17520:	cmp	r3, #0
   17524:	cmpeq	r2, #0
   17528:	bne	17540 <__assert_fail@plt+0x6454>
   1752c:	cmp	r1, #0
   17530:	cmpeq	r0, #0
   17534:	mvnne	r1, #0
   17538:	mvnne	r0, #0
   1753c:	b	1755c <__assert_fail@plt+0x6470>
   17540:	sub	sp, sp, #8
   17544:	push	{sp, lr}
   17548:	bl	1756c <__assert_fail@plt+0x6480>
   1754c:	ldr	lr, [sp, #4]
   17550:	add	sp, sp, #8
   17554:	pop	{r2, r3}
   17558:	bx	lr
   1755c:	push	{r1, lr}
   17560:	mov	r0, #8
   17564:	bl	10e58 <raise@plt>
   17568:	pop	{r1, pc}
   1756c:	cmp	r1, r3
   17570:	push	{r4, r5, r6, r7, r8, r9, lr}
   17574:	cmpeq	r0, r2
   17578:	mov	r4, r0
   1757c:	mov	r5, r1
   17580:	ldr	r9, [sp, #28]
   17584:	movcc	r0, #0
   17588:	movcc	r1, #0
   1758c:	bcc	17684 <__assert_fail@plt+0x6598>
   17590:	cmp	r3, #0
   17594:	clzeq	ip, r2
   17598:	clzne	ip, r3
   1759c:	addeq	ip, ip, #32
   175a0:	cmp	r5, #0
   175a4:	clzeq	r1, r4
   175a8:	addeq	r1, r1, #32
   175ac:	clzne	r1, r5
   175b0:	sub	ip, ip, r1
   175b4:	sub	lr, ip, #32
   175b8:	lsl	r7, r3, ip
   175bc:	rsb	r8, ip, #32
   175c0:	orr	r7, r7, r2, lsl lr
   175c4:	orr	r7, r7, r2, lsr r8
   175c8:	lsl	r6, r2, ip
   175cc:	cmp	r5, r7
   175d0:	cmpeq	r4, r6
   175d4:	movcc	r0, #0
   175d8:	movcc	r1, #0
   175dc:	bcc	175f8 <__assert_fail@plt+0x650c>
   175e0:	mov	r3, #1
   175e4:	subs	r4, r4, r6
   175e8:	lsl	r1, r3, lr
   175ec:	lsl	r0, r3, ip
   175f0:	orr	r1, r1, r3, lsr r8
   175f4:	sbc	r5, r5, r7
   175f8:	cmp	ip, #0
   175fc:	beq	17684 <__assert_fail@plt+0x6598>
   17600:	lsrs	r3, r7, #1
   17604:	rrx	r2, r6
   17608:	mov	r6, ip
   1760c:	b	17630 <__assert_fail@plt+0x6544>
   17610:	subs	r4, r4, r2
   17614:	sbc	r5, r5, r3
   17618:	adds	r4, r4, r4
   1761c:	adc	r5, r5, r5
   17620:	adds	r4, r4, #1
   17624:	adc	r5, r5, #0
   17628:	subs	r6, r6, #1
   1762c:	beq	1764c <__assert_fail@plt+0x6560>
   17630:	cmp	r5, r3
   17634:	cmpeq	r4, r2
   17638:	bcs	17610 <__assert_fail@plt+0x6524>
   1763c:	adds	r4, r4, r4
   17640:	adc	r5, r5, r5
   17644:	subs	r6, r6, #1
   17648:	bne	17630 <__assert_fail@plt+0x6544>
   1764c:	lsr	r6, r4, ip
   17650:	lsr	r7, r5, ip
   17654:	orr	r6, r6, r5, lsl r8
   17658:	adds	r2, r0, r4
   1765c:	orr	r6, r6, r5, lsr lr
   17660:	adc	r3, r1, r5
   17664:	lsl	r1, r7, ip
   17668:	orr	r1, r1, r6, lsl lr
   1766c:	lsl	r0, r6, ip
   17670:	orr	r1, r1, r6, lsr r8
   17674:	subs	r0, r2, r0
   17678:	mov	r4, r6
   1767c:	mov	r5, r7
   17680:	sbc	r1, r3, r1
   17684:	cmp	r9, #0
   17688:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1768c:	strd	r4, [r9]
   17690:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17694:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17698:	mov	r7, r0
   1769c:	ldr	r6, [pc, #72]	; 176ec <__assert_fail@plt+0x6600>
   176a0:	ldr	r5, [pc, #72]	; 176f0 <__assert_fail@plt+0x6604>
   176a4:	add	r6, pc, r6
   176a8:	add	r5, pc, r5
   176ac:	sub	r6, r6, r5
   176b0:	mov	r8, r1
   176b4:	mov	r9, r2
   176b8:	bl	10e14 <fdopen@plt-0x20>
   176bc:	asrs	r6, r6, #2
   176c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   176c4:	mov	r4, #0
   176c8:	add	r4, r4, #1
   176cc:	ldr	r3, [r5], #4
   176d0:	mov	r2, r9
   176d4:	mov	r1, r8
   176d8:	mov	r0, r7
   176dc:	blx	r3
   176e0:	cmp	r6, r4
   176e4:	bne	176c8 <__assert_fail@plt+0x65dc>
   176e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176ec:	andeq	r1, r1, r4, ror #16
   176f0:	andeq	r1, r1, ip, asr r8
   176f4:	bx	lr
   176f8:	ldr	r3, [pc, #12]	; 1770c <__assert_fail@plt+0x6620>
   176fc:	mov	r1, #0
   17700:	add	r3, pc, r3
   17704:	ldr	r2, [r3]
   17708:	b	10ffc <__cxa_atexit@plt>
   1770c:	strdeq	r1, [r1], -r8

Disassembly of section .fini:

00017710 <.fini>:
   17710:	push	{r3, lr}
   17714:	pop	{r3, pc}
