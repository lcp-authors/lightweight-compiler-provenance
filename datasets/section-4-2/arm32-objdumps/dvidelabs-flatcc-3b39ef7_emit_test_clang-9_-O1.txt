
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c4 <.init>:
   123c4:	push	{r3, lr}
   123c8:	bl	124f8 <_start@@Base+0x3c>
   123cc:	pop	{r3, pc}

Disassembly of section .plt:

000123d0 <printf@plt-0x14>:
   123d0:	push	{lr}		; (str lr, [sp, #-4]!)
   123d4:	ldr	lr, [pc, #4]	; 123e0 <printf@plt-0x4>
   123d8:	add	lr, pc, lr
   123dc:	ldr	pc, [lr, #8]!
   123e0:	andeq	r6, r1, r0, lsr #24

000123e4 <printf@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #90112	; 0x16000
   123ec:	ldr	pc, [ip, #3104]!	; 0xc20

000123f0 <free@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #90112	; 0x16000
   123f8:	ldr	pc, [ip, #3096]!	; 0xc18

000123fc <memcpy@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #90112	; 0x16000
   12404:	ldr	pc, [ip, #3088]!	; 0xc10

00012408 <realloc@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #90112	; 0x16000
   12410:	ldr	pc, [ip, #3080]!	; 0xc08

00012414 <fwrite@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #90112	; 0x16000
   1241c:	ldr	pc, [ip, #3072]!	; 0xc00

00012420 <puts@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #90112	; 0x16000
   12428:	ldr	pc, [ip, #3064]!	; 0xbf8

0001242c <malloc@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #90112	; 0x16000
   12434:	ldr	pc, [ip, #3056]!	; 0xbf0

00012438 <__libc_start_main@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #90112	; 0x16000
   12440:	ldr	pc, [ip, #3048]!	; 0xbe8

00012444 <__gmon_start__@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #90112	; 0x16000
   1244c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012450 <bcmp@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #90112	; 0x16000
   12458:	ldr	pc, [ip, #3032]!	; 0xbd8

0001245c <strlen@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #90112	; 0x16000
   12464:	ldr	pc, [ip, #3024]!	; 0xbd0

00012468 <fprintf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #90112	; 0x16000
   12470:	ldr	pc, [ip, #3016]!	; 0xbc8

00012474 <posix_memalign@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #90112	; 0x16000
   1247c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012480 <memset@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #90112	; 0x16000
   12488:	ldr	pc, [ip, #3000]!	; 0xbb8

0001248c <memchr@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #90112	; 0x16000
   12494:	ldr	pc, [ip, #2992]!	; 0xbb0

00012498 <fputc@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #90112	; 0x16000
   124a0:	ldr	pc, [ip, #2984]!	; 0xba8

000124a4 <abort@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #90112	; 0x16000
   124ac:	ldr	pc, [ip, #2976]!	; 0xba0

000124b0 <__assert_fail@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #90112	; 0x16000
   124b8:	ldr	pc, [ip, #2968]!	; 0xb98

Disassembly of section .text:

000124bc <_start@@Base>:
   124bc:	mov	fp, #0
   124c0:	mov	lr, #0
   124c4:	pop	{r1}		; (ldr r1, [sp], #4)
   124c8:	mov	r2, sp
   124cc:	push	{r2}		; (str r2, [sp, #-4]!)
   124d0:	push	{r0}		; (str r0, [sp, #-4]!)
   124d4:	ldr	ip, [pc, #16]	; 124ec <_start@@Base+0x30>
   124d8:	push	{ip}		; (str ip, [sp, #-4]!)
   124dc:	ldr	r0, [pc, #12]	; 124f0 <_start@@Base+0x34>
   124e0:	ldr	r3, [pc, #12]	; 124f4 <_start@@Base+0x38>
   124e4:	bl	12438 <__libc_start_main@plt>
   124e8:	bl	124a4 <abort@plt>
   124ec:	andeq	r6, r1, r4, ror r9
   124f0:	strdeq	r2, [r1], -r4
   124f4:	andeq	r6, r1, r4, lsl r9
   124f8:	ldr	r3, [pc, #20]	; 12514 <_start@@Base+0x58>
   124fc:	ldr	r2, [pc, #20]	; 12518 <_start@@Base+0x5c>
   12500:	add	r3, pc, r3
   12504:	ldr	r2, [r3, r2]
   12508:	cmp	r2, #0
   1250c:	bxeq	lr
   12510:	b	12444 <__gmon_start__@plt>
   12514:	strdeq	r6, [r1], -r8
   12518:	andeq	r0, r0, r4, asr r0
   1251c:	ldr	r0, [pc, #24]	; 1253c <_start@@Base+0x80>
   12520:	ldr	r3, [pc, #24]	; 12540 <_start@@Base+0x84>
   12524:	cmp	r3, r0
   12528:	bxeq	lr
   1252c:	ldr	r3, [pc, #16]	; 12544 <_start@@Base+0x88>
   12530:	cmp	r3, #0
   12534:	bxeq	lr
   12538:	bx	r3
   1253c:	andeq	r9, r2, r0, rrx
   12540:	andeq	r9, r2, r0, rrx
   12544:	andeq	r0, r0, r0
   12548:	ldr	r0, [pc, #36]	; 12574 <_start@@Base+0xb8>
   1254c:	ldr	r1, [pc, #36]	; 12578 <_start@@Base+0xbc>
   12550:	sub	r1, r1, r0
   12554:	asr	r1, r1, #2
   12558:	add	r1, r1, r1, lsr #31
   1255c:	asrs	r1, r1, #1
   12560:	bxeq	lr
   12564:	ldr	r3, [pc, #16]	; 1257c <_start@@Base+0xc0>
   12568:	cmp	r3, #0
   1256c:	bxeq	lr
   12570:	bx	r3
   12574:	andeq	r9, r2, r0, rrx
   12578:	andeq	r9, r2, r0, rrx
   1257c:	andeq	r0, r0, r0
   12580:	push	{r4, lr}
   12584:	ldr	r4, [pc, #24]	; 125a4 <_start@@Base+0xe8>
   12588:	ldrb	r3, [r4]
   1258c:	cmp	r3, #0
   12590:	popne	{r4, pc}
   12594:	bl	1251c <_start@@Base+0x60>
   12598:	mov	r3, #1
   1259c:	strb	r3, [r4]
   125a0:	pop	{r4, pc}
   125a4:	andeq	r9, r2, r4, rrx
   125a8:	b	12548 <_start@@Base+0x8c>

000125ac <dbg_emitter@@Base>:
   125ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125b0:	add	fp, sp, #24
   125b4:	mov	r4, r3
   125b8:	mov	r5, r2
   125bc:	mov	r6, r1
   125c0:	ldr	r3, [fp, #8]
   125c4:	movw	r0, #27012	; 0x6984
   125c8:	movt	r0, #1
   125cc:	mov	r1, r2
   125d0:	mov	r2, r4
   125d4:	bl	123e4 <printf@plt>
   125d8:	cmp	r5, #1
   125dc:	blt	12658 <dbg_emitter@@Base+0xac>
   125e0:	add	r6, r6, #4
   125e4:	movw	r7, #28160	; 0x6e00
   125e8:	movt	r7, #1
   125ec:	movw	r8, #27061	; 0x69b5
   125f0:	movt	r8, #1
   125f4:	movw	r9, #27094	; 0x69d6
   125f8:	movt	r9, #1
   125fc:	b	12610 <dbg_emitter@@Base+0x64>
   12600:	ldr	r0, [r6], #8
   12604:	add	r4, r0, r4
   12608:	subs	r5, r5, #1
   1260c:	beq	12658 <dbg_emitter@@Base+0xac>
   12610:	ldr	r0, [r6, #-4]
   12614:	cmp	r0, r7
   12618:	beq	12628 <dbg_emitter@@Base+0x7c>
   1261c:	cmp	r0, #0
   12620:	bne	12600 <dbg_emitter@@Base+0x54>
   12624:	b	12644 <dbg_emitter@@Base+0x98>
   12628:	ldr	r2, [r6]
   1262c:	mov	r0, r8
   12630:	mov	r1, r4
   12634:	bl	123e4 <printf@plt>
   12638:	ldr	r0, [r6, #-4]
   1263c:	cmp	r0, #0
   12640:	bne	12600 <dbg_emitter@@Base+0x54>
   12644:	ldr	r2, [r6]
   12648:	mov	r0, r9
   1264c:	mov	r1, r4
   12650:	bl	123e4 <printf@plt>
   12654:	b	12600 <dbg_emitter@@Base+0x54>
   12658:	mov	r0, #0
   1265c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012660 <debug_test@@Base>:
   12660:	push	{r4, r5, r6, r7, fp, lr}
   12664:	add	fp, sp, #16
   12668:	sub	sp, sp, #280	; 0x118
   1266c:	vmov.i32	q8, #0	; 0x00000000
   12670:	add	r4, sp, #8
   12674:	add	r0, r4, #16
   12678:	vst1.64	{d16-d17}, [r0]
   1267c:	mov	r0, #36	; 0x24
   12680:	mov	r1, r4
   12684:	vst1.64	{d16-d17}, [r1], r0
   12688:	mov	r5, #0
   1268c:	str	r5, [r1]
   12690:	str	r5, [sp, #40]	; 0x28
   12694:	movw	r0, #28000	; 0x6d60
   12698:	movt	r0, #1
   1269c:	bl	12420 <puts@plt>
   126a0:	str	r5, [sp]
   126a4:	add	r5, sp, #48	; 0x30
   126a8:	movw	r1, #9644	; 0x25ac
   126ac:	movt	r1, #1
   126b0:	mov	r0, r5
   126b4:	mov	r2, #0
   126b8:	mov	r3, #0
   126bc:	bl	1304c <flatcc_builder_custom_init@@Base>
   126c0:	mov	r0, r5
   126c4:	mov	r1, r4
   126c8:	mov	r2, #10
   126cc:	bl	12728 <debug_test@@Base+0xc8>
   126d0:	mov	r1, r0
   126d4:	mov	r0, r5
   126d8:	bl	126f0 <debug_test@@Base+0x90>
   126dc:	mov	r0, r5
   126e0:	bl	1323c <flatcc_builder_clear@@Base>
   126e4:	mov	r0, #0
   126e8:	sub	sp, fp, #16
   126ec:	pop	{r4, r5, r6, r7, fp, pc}
   126f0:	push	{r4, r5, fp, lr}
   126f4:	add	fp, sp, #8
   126f8:	mov	r5, r1
   126fc:	mov	r4, r0
   12700:	bl	12d08 <main@@Base+0x14>
   12704:	cmp	r0, #0
   12708:	popne	{r4, r5, fp, pc}
   1270c:	mov	r0, r4
   12710:	mov	r1, r5
   12714:	bl	12d1c <main@@Base+0x28>
   12718:	mov	r1, r0
   1271c:	mov	r0, r4
   12720:	pop	{r4, r5, fp, lr}
   12724:	b	12d18 <main@@Base+0x24>
   12728:	push	{fp, lr}
   1272c:	mov	fp, sp
   12730:	sub	sp, sp, #8
   12734:	mvn	ip, #-1073741824	; 0xc0000000
   12738:	mov	r3, #4
   1273c:	stm	sp, {r3, ip}
   12740:	mov	r3, #4
   12744:	bl	14f18 <flatcc_builder_create_vector@@Base>
   12748:	mov	sp, fp
   1274c:	pop	{fp, pc}

00012750 <emit_test@@Base>:
   12750:	push	{r4, r5, r6, sl, fp, lr}
   12754:	add	fp, sp, #16
   12758:	sub	sp, sp, #256	; 0x100
   1275c:	movw	r0, #28144	; 0x6df0
   12760:	movt	r0, #1
   12764:	vld1.64	{d16-d17}, [r0]
   12768:	mov	r4, sp
   1276c:	vst1.64	{d16-d17}, [r4]
   12770:	add	r6, sp, #20
   12774:	mov	r0, r6
   12778:	bl	130b8 <flatcc_builder_init@@Base>
   1277c:	mov	r0, r6
   12780:	bl	16144 <flatcc_builder_get_emit_context@@Base>
   12784:	mov	r5, r0
   12788:	mov	r0, r6
   1278c:	mov	r1, r4
   12790:	mov	r2, #4
   12794:	bl	12728 <debug_test@@Base+0xc8>
   12798:	mov	r1, r0
   1279c:	mov	r0, r6
   127a0:	bl	126f0 <debug_test@@Base+0x90>
   127a4:	sub	r1, fp, #20
   127a8:	mov	r0, r5
   127ac:	bl	129b4 <emit_test@@Base+0x264>
   127b0:	cmp	r0, #0
   127b4:	beq	128a4 <emit_test@@Base+0x154>
   127b8:	mov	r4, r0
   127bc:	ldr	r6, [fp, #-20]	; 0xffffffec
   127c0:	mov	r0, r5
   127c4:	bl	129e4 <emit_test@@Base+0x294>
   127c8:	cmp	r6, r0
   127cc:	bne	128b0 <emit_test@@Base+0x160>
   127d0:	add	r0, sp, #20
   127d4:	bl	15ea0 <flatcc_builder_get_buffer_size@@Base>
   127d8:	cmp	r6, r0
   127dc:	bne	128d0 <emit_test@@Base+0x180>
   127e0:	movw	r5, #36960	; 0x9060
   127e4:	movt	r5, #2
   127e8:	ldr	r0, [r5]
   127ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   127f0:	movw	r1, #27231	; 0x6a5f
   127f4:	movt	r1, #1
   127f8:	bl	12468 <fprintf@plt>
   127fc:	ldr	r2, [r5]
   12800:	ldr	r1, [fp, #-20]	; 0xffffffec
   12804:	mov	r0, r4
   12808:	bl	129ec <emit_test@@Base+0x29c>
   1280c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12810:	cmp	r0, #58	; 0x3a
   12814:	bne	128f0 <emit_test@@Base+0x1a0>
   12818:	movw	r1, #28082	; 0x6db2
   1281c:	movt	r1, #1
   12820:	mov	r0, r4
   12824:	mov	r2, #58	; 0x3a
   12828:	bl	12450 <bcmp@plt>
   1282c:	cmp	r0, #0
   12830:	bne	12910 <emit_test@@Base+0x1c0>
   12834:	mov	r0, r4
   12838:	bl	12b28 <emit_test@@Base+0x3d8>
   1283c:	mov	r4, r0
   12840:	bl	12b4c <emit_test@@Base+0x3fc>
   12844:	eor	r0, r0, #42	; 0x2a
   12848:	orrs	r0, r0, r1
   1284c:	bne	12930 <emit_test@@Base+0x1e0>
   12850:	mov	r0, r4
   12854:	bl	12bc0 <emit_test@@Base+0x470>
   12858:	cmp	r0, #1
   1285c:	bne	12950 <emit_test@@Base+0x200>
   12860:	mov	r0, r4
   12864:	bl	12c34 <emit_test@@Base+0x4e4>
   12868:	bl	12c30 <emit_test@@Base+0x4e0>
   1286c:	cmp	r0, #4
   12870:	bne	12970 <emit_test@@Base+0x220>
   12874:	mov	r0, r4
   12878:	bl	12c34 <emit_test@@Base+0x4e4>
   1287c:	bl	12cb0 <emit_test@@Base+0x560>
   12880:	vldr	s2, [pc, #296]	; 129b0 <emit_test@@Base+0x260>
   12884:	vcmp.f32	s0, s2
   12888:	vmrs	APSR_nzcv, fpscr
   1288c:	bne	12990 <emit_test@@Base+0x240>
   12890:	add	r0, sp, #20
   12894:	bl	1323c <flatcc_builder_clear@@Base>
   12898:	mov	r0, #0
   1289c:	sub	sp, fp, #16
   128a0:	pop	{r4, r5, r6, sl, fp, pc}
   128a4:	mvn	r0, #0
   128a8:	sub	sp, fp, #16
   128ac:	pop	{r4, r5, r6, sl, fp, pc}
   128b0:	movw	r0, #33208	; 0x81b8
   128b4:	movt	r0, #1
   128b8:	movw	r1, #27140	; 0x6a04
   128bc:	movt	r1, #1
   128c0:	movw	r3, #27215	; 0x6a4f
   128c4:	movt	r3, #1
   128c8:	mov	r2, #100	; 0x64
   128cc:	bl	124b0 <__assert_fail@plt>
   128d0:	movw	r0, #33208	; 0x81b8
   128d4:	movt	r0, #1
   128d8:	movw	r1, #27140	; 0x6a04
   128dc:	movt	r1, #1
   128e0:	movw	r3, #27215	; 0x6a4f
   128e4:	movt	r3, #1
   128e8:	mov	r2, #101	; 0x65
   128ec:	bl	124b0 <__assert_fail@plt>
   128f0:	movw	r0, #33208	; 0x81b8
   128f4:	movt	r0, #1
   128f8:	movw	r1, #27140	; 0x6a04
   128fc:	movt	r1, #1
   12900:	movw	r3, #27215	; 0x6a4f
   12904:	movt	r3, #1
   12908:	mov	r2, #106	; 0x6a
   1290c:	bl	124b0 <__assert_fail@plt>
   12910:	movw	r0, #33208	; 0x81b8
   12914:	movt	r0, #1
   12918:	movw	r1, #27140	; 0x6a04
   1291c:	movt	r1, #1
   12920:	movw	r3, #27215	; 0x6a4f
   12924:	movt	r3, #1
   12928:	mov	r2, #108	; 0x6c
   1292c:	bl	124b0 <__assert_fail@plt>
   12930:	movw	r0, #33208	; 0x81b8
   12934:	movt	r0, #1
   12938:	movw	r1, #27140	; 0x6a04
   1293c:	movt	r1, #1
   12940:	movw	r3, #27215	; 0x6a4f
   12944:	movt	r3, #1
   12948:	mov	r2, #112	; 0x70
   1294c:	bl	124b0 <__assert_fail@plt>
   12950:	movw	r0, #33208	; 0x81b8
   12954:	movt	r0, #1
   12958:	movw	r1, #27140	; 0x6a04
   1295c:	movt	r1, #1
   12960:	movw	r3, #27215	; 0x6a4f
   12964:	movt	r3, #1
   12968:	mov	r2, #113	; 0x71
   1296c:	bl	124b0 <__assert_fail@plt>
   12970:	movw	r0, #33208	; 0x81b8
   12974:	movt	r0, #1
   12978:	movw	r1, #27140	; 0x6a04
   1297c:	movt	r1, #1
   12980:	movw	r3, #27215	; 0x6a4f
   12984:	movt	r3, #1
   12988:	mov	r2, #114	; 0x72
   1298c:	bl	124b0 <__assert_fail@plt>
   12990:	movw	r0, #33208	; 0x81b8
   12994:	movt	r0, #1
   12998:	movw	r1, #27140	; 0x6a04
   1299c:	movt	r1, #1
   129a0:	movw	r3, #27215	; 0x6a4f
   129a4:	movt	r3, #1
   129a8:	mov	r2, #115	; 0x73
   129ac:	bl	124b0 <__assert_fail@plt>
   129b0:	svccc	0x0099999a
   129b4:	ldm	r0, {r2, r3}
   129b8:	cmp	r2, r3
   129bc:	beq	129d0 <emit_test@@Base+0x280>
   129c0:	mov	r0, #0
   129c4:	cmp	r1, #0
   129c8:	strne	r0, [r1]
   129cc:	bx	lr
   129d0:	cmp	r1, #0
   129d4:	ldrne	r2, [r0, #24]
   129d8:	strne	r2, [r1]
   129dc:	ldr	r0, [r0, #8]
   129e0:	bx	lr
   129e4:	ldr	r0, [r0, #24]
   129e8:	bx	lr
   129ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f0:	add	fp, sp, #28
   129f4:	sub	sp, sp, #20
   129f8:	mov	r4, r2
   129fc:	mov	r5, r1
   12a00:	mov	r6, r0
   12a04:	movw	r1, #27504	; 0x6b70
   12a08:	movt	r1, #1
   12a0c:	movw	r2, #27248	; 0x6a70
   12a10:	movt	r2, #1
   12a14:	mov	r0, r4
   12a18:	bl	12468 <fprintf@plt>
   12a1c:	cmp	r5, #0
   12a20:	beq	12b0c <emit_test@@Base+0x3bc>
   12a24:	add	r7, sp, #3
   12a28:	movw	sl, #27523	; 0x6b83
   12a2c:	movt	sl, #1
   12a30:	mov	r8, #0
   12a34:	ands	r9, r8, #15
   12a38:	bne	12a9c <emit_test@@Base+0x34c>
   12a3c:	b	12ab4 <emit_test@@Base+0x364>
   12a40:	mov	r0, r4
   12a44:	movw	r1, #27515	; 0x6b7b
   12a48:	movt	r1, #1
   12a4c:	mov	r2, r8
   12a50:	bl	12468 <fprintf@plt>
   12a54:	ldrb	r2, [r6, r8]
   12a58:	mov	r0, r4
   12a5c:	mov	r1, sl
   12a60:	bl	12468 <fprintf@plt>
   12a64:	ldrb	r0, [r6, r8]
   12a68:	sub	r1, r0, #32
   12a6c:	uxtb	r1, r1
   12a70:	cmp	r1, #94	; 0x5e
   12a74:	movwhi	r0, #46	; 0x2e
   12a78:	strb	r0, [r7, r9]
   12a7c:	add	r0, r7, r9
   12a80:	mov	r1, #0
   12a84:	strb	r1, [r0, #1]
   12a88:	add	r8, r8, #1
   12a8c:	cmp	r5, r8
   12a90:	beq	12ad4 <emit_test@@Base+0x384>
   12a94:	ands	r9, r8, #15
   12a98:	beq	12ab4 <emit_test@@Base+0x364>
   12a9c:	tst	r8, #7
   12aa0:	bne	12a54 <emit_test@@Base+0x304>
   12aa4:	mov	r0, #32
   12aa8:	mov	r1, r4
   12aac:	bl	12498 <fputc@plt>
   12ab0:	b	12a54 <emit_test@@Base+0x304>
   12ab4:	cmp	r8, #0
   12ab8:	beq	12a40 <emit_test@@Base+0x2f0>
   12abc:	mov	r0, r4
   12ac0:	movw	r1, #27509	; 0x6b75
   12ac4:	movt	r1, #1
   12ac8:	mov	r2, r7
   12acc:	bl	12468 <fprintf@plt>
   12ad0:	b	12a40 <emit_test@@Base+0x2f0>
   12ad4:	tst	r5, #15
   12ad8:	beq	12b0c <emit_test@@Base+0x3bc>
   12adc:	add	r6, r5, #1
   12ae0:	movw	r5, #27529	; 0x6b89
   12ae4:	movt	r5, #1
   12ae8:	mov	r0, r5
   12aec:	mov	r1, #3
   12af0:	mov	r2, #1
   12af4:	mov	r3, r4
   12af8:	bl	12414 <fwrite@plt>
   12afc:	add	r0, r6, #1
   12b00:	tst	r6, #15
   12b04:	mov	r6, r0
   12b08:	bne	12ae8 <emit_test@@Base+0x398>
   12b0c:	movw	r1, #27509	; 0x6b75
   12b10:	movt	r1, #1
   12b14:	add	r2, sp, #3
   12b18:	mov	r0, r4
   12b1c:	bl	12468 <fprintf@plt>
   12b20:	sub	sp, fp, #28
   12b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b28:	cmp	r0, #0
   12b2c:	moveq	r0, #0
   12b30:	bxeq	lr
   12b34:	push	{r4, sl, fp, lr}
   12b38:	add	fp, sp, #8
   12b3c:	mov	r4, r0
   12b40:	bl	12e9c <main@@Base+0x1a8>
   12b44:	add	r0, r4, r0
   12b48:	pop	{r4, sl, fp, pc}
   12b4c:	push	{r4, r5, fp, lr}
   12b50:	add	fp, sp, #8
   12b54:	cmp	r0, #0
   12b58:	beq	12ba0 <emit_test@@Base+0x450>
   12b5c:	mov	r4, r0
   12b60:	bl	12ea8 <main@@Base+0x1b4>
   12b64:	sub	r5, r4, r0
   12b68:	mov	r0, r5
   12b6c:	bl	12eb0 <main@@Base+0x1bc>
   12b70:	cmp	r0, #6
   12b74:	bcc	12b94 <emit_test@@Base+0x444>
   12b78:	add	r0, r5, #4
   12b7c:	bl	12eb0 <main@@Base+0x1bc>
   12b80:	cmp	r0, #0
   12b84:	beq	12b94 <emit_test@@Base+0x444>
   12b88:	add	r0, r4, r0
   12b8c:	pop	{r4, r5, fp, lr}
   12b90:	b	12eb8 <main@@Base+0x1c4>
   12b94:	mov	r0, #0
   12b98:	mov	r1, #0
   12b9c:	pop	{r4, r5, fp, pc}
   12ba0:	movw	r0, #27533	; 0x6b8d
   12ba4:	movt	r0, #1
   12ba8:	movw	r1, #27571	; 0x6bb3
   12bac:	movt	r1, #1
   12bb0:	movw	r3, #27663	; 0x6c0f
   12bb4:	movt	r3, #1
   12bb8:	mov	r2, #41	; 0x29
   12bbc:	bl	124b0 <__assert_fail@plt>
   12bc0:	push	{r4, r5, fp, lr}
   12bc4:	add	fp, sp, #8
   12bc8:	cmp	r0, #0
   12bcc:	beq	12c10 <emit_test@@Base+0x4c0>
   12bd0:	mov	r4, r0
   12bd4:	bl	12ea8 <main@@Base+0x1b4>
   12bd8:	sub	r5, r4, r0
   12bdc:	mov	r0, r5
   12be0:	bl	12eb0 <main@@Base+0x1bc>
   12be4:	cmp	r0, #8
   12be8:	bcc	12c08 <emit_test@@Base+0x4b8>
   12bec:	add	r0, r5, #6
   12bf0:	bl	12eb0 <main@@Base+0x1bc>
   12bf4:	cmp	r0, #0
   12bf8:	beq	12c08 <emit_test@@Base+0x4b8>
   12bfc:	add	r0, r4, r0
   12c00:	pop	{r4, r5, fp, lr}
   12c04:	b	12ecc <main@@Base+0x1d8>
   12c08:	mov	r0, #0
   12c0c:	pop	{r4, r5, fp, pc}
   12c10:	movw	r0, #27533	; 0x6b8d
   12c14:	movt	r0, #1
   12c18:	movw	r1, #27571	; 0x6bb3
   12c1c:	movt	r1, #1
   12c20:	movw	r3, #27695	; 0x6c2f
   12c24:	movt	r3, #1
   12c28:	mov	r2, #42	; 0x2a
   12c2c:	bl	124b0 <__assert_fail@plt>
   12c30:	b	12ed8 <main@@Base+0x1e4>
   12c34:	push	{r4, r5, r6, sl, fp, lr}
   12c38:	add	fp, sp, #16
   12c3c:	cmp	r0, #0
   12c40:	beq	12c90 <emit_test@@Base+0x540>
   12c44:	mov	r4, r0
   12c48:	bl	12ea8 <main@@Base+0x1b4>
   12c4c:	sub	r6, r4, r0
   12c50:	mov	r0, r6
   12c54:	bl	12eb0 <main@@Base+0x1bc>
   12c58:	mov	r5, #0
   12c5c:	cmp	r0, #10
   12c60:	bcc	12c88 <emit_test@@Base+0x538>
   12c64:	add	r0, r6, #8
   12c68:	bl	12eb0 <main@@Base+0x1bc>
   12c6c:	cmp	r0, #0
   12c70:	beq	12c88 <emit_test@@Base+0x538>
   12c74:	add	r4, r4, r0
   12c78:	mov	r0, r4
   12c7c:	bl	12e9c <main@@Base+0x1a8>
   12c80:	add	r0, r4, r0
   12c84:	add	r5, r0, #4
   12c88:	mov	r0, r5
   12c8c:	pop	{r4, r5, r6, sl, fp, pc}
   12c90:	movw	r0, #27533	; 0x6b8d
   12c94:	movt	r0, #1
   12c98:	movw	r1, #27571	; 0x6bb3
   12c9c:	movt	r1, #1
   12ca0:	movw	r3, #27729	; 0x6c51
   12ca4:	movt	r3, #1
   12ca8:	mov	r2, #43	; 0x2b
   12cac:	bl	124b0 <__assert_fail@plt>
   12cb0:	push	{r4, sl, fp, lr}
   12cb4:	add	fp, sp, #8
   12cb8:	mov	r4, r0
   12cbc:	bl	12ed8 <main@@Base+0x1e4>
   12cc0:	cmp	r0, #2
   12cc4:	bls	12cd4 <emit_test@@Base+0x584>
   12cc8:	add	r0, r4, #8
   12ccc:	pop	{r4, sl, fp, lr}
   12cd0:	b	12eec <main@@Base+0x1f8>
   12cd4:	movw	r0, #27780	; 0x6c84
   12cd8:	movt	r0, #1
   12cdc:	movw	r1, #27835	; 0x6cbb
   12ce0:	movt	r1, #1
   12ce4:	movw	r3, #27936	; 0x6d20
   12ce8:	movt	r3, #1
   12cec:	movw	r2, #403	; 0x193
   12cf0:	bl	124b0 <__assert_fail@plt>

00012cf4 <main@@Base>:
   12cf4:	push	{fp, lr}
   12cf8:	mov	fp, sp
   12cfc:	bl	12660 <debug_test@@Base>
   12d00:	pop	{fp, lr}
   12d04:	b	12750 <emit_test@@Base>
   12d08:	mov	r1, #0
   12d0c:	mov	r2, #0
   12d10:	mov	r3, #0
   12d14:	b	139d4 <flatcc_builder_start_buffer@@Base>
   12d18:	b	13b88 <flatcc_builder_end_buffer@@Base>
   12d1c:	push	{r4, r5, fp, lr}
   12d20:	add	fp, sp, #8
   12d24:	mov	r5, r1
   12d28:	mov	r4, r0
   12d2c:	bl	12d80 <main@@Base+0x8c>
   12d30:	cmp	r0, #0
   12d34:	bne	12d6c <main@@Base+0x78>
   12d38:	mov	r0, r4
   12d3c:	bl	12d88 <main@@Base+0x94>
   12d40:	cmp	r0, #0
   12d44:	bne	12d6c <main@@Base+0x78>
   12d48:	mov	r0, r4
   12d4c:	mov	r1, r5
   12d50:	bl	12dc4 <main@@Base+0xd0>
   12d54:	cmp	r0, #0
   12d58:	bne	12d6c <main@@Base+0x78>
   12d5c:	mov	r0, r4
   12d60:	bl	12df8 <main@@Base+0x104>
   12d64:	cmp	r0, #0
   12d68:	beq	12d74 <main@@Base+0x80>
   12d6c:	mov	r0, #0
   12d70:	pop	{r4, r5, fp, pc}
   12d74:	mov	r0, r4
   12d78:	pop	{r4, r5, fp, lr}
   12d7c:	b	12e2c <main@@Base+0x138>
   12d80:	mov	r1, #3
   12d84:	b	146c0 <flatcc_builder_start_table@@Base>
   12d88:	push	{r4, sl, fp, lr}
   12d8c:	add	fp, sp, #8
   12d90:	mov	r4, #0
   12d94:	mov	r1, #0
   12d98:	mov	r2, #8
   12d9c:	mov	r3, #8
   12da0:	bl	154bc <flatcc_builder_table_add@@Base>
   12da4:	cmp	r0, #0
   12da8:	beq	12db8 <main@@Base+0xc4>
   12dac:	bl	12e7c <main@@Base+0x188>
   12db0:	mov	r0, r4
   12db4:	pop	{r4, sl, fp, pc}
   12db8:	mvn	r4, #0
   12dbc:	mov	r0, r4
   12dc0:	pop	{r4, sl, fp, pc}
   12dc4:	push	{r4, r5, fp, lr}
   12dc8:	add	fp, sp, #8
   12dcc:	mvn	r4, #0
   12dd0:	cmp	r1, #0
   12dd4:	beq	12df0 <main@@Base+0xfc>
   12dd8:	mov	r5, r1
   12ddc:	mov	r1, #2
   12de0:	bl	153f8 <flatcc_builder_table_add_offset@@Base>
   12de4:	cmp	r0, #0
   12de8:	strne	r5, [r0]
   12dec:	movne	r4, #0
   12df0:	mov	r0, r4
   12df4:	pop	{r4, r5, fp, pc}
   12df8:	push	{fp, lr}
   12dfc:	mov	fp, sp
   12e00:	mov	r1, #1
   12e04:	mov	r2, #1
   12e08:	mov	r3, #1
   12e0c:	bl	154bc <flatcc_builder_table_add@@Base>
   12e10:	cmp	r0, #0
   12e14:	beq	12e24 <main@@Base+0x130>
   12e18:	bl	12e90 <main@@Base+0x19c>
   12e1c:	mov	r0, #0
   12e20:	pop	{fp, pc}
   12e24:	mvn	r0, #0
   12e28:	pop	{fp, pc}
   12e2c:	push	{r4, sl, fp, lr}
   12e30:	add	fp, sp, #8
   12e34:	mov	r4, r0
   12e38:	movw	r1, #28142	; 0x6dee
   12e3c:	movt	r1, #1
   12e40:	mov	r2, #0
   12e44:	bl	14d4c <flatcc_builder_check_required@@Base>
   12e48:	cmp	r0, #0
   12e4c:	beq	12e5c <main@@Base+0x168>
   12e50:	mov	r0, r4
   12e54:	pop	{r4, sl, fp, lr}
   12e58:	b	14dcc <flatcc_builder_end_table@@Base>
   12e5c:	movw	r0, #27258	; 0x6a7a
   12e60:	movt	r0, #1
   12e64:	movw	r1, #27366	; 0x6ae6
   12e68:	movt	r1, #1
   12e6c:	movw	r3, #27459	; 0x6b43
   12e70:	movt	r3, #1
   12e74:	mov	r2, #21
   12e78:	bl	124b0 <__assert_fail@plt>
   12e7c:	mov	r1, #0
   12e80:	mov	r2, #42	; 0x2a
   12e84:	str	r2, [r0]
   12e88:	str	r1, [r0, #4]
   12e8c:	bx	lr
   12e90:	mov	r1, #1
   12e94:	strb	r1, [r0]
   12e98:	bx	lr
   12e9c:	ldr	r0, [r0]
   12ea0:	b	12ea4 <main@@Base+0x1b0>
   12ea4:	bx	lr
   12ea8:	ldr	r0, [r0]
   12eac:	b	12ec0 <main@@Base+0x1cc>
   12eb0:	ldrh	r0, [r0]
   12eb4:	b	12ec4 <main@@Base+0x1d0>
   12eb8:	ldrd	r0, [r0]
   12ebc:	b	12ec8 <main@@Base+0x1d4>
   12ec0:	bx	lr
   12ec4:	bx	lr
   12ec8:	bx	lr
   12ecc:	ldrb	r0, [r0]
   12ed0:	b	12ed4 <main@@Base+0x1e0>
   12ed4:	bx	lr
   12ed8:	cmp	r0, #0
   12edc:	moveq	r0, #0
   12ee0:	bxeq	lr
   12ee4:	sub	r0, r0, #4
   12ee8:	b	12e9c <main@@Base+0x1a8>
   12eec:	vldr	s0, [r0]
   12ef0:	b	12ef4 <main@@Base+0x200>
   12ef4:	bx	lr

00012ef8 <flatcc_builder_default_alloc@@Base>:
   12ef8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12efc:	add	fp, sp, #24
   12f00:	mov	r4, r1
   12f04:	cmp	r2, #0
   12f08:	beq	12f50 <flatcc_builder_default_alloc@@Base+0x58>
   12f0c:	mov	r8, r3
   12f10:	ldr	r0, [fp, #8]
   12f14:	sub	r1, r0, #1
   12f18:	cmp	r1, #6
   12f1c:	bhi	12f80 <flatcc_builder_default_alloc@@Base+0x88>
   12f20:	mov	r0, #256	; 0x100
   12f24:	add	r3, pc, #0
   12f28:	ldr	pc, [r3, r1, lsl #2]
   12f2c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12f30:	andeq	r2, r1, r0, lsl #31
   12f34:	andeq	r2, r1, r0, lsl #31
   12f38:	andeq	r2, r1, r8, asr #30
   12f3c:	andeq	r2, r1, r8, lsl #31
   12f40:	andeq	r2, r1, r0, lsl #31
   12f44:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12f48:	mov	r0, #288	; 0x120
   12f4c:	b	12f94 <flatcc_builder_default_alloc@@Base+0x9c>
   12f50:	ldr	r0, [r4]
   12f54:	cmp	r0, #0
   12f58:	beq	12f74 <flatcc_builder_default_alloc@@Base+0x7c>
   12f5c:	bl	123f0 <free@plt>
   12f60:	mov	r6, #0
   12f64:	str	r6, [r4]
   12f68:	str	r6, [r4, #4]
   12f6c:	mov	r0, r6
   12f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f74:	mov	r6, #0
   12f78:	mov	r0, r6
   12f7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f80:	mov	r0, #32
   12f84:	b	12f94 <flatcc_builder_default_alloc@@Base+0x9c>
   12f88:	mov	r0, r2
   12f8c:	b	12f94 <flatcc_builder_default_alloc@@Base+0x9c>
   12f90:	mov	r0, #64	; 0x40
   12f94:	mov	r7, r0
   12f98:	lsl	r0, r0, #1
   12f9c:	cmp	r7, r2
   12fa0:	bcc	12f94 <flatcc_builder_default_alloc@@Base+0x9c>
   12fa4:	ldr	r0, [r4, #4]
   12fa8:	mov	r6, #0
   12fac:	cmp	r0, r2
   12fb0:	lsrcs	r0, r0, #1
   12fb4:	cmpcs	r0, r7
   12fb8:	bcs	12ffc <flatcc_builder_default_alloc@@Base+0x104>
   12fbc:	ldr	r0, [r4]
   12fc0:	mov	r1, r7
   12fc4:	bl	12408 <realloc@plt>
   12fc8:	cmp	r0, #0
   12fcc:	beq	13004 <flatcc_builder_default_alloc@@Base+0x10c>
   12fd0:	mov	r5, r0
   12fd4:	cmp	r8, #0
   12fd8:	beq	12ff8 <flatcc_builder_default_alloc@@Base+0x100>
   12fdc:	ldr	r1, [r4, #4]
   12fe0:	cmp	r7, r1
   12fe4:	bls	12ff8 <flatcc_builder_default_alloc@@Base+0x100>
   12fe8:	add	r0, r5, r1
   12fec:	sub	r2, r7, r1
   12ff0:	mov	r1, #0
   12ff4:	bl	12480 <memset@plt>
   12ff8:	stm	r4, {r5, r7}
   12ffc:	mov	r0, r6
   13000:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13004:	mvn	r6, #0
   13008:	mov	r0, r6
   1300c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013010 <flatcc_builder_flush_vtable_cache@@Base>:
   13010:	push	{r4, r5, fp, lr}
   13014:	add	fp, sp, #8
   13018:	mov	r4, r0
   1301c:	ldr	r0, [r0, #116]	; 0x74
   13020:	cmp	r0, #0
   13024:	popeq	{r4, r5, fp, pc}
   13028:	ldr	r0, [r4, #92]	; 0x5c
   1302c:	ldr	r2, [r4, #96]	; 0x60
   13030:	mov	r5, #0
   13034:	mov	r1, #0
   13038:	bl	12480 <memset@plt>
   1303c:	mov	r0, #16
   13040:	str	r5, [r4, #120]	; 0x78
   13044:	str	r0, [r4, #124]	; 0x7c
   13048:	pop	{r4, r5, fp, pc}

0001304c <flatcc_builder_custom_init@@Base>:
   1304c:	push	{r4, r5, r6, r7, fp, lr}
   13050:	add	fp, sp, #16
   13054:	mov	r5, r3
   13058:	mov	r6, r2
   1305c:	mov	r7, r1
   13060:	mov	r4, r0
   13064:	mov	r1, #0
   13068:	mov	r2, #232	; 0xe8
   1306c:	bl	12480 <memset@plt>
   13070:	ldr	r0, [fp, #8]
   13074:	cmp	r7, #0
   13078:	bne	13090 <flatcc_builder_custom_init@@Base+0x44>
   1307c:	mov	r1, #1
   13080:	str	r1, [r4, #184]	; 0xb8
   13084:	add	r6, r4, #188	; 0xbc
   13088:	movw	r7, #25628	; 0x641c
   1308c:	movt	r7, #1
   13090:	movw	r1, #12024	; 0x2ef8
   13094:	movt	r1, #1
   13098:	cmp	r5, #0
   1309c:	movne	r1, r5
   130a0:	str	r6, [r4, #36]	; 0x24
   130a4:	str	r0, [r4, #40]	; 0x28
   130a8:	str	r7, [r4, #44]	; 0x2c
   130ac:	str	r1, [r4, #48]	; 0x30
   130b0:	mov	r0, #0
   130b4:	pop	{r4, r5, r6, r7, fp, pc}

000130b8 <flatcc_builder_init@@Base>:
   130b8:	push	{fp, lr}
   130bc:	mov	fp, sp
   130c0:	sub	sp, sp, #8
   130c4:	mov	r1, #0
   130c8:	str	r1, [sp]
   130cc:	mov	r1, #0
   130d0:	mov	r2, #0
   130d4:	mov	r3, #0
   130d8:	bl	1304c <flatcc_builder_custom_init@@Base>
   130dc:	mov	r0, #0
   130e0:	mov	sp, fp
   130e4:	pop	{fp, pc}

000130e8 <flatcc_builder_custom_reset@@Base>:
   130e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130ec:	add	fp, sp, #28
   130f0:	sub	sp, sp, #4
   130f4:	mov	r9, r2
   130f8:	mov	r8, r1
   130fc:	mov	sl, r0
   13100:	add	r7, r0, #52	; 0x34
   13104:	mov	r5, #0
   13108:	b	13128 <flatcc_builder_custom_reset@@Base+0x40>
   1310c:	ldr	r0, [r6, #56]	; 0x38
   13110:	cmp	r0, #0
   13114:	bne	13210 <flatcc_builder_custom_reset@@Base+0x128>
   13118:	add	r7, r7, #8
   1311c:	add	r5, r5, #1
   13120:	cmp	r5, #8
   13124:	beq	1317c <flatcc_builder_custom_reset@@Base+0x94>
   13128:	add	r6, sl, r5, lsl #3
   1312c:	ldr	r0, [r6, #52]	; 0x34
   13130:	cmp	r0, #0
   13134:	beq	1310c <flatcc_builder_custom_reset@@Base+0x24>
   13138:	cmp	r9, #0
   1313c:	cmpne	r5, #5
   13140:	beq	13168 <flatcc_builder_custom_reset@@Base+0x80>
   13144:	ldr	r0, [sl, #40]	; 0x28
   13148:	ldr	r4, [sl, #48]	; 0x30
   1314c:	str	r5, [sp]
   13150:	mov	r1, r7
   13154:	mov	r2, #1
   13158:	mov	r3, #1
   1315c:	blx	r4
   13160:	cmp	r0, #0
   13164:	bne	13200 <flatcc_builder_custom_reset@@Base+0x118>
   13168:	ldr	r0, [r6, #52]	; 0x34
   1316c:	ldr	r2, [r6, #56]	; 0x38
   13170:	mov	r1, #0
   13174:	bl	12480 <memset@plt>
   13178:	b	13118 <flatcc_builder_custom_reset@@Base+0x30>
   1317c:	mov	r0, #0
   13180:	str	r0, [sl, #120]	; 0x78
   13184:	ldr	r1, [sl, #124]	; 0x7c
   13188:	cmp	r1, #0
   1318c:	movne	r1, #16
   13190:	strne	r1, [sl, #124]	; 0x7c
   13194:	vmov.i32	q8, #0	; 0x00000000
   13198:	str	r0, [sl, #136]	; 0x88
   1319c:	str	r0, [sl, #140]	; 0x8c
   131a0:	strh	r0, [sl, #128]	; 0x80
   131a4:	str	r0, [sl, #32]
   131a8:	add	r1, sl, #148	; 0x94
   131ac:	vst1.32	{d16-d17}, [r1]
   131b0:	ldr	r1, [sl, #52]	; 0x34
   131b4:	ldr	r2, [sl, #60]	; 0x3c
   131b8:	ldr	r3, [sl, #76]	; 0x4c
   131bc:	str	r2, [sl, #16]
   131c0:	str	r0, [sl, #20]
   131c4:	str	r0, [sl, #24]
   131c8:	str	r3, [sl]
   131cc:	str	r1, [sl, #4]
   131d0:	cmp	r8, #0
   131d4:	movne	r0, #0
   131d8:	strne	r0, [sl, #172]	; 0xac
   131dc:	strne	r0, [sl, #176]	; 0xb0
   131e0:	strne	r0, [sl, #180]	; 0xb4
   131e4:	ldr	r0, [sl, #184]	; 0xb8
   131e8:	mov	r5, #0
   131ec:	cmp	r0, #0
   131f0:	beq	13204 <flatcc_builder_custom_reset@@Base+0x11c>
   131f4:	add	r0, sl, #188	; 0xbc
   131f8:	bl	162f8 <flatcc_emitter_reset@@Base>
   131fc:	b	13204 <flatcc_builder_custom_reset@@Base+0x11c>
   13200:	mvn	r5, #0
   13204:	mov	r0, r5
   13208:	sub	sp, fp, #28
   1320c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13210:	movw	r0, #28672	; 0x7000
   13214:	movt	r0, #1
   13218:	movw	r1, #28690	; 0x7012
   1321c:	movt	r1, #1
   13220:	movw	r3, #28760	; 0x7058
   13224:	movt	r3, #1
   13228:	movw	r2, #434	; 0x1b2
   1322c:	bl	124b0 <__assert_fail@plt>

00013230 <flatcc_builder_reset@@Base>:
   13230:	mov	r1, #0
   13234:	mov	r2, #0
   13238:	b	130e8 <flatcc_builder_custom_reset@@Base>

0001323c <flatcc_builder_clear@@Base>:
   1323c:	push	{r4, r5, r6, r7, fp, lr}
   13240:	add	fp, sp, #16
   13244:	sub	sp, sp, #8
   13248:	mov	r7, r0
   1324c:	add	r5, r0, #52	; 0x34
   13250:	mov	r6, #0
   13254:	ldr	r0, [r7, #40]	; 0x28
   13258:	ldr	r4, [r7, #48]	; 0x30
   1325c:	str	r6, [sp]
   13260:	mov	r1, r5
   13264:	mov	r2, #0
   13268:	mov	r3, #0
   1326c:	blx	r4
   13270:	add	r5, r5, #8
   13274:	add	r6, r6, #1
   13278:	cmp	r6, #8
   1327c:	bne	13254 <flatcc_builder_clear@@Base+0x18>
   13280:	ldr	r0, [r7, #184]	; 0xb8
   13284:	cmp	r0, #0
   13288:	beq	13294 <flatcc_builder_clear@@Base+0x58>
   1328c:	add	r0, r7, #188	; 0xbc
   13290:	bl	163b8 <flatcc_emitter_clear@@Base>
   13294:	mov	r0, r7
   13298:	mov	r1, #0
   1329c:	mov	r2, #232	; 0xe8
   132a0:	sub	sp, fp, #16
   132a4:	pop	{r4, r5, r6, r7, fp, lr}
   132a8:	b	12480 <memset@plt>

000132ac <flatcc_builder_enter_user_frame_ptr@@Base>:
   132ac:	push	{r4, r5, r6, r7, fp, lr}
   132b0:	add	fp, sp, #16
   132b4:	sub	sp, sp, #8
   132b8:	mov	r4, r0
   132bc:	ldr	r2, [r0, #228]	; 0xe4
   132c0:	mov	r7, #0
   132c4:	str	r7, [sp]
   132c8:	add	r0, r1, #7
   132cc:	bic	r5, r0, #3
   132d0:	mov	r0, r4
   132d4:	mov	r1, #7
   132d8:	mov	r3, r5
   132dc:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   132e0:	cmp	r0, #0
   132e4:	beq	13318 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   132e8:	mov	r6, r0
   132ec:	mov	r1, #0
   132f0:	mov	r2, r5
   132f4:	bl	12480 <memset@plt>
   132f8:	ldr	r0, [r4, #224]	; 0xe0
   132fc:	str	r0, [r6], #4
   13300:	ldr	r0, [r4, #228]	; 0xe4
   13304:	add	r1, r0, #4
   13308:	add	r0, r0, r5
   1330c:	str	r1, [r4, #224]	; 0xe0
   13310:	str	r0, [r4, #228]	; 0xe4
   13314:	mov	r7, r6
   13318:	mov	r0, r7
   1331c:	sub	sp, fp, #16
   13320:	pop	{r4, r5, r6, r7, fp, pc}
   13324:	push	{r4, r5, fp, lr}
   13328:	add	fp, sp, #8
   1332c:	sub	sp, sp, #8
   13330:	mov	r4, r2
   13334:	add	r2, r3, r2
   13338:	add	r3, r0, r1, lsl #3
   1333c:	add	r5, r3, #52	; 0x34
   13340:	ldr	r3, [r3, #56]	; 0x38
   13344:	cmp	r2, r3
   13348:	bls	13370 <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   1334c:	ldr	r3, [fp, #8]
   13350:	ldr	ip, [r0, #40]	; 0x28
   13354:	ldr	lr, [r0, #48]	; 0x30
   13358:	str	r1, [sp]
   1335c:	mov	r0, ip
   13360:	mov	r1, r5
   13364:	blx	lr
   13368:	cmp	r0, #0
   1336c:	bne	13380 <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   13370:	ldr	r0, [r5]
   13374:	add	r0, r0, r4
   13378:	sub	sp, fp, #8
   1337c:	pop	{r4, r5, fp, pc}
   13380:	movw	r0, #33208	; 0x81b8
   13384:	movt	r0, #1
   13388:	movw	r1, #28690	; 0x7012
   1338c:	movt	r1, #1
   13390:	movw	r3, #32754	; 0x7ff2
   13394:	movt	r3, #1
   13398:	mov	r2, #308	; 0x134
   1339c:	bl	124b0 <__assert_fail@plt>

000133a0 <flatcc_builder_enter_user_frame@@Base>:
   133a0:	push	{r4, r5, r6, r7, fp, lr}
   133a4:	add	fp, sp, #16
   133a8:	sub	sp, sp, #8
   133ac:	mov	r4, r0
   133b0:	ldr	r2, [r0, #228]	; 0xe4
   133b4:	mov	r6, #0
   133b8:	str	r6, [sp]
   133bc:	add	r0, r1, #7
   133c0:	bic	r5, r0, #3
   133c4:	mov	r0, r4
   133c8:	mov	r1, #7
   133cc:	mov	r3, r5
   133d0:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   133d4:	cmp	r0, #0
   133d8:	beq	13408 <flatcc_builder_enter_user_frame@@Base+0x68>
   133dc:	mov	r7, r0
   133e0:	mov	r1, #0
   133e4:	mov	r2, r5
   133e8:	bl	12480 <memset@plt>
   133ec:	ldr	r0, [r4, #224]	; 0xe0
   133f0:	str	r0, [r7]
   133f4:	ldr	r0, [r4, #228]	; 0xe4
   133f8:	add	r6, r0, #4
   133fc:	add	r0, r0, r5
   13400:	str	r6, [r4, #224]	; 0xe0
   13404:	str	r0, [r4, #228]	; 0xe4
   13408:	mov	r0, r6
   1340c:	sub	sp, fp, #16
   13410:	pop	{r4, r5, r6, r7, fp, pc}

00013414 <flatcc_builder_exit_user_frame@@Base>:
   13414:	push	{fp, lr}
   13418:	mov	fp, sp
   1341c:	ldr	r1, [r0, #224]	; 0xe0
   13420:	cmp	r1, #0
   13424:	subne	r2, r1, #4
   13428:	strne	r2, [r0, #228]	; 0xe4
   1342c:	ldrne	r2, [r0, #108]	; 0x6c
   13430:	addne	r1, r2, r1
   13434:	ldrne	r1, [r1, #-4]
   13438:	strne	r1, [r0, #224]	; 0xe0
   1343c:	movne	r0, r1
   13440:	popne	{fp, pc}
   13444:	movw	r0, #28822	; 0x7096
   13448:	movt	r0, #1
   1344c:	movw	r1, #28690	; 0x7012
   13450:	movt	r1, #1
   13454:	movw	r3, #28847	; 0x70af
   13458:	movt	r3, #1
   1345c:	movw	r2, #542	; 0x21e
   13460:	bl	124b0 <__assert_fail@plt>

00013464 <flatcc_builder_exit_user_frame_at@@Base>:
   13464:	push	{fp, lr}
   13468:	mov	fp, sp
   1346c:	ldr	r2, [r0, #224]	; 0xe0
   13470:	cmp	r2, r1
   13474:	bcc	13484 <flatcc_builder_exit_user_frame_at@@Base+0x20>
   13478:	str	r1, [r0, #224]	; 0xe0
   1347c:	pop	{fp, lr}
   13480:	b	13414 <flatcc_builder_exit_user_frame@@Base>
   13484:	movw	r0, #28905	; 0x70e9
   13488:	movt	r0, #1
   1348c:	movw	r1, #28690	; 0x7012
   13490:	movt	r1, #1
   13494:	movw	r3, #28936	; 0x7108
   13498:	movt	r3, #1
   1349c:	movw	r2, #551	; 0x227
   134a0:	bl	124b0 <__assert_fail@plt>

000134a4 <flatcc_builder_get_current_user_frame@@Base>:
   134a4:	ldr	r0, [r0, #224]	; 0xe0
   134a8:	bx	lr

000134ac <flatcc_builder_get_user_frame_ptr@@Base>:
   134ac:	ldr	r0, [r0, #108]	; 0x6c
   134b0:	add	r0, r0, r1
   134b4:	bx	lr

000134b8 <flatcc_builder_embed_buffer@@Base>:
   134b8:	push	{r4, r5, r6, r7, fp, lr}
   134bc:	add	fp, sp, #16
   134c0:	sub	sp, sp, #80	; 0x50
   134c4:	mov	r5, r3
   134c8:	mov	r6, r2
   134cc:	mov	r2, r1
   134d0:	mov	r4, r0
   134d4:	ldr	r0, [fp, #8]
   134d8:	strh	r0, [fp, #-18]	; 0xffffffee
   134dc:	ldr	r3, [r4, #152]	; 0x98
   134e0:	cmp	r3, #0
   134e4:	movwne	r3, #1
   134e8:	sub	r1, fp, #18
   134ec:	mov	r0, r4
   134f0:	bl	135c4 <flatcc_builder_embed_buffer@@Base+0x10c>
   134f4:	ldr	r0, [fp, #12]
   134f8:	and	r0, r0, #2
   134fc:	add	r1, r5, r0, lsl #1
   13500:	ldrh	r2, [fp, #-18]	; 0xffffffee
   13504:	mov	r0, r4
   13508:	bl	13680 <flatcc_builder_embed_buffer@@Base+0x1c8>
   1350c:	mov	r7, r0
   13510:	add	r0, r0, r5
   13514:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13518:	mov	r1, #0
   1351c:	str	r1, [sp, #4]
   13520:	str	r1, [sp]
   13524:	str	r0, [fp, #-24]	; 0xffffffe8
   13528:	ldr	r0, [r4, #152]	; 0x98
   1352c:	cmp	r0, #0
   13530:	beq	13550 <flatcc_builder_embed_buffer@@Base+0x98>
   13534:	mov	r0, #4
   13538:	str	r0, [sp, #12]
   1353c:	sub	r1, fp, #24
   13540:	str	r1, [sp, #8]
   13544:	str	r0, [sp]
   13548:	mov	r0, #1
   1354c:	str	r0, [sp, #4]
   13550:	cmp	r5, #0
   13554:	beq	1357c <flatcc_builder_embed_buffer@@Base+0xc4>
   13558:	ldm	sp, {r0, r1}
   1355c:	add	r0, r0, r5
   13560:	str	r0, [sp]
   13564:	mov	r0, sp
   13568:	add	r0, r0, r1, lsl #3
   1356c:	str	r6, [r0, #8]
   13570:	str	r5, [r0, #12]
   13574:	add	r0, r1, #1
   13578:	str	r0, [sp, #4]
   1357c:	cmp	r7, #0
   13580:	beq	135b0 <flatcc_builder_embed_buffer@@Base+0xf8>
   13584:	ldm	sp, {r0, r1}
   13588:	add	r0, r0, r7
   1358c:	str	r0, [sp]
   13590:	mov	r0, sp
   13594:	add	r0, r0, r1, lsl #3
   13598:	movw	r2, #28160	; 0x6e00
   1359c:	movt	r2, #1
   135a0:	str	r2, [r0, #8]
   135a4:	str	r7, [r0, #12]
   135a8:	add	r0, r1, #1
   135ac:	str	r0, [sp, #4]
   135b0:	mov	r1, sp
   135b4:	mov	r0, r4
   135b8:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   135bc:	sub	sp, fp, #16
   135c0:	pop	{r4, r5, r6, r7, fp, pc}
   135c4:	push	{r4, r5, r6, r7, fp, lr}
   135c8:	add	fp, sp, #16
   135cc:	sub	sp, sp, #72	; 0x48
   135d0:	mov	r6, r3
   135d4:	mov	r5, r2
   135d8:	mov	r7, r1
   135dc:	mov	r4, r0
   135e0:	cmp	r2, #0
   135e4:	bne	135f4 <flatcc_builder_embed_buffer@@Base+0x13c>
   135e8:	ldrh	r5, [r4, #132]	; 0x84
   135ec:	cmp	r5, #0
   135f0:	movweq	r5, #1
   135f4:	mov	r0, r7
   135f8:	mov	r1, #4
   135fc:	bl	1446c <flatcc_builder_start_vector@@Base+0x80>
   13600:	mov	r0, r7
   13604:	mov	r1, r5
   13608:	bl	1446c <flatcc_builder_start_vector@@Base+0x80>
   1360c:	cmp	r6, #0
   13610:	bne	13658 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13614:	mov	r0, r4
   13618:	mov	r1, r5
   1361c:	bl	1614c <flatcc_builder_get_emit_context@@Base+0x8>
   13620:	cmp	r0, #0
   13624:	beq	13658 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13628:	str	r0, [sp, #12]
   1362c:	movw	r1, #28160	; 0x6e00
   13630:	movt	r1, #1
   13634:	str	r1, [sp, #8]
   13638:	str	r0, [sp]
   1363c:	mov	r0, #1
   13640:	str	r0, [sp, #4]
   13644:	mov	r1, sp
   13648:	mov	r0, r4
   1364c:	bl	147f8 <flatcc_builder_create_vtable@@Base+0x80>
   13650:	cmp	r0, #0
   13654:	beq	13660 <flatcc_builder_embed_buffer@@Base+0x1a8>
   13658:	sub	sp, fp, #16
   1365c:	pop	{r4, r5, r6, r7, fp, pc}
   13660:	movw	r0, #33208	; 0x81b8
   13664:	movt	r0, #1
   13668:	movw	r1, #28690	; 0x7012
   1366c:	movt	r1, #1
   13670:	movw	r3, #32821	; 0x8035
   13674:	movt	r3, #1
   13678:	movw	r2, #702	; 0x2be
   1367c:	bl	124b0 <__assert_fail@plt>
   13680:	ldr	r0, [r0, #136]	; 0x88
   13684:	sub	r0, r0, r1
   13688:	sub	r1, r2, #1
   1368c:	and	r0, r0, r1
   13690:	bx	lr
   13694:	bx	lr
   13698:	push	{r4, r5, fp, lr}
   1369c:	add	fp, sp, #8
   136a0:	sub	sp, sp, #8
   136a4:	ldr	r3, [r1]
   136a8:	cmp	r3, #0
   136ac:	ble	1370c <flatcc_builder_embed_buffer@@Base+0x254>
   136b0:	mov	r4, r0
   136b4:	ldr	r0, [r0, #136]	; 0x88
   136b8:	sub	r5, r0, r3
   136bc:	ldr	r2, [r1, #4]
   136c0:	ldr	r0, [r4, #36]	; 0x24
   136c4:	ldr	ip, [r4, #44]	; 0x2c
   136c8:	str	r3, [sp]
   136cc:	add	r1, r1, #8
   136d0:	mov	r3, r5
   136d4:	blx	ip
   136d8:	cmp	r0, #0
   136dc:	streq	r5, [r4, #136]	; 0x88
   136e0:	moveq	r0, r5
   136e4:	subeq	sp, fp, #8
   136e8:	popeq	{r4, r5, fp, pc}
   136ec:	movw	r0, #33208	; 0x81b8
   136f0:	movt	r0, #1
   136f4:	movw	r1, #28690	; 0x7012
   136f8:	movt	r1, #1
   136fc:	movw	r3, #32887	; 0x8077
   13700:	movt	r3, #1
   13704:	movw	r2, #651	; 0x28b
   13708:	bl	124b0 <__assert_fail@plt>
   1370c:	movw	r0, #33208	; 0x81b8
   13710:	movt	r0, #1
   13714:	movw	r1, #28690	; 0x7012
   13718:	movt	r1, #1
   1371c:	movw	r3, #32887	; 0x8077
   13720:	movt	r3, #1
   13724:	movw	r2, #647	; 0x287
   13728:	bl	124b0 <__assert_fail@plt>

0001372c <flatcc_builder_create_buffer@@Base>:
   1372c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13730:	add	fp, sp, #28
   13734:	sub	sp, sp, #92	; 0x5c
   13738:	mov	r6, r3
   1373c:	mov	r7, r1
   13740:	mov	r4, r0
   13744:	ldr	r0, [fp, #8]
   13748:	strh	r0, [fp, #-30]	; 0xffffffe2
   1374c:	mov	r0, #0
   13750:	str	r0, [sp, #4]
   13754:	ldr	sl, [fp, #12]
   13758:	and	r9, sl, #1
   1375c:	sub	r1, fp, #30
   13760:	mov	r0, r4
   13764:	mov	r3, r9
   13768:	bl	135c4 <flatcc_builder_embed_buffer@@Base+0x10c>
   1376c:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   13770:	mov	r0, r4
   13774:	mov	r1, r5
   13778:	bl	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>
   1377c:	cmp	r7, #0
   13780:	str	r6, [sp]
   13784:	beq	137a0 <flatcc_builder_create_buffer@@Base+0x74>
   13788:	ldr	r7, [r7]
   1378c:	mov	r0, r7
   13790:	bl	13908 <flatcc_builder_create_buffer@@Base+0x1dc>
   13794:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   13798:	str	r7, [sp, #4]
   1379c:	b	137a4 <flatcc_builder_create_buffer@@Base+0x78>
   137a0:	ldr	r7, [sp, #4]
   137a4:	mov	r8, #4
   137a8:	and	r0, r8, sl, lsl #1
   137ac:	cmp	r7, #0
   137b0:	mov	r6, r7
   137b4:	movwne	r6, #1
   137b8:	add	r0, r0, r6, lsl #2
   137bc:	add	r1, r0, #4
   137c0:	mov	r0, r4
   137c4:	mov	r2, r5
   137c8:	bl	13680 <flatcc_builder_embed_buffer@@Base+0x1c8>
   137cc:	mov	r1, #0
   137d0:	str	r1, [sp, #12]
   137d4:	str	r1, [sp, #8]
   137d8:	ands	ip, sl, #3
   137dc:	strne	r8, [sp, #20]
   137e0:	subne	r1, fp, #40	; 0x28
   137e4:	strne	r1, [sp, #16]
   137e8:	strne	r8, [sp, #8]
   137ec:	movne	r1, #1
   137f0:	strne	r1, [sp, #12]
   137f4:	ldr	r1, [sp, #8]
   137f8:	ldr	r3, [sp, #12]
   137fc:	add	r5, r1, #4
   13800:	str	r5, [sp, #8]
   13804:	add	lr, sp, #8
   13808:	add	r1, lr, r3, lsl #3
   1380c:	sub	r2, fp, #36	; 0x24
   13810:	str	r2, [r1, #8]
   13814:	str	r8, [r1, #12]
   13818:	add	r1, r3, #1
   1381c:	str	r1, [sp, #12]
   13820:	cmp	r7, #0
   13824:	beq	1384c <flatcc_builder_create_buffer@@Base+0x120>
   13828:	lsl	r2, r6, #2
   1382c:	add	r5, r5, r2
   13830:	str	r5, [sp, #8]
   13834:	add	r1, lr, r1, lsl #3
   13838:	add	r5, sp, #4
   1383c:	str	r5, [r1, #8]
   13840:	str	r2, [r1, #12]
   13844:	add	r1, r3, #2
   13848:	str	r1, [sp, #12]
   1384c:	cmp	r0, #0
   13850:	beq	13880 <flatcc_builder_create_buffer@@Base+0x154>
   13854:	ldr	r1, [sp, #8]
   13858:	ldr	r2, [sp, #12]
   1385c:	add	r1, r1, r0
   13860:	str	r1, [sp, #8]
   13864:	add	r1, lr, r2, lsl #3
   13868:	movw	r3, #28160	; 0x6e00
   1386c:	movt	r3, #1
   13870:	str	r3, [r1, #8]
   13874:	str	r0, [r1, #12]
   13878:	add	r0, r2, #1
   1387c:	str	r0, [sp, #12]
   13880:	ldr	r0, [r4, #136]	; 0x88
   13884:	ldr	r1, [sp, #8]
   13888:	sub	r5, r0, r1
   1388c:	cmp	ip, #0
   13890:	addne	r5, r5, #4
   13894:	mov	r0, #144	; 0x90
   13898:	cmp	r9, #0
   1389c:	movweq	r0, #140	; 0x8c
   138a0:	ldr	r0, [r4, r0]
   138a4:	sub	r0, r0, r5
   138a8:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   138ac:	str	r0, [fp, #-40]	; 0xffffffd8
   138b0:	ldr	r0, [sp]
   138b4:	sub	r0, r0, r5
   138b8:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   138bc:	str	r0, [fp, #-36]	; 0xffffffdc
   138c0:	add	r1, sp, #8
   138c4:	mov	r0, r4
   138c8:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   138cc:	cmp	r0, #0
   138d0:	subne	sp, fp, #28
   138d4:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138d8:	movw	r0, #33208	; 0x81b8
   138dc:	movt	r0, #1
   138e0:	movw	r1, #28690	; 0x7012
   138e4:	movt	r1, #1
   138e8:	movw	r3, #29005	; 0x714d
   138ec:	movt	r3, #1
   138f0:	mov	r2, #772	; 0x304
   138f4:	bl	124b0 <__assert_fail@plt>
   138f8:	ldrh	r2, [r0, #128]	; 0x80
   138fc:	cmp	r2, r1
   13900:	strhcc	r1, [r0, #128]	; 0x80
   13904:	bx	lr
   13908:	bx	lr

0001390c <flatcc_builder_create_struct@@Base>:
   1390c:	push	{r4, r5, r6, r7, fp, lr}
   13910:	add	fp, sp, #16
   13914:	sub	sp, sp, #72	; 0x48
   13918:	cmp	r3, #0
   1391c:	beq	139b4 <flatcc_builder_create_struct@@Base+0xa8>
   13920:	mov	r7, r3
   13924:	mov	r5, r2
   13928:	mov	r6, r1
   1392c:	mov	r4, r0
   13930:	mov	r1, r3
   13934:	bl	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>
   13938:	mov	r0, r4
   1393c:	mov	r1, r5
   13940:	mov	r2, r7
   13944:	bl	13680 <flatcc_builder_embed_buffer@@Base+0x1c8>
   13948:	mov	r1, #0
   1394c:	str	r1, [sp, #4]
   13950:	str	r1, [sp]
   13954:	cmp	r5, #0
   13958:	strne	r5, [sp, #12]
   1395c:	strne	r6, [sp, #8]
   13960:	strne	r5, [sp]
   13964:	movne	r1, #1
   13968:	strne	r1, [sp, #4]
   1396c:	cmp	r0, #0
   13970:	beq	139a0 <flatcc_builder_create_struct@@Base+0x94>
   13974:	ldm	sp, {r1, r2}
   13978:	add	r1, r1, r0
   1397c:	str	r1, [sp]
   13980:	mov	r1, sp
   13984:	add	r1, r1, r2, lsl #3
   13988:	movw	r3, #28160	; 0x6e00
   1398c:	movt	r3, #1
   13990:	str	r3, [r1, #8]
   13994:	str	r0, [r1, #12]
   13998:	add	r0, r2, #1
   1399c:	str	r0, [sp, #4]
   139a0:	mov	r1, sp
   139a4:	mov	r0, r4
   139a8:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   139ac:	sub	sp, fp, #16
   139b0:	pop	{r4, r5, r6, r7, fp, pc}
   139b4:	movw	r0, #29136	; 0x71d0
   139b8:	movt	r0, #1
   139bc:	movw	r1, #28690	; 0x7012
   139c0:	movt	r1, #1
   139c4:	movw	r3, #29147	; 0x71db
   139c8:	movt	r3, #1
   139cc:	movw	r2, #783	; 0x30f
   139d0:	bl	124b0 <__assert_fail@plt>

000139d4 <flatcc_builder_start_buffer@@Base>:
   139d4:	push	{r4, r5, r6, r7, fp, lr}
   139d8:	add	fp, sp, #16
   139dc:	mov	r6, r3
   139e0:	mov	r7, r2
   139e4:	mov	r5, r1
   139e8:	mov	r4, r0
   139ec:	ldrh	r1, [r0, #128]	; 0x80
   139f0:	bl	13a90 <flatcc_builder_start_buffer@@Base+0xbc>
   139f4:	mov	r1, r0
   139f8:	mvn	r0, #0
   139fc:	cmp	r1, #0
   13a00:	popne	{r4, r5, r6, r7, fp, pc}
   13a04:	mov	r0, #1
   13a08:	strh	r0, [r4, #128]	; 0x80
   13a0c:	ldrh	r1, [r4, #132]	; 0x84
   13a10:	ldr	r2, [r4, #32]
   13a14:	strh	r1, [r2, #34]	; 0x22
   13a18:	strh	r7, [r4, #132]	; 0x84
   13a1c:	ldrh	r1, [r4, #164]	; 0xa4
   13a20:	ldr	r2, [r4, #32]
   13a24:	strh	r1, [r2, #32]
   13a28:	strh	r6, [r4, #164]	; 0xa4
   13a2c:	ldr	r1, [r4, #32]
   13a30:	ldr	r2, [r4, #144]	; 0x90
   13a34:	str	r2, [r1, #20]
   13a38:	ldr	r1, [r4, #32]
   13a3c:	ldr	r2, [r4, #152]	; 0x98
   13a40:	str	r2, [r1, #28]
   13a44:	ldr	r1, [r4, #32]
   13a48:	ldr	r2, [r4, #136]	; 0x88
   13a4c:	ldr	r3, [r4, #148]	; 0x94
   13a50:	ldr	r7, [r4, #168]	; 0xa8
   13a54:	add	r6, r3, #1
   13a58:	str	r2, [r4, #144]	; 0x90
   13a5c:	str	r6, [r4, #148]	; 0x94
   13a60:	str	r3, [r4, #152]	; 0x98
   13a64:	str	r7, [r1, #16]
   13a68:	movw	r1, #28160	; 0x6e00
   13a6c:	movt	r1, #1
   13a70:	cmp	r5, #0
   13a74:	movne	r1, r5
   13a78:	ldr	r1, [r1]
   13a7c:	str	r1, [r4, #168]	; 0xa8
   13a80:	ldr	r1, [r4, #32]
   13a84:	strh	r0, [r1, #14]
   13a88:	mov	r0, #0
   13a8c:	pop	{r4, r5, r6, r7, fp, pc}
   13a90:	push	{r4, r5, r6, sl, fp, lr}
   13a94:	add	fp, sp, #16
   13a98:	sub	sp, sp, #8
   13a9c:	mov	r5, r1
   13aa0:	mov	r4, r0
   13aa4:	ldr	r1, [r0, #156]	; 0x9c
   13aa8:	ldr	r2, [r0, #160]	; 0xa0
   13aac:	add	r0, r1, #1
   13ab0:	str	r0, [r4, #156]	; 0x9c
   13ab4:	cmp	r1, r2
   13ab8:	bge	13acc <flatcc_builder_start_buffer@@Base+0xf8>
   13abc:	ldr	r0, [r4, #32]
   13ac0:	add	r0, r0, #36	; 0x24
   13ac4:	str	r0, [r4, #32]
   13ac8:	b	13b40 <flatcc_builder_start_buffer@@Base+0x16c>
   13acc:	ldr	r2, [r4, #176]	; 0xb0
   13ad0:	mvn	r6, #0
   13ad4:	cmp	r2, #1
   13ad8:	cmpge	r1, r2
   13adc:	bge	13b7c <flatcc_builder_start_buffer@@Base+0x1a8>
   13ae0:	mov	r1, #0
   13ae4:	str	r1, [sp]
   13ae8:	add	r0, r0, r0, lsl #3
   13aec:	mvn	r1, #35	; 0x23
   13af0:	add	r2, r1, r0, lsl #2
   13af4:	mov	r0, r4
   13af8:	mov	r1, #4
   13afc:	mov	r3, #36	; 0x24
   13b00:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13b04:	str	r0, [r4, #32]
   13b08:	cmp	r0, #0
   13b0c:	beq	13b7c <flatcc_builder_start_buffer@@Base+0x1a8>
   13b10:	ldr	r0, [r4, #88]	; 0x58
   13b14:	ldr	r1, [r4, #176]	; 0xb0
   13b18:	movw	r2, #36409	; 0x8e39
   13b1c:	movt	r2, #14563	; 0x38e3
   13b20:	umull	r0, r2, r0, r2
   13b24:	lsr	r0, r2, #3
   13b28:	cmp	r1, r2, lsr #3
   13b2c:	mov	r2, r0
   13b30:	movlt	r2, r1
   13b34:	cmp	r1, #0
   13b38:	movle	r2, r0
   13b3c:	str	r2, [r4, #160]	; 0xa0
   13b40:	ldr	r0, [r4, #20]
   13b44:	ldr	r1, [r4, #32]
   13b48:	str	r0, [r1, #8]
   13b4c:	ldrh	r2, [r4, #130]	; 0x82
   13b50:	strh	r2, [r1, #12]
   13b54:	strh	r5, [r4, #130]	; 0x82
   13b58:	ldr	r2, [r4, #28]
   13b5c:	mvn	r3, #3
   13b60:	stm	r1, {r2, r3}
   13b64:	mov	r6, #0
   13b68:	str	r6, [r4, #20]
   13b6c:	add	r0, r0, r2
   13b70:	add	r0, r0, #7
   13b74:	bic	r0, r0, #7
   13b78:	str	r0, [r4, #28]
   13b7c:	mov	r0, r6
   13b80:	sub	sp, fp, #16
   13b84:	pop	{r4, r5, r6, sl, fp, pc}

00013b88 <flatcc_builder_end_buffer@@Base>:
   13b88:	push	{r4, r5, r6, r7, fp, lr}
   13b8c:	add	fp, sp, #16
   13b90:	sub	sp, sp, #8
   13b94:	mov	r4, r0
   13b98:	ldr	r0, [r0, #32]
   13b9c:	ldrh	r0, [r0, #14]
   13ba0:	cmp	r0, #1
   13ba4:	bne	13c30 <flatcc_builder_end_buffer@@Base+0xa8>
   13ba8:	mov	r5, r1
   13bac:	ldr	r6, [r4, #152]	; 0x98
   13bb0:	ldrh	r7, [r4, #164]	; 0xa4
   13bb4:	ldrh	r1, [r4, #132]	; 0x84
   13bb8:	mov	r0, r4
   13bbc:	bl	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>
   13bc0:	and	r0, r7, #2
   13bc4:	cmp	r6, #0
   13bc8:	orrne	r0, r0, #1
   13bcc:	ldrh	r2, [r4, #132]	; 0x84
   13bd0:	ldrh	r1, [r4, #128]	; 0x80
   13bd4:	str	r1, [sp]
   13bd8:	str	r0, [sp, #4]
   13bdc:	add	r1, r4, #168	; 0xa8
   13be0:	mov	r0, r4
   13be4:	mov	r3, r5
   13be8:	bl	1372c <flatcc_builder_create_buffer@@Base>
   13bec:	mov	r5, r0
   13bf0:	cmp	r0, #0
   13bf4:	beq	13c24 <flatcc_builder_end_buffer@@Base+0x9c>
   13bf8:	ldr	r0, [r4, #32]
   13bfc:	ldr	r1, [r0, #20]
   13c00:	str	r1, [r4, #144]	; 0x90
   13c04:	ldr	r1, [r0, #28]
   13c08:	str	r1, [r4, #152]	; 0x98
   13c0c:	ldr	r1, [r0, #16]
   13c10:	str	r1, [r4, #168]	; 0xa8
   13c14:	ldrh	r0, [r0, #32]
   13c18:	strh	r0, [r4, #164]	; 0xa4
   13c1c:	mov	r0, r4
   13c20:	bl	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   13c24:	mov	r0, r5
   13c28:	sub	sp, fp, #16
   13c2c:	pop	{r4, r5, r6, r7, fp, pc}
   13c30:	movw	r0, #29249	; 0x7241
   13c34:	movt	r0, #1
   13c38:	movw	r1, #28690	; 0x7012
   13c3c:	movt	r1, #1
   13c40:	movw	r3, #29293	; 0x726d
   13c44:	movt	r3, #1
   13c48:	movw	r2, #838	; 0x346
   13c4c:	bl	124b0 <__assert_fail@plt>
   13c50:	push	{r4, sl, fp, lr}
   13c54:	add	fp, sp, #8
   13c58:	mov	r4, r0
   13c5c:	ldr	r0, [r0, #16]
   13c60:	ldr	r2, [r4, #20]
   13c64:	mov	r1, #0
   13c68:	bl	12480 <memset@plt>
   13c6c:	ldr	r0, [r4, #32]
   13c70:	ldr	r1, [r0, #8]
   13c74:	str	r1, [r4, #20]
   13c78:	ldr	r1, [r0]
   13c7c:	str	r1, [r4, #28]
   13c80:	ldr	r1, [r0, #4]
   13c84:	mov	r0, r4
   13c88:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   13c8c:	ldrh	r1, [r4, #130]	; 0x82
   13c90:	mov	r0, r4
   13c94:	bl	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>
   13c98:	ldr	r0, [r4, #32]
   13c9c:	ldr	r1, [r4, #156]	; 0x9c
   13ca0:	ldrh	r2, [r0, #12]
   13ca4:	sub	r0, r0, #36	; 0x24
   13ca8:	str	r0, [r4, #32]
   13cac:	sub	r0, r1, #1
   13cb0:	str	r0, [r4, #156]	; 0x9c
   13cb4:	strh	r2, [r4, #130]	; 0x82
   13cb8:	pop	{r4, sl, fp, pc}

00013cbc <flatcc_builder_start_struct@@Base>:
   13cbc:	push	{r4, r5, fp, lr}
   13cc0:	add	fp, sp, #8
   13cc4:	mov	r4, r1
   13cc8:	mov	r5, r0
   13ccc:	mov	r1, r2
   13cd0:	bl	13a90 <flatcc_builder_start_buffer@@Base+0xbc>
   13cd4:	cmp	r0, #0
   13cd8:	movne	r0, #0
   13cdc:	popne	{r4, r5, fp, pc}
   13ce0:	ldr	r0, [r5, #32]
   13ce4:	mov	r1, #2
   13ce8:	strh	r1, [r0, #14]
   13cec:	mov	r0, r5
   13cf0:	mvn	r1, #3
   13cf4:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   13cf8:	mov	r0, r5
   13cfc:	mov	r1, r4
   13d00:	pop	{r4, r5, fp, lr}
   13d04:	b	13d40 <flatcc_builder_start_struct@@Base+0x84>
   13d08:	push	{fp, lr}
   13d0c:	mov	fp, sp
   13d10:	ldr	r2, [r0, #28]
   13d14:	ldr	ip, [r0, #32]
   13d18:	ldr	r3, [r0, #60]	; 0x3c
   13d1c:	ldr	lr, [r0, #64]	; 0x40
   13d20:	add	r3, r3, r2
   13d24:	str	r3, [r0, #16]
   13d28:	sub	r2, lr, r2
   13d2c:	cmp	r2, r1
   13d30:	movhi	r2, r1
   13d34:	str	r2, [r0, #24]
   13d38:	str	r1, [ip, #4]
   13d3c:	pop	{fp, pc}
   13d40:	push	{r4, r5, fp, lr}
   13d44:	add	fp, sp, #8
   13d48:	mov	r4, r0
   13d4c:	ldr	r5, [r0, #20]
   13d50:	ldr	r2, [r0, #24]
   13d54:	add	r0, r5, r1
   13d58:	str	r0, [r4, #20]
   13d5c:	cmp	r0, r2
   13d60:	bcc	13d84 <flatcc_builder_start_struct@@Base+0xc8>
   13d64:	add	r1, r0, #1
   13d68:	mov	r0, r4
   13d6c:	mvn	r2, #3
   13d70:	bl	1615c <flatcc_builder_get_emit_context@@Base+0x18>
   13d74:	mov	r1, r0
   13d78:	mov	r0, #0
   13d7c:	cmp	r1, #0
   13d80:	popne	{r4, r5, fp, pc}
   13d84:	ldr	r0, [r4, #16]
   13d88:	add	r0, r0, r5
   13d8c:	pop	{r4, r5, fp, pc}

00013d90 <flatcc_builder_struct_edit@@Base>:
   13d90:	ldr	r0, [r0, #16]
   13d94:	bx	lr

00013d98 <flatcc_builder_end_struct@@Base>:
   13d98:	push	{r4, r5, fp, lr}
   13d9c:	add	fp, sp, #8
   13da0:	mov	r4, r0
   13da4:	ldr	r0, [r0, #32]
   13da8:	ldrh	r0, [r0, #14]
   13dac:	cmp	r0, #2
   13db0:	bne	13de0 <flatcc_builder_end_struct@@Base+0x48>
   13db4:	ldrh	r3, [r4, #130]	; 0x82
   13db8:	ldr	r1, [r4, #16]
   13dbc:	ldr	r2, [r4, #20]
   13dc0:	mov	r0, r4
   13dc4:	bl	1390c <flatcc_builder_create_struct@@Base>
   13dc8:	mov	r5, r0
   13dcc:	cmp	r0, #0
   13dd0:	movne	r0, r4
   13dd4:	blne	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   13dd8:	mov	r0, r5
   13ddc:	pop	{r4, r5, fp, pc}
   13de0:	movw	r0, #29382	; 0x72c6
   13de4:	movt	r0, #1
   13de8:	movw	r1, #28690	; 0x7012
   13dec:	movt	r1, #1
   13df0:	movw	r3, #29426	; 0x72f2
   13df4:	movt	r3, #1
   13df8:	mov	r2, #872	; 0x368
   13dfc:	bl	124b0 <__assert_fail@plt>

00013e00 <flatcc_builder_extend_vector@@Base>:
   13e00:	push	{r4, r5, fp, lr}
   13e04:	add	fp, sp, #8
   13e08:	mov	r5, r1
   13e0c:	mov	r4, r0
   13e10:	ldr	r0, [r0, #32]
   13e14:	ldr	r2, [r0, #24]
   13e18:	mov	r0, r4
   13e1c:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   13e20:	cmp	r0, #0
   13e24:	movne	r0, #0
   13e28:	popne	{r4, r5, fp, pc}
   13e2c:	ldr	r0, [r4, #32]
   13e30:	ldr	r0, [r0, #16]
   13e34:	mul	r1, r0, r5
   13e38:	mov	r0, r4
   13e3c:	pop	{r4, r5, fp, lr}
   13e40:	b	13d40 <flatcc_builder_start_struct@@Base+0x84>
   13e44:	push	{fp, lr}
   13e48:	mov	fp, sp
   13e4c:	ldr	r0, [r0, #32]
   13e50:	ldr	r3, [r0, #20]
   13e54:	adds	r1, r3, r1
   13e58:	bcs	13e6c <flatcc_builder_extend_vector@@Base+0x6c>
   13e5c:	cmp	r1, r2
   13e60:	strls	r1, [r0, #20]
   13e64:	movls	r0, #0
   13e68:	popls	{fp, pc}
   13e6c:	movw	r0, #32961	; 0x80c1
   13e70:	movt	r0, #1
   13e74:	movw	r1, #28690	; 0x7012
   13e78:	movt	r1, #1
   13e7c:	movw	r3, #32988	; 0x80dc
   13e80:	movt	r3, #1
   13e84:	mov	r2, #892	; 0x37c
   13e88:	bl	124b0 <__assert_fail@plt>

00013e8c <flatcc_builder_vector_push@@Base>:
   13e8c:	push	{fp, lr}
   13e90:	mov	fp, sp
   13e94:	ldr	r2, [r0, #32]
   13e98:	ldrh	r3, [r2, #14]
   13e9c:	cmp	r3, #4
   13ea0:	bne	13ecc <flatcc_builder_vector_push@@Base+0x40>
   13ea4:	ldr	ip, [r2, #20]
   13ea8:	ldr	r3, [r2, #24]
   13eac:	cmp	ip, r3
   13eb0:	bhi	13eec <flatcc_builder_vector_push@@Base+0x60>
   13eb4:	add	r3, ip, #1
   13eb8:	str	r3, [r2, #20]
   13ebc:	ldr	r2, [r0, #32]
   13ec0:	ldr	r2, [r2, #16]
   13ec4:	pop	{fp, lr}
   13ec8:	b	13f0c <flatcc_builder_vector_push@@Base+0x80>
   13ecc:	movw	r0, #29493	; 0x7335
   13ed0:	movt	r0, #1
   13ed4:	movw	r1, #28690	; 0x7012
   13ed8:	movt	r1, #1
   13edc:	movw	r3, #29537	; 0x7361
   13ee0:	movt	r3, #1
   13ee4:	movw	r2, #907	; 0x38b
   13ee8:	bl	124b0 <__assert_fail@plt>
   13eec:	movw	r0, #29604	; 0x73a4
   13ef0:	movt	r0, #1
   13ef4:	movw	r1, #28690	; 0x7012
   13ef8:	movt	r1, #1
   13efc:	movw	r3, #29537	; 0x7361
   13f00:	movt	r3, #1
   13f04:	mov	r2, #908	; 0x38c
   13f08:	bl	124b0 <__assert_fail@plt>
   13f0c:	push	{r4, r5, r6, sl, fp, lr}
   13f10:	add	fp, sp, #16
   13f14:	mov	r4, r2
   13f18:	mov	r5, r1
   13f1c:	mov	r1, r2
   13f20:	bl	13d40 <flatcc_builder_start_struct@@Base+0x84>
   13f24:	mov	r6, r0
   13f28:	cmp	r0, #0
   13f2c:	beq	13f40 <flatcc_builder_vector_push@@Base+0xb4>
   13f30:	mov	r0, r6
   13f34:	mov	r1, r5
   13f38:	mov	r2, r4
   13f3c:	bl	123fc <memcpy@plt>
   13f40:	mov	r0, r6
   13f44:	pop	{r4, r5, r6, sl, fp, pc}

00013f48 <flatcc_builder_append_vector@@Base>:
   13f48:	push	{r4, r5, r6, sl, fp, lr}
   13f4c:	add	fp, sp, #16
   13f50:	mov	r4, r1
   13f54:	mov	r6, r0
   13f58:	ldr	r0, [r0, #32]
   13f5c:	ldrh	r1, [r0, #14]
   13f60:	cmp	r1, #4
   13f64:	bne	13fa8 <flatcc_builder_append_vector@@Base+0x60>
   13f68:	mov	r5, r2
   13f6c:	ldr	r2, [r0, #24]
   13f70:	mov	r0, r6
   13f74:	mov	r1, r5
   13f78:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   13f7c:	cmp	r0, #0
   13f80:	beq	13f8c <flatcc_builder_append_vector@@Base+0x44>
   13f84:	mov	r0, #0
   13f88:	pop	{r4, r5, r6, sl, fp, pc}
   13f8c:	ldr	r0, [r6, #32]
   13f90:	ldr	r0, [r0, #16]
   13f94:	mul	r2, r0, r5
   13f98:	mov	r0, r6
   13f9c:	mov	r1, r4
   13fa0:	pop	{r4, r5, r6, sl, fp, lr}
   13fa4:	b	13f0c <flatcc_builder_vector_push@@Base+0x80>
   13fa8:	movw	r0, #29493	; 0x7335
   13fac:	movt	r0, #1
   13fb0:	movw	r1, #28690	; 0x7012
   13fb4:	movt	r1, #1
   13fb8:	movw	r3, #29665	; 0x73e1
   13fbc:	movt	r3, #1
   13fc0:	movw	r2, #915	; 0x393
   13fc4:	bl	124b0 <__assert_fail@plt>

00013fc8 <flatcc_builder_extend_offset_vector@@Base>:
   13fc8:	push	{r4, r5, fp, lr}
   13fcc:	add	fp, sp, #8
   13fd0:	mov	r5, r1
   13fd4:	mov	r4, r0
   13fd8:	mvn	r2, #-1073741824	; 0xc0000000
   13fdc:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   13fe0:	cmp	r0, #0
   13fe4:	movne	r0, #0
   13fe8:	popne	{r4, r5, fp, pc}
   13fec:	lsl	r1, r5, #2
   13ff0:	mov	r0, r4
   13ff4:	pop	{r4, r5, fp, lr}
   13ff8:	b	13d40 <flatcc_builder_start_struct@@Base+0x84>

00013ffc <flatcc_builder_offset_vector_push@@Base>:
   13ffc:	push	{r4, r5, fp, lr}
   14000:	add	fp, sp, #8
   14004:	mov	r4, r1
   14008:	ldr	r1, [r0, #32]
   1400c:	ldrh	r2, [r1, #14]
   14010:	cmp	r2, #5
   14014:	bne	1404c <flatcc_builder_offset_vector_push@@Base+0x50>
   14018:	ldr	r2, [r1, #20]
   1401c:	mov	r5, #0
   14020:	cmn	r2, #-1073741823	; 0xc0000001
   14024:	beq	14044 <flatcc_builder_offset_vector_push@@Base+0x48>
   14028:	add	r2, r2, #1
   1402c:	str	r2, [r1, #20]
   14030:	mov	r1, #4
   14034:	bl	13d40 <flatcc_builder_start_struct@@Base+0x84>
   14038:	cmp	r0, #0
   1403c:	strne	r4, [r0]
   14040:	movne	r5, r0
   14044:	mov	r0, r5
   14048:	pop	{r4, r5, fp, pc}
   1404c:	movw	r0, #29742	; 0x742e
   14050:	movt	r0, #1
   14054:	movw	r1, #28690	; 0x7012
   14058:	movt	r1, #1
   1405c:	movw	r3, #29793	; 0x7461
   14060:	movt	r3, #1
   14064:	movw	r2, #934	; 0x3a6
   14068:	bl	124b0 <__assert_fail@plt>

0001406c <flatcc_builder_append_offset_vector@@Base>:
   1406c:	push	{r4, r5, r6, sl, fp, lr}
   14070:	add	fp, sp, #16
   14074:	mov	r6, r0
   14078:	ldr	r0, [r0, #32]
   1407c:	ldrh	r0, [r0, #14]
   14080:	cmp	r0, #5
   14084:	bne	140c4 <flatcc_builder_append_offset_vector@@Base+0x58>
   14088:	mov	r5, r2
   1408c:	mov	r4, r1
   14090:	mov	r0, r6
   14094:	mov	r1, r2
   14098:	mvn	r2, #-1073741824	; 0xc0000000
   1409c:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   140a0:	cmp	r0, #0
   140a4:	beq	140b0 <flatcc_builder_append_offset_vector@@Base+0x44>
   140a8:	mov	r0, #0
   140ac:	pop	{r4, r5, r6, sl, fp, pc}
   140b0:	lsl	r2, r5, #2
   140b4:	mov	r0, r6
   140b8:	mov	r1, r4
   140bc:	pop	{r4, r5, r6, sl, fp, lr}
   140c0:	b	13f0c <flatcc_builder_vector_push@@Base+0x80>
   140c4:	movw	r0, #29742	; 0x742e
   140c8:	movt	r0, #1
   140cc:	movw	r1, #28690	; 0x7012
   140d0:	movt	r1, #1
   140d4:	movw	r3, #29891	; 0x74c3
   140d8:	movt	r3, #1
   140dc:	mov	r2, #948	; 0x3b4
   140e0:	bl	124b0 <__assert_fail@plt>

000140e4 <flatcc_builder_extend_string@@Base>:
   140e4:	push	{r4, r5, fp, lr}
   140e8:	add	fp, sp, #8
   140ec:	mov	r5, r0
   140f0:	ldr	r0, [r0, #32]
   140f4:	ldrh	r0, [r0, #14]
   140f8:	cmp	r0, #6
   140fc:	bne	1412c <flatcc_builder_extend_string@@Base+0x48>
   14100:	mov	r4, r1
   14104:	mov	r0, r5
   14108:	mvn	r2, #0
   1410c:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   14110:	cmp	r0, #0
   14114:	movne	r0, #0
   14118:	popne	{r4, r5, fp, pc}
   1411c:	mov	r0, r5
   14120:	mov	r1, r4
   14124:	pop	{r4, r5, fp, lr}
   14128:	b	13d40 <flatcc_builder_start_struct@@Base+0x84>
   1412c:	movw	r0, #30007	; 0x7537
   14130:	movt	r0, #1
   14134:	movw	r1, #28690	; 0x7012
   14138:	movt	r1, #1
   1413c:	movw	r3, #30051	; 0x7563
   14140:	movt	r3, #1
   14144:	movw	r2, #957	; 0x3bd
   14148:	bl	124b0 <__assert_fail@plt>

0001414c <flatcc_builder_append_string@@Base>:
   1414c:	push	{r4, r5, r6, sl, fp, lr}
   14150:	add	fp, sp, #16
   14154:	mov	r6, r0
   14158:	ldr	r0, [r0, #32]
   1415c:	ldrh	r0, [r0, #14]
   14160:	cmp	r0, #6
   14164:	bne	141a4 <flatcc_builder_append_string@@Base+0x58>
   14168:	mov	r4, r2
   1416c:	mov	r5, r1
   14170:	mov	r0, r6
   14174:	mov	r1, r2
   14178:	mvn	r2, #0
   1417c:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   14180:	cmp	r0, #0
   14184:	beq	14190 <flatcc_builder_append_string@@Base+0x44>
   14188:	mov	r0, #0
   1418c:	pop	{r4, r5, r6, sl, fp, pc}
   14190:	mov	r0, r6
   14194:	mov	r1, r5
   14198:	mov	r2, r4
   1419c:	pop	{r4, r5, r6, sl, fp, lr}
   141a0:	b	13f0c <flatcc_builder_vector_push@@Base+0x80>
   141a4:	movw	r0, #30007	; 0x7537
   141a8:	movt	r0, #1
   141ac:	movw	r1, #28690	; 0x7012
   141b0:	movt	r1, #1
   141b4:	movw	r3, #30114	; 0x75a2
   141b8:	movt	r3, #1
   141bc:	movw	r2, #966	; 0x3c6
   141c0:	bl	124b0 <__assert_fail@plt>

000141c4 <flatcc_builder_append_string_str@@Base>:
   141c4:	push	{r4, r5, fp, lr}
   141c8:	add	fp, sp, #8
   141cc:	mov	r4, r1
   141d0:	mov	r5, r0
   141d4:	mov	r0, r1
   141d8:	bl	1245c <strlen@plt>
   141dc:	mov	r2, r0
   141e0:	mov	r0, r5
   141e4:	mov	r1, r4
   141e8:	pop	{r4, r5, fp, lr}
   141ec:	b	1414c <flatcc_builder_append_string@@Base>

000141f0 <flatcc_builder_append_string_strn@@Base>:
   141f0:	push	{r4, r5, fp, lr}
   141f4:	add	fp, sp, #8
   141f8:	mov	r4, r1
   141fc:	mov	r5, r0
   14200:	mov	r0, r1
   14204:	mov	r1, r2
   14208:	bl	14220 <flatcc_builder_append_string_strn@@Base+0x30>
   1420c:	mov	r2, r0
   14210:	mov	r0, r5
   14214:	mov	r1, r4
   14218:	pop	{r4, r5, fp, lr}
   1421c:	b	1414c <flatcc_builder_append_string@@Base>
   14220:	push	{r4, r5, fp, lr}
   14224:	add	fp, sp, #8
   14228:	mov	r4, r1
   1422c:	mov	r5, r0
   14230:	mov	r1, #0
   14234:	mov	r2, r4
   14238:	bl	1248c <memchr@plt>
   1423c:	cmp	r0, #0
   14240:	subne	r4, r0, r5
   14244:	mov	r0, r4
   14248:	pop	{r4, r5, fp, pc}

0001424c <flatcc_builder_truncate_vector@@Base>:
   1424c:	push	{fp, lr}
   14250:	mov	fp, sp
   14254:	ldr	r2, [r0, #32]
   14258:	ldrh	r3, [r2, #14]
   1425c:	cmp	r3, #4
   14260:	bne	14290 <flatcc_builder_truncate_vector@@Base+0x44>
   14264:	ldr	r3, [r2, #20]
   14268:	cmp	r3, r1
   1426c:	bcc	142b0 <flatcc_builder_truncate_vector@@Base+0x64>
   14270:	sub	r3, r3, r1
   14274:	str	r3, [r2, #20]
   14278:	ldr	r2, [r0, #32]
   1427c:	ldr	r2, [r2, #16]
   14280:	mul	r1, r2, r1
   14284:	bl	142d0 <flatcc_builder_truncate_vector@@Base+0x84>
   14288:	mov	r0, #0
   1428c:	pop	{fp, pc}
   14290:	movw	r0, #29493	; 0x7335
   14294:	movt	r0, #1
   14298:	movw	r1, #28690	; 0x7012
   1429c:	movt	r1, #1
   142a0:	movw	r3, #30191	; 0x75ef
   142a4:	movt	r3, #1
   142a8:	movw	r2, #985	; 0x3d9
   142ac:	bl	124b0 <__assert_fail@plt>
   142b0:	movw	r0, #30254	; 0x762e
   142b4:	movt	r0, #1
   142b8:	movw	r1, #28690	; 0x7012
   142bc:	movt	r1, #1
   142c0:	movw	r3, #30191	; 0x75ef
   142c4:	movt	r3, #1
   142c8:	movw	r2, #986	; 0x3da
   142cc:	bl	124b0 <__assert_fail@plt>
   142d0:	mov	r2, r1
   142d4:	ldr	r1, [r0, #16]
   142d8:	ldr	r3, [r0, #20]
   142dc:	sub	r3, r3, r2
   142e0:	str	r3, [r0, #20]
   142e4:	add	r0, r1, r3
   142e8:	mov	r1, #0
   142ec:	b	12480 <memset@plt>

000142f0 <flatcc_builder_truncate_offset_vector@@Base>:
   142f0:	push	{fp, lr}
   142f4:	mov	fp, sp
   142f8:	ldr	r2, [r0, #32]
   142fc:	ldrh	r3, [r2, #14]
   14300:	cmp	r3, #5
   14304:	bne	14334 <flatcc_builder_truncate_offset_vector@@Base+0x44>
   14308:	ldr	r3, [r2, #20]
   1430c:	cmp	r3, r1
   14310:	bcc	14354 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14314:	sub	r3, r3, r1
   14318:	str	r3, [r2, #20]
   1431c:	ldr	r2, [r0, #32]
   14320:	ldr	r2, [r2, #16]
   14324:	mul	r1, r2, r1
   14328:	bl	142d0 <flatcc_builder_truncate_vector@@Base+0x84>
   1432c:	mov	r0, #0
   14330:	pop	{fp, pc}
   14334:	movw	r0, #29742	; 0x742e
   14338:	movt	r0, #1
   1433c:	movw	r1, #28690	; 0x7012
   14340:	movt	r1, #1
   14344:	movw	r3, #30290	; 0x7652
   14348:	movt	r3, #1
   1434c:	movw	r2, #994	; 0x3e2
   14350:	bl	124b0 <__assert_fail@plt>
   14354:	movw	r0, #30360	; 0x7698
   14358:	movt	r0, #1
   1435c:	movw	r1, #28690	; 0x7012
   14360:	movt	r1, #1
   14364:	movw	r3, #30290	; 0x7652
   14368:	movt	r3, #1
   1436c:	movw	r2, #995	; 0x3e3
   14370:	bl	124b0 <__assert_fail@plt>

00014374 <flatcc_builder_truncate_string@@Base>:
   14374:	push	{fp, lr}
   14378:	mov	fp, sp
   1437c:	ldr	r2, [r0, #32]
   14380:	ldrh	r3, [r2, #14]
   14384:	cmp	r3, #6
   14388:	bne	143ac <flatcc_builder_truncate_string@@Base+0x38>
   1438c:	ldr	r3, [r2, #20]
   14390:	cmp	r3, r1
   14394:	bcc	143cc <flatcc_builder_truncate_string@@Base+0x58>
   14398:	sub	r3, r3, r1
   1439c:	str	r3, [r2, #20]
   143a0:	bl	142d0 <flatcc_builder_truncate_vector@@Base+0x84>
   143a4:	mov	r0, #0
   143a8:	pop	{fp, pc}
   143ac:	movw	r0, #30007	; 0x7537
   143b0:	movt	r0, #1
   143b4:	movw	r1, #28690	; 0x7012
   143b8:	movt	r1, #1
   143bc:	movw	r3, #30419	; 0x76d3
   143c0:	movt	r3, #1
   143c4:	movw	r2, #1003	; 0x3eb
   143c8:	bl	124b0 <__assert_fail@plt>
   143cc:	movw	r0, #30482	; 0x7712
   143d0:	movt	r0, #1
   143d4:	movw	r1, #28690	; 0x7012
   143d8:	movt	r1, #1
   143dc:	movw	r3, #30419	; 0x76d3
   143e0:	movt	r3, #1
   143e4:	mov	r2, #1004	; 0x3ec
   143e8:	bl	124b0 <__assert_fail@plt>

000143ec <flatcc_builder_start_vector@@Base>:
   143ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143f0:	add	fp, sp, #24
   143f4:	sub	sp, sp, #8
   143f8:	mov	r5, r3
   143fc:	mov	r6, r1
   14400:	mov	r4, r0
   14404:	strh	r2, [sp, #6]
   14408:	add	r0, sp, #6
   1440c:	mov	r8, #4
   14410:	mov	r1, #4
   14414:	bl	1446c <flatcc_builder_start_vector@@Base+0x80>
   14418:	ldrh	r1, [sp, #6]
   1441c:	mov	r0, r4
   14420:	bl	13a90 <flatcc_builder_start_buffer@@Base+0xbc>
   14424:	mvn	r7, #0
   14428:	cmp	r0, #0
   1442c:	bne	14460 <flatcc_builder_start_vector@@Base+0x74>
   14430:	ldr	r0, [r4, #32]
   14434:	str	r6, [r0, #16]
   14438:	ldr	r0, [r4, #32]
   1443c:	mov	r7, #0
   14440:	str	r7, [r0, #20]
   14444:	ldr	r0, [r4, #32]
   14448:	str	r5, [r0, #24]
   1444c:	ldr	r0, [r4, #32]
   14450:	strh	r8, [r0, #14]
   14454:	mov	r0, r4
   14458:	mvn	r1, #3
   1445c:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   14460:	mov	r0, r7
   14464:	sub	sp, fp, #24
   14468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1446c:	ldrh	r2, [r0]
   14470:	cmp	r2, r1
   14474:	strhcc	r1, [r0]
   14478:	bx	lr

0001447c <flatcc_builder_start_offset_vector@@Base>:
   1447c:	push	{r4, r5, r6, sl, fp, lr}
   14480:	add	fp, sp, #16
   14484:	mov	r4, r0
   14488:	mov	r6, #4
   1448c:	mov	r1, #4
   14490:	bl	13a90 <flatcc_builder_start_buffer@@Base+0xbc>
   14494:	mvn	r5, #0
   14498:	cmp	r0, #0
   1449c:	beq	144a8 <flatcc_builder_start_offset_vector@@Base+0x2c>
   144a0:	mov	r0, r5
   144a4:	pop	{r4, r5, r6, sl, fp, pc}
   144a8:	ldr	r0, [r4, #32]
   144ac:	str	r6, [r0, #16]
   144b0:	ldr	r0, [r4, #32]
   144b4:	mov	r5, #0
   144b8:	str	r5, [r0, #20]
   144bc:	ldr	r0, [r4, #32]
   144c0:	mov	r1, #5
   144c4:	strh	r1, [r0, #14]
   144c8:	mov	r0, r4
   144cc:	mvn	r1, #3
   144d0:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   144d4:	mov	r0, r5
   144d8:	pop	{r4, r5, r6, sl, fp, pc}

000144dc <flatcc_builder_create_offset_vector@@Base>:
   144dc:	push	{r4, r5, r6, sl, fp, lr}
   144e0:	add	fp, sp, #16
   144e4:	mov	r6, r2
   144e8:	mov	r5, r1
   144ec:	mov	r4, r0
   144f0:	bl	1447c <flatcc_builder_start_offset_vector@@Base>
   144f4:	cmp	r0, #0
   144f8:	beq	14504 <flatcc_builder_create_offset_vector@@Base+0x28>
   144fc:	mov	r0, #0
   14500:	pop	{r4, r5, r6, sl, fp, pc}
   14504:	mov	r0, r4
   14508:	mov	r1, r6
   1450c:	bl	13fc8 <flatcc_builder_extend_offset_vector@@Base>
   14510:	cmp	r0, #0
   14514:	beq	144fc <flatcc_builder_create_offset_vector@@Base+0x20>
   14518:	lsl	r2, r6, #2
   1451c:	mov	r1, r5
   14520:	bl	123fc <memcpy@plt>
   14524:	mov	r0, r4
   14528:	pop	{r4, r5, r6, sl, fp, lr}
   1452c:	b	14530 <flatcc_builder_end_offset_vector@@Base>

00014530 <flatcc_builder_end_offset_vector@@Base>:
   14530:	push	{r4, r5, fp, lr}
   14534:	add	fp, sp, #8
   14538:	mov	r4, r0
   1453c:	ldr	r0, [r0, #32]
   14540:	ldrh	r1, [r0, #14]
   14544:	cmp	r1, #5
   14548:	bne	14574 <flatcc_builder_end_offset_vector@@Base+0x44>
   1454c:	ldr	r2, [r0, #20]
   14550:	ldr	r1, [r4, #16]
   14554:	mov	r0, r4
   14558:	bl	150b8 <flatcc_builder_create_offset_vector_direct@@Base>
   1455c:	mov	r5, r0
   14560:	cmp	r0, #0
   14564:	movne	r0, r4
   14568:	blne	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   1456c:	mov	r0, r5
   14570:	pop	{r4, r5, fp, pc}
   14574:	movw	r0, #29742	; 0x742e
   14578:	movt	r0, #1
   1457c:	movw	r1, #28690	; 0x7012
   14580:	movt	r1, #1
   14584:	movw	r3, #31325	; 0x7a5d
   14588:	movt	r3, #1
   1458c:	movw	r2, #1480	; 0x5c8
   14590:	bl	124b0 <__assert_fail@plt>

00014594 <flatcc_builder_start_string@@Base>:
   14594:	push	{r4, r5, r6, sl, fp, lr}
   14598:	add	fp, sp, #16
   1459c:	mov	r4, r0
   145a0:	mov	r6, #1
   145a4:	mov	r1, #1
   145a8:	bl	13a90 <flatcc_builder_start_buffer@@Base+0xbc>
   145ac:	mvn	r5, #0
   145b0:	cmp	r0, #0
   145b4:	beq	145c0 <flatcc_builder_start_string@@Base+0x2c>
   145b8:	mov	r0, r5
   145bc:	pop	{r4, r5, r6, sl, fp, pc}
   145c0:	ldr	r0, [r4, #32]
   145c4:	str	r6, [r0, #16]
   145c8:	ldr	r0, [r4, #32]
   145cc:	mov	r5, #0
   145d0:	str	r5, [r0, #20]
   145d4:	ldr	r0, [r4, #32]
   145d8:	mov	r1, #6
   145dc:	strh	r1, [r0, #14]
   145e0:	mov	r0, r4
   145e4:	mvn	r1, #3
   145e8:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   145ec:	mov	r0, r5
   145f0:	pop	{r4, r5, r6, sl, fp, pc}

000145f4 <flatcc_builder_reserve_table@@Base>:
   145f4:	cmn	r1, #1
   145f8:	ble	14600 <flatcc_builder_reserve_table@@Base+0xc>
   145fc:	b	14628 <flatcc_builder_reserve_table@@Base+0x34>
   14600:	push	{fp, lr}
   14604:	mov	fp, sp
   14608:	movw	r0, #30581	; 0x7775
   1460c:	movt	r0, #1
   14610:	movw	r1, #28690	; 0x7012
   14614:	movt	r1, #1
   14618:	movw	r3, #30516	; 0x7734
   1461c:	movt	r3, #1
   14620:	movw	r2, #1065	; 0x429
   14624:	bl	124b0 <__assert_fail@plt>
   14628:	push	{r4, r5, r6, sl, fp, lr}
   1462c:	add	fp, sp, #16
   14630:	sub	sp, sp, #8
   14634:	mov	r6, r1
   14638:	mov	r4, r0
   1463c:	ldr	r0, [r0, #32]
   14640:	ldrh	r1, [r0, #28]
   14644:	ldr	r0, [r0, #16]
   14648:	mov	r2, #1
   1464c:	str	r2, [sp]
   14650:	mov	r2, #4
   14654:	add	r3, r2, r6, lsl #1
   14658:	add	r2, r0, r1, lsl #1
   1465c:	mov	r5, #0
   14660:	mov	r0, r4
   14664:	mov	r1, #0
   14668:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   1466c:	str	r0, [r4, #4]
   14670:	cmp	r0, #0
   14674:	beq	146b0 <flatcc_builder_reserve_table@@Base+0xbc>
   14678:	lsl	r1, r6, #1
   1467c:	add	r0, r0, #4
   14680:	str	r0, [r4, #4]
   14684:	ldr	r0, [r4, #32]
   14688:	ldr	r2, [r0, #20]
   1468c:	str	r5, [sp]
   14690:	orr	r3, r1, #1
   14694:	mov	r0, r4
   14698:	mov	r1, #3
   1469c:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   146a0:	str	r0, [r4]
   146a4:	cmp	r0, #0
   146a8:	mvneq	r5, #0
   146ac:	b	146b4 <flatcc_builder_reserve_table@@Base+0xc0>
   146b0:	mvn	r5, #0
   146b4:	mov	r0, r5
   146b8:	sub	sp, fp, #16
   146bc:	pop	{r4, r5, r6, sl, fp, pc}

000146c0 <flatcc_builder_start_table@@Base>:
   146c0:	push	{r4, r5, r6, sl, fp, lr}
   146c4:	add	fp, sp, #16
   146c8:	mov	r6, r1
   146cc:	mov	r4, r0
   146d0:	mov	r1, #4
   146d4:	bl	13a90 <flatcc_builder_start_buffer@@Base+0xbc>
   146d8:	mvn	r5, #0
   146dc:	cmp	r0, #0
   146e0:	bne	14758 <flatcc_builder_start_table@@Base+0x98>
   146e4:	ldr	r0, [r4, #4]
   146e8:	ldr	r1, [r4, #32]
   146ec:	ldr	r2, [r4, #52]	; 0x34
   146f0:	sub	r0, r0, r2
   146f4:	str	r0, [r1, #16]
   146f8:	ldr	r0, [r4]
   146fc:	ldr	r1, [r4, #32]
   14700:	ldr	r2, [r4, #76]	; 0x4c
   14704:	sub	r0, r0, r2
   14708:	str	r0, [r1, #20]
   1470c:	ldr	r0, [r4, #12]
   14710:	ldr	r1, [r4, #32]
   14714:	str	r0, [r1, #24]
   14718:	ldr	r0, [r4, #32]
   1471c:	ldrh	r1, [r4, #8]
   14720:	strh	r1, [r0, #28]
   14724:	mov	r0, #0
   14728:	strh	r0, [r4, #8]
   1472c:	movw	r0, #15186	; 0x3b52
   14730:	movt	r0, #12137	; 0x2f69
   14734:	str	r0, [r4, #12]
   14738:	ldr	r0, [r4, #32]
   1473c:	mov	r1, #3
   14740:	strh	r1, [r0, #14]
   14744:	mov	r0, r4
   14748:	mov	r1, r6
   1474c:	bl	14628 <flatcc_builder_reserve_table@@Base+0x34>
   14750:	cmp	r0, #0
   14754:	beq	14760 <flatcc_builder_start_table@@Base+0xa0>
   14758:	mov	r0, r5
   1475c:	pop	{r4, r5, r6, sl, fp, pc}
   14760:	mov	r0, r4
   14764:	movw	r1, #65532	; 0xfffc
   14768:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   1476c:	mov	r5, #0
   14770:	mov	r0, r5
   14774:	pop	{r4, r5, r6, sl, fp, pc}

00014778 <flatcc_builder_create_vtable@@Base>:
   14778:	push	{fp, lr}
   1477c:	mov	fp, sp
   14780:	sub	sp, sp, #72	; 0x48
   14784:	mov	r3, #0
   14788:	str	r3, [sp, #4]
   1478c:	str	r3, [sp]
   14790:	cmp	r2, #0
   14794:	strne	r2, [sp, #12]
   14798:	strne	r1, [sp, #8]
   1479c:	strne	r2, [sp]
   147a0:	movne	r1, #1
   147a4:	strne	r1, [sp, #4]
   147a8:	ldr	r1, [r0, #152]	; 0x98
   147ac:	cmp	r1, #0
   147b0:	bne	147c0 <flatcc_builder_create_vtable@@Base+0x48>
   147b4:	ldr	r1, [r0, #180]	; 0xb4
   147b8:	cmp	r1, #0
   147bc:	beq	147dc <flatcc_builder_create_vtable@@Base+0x64>
   147c0:	mov	r1, sp
   147c4:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   147c8:	cmp	r0, #0
   147cc:	beq	147ec <flatcc_builder_create_vtable@@Base+0x74>
   147d0:	add	r0, r0, #1
   147d4:	mov	sp, fp
   147d8:	pop	{fp, pc}
   147dc:	mov	r1, sp
   147e0:	bl	147f8 <flatcc_builder_create_vtable@@Base+0x80>
   147e4:	cmp	r0, #0
   147e8:	bne	147d4 <flatcc_builder_create_vtable@@Base+0x5c>
   147ec:	mov	r0, #0
   147f0:	mov	sp, fp
   147f4:	pop	{fp, pc}
   147f8:	push	{r4, sl, fp, lr}
   147fc:	add	fp, sp, #8
   14800:	sub	sp, sp, #8
   14804:	ldr	r4, [r0, #140]	; 0x8c
   14808:	ldr	r3, [r1]
   1480c:	add	r2, r3, r4
   14810:	str	r2, [r0, #140]	; 0x8c
   14814:	cmn	r3, #1
   14818:	ble	1486c <flatcc_builder_create_vtable@@Base+0xf4>
   1481c:	ldr	r2, [r1, #4]
   14820:	ldr	ip, [r0, #36]	; 0x24
   14824:	ldr	lr, [r0, #44]	; 0x2c
   14828:	str	r3, [sp]
   1482c:	add	r1, r1, #8
   14830:	mov	r0, ip
   14834:	mov	r3, r4
   14838:	blx	lr
   1483c:	cmp	r0, #0
   14840:	addeq	r0, r4, #1
   14844:	subeq	sp, fp, #8
   14848:	popeq	{r4, sl, fp, pc}
   1484c:	movw	r0, #33208	; 0x81b8
   14850:	movt	r0, #1
   14854:	movw	r1, #28690	; 0x7012
   14858:	movt	r1, #1
   1485c:	movw	r3, #33075	; 0x8133
   14860:	movt	r3, #1
   14864:	movw	r2, #677	; 0x2a5
   14868:	bl	124b0 <__assert_fail@plt>
   1486c:	movw	r0, #33208	; 0x81b8
   14870:	movt	r0, #1
   14874:	movw	r1, #28690	; 0x7012
   14878:	movt	r1, #1
   1487c:	movw	r3, #33075	; 0x8133
   14880:	movt	r3, #1
   14884:	movw	r2, #673	; 0x2a1
   14888:	bl	124b0 <__assert_fail@plt>

0001488c <flatcc_builder_create_cached_vtable@@Base>:
   1488c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14890:	add	fp, sp, #28
   14894:	sub	sp, sp, #20
   14898:	mov	r4, r2
   1489c:	mov	r9, r1
   148a0:	mov	sl, r0
   148a4:	mov	r1, r3
   148a8:	bl	14a84 <flatcc_builder_create_cached_vtable@@Base+0x1f8>
   148ac:	cmp	r0, #0
   148b0:	beq	149d4 <flatcc_builder_create_cached_vtable@@Base+0x148>
   148b4:	mov	r7, r0
   148b8:	ldr	r6, [r0]
   148bc:	mov	r5, #0
   148c0:	cmp	r6, #0
   148c4:	mov	r8, #0
   148c8:	beq	14960 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   148cc:	ldr	r5, [sl, #68]	; 0x44
   148d0:	str	sl, [sp, #16]
   148d4:	ldr	sl, [sl, #100]	; 0x64
   148d8:	mov	r0, #0
   148dc:	str	r7, [sp, #8]
   148e0:	str	r0, [sp, #12]
   148e4:	b	148f8 <flatcc_builder_create_cached_vtable@@Base+0x6c>
   148e8:	ldr	r6, [r8, #12]!
   148ec:	cmp	r6, #0
   148f0:	mov	r7, r8
   148f4:	beq	14950 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   148f8:	add	r8, sl, r6
   148fc:	ldr	r0, [r8, #8]
   14900:	mov	r1, r5
   14904:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   14908:	cmp	r0, r4
   1490c:	bne	148e8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14910:	mov	r0, r9
   14914:	mov	r2, r4
   14918:	bl	12450 <bcmp@plt>
   1491c:	cmp	r0, #0
   14920:	bne	148e8 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   14924:	ldr	r0, [sp, #16]
   14928:	ldr	r0, [r0, #152]	; 0x98
   1492c:	ldr	r1, [r8, #4]
   14930:	cmp	r1, r0
   14934:	beq	14a5c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14938:	mov	r7, r8
   1493c:	ldr	r6, [r7, #12]!
   14940:	cmp	r6, #0
   14944:	mov	r0, r8
   14948:	bne	148e0 <flatcc_builder_create_cached_vtable@@Base+0x54>
   1494c:	b	14954 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14950:	ldr	r8, [sp, #12]
   14954:	ldr	sl, [sp, #16]
   14958:	mov	r5, #0
   1495c:	ldr	r7, [sp, #8]
   14960:	ldr	r2, [sl, #124]	; 0x7c
   14964:	str	r5, [sp]
   14968:	mov	r0, sl
   1496c:	mov	r1, #6
   14970:	mov	r3, #16
   14974:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14978:	cmp	r0, #0
   1497c:	beq	14a48 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14980:	mov	r6, r0
   14984:	ldr	r0, [sl, #124]	; 0x7c
   14988:	ldr	r1, [sl, #152]	; 0x98
   1498c:	add	r2, r0, #16
   14990:	str	r2, [sl, #124]	; 0x7c
   14994:	str	r1, [r6, #4]
   14998:	ldr	r1, [r7]
   1499c:	str	r1, [r6, #12]
   149a0:	str	r0, [r7]
   149a4:	mov	r0, sl
   149a8:	mov	r1, r9
   149ac:	mov	r2, r4
   149b0:	bl	14778 <flatcc_builder_create_vtable@@Base>
   149b4:	str	r0, [r6]
   149b8:	cmp	r0, #0
   149bc:	beq	14a48 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   149c0:	cmp	r8, #0
   149c4:	beq	149dc <flatcc_builder_create_cached_vtable@@Base+0x150>
   149c8:	ldr	r0, [r8, #8]
   149cc:	str	r0, [r6, #8]
   149d0:	b	14a44 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   149d4:	mov	r5, #0
   149d8:	b	14a48 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   149dc:	ldr	r0, [sl, #172]	; 0xac
   149e0:	cmp	r0, #0
   149e4:	beq	14a04 <flatcc_builder_create_cached_vtable@@Base+0x178>
   149e8:	ldr	r1, [sl, #120]	; 0x78
   149ec:	add	r1, r1, r4
   149f0:	cmp	r0, r1
   149f4:	bcs	14a04 <flatcc_builder_create_cached_vtable@@Base+0x178>
   149f8:	mov	r0, sl
   149fc:	bl	13010 <flatcc_builder_flush_vtable_cache@@Base>
   14a00:	b	14a44 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   14a04:	ldr	r2, [sl, #120]	; 0x78
   14a08:	mov	r0, #0
   14a0c:	str	r0, [sp]
   14a10:	mov	r0, sl
   14a14:	mov	r1, #2
   14a18:	mov	r3, r4
   14a1c:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14a20:	cmp	r0, #0
   14a24:	beq	14a54 <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   14a28:	ldr	r1, [sl, #120]	; 0x78
   14a2c:	str	r1, [r6, #8]
   14a30:	add	r1, r1, r4
   14a34:	str	r1, [sl, #120]	; 0x78
   14a38:	mov	r1, r9
   14a3c:	mov	r2, r4
   14a40:	bl	123fc <memcpy@plt>
   14a44:	ldr	r5, [r6]
   14a48:	mov	r0, r5
   14a4c:	sub	sp, fp, #28
   14a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a54:	mvn	r5, #0
   14a58:	b	14a48 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14a5c:	ldr	r1, [sp, #8]
   14a60:	cmp	r7, r1
   14a64:	beq	14a7c <flatcc_builder_create_cached_vtable@@Base+0x1f0>
   14a68:	ldr	r0, [r8, #12]
   14a6c:	str	r0, [r7]
   14a70:	ldr	r0, [r1]
   14a74:	str	r0, [r8, #12]
   14a78:	str	r6, [r1]
   14a7c:	ldr	r5, [r8]
   14a80:	b	14a48 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14a84:	push	{r4, r5, fp, lr}
   14a88:	add	fp, sp, #8
   14a8c:	mov	r4, r1
   14a90:	mov	r5, r0
   14a94:	ldr	r0, [r0, #116]	; 0x74
   14a98:	cmp	r0, #0
   14a9c:	bne	14ab8 <flatcc_builder_create_cached_vtable@@Base+0x22c>
   14aa0:	mov	r0, r5
   14aa4:	bl	161c4 <flatcc_builder_get_emit_context@@Base+0x80>
   14aa8:	mov	r1, r0
   14aac:	mov	r0, #0
   14ab0:	cmp	r1, #0
   14ab4:	popne	{r4, r5, fp, pc}
   14ab8:	ldr	r0, [r5, #92]	; 0x5c
   14abc:	ldr	r1, [r5, #116]	; 0x74
   14ac0:	rsb	r1, r1, #32
   14ac4:	lsr	r1, r4, r1
   14ac8:	add	r0, r0, r1, lsl #2
   14acc:	pop	{r4, r5, fp, pc}

00014ad0 <flatcc_builder_create_table@@Base>:
   14ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad4:	add	fp, sp, #28
   14ad8:	sub	sp, sp, #84	; 0x54
   14adc:	strh	r3, [fp, #-30]	; 0xffffffe2
   14ae0:	ldr	r4, [fp, #12]
   14ae4:	cmn	r4, #1
   14ae8:	ble	14c10 <flatcc_builder_create_table@@Base+0x140>
   14aec:	ldr	r8, [fp, #16]
   14af0:	tst	r8, #1
   14af4:	beq	14c30 <flatcc_builder_create_table@@Base+0x160>
   14af8:	mov	sl, r2
   14afc:	mov	r6, r1
   14b00:	mov	r5, r0
   14b04:	sub	r0, fp, #30
   14b08:	mov	r1, #4
   14b0c:	bl	1446c <flatcc_builder_start_vector@@Base+0x80>
   14b10:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   14b14:	mov	r0, r5
   14b18:	mov	r1, r7
   14b1c:	bl	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>
   14b20:	mov	r0, r5
   14b24:	mov	r1, sl
   14b28:	mov	r2, r7
   14b2c:	bl	13680 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14b30:	mov	r9, r0
   14b34:	add	r0, sl, r0
   14b38:	str	r5, [sp]
   14b3c:	ldr	r1, [r5, #136]	; 0x88
   14b40:	sub	r0, r1, r0
   14b44:	sub	r5, r0, #4
   14b48:	sub	r0, r5, r8
   14b4c:	add	r0, r0, #1
   14b50:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14b54:	str	r0, [fp, #-36]	; 0xffffffdc
   14b58:	cmp	r4, #1
   14b5c:	blt	14b8c <flatcc_builder_create_table@@Base+0xbc>
   14b60:	ldr	r7, [fp, #8]
   14b64:	mvn	r0, #3
   14b68:	sub	r5, r0, r5
   14b6c:	ldrh	r8, [r7], #2
   14b70:	ldr	r0, [r8, r6]
   14b74:	add	r0, r5, r0
   14b78:	sub	r0, r0, r8
   14b7c:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14b80:	str	r0, [r8, r6]
   14b84:	subs	r4, r4, #1
   14b88:	bne	14b6c <flatcc_builder_create_table@@Base+0x9c>
   14b8c:	mov	r1, #4
   14b90:	str	r1, [sp, #16]
   14b94:	sub	r0, fp, #36	; 0x24
   14b98:	str	r0, [sp, #12]
   14b9c:	str	r1, [sp, #4]
   14ba0:	mov	r0, #1
   14ba4:	str	r0, [sp, #8]
   14ba8:	cmp	sl, #0
   14bac:	strne	sl, [sp, #24]
   14bb0:	strne	r6, [sp, #20]
   14bb4:	movne	r0, #2
   14bb8:	strne	r0, [sp, #8]
   14bbc:	addne	r0, sl, #4
   14bc0:	strne	r0, [sp, #4]
   14bc4:	cmp	r9, #0
   14bc8:	ldr	r0, [sp]
   14bcc:	beq	14c00 <flatcc_builder_create_table@@Base+0x130>
   14bd0:	ldr	r2, [sp, #4]
   14bd4:	ldr	r1, [sp, #8]
   14bd8:	add	r2, r2, r9
   14bdc:	str	r2, [sp, #4]
   14be0:	add	r2, sp, #4
   14be4:	add	r3, r2, r1, lsl #3
   14be8:	movw	r2, #28160	; 0x6e00
   14bec:	movt	r2, #1
   14bf0:	str	r2, [r3, #8]
   14bf4:	str	r9, [r3, #12]
   14bf8:	add	r1, r1, #1
   14bfc:	str	r1, [sp, #8]
   14c00:	add	r1, sp, #4
   14c04:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14c08:	sub	sp, fp, #28
   14c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c10:	movw	r0, #30574	; 0x776e
   14c14:	movt	r0, #1
   14c18:	movw	r1, #28690	; 0x7012
   14c1c:	movt	r1, #1
   14c20:	movw	r3, #30592	; 0x7780
   14c24:	movt	r3, #1
   14c28:	movw	r2, #1237	; 0x4d5
   14c2c:	bl	124b0 <__assert_fail@plt>
   14c30:	movw	r0, #30748	; 0x781c
   14c34:	movt	r0, #1
   14c38:	movw	r1, #28690	; 0x7012
   14c3c:	movt	r1, #1
   14c40:	movw	r3, #30592	; 0x7780
   14c44:	movt	r3, #1
   14c48:	movw	r2, #1243	; 0x4db
   14c4c:	bl	124b0 <__assert_fail@plt>

00014c50 <flatcc_builder_check_required_field@@Base>:
   14c50:	push	{fp, lr}
   14c54:	mov	fp, sp
   14c58:	ldr	r2, [r0, #32]
   14c5c:	ldrh	r2, [r2, #14]
   14c60:	cmp	r2, #3
   14c64:	bne	14c94 <flatcc_builder_check_required_field@@Base+0x44>
   14c68:	ldrh	r3, [r0, #8]
   14c6c:	mov	r2, #0
   14c70:	cmp	r3, r1
   14c74:	bls	14c8c <flatcc_builder_check_required_field@@Base+0x3c>
   14c78:	ldr	r0, [r0, #4]
   14c7c:	add	r0, r0, r1, lsl #1
   14c80:	ldrh	r2, [r0]
   14c84:	cmp	r2, #0
   14c88:	movwne	r2, #1
   14c8c:	mov	r0, r2
   14c90:	pop	{fp, pc}
   14c94:	movw	r0, #30759	; 0x7827
   14c98:	movt	r0, #1
   14c9c:	movw	r1, #28690	; 0x7012
   14ca0:	movt	r1, #1
   14ca4:	movw	r3, #30802	; 0x7852
   14ca8:	movt	r3, #1
   14cac:	movw	r2, #1272	; 0x4f8
   14cb0:	bl	124b0 <__assert_fail@plt>

00014cb4 <flatcc_builder_check_union_field@@Base>:
   14cb4:	push	{fp, lr}
   14cb8:	mov	fp, sp
   14cbc:	mov	r2, r0
   14cc0:	ldr	r0, [r0, #32]
   14cc4:	ldrh	r0, [r0, #14]
   14cc8:	cmp	r0, #3
   14ccc:	bne	14d2c <flatcc_builder_check_union_field@@Base+0x78>
   14cd0:	mov	r0, #0
   14cd4:	cmp	r1, #0
   14cd8:	beq	14d18 <flatcc_builder_check_union_field@@Base+0x64>
   14cdc:	ldrh	r3, [r2, #8]
   14ce0:	cmp	r3, r1
   14ce4:	popls	{fp, pc}
   14ce8:	ldr	r0, [r2, #4]
   14cec:	add	r0, r0, r1, lsl #1
   14cf0:	ldrh	r1, [r0, #-2]
   14cf4:	cmp	r1, #0
   14cf8:	beq	14d1c <flatcc_builder_check_union_field@@Base+0x68>
   14cfc:	ldr	r2, [r2, #16]
   14d00:	ldrb	r1, [r2, r1]
   14d04:	ldrh	r0, [r0]
   14d08:	cmp	r1, #0
   14d0c:	beq	14d20 <flatcc_builder_check_union_field@@Base+0x6c>
   14d10:	cmp	r0, #0
   14d14:	movwne	r0, #1
   14d18:	pop	{fp, pc}
   14d1c:	ldrh	r0, [r0]
   14d20:	clz	r0, r0
   14d24:	lsr	r0, r0, #5
   14d28:	pop	{fp, pc}
   14d2c:	movw	r0, #30759	; 0x7827
   14d30:	movt	r0, #1
   14d34:	movw	r1, #28690	; 0x7012
   14d38:	movt	r1, #1
   14d3c:	movw	r3, #30885	; 0x78a5
   14d40:	movt	r3, #1
   14d44:	movw	r2, #1279	; 0x4ff
   14d48:	bl	124b0 <__assert_fail@plt>

00014d4c <flatcc_builder_check_required@@Base>:
   14d4c:	push	{fp, lr}
   14d50:	mov	fp, sp
   14d54:	mov	r3, r0
   14d58:	ldr	r0, [r0, #32]
   14d5c:	ldrh	r0, [r0, #14]
   14d60:	cmp	r0, #3
   14d64:	bne	14dac <flatcc_builder_check_required@@Base+0x60>
   14d68:	ldrh	ip, [r3, #8]
   14d6c:	mov	r0, #0
   14d70:	cmp	ip, r2
   14d74:	poplt	{fp, pc}
   14d78:	cmp	r2, #1
   14d7c:	blt	14da4 <flatcc_builder_check_required@@Base+0x58>
   14d80:	ldr	ip, [r3, #4]
   14d84:	ldrh	r3, [r1]
   14d88:	add	r3, ip, r3, lsl #1
   14d8c:	ldrh	r3, [r3]
   14d90:	cmp	r3, #0
   14d94:	beq	14da8 <flatcc_builder_check_required@@Base+0x5c>
   14d98:	add	r1, r1, #2
   14d9c:	subs	r2, r2, #1
   14da0:	bne	14d84 <flatcc_builder_check_required@@Base+0x38>
   14da4:	mov	r0, #1
   14da8:	pop	{fp, pc}
   14dac:	movw	r0, #30759	; 0x7827
   14db0:	movt	r0, #1
   14db4:	movw	r1, #28690	; 0x7012
   14db8:	movt	r1, #1
   14dbc:	movw	r3, #30965	; 0x78f5
   14dc0:	movt	r3, #1
   14dc4:	movw	r2, #1297	; 0x511
   14dc8:	bl	124b0 <__assert_fail@plt>

00014dcc <flatcc_builder_end_table@@Base>:
   14dcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dd0:	add	fp, sp, #24
   14dd4:	sub	sp, sp, #16
   14dd8:	mov	r4, r0
   14ddc:	ldr	r0, [r0, #32]
   14de0:	ldrh	r0, [r0, #14]
   14de4:	cmp	r0, #3
   14de8:	bne	14ef8 <flatcc_builder_end_table@@Base+0x12c>
   14dec:	ldrh	r0, [r4, #8]
   14df0:	mov	r1, #4
   14df4:	add	r0, r1, r0, lsl #1
   14df8:	ldr	r6, [r4, #4]
   14dfc:	strh	r0, [r6, #-4]!
   14e00:	ldrh	r1, [r4, #20]
   14e04:	add	r1, r1, #4
   14e08:	strh	r1, [r6, #2]
   14e0c:	uxth	r5, r0
   14e10:	ldr	r0, [r4, #12]
   14e14:	eor	r0, r0, r5
   14e18:	movw	r2, #31153	; 0x79b1
   14e1c:	movt	r2, #40503	; 0x9e37
   14e20:	mul	r0, r0, r2
   14e24:	uxth	r1, r1
   14e28:	eor	r0, r0, r1
   14e2c:	mul	r3, r0, r2
   14e30:	str	r3, [r4, #12]
   14e34:	mov	r0, r4
   14e38:	mov	r1, r6
   14e3c:	mov	r2, r5
   14e40:	bl	1488c <flatcc_builder_create_cached_vtable@@Base>
   14e44:	cmp	r0, #0
   14e48:	beq	14ee8 <flatcc_builder_end_table@@Base+0x11c>
   14e4c:	mov	r7, r0
   14e50:	mov	r8, #0
   14e54:	mov	r0, r6
   14e58:	mov	r1, #0
   14e5c:	mov	r2, r5
   14e60:	bl	12480 <memset@plt>
   14e64:	ldrh	r3, [r4, #130]	; 0x82
   14e68:	ldr	r0, [r4, #76]	; 0x4c
   14e6c:	ldr	r6, [r4]
   14e70:	ldr	r1, [r4, #16]
   14e74:	ldr	r2, [r4, #20]
   14e78:	ldr	r5, [r4, #32]
   14e7c:	ldr	r5, [r5, #20]
   14e80:	add	r0, r0, r5
   14e84:	sub	r6, r6, r0
   14e88:	asr	r6, r6, #1
   14e8c:	stm	sp, {r0, r6, r7}
   14e90:	mov	r0, r4
   14e94:	bl	14ad0 <flatcc_builder_create_table@@Base>
   14e98:	cmp	r0, #0
   14e9c:	beq	14eec <flatcc_builder_end_table@@Base+0x120>
   14ea0:	mov	r5, r0
   14ea4:	ldr	r0, [r4, #32]
   14ea8:	ldr	r1, [r4, #52]	; 0x34
   14eac:	ldr	r2, [r4, #76]	; 0x4c
   14eb0:	ldr	r3, [r0, #24]
   14eb4:	str	r3, [r4, #12]
   14eb8:	ldrh	r3, [r0, #28]
   14ebc:	strh	r3, [r4, #8]
   14ec0:	ldr	r3, [r0, #16]
   14ec4:	add	r1, r1, r3
   14ec8:	str	r1, [r4, #4]
   14ecc:	ldr	r0, [r0, #20]
   14ed0:	add	r0, r2, r0
   14ed4:	str	r0, [r4]
   14ed8:	mov	r0, r4
   14edc:	bl	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   14ee0:	mov	r8, r5
   14ee4:	b	14eec <flatcc_builder_end_table@@Base+0x120>
   14ee8:	mov	r8, #0
   14eec:	mov	r0, r8
   14ef0:	sub	sp, fp, #24
   14ef4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ef8:	movw	r0, #30759	; 0x7827
   14efc:	movt	r0, #1
   14f00:	movw	r1, #28690	; 0x7012
   14f04:	movt	r1, #1
   14f08:	movw	r3, #31055	; 0x794f
   14f0c:	movt	r3, #1
   14f10:	movw	r2, #1317	; 0x525
   14f14:	bl	124b0 <__assert_fail@plt>

00014f18 <flatcc_builder_create_vector@@Base>:
   14f18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f1c:	add	fp, sp, #24
   14f20:	sub	sp, sp, #80	; 0x50
   14f24:	mov	r4, r0
   14f28:	ldr	r0, [fp, #8]
   14f2c:	strh	r0, [fp, #-26]	; 0xffffffe6
   14f30:	ldr	r0, [fp, #12]
   14f34:	cmp	r2, r0
   14f38:	bhi	15004 <flatcc_builder_create_vector@@Base+0xec>
   14f3c:	mov	r6, r3
   14f40:	mov	r7, r2
   14f44:	mov	r8, r1
   14f48:	sub	r0, fp, #26
   14f4c:	mov	r9, #4
   14f50:	mov	r1, #4
   14f54:	bl	1446c <flatcc_builder_start_vector@@Base+0x80>
   14f58:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   14f5c:	mov	r0, r4
   14f60:	mov	r1, r5
   14f64:	bl	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>
   14f68:	mov	r0, r7
   14f6c:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   14f70:	str	r7, [fp, #-32]	; 0xffffffe0
   14f74:	mul	r6, r6, r7
   14f78:	mov	r0, r4
   14f7c:	mov	r1, r6
   14f80:	mov	r2, r5
   14f84:	bl	13680 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14f88:	str	r9, [sp, #12]
   14f8c:	sub	r1, fp, #32
   14f90:	str	r1, [sp, #8]
   14f94:	str	r9, [sp]
   14f98:	mov	r1, #1
   14f9c:	str	r1, [sp, #4]
   14fa0:	cmp	r6, #0
   14fa4:	strne	r6, [sp, #20]
   14fa8:	strne	r8, [sp, #16]
   14fac:	movne	r1, #2
   14fb0:	strne	r1, [sp, #4]
   14fb4:	addne	r1, r6, #4
   14fb8:	strne	r1, [sp]
   14fbc:	cmp	r0, #0
   14fc0:	beq	14ff0 <flatcc_builder_create_vector@@Base+0xd8>
   14fc4:	ldm	sp, {r1, r2}
   14fc8:	add	r1, r1, r0
   14fcc:	str	r1, [sp]
   14fd0:	mov	r1, sp
   14fd4:	add	r1, r1, r2, lsl #3
   14fd8:	movw	r3, #28160	; 0x6e00
   14fdc:	movt	r3, #1
   14fe0:	str	r3, [r1, #8]
   14fe4:	str	r0, [r1, #12]
   14fe8:	add	r0, r2, #1
   14fec:	str	r0, [sp, #4]
   14ff0:	mov	r1, sp
   14ff4:	mov	r0, r4
   14ff8:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14ffc:	sub	sp, fp, #24
   15000:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15004:	movw	r0, #31121	; 0x7991
   15008:	movt	r0, #1
   1500c:	movw	r1, #28690	; 0x7012
   15010:	movt	r1, #1
   15014:	movw	r3, #31140	; 0x79a4
   15018:	movt	r3, #1
   1501c:	movw	r2, #1365	; 0x555
   15020:	bl	124b0 <__assert_fail@plt>

00015024 <flatcc_builder_end_vector@@Base>:
   15024:	push	{r4, r5, fp, lr}
   15028:	add	fp, sp, #8
   1502c:	sub	sp, sp, #8
   15030:	mov	r4, r0
   15034:	ldr	r0, [r0, #32]
   15038:	ldrh	r1, [r0, #14]
   1503c:	cmp	r1, #4
   15040:	bne	15084 <flatcc_builder_end_vector@@Base+0x60>
   15044:	ldr	r1, [r4, #16]
   15048:	ldrh	r5, [r4, #130]	; 0x82
   1504c:	ldr	r3, [r0, #16]
   15050:	ldr	r2, [r0, #20]
   15054:	ldr	r0, [r0, #24]
   15058:	str	r5, [sp]
   1505c:	str	r0, [sp, #4]
   15060:	mov	r0, r4
   15064:	bl	14f18 <flatcc_builder_create_vector@@Base>
   15068:	mov	r5, r0
   1506c:	cmp	r0, #0
   15070:	movne	r0, r4
   15074:	blne	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   15078:	mov	r0, r5
   1507c:	sub	sp, fp, #8
   15080:	pop	{r4, r5, fp, pc}
   15084:	movw	r0, #29493	; 0x7335
   15088:	movt	r0, #1
   1508c:	movw	r1, #28690	; 0x7012
   15090:	movt	r1, #1
   15094:	movw	r3, #31258	; 0x7a1a
   15098:	movt	r3, #1
   1509c:	movw	r2, #1400	; 0x578
   150a0:	bl	124b0 <__assert_fail@plt>

000150a4 <flatcc_builder_vector_count@@Base>:
   150a4:	ldr	r0, [r0, #32]
   150a8:	ldr	r0, [r0, #20]
   150ac:	bx	lr

000150b0 <flatcc_builder_vector_edit@@Base>:
   150b0:	ldr	r0, [r0, #16]
   150b4:	bx	lr

000150b8 <flatcc_builder_create_offset_vector_direct@@Base>:
   150b8:	mov	r3, #0
   150bc:	b	150c0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   150c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150c4:	add	fp, sp, #24
   150c8:	sub	sp, sp, #80	; 0x50
   150cc:	mov	r8, r0
   150d0:	mov	r0, #0
   150d4:	cmn	r2, #-1073741823	; 0xc0000001
   150d8:	bhi	15228 <flatcc_builder_create_offset_vector_direct@@Base+0x170>
   150dc:	mov	r9, r3
   150e0:	mov	r6, r2
   150e4:	mov	r7, r1
   150e8:	mov	r5, #4
   150ec:	mov	r0, r8
   150f0:	mov	r1, #4
   150f4:	bl	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>
   150f8:	mov	r0, r6
   150fc:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15100:	str	r6, [fp, #-28]	; 0xffffffe4
   15104:	lsl	r4, r6, #2
   15108:	mov	r0, r8
   1510c:	mov	r1, r4
   15110:	mov	r2, #4
   15114:	bl	13680 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15118:	str	r5, [sp, #16]
   1511c:	sub	r1, fp, #28
   15120:	str	r1, [sp, #12]
   15124:	str	r5, [sp, #4]
   15128:	mov	r1, #1
   1512c:	str	r1, [sp, #8]
   15130:	mov	r1, #0
   15134:	cmp	r1, r6, lsl #2
   15138:	strne	r4, [sp, #24]
   1513c:	strne	r7, [sp, #20]
   15140:	movne	r1, #2
   15144:	strne	r1, [sp, #8]
   15148:	addne	r1, r4, #4
   1514c:	strne	r1, [sp, #4]
   15150:	cmp	r0, #0
   15154:	beq	15184 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   15158:	ldmib	sp, {r1, r2}
   1515c:	add	r1, r1, r0
   15160:	str	r1, [sp, #4]
   15164:	add	r1, sp, #4
   15168:	add	r1, r1, r2, lsl #3
   1516c:	movw	r3, #28160	; 0x6e00
   15170:	movt	r3, #1
   15174:	str	r3, [r1, #8]
   15178:	str	r0, [r1, #12]
   1517c:	add	r0, r2, #1
   15180:	str	r0, [sp, #8]
   15184:	cmp	r6, #0
   15188:	beq	1521c <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   1518c:	ldr	r0, [r8, #136]	; 0x88
   15190:	ldr	r1, [sp, #4]
   15194:	sub	r0, r1, r0
   15198:	sub	r4, r0, #4
   1519c:	mov	r5, r9
   151a0:	b	151b8 <flatcc_builder_create_offset_vector_direct@@Base+0x100>
   151a4:	sub	r4, r4, #4
   151a8:	add	r7, r7, #4
   151ac:	add	r5, r5, #1
   151b0:	subs	r6, r6, #1
   151b4:	beq	1521c <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   151b8:	ldr	r0, [r7]
   151bc:	cmp	r0, #0
   151c0:	beq	151e8 <flatcc_builder_create_offset_vector_direct@@Base+0x130>
   151c4:	add	r0, r4, r0
   151c8:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   151cc:	str	r0, [r7]
   151d0:	cmp	r9, #0
   151d4:	beq	151a4 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   151d8:	ldrb	r0, [r5]
   151dc:	cmp	r0, #0
   151e0:	bne	151a4 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   151e4:	b	15230 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   151e8:	cmp	r9, #0
   151ec:	beq	15250 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   151f0:	ldrb	r0, [r5]
   151f4:	cmp	r0, #0
   151f8:	beq	151a4 <flatcc_builder_create_offset_vector_direct@@Base+0xec>
   151fc:	movw	r0, #33341	; 0x823d
   15200:	movt	r0, #1
   15204:	movw	r1, #28690	; 0x7012
   15208:	movt	r1, #1
   1520c:	movw	r3, #33210	; 0x81ba
   15210:	movt	r3, #1
   15214:	movw	r2, #1461	; 0x5b5
   15218:	bl	124b0 <__assert_fail@plt>
   1521c:	add	r1, sp, #4
   15220:	mov	r0, r8
   15224:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15228:	sub	sp, fp, #24
   1522c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15230:	movw	r0, #33196	; 0x81ac
   15234:	movt	r0, #1
   15238:	movw	r1, #28690	; 0x7012
   1523c:	movt	r1, #1
   15240:	movw	r3, #33210	; 0x81ba
   15244:	movt	r3, #1
   15248:	movw	r2, #1457	; 0x5b1
   1524c:	bl	124b0 <__assert_fail@plt>
   15250:	movw	r0, #33208	; 0x81b8
   15254:	movt	r0, #1
   15258:	movw	r1, #28690	; 0x7012
   1525c:	movt	r1, #1
   15260:	movw	r3, #33210	; 0x81ba
   15264:	movt	r3, #1
   15268:	movw	r2, #1463	; 0x5b7
   1526c:	bl	124b0 <__assert_fail@plt>

00015270 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15270:	push	{r4, r5, fp, lr}
   15274:	add	fp, sp, #8
   15278:	mov	r3, r1
   1527c:	mov	r4, r0
   15280:	ldr	r0, [r0, #32]
   15284:	ldrh	r1, [r0, #14]
   15288:	cmp	r1, #5
   1528c:	bne	152b8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   15290:	ldr	r2, [r0, #20]
   15294:	ldr	r1, [r4, #16]
   15298:	mov	r0, r4
   1529c:	bl	150c0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   152a0:	mov	r5, r0
   152a4:	cmp	r0, #0
   152a8:	movne	r0, r4
   152ac:	blne	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   152b0:	mov	r0, r5
   152b4:	pop	{r4, r5, fp, pc}
   152b8:	movw	r0, #29742	; 0x742e
   152bc:	movt	r0, #1
   152c0:	movw	r1, #28690	; 0x7012
   152c4:	movt	r1, #1
   152c8:	movw	r3, #31399	; 0x7aa7
   152cc:	movt	r3, #1
   152d0:	movw	r2, #1493	; 0x5d5
   152d4:	bl	124b0 <__assert_fail@plt>

000152d8 <flatcc_builder_offset_vector_edit@@Base>:
   152d8:	ldr	r0, [r0, #16]
   152dc:	bx	lr

000152e0 <flatcc_builder_offset_vector_count@@Base>:
   152e0:	ldr	r0, [r0, #32]
   152e4:	ldr	r0, [r0, #20]
   152e8:	bx	lr

000152ec <flatcc_builder_table_add_union@@Base>:
   152ec:	push	{r4, r5, r6, r7, fp, lr}
   152f0:	add	fp, sp, #16
   152f4:	mov	r5, r0
   152f8:	ldr	r0, [r0, #32]
   152fc:	ldrh	r0, [r0, #14]
   15300:	cmp	r0, #3
   15304:	bne	15378 <flatcc_builder_table_add_union@@Base+0x8c>
   15308:	mov	r7, r3
   1530c:	mov	r6, r1
   15310:	uxtb	r4, r2
   15314:	cmp	r3, #0
   15318:	beq	15324 <flatcc_builder_table_add_union@@Base+0x38>
   1531c:	cmp	r4, #0
   15320:	beq	15398 <flatcc_builder_table_add_union@@Base+0xac>
   15324:	cmp	r7, #0
   15328:	beq	15344 <flatcc_builder_table_add_union@@Base+0x58>
   1532c:	mov	r0, r5
   15330:	mov	r1, r6
   15334:	bl	153f8 <flatcc_builder_table_add_offset@@Base>
   15338:	cmp	r0, #0
   1533c:	beq	153d8 <flatcc_builder_table_add_union@@Base+0xec>
   15340:	str	r7, [r0]
   15344:	sub	r1, r6, #1
   15348:	mov	r0, r5
   1534c:	mov	r2, #1
   15350:	mov	r3, #1
   15354:	bl	154bc <flatcc_builder_table_add@@Base>
   15358:	cmp	r0, #0
   1535c:	beq	153b8 <flatcc_builder_table_add_union@@Base+0xcc>
   15360:	mov	r5, r0
   15364:	mov	r0, r4
   15368:	bl	1559c <flatcc_builder_table_add@@Base+0xe0>
   1536c:	strb	r4, [r5]
   15370:	mov	r0, #0
   15374:	pop	{r4, r5, r6, r7, fp, pc}
   15378:	movw	r0, #30759	; 0x7827
   1537c:	movt	r0, #1
   15380:	movw	r1, #28690	; 0x7012
   15384:	movt	r1, #1
   15388:	movw	r3, #31513	; 0x7b19
   1538c:	movt	r3, #1
   15390:	movw	r2, #1518	; 0x5ee
   15394:	bl	124b0 <__assert_fail@plt>
   15398:	movw	r0, #31601	; 0x7b71
   1539c:	movt	r0, #1
   153a0:	movw	r1, #28690	; 0x7012
   153a4:	movt	r1, #1
   153a8:	movw	r3, #31513	; 0x7b19
   153ac:	movt	r3, #1
   153b0:	movw	r2, #1519	; 0x5ef
   153b4:	bl	124b0 <__assert_fail@plt>
   153b8:	movw	r0, #31645	; 0x7b9d
   153bc:	movt	r0, #1
   153c0:	movw	r1, #28690	; 0x7012
   153c4:	movt	r1, #1
   153c8:	movw	r3, #31513	; 0x7b19
   153cc:	movt	r3, #1
   153d0:	movw	r2, #1526	; 0x5f6
   153d4:	bl	124b0 <__assert_fail@plt>
   153d8:	movw	r0, #31635	; 0x7b93
   153dc:	movt	r0, #1
   153e0:	movw	r1, #28690	; 0x7012
   153e4:	movt	r1, #1
   153e8:	movw	r3, #31513	; 0x7b19
   153ec:	movt	r3, #1
   153f0:	movw	r2, #1522	; 0x5f2
   153f4:	bl	124b0 <__assert_fail@plt>

000153f8 <flatcc_builder_table_add_offset@@Base>:
   153f8:	push	{fp, lr}
   153fc:	mov	fp, sp
   15400:	ldr	r2, [r0, #32]
   15404:	ldrh	r2, [r2, #14]
   15408:	cmp	r2, #3
   1540c:	bne	1545c <flatcc_builder_table_add_offset@@Base+0x64>
   15410:	movw	r2, #32765	; 0x7ffd
   15414:	cmp	r1, r2
   15418:	bcs	1547c <flatcc_builder_table_add_offset@@Base+0x84>
   1541c:	ldr	r2, [r0, #4]
   15420:	add	r2, r2, r1, lsl #1
   15424:	ldrh	r2, [r2]
   15428:	cmp	r2, #0
   1542c:	bne	1549c <flatcc_builder_table_add_offset@@Base+0xa4>
   15430:	ldr	r2, [r0, #12]
   15434:	eor	r2, r2, r1
   15438:	movw	r3, #31153	; 0x79b1
   1543c:	movt	r3, #40503	; 0x9e37
   15440:	mul	r2, r2, r3
   15444:	eor	r2, r2, #4
   15448:	mul	r2, r2, r3
   1544c:	str	r2, [r0, #12]
   15450:	uxth	r1, r1
   15454:	pop	{fp, lr}
   15458:	b	15dc4 <flatcc_builder_table_add_copy@@Base+0x40>
   1545c:	movw	r0, #30759	; 0x7827
   15460:	movt	r0, #1
   15464:	movw	r1, #28690	; 0x7012
   15468:	movt	r1, #1
   1546c:	movw	r3, #32539	; 0x7f1b
   15470:	movt	r3, #1
   15474:	movw	r2, #1811	; 0x713
   15478:	bl	124b0 <__assert_fail@plt>
   1547c:	movw	r0, #32411	; 0x7e9b
   15480:	movt	r0, #1
   15484:	movw	r1, #28690	; 0x7012
   15488:	movt	r1, #1
   1548c:	movw	r3, #32539	; 0x7f1b
   15490:	movt	r3, #1
   15494:	movw	r2, #1812	; 0x714
   15498:	bl	124b0 <__assert_fail@plt>
   1549c:	movw	r0, #33208	; 0x81b8
   154a0:	movt	r0, #1
   154a4:	movw	r1, #28690	; 0x7012
   154a8:	movt	r1, #1
   154ac:	movw	r3, #32539	; 0x7f1b
   154b0:	movt	r3, #1
   154b4:	movw	r2, #1819	; 0x71b
   154b8:	bl	124b0 <__assert_fail@plt>

000154bc <flatcc_builder_table_add@@Base>:
   154bc:	push	{fp, lr}
   154c0:	mov	fp, sp
   154c4:	mov	ip, r3
   154c8:	ldr	r3, [r0, #32]
   154cc:	ldrh	r3, [r3, #14]
   154d0:	cmp	r3, #3
   154d4:	bne	1553c <flatcc_builder_table_add@@Base+0x80>
   154d8:	movw	r3, #32765	; 0x7ffd
   154dc:	cmp	r1, r3
   154e0:	bcs	1555c <flatcc_builder_table_add@@Base+0xa0>
   154e4:	mov	lr, r2
   154e8:	ldrh	r3, [r0, #130]	; 0x82
   154ec:	cmp	r3, ip
   154f0:	strhcc	ip, [r0, #130]	; 0x82
   154f4:	ldr	r3, [r0, #4]
   154f8:	add	r3, r3, r1, lsl #1
   154fc:	ldrh	r3, [r3]
   15500:	cmp	r3, #0
   15504:	bne	1557c <flatcc_builder_table_add@@Base+0xc0>
   15508:	ldr	r3, [r0, #12]
   1550c:	eor	r3, r3, r1
   15510:	movw	r2, #31153	; 0x79b1
   15514:	movt	r2, #40503	; 0x9e37
   15518:	mul	r3, r3, r2
   1551c:	eor	r3, r3, lr
   15520:	mul	r2, r3, r2
   15524:	str	r2, [r0, #12]
   15528:	uxth	r3, r1
   1552c:	mov	r1, lr
   15530:	mov	r2, ip
   15534:	pop	{fp, lr}
   15538:	b	15cb8 <flatcc_builder_string_len@@Base+0xc>
   1553c:	movw	r0, #30759	; 0x7827
   15540:	movt	r0, #1
   15544:	movw	r1, #28690	; 0x7012
   15548:	movt	r1, #1
   1554c:	movw	r3, #32337	; 0x7e51
   15550:	movt	r3, #1
   15554:	movw	r2, #1773	; 0x6ed
   15558:	bl	124b0 <__assert_fail@plt>
   1555c:	movw	r0, #32411	; 0x7e9b
   15560:	movt	r0, #1
   15564:	movw	r1, #28690	; 0x7012
   15568:	movt	r1, #1
   1556c:	movw	r3, #32337	; 0x7e51
   15570:	movt	r3, #1
   15574:	movw	r2, #1774	; 0x6ee
   15578:	bl	124b0 <__assert_fail@plt>
   1557c:	movw	r0, #33208	; 0x81b8
   15580:	movt	r0, #1
   15584:	movw	r1, #28690	; 0x7012
   15588:	movt	r1, #1
   1558c:	movw	r3, #32337	; 0x7e51
   15590:	movt	r3, #1
   15594:	movw	r2, #1784	; 0x6f8
   15598:	bl	124b0 <__assert_fail@plt>
   1559c:	bx	lr

000155a0 <flatcc_builder_table_add_union_vector@@Base>:
   155a0:	push	{r4, r5, r6, r7, fp, lr}
   155a4:	add	fp, sp, #16
   155a8:	mov	r6, r0
   155ac:	ldr	r0, [r0, #32]
   155b0:	ldrh	r0, [r0, #14]
   155b4:	cmp	r0, #3
   155b8:	bne	15624 <flatcc_builder_table_add_union_vector@@Base+0x84>
   155bc:	mov	r4, r3
   155c0:	mov	r7, r2
   155c4:	mov	r5, r1
   155c8:	cmp	r2, #0
   155cc:	mov	r0, r2
   155d0:	movwne	r0, #1
   155d4:	clz	r1, r3
   155d8:	lsr	r1, r1, #5
   155dc:	teq	r1, r0
   155e0:	beq	15644 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   155e4:	cmp	r7, #0
   155e8:	beq	1561c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   155ec:	sub	r1, r5, #1
   155f0:	mov	r0, r6
   155f4:	bl	153f8 <flatcc_builder_table_add_offset@@Base>
   155f8:	cmp	r0, #0
   155fc:	beq	15664 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   15600:	str	r7, [r0]
   15604:	mov	r0, r6
   15608:	mov	r1, r5
   1560c:	bl	153f8 <flatcc_builder_table_add_offset@@Base>
   15610:	cmp	r0, #0
   15614:	beq	15684 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15618:	str	r4, [r0]
   1561c:	mov	r0, #0
   15620:	pop	{r4, r5, r6, r7, fp, pc}
   15624:	movw	r0, #30759	; 0x7827
   15628:	movt	r0, #1
   1562c:	movw	r1, #28690	; 0x7012
   15630:	movt	r1, #1
   15634:	movw	r3, #31657	; 0x7ba9
   15638:	movt	r3, #1
   1563c:	mov	r2, #1536	; 0x600
   15640:	bl	124b0 <__assert_fail@plt>
   15644:	movw	r0, #31756	; 0x7c0c
   15648:	movt	r0, #1
   1564c:	movw	r1, #28690	; 0x7012
   15650:	movt	r1, #1
   15654:	movw	r3, #31657	; 0x7ba9
   15658:	movt	r3, #1
   1565c:	movw	r2, #1537	; 0x601
   15660:	bl	124b0 <__assert_fail@plt>
   15664:	movw	r0, #31635	; 0x7b93
   15668:	movt	r0, #1
   1566c:	movw	r1, #28690	; 0x7012
   15670:	movt	r1, #1
   15674:	movw	r3, #31657	; 0x7ba9
   15678:	movt	r3, #1
   1567c:	movw	r2, #1540	; 0x604
   15680:	bl	124b0 <__assert_fail@plt>
   15684:	movw	r0, #31635	; 0x7b93
   15688:	movt	r0, #1
   1568c:	movw	r1, #28690	; 0x7012
   15690:	movt	r1, #1
   15694:	movw	r3, #31657	; 0x7ba9
   15698:	movt	r3, #1
   1569c:	movw	r2, #1544	; 0x608
   156a0:	bl	124b0 <__assert_fail@plt>

000156a4 <flatcc_builder_create_union_vector@@Base>:
   156a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156a8:	add	fp, sp, #24
   156ac:	sub	sp, sp, #16
   156b0:	mov	r7, r3
   156b4:	mov	r6, r2
   156b8:	mov	r4, r1
   156bc:	mov	r5, r0
   156c0:	mov	r0, #0
   156c4:	str	r0, [r5]
   156c8:	str	r0, [r5, #4]
   156cc:	mov	r0, r1
   156d0:	bl	1447c <flatcc_builder_start_offset_vector@@Base>
   156d4:	cmp	r0, #0
   156d8:	beq	156e4 <flatcc_builder_create_union_vector@@Base+0x40>
   156dc:	sub	sp, fp, #24
   156e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156e4:	mov	r0, r4
   156e8:	mov	r1, r7
   156ec:	bl	13fc8 <flatcc_builder_extend_offset_vector@@Base>
   156f0:	cmp	r0, #0
   156f4:	beq	156dc <flatcc_builder_create_union_vector@@Base+0x38>
   156f8:	mov	r0, r4
   156fc:	mov	r1, r7
   15700:	bl	13d40 <flatcc_builder_start_struct@@Base+0x84>
   15704:	cmp	r0, #0
   15708:	beq	156dc <flatcc_builder_create_union_vector@@Base+0x38>
   1570c:	mov	r8, r0
   15710:	mov	r0, r4
   15714:	bl	152d8 <flatcc_builder_offset_vector_edit@@Base>
   15718:	mov	ip, r0
   1571c:	cmp	r7, #0
   15720:	beq	15750 <flatcc_builder_create_union_vector@@Base+0xac>
   15724:	add	r0, r6, #4
   15728:	mov	r1, r8
   1572c:	mov	r2, ip
   15730:	mov	r6, r7
   15734:	ldrb	r3, [r0, #-4]
   15738:	strb	r3, [r1], #1
   1573c:	ldr	r3, [r0]
   15740:	str	r3, [r2], #4
   15744:	add	r0, r0, #8
   15748:	subs	r6, r6, #1
   1574c:	bne	15734 <flatcc_builder_create_union_vector@@Base+0x90>
   15750:	str	r7, [sp]
   15754:	add	r0, sp, #8
   15758:	mov	r1, r4
   1575c:	mov	r2, r8
   15760:	mov	r3, ip
   15764:	bl	15784 <flatcc_builder_create_union_vector_direct@@Base>
   15768:	ldr	r0, [sp, #8]
   1576c:	ldr	r1, [sp, #12]
   15770:	stm	r5, {r0, r1}
   15774:	mov	r0, r4
   15778:	bl	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   1577c:	sub	sp, fp, #24
   15780:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00015784 <flatcc_builder_create_union_vector_direct@@Base>:
   15784:	push	{r4, r5, r6, r7, fp, lr}
   15788:	add	fp, sp, #16
   1578c:	sub	sp, sp, #8
   15790:	mov	r5, r2
   15794:	mov	r6, r1
   15798:	mov	r4, r0
   1579c:	mov	r0, #0
   157a0:	str	r0, [r4]
   157a4:	str	r0, [r4, #4]
   157a8:	ldr	r7, [fp, #8]
   157ac:	mov	r0, r1
   157b0:	mov	r1, r3
   157b4:	mov	r2, r7
   157b8:	mov	r3, r5
   157bc:	bl	150c0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   157c0:	str	r0, [r4, #4]
   157c4:	cmp	r0, #0
   157c8:	beq	157f4 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   157cc:	mvn	r0, #0
   157d0:	mov	r1, #1
   157d4:	str	r1, [sp]
   157d8:	str	r0, [sp, #4]
   157dc:	mov	r0, r6
   157e0:	mov	r1, r5
   157e4:	mov	r2, r7
   157e8:	mov	r3, #1
   157ec:	bl	14f18 <flatcc_builder_create_vector@@Base>
   157f0:	str	r0, [r4]
   157f4:	sub	sp, fp, #16
   157f8:	pop	{r4, r5, r6, r7, fp, pc}

000157fc <flatcc_builder_start_union_vector@@Base>:
   157fc:	push	{r4, r5, fp, lr}
   15800:	add	fp, sp, #8
   15804:	mov	r4, r0
   15808:	mov	r1, #4
   1580c:	bl	13a90 <flatcc_builder_start_buffer@@Base+0xbc>
   15810:	mvn	r5, #0
   15814:	cmp	r0, #0
   15818:	beq	15824 <flatcc_builder_start_union_vector@@Base+0x28>
   1581c:	mov	r0, r5
   15820:	pop	{r4, r5, fp, pc}
   15824:	ldr	r0, [r4, #32]
   15828:	mov	r1, #8
   1582c:	str	r1, [r0, #16]
   15830:	ldr	r0, [r4, #32]
   15834:	mov	r5, #0
   15838:	str	r5, [r0, #20]
   1583c:	ldr	r0, [r4, #32]
   15840:	mov	r1, #7
   15844:	strh	r1, [r0, #14]
   15848:	mov	r0, r4
   1584c:	mvn	r1, #3
   15850:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   15854:	mov	r0, r5
   15858:	pop	{r4, r5, fp, pc}

0001585c <flatcc_builder_end_union_vector@@Base>:
   1585c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15860:	add	fp, sp, #24
   15864:	sub	sp, sp, #16
   15868:	mov	r9, r0
   1586c:	mov	r0, #0
   15870:	str	r0, [r9]
   15874:	str	r0, [r9, #4]
   15878:	ldr	r0, [r1, #32]
   1587c:	ldrh	r0, [r0, #14]
   15880:	cmp	r0, #7
   15884:	bne	15924 <flatcc_builder_end_union_vector@@Base+0xc8>
   15888:	mov	r4, r1
   1588c:	mov	r0, r1
   15890:	bl	15944 <flatcc_builder_union_vector_count@@Base>
   15894:	mov	r6, r0
   15898:	add	r1, r0, r0, lsl #2
   1589c:	mov	r0, r4
   158a0:	bl	13d40 <flatcc_builder_start_struct@@Base+0x84>
   158a4:	cmp	r0, #0
   158a8:	beq	1591c <flatcc_builder_end_union_vector@@Base+0xc0>
   158ac:	mov	r7, r0
   158b0:	add	r8, r0, r6, lsl #2
   158b4:	mov	r0, r4
   158b8:	bl	15950 <flatcc_builder_union_vector_edit@@Base>
   158bc:	cmp	r6, #0
   158c0:	beq	158f0 <flatcc_builder_end_union_vector@@Base+0x94>
   158c4:	add	r0, r0, #4
   158c8:	mov	r1, r8
   158cc:	mov	r2, r7
   158d0:	mov	r3, r6
   158d4:	ldrb	r5, [r0, #-4]
   158d8:	strb	r5, [r1], #1
   158dc:	ldr	r5, [r0]
   158e0:	str	r5, [r2], #4
   158e4:	add	r0, r0, #8
   158e8:	subs	r3, r3, #1
   158ec:	bne	158d4 <flatcc_builder_end_union_vector@@Base+0x78>
   158f0:	str	r6, [sp]
   158f4:	add	r0, sp, #8
   158f8:	mov	r1, r4
   158fc:	mov	r2, r8
   15900:	mov	r3, r7
   15904:	bl	15784 <flatcc_builder_create_union_vector_direct@@Base>
   15908:	ldr	r0, [sp, #8]
   1590c:	ldr	r1, [sp, #12]
   15910:	stm	r9, {r0, r1}
   15914:	mov	r0, r4
   15918:	bl	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   1591c:	sub	sp, fp, #24
   15920:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15924:	movw	r0, #31796	; 0x7c34
   15928:	movt	r0, #1
   1592c:	movw	r1, #28690	; 0x7012
   15930:	movt	r1, #1
   15934:	movw	r3, #31846	; 0x7c66
   15938:	movt	r3, #1
   1593c:	movw	r2, #1617	; 0x651
   15940:	bl	124b0 <__assert_fail@plt>

00015944 <flatcc_builder_union_vector_count@@Base>:
   15944:	ldr	r0, [r0, #32]
   15948:	ldr	r0, [r0, #20]
   1594c:	bx	lr

00015950 <flatcc_builder_union_vector_edit@@Base>:
   15950:	ldr	r0, [r0, #16]
   15954:	bx	lr

00015958 <flatcc_builder_extend_union_vector@@Base>:
   15958:	push	{r4, r5, fp, lr}
   1595c:	add	fp, sp, #8
   15960:	mov	r5, r1
   15964:	mov	r4, r0
   15968:	mvn	r2, #-536870912	; 0xe0000000
   1596c:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   15970:	cmp	r0, #0
   15974:	movne	r0, #0
   15978:	popne	{r4, r5, fp, pc}
   1597c:	lsl	r1, r5, #3
   15980:	mov	r0, r4
   15984:	pop	{r4, r5, fp, lr}
   15988:	b	13d40 <flatcc_builder_start_struct@@Base+0x84>

0001598c <flatcc_builder_truncate_union_vector@@Base>:
   1598c:	push	{fp, lr}
   15990:	mov	fp, sp
   15994:	ldr	r2, [r0, #32]
   15998:	ldrh	r3, [r2, #14]
   1599c:	cmp	r3, #7
   159a0:	bne	159d0 <flatcc_builder_truncate_union_vector@@Base+0x44>
   159a4:	ldr	r3, [r2, #20]
   159a8:	cmp	r3, r1
   159ac:	bcc	159f0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   159b0:	sub	r3, r3, r1
   159b4:	str	r3, [r2, #20]
   159b8:	ldr	r2, [r0, #32]
   159bc:	ldr	r2, [r2, #16]
   159c0:	mul	r1, r2, r1
   159c4:	bl	142d0 <flatcc_builder_truncate_vector@@Base+0x84>
   159c8:	mov	r0, #0
   159cc:	pop	{fp, pc}
   159d0:	movw	r0, #31796	; 0x7c34
   159d4:	movt	r0, #1
   159d8:	movw	r1, #28690	; 0x7012
   159dc:	movt	r1, #1
   159e0:	movw	r3, #31929	; 0x7cb9
   159e4:	movt	r3, #1
   159e8:	movw	r2, #1665	; 0x681
   159ec:	bl	124b0 <__assert_fail@plt>
   159f0:	movw	r0, #30360	; 0x7698
   159f4:	movt	r0, #1
   159f8:	movw	r1, #28690	; 0x7012
   159fc:	movt	r1, #1
   15a00:	movw	r3, #31929	; 0x7cb9
   15a04:	movt	r3, #1
   15a08:	movw	r2, #1666	; 0x682
   15a0c:	bl	124b0 <__assert_fail@plt>

00015a10 <flatcc_builder_union_vector_push@@Base>:
   15a10:	push	{r4, r5, r6, sl, fp, lr}
   15a14:	add	fp, sp, #16
   15a18:	mov	r4, r2
   15a1c:	mov	r5, r1
   15a20:	ldr	r1, [r0, #32]
   15a24:	ldrh	r2, [r1, #14]
   15a28:	cmp	r2, #7
   15a2c:	bne	15a68 <flatcc_builder_union_vector_push@@Base+0x58>
   15a30:	ldr	r2, [r1, #20]
   15a34:	mov	r6, #0
   15a38:	cmn	r2, #-536870911	; 0xe0000001
   15a3c:	beq	15a60 <flatcc_builder_union_vector_push@@Base+0x50>
   15a40:	add	r2, r2, #1
   15a44:	str	r2, [r1, #20]
   15a48:	mov	r1, #8
   15a4c:	bl	13d40 <flatcc_builder_start_struct@@Base+0x84>
   15a50:	cmp	r0, #0
   15a54:	strne	r5, [r0]
   15a58:	strne	r4, [r0, #4]
   15a5c:	movne	r6, r0
   15a60:	mov	r0, r6
   15a64:	pop	{r4, r5, r6, sl, fp, pc}
   15a68:	movw	r0, #31796	; 0x7c34
   15a6c:	movt	r0, #1
   15a70:	movw	r1, #28690	; 0x7012
   15a74:	movt	r1, #1
   15a78:	movw	r3, #31998	; 0x7cfe
   15a7c:	movt	r3, #1
   15a80:	movw	r2, #1677	; 0x68d
   15a84:	bl	124b0 <__assert_fail@plt>

00015a88 <flatcc_builder_append_union_vector@@Base>:
   15a88:	push	{r4, r5, r6, sl, fp, lr}
   15a8c:	add	fp, sp, #16
   15a90:	mov	r6, r0
   15a94:	ldr	r0, [r0, #32]
   15a98:	ldrh	r0, [r0, #14]
   15a9c:	cmp	r0, #7
   15aa0:	bne	15ae0 <flatcc_builder_append_union_vector@@Base+0x58>
   15aa4:	mov	r5, r2
   15aa8:	mov	r4, r1
   15aac:	mov	r0, r6
   15ab0:	mov	r1, r2
   15ab4:	mvn	r2, #-536870912	; 0xe0000000
   15ab8:	bl	13e44 <flatcc_builder_extend_vector@@Base+0x44>
   15abc:	cmp	r0, #0
   15ac0:	beq	15acc <flatcc_builder_append_union_vector@@Base+0x44>
   15ac4:	mov	r0, #0
   15ac8:	pop	{r4, r5, r6, sl, fp, pc}
   15acc:	lsl	r2, r5, #3
   15ad0:	mov	r0, r6
   15ad4:	mov	r1, r4
   15ad8:	pop	{r4, r5, r6, sl, fp, lr}
   15adc:	b	13f0c <flatcc_builder_vector_push@@Base+0x80>
   15ae0:	movw	r0, #31796	; 0x7c34
   15ae4:	movt	r0, #1
   15ae8:	movw	r1, #28690	; 0x7012
   15aec:	movt	r1, #1
   15af0:	movw	r3, #32107	; 0x7d6b
   15af4:	movt	r3, #1
   15af8:	movw	r2, #1692	; 0x69c
   15afc:	bl	124b0 <__assert_fail@plt>

00015b00 <flatcc_builder_create_string@@Base>:
   15b00:	push	{r4, r5, r6, r7, fp, lr}
   15b04:	add	fp, sp, #16
   15b08:	sub	sp, sp, #80	; 0x50
   15b0c:	mov	r5, r2
   15b10:	mov	r6, r1
   15b14:	mov	r4, r0
   15b18:	mov	r0, r2
   15b1c:	bl	13694 <flatcc_builder_embed_buffer@@Base+0x1dc>
   15b20:	str	r5, [fp, #-20]	; 0xffffffec
   15b24:	add	r1, r5, #1
   15b28:	mov	r7, #4
   15b2c:	mov	r0, r4
   15b30:	mov	r2, #4
   15b34:	bl	13680 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15b38:	str	r7, [sp, #16]
   15b3c:	sub	r1, fp, #20
   15b40:	str	r1, [sp, #12]
   15b44:	str	r7, [sp, #4]
   15b48:	mov	r1, #1
   15b4c:	str	r1, [sp, #8]
   15b50:	add	r0, r0, #1
   15b54:	cmp	r5, #0
   15b58:	strne	r5, [sp, #24]
   15b5c:	strne	r6, [sp, #20]
   15b60:	movne	r1, #2
   15b64:	strne	r1, [sp, #8]
   15b68:	addne	r1, r5, #4
   15b6c:	strne	r1, [sp, #4]
   15b70:	cmp	r0, #0
   15b74:	beq	15ba4 <flatcc_builder_create_string@@Base+0xa4>
   15b78:	ldmib	sp, {r1, r2}
   15b7c:	add	r1, r1, r0
   15b80:	str	r1, [sp, #4]
   15b84:	add	r1, sp, #4
   15b88:	add	r1, r1, r2, lsl #3
   15b8c:	movw	r3, #28160	; 0x6e00
   15b90:	movt	r3, #1
   15b94:	str	r3, [r1, #8]
   15b98:	str	r0, [r1, #12]
   15b9c:	add	r0, r2, #1
   15ba0:	str	r0, [sp, #8]
   15ba4:	add	r1, sp, #4
   15ba8:	mov	r0, r4
   15bac:	bl	13698 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15bb0:	sub	sp, fp, #16
   15bb4:	pop	{r4, r5, r6, r7, fp, pc}

00015bb8 <flatcc_builder_create_string_str@@Base>:
   15bb8:	push	{r4, r5, fp, lr}
   15bbc:	add	fp, sp, #8
   15bc0:	mov	r4, r1
   15bc4:	mov	r5, r0
   15bc8:	mov	r0, r1
   15bcc:	bl	1245c <strlen@plt>
   15bd0:	mov	r2, r0
   15bd4:	mov	r0, r5
   15bd8:	mov	r1, r4
   15bdc:	pop	{r4, r5, fp, lr}
   15be0:	b	15b00 <flatcc_builder_create_string@@Base>

00015be4 <flatcc_builder_create_string_strn@@Base>:
   15be4:	push	{r4, r5, fp, lr}
   15be8:	add	fp, sp, #8
   15bec:	mov	r4, r1
   15bf0:	mov	r5, r0
   15bf4:	mov	r0, r1
   15bf8:	mov	r1, r2
   15bfc:	bl	14220 <flatcc_builder_append_string_strn@@Base+0x30>
   15c00:	mov	r2, r0
   15c04:	mov	r0, r5
   15c08:	mov	r1, r4
   15c0c:	pop	{r4, r5, fp, lr}
   15c10:	b	15b00 <flatcc_builder_create_string@@Base>

00015c14 <flatcc_builder_end_string@@Base>:
   15c14:	push	{r4, r5, fp, lr}
   15c18:	add	fp, sp, #8
   15c1c:	mov	r4, r0
   15c20:	ldr	r0, [r0, #32]
   15c24:	ldrh	r1, [r0, #14]
   15c28:	cmp	r1, #6
   15c2c:	bne	15c64 <flatcc_builder_end_string@@Base+0x50>
   15c30:	ldr	r2, [r4, #20]
   15c34:	ldr	r0, [r0, #20]
   15c38:	cmp	r0, r2
   15c3c:	bne	15c84 <flatcc_builder_end_string@@Base+0x70>
   15c40:	ldr	r1, [r4, #16]
   15c44:	mov	r0, r4
   15c48:	bl	15b00 <flatcc_builder_create_string@@Base>
   15c4c:	mov	r5, r0
   15c50:	cmp	r0, #0
   15c54:	movne	r0, r4
   15c58:	blne	13c50 <flatcc_builder_end_buffer@@Base+0xc8>
   15c5c:	mov	r0, r5
   15c60:	pop	{r4, r5, fp, pc}
   15c64:	movw	r0, #30007	; 0x7537
   15c68:	movt	r0, #1
   15c6c:	movw	r1, #28690	; 0x7012
   15c70:	movt	r1, #1
   15c74:	movw	r3, #32234	; 0x7dea
   15c78:	movt	r3, #1
   15c7c:	movw	r2, #1732	; 0x6c4
   15c80:	bl	124b0 <__assert_fail@plt>
   15c84:	movw	r0, #32301	; 0x7e2d
   15c88:	movt	r0, #1
   15c8c:	movw	r1, #28690	; 0x7012
   15c90:	movt	r1, #1
   15c94:	movw	r3, #32234	; 0x7dea
   15c98:	movt	r3, #1
   15c9c:	movw	r2, #1733	; 0x6c5
   15ca0:	bl	124b0 <__assert_fail@plt>

00015ca4 <flatcc_builder_string_edit@@Base>:
   15ca4:	ldr	r0, [r0, #16]
   15ca8:	bx	lr

00015cac <flatcc_builder_string_len@@Base>:
   15cac:	ldr	r0, [r0, #32]
   15cb0:	ldr	r0, [r0, #20]
   15cb4:	bx	lr
   15cb8:	push	{r4, r5, r6, sl, fp, lr}
   15cbc:	add	fp, sp, #16
   15cc0:	mov	r5, r3
   15cc4:	mov	r4, r0
   15cc8:	ldr	r0, [r0, #20]
   15ccc:	ldr	r3, [r4, #24]
   15cd0:	add	r0, r2, r0
   15cd4:	sub	r0, r0, #1
   15cd8:	rsb	r2, r2, #0
   15cdc:	and	r6, r0, r2
   15ce0:	add	r0, r6, r1
   15ce4:	str	r0, [r4, #20]
   15ce8:	cmp	r0, r3
   15cec:	bcc	15d10 <flatcc_builder_string_len@@Base+0x64>
   15cf0:	add	r1, r0, #1
   15cf4:	mov	r0, r4
   15cf8:	movw	r2, #65532	; 0xfffc
   15cfc:	bl	1615c <flatcc_builder_get_emit_context@@Base+0x18>
   15d00:	mov	r1, r0
   15d04:	mov	r0, #0
   15d08:	cmp	r1, #0
   15d0c:	popne	{r4, r5, r6, sl, fp, pc}
   15d10:	ldr	r0, [r4, #4]
   15d14:	add	r0, r0, r5, lsl #1
   15d18:	add	r1, r6, #4
   15d1c:	strh	r1, [r0]
   15d20:	ldrh	r0, [r4, #8]
   15d24:	cmp	r0, r5
   15d28:	addls	r0, r5, #1
   15d2c:	strhls	r0, [r4, #8]
   15d30:	ldr	r0, [r4, #16]
   15d34:	add	r0, r0, r6
   15d38:	pop	{r4, r5, r6, sl, fp, pc}

00015d3c <flatcc_builder_table_edit@@Base>:
   15d3c:	push	{fp, lr}
   15d40:	mov	fp, sp
   15d44:	ldr	r2, [r0, #32]
   15d48:	ldrh	r2, [r2, #14]
   15d4c:	cmp	r2, #3
   15d50:	ldreq	r2, [r0, #16]
   15d54:	ldreq	r0, [r0, #20]
   15d58:	addeq	r0, r2, r0
   15d5c:	subeq	r0, r0, r1
   15d60:	popeq	{fp, pc}
   15d64:	movw	r0, #30759	; 0x7827
   15d68:	movt	r0, #1
   15d6c:	movw	r1, #28690	; 0x7012
   15d70:	movt	r1, #1
   15d74:	movw	r3, #32479	; 0x7edf
   15d78:	movt	r3, #1
   15d7c:	movw	r2, #1794	; 0x702
   15d80:	bl	124b0 <__assert_fail@plt>

00015d84 <flatcc_builder_table_add_copy@@Base>:
   15d84:	push	{r4, r5, r6, sl, fp, lr}
   15d88:	add	fp, sp, #16
   15d8c:	mov	r4, r3
   15d90:	mov	r5, r2
   15d94:	ldr	r3, [fp, #8]
   15d98:	mov	r2, r4
   15d9c:	bl	154bc <flatcc_builder_table_add@@Base>
   15da0:	mov	r6, r0
   15da4:	cmp	r0, #0
   15da8:	beq	15dbc <flatcc_builder_table_add_copy@@Base+0x38>
   15dac:	mov	r0, r6
   15db0:	mov	r1, r5
   15db4:	mov	r2, r4
   15db8:	bl	123fc <memcpy@plt>
   15dbc:	mov	r0, r6
   15dc0:	pop	{r4, r5, r6, sl, fp, pc}
   15dc4:	push	{r4, r5, r6, r7, fp, lr}
   15dc8:	add	fp, sp, #16
   15dcc:	mov	r5, r1
   15dd0:	mov	r4, r0
   15dd4:	ldr	r0, [r0, #20]
   15dd8:	ldr	r1, [r4, #24]
   15ddc:	add	r0, r0, #3
   15de0:	bic	r7, r0, #3
   15de4:	add	r6, r7, #4
   15de8:	str	r6, [r4, #20]
   15dec:	cmp	r6, r1
   15df0:	bls	15e14 <flatcc_builder_table_add_copy@@Base+0x90>
   15df4:	mov	r0, r4
   15df8:	mov	r1, r6
   15dfc:	movw	r2, #65532	; 0xfffc
   15e00:	bl	1615c <flatcc_builder_get_emit_context@@Base+0x18>
   15e04:	mov	r1, r0
   15e08:	mov	r0, #0
   15e0c:	cmp	r1, #0
   15e10:	popne	{r4, r5, r6, r7, fp, pc}
   15e14:	ldr	r0, [r4, #4]
   15e18:	add	r0, r0, r5, lsl #1
   15e1c:	strh	r6, [r0]
   15e20:	ldrh	r0, [r4, #8]
   15e24:	cmp	r0, r5
   15e28:	addls	r0, r5, #1
   15e2c:	strhls	r0, [r4, #8]
   15e30:	ldr	r0, [r4]
   15e34:	add	r1, r0, #2
   15e38:	str	r1, [r4]
   15e3c:	strh	r7, [r0]
   15e40:	ldr	r0, [r4, #16]
   15e44:	add	r0, r0, r7
   15e48:	pop	{r4, r5, r6, r7, fp, pc}

00015e4c <flatcc_builder_push_buffer_alignment@@Base>:
   15e4c:	ldrh	r1, [r0, #128]	; 0x80
   15e50:	mov	r2, #4
   15e54:	strh	r2, [r0, #128]	; 0x80
   15e58:	mov	r0, r1
   15e5c:	bx	lr

00015e60 <flatcc_builder_pop_buffer_alignment@@Base>:
   15e60:	b	138f8 <flatcc_builder_create_buffer@@Base+0x1cc>

00015e64 <flatcc_builder_get_buffer_alignment@@Base>:
   15e64:	ldrh	r0, [r0, #128]	; 0x80
   15e68:	bx	lr

00015e6c <flatcc_builder_set_vtable_clustering@@Base>:
   15e6c:	clz	r1, r1
   15e70:	lsr	r1, r1, #5
   15e74:	str	r1, [r0, #180]	; 0xb4
   15e78:	bx	lr

00015e7c <flatcc_builder_set_block_align@@Base>:
   15e7c:	strh	r1, [r0, #132]	; 0x84
   15e80:	bx	lr

00015e84 <flatcc_builder_get_level@@Base>:
   15e84:	ldr	r0, [r0, #156]	; 0x9c
   15e88:	bx	lr

00015e8c <flatcc_builder_set_max_level@@Base>:
   15e8c:	str	r1, [r0, #176]	; 0xb0
   15e90:	ldr	r2, [r0, #160]	; 0xa0
   15e94:	cmp	r2, r1
   15e98:	strlt	r1, [r0, #160]	; 0xa0
   15e9c:	bx	lr

00015ea0 <flatcc_builder_get_buffer_size@@Base>:
   15ea0:	ldr	r1, [r0, #136]	; 0x88
   15ea4:	ldr	r0, [r0, #140]	; 0x8c
   15ea8:	sub	r0, r0, r1
   15eac:	bx	lr

00015eb0 <flatcc_builder_get_buffer_start@@Base>:
   15eb0:	ldr	r0, [r0, #136]	; 0x88
   15eb4:	bx	lr

00015eb8 <flatcc_builder_get_buffer_end@@Base>:
   15eb8:	ldr	r0, [r0, #140]	; 0x8c
   15ebc:	bx	lr

00015ec0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15ec0:	str	r1, [r0, #172]	; 0xac
   15ec4:	bx	lr

00015ec8 <flatcc_builder_set_identifier@@Base>:
   15ec8:	movw	r2, #28160	; 0x6e00
   15ecc:	movt	r2, #1
   15ed0:	cmp	r1, #0
   15ed4:	movne	r2, r1
   15ed8:	ldr	r1, [r2]
   15edc:	str	r1, [r0, #168]	; 0xa8
   15ee0:	bx	lr

00015ee4 <flatcc_builder_get_type@@Base>:
   15ee4:	ldr	r0, [r0, #32]
   15ee8:	cmp	r0, #0
   15eec:	ldrhne	r0, [r0, #14]
   15ef0:	moveq	r0, #0
   15ef4:	bx	lr

00015ef8 <flatcc_builder_get_type_at@@Base>:
   15ef8:	mov	r2, r0
   15efc:	mov	r0, #0
   15f00:	cmp	r1, #1
   15f04:	blt	15f28 <flatcc_builder_get_type_at@@Base+0x30>
   15f08:	ldr	r3, [r2, #156]	; 0x9c
   15f0c:	cmp	r3, r1
   15f10:	bxlt	lr
   15f14:	sub	r0, r1, r3
   15f18:	add	r0, r0, r0, lsl #3
   15f1c:	ldr	r1, [r2, #32]
   15f20:	add	r0, r1, r0, lsl #2
   15f24:	ldrh	r0, [r0, #14]
   15f28:	bx	lr

00015f2c <flatcc_builder_get_direct_buffer@@Base>:
   15f2c:	ldr	r2, [r0, #184]	; 0xb8
   15f30:	cmp	r2, #0
   15f34:	beq	15f40 <flatcc_builder_get_direct_buffer@@Base+0x14>
   15f38:	add	r0, r0, #188	; 0xbc
   15f3c:	b	15f54 <flatcc_builder_get_direct_buffer@@Base+0x28>
   15f40:	cmp	r1, #0
   15f44:	movne	r0, #0
   15f48:	strne	r0, [r1]
   15f4c:	mov	r0, #0
   15f50:	bx	lr
   15f54:	ldm	r0, {r2, r3}
   15f58:	cmp	r2, r3
   15f5c:	beq	15f70 <flatcc_builder_get_direct_buffer@@Base+0x44>
   15f60:	mov	r0, #0
   15f64:	cmp	r1, #0
   15f68:	strne	r0, [r1]
   15f6c:	bx	lr
   15f70:	cmp	r1, #0
   15f74:	ldrne	r2, [r0, #24]
   15f78:	strne	r2, [r1]
   15f7c:	ldr	r0, [r0, #8]
   15f80:	bx	lr

00015f84 <flatcc_builder_copy_buffer@@Base>:
   15f84:	push	{fp, lr}
   15f88:	mov	fp, sp
   15f8c:	ldr	r3, [r0, #184]	; 0xb8
   15f90:	cmp	r3, #0
   15f94:	beq	15fc8 <flatcc_builder_copy_buffer@@Base+0x44>
   15f98:	add	r0, r0, #188	; 0xbc
   15f9c:	bl	16694 <flatcc_emitter_copy_buffer@@Base>
   15fa0:	cmp	r0, #0
   15fa4:	popne	{fp, pc}
   15fa8:	movw	r0, #28075	; 0x6dab
   15fac:	movt	r0, #1
   15fb0:	movw	r1, #28690	; 0x7012
   15fb4:	movt	r1, #1
   15fb8:	movw	r3, #32618	; 0x7f6a
   15fbc:	movt	r3, #1
   15fc0:	movw	r2, #1926	; 0x786
   15fc4:	bl	124b0 <__assert_fail@plt>
   15fc8:	mov	r0, #0
   15fcc:	pop	{fp, pc}

00015fd0 <flatcc_builder_finalize_buffer@@Base>:
   15fd0:	push	{r4, r5, r6, sl, fp, lr}
   15fd4:	add	fp, sp, #16
   15fd8:	mov	r6, r1
   15fdc:	mov	r4, r0
   15fe0:	bl	15ea0 <flatcc_builder_get_buffer_size@@Base>
   15fe4:	mov	r5, r0
   15fe8:	cmp	r6, #0
   15fec:	strne	r5, [r6]
   15ff0:	mov	r0, r5
   15ff4:	bl	1242c <malloc@plt>
   15ff8:	cmp	r0, #0
   15ffc:	beq	16040 <flatcc_builder_finalize_buffer@@Base+0x70>
   16000:	mov	r6, r0
   16004:	mov	r0, r4
   16008:	mov	r1, r6
   1600c:	mov	r2, r5
   16010:	bl	15f84 <flatcc_builder_copy_buffer@@Base>
   16014:	cmp	r0, #0
   16018:	movne	r0, r6
   1601c:	popne	{r4, r5, r6, sl, fp, pc}
   16020:	movw	r0, #33208	; 0x81b8
   16024:	movt	r0, #1
   16028:	movw	r1, #28690	; 0x7012
   1602c:	movt	r1, #1
   16030:	movw	r3, #32687	; 0x7faf
   16034:	movt	r3, #1
   16038:	movw	r2, #1948	; 0x79c
   1603c:	bl	124b0 <__assert_fail@plt>
   16040:	movw	r0, #33208	; 0x81b8
   16044:	movt	r0, #1
   16048:	movw	r1, #28690	; 0x7012
   1604c:	movt	r1, #1
   16050:	movw	r3, #32687	; 0x7faf
   16054:	movt	r3, #1
   16058:	movw	r2, #1944	; 0x798
   1605c:	bl	124b0 <__assert_fail@plt>

00016060 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16060:	push	{r4, r5, r6, r7, fp, lr}
   16064:	add	fp, sp, #16
   16068:	mov	r4, r1
   1606c:	mov	r5, r0
   16070:	bl	15ea0 <flatcc_builder_get_buffer_size@@Base>
   16074:	mov	r6, r0
   16078:	cmp	r4, #0
   1607c:	strne	r6, [r4]
   16080:	mov	r0, r5
   16084:	bl	15e64 <flatcc_builder_get_buffer_alignment@@Base>
   16088:	add	r1, r6, r0
   1608c:	sub	r1, r1, #1
   16090:	rsb	r2, r0, #0
   16094:	and	r7, r1, r2
   16098:	mov	r1, r7
   1609c:	bl	160e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   160a0:	cmp	r0, #0
   160a4:	beq	160d4 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   160a8:	mov	r6, r0
   160ac:	mov	r0, r5
   160b0:	mov	r1, r6
   160b4:	mov	r2, r7
   160b8:	bl	15f84 <flatcc_builder_copy_buffer@@Base>
   160bc:	cmp	r0, #0
   160c0:	beq	160cc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   160c4:	mov	r0, r6
   160c8:	pop	{r4, r5, r6, r7, fp, pc}
   160cc:	mov	r0, r6
   160d0:	bl	123f0 <free@plt>
   160d4:	mov	r6, #0
   160d8:	cmp	r4, #0
   160dc:	strne	r6, [r4]
   160e0:	mov	r0, r6
   160e4:	pop	{r4, r5, r6, r7, fp, pc}
   160e8:	push	{fp, lr}
   160ec:	mov	fp, sp
   160f0:	sub	sp, sp, #8
   160f4:	mov	r2, r1
   160f8:	mov	r1, r0
   160fc:	mov	r0, #0
   16100:	str	r0, [sp, #4]
   16104:	cmp	r1, #4
   16108:	movls	r1, #4
   1610c:	add	r0, sp, #4
   16110:	bl	12474 <posix_memalign@plt>
   16114:	cmp	r0, #0
   16118:	ldrne	r0, [sp, #4]
   1611c:	cmpne	r0, #0
   16120:	beq	16130 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   16124:	bl	123f0 <free@plt>
   16128:	mov	r0, #0
   1612c:	str	r0, [sp, #4]
   16130:	ldr	r0, [sp, #4]
   16134:	mov	sp, fp
   16138:	pop	{fp, pc}

0001613c <flatcc_builder_aligned_alloc@@Base>:
   1613c:	b	160e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00016140 <flatcc_builder_aligned_free@@Base>:
   16140:	b	123f0 <free@plt>

00016144 <flatcc_builder_get_emit_context@@Base>:
   16144:	ldr	r0, [r0, #36]	; 0x24
   16148:	bx	lr
   1614c:	ldr	r0, [r0, #140]	; 0x8c
   16150:	sub	r1, r1, #1
   16154:	and	r0, r0, r1
   16158:	bx	lr
   1615c:	push	{r4, r5, r6, sl, fp, lr}
   16160:	add	fp, sp, #16
   16164:	sub	sp, sp, #8
   16168:	mov	r6, r2
   1616c:	mov	r5, r0
   16170:	ldr	r2, [r0, #28]
   16174:	ldr	r0, [r0, #40]	; 0x28
   16178:	ldr	r4, [r5, #48]	; 0x30
   1617c:	mov	r3, #1
   16180:	str	r3, [sp]
   16184:	add	r2, r2, r1
   16188:	add	r1, r5, #60	; 0x3c
   1618c:	mov	r3, #1
   16190:	blx	r4
   16194:	mov	r1, r0
   16198:	mvn	r0, #0
   1619c:	cmp	r1, #0
   161a0:	beq	161ac <flatcc_builder_get_emit_context@@Base+0x68>
   161a4:	sub	sp, fp, #16
   161a8:	pop	{r4, r5, r6, sl, fp, pc}
   161ac:	mov	r0, r5
   161b0:	mov	r1, r6
   161b4:	bl	13d08 <flatcc_builder_start_struct@@Base+0x4c>
   161b8:	mov	r0, #0
   161bc:	sub	sp, fp, #16
   161c0:	pop	{r4, r5, r6, sl, fp, pc}
   161c4:	push	{r4, r5, r6, sl, fp, lr}
   161c8:	add	fp, sp, #16
   161cc:	sub	sp, sp, #8
   161d0:	mov	r4, r0
   161d4:	ldr	r0, [r0, #124]	; 0x7c
   161d8:	cmp	r0, #0
   161dc:	bne	1627c <flatcc_builder_get_emit_context@@Base+0x138>
   161e0:	mov	r0, #0
   161e4:	str	r0, [sp]
   161e8:	mov	r6, #16
   161ec:	mov	r0, r4
   161f0:	mov	r1, #6
   161f4:	mov	r2, #0
   161f8:	mov	r3, #16
   161fc:	bl	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   16200:	mvn	r5, #0
   16204:	cmp	r0, #0
   16208:	beq	16270 <flatcc_builder_get_emit_context@@Base+0x12c>
   1620c:	add	r1, r4, #92	; 0x5c
   16210:	str	r6, [r4, #124]	; 0x7c
   16214:	ldr	r0, [r4, #40]	; 0x28
   16218:	ldr	ip, [r4, #48]	; 0x30
   1621c:	mov	r2, #5
   16220:	str	r2, [sp]
   16224:	mov	r6, #256	; 0x100
   16228:	mov	r2, #256	; 0x100
   1622c:	mov	r3, #1
   16230:	blx	ip
   16234:	cmp	r0, #0
   16238:	bne	16270 <flatcc_builder_get_emit_context@@Base+0x12c>
   1623c:	ldr	r0, [r4, #96]	; 0x60
   16240:	mov	r1, r6
   16244:	lsl	r6, r6, #1
   16248:	cmp	r0, r1, lsl #1
   1624c:	bcs	16240 <flatcc_builder_get_emit_context@@Base+0xfc>
   16250:	lsr	r1, r1, #2
   16254:	mvn	r0, #0
   16258:	mov	r2, #1
   1625c:	add	r0, r0, #1
   16260:	cmp	r1, r2, lsl r0
   16264:	bhi	1625c <flatcc_builder_get_emit_context@@Base+0x118>
   16268:	str	r0, [r4, #116]	; 0x74
   1626c:	mov	r5, #0
   16270:	mov	r0, r5
   16274:	sub	sp, fp, #16
   16278:	pop	{r4, r5, r6, sl, fp, pc}
   1627c:	movw	r0, #33148	; 0x817c
   16280:	movt	r0, #1
   16284:	movw	r1, #28690	; 0x7012
   16288:	movt	r1, #1
   1628c:	movw	r3, #33163	; 0x818b
   16290:	movt	r3, #1
   16294:	movw	r2, #342	; 0x156
   16298:	bl	124b0 <__assert_fail@plt>

0001629c <flatcc_emitter_recycle_page@@Base>:
   1629c:	ldr	ip, [r0]
   162a0:	mvn	r2, #0
   162a4:	cmp	ip, r1
   162a8:	beq	162f0 <flatcc_emitter_recycle_page@@Base+0x54>
   162ac:	ldr	r3, [r0, #4]
   162b0:	cmp	r3, r1
   162b4:	beq	162f0 <flatcc_emitter_recycle_page@@Base+0x54>
   162b8:	ldr	r2, [r1, #2944]	; 0xb80
   162bc:	ldr	r3, [r1, #2948]	; 0xb84
   162c0:	str	r3, [r2, #2948]	; 0xb84
   162c4:	ldr	r2, [r1, #2944]	; 0xb80
   162c8:	ldr	r3, [r1, #2948]	; 0xb84
   162cc:	str	r2, [r3, #2944]	; 0xb80
   162d0:	ldr	r2, [ip, #2948]	; 0xb84
   162d4:	str	r2, [r1, #2948]	; 0xb84
   162d8:	ldr	r0, [r0]
   162dc:	str	r0, [r1, #2944]	; 0xb80
   162e0:	str	r1, [r2, #2944]	; 0xb80
   162e4:	ldr	r0, [r1, #2944]	; 0xb80
   162e8:	str	r1, [r0, #2948]	; 0xb84
   162ec:	mov	r2, #0
   162f0:	mov	r0, r2
   162f4:	bx	lr

000162f8 <flatcc_emitter_reset@@Base>:
   162f8:	push	{r4, sl, fp, lr}
   162fc:	add	fp, sp, #8
   16300:	mov	r4, r0
   16304:	ldr	r0, [r0]
   16308:	cmp	r0, #0
   1630c:	beq	163b4 <flatcc_emitter_reset@@Base+0xbc>
   16310:	mov	r1, #1472	; 0x5c0
   16314:	add	r2, r0, #1472	; 0x5c0
   16318:	stmib	r4, {r0, r2}
   1631c:	str	r1, [r4, #12]
   16320:	str	r2, [r4, #16]
   16324:	str	r1, [r4, #20]
   16328:	movw	r1, #64064	; 0xfa40
   1632c:	movt	r1, #65535	; 0xffff
   16330:	str	r1, [r0, #2952]	; 0xb88
   16334:	ldr	r0, [r4, #32]
   16338:	cmp	r0, #0
   1633c:	bne	16348 <flatcc_emitter_reset@@Base+0x50>
   16340:	ldr	r0, [r4, #24]
   16344:	str	r0, [r4, #32]
   16348:	add	r2, r4, #24
   1634c:	ldm	r2, {r0, r1, r2}
   16350:	mov	r3, #0
   16354:	str	r3, [r4, #24]
   16358:	add	r2, r2, r2, lsl #1
   1635c:	lsr	r2, r2, #2
   16360:	add	r0, r2, r0, lsr #2
   16364:	str	r0, [r4, #32]
   16368:	cmp	r1, r0, lsl #1
   1636c:	popls	{r4, sl, fp, pc}
   16370:	ldr	r2, [r4]
   16374:	ldr	r1, [r4, #4]
   16378:	ldr	r0, [r1, #2944]	; 0xb80
   1637c:	cmp	r0, r2
   16380:	beq	163b4 <flatcc_emitter_reset@@Base+0xbc>
   16384:	ldr	r2, [r0, #2944]	; 0xb80
   16388:	str	r2, [r1, #2944]	; 0xb80
   1638c:	ldr	r1, [r0, #2944]	; 0xb80
   16390:	ldr	r2, [r4, #4]
   16394:	str	r2, [r1, #2948]	; 0xb84
   16398:	bl	123f0 <free@plt>
   1639c:	ldr	r0, [r4, #28]
   163a0:	ldr	r1, [r4, #32]
   163a4:	sub	r0, r0, #2944	; 0xb80
   163a8:	str	r0, [r4, #28]
   163ac:	cmp	r0, r1, lsl #1
   163b0:	bhi	16370 <flatcc_emitter_reset@@Base+0x78>
   163b4:	pop	{r4, sl, fp, pc}

000163b8 <flatcc_emitter_clear@@Base>:
   163b8:	push	{r4, r5, r6, sl, fp, lr}
   163bc:	add	fp, sp, #16
   163c0:	ldr	r5, [r0]
   163c4:	cmp	r5, #0
   163c8:	beq	16418 <flatcc_emitter_clear@@Base+0x60>
   163cc:	mov	r4, r0
   163d0:	ldr	r0, [r5, #2948]	; 0xb84
   163d4:	mov	r6, #0
   163d8:	str	r6, [r0, #2944]	; 0xb80
   163dc:	ldr	r0, [r5, #2944]	; 0xb80
   163e0:	cmp	r0, #0
   163e4:	beq	163f8 <flatcc_emitter_clear@@Base+0x40>
   163e8:	mov	r5, r0
   163ec:	ldr	r0, [r0, #2948]	; 0xb84
   163f0:	bl	123f0 <free@plt>
   163f4:	b	163dc <flatcc_emitter_clear@@Base+0x24>
   163f8:	mov	r0, r5
   163fc:	bl	123f0 <free@plt>
   16400:	vmov.i32	q8, #0	; 0x00000000
   16404:	add	r0, r4, #16
   16408:	vst1.32	{d16-d17}, [r0]
   1640c:	mov	r0, #32
   16410:	vst1.32	{d16-d17}, [r4], r0
   16414:	str	r6, [r4]
   16418:	pop	{r4, r5, r6, sl, fp, pc}

0001641c <flatcc_emitter@@Base>:
   1641c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16420:	add	fp, sp, #24
   16424:	mov	r4, r2
   16428:	mov	r5, r1
   1642c:	mov	r6, r0
   16430:	ldr	r1, [r0, #24]
   16434:	ldr	r0, [fp, #8]
   16438:	add	r1, r1, r0
   1643c:	str	r1, [r6, #24]
   16440:	mov	r1, r6
   16444:	cmn	r3, #1
   16448:	ble	16488 <flatcc_emitter@@Base+0x6c>
   1644c:	ldr	r2, [r1, #20]!
   16450:	cmp	r2, r0
   16454:	bcs	164d0 <flatcc_emitter@@Base+0xb4>
   16458:	mov	r8, #0
   1645c:	cmp	r4, #0
   16460:	beq	16520 <flatcc_emitter@@Base+0x104>
   16464:	ldm	r5, {r1, r2}
   16468:	mov	r0, r6
   1646c:	bl	165e4 <flatcc_emitter@@Base+0x1c8>
   16470:	cmp	r0, #0
   16474:	bne	164c4 <flatcc_emitter@@Base+0xa8>
   16478:	subs	r4, r4, #1
   1647c:	add	r5, r5, #8
   16480:	bne	16464 <flatcc_emitter@@Base+0x48>
   16484:	b	16520 <flatcc_emitter@@Base+0x104>
   16488:	ldr	r2, [r1, #12]!
   1648c:	cmp	r2, r0
   16490:	bcs	164e0 <flatcc_emitter@@Base+0xc4>
   16494:	add	r0, r5, r4, lsl #3
   16498:	sub	r5, r0, #4
   1649c:	rsb	r4, r4, #1
   164a0:	cmp	r4, #1
   164a4:	beq	16528 <flatcc_emitter@@Base+0x10c>
   164a8:	ldmda	r5, {r1, r2}
   164ac:	mov	r0, r6
   164b0:	bl	16534 <flatcc_emitter@@Base+0x118>
   164b4:	sub	r5, r5, #8
   164b8:	add	r4, r4, #1
   164bc:	cmp	r0, #0
   164c0:	beq	164a0 <flatcc_emitter@@Base+0x84>
   164c4:	mvn	r8, #0
   164c8:	mov	r0, r8
   164cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   164d0:	ldr	r7, [r6, #16]
   164d4:	add	r3, r7, r0
   164d8:	str	r3, [r6, #16]
   164dc:	b	164ec <flatcc_emitter@@Base+0xd0>
   164e0:	ldr	r3, [r6, #8]
   164e4:	sub	r7, r3, r0
   164e8:	str	r7, [r6, #8]
   164ec:	sub	r0, r2, r0
   164f0:	str	r0, [r1]
   164f4:	mov	r8, #0
   164f8:	cmp	r4, #0
   164fc:	beq	16520 <flatcc_emitter@@Base+0x104>
   16500:	ldm	r5, {r1, r2}
   16504:	mov	r0, r7
   16508:	bl	123fc <memcpy@plt>
   1650c:	ldr	r0, [r5, #4]
   16510:	add	r7, r7, r0
   16514:	add	r5, r5, #8
   16518:	subs	r4, r4, #1
   1651c:	bne	16500 <flatcc_emitter@@Base+0xe4>
   16520:	mov	r0, r8
   16524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16528:	mov	r8, #0
   1652c:	mov	r0, r8
   16530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16534:	push	{r4, r5, r6, r7, fp, lr}
   16538:	add	fp, sp, #16
   1653c:	cmp	r2, #0
   16540:	beq	165d0 <flatcc_emitter@@Base+0x1b4>
   16544:	mov	r4, r2
   16548:	mov	r5, r0
   1654c:	clz	r0, r2
   16550:	lsr	r7, r0, #5
   16554:	add	r6, r1, r2
   16558:	ldr	r0, [r5, #12]
   1655c:	cmp	r4, r0
   16560:	bls	16590 <flatcc_emitter@@Base+0x174>
   16564:	cmp	r0, #0
   16568:	bne	16598 <flatcc_emitter@@Base+0x17c>
   1656c:	mov	r0, r5
   16570:	bl	16750 <flatcc_emitter_copy_buffer@@Base+0xbc>
   16574:	cmp	r0, #0
   16578:	mov	r1, r0
   1657c:	movwne	r1, #1
   16580:	orr	r1, r1, r7
   16584:	tst	r1, #1
   16588:	beq	16558 <flatcc_emitter@@Base+0x13c>
   1658c:	b	165d8 <flatcc_emitter@@Base+0x1bc>
   16590:	mov	r7, r4
   16594:	b	1659c <flatcc_emitter@@Base+0x180>
   16598:	mov	r7, r0
   1659c:	sub	r0, r0, r7
   165a0:	str	r0, [r5, #12]
   165a4:	ldr	r0, [r5, #8]
   165a8:	sub	r0, r0, r7
   165ac:	str	r0, [r5, #8]
   165b0:	sub	r6, r6, r7
   165b4:	mov	r1, r6
   165b8:	mov	r2, r7
   165bc:	bl	123fc <memcpy@plt>
   165c0:	subs	r4, r4, r7
   165c4:	clz	r0, r4
   165c8:	lsr	r7, r0, #5
   165cc:	bne	16558 <flatcc_emitter@@Base+0x13c>
   165d0:	mov	r0, #0
   165d4:	pop	{r4, r5, r6, r7, fp, pc}
   165d8:	cmp	r0, #0
   165dc:	mvnne	r0, #0
   165e0:	pop	{r4, r5, r6, r7, fp, pc}
   165e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   165e8:	add	fp, sp, #24
   165ec:	cmp	r2, #0
   165f0:	beq	16680 <flatcc_emitter@@Base+0x264>
   165f4:	mov	r4, r2
   165f8:	mov	r8, r1
   165fc:	mov	r6, r0
   16600:	clz	r0, r2
   16604:	lsr	r5, r0, #5
   16608:	ldr	r7, [r6, #20]
   1660c:	cmp	r4, r7
   16610:	bls	16640 <flatcc_emitter@@Base+0x224>
   16614:	cmp	r7, #0
   16618:	bne	16644 <flatcc_emitter@@Base+0x228>
   1661c:	mov	r0, r6
   16620:	bl	16840 <flatcc_emitter_copy_buffer@@Base+0x1ac>
   16624:	cmp	r0, #0
   16628:	mov	r1, r0
   1662c:	movwne	r1, #1
   16630:	orr	r1, r1, r5
   16634:	tst	r1, #1
   16638:	beq	16608 <flatcc_emitter@@Base+0x1ec>
   1663c:	b	16688 <flatcc_emitter@@Base+0x26c>
   16640:	mov	r7, r4
   16644:	ldr	r0, [r6, #16]
   16648:	mov	r1, r8
   1664c:	mov	r2, r7
   16650:	bl	123fc <memcpy@plt>
   16654:	ldr	r0, [r6, #16]
   16658:	ldr	r1, [r6, #20]
   1665c:	add	r0, r0, r7
   16660:	sub	r1, r1, r7
   16664:	str	r0, [r6, #16]
   16668:	str	r1, [r6, #20]
   1666c:	add	r8, r8, r7
   16670:	subs	r4, r4, r7
   16674:	clz	r0, r4
   16678:	lsr	r5, r0, #5
   1667c:	bne	16608 <flatcc_emitter@@Base+0x1ec>
   16680:	mov	r0, #0
   16684:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16688:	cmp	r0, #0
   1668c:	mvnne	r0, #0
   16690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016694 <flatcc_emitter_copy_buffer@@Base>:
   16694:	push	{r4, r5, r6, sl, fp, lr}
   16698:	add	fp, sp, #16
   1669c:	mov	r3, r2
   166a0:	ldr	r2, [r0, #24]
   166a4:	mov	r5, #0
   166a8:	cmp	r2, r3
   166ac:	bhi	16734 <flatcc_emitter_copy_buffer@@Base+0xa0>
   166b0:	mov	r4, r0
   166b4:	ldr	r0, [r0]
   166b8:	cmp	r0, #0
   166bc:	beq	16734 <flatcc_emitter_copy_buffer@@Base+0xa0>
   166c0:	mov	r6, r1
   166c4:	ldr	r1, [r4, #4]
   166c8:	cmp	r0, r1
   166cc:	beq	1673c <flatcc_emitter_copy_buffer@@Base+0xa8>
   166d0:	ldr	r1, [r4, #8]
   166d4:	ldr	r0, [r4, #12]
   166d8:	rsb	r5, r0, #2944	; 0xb80
   166dc:	mov	r0, r6
   166e0:	mov	r2, r5
   166e4:	bl	123fc <memcpy@plt>
   166e8:	add	r5, r6, r5
   166ec:	ldm	r4, {r0, r1}
   166f0:	ldr	r6, [r0, #2944]	; 0xb80
   166f4:	cmp	r6, r1
   166f8:	beq	16720 <flatcc_emitter_copy_buffer@@Base+0x8c>
   166fc:	mov	r0, r5
   16700:	mov	r1, r6
   16704:	mov	r2, #2944	; 0xb80
   16708:	bl	123fc <memcpy@plt>
   1670c:	add	r5, r5, #2944	; 0xb80
   16710:	ldr	r6, [r6, #2944]	; 0xb80
   16714:	ldr	r0, [r4, #4]
   16718:	cmp	r6, r0
   1671c:	bne	166fc <flatcc_emitter_copy_buffer@@Base+0x68>
   16720:	ldr	r0, [r4, #20]
   16724:	rsb	r2, r0, #2944	; 0xb80
   16728:	mov	r0, r5
   1672c:	mov	r1, r6
   16730:	bl	123fc <memcpy@plt>
   16734:	mov	r0, r5
   16738:	pop	{r4, r5, r6, sl, fp, pc}
   1673c:	ldr	r1, [r4, #8]
   16740:	mov	r0, r6
   16744:	bl	123fc <memcpy@plt>
   16748:	mov	r0, r6
   1674c:	pop	{r4, r5, r6, sl, fp, pc}
   16750:	push	{r4, r5, fp, lr}
   16754:	add	fp, sp, #8
   16758:	mov	r4, r0
   1675c:	ldr	r5, [r0]
   16760:	cmp	r5, #0
   16764:	beq	1678c <flatcc_emitter_copy_buffer@@Base+0xf8>
   16768:	ldr	r0, [r5, #2948]	; 0xb84
   1676c:	ldr	r1, [r4, #4]
   16770:	cmp	r0, r1
   16774:	beq	1678c <flatcc_emitter_copy_buffer@@Base+0xf8>
   16778:	ldr	r1, [r5, #2952]	; 0xb88
   1677c:	sub	r1, r1, #2944	; 0xb80
   16780:	str	r1, [r0, #2952]	; 0xb88
   16784:	ldr	r0, [r5, #2948]	; 0xb84
   16788:	b	167c8 <flatcc_emitter_copy_buffer@@Base+0x134>
   1678c:	movw	r0, #2956	; 0xb8c
   16790:	bl	1242c <malloc@plt>
   16794:	cmp	r0, #0
   16798:	beq	167f8 <flatcc_emitter_copy_buffer@@Base+0x164>
   1679c:	ldr	r1, [r4, #28]
   167a0:	add	r1, r1, #2944	; 0xb80
   167a4:	str	r1, [r4, #28]
   167a8:	cmp	r5, #0
   167ac:	beq	16800 <flatcc_emitter_copy_buffer@@Base+0x16c>
   167b0:	ldm	r4, {r1, r2}
   167b4:	str	r1, [r0, #2944]	; 0xb80
   167b8:	str	r2, [r0, #2948]	; 0xb84
   167bc:	str	r0, [r1, #2948]	; 0xb84
   167c0:	ldr	r1, [r4, #4]
   167c4:	str	r0, [r1, #2944]	; 0xb80
   167c8:	str	r0, [r4]
   167cc:	mov	r0, #2944	; 0xb80
   167d0:	ldr	r1, [r4]
   167d4:	add	r2, r1, #2944	; 0xb80
   167d8:	str	r2, [r4, #8]
   167dc:	str	r0, [r4, #12]
   167e0:	ldr	r0, [r1, #2944]	; 0xb80
   167e4:	ldr	r0, [r0, #2952]	; 0xb88
   167e8:	sub	r0, r0, #2944	; 0xb80
   167ec:	str	r0, [r1, #2952]	; 0xb88
   167f0:	mov	r0, #0
   167f4:	pop	{r4, r5, fp, pc}
   167f8:	mvn	r0, #0
   167fc:	pop	{r4, r5, fp, pc}
   16800:	str	r0, [r4, #4]
   16804:	str	r0, [r4]
   16808:	mov	r1, #1472	; 0x5c0
   1680c:	str	r1, [r4, #20]
   16810:	str	r1, [r4, #12]
   16814:	ldr	r1, [r4]
   16818:	add	r1, r1, #1472	; 0x5c0
   1681c:	str	r1, [r4, #16]
   16820:	str	r1, [r4, #8]
   16824:	movw	r1, #64064	; 0xfa40
   16828:	movt	r1, #65535	; 0xffff
   1682c:	str	r0, [r0, #2944]	; 0xb80
   16830:	str	r0, [r0, #2948]	; 0xb84
   16834:	str	r1, [r0, #2952]	; 0xb88
   16838:	mov	r0, #0
   1683c:	pop	{r4, r5, fp, pc}
   16840:	push	{r4, r5, fp, lr}
   16844:	add	fp, sp, #8
   16848:	mov	r4, r0
   1684c:	ldr	r5, [r0, #4]
   16850:	cmp	r5, #0
   16854:	beq	16868 <flatcc_emitter_copy_buffer@@Base+0x1d4>
   16858:	ldr	r0, [r5, #2944]	; 0xb80
   1685c:	ldr	r1, [r4]
   16860:	cmp	r0, r1
   16864:	bne	168a0 <flatcc_emitter_copy_buffer@@Base+0x20c>
   16868:	movw	r0, #2956	; 0xb8c
   1686c:	bl	1242c <malloc@plt>
   16870:	cmp	r0, #0
   16874:	beq	168cc <flatcc_emitter_copy_buffer@@Base+0x238>
   16878:	ldr	r1, [r4, #28]
   1687c:	add	r1, r1, #2944	; 0xb80
   16880:	str	r1, [r4, #28]
   16884:	cmp	r5, #0
   16888:	beq	168d4 <flatcc_emitter_copy_buffer@@Base+0x240>
   1688c:	ldr	r1, [r4]
   16890:	str	r1, [r0, #2944]	; 0xb80
   16894:	str	r5, [r0, #2948]	; 0xb84
   16898:	str	r0, [r1, #2948]	; 0xb84
   1689c:	str	r0, [r5, #2944]	; 0xb80
   168a0:	str	r0, [r4, #4]
   168a4:	mov	r0, #2944	; 0xb80
   168a8:	ldr	r1, [r4, #4]
   168ac:	str	r1, [r4, #16]
   168b0:	str	r0, [r4, #20]
   168b4:	ldr	r0, [r1, #2948]	; 0xb84
   168b8:	ldr	r0, [r0, #2952]	; 0xb88
   168bc:	add	r0, r0, #2944	; 0xb80
   168c0:	str	r0, [r1, #2952]	; 0xb88
   168c4:	mov	r0, #0
   168c8:	pop	{r4, r5, fp, pc}
   168cc:	mvn	r0, #0
   168d0:	pop	{r4, r5, fp, pc}
   168d4:	str	r0, [r4, #4]
   168d8:	str	r0, [r4]
   168dc:	mov	r1, #1472	; 0x5c0
   168e0:	str	r1, [r4, #20]
   168e4:	str	r1, [r4, #12]
   168e8:	ldr	r1, [r4]
   168ec:	add	r1, r1, #1472	; 0x5c0
   168f0:	str	r1, [r4, #16]
   168f4:	str	r1, [r4, #8]
   168f8:	movw	r1, #64064	; 0xfa40
   168fc:	movt	r1, #65535	; 0xffff
   16900:	str	r0, [r0, #2944]	; 0xb80
   16904:	str	r0, [r0, #2948]	; 0xb84
   16908:	str	r1, [r0, #2952]	; 0xb88
   1690c:	mov	r0, #0
   16910:	pop	{r4, r5, fp, pc}

00016914 <__libc_csu_init@@Base>:
   16914:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16918:	mov	r7, r0
   1691c:	ldr	r6, [pc, #72]	; 1696c <__libc_csu_init@@Base+0x58>
   16920:	ldr	r5, [pc, #72]	; 16970 <__libc_csu_init@@Base+0x5c>
   16924:	add	r6, pc, r6
   16928:	add	r5, pc, r5
   1692c:	sub	r6, r6, r5
   16930:	mov	r8, r1
   16934:	mov	r9, r2
   16938:	bl	123c4 <printf@plt-0x20>
   1693c:	asrs	r6, r6, #2
   16940:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16944:	mov	r4, #0
   16948:	add	r4, r4, #1
   1694c:	ldr	r3, [r5], #4
   16950:	mov	r2, r9
   16954:	mov	r1, r8
   16958:	mov	r0, r7
   1695c:	blx	r3
   16960:	cmp	r6, r4
   16964:	bne	16948 <__libc_csu_init@@Base+0x34>
   16968:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1696c:	andeq	r2, r1, r0, ror #11
   16970:	ldrdeq	r2, [r1], -r8

00016974 <__libc_csu_fini@@Base>:
   16974:	bx	lr

Disassembly of section .fini:

00016978 <.fini>:
   16978:	push	{r3, lr}
   1697c:	pop	{r3, pc}
