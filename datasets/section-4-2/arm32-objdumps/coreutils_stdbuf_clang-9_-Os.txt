
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e8c <.init>:
   10e8c:	push	{r3, lr}
   10e90:	bl	11188 <__assert_fail@plt+0x48>
   10e94:	pop	{r3, pc}

Disassembly of section .plt:

00010e98 <calloc@plt-0x14>:
   10e98:	push	{lr}		; (str lr, [sp, #-4]!)
   10e9c:	ldr	lr, [pc, #4]	; 10ea8 <calloc@plt-0x4>
   10ea0:	add	lr, pc, lr
   10ea4:	ldr	pc, [lr, #8]!
   10ea8:	andeq	r6, r1, r8, asr r1

00010eac <calloc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #344]!	; 0x158

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #336]!	; 0x150

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #328]!	; 0x148

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #320]!	; 0x140

00010edc <fflush@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #312]!	; 0x138

00010ee8 <free@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #304]!	; 0x130

00010ef4 <_exit@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #296]!	; 0x128

00010f00 <memcpy@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #288]!	; 0x120

00010f0c <execvp@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #280]!	; 0x118

00010f18 <mbsinit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #272]!	; 0x110

00010f24 <dcgettext@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #264]!	; 0x108

00010f30 <realloc@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #256]!	; 0x100

00010f3c <textdomain@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #248]!	; 0xf8

00010f48 <iswprint@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #240]!	; 0xf0

00010f54 <readlink@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #232]!	; 0xe8

00010f60 <lseek64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #224]!	; 0xe0

00010f6c <__ctype_get_mb_cur_max@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #216]!	; 0xd8

00010f78 <__fpending@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #208]!	; 0xd0

00010f84 <ferror_unlocked@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #200]!	; 0xc8

00010f90 <mbrtowc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #192]!	; 0xc0

00010f9c <error@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #184]!	; 0xb8

00010fa8 <__asprintf_chk@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #176]!	; 0xb0

00010fb4 <getenv@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #168]!	; 0xa8

00010fc0 <malloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #160]!	; 0xa0

00010fcc <__libc_start_main@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #152]!	; 0x98

00010fd8 <__freading@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #144]!	; 0x90

00010fe4 <__gmon_start__@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #136]!	; 0x88

00010ff0 <getopt_long@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #128]!	; 0x80

00010ffc <__ctype_b_loc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #120]!	; 0x78

00011008 <exit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #112]!	; 0x70

00011014 <bcmp@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #104]!	; 0x68

00011020 <strlen@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #96]!	; 0x60

0001102c <strchr@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #88]!	; 0x58

00011038 <__errno_location@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #80]!	; 0x50

00011044 <__cxa_atexit@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #72]!	; 0x48

00011050 <memset@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #64]!	; 0x40

0001105c <__printf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #56]!	; 0x38

00011068 <fileno@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #48]!	; 0x30

00011074 <strtoumax@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #40]!	; 0x28

00011080 <__fprintf_chk@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #32]!

0001108c <access@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #24]!

00011098 <fclose@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #16]!

000110a4 <fseeko64@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #8]!

000110b0 <strtok@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #0]!

000110bc <setlocale@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #86016	; 0x15000
   110c4:	ldr	pc, [ip, #4088]!	; 0xff8

000110c8 <putenv@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #4080]!	; 0xff0

000110d4 <toupper@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #4072]!	; 0xfe8

000110e0 <strrchr@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110ec <nl_langinfo@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f8 <bindtextdomain@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #4048]!	; 0xfd0

00011104 <__xstat64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011110 <fputs@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #4032]!	; 0xfc0

0001111c <strncmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #4024]!	; 0xfb8

00011128 <abort@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #4016]!	; 0xfb0

00011134 <__mempcpy_chk@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011140 <__assert_fail@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #4000]!	; 0xfa0

Disassembly of section .text:

0001114c <.text>:
   1114c:	mov	fp, #0
   11150:	mov	lr, #0
   11154:	pop	{r1}		; (ldr r1, [sp], #4)
   11158:	mov	r2, sp
   1115c:	push	{r2}		; (str r2, [sp, #-4]!)
   11160:	push	{r0}		; (str r0, [sp, #-4]!)
   11164:	ldr	ip, [pc, #16]	; 1117c <__assert_fail@plt+0x3c>
   11168:	push	{ip}		; (str ip, [sp, #-4]!)
   1116c:	ldr	r0, [pc, #12]	; 11180 <__assert_fail@plt+0x40>
   11170:	ldr	r3, [pc, #12]	; 11184 <__assert_fail@plt+0x44>
   11174:	bl	10fcc <__libc_start_main@plt>
   11178:	bl	11128 <abort@plt>
   1117c:	ldrdeq	r5, [r1], -r4
   11180:	andeq	r1, r1, r8, lsl #10
   11184:	andeq	r5, r1, r4, ror r2
   11188:	ldr	r3, [pc, #20]	; 111a4 <__assert_fail@plt+0x64>
   1118c:	ldr	r2, [pc, #20]	; 111a8 <__assert_fail@plt+0x68>
   11190:	add	r3, pc, r3
   11194:	ldr	r2, [r3, r2]
   11198:	cmp	r2, #0
   1119c:	bxeq	lr
   111a0:	b	10fe4 <__gmon_start__@plt>
   111a4:	andeq	r5, r1, r8, ror #28
   111a8:	andeq	r0, r0, ip, ror #1
   111ac:	ldr	r0, [pc, #24]	; 111cc <__assert_fail@plt+0x8c>
   111b0:	ldr	r3, [pc, #24]	; 111d0 <__assert_fail@plt+0x90>
   111b4:	cmp	r3, r0
   111b8:	bxeq	lr
   111bc:	ldr	r3, [pc, #16]	; 111d4 <__assert_fail@plt+0x94>
   111c0:	cmp	r3, #0
   111c4:	bxeq	lr
   111c8:	bx	r3
   111cc:	andeq	r7, r2, r0, asr #2
   111d0:	andeq	r7, r2, r0, asr #2
   111d4:	andeq	r0, r0, r0
   111d8:	ldr	r0, [pc, #36]	; 11204 <__assert_fail@plt+0xc4>
   111dc:	ldr	r1, [pc, #36]	; 11208 <__assert_fail@plt+0xc8>
   111e0:	sub	r1, r1, r0
   111e4:	asr	r1, r1, #2
   111e8:	add	r1, r1, r1, lsr #31
   111ec:	asrs	r1, r1, #1
   111f0:	bxeq	lr
   111f4:	ldr	r3, [pc, #16]	; 1120c <__assert_fail@plt+0xcc>
   111f8:	cmp	r3, #0
   111fc:	bxeq	lr
   11200:	bx	r3
   11204:	andeq	r7, r2, r0, asr #2
   11208:	andeq	r7, r2, r0, asr #2
   1120c:	andeq	r0, r0, r0
   11210:	push	{r4, lr}
   11214:	ldr	r4, [pc, #24]	; 11234 <__assert_fail@plt+0xf4>
   11218:	ldrb	r3, [r4]
   1121c:	cmp	r3, #0
   11220:	popne	{r4, pc}
   11224:	bl	111ac <__assert_fail@plt+0x6c>
   11228:	mov	r3, #1
   1122c:	strb	r3, [r4]
   11230:	pop	{r4, pc}
   11234:	andeq	r7, r2, ip, asr r1
   11238:	b	111d8 <__assert_fail@plt+0x98>
   1123c:	push	{fp, lr}
   11240:	mov	fp, sp
   11244:	sub	sp, sp, #56	; 0x38
   11248:	mov	r8, r0
   1124c:	cmp	r0, #0
   11250:	bne	114c8 <__assert_fail@plt+0x388>
   11254:	movw	r1, #21299	; 0x5333
   11258:	mov	r0, #0
   1125c:	mov	r2, #5
   11260:	movt	r1, #1
   11264:	bl	10f24 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	movw	r0, #29072	; 0x7190
   11270:	movt	r0, #2
   11274:	ldr	r2, [r0]
   11278:	mov	r0, #1
   1127c:	bl	1105c <__printf_chk@plt>
   11280:	movw	r1, #21328	; 0x5350
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10f24 <dcgettext@plt>
   11294:	movw	r9, #29012	; 0x7154
   11298:	movt	r9, #2
   1129c:	ldr	r1, [r9]
   112a0:	bl	10eb8 <fputs_unlocked@plt>
   112a4:	movw	r1, #22660	; 0x5884
   112a8:	mov	r0, #0
   112ac:	mov	r2, #5
   112b0:	movt	r1, #1
   112b4:	bl	10f24 <dcgettext@plt>
   112b8:	ldr	r1, [r9]
   112bc:	bl	10eb8 <fputs_unlocked@plt>
   112c0:	movw	r1, #21403	; 0x539b
   112c4:	mov	r0, #0
   112c8:	mov	r2, #5
   112cc:	movt	r1, #1
   112d0:	bl	10f24 <dcgettext@plt>
   112d4:	ldr	r1, [r9]
   112d8:	bl	10eb8 <fputs_unlocked@plt>
   112dc:	movw	r1, #21585	; 0x5451
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	movt	r1, #1
   112ec:	bl	10f24 <dcgettext@plt>
   112f0:	ldr	r1, [r9]
   112f4:	bl	10eb8 <fputs_unlocked@plt>
   112f8:	movw	r1, #21630	; 0x547e
   112fc:	mov	r0, #0
   11300:	mov	r2, #5
   11304:	movt	r1, #1
   11308:	bl	10f24 <dcgettext@plt>
   1130c:	ldr	r1, [r9]
   11310:	bl	10eb8 <fputs_unlocked@plt>
   11314:	movw	r1, #21684	; 0x54b4
   11318:	mov	r0, #0
   1131c:	mov	r2, #5
   11320:	movt	r1, #1
   11324:	bl	10f24 <dcgettext@plt>
   11328:	ldr	r1, [r9]
   1132c:	bl	10eb8 <fputs_unlocked@plt>
   11330:	movw	r1, #21793	; 0x5521
   11334:	mov	r0, #0
   11338:	mov	r2, #5
   1133c:	movt	r1, #1
   11340:	bl	10f24 <dcgettext@plt>
   11344:	ldr	r1, [r9]
   11348:	bl	10eb8 <fputs_unlocked@plt>
   1134c:	movw	r1, #21855	; 0x555f
   11350:	mov	r0, #0
   11354:	mov	r2, #5
   11358:	movt	r1, #1
   1135c:	bl	10f24 <dcgettext@plt>
   11360:	ldr	r1, [r9]
   11364:	bl	10eb8 <fputs_unlocked@plt>
   11368:	movw	r1, #22167	; 0x5697
   1136c:	mov	r0, #0
   11370:	mov	r2, #5
   11374:	movt	r1, #1
   11378:	bl	10f24 <dcgettext@plt>
   1137c:	ldr	r1, [r9]
   11380:	bl	10eb8 <fputs_unlocked@plt>
   11384:	movw	r0, #23360	; 0x5b40
   11388:	mov	r6, sp
   1138c:	movt	r0, #1
   11390:	mov	r1, r6
   11394:	ldm	r0!, {r2, r3, r4, r5}
   11398:	stmia	r1!, {r2, r3, r4, r5}
   1139c:	ldm	r0!, {r2, r3, r4, r5, r7}
   113a0:	stmia	r1!, {r2, r3, r4, r5, r7}
   113a4:	ldm	r0, {r2, r3, r4, r5, r7}
   113a8:	stm	r1, {r2, r3, r4, r5, r7}
   113ac:	movw	r1, #22735	; 0x58cf
   113b0:	movw	r5, #22434	; 0x57a2
   113b4:	movt	r1, #1
   113b8:	movt	r5, #1
   113bc:	mov	r0, r5
   113c0:	bl	10ed0 <strcmp@plt>
   113c4:	cmp	r0, #0
   113c8:	ldrne	r1, [r6, #8]!
   113cc:	cmpne	r1, #0
   113d0:	bne	113bc <__assert_fail@plt+0x27c>
   113d4:	movw	r1, #22830	; 0x592e
   113d8:	ldr	r6, [r6, #4]
   113dc:	mov	r0, #0
   113e0:	mov	r2, #5
   113e4:	movt	r1, #1
   113e8:	bl	10f24 <dcgettext@plt>
   113ec:	movw	r2, #22525	; 0x57fd
   113f0:	movw	r3, #22853	; 0x5945
   113f4:	mov	r1, r0
   113f8:	mov	r0, #1
   113fc:	movt	r2, #1
   11400:	movt	r3, #1
   11404:	bl	1105c <__printf_chk@plt>
   11408:	cmp	r6, #0
   1140c:	mov	r0, #5
   11410:	mov	r1, #0
   11414:	moveq	r6, r5
   11418:	bl	110bc <setlocale@plt>
   1141c:	cmp	r0, #0
   11420:	beq	11458 <__assert_fail@plt+0x318>
   11424:	movw	r1, #22893	; 0x596d
   11428:	mov	r2, #3
   1142c:	movt	r1, #1
   11430:	bl	1111c <strncmp@plt>
   11434:	cmp	r0, #0
   11438:	beq	11458 <__assert_fail@plt+0x318>
   1143c:	movw	r1, #22897	; 0x5971
   11440:	mov	r0, #0
   11444:	mov	r2, #5
   11448:	movt	r1, #1
   1144c:	bl	10f24 <dcgettext@plt>
   11450:	ldr	r1, [r9]
   11454:	bl	10eb8 <fputs_unlocked@plt>
   11458:	movw	r1, #22968	; 0x59b8
   1145c:	mov	r0, #0
   11460:	mov	r2, #5
   11464:	movt	r1, #1
   11468:	bl	10f24 <dcgettext@plt>
   1146c:	movw	r2, #22853	; 0x5945
   11470:	mov	r1, r0
   11474:	mov	r0, #1
   11478:	mov	r3, r5
   1147c:	movt	r2, #1
   11480:	bl	1105c <__printf_chk@plt>
   11484:	movw	r1, #22995	; 0x59d3
   11488:	mov	r0, #0
   1148c:	mov	r2, #5
   11490:	movt	r1, #1
   11494:	bl	10f24 <dcgettext@plt>
   11498:	mov	r1, r0
   1149c:	movw	r0, #22763	; 0x58eb
   114a0:	movw	r3, #23045	; 0x5a05
   114a4:	cmp	r6, r5
   114a8:	mov	r2, r6
   114ac:	movt	r0, #1
   114b0:	movt	r3, #1
   114b4:	moveq	r3, r0
   114b8:	mov	r0, #1
   114bc:	bl	1105c <__printf_chk@plt>
   114c0:	mov	r0, r8
   114c4:	bl	11008 <exit@plt>
   114c8:	movw	r0, #29008	; 0x7150
   114cc:	movw	r1, #21260	; 0x530c
   114d0:	mov	r2, #5
   114d4:	movt	r0, #2
   114d8:	movt	r1, #1
   114dc:	ldr	r5, [r0]
   114e0:	mov	r0, #0
   114e4:	bl	10f24 <dcgettext@plt>
   114e8:	mov	r2, r0
   114ec:	movw	r0, #29072	; 0x7190
   114f0:	mov	r1, #1
   114f4:	movt	r0, #2
   114f8:	ldr	r3, [r0]
   114fc:	mov	r0, r5
   11500:	bl	11080 <__fprintf_chk@plt>
   11504:	b	114c0 <__assert_fail@plt+0x380>
   11508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1150c:	add	fp, sp, #28
   11510:	sub	sp, sp, #148	; 0x94
   11514:	mov	r5, r0
   11518:	ldr	r0, [r1]
   1151c:	mov	r4, r1
   11520:	bl	11e5c <__assert_fail@plt+0xd1c>
   11524:	movw	r1, #23045	; 0x5a05
   11528:	mov	r0, #6
   1152c:	movt	r1, #1
   11530:	bl	110bc <setlocale@plt>
   11534:	movw	r6, #22529	; 0x5801
   11538:	movw	r1, #22441	; 0x57a9
   1153c:	movt	r6, #1
   11540:	movt	r1, #1
   11544:	mov	r0, r6
   11548:	bl	110f8 <bindtextdomain@plt>
   1154c:	mov	r0, r6
   11550:	bl	10f3c <textdomain@plt>
   11554:	movw	r0, #28924	; 0x70fc
   11558:	mov	r1, #125	; 0x7d
   1155c:	movt	r0, #2
   11560:	str	r1, [r0]
   11564:	movw	r0, #7060	; 0x1b94
   11568:	movt	r0, #1
   1156c:	bl	152d8 <__assert_fail@plt+0x4198>
   11570:	movw	r9, #29024	; 0x7160
   11574:	movw	r8, #29016	; 0x7158
   11578:	mov	sl, #0
   1157c:	movt	r9, #2
   11580:	movt	r8, #2
   11584:	movw	r2, #22465	; 0x57c1
   11588:	movw	r3, #23264	; 0x5ae0
   1158c:	mov	r0, r5
   11590:	mov	r1, r4
   11594:	str	sl, [sp]
   11598:	movt	r2, #1
   1159c:	movt	r3, #1
   115a0:	bl	10ff0 <getopt_long@plt>
   115a4:	cmp	r0, #100	; 0x64
   115a8:	ble	11690 <__assert_fail@plt+0x550>
   115ac:	cmp	r0, #101	; 0x65
   115b0:	beq	115c4 <__assert_fail@plt+0x484>
   115b4:	cmp	r0, #111	; 0x6f
   115b8:	bne	115cc <__assert_fail@plt+0x48c>
   115bc:	mov	r1, #1
   115c0:	b	115d8 <__assert_fail@plt+0x498>
   115c4:	mov	r1, #2
   115c8:	b	115d8 <__assert_fail@plt+0x498>
   115cc:	cmp	r0, #105	; 0x69
   115d0:	bne	11b3c <__assert_fail@plt+0x9fc>
   115d4:	mov	r1, #0
   115d8:	add	r7, r1, r1, lsl #1
   115dc:	ldr	r6, [r8]
   115e0:	add	r1, r9, r7, lsl #2
   115e4:	str	r0, [r1, #4]
   115e8:	ldrb	r2, [r6]
   115ec:	sub	r3, r2, #9
   115f0:	cmp	r3, #5
   115f4:	bcs	11604 <__assert_fail@plt+0x4c4>
   115f8:	add	r6, r6, #1
   115fc:	str	r6, [r8]
   11600:	b	115e8 <__assert_fail@plt+0x4a8>
   11604:	cmp	r2, #32
   11608:	beq	115f8 <__assert_fail@plt+0x4b8>
   1160c:	cmp	r0, #105	; 0x69
   11610:	str	r6, [r1, #8]
   11614:	bne	11624 <__assert_fail@plt+0x4e4>
   11618:	ldrb	r0, [r6]
   1161c:	cmp	r0, #76	; 0x4c
   11620:	beq	11aec <__assert_fail@plt+0x9ac>
   11624:	movw	r1, #23088	; 0x5a30
   11628:	mov	r0, r6
   1162c:	movt	r1, #1
   11630:	bl	10ed0 <strcmp@plt>
   11634:	cmp	r0, #0
   11638:	beq	11584 <__assert_fail@plt+0x444>
   1163c:	movw	r0, #23072	; 0x5a20
   11640:	mov	r1, #0
   11644:	mov	r2, #10
   11648:	add	r3, sp, #24
   1164c:	movt	r0, #1
   11650:	str	r0, [sp]
   11654:	mov	r0, r6
   11658:	bl	142f8 <__assert_fail@plt+0x31b8>
   1165c:	ldr	r1, [sp, #28]
   11660:	cmp	r1, #0
   11664:	mov	r1, r0
   11668:	movwne	r1, #1
   1166c:	cmp	r0, #0
   11670:	movne	r1, r0
   11674:	cmp	r1, #0
   11678:	bne	11af8 <__assert_fail@plt+0x9b8>
   1167c:	ldr	r6, [sp, #24]
   11680:	bl	11038 <__errno_location@plt>
   11684:	str	sl, [r0]
   11688:	str	r6, [r9, r7, lsl #2]
   1168c:	b	11584 <__assert_fail@plt+0x444>
   11690:	cmn	r0, #1
   11694:	bne	11a8c <__assert_fail@plt+0x94c>
   11698:	movw	r0, #29000	; 0x7148
   1169c:	movt	r0, #2
   116a0:	ldr	r0, [r0]
   116a4:	cmp	r0, r5
   116a8:	bge	11b0c <__assert_fail@plt+0x9cc>
   116ac:	add	r0, r4, r0, lsl #2
   116b0:	movw	r6, #23083	; 0x5a2b
   116b4:	movw	r7, #23090	; 0x5a32
   116b8:	movw	r4, #23099	; 0x5a3b
   116bc:	mov	sl, #0
   116c0:	add	r5, sp, #24
   116c4:	mov	r8, #0
   116c8:	movt	r6, #1
   116cc:	movt	r7, #1
   116d0:	movt	r4, #1
   116d4:	str	r0, [sp, #20]
   116d8:	mov	r0, #0
   116dc:	add	r2, r9, r8
   116e0:	ldr	r1, [r2, #8]
   116e4:	cmp	r1, #0
   116e8:	beq	11758 <__assert_fail@plt+0x618>
   116ec:	ldrb	r1, [r1]
   116f0:	ldr	r0, [r2, #4]
   116f4:	cmp	r1, #76	; 0x4c
   116f8:	bne	11714 <__assert_fail@plt+0x5d4>
   116fc:	bl	110d4 <toupper@plt>
   11700:	str	r0, [sp]
   11704:	mov	r0, r5
   11708:	mov	r1, #1
   1170c:	mov	r2, r6
   11710:	b	11734 <__assert_fail@plt+0x5f4>
   11714:	bl	110d4 <toupper@plt>
   11718:	ldr	r1, [r9, r8]
   1171c:	str	r0, [sp]
   11720:	mov	r0, r5
   11724:	mov	r2, r4
   11728:	str	sl, [sp, #12]
   1172c:	str	r1, [sp, #8]
   11730:	mov	r1, #1
   11734:	mov	r3, r7
   11738:	bl	10fa8 <__asprintf_chk@plt>
   1173c:	cmn	r0, #1
   11740:	ble	11a14 <__assert_fail@plt+0x8d4>
   11744:	ldr	r0, [sp, #24]
   11748:	bl	110c8 <putenv@plt>
   1174c:	cmp	r0, #0
   11750:	bne	11a18 <__assert_fail@plt+0x8d8>
   11754:	mov	r0, #1
   11758:	add	r8, r8, #12
   1175c:	cmp	r8, #36	; 0x24
   11760:	bne	116dc <__assert_fail@plt+0x59c>
   11764:	tst	r0, #1
   11768:	beq	11b18 <__assert_fail@plt+0x9d8>
   1176c:	movw	r0, #29072	; 0x7190
   11770:	mov	r1, #47	; 0x2f
   11774:	movt	r0, #2
   11778:	ldr	r5, [r0]
   1177c:	mov	r0, r5
   11780:	bl	1102c <strchr@plt>
   11784:	movw	r8, #29060	; 0x7184
   11788:	cmp	r0, #0
   1178c:	movt	r8, #2
   11790:	beq	117a8 <__assert_fail@plt+0x668>
   11794:	mov	r0, r5
   11798:	bl	11c7c <__assert_fail@plt+0xb3c>
   1179c:	mov	r4, r0
   117a0:	str	r0, [r8]
   117a4:	b	117dc <__assert_fail@plt+0x69c>
   117a8:	movw	r0, #23150	; 0x5a6e
   117ac:	movt	r0, #1
   117b0:	bl	142c4 <__assert_fail@plt+0x3184>
   117b4:	cmp	r0, #0
   117b8:	beq	1196c <__assert_fail@plt+0x82c>
   117bc:	mov	r6, r0
   117c0:	bl	11c7c <__assert_fail@plt+0xb3c>
   117c4:	str	r0, [r8]
   117c8:	mov	r0, r6
   117cc:	bl	11e34 <__assert_fail@plt+0xcf4>
   117d0:	ldr	r4, [r8]
   117d4:	cmp	r4, #0
   117d8:	beq	119e4 <__assert_fail@plt+0x8a4>
   117dc:	movw	r0, #23170	; 0x5a82
   117e0:	movt	r0, #1
   117e4:	bl	10fb4 <getenv@plt>
   117e8:	mov	r9, r0
   117ec:	mov	r0, #0
   117f0:	str	r0, [fp, #-32]	; 0xffffffe0
   117f4:	movw	r0, #23181	; 0x5a8d
   117f8:	movt	r0, #1
   117fc:	str	r0, [fp, #-36]	; 0xffffffdc
   11800:	str	r4, [fp, #-40]	; 0xffffffd8
   11804:	ldrb	r0, [r4]
   11808:	cmp	r0, #0
   1180c:	beq	1188c <__assert_fail@plt+0x74c>
   11810:	movw	sl, #23210	; 0x5aaa
   11814:	movw	r7, #23223	; 0x5ab7
   11818:	sub	r0, fp, #40	; 0x28
   1181c:	sub	r8, fp, #44	; 0x2c
   11820:	add	r5, sp, #24
   11824:	movt	sl, #1
   11828:	movt	r7, #1
   1182c:	add	r6, r0, #4
   11830:	mov	r0, r8
   11834:	mov	r1, #1
   11838:	mov	r2, r7
   1183c:	mov	r3, r4
   11840:	str	sl, [sp]
   11844:	bl	10fa8 <__asprintf_chk@plt>
   11848:	cmn	r0, #1
   1184c:	ble	11a14 <__assert_fail@plt+0x8d4>
   11850:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11854:	mov	r1, r5
   11858:	bl	152f0 <__assert_fail@plt+0x41b0>
   1185c:	mov	r1, r0
   11860:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11864:	cmp	r1, #0
   11868:	beq	1189c <__assert_fail@plt+0x75c>
   1186c:	bl	11e34 <__assert_fail@plt+0xcf4>
   11870:	ldr	r0, [r6]
   11874:	cmp	r0, #0
   11878:	beq	11a54 <__assert_fail@plt+0x914>
   1187c:	ldr	r4, [r6], #4
   11880:	ldrb	r0, [r4]
   11884:	cmp	r0, #0
   11888:	bne	11830 <__assert_fail@plt+0x6f0>
   1188c:	movw	r0, #23210	; 0x5aaa
   11890:	movt	r0, #1
   11894:	bl	14248 <__assert_fail@plt+0x3108>
   11898:	str	r0, [fp, #-44]	; 0xffffffd4
   1189c:	cmp	r9, #0
   118a0:	beq	118bc <__assert_fail@plt+0x77c>
   118a4:	movw	r2, #23247	; 0x5acf
   118a8:	str	r0, [sp, #4]
   118ac:	str	r9, [sp]
   118b0:	add	r0, sp, #24
   118b4:	movt	r2, #1
   118b8:	b	118cc <__assert_fail@plt+0x78c>
   118bc:	movw	r2, #23256	; 0x5ad8
   118c0:	str	r0, [sp]
   118c4:	add	r0, sp, #24
   118c8:	movt	r2, #1
   118cc:	movw	r3, #23170	; 0x5a82
   118d0:	mov	r1, #1
   118d4:	movt	r3, #1
   118d8:	bl	10fa8 <__asprintf_chk@plt>
   118dc:	movw	r4, #29060	; 0x7184
   118e0:	cmn	r0, #1
   118e4:	movt	r4, #2
   118e8:	ble	11a14 <__assert_fail@plt+0x8d4>
   118ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   118f0:	bl	11e34 <__assert_fail@plt+0xcf4>
   118f4:	ldr	r0, [sp, #24]
   118f8:	bl	110c8 <putenv@plt>
   118fc:	cmp	r0, #0
   11900:	bne	11a18 <__assert_fail@plt+0x8d8>
   11904:	ldr	r0, [r4]
   11908:	bl	11e34 <__assert_fail@plt+0xcf4>
   1190c:	ldr	r6, [sp, #20]
   11910:	ldr	r0, [r6]
   11914:	mov	r1, r6
   11918:	bl	10f0c <execvp@plt>
   1191c:	bl	11038 <__errno_location@plt>
   11920:	movw	r1, #22635	; 0x586b
   11924:	ldr	r4, [r0]
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	10f24 <dcgettext@plt>
   11938:	mov	r5, r0
   1193c:	ldr	r0, [r6]
   11940:	bl	13848 <__assert_fail@plt+0x2708>
   11944:	mov	r3, r0
   11948:	mov	r0, #0
   1194c:	mov	r1, r4
   11950:	mov	r2, r5
   11954:	bl	10f9c <error@plt>
   11958:	cmp	r4, #2
   1195c:	mov	r0, #126	; 0x7e
   11960:	movweq	r0, #127	; 0x7f
   11964:	sub	sp, fp, #28
   11968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1196c:	movw	r0, #23165	; 0x5a7d
   11970:	movt	r0, #1
   11974:	bl	10fb4 <getenv@plt>
   11978:	cmp	r0, #0
   1197c:	beq	119f4 <__assert_fail@plt+0x8b4>
   11980:	bl	14248 <__assert_fail@plt+0x3108>
   11984:	movw	r1, #22471	; 0x57c7
   11988:	mov	r6, r0
   1198c:	movt	r1, #1
   11990:	bl	110b0 <strtok@plt>
   11994:	cmp	r0, #0
   11998:	beq	117c8 <__assert_fail@plt+0x688>
   1199c:	movw	r4, #22471	; 0x57c7
   119a0:	movt	r4, #1
   119a4:	mov	r1, r5
   119a8:	mov	r2, #0
   119ac:	bl	11d3c <__assert_fail@plt+0xbfc>
   119b0:	mov	r1, #1
   119b4:	mov	r7, r0
   119b8:	bl	1108c <access@plt>
   119bc:	cmp	r0, #0
   119c0:	beq	119fc <__assert_fail@plt+0x8bc>
   119c4:	mov	r0, r7
   119c8:	bl	11e34 <__assert_fail@plt+0xcf4>
   119cc:	mov	r0, #0
   119d0:	mov	r1, r4
   119d4:	bl	110b0 <strtok@plt>
   119d8:	cmp	r0, #0
   119dc:	bne	119a4 <__assert_fail@plt+0x864>
   119e0:	b	117c8 <__assert_fail@plt+0x688>
   119e4:	movw	r0, #22610	; 0x5852
   119e8:	movt	r0, #1
   119ec:	bl	14248 <__assert_fail@plt+0x3108>
   119f0:	b	1179c <__assert_fail@plt+0x65c>
   119f4:	mov	r6, #0
   119f8:	b	117c8 <__assert_fail@plt+0x688>
   119fc:	mov	r0, r7
   11a00:	bl	11c7c <__assert_fail@plt+0xb3c>
   11a04:	str	r0, [r8]
   11a08:	mov	r0, r7
   11a0c:	bl	11e34 <__assert_fail@plt+0xcf4>
   11a10:	b	117c8 <__assert_fail@plt+0x688>
   11a14:	bl	14280 <__assert_fail@plt+0x3140>
   11a18:	bl	11038 <__errno_location@plt>
   11a1c:	movw	r1, #23109	; 0x5a45
   11a20:	ldr	r4, [r0]
   11a24:	mov	r0, #0
   11a28:	mov	r2, #5
   11a2c:	movt	r1, #1
   11a30:	bl	10f24 <dcgettext@plt>
   11a34:	mov	r5, r0
   11a38:	ldr	r0, [sp, #24]
   11a3c:	bl	13848 <__assert_fail@plt+0x2708>
   11a40:	mov	r3, r0
   11a44:	mov	r0, #125	; 0x7d
   11a48:	mov	r1, r4
   11a4c:	mov	r2, r5
   11a50:	bl	10f9c <error@plt>
   11a54:	movw	r1, #23229	; 0x5abd
   11a58:	mov	r0, #0
   11a5c:	mov	r2, #5
   11a60:	movt	r1, #1
   11a64:	bl	10f24 <dcgettext@plt>
   11a68:	mov	r4, r0
   11a6c:	movw	r0, #23210	; 0x5aaa
   11a70:	movt	r0, #1
   11a74:	bl	13848 <__assert_fail@plt+0x2708>
   11a78:	mov	r3, r0
   11a7c:	mov	r0, #125	; 0x7d
   11a80:	mov	r1, #0
   11a84:	mov	r2, r4
   11a88:	bl	10f9c <error@plt>
   11a8c:	cmn	r0, #3
   11a90:	bne	11adc <__assert_fail@plt+0x99c>
   11a94:	movw	r0, #28920	; 0x70f8
   11a98:	movw	r2, #22539	; 0x580b
   11a9c:	mov	r1, #0
   11aa0:	movt	r0, #2
   11aa4:	movt	r2, #1
   11aa8:	str	r1, [sp, #4]
   11aac:	movw	r1, #22434	; 0x57a2
   11ab0:	movt	r1, #1
   11ab4:	ldr	r3, [r0]
   11ab8:	movw	r0, #29012	; 0x7154
   11abc:	str	r2, [sp]
   11ac0:	movw	r2, #22525	; 0x57fd
   11ac4:	movt	r0, #2
   11ac8:	movt	r2, #1
   11acc:	ldr	r0, [r0]
   11ad0:	bl	13d4c <__assert_fail@plt+0x2c0c>
   11ad4:	mov	r0, #0
   11ad8:	bl	11008 <exit@plt>
   11adc:	cmn	r0, #2
   11ae0:	bne	11b3c <__assert_fail@plt+0x9fc>
   11ae4:	mov	r0, #0
   11ae8:	bl	1123c <__assert_fail@plt+0xfc>
   11aec:	movw	r1, #22473	; 0x57c9
   11af0:	movt	r1, #1
   11af4:	b	11b20 <__assert_fail@plt+0x9e0>
   11af8:	cmp	r1, #1
   11afc:	bne	11b44 <__assert_fail@plt+0xa04>
   11b00:	mov	r4, #75	; 0x4b
   11b04:	bl	11038 <__errno_location@plt>
   11b08:	b	11b4c <__assert_fail@plt+0xa0c>
   11b0c:	movw	r1, #22553	; 0x5819
   11b10:	movt	r1, #1
   11b14:	b	11b20 <__assert_fail@plt+0x9e0>
   11b18:	movw	r1, #22569	; 0x5829
   11b1c:	movt	r1, #1
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	bl	10f24 <dcgettext@plt>
   11b2c:	mov	r2, r0
   11b30:	mov	r0, #0
   11b34:	mov	r1, #0
   11b38:	bl	10f9c <error@plt>
   11b3c:	mov	r0, #125	; 0x7d
   11b40:	bl	1123c <__assert_fail@plt+0xfc>
   11b44:	bl	11038 <__errno_location@plt>
   11b48:	ldr	r4, [r0]
   11b4c:	str	r4, [r0]
   11b50:	movw	r1, #22509	; 0x57ed
   11b54:	mov	r2, #5
   11b58:	ldr	r4, [r0]
   11b5c:	movt	r1, #1
   11b60:	mov	r0, #0
   11b64:	bl	10f24 <dcgettext@plt>
   11b68:	mov	r5, r0
   11b6c:	ldr	r0, [r8]
   11b70:	b	11a3c <__assert_fail@plt+0x8fc>
   11b74:	movw	r1, #29064	; 0x7188
   11b78:	movt	r1, #2
   11b7c:	str	r0, [r1]
   11b80:	bx	lr
   11b84:	movw	r1, #29068	; 0x718c
   11b88:	movt	r1, #2
   11b8c:	strb	r0, [r1]
   11b90:	bx	lr
   11b94:	push	{r4, r5, r6, sl, fp, lr}
   11b98:	add	fp, sp, #16
   11b9c:	sub	sp, sp, #8
   11ba0:	movw	r0, #29012	; 0x7154
   11ba4:	movt	r0, #2
   11ba8:	ldr	r0, [r0]
   11bac:	bl	14d0c <__assert_fail@plt+0x3bcc>
   11bb0:	cmp	r0, #0
   11bb4:	beq	11bdc <__assert_fail@plt+0xa9c>
   11bb8:	movw	r0, #29068	; 0x718c
   11bbc:	movt	r0, #2
   11bc0:	ldrb	r0, [r0]
   11bc4:	cmp	r0, #0
   11bc8:	beq	11bfc <__assert_fail@plt+0xabc>
   11bcc:	bl	11038 <__errno_location@plt>
   11bd0:	ldr	r0, [r0]
   11bd4:	cmp	r0, #32
   11bd8:	bne	11bfc <__assert_fail@plt+0xabc>
   11bdc:	movw	r0, #29008	; 0x7150
   11be0:	movt	r0, #2
   11be4:	ldr	r0, [r0]
   11be8:	bl	14d0c <__assert_fail@plt+0x3bcc>
   11bec:	cmp	r0, #0
   11bf0:	subeq	sp, fp, #16
   11bf4:	popeq	{r4, r5, r6, sl, fp, pc}
   11bf8:	b	11c6c <__assert_fail@plt+0xb2c>
   11bfc:	movw	r1, #23431	; 0x5b87
   11c00:	mov	r0, #0
   11c04:	mov	r2, #5
   11c08:	movt	r1, #1
   11c0c:	bl	10f24 <dcgettext@plt>
   11c10:	mov	r4, r0
   11c14:	movw	r0, #29064	; 0x7188
   11c18:	movt	r0, #2
   11c1c:	ldr	r6, [r0]
   11c20:	bl	11038 <__errno_location@plt>
   11c24:	ldr	r5, [r0]
   11c28:	cmp	r6, #0
   11c2c:	bne	11c48 <__assert_fail@plt+0xb08>
   11c30:	movw	r2, #23447	; 0x5b97
   11c34:	mov	r0, #0
   11c38:	mov	r1, r5
   11c3c:	mov	r3, r4
   11c40:	movt	r2, #1
   11c44:	b	11c68 <__assert_fail@plt+0xb28>
   11c48:	mov	r0, r6
   11c4c:	bl	13608 <__assert_fail@plt+0x24c8>
   11c50:	movw	r2, #23443	; 0x5b93
   11c54:	mov	r3, r0
   11c58:	str	r4, [sp]
   11c5c:	mov	r0, #0
   11c60:	mov	r1, r5
   11c64:	movt	r2, #1
   11c68:	bl	10f9c <error@plt>
   11c6c:	movw	r0, #28924	; 0x70fc
   11c70:	movt	r0, #2
   11c74:	ldr	r0, [r0]
   11c78:	bl	10ef4 <_exit@plt>
   11c7c:	push	{fp, lr}
   11c80:	mov	fp, sp
   11c84:	bl	11cdc <__assert_fail@plt+0xb9c>
   11c88:	cmp	r0, #0
   11c8c:	popne	{fp, pc}
   11c90:	bl	14280 <__assert_fail@plt+0x3140>
   11c94:	push	{r4, r5, r6, sl, fp, lr}
   11c98:	add	fp, sp, #16
   11c9c:	mov	r5, r0
   11ca0:	mov	r4, r0
   11ca4:	ldrb	r6, [r5], #-1
   11ca8:	bl	14ae8 <__assert_fail@plt+0x39a8>
   11cac:	sub	r2, r0, r4
   11cb0:	sub	r0, r6, #47	; 0x2f
   11cb4:	clz	r0, r0
   11cb8:	lsr	r1, r0, #5
   11cbc:	mov	r0, r2
   11cc0:	cmp	r2, r1
   11cc4:	bls	11cd8 <__assert_fail@plt+0xb98>
   11cc8:	ldrb	r3, [r5, r0]
   11ccc:	sub	r2, r0, #1
   11cd0:	cmp	r3, #47	; 0x2f
   11cd4:	beq	11cbc <__assert_fail@plt+0xb7c>
   11cd8:	pop	{r4, r5, r6, sl, fp, pc}
   11cdc:	push	{r4, r5, r6, sl, fp, lr}
   11ce0:	add	fp, sp, #16
   11ce4:	mov	r6, r0
   11ce8:	bl	11c94 <__assert_fail@plt+0xb54>
   11cec:	cmp	r0, #0
   11cf0:	mov	r4, r0
   11cf4:	addeq	r0, r0, #1
   11cf8:	add	r0, r0, #1
   11cfc:	bl	14a08 <__assert_fail@plt+0x38c8>
   11d00:	mov	r5, r0
   11d04:	cmp	r0, #0
   11d08:	beq	11d34 <__assert_fail@plt+0xbf4>
   11d0c:	mov	r0, r5
   11d10:	mov	r1, r6
   11d14:	mov	r2, r4
   11d18:	bl	10f00 <memcpy@plt>
   11d1c:	cmp	r4, #0
   11d20:	moveq	r0, #46	; 0x2e
   11d24:	moveq	r4, #1
   11d28:	strbeq	r0, [r5]
   11d2c:	mov	r0, #0
   11d30:	strb	r0, [r5, r4]
   11d34:	mov	r0, r5
   11d38:	pop	{r4, r5, r6, sl, fp, pc}
   11d3c:	push	{fp, lr}
   11d40:	mov	fp, sp
   11d44:	bl	11d54 <__assert_fail@plt+0xc14>
   11d48:	cmp	r0, #0
   11d4c:	popne	{fp, pc}
   11d50:	bl	14280 <__assert_fail@plt+0x3140>
   11d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d58:	add	fp, sp, #28
   11d5c:	push	{r2}		; (str r2, [sp, #-4]!)
   11d60:	mov	sl, r1
   11d64:	mov	r7, r0
   11d68:	bl	14ae8 <__assert_fail@plt+0x39a8>
   11d6c:	sub	r4, r0, r7
   11d70:	bl	14b30 <__assert_fail@plt+0x39f0>
   11d74:	mov	r6, r0
   11d78:	add	r5, r4, r0
   11d7c:	mov	r0, sl
   11d80:	bl	11020 <strlen@plt>
   11d84:	mov	r9, r0
   11d88:	cmp	r6, #0
   11d8c:	beq	11db4 <__assert_fail@plt+0xc74>
   11d90:	add	r0, r5, r7
   11d94:	mov	r4, #0
   11d98:	ldrb	r0, [r0, #-1]
   11d9c:	cmp	r0, #47	; 0x2f
   11da0:	beq	11dc4 <__assert_fail@plt+0xc84>
   11da4:	ldrb	r0, [sl]
   11da8:	subs	r4, r0, #47	; 0x2f
   11dac:	movwne	r4, #47	; 0x2f
   11db0:	b	11dc4 <__assert_fail@plt+0xc84>
   11db4:	ldrb	r0, [sl]
   11db8:	mov	r4, #0
   11dbc:	cmp	r0, #47	; 0x2f
   11dc0:	movweq	r4, #46	; 0x2e
   11dc4:	uxtb	r8, r4
   11dc8:	add	r0, r9, r5
   11dcc:	cmp	r8, #0
   11dd0:	movwne	r8, #1
   11dd4:	add	r0, r0, r8
   11dd8:	add	r0, r0, #1
   11ddc:	bl	14a08 <__assert_fail@plt+0x38c8>
   11de0:	mov	r6, r0
   11de4:	cmp	r0, #0
   11de8:	beq	11e28 <__assert_fail@plt+0xce8>
   11dec:	mov	r0, r6
   11df0:	mov	r1, r7
   11df4:	mov	r2, r5
   11df8:	mvn	r3, #0
   11dfc:	bl	11134 <__mempcpy_chk@plt>
   11e00:	ldr	r1, [sp]
   11e04:	strb	r4, [r0], r8
   11e08:	mov	r2, r9
   11e0c:	mvn	r3, #0
   11e10:	cmp	r1, #0
   11e14:	strne	r0, [r1]
   11e18:	mov	r1, sl
   11e1c:	bl	11134 <__mempcpy_chk@plt>
   11e20:	mov	r1, #0
   11e24:	strb	r1, [r0]
   11e28:	mov	r0, r6
   11e2c:	sub	sp, fp, #28
   11e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e34:	push	{r4, r5, r6, sl, fp, lr}
   11e38:	add	fp, sp, #16
   11e3c:	mov	r4, r0
   11e40:	bl	11038 <__errno_location@plt>
   11e44:	ldr	r6, [r0]
   11e48:	mov	r5, r0
   11e4c:	mov	r0, r4
   11e50:	bl	10ee8 <free@plt>
   11e54:	str	r6, [r5]
   11e58:	pop	{r4, r5, r6, sl, fp, pc}
   11e5c:	push	{r4, r5, fp, lr}
   11e60:	add	fp, sp, #8
   11e64:	cmp	r0, #0
   11e68:	beq	11efc <__assert_fail@plt+0xdbc>
   11e6c:	mov	r1, #47	; 0x2f
   11e70:	mov	r4, r0
   11e74:	bl	110e0 <strrchr@plt>
   11e78:	cmp	r0, #0
   11e7c:	mov	r5, r4
   11e80:	addne	r5, r0, #1
   11e84:	sub	r0, r5, r4
   11e88:	cmp	r0, #7
   11e8c:	blt	11ee0 <__assert_fail@plt+0xda0>
   11e90:	movw	r1, #23506	; 0x5bd2
   11e94:	sub	r0, r5, #7
   11e98:	mov	r2, #7
   11e9c:	movt	r1, #1
   11ea0:	bl	1111c <strncmp@plt>
   11ea4:	cmp	r0, #0
   11ea8:	bne	11ee0 <__assert_fail@plt+0xda0>
   11eac:	movw	r1, #23514	; 0x5bda
   11eb0:	mov	r0, r5
   11eb4:	mov	r2, #3
   11eb8:	movt	r1, #1
   11ebc:	bl	1111c <strncmp@plt>
   11ec0:	cmp	r0, #0
   11ec4:	beq	11ed0 <__assert_fail@plt+0xd90>
   11ec8:	mov	r4, r5
   11ecc:	b	11ee0 <__assert_fail@plt+0xda0>
   11ed0:	movw	r0, #28992	; 0x7140
   11ed4:	add	r4, r5, #3
   11ed8:	movt	r0, #2
   11edc:	str	r4, [r0]
   11ee0:	movw	r0, #28996	; 0x7144
   11ee4:	movt	r0, #2
   11ee8:	str	r4, [r0]
   11eec:	movw	r0, #29072	; 0x7190
   11ef0:	movt	r0, #2
   11ef4:	str	r4, [r0]
   11ef8:	pop	{r4, r5, fp, pc}
   11efc:	movw	r0, #29008	; 0x7150
   11f00:	movt	r0, #2
   11f04:	ldr	r1, [r0]
   11f08:	movw	r0, #23450	; 0x5b9a
   11f0c:	movt	r0, #1
   11f10:	bl	11110 <fputs@plt>
   11f14:	bl	11128 <abort@plt>
   11f18:	push	{r4, r5, r6, sl, fp, lr}
   11f1c:	add	fp, sp, #16
   11f20:	mov	r4, r0
   11f24:	movw	r0, #29080	; 0x7198
   11f28:	movt	r0, #2
   11f2c:	cmp	r4, #0
   11f30:	moveq	r4, r0
   11f34:	bl	11038 <__errno_location@plt>
   11f38:	ldr	r6, [r0]
   11f3c:	mov	r5, r0
   11f40:	mov	r0, r4
   11f44:	mov	r1, #48	; 0x30
   11f48:	bl	141a4 <__assert_fail@plt+0x3064>
   11f4c:	str	r6, [r5]
   11f50:	pop	{r4, r5, r6, sl, fp, pc}
   11f54:	movw	r1, #29080	; 0x7198
   11f58:	cmp	r0, #0
   11f5c:	movt	r1, #2
   11f60:	movne	r1, r0
   11f64:	ldr	r0, [r1]
   11f68:	bx	lr
   11f6c:	movw	r2, #29080	; 0x7198
   11f70:	cmp	r0, #0
   11f74:	movt	r2, #2
   11f78:	movne	r2, r0
   11f7c:	str	r1, [r2]
   11f80:	bx	lr
   11f84:	movw	r3, #29080	; 0x7198
   11f88:	cmp	r0, #0
   11f8c:	and	r2, r2, #1
   11f90:	movt	r3, #2
   11f94:	movne	r3, r0
   11f98:	ubfx	r0, r1, #5, #3
   11f9c:	and	r1, r1, #31
   11fa0:	add	ip, r3, r0, lsl #2
   11fa4:	mov	r0, #1
   11fa8:	ldr	r3, [ip, #8]
   11fac:	and	r0, r0, r3, lsr r1
   11fb0:	eor	r2, r0, r2
   11fb4:	eor	r1, r3, r2, lsl r1
   11fb8:	str	r1, [ip, #8]
   11fbc:	bx	lr
   11fc0:	movw	r2, #29080	; 0x7198
   11fc4:	cmp	r0, #0
   11fc8:	movt	r2, #2
   11fcc:	movne	r2, r0
   11fd0:	ldr	r0, [r2, #4]
   11fd4:	str	r1, [r2, #4]
   11fd8:	bx	lr
   11fdc:	push	{fp, lr}
   11fe0:	mov	fp, sp
   11fe4:	movw	r3, #29080	; 0x7198
   11fe8:	cmp	r0, #0
   11fec:	movt	r3, #2
   11ff0:	movne	r3, r0
   11ff4:	cmp	r1, #0
   11ff8:	mov	r0, #10
   11ffc:	cmpne	r2, #0
   12000:	str	r0, [r3]
   12004:	bne	1200c <__assert_fail@plt+0xecc>
   12008:	bl	11128 <abort@plt>
   1200c:	str	r1, [r3, #40]	; 0x28
   12010:	str	r2, [r3, #44]	; 0x2c
   12014:	pop	{fp, pc}
   12018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1201c:	add	fp, sp, #28
   12020:	sub	sp, sp, #20
   12024:	mov	r7, r0
   12028:	ldr	r0, [fp, #8]
   1202c:	movw	r5, #29080	; 0x7198
   12030:	mov	r8, r3
   12034:	mov	r9, r2
   12038:	mov	sl, r1
   1203c:	movt	r5, #2
   12040:	cmp	r0, #0
   12044:	movne	r5, r0
   12048:	bl	11038 <__errno_location@plt>
   1204c:	ldr	r2, [r5, #40]	; 0x28
   12050:	ldr	r3, [r5, #44]	; 0x2c
   12054:	mov	r4, r0
   12058:	ldm	r5, {r0, r1}
   1205c:	add	r5, r5, #8
   12060:	ldr	r6, [r4]
   12064:	stm	sp, {r0, r1, r5}
   12068:	mov	r0, r7
   1206c:	mov	r1, sl
   12070:	str	r2, [sp, #12]
   12074:	str	r3, [sp, #16]
   12078:	mov	r2, r9
   1207c:	mov	r3, r8
   12080:	bl	12090 <__assert_fail@plt+0xf50>
   12084:	str	r6, [r4]
   12088:	sub	sp, fp, #28
   1208c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	add	fp, sp, #28
   12098:	sub	sp, sp, #156	; 0x9c
   1209c:	mov	r5, r0
   120a0:	add	r0, r2, #1
   120a4:	mov	r6, r1
   120a8:	mov	sl, r3
   120ac:	str	r2, [fp, #-80]	; 0xffffffb0
   120b0:	str	r0, [sp, #72]	; 0x48
   120b4:	ldr	r0, [fp, #12]
   120b8:	and	r1, r0, #1
   120bc:	str	r1, [sp, #32]
   120c0:	and	r1, r0, #4
   120c4:	str	r1, [sp, #28]
   120c8:	ubfx	r9, r0, #1, #1
   120cc:	bl	10f6c <__ctype_get_mb_cur_max@plt>
   120d0:	str	r0, [sp, #40]	; 0x28
   120d4:	ldr	r0, [fp, #24]
   120d8:	ldr	r7, [fp, #8]
   120dc:	mov	r1, #0
   120e0:	mov	lr, #0
   120e4:	str	r5, [fp, #-84]	; 0xffffffac
   120e8:	str	r1, [sp, #60]	; 0x3c
   120ec:	mov	r1, #1
   120f0:	str	r1, [fp, #-48]	; 0xffffffd0
   120f4:	str	r0, [sp, #80]	; 0x50
   120f8:	ldr	r0, [fp, #20]
   120fc:	str	r0, [sp, #76]	; 0x4c
   12100:	mov	r0, #0
   12104:	str	r0, [sp, #56]	; 0x38
   12108:	mov	r0, #0
   1210c:	str	r0, [fp, #-88]	; 0xffffffa8
   12110:	mov	r0, #0
   12114:	str	r0, [fp, #-72]	; 0xffffffb8
   12118:	mov	r0, #0
   1211c:	cmp	r7, #10
   12120:	bhi	130fc <__assert_fail@plt+0x1fbc>
   12124:	add	r1, pc, #24
   12128:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1212c:	mov	ip, r6
   12130:	mov	r8, #0
   12134:	mov	r2, #1
   12138:	mov	r6, #0
   1213c:	mov	r3, sl
   12140:	ldr	pc, [r1, r7, lsl #2]
   12144:	andeq	r2, r1, r0, lsr r2
   12148:	andeq	r2, r1, r4, lsl #5
   1214c:	andeq	r2, r1, r4, asr #4
   12150:	andeq	r2, r1, r8, lsr #4
   12154:	andeq	r2, r1, r8, ror r2
   12158:	andeq	r2, r1, ip, lsr #5
   1215c:	andeq	r2, r1, r4, asr r2
   12160:	andeq	r2, r1, r0, lsr r3
   12164:	andeq	r2, r1, r0, ror r1
   12168:	andeq	r2, r1, r0, ror r1
   1216c:			; <UNDEFINED> instruction: 0x000121b0
   12170:	movw	r0, #23596	; 0x5c2c
   12174:	mov	r1, r7
   12178:	mov	r6, r5
   1217c:	mov	r4, ip
   12180:	mov	r5, lr
   12184:	movt	r0, #1
   12188:	bl	13860 <__assert_fail@plt+0x2720>
   1218c:	str	r0, [sp, #76]	; 0x4c
   12190:	movw	r0, #23598	; 0x5c2e
   12194:	mov	r1, r7
   12198:	movt	r0, #1
   1219c:	bl	13860 <__assert_fail@plt+0x2720>
   121a0:	mov	lr, r5
   121a4:	mov	r5, r6
   121a8:	mov	ip, r4
   121ac:	str	r0, [sp, #80]	; 0x50
   121b0:	mov	r8, #0
   121b4:	tst	r9, #1
   121b8:	str	lr, [sp, #44]	; 0x2c
   121bc:	bne	121f4 <__assert_fail@plt+0x10b4>
   121c0:	ldr	r0, [sp, #76]	; 0x4c
   121c4:	ldrb	r0, [r0]
   121c8:	cmp	r0, #0
   121cc:	beq	121f4 <__assert_fail@plt+0x10b4>
   121d0:	ldr	r1, [sp, #76]	; 0x4c
   121d4:	mov	r8, #0
   121d8:	add	r1, r1, #1
   121dc:	cmp	r8, ip
   121e0:	strbcc	r0, [r5, r8]
   121e4:	ldrb	r0, [r1, r8]
   121e8:	add	r8, r8, #1
   121ec:	cmp	r0, #0
   121f0:	bne	121dc <__assert_fail@plt+0x109c>
   121f4:	ldr	r6, [sp, #80]	; 0x50
   121f8:	mov	r4, ip
   121fc:	mov	r0, r6
   12200:	bl	11020 <strlen@plt>
   12204:	mov	ip, r4
   12208:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1220c:	ldr	lr, [sp, #44]	; 0x2c
   12210:	str	r6, [fp, #-88]	; 0xffffffa8
   12214:	str	r0, [fp, #-72]	; 0xffffffb8
   12218:	mov	r2, #1
   1221c:	mov	r6, r9
   12220:	mov	r3, sl
   12224:	b	12330 <__assert_fail@plt+0x11f0>
   12228:	mov	r0, #1
   1222c:	b	12284 <__assert_fail@plt+0x1144>
   12230:	mov	r7, #0
   12234:	mov	r8, #0
   12238:	mov	r2, r0
   1223c:	mov	r6, #0
   12240:	b	12330 <__assert_fail@plt+0x11f0>
   12244:	tst	r9, #1
   12248:	bne	12284 <__assert_fail@plt+0x1144>
   1224c:	mov	r2, r0
   12250:	b	122dc <__assert_fail@plt+0x119c>
   12254:	mov	r0, #1
   12258:	mov	r8, #0
   1225c:	mov	r7, #5
   12260:	mov	r2, #1
   12264:	str	r0, [fp, #-72]	; 0xffffffb8
   12268:	movw	r0, #23594	; 0x5c2a
   1226c:	movt	r0, #1
   12270:	str	r0, [fp, #-88]	; 0xffffffa8
   12274:	b	122a4 <__assert_fail@plt+0x1164>
   12278:	mov	r2, #1
   1227c:	tst	r9, #1
   12280:	beq	122dc <__assert_fail@plt+0x119c>
   12284:	mov	r1, #1
   12288:	mov	r8, #0
   1228c:	mov	r7, #2
   12290:	mov	r2, r0
   12294:	str	r1, [fp, #-72]	; 0xffffffb8
   12298:	movw	r1, #23598	; 0x5c2e
   1229c:	movt	r1, #1
   122a0:	str	r1, [fp, #-88]	; 0xffffffa8
   122a4:	mov	r6, #1
   122a8:	b	12330 <__assert_fail@plt+0x11f0>
   122ac:	tst	r9, #1
   122b0:	beq	12300 <__assert_fail@plt+0x11c0>
   122b4:	mov	r0, #1
   122b8:	mov	r8, #0
   122bc:	mov	r2, #1
   122c0:	mov	r6, #1
   122c4:	mov	r7, #5
   122c8:	str	r0, [fp, #-72]	; 0xffffffb8
   122cc:	movw	r0, #23594	; 0x5c2a
   122d0:	movt	r0, #1
   122d4:	str	r0, [fp, #-88]	; 0xffffffa8
   122d8:	b	12330 <__assert_fail@plt+0x11f0>
   122dc:	cmp	ip, #0
   122e0:	mov	r8, #1
   122e4:	mov	r6, #0
   122e8:	mov	r7, #2
   122ec:	movne	r0, #39	; 0x27
   122f0:	strbne	r0, [r5]
   122f4:	movw	r0, #23598	; 0x5c2e
   122f8:	movt	r0, #1
   122fc:	b	12324 <__assert_fail@plt+0x11e4>
   12300:	cmp	ip, #0
   12304:	mov	r8, #1
   12308:	mov	r2, #1
   1230c:	mov	r7, #5
   12310:	mov	r6, #0
   12314:	movne	r0, #34	; 0x22
   12318:	strbne	r0, [r5]
   1231c:	movw	r0, #23594	; 0x5c2a
   12320:	movt	r0, #1
   12324:	str	r0, [fp, #-88]	; 0xffffffa8
   12328:	mov	r0, #1
   1232c:	str	r0, [fp, #-72]	; 0xffffffb8
   12330:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12334:	str	r7, [fp, #-68]	; 0xffffffbc
   12338:	str	r6, [fp, #-76]	; 0xffffffb4
   1233c:	str	r2, [sp, #84]	; 0x54
   12340:	cmp	r0, #0
   12344:	movwne	r0, #1
   12348:	and	r1, r0, r6
   1234c:	and	r1, r2, r1
   12350:	str	r1, [sp, #48]	; 0x30
   12354:	sub	r1, r7, #2
   12358:	clz	r1, r1
   1235c:	lsr	r1, r1, #5
   12360:	and	r1, r1, r6
   12364:	str	r1, [sp, #64]	; 0x40
   12368:	subs	r1, r7, #2
   1236c:	eor	r7, r6, #1
   12370:	movwne	r1, #1
   12374:	str	r7, [sp, #92]	; 0x5c
   12378:	orr	r7, r1, r7
   1237c:	and	r1, r1, r2
   12380:	and	r0, r0, r1
   12384:	str	r7, [sp, #68]	; 0x44
   12388:	mov	r7, #0
   1238c:	str	r0, [fp, #-60]	; 0xffffffc4
   12390:	orr	r0, r1, r6
   12394:	ldr	r1, [fp, #16]
   12398:	eor	r0, r0, #1
   1239c:	clz	r1, r1
   123a0:	lsr	r1, r1, #5
   123a4:	orr	r0, r1, r0
   123a8:	str	r0, [fp, #-64]	; 0xffffffc0
   123ac:	eor	r0, r2, #1
   123b0:	str	r0, [sp, #52]	; 0x34
   123b4:	cmn	r3, #1
   123b8:	beq	123c8 <__assert_fail@plt+0x1288>
   123bc:	cmp	r7, r3
   123c0:	bne	123d4 <__assert_fail@plt+0x1294>
   123c4:	b	12f30 <__assert_fail@plt+0x1df0>
   123c8:	ldrb	r0, [r4, r7]
   123cc:	cmp	r0, #0
   123d0:	beq	12f38 <__assert_fail@plt+0x1df8>
   123d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   123d8:	cmp	r0, #0
   123dc:	beq	12424 <__assert_fail@plt+0x12e4>
   123e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   123e4:	add	r5, r7, r0
   123e8:	cmp	r0, #2
   123ec:	bcc	12438 <__assert_fail@plt+0x12f8>
   123f0:	mov	r0, #0
   123f4:	cmn	r3, #1
   123f8:	str	r0, [fp, #-56]	; 0xffffffc8
   123fc:	bne	12440 <__assert_fail@plt+0x1300>
   12400:	mov	r0, r4
   12404:	mov	r4, ip
   12408:	mov	r6, lr
   1240c:	bl	11020 <strlen@plt>
   12410:	mov	ip, r4
   12414:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12418:	mov	lr, r6
   1241c:	mov	r3, r0
   12420:	b	12440 <__assert_fail@plt+0x1300>
   12424:	mov	r0, #0
   12428:	mov	sl, r3
   1242c:	str	r0, [fp, #-56]	; 0xffffffc8
   12430:	mov	r0, #0
   12434:	b	124ac <__assert_fail@plt+0x136c>
   12438:	mov	r0, #0
   1243c:	str	r0, [fp, #-56]	; 0xffffffc8
   12440:	cmp	r5, r3
   12444:	bls	12458 <__assert_fail@plt+0x1318>
   12448:	ldr	r5, [fp, #-84]	; 0xffffffac
   1244c:	mov	r0, #0
   12450:	mov	sl, r3
   12454:	b	124ac <__assert_fail@plt+0x136c>
   12458:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1245c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12460:	add	r0, r4, r7
   12464:	mov	r5, lr
   12468:	mov	r6, ip
   1246c:	mov	sl, r3
   12470:	bl	11014 <bcmp@plt>
   12474:	ldr	r2, [sp, #92]	; 0x5c
   12478:	cmp	r0, #0
   1247c:	ldr	r3, [fp, #-84]	; 0xffffffac
   12480:	mov	r1, r0
   12484:	movwne	r1, #1
   12488:	orr	r1, r1, r2
   1248c:	tst	r1, #1
   12490:	beq	12fbc <__assert_fail@plt+0x1e7c>
   12494:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12498:	clz	r0, r0
   1249c:	mov	lr, r5
   124a0:	mov	ip, r6
   124a4:	mov	r5, r3
   124a8:	lsr	r0, r0, #5
   124ac:	str	r0, [fp, #-52]	; 0xffffffcc
   124b0:	ldrb	r6, [r4, r7]
   124b4:	cmp	r6, #126	; 0x7e
   124b8:	bhi	129e0 <__assert_fail@plt+0x18a0>
   124bc:	add	r3, pc, #16
   124c0:	mov	r9, #1
   124c4:	mov	r2, #110	; 0x6e
   124c8:	mov	r0, #97	; 0x61
   124cc:	mov	r1, #0
   124d0:	ldr	pc, [r3, r6, lsl #2]
   124d4:	andeq	r2, r1, r4, asr #16
   124d8:	andeq	r2, r1, r0, ror #19
   124dc:	andeq	r2, r1, r0, ror #19
   124e0:	andeq	r2, r1, r0, ror #19
   124e4:	andeq	r2, r1, r0, ror #19
   124e8:	andeq	r2, r1, r0, ror #19
   124ec:	andeq	r2, r1, r0, ror #19
   124f0:	andeq	r2, r1, r0, ror #20
   124f4:	andeq	r2, r1, r4, lsr #16
   124f8:	andeq	r2, r1, ip, lsl r8
   124fc:	andeq	r2, r1, r0, lsr r8
   12500:	andeq	r2, r1, r8, asr #18
   12504:	andeq	r2, r1, r4, lsl r8
   12508:	andeq	r2, r1, ip, lsr #16
   1250c:	andeq	r2, r1, r0, ror #19
   12510:	andeq	r2, r1, r0, ror #19
   12514:	andeq	r2, r1, r0, ror #19
   12518:	andeq	r2, r1, r0, ror #19
   1251c:	andeq	r2, r1, r0, ror #19
   12520:	andeq	r2, r1, r0, ror #19
   12524:	andeq	r2, r1, r0, ror #19
   12528:	andeq	r2, r1, r0, ror #19
   1252c:	andeq	r2, r1, r0, ror #19
   12530:	andeq	r2, r1, r0, ror #19
   12534:	andeq	r2, r1, r0, ror #19
   12538:	andeq	r2, r1, r0, ror #19
   1253c:	andeq	r2, r1, r0, ror #19
   12540:	andeq	r2, r1, r0, ror #19
   12544:	andeq	r2, r1, r0, ror #19
   12548:	andeq	r2, r1, r0, ror #19
   1254c:	andeq	r2, r1, r0, ror #19
   12550:	andeq	r2, r1, r0, ror #19
   12554:	andeq	r2, r1, r4, asr #15
   12558:	andeq	r2, r1, r8, asr #15
   1255c:	andeq	r2, r1, r8, asr #15
   12560:	andeq	r2, r1, ip, lsr #15
   12564:	andeq	r2, r1, r8, asr #15
   12568:	ldrdeq	r2, [r1], -r0
   1256c:	andeq	r2, r1, r8, asr #15
   12570:	andeq	r2, r1, r0, asr r9
   12574:	andeq	r2, r1, r8, asr #15
   12578:	andeq	r2, r1, r8, asr #15
   1257c:	andeq	r2, r1, r8, asr #15
   12580:	ldrdeq	r2, [r1], -r0
   12584:	ldrdeq	r2, [r1], -r0
   12588:	ldrdeq	r2, [r1], -r0
   1258c:	ldrdeq	r2, [r1], -r0
   12590:	ldrdeq	r2, [r1], -r0
   12594:	ldrdeq	r2, [r1], -r0
   12598:	ldrdeq	r2, [r1], -r0
   1259c:	ldrdeq	r2, [r1], -r0
   125a0:	ldrdeq	r2, [r1], -r0
   125a4:	ldrdeq	r2, [r1], -r0
   125a8:	ldrdeq	r2, [r1], -r0
   125ac:	ldrdeq	r2, [r1], -r0
   125b0:	ldrdeq	r2, [r1], -r0
   125b4:	ldrdeq	r2, [r1], -r0
   125b8:	ldrdeq	r2, [r1], -r0
   125bc:	ldrdeq	r2, [r1], -r0
   125c0:	andeq	r2, r1, r8, asr #15
   125c4:	andeq	r2, r1, r8, asr #15
   125c8:	andeq	r2, r1, r8, asr #15
   125cc:	andeq	r2, r1, r8, asr #15
   125d0:	andeq	r2, r1, ip, lsl r9
   125d4:	andeq	r2, r1, r0, ror #19
   125d8:	ldrdeq	r2, [r1], -r0
   125dc:	ldrdeq	r2, [r1], -r0
   125e0:	ldrdeq	r2, [r1], -r0
   125e4:	ldrdeq	r2, [r1], -r0
   125e8:	ldrdeq	r2, [r1], -r0
   125ec:	ldrdeq	r2, [r1], -r0
   125f0:	ldrdeq	r2, [r1], -r0
   125f4:	ldrdeq	r2, [r1], -r0
   125f8:	ldrdeq	r2, [r1], -r0
   125fc:	ldrdeq	r2, [r1], -r0
   12600:	ldrdeq	r2, [r1], -r0
   12604:	ldrdeq	r2, [r1], -r0
   12608:	ldrdeq	r2, [r1], -r0
   1260c:	ldrdeq	r2, [r1], -r0
   12610:	ldrdeq	r2, [r1], -r0
   12614:	ldrdeq	r2, [r1], -r0
   12618:	ldrdeq	r2, [r1], -r0
   1261c:	ldrdeq	r2, [r1], -r0
   12620:	ldrdeq	r2, [r1], -r0
   12624:	ldrdeq	r2, [r1], -r0
   12628:	ldrdeq	r2, [r1], -r0
   1262c:	ldrdeq	r2, [r1], -r0
   12630:	ldrdeq	r2, [r1], -r0
   12634:	ldrdeq	r2, [r1], -r0
   12638:	ldrdeq	r2, [r1], -r0
   1263c:	ldrdeq	r2, [r1], -r0
   12640:	andeq	r2, r1, r8, asr #15
   12644:	strdeq	r2, [r1], -r0
   12648:	ldrdeq	r2, [r1], -r0
   1264c:	andeq	r2, r1, r8, asr #15
   12650:	ldrdeq	r2, [r1], -r0
   12654:	andeq	r2, r1, r8, asr #15
   12658:	ldrdeq	r2, [r1], -r0
   1265c:	ldrdeq	r2, [r1], -r0
   12660:	ldrdeq	r2, [r1], -r0
   12664:	ldrdeq	r2, [r1], -r0
   12668:	ldrdeq	r2, [r1], -r0
   1266c:	ldrdeq	r2, [r1], -r0
   12670:	ldrdeq	r2, [r1], -r0
   12674:	ldrdeq	r2, [r1], -r0
   12678:	ldrdeq	r2, [r1], -r0
   1267c:	ldrdeq	r2, [r1], -r0
   12680:	ldrdeq	r2, [r1], -r0
   12684:	ldrdeq	r2, [r1], -r0
   12688:	ldrdeq	r2, [r1], -r0
   1268c:	ldrdeq	r2, [r1], -r0
   12690:	ldrdeq	r2, [r1], -r0
   12694:	ldrdeq	r2, [r1], -r0
   12698:	ldrdeq	r2, [r1], -r0
   1269c:	ldrdeq	r2, [r1], -r0
   126a0:	ldrdeq	r2, [r1], -r0
   126a4:	ldrdeq	r2, [r1], -r0
   126a8:	ldrdeq	r2, [r1], -r0
   126ac:	ldrdeq	r2, [r1], -r0
   126b0:	ldrdeq	r2, [r1], -r0
   126b4:	ldrdeq	r2, [r1], -r0
   126b8:	ldrdeq	r2, [r1], -r0
   126bc:	ldrdeq	r2, [r1], -r0
   126c0:	andeq	r2, r1, r4, lsl #15
   126c4:	andeq	r2, r1, r8, asr #15
   126c8:	andeq	r2, r1, r4, lsl #15
   126cc:	andeq	r2, r1, ip, lsr #15
   126d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126d4:	tst	r0, #1
   126d8:	bne	12704 <__assert_fail@plt+0x15c4>
   126dc:	ldr	r1, [fp, #16]
   126e0:	ubfx	r0, r6, #5, #3
   126e4:	mov	r2, #1
   126e8:	ldr	r0, [r1, r0, lsl #2]
   126ec:	and	r1, r6, #31
   126f0:	tst	r0, r2, lsl r1
   126f4:	beq	12704 <__assert_fail@plt+0x15c4>
   126f8:	mov	r0, r6
   126fc:	mov	r1, r9
   12700:	b	12718 <__assert_fail@plt+0x15d8>
   12704:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12708:	mov	r1, r9
   1270c:	cmp	r0, #0
   12710:	mov	r0, r6
   12714:	beq	12e64 <__assert_fail@plt+0x1d24>
   12718:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1271c:	tst	r2, #1
   12720:	bne	13000 <__assert_fail@plt+0x1ec0>
   12724:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12728:	subs	r2, r2, #2
   1272c:	movwne	r2, #1
   12730:	orr	r2, r2, lr
   12734:	tst	r2, #1
   12738:	bne	12770 <__assert_fail@plt+0x1630>
   1273c:	cmp	r8, ip
   12740:	mov	lr, #1
   12744:	movcc	r2, #39	; 0x27
   12748:	strbcc	r2, [r5, r8]
   1274c:	add	r2, r8, #1
   12750:	cmp	r2, ip
   12754:	movcc	r3, #36	; 0x24
   12758:	strbcc	r3, [r5, r2]
   1275c:	add	r2, r8, #2
   12760:	add	r8, r8, #3
   12764:	cmp	r2, ip
   12768:	movcc	r3, #39	; 0x27
   1276c:	strbcc	r3, [r5, r2]
   12770:	cmp	r8, ip
   12774:	movcc	r2, #92	; 0x5c
   12778:	strbcc	r2, [r5, r8]
   1277c:	add	r8, r8, #1
   12780:	b	12ea4 <__assert_fail@plt+0x1d64>
   12784:	cmp	sl, #1
   12788:	beq	127ac <__assert_fail@plt+0x166c>
   1278c:	mov	r9, #0
   12790:	cmn	sl, #1
   12794:	bne	127b8 <__assert_fail@plt+0x1678>
   12798:	ldrb	r0, [r4, #1]
   1279c:	cmp	r0, #0
   127a0:	beq	127ac <__assert_fail@plt+0x166c>
   127a4:	mvn	sl, #0
   127a8:	b	127b8 <__assert_fail@plt+0x1678>
   127ac:	mov	r9, #0
   127b0:	cmp	r7, #0
   127b4:	beq	127c4 <__assert_fail@plt+0x1684>
   127b8:	mov	r0, #0
   127bc:	str	r0, [fp, #-56]	; 0xffffffc8
   127c0:	b	126d0 <__assert_fail@plt+0x1590>
   127c4:	mov	r1, #1
   127c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127cc:	cmp	r0, #2
   127d0:	bne	127e8 <__assert_fail@plt+0x16a8>
   127d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   127d8:	mov	r9, r1
   127dc:	tst	r0, #1
   127e0:	beq	126d0 <__assert_fail@plt+0x1590>
   127e4:	b	13000 <__assert_fail@plt+0x1ec0>
   127e8:	mov	r9, r1
   127ec:	b	126d0 <__assert_fail@plt+0x1590>
   127f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127f4:	cmp	r0, #2
   127f8:	bne	12a3c <__assert_fail@plt+0x18fc>
   127fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12800:	tst	r0, #1
   12804:	bne	13000 <__assert_fail@plt+0x1ec0>
   12808:	mov	r0, #0
   1280c:	str	r0, [fp, #-56]	; 0xffffffc8
   12810:	b	12a54 <__assert_fail@plt+0x1914>
   12814:	mov	r0, #102	; 0x66
   12818:	b	12a60 <__assert_fail@plt+0x1920>
   1281c:	mov	r2, #116	; 0x74
   12820:	b	12830 <__assert_fail@plt+0x16f0>
   12824:	mov	r0, #98	; 0x62
   12828:	b	12a60 <__assert_fail@plt+0x1920>
   1282c:	mov	r2, #114	; 0x72
   12830:	ldr	r0, [sp, #68]	; 0x44
   12834:	tst	r0, #1
   12838:	mov	r0, r2
   1283c:	bne	12a60 <__assert_fail@plt+0x1920>
   12840:	b	13000 <__assert_fail@plt+0x1ec0>
   12844:	ldr	r0, [sp, #84]	; 0x54
   12848:	tst	r0, #1
   1284c:	beq	12a80 <__assert_fail@plt+0x1940>
   12850:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12854:	tst	r0, #1
   12858:	bne	130ec <__assert_fail@plt+0x1fac>
   1285c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12860:	mov	r2, sl
   12864:	subs	r0, r0, #2
   12868:	movwne	r0, #1
   1286c:	orr	r0, r0, lr
   12870:	tst	r0, #1
   12874:	bne	128ac <__assert_fail@plt+0x176c>
   12878:	cmp	r8, ip
   1287c:	mov	lr, #1
   12880:	movcc	r0, #39	; 0x27
   12884:	strbcc	r0, [r5, r8]
   12888:	add	r0, r8, #1
   1288c:	cmp	r0, ip
   12890:	movcc	r1, #36	; 0x24
   12894:	strbcc	r1, [r5, r0]
   12898:	add	r0, r8, #2
   1289c:	add	r8, r8, #3
   128a0:	cmp	r0, ip
   128a4:	movcc	r1, #39	; 0x27
   128a8:	strbcc	r1, [r5, r0]
   128ac:	mov	r1, #1
   128b0:	cmp	r8, ip
   128b4:	mov	r9, #0
   128b8:	mov	r6, #48	; 0x30
   128bc:	str	r1, [fp, #-56]	; 0xffffffc8
   128c0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   128c4:	movcc	r0, #92	; 0x5c
   128c8:	strbcc	r0, [r5, r8]
   128cc:	add	r0, r8, #1
   128d0:	cmp	r1, #2
   128d4:	beq	12bdc <__assert_fail@plt+0x1a9c>
   128d8:	add	r1, r7, #1
   128dc:	cmp	r1, r2
   128e0:	bcs	12bdc <__assert_fail@plt+0x1a9c>
   128e4:	ldrb	r1, [r4, r1]
   128e8:	sub	r1, r1, #48	; 0x30
   128ec:	uxtb	r1, r1
   128f0:	cmp	r1, #9
   128f4:	bhi	12bdc <__assert_fail@plt+0x1a9c>
   128f8:	cmp	r0, ip
   128fc:	movcc	r1, #48	; 0x30
   12900:	strbcc	r1, [r5, r0]
   12904:	add	r0, r8, #2
   12908:	add	r8, r8, #3
   1290c:	cmp	r0, ip
   12910:	movcc	r1, #48	; 0x30
   12914:	strbcc	r1, [r5, r0]
   12918:	b	126d0 <__assert_fail@plt+0x1590>
   1291c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12920:	mov	r6, #63	; 0x3f
   12924:	cmp	r0, #5
   12928:	beq	12be4 <__assert_fail@plt+0x1aa4>
   1292c:	mov	r1, #0
   12930:	cmp	r0, #2
   12934:	str	r1, [fp, #-56]	; 0xffffffc8
   12938:	bne	12c98 <__assert_fail@plt+0x1b58>
   1293c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12940:	mov	r9, #0
   12944:	b	127dc <__assert_fail@plt+0x169c>
   12948:	mov	r0, #118	; 0x76
   1294c:	b	12a60 <__assert_fail@plt+0x1920>
   12950:	mov	r0, #1
   12954:	mov	r6, #39	; 0x27
   12958:	str	r0, [sp, #60]	; 0x3c
   1295c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12960:	cmp	r0, #2
   12964:	bne	129d8 <__assert_fail@plt+0x1898>
   12968:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1296c:	tst	r0, #1
   12970:	bne	13000 <__assert_fail@plt+0x1ec0>
   12974:	ldr	r2, [sp, #56]	; 0x38
   12978:	clz	r1, ip
   1297c:	mov	lr, #0
   12980:	lsr	r1, r1, #5
   12984:	cmp	r2, #0
   12988:	mov	r0, r2
   1298c:	movwne	r0, #1
   12990:	orrs	r0, r0, r1
   12994:	moveq	r2, ip
   12998:	moveq	ip, r0
   1299c:	cmp	r8, ip
   129a0:	str	r2, [sp, #56]	; 0x38
   129a4:	movcc	r0, #39	; 0x27
   129a8:	strbcc	r0, [r5, r8]
   129ac:	add	r0, r8, #1
   129b0:	cmp	r0, ip
   129b4:	movcc	r1, #92	; 0x5c
   129b8:	strbcc	r1, [r5, r0]
   129bc:	add	r0, r8, #2
   129c0:	add	r8, r8, #3
   129c4:	cmp	r0, ip
   129c8:	movcc	r1, #39	; 0x27
   129cc:	strbcc	r1, [r5, r0]
   129d0:	mov	r0, #0
   129d4:	str	r0, [fp, #-56]	; 0xffffffc8
   129d8:	mov	r9, #1
   129dc:	b	126d0 <__assert_fail@plt+0x1590>
   129e0:	ldr	r0, [sp, #40]	; 0x28
   129e4:	str	lr, [sp, #44]	; 0x2c
   129e8:	str	ip, [sp, #88]	; 0x58
   129ec:	cmp	r0, #1
   129f0:	bne	12aa0 <__assert_fail@plt+0x1960>
   129f4:	str	sl, [sp, #36]	; 0x24
   129f8:	bl	10ffc <__ctype_b_loc@plt>
   129fc:	ldr	r0, [r0]
   12a00:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12a04:	mov	r1, #1
   12a08:	add	r0, r0, r6, lsl #1
   12a0c:	ldrb	r0, [r0, #1]
   12a10:	ubfx	r9, r0, #6, #1
   12a14:	ldr	r0, [sp, #52]	; 0x34
   12a18:	ldr	lr, [sp, #44]	; 0x2c
   12a1c:	cmp	r1, #1
   12a20:	orr	r3, r9, r0
   12a24:	bhi	12ca0 <__assert_fail@plt+0x1b60>
   12a28:	tst	r3, #1
   12a2c:	beq	12ca0 <__assert_fail@plt+0x1b60>
   12a30:	ldr	sl, [sp, #36]	; 0x24
   12a34:	ldr	ip, [sp, #88]	; 0x58
   12a38:	b	126d0 <__assert_fail@plt+0x1590>
   12a3c:	ldr	r1, [sp, #48]	; 0x30
   12a40:	mov	r0, #0
   12a44:	str	r0, [fp, #-56]	; 0xffffffc8
   12a48:	mov	r0, #92	; 0x5c
   12a4c:	cmp	r1, #0
   12a50:	beq	12a60 <__assert_fail@plt+0x1920>
   12a54:	mov	r6, #92	; 0x5c
   12a58:	mov	r9, #0
   12a5c:	b	12e64 <__assert_fail@plt+0x1d24>
   12a60:	mov	r1, #0
   12a64:	mov	r9, #0
   12a68:	str	r1, [fp, #-56]	; 0xffffffc8
   12a6c:	ldr	r1, [sp, #84]	; 0x54
   12a70:	tst	r1, #1
   12a74:	mov	r1, #0
   12a78:	beq	126d0 <__assert_fail@plt+0x1590>
   12a7c:	b	12718 <__assert_fail@plt+0x15d8>
   12a80:	ldr	r0, [sp, #32]
   12a84:	mov	r6, #0
   12a88:	mov	r9, #0
   12a8c:	cmp	r0, #0
   12a90:	mov	r0, #0
   12a94:	str	r0, [fp, #-56]	; 0xffffffc8
   12a98:	beq	126d0 <__assert_fail@plt+0x1590>
   12a9c:	b	12ebc <__assert_fail@plt+0x1d7c>
   12aa0:	mov	r0, #0
   12aa4:	cmn	sl, #1
   12aa8:	sub	r3, fp, #40	; 0x28
   12aac:	str	r0, [fp, #-36]	; 0xffffffdc
   12ab0:	str	r0, [fp, #-40]	; 0xffffffd8
   12ab4:	bne	12acc <__assert_fail@plt+0x198c>
   12ab8:	mov	r0, r4
   12abc:	bl	11020 <strlen@plt>
   12ac0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12ac4:	sub	r3, fp, #40	; 0x28
   12ac8:	mov	sl, r0
   12acc:	ldr	r0, [sp, #72]	; 0x48
   12ad0:	mov	r9, #1
   12ad4:	mov	r1, #0
   12ad8:	str	sl, [sp, #36]	; 0x24
   12adc:	add	r0, r0, r7
   12ae0:	str	r0, [sp, #20]
   12ae4:	add	r0, r1, r7
   12ae8:	str	r1, [sp, #24]
   12aec:	add	r1, r4, r0
   12af0:	mov	r4, r0
   12af4:	sub	r2, sl, r0
   12af8:	sub	r0, fp, #44	; 0x2c
   12afc:	bl	14f60 <__assert_fail@plt+0x3e20>
   12b00:	cmp	r0, #0
   12b04:	beq	12f10 <__assert_fail@plt+0x1dd0>
   12b08:	cmn	r0, #1
   12b0c:	beq	12ec8 <__assert_fail@plt+0x1d88>
   12b10:	ldr	r2, [sp, #36]	; 0x24
   12b14:	cmn	r0, #2
   12b18:	beq	12ed0 <__assert_fail@plt+0x1d90>
   12b1c:	ldr	r2, [sp, #64]	; 0x40
   12b20:	ldr	ip, [sp, #88]	; 0x58
   12b24:	ldr	r4, [sp, #84]	; 0x54
   12b28:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12b2c:	cmp	r0, #2
   12b30:	mov	r1, #0
   12b34:	movwcc	r1, #1
   12b38:	eor	r2, r2, #1
   12b3c:	orrs	r1, r2, r1
   12b40:	bne	12b90 <__assert_fail@plt+0x1a50>
   12b44:	ldr	r1, [sp, #24]
   12b48:	ldr	r2, [sp, #20]
   12b4c:	add	r1, r2, r1
   12b50:	sub	r2, r0, #1
   12b54:	ldrb	r3, [r1]
   12b58:	sub	r5, r3, #94	; 0x5e
   12b5c:	cmp	r5, #30
   12b60:	bhi	12b78 <__assert_fail@plt+0x1a38>
   12b64:	mov	r4, #1
   12b68:	mov	sl, #1073741829	; 0x40000005
   12b6c:	tst	sl, r4, lsl r5
   12b70:	ldr	r4, [sp, #84]	; 0x54
   12b74:	bne	12fd8 <__assert_fail@plt+0x1e98>
   12b78:	sub	r3, r3, #91	; 0x5b
   12b7c:	cmp	r3, #2
   12b80:	bcc	12fd8 <__assert_fail@plt+0x1e98>
   12b84:	add	r1, r1, #1
   12b88:	subs	r2, r2, #1
   12b8c:	bne	12b54 <__assert_fail@plt+0x1a14>
   12b90:	ldr	r5, [sp, #24]
   12b94:	str	lr, [fp, #-48]	; 0xffffffd0
   12b98:	add	r5, r0, r5
   12b9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12ba0:	bl	10f48 <iswprint@plt>
   12ba4:	cmp	r0, #0
   12ba8:	sub	r4, fp, #40	; 0x28
   12bac:	movwne	r0, #1
   12bb0:	and	r9, r9, r0
   12bb4:	mov	r0, r4
   12bb8:	bl	10f18 <mbsinit@plt>
   12bbc:	mov	r1, r5
   12bc0:	mov	r3, r4
   12bc4:	ldr	sl, [sp, #36]	; 0x24
   12bc8:	ldr	r5, [fp, #-84]	; 0xffffffac
   12bcc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12bd0:	cmp	r0, #0
   12bd4:	beq	12ae4 <__assert_fail@plt+0x19a4>
   12bd8:	b	12a14 <__assert_fail@plt+0x18d4>
   12bdc:	mov	r8, r0
   12be0:	b	126d0 <__assert_fail@plt+0x1590>
   12be4:	mov	r0, #0
   12be8:	str	r0, [fp, #-56]	; 0xffffffc8
   12bec:	ldr	r0, [sp, #28]
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c98 <__assert_fail@plt+0x1b58>
   12bf8:	add	r0, r7, #2
   12bfc:	mov	r1, sl
   12c00:	cmp	r0, sl
   12c04:	bcs	12c98 <__assert_fail@plt+0x1b58>
   12c08:	add	r1, r7, r4
   12c0c:	ldrb	r1, [r1, #1]
   12c10:	cmp	r1, #63	; 0x3f
   12c14:	bne	12c98 <__assert_fail@plt+0x1b58>
   12c18:	ldrb	r9, [r4, r0]
   12c1c:	sub	r2, r9, #33	; 0x21
   12c20:	cmp	r2, #29
   12c24:	bhi	12c98 <__assert_fail@plt+0x1b58>
   12c28:	mov	r1, r4
   12c2c:	movw	r4, #20929	; 0x51c1
   12c30:	mov	r3, #1
   12c34:	movt	r4, #14336	; 0x3800
   12c38:	tst	r4, r3, lsl r2
   12c3c:	beq	12f24 <__assert_fail@plt+0x1de4>
   12c40:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c44:	tst	r2, #1
   12c48:	bne	130f4 <__assert_fail@plt+0x1fb4>
   12c4c:	cmp	r8, ip
   12c50:	mov	r4, r1
   12c54:	mov	r7, r0
   12c58:	mov	r6, r9
   12c5c:	movcc	r2, #63	; 0x3f
   12c60:	strbcc	r2, [r5, r8]
   12c64:	add	r2, r8, #1
   12c68:	cmp	r2, ip
   12c6c:	movcc	r3, #34	; 0x22
   12c70:	strbcc	r3, [r5, r2]
   12c74:	add	r2, r8, #2
   12c78:	cmp	r2, ip
   12c7c:	movcc	r3, #34	; 0x22
   12c80:	strbcc	r3, [r5, r2]
   12c84:	add	r2, r8, #3
   12c88:	add	r8, r8, #4
   12c8c:	cmp	r2, ip
   12c90:	movcc	r3, #63	; 0x3f
   12c94:	strbcc	r3, [r5, r2]
   12c98:	mov	r9, #0
   12c9c:	b	126d0 <__assert_fail@plt+0x1590>
   12ca0:	ldr	sl, [sp, #36]	; 0x24
   12ca4:	add	r0, r1, r7
   12ca8:	mov	r2, #0
   12cac:	str	r3, [sp, #24]
   12cb0:	str	r0, [fp, #-56]	; 0xffffffc8
   12cb4:	tst	r3, #1
   12cb8:	beq	12ce4 <__assert_fail@plt+0x1ba4>
   12cbc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12cc0:	tst	r0, #1
   12cc4:	beq	12dac <__assert_fail@plt+0x1c6c>
   12cc8:	ldr	r1, [sp, #88]	; 0x58
   12ccc:	mov	r0, r3
   12cd0:	cmp	r8, r1
   12cd4:	movcc	r1, #92	; 0x5c
   12cd8:	strbcc	r1, [r5, r8]
   12cdc:	add	r8, r8, #1
   12ce0:	b	12db0 <__assert_fail@plt+0x1c70>
   12ce4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12ce8:	tst	r1, #1
   12cec:	bne	12ffc <__assert_fail@plt+0x1ebc>
   12cf0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12cf4:	subs	r2, r1, #2
   12cf8:	movwne	r2, #1
   12cfc:	orr	r2, r2, lr
   12d00:	tst	r2, #1
   12d04:	bne	12d48 <__assert_fail@plt+0x1c08>
   12d08:	ldr	r1, [sp, #88]	; 0x58
   12d0c:	add	r2, r8, #1
   12d10:	mov	lr, #1
   12d14:	cmp	r8, r1
   12d18:	movcc	r1, #39	; 0x27
   12d1c:	strbcc	r1, [r5, r8]
   12d20:	ldr	r1, [sp, #88]	; 0x58
   12d24:	cmp	r2, r1
   12d28:	movcc	r1, #36	; 0x24
   12d2c:	strbcc	r1, [r5, r2]
   12d30:	ldr	r1, [sp, #88]	; 0x58
   12d34:	add	r2, r8, #2
   12d38:	add	r8, r8, #3
   12d3c:	cmp	r2, r1
   12d40:	movcc	r1, #39	; 0x27
   12d44:	strbcc	r1, [r5, r2]
   12d48:	ldr	r1, [sp, #88]	; 0x58
   12d4c:	add	r2, r8, #1
   12d50:	mov	r0, r3
   12d54:	cmp	r8, r1
   12d58:	movcc	r1, #92	; 0x5c
   12d5c:	strbcc	r1, [r5, r8]
   12d60:	ldr	r1, [sp, #88]	; 0x58
   12d64:	cmp	r2, r1
   12d68:	bcs	12d7c <__assert_fail@plt+0x1c3c>
   12d6c:	uxtb	r3, r6
   12d70:	mov	r1, #48	; 0x30
   12d74:	orr	r3, r1, r3, lsr #6
   12d78:	strb	r3, [r5, r2]
   12d7c:	ldr	r1, [sp, #88]	; 0x58
   12d80:	add	r2, r8, #2
   12d84:	add	r8, r8, #3
   12d88:	cmp	r2, r1
   12d8c:	lsrcc	r3, r6, #3
   12d90:	movcc	r1, #6
   12d94:	bficc	r3, r1, #3, #29
   12d98:	mov	r1, #6
   12d9c:	bfi	r6, r1, #3, #29
   12da0:	strbcc	r3, [r5, r2]
   12da4:	mov	r2, #1
   12da8:	b	12db8 <__assert_fail@plt+0x1c78>
   12dac:	mov	r0, r3
   12db0:	mov	r1, #0
   12db4:	str	r1, [fp, #-52]	; 0xffffffcc
   12db8:	mov	ip, r2
   12dbc:	and	r1, r2, #1
   12dc0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12dc4:	add	r3, r7, #1
   12dc8:	cmp	r2, r3
   12dcc:	bls	12e54 <__assert_fail@plt+0x1d14>
   12dd0:	cmp	r1, #0
   12dd4:	mvn	r5, lr
   12dd8:	movwne	r1, #1
   12ddc:	orr	r5, r5, r1
   12de0:	tst	r5, #1
   12de4:	bne	12e28 <__assert_fail@plt+0x1ce8>
   12de8:	ldr	r1, [sp, #88]	; 0x58
   12dec:	ldr	r5, [fp, #-84]	; 0xffffffac
   12df0:	mov	r2, r4
   12df4:	ldr	r4, [sp, #88]	; 0x58
   12df8:	ldr	r0, [sp, #24]
   12dfc:	mov	lr, #0
   12e00:	cmp	r8, r1
   12e04:	movcc	r1, #39	; 0x27
   12e08:	strbcc	r1, [r5, r8]
   12e0c:	add	r1, r8, #1
   12e10:	add	r8, r8, #2
   12e14:	cmp	r1, r4
   12e18:	movcc	r4, #39	; 0x27
   12e1c:	strbcc	r4, [r5, r1]
   12e20:	mov	r4, r2
   12e24:	b	12e2c <__assert_fail@plt+0x1cec>
   12e28:	ldr	r5, [fp, #-84]	; 0xffffffac
   12e2c:	ldr	r1, [sp, #88]	; 0x58
   12e30:	mov	r2, ip
   12e34:	cmp	r8, r1
   12e38:	ldr	r1, [sp, #72]	; 0x48
   12e3c:	strbcc	r6, [r5, r8]
   12e40:	add	r8, r8, #1
   12e44:	ldrb	r6, [r1, r7]
   12e48:	mov	r7, r3
   12e4c:	mov	r3, r0
   12e50:	b	12cb4 <__assert_fail@plt+0x1b74>
   12e54:	ldr	ip, [sp, #88]	; 0x58
   12e58:	cmp	r1, #0
   12e5c:	movwne	r1, #1
   12e60:	str	r1, [fp, #-56]	; 0xffffffc8
   12e64:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e68:	cmp	r0, #0
   12e6c:	bne	12e9c <__assert_fail@plt+0x1d5c>
   12e70:	tst	lr, #1
   12e74:	beq	12e9c <__assert_fail@plt+0x1d5c>
   12e78:	cmp	r8, ip
   12e7c:	mov	lr, #0
   12e80:	movcc	r0, #39	; 0x27
   12e84:	strbcc	r0, [r5, r8]
   12e88:	add	r0, r8, #1
   12e8c:	add	r8, r8, #2
   12e90:	cmp	r0, ip
   12e94:	movcc	r1, #39	; 0x27
   12e98:	strbcc	r1, [r5, r0]
   12e9c:	mov	r1, r9
   12ea0:	mov	r0, r6
   12ea4:	cmp	r8, ip
   12ea8:	strbcc	r0, [r5, r8]
   12eac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12eb0:	add	r8, r8, #1
   12eb4:	and	r0, r0, r1
   12eb8:	str	r0, [fp, #-48]	; 0xffffffd0
   12ebc:	mov	r3, sl
   12ec0:	add	r7, r7, #1
   12ec4:	b	123b4 <__assert_fail@plt+0x1274>
   12ec8:	mov	r9, #0
   12ecc:	b	12f10 <__assert_fail@plt+0x1dd0>
   12ed0:	mov	r9, #0
   12ed4:	cmp	r2, r4
   12ed8:	bls	12f10 <__assert_fail@plt+0x1dd0>
   12edc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12ee0:	ldr	r1, [sp, #24]
   12ee4:	add	r0, r4, r7
   12ee8:	mov	r3, r1
   12eec:	ldrb	r1, [r0, r1]
   12ef0:	cmp	r1, #0
   12ef4:	beq	12f1c <__assert_fail@plt+0x1ddc>
   12ef8:	add	r3, r3, #1
   12efc:	add	r1, r7, r3
   12f00:	cmp	r1, r2
   12f04:	mov	r1, r3
   12f08:	bcc	12ee8 <__assert_fail@plt+0x1da8>
   12f0c:	b	12a14 <__assert_fail@plt+0x18d4>
   12f10:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12f14:	ldr	r1, [sp, #24]
   12f18:	b	12a14 <__assert_fail@plt+0x18d4>
   12f1c:	mov	r1, r3
   12f20:	b	12a14 <__assert_fail@plt+0x18d4>
   12f24:	mov	r9, #0
   12f28:	mov	r4, r1
   12f2c:	b	126d0 <__assert_fail@plt+0x1590>
   12f30:	mov	sl, r7
   12f34:	b	12f3c <__assert_fail@plt+0x1dfc>
   12f38:	mvn	sl, #0
   12f3c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12f40:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f44:	eor	r0, r1, #2
   12f48:	orr	r0, r0, r8
   12f4c:	clz	r0, r0
   12f50:	lsr	r0, r0, #5
   12f54:	tst	r2, r0
   12f58:	bne	13000 <__assert_fail@plt+0x1ec0>
   12f5c:	subs	r0, r1, #2
   12f60:	movwne	r0, #1
   12f64:	orr	r0, r2, r0
   12f68:	tst	r0, #1
   12f6c:	ldreq	r0, [sp, #60]	; 0x3c
   12f70:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   12f74:	eoreq	r0, r0, #1
   12f78:	tsteq	r0, #1
   12f7c:	bne	13094 <__assert_fail@plt+0x1f54>
   12f80:	tst	r1, #1
   12f84:	bne	13060 <__assert_fail@plt+0x1f20>
   12f88:	ldr	r6, [sp, #56]	; 0x38
   12f8c:	mov	r9, #0
   12f90:	cmp	r6, #0
   12f94:	beq	1308c <__assert_fail@plt+0x1f4c>
   12f98:	ldr	r0, [sp, #84]	; 0x54
   12f9c:	mov	r1, #0
   12fa0:	mov	r7, #2
   12fa4:	cmp	ip, #0
   12fa8:	str	r1, [fp, #-48]	; 0xffffffd0
   12fac:	mov	r1, #0
   12fb0:	str	r1, [fp, #-76]	; 0xffffffb4
   12fb4:	beq	1211c <__assert_fail@plt+0xfdc>
   12fb8:	b	13094 <__assert_fail@plt+0x1f54>
   12fbc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12fc0:	ldr	r1, [fp, #12]
   12fc4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12fc8:	mov	r5, r3
   12fcc:	mov	ip, r6
   12fd0:	mov	r3, sl
   12fd4:	b	13024 <__assert_fail@plt+0x1ee4>
   12fd8:	tst	r4, #1
   12fdc:	ldr	r5, [fp, #-84]	; 0xffffffac
   12fe0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12fe4:	ldr	r1, [fp, #12]
   12fe8:	ldr	r3, [sp, #36]	; 0x24
   12fec:	mov	r0, #2
   12ff0:	movwne	r0, #4
   12ff4:	mov	r2, r0
   12ff8:	b	13024 <__assert_fail@plt+0x1ee4>
   12ffc:	ldr	ip, [sp, #88]	; 0x58
   13000:	ldr	r1, [sp, #84]	; 0x54
   13004:	mov	r0, #2
   13008:	tst	r1, #1
   1300c:	movwne	r0, #4
   13010:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13014:	ldr	r1, [fp, #12]
   13018:	mov	r3, sl
   1301c:	cmp	r2, #2
   13020:	moveq	r2, r0
   13024:	mov	r0, #0
   13028:	bic	r1, r1, #2
   1302c:	str	r2, [sp]
   13030:	mov	r2, r4
   13034:	str	r0, [sp, #8]
   13038:	ldr	r0, [sp, #76]	; 0x4c
   1303c:	str	r1, [sp, #4]
   13040:	mov	r1, ip
   13044:	str	r0, [sp, #12]
   13048:	ldr	r0, [sp, #80]	; 0x50
   1304c:	str	r0, [sp, #16]
   13050:	mov	r0, r5
   13054:	bl	12090 <__assert_fail@plt+0xf50>
   13058:	mov	r8, r0
   1305c:	b	130e0 <__assert_fail@plt+0x1fa0>
   13060:	mov	r0, #5
   13064:	ldr	r1, [sp, #56]	; 0x38
   13068:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1306c:	mov	r3, sl
   13070:	str	r0, [sp]
   13074:	ldr	r0, [fp, #12]
   13078:	str	r0, [sp, #4]
   1307c:	ldr	r0, [fp, #16]
   13080:	str	r0, [sp, #8]
   13084:	ldr	r0, [sp, #76]	; 0x4c
   13088:	b	13044 <__assert_fail@plt+0x1f04>
   1308c:	mov	r0, #0
   13090:	str	r0, [fp, #-76]	; 0xffffffb4
   13094:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13098:	cmp	r1, #0
   1309c:	beq	130d4 <__assert_fail@plt+0x1f94>
   130a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130a4:	tst	r0, #1
   130a8:	bne	130d4 <__assert_fail@plt+0x1f94>
   130ac:	ldrb	r0, [r1]
   130b0:	cmp	r0, #0
   130b4:	beq	130d4 <__assert_fail@plt+0x1f94>
   130b8:	add	r1, r1, #1
   130bc:	cmp	r8, ip
   130c0:	strbcc	r0, [r5, r8]
   130c4:	add	r8, r8, #1
   130c8:	ldrb	r0, [r1], #1
   130cc:	cmp	r0, #0
   130d0:	bne	130bc <__assert_fail@plt+0x1f7c>
   130d4:	cmp	r8, ip
   130d8:	movcc	r0, #0
   130dc:	strbcc	r0, [r5, r8]
   130e0:	mov	r0, r8
   130e4:	sub	sp, fp, #28
   130e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130ec:	mov	r0, #4
   130f0:	b	13010 <__assert_fail@plt+0x1ed0>
   130f4:	mov	r4, r1
   130f8:	b	13000 <__assert_fail@plt+0x1ec0>
   130fc:	bl	11128 <abort@plt>
   13100:	mov	r3, r2
   13104:	mov	r2, #0
   13108:	b	1310c <__assert_fail@plt+0x1fcc>
   1310c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13110:	add	fp, sp, #28
   13114:	sub	sp, sp, #36	; 0x24
   13118:	movw	r8, #29080	; 0x7198
   1311c:	cmp	r3, #0
   13120:	mov	r4, r2
   13124:	str	r2, [sp, #24]
   13128:	mov	r5, r1
   1312c:	mov	r6, r0
   13130:	str	r0, [sp, #20]
   13134:	movt	r8, #2
   13138:	movne	r8, r3
   1313c:	bl	11038 <__errno_location@plt>
   13140:	str	r0, [sp, #28]
   13144:	ldr	r1, [r8, #40]	; 0x28
   13148:	ldr	r2, [r8, #44]	; 0x2c
   1314c:	ldr	r7, [r0]
   13150:	cmp	r4, #0
   13154:	add	sl, r8, #8
   13158:	mov	r0, #0
   1315c:	ldm	r8, {r3, r9}
   13160:	orreq	r9, r9, #1
   13164:	stm	sp, {r3, r9, sl}
   13168:	str	r1, [sp, #12]
   1316c:	str	r2, [sp, #16]
   13170:	mov	r1, #0
   13174:	mov	r2, r6
   13178:	mov	r3, r5
   1317c:	str	r7, [sp, #32]
   13180:	mov	r7, r5
   13184:	bl	12090 <__assert_fail@plt+0xf50>
   13188:	add	r4, r0, #1
   1318c:	mov	r5, r0
   13190:	mov	r0, r4
   13194:	bl	13e84 <__assert_fail@plt+0x2d44>
   13198:	mov	r6, r0
   1319c:	ldr	r0, [r8]
   131a0:	ldr	r2, [r8, #44]	; 0x2c
   131a4:	ldr	r1, [r8, #40]	; 0x28
   131a8:	mov	r3, r7
   131ac:	stm	sp, {r0, r9, sl}
   131b0:	str	r2, [sp, #16]
   131b4:	ldr	r2, [sp, #20]
   131b8:	str	r1, [sp, #12]
   131bc:	mov	r0, r6
   131c0:	mov	r1, r4
   131c4:	bl	12090 <__assert_fail@plt+0xf50>
   131c8:	ldr	r0, [sp, #24]
   131cc:	ldr	r1, [sp, #32]
   131d0:	ldr	r2, [sp, #28]
   131d4:	cmp	r0, #0
   131d8:	str	r1, [r2]
   131dc:	strne	r5, [r0]
   131e0:	mov	r0, r6
   131e4:	sub	sp, fp, #28
   131e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   131f0:	add	fp, sp, #24
   131f4:	movw	r5, #28932	; 0x7104
   131f8:	movw	r8, #28928	; 0x7100
   131fc:	movt	r5, #2
   13200:	movt	r8, #2
   13204:	ldr	r0, [r5]
   13208:	ldr	r4, [r8]
   1320c:	cmp	r0, #2
   13210:	blt	1323c <__assert_fail@plt+0x20fc>
   13214:	add	r7, r4, #12
   13218:	mov	r6, #0
   1321c:	ldr	r0, [r7, r6, lsl #3]
   13220:	bl	11e34 <__assert_fail@plt+0xcf4>
   13224:	ldr	r1, [r5]
   13228:	add	r2, r6, #2
   1322c:	add	r0, r6, #1
   13230:	mov	r6, r0
   13234:	cmp	r2, r1
   13238:	blt	1321c <__assert_fail@plt+0x20dc>
   1323c:	ldr	r0, [r4, #4]
   13240:	movw	r9, #29128	; 0x71c8
   13244:	movw	r7, #28936	; 0x7108
   13248:	movt	r9, #2
   1324c:	movt	r7, #2
   13250:	cmp	r0, r9
   13254:	beq	13264 <__assert_fail@plt+0x2124>
   13258:	bl	11e34 <__assert_fail@plt+0xcf4>
   1325c:	mov	r0, #256	; 0x100
   13260:	stm	r7, {r0, r9}
   13264:	cmp	r4, r7
   13268:	beq	13278 <__assert_fail@plt+0x2138>
   1326c:	mov	r0, r4
   13270:	bl	11e34 <__assert_fail@plt+0xcf4>
   13274:	str	r7, [r8]
   13278:	mov	r0, #1
   1327c:	str	r0, [r5]
   13280:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13284:	movw	r3, #29080	; 0x7198
   13288:	mvn	r2, #0
   1328c:	movt	r3, #2
   13290:	b	13294 <__assert_fail@plt+0x2154>
   13294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13298:	add	fp, sp, #28
   1329c:	sub	sp, sp, #44	; 0x2c
   132a0:	mov	r7, r3
   132a4:	str	r2, [sp, #36]	; 0x24
   132a8:	str	r1, [sp, #32]
   132ac:	mov	r5, r0
   132b0:	bl	11038 <__errno_location@plt>
   132b4:	cmp	r5, #0
   132b8:	bmi	13428 <__assert_fail@plt+0x22e8>
   132bc:	cmn	r5, #-2147483647	; 0x80000001
   132c0:	beq	13428 <__assert_fail@plt+0x22e8>
   132c4:	movw	r8, #28932	; 0x7104
   132c8:	movw	r4, #28928	; 0x7100
   132cc:	str	r0, [sp, #28]
   132d0:	ldr	r0, [r0]
   132d4:	movt	r8, #2
   132d8:	movt	r4, #2
   132dc:	ldr	r1, [r8]
   132e0:	ldr	r6, [r4]
   132e4:	str	r0, [sp, #24]
   132e8:	cmp	r1, r5
   132ec:	ble	132f8 <__assert_fail@plt+0x21b8>
   132f0:	mov	sl, r6
   132f4:	b	13364 <__assert_fail@plt+0x2224>
   132f8:	movw	r9, #28936	; 0x7108
   132fc:	mov	r0, #8
   13300:	str	r1, [fp, #-32]	; 0xffffffe0
   13304:	sub	r1, r5, r1
   13308:	mvn	r3, #-2147483648	; 0x80000000
   1330c:	movt	r9, #2
   13310:	str	r0, [sp]
   13314:	add	r2, r1, #1
   13318:	sub	r1, fp, #32
   1331c:	subs	r0, r6, r9
   13320:	movne	r0, r6
   13324:	bl	13fb4 <__assert_fail@plt+0x2e74>
   13328:	mov	sl, r0
   1332c:	cmp	r6, r9
   13330:	str	r0, [r4]
   13334:	bne	13340 <__assert_fail@plt+0x2200>
   13338:	ldrd	r0, [r9]
   1333c:	stm	sl, {r0, r1}
   13340:	ldr	r1, [r8]
   13344:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13348:	add	r0, sl, r1, lsl #3
   1334c:	sub	r1, r2, r1
   13350:	lsl	r2, r1, #3
   13354:	mov	r1, #0
   13358:	bl	11050 <memset@plt>
   1335c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13360:	str	r0, [r8]
   13364:	mov	r9, sl
   13368:	ldm	r7, {r0, r1}
   1336c:	orr	r8, r1, #1
   13370:	add	r1, r7, #8
   13374:	ldr	r2, [r7, #40]	; 0x28
   13378:	ldr	r3, [r7, #44]	; 0x2c
   1337c:	ldr	r6, [r9, r5, lsl #3]!
   13380:	str	r1, [sp, #20]
   13384:	ldr	r4, [r9, #4]!
   13388:	stm	sp, {r0, r8}
   1338c:	add	r0, sp, #8
   13390:	stm	r0, {r1, r2, r3}
   13394:	ldr	r2, [sp, #32]
   13398:	ldr	r3, [sp, #36]	; 0x24
   1339c:	mov	r1, r6
   133a0:	mov	r0, r4
   133a4:	bl	12090 <__assert_fail@plt+0xf50>
   133a8:	cmp	r6, r0
   133ac:	bhi	13410 <__assert_fail@plt+0x22d0>
   133b0:	add	r6, r0, #1
   133b4:	movw	r0, #29128	; 0x71c8
   133b8:	movt	r0, #2
   133bc:	str	r6, [sl, r5, lsl #3]
   133c0:	cmp	r4, r0
   133c4:	beq	133d0 <__assert_fail@plt+0x2290>
   133c8:	mov	r0, r4
   133cc:	bl	11e34 <__assert_fail@plt+0xcf4>
   133d0:	mov	r0, r6
   133d4:	bl	13e84 <__assert_fail@plt+0x2d44>
   133d8:	str	r0, [r9]
   133dc:	mov	r4, r0
   133e0:	add	r3, sp, #8
   133e4:	ldr	r0, [r7]
   133e8:	ldr	r1, [r7, #40]	; 0x28
   133ec:	ldr	r2, [r7, #44]	; 0x2c
   133f0:	stm	sp, {r0, r8}
   133f4:	ldr	r0, [sp, #20]
   133f8:	stm	r3, {r0, r1, r2}
   133fc:	ldr	r2, [sp, #32]
   13400:	ldr	r3, [sp, #36]	; 0x24
   13404:	mov	r0, r4
   13408:	mov	r1, r6
   1340c:	bl	12090 <__assert_fail@plt+0xf50>
   13410:	ldr	r0, [sp, #28]
   13414:	ldr	r1, [sp, #24]
   13418:	str	r1, [r0]
   1341c:	mov	r0, r4
   13420:	sub	sp, fp, #28
   13424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13428:	bl	11128 <abort@plt>
   1342c:	movw	r3, #29080	; 0x7198
   13430:	movt	r3, #2
   13434:	b	13294 <__assert_fail@plt+0x2154>
   13438:	movw	r3, #29080	; 0x7198
   1343c:	mov	r1, r0
   13440:	mov	r0, #0
   13444:	mvn	r2, #0
   13448:	movt	r3, #2
   1344c:	b	13294 <__assert_fail@plt+0x2154>
   13450:	movw	r3, #29080	; 0x7198
   13454:	mov	r2, r1
   13458:	mov	r1, r0
   1345c:	mov	r0, #0
   13460:	movt	r3, #2
   13464:	b	13294 <__assert_fail@plt+0x2154>
   13468:	push	{fp, lr}
   1346c:	mov	fp, sp
   13470:	sub	sp, sp, #48	; 0x30
   13474:	vmov.i32	q8, #0	; 0x00000000
   13478:	mov	ip, #32
   1347c:	mov	r3, sp
   13480:	mov	lr, r2
   13484:	cmp	r1, #10
   13488:	add	r2, r3, #16
   1348c:	vst1.64	{d16-d17}, [r3], ip
   13490:	vst1.64	{d16-d17}, [r2]
   13494:	vst1.64	{d16-d17}, [r3]
   13498:	beq	134b8 <__assert_fail@plt+0x2378>
   1349c:	str	r1, [sp]
   134a0:	mov	r3, sp
   134a4:	mov	r1, lr
   134a8:	mvn	r2, #0
   134ac:	bl	13294 <__assert_fail@plt+0x2154>
   134b0:	mov	sp, fp
   134b4:	pop	{fp, pc}
   134b8:	bl	11128 <abort@plt>
   134bc:	push	{r4, sl, fp, lr}
   134c0:	add	fp, sp, #8
   134c4:	sub	sp, sp, #48	; 0x30
   134c8:	vmov.i32	q8, #0	; 0x00000000
   134cc:	mov	ip, r3
   134d0:	mov	r3, sp
   134d4:	mov	lr, #32
   134d8:	cmp	r1, #10
   134dc:	add	r4, r3, #16
   134e0:	vst1.64	{d16-d17}, [r3], lr
   134e4:	vst1.64	{d16-d17}, [r4]
   134e8:	vst1.64	{d16-d17}, [r3]
   134ec:	beq	1350c <__assert_fail@plt+0x23cc>
   134f0:	str	r1, [sp]
   134f4:	mov	r1, r2
   134f8:	mov	r3, sp
   134fc:	mov	r2, ip
   13500:	bl	13294 <__assert_fail@plt+0x2154>
   13504:	sub	sp, fp, #8
   13508:	pop	{r4, sl, fp, pc}
   1350c:	bl	11128 <abort@plt>
   13510:	mov	r2, r1
   13514:	mov	r1, r0
   13518:	mov	r0, #0
   1351c:	b	13468 <__assert_fail@plt+0x2328>
   13520:	mov	r3, r2
   13524:	mov	r2, r1
   13528:	mov	r1, r0
   1352c:	mov	r0, #0
   13530:	b	134bc <__assert_fail@plt+0x237c>
   13534:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13538:	add	fp, sp, #24
   1353c:	sub	sp, sp, #48	; 0x30
   13540:	movw	r8, #29080	; 0x7198
   13544:	mov	lr, r0
   13548:	mov	r3, sp
   1354c:	mov	ip, r1
   13550:	movt	r8, #2
   13554:	mov	r1, r3
   13558:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1355c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13560:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13564:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13568:	ubfx	r0, r2, #5, #3
   1356c:	and	r2, r2, #31
   13570:	mov	r4, #1
   13574:	add	r0, r3, r0, lsl #2
   13578:	ldr	r1, [r0, #8]
   1357c:	bic	r4, r4, r1, lsr r2
   13580:	eor	r1, r1, r4, lsl r2
   13584:	mov	r2, ip
   13588:	str	r1, [r0, #8]
   1358c:	mov	r0, #0
   13590:	mov	r1, lr
   13594:	bl	13294 <__assert_fail@plt+0x2154>
   13598:	sub	sp, fp, #24
   1359c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135a4:	add	fp, sp, #24
   135a8:	sub	sp, sp, #48	; 0x30
   135ac:	movw	lr, #29080	; 0x7198
   135b0:	mov	ip, r0
   135b4:	mov	r3, sp
   135b8:	movt	lr, #2
   135bc:	mov	r2, r3
   135c0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   135c4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   135c8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   135cc:	stm	r2, {r0, r4, r5, r6, r7, r8}
   135d0:	ubfx	r0, r1, #5, #3
   135d4:	and	r1, r1, #31
   135d8:	mov	r7, #1
   135dc:	add	r0, r3, r0, lsl #2
   135e0:	ldr	r2, [r0, #8]
   135e4:	bic	r7, r7, r2, lsr r1
   135e8:	eor	r1, r2, r7, lsl r1
   135ec:	mvn	r2, #0
   135f0:	str	r1, [r0, #8]
   135f4:	mov	r0, #0
   135f8:	mov	r1, ip
   135fc:	bl	13294 <__assert_fail@plt+0x2154>
   13600:	sub	sp, fp, #24
   13604:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13608:	push	{r4, r5, r6, r7, fp, lr}
   1360c:	add	fp, sp, #16
   13610:	sub	sp, sp, #48	; 0x30
   13614:	movw	lr, #29080	; 0x7198
   13618:	mov	ip, r0
   1361c:	mov	r3, sp
   13620:	movt	lr, #2
   13624:	mov	r2, r3
   13628:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   1362c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13630:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13634:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13638:	mov	r1, ip
   1363c:	mvn	r2, #0
   13640:	ldr	r0, [sp, #12]
   13644:	orr	r0, r0, #67108864	; 0x4000000
   13648:	str	r0, [sp, #12]
   1364c:	mov	r0, #0
   13650:	bl	13294 <__assert_fail@plt+0x2154>
   13654:	sub	sp, fp, #16
   13658:	pop	{r4, r5, r6, r7, fp, pc}
   1365c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13660:	add	fp, sp, #24
   13664:	sub	sp, sp, #48	; 0x30
   13668:	movw	r8, #29080	; 0x7198
   1366c:	mov	ip, r1
   13670:	mov	lr, r0
   13674:	mov	r3, sp
   13678:	movt	r8, #2
   1367c:	mov	r2, r3
   13680:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13684:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13688:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1368c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13690:	mov	r1, lr
   13694:	mov	r2, ip
   13698:	ldr	r0, [sp, #12]
   1369c:	orr	r0, r0, #67108864	; 0x4000000
   136a0:	str	r0, [sp, #12]
   136a4:	mov	r0, #0
   136a8:	bl	13294 <__assert_fail@plt+0x2154>
   136ac:	sub	sp, fp, #24
   136b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136b8:	add	fp, sp, #24
   136bc:	sub	sp, sp, #96	; 0x60
   136c0:	vmov.i32	q8, #0	; 0x00000000
   136c4:	mov	lr, sp
   136c8:	mov	ip, r2
   136cc:	cmp	r1, #10
   136d0:	add	r3, lr, #16
   136d4:	mov	r2, lr
   136d8:	vst1.64	{d16-d17}, [r3]
   136dc:	mov	r3, #28
   136e0:	vst1.64	{d16-d17}, [r2], r3
   136e4:	vst1.32	{d16-d17}, [r2]
   136e8:	beq	13728 <__assert_fail@plt+0x25e8>
   136ec:	str	r1, [sp, #48]	; 0x30
   136f0:	add	r3, sp, #48	; 0x30
   136f4:	ldm	lr!, {r2, r4, r5, r6, r7}
   136f8:	add	r1, r3, #4
   136fc:	stmia	r1!, {r2, r4, r5, r6, r7}
   13700:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13704:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13708:	mvn	r2, #0
   1370c:	ldr	r1, [sp, #60]	; 0x3c
   13710:	orr	r1, r1, #67108864	; 0x4000000
   13714:	str	r1, [sp, #60]	; 0x3c
   13718:	mov	r1, ip
   1371c:	bl	13294 <__assert_fail@plt+0x2154>
   13720:	sub	sp, fp, #24
   13724:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13728:	bl	11128 <abort@plt>
   1372c:	push	{fp, lr}
   13730:	mov	fp, sp
   13734:	sub	sp, sp, #8
   13738:	mvn	ip, #0
   1373c:	str	ip, [sp]
   13740:	bl	1374c <__assert_fail@plt+0x260c>
   13744:	mov	sp, fp
   13748:	pop	{fp, pc}
   1374c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13750:	add	fp, sp, #24
   13754:	sub	sp, sp, #48	; 0x30
   13758:	movw	ip, #29080	; 0x7198
   1375c:	mov	lr, r3
   13760:	mov	r3, sp
   13764:	cmp	r1, #0
   13768:	movt	ip, #2
   1376c:	cmpne	r2, #0
   13770:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13774:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13778:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1377c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13780:	mov	r3, #10
   13784:	str	r3, [sp]
   13788:	bne	13790 <__assert_fail@plt+0x2650>
   1378c:	bl	11128 <abort@plt>
   13790:	ldr	ip, [fp, #8]
   13794:	str	r2, [sp, #44]	; 0x2c
   13798:	str	r1, [sp, #40]	; 0x28
   1379c:	mov	r3, sp
   137a0:	mov	r1, lr
   137a4:	mov	r2, ip
   137a8:	bl	13294 <__assert_fail@plt+0x2154>
   137ac:	sub	sp, fp, #24
   137b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137b4:	push	{fp, lr}
   137b8:	mov	fp, sp
   137bc:	sub	sp, sp, #8
   137c0:	mov	r3, r2
   137c4:	mov	r2, r1
   137c8:	mov	r1, r0
   137cc:	mvn	r0, #0
   137d0:	str	r0, [sp]
   137d4:	mov	r0, #0
   137d8:	bl	1374c <__assert_fail@plt+0x260c>
   137dc:	mov	sp, fp
   137e0:	pop	{fp, pc}
   137e4:	push	{fp, lr}
   137e8:	mov	fp, sp
   137ec:	sub	sp, sp, #8
   137f0:	mov	ip, r2
   137f4:	mov	r2, r1
   137f8:	mov	r1, r0
   137fc:	str	r3, [sp]
   13800:	mov	r0, #0
   13804:	mov	r3, ip
   13808:	bl	1374c <__assert_fail@plt+0x260c>
   1380c:	mov	sp, fp
   13810:	pop	{fp, pc}
   13814:	movw	r3, #28944	; 0x7110
   13818:	movt	r3, #2
   1381c:	b	13294 <__assert_fail@plt+0x2154>
   13820:	movw	r3, #28944	; 0x7110
   13824:	mov	r2, r1
   13828:	mov	r1, r0
   1382c:	mov	r0, #0
   13830:	movt	r3, #2
   13834:	b	13294 <__assert_fail@plt+0x2154>
   13838:	movw	r3, #28944	; 0x7110
   1383c:	mvn	r2, #0
   13840:	movt	r3, #2
   13844:	b	13294 <__assert_fail@plt+0x2154>
   13848:	movw	r3, #28944	; 0x7110
   1384c:	mov	r1, r0
   13850:	mov	r0, #0
   13854:	mvn	r2, #0
   13858:	movt	r3, #2
   1385c:	b	13294 <__assert_fail@plt+0x2154>
   13860:	push	{r4, r5, fp, lr}
   13864:	add	fp, sp, #8
   13868:	mov	r5, r0
   1386c:	mov	r4, r1
   13870:	mov	r0, #0
   13874:	mov	r2, #5
   13878:	mov	r1, r5
   1387c:	bl	10f24 <dcgettext@plt>
   13880:	cmp	r0, r5
   13884:	popne	{r4, r5, fp, pc}
   13888:	bl	14f28 <__assert_fail@plt+0x3de8>
   1388c:	ldrb	r1, [r0]
   13890:	and	r1, r1, #223	; 0xdf
   13894:	cmp	r1, #71	; 0x47
   13898:	beq	13900 <__assert_fail@plt+0x27c0>
   1389c:	cmp	r1, #85	; 0x55
   138a0:	bne	13958 <__assert_fail@plt+0x2818>
   138a4:	ldrb	r1, [r0, #1]
   138a8:	and	r1, r1, #223	; 0xdf
   138ac:	cmp	r1, #84	; 0x54
   138b0:	bne	13958 <__assert_fail@plt+0x2818>
   138b4:	ldrb	r1, [r0, #2]
   138b8:	and	r1, r1, #223	; 0xdf
   138bc:	cmp	r1, #70	; 0x46
   138c0:	bne	13958 <__assert_fail@plt+0x2818>
   138c4:	ldrb	r1, [r0, #3]
   138c8:	cmp	r1, #45	; 0x2d
   138cc:	bne	13958 <__assert_fail@plt+0x2818>
   138d0:	ldrb	r1, [r0, #4]
   138d4:	cmp	r1, #56	; 0x38
   138d8:	bne	13958 <__assert_fail@plt+0x2818>
   138dc:	ldrb	r0, [r0, #5]
   138e0:	cmp	r0, #0
   138e4:	bne	13958 <__assert_fail@plt+0x2818>
   138e8:	ldrb	r1, [r5]
   138ec:	movw	r2, #23600	; 0x5c30
   138f0:	movw	r0, #23604	; 0x5c34
   138f4:	movt	r2, #1
   138f8:	movt	r0, #1
   138fc:	b	13988 <__assert_fail@plt+0x2848>
   13900:	ldrb	r1, [r0, #1]
   13904:	and	r1, r1, #223	; 0xdf
   13908:	cmp	r1, #66	; 0x42
   1390c:	bne	13958 <__assert_fail@plt+0x2818>
   13910:	ldrb	r1, [r0, #2]
   13914:	cmp	r1, #49	; 0x31
   13918:	bne	13958 <__assert_fail@plt+0x2818>
   1391c:	ldrb	r1, [r0, #3]
   13920:	cmp	r1, #56	; 0x38
   13924:	bne	13958 <__assert_fail@plt+0x2818>
   13928:	ldrb	r1, [r0, #4]
   1392c:	cmp	r1, #48	; 0x30
   13930:	bne	13958 <__assert_fail@plt+0x2818>
   13934:	ldrb	r1, [r0, #5]
   13938:	cmp	r1, #51	; 0x33
   1393c:	bne	13958 <__assert_fail@plt+0x2818>
   13940:	ldrb	r1, [r0, #6]
   13944:	cmp	r1, #48	; 0x30
   13948:	bne	13958 <__assert_fail@plt+0x2818>
   1394c:	ldrb	r0, [r0, #7]
   13950:	cmp	r0, #0
   13954:	beq	13974 <__assert_fail@plt+0x2834>
   13958:	movw	r1, #23594	; 0x5c2a
   1395c:	movw	r0, #23598	; 0x5c2e
   13960:	cmp	r4, #9
   13964:	movt	r1, #1
   13968:	movt	r0, #1
   1396c:	moveq	r0, r1
   13970:	pop	{r4, r5, fp, pc}
   13974:	ldrb	r1, [r5]
   13978:	movw	r2, #23608	; 0x5c38
   1397c:	movw	r0, #23612	; 0x5c3c
   13980:	movt	r2, #1
   13984:	movt	r0, #1
   13988:	cmp	r1, #96	; 0x60
   1398c:	moveq	r0, r2
   13990:	pop	{r4, r5, fp, pc}
   13994:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13998:	add	fp, sp, #24
   1399c:	sub	sp, sp, #32
   139a0:	ldr	r6, [fp, #12]
   139a4:	ldr	r7, [fp, #8]
   139a8:	mov	r4, r2
   139ac:	mov	r8, r0
   139b0:	cmp	r1, #0
   139b4:	beq	139dc <__assert_fail@plt+0x289c>
   139b8:	movw	r2, #23700	; 0x5c94
   139bc:	mov	r5, r1
   139c0:	str	r3, [sp, #4]
   139c4:	str	r4, [sp]
   139c8:	mov	r0, r8
   139cc:	mov	r1, #1
   139d0:	movt	r2, #1
   139d4:	mov	r3, r5
   139d8:	b	139f4 <__assert_fail@plt+0x28b4>
   139dc:	movw	r2, #23712	; 0x5ca0
   139e0:	str	r3, [sp]
   139e4:	mov	r0, r8
   139e8:	mov	r1, #1
   139ec:	mov	r3, r4
   139f0:	movt	r2, #1
   139f4:	bl	11080 <__fprintf_chk@plt>
   139f8:	movw	r1, #23719	; 0x5ca7
   139fc:	mov	r0, #0
   13a00:	mov	r2, #5
   13a04:	movt	r1, #1
   13a08:	bl	10f24 <dcgettext@plt>
   13a0c:	movw	r2, #24437	; 0x5f75
   13a10:	mov	r3, r0
   13a14:	movw	r0, #2022	; 0x7e6
   13a18:	mov	r1, #1
   13a1c:	movt	r2, #1
   13a20:	str	r0, [sp]
   13a24:	mov	r0, r8
   13a28:	bl	11080 <__fprintf_chk@plt>
   13a2c:	movw	r4, #23044	; 0x5a04
   13a30:	mov	r1, r8
   13a34:	movt	r4, #1
   13a38:	mov	r0, r4
   13a3c:	bl	10eb8 <fputs_unlocked@plt>
   13a40:	movw	r1, #23723	; 0x5cab
   13a44:	mov	r0, #0
   13a48:	mov	r2, #5
   13a4c:	movt	r1, #1
   13a50:	bl	10f24 <dcgettext@plt>
   13a54:	movw	r3, #23894	; 0x5d56
   13a58:	mov	r2, r0
   13a5c:	mov	r0, r8
   13a60:	mov	r1, #1
   13a64:	movt	r3, #1
   13a68:	bl	11080 <__fprintf_chk@plt>
   13a6c:	mov	r0, r4
   13a70:	mov	r1, r8
   13a74:	bl	10eb8 <fputs_unlocked@plt>
   13a78:	cmp	r6, #9
   13a7c:	bhi	13ae0 <__assert_fail@plt+0x29a0>
   13a80:	add	r0, pc, #0
   13a84:	ldr	pc, [r0, r6, lsl #2]
   13a88:			; <UNDEFINED> instruction: 0x00013cb8
   13a8c:			; <UNDEFINED> instruction: 0x00013ab0
   13a90:	andeq	r3, r1, ip, ror #21
   13a94:	andeq	r3, r1, r4, lsl fp
   13a98:	andeq	r3, r1, ip, lsr fp
   13a9c:	andeq	r3, r1, r4, ror #22
   13aa0:	andeq	r3, r1, ip, lsl #23
   13aa4:	andeq	r3, r1, r4, asr #23
   13aa8:	andeq	r3, r1, r4, ror #24
   13aac:	andeq	r3, r1, ip, lsl #24
   13ab0:	movw	r1, #23928	; 0x5d78
   13ab4:	mov	r0, #0
   13ab8:	mov	r2, #5
   13abc:	movt	r1, #1
   13ac0:	bl	10f24 <dcgettext@plt>
   13ac4:	ldr	r3, [r7]
   13ac8:	mov	r2, r0
   13acc:	mov	r0, r8
   13ad0:	mov	r1, #1
   13ad4:	sub	sp, fp, #24
   13ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13adc:	b	11080 <__fprintf_chk@plt>
   13ae0:	movw	r1, #24247	; 0x5eb7
   13ae4:	movt	r1, #1
   13ae8:	b	13c14 <__assert_fail@plt+0x2ad4>
   13aec:	movw	r1, #23944	; 0x5d88
   13af0:	mov	r0, #0
   13af4:	mov	r2, #5
   13af8:	movt	r1, #1
   13afc:	bl	10f24 <dcgettext@plt>
   13b00:	mov	r2, r0
   13b04:	ldr	r3, [r7]
   13b08:	ldr	r0, [r7, #4]
   13b0c:	str	r0, [sp]
   13b10:	b	13c00 <__assert_fail@plt+0x2ac0>
   13b14:	movw	r1, #23967	; 0x5d9f
   13b18:	mov	r0, #0
   13b1c:	mov	r2, #5
   13b20:	movt	r1, #1
   13b24:	bl	10f24 <dcgettext@plt>
   13b28:	mov	r2, r0
   13b2c:	ldr	r3, [r7]
   13b30:	ldmib	r7, {r0, r1}
   13b34:	stm	sp, {r0, r1}
   13b38:	b	13c00 <__assert_fail@plt+0x2ac0>
   13b3c:	movw	r1, #23995	; 0x5dbb
   13b40:	mov	r0, #0
   13b44:	mov	r2, #5
   13b48:	movt	r1, #1
   13b4c:	bl	10f24 <dcgettext@plt>
   13b50:	ldr	r3, [r7]
   13b54:	mov	r2, r0
   13b58:	ldmib	r7, {r0, r1, r7}
   13b5c:	stm	sp, {r0, r1, r7}
   13b60:	b	13c00 <__assert_fail@plt+0x2ac0>
   13b64:	movw	r1, #24027	; 0x5ddb
   13b68:	mov	r0, #0
   13b6c:	mov	r2, #5
   13b70:	movt	r1, #1
   13b74:	bl	10f24 <dcgettext@plt>
   13b78:	ldr	r3, [r7]
   13b7c:	mov	r2, r0
   13b80:	ldmib	r7, {r0, r1, r6, r7}
   13b84:	stm	sp, {r0, r1, r6, r7}
   13b88:	b	13c00 <__assert_fail@plt+0x2ac0>
   13b8c:	movw	r1, #24063	; 0x5dff
   13b90:	mov	r0, #0
   13b94:	mov	r2, #5
   13b98:	movt	r1, #1
   13b9c:	bl	10f24 <dcgettext@plt>
   13ba0:	mov	r2, r0
   13ba4:	ldr	r3, [r7]
   13ba8:	ldmib	r7, {r0, r1, r6}
   13bac:	ldr	r5, [r7, #16]
   13bb0:	ldr	r7, [r7, #20]
   13bb4:	stm	sp, {r0, r1, r6}
   13bb8:	str	r5, [sp, #12]
   13bbc:	str	r7, [sp, #16]
   13bc0:	b	13c00 <__assert_fail@plt+0x2ac0>
   13bc4:	movw	r1, #24103	; 0x5e27
   13bc8:	mov	r0, #0
   13bcc:	mov	r2, #5
   13bd0:	movt	r1, #1
   13bd4:	bl	10f24 <dcgettext@plt>
   13bd8:	mov	r2, r0
   13bdc:	ldr	r3, [r7]
   13be0:	ldmib	r7, {r0, r1, r6}
   13be4:	ldr	r5, [r7, #16]
   13be8:	ldr	r4, [r7, #20]
   13bec:	ldr	r7, [r7, #24]
   13bf0:	stm	sp, {r0, r1, r6}
   13bf4:	str	r5, [sp, #12]
   13bf8:	str	r4, [sp, #16]
   13bfc:	str	r7, [sp, #20]
   13c00:	mov	r0, r8
   13c04:	mov	r1, #1
   13c08:	b	13cb4 <__assert_fail@plt+0x2b74>
   13c0c:	movw	r1, #24195	; 0x5e83
   13c10:	movt	r1, #1
   13c14:	mov	r0, #0
   13c18:	mov	r2, #5
   13c1c:	bl	10f24 <dcgettext@plt>
   13c20:	mov	ip, r0
   13c24:	ldr	r3, [r7]
   13c28:	ldr	r0, [r7, #4]
   13c2c:	ldr	r1, [r7, #8]
   13c30:	ldr	r6, [r7, #12]
   13c34:	ldr	r5, [r7, #16]
   13c38:	ldr	r4, [r7, #20]
   13c3c:	ldr	r2, [r7, #24]
   13c40:	ldr	lr, [r7, #28]
   13c44:	ldr	r7, [r7, #32]
   13c48:	stm	sp, {r0, r1, r6}
   13c4c:	str	r5, [sp, #12]
   13c50:	str	r4, [sp, #16]
   13c54:	str	r2, [sp, #20]
   13c58:	str	lr, [sp, #24]
   13c5c:	str	r7, [sp, #28]
   13c60:	b	13ca8 <__assert_fail@plt+0x2b68>
   13c64:	movw	r1, #24147	; 0x5e53
   13c68:	mov	r0, #0
   13c6c:	mov	r2, #5
   13c70:	movt	r1, #1
   13c74:	bl	10f24 <dcgettext@plt>
   13c78:	mov	ip, r0
   13c7c:	ldr	r3, [r7]
   13c80:	ldmib	r7, {r0, r1, r6}
   13c84:	ldr	r5, [r7, #16]
   13c88:	ldr	r4, [r7, #20]
   13c8c:	ldr	r2, [r7, #24]
   13c90:	ldr	r7, [r7, #28]
   13c94:	stm	sp, {r0, r1, r6}
   13c98:	str	r5, [sp, #12]
   13c9c:	str	r4, [sp, #16]
   13ca0:	str	r2, [sp, #20]
   13ca4:	str	r7, [sp, #24]
   13ca8:	mov	r0, r8
   13cac:	mov	r1, #1
   13cb0:	mov	r2, ip
   13cb4:	bl	11080 <__fprintf_chk@plt>
   13cb8:	sub	sp, fp, #24
   13cbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cc0:	push	{r4, sl, fp, lr}
   13cc4:	add	fp, sp, #8
   13cc8:	sub	sp, sp, #8
   13ccc:	ldr	ip, [fp, #8]
   13cd0:	mov	lr, #0
   13cd4:	ldr	r4, [ip, lr, lsl #2]
   13cd8:	add	lr, lr, #1
   13cdc:	cmp	r4, #0
   13ce0:	bne	13cd4 <__assert_fail@plt+0x2b94>
   13ce4:	sub	r4, lr, #1
   13ce8:	str	ip, [sp]
   13cec:	str	r4, [sp, #4]
   13cf0:	bl	13994 <__assert_fail@plt+0x2854>
   13cf4:	sub	sp, fp, #8
   13cf8:	pop	{r4, sl, fp, pc}
   13cfc:	push	{r4, r5, fp, lr}
   13d00:	add	fp, sp, #8
   13d04:	sub	sp, sp, #48	; 0x30
   13d08:	ldr	r4, [fp, #8]
   13d0c:	mov	ip, #0
   13d10:	add	lr, sp, #8
   13d14:	ldr	r5, [r4]
   13d18:	cmp	r5, #0
   13d1c:	str	r5, [lr, ip, lsl #2]
   13d20:	beq	13d38 <__assert_fail@plt+0x2bf8>
   13d24:	add	ip, ip, #1
   13d28:	add	r4, r4, #4
   13d2c:	cmp	ip, #10
   13d30:	bne	13d14 <__assert_fail@plt+0x2bd4>
   13d34:	mov	ip, #10
   13d38:	str	lr, [sp]
   13d3c:	str	ip, [sp, #4]
   13d40:	bl	13994 <__assert_fail@plt+0x2854>
   13d44:	sub	sp, fp, #8
   13d48:	pop	{r4, r5, fp, pc}
   13d4c:	push	{fp, lr}
   13d50:	mov	fp, sp
   13d54:	sub	sp, sp, #8
   13d58:	add	ip, fp, #8
   13d5c:	str	ip, [sp, #4]
   13d60:	str	ip, [sp]
   13d64:	bl	13cfc <__assert_fail@plt+0x2bbc>
   13d68:	mov	sp, fp
   13d6c:	pop	{fp, pc}
   13d70:	push	{fp, lr}
   13d74:	mov	fp, sp
   13d78:	movw	r0, #29012	; 0x7154
   13d7c:	movt	r0, #2
   13d80:	ldr	r1, [r0]
   13d84:	movw	r0, #23044	; 0x5a04
   13d88:	movt	r0, #1
   13d8c:	bl	10eb8 <fputs_unlocked@plt>
   13d90:	movw	r1, #24307	; 0x5ef3
   13d94:	mov	r0, #0
   13d98:	mov	r2, #5
   13d9c:	movt	r1, #1
   13da0:	bl	10f24 <dcgettext@plt>
   13da4:	movw	r2, #24327	; 0x5f07
   13da8:	mov	r1, r0
   13dac:	mov	r0, #1
   13db0:	movt	r2, #1
   13db4:	bl	1105c <__printf_chk@plt>
   13db8:	movw	r1, #24349	; 0x5f1d
   13dbc:	mov	r0, #0
   13dc0:	mov	r2, #5
   13dc4:	movt	r1, #1
   13dc8:	bl	10f24 <dcgettext@plt>
   13dcc:	movw	r2, #22525	; 0x57fd
   13dd0:	movw	r3, #22853	; 0x5945
   13dd4:	mov	r1, r0
   13dd8:	mov	r0, #1
   13ddc:	movt	r2, #1
   13de0:	movt	r3, #1
   13de4:	bl	1105c <__printf_chk@plt>
   13de8:	movw	r1, #24369	; 0x5f31
   13dec:	mov	r0, #0
   13df0:	mov	r2, #5
   13df4:	movt	r1, #1
   13df8:	bl	10f24 <dcgettext@plt>
   13dfc:	movw	r2, #24408	; 0x5f58
   13e00:	mov	r1, r0
   13e04:	mov	r0, #1
   13e08:	movt	r2, #1
   13e0c:	pop	{fp, lr}
   13e10:	b	1105c <__printf_chk@plt>
   13e14:	b	13e18 <__assert_fail@plt+0x2cd8>
   13e18:	push	{r4, r5, r6, sl, fp, lr}
   13e1c:	add	fp, sp, #16
   13e20:	mov	r4, r2
   13e24:	mov	r5, r1
   13e28:	mov	r6, r0
   13e2c:	bl	14fc4 <__assert_fail@plt+0x3e84>
   13e30:	cmp	r0, #0
   13e34:	popne	{r4, r5, r6, sl, fp, pc}
   13e38:	cmp	r6, #0
   13e3c:	beq	13e50 <__assert_fail@plt+0x2d10>
   13e40:	cmp	r5, #0
   13e44:	cmpne	r4, #0
   13e48:	bne	13e50 <__assert_fail@plt+0x2d10>
   13e4c:	pop	{r4, r5, r6, sl, fp, pc}
   13e50:	bl	14280 <__assert_fail@plt+0x3140>
   13e54:	push	{fp, lr}
   13e58:	mov	fp, sp
   13e5c:	bl	14a08 <__assert_fail@plt+0x38c8>
   13e60:	cmp	r0, #0
   13e64:	popne	{fp, pc}
   13e68:	bl	14280 <__assert_fail@plt+0x3140>
   13e6c:	push	{fp, lr}
   13e70:	mov	fp, sp
   13e74:	bl	14a08 <__assert_fail@plt+0x38c8>
   13e78:	cmp	r0, #0
   13e7c:	popne	{fp, pc}
   13e80:	bl	14280 <__assert_fail@plt+0x3140>
   13e84:	push	{fp, lr}
   13e88:	mov	fp, sp
   13e8c:	bl	14a08 <__assert_fail@plt+0x38c8>
   13e90:	cmp	r0, #0
   13e94:	popne	{fp, pc}
   13e98:	bl	14280 <__assert_fail@plt+0x3140>
   13e9c:	push	{r4, r5, fp, lr}
   13ea0:	add	fp, sp, #8
   13ea4:	mov	r4, r1
   13ea8:	mov	r5, r0
   13eac:	bl	14a38 <__assert_fail@plt+0x38f8>
   13eb0:	cmp	r0, #0
   13eb4:	popne	{r4, r5, fp, pc}
   13eb8:	cmp	r5, #0
   13ebc:	beq	13ecc <__assert_fail@plt+0x2d8c>
   13ec0:	cmp	r4, #0
   13ec4:	bne	13ecc <__assert_fail@plt+0x2d8c>
   13ec8:	pop	{r4, r5, fp, pc}
   13ecc:	bl	14280 <__assert_fail@plt+0x3140>
   13ed0:	push	{fp, lr}
   13ed4:	mov	fp, sp
   13ed8:	cmp	r1, #0
   13edc:	orreq	r1, r1, #1
   13ee0:	bl	14a38 <__assert_fail@plt+0x38f8>
   13ee4:	cmp	r0, #0
   13ee8:	popne	{fp, pc}
   13eec:	bl	14280 <__assert_fail@plt+0x3140>
   13ef0:	push	{fp, lr}
   13ef4:	mov	fp, sp
   13ef8:	clz	r3, r2
   13efc:	lsr	ip, r3, #5
   13f00:	clz	r3, r1
   13f04:	lsr	r3, r3, #5
   13f08:	orrs	r3, r3, ip
   13f0c:	movwne	r1, #1
   13f10:	movwne	r2, #1
   13f14:	bl	14fc4 <__assert_fail@plt+0x3e84>
   13f18:	cmp	r0, #0
   13f1c:	popne	{fp, pc}
   13f20:	bl	14280 <__assert_fail@plt+0x3140>
   13f24:	push	{fp, lr}
   13f28:	mov	fp, sp
   13f2c:	mov	r2, r1
   13f30:	mov	r1, r0
   13f34:	mov	r0, #0
   13f38:	bl	14fc4 <__assert_fail@plt+0x3e84>
   13f3c:	cmp	r0, #0
   13f40:	popne	{fp, pc}
   13f44:	bl	14280 <__assert_fail@plt+0x3140>
   13f48:	mov	r2, r1
   13f4c:	mov	r1, r0
   13f50:	mov	r0, #0
   13f54:	b	13ef0 <__assert_fail@plt+0x2db0>
   13f58:	mov	r2, #1
   13f5c:	b	13f60 <__assert_fail@plt+0x2e20>
   13f60:	push	{r4, r5, fp, lr}
   13f64:	add	fp, sp, #8
   13f68:	ldr	r5, [r1]
   13f6c:	mov	r4, r1
   13f70:	cmp	r0, #0
   13f74:	beq	13f8c <__assert_fail@plt+0x2e4c>
   13f78:	mov	r1, #1
   13f7c:	add	r1, r1, r5, lsr #1
   13f80:	adds	r5, r5, r1
   13f84:	bcc	13fa4 <__assert_fail@plt+0x2e64>
   13f88:	bl	14280 <__assert_fail@plt+0x3140>
   13f8c:	cmp	r5, #0
   13f90:	bne	13fa4 <__assert_fail@plt+0x2e64>
   13f94:	mov	r1, #64	; 0x40
   13f98:	cmp	r2, #64	; 0x40
   13f9c:	udiv	r5, r1, r2
   13fa0:	addhi	r5, r5, #1
   13fa4:	mov	r1, r5
   13fa8:	bl	13e18 <__assert_fail@plt+0x2cd8>
   13fac:	str	r5, [r4]
   13fb0:	pop	{r4, r5, fp, pc}
   13fb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fb8:	add	fp, sp, #24
   13fbc:	ldr	r6, [r1]
   13fc0:	mov	r8, r1
   13fc4:	ldr	r4, [fp, #8]
   13fc8:	add	r1, r6, r6, asr #1
   13fcc:	cmp	r1, r6
   13fd0:	mvnvs	r1, #-2147483648	; 0x80000000
   13fd4:	cmp	r1, r3
   13fd8:	mov	r5, r1
   13fdc:	movgt	r5, r3
   13fe0:	cmn	r3, #1
   13fe4:	movle	r5, r1
   13fe8:	cmn	r4, #1
   13fec:	ble	1400c <__assert_fail@plt+0x2ecc>
   13ff0:	cmp	r4, #0
   13ff4:	beq	14060 <__assert_fail@plt+0x2f20>
   13ff8:	cmn	r5, #1
   13ffc:	ble	14034 <__assert_fail@plt+0x2ef4>
   14000:	mvn	r7, #-2147483648	; 0x80000000
   14004:	udiv	r1, r7, r4
   14008:	b	14028 <__assert_fail@plt+0x2ee8>
   1400c:	cmn	r5, #1
   14010:	ble	14050 <__assert_fail@plt+0x2f10>
   14014:	cmn	r4, #1
   14018:	beq	14060 <__assert_fail@plt+0x2f20>
   1401c:	mov	r1, #-2147483648	; 0x80000000
   14020:	mvn	r7, #-2147483648	; 0x80000000
   14024:	sdiv	r1, r1, r4
   14028:	cmp	r1, r5
   1402c:	bge	14060 <__assert_fail@plt+0x2f20>
   14030:	b	14070 <__assert_fail@plt+0x2f30>
   14034:	beq	14060 <__assert_fail@plt+0x2f20>
   14038:	mov	r1, #-2147483648	; 0x80000000
   1403c:	mvn	r7, #-2147483648	; 0x80000000
   14040:	sdiv	r1, r1, r5
   14044:	cmp	r1, r4
   14048:	bge	14060 <__assert_fail@plt+0x2f20>
   1404c:	b	14070 <__assert_fail@plt+0x2f30>
   14050:	mvn	r7, #-2147483648	; 0x80000000
   14054:	sdiv	r1, r7, r4
   14058:	cmp	r5, r1
   1405c:	blt	14070 <__assert_fail@plt+0x2f30>
   14060:	mul	r1, r5, r4
   14064:	mov	r7, #64	; 0x40
   14068:	cmp	r1, #63	; 0x3f
   1406c:	bgt	14078 <__assert_fail@plt+0x2f38>
   14070:	sdiv	r5, r7, r4
   14074:	mul	r1, r5, r4
   14078:	cmp	r0, #0
   1407c:	moveq	r7, #0
   14080:	streq	r7, [r8]
   14084:	sub	r7, r5, r6
   14088:	cmp	r7, r2
   1408c:	bge	14130 <__assert_fail@plt+0x2ff0>
   14090:	add	r5, r6, r2
   14094:	mov	r2, #0
   14098:	mov	r1, #0
   1409c:	cmp	r5, r3
   140a0:	movwgt	r2, #1
   140a4:	cmn	r3, #1
   140a8:	movwgt	r1, #1
   140ac:	cmp	r5, r6
   140b0:	bvs	14118 <__assert_fail@plt+0x2fd8>
   140b4:	ands	r1, r1, r2
   140b8:	bne	14118 <__assert_fail@plt+0x2fd8>
   140bc:	cmn	r4, #1
   140c0:	ble	140e0 <__assert_fail@plt+0x2fa0>
   140c4:	cmp	r4, #0
   140c8:	beq	1412c <__assert_fail@plt+0x2fec>
   140cc:	cmn	r5, #1
   140d0:	ble	14104 <__assert_fail@plt+0x2fc4>
   140d4:	mvn	r1, #-2147483648	; 0x80000000
   140d8:	udiv	r1, r1, r4
   140dc:	b	140f8 <__assert_fail@plt+0x2fb8>
   140e0:	cmn	r5, #1
   140e4:	ble	1411c <__assert_fail@plt+0x2fdc>
   140e8:	cmn	r4, #1
   140ec:	beq	1412c <__assert_fail@plt+0x2fec>
   140f0:	mov	r1, #-2147483648	; 0x80000000
   140f4:	sdiv	r1, r1, r4
   140f8:	cmp	r1, r5
   140fc:	bge	1412c <__assert_fail@plt+0x2fec>
   14100:	b	14118 <__assert_fail@plt+0x2fd8>
   14104:	beq	1412c <__assert_fail@plt+0x2fec>
   14108:	mov	r1, #-2147483648	; 0x80000000
   1410c:	sdiv	r1, r1, r5
   14110:	cmp	r1, r4
   14114:	bge	1412c <__assert_fail@plt+0x2fec>
   14118:	bl	14280 <__assert_fail@plt+0x3140>
   1411c:	mvn	r1, #-2147483648	; 0x80000000
   14120:	sdiv	r1, r1, r4
   14124:	cmp	r5, r1
   14128:	blt	14118 <__assert_fail@plt+0x2fd8>
   1412c:	mul	r1, r5, r4
   14130:	bl	13e9c <__assert_fail@plt+0x2d5c>
   14134:	str	r5, [r8]
   14138:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1413c:	push	{fp, lr}
   14140:	mov	fp, sp
   14144:	mov	r1, #1
   14148:	bl	149b4 <__assert_fail@plt+0x3874>
   1414c:	cmp	r0, #0
   14150:	popne	{fp, pc}
   14154:	bl	14280 <__assert_fail@plt+0x3140>
   14158:	push	{fp, lr}
   1415c:	mov	fp, sp
   14160:	bl	149b4 <__assert_fail@plt+0x3874>
   14164:	cmp	r0, #0
   14168:	popne	{fp, pc}
   1416c:	bl	14280 <__assert_fail@plt+0x3140>
   14170:	push	{fp, lr}
   14174:	mov	fp, sp
   14178:	mov	r1, #1
   1417c:	bl	149b4 <__assert_fail@plt+0x3874>
   14180:	cmp	r0, #0
   14184:	popne	{fp, pc}
   14188:	bl	14280 <__assert_fail@plt+0x3140>
   1418c:	push	{fp, lr}
   14190:	mov	fp, sp
   14194:	bl	149b4 <__assert_fail@plt+0x3874>
   14198:	cmp	r0, #0
   1419c:	popne	{fp, pc}
   141a0:	bl	14280 <__assert_fail@plt+0x3140>
   141a4:	push	{r4, r5, fp, lr}
   141a8:	add	fp, sp, #8
   141ac:	mov	r5, r0
   141b0:	mov	r0, r1
   141b4:	mov	r4, r1
   141b8:	bl	14a08 <__assert_fail@plt+0x38c8>
   141bc:	cmp	r0, #0
   141c0:	beq	141d4 <__assert_fail@plt+0x3094>
   141c4:	mov	r1, r5
   141c8:	mov	r2, r4
   141cc:	pop	{r4, r5, fp, lr}
   141d0:	b	10f00 <memcpy@plt>
   141d4:	bl	14280 <__assert_fail@plt+0x3140>
   141d8:	push	{r4, r5, fp, lr}
   141dc:	add	fp, sp, #8
   141e0:	mov	r5, r0
   141e4:	mov	r0, r1
   141e8:	mov	r4, r1
   141ec:	bl	14a08 <__assert_fail@plt+0x38c8>
   141f0:	cmp	r0, #0
   141f4:	beq	14208 <__assert_fail@plt+0x30c8>
   141f8:	mov	r1, r5
   141fc:	mov	r2, r4
   14200:	pop	{r4, r5, fp, lr}
   14204:	b	10f00 <memcpy@plt>
   14208:	bl	14280 <__assert_fail@plt+0x3140>
   1420c:	push	{r4, r5, fp, lr}
   14210:	add	fp, sp, #8
   14214:	mov	r5, r0
   14218:	add	r0, r1, #1
   1421c:	mov	r4, r1
   14220:	bl	14a08 <__assert_fail@plt+0x38c8>
   14224:	cmp	r0, #0
   14228:	beq	14244 <__assert_fail@plt+0x3104>
   1422c:	mov	r1, #0
   14230:	mov	r2, r4
   14234:	strb	r1, [r0, r4]
   14238:	mov	r1, r5
   1423c:	pop	{r4, r5, fp, lr}
   14240:	b	10f00 <memcpy@plt>
   14244:	bl	14280 <__assert_fail@plt+0x3140>
   14248:	push	{r4, r5, fp, lr}
   1424c:	add	fp, sp, #8
   14250:	mov	r4, r0
   14254:	bl	11020 <strlen@plt>
   14258:	add	r5, r0, #1
   1425c:	mov	r0, r5
   14260:	bl	14a08 <__assert_fail@plt+0x38c8>
   14264:	cmp	r0, #0
   14268:	beq	1427c <__assert_fail@plt+0x313c>
   1426c:	mov	r1, r4
   14270:	mov	r2, r5
   14274:	pop	{r4, r5, fp, lr}
   14278:	b	10f00 <memcpy@plt>
   1427c:	bl	14280 <__assert_fail@plt+0x3140>
   14280:	push	{fp, lr}
   14284:	mov	fp, sp
   14288:	movw	r0, #28924	; 0x70fc
   1428c:	movw	r1, #24484	; 0x5fa4
   14290:	mov	r2, #5
   14294:	movt	r0, #2
   14298:	movt	r1, #1
   1429c:	ldr	r4, [r0]
   142a0:	mov	r0, #0
   142a4:	bl	10f24 <dcgettext@plt>
   142a8:	movw	r2, #23447	; 0x5b97
   142ac:	mov	r3, r0
   142b0:	mov	r0, r4
   142b4:	mov	r1, #0
   142b8:	movt	r2, #1
   142bc:	bl	10f9c <error@plt>
   142c0:	bl	11128 <abort@plt>
   142c4:	push	{r4, sl, fp, lr}
   142c8:	add	fp, sp, #8
   142cc:	bl	14a88 <__assert_fail@plt+0x3948>
   142d0:	mov	r4, r0
   142d4:	cmp	r0, #0
   142d8:	bne	142ec <__assert_fail@plt+0x31ac>
   142dc:	bl	11038 <__errno_location@plt>
   142e0:	ldr	r0, [r0]
   142e4:	cmp	r0, #12
   142e8:	beq	142f4 <__assert_fail@plt+0x31b4>
   142ec:	mov	r0, r4
   142f0:	pop	{r4, sl, fp, pc}
   142f4:	bl	14280 <__assert_fail@plt+0x3140>
   142f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142fc:	add	fp, sp, #28
   14300:	sub	sp, sp, #20
   14304:	cmp	r2, #37	; 0x25
   14308:	bcs	14994 <__assert_fail@plt+0x3854>
   1430c:	mov	r8, r3
   14310:	mov	r5, r2
   14314:	mov	r6, r1
   14318:	mov	r4, r0
   1431c:	bl	11038 <__errno_location@plt>
   14320:	mov	r7, r0
   14324:	mov	r0, #0
   14328:	str	r0, [r7]
   1432c:	bl	10ffc <__ctype_b_loc@plt>
   14330:	ldr	r1, [r0]
   14334:	mov	r2, r4
   14338:	ldrb	r0, [r2], #1
   1433c:	add	r3, r1, r0, lsl #1
   14340:	ldrb	r3, [r3, #1]
   14344:	tst	r3, #32
   14348:	bne	14338 <__assert_fail@plt+0x31f8>
   1434c:	cmp	r6, #0
   14350:	add	sl, sp, #16
   14354:	movne	sl, r6
   14358:	mov	r6, #4
   1435c:	cmp	r0, #45	; 0x2d
   14360:	beq	14988 <__assert_fail@plt+0x3848>
   14364:	mov	r0, r4
   14368:	mov	r1, sl
   1436c:	mov	r2, r5
   14370:	str	r8, [sp, #12]
   14374:	bl	11074 <strtoumax@plt>
   14378:	ldr	r5, [sl]
   1437c:	cmp	r5, r4
   14380:	beq	143a8 <__assert_fail@plt+0x3268>
   14384:	mov	r8, r0
   14388:	ldr	r0, [r7]
   1438c:	mov	r9, r1
   14390:	cmp	r0, #0
   14394:	beq	143dc <__assert_fail@plt+0x329c>
   14398:	cmp	r0, #34	; 0x22
   1439c:	bne	14988 <__assert_fail@plt+0x3848>
   143a0:	mov	r6, #1
   143a4:	b	143e0 <__assert_fail@plt+0x32a0>
   143a8:	ldr	r0, [fp, #8]
   143ac:	cmp	r0, #0
   143b0:	beq	14988 <__assert_fail@plt+0x3848>
   143b4:	ldrb	r1, [r4]
   143b8:	cmp	r1, #0
   143bc:	beq	14988 <__assert_fail@plt+0x3848>
   143c0:	bl	1102c <strchr@plt>
   143c4:	cmp	r0, #0
   143c8:	beq	14988 <__assert_fail@plt+0x3848>
   143cc:	mov	r6, #0
   143d0:	mov	r8, #1
   143d4:	mov	r9, #0
   143d8:	b	143ec <__assert_fail@plt+0x32ac>
   143dc:	mov	r6, r0
   143e0:	ldr	r0, [fp, #8]
   143e4:	cmp	r0, #0
   143e8:	beq	14980 <__assert_fail@plt+0x3840>
   143ec:	ldrb	r7, [r5]
   143f0:	cmp	r7, #0
   143f4:	beq	14980 <__assert_fail@plt+0x3840>
   143f8:	ldr	r0, [fp, #8]
   143fc:	mov	r1, r7
   14400:	bl	1102c <strchr@plt>
   14404:	cmp	r0, #0
   14408:	beq	14510 <__assert_fail@plt+0x33d0>
   1440c:	sub	r0, r7, #69	; 0x45
   14410:	mov	r1, #1
   14414:	mov	r3, #0
   14418:	mov	r4, #1024	; 0x400
   1441c:	cmp	r0, #21
   14420:	str	r1, [sp, #8]
   14424:	bhi	1443c <__assert_fail@plt+0x32fc>
   14428:	movw	r2, #35141	; 0x8945
   1442c:	mov	r1, #1
   14430:	movt	r2, #48	; 0x30
   14434:	tst	r2, r1, lsl r0
   14438:	bne	14458 <__assert_fail@plt+0x3318>
   1443c:	sub	r0, r7, #103	; 0x67
   14440:	cmp	r0, #13
   14444:	bhi	1448c <__assert_fail@plt+0x334c>
   14448:	mov	r1, #1
   1444c:	movw	r2, #8273	; 0x2051
   14450:	tst	r2, r1, lsl r0
   14454:	beq	1448c <__assert_fail@plt+0x334c>
   14458:	ldr	r0, [fp, #8]
   1445c:	mov	r1, #48	; 0x30
   14460:	bl	1102c <strchr@plt>
   14464:	cmp	r0, #0
   14468:	beq	14488 <__assert_fail@plt+0x3348>
   1446c:	ldrb	r0, [r5, #1]
   14470:	cmp	r0, #66	; 0x42
   14474:	cmpne	r0, #68	; 0x44
   14478:	bne	145a0 <__assert_fail@plt+0x3460>
   1447c:	mov	r4, #1000	; 0x3e8
   14480:	mov	r0, #2
   14484:	str	r0, [sp, #8]
   14488:	mov	r3, #0
   1448c:	cmp	r7, #89	; 0x59
   14490:	stm	sp, {r5, r6}
   14494:	bgt	1451c <__assert_fail@plt+0x33dc>
   14498:	sub	r0, r7, #66	; 0x42
   1449c:	cmp	r0, #14
   144a0:	bhi	145c4 <__assert_fail@plt+0x3484>
   144a4:	add	r1, pc, #0
   144a8:	ldr	pc, [r1, r0, lsl #2]
   144ac:	andeq	r4, r1, r8, ror #9
   144b0:	andeq	r4, r1, r4, ror r8
   144b4:	andeq	r4, r1, r4, ror r8
   144b8:	andeq	r4, r1, r8, lsl #17
   144bc:	andeq	r4, r1, r4, ror r8
   144c0:	andeq	r4, r1, r8, ror r6
   144c4:	andeq	r4, r1, r4, ror r8
   144c8:	andeq	r4, r1, r4, ror r8
   144cc:	andeq	r4, r1, r4, ror r8
   144d0:	andeq	r4, r1, r4, ror #13
   144d4:	andeq	r4, r1, r4, ror r8
   144d8:	andeq	r4, r1, r8, lsr #14
   144dc:	andeq	r4, r1, r4, ror r8
   144e0:	andeq	r4, r1, r4, ror r8
   144e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144e8:	mov	r1, #0
   144ec:	lsl	r3, r9, #10
   144f0:	lsl	r0, r8, #10
   144f4:	lsr	r2, r9, #22
   144f8:	cmp	r1, r9, lsr #22
   144fc:	orr	r3, r3, r8, lsr #22
   14500:	mvnne	r0, #0
   14504:	movwne	r2, #1
   14508:	cmp	r1, r9, lsr #22
   1450c:	b	14590 <__assert_fail@plt+0x3450>
   14510:	ldr	r0, [sp, #12]
   14514:	orr	r6, r6, #2
   14518:	b	14984 <__assert_fail@plt+0x3844>
   1451c:	cmp	r7, #115	; 0x73
   14520:	bgt	14640 <__assert_fail@plt+0x3500>
   14524:	sub	r0, r7, #98	; 0x62
   14528:	cmp	r0, #11
   1452c:	bhi	14800 <__assert_fail@plt+0x36c0>
   14530:	add	r1, pc, #4
   14534:	mov	r2, #0
   14538:	ldr	pc, [r1, r0, lsl #2]
   1453c:	andeq	r4, r1, ip, ror #10
   14540:	andeq	r4, r1, ip, asr r9
   14544:	andeq	r4, r1, r4, ror r8
   14548:	andeq	r4, r1, r4, ror r8
   1454c:	andeq	r4, r1, r4, ror r8
   14550:	andeq	r4, r1, r8, ror r6
   14554:	andeq	r4, r1, r4, ror r8
   14558:	andeq	r4, r1, r4, ror r8
   1455c:	andeq	r4, r1, r4, ror r8
   14560:	andeq	r4, r1, r4, ror #13
   14564:	andeq	r4, r1, r4, ror r8
   14568:	andeq	r4, r1, r8, lsr #14
   1456c:	mov	r1, #0
   14570:	lsl	r3, r9, #9
   14574:	lsl	r0, r8, #9
   14578:	lsr	r2, r9, #23
   1457c:	cmp	r1, r9, lsr #23
   14580:	orr	r3, r3, r8, lsr #23
   14584:	mvnne	r0, #0
   14588:	movwne	r2, #1
   1458c:	cmp	r1, r9, lsr #23
   14590:	mvnne	r3, #0
   14594:	mov	r8, r0
   14598:	mov	r9, r3
   1459c:	b	1495c <__assert_fail@plt+0x381c>
   145a0:	cmp	r0, #105	; 0x69
   145a4:	mov	r3, #0
   145a8:	bne	1448c <__assert_fail@plt+0x334c>
   145ac:	ldrb	r0, [r5, #2]
   145b0:	mov	r1, #1
   145b4:	cmp	r0, #66	; 0x42
   145b8:	movweq	r1, #3
   145bc:	str	r1, [sp, #8]
   145c0:	b	1448c <__assert_fail@plt+0x334c>
   145c4:	cmp	r7, #84	; 0x54
   145c8:	beq	14794 <__assert_fail@plt+0x3654>
   145cc:	cmp	r7, #89	; 0x59
   145d0:	bne	14874 <__assert_fail@plt+0x3734>
   145d4:	mvn	r0, #0
   145d8:	mvn	r1, #0
   145dc:	mov	r2, r4
   145e0:	mov	r5, r3
   145e4:	bl	15100 <__assert_fail@plt+0x3fc0>
   145e8:	mov	ip, r5
   145ec:	mvn	lr, #0
   145f0:	mov	r2, #0
   145f4:	mvn	r3, #7
   145f8:	mov	r5, r8
   145fc:	mov	r7, r9
   14600:	umull	r8, r6, r5, r4
   14604:	mvn	r9, #0
   14608:	mla	r6, r5, ip, r6
   1460c:	subs	r5, r0, r5
   14610:	sbcs	r5, r1, r7
   14614:	mov	r5, #0
   14618:	movwcc	r5, #1
   1461c:	cmp	r5, #0
   14620:	mlaeq	r9, r7, r4, r6
   14624:	movne	r8, lr
   14628:	orrne	r2, r2, #1
   1462c:	adds	r3, r3, #1
   14630:	mov	r5, r8
   14634:	mov	r7, r9
   14638:	bcc	14600 <__assert_fail@plt+0x34c0>
   1463c:	b	1495c <__assert_fail@plt+0x381c>
   14640:	cmp	r7, #116	; 0x74
   14644:	beq	14794 <__assert_fail@plt+0x3654>
   14648:	cmp	r7, #119	; 0x77
   1464c:	bne	14874 <__assert_fail@plt+0x3734>
   14650:	lsl	r1, r9, #1
   14654:	cmp	r9, #0
   14658:	lsl	r0, r8, #1
   1465c:	lsr	r2, r9, #31
   14660:	orr	r1, r1, r8, lsr #31
   14664:	mvnmi	r0, #0
   14668:	mvnmi	r1, #0
   1466c:	mov	r8, r0
   14670:	mov	r9, r1
   14674:	b	1495c <__assert_fail@plt+0x381c>
   14678:	mvn	r0, #0
   1467c:	mvn	r1, #0
   14680:	mov	r2, r4
   14684:	mov	r5, r3
   14688:	bl	15100 <__assert_fail@plt+0x3fc0>
   1468c:	mov	ip, r5
   14690:	mvn	lr, #0
   14694:	mov	r2, #0
   14698:	mvn	r3, #2
   1469c:	mov	r6, r8
   146a0:	mov	r5, r9
   146a4:	umull	r8, r7, r6, r4
   146a8:	mvn	r9, #0
   146ac:	mla	r7, r6, ip, r7
   146b0:	subs	r6, r0, r6
   146b4:	sbcs	r6, r1, r5
   146b8:	mov	r6, #0
   146bc:	movwcc	r6, #1
   146c0:	cmp	r6, #0
   146c4:	mlaeq	r9, r5, r4, r7
   146c8:	movne	r8, lr
   146cc:	orrne	r2, r2, #1
   146d0:	adds	r3, r3, #1
   146d4:	mov	r6, r8
   146d8:	mov	r5, r9
   146dc:	bcc	146a4 <__assert_fail@plt+0x3564>
   146e0:	b	1495c <__assert_fail@plt+0x381c>
   146e4:	mvn	r0, #0
   146e8:	mvn	r1, #0
   146ec:	mov	r2, r4
   146f0:	mov	r5, r3
   146f4:	bl	15100 <__assert_fail@plt+0x3fc0>
   146f8:	subs	r0, r0, r8
   146fc:	mov	r2, #0
   14700:	sbcs	r0, r1, r9
   14704:	umull	r0, r1, r8, r4
   14708:	movwcc	r2, #1
   1470c:	cmp	r2, #0
   14710:	mla	r1, r8, r5, r1
   14714:	mvnne	r0, #0
   14718:	mla	r9, r9, r4, r1
   1471c:	mvnne	r9, #0
   14720:	mov	r8, r0
   14724:	b	1495c <__assert_fail@plt+0x381c>
   14728:	mvn	r0, #0
   1472c:	mvn	r1, #0
   14730:	mov	r2, r4
   14734:	mov	r5, r3
   14738:	bl	15100 <__assert_fail@plt+0x3fc0>
   1473c:	mov	ip, r5
   14740:	mvn	lr, #0
   14744:	mov	r2, #0
   14748:	mvn	r3, #1
   1474c:	mov	r6, r8
   14750:	mov	r5, r9
   14754:	umull	r8, r7, r6, r4
   14758:	mvn	r9, #0
   1475c:	mla	r7, r6, ip, r7
   14760:	subs	r6, r0, r6
   14764:	sbcs	r6, r1, r5
   14768:	mov	r6, #0
   1476c:	movwcc	r6, #1
   14770:	cmp	r6, #0
   14774:	mlaeq	r9, r5, r4, r7
   14778:	movne	r8, lr
   1477c:	orrne	r2, r2, #1
   14780:	adds	r3, r3, #1
   14784:	mov	r6, r8
   14788:	mov	r5, r9
   1478c:	bcc	14754 <__assert_fail@plt+0x3614>
   14790:	b	1495c <__assert_fail@plt+0x381c>
   14794:	mvn	r0, #0
   14798:	mvn	r1, #0
   1479c:	mov	r2, r4
   147a0:	mov	r5, r3
   147a4:	bl	15100 <__assert_fail@plt+0x3fc0>
   147a8:	mov	ip, r5
   147ac:	mvn	lr, #0
   147b0:	mov	r2, #0
   147b4:	mvn	r3, #3
   147b8:	mov	r6, r8
   147bc:	mov	r5, r9
   147c0:	umull	r8, r7, r6, r4
   147c4:	mvn	r9, #0
   147c8:	mla	r7, r6, ip, r7
   147cc:	subs	r6, r0, r6
   147d0:	sbcs	r6, r1, r5
   147d4:	mov	r6, #0
   147d8:	movwcc	r6, #1
   147dc:	cmp	r6, #0
   147e0:	mlaeq	r9, r5, r4, r7
   147e4:	movne	r8, lr
   147e8:	orrne	r2, r2, #1
   147ec:	adds	r3, r3, #1
   147f0:	mov	r6, r8
   147f4:	mov	r5, r9
   147f8:	bcc	147c0 <__assert_fail@plt+0x3680>
   147fc:	b	1495c <__assert_fail@plt+0x381c>
   14800:	cmp	r7, #90	; 0x5a
   14804:	bne	14874 <__assert_fail@plt+0x3734>
   14808:	mvn	r0, #0
   1480c:	mvn	r1, #0
   14810:	mov	r2, r4
   14814:	mov	r5, r3
   14818:	bl	15100 <__assert_fail@plt+0x3fc0>
   1481c:	mov	ip, r5
   14820:	mvn	lr, #0
   14824:	mov	r2, #0
   14828:	mvn	r3, #6
   1482c:	mov	r5, r8
   14830:	mov	r7, r9
   14834:	umull	r8, r6, r5, r4
   14838:	mvn	r9, #0
   1483c:	mla	r6, r5, ip, r6
   14840:	subs	r5, r0, r5
   14844:	sbcs	r5, r1, r7
   14848:	mov	r5, #0
   1484c:	movwcc	r5, #1
   14850:	cmp	r5, #0
   14854:	mlaeq	r9, r7, r4, r6
   14858:	movne	r8, lr
   1485c:	orrne	r2, r2, #1
   14860:	adds	r3, r3, #1
   14864:	mov	r5, r8
   14868:	mov	r7, r9
   1486c:	bcc	14834 <__assert_fail@plt+0x36f4>
   14870:	b	1495c <__assert_fail@plt+0x381c>
   14874:	ldr	r0, [sp, #12]
   14878:	strd	r8, [r0]
   1487c:	ldr	r6, [sp, #4]
   14880:	orr	r6, r6, #2
   14884:	b	14988 <__assert_fail@plt+0x3848>
   14888:	mvn	r0, #0
   1488c:	mvn	r1, #0
   14890:	mov	r2, r4
   14894:	mov	r5, r3
   14898:	bl	15100 <__assert_fail@plt+0x3fc0>
   1489c:	mov	ip, r5
   148a0:	mvn	lr, #0
   148a4:	mov	r2, #0
   148a8:	mvn	r3, #5
   148ac:	mov	r5, r8
   148b0:	mov	r7, r9
   148b4:	umull	r8, r6, r5, r4
   148b8:	mvn	r9, #0
   148bc:	mla	r6, r5, ip, r6
   148c0:	subs	r5, r0, r5
   148c4:	sbcs	r5, r1, r7
   148c8:	mov	r5, #0
   148cc:	movwcc	r5, #1
   148d0:	cmp	r5, #0
   148d4:	mlaeq	r9, r7, r4, r6
   148d8:	movne	r8, lr
   148dc:	orrne	r2, r2, #1
   148e0:	adds	r3, r3, #1
   148e4:	mov	r5, r8
   148e8:	mov	r7, r9
   148ec:	bcc	148b4 <__assert_fail@plt+0x3774>
   148f0:	b	1495c <__assert_fail@plt+0x381c>
   148f4:	mvn	r0, #0
   148f8:	mvn	r1, #0
   148fc:	mov	r2, r4
   14900:	mov	r5, r3
   14904:	bl	15100 <__assert_fail@plt+0x3fc0>
   14908:	mov	ip, r5
   1490c:	mvn	lr, #0
   14910:	mov	r2, #0
   14914:	mvn	r3, #4
   14918:	mov	r5, r8
   1491c:	mov	r7, r9
   14920:	umull	r8, r6, r5, r4
   14924:	mvn	r9, #0
   14928:	mla	r6, r5, ip, r6
   1492c:	subs	r5, r0, r5
   14930:	sbcs	r5, r1, r7
   14934:	mov	r5, #0
   14938:	movwcc	r5, #1
   1493c:	cmp	r5, #0
   14940:	mlaeq	r9, r7, r4, r6
   14944:	movne	r8, lr
   14948:	orrne	r2, r2, #1
   1494c:	adds	r3, r3, #1
   14950:	mov	r5, r8
   14954:	mov	r7, r9
   14958:	bcc	14920 <__assert_fail@plt+0x37e0>
   1495c:	ldr	r1, [sp]
   14960:	ldr	r3, [sp, #8]
   14964:	ldr	r6, [sp, #4]
   14968:	add	r0, r1, r3
   1496c:	orr	r6, r2, r6
   14970:	str	r0, [sl]
   14974:	ldrb	r0, [r1, r3]
   14978:	cmp	r0, #0
   1497c:	orrne	r6, r6, #2
   14980:	ldr	r0, [sp, #12]
   14984:	strd	r8, [r0]
   14988:	mov	r0, r6
   1498c:	sub	sp, fp, #28
   14990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14994:	movw	r0, #24501	; 0x5fb5
   14998:	movw	r1, #24539	; 0x5fdb
   1499c:	movw	r3, #24555	; 0x5feb
   149a0:	mov	r2, #85	; 0x55
   149a4:	movt	r0, #1
   149a8:	movt	r1, #1
   149ac:	movt	r3, #1
   149b0:	bl	11140 <__assert_fail@plt>
   149b4:	clz	r2, r1
   149b8:	clz	r3, r0
   149bc:	lsr	r2, r2, #5
   149c0:	lsr	r3, r3, #5
   149c4:	orrs	r2, r3, r2
   149c8:	movwne	r1, #1
   149cc:	movwne	r0, #1
   149d0:	cmp	r1, #0
   149d4:	beq	14a04 <__assert_fail@plt+0x38c4>
   149d8:	mvn	r2, #-2147483648	; 0x80000000
   149dc:	udiv	r2, r2, r1
   149e0:	cmp	r2, r0
   149e4:	bcs	14a04 <__assert_fail@plt+0x38c4>
   149e8:	push	{fp, lr}
   149ec:	mov	fp, sp
   149f0:	bl	11038 <__errno_location@plt>
   149f4:	mov	r1, #12
   149f8:	str	r1, [r0]
   149fc:	mov	r0, #0
   14a00:	pop	{fp, pc}
   14a04:	b	10eac <calloc@plt>
   14a08:	cmp	r0, #0
   14a0c:	movweq	r0, #1
   14a10:	cmn	r0, #1
   14a14:	ble	14a1c <__assert_fail@plt+0x38dc>
   14a18:	b	10fc0 <malloc@plt>
   14a1c:	push	{fp, lr}
   14a20:	mov	fp, sp
   14a24:	bl	11038 <__errno_location@plt>
   14a28:	mov	r1, #12
   14a2c:	str	r1, [r0]
   14a30:	mov	r0, #0
   14a34:	pop	{fp, pc}
   14a38:	push	{fp, lr}
   14a3c:	mov	fp, sp
   14a40:	cmp	r0, #0
   14a44:	beq	14a60 <__assert_fail@plt+0x3920>
   14a48:	cmp	r1, #0
   14a4c:	beq	14a6c <__assert_fail@plt+0x392c>
   14a50:	cmn	r1, #1
   14a54:	ble	14a74 <__assert_fail@plt+0x3934>
   14a58:	pop	{fp, lr}
   14a5c:	b	10f30 <realloc@plt>
   14a60:	mov	r0, r1
   14a64:	pop	{fp, lr}
   14a68:	b	14a08 <__assert_fail@plt+0x38c8>
   14a6c:	bl	11e34 <__assert_fail@plt+0xcf4>
   14a70:	b	14a80 <__assert_fail@plt+0x3940>
   14a74:	bl	11038 <__errno_location@plt>
   14a78:	mov	r1, #12
   14a7c:	str	r1, [r0]
   14a80:	mov	r0, #0
   14a84:	pop	{fp, pc}
   14a88:	push	{fp, lr}
   14a8c:	mov	fp, sp
   14a90:	sub	sp, sp, #8
   14a94:	mov	r1, r0
   14a98:	movw	r0, #19140	; 0x4ac4
   14a9c:	mov	r2, #0
   14aa0:	mov	r3, #0
   14aa4:	movt	r0, #1
   14aa8:	str	r2, [sp]
   14aac:	mov	r2, #0
   14ab0:	str	r0, [sp, #4]
   14ab4:	mvn	r0, #99	; 0x63
   14ab8:	bl	14b68 <__assert_fail@plt+0x3a28>
   14abc:	mov	sp, fp
   14ac0:	pop	{fp, pc}
   14ac4:	cmn	r0, #100	; 0x64
   14ac8:	bne	14adc <__assert_fail@plt+0x399c>
   14acc:	mov	r0, r1
   14ad0:	mov	r1, r2
   14ad4:	mov	r2, r3
   14ad8:	b	10f54 <readlink@plt>
   14adc:	push	{fp, lr}
   14ae0:	mov	fp, sp
   14ae4:	bl	11128 <abort@plt>
   14ae8:	sub	r0, r0, #1
   14aec:	ldrb	r3, [r0, #1]!
   14af0:	cmp	r3, #47	; 0x2f
   14af4:	beq	14aec <__assert_fail@plt+0x39ac>
   14af8:	mov	r2, #0
   14afc:	mov	r1, r0
   14b00:	uxtb	r3, r3
   14b04:	cmp	r3, #47	; 0x2f
   14b08:	beq	14b24 <__assert_fail@plt+0x39e4>
   14b0c:	cmp	r3, #0
   14b10:	bxeq	lr
   14b14:	tst	r2, #1
   14b18:	mov	r2, #0
   14b1c:	movne	r0, r1
   14b20:	b	14b28 <__assert_fail@plt+0x39e8>
   14b24:	mov	r2, #1
   14b28:	ldrb	r3, [r1, #1]!
   14b2c:	b	14b00 <__assert_fail@plt+0x39c0>
   14b30:	push	{r4, sl, fp, lr}
   14b34:	add	fp, sp, #8
   14b38:	mov	r4, r0
   14b3c:	bl	11020 <strlen@plt>
   14b40:	mov	r1, r0
   14b44:	sub	r2, r4, #1
   14b48:	mov	r0, r1
   14b4c:	cmp	r1, #2
   14b50:	bcc	14b64 <__assert_fail@plt+0x3a24>
   14b54:	ldrb	r3, [r2, r0]
   14b58:	sub	r1, r0, #1
   14b5c:	cmp	r3, #47	; 0x2f
   14b60:	beq	14b48 <__assert_fail@plt+0x3a08>
   14b64:	pop	{r4, sl, fp, pc}
   14b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b6c:	add	fp, sp, #28
   14b70:	sub	sp, sp, #4
   14b74:	sub	sp, sp, #1024	; 0x400
   14b78:	mov	r9, r0
   14b7c:	mov	r0, sp
   14b80:	cmp	r2, #0
   14b84:	mov	r5, r2
   14b88:	mov	r4, r3
   14b8c:	ldr	sl, [fp, #12]
   14b90:	movw	r7, #24640	; 0x6040
   14b94:	mov	r8, r1
   14b98:	moveq	r5, r0
   14b9c:	ldr	r0, [fp, #8]
   14ba0:	movweq	r4, #1024	; 0x400
   14ba4:	movt	r7, #1
   14ba8:	cmn	r4, #-2147483647	; 0x80000001
   14bac:	mov	r6, r5
   14bb0:	mvncs	r4, #-2147483648	; 0x80000000
   14bb4:	cmp	r0, #0
   14bb8:	movne	r7, r0
   14bbc:	mov	r0, r9
   14bc0:	mov	r1, r8
   14bc4:	mov	r2, r6
   14bc8:	mov	r3, r4
   14bcc:	blx	sl
   14bd0:	cmn	r0, #1
   14bd4:	ble	14c3c <__assert_fail@plt+0x3afc>
   14bd8:	cmp	r0, r4
   14bdc:	blt	14c68 <__assert_fail@plt+0x3b28>
   14be0:	cmp	r6, r5
   14be4:	beq	14bf4 <__assert_fail@plt+0x3ab4>
   14be8:	ldr	r1, [r7, #8]
   14bec:	mov	r0, r6
   14bf0:	blx	r1
   14bf4:	cmn	r4, #-1073741823	; 0xc0000001
   14bf8:	bge	14cb8 <__assert_fail@plt+0x3b78>
   14bfc:	mov	r0, #1
   14c00:	ldr	r1, [r7]
   14c04:	orr	r4, r0, r4, lsl #1
   14c08:	mov	r0, r4
   14c0c:	blx	r1
   14c10:	mov	r6, r0
   14c14:	cmp	r0, #0
   14c18:	bne	14bbc <__assert_fail@plt+0x3a7c>
   14c1c:	ldr	r1, [r7, #12]
   14c20:	cmp	r1, #0
   14c24:	beq	14c30 <__assert_fail@plt+0x3af0>
   14c28:	mov	r0, r4
   14c2c:	blx	r1
   14c30:	bl	11038 <__errno_location@plt>
   14c34:	mov	r1, #12
   14c38:	b	14cc0 <__assert_fail@plt+0x3b80>
   14c3c:	mov	r4, #0
   14c40:	cmp	r6, r5
   14c44:	beq	14cc8 <__assert_fail@plt+0x3b88>
   14c48:	bl	11038 <__errno_location@plt>
   14c4c:	ldr	r1, [r7, #8]
   14c50:	ldr	r8, [r0]
   14c54:	mov	r5, r0
   14c58:	mov	r0, r6
   14c5c:	blx	r1
   14c60:	str	r8, [r5]
   14c64:	b	14cc8 <__assert_fail@plt+0x3b88>
   14c68:	mov	r1, #0
   14c6c:	add	r8, r0, #1
   14c70:	strb	r1, [r6, r0]
   14c74:	mov	r0, sp
   14c78:	cmp	r6, r0
   14c7c:	beq	14cdc <__assert_fail@plt+0x3b9c>
   14c80:	cmp	r6, r5
   14c84:	beq	14cd4 <__assert_fail@plt+0x3b94>
   14c88:	cmp	r8, r4
   14c8c:	bge	14cd4 <__assert_fail@plt+0x3b94>
   14c90:	ldr	r2, [r7, #4]
   14c94:	cmp	r2, #0
   14c98:	beq	14cd4 <__assert_fail@plt+0x3b94>
   14c9c:	mov	r0, r6
   14ca0:	mov	r1, r8
   14ca4:	blx	r2
   14ca8:	cmp	r0, #0
   14cac:	mov	r4, r0
   14cb0:	moveq	r4, r6
   14cb4:	b	14cc8 <__assert_fail@plt+0x3b88>
   14cb8:	bl	11038 <__errno_location@plt>
   14cbc:	mov	r1, #36	; 0x24
   14cc0:	mov	r4, #0
   14cc4:	str	r1, [r0]
   14cc8:	mov	r0, r4
   14ccc:	sub	sp, fp, #28
   14cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd4:	mov	r4, r6
   14cd8:	b	14cc8 <__assert_fail@plt+0x3b88>
   14cdc:	ldr	r1, [r7]
   14ce0:	mov	r0, r8
   14ce4:	blx	r1
   14ce8:	cmp	r0, #0
   14cec:	beq	14d04 <__assert_fail@plt+0x3bc4>
   14cf0:	mov	r1, sp
   14cf4:	mov	r2, r8
   14cf8:	mov	r4, r0
   14cfc:	bl	10f00 <memcpy@plt>
   14d00:	b	14cc8 <__assert_fail@plt+0x3b88>
   14d04:	mov	r4, r8
   14d08:	b	14c1c <__assert_fail@plt+0x3adc>
   14d0c:	push	{r4, r5, r6, sl, fp, lr}
   14d10:	add	fp, sp, #16
   14d14:	mov	r4, r0
   14d18:	bl	10f78 <__fpending@plt>
   14d1c:	mov	r5, r0
   14d20:	mov	r0, r4
   14d24:	bl	10f84 <ferror_unlocked@plt>
   14d28:	mov	r6, r0
   14d2c:	mov	r0, r4
   14d30:	bl	14d8c <__assert_fail@plt+0x3c4c>
   14d34:	cmp	r6, #0
   14d38:	beq	14d58 <__assert_fail@plt+0x3c18>
   14d3c:	mvn	r4, #0
   14d40:	cmp	r0, #0
   14d44:	bne	14d84 <__assert_fail@plt+0x3c44>
   14d48:	bl	11038 <__errno_location@plt>
   14d4c:	mov	r1, #0
   14d50:	str	r1, [r0]
   14d54:	b	14d84 <__assert_fail@plt+0x3c44>
   14d58:	cmp	r0, #0
   14d5c:	mov	r4, r0
   14d60:	mvnne	r4, #0
   14d64:	cmp	r5, #0
   14d68:	bne	14d84 <__assert_fail@plt+0x3c44>
   14d6c:	cmp	r0, #0
   14d70:	beq	14d84 <__assert_fail@plt+0x3c44>
   14d74:	bl	11038 <__errno_location@plt>
   14d78:	ldr	r0, [r0]
   14d7c:	subs	r4, r0, #9
   14d80:	mvnne	r4, #0
   14d84:	mov	r0, r4
   14d88:	pop	{r4, r5, r6, sl, fp, pc}
   14d8c:	push	{r4, r5, r6, sl, fp, lr}
   14d90:	add	fp, sp, #16
   14d94:	sub	sp, sp, #8
   14d98:	mov	r4, r0
   14d9c:	bl	11068 <fileno@plt>
   14da0:	cmn	r0, #1
   14da4:	ble	14e18 <__assert_fail@plt+0x3cd8>
   14da8:	mov	r0, r4
   14dac:	bl	10fd8 <__freading@plt>
   14db0:	cmp	r0, #0
   14db4:	beq	14de0 <__assert_fail@plt+0x3ca0>
   14db8:	mov	r0, r4
   14dbc:	bl	11068 <fileno@plt>
   14dc0:	mov	r1, #1
   14dc4:	mov	r2, #0
   14dc8:	mov	r3, #0
   14dcc:	str	r1, [sp]
   14dd0:	bl	10f60 <lseek64@plt>
   14dd4:	and	r0, r0, r1
   14dd8:	cmn	r0, #1
   14ddc:	beq	14e18 <__assert_fail@plt+0x3cd8>
   14de0:	mov	r0, r4
   14de4:	bl	14e28 <__assert_fail@plt+0x3ce8>
   14de8:	cmp	r0, #0
   14dec:	beq	14e18 <__assert_fail@plt+0x3cd8>
   14df0:	bl	11038 <__errno_location@plt>
   14df4:	ldr	r6, [r0]
   14df8:	mov	r5, r0
   14dfc:	mov	r0, r4
   14e00:	bl	11098 <fclose@plt>
   14e04:	cmp	r6, #0
   14e08:	strne	r6, [r5]
   14e0c:	mvnne	r0, #0
   14e10:	sub	sp, fp, #16
   14e14:	pop	{r4, r5, r6, sl, fp, pc}
   14e18:	mov	r0, r4
   14e1c:	sub	sp, fp, #16
   14e20:	pop	{r4, r5, r6, sl, fp, lr}
   14e24:	b	11098 <fclose@plt>
   14e28:	push	{r4, sl, fp, lr}
   14e2c:	add	fp, sp, #8
   14e30:	sub	sp, sp, #8
   14e34:	mov	r4, r0
   14e38:	cmp	r0, #0
   14e3c:	beq	14e74 <__assert_fail@plt+0x3d34>
   14e40:	mov	r0, r4
   14e44:	bl	10fd8 <__freading@plt>
   14e48:	cmp	r0, #0
   14e4c:	beq	14e74 <__assert_fail@plt+0x3d34>
   14e50:	ldrb	r0, [r4, #1]
   14e54:	tst	r0, #1
   14e58:	beq	14e74 <__assert_fail@plt+0x3d34>
   14e5c:	mov	r0, #1
   14e60:	mov	r2, #0
   14e64:	mov	r3, #0
   14e68:	str	r0, [sp]
   14e6c:	mov	r0, r4
   14e70:	bl	14e84 <__assert_fail@plt+0x3d44>
   14e74:	mov	r0, r4
   14e78:	sub	sp, fp, #8
   14e7c:	pop	{r4, sl, fp, lr}
   14e80:	b	10edc <fflush@plt>
   14e84:	push	{r4, r5, r6, r7, fp, lr}
   14e88:	add	fp, sp, #16
   14e8c:	sub	sp, sp, #8
   14e90:	mov	r4, r0
   14e94:	ldr	r0, [r0, #4]
   14e98:	mov	r5, r3
   14e9c:	mov	r6, r2
   14ea0:	ldr	r1, [r4, #8]
   14ea4:	cmp	r1, r0
   14ea8:	bne	14ec4 <__assert_fail@plt+0x3d84>
   14eac:	ldrd	r0, [r4, #16]
   14eb0:	cmp	r1, r0
   14eb4:	bne	14ec4 <__assert_fail@plt+0x3d84>
   14eb8:	ldr	r0, [r4, #36]	; 0x24
   14ebc:	cmp	r0, #0
   14ec0:	beq	14edc <__assert_fail@plt+0x3d9c>
   14ec4:	mov	r0, r4
   14ec8:	mov	r2, r6
   14ecc:	mov	r3, r5
   14ed0:	sub	sp, fp, #16
   14ed4:	pop	{r4, r5, r6, r7, fp, lr}
   14ed8:	b	110a4 <fseeko64@plt>
   14edc:	ldr	r7, [fp, #8]
   14ee0:	mov	r0, r4
   14ee4:	bl	11068 <fileno@plt>
   14ee8:	mov	r2, r6
   14eec:	mov	r3, r5
   14ef0:	str	r7, [sp]
   14ef4:	bl	10f60 <lseek64@plt>
   14ef8:	and	r2, r0, r1
   14efc:	cmn	r2, #1
   14f00:	beq	14f1c <__assert_fail@plt+0x3ddc>
   14f04:	strd	r0, [r4, #80]	; 0x50
   14f08:	ldr	r0, [r4]
   14f0c:	bic	r0, r0, #16
   14f10:	str	r0, [r4]
   14f14:	mov	r0, #0
   14f18:	b	14f20 <__assert_fail@plt+0x3de0>
   14f1c:	mvn	r0, #0
   14f20:	sub	sp, fp, #16
   14f24:	pop	{r4, r5, r6, r7, fp, pc}
   14f28:	push	{fp, lr}
   14f2c:	mov	fp, sp
   14f30:	mov	r0, #14
   14f34:	bl	110ec <nl_langinfo@plt>
   14f38:	movw	r1, #23045	; 0x5a05
   14f3c:	cmp	r0, #0
   14f40:	movt	r1, #1
   14f44:	movne	r1, r0
   14f48:	movw	r0, #24634	; 0x603a
   14f4c:	ldrb	r2, [r1]
   14f50:	movt	r0, #1
   14f54:	cmp	r2, #0
   14f58:	movne	r0, r1
   14f5c:	pop	{fp, pc}
   14f60:	push	{r4, r5, r6, r7, fp, lr}
   14f64:	add	fp, sp, #16
   14f68:	sub	sp, sp, #8
   14f6c:	cmp	r0, #0
   14f70:	add	r5, sp, #4
   14f74:	mov	r7, r2
   14f78:	mov	r4, r1
   14f7c:	movne	r5, r0
   14f80:	mov	r0, r5
   14f84:	bl	10f90 <mbrtowc@plt>
   14f88:	mov	r6, r0
   14f8c:	cmp	r7, #0
   14f90:	beq	14fb8 <__assert_fail@plt+0x3e78>
   14f94:	cmn	r6, #2
   14f98:	bcc	14fb8 <__assert_fail@plt+0x3e78>
   14f9c:	mov	r0, #0
   14fa0:	bl	15000 <__assert_fail@plt+0x3ec0>
   14fa4:	cmp	r0, #0
   14fa8:	bne	14fb8 <__assert_fail@plt+0x3e78>
   14fac:	ldrb	r0, [r4]
   14fb0:	mov	r6, #1
   14fb4:	str	r0, [r5]
   14fb8:	mov	r0, r6
   14fbc:	sub	sp, fp, #16
   14fc0:	pop	{r4, r5, r6, r7, fp, pc}
   14fc4:	cmp	r2, #0
   14fc8:	beq	14ff8 <__assert_fail@plt+0x3eb8>
   14fcc:	mvn	r3, #0
   14fd0:	udiv	r3, r3, r2
   14fd4:	cmp	r3, r1
   14fd8:	bcs	14ff8 <__assert_fail@plt+0x3eb8>
   14fdc:	push	{fp, lr}
   14fe0:	mov	fp, sp
   14fe4:	bl	11038 <__errno_location@plt>
   14fe8:	mov	r1, #12
   14fec:	str	r1, [r0]
   14ff0:	mov	r0, #0
   14ff4:	pop	{fp, pc}
   14ff8:	mul	r1, r2, r1
   14ffc:	b	14a38 <__assert_fail@plt+0x38f8>
   15000:	push	{r4, sl, fp, lr}
   15004:	add	fp, sp, #8
   15008:	sub	sp, sp, #264	; 0x108
   1500c:	add	r1, sp, #7
   15010:	movw	r2, #257	; 0x101
   15014:	bl	1506c <__assert_fail@plt+0x3f2c>
   15018:	mov	r4, #0
   1501c:	cmp	r0, #0
   15020:	bne	15060 <__assert_fail@plt+0x3f20>
   15024:	movw	r1, #24656	; 0x6050
   15028:	add	r0, sp, #7
   1502c:	mov	r2, #2
   15030:	movt	r1, #1
   15034:	bl	11014 <bcmp@plt>
   15038:	cmp	r0, #0
   1503c:	beq	15060 <__assert_fail@plt+0x3f20>
   15040:	movw	r1, #24658	; 0x6052
   15044:	add	r0, sp, #7
   15048:	mov	r2, #6
   1504c:	movt	r1, #1
   15050:	bl	11014 <bcmp@plt>
   15054:	cmp	r0, #0
   15058:	mov	r4, r0
   1505c:	movwne	r4, #1
   15060:	mov	r0, r4
   15064:	sub	sp, fp, #8
   15068:	pop	{r4, sl, fp, pc}
   1506c:	push	{r4, r5, r6, r7, fp, lr}
   15070:	add	fp, sp, #16
   15074:	mov	r4, r1
   15078:	mov	r1, #0
   1507c:	mov	r6, r2
   15080:	bl	110bc <setlocale@plt>
   15084:	cmp	r0, #0
   15088:	beq	150b4 <__assert_fail@plt+0x3f74>
   1508c:	mov	r7, r0
   15090:	bl	11020 <strlen@plt>
   15094:	cmp	r0, r6
   15098:	bcs	150c8 <__assert_fail@plt+0x3f88>
   1509c:	add	r2, r0, #1
   150a0:	mov	r0, r4
   150a4:	mov	r1, r7
   150a8:	bl	10f00 <memcpy@plt>
   150ac:	mov	r5, #0
   150b0:	b	150f0 <__assert_fail@plt+0x3fb0>
   150b4:	cmp	r6, #0
   150b8:	mov	r5, #22
   150bc:	movne	r0, #0
   150c0:	strbne	r0, [r4]
   150c4:	b	150f0 <__assert_fail@plt+0x3fb0>
   150c8:	mov	r5, #34	; 0x22
   150cc:	cmp	r6, #0
   150d0:	beq	150f0 <__assert_fail@plt+0x3fb0>
   150d4:	sub	r6, r6, #1
   150d8:	mov	r0, r4
   150dc:	mov	r1, r7
   150e0:	mov	r2, r6
   150e4:	bl	10f00 <memcpy@plt>
   150e8:	mov	r0, #0
   150ec:	strb	r0, [r4, r6]
   150f0:	mov	r0, r5
   150f4:	pop	{r4, r5, r6, r7, fp, pc}
   150f8:	mov	r1, #0
   150fc:	b	110bc <setlocale@plt>
   15100:	cmp	r3, #0
   15104:	cmpeq	r2, #0
   15108:	bne	15120 <__assert_fail@plt+0x3fe0>
   1510c:	cmp	r1, #0
   15110:	cmpeq	r0, #0
   15114:	mvnne	r1, #0
   15118:	mvnne	r0, #0
   1511c:	b	1513c <__assert_fail@plt+0x3ffc>
   15120:	sub	sp, sp, #8
   15124:	push	{sp, lr}
   15128:	bl	1514c <__assert_fail@plt+0x400c>
   1512c:	ldr	lr, [sp, #4]
   15130:	add	sp, sp, #8
   15134:	pop	{r2, r3}
   15138:	bx	lr
   1513c:	push	{r1, lr}
   15140:	mov	r0, #8
   15144:	bl	10ec4 <raise@plt>
   15148:	pop	{r1, pc}
   1514c:	cmp	r1, r3
   15150:	cmpeq	r0, r2
   15154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15158:	mov	r4, r0
   1515c:	movcc	r0, #0
   15160:	mov	r5, r1
   15164:	ldr	lr, [sp, #36]	; 0x24
   15168:	movcc	r1, r0
   1516c:	bcc	15268 <__assert_fail@plt+0x4128>
   15170:	cmp	r3, #0
   15174:	clzeq	ip, r2
   15178:	clzne	ip, r3
   1517c:	addeq	ip, ip, #32
   15180:	cmp	r5, #0
   15184:	clzeq	r1, r4
   15188:	addeq	r1, r1, #32
   1518c:	clzne	r1, r5
   15190:	sub	ip, ip, r1
   15194:	sub	sl, ip, #32
   15198:	lsl	r9, r3, ip
   1519c:	rsb	fp, ip, #32
   151a0:	orr	r9, r9, r2, lsl sl
   151a4:	orr	r9, r9, r2, lsr fp
   151a8:	lsl	r8, r2, ip
   151ac:	cmp	r5, r9
   151b0:	cmpeq	r4, r8
   151b4:	movcc	r0, #0
   151b8:	movcc	r1, r0
   151bc:	bcc	151d8 <__assert_fail@plt+0x4098>
   151c0:	mov	r0, #1
   151c4:	subs	r4, r4, r8
   151c8:	lsl	r1, r0, sl
   151cc:	orr	r1, r1, r0, lsr fp
   151d0:	lsl	r0, r0, ip
   151d4:	sbc	r5, r5, r9
   151d8:	cmp	ip, #0
   151dc:	beq	15268 <__assert_fail@plt+0x4128>
   151e0:	lsr	r6, r8, #1
   151e4:	orr	r6, r6, r9, lsl #31
   151e8:	lsr	r7, r9, #1
   151ec:	mov	r2, ip
   151f0:	b	15214 <__assert_fail@plt+0x40d4>
   151f4:	subs	r3, r4, r6
   151f8:	sbc	r8, r5, r7
   151fc:	adds	r3, r3, r3
   15200:	adc	r8, r8, r8
   15204:	adds	r4, r3, #1
   15208:	adc	r5, r8, #0
   1520c:	subs	r2, r2, #1
   15210:	beq	15230 <__assert_fail@plt+0x40f0>
   15214:	cmp	r5, r7
   15218:	cmpeq	r4, r6
   1521c:	bcs	151f4 <__assert_fail@plt+0x40b4>
   15220:	adds	r4, r4, r4
   15224:	adc	r5, r5, r5
   15228:	subs	r2, r2, #1
   1522c:	bne	15214 <__assert_fail@plt+0x40d4>
   15230:	lsr	r3, r4, ip
   15234:	orr	r3, r3, r5, lsl fp
   15238:	lsr	r2, r5, ip
   1523c:	orr	r3, r3, r5, lsr sl
   15240:	adds	r0, r0, r4
   15244:	mov	r4, r3
   15248:	lsl	r3, r2, ip
   1524c:	orr	r3, r3, r4, lsl sl
   15250:	lsl	ip, r4, ip
   15254:	orr	r3, r3, r4, lsr fp
   15258:	adc	r1, r1, r5
   1525c:	subs	r0, r0, ip
   15260:	mov	r5, r2
   15264:	sbc	r1, r1, r3
   15268:	cmp	lr, #0
   1526c:	strdne	r4, [lr]
   15270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15274:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15278:	mov	r7, r0
   1527c:	ldr	r6, [pc, #72]	; 152cc <__assert_fail@plt+0x418c>
   15280:	ldr	r5, [pc, #72]	; 152d0 <__assert_fail@plt+0x4190>
   15284:	add	r6, pc, r6
   15288:	add	r5, pc, r5
   1528c:	sub	r6, r6, r5
   15290:	mov	r8, r1
   15294:	mov	r9, r2
   15298:	bl	10e8c <calloc@plt-0x20>
   1529c:	asrs	r6, r6, #2
   152a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   152a4:	mov	r4, #0
   152a8:	add	r4, r4, #1
   152ac:	ldr	r3, [r5], #4
   152b0:	mov	r2, r9
   152b4:	mov	r1, r8
   152b8:	mov	r0, r7
   152bc:	blx	r3
   152c0:	cmp	r6, r4
   152c4:	bne	152a8 <__assert_fail@plt+0x4168>
   152c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152cc:	andeq	r1, r1, r0, lsl #25
   152d0:	andeq	r1, r1, r8, ror ip
   152d4:	bx	lr
   152d8:	ldr	r3, [pc, #12]	; 152ec <__assert_fail@plt+0x41ac>
   152dc:	mov	r1, #0
   152e0:	add	r3, pc, r3
   152e4:	ldr	r2, [r3]
   152e8:	b	11044 <__cxa_atexit@plt>
   152ec:	andeq	r1, r1, ip, lsl #28
   152f0:	mov	r2, r1
   152f4:	mov	r1, r0
   152f8:	mov	r0, #3
   152fc:	b	11104 <__xstat64@plt>

Disassembly of section .fini:

00015300 <.fini>:
   15300:	push	{r3, lr}
   15304:	pop	{r3, pc}
